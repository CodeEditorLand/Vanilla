{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from \"@xterm/xterm\";\nimport { Delayer } from \"../../../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../../../base/common/buffer.js\";\nimport { Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tcombinedDisposable,\n\tdispose,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../../base/common/uri.js\";\nimport \"./media/developer.css\";\nimport { localize, localize2 } from \"../../../../../nls.js\";\nimport { Categories } from \"../../../../../platform/action/common/actionCommonCategories.js\";\nimport { IClipboardService } from \"../../../../../platform/clipboard/common/clipboardService.js\";\nimport { ICommandService } from \"../../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { ContextKeyExpr } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { IFileService } from \"../../../../../platform/files/common/files.js\";\nimport { IOpenerService } from \"../../../../../platform/opener/common/opener.js\";\nimport { IQuickInputService } from \"../../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\ttype ICommandDetectionCapability,\n\ttype ITerminalCommand,\n\tTerminalCapability,\n} from \"../../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport {\n\tITerminalLogService,\n\tTerminalSettingId,\n} from \"../../../../../platform/terminal/common/terminal.js\";\nimport { IWorkspaceContextService } from \"../../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../../services/statusbar/browser/statusbar.js\";\nimport type {\n\tIInternalXtermTerminal,\n\tITerminalContribution,\n\tITerminalInstance,\n\tIXtermTerminal,\n} from \"../../../terminal/browser/terminal.js\";\nimport { registerTerminalAction } from \"../../../terminal/browser/terminalActions.js\";\nimport { registerTerminalContribution } from \"../../../terminal/browser/terminalExtensions.js\";\nimport type { TerminalWidgetManager } from \"../../../terminal/browser/widgets/widgetManager.js\";\nimport type { ITerminalProcessManager } from \"../../../terminal/common/terminal.js\";\nimport { TerminalContextKeys } from \"../../../terminal/common/terminalContextKey.js\";\nimport { TerminalDeveloperCommandId } from \"../common/terminal.developer.js\";\n\nregisterTerminalAction({\n\tid: TerminalDeveloperCommandId.ShowTextureAtlas,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.showTextureAtlas\",\n\t\t\"Show Terminal Texture Atlas\",\n\t),\n\tcategory: Categories.Developer,\n\tprecondition: ContextKeyExpr.or(TerminalContextKeys.isOpen),\n\trun: async (c, accessor) => {\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst openerService = accessor.get(IOpenerService);\n\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\tconst bitmap = await c.service.activeInstance?.xterm?.textureAtlas;\n\t\tif (!bitmap) {\n\t\t\treturn;\n\t\t}\n\t\tconst cwdUri = workspaceContextService.getWorkspace().folders[0].uri;\n\t\tconst fileUri = URI.joinPath(cwdUri, \"textureAtlas.png\");\n\t\tconst canvas = document.createElement(\"canvas\");\n\t\tcanvas.width = bitmap.width;\n\t\tcanvas.height = bitmap.height;\n\t\tconst ctx = canvas.getContext(\"bitmaprenderer\");\n\t\tif (!ctx) {\n\t\t\treturn;\n\t\t}\n\t\tctx.transferFromImageBitmap(bitmap);\n\t\tconst blob = await new Promise<Blob | null>((res) =>\n\t\t\tcanvas.toBlob(res),\n\t\t);\n\t\tif (!blob) {\n\t\t\treturn;\n\t\t}\n\t\tawait fileService.writeFile(\n\t\t\tfileUri,\n\t\t\tVSBuffer.wrap(new Uint8Array(await blob.arrayBuffer())),\n\t\t);\n\t\topenerService.open(fileUri);\n\t},\n});\n\nregisterTerminalAction({\n\tid: TerminalDeveloperCommandId.WriteDataToTerminal,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.writeDataToTerminal\",\n\t\t\"Write Data to Terminal\",\n\t),\n\tcategory: Categories.Developer,\n\trun: async (c, accessor) => {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst instance = await c.service.getActiveOrCreateInstance();\n\t\tawait c.service.revealActiveTerminal();\n\t\tawait instance.processReady;\n\t\tif (!instance.xterm) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot write data to terminal if xterm isn't initialized\",\n\t\t\t);\n\t\t}\n\t\tconst data = await quickInputService.input({\n\t\t\tvalue: \"\",\n\t\t\tplaceHolder: \"Enter data, use \\\\x to escape\",\n\t\t\tprompt: localize(\n\t\t\t\t\"workbench.action.terminal.writeDataToTerminal.prompt\",\n\t\t\t\t\"Enter data to write directly to the terminal, bypassing the pty\",\n\t\t\t),\n\t\t});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tlet escapedData = data.replace(/\\\\n/g, \"\\n\").replace(/\\\\r/g, \"\\r\");\n\t\twhile (true) {\n\t\t\tconst match = escapedData.match(/\\\\x([0-9a-fA-F]{2})/);\n\t\t\tif (\n\t\t\t\tmatch === null ||\n\t\t\t\tmatch.index === undefined ||\n\t\t\t\tmatch.length < 2\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tescapedData =\n\t\t\t\tescapedData.slice(0, match.index) +\n\t\t\t\tString.fromCharCode(Number.parseInt(match[1], 16)) +\n\t\t\t\tescapedData.slice(match.index + 4);\n\t\t}\n\t\tconst xterm = instance.xterm as any as IInternalXtermTerminal;\n\t\txterm._writeText(escapedData);\n\t},\n});\n\nregisterTerminalAction({\n\tid: TerminalDeveloperCommandId.RecordSession,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.recordSession\",\n\t\t\"Record Terminal Session\",\n\t),\n\tcategory: Categories.Developer,\n\trun: async (c, accessor) => {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst statusbarService = accessor.get(IStatusbarService);\n\t\tconst store = new DisposableStore();\n\n\t\t// Set up status bar entry\n\t\tconst text = localize(\n\t\t\t\"workbench.action.terminal.recordSession.recording\",\n\t\t\t\"Recording terminal session...\",\n\t\t);\n\t\tconst statusbarEntry: IStatusbarEntry = {\n\t\t\ttext,\n\t\t\tname: text,\n\t\t\tariaLabel: text,\n\t\t\tshowProgress: true,\n\t\t};\n\t\tconst statusbarHandle = statusbarService.addEntry(\n\t\t\tstatusbarEntry,\n\t\t\t\"recordSession\",\n\t\t\tStatusbarAlignment.LEFT,\n\t\t);\n\t\tstore.add(statusbarHandle);\n\n\t\t// Create, reveal and focus instance\n\t\tconst instance = await c.service.createTerminal();\n\t\tc.service.setActiveInstance(instance);\n\t\tawait c.service.revealActiveTerminal();\n\t\tawait Promise.all([\n\t\t\tinstance.processReady,\n\t\t\tinstance.focusWhenReady(true),\n\t\t]);\n\n\t\t// Record session\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tconst events: unknown[] = [];\n\t\t\tconst endRecording = () => {\n\t\t\t\tconst session = JSON.stringify(events, null, 2);\n\t\t\t\tclipboardService.writeText(session);\n\t\t\t\tstore.dispose();\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tconst timer = store.add(new Delayer(5000));\n\t\t\tstore.add(\n\t\t\t\tEvent.runAndSubscribe(instance.onDimensionsChanged, () => {\n\t\t\t\t\tevents.push({\n\t\t\t\t\t\ttype: \"resize\",\n\t\t\t\t\t\tcols: instance.cols,\n\t\t\t\t\t\trows: instance.rows,\n\t\t\t\t\t});\n\t\t\t\t\ttimer.trigger(endRecording);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tstore.add(\n\t\t\t\tcommandService.onWillExecuteCommand((e) => {\n\t\t\t\t\tevents.push({\n\t\t\t\t\t\ttype: \"command\",\n\t\t\t\t\t\tid: e.commandId,\n\t\t\t\t\t});\n\t\t\t\t\ttimer.trigger(endRecording);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tstore.add(\n\t\t\t\tinstance.onWillData((data) => {\n\t\t\t\t\tevents.push({\n\t\t\t\t\t\ttype: \"output\",\n\t\t\t\t\t\tdata,\n\t\t\t\t\t});\n\t\t\t\t\ttimer.trigger(endRecording);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tstore.add(\n\t\t\t\tinstance.onDidSendText((data) => {\n\t\t\t\t\tevents.push({\n\t\t\t\t\t\ttype: \"sendText\",\n\t\t\t\t\t\tdata,\n\t\t\t\t\t});\n\t\t\t\t\ttimer.trigger(endRecording);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tstore.add(\n\t\t\t\tinstance.xterm!.raw.onData((data) => {\n\t\t\t\t\tevents.push({\n\t\t\t\t\t\ttype: \"input\",\n\t\t\t\t\t\tdata,\n\t\t\t\t\t});\n\t\t\t\t\ttimer.trigger(endRecording);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tlet commandDetectedRegistered = false;\n\t\t\tstore.add(\n\t\t\t\tEvent.runAndSubscribe(\n\t\t\t\t\tinstance.capabilities.onDidAddCapability,\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tif (commandDetectedRegistered) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst commandDetection = instance.capabilities.get(\n\t\t\t\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!commandDetection) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstore.add(\n\t\t\t\t\t\t\tcommandDetection.promptInputModel.onDidChangeInput(\n\t\t\t\t\t\t\t\t(e) => {\n\t\t\t\t\t\t\t\t\tevents.push({\n\t\t\t\t\t\t\t\t\t\ttype: \"promptInputChange\",\n\t\t\t\t\t\t\t\t\t\tdata: commandDetection.promptInputModel.getCombinedString(),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\ttimer.trigger(endRecording);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcommandDetectedRegistered = true;\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t},\n});\n\nregisterTerminalAction({\n\tid: TerminalDeveloperCommandId.RestartPtyHost,\n\ttitle: localize2(\n\t\t\"workbench.action.terminal.restartPtyHost\",\n\t\t\"Restart Pty Host\",\n\t),\n\tcategory: Categories.Developer,\n\trun: async (c, accessor) => {\n\t\tconst logService = accessor.get(ITerminalLogService);\n\t\tconst backends = Array.from(c.instanceService.getRegisteredBackends());\n\t\tconst unresponsiveBackends = backends.filter((e) => !e.isResponsive);\n\t\t// Restart only unresponsive backends if there are any\n\t\tconst restartCandidates =\n\t\t\tunresponsiveBackends.length > 0 ? unresponsiveBackends : backends;\n\t\tfor (const backend of restartCandidates) {\n\t\t\tlogService.warn(\n\t\t\t\t`Restarting pty host for authority \"${backend.remoteAuthority}\"`,\n\t\t\t);\n\t\t\tbackend.restartPtyHost();\n\t\t}\n\t},\n});\n\nclass DevModeContribution extends Disposable implements ITerminalContribution {\n\tstatic readonly ID = \"terminal.devMode\";\n\tstatic get(instance: ITerminalInstance): DevModeContribution | null {\n\t\treturn instance.getContribution<DevModeContribution>(\n\t\t\tDevModeContribution.ID,\n\t\t);\n\t}\n\n\tprivate _xterm: (IXtermTerminal & { raw: Terminal }) | undefined;\n\tprivate readonly _activeDevModeDisposables = new MutableDisposable();\n\tprivate _currentColor = 0;\n\n\tprivate _statusbarEntry: IStatusbarEntry | undefined;\n\tprivate readonly _statusbarEntryAccessor: MutableDisposable<IStatusbarEntryAccessor> =\n\t\tthis._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\tprocessManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.DevMode)) {\n\t\t\t\tthis._updateDevMode();\n\t\t\t}\n\t\t}));\n\t}\n\n\txtermReady(xterm: IXtermTerminal & { raw: Terminal }): void {\n\t\tthis._xterm = xterm;\n\t\tthis._updateDevMode();\n\t}\n\n\tprivate _updateDevMode() {\n\t\tconst devMode: boolean = this._isEnabled();\n\t\tthis._xterm?.raw.element?.classList.toggle(\"dev-mode\", devMode);\n\n\t\tconst commandDetection = this._instance.capabilities.get(\n\t\t\tTerminalCapability.CommandDetection,\n\t\t);\n\t\tif (devMode) {\n\t\t\tif (commandDetection) {\n\t\t\t\tconst commandDecorations = new Map<\n\t\t\t\t\tITerminalCommand,\n\t\t\t\t\tIDisposable[]\n\t\t\t\t>();\n\t\t\t\tthis._activeDevModeDisposables.value = combinedDisposable(\n\t\t\t\t\t// Prompt input\n\t\t\t\t\tthis._instance.onDidBlur(() => this._updateDevMode()),\n\t\t\t\t\tthis._instance.onDidFocus(() => this._updateDevMode()),\n\t\t\t\t\tcommandDetection.promptInputModel.onDidChangeInput(() =>\n\t\t\t\t\t\tthis._updateDevMode(),\n\t\t\t\t\t),\n\t\t\t\t\t// Sequence markers\n\t\t\t\t\tcommandDetection.onCommandFinished((command) => {\n\t\t\t\t\t\tconst colorClass = `color-${this._currentColor}`;\n\t\t\t\t\t\tconst decorations: IDisposable[] = [];\n\t\t\t\t\t\tcommandDecorations.set(command, decorations);\n\t\t\t\t\t\tif (command.promptStartMarker) {\n\t\t\t\t\t\t\tconst d =\n\t\t\t\t\t\t\t\tthis._instance.xterm!.raw?.registerDecoration({\n\t\t\t\t\t\t\t\t\tmarker: command.promptStartMarker,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (d) {\n\t\t\t\t\t\t\t\tdecorations.push(d);\n\t\t\t\t\t\t\t\td.onRender((e) => {\n\t\t\t\t\t\t\t\t\te.textContent = \"A\";\n\t\t\t\t\t\t\t\t\te.classList.add(\n\t\t\t\t\t\t\t\t\t\t\"xterm-sequence-decoration\",\n\t\t\t\t\t\t\t\t\t\t\"top\",\n\t\t\t\t\t\t\t\t\t\t\"left\",\n\t\t\t\t\t\t\t\t\t\tcolorClass,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command.marker) {\n\t\t\t\t\t\t\tconst d =\n\t\t\t\t\t\t\t\tthis._instance.xterm!.raw?.registerDecoration({\n\t\t\t\t\t\t\t\t\tmarker: command.marker,\n\t\t\t\t\t\t\t\t\tx: command.startX,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (d) {\n\t\t\t\t\t\t\t\tdecorations.push(d);\n\t\t\t\t\t\t\t\td.onRender((e) => {\n\t\t\t\t\t\t\t\t\te.textContent = \"B\";\n\t\t\t\t\t\t\t\t\te.classList.add(\n\t\t\t\t\t\t\t\t\t\t\"xterm-sequence-decoration\",\n\t\t\t\t\t\t\t\t\t\t\"top\",\n\t\t\t\t\t\t\t\t\t\t\"right\",\n\t\t\t\t\t\t\t\t\t\tcolorClass,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command.executedMarker) {\n\t\t\t\t\t\t\tconst d =\n\t\t\t\t\t\t\t\tthis._instance.xterm!.raw?.registerDecoration({\n\t\t\t\t\t\t\t\t\tmarker: command.executedMarker,\n\t\t\t\t\t\t\t\t\tx: command.executedX,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (d) {\n\t\t\t\t\t\t\t\tdecorations.push(d);\n\t\t\t\t\t\t\t\td.onRender((e) => {\n\t\t\t\t\t\t\t\t\te.textContent = \"C\";\n\t\t\t\t\t\t\t\t\te.classList.add(\n\t\t\t\t\t\t\t\t\t\t\"xterm-sequence-decoration\",\n\t\t\t\t\t\t\t\t\t\t\"bottom\",\n\t\t\t\t\t\t\t\t\t\t\"left\",\n\t\t\t\t\t\t\t\t\t\tcolorClass,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command.endMarker) {\n\t\t\t\t\t\t\tconst d =\n\t\t\t\t\t\t\t\tthis._instance.xterm!.raw?.registerDecoration({\n\t\t\t\t\t\t\t\t\tmarker: command.endMarker,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (d) {\n\t\t\t\t\t\t\t\tdecorations.push(d);\n\t\t\t\t\t\t\t\td.onRender((e) => {\n\t\t\t\t\t\t\t\t\te.textContent = \"D\";\n\t\t\t\t\t\t\t\t\te.classList.add(\n\t\t\t\t\t\t\t\t\t\t\"xterm-sequence-decoration\",\n\t\t\t\t\t\t\t\t\t\t\"bottom\",\n\t\t\t\t\t\t\t\t\t\t\"right\",\n\t\t\t\t\t\t\t\t\t\tcolorClass,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._currentColor = (this._currentColor + 1) % 2;\n\t\t\t\t\t}),\n\t\t\t\t\tcommandDetection.onCommandInvalidated((commands) => {\n\t\t\t\t\t\tfor (const c of commands) {\n\t\t\t\t\t\t\tconst decorations = commandDecorations.get(c);\n\t\t\t\t\t\t\tif (decorations) {\n\t\t\t\t\t\t\t\tdispose(decorations);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcommandDecorations.delete(c);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tthis._updatePromptInputStatusBar(commandDetection);\n\t\t\t} else {\n\t\t\t\tthis._activeDevModeDisposables.value =\n\t\t\t\t\tthis._instance.capabilities.onDidAddCapabilityType((e) => {\n\t\t\t\t\t\tif (e === TerminalCapability.CommandDetection) {\n\t\t\t\t\t\t\tthis._updateDevMode();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis._activeDevModeDisposables.clear();\n\t\t}\n\t}\n\n\tprivate _isEnabled(): boolean {\n\t\treturn (\n\t\t\tthis._configurationService.getValue(TerminalSettingId.DevMode) ||\n\t\t\tfalse\n\t\t);\n\t}\n\n\tprivate _updatePromptInputStatusBar(\n\t\tcommandDetection: ICommandDetectionCapability,\n\t) {\n\t\tconst promptInputModel = commandDetection.promptInputModel;\n\t\tif (promptInputModel) {\n\t\t\tconst name = localize(\"terminalDevMode\", \"Terminal Dev Mode\");\n\t\t\tconst isExecuting = promptInputModel.cursorIndex === -1;\n\t\t\tthis._statusbarEntry = {\n\t\t\t\tname,\n\t\t\t\ttext: `$(${isExecuting ? \"loading~spin\" : \"terminal\"}) ${promptInputModel.getCombinedString()}`,\n\t\t\t\tariaLabel: name,\n\t\t\t\ttooltip: \"The detected terminal prompt input\",\n\t\t\t\tkind: \"prominent\",\n\t\t\t};\n\t\t\tif (this._statusbarEntryAccessor.value) {\n\t\t\t\tthis._statusbarEntryAccessor.value.update(this._statusbarEntry);\n\t\t\t} else {\n\t\t\t\tthis._statusbarEntryAccessor.value =\n\t\t\t\t\tthis._statusbarService.addEntry(\n\t\t\t\t\t\tthis._statusbarEntry,\n\t\t\t\t\t\t`terminal.promptInput.${this._instance.instanceId}`,\n\t\t\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tthis._statusbarService.updateEntryVisibility(\n\t\t\t\t`terminal.promptInput.${this._instance.instanceId}`,\n\t\t\t\tthis._instance.hasFocus,\n\t\t\t);\n\t\t}\n\t}\n}\n\nregisterTerminalContribution(DevModeContribution.ID, DevModeContribution);\n"],
  "mappings": "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",
  "names": ["e"]
}
