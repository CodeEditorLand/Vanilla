{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/typeAhead/test/browser/terminalTypeAhead.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport type { IBuffer, Terminal } from '@xterm/xterm';\nimport { SinonStub, stub, useFakeTimers } from 'sinon';\nimport { Emitter } from '../../../../../../base/common/event.js';\nimport { CharPredictState, IPrediction, PredictionStats, TypeAheadAddon } from '../../browser/terminalTypeAheadAddon.js';\nimport { IBeforeProcessDataEvent, ITerminalProcessManager } from '../../../../terminal/common/terminal.js';\nimport { ITelemetryService } from '../../../../../../platform/telemetry/common/telemetry.js';\nimport { TestConfigurationService } from '../../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { DEFAULT_LOCAL_ECHO_EXCLUDE, type ITerminalTypeAheadConfiguration } from '../../common/terminalTypeAheadConfiguration.js';\n\nconst CSI = `\\x1b[`;\n\nconst enum CursorMoveDirection {\n\tBack = 'D',\n\tForwards = 'C',\n}\n\nsuite('Workbench - Terminal Typeahead', () => {\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('PredictionStats', () => {\n\t\tlet stats: PredictionStats;\n\t\tlet add: Emitter<IPrediction>;\n\t\tlet succeed: Emitter<IPrediction>;\n\t\tlet fail: Emitter<IPrediction>;\n\n\t\tsetup(() => {\n\t\t\tadd = ds.add(new Emitter<IPrediction>());\n\t\t\tsucceed = ds.add(new Emitter<IPrediction>());\n\t\t\tfail = ds.add(new Emitter<IPrediction>());\n\n\t\t\tstats = ds.add(new PredictionStats({\n\t\t\t\tonPredictionAdded: add.event,\n\t\t\t\tonPredictionSucceeded: succeed.event,\n\t\t\t\tonPredictionFailed: fail.event,\n\t\t\t} as any));\n\t\t});\n\n\t\ttest('creates sane data', () => {\n\t\t\tconst stubs = createPredictionStubs(5);\n\t\t\tconst clock = useFakeTimers();\n\t\t\ttry {\n\t\t\t\tfor (const s of stubs) { add.fire(s); }\n\n\t\t\t\tfor (let i = 0; i < stubs.length; i++) {\n\t\t\t\t\tclock.tick(100);\n\t\t\t\t\t(i % 2 ? fail : succeed).fire(stubs[i]);\n\t\t\t\t}\n\n\t\t\t\tassert.strictEqual(stats.accuracy, 3 / 5);\n\t\t\t\tassert.strictEqual(stats.sampleSize, 5);\n\t\t\t\tassert.deepStrictEqual(stats.latency, {\n\t\t\t\t\tcount: 3,\n\t\t\t\t\tmin: 100,\n\t\t\t\t\tmax: 500,\n\t\t\t\t\tmedian: 300\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tclock.restore();\n\t\t\t}\n\t\t});\n\n\t\ttest('circular buffer', () => {\n\t\t\tconst bufferSize = 24;\n\t\t\tconst stubs = createPredictionStubs(bufferSize * 2);\n\n\t\t\tfor (const s of stubs.slice(0, bufferSize)) { add.fire(s); succeed.fire(s); }\n\t\t\tassert.strictEqual(stats.accuracy, 1);\n\n\t\t\tfor (const s of stubs.slice(bufferSize, bufferSize * 3 / 2)) { add.fire(s); fail.fire(s); }\n\t\t\tassert.strictEqual(stats.accuracy, 0.5);\n\n\t\t\tfor (const s of stubs.slice(bufferSize * 3 / 2)) { add.fire(s); fail.fire(s); }\n\t\t\tassert.strictEqual(stats.accuracy, 0);\n\t\t});\n\t});\n\n\tsuite('timeline', () => {\n\t\tlet onBeforeProcessData: Emitter<IBeforeProcessDataEvent>;\n\t\tlet publicLog: SinonStub;\n\t\tlet config: ITerminalTypeAheadConfiguration;\n\t\tlet addon: TestTypeAheadAddon;\n\n\t\tconst predictedHelloo = [\n\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t`${CSI}2;7H`, // move cursor\n\t\t\t'o', // new character\n\t\t\t`${CSI}2;8H`, // place cursor back at end of line\n\t\t\t`${CSI}?25h`, // show cursor\n\t\t].join('');\n\n\t\tconst expectProcessed = (input: string, output: string) => {\n\t\t\tconst evt = { data: input };\n\t\t\tonBeforeProcessData.fire(evt);\n\t\t\tassert.strictEqual(JSON.stringify(evt.data), JSON.stringify(output));\n\t\t};\n\n\t\tsetup(() => {\n\t\t\tonBeforeProcessData = ds.add(new Emitter<IBeforeProcessDataEvent>());\n\t\t\tconfig = upcastPartial<ITerminalTypeAheadConfiguration>({\n\t\t\t\tlocalEchoStyle: 'italic',\n\t\t\t\tlocalEchoLatencyThreshold: 0,\n\t\t\t\tlocalEchoExcludePrograms: DEFAULT_LOCAL_ECHO_EXCLUDE,\n\t\t\t});\n\t\t\tpublicLog = stub();\n\t\t\taddon = new TestTypeAheadAddon(\n\t\t\t\tupcastPartial<ITerminalProcessManager>({ onBeforeProcessData: onBeforeProcessData.event }),\n\t\t\t\tnew TestConfigurationService({ terminal: { integrated: { ...config } } }),\n\t\t\t\tupcastPartial<ITelemetryService>({ publicLog })\n\t\t\t);\n\t\t\taddon.unlockMakingPredictions();\n\t\t});\n\n\t\tteardown(() => {\n\t\t\taddon.dispose();\n\t\t});\n\n\t\ttest('predicts a single character', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\tt.expectWritten(`${CSI}3mo${CSI}23m`);\n\t\t});\n\n\t\ttest('validates character prediction', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed('o', predictedHelloo);\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('validates zsh prediction (#112842)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed('o', predictedHelloo);\n\n\t\t\tt.onData('x');\n\t\t\texpectProcessed('\\box', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;8H`, // move cursor\n\t\t\t\t'\\box', // new data\n\t\t\t\t`${CSI}2;9H`, // place cursor back at end of line\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('does not validate zsh prediction on differing lookbehindn (#112842)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed('o', predictedHelloo);\n\n\t\t\tt.onData('x');\n\t\t\texpectProcessed('\\bqx', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;8H`, // move cursor cursor\n\t\t\t\t`${CSI}X`, // delete character\n\t\t\t\t`${CSI}0m`, // reset style\n\t\t\t\t'\\bqx', // new data\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0.5);\n\t\t});\n\n\t\ttest('rolls back character prediction', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\n\t\t\texpectProcessed('q', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor cursor\n\t\t\t\t`${CSI}X`, // delete character\n\t\t\t\t`${CSI}0m`, // reset style\n\t\t\t\t'q', // new character\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0);\n\t\t});\n\n\t\ttest('handles left arrow when we hit the boundary', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\n\t\t\tconst cursorXBefore = addon.physicalCursor(t.terminal.buffer.active)?.x!;\n\t\t\tt.onData(`${CSI}${CursorMoveDirection.Back}`);\n\t\t\tt.expectWritten('');\n\n\t\t\t// Trigger rollback because we don't expect this data\n\t\t\tonBeforeProcessData.fire({ data: 'xy' });\n\n\t\t\tassert.strictEqual(\n\t\t\t\taddon.physicalCursor(t.terminal.buffer.active)?.x,\n\t\t\t\t// The cursor should not have changed because we've hit the\n\t\t\t\t// boundary (start of prompt)\n\t\t\t\tcursorXBefore);\n\t\t});\n\n\t\ttest('handles right arrow when we hit the boundary', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\n\t\t\tconst cursorXBefore = addon.physicalCursor(t.terminal.buffer.active)?.x!;\n\t\t\tt.onData(`${CSI}${CursorMoveDirection.Forwards}`);\n\t\t\tt.expectWritten('');\n\n\t\t\t// Trigger rollback because we don't expect this data\n\t\t\tonBeforeProcessData.fire({ data: 'xy' });\n\n\t\t\tassert.strictEqual(\n\t\t\t\taddon.physicalCursor(t.terminal.buffer.active)?.x,\n\t\t\t\t// The cursor should not have changed because we've hit the\n\t\t\t\t// boundary (end of prompt)\n\t\t\t\tcursorXBefore);\n\t\t});\n\n\t\ttest('internal cursor state is reset when all predictions are undone', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\n\t\t\tconst cursorXBefore = addon.physicalCursor(t.terminal.buffer.active)?.x!;\n\t\t\tt.onData(`${CSI}${CursorMoveDirection.Back}`);\n\t\t\tt.expectWritten('');\n\t\t\taddon.undoAllPredictions();\n\n\t\t\tassert.strictEqual(\n\t\t\t\taddon.physicalCursor(t.terminal.buffer.active)?.x,\n\t\t\t\t// The cursor should not have changed because we've hit the\n\t\t\t\t// boundary (start of prompt)\n\t\t\t\tcursorXBefore);\n\t\t});\n\n\t\ttest('restores cursor graphics mode', () => {\n\t\t\tconst t = ds.add(createMockTerminal({\n\t\t\t\tlines: ['hello|'],\n\t\t\t\tcursorAttrs: { isAttributeDefault: false, isBold: true, isFgPalette: true, getFgColor: 1 },\n\t\t\t}));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\n\t\t\texpectProcessed('q', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor cursor\n\t\t\t\t`${CSI}X`, // delete character\n\t\t\t\t`${CSI}1;38;5;1m`, // reset style\n\t\t\t\t'q', // new character\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0);\n\t\t});\n\n\t\ttest('validates against and applies graphics mode on predicted', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed(`${CSI}4mo`, [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor\n\t\t\t\t`${CSI}4m`, // new PTY's style\n\t\t\t\t'o', // new character\n\t\t\t\t`${CSI}2;8H`, // place cursor back at end of line\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('ignores cursor hides or shows', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed(`${CSI}?25lo${CSI}?25h`, [\n\t\t\t\t`${CSI}?25l`, // hide cursor from PTY\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor\n\t\t\t\t'o', // new character\n\t\t\t\t`${CSI}?25h`, // show cursor from PTY\n\t\t\t\t`${CSI}2;8H`, // place cursor back at end of line\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('matches backspace at EOL (bash style)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('\\x7F');\n\t\t\texpectProcessed(`\\b${CSI}K`, `\\b${CSI}K`);\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('matches backspace at EOL (zsh style)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('\\x7F');\n\t\t\texpectProcessed('\\b \\b', '\\b \\b');\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('gradually matches backspace', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('\\x7F');\n\t\t\texpectProcessed('\\b', '');\n\t\t\texpectProcessed(' \\b', '\\b \\b');\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('restores old character after invalid backspace', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hel|lo'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\t\t\tt.onData('\\x7F');\n\t\t\tt.expectWritten(`${CSI}2;4H${CSI}X`);\n\t\t\texpectProcessed('x', `${CSI}?25l${CSI}0ml${CSI}2;5H${CSI}0mx${CSI}?25h`);\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0);\n\t\t});\n\n\t\ttest('waits for validation before deleting to left of cursor', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\n\t\t\t// initially should not backspace (until the server confirms it)\n\t\t\tt.onData('\\x7F');\n\t\t\tt.expectWritten('');\n\t\t\texpectProcessed('\\b \\b', '\\b \\b');\n\t\t\tt.cursor.x--;\n\n\t\t\t// enter input on the column...\n\t\t\tt.onData('o');\n\t\t\tonBeforeProcessData.fire({ data: 'o' });\n\t\t\tt.cursor.x++;\n\t\t\tt.clearWritten();\n\n\t\t\t// now that the column is 'unlocked', we should be able to predict backspace on it\n\t\t\tt.onData('\\x7F');\n\t\t\tt.expectWritten(`${CSI}2;6H${CSI}X`);\n\t\t});\n\n\t\ttest('waits for first valid prediction on a line', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.lockMakingPredictions();\n\t\t\taddon.activate(t.terminal);\n\n\t\t\tt.onData('o');\n\t\t\tt.expectWritten('');\n\t\t\texpectProcessed('o', 'o');\n\n\t\t\tt.onData('o');\n\t\t\tt.expectWritten(`${CSI}3mo${CSI}23m`);\n\t\t});\n\n\t\ttest('disables on title change', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\n\t\t\taddon.reevaluateNow();\n\t\t\tassert.strictEqual(addon.isShowing, true, 'expected to show initially');\n\n\t\t\tt.onTitleChange.fire('foo - VIM.exe');\n\t\t\taddon.reevaluateNow();\n\t\t\tassert.strictEqual(addon.isShowing, false, 'expected to hide when vim is open');\n\n\t\t\tt.onTitleChange.fire('foo - git.exe');\n\t\t\taddon.reevaluateNow();\n\t\t\tassert.strictEqual(addon.isShowing, true, 'expected to show again after vim closed');\n\t\t});\n\n\t\ttest('adds line wrap prediction even if behind a boundary', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.lockMakingPredictions();\n\t\t\taddon.activate(t.terminal);\n\n\t\t\tt.onData('hi'.repeat(50));\n\t\t\tt.expectWritten('');\n\t\t\texpectProcessed('hi', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t'hi', // this greeting characters\n\t\t\t\t...new Array(36).fill(`${CSI}3mh${CSI}23m${CSI}3mi${CSI}23m`), // rest of the greetings that fit on this line\n\t\t\t\t`${CSI}2;81H`, // move to end of line\n\t\t\t\t`${CSI}?25h`\n\t\t\t].join(''));\n\t\t});\n\t});\n});\n\nclass TestTypeAheadAddon extends TypeAheadAddon {\n\tunlockMakingPredictions() {\n\t\tthis._lastRow = { y: 1, startingX: 100, endingX: 100, charState: CharPredictState.Validated };\n\t}\n\n\tlockMakingPredictions() {\n\t\tthis._lastRow = undefined;\n\t}\n\n\tunlockNavigating() {\n\t\tthis._lastRow = { y: 1, startingX: 1, endingX: 1, charState: CharPredictState.Validated };\n\t}\n\n\treevaluateNow() {\n\t\tthis._reevaluatePredictorStateNow(this.stats!, this._timeline!);\n\t}\n\n\tget isShowing() {\n\t\treturn !!this._timeline?.isShowingPredictions;\n\t}\n\n\tundoAllPredictions() {\n\t\tthis._timeline?.undoAllPredictions();\n\t}\n\n\tphysicalCursor(buffer: IBuffer) {\n\t\treturn this._timeline?.physicalCursor(buffer);\n\t}\n\n\ttentativeCursor(buffer: IBuffer) {\n\t\treturn this._timeline?.tentativeCursor(buffer);\n\t}\n}\n\nfunction upcastPartial<T>(v: Partial<T>): T {\n\treturn v as T;\n}\n\nfunction createPredictionStubs(n: number) {\n\treturn new Array(n).fill(0).map(stubPrediction);\n}\n\nfunction stubPrediction(): IPrediction {\n\treturn {\n\t\tapply: () => '',\n\t\trollback: () => '',\n\t\tmatches: () => 0,\n\t\trollForwards: () => '',\n\t};\n}\n\nfunction createMockTerminal({ lines, cursorAttrs }: {\n\tlines: string[];\n\tcursorAttrs?: any;\n}) {\n\tconst ds = new DisposableStore();\n\tconst written: string[] = [];\n\tconst cursor = { y: 1, x: 1 };\n\tconst onTitleChange = ds.add(new Emitter<string>());\n\tconst onData = ds.add(new Emitter<string>());\n\tconst csiEmitter = ds.add(new Emitter<number[]>());\n\n\tfor (let y = 0; y < lines.length; y++) {\n\t\tconst line = lines[y];\n\t\tif (line.includes('|')) {\n\t\t\tcursor.y = y + 1;\n\t\t\tcursor.x = line.indexOf('|') + 1;\n\t\t\tlines[y] = line.replace('|', ''); // CodeQL [SM02383] replacing the first occurrence is intended\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn {\n\t\twritten,\n\t\tcursor,\n\t\texpectWritten: (s: string) => {\n\t\t\tassert.strictEqual(JSON.stringify(written.join('')), JSON.stringify(s));\n\t\t\twritten.splice(0, written.length);\n\t\t},\n\t\tclearWritten: () => written.splice(0, written.length),\n\t\tonData: (s: string) => onData.fire(s),\n\t\tcsiEmitter,\n\t\tonTitleChange,\n\t\tdispose: () => ds.dispose(),\n\t\tterminal: {\n\t\t\tcols: 80,\n\t\t\trows: 5,\n\t\t\tonResize: new Emitter<void>().event,\n\t\t\tonData: onData.event,\n\t\t\tonTitleChange: onTitleChange.event,\n\t\t\tparser: {\n\t\t\t\tregisterCsiHandler(_: unknown, callback: () => void) {\n\t\t\t\t\tds.add(csiEmitter.event(callback));\n\t\t\t\t},\n\t\t\t},\n\t\t\twrite(line: string) {\n\t\t\t\twritten.push(line);\n\t\t\t},\n\t\t\t_core: {\n\t\t\t\t_inputHandler: {\n\t\t\t\t\t_curAttrData: mockCell('', cursorAttrs)\n\t\t\t\t},\n\t\t\t\twriteSync() {\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuffer: {\n\t\t\t\tactive: {\n\t\t\t\t\ttype: 'normal',\n\t\t\t\t\tbaseY: 0,\n\t\t\t\t\tget cursorY() { return cursor.y; },\n\t\t\t\t\tget cursorX() { return cursor.x; },\n\t\t\t\t\tgetLine(y: number) {\n\t\t\t\t\t\tconst s = lines[y - 1] || '';\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlength: s.length,\n\t\t\t\t\t\t\tgetCell: (x: number) => mockCell(s[x - 1] || ''),\n\t\t\t\t\t\t\ttranslateToString: (trim: boolean, start = 0, end = s.length) => {\n\t\t\t\t\t\t\t\tconst out = s.slice(start, end);\n\t\t\t\t\t\t\t\treturn trim ? out.trimRight() : out;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t} as unknown as Terminal\n\t};\n}\n\nfunction mockCell(char: string, attrs: { [key: string]: unknown } = {}) {\n\treturn new Proxy({}, {\n\t\tget(_, prop) {\n\t\t\tif (typeof prop === 'string' && attrs.hasOwnProperty(prop)) {\n\t\t\t\treturn () => attrs[prop];\n\t\t\t}\n\n\t\t\tswitch (prop) {\n\t\t\t\tcase 'getWidth':\n\t\t\t\t\treturn () => 1;\n\t\t\t\tcase 'getChars':\n\t\t\t\t\treturn () => char;\n\t\t\t\tcase 'getCode':\n\t\t\t\t\treturn () => char.charCodeAt(0) || 0;\n\t\t\t\tcase 'isAttributeDefault':\n\t\t\t\t\treturn () => true;\n\t\t\t\tdefault:\n\t\t\t\t\treturn String(prop).startsWith('is') ? (() => false) : (() => 0);\n\t\t\t}\n\t\t},\n\t});\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AAEnB,SAAS,WAAW,MAAM,qBAAqB;AAC/C,SAAS,eAAe;AACxB,SAAS,kBAAkB,aAAa,iBAAiB,sBAAsB;AAC/E,SAAS,yBAAyB,+BAA+B;AACjE,SAAS,yBAAyB;AAClC,SAAS,gCAAgC;AACzC,SAAS,+CAA+C;AACxD,SAAS,uBAAuB;AAChC,SAAS,kCAAwE;AAEjF,MAAM,MAAM;AAEZ,IAAW,sBAAX,kBAAWA,yBAAX;AACC,EAAAA,qBAAA,UAAO;AACP,EAAAA,qBAAA,cAAW;AAFD,SAAAA;AAAA,GAAA;AAKX,MAAM,kCAAkC,MAAM;AAC7C,QAAM,KAAK,wCAAwC;AAEnD,QAAM,mBAAmB,MAAM;AAC9B,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,UAAM,MAAM;AACX,YAAM,GAAG,IAAI,IAAI,QAAqB,CAAC;AACvC,gBAAU,GAAG,IAAI,IAAI,QAAqB,CAAC;AAC3C,aAAO,GAAG,IAAI,IAAI,QAAqB,CAAC;AAExC,cAAQ,GAAG,IAAI,IAAI,gBAAgB;AAAA,QAClC,mBAAmB,IAAI;AAAA,QACvB,uBAAuB,QAAQ;AAAA,QAC/B,oBAAoB,KAAK;AAAA,MAC1B,CAAQ,CAAC;AAAA,IACV,CAAC;AAED,SAAK,qBAAqB,MAAM;AAC/B,YAAM,QAAQ,sBAAsB,CAAC;AACrC,YAAM,QAAQ,cAAc;AAC5B,UAAI;AACH,mBAAW,KAAK,OAAO;AAAE,cAAI,KAAK,CAAC;AAAA,QAAG;AAEtC,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,gBAAM,KAAK,GAAG;AACd,WAAC,IAAI,IAAI,OAAO,SAAS,KAAK,MAAM,CAAC,CAAC;AAAA,QACvC;AAEA,eAAO,YAAY,MAAM,UAAU,IAAI,CAAC;AACxC,eAAO,YAAY,MAAM,YAAY,CAAC;AACtC,eAAO,gBAAgB,MAAM,SAAS;AAAA,UACrC,OAAO;AAAA,UACP,KAAK;AAAA,UACL,KAAK;AAAA,UACL,QAAQ;AAAA,QACT,CAAC;AAAA,MACF,UAAE;AACD,cAAM,QAAQ;AAAA,MACf;AAAA,IACD,CAAC;AAED,SAAK,mBAAmB,MAAM;AAC7B,YAAM,aAAa;AACnB,YAAM,QAAQ,sBAAsB,aAAa,CAAC;AAElD,iBAAW,KAAK,MAAM,MAAM,GAAG,UAAU,GAAG;AAAE,YAAI,KAAK,CAAC;AAAG,gBAAQ,KAAK,CAAC;AAAA,MAAG;AAC5E,aAAO,YAAY,MAAM,UAAU,CAAC;AAEpC,iBAAW,KAAK,MAAM,MAAM,YAAY,aAAa,IAAI,CAAC,GAAG;AAAE,YAAI,KAAK,CAAC;AAAG,aAAK,KAAK,CAAC;AAAA,MAAG;AAC1F,aAAO,YAAY,MAAM,UAAU,GAAG;AAEtC,iBAAW,KAAK,MAAM,MAAM,aAAa,IAAI,CAAC,GAAG;AAAE,YAAI,KAAK,CAAC;AAAG,aAAK,KAAK,CAAC;AAAA,MAAG;AAC9E,aAAO,YAAY,MAAM,UAAU,CAAC;AAAA,IACrC,CAAC;AAAA,EACF,CAAC;AAED,QAAM,YAAY,MAAM;AACvB,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,UAAM,kBAAkB;AAAA,MACvB,GAAG,GAAG;AAAA;AAAA,MACN,GAAG,GAAG;AAAA;AAAA,MACN;AAAA;AAAA,MACA,GAAG,GAAG;AAAA;AAAA,MACN,GAAG,GAAG;AAAA;AAAA,IACP,EAAE,KAAK,EAAE;AAET,UAAM,kBAAkB,wBAAC,OAAe,WAAmB;AAC1D,YAAM,MAAM,EAAE,MAAM,MAAM;AAC1B,0BAAoB,KAAK,GAAG;AAC5B,aAAO,YAAY,KAAK,UAAU,IAAI,IAAI,GAAG,KAAK,UAAU,MAAM,CAAC;AAAA,IACpE,GAJwB;AAMxB,UAAM,MAAM;AACX,4BAAsB,GAAG,IAAI,IAAI,QAAiC,CAAC;AACnE,eAAS,cAA+C;AAAA,QACvD,gBAAgB;AAAA,QAChB,2BAA2B;AAAA,QAC3B,0BAA0B;AAAA,MAC3B,CAAC;AACD,kBAAY,KAAK;AACjB,cAAQ,IAAI;AAAA,QACX,cAAuC,EAAE,qBAAqB,oBAAoB,MAAM,CAAC;AAAA,QACzF,IAAI,yBAAyB,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,OAAO,EAAE,EAAE,CAAC;AAAA,QACxE,cAAiC,EAAE,UAAU,CAAC;AAAA,MAC/C;AACA,YAAM,wBAAwB;AAAA,IAC/B,CAAC;AAED,aAAS,MAAM;AACd,YAAM,QAAQ;AAAA,IACf,CAAC;AAED,SAAK,+BAA+B,MAAM;AACzC,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AACZ,QAAE,cAAc,GAAG,GAAG,MAAM,GAAG,KAAK;AAAA,IACrC,CAAC;AAED,SAAK,kCAAkC,MAAM;AAC5C,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AACZ,sBAAgB,KAAK,eAAe;AACpC,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,sCAAsC,MAAM;AAChD,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AACZ,sBAAgB,KAAK,eAAe;AAEpC,QAAE,OAAO,GAAG;AACZ,sBAAgB,QAAQ;AAAA,QACvB,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN;AAAA;AAAA,QACA,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,MACP,EAAE,KAAK,EAAE,CAAC;AACV,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,uEAAuE,MAAM;AACjF,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AACZ,sBAAgB,KAAK,eAAe;AAEpC,QAAE,OAAO,GAAG;AACZ,sBAAgB,QAAQ;AAAA,QACvB,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN;AAAA;AAAA,QACA,GAAG,GAAG;AAAA;AAAA,MACP,EAAE,KAAK,EAAE,CAAC;AACV,aAAO,YAAY,MAAM,OAAO,UAAU,GAAG;AAAA,IAC9C,CAAC;AAED,SAAK,mCAAmC,MAAM;AAC7C,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AAEZ,sBAAgB,KAAK;AAAA,QACpB,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN;AAAA;AAAA,QACA,GAAG,GAAG;AAAA;AAAA,MACP,EAAE,KAAK,EAAE,CAAC;AACV,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,+CAA+C,MAAM;AACzD,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACrD,YAAM,SAAS,EAAE,QAAQ;AACzB,YAAM,iBAAiB;AAEvB,YAAM,gBAAgB,MAAM,eAAe,EAAE,SAAS,OAAO,MAAM,GAAG;AACtE,QAAE,OAAO,GAAG,GAAG,GAAG,cAAwB,EAAE;AAC5C,QAAE,cAAc,EAAE;AAGlB,0BAAoB,KAAK,EAAE,MAAM,KAAK,CAAC;AAEvC,aAAO;AAAA,QACN,MAAM,eAAe,EAAE,SAAS,OAAO,MAAM,GAAG;AAAA;AAAA;AAAA,QAGhD;AAAA,MAAa;AAAA,IACf,CAAC;AAED,SAAK,gDAAgD,MAAM;AAC1D,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACrD,YAAM,SAAS,EAAE,QAAQ;AACzB,YAAM,iBAAiB;AAEvB,YAAM,gBAAgB,MAAM,eAAe,EAAE,SAAS,OAAO,MAAM,GAAG;AACtE,QAAE,OAAO,GAAG,GAAG,GAAG,kBAA4B,EAAE;AAChD,QAAE,cAAc,EAAE;AAGlB,0BAAoB,KAAK,EAAE,MAAM,KAAK,CAAC;AAEvC,aAAO;AAAA,QACN,MAAM,eAAe,EAAE,SAAS,OAAO,MAAM,GAAG;AAAA;AAAA;AAAA,QAGhD;AAAA,MAAa;AAAA,IACf,CAAC;AAED,SAAK,kEAAkE,MAAM;AAC5E,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACrD,YAAM,SAAS,EAAE,QAAQ;AACzB,YAAM,iBAAiB;AAEvB,YAAM,gBAAgB,MAAM,eAAe,EAAE,SAAS,OAAO,MAAM,GAAG;AACtE,QAAE,OAAO,GAAG,GAAG,GAAG,cAAwB,EAAE;AAC5C,QAAE,cAAc,EAAE;AAClB,YAAM,mBAAmB;AAEzB,aAAO;AAAA,QACN,MAAM,eAAe,EAAE,SAAS,OAAO,MAAM,GAAG;AAAA;AAAA;AAAA,QAGhD;AAAA,MAAa;AAAA,IACf,CAAC;AAED,SAAK,iCAAiC,MAAM;AAC3C,YAAM,IAAI,GAAG,IAAI,mBAAmB;AAAA,QACnC,OAAO,CAAC,QAAQ;AAAA,QAChB,aAAa,EAAE,oBAAoB,OAAO,QAAQ,MAAM,aAAa,MAAM,YAAY,EAAE;AAAA,MAC1F,CAAC,CAAC;AACF,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AAEZ,sBAAgB,KAAK;AAAA,QACpB,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN;AAAA;AAAA,QACA,GAAG,GAAG;AAAA;AAAA,MACP,EAAE,KAAK,EAAE,CAAC;AACV,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,4DAA4D,MAAM;AACtE,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AACZ,sBAAgB,GAAG,GAAG,OAAO;AAAA,QAC5B,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN;AAAA;AAAA,QACA,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,MACP,EAAE,KAAK,EAAE,CAAC;AACV,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,iCAAiC,MAAM;AAC3C,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,GAAG;AACZ,sBAAgB,GAAG,GAAG,QAAQ,GAAG,QAAQ;AAAA,QACxC,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN;AAAA;AAAA,QACA,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA;AAAA,MACP,EAAE,KAAK,EAAE,CAAC;AACV,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,yCAAyC,MAAM;AACnD,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,MAAM;AACf,sBAAgB,KAAK,GAAG,KAAK,KAAK,GAAG,GAAG;AACxC,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,wCAAwC,MAAM;AAClD,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,MAAM;AACf,sBAAgB,SAAS,OAAO;AAChC,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,+BAA+B,MAAM;AACzC,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,QAAE,OAAO,MAAM;AACf,sBAAgB,MAAM,EAAE;AACxB,sBAAgB,OAAO,OAAO;AAC9B,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,kDAAkD,MAAM;AAC5D,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AACzB,YAAM,iBAAiB;AACvB,QAAE,OAAO,MAAM;AACf,QAAE,cAAc,GAAG,GAAG,OAAO,GAAG,GAAG;AACnC,sBAAgB,KAAK,GAAG,GAAG,OAAO,GAAG,MAAM,GAAG,OAAO,GAAG,MAAM,GAAG,MAAM;AACvE,aAAO,YAAY,MAAM,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,0DAA0D,MAAM;AACpE,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AAGzB,QAAE,OAAO,MAAM;AACf,QAAE,cAAc,EAAE;AAClB,sBAAgB,SAAS,OAAO;AAChC,QAAE,OAAO;AAGT,QAAE,OAAO,GAAG;AACZ,0BAAoB,KAAK,EAAE,MAAM,IAAI,CAAC;AACtC,QAAE,OAAO;AACT,QAAE,aAAa;AAGf,QAAE,OAAO,MAAM;AACf,QAAE,cAAc,GAAG,GAAG,OAAO,GAAG,GAAG;AAAA,IACpC,CAAC;AAED,SAAK,8CAA8C,MAAM;AACxD,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,sBAAsB;AAC5B,YAAM,SAAS,EAAE,QAAQ;AAEzB,QAAE,OAAO,GAAG;AACZ,QAAE,cAAc,EAAE;AAClB,sBAAgB,KAAK,GAAG;AAExB,QAAE,OAAO,GAAG;AACZ,QAAE,cAAc,GAAG,GAAG,MAAM,GAAG,KAAK;AAAA,IACrC,CAAC;AAED,SAAK,4BAA4B,MAAM;AACtC,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,SAAS,EAAE,QAAQ;AAEzB,YAAM,cAAc;AACpB,aAAO,YAAY,MAAM,WAAW,MAAM,4BAA4B;AAEtE,QAAE,cAAc,KAAK,eAAe;AACpC,YAAM,cAAc;AACpB,aAAO,YAAY,MAAM,WAAW,OAAO,mCAAmC;AAE9E,QAAE,cAAc,KAAK,eAAe;AACpC,YAAM,cAAc;AACpB,aAAO,YAAY,MAAM,WAAW,MAAM,yCAAyC;AAAA,IACpF,CAAC;AAED,SAAK,uDAAuD,MAAM;AACjE,YAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,YAAM,sBAAsB;AAC5B,YAAM,SAAS,EAAE,QAAQ;AAEzB,QAAE,OAAO,KAAK,OAAO,EAAE,CAAC;AACxB,QAAE,cAAc,EAAE;AAClB,sBAAgB,MAAM;AAAA,QACrB,GAAG,GAAG;AAAA;AAAA,QACN;AAAA;AAAA,QACA,GAAG,IAAI,MAAM,EAAE,EAAE,KAAK,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK;AAAA;AAAA,QAC5D,GAAG,GAAG;AAAA;AAAA,QACN,GAAG,GAAG;AAAA,MACP,EAAE,KAAK,EAAE,CAAC;AAAA,IACX,CAAC;AAAA,EACF,CAAC;AACF,CAAC;AAED,MAAM,2BAA2B,eAAe;AAAA,EA9YhD,OA8YgD;AAAA;AAAA;AAAA,EAC/C,0BAA0B;AACzB,SAAK,WAAW,EAAE,GAAG,GAAG,WAAW,KAAK,SAAS,KAAK,WAAW,iBAAiB,UAAU;AAAA,EAC7F;AAAA,EAEA,wBAAwB;AACvB,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,mBAAmB;AAClB,SAAK,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,SAAS,GAAG,WAAW,iBAAiB,UAAU;AAAA,EACzF;AAAA,EAEA,gBAAgB;AACf,SAAK,6BAA6B,KAAK,OAAQ,KAAK,SAAU;AAAA,EAC/D;AAAA,EAEA,IAAI,YAAY;AACf,WAAO,CAAC,CAAC,KAAK,WAAW;AAAA,EAC1B;AAAA,EAEA,qBAAqB;AACpB,SAAK,WAAW,mBAAmB;AAAA,EACpC;AAAA,EAEA,eAAe,QAAiB;AAC/B,WAAO,KAAK,WAAW,eAAe,MAAM;AAAA,EAC7C;AAAA,EAEA,gBAAgB,QAAiB;AAChC,WAAO,KAAK,WAAW,gBAAgB,MAAM;AAAA,EAC9C;AACD;AAEA,SAAS,cAAiB,GAAkB;AAC3C,SAAO;AACR;AAFS;AAIT,SAAS,sBAAsB,GAAW;AACzC,SAAO,IAAI,MAAM,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,cAAc;AAC/C;AAFS;AAIT,SAAS,iBAA8B;AACtC,SAAO;AAAA,IACN,OAAO,6BAAM,IAAN;AAAA,IACP,UAAU,6BAAM,IAAN;AAAA,IACV,SAAS,6BAAM,GAAN;AAAA,IACT,cAAc,6BAAM,IAAN;AAAA,EACf;AACD;AAPS;AAST,SAAS,mBAAmB,EAAE,OAAO,YAAY,GAG9C;AACF,QAAM,KAAK,IAAI,gBAAgB;AAC/B,QAAM,UAAoB,CAAC;AAC3B,QAAM,SAAS,EAAE,GAAG,GAAG,GAAG,EAAE;AAC5B,QAAM,gBAAgB,GAAG,IAAI,IAAI,QAAgB,CAAC;AAClD,QAAM,SAAS,GAAG,IAAI,IAAI,QAAgB,CAAC;AAC3C,QAAM,aAAa,GAAG,IAAI,IAAI,QAAkB,CAAC;AAEjD,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAM,OAAO,MAAM,CAAC;AACpB,QAAI,KAAK,SAAS,GAAG,GAAG;AACvB,aAAO,IAAI,IAAI;AACf,aAAO,IAAI,KAAK,QAAQ,GAAG,IAAI;AAC/B,YAAM,CAAC,IAAI,KAAK,QAAQ,KAAK,EAAE;AAC/B;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA,eAAe,wBAAC,MAAc;AAC7B,aAAO,YAAY,KAAK,UAAU,QAAQ,KAAK,EAAE,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;AACtE,cAAQ,OAAO,GAAG,QAAQ,MAAM;AAAA,IACjC,GAHe;AAAA,IAIf,cAAc,6BAAM,QAAQ,OAAO,GAAG,QAAQ,MAAM,GAAtC;AAAA,IACd,QAAQ,wBAAC,MAAc,OAAO,KAAK,CAAC,GAA5B;AAAA,IACR;AAAA,IACA;AAAA,IACA,SAAS,6BAAM,GAAG,QAAQ,GAAjB;AAAA,IACT,UAAU;AAAA,MACT,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU,IAAI,QAAc,EAAE;AAAA,MAC9B,QAAQ,OAAO;AAAA,MACf,eAAe,cAAc;AAAA,MAC7B,QAAQ;AAAA,QACP,mBAAmB,GAAY,UAAsB;AACpD,aAAG,IAAI,WAAW,MAAM,QAAQ,CAAC;AAAA,QAClC;AAAA,MACD;AAAA,MACA,MAAM,MAAc;AACnB,gBAAQ,KAAK,IAAI;AAAA,MAClB;AAAA,MACA,OAAO;AAAA,QACN,eAAe;AAAA,UACd,cAAc,SAAS,IAAI,WAAW;AAAA,QACvC;AAAA,QACA,YAAY;AAAA,QAEZ;AAAA,MACD;AAAA,MACA,QAAQ;AAAA,QACP,QAAQ;AAAA,UACP,MAAM;AAAA,UACN,OAAO;AAAA,UACP,IAAI,UAAU;AAAE,mBAAO,OAAO;AAAA,UAAG;AAAA,UACjC,IAAI,UAAU;AAAE,mBAAO,OAAO;AAAA,UAAG;AAAA,UACjC,QAAQ,GAAW;AAClB,kBAAM,IAAI,MAAM,IAAI,CAAC,KAAK;AAC1B,mBAAO;AAAA,cACN,QAAQ,EAAE;AAAA,cACV,SAAS,wBAAC,MAAc,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,GAAtC;AAAA,cACT,mBAAmB,wBAAC,MAAe,QAAQ,GAAG,MAAM,EAAE,WAAW;AAChE,sBAAM,MAAM,EAAE,MAAM,OAAO,GAAG;AAC9B,uBAAO,OAAO,IAAI,UAAU,IAAI;AAAA,cACjC,GAHmB;AAAA,YAIpB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AA5ES;AA8ET,SAAS,SAAS,MAAc,QAAoC,CAAC,GAAG;AACvE,SAAO,IAAI,MAAM,CAAC,GAAG;AAAA,IACpB,IAAI,GAAG,MAAM;AACZ,UAAI,OAAO,SAAS,YAAY,MAAM,eAAe,IAAI,GAAG;AAC3D,eAAO,MAAM,MAAM,IAAI;AAAA,MACxB;AAEA,cAAQ,MAAM;AAAA,QACb,KAAK;AACJ,iBAAO,MAAM;AAAA,QACd,KAAK;AACJ,iBAAO,MAAM;AAAA,QACd,KAAK;AACJ,iBAAO,MAAM,KAAK,WAAW,CAAC,KAAK;AAAA,QACpC,KAAK;AACJ,iBAAO,MAAM;AAAA,QACd;AACC,iBAAO,OAAO,IAAI,EAAE,WAAW,IAAI,IAAK,MAAM,QAAU,MAAM;AAAA,MAChE;AAAA,IACD;AAAA,EACD,CAAC;AACF;AArBS;",
  "names": ["CursorMoveDirection"]
}
