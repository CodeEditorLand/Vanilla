import{getActiveWindow as t,isHTMLInputElement as f,isHTMLTextAreaElement as x}from"../../../../../base/browser/dom.js";import{StandardMouseEvent as C}from"../../../../../base/browser/mouseEvent.js";import{Action as o,Separator as a}from"../../../../../base/common/actions.js";import{isNative as w}from"../../../../../base/common/platform.js";import{localize as n}from"../../../../../nls.js";function g(s,c,u,p){const l=new C(s,c),i=[];i.push(new o("undo",n("undo","Undo"),void 0,!0,async()=>t().document.execCommand("undo")),new o("redo",n("redo","Redo"),void 0,!0,async()=>t().document.execCommand("redo")),new a,new o("editor.action.clipboardCutAction",n("cut","Cut"),void 0,!0,async()=>t().document.execCommand("cut")),new o("editor.action.clipboardCopyAction",n("copy","Copy"),void 0,!0,async()=>t().document.execCommand("copy")),new o("editor.action.clipboardPasteAction",n("paste","Paste"),void 0,!0,async e=>{if(w)t().document.execCommand("paste");else{const r=await u.readText();if(x(e)||f(e)){const d=e.selectionStart||0,m=e.selectionEnd||0;e.value=`${e.value.substring(0,d)}${r}${e.value.substring(m,e.value.length)}`,e.selectionStart=d+r.length,e.selectionEnd=e.selectionStart}}}),new a,new o("editor.action.selectAll",n("selectAll","Select All"),void 0,!0,async()=>t().document.execCommand("selectAll"))),p.showContextMenu({getAnchor:()=>l,getActions:()=>i,getActionsContext:()=>c.target})}export{g as openContextMenu};
