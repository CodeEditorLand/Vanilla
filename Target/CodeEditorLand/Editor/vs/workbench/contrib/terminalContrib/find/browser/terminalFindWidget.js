var I=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var g=(c,r,e,t)=>{for(var i=t>1?void 0:t?S(r,e):r,n=c.length-1,d;n>=0;n--)(d=c[n])&&(i=(t?d(r,e,i):d(i))||i);return t&&i&&I(r,e,i),i},o=(c,r)=>(e,t)=>r(e,t,c);import*as h from"../../../../../base/browser/dom.js";import{SimpleFindWidget as C}from"../../../codeEditor/browser/find/simpleFindWidget.js";import{IContextMenuService as x,IContextViewService as W}from"../../../../../platform/contextview/browser/contextView.js";import{IContextKeyService as b}from"../../../../../platform/contextkey/common/contextkey.js";import{XtermTerminalConstants as V}from"../../../terminal/browser/terminal.js";import{TerminalContextKeys as p}from"../../../terminal/common/terminalContextKey.js";import{IThemeService as F}from"../../../../../platform/theme/common/themeService.js";import{IConfigurationService as D}from"../../../../../platform/configuration/common/configuration.js";import{IKeybindingService as T}from"../../../../../platform/keybinding/common/keybinding.js";import{Event as m}from"../../../../../base/common/event.js";import{IClipboardService as y}from"../../../../../platform/clipboard/common/clipboardService.js";import{openContextMenu as w}from"./textInputContextMenu.js";import{IHoverService as P}from"../../../../../platform/hover/browser/hover.js";import{TerminalFindCommandId as a}from"../common/terminal.find.js";const R=419;let u=class extends C{constructor(e,t,i,n,d,v,f,A,K){super({showCommonFindToggles:!0,checkImeCompletionState:!0,showResultCount:!0,initialWidth:R,enableSash:!0,appendCaseSensitiveActionId:a.ToggleFindCaseSensitive,appendRegexActionId:a.ToggleFindRegex,appendWholeWordsActionId:a.ToggleFindWholeWord,previousMatchActionId:a.FindPrevious,nextMatchActionId:a.FindNext,closeWidgetActionId:a.FindHide,type:"Terminal",matchesLimit:V.SearchHighlightLimit},t,n,f,i);this._instance=e;this._contextKeyService=n;this._themeService=A;this._configurationService=K;this._register(this.state.onFindReplaceStateChange(()=>{this.show()})),this._findInputFocused=p.findInputFocus.bindTo(this._contextKeyService),this._findWidgetFocused=p.findFocus.bindTo(this._contextKeyService),this._findWidgetVisible=p.findVisible.bindTo(this._contextKeyService);const l=this.getDomNode().firstChild;l&&(this._register(h.addDisposableListener(l,"mousedown",s=>{s.stopPropagation()})),this._register(h.addDisposableListener(l,"contextmenu",s=>{s.stopPropagation()})));const _=this.getFindInputDomNode();this._register(h.addDisposableListener(_,"contextmenu",s=>{w(h.getWindow(_),s,v,d),s.stopPropagation()})),this._register(this._themeService.onDidColorThemeChange(()=>{this.isVisible()&&this.find(!0,!0)})),this._register(this._configurationService.onDidChangeConfiguration(s=>{s.affectsConfiguration("workbench.colorCustomizations")&&this.isVisible()&&this.find(!0,!0)})),this.updateResultCount()}_findInputFocused;_findWidgetFocused;_findWidgetVisible;_overrideCopyOnSelectionDisposable;find(e,t){const i=this._instance.xterm;i&&(e?this._findPreviousWithEvent(i,this.inputValue,{regex:this._getRegexValue(),wholeWord:this._getWholeWordValue(),caseSensitive:this._getCaseSensitiveValue(),incremental:t}):this._findNextWithEvent(i,this.inputValue,{regex:this._getRegexValue(),wholeWord:this._getWholeWordValue(),caseSensitive:this._getCaseSensitiveValue()}))}reveal(){const t=(this._instance.hasSelection()&&!this._instance.selection.includes(`
`)?this._instance.selection:void 0)??this.inputValue,i=this._instance.xterm;i&&t&&t!==""&&this._findPreviousWithEvent(i,t,{incremental:!0,regex:this._getRegexValue(),wholeWord:this._getWholeWordValue(),caseSensitive:this._getCaseSensitiveValue()}).then(n=>{this.updateButtons(n),this._register(m.once(i.onDidChangeSelection)(()=>i.clearActiveSearchDecoration()))}),this.updateButtons(!1),super.reveal(t),this._findWidgetVisible.set(!0)}show(){const e=this._instance.hasSelection()&&!this._instance.selection.includes(`
`)?this._instance.selection:void 0;super.show(e),this._findWidgetVisible.set(!0)}hide(){super.hide(),this._findWidgetVisible.reset(),this._instance.focus(!0),this._instance.xterm?.clearSearchDecorations()}async _getResultCount(){return this._instance.xterm?.findResult}_onInputChanged(){const e=this._instance.xterm;return e&&this._findPreviousWithEvent(e,this.inputValue,{regex:this._getRegexValue(),wholeWord:this._getWholeWordValue(),caseSensitive:this._getCaseSensitiveValue(),incremental:!0}).then(t=>{this.updateButtons(t)}),!1}_onFocusTrackerFocus(){"overrideCopyOnSelection"in this._instance&&(this._overrideCopyOnSelectionDisposable=this._instance.overrideCopyOnSelection(!1)),this._findWidgetFocused.set(!0)}_onFocusTrackerBlur(){this._overrideCopyOnSelectionDisposable?.dispose(),this._instance.xterm?.clearActiveSearchDecoration(),this._findWidgetFocused.reset()}_onFindInputFocusTrackerFocus(){this._findInputFocused.set(!0)}_onFindInputFocusTrackerBlur(){this._findInputFocused.reset()}findFirst(){const e=this._instance;e.hasSelection()&&e.clearSelection();const t=e.xterm;t&&this._findPreviousWithEvent(t,this.inputValue,{regex:this._getRegexValue(),wholeWord:this._getWholeWordValue(),caseSensitive:this._getCaseSensitiveValue()})}async _findNextWithEvent(e,t,i){return e.findNext(t,i).then(n=>(this._register(m.once(e.onDidChangeSelection)(()=>e.clearActiveSearchDecoration())),n))}async _findPreviousWithEvent(e,t,i){return e.findPrevious(t,i).then(n=>(this._register(m.once(e.onDidChangeSelection)(()=>e.clearActiveSearchDecoration())),n))}};u=g([o(1,W),o(2,T),o(3,b),o(4,x),o(5,y),o(6,P),o(7,F),o(8,D)],u);export{u as TerminalFindWidget};
