import i from"assert";import{importAMDNodeModule as S}from"../../../../../../amdX.js";import{isWindows as v}from"../../../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../../../base/test/common/utils.js";import{IConfigurationService as T}from"../../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as w}from"../../../../../../platform/configuration/test/common/testConfigurationService.js";import{IContextKeyService as h}from"../../../../../../platform/contextkey/common/contextkey.js";import{ContextMenuService as y}from"../../../../../../platform/contextview/browser/contextMenuService.js";import{IContextMenuService as b}from"../../../../../../platform/contextview/browser/contextView.js";import{TestInstantiationService as C}from"../../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MockContextKeyService as I}from"../../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{ILayoutService as x}from"../../../../../../platform/layout/browser/layoutService.js";import{ILoggerService as E,NullLogService as q}from"../../../../../../platform/log/common/log.js";import{TerminalCapability as k}from"../../../../../../platform/terminal/common/capabilities/capabilities.js";import{TerminalCapabilityStore as A}from"../../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js";import{ITerminalLogService as L}from"../../../../../../platform/terminal/common/terminal.js";import{IThemeService as $}from"../../../../../../platform/theme/common/themeService.js";import{TestThemeService as B}from"../../../../../../platform/theme/test/common/testThemeService.js";import{writeP as l}from"../../../../terminal/browser/terminalTestHelpers.js";import{XtermTerminal as M}from"../../../../terminal/browser/xterm/xtermTerminal.js";import"../../../../terminal/common/terminal.js";import{BufferContentTracker as D}from"../../browser/bufferContentTracker.js";import{ILifecycleService as N}from"../../../../../services/lifecycle/common/lifecycle.js";import{TestLayoutService as P,TestLifecycleService as W}from"../../../../../test/browser/workbenchTestServices.js";import{TestLoggerService as K}from"../../../../../test/common/workbenchTestServices.js";import{IAccessibilitySignalService as X}from"../../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js";import{ITerminalConfigurationService as j}from"../../../../terminal/browser/terminal.js";import{TerminalConfigurationService as z}from"../../../../terminal/browser/terminalConfigurationService.js";const F={fontFamily:"monospace",fontWeight:"normal",fontWeightBold:"normal",gpuAcceleration:"off",scrollback:1e3,fastScrollSensitivity:2,mouseWheelScrollSensitivity:1,unicodeVersion:"6"};suite("Buffer Content Tracker",()=>{const n=g();let t,p,m,r,d,e;const o="vscode-git:(prompt/more-tests)",a="vscode-git:(prompt/more-tests) some data";setup(async()=>{p=new w({terminal:{integrated:F}}),t=n.add(new C),m=new B,t.stub(T,p),t.stub(j,n.add(t.createInstance(z))),t.stub($,m),t.stub(L,new q),t.stub(E,n.add(new K)),t.stub(b,n.add(t.createInstance(y))),t.stub(N,n.add(new W)),t.stub(h,n.add(new I)),t.stub(X,{playSignal:async()=>{},isSoundEnabled(u){return!1}}),t.stub(x,new P),d=n.add(new A),v||d.add(k.NaiveCwdDetection,null);const c=(await S("@xterm/xterm","lib/xterm.js")).Terminal;r=n.add(t.createInstance(M,c,80,30,{getBackgroundColor:()=>{}},d,"",!0));const s=document.createElement("div");r.raw.open(s),p=new w({terminal:{integrated:{tabs:{separator:" - ",title:"${cwd}",description:"${cwd}"}}}}),e=n.add(t.createInstance(D,r))}),test("should not clear the prompt line",async()=>{i.strictEqual(e.lines.length,0),await l(r.raw,o),r.clearBuffer(),e.update(),i.deepStrictEqual(e.lines,[o])}),test("repeated updates should not change the content",async()=>{i.strictEqual(e.lines.length,0),await l(r.raw,o),e.update(),i.deepStrictEqual(e.lines,[o]),e.update(),i.deepStrictEqual(e.lines,[o]),e.update(),i.deepStrictEqual(e.lines,[o])}),test("should add lines in the viewport and scrollback",async()=>{await f(a,38,r.raw,e)}),test("should add lines in the viewport and full scrollback",async()=>{await f(a,1030,r.raw,e)}),test("should refresh viewport",async()=>{await f(a,6,r.raw,e),await l(r.raw,"\x1B[3Ainserteddata"),e.update(),i.deepStrictEqual(e.lines,[a,a,`${a}inserteddata`,a,a,a])}),test("should refresh viewport with full scrollback",async()=>{const c=`${o}\r
`.repeat(1030).trimEnd();await l(r.raw,c),e.update(),await l(r.raw,"\x1B[4Ainsertion"),e.update();const s=c.split(`\r
`);s[1025]=`${o}insertion`,i.deepStrictEqual(e.lines[1025],`${o}insertion`)}),test("should cap the size of the cached lines, removing old lines in favor of new lines",async()=>{const c=`${o}\r
`.repeat(1036).trimEnd();await l(r.raw,c),e.update();const s=c.split(`\r
`);for(let u=0;u<6;u++)s.pop();await l(r.raw,"\x1B[2Ainsertion"),e.update(),s[1027]=`${o}insertion`,i.strictEqual(e.lines.length,s.length),i.deepStrictEqual(e.lines,s)})});async function f(n,t,p,m){const r=`${n}\r
`.repeat(t).trimEnd();await l(p,r),m.update(),i.strictEqual(m.lines.length,t),i.deepStrictEqual(m.lines,r.split(`\r
`))}
