{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/accessibility/test/browser/bufferContentTracker.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { isWindows } from '../../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IContextKeyService } from '../../../../../../platform/contextkey/common/contextkey.js';\nimport { ContextMenuService } from '../../../../../../platform/contextview/browser/contextMenuService.js';\nimport { IContextMenuService } from '../../../../../../platform/contextview/browser/contextView.js';\nimport { TestInstantiationService } from '../../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { MockContextKeyService } from '../../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { ILayoutService } from '../../../../../../platform/layout/browser/layoutService.js';\nimport { ILoggerService, NullLogService } from '../../../../../../platform/log/common/log.js';\nimport { TerminalCapability } from '../../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { TerminalCapabilityStore } from '../../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { ITerminalLogService } from '../../../../../../platform/terminal/common/terminal.js';\nimport { IThemeService } from '../../../../../../platform/theme/common/themeService.js';\nimport { TestThemeService } from '../../../../../../platform/theme/test/common/testThemeService.js';\nimport { writeP } from '../../../../terminal/browser/terminalTestHelpers.js';\nimport { XtermTerminal } from '../../../../terminal/browser/xterm/xtermTerminal.js';\nimport { ITerminalConfiguration } from '../../../../terminal/common/terminal.js';\nimport { BufferContentTracker } from '../../browser/bufferContentTracker.js';\nimport { ILifecycleService } from '../../../../../services/lifecycle/common/lifecycle.js';\nimport { TestLayoutService, TestLifecycleService } from '../../../../../test/browser/workbenchTestServices.js';\nimport { TestLoggerService } from '../../../../../test/common/workbenchTestServices.js';\nimport type { Terminal } from '@xterm/xterm';\nimport { IAccessibilitySignalService } from '../../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { ITerminalConfigurationService } from '../../../../terminal/browser/terminal.js';\nimport { TerminalConfigurationService } from '../../../../terminal/browser/terminalConfigurationService.js';\n\nconst defaultTerminalConfig: Partial<ITerminalConfiguration> = {\n\tfontFamily: 'monospace',\n\tfontWeight: 'normal',\n\tfontWeightBold: 'normal',\n\tgpuAcceleration: 'off',\n\tscrollback: 1000,\n\tfastScrollSensitivity: 2,\n\tmouseWheelScrollSensitivity: 1,\n\tunicodeVersion: '6'\n};\n\nsuite('Buffer Content Tracker', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\tlet configurationService: TestConfigurationService;\n\tlet themeService: TestThemeService;\n\tlet xterm: XtermTerminal;\n\tlet capabilities: TerminalCapabilityStore;\n\tlet bufferTracker: BufferContentTracker;\n\tconst prompt = 'vscode-git:(prompt/more-tests)';\n\tconst promptPlusData = 'vscode-git:(prompt/more-tests) ' + 'some data';\n\n\tsetup(async () => {\n\t\tconfigurationService = new TestConfigurationService({ terminal: { integrated: defaultTerminalConfig } });\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tthemeService = new TestThemeService();\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\tinstantiationService.stub(ITerminalConfigurationService, store.add(instantiationService.createInstance(TerminalConfigurationService)));\n\t\tinstantiationService.stub(IThemeService, themeService);\n\t\tinstantiationService.stub(ITerminalLogService, new NullLogService());\n\t\tinstantiationService.stub(ILoggerService, store.add(new TestLoggerService()));\n\t\tinstantiationService.stub(IContextMenuService, store.add(instantiationService.createInstance(ContextMenuService)));\n\t\tinstantiationService.stub(ILifecycleService, store.add(new TestLifecycleService()));\n\t\tinstantiationService.stub(IContextKeyService, store.add(new MockContextKeyService()));\n\t\tinstantiationService.stub(IAccessibilitySignalService, {\n\t\t\tplaySignal: async () => { },\n\t\t\tisSoundEnabled(signal: unknown) { return false; },\n\t\t} as any);\n\n\t\tinstantiationService.stub(ILayoutService, new TestLayoutService());\n\t\tcapabilities = store.add(new TerminalCapabilityStore());\n\t\tif (!isWindows) {\n\t\t\tcapabilities.add(TerminalCapability.NaiveCwdDetection, null!);\n\t\t}\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\t\txterm = store.add(instantiationService.createInstance(XtermTerminal, TerminalCtor, 80, 30, { getBackgroundColor: () => undefined }, capabilities, '', true));\n\t\tconst container = document.createElement('div');\n\t\txterm.raw.open(container);\n\t\tconfigurationService = new TestConfigurationService({ terminal: { integrated: { tabs: { separator: ' - ', title: '${cwd}', description: '${cwd}' } } } });\n\t\tbufferTracker = store.add(instantiationService.createInstance(BufferContentTracker, xterm));\n\t});\n\n\ttest('should not clear the prompt line', async () => {\n\t\tassert.strictEqual(bufferTracker.lines.length, 0);\n\t\tawait writeP(xterm.raw, prompt);\n\t\txterm.clearBuffer();\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t});\n\ttest('repeated updates should not change the content', async () => {\n\t\tassert.strictEqual(bufferTracker.lines.length, 0);\n\t\tawait writeP(xterm.raw, prompt);\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t});\n\ttest('should add lines in the viewport and scrollback', async () => {\n\t\tawait writeAndAssertBufferState(promptPlusData, 38, xterm.raw, bufferTracker);\n\t});\n\ttest('should add lines in the viewport and full scrollback', async () => {\n\t\tawait writeAndAssertBufferState(promptPlusData, 1030, xterm.raw, bufferTracker);\n\t});\n\ttest('should refresh viewport', async () => {\n\t\tawait writeAndAssertBufferState(promptPlusData, 6, xterm.raw, bufferTracker);\n\t\tawait writeP(xterm.raw, '\\x1b[3Ainserteddata');\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [promptPlusData, promptPlusData, `${promptPlusData}inserteddata`, promptPlusData, promptPlusData, promptPlusData]);\n\t});\n\ttest('should refresh viewport with full scrollback', async () => {\n\t\tconst content = `${prompt}\\r\\n`.repeat(1030).trimEnd();\n\t\tawait writeP(xterm.raw, content);\n\t\tbufferTracker.update();\n\t\tawait writeP(xterm.raw, '\\x1b[4Ainsertion');\n\t\tbufferTracker.update();\n\t\tconst expected = content.split('\\r\\n');\n\t\texpected[1025] = `${prompt}insertion`;\n\t\tassert.deepStrictEqual(bufferTracker.lines[1025], `${prompt}insertion`);\n\t});\n\ttest('should cap the size of the cached lines, removing old lines in favor of new lines', async () => {\n\t\tconst content = `${prompt}\\r\\n`.repeat(1036).trimEnd();\n\t\tawait writeP(xterm.raw, content);\n\t\tbufferTracker.update();\n\t\tconst expected = content.split('\\r\\n');\n\t\t// delete the 6 lines that should be trimmed\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\texpected.pop();\n\t\t}\n\t\t// insert a new character\n\t\tawait writeP(xterm.raw, '\\x1b[2Ainsertion');\n\t\tbufferTracker.update();\n\t\texpected[1027] = `${prompt}insertion`;\n\t\tassert.strictEqual(bufferTracker.lines.length, expected.length);\n\t\tassert.deepStrictEqual(bufferTracker.lines, expected);\n\t});\n});\n\nasync function writeAndAssertBufferState(data: string, rows: number, terminal: Terminal, bufferTracker: BufferContentTracker): Promise<void> {\n\tconst content = `${data}\\r\\n`.repeat(rows).trimEnd();\n\tawait writeP(terminal, content);\n\tbufferTracker.update();\n\tassert.strictEqual(bufferTracker.lines.length, rows);\n\tassert.deepStrictEqual(bufferTracker.lines, content.split('\\r\\n'));\n}\n"],
  "mappings": "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",
  "names": []
}
