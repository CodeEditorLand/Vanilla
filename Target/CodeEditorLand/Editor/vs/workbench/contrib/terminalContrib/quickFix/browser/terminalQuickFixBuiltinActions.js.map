{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixBuiltinActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from \"../../../../../base/common/uri.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport {\n\tITerminalCommandMatchResult,\n\tITerminalQuickFixInternalOptions,\n\tITerminalQuickFixTerminalCommandAction,\n\tTerminalQuickFixActionInternal,\n\tTerminalQuickFixType,\n} from \"./quickFix.js\";\n\nexport const GitCommandLineRegex = /git/;\nexport const GitPullOutputRegex = /and can be fast-forwarded/;\nexport const GitPushCommandLineRegex = /git\\s+push/;\nexport const GitTwoDashesRegex =\n\t/error: did you mean `--(.+)` \\(with two dashes\\)\\?/;\nexport const GitSimilarOutputRegex = /(?:(most similar commands? (is|are)))/;\nexport const FreePortOutputRegex =\n\t/(?:address already in use (?:0\\.0\\.0\\.0|127\\.0\\.0\\.1|localhost|::):|Unable to bind [^ ]*:|can't listen on port |listen EADDRINUSE [^ ]*:)(?<portNumber>\\d{4,5})/;\nexport const GitPushOutputRegex =\n\t/git push --set-upstream origin (?<branchName>[^\\s]+)/;\n// The previous line starts with \"Create a pull request for \\'([^\\s]+)\\' on GitHub by visiting:\\s*\"\n// it's safe to assume it's a github pull request if the URL includes `/pull/`\nexport const GitCreatePrOutputRegex =\n\t/remote:\\s*(?<link>https:\\/\\/github\\.com\\/.+\\/.+\\/pull\\/new\\/.+)/;\nexport const PwshGeneralErrorOutputRegex = /Suggestion \\[General\\]:/;\nexport const PwshUnixCommandNotFoundErrorOutputRegex =\n\t/Suggestion \\[cmd-not-found\\]:/;\n\nexport const enum QuickFixSource {\n\tBuiltin = \"builtin\",\n}\n\nexport function gitSimilar(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Git Similar\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: GitCommandLineRegex,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitSimilarOutputRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 0,\n\t\t\tlength: 10,\n\t\t},\n\t\tcommandExitResult: \"error\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst regexMatch = matchResult.outputMatch?.regexMatch[0];\n\t\t\tif (!regexMatch || !matchResult.outputMatch) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst actions: TerminalQuickFixActionInternal[] = [];\n\t\t\tconst startIndex =\n\t\t\t\tmatchResult.outputMatch.outputLines.findIndex((l) =>\n\t\t\t\t\tl.includes(regexMatch),\n\t\t\t\t) + 1;\n\t\t\tconst results = matchResult.outputMatch.outputLines.map((r) =>\n\t\t\t\tr.trim(),\n\t\t\t);\n\t\t\tfor (let i = startIndex; i < results.length; i++) {\n\t\t\t\tconst fixedCommand = results[i];\n\t\t\t\tif (fixedCommand) {\n\t\t\t\t\tactions.push({\n\t\t\t\t\t\tid: \"Git Similar\",\n\t\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\t\tterminalCommand: matchResult.commandLine.replace(\n\t\t\t\t\t\t\t/git\\s+[^\\s]+/,\n\t\t\t\t\t\t\t() => `git ${fixedCommand}`,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tshouldExecute: true,\n\t\t\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn actions;\n\t\t},\n\t};\n}\n\nexport function gitPull(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Git Pull\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: GitCommandLineRegex,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitPullOutputRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 0,\n\t\t\tlength: 8,\n\t\t},\n\t\tcommandExitResult: \"success\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\treturn {\n\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\tid: \"Git Pull\",\n\t\t\t\tterminalCommand: `git pull`,\n\t\t\t\tshouldExecute: true,\n\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t};\n\t\t},\n\t};\n}\n\nexport function gitTwoDashes(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Git Two Dashes\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: GitCommandLineRegex,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitTwoDashesRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 0,\n\t\t\tlength: 2,\n\t\t},\n\t\tcommandExitResult: \"error\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst problemArg = matchResult?.outputMatch?.regexMatch?.[1];\n\t\t\tif (!problemArg) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\tid: \"Git Two Dashes\",\n\t\t\t\tterminalCommand: matchResult.commandLine.replace(\n\t\t\t\t\t` -${problemArg}`,\n\t\t\t\t\t() => ` --${problemArg}`,\n\t\t\t\t),\n\t\t\t\tshouldExecute: true,\n\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t};\n\t\t},\n\t};\n}\nexport function freePort(\n\trunCallback: (port: string, commandLine: string) => Promise<void>,\n): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Free Port\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: /.+/,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: FreePortOutputRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 0,\n\t\t\tlength: 30,\n\t\t},\n\t\tcommandExitResult: \"error\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst port =\n\t\t\t\tmatchResult?.outputMatch?.regexMatch?.groups?.portNumber;\n\t\t\tif (!port) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst label = localize(\"terminal.freePort\", \"Free port {0}\", port);\n\t\t\treturn {\n\t\t\t\ttype: TerminalQuickFixType.Port,\n\t\t\t\tclass: undefined,\n\t\t\t\ttooltip: label,\n\t\t\t\tid: \"Free Port\",\n\t\t\t\tlabel,\n\t\t\t\tenabled: true,\n\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t\trun: () => runCallback(port, matchResult.commandLine),\n\t\t\t};\n\t\t},\n\t};\n}\n\nexport function gitPushSetUpstream(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Git Push Set Upstream\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: GitPushCommandLineRegex,\n\t\t/**\n\t\t\tExample output on Windows:\n\t\t\t8: PS C:\\Users\\merogge\\repos\\xterm.js> git push\n\t\t\t7: fatal: The current branch sdjfskdjfdslkjf has no upstream branch.\n\t\t\t6: To push the current branch and set the remote as upstream, use\n\t\t\t5:\n\t\t\t4:\tgit push --set-upstream origin sdjfskdjfdslkjf\n\t\t\t3:\n\t\t\t2: To have this happen automatically for branches without a tracking\n\t\t\t1: upstream, see 'push.autoSetupRemote' in 'git help config'.\n\t\t\t0:\n\n\t\t\tExample output on macOS:\n\t\t\t5: meganrogge@Megans-MacBook-Pro xterm.js % git push\n\t\t\t4: fatal: The current branch merogge/asjdkfsjdkfsdjf has no upstream branch.\n\t\t\t3: To push the current branch and set the remote as upstream, use\n\t\t\t2:\n\t\t\t1:\tgit push --set-upstream origin merogge/asjdkfsjdkfsdjf\n\t\t\t0:\n\t\t */\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitPushOutputRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 0,\n\t\t\tlength: 8,\n\t\t},\n\t\tcommandExitResult: \"error\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst matches = matchResult.outputMatch;\n\t\t\tconst commandToRun =\n\t\t\t\t\"git push --set-upstream origin ${group:branchName}\";\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst groups = matches.regexMatch.groups;\n\t\t\tif (!groups) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst actions: TerminalQuickFixActionInternal[] = [];\n\t\t\tlet fixedCommand = commandToRun;\n\t\t\tfor (const [key, value] of Object.entries(groups)) {\n\t\t\t\tconst varToResolve = \"${group:\" + `${key}` + \"}\";\n\t\t\t\tif (!commandToRun.includes(varToResolve)) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\tfixedCommand = fixedCommand.replaceAll(\n\t\t\t\t\tvarToResolve,\n\t\t\t\t\t() => value,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (fixedCommand) {\n\t\t\t\tactions.push({\n\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\tid: \"Git Push Set Upstream\",\n\t\t\t\t\tterminalCommand: fixedCommand,\n\t\t\t\t\tshouldExecute: true,\n\t\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t\t});\n\t\t\t\treturn actions;\n\t\t\t}\n\t\t\treturn;\n\t\t},\n\t};\n}\n\nexport function gitCreatePr(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Git Create Pr\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: GitPushCommandLineRegex,\n\t\t// Example output:\n\t\t// ...\n\t\t// 10: remote:\n\t\t// 9:  remote: Create a pull request for 'my_branch' on GitHub by visiting:\n\t\t// 8:  remote:      https://github.com/microsoft/vscode/pull/new/my_branch\n\t\t// 7:  remote:\n\t\t// 6:  remote: GitHub found x vulnerabilities on microsoft/vscode's default branch (...). To find out more, visit:\n\t\t// 5:  remote:      https://github.com/microsoft/vscode/security/dependabot\n\t\t// 4:  remote:\n\t\t// 3:  To https://github.com/microsoft/vscode\n\t\t// 2:  * [new branch]              my_branch -> my_branch\n\t\t// 1:  Branch 'my_branch' set up to track remote branch 'my_branch' from 'origin'.\n\t\t// 0:\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitCreatePrOutputRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 4,\n\t\t\t// ~6 should only be needed here for security alerts, but the git provider can customize\n\t\t\t// the text, so use 12 to be safe.\n\t\t\tlength: 12,\n\t\t},\n\t\tcommandExitResult: \"success\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst link =\n\t\t\t\tmatchResult?.outputMatch?.regexMatch?.groups?.link?.trimEnd();\n\t\t\tif (!link) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst label = localize(\"terminal.createPR\", \"Create PR {0}\", link);\n\t\t\treturn {\n\t\t\t\tid: \"Git Create Pr\",\n\t\t\t\tlabel,\n\t\t\t\tenabled: true,\n\t\t\t\ttype: TerminalQuickFixType.Opener,\n\t\t\t\turi: URI.parse(link),\n\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t};\n\t\t},\n\t};\n}\n\nexport function pwshGeneralError(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Pwsh General Error\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: /.+/,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: PwshGeneralErrorOutputRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 0,\n\t\t\tlength: 10,\n\t\t},\n\t\tcommandExitResult: \"error\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst lines =\n\t\t\t\tmatchResult.outputMatch?.regexMatch.input?.split(\"\\n\");\n\t\t\tif (!lines) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find the start\n\t\t\tlet i = 0;\n\t\t\tlet inFeedbackProvider = false;\n\t\t\tfor (; i < lines.length; i++) {\n\t\t\t\tif (lines[i].match(PwshGeneralErrorOutputRegex)) {\n\t\t\t\t\tinFeedbackProvider = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!inFeedbackProvider) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst suggestions = lines[i + 1]\n\t\t\t\t.match(/The most similar commands are: (?<values>.+)./)\n\t\t\t\t?.groups?.values?.split(\", \");\n\t\t\tif (!suggestions) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst result: ITerminalQuickFixTerminalCommandAction[] = [];\n\t\t\tfor (const suggestion of suggestions) {\n\t\t\t\tresult.push({\n\t\t\t\t\tid: \"Pwsh General Error\",\n\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\tterminalCommand: suggestion,\n\t\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t};\n}\n\nexport function pwshUnixCommandNotFoundError(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: \"Unix Command Not Found\",\n\t\ttype: \"internal\",\n\t\tcommandLineMatcher: /.+/,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: PwshUnixCommandNotFoundErrorOutputRegex,\n\t\t\tanchor: \"bottom\",\n\t\t\toffset: 0,\n\t\t\tlength: 10,\n\t\t},\n\t\tcommandExitResult: \"error\",\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst lines =\n\t\t\t\tmatchResult.outputMatch?.regexMatch.input?.split(\"\\n\");\n\t\t\tif (!lines) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find the start\n\t\t\tlet i = 0;\n\t\t\tlet inFeedbackProvider = false;\n\t\t\tfor (; i < lines.length; i++) {\n\t\t\t\tif (lines[i].match(PwshUnixCommandNotFoundErrorOutputRegex)) {\n\t\t\t\t\tinFeedbackProvider = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!inFeedbackProvider) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Always remove the first element as it's the \"Suggestion [cmd-not-found]\"\" line\n\t\t\tconst result: ITerminalQuickFixTerminalCommandAction[] = [];\n\t\t\tlet inSuggestions = false;\n\t\t\tfor (; i < lines.length; i++) {\n\t\t\t\tconst line = lines[i].trim();\n\t\t\t\tif (line.length === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst installCommand = line.match(\n\t\t\t\t\t/You also have .+ installed, you can run '(?<command>.+)' instead./,\n\t\t\t\t)?.groups?.command;\n\t\t\t\tif (installCommand) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tid: \"Pwsh Unix Command Not Found Error\",\n\t\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\t\tterminalCommand: installCommand,\n\t\t\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t\t\t});\n\t\t\t\t\tinSuggestions = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tline.match(\n\t\t\t\t\t\t/Command '.+' not found, but can be installed with:/,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tinSuggestions = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (inSuggestions) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tid: \"Pwsh Unix Command Not Found Error\",\n\t\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\t\tterminalCommand: line.trim(),\n\t\t\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t};\n}\n"],
  "mappings": "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",
  "names": ["QuickFixSource"]
}
