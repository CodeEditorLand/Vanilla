import{strictEqual as p}from"assert";import{importAMDNodeModule as k}from"../../../../../../amdX.js";import"../../../../../../base/common/actions.js";import{Event as T}from"../../../../../../base/common/event.js";import{isWindows as F}from"../../../../../../base/common/platform.js";import{URI as G}from"../../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as O}from"../../../../../../base/test/common/utils.js";import{TestCommandService as A}from"../../../../../../editor/test/browser/editorTestServices.js";import{IConfigurationService as D}from"../../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as E}from"../../../../../../platform/configuration/test/common/testConfigurationService.js";import{ContextMenuService as N}from"../../../../../../platform/contextview/browser/contextMenuService.js";import{IContextMenuService as U}from"../../../../../../platform/contextview/browser/contextView.js";import{TestInstantiationService as j}from"../../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ILabelService as Q}from"../../../../../../platform/label/common/label.js";import{ILogService as q,NullLogService as _}from"../../../../../../platform/log/common/log.js";import{IOpenerService as $}from"../../../../../../platform/opener/common/opener.js";import{IStorageService as Y}from"../../../../../../platform/storage/common/storage.js";import{TerminalCapability as H}from"../../../../../../platform/terminal/common/capabilities/capabilities.js";import{CommandDetectionCapability as W}from"../../../../../../platform/terminal/common/capabilities/commandDetectionCapability.js";import{TerminalCapabilityStore as X}from"../../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js";import"../../../../../../platform/terminal/common/terminal.js";import{ITerminalQuickFixService as B}from"../../browser/quickFix.js";import{getQuickFixesForCommand as m,TerminalQuickFixAddon as V}from"../../browser/quickFixAddon.js";import{freePort as z,FreePortOutputRegex as M,gitCreatePr as R,GitCreatePrOutputRegex as S,gitPull as J,GitPullOutputRegex as v,GitPushOutputRegex as y,gitPushSetUpstream as I,gitSimilar as K,GitSimilarOutputRegex as b,gitTwoDashes as Z,GitTwoDashesRegex as C,pwshGeneralError as tt,PwshGeneralErrorOutputRegex as P,pwshUnixCommandNotFoundError as et,PwshUnixCommandNotFoundErrorOutputRegex as L}from"../../browser/terminalQuickFixBuiltinActions.js";import{TestStorageService as nt}from"../../../../../test/common/workbenchTestServices.js";suite("QuickFixAddon",()=>{const w=O();let l,f,e,n,r,i,g;setup(async()=>{g=w.add(new j);const t=(await k("@xterm/xterm","lib/xterm.js")).Terminal;i=w.add(new t({allowProposedApi:!0,cols:80,rows:30})),g.stub(Y,w.add(new nt)),g.stub(B,{onDidRegisterProvider:T.None,onDidUnregisterProvider:T.None,onDidRegisterCommandSelector:T.None,extensionQuickFixes:Promise.resolve([])}),g.stub(D,new E),r=g.stub(Q,{});const s=w.add(new X);g.stub(q,new _),f=w.add(g.createInstance(W,i)),s.add(H.CommandDetection,f),g.stub(U,w.add(g.createInstance(N))),n=g.stub($,{}),e=new A(g),l=g.createInstance(V,[],s),i.loadAddon(l)}),suite("registerCommandFinishedListener & getMatchActions",()=>{suite("gitSimilarCommand",()=>{const t=new Map,s="git sttatus";let a=`git: 'sttatus' is not a git command. See 'git --help'.

			The most similar command is
			status`;const u=1,c=[{id:"Git Similar",enabled:!0,label:"Run: git status",tooltip:"Run: git status",command:"git status"}],o=a.split(`
`);setup(()=>{const x=K();t.set(x.commandLineMatcher.toString(),[x]),l.registerCommandFinishedListener(x)}),suite("returns undefined when",()=>{test("output does not match",async()=>{p(await m([],i,d(s,"invalid output",b,u,["invalid output"]),t,e,n,r),void 0)}),test("command does not match",async()=>{p(await m([],i,d("gt sttatus",a,b,u,o),t,e,n,r),void 0)})}),suite("returns actions when",()=>{test("expected unix exit code",async()=>{h(await m([],i,d(s,a,b,u,o),t,e,n,r),c)}),test("matching exit status",async()=>{h(await m([],i,d(s,a,b,2,o),t,e,n,r),c)})}),suite("returns match",()=>{test("returns match",async()=>{h(await m([],i,d(s,a,b,u,o),t,e,n,r),c)}),test("returns multiple match",async()=>{a=`git: 'pu' is not a git command. See 'git --help'.
				The most similar commands are
						pull
						push`;const x=[{id:"Git Similar",enabled:!0,label:"Run: git pull",tooltip:"Run: git pull",command:"git pull"},{id:"Git Similar",enabled:!0,label:"Run: git push",tooltip:"Run: git push",command:"git push"}];h(await m([],i,d("git pu",a,b,u,a.split(`
`)),t,e,n,r),x)}),test("passes any arguments through",async()=>{a=`git: 'checkoutt' is not a git command. See 'git --help'.
				The most similar commands are
						checkout`,h(await m([],i,d("git checkoutt .",a,b,u,a.split(`
`)),t,e,n,r),[{id:"Git Similar",enabled:!0,label:"Run: git checkout .",tooltip:"Run: git checkout .",command:"git checkout ."}])})})}),suite("gitTwoDashes",()=>{const t=new Map,s="git add . -all",a="error: did you mean `--all` (with two dashes)?",u=1,c=[{id:"Git Two Dashes",enabled:!0,label:"Run: git add . --all",tooltip:"Run: git add . --all",command:"git add . --all"}];setup(()=>{const o=Z();t.set(o.commandLineMatcher.toString(),[o]),l.registerCommandFinishedListener(o)}),suite("returns undefined when",()=>{test("output does not match",async()=>{p(await m([],i,d(s,"invalid output",C,u),t,e,n,r),void 0)}),test("command does not match",async()=>{p(await m([],i,d("gt sttatus",a,C,u),t,e,n,r),void 0)})}),suite("returns actions when",()=>{test("expected unix exit code",async()=>{h(await m([],i,d(s,a,C,u),t,e,n,r),c)}),test("matching exit status",async()=>{h(await m([],i,d(s,a,C,2),t,e,n,r),c)})})}),suite("gitPull",()=>{const t=new Map,s="git checkout vnext",a=`Already on 'vnext' 
 Your branch is behind 'origin/vnext' by 1 commit, and can be fast-forwarded.`,u=0,c=[{id:"Git Pull",enabled:!0,label:"Run: git pull",tooltip:"Run: git pull",command:"git pull"}];setup(()=>{const o=J();t.set(o.commandLineMatcher.toString(),[o]),l.registerCommandFinishedListener(o)}),suite("returns undefined when",()=>{test("output does not match",async()=>{p(await m([],i,d(s,"invalid output",v,u),t,e,n,r),void 0)}),test("command does not match",async()=>{p(await m([],i,d("gt add",a,v,u),t,e,n,r),void 0)}),test("exit code does not match",async()=>{p(await m([],i,d(s,a,v,2),t,e,n,r),void 0)})}),suite("returns actions when",()=>{test("matching exit status, command, ouput",async()=>{h(await m([],i,d(s,a,v,u),t,e,n,r),c)})})}),F||suite("freePort",()=>{const t=new Map,s="yarn start dev",a=`yarn run v1.22.17
			warning ../../package.json: No license field
			Error: listen EADDRINUSE: address already in use 0.0.0.0:3000
				at Server.setupListenHandle [as _listen2] (node:net:1315:16)
				at listenInCluster (node:net:1363:12)
				at doListen (node:net:1501:7)
				at processTicksAndRejections (node:internal/process/task_queues:84:21)
			Emitted 'error' event on WebSocketServer instance at:
				at Server.emit (node:events:394:28)
				at emitErrorNT (node:net:1342:8)
				at processTicksAndRejections (node:internal/process/task_queues:83:21) {
			}
			error Command failed with exit code 1.
			info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.`,u=[{id:"Free Port",label:"Free port 3000",run:!0,tooltip:"Free port 3000",enabled:!0}];setup(()=>{const c=z(()=>Promise.resolve());t.set(c.commandLineMatcher.toString(),[c]),l.registerCommandFinishedListener(c)}),suite("returns undefined when",()=>{test("output does not match",async()=>{p(await m([],i,d(s,"invalid output",M),t,e,n,r),void 0)})}),test("returns actions",async()=>{h(await m([],i,d(s,a,M),t,e,n,r),u)})}),suite("gitPushSetUpstream",()=>{const t=new Map,s="git push",a=`fatal: The current branch test22 has no upstream branch.
			To push the current branch and set the remote as upstream, use

				git push --set-upstream origin test22`,u=128,c=[{id:"Git Push Set Upstream",enabled:!0,label:"Run: git push --set-upstream origin test22",tooltip:"Run: git push --set-upstream origin test22",command:"git push --set-upstream origin test22"}];setup(()=>{const o=I();t.set(o.commandLineMatcher.toString(),[o]),l.registerCommandFinishedListener(o)}),suite("returns undefined when",()=>{test("output does not match",async()=>{p(await m([],i,d(s,"invalid output",y,u),t,e,n,r),void 0)}),test("command does not match",async()=>{p(await m([],i,d("git status",a,y,u),t,e,n,r),void 0)})}),suite("returns actions when",()=>{test("expected unix exit code",async()=>{h(await m([],i,d(s,a,y,u),t,e,n,r),c)}),test("matching exit status",async()=>{h(await m([],i,d(s,a,y,2),t,e,n,r),c)})})}),suite("gitCreatePr",()=>{const t=new Map,s="git push",a=`Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
			remote:
			remote: Create a pull request for 'test22' on GitHub by visiting:
			remote:      https://github.com/meganrogge/xterm.js/pull/new/test22
			remote:
			To https://github.com/meganrogge/xterm.js
			 * [new branch]        test22 -> test22
			Branch 'test22' set up to track remote branch 'test22' from 'origin'. `,u=0,c=[{id:"Git Create Pr",enabled:!0,label:"Open: https://github.com/meganrogge/xterm.js/pull/new/test22",tooltip:"Open: https://github.com/meganrogge/xterm.js/pull/new/test22",uri:G.parse("https://github.com/meganrogge/xterm.js/pull/new/test22")}];setup(()=>{const o=R();t.set(o.commandLineMatcher.toString(),[o]),l.registerCommandFinishedListener(o)}),suite("returns undefined when",()=>{test("output does not match",async()=>{p(await m([],i,d(s,"invalid output",S,u),t,e,n,r),void 0)}),test("command does not match",async()=>{p(await m([],i,d("git status",a,S,u),t,e,n,r),void 0)}),test("failure exit status",async()=>{p(await m([],i,d(s,a,S,2),t,e,n,r),void 0)})}),suite("returns actions when",()=>{test("expected unix exit code",async()=>{h(await m([],i,d(s,a,S,u),t,e,n,r),c)})})})}),suite("gitPush - multiple providers",()=>{const t=new Map,s="git push",a=`fatal: The current branch test22 has no upstream branch.
		To push the current branch and set the remote as upstream, use

			git push --set-upstream origin test22`,u=128,c=[{id:"Git Push Set Upstream",enabled:!0,label:"Run: git push --set-upstream origin test22",tooltip:"Run: git push --set-upstream origin test22",command:"git push --set-upstream origin test22"}];setup(()=>{const o=I(),x=R();l.registerCommandFinishedListener(x),t.set(o.commandLineMatcher.toString(),[o,x])}),suite("returns undefined when",()=>{test("output does not match",async()=>{p(await m([],i,d(s,"invalid output",y,u),t,e,n,r),void 0)}),test("command does not match",async()=>{p(await m([],i,d("git status",a,y,u),t,e,n,r),void 0)})}),suite("returns actions when",()=>{test("expected unix exit code",async()=>{h(await m([],i,d(s,a,y,u),t,e,n,r),c)}),test("matching exit status",async()=>{h(await m([],i,d(s,a,y,2),t,e,n,r),c)})})}),suite("pwsh feedback providers",()=>{suite("General",()=>{const t=new Map,s="not important",a=["...","","Suggestion [General]:","  The most similar commands are: python3, python3m, pamon, python3.6, rtmon, echo, pushd, etsn, pwsh, pwconv.","","Suggestion [cmd-not-found]:","  Command 'python' not found, but can be installed with:","  sudo apt install python3","  sudo apt install python","  sudo apt install python-minimal","  You also have python3 installed, you can run 'python3' instead.'",""].join(`
`),u=128,c=["python3","python3m","pamon","python3.6","rtmon","echo","pushd","etsn","pwsh","pwconv"].map(o=>({id:"Pwsh General Error",enabled:!0,label:`Run: ${o}`,tooltip:`Run: ${o}`,command:o}));setup(()=>{const o=tt();l.registerCommandFinishedListener(o),t.set(o.commandLineMatcher.toString(),[o])}),test("returns undefined when output does not match",async()=>{p(await m([],i,d(s,"invalid output",P,u),t,e,n,r),void 0)}),test("returns actions when output matches",async()=>{h(await m([],i,d(s,a,P,u),t,e,n,r),c)})}),suite("Unix cmd-not-found",()=>{const t=new Map,s="not important",a=["...","","Suggestion [General]","  The most similar commands are: python3, python3m, pamon, python3.6, rtmon, echo, pushd, etsn, pwsh, pwconv.","","Suggestion [cmd-not-found]:","  Command 'python' not found, but can be installed with:","  sudo apt install python3","  sudo apt install python","  sudo apt install python-minimal","  You also have python3 installed, you can run 'python3' instead.'",""].join(`
`),u=128,c=["sudo apt install python3","sudo apt install python","sudo apt install python-minimal","python3"].map(o=>({id:"Pwsh Unix Command Not Found Error",enabled:!0,label:`Run: ${o}`,tooltip:`Run: ${o}`,command:o}));setup(()=>{const o=et();l.registerCommandFinishedListener(o),t.set(o.commandLineMatcher.toString(),[o])}),test("returns undefined when output does not match",async()=>{p(await m([],i,d(s,"invalid output",L,u),t,e,n,r),void 0)}),test("returns actions when output matches",async()=>{h(await m([],i,d(s,a,L,u),t,e,n,r),c)})})})});function d(w,l,f,e,n){return{cwd:"",commandStartLineContent:"",markProperties:{},executedX:void 0,startX:void 0,command:w,isTrusted:!0,exitCode:e,getOutput:()=>l,getOutputMatch:r=>{if(f){const i=l.match(f)??void 0;if(i)return n?{regexMatch:i,outputLines:n}:{regexMatch:i,outputLines:[]}}},timestamp:Date.now(),hasOutput:()=>!!l}}function h(w,l){p(w?.length,l.length);for(let f=0;f<l.length;f++){const e=l[f],n=w[f];p(n.id,e.id,"ID"),p(n.enabled,e.enabled,"enabled"),p(n.label,e.label,"label"),p(n.tooltip,e.tooltip,"tooltip"),e.command&&p(n.command,e.command),e.uri&&p(n.uri.toString(),e.uri.toString())}}
