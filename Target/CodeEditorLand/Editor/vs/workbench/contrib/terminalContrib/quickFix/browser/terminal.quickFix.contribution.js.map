{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/quickFix/browser/terminal.quickFix.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/terminalQuickFix.css';\nimport { KeyCode, KeyMod } from '../../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { localize2 } from '../../../../../nls.js';\nimport { InstantiationType, registerSingleton } from '../../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ITerminalContribution, ITerminalInstance, IXtermTerminal } from '../../../terminal/browser/terminal.js';\nimport { registerActiveInstanceAction } from '../../../terminal/browser/terminalActions.js';\nimport { registerTerminalContribution } from '../../../terminal/browser/terminalExtensions.js';\nimport { TerminalWidgetManager } from '../../../terminal/browser/widgets/widgetManager.js';\nimport { ITerminalProcessManager } from '../../../terminal/common/terminal.js';\nimport { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';\nimport { ITerminalQuickFixService } from './quickFix.js';\nimport { TerminalQuickFixAddon } from './quickFixAddon.js';\nimport { freePort, gitCreatePr, gitPull, gitPushSetUpstream, gitSimilar, gitTwoDashes, pwshGeneralError, pwshUnixCommandNotFoundError } from './terminalQuickFixBuiltinActions.js';\nimport { TerminalQuickFixService } from './terminalQuickFixService.js';\nimport type { Terminal as RawXtermTerminal } from '@xterm/xterm';\n\n// #region Services\n\nregisterSingleton(ITerminalQuickFixService, TerminalQuickFixService, InstantiationType.Delayed);\n\n// #endregion\n\n// #region Contributions\n\nclass TerminalQuickFixContribution extends DisposableStore implements ITerminalContribution {\n\tstatic readonly ID = 'quickFix';\n\n\tstatic get(instance: ITerminalInstance): TerminalQuickFixContribution | null {\n\t\treturn instance.getContribution<TerminalQuickFixContribution>(TerminalQuickFixContribution.ID);\n\t}\n\n\tprivate _addon?: TerminalQuickFixAddon;\n\tget addon(): TerminalQuickFixAddon | undefined { return this._addon; }\n\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\tprocessManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\txtermReady(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\t// Create addon\n\t\tthis._addon = this._instantiationService.createInstance(TerminalQuickFixAddon, undefined, this._instance.capabilities);\n\t\txterm.raw.loadAddon(this._addon);\n\n\t\t// Hook up listeners\n\t\tthis.add(this._addon.onDidRequestRerunCommand((e) => this._instance.runCommand(e.command, e.shouldExecute || false)));\n\n\t\t// Register quick fixes\n\t\tfor (const actionOption of [\n\t\t\tgitTwoDashes(),\n\t\t\tgitPull(),\n\t\t\tfreePort((port: string, command: string) => this._instance.freePortKillProcess(port, command)),\n\t\t\tgitSimilar(),\n\t\t\tgitPushSetUpstream(),\n\t\t\tgitCreatePr(),\n\t\t\tpwshUnixCommandNotFoundError(),\n\t\t\tpwshGeneralError()\n\t\t]) {\n\t\t\tthis._addon.registerCommandFinishedListener(actionOption);\n\t\t}\n\t}\n}\nregisterTerminalContribution(TerminalQuickFixContribution.ID, TerminalQuickFixContribution);\n\n// #endregion\n\n// #region Actions\n\nconst enum TerminalQuickFixCommandId {\n\tShowQuickFixes = 'workbench.action.terminal.showQuickFixes',\n}\n\nregisterActiveInstanceAction({\n\tid: TerminalQuickFixCommandId.ShowQuickFixes,\n\ttitle: localize2('workbench.action.terminal.showQuickFixes', 'Show Terminal Quick Fixes'),\n\tprecondition: TerminalContextKeys.focus,\n\tkeybinding: {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\tweight: KeybindingWeight.WorkbenchContrib\n\t},\n\trun: (activeInstance) => TerminalQuickFixContribution.get(activeInstance)?.addon?.showMenu()\n});\n\n// #endregion\n"],
  "mappings": ";;;;;;;;;;;;AAKA,OAAO;AACP,SAAS,SAAS,cAAc;AAChC,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAC1B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,6BAA6B;AACtC,SAAS,wBAAwB;AACjC,SAAS,uBAAuB,mBAAmB,sBAAsB;AACzE,SAAS,oCAAoC;AAC7C,SAAS,oCAAoC;AAC7C,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC,SAAS,2BAA2B;AACpC,SAAS,gCAAgC;AACzC,SAAS,6BAA6B;AACtC,SAAS,UAAU,aAAa,SAAS,oBAAoB,YAAY,cAAc,kBAAkB,oCAAoC;AAC7I,SAAS,+BAA+B;AAKxC,kBAAkB,0BAA0B,yBAAyB,kBAAkB,OAAO;AAM9F,IAAM,+BAAN,cAA2C,gBAAiD;AAAA,EAU3F,YACkB,WACjB,gBACA,eACwC,uBACvC;AACD,UAAM;AALW;AAGuB;AAAA,EAGzC;AAAA,EAjDD,OAgC4F;AAAA;AAAA;AAAA,EAC3F,OAAgB,KAAK;AAAA,EAErB,OAAO,IAAI,UAAkE;AAC5E,WAAO,SAAS,gBAA8C,6BAA6B,EAAE;AAAA,EAC9F;AAAA,EAEQ;AAAA,EACR,IAAI,QAA2C;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAWrE,WAAW,OAAyD;AAEnE,SAAK,SAAS,KAAK,sBAAsB,eAAe,uBAAuB,QAAW,KAAK,UAAU,YAAY;AACrH,UAAM,IAAI,UAAU,KAAK,MAAM;AAG/B,SAAK,IAAI,KAAK,OAAO,yBAAyB,CAAC,MAAM,KAAK,UAAU,WAAW,EAAE,SAAS,EAAE,iBAAiB,KAAK,CAAC,CAAC;AAGpH,eAAW,gBAAgB;AAAA,MAC1B,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,SAAS,CAAC,MAAc,YAAoB,KAAK,UAAU,oBAAoB,MAAM,OAAO,CAAC;AAAA,MAC7F,WAAW;AAAA,MACX,mBAAmB;AAAA,MACnB,YAAY;AAAA,MACZ,6BAA6B;AAAA,MAC7B,iBAAiB;AAAA,IAClB,GAAG;AACF,WAAK,OAAO,gCAAgC,YAAY;AAAA,IACzD;AAAA,EACD;AACD;AAzCM,+BAAN;AAAA,EAcG;AAAA,GAdG;AA0CN,6BAA6B,6BAA6B,IAAI,4BAA4B;AAM1F,IAAW,4BAAX,kBAAWA,+BAAX;AACC,EAAAA,2BAAA,oBAAiB;AADP,SAAAA;AAAA,GAAA;AAIX,6BAA6B;AAAA,EAC5B,IAAI;AAAA,EACJ,OAAO,UAAU,4CAA4C,2BAA2B;AAAA,EACxF,cAAc,oBAAoB;AAAA,EAClC,YAAY;AAAA,IACX,SAAS,OAAO,UAAU,QAAQ;AAAA,IAClC,QAAQ,iBAAiB;AAAA,EAC1B;AAAA,EACA,KAAK,wBAAC,mBAAmB,6BAA6B,IAAI,cAAc,GAAG,OAAO,SAAS,GAAtF;AACN,CAAC;",
  "names": ["TerminalQuickFixCommandId"]
}
