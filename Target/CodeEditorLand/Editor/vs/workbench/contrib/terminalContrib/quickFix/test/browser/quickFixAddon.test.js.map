{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/quickFix/test/browser/quickFixAddon.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from '@xterm/xterm';\nimport { strictEqual } from 'assert';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { IAction } from '../../../../../../base/common/actions.js';\nimport { Event } from '../../../../../../base/common/event.js';\nimport { isWindows } from '../../../../../../base/common/platform.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { TestCommandService } from '../../../../../../editor/test/browser/editorTestServices.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { ContextMenuService } from '../../../../../../platform/contextview/browser/contextMenuService.js';\nimport { IContextMenuService } from '../../../../../../platform/contextview/browser/contextView.js';\nimport { TestInstantiationService } from '../../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ILabelService } from '../../../../../../platform/label/common/label.js';\nimport { ILogService, NullLogService } from '../../../../../../platform/log/common/log.js';\nimport { IOpenerService } from '../../../../../../platform/opener/common/opener.js';\nimport { IStorageService } from '../../../../../../platform/storage/common/storage.js';\nimport { ITerminalCommand, TerminalCapability } from '../../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { CommandDetectionCapability } from '../../../../../../platform/terminal/common/capabilities/commandDetectionCapability.js';\nimport { TerminalCapabilityStore } from '../../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { ITerminalOutputMatcher } from '../../../../../../platform/terminal/common/terminal.js';\nimport { ITerminalQuickFixService } from '../../browser/quickFix.js';\nimport { getQuickFixesForCommand, TerminalQuickFixAddon } from '../../browser/quickFixAddon.js';\nimport { freePort, FreePortOutputRegex, gitCreatePr, GitCreatePrOutputRegex, gitPull, GitPullOutputRegex, GitPushOutputRegex, gitPushSetUpstream, gitSimilar, GitSimilarOutputRegex, gitTwoDashes, GitTwoDashesRegex, pwshGeneralError, PwshGeneralErrorOutputRegex, pwshUnixCommandNotFoundError, PwshUnixCommandNotFoundErrorOutputRegex } from '../../browser/terminalQuickFixBuiltinActions.js';\nimport { TestStorageService } from '../../../../../test/common/workbenchTestServices.js';\n\nsuite('QuickFixAddon', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet quickFixAddon: TerminalQuickFixAddon;\n\tlet commandDetection: CommandDetectionCapability;\n\tlet commandService: TestCommandService;\n\tlet openerService: IOpenerService;\n\tlet labelService: ILabelService;\n\tlet terminal: Terminal;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\t\tterminal = store.add(new TerminalCtor({\n\t\t\tallowProposedApi: true,\n\t\t\tcols: 80,\n\t\t\trows: 30\n\t\t}));\n\t\tinstantiationService.stub(IStorageService, store.add(new TestStorageService()));\n\t\tinstantiationService.stub(ITerminalQuickFixService, {\n\t\t\tonDidRegisterProvider: Event.None,\n\t\t\tonDidUnregisterProvider: Event.None,\n\t\t\tonDidRegisterCommandSelector: Event.None,\n\t\t\textensionQuickFixes: Promise.resolve([])\n\t\t} as Partial<ITerminalQuickFixService>);\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tlabelService = instantiationService.stub(ILabelService, {} as Partial<ILabelService>);\n\t\tconst capabilities = store.add(new TerminalCapabilityStore());\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tcommandDetection = store.add(instantiationService.createInstance(CommandDetectionCapability, terminal));\n\t\tcapabilities.add(TerminalCapability.CommandDetection, commandDetection);\n\t\tinstantiationService.stub(IContextMenuService, store.add(instantiationService.createInstance(ContextMenuService)));\n\t\topenerService = instantiationService.stub(IOpenerService, {} as Partial<IOpenerService>);\n\t\tcommandService = new TestCommandService(instantiationService);\n\n\t\tquickFixAddon = instantiationService.createInstance(TerminalQuickFixAddon, [], capabilities);\n\t\tterminal.loadAddon(quickFixAddon);\n\t});\n\n\tsuite('registerCommandFinishedListener & getMatchActions', () => {\n\t\tsuite('gitSimilarCommand', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git sttatus`;\n\t\t\tlet output = `git: 'sttatus' is not a git command. See 'git --help'.\n\n\t\t\tThe most similar command is\n\t\t\tstatus`;\n\t\t\tconst exitCode = 1;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Similar',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Run: git status',\n\t\t\t\ttooltip: 'Run: git status',\n\t\t\t\tcommand: 'git status'\n\t\t\t}];\n\t\t\tconst outputLines = output.split('\\n');\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitSimilar();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual(await (getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitSimilarOutputRegex, exitCode, [`invalid output`]), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual(await (getQuickFixesForCommand([], terminal, createCommand(`gt sttatus`, output, GitSimilarOutputRegex, exitCode, outputLines), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitSimilarOutputRegex, exitCode, outputLines), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('matching exit status', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitSimilarOutputRegex, 2, outputLines), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns match', () => {\n\t\t\t\ttest('returns match', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitSimilarOutputRegex, exitCode, outputLines), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\n\t\t\t\ttest('returns multiple match', async () => {\n\t\t\t\t\toutput = `git: 'pu' is not a git command. See 'git --help'.\n\t\t\t\tThe most similar commands are\n\t\t\t\t\t\tpull\n\t\t\t\t\t\tpush`;\n\t\t\t\t\tconst actions = [{\n\t\t\t\t\t\tid: 'Git Similar',\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tlabel: 'Run: git pull',\n\t\t\t\t\t\ttooltip: 'Run: git pull',\n\t\t\t\t\t\tcommand: 'git pull'\n\t\t\t\t\t}, {\n\t\t\t\t\t\tid: 'Git Similar',\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tlabel: 'Run: git push',\n\t\t\t\t\t\ttooltip: 'Run: git push',\n\t\t\t\t\t\tcommand: 'git push'\n\t\t\t\t\t}];\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand('git pu', output, GitSimilarOutputRegex, exitCode, output.split('\\n')), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('passes any arguments through', async () => {\n\t\t\t\t\toutput = `git: 'checkoutt' is not a git command. See 'git --help'.\n\t\t\t\tThe most similar commands are\n\t\t\t\t\t\tcheckout`;\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand('git checkoutt .', output, GitSimilarOutputRegex, exitCode, output.split('\\n')), expectedMap, commandService, openerService, labelService)), [{\n\t\t\t\t\t\tid: 'Git Similar',\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tlabel: 'Run: git checkout .',\n\t\t\t\t\t\ttooltip: 'Run: git checkout .',\n\t\t\t\t\t\tcommand: 'git checkout .'\n\t\t\t\t\t}]);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tsuite('gitTwoDashes', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git add . -all`;\n\t\t\tconst output = 'error: did you mean `--all` (with two dashes)?';\n\t\t\tconst exitCode = 1;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Two Dashes',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Run: git add . --all',\n\t\t\t\ttooltip: 'Run: git add . --all',\n\t\t\t\tcommand: 'git add . --all'\n\t\t\t}];\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitTwoDashes();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitTwoDashesRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`gt sttatus`, output, GitTwoDashesRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitTwoDashesRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('matching exit status', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitTwoDashesRegex, 2), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tsuite('gitPull', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git checkout vnext`;\n\t\t\tconst output = 'Already on \\'vnext\\' \\n Your branch is behind \\'origin/vnext\\' by 1 commit, and can be fast-forwarded.';\n\t\t\tconst exitCode = 0;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Pull',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Run: git pull',\n\t\t\t\ttooltip: 'Run: git pull',\n\t\t\t\tcommand: 'git pull'\n\t\t\t}];\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitPull();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitPullOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`gt add`, output, GitPullOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('exit code does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPullOutputRegex, 2), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('matching exit status, command, ouput', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPullOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tif (!isWindows) {\n\t\t\tsuite('freePort', () => {\n\t\t\t\tconst expectedMap = new Map();\n\t\t\t\tconst portCommand = `yarn start dev`;\n\t\t\t\tconst output = `yarn run v1.22.17\n\t\t\twarning ../../package.json: No license field\n\t\t\tError: listen EADDRINUSE: address already in use 0.0.0.0:3000\n\t\t\t\tat Server.setupListenHandle [as _listen2] (node:net:1315:16)\n\t\t\t\tat listenInCluster (node:net:1363:12)\n\t\t\t\tat doListen (node:net:1501:7)\n\t\t\t\tat processTicksAndRejections (node:internal/process/task_queues:84:21)\n\t\t\tEmitted 'error' event on WebSocketServer instance at:\n\t\t\t\tat Server.emit (node:events:394:28)\n\t\t\t\tat emitErrorNT (node:net:1342:8)\n\t\t\t\tat processTicksAndRejections (node:internal/process/task_queues:83:21) {\n\t\t\t}\n\t\t\terror Command failed with exit code 1.\n\t\t\tinfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.`;\n\t\t\t\tconst actionOptions = [{\n\t\t\t\t\tid: 'Free Port',\n\t\t\t\t\tlabel: 'Free port 3000',\n\t\t\t\t\trun: true,\n\t\t\t\t\ttooltip: 'Free port 3000',\n\t\t\t\t\tenabled: true\n\t\t\t\t}];\n\t\t\t\tsetup(() => {\n\t\t\t\t\tconst command = freePort(() => Promise.resolve());\n\t\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t\t});\n\t\t\t\tsuite('returns undefined when', () => {\n\t\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(portCommand, `invalid output`, FreePortOutputRegex), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\ttest('returns actions', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(portCommand, output, FreePortOutputRegex), expectedMap, commandService, openerService, labelService)), actionOptions);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tsuite('gitPushSetUpstream', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git push`;\n\t\t\tconst output = `fatal: The current branch test22 has no upstream branch.\n\t\t\tTo push the current branch and set the remote as upstream, use\n\n\t\t\t\tgit push --set-upstream origin test22`;\n\t\t\tconst exitCode = 128;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Push Set Upstream',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Run: git push --set-upstream origin test22',\n\t\t\t\ttooltip: 'Run: git push --set-upstream origin test22',\n\t\t\t\tcommand: 'git push --set-upstream origin test22'\n\t\t\t}];\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitPushSetUpstream();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`git status`, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('matching exit status', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, 2), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tsuite('gitCreatePr', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git push`;\n\t\t\tconst output = `Total 0 (delta 0), reused 0 (delta 0), pack-reused 0\n\t\t\tremote:\n\t\t\tremote: Create a pull request for 'test22' on GitHub by visiting:\n\t\t\tremote:      https://github.com/meganrogge/xterm.js/pull/new/test22\n\t\t\tremote:\n\t\t\tTo https://github.com/meganrogge/xterm.js\n\t\t\t * [new branch]        test22 -> test22\n\t\t\tBranch 'test22' set up to track remote branch 'test22' from 'origin'. `;\n\t\t\tconst exitCode = 0;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Create Pr',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Open: https://github.com/meganrogge/xterm.js/pull/new/test22',\n\t\t\t\ttooltip: 'Open: https://github.com/meganrogge/xterm.js/pull/new/test22',\n\t\t\t\turi: URI.parse('https://github.com/meganrogge/xterm.js/pull/new/test22')\n\t\t\t}];\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitCreatePr();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitCreatePrOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`git status`, output, GitCreatePrOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('failure exit status', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitCreatePrOutputRegex, 2), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitCreatePrOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n\tsuite('gitPush - multiple providers', () => {\n\t\tconst expectedMap = new Map();\n\t\tconst command = `git push`;\n\t\tconst output = `fatal: The current branch test22 has no upstream branch.\n\t\tTo push the current branch and set the remote as upstream, use\n\n\t\t\tgit push --set-upstream origin test22`;\n\t\tconst exitCode = 128;\n\t\tconst actions = [{\n\t\t\tid: 'Git Push Set Upstream',\n\t\t\tenabled: true,\n\t\t\tlabel: 'Run: git push --set-upstream origin test22',\n\t\t\ttooltip: 'Run: git push --set-upstream origin test22',\n\t\t\tcommand: 'git push --set-upstream origin test22'\n\t\t}];\n\t\tsetup(() => {\n\t\t\tconst pushCommand = gitPushSetUpstream();\n\t\t\tconst prCommand = gitCreatePr();\n\t\t\tquickFixAddon.registerCommandFinishedListener(prCommand);\n\t\t\texpectedMap.set(pushCommand.commandLineMatcher.toString(), [pushCommand, prCommand]);\n\t\t});\n\t\tsuite('returns undefined when', () => {\n\t\t\ttest('output does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t\ttest('command does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`git status`, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t});\n\t\tsuite('returns actions when', () => {\n\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t\ttest('matching exit status', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, 2), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t});\n\t});\n\tsuite('pwsh feedback providers', () => {\n\t\tsuite('General', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `not important`;\n\t\t\tconst output = [\n\t\t\t\t`...`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [General]:`,\n\t\t\t\t`  The most similar commands are: python3, python3m, pamon, python3.6, rtmon, echo, pushd, etsn, pwsh, pwconv.`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [cmd-not-found]:`,\n\t\t\t\t`  Command 'python' not found, but can be installed with:`,\n\t\t\t\t`  sudo apt install python3`,\n\t\t\t\t`  sudo apt install python`,\n\t\t\t\t`  sudo apt install python-minimal`,\n\t\t\t\t`  You also have python3 installed, you can run 'python3' instead.'`,\n\t\t\t\t``,\n\t\t\t].join('\\n');\n\t\t\tconst exitCode = 128;\n\t\t\tconst actions = [\n\t\t\t\t'python3',\n\t\t\t\t'python3m',\n\t\t\t\t'pamon',\n\t\t\t\t'python3.6',\n\t\t\t\t'rtmon',\n\t\t\t\t'echo',\n\t\t\t\t'pushd',\n\t\t\t\t'etsn',\n\t\t\t\t'pwsh',\n\t\t\t\t'pwconv',\n\t\t\t].map(command => {\n\t\t\t\treturn {\n\t\t\t\t\tid: 'Pwsh General Error',\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tlabel: `Run: ${command}`,\n\t\t\t\t\ttooltip: `Run: ${command}`,\n\t\t\t\t\tcommand: command\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetup(() => {\n\t\t\t\tconst pushCommand = pwshGeneralError();\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(pushCommand);\n\t\t\t\texpectedMap.set(pushCommand.commandLineMatcher.toString(), [pushCommand]);\n\t\t\t});\n\t\t\ttest('returns undefined when output does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, PwshGeneralErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t\ttest('returns actions when output matches', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, PwshGeneralErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t});\n\t\tsuite('Unix cmd-not-found', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `not important`;\n\t\t\tconst output = [\n\t\t\t\t`...`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [General]`,\n\t\t\t\t`  The most similar commands are: python3, python3m, pamon, python3.6, rtmon, echo, pushd, etsn, pwsh, pwconv.`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [cmd-not-found]:`,\n\t\t\t\t`  Command 'python' not found, but can be installed with:`,\n\t\t\t\t`  sudo apt install python3`,\n\t\t\t\t`  sudo apt install python`,\n\t\t\t\t`  sudo apt install python-minimal`,\n\t\t\t\t`  You also have python3 installed, you can run 'python3' instead.'`,\n\t\t\t\t``,\n\t\t\t].join('\\n');\n\t\t\tconst exitCode = 128;\n\t\t\tconst actions = [\n\t\t\t\t'sudo apt install python3',\n\t\t\t\t'sudo apt install python',\n\t\t\t\t'sudo apt install python-minimal',\n\t\t\t\t'python3',\n\t\t\t].map(command => {\n\t\t\t\treturn {\n\t\t\t\t\tid: 'Pwsh Unix Command Not Found Error',\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tlabel: `Run: ${command}`,\n\t\t\t\t\ttooltip: `Run: ${command}`,\n\t\t\t\t\tcommand: command\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetup(() => {\n\t\t\t\tconst pushCommand = pwshUnixCommandNotFoundError();\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(pushCommand);\n\t\t\t\texpectedMap.set(pushCommand.commandLineMatcher.toString(), [pushCommand]);\n\t\t\t});\n\t\t\ttest('returns undefined when output does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, PwshUnixCommandNotFoundErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t\ttest('returns actions when output matches', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, PwshUnixCommandNotFoundErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t});\n\t});\n});\n\nfunction createCommand(command: string, output: string, outputMatcher?: RegExp | string, exitCode?: number, outputLines?: string[]): ITerminalCommand {\n\treturn {\n\t\tcwd: '',\n\t\tcommandStartLineContent: '',\n\t\tmarkProperties: {},\n\t\texecutedX: undefined,\n\t\tstartX: undefined,\n\t\tcommand,\n\t\tisTrusted: true,\n\t\texitCode,\n\t\tgetOutput: () => { return output; },\n\t\tgetOutputMatch: (_matcher: ITerminalOutputMatcher) => {\n\t\t\tif (outputMatcher) {\n\t\t\t\tconst regexMatch = output.match(outputMatcher) ?? undefined;\n\t\t\t\tif (regexMatch) {\n\t\t\t\t\treturn outputLines ? { regexMatch, outputLines } : { regexMatch, outputLines: [] };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t\ttimestamp: Date.now(),\n\t\thasOutput: () => !!output\n\t} as ITerminalCommand;\n}\n\ntype TestAction = Pick<IAction, 'id' | 'label' | 'tooltip' | 'enabled'> & { command?: string; uri?: URI };\nfunction assertMatchOptions(actual: TestAction[] | undefined, expected: TestAction[]): void {\n\tstrictEqual(actual?.length, expected.length);\n\tfor (let i = 0; i < expected.length; i++) {\n\t\tconst expectedItem = expected[i];\n\t\tconst actualItem: any = actual[i];\n\t\tstrictEqual(actualItem.id, expectedItem.id, `ID`);\n\t\tstrictEqual(actualItem.enabled, expectedItem.enabled, `enabled`);\n\t\tstrictEqual(actualItem.label, expectedItem.label, `label`);\n\t\tstrictEqual(actualItem.tooltip, expectedItem.tooltip, `tooltip`);\n\t\tif (expectedItem.command) {\n\t\t\tstrictEqual(actualItem.command, expectedItem.command);\n\t\t}\n\t\tif (expectedItem.uri) {\n\t\t\tstrictEqual(actualItem.uri!.toString(), expectedItem.uri.toString());\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["command", "actions"]
}
