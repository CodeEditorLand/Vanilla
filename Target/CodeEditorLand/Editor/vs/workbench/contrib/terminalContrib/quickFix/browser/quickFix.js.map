{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/quickFix/browser/quickFix.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IAction } from '../../../../../base/common/actions.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ITerminalCommandSelector, ITerminalOutputMatch, ITerminalOutputMatcher } from '../../../../../platform/terminal/common/terminal.js';\nimport { ITerminalCommand } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\n\nexport const ITerminalQuickFixService = createDecorator<ITerminalQuickFixService>('terminalQuickFixService');\nexport interface ITerminalQuickFixService {\n\tonDidRegisterProvider: Event<ITerminalQuickFixProviderSelector>;\n\tonDidRegisterCommandSelector: Event<ITerminalCommandSelector>;\n\tonDidUnregisterProvider: Event<string>;\n\treadonly _serviceBrand: undefined;\n\treadonly extensionQuickFixes: Promise<Array<ITerminalCommandSelector>>;\n\tproviders: Map<string, ITerminalQuickFixProvider>;\n\tregisterQuickFixProvider(id: string, provider: ITerminalQuickFixProvider): IDisposable;\n\tregisterCommandSelector(selector: ITerminalCommandSelector): void;\n}\n\nexport interface ITerminalQuickFixProviderSelector {\n\tselector: ITerminalCommandSelector;\n\tprovider: ITerminalQuickFixProvider;\n}\n\nexport type TerminalQuickFixActionInternal = IAction | ITerminalQuickFixTerminalCommandAction | ITerminalQuickFixOpenerAction;\nexport type TerminalQuickFixCallback = (matchResult: ITerminalCommandMatchResult) => TerminalQuickFixActionInternal[] | TerminalQuickFixActionInternal | undefined;\nexport type TerminalQuickFixCallbackExtension = (terminalCommand: ITerminalCommand, lines: string[] | undefined, option: ITerminalQuickFixOptions, token: CancellationToken) => Promise<ITerminalQuickFix[] | ITerminalQuickFix | undefined>;\n\nexport interface ITerminalQuickFixProvider {\n\t/**\n\t * Provides terminal quick fixes\n\t * @param commandMatchResult The command match result for which to provide quick fixes\n\t * @param token A cancellation token indicating the result is no longer needed\n\t * @return Terminal quick fix(es) if any\n\t */\n\tprovideTerminalQuickFixes(terminalCommand: ITerminalCommand, lines: string[] | undefined, option: ITerminalQuickFixOptions, token: CancellationToken): Promise<ITerminalQuickFix[] | ITerminalQuickFix | undefined>;\n}\n\nexport enum TerminalQuickFixType {\n\tTerminalCommand = 0,\n\tOpener = 1,\n\tPort = 2,\n\tVscodeCommand = 3\n}\n\nexport interface ITerminalQuickFixOptions {\n\ttype: 'internal' | 'resolved' | 'unresolved';\n\tid: string;\n\tcommandLineMatcher: string | RegExp;\n\toutputMatcher?: ITerminalOutputMatcher;\n\tcommandExitResult: 'success' | 'error';\n\tkind?: 'fix' | 'explain';\n}\n\nexport interface ITerminalQuickFix {\n\ttype: TerminalQuickFixType;\n\tid: string;\n\tsource: string;\n}\n\nexport interface ITerminalQuickFixTerminalCommandAction extends ITerminalQuickFix {\n\ttype: TerminalQuickFixType.TerminalCommand;\n\tterminalCommand: string;\n\t// TODO: Should this depend on whether alt is held?\n\tshouldExecute?: boolean;\n}\nexport interface ITerminalQuickFixOpenerAction extends ITerminalQuickFix {\n\ttype: TerminalQuickFixType.Opener;\n\turi: URI;\n}\nexport interface ITerminalQuickFixCommandAction extends ITerminalQuickFix {\n\ttitle: string;\n}\n\nexport interface ITerminalCommandMatchResult {\n\tcommandLine: string;\n\tcommandLineMatch: RegExpMatchArray;\n\toutputMatch?: ITerminalOutputMatch;\n}\n\nexport interface ITerminalQuickFixInternalOptions extends ITerminalQuickFixOptions {\n\ttype: 'internal';\n\tgetQuickFixes: TerminalQuickFixCallback;\n}\n\nexport interface ITerminalQuickFixResolvedExtensionOptions extends ITerminalQuickFixOptions {\n\ttype: 'resolved';\n\tgetQuickFixes: TerminalQuickFixCallbackExtension;\n}\n\nexport interface ITerminalQuickFixUnresolvedExtensionOptions extends ITerminalQuickFixOptions {\n\ttype: 'unresolved';\n}\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AACxB,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,0BAA0B,sBAAsB,8BAA8B;AACvF,SAAS,wBAAwB;AAE1B,MAAM,2BAA2B,gBAA0C,yBAAyB;AA+BpG,IAAK,uBAAL,kBAAKA,0BAAL;AACN,EAAAA,4CAAA,qBAAkB,KAAlB;AACA,EAAAA,4CAAA,YAAS,KAAT;AACA,EAAAA,4CAAA,UAAO,KAAP;AACA,EAAAA,4CAAA,mBAAgB,KAAhB;AAJW,SAAAA;AAAA,GAAA;",
  "names": ["TerminalQuickFixType"]
}
