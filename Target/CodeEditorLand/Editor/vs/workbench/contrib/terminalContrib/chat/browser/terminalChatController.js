var I=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var _=(h,d,e,t)=>{for(var i=t>1?void 0:t?S(d,e):d,n=h.length-1,a;n>=0;n--)(a=h[n])&&(i=(t?a(d,e,i):a(i))||i);return t&&i&&I(d,e,i),i},l=(h,d)=>(e,t)=>d(e,t,h);import{CancellationTokenSource as W}from"../../../../../base/common/cancellation.js";import{Emitter as x,Event as g}from"../../../../../base/common/event.js";import{Lazy as w}from"../../../../../base/common/lazy.js";import{Disposable as P,DisposableStore as K,MutableDisposable as T,toDisposable as b}from"../../../../../base/common/lifecycle.js";import{IContextKeyService as k}from"../../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as E}from"../../../../../platform/instantiation/common/instantiation.js";import{IChatCodeBlockContextProviderService as R,showChatView as q}from"../../../chat/browser/chat.js";import{IChatService as A}from"../../../chat/common/chatService.js";import{ITerminalService as B,isDetachedTerminalInstance as N}from"../../../terminal/browser/terminal.js";import"../../../terminal/browser/widgets/widgetManager.js";import"../../../terminal/common/terminal.js";import{TerminalChatWidget as D}from"./terminalChatWidget.js";import{MarkdownString as O}from"../../../../../base/common/htmlContent.js";import"../../../chat/common/chatModel.js";import{TerminalChatContextKeys as u}from"./terminalChat.js";import{IViewsService as M}from"../../../../services/views/common/viewsService.js";import{IStorageService as H,StorageScope as f,StorageTarget as U}from"../../../../../platform/storage/common/storage.js";import{assertType as y}from"../../../../../base/common/types.js";import{createCancelablePromise as L,DeferredPromise as V}from"../../../../../base/common/async.js";import{ChatAgentLocation as F}from"../../../chat/common/chatAgents.js";var X=(s=>(s[s.NONE=0]="NONE",s[s.ACCEPT_SESSION=1]="ACCEPT_SESSION",s[s.CANCEL_SESSION=2]="CANCEL_SESSION",s[s.PAUSE_SESSION=4]="PAUSE_SESSION",s[s.CANCEL_REQUEST=8]="CANCEL_REQUEST",s[s.CANCEL_INPUT=16]="CANCEL_INPUT",s[s.ACCEPT_INPUT=32]="ACCEPT_INPUT",s[s.RERUN_INPUT=64]="RERUN_INPUT",s))(X||{});let r=class extends P{constructor(e,t,i,n,a,o,s,C,m,v){super();this._instance=e;this._terminalService=n;this._instantiationService=a;this._contextKeyService=o;this._chatService=s;this._chatCodeBlockContextProviderService=C;this._viewsService=m;this._storageService=v;this._requestActiveContextKey=u.requestActive.bindTo(this._contextKeyService),this._responseContainsCodeBlockContextKey=u.responseContainsCodeBlock.bindTo(this._contextKeyService),this._responseContainsMulitpleCodeBlocksContextKey=u.responseContainsMultipleCodeBlocks.bindTo(this._contextKeyService),this._register(this._chatCodeBlockContextProviderService.registerProvider({getCodeBlockContext:c=>{if(!(!c||!this._terminalChatWidget?.hasValue||!this.hasFocus()))return{element:c,code:c.getValue(),codeBlockIndex:0,languageId:c.getModel().getLanguageId()}}},"terminal")),r._promptHistory=JSON.parse(this._storageService.get(r._storageKey,f.PROFILE,"[]")),this._historyUpdate=c=>{const p=r._promptHistory.indexOf(c);p>=0&&r._promptHistory.splice(p,1),r._promptHistory.unshift(c),this._historyOffset=-1,this._historyCandidate="",this._storageService.store(r._storageKey,JSON.stringify(r._promptHistory),f.PROFILE,U.USER)}}static ID="terminal.chat";static get(e){return e.getContribution(r.ID)}static activeChatController;static _storageKey="terminal-inline-chat-history";static _promptHistory=[];_terminalChatWidget;get terminalChatWidget(){return this._terminalChatWidget?.value}get chatWidget(){return this._terminalChatWidget?.value.inlineChatWidget?.chatWidget}_requestActiveContextKey;_responseContainsCodeBlockContextKey;_responseContainsMulitpleCodeBlocksContextKey;_messages=this._store.add(new x);_lastResponseContent;get lastResponseContent(){return this._lastResponseContent}onDidAcceptInput=g.filter(this._messages.event,e=>e===32,this._store);get onDidHide(){return this.terminalChatWidget?.onDidHide??g.None}_terminalAgentName="terminal";_model=this._register(new T);get scopedContextKeyService(){return this._terminalChatWidget?.value.inlineChatWidget.scopedContextKeyService??this._contextKeyService}_sessionCtor;_historyOffset=-1;_historyCandidate="";_historyUpdate;_currentRequestId;_activeRequestCts;xtermReady(e){this._terminalChatWidget=new w(()=>{const t=this._register(this._instantiationService.createInstance(D,this._instance.domElement,this._instance,e));if(this._register(t.focusTracker.onDidFocus(()=>{r.activeChatController=this,N(this._instance)||this._terminalService.setActiveInstance(this._instance)})),this._register(t.focusTracker.onDidBlur(()=>{r.activeChatController=void 0,this._instance.resetScrollbarVisibility()})),!this._instance.domElement)throw new Error("FindWidget expected terminal DOM to be initialized");return t})}async _createSession(){this._sessionCtor=L(async e=>{if(!this._model.value&&(this._model.value=this._chatService.startSession(F.Terminal,e),!this._model.value))throw new Error("Failed to start chat session")}),this._register(b(()=>this._sessionCtor?.cancel()))}_forcedPlaceholder=void 0;_updatePlaceholder(){const e=this._terminalChatWidget?.value.inlineChatWidget;e&&(e.placeholder=this._getPlaceholderText())}_getPlaceholderText(){return this._forcedPlaceholder??""}setPlaceholder(e){this._forcedPlaceholder=e,this._updatePlaceholder()}resetPlaceholder(){this._forcedPlaceholder=void 0,this._updatePlaceholder()}clear(){this.cancel(),this._model.clear(),this._responseContainsCodeBlockContextKey.reset(),this._requestActiveContextKey.reset(),this._terminalChatWidget?.value.hide(),this._terminalChatWidget?.value.setValue(void 0)}async acceptInput(e){y(this._terminalChatWidget),this._model.value||await this.reveal(),y(this._model.value);const t=this._terminalChatWidget.value.inlineChatWidget.value;if(!t)return;const i=this._model.value;this._terminalChatWidget.value.inlineChatWidget.setChatModel(i),this._historyUpdate(t),this._activeRequestCts?.cancel(),this._activeRequestCts=new W;const n=new K;this._requestActiveContextKey.set(!0);let a="";const o=await this._terminalChatWidget.value.inlineChatWidget.chatWidget.acceptInput(t,e);this._currentRequestId=o?.requestId;const s=new V;try{return this._requestActiveContextKey.set(!0),o&&n.add(o.onDidChange(async()=>{if(a+=o.response.value,o.isCanceled){this._requestActiveContextKey.set(!1),s.complete(void 0);return}if(o.isComplete){this._requestActiveContextKey.set(!1),this._requestActiveContextKey.set(!1);const C=a.includes("```");this._terminalChatWidget.value.inlineChatWidget.updateChatMessage({message:new O(a),requestId:o.requestId},!1,C);const m=await this.terminalChatWidget?.inlineChatWidget.getCodeBlockInfo(0),v=await this.terminalChatWidget?.inlineChatWidget.getCodeBlockInfo(1);this._responseContainsCodeBlockContextKey.set(!!m),this._responseContainsMulitpleCodeBlocksContextKey.set(!!v),this._terminalChatWidget?.value.inlineChatWidget.updateToolbar(!0),s.complete(o)}})),await s.p,o}catch{return}finally{n.dispose()}}updateInput(e,t=!0){const i=this._terminalChatWidget?.value.inlineChatWidget;i&&(i.value=e,t&&i.selectAll())}getInput(){return this._terminalChatWidget?.value.input()??""}focus(){this._terminalChatWidget?.value.focus()}hasFocus(){return this._terminalChatWidget?.rawValue?.hasFocus()??!1}populateHistory(e){if(!this._terminalChatWidget?.value)return;const t=r._promptHistory.length;if(t===0)return;this._historyOffset===-1&&(this._historyCandidate=this._terminalChatWidget.value.inlineChatWidget.value);const i=this._historyOffset+(e?1:-1);if(i>=t)return;let n;i<0?(n=this._historyCandidate,this._historyOffset=-1):(n=r._promptHistory[i],this._historyOffset=i),this._terminalChatWidget.value.inlineChatWidget.value=n,this._terminalChatWidget.value.inlineChatWidget.selectAll()}cancel(){this._sessionCtor?.cancel(),this._sessionCtor=void 0,this._activeRequestCts?.cancel(),this._requestActiveContextKey.set(!1);const e=this._terminalChatWidget?.value.inlineChatWidget.getChatModel();e?.sessionId&&this._chatService.cancelCurrentRequestForSession(e?.sessionId)}async acceptCommand(e){const t=await this.terminalChatWidget?.inlineChatWidget.getCodeBlockInfo(0);t&&this._terminalChatWidget?.value.acceptCommand(t.textEditorModel.getValue(),e)}async reveal(){await this._createSession(),this._terminalChatWidget?.value.reveal(),this._terminalChatWidget?.value.focus()}async viewInChat(){const e=await q(this._viewsService),t=this.terminalChatWidget?.inlineChatWidget.chatWidget.viewModel?.model.getRequests().find(n=>n.id===this._currentRequestId);if(!e||!t?.response)return;const i=[];for(const n of t.response.response.value)if(n.kind==="textEditGroup")for(const a of n.edits)i.push({kind:"textEdit",edits:a,uri:n.uri});else i.push(n);this._chatService.addCompleteRequest(e.viewModel.sessionId,`@${this._terminalAgentName} ${t.message.text}`,t.variableData,t.attempt,{message:i,result:t.response.result,followups:t.response.followups}),e.focusLastMessage(),this._terminalChatWidget?.rawValue?.hide()}};r=_([l(3,B),l(4,E),l(5,k),l(6,A),l(7,R),l(8,M),l(9,H)],r);export{r as TerminalChatController};
