{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/chat/browser/terminalChat.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../../nls.js';\nimport { MenuId } from '../../../../../platform/actions/common/actions.js';\nimport { RawContextKey } from '../../../../../platform/contextkey/common/contextkey.js';\n\nexport const enum TerminalChatCommandId {\n\tStart = 'workbench.action.terminal.chat.start',\n\tClose = 'workbench.action.terminal.chat.close',\n\tFocusResponse = 'workbench.action.terminal.chat.focusResponse',\n\tFocusInput = 'workbench.action.terminal.chat.focusInput',\n\tDiscard = 'workbench.action.terminal.chat.discard',\n\tMakeRequest = 'workbench.action.terminal.chat.makeRequest',\n\tCancel = 'workbench.action.terminal.chat.cancel',\n\tRunCommand = 'workbench.action.terminal.chat.runCommand',\n\tRunFirstCommand = 'workbench.action.terminal.chat.runFirstCommand',\n\tInsertCommand = 'workbench.action.terminal.chat.insertCommand',\n\tInsertFirstCommand = 'workbench.action.terminal.chat.insertFirstCommand',\n\tViewInChat = 'workbench.action.terminal.chat.viewInChat',\n\tPreviousFromHistory = 'workbench.action.terminal.chat.previousFromHistory',\n\tNextFromHistory = 'workbench.action.terminal.chat.nextFromHistory',\n}\n\nexport const MENU_TERMINAL_CHAT_INPUT = MenuId.for('terminalChatInput');\nexport const MENU_TERMINAL_CHAT_WIDGET = MenuId.for('terminalChatWidget');\nexport const MENU_TERMINAL_CHAT_WIDGET_STATUS = MenuId.for('terminalChatWidget.status');\nexport const MENU_TERMINAL_CHAT_WIDGET_TOOLBAR = MenuId.for('terminalChatWidget.toolbar');\n\nexport const enum TerminalChatContextKeyStrings {\n\tChatFocus = 'terminalChatFocus',\n\tChatVisible = 'terminalChatVisible',\n\tChatActiveRequest = 'terminalChatActiveRequest',\n\tChatInputHasText = 'terminalChatInputHasText',\n\tChatAgentRegistered = 'terminalChatAgentRegistered',\n\tChatResponseEditorFocused = 'terminalChatResponseEditorFocused',\n\tChatResponseContainsCodeBlock = 'terminalChatResponseContainsCodeBlock',\n\tChatResponseContainsMultipleCodeBlocks = 'terminalChatResponseContainsMultipleCodeBlocks',\n\tChatResponseSupportsIssueReporting = 'terminalChatResponseSupportsIssueReporting',\n\tChatSessionResponseVote = 'terminalChatSessionResponseVote',\n}\n\n\nexport namespace TerminalChatContextKeys {\n\n\t/** Whether the chat widget is focused */\n\texport const focused = new RawContextKey<boolean>(TerminalChatContextKeyStrings.ChatFocus, false, localize('chatFocusedContextKey', \"Whether the chat view is focused.\"));\n\n\t/** Whether the chat widget is visible */\n\texport const visible = new RawContextKey<boolean>(TerminalChatContextKeyStrings.ChatVisible, false, localize('chatVisibleContextKey', \"Whether the chat view is visible.\"));\n\n\t/** Whether there is an active chat request */\n\texport const requestActive = new RawContextKey<boolean>(TerminalChatContextKeyStrings.ChatActiveRequest, false, localize('chatRequestActiveContextKey', \"Whether there is an active chat request.\"));\n\n\t/** Whether the chat input has text */\n\texport const inputHasText = new RawContextKey<boolean>(TerminalChatContextKeyStrings.ChatInputHasText, false, localize('chatInputHasTextContextKey', \"Whether the chat input has text.\"));\n\n\t/** The chat response contains at least one code block */\n\texport const responseContainsCodeBlock = new RawContextKey<boolean>(TerminalChatContextKeyStrings.ChatResponseContainsCodeBlock, false, localize('chatResponseContainsCodeBlockContextKey', \"Whether the chat response contains a code block.\"));\n\n\t/** The chat response contains multiple code blocks */\n\texport const responseContainsMultipleCodeBlocks = new RawContextKey<boolean>(TerminalChatContextKeyStrings.ChatResponseContainsMultipleCodeBlocks, false, localize('chatResponseContainsMultipleCodeBlocksContextKey', \"Whether the chat response contains multiple code blocks.\"));\n\n\t/** A chat agent exists for the terminal location */\n\texport const hasChatAgent = new RawContextKey<boolean>(TerminalChatContextKeyStrings.ChatAgentRegistered, false, localize('chatAgentRegisteredContextKey', \"Whether a chat agent is registered for the terminal location.\"));\n}\n"],
  "mappings": "AAKA,SAAS,gBAAgB;AACzB,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAEvB,IAAW,wBAAX,kBAAWA,2BAAX;AACN,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,mBAAgB;AAChB,EAAAA,uBAAA,gBAAa;AACb,EAAAA,uBAAA,aAAU;AACV,EAAAA,uBAAA,iBAAc;AACd,EAAAA,uBAAA,YAAS;AACT,EAAAA,uBAAA,gBAAa;AACb,EAAAA,uBAAA,qBAAkB;AAClB,EAAAA,uBAAA,mBAAgB;AAChB,EAAAA,uBAAA,wBAAqB;AACrB,EAAAA,uBAAA,gBAAa;AACb,EAAAA,uBAAA,yBAAsB;AACtB,EAAAA,uBAAA,qBAAkB;AAdD,SAAAA;AAAA,GAAA;AAiBX,MAAM,2BAA2B,OAAO,IAAI,mBAAmB;AAC/D,MAAM,4BAA4B,OAAO,IAAI,oBAAoB;AACjE,MAAM,mCAAmC,OAAO,IAAI,2BAA2B;AAC/E,MAAM,oCAAoC,OAAO,IAAI,4BAA4B;AAEjF,IAAW,gCAAX,kBAAWC,mCAAX;AACN,EAAAA,+BAAA,eAAY;AACZ,EAAAA,+BAAA,iBAAc;AACd,EAAAA,+BAAA,uBAAoB;AACpB,EAAAA,+BAAA,sBAAmB;AACnB,EAAAA,+BAAA,yBAAsB;AACtB,EAAAA,+BAAA,+BAA4B;AAC5B,EAAAA,+BAAA,mCAAgC;AAChC,EAAAA,+BAAA,4CAAyC;AACzC,EAAAA,+BAAA,wCAAqC;AACrC,EAAAA,+BAAA,6BAA0B;AAVT,SAAAA;AAAA,GAAA;AAcX,IAAU;AAAA,CAAV,CAAUC,6BAAV;AAGC,EAAMA,yBAAA,UAAU,IAAI,cAAuB,qCAAyC,OAAO,SAAS,yBAAyB,mCAAmC,CAAC;AAGjK,EAAMA,yBAAA,UAAU,IAAI,cAAuB,yCAA2C,OAAO,SAAS,yBAAyB,mCAAmC,CAAC;AAGnK,EAAMA,yBAAA,gBAAgB,IAAI,cAAuB,qDAAiD,OAAO,SAAS,+BAA+B,0CAA0C,CAAC;AAG5L,EAAMA,yBAAA,eAAe,IAAI,cAAuB,mDAAgD,OAAO,SAAS,8BAA8B,kCAAkC,CAAC;AAGjL,EAAMA,yBAAA,4BAA4B,IAAI,cAAuB,6EAA6D,OAAO,SAAS,2CAA2C,kDAAkD,CAAC;AAGxO,EAAMA,yBAAA,qCAAqC,IAAI,cAAuB,+FAAsE,OAAO,SAAS,oDAAoD,0DAA0D,CAAC;AAG3Q,EAAMA,yBAAA,eAAe,IAAI,cAAuB,yDAAmD,OAAO,SAAS,iCAAiC,+DAA+D,CAAC;AAAA,GArB3M;",
  "names": ["TerminalChatCommandId", "TerminalChatContextKeyStrings", "TerminalChatContextKeys"]
}
