{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/chat/browser/terminalChat.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../../nls.js\";\nimport { MenuId } from \"../../../../../platform/actions/common/actions.js\";\nimport { RawContextKey } from \"../../../../../platform/contextkey/common/contextkey.js\";\n\nexport enum TerminalChatCommandId {\n\tStart = \"workbench.action.terminal.chat.start\",\n\tClose = \"workbench.action.terminal.chat.close\",\n\tFocusResponse = \"workbench.action.terminal.chat.focusResponse\",\n\tFocusInput = \"workbench.action.terminal.chat.focusInput\",\n\tDiscard = \"workbench.action.terminal.chat.discard\",\n\tMakeRequest = \"workbench.action.terminal.chat.makeRequest\",\n\tCancel = \"workbench.action.terminal.chat.cancel\",\n\tRunCommand = \"workbench.action.terminal.chat.runCommand\",\n\tRunFirstCommand = \"workbench.action.terminal.chat.runFirstCommand\",\n\tInsertCommand = \"workbench.action.terminal.chat.insertCommand\",\n\tInsertFirstCommand = \"workbench.action.terminal.chat.insertFirstCommand\",\n\tViewInChat = \"workbench.action.terminal.chat.viewInChat\",\n\tPreviousFromHistory = \"workbench.action.terminal.chat.previousFromHistory\",\n\tNextFromHistory = \"workbench.action.terminal.chat.nextFromHistory\",\n}\n\nexport const MENU_TERMINAL_CHAT_INPUT = MenuId.for(\"terminalChatInput\");\nexport const MENU_TERMINAL_CHAT_WIDGET = MenuId.for(\"terminalChatWidget\");\nexport const MENU_TERMINAL_CHAT_WIDGET_STATUS = MenuId.for(\n\t\"terminalChatWidget.status\",\n);\nexport const MENU_TERMINAL_CHAT_WIDGET_TOOLBAR = MenuId.for(\n\t\"terminalChatWidget.toolbar\",\n);\n\nexport enum TerminalChatContextKeyStrings {\n\tChatFocus = \"terminalChatFocus\",\n\tChatVisible = \"terminalChatVisible\",\n\tChatActiveRequest = \"terminalChatActiveRequest\",\n\tChatInputHasText = \"terminalChatInputHasText\",\n\tChatAgentRegistered = \"terminalChatAgentRegistered\",\n\tChatResponseEditorFocused = \"terminalChatResponseEditorFocused\",\n\tChatResponseContainsCodeBlock = \"terminalChatResponseContainsCodeBlock\",\n\tChatResponseContainsMultipleCodeBlocks = \"terminalChatResponseContainsMultipleCodeBlocks\",\n\tChatResponseSupportsIssueReporting = \"terminalChatResponseSupportsIssueReporting\",\n\tChatSessionResponseVote = \"terminalChatSessionResponseVote\",\n}\n\nexport namespace TerminalChatContextKeys {\n\t/** Whether the chat widget is focused */\n\texport const focused = new RawContextKey<boolean>(\n\t\tTerminalChatContextKeyStrings.ChatFocus,\n\t\tfalse,\n\t\tlocalize(\"chatFocusedContextKey\", \"Whether the chat view is focused.\"),\n\t);\n\n\t/** Whether the chat widget is visible */\n\texport const visible = new RawContextKey<boolean>(\n\t\tTerminalChatContextKeyStrings.ChatVisible,\n\t\tfalse,\n\t\tlocalize(\"chatVisibleContextKey\", \"Whether the chat view is visible.\"),\n\t);\n\n\t/** Whether there is an active chat request */\n\texport const requestActive = new RawContextKey<boolean>(\n\t\tTerminalChatContextKeyStrings.ChatActiveRequest,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"chatRequestActiveContextKey\",\n\t\t\t\"Whether there is an active chat request.\",\n\t\t),\n\t);\n\n\t/** Whether the chat input has text */\n\texport const inputHasText = new RawContextKey<boolean>(\n\t\tTerminalChatContextKeyStrings.ChatInputHasText,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"chatInputHasTextContextKey\",\n\t\t\t\"Whether the chat input has text.\",\n\t\t),\n\t);\n\n\t/** The chat response contains at least one code block */\n\texport const responseContainsCodeBlock = new RawContextKey<boolean>(\n\t\tTerminalChatContextKeyStrings.ChatResponseContainsCodeBlock,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"chatResponseContainsCodeBlockContextKey\",\n\t\t\t\"Whether the chat response contains a code block.\",\n\t\t),\n\t);\n\n\t/** The chat response contains multiple code blocks */\n\texport const responseContainsMultipleCodeBlocks =\n\t\tnew RawContextKey<boolean>(\n\t\t\tTerminalChatContextKeyStrings.ChatResponseContainsMultipleCodeBlocks,\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"chatResponseContainsMultipleCodeBlocksContextKey\",\n\t\t\t\t\"Whether the chat response contains multiple code blocks.\",\n\t\t\t),\n\t\t);\n\n\t/** A chat agent exists for the terminal location */\n\texport const hasChatAgent = new RawContextKey<boolean>(\n\t\tTerminalChatContextKeyStrings.ChatAgentRegistered,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"chatAgentRegisteredContextKey\",\n\t\t\t\"Whether a chat agent is registered for the terminal location.\",\n\t\t),\n\t);\n}\n"],
  "mappings": "AAKA,SAAS,gBAAgB;AACzB,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAEvB,IAAK,wBAAL,kBAAKA,2BAAL;AACN,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,mBAAgB;AAChB,EAAAA,uBAAA,gBAAa;AACb,EAAAA,uBAAA,aAAU;AACV,EAAAA,uBAAA,iBAAc;AACd,EAAAA,uBAAA,YAAS;AACT,EAAAA,uBAAA,gBAAa;AACb,EAAAA,uBAAA,qBAAkB;AAClB,EAAAA,uBAAA,mBAAgB;AAChB,EAAAA,uBAAA,wBAAqB;AACrB,EAAAA,uBAAA,gBAAa;AACb,EAAAA,uBAAA,yBAAsB;AACtB,EAAAA,uBAAA,qBAAkB;AAdP,SAAAA;AAAA,GAAA;AAiBL,MAAM,2BAA2B,OAAO,IAAI,mBAAmB;AAC/D,MAAM,4BAA4B,OAAO,IAAI,oBAAoB;AACjE,MAAM,mCAAmC,OAAO;AAAA,EACtD;AACD;AACO,MAAM,oCAAoC,OAAO;AAAA,EACvD;AACD;AAEO,IAAK,gCAAL,kBAAKC,mCAAL;AACN,EAAAA,+BAAA,eAAY;AACZ,EAAAA,+BAAA,iBAAc;AACd,EAAAA,+BAAA,uBAAoB;AACpB,EAAAA,+BAAA,sBAAmB;AACnB,EAAAA,+BAAA,yBAAsB;AACtB,EAAAA,+BAAA,+BAA4B;AAC5B,EAAAA,+BAAA,mCAAgC;AAChC,EAAAA,+BAAA,4CAAyC;AACzC,EAAAA,+BAAA,wCAAqC;AACrC,EAAAA,+BAAA,6BAA0B;AAVf,SAAAA;AAAA,GAAA;AAaL,IAAU;AAAA,CAAV,CAAUC,6BAAV;AAEC,EAAMA,yBAAA,UAAU,IAAI;AAAA,IAC1B;AAAA,IACA;AAAA,IACA,SAAS,yBAAyB,mCAAmC;AAAA,EACtE;AAGO,EAAMA,yBAAA,UAAU,IAAI;AAAA,IAC1B;AAAA,IACA;AAAA,IACA,SAAS,yBAAyB,mCAAmC;AAAA,EACtE;AAGO,EAAMA,yBAAA,gBAAgB,IAAI;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAGO,EAAMA,yBAAA,eAAe,IAAI;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAGO,EAAMA,yBAAA,4BAA4B,IAAI;AAAA,IAC5C;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAGO,EAAMA,yBAAA,qCACZ,IAAI;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAGM,EAAMA,yBAAA,eAAe,IAAI;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,GAhEgB;",
  "names": ["TerminalChatCommandId", "TerminalChatContextKeyStrings", "TerminalChatContextKeys"]
}
