import{deepStrictEqual as n,ok as R,strictEqual as l}from"assert";import{OperatingSystem as f}from"../../../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../../../base/test/common/utils.js";import{detectLinks as o,detectLinkSuffixes as E,getLinkSuffix as y,removeLinkQueryString as a,removeLinkSuffix as I}from"../../browser/terminalLinkParsing.js";const b=[f.Linux,f.Macintosh,f.Windows],t={[f.Linux]:"/test/path/linux",[f.Macintosh]:"/test/path/macintosh",[f.Windows]:"C:\\test\\path\\windows"},m={[f.Linux]:"[Linux]",[f.Macintosh]:"[macOS]",[f.Windows]:"[Windows]"},x=339,h=12,p=341,c=789,k=[{link:"foo",prefix:void 0,suffix:void 0,hasRow:!1,hasCol:!1},{link:"foo:339",prefix:void 0,suffix:":339",hasRow:!0,hasCol:!1},{link:"foo:339:12",prefix:void 0,suffix:":339:12",hasRow:!0,hasCol:!0},{link:"foo:339:12-789",prefix:void 0,suffix:":339:12-789",hasRow:!0,hasCol:!0,hasRowEnd:!1,hasColEnd:!0},{link:"foo:339.12",prefix:void 0,suffix:":339.12",hasRow:!0,hasCol:!0},{link:"foo:339.12-789",prefix:void 0,suffix:":339.12-789",hasRow:!0,hasCol:!0,hasRowEnd:!1,hasColEnd:!0},{link:"foo:339.12-341.789",prefix:void 0,suffix:":339.12-341.789",hasRow:!0,hasCol:!0,hasRowEnd:!0,hasColEnd:!0},{link:"foo#339",prefix:void 0,suffix:"#339",hasRow:!0,hasCol:!1},{link:"foo#339:12",prefix:void 0,suffix:"#339:12",hasRow:!0,hasCol:!0},{link:"foo#339:12-789",prefix:void 0,suffix:"#339:12-789",hasRow:!0,hasCol:!0,hasRowEnd:!1,hasColEnd:!0},{link:"foo#339.12",prefix:void 0,suffix:"#339.12",hasRow:!0,hasCol:!0},{link:"foo#339.12-789",prefix:void 0,suffix:"#339.12-789",hasRow:!0,hasCol:!0,hasRowEnd:!1,hasColEnd:!0},{link:"foo#339.12-341.789",prefix:void 0,suffix:"#339.12-341.789",hasRow:!0,hasCol:!0,hasRowEnd:!0,hasColEnd:!0},{link:"foo 339",prefix:void 0,suffix:" 339",hasRow:!0,hasCol:!1},{link:"foo 339:12",prefix:void 0,suffix:" 339:12",hasRow:!0,hasCol:!0},{link:"foo 339:12-789",prefix:void 0,suffix:" 339:12-789",hasRow:!0,hasCol:!0,hasRowEnd:!1,hasColEnd:!0},{link:"foo 339.12",prefix:void 0,suffix:" 339.12",hasRow:!0,hasCol:!0},{link:"foo 339.12-789",prefix:void 0,suffix:" 339.12-789",hasRow:!0,hasCol:!0,hasRowEnd:!1,hasColEnd:!0},{link:"foo 339.12-341.789",prefix:void 0,suffix:" 339.12-341.789",hasRow:!0,hasCol:!0,hasRowEnd:!0,hasColEnd:!0},{link:'"foo",339',prefix:'"',suffix:'",339',hasRow:!0,hasCol:!1},{link:'"foo",339:12',prefix:'"',suffix:'",339:12',hasRow:!0,hasCol:!0},{link:'"foo",339.12',prefix:'"',suffix:'",339.12',hasRow:!0,hasCol:!0},{link:'"foo", line 339',prefix:'"',suffix:'", line 339',hasRow:!0,hasCol:!1},{link:'"foo", line 339, col 12',prefix:'"',suffix:'", line 339, col 12',hasRow:!0,hasCol:!0},{link:'"foo", line 339, column 12',prefix:'"',suffix:'", line 339, column 12',hasRow:!0,hasCol:!0},{link:'"foo":line 339',prefix:'"',suffix:'":line 339',hasRow:!0,hasCol:!1},{link:'"foo":line 339, col 12',prefix:'"',suffix:'":line 339, col 12',hasRow:!0,hasCol:!0},{link:'"foo":line 339, column 12',prefix:'"',suffix:'":line 339, column 12',hasRow:!0,hasCol:!0},{link:'"foo": line 339',prefix:'"',suffix:'": line 339',hasRow:!0,hasCol:!1},{link:'"foo": line 339, col 12',prefix:'"',suffix:'": line 339, col 12',hasRow:!0,hasCol:!0},{link:'"foo": line 339, column 12',prefix:'"',suffix:'": line 339, column 12',hasRow:!0,hasCol:!0},{link:'"foo" on line 339',prefix:'"',suffix:'" on line 339',hasRow:!0,hasCol:!1},{link:'"foo" on line 339, col 12',prefix:'"',suffix:'" on line 339, col 12',hasRow:!0,hasCol:!0},{link:'"foo" on line 339, column 12',prefix:'"',suffix:'" on line 339, column 12',hasRow:!0,hasCol:!0},{link:'"foo" line 339',prefix:'"',suffix:'" line 339',hasRow:!0,hasCol:!1},{link:'"foo" line 339 column 12',prefix:'"',suffix:'" line 339 column 12',hasRow:!0,hasCol:!0},{link:"'foo',339",prefix:"'",suffix:"',339",hasRow:!0,hasCol:!1},{link:"'foo',339:12",prefix:"'",suffix:"',339:12",hasRow:!0,hasCol:!0},{link:"'foo',339.12",prefix:"'",suffix:"',339.12",hasRow:!0,hasCol:!0},{link:"'foo', line 339",prefix:"'",suffix:"', line 339",hasRow:!0,hasCol:!1},{link:"'foo', line 339, col 12",prefix:"'",suffix:"', line 339, col 12",hasRow:!0,hasCol:!0},{link:"'foo', line 339, column 12",prefix:"'",suffix:"', line 339, column 12",hasRow:!0,hasCol:!0},{link:"'foo':line 339",prefix:"'",suffix:"':line 339",hasRow:!0,hasCol:!1},{link:"'foo':line 339, col 12",prefix:"'",suffix:"':line 339, col 12",hasRow:!0,hasCol:!0},{link:"'foo':line 339, column 12",prefix:"'",suffix:"':line 339, column 12",hasRow:!0,hasCol:!0},{link:"'foo': line 339",prefix:"'",suffix:"': line 339",hasRow:!0,hasCol:!1},{link:"'foo': line 339, col 12",prefix:"'",suffix:"': line 339, col 12",hasRow:!0,hasCol:!0},{link:"'foo': line 339, column 12",prefix:"'",suffix:"': line 339, column 12",hasRow:!0,hasCol:!0},{link:"'foo' on line 339",prefix:"'",suffix:"' on line 339",hasRow:!0,hasCol:!1},{link:"'foo' on line 339, col 12",prefix:"'",suffix:"' on line 339, col 12",hasRow:!0,hasCol:!0},{link:"'foo' on line 339, column 12",prefix:"'",suffix:"' on line 339, column 12",hasRow:!0,hasCol:!0},{link:"'foo' line 339",prefix:"'",suffix:"' line 339",hasRow:!0,hasCol:!1},{link:"'foo' line 339 column 12",prefix:"'",suffix:"' line 339 column 12",hasRow:!0,hasCol:!0},{link:"foo, line 339",prefix:void 0,suffix:", line 339",hasRow:!0,hasCol:!1},{link:"foo, line 339, col 12",prefix:void 0,suffix:", line 339, col 12",hasRow:!0,hasCol:!0},{link:"foo, line 339, column 12",prefix:void 0,suffix:", line 339, column 12",hasRow:!0,hasCol:!0},{link:"foo:line 339",prefix:void 0,suffix:":line 339",hasRow:!0,hasCol:!1},{link:"foo:line 339, col 12",prefix:void 0,suffix:":line 339, col 12",hasRow:!0,hasCol:!0},{link:"foo:line 339, column 12",prefix:void 0,suffix:":line 339, column 12",hasRow:!0,hasCol:!0},{link:"foo: line 339",prefix:void 0,suffix:": line 339",hasRow:!0,hasCol:!1},{link:"foo: line 339, col 12",prefix:void 0,suffix:": line 339, col 12",hasRow:!0,hasCol:!0},{link:"foo: line 339, column 12",prefix:void 0,suffix:": line 339, column 12",hasRow:!0,hasCol:!0},{link:"foo on line 339",prefix:void 0,suffix:" on line 339",hasRow:!0,hasCol:!1},{link:"foo on line 339, col 12",prefix:void 0,suffix:" on line 339, col 12",hasRow:!0,hasCol:!0},{link:"foo on line 339, column 12",prefix:void 0,suffix:" on line 339, column 12",hasRow:!0,hasCol:!0},{link:"foo line 339",prefix:void 0,suffix:" line 339",hasRow:!0,hasCol:!1},{link:"foo line 339 column 12",prefix:void 0,suffix:" line 339 column 12",hasRow:!0,hasCol:!0},{link:"foo(339)",prefix:void 0,suffix:"(339)",hasRow:!0,hasCol:!1},{link:"foo(339,12)",prefix:void 0,suffix:"(339,12)",hasRow:!0,hasCol:!0},{link:"foo(339, 12)",prefix:void 0,suffix:"(339, 12)",hasRow:!0,hasCol:!0},{link:"foo (339)",prefix:void 0,suffix:" (339)",hasRow:!0,hasCol:!1},{link:"foo (339,12)",prefix:void 0,suffix:" (339,12)",hasRow:!0,hasCol:!0},{link:"foo (339, 12)",prefix:void 0,suffix:" (339, 12)",hasRow:!0,hasCol:!0},{link:"foo: (339)",prefix:void 0,suffix:": (339)",hasRow:!0,hasCol:!1},{link:"foo: (339,12)",prefix:void 0,suffix:": (339,12)",hasRow:!0,hasCol:!0},{link:"foo: (339, 12)",prefix:void 0,suffix:": (339, 12)",hasRow:!0,hasCol:!0},{link:"foo[339]",prefix:void 0,suffix:"[339]",hasRow:!0,hasCol:!1},{link:"foo[339,12]",prefix:void 0,suffix:"[339,12]",hasRow:!0,hasCol:!0},{link:"foo[339, 12]",prefix:void 0,suffix:"[339, 12]",hasRow:!0,hasCol:!0},{link:"foo [339]",prefix:void 0,suffix:" [339]",hasRow:!0,hasCol:!1},{link:"foo [339,12]",prefix:void 0,suffix:" [339,12]",hasRow:!0,hasCol:!0},{link:"foo [339, 12]",prefix:void 0,suffix:" [339, 12]",hasRow:!0,hasCol:!0},{link:"foo: [339]",prefix:void 0,suffix:": [339]",hasRow:!0,hasCol:!1},{link:"foo: [339,12]",prefix:void 0,suffix:": [339,12]",hasRow:!0,hasCol:!0},{link:"foo: [339, 12]",prefix:void 0,suffix:": [339, 12]",hasRow:!0,hasCol:!0},{link:'"foo", line 339, character 12',prefix:'"',suffix:'", line 339, character 12',hasRow:!0,hasCol:!0},{link:'"foo", line 339, characters 12-789',prefix:'"',suffix:'", line 339, characters 12-789',hasRow:!0,hasCol:!0,hasColEnd:!0},{link:'"foo", lines 339-341',prefix:'"',suffix:'", lines 339-341',hasRow:!0,hasCol:!1,hasRowEnd:!0},{link:'"foo", lines 339-341, characters 12-789',prefix:'"',suffix:'", lines 339-341, characters 12-789',hasRow:!0,hasCol:!0,hasRowEnd:!0,hasColEnd:!0},{link:"foo\xA0339:12",prefix:void 0,suffix:"\xA0339:12",hasRow:!0,hasCol:!0},{link:'"foo" on line 339,\xA0column 12',prefix:'"',suffix:'" on line 339,\xA0column 12',hasRow:!0,hasCol:!0},{link:"'foo' on line\xA0339, column 12",prefix:"'",suffix:"' on line\xA0339, column 12",hasRow:!0,hasCol:!0},{link:"foo (339,\xA012)",prefix:void 0,suffix:" (339,\xA012)",hasRow:!0,hasCol:!0},{link:"foo\xA0[339, 12]",prefix:void 0,suffix:"\xA0[339, 12]",hasRow:!0,hasCol:!0}],w=k.filter(e=>!!e.suffix);suite("TerminalLinkParsing",()=>{g(),suite("removeLinkSuffix",()=>{for(const e of k)test("`"+e.link+"`",()=>{n(I(e.link),e.suffix===void 0?e.link:e.link.replace(e.suffix,""))})}),suite("getLinkSuffix",()=>{for(const e of k)test("`"+e.link+"`",()=>{n(y(e.link),e.suffix===void 0?null:{row:e.hasRow?x:void 0,col:e.hasCol?h:void 0,rowEnd:e.hasRowEnd?p:void 0,colEnd:e.hasColEnd?c:void 0,suffix:{index:e.link.length-e.suffix.length,text:e.suffix}})})}),suite("detectLinkSuffixes",()=>{for(const e of k)test("`"+e.link+"`",()=>{n(E(e.link),e.suffix===void 0?[]:[{row:e.hasRow?x:void 0,col:e.hasCol?h:void 0,rowEnd:e.hasRowEnd?p:void 0,colEnd:e.hasColEnd?c:void 0,suffix:{index:e.link.length-e.suffix.length,text:e.suffix}}])});test("foo(1, 2) bar[3, 4] baz on line 5",()=>{n(E("foo(1, 2) bar[3, 4] baz on line 5"),[{col:2,row:1,rowEnd:void 0,colEnd:void 0,suffix:{index:3,text:"(1, 2)"}},{col:4,row:3,rowEnd:void 0,colEnd:void 0,suffix:{index:13,text:"[3, 4]"}},{col:void 0,row:5,rowEnd:void 0,colEnd:void 0,suffix:{index:23,text:" on line 5"}}])})}),suite("removeLinkQueryString",()=>{test("should remove any query string from the link",()=>{l(a("?a=b"),""),l(a("foo?a=b"),"foo"),l(a("./foo?a=b"),"./foo"),l(a("/foo/bar?a=b"),"/foo/bar"),l(a("foo?a=b?"),"foo"),l(a("foo?a=b&c=d"),"foo")}),test("should respect ? in UNC paths",()=>{l(a("\\\\?\\foo?a=b"),"\\\\?\\foo")})}),suite("detectLinks",()=>{test('foo(1, 2) bar[3, 4] "baz" on line 5',()=>{n(o('foo(1, 2) bar[3, 4] "baz" on line 5',f.Linux),[{path:{index:0,text:"foo"},prefix:void 0,suffix:{col:2,row:1,rowEnd:void 0,colEnd:void 0,suffix:{index:3,text:"(1, 2)"}}},{path:{index:10,text:"bar"},prefix:void 0,suffix:{col:4,row:3,rowEnd:void 0,colEnd:void 0,suffix:{index:13,text:"[3, 4]"}}},{path:{index:21,text:"baz"},prefix:{index:20,text:'"'},suffix:{col:void 0,row:5,rowEnd:void 0,colEnd:void 0,suffix:{index:24,text:'" on line 5'}}}])}),test("should extract the link prefix",()=>{n(o('"foo", line 5, col 6',f.Linux),[{path:{index:1,text:"foo"},prefix:{index:0,text:'"'},suffix:{row:5,col:6,rowEnd:void 0,colEnd:void 0,suffix:{index:4,text:'", line 5, col 6'}}}])}),test("should be smart about determining the link prefix when multiple prefix characters exist",()=>{n(o(`echo '"foo", line 5, col 6'`,f.Linux),[{path:{index:7,text:"foo"},prefix:{index:6,text:'"'},suffix:{row:5,col:6,rowEnd:void 0,colEnd:void 0,suffix:{index:10,text:'", line 5, col 6'}}}],"The outer single quotes should be excluded from the link prefix and suffix")}),test("should detect both suffix and non-suffix links on a single line",()=>{n(o(`PS C:\\Github\\microsoft\\vscode> echo '"foo", line 5, col 6'`,f.Windows),[{path:{index:3,text:"C:\\Github\\microsoft\\vscode"},prefix:void 0,suffix:void 0},{path:{index:38,text:"foo"},prefix:{index:37,text:'"'},suffix:{row:5,col:6,rowEnd:void 0,colEnd:void 0,suffix:{index:41,text:'", line 5, col 6'}}}])}),suite('"|"',()=>{test("should exclude pipe characters from link paths",()=>{n(o("|C:\\Github\\microsoft\\vscode|",f.Windows),[{path:{index:1,text:"C:\\Github\\microsoft\\vscode"},prefix:void 0,suffix:void 0}])}),test("should exclude pipe characters from link paths with suffixes",()=>{n(o("|C:\\Github\\microsoft\\vscode:400|",f.Windows),[{path:{index:1,text:"C:\\Github\\microsoft\\vscode"},prefix:void 0,suffix:{col:void 0,row:400,rowEnd:void 0,colEnd:void 0,suffix:{index:27,text:":400"}}}])})}),suite('"<>"',()=>{for(const e of b)test(`should exclude bracket characters from link paths ${m[e]}`,()=>{n(o(`<${t[e]}<`,e),[{path:{index:1,text:t[e]},prefix:void 0,suffix:void 0}]),n(o(`>${t[e]}>`,e),[{path:{index:1,text:t[e]},prefix:void 0,suffix:void 0}])}),test(`should exclude bracket characters from link paths with suffixes ${m[e]}`,()=>{n(o(`<${t[e]}:400<`,e),[{path:{index:1,text:t[e]},prefix:void 0,suffix:{col:void 0,row:400,rowEnd:void 0,colEnd:void 0,suffix:{index:1+t[e].length,text:":400"}}}]),n(o(`>${t[e]}:400>`,e),[{path:{index:1,text:t[e]},prefix:void 0,suffix:{col:void 0,row:400,rowEnd:void 0,colEnd:void 0,suffix:{index:1+t[e].length,text:":400"}}}])})}),suite("query strings",()=>{for(const e of b)test(`should exclude query strings from link paths ${m[e]}`,()=>{n(o(`${t[e]}?a=b`,e),[{path:{index:0,text:t[e]},prefix:void 0,suffix:void 0}]),n(o(`${t[e]}?a=b&c=d`,e),[{path:{index:0,text:t[e]},prefix:void 0,suffix:void 0}])}),test("should not detect links starting with ? within query strings that contain posix-style paths (#204195)",()=>{l(o("http://foo.com/?bar=/a/b&baz=c",e).some(i=>i.path.text.startsWith("?")),!1)}),test("should not detect links starting with ? within query strings that contain Windows-style paths (#204195)",()=>{l(o("http://foo.com/?bar=a:\\b&baz=c",e).some(i=>i.path.text.startsWith("?")),!1)})}),suite("should detect file names in git diffs",()=>{test("--- a/foo/bar",()=>{n(o("--- a/foo/bar",f.Linux),[{path:{index:6,text:"foo/bar"},prefix:void 0,suffix:void 0}])}),test("+++ b/foo/bar",()=>{n(o("+++ b/foo/bar",f.Linux),[{path:{index:6,text:"foo/bar"},prefix:void 0,suffix:void 0}])}),test("diff --git a/foo/bar b/foo/baz",()=>{n(o("diff --git a/foo/bar b/foo/baz",f.Linux),[{path:{index:13,text:"foo/bar"},prefix:void 0,suffix:void 0},{path:{index:23,text:"foo/baz"},prefix:void 0,suffix:void 0}])})}),suite("should detect 3 suffix links on a single line",()=>{for(let e=0;e<w.length-2;e++){const i=w[e],s=w[e+1],u=w[e+2],C=` ${i.link} ${s.link} ${u.link} `;test("`"+C.replaceAll("\xA0","<nbsp>")+"`",()=>{l(o(C,f.Linux).length,3),R(i.suffix),R(s.suffix),R(u.suffix);const r={prefix:i.prefix?{index:1,text:i.prefix}:void 0,path:{index:1+(i.prefix?.length??0),text:i.link.replace(i.suffix,"").replace(i.prefix||"","")},suffix:{row:i.hasRow?x:void 0,col:i.hasCol?h:void 0,rowEnd:i.hasRowEnd?p:void 0,colEnd:i.hasColEnd?c:void 0,suffix:{index:1+(i.link.length-i.suffix.length),text:i.suffix}}},d={prefix:s.prefix?{index:(r.prefix?.index??r.path.index)+i.link.length+1,text:s.prefix}:void 0,path:{index:(r.prefix?.index??r.path.index)+i.link.length+1+(s.prefix??"").length,text:s.link.replace(s.suffix,"").replace(s.prefix??"","")},suffix:{row:s.hasRow?x:void 0,col:s.hasCol?h:void 0,rowEnd:s.hasRowEnd?p:void 0,colEnd:s.hasColEnd?c:void 0,suffix:{index:(r.prefix?.index??r.path.index)+i.link.length+1+(s.link.length-s.suffix.length),text:s.suffix}}},L={prefix:u.prefix?{index:(d.prefix?.index??d.path.index)+s.link.length+1,text:u.prefix}:void 0,path:{index:(d.prefix?.index??d.path.index)+s.link.length+1+(u.prefix??"").length,text:u.link.replace(u.suffix,"").replace(u.prefix??"","")},suffix:{row:u.hasRow?x:void 0,col:u.hasCol?h:void 0,rowEnd:u.hasRowEnd?p:void 0,colEnd:u.hasColEnd?c:void 0,suffix:{index:(d.prefix?.index??d.path.index)+s.link.length+1+(u.link.length-u.suffix.length),text:u.suffix}}};n(o(C,f.Linux),[r,d,L])})}}),suite("should ignore links with suffixes when the path itself is the empty string",()=>{n(o('""",1',f.Linux),[])})})});
