{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalExternalLinkDetector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IBufferLine, Terminal } from \"@xterm/xterm\";\nimport type { ITerminalExternalLinkProvider } from \"../../../terminal/browser/terminal.js\";\nimport type {\n\tITerminalLinkDetector,\n\tITerminalSimpleLink,\n\tOmitFirstArg,\n} from \"./links.js\";\nimport {\n\tconvertLinkRangeToBuffer,\n\tgetXtermLineContent,\n} from \"./terminalLinkHelpers.js\";\n\nexport class TerminalExternalLinkDetector implements ITerminalLinkDetector {\n\treadonly maxLinkLength = 2000;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly xterm: Terminal,\n\t\tprivate readonly _provideLinks: OmitFirstArg<\n\t\t\tITerminalExternalLinkProvider[\"provideLinks\"]\n\t\t>,\n\t) {}\n\n\tasync detect(\n\t\tlines: IBufferLine[],\n\t\tstartLine: number,\n\t\tendLine: number,\n\t): Promise<ITerminalSimpleLink[]> {\n\t\t// Get the text representation of the wrapped line\n\t\tconst text = getXtermLineContent(\n\t\t\tthis.xterm.buffer.active,\n\t\t\tstartLine,\n\t\t\tendLine,\n\t\t\tthis.xterm.cols,\n\t\t);\n\t\tif (text === \"\" || text.length > this.maxLinkLength) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst externalLinks = await this._provideLinks(text);\n\t\tif (!externalLinks) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result = externalLinks.map((link) => {\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(\n\t\t\t\tlines,\n\t\t\t\tthis.xterm.cols,\n\t\t\t\t{\n\t\t\t\t\tstartColumn: link.startIndex + 1,\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tendColumn: link.startIndex + link.length + 1,\n\t\t\t\t\tendLineNumber: 1,\n\t\t\t\t},\n\t\t\t\tstartLine,\n\t\t\t);\n\t\t\tconst matchingText =\n\t\t\t\ttext.substring(\n\t\t\t\t\tlink.startIndex,\n\t\t\t\t\tlink.startIndex + link.length,\n\t\t\t\t) || \"\";\n\n\t\t\tconst l: ITerminalSimpleLink = {\n\t\t\t\ttext: matchingText,\n\t\t\t\tlabel: link.label,\n\t\t\t\tbufferRange,\n\t\t\t\ttype: { id: this.id },\n\t\t\t\tactivate: link.activate,\n\t\t\t};\n\t\t\treturn l;\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": ";;AAYA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEA,MAAM,6BAA8D;AAAA,EAG1E,YACU,IACA,OACQ,eAGhB;AALQ;AACA;AACQ;AAAA,EAGf;AAAA,EA1BJ,OAiB2E;AAAA;AAAA;AAAA,EACjE,gBAAgB;AAAA,EAUzB,MAAM,OACL,OACA,WACA,SACiC;AAEjC,UAAM,OAAO;AAAA,MACZ,KAAK,MAAM,OAAO;AAAA,MAClB;AAAA,MACA;AAAA,MACA,KAAK,MAAM;AAAA,IACZ;AACA,QAAI,SAAS,MAAM,KAAK,SAAS,KAAK,eAAe;AACpD,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,gBAAgB,MAAM,KAAK,cAAc,IAAI;AACnD,QAAI,CAAC,eAAe;AACnB,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,SAAS,cAAc,IAAI,CAAC,SAAS;AAC1C,YAAM,cAAc;AAAA,QACnB;AAAA,QACA,KAAK,MAAM;AAAA,QACX;AAAA,UACC,aAAa,KAAK,aAAa;AAAA,UAC/B,iBAAiB;AAAA,UACjB,WAAW,KAAK,aAAa,KAAK,SAAS;AAAA,UAC3C,eAAe;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AACA,YAAM,eACL,KAAK;AAAA,QACJ,KAAK;AAAA,QACL,KAAK,aAAa,KAAK;AAAA,MACxB,KAAK;AAEN,YAAM,IAAyB;AAAA,QAC9B,MAAM;AAAA,QACN,OAAO,KAAK;AAAA,QACZ;AAAA,QACA,MAAM,EAAE,IAAI,KAAK,GAAG;AAAA,QACpB,UAAU,KAAK;AAAA,MAChB;AACA,aAAO;AAAA,IACR,CAAC;AAED,WAAO;AAAA,EACR;AACD;",
  "names": []
}
