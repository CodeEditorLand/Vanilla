{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalExternalLinkDetector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalLinkDetector, ITerminalSimpleLink, OmitFirstArg } from './links.js';\nimport { convertLinkRangeToBuffer, getXtermLineContent } from './terminalLinkHelpers.js';\nimport { ITerminalExternalLinkProvider } from '../../../terminal/browser/terminal.js';\nimport type { IBufferLine, Terminal } from '@xterm/xterm';\n\nexport class TerminalExternalLinkDetector implements ITerminalLinkDetector {\n\treadonly maxLinkLength = 2000;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly xterm: Terminal,\n\t\tprivate readonly _provideLinks: OmitFirstArg<ITerminalExternalLinkProvider['provideLinks']>\n\t) {\n\t}\n\n\tasync detect(lines: IBufferLine[], startLine: number, endLine: number): Promise<ITerminalSimpleLink[]> {\n\t\t// Get the text representation of the wrapped line\n\t\tconst text = getXtermLineContent(this.xterm.buffer.active, startLine, endLine, this.xterm.cols);\n\t\tif (text === '' || text.length > this.maxLinkLength) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst externalLinks = await this._provideLinks(text);\n\t\tif (!externalLinks) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result = externalLinks.map(link => {\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, this.xterm.cols, {\n\t\t\t\tstartColumn: link.startIndex + 1,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: link.startIndex + link.length + 1,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, startLine);\n\t\t\tconst matchingText = text.substring(link.startIndex, link.startIndex + link.length) || '';\n\n\t\t\tconst l: ITerminalSimpleLink = {\n\t\t\t\ttext: matchingText,\n\t\t\t\tlabel: link.label,\n\t\t\t\tbufferRange,\n\t\t\t\ttype: { id: this.id },\n\t\t\t\tactivate: link.activate\n\t\t\t};\n\t\t\treturn l;\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB,qBAAqB,oBAAoB;AACzE,SAAS,0BAA0B,2BAA2B;AAC9D,SAAS,qCAAqC;AAGvC,MAAM,6BAA8D;AAAA,EAG1E,YACU,IACA,OACQ,eAChB;AAHQ;AACA;AACQ;AAAA,EAElB;AAAA,EAlBD,OAU2E;AAAA;AAAA;AAAA,EACjE,gBAAgB;AAAA,EASzB,MAAM,OAAO,OAAsB,WAAmB,SAAiD;AAEtG,UAAM,OAAO,oBAAoB,KAAK,MAAM,OAAO,QAAQ,WAAW,SAAS,KAAK,MAAM,IAAI;AAC9F,QAAI,SAAS,MAAM,KAAK,SAAS,KAAK,eAAe;AACpD,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,gBAAgB,MAAM,KAAK,cAAc,IAAI;AACnD,QAAI,CAAC,eAAe;AACnB,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,SAAS,cAAc,IAAI,UAAQ;AACxC,YAAM,cAAc,yBAAyB,OAAO,KAAK,MAAM,MAAM;AAAA,QACpE,aAAa,KAAK,aAAa;AAAA,QAC/B,iBAAiB;AAAA,QACjB,WAAW,KAAK,aAAa,KAAK,SAAS;AAAA,QAC3C,eAAe;AAAA,MAChB,GAAG,SAAS;AACZ,YAAM,eAAe,KAAK,UAAU,KAAK,YAAY,KAAK,aAAa,KAAK,MAAM,KAAK;AAEvF,YAAM,IAAyB;AAAA,QAC9B,MAAM;AAAA,QACN,OAAO,KAAK;AAAA,QACZ;AAAA,QACA,MAAM,EAAE,IAAI,KAAK,GAAG;AAAA,QACpB,UAAU,KAAK;AAAA,MAChB;AACA,aAAO;AAAA,IACR,CAAC;AAED,WAAO;AAAA,EACR;AACD;",
  "names": []
}
