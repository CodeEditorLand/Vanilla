{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/test/browser/terminalLinkParsing.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, ok, strictEqual } from 'assert';\nimport { OperatingSystem } from '../../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { detectLinks, detectLinkSuffixes, getLinkSuffix, IParsedLink, removeLinkQueryString, removeLinkSuffix } from '../../browser/terminalLinkParsing.js';\n\ninterface ITestLink {\n\tlink: string;\n\tprefix: string | undefined;\n\tsuffix: string | undefined;\n\t// TODO: These has vars would be nicer as a flags enum\n\thasRow: boolean;\n\thasCol: boolean;\n\thasRowEnd?: boolean;\n\thasColEnd?: boolean;\n}\n\nconst operatingSystems: ReadonlyArray<OperatingSystem> = [\n\tOperatingSystem.Linux,\n\tOperatingSystem.Macintosh,\n\tOperatingSystem.Windows\n];\nconst osTestPath: { [key: number | OperatingSystem]: string } = {\n\t[OperatingSystem.Linux]: '/test/path/linux',\n\t[OperatingSystem.Macintosh]: '/test/path/macintosh',\n\t[OperatingSystem.Windows]: 'C:\\\\test\\\\path\\\\windows'\n};\nconst osLabel: { [key: number | OperatingSystem]: string } = {\n\t[OperatingSystem.Linux]: '[Linux]',\n\t[OperatingSystem.Macintosh]: '[macOS]',\n\t[OperatingSystem.Windows]: '[Windows]'\n};\n\nconst testRow = 339;\nconst testCol = 12;\nconst testRowEnd = 341;\nconst testColEnd = 789;\nconst testLinks: ITestLink[] = [\n\t// Simple\n\t{ link: 'foo', prefix: undefined, suffix: undefined, hasRow: false, hasCol: false },\n\t{ link: 'foo:339', prefix: undefined, suffix: ':339', hasRow: true, hasCol: false },\n\t{ link: 'foo:339:12', prefix: undefined, suffix: ':339:12', hasRow: true, hasCol: true },\n\t{ link: 'foo:339:12-789', prefix: undefined, suffix: ':339:12-789', hasRow: true, hasCol: true, hasRowEnd: false, hasColEnd: true },\n\t{ link: 'foo:339.12', prefix: undefined, suffix: ':339.12', hasRow: true, hasCol: true },\n\t{ link: 'foo:339.12-789', prefix: undefined, suffix: ':339.12-789', hasRow: true, hasCol: true, hasRowEnd: false, hasColEnd: true },\n\t{ link: 'foo:339.12-341.789', prefix: undefined, suffix: ':339.12-341.789', hasRow: true, hasCol: true, hasRowEnd: true, hasColEnd: true },\n\t{ link: 'foo#339', prefix: undefined, suffix: '#339', hasRow: true, hasCol: false },\n\t{ link: 'foo#339:12', prefix: undefined, suffix: '#339:12', hasRow: true, hasCol: true },\n\t{ link: 'foo#339:12-789', prefix: undefined, suffix: '#339:12-789', hasRow: true, hasCol: true, hasRowEnd: false, hasColEnd: true },\n\t{ link: 'foo#339.12', prefix: undefined, suffix: '#339.12', hasRow: true, hasCol: true },\n\t{ link: 'foo#339.12-789', prefix: undefined, suffix: '#339.12-789', hasRow: true, hasCol: true, hasRowEnd: false, hasColEnd: true },\n\t{ link: 'foo#339.12-341.789', prefix: undefined, suffix: '#339.12-341.789', hasRow: true, hasCol: true, hasRowEnd: true, hasColEnd: true },\n\t{ link: 'foo 339', prefix: undefined, suffix: ' 339', hasRow: true, hasCol: false },\n\t{ link: 'foo 339:12', prefix: undefined, suffix: ' 339:12', hasRow: true, hasCol: true },\n\t{ link: 'foo 339:12-789', prefix: undefined, suffix: ' 339:12-789', hasRow: true, hasCol: true, hasRowEnd: false, hasColEnd: true },\n\t{ link: 'foo 339.12', prefix: undefined, suffix: ' 339.12', hasRow: true, hasCol: true },\n\t{ link: 'foo 339.12-789', prefix: undefined, suffix: ' 339.12-789', hasRow: true, hasCol: true, hasRowEnd: false, hasColEnd: true },\n\t{ link: 'foo 339.12-341.789', prefix: undefined, suffix: ' 339.12-341.789', hasRow: true, hasCol: true, hasRowEnd: true, hasColEnd: true },\n\n\t// Double quotes\n\t{ link: '\"foo\",339', prefix: '\"', suffix: '\",339', hasRow: true, hasCol: false },\n\t{ link: '\"foo\",339:12', prefix: '\"', suffix: '\",339:12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\",339.12', prefix: '\"', suffix: '\",339.12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\", line 339', prefix: '\"', suffix: '\", line 339', hasRow: true, hasCol: false },\n\t{ link: '\"foo\", line 339, col 12', prefix: '\"', suffix: '\", line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\", line 339, column 12', prefix: '\"', suffix: '\", line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\":line 339', prefix: '\"', suffix: '\":line 339', hasRow: true, hasCol: false },\n\t{ link: '\"foo\":line 339, col 12', prefix: '\"', suffix: '\":line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\":line 339, column 12', prefix: '\"', suffix: '\":line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\": line 339', prefix: '\"', suffix: '\": line 339', hasRow: true, hasCol: false },\n\t{ link: '\"foo\": line 339, col 12', prefix: '\"', suffix: '\": line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\": line 339, column 12', prefix: '\"', suffix: '\": line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\" on line 339', prefix: '\"', suffix: '\" on line 339', hasRow: true, hasCol: false },\n\t{ link: '\"foo\" on line 339, col 12', prefix: '\"', suffix: '\" on line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\" on line 339, column 12', prefix: '\"', suffix: '\" on line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\" line 339', prefix: '\"', suffix: '\" line 339', hasRow: true, hasCol: false },\n\t{ link: '\"foo\" line 339 column 12', prefix: '\"', suffix: '\" line 339 column 12', hasRow: true, hasCol: true },\n\n\t// Single quotes\n\t{ link: '\\'foo\\',339', prefix: '\\'', suffix: '\\',339', hasRow: true, hasCol: false },\n\t{ link: '\\'foo\\',339:12', prefix: '\\'', suffix: '\\',339:12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\',339.12', prefix: '\\'', suffix: '\\',339.12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\', line 339', prefix: '\\'', suffix: '\\', line 339', hasRow: true, hasCol: false },\n\t{ link: '\\'foo\\', line 339, col 12', prefix: '\\'', suffix: '\\', line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\', line 339, column 12', prefix: '\\'', suffix: '\\', line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\':line 339', prefix: '\\'', suffix: '\\':line 339', hasRow: true, hasCol: false },\n\t{ link: '\\'foo\\':line 339, col 12', prefix: '\\'', suffix: '\\':line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\':line 339, column 12', prefix: '\\'', suffix: '\\':line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\': line 339', prefix: '\\'', suffix: '\\': line 339', hasRow: true, hasCol: false },\n\t{ link: '\\'foo\\': line 339, col 12', prefix: '\\'', suffix: '\\': line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\': line 339, column 12', prefix: '\\'', suffix: '\\': line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\' on line 339', prefix: '\\'', suffix: '\\' on line 339', hasRow: true, hasCol: false },\n\t{ link: '\\'foo\\' on line 339, col 12', prefix: '\\'', suffix: '\\' on line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\' on line 339, column 12', prefix: '\\'', suffix: '\\' on line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\' line 339', prefix: '\\'', suffix: '\\' line 339', hasRow: true, hasCol: false },\n\t{ link: '\\'foo\\' line 339 column 12', prefix: '\\'', suffix: '\\' line 339 column 12', hasRow: true, hasCol: true },\n\n\t// No quotes\n\t{ link: 'foo, line 339', prefix: undefined, suffix: ', line 339', hasRow: true, hasCol: false },\n\t{ link: 'foo, line 339, col 12', prefix: undefined, suffix: ', line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: 'foo, line 339, column 12', prefix: undefined, suffix: ', line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: 'foo:line 339', prefix: undefined, suffix: ':line 339', hasRow: true, hasCol: false },\n\t{ link: 'foo:line 339, col 12', prefix: undefined, suffix: ':line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: 'foo:line 339, column 12', prefix: undefined, suffix: ':line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: 'foo: line 339', prefix: undefined, suffix: ': line 339', hasRow: true, hasCol: false },\n\t{ link: 'foo: line 339, col 12', prefix: undefined, suffix: ': line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: 'foo: line 339, column 12', prefix: undefined, suffix: ': line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: 'foo on line 339', prefix: undefined, suffix: ' on line 339', hasRow: true, hasCol: false },\n\t{ link: 'foo on line 339, col 12', prefix: undefined, suffix: ' on line 339, col 12', hasRow: true, hasCol: true },\n\t{ link: 'foo on line 339, column 12', prefix: undefined, suffix: ' on line 339, column 12', hasRow: true, hasCol: true },\n\t{ link: 'foo line 339', prefix: undefined, suffix: ' line 339', hasRow: true, hasCol: false },\n\t{ link: 'foo line 339 column 12', prefix: undefined, suffix: ' line 339 column 12', hasRow: true, hasCol: true },\n\n\t// Parentheses\n\t{ link: 'foo(339)', prefix: undefined, suffix: '(339)', hasRow: true, hasCol: false },\n\t{ link: 'foo(339,12)', prefix: undefined, suffix: '(339,12)', hasRow: true, hasCol: true },\n\t{ link: 'foo(339, 12)', prefix: undefined, suffix: '(339, 12)', hasRow: true, hasCol: true },\n\t{ link: 'foo (339)', prefix: undefined, suffix: ' (339)', hasRow: true, hasCol: false },\n\t{ link: 'foo (339,12)', prefix: undefined, suffix: ' (339,12)', hasRow: true, hasCol: true },\n\t{ link: 'foo (339, 12)', prefix: undefined, suffix: ' (339, 12)', hasRow: true, hasCol: true },\n\t{ link: 'foo: (339)', prefix: undefined, suffix: ': (339)', hasRow: true, hasCol: false },\n\t{ link: 'foo: (339,12)', prefix: undefined, suffix: ': (339,12)', hasRow: true, hasCol: true },\n\t{ link: 'foo: (339, 12)', prefix: undefined, suffix: ': (339, 12)', hasRow: true, hasCol: true },\n\n\t// Square brackets\n\t{ link: 'foo[339]', prefix: undefined, suffix: '[339]', hasRow: true, hasCol: false },\n\t{ link: 'foo[339,12]', prefix: undefined, suffix: '[339,12]', hasRow: true, hasCol: true },\n\t{ link: 'foo[339, 12]', prefix: undefined, suffix: '[339, 12]', hasRow: true, hasCol: true },\n\t{ link: 'foo [339]', prefix: undefined, suffix: ' [339]', hasRow: true, hasCol: false },\n\t{ link: 'foo [339,12]', prefix: undefined, suffix: ' [339,12]', hasRow: true, hasCol: true },\n\t{ link: 'foo [339, 12]', prefix: undefined, suffix: ' [339, 12]', hasRow: true, hasCol: true },\n\t{ link: 'foo: [339]', prefix: undefined, suffix: ': [339]', hasRow: true, hasCol: false },\n\t{ link: 'foo: [339,12]', prefix: undefined, suffix: ': [339,12]', hasRow: true, hasCol: true },\n\t{ link: 'foo: [339, 12]', prefix: undefined, suffix: ': [339, 12]', hasRow: true, hasCol: true },\n\n\t// OCaml-style\n\t{ link: '\"foo\", line 339, character 12', prefix: '\"', suffix: '\", line 339, character 12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\", line 339, characters 12-789', prefix: '\"', suffix: '\", line 339, characters 12-789', hasRow: true, hasCol: true, hasColEnd: true },\n\t{ link: '\"foo\", lines 339-341', prefix: '\"', suffix: '\", lines 339-341', hasRow: true, hasCol: false, hasRowEnd: true },\n\t{ link: '\"foo\", lines 339-341, characters 12-789', prefix: '\"', suffix: '\", lines 339-341, characters 12-789', hasRow: true, hasCol: true, hasRowEnd: true, hasColEnd: true },\n\n\t// Non-breaking space\n\t{ link: 'foo\\u00A0339:12', prefix: undefined, suffix: '\\u00A0339:12', hasRow: true, hasCol: true },\n\t{ link: '\"foo\" on line 339,\\u00A0column 12', prefix: '\"', suffix: '\" on line 339,\\u00A0column 12', hasRow: true, hasCol: true },\n\t{ link: '\\'foo\\' on line\\u00A0339, column 12', prefix: '\\'', suffix: '\\' on line\\u00A0339, column 12', hasRow: true, hasCol: true },\n\t{ link: 'foo (339,\\u00A012)', prefix: undefined, suffix: ' (339,\\u00A012)', hasRow: true, hasCol: true },\n\t{ link: 'foo\\u00A0[339, 12]', prefix: undefined, suffix: '\\u00A0[339, 12]', hasRow: true, hasCol: true },\n];\nconst testLinksWithSuffix = testLinks.filter(e => !!e.suffix);\n\nsuite('TerminalLinkParsing', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('removeLinkSuffix', () => {\n\t\tfor (const testLink of testLinks) {\n\t\t\ttest('`' + testLink.link + '`', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tremoveLinkSuffix(testLink.link),\n\t\t\t\t\ttestLink.suffix === undefined ? testLink.link : testLink.link.replace(testLink.suffix, '')\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t});\n\tsuite('getLinkSuffix', () => {\n\t\tfor (const testLink of testLinks) {\n\t\t\ttest('`' + testLink.link + '`', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tgetLinkSuffix(testLink.link),\n\t\t\t\t\ttestLink.suffix === undefined ? null : {\n\t\t\t\t\t\trow: testLink.hasRow ? testRow : undefined,\n\t\t\t\t\t\tcol: testLink.hasCol ? testCol : undefined,\n\t\t\t\t\t\trowEnd: testLink.hasRowEnd ? testRowEnd : undefined,\n\t\t\t\t\t\tcolEnd: testLink.hasColEnd ? testColEnd : undefined,\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tindex: testLink.link.length - testLink.suffix.length,\n\t\t\t\t\t\t\ttext: testLink.suffix\n\t\t\t\t\t\t}\n\t\t\t\t\t} as ReturnType<typeof getLinkSuffix>\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t});\n\tsuite('detectLinkSuffixes', () => {\n\t\tfor (const testLink of testLinks) {\n\t\t\ttest('`' + testLink.link + '`', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tdetectLinkSuffixes(testLink.link),\n\t\t\t\t\ttestLink.suffix === undefined ? [] : [{\n\t\t\t\t\t\trow: testLink.hasRow ? testRow : undefined,\n\t\t\t\t\t\tcol: testLink.hasCol ? testCol : undefined,\n\t\t\t\t\t\trowEnd: testLink.hasRowEnd ? testRowEnd : undefined,\n\t\t\t\t\t\tcolEnd: testLink.hasColEnd ? testColEnd : undefined,\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tindex: testLink.link.length - testLink.suffix.length,\n\t\t\t\t\t\t\ttext: testLink.suffix\n\t\t\t\t\t\t}\n\t\t\t\t\t} as ReturnType<typeof getLinkSuffix>]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\ttest('foo(1, 2) bar[3, 4] baz on line 5', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tdetectLinkSuffixes('foo(1, 2) bar[3, 4] baz on line 5'),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tcol: 2,\n\t\t\t\t\t\trow: 1,\n\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tindex: 3,\n\t\t\t\t\t\t\ttext: '(1, 2)'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tcol: 4,\n\t\t\t\t\t\trow: 3,\n\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tindex: 13,\n\t\t\t\t\t\t\ttext: '[3, 4]'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tcol: undefined,\n\t\t\t\t\t\trow: 5,\n\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tindex: 23,\n\t\t\t\t\t\t\ttext: ' on line 5'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\t});\n\tsuite('removeLinkQueryString', () => {\n\t\ttest('should remove any query string from the link', () => {\n\t\t\tstrictEqual(removeLinkQueryString('?a=b'), '');\n\t\t\tstrictEqual(removeLinkQueryString('foo?a=b'), 'foo');\n\t\t\tstrictEqual(removeLinkQueryString('./foo?a=b'), './foo');\n\t\t\tstrictEqual(removeLinkQueryString('/foo/bar?a=b'), '/foo/bar');\n\t\t\tstrictEqual(removeLinkQueryString('foo?a=b?'), 'foo');\n\t\t\tstrictEqual(removeLinkQueryString('foo?a=b&c=d'), 'foo');\n\t\t});\n\t\ttest('should respect ? in UNC paths', () => {\n\t\t\tstrictEqual(removeLinkQueryString('\\\\\\\\?\\\\foo?a=b'), '\\\\\\\\?\\\\foo',);\n\t\t});\n\t});\n\tsuite('detectLinks', () => {\n\t\ttest('foo(1, 2) bar[3, 4] \"baz\" on line 5', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tdetectLinks('foo(1, 2) bar[3, 4] \"baz\" on line 5', OperatingSystem.Linux),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\ttext: 'foo'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tcol: 2,\n\t\t\t\t\t\t\trow: 1,\n\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: 3,\n\t\t\t\t\t\t\t\ttext: '(1, 2)'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 10,\n\t\t\t\t\t\t\ttext: 'bar'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tcol: 4,\n\t\t\t\t\t\t\trow: 3,\n\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: 13,\n\t\t\t\t\t\t\t\ttext: '[3, 4]'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 21,\n\t\t\t\t\t\t\ttext: 'baz'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprefix: {\n\t\t\t\t\t\t\tindex: 20,\n\t\t\t\t\t\t\ttext: '\"'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\tcol: undefined,\n\t\t\t\t\t\t\trow: 5,\n\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: 24,\n\t\t\t\t\t\t\t\ttext: '\" on line 5'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t] as IParsedLink[]\n\t\t\t);\n\t\t});\n\n\t\ttest('should extract the link prefix', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tdetectLinks('\"foo\", line 5, col 6', OperatingSystem.Linux),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\ttext: 'foo'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprefix: {\n\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\ttext: '\"',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\trow: 5,\n\t\t\t\t\t\t\tcol: 6,\n\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: 4,\n\t\t\t\t\t\t\t\ttext: '\", line 5, col 6'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t] as IParsedLink[]\n\t\t\t);\n\t\t});\n\n\t\ttest('should be smart about determining the link prefix when multiple prefix characters exist', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tdetectLinks('echo \\'\"foo\", line 5, col 6\\'', OperatingSystem.Linux),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 7,\n\t\t\t\t\t\t\ttext: 'foo'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprefix: {\n\t\t\t\t\t\t\tindex: 6,\n\t\t\t\t\t\t\ttext: '\"',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\trow: 5,\n\t\t\t\t\t\t\tcol: 6,\n\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: 10,\n\t\t\t\t\t\t\t\ttext: '\", line 5, col 6'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t] as IParsedLink[],\n\t\t\t\t'The outer single quotes should be excluded from the link prefix and suffix'\n\t\t\t);\n\t\t});\n\n\t\ttest('should detect both suffix and non-suffix links on a single line', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tdetectLinks('PS C:\\\\Github\\\\microsoft\\\\vscode> echo \\'\"foo\", line 5, col 6\\'', OperatingSystem.Windows),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 3,\n\t\t\t\t\t\t\ttext: 'C:\\\\Github\\\\microsoft\\\\vscode'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 38,\n\t\t\t\t\t\t\ttext: 'foo'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprefix: {\n\t\t\t\t\t\t\tindex: 37,\n\t\t\t\t\t\t\ttext: '\"',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\trow: 5,\n\t\t\t\t\t\t\tcol: 6,\n\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: 41,\n\t\t\t\t\t\t\t\ttext: '\", line 5, col 6'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t] as IParsedLink[]\n\t\t\t);\n\t\t});\n\n\t\tsuite('\"|\"', () => {\n\t\t\ttest('should exclude pipe characters from link paths', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tdetectLinks('|C:\\\\Github\\\\microsoft\\\\vscode|', OperatingSystem.Windows),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\t\ttext: 'C:\\\\Github\\\\microsoft\\\\vscode'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t);\n\t\t\t});\n\t\t\ttest('should exclude pipe characters from link paths with suffixes', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tdetectLinks('|C:\\\\Github\\\\microsoft\\\\vscode:400|', OperatingSystem.Windows),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\t\ttext: 'C:\\\\Github\\\\microsoft\\\\vscode'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tcol: undefined,\n\t\t\t\t\t\t\t\trow: 400,\n\t\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\t\tindex: 27,\n\t\t\t\t\t\t\t\t\ttext: ':400'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tsuite('\"<>\"', () => {\n\t\t\tfor (const os of operatingSystems) {\n\t\t\t\ttest(`should exclude bracket characters from link paths ${osLabel[os]}`, () => {\n\t\t\t\t\tdeepStrictEqual(\n\t\t\t\t\t\tdetectLinks(`<${osTestPath[os]}<`, os),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\t\t\ttext: osTestPath[os]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t\t);\n\t\t\t\t\tdeepStrictEqual(\n\t\t\t\t\t\tdetectLinks(`>${osTestPath[os]}>`, os),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\t\t\ttext: osTestPath[os]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\ttest(`should exclude bracket characters from link paths with suffixes ${osLabel[os]}`, () => {\n\t\t\t\t\tdeepStrictEqual(\n\t\t\t\t\t\tdetectLinks(`<${osTestPath[os]}:400<`, os),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\t\t\ttext: osTestPath[os]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\t\tcol: undefined,\n\t\t\t\t\t\t\t\t\trow: 400,\n\t\t\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\t\t\tindex: 1 + osTestPath[os].length,\n\t\t\t\t\t\t\t\t\t\ttext: ':400'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t\t);\n\t\t\t\t\tdeepStrictEqual(\n\t\t\t\t\t\tdetectLinks(`>${osTestPath[os]}:400>`, os),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\t\t\ttext: osTestPath[os]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\t\tcol: undefined,\n\t\t\t\t\t\t\t\t\trow: 400,\n\t\t\t\t\t\t\t\t\trowEnd: undefined,\n\t\t\t\t\t\t\t\t\tcolEnd: undefined,\n\t\t\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\t\t\tindex: 1 + osTestPath[os].length,\n\t\t\t\t\t\t\t\t\t\ttext: ':400'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tsuite('query strings', () => {\n\t\t\tfor (const os of operatingSystems) {\n\t\t\t\ttest(`should exclude query strings from link paths ${osLabel[os]}`, () => {\n\t\t\t\t\tdeepStrictEqual(\n\t\t\t\t\t\tdetectLinks(`${osTestPath[os]}?a=b`, os),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\t\t\ttext: osTestPath[os]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t\t);\n\t\t\t\t\tdeepStrictEqual(\n\t\t\t\t\t\tdetectLinks(`${osTestPath[os]}?a=b&c=d`, os),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\t\t\ttext: osTestPath[os]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\ttest('should not detect links starting with ? within query strings that contain posix-style paths (#204195)', () => {\n\t\t\t\t\t// ? appended to the cwd will exist since it's just the cwd\n\t\t\t\t\tstrictEqual(detectLinks(`http://foo.com/?bar=/a/b&baz=c`, os).some(e => e.path.text.startsWith('?')), false);\n\t\t\t\t});\n\t\t\t\ttest('should not detect links starting with ? within query strings that contain Windows-style paths (#204195)', () => {\n\t\t\t\t\t// ? appended to the cwd will exist since it's just the cwd\n\t\t\t\t\tstrictEqual(detectLinks(`http://foo.com/?bar=a:\\\\b&baz=c`, os).some(e => e.path.text.startsWith('?')), false);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tsuite('should detect file names in git diffs', () => {\n\t\t\ttest('--- a/foo/bar', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tdetectLinks('--- a/foo/bar', OperatingSystem.Linux),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\tindex: 6,\n\t\t\t\t\t\t\t\ttext: 'foo/bar'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t);\n\t\t\t});\n\t\t\ttest('+++ b/foo/bar', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tdetectLinks('+++ b/foo/bar', OperatingSystem.Linux),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\tindex: 6,\n\t\t\t\t\t\t\t\ttext: 'foo/bar'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t);\n\t\t\t});\n\t\t\ttest('diff --git a/foo/bar b/foo/baz', () => {\n\t\t\t\tdeepStrictEqual(\n\t\t\t\t\tdetectLinks('diff --git a/foo/bar b/foo/baz', OperatingSystem.Linux),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\tindex: 13,\n\t\t\t\t\t\t\t\ttext: 'foo/bar'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\tindex: 23,\n\t\t\t\t\t\t\t\ttext: 'foo/baz'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprefix: undefined,\n\t\t\t\t\t\t\tsuffix: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t] as IParsedLink[]\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tsuite('should detect 3 suffix links on a single line', () => {\n\t\t\tfor (let i = 0; i < testLinksWithSuffix.length - 2; i++) {\n\t\t\t\tconst link1 = testLinksWithSuffix[i];\n\t\t\t\tconst link2 = testLinksWithSuffix[i + 1];\n\t\t\t\tconst link3 = testLinksWithSuffix[i + 2];\n\t\t\t\tconst line = ` ${link1.link} ${link2.link} ${link3.link} `;\n\t\t\t\ttest('`' + line.replaceAll('\\u00A0', '<nbsp>') + '`', () => {\n\t\t\t\t\tstrictEqual(detectLinks(line, OperatingSystem.Linux).length, 3);\n\t\t\t\t\tok(link1.suffix);\n\t\t\t\t\tok(link2.suffix);\n\t\t\t\t\tok(link3.suffix);\n\t\t\t\t\tconst detectedLink1: IParsedLink = {\n\t\t\t\t\t\tprefix: link1.prefix ? {\n\t\t\t\t\t\t\tindex: 1,\n\t\t\t\t\t\t\ttext: link1.prefix\n\t\t\t\t\t\t} : undefined,\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: 1 + (link1.prefix?.length ?? 0),\n\t\t\t\t\t\t\ttext: link1.link.replace(link1.suffix, '').replace(link1.prefix || '', '')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\trow: link1.hasRow ? testRow : undefined,\n\t\t\t\t\t\t\tcol: link1.hasCol ? testCol : undefined,\n\t\t\t\t\t\t\trowEnd: link1.hasRowEnd ? testRowEnd : undefined,\n\t\t\t\t\t\t\tcolEnd: link1.hasColEnd ? testColEnd : undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: 1 + (link1.link.length - link1.suffix.length),\n\t\t\t\t\t\t\t\ttext: link1.suffix\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tconst detectedLink2: IParsedLink = {\n\t\t\t\t\t\tprefix: link2.prefix ? {\n\t\t\t\t\t\t\tindex: (detectedLink1.prefix?.index ?? detectedLink1.path.index) + link1.link.length + 1,\n\t\t\t\t\t\t\ttext: link2.prefix\n\t\t\t\t\t\t} : undefined,\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: (detectedLink1.prefix?.index ?? detectedLink1.path.index) + link1.link.length + 1 + (link2.prefix ?? '').length,\n\t\t\t\t\t\t\ttext: link2.link.replace(link2.suffix, '').replace(link2.prefix ?? '', '')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\trow: link2.hasRow ? testRow : undefined,\n\t\t\t\t\t\t\tcol: link2.hasCol ? testCol : undefined,\n\t\t\t\t\t\t\trowEnd: link2.hasRowEnd ? testRowEnd : undefined,\n\t\t\t\t\t\t\tcolEnd: link2.hasColEnd ? testColEnd : undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: (detectedLink1.prefix?.index ?? detectedLink1.path.index) + link1.link.length + 1 + (link2.link.length - link2.suffix.length),\n\t\t\t\t\t\t\t\ttext: link2.suffix\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tconst detectedLink3: IParsedLink = {\n\t\t\t\t\t\tprefix: link3.prefix ? {\n\t\t\t\t\t\t\tindex: (detectedLink2.prefix?.index ?? detectedLink2.path.index) + link2.link.length + 1,\n\t\t\t\t\t\t\ttext: link3.prefix\n\t\t\t\t\t\t} : undefined,\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tindex: (detectedLink2.prefix?.index ?? detectedLink2.path.index) + link2.link.length + 1 + (link3.prefix ?? '').length,\n\t\t\t\t\t\t\ttext: link3.link.replace(link3.suffix, '').replace(link3.prefix ?? '', '')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\trow: link3.hasRow ? testRow : undefined,\n\t\t\t\t\t\t\tcol: link3.hasCol ? testCol : undefined,\n\t\t\t\t\t\t\trowEnd: link3.hasRowEnd ? testRowEnd : undefined,\n\t\t\t\t\t\t\tcolEnd: link3.hasColEnd ? testColEnd : undefined,\n\t\t\t\t\t\t\tsuffix: {\n\t\t\t\t\t\t\t\tindex: (detectedLink2.prefix?.index ?? detectedLink2.path.index) + link2.link.length + 1 + (link3.link.length - link3.suffix.length),\n\t\t\t\t\t\t\t\ttext: link3.suffix\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tdeepStrictEqual(\n\t\t\t\t\t\tdetectLinks(line, OperatingSystem.Linux),\n\t\t\t\t\t\t[detectedLink1, detectedLink2, detectedLink3]\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tsuite('should ignore links with suffixes when the path itself is the empty string', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tdetectLinks('\"\"\",1', OperatingSystem.Linux),\n\t\t\t\t[] as IParsedLink[]\n\t\t\t);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
