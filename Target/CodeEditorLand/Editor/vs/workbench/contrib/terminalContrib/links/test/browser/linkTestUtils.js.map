{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/test/browser/linkTestUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { ITerminalLinkDetector, TerminalLinkType } from '../../browser/links.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport type { IBufferLine } from '@xterm/xterm';\n\nexport async function assertLinkHelper(\n\ttext: string,\n\texpected: ({ uri: URI; range: [number, number][] } | { text: string; range: [number, number][] })[],\n\tdetector: ITerminalLinkDetector,\n\texpectedType: TerminalLinkType\n) {\n\tdetector.xterm.reset();\n\n\t// Write the text and wait for the parser to finish\n\tawait new Promise<void>(r => detector.xterm.write(text, r));\n\tconst textSplit = text.split('\\r\\n');\n\tconst lastLineIndex = textSplit.filter((e, i) => i !== textSplit.length - 1).reduce((p, c) => {\n\t\treturn p + Math.max(Math.ceil(c.length / 80), 1);\n\t}, 0);\n\n\t// Ensure all links are provided\n\tconst lines: IBufferLine[] = [];\n\tfor (let i = 0; i < detector.xterm.buffer.active.cursorY + 1; i++) {\n\t\tlines.push(detector.xterm.buffer.active.getLine(i)!);\n\t}\n\n\t// Detect links always on the last line with content\n\tconst actualLinks = (await detector.detect(lines, lastLineIndex, detector.xterm.buffer.active.cursorY)).map(e => {\n\t\treturn {\n\t\t\tlink: e.uri?.toString() ?? e.text,\n\t\t\ttype: expectedType,\n\t\t\tbufferRange: e.bufferRange\n\t\t};\n\t});\n\tconst expectedLinks = expected.map(e => {\n\t\treturn {\n\t\t\ttype: expectedType,\n\t\t\tlink: 'uri' in e ? e.uri.toString() : e.text,\n\t\t\tbufferRange: {\n\t\t\t\tstart: { x: e.range[0][0], y: e.range[0][1] },\n\t\t\t\tend: { x: e.range[1][0], y: e.range[1][1] },\n\t\t\t}\n\t\t};\n\t});\n\tdeepStrictEqual(actualLinks, expectedLinks);\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,uBAAuB,wBAAwB;AACxD,SAAS,WAAW;AAGpB,eAAsB,iBACrB,MACA,UACA,UACA,cACC;AACD,WAAS,MAAM,MAAM;AAGrB,QAAM,IAAI,QAAc,OAAK,SAAS,MAAM,MAAM,MAAM,CAAC,CAAC;AAC1D,QAAM,YAAY,KAAK,MAAM,MAAM;AACnC,QAAM,gBAAgB,UAAU,OAAO,CAAC,GAAG,MAAM,MAAM,UAAU,SAAS,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM;AAC7F,WAAO,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE,SAAS,EAAE,GAAG,CAAC;AAAA,EAChD,GAAG,CAAC;AAGJ,QAAM,QAAuB,CAAC;AAC9B,WAAS,IAAI,GAAG,IAAI,SAAS,MAAM,OAAO,OAAO,UAAU,GAAG,KAAK;AAClE,UAAM,KAAK,SAAS,MAAM,OAAO,OAAO,QAAQ,CAAC,CAAE;AAAA,EACpD;AAGA,QAAM,eAAe,MAAM,SAAS,OAAO,OAAO,eAAe,SAAS,MAAM,OAAO,OAAO,OAAO,GAAG,IAAI,OAAK;AAChH,WAAO;AAAA,MACN,MAAM,EAAE,KAAK,SAAS,KAAK,EAAE;AAAA,MAC7B,MAAM;AAAA,MACN,aAAa,EAAE;AAAA,IAChB;AAAA,EACD,CAAC;AACD,QAAM,gBAAgB,SAAS,IAAI,OAAK;AACvC,WAAO;AAAA,MACN,MAAM;AAAA,MACN,MAAM,SAAS,IAAI,EAAE,IAAI,SAAS,IAAI,EAAE;AAAA,MACxC,aAAa;AAAA,QACZ,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE;AAAA,QAC5C,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE;AAAA,MAC3C;AAAA,IACD;AAAA,EACD,CAAC;AACD,kBAAgB,aAAa,aAAa;AAC3C;AAxCsB;",
  "names": []
}
