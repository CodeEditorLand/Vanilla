{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/test/browser/terminalLinkOpeners.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { Schemas } from '../../../../../../base/common/network.js';\nimport { OperatingSystem } from '../../../../../../base/common/platform.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { ITextEditorSelection, ITextResourceEditorInput } from '../../../../../../platform/editor/common/editor.js';\nimport { IFileService, IFileStatWithPartialMetadata } from '../../../../../../platform/files/common/files.js';\nimport { FileService } from '../../../../../../platform/files/common/fileService.js';\nimport { TestInstantiationService } from '../../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ILogService, NullLogService } from '../../../../../../platform/log/common/log.js';\nimport { IQuickInputService } from '../../../../../../platform/quickinput/common/quickInput.js';\nimport { IWorkspaceContextService } from '../../../../../../platform/workspace/common/workspace.js';\nimport { CommandDetectionCapability } from '../../../../../../platform/terminal/common/capabilities/commandDetectionCapability.js';\nimport { TerminalBuiltinLinkType } from '../../browser/links.js';\nimport { TerminalLocalFileLinkOpener, TerminalLocalFolderInWorkspaceLinkOpener, TerminalSearchLinkOpener } from '../../browser/terminalLinkOpeners.js';\nimport { TerminalCapability, IXtermMarker } from '../../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { TerminalCapabilityStore } from '../../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { IEditorService } from '../../../../../services/editor/common/editorService.js';\nimport { IWorkbenchEnvironmentService } from '../../../../../services/environment/common/environmentService.js';\nimport { TestContextService } from '../../../../../test/common/workbenchTestServices.js';\nimport type { Terminal } from '@xterm/xterm';\nimport { IFileQuery, ISearchComplete, ISearchService } from '../../../../../services/search/common/search.js';\nimport { SearchService } from '../../../../../services/search/common/searchService.js';\nimport { ITerminalLogService } from '../../../../../../platform/terminal/common/terminal.js';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { TerminalCommand } from '../../../../../../platform/terminal/common/capabilities/commandDetection/terminalCommand.js';\n\ninterface ITerminalLinkActivationResult {\n\tsource: 'editor' | 'search';\n\tlink: string;\n\tselection?: ITextEditorSelection;\n}\n\nclass TestCommandDetectionCapability extends CommandDetectionCapability {\n\tsetCommands(commands: TerminalCommand[]) {\n\t\tthis._commands = commands;\n\t}\n}\n\nclass TestFileService extends FileService {\n\tprivate _files: URI[] | '*' = '*';\n\toverride async stat(resource: URI): Promise<IFileStatWithPartialMetadata> {\n\t\tif (this._files === '*' || this._files.some(e => e.toString() === resource.toString())) {\n\t\t\treturn { isFile: true, isDirectory: false, isSymbolicLink: false } as IFileStatWithPartialMetadata;\n\t\t}\n\t\tthrow new Error('ENOENT');\n\t}\n\tsetFiles(files: URI[] | '*'): void {\n\t\tthis._files = files;\n\t}\n}\n\nclass TestSearchService extends SearchService {\n\tprivate _searchResult: ISearchComplete | undefined;\n\toverride async fileSearch(query: IFileQuery): Promise<ISearchComplete> {\n\t\treturn this._searchResult!;\n\t}\n\tsetSearchResult(result: ISearchComplete) {\n\t\tthis._searchResult = result;\n\t}\n}\n\nclass TestTerminalSearchLinkOpener extends TerminalSearchLinkOpener {\n\tsetFileQueryBuilder(value: any) {\n\t\tthis._fileQueryBuilder = value;\n\t}\n}\n\nsuite('Workbench - TerminalLinkOpeners', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\tlet fileService: TestFileService;\n\tlet searchService: TestSearchService;\n\tlet activationResult: ITerminalLinkActivationResult | undefined;\n\tlet xterm: Terminal;\n\n\tsetup(async () => {\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tfileService = store.add(new TestFileService(new NullLogService()));\n\t\tsearchService = store.add(new TestSearchService(null!, null!, null!, null!, null!, null!, null!));\n\t\tinstantiationService.set(IFileService, fileService);\n\t\tinstantiationService.set(ILogService, new NullLogService());\n\t\tinstantiationService.set(ISearchService, searchService);\n\t\tinstantiationService.set(IWorkspaceContextService, new TestContextService());\n\t\tinstantiationService.stub(ITerminalLogService, new NullLogService());\n\t\tinstantiationService.stub(IWorkbenchEnvironmentService, {\n\t\t\tremoteAuthority: undefined\n\t\t} as Partial<IWorkbenchEnvironmentService>);\n\t\t// Allow intercepting link activations\n\t\tactivationResult = undefined;\n\t\tinstantiationService.stub(IQuickInputService, {\n\t\t\tquickAccess: {\n\t\t\t\tshow(link: string) {\n\t\t\t\t\tactivationResult = { link, source: 'search' };\n\t\t\t\t}\n\t\t\t}\n\t\t} as Partial<IQuickInputService>);\n\t\tinstantiationService.stub(IEditorService, {\n\t\t\tasync openEditor(editor: ITextResourceEditorInput): Promise<any> {\n\t\t\t\tactivationResult = {\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tlink: editor.resource?.toString()\n\t\t\t\t};\n\t\t\t\t// Only assert on selection if it's not the default value\n\t\t\t\tif (editor.options?.selection && (editor.options.selection.startColumn !== 1 || editor.options.selection.startLineNumber !== 1)) {\n\t\t\t\t\tactivationResult.selection = editor.options.selection;\n\t\t\t\t}\n\t\t\t}\n\t\t} as Partial<IEditorService>);\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true }));\n\t});\n\n\tsuite('TerminalSearchLinkOpener', () => {\n\t\tlet opener: TestTerminalSearchLinkOpener;\n\t\tlet capabilities: TerminalCapabilityStore;\n\t\tlet commandDetection: TestCommandDetectionCapability;\n\t\tlet localFileOpener: TerminalLocalFileLinkOpener;\n\n\t\tsetup(() => {\n\t\t\tcapabilities = store.add(new TerminalCapabilityStore());\n\t\t\tcommandDetection = store.add(instantiationService.createInstance(TestCommandDetectionCapability, xterm));\n\t\t\tcapabilities.add(TerminalCapability.CommandDetection, commandDetection);\n\t\t});\n\n\t\ttest('should open single exact match against cwd when searching if it exists when command detection cwd is available', async () => {\n\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/initial/cwd', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\t// Set a fake detected command starting as line 0 to establish the cwd\n\t\t\tcommandDetection.setCommands([new TerminalCommand(xterm, {\n\t\t\t\tcommand: '',\n\t\t\t\tcommandLineConfidence: 'low',\n\t\t\t\texitCode: 0,\n\t\t\t\tcommandStartLineContent: '',\n\t\t\t\tmarkProperties: {},\n\t\t\t\tisTrusted: true,\n\t\t\t\tcwd: '/initial/cwd',\n\t\t\t\ttimestamp: 0,\n\t\t\t\tduration: 0,\n\t\t\t\texecutedX: undefined,\n\t\t\t\tstartX: undefined,\n\t\t\t\tmarker: {\n\t\t\t\t\tline: 0\n\t\t\t\t} as Partial<IXtermMarker> as any,\n\t\t\t})]);\n\t\t\tfileService.setFiles([\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.txt' }),\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo2/bar.txt' })\n\t\t\t]);\n\t\t\tawait opener.open({\n\t\t\t\ttext: 'foo/bar.txt',\n\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t});\n\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\tlink: 'file:///initial/cwd/foo/bar.txt',\n\t\t\t\tsource: 'editor'\n\t\t\t});\n\t\t});\n\n\t\ttest('should open single exact match against cwd for paths containing a separator when searching if it exists, even when command detection isn\\'t available', async () => {\n\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/initial/cwd', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\tfileService.setFiles([\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.txt' }),\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo2/bar.txt' })\n\t\t\t]);\n\t\t\tawait opener.open({\n\t\t\t\ttext: 'foo/bar.txt',\n\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t});\n\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\tlink: 'file:///initial/cwd/foo/bar.txt',\n\t\t\t\tsource: 'editor'\n\t\t\t});\n\t\t});\n\n\t\ttest('should open single exact match against any folder for paths not containing a separator when there is a single search result, even when command detection isn\\'t available', async () => {\n\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/initial/cwd', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\tcapabilities.remove(TerminalCapability.CommandDetection);\n\t\t\topener.setFileQueryBuilder({ file: () => null! });\n\t\t\tfileService.setFiles([\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.txt' }),\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo2/baz.txt' })\n\t\t\t]);\n\t\t\tsearchService.setSearchResult({\n\t\t\t\tmessages: [],\n\t\t\t\tresults: [\n\t\t\t\t\t{ resource: URI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.txt' }) }\n\t\t\t\t]\n\t\t\t});\n\t\t\tawait opener.open({\n\t\t\t\ttext: 'bar.txt',\n\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t});\n\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\tlink: 'file:///initial/cwd/foo/bar.txt',\n\t\t\t\tsource: 'editor'\n\t\t\t});\n\t\t});\n\n\t\ttest('should open single exact match against any folder for paths not containing a separator when there are multiple search results, even when command detection isn\\'t available', async () => {\n\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/initial/cwd', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\tcapabilities.remove(TerminalCapability.CommandDetection);\n\t\t\topener.setFileQueryBuilder({ file: () => null! });\n\t\t\tfileService.setFiles([\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.txt' }),\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.test.txt' }),\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo2/bar.test.txt' })\n\t\t\t]);\n\t\t\tsearchService.setSearchResult({\n\t\t\t\tmessages: [],\n\t\t\t\tresults: [\n\t\t\t\t\t{ resource: URI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.txt' }) },\n\t\t\t\t\t{ resource: URI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.test.txt' }) },\n\t\t\t\t\t{ resource: URI.from({ scheme: Schemas.file, path: '/initial/cwd/foo2/bar.test.txt' }) }\n\t\t\t\t]\n\t\t\t});\n\t\t\tawait opener.open({\n\t\t\t\ttext: 'bar.txt',\n\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t});\n\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\tlink: 'file:///initial/cwd/foo/bar.txt',\n\t\t\t\tsource: 'editor'\n\t\t\t});\n\t\t});\n\n\t\ttest('should not open single exact match for paths not containing a when command detection isn\\'t available', async () => {\n\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/initial/cwd', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\tfileService.setFiles([\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo/bar.txt' }),\n\t\t\t\tURI.from({ scheme: Schemas.file, path: '/initial/cwd/foo2/bar.txt' })\n\t\t\t]);\n\t\t\tawait opener.open({\n\t\t\t\ttext: 'bar.txt',\n\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t});\n\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\tlink: 'bar.txt',\n\t\t\t\tsource: 'search'\n\t\t\t});\n\t\t});\n\n\t\tsuite('macOS/Linux', () => {\n\t\t\tsetup(() => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\t});\n\n\t\t\ttest('should apply the cwd to the link only when the file exists and cwdDetection is enabled', async () => {\n\t\t\t\tconst cwd = '/Users/home/folder';\n\t\t\t\tconst absoluteFile = '/Users/home/folder/file.txt';\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: absoluteFile }),\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: '/Users/home/folder/other/file.txt' })\n\t\t\t\t]);\n\n\t\t\t\t// Set a fake detected command starting as line 0 to establish the cwd\n\t\t\t\tcommandDetection.setCommands([new TerminalCommand(xterm, {\n\t\t\t\t\tcommand: '',\n\t\t\t\t\tcommandLineConfidence: 'low',\n\t\t\t\t\tisTrusted: true,\n\t\t\t\t\tcwd,\n\t\t\t\t\ttimestamp: 0,\n\t\t\t\t\tduration: 0,\n\t\t\t\t\texecutedX: undefined,\n\t\t\t\t\tstartX: undefined,\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tline: 0\n\t\t\t\t\t} as Partial<IXtermMarker> as any,\n\t\t\t\t\texitCode: 0,\n\t\t\t\t\tcommandStartLineContent: '',\n\t\t\t\t\tmarkProperties: {}\n\t\t\t\t})]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: 'file.txt',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///Users/home/folder/file.txt',\n\t\t\t\t\tsource: 'editor'\n\t\t\t\t});\n\n\t\t\t\t// Clear detected commands and ensure the same request results in a search since there are 2 matches\n\t\t\t\tcommandDetection.setCommands([]);\n\t\t\t\topener.setFileQueryBuilder({ file: () => null! });\n\t\t\t\tsearchService.setSearchResult({\n\t\t\t\t\tmessages: [],\n\t\t\t\t\tresults: [\n\t\t\t\t\t\t{ resource: URI.from({ scheme: Schemas.file, path: 'file:///Users/home/folder/file.txt' }) },\n\t\t\t\t\t\t{ resource: URI.from({ scheme: Schemas.file, path: 'file:///Users/home/folder/other/file.txt' }) }\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: 'file.txt',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file.txt',\n\t\t\t\t\tsource: 'search'\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract column and/or line numbers from links in a workspace containing spaces', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/space folder', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: '/space folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///space%20folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///space%20folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract column and/or line numbers from links and remove trailing periods', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: '/folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract column and/or line numbers from links and remove grepped lines', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: '/folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5:import { ILoveVSCode } from \\'./foo/bar.ts\\';',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:import { ILoveVSCode } from \\'./foo/bar.ts\\';',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Test for https://github.com/microsoft/vscode/pull/200919#discussion_r1428124196\n\t\t\ttest('should extract column and/or line numbers from links and remove grepped lines incl singular spaces', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: '/folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5: ',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10: ',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract line numbers from links and remove ruby stack traces', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Linux);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: '/folder/foo/bar.rb' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.rb:30:in `<main>`',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///folder/foo/bar.rb',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 30,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t});\n\n\t\tsuite('Windows', () => {\n\t\t\tsetup(() => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, '', localFileOpener, localFolderOpener, () => OperatingSystem.Windows);\n\t\t\t});\n\n\t\t\ttest('should apply the cwd to the link only when the file exists and cwdDetection is enabled', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, 'c:\\\\Users', localFileOpener, localFolderOpener, () => OperatingSystem.Windows);\n\n\t\t\t\tconst cwd = 'c:\\\\Users\\\\home\\\\folder';\n\t\t\t\tconst absoluteFile = 'c:\\\\Users\\\\home\\\\folder\\\\file.txt';\n\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.file('/c:/Users/home/folder/file.txt')\n\t\t\t\t]);\n\n\t\t\t\t// Set a fake detected command starting as line 0 to establish the cwd\n\t\t\t\tcommandDetection.setCommands([new TerminalCommand(xterm, {\n\t\t\t\t\texitCode: 0,\n\t\t\t\t\tcommandStartLineContent: '',\n\t\t\t\t\tmarkProperties: {},\n\t\t\t\t\tcommand: '',\n\t\t\t\t\tcommandLineConfidence: 'low',\n\t\t\t\t\tisTrusted: true,\n\t\t\t\t\tcwd,\n\t\t\t\t\texecutedX: undefined,\n\t\t\t\t\tstartX: undefined,\n\t\t\t\t\ttimestamp: 0,\n\t\t\t\t\tduration: 0,\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tline: 0\n\t\t\t\t\t} as Partial<IXtermMarker> as any,\n\t\t\t\t})]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: 'file.txt',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/Users/home/folder/file.txt',\n\t\t\t\t\tsource: 'editor'\n\t\t\t\t});\n\n\t\t\t\t// Clear detected commands and ensure the same request results in a search\n\t\t\t\tcommandDetection.setCommands([]);\n\t\t\t\topener.setFileQueryBuilder({ file: () => null! });\n\t\t\t\tsearchService.setSearchResult({\n\t\t\t\t\tmessages: [],\n\t\t\t\t\tresults: [\n\t\t\t\t\t\t{ resource: URI.file(absoluteFile) },\n\t\t\t\t\t\t{ resource: URI.file('/c:/Users/home/folder/other/file.txt') }\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: 'file.txt',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file.txt',\n\t\t\t\t\tsource: 'search'\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract column and/or line numbers from links in a workspace containing spaces', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, 'c:/space folder', localFileOpener, localFolderOpener, () => OperatingSystem.Windows);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: 'c:/space folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/space%20folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/space%20folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:10:5',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/space%20folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:10',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/space%20folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract column and/or line numbers from links and remove trailing periods', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, 'c:/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Windows);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: 'c:/folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:2:5.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 2,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:2.',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 2,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract column and/or line numbers from links and remove grepped lines', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, 'c:/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Windows);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: 'c:/folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5:import { ILoveVSCode } from \\'./foo/bar.ts\\';',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:import { ILoveVSCode } from \\'./foo/bar.ts\\';',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:10:5:import { ILoveVSCode } from \\'./foo/bar.ts\\';',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:10:import { ILoveVSCode } from \\'./foo/bar.ts\\';',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Test for https://github.com/microsoft/vscode/pull/200919#discussion_r1428124196\n\t\t\ttest('should extract column and/or line numbers from links and remove grepped lines incl singular spaces', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, 'c:/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Windows);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: 'c:/folder/foo/bar.txt' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10:5: ',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.txt:10: ',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:10:5: ',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 5,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.txt:10: ',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.txt',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 10,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\ttest('should extract line numbers from links and remove ruby stack traces', async () => {\n\t\t\t\tlocalFileOpener = instantiationService.createInstance(TerminalLocalFileLinkOpener);\n\t\t\t\tconst localFolderOpener = instantiationService.createInstance(TerminalLocalFolderInWorkspaceLinkOpener);\n\t\t\t\topener = instantiationService.createInstance(TestTerminalSearchLinkOpener, capabilities, 'c:/folder', localFileOpener, localFolderOpener, () => OperatingSystem.Windows);\n\t\t\t\tfileService.setFiles([\n\t\t\t\t\tURI.from({ scheme: Schemas.file, path: 'c:/folder/foo/bar.rb' })\n\t\t\t\t]);\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: './foo/bar.rb:30:in `<main>`',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.rb',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1, // Since Ruby doesn't appear to put columns in stack traces, this should be 1\n\t\t\t\t\t\tstartLineNumber: 30,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tawait opener.open({\n\t\t\t\t\ttext: '.\\\\foo\\\\bar.rb:30:in `<main>`',\n\t\t\t\t\tbufferRange: { start: { x: 1, y: 1 }, end: { x: 8, y: 1 } },\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t\t});\n\t\t\t\tdeepStrictEqual(activationResult, {\n\t\t\t\t\tlink: 'file:///c%3A/folder/foo/bar.rb',\n\t\t\t\t\tsource: 'editor',\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartColumn: 1, // Since Ruby doesn't appear to put columns in stack traces, this should be 1\n\t\t\t\t\t\tstartLineNumber: 30,\n\t\t\t\t\t\tendColumn: undefined,\n\t\t\t\t\t\tendLineNumber: undefined\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
