{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalLinkDetectorAdapter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tIBufferLine,\n\tILink,\n\tILinkProvider,\n\tIViewportRange,\n} from \"@xterm/xterm\";\nimport { Emitter } from \"../../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype ITerminalLinkDetector,\n\ttype ITerminalSimpleLink,\n\tTerminalBuiltinLinkType,\n\ttype TerminalLinkType,\n} from \"./links.js\";\nimport { TerminalLink } from \"./terminalLink.js\";\nimport type { XtermLinkMatcherHandler } from \"./terminalLinkManager.js\";\n\nexport interface IActivateLinkEvent {\n\tlink: ITerminalSimpleLink;\n\tevent?: MouseEvent;\n}\n\nexport interface IShowHoverEvent {\n\tlink: TerminalLink;\n\tviewportRange: IViewportRange;\n\tmodifierDownCallback?: () => void;\n\tmodifierUpCallback?: () => void;\n}\n\n/**\n * Wrap a link detector object so it can be used in xterm.js\n */\nexport class TerminalLinkDetectorAdapter\n\textends Disposable\n\timplements ILinkProvider\n{\n\tprivate _activeLinks: TerminalLink[] | undefined;\n\n\tprivate readonly _onDidActivateLink = this._register(\n\t\tnew Emitter<IActivateLinkEvent>(),\n\t);\n\treadonly onDidActivateLink = this._onDidActivateLink.event;\n\tprivate readonly _onDidShowHover = this._register(\n\t\tnew Emitter<IShowHoverEvent>(),\n\t);\n\treadonly onDidShowHover = this._onDidShowHover.event;\n\n\tconstructor(\n\t\tprivate readonly _detector: ITerminalLinkDetector,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate _activeProvideLinkRequests: Map<number, Promise<TerminalLink[]>> =\n\t\tnew Map();\n\tasync provideLinks(\n\t\tbufferLineNumber: number,\n\t\tcallback: (links: ILink[] | undefined) => void,\n\t) {\n\t\tlet activeRequest =\n\t\t\tthis._activeProvideLinkRequests.get(bufferLineNumber);\n\t\tif (activeRequest) {\n\t\t\tawait activeRequest;\n\t\t\tcallback(this._activeLinks);\n\t\t\treturn;\n\t\t}\n\t\tif (this._activeLinks) {\n\t\t\tfor (const link of this._activeLinks) {\n\t\t\t\tlink.dispose();\n\t\t\t}\n\t\t}\n\t\tactiveRequest = this._provideLinks(bufferLineNumber);\n\t\tthis._activeProvideLinkRequests.set(bufferLineNumber, activeRequest);\n\t\tthis._activeLinks = await activeRequest;\n\t\tthis._activeProvideLinkRequests.delete(bufferLineNumber);\n\t\tcallback(this._activeLinks);\n\t}\n\n\tprivate async _provideLinks(\n\t\tbufferLineNumber: number,\n\t): Promise<TerminalLink[]> {\n\t\t// Dispose of all old links if new links are provided, links are only cached for the current line\n\t\tconst links: TerminalLink[] = [];\n\n\t\tlet startLine = bufferLineNumber - 1;\n\t\tlet endLine = startLine;\n\n\t\tconst lines: IBufferLine[] = [\n\t\t\tthis._detector.xterm.buffer.active.getLine(startLine)!,\n\t\t];\n\n\t\t// Cap the maximum context on either side of the line being provided, by taking the context\n\t\t// around the line being provided for this ensures the line the pointer is on will have\n\t\t// links provided.\n\t\tconst maxCharacterContext = Math.max(\n\t\t\tthis._detector.maxLinkLength,\n\t\t\tthis._detector.xterm.cols,\n\t\t);\n\t\tconst maxLineContext = Math.ceil(\n\t\t\tmaxCharacterContext / this._detector.xterm.cols,\n\t\t);\n\t\tconst minStartLine = Math.max(startLine - maxLineContext, 0);\n\t\tconst maxEndLine = Math.min(\n\t\t\tendLine + maxLineContext,\n\t\t\tthis._detector.xterm.buffer.active.length,\n\t\t);\n\n\t\twhile (\n\t\t\tstartLine >= minStartLine &&\n\t\t\tthis._detector.xterm.buffer.active.getLine(startLine)?.isWrapped\n\t\t) {\n\t\t\tlines.unshift(\n\t\t\t\tthis._detector.xterm.buffer.active.getLine(startLine - 1)!,\n\t\t\t);\n\t\t\tstartLine--;\n\t\t}\n\n\t\twhile (\n\t\t\tendLine < maxEndLine &&\n\t\t\tthis._detector.xterm.buffer.active.getLine(endLine + 1)?.isWrapped\n\t\t) {\n\t\t\tlines.push(\n\t\t\t\tthis._detector.xterm.buffer.active.getLine(endLine + 1)!,\n\t\t\t);\n\t\t\tendLine++;\n\t\t}\n\n\t\tconst detectedLinks = await this._detector.detect(\n\t\t\tlines,\n\t\t\tstartLine,\n\t\t\tendLine,\n\t\t);\n\t\tfor (const link of detectedLinks) {\n\t\t\tlinks.push(\n\t\t\t\tthis._createTerminalLink(link, async (event) =>\n\t\t\t\t\tthis._onDidActivateLink.fire({ link, event }),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _createTerminalLink(\n\t\tl: ITerminalSimpleLink,\n\t\tactivateCallback: XtermLinkMatcherHandler,\n\t): TerminalLink {\n\t\t// Remove trailing colon if there is one so the link is more useful\n\t\tif (\n\t\t\t!l.disableTrimColon &&\n\t\t\tl.text.length > 0 &&\n\t\t\tl.text.charAt(l.text.length - 1) === \":\"\n\t\t) {\n\t\t\tl.text = l.text.slice(0, -1);\n\t\t\tl.bufferRange.end.x--;\n\t\t}\n\t\treturn this._instantiationService.createInstance(\n\t\t\tTerminalLink,\n\t\t\tthis._detector.xterm,\n\t\t\tl.bufferRange,\n\t\t\tl.text,\n\t\t\tl.uri,\n\t\t\tl.parsedLink,\n\t\t\tl.actions,\n\t\t\tthis._detector.xterm.buffer.active.viewportY,\n\t\t\tactivateCallback,\n\t\t\t(link, viewportRange, modifierDownCallback, modifierUpCallback) =>\n\t\t\t\tthis._onDidShowHover.fire({\n\t\t\t\t\tlink,\n\t\t\t\t\tviewportRange,\n\t\t\t\t\tmodifierDownCallback,\n\t\t\t\t\tmodifierUpCallback,\n\t\t\t\t}),\n\t\t\tl.type !== TerminalBuiltinLinkType.Search, // Only search is low confidence\n\t\t\tl.label || this._getLabel(l.type),\n\t\t\tl.type,\n\t\t);\n\t}\n\n\tprivate _getLabel(type: TerminalLinkType): string {\n\t\tswitch (type) {\n\t\t\tcase TerminalBuiltinLinkType.Search:\n\t\t\t\treturn localize(\"searchWorkspace\", \"Search workspace\");\n\t\t\tcase TerminalBuiltinLinkType.LocalFile:\n\t\t\t\treturn localize(\"openFile\", \"Open file in editor\");\n\t\t\tcase TerminalBuiltinLinkType.LocalFolderInWorkspace:\n\t\t\t\treturn localize(\"focusFolder\", \"Focus folder in explorer\");\n\t\t\tcase TerminalBuiltinLinkType.LocalFolderOutsideWorkspace:\n\t\t\t\treturn localize(\"openFolder\", \"Open folder in new window\");\n\t\t\tcase TerminalBuiltinLinkType.Url:\n\t\t\tdefault:\n\t\t\t\treturn localize(\"followLink\", \"Follow link\");\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
