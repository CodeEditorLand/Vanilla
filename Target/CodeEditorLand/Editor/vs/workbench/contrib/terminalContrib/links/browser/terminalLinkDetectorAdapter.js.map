{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalLinkDetectorAdapter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../../nls.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ITerminalLinkDetector, ITerminalSimpleLink, TerminalBuiltinLinkType, TerminalLinkType } from './links.js';\nimport { TerminalLink } from './terminalLink.js';\nimport { XtermLinkMatcherHandler } from './terminalLinkManager.js';\nimport type { IBufferLine, ILink, ILinkProvider, IViewportRange } from '@xterm/xterm';\n\nexport interface IActivateLinkEvent {\n\tlink: ITerminalSimpleLink;\n\tevent?: MouseEvent;\n}\n\nexport interface IShowHoverEvent {\n\tlink: TerminalLink;\n\tviewportRange: IViewportRange;\n\tmodifierDownCallback?: () => void;\n\tmodifierUpCallback?: () => void;\n}\n\n/**\n * Wrap a link detector object so it can be used in xterm.js\n */\nexport class TerminalLinkDetectorAdapter extends Disposable implements ILinkProvider {\n\tprivate _activeLinks: TerminalLink[] | undefined;\n\n\tprivate readonly _onDidActivateLink = this._register(new Emitter<IActivateLinkEvent>());\n\treadonly onDidActivateLink = this._onDidActivateLink.event;\n\tprivate readonly _onDidShowHover = this._register(new Emitter<IShowHoverEvent>());\n\treadonly onDidShowHover = this._onDidShowHover.event;\n\n\tconstructor(\n\t\tprivate readonly _detector: ITerminalLinkDetector,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate _activeProvideLinkRequests: Map<number, Promise<TerminalLink[]>> = new Map();\n\tasync provideLinks(bufferLineNumber: number, callback: (links: ILink[] | undefined) => void) {\n\t\tlet activeRequest = this._activeProvideLinkRequests.get(bufferLineNumber);\n\t\tif (activeRequest) {\n\t\t\tawait activeRequest;\n\t\t\tcallback(this._activeLinks);\n\t\t\treturn;\n\t\t}\n\t\tif (this._activeLinks) {\n\t\t\tfor (const link of this._activeLinks) {\n\t\t\t\tlink.dispose();\n\t\t\t}\n\t\t}\n\t\tactiveRequest = this._provideLinks(bufferLineNumber);\n\t\tthis._activeProvideLinkRequests.set(bufferLineNumber, activeRequest);\n\t\tthis._activeLinks = await activeRequest;\n\t\tthis._activeProvideLinkRequests.delete(bufferLineNumber);\n\t\tcallback(this._activeLinks);\n\t}\n\n\tprivate async _provideLinks(bufferLineNumber: number): Promise<TerminalLink[]> {\n\t\t// Dispose of all old links if new links are provided, links are only cached for the current line\n\t\tconst links: TerminalLink[] = [];\n\n\t\tlet startLine = bufferLineNumber - 1;\n\t\tlet endLine = startLine;\n\n\t\tconst lines: IBufferLine[] = [\n\t\t\tthis._detector.xterm.buffer.active.getLine(startLine)!\n\t\t];\n\n\t\t// Cap the maximum context on either side of the line being provided, by taking the context\n\t\t// around the line being provided for this ensures the line the pointer is on will have\n\t\t// links provided.\n\t\tconst maxCharacterContext = Math.max(this._detector.maxLinkLength, this._detector.xterm.cols);\n\t\tconst maxLineContext = Math.ceil(maxCharacterContext / this._detector.xterm.cols);\n\t\tconst minStartLine = Math.max(startLine - maxLineContext, 0);\n\t\tconst maxEndLine = Math.min(endLine + maxLineContext, this._detector.xterm.buffer.active.length);\n\n\t\twhile (startLine >= minStartLine && this._detector.xterm.buffer.active.getLine(startLine)?.isWrapped) {\n\t\t\tlines.unshift(this._detector.xterm.buffer.active.getLine(startLine - 1)!);\n\t\t\tstartLine--;\n\t\t}\n\n\t\twhile (endLine < maxEndLine && this._detector.xterm.buffer.active.getLine(endLine + 1)?.isWrapped) {\n\t\t\tlines.push(this._detector.xterm.buffer.active.getLine(endLine + 1)!);\n\t\t\tendLine++;\n\t\t}\n\n\t\tconst detectedLinks = await this._detector.detect(lines, startLine, endLine);\n\t\tfor (const link of detectedLinks) {\n\t\t\tlinks.push(this._createTerminalLink(link, async (event) => this._onDidActivateLink.fire({ link, event })));\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _createTerminalLink(l: ITerminalSimpleLink, activateCallback: XtermLinkMatcherHandler): TerminalLink {\n\t\t// Remove trailing colon if there is one so the link is more useful\n\t\tif (!l.disableTrimColon && l.text.length > 0 && l.text.charAt(l.text.length - 1) === ':') {\n\t\t\tl.text = l.text.slice(0, -1);\n\t\t\tl.bufferRange.end.x--;\n\t\t}\n\t\treturn this._instantiationService.createInstance(TerminalLink,\n\t\t\tthis._detector.xterm,\n\t\t\tl.bufferRange,\n\t\t\tl.text,\n\t\t\tl.uri,\n\t\t\tl.parsedLink,\n\t\t\tl.actions,\n\t\t\tthis._detector.xterm.buffer.active.viewportY,\n\t\t\tactivateCallback,\n\t\t\t(link, viewportRange, modifierDownCallback, modifierUpCallback) => this._onDidShowHover.fire({\n\t\t\t\tlink,\n\t\t\t\tviewportRange,\n\t\t\t\tmodifierDownCallback,\n\t\t\t\tmodifierUpCallback\n\t\t\t}),\n\t\t\tl.type !== TerminalBuiltinLinkType.Search, // Only search is low confidence\n\t\t\tl.label || this._getLabel(l.type),\n\t\t\tl.type\n\t\t);\n\t}\n\n\tprivate _getLabel(type: TerminalLinkType): string {\n\t\tswitch (type) {\n\t\t\tcase TerminalBuiltinLinkType.Search: return localize('searchWorkspace', 'Search workspace');\n\t\t\tcase TerminalBuiltinLinkType.LocalFile: return localize('openFile', 'Open file in editor');\n\t\t\tcase TerminalBuiltinLinkType.LocalFolderInWorkspace: return localize('focusFolder', 'Focus folder in explorer');\n\t\t\tcase TerminalBuiltinLinkType.LocalFolderOutsideWorkspace: return localize('openFolder', 'Open folder in new window');\n\t\t\tcase TerminalBuiltinLinkType.Url:\n\t\t\tdefault:\n\t\t\t\treturn localize('followLink', 'Follow link');\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,uBAAuB,qBAAqB,yBAAyB,wBAAwB;AACtG,SAAS,oBAAoB;AAC7B,SAAS,+BAA+B;AAkBjC,IAAM,8BAAN,cAA0C,WAAoC;AAAA,EAQpF,YACkB,WACuB,uBACvC;AACD,UAAM;AAHW;AACuB;AAAA,EAGzC;AAAA,EA1CD,OA6BqF;AAAA;AAAA;AAAA,EAC5E;AAAA,EAES,qBAAqB,KAAK,UAAU,IAAI,QAA4B,CAAC;AAAA,EAC7E,oBAAoB,KAAK,mBAAmB;AAAA,EACpC,kBAAkB,KAAK,UAAU,IAAI,QAAyB,CAAC;AAAA,EACvE,iBAAiB,KAAK,gBAAgB;AAAA,EASvC,6BAAmE,oBAAI,IAAI;AAAA,EACnF,MAAM,aAAa,kBAA0B,UAAgD;AAC5F,QAAI,gBAAgB,KAAK,2BAA2B,IAAI,gBAAgB;AACxE,QAAI,eAAe;AAClB,YAAM;AACN,eAAS,KAAK,YAAY;AAC1B;AAAA,IACD;AACA,QAAI,KAAK,cAAc;AACtB,iBAAW,QAAQ,KAAK,cAAc;AACrC,aAAK,QAAQ;AAAA,MACd;AAAA,IACD;AACA,oBAAgB,KAAK,cAAc,gBAAgB;AACnD,SAAK,2BAA2B,IAAI,kBAAkB,aAAa;AACnE,SAAK,eAAe,MAAM;AAC1B,SAAK,2BAA2B,OAAO,gBAAgB;AACvD,aAAS,KAAK,YAAY;AAAA,EAC3B;AAAA,EAEA,MAAc,cAAc,kBAAmD;AAE9E,UAAM,QAAwB,CAAC;AAE/B,QAAI,YAAY,mBAAmB;AACnC,QAAI,UAAU;AAEd,UAAM,QAAuB;AAAA,MAC5B,KAAK,UAAU,MAAM,OAAO,OAAO,QAAQ,SAAS;AAAA,IACrD;AAKA,UAAM,sBAAsB,KAAK,IAAI,KAAK,UAAU,eAAe,KAAK,UAAU,MAAM,IAAI;AAC5F,UAAM,iBAAiB,KAAK,KAAK,sBAAsB,KAAK,UAAU,MAAM,IAAI;AAChF,UAAM,eAAe,KAAK,IAAI,YAAY,gBAAgB,CAAC;AAC3D,UAAM,aAAa,KAAK,IAAI,UAAU,gBAAgB,KAAK,UAAU,MAAM,OAAO,OAAO,MAAM;AAE/F,WAAO,aAAa,gBAAgB,KAAK,UAAU,MAAM,OAAO,OAAO,QAAQ,SAAS,GAAG,WAAW;AACrG,YAAM,QAAQ,KAAK,UAAU,MAAM,OAAO,OAAO,QAAQ,YAAY,CAAC,CAAE;AACxE;AAAA,IACD;AAEA,WAAO,UAAU,cAAc,KAAK,UAAU,MAAM,OAAO,OAAO,QAAQ,UAAU,CAAC,GAAG,WAAW;AAClG,YAAM,KAAK,KAAK,UAAU,MAAM,OAAO,OAAO,QAAQ,UAAU,CAAC,CAAE;AACnE;AAAA,IACD;AAEA,UAAM,gBAAgB,MAAM,KAAK,UAAU,OAAO,OAAO,WAAW,OAAO;AAC3E,eAAW,QAAQ,eAAe;AACjC,YAAM,KAAK,KAAK,oBAAoB,MAAM,OAAO,UAAU,KAAK,mBAAmB,KAAK,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC;AAAA,IAC1G;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,oBAAoB,GAAwB,kBAAyD;AAE5G,QAAI,CAAC,EAAE,oBAAoB,EAAE,KAAK,SAAS,KAAK,EAAE,KAAK,OAAO,EAAE,KAAK,SAAS,CAAC,MAAM,KAAK;AACzF,QAAE,OAAO,EAAE,KAAK,MAAM,GAAG,EAAE;AAC3B,QAAE,YAAY,IAAI;AAAA,IACnB;AACA,WAAO,KAAK,sBAAsB;AAAA,MAAe;AAAA,MAChD,KAAK,UAAU;AAAA,MACf,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,MACF,KAAK,UAAU,MAAM,OAAO,OAAO;AAAA,MACnC;AAAA,MACA,CAAC,MAAM,eAAe,sBAAsB,uBAAuB,KAAK,gBAAgB,KAAK;AAAA,QAC5F;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC;AAAA,MACD,EAAE,SAAS,wBAAwB;AAAA;AAAA,MACnC,EAAE,SAAS,KAAK,UAAU,EAAE,IAAI;AAAA,MAChC,EAAE;AAAA,IACH;AAAA,EACD;AAAA,EAEQ,UAAU,MAAgC;AACjD,YAAQ,MAAM;AAAA,MACb,KAAK,wBAAwB;AAAQ,eAAO,SAAS,mBAAmB,kBAAkB;AAAA,MAC1F,KAAK,wBAAwB;AAAW,eAAO,SAAS,YAAY,qBAAqB;AAAA,MACzF,KAAK,wBAAwB;AAAwB,eAAO,SAAS,eAAe,0BAA0B;AAAA,MAC9G,KAAK,wBAAwB;AAA6B,eAAO,SAAS,cAAc,2BAA2B;AAAA,MACnH,KAAK,wBAAwB;AAAA,MAC7B;AACC,eAAO,SAAS,cAAc,aAAa;AAAA,IAC7C;AAAA,EACD;AACD;AA9Ga,8BAAN;AAAA,EAUJ;AAAA,GAVU;",
  "names": []
}
