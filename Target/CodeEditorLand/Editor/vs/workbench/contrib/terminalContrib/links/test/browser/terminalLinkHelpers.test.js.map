{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/test/browser/terminalLinkHelpers.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport type { IBufferLine, IBufferCell } from '@xterm/xterm';\nimport { convertLinkRangeToBuffer } from '../../browser/terminalLinkHelpers.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\n\nsuite('Workbench - Terminal Link Helpers', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('convertLinkRangeToBuffer', () => {\n\t\ttest('should convert ranges for ascii characters', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/f/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 1 },\n\t\t\t\tend: { x: 7, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A\u6587 http://', width: 11 },\n\t\t\t\t{ text: 't.com/f/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 1 },\n\t\t\t\tend: { x: 7 + 1, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should give correct range for links containing multi-character emoji', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A\uD83D\uDE42 http://', width: 11 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 0 + 1, startLineNumber: 1, endColumn: 2 + 1, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 1, y: 1 },\n\t\t\t\tend: { x: 2, y: 1 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for combining characters before the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A\uD83D\uDE42 http://', width: 11 },\n\t\t\t\t{ text: 't.com/f/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4 + 1, startLineNumber: 1, endColumn: 19 + 1, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 6, y: 1 },\n\t\t\t\tend: { x: 9, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/\u6587/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 1 },\n\t\t\t\tend: { x: 7 + 1, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before and inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A\u6587 http://', width: 11 },\n\t\t\t\t{ text: 't.com/\u6587/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 1 },\n\t\t\t\tend: { x: 7 + 2, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for emoji before and wide inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A\uD83D\uDE42 http://', width: 11 },\n\t\t\t\t{ text: 't.com/\u6587/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4 + 1, startLineNumber: 1, endColumn: 19 + 1, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 6, y: 1 },\n\t\t\t\tend: { x: 10 + 1, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for ascii characters (link starts on wrapped)', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/f/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 2 },\n\t\t\t\tend: { x: 7, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before the link (link starts on wrapped)', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'A\u6587 http://', width: 11 },\n\t\t\t\t{ text: 't.com/f/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 2 },\n\t\t\t\tend: { x: 7 + 1, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('regression test #147619: \u83B7\u53D6\u6A21\u677F 25235168 \u7684\u9884\u89C8\u56FE\u5931\u8D25', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: '\u83B7\u53D6\u6A21\u677F 25235168 \u7684\u9884\u89C8\u56FE\u5931\u8D25', width: 30 }\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(convertLinkRangeToBuffer(lines, 30, {\n\t\t\t\tstartColumn: 1,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: 5,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, 0), {\n\t\t\t\tstart: { x: 1, y: 1 },\n\t\t\t\tend: { x: 8, y: 1 }\n\t\t\t});\n\t\t\tassert.deepStrictEqual(convertLinkRangeToBuffer(lines, 30, {\n\t\t\t\tstartColumn: 6,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: 14,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, 0), {\n\t\t\t\tstart: { x: 10, y: 1 },\n\t\t\t\tend: { x: 17, y: 1 }\n\t\t\t});\n\t\t\tassert.deepStrictEqual(convertLinkRangeToBuffer(lines, 30, {\n\t\t\t\tstartColumn: 15,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: 21,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, 0), {\n\t\t\t\tstart: { x: 19, y: 1 },\n\t\t\t\tend: { x: 30, y: 1 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters inside the link (link starts on wrapped)', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/\u6587/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 2 },\n\t\t\t\tend: { x: 7 + 1, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before and inside the link #2', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'A\u6587 http://', width: 11 },\n\t\t\t\t{ text: 't.com/\u6587/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 2 },\n\t\t\t\tend: { x: 7 + 2, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for several wide characters before the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A\u6587\u6587AAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA\u6587\u6587 http', width: 11 },\n\t\t\t\t{ text: '://t.com/f/', width: 11 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\t// This test ensures that the start offset is applied to the end before it's counted\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 3 + 4, y: 2 },\n\t\t\t\tend: { x: 6 + 4, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for several wide characters before and inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A\u6587\u6587AAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA\u6587\u6587 http', width: 11 },\n\t\t\t\t{ text: '://t.com/\u6587', width: 11 },\n\t\t\t\t{ text: '\u6587/', width: 3 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 14, startLineNumber: 1, endColumn: 31, endLineNumber: 1 }, 0);\n\t\t\t// This test ensures that the start offset is applies to the end before it's counted\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 5, y: 2 },\n\t\t\t\tend: { x: 1, y: 4 }\n\t\t\t});\n\t\t});\n\t});\n});\n\nconst TEST_WIDE_CHAR = '\u6587';\nconst TEST_NULL_CHAR = 'C';\n\nfunction createBufferLineArray(lines: { text: string; width: number }[]): IBufferLine[] {\n\tconst result: IBufferLine[] = [];\n\tlines.forEach((l, i) => {\n\t\tresult.push(new TestBufferLine(\n\t\t\tl.text,\n\t\t\tl.width,\n\t\t\ti + 1 !== lines.length\n\t\t));\n\t});\n\treturn result;\n}\n\nclass TestBufferLine implements IBufferLine {\n\tconstructor(\n\t\tprivate _text: string,\n\t\tpublic length: number,\n\t\tpublic isWrapped: boolean\n\t) {\n\n\t}\n\tgetCell(x: number): IBufferCell | undefined {\n\t\t// Create a fake line of cells and use that to resolve the width\n\t\tconst cells: string[] = [];\n\t\tlet wideNullCellOffset = 0; // There is no null 0 width char after a wide char\n\t\tconst emojiOffset = 0; // Skip chars as emoji are multiple characters\n\t\tfor (let i = 0; i <= x - wideNullCellOffset + emojiOffset; i++) {\n\t\t\tlet char = this._text.charAt(i);\n\t\t\tif (char === '\\ud83d') {\n\t\t\t\t// Make \"\uD83D\uDE42\"\n\t\t\t\tchar += '\\ude42';\n\t\t\t}\n\t\t\tcells.push(char);\n\t\t\tif (this._text.charAt(i) === TEST_WIDE_CHAR || char.charCodeAt(0) > 255) {\n\t\t\t\t// Skip the next character as it's width is 0\n\t\t\t\tcells.push(TEST_NULL_CHAR);\n\t\t\t\twideNullCellOffset++;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tgetChars: () => {\n\t\t\t\treturn x >= cells.length ? '' : cells[x];\n\t\t\t},\n\t\t\tgetWidth: () => {\n\t\t\t\tswitch (cells[x]) {\n\t\t\t\t\tcase TEST_WIDE_CHAR: return 2;\n\t\t\t\t\tcase TEST_NULL_CHAR: return 0;\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t// Naive measurement, assume anything our of ascii in tests are wide\n\t\t\t\t\t\tif (cells[x].charCodeAt(0) > 255) {\n\t\t\t\t\t\t\treturn 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} as any;\n\t}\n\ttranslateToString(): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
