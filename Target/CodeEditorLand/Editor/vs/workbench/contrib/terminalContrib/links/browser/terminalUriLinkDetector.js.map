{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalUriLinkDetector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IBufferLine, Terminal } from \"@xterm/xterm\";\nimport { Schemas } from \"../../../../../base/common/network.js\";\nimport { URI } from \"../../../../../base/common/uri.js\";\nimport {\n\ttype ILinkComputerTarget,\n\tLinkComputer,\n} from \"../../../../../editor/common/languages/linkComputer.js\";\nimport {\n\ttype ITerminalBackend,\n\tITerminalLogService,\n} from \"../../../../../platform/terminal/common/terminal.js\";\nimport { IUriIdentityService } from \"../../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../../platform/workspace/common/workspace.js\";\nimport type { ITerminalProcessManager } from \"../../../terminal/common/terminal.js\";\nimport {\n\ttype ITerminalLinkDetector,\n\ttype ITerminalLinkResolver,\n\ttype ITerminalSimpleLink,\n\tTerminalBuiltinLinkType,\n} from \"./links.js\";\nimport {\n\tconvertLinkRangeToBuffer,\n\tgetXtermLineContent,\n} from \"./terminalLinkHelpers.js\";\n\nenum Constants {\n\t/**\n\t * The maximum number of links in a line to resolve against the file system. This limit is put\n\t * in place to avoid sending excessive data when remote connections are in place.\n\t */\n\tMaxResolvedLinksInLine = 10,\n}\n\nexport class TerminalUriLinkDetector implements ITerminalLinkDetector {\n\tstatic id = \"uri\";\n\n\t// 2048 is the maximum URL length\n\treadonly maxLinkLength = 2048;\n\n\tconstructor(\n\t\treadonly xterm: Terminal,\n\t\tprivate readonly _processManager: Pick<\n\t\t\tITerminalProcessManager,\n\t\t\t\"initialCwd\" | \"os\" | \"remoteAuthority\" | \"userHome\"\n\t\t> & { backend?: Pick<ITerminalBackend, \"getWslPath\"> },\n\t\tprivate readonly _linkResolver: ITerminalLinkResolver,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IUriIdentityService\n\t\tprivate readonly _uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t) {}\n\n\tasync detect(\n\t\tlines: IBufferLine[],\n\t\tstartLine: number,\n\t\tendLine: number,\n\t): Promise<ITerminalSimpleLink[]> {\n\t\tconst links: ITerminalSimpleLink[] = [];\n\n\t\tconst linkComputerTarget = new TerminalLinkAdapter(\n\t\t\tthis.xterm,\n\t\t\tstartLine,\n\t\t\tendLine,\n\t\t);\n\t\tconst computedLinks = LinkComputer.computeLinks(linkComputerTarget);\n\n\t\tlet resolvedLinkCount = 0;\n\t\tthis._logService.trace(\n\t\t\t\"terminalUriLinkDetector#detect computedLinks\",\n\t\t\tcomputedLinks,\n\t\t);\n\t\tfor (const computedLink of computedLinks) {\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(\n\t\t\t\tlines,\n\t\t\t\tthis.xterm.cols,\n\t\t\t\tcomputedLink.range,\n\t\t\t\tstartLine,\n\t\t\t);\n\n\t\t\t// Check if the link is within the mouse position\n\t\t\tconst uri = computedLink.url\n\t\t\t\t? typeof computedLink.url === \"string\"\n\t\t\t\t\t? URI.parse(this._excludeLineAndColSuffix(computedLink.url))\n\t\t\t\t\t: computedLink.url\n\t\t\t\t: undefined;\n\n\t\t\tif (!uri) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst text = computedLink.url?.toString() || \"\";\n\n\t\t\t// Don't try resolve any links of excessive length\n\t\t\tif (text.length > this.maxLinkLength) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Handle non-file scheme links\n\t\t\tif (uri.scheme !== Schemas.file) {\n\t\t\t\tlinks.push({\n\t\t\t\t\ttext,\n\t\t\t\t\turi,\n\t\t\t\t\tbufferRange,\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Url,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Filter out URI with unrecognized authorities\n\t\t\tif (uri.authority.length !== 2 && uri.authority.endsWith(\":\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// As a fallback URI, treat the authority as local to the workspace. This is required\n\t\t\t// for `ls --hyperlink` support for example which includes the hostname in the URI like\n\t\t\t// `file://Some-Hostname/mnt/c/foo/bar`.\n\t\t\tconst uriCandidates: URI[] = [uri];\n\t\t\tif (uri.authority.length > 0) {\n\t\t\t\turiCandidates.push(URI.from({ ...uri, authority: undefined }));\n\t\t\t}\n\n\t\t\t// Iterate over all candidates, pushing the candidate on the first that's verified\n\t\t\tthis._logService.trace(\n\t\t\t\t\"terminalUriLinkDetector#detect uriCandidates\",\n\t\t\t\turiCandidates,\n\t\t\t);\n\t\t\tfor (const uriCandidate of uriCandidates) {\n\t\t\t\tconst linkStat = await this._linkResolver.resolveLink(\n\t\t\t\t\tthis._processManager,\n\t\t\t\t\ttext,\n\t\t\t\t\turiCandidate,\n\t\t\t\t);\n\n\t\t\t\t// Create the link if validated\n\t\t\t\tif (linkStat) {\n\t\t\t\t\tlet type: TerminalBuiltinLinkType;\n\t\t\t\t\tif (linkStat.isDirectory) {\n\t\t\t\t\t\tif (this._isDirectoryInsideWorkspace(uriCandidate)) {\n\t\t\t\t\t\t\ttype =\n\t\t\t\t\t\t\t\tTerminalBuiltinLinkType.LocalFolderInWorkspace;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype =\n\t\t\t\t\t\t\t\tTerminalBuiltinLinkType.LocalFolderOutsideWorkspace;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFile;\n\t\t\t\t\t}\n\t\t\t\t\tconst simpleLink: ITerminalSimpleLink = {\n\t\t\t\t\t\t// Use computedLink.url if it's a string to retain the line/col suffix\n\t\t\t\t\t\ttext:\n\t\t\t\t\t\t\ttypeof computedLink.url === \"string\"\n\t\t\t\t\t\t\t\t? computedLink.url\n\t\t\t\t\t\t\t\t: linkStat.link,\n\t\t\t\t\t\turi: uriCandidate,\n\t\t\t\t\t\tbufferRange,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t};\n\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t\"terminalUriLinkDetector#detect verified link\",\n\t\t\t\t\t\tsimpleLink,\n\t\t\t\t\t);\n\t\t\t\t\tlinks.push(simpleLink);\n\t\t\t\t\tresolvedLinkCount++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Stop early if too many links exist in the line\n\t\t\tif (++resolvedLinkCount >= Constants.MaxResolvedLinksInLine) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _isDirectoryInsideWorkspace(uri: URI) {\n\t\tconst folders = this._workspaceContextService.getWorkspace().folders;\n\t\tfor (let i = 0; i < folders.length; i++) {\n\t\t\tif (\n\t\t\t\tthis._uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\t\turi,\n\t\t\t\t\tfolders[i].uri,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _excludeLineAndColSuffix(path: string): string {\n\t\treturn path.replace(/:\\d+(:\\d+)?$/, \"\");\n\t}\n}\n\nclass TerminalLinkAdapter implements ILinkComputerTarget {\n\tconstructor(\n\t\tprivate _xterm: Terminal,\n\t\tprivate _lineStart: number,\n\t\tprivate _lineEnd: number,\n\t) {}\n\n\tgetLineCount(): number {\n\t\treturn 1;\n\t}\n\n\tgetLineContent(): string {\n\t\treturn getXtermLineContent(\n\t\t\tthis._xterm.buffer.active,\n\t\t\tthis._lineStart,\n\t\t\tthis._lineEnd,\n\t\t\tthis._xterm.cols,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants"]
}
