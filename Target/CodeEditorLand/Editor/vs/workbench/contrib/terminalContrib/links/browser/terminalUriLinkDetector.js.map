{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalUriLinkDetector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ILinkComputerTarget, LinkComputer } from '../../../../../editor/common/languages/linkComputer.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { ITerminalLinkDetector, ITerminalLinkResolver, ITerminalSimpleLink, TerminalBuiltinLinkType } from './links.js';\nimport { convertLinkRangeToBuffer, getXtermLineContent } from './terminalLinkHelpers.js';\nimport { ITerminalProcessManager } from '../../../terminal/common/terminal.js';\nimport type { IBufferLine, Terminal } from '@xterm/xterm';\nimport { ITerminalBackend, ITerminalLogService } from '../../../../../platform/terminal/common/terminal.js';\n\nconst enum Constants {\n\t/**\n\t * The maximum number of links in a line to resolve against the file system. This limit is put\n\t * in place to avoid sending excessive data when remote connections are in place.\n\t */\n\tMaxResolvedLinksInLine = 10\n}\n\nexport class TerminalUriLinkDetector implements ITerminalLinkDetector {\n\tstatic id = 'uri';\n\n\t// 2048 is the maximum URL length\n\treadonly maxLinkLength = 2048;\n\n\tconstructor(\n\t\treadonly xterm: Terminal,\n\t\tprivate readonly _processManager: Pick<ITerminalProcessManager, 'initialCwd' | 'os' | 'remoteAuthority' | 'userHome'> & { backend?: Pick<ITerminalBackend, 'getWslPath'> },\n\t\tprivate readonly _linkResolver: ITerminalLinkResolver,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IUriIdentityService private readonly _uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService\n\t) {\n\t}\n\n\tasync detect(lines: IBufferLine[], startLine: number, endLine: number): Promise<ITerminalSimpleLink[]> {\n\t\tconst links: ITerminalSimpleLink[] = [];\n\n\t\tconst linkComputerTarget = new TerminalLinkAdapter(this.xterm, startLine, endLine);\n\t\tconst computedLinks = LinkComputer.computeLinks(linkComputerTarget);\n\n\t\tlet resolvedLinkCount = 0;\n\t\tthis._logService.trace('terminalUriLinkDetector#detect computedLinks', computedLinks);\n\t\tfor (const computedLink of computedLinks) {\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, this.xterm.cols, computedLink.range, startLine);\n\n\t\t\t// Check if the link is within the mouse position\n\t\t\tconst uri = computedLink.url\n\t\t\t\t? (typeof computedLink.url === 'string' ? URI.parse(this._excludeLineAndColSuffix(computedLink.url)) : computedLink.url)\n\t\t\t\t: undefined;\n\n\t\t\tif (!uri) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst text = computedLink.url?.toString() || '';\n\n\t\t\t// Don't try resolve any links of excessive length\n\t\t\tif (text.length > this.maxLinkLength) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Handle non-file scheme links\n\t\t\tif (uri.scheme !== Schemas.file) {\n\t\t\t\tlinks.push({\n\t\t\t\t\ttext,\n\t\t\t\t\turi,\n\t\t\t\t\tbufferRange,\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Url\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Filter out URI with unrecognized authorities\n\t\t\tif (uri.authority.length !== 2 && uri.authority.endsWith(':')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// As a fallback URI, treat the authority as local to the workspace. This is required\n\t\t\t// for `ls --hyperlink` support for example which includes the hostname in the URI like\n\t\t\t// `file://Some-Hostname/mnt/c/foo/bar`.\n\t\t\tconst uriCandidates: URI[] = [uri];\n\t\t\tif (uri.authority.length > 0) {\n\t\t\t\turiCandidates.push(URI.from({ ...uri, authority: undefined }));\n\t\t\t}\n\n\t\t\t// Iterate over all candidates, pushing the candidate on the first that's verified\n\t\t\tthis._logService.trace('terminalUriLinkDetector#detect uriCandidates', uriCandidates);\n\t\t\tfor (const uriCandidate of uriCandidates) {\n\t\t\t\tconst linkStat = await this._linkResolver.resolveLink(this._processManager, text, uriCandidate);\n\n\t\t\t\t// Create the link if validated\n\t\t\t\tif (linkStat) {\n\t\t\t\t\tlet type: TerminalBuiltinLinkType;\n\t\t\t\t\tif (linkStat.isDirectory) {\n\t\t\t\t\t\tif (this._isDirectoryInsideWorkspace(uriCandidate)) {\n\t\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderInWorkspace;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderOutsideWorkspace;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFile;\n\t\t\t\t\t}\n\t\t\t\t\tconst simpleLink: ITerminalSimpleLink = {\n\t\t\t\t\t\t// Use computedLink.url if it's a string to retain the line/col suffix\n\t\t\t\t\t\ttext: typeof computedLink.url === 'string' ? computedLink.url : linkStat.link,\n\t\t\t\t\t\turi: uriCandidate,\n\t\t\t\t\t\tbufferRange,\n\t\t\t\t\t\ttype\n\t\t\t\t\t};\n\t\t\t\t\tthis._logService.trace('terminalUriLinkDetector#detect verified link', simpleLink);\n\t\t\t\t\tlinks.push(simpleLink);\n\t\t\t\t\tresolvedLinkCount++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Stop early if too many links exist in the line\n\t\t\tif (++resolvedLinkCount >= Constants.MaxResolvedLinksInLine) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _isDirectoryInsideWorkspace(uri: URI) {\n\t\tconst folders = this._workspaceContextService.getWorkspace().folders;\n\t\tfor (let i = 0; i < folders.length; i++) {\n\t\t\tif (this._uriIdentityService.extUri.isEqualOrParent(uri, folders[i].uri)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _excludeLineAndColSuffix(path: string): string {\n\t\treturn path.replace(/:\\d+(:\\d+)?$/, '');\n\t}\n}\n\nclass TerminalLinkAdapter implements ILinkComputerTarget {\n\tconstructor(\n\t\tprivate _xterm: Terminal,\n\t\tprivate _lineStart: number,\n\t\tprivate _lineEnd: number\n\t) { }\n\n\tgetLineCount(): number {\n\t\treturn 1;\n\t}\n\n\tgetLineContent(): string {\n\t\treturn getXtermLineContent(this._xterm.buffer.active, this._lineStart, this._lineEnd, this._xterm.cols);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants"]
}
