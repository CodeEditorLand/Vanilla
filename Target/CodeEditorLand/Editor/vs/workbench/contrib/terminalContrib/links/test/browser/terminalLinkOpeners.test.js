import{deepStrictEqual as r}from"assert";import{Schemas as c}from"../../../../../../base/common/network.js";import{OperatingSystem as f}from"../../../../../../base/common/platform.js";import{URI as s}from"../../../../../../base/common/uri.js";import"../../../../../../platform/editor/common/editor.js";import{IFileService as k}from"../../../../../../platform/files/common/files.js";import{FileService as g}from"../../../../../../platform/files/common/fileService.js";import{TestInstantiationService as N}from"../../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{ILogService as v,NullLogService as w}from"../../../../../../platform/log/common/log.js";import{IQuickInputService as F}from"../../../../../../platform/quickinput/common/quickInput.js";import{IWorkspaceContextService as R}from"../../../../../../platform/workspace/common/workspace.js";import{CommandDetectionCapability as T}from"../../../../../../platform/terminal/common/capabilities/commandDetectionCapability.js";import{TerminalBuiltinLinkType as a}from"../../browser/links.js";import{TerminalLocalFileLinkOpener as m,TerminalLocalFolderInWorkspaceLinkOpener as u,TerminalSearchLinkOpener as O}from"../../browser/terminalLinkOpeners.js";import{TerminalCapability as S}from"../../../../../../platform/terminal/common/capabilities/capabilities.js";import{TerminalCapabilityStore as A}from"../../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js";import{IEditorService as P}from"../../../../../services/editor/common/editorService.js";import{IWorkbenchEnvironmentService as U}from"../../../../../services/environment/common/environmentService.js";import{TestContextService as W}from"../../../../../test/common/workbenchTestServices.js";import{ISearchService as E}from"../../../../../services/search/common/search.js";import{SearchService as D}from"../../../../../services/search/common/searchService.js";import{ITerminalLogService as Q}from"../../../../../../platform/terminal/common/terminal.js";import{importAMDNodeModule as X}from"../../../../../../amdX.js";import{ensureNoDisposablesAreLeakedInTestSuite as M}from"../../../../../../base/test/common/utils.js";import{TerminalCommand as I}from"../../../../../../platform/terminal/common/capabilities/commandDetection/terminalCommand.js";class _ extends T{setCommands(e){this._commands=e}}class B extends g{_files="*";async stat(e){if(this._files==="*"||this._files.some(d=>d.toString()===e.toString()))return{isFile:!0,isDirectory:!1,isSymbolicLink:!1};throw new Error("ENOENT")}setFiles(e){this._files=e}}class V extends D{_searchResult;async fileSearch(e){return this._searchResult}setSearchResult(e){this._searchResult=e}}class x extends O{setFileQueryBuilder(e){this._fileQueryBuilder=e}}suite("Workbench - TerminalLinkOpeners",()=>{const p=M();let e,d,h,n,y;setup(async()=>{e=p.add(new N),d=p.add(new B(new w)),h=p.add(new V(null,null,null,null,null,null,null)),e.set(k,d),e.set(v,new w),e.set(E,h),e.set(R,new W),e.stub(Q,new w),e.stub(U,{remoteAuthority:void 0}),n=void 0,e.stub(F,{quickAccess:{show(l){n={link:l,source:"search"}}}}),e.stub(P,{async openEditor(l){n={source:"editor",link:l.resource?.toString()},l.options?.selection&&(l.options.selection.startColumn!==1||l.options.selection.startLineNumber!==1)&&(n.selection=l.options.selection)}});const t=(await X("@xterm/xterm","lib/xterm.js")).Terminal;y=p.add(new t({allowProposedApi:!0}))}),suite("TerminalSearchLinkOpener",()=>{let t,l,b,i;setup(()=>{l=p.add(new A),b=p.add(e.createInstance(_,y)),l.add(S.CommandDetection,b)}),test("should open single exact match against cwd when searching if it exists when command detection cwd is available",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/initial/cwd",i,o,()=>f.Linux),b.setCommands([new I(y,{command:"",commandLineConfidence:"low",exitCode:0,commandStartLineContent:"",markProperties:{},isTrusted:!0,cwd:"/initial/cwd",timestamp:0,duration:0,executedX:void 0,startX:void 0,marker:{line:0}})]),d.setFiles([s.from({scheme:c.file,path:"/initial/cwd/foo/bar.txt"}),s.from({scheme:c.file,path:"/initial/cwd/foo2/bar.txt"})]),await t.open({text:"foo/bar.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///initial/cwd/foo/bar.txt",source:"editor"})}),test("should open single exact match against cwd for paths containing a separator when searching if it exists, even when command detection isn't available",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/initial/cwd",i,o,()=>f.Linux),d.setFiles([s.from({scheme:c.file,path:"/initial/cwd/foo/bar.txt"}),s.from({scheme:c.file,path:"/initial/cwd/foo2/bar.txt"})]),await t.open({text:"foo/bar.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///initial/cwd/foo/bar.txt",source:"editor"})}),test("should open single exact match against any folder for paths not containing a separator when there is a single search result, even when command detection isn't available",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/initial/cwd",i,o,()=>f.Linux),l.remove(S.CommandDetection),t.setFileQueryBuilder({file:()=>null}),d.setFiles([s.from({scheme:c.file,path:"/initial/cwd/foo/bar.txt"}),s.from({scheme:c.file,path:"/initial/cwd/foo2/baz.txt"})]),h.setSearchResult({messages:[],results:[{resource:s.from({scheme:c.file,path:"/initial/cwd/foo/bar.txt"})}]}),await t.open({text:"bar.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///initial/cwd/foo/bar.txt",source:"editor"})}),test("should open single exact match against any folder for paths not containing a separator when there are multiple search results, even when command detection isn't available",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/initial/cwd",i,o,()=>f.Linux),l.remove(S.CommandDetection),t.setFileQueryBuilder({file:()=>null}),d.setFiles([s.from({scheme:c.file,path:"/initial/cwd/foo/bar.txt"}),s.from({scheme:c.file,path:"/initial/cwd/foo/bar.test.txt"}),s.from({scheme:c.file,path:"/initial/cwd/foo2/bar.test.txt"})]),h.setSearchResult({messages:[],results:[{resource:s.from({scheme:c.file,path:"/initial/cwd/foo/bar.txt"})},{resource:s.from({scheme:c.file,path:"/initial/cwd/foo/bar.test.txt"})},{resource:s.from({scheme:c.file,path:"/initial/cwd/foo2/bar.test.txt"})}]}),await t.open({text:"bar.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///initial/cwd/foo/bar.txt",source:"editor"})}),test("should not open single exact match for paths not containing a when command detection isn't available",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/initial/cwd",i,o,()=>f.Linux),d.setFiles([s.from({scheme:c.file,path:"/initial/cwd/foo/bar.txt"}),s.from({scheme:c.file,path:"/initial/cwd/foo2/bar.txt"})]),await t.open({text:"bar.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"bar.txt",source:"search"})}),suite("macOS/Linux",()=>{setup(()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"",i,o,()=>f.Linux)}),test("should apply the cwd to the link only when the file exists and cwdDetection is enabled",async()=>{const o="/Users/home/folder";d.setFiles([s.from({scheme:c.file,path:"/Users/home/folder/file.txt"}),s.from({scheme:c.file,path:"/Users/home/folder/other/file.txt"})]),b.setCommands([new I(y,{command:"",commandLineConfidence:"low",isTrusted:!0,cwd:o,timestamp:0,duration:0,executedX:void 0,startX:void 0,marker:{line:0},exitCode:0,commandStartLineContent:"",markProperties:{}})]),await t.open({text:"file.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///Users/home/folder/file.txt",source:"editor"}),b.setCommands([]),t.setFileQueryBuilder({file:()=>null}),h.setSearchResult({messages:[],results:[{resource:s.from({scheme:c.file,path:"file:///Users/home/folder/file.txt"})},{resource:s.from({scheme:c.file,path:"file:///Users/home/folder/other/file.txt"})}]}),await t.open({text:"file.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file.txt",source:"search"})}),test("should extract column and/or line numbers from links in a workspace containing spaces",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/space folder",i,o,()=>f.Linux),d.setFiles([s.from({scheme:c.file,path:"/space folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt:10:5",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///space%20folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///space%20folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}})}),test("should extract column and/or line numbers from links and remove trailing periods",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/folder",i,o,()=>f.Linux),d.setFiles([s.from({scheme:c.file,path:"/folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.txt",source:"editor"}),await t.open({text:"./foo/bar.txt:10:5.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}})}),test("should extract column and/or line numbers from links and remove grepped lines",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/folder",i,o,()=>f.Linux),d.setFiles([s.from({scheme:c.file,path:"/folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt:10:5:import { ILoveVSCode } from './foo/bar.ts';",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10:import { ILoveVSCode } from './foo/bar.ts';",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}})}),test("should extract column and/or line numbers from links and remove grepped lines incl singular spaces",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/folder",i,o,()=>f.Linux),d.setFiles([s.from({scheme:c.file,path:"/folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt:10:5: ",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10: ",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}})}),test("should extract line numbers from links and remove ruby stack traces",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"/folder",i,o,()=>f.Linux),d.setFiles([s.from({scheme:c.file,path:"/folder/foo/bar.rb"})]),await t.open({text:"./foo/bar.rb:30:in `<main>`",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///folder/foo/bar.rb",source:"editor",selection:{startColumn:1,startLineNumber:30,endColumn:void 0,endLineNumber:void 0}})})}),suite("Windows",()=>{setup(()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"",i,o,()=>f.Windows)}),test("should apply the cwd to the link only when the file exists and cwdDetection is enabled",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"c:\\Users",i,o,()=>f.Windows);const L="c:\\Users\\home\\folder",C="c:\\Users\\home\\folder\\file.txt";d.setFiles([s.file("/c:/Users/home/folder/file.txt")]),b.setCommands([new I(y,{exitCode:0,commandStartLineContent:"",markProperties:{},command:"",commandLineConfidence:"low",isTrusted:!0,cwd:L,executedX:void 0,startX:void 0,timestamp:0,duration:0,marker:{line:0}})]),await t.open({text:"file.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/Users/home/folder/file.txt",source:"editor"}),b.setCommands([]),t.setFileQueryBuilder({file:()=>null}),h.setSearchResult({messages:[],results:[{resource:s.file(C)},{resource:s.file("/c:/Users/home/folder/other/file.txt")}]}),await t.open({text:"file.txt",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file.txt",source:"search"})}),test("should extract column and/or line numbers from links in a workspace containing spaces",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"c:/space folder",i,o,()=>f.Windows),d.setFiles([s.from({scheme:c.file,path:"c:/space folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt:10:5",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/space%20folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/space%20folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt:10:5",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/space%20folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt:10",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/space%20folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}})}),test("should extract column and/or line numbers from links and remove trailing periods",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"c:/folder",i,o,()=>f.Windows),d.setFiles([s.from({scheme:c.file,path:"c:/folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor"}),await t.open({text:"./foo/bar.txt:10:5.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor"}),await t.open({text:".\\foo\\bar.txt:2:5.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:2,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt:2.",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:2,endColumn:void 0,endLineNumber:void 0}})}),test("should extract column and/or line numbers from links and remove grepped lines",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"c:/folder",i,o,()=>f.Windows),d.setFiles([s.from({scheme:c.file,path:"c:/folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt:10:5:import { ILoveVSCode } from './foo/bar.ts';",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10:import { ILoveVSCode } from './foo/bar.ts';",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt:10:5:import { ILoveVSCode } from './foo/bar.ts';",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt:10:import { ILoveVSCode } from './foo/bar.ts';",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}})}),test("should extract column and/or line numbers from links and remove grepped lines incl singular spaces",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"c:/folder",i,o,()=>f.Windows),d.setFiles([s.from({scheme:c.file,path:"c:/folder/foo/bar.txt"})]),await t.open({text:"./foo/bar.txt:10:5: ",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:"./foo/bar.txt:10: ",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt:10:5: ",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:5,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.txt:10: ",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.txt",source:"editor",selection:{startColumn:1,startLineNumber:10,endColumn:void 0,endLineNumber:void 0}})}),test("should extract line numbers from links and remove ruby stack traces",async()=>{i=e.createInstance(m);const o=e.createInstance(u);t=e.createInstance(x,l,"c:/folder",i,o,()=>f.Windows),d.setFiles([s.from({scheme:c.file,path:"c:/folder/foo/bar.rb"})]),await t.open({text:"./foo/bar.rb:30:in `<main>`",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.rb",source:"editor",selection:{startColumn:1,startLineNumber:30,endColumn:void 0,endLineNumber:void 0}}),await t.open({text:".\\foo\\bar.rb:30:in `<main>`",bufferRange:{start:{x:1,y:1},end:{x:8,y:1}},type:a.Search}),r(n,{link:"file:///c%3A/folder/foo/bar.rb",source:"editor",selection:{startColumn:1,startLineNumber:30,endColumn:void 0,endLineNumber:void 0}})})})})});
