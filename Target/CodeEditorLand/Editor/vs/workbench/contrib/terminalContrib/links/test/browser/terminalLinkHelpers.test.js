import n from"assert";import{convertLinkRangeToBuffer as r}from"../../browser/terminalLinkHelpers.js";import{ensureNoDisposablesAreLeakedInTestSuite as h}from"../../../../../../base/test/common/utils.js";suite("Workbench - Terminal Link Helpers",()=>{h(),suite("convertLinkRangeToBuffer",()=>{test("should convert ranges for ascii characters",()=>{const e=s([{text:"AA http://t",width:11},{text:".com/f/",width:8}]),t=r(e,11,{startColumn:4,startLineNumber:1,endColumn:19,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:4,y:1},end:{x:7,y:2}})}),test("should convert ranges for wide characters before the link",()=>{const e=s([{text:"A\u6587 http://",width:11},{text:"t.com/f/",width:9}]),t=r(e,11,{startColumn:4,startLineNumber:1,endColumn:19,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:5,y:1},end:{x:8,y:2}})}),test("should give correct range for links containing multi-character emoji",()=>{const e=s([{text:"A\u{1F642} http://",width:11}]),t=r(e,11,{startColumn:1,startLineNumber:1,endColumn:3,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:1,y:1},end:{x:2,y:1}})}),test("should convert ranges for combining characters before the link",()=>{const e=s([{text:"A\u{1F642} http://",width:11},{text:"t.com/f/",width:9}]),t=r(e,11,{startColumn:5,startLineNumber:1,endColumn:20,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:6,y:1},end:{x:9,y:2}})}),test("should convert ranges for wide characters inside the link",()=>{const e=s([{text:"AA http://t",width:11},{text:".com/\u6587/",width:8}]),t=r(e,11,{startColumn:4,startLineNumber:1,endColumn:19,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:4,y:1},end:{x:8,y:2}})}),test("should convert ranges for wide characters before and inside the link",()=>{const e=s([{text:"A\u6587 http://",width:11},{text:"t.com/\u6587/",width:9}]),t=r(e,11,{startColumn:4,startLineNumber:1,endColumn:19,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:5,y:1},end:{x:9,y:2}})}),test("should convert ranges for emoji before and wide inside the link",()=>{const e=s([{text:"A\u{1F642} http://",width:11},{text:"t.com/\u6587/",width:9}]),t=r(e,11,{startColumn:5,startLineNumber:1,endColumn:20,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:6,y:1},end:{x:11,y:2}})}),test("should convert ranges for ascii characters (link starts on wrapped)",()=>{const e=s([{text:"AAAAAAAAAAA",width:11},{text:"AA http://t",width:11},{text:".com/f/",width:8}]),t=r(e,11,{startColumn:15,startLineNumber:1,endColumn:30,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:4,y:2},end:{x:7,y:3}})}),test("should convert ranges for wide characters before the link (link starts on wrapped)",()=>{const e=s([{text:"AAAAAAAAAAA",width:11},{text:"A\u6587 http://",width:11},{text:"t.com/f/",width:9}]),t=r(e,11,{startColumn:15,startLineNumber:1,endColumn:30,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:5,y:2},end:{x:8,y:3}})}),test("regression test #147619: \u83B7\u53D6\u6A21\u677F 25235168 \u7684\u9884\u89C8\u56FE\u5931\u8D25",()=>{const e=s([{text:"\u83B7\u53D6\u6A21\u677F 25235168 \u7684\u9884\u89C8\u56FE\u5931\u8D25",width:30}]);n.deepStrictEqual(r(e,30,{startColumn:1,startLineNumber:1,endColumn:5,endLineNumber:1},0),{start:{x:1,y:1},end:{x:8,y:1}}),n.deepStrictEqual(r(e,30,{startColumn:6,startLineNumber:1,endColumn:14,endLineNumber:1},0),{start:{x:10,y:1},end:{x:17,y:1}}),n.deepStrictEqual(r(e,30,{startColumn:15,startLineNumber:1,endColumn:21,endLineNumber:1},0),{start:{x:19,y:1},end:{x:30,y:1}})}),test("should convert ranges for wide characters inside the link (link starts on wrapped)",()=>{const e=s([{text:"AAAAAAAAAAA",width:11},{text:"AA http://t",width:11},{text:".com/\u6587/",width:8}]),t=r(e,11,{startColumn:15,startLineNumber:1,endColumn:30,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:4,y:2},end:{x:8,y:3}})}),test("should convert ranges for wide characters before and inside the link #2",()=>{const e=s([{text:"AAAAAAAAAAA",width:11},{text:"A\u6587 http://",width:11},{text:"t.com/\u6587/",width:9}]),t=r(e,11,{startColumn:15,startLineNumber:1,endColumn:30,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:5,y:2},end:{x:9,y:3}})}),test("should convert ranges for several wide characters before the link",()=>{const e=s([{text:"A\u6587\u6587AAAAAA",width:11},{text:"AA\u6587\u6587 http",width:11},{text:"://t.com/f/",width:11}]),t=r(e,11,{startColumn:15,startLineNumber:1,endColumn:30,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:7,y:2},end:{x:10,y:3}})}),test("should convert ranges for several wide characters before and inside the link",()=>{const e=s([{text:"A\u6587\u6587AAAAAA",width:11},{text:"AA\u6587\u6587 http",width:11},{text:"://t.com/\u6587",width:11},{text:"\u6587/",width:3}]),t=r(e,11,{startColumn:14,startLineNumber:1,endColumn:31,endLineNumber:1},0);n.deepStrictEqual(t,{start:{x:5,y:2},end:{x:1,y:4}})})})});const u="\u6587",c="C";function s(e){const t=[];return e.forEach((i,o)=>{t.push(new m(i.text,i.width,o+1!==e.length))}),t}class m{constructor(t,i,o){this._text=t;this.length=i;this.isWrapped=o}getCell(t){const i=[];let o=0;const l=0;for(let a=0;a<=t-o+l;a++){let d=this._text.charAt(a);d==="\uD83D"&&(d+="\uDE42"),i.push(d),(this._text.charAt(a)===u||d.charCodeAt(0)>255)&&(i.push(c),o++)}return{getChars:()=>t>=i.length?"":i[t],getWidth:()=>{switch(i[t]){case u:return 2;case c:return 0;default:return i[t].charCodeAt(0)>255?2:1}}}}translateToString(){throw new Error("Method not implemented.")}}
