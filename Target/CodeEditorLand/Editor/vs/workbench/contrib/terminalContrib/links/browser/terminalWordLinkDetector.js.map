{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalWordLinkDetector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../../base/common/strings.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { matchesScheme } from '../../../../../base/common/network.js';\nimport { IProductService } from '../../../../../platform/product/common/productService.js';\nimport { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\nimport { ITerminalSimpleLink, ITerminalLinkDetector, TerminalBuiltinLinkType } from './links.js';\nimport { convertLinkRangeToBuffer, getXtermLineContent } from './terminalLinkHelpers.js';\nimport { ITerminalConfiguration, TERMINAL_CONFIG_SECTION } from '../../../terminal/common/terminal.js';\nimport type { IBufferLine, Terminal } from '@xterm/xterm';\n\nconst enum Constants {\n\t/**\n\t * The max line length to try extract word links from.\n\t */\n\tMaxLineLength = 2000\n}\n\ninterface Word {\n\tstartIndex: number;\n\tendIndex: number;\n\ttext: string;\n}\n\nexport class TerminalWordLinkDetector extends Disposable implements ITerminalLinkDetector {\n\tstatic id = 'word';\n\n\t// Word links typically search the workspace so it makes sense that their maximum link length is\n\t// quite small.\n\treadonly maxLinkLength = 100;\n\n\tprivate _separatorRegex!: RegExp;\n\n\tconstructor(\n\t\treadonly xterm: Terminal,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tthis._refreshSeparatorCodes();\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.WordSeparators)) {\n\t\t\t\tthis._refreshSeparatorCodes();\n\t\t\t}\n\t\t}));\n\t}\n\n\tdetect(lines: IBufferLine[], startLine: number, endLine: number): ITerminalSimpleLink[] {\n\t\tconst links: ITerminalSimpleLink[] = [];\n\n\t\t// Get the text representation of the wrapped line\n\t\tconst text = getXtermLineContent(this.xterm.buffer.active, startLine, endLine, this.xterm.cols);\n\t\tif (text === '' || text.length > Constants.MaxLineLength) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Parse out all words from the wrapped line\n\t\tconst words: Word[] = this._parseWords(text);\n\n\t\t// Map the words to ITerminalLink objects\n\t\tfor (const word of words) {\n\t\t\tif (word.text === '') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (word.text.length > 0 && word.text.charAt(word.text.length - 1) === ':') {\n\t\t\t\tword.text = word.text.slice(0, -1);\n\t\t\t\tword.endIndex--;\n\t\t\t}\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(\n\t\t\t\tlines,\n\t\t\t\tthis.xterm.cols,\n\t\t\t\t{\n\t\t\t\t\tstartColumn: word.startIndex + 1,\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tendColumn: word.endIndex + 1,\n\t\t\t\t\tendLineNumber: 1\n\t\t\t\t},\n\t\t\t\tstartLine\n\t\t\t);\n\n\t\t\t// Support this product's URL protocol\n\t\t\tif (matchesScheme(word.text, this._productService.urlProtocol)) {\n\t\t\t\tconst uri = URI.parse(word.text);\n\t\t\t\tif (uri) {\n\t\t\t\t\tlinks.push({\n\t\t\t\t\t\ttext: word.text,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\tbufferRange,\n\t\t\t\t\t\ttype: TerminalBuiltinLinkType.Url\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Search links\n\t\t\tlinks.push({\n\t\t\t\ttext: word.text,\n\t\t\t\tbufferRange,\n\t\t\t\ttype: TerminalBuiltinLinkType.Search,\n\t\t\t\tcontextLine: text\n\t\t\t});\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _parseWords(text: string): Word[] {\n\t\tconst words: Word[] = [];\n\t\tconst splitWords = text.split(this._separatorRegex);\n\t\tlet runningIndex = 0;\n\t\tfor (let i = 0; i < splitWords.length; i++) {\n\t\t\twords.push({\n\t\t\t\ttext: splitWords[i],\n\t\t\t\tstartIndex: runningIndex,\n\t\t\t\tendIndex: runningIndex + splitWords[i].length\n\t\t\t});\n\t\t\trunningIndex += splitWords[i].length + 1;\n\t\t}\n\t\treturn words;\n\t}\n\n\tprivate _refreshSeparatorCodes(): void {\n\t\tconst separators = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION).wordSeparators;\n\t\tlet powerlineSymbols = '';\n\t\tfor (let i = 0xe0b0; i <= 0xe0bf; i++) {\n\t\t\tpowerlineSymbols += String.fromCharCode(i);\n\t\t}\n\t\tthis._separatorRegex = new RegExp(`[${escapeRegExpCharacters(separators)}${powerlineSymbols}]`, 'g');\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants"]
}
