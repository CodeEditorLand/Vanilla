{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/terminalLinkOpeners.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { OperatingSystem } from '../../../../../base/common/platform.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { ITextEditorSelection } from '../../../../../platform/editor/common/editor.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { IQuickInputService } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { ITerminalLinkOpener, ITerminalSimpleLink } from './links.js';\nimport { osPathModule, updateLinkWithRelativeCwd } from './terminalLinkHelpers.js';\nimport { ITerminalCapabilityStore, TerminalCapability } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { IWorkbenchEnvironmentService } from '../../../../services/environment/common/environmentService.js';\nimport { IHostService } from '../../../../services/host/browser/host.js';\nimport { QueryBuilder } from '../../../../services/search/common/queryBuilder.js';\nimport { ISearchService } from '../../../../services/search/common/search.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { detectLinks, getLinkSuffix } from './terminalLinkParsing.js';\nimport { ITerminalLogService } from '../../../../../platform/terminal/common/terminal.js';\n\nexport class TerminalLocalFileLinkOpener implements ITerminalLinkOpener {\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open file link without a resolved URI');\n\t\t}\n\t\tconst linkSuffix = link.parsedLink ? link.parsedLink.suffix : getLinkSuffix(link.text);\n\t\tlet selection: ITextEditorSelection | undefined = link.selection;\n\t\tif (!selection) {\n\t\t\tselection = linkSuffix?.row === undefined ? undefined : {\n\t\t\t\tstartLineNumber: linkSuffix.row ?? 1,\n\t\t\t\tstartColumn: linkSuffix.col ?? 1,\n\t\t\t\tendLineNumber: linkSuffix.rowEnd,\n\t\t\t\tendColumn: linkSuffix.colEnd\n\t\t\t};\n\t\t}\n\t\tawait this._editorService.openEditor({\n\t\t\tresource: link.uri,\n\t\t\toptions: { pinned: true, selection, revealIfOpened: true }\n\t\t});\n\t}\n}\n\nexport class TerminalLocalFolderInWorkspaceLinkOpener implements ITerminalLinkOpener {\n\tconstructor(@ICommandService private readonly _commandService: ICommandService) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open folder in workspace link without a resolved URI');\n\t\t}\n\t\tawait this._commandService.executeCommand('revealInExplorer', link.uri);\n\t}\n}\n\nexport class TerminalLocalFolderOutsideWorkspaceLinkOpener implements ITerminalLinkOpener {\n\tconstructor(@IHostService private readonly _hostService: IHostService) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open folder in workspace link without a resolved URI');\n\t\t}\n\t\tthis._hostService.openWindow([{ folderUri: link.uri }], { forceNewWindow: true });\n\t}\n}\n\nexport class TerminalSearchLinkOpener implements ITerminalLinkOpener {\n\tprotected _fileQueryBuilder = this._instantiationService.createInstance(QueryBuilder);\n\n\tconstructor(\n\t\tprivate readonly _capabilities: ITerminalCapabilityStore,\n\t\tprivate readonly _initialCwd: string,\n\t\tprivate readonly _localFileOpener: TerminalLocalFileLinkOpener,\n\t\tprivate readonly _localFolderInWorkspaceOpener: TerminalLocalFolderInWorkspaceLinkOpener,\n\t\tprivate readonly _getOS: () => OperatingSystem,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@ISearchService private readonly _searchService: ISearchService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkbenchEnvironmentService private readonly _workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tconst osPath = osPathModule(this._getOS());\n\t\tconst pathSeparator = osPath.sep;\n\n\t\t// Remove file:/// and any leading ./ or ../ since quick access doesn't understand that format\n\t\tlet text = link.text.replace(/^file:\\/\\/\\/?/, '');\n\t\ttext = osPath.normalize(text).replace(/^(\\.+[\\\\/])+/, '');\n\n\t\t// Try extract any trailing line and column numbers by matching the text against parsed\n\t\t// links. This will give a search link `foo` on a line like `\"foo\", line 10` to open the\n\t\t// quick pick with `foo:10` as the contents.\n\t\t//\n\t\t// This also normalizes the path to remove suffixes like :10 or :5.0-4\n\t\tif (link.contextLine) {\n\t\t\tconst parsedLinks = detectLinks(link.contextLine, this._getOS());\n\t\t\t// Optimistically check that the link _starts with_ the parsed link text. If so,\n\t\t\t// continue to use the parsed link\n\t\t\tconst matchingParsedLink = parsedLinks.find(parsedLink => parsedLink.suffix && link.text.startsWith(parsedLink.path.text));\n\t\t\tif (matchingParsedLink) {\n\t\t\t\tif (matchingParsedLink.suffix?.row !== undefined) {\n\t\t\t\t\t// Normalize the path based on the parsed link\n\t\t\t\t\ttext = matchingParsedLink.path.text;\n\t\t\t\t\ttext += `:${matchingParsedLink.suffix.row}`;\n\t\t\t\t\tif (matchingParsedLink.suffix?.col !== undefined) {\n\t\t\t\t\t\ttext += `:${matchingParsedLink.suffix.col}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove `:<one or more non number characters>` from the end of the link.\n\t\t// Examples:\n\t\t// - Ruby stack traces: <link>:in ...\n\t\t// - Grep output: <link>:<result line>\n\t\t// This only happens when the colon is _not_ followed by a forward- or back-slash as that\n\t\t// would break absolute Windows paths (eg. `C:/Users/...`).\n\t\ttext = text.replace(/:[^\\\\/\\d][^\\d]*$/, '');\n\n\t\t// Remove any trailing periods after the line/column numbers, to prevent breaking the search feature, #200257\n\t\t// Examples:\n\t\t// \"Check your code Test.tsx:12:45.\" -> Test.tsx:12:45\n\t\t// \"Check your code Test.tsx:12.\" -> Test.tsx:12\n\n\t\ttext = text.replace(/\\.$/, '');\n\n\t\t// If any of the names of the folders in the workspace matches\n\t\t// a prefix of the link, remove that prefix and continue\n\t\tthis._workspaceContextService.getWorkspace().folders.forEach((folder) => {\n\t\t\tif (text.substring(0, folder.name.length + 1) === folder.name + pathSeparator) {\n\t\t\t\ttext = text.substring(folder.name.length + 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\t\tlet cwdResolvedText = text;\n\t\tif (this._capabilities.has(TerminalCapability.CommandDetection)) {\n\t\t\tcwdResolvedText = updateLinkWithRelativeCwd(this._capabilities, link.bufferRange.start.y, text, osPath, this._logService)?.[0] || text;\n\t\t}\n\n\t\t// Try open the cwd resolved link first\n\t\tif (await this._tryOpenExactLink(cwdResolvedText, link)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the cwd resolved text didn't match, try find the link without the cwd resolved, for\n\t\t// example when a command prints paths in a sub-directory of the current cwd\n\t\tif (text !== cwdResolvedText) {\n\t\t\tif (await this._tryOpenExactLink(text, link)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to searching quick access\n\t\treturn this._quickInputService.quickAccess.show(text);\n\t}\n\n\tprivate async _getExactMatch(sanitizedLink: string): Promise<IResourceMatch | undefined> {\n\t\t// Make the link relative to the cwd if it isn't absolute\n\t\tconst os = this._getOS();\n\t\tconst pathModule = osPathModule(os);\n\t\tconst isAbsolute = pathModule.isAbsolute(sanitizedLink);\n\t\tlet absolutePath: string | undefined = isAbsolute ? sanitizedLink : undefined;\n\t\tif (!isAbsolute && this._initialCwd.length > 0) {\n\t\t\tabsolutePath = pathModule.join(this._initialCwd, sanitizedLink);\n\t\t}\n\n\t\t// Try open as an absolute link\n\t\tlet resourceMatch: IResourceMatch | undefined;\n\t\tif (absolutePath) {\n\t\t\tlet normalizedAbsolutePath: string = absolutePath;\n\t\t\tif (os === OperatingSystem.Windows) {\n\t\t\t\tnormalizedAbsolutePath = absolutePath.replace(/\\\\/g, '/');\n\t\t\t\tif (normalizedAbsolutePath.match(/[a-z]:/i)) {\n\t\t\t\t\tnormalizedAbsolutePath = `/${normalizedAbsolutePath}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet uri: URI;\n\t\t\tif (this._workbenchEnvironmentService.remoteAuthority) {\n\t\t\t\turi = URI.from({\n\t\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\t\tauthority: this._workbenchEnvironmentService.remoteAuthority,\n\t\t\t\t\tpath: normalizedAbsolutePath\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\turi = URI.file(normalizedAbsolutePath);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst fileStat = await this._fileService.stat(uri);\n\t\t\t\tresourceMatch = { uri, isDirectory: fileStat.isDirectory };\n\t\t\t} catch {\n\t\t\t\t// File or dir doesn't exist, continue on\n\t\t\t}\n\t\t}\n\n\t\t// Search the workspace if an exact match based on the absolute path was not found\n\t\tif (!resourceMatch) {\n\t\t\tconst results = await this._searchService.fileSearch(\n\t\t\t\tthis._fileQueryBuilder.file(this._workspaceContextService.getWorkspace().folders, {\n\t\t\t\t\tfilePattern: sanitizedLink,\n\t\t\t\t\tmaxResults: 2\n\t\t\t\t})\n\t\t\t);\n\t\t\tif (results.results.length > 0) {\n\t\t\t\tif (results.results.length === 1) {\n\t\t\t\t\t// If there's exactly 1 search result, return it regardless of whether it's\n\t\t\t\t\t// exact or partial.\n\t\t\t\t\tresourceMatch = { uri: results.results[0].resource };\n\t\t\t\t} else if (!isAbsolute) {\n\t\t\t\t\t// For non-absolute links, exact link matching is allowed only if there is a single an exact\n\t\t\t\t\t// file match. For example searching for `foo.txt` when there is no cwd information\n\t\t\t\t\t// available (ie. only the initial cwd) should open the file directly only if there is a\n\t\t\t\t\t// single file names `foo.txt` anywhere within the folder. These same rules apply to\n\t\t\t\t\t// relative paths with folders such as `src/foo.txt`.\n\t\t\t\t\tconst results = await this._searchService.fileSearch(\n\t\t\t\t\t\tthis._fileQueryBuilder.file(this._workspaceContextService.getWorkspace().folders, {\n\t\t\t\t\t\t\tfilePattern: `**/${sanitizedLink}`\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\t// Find an exact match if it exists\n\t\t\t\t\tconst exactMatches = results.results.filter(e => e.resource.toString().endsWith(sanitizedLink));\n\t\t\t\t\tif (exactMatches.length === 1) {\n\t\t\t\t\t\tresourceMatch = { uri: exactMatches[0].resource };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn resourceMatch;\n\t}\n\n\tprivate async _tryOpenExactLink(text: string, link: ITerminalSimpleLink): Promise<boolean> {\n\t\tconst sanitizedLink = text.replace(/:\\d+(:\\d+)?$/, '');\n\t\ttry {\n\t\t\tconst result = await this._getExactMatch(sanitizedLink);\n\t\t\tif (result) {\n\t\t\t\tconst { uri, isDirectory } = result;\n\t\t\t\tconst linkToOpen = {\n\t\t\t\t\t// Use the absolute URI's path here so the optional line/col get detected\n\t\t\t\t\ttext: result.uri.path + (text.match(/:\\d+(:\\d+)?$/)?.[0] || ''),\n\t\t\t\t\turi,\n\t\t\t\t\tbufferRange: link.bufferRange,\n\t\t\t\t\ttype: link.type\n\t\t\t\t};\n\t\t\t\tif (uri) {\n\t\t\t\t\tawait (isDirectory ? this._localFolderInWorkspaceOpener.open(linkToOpen) : this._localFileOpener.open(linkToOpen));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n}\n\ninterface IResourceMatch {\n\turi: URI;\n\tisDirectory?: boolean;\n}\n\nexport class TerminalUrlLinkOpener implements ITerminalLinkOpener {\n\tconstructor(\n\t\tprivate readonly _isRemote: boolean,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open a url without a resolved URI');\n\t\t}\n\t\t// It's important to use the raw string value here to avoid converting pre-encoded values\n\t\t// from the URL like `%2B` -> `+`.\n\t\tthis._openerService.open(link.text, {\n\t\t\tallowTunneling: this._isRemote && this._configurationService.getValue('remote.forwardOnOpen'),\n\t\t\tallowContributedOpeners: true,\n\t\t\topenExternal: true\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["results"]
}
