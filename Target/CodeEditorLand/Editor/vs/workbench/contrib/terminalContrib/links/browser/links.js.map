{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/links/browser/links.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IBufferLine, IBufferRange, Terminal } from \"@xterm/xterm\";\nimport type { IHoverAction } from \"../../../../../base/browser/ui/hover/hover.js\";\nimport type { Event } from \"../../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport type { ITextEditorSelection } from \"../../../../../platform/editor/common/editor.js\";\nimport { createDecorator } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport type { ITerminalBackend } from \"../../../../../platform/terminal/common/terminal.js\";\nimport type { ITerminalExternalLinkProvider } from \"../../../terminal/browser/terminal.js\";\nimport type { ITerminalProcessManager } from \"../../../terminal/common/terminal.js\";\nimport type { IParsedLink } from \"./terminalLinkParsing.js\";\n\nexport const ITerminalLinkProviderService =\n\tcreateDecorator<ITerminalLinkProviderService>(\n\t\t\"terminalLinkProviderService\",\n\t);\nexport interface ITerminalLinkProviderService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly linkProviders: ReadonlySet<ITerminalExternalLinkProvider>;\n\n\treadonly onDidAddLinkProvider: Event<ITerminalExternalLinkProvider>;\n\treadonly onDidRemoveLinkProvider: Event<ITerminalExternalLinkProvider>;\n\n\t// TODO: Currently only a single link provider is supported; the one registered by the ext host\n\tregisterLinkProvider(provider: ITerminalExternalLinkProvider): IDisposable;\n}\n\nexport interface ITerminalLinkResolver {\n\tresolveLink(\n\t\tprocessManager: Pick<\n\t\t\tITerminalProcessManager,\n\t\t\t\"initialCwd\" | \"os\" | \"remoteAuthority\" | \"userHome\"\n\t\t> & { backend?: Pick<ITerminalBackend, \"getWslPath\"> },\n\t\tlink: string,\n\t\turi?: URI,\n\t): Promise<ResolvedLink>;\n}\n\n/**\n * A link detector can search for and return links within the xterm.js buffer. A single link\n * detector can return multiple links of differing types.\n */\nexport interface ITerminalLinkDetector {\n\t/**\n\t * The xterm.js instance this detector belongs to.\n\t */\n\treadonly xterm: Terminal;\n\n\t/**\n\t * The maximum link length possible for this detector, this puts a cap on how much of a wrapped\n\t * line to consider to prevent performance problems.\n\t */\n\treadonly maxLinkLength: number;\n\n\t/**\n\t * Detects links within the _wrapped_ line range provided and returns them as an array.\n\t *\n\t * @param lines The individual buffer lines that make up the wrapped line.\n\t * @param startLine The start of the wrapped line. This _will not_ be validated that it is\n\t * indeed the start of a wrapped line.\n\t * @param endLine The end of the wrapped line.  This _will not_ be validated that it is indeed\n\t * the end of a wrapped line.\n\t */\n\tdetect(\n\t\tlines: IBufferLine[],\n\t\tstartLine: number,\n\t\tendLine: number,\n\t): ITerminalSimpleLink[] | Promise<ITerminalSimpleLink[]>;\n}\n\nexport interface ITerminalSimpleLink {\n\t/**\n\t * The text of the link.\n\t */\n\ttext: string;\n\n\tparsedLink?: IParsedLink;\n\n\t/**\n\t * The buffer range of the link.\n\t */\n\treadonly bufferRange: IBufferRange;\n\n\t/**\n\t * The type of link, which determines how it is handled when activated.\n\t */\n\treadonly type: TerminalLinkType;\n\n\t/**\n\t * The URI of the link if it has been resolved.\n\t */\n\turi?: URI;\n\n\t/**\n\t * An optional full line to be used for context when resolving.\n\t */\n\tcontextLine?: string;\n\n\t/**\n\t * The location or selection range of the link.\n\t */\n\tselection?: ITextEditorSelection;\n\n\t/**\n\t * Whether to trim a trailing colon at the end of a path.\n\t */\n\tdisableTrimColon?: boolean;\n\n\t/**\n\t * A hover label to override the default for the type.\n\t */\n\tlabel?: string;\n\n\t/**\n\t * An optional set of actions to show in the hover's status bar.\n\t */\n\tactions?: IHoverAction[];\n\n\t/**\n\t * An optional method to call when the link is activated. This should be used when there is are\n\t * no registered opener for this link type.\n\t */\n\tactivate?(text: string): void;\n}\n\nexport type TerminalLinkType =\n\t| TerminalBuiltinLinkType\n\t| ITerminalExternalLinkType;\n\nexport enum TerminalBuiltinLinkType {\n\t/**\n\t * The link is validated to be a file on the file system and will open an editor.\n\t */\n\tLocalFile = \"LocalFile\",\n\n\t/**\n\t * The link is validated to be a folder on the file system and is outside the workspace. It will\n\t * reveal the folder within the explorer.\n\t */\n\tLocalFolderOutsideWorkspace = \"LocalFolderOutsideWorkspace\",\n\n\t/**\n\t * The link is validated to be a folder on the file system and is within the workspace and will\n\t * reveal the folder within the explorer.\n\t */\n\tLocalFolderInWorkspace = \"LocalFolderInWorkspace\",\n\n\t/**\n\t * A low confidence link which will search for the file in the workspace. If there is a single\n\t * match, it will open the file; otherwise, it will present the matches in a quick pick.\n\t */\n\tSearch = \"Search\",\n\n\t/**\n\t * A link whose text is a valid URI.\n\t */\n\tUrl = \"Url\",\n}\n\nexport interface ITerminalExternalLinkType {\n\tid: string;\n}\n\nexport interface ITerminalLinkOpener {\n\topen(link: ITerminalSimpleLink): Promise<void>;\n}\n\nexport type ResolvedLink = IResolvedValidLink | null;\n\nexport interface IResolvedValidLink {\n\turi: URI;\n\tlink: string;\n\tisDirectory: boolean;\n}\n\nexport type OmitFirstArg<F> = F extends (x: any, ...args: infer P) => infer R\n\t? (...args: P) => R\n\t: never;\n"],
  "mappings": "AAWA,SAAS,uBAAuB;AAMzB,MAAM,+BACZ;AAAA,EACC;AACD;AAmHM,IAAK,0BAAL,kBAAKA,6BAAL;AAIN,EAAAA,yBAAA,eAAY;AAMZ,EAAAA,yBAAA,iCAA8B;AAM9B,EAAAA,yBAAA,4BAAyB;AAMzB,EAAAA,yBAAA,YAAS;AAKT,EAAAA,yBAAA,SAAM;AA3BK,SAAAA;AAAA,GAAA;",
  "names": ["TerminalBuiltinLinkType"]
}
