{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminalContrib/zoom/browser/terminal.zoom.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal as RawXtermTerminal } from \"@xterm/xterm\";\nimport type { IMouseWheelEvent } from \"../../../../../base/browser/mouseEvent.js\";\nimport { MouseWheelClassifier } from \"../../../../../base/browser/ui/scrollbar/scrollableElement.js\";\nimport { Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { isMacintosh } from \"../../../../../base/common/platform.js\";\nimport { isNumber } from \"../../../../../base/common/types.js\";\nimport { localize2 } from \"../../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { TerminalSettingId } from \"../../../../../platform/terminal/common/terminal.js\";\nimport type {\n\tIDetachedTerminalInstance,\n\tITerminalContribution,\n\tITerminalInstance,\n\tIXtermTerminal,\n} from \"../../../terminal/browser/terminal.js\";\nimport { registerTerminalAction } from \"../../../terminal/browser/terminalActions.js\";\nimport { registerTerminalContribution } from \"../../../terminal/browser/terminalExtensions.js\";\nimport type { TerminalWidgetManager } from \"../../../terminal/browser/widgets/widgetManager.js\";\nimport type {\n\tITerminalProcessInfo,\n\tITerminalProcessManager,\n} from \"../../../terminal/common/terminal.js\";\nimport { defaultTerminalFontSize } from \"../../../terminal/common/terminalConfiguration.js\";\nimport {\n\tTerminalZoomCommandId,\n\tTerminalZoomSettingId,\n} from \"../common/terminal.zoom.js\";\n\nclass TerminalMouseWheelZoomContribution\n\textends Disposable\n\timplements ITerminalContribution\n{\n\tstatic readonly ID = \"terminal.mouseWheelZoom\";\n\n\t/**\n\t * Currently focused find widget. This is used to track action context since\n\t * 'active terminals' are only tracked for non-detached terminal instanecs.\n\t */\n\tstatic activeFindWidget?: TerminalMouseWheelZoomContribution;\n\n\tstatic get(\n\t\tinstance: ITerminalInstance | IDetachedTerminalInstance,\n\t): TerminalMouseWheelZoomContribution | null {\n\t\treturn instance.getContribution<TerminalMouseWheelZoomContribution>(\n\t\t\tTerminalMouseWheelZoomContribution.ID,\n\t\t);\n\t}\n\n\tprivate readonly _listener = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tinstance: ITerminalInstance | IDetachedTerminalInstance,\n\t\tprocessManager: ITerminalProcessManager | ITerminalProcessInfo,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t}\n\n\txtermOpen(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tthis._register(\n\t\t\tEvent.runAndSubscribe(\n\t\t\t\tthis._configurationService.onDidChangeConfiguration,\n\t\t\t\t(e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!e ||\n\t\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\tTerminalZoomSettingId.MouseWheelZoom,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!!this._configurationService.getValue(\n\t\t\t\t\t\t\t\tTerminalZoomSettingId.MouseWheelZoom,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis._setupMouseWheelZoomListener(xterm.raw);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._listener.clear();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _getConfigFontSize(): number {\n\t\treturn this._configurationService.getValue(TerminalSettingId.FontSize);\n\t}\n\n\tprivate _setupMouseWheelZoomListener(raw: RawXtermTerminal) {\n\t\t// This is essentially a copy of what we do in the editor, just we modify font size directly\n\t\t// as there is no separate zoom level concept in the terminal\n\t\tconst classifier = MouseWheelClassifier.INSTANCE;\n\n\t\tlet prevMouseWheelTime = 0;\n\t\tlet gestureStartFontSize = this._getConfigFontSize();\n\t\tlet gestureHasZoomModifiers = false;\n\t\tlet gestureAccumulatedDelta = 0;\n\n\t\traw.attachCustomWheelEventHandler((e: WheelEvent) => {\n\t\t\tconst browserEvent = e as any as IMouseWheelEvent;\n\t\t\tif (classifier.isPhysicalMouseWheel()) {\n\t\t\t\tif (this._hasMouseWheelZoomModifiers(browserEvent)) {\n\t\t\t\t\tconst delta = browserEvent.deltaY > 0 ? -1 : 1;\n\t\t\t\t\tthis._configurationService.updateValue(\n\t\t\t\t\t\tTerminalSettingId.FontSize,\n\t\t\t\t\t\tthis._getConfigFontSize() + delta,\n\t\t\t\t\t);\n\t\t\t\t\t// EditorZoom.setZoomLevel(zoomLevel + delta);\n\t\t\t\t\tbrowserEvent.preventDefault();\n\t\t\t\t\tbrowserEvent.stopPropagation();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// we consider mousewheel events that occur within 50ms of each other to be part of the same gesture\n\t\t\t\t// we don't want to consider mouse wheel events where ctrl/cmd is pressed during the inertia phase\n\t\t\t\t// we also want to accumulate deltaY values from the same gesture and use that to set the zoom level\n\t\t\t\tif (Date.now() - prevMouseWheelTime > 50) {\n\t\t\t\t\t// reset if more than 50ms have passed\n\t\t\t\t\tgestureStartFontSize = this._getConfigFontSize();\n\t\t\t\t\tgestureHasZoomModifiers =\n\t\t\t\t\t\tthis._hasMouseWheelZoomModifiers(browserEvent);\n\t\t\t\t\tgestureAccumulatedDelta = 0;\n\t\t\t\t}\n\n\t\t\t\tprevMouseWheelTime = Date.now();\n\t\t\t\tgestureAccumulatedDelta += browserEvent.deltaY;\n\n\t\t\t\tif (gestureHasZoomModifiers) {\n\t\t\t\t\tconst deltaAbs = Math.ceil(\n\t\t\t\t\t\tMath.abs(gestureAccumulatedDelta / 5),\n\t\t\t\t\t);\n\t\t\t\t\tconst deltaDirection = gestureAccumulatedDelta > 0 ? -1 : 1;\n\t\t\t\t\tconst delta = deltaAbs * deltaDirection;\n\t\t\t\t\tthis._configurationService.updateValue(\n\t\t\t\t\t\tTerminalSettingId.FontSize,\n\t\t\t\t\t\tgestureStartFontSize + delta,\n\t\t\t\t\t);\n\t\t\t\t\tgestureAccumulatedDelta += browserEvent.deltaY;\n\t\t\t\t\tbrowserEvent.preventDefault();\n\t\t\t\t\tbrowserEvent.stopPropagation();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\tthis._listener.value = toDisposable(() =>\n\t\t\traw.attachCustomWheelEventHandler(() => true),\n\t\t);\n\t}\n\n\tprivate _hasMouseWheelZoomModifiers(\n\t\tbrowserEvent: IMouseWheelEvent,\n\t): boolean {\n\t\treturn isMacintosh\n\t\t\t? // on macOS we support cmd + two fingers scroll (`metaKey` set)\n\t\t\t\t// and also the two fingers pinch gesture (`ctrKey` set)\n\t\t\t\t(browserEvent.metaKey || browserEvent.ctrlKey) &&\n\t\t\t\t\t!browserEvent.shiftKey &&\n\t\t\t\t\t!browserEvent.altKey\n\t\t\t: browserEvent.ctrlKey &&\n\t\t\t\t\t!browserEvent.metaKey &&\n\t\t\t\t\t!browserEvent.shiftKey &&\n\t\t\t\t\t!browserEvent.altKey;\n\t}\n}\n\nregisterTerminalContribution(\n\tTerminalMouseWheelZoomContribution.ID,\n\tTerminalMouseWheelZoomContribution,\n\ttrue,\n);\n\nregisterTerminalAction({\n\tid: TerminalZoomCommandId.FontZoomIn,\n\ttitle: localize2(\"fontZoomIn\", \"Increase Font Size\"),\n\trun: async (c, accessor) => {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst value = configurationService.getValue(TerminalSettingId.FontSize);\n\t\tif (isNumber(value)) {\n\t\t\tawait configurationService.updateValue(\n\t\t\t\tTerminalSettingId.FontSize,\n\t\t\t\tvalue + 1,\n\t\t\t);\n\t\t}\n\t},\n});\n\nregisterTerminalAction({\n\tid: TerminalZoomCommandId.FontZoomOut,\n\ttitle: localize2(\"fontZoomOut\", \"Decrease Font Size\"),\n\trun: async (c, accessor) => {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst value = configurationService.getValue(TerminalSettingId.FontSize);\n\t\tif (isNumber(value)) {\n\t\t\tawait configurationService.updateValue(\n\t\t\t\tTerminalSettingId.FontSize,\n\t\t\t\tvalue - 1,\n\t\t\t);\n\t\t}\n\t},\n});\n\nregisterTerminalAction({\n\tid: TerminalZoomCommandId.FontZoomReset,\n\ttitle: localize2(\"fontZoomReset\", \"Reset Font Size\"),\n\trun: async (c, accessor) => {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tawait configurationService.updateValue(\n\t\t\tTerminalSettingId.FontSize,\n\t\t\tdefaultTerminalFontSize,\n\t\t);\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
