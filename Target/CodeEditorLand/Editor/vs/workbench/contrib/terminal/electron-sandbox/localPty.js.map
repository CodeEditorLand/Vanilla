{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/electron-sandbox/localPty.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProcessPropertyMap, IPtyService, ITerminalChildProcess, ITerminalLaunchError, ProcessPropertyType } from '../../../../platform/terminal/common/terminal.js';\nimport { BasePty } from '../common/basePty.js';\n\n/**\n * Responsible for establishing and maintaining a connection with an existing terminal process\n * created on the local pty host.\n */\nexport class LocalPty extends BasePty implements ITerminalChildProcess {\n\tconstructor(\n\t\tid: number,\n\t\tshouldPersist: boolean,\n\t\tprivate readonly _proxy: IPtyService\n\t) {\n\t\tsuper(id, shouldPersist);\n\t}\n\n\tstart(): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\treturn this._proxy.start(this.id);\n\t}\n\n\tdetach(forcePersist?: boolean): Promise<void> {\n\t\treturn this._proxy.detachFromProcess(this.id, forcePersist);\n\t}\n\n\tshutdown(immediate: boolean): void {\n\t\tthis._proxy.shutdown(this.id, immediate);\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._proxy.processBinary(this.id, data);\n\t}\n\n\tinput(data: string): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._proxy.input(this.id, data);\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tif (this._inReplay || this._lastDimensions.cols === cols && this._lastDimensions.rows === rows) {\n\t\t\treturn;\n\t\t}\n\t\tthis._lastDimensions.cols = cols;\n\t\tthis._lastDimensions.rows = rows;\n\t\tthis._proxy.resize(this.id, cols, rows);\n\t}\n\n\tasync clearBuffer(): Promise<void> {\n\t\tthis._proxy.clearBuffer?.(this.id);\n\t}\n\n\tfreePortKillProcess(port: string): Promise<{ port: string; processId: string }> {\n\t\tif (!this._proxy.freePortKillProcess) {\n\t\t\tthrow new Error('freePortKillProcess does not exist on the local pty service');\n\t\t}\n\t\treturn this._proxy.freePortKillProcess(port);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._proxy.refreshProperty(this.id, type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._proxy.updateProperty(this.id, type, value);\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._proxy.acknowledgeDataEvent(this.id, charCount);\n\t}\n\n\tsetUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\treturn this._proxy.setUnicodeVersion(this.id, version);\n\t}\n\n\thandleOrphanQuestion() {\n\t\tthis._proxy.orphanQuestionReply(this.id);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB,aAAa,uBAAuB,sBAAsB,2BAA2B;AACnH,SAAS,eAAe;AAMjB,MAAM,iBAAiB,QAAyC;AAAA,EACtE,YACC,IACA,eACiB,QAChB;AACD,UAAM,IAAI,aAAa;AAFN;AAAA,EAGlB;AAAA,EAnBD,OAYuE;AAAA;AAAA;AAAA,EAStE,QAAgF;AAC/E,WAAO,KAAK,OAAO,MAAM,KAAK,EAAE;AAAA,EACjC;AAAA,EAEA,OAAO,cAAuC;AAC7C,WAAO,KAAK,OAAO,kBAAkB,KAAK,IAAI,YAAY;AAAA,EAC3D;AAAA,EAEA,SAAS,WAA0B;AAClC,SAAK,OAAO,SAAS,KAAK,IAAI,SAAS;AAAA,EACxC;AAAA,EAEA,MAAM,cAAc,MAA6B;AAChD,QAAI,KAAK,WAAW;AACnB;AAAA,IACD;AACA,WAAO,KAAK,OAAO,cAAc,KAAK,IAAI,IAAI;AAAA,EAC/C;AAAA,EAEA,MAAM,MAAoB;AACzB,QAAI,KAAK,WAAW;AACnB;AAAA,IACD;AACA,SAAK,OAAO,MAAM,KAAK,IAAI,IAAI;AAAA,EAChC;AAAA,EAEA,OAAO,MAAc,MAAoB;AACxC,QAAI,KAAK,aAAa,KAAK,gBAAgB,SAAS,QAAQ,KAAK,gBAAgB,SAAS,MAAM;AAC/F;AAAA,IACD;AACA,SAAK,gBAAgB,OAAO;AAC5B,SAAK,gBAAgB,OAAO;AAC5B,SAAK,OAAO,OAAO,KAAK,IAAI,MAAM,IAAI;AAAA,EACvC;AAAA,EAEA,MAAM,cAA6B;AAClC,SAAK,OAAO,cAAc,KAAK,EAAE;AAAA,EAClC;AAAA,EAEA,oBAAoB,MAA4D;AAC/E,QAAI,CAAC,KAAK,OAAO,qBAAqB;AACrC,YAAM,IAAI,MAAM,6DAA6D;AAAA,IAC9E;AACA,WAAO,KAAK,OAAO,oBAAoB,IAAI;AAAA,EAC5C;AAAA,EAEA,MAAM,gBAA+C,MAA0C;AAC9F,WAAO,KAAK,OAAO,gBAAgB,KAAK,IAAI,IAAI;AAAA,EACjD;AAAA,EAEA,MAAM,eAA8C,MAAS,OAA8C;AAC1G,WAAO,KAAK,OAAO,eAAe,KAAK,IAAI,MAAM,KAAK;AAAA,EACvD;AAAA,EAEA,qBAAqB,WAAyB;AAC7C,QAAI,KAAK,WAAW;AACnB;AAAA,IACD;AACA,SAAK,OAAO,qBAAqB,KAAK,IAAI,SAAS;AAAA,EACpD;AAAA,EAEA,kBAAkB,SAAoC;AACrD,WAAO,KAAK,OAAO,kBAAkB,KAAK,IAAI,OAAO;AAAA,EACtD;AAAA,EAEA,uBAAuB;AACtB,SAAK,OAAO,oBAAoB,KAAK,EAAE;AAAA,EACxC;AACD;",
  "names": []
}
