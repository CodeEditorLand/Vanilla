{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/electron-sandbox/terminal.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { registerMainProcessRemoteService } from \"../../../../platform/ipc/electron-sandbox/services.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tILocalPtyService,\n\tTerminalIpcChannels,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport {\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { ITerminalProfileResolverService } from \"../common/terminal.js\";\nimport { LocalTerminalBackendContribution } from \"./localTerminalBackend.js\";\nimport { TerminalNativeContribution } from \"./terminalNativeContribution.js\";\nimport { ElectronTerminalProfileResolverService } from \"./terminalProfileResolverService.js\";\n\n// Register services\nregisterMainProcessRemoteService(\n\tILocalPtyService,\n\tTerminalIpcChannels.LocalPty,\n);\nregisterSingleton(\n\tITerminalProfileResolverService,\n\tElectronTerminalProfileResolverService,\n\tInstantiationType.Delayed,\n);\n\n// Register workbench contributions\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n);\n\n// This contribution needs to be active during the Startup phase to be available when a remote resolver tries to open a local\n// terminal while connecting to the remote.\nregisterWorkbenchContribution2(\n\tLocalTerminalBackendContribution.ID,\n\tLocalTerminalBackendContribution,\n\tWorkbenchPhase.BlockStartup,\n);\nworkbenchRegistry.registerWorkbenchContribution(\n\tTerminalNativeContribution,\n\tLifecyclePhase.Restored,\n);\n"],
  "mappings": "AAKA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,wCAAwC;AACjD,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC,cAAc;AAAA,EACd;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B,SAAS,uCAAuC;AAChD,SAAS,wCAAwC;AACjD,SAAS,kCAAkC;AAC3C,SAAS,8CAA8C;AAGvD;AAAA,EACC;AAAA,EACA,oBAAoB;AACrB;AACA;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;AAGA,MAAM,oBAAoB,SAAS;AAAA,EAClC,oBAAoB;AACrB;AAIA;AAAA,EACC,iCAAiC;AAAA,EACjC;AAAA,EACA,eAAe;AAChB;AACA,kBAAkB;AAAA,EACjB;AAAA,EACA,eAAe;AAChB;",
  "names": []
}
