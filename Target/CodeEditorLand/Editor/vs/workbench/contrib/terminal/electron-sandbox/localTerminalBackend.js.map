{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/electron-sandbox/localTerminalBackend.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { IProcessEnvironment, isMacintosh, isWindows, OperatingSystem } from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ILocalPtyService, IProcessPropertyMap, IPtyHostLatencyMeasurement, IPtyService, IShellLaunchConfig, ITerminalBackend, ITerminalBackendRegistry, ITerminalChildProcess, ITerminalEnvironment, ITerminalLogService, ITerminalProcessOptions, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, ProcessPropertyType, TerminalExtensions, TerminalIpcChannels, TerminalSettingId, TitleEventSource } from '../../../../platform/terminal/common/terminal.js';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs } from '../../../../platform/terminal/common/terminalProcess.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { ITerminalInstanceService } from '../browser/terminal.js';\nimport { ITerminalConfiguration, ITerminalProfileResolverService, TERMINAL_CONFIG_SECTION } from '../common/terminal.js';\nimport { TerminalStorageKeys } from '../common/terminalStorageKeys.js';\nimport { LocalPty } from './localPty.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IShellEnvironmentService } from '../../../services/environment/electron-sandbox/shellEnvironmentService.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport * as terminalEnvironment from '../common/terminalEnvironment.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IEnvironmentVariableService } from '../common/environmentVariable.js';\nimport { BaseTerminalBackend } from '../browser/baseTerminalBackend.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { Client as MessagePortClient } from '../../../../base/parts/ipc/common/ipc.mp.js';\nimport { acquirePort } from '../../../../base/parts/ipc/electron-sandbox/ipc.mp.js';\nimport { getDelayedChannel, ProxyChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { mark, PerformanceMark } from '../../../../base/common/performance.js';\nimport { ILifecycleService, LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { DeferredPromise } from '../../../../base/common/async.js';\nimport { IStatusbarService } from '../../../services/statusbar/browser/statusbar.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { shouldUseEnvironmentVariableCollection } from '../../../../platform/terminal/common/terminalEnvironment.js';\n\nexport class LocalTerminalBackendContribution implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.localTerminalBackend';\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService\n\t) {\n\t\tconst backend = instantiationService.createInstance(LocalTerminalBackend);\n\t\tRegistry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).registerTerminalBackend(backend);\n\t\tterminalInstanceService.didRegisterBackend(backend.remoteAuthority);\n\t}\n}\n\nclass LocalTerminalBackend extends BaseTerminalBackend implements ITerminalBackend {\n\treadonly remoteAuthority = undefined;\n\n\tprivate readonly _ptys: Map<number, LocalPty> = new Map();\n\n\tprivate _directProxyClientEventually: DeferredPromise<MessagePortClient> | undefined;\n\tprivate _directProxy: IPtyService | undefined;\n\t/**\n\t * Communicate to the direct proxy (renderer<->ptyhost) if it's available, otherwise use the\n\t * indirect proxy (renderer<->main<->ptyhost). The latter may not need to actually launch the\n\t * pty host, for example when detecting profiles.\n\t */\n\tprivate get _proxy(): IPtyService { return this._directProxy || this._localPtyService; }\n\n\tprivate readonly _whenReady = new DeferredPromise<void>();\n\tget whenReady(): Promise<void> { return this._whenReady.p; }\n\tsetReady(): void { this._whenReady.complete(); }\n\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\n\tconstructor(\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ILocalPtyService private readonly _localPtyService: ILocalPtyService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IShellEnvironmentService private readonly _shellEnvironmentService: IShellEnvironmentService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@IHistoryService historyService: IHistoryService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IStatusbarService statusBarService: IStatusbarService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t) {\n\t\tsuper(_localPtyService, logService, historyService, _configurationResolverService, statusBarService, workspaceContextService);\n\n\t\tthis._register(this.onPtyHostRestart(() => {\n\t\t\tthis._directProxy = undefined;\n\t\t\tthis._directProxyClientEventually = undefined;\n\t\t\tthis._connectToDirectProxy();\n\t\t}));\n\t}\n\n\t/**\n\t * Request a direct connection to the pty host, this will launch the pty host process if necessary.\n\t */\n\tprivate async _connectToDirectProxy(): Promise<void> {\n\t\t// Check if connecting is in progress\n\t\tif (this._directProxyClientEventually) {\n\t\t\tawait this._directProxyClientEventually.p;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._logService.debug('Starting pty host');\n\t\tconst directProxyClientEventually = new DeferredPromise<MessagePortClient>();\n\t\tthis._directProxyClientEventually = directProxyClientEventually;\n\t\tconst directProxy = ProxyChannel.toService<IPtyService>(getDelayedChannel(this._directProxyClientEventually.p.then(client => client.getChannel(TerminalIpcChannels.PtyHostWindow))));\n\t\tthis._directProxy = directProxy;\n\n\t\t// The pty host should not get launched until at least the window restored phase\n\t\t// if remote auth exists, don't await\n\t\tif (!this._remoteAgentService.getConnection()?.remoteAuthority) {\n\t\t\tawait this._lifecycleService.when(LifecyclePhase.Restored);\n\t\t}\n\n\t\tmark('code/terminal/willConnectPtyHost');\n\t\tthis._logService.trace('Renderer->PtyHost#connect: before acquirePort');\n\t\tacquirePort('vscode:createPtyHostMessageChannel', 'vscode:createPtyHostMessageChannelResult').then(port => {\n\t\t\tmark('code/terminal/didConnectPtyHost');\n\t\t\tthis._logService.trace('Renderer->PtyHost#connect: connection established');\n\t\t\t// There are two connections to the pty host; one to the regular shared process\n\t\t\t// _localPtyService, and one directly via message port _ptyHostDirectProxy. The former is\n\t\t\t// used for pty host management messages, it would make sense in the future to use a\n\t\t\t// separate interface/service for this one.\n\t\t\tconst client = new MessagePortClient(port, `window:${this._nativeHostService.windowId}`);\n\t\t\tdirectProxyClientEventually.complete(client);\n\t\t\tthis._onPtyHostConnected.fire();\n\n\t\t\t// Attach process listeners\n\t\t\tdirectProxy.onProcessData(e => this._ptys.get(e.id)?.handleData(e.event));\n\t\t\tdirectProxy.onDidChangeProperty(e => this._ptys.get(e.id)?.handleDidChangeProperty(e.property));\n\t\t\tdirectProxy.onProcessExit(e => {\n\t\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\t\tif (pty) {\n\t\t\t\t\tpty.handleExit(e.event);\n\t\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdirectProxy.onProcessReady(e => this._ptys.get(e.id)?.handleReady(e.event));\n\t\t\tdirectProxy.onProcessReplay(e => this._ptys.get(e.id)?.handleReplay(e.event));\n\t\t\tdirectProxy.onProcessOrphanQuestion(e => this._ptys.get(e.id)?.handleOrphanQuestion());\n\t\t\tdirectProxy.onDidRequestDetach(e => this._onDidRequestDetach.fire(e));\n\n\t\t\t// Listen for config changes\n\t\t\tconst initialConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\tfor (const match of Object.keys(initialConfig.autoReplies)) {\n\t\t\t\t// Ensure the reply is value\n\t\t\t\tconst reply = initialConfig.autoReplies[match] as string | null;\n\t\t\t\tif (reply) {\n\t\t\t\t\tdirectProxy.installAutoReply(match, reply);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: Could simplify update to a single call\n\t\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\t\tif (e.affectsConfiguration(TerminalSettingId.AutoReplies)) {\n\t\t\t\t\tdirectProxy.uninstallAllAutoReplies();\n\t\t\t\t\tconst config = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\t\t\tfor (const match of Object.keys(config.autoReplies)) {\n\t\t\t\t\t\t// Ensure the reply is value\n\t\t\t\t\t\tconst reply = config.autoReplies[match] as string | null;\n\t\t\t\t\t\tif (reply) {\n\t\t\t\t\t\t\tthis._proxy.installAutoReply(match, reply);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Eagerly fetch the backend's environment for memoization\n\t\t\tthis.getEnvironment();\n\t\t});\n\t}\n\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\treturn this._proxy.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId?: number): Promise<void> {\n\t\tif (!persistentProcessId) {\n\t\t\tthis._logService.warn('Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId');\n\t\t\treturn;\n\t\t}\n\t\treturn this._proxy.acceptDetachInstanceReply(requestId, persistentProcessId);\n\t}\n\n\tasync persistTerminalState(): Promise<void> {\n\t\tconst ids = Array.from(this._ptys.keys());\n\t\tconst serialized = await this._proxy.serializeTerminalState(ids);\n\t\tthis._storageService.store(TerminalStorageKeys.TerminalBufferState, serialized, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tasync updateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\tawait this._proxy.updateTitle(id, title, titleSource);\n\t}\n\n\tasync updateIcon(id: number, userInitiated: boolean, icon: URI | { light: URI; dark: URI } | { id: string; color?: { id: string } }, color?: string): Promise<void> {\n\t\tawait this._proxy.updateIcon(id, userInitiated, icon, color);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, property: ProcessPropertyType, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._proxy.updateProperty(id, property, value);\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean\n\t): Promise<ITerminalChildProcess> {\n\t\tawait this._connectToDirectProxy();\n\t\tconst executableEnv = await this._shellEnvironmentService.getShellEnv();\n\t\tconst id = await this._proxy.createProcess(shellLaunchConfig, cwd, cols, rows, unicodeVersion, env, executableEnv, options, shouldPersist, this._getWorkspaceId(), this._getWorkspaceName());\n\t\tconst pty = new LocalPty(id, shouldPersist, this._proxy);\n\t\tthis._ptys.set(id, pty);\n\t\treturn pty;\n\t}\n\n\tasync attachToProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tawait this._connectToDirectProxy();\n\t\ttry {\n\t\t\tawait this._proxy.attachToProcess(id);\n\t\t\tconst pty = new LocalPty(id, true, this._proxy);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync attachToRevivedProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tawait this._connectToDirectProxy();\n\t\ttry {\n\t\t\tconst newId = await this._proxy.getRevivedPtyNewId(this._getWorkspaceId(), id) ?? id;\n\t\t\treturn await this.attachToProcess(newId);\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\tawait this._connectToDirectProxy();\n\t\treturn this._proxy.listProcesses();\n\t}\n\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst measurements: IPtyHostLatencyMeasurement[] = [];\n\t\tconst sw = new StopWatch();\n\t\tif (this._directProxy) {\n\t\t\tawait this._directProxy.getLatency();\n\t\t\tsw.stop();\n\t\t\tmeasurements.push({\n\t\t\t\tlabel: 'window<->ptyhost (message port)',\n\t\t\t\tlatency: sw.elapsed()\n\t\t\t});\n\t\t\tsw.reset();\n\t\t}\n\t\tconst results = await this._localPtyService.getLatency();\n\t\tsw.stop();\n\t\tmeasurements.push({\n\t\t\tlabel: 'window<->ptyhostservice<->ptyhost',\n\t\t\tlatency: sw.elapsed()\n\t\t});\n\t\treturn [\n\t\t\t...measurements,\n\t\t\t...results\n\t\t];\n\t}\n\n\tasync getPerformanceMarks(): Promise<PerformanceMark[]> {\n\t\treturn this._proxy.getPerformanceMarks();\n\t}\n\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tthis._proxy.reduceConnectionGraceTime();\n\t}\n\n\tasync getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._proxy.getDefaultSystemShell(osOverride);\n\t}\n\n\tasync getProfiles(profiles: unknown, defaultProfile: unknown, includeDetectedProfiles?: boolean) {\n\t\treturn this._localPtyService.getProfiles(this._workspaceContextService.getWorkspace().id, profiles, defaultProfile, includeDetectedProfiles) || [];\n\t}\n\n\t@memoize\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._proxy.getEnvironment();\n\t}\n\n\t@memoize\n\tasync getShellEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._shellEnvironmentService.getShellEnv();\n\t}\n\n\tasync getWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix'): Promise<string> {\n\t\treturn this._proxy.getWslPath(original, direction);\n\t}\n\n\tasync setTerminalLayoutInfo(layoutInfo?: ITerminalsLayoutInfoById): Promise<void> {\n\t\tconst args: ISetTerminalLayoutInfoArgs = {\n\t\t\tworkspaceId: this._getWorkspaceId(),\n\t\t\ttabs: layoutInfo ? layoutInfo.tabs : []\n\t\t};\n\t\tawait this._proxy.setTerminalLayoutInfo(args);\n\t\t// Store in the storage service as well to be used when reviving processes as normally this\n\t\t// is stored in memory on the pty host\n\t\tthis._storageService.store(TerminalStorageKeys.TerminalLayoutInfo, JSON.stringify(args), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tasync getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tconst workspaceId = this._getWorkspaceId();\n\t\tconst layoutArgs: IGetTerminalLayoutInfoArgs = { workspaceId };\n\n\t\t// Revive processes if needed\n\t\tconst serializedState = this._storageService.get(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\tconst reviveBufferState = this._deserializeTerminalState(serializedState);\n\t\tif (reviveBufferState && reviveBufferState.length > 0) {\n\t\t\ttry {\n\t\t\t\t// Create variable resolver\n\t\t\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot();\n\t\t\t\tconst lastActiveWorkspace = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\t\t\tconst variableResolver = terminalEnvironment.createVariableResolver(lastActiveWorkspace, await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority), this._configurationResolverService);\n\n\t\t\t\t// Re-resolve the environments and replace it on the state so local terminals use a fresh\n\t\t\t\t// environment\n\t\t\t\tmark('code/terminal/willGetReviveEnvironments');\n\t\t\t\tawait Promise.all(reviveBufferState.map(state => new Promise<void>(r => {\n\t\t\t\t\tthis._resolveEnvironmentForRevive(variableResolver, state.shellLaunchConfig).then(freshEnv => {\n\t\t\t\t\t\tstate.processLaunchConfig.env = freshEnv;\n\t\t\t\t\t\tr();\n\t\t\t\t\t});\n\t\t\t\t})));\n\t\t\t\tmark('code/terminal/didGetReviveEnvironments');\n\n\t\t\t\tmark('code/terminal/willReviveTerminalProcesses');\n\t\t\t\tawait this._proxy.reviveTerminalProcesses(workspaceId, reviveBufferState, Intl.DateTimeFormat().resolvedOptions().locale);\n\t\t\t\tmark('code/terminal/didReviveTerminalProcesses');\n\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\t\t\t// If reviving processes, send the terminal layout info back to the pty host as it\n\t\t\t\t// will not have been persisted on application exit\n\t\t\t\tconst layoutInfo = this._storageService.get(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tmark('code/terminal/willSetTerminalLayoutInfo');\n\t\t\t\t\tawait this._proxy.setTerminalLayoutInfo(JSON.parse(layoutInfo));\n\t\t\t\t\tmark('code/terminal/didSetTerminalLayoutInfo');\n\t\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {\n\t\t\t\tthis._logService.warn('LocalTerminalBackend#getTerminalLayoutInfo Error', e && typeof e === 'object' && 'message' in e ? e.message : e);\n\t\t\t}\n\t\t}\n\n\t\treturn this._proxy.getTerminalLayoutInfo(layoutArgs);\n\t}\n\n\tprivate async _resolveEnvironmentForRevive(variableResolver: terminalEnvironment.VariableResolver | undefined, shellLaunchConfig: IShellLaunchConfig): Promise<IProcessEnvironment> {\n\t\tconst platformKey = isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t\tconst envFromConfigValue = this._configurationService.getValue<ITerminalEnvironment | undefined>(`terminal.integrated.env.${platformKey}`);\n\t\tconst baseEnv = await (shellLaunchConfig.useShellEnvironment ? this.getShellEnvironment() : this.getEnvironment());\n\t\tconst env = await terminalEnvironment.createTerminalEnvironment(shellLaunchConfig, envFromConfigValue, variableResolver, this._productService.version, this._configurationService.getValue(TerminalSettingId.DetectLocale), baseEnv);\n\t\tif (shouldUseEnvironmentVariableCollection(shellLaunchConfig)) {\n\t\t\tconst workspaceFolder = terminalEnvironment.getWorkspaceForTerminal(shellLaunchConfig.cwd, this._workspaceContextService, this._historyService);\n\t\t\tawait this._environmentVariableService.mergedCollection.applyToProcessEnvironment(env, { workspaceFolder }, variableResolver);\n\t\t}\n\t\treturn env;\n\t}\n\n\tprivate _getWorkspaceName(): string {\n\t\treturn this._labelService.getWorkspaceLabel(this._workspaceContextService.getWorkspace());\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
