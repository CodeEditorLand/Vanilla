{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/electron-sandbox/localTerminalBackend.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from \"../../../../base/common/async.js\";\nimport { memoize } from \"../../../../base/common/decorators.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\ttype PerformanceMark,\n\tmark,\n} from \"../../../../base/common/performance.js\";\nimport {\n\ttype IProcessEnvironment,\n\ttype OperatingSystem,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tProxyChannel,\n\tgetDelayedChannel,\n} from \"../../../../base/parts/ipc/common/ipc.js\";\nimport { Client as MessagePortClient } from \"../../../../base/parts/ipc/common/ipc.mp.js\";\nimport { acquirePort } from \"../../../../base/parts/ipc/electron-sandbox/ipc.mp.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tILocalPtyService,\n\ttype IProcessPropertyMap,\n\ttype IPtyHostLatencyMeasurement,\n\ttype IPtyService,\n\ttype IShellLaunchConfig,\n\ttype ITerminalBackend,\n\ttype ITerminalBackendRegistry,\n\ttype ITerminalChildProcess,\n\ttype ITerminalEnvironment,\n\tITerminalLogService,\n\ttype ITerminalProcessOptions,\n\ttype ITerminalsLayoutInfo,\n\ttype ITerminalsLayoutInfoById,\n\ttype ProcessPropertyType,\n\tTerminalExtensions,\n\tTerminalIpcChannels,\n\tTerminalSettingId,\n\ttype TitleEventSource,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { shouldUseEnvironmentVariableCollection } from \"../../../../platform/terminal/common/terminalEnvironment.js\";\nimport type {\n\tIGetTerminalLayoutInfoArgs,\n\tIProcessDetails,\n\tISetTerminalLayoutInfoArgs,\n} from \"../../../../platform/terminal/common/terminalProcess.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport { IShellEnvironmentService } from \"../../../services/environment/electron-sandbox/shellEnvironmentService.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport { IStatusbarService } from \"../../../services/statusbar/browser/statusbar.js\";\nimport { BaseTerminalBackend } from \"../browser/baseTerminalBackend.js\";\nimport { ITerminalInstanceService } from \"../browser/terminal.js\";\nimport { IEnvironmentVariableService } from \"../common/environmentVariable.js\";\nimport {\n\ttype ITerminalConfiguration,\n\tITerminalProfileResolverService,\n\tTERMINAL_CONFIG_SECTION,\n} from \"../common/terminal.js\";\nimport * as terminalEnvironment from \"../common/terminalEnvironment.js\";\nimport { TerminalStorageKeys } from \"../common/terminalStorageKeys.js\";\nimport { LocalPty } from \"./localPty.js\";\n\nexport class LocalTerminalBackendContribution\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.localTerminalBackend\";\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService,\n\t) {\n\t\tconst backend =\n\t\t\tinstantiationService.createInstance(LocalTerminalBackend);\n\t\tRegistry.as<ITerminalBackendRegistry>(\n\t\t\tTerminalExtensions.Backend,\n\t\t).registerTerminalBackend(backend);\n\t\tterminalInstanceService.didRegisterBackend(backend.remoteAuthority);\n\t}\n}\n\nclass LocalTerminalBackend\n\textends BaseTerminalBackend\n\timplements ITerminalBackend\n{\n\treadonly remoteAuthority = undefined;\n\n\tprivate readonly _ptys: Map<number, LocalPty> = new Map();\n\n\tprivate _directProxyClientEventually:\n\t\t| DeferredPromise<MessagePortClient>\n\t\t| undefined;\n\tprivate _directProxy: IPtyService | undefined;\n\t/**\n\t * Communicate to the direct proxy (renderer<->ptyhost) if it's available, otherwise use the\n\t * indirect proxy (renderer<->main<->ptyhost). The latter may not need to actually launch the\n\t * pty host, for example when detecting profiles.\n\t */\n\tprivate get _proxy(): IPtyService {\n\t\treturn this._directProxy || this._localPtyService;\n\t}\n\n\tprivate readonly _whenReady = new DeferredPromise<void>();\n\tget whenReady(): Promise<void> {\n\t\treturn this._whenReady.p;\n\t}\n\tsetReady(): void {\n\t\tthis._whenReady.complete();\n\t}\n\n\tprivate readonly _onDidRequestDetach = this._register(\n\t\tnew Emitter<{\n\t\t\trequestId: number;\n\t\t\tworkspaceId: string;\n\t\t\tinstanceId: number;\n\t\t}>(),\n\t);\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\n\tconstructor(\n\t\t@IWorkspaceContextService\n\t\tworkspaceContextService: IWorkspaceContextService,\n\t\t@ILifecycleService\n\t\tprivate readonly _lifecycleService: ILifecycleService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ILocalPtyService private readonly _localPtyService: ILocalPtyService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IShellEnvironmentService\n\t\tprivate readonly _shellEnvironmentService: IShellEnvironmentService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IConfigurationResolverService\n\t\tprivate readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@ITerminalProfileResolverService\n\t\tprivate readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IEnvironmentVariableService\n\t\tprivate readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@IHistoryService historyService: IHistoryService,\n\t\t@INativeHostService\n\t\tprivate readonly _nativeHostService: INativeHostService,\n\t\t@IStatusbarService statusBarService: IStatusbarService,\n\t\t@IRemoteAgentService\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService,\n\t) {\n\t\tsuper(\n\t\t\t_localPtyService,\n\t\t\tlogService,\n\t\t\thistoryService,\n\t\t\t_configurationResolverService,\n\t\t\tstatusBarService,\n\t\t\tworkspaceContextService,\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.onPtyHostRestart(() => {\n\t\t\t\tthis._directProxy = undefined;\n\t\t\t\tthis._directProxyClientEventually = undefined;\n\t\t\t\tthis._connectToDirectProxy();\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * Request a direct connection to the pty host, this will launch the pty host process if necessary.\n\t */\n\tprivate async _connectToDirectProxy(): Promise<void> {\n\t\t// Check if connecting is in progress\n\t\tif (this._directProxyClientEventually) {\n\t\t\tawait this._directProxyClientEventually.p;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._logService.debug(\"Starting pty host\");\n\t\tconst directProxyClientEventually =\n\t\t\tnew DeferredPromise<MessagePortClient>();\n\t\tthis._directProxyClientEventually = directProxyClientEventually;\n\t\tconst directProxy = ProxyChannel.toService<IPtyService>(\n\t\t\tgetDelayedChannel(\n\t\t\t\tthis._directProxyClientEventually.p.then((client) =>\n\t\t\t\t\tclient.getChannel(TerminalIpcChannels.PtyHostWindow),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._directProxy = directProxy;\n\n\t\t// The pty host should not get launched until at least the window restored phase\n\t\t// if remote auth exists, don't await\n\t\tif (!this._remoteAgentService.getConnection()?.remoteAuthority) {\n\t\t\tawait this._lifecycleService.when(LifecyclePhase.Restored);\n\t\t}\n\n\t\tmark(\"code/terminal/willConnectPtyHost\");\n\t\tthis._logService.trace(\"Renderer->PtyHost#connect: before acquirePort\");\n\t\tacquirePort(\n\t\t\t\"vscode:createPtyHostMessageChannel\",\n\t\t\t\"vscode:createPtyHostMessageChannelResult\",\n\t\t).then((port) => {\n\t\t\tmark(\"code/terminal/didConnectPtyHost\");\n\t\t\tthis._logService.trace(\n\t\t\t\t\"Renderer->PtyHost#connect: connection established\",\n\t\t\t);\n\t\t\t// There are two connections to the pty host; one to the regular shared process\n\t\t\t// _localPtyService, and one directly via message port _ptyHostDirectProxy. The former is\n\t\t\t// used for pty host management messages, it would make sense in the future to use a\n\t\t\t// separate interface/service for this one.\n\t\t\tconst client = new MessagePortClient(\n\t\t\t\tport,\n\t\t\t\t`window:${this._nativeHostService.windowId}`,\n\t\t\t);\n\t\t\tdirectProxyClientEventually.complete(client);\n\t\t\tthis._onPtyHostConnected.fire();\n\n\t\t\t// Attach process listeners\n\t\t\tdirectProxy.onProcessData((e) =>\n\t\t\t\tthis._ptys.get(e.id)?.handleData(e.event),\n\t\t\t);\n\t\t\tdirectProxy.onDidChangeProperty((e) =>\n\t\t\t\tthis._ptys.get(e.id)?.handleDidChangeProperty(e.property),\n\t\t\t);\n\t\t\tdirectProxy.onProcessExit((e) => {\n\t\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\t\tif (pty) {\n\t\t\t\t\tpty.handleExit(e.event);\n\t\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdirectProxy.onProcessReady((e) =>\n\t\t\t\tthis._ptys.get(e.id)?.handleReady(e.event),\n\t\t\t);\n\t\t\tdirectProxy.onProcessReplay((e) =>\n\t\t\t\tthis._ptys.get(e.id)?.handleReplay(e.event),\n\t\t\t);\n\t\t\tdirectProxy.onProcessOrphanQuestion((e) =>\n\t\t\t\tthis._ptys.get(e.id)?.handleOrphanQuestion(),\n\t\t\t);\n\t\t\tdirectProxy.onDidRequestDetach((e) =>\n\t\t\t\tthis._onDidRequestDetach.fire(e),\n\t\t\t);\n\n\t\t\t// Listen for config changes\n\t\t\tconst initialConfig =\n\t\t\t\tthis._configurationService.getValue<ITerminalConfiguration>(\n\t\t\t\t\tTERMINAL_CONFIG_SECTION,\n\t\t\t\t);\n\t\t\tfor (const match of Object.keys(initialConfig.autoReplies)) {\n\t\t\t\t// Ensure the reply is value\n\t\t\t\tconst reply = initialConfig.autoReplies[match] as string | null;\n\t\t\t\tif (reply) {\n\t\t\t\t\tdirectProxy.installAutoReply(match, reply);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: Could simplify update to a single call\n\t\t\tthis._register(\n\t\t\t\tthis._configurationService.onDidChangeConfiguration(\n\t\t\t\t\tasync (e) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\t\tTerminalSettingId.AutoReplies,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdirectProxy.uninstallAllAutoReplies();\n\t\t\t\t\t\t\tconst config =\n\t\t\t\t\t\t\t\tthis._configurationService.getValue<ITerminalConfiguration>(\n\t\t\t\t\t\t\t\t\tTERMINAL_CONFIG_SECTION,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const match of Object.keys(\n\t\t\t\t\t\t\t\tconfig.autoReplies,\n\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\t// Ensure the reply is value\n\t\t\t\t\t\t\t\tconst reply = config.autoReplies[match] as\n\t\t\t\t\t\t\t\t\t| string\n\t\t\t\t\t\t\t\t\t| null;\n\t\t\t\t\t\t\t\tif (reply) {\n\t\t\t\t\t\t\t\t\tthis._proxy.installAutoReply(match, reply);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// Eagerly fetch the backend's environment for memoization\n\t\t\tthis.getEnvironment();\n\t\t});\n\t}\n\n\tasync requestDetachInstance(\n\t\tworkspaceId: string,\n\t\tinstanceId: number,\n\t): Promise<IProcessDetails | undefined> {\n\t\treturn this._proxy.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(\n\t\trequestId: number,\n\t\tpersistentProcessId?: number,\n\t): Promise<void> {\n\t\tif (!persistentProcessId) {\n\t\t\tthis._logService.warn(\n\t\t\t\t\"Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\treturn this._proxy.acceptDetachInstanceReply(\n\t\t\trequestId,\n\t\t\tpersistentProcessId,\n\t\t);\n\t}\n\n\tasync persistTerminalState(): Promise<void> {\n\t\tconst ids = Array.from(this._ptys.keys());\n\t\tconst serialized = await this._proxy.serializeTerminalState(ids);\n\t\tthis._storageService.store(\n\t\t\tTerminalStorageKeys.TerminalBufferState,\n\t\t\tserialized,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tasync updateTitle(\n\t\tid: number,\n\t\ttitle: string,\n\t\ttitleSource: TitleEventSource,\n\t): Promise<void> {\n\t\tawait this._proxy.updateTitle(id, title, titleSource);\n\t}\n\n\tasync updateIcon(\n\t\tid: number,\n\t\tuserInitiated: boolean,\n\t\ticon:\n\t\t\t| URI\n\t\t\t| { light: URI; dark: URI }\n\t\t\t| { id: string; color?: { id: string } },\n\t\tcolor?: string,\n\t): Promise<void> {\n\t\tawait this._proxy.updateIcon(id, userInitiated, icon, color);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\tid: number,\n\t\tproperty: ProcessPropertyType,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\treturn this._proxy.updateProperty(id, property, value);\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: \"6\" | \"11\",\n\t\tenv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t): Promise<ITerminalChildProcess> {\n\t\tawait this._connectToDirectProxy();\n\t\tconst executableEnv = await this._shellEnvironmentService.getShellEnv();\n\t\tconst id = await this._proxy.createProcess(\n\t\t\tshellLaunchConfig,\n\t\t\tcwd,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tunicodeVersion,\n\t\t\tenv,\n\t\t\texecutableEnv,\n\t\t\toptions,\n\t\t\tshouldPersist,\n\t\t\tthis._getWorkspaceId(),\n\t\t\tthis._getWorkspaceName(),\n\t\t);\n\t\tconst pty = new LocalPty(id, shouldPersist, this._proxy);\n\t\tthis._ptys.set(id, pty);\n\t\treturn pty;\n\t}\n\n\tasync attachToProcess(\n\t\tid: number,\n\t): Promise<ITerminalChildProcess | undefined> {\n\t\tawait this._connectToDirectProxy();\n\t\ttry {\n\t\t\tawait this._proxy.attachToProcess(id);\n\t\t\tconst pty = new LocalPty(id, true, this._proxy);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync attachToRevivedProcess(\n\t\tid: number,\n\t): Promise<ITerminalChildProcess | undefined> {\n\t\tawait this._connectToDirectProxy();\n\t\ttry {\n\t\t\tconst newId =\n\t\t\t\t(await this._proxy.getRevivedPtyNewId(\n\t\t\t\t\tthis._getWorkspaceId(),\n\t\t\t\t\tid,\n\t\t\t\t)) ?? id;\n\t\t\treturn await this.attachToProcess(newId);\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\tawait this._connectToDirectProxy();\n\t\treturn this._proxy.listProcesses();\n\t}\n\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst measurements: IPtyHostLatencyMeasurement[] = [];\n\t\tconst sw = new StopWatch();\n\t\tif (this._directProxy) {\n\t\t\tawait this._directProxy.getLatency();\n\t\t\tsw.stop();\n\t\t\tmeasurements.push({\n\t\t\t\tlabel: \"window<->ptyhost (message port)\",\n\t\t\t\tlatency: sw.elapsed(),\n\t\t\t});\n\t\t\tsw.reset();\n\t\t}\n\t\tconst results = await this._localPtyService.getLatency();\n\t\tsw.stop();\n\t\tmeasurements.push({\n\t\t\tlabel: \"window<->ptyhostservice<->ptyhost\",\n\t\t\tlatency: sw.elapsed(),\n\t\t});\n\t\treturn [...measurements, ...results];\n\t}\n\n\tasync getPerformanceMarks(): Promise<PerformanceMark[]> {\n\t\treturn this._proxy.getPerformanceMarks();\n\t}\n\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tthis._proxy.reduceConnectionGraceTime();\n\t}\n\n\tasync getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._proxy.getDefaultSystemShell(osOverride);\n\t}\n\n\tasync getProfiles(\n\t\tprofiles: unknown,\n\t\tdefaultProfile: unknown,\n\t\tincludeDetectedProfiles?: boolean,\n\t) {\n\t\treturn (\n\t\t\tthis._localPtyService.getProfiles(\n\t\t\t\tthis._workspaceContextService.getWorkspace().id,\n\t\t\t\tprofiles,\n\t\t\t\tdefaultProfile,\n\t\t\t\tincludeDetectedProfiles,\n\t\t\t) || []\n\t\t);\n\t}\n\n\t@memoize\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._proxy.getEnvironment();\n\t}\n\n\t@memoize\n\tasync getShellEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._shellEnvironmentService.getShellEnv();\n\t}\n\n\tasync getWslPath(\n\t\toriginal: string,\n\t\tdirection: \"unix-to-win\" | \"win-to-unix\",\n\t): Promise<string> {\n\t\treturn this._proxy.getWslPath(original, direction);\n\t}\n\n\tasync setTerminalLayoutInfo(\n\t\tlayoutInfo?: ITerminalsLayoutInfoById,\n\t): Promise<void> {\n\t\tconst args: ISetTerminalLayoutInfoArgs = {\n\t\t\tworkspaceId: this._getWorkspaceId(),\n\t\t\ttabs: layoutInfo ? layoutInfo.tabs : [],\n\t\t};\n\t\tawait this._proxy.setTerminalLayoutInfo(args);\n\t\t// Store in the storage service as well to be used when reviving processes as normally this\n\t\t// is stored in memory on the pty host\n\t\tthis._storageService.store(\n\t\t\tTerminalStorageKeys.TerminalLayoutInfo,\n\t\t\tJSON.stringify(args),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tasync getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tconst workspaceId = this._getWorkspaceId();\n\t\tconst layoutArgs: IGetTerminalLayoutInfoArgs = { workspaceId };\n\n\t\t// Revive processes if needed\n\t\tconst serializedState = this._storageService.get(\n\t\t\tTerminalStorageKeys.TerminalBufferState,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tconst reviveBufferState =\n\t\t\tthis._deserializeTerminalState(serializedState);\n\t\tif (reviveBufferState && reviveBufferState.length > 0) {\n\t\t\ttry {\n\t\t\t\t// Create variable resolver\n\t\t\t\tconst activeWorkspaceRootUri =\n\t\t\t\t\tthis._historyService.getLastActiveWorkspaceRoot();\n\t\t\t\tconst lastActiveWorkspace = activeWorkspaceRootUri\n\t\t\t\t\t? (this._workspaceContextService.getWorkspaceFolder(\n\t\t\t\t\t\t\tactiveWorkspaceRootUri,\n\t\t\t\t\t\t) ?? undefined)\n\t\t\t\t\t: undefined;\n\t\t\t\tconst variableResolver =\n\t\t\t\t\tterminalEnvironment.createVariableResolver(\n\t\t\t\t\t\tlastActiveWorkspace,\n\t\t\t\t\t\tawait this._terminalProfileResolverService.getEnvironment(\n\t\t\t\t\t\t\tthis.remoteAuthority,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tthis._configurationResolverService,\n\t\t\t\t\t);\n\n\t\t\t\t// Re-resolve the environments and replace it on the state so local terminals use a fresh\n\t\t\t\t// environment\n\t\t\t\tmark(\"code/terminal/willGetReviveEnvironments\");\n\t\t\t\tawait Promise.all(\n\t\t\t\t\treviveBufferState.map(\n\t\t\t\t\t\t(state) =>\n\t\t\t\t\t\t\tnew Promise<void>((r) => {\n\t\t\t\t\t\t\t\tthis._resolveEnvironmentForRevive(\n\t\t\t\t\t\t\t\t\tvariableResolver,\n\t\t\t\t\t\t\t\t\tstate.shellLaunchConfig,\n\t\t\t\t\t\t\t\t).then((freshEnv) => {\n\t\t\t\t\t\t\t\t\tstate.processLaunchConfig.env = freshEnv;\n\t\t\t\t\t\t\t\t\tr();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tmark(\"code/terminal/didGetReviveEnvironments\");\n\n\t\t\t\tmark(\"code/terminal/willReviveTerminalProcesses\");\n\t\t\t\tawait this._proxy.reviveTerminalProcesses(\n\t\t\t\t\tworkspaceId,\n\t\t\t\t\treviveBufferState,\n\t\t\t\t\tIntl.DateTimeFormat().resolvedOptions().locale,\n\t\t\t\t);\n\t\t\t\tmark(\"code/terminal/didReviveTerminalProcesses\");\n\t\t\t\tthis._storageService.remove(\n\t\t\t\t\tTerminalStorageKeys.TerminalBufferState,\n\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t);\n\t\t\t\t// If reviving processes, send the terminal layout info back to the pty host as it\n\t\t\t\t// will not have been persisted on application exit\n\t\t\t\tconst layoutInfo = this._storageService.get(\n\t\t\t\t\tTerminalStorageKeys.TerminalLayoutInfo,\n\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tmark(\"code/terminal/willSetTerminalLayoutInfo\");\n\t\t\t\t\tawait this._proxy.setTerminalLayoutInfo(\n\t\t\t\t\t\tJSON.parse(layoutInfo),\n\t\t\t\t\t);\n\t\t\t\t\tmark(\"code/terminal/didSetTerminalLayoutInfo\");\n\t\t\t\t\tthis._storageService.remove(\n\t\t\t\t\t\tTerminalStorageKeys.TerminalLayoutInfo,\n\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {\n\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\"LocalTerminalBackend#getTerminalLayoutInfo Error\",\n\t\t\t\t\te && typeof e === \"object\" && \"message\" in e\n\t\t\t\t\t\t? e.message\n\t\t\t\t\t\t: e,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this._proxy.getTerminalLayoutInfo(layoutArgs);\n\t}\n\n\tprivate async _resolveEnvironmentForRevive(\n\t\tvariableResolver: terminalEnvironment.VariableResolver | undefined,\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t): Promise<IProcessEnvironment> {\n\t\tconst platformKey = isWindows\n\t\t\t? \"windows\"\n\t\t\t: isMacintosh\n\t\t\t\t? \"osx\"\n\t\t\t\t: \"linux\";\n\t\tconst envFromConfigValue = this._configurationService.getValue<\n\t\t\tITerminalEnvironment | undefined\n\t\t>(`terminal.integrated.env.${platformKey}`);\n\t\tconst baseEnv = await (shellLaunchConfig.useShellEnvironment\n\t\t\t? this.getShellEnvironment()\n\t\t\t: this.getEnvironment());\n\t\tconst env = await terminalEnvironment.createTerminalEnvironment(\n\t\t\tshellLaunchConfig,\n\t\t\tenvFromConfigValue,\n\t\t\tvariableResolver,\n\t\t\tthis._productService.version,\n\t\t\tthis._configurationService.getValue(TerminalSettingId.DetectLocale),\n\t\t\tbaseEnv,\n\t\t);\n\t\tif (shouldUseEnvironmentVariableCollection(shellLaunchConfig)) {\n\t\t\tconst workspaceFolder = terminalEnvironment.getWorkspaceForTerminal(\n\t\t\t\tshellLaunchConfig.cwd,\n\t\t\t\tthis._workspaceContextService,\n\t\t\t\tthis._historyService,\n\t\t\t);\n\t\t\tawait this._environmentVariableService.mergedCollection.applyToProcessEnvironment(\n\t\t\t\tenv,\n\t\t\t\t{ workspaceFolder },\n\t\t\t\tvariableResolver,\n\t\t\t);\n\t\t}\n\t\treturn env;\n\t}\n\n\tprivate _getWorkspaceName(): string {\n\t\treturn this._labelService.getWorkspaceLabel(\n\t\t\tthis._workspaceContextService.getWorkspace(),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
