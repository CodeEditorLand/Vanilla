{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/electron-sandbox/terminalRemote.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize2 } from \"../../../../nls.js\";\nimport { INativeEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IRemoteAuthorityResolverService } from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { registerTerminalAction } from \"../browser/terminalActions.js\";\nimport { TerminalCommandId } from \"../common/terminal.js\";\n\nexport function registerRemoteContributions() {\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.NewLocal,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.newLocal\",\n\t\t\t\"Create New Integrated Terminal (Local)\",\n\t\t),\n\t\trun: async (c, accessor) => {\n\t\t\tconst historyService = accessor.get(IHistoryService);\n\t\t\tconst remoteAuthorityResolverService = accessor.get(\n\t\t\t\tIRemoteAuthorityResolverService,\n\t\t\t);\n\t\t\tconst nativeEnvironmentService = accessor.get(\n\t\t\t\tINativeEnvironmentService,\n\t\t\t);\n\t\t\tlet cwd: URI | undefined;\n\t\t\ttry {\n\t\t\t\tconst activeWorkspaceRootUri =\n\t\t\t\t\thistoryService.getLastActiveWorkspaceRoot(\n\t\t\t\t\t\tSchemas.vscodeRemote,\n\t\t\t\t\t);\n\t\t\t\tif (activeWorkspaceRootUri) {\n\t\t\t\t\tconst canonicalUri =\n\t\t\t\t\t\tawait remoteAuthorityResolverService.getCanonicalURI(\n\t\t\t\t\t\t\tactiveWorkspaceRootUri,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\t\tcwd = canonicalUri;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {}\n\t\t\tif (!cwd) {\n\t\t\t\tcwd = nativeEnvironmentService.userHome;\n\t\t\t}\n\t\t\tconst instance = await c.service.createTerminal({ cwd });\n\t\t\tif (!instance) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\tc.service.setActiveInstance(instance);\n\t\t\treturn c.groupService.showPanel(true);\n\t\t},\n\t});\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AAExB,SAAS,iBAAiB;AAC1B,SAAS,iCAAiC;AAC1C,SAAS,uCAAuC;AAChD,SAAS,uBAAuB;AAChC,SAAS,8BAA8B;AACvC,SAAS,yBAAyB;AAE3B,SAAS,8BAA8B;AAC7C,yBAAuB;AAAA,IACtB,IAAI,kBAAkB;AAAA,IACtB,OAAO;AAAA,MACN;AAAA,MACA;AAAA,IACD;AAAA,IACA,KAAK,8BAAO,GAAG,aAAa;AAC3B,YAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,YAAM,iCAAiC,SAAS;AAAA,QAC/C;AAAA,MACD;AACA,YAAM,2BAA2B,SAAS;AAAA,QACzC;AAAA,MACD;AACA,UAAI;AACJ,UAAI;AACH,cAAM,yBACL,eAAe;AAAA,UACd,QAAQ;AAAA,QACT;AACD,YAAI,wBAAwB;AAC3B,gBAAM,eACL,MAAM,+BAA+B;AAAA,YACpC;AAAA,UACD;AACD,cAAI,aAAa,WAAW,QAAQ,MAAM;AACzC,kBAAM;AAAA,UACP;AAAA,QACD;AAAA,MACD,QAAQ;AAAA,MAAC;AACT,UAAI,CAAC,KAAK;AACT,cAAM,yBAAyB;AAAA,MAChC;AACA,YAAM,WAAW,MAAM,EAAE,QAAQ,eAAe,EAAE,IAAI,CAAC;AACvD,UAAI,CAAC,UAAU;AACd,eAAO,QAAQ,QAAQ,MAAS;AAAA,MACjC;AAEA,QAAE,QAAQ,kBAAkB,QAAQ;AACpC,aAAO,EAAE,aAAa,UAAU,IAAI;AAAA,IACrC,GAlCK;AAAA,EAmCN,CAAC;AACF;AA3CgB;",
  "names": []
}
