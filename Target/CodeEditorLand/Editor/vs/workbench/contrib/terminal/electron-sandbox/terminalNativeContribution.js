var v=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=(s,n,e,t)=>{for(var i=t>1?void 0:t?p(n,e):n,r=s.length-1,o;r>=0;r--)(o=s[r])&&(i=(t?o(n,e,i):o(i))||i);return t&&i&&v(n,e,i),i},a=(s,n)=>(e,t)=>n(e,t,s);import{ipcRenderer as f}from"../../../../base/parts/sandbox/electron-sandbox/globals.js";import{URI as d}from"../../../../base/common/uri.js";import{IFileService as u}from"../../../../platform/files/common/files.js";import{registerRemoteContributions as I}from"./terminalRemote.js";import{IRemoteAgentService as R}from"../../../services/remote/common/remoteAgentService.js";import{INativeHostService as _}from"../../../../platform/native/common/native.js";import{Disposable as S}from"../../../../base/common/lifecycle.js";import{ITerminalService as h}from"../browser/terminal.js";import{disposableWindowInterval as w,getActiveWindow as F}from"../../../../base/browser/dom.js";let c=class extends S{constructor(e,t,i,r){super();this._fileService=e;this._terminalService=t;f.on("vscode:openFiles",(g,l)=>{this._onOpenFileRequest(l)}),this._register(r.onDidResumeOS(()=>this._onOsResume())),this._terminalService.setNativeDelegate({getWindowCount:()=>r.getWindowCount()});const o=i.getConnection();o&&o.remoteAuthority&&I()}_onOsResume(){for(const e of this._terminalService.instances)e.xterm?.forceRedraw()}async _onOpenFileRequest(e){if(e.termProgram==="vscode"&&e.filesToWait){const t=d.revive(e.filesToWait.waitMarkerFileUri);await this._whenFileDeleted(t),this._terminalService.activeInstance?.focus()}}_whenFileDeleted(e){return new Promise(t=>{let i=!1;const r=w(F(),async()=>{if(!i){i=!0;const o=await this._fileService.exists(e);i=!1,o||(r.dispose(),t(void 0))}},1e3)})}};c=m([a(0,u),a(1,h),a(2,R),a(3,_)],c);export{c as TerminalNativeContribution};
