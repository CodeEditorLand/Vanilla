var k=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var f=(p,l,t,e)=>{for(var i=e>1?void 0:e?D(l,t):l,s=p.length-1,o;s>=0;s--)(o=p[s])&&(i=(e?o(l,t,i):o(i))||i);return e&&i&&k(l,t,i),i},n=(p,l)=>(t,e)=>l(t,e,p);import{Emitter as L}from"../../../../base/common/event.js";import{isMacintosh as A,isWindows as W}from"../../../../base/common/platform.js";import{IConfigurationService as H}from"../../../../platform/configuration/common/configuration.js";import{IInstantiationService as M}from"../../../../platform/instantiation/common/instantiation.js";import{ILabelService as O}from"../../../../platform/label/common/label.js";import{Registry as N}from"../../../../platform/registry/common/platform.js";import{IStorageService as V,StorageScope as h,StorageTarget as I}from"../../../../platform/storage/common/storage.js";import{ILocalPtyService as q,ITerminalLogService as B,TerminalExtensions as F,TerminalIpcChannels as K,TerminalSettingId as _}from"../../../../platform/terminal/common/terminal.js";import{IWorkspaceContextService as G}from"../../../../platform/workspace/common/workspace.js";import{ITerminalInstanceService as U}from"../browser/terminal.js";import{ITerminalProfileResolverService as z,TERMINAL_CONFIG_SECTION as w}from"../common/terminal.js";import{TerminalStorageKeys as d}from"../common/terminalStorageKeys.js";import{LocalPty as T}from"./localPty.js";import{IConfigurationResolverService as $}from"../../../services/configurationResolver/common/configurationResolver.js";import{IShellEnvironmentService as j}from"../../../services/environment/electron-sandbox/shellEnvironmentService.js";import{IHistoryService as R}from"../../../services/history/common/history.js";import*as S from"../common/terminalEnvironment.js";import{IProductService as J}from"../../../../platform/product/common/productService.js";import{IEnvironmentVariableService as Q}from"../common/environmentVariable.js";import{BaseTerminalBackend as X}from"../browser/baseTerminalBackend.js";import{INativeHostService as Y}from"../../../../platform/native/common/native.js";import{Client as Z}from"../../../../base/parts/ipc/common/ipc.mp.js";import{acquirePort as ee}from"../../../../base/parts/ipc/electron-sandbox/ipc.mp.js";import{getDelayedChannel as te,ProxyChannel as re}from"../../../../base/parts/ipc/common/ipc.js";import{mark as y}from"../../../../base/common/performance.js";import{ILifecycleService as ie,LifecyclePhase as oe}from"../../../services/lifecycle/common/lifecycle.js";import{DeferredPromise as C}from"../../../../base/common/async.js";import{IStatusbarService as ne}from"../../../services/statusbar/browser/statusbar.js";import{memoize as x}from"../../../../base/common/decorators.js";import{StopWatch as se}from"../../../../base/common/stopwatch.js";import{IRemoteAgentService as ae}from"../../../services/remote/common/remoteAgentService.js";import{shouldUseEnvironmentVariableCollection as ce}from"../../../../platform/terminal/common/terminalEnvironment.js";let P=class{static ID="workbench.contrib.localTerminalBackend";constructor(l,t){const e=l.createInstance(v);N.as(F.Backend).registerTerminalBackend(e),t.didRegisterBackend(e.remoteAuthority)}};P=f([n(0,M),n(1,U)],P);let v=class extends X{constructor(t,e,i,s,o,r,a,c,m,u,g,le,me,E,ye,b,ve){super(s,i,E,c,b,t);this._lifecycleService=e;this._localPtyService=s;this._labelService=o;this._shellEnvironmentService=r;this._storageService=a;this._configurationResolverService=c;this._configurationService=m;this._productService=u;this._historyService=g;this._terminalProfileResolverService=le;this._environmentVariableService=me;this._nativeHostService=ye;this._remoteAgentService=ve;this._register(this.onPtyHostRestart(()=>{this._directProxy=void 0,this._directProxyClientEventually=void 0,this._connectToDirectProxy()}))}remoteAuthority=void 0;_ptys=new Map;_directProxyClientEventually;_directProxy;get _proxy(){return this._directProxy||this._localPtyService}_whenReady=new C;get whenReady(){return this._whenReady.p}setReady(){this._whenReady.complete()}_onDidRequestDetach=this._register(new L);onDidRequestDetach=this._onDidRequestDetach.event;async _connectToDirectProxy(){if(this._directProxyClientEventually){await this._directProxyClientEventually.p;return}this._logService.debug("Starting pty host");const t=new C;this._directProxyClientEventually=t;const e=re.toService(te(this._directProxyClientEventually.p.then(i=>i.getChannel(K.PtyHostWindow))));this._directProxy=e,this._remoteAgentService.getConnection()?.remoteAuthority||await this._lifecycleService.when(oe.Restored),y("code/terminal/willConnectPtyHost"),this._logService.trace("Renderer->PtyHost#connect: before acquirePort"),ee("vscode:createPtyHostMessageChannel","vscode:createPtyHostMessageChannelResult").then(i=>{y("code/terminal/didConnectPtyHost"),this._logService.trace("Renderer->PtyHost#connect: connection established");const s=new Z(i,`window:${this._nativeHostService.windowId}`);t.complete(s),this._onPtyHostConnected.fire(),e.onProcessData(r=>this._ptys.get(r.id)?.handleData(r.event)),e.onDidChangeProperty(r=>this._ptys.get(r.id)?.handleDidChangeProperty(r.property)),e.onProcessExit(r=>{const a=this._ptys.get(r.id);a&&(a.handleExit(r.event),this._ptys.delete(r.id))}),e.onProcessReady(r=>this._ptys.get(r.id)?.handleReady(r.event)),e.onProcessReplay(r=>this._ptys.get(r.id)?.handleReplay(r.event)),e.onProcessOrphanQuestion(r=>this._ptys.get(r.id)?.handleOrphanQuestion()),e.onDidRequestDetach(r=>this._onDidRequestDetach.fire(r));const o=this._configurationService.getValue(w);for(const r of Object.keys(o.autoReplies)){const a=o.autoReplies[r];a&&e.installAutoReply(r,a)}this._register(this._configurationService.onDidChangeConfiguration(async r=>{if(r.affectsConfiguration(_.AutoReplies)){e.uninstallAllAutoReplies();const a=this._configurationService.getValue(w);for(const c of Object.keys(a.autoReplies)){const m=a.autoReplies[c];m&&this._proxy.installAutoReply(c,m)}}})),this.getEnvironment()})}async requestDetachInstance(t,e){return this._proxy.requestDetachInstance(t,e)}async acceptDetachInstanceReply(t,e){if(!e){this._logService.warn("Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId");return}return this._proxy.acceptDetachInstanceReply(t,e)}async persistTerminalState(){const t=Array.from(this._ptys.keys()),e=await this._proxy.serializeTerminalState(t);this._storageService.store(d.TerminalBufferState,e,h.WORKSPACE,I.MACHINE)}async updateTitle(t,e,i){await this._proxy.updateTitle(t,e,i)}async updateIcon(t,e,i,s){await this._proxy.updateIcon(t,e,i,s)}async updateProperty(t,e,i){return this._proxy.updateProperty(t,e,i)}async createProcess(t,e,i,s,o,r,a,c){await this._connectToDirectProxy();const m=await this._shellEnvironmentService.getShellEnv(),u=await this._proxy.createProcess(t,e,i,s,o,r,m,a,c,this._getWorkspaceId(),this._getWorkspaceName()),g=new T(u,c,this._proxy);return this._ptys.set(u,g),g}async attachToProcess(t){await this._connectToDirectProxy();try{await this._proxy.attachToProcess(t);const e=new T(t,!0,this._proxy);return this._ptys.set(t,e),e}catch(e){this._logService.warn(`Couldn't attach to process ${e.message}`)}}async attachToRevivedProcess(t){await this._connectToDirectProxy();try{const e=await this._proxy.getRevivedPtyNewId(this._getWorkspaceId(),t)??t;return await this.attachToProcess(e)}catch(e){this._logService.warn(`Couldn't attach to process ${e.message}`)}}async listProcesses(){return await this._connectToDirectProxy(),this._proxy.listProcesses()}async getLatency(){const t=[],e=new se;this._directProxy&&(await this._directProxy.getLatency(),e.stop(),t.push({label:"window<->ptyhost (message port)",latency:e.elapsed()}),e.reset());const i=await this._localPtyService.getLatency();return e.stop(),t.push({label:"window<->ptyhostservice<->ptyhost",latency:e.elapsed()}),[...t,...i]}async getPerformanceMarks(){return this._proxy.getPerformanceMarks()}async reduceConnectionGraceTime(){this._proxy.reduceConnectionGraceTime()}async getDefaultSystemShell(t){return this._proxy.getDefaultSystemShell(t)}async getProfiles(t,e,i){return this._localPtyService.getProfiles(this._workspaceContextService.getWorkspace().id,t,e,i)||[]}async getEnvironment(){return this._proxy.getEnvironment()}async getShellEnvironment(){return this._shellEnvironmentService.getShellEnv()}async getWslPath(t,e){return this._proxy.getWslPath(t,e)}async setTerminalLayoutInfo(t){const e={workspaceId:this._getWorkspaceId(),tabs:t?t.tabs:[]};await this._proxy.setTerminalLayoutInfo(e),this._storageService.store(d.TerminalLayoutInfo,JSON.stringify(e),h.WORKSPACE,I.MACHINE)}async getTerminalLayoutInfo(){const t=this._getWorkspaceId(),e={workspaceId:t},i=this._storageService.get(d.TerminalBufferState,h.WORKSPACE),s=this._deserializeTerminalState(i);if(s&&s.length>0)try{const o=this._historyService.getLastActiveWorkspaceRoot(),r=o?this._workspaceContextService.getWorkspaceFolder(o)??void 0:void 0,a=S.createVariableResolver(r,await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority),this._configurationResolverService);y("code/terminal/willGetReviveEnvironments"),await Promise.all(s.map(m=>new Promise(u=>{this._resolveEnvironmentForRevive(a,m.shellLaunchConfig).then(g=>{m.processLaunchConfig.env=g,u()})}))),y("code/terminal/didGetReviveEnvironments"),y("code/terminal/willReviveTerminalProcesses"),await this._proxy.reviveTerminalProcesses(t,s,Intl.DateTimeFormat().resolvedOptions().locale),y("code/terminal/didReviveTerminalProcesses"),this._storageService.remove(d.TerminalBufferState,h.WORKSPACE);const c=this._storageService.get(d.TerminalLayoutInfo,h.WORKSPACE);c&&(y("code/terminal/willSetTerminalLayoutInfo"),await this._proxy.setTerminalLayoutInfo(JSON.parse(c)),y("code/terminal/didSetTerminalLayoutInfo"),this._storageService.remove(d.TerminalLayoutInfo,h.WORKSPACE))}catch(o){this._logService.warn("LocalTerminalBackend#getTerminalLayoutInfo Error",o&&typeof o=="object"&&"message"in o?o.message:o)}return this._proxy.getTerminalLayoutInfo(e)}async _resolveEnvironmentForRevive(t,e){const i=W?"windows":A?"osx":"linux",s=this._configurationService.getValue(`terminal.integrated.env.${i}`),o=await(e.useShellEnvironment?this.getShellEnvironment():this.getEnvironment()),r=await S.createTerminalEnvironment(e,s,t,this._productService.version,this._configurationService.getValue(_.DetectLocale),o);if(ce(e)){const a=S.getWorkspaceForTerminal(e.cwd,this._workspaceContextService,this._historyService);await this._environmentVariableService.mergedCollection.applyToProcessEnvironment(r,{workspaceFolder:a},t)}return r}_getWorkspaceName(){return this._labelService.getWorkspaceLabel(this._workspaceContextService.getWorkspace())}};f([x],v.prototype,"getEnvironment",1),f([x],v.prototype,"getShellEnvironment",1),v=f([n(0,G),n(1,ie),n(2,B),n(3,q),n(4,O),n(5,j),n(6,V),n(7,$),n(8,H),n(9,J),n(10,R),n(11,z),n(12,Q),n(13,R),n(14,Y),n(15,ne),n(16,ae)],v);export{P as LocalTerminalBackendContribution};
