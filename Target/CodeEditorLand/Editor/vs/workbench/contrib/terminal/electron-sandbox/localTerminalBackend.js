var k=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var f=(p,l,t,e)=>{for(var i=e>1?void 0:e?D(l,t):l,s=p.length-1,o;s>=0;s--)(o=p[s])&&(i=(e?o(l,t,i):o(i))||i);return e&&i&&k(l,t,i),i},n=(p,l)=>(t,e)=>l(t,e,p);import{DeferredPromise as I}from"../../../../../vs/base/common/async.js";import{memoize as _}from"../../../../../vs/base/common/decorators.js";import{Emitter as L}from"../../../../../vs/base/common/event.js";import{mark as y}from"vs/base/common/performance";import{isMacintosh as A,isWindows as W}from"../../../../../vs/base/common/platform.js";import{StopWatch as H}from"../../../../../vs/base/common/stopwatch.js";import"../../../../../vs/base/common/uri.js";import{getDelayedChannel as M,ProxyChannel as O}from"../../../../../vs/base/parts/ipc/common/ipc.js";import{Client as N}from"../../../../../vs/base/parts/ipc/common/ipc.mp.js";import{acquirePort as V}from"../../../../../vs/base/parts/ipc/electron-sandbox/ipc.mp.js";import{IConfigurationService as q}from"../../../../../vs/platform/configuration/common/configuration.js";import{IInstantiationService as B}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{ILabelService as F}from"../../../../../vs/platform/label/common/label.js";import{INativeHostService as K}from"../../../../../vs/platform/native/common/native.js";import{IProductService as G}from"../../../../../vs/platform/product/common/productService.js";import{Registry as U}from"../../../../../vs/platform/registry/common/platform.js";import{IStorageService as z,StorageScope as h,StorageTarget as w}from"../../../../../vs/platform/storage/common/storage.js";import{ILocalPtyService as $,ITerminalLogService as j,TerminalExtensions as J,TerminalIpcChannels as Q,TerminalSettingId as T}from"../../../../../vs/platform/terminal/common/terminal.js";import{shouldUseEnvironmentVariableCollection as X}from"../../../../../vs/platform/terminal/common/terminalEnvironment.js";import"../../../../../vs/platform/terminal/common/terminalProcess.js";import{IWorkspaceContextService as Y}from"../../../../../vs/platform/workspace/common/workspace.js";import"../../../../../vs/workbench/common/contributions.js";import{BaseTerminalBackend as Z}from"../../../../../vs/workbench/contrib/terminal/browser/baseTerminalBackend.js";import{ITerminalInstanceService as ee}from"../../../../../vs/workbench/contrib/terminal/browser/terminal.js";import{IEnvironmentVariableService as te}from"../../../../../vs/workbench/contrib/terminal/common/environmentVariable.js";import{ITerminalProfileResolverService as re,TERMINAL_CONFIG_SECTION as R}from"../../../../../vs/workbench/contrib/terminal/common/terminal.js";import*as S from"../../../../../vs/workbench/contrib/terminal/common/terminalEnvironment.js";import{TerminalStorageKeys as d}from"../../../../../vs/workbench/contrib/terminal/common/terminalStorageKeys.js";import{LocalPty as C}from"../../../../../vs/workbench/contrib/terminal/electron-sandbox/localPty.js";import{IConfigurationResolverService as ie}from"../../../../../vs/workbench/services/configurationResolver/common/configurationResolver.js";import{IShellEnvironmentService as oe}from"../../../../../vs/workbench/services/environment/electron-sandbox/shellEnvironmentService.js";import{IHistoryService as x}from"../../../../../vs/workbench/services/history/common/history.js";import{ILifecycleService as ne,LifecyclePhase as se}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";import{IRemoteAgentService as ae}from"../../../../../vs/workbench/services/remote/common/remoteAgentService.js";import{IStatusbarService as ce}from"../../../../../vs/workbench/services/statusbar/browser/statusbar.js";let P=class{static ID="workbench.contrib.localTerminalBackend";constructor(l,t){const e=l.createInstance(v);U.as(J.Backend).registerTerminalBackend(e),t.didRegisterBackend(e.remoteAuthority)}};P=f([n(0,B),n(1,ee)],P);let v=class extends Z{constructor(t,e,i,s,o,r,a,c,m,u,g,le,me,E,ye,b,ve){super(s,i,E,c,b,t);this._lifecycleService=e;this._localPtyService=s;this._labelService=o;this._shellEnvironmentService=r;this._storageService=a;this._configurationResolverService=c;this._configurationService=m;this._productService=u;this._historyService=g;this._terminalProfileResolverService=le;this._environmentVariableService=me;this._nativeHostService=ye;this._remoteAgentService=ve;this._register(this.onPtyHostRestart(()=>{this._directProxy=void 0,this._directProxyClientEventually=void 0,this._connectToDirectProxy()}))}remoteAuthority=void 0;_ptys=new Map;_directProxyClientEventually;_directProxy;get _proxy(){return this._directProxy||this._localPtyService}_whenReady=new I;get whenReady(){return this._whenReady.p}setReady(){this._whenReady.complete()}_onDidRequestDetach=this._register(new L);onDidRequestDetach=this._onDidRequestDetach.event;async _connectToDirectProxy(){if(this._directProxyClientEventually){await this._directProxyClientEventually.p;return}this._logService.debug("Starting pty host");const t=new I;this._directProxyClientEventually=t;const e=O.toService(M(this._directProxyClientEventually.p.then(i=>i.getChannel(Q.PtyHostWindow))));this._directProxy=e,this._remoteAgentService.getConnection()?.remoteAuthority||await this._lifecycleService.when(se.Restored),y("code/terminal/willConnectPtyHost"),this._logService.trace("Renderer->PtyHost#connect: before acquirePort"),V("vscode:createPtyHostMessageChannel","vscode:createPtyHostMessageChannelResult").then(i=>{y("code/terminal/didConnectPtyHost"),this._logService.trace("Renderer->PtyHost#connect: connection established");const s=new N(i,`window:${this._nativeHostService.windowId}`);t.complete(s),this._onPtyHostConnected.fire(),e.onProcessData(r=>this._ptys.get(r.id)?.handleData(r.event)),e.onDidChangeProperty(r=>this._ptys.get(r.id)?.handleDidChangeProperty(r.property)),e.onProcessExit(r=>{const a=this._ptys.get(r.id);a&&(a.handleExit(r.event),this._ptys.delete(r.id))}),e.onProcessReady(r=>this._ptys.get(r.id)?.handleReady(r.event)),e.onProcessReplay(r=>this._ptys.get(r.id)?.handleReplay(r.event)),e.onProcessOrphanQuestion(r=>this._ptys.get(r.id)?.handleOrphanQuestion()),e.onDidRequestDetach(r=>this._onDidRequestDetach.fire(r));const o=this._configurationService.getValue(R);for(const r of Object.keys(o.autoReplies)){const a=o.autoReplies[r];a&&e.installAutoReply(r,a)}this._register(this._configurationService.onDidChangeConfiguration(async r=>{if(r.affectsConfiguration(T.AutoReplies)){e.uninstallAllAutoReplies();const a=this._configurationService.getValue(R);for(const c of Object.keys(a.autoReplies)){const m=a.autoReplies[c];m&&this._proxy.installAutoReply(c,m)}}})),this.getEnvironment()})}async requestDetachInstance(t,e){return this._proxy.requestDetachInstance(t,e)}async acceptDetachInstanceReply(t,e){if(!e){this._logService.warn("Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId");return}return this._proxy.acceptDetachInstanceReply(t,e)}async persistTerminalState(){const t=Array.from(this._ptys.keys()),e=await this._proxy.serializeTerminalState(t);this._storageService.store(d.TerminalBufferState,e,h.WORKSPACE,w.MACHINE)}async updateTitle(t,e,i){await this._proxy.updateTitle(t,e,i)}async updateIcon(t,e,i,s){await this._proxy.updateIcon(t,e,i,s)}async updateProperty(t,e,i){return this._proxy.updateProperty(t,e,i)}async createProcess(t,e,i,s,o,r,a,c){await this._connectToDirectProxy();const m=await this._shellEnvironmentService.getShellEnv(),u=await this._proxy.createProcess(t,e,i,s,o,r,m,a,c,this._getWorkspaceId(),this._getWorkspaceName()),g=new C(u,c,this._proxy);return this._ptys.set(u,g),g}async attachToProcess(t){await this._connectToDirectProxy();try{await this._proxy.attachToProcess(t);const e=new C(t,!0,this._proxy);return this._ptys.set(t,e),e}catch(e){this._logService.warn(`Couldn't attach to process ${e.message}`)}}async attachToRevivedProcess(t){await this._connectToDirectProxy();try{const e=await this._proxy.getRevivedPtyNewId(this._getWorkspaceId(),t)??t;return await this.attachToProcess(e)}catch(e){this._logService.warn(`Couldn't attach to process ${e.message}`)}}async listProcesses(){return await this._connectToDirectProxy(),this._proxy.listProcesses()}async getLatency(){const t=[],e=new H;this._directProxy&&(await this._directProxy.getLatency(),e.stop(),t.push({label:"window<->ptyhost (message port)",latency:e.elapsed()}),e.reset());const i=await this._localPtyService.getLatency();return e.stop(),t.push({label:"window<->ptyhostservice<->ptyhost",latency:e.elapsed()}),[...t,...i]}async getPerformanceMarks(){return this._proxy.getPerformanceMarks()}async reduceConnectionGraceTime(){this._proxy.reduceConnectionGraceTime()}async getDefaultSystemShell(t){return this._proxy.getDefaultSystemShell(t)}async getProfiles(t,e,i){return this._localPtyService.getProfiles(this._workspaceContextService.getWorkspace().id,t,e,i)||[]}async getEnvironment(){return this._proxy.getEnvironment()}async getShellEnvironment(){return this._shellEnvironmentService.getShellEnv()}async getWslPath(t,e){return this._proxy.getWslPath(t,e)}async setTerminalLayoutInfo(t){const e={workspaceId:this._getWorkspaceId(),tabs:t?t.tabs:[]};await this._proxy.setTerminalLayoutInfo(e),this._storageService.store(d.TerminalLayoutInfo,JSON.stringify(e),h.WORKSPACE,w.MACHINE)}async getTerminalLayoutInfo(){const t=this._getWorkspaceId(),e={workspaceId:t},i=this._storageService.get(d.TerminalBufferState,h.WORKSPACE),s=this._deserializeTerminalState(i);if(s&&s.length>0)try{const o=this._historyService.getLastActiveWorkspaceRoot(),r=o?this._workspaceContextService.getWorkspaceFolder(o)??void 0:void 0,a=S.createVariableResolver(r,await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority),this._configurationResolverService);y("code/terminal/willGetReviveEnvironments"),await Promise.all(s.map(m=>new Promise(u=>{this._resolveEnvironmentForRevive(a,m.shellLaunchConfig).then(g=>{m.processLaunchConfig.env=g,u()})}))),y("code/terminal/didGetReviveEnvironments"),y("code/terminal/willReviveTerminalProcesses"),await this._proxy.reviveTerminalProcesses(t,s,Intl.DateTimeFormat().resolvedOptions().locale),y("code/terminal/didReviveTerminalProcesses"),this._storageService.remove(d.TerminalBufferState,h.WORKSPACE);const c=this._storageService.get(d.TerminalLayoutInfo,h.WORKSPACE);c&&(y("code/terminal/willSetTerminalLayoutInfo"),await this._proxy.setTerminalLayoutInfo(JSON.parse(c)),y("code/terminal/didSetTerminalLayoutInfo"),this._storageService.remove(d.TerminalLayoutInfo,h.WORKSPACE))}catch(o){this._logService.warn("LocalTerminalBackend#getTerminalLayoutInfo Error",o&&typeof o=="object"&&"message"in o?o.message:o)}return this._proxy.getTerminalLayoutInfo(e)}async _resolveEnvironmentForRevive(t,e){const i=W?"windows":A?"osx":"linux",s=this._configurationService.getValue(`terminal.integrated.env.${i}`),o=await(e.useShellEnvironment?this.getShellEnvironment():this.getEnvironment()),r=await S.createTerminalEnvironment(e,s,t,this._productService.version,this._configurationService.getValue(T.DetectLocale),o);if(X(e)){const a=S.getWorkspaceForTerminal(e.cwd,this._workspaceContextService,this._historyService);await this._environmentVariableService.mergedCollection.applyToProcessEnvironment(r,{workspaceFolder:a},t)}return r}_getWorkspaceName(){return this._labelService.getWorkspaceLabel(this._workspaceContextService.getWorkspace())}};f([_],v.prototype,"getEnvironment",1),f([_],v.prototype,"getShellEnvironment",1),v=f([n(0,Y),n(1,ne),n(2,j),n(3,$),n(4,F),n(5,oe),n(6,z),n(7,ie),n(8,q),n(9,G),n(10,x),n(11,re),n(12,te),n(13,x),n(14,K),n(15,ce),n(16,ae)],v);export{P as LocalTerminalBackendContribution};
