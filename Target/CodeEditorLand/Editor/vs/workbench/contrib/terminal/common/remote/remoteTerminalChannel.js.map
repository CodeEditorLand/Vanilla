{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/common/remote/remoteTerminalChannel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../../base/common/event.js';\nimport { URI, UriComponents } from '../../../../../base/common/uri.js';\nimport { IChannel } from '../../../../../base/parts/ipc/common/ipc.js';\nimport { IWorkbenchConfigurationService } from '../../../../services/configuration/common/configuration.js';\nimport { IRemoteAuthorityResolverService } from '../../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { serializeEnvironmentDescriptionMap, serializeEnvironmentVariableCollection } from '../../../../../platform/terminal/common/environmentVariableShared.js';\nimport { IConfigurationResolverService } from '../../../../services/configurationResolver/common/configurationResolver.js';\nimport { SideBySideEditor, EditorResourceAccessor } from '../../../../common/editor.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { ILabelService } from '../../../../../platform/label/common/label.js';\nimport { IEnvironmentVariableService } from '../environmentVariable.js';\nimport { IProcessDataEvent, IRequestResolveVariablesEvent, IShellLaunchConfigDto, ITerminalLaunchError, ITerminalProfile, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalIcon, IProcessProperty, ProcessPropertyType, IProcessPropertyMap, TitleEventSource, ISerializedTerminalState, IPtyHostController, ITerminalProcessOptions, IProcessReadyEvent, ITerminalLogService, IPtyHostLatencyMeasurement } from '../../../../../platform/terminal/common/terminal.js';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs } from '../../../../../platform/terminal/common/terminalProcess.js';\nimport { IProcessEnvironment, OperatingSystem } from '../../../../../base/common/platform.js';\nimport { ICompleteTerminalConfiguration } from '../terminal.js';\nimport { IPtyHostProcessReplayEvent } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { ISerializableEnvironmentDescriptionMap as ISerializableEnvironmentDescriptionMap, ISerializableEnvironmentVariableCollection } from '../../../../../platform/terminal/common/environmentVariable.js';\nimport type * as performance from '../../../../../base/common/performance.js';\nimport { RemoteTerminalChannelEvent, RemoteTerminalChannelRequest } from './terminal.js';\n\nexport const REMOTE_TERMINAL_CHANNEL_NAME = 'remoteterminal';\n\nexport type ITerminalEnvironmentVariableCollections = [string, ISerializableEnvironmentVariableCollection, ISerializableEnvironmentDescriptionMap][];\n\nexport interface IWorkspaceFolderData {\n\turi: UriComponents;\n\tname: string;\n\tindex: number;\n}\n\nexport interface ICreateTerminalProcessArguments {\n\tconfiguration: ICompleteTerminalConfiguration;\n\tresolvedVariables: { [name: string]: string };\n\tenvVariableCollections: ITerminalEnvironmentVariableCollections;\n\tshellLaunchConfig: IShellLaunchConfigDto;\n\tworkspaceId: string;\n\tworkspaceName: string;\n\tworkspaceFolders: IWorkspaceFolderData[];\n\tactiveWorkspaceFolder: IWorkspaceFolderData | null;\n\tactiveFileResource: UriComponents | undefined;\n\tshouldPersistTerminal: boolean;\n\toptions: ITerminalProcessOptions;\n\tcols: number;\n\trows: number;\n\tunicodeVersion: '6' | '11';\n\tresolverEnv: { [key: string]: string | null } | undefined;\n}\n\nexport interface ICreateTerminalProcessResult {\n\tpersistentTerminalId: number;\n\tresolvedShellLaunchConfig: IShellLaunchConfigDto;\n}\n\nexport class RemoteTerminalChannelClient implements IPtyHostController {\n\tget onPtyHostExit(): Event<number> {\n\t\treturn this._channel.listen<number>(RemoteTerminalChannelEvent.OnPtyHostExitEvent);\n\t}\n\tget onPtyHostStart(): Event<void> {\n\t\treturn this._channel.listen<void>(RemoteTerminalChannelEvent.OnPtyHostStartEvent);\n\t}\n\tget onPtyHostUnresponsive(): Event<void> {\n\t\treturn this._channel.listen<void>(RemoteTerminalChannelEvent.OnPtyHostUnresponsiveEvent);\n\t}\n\tget onPtyHostResponsive(): Event<void> {\n\t\treturn this._channel.listen<void>(RemoteTerminalChannelEvent.OnPtyHostResponsiveEvent);\n\t}\n\tget onPtyHostRequestResolveVariables(): Event<IRequestResolveVariablesEvent> {\n\t\treturn this._channel.listen<IRequestResolveVariablesEvent>(RemoteTerminalChannelEvent.OnPtyHostRequestResolveVariablesEvent);\n\t}\n\tget onProcessData(): Event<{ id: number; event: IProcessDataEvent | string }> {\n\t\treturn this._channel.listen<{ id: number; event: IProcessDataEvent | string }>(RemoteTerminalChannelEvent.OnProcessDataEvent);\n\t}\n\tget onProcessExit(): Event<{ id: number; event: number | undefined }> {\n\t\treturn this._channel.listen<{ id: number; event: number | undefined }>(RemoteTerminalChannelEvent.OnProcessExitEvent);\n\t}\n\tget onProcessReady(): Event<{ id: number; event: IProcessReadyEvent }> {\n\t\treturn this._channel.listen<{ id: number; event: IProcessReadyEvent }>(RemoteTerminalChannelEvent.OnProcessReadyEvent);\n\t}\n\tget onProcessReplay(): Event<{ id: number; event: IPtyHostProcessReplayEvent }> {\n\t\treturn this._channel.listen<{ id: number; event: IPtyHostProcessReplayEvent }>(RemoteTerminalChannelEvent.OnProcessReplayEvent);\n\t}\n\tget onProcessOrphanQuestion(): Event<{ id: number }> {\n\t\treturn this._channel.listen<{ id: number }>(RemoteTerminalChannelEvent.OnProcessOrphanQuestion);\n\t}\n\tget onExecuteCommand(): Event<{ reqId: number; persistentProcessId: number; commandId: string; commandArgs: any[] }> {\n\t\treturn this._channel.listen<{ reqId: number; persistentProcessId: number; commandId: string; commandArgs: any[] }>(RemoteTerminalChannelEvent.OnExecuteCommand);\n\t}\n\tget onDidRequestDetach(): Event<{ requestId: number; workspaceId: string; instanceId: number }> {\n\t\treturn this._channel.listen<{ requestId: number; workspaceId: string; instanceId: number }>(RemoteTerminalChannelEvent.OnDidRequestDetach);\n\t}\n\tget onDidChangeProperty(): Event<{ id: number; property: IProcessProperty<any> }> {\n\t\treturn this._channel.listen<{ id: number; property: IProcessProperty<any> }>(RemoteTerminalChannelEvent.OnDidChangeProperty);\n\t}\n\n\tconstructor(\n\t\tprivate readonly _remoteAuthority: string,\n\t\tprivate readonly _channel: IChannel,\n\t\t@IWorkbenchConfigurationService private readonly _configurationService: IWorkbenchConfigurationService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _resolverService: IConfigurationResolverService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t) { }\n\n\trestartPtyHost(): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.RestartPtyHost, []);\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfigDto,\n\t\tconfiguration: ICompleteTerminalConfiguration,\n\t\tactiveWorkspaceRootUri: URI | undefined,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersistTerminal: boolean,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11'\n\t): Promise<ICreateTerminalProcessResult> {\n\t\t// Be sure to first wait for the remote configuration\n\t\tawait this._configurationService.whenRemoteConfigurationLoaded();\n\n\t\t// We will use the resolver service to resolve all the variables in the config / launch config\n\t\t// But then we will keep only some variables, since the rest need to be resolved on the remote side\n\t\tconst resolvedVariables = Object.create(null);\n\t\tconst lastActiveWorkspace = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\tlet allResolvedVariables: Map<string, string> | undefined = undefined;\n\t\ttry {\n\t\t\tallResolvedVariables = (await this._resolverService.resolveAnyMap(lastActiveWorkspace, {\n\t\t\t\tshellLaunchConfig,\n\t\t\t\tconfiguration\n\t\t\t})).resolvedVariables;\n\t\t} catch (err) {\n\t\t\tthis._logService.error(err);\n\t\t}\n\t\tif (allResolvedVariables) {\n\t\t\tfor (const [name, value] of allResolvedVariables.entries()) {\n\t\t\t\tif (/^config:/.test(name) || name === 'selectedText' || name === 'lineNumber') {\n\t\t\t\t\tresolvedVariables[name] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst envVariableCollections: ITerminalEnvironmentVariableCollections = [];\n\t\tfor (const [k, v] of this._environmentVariableService.collections.entries()) {\n\t\t\tenvVariableCollections.push([k, serializeEnvironmentVariableCollection(v.map), serializeEnvironmentDescriptionMap(v.descriptionMap)]);\n\t\t}\n\n\t\tconst resolverResult = await this._remoteAuthorityResolverService.resolveAuthority(this._remoteAuthority);\n\t\tconst resolverEnv = resolverResult.options && resolverResult.options.extensionHostEnv;\n\n\t\tconst workspace = this._workspaceContextService.getWorkspace();\n\t\tconst workspaceFolders = workspace.folders;\n\t\tconst activeWorkspaceFolder = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) : null;\n\n\t\tconst activeFileResource = EditorResourceAccessor.getOriginalUri(this._editorService.activeEditor, {\n\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\tfilterByScheme: [Schemas.file, Schemas.vscodeUserData, Schemas.vscodeRemote]\n\t\t});\n\n\t\tconst args: ICreateTerminalProcessArguments = {\n\t\t\tconfiguration,\n\t\t\tresolvedVariables,\n\t\t\tenvVariableCollections,\n\t\t\tshellLaunchConfig,\n\t\t\tworkspaceId: workspace.id,\n\t\t\tworkspaceName: this._labelService.getWorkspaceLabel(workspace),\n\t\t\tworkspaceFolders,\n\t\t\tactiveWorkspaceFolder,\n\t\t\tactiveFileResource,\n\t\t\tshouldPersistTerminal,\n\t\t\toptions,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tunicodeVersion,\n\t\t\tresolverEnv\n\t\t};\n\t\treturn await this._channel.call<ICreateTerminalProcessResult>(RemoteTerminalChannelRequest.CreateProcess, args);\n\t}\n\n\trequestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.RequestDetachInstance, [workspaceId, instanceId]);\n\t}\n\tacceptDetachInstanceReply(requestId: number, persistentProcessId: number): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.AcceptDetachInstanceReply, [requestId, persistentProcessId]);\n\t}\n\tattachToProcess(id: number): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.AttachToProcess, [id]);\n\t}\n\tdetachFromProcess(id: number, forcePersist?: boolean): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.DetachFromProcess, [id, forcePersist]);\n\t}\n\tlistProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.ListProcesses);\n\t}\n\tgetLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetLatency);\n\t}\n\tgetPerformanceMarks(): Promise<performance.PerformanceMark[]> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetPerformanceMarks);\n\t}\n\treduceConnectionGraceTime(): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.ReduceConnectionGraceTime);\n\t}\n\tprocessBinary(id: number, data: string): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.ProcessBinary, [id, data]);\n\t}\n\tstart(id: number): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.Start, [id]);\n\t}\n\tinput(id: number, data: string): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.Input, [id, data]);\n\t}\n\tacknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.AcknowledgeDataEvent, [id, charCount]);\n\t}\n\tsetUnicodeVersion(id: number, version: '6' | '11'): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.SetUnicodeVersion, [id, version]);\n\t}\n\tshutdown(id: number, immediate: boolean): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.Shutdown, [id, immediate]);\n\t}\n\tresize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.Resize, [id, cols, rows]);\n\t}\n\tclearBuffer(id: number): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.ClearBuffer, [id]);\n\t}\n\tgetInitialCwd(id: number): Promise<string> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetInitialCwd, [id]);\n\t}\n\tgetCwd(id: number): Promise<string> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetCwd, [id]);\n\t}\n\torphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.OrphanQuestionReply, [id]);\n\t}\n\tsendCommandResult(reqId: number, isError: boolean, payload: any): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.SendCommandResult, [reqId, isError, payload]);\n\t}\n\tfreePortKillProcess(port: string): Promise<{ port: string; processId: string }> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.FreePortKillProcess, [port]);\n\t}\n\tinstallAutoReply(match: string, reply: string): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.InstallAutoReply, [match, reply]);\n\t}\n\tuninstallAllAutoReplies(): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.UninstallAllAutoReplies, []);\n\t}\n\tgetDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetDefaultSystemShell, [osOverride]);\n\t}\n\tgetProfiles(profiles: unknown, defaultProfile: unknown, includeDetectedProfiles?: boolean): Promise<ITerminalProfile[]> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetProfiles, [this._workspaceContextService.getWorkspace().id, profiles, defaultProfile, includeDetectedProfiles]);\n\t}\n\tacceptPtyHostResolvedVariables(requestId: number, resolved: string[]): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.AcceptPtyHostResolvedVariables, [requestId, resolved]);\n\t}\n\n\tgetEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetEnvironment);\n\t}\n\n\tgetWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix'): Promise<string> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetWslPath, [original, direction]);\n\t}\n\n\tsetTerminalLayoutInfo(layout?: ITerminalsLayoutInfoById): Promise<void> {\n\t\tconst workspace = this._workspaceContextService.getWorkspace();\n\t\tconst args: ISetTerminalLayoutInfoArgs = {\n\t\t\tworkspaceId: workspace.id,\n\t\t\ttabs: layout ? layout.tabs : []\n\t\t};\n\t\treturn this._channel.call<void>(RemoteTerminalChannelRequest.SetTerminalLayoutInfo, args);\n\t}\n\n\tupdateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<string> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.UpdateTitle, [id, title, titleSource]);\n\t}\n\n\tupdateIcon(id: number, userInitiated: boolean, icon: TerminalIcon, color?: string): Promise<string> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.UpdateIcon, [id, userInitiated, icon, color]);\n\t}\n\n\trefreshProperty<T extends ProcessPropertyType>(id: number, property: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.RefreshProperty, [id, property]);\n\t}\n\n\tupdateProperty<T extends ProcessPropertyType>(id: number, property: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.UpdateProperty, [id, property, value]);\n\t}\n\n\tgetTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tconst workspace = this._workspaceContextService.getWorkspace();\n\t\tconst args: IGetTerminalLayoutInfoArgs = {\n\t\t\tworkspaceId: workspace.id,\n\t\t};\n\t\treturn this._channel.call<ITerminalsLayoutInfo>(RemoteTerminalChannelRequest.GetTerminalLayoutInfo, args);\n\t}\n\n\treviveTerminalProcesses(workspaceId: string, state: ISerializedTerminalState[], dateTimeFormatLocate: string): Promise<void> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.ReviveTerminalProcesses, [workspaceId, state, dateTimeFormatLocate]);\n\t}\n\n\tgetRevivedPtyNewId(id: number): Promise<number | undefined> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.GetRevivedPtyNewId, [id]);\n\t}\n\n\tserializeTerminalState(ids: number[]): Promise<string> {\n\t\treturn this._channel.call(RemoteTerminalChannelRequest.SerializeTerminalState, [ids]);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
