{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/common/environmentVariable.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tEnvironmentVariableScope,\n\tIEnvironmentVariableCollection,\n\tIMergedEnvironmentVariableCollection,\n} from \"../../../../platform/terminal/common/environmentVariable.js\";\nimport type { ITerminalStatus } from \"./terminal.js\";\n\nexport const IEnvironmentVariableService =\n\tcreateDecorator<IEnvironmentVariableService>(\"environmentVariableService\");\n\n/**\n * Tracks and persists environment variable collections as defined by extensions.\n */\nexport interface IEnvironmentVariableService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Gets a single collection constructed by merging all environment variable collections into\n\t * one.\n\t */\n\treadonly collections: ReadonlyMap<string, IEnvironmentVariableCollection>;\n\n\t/**\n\t * Gets a single collection constructed by merging all environment variable collections into\n\t * one.\n\t */\n\treadonly mergedCollection: IMergedEnvironmentVariableCollection;\n\n\t/**\n\t * An event that is fired when an extension's environment variable collection changes, the event\n\t * provides the new merged collection.\n\t */\n\tonDidChangeCollections: Event<IMergedEnvironmentVariableCollection>;\n\n\t/**\n\t * Sets an extension's environment variable collection.\n\t */\n\tset(\n\t\textensionIdentifier: string,\n\t\tcollection: IEnvironmentVariableCollection,\n\t): void;\n\n\t/**\n\t * Deletes an extension's environment variable collection.\n\t */\n\tdelete(extensionIdentifier: string): void;\n}\n\nexport interface IEnvironmentVariableCollectionWithPersistence\n\textends IEnvironmentVariableCollection {\n\treadonly persistent: boolean;\n}\n\nexport interface IEnvironmentVariableInfo {\n\treadonly requiresAction: boolean;\n\tgetStatus(scope: EnvironmentVariableScope | undefined): ITerminalStatus;\n}\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAQzB,MAAM,8BACZ,gBAA6C,4BAA4B;",
  "names": []
}
