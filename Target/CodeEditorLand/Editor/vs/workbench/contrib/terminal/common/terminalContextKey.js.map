{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/common/terminalContextKey.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { TerminalSettingId } from '../../../../platform/terminal/common/terminal.js';\nimport { TERMINAL_VIEW_ID } from './terminal.js';\n\nexport const enum TerminalContextKeyStrings {\n\tIsOpen = 'terminalIsOpen',\n\tCount = 'terminalCount',\n\tGroupCount = 'terminalGroupCount',\n\tTabsNarrow = 'isTerminalTabsNarrow',\n\tHasFixedWidth = 'terminalHasFixedWidth',\n\tProcessSupported = 'terminalProcessSupported',\n\tFocus = 'terminalFocus',\n\tFocusInAny = 'terminalFocusInAny',\n\tAccessibleBufferFocus = 'terminalAccessibleBufferFocus',\n\tAccessibleBufferOnLastLine = 'terminalAccessibleBufferOnLastLine',\n\tEditorFocus = 'terminalEditorFocus',\n\tTabsFocus = 'terminalTabsFocus',\n\tWebExtensionContributedProfile = 'terminalWebExtensionContributedProfile',\n\tTerminalHasBeenCreated = 'terminalHasBeenCreated',\n\tTerminalEditorActive = 'terminalEditorActive',\n\tTabsMouse = 'terminalTabsMouse',\n\tAltBufferActive = 'terminalAltBufferActive',\n\tSuggestWidgetVisible = 'terminalSuggestWidgetVisible',\n\tA11yTreeFocus = 'terminalA11yTreeFocus',\n\tViewShowing = 'terminalViewShowing',\n\tTextSelected = 'terminalTextSelected',\n\tTextSelectedInFocused = 'terminalTextSelectedInFocused',\n\tFindVisible = 'terminalFindVisible',\n\tFindInputFocused = 'terminalFindInputFocused',\n\tFindFocused = 'terminalFindFocused',\n\tTabsSingularSelection = 'terminalTabsSingularSelection',\n\tSplitTerminal = 'terminalSplitTerminal',\n\tShellType = 'terminalShellType',\n\tInTerminalRunCommandPicker = 'inTerminalRunCommandPicker',\n\tTerminalShellIntegrationEnabled = 'terminalShellIntegrationEnabled',\n}\n\nexport namespace TerminalContextKeys {\n\t/** Whether there is at least one opened terminal. */\n\texport const isOpen = new RawContextKey<boolean>(TerminalContextKeyStrings.IsOpen, false, true);\n\n\t/** Whether the terminal is focused. */\n\texport const focus = new RawContextKey<boolean>(TerminalContextKeyStrings.Focus, false, localize('terminalFocusContextKey', \"Whether the terminal is focused.\"));\n\n\t/** Whether any terminal is focused, including detached terminals used in other UI. */\n\texport const focusInAny = new RawContextKey<boolean>(TerminalContextKeyStrings.FocusInAny, false, localize('terminalFocusInAnyContextKey', \"Whether any terminal is focused, including detached terminals used in other UI.\"));\n\n\t/** Whether a terminal in the editor area is focused. */\n\texport const editorFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.EditorFocus, false, localize('terminalEditorFocusContextKey', \"Whether a terminal in the editor area is focused.\"));\n\n\t/** The current number of terminals. */\n\texport const count = new RawContextKey<number>(TerminalContextKeyStrings.Count, 0, localize('terminalCountContextKey', \"The current number of terminals.\"));\n\n\t/** The current number of terminal groups. */\n\texport const groupCount = new RawContextKey<number>(TerminalContextKeyStrings.GroupCount, 0, true);\n\n\t/** Whether the terminal tabs view is narrow. */\n\texport const tabsNarrow = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsNarrow, false, true);\n\n\t/** Whether the terminal tabs view is narrow. */\n\texport const terminalHasFixedWidth = new RawContextKey<boolean>(TerminalContextKeyStrings.HasFixedWidth, false, true);\n\n\t/** Whether the terminal tabs widget is focused. */\n\texport const tabsFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsFocus, false, localize('terminalTabsFocusContextKey', \"Whether the terminal tabs widget is focused.\"));\n\n\t/** Whether a web extension has contributed a profile */\n\texport const webExtensionContributedProfile = new RawContextKey<boolean>(TerminalContextKeyStrings.WebExtensionContributedProfile, false, true);\n\n\t/** Whether at least one terminal has been created */\n\texport const terminalHasBeenCreated = new RawContextKey<boolean>(TerminalContextKeyStrings.TerminalHasBeenCreated, false, true);\n\n\t/** Whether at least one terminal has been created */\n\texport const terminalEditorActive = new RawContextKey<boolean>(TerminalContextKeyStrings.TerminalEditorActive, false, true);\n\n\t/** Whether the mouse is within the terminal tabs list. */\n\texport const tabsMouse = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsMouse, false, true);\n\n\t/** The shell type of the active terminal, this is set if the type can be detected. */\n\texport const shellType = new RawContextKey<string>(TerminalContextKeyStrings.ShellType, undefined, { type: 'string', description: localize('terminalShellTypeContextKey', \"The shell type of the active terminal, this is set if the type can be detected.\") });\n\n\t/** Whether the terminal's alt buffer is active. */\n\texport const altBufferActive = new RawContextKey<boolean>(TerminalContextKeyStrings.AltBufferActive, false, localize('terminalAltBufferActive', \"Whether the terminal's alt buffer is active.\"));\n\n\t/** Whether the terminal's suggest widget is visible. */\n\texport const suggestWidgetVisible = new RawContextKey<boolean>(TerminalContextKeyStrings.SuggestWidgetVisible, false, localize('terminalSuggestWidgetVisible', \"Whether the terminal's suggest widget is visible.\"));\n\n\t/** Whether the terminal is NOT focused. */\n\texport const notFocus = focus.toNegated();\n\n\t/** Whether the terminal view is showing. */\n\texport const viewShowing = new RawContextKey<boolean>(TerminalContextKeyStrings.ViewShowing, false, localize('terminalViewShowing', \"Whether the terminal view is showing\"));\n\n\t/** Whether text is selected in the active terminal. */\n\texport const textSelected = new RawContextKey<boolean>(TerminalContextKeyStrings.TextSelected, false, localize('terminalTextSelectedContextKey', \"Whether text is selected in the active terminal.\"));\n\n\t/** Whether text is selected in a focused terminal. `textSelected` counts text selected in an active in a terminal view or an editor, where `textSelectedInFocused` simply counts text in an element with DOM focus. */\n\texport const textSelectedInFocused = new RawContextKey<boolean>(TerminalContextKeyStrings.TextSelectedInFocused, false, localize('terminalTextSelectedInFocusedContextKey', \"Whether text is selected in a focused terminal.\"));\n\n\t/** Whether text is NOT selected in the active terminal. */\n\texport const notTextSelected = textSelected.toNegated();\n\n\t/** Whether the active terminal's find widget is visible. */\n\texport const findVisible = new RawContextKey<boolean>(TerminalContextKeyStrings.FindVisible, false, true);\n\n\t/** Whether the active terminal's find widget is NOT visible. */\n\texport const notFindVisible = findVisible.toNegated();\n\n\t/** Whether the active terminal's find widget text input is focused. */\n\texport const findInputFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.FindInputFocused, false, true);\n\n\t/** Whether an element within the active terminal's find widget is focused. */\n\texport const findFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.FindFocused, false, true);\n\n\t/** Whether NO elements within the active terminal's find widget is focused. */\n\texport const notFindFocus = findInputFocus.toNegated();\n\n\t/** Whether terminal processes can be launched in the current workspace. */\n\texport const processSupported = new RawContextKey<boolean>(TerminalContextKeyStrings.ProcessSupported, false, localize('terminalProcessSupportedContextKey', \"Whether terminal processes can be launched in the current workspace.\"));\n\n\t/** Whether one terminal is selected in the terminal tabs list. */\n\texport const tabsSingularSelection = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsSingularSelection, false, localize('terminalTabsSingularSelectedContextKey', \"Whether one terminal is selected in the terminal tabs list.\"));\n\n\t/** Whether the focused tab's terminal is a split terminal. */\n\texport const splitTerminal = new RawContextKey<boolean>(TerminalContextKeyStrings.SplitTerminal, false, localize('isSplitTerminalContextKey', \"Whether the focused tab's terminal is a split terminal.\"));\n\n\t/** Whether the terminal run command picker is currently open. */\n\texport const inTerminalRunCommandPicker = new RawContextKey<boolean>(TerminalContextKeyStrings.InTerminalRunCommandPicker, false, localize('inTerminalRunCommandPickerContextKey', \"Whether the terminal run command picker is currently open.\"));\n\n\t/** Whether shell integration is enabled in the active terminal. This only considers full VS Code shell integration. */\n\texport const terminalShellIntegrationEnabled = new RawContextKey<boolean>(TerminalContextKeyStrings.TerminalShellIntegrationEnabled, false, localize('terminalShellIntegrationEnabled', \"Whether shell integration is enabled in the active terminal\"));\n\n\texport const shouldShowViewInlineActions = ContextKeyExpr.and(\n\t\tContextKeyExpr.equals('view', TERMINAL_VIEW_ID),\n\t\tContextKeyExpr.notEquals(`config.${TerminalSettingId.TabsHideCondition}`, 'never'),\n\t\tContextKeyExpr.or(\n\t\t\tContextKeyExpr.not(`config.${TerminalSettingId.TabsEnabled}`),\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.equals(`config.${TerminalSettingId.TabsShowActions}`, 'singleTerminal'),\n\t\t\t\tContextKeyExpr.equals(TerminalContextKeyStrings.GroupCount, 1)\n\t\t\t),\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.equals(`config.${TerminalSettingId.TabsShowActions}`, 'singleTerminalOrNarrow'),\n\t\t\t\tContextKeyExpr.or(\n\t\t\t\t\tContextKeyExpr.equals(TerminalContextKeyStrings.GroupCount, 1),\n\t\t\t\t\tContextKeyExpr.has(TerminalContextKeyStrings.TabsNarrow)\n\t\t\t\t)\n\t\t\t),\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.equals(`config.${TerminalSettingId.TabsShowActions}`, 'singleGroup'),\n\t\t\t\tContextKeyExpr.equals(TerminalContextKeyStrings.GroupCount, 1)\n\t\t\t),\n\t\t\tContextKeyExpr.equals(`config.${TerminalSettingId.TabsShowActions}`, 'always')\n\t\t)\n\t);\n}\n"],
  "mappings": "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",
  "names": ["TerminalContextKeyStrings", "TerminalContextKeys"]
}
