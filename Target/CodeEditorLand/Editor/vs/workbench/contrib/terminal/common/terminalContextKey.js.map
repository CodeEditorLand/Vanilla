{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/common/terminalContextKey.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tContextKeyExpr,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { TerminalSettingId } from \"../../../../platform/terminal/common/terminal.js\";\nimport { TERMINAL_VIEW_ID } from \"./terminal.js\";\n\nexport enum TerminalContextKeyStrings {\n\tIsOpen = \"terminalIsOpen\",\n\tCount = \"terminalCount\",\n\tGroupCount = \"terminalGroupCount\",\n\tTabsNarrow = \"isTerminalTabsNarrow\",\n\tHasFixedWidth = \"terminalHasFixedWidth\",\n\tProcessSupported = \"terminalProcessSupported\",\n\tFocus = \"terminalFocus\",\n\tFocusInAny = \"terminalFocusInAny\",\n\tAccessibleBufferFocus = \"terminalAccessibleBufferFocus\",\n\tAccessibleBufferOnLastLine = \"terminalAccessibleBufferOnLastLine\",\n\tEditorFocus = \"terminalEditorFocus\",\n\tTabsFocus = \"terminalTabsFocus\",\n\tWebExtensionContributedProfile = \"terminalWebExtensionContributedProfile\",\n\tTerminalHasBeenCreated = \"terminalHasBeenCreated\",\n\tTerminalEditorActive = \"terminalEditorActive\",\n\tTabsMouse = \"terminalTabsMouse\",\n\tAltBufferActive = \"terminalAltBufferActive\",\n\tSuggestWidgetVisible = \"terminalSuggestWidgetVisible\",\n\tA11yTreeFocus = \"terminalA11yTreeFocus\",\n\tViewShowing = \"terminalViewShowing\",\n\tTextSelected = \"terminalTextSelected\",\n\tTextSelectedInFocused = \"terminalTextSelectedInFocused\",\n\tFindVisible = \"terminalFindVisible\",\n\tFindInputFocused = \"terminalFindInputFocused\",\n\tFindFocused = \"terminalFindFocused\",\n\tTabsSingularSelection = \"terminalTabsSingularSelection\",\n\tSplitTerminal = \"terminalSplitTerminal\",\n\tShellType = \"terminalShellType\",\n\tInTerminalRunCommandPicker = \"inTerminalRunCommandPicker\",\n\tTerminalShellIntegrationEnabled = \"terminalShellIntegrationEnabled\",\n}\n\nexport namespace TerminalContextKeys {\n\t/** Whether there is at least one opened terminal. */\n\texport const isOpen = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.IsOpen,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether the terminal is focused. */\n\texport const focus = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.Focus,\n\t\tfalse,\n\t\tlocalize(\"terminalFocusContextKey\", \"Whether the terminal is focused.\"),\n\t);\n\n\t/** Whether any terminal is focused, including detached terminals used in other UI. */\n\texport const focusInAny = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.FocusInAny,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalFocusInAnyContextKey\",\n\t\t\t\"Whether any terminal is focused, including detached terminals used in other UI.\",\n\t\t),\n\t);\n\n\t/** Whether a terminal in the editor area is focused. */\n\texport const editorFocus = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.EditorFocus,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalEditorFocusContextKey\",\n\t\t\t\"Whether a terminal in the editor area is focused.\",\n\t\t),\n\t);\n\n\t/** The current number of terminals. */\n\texport const count = new RawContextKey<number>(\n\t\tTerminalContextKeyStrings.Count,\n\t\t0,\n\t\tlocalize(\"terminalCountContextKey\", \"The current number of terminals.\"),\n\t);\n\n\t/** The current number of terminal groups. */\n\texport const groupCount = new RawContextKey<number>(\n\t\tTerminalContextKeyStrings.GroupCount,\n\t\t0,\n\t\ttrue,\n\t);\n\n\t/** Whether the terminal tabs view is narrow. */\n\texport const tabsNarrow = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TabsNarrow,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether the terminal tabs view is narrow. */\n\texport const terminalHasFixedWidth = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.HasFixedWidth,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether the terminal tabs widget is focused. */\n\texport const tabsFocus = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TabsFocus,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalTabsFocusContextKey\",\n\t\t\t\"Whether the terminal tabs widget is focused.\",\n\t\t),\n\t);\n\n\t/** Whether a web extension has contributed a profile */\n\texport const webExtensionContributedProfile = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.WebExtensionContributedProfile,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether at least one terminal has been created */\n\texport const terminalHasBeenCreated = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TerminalHasBeenCreated,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether at least one terminal has been created */\n\texport const terminalEditorActive = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TerminalEditorActive,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether the mouse is within the terminal tabs list. */\n\texport const tabsMouse = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TabsMouse,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** The shell type of the active terminal, this is set if the type can be detected. */\n\texport const shellType = new RawContextKey<string>(\n\t\tTerminalContextKeyStrings.ShellType,\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"terminalShellTypeContextKey\",\n\t\t\t\t\"The shell type of the active terminal, this is set if the type can be detected.\",\n\t\t\t),\n\t\t},\n\t);\n\n\t/** Whether the terminal's alt buffer is active. */\n\texport const altBufferActive = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.AltBufferActive,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalAltBufferActive\",\n\t\t\t\"Whether the terminal's alt buffer is active.\",\n\t\t),\n\t);\n\n\t/** Whether the terminal's suggest widget is visible. */\n\texport const suggestWidgetVisible = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.SuggestWidgetVisible,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalSuggestWidgetVisible\",\n\t\t\t\"Whether the terminal's suggest widget is visible.\",\n\t\t),\n\t);\n\n\t/** Whether the terminal is NOT focused. */\n\texport const notFocus = focus.toNegated();\n\n\t/** Whether the terminal view is showing. */\n\texport const viewShowing = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.ViewShowing,\n\t\tfalse,\n\t\tlocalize(\"terminalViewShowing\", \"Whether the terminal view is showing\"),\n\t);\n\n\t/** Whether text is selected in the active terminal. */\n\texport const textSelected = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TextSelected,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalTextSelectedContextKey\",\n\t\t\t\"Whether text is selected in the active terminal.\",\n\t\t),\n\t);\n\n\t/** Whether text is selected in a focused terminal. `textSelected` counts text selected in an active in a terminal view or an editor, where `textSelectedInFocused` simply counts text in an element with DOM focus. */\n\texport const textSelectedInFocused = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TextSelectedInFocused,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalTextSelectedInFocusedContextKey\",\n\t\t\t\"Whether text is selected in a focused terminal.\",\n\t\t),\n\t);\n\n\t/** Whether text is NOT selected in the active terminal. */\n\texport const notTextSelected = textSelected.toNegated();\n\n\t/** Whether the active terminal's find widget is visible. */\n\texport const findVisible = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.FindVisible,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether the active terminal's find widget is NOT visible. */\n\texport const notFindVisible = findVisible.toNegated();\n\n\t/** Whether the active terminal's find widget text input is focused. */\n\texport const findInputFocus = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.FindInputFocused,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether an element within the active terminal's find widget is focused. */\n\texport const findFocus = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.FindFocused,\n\t\tfalse,\n\t\ttrue,\n\t);\n\n\t/** Whether NO elements within the active terminal's find widget is focused. */\n\texport const notFindFocus = findInputFocus.toNegated();\n\n\t/** Whether terminal processes can be launched in the current workspace. */\n\texport const processSupported = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.ProcessSupported,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalProcessSupportedContextKey\",\n\t\t\t\"Whether terminal processes can be launched in the current workspace.\",\n\t\t),\n\t);\n\n\t/** Whether one terminal is selected in the terminal tabs list. */\n\texport const tabsSingularSelection = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TabsSingularSelection,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalTabsSingularSelectedContextKey\",\n\t\t\t\"Whether one terminal is selected in the terminal tabs list.\",\n\t\t),\n\t);\n\n\t/** Whether the focused tab's terminal is a split terminal. */\n\texport const splitTerminal = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.SplitTerminal,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"isSplitTerminalContextKey\",\n\t\t\t\"Whether the focused tab's terminal is a split terminal.\",\n\t\t),\n\t);\n\n\t/** Whether the terminal run command picker is currently open. */\n\texport const inTerminalRunCommandPicker = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.InTerminalRunCommandPicker,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"inTerminalRunCommandPickerContextKey\",\n\t\t\t\"Whether the terminal run command picker is currently open.\",\n\t\t),\n\t);\n\n\t/** Whether shell integration is enabled in the active terminal. This only considers full VS Code shell integration. */\n\texport const terminalShellIntegrationEnabled = new RawContextKey<boolean>(\n\t\tTerminalContextKeyStrings.TerminalShellIntegrationEnabled,\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"terminalShellIntegrationEnabled\",\n\t\t\t\"Whether shell integration is enabled in the active terminal\",\n\t\t),\n\t);\n\n\texport const shouldShowViewInlineActions = ContextKeyExpr.and(\n\t\tContextKeyExpr.equals(\"view\", TERMINAL_VIEW_ID),\n\t\tContextKeyExpr.notEquals(\n\t\t\t`config.${TerminalSettingId.TabsHideCondition}`,\n\t\t\t\"never\",\n\t\t),\n\t\tContextKeyExpr.or(\n\t\t\tContextKeyExpr.not(`config.${TerminalSettingId.TabsEnabled}`),\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t`config.${TerminalSettingId.TabsShowActions}`,\n\t\t\t\t\t\"singleTerminal\",\n\t\t\t\t),\n\t\t\t\tContextKeyExpr.equals(TerminalContextKeyStrings.GroupCount, 1),\n\t\t\t),\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t`config.${TerminalSettingId.TabsShowActions}`,\n\t\t\t\t\t\"singleTerminalOrNarrow\",\n\t\t\t\t),\n\t\t\t\tContextKeyExpr.or(\n\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\tTerminalContextKeyStrings.GroupCount,\n\t\t\t\t\t\t1,\n\t\t\t\t\t),\n\t\t\t\t\tContextKeyExpr.has(TerminalContextKeyStrings.TabsNarrow),\n\t\t\t\t),\n\t\t\t),\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t`config.${TerminalSettingId.TabsShowActions}`,\n\t\t\t\t\t\"singleGroup\",\n\t\t\t\t),\n\t\t\t\tContextKeyExpr.equals(TerminalContextKeyStrings.GroupCount, 1),\n\t\t\t),\n\t\t\tContextKeyExpr.equals(\n\t\t\t\t`config.${TerminalSettingId.TabsShowActions}`,\n\t\t\t\t\"always\",\n\t\t\t),\n\t\t),\n\t);\n}\n"],
  "mappings": "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",
  "names": ["TerminalContextKeyStrings", "TerminalContextKeys"]
}
