{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/common/terminalClipboard.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { TerminalSettingId } from '../../../../platform/terminal/common/terminal.js';\n\nexport async function shouldPasteTerminalText(accessor: ServicesAccessor, text: string, bracketedPasteMode: boolean | undefined): Promise<boolean | { modifiedText: string }> {\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst dialogService = accessor.get(IDialogService);\n\n\t// If the clipboard has only one line, a warning should never show\n\tconst textForLines = text.split(/\\r?\\n/);\n\tif (textForLines.length === 1) {\n\t\treturn true;\n\t}\n\n\t// Get config value\n\tfunction parseConfigValue(value: unknown): 'auto' | 'always' | 'never' {\n\t\t// Valid value\n\t\tif (typeof value === 'string') {\n\t\t\tif (value === 'auto' || value === 'always' || value === 'never') {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\t// Legacy backwards compatibility\n\t\tif (typeof value === 'boolean') {\n\t\t\treturn value ? 'auto' : 'never';\n\t\t}\n\t\t// Invalid value fallback\n\t\treturn 'auto';\n\t}\n\tconst configValue = parseConfigValue(configurationService.getValue(TerminalSettingId.EnableMultiLinePasteWarning));\n\n\t// Never show it\n\tif (configValue === 'never') {\n\t\treturn true;\n\t}\n\n\t// Special edge cases to not show for auto\n\tif (configValue === 'auto') {\n\t\t// Ignore check if the shell is in bracketed paste mode (ie. the shell can handle multi-line\n\t\t// text).\n\t\tif (bracketedPasteMode) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst textForLines = text.split(/\\r?\\n/);\n\t\t// Ignore check when a command is copied with a trailing new line\n\t\tif (textForLines.length === 2 && textForLines[1].trim().length === 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tconst displayItemsCount = 3;\n\tconst maxPreviewLineLength = 30;\n\n\tlet detail = localize('preview', \"Preview:\");\n\tfor (let i = 0; i < Math.min(textForLines.length, displayItemsCount); i++) {\n\t\tconst line = textForLines[i];\n\t\tconst cleanedLine = line.length > maxPreviewLineLength ? `${line.slice(0, maxPreviewLineLength)}\u2026` : line;\n\t\tdetail += `\\n${cleanedLine}`;\n\t}\n\n\tif (textForLines.length > displayItemsCount) {\n\t\tdetail += `\\n\u2026`;\n\t}\n\n\tconst { result, checkboxChecked } = await dialogService.prompt<{ confirmed: boolean; singleLine: boolean }>({\n\t\tmessage: localize('confirmMoveTrashMessageFilesAndDirectories', \"Are you sure you want to paste {0} lines of text into the terminal?\", textForLines.length),\n\t\tdetail,\n\t\ttype: 'warning',\n\t\tbuttons: [\n\t\t\t{\n\t\t\t\tlabel: localize({ key: 'multiLinePasteButton', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n\t\t\t\trun: () => ({ confirmed: true, singleLine: false })\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize({ key: 'multiLinePasteButton.oneLine', comment: ['&& denotes a mnemonic'] }, \"Paste as &&one line\"),\n\t\t\t\trun: () => ({ confirmed: true, singleLine: true })\n\t\t\t}\n\t\t],\n\t\tcancelButton: true,\n\t\tcheckbox: {\n\t\t\tlabel: localize('doNotAskAgain', \"Do not ask me again\")\n\t\t}\n\t});\n\n\tif (!result) {\n\t\treturn false;\n\t}\n\n\tif (result.confirmed && checkboxChecked) {\n\t\tawait configurationService.updateValue(TerminalSettingId.EnableMultiLinePasteWarning, false);\n\t}\n\n\tif (result.singleLine) {\n\t\treturn { modifiedText: text.replace(/\\r?\\n/g, '') };\n\t}\n\n\treturn result.confirmed;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAElC,eAAsB,wBAAwB,UAA4B,MAAc,oBAAsF;AAC7K,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,gBAAgB,SAAS,IAAI,cAAc;AAGjD,QAAM,eAAe,KAAK,MAAM,OAAO;AACvC,MAAI,aAAa,WAAW,GAAG;AAC9B,WAAO;AAAA,EACR;AAGA,WAAS,iBAAiB,OAA6C;AAEtE,QAAI,OAAO,UAAU,UAAU;AAC9B,UAAI,UAAU,UAAU,UAAU,YAAY,UAAU,SAAS;AAChE,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,OAAO,UAAU,WAAW;AAC/B,aAAO,QAAQ,SAAS;AAAA,IACzB;AAEA,WAAO;AAAA,EACR;AAbS;AAcT,QAAM,cAAc,iBAAiB,qBAAqB,SAAS,kBAAkB,2BAA2B,CAAC;AAGjH,MAAI,gBAAgB,SAAS;AAC5B,WAAO;AAAA,EACR;AAGA,MAAI,gBAAgB,QAAQ;AAG3B,QAAI,oBAAoB;AACvB,aAAO;AAAA,IACR;AAEA,UAAMA,gBAAe,KAAK,MAAM,OAAO;AAEvC,QAAIA,cAAa,WAAW,KAAKA,cAAa,CAAC,EAAE,KAAK,EAAE,WAAW,GAAG;AACrE,aAAO;AAAA,IACR;AAAA,EACD;AAEA,QAAM,oBAAoB;AAC1B,QAAM,uBAAuB;AAE7B,MAAI,SAAS,SAAS,WAAW,UAAU;AAC3C,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,aAAa,QAAQ,iBAAiB,GAAG,KAAK;AAC1E,UAAM,OAAO,aAAa,CAAC;AAC3B,UAAM,cAAc,KAAK,SAAS,uBAAuB,GAAG,KAAK,MAAM,GAAG,oBAAoB,CAAC,WAAM;AACrG,cAAU;AAAA,EAAK,WAAW;AAAA,EAC3B;AAEA,MAAI,aAAa,SAAS,mBAAmB;AAC5C,cAAU;AAAA;AAAA,EACX;AAEA,QAAM,EAAE,QAAQ,gBAAgB,IAAI,MAAM,cAAc,OAAoD;AAAA,IAC3G,SAAS,SAAS,8CAA8C,uEAAuE,aAAa,MAAM;AAAA,IAC1J;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACR;AAAA,QACC,OAAO,SAAS,EAAE,KAAK,wBAAwB,SAAS,CAAC,uBAAuB,EAAE,GAAG,SAAS;AAAA,QAC9F,KAAK,8BAAO,EAAE,WAAW,MAAM,YAAY,MAAM,IAA5C;AAAA,MACN;AAAA,MACA;AAAA,QACC,OAAO,SAAS,EAAE,KAAK,gCAAgC,SAAS,CAAC,uBAAuB,EAAE,GAAG,qBAAqB;AAAA,QAClH,KAAK,8BAAO,EAAE,WAAW,MAAM,YAAY,KAAK,IAA3C;AAAA,MACN;AAAA,IACD;AAAA,IACA,cAAc;AAAA,IACd,UAAU;AAAA,MACT,OAAO,SAAS,iBAAiB,qBAAqB;AAAA,IACvD;AAAA,EACD,CAAC;AAED,MAAI,CAAC,QAAQ;AACZ,WAAO;AAAA,EACR;AAEA,MAAI,OAAO,aAAa,iBAAiB;AACxC,UAAM,qBAAqB,YAAY,kBAAkB,6BAA6B,KAAK;AAAA,EAC5F;AAEA,MAAI,OAAO,YAAY;AACtB,WAAO,EAAE,cAAc,KAAK,QAAQ,UAAU,EAAE,EAAE;AAAA,EACnD;AAEA,SAAO,OAAO;AACf;AA9FsB;",
  "names": ["textForLines"]
}
