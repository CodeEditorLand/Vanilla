{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/common/terminalEnvironment.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * This module contains utility functions related to the environment, cwd and paths.\n */\n\nimport * as path from '../../../../base/common/path.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IWorkspaceContextService, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { sanitizeProcessEnvironment } from '../../../../base/common/processes.js';\nimport { IShellLaunchConfig, ITerminalBackend, ITerminalEnvironment, TerminalShellType, WindowsShellType } from '../../../../platform/terminal/common/terminal.js';\nimport { IProcessEnvironment, isWindows, isMacintosh, language, OperatingSystem } from '../../../../base/common/platform.js';\nimport { escapeNonWindowsPath, sanitizeCwd } from '../../../../platform/terminal/common/terminalEnvironment.js';\nimport { isString } from '../../../../base/common/types.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport function mergeEnvironments(parent: IProcessEnvironment, other: ITerminalEnvironment | undefined): void {\n\tif (!other) {\n\t\treturn;\n\t}\n\n\t// On Windows apply the new values ignoring case, while still retaining\n\t// the case of the original key.\n\tif (isWindows) {\n\t\tfor (const configKey in other) {\n\t\t\tlet actualKey = configKey;\n\t\t\tfor (const envKey in parent) {\n\t\t\t\tif (configKey.toLowerCase() === envKey.toLowerCase()) {\n\t\t\t\t\tactualKey = envKey;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst value = other[configKey];\n\t\t\tif (value !== undefined) {\n\t\t\t\t_mergeEnvironmentValue(parent, actualKey, value);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tObject.keys(other).forEach((key) => {\n\t\t\tconst value = other[key];\n\t\t\tif (value !== undefined) {\n\t\t\t\t_mergeEnvironmentValue(parent, key, value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction _mergeEnvironmentValue(env: ITerminalEnvironment, key: string, value: string | null): void {\n\tif (typeof value === 'string') {\n\t\tenv[key] = value;\n\t} else {\n\t\tdelete env[key];\n\t}\n}\n\nexport function addTerminalEnvironmentKeys(env: IProcessEnvironment, version: string | undefined, locale: string | undefined, detectLocale: 'auto' | 'off' | 'on'): void {\n\tenv['TERM_PROGRAM'] = 'vscode';\n\tif (version) {\n\t\tenv['TERM_PROGRAM_VERSION'] = version;\n\t}\n\tif (shouldSetLangEnvVariable(env, detectLocale)) {\n\t\tenv['LANG'] = getLangEnvVariable(locale);\n\t}\n\tenv['COLORTERM'] = 'truecolor';\n}\n\nfunction mergeNonNullKeys(env: IProcessEnvironment, other: ITerminalEnvironment | undefined) {\n\tif (!other) {\n\t\treturn;\n\t}\n\tfor (const key of Object.keys(other)) {\n\t\tconst value = other[key];\n\t\tif (value !== undefined && value !== null) {\n\t\t\tenv[key] = value;\n\t\t}\n\t}\n}\n\nasync function resolveConfigurationVariables(variableResolver: VariableResolver, env: ITerminalEnvironment): Promise<ITerminalEnvironment> {\n\tawait Promise.all(Object.entries(env).map(async ([key, value]) => {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\tenv[key] = await variableResolver(value);\n\t\t\t} catch (e) {\n\t\t\t\tenv[key] = value;\n\t\t\t}\n\t\t}\n\t}));\n\n\treturn env;\n}\n\nexport function shouldSetLangEnvVariable(env: IProcessEnvironment, detectLocale: 'auto' | 'off' | 'on'): boolean {\n\tif (detectLocale === 'on') {\n\t\treturn true;\n\t}\n\tif (detectLocale === 'auto') {\n\t\tconst lang = env['LANG'];\n\t\treturn !lang || (lang.search(/\\.UTF\\-8$/) === -1 && lang.search(/\\.utf8$/) === -1 && lang.search(/\\.euc.+/) === -1);\n\t}\n\treturn false; // 'off'\n}\n\nexport function getLangEnvVariable(locale?: string): string {\n\tconst parts = locale ? locale.split('-') : [];\n\tconst n = parts.length;\n\tif (n === 0) {\n\t\t// Fallback to en_US if the locale is unknown\n\t\treturn 'en_US.UTF-8';\n\t}\n\tif (n === 1) {\n\t\t// The local may only contain the language, not the variant, if this is the case guess the\n\t\t// variant such that it can be used as a valid $LANG variable. The language variant chosen\n\t\t// is the original and/or most prominent with help from\n\t\t// https://stackoverflow.com/a/2502675/1156119\n\t\t// The list of locales was generated by running `locale -a` on macOS\n\t\tconst languageVariants: { [key: string]: string } = {\n\t\t\taf: 'ZA',\n\t\t\tam: 'ET',\n\t\t\tbe: 'BY',\n\t\t\tbg: 'BG',\n\t\t\tca: 'ES',\n\t\t\tcs: 'CZ',\n\t\t\tda: 'DK',\n\t\t\t// de: 'AT',\n\t\t\t// de: 'CH',\n\t\t\tde: 'DE',\n\t\t\tel: 'GR',\n\t\t\t// en: 'AU',\n\t\t\t// en: 'CA',\n\t\t\t// en: 'GB',\n\t\t\t// en: 'IE',\n\t\t\t// en: 'NZ',\n\t\t\ten: 'US',\n\t\t\tes: 'ES',\n\t\t\tet: 'EE',\n\t\t\teu: 'ES',\n\t\t\tfi: 'FI',\n\t\t\t// fr: 'BE',\n\t\t\t// fr: 'CA',\n\t\t\t// fr: 'CH',\n\t\t\tfr: 'FR',\n\t\t\the: 'IL',\n\t\t\thr: 'HR',\n\t\t\thu: 'HU',\n\t\t\thy: 'AM',\n\t\t\tis: 'IS',\n\t\t\t// it: 'CH',\n\t\t\tit: 'IT',\n\t\t\tja: 'JP',\n\t\t\tkk: 'KZ',\n\t\t\tko: 'KR',\n\t\t\tlt: 'LT',\n\t\t\t// nl: 'BE',\n\t\t\tnl: 'NL',\n\t\t\tno: 'NO',\n\t\t\tpl: 'PL',\n\t\t\tpt: 'BR',\n\t\t\t// pt: 'PT',\n\t\t\tro: 'RO',\n\t\t\tru: 'RU',\n\t\t\tsk: 'SK',\n\t\t\tsl: 'SI',\n\t\t\tsr: 'YU',\n\t\t\tsv: 'SE',\n\t\t\ttr: 'TR',\n\t\t\tuk: 'UA',\n\t\t\tzh: 'CN',\n\t\t};\n\t\tif (parts[0] in languageVariants) {\n\t\t\tparts.push(languageVariants[parts[0]]);\n\t\t}\n\t} else {\n\t\t// Ensure the variant is uppercase to be a valid $LANG\n\t\tparts[1] = parts[1].toUpperCase();\n\t}\n\treturn parts.join('_') + '.UTF-8';\n}\n\nexport async function getCwd(\n\tshell: IShellLaunchConfig,\n\tuserHome: string | undefined,\n\tvariableResolver: VariableResolver | undefined,\n\troot: URI | undefined,\n\tcustomCwd: string | undefined,\n\tlogService?: ILogService\n): Promise<string> {\n\tif (shell.cwd) {\n\t\tconst unresolved = (typeof shell.cwd === 'object') ? shell.cwd.fsPath : shell.cwd;\n\t\tconst resolved = await _resolveCwd(unresolved, variableResolver);\n\t\treturn sanitizeCwd(resolved || unresolved);\n\t}\n\n\tlet cwd: string | undefined;\n\n\tif (!shell.ignoreConfigurationCwd && customCwd) {\n\t\tif (variableResolver) {\n\t\t\tcustomCwd = await _resolveCwd(customCwd, variableResolver, logService);\n\t\t}\n\t\tif (customCwd) {\n\t\t\tif (path.isAbsolute(customCwd)) {\n\t\t\t\tcwd = customCwd;\n\t\t\t} else if (root) {\n\t\t\t\tcwd = path.join(root.fsPath, customCwd);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there was no custom cwd or it was relative with no workspace\n\tif (!cwd) {\n\t\tcwd = root ? root.fsPath : userHome || '';\n\t}\n\n\treturn sanitizeCwd(cwd);\n}\n\nasync function _resolveCwd(cwd: string, variableResolver: VariableResolver | undefined, logService?: ILogService): Promise<string | undefined> {\n\tif (variableResolver) {\n\t\ttry {\n\t\t\treturn await variableResolver(cwd);\n\t\t} catch (e) {\n\t\t\tlogService?.error('Could not resolve terminal cwd', e);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\treturn cwd;\n}\n\nexport type VariableResolver = (str: string) => Promise<string>;\n\nexport function createVariableResolver(lastActiveWorkspace: IWorkspaceFolder | undefined, env: IProcessEnvironment, configurationResolverService: IConfigurationResolverService | undefined): VariableResolver | undefined {\n\tif (!configurationResolverService) {\n\t\treturn undefined;\n\t}\n\treturn (str) => configurationResolverService.resolveWithEnvironment(env, lastActiveWorkspace, str);\n}\n\nexport async function createTerminalEnvironment(\n\tshellLaunchConfig: IShellLaunchConfig,\n\tenvFromConfig: ITerminalEnvironment | undefined,\n\tvariableResolver: VariableResolver | undefined,\n\tversion: string | undefined,\n\tdetectLocale: 'auto' | 'off' | 'on',\n\tbaseEnv: IProcessEnvironment\n): Promise<IProcessEnvironment> {\n\t// Create a terminal environment based on settings, launch config and permissions\n\tconst env: IProcessEnvironment = {};\n\tif (shellLaunchConfig.strictEnv) {\n\t\t// strictEnv is true, only use the requested env (ignoring null entries)\n\t\tmergeNonNullKeys(env, shellLaunchConfig.env);\n\t} else {\n\t\t// Merge process env with the env from config and from shellLaunchConfig\n\t\tmergeNonNullKeys(env, baseEnv);\n\n\t\tconst allowedEnvFromConfig = { ...envFromConfig };\n\n\t\t// Resolve env vars from config and shell\n\t\tif (variableResolver) {\n\t\t\tif (allowedEnvFromConfig) {\n\t\t\t\tawait resolveConfigurationVariables(variableResolver, allowedEnvFromConfig);\n\t\t\t}\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tawait resolveConfigurationVariables(variableResolver, shellLaunchConfig.env);\n\t\t\t}\n\t\t}\n\n\t\t// Workaround for https://github.com/microsoft/vscode/issues/204005\n\t\t// We should restore the following environment variables when a user\n\t\t// launches the application using the CLI so that integrated terminal\n\t\t// can still inherit these variables.\n\t\t// We are not bypassing the restrictions implied in https://github.com/electron/electron/pull/40770\n\t\t// since this only affects integrated terminal and not the application itself.\n\t\tif (isMacintosh) {\n\t\t\t// Restore NODE_OPTIONS if it was set\n\t\t\tif (env['VSCODE_NODE_OPTIONS']) {\n\t\t\t\tenv['NODE_OPTIONS'] = env['VSCODE_NODE_OPTIONS'];\n\t\t\t\tdelete env['VSCODE_NODE_OPTIONS'];\n\t\t\t}\n\n\t\t\t// Restore NODE_REPL_EXTERNAL_MODULE if it was set\n\t\t\tif (env['VSCODE_NODE_REPL_EXTERNAL_MODULE']) {\n\t\t\t\tenv['NODE_REPL_EXTERNAL_MODULE'] = env['VSCODE_NODE_REPL_EXTERNAL_MODULE'];\n\t\t\t\tdelete env['VSCODE_NODE_REPL_EXTERNAL_MODULE'];\n\t\t\t}\n\t\t}\n\n\t\t// Sanitize the environment, removing any undesirable VS Code and Electron environment\n\t\t// variables\n\t\tsanitizeProcessEnvironment(env, 'VSCODE_IPC_HOOK_CLI');\n\n\t\t// Merge config (settings) and ShellLaunchConfig environments\n\t\tmergeEnvironments(env, allowedEnvFromConfig);\n\t\tmergeEnvironments(env, shellLaunchConfig.env);\n\n\t\t// Adding other env keys necessary to create the process\n\t\taddTerminalEnvironmentKeys(env, version, language, detectLocale);\n\t}\n\treturn env;\n}\n\n/**\n * Takes a path and returns the properly escaped path to send to a given shell. On Windows, this\n * included trying to prepare the path for WSL if needed.\n *\n * @param originalPath The path to be escaped and formatted.\n * @param executable The executable off the shellLaunchConfig.\n * @param title The terminal's title.\n * @param shellType The type of shell the path is being sent to.\n * @param backend The backend for the terminal.\n * @param isWindowsFrontend Whether the frontend is Windows, this is only exposed for injection via\n * tests.\n * @returns An escaped version of the path to be execuded in the terminal.\n */\nexport async function preparePathForShell(resource: string | URI, executable: string | undefined, title: string, shellType: TerminalShellType | undefined, backend: Pick<ITerminalBackend, 'getWslPath'> | undefined, os: OperatingSystem | undefined, isWindowsFrontend: boolean = isWindows): Promise<string> {\n\tlet originalPath: string;\n\tif (isString(resource)) {\n\t\toriginalPath = resource;\n\t} else {\n\t\toriginalPath = resource.fsPath;\n\t\t// Apply backend OS-specific formatting to the path since URI.fsPath uses the frontend's OS\n\t\tif (isWindowsFrontend && os !== OperatingSystem.Windows) {\n\t\t\toriginalPath = originalPath.replace(/\\\\/g, '\\/');\n\t\t} else if (!isWindowsFrontend && os === OperatingSystem.Windows) {\n\t\t\toriginalPath = originalPath.replace(/\\//g, '\\\\');\n\t\t}\n\t}\n\n\tif (!executable) {\n\t\treturn originalPath;\n\t}\n\n\tconst hasSpace = originalPath.includes(' ');\n\tconst hasParens = originalPath.includes('(') || originalPath.includes(')');\n\n\tconst pathBasename = path.basename(executable, '.exe');\n\tconst isPowerShell = pathBasename === 'pwsh' ||\n\t\ttitle === 'pwsh' ||\n\t\tpathBasename === 'powershell' ||\n\t\ttitle === 'powershell';\n\n\n\tif (isPowerShell && (hasSpace || originalPath.includes('\\''))) {\n\t\treturn `& '${originalPath.replace(/'/g, '\\'\\'')}'`;\n\t}\n\n\tif (hasParens && isPowerShell) {\n\t\treturn `& '${originalPath}'`;\n\t}\n\n\tif (os === OperatingSystem.Windows) {\n\t\t// 17063 is the build number where wsl path was introduced.\n\t\t// Update Windows uriPath to be executed in WSL.\n\t\tif (shellType !== undefined) {\n\t\t\tif (shellType === WindowsShellType.GitBash) {\n\t\t\t\treturn escapeNonWindowsPath(originalPath.replace(/\\\\/g, '/'));\n\t\t\t}\n\t\t\telse if (shellType === WindowsShellType.Wsl) {\n\t\t\t\treturn backend?.getWslPath(originalPath, 'win-to-unix') || originalPath;\n\t\t\t}\n\t\t\telse if (hasSpace) {\n\t\t\t\treturn `\"${originalPath}\"`;\n\t\t\t}\n\t\t\treturn originalPath;\n\t\t}\n\t\tconst lowerExecutable = executable.toLowerCase();\n\t\tif (lowerExecutable.includes('wsl') || (lowerExecutable.includes('bash.exe') && !lowerExecutable.toLowerCase().includes('git'))) {\n\t\t\treturn backend?.getWslPath(originalPath, 'win-to-unix') || originalPath;\n\t\t} else if (hasSpace) {\n\t\t\treturn `\"${originalPath}\"`;\n\t\t}\n\t\treturn originalPath;\n\t}\n\n\treturn escapeNonWindowsPath(originalPath);\n}\n\nexport function getWorkspaceForTerminal(cwd: URI | string | undefined, workspaceContextService: IWorkspaceContextService, historyService: IHistoryService): IWorkspaceFolder | undefined {\n\tconst cwdUri = typeof cwd === 'string' ? URI.parse(cwd) : cwd;\n\tlet workspaceFolder = cwdUri ? workspaceContextService.getWorkspaceFolder(cwdUri) ?? undefined : undefined;\n\tif (!workspaceFolder) {\n\t\t// fallback to last active workspace if cwd is not available or it is not in workspace\n\t\t// TOOD: last active workspace is known to be unreliable, we should remove this fallback eventually\n\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot();\n\t\tworkspaceFolder = activeWorkspaceRootUri ? workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t}\n\treturn workspaceFolder;\n}\n"],
  "mappings": "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",
  "names": []
}
