{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/common/environmentVariableService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { debounce, throttle } from \"../../../../base/common/decorators.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type {\n\tIMergedEnvironmentVariableCollection,\n\tISerializableEnvironmentDescriptionMap,\n\tISerializableEnvironmentVariableCollection,\n} from \"../../../../platform/terminal/common/environmentVariable.js\";\nimport { MergedEnvironmentVariableCollection } from \"../../../../platform/terminal/common/environmentVariableCollection.js\";\nimport {\n\tdeserializeEnvironmentDescriptionMap,\n\tdeserializeEnvironmentVariableCollection,\n\tserializeEnvironmentDescriptionMap,\n\tserializeEnvironmentVariableCollection,\n} from \"../../../../platform/terminal/common/environmentVariableShared.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport type {\n\tIEnvironmentVariableCollectionWithPersistence,\n\tIEnvironmentVariableService,\n} from \"./environmentVariable.js\";\nimport { TerminalStorageKeys } from \"./terminalStorageKeys.js\";\n\ninterface ISerializableExtensionEnvironmentVariableCollection {\n\textensionIdentifier: string;\n\tcollection: ISerializableEnvironmentVariableCollection;\n\tdescription?: ISerializableEnvironmentDescriptionMap;\n}\n\n/**\n * Tracks and persists environment variable collections as defined by extensions.\n */\nexport class EnvironmentVariableService\n\textends Disposable\n\timplements IEnvironmentVariableService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tcollections: Map<string, IEnvironmentVariableCollectionWithPersistence> =\n\t\tnew Map();\n\tmergedCollection: IMergedEnvironmentVariableCollection;\n\n\tprivate readonly _onDidChangeCollections = this._register(\n\t\tnew Emitter<IMergedEnvironmentVariableCollection>(),\n\t);\n\tget onDidChangeCollections(): Event<IMergedEnvironmentVariableCollection> {\n\t\treturn this._onDidChangeCollections.event;\n\t}\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis._storageService.remove(TerminalStorageKeys.DeprecatedEnvironmentVariableCollections, StorageScope.WORKSPACE);\n\t\tconst serializedPersistedCollections = this._storageService.get(TerminalStorageKeys.EnvironmentVariableCollections, StorageScope.WORKSPACE);\n\t\tif (serializedPersistedCollections) {\n\t\t\tconst collectionsJson: ISerializableExtensionEnvironmentVariableCollection[] = JSON.parse(serializedPersistedCollections);\n\t\t\tcollectionsJson.forEach(c => this.collections.set(c.extensionIdentifier, {\n\t\t\t\tpersistent: true,\n\t\t\t\tmap: deserializeEnvironmentVariableCollection(c.collection),\n\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap(c.description)\n\t\t\t}));\n\n\t\t\t// Asynchronously invalidate collections where extensions have been uninstalled, this is\n\t\t\t// async to avoid making all functions on the service synchronous and because extensions\n\t\t\t// being uninstalled is rare.\n\t\t\tthis._invalidateExtensionCollections();\n\t\t}\n\t\tthis.mergedCollection = this._resolveMergedCollection();\n\n\t\t// Listen for uninstalled/disabled extensions\n\t\tthis._register(this._extensionService.onDidChangeExtensions(() => this._invalidateExtensionCollections()));\n\t}\n\n\tset(\n\t\textensionIdentifier: string,\n\t\tcollection: IEnvironmentVariableCollectionWithPersistence,\n\t): void {\n\t\tthis.collections.set(extensionIdentifier, collection);\n\t\tthis._updateCollections();\n\t}\n\n\tdelete(extensionIdentifier: string): void {\n\t\tthis.collections.delete(extensionIdentifier);\n\t\tthis._updateCollections();\n\t}\n\n\tprivate _updateCollections(): void {\n\t\tthis._persistCollectionsEventually();\n\t\tthis.mergedCollection = this._resolveMergedCollection();\n\t\tthis._notifyCollectionUpdatesEventually();\n\t}\n\n\t@throttle(1000)\n\tprivate _persistCollectionsEventually(): void {\n\t\tthis._persistCollections();\n\t}\n\n\tprotected _persistCollections(): void {\n\t\tconst collectionsJson: ISerializableExtensionEnvironmentVariableCollection[] =\n\t\t\t[];\n\t\tthis.collections.forEach((collection, extensionIdentifier) => {\n\t\t\tif (collection.persistent) {\n\t\t\t\tcollectionsJson.push({\n\t\t\t\t\textensionIdentifier,\n\t\t\t\t\tcollection: serializeEnvironmentVariableCollection(\n\t\t\t\t\t\tthis.collections.get(extensionIdentifier)!.map,\n\t\t\t\t\t),\n\t\t\t\t\tdescription: serializeEnvironmentDescriptionMap(\n\t\t\t\t\t\tcollection.descriptionMap,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tconst stringifiedJson = JSON.stringify(collectionsJson);\n\t\tthis._storageService.store(\n\t\t\tTerminalStorageKeys.EnvironmentVariableCollections,\n\t\t\tstringifiedJson,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\t@debounce(1000)\n\tprivate _notifyCollectionUpdatesEventually(): void {\n\t\tthis._notifyCollectionUpdates();\n\t}\n\n\tprotected _notifyCollectionUpdates(): void {\n\t\tthis._onDidChangeCollections.fire(this.mergedCollection);\n\t}\n\n\tprivate _resolveMergedCollection(): IMergedEnvironmentVariableCollection {\n\t\treturn new MergedEnvironmentVariableCollection(this.collections);\n\t}\n\n\tprivate async _invalidateExtensionCollections(): Promise<void> {\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tconst registeredExtensions = this._extensionService.extensions;\n\t\tlet changes = false;\n\t\tthis.collections.forEach((_, extensionIdentifier) => {\n\t\t\tconst isExtensionRegistered = registeredExtensions.some(\n\t\t\t\t(r) => r.identifier.value === extensionIdentifier,\n\t\t\t);\n\t\t\tif (!isExtensionRegistered) {\n\t\t\t\tthis.collections.delete(extensionIdentifier);\n\t\t\t\tchanges = true;\n\t\t\t}\n\t\t});\n\t\tif (changes) {\n\t\t\tthis._updateCollections();\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
