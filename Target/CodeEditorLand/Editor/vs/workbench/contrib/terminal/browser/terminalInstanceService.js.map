{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalInstanceService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { promiseWithResolvers } from \"../../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\ttype IShellLaunchConfig,\n\ttype ITerminalBackend,\n\ttype ITerminalBackendRegistry,\n\ttype ITerminalProfile,\n\tTerminalExtensions,\n\ttype TerminalLocation,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { TerminalContextKeys } from \"../common/terminalContextKey.js\";\nimport {\n\ttype ITerminalInstance,\n\tITerminalInstanceService,\n} from \"./terminal.js\";\nimport { TerminalInstance } from \"./terminalInstance.js\";\n\nexport class TerminalInstanceService\n\textends Disposable\n\timplements ITerminalInstanceService\n{\n\tdeclare _serviceBrand: undefined;\n\tprivate _terminalShellTypeContextKey: IContextKey<string>;\n\tprivate _terminalInRunCommandPicker: IContextKey<boolean>;\n\tprivate _backendRegistration = new Map<\n\t\tstring | undefined,\n\t\t{ promise: Promise<void>; resolve: () => void }\n\t>();\n\n\tprivate readonly _onDidCreateInstance = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\tget onDidCreateInstance(): Event<ITerminalInstance> {\n\t\treturn this._onDidCreateInstance.event;\n\t}\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tsuper();\n\t\tthis._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);\n\t\tthis._terminalInRunCommandPicker = TerminalContextKeys.inTerminalRunCommandPicker.bindTo(this._contextKeyService);\n\n\t\tfor (const remoteAuthority of [undefined, environmentService.remoteAuthority]) {\n\t\t\tconst { promise, resolve } = promiseWithResolvers<void>();\n\t\t\tthis._backendRegistration.set(remoteAuthority, { promise, resolve });\n\t\t}\n\t}\n\n\tcreateInstance(\n\t\tprofile: ITerminalProfile,\n\t\ttarget: TerminalLocation,\n\t): ITerminalInstance;\n\tcreateInstance(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\ttarget: TerminalLocation,\n\t): ITerminalInstance;\n\tcreateInstance(\n\t\tconfig: IShellLaunchConfig | ITerminalProfile,\n\t\ttarget: TerminalLocation,\n\t): ITerminalInstance {\n\t\tconst shellLaunchConfig =\n\t\t\tthis.convertProfileToShellLaunchConfig(config);\n\t\tconst instance = this._instantiationService.createInstance(\n\t\t\tTerminalInstance,\n\t\t\tthis._terminalShellTypeContextKey,\n\t\t\tthis._terminalInRunCommandPicker,\n\t\t\tshellLaunchConfig,\n\t\t);\n\t\tinstance.target = target;\n\t\tthis._onDidCreateInstance.fire(instance);\n\t\treturn instance;\n\t}\n\n\tconvertProfileToShellLaunchConfig(\n\t\tshellLaunchConfigOrProfile?: IShellLaunchConfig | ITerminalProfile,\n\t\tcwd?: string | URI,\n\t): IShellLaunchConfig {\n\t\t// Profile was provided\n\t\tif (\n\t\t\tshellLaunchConfigOrProfile &&\n\t\t\t\"profileName\" in shellLaunchConfigOrProfile\n\t\t) {\n\t\t\tconst profile = shellLaunchConfigOrProfile;\n\t\t\tif (!profile.path) {\n\t\t\t\treturn shellLaunchConfigOrProfile;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\texecutable: profile.path,\n\t\t\t\targs: profile.args,\n\t\t\t\tenv: profile.env,\n\t\t\t\ticon: profile.icon,\n\t\t\t\tcolor: profile.color,\n\t\t\t\tname: profile.overrideName ? profile.profileName : undefined,\n\t\t\t\tcwd,\n\t\t\t};\n\t\t}\n\n\t\t// A shell launch config was provided\n\t\tif (shellLaunchConfigOrProfile) {\n\t\t\tif (cwd) {\n\t\t\t\tshellLaunchConfigOrProfile.cwd = cwd;\n\t\t\t}\n\t\t\treturn shellLaunchConfigOrProfile;\n\t\t}\n\n\t\t// Return empty shell launch config\n\t\treturn {};\n\t}\n\n\tasync getBackend(\n\t\tremoteAuthority?: string,\n\t): Promise<ITerminalBackend | undefined> {\n\t\tlet backend = Registry.as<ITerminalBackendRegistry>(\n\t\t\tTerminalExtensions.Backend,\n\t\t).getTerminalBackend(remoteAuthority);\n\t\tif (!backend) {\n\t\t\t// Ensure backend is initialized and try again\n\t\t\tawait this._backendRegistration.get(remoteAuthority)?.promise;\n\t\t\tbackend = Registry.as<ITerminalBackendRegistry>(\n\t\t\t\tTerminalExtensions.Backend,\n\t\t\t).getTerminalBackend(remoteAuthority);\n\t\t}\n\t\treturn backend;\n\t}\n\n\tgetRegisteredBackends(): IterableIterator<ITerminalBackend> {\n\t\treturn Registry.as<ITerminalBackendRegistry>(\n\t\t\tTerminalExtensions.Backend,\n\t\t).backends.values();\n\t}\n\n\tdidRegisterBackend(remoteAuthority?: string) {\n\t\tthis._backendRegistration.get(remoteAuthority)?.resolve();\n\t}\n}\n\nregisterSingleton(\n\tITerminalInstanceService,\n\tTerminalInstanceService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,4BAA4B;AACrC,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAE3B;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,gBAAgB;AACzB;AAAA,EAKC;AAAA,OAEM;AACP,SAAS,oCAAoC;AAC7C,SAAS,2BAA2B;AACpC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,wBAAwB;AAE1B,IAAM,0BAAN,cACE,WAET;AAAA,EAgBC,YACyC,uBACH,oBACP,oBAC7B;AACD,UAAM;AAJkC;AACH;AAIrC,SAAK,+BAA+B,oBAAoB,UAAU,OAAO,KAAK,kBAAkB;AAChG,SAAK,8BAA8B,oBAAoB,2BAA2B,OAAO,KAAK,kBAAkB;AAEhH,eAAW,mBAAmB,CAAC,QAAW,mBAAmB,eAAe,GAAG;AAC9E,YAAM,EAAE,SAAS,QAAQ,IAAI,qBAA2B;AACxD,WAAK,qBAAqB,IAAI,iBAAiB,EAAE,SAAS,QAAQ,CAAC;AAAA,IACpE;AAAA,EACD;AAAA,EAnED,OAsCA;AAAA;AAAA;AAAA,EAES;AAAA,EACA;AAAA,EACA,uBAAuB,oBAAI,IAGjC;AAAA,EAEe,uBAAuB,KAAK;AAAA,IAC5C,IAAI,QAA2B;AAAA,EAChC;AAAA,EACA,IAAI,sBAAgD;AACnD,WAAO,KAAK,qBAAqB;AAAA,EAClC;AAAA,EAyBA,eACC,QACA,QACoB;AACpB,UAAM,oBACL,KAAK,kCAAkC,MAAM;AAC9C,UAAM,WAAW,KAAK,sBAAsB;AAAA,MAC3C;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,IACD;AACA,aAAS,SAAS;AAClB,SAAK,qBAAqB,KAAK,QAAQ;AACvC,WAAO;AAAA,EACR;AAAA,EAEA,kCACC,4BACA,KACqB;AAErB,QACC,8BACA,iBAAiB,4BAChB;AACD,YAAM,UAAU;AAChB,UAAI,CAAC,QAAQ,MAAM;AAClB,eAAO;AAAA,MACR;AACA,aAAO;AAAA,QACN,YAAY,QAAQ;AAAA,QACpB,MAAM,QAAQ;AAAA,QACd,KAAK,QAAQ;AAAA,QACb,MAAM,QAAQ;AAAA,QACd,OAAO,QAAQ;AAAA,QACf,MAAM,QAAQ,eAAe,QAAQ,cAAc;AAAA,QACnD;AAAA,MACD;AAAA,IACD;AAGA,QAAI,4BAA4B;AAC/B,UAAI,KAAK;AACR,mCAA2B,MAAM;AAAA,MAClC;AACA,aAAO;AAAA,IACR;AAGA,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,WACL,iBACwC;AACxC,QAAI,UAAU,SAAS;AAAA,MACtB,mBAAmB;AAAA,IACpB,EAAE,mBAAmB,eAAe;AACpC,QAAI,CAAC,SAAS;AAEb,YAAM,KAAK,qBAAqB,IAAI,eAAe,GAAG;AACtD,gBAAU,SAAS;AAAA,QAClB,mBAAmB;AAAA,MACpB,EAAE,mBAAmB,eAAe;AAAA,IACrC;AACA,WAAO;AAAA,EACR;AAAA,EAEA,wBAA4D;AAC3D,WAAO,SAAS;AAAA,MACf,mBAAmB;AAAA,IACpB,EAAE,SAAS,OAAO;AAAA,EACnB;AAAA,EAEA,mBAAmB,iBAA0B;AAC5C,SAAK,qBAAqB,IAAI,eAAe,GAAG,QAAQ;AAAA,EACzD;AACD;AAxHa,0BAAN;AAAA,EAoBJ;AAAA,EACA;AAAA,EACA;AAAA,GAtBU;AA0Hb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
