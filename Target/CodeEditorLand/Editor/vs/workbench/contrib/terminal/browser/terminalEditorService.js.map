{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { EditorActivation } from \"../../../../platform/editor/common/editor.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IShellLaunchConfig,\n\tTerminalLocation,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport type { IEditorPane } from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport {\n\tACTIVE_GROUP,\n\tIEditorService,\n\tSIDE_GROUP,\n} from \"../../../services/editor/common/editorService.js\";\nimport { ILifecycleService } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { TerminalContextKeys } from \"../common/terminalContextKey.js\";\nimport {\n\ttype IDeserializedTerminalEditorInput,\n\ttype ITerminalEditorService,\n\ttype ITerminalInstance,\n\tITerminalInstanceService,\n\ttype TerminalEditorLocation,\n} from \"./terminal.js\";\nimport { TerminalEditorInput } from \"./terminalEditorInput.js\";\nimport { getInstanceFromResource } from \"./terminalUri.js\";\n\nexport class TerminalEditorService\n\textends Disposable\n\timplements ITerminalEditorService\n{\n\tdeclare _serviceBrand: undefined;\n\n\tinstances: ITerminalInstance[] = [];\n\tprivate _activeInstanceIndex = -1;\n\tprivate _isShuttingDown = false;\n\tprivate _activeOpenEditorRequest?: {\n\t\tinstanceId: number;\n\t\tpromise: Promise<IEditorPane | undefined>;\n\t};\n\n\tprivate _terminalEditorActive: IContextKey<boolean>;\n\n\tprivate _editorInputs: Map</*resource*/ string, TerminalEditorInput> =\n\t\tnew Map();\n\tprivate _instanceDisposables: Map</*resource*/ string, IDisposable[]> =\n\t\tnew Map();\n\n\tprivate readonly _onDidDisposeInstance = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDidDisposeInstance = this._onDidDisposeInstance.event;\n\tprivate readonly _onDidFocusInstance = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDidFocusInstance = this._onDidFocusInstance.event;\n\tprivate readonly _onDidChangeInstanceCapability = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDidChangeInstanceCapability =\n\t\tthis._onDidChangeInstanceCapability.event;\n\tprivate readonly _onDidChangeActiveInstance = this._register(\n\t\tnew Emitter<ITerminalInstance | undefined>(),\n\t);\n\treadonly onDidChangeActiveInstance = this._onDidChangeActiveInstance.event;\n\tprivate readonly _onDidChangeInstances = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeInstances = this._onDidChangeInstances.event;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IEditorGroupsService\n\t\tprivate readonly _editorGroupsService: IEditorGroupsService,\n\t\t@ITerminalInstanceService\n\t\tprivate readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis._terminalEditorActive =\n\t\t\tTerminalContextKeys.terminalEditorActive.bindTo(contextKeyService);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tfor (const d of this._instanceDisposables.values()) {\n\t\t\t\t\tdispose(d);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tlifecycleService.onWillShutdown(\n\t\t\t\t() => (this._isShuttingDown = true),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editorService.onDidActiveEditorChange(() => {\n\t\t\t\tconst activeEditor = this._editorService.activeEditor;\n\t\t\t\tconst instance =\n\t\t\t\t\tactiveEditor instanceof TerminalEditorInput\n\t\t\t\t\t\t? activeEditor?.terminalInstance\n\t\t\t\t\t\t: undefined;\n\t\t\t\tconst terminalEditorActive =\n\t\t\t\t\t!!instance && activeEditor instanceof TerminalEditorInput;\n\t\t\t\tthis._terminalEditorActive.set(terminalEditorActive);\n\t\t\t\tif (terminalEditorActive) {\n\t\t\t\t\tactiveEditor?.setGroup(\n\t\t\t\t\t\tthis._editorService.activeEditorPane?.group,\n\t\t\t\t\t);\n\t\t\t\t\tthis.setActiveInstance(instance);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const instance of this.instances) {\n\t\t\t\t\t\tinstance.resetFocusContextKey();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editorService.onDidVisibleEditorsChange(() => {\n\t\t\t\t// add any terminal editors created via the editor service split command\n\t\t\t\tconst knownIds = this.instances.map((i) => i.instanceId);\n\t\t\t\tconst terminalEditors = this._getActiveTerminalEditors();\n\t\t\t\tconst unknownEditor = terminalEditors.find((input) => {\n\t\t\t\t\tconst inputId =\n\t\t\t\t\t\tinput instanceof TerminalEditorInput\n\t\t\t\t\t\t\t? input.terminalInstance?.instanceId\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\tif (inputId === undefined) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn !knownIds.includes(inputId);\n\t\t\t\t});\n\t\t\t\tif (\n\t\t\t\t\tunknownEditor instanceof TerminalEditorInput &&\n\t\t\t\t\tunknownEditor.terminalInstance\n\t\t\t\t) {\n\t\t\t\t\tthis._editorInputs.set(\n\t\t\t\t\t\tunknownEditor.terminalInstance.resource.path,\n\t\t\t\t\t\tunknownEditor,\n\t\t\t\t\t);\n\t\t\t\t\tthis.instances.push(unknownEditor.terminalInstance);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Remove the terminal from the managed instances when the editor closes. This fires when\n\t\t// dragging and dropping to another editor or closing the editor via cmd/ctrl+w.\n\t\tthis._register(\n\t\t\tthis._editorService.onDidCloseEditor((e) => {\n\t\t\t\tconst instance =\n\t\t\t\t\te.editor instanceof TerminalEditorInput\n\t\t\t\t\t\t? e.editor.terminalInstance\n\t\t\t\t\t\t: undefined;\n\t\t\t\tif (instance) {\n\t\t\t\t\tconst instanceIndex = this.instances.findIndex(\n\t\t\t\t\t\t(e) => e === instance,\n\t\t\t\t\t);\n\t\t\t\t\tif (instanceIndex !== -1) {\n\t\t\t\t\t\tconst wasActiveInstance =\n\t\t\t\t\t\t\tthis.instances[instanceIndex] ===\n\t\t\t\t\t\t\tthis.activeInstance;\n\t\t\t\t\t\tthis._removeInstance(instance);\n\t\t\t\t\t\tif (wasActiveInstance) {\n\t\t\t\t\t\t\tthis.setActiveInstance(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _getActiveTerminalEditors(): EditorInput[] {\n\t\treturn this._editorService.visibleEditors.filter(\n\t\t\t(e) =>\n\t\t\t\te instanceof TerminalEditorInput &&\n\t\t\t\te.terminalInstance?.instanceId,\n\t\t);\n\t}\n\n\tget activeInstance(): ITerminalInstance | undefined {\n\t\tif (this.instances.length === 0 || this._activeInstanceIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.instances[this._activeInstanceIndex];\n\t}\n\n\tsetActiveInstance(instance: ITerminalInstance | undefined): void {\n\t\tthis._activeInstanceIndex = instance\n\t\t\t? this.instances.findIndex((e) => e === instance)\n\t\t\t: -1;\n\t\tthis._onDidChangeActiveInstance.fire(this.activeInstance);\n\t}\n\n\tasync focusInstance(instance: ITerminalInstance): Promise<void> {\n\t\treturn instance.focusWhenReady(true);\n\t}\n\n\tasync focusActiveInstance(): Promise<void> {\n\t\treturn this.activeInstance?.focusWhenReady(true);\n\t}\n\n\tasync openEditor(\n\t\tinstance: ITerminalInstance,\n\t\teditorOptions?: TerminalEditorLocation,\n\t): Promise<void> {\n\t\tconst resource = this.resolveResource(instance);\n\t\tif (resource) {\n\t\t\tawait this._activeOpenEditorRequest?.promise;\n\t\t\tthis._activeOpenEditorRequest = {\n\t\t\t\tinstanceId: instance.instanceId,\n\t\t\t\tpromise: this._editorService.openEditor(\n\t\t\t\t\t{\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\tinstance.description ||\n\t\t\t\t\t\t\tinstance.shellLaunchConfig.type,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\t\tforceReload: true,\n\t\t\t\t\t\t\tpreserveFocus: editorOptions?.preserveFocus,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\teditorOptions?.viewColumn ?? ACTIVE_GROUP,\n\t\t\t\t),\n\t\t\t};\n\t\t\tawait this._activeOpenEditorRequest?.promise;\n\t\t\tthis._activeOpenEditorRequest = undefined;\n\t\t}\n\t}\n\n\tresolveResource(instance: ITerminalInstance): URI {\n\t\tconst resource = instance.resource;\n\t\tconst inputKey = resource.path;\n\t\tconst cachedEditor = this._editorInputs.get(inputKey);\n\n\t\tif (cachedEditor) {\n\t\t\treturn cachedEditor.resource;\n\t\t}\n\n\t\tinstance.target = TerminalLocation.Editor;\n\t\tconst input = this._instantiationService.createInstance(\n\t\t\tTerminalEditorInput,\n\t\t\tresource,\n\t\t\tinstance,\n\t\t);\n\t\tthis._registerInstance(inputKey, input, instance);\n\t\treturn input.resource;\n\t}\n\n\tgetInputFromResource(resource: URI): TerminalEditorInput {\n\t\tconst input = this._editorInputs.get(resource.path);\n\t\tif (!input) {\n\t\t\tthrow new Error(\n\t\t\t\t`Could not get input from resource: ${resource.path}`,\n\t\t\t);\n\t\t}\n\t\treturn input;\n\t}\n\n\tprivate _registerInstance(\n\t\tinputKey: string,\n\t\tinput: TerminalEditorInput,\n\t\tinstance: ITerminalInstance,\n\t): void {\n\t\tthis._editorInputs.set(inputKey, input);\n\t\tthis._instanceDisposables.set(inputKey, [\n\t\t\tinstance.onDidFocus(\n\t\t\t\tthis._onDidFocusInstance.fire,\n\t\t\t\tthis._onDidFocusInstance,\n\t\t\t),\n\t\t\tinstance.onDisposed(\n\t\t\t\tthis._onDidDisposeInstance.fire,\n\t\t\t\tthis._onDidDisposeInstance,\n\t\t\t),\n\t\t\tinstance.capabilities.onDidAddCapabilityType(() =>\n\t\t\t\tthis._onDidChangeInstanceCapability.fire(instance),\n\t\t\t),\n\t\t\tinstance.capabilities.onDidRemoveCapabilityType(() =>\n\t\t\t\tthis._onDidChangeInstanceCapability.fire(instance),\n\t\t\t),\n\t\t]);\n\t\tthis.instances.push(instance);\n\t\tthis._onDidChangeInstances.fire();\n\t}\n\n\tprivate _removeInstance(instance: ITerminalInstance) {\n\t\tconst inputKey = instance.resource.path;\n\t\tthis._editorInputs.delete(inputKey);\n\t\tconst instanceIndex = this.instances.findIndex((e) => e === instance);\n\t\tif (instanceIndex !== -1) {\n\t\t\tthis.instances.splice(instanceIndex, 1);\n\t\t}\n\t\tconst disposables = this._instanceDisposables.get(inputKey);\n\t\tthis._instanceDisposables.delete(inputKey);\n\t\tif (disposables) {\n\t\t\tdispose(disposables);\n\t\t}\n\t\tthis._onDidChangeInstances.fire();\n\t}\n\n\tgetInstanceFromResource(resource?: URI): ITerminalInstance | undefined {\n\t\treturn getInstanceFromResource(this.instances, resource);\n\t}\n\n\tsplitInstance(\n\t\tinstanceToSplit: ITerminalInstance,\n\t\tshellLaunchConfig: IShellLaunchConfig = {},\n\t): ITerminalInstance {\n\t\tif (instanceToSplit.target === TerminalLocation.Editor) {\n\t\t\t// Make sure the instance to split's group is active\n\t\t\tconst group = this._editorInputs.get(\n\t\t\t\tinstanceToSplit.resource.path,\n\t\t\t)?.group;\n\t\t\tif (group) {\n\t\t\t\tthis._editorGroupsService.activateGroup(group);\n\t\t\t}\n\t\t}\n\t\tconst instance = this._terminalInstanceService.createInstance(\n\t\t\tshellLaunchConfig,\n\t\t\tTerminalLocation.Editor,\n\t\t);\n\t\tconst resource = this.resolveResource(instance);\n\t\tif (resource) {\n\t\t\tthis._editorService.openEditor(\n\t\t\t\t{\n\t\t\t\t\tresource: URI.revive(resource),\n\t\t\t\t\tdescription: instance.description,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tforceReload: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSIDE_GROUP,\n\t\t\t);\n\t\t}\n\t\treturn instance;\n\t}\n\n\treviveInput(\n\t\tdeserializedInput: IDeserializedTerminalEditorInput,\n\t): EditorInput {\n\t\tif (\"pid\" in deserializedInput) {\n\t\t\tconst newDeserializedInput = {\n\t\t\t\t...deserializedInput,\n\t\t\t\tfindRevivedId: true,\n\t\t\t};\n\t\t\tconst instance = this._terminalInstanceService.createInstance(\n\t\t\t\t{ attachPersistentProcess: newDeserializedInput },\n\t\t\t\tTerminalLocation.Editor,\n\t\t\t);\n\t\t\tconst input = this._instantiationService.createInstance(\n\t\t\t\tTerminalEditorInput,\n\t\t\t\tinstance.resource,\n\t\t\t\tinstance,\n\t\t\t);\n\t\t\tthis._registerInstance(instance.resource.path, input, instance);\n\t\t\treturn input;\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t`Could not revive terminal editor input, ${deserializedInput}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tdetachInstance(instance: ITerminalInstance) {\n\t\tconst inputKey = instance.resource.path;\n\t\tconst editorInput = this._editorInputs.get(inputKey);\n\t\teditorInput?.detachInstance();\n\t\tthis._removeInstance(instance);\n\t\t// Don't dispose the input when shutting down to avoid layouts in the editor area\n\t\tif (!this._isShuttingDown) {\n\t\t\teditorInput?.dispose();\n\t\t}\n\t}\n\n\tasync revealActiveEditor(preserveFocus?: boolean): Promise<void> {\n\t\tconst instance = this.activeInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is an active openEditor call for this instance it will be revealed by that\n\t\tif (this._activeOpenEditorRequest?.instanceId === instance.instanceId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorInput = this._editorInputs.get(instance.resource.path)!;\n\t\tthis._editorService.openEditor(editorInput, {\n\t\t\tpinned: true,\n\t\t\tforceReload: true,\n\t\t\tpreserveFocus,\n\t\t\tactivation: EditorActivation.PRESERVE,\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["instance", "e"]
}
