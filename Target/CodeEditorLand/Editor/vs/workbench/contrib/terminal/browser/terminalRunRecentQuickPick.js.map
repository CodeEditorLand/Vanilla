{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Toggle } from '../../../../base/browser/ui/toggle/toggle.js';\nimport { isMacintosh, OperatingSystem } from '../../../../base/common/platform.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ITextModelContentProvider, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { localize } from '../../../../nls.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IQuickInputButton, IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ITerminalCommand, TerminalCapability } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { collapseTildePath } from '../../../../platform/terminal/common/terminalEnvironment.js';\nimport { asCssVariable, inputActiveOptionBackground, inputActiveOptionBorder, inputActiveOptionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { ITerminalInstance } from './terminal.js';\nimport { commandHistoryFuzzySearchIcon, commandHistoryOutputIcon, commandHistoryRemoveIcon } from './terminalIcons.js';\nimport { getCommandHistory, getDirectoryHistory, getShellFileHistory } from '../common/history.js';\nimport { TerminalStorageKeys } from '../common/terminalStorageKeys.js';\nimport { terminalStrings } from '../common/terminalStrings.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { fromNow } from '../../../../base/common/date.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { showWithPinnedItems } from '../../../../platform/quickinput/browser/quickPickPin.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { IContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { AccessibleViewProviderId, IAccessibleViewService } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\n\nexport async function showRunRecentQuickPick(\n\taccessor: ServicesAccessor,\n\tinstance: ITerminalInstance,\n\tterminalInRunCommandPicker: IContextKey<boolean>,\n\ttype: 'command' | 'cwd',\n\tfilterMode?: 'fuzzy' | 'contiguous',\n\tvalue?: string\n): Promise<void> {\n\tif (!instance.xterm) {\n\t\treturn;\n\t}\n\n\tconst editorService = accessor.get(IEditorService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst storageService = accessor.get(IStorageService);\n\tconst accessibleViewService = accessor.get(IAccessibleViewService);\n\n\tconst runRecentStorageKey = `${TerminalStorageKeys.PinnedRecentCommandsPrefix}.${instance.shellType}`;\n\tlet placeholder: string;\n\ttype Item = IQuickPickItem & { command?: ITerminalCommand; rawLabel: string };\n\tlet items: (Item | IQuickPickItem & { rawLabel: string } | IQuickPickSeparator)[] = [];\n\tconst commandMap: Set<string> = new Set();\n\n\tconst removeFromCommandHistoryButton: IQuickInputButton = {\n\t\ticonClass: ThemeIcon.asClassName(commandHistoryRemoveIcon),\n\t\ttooltip: localize('removeCommand', \"Remove from Command History\")\n\t};\n\n\tconst commandOutputButton: IQuickInputButton = {\n\t\ticonClass: ThemeIcon.asClassName(commandHistoryOutputIcon),\n\t\ttooltip: localize('viewCommandOutput', \"View Command Output\"),\n\t\talwaysVisible: false\n\t};\n\n\tif (type === 'command') {\n\t\tplaceholder = isMacintosh ? localize('selectRecentCommandMac', 'Select a command to run (hold Option-key to edit the command)') : localize('selectRecentCommand', 'Select a command to run (hold Alt-key to edit the command)');\n\t\tconst cmdDetection = instance.capabilities.get(TerminalCapability.CommandDetection);\n\t\tconst commands = cmdDetection?.commands;\n\t\t// Current session history\n\t\tconst executingCommand = cmdDetection?.executingCommand;\n\t\tif (executingCommand) {\n\t\t\tcommandMap.add(executingCommand);\n\t\t}\n\t\tfunction formatLabel(label: string) {\n\t\t\treturn label\n\t\t\t\t// Replace new lines with \"enter\" symbol\n\t\t\t\t.replace(/\\r?\\n/g, '\\u23CE')\n\t\t\t\t// Replace 3 or more spaces with midline horizontal ellipsis which looks similar\n\t\t\t\t// to whitespace in the editor\n\t\t\t\t.replace(/\\s\\s\\s+/g, '\\u22EF');\n\t\t}\n\t\tif (commands && commands.length > 0) {\n\t\t\tfor (const entry of commands) {\n\t\t\t\t// Trim off any whitespace and/or line endings, replace new lines with the\n\t\t\t\t// Downwards Arrow with Corner Leftwards symbol\n\t\t\t\tconst label = entry.command.trim();\n\t\t\t\tif (label.length === 0 || commandMap.has(label)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet description = collapseTildePath(entry.cwd, instance.userHome, instance.os === OperatingSystem.Windows ? '\\\\' : '/');\n\t\t\t\tif (entry.exitCode) {\n\t\t\t\t\t// Since you cannot get the last command's exit code on pwsh, just whether it failed\n\t\t\t\t\t// or not, -1 is treated specially as simply failed\n\t\t\t\t\tif (entry.exitCode === -1) {\n\t\t\t\t\t\tdescription += ' failed';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdescription += ` exitCode: ${entry.exitCode}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdescription = description.trim();\n\t\t\t\tconst buttons: IQuickInputButton[] = [commandOutputButton];\n\t\t\t\t// Merge consecutive commands\n\t\t\t\tconst lastItem = items.length > 0 ? items[items.length - 1] : undefined;\n\t\t\t\tif (lastItem?.type !== 'separator' && lastItem?.label === label) {\n\t\t\t\t\tlastItem.id = entry.timestamp.toString();\n\t\t\t\t\tlastItem.description = description;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\titems.push({\n\t\t\t\t\tlabel: formatLabel(label),\n\t\t\t\t\trawLabel: label,\n\t\t\t\t\tdescription,\n\t\t\t\t\tid: entry.timestamp.toString(),\n\t\t\t\t\tcommand: entry,\n\t\t\t\t\tbuttons: entry.hasOutput() ? buttons : undefined\n\t\t\t\t});\n\t\t\t\tcommandMap.add(label);\n\t\t\t}\n\t\t\titems = items.reverse();\n\t\t}\n\t\tif (executingCommand) {\n\t\t\titems.unshift({\n\t\t\t\tlabel: formatLabel(executingCommand),\n\t\t\t\trawLabel: executingCommand,\n\t\t\t\tdescription: cmdDetection.cwd\n\t\t\t});\n\t\t}\n\t\tif (items.length > 0) {\n\t\t\titems.unshift({ type: 'separator', label: terminalStrings.currentSessionCategory });\n\t\t}\n\n\t\t// Gather previous session history\n\t\tconst history = instantiationService.invokeFunction(getCommandHistory);\n\t\tconst previousSessionItems: (IQuickPickItem & { rawLabel: string })[] = [];\n\t\tfor (const [label, info] of history.entries) {\n\t\t\t// Only add previous session item if it's not in this session\n\t\t\tif (!commandMap.has(label) && info.shellType === instance.shellType) {\n\t\t\t\tpreviousSessionItems.unshift({\n\t\t\t\t\tlabel: formatLabel(label),\n\t\t\t\t\trawLabel: label,\n\t\t\t\t\tbuttons: [removeFromCommandHistoryButton]\n\t\t\t\t});\n\t\t\t\tcommandMap.add(label);\n\t\t\t}\n\t\t}\n\n\t\tif (previousSessionItems.length > 0) {\n\t\t\titems.push(\n\t\t\t\t{ type: 'separator', label: terminalStrings.previousSessionCategory },\n\t\t\t\t...previousSessionItems\n\t\t\t);\n\t\t}\n\n\t\t// Gather shell file history\n\t\tconst shellFileHistory = await instantiationService.invokeFunction(getShellFileHistory, instance.shellType);\n\t\tconst dedupedShellFileItems: (IQuickPickItem & { rawLabel: string })[] = [];\n\t\tfor (const label of shellFileHistory) {\n\t\t\tif (!commandMap.has(label)) {\n\t\t\t\tdedupedShellFileItems.unshift({\n\t\t\t\t\tlabel: formatLabel(label),\n\t\t\t\t\trawLabel: label\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (dedupedShellFileItems.length > 0) {\n\t\t\titems.push(\n\t\t\t\t{ type: 'separator', label: localize('shellFileHistoryCategory', '{0} history', instance.shellType) },\n\t\t\t\t...dedupedShellFileItems\n\t\t\t);\n\t\t}\n\t} else {\n\t\tplaceholder = isMacintosh\n\t\t\t? localize('selectRecentDirectoryMac', 'Select a directory to go to (hold Option-key to edit the command)')\n\t\t\t: localize('selectRecentDirectory', 'Select a directory to go to (hold Alt-key to edit the command)');\n\t\tconst cwds = instance.capabilities.get(TerminalCapability.CwdDetection)?.cwds || [];\n\t\tif (cwds && cwds.length > 0) {\n\t\t\tfor (const label of cwds) {\n\t\t\t\titems.push({ label, rawLabel: label });\n\t\t\t}\n\t\t\titems = items.reverse();\n\t\t\titems.unshift({ type: 'separator', label: terminalStrings.currentSessionCategory });\n\t\t}\n\n\t\t// Gather previous session history\n\t\tconst history = instantiationService.invokeFunction(getDirectoryHistory);\n\t\tconst previousSessionItems: (IQuickPickItem & { rawLabel: string })[] = [];\n\t\t// Only add previous session item if it's not in this session and it matches the remote authority\n\t\tfor (const [label, info] of history.entries) {\n\t\t\tif ((info === null || info.remoteAuthority === instance.remoteAuthority) && !cwds.includes(label)) {\n\t\t\t\tpreviousSessionItems.unshift({\n\t\t\t\t\tlabel,\n\t\t\t\t\trawLabel: label,\n\t\t\t\t\tbuttons: [removeFromCommandHistoryButton]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (previousSessionItems.length > 0) {\n\t\t\titems.push(\n\t\t\t\t{ type: 'separator', label: terminalStrings.previousSessionCategory },\n\t\t\t\t...previousSessionItems\n\t\t\t);\n\t\t}\n\t}\n\tif (items.length === 0) {\n\t\treturn;\n\t}\n\tconst disposables = new DisposableStore();\n\tconst fuzzySearchToggle = disposables.add(new Toggle({\n\t\ttitle: 'Fuzzy search',\n\t\ticon: commandHistoryFuzzySearchIcon,\n\t\tisChecked: filterMode === 'fuzzy',\n\t\tinputActiveOptionBorder: asCssVariable(inputActiveOptionBorder),\n\t\tinputActiveOptionForeground: asCssVariable(inputActiveOptionForeground),\n\t\tinputActiveOptionBackground: asCssVariable(inputActiveOptionBackground)\n\t}));\n\tdisposables.add(fuzzySearchToggle.onChange(() => {\n\t\tinstantiationService.invokeFunction(showRunRecentQuickPick, instance, terminalInRunCommandPicker, type, fuzzySearchToggle.checked ? 'fuzzy' : 'contiguous', quickPick.value);\n\t}));\n\tconst outputProvider = disposables.add(instantiationService.createInstance(TerminalOutputProvider));\n\tconst quickPick = disposables.add(quickInputService.createQuickPick<Item | IQuickPickItem & { rawLabel: string }>({ useSeparators: true }));\n\tconst originalItems = items;\n\tquickPick.items = [...originalItems];\n\tquickPick.sortByLabel = false;\n\tquickPick.placeholder = placeholder;\n\tquickPick.matchOnLabelMode = filterMode || 'contiguous';\n\tquickPick.toggles = [fuzzySearchToggle];\n\tdisposables.add(quickPick.onDidTriggerItemButton(async e => {\n\t\tif (e.button === removeFromCommandHistoryButton) {\n\t\t\tif (type === 'command') {\n\t\t\t\tinstantiationService.invokeFunction(getCommandHistory)?.remove(e.item.label);\n\t\t\t} else {\n\t\t\t\tinstantiationService.invokeFunction(getDirectoryHistory)?.remove(e.item.label);\n\t\t\t}\n\t\t} else if (e.button === commandOutputButton) {\n\t\t\tconst selectedCommand = (e.item as Item).command;\n\t\t\tconst output = selectedCommand?.getOutput();\n\t\t\tif (output && selectedCommand?.command) {\n\t\t\t\tconst textContent = await outputProvider.provideTextContent(URI.from(\n\t\t\t\t\t{\n\t\t\t\t\t\tscheme: TerminalOutputProvider.scheme,\n\t\t\t\t\t\tpath: `${selectedCommand.command}... ${fromNow(selectedCommand.timestamp, true)}`,\n\t\t\t\t\t\tfragment: output,\n\t\t\t\t\t\tquery: `terminal-output-${selectedCommand.timestamp}-${instance.instanceId}`\n\t\t\t\t\t}));\n\t\t\t\tif (textContent) {\n\t\t\t\t\tawait editorService.openEditor({\n\t\t\t\t\t\tresource: textContent.uri\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait instantiationService.invokeFunction(showRunRecentQuickPick, instance, terminalInRunCommandPicker, type, filterMode, value);\n\t}));\n\tdisposables.add(quickPick.onDidChangeValue(async value => {\n\t\tif (!value) {\n\t\t\tawait instantiationService.invokeFunction(showRunRecentQuickPick, instance, terminalInRunCommandPicker, type, filterMode, value);\n\t\t}\n\t}));\n\tlet terminalScrollStateSaved = false;\n\tfunction restoreScrollState() {\n\t\tterminalScrollStateSaved = false;\n\t\tinstance.xterm?.markTracker.restoreScrollState();\n\t\tinstance.xterm?.markTracker.clear();\n\t}\n\tdisposables.add(quickPick.onDidChangeActive(async () => {\n\t\tconst xterm = instance.xterm;\n\t\tif (!xterm) {\n\t\t\treturn;\n\t\t}\n\t\tconst [item] = quickPick.activeItems;\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\t\tif ('command' in item && item.command && item.command.marker) {\n\t\t\tif (!terminalScrollStateSaved) {\n\t\t\t\txterm.markTracker.saveScrollState();\n\t\t\t\tterminalScrollStateSaved = true;\n\t\t\t}\n\t\t\tconst promptRowCount = item.command.getPromptRowCount();\n\t\t\tconst commandRowCount = item.command.getCommandRowCount();\n\t\t\txterm.markTracker.revealRange({\n\t\t\t\tstart: {\n\t\t\t\t\tx: 1,\n\t\t\t\t\ty: item.command.marker.line - (promptRowCount - 1) + 1\n\t\t\t\t},\n\t\t\t\tend: {\n\t\t\t\t\tx: instance.cols,\n\t\t\t\t\ty: item.command.marker.line + (commandRowCount - 1) + 1\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\trestoreScrollState();\n\t\t}\n\t}));\n\tdisposables.add(quickPick.onDidAccept(async () => {\n\t\tconst result = quickPick.activeItems[0];\n\t\tlet text: string;\n\t\tif (type === 'cwd') {\n\t\t\ttext = `cd ${await instance.preparePathForShell(result.rawLabel)}`;\n\t\t} else { // command\n\t\t\ttext = result.rawLabel;\n\t\t}\n\t\tquickPick.hide();\n\t\tinstance.runCommand(text, !quickPick.keyMods.alt);\n\t\tif (quickPick.keyMods.alt) {\n\t\t\tinstance.focus();\n\t\t}\n\t\trestoreScrollState();\n\t}));\n\tdisposables.add(quickPick.onDidHide(() => restoreScrollState()));\n\tif (value) {\n\t\tquickPick.value = value;\n\t}\n\treturn new Promise<void>(r => {\n\t\tterminalInRunCommandPicker.set(true);\n\t\tdisposables.add(showWithPinnedItems(storageService, runRecentStorageKey, quickPick, true));\n\t\tdisposables.add(quickPick.onDidHide(() => {\n\t\t\tterminalInRunCommandPicker.set(false);\n\t\t\taccessibleViewService.showLastProvider(AccessibleViewProviderId.Terminal);\n\t\t\tr();\n\t\t\tdisposables.dispose();\n\t\t}));\n\t});\n}\n\nclass TerminalOutputProvider extends Disposable implements ITextModelContentProvider {\n\tstatic scheme = 'TERMINAL_OUTPUT';\n\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IModelService private readonly _modelService: IModelService\n\t) {\n\t\tsuper();\n\t\tthis._register(textModelResolverService.registerTextModelContentProvider(TerminalOutputProvider.scheme, this));\n\t}\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this._modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\treturn this._modelService.createModel(resource.fragment, null, resource, false);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["formatLabel", "value"]
}
