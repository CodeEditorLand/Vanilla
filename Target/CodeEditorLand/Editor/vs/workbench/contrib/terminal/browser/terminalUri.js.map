{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalUri.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ITerminalInstance, TerminalDataTransfers } from './terminal.js';\n\nexport function parseTerminalUri(resource: URI): ITerminalIdentifier {\n\tconst [, workspaceId, instanceId] = resource.path.split('/');\n\tif (!workspaceId || !Number.parseInt(instanceId)) {\n\t\tthrow new Error(`Could not parse terminal uri for resource ${resource}`);\n\t}\n\treturn { workspaceId, instanceId: Number.parseInt(instanceId) };\n}\n\nexport function getTerminalUri(workspaceId: string, instanceId: number, title?: string): URI {\n\treturn URI.from({\n\t\tscheme: Schemas.vscodeTerminal,\n\t\tpath: `/${workspaceId}/${instanceId}`,\n\t\tfragment: title || undefined,\n\t});\n}\n\nexport interface ITerminalIdentifier {\n\tworkspaceId: string;\n\tinstanceId: number | undefined;\n}\n\nexport interface IPartialDragEvent {\n\tdataTransfer: Pick<DataTransfer, 'getData'> | null;\n}\n\nexport function getTerminalResourcesFromDragEvent(event: IPartialDragEvent): URI[] | undefined {\n\tconst resources = event.dataTransfer?.getData(TerminalDataTransfers.Terminals);\n\tif (resources) {\n\t\tconst json = JSON.parse(resources);\n\t\tconst result = [];\n\t\tfor (const entry of json) {\n\t\t\tresult.push(URI.parse(entry));\n\t\t}\n\t\treturn result.length === 0 ? undefined : result;\n\t}\n\treturn undefined;\n}\n\nexport function getInstanceFromResource<T extends Pick<ITerminalInstance, 'resource'>>(instances: T[], resource: URI | undefined): T | undefined {\n\tif (resource) {\n\t\tfor (const instance of instances) {\n\t\t\t// Note that the URI's workspace and instance id might not originally be from this window\n\t\t\t// Don't bother checking the scheme and assume instances only contains terminals\n\t\t\tif (instance.resource.path === resource.path) {\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t}\n\treturn undefined;\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,mBAAmB,6BAA6B;AAElD,SAAS,iBAAiB,UAAoC;AACpE,QAAM,CAAC,EAAE,aAAa,UAAU,IAAI,SAAS,KAAK,MAAM,GAAG;AAC3D,MAAI,CAAC,eAAe,CAAC,OAAO,SAAS,UAAU,GAAG;AACjD,UAAM,IAAI,MAAM,6CAA6C,QAAQ,EAAE;AAAA,EACxE;AACA,SAAO,EAAE,aAAa,YAAY,OAAO,SAAS,UAAU,EAAE;AAC/D;AANgB;AAQT,SAAS,eAAe,aAAqB,YAAoB,OAAqB;AAC5F,SAAO,IAAI,KAAK;AAAA,IACf,QAAQ,QAAQ;AAAA,IAChB,MAAM,IAAI,WAAW,IAAI,UAAU;AAAA,IACnC,UAAU,SAAS;AAAA,EACpB,CAAC;AACF;AANgB;AAiBT,SAAS,kCAAkC,OAA6C;AAC9F,QAAM,YAAY,MAAM,cAAc,QAAQ,sBAAsB,SAAS;AAC7E,MAAI,WAAW;AACd,UAAM,OAAO,KAAK,MAAM,SAAS;AACjC,UAAM,SAAS,CAAC;AAChB,eAAW,SAAS,MAAM;AACzB,aAAO,KAAK,IAAI,MAAM,KAAK,CAAC;AAAA,IAC7B;AACA,WAAO,OAAO,WAAW,IAAI,SAAY;AAAA,EAC1C;AACA,SAAO;AACR;AAXgB;AAaT,SAAS,wBAAuE,WAAgB,UAA0C;AAChJ,MAAI,UAAU;AACb,eAAW,YAAY,WAAW;AAGjC,UAAI,SAAS,SAAS,SAAS,SAAS,MAAM;AAC7C,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AACA,SAAO;AACR;AAXgB;",
  "names": []
}
