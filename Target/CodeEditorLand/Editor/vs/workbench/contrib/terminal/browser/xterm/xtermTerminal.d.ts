import type { ClipboardAddon as ClipboardAddonType } from "@xterm/addon-clipboard";
import type { ImageAddon as ImageAddonType } from "@xterm/addon-image";
import type { ISearchOptions, SearchAddon as SearchAddonType } from "@xterm/addon-search";
import type { SerializeAddon as SerializeAddonType } from "@xterm/addon-serialize";
import type { Unicode11Addon as Unicode11AddonType } from "@xterm/addon-unicode11";
import type { WebglAddon as WebglAddonType } from "@xterm/addon-webgl";
import type { ITheme, Terminal as RawXtermTerminal } from "@xterm/xterm";
import { Disposable } from "vs/base/common/lifecycle";
import { IAccessibilitySignalService } from "vs/platform/accessibilitySignal/browser/accessibilitySignalService";
import { IClipboardService } from "vs/platform/clipboard/common/clipboardService";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILayoutService } from "vs/platform/layout/browser/layoutService";
import { INotificationService } from "vs/platform/notification/common/notification";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { ITerminalCapabilityStore, ITerminalCommand } from "vs/platform/terminal/common/capabilities/capabilities";
import { IShellIntegration, ITerminalLogService } from "vs/platform/terminal/common/terminal";
import { IColorTheme, IThemeService } from "vs/platform/theme/common/themeService";
import { IDetachedXtermTerminal, IInternalXtermTerminal, IMarkTracker, ITerminalConfigurationService, IXtermAttachToElementOptions, IXtermColorProvider, IXtermTerminal } from "vs/workbench/contrib/terminal/browser/terminal";
import { ScrollPosition } from "vs/workbench/contrib/terminal/browser/xterm/markNavigationAddon";
import { ITerminalFont } from "vs/workbench/contrib/terminal/common/terminal";
/**
 * Wraps the xterm object with additional functionality. Interaction with the backing process is out
 * of the scope of this class.
 */
export declare class XtermTerminal extends Disposable implements IXtermTerminal, IDetachedXtermTerminal, IInternalXtermTerminal {
    private readonly _xtermColorProvider;
    private readonly _capabilities;
    private readonly _configurationService;
    private readonly _instantiationService;
    private readonly _logService;
    private readonly _notificationService;
    private readonly _themeService;
    private readonly _telemetryService;
    private readonly _terminalConfigurationService;
    private readonly _clipboardService;
    private readonly _accessibilitySignalService;
    /** The raw xterm.js instance */
    readonly raw: RawXtermTerminal;
    private _core;
    private static _suggestedRendererType;
    private static _checkedWebglCompatible;
    private _attached?;
    private _isPhysicalMouseWheel;
    private _markNavigationAddon;
    private _shellIntegrationAddon;
    private _decorationAddon;
    private _clipboardAddon?;
    private _searchAddon?;
    private _unicode11Addon?;
    private _webglAddon?;
    private _serializeAddon?;
    private _imageAddon?;
    private readonly _attachedDisposables;
    private readonly _anyTerminalFocusContextKey;
    private readonly _anyFocusedTerminalHasSelection;
    private _lastFindResult;
    get findResult(): {
        resultIndex: number;
        resultCount: number;
    } | undefined;
    get isStdinDisabled(): boolean;
    get isGpuAccelerated(): boolean;
    private readonly _onDidRequestRunCommand;
    readonly onDidRequestRunCommand: any;
    private readonly _onDidRequestFocus;
    readonly onDidRequestFocus: any;
    private readonly _onDidRequestSendText;
    readonly onDidRequestSendText: any;
    private readonly _onDidRequestFreePort;
    readonly onDidRequestFreePort: any;
    private readonly _onDidRequestRefreshDimensions;
    readonly onDidRequestRefreshDimensions: any;
    private readonly _onDidChangeFindResults;
    readonly onDidChangeFindResults: any;
    private readonly _onDidChangeSelection;
    readonly onDidChangeSelection: any;
    private readonly _onDidChangeFocus;
    readonly onDidChangeFocus: any;
    private readonly _onDidDispose;
    readonly onDidDispose: any;
    get markTracker(): IMarkTracker;
    get shellIntegration(): IShellIntegration;
    get textureAtlas(): Promise<ImageBitmap> | undefined;
    get isFocused(): any;
    /**
     * @param xtermCtor The xterm.js constructor, this is passed in so it can be fetched lazily
     * outside of this class such that {@link raw} is not nullable.
     */
    constructor(xtermCtor: typeof RawXtermTerminal, cols: number, rows: number, _xtermColorProvider: IXtermColorProvider, _capabilities: ITerminalCapabilityStore, shellIntegrationNonce: string, disableShellIntegrationReporting: boolean, _configurationService: IConfigurationService, _instantiationService: IInstantiationService, _logService: ITerminalLogService, _notificationService: INotificationService, _themeService: IThemeService, _telemetryService: ITelemetryService, _terminalConfigurationService: ITerminalConfigurationService, _clipboardService: IClipboardService, contextKeyService: IContextKeyService, _accessibilitySignalService: IAccessibilitySignalService, layoutService: ILayoutService);
    getBufferReverseIterator(): IterableIterator<string>;
    getContentsAsHtml(): Promise<string>;
    getSelectionAsHtml(command?: ITerminalCommand): Promise<string>;
    attachToElement(container: HTMLElement, partialOptions?: Partial<IXtermAttachToElementOptions>): HTMLElement;
    private _setFocused;
    write(data: string | Uint8Array, callback?: () => void): void;
    resize(columns: number, rows: number): void;
    updateConfig(): void;
    private _updateSmoothScrolling;
    private _shouldLoadWebgl;
    forceRedraw(): void;
    clearDecorations(): void;
    forceRefresh(): void;
    findNext(term: string, searchOptions: ISearchOptions): Promise<boolean>;
    findPrevious(term: string, searchOptions: ISearchOptions): Promise<boolean>;
    private _updateFindColors;
    private _searchAddonPromise;
    private _getSearchAddon;
    clearSearchDecorations(): void;
    clearActiveSearchDecoration(): void;
    getFont(): ITerminalFont;
    getLongestViewportWrappedLineLength(): number;
    private _getWrappedLineCount;
    scrollDownLine(): void;
    scrollDownPage(): void;
    scrollToBottom(): void;
    scrollUpLine(): void;
    scrollUpPage(): void;
    scrollToTop(): void;
    scrollToLine(line: number, position?: ScrollPosition): void;
    clearBuffer(): void;
    hasSelection(): boolean;
    clearSelection(): void;
    selectMarkedRange(fromMarkerId: string, toMarkerId: string, scrollIntoView?: boolean): void;
    selectAll(): void;
    focus(): void;
    copySelection(asHtml?: boolean, command?: ITerminalCommand): Promise<void>;
    private _setCursorBlink;
    private _setCursorStyle;
    private _setCursorStyleInactive;
    private _setCursorWidth;
    private _enableWebglRenderer;
    private _disableWebglForThisSession;
    private _refreshImageAddon;
    protected _getClipboardAddonConstructor(): Promise<typeof ClipboardAddonType>;
    protected _getImageAddonConstructor(): Promise<typeof ImageAddonType>;
    protected _getSearchAddonConstructor(): Promise<typeof SearchAddonType>;
    protected _getUnicode11Constructor(): Promise<typeof Unicode11AddonType>;
    protected _getWebglAddonConstructor(): Promise<typeof WebglAddonType>;
    protected _getSerializeAddonConstructor(): Promise<typeof SerializeAddonType>;
    private _disposeOfWebglRenderer;
    getXtermTheme(theme?: IColorTheme): ITheme;
    private _updateTheme;
    refresh(): void;
    private _updateUnicodeVersion;
    _writeText(data: string): void;
    dispose(): void;
}
export declare function getXtermScaledDimensions(w: Window, font: ITerminalFont, width: number, height: number): {
    rows: number;
    cols: number;
} | null;
