{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { dispose, toDisposable } from \"../../../../base/common/lifecycle.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tConfirmResult,\n\tIDialogService,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IShellLaunchConfig,\n\tTerminalExitReason,\n\tTerminalLocation,\n\tTerminalSettingId,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tEditorInputCapabilities,\n\ttype IEditorIdentifier,\n\ttype IUntypedEditorInput,\n} from \"../../../common/editor.js\";\nimport {\n\tEditorInput,\n\ttype IEditorCloseHandler,\n} from \"../../../common/editor/editorInput.js\";\nimport type { IEditorGroup } from \"../../../services/editor/common/editorGroupsService.js\";\nimport {\n\tILifecycleService,\n\tShutdownReason,\n\ttype WillShutdownEvent,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport type { ConfirmOnKill } from \"../common/terminal.js\";\nimport { TerminalContextKeys } from \"../common/terminalContextKey.js\";\nimport {\n\ttype ITerminalInstance,\n\tITerminalInstanceService,\n\tterminalEditorId,\n} from \"./terminal.js\";\nimport { getColorClass, getUriClasses } from \"./terminalIcon.js\";\n\nexport class TerminalEditorInput\n\textends EditorInput\n\timplements IEditorCloseHandler\n{\n\tstatic readonly ID = \"workbench.editors.terminal\";\n\n\toverride readonly closeHandler = this;\n\n\tprivate _isDetached = false;\n\tprivate _isShuttingDown = false;\n\tprivate _isReverted = false;\n\tprivate _copyLaunchConfig?: IShellLaunchConfig;\n\tprivate _terminalEditorFocusContextKey: IContextKey<boolean>;\n\tprivate _group: IEditorGroup | undefined;\n\n\tprotected readonly _onDidRequestAttach = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDidRequestAttach = this._onDidRequestAttach.event;\n\n\tsetGroup(group: IEditorGroup | undefined) {\n\t\tthis._group = group;\n\t\tif (group?.scopedContextKeyService) {\n\t\t\tthis._terminalInstance?.setParentContextKeyService(\n\t\t\t\tgroup.scopedContextKeyService,\n\t\t\t);\n\t\t}\n\t}\n\n\tget group(): IEditorGroup | undefined {\n\t\treturn this._group;\n\t}\n\n\toverride get typeId(): string {\n\t\treturn TerminalEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn terminalEditorId;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn (\n\t\t\tEditorInputCapabilities.Readonly |\n\t\t\tEditorInputCapabilities.Singleton |\n\t\t\tEditorInputCapabilities.CanDropIntoEditor |\n\t\t\tEditorInputCapabilities.ForceDescription\n\t\t);\n\t}\n\n\tsetTerminalInstance(instance: ITerminalInstance): void {\n\t\tif (this._terminalInstance) {\n\t\t\tthrow new Error(\"cannot set instance that has already been set\");\n\t\t}\n\t\tthis._terminalInstance = instance;\n\t\tthis._setupInstanceListeners();\n\t}\n\n\toverride copy(): EditorInput {\n\t\tconst instance = this._terminalInstanceService.createInstance(\n\t\t\tthis._copyLaunchConfig || {},\n\t\t\tTerminalLocation.Editor,\n\t\t);\n\t\tinstance.focusWhenReady();\n\t\tthis._copyLaunchConfig = undefined;\n\t\treturn this._instantiationService.createInstance(\n\t\t\tTerminalEditorInput,\n\t\t\tinstance.resource,\n\t\t\tinstance,\n\t\t);\n\t}\n\n\t/**\n\t * Sets the launch config to use for the next call to EditorInput.copy, which will be used when\n\t * the editor's split command is run.\n\t */\n\tsetCopyLaunchConfig(launchConfig: IShellLaunchConfig) {\n\t\tthis._copyLaunchConfig = launchConfig;\n\t}\n\n\t/**\n\t * Returns the terminal instance for this input if it has not yet been detached from the input.\n\t */\n\tget terminalInstance(): ITerminalInstance | undefined {\n\t\treturn this._isDetached ? undefined : this._terminalInstance;\n\t}\n\n\tshowConfirm(): boolean {\n\t\tif (this._isReverted) {\n\t\t\treturn false;\n\t\t}\n\t\tconst confirmOnKill =\n\t\t\tthis._configurationService.getValue<ConfirmOnKill>(\n\t\t\t\tTerminalSettingId.ConfirmOnKill,\n\t\t\t);\n\t\tif (confirmOnKill === \"editor\" || confirmOnKill === \"always\") {\n\t\t\treturn this._terminalInstance?.hasChildProcesses || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync confirm(\n\t\tterminals: ReadonlyArray<IEditorIdentifier>,\n\t): Promise<ConfirmResult> {\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: localize(\n\t\t\t\t\"confirmDirtyTerminal.message\",\n\t\t\t\t\"Do you want to terminate running processes?\",\n\t\t\t),\n\t\t\tprimaryButton: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"confirmDirtyTerminal.button\",\n\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t},\n\t\t\t\t\"&&Terminate\",\n\t\t\t),\n\t\t\tdetail:\n\t\t\t\tterminals.length > 1\n\t\t\t\t\t? terminals\n\t\t\t\t\t\t\t.map((terminal) => terminal.editor.getName())\n\t\t\t\t\t\t\t.join(\"\\n\") +\n\t\t\t\t\t\t\"\\n\\n\" +\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"confirmDirtyTerminals.detail\",\n\t\t\t\t\t\t\t\"Closing will terminate the running processes in the terminals.\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\"confirmDirtyTerminal.detail\",\n\t\t\t\t\t\t\t\"Closing will terminate the running processes in this terminal.\",\n\t\t\t\t\t\t),\n\t\t});\n\n\t\treturn confirmed ? ConfirmResult.DONT_SAVE : ConfirmResult.CANCEL;\n\t}\n\n\toverride async revert(): Promise<void> {\n\t\t// On revert just treat the terminal as permanently non-dirty\n\t\tthis._isReverted = true;\n\t}\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tprivate _terminalInstance: ITerminalInstance | undefined,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ITerminalInstanceService\n\t\tprivate readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@ILifecycleService\n\t\tprivate readonly _lifecycleService: ILifecycleService,\n\t\t@IContextKeyService private _contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t) {\n\t\tsuper();\n\n\t\tthis._terminalEditorFocusContextKey =\n\t\t\tTerminalContextKeys.editorFocus.bindTo(_contextKeyService);\n\n\t\tif (_terminalInstance) {\n\t\t\tthis._setupInstanceListeners();\n\t\t}\n\t}\n\n\tprivate _setupInstanceListeners(): void {\n\t\tconst instance = this._terminalInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst instanceOnDidFocusListener = instance.onDidFocus(() =>\n\t\t\tthis._terminalEditorFocusContextKey.set(true),\n\t\t);\n\t\tconst instanceOnDidBlurListener = instance.onDidBlur(() =>\n\t\t\tthis._terminalEditorFocusContextKey.reset(),\n\t\t);\n\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (!this._isDetached && !this._isShuttingDown) {\n\t\t\t\t\t// Will be ignored if triggered by onExit or onDisposed terminal events\n\t\t\t\t\t// as disposed was already called\n\t\t\t\t\tinstance.dispose(TerminalExitReason.User);\n\t\t\t\t}\n\t\t\t\tdispose([\n\t\t\t\t\tinstanceOnDidFocusListener,\n\t\t\t\t\tinstanceOnDidBlurListener,\n\t\t\t\t]);\n\t\t\t}),\n\t\t);\n\n\t\tconst disposeListeners = [\n\t\t\tinstance.onExit((e) => {\n\t\t\t\tif (!instance.waitOnExit) {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t\tinstance.onDisposed(() => this.dispose()),\n\t\t\tinstance.onTitleChanged(() => this._onDidChangeLabel.fire()),\n\t\t\tinstance.onIconChanged(() => this._onDidChangeLabel.fire()),\n\t\t\tinstanceOnDidFocusListener,\n\t\t\tinstanceOnDidBlurListener,\n\t\t\tinstance.statusList.onDidChangePrimaryStatus(() =>\n\t\t\t\tthis._onDidChangeLabel.fire(),\n\t\t\t),\n\t\t];\n\n\t\t// Don't dispose editor when instance is torn down on shutdown to avoid extra work and so\n\t\t// the editor/tabs don't disappear\n\t\tthis._lifecycleService.onWillShutdown((e: WillShutdownEvent) => {\n\t\t\tthis._isShuttingDown = true;\n\t\t\tdispose(disposeListeners);\n\n\t\t\t// Don't touch processes if the shutdown was a result of reload as they will be reattached\n\t\t\tconst shouldPersistTerminals =\n\t\t\t\tthis._configurationService.getValue<boolean>(\n\t\t\t\t\tTerminalSettingId.EnablePersistentSessions,\n\t\t\t\t) && e.reason === ShutdownReason.RELOAD;\n\t\t\tif (shouldPersistTerminals) {\n\t\t\t\tinstance.detachProcessAndDispose(TerminalExitReason.Shutdown);\n\t\t\t} else {\n\t\t\t\tinstance.dispose(TerminalExitReason.Shutdown);\n\t\t\t}\n\t\t});\n\t}\n\n\toverride getName() {\n\t\treturn this._terminalInstance?.title || this.resource.fragment;\n\t}\n\n\toverride getIcon(): ThemeIcon | undefined {\n\t\tif (\n\t\t\t!this._terminalInstance ||\n\t\t\t!ThemeIcon.isThemeIcon(this._terminalInstance.icon)\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._terminalInstance.icon;\n\t}\n\n\toverride getLabelExtraClasses(): string[] {\n\t\tif (!this._terminalInstance) {\n\t\t\treturn [];\n\t\t}\n\t\tconst extraClasses: string[] = [\"terminal-tab\", \"predefined-file-icon\"];\n\t\tconst colorClass = getColorClass(this._terminalInstance);\n\t\tif (colorClass) {\n\t\t\textraClasses.push(colorClass);\n\t\t}\n\t\tconst uriClasses = getUriClasses(\n\t\t\tthis._terminalInstance,\n\t\t\tthis._themeService.getColorTheme().type,\n\t\t);\n\t\tif (uriClasses) {\n\t\t\textraClasses.push(...uriClasses);\n\t\t}\n\t\treturn extraClasses;\n\t}\n\n\t/**\n\t * Detach the instance from the input such that when the input is disposed it will not dispose\n\t * of the terminal instance/process.\n\t */\n\tdetachInstance() {\n\t\tif (!this._isShuttingDown) {\n\t\t\tthis._terminalInstance?.detachFromElement();\n\t\t\tthis._terminalInstance?.setParentContextKeyService(\n\t\t\t\tthis._contextKeyService,\n\t\t\t);\n\t\t\tthis._isDetached = true;\n\t\t}\n\t}\n\n\tpublic override getDescription(): string | undefined {\n\t\treturn this._terminalInstance?.description;\n\t}\n\n\tpublic override toUntyped(): IUntypedEditorInput {\n\t\treturn {\n\t\t\tresource: this.resource,\n\t\t\toptions: {\n\t\t\t\toverride: terminalEditorId,\n\t\t\t\tpinned: true,\n\t\t\t\tforceReload: true,\n\t\t\t},\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
