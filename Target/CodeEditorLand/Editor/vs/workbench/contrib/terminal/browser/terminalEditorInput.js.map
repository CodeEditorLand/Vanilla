{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { dispose, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorInputCapabilities, IEditorIdentifier, IUntypedEditorInput } from '../../../common/editor.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { EditorInput, IEditorCloseHandler } from '../../../common/editor/editorInput.js';\nimport { ITerminalInstance, ITerminalInstanceService, terminalEditorId } from './terminal.js';\nimport { getColorClass, getUriClasses } from './terminalIcon.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IShellLaunchConfig, TerminalExitReason, TerminalLocation, TerminalSettingId } from '../../../../platform/terminal/common/terminal.js';\nimport { IEditorGroup } from '../../../services/editor/common/editorGroupsService.js';\nimport { ILifecycleService, ShutdownReason, WillShutdownEvent } from '../../../services/lifecycle/common/lifecycle.js';\nimport { ConfirmOnKill } from '../common/terminal.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { TerminalContextKeys } from '../common/terminalContextKey.js';\nimport { ConfirmResult, IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { Emitter } from '../../../../base/common/event.js';\n\nexport class TerminalEditorInput extends EditorInput implements IEditorCloseHandler {\n\n\tstatic readonly ID = 'workbench.editors.terminal';\n\n\toverride readonly closeHandler = this;\n\n\tprivate _isDetached = false;\n\tprivate _isShuttingDown = false;\n\tprivate _isReverted = false;\n\tprivate _copyLaunchConfig?: IShellLaunchConfig;\n\tprivate _terminalEditorFocusContextKey: IContextKey<boolean>;\n\tprivate _group: IEditorGroup | undefined;\n\n\tprotected readonly _onDidRequestAttach = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidRequestAttach = this._onDidRequestAttach.event;\n\n\tsetGroup(group: IEditorGroup | undefined) {\n\t\tthis._group = group;\n\t\tif (group?.scopedContextKeyService) {\n\t\t\tthis._terminalInstance?.setParentContextKeyService(group.scopedContextKeyService);\n\t\t}\n\t}\n\n\tget group(): IEditorGroup | undefined {\n\t\treturn this._group;\n\t}\n\n\toverride get typeId(): string {\n\t\treturn TerminalEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn terminalEditorId;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn EditorInputCapabilities.Readonly | EditorInputCapabilities.Singleton | EditorInputCapabilities.CanDropIntoEditor | EditorInputCapabilities.ForceDescription;\n\t}\n\n\tsetTerminalInstance(instance: ITerminalInstance): void {\n\t\tif (this._terminalInstance) {\n\t\t\tthrow new Error('cannot set instance that has already been set');\n\t\t}\n\t\tthis._terminalInstance = instance;\n\t\tthis._setupInstanceListeners();\n\t}\n\n\toverride copy(): EditorInput {\n\t\tconst instance = this._terminalInstanceService.createInstance(this._copyLaunchConfig || {}, TerminalLocation.Editor);\n\t\tinstance.focusWhenReady();\n\t\tthis._copyLaunchConfig = undefined;\n\t\treturn this._instantiationService.createInstance(TerminalEditorInput, instance.resource, instance);\n\t}\n\n\t/**\n\t * Sets the launch config to use for the next call to EditorInput.copy, which will be used when\n\t * the editor's split command is run.\n\t */\n\tsetCopyLaunchConfig(launchConfig: IShellLaunchConfig) {\n\t\tthis._copyLaunchConfig = launchConfig;\n\t}\n\n\t/**\n\t * Returns the terminal instance for this input if it has not yet been detached from the input.\n\t */\n\tget terminalInstance(): ITerminalInstance | undefined {\n\t\treturn this._isDetached ? undefined : this._terminalInstance;\n\t}\n\n\tshowConfirm(): boolean {\n\t\tif (this._isReverted) {\n\t\t\treturn false;\n\t\t}\n\t\tconst confirmOnKill = this._configurationService.getValue<ConfirmOnKill>(TerminalSettingId.ConfirmOnKill);\n\t\tif (confirmOnKill === 'editor' || confirmOnKill === 'always') {\n\t\t\treturn this._terminalInstance?.hasChildProcesses || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync confirm(terminals: ReadonlyArray<IEditorIdentifier>): Promise<ConfirmResult> {\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: localize('confirmDirtyTerminal.message', \"Do you want to terminate running processes?\"),\n\t\t\tprimaryButton: localize({ key: 'confirmDirtyTerminal.button', comment: ['&& denotes a mnemonic'] }, \"&&Terminate\"),\n\t\t\tdetail: terminals.length > 1 ?\n\t\t\t\tterminals.map(terminal => terminal.editor.getName()).join('\\n') + '\\n\\n' + localize('confirmDirtyTerminals.detail', \"Closing will terminate the running processes in the terminals.\") :\n\t\t\t\tlocalize('confirmDirtyTerminal.detail', \"Closing will terminate the running processes in this terminal.\")\n\t\t});\n\n\t\treturn confirmed ? ConfirmResult.DONT_SAVE : ConfirmResult.CANCEL;\n\t}\n\n\toverride async revert(): Promise<void> {\n\t\t// On revert just treat the terminal as permanently non-dirty\n\t\tthis._isReverted = true;\n\t}\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tprivate _terminalInstance: ITerminalInstance | undefined,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IContextKeyService private _contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly _dialogService: IDialogService\n\t) {\n\t\tsuper();\n\n\t\tthis._terminalEditorFocusContextKey = TerminalContextKeys.editorFocus.bindTo(_contextKeyService);\n\n\t\tif (_terminalInstance) {\n\t\t\tthis._setupInstanceListeners();\n\t\t}\n\t}\n\n\tprivate _setupInstanceListeners(): void {\n\t\tconst instance = this._terminalInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst instanceOnDidFocusListener = instance.onDidFocus(() => this._terminalEditorFocusContextKey.set(true));\n\t\tconst instanceOnDidBlurListener = instance.onDidBlur(() => this._terminalEditorFocusContextKey.reset());\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (!this._isDetached && !this._isShuttingDown) {\n\t\t\t\t// Will be ignored if triggered by onExit or onDisposed terminal events\n\t\t\t\t// as disposed was already called\n\t\t\t\tinstance.dispose(TerminalExitReason.User);\n\t\t\t}\n\t\t\tdispose([instanceOnDidFocusListener, instanceOnDidBlurListener]);\n\t\t}));\n\n\t\tconst disposeListeners = [\n\t\t\tinstance.onExit((e) => {\n\t\t\t\tif (!instance.waitOnExit) {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t\tinstance.onDisposed(() => this.dispose()),\n\t\t\tinstance.onTitleChanged(() => this._onDidChangeLabel.fire()),\n\t\t\tinstance.onIconChanged(() => this._onDidChangeLabel.fire()),\n\t\t\tinstanceOnDidFocusListener,\n\t\t\tinstanceOnDidBlurListener,\n\t\t\tinstance.statusList.onDidChangePrimaryStatus(() => this._onDidChangeLabel.fire())\n\t\t];\n\n\t\t// Don't dispose editor when instance is torn down on shutdown to avoid extra work and so\n\t\t// the editor/tabs don't disappear\n\t\tthis._lifecycleService.onWillShutdown((e: WillShutdownEvent) => {\n\t\t\tthis._isShuttingDown = true;\n\t\t\tdispose(disposeListeners);\n\n\t\t\t// Don't touch processes if the shutdown was a result of reload as they will be reattached\n\t\t\tconst shouldPersistTerminals = this._configurationService.getValue<boolean>(TerminalSettingId.EnablePersistentSessions) && e.reason === ShutdownReason.RELOAD;\n\t\t\tif (shouldPersistTerminals) {\n\t\t\t\tinstance.detachProcessAndDispose(TerminalExitReason.Shutdown);\n\t\t\t} else {\n\t\t\t\tinstance.dispose(TerminalExitReason.Shutdown);\n\t\t\t}\n\t\t});\n\t}\n\n\toverride getName() {\n\t\treturn this._terminalInstance?.title || this.resource.fragment;\n\t}\n\n\toverride getIcon(): ThemeIcon | undefined {\n\t\tif (!this._terminalInstance || !ThemeIcon.isThemeIcon(this._terminalInstance.icon)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._terminalInstance.icon;\n\t}\n\n\toverride getLabelExtraClasses(): string[] {\n\t\tif (!this._terminalInstance) {\n\t\t\treturn [];\n\t\t}\n\t\tconst extraClasses: string[] = ['terminal-tab', 'predefined-file-icon'];\n\t\tconst colorClass = getColorClass(this._terminalInstance);\n\t\tif (colorClass) {\n\t\t\textraClasses.push(colorClass);\n\t\t}\n\t\tconst uriClasses = getUriClasses(this._terminalInstance, this._themeService.getColorTheme().type);\n\t\tif (uriClasses) {\n\t\t\textraClasses.push(...uriClasses);\n\t\t}\n\t\treturn extraClasses;\n\t}\n\n\t/**\n\t * Detach the instance from the input such that when the input is disposed it will not dispose\n\t * of the terminal instance/process.\n\t */\n\tdetachInstance() {\n\t\tif (!this._isShuttingDown) {\n\t\t\tthis._terminalInstance?.detachFromElement();\n\t\t\tthis._terminalInstance?.setParentContextKeyService(this._contextKeyService);\n\t\t\tthis._isDetached = true;\n\t\t}\n\t}\n\n\tpublic override getDescription(): string | undefined {\n\t\treturn this._terminalInstance?.description;\n\t}\n\n\tpublic override toUntyped(): IUntypedEditorInput {\n\t\treturn {\n\t\t\tresource: this.resource,\n\t\t\toptions: {\n\t\t\t\toverride: terminalEditorId,\n\t\t\t\tpinned: true,\n\t\t\t\tforceReload: true\n\t\t\t}\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
