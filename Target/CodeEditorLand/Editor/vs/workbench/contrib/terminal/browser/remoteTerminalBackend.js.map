{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/remoteTerminalBackend.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from \"../../../../base/common/async.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { revive } from \"../../../../base/common/marshalling.js\";\nimport {\n\ttype PerformanceMark,\n\tmark,\n} from \"../../../../base/common/performance.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOperatingSystem,\n} from \"../../../../base/common/platform.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IRemoteAuthorityResolverService } from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type { ISerializedTerminalCommand } from \"../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport {\n\ttype IPtyHostLatencyMeasurement,\n\ttype IShellLaunchConfig,\n\ttype IShellLaunchConfigDto,\n\ttype ITerminalBackend,\n\ttype ITerminalBackendRegistry,\n\ttype ITerminalChildProcess,\n\ttype ITerminalEnvironment,\n\tITerminalLogService,\n\ttype ITerminalProcessOptions,\n\ttype ITerminalProfile,\n\ttype ITerminalsLayoutInfo,\n\ttype ITerminalsLayoutInfoById,\n\ttype ProcessPropertyType,\n\tTerminalExtensions,\n\ttype TerminalIcon,\n\tTerminalSettingId,\n\ttype TitleEventSource,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport type { IProcessDetails } from \"../../../../platform/terminal/common/terminalProcess.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport { IStatusbarService } from \"../../../services/statusbar/browser/statusbar.js\";\nimport {\n\tREMOTE_TERMINAL_CHANNEL_NAME,\n\tRemoteTerminalChannelClient,\n} from \"../common/remote/remoteTerminalChannel.js\";\nimport {\n\ttype ICompleteTerminalConfiguration,\n\ttype ITerminalConfiguration,\n\tTERMINAL_CONFIG_SECTION,\n} from \"../common/terminal.js\";\nimport { TerminalStorageKeys } from \"../common/terminalStorageKeys.js\";\nimport { BaseTerminalBackend } from \"./baseTerminalBackend.js\";\nimport { RemotePty } from \"./remotePty.js\";\nimport { ITerminalInstanceService } from \"./terminal.js\";\n\nexport class RemoteTerminalBackendContribution\n\timplements IWorkbenchContribution\n{\n\tstatic ID = \"remoteTerminalBackend\";\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService,\n\t) {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection?.remoteAuthority) {\n\t\t\tconst channel = instantiationService.createInstance(\n\t\t\t\tRemoteTerminalChannelClient,\n\t\t\t\tconnection.remoteAuthority,\n\t\t\t\tconnection.getChannel(REMOTE_TERMINAL_CHANNEL_NAME),\n\t\t\t);\n\t\t\tconst backend = instantiationService.createInstance(\n\t\t\t\tRemoteTerminalBackend,\n\t\t\t\tconnection.remoteAuthority,\n\t\t\t\tchannel,\n\t\t\t);\n\t\t\tRegistry.as<ITerminalBackendRegistry>(\n\t\t\t\tTerminalExtensions.Backend,\n\t\t\t).registerTerminalBackend(backend);\n\t\t\tterminalInstanceService.didRegisterBackend(backend.remoteAuthority);\n\t\t}\n\t}\n}\n\nclass RemoteTerminalBackend\n\textends BaseTerminalBackend\n\timplements ITerminalBackend\n{\n\tprivate readonly _ptys: Map<number, RemotePty> = new Map();\n\n\tprivate readonly _whenConnected = new DeferredPromise<void>();\n\tget whenReady(): Promise<void> {\n\t\treturn this._whenConnected.p;\n\t}\n\tsetReady(): void {\n\t\tthis._whenConnected.complete();\n\t}\n\n\tprivate readonly _onDidRequestDetach = this._register(\n\t\tnew Emitter<{\n\t\t\trequestId: number;\n\t\t\tworkspaceId: string;\n\t\t\tinstanceId: number;\n\t\t}>(),\n\t);\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\tprivate readonly _onRestoreCommands = this._register(\n\t\tnew Emitter<{ id: number; commands: ISerializedTerminalCommand[] }>(),\n\t);\n\treadonly onRestoreCommands = this._onRestoreCommands.event;\n\n\tconstructor(\n\t\treadonly remoteAuthority: string | undefined,\n\t\tprivate readonly _remoteTerminalChannel: RemoteTerminalChannelClient,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IStatusbarService statusBarService: IStatusbarService\n\t) {\n\t\tsuper(_remoteTerminalChannel, logService, _historyService, configurationResolverService, statusBarService, workspaceContextService);\n\n\t\tthis._remoteTerminalChannel.onProcessData(e => this._ptys.get(e.id)?.handleData(e.event));\n\t\tthis._remoteTerminalChannel.onProcessReplay(e => {\n\t\t\tthis._ptys.get(e.id)?.handleReplay(e.event);\n\t\t\tif (e.event.commands.commands.length > 0) {\n\t\t\t\tthis._onRestoreCommands.fire({ id: e.id, commands: e.event.commands.commands });\n\t\t\t}\n\t\t});\n\t\tthis._remoteTerminalChannel.onProcessOrphanQuestion(e => this._ptys.get(e.id)?.handleOrphanQuestion());\n\t\tthis._remoteTerminalChannel.onDidRequestDetach(e => this._onDidRequestDetach.fire(e));\n\t\tthis._remoteTerminalChannel.onProcessReady(e => this._ptys.get(e.id)?.handleReady(e.event));\n\t\tthis._remoteTerminalChannel.onDidChangeProperty(e => this._ptys.get(e.id)?.handleDidChangeProperty(e.property));\n\t\tthis._remoteTerminalChannel.onProcessExit(e => {\n\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\tif (pty) {\n\t\t\t\tpty.handleExit(e.event);\n\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t}\n\t\t});\n\n\t\tconst allowedCommands = ['_remoteCLI.openExternal', '_remoteCLI.windowOpen', '_remoteCLI.getSystemStatus', '_remoteCLI.manageExtensions'];\n\t\tthis._remoteTerminalChannel.onExecuteCommand(async e => {\n\t\t\t// Ensure this request for for this window\n\t\t\tconst pty = this._ptys.get(e.persistentProcessId);\n\t\t\tif (!pty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst reqId = e.reqId;\n\t\t\tconst commandId = e.commandId;\n\t\t\tif (!allowedCommands.includes(commandId)) {\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, true, 'Invalid remote cli command: ' + commandId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst commandArgs = e.commandArgs.map(arg => revive(arg));\n\t\t\ttry {\n\t\t\t\tconst result = await this._commandService.executeCommand(e.commandId, ...commandArgs);\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, false, result);\n\t\t\t} catch (err) {\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, true, err);\n\t\t\t}\n\t\t});\n\n\t\t// Listen for config changes\n\t\tconst initialConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\tfor (const match of Object.keys(initialConfig.autoReplies)) {\n\t\t\t// Ensure the value is truthy\n\t\t\tconst reply = initialConfig.autoReplies[match];\n\t\t\tif (reply) {\n\t\t\t\tthis._remoteTerminalChannel.installAutoReply(match, reply);\n\t\t\t}\n\t\t}\n\t\t// TODO: Could simplify update to a single call\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.AutoReplies)) {\n\t\t\t\tthis._remoteTerminalChannel.uninstallAllAutoReplies();\n\t\t\t\tconst config = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\t\tfor (const match of Object.keys(config.autoReplies)) {\n\t\t\t\t\t// Ensure the value is truthy\n\t\t\t\t\tconst reply = config.autoReplies[match];\n\t\t\t\t\tif (reply) {\n\t\t\t\t\t\tawait this._remoteTerminalChannel.installAutoReply(match, reply);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._onPtyHostConnected.fire();\n\t}\n\n\tasync requestDetachInstance(\n\t\tworkspaceId: string,\n\t\tinstanceId: number,\n\t): Promise<IProcessDetails | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot request detach instance when there is no remote!`,\n\t\t\t);\n\t\t}\n\t\treturn this._remoteTerminalChannel.requestDetachInstance(\n\t\t\tworkspaceId,\n\t\t\tinstanceId,\n\t\t);\n\t}\n\n\tasync acceptDetachInstanceReply(\n\t\trequestId: number,\n\t\tpersistentProcessId?: number,\n\t): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot accept detached instance when there is no remote!`,\n\t\t\t);\n\t\t} else if (!persistentProcessId) {\n\t\t\tthis._logService.warn(\n\t\t\t\t\"Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.acceptDetachInstanceReply(\n\t\t\trequestId,\n\t\t\tpersistentProcessId,\n\t\t);\n\t}\n\n\tasync persistTerminalState(): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot persist terminal state when there is no remote!`,\n\t\t\t);\n\t\t}\n\t\tconst ids = Array.from(this._ptys.keys());\n\t\tconst serialized =\n\t\t\tawait this._remoteTerminalChannel.serializeTerminalState(ids);\n\t\tthis._storageService.store(\n\t\t\tTerminalStorageKeys.TerminalBufferState,\n\t\t\tserialized,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string, // TODO: This is ignored\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: \"6\" | \"11\",\n\t\tenv: IProcessEnvironment, // TODO: This is ignored\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t): Promise<ITerminalChildProcess> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot create remote terminal when there is no remote!`,\n\t\t\t);\n\t\t}\n\n\t\t// Fetch the environment to check shell permissions\n\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\tif (!remoteEnv) {\n\t\t\t// Extension host processes are only allowed in remote extension hosts currently\n\t\t\tthrow new Error(\"Could not fetch remote environment\");\n\t\t}\n\n\t\tconst terminalConfig =\n\t\t\tthis._configurationService.getValue<ITerminalConfiguration>(\n\t\t\t\tTERMINAL_CONFIG_SECTION,\n\t\t\t);\n\t\tconst configuration: ICompleteTerminalConfiguration = {\n\t\t\t\"terminal.integrated.env.windows\":\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tTerminalSettingId.EnvWindows,\n\t\t\t\t) as ITerminalEnvironment,\n\t\t\t\"terminal.integrated.env.osx\": this._configurationService.getValue(\n\t\t\t\tTerminalSettingId.EnvMacOs,\n\t\t\t) as ITerminalEnvironment,\n\t\t\t\"terminal.integrated.env.linux\":\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tTerminalSettingId.EnvLinux,\n\t\t\t\t) as ITerminalEnvironment,\n\t\t\t\"terminal.integrated.cwd\": this._configurationService.getValue(\n\t\t\t\tTerminalSettingId.Cwd,\n\t\t\t) as string,\n\t\t\t\"terminal.integrated.detectLocale\": terminalConfig.detectLocale,\n\t\t};\n\n\t\tconst shellLaunchConfigDto: IShellLaunchConfigDto = {\n\t\t\tname: shellLaunchConfig.name,\n\t\t\texecutable: shellLaunchConfig.executable,\n\t\t\targs: shellLaunchConfig.args,\n\t\t\tcwd: shellLaunchConfig.cwd,\n\t\t\tenv: shellLaunchConfig.env,\n\t\t\tuseShellEnvironment: shellLaunchConfig.useShellEnvironment,\n\t\t\treconnectionProperties: shellLaunchConfig.reconnectionProperties,\n\t\t\ttype: shellLaunchConfig.type,\n\t\t\tisFeatureTerminal: shellLaunchConfig.isFeatureTerminal,\n\t\t};\n\t\tconst activeWorkspaceRootUri =\n\t\t\tthis._historyService.getLastActiveWorkspaceRoot();\n\n\t\tconst result = await this._remoteTerminalChannel.createProcess(\n\t\t\tshellLaunchConfigDto,\n\t\t\tconfiguration,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\toptions,\n\t\t\tshouldPersist,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tunicodeVersion,\n\t\t);\n\t\tconst pty = this._instantiationService.createInstance(\n\t\t\tRemotePty,\n\t\t\tresult.persistentTerminalId,\n\t\t\tshouldPersist,\n\t\t\tthis._remoteTerminalChannel,\n\t\t);\n\t\tthis._ptys.set(result.persistentTerminalId, pty);\n\t\treturn pty;\n\t}\n\n\tasync attachToProcess(\n\t\tid: number,\n\t): Promise<ITerminalChildProcess | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot create remote terminal when there is no remote!`,\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this._remoteTerminalChannel.attachToProcess(id);\n\t\t\tconst pty = this._instantiationService.createInstance(\n\t\t\t\tRemotePty,\n\t\t\t\tid,\n\t\t\t\ttrue,\n\t\t\t\tthis._remoteTerminalChannel,\n\t\t\t);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync attachToRevivedProcess(\n\t\tid: number,\n\t): Promise<ITerminalChildProcess | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot create remote terminal when there is no remote!`,\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\tconst newId =\n\t\t\t\t(await this._remoteTerminalChannel.getRevivedPtyNewId(id)) ??\n\t\t\t\tid;\n\t\t\treturn await this.attachToProcess(newId);\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._remoteTerminalChannel.listProcesses();\n\t}\n\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst sw = new StopWatch();\n\t\tconst results = await this._remoteTerminalChannel.getLatency();\n\t\tsw.stop();\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: \"window<->ptyhostservice<->ptyhost\",\n\t\t\t\tlatency: sw.elapsed(),\n\t\t\t},\n\t\t\t...results,\n\t\t];\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\tid: number,\n\t\tproperty: T,\n\t\tvalue: any,\n\t): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateProperty(id, property, value);\n\t}\n\n\tasync updateTitle(\n\t\tid: number,\n\t\ttitle: string,\n\t\ttitleSource: TitleEventSource,\n\t): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateTitle(id, title, titleSource);\n\t}\n\n\tasync updateIcon(\n\t\tid: number,\n\t\tuserInitiated: boolean,\n\t\ticon: TerminalIcon,\n\t\tcolor?: string,\n\t): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateIcon(\n\t\t\tid,\n\t\t\tuserInitiated,\n\t\t\ticon,\n\t\t\tcolor,\n\t\t);\n\t}\n\n\tasync getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn (\n\t\t\tthis._remoteTerminalChannel.getDefaultSystemShell(osOverride) || \"\"\n\t\t);\n\t}\n\n\tasync getProfiles(\n\t\tprofiles: unknown,\n\t\tdefaultProfile: unknown,\n\t\tincludeDetectedProfiles?: boolean,\n\t): Promise<ITerminalProfile[]> {\n\t\treturn (\n\t\t\tthis._remoteTerminalChannel.getProfiles(\n\t\t\t\tprofiles,\n\t\t\t\tdefaultProfile,\n\t\t\t\tincludeDetectedProfiles,\n\t\t\t) || []\n\t\t);\n\t}\n\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._remoteTerminalChannel.getEnvironment() || {};\n\t}\n\n\tasync getShellEnvironment(): Promise<IProcessEnvironment | undefined> {\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst resolverResult =\n\t\t\tawait this._remoteAuthorityResolverService.resolveAuthority(\n\t\t\t\tconnection.remoteAuthority,\n\t\t\t);\n\t\treturn resolverResult.options?.extensionHostEnv as any;\n\t}\n\n\tasync getWslPath(\n\t\toriginal: string,\n\t\tdirection: \"unix-to-win\" | \"win-to-unix\",\n\t): Promise<string> {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (env?.os !== OperatingSystem.Windows) {\n\t\t\treturn original;\n\t\t}\n\t\treturn (\n\t\t\tthis._remoteTerminalChannel.getWslPath(original, direction) ||\n\t\t\toriginal\n\t\t);\n\t}\n\n\tasync setTerminalLayoutInfo(\n\t\tlayout?: ITerminalsLayoutInfoById,\n\t): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot call setActiveInstanceId when there is no remote`,\n\t\t\t);\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.setTerminalLayoutInfo(layout);\n\t}\n\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\"Cannot reduce grace time when there is no remote\");\n\t\t}\n\t\treturn this._remoteTerminalChannel.reduceConnectionGraceTime();\n\t}\n\n\tasync getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot call getActiveInstanceId when there is no remote`,\n\t\t\t);\n\t\t}\n\n\t\tconst workspaceId = this._getWorkspaceId();\n\n\t\t// Revive processes if needed\n\t\tconst serializedState = this._storageService.get(\n\t\t\tTerminalStorageKeys.TerminalBufferState,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tconst reviveBufferState =\n\t\t\tthis._deserializeTerminalState(serializedState);\n\t\tif (reviveBufferState && reviveBufferState.length > 0) {\n\t\t\ttry {\n\t\t\t\t// Note that remote terminals do not get their environment re-resolved unlike in local terminals\n\n\t\t\t\tmark(\"code/terminal/willReviveTerminalProcessesRemote\");\n\t\t\t\tawait this._remoteTerminalChannel.reviveTerminalProcesses(\n\t\t\t\t\tworkspaceId,\n\t\t\t\t\treviveBufferState,\n\t\t\t\t\tIntl.DateTimeFormat().resolvedOptions().locale,\n\t\t\t\t);\n\t\t\t\tmark(\"code/terminal/didReviveTerminalProcessesRemote\");\n\t\t\t\tthis._storageService.remove(\n\t\t\t\t\tTerminalStorageKeys.TerminalBufferState,\n\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t);\n\t\t\t\t// If reviving processes, send the terminal layout info back to the pty host as it\n\t\t\t\t// will not have been persisted on application exit\n\t\t\t\tconst layoutInfo = this._storageService.get(\n\t\t\t\t\tTerminalStorageKeys.TerminalLayoutInfo,\n\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tmark(\"code/terminal/willSetTerminalLayoutInfoRemote\");\n\t\t\t\t\tawait this._remoteTerminalChannel.setTerminalLayoutInfo(\n\t\t\t\t\t\tJSON.parse(layoutInfo),\n\t\t\t\t\t);\n\t\t\t\t\tmark(\"code/terminal/didSetTerminalLayoutInfoRemote\");\n\t\t\t\t\tthis._storageService.remove(\n\t\t\t\t\t\tTerminalStorageKeys.TerminalLayoutInfo,\n\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {\n\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\"RemoteTerminalBackend#getTerminalLayoutInfo Error\",\n\t\t\t\t\te && typeof e === \"object\" && \"message\" in e\n\t\t\t\t\t\t? e.message\n\t\t\t\t\t\t: e,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.getTerminalLayoutInfo();\n\t}\n\n\tasync getPerformanceMarks(): Promise<PerformanceMark[]> {\n\t\treturn this._remoteTerminalChannel.getPerformanceMarks();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
