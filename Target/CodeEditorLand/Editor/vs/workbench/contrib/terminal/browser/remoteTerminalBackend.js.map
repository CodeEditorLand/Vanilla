{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/remoteTerminalBackend.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from '../../../../base/common/async.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { revive } from '../../../../base/common/marshalling.js';\nimport { PerformanceMark, mark } from '../../../../base/common/performance.js';\nimport { IProcessEnvironment, OperatingSystem } from '../../../../base/common/platform.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IRemoteAuthorityResolverService } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ISerializedTerminalCommand } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { IPtyHostLatencyMeasurement, IShellLaunchConfig, IShellLaunchConfigDto, ITerminalBackend, ITerminalBackendRegistry, ITerminalChildProcess, ITerminalEnvironment, ITerminalLogService, ITerminalProcessOptions, ITerminalProfile, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, ProcessPropertyType, TerminalExtensions, TerminalIcon, TerminalSettingId, TitleEventSource } from '../../../../platform/terminal/common/terminal.js';\nimport { IProcessDetails } from '../../../../platform/terminal/common/terminalProcess.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { BaseTerminalBackend } from './baseTerminalBackend.js';\nimport { RemotePty } from './remotePty.js';\nimport { ITerminalInstanceService } from './terminal.js';\nimport { RemoteTerminalChannelClient, REMOTE_TERMINAL_CHANNEL_NAME } from '../common/remote/remoteTerminalChannel.js';\nimport { ICompleteTerminalConfiguration, ITerminalConfiguration, TERMINAL_CONFIG_SECTION } from '../common/terminal.js';\nimport { TerminalStorageKeys } from '../common/terminalStorageKeys.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { IStatusbarService } from '../../../services/statusbar/browser/statusbar.js';\n\nexport class RemoteTerminalBackendContribution implements IWorkbenchContribution {\n\tstatic ID = 'remoteTerminalBackend';\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService\n\t) {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection?.remoteAuthority) {\n\t\t\tconst channel = instantiationService.createInstance(RemoteTerminalChannelClient, connection.remoteAuthority, connection.getChannel(REMOTE_TERMINAL_CHANNEL_NAME));\n\t\t\tconst backend = instantiationService.createInstance(RemoteTerminalBackend, connection.remoteAuthority, channel);\n\t\t\tRegistry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).registerTerminalBackend(backend);\n\t\t\tterminalInstanceService.didRegisterBackend(backend.remoteAuthority);\n\t\t}\n\t}\n}\n\nclass RemoteTerminalBackend extends BaseTerminalBackend implements ITerminalBackend {\n\tprivate readonly _ptys: Map<number, RemotePty> = new Map();\n\n\tprivate readonly _whenConnected = new DeferredPromise<void>();\n\tget whenReady(): Promise<void> { return this._whenConnected.p; }\n\tsetReady(): void { this._whenConnected.complete(); }\n\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\tprivate readonly _onRestoreCommands = this._register(new Emitter<{ id: number; commands: ISerializedTerminalCommand[] }>());\n\treadonly onRestoreCommands = this._onRestoreCommands.event;\n\n\tconstructor(\n\t\treadonly remoteAuthority: string | undefined,\n\t\tprivate readonly _remoteTerminalChannel: RemoteTerminalChannelClient,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IStatusbarService statusBarService: IStatusbarService\n\t) {\n\t\tsuper(_remoteTerminalChannel, logService, _historyService, configurationResolverService, statusBarService, workspaceContextService);\n\n\t\tthis._remoteTerminalChannel.onProcessData(e => this._ptys.get(e.id)?.handleData(e.event));\n\t\tthis._remoteTerminalChannel.onProcessReplay(e => {\n\t\t\tthis._ptys.get(e.id)?.handleReplay(e.event);\n\t\t\tif (e.event.commands.commands.length > 0) {\n\t\t\t\tthis._onRestoreCommands.fire({ id: e.id, commands: e.event.commands.commands });\n\t\t\t}\n\t\t});\n\t\tthis._remoteTerminalChannel.onProcessOrphanQuestion(e => this._ptys.get(e.id)?.handleOrphanQuestion());\n\t\tthis._remoteTerminalChannel.onDidRequestDetach(e => this._onDidRequestDetach.fire(e));\n\t\tthis._remoteTerminalChannel.onProcessReady(e => this._ptys.get(e.id)?.handleReady(e.event));\n\t\tthis._remoteTerminalChannel.onDidChangeProperty(e => this._ptys.get(e.id)?.handleDidChangeProperty(e.property));\n\t\tthis._remoteTerminalChannel.onProcessExit(e => {\n\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\tif (pty) {\n\t\t\t\tpty.handleExit(e.event);\n\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t}\n\t\t});\n\n\t\tconst allowedCommands = ['_remoteCLI.openExternal', '_remoteCLI.windowOpen', '_remoteCLI.getSystemStatus', '_remoteCLI.manageExtensions'];\n\t\tthis._remoteTerminalChannel.onExecuteCommand(async e => {\n\t\t\t// Ensure this request for for this window\n\t\t\tconst pty = this._ptys.get(e.persistentProcessId);\n\t\t\tif (!pty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst reqId = e.reqId;\n\t\t\tconst commandId = e.commandId;\n\t\t\tif (!allowedCommands.includes(commandId)) {\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, true, 'Invalid remote cli command: ' + commandId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst commandArgs = e.commandArgs.map(arg => revive(arg));\n\t\t\ttry {\n\t\t\t\tconst result = await this._commandService.executeCommand(e.commandId, ...commandArgs);\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, false, result);\n\t\t\t} catch (err) {\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, true, err);\n\t\t\t}\n\t\t});\n\n\t\t// Listen for config changes\n\t\tconst initialConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\tfor (const match of Object.keys(initialConfig.autoReplies)) {\n\t\t\t// Ensure the value is truthy\n\t\t\tconst reply = initialConfig.autoReplies[match];\n\t\t\tif (reply) {\n\t\t\t\tthis._remoteTerminalChannel.installAutoReply(match, reply);\n\t\t\t}\n\t\t}\n\t\t// TODO: Could simplify update to a single call\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.AutoReplies)) {\n\t\t\t\tthis._remoteTerminalChannel.uninstallAllAutoReplies();\n\t\t\t\tconst config = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\t\tfor (const match of Object.keys(config.autoReplies)) {\n\t\t\t\t\t// Ensure the value is truthy\n\t\t\t\t\tconst reply = config.autoReplies[match];\n\t\t\t\t\tif (reply) {\n\t\t\t\t\t\tawait this._remoteTerminalChannel.installAutoReply(match, reply);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._onPtyHostConnected.fire();\n\t}\n\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot request detach instance when there is no remote!`);\n\t\t}\n\t\treturn this._remoteTerminalChannel.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId?: number): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot accept detached instance when there is no remote!`);\n\t\t} else if (!persistentProcessId) {\n\t\t\tthis._logService.warn('Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId');\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.acceptDetachInstanceReply(requestId, persistentProcessId);\n\t}\n\n\tasync persistTerminalState(): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot persist terminal state when there is no remote!`);\n\t\t}\n\t\tconst ids = Array.from(this._ptys.keys());\n\t\tconst serialized = await this._remoteTerminalChannel.serializeTerminalState(ids);\n\t\tthis._storageService.store(TerminalStorageKeys.TerminalBufferState, serialized, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string, // TODO: This is ignored\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment, // TODO: This is ignored\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean\n\t): Promise<ITerminalChildProcess> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\t// Fetch the environment to check shell permissions\n\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\tif (!remoteEnv) {\n\t\t\t// Extension host processes are only allowed in remote extension hosts currently\n\t\t\tthrow new Error('Could not fetch remote environment');\n\t\t}\n\n\t\tconst terminalConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\tconst configuration: ICompleteTerminalConfiguration = {\n\t\t\t'terminal.integrated.env.windows': this._configurationService.getValue(TerminalSettingId.EnvWindows) as ITerminalEnvironment,\n\t\t\t'terminal.integrated.env.osx': this._configurationService.getValue(TerminalSettingId.EnvMacOs) as ITerminalEnvironment,\n\t\t\t'terminal.integrated.env.linux': this._configurationService.getValue(TerminalSettingId.EnvLinux) as ITerminalEnvironment,\n\t\t\t'terminal.integrated.cwd': this._configurationService.getValue(TerminalSettingId.Cwd) as string,\n\t\t\t'terminal.integrated.detectLocale': terminalConfig.detectLocale\n\t\t};\n\n\t\tconst shellLaunchConfigDto: IShellLaunchConfigDto = {\n\t\t\tname: shellLaunchConfig.name,\n\t\t\texecutable: shellLaunchConfig.executable,\n\t\t\targs: shellLaunchConfig.args,\n\t\t\tcwd: shellLaunchConfig.cwd,\n\t\t\tenv: shellLaunchConfig.env,\n\t\t\tuseShellEnvironment: shellLaunchConfig.useShellEnvironment,\n\t\t\treconnectionProperties: shellLaunchConfig.reconnectionProperties,\n\t\t\ttype: shellLaunchConfig.type,\n\t\t\tisFeatureTerminal: shellLaunchConfig.isFeatureTerminal\n\t\t};\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot();\n\n\t\tconst result = await this._remoteTerminalChannel.createProcess(\n\t\t\tshellLaunchConfigDto,\n\t\t\tconfiguration,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\toptions,\n\t\t\tshouldPersist,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tunicodeVersion\n\t\t);\n\t\tconst pty = this._instantiationService.createInstance(RemotePty, result.persistentTerminalId, shouldPersist, this._remoteTerminalChannel);\n\t\tthis._ptys.set(result.persistentTerminalId, pty);\n\t\treturn pty;\n\t}\n\n\tasync attachToProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this._remoteTerminalChannel.attachToProcess(id);\n\t\t\tconst pty = this._instantiationService.createInstance(RemotePty, id, true, this._remoteTerminalChannel);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync attachToRevivedProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\ttry {\n\t\t\tconst newId = await this._remoteTerminalChannel.getRevivedPtyNewId(id) ?? id;\n\t\t\treturn await this.attachToProcess(newId);\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._remoteTerminalChannel.listProcesses();\n\t}\n\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst sw = new StopWatch();\n\t\tconst results = await this._remoteTerminalChannel.getLatency();\n\t\tsw.stop();\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: 'window<->ptyhostservice<->ptyhost',\n\t\t\t\tlatency: sw.elapsed()\n\t\t\t},\n\t\t\t...results\n\t\t];\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, property: T, value: any): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateProperty(id, property, value);\n\t}\n\n\tasync updateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateTitle(id, title, titleSource);\n\t}\n\n\tasync updateIcon(id: number, userInitiated: boolean, icon: TerminalIcon, color?: string): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateIcon(id, userInitiated, icon, color);\n\t}\n\n\tasync getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._remoteTerminalChannel.getDefaultSystemShell(osOverride) || '';\n\t}\n\n\tasync getProfiles(profiles: unknown, defaultProfile: unknown, includeDetectedProfiles?: boolean): Promise<ITerminalProfile[]> {\n\t\treturn this._remoteTerminalChannel.getProfiles(profiles, defaultProfile, includeDetectedProfiles) || [];\n\t}\n\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._remoteTerminalChannel.getEnvironment() || {};\n\t}\n\n\tasync getShellEnvironment(): Promise<IProcessEnvironment | undefined> {\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst resolverResult = await this._remoteAuthorityResolverService.resolveAuthority(connection.remoteAuthority);\n\t\treturn resolverResult.options?.extensionHostEnv as any;\n\t}\n\n\tasync getWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix'): Promise<string> {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (env?.os !== OperatingSystem.Windows) {\n\t\t\treturn original;\n\t\t}\n\t\treturn this._remoteTerminalChannel.getWslPath(original, direction) || original;\n\t}\n\n\tasync setTerminalLayoutInfo(layout?: ITerminalsLayoutInfoById): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot call setActiveInstanceId when there is no remote`);\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.setTerminalLayoutInfo(layout);\n\t}\n\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error('Cannot reduce grace time when there is no remote');\n\t\t}\n\t\treturn this._remoteTerminalChannel.reduceConnectionGraceTime();\n\t}\n\n\tasync getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot call getActiveInstanceId when there is no remote`);\n\t\t}\n\n\t\tconst workspaceId = this._getWorkspaceId();\n\n\t\t// Revive processes if needed\n\t\tconst serializedState = this._storageService.get(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\tconst reviveBufferState = this._deserializeTerminalState(serializedState);\n\t\tif (reviveBufferState && reviveBufferState.length > 0) {\n\t\t\ttry {\n\t\t\t\t// Note that remote terminals do not get their environment re-resolved unlike in local terminals\n\n\t\t\t\tmark('code/terminal/willReviveTerminalProcessesRemote');\n\t\t\t\tawait this._remoteTerminalChannel.reviveTerminalProcesses(workspaceId, reviveBufferState, Intl.DateTimeFormat().resolvedOptions().locale);\n\t\t\t\tmark('code/terminal/didReviveTerminalProcessesRemote');\n\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\t\t\t// If reviving processes, send the terminal layout info back to the pty host as it\n\t\t\t\t// will not have been persisted on application exit\n\t\t\t\tconst layoutInfo = this._storageService.get(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tmark('code/terminal/willSetTerminalLayoutInfoRemote');\n\t\t\t\t\tawait this._remoteTerminalChannel.setTerminalLayoutInfo(JSON.parse(layoutInfo));\n\t\t\t\t\tmark('code/terminal/didSetTerminalLayoutInfoRemote');\n\t\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {\n\t\t\t\tthis._logService.warn('RemoteTerminalBackend#getTerminalLayoutInfo Error', e && typeof e === 'object' && 'message' in e ? e.message : e);\n\t\t\t}\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.getTerminalLayoutInfo();\n\t}\n\n\tasync getPerformanceMarks(): Promise<PerformanceMark[]> {\n\t\treturn this._remoteTerminalChannel.getPerformanceMarks();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
