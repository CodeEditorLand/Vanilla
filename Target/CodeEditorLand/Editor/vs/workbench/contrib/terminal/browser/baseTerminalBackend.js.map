{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/baseTerminalBackend.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { localize } from '../../../../nls.js';\nimport { ICrossVersionSerializedTerminalState, IPtyHostController, ISerializedTerminalState, ITerminalLogService } from '../../../../platform/terminal/common/terminal.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from '../../../services/statusbar/browser/statusbar.js';\n\n// HACK: This file should not depend on terminalContrib\n// eslint-disable-next-line local/code-import-patterns\nimport { TerminalDeveloperCommandId } from '../../terminalContrib/developer/common/terminal.developer.js';\n\nexport abstract class BaseTerminalBackend extends Disposable {\n\tprivate _isPtyHostUnresponsive: boolean = false;\n\n\tget isResponsive(): boolean { return !this._isPtyHostUnresponsive; }\n\n\tprotected readonly _onPtyHostConnected = this._register(new Emitter<void>());\n\treadonly onPtyHostConnected = this._onPtyHostConnected.event;\n\tprotected readonly _onPtyHostRestart = this._register(new Emitter<void>());\n\treadonly onPtyHostRestart = this._onPtyHostRestart.event;\n\tprotected readonly _onPtyHostUnresponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprotected readonly _onPtyHostResponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\n\tconstructor(\n\t\tprivate readonly _ptyHostController: IPtyHostController,\n\t\tprotected readonly _logService: ITerminalLogService,\n\t\thistoryService: IHistoryService,\n\t\tconfigurationResolverService: IConfigurationResolverService,\n\t\tstatusBarService: IStatusbarService,\n\t\tprotected readonly _workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\n\t\tlet unresponsiveStatusBarEntry: IStatusbarEntry;\n\t\tlet statusBarAccessor: IStatusbarEntryAccessor;\n\t\tlet hasStarted = false;\n\n\t\t// Attach pty host listeners\n\t\tthis._register(this._ptyHostController.onPtyHostExit(() => {\n\t\t\tthis._logService.error(`The terminal's pty host process exited, the connection to all terminal processes was lost`);\n\t\t}));\n\t\tthis._register(this.onPtyHostConnected(() => hasStarted = true));\n\t\tthis._register(this._ptyHostController.onPtyHostStart(() => {\n\t\t\tthis._logService.debug(`The terminal's pty host process is starting`);\n\t\t\t// Only fire the _restart_ event after it has started\n\t\t\tif (hasStarted) {\n\t\t\t\tthis._logService.trace('IPtyHostController#onPtyHostRestart');\n\t\t\t\tthis._onPtyHostRestart.fire();\n\t\t\t}\n\t\t\tstatusBarAccessor?.dispose();\n\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t}));\n\t\tthis._register(this._ptyHostController.onPtyHostUnresponsive(() => {\n\t\t\tstatusBarAccessor?.dispose();\n\t\t\tif (!unresponsiveStatusBarEntry) {\n\t\t\t\tunresponsiveStatusBarEntry = {\n\t\t\t\t\tname: localize('ptyHostStatus', 'Pty Host Status'),\n\t\t\t\t\ttext: `$(debug-disconnect) ${localize('ptyHostStatus.short', 'Pty Host')}`,\n\t\t\t\t\ttooltip: localize('nonResponsivePtyHost', \"The connection to the terminal's pty host process is unresponsive, terminals may stop working. Click to manually restart the pty host.\"),\n\t\t\t\t\tariaLabel: localize('ptyHostStatus.ariaLabel', 'Pty Host is unresponsive'),\n\t\t\t\t\tcommand: TerminalDeveloperCommandId.RestartPtyHost,\n\t\t\t\t\tkind: 'warning'\n\t\t\t\t};\n\t\t\t}\n\t\t\tstatusBarAccessor = statusBarService.addEntry(unresponsiveStatusBarEntry, 'ptyHostStatus', StatusbarAlignment.LEFT);\n\t\t\tthis._isPtyHostUnresponsive = true;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}));\n\t\tthis._register(this._ptyHostController.onPtyHostResponsive(() => {\n\t\t\tif (!this._isPtyHostUnresponsive) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._logService.info('The pty host became responsive again');\n\t\t\tstatusBarAccessor?.dispose();\n\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\tthis._onPtyHostResponsive.fire();\n\t\t}));\n\t\tthis._register(this._ptyHostController.onPtyHostRequestResolveVariables(async e => {\n\t\t\t// Only answer requests for this workspace\n\t\t\tif (e.workspaceId !== this._workspaceContextService.getWorkspace().id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\t\tconst resolveCalls: Promise<string>[] = e.originalText.map(t => {\n\t\t\t\treturn configurationResolverService.resolveAsync(lastActiveWorkspaceRoot, t);\n\t\t\t});\n\t\t\tconst result = await Promise.all(resolveCalls);\n\t\t\tthis._ptyHostController.acceptPtyHostResolvedVariables(e.requestId, result);\n\t\t}));\n\t}\n\n\trestartPtyHost(): void {\n\t\tthis._ptyHostController.restartPtyHost();\n\t}\n\n\tprotected _deserializeTerminalState(serializedState: string | undefined): ISerializedTerminalState[] | undefined {\n\t\tif (serializedState === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsedUnknown = JSON.parse(serializedState);\n\t\tif (!('version' in parsedUnknown) || !('state' in parsedUnknown) || !Array.isArray(parsedUnknown.state)) {\n\t\t\tthis._logService.warn('Could not revive serialized processes, wrong format', parsedUnknown);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsedCrossVersion = parsedUnknown as ICrossVersionSerializedTerminalState;\n\t\tif (parsedCrossVersion.version !== 1) {\n\t\t\tthis._logService.warn(`Could not revive serialized processes, wrong version \"${parsedCrossVersion.version}\"`, parsedCrossVersion);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn parsedCrossVersion.state as ISerializedTerminalState[];\n\t}\n\n\tprotected _getWorkspaceId(): string {\n\t\treturn this._workspaceContextService.getWorkspace().id;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
