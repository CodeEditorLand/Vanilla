{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/baseTerminalBackend.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type {\n\tICrossVersionSerializedTerminalState,\n\tIPtyHostController,\n\tISerializedTerminalState,\n\tITerminalLogService,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport type { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport type { IHistoryService } from \"../../../services/history/common/history.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\ttype IStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\n\n// HACK: This file should not depend on terminalContrib\n// eslint-disable-next-line local/code-import-patterns\nimport { TerminalDeveloperCommandId } from \"../../terminalContrib/developer/common/terminal.developer.js\";\n\nexport abstract class BaseTerminalBackend extends Disposable {\n\tprivate _isPtyHostUnresponsive = false;\n\n\tget isResponsive(): boolean {\n\t\treturn !this._isPtyHostUnresponsive;\n\t}\n\n\tprotected readonly _onPtyHostConnected = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onPtyHostConnected = this._onPtyHostConnected.event;\n\tprotected readonly _onPtyHostRestart = this._register(new Emitter<void>());\n\treadonly onPtyHostRestart = this._onPtyHostRestart.event;\n\tprotected readonly _onPtyHostUnresponsive = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprotected readonly _onPtyHostResponsive = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\n\tconstructor(\n\t\tprivate readonly _ptyHostController: IPtyHostController,\n\t\tprotected readonly _logService: ITerminalLogService,\n\t\thistoryService: IHistoryService,\n\t\tconfigurationResolverService: IConfigurationResolverService,\n\t\tstatusBarService: IStatusbarService,\n\t\tprotected readonly _workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\n\t\tlet unresponsiveStatusBarEntry: IStatusbarEntry;\n\t\tlet statusBarAccessor: IStatusbarEntryAccessor;\n\t\tlet hasStarted = false;\n\n\t\t// Attach pty host listeners\n\t\tthis._register(\n\t\t\tthis._ptyHostController.onPtyHostExit(() => {\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t`The terminal's pty host process exited, the connection to all terminal processes was lost`,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tthis._register(this.onPtyHostConnected(() => (hasStarted = true)));\n\t\tthis._register(\n\t\t\tthis._ptyHostController.onPtyHostStart(() => {\n\t\t\t\tthis._logService.debug(\n\t\t\t\t\t`The terminal's pty host process is starting`,\n\t\t\t\t);\n\t\t\t\t// Only fire the _restart_ event after it has started\n\t\t\t\tif (hasStarted) {\n\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t\"IPtyHostController#onPtyHostRestart\",\n\t\t\t\t\t);\n\t\t\t\t\tthis._onPtyHostRestart.fire();\n\t\t\t\t}\n\t\t\t\tstatusBarAccessor?.dispose();\n\t\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._ptyHostController.onPtyHostUnresponsive(() => {\n\t\t\t\tstatusBarAccessor?.dispose();\n\t\t\t\tif (!unresponsiveStatusBarEntry) {\n\t\t\t\t\tunresponsiveStatusBarEntry = {\n\t\t\t\t\t\tname: localize(\"ptyHostStatus\", \"Pty Host Status\"),\n\t\t\t\t\t\ttext: `$(debug-disconnect) ${localize(\"ptyHostStatus.short\", \"Pty Host\")}`,\n\t\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\t\"nonResponsivePtyHost\",\n\t\t\t\t\t\t\t\"The connection to the terminal's pty host process is unresponsive, terminals may stop working. Click to manually restart the pty host.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tariaLabel: localize(\n\t\t\t\t\t\t\t\"ptyHostStatus.ariaLabel\",\n\t\t\t\t\t\t\t\"Pty Host is unresponsive\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcommand: TerminalDeveloperCommandId.RestartPtyHost,\n\t\t\t\t\t\tkind: \"warning\",\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tstatusBarAccessor = statusBarService.addEntry(\n\t\t\t\t\tunresponsiveStatusBarEntry,\n\t\t\t\t\t\"ptyHostStatus\",\n\t\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t);\n\t\t\t\tthis._isPtyHostUnresponsive = true;\n\t\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._ptyHostController.onPtyHostResponsive(() => {\n\t\t\t\tif (!this._isPtyHostUnresponsive) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._logService.info(\"The pty host became responsive again\");\n\t\t\t\tstatusBarAccessor?.dispose();\n\t\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\t\tthis._onPtyHostResponsive.fire();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._ptyHostController.onPtyHostRequestResolveVariables(\n\t\t\t\tasync (e) => {\n\t\t\t\t\t// Only answer requests for this workspace\n\t\t\t\t\tif (\n\t\t\t\t\t\te.workspaceId !==\n\t\t\t\t\t\tthis._workspaceContextService.getWorkspace().id\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst activeWorkspaceRootUri =\n\t\t\t\t\t\thistoryService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\t\t\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri\n\t\t\t\t\t\t? (this._workspaceContextService.getWorkspaceFolder(\n\t\t\t\t\t\t\t\tactiveWorkspaceRootUri,\n\t\t\t\t\t\t\t) ?? undefined)\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\tconst resolveCalls: Promise<string>[] = e.originalText.map(\n\t\t\t\t\t\t(t) => {\n\t\t\t\t\t\t\treturn configurationResolverService.resolveAsync(\n\t\t\t\t\t\t\t\tlastActiveWorkspaceRoot,\n\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tconst result = await Promise.all(resolveCalls);\n\t\t\t\t\tthis._ptyHostController.acceptPtyHostResolvedVariables(\n\t\t\t\t\t\te.requestId,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\trestartPtyHost(): void {\n\t\tthis._ptyHostController.restartPtyHost();\n\t}\n\n\tprotected _deserializeTerminalState(\n\t\tserializedState: string | undefined,\n\t): ISerializedTerminalState[] | undefined {\n\t\tif (serializedState === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsedUnknown = JSON.parse(serializedState);\n\t\tif (\n\t\t\t!(\"version\" in parsedUnknown) ||\n\t\t\t!(\"state\" in parsedUnknown) ||\n\t\t\t!Array.isArray(parsedUnknown.state)\n\t\t) {\n\t\t\tthis._logService.warn(\n\t\t\t\t\"Could not revive serialized processes, wrong format\",\n\t\t\t\tparsedUnknown,\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsedCrossVersion =\n\t\t\tparsedUnknown as ICrossVersionSerializedTerminalState;\n\t\tif (parsedCrossVersion.version !== 1) {\n\t\t\tthis._logService.warn(\n\t\t\t\t`Could not revive serialized processes, wrong version \"${parsedCrossVersion.version}\"`,\n\t\t\t\tparsedCrossVersion,\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn parsedCrossVersion.state as ISerializedTerminalState[];\n\t}\n\n\tprotected _getWorkspaceId(): string {\n\t\treturn this._workspaceContextService.getWorkspace().id;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
