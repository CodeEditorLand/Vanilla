{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProfileResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { debounce } from \"../../../../base/common/decorators.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { deepClone } from \"../../../../base/common/objects.js\";\nimport * as path from \"../../../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\tOperatingSystem,\n} from \"../../../../base/common/platform.js\";\nimport { env } from \"../../../../base/common/process.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IShellLaunchConfig,\n\tITerminalLogService,\n\ttype ITerminalProfile,\n\ttype TerminalIcon,\n\tTerminalSettingId,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { isUriComponents } from \"../../../../platform/terminal/common/terminalProfiles.js\";\nimport {\n\ttype IIconRegistry,\n\tgetIconRegistry,\n} from \"../../../../platform/theme/common/iconRegistry.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport {\n\ttype IShellLaunchConfigResolveOptions,\n\ttype ITerminalProfileResolverService,\n\tITerminalProfileService,\n} from \"../common/terminal.js\";\nimport { ITerminalInstanceService } from \"./terminal.js\";\n\nexport interface IProfileContextProvider {\n\tgetDefaultSystemShell(\n\t\tremoteAuthority: string | undefined,\n\t\tos: OperatingSystem,\n\t): Promise<string>;\n\tgetEnvironment(\n\t\tremoteAuthority: string | undefined,\n\t): Promise<IProcessEnvironment>;\n}\n\nconst generatedProfileName = \"Generated\";\n\n/*\n * Resolves terminal shell launch config and terminal profiles for the given operating system,\n * environment, and user configuration.\n */\nexport abstract class BaseTerminalProfileResolverService\n\textends Disposable\n\timplements ITerminalProfileResolverService\n{\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _primaryBackendOs: OperatingSystem | undefined;\n\n\tprivate readonly _iconRegistry: IIconRegistry = getIconRegistry();\n\n\tprivate _defaultProfileName: string | undefined;\n\tget defaultProfileName(): string | undefined {\n\t\treturn this._defaultProfileName;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _context: IProfileContextProvider,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _configurationResolverService: IConfigurationResolverService,\n\t\tprivate readonly _historyService: IHistoryService,\n\t\tprivate readonly _logService: ITerminalLogService,\n\t\tprivate readonly _terminalProfileService: ITerminalProfileService,\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService,\n\t) {\n\t\tsuper();\n\n\t\tif (this._remoteAgentService.getConnection()) {\n\t\t\tthis._remoteAgentService\n\t\t\t\t.getEnvironment()\n\t\t\t\t.then((env) => (this._primaryBackendOs = env?.os || OS));\n\t\t} else {\n\t\t\tthis._primaryBackendOs = OS;\n\t\t}\n\t\tthis._register(\n\t\t\tthis._configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingId.DefaultProfileWindows,\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingId.DefaultProfileMacOs,\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingId.DefaultProfileLinux,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._refreshDefaultProfileName();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._terminalProfileService.onDidChangeAvailableProfiles(() =>\n\t\t\t\tthis._refreshDefaultProfileName(),\n\t\t\t),\n\t\t);\n\t}\n\n\t@debounce(200)\n\tprivate async _refreshDefaultProfileName() {\n\t\tif (this._primaryBackendOs) {\n\t\t\tthis._defaultProfileName = (\n\t\t\t\tawait this.getDefaultProfile({\n\t\t\t\t\tremoteAuthority:\n\t\t\t\t\t\tthis._remoteAgentService.getConnection()\n\t\t\t\t\t\t\t?.remoteAuthority,\n\t\t\t\t\tos: this._primaryBackendOs,\n\t\t\t\t})\n\t\t\t)?.profileName;\n\t\t}\n\t}\n\n\tresolveIcon(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tos: OperatingSystem,\n\t): void {\n\t\tif (shellLaunchConfig.icon) {\n\t\t\tshellLaunchConfig.icon =\n\t\t\t\tthis._getCustomIcon(shellLaunchConfig.icon) ||\n\t\t\t\tthis.getDefaultIcon();\n\t\t\treturn;\n\t\t}\n\t\tif (shellLaunchConfig.customPtyImplementation) {\n\t\t\tshellLaunchConfig.icon = this.getDefaultIcon();\n\t\t\treturn;\n\t\t}\n\t\tif (shellLaunchConfig.executable) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultProfile = this._getUnresolvedRealDefaultProfile(os);\n\t\tif (defaultProfile) {\n\t\t\tshellLaunchConfig.icon = defaultProfile.icon;\n\t\t}\n\t\tif (!shellLaunchConfig.icon) {\n\t\t\tshellLaunchConfig.icon = this.getDefaultIcon();\n\t\t}\n\t}\n\n\tgetDefaultIcon(resource?: URI): TerminalIcon & ThemeIcon {\n\t\treturn (\n\t\t\tthis._iconRegistry.getIcon(\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tTerminalSettingId.TabsDefaultIcon,\n\t\t\t\t\t{ resource },\n\t\t\t\t),\n\t\t\t) || Codicon.terminal\n\t\t);\n\t}\n\n\tasync resolveShellLaunchConfig(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): Promise<void> {\n\t\t// Resolve the shell and shell args\n\t\tlet resolvedProfile: ITerminalProfile;\n\t\tif (shellLaunchConfig.executable) {\n\t\t\tresolvedProfile = await this._resolveProfile(\n\t\t\t\t{\n\t\t\t\t\tpath: shellLaunchConfig.executable,\n\t\t\t\t\targs: shellLaunchConfig.args,\n\t\t\t\t\tprofileName: generatedProfileName,\n\t\t\t\t\tisDefault: false,\n\t\t\t\t},\n\t\t\t\toptions,\n\t\t\t);\n\t\t} else {\n\t\t\tresolvedProfile = await this.getDefaultProfile(options);\n\t\t}\n\t\tshellLaunchConfig.executable = resolvedProfile.path;\n\t\tshellLaunchConfig.args = resolvedProfile.args;\n\t\tif (resolvedProfile.env) {\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tshellLaunchConfig.env = {\n\t\t\t\t\t...shellLaunchConfig.env,\n\t\t\t\t\t...resolvedProfile.env,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.env = resolvedProfile.env;\n\t\t\t}\n\t\t}\n\n\t\t// Verify the icon is valid, and fallback correctly to the generic terminal id if there is\n\t\t// an issue\n\t\tconst resource =\n\t\t\tshellLaunchConfig === undefined ||\n\t\t\ttypeof shellLaunchConfig.cwd === \"string\"\n\t\t\t\t? undefined\n\t\t\t\t: shellLaunchConfig.cwd;\n\t\tshellLaunchConfig.icon =\n\t\t\tthis._getCustomIcon(shellLaunchConfig.icon) ||\n\t\t\tthis._getCustomIcon(resolvedProfile.icon) ||\n\t\t\tthis.getDefaultIcon(resource);\n\n\t\t// Override the name if specified\n\t\tif (resolvedProfile.overrideName) {\n\t\t\tshellLaunchConfig.name = resolvedProfile.profileName;\n\t\t}\n\n\t\t// Apply the color\n\t\tshellLaunchConfig.color =\n\t\t\tshellLaunchConfig.color ||\n\t\t\tresolvedProfile.color ||\n\t\t\tthis._configurationService.getValue(\n\t\t\t\tTerminalSettingId.TabsDefaultColor,\n\t\t\t\t{ resource },\n\t\t\t);\n\n\t\t// Resolve useShellEnvironment based on the setting if it's not set\n\t\tif (shellLaunchConfig.useShellEnvironment === undefined) {\n\t\t\tshellLaunchConfig.useShellEnvironment =\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tTerminalSettingId.InheritEnv,\n\t\t\t\t);\n\t\t}\n\t}\n\n\tasync getDefaultShell(\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): Promise<string> {\n\t\treturn (await this.getDefaultProfile(options)).path;\n\t}\n\n\tasync getDefaultShellArgs(\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): Promise<string | string[]> {\n\t\treturn (await this.getDefaultProfile(options)).args || [];\n\t}\n\n\tasync getDefaultProfile(\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): Promise<ITerminalProfile> {\n\t\treturn this._resolveProfile(\n\t\t\tawait this._getUnresolvedDefaultProfile(options),\n\t\t\toptions,\n\t\t);\n\t}\n\n\tgetEnvironment(\n\t\tremoteAuthority: string | undefined,\n\t): Promise<IProcessEnvironment> {\n\t\treturn this._context.getEnvironment(remoteAuthority);\n\t}\n\n\tprivate _getCustomIcon(icon?: unknown): TerminalIcon | undefined {\n\t\tif (!icon) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (typeof icon === \"string\") {\n\t\t\treturn ThemeIcon.fromId(icon);\n\t\t}\n\t\tif (ThemeIcon.isThemeIcon(icon)) {\n\t\t\treturn icon;\n\t\t}\n\t\tif (URI.isUri(icon) || isUriComponents(icon)) {\n\t\t\treturn URI.revive(icon);\n\t\t}\n\t\tif (typeof icon === \"object\" && \"light\" in icon && \"dark\" in icon) {\n\t\t\tconst castedIcon = icon as { light: unknown; dark: unknown };\n\t\t\tif (\n\t\t\t\t(URI.isUri(castedIcon.light) ||\n\t\t\t\t\tisUriComponents(castedIcon.light)) &&\n\t\t\t\t(URI.isUri(castedIcon.dark) || isUriComponents(castedIcon.dark))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tlight: URI.revive(castedIcon.light),\n\t\t\t\t\tdark: URI.revive(castedIcon.dark),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _getUnresolvedDefaultProfile(\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): Promise<ITerminalProfile> {\n\t\t// If automation shell is allowed, prefer that\n\t\tif (options.allowAutomationShell) {\n\t\t\tconst automationShellProfile =\n\t\t\t\tthis._getUnresolvedAutomationShellProfile(options);\n\t\t\tif (automationShellProfile) {\n\t\t\t\treturn automationShellProfile;\n\t\t\t}\n\t\t}\n\n\t\t// Return the real default profile if it exists and is valid, wait for profiles to be ready\n\t\t// if the window just opened\n\t\tawait this._terminalProfileService.profilesReady;\n\t\tconst defaultProfile = this._getUnresolvedRealDefaultProfile(\n\t\t\toptions.os,\n\t\t);\n\t\tif (defaultProfile) {\n\t\t\treturn this._setIconForAutomation(options, defaultProfile);\n\t\t}\n\n\t\t// If there is no real default profile, create a fallback default profile based on the shell\n\t\t// and shellArgs settings in addition to the current environment.\n\t\treturn this._setIconForAutomation(\n\t\t\toptions,\n\t\t\tawait this._getUnresolvedFallbackDefaultProfile(options),\n\t\t);\n\t}\n\n\tprivate _setIconForAutomation(\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t\tprofile: ITerminalProfile,\n\t): ITerminalProfile {\n\t\tif (options.allowAutomationShell) {\n\t\t\tconst profileClone = deepClone(profile);\n\t\t\tprofileClone.icon = Codicon.tools;\n\t\t\treturn profileClone;\n\t\t}\n\t\treturn profile;\n\t}\n\n\tprivate _getUnresolvedRealDefaultProfile(\n\t\tos: OperatingSystem,\n\t): ITerminalProfile | undefined {\n\t\treturn this._terminalProfileService.getDefaultProfile(os);\n\t}\n\n\tprivate async _getUnresolvedFallbackDefaultProfile(\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): Promise<ITerminalProfile> {\n\t\tconst executable = await this._context.getDefaultSystemShell(\n\t\t\toptions.remoteAuthority,\n\t\t\toptions.os,\n\t\t);\n\n\t\t// Try select an existing profile to fallback to, based on the default system shell, only do\n\t\t// this when it is NOT a local terminal in a remote window where the front and back end OS\n\t\t// differs (eg. Windows -> WSL, Mac -> Linux)\n\t\tif (options.os === OS) {\n\t\t\tlet existingProfile =\n\t\t\t\tthis._terminalProfileService.availableProfiles.find(\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\tpath.parse(e.path).name === path.parse(executable).name,\n\t\t\t\t);\n\t\t\tif (existingProfile) {\n\t\t\t\tif (options.allowAutomationShell) {\n\t\t\t\t\texistingProfile = deepClone(existingProfile);\n\t\t\t\t\texistingProfile.icon = Codicon.tools;\n\t\t\t\t}\n\t\t\t\treturn existingProfile;\n\t\t\t}\n\t\t}\n\n\t\t// Finally fallback to a generated profile\n\t\tlet args: string | string[] | undefined;\n\t\tif (\n\t\t\toptions.os === OperatingSystem.Macintosh &&\n\t\t\tpath.parse(executable).name.match(/(zsh|bash)/)\n\t\t) {\n\t\t\t// macOS should launch a login shell by default\n\t\t\targs = [\"--login\"];\n\t\t} else {\n\t\t\t// Resolve undefined to []\n\t\t\targs = [];\n\t\t}\n\n\t\tconst icon = this._guessProfileIcon(executable);\n\n\t\treturn {\n\t\t\tprofileName: generatedProfileName,\n\t\t\tpath: executable,\n\t\t\targs,\n\t\t\ticon,\n\t\t\tisDefault: false,\n\t\t};\n\t}\n\n\tprivate _getUnresolvedAutomationShellProfile(\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): ITerminalProfile | undefined {\n\t\tconst automationProfile = this._configurationService.getValue(\n\t\t\t`terminal.integrated.automationProfile.${this._getOsKey(options.os)}`,\n\t\t);\n\t\tif (this._isValidAutomationProfile(automationProfile, options.os)) {\n\t\t\tautomationProfile.icon =\n\t\t\t\tthis._getCustomIcon(automationProfile.icon) || Codicon.tools;\n\t\t\treturn automationProfile;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async _resolveProfile(\n\t\tprofile: ITerminalProfile,\n\t\toptions: IShellLaunchConfigResolveOptions,\n\t): Promise<ITerminalProfile> {\n\t\tconst env = await this._context.getEnvironment(options.remoteAuthority);\n\n\t\tif (options.os === OperatingSystem.Windows) {\n\t\t\t// Change Sysnative to System32 if the OS is Windows but NOT WoW64. It's\n\t\t\t// safe to assume that this was used by accident as Sysnative does not\n\t\t\t// exist and will break the terminal in non-WoW64 environments.\n\t\t\tconst isWoW64 = !!env.hasOwnProperty(\"PROCESSOR_ARCHITEW6432\");\n\t\t\tconst windir = env.windir;\n\t\t\tif (!isWoW64 && windir) {\n\t\t\t\tconst sysnativePath = path\n\t\t\t\t\t.join(windir, \"Sysnative\")\n\t\t\t\t\t.replace(/\\//g, \"\\\\\")\n\t\t\t\t\t.toLowerCase();\n\t\t\t\tif (\n\t\t\t\t\tprofile.path &&\n\t\t\t\t\tprofile.path.toLowerCase().indexOf(sysnativePath) === 0\n\t\t\t\t) {\n\t\t\t\t\tprofile.path = path.join(\n\t\t\t\t\t\twindir,\n\t\t\t\t\t\t\"System32\",\n\t\t\t\t\t\tprofile.path.substr(sysnativePath.length + 1),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert / to \\ on Windows for convenience\n\t\t\tif (profile.path) {\n\t\t\t\tprofile.path = profile.path.replace(/\\//g, \"\\\\\");\n\t\t\t}\n\t\t}\n\n\t\t// Resolve path variables\n\t\tconst activeWorkspaceRootUri =\n\t\t\tthis._historyService.getLastActiveWorkspaceRoot(\n\t\t\t\toptions.remoteAuthority ? Schemas.vscodeRemote : Schemas.file,\n\t\t\t);\n\t\tconst lastActiveWorkspace = activeWorkspaceRootUri\n\t\t\t? (this._workspaceContextService.getWorkspaceFolder(\n\t\t\t\t\tactiveWorkspaceRootUri,\n\t\t\t\t) ?? undefined)\n\t\t\t: undefined;\n\t\tprofile.path = await this._resolveVariables(\n\t\t\tprofile.path,\n\t\t\tenv,\n\t\t\tlastActiveWorkspace,\n\t\t);\n\n\t\t// Resolve args variables\n\t\tif (profile.args) {\n\t\t\tif (typeof profile.args === \"string\") {\n\t\t\t\tprofile.args = await this._resolveVariables(\n\t\t\t\t\tprofile.args,\n\t\t\t\t\tenv,\n\t\t\t\t\tlastActiveWorkspace,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tprofile.args = await Promise.all(\n\t\t\t\t\tprofile.args.map((arg) =>\n\t\t\t\t\t\tthis._resolveVariables(arg, env, lastActiveWorkspace),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn profile;\n\t}\n\n\tprivate async _resolveVariables(\n\t\tvalue: string,\n\t\tenv: IProcessEnvironment,\n\t\tlastActiveWorkspace: IWorkspaceFolder | undefined,\n\t) {\n\t\ttry {\n\t\t\tvalue =\n\t\t\t\tawait this._configurationResolverService.resolveWithEnvironment(\n\t\t\t\t\tenv,\n\t\t\t\t\tlastActiveWorkspace,\n\t\t\t\t\tvalue,\n\t\t\t\t);\n\t\t} catch (e) {\n\t\t\tthis._logService.error(`Could not resolve shell`, e);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _getOsKey(os: OperatingSystem): string {\n\t\tswitch (os) {\n\t\t\tcase OperatingSystem.Linux:\n\t\t\t\treturn \"linux\";\n\t\t\tcase OperatingSystem.Macintosh:\n\t\t\t\treturn \"osx\";\n\t\t\tcase OperatingSystem.Windows:\n\t\t\t\treturn \"windows\";\n\t\t}\n\t}\n\n\tprivate _guessProfileIcon(shell: string): ThemeIcon | undefined {\n\t\tconst file = path.parse(shell).name;\n\t\tswitch (file) {\n\t\t\tcase \"bash\":\n\t\t\t\treturn Codicon.terminalBash;\n\t\t\tcase \"pwsh\":\n\t\t\tcase \"powershell\":\n\t\t\t\treturn Codicon.terminalPowershell;\n\t\t\tcase \"tmux\":\n\t\t\t\treturn Codicon.terminalTmux;\n\t\t\tcase \"cmd\":\n\t\t\t\treturn Codicon.terminalCmd;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _isValidAutomationProfile(\n\t\tprofile: unknown,\n\t\tos: OperatingSystem,\n\t): profile is ITerminalProfile {\n\t\tif (\n\t\t\tprofile === null ||\n\t\t\tprofile === undefined ||\n\t\t\ttypeof profile !== \"object\"\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\t\"path\" in profile &&\n\t\t\ttypeof (profile as { path: unknown }).path === \"string\"\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class BrowserTerminalProfileResolverService extends BaseTerminalProfileResolverService {\n\tconstructor(\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHistoryService historyService: IHistoryService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService,\n\t\t@ITerminalProfileService terminalProfileService: ITerminalProfileService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tgetDefaultSystemShell: async (remoteAuthority, os) => {\n\t\t\t\t\tconst backend =\n\t\t\t\t\t\tawait terminalInstanceService.getBackend(\n\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (!remoteAuthority || !backend) {\n\t\t\t\t\t\t// Just return basic values, this is only for serverless web and wouldn't be used\n\t\t\t\t\t\treturn os === OperatingSystem.Windows ? \"pwsh\" : \"bash\";\n\t\t\t\t\t}\n\t\t\t\t\treturn backend.getDefaultSystemShell(os);\n\t\t\t\t},\n\t\t\t\tgetEnvironment: async (remoteAuthority) => {\n\t\t\t\t\tconst backend =\n\t\t\t\t\t\tawait terminalInstanceService.getBackend(\n\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (!remoteAuthority || !backend) {\n\t\t\t\t\t\treturn env;\n\t\t\t\t\t}\n\t\t\t\t\treturn backend.getEnvironment();\n\t\t\t\t},\n\t\t\t},\n\t\t\tconfigurationService,\n\t\t\tconfigurationResolverService,\n\t\t\thistoryService,\n\t\t\tlogService,\n\t\t\tterminalProfileService,\n\t\t\tworkspaceContextService,\n\t\t\tremoteAgentService,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["env"]
}
