{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProfileResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../base/common/network.js';\nimport { env } from '../../../../base/common/process.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IWorkspaceContextService, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { IProcessEnvironment, OperatingSystem, OS } from '../../../../base/common/platform.js';\nimport { IShellLaunchConfig, ITerminalLogService, ITerminalProfile, TerminalIcon, TerminalSettingId } from '../../../../platform/terminal/common/terminal.js';\nimport { IShellLaunchConfigResolveOptions, ITerminalProfileResolverService, ITerminalProfileService } from '../common/terminal.js';\nimport * as path from '../../../../base/common/path.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { getIconRegistry, IIconRegistry } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { debounce } from '../../../../base/common/decorators.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { isUriComponents } from '../../../../platform/terminal/common/terminalProfiles.js';\nimport { ITerminalInstanceService } from './terminal.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\n\nexport interface IProfileContextProvider {\n\tgetDefaultSystemShell(remoteAuthority: string | undefined, os: OperatingSystem): Promise<string>;\n\tgetEnvironment(remoteAuthority: string | undefined): Promise<IProcessEnvironment>;\n}\n\nconst generatedProfileName = 'Generated';\n\n/*\n * Resolves terminal shell launch config and terminal profiles for the given operating system,\n * environment, and user configuration.\n */\nexport abstract class BaseTerminalProfileResolverService extends Disposable implements ITerminalProfileResolverService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _primaryBackendOs: OperatingSystem | undefined;\n\n\tprivate readonly _iconRegistry: IIconRegistry = getIconRegistry();\n\n\tprivate _defaultProfileName: string | undefined;\n\tget defaultProfileName(): string | undefined { return this._defaultProfileName; }\n\n\tconstructor(\n\t\tprivate readonly _context: IProfileContextProvider,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _configurationResolverService: IConfigurationResolverService,\n\t\tprivate readonly _historyService: IHistoryService,\n\t\tprivate readonly _logService: ITerminalLogService,\n\t\tprivate readonly _terminalProfileService: ITerminalProfileService,\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\n\t\tif (this._remoteAgentService.getConnection()) {\n\t\t\tthis._remoteAgentService.getEnvironment().then(env => this._primaryBackendOs = env?.os || OS);\n\t\t} else {\n\t\t\tthis._primaryBackendOs = OS;\n\t\t}\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.DefaultProfileWindows) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.DefaultProfileMacOs) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.DefaultProfileLinux)) {\n\t\t\t\tthis._refreshDefaultProfileName();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._terminalProfileService.onDidChangeAvailableProfiles(() => this._refreshDefaultProfileName()));\n\t}\n\n\t@debounce(200)\n\tprivate async _refreshDefaultProfileName() {\n\t\tif (this._primaryBackendOs) {\n\t\t\tthis._defaultProfileName = (await this.getDefaultProfile({\n\t\t\t\tremoteAuthority: this._remoteAgentService.getConnection()?.remoteAuthority,\n\t\t\t\tos: this._primaryBackendOs\n\t\t\t}))?.profileName;\n\t\t}\n\t}\n\n\tresolveIcon(shellLaunchConfig: IShellLaunchConfig, os: OperatingSystem): void {\n\t\tif (shellLaunchConfig.icon) {\n\t\t\tshellLaunchConfig.icon = this._getCustomIcon(shellLaunchConfig.icon) || this.getDefaultIcon();\n\t\t\treturn;\n\t\t}\n\t\tif (shellLaunchConfig.customPtyImplementation) {\n\t\t\tshellLaunchConfig.icon = this.getDefaultIcon();\n\t\t\treturn;\n\t\t}\n\t\tif (shellLaunchConfig.executable) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultProfile = this._getUnresolvedRealDefaultProfile(os);\n\t\tif (defaultProfile) {\n\t\t\tshellLaunchConfig.icon = defaultProfile.icon;\n\t\t}\n\t\tif (!shellLaunchConfig.icon) {\n\t\t\tshellLaunchConfig.icon = this.getDefaultIcon();\n\t\t}\n\t}\n\n\tgetDefaultIcon(resource?: URI): TerminalIcon & ThemeIcon {\n\t\treturn this._iconRegistry.getIcon(this._configurationService.getValue(TerminalSettingId.TabsDefaultIcon, { resource })) || Codicon.terminal;\n\t}\n\n\tasync resolveShellLaunchConfig(shellLaunchConfig: IShellLaunchConfig, options: IShellLaunchConfigResolveOptions): Promise<void> {\n\t\t// Resolve the shell and shell args\n\t\tlet resolvedProfile: ITerminalProfile;\n\t\tif (shellLaunchConfig.executable) {\n\t\t\tresolvedProfile = await this._resolveProfile({\n\t\t\t\tpath: shellLaunchConfig.executable,\n\t\t\t\targs: shellLaunchConfig.args,\n\t\t\t\tprofileName: generatedProfileName,\n\t\t\t\tisDefault: false\n\t\t\t}, options);\n\t\t} else {\n\t\t\tresolvedProfile = await this.getDefaultProfile(options);\n\t\t}\n\t\tshellLaunchConfig.executable = resolvedProfile.path;\n\t\tshellLaunchConfig.args = resolvedProfile.args;\n\t\tif (resolvedProfile.env) {\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tshellLaunchConfig.env = { ...shellLaunchConfig.env, ...resolvedProfile.env };\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.env = resolvedProfile.env;\n\t\t\t}\n\t\t}\n\n\t\t// Verify the icon is valid, and fallback correctly to the generic terminal id if there is\n\t\t// an issue\n\t\tconst resource = shellLaunchConfig === undefined || typeof shellLaunchConfig.cwd === 'string' ? undefined : shellLaunchConfig.cwd;\n\t\tshellLaunchConfig.icon = this._getCustomIcon(shellLaunchConfig.icon)\n\t\t\t|| this._getCustomIcon(resolvedProfile.icon)\n\t\t\t|| this.getDefaultIcon(resource);\n\n\t\t// Override the name if specified\n\t\tif (resolvedProfile.overrideName) {\n\t\t\tshellLaunchConfig.name = resolvedProfile.profileName;\n\t\t}\n\n\t\t// Apply the color\n\t\tshellLaunchConfig.color = shellLaunchConfig.color\n\t\t\t|| resolvedProfile.color\n\t\t\t|| this._configurationService.getValue(TerminalSettingId.TabsDefaultColor, { resource });\n\n\t\t// Resolve useShellEnvironment based on the setting if it's not set\n\t\tif (shellLaunchConfig.useShellEnvironment === undefined) {\n\t\t\tshellLaunchConfig.useShellEnvironment = this._configurationService.getValue(TerminalSettingId.InheritEnv);\n\t\t}\n\t}\n\n\tasync getDefaultShell(options: IShellLaunchConfigResolveOptions): Promise<string> {\n\t\treturn (await this.getDefaultProfile(options)).path;\n\t}\n\n\tasync getDefaultShellArgs(options: IShellLaunchConfigResolveOptions): Promise<string | string[]> {\n\t\treturn (await this.getDefaultProfile(options)).args || [];\n\t}\n\n\tasync getDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\treturn this._resolveProfile(await this._getUnresolvedDefaultProfile(options), options);\n\t}\n\n\tgetEnvironment(remoteAuthority: string | undefined): Promise<IProcessEnvironment> {\n\t\treturn this._context.getEnvironment(remoteAuthority);\n\t}\n\n\tprivate _getCustomIcon(icon?: unknown): TerminalIcon | undefined {\n\t\tif (!icon) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (typeof icon === 'string') {\n\t\t\treturn ThemeIcon.fromId(icon);\n\t\t}\n\t\tif (ThemeIcon.isThemeIcon(icon)) {\n\t\t\treturn icon;\n\t\t}\n\t\tif (URI.isUri(icon) || isUriComponents(icon)) {\n\t\t\treturn URI.revive(icon);\n\t\t}\n\t\tif (typeof icon === 'object' && 'light' in icon && 'dark' in icon) {\n\t\t\tconst castedIcon = (icon as { light: unknown; dark: unknown });\n\t\t\tif ((URI.isUri(castedIcon.light) || isUriComponents(castedIcon.light)) && (URI.isUri(castedIcon.dark) || isUriComponents(castedIcon.dark))) {\n\t\t\t\treturn { light: URI.revive(castedIcon.light), dark: URI.revive(castedIcon.dark) };\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _getUnresolvedDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\t// If automation shell is allowed, prefer that\n\t\tif (options.allowAutomationShell) {\n\t\t\tconst automationShellProfile = this._getUnresolvedAutomationShellProfile(options);\n\t\t\tif (automationShellProfile) {\n\t\t\t\treturn automationShellProfile;\n\t\t\t}\n\t\t}\n\n\t\t// Return the real default profile if it exists and is valid, wait for profiles to be ready\n\t\t// if the window just opened\n\t\tawait this._terminalProfileService.profilesReady;\n\t\tconst defaultProfile = this._getUnresolvedRealDefaultProfile(options.os);\n\t\tif (defaultProfile) {\n\t\t\treturn this._setIconForAutomation(options, defaultProfile);\n\t\t}\n\n\t\t// If there is no real default profile, create a fallback default profile based on the shell\n\t\t// and shellArgs settings in addition to the current environment.\n\t\treturn this._setIconForAutomation(options, await this._getUnresolvedFallbackDefaultProfile(options));\n\t}\n\n\tprivate _setIconForAutomation(options: IShellLaunchConfigResolveOptions, profile: ITerminalProfile): ITerminalProfile {\n\t\tif (options.allowAutomationShell) {\n\t\t\tconst profileClone = deepClone(profile);\n\t\t\tprofileClone.icon = Codicon.tools;\n\t\t\treturn profileClone;\n\t\t}\n\t\treturn profile;\n\t}\n\n\tprivate _getUnresolvedRealDefaultProfile(os: OperatingSystem): ITerminalProfile | undefined {\n\t\treturn this._terminalProfileService.getDefaultProfile(os);\n\t}\n\n\tprivate async _getUnresolvedFallbackDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\tconst executable = await this._context.getDefaultSystemShell(options.remoteAuthority, options.os);\n\n\t\t// Try select an existing profile to fallback to, based on the default system shell, only do\n\t\t// this when it is NOT a local terminal in a remote window where the front and back end OS\n\t\t// differs (eg. Windows -> WSL, Mac -> Linux)\n\t\tif (options.os === OS) {\n\t\t\tlet existingProfile = this._terminalProfileService.availableProfiles.find(e => path.parse(e.path).name === path.parse(executable).name);\n\t\t\tif (existingProfile) {\n\t\t\t\tif (options.allowAutomationShell) {\n\t\t\t\t\texistingProfile = deepClone(existingProfile);\n\t\t\t\t\texistingProfile.icon = Codicon.tools;\n\t\t\t\t}\n\t\t\t\treturn existingProfile;\n\t\t\t}\n\t\t}\n\n\t\t// Finally fallback to a generated profile\n\t\tlet args: string | string[] | undefined;\n\t\tif (options.os === OperatingSystem.Macintosh && path.parse(executable).name.match(/(zsh|bash)/)) {\n\t\t\t// macOS should launch a login shell by default\n\t\t\targs = ['--login'];\n\t\t} else {\n\t\t\t// Resolve undefined to []\n\t\t\targs = [];\n\t\t}\n\n\t\tconst icon = this._guessProfileIcon(executable);\n\n\t\treturn {\n\t\t\tprofileName: generatedProfileName,\n\t\t\tpath: executable,\n\t\t\targs,\n\t\t\ticon,\n\t\t\tisDefault: false\n\t\t};\n\t}\n\n\tprivate _getUnresolvedAutomationShellProfile(options: IShellLaunchConfigResolveOptions): ITerminalProfile | undefined {\n\t\tconst automationProfile = this._configurationService.getValue(`terminal.integrated.automationProfile.${this._getOsKey(options.os)}`);\n\t\tif (this._isValidAutomationProfile(automationProfile, options.os)) {\n\t\t\tautomationProfile.icon = this._getCustomIcon(automationProfile.icon) || Codicon.tools;\n\t\t\treturn automationProfile;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async _resolveProfile(profile: ITerminalProfile, options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\tconst env = await this._context.getEnvironment(options.remoteAuthority);\n\n\t\tif (options.os === OperatingSystem.Windows) {\n\t\t\t// Change Sysnative to System32 if the OS is Windows but NOT WoW64. It's\n\t\t\t// safe to assume that this was used by accident as Sysnative does not\n\t\t\t// exist and will break the terminal in non-WoW64 environments.\n\t\t\tconst isWoW64 = !!env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\t\tconst windir = env.windir;\n\t\t\tif (!isWoW64 && windir) {\n\t\t\t\tconst sysnativePath = path.join(windir, 'Sysnative').replace(/\\//g, '\\\\').toLowerCase();\n\t\t\t\tif (profile.path && profile.path.toLowerCase().indexOf(sysnativePath) === 0) {\n\t\t\t\t\tprofile.path = path.join(windir, 'System32', profile.path.substr(sysnativePath.length + 1));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert / to \\ on Windows for convenience\n\t\t\tif (profile.path) {\n\t\t\t\tprofile.path = profile.path.replace(/\\//g, '\\\\');\n\t\t\t}\n\t\t}\n\n\t\t// Resolve path variables\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(options.remoteAuthority ? Schemas.vscodeRemote : Schemas.file);\n\t\tconst lastActiveWorkspace = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\tprofile.path = await this._resolveVariables(profile.path, env, lastActiveWorkspace);\n\n\t\t// Resolve args variables\n\t\tif (profile.args) {\n\t\t\tif (typeof profile.args === 'string') {\n\t\t\t\tprofile.args = await this._resolveVariables(profile.args, env, lastActiveWorkspace);\n\t\t\t} else {\n\t\t\t\tprofile.args = await Promise.all(profile.args.map(arg => this._resolveVariables(arg, env, lastActiveWorkspace)));\n\t\t\t}\n\t\t}\n\n\t\treturn profile;\n\t}\n\n\tprivate async _resolveVariables(value: string, env: IProcessEnvironment, lastActiveWorkspace: IWorkspaceFolder | undefined) {\n\t\ttry {\n\t\t\tvalue = await this._configurationResolverService.resolveWithEnvironment(env, lastActiveWorkspace, value);\n\t\t} catch (e) {\n\t\t\tthis._logService.error(`Could not resolve shell`, e);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _getOsKey(os: OperatingSystem): string {\n\t\tswitch (os) {\n\t\t\tcase OperatingSystem.Linux: return 'linux';\n\t\t\tcase OperatingSystem.Macintosh: return 'osx';\n\t\t\tcase OperatingSystem.Windows: return 'windows';\n\t\t}\n\t}\n\n\tprivate _guessProfileIcon(shell: string): ThemeIcon | undefined {\n\t\tconst file = path.parse(shell).name;\n\t\tswitch (file) {\n\t\t\tcase 'bash':\n\t\t\t\treturn Codicon.terminalBash;\n\t\t\tcase 'pwsh':\n\t\t\tcase 'powershell':\n\t\t\t\treturn Codicon.terminalPowershell;\n\t\t\tcase 'tmux':\n\t\t\t\treturn Codicon.terminalTmux;\n\t\t\tcase 'cmd':\n\t\t\t\treturn Codicon.terminalCmd;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _isValidAutomationProfile(profile: unknown, os: OperatingSystem): profile is ITerminalProfile {\n\t\tif (profile === null || profile === undefined || typeof profile !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\tif ('path' in profile && typeof (profile as { path: unknown }).path === 'string') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class BrowserTerminalProfileResolverService extends BaseTerminalProfileResolverService {\n\n\tconstructor(\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHistoryService historyService: IHistoryService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService,\n\t\t@ITerminalProfileService terminalProfileService: ITerminalProfileService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tgetDefaultSystemShell: async (remoteAuthority, os) => {\n\t\t\t\t\tconst backend = await terminalInstanceService.getBackend(remoteAuthority);\n\t\t\t\t\tif (!remoteAuthority || !backend) {\n\t\t\t\t\t\t// Just return basic values, this is only for serverless web and wouldn't be used\n\t\t\t\t\t\treturn os === OperatingSystem.Windows ? 'pwsh' : 'bash';\n\t\t\t\t\t}\n\t\t\t\t\treturn backend.getDefaultSystemShell(os);\n\t\t\t\t},\n\t\t\t\tgetEnvironment: async (remoteAuthority) => {\n\t\t\t\t\tconst backend = await terminalInstanceService.getBackend(remoteAuthority);\n\t\t\t\t\tif (!remoteAuthority || !backend) {\n\t\t\t\t\t\treturn env;\n\t\t\t\t\t}\n\t\t\t\t\treturn backend.getEnvironment();\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfigurationService,\n\t\t\tconfigurationResolverService,\n\t\t\thistoryService,\n\t\t\tlogService,\n\t\t\tterminalProfileService,\n\t\t\tworkspaceContextService,\n\t\t\tremoteAgentService\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["env"]
}
