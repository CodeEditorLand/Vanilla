{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserFeatures } from '../../../../base/browser/canIUse.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { isLinux, isWindows } from '../../../../base/common/platform.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { isObject, isString } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { EndOfLinePreference } from '../../../../editor/common/model.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../../platform/accessibility/common/accessibility.js';\nimport { Action2, registerAction2, IAction2Options, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IListService } from '../../../../platform/list/browser/listService.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IPickOptions, IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ITerminalProfile, TerminalExitReason, TerminalIcon, TerminalLocation, TerminalSettingId } from '../../../../platform/terminal/common/terminal.js';\nimport { IWorkspaceContextService, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { PICK_WORKSPACE_FOLDER_COMMAND_ID } from '../../../browser/actions/workspaceCommands.js';\nimport { CLOSE_EDITOR_COMMAND_ID } from '../../../browser/parts/editor/editorCommands.js';\nimport { Direction, ICreateTerminalOptions, IDetachedTerminalInstance, ITerminalConfigurationService, ITerminalEditorService, ITerminalGroupService, ITerminalInstance, ITerminalInstanceService, ITerminalService, IXtermTerminal } from './terminal.js';\nimport { TerminalQuickAccessProvider } from './terminalQuickAccess.js';\nimport { IRemoteTerminalAttachTarget, ITerminalProfileResolverService, ITerminalProfileService, TERMINAL_VIEW_ID, TerminalCommandId } from '../common/terminal.js';\nimport { TerminalContextKeys } from '../common/terminalContextKey.js';\nimport { createProfileSchemaEnums } from '../../../../platform/terminal/common/terminalProfiles.js';\nimport { terminalStrings } from '../common/terminalStrings.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { SIDE_GROUP } from '../../../services/editor/common/editorService.js';\nimport { isAbsolute } from '../../../../base/common/path.js';\nimport { AbstractVariableResolverService } from '../../../services/configurationResolver/common/variableResolver.js';\nimport { ITerminalQuickPickItem } from './terminalProfileQuickpick.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { getIconId, getColorClass, getUriClasses } from './terminalIcon.js';\nimport { clearShellFileHistory, getCommandHistory } from '../common/history.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { getIconClasses } from '../../../../editor/common/services/getIconClasses.js';\nimport { FileKind } from '../../../../platform/files/common/files.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { TerminalCapability } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { killTerminalIcon, newTerminalIcon } from './terminalIcons.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { accessibleViewCurrentProviderId, accessibleViewIsShown, accessibleViewOnLastLine } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { isKeyboardEvent, isMouseEvent, isPointerEvent } from '../../../../base/browser/dom.js';\nimport { editorGroupToColumn } from '../../../services/editor/common/editorGroupColumn.js';\nimport { InstanceContext } from './terminalContextMenu.js';\nimport { AccessibleViewProviderId } from '../../../../platform/accessibility/browser/accessibleView.js';\n\nexport const switchTerminalActionViewItemSeparator = '\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500';\nexport const switchTerminalShowTabsTitle = localize('showTerminalTabs', \"Show Tabs\");\n\nconst category = terminalStrings.actionCategory;\n\n// Some terminal context keys get complicated. Since normalizing and/or context keys can be\n// expensive this is done once per context key and shared.\nconst sharedWhenClause = (() => {\n\tconst terminalAvailable = ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated);\n\treturn {\n\t\tterminalAvailable,\n\t\tterminalAvailable_and_opened: ContextKeyExpr.and(terminalAvailable, TerminalContextKeys.isOpen),\n\t\tterminalAvailable_and_editorActive: ContextKeyExpr.and(terminalAvailable, TerminalContextKeys.terminalEditorActive),\n\t\tterminalAvailable_and_singularSelection: ContextKeyExpr.and(terminalAvailable, TerminalContextKeys.tabsSingularSelection),\n\t\tfocusInAny_and_normalBuffer: ContextKeyExpr.and(TerminalContextKeys.focusInAny, TerminalContextKeys.altBufferActive.negate())\n\t};\n})();\n\nexport interface WorkspaceFolderCwdPair {\n\tfolder: IWorkspaceFolder;\n\tcwd: URI;\n\tisAbsolute: boolean;\n\tisOverridden: boolean;\n}\n\nexport async function getCwdForSplit(\n\tinstance: ITerminalInstance,\n\tfolders: IWorkspaceFolder[] | undefined,\n\tcommandService: ICommandService,\n\tconfigService: ITerminalConfigurationService\n): Promise<string | URI | undefined> {\n\tswitch (configService.config.splitCwd) {\n\t\tcase 'workspaceRoot':\n\t\t\tif (folders !== undefined && commandService !== undefined) {\n\t\t\t\tif (folders.length === 1) {\n\t\t\t\t\treturn folders[0].uri;\n\t\t\t\t} else if (folders.length > 1) {\n\t\t\t\t\t// Only choose a path when there's more than 1 folder\n\t\t\t\t\tconst options: IPickOptions<IQuickPickItem> = {\n\t\t\t\t\t\tplaceHolder: localize('workbench.action.terminal.newWorkspacePlaceholder', \"Select current working directory for new terminal\")\n\t\t\t\t\t};\n\t\t\t\t\tconst workspace = await commandService.executeCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID, [options]);\n\t\t\t\t\tif (!workspace) {\n\t\t\t\t\t\t// Don't split the instance if the workspace picker was canceled\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve(workspace.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn '';\n\t\tcase 'initial':\n\t\t\treturn instance.getInitialCwd();\n\t\tcase 'inherited':\n\t\t\treturn instance.getCwd();\n\t}\n}\n\nexport const terminalSendSequenceCommand = async (accessor: ServicesAccessor, args: unknown) => {\n\tconst instance = accessor.get(ITerminalService).activeInstance;\n\tif (instance) {\n\t\tconst text = isObject(args) && 'text' in args ? toOptionalString(args.text) : undefined;\n\t\tif (!text) {\n\t\t\treturn;\n\t\t}\n\t\tconst configurationResolverService = accessor.get(IConfigurationResolverService);\n\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(instance.isRemote ? Schemas.vscodeRemote : Schemas.file);\n\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri ? workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\tconst resolvedText = await configurationResolverService.resolveAsync(lastActiveWorkspaceRoot, text);\n\t\tinstance.sendText(resolvedText, false);\n\t}\n};\n\nexport class TerminalLaunchHelpAction extends Action {\n\n\tconstructor(\n\t\t@IOpenerService private readonly _openerService: IOpenerService\n\t) {\n\t\tsuper('workbench.action.terminal.launchHelp', localize('terminalLaunchHelp', \"Open Help\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tthis._openerService.open('https://aka.ms/vscode-troubleshoot-terminal-launch');\n\t}\n}\n\n/**\n * A wrapper function around registerAction2 to help make registering terminal actions more concise.\n * The following default options are used if undefined:\n *\n * - `f1`: true\n * - `category`: Terminal\n * - `precondition`: TerminalContextKeys.processSupported\n */\nexport function registerTerminalAction(\n\toptions: IAction2Options & { run: (c: ITerminalServicesCollection, accessor: ServicesAccessor, args?: unknown, args2?: unknown) => void | Promise<unknown> }\n): IDisposable {\n\t// Set defaults\n\toptions.f1 = options.f1 ?? true;\n\toptions.category = options.category ?? category;\n\toptions.precondition = options.precondition ?? TerminalContextKeys.processSupported;\n\t// Remove run function from options so it's not passed through to registerAction2\n\tconst runFunc = options.run;\n\tconst strictOptions: IAction2Options & { run?: (c: ITerminalServicesCollection, accessor: ServicesAccessor, args?: unknown) => void | Promise<unknown> } = options;\n\tdelete (strictOptions as IAction2Options & { run?: (c: ITerminalServicesCollection, accessor: ServicesAccessor, args?: unknown) => void | Promise<unknown> })['run'];\n\t// Register\n\treturn registerAction2(class extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper(strictOptions as IAction2Options);\n\t\t}\n\t\trun(accessor: ServicesAccessor, args?: unknown, args2?: unknown) {\n\t\t\treturn runFunc(getTerminalServices(accessor), accessor, args, args2);\n\t\t}\n\t});\n}\n\nfunction parseActionArgs(args?: unknown): InstanceContext[] | undefined {\n\tif (Array.isArray(args)) {\n\t\tif (args.every(e => e instanceof InstanceContext)) {\n\t\t\treturn args as InstanceContext[];\n\t\t}\n\t} else if (args instanceof InstanceContext) {\n\t\treturn [args];\n\t}\n\treturn undefined;\n}\n/**\n * A wrapper around {@link registerTerminalAction} that runs a callback for all currently selected\n * instances provided in the action context. This falls back to the active instance if there are no\n * contextual instances provided.\n */\nexport function registerContextualInstanceAction(\n\toptions: IAction2Options & {\n\t\t/**\n\t\t * When specified, only this type of active instance will be used when there are no\n\t\t * contextual instances.\n\t\t */\n\t\tactiveInstanceType?: 'view' | 'editor';\n\t\trun: (instance: ITerminalInstance, c: ITerminalServicesCollection, accessor: ServicesAccessor, args?: unknown) => void | Promise<unknown>;\n\t\t/**\n\t\t * A callback to run after the the `run` callbacks have completed.\n\t\t * @param instances The selected instance(s) that the command was run on.\n\t\t */\n\t\trunAfter?: (instances: ITerminalInstance[], c: ITerminalServicesCollection, accessor: ServicesAccessor, args?: unknown) => void | Promise<unknown>;\n\t}\n): IDisposable {\n\tconst originalRun = options.run;\n\treturn registerTerminalAction({\n\t\t...options,\n\t\trun: async (c, accessor, focusedInstanceArgs, allInstanceArgs) => {\n\t\t\tlet instances = getSelectedInstances2(accessor, allInstanceArgs);\n\t\t\tif (!instances) {\n\t\t\t\tconst activeInstance = (\n\t\t\t\t\toptions.activeInstanceType === 'view'\n\t\t\t\t\t\t? c.groupService\n\t\t\t\t\t\t: options.activeInstanceType === 'editor' ?\n\t\t\t\t\t\t\tc.editorService\n\t\t\t\t\t\t\t: c.service\n\t\t\t\t).activeInstance;\n\t\t\t\tif (!activeInstance) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstances = [activeInstance];\n\t\t\t}\n\t\t\tconst results: (Promise<unknown> | void)[] = [];\n\t\t\tfor (const instance of instances) {\n\t\t\t\tresults.push(originalRun(instance, c, accessor, focusedInstanceArgs));\n\t\t\t}\n\t\t\tawait Promise.all(results);\n\t\t\tif (options.runAfter) {\n\t\t\t\toptions.runAfter(instances, c, accessor, focusedInstanceArgs);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * A wrapper around {@link registerTerminalAction} that ensures an active instance exists and\n * provides it to the run function.\n */\nexport function registerActiveInstanceAction(\n\toptions: IAction2Options & { run: (activeInstance: ITerminalInstance, c: ITerminalServicesCollection, accessor: ServicesAccessor, args?: unknown) => void | Promise<unknown> }\n): IDisposable {\n\tconst originalRun = options.run;\n\treturn registerTerminalAction({\n\t\t...options,\n\t\trun: (c, accessor, args) => {\n\t\t\tconst activeInstance = c.service.activeInstance;\n\t\t\tif (activeInstance) {\n\t\t\t\treturn originalRun(activeInstance, c, accessor, args);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * A wrapper around {@link registerTerminalAction} that ensures an active terminal\n * exists and provides it to the run function.\n *\n * This includes detached xterm terminals that are not managed by an {@link ITerminalInstance}.\n */\nexport function registerActiveXtermAction(\n\toptions: IAction2Options & { run: (activeTerminal: IXtermTerminal, accessor: ServicesAccessor, instance: ITerminalInstance | IDetachedTerminalInstance, args?: unknown) => void | Promise<unknown> }\n): IDisposable {\n\tconst originalRun = options.run;\n\treturn registerTerminalAction({\n\t\t...options,\n\t\trun: (c, accessor, args) => {\n\t\t\tconst activeDetached = Iterable.find(c.service.detachedInstances, d => d.xterm.isFocused);\n\t\t\tif (activeDetached) {\n\t\t\t\treturn originalRun(activeDetached.xterm, accessor, activeDetached, args);\n\t\t\t}\n\n\t\t\tconst activeInstance = c.service.activeInstance;\n\t\t\tif (activeInstance?.xterm) {\n\t\t\t\treturn originalRun(activeInstance.xterm, accessor, activeInstance, args);\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport interface ITerminalServicesCollection {\n\tservice: ITerminalService;\n\tconfigService: ITerminalConfigurationService;\n\tgroupService: ITerminalGroupService;\n\tinstanceService: ITerminalInstanceService;\n\teditorService: ITerminalEditorService;\n\tprofileService: ITerminalProfileService;\n\tprofileResolverService: ITerminalProfileResolverService;\n}\n\nfunction getTerminalServices(accessor: ServicesAccessor): ITerminalServicesCollection {\n\treturn {\n\t\tservice: accessor.get(ITerminalService),\n\t\tconfigService: accessor.get(ITerminalConfigurationService),\n\t\tgroupService: accessor.get(ITerminalGroupService),\n\t\tinstanceService: accessor.get(ITerminalInstanceService),\n\t\teditorService: accessor.get(ITerminalEditorService),\n\t\tprofileService: accessor.get(ITerminalProfileService),\n\t\tprofileResolverService: accessor.get(ITerminalProfileResolverService)\n\t};\n}\n\nexport function registerTerminalActions() {\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.NewInActiveWorkspace,\n\t\ttitle: localize2('workbench.action.terminal.newInActiveWorkspace', 'Create New Terminal (In Active Workspace)'),\n\t\trun: async (c) => {\n\t\t\tif (c.service.isProcessSupportRegistered) {\n\t\t\t\tconst instance = await c.service.createTerminal({ location: c.service.defaultLocation });\n\t\t\t\tif (!instance) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t}\n\t\t\tawait c.groupService.showPanel(true);\n\t\t}\n\t});\n\n\t// Register new with profile command\n\trefreshTerminalActions([]);\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.CreateTerminalEditor,\n\t\ttitle: localize2('workbench.action.terminal.createTerminalEditor', 'Create New Terminal in Editor Area'),\n\t\trun: async (c, _, args) => {\n\t\t\tconst options = (isObject(args) && 'location' in args) ? args as ICreateTerminalOptions : { location: TerminalLocation.Editor };\n\t\t\tconst instance = await c.service.createTerminal(options);\n\t\t\tawait instance.focusWhenReady();\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.CreateTerminalEditorSameGroup,\n\t\ttitle: localize2('workbench.action.terminal.createTerminalEditor', 'Create New Terminal in Editor Area'),\n\t\tf1: false,\n\t\trun: async (c, accessor, args) => {\n\t\t\t// Force the editor into the same editor group if it's locked. This command is only ever\n\t\t\t// called when a terminal is the active editor\n\t\t\tconst editorGroupsService = accessor.get(IEditorGroupsService);\n\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\tlocation: { viewColumn: editorGroupToColumn(editorGroupsService, editorGroupsService.activeGroup) }\n\t\t\t});\n\t\t\tawait instance.focusWhenReady();\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.CreateTerminalEditorSide,\n\t\ttitle: localize2('workbench.action.terminal.createTerminalEditorSide', 'Create New Terminal in Editor Area to the Side'),\n\t\trun: async (c) => {\n\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\tlocation: { viewColumn: SIDE_GROUP }\n\t\t\t});\n\t\t\tawait instance.focusWhenReady();\n\t\t}\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.MoveToEditor,\n\t\ttitle: terminalStrings.moveToEditor,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\tactiveInstanceType: 'view',\n\t\trun: (instance, c) => c.service.moveToEditor(instance),\n\t\trunAfter: (instances) => instances.at(-1)?.focus()\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.MoveIntoNewWindow,\n\t\ttitle: terminalStrings.moveIntoNewWindow,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\trun: (instance, c) => c.service.moveIntoNewEditor(instance),\n\t\trunAfter: (instances) => instances.at(-1)?.focus()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.MoveToTerminalPanel,\n\t\ttitle: terminalStrings.moveToTerminalPanel,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_editorActive,\n\t\trun: (c, _, args) => {\n\t\t\tconst source = toOptionalUri(args) ?? c.editorService.activeInstance;\n\t\t\tif (source) {\n\t\t\t\tc.service.moveToTerminalView(source);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusPreviousPane,\n\t\ttitle: localize2('workbench.action.terminal.focusPreviousPane', 'Focus Previous Terminal in Terminal Group'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Alt | KeyCode.LeftArrow,\n\t\t\tsecondary: [KeyMod.Alt | KeyCode.UpArrow],\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\t\t\t\tsecondary: [KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.UpArrow]\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c) => {\n\t\t\tc.groupService.activeGroup?.focusPreviousPane();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusNextPane,\n\t\ttitle: localize2('workbench.action.terminal.focusNextPane', 'Focus Next Terminal in Terminal Group'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Alt | KeyCode.RightArrow,\n\t\t\tsecondary: [KeyMod.Alt | KeyCode.DownArrow],\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.RightArrow,\n\t\t\t\tsecondary: [KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.DownArrow]\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c) => {\n\t\t\tc.groupService.activeGroup?.focusNextPane();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.RunRecentCommand,\n\t\ttitle: localize2('workbench.action.terminal.runRecentCommand', 'Run Recent Command...'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: [\n\t\t\t{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyR,\n\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, ContextKeyExpr.or(TerminalContextKeys.focus, ContextKeyExpr.and(accessibleViewIsShown, accessibleViewCurrentProviderId.isEqualTo(AccessibleViewProviderId.Terminal)))),\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t},\n\t\t\t{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyR,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyR },\n\t\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t}\n\t\t],\n\t\trun: async (activeInstance, c) => {\n\t\t\tawait activeInstance.runRecent('command');\n\t\t\tif (activeInstance?.target === TerminalLocation.Editor) {\n\t\t\t\tawait c.editorService.revealActiveEditor();\n\t\t\t} else {\n\t\t\t\tawait c.groupService.showPanel(false);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.CopyLastCommand,\n\t\ttitle: localize2('workbench.action.terminal.copyLastCommand', \"Copy Last Command\"),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c, accessor) => {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst commands = instance.capabilities.get(TerminalCapability.CommandDetection)?.commands;\n\t\t\tif (!commands || commands.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst command = commands[commands.length - 1];\n\t\t\tif (!command.command) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait clipboardService.writeText(command.command);\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.CopyLastCommandOutput,\n\t\ttitle: localize2('workbench.action.terminal.copyLastCommandOutput', \"Copy Last Command Output\"),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c, accessor) => {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst commands = instance.capabilities.get(TerminalCapability.CommandDetection)?.commands;\n\t\t\tif (!commands || commands.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst command = commands[commands.length - 1];\n\t\t\tif (!command?.hasOutput()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst output = command.getOutput();\n\t\t\tif (isString(output)) {\n\t\t\t\tawait clipboardService.writeText(output);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.CopyLastCommandAndLastCommandOutput,\n\t\ttitle: localize2('workbench.action.terminal.copyLastCommandAndOutput', \"Copy Last Command and Output\"),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c, accessor) => {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst commands = instance.capabilities.get(TerminalCapability.CommandDetection)?.commands;\n\t\t\tif (!commands || commands.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst command = commands[commands.length - 1];\n\t\t\tif (!command?.hasOutput()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst output = command.getOutput();\n\t\t\tif (isString(output)) {\n\t\t\t\tawait clipboardService.writeText(`${command.command !== '' ? command.command + '\\n' : ''}${output}`);\n\t\t\t}\n\t\t}\n\t});\n\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.GoToRecentDirectory,\n\t\ttitle: localize2('workbench.action.terminal.goToRecentDirectory', 'Go to Recent Directory...'),\n\t\tmetadata: {\n\t\t\tdescription: localize2('goToRecentDirectory.metadata', 'Goes to a recent folder'),\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyG,\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\trun: async (activeInstance, c) => {\n\t\t\tawait activeInstance.runRecent('cwd');\n\t\t\tif (activeInstance?.target === TerminalLocation.Editor) {\n\t\t\t\tawait c.editorService.revealActiveEditor();\n\t\t\t} else {\n\t\t\t\tawait c.groupService.showPanel(false);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneLeft,\n\t\ttitle: localize2('workbench.action.terminal.resizePaneLeft', 'Resize Terminal Left'),\n\t\tkeybinding: {\n\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.LeftArrow },\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.LeftArrow },\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Left)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneRight,\n\t\ttitle: localize2('workbench.action.terminal.resizePaneRight', 'Resize Terminal Right'),\n\t\tkeybinding: {\n\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.RightArrow },\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.RightArrow },\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Right)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneUp,\n\t\ttitle: localize2('workbench.action.terminal.resizePaneUp', 'Resize Terminal Up'),\n\t\tkeybinding: {\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.UpArrow },\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Up)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneDown,\n\t\ttitle: localize2('workbench.action.terminal.resizePaneDown', 'Resize Terminal Down'),\n\t\tkeybinding: {\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.DownArrow },\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Down)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Focus,\n\t\ttitle: terminalStrings.focus,\n\t\tkeybinding: {\n\t\t\twhen: ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, accessibleViewOnLastLine, accessibleViewCurrentProviderId.isEqualTo(AccessibleViewProviderId.Terminal)),\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c) => {\n\t\t\tconst instance = c.service.activeInstance || await c.service.createTerminal({ location: TerminalLocation.Panel });\n\t\t\tif (!instance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tc.service.setActiveInstance(instance);\n\t\t\tfocusActiveTerminal(instance, c);\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusTabs,\n\t\ttitle: localize2('workbench.action.terminal.focus.tabsView', 'Focus Terminal Tabs View'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Backslash,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.or(TerminalContextKeys.tabsFocus, TerminalContextKeys.focus),\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.focusTabs()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusNext,\n\t\ttitle: localize2('workbench.action.terminal.focusNext', 'Focus Next Terminal Group'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageDown,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.BracketRight\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, TerminalContextKeys.editorFocus.negate()),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\trun: async (c) => {\n\t\t\tc.groupService.setActiveGroupToNext();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusPrevious,\n\t\ttitle: localize2('workbench.action.terminal.focusPrevious', 'Focus Previous Terminal Group'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageUp,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.BracketLeft\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, TerminalContextKeys.editorFocus.negate()),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\trun: async (c) => {\n\t\t\tc.groupService.setActiveGroupToPrevious();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.RunSelectedText,\n\t\ttitle: localize2('workbench.action.terminal.runSelectedText', 'Run Selected Text In Active Terminal'),\n\t\trun: async (c, accessor) => {\n\t\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\t\tconst editor = codeEditorService.getActiveCodeEditor();\n\t\t\tif (!editor || !editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst instance = await c.service.getActiveOrCreateInstance({ acceptsInput: true });\n\t\t\tconst selection = editor.getSelection();\n\t\t\tlet text: string;\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\ttext = editor.getModel().getLineContent(selection.selectionStartLineNumber).trim();\n\t\t\t} else {\n\t\t\t\tconst endOfLinePreference = isWindows ? EndOfLinePreference.LF : EndOfLinePreference.CRLF;\n\t\t\t\ttext = editor.getModel().getValueInRange(selection, endOfLinePreference);\n\t\t\t}\n\t\t\tinstance.sendText(text, true, true);\n\t\t\tawait c.service.revealActiveTerminal(true);\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.RunActiveFile,\n\t\ttitle: localize2('workbench.action.terminal.runActiveFile', 'Run Active File In Active Terminal'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor) => {\n\t\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst workbenchEnvironmentService = accessor.get(IWorkbenchEnvironmentService);\n\n\t\t\tconst editor = codeEditorService.getActiveCodeEditor();\n\t\t\tif (!editor || !editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst instance = await c.service.getActiveOrCreateInstance({ acceptsInput: true });\n\t\t\tconst isRemote = instance ? instance.isRemote : (workbenchEnvironmentService.remoteAuthority ? true : false);\n\t\t\tconst uri = editor.getModel().uri;\n\t\t\tif ((!isRemote && uri.scheme !== Schemas.file && uri.scheme !== Schemas.vscodeUserData) || (isRemote && uri.scheme !== Schemas.vscodeRemote)) {\n\t\t\t\tnotificationService.warn(localize('workbench.action.terminal.runActiveFile.noFile', 'Only files on disk can be run in the terminal'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// TODO: Convert this to ctrl+c, ctrl+v for pwsh?\n\t\t\tawait instance.sendPath(uri, true);\n\t\t\treturn c.groupService.showPanel();\n\t\t}\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollDownLine,\n\t\ttitle: localize2('workbench.action.terminal.scrollDown', 'Scroll Down (Line)'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.PageDown,\n\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollDownLine()\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollDownPage,\n\t\ttitle: localize2('workbench.action.terminal.scrollDownPage', 'Scroll Down (Page)'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageDown,\n\t\t\tmac: { primary: KeyCode.PageDown },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollDownPage()\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollToBottom,\n\t\ttitle: localize2('workbench.action.terminal.scrollToBottom', 'Scroll to Bottom'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.End,\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.End },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollToBottom()\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollUpLine,\n\t\ttitle: localize2('workbench.action.terminal.scrollUp', 'Scroll Up (Line)'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.PageUp,\n\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollUpLine()\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollUpPage,\n\t\ttitle: localize2('workbench.action.terminal.scrollUpPage', 'Scroll Up (Page)'),\n\t\tf1: true,\n\t\tcategory,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageUp,\n\t\t\tmac: { primary: KeyCode.PageUp },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollUpPage()\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollToTop,\n\t\ttitle: localize2('workbench.action.terminal.scrollToTop', 'Scroll to Top'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Home,\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.Home },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollToTop()\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ClearSelection,\n\t\ttitle: localize2('workbench.action.terminal.clearSelection', 'Clear Selection'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyCode.Escape,\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focusInAny, TerminalContextKeys.textSelected, TerminalContextKeys.notFindVisible),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => {\n\t\t\tif (xterm.hasSelection()) {\n\t\t\t\txterm.clearSelection();\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeIcon,\n\t\ttitle: terminalStrings.changeIcon,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, _, args: unknown) => getResourceOrActiveInstance(c, args)?.changeIcon()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeIconActiveTab,\n\t\ttitle: terminalStrings.changeIcon,\n\t\tf1: false,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_singularSelection,\n\t\trun: async (c, accessor, args) => {\n\t\t\tlet icon: TerminalIcon | undefined;\n\t\t\tif (c.groupService.lastAccessedMenu === 'inline-tab') {\n\t\t\t\tgetResourceOrActiveInstance(c, args)?.changeIcon();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const terminal of getSelectedInstances(accessor) ?? []) {\n\t\t\t\ticon = await terminal.changeIcon(icon);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeColor,\n\t\ttitle: terminalStrings.changeColor,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, _, args) => getResourceOrActiveInstance(c, args)?.changeColor()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeColorActiveTab,\n\t\ttitle: terminalStrings.changeColor,\n\t\tf1: false,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_singularSelection,\n\t\trun: async (c, accessor, args) => {\n\t\t\tlet color: string | undefined;\n\t\t\tlet i = 0;\n\t\t\tif (c.groupService.lastAccessedMenu === 'inline-tab') {\n\t\t\t\tgetResourceOrActiveInstance(c, args)?.changeColor();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const terminal of getSelectedInstances(accessor) ?? []) {\n\t\t\t\tconst skipQuickPick = i !== 0;\n\t\t\t\t// Always show the quickpick on the first iteration\n\t\t\t\tcolor = await terminal.changeColor(color, skipQuickPick);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Rename,\n\t\ttitle: terminalStrings.rename,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, accessor, args) => renameWithQuickPick(c, accessor, args)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.RenameActiveTab,\n\t\ttitle: terminalStrings.rename,\n\t\tf1: false,\n\t\tkeybinding: {\n\t\t\tprimary: KeyCode.F2,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyCode.Enter\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.tabsFocus),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_singularSelection,\n\t\trun: async (c, accessor) => {\n\t\t\tconst terminalGroupService = accessor.get(ITerminalGroupService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst instances = getSelectedInstances(accessor);\n\t\t\tconst firstInstance = instances?.[0];\n\t\t\tif (!firstInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (terminalGroupService.lastAccessedMenu === 'inline-tab') {\n\t\t\t\treturn renameWithQuickPick(c, accessor, firstInstance);\n\t\t\t}\n\n\t\t\tc.service.setEditingTerminal(firstInstance);\n\t\t\tc.service.setEditable(firstInstance, {\n\t\t\t\tvalidationMessage: value => validateTerminalName(value),\n\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\t// Cancel editing first as instance.rename will trigger a rerender automatically\n\t\t\t\t\tc.service.setEditable(firstInstance, null);\n\t\t\t\t\tc.service.setEditingTerminal(undefined);\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tconst promises: Promise<void>[] = [];\n\t\t\t\t\t\tfor (const instance of instances) {\n\t\t\t\t\t\t\tpromises.push((async () => {\n\t\t\t\t\t\t\t\tawait instance.rename(value);\n\t\t\t\t\t\t\t})());\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait Promise.all(promises);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tnotificationService.error(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.DetachSession,\n\t\ttitle: localize2('workbench.action.terminal.detachSession', 'Detach Session'),\n\t\trun: (activeInstance) => activeInstance.detachProcessAndDispose(TerminalExitReason.User)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.AttachToSession,\n\t\ttitle: localize2('workbench.action.terminal.attachToSession', 'Attach to Session'),\n\t\trun: async (c, accessor) => {\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst labelService = accessor.get(ILabelService);\n\t\t\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\t\tconst remoteAuthority = remoteAgentService.getConnection()?.remoteAuthority ?? undefined;\n\t\t\tconst backend = await accessor.get(ITerminalInstanceService).getBackend(remoteAuthority);\n\n\t\t\tif (!backend) {\n\t\t\t\tthrow new Error(`No backend registered for remote authority '${remoteAuthority}'`);\n\t\t\t}\n\n\t\t\tconst terms = await backend.listProcesses();\n\n\t\t\tbackend.reduceConnectionGraceTime();\n\n\t\t\tconst unattachedTerms = terms.filter(term => !c.service.isAttachedToTerminal(term));\n\t\t\tconst items = unattachedTerms.map(term => {\n\t\t\t\tconst cwdLabel = labelService.getUriLabel(URI.file(term.cwd));\n\t\t\t\treturn {\n\t\t\t\t\tlabel: term.title,\n\t\t\t\t\tdetail: term.workspaceName ? `${term.workspaceName} \\u2E31 ${cwdLabel}` : cwdLabel,\n\t\t\t\t\tdescription: term.pid ? String(term.pid) : '',\n\t\t\t\t\tterm\n\t\t\t\t};\n\t\t\t});\n\t\t\tif (items.length === 0) {\n\t\t\t\tnotificationService.info(localize('noUnattachedTerminals', 'There are no unattached terminals to attach to'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selected = await quickInputService.pick<IRemoteTerminalPick>(items, { canPickMany: false });\n\t\t\tif (selected) {\n\t\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\t\tconfig: { attachPersistentProcess: selected.term }\n\t\t\t\t});\n\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\tawait focusActiveTerminal(instance, c);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.QuickOpenTerm,\n\t\ttitle: localize2('quickAccessTerminal', 'Switch Active Terminal'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, accessor) => accessor.get(IQuickInputService).quickAccess.show(TerminalQuickAccessProvider.PREFIX)\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.ScrollToPreviousCommand,\n\t\ttitle: terminalStrings.scrollToPreviousCommand,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\ticon: Codicon.arrowUp,\n\t\tmenu: [\n\t\t\t{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 4,\n\t\t\t\twhen: ContextKeyExpr.equals('view', TERMINAL_VIEW_ID),\n\t\t\t\tisHiddenByDefault: true\n\t\t\t}\n\t\t],\n\t\trun: (activeInstance) => activeInstance.xterm?.markTracker.scrollToPreviousMark(undefined, undefined, activeInstance.capabilities.has(TerminalCapability.CommandDetection))\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.ScrollToNextCommand,\n\t\ttitle: terminalStrings.scrollToNextCommand,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\ticon: Codicon.arrowDown,\n\t\tmenu: [\n\t\t\t{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 4,\n\t\t\t\twhen: ContextKeyExpr.equals('view', TERMINAL_VIEW_ID),\n\t\t\t\tisHiddenByDefault: true\n\t\t\t}\n\t\t],\n\t\trun: (activeInstance) => {\n\t\t\tactiveInstance.xterm?.markTracker.scrollToNextMark();\n\t\t\tactiveInstance.focus();\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SelectToPreviousCommand,\n\t\ttitle: localize2('workbench.action.terminal.selectToPreviousCommand', 'Select To Previous Command'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (activeInstance) => {\n\t\t\tactiveInstance.xterm?.markTracker.selectToPreviousMark();\n\t\t\tactiveInstance.focus();\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SelectToNextCommand,\n\t\ttitle: localize2('workbench.action.terminal.selectToNextCommand', 'Select To Next Command'),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (activeInstance) => {\n\t\t\tactiveInstance.xterm?.markTracker.selectToNextMark();\n\t\t\tactiveInstance.focus();\n\t\t}\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.SelectToPreviousLine,\n\t\ttitle: localize2('workbench.action.terminal.selectToPreviousLine', 'Select To Previous Line'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (xterm, _, instance) => {\n\t\t\txterm.markTracker.selectToPreviousLine();\n\t\t\t// prefer to call focus on the TerminalInstance for additional accessibility triggers\n\t\t\t(instance || xterm).focus();\n\t\t}\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.SelectToNextLine,\n\t\ttitle: localize2('workbench.action.terminal.selectToNextLine', 'Select To Next Line'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (xterm, _, instance) => {\n\t\t\txterm.markTracker.selectToNextLine();\n\t\t\t// prefer to call focus on the TerminalInstance for additional accessibility triggers\n\t\t\t(instance || xterm).focus();\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SendSequence,\n\t\ttitle: terminalStrings.sendSequence,\n\t\tf1: false,\n\t\tmetadata: {\n\t\t\tdescription: terminalStrings.sendSequence.value,\n\t\t\targs: [{\n\t\t\t\tname: 'args',\n\t\t\t\tschema: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['text'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\ttext: {\n\t\t\t\t\t\t\tdescription: localize('sendSequence', \"The sequence of text to send to the terminal\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\trun: (c, accessor, args) => terminalSendSequenceCommand(accessor, args)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.NewWithCwd,\n\t\ttitle: terminalStrings.newWithCwd,\n\t\tmetadata: {\n\t\t\tdescription: terminalStrings.newWithCwd.value,\n\t\t\targs: [{\n\t\t\t\tname: 'args',\n\t\t\t\tschema: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['cwd'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tcwd: {\n\t\t\t\t\t\t\tdescription: localize('workbench.action.terminal.newWithCwd.cwd', \"The directory to start the terminal at\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\trun: async (c, _, args) => {\n\t\t\tconst cwd = isObject(args) && 'cwd' in args ? toOptionalString(args.cwd) : undefined;\n\t\t\tconst instance = await c.service.createTerminal({ cwd });\n\t\t\tif (!instance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tc.service.setActiveInstance(instance);\n\t\t\tawait focusActiveTerminal(instance, c);\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.RenameWithArgs,\n\t\ttitle: terminalStrings.renameWithArgs,\n\t\tmetadata: {\n\t\t\tdescription: terminalStrings.renameWithArgs.value,\n\t\t\targs: [{\n\t\t\t\tname: 'args',\n\t\t\t\tschema: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['name'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\tdescription: localize('workbench.action.terminal.renameWithArg.name', \"The new name for the terminal\"),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tminLength: 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (activeInstance, c, accessor, args) => {\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst name = isObject(args) && 'name' in args ? toOptionalString(args.name) : undefined;\n\t\t\tif (!name) {\n\t\t\t\tnotificationService.warn(localize('workbench.action.terminal.renameWithArg.noName', \"No name argument provided\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactiveInstance.rename(name);\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.Relaunch,\n\t\ttitle: localize2('workbench.action.terminal.relaunch', 'Relaunch Active Terminal'),\n\t\trun: (activeInstance) => activeInstance.relaunch()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Split,\n\t\ttitle: terminalStrings.split,\n\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.webExtensionContributedProfile),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Digit5,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backslash,\n\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Digit5]\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus\n\t\t},\n\t\ticon: Codicon.splitHorizontal,\n\t\trun: async (c, accessor, args) => {\n\t\t\tconst optionsOrProfile = isObject(args) ? args as ICreateTerminalOptions | ITerminalProfile : undefined;\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\t\tconst options = convertOptionsOrProfileToOptions(optionsOrProfile);\n\t\t\tconst activeInstance = (await c.service.getInstanceHost(options?.location)).activeInstance;\n\t\t\tif (!activeInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst cwd = await getCwdForSplit(activeInstance, workspaceContextService.getWorkspace().folders, commandService, c.configService);\n\t\t\tif (cwd === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst instance = await c.service.createTerminal({ location: { parentTerminal: activeInstance }, config: options?.config, cwd });\n\t\t\tawait focusActiveTerminal(instance, c);\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SplitActiveTab,\n\t\ttitle: terminalStrings.split,\n\t\tf1: false,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Digit5,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backslash,\n\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Digit5]\n\t\t\t},\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.tabsFocus\n\t\t},\n\t\trun: async (c, accessor) => {\n\t\t\tconst instances = getSelectedInstances(accessor);\n\t\t\tif (instances) {\n\t\t\t\tconst promises: Promise<void>[] = [];\n\t\t\t\tfor (const t of instances) {\n\t\t\t\t\tpromises.push((async () => {\n\t\t\t\t\t\tawait c.service.createTerminal({ location: { parentTerminal: t } });\n\t\t\t\t\t\tawait c.groupService.showPanel(true);\n\t\t\t\t\t})());\n\t\t\t\t}\n\t\t\t\tawait Promise.all(promises);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.Unsplit,\n\t\ttitle: terminalStrings.unsplit,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c) => {\n\t\t\tconst group = c.groupService.getGroupForInstance(instance);\n\t\t\tif (group && group?.terminalInstances.length > 1) {\n\t\t\t\tc.groupService.unsplitInstance(instance);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.JoinActiveTab,\n\t\ttitle: localize2('workbench.action.terminal.joinInstance', 'Join Terminals'),\n\t\tprecondition: ContextKeyExpr.and(sharedWhenClause.terminalAvailable, TerminalContextKeys.tabsSingularSelection.toNegated()),\n\t\trun: async (c, accessor) => {\n\t\t\tconst instances = getSelectedInstances(accessor);\n\t\t\tif (instances && instances.length > 1) {\n\t\t\t\tc.groupService.joinInstances(instances);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Join,\n\t\ttitle: localize2('workbench.action.terminal.join', 'Join Terminals...'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor) => {\n\t\t\tconst themeService = accessor.get(IThemeService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\t\tconst picks: ITerminalQuickPickItem[] = [];\n\t\t\tif (c.groupService.instances.length <= 1) {\n\t\t\t\tnotificationService.warn(localize('workbench.action.terminal.join.insufficientTerminals', 'Insufficient terminals for the join action'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst otherInstances = c.groupService.instances.filter(i => i.instanceId !== c.groupService.activeInstance?.instanceId);\n\t\t\tfor (const terminal of otherInstances) {\n\t\t\t\tconst group = c.groupService.getGroupForInstance(terminal);\n\t\t\t\tif (group?.terminalInstances.length === 1) {\n\t\t\t\t\tconst iconId = getIconId(accessor, terminal);\n\t\t\t\t\tconst label = `$(${iconId}): ${terminal.title}`;\n\t\t\t\t\tconst iconClasses: string[] = [];\n\t\t\t\t\tconst colorClass = getColorClass(terminal);\n\t\t\t\t\tif (colorClass) {\n\t\t\t\t\t\ticonClasses.push(colorClass);\n\t\t\t\t\t}\n\t\t\t\t\tconst uriClasses = getUriClasses(terminal, themeService.getColorTheme().type);\n\t\t\t\t\tif (uriClasses) {\n\t\t\t\t\t\ticonClasses.push(...uriClasses);\n\t\t\t\t\t}\n\t\t\t\t\tpicks.push({\n\t\t\t\t\t\tterminal,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\ticonClasses\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (picks.length === 0) {\n\t\t\t\tnotificationService.warn(localize('workbench.action.terminal.join.onlySplits', 'All terminals are joined already'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst result = await quickInputService.pick(picks, {});\n\t\t\tif (result) {\n\t\t\t\tc.groupService.joinInstances([result.terminal, c.groupService.activeInstance!]);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SplitInActiveWorkspace,\n\t\ttitle: localize2('workbench.action.terminal.splitInActiveWorkspace', 'Split Terminal (In Active Workspace)'),\n\t\trun: async (instance, c) => {\n\t\t\tconst newInstance = await c.service.createTerminal({ location: { parentTerminal: instance } });\n\t\t\tif (newInstance?.target !== TerminalLocation.Editor) {\n\t\t\t\tawait c.groupService.showPanel(true);\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.SelectAll,\n\t\ttitle: localize2('workbench.action.terminal.selectAll', 'Select All'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: [{\n\t\t\t// Don't use ctrl+a by default as that would override the common go to start\n\t\t\t// of prompt shell binding\n\t\t\tprimary: 0,\n\t\t\t// Technically this doesn't need to be here as it will fall back to this\n\t\t\t// behavior anyway when handed to xterm.js, having this handled by VS Code\n\t\t\t// makes it easier for users to see how it works though.\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyA },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.focusInAny\n\t\t}],\n\t\trun: (xterm) => xterm.selectAll()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.New,\n\t\ttitle: localize2('workbench.action.terminal.new', 'Create New Terminal'),\n\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.webExtensionContributedProfile),\n\t\ticon: newTerminalIcon,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Backquote,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Backquote },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\trun: async (c, accessor, args) => {\n\t\t\tlet eventOrOptions = isObject(args) ? args as MouseEvent | ICreateTerminalOptions : undefined;\n\t\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\tif (eventOrOptions && isMouseEvent(eventOrOptions) && (eventOrOptions.altKey || eventOrOptions.ctrlKey)) {\n\t\t\t\tawait c.service.createTerminal({ location: { splitActiveTerminal: true } });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (c.service.isProcessSupportRegistered) {\n\t\t\t\teventOrOptions = !eventOrOptions || isMouseEvent(eventOrOptions) ? {} : eventOrOptions;\n\n\t\t\t\tlet instance: ITerminalInstance | undefined;\n\t\t\t\tif (folders.length <= 1) {\n\t\t\t\t\t// Allow terminal service to handle the path when there is only a\n\t\t\t\t\t// single root\n\t\t\t\t\tinstance = await c.service.createTerminal(eventOrOptions);\n\t\t\t\t} else {\n\t\t\t\t\tconst cwd = (await pickTerminalCwd(accessor))?.cwd;\n\t\t\t\t\tif (!cwd) {\n\t\t\t\t\t\t// Don't create the instance if the workspace picker was canceled\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\teventOrOptions.cwd = cwd;\n\t\t\t\t\tinstance = await c.service.createTerminal(eventOrOptions);\n\t\t\t\t}\n\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\tawait focusActiveTerminal(instance, c);\n\t\t\t} else {\n\t\t\t\tif (c.profileService.contributedProfiles.length > 0) {\n\t\t\t\t\tcommandService.executeCommand(TerminalCommandId.NewWithProfile);\n\t\t\t\t} else {\n\t\t\t\t\tcommandService.executeCommand(TerminalCommandId.Toggle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tasync function killInstance(c: ITerminalServicesCollection, instance: ITerminalInstance | undefined): Promise<void> {\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\t\tawait c.service.safeDisposeTerminal(instance);\n\t\tif (c.groupService.instances.length > 0) {\n\t\t\tawait c.groupService.showPanel(true);\n\t\t}\n\t}\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Kill,\n\t\ttitle: localize2('workbench.action.terminal.kill', 'Kill the Active Terminal Instance'),\n\t\tprecondition: ContextKeyExpr.or(sharedWhenClause.terminalAvailable, TerminalContextKeys.isOpen),\n\t\ticon: killTerminalIcon,\n\t\trun: async (c) => killInstance(c, c.groupService.activeInstance)\n\t});\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillViewOrEditor,\n\t\ttitle: terminalStrings.kill,\n\t\tf1: false, // This is an internal command used for context menus\n\t\tprecondition: ContextKeyExpr.or(sharedWhenClause.terminalAvailable, TerminalContextKeys.isOpen),\n\t\trun: async (c) => killInstance(c, c.service.activeInstance)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillAll,\n\t\ttitle: localize2('workbench.action.terminal.killAll', 'Kill All Terminals'),\n\t\tprecondition: ContextKeyExpr.or(sharedWhenClause.terminalAvailable, TerminalContextKeys.isOpen),\n\t\ticon: Codicon.trash,\n\t\trun: async (c) => {\n\t\t\tconst disposePromises: Promise<void>[] = [];\n\t\t\tfor (const instance of c.service.instances) {\n\t\t\t\tdisposePromises.push(c.service.safeDisposeTerminal(instance));\n\t\t\t}\n\t\t\tawait Promise.all(disposePromises);\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillEditor,\n\t\ttitle: localize2('workbench.action.terminal.killEditor', 'Kill the Active Terminal in Editor Area'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyW,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.F4, secondary: [KeyMod.CtrlCmd | KeyCode.KeyW] },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, TerminalContextKeys.editorFocus)\n\t\t},\n\t\trun: (c, accessor) => accessor.get(ICommandService).executeCommand(CLOSE_EDITOR_COMMAND_ID)\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillActiveTab,\n\t\ttitle: terminalStrings.kill,\n\t\tf1: false,\n\t\tprecondition: ContextKeyExpr.or(sharedWhenClause.terminalAvailable, TerminalContextKeys.isOpen),\n\t\tkeybinding: {\n\t\t\tprimary: KeyCode.Delete,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t\t\t\tsecondary: [KeyCode.Delete]\n\t\t\t},\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.tabsFocus\n\t\t},\n\t\trun: async (c, accessor) => {\n\t\t\tconst disposePromises: Promise<void>[] = [];\n\t\t\tfor (const terminal of getSelectedInstances(accessor, true) ?? []) {\n\t\t\t\tdisposePromises.push(c.service.safeDisposeTerminal(terminal));\n\t\t\t}\n\t\t\tawait Promise.all(disposePromises);\n\t\t\tc.groupService.focusTabs();\n\t\t}\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusHover,\n\t\ttitle: terminalStrings.focusHover,\n\t\tprecondition: ContextKeyExpr.or(sharedWhenClause.terminalAvailable, TerminalContextKeys.isOpen),\n\t\tkeybinding: {\n\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyI),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.or(TerminalContextKeys.tabsFocus, TerminalContextKeys.focus)\n\t\t},\n\t\trun: (c) => c.groupService.focusHover()\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.Clear,\n\t\ttitle: localize2('workbench.action.terminal.clear', 'Clear'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: [{\n\t\t\tprimary: 0,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyK },\n\t\t\t// Weight is higher than work workbench contributions so the keybinding remains\n\t\t\t// highest priority when chords are registered afterwards\n\t\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t\t\t// Disable the keybinding when accessibility mode is enabled as chords include\n\t\t\t// important screen reader keybindings such as cmd+k, cmd+i to show the hover\n\t\t\twhen: ContextKeyExpr.or(ContextKeyExpr.and(TerminalContextKeys.focus, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()), ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, accessibleViewIsShown, accessibleViewCurrentProviderId.isEqualTo(AccessibleViewProviderId.Terminal))),\n\t\t}],\n\t\trun: (activeInstance) => activeInstance.clearBuffer()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SelectDefaultProfile,\n\t\ttitle: localize2('workbench.action.terminal.selectDefaultShell', 'Select Default Profile'),\n\t\trun: (c) => c.service.showProfileQuickPick('setDefault')\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ConfigureTerminalSettings,\n\t\ttitle: localize2('workbench.action.terminal.openSettings', 'Configure Terminal Settings'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, accessor) => accessor.get(IPreferencesService).openSettings({ jsonEditor: false, query: '@feature:terminal' })\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SetDimensions,\n\t\ttitle: localize2('workbench.action.terminal.setFixedDimensions', 'Set Fixed Dimensions'),\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\trun: (activeInstance) => activeInstance.setFixedDimensions()\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.SizeToContentWidth,\n\t\ttitle: terminalStrings.toggleSizeToContentWidth,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Alt | KeyCode.KeyZ,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.focus\n\t\t},\n\t\trun: (instance) => instance.toggleSizeToContentWidth()\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ClearPreviousSessionHistory,\n\t\ttitle: localize2('workbench.action.terminal.clearPreviousSessionHistory', 'Clear Previous Session History'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor) => {\n\t\t\tgetCommandHistory(accessor).clear();\n\t\t\tclearShellFileHistory();\n\t\t}\n\t});\n\n\t// Some commands depend on platform features\n\tif (BrowserFeatures.clipboard.writeText) {\n\t\tregisterActiveXtermAction({\n\t\t\tid: TerminalCommandId.CopySelection,\n\t\t\ttitle: localize2('workbench.action.terminal.copySelection', 'Copy Selection'),\n\t\t\t// TODO: Why is copy still showing up when text isn't selected?\n\t\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.textSelectedInFocused, ContextKeyExpr.and(sharedWhenClause.terminalAvailable, TerminalContextKeys.textSelected)),\n\t\t\tkeybinding: [{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyC },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\tContextKeyExpr.and(TerminalContextKeys.textSelected, TerminalContextKeys.focus),\n\t\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t\t)\n\t\t\t}],\n\t\t\trun: (activeInstance) => activeInstance.copySelection()\n\t\t});\n\n\t\tregisterActiveXtermAction({\n\t\t\tid: TerminalCommandId.CopyAndClearSelection,\n\t\t\ttitle: localize2('workbench.action.terminal.copyAndClearSelection', 'Copy and Clear Selection'),\n\t\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.textSelectedInFocused, ContextKeyExpr.and(sharedWhenClause.terminalAvailable, TerminalContextKeys.textSelected)),\n\t\t\tkeybinding: [{\n\t\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyC },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\tContextKeyExpr.and(TerminalContextKeys.textSelected, TerminalContextKeys.focus),\n\t\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t\t)\n\t\t\t}],\n\t\t\trun: async (xterm) => {\n\t\t\t\tawait xterm.copySelection();\n\t\t\t\txterm.clearSelection();\n\t\t\t}\n\t\t});\n\n\t\tregisterActiveXtermAction({\n\t\t\tid: TerminalCommandId.CopySelectionAsHtml,\n\t\t\ttitle: localize2('workbench.action.terminal.copySelectionAsHtml', 'Copy Selection as HTML'),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.textSelectedInFocused, ContextKeyExpr.and(sharedWhenClause.terminalAvailable, TerminalContextKeys.textSelected)),\n\t\t\trun: (xterm) => xterm.copySelection(true)\n\t\t});\n\t}\n\n\tif (BrowserFeatures.clipboard.readText) {\n\t\tregisterActiveInstanceAction({\n\t\t\tid: TerminalCommandId.Paste,\n\t\t\ttitle: localize2('workbench.action.terminal.paste', 'Paste into Active Terminal'),\n\t\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\t\tkeybinding: [{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyV, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyV] },\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyV },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: TerminalContextKeys.focus\n\t\t\t}],\n\t\t\trun: (activeInstance) => activeInstance.paste()\n\t\t});\n\t}\n\n\tif (BrowserFeatures.clipboard.readText && isLinux) {\n\t\tregisterActiveInstanceAction({\n\t\t\tid: TerminalCommandId.PasteSelection,\n\t\t\ttitle: localize2('workbench.action.terminal.pasteSelection', 'Paste Selection into Active Terminal'),\n\t\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\t\tkeybinding: [{\n\t\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.Insert },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: TerminalContextKeys.focus\n\t\t\t}],\n\t\t\trun: (activeInstance) => activeInstance.pasteSelection()\n\t\t});\n\t}\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SwitchTerminal,\n\t\ttitle: localize2('workbench.action.terminal.switchTerminal', 'Switch Terminal'),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor, args) => {\n\t\t\tconst item = toOptionalString(args);\n\t\t\tif (!item) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (item === switchTerminalActionViewItemSeparator) {\n\t\t\t\tc.service.refreshActiveGroup();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (item === switchTerminalShowTabsTitle) {\n\t\t\t\taccessor.get(IConfigurationService).updateValue(TerminalSettingId.TabsEnabled, true);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst terminalIndexRe = /^([0-9]+): /;\n\t\t\tconst indexMatches = terminalIndexRe.exec(item);\n\t\t\tif (indexMatches) {\n\t\t\t\tc.groupService.setActiveGroupByIndex(Number(indexMatches[1]) - 1);\n\t\t\t\treturn c.groupService.showPanel(true);\n\t\t\t}\n\n\t\t\tconst quickSelectProfiles = c.profileService.availableProfiles;\n\n\t\t\t// Remove 'New ' from the selected item to get the profile name\n\t\t\tconst profileSelection = item.substring(4);\n\t\t\tif (quickSelectProfiles) {\n\t\t\t\tconst profile = quickSelectProfiles.find(profile => profile.profileName === profileSelection);\n\t\t\t\tif (profile) {\n\t\t\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\t\t\tconfig: profile\n\t\t\t\t\t});\n\t\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`No profile with name \"${profileSelection}\"`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Unmatched terminal item: \"${item}\"`);\n\t\t\t}\n\t\t}\n\t});\n}\n\ninterface IRemoteTerminalPick extends IQuickPickItem {\n\tterm: IRemoteTerminalAttachTarget;\n}\n\nfunction getSelectedInstances2(accessor: ServicesAccessor, args?: unknown): ITerminalInstance[] | undefined {\n\tconst terminalService = accessor.get(ITerminalService);\n\tconst result: ITerminalInstance[] = [];\n\tconst context = parseActionArgs(args);\n\tif (context && context.length > 0) {\n\t\tfor (const instanceContext of context) {\n\t\t\tconst instance = terminalService.getInstanceFromId(instanceContext.instanceId);\n\t\t\tif (instance) {\n\t\t\t\tresult.push(instance);\n\t\t\t}\n\t\t}\n\t\tif (result.length > 0) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction getSelectedInstances(accessor: ServicesAccessor, args?: unknown, args2?: unknown): ITerminalInstance[] | undefined {\n\tconst listService = accessor.get(IListService);\n\tconst terminalService = accessor.get(ITerminalService);\n\tconst terminalGroupService = accessor.get(ITerminalGroupService);\n\tconst result: ITerminalInstance[] = [];\n\n\tconst list = listService.lastFocusedList;\n\t// Get selected tab list instance(s)\n\tconst selections = list?.getSelection();\n\t// Get inline tab instance if there are not tab list selections #196578\n\tif (terminalGroupService.lastAccessedMenu === 'inline-tab' && !selections?.length) {\n\t\tconst instance = terminalGroupService.activeInstance;\n\t\treturn instance ? [terminalGroupService.activeInstance] : undefined;\n\t}\n\n\tif (!list || !selections) {\n\t\treturn undefined;\n\t}\n\tconst focused = list.getFocus();\n\n\tif (focused.length === 1 && !selections.includes(focused[0])) {\n\t\t// focused length is always a max of 1\n\t\t// if the focused one is not in the selected list, return that item\n\t\tresult.push(terminalService.getInstanceFromIndex(focused[0]) as ITerminalInstance);\n\t\treturn result;\n\t}\n\n\t// multi-select\n\tfor (const selection of selections) {\n\t\tresult.push(terminalService.getInstanceFromIndex(selection) as ITerminalInstance);\n\t}\n\treturn result.filter(r => !!r);\n}\n\nexport function validateTerminalName(name: string): { content: string; severity: Severity } | null {\n\tif (!name || name.trim().length === 0) {\n\t\treturn {\n\t\t\tcontent: localize('emptyTerminalNameInfo', \"Providing no name will reset it to the default value\"),\n\t\t\tseverity: Severity.Info\n\t\t};\n\t}\n\n\treturn null;\n}\n\nfunction convertOptionsOrProfileToOptions(optionsOrProfile?: ICreateTerminalOptions | ITerminalProfile): ICreateTerminalOptions | undefined {\n\tif (isObject(optionsOrProfile) && 'profileName' in optionsOrProfile) {\n\t\treturn { config: optionsOrProfile as ITerminalProfile, location: (optionsOrProfile as ICreateTerminalOptions).location };\n\t}\n\treturn optionsOrProfile;\n}\n\nlet newWithProfileAction: IDisposable;\n\nexport function refreshTerminalActions(detectedProfiles: ITerminalProfile[]): IDisposable {\n\tconst profileEnum = createProfileSchemaEnums(detectedProfiles);\n\tnewWithProfileAction?.dispose();\n\t// TODO: Use new register function\n\tnewWithProfileAction = registerAction2(class extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: TerminalCommandId.NewWithProfile,\n\t\t\t\ttitle: localize2('workbench.action.terminal.newWithProfile', 'Create New Terminal (With Profile)'),\n\t\t\t\tf1: true,\n\t\t\t\tcategory,\n\t\t\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.webExtensionContributedProfile),\n\t\t\t\tmetadata: {\n\t\t\t\t\tdescription: TerminalCommandId.NewWithProfile,\n\t\t\t\t\targs: [{\n\t\t\t\t\t\tname: 'args',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\trequired: ['profileName'],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tprofileName: {\n\t\t\t\t\t\t\t\t\tdescription: localize('workbench.action.terminal.newWithProfile.profileName', \"The name of the profile to create\"),\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tenum: profileEnum.values,\n\t\t\t\t\t\t\t\t\tmarkdownEnumDescriptions: profileEnum.markdownDescriptions\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlocation: {\n\t\t\t\t\t\t\t\t\tdescription: localize('newWithProfile.location', \"Where to create the terminal\"),\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tenum: ['view', 'editor'],\n\t\t\t\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\t\t\t\tlocalize('newWithProfile.location.view', 'Create the terminal in the terminal view'),\n\t\t\t\t\t\t\t\t\t\tlocalize('newWithProfile.location.editor', 'Create the terminal in the editor'),\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tasync run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\teventOrOptionsOrProfile: MouseEvent | ICreateTerminalOptions | ITerminalProfile | { profileName: string; location?: 'view' | 'editor' | unknown } | undefined,\n\t\t\tprofile?: ITerminalProfile\n\t\t) {\n\t\t\tconst c = getTerminalServices(accessor);\n\t\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\n\t\t\tlet event: MouseEvent | PointerEvent | KeyboardEvent | undefined;\n\t\t\tlet options: ICreateTerminalOptions | undefined;\n\t\t\tlet instance: ITerminalInstance | undefined;\n\t\t\tlet cwd: string | URI | undefined;\n\n\t\t\tif (isObject(eventOrOptionsOrProfile) && eventOrOptionsOrProfile && 'profileName' in eventOrOptionsOrProfile) {\n\t\t\t\tconst config = c.profileService.availableProfiles.find(profile => profile.profileName === eventOrOptionsOrProfile.profileName);\n\t\t\t\tif (!config) {\n\t\t\t\t\tthrow new Error(`Could not find terminal profile \"${eventOrOptionsOrProfile.profileName}\"`);\n\t\t\t\t}\n\t\t\t\toptions = { config };\n\t\t\t\tif ('location' in eventOrOptionsOrProfile) {\n\t\t\t\t\tswitch (eventOrOptionsOrProfile.location) {\n\t\t\t\t\t\tcase 'editor': options.location = TerminalLocation.Editor; break;\n\t\t\t\t\t\tcase 'view': options.location = TerminalLocation.Panel; break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isMouseEvent(eventOrOptionsOrProfile) || isPointerEvent(eventOrOptionsOrProfile) || isKeyboardEvent(eventOrOptionsOrProfile)) {\n\t\t\t\tevent = eventOrOptionsOrProfile;\n\t\t\t\toptions = profile ? { config: profile } : undefined;\n\t\t\t} else {\n\t\t\t\toptions = convertOptionsOrProfileToOptions(eventOrOptionsOrProfile);\n\t\t\t}\n\n\t\t\t// split terminal\n\t\t\tif (event && (event.altKey || event.ctrlKey)) {\n\t\t\t\tconst parentTerminal = c.service.activeInstance;\n\t\t\t\tif (parentTerminal) {\n\t\t\t\t\tawait c.service.createTerminal({ location: { parentTerminal }, config: options?.config });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\tif (folders.length > 1) {\n\t\t\t\t// multi-root workspace, create root picker\n\t\t\t\tconst options: IPickOptions<IQuickPickItem> = {\n\t\t\t\t\tplaceHolder: localize('workbench.action.terminal.newWorkspacePlaceholder', \"Select current working directory for new terminal\")\n\t\t\t\t};\n\t\t\t\tconst workspace = await commandService.executeCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID, [options]);\n\t\t\t\tif (!workspace) {\n\t\t\t\t\t// Don't create the instance if the workspace picker was canceled\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcwd = workspace.uri;\n\t\t\t}\n\n\t\t\tif (options) {\n\t\t\t\toptions.cwd = cwd;\n\t\t\t\tinstance = await c.service.createTerminal(options);\n\t\t\t} else {\n\t\t\t\tinstance = await c.service.showProfileQuickPick('createInstance', cwd);\n\t\t\t}\n\n\t\t\tif (instance) {\n\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\tawait focusActiveTerminal(instance, c);\n\t\t\t}\n\t\t}\n\t});\n\treturn newWithProfileAction;\n}\n\nfunction getResourceOrActiveInstance(c: ITerminalServicesCollection, resource: unknown): ITerminalInstance | undefined {\n\treturn c.service.getInstanceFromResource(toOptionalUri(resource)) || c.service.activeInstance;\n}\n\nasync function pickTerminalCwd(accessor: ServicesAccessor, cancel?: CancellationToken): Promise<WorkspaceFolderCwdPair | undefined> {\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst labelService = accessor.get(ILabelService);\n\tconst contextService = accessor.get(IWorkspaceContextService);\n\tconst modelService = accessor.get(IModelService);\n\tconst languageService = accessor.get(ILanguageService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst configurationResolverService = accessor.get(IConfigurationResolverService);\n\n\tconst folders = contextService.getWorkspace().folders;\n\tif (!folders.length) {\n\t\treturn;\n\t}\n\n\tconst folderCwdPairs = await Promise.all(folders.map(e => resolveWorkspaceFolderCwd(e, configurationService, configurationResolverService)));\n\tconst shrinkedPairs = shrinkWorkspaceFolderCwdPairs(folderCwdPairs);\n\n\tif (shrinkedPairs.length === 1) {\n\t\treturn shrinkedPairs[0];\n\t}\n\n\ttype Item = IQuickPickItem & { pair: WorkspaceFolderCwdPair };\n\tconst folderPicks: Item[] = shrinkedPairs.map(pair => {\n\t\tconst label = pair.folder.name;\n\t\tconst description = pair.isOverridden\n\t\t\t? localize('workbench.action.terminal.overriddenCwdDescription', \"(Overriden) {0}\", labelService.getUriLabel(pair.cwd, { relative: !pair.isAbsolute }))\n\t\t\t: labelService.getUriLabel(dirname(pair.cwd), { relative: true });\n\n\t\treturn {\n\t\t\tlabel,\n\t\t\tdescription: description !== label ? description : undefined,\n\t\t\tpair: pair,\n\t\t\ticonClasses: getIconClasses(modelService, languageService, pair.cwd, FileKind.ROOT_FOLDER)\n\t\t};\n\t});\n\tconst options: IPickOptions<Item> = {\n\t\tplaceHolder: localize('workbench.action.terminal.newWorkspacePlaceholder', \"Select current working directory for new terminal\"),\n\t\tmatchOnDescription: true,\n\t\tcanPickMany: false,\n\t};\n\n\tconst token: CancellationToken = cancel || CancellationToken.None;\n\tconst pick = await quickInputService.pick<Item>(folderPicks, options, token);\n\treturn pick?.pair;\n}\n\nasync function resolveWorkspaceFolderCwd(folder: IWorkspaceFolder, configurationService: IConfigurationService, configurationResolverService: IConfigurationResolverService): Promise<WorkspaceFolderCwdPair> {\n\tconst cwdConfig = configurationService.getValue(TerminalSettingId.Cwd, { resource: folder.uri });\n\tif (!isString(cwdConfig) || cwdConfig.length === 0) {\n\t\treturn { folder, cwd: folder.uri, isAbsolute: false, isOverridden: false };\n\t}\n\n\tconst resolvedCwdConfig = await configurationResolverService.resolveAsync(folder, cwdConfig);\n\treturn isAbsolute(resolvedCwdConfig) || resolvedCwdConfig.startsWith(AbstractVariableResolverService.VARIABLE_LHS)\n\t\t? { folder, isAbsolute: true, isOverridden: true, cwd: URI.from({ ...folder.uri, path: resolvedCwdConfig }) }\n\t\t: { folder, isAbsolute: false, isOverridden: true, cwd: URI.joinPath(folder.uri, resolvedCwdConfig) };\n}\n\n/**\n * Drops repeated CWDs, if any, by keeping the one which best matches the workspace folder. It also preserves the original order.\n */\nexport function shrinkWorkspaceFolderCwdPairs(pairs: WorkspaceFolderCwdPair[]): WorkspaceFolderCwdPair[] {\n\tconst map = new Map<string, WorkspaceFolderCwdPair>();\n\tfor (const pair of pairs) {\n\t\tconst key = pair.cwd.toString();\n\t\tconst value = map.get(key);\n\t\tif (!value || key === pair.folder.uri.toString()) {\n\t\t\tmap.set(key, pair);\n\t\t}\n\t}\n\tconst selectedPairs = new Set(map.values());\n\tconst selectedPairsInOrder = pairs.filter(x => selectedPairs.has(x));\n\treturn selectedPairsInOrder;\n}\n\nasync function focusActiveTerminal(instance: ITerminalInstance, c: ITerminalServicesCollection): Promise<void> {\n\tif (instance.target === TerminalLocation.Editor) {\n\t\tawait c.editorService.revealActiveEditor();\n\t\tawait instance.focusWhenReady(true);\n\t} else {\n\t\tawait c.groupService.showPanel(true);\n\t}\n}\n\nasync function renameWithQuickPick(c: ITerminalServicesCollection, accessor: ServicesAccessor, resource?: unknown) {\n\tlet instance: ITerminalInstance | undefined = resource as ITerminalInstance;\n\t// Check if the 'instance' does not exist or if 'instance.rename' is not defined\n\tif (!instance || !instance?.rename) {\n\t\t// If not, obtain the resource instance using 'getResourceOrActiveInstance'\n\t\tinstance = getResourceOrActiveInstance(c, resource);\n\t}\n\n\tif (instance) {\n\t\tconst title = await accessor.get(IQuickInputService).input({\n\t\t\tvalue: instance.title,\n\t\t\tprompt: localize('workbench.action.terminal.rename.prompt', \"Enter terminal name\"),\n\t\t});\n\t\tinstance.rename(title);\n\t}\n}\n\nfunction toOptionalUri(obj: unknown): URI | undefined {\n\treturn URI.isUri(obj) ? obj : undefined;\n}\n\nfunction toOptionalString(obj: unknown): string | undefined {\n\treturn isString(obj) ? obj : undefined;\n}\n"],
  "mappings": "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",
  "names": ["profile", "options"]
}
