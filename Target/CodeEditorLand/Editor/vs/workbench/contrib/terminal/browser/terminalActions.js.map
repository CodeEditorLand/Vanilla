{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserFeatures } from \"../../../../base/browser/canIUse.js\";\nimport {\n\tisKeyboardEvent,\n\tisMouseEvent,\n\tisPointerEvent,\n} from \"../../../../base/browser/dom.js\";\nimport { Action } from \"../../../../base/common/actions.js\";\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport { KeyChord, KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { isAbsolute } from \"../../../../base/common/path.js\";\nimport { isLinux, isWindows } from \"../../../../base/common/platform.js\";\nimport { dirname } from \"../../../../base/common/resources.js\";\nimport { isObject, isString } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { EndOfLinePreference } from \"../../../../editor/common/model.js\";\nimport { getIconClasses } from \"../../../../editor/common/services/getIconClasses.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport { AccessibleViewProviderId } from \"../../../../platform/accessibility/browser/accessibleView.js\";\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport {\n\tAction2,\n\ttype IAction2Options,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { FileKind } from \"../../../../platform/files/common/files.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { IListService } from \"../../../../platform/list/browser/listService.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport {\n\ttype IPickOptions,\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { TerminalCapability } from \"../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport {\n\ttype ITerminalProfile,\n\tTerminalExitReason,\n\ttype TerminalIcon,\n\tTerminalLocation,\n\tTerminalSettingId,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { createProfileSchemaEnums } from \"../../../../platform/terminal/common/terminalProfiles.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { PICK_WORKSPACE_FOLDER_COMMAND_ID } from \"../../../browser/actions/workspaceCommands.js\";\nimport { CLOSE_EDITOR_COMMAND_ID } from \"../../../browser/parts/editor/editorCommands.js\";\nimport { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport { AbstractVariableResolverService } from \"../../../services/configurationResolver/common/variableResolver.js\";\nimport { editorGroupToColumn } from \"../../../services/editor/common/editorGroupColumn.js\";\nimport { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport { SIDE_GROUP } from \"../../../services/editor/common/editorService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport {\n\taccessibleViewCurrentProviderId,\n\taccessibleViewIsShown,\n\taccessibleViewOnLastLine,\n} from \"../../accessibility/browser/accessibilityConfiguration.js\";\nimport { clearShellFileHistory, getCommandHistory } from \"../common/history.js\";\nimport {\n\ttype IRemoteTerminalAttachTarget,\n\tITerminalProfileResolverService,\n\tITerminalProfileService,\n\tTERMINAL_VIEW_ID,\n\tTerminalCommandId,\n} from \"../common/terminal.js\";\nimport { TerminalContextKeys } from \"../common/terminalContextKey.js\";\nimport { terminalStrings } from \"../common/terminalStrings.js\";\nimport {\n\tDirection,\n\ttype ICreateTerminalOptions,\n\ttype IDetachedTerminalInstance,\n\tITerminalConfigurationService,\n\tITerminalEditorService,\n\tITerminalGroupService,\n\ttype ITerminalInstance,\n\tITerminalInstanceService,\n\tITerminalService,\n\ttype IXtermTerminal,\n} from \"./terminal.js\";\nimport { InstanceContext } from \"./terminalContextMenu.js\";\nimport { getColorClass, getIconId, getUriClasses } from \"./terminalIcon.js\";\nimport { killTerminalIcon, newTerminalIcon } from \"./terminalIcons.js\";\nimport type { ITerminalQuickPickItem } from \"./terminalProfileQuickpick.js\";\nimport { TerminalQuickAccessProvider } from \"./terminalQuickAccess.js\";\n\nexport const switchTerminalActionViewItemSeparator =\n\t\"\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\";\nexport const switchTerminalShowTabsTitle = localize(\n\t\"showTerminalTabs\",\n\t\"Show Tabs\",\n);\n\nconst category = terminalStrings.actionCategory;\n\n// Some terminal context keys get complicated. Since normalizing and/or context keys can be\n// expensive this is done once per context key and shared.\nconst sharedWhenClause = (() => {\n\tconst terminalAvailable = ContextKeyExpr.or(\n\t\tTerminalContextKeys.processSupported,\n\t\tTerminalContextKeys.terminalHasBeenCreated,\n\t);\n\treturn {\n\t\tterminalAvailable,\n\t\tterminalAvailable_and_opened: ContextKeyExpr.and(\n\t\t\tterminalAvailable,\n\t\t\tTerminalContextKeys.isOpen,\n\t\t),\n\t\tterminalAvailable_and_editorActive: ContextKeyExpr.and(\n\t\t\tterminalAvailable,\n\t\t\tTerminalContextKeys.terminalEditorActive,\n\t\t),\n\t\tterminalAvailable_and_singularSelection: ContextKeyExpr.and(\n\t\t\tterminalAvailable,\n\t\t\tTerminalContextKeys.tabsSingularSelection,\n\t\t),\n\t\tfocusInAny_and_normalBuffer: ContextKeyExpr.and(\n\t\t\tTerminalContextKeys.focusInAny,\n\t\t\tTerminalContextKeys.altBufferActive.negate(),\n\t\t),\n\t};\n})();\n\nexport interface WorkspaceFolderCwdPair {\n\tfolder: IWorkspaceFolder;\n\tcwd: URI;\n\tisAbsolute: boolean;\n\tisOverridden: boolean;\n}\n\nexport async function getCwdForSplit(\n\tinstance: ITerminalInstance,\n\tfolders: IWorkspaceFolder[] | undefined,\n\tcommandService: ICommandService,\n\tconfigService: ITerminalConfigurationService,\n): Promise<string | URI | undefined> {\n\tswitch (configService.config.splitCwd) {\n\t\tcase \"workspaceRoot\":\n\t\t\tif (folders !== undefined && commandService !== undefined) {\n\t\t\t\tif (folders.length === 1) {\n\t\t\t\t\treturn folders[0].uri;\n\t\t\t\t} else if (folders.length > 1) {\n\t\t\t\t\t// Only choose a path when there's more than 1 folder\n\t\t\t\t\tconst options: IPickOptions<IQuickPickItem> = {\n\t\t\t\t\t\tplaceHolder: localize(\n\t\t\t\t\t\t\t\"workbench.action.terminal.newWorkspacePlaceholder\",\n\t\t\t\t\t\t\t\"Select current working directory for new terminal\",\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tconst workspace = await commandService.executeCommand(\n\t\t\t\t\t\tPICK_WORKSPACE_FOLDER_COMMAND_ID,\n\t\t\t\t\t\t[options],\n\t\t\t\t\t);\n\t\t\t\t\tif (!workspace) {\n\t\t\t\t\t\t// Don't split the instance if the workspace picker was canceled\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve(workspace.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\";\n\t\tcase \"initial\":\n\t\t\treturn instance.getInitialCwd();\n\t\tcase \"inherited\":\n\t\t\treturn instance.getCwd();\n\t}\n}\n\nexport const terminalSendSequenceCommand = async (\n\taccessor: ServicesAccessor,\n\targs: unknown,\n) => {\n\tconst instance = accessor.get(ITerminalService).activeInstance;\n\tif (instance) {\n\t\tconst text =\n\t\t\tisObject(args) && \"text\" in args\n\t\t\t\t? toOptionalString(args.text)\n\t\t\t\t: undefined;\n\t\tif (!text) {\n\t\t\treturn;\n\t\t}\n\t\tconst configurationResolverService = accessor.get(\n\t\t\tIConfigurationResolverService,\n\t\t);\n\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\tconst activeWorkspaceRootUri =\n\t\t\thistoryService.getLastActiveWorkspaceRoot(\n\t\t\t\tinstance.isRemote ? Schemas.vscodeRemote : Schemas.file,\n\t\t\t);\n\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri\n\t\t\t? (workspaceContextService.getWorkspaceFolder(\n\t\t\t\t\tactiveWorkspaceRootUri,\n\t\t\t\t) ?? undefined)\n\t\t\t: undefined;\n\t\tconst resolvedText = await configurationResolverService.resolveAsync(\n\t\t\tlastActiveWorkspaceRoot,\n\t\t\ttext,\n\t\t);\n\t\tinstance.sendText(resolvedText, false);\n\t}\n};\n\nexport class TerminalLaunchHelpAction extends Action {\n\tconstructor(\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t) {\n\t\tsuper(\n\t\t\t\"workbench.action.terminal.launchHelp\",\n\t\t\tlocalize(\"terminalLaunchHelp\", \"Open Help\"),\n\t\t);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tthis._openerService.open(\n\t\t\t\"https://aka.ms/vscode-troubleshoot-terminal-launch\",\n\t\t);\n\t}\n}\n\n/**\n * A wrapper function around registerAction2 to help make registering terminal actions more concise.\n * The following default options are used if undefined:\n *\n * - `f1`: true\n * - `category`: Terminal\n * - `precondition`: TerminalContextKeys.processSupported\n */\nexport function registerTerminalAction(\n\toptions: IAction2Options & {\n\t\trun: (\n\t\t\tc: ITerminalServicesCollection,\n\t\t\taccessor: ServicesAccessor,\n\t\t\targs?: unknown,\n\t\t\targs2?: unknown,\n\t\t) => void | Promise<unknown>;\n\t},\n): IDisposable {\n\t// Set defaults\n\toptions.f1 = options.f1 ?? true;\n\toptions.category = options.category ?? category;\n\toptions.precondition =\n\t\toptions.precondition ?? TerminalContextKeys.processSupported;\n\t// Remove run function from options so it's not passed through to registerAction2\n\tconst runFunc = options.run;\n\tconst strictOptions: IAction2Options & {\n\t\trun?: (\n\t\t\tc: ITerminalServicesCollection,\n\t\t\taccessor: ServicesAccessor,\n\t\t\targs?: unknown,\n\t\t) => void | Promise<unknown>;\n\t} = options;\n\tdelete (\n\t\tstrictOptions as IAction2Options & {\n\t\t\trun?: (\n\t\t\t\tc: ITerminalServicesCollection,\n\t\t\t\taccessor: ServicesAccessor,\n\t\t\t\targs?: unknown,\n\t\t\t) => void | Promise<unknown>;\n\t\t}\n\t)[\"run\"];\n\t// Register\n\treturn registerAction2(\n\t\tclass extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper(strictOptions as IAction2Options);\n\t\t\t}\n\t\t\trun(accessor: ServicesAccessor, args?: unknown, args2?: unknown) {\n\t\t\t\treturn runFunc(\n\t\t\t\t\tgetTerminalServices(accessor),\n\t\t\t\t\taccessor,\n\t\t\t\t\targs,\n\t\t\t\t\targs2,\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t);\n}\n\nfunction parseActionArgs(args?: unknown): InstanceContext[] | undefined {\n\tif (Array.isArray(args)) {\n\t\tif (args.every((e) => e instanceof InstanceContext)) {\n\t\t\treturn args as InstanceContext[];\n\t\t}\n\t} else if (args instanceof InstanceContext) {\n\t\treturn [args];\n\t}\n\treturn undefined;\n}\n/**\n * A wrapper around {@link registerTerminalAction} that runs a callback for all currently selected\n * instances provided in the action context. This falls back to the active instance if there are no\n * contextual instances provided.\n */\nexport function registerContextualInstanceAction(\n\toptions: IAction2Options & {\n\t\t/**\n\t\t * When specified, only this type of active instance will be used when there are no\n\t\t * contextual instances.\n\t\t */\n\t\tactiveInstanceType?: \"view\" | \"editor\";\n\t\trun: (\n\t\t\tinstance: ITerminalInstance,\n\t\t\tc: ITerminalServicesCollection,\n\t\t\taccessor: ServicesAccessor,\n\t\t\targs?: unknown,\n\t\t) => void | Promise<unknown>;\n\t\t/**\n\t\t * A callback to run after the the `run` callbacks have completed.\n\t\t * @param instances The selected instance(s) that the command was run on.\n\t\t */\n\t\trunAfter?: (\n\t\t\tinstances: ITerminalInstance[],\n\t\t\tc: ITerminalServicesCollection,\n\t\t\taccessor: ServicesAccessor,\n\t\t\targs?: unknown,\n\t\t) => void | Promise<unknown>;\n\t},\n): IDisposable {\n\tconst originalRun = options.run;\n\treturn registerTerminalAction({\n\t\t...options,\n\t\trun: async (c, accessor, focusedInstanceArgs, allInstanceArgs) => {\n\t\t\tlet instances = getSelectedInstances2(accessor, allInstanceArgs);\n\t\t\tif (!instances) {\n\t\t\t\tconst activeInstance = (\n\t\t\t\t\toptions.activeInstanceType === \"view\"\n\t\t\t\t\t\t? c.groupService\n\t\t\t\t\t\t: options.activeInstanceType === \"editor\"\n\t\t\t\t\t\t\t? c.editorService\n\t\t\t\t\t\t\t: c.service\n\t\t\t\t).activeInstance;\n\t\t\t\tif (!activeInstance) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstances = [activeInstance];\n\t\t\t}\n\t\t\tconst results: (Promise<unknown> | void)[] = [];\n\t\t\tfor (const instance of instances) {\n\t\t\t\tresults.push(\n\t\t\t\t\toriginalRun(instance, c, accessor, focusedInstanceArgs),\n\t\t\t\t);\n\t\t\t}\n\t\t\tawait Promise.all(results);\n\t\t\tif (options.runAfter) {\n\t\t\t\toptions.runAfter(instances, c, accessor, focusedInstanceArgs);\n\t\t\t}\n\t\t},\n\t});\n}\n\n/**\n * A wrapper around {@link registerTerminalAction} that ensures an active instance exists and\n * provides it to the run function.\n */\nexport function registerActiveInstanceAction(\n\toptions: IAction2Options & {\n\t\trun: (\n\t\t\tactiveInstance: ITerminalInstance,\n\t\t\tc: ITerminalServicesCollection,\n\t\t\taccessor: ServicesAccessor,\n\t\t\targs?: unknown,\n\t\t) => void | Promise<unknown>;\n\t},\n): IDisposable {\n\tconst originalRun = options.run;\n\treturn registerTerminalAction({\n\t\t...options,\n\t\trun: (c, accessor, args) => {\n\t\t\tconst activeInstance = c.service.activeInstance;\n\t\t\tif (activeInstance) {\n\t\t\t\treturn originalRun(activeInstance, c, accessor, args);\n\t\t\t}\n\t\t},\n\t});\n}\n\n/**\n * A wrapper around {@link registerTerminalAction} that ensures an active terminal\n * exists and provides it to the run function.\n *\n * This includes detached xterm terminals that are not managed by an {@link ITerminalInstance}.\n */\nexport function registerActiveXtermAction(\n\toptions: IAction2Options & {\n\t\trun: (\n\t\t\tactiveTerminal: IXtermTerminal,\n\t\t\taccessor: ServicesAccessor,\n\t\t\tinstance: ITerminalInstance | IDetachedTerminalInstance,\n\t\t\targs?: unknown,\n\t\t) => void | Promise<unknown>;\n\t},\n): IDisposable {\n\tconst originalRun = options.run;\n\treturn registerTerminalAction({\n\t\t...options,\n\t\trun: (c, accessor, args) => {\n\t\t\tconst activeDetached = Iterable.find(\n\t\t\t\tc.service.detachedInstances,\n\t\t\t\t(d) => d.xterm.isFocused,\n\t\t\t);\n\t\t\tif (activeDetached) {\n\t\t\t\treturn originalRun(\n\t\t\t\t\tactiveDetached.xterm,\n\t\t\t\t\taccessor,\n\t\t\t\t\tactiveDetached,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst activeInstance = c.service.activeInstance;\n\t\t\tif (activeInstance?.xterm) {\n\t\t\t\treturn originalRun(\n\t\t\t\t\tactiveInstance.xterm,\n\t\t\t\t\taccessor,\n\t\t\t\t\tactiveInstance,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t});\n}\n\nexport interface ITerminalServicesCollection {\n\tservice: ITerminalService;\n\tconfigService: ITerminalConfigurationService;\n\tgroupService: ITerminalGroupService;\n\tinstanceService: ITerminalInstanceService;\n\teditorService: ITerminalEditorService;\n\tprofileService: ITerminalProfileService;\n\tprofileResolverService: ITerminalProfileResolverService;\n}\n\nfunction getTerminalServices(\n\taccessor: ServicesAccessor,\n): ITerminalServicesCollection {\n\treturn {\n\t\tservice: accessor.get(ITerminalService),\n\t\tconfigService: accessor.get(ITerminalConfigurationService),\n\t\tgroupService: accessor.get(ITerminalGroupService),\n\t\tinstanceService: accessor.get(ITerminalInstanceService),\n\t\teditorService: accessor.get(ITerminalEditorService),\n\t\tprofileService: accessor.get(ITerminalProfileService),\n\t\tprofileResolverService: accessor.get(ITerminalProfileResolverService),\n\t};\n}\n\nexport function registerTerminalActions() {\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.NewInActiveWorkspace,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.newInActiveWorkspace\",\n\t\t\t\"Create New Terminal (In Active Workspace)\",\n\t\t),\n\t\trun: async (c) => {\n\t\t\tif (c.service.isProcessSupportRegistered) {\n\t\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\t\tlocation: c.service.defaultLocation,\n\t\t\t\t});\n\t\t\t\tif (!instance) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t}\n\t\t\tawait c.groupService.showPanel(true);\n\t\t},\n\t});\n\n\t// Register new with profile command\n\trefreshTerminalActions([]);\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.CreateTerminalEditor,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.createTerminalEditor\",\n\t\t\t\"Create New Terminal in Editor Area\",\n\t\t),\n\t\trun: async (c, _, args) => {\n\t\t\tconst options =\n\t\t\t\tisObject(args) && \"location\" in args\n\t\t\t\t\t? (args as ICreateTerminalOptions)\n\t\t\t\t\t: { location: TerminalLocation.Editor };\n\t\t\tconst instance = await c.service.createTerminal(options);\n\t\t\tawait instance.focusWhenReady();\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.CreateTerminalEditorSameGroup,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.createTerminalEditor\",\n\t\t\t\"Create New Terminal in Editor Area\",\n\t\t),\n\t\tf1: false,\n\t\trun: async (c, accessor, args) => {\n\t\t\t// Force the editor into the same editor group if it's locked. This command is only ever\n\t\t\t// called when a terminal is the active editor\n\t\t\tconst editorGroupsService = accessor.get(IEditorGroupsService);\n\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\tlocation: {\n\t\t\t\t\tviewColumn: editorGroupToColumn(\n\t\t\t\t\t\teditorGroupsService,\n\t\t\t\t\t\teditorGroupsService.activeGroup,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t\tawait instance.focusWhenReady();\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.CreateTerminalEditorSide,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.createTerminalEditorSide\",\n\t\t\t\"Create New Terminal in Editor Area to the Side\",\n\t\t),\n\t\trun: async (c) => {\n\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\tlocation: { viewColumn: SIDE_GROUP },\n\t\t\t});\n\t\t\tawait instance.focusWhenReady();\n\t\t},\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.MoveToEditor,\n\t\ttitle: terminalStrings.moveToEditor,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\tactiveInstanceType: \"view\",\n\t\trun: (instance, c) => c.service.moveToEditor(instance),\n\t\trunAfter: (instances) => instances.at(-1)?.focus(),\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.MoveIntoNewWindow,\n\t\ttitle: terminalStrings.moveIntoNewWindow,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\trun: (instance, c) => c.service.moveIntoNewEditor(instance),\n\t\trunAfter: (instances) => instances.at(-1)?.focus(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.MoveToTerminalPanel,\n\t\ttitle: terminalStrings.moveToTerminalPanel,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_editorActive,\n\t\trun: (c, _, args) => {\n\t\t\tconst source =\n\t\t\t\ttoOptionalUri(args) ?? c.editorService.activeInstance;\n\t\t\tif (source) {\n\t\t\t\tc.service.moveToTerminalView(source);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusPreviousPane,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.focusPreviousPane\",\n\t\t\t\"Focus Previous Terminal in Terminal Group\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Alt | KeyCode.LeftArrow,\n\t\t\tsecondary: [KeyMod.Alt | KeyCode.UpArrow],\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\t\t\t\tsecondary: [KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.UpArrow],\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c) => {\n\t\t\tc.groupService.activeGroup?.focusPreviousPane();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusNextPane,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.focusNextPane\",\n\t\t\t\"Focus Next Terminal in Terminal Group\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Alt | KeyCode.RightArrow,\n\t\t\tsecondary: [KeyMod.Alt | KeyCode.DownArrow],\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.RightArrow,\n\t\t\t\tsecondary: [KeyMod.Alt | KeyMod.CtrlCmd | KeyCode.DownArrow],\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c) => {\n\t\t\tc.groupService.activeGroup?.focusNextPane();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.RunRecentCommand,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.runRecentCommand\",\n\t\t\t\"Run Recent Command...\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: [\n\t\t\t{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyR,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tCONTEXT_ACCESSIBILITY_MODE_ENABLED,\n\t\t\t\t\tContextKeyExpr.or(\n\t\t\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\taccessibleViewIsShown,\n\t\t\t\t\t\t\taccessibleViewCurrentProviderId.isEqualTo(\n\t\t\t\t\t\t\t\tAccessibleViewProviderId.Terminal,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t},\n\t\t\t{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyR,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyR },\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\t\tCONTEXT_ACCESSIBILITY_MODE_ENABLED.negate(),\n\t\t\t\t),\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t},\n\t\t],\n\t\trun: async (activeInstance, c) => {\n\t\t\tawait activeInstance.runRecent(\"command\");\n\t\t\tif (activeInstance?.target === TerminalLocation.Editor) {\n\t\t\t\tawait c.editorService.revealActiveEditor();\n\t\t\t} else {\n\t\t\t\tawait c.groupService.showPanel(false);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.CopyLastCommand,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.copyLastCommand\",\n\t\t\t\"Copy Last Command\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c, accessor) => {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst commands = instance.capabilities.get(\n\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t)?.commands;\n\t\t\tif (!commands || commands.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst command = commands[commands.length - 1];\n\t\t\tif (!command.command) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait clipboardService.writeText(command.command);\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.CopyLastCommandOutput,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.copyLastCommandOutput\",\n\t\t\t\"Copy Last Command Output\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c, accessor) => {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst commands = instance.capabilities.get(\n\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t)?.commands;\n\t\t\tif (!commands || commands.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst command = commands[commands.length - 1];\n\t\t\tif (!command?.hasOutput()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst output = command.getOutput();\n\t\t\tif (isString(output)) {\n\t\t\t\tawait clipboardService.writeText(output);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.CopyLastCommandAndLastCommandOutput,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.copyLastCommandAndOutput\",\n\t\t\t\"Copy Last Command and Output\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c, accessor) => {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst commands = instance.capabilities.get(\n\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t)?.commands;\n\t\t\tif (!commands || commands.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst command = commands[commands.length - 1];\n\t\t\tif (!command?.hasOutput()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst output = command.getOutput();\n\t\t\tif (isString(output)) {\n\t\t\t\tawait clipboardService.writeText(\n\t\t\t\t\t`${command.command !== \"\" ? command.command + \"\\n\" : \"\"}${output}`,\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.GoToRecentDirectory,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.goToRecentDirectory\",\n\t\t\t\"Go to Recent Directory...\",\n\t\t),\n\t\tmetadata: {\n\t\t\tdescription: localize2(\n\t\t\t\t\"goToRecentDirectory.metadata\",\n\t\t\t\t\"Goes to a recent folder\",\n\t\t\t),\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyG,\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\trun: async (activeInstance, c) => {\n\t\t\tawait activeInstance.runRecent(\"cwd\");\n\t\t\tif (activeInstance?.target === TerminalLocation.Editor) {\n\t\t\t\tawait c.editorService.revealActiveEditor();\n\t\t\t} else {\n\t\t\t\tawait c.groupService.showPanel(false);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneLeft,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.resizePaneLeft\",\n\t\t\t\"Resize Terminal Left\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tlinux: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.LeftArrow,\n\t\t\t},\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.LeftArrow,\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Left),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneRight,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.resizePaneRight\",\n\t\t\t\"Resize Terminal Right\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tlinux: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.RightArrow,\n\t\t\t},\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.RightArrow,\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Right),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneUp,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.resizePaneUp\",\n\t\t\t\"Resize Terminal Up\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.UpArrow },\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Up),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ResizePaneDown,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.resizePaneDown\",\n\t\t\t\"Resize Terminal Down\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.DownArrow,\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.activeGroup?.resizePane(Direction.Down),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Focus,\n\t\ttitle: terminalStrings.focus,\n\t\tkeybinding: {\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_ACCESSIBILITY_MODE_ENABLED,\n\t\t\t\taccessibleViewOnLastLine,\n\t\t\t\taccessibleViewCurrentProviderId.isEqualTo(\n\t\t\t\t\tAccessibleViewProviderId.Terminal,\n\t\t\t\t),\n\t\t\t),\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c) => {\n\t\t\tconst instance =\n\t\t\t\tc.service.activeInstance ||\n\t\t\t\t(await c.service.createTerminal({\n\t\t\t\t\tlocation: TerminalLocation.Panel,\n\t\t\t\t}));\n\t\t\tif (!instance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tc.service.setActiveInstance(instance);\n\t\t\tfocusActiveTerminal(instance, c);\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusTabs,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.focus.tabsView\",\n\t\t\t\"Focus Terminal Tabs View\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Backslash,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\tTerminalContextKeys.tabsFocus,\n\t\t\t\tTerminalContextKeys.focus,\n\t\t\t),\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c) => c.groupService.focusTabs(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusNext,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.focusNext\",\n\t\t\t\"Focus Next Terminal Group\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageDown,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.BracketRight,\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\tTerminalContextKeys.editorFocus.negate(),\n\t\t\t),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\trun: async (c) => {\n\t\t\tc.groupService.setActiveGroupToNext();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusPrevious,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.focusPrevious\",\n\t\t\t\"Focus Previous Terminal Group\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.PageUp,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.BracketLeft,\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\tTerminalContextKeys.editorFocus.negate(),\n\t\t\t),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\trun: async (c) => {\n\t\t\tc.groupService.setActiveGroupToPrevious();\n\t\t\tawait c.groupService.showPanel(true);\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.RunSelectedText,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.runSelectedText\",\n\t\t\t\"Run Selected Text In Active Terminal\",\n\t\t),\n\t\trun: async (c, accessor) => {\n\t\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\t\tconst editor = codeEditorService.getActiveCodeEditor();\n\t\t\tif (!editor || !editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst instance = await c.service.getActiveOrCreateInstance({\n\t\t\t\tacceptsInput: true,\n\t\t\t});\n\t\t\tconst selection = editor.getSelection();\n\t\t\tlet text: string;\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\ttext = editor\n\t\t\t\t\t.getModel()\n\t\t\t\t\t.getLineContent(selection.selectionStartLineNumber)\n\t\t\t\t\t.trim();\n\t\t\t} else {\n\t\t\t\tconst endOfLinePreference = isWindows\n\t\t\t\t\t? EndOfLinePreference.LF\n\t\t\t\t\t: EndOfLinePreference.CRLF;\n\t\t\t\ttext = editor\n\t\t\t\t\t.getModel()\n\t\t\t\t\t.getValueInRange(selection, endOfLinePreference);\n\t\t\t}\n\t\t\tinstance.sendText(text, true, true);\n\t\t\tawait c.service.revealActiveTerminal(true);\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.RunActiveFile,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.runActiveFile\",\n\t\t\t\"Run Active File In Active Terminal\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor) => {\n\t\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst workbenchEnvironmentService = accessor.get(\n\t\t\t\tIWorkbenchEnvironmentService,\n\t\t\t);\n\n\t\t\tconst editor = codeEditorService.getActiveCodeEditor();\n\t\t\tif (!editor || !editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst instance = await c.service.getActiveOrCreateInstance({\n\t\t\t\tacceptsInput: true,\n\t\t\t});\n\t\t\tconst isRemote = instance\n\t\t\t\t? instance.isRemote\n\t\t\t\t: workbenchEnvironmentService.remoteAuthority\n\t\t\t\t\t? true\n\t\t\t\t\t: false;\n\t\t\tconst uri = editor.getModel().uri;\n\t\t\tif (\n\t\t\t\t(!isRemote &&\n\t\t\t\t\turi.scheme !== Schemas.file &&\n\t\t\t\t\turi.scheme !== Schemas.vscodeUserData) ||\n\t\t\t\t(isRemote && uri.scheme !== Schemas.vscodeRemote)\n\t\t\t) {\n\t\t\t\tnotificationService.warn(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"workbench.action.terminal.runActiveFile.noFile\",\n\t\t\t\t\t\t\"Only files on disk can be run in the terminal\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// TODO: Convert this to ctrl+c, ctrl+v for pwsh?\n\t\t\tawait instance.sendPath(uri, true);\n\t\t\treturn c.groupService.showPanel();\n\t\t},\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollDownLine,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.scrollDown\",\n\t\t\t\"Scroll Down (Line)\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.PageDown,\n\t\t\tlinux: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\t},\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollDownLine(),\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollDownPage,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.scrollDownPage\",\n\t\t\t\"Scroll Down (Page)\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageDown,\n\t\t\tmac: { primary: KeyCode.PageDown },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollDownPage(),\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollToBottom,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.scrollToBottom\",\n\t\t\t\"Scroll to Bottom\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.End,\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.End },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollToBottom(),\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollUpLine,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.scrollUp\",\n\t\t\t\"Scroll Up (Line)\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.PageUp,\n\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollUpLine(),\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollUpPage,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.scrollUpPage\",\n\t\t\t\"Scroll Up (Page)\",\n\t\t),\n\t\tf1: true,\n\t\tcategory,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Shift | KeyCode.PageUp,\n\t\t\tmac: { primary: KeyCode.PageUp },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollUpPage(),\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ScrollToTop,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.scrollToTop\",\n\t\t\t\"Scroll to Top\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Home,\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.Home },\n\t\t\twhen: sharedWhenClause.focusInAny_and_normalBuffer,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => xterm.scrollToTop(),\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.ClearSelection,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.clearSelection\",\n\t\t\t\"Clear Selection\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyCode.Escape,\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tTerminalContextKeys.focusInAny,\n\t\t\t\tTerminalContextKeys.textSelected,\n\t\t\t\tTerminalContextKeys.notFindVisible,\n\t\t\t),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (xterm) => {\n\t\t\tif (xterm.hasSelection()) {\n\t\t\t\txterm.clearSelection();\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeIcon,\n\t\ttitle: terminalStrings.changeIcon,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, _, args: unknown) =>\n\t\t\tgetResourceOrActiveInstance(c, args)?.changeIcon(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeIconActiveTab,\n\t\ttitle: terminalStrings.changeIcon,\n\t\tf1: false,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_singularSelection,\n\t\trun: async (c, accessor, args) => {\n\t\t\tlet icon: TerminalIcon | undefined;\n\t\t\tif (c.groupService.lastAccessedMenu === \"inline-tab\") {\n\t\t\t\tgetResourceOrActiveInstance(c, args)?.changeIcon();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const terminal of getSelectedInstances(accessor) ?? []) {\n\t\t\t\ticon = await terminal.changeIcon(icon);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeColor,\n\t\ttitle: terminalStrings.changeColor,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, _, args) =>\n\t\t\tgetResourceOrActiveInstance(c, args)?.changeColor(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ChangeColorActiveTab,\n\t\ttitle: terminalStrings.changeColor,\n\t\tf1: false,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_singularSelection,\n\t\trun: async (c, accessor, args) => {\n\t\t\tlet color: string | undefined;\n\t\t\tlet i = 0;\n\t\t\tif (c.groupService.lastAccessedMenu === \"inline-tab\") {\n\t\t\t\tgetResourceOrActiveInstance(c, args)?.changeColor();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const terminal of getSelectedInstances(accessor) ?? []) {\n\t\t\t\tconst skipQuickPick = i !== 0;\n\t\t\t\t// Always show the quickpick on the first iteration\n\t\t\t\tcolor = await terminal.changeColor(color, skipQuickPick);\n\t\t\t\ti++;\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Rename,\n\t\ttitle: terminalStrings.rename,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, accessor, args) => renameWithQuickPick(c, accessor, args),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.RenameActiveTab,\n\t\ttitle: terminalStrings.rename,\n\t\tf1: false,\n\t\tkeybinding: {\n\t\t\tprimary: KeyCode.F2,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.tabsFocus),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_singularSelection,\n\t\trun: async (c, accessor) => {\n\t\t\tconst terminalGroupService = accessor.get(ITerminalGroupService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst instances = getSelectedInstances(accessor);\n\t\t\tconst firstInstance = instances?.[0];\n\t\t\tif (!firstInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (terminalGroupService.lastAccessedMenu === \"inline-tab\") {\n\t\t\t\treturn renameWithQuickPick(c, accessor, firstInstance);\n\t\t\t}\n\n\t\t\tc.service.setEditingTerminal(firstInstance);\n\t\t\tc.service.setEditable(firstInstance, {\n\t\t\t\tvalidationMessage: (value) => validateTerminalName(value),\n\t\t\t\tonFinish: async (value, success) => {\n\t\t\t\t\t// Cancel editing first as instance.rename will trigger a rerender automatically\n\t\t\t\t\tc.service.setEditable(firstInstance, null);\n\t\t\t\t\tc.service.setEditingTerminal(undefined);\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tconst promises: Promise<void>[] = [];\n\t\t\t\t\t\tfor (const instance of instances) {\n\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\tawait instance.rename(value);\n\t\t\t\t\t\t\t\t})(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait Promise.all(promises);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tnotificationService.error(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.DetachSession,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.detachSession\",\n\t\t\t\"Detach Session\",\n\t\t),\n\t\trun: (activeInstance) =>\n\t\t\tactiveInstance.detachProcessAndDispose(TerminalExitReason.User),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.AttachToSession,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.attachToSession\",\n\t\t\t\"Attach to Session\",\n\t\t),\n\t\trun: async (c, accessor) => {\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst labelService = accessor.get(ILabelService);\n\t\t\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\t\tconst remoteAuthority =\n\t\t\t\tremoteAgentService.getConnection()?.remoteAuthority ??\n\t\t\t\tundefined;\n\t\t\tconst backend = await accessor\n\t\t\t\t.get(ITerminalInstanceService)\n\t\t\t\t.getBackend(remoteAuthority);\n\n\t\t\tif (!backend) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`No backend registered for remote authority '${remoteAuthority}'`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst terms = await backend.listProcesses();\n\n\t\t\tbackend.reduceConnectionGraceTime();\n\n\t\t\tconst unattachedTerms = terms.filter(\n\t\t\t\t(term) => !c.service.isAttachedToTerminal(term),\n\t\t\t);\n\t\t\tconst items = unattachedTerms.map((term) => {\n\t\t\t\tconst cwdLabel = labelService.getUriLabel(URI.file(term.cwd));\n\t\t\t\treturn {\n\t\t\t\t\tlabel: term.title,\n\t\t\t\t\tdetail: term.workspaceName\n\t\t\t\t\t\t? `${term.workspaceName} \\u2E31 ${cwdLabel}`\n\t\t\t\t\t\t: cwdLabel,\n\t\t\t\t\tdescription: term.pid ? String(term.pid) : \"\",\n\t\t\t\t\tterm,\n\t\t\t\t};\n\t\t\t});\n\t\t\tif (items.length === 0) {\n\t\t\t\tnotificationService.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noUnattachedTerminals\",\n\t\t\t\t\t\t\"There are no unattached terminals to attach to\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selected = await quickInputService.pick<IRemoteTerminalPick>(\n\t\t\t\titems,\n\t\t\t\t{ canPickMany: false },\n\t\t\t);\n\t\t\tif (selected) {\n\t\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\t\tconfig: { attachPersistentProcess: selected.term },\n\t\t\t\t});\n\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\tawait focusActiveTerminal(instance, c);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.QuickOpenTerm,\n\t\ttitle: localize2(\"quickAccessTerminal\", \"Switch Active Terminal\"),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, accessor) =>\n\t\t\taccessor\n\t\t\t\t.get(IQuickInputService)\n\t\t\t\t.quickAccess.show(TerminalQuickAccessProvider.PREFIX),\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.ScrollToPreviousCommand,\n\t\ttitle: terminalStrings.scrollToPreviousCommand,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\tCONTEXT_ACCESSIBILITY_MODE_ENABLED.negate(),\n\t\t\t),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\ticon: Codicon.arrowUp,\n\t\tmenu: [\n\t\t\t{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: \"navigation\",\n\t\t\t\torder: 4,\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", TERMINAL_VIEW_ID),\n\t\t\t\tisHiddenByDefault: true,\n\t\t\t},\n\t\t],\n\t\trun: (activeInstance) =>\n\t\t\tactiveInstance.xterm?.markTracker.scrollToPreviousMark(\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tactiveInstance.capabilities.has(\n\t\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t\t),\n\t\t\t),\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.ScrollToNextCommand,\n\t\ttitle: terminalStrings.scrollToNextCommand,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\tCONTEXT_ACCESSIBILITY_MODE_ENABLED.negate(),\n\t\t\t),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\ticon: Codicon.arrowDown,\n\t\tmenu: [\n\t\t\t{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: \"navigation\",\n\t\t\t\torder: 4,\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", TERMINAL_VIEW_ID),\n\t\t\t\tisHiddenByDefault: true,\n\t\t\t},\n\t\t],\n\t\trun: (activeInstance) => {\n\t\t\tactiveInstance.xterm?.markTracker.scrollToNextMark();\n\t\t\tactiveInstance.focus();\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SelectToPreviousCommand,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.selectToPreviousCommand\",\n\t\t\t\"Select To Previous Command\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow,\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (activeInstance) => {\n\t\t\tactiveInstance.xterm?.markTracker.selectToPreviousMark();\n\t\t\tactiveInstance.focus();\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SelectToNextCommand,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.selectToNextCommand\",\n\t\t\t\"Select To Next Command\",\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow,\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (activeInstance) => {\n\t\t\tactiveInstance.xterm?.markTracker.selectToNextMark();\n\t\t\tactiveInstance.focus();\n\t\t},\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.SelectToPreviousLine,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.selectToPreviousLine\",\n\t\t\t\"Select To Previous Line\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (xterm, _, instance) => {\n\t\t\txterm.markTracker.selectToPreviousLine();\n\t\t\t// prefer to call focus on the TerminalInstance for additional accessibility triggers\n\t\t\t(instance || xterm).focus();\n\t\t},\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.SelectToNextLine,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.selectToNextLine\",\n\t\t\t\"Select To Next Line\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (xterm, _, instance) => {\n\t\t\txterm.markTracker.selectToNextLine();\n\t\t\t// prefer to call focus on the TerminalInstance for additional accessibility triggers\n\t\t\t(instance || xterm).focus();\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SendSequence,\n\t\ttitle: terminalStrings.sendSequence,\n\t\tf1: false,\n\t\tmetadata: {\n\t\t\tdescription: terminalStrings.sendSequence.value,\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"args\",\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\trequired: [\"text\"],\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\ttext: {\n\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\"sendSequence\",\n\t\t\t\t\t\t\t\t\t\"The sequence of text to send to the terminal\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\trun: (c, accessor, args) => terminalSendSequenceCommand(accessor, args),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.NewWithCwd,\n\t\ttitle: terminalStrings.newWithCwd,\n\t\tmetadata: {\n\t\t\tdescription: terminalStrings.newWithCwd.value,\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"args\",\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\trequired: [\"cwd\"],\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tcwd: {\n\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\"workbench.action.terminal.newWithCwd.cwd\",\n\t\t\t\t\t\t\t\t\t\"The directory to start the terminal at\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\trun: async (c, _, args) => {\n\t\t\tconst cwd =\n\t\t\t\tisObject(args) && \"cwd\" in args\n\t\t\t\t\t? toOptionalString(args.cwd)\n\t\t\t\t\t: undefined;\n\t\t\tconst instance = await c.service.createTerminal({ cwd });\n\t\t\tif (!instance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tc.service.setActiveInstance(instance);\n\t\t\tawait focusActiveTerminal(instance, c);\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.RenameWithArgs,\n\t\ttitle: terminalStrings.renameWithArgs,\n\t\tmetadata: {\n\t\t\tdescription: terminalStrings.renameWithArgs.value,\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"args\",\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\trequired: [\"name\"],\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\"workbench.action.terminal.renameWithArg.name\",\n\t\t\t\t\t\t\t\t\t\"The new name for the terminal\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tminLength: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (activeInstance, c, accessor, args) => {\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst name =\n\t\t\t\tisObject(args) && \"name\" in args\n\t\t\t\t\t? toOptionalString(args.name)\n\t\t\t\t\t: undefined;\n\t\t\tif (!name) {\n\t\t\t\tnotificationService.warn(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"workbench.action.terminal.renameWithArg.noName\",\n\t\t\t\t\t\t\"No name argument provided\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactiveInstance.rename(name);\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.Relaunch,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.relaunch\",\n\t\t\t\"Relaunch Active Terminal\",\n\t\t),\n\t\trun: (activeInstance) => activeInstance.relaunch(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Split,\n\t\ttitle: terminalStrings.split,\n\t\tprecondition: ContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.webExtensionContributedProfile,\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Digit5,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backslash,\n\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Digit5],\n\t\t\t},\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t},\n\t\ticon: Codicon.splitHorizontal,\n\t\trun: async (c, accessor, args) => {\n\t\t\tconst optionsOrProfile = isObject(args)\n\t\t\t\t? (args as ICreateTerminalOptions | ITerminalProfile)\n\t\t\t\t: undefined;\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst workspaceContextService = accessor.get(\n\t\t\t\tIWorkspaceContextService,\n\t\t\t);\n\t\t\tconst options = convertOptionsOrProfileToOptions(optionsOrProfile);\n\t\t\tconst activeInstance = (\n\t\t\t\tawait c.service.getInstanceHost(options?.location)\n\t\t\t).activeInstance;\n\t\t\tif (!activeInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst cwd = await getCwdForSplit(\n\t\t\t\tactiveInstance,\n\t\t\t\tworkspaceContextService.getWorkspace().folders,\n\t\t\t\tcommandService,\n\t\t\t\tc.configService,\n\t\t\t);\n\t\t\tif (cwd === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\tlocation: { parentTerminal: activeInstance },\n\t\t\t\tconfig: options?.config,\n\t\t\t\tcwd,\n\t\t\t});\n\t\t\tawait focusActiveTerminal(instance, c);\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SplitActiveTab,\n\t\ttitle: terminalStrings.split,\n\t\tf1: false,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Digit5,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backslash,\n\t\t\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Digit5],\n\t\t\t},\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.tabsFocus,\n\t\t},\n\t\trun: async (c, accessor) => {\n\t\t\tconst instances = getSelectedInstances(accessor);\n\t\t\tif (instances) {\n\t\t\t\tconst promises: Promise<void>[] = [];\n\t\t\t\tfor (const t of instances) {\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tawait c.service.createTerminal({\n\t\t\t\t\t\t\t\tlocation: { parentTerminal: t },\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait c.groupService.showPanel(true);\n\t\t\t\t\t\t})(),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tawait Promise.all(promises);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.Unsplit,\n\t\ttitle: terminalStrings.unsplit,\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (instance, c) => {\n\t\t\tconst group = c.groupService.getGroupForInstance(instance);\n\t\t\tif (group && group?.terminalInstances.length > 1) {\n\t\t\t\tc.groupService.unsplitInstance(instance);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.JoinActiveTab,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.joinInstance\",\n\t\t\t\"Join Terminals\",\n\t\t),\n\t\tprecondition: ContextKeyExpr.and(\n\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\tTerminalContextKeys.tabsSingularSelection.toNegated(),\n\t\t),\n\t\trun: async (c, accessor) => {\n\t\t\tconst instances = getSelectedInstances(accessor);\n\t\t\tif (instances && instances.length > 1) {\n\t\t\t\tc.groupService.joinInstances(instances);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Join,\n\t\ttitle: localize2(\"workbench.action.terminal.join\", \"Join Terminals...\"),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor) => {\n\t\t\tconst themeService = accessor.get(IThemeService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\t\tconst picks: ITerminalQuickPickItem[] = [];\n\t\t\tif (c.groupService.instances.length <= 1) {\n\t\t\t\tnotificationService.warn(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"workbench.action.terminal.join.insufficientTerminals\",\n\t\t\t\t\t\t\"Insufficient terminals for the join action\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst otherInstances = c.groupService.instances.filter(\n\t\t\t\t(i) =>\n\t\t\t\t\ti.instanceId !== c.groupService.activeInstance?.instanceId,\n\t\t\t);\n\t\t\tfor (const terminal of otherInstances) {\n\t\t\t\tconst group = c.groupService.getGroupForInstance(terminal);\n\t\t\t\tif (group?.terminalInstances.length === 1) {\n\t\t\t\t\tconst iconId = getIconId(accessor, terminal);\n\t\t\t\t\tconst label = `$(${iconId}): ${terminal.title}`;\n\t\t\t\t\tconst iconClasses: string[] = [];\n\t\t\t\t\tconst colorClass = getColorClass(terminal);\n\t\t\t\t\tif (colorClass) {\n\t\t\t\t\t\ticonClasses.push(colorClass);\n\t\t\t\t\t}\n\t\t\t\t\tconst uriClasses = getUriClasses(\n\t\t\t\t\t\tterminal,\n\t\t\t\t\t\tthemeService.getColorTheme().type,\n\t\t\t\t\t);\n\t\t\t\t\tif (uriClasses) {\n\t\t\t\t\t\ticonClasses.push(...uriClasses);\n\t\t\t\t\t}\n\t\t\t\t\tpicks.push({\n\t\t\t\t\t\tterminal,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\ticonClasses,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (picks.length === 0) {\n\t\t\t\tnotificationService.warn(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"workbench.action.terminal.join.onlySplits\",\n\t\t\t\t\t\t\"All terminals are joined already\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst result = await quickInputService.pick(picks, {});\n\t\t\tif (result) {\n\t\t\t\tc.groupService.joinInstances([\n\t\t\t\t\tresult.terminal,\n\t\t\t\t\tc.groupService.activeInstance!,\n\t\t\t\t]);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SplitInActiveWorkspace,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.splitInActiveWorkspace\",\n\t\t\t\"Split Terminal (In Active Workspace)\",\n\t\t),\n\t\trun: async (instance, c) => {\n\t\t\tconst newInstance = await c.service.createTerminal({\n\t\t\t\tlocation: { parentTerminal: instance },\n\t\t\t});\n\t\t\tif (newInstance?.target !== TerminalLocation.Editor) {\n\t\t\t\tawait c.groupService.showPanel(true);\n\t\t\t}\n\t\t},\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.SelectAll,\n\t\ttitle: localize2(\"workbench.action.terminal.selectAll\", \"Select All\"),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: [\n\t\t\t{\n\t\t\t\t// Don't use ctrl+a by default as that would override the common go to start\n\t\t\t\t// of prompt shell binding\n\t\t\t\tprimary: 0,\n\t\t\t\t// Technically this doesn't need to be here as it will fall back to this\n\t\t\t\t// behavior anyway when handed to xterm.js, having this handled by VS Code\n\t\t\t\t// makes it easier for users to see how it works though.\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyA },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: TerminalContextKeys.focusInAny,\n\t\t\t},\n\t\t],\n\t\trun: (xterm) => xterm.selectAll(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.New,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.new\",\n\t\t\t\"Create New Terminal\",\n\t\t),\n\t\tprecondition: ContextKeyExpr.or(\n\t\t\tTerminalContextKeys.processSupported,\n\t\t\tTerminalContextKeys.webExtensionContributedProfile,\n\t\t),\n\t\ticon: newTerminalIcon,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Backquote,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Backquote },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t},\n\t\trun: async (c, accessor, args) => {\n\t\t\tlet eventOrOptions = isObject(args)\n\t\t\t\t? (args as MouseEvent | ICreateTerminalOptions)\n\t\t\t\t: undefined;\n\t\t\tconst workspaceContextService = accessor.get(\n\t\t\t\tIWorkspaceContextService,\n\t\t\t);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\tif (\n\t\t\t\teventOrOptions &&\n\t\t\t\tisMouseEvent(eventOrOptions) &&\n\t\t\t\t(eventOrOptions.altKey || eventOrOptions.ctrlKey)\n\t\t\t) {\n\t\t\t\tawait c.service.createTerminal({\n\t\t\t\t\tlocation: { splitActiveTerminal: true },\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (c.service.isProcessSupportRegistered) {\n\t\t\t\teventOrOptions =\n\t\t\t\t\t!eventOrOptions || isMouseEvent(eventOrOptions)\n\t\t\t\t\t\t? {}\n\t\t\t\t\t\t: eventOrOptions;\n\n\t\t\t\tlet instance: ITerminalInstance | undefined;\n\t\t\t\tif (folders.length <= 1) {\n\t\t\t\t\t// Allow terminal service to handle the path when there is only a\n\t\t\t\t\t// single root\n\t\t\t\t\tinstance = await c.service.createTerminal(eventOrOptions);\n\t\t\t\t} else {\n\t\t\t\t\tconst cwd = (await pickTerminalCwd(accessor))?.cwd;\n\t\t\t\t\tif (!cwd) {\n\t\t\t\t\t\t// Don't create the instance if the workspace picker was canceled\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\teventOrOptions.cwd = cwd;\n\t\t\t\t\tinstance = await c.service.createTerminal(eventOrOptions);\n\t\t\t\t}\n\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\tawait focusActiveTerminal(instance, c);\n\t\t\t} else if (c.profileService.contributedProfiles.length > 0) {\n\t\t\t\tcommandService.executeCommand(TerminalCommandId.NewWithProfile);\n\t\t\t} else {\n\t\t\t\tcommandService.executeCommand(TerminalCommandId.Toggle);\n\t\t\t}\n\t\t},\n\t});\n\n\tasync function killInstance(\n\t\tc: ITerminalServicesCollection,\n\t\tinstance: ITerminalInstance | undefined,\n\t): Promise<void> {\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\t\tawait c.service.safeDisposeTerminal(instance);\n\t\tif (c.groupService.instances.length > 0) {\n\t\t\tawait c.groupService.showPanel(true);\n\t\t}\n\t}\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.Kill,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.kill\",\n\t\t\t\"Kill the Active Terminal Instance\",\n\t\t),\n\t\tprecondition: ContextKeyExpr.or(\n\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\tTerminalContextKeys.isOpen,\n\t\t),\n\t\ticon: killTerminalIcon,\n\t\trun: async (c) => killInstance(c, c.groupService.activeInstance),\n\t});\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillViewOrEditor,\n\t\ttitle: terminalStrings.kill,\n\t\tf1: false, // This is an internal command used for context menus\n\t\tprecondition: ContextKeyExpr.or(\n\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\tTerminalContextKeys.isOpen,\n\t\t),\n\t\trun: async (c) => killInstance(c, c.service.activeInstance),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillAll,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.killAll\",\n\t\t\t\"Kill All Terminals\",\n\t\t),\n\t\tprecondition: ContextKeyExpr.or(\n\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\tTerminalContextKeys.isOpen,\n\t\t),\n\t\ticon: Codicon.trash,\n\t\trun: async (c) => {\n\t\t\tconst disposePromises: Promise<void>[] = [];\n\t\t\tfor (const instance of c.service.instances) {\n\t\t\t\tdisposePromises.push(c.service.safeDisposeTerminal(instance));\n\t\t\t}\n\t\t\tawait Promise.all(disposePromises);\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillEditor,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.killEditor\",\n\t\t\t\"Kill the Active Terminal in Editor Area\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyW,\n\t\t\twin: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.F4,\n\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.KeyW],\n\t\t\t},\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\tTerminalContextKeys.editorFocus,\n\t\t\t),\n\t\t},\n\t\trun: (c, accessor) =>\n\t\t\taccessor\n\t\t\t\t.get(ICommandService)\n\t\t\t\t.executeCommand(CLOSE_EDITOR_COMMAND_ID),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.KillActiveTab,\n\t\ttitle: terminalStrings.kill,\n\t\tf1: false,\n\t\tprecondition: ContextKeyExpr.or(\n\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\tTerminalContextKeys.isOpen,\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyCode.Delete,\n\t\t\tmac: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t\t\t\tsecondary: [KeyCode.Delete],\n\t\t\t},\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.tabsFocus,\n\t\t},\n\t\trun: async (c, accessor) => {\n\t\t\tconst disposePromises: Promise<void>[] = [];\n\t\t\tfor (const terminal of getSelectedInstances(accessor, true) ?? []) {\n\t\t\t\tdisposePromises.push(c.service.safeDisposeTerminal(terminal));\n\t\t\t}\n\t\t\tawait Promise.all(disposePromises);\n\t\t\tc.groupService.focusTabs();\n\t\t},\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.FocusHover,\n\t\ttitle: terminalStrings.focusHover,\n\t\tprecondition: ContextKeyExpr.or(\n\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\tTerminalContextKeys.isOpen,\n\t\t),\n\t\tkeybinding: {\n\t\t\tprimary: KeyChord(\n\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyK,\n\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyI,\n\t\t\t),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\tTerminalContextKeys.tabsFocus,\n\t\t\t\tTerminalContextKeys.focus,\n\t\t\t),\n\t\t},\n\t\trun: (c) => c.groupService.focusHover(),\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.Clear,\n\t\ttitle: localize2(\"workbench.action.terminal.clear\", \"Clear\"),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\tkeybinding: [\n\t\t\t{\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyK },\n\t\t\t\t// Weight is higher than work workbench contributions so the keybinding remains\n\t\t\t\t// highest priority when chords are registered afterwards\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t\t\t\t// Disable the keybinding when accessibility mode is enabled as chords include\n\t\t\t\t// important screen reader keybindings such as cmd+k, cmd+i to show the hover\n\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\t\t\tCONTEXT_ACCESSIBILITY_MODE_ENABLED.negate(),\n\t\t\t\t\t),\n\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\tCONTEXT_ACCESSIBILITY_MODE_ENABLED,\n\t\t\t\t\t\taccessibleViewIsShown,\n\t\t\t\t\t\taccessibleViewCurrentProviderId.isEqualTo(\n\t\t\t\t\t\t\tAccessibleViewProviderId.Terminal,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t},\n\t\t],\n\t\trun: (activeInstance) => activeInstance.clearBuffer(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SelectDefaultProfile,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.selectDefaultShell\",\n\t\t\t\"Select Default Profile\",\n\t\t),\n\t\trun: (c) => c.service.showProfileQuickPick(\"setDefault\"),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ConfigureTerminalSettings,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.openSettings\",\n\t\t\t\"Configure Terminal Settings\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: (c, accessor) =>\n\t\t\taccessor\n\t\t\t\t.get(IPreferencesService)\n\t\t\t\t.openSettings({\n\t\t\t\t\tjsonEditor: false,\n\t\t\t\t\tquery: \"@feature:terminal\",\n\t\t\t\t}),\n\t});\n\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.SetDimensions,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.setFixedDimensions\",\n\t\t\t\"Set Fixed Dimensions\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\trun: (activeInstance) => activeInstance.setFixedDimensions(),\n\t});\n\n\tregisterContextualInstanceAction({\n\t\tid: TerminalCommandId.SizeToContentWidth,\n\t\ttitle: terminalStrings.toggleSizeToContentWidth,\n\t\tprecondition: sharedWhenClause.terminalAvailable_and_opened,\n\t\tkeybinding: {\n\t\t\tprimary: KeyMod.Alt | KeyCode.KeyZ,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.focus,\n\t\t},\n\t\trun: (instance) => instance.toggleSizeToContentWidth(),\n\t});\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.ClearPreviousSessionHistory,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.clearPreviousSessionHistory\",\n\t\t\t\"Clear Previous Session History\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor) => {\n\t\t\tgetCommandHistory(accessor).clear();\n\t\t\tclearShellFileHistory();\n\t\t},\n\t});\n\n\t// Some commands depend on platform features\n\tif (BrowserFeatures.clipboard.writeText) {\n\t\tregisterActiveXtermAction({\n\t\t\tid: TerminalCommandId.CopySelection,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.terminal.copySelection\",\n\t\t\t\t\"Copy Selection\",\n\t\t\t),\n\t\t\t// TODO: Why is copy still showing up when text isn't selected?\n\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\t\t\tTerminalContextKeys.textSelected,\n\t\t\t\t),\n\t\t\t),\n\t\t\tkeybinding: [\n\t\t\t\t{\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC,\n\t\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyC },\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\tTerminalContextKeys.textSelected,\n\t\t\t\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t\trun: (activeInstance) => activeInstance.copySelection(),\n\t\t});\n\n\t\tregisterActiveXtermAction({\n\t\t\tid: TerminalCommandId.CopyAndClearSelection,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.terminal.copyAndClearSelection\",\n\t\t\t\t\"Copy and Clear Selection\",\n\t\t\t),\n\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\t\t\tTerminalContextKeys.textSelected,\n\t\t\t\t),\n\t\t\t),\n\t\t\tkeybinding: [\n\t\t\t\t{\n\t\t\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyC },\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\tTerminalContextKeys.textSelected,\n\t\t\t\t\t\t\tTerminalContextKeys.focus,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t\trun: async (xterm) => {\n\t\t\t\tawait xterm.copySelection();\n\t\t\t\txterm.clearSelection();\n\t\t\t},\n\t\t});\n\n\t\tregisterActiveXtermAction({\n\t\t\tid: TerminalCommandId.CopySelectionAsHtml,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.terminal.copySelectionAsHtml\",\n\t\t\t\t\"Copy Selection as HTML\",\n\t\t\t),\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\tsharedWhenClause.terminalAvailable,\n\t\t\t\t\tTerminalContextKeys.textSelected,\n\t\t\t\t),\n\t\t\t),\n\t\t\trun: (xterm) => xterm.copySelection(true),\n\t\t});\n\t}\n\n\tif (BrowserFeatures.clipboard.readText) {\n\t\tregisterActiveInstanceAction({\n\t\t\tid: TerminalCommandId.Paste,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.terminal.paste\",\n\t\t\t\t\"Paste into Active Terminal\",\n\t\t\t),\n\t\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\t\tkeybinding: [\n\t\t\t\t{\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\t\t\twin: {\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\t\t\t\tsecondary: [\n\t\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyV,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyV,\n\t\t\t\t\t},\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: TerminalContextKeys.focus,\n\t\t\t\t},\n\t\t\t],\n\t\t\trun: (activeInstance) => activeInstance.paste(),\n\t\t});\n\t}\n\n\tif (BrowserFeatures.clipboard.readText && isLinux) {\n\t\tregisterActiveInstanceAction({\n\t\t\tid: TerminalCommandId.PasteSelection,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.terminal.pasteSelection\",\n\t\t\t\t\"Paste Selection into Active Terminal\",\n\t\t\t),\n\t\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\t\tkeybinding: [\n\t\t\t\t{\n\t\t\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.Insert },\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: TerminalContextKeys.focus,\n\t\t\t\t},\n\t\t\t],\n\t\t\trun: (activeInstance) => activeInstance.pasteSelection(),\n\t\t});\n\t}\n\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.SwitchTerminal,\n\t\ttitle: localize2(\n\t\t\t\"workbench.action.terminal.switchTerminal\",\n\t\t\t\"Switch Terminal\",\n\t\t),\n\t\tprecondition: sharedWhenClause.terminalAvailable,\n\t\trun: async (c, accessor, args) => {\n\t\t\tconst item = toOptionalString(args);\n\t\t\tif (!item) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (item === switchTerminalActionViewItemSeparator) {\n\t\t\t\tc.service.refreshActiveGroup();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (item === switchTerminalShowTabsTitle) {\n\t\t\t\taccessor\n\t\t\t\t\t.get(IConfigurationService)\n\t\t\t\t\t.updateValue(TerminalSettingId.TabsEnabled, true);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst terminalIndexRe = /^([0-9]+): /;\n\t\t\tconst indexMatches = terminalIndexRe.exec(item);\n\t\t\tif (indexMatches) {\n\t\t\t\tc.groupService.setActiveGroupByIndex(\n\t\t\t\t\tNumber(indexMatches[1]) - 1,\n\t\t\t\t);\n\t\t\t\treturn c.groupService.showPanel(true);\n\t\t\t}\n\n\t\t\tconst quickSelectProfiles = c.profileService.availableProfiles;\n\n\t\t\t// Remove 'New ' from the selected item to get the profile name\n\t\t\tconst profileSelection = item.substring(4);\n\t\t\tif (quickSelectProfiles) {\n\t\t\t\tconst profile = quickSelectProfiles.find(\n\t\t\t\t\t(profile) => profile.profileName === profileSelection,\n\t\t\t\t);\n\t\t\t\tif (profile) {\n\t\t\t\t\tconst instance = await c.service.createTerminal({\n\t\t\t\t\t\tconfig: profile,\n\t\t\t\t\t});\n\t\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`No profile with name \"${profileSelection}\"`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Unmatched terminal item: \"${item}\"`);\n\t\t\t}\n\t\t},\n\t});\n}\n\ninterface IRemoteTerminalPick extends IQuickPickItem {\n\tterm: IRemoteTerminalAttachTarget;\n}\n\nfunction getSelectedInstances2(\n\taccessor: ServicesAccessor,\n\targs?: unknown,\n): ITerminalInstance[] | undefined {\n\tconst terminalService = accessor.get(ITerminalService);\n\tconst result: ITerminalInstance[] = [];\n\tconst context = parseActionArgs(args);\n\tif (context && context.length > 0) {\n\t\tfor (const instanceContext of context) {\n\t\t\tconst instance = terminalService.getInstanceFromId(\n\t\t\t\tinstanceContext.instanceId,\n\t\t\t);\n\t\t\tif (instance) {\n\t\t\t\tresult.push(instance);\n\t\t\t}\n\t\t}\n\t\tif (result.length > 0) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction getSelectedInstances(\n\taccessor: ServicesAccessor,\n\targs?: unknown,\n\targs2?: unknown,\n): ITerminalInstance[] | undefined {\n\tconst listService = accessor.get(IListService);\n\tconst terminalService = accessor.get(ITerminalService);\n\tconst terminalGroupService = accessor.get(ITerminalGroupService);\n\tconst result: ITerminalInstance[] = [];\n\n\tconst list = listService.lastFocusedList;\n\t// Get selected tab list instance(s)\n\tconst selections = list?.getSelection();\n\t// Get inline tab instance if there are not tab list selections #196578\n\tif (\n\t\tterminalGroupService.lastAccessedMenu === \"inline-tab\" &&\n\t\t!selections?.length\n\t) {\n\t\tconst instance = terminalGroupService.activeInstance;\n\t\treturn instance ? [terminalGroupService.activeInstance] : undefined;\n\t}\n\n\tif (!list || !selections) {\n\t\treturn undefined;\n\t}\n\tconst focused = list.getFocus();\n\n\tif (focused.length === 1 && !selections.includes(focused[0])) {\n\t\t// focused length is always a max of 1\n\t\t// if the focused one is not in the selected list, return that item\n\t\tresult.push(\n\t\t\tterminalService.getInstanceFromIndex(\n\t\t\t\tfocused[0],\n\t\t\t) as ITerminalInstance,\n\t\t);\n\t\treturn result;\n\t}\n\n\t// multi-select\n\tfor (const selection of selections) {\n\t\tresult.push(\n\t\t\tterminalService.getInstanceFromIndex(\n\t\t\t\tselection,\n\t\t\t) as ITerminalInstance,\n\t\t);\n\t}\n\treturn result.filter((r) => !!r);\n}\n\nexport function validateTerminalName(\n\tname: string,\n): { content: string; severity: Severity } | null {\n\tif (!name || name.trim().length === 0) {\n\t\treturn {\n\t\t\tcontent: localize(\n\t\t\t\t\"emptyTerminalNameInfo\",\n\t\t\t\t\"Providing no name will reset it to the default value\",\n\t\t\t),\n\t\t\tseverity: Severity.Info,\n\t\t};\n\t}\n\n\treturn null;\n}\n\nfunction convertOptionsOrProfileToOptions(\n\toptionsOrProfile?: ICreateTerminalOptions | ITerminalProfile,\n): ICreateTerminalOptions | undefined {\n\tif (isObject(optionsOrProfile) && \"profileName\" in optionsOrProfile) {\n\t\treturn {\n\t\t\tconfig: optionsOrProfile as ITerminalProfile,\n\t\t\tlocation: (optionsOrProfile as ICreateTerminalOptions).location,\n\t\t};\n\t}\n\treturn optionsOrProfile;\n}\n\nlet newWithProfileAction: IDisposable;\n\nexport function refreshTerminalActions(\n\tdetectedProfiles: ITerminalProfile[],\n): IDisposable {\n\tconst profileEnum = createProfileSchemaEnums(detectedProfiles);\n\tnewWithProfileAction?.dispose();\n\t// TODO: Use new register function\n\tnewWithProfileAction = registerAction2(\n\t\tclass extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: TerminalCommandId.NewWithProfile,\n\t\t\t\t\ttitle: localize2(\n\t\t\t\t\t\t\"workbench.action.terminal.newWithProfile\",\n\t\t\t\t\t\t\"Create New Terminal (With Profile)\",\n\t\t\t\t\t),\n\t\t\t\t\tf1: true,\n\t\t\t\t\tcategory,\n\t\t\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\t\t\tTerminalContextKeys.processSupported,\n\t\t\t\t\t\tTerminalContextKeys.webExtensionContributedProfile,\n\t\t\t\t\t),\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tdescription: TerminalCommandId.NewWithProfile,\n\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"args\",\n\t\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\t\t\trequired: [\"profileName\"],\n\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\tprofileName: {\n\t\t\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"workbench.action.terminal.newWithProfile.profileName\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"The name of the profile to create\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\tenum: profileEnum.values,\n\t\t\t\t\t\t\t\t\t\t\tmarkdownEnumDescriptions:\n\t\t\t\t\t\t\t\t\t\t\t\tprofileEnum.markdownDescriptions,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tlocation: {\n\t\t\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"newWithProfile.location\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Where to create the terminal\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\tenum: [\"view\", \"editor\"],\n\t\t\t\t\t\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"newWithProfile.location.view\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Create the terminal in the terminal view\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"newWithProfile.location.editor\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Create the terminal in the editor\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tasync run(\n\t\t\t\taccessor: ServicesAccessor,\n\t\t\t\teventOrOptionsOrProfile:\n\t\t\t\t\t| MouseEvent\n\t\t\t\t\t| ICreateTerminalOptions\n\t\t\t\t\t| ITerminalProfile\n\t\t\t\t\t| {\n\t\t\t\t\t\t\tprofileName: string;\n\t\t\t\t\t\t\tlocation?: \"view\" | \"editor\" | unknown;\n\t\t\t\t\t  }\n\t\t\t\t\t| undefined,\n\t\t\t\tprofile?: ITerminalProfile,\n\t\t\t) {\n\t\t\t\tconst c = getTerminalServices(accessor);\n\t\t\t\tconst workspaceContextService = accessor.get(\n\t\t\t\t\tIWorkspaceContextService,\n\t\t\t\t);\n\t\t\t\tconst commandService = accessor.get(ICommandService);\n\n\t\t\t\tlet event:\n\t\t\t\t\t| MouseEvent\n\t\t\t\t\t| PointerEvent\n\t\t\t\t\t| KeyboardEvent\n\t\t\t\t\t| undefined;\n\t\t\t\tlet options: ICreateTerminalOptions | undefined;\n\t\t\t\tlet instance: ITerminalInstance | undefined;\n\t\t\t\tlet cwd: string | URI | undefined;\n\n\t\t\t\tif (\n\t\t\t\t\tisObject(eventOrOptionsOrProfile) &&\n\t\t\t\t\teventOrOptionsOrProfile &&\n\t\t\t\t\t\"profileName\" in eventOrOptionsOrProfile\n\t\t\t\t) {\n\t\t\t\t\tconst config = c.profileService.availableProfiles.find(\n\t\t\t\t\t\t(profile) =>\n\t\t\t\t\t\t\tprofile.profileName ===\n\t\t\t\t\t\t\teventOrOptionsOrProfile.profileName,\n\t\t\t\t\t);\n\t\t\t\t\tif (!config) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Could not find terminal profile \"${eventOrOptionsOrProfile.profileName}\"`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\toptions = { config };\n\t\t\t\t\tif (\"location\" in eventOrOptionsOrProfile) {\n\t\t\t\t\t\tswitch (eventOrOptionsOrProfile.location) {\n\t\t\t\t\t\t\tcase \"editor\":\n\t\t\t\t\t\t\t\toptions.location = TerminalLocation.Editor;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"view\":\n\t\t\t\t\t\t\t\toptions.location = TerminalLocation.Panel;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (\n\t\t\t\t\tisMouseEvent(eventOrOptionsOrProfile) ||\n\t\t\t\t\tisPointerEvent(eventOrOptionsOrProfile) ||\n\t\t\t\t\tisKeyboardEvent(eventOrOptionsOrProfile)\n\t\t\t\t) {\n\t\t\t\t\tevent = eventOrOptionsOrProfile;\n\t\t\t\t\toptions = profile ? { config: profile } : undefined;\n\t\t\t\t} else {\n\t\t\t\t\toptions = convertOptionsOrProfileToOptions(\n\t\t\t\t\t\teventOrOptionsOrProfile,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// split terminal\n\t\t\t\tif (event && (event.altKey || event.ctrlKey)) {\n\t\t\t\t\tconst parentTerminal = c.service.activeInstance;\n\t\t\t\t\tif (parentTerminal) {\n\t\t\t\t\t\tawait c.service.createTerminal({\n\t\t\t\t\t\t\tlocation: { parentTerminal },\n\t\t\t\t\t\t\tconfig: options?.config,\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\t\tif (folders.length > 1) {\n\t\t\t\t\t// multi-root workspace, create root picker\n\t\t\t\t\tconst options: IPickOptions<IQuickPickItem> = {\n\t\t\t\t\t\tplaceHolder: localize(\n\t\t\t\t\t\t\t\"workbench.action.terminal.newWorkspacePlaceholder\",\n\t\t\t\t\t\t\t\"Select current working directory for new terminal\",\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tconst workspace = await commandService.executeCommand(\n\t\t\t\t\t\tPICK_WORKSPACE_FOLDER_COMMAND_ID,\n\t\t\t\t\t\t[options],\n\t\t\t\t\t);\n\t\t\t\t\tif (!workspace) {\n\t\t\t\t\t\t// Don't create the instance if the workspace picker was canceled\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tcwd = workspace.uri;\n\t\t\t\t}\n\n\t\t\t\tif (options) {\n\t\t\t\t\toptions.cwd = cwd;\n\t\t\t\t\tinstance = await c.service.createTerminal(options);\n\t\t\t\t} else {\n\t\t\t\t\tinstance = await c.service.showProfileQuickPick(\n\t\t\t\t\t\t\"createInstance\",\n\t\t\t\t\t\tcwd,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (instance) {\n\t\t\t\t\tc.service.setActiveInstance(instance);\n\t\t\t\t\tawait focusActiveTerminal(instance, c);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t);\n\treturn newWithProfileAction;\n}\n\nfunction getResourceOrActiveInstance(\n\tc: ITerminalServicesCollection,\n\tresource: unknown,\n): ITerminalInstance | undefined {\n\treturn (\n\t\tc.service.getInstanceFromResource(toOptionalUri(resource)) ||\n\t\tc.service.activeInstance\n\t);\n}\n\nasync function pickTerminalCwd(\n\taccessor: ServicesAccessor,\n\tcancel?: CancellationToken,\n): Promise<WorkspaceFolderCwdPair | undefined> {\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst labelService = accessor.get(ILabelService);\n\tconst contextService = accessor.get(IWorkspaceContextService);\n\tconst modelService = accessor.get(IModelService);\n\tconst languageService = accessor.get(ILanguageService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst configurationResolverService = accessor.get(\n\t\tIConfigurationResolverService,\n\t);\n\n\tconst folders = contextService.getWorkspace().folders;\n\tif (!folders.length) {\n\t\treturn;\n\t}\n\n\tconst folderCwdPairs = await Promise.all(\n\t\tfolders.map((e) =>\n\t\t\tresolveWorkspaceFolderCwd(\n\t\t\t\te,\n\t\t\t\tconfigurationService,\n\t\t\t\tconfigurationResolverService,\n\t\t\t),\n\t\t),\n\t);\n\tconst shrinkedPairs = shrinkWorkspaceFolderCwdPairs(folderCwdPairs);\n\n\tif (shrinkedPairs.length === 1) {\n\t\treturn shrinkedPairs[0];\n\t}\n\n\ttype Item = IQuickPickItem & { pair: WorkspaceFolderCwdPair };\n\tconst folderPicks: Item[] = shrinkedPairs.map((pair) => {\n\t\tconst label = pair.folder.name;\n\t\tconst description = pair.isOverridden\n\t\t\t? localize(\n\t\t\t\t\t\"workbench.action.terminal.overriddenCwdDescription\",\n\t\t\t\t\t\"(Overriden) {0}\",\n\t\t\t\t\tlabelService.getUriLabel(pair.cwd, {\n\t\t\t\t\t\trelative: !pair.isAbsolute,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t: labelService.getUriLabel(dirname(pair.cwd), { relative: true });\n\n\t\treturn {\n\t\t\tlabel,\n\t\t\tdescription: description !== label ? description : undefined,\n\t\t\tpair: pair,\n\t\t\ticonClasses: getIconClasses(\n\t\t\t\tmodelService,\n\t\t\t\tlanguageService,\n\t\t\t\tpair.cwd,\n\t\t\t\tFileKind.ROOT_FOLDER,\n\t\t\t),\n\t\t};\n\t});\n\tconst options: IPickOptions<Item> = {\n\t\tplaceHolder: localize(\n\t\t\t\"workbench.action.terminal.newWorkspacePlaceholder\",\n\t\t\t\"Select current working directory for new terminal\",\n\t\t),\n\t\tmatchOnDescription: true,\n\t\tcanPickMany: false,\n\t};\n\n\tconst token: CancellationToken = cancel || CancellationToken.None;\n\tconst pick = await quickInputService.pick<Item>(\n\t\tfolderPicks,\n\t\toptions,\n\t\ttoken,\n\t);\n\treturn pick?.pair;\n}\n\nasync function resolveWorkspaceFolderCwd(\n\tfolder: IWorkspaceFolder,\n\tconfigurationService: IConfigurationService,\n\tconfigurationResolverService: IConfigurationResolverService,\n): Promise<WorkspaceFolderCwdPair> {\n\tconst cwdConfig = configurationService.getValue(TerminalSettingId.Cwd, {\n\t\tresource: folder.uri,\n\t});\n\tif (!isString(cwdConfig) || cwdConfig.length === 0) {\n\t\treturn {\n\t\t\tfolder,\n\t\t\tcwd: folder.uri,\n\t\t\tisAbsolute: false,\n\t\t\tisOverridden: false,\n\t\t};\n\t}\n\n\tconst resolvedCwdConfig = await configurationResolverService.resolveAsync(\n\t\tfolder,\n\t\tcwdConfig,\n\t);\n\treturn isAbsolute(resolvedCwdConfig) ||\n\t\tresolvedCwdConfig.startsWith(\n\t\t\tAbstractVariableResolverService.VARIABLE_LHS,\n\t\t)\n\t\t? {\n\t\t\t\tfolder,\n\t\t\t\tisAbsolute: true,\n\t\t\t\tisOverridden: true,\n\t\t\t\tcwd: URI.from({ ...folder.uri, path: resolvedCwdConfig }),\n\t\t\t}\n\t\t: {\n\t\t\t\tfolder,\n\t\t\t\tisAbsolute: false,\n\t\t\t\tisOverridden: true,\n\t\t\t\tcwd: URI.joinPath(folder.uri, resolvedCwdConfig),\n\t\t\t};\n}\n\n/**\n * Drops repeated CWDs, if any, by keeping the one which best matches the workspace folder. It also preserves the original order.\n */\nexport function shrinkWorkspaceFolderCwdPairs(\n\tpairs: WorkspaceFolderCwdPair[],\n): WorkspaceFolderCwdPair[] {\n\tconst map = new Map<string, WorkspaceFolderCwdPair>();\n\tfor (const pair of pairs) {\n\t\tconst key = pair.cwd.toString();\n\t\tconst value = map.get(key);\n\t\tif (!value || key === pair.folder.uri.toString()) {\n\t\t\tmap.set(key, pair);\n\t\t}\n\t}\n\tconst selectedPairs = new Set(map.values());\n\tconst selectedPairsInOrder = pairs.filter((x) => selectedPairs.has(x));\n\treturn selectedPairsInOrder;\n}\n\nasync function focusActiveTerminal(\n\tinstance: ITerminalInstance,\n\tc: ITerminalServicesCollection,\n): Promise<void> {\n\tif (instance.target === TerminalLocation.Editor) {\n\t\tawait c.editorService.revealActiveEditor();\n\t\tawait instance.focusWhenReady(true);\n\t} else {\n\t\tawait c.groupService.showPanel(true);\n\t}\n}\n\nasync function renameWithQuickPick(\n\tc: ITerminalServicesCollection,\n\taccessor: ServicesAccessor,\n\tresource?: unknown,\n) {\n\tlet instance: ITerminalInstance | undefined = resource as ITerminalInstance;\n\t// Check if the 'instance' does not exist or if 'instance.rename' is not defined\n\tif (!instance || !instance?.rename) {\n\t\t// If not, obtain the resource instance using 'getResourceOrActiveInstance'\n\t\tinstance = getResourceOrActiveInstance(c, resource);\n\t}\n\n\tif (instance) {\n\t\tconst title = await accessor.get(IQuickInputService).input({\n\t\t\tvalue: instance.title,\n\t\t\tprompt: localize(\n\t\t\t\t\"workbench.action.terminal.rename.prompt\",\n\t\t\t\t\"Enter terminal name\",\n\t\t\t),\n\t\t});\n\t\tinstance.rename(title);\n\t}\n}\n\nfunction toOptionalUri(obj: unknown): URI | undefined {\n\treturn URI.isUri(obj) ? obj : undefined;\n}\n\nfunction toOptionalString(obj: unknown): string | undefined {\n\treturn isString(obj) ? obj : undefined;\n}\n"],
  "mappings": "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",
  "names": ["profile", "options"]
}
