import { Event } from "vs/base/common/event";
import { Disposable, IDisposable } from "vs/base/common/lifecycle";
import { OperatingSystem } from "vs/base/common/platform";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IExtensionTerminalProfile, IShellLaunchConfig, ITerminalProfile } from "vs/platform/terminal/common/terminal";
import { ITerminalInstanceService } from "vs/workbench/contrib/terminal/browser/terminal";
import { IRegisterContributedProfileArgs, ITerminalProfileProvider, ITerminalProfileService } from "vs/workbench/contrib/terminal/common/terminal";
import { ITerminalContributionService } from "vs/workbench/contrib/terminal/common/terminalExtensionPoints";
import { IWorkbenchEnvironmentService } from "vs/workbench/services/environment/common/environmentService";
import { IExtensionService } from "vs/workbench/services/extensions/common/extensions";
import { IRemoteAgentService } from "vs/workbench/services/remote/common/remoteAgentService";
export declare class TerminalProfileService extends Disposable implements ITerminalProfileService {
    private readonly _contextKeyService;
    private readonly _configurationService;
    private readonly _terminalContributionService;
    private readonly _extensionService;
    private _remoteAgentService;
    private readonly _environmentService;
    private readonly _terminalInstanceService;
    _serviceBrand: undefined;
    private _webExtensionContributedProfileContextKey;
    private _profilesReadyBarrier;
    private _profilesReadyPromise;
    private _availableProfiles;
    private _automationProfile;
    private _contributedProfiles;
    private _defaultProfileName?;
    private _platformConfigJustRefreshed;
    private readonly _refreshTerminalActionsDisposable;
    private readonly _profileProviders;
    private readonly _onDidChangeAvailableProfiles;
    get onDidChangeAvailableProfiles(): Event<ITerminalProfile[]>;
    get profilesReady(): Promise<void>;
    get availableProfiles(): ITerminalProfile[];
    get contributedProfiles(): IExtensionTerminalProfile[];
    constructor(_contextKeyService: IContextKeyService, _configurationService: IConfigurationService, _terminalContributionService: ITerminalContributionService, _extensionService: IExtensionService, _remoteAgentService: IRemoteAgentService, _environmentService: IWorkbenchEnvironmentService, _terminalInstanceService: ITerminalInstanceService);
    private _setupConfigListener;
    getDefaultProfileName(): string | undefined;
    getDefaultProfile(os?: OperatingSystem): ITerminalProfile | undefined;
    private _getOsKey;
    refreshAvailableProfiles(): void;
    protected _refreshAvailableProfilesNow(): Promise<void>;
    private _updateContributedProfiles;
    getContributedProfileProvider(extensionIdentifier: string, id: string): ITerminalProfileProvider | undefined;
    private _detectProfiles;
    private _updateWebContextKey;
    private _refreshPlatformConfig;
    getPlatformKey(): Promise<string>;
    registerTerminalProfileProvider(extensionIdentifier: string, id: string, profileProvider: ITerminalProfileProvider): IDisposable;
    registerContributedProfile(args: IRegisterContributedProfileArgs): Promise<void>;
    getContributedDefaultProfile(shellLaunchConfig: IShellLaunchConfig): Promise<IExtensionTerminalProfile | undefined>;
}
