{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/environmentVariableInfo.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport type {\n\tEnvironmentVariableScope,\n\tIExtensionOwnedEnvironmentVariableMutator,\n\tIMergedEnvironmentVariableCollection,\n\tIMergedEnvironmentVariableCollectionDiff,\n} from \"../../../../platform/terminal/common/environmentVariable.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport type { IEnvironmentVariableInfo } from \"../common/environmentVariable.js\";\nimport {\n\ttype ITerminalStatus,\n\ttype ITerminalStatusHoverAction,\n\tTerminalCommandId,\n} from \"../common/terminal.js\";\nimport { ITerminalService } from \"./terminal.js\";\nimport { TerminalStatus } from \"./terminalStatusList.js\";\n\nexport class EnvironmentVariableInfoStale implements IEnvironmentVariableInfo {\n\treadonly requiresAction = true;\n\n\tconstructor(\n\t\tprivate readonly _diff: IMergedEnvironmentVariableCollectionDiff,\n\t\tprivate readonly _terminalId: number,\n\t\tprivate readonly _collection: IMergedEnvironmentVariableCollection,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t}\n\n\tprivate _getInfo(scope: EnvironmentVariableScope | undefined): string {\n\t\tconst extSet: Set<string> = new Set();\n\t\taddExtensionIdentifiers(extSet, this._diff.added.values());\n\t\taddExtensionIdentifiers(extSet, this._diff.removed.values());\n\t\taddExtensionIdentifiers(extSet, this._diff.changed.values());\n\n\t\tlet message = localize(\n\t\t\t\"extensionEnvironmentContributionInfoStale\",\n\t\t\t\"The following extensions want to relaunch the terminal to contribute to its environment:\",\n\t\t);\n\t\tmessage += getMergedDescription(\n\t\t\tthis._collection,\n\t\t\tscope,\n\t\t\tthis._extensionService,\n\t\t\textSet,\n\t\t);\n\t\treturn message;\n\t}\n\n\tprivate _getActions(): ITerminalStatusHoverAction[] {\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: localize(\"relaunchTerminalLabel\", \"Relaunch Terminal\"),\n\t\t\t\trun: () =>\n\t\t\t\t\tthis._terminalService\n\t\t\t\t\t\t.getInstanceFromId(this._terminalId)\n\t\t\t\t\t\t?.relaunch(),\n\t\t\t\tcommandId: TerminalCommandId.Relaunch,\n\t\t\t},\n\t\t];\n\t}\n\n\tgetStatus(scope: EnvironmentVariableScope | undefined): ITerminalStatus {\n\t\treturn {\n\t\t\tid: TerminalStatus.RelaunchNeeded,\n\t\t\tseverity: Severity.Warning,\n\t\t\ticon: Codicon.warning,\n\t\t\ttooltip: this._getInfo(scope),\n\t\t\thoverActions: this._getActions(),\n\t\t};\n\t}\n}\n\nexport class EnvironmentVariableInfoChangesActive\n\timplements IEnvironmentVariableInfo\n{\n\treadonly requiresAction = false;\n\n\tconstructor(\n\t\tprivate readonly _collection: IMergedEnvironmentVariableCollection,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t}\n\n\tprivate _getInfo(scope: EnvironmentVariableScope | undefined): string {\n\t\tconst extSet: Set<string> = new Set();\n\t\taddExtensionIdentifiers(\n\t\t\textSet,\n\t\t\tthis._collection.getVariableMap(scope).values(),\n\t\t);\n\n\t\tlet message = localize(\n\t\t\t\"extensionEnvironmentContributionInfoActive\",\n\t\t\t\"The following extensions have contributed to this terminal's environment:\",\n\t\t);\n\t\tmessage += getMergedDescription(\n\t\t\tthis._collection,\n\t\t\tscope,\n\t\t\tthis._extensionService,\n\t\t\textSet,\n\t\t);\n\t\treturn message;\n\t}\n\n\tprivate _getActions(\n\t\tscope: EnvironmentVariableScope | undefined,\n\t): ITerminalStatusHoverAction[] {\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: localize(\n\t\t\t\t\t\"showEnvironmentContributions\",\n\t\t\t\t\t\"Show Environment Contributions\",\n\t\t\t\t),\n\t\t\t\trun: () =>\n\t\t\t\t\tthis._commandService.executeCommand(\n\t\t\t\t\t\tTerminalCommandId.ShowEnvironmentContributions,\n\t\t\t\t\t\tscope,\n\t\t\t\t\t),\n\t\t\t\tcommandId: TerminalCommandId.ShowEnvironmentContributions,\n\t\t\t},\n\t\t];\n\t}\n\n\tgetStatus(scope: EnvironmentVariableScope | undefined): ITerminalStatus {\n\t\treturn {\n\t\t\tid: TerminalStatus.EnvironmentVariableInfoChangesActive,\n\t\t\tseverity: Severity.Info,\n\t\t\ttooltip: this._getInfo(scope),\n\t\t\thoverActions: this._getActions(scope),\n\t\t};\n\t}\n}\n\nfunction getMergedDescription(\n\tcollection: IMergedEnvironmentVariableCollection,\n\tscope: EnvironmentVariableScope | undefined,\n\textensionService: IExtensionService,\n\textSet: Set<string>,\n): string {\n\tconst message = [\"\\n\"];\n\tconst globalDescriptions = collection.getDescriptionMap(undefined);\n\tconst workspaceDescriptions = collection.getDescriptionMap(scope);\n\tfor (const ext of extSet) {\n\t\tconst globalDescription = globalDescriptions.get(ext);\n\t\tif (globalDescription) {\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}\\``);\n\t\t\tmessage.push(`: ${globalDescription}`);\n\t\t}\n\t\tconst workspaceDescription = workspaceDescriptions.get(ext);\n\t\tif (workspaceDescription) {\n\t\t\t// Only show '(workspace)' suffix if there is already a description for the extension.\n\t\t\tconst workspaceSuffix = globalDescription\n\t\t\t\t? ` (${localize(\"ScopedEnvironmentContributionInfo\", \"workspace\")})`\n\t\t\t\t: \"\";\n\t\t\tmessage.push(\n\t\t\t\t`\\n- \\`${getExtensionName(ext, extensionService)}${workspaceSuffix}\\``,\n\t\t\t);\n\t\t\tmessage.push(`: ${workspaceDescription}`);\n\t\t}\n\t\tif (!globalDescription && !workspaceDescription) {\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}\\``);\n\t\t}\n\t}\n\treturn message.join(\"\");\n}\n\nfunction addExtensionIdentifiers(\n\textSet: Set<string>,\n\tdiff: IterableIterator<IExtensionOwnedEnvironmentVariableMutator[]>,\n): void {\n\tfor (const mutators of diff) {\n\t\tfor (const mutator of mutators) {\n\t\t\textSet.add(mutator.extensionIdentifier);\n\t\t}\n\t}\n}\n\nfunction getExtensionName(\n\tid: string,\n\textensionService: IExtensionService,\n): string {\n\treturn (\n\t\textensionService.extensions.find((e) => e.id === id)?.displayName || id\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
