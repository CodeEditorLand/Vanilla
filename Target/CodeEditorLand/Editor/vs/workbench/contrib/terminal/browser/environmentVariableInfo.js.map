{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/environmentVariableInfo.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEnvironmentVariableInfo } from '../common/environmentVariable.js';\nimport { ITerminalStatus, ITerminalStatusHoverAction, TerminalCommandId } from '../common/terminal.js';\nimport { ITerminalService } from './terminal.js';\nimport { localize } from '../../../../nls.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { EnvironmentVariableScope, IExtensionOwnedEnvironmentVariableMutator, IMergedEnvironmentVariableCollection, IMergedEnvironmentVariableCollectionDiff } from '../../../../platform/terminal/common/environmentVariable.js';\nimport { TerminalStatus } from './terminalStatusList.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\n\nexport class EnvironmentVariableInfoStale implements IEnvironmentVariableInfo {\n\treadonly requiresAction = true;\n\n\tconstructor(\n\t\tprivate readonly _diff: IMergedEnvironmentVariableCollectionDiff,\n\t\tprivate readonly _terminalId: number,\n\t\tprivate readonly _collection: IMergedEnvironmentVariableCollection,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t}\n\n\tprivate _getInfo(scope: EnvironmentVariableScope | undefined): string {\n\t\tconst extSet: Set<string> = new Set();\n\t\taddExtensionIdentifiers(extSet, this._diff.added.values());\n\t\taddExtensionIdentifiers(extSet, this._diff.removed.values());\n\t\taddExtensionIdentifiers(extSet, this._diff.changed.values());\n\n\t\tlet message = localize('extensionEnvironmentContributionInfoStale', \"The following extensions want to relaunch the terminal to contribute to its environment:\");\n\t\tmessage += getMergedDescription(this._collection, scope, this._extensionService, extSet);\n\t\treturn message;\n\t}\n\n\tprivate _getActions(): ITerminalStatusHoverAction[] {\n\t\treturn [{\n\t\t\tlabel: localize('relaunchTerminalLabel', \"Relaunch Terminal\"),\n\t\t\trun: () => this._terminalService.getInstanceFromId(this._terminalId)?.relaunch(),\n\t\t\tcommandId: TerminalCommandId.Relaunch\n\t\t}];\n\t}\n\n\tgetStatus(scope: EnvironmentVariableScope | undefined): ITerminalStatus {\n\t\treturn {\n\t\t\tid: TerminalStatus.RelaunchNeeded,\n\t\t\tseverity: Severity.Warning,\n\t\t\ticon: Codicon.warning,\n\t\t\ttooltip: this._getInfo(scope),\n\t\t\thoverActions: this._getActions()\n\t\t};\n\t}\n}\n\nexport class EnvironmentVariableInfoChangesActive implements IEnvironmentVariableInfo {\n\treadonly requiresAction = false;\n\n\tconstructor(\n\t\tprivate readonly _collection: IMergedEnvironmentVariableCollection,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t}\n\n\tprivate _getInfo(scope: EnvironmentVariableScope | undefined): string {\n\t\tconst extSet: Set<string> = new Set();\n\t\taddExtensionIdentifiers(extSet, this._collection.getVariableMap(scope).values());\n\n\t\tlet message = localize('extensionEnvironmentContributionInfoActive', \"The following extensions have contributed to this terminal's environment:\");\n\t\tmessage += getMergedDescription(this._collection, scope, this._extensionService, extSet);\n\t\treturn message;\n\t}\n\n\tprivate _getActions(scope: EnvironmentVariableScope | undefined): ITerminalStatusHoverAction[] {\n\t\treturn [{\n\t\t\tlabel: localize('showEnvironmentContributions', \"Show Environment Contributions\"),\n\t\t\trun: () => this._commandService.executeCommand(TerminalCommandId.ShowEnvironmentContributions, scope),\n\t\t\tcommandId: TerminalCommandId.ShowEnvironmentContributions\n\t\t}];\n\t}\n\n\tgetStatus(scope: EnvironmentVariableScope | undefined): ITerminalStatus {\n\t\treturn {\n\t\t\tid: TerminalStatus.EnvironmentVariableInfoChangesActive,\n\t\t\tseverity: Severity.Info,\n\t\t\ttooltip: this._getInfo(scope),\n\t\t\thoverActions: this._getActions(scope)\n\t\t};\n\t}\n}\n\nfunction getMergedDescription(collection: IMergedEnvironmentVariableCollection, scope: EnvironmentVariableScope | undefined, extensionService: IExtensionService, extSet: Set<string>): string {\n\tconst message = ['\\n'];\n\tconst globalDescriptions = collection.getDescriptionMap(undefined);\n\tconst workspaceDescriptions = collection.getDescriptionMap(scope);\n\tfor (const ext of extSet) {\n\t\tconst globalDescription = globalDescriptions.get(ext);\n\t\tif (globalDescription) {\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}\\``);\n\t\t\tmessage.push(`: ${globalDescription}`);\n\t\t}\n\t\tconst workspaceDescription = workspaceDescriptions.get(ext);\n\t\tif (workspaceDescription) {\n\t\t\t// Only show '(workspace)' suffix if there is already a description for the extension.\n\t\t\tconst workspaceSuffix = globalDescription ? ` (${localize('ScopedEnvironmentContributionInfo', 'workspace')})` : '';\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}${workspaceSuffix}\\``);\n\t\t\tmessage.push(`: ${workspaceDescription}`);\n\t\t}\n\t\tif (!globalDescription && !workspaceDescription) {\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}\\``);\n\t\t}\n\t}\n\treturn message.join('');\n}\n\nfunction addExtensionIdentifiers(extSet: Set<string>, diff: IterableIterator<IExtensionOwnedEnvironmentVariableMutator[]>): void {\n\tfor (const mutators of diff) {\n\t\tfor (const mutator of mutators) {\n\t\t\textSet.add(mutator.extensionIdentifier);\n\t\t}\n\t}\n}\n\nfunction getExtensionName(id: string, extensionService: IExtensionService): string {\n\treturn extensionService.extensions.find(e => e.id === id)?.displayName || id;\n}\n"],
  "mappings": "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",
  "names": []
}
