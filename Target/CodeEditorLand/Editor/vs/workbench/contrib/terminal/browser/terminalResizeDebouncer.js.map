{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalResizeDebouncer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindow, runWhenWindowIdle } from '../../../../base/browser/dom.js';\nimport { debounce } from '../../../../base/common/decorators.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport type { XtermTerminal } from './xterm/xtermTerminal.js';\n\nconst enum Constants {\n\t/**\n\t * The _normal_ buffer length threshold at which point resizing starts being debounced.\n\t */\n\tStartDebouncingThreshold = 200,\n}\n\nexport class TerminalResizeDebouncer extends Disposable {\n\tprivate _latestX: number = 0;\n\tprivate _latestY: number = 0;\n\n\tprivate readonly _resizeXJob = this._register(new MutableDisposable());\n\tprivate readonly _resizeYJob = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly _isVisible: () => boolean,\n\t\tprivate readonly _getXterm: () => XtermTerminal | undefined,\n\t\tprivate readonly _resizeBothCallback: (cols: number, rows: number) => void,\n\t\tprivate readonly _resizeXCallback: (cols: number) => void,\n\t\tprivate readonly _resizeYCallback: (rows: number) => void,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync resize(cols: number, rows: number, immediate: boolean): Promise<void> {\n\t\tthis._latestX = cols;\n\t\tthis._latestY = rows;\n\n\t\t// Resize immediately if requested explicitly or if the buffer is small\n\t\tif (immediate || this._getXterm()!.raw.buffer.normal.length < Constants.StartDebouncingThreshold) {\n\t\t\tthis._resizeXJob.clear();\n\t\t\tthis._resizeYJob.clear();\n\t\t\tthis._resizeBothCallback(cols, rows);\n\t\t\treturn;\n\t\t}\n\n\t\t// Resize in an idle callback if the terminal is not visible\n\t\tconst win = getWindow(this._getXterm()!.raw.element);\n\t\tif (win && !this._isVisible()) {\n\t\t\tif (!this._resizeXJob.value) {\n\t\t\t\tthis._resizeXJob.value = runWhenWindowIdle(win, async () => {\n\t\t\t\t\tthis._resizeXCallback(this._latestX);\n\t\t\t\t\tthis._resizeXJob.clear();\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (!this._resizeYJob.value) {\n\t\t\t\tthis._resizeYJob.value = runWhenWindowIdle(win, async () => {\n\t\t\t\t\tthis._resizeYCallback(this._latestY);\n\t\t\t\t\tthis._resizeYJob.clear();\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Update dimensions independently as vertical resize is cheap and horizontal resize is\n\t\t// expensive due to reflow.\n\t\tthis._resizeYCallback(rows);\n\t\tthis._latestX = cols;\n\t\tthis._debounceResizeX(cols);\n\t}\n\n\tflush(): void {\n\t\tif (this._resizeXJob.value || this._resizeYJob.value) {\n\t\t\tthis._resizeXJob.clear();\n\t\t\tthis._resizeYJob.clear();\n\t\t\tthis._resizeBothCallback(this._latestX, this._latestY);\n\t\t}\n\t}\n\n\t@debounce(100)\n\tprivate _debounceResizeX(cols: number) {\n\t\tthis._resizeXCallback(cols);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;AAKA,SAAS,WAAW,yBAAyB;AAC7C,SAAS,gBAAgB;AACzB,SAAS,YAAY,yBAAyB;AAG9C,IAAW,YAAX,kBAAWA,eAAX;AAIC,EAAAA,sBAAA,8BAA2B,OAA3B;AAJU,SAAAA;AAAA,GAAA;AAOJ,MAAM,gCAAgC,WAAW;AAAA,EAOvD,YACkB,YACA,WACA,qBACA,kBACA,kBAChB;AACD,UAAM;AANW;AACA;AACA;AACA;AACA;AAAA,EAGlB;AAAA,EAhCD,OAiBwD;AAAA;AAAA;AAAA,EAC/C,WAAmB;AAAA,EACnB,WAAmB;AAAA,EAEV,cAAc,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EACpD,cAAc,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAYrE,MAAM,OAAO,MAAc,MAAc,WAAmC;AAC3E,SAAK,WAAW;AAChB,SAAK,WAAW;AAGhB,QAAI,aAAa,KAAK,UAAU,EAAG,IAAI,OAAO,OAAO,SAAS,oCAAoC;AACjG,WAAK,YAAY,MAAM;AACvB,WAAK,YAAY,MAAM;AACvB,WAAK,oBAAoB,MAAM,IAAI;AACnC;AAAA,IACD;AAGA,UAAM,MAAM,UAAU,KAAK,UAAU,EAAG,IAAI,OAAO;AACnD,QAAI,OAAO,CAAC,KAAK,WAAW,GAAG;AAC9B,UAAI,CAAC,KAAK,YAAY,OAAO;AAC5B,aAAK,YAAY,QAAQ,kBAAkB,KAAK,YAAY;AAC3D,eAAK,iBAAiB,KAAK,QAAQ;AACnC,eAAK,YAAY,MAAM;AAAA,QACxB,CAAC;AAAA,MACF;AACA,UAAI,CAAC,KAAK,YAAY,OAAO;AAC5B,aAAK,YAAY,QAAQ,kBAAkB,KAAK,YAAY;AAC3D,eAAK,iBAAiB,KAAK,QAAQ;AACnC,eAAK,YAAY,MAAM;AAAA,QACxB,CAAC;AAAA,MACF;AACA;AAAA,IACD;AAIA,SAAK,iBAAiB,IAAI;AAC1B,SAAK,WAAW;AAChB,SAAK,iBAAiB,IAAI;AAAA,EAC3B;AAAA,EAEA,QAAc;AACb,QAAI,KAAK,YAAY,SAAS,KAAK,YAAY,OAAO;AACrD,WAAK,YAAY,MAAM;AACvB,WAAK,YAAY,MAAM;AACvB,WAAK,oBAAoB,KAAK,UAAU,KAAK,QAAQ;AAAA,IACtD;AAAA,EACD;AAAA,EAGQ,iBAAiB,MAAc;AACtC,SAAK,iBAAiB,IAAI;AAAA,EAC3B;AACD;AAHS;AAAA,EADP,SAAS,GAAG;AAAA,GA9DD,wBA+DJ;",
  "names": ["Constants"]
}
