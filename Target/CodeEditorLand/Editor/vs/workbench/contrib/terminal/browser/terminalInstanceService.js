var v=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var I=(a,r,e,t)=>{for(var n=t>1?void 0:t?T(r,e):r,i=a.length-1,o;i>=0;i--)(o=a[i])&&(n=(t?o(r,e,n):o(n))||n);return t&&n&&v(r,e,n),n},c=(a,r)=>(e,t)=>r(e,t,a);import{promiseWithResolvers as g}from"../../../../../vs/base/common/async.js";import{Emitter as f}from"../../../../../vs/base/common/event.js";import{Disposable as h}from"../../../../../vs/base/common/lifecycle.js";import"../../../../../vs/base/common/uri.js";import{IContextKeyService as k}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{InstantiationType as y,registerSingleton as u}from"../../../../../vs/platform/instantiation/common/extensions.js";import{IInstantiationService as S}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{Registry as m}from"../../../../../vs/platform/registry/common/platform.js";import{TerminalExtensions as l}from"../../../../../vs/platform/terminal/common/terminal.js";import{ITerminalInstanceService as C}from"../../../../../vs/workbench/contrib/terminal/browser/terminal.js";import{TerminalInstance as _}from"../../../../../vs/workbench/contrib/terminal/browser/terminalInstance.js";import{TerminalContextKeys as d}from"../../../../../vs/workbench/contrib/terminal/common/terminalContextKey.js";import{IWorkbenchEnvironmentService as R}from"../../../../../vs/workbench/services/environment/common/environmentService.js";let s=class extends h{constructor(e,t,n){super();this._instantiationService=e;this._contextKeyService=t;this._terminalShellTypeContextKey=d.shellType.bindTo(this._contextKeyService),this._terminalInRunCommandPicker=d.inTerminalRunCommandPicker.bindTo(this._contextKeyService);for(const i of[void 0,n.remoteAuthority]){const{promise:o,resolve:p}=g();this._backendRegistration.set(i,{promise:o,resolve:p})}}_terminalShellTypeContextKey;_terminalInRunCommandPicker;_backendRegistration=new Map;_onDidCreateInstance=this._register(new f);get onDidCreateInstance(){return this._onDidCreateInstance.event}createInstance(e,t){const n=this.convertProfileToShellLaunchConfig(e),i=this._instantiationService.createInstance(_,this._terminalShellTypeContextKey,this._terminalInRunCommandPicker,n);return i.target=t,this._onDidCreateInstance.fire(i),i}convertProfileToShellLaunchConfig(e,t){if(e&&"profileName"in e){const n=e;return n.path?{executable:n.path,args:n.args,env:n.env,icon:n.icon,color:n.color,name:n.overrideName?n.profileName:void 0,cwd:t}:e}return e?(t&&(e.cwd=t),e):{}}async getBackend(e){let t=m.as(l.Backend).getTerminalBackend(e);return t||(await this._backendRegistration.get(e)?.promise,t=m.as(l.Backend).getTerminalBackend(e)),t}getRegisteredBackends(){return m.as(l.Backend).backends.values()}didRegisterBackend(e){this._backendRegistration.get(e)?.resolve()}};s=I([c(0,S),c(1,k),c(2,R)],s),u(C,s,y.Delayed);export{s as TerminalInstanceService};
