var T=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var p=(m,a,e,t)=>{for(var r=t>1?void 0:t?O(a,e):a,i=m.length-1,n;i>=0;i--)(n=m[i])&&(r=(t?n(a,e,r):n(r))||r);return t&&r&&T(a,e,r),r},l=(m,a)=>(e,t)=>a(e,t,m);import{Codicon as c}from"../../../../base/common/codicons.js";import{debounce as x}from"../../../../base/common/decorators.js";import{Disposable as A}from"../../../../base/common/lifecycle.js";import{Schemas as y}from"../../../../base/common/network.js";import{deepClone as w}from"../../../../base/common/objects.js";import*as v from"../../../../base/common/path.js";import{OperatingSystem as g,OS as S}from"../../../../base/common/platform.js";import{env as b}from"../../../../base/common/process.js";import{ThemeIcon as D}from"../../../../base/common/themables.js";import{URI as d}from"../../../../base/common/uri.js";import{IConfigurationService as C}from"../../../../platform/configuration/common/configuration.js";import{ITerminalLogService as E,TerminalSettingId as h}from"../../../../platform/terminal/common/terminal.js";import{isUriComponents as P}from"../../../../platform/terminal/common/terminalProfiles.js";import{getIconRegistry as W}from"../../../../platform/theme/common/iconRegistry.js";import{IWorkspaceContextService as U}from"../../../../platform/workspace/common/workspace.js";import{IConfigurationResolverService as N}from"../../../services/configurationResolver/common/configurationResolver.js";import{IHistoryService as V}from"../../../services/history/common/history.js";import{IRemoteAgentService as F}from"../../../services/remote/common/remoteAgentService.js";import{ITerminalProfileService as B}from"../common/terminal.js";import{ITerminalInstanceService as j}from"./terminal.js";const R="Generated";class k extends A{constructor(e,t,r,i,n,f,u,s){super();this._context=e;this._configurationService=t;this._configurationResolverService=r;this._historyService=i;this._logService=n;this._terminalProfileService=f;this._workspaceContextService=u;this._remoteAgentService=s;this._remoteAgentService.getConnection()?this._remoteAgentService.getEnvironment().then(o=>this._primaryBackendOs=o?.os||S):this._primaryBackendOs=S,this._register(this._configurationService.onDidChangeConfiguration(o=>{(o.affectsConfiguration(h.DefaultProfileWindows)||o.affectsConfiguration(h.DefaultProfileMacOs)||o.affectsConfiguration(h.DefaultProfileLinux))&&this._refreshDefaultProfileName()})),this._register(this._terminalProfileService.onDidChangeAvailableProfiles(()=>this._refreshDefaultProfileName()))}_primaryBackendOs;_iconRegistry=W();_defaultProfileName;get defaultProfileName(){return this._defaultProfileName}async _refreshDefaultProfileName(){this._primaryBackendOs&&(this._defaultProfileName=(await this.getDefaultProfile({remoteAuthority:this._remoteAgentService.getConnection()?.remoteAuthority,os:this._primaryBackendOs}))?.profileName)}resolveIcon(e,t){if(e.icon){e.icon=this._getCustomIcon(e.icon)||this.getDefaultIcon();return}if(e.customPtyImplementation){e.icon=this.getDefaultIcon();return}if(e.executable)return;const r=this._getUnresolvedRealDefaultProfile(t);r&&(e.icon=r.icon),e.icon||(e.icon=this.getDefaultIcon())}getDefaultIcon(e){return this._iconRegistry.getIcon(this._configurationService.getValue(h.TabsDefaultIcon,{resource:e}))||c.terminal}async resolveShellLaunchConfig(e,t){let r;e.executable?r=await this._resolveProfile({path:e.executable,args:e.args,profileName:R,isDefault:!1},t):r=await this.getDefaultProfile(t),e.executable=r.path,e.args=r.args,r.env&&(e.env?e.env={...e.env,...r.env}:e.env=r.env);const i=e===void 0||typeof e.cwd=="string"?void 0:e.cwd;e.icon=this._getCustomIcon(e.icon)||this._getCustomIcon(r.icon)||this.getDefaultIcon(i),r.overrideName&&(e.name=r.profileName),e.color=e.color||r.color||this._configurationService.getValue(h.TabsDefaultColor,{resource:i}),e.useShellEnvironment===void 0&&(e.useShellEnvironment=this._configurationService.getValue(h.InheritEnv))}async getDefaultShell(e){return(await this.getDefaultProfile(e)).path}async getDefaultShellArgs(e){return(await this.getDefaultProfile(e)).args||[]}async getDefaultProfile(e){return this._resolveProfile(await this._getUnresolvedDefaultProfile(e),e)}getEnvironment(e){return this._context.getEnvironment(e)}_getCustomIcon(e){if(e){if(typeof e=="string")return D.fromId(e);if(D.isThemeIcon(e))return e;if(d.isUri(e)||P(e))return d.revive(e);if(typeof e=="object"&&"light"in e&&"dark"in e){const t=e;if((d.isUri(t.light)||P(t.light))&&(d.isUri(t.dark)||P(t.dark)))return{light:d.revive(t.light),dark:d.revive(t.dark)}}}}async _getUnresolvedDefaultProfile(e){if(e.allowAutomationShell){const r=this._getUnresolvedAutomationShellProfile(e);if(r)return r}await this._terminalProfileService.profilesReady;const t=this._getUnresolvedRealDefaultProfile(e.os);return t?this._setIconForAutomation(e,t):this._setIconForAutomation(e,await this._getUnresolvedFallbackDefaultProfile(e))}_setIconForAutomation(e,t){if(e.allowAutomationShell){const r=w(t);return r.icon=c.tools,r}return t}_getUnresolvedRealDefaultProfile(e){return this._terminalProfileService.getDefaultProfile(e)}async _getUnresolvedFallbackDefaultProfile(e){const t=await this._context.getDefaultSystemShell(e.remoteAuthority,e.os);if(e.os===S){let n=this._terminalProfileService.availableProfiles.find(f=>v.parse(f.path).name===v.parse(t).name);if(n)return e.allowAutomationShell&&(n=w(n),n.icon=c.tools),n}let r;e.os===g.Macintosh&&v.parse(t).name.match(/(zsh|bash)/)?r=["--login"]:r=[];const i=this._guessProfileIcon(t);return{profileName:R,path:t,args:r,icon:i,isDefault:!1}}_getUnresolvedAutomationShellProfile(e){const t=this._configurationService.getValue(`terminal.integrated.automationProfile.${this._getOsKey(e.os)}`);if(this._isValidAutomationProfile(t,e.os))return t.icon=this._getCustomIcon(t.icon)||c.tools,t}async _resolveProfile(e,t){const r=await this._context.getEnvironment(t.remoteAuthority);if(t.os===g.Windows){const f=!!r.hasOwnProperty("PROCESSOR_ARCHITEW6432"),u=r.windir;if(!f&&u){const s=v.join(u,"Sysnative").replace(/\//g,"\\").toLowerCase();e.path&&e.path.toLowerCase().indexOf(s)===0&&(e.path=v.join(u,"System32",e.path.substr(s.length+1)))}e.path&&(e.path=e.path.replace(/\//g,"\\"))}const i=this._historyService.getLastActiveWorkspaceRoot(t.remoteAuthority?y.vscodeRemote:y.file),n=i?this._workspaceContextService.getWorkspaceFolder(i)??void 0:void 0;return e.path=await this._resolveVariables(e.path,r,n),e.args&&(typeof e.args=="string"?e.args=await this._resolveVariables(e.args,r,n):e.args=await Promise.all(e.args.map(f=>this._resolveVariables(f,r,n)))),e}async _resolveVariables(e,t,r){try{e=await this._configurationResolverService.resolveWithEnvironment(t,r,e)}catch(i){this._logService.error("Could not resolve shell",i)}return e}_getOsKey(e){switch(e){case g.Linux:return"linux";case g.Macintosh:return"osx";case g.Windows:return"windows"}}_guessProfileIcon(e){switch(v.parse(e).name){case"bash":return c.terminalBash;case"pwsh":case"powershell":return c.terminalPowershell;case"tmux":return c.terminalTmux;case"cmd":return c.terminalCmd;default:return}}_isValidAutomationProfile(e,t){return e==null||typeof e!="object"?!1:"path"in e&&typeof e.path=="string"}}p([x(200)],k.prototype,"_refreshDefaultProfileName",1);let I=class extends k{constructor(a,e,t,r,i,n,f,u){super({getDefaultSystemShell:async(s,o)=>{const _=await i.getBackend(s);return!s||!_?o===g.Windows?"pwsh":"bash":_.getDefaultSystemShell(o)},getEnvironment:async s=>{const o=await i.getBackend(s);return!s||!o?b:o.getEnvironment()}},e,a,t,r,n,f,u)}};I=p([l(0,N),l(1,C),l(2,V),l(3,E),l(4,j),l(5,B),l(6,U),l(7,F)],I);export{k as BaseTerminalProfileResolverService,I as BrowserTerminalProfileResolverService};
