{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, dispose, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IProcessEnvironment, isMacintosh, isWindows, OperatingSystem, OS } from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { formatMessageForTerminal } from '../../../../platform/terminal/common/terminalStrings.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { getRemoteAuthority } from '../../../../platform/remote/common/remoteHosts.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { ISerializedCommandDetectionCapability, TerminalCapability } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { NaiveCwdDetectionCapability } from '../../../../platform/terminal/common/capabilities/naiveCwdDetectionCapability.js';\nimport { TerminalCapabilityStore } from '../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { FlowControlConstants, IProcessDataEvent, IProcessProperty, IProcessPropertyMap, IProcessReadyEvent, IReconnectionProperties, IShellLaunchConfig, ITerminalBackend, ITerminalChildProcess, ITerminalDimensions, ITerminalEnvironment, ITerminalLaunchError, ITerminalLogService, ITerminalProcessOptions, ProcessPropertyType, TerminalSettingId } from '../../../../platform/terminal/common/terminal.js';\nimport { TerminalRecorder } from '../../../../platform/terminal/common/terminalRecorder.js';\nimport { IWorkspaceContextService, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { EnvironmentVariableInfoChangesActive, EnvironmentVariableInfoStale } from './environmentVariableInfo.js';\nimport { ITerminalConfigurationService, ITerminalInstanceService } from './terminal.js';\nimport { IEnvironmentVariableInfo, IEnvironmentVariableService } from '../common/environmentVariable.js';\nimport { MergedEnvironmentVariableCollection } from '../../../../platform/terminal/common/environmentVariableCollection.js';\nimport { serializeEnvironmentVariableCollections } from '../../../../platform/terminal/common/environmentVariableShared.js';\nimport { IBeforeProcessDataEvent, ITerminalProcessManager, ITerminalProfileResolverService, ProcessState } from '../common/terminal.js';\nimport * as terminalEnvironment from '../common/terminalEnvironment.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { IPathService } from '../../../services/path/common/pathService.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { TaskSettingId } from '../../tasks/common/tasks.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IEnvironmentVariableCollection, IMergedEnvironmentVariableCollection } from '../../../../platform/terminal/common/environmentVariable.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { getActiveWindow, runWhenWindowIdle } from '../../../../base/browser/dom.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { shouldUseEnvironmentVariableCollection } from '../../../../platform/terminal/common/terminalEnvironment.js';\n\n// HACK: This file should not depend on terminalContrib\n// eslint-disable-next-line local/code-import-patterns\nimport { TerminalSuggestSettingId } from '../../terminalContrib/suggest/common/terminalSuggestConfiguration.js';\n\nconst enum ProcessConstants {\n\t/**\n\t * The amount of time to consider terminal errors to be related to the launch.\n\t */\n\tErrorLaunchThresholdDuration = 500,\n\t/**\n\t * The minimum amount of time between latency requests.\n\t */\n\tLatencyMeasuringInterval = 1000,\n}\n\nconst enum ProcessType {\n\tProcess,\n\tPsuedoTerminal\n}\n\n/**\n * Holds all state related to the creation and management of terminal processes.\n *\n * Internal definitions:\n * - Process: The process launched with the terminalProcess.ts file, or the pty as a whole\n * - Pty Process: The pseudoterminal parent process (or the conpty/winpty agent process)\n * - Shell Process: The pseudoterminal child process (ie. the shell)\n */\nexport class TerminalProcessManager extends Disposable implements ITerminalProcessManager {\n\tprocessState: ProcessState = ProcessState.Uninitialized;\n\tptyProcessReady: Promise<void>;\n\tshellProcessId: number | undefined;\n\treadonly remoteAuthority: string | undefined;\n\tos: OperatingSystem | undefined;\n\tuserHome: string | undefined;\n\tenvironmentVariableInfo: IEnvironmentVariableInfo | undefined;\n\tbackend: ITerminalBackend | undefined;\n\treadonly capabilities = this._register(new TerminalCapabilityStore());\n\treadonly shellIntegrationNonce: string;\n\n\tprivate _isDisposed: boolean = false;\n\tprivate _process: ITerminalChildProcess | null = null;\n\tprivate _processType: ProcessType = ProcessType.Process;\n\tprivate _preLaunchInputQueue: string[] = [];\n\tprivate _initialCwd: string | undefined;\n\tprivate _extEnvironmentVariableCollection: IMergedEnvironmentVariableCollection | undefined;\n\tprivate _ackDataBufferer: AckDataBufferer;\n\tprivate _hasWrittenData: boolean = false;\n\tprivate _hasChildProcesses: boolean = false;\n\tprivate _ptyResponsiveListener: IDisposable | undefined;\n\tprivate _ptyListenersAttached: boolean = false;\n\tprivate _dataFilter: SeamlessRelaunchDataFilter;\n\tprivate _processListeners?: IDisposable[];\n\tprivate _isDisconnected: boolean = false;\n\n\tprivate _shellLaunchConfig?: IShellLaunchConfig;\n\tprivate _dimensions: ITerminalDimensions = { cols: 0, rows: 0 };\n\n\tprivate readonly _onPtyDisconnect = this._register(new Emitter<void>());\n\treadonly onPtyDisconnect = this._onPtyDisconnect.event;\n\tprivate readonly _onPtyReconnect = this._register(new Emitter<void>());\n\treadonly onPtyReconnect = this._onPtyReconnect.event;\n\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessStateChange = this._register(new Emitter<void>());\n\treadonly onProcessStateChange = this._onProcessStateChange.event;\n\tprivate readonly _onBeforeProcessData = this._register(new Emitter<IBeforeProcessDataEvent>());\n\treadonly onBeforeProcessData = this._onBeforeProcessData.event;\n\tprivate readonly _onProcessData = this._register(new Emitter<IProcessDataEvent>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReplayComplete = this._register(new Emitter<void>());\n\treadonly onProcessReplayComplete = this._onProcessReplayComplete.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onEnvironmentVariableInfoChange = this._register(new Emitter<IEnvironmentVariableInfo>());\n\treadonly onEnvironmentVariableInfoChanged = this._onEnvironmentVariableInfoChange.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\tprivate readonly _onRestoreCommands = this._register(new Emitter<ISerializedCommandDetectionCapability>());\n\treadonly onRestoreCommands = this._onRestoreCommands.event;\n\tprivate _cwdWorkspaceFolder: IWorkspaceFolder | undefined;\n\n\tget persistentProcessId(): number | undefined { return this._process?.id; }\n\tget shouldPersist(): boolean { return !!this.reconnectionProperties || (this._process ? this._process.shouldPersist : false); }\n\tget hasWrittenData(): boolean { return this._hasWrittenData; }\n\tget hasChildProcesses(): boolean { return this._hasChildProcesses; }\n\tget reconnectionProperties(): IReconnectionProperties | undefined { return this._shellLaunchConfig?.attachPersistentProcess?.reconnectionProperties || this._shellLaunchConfig?.reconnectionProperties || undefined; }\n\tget extEnvironmentVariableCollection(): IMergedEnvironmentVariableCollection | undefined { return this._extEnvironmentVariableCollection; }\n\n\tconstructor(\n\t\tprivate readonly _instanceId: number,\n\t\tcwd: string | URI | undefined,\n\t\tenvironmentVariableCollections: ReadonlyMap<string, IEnvironmentVariableCollection> | undefined,\n\t\tshellIntegrationNonce: string | undefined,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IWorkbenchEnvironmentService private readonly _workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly _notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis._cwdWorkspaceFolder = terminalEnvironment.getWorkspaceForTerminal(cwd, this._workspaceContextService, this._historyService);\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis._ackDataBufferer = new AckDataBufferer(e => this._process?.acknowledgeDataEvent(e));\n\t\tthis._dataFilter = this._register(this._instantiationService.createInstance(SeamlessRelaunchDataFilter));\n\t\tthis._register(this._dataFilter.onProcessData(ev => {\n\t\t\tconst data = (typeof ev === 'string' ? ev : ev.data);\n\t\t\tconst beforeProcessDataEvent: IBeforeProcessDataEvent = { data };\n\t\t\tthis._onBeforeProcessData.fire(beforeProcessDataEvent);\n\t\t\tif (beforeProcessDataEvent.data && beforeProcessDataEvent.data.length > 0) {\n\t\t\t\t// This event is used by the caller so the object must be reused\n\t\t\t\tif (typeof ev !== 'string') {\n\t\t\t\t\tev.data = beforeProcessDataEvent.data;\n\t\t\t\t}\n\t\t\t\tthis._onProcessData.fire(typeof ev !== 'string' ? ev : { data: beforeProcessDataEvent.data, trackCommit: false });\n\t\t\t}\n\t\t}));\n\n\t\tif (cwd && typeof cwd === 'object') {\n\t\t\tthis.remoteAuthority = getRemoteAuthority(cwd);\n\t\t} else {\n\t\t\tthis.remoteAuthority = this._workbenchEnvironmentService.remoteAuthority;\n\t\t}\n\n\t\tif (environmentVariableCollections) {\n\t\t\tthis._extEnvironmentVariableCollection = new MergedEnvironmentVariableCollection(environmentVariableCollections);\n\t\t\tthis._register(this._environmentVariableService.onDidChangeCollections(newCollection => this._onEnvironmentVariableCollectionChange(newCollection)));\n\t\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoChangesActive, this._extEnvironmentVariableCollection);\n\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t}\n\n\t\tthis.shellIntegrationNonce = shellIntegrationNonce ?? generateUuid();\n\t}\n\n\tasync freePortKillProcess(port: string): Promise<void> {\n\t\ttry {\n\t\t\tif (this._process?.freePortKillProcess) {\n\t\t\t\tawait this._process?.freePortKillProcess(port);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._notificationService.notify({ message: localize('killportfailure', 'Could not kill process listening on port {0}, command exited with error {1}', port, e), severity: Severity.Warning });\n\t\t}\n\t}\n\n\toverride dispose(immediate: boolean = false): void {\n\t\tthis._isDisposed = true;\n\t\tif (this._process) {\n\t\t\t// If the process was still connected this dispose came from\n\t\t\t// within VS Code, not the process, so mark the process as\n\t\t\t// killed by the user.\n\t\t\tthis._setProcessState(ProcessState.KilledByUser);\n\t\t\tthis._process.shutdown(immediate);\n\t\t\tthis._process = null;\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\tprivate _createPtyProcessReadyPromise(): Promise<void> {\n\n\t\treturn new Promise<void>(c => {\n\t\t\tconst listener = Event.once(this.onProcessReady)(() => {\n\t\t\t\tthis._logService.debug(`Terminal process ready (shellProcessId: ${this.shellProcessId})`);\n\t\t\t\tthis._store.delete(listener);\n\t\t\t\tc(undefined);\n\t\t\t});\n\t\t\tthis._store.add(listener);\n\t\t});\n\t}\n\n\tasync detachFromProcess(forcePersist?: boolean): Promise<void> {\n\t\tawait this._process?.detach?.(forcePersist);\n\t\tthis._process = null;\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\treset: boolean = true\n\t): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tthis._shellLaunchConfig = shellLaunchConfig;\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\n\t\tlet newProcess: ITerminalChildProcess | undefined;\n\n\t\tif (shellLaunchConfig.customPtyImplementation) {\n\t\t\tthis._processType = ProcessType.PsuedoTerminal;\n\t\t\tnewProcess = shellLaunchConfig.customPtyImplementation(this._instanceId, cols, rows);\n\t\t} else {\n\t\t\tconst backend = await this._terminalInstanceService.getBackend(this.remoteAuthority);\n\t\t\tif (!backend) {\n\t\t\t\tthrow new Error(`No terminal backend registered for remote authority '${this.remoteAuthority}'`);\n\t\t\t}\n\t\t\tthis.backend = backend;\n\n\t\t\t// Create variable resolver\n\t\t\tconst variableResolver = terminalEnvironment.createVariableResolver(this._cwdWorkspaceFolder, await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority), this._configurationResolverService);\n\n\t\t\t// resolvedUserHome is needed here as remote resolvers can launch local terminals before\n\t\t\t// they're connected to the remote.\n\t\t\tthis.userHome = this._pathService.resolvedUserHome?.fsPath;\n\t\t\tthis.os = OS;\n\t\t\tif (!!this.remoteAuthority) {\n\n\t\t\t\tconst userHomeUri = await this._pathService.userHome();\n\t\t\t\tthis.userHome = userHomeUri.path;\n\t\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error(`Failed to get remote environment for remote authority \"${this.remoteAuthority}\"`);\n\t\t\t\t}\n\t\t\t\tthis.userHome = remoteEnv.userHome.path;\n\t\t\t\tthis.os = remoteEnv.os;\n\n\t\t\t\t// this is a copy of what the merged environment collection is on the remote side\n\t\t\t\tconst env = await this._resolveEnvironment(backend, variableResolver, shellLaunchConfig);\n\t\t\t\tconst shouldPersist = ((this._configurationService.getValue(TaskSettingId.Reconnection) && shellLaunchConfig.reconnectionProperties) || !shellLaunchConfig.isFeatureTerminal) && this._terminalConfigurationService.config.enablePersistentSessions && !shellLaunchConfig.isTransient;\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = await backend.attachToProcess(shellLaunchConfig.attachPersistentProcess.id);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Warn and just create a new terminal if attach failed for some reason\n\t\t\t\t\t\tthis._logService.warn(`Attach to process failed for terminal`, shellLaunchConfig.attachPersistentProcess);\n\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!newProcess) {\n\t\t\t\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(shellLaunchConfig, {\n\t\t\t\t\t\tremoteAuthority: this.remoteAuthority,\n\t\t\t\t\t\tos: this.os\n\t\t\t\t\t});\n\t\t\t\t\tconst options: ITerminalProcessOptions = {\n\t\t\t\t\t\tshellIntegration: {\n\t\t\t\t\t\t\tenabled: this._configurationService.getValue(TerminalSettingId.ShellIntegrationEnabled),\n\t\t\t\t\t\t\tsuggestEnabled: this._configurationService.getValue(TerminalSuggestSettingId.Enabled),\n\t\t\t\t\t\t\tnonce: this.shellIntegrationNonce\n\t\t\t\t\t\t},\n\t\t\t\t\t\twindowsEnableConpty: this._terminalConfigurationService.config.windowsEnableConpty,\n\t\t\t\t\t\twindowsUseConptyDll: this._terminalConfigurationService.config.experimental?.windowsUseConptyDll ?? false,\n\t\t\t\t\t\tenvironmentVariableCollections: this._extEnvironmentVariableCollection?.collections ? serializeEnvironmentVariableCollections(this._extEnvironmentVariableCollection.collections) : undefined,\n\t\t\t\t\t\tworkspaceFolder: this._cwdWorkspaceFolder,\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnewProcess = await backend.createProcess(\n\t\t\t\t\t\t\tshellLaunchConfig,\n\t\t\t\t\t\t\t'', // TODO: Fix cwd\n\t\t\t\t\t\t\tcols,\n\t\t\t\t\t\t\trows,\n\t\t\t\t\t\t\tthis._terminalConfigurationService.config.unicodeVersion,\n\t\t\t\t\t\t\tenv, // TODO:\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tshouldPersist\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e?.message === 'Could not fetch remote environment') {\n\t\t\t\t\t\t\tthis._logService.trace(`Could not fetch remote environment, silently failing`);\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(backend);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = shellLaunchConfig.attachPersistentProcess.findRevivedId ? await backend.attachToRevivedProcess(shellLaunchConfig.attachPersistentProcess.id) : await backend.attachToProcess(shellLaunchConfig.attachPersistentProcess.id);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Warn and just create a new terminal if attach failed for some reason\n\t\t\t\t\t\tthis._logService.warn(`Attach to process failed for terminal`, shellLaunchConfig.attachPersistentProcess);\n\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!newProcess) {\n\t\t\t\t\tnewProcess = await this._launchLocalProcess(backend, shellLaunchConfig, cols, rows, this.userHome, variableResolver);\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(backend);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the process was disposed during its creation, shut it down and return failure\n\t\tif (this._isDisposed) {\n\t\t\tnewProcess.shutdown(false);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._process = newProcess;\n\t\tthis._setProcessState(ProcessState.Launching);\n\n\t\t// Add any capabilities inherent to the backend\n\t\tif (this.os === OperatingSystem.Linux || this.os === OperatingSystem.Macintosh) {\n\t\t\tthis.capabilities.add(TerminalCapability.NaiveCwdDetection, new NaiveCwdDetectionCapability(this._process));\n\t\t}\n\n\t\tthis._dataFilter.newProcess(this._process, reset);\n\n\t\tif (this._processListeners) {\n\t\t\tdispose(this._processListeners);\n\t\t}\n\t\tthis._processListeners = [\n\t\t\tnewProcess.onProcessReady((e: IProcessReadyEvent) => {\n\t\t\t\tthis.shellProcessId = e.pid;\n\t\t\t\tthis._initialCwd = e.cwd;\n\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.InitialCwd, value: this._initialCwd });\n\t\t\t\tthis._onProcessReady.fire(e);\n\n\t\t\t\tif (this._preLaunchInputQueue.length > 0 && this._process) {\n\t\t\t\t\t// Send any queued data that's waiting\n\t\t\t\t\tnewProcess.input(this._preLaunchInputQueue.join(''));\n\t\t\t\t\tthis._preLaunchInputQueue.length = 0;\n\t\t\t\t}\n\t\t\t}),\n\t\t\tnewProcess.onProcessExit(exitCode => this._onExit(exitCode)),\n\t\t\tnewProcess.onDidChangeProperty(({ type, value }) => {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase ProcessPropertyType.HasChildProcesses:\n\t\t\t\t\t\tthis._hasChildProcesses = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.FailedShellIntegrationActivation:\n\t\t\t\t\t\tthis._telemetryService?.publicLog2<{}, { owner: 'meganrogge'; comment: 'Indicates shell integration was not activated because of custom args' }>('terminal/shellIntegrationActivationFailureCustomArgs');\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeProperty.fire({ type, value });\n\t\t\t})\n\t\t];\n\t\tif (newProcess.onProcessReplayComplete) {\n\t\t\tthis._processListeners.push(newProcess.onProcessReplayComplete(() => this._onProcessReplayComplete.fire()));\n\t\t}\n\t\tif (newProcess.onRestoreCommands) {\n\t\t\tthis._processListeners.push(newProcess.onRestoreCommands(e => this._onRestoreCommands.fire(e)));\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tif (this.processState === ProcessState.Launching) {\n\t\t\t\tthis._setProcessState(ProcessState.Running);\n\t\t\t}\n\t\t}, ProcessConstants.ErrorLaunchThresholdDuration);\n\n\t\tconst result = await newProcess.start();\n\t\tif (result) {\n\t\t\t// Error\n\t\t\treturn result;\n\t\t}\n\n\t\t// Report the latency to the pty host when idle\n\t\trunWhenWindowIdle(getActiveWindow(), () => {\n\t\t\tthis.backend?.getLatency().then(measurements => {\n\t\t\t\tthis._logService.info(`Latency measurements for ${this.remoteAuthority ?? 'local'} backend\\n${measurements.map(e => `${e.label}: ${e.latency.toFixed(2)}ms`).join('\\n')}`);\n\t\t\t});\n\t\t});\n\n\t\treturn undefined;\n\t}\n\n\tasync relaunch(shellLaunchConfig: IShellLaunchConfig, cols: number, rows: number, reset: boolean): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis._logService.trace(`Relaunching terminal instance ${this._instanceId}`);\n\n\t\t// Fire reconnect if needed to ensure the terminal is usable again\n\t\tif (this._isDisconnected) {\n\t\t\tthis._isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t}\n\n\t\t// Clear data written flag to re-enable seamless relaunch if this relaunch was manually\n\t\t// triggered\n\t\tthis._hasWrittenData = false;\n\n\t\treturn this.createProcess(shellLaunchConfig, cols, rows, reset);\n\t}\n\n\t// Fetch any extension environment additions and apply them\n\tprivate async _resolveEnvironment(backend: ITerminalBackend, variableResolver: terminalEnvironment.VariableResolver | undefined, shellLaunchConfig: IShellLaunchConfig): Promise<IProcessEnvironment> {\n\t\tconst workspaceFolder = terminalEnvironment.getWorkspaceForTerminal(shellLaunchConfig.cwd, this._workspaceContextService, this._historyService);\n\t\tconst platformKey = isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t\tconst envFromConfigValue = this._configurationService.getValue<ITerminalEnvironment | undefined>(`terminal.integrated.env.${platformKey}`);\n\n\t\tlet baseEnv: IProcessEnvironment;\n\t\tif (shellLaunchConfig.useShellEnvironment) {\n\t\t\t// TODO: Avoid as any?\n\t\t\tbaseEnv = await backend.getShellEnvironment() as any;\n\t\t} else {\n\t\t\tbaseEnv = await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority);\n\t\t}\n\t\tconst env = await terminalEnvironment.createTerminalEnvironment(shellLaunchConfig, envFromConfigValue, variableResolver, this._productService.version, this._terminalConfigurationService.config.detectLocale, baseEnv);\n\t\tif (!this._isDisposed && shouldUseEnvironmentVariableCollection(shellLaunchConfig)) {\n\t\t\tthis._extEnvironmentVariableCollection = this._environmentVariableService.mergedCollection;\n\n\t\t\tthis._register(this._environmentVariableService.onDidChangeCollections(newCollection => this._onEnvironmentVariableCollectionChange(newCollection)));\n\t\t\t// For remote terminals, this is a copy of the mergedEnvironmentCollection created on\n\t\t\t// the remote side. Since the environment collection is synced between the remote and\n\t\t\t// local sides immediately this is a fairly safe way of enabling the env var diffing and\n\t\t\t// info widget. While technically these could differ due to the slight change of a race\n\t\t\t// condition, the chance is minimal plus the impact on the user is also not that great\n\t\t\t// if it happens - it's not worth adding plumbing to sync back the resolved collection.\n\t\t\tawait this._extEnvironmentVariableCollection.applyToProcessEnvironment(env, { workspaceFolder }, variableResolver);\n\t\t\tif (this._extEnvironmentVariableCollection.getVariableMap({ workspaceFolder }).size) {\n\t\t\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoChangesActive, this._extEnvironmentVariableCollection);\n\t\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t\t}\n\t\t}\n\t\treturn env;\n\t}\n\n\tprivate async _launchLocalProcess(\n\t\tbackend: ITerminalBackend,\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\tuserHome: string | undefined,\n\t\tvariableResolver: terminalEnvironment.VariableResolver | undefined\n\t): Promise<ITerminalChildProcess> {\n\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(shellLaunchConfig, {\n\t\t\tremoteAuthority: undefined,\n\t\t\tos: OS\n\t\t});\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\n\t\tconst initialCwd = await terminalEnvironment.getCwd(\n\t\t\tshellLaunchConfig,\n\t\t\tuserHome,\n\t\t\tvariableResolver,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\tthis._terminalConfigurationService.config.cwd,\n\t\t\tthis._logService\n\t\t);\n\n\t\tconst env = await this._resolveEnvironment(backend, variableResolver, shellLaunchConfig);\n\n\t\tconst options: ITerminalProcessOptions = {\n\t\t\tshellIntegration: {\n\t\t\t\tenabled: this._configurationService.getValue(TerminalSettingId.ShellIntegrationEnabled),\n\t\t\t\tsuggestEnabled: this._configurationService.getValue(TerminalSuggestSettingId.Enabled),\n\t\t\t\tnonce: this.shellIntegrationNonce\n\t\t\t},\n\t\t\twindowsEnableConpty: this._terminalConfigurationService.config.windowsEnableConpty,\n\t\t\twindowsUseConptyDll: this._terminalConfigurationService.config.experimental?.windowsUseConptyDll ?? false,\n\t\t\tenvironmentVariableCollections: this._extEnvironmentVariableCollection ? serializeEnvironmentVariableCollections(this._extEnvironmentVariableCollection.collections) : undefined,\n\t\t\tworkspaceFolder: this._cwdWorkspaceFolder,\n\t\t};\n\t\tconst shouldPersist = ((this._configurationService.getValue(TaskSettingId.Reconnection) && shellLaunchConfig.reconnectionProperties) || !shellLaunchConfig.isFeatureTerminal) && this._terminalConfigurationService.config.enablePersistentSessions && !shellLaunchConfig.isTransient;\n\t\treturn await backend.createProcess(shellLaunchConfig, initialCwd, cols, rows, this._terminalConfigurationService.config.unicodeVersion, env, options, shouldPersist);\n\t}\n\n\tprivate _setupPtyHostListeners(backend: ITerminalBackend) {\n\t\tif (this._ptyListenersAttached) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ptyListenersAttached = true;\n\n\t\t// Mark the process as disconnected is the pty host is unresponsive, the responsive event\n\t\t// will fire only when the pty host was already unresponsive\n\t\tthis._register(backend.onPtyHostUnresponsive(() => {\n\t\t\tthis._isDisconnected = true;\n\t\t\tthis._onPtyDisconnect.fire();\n\t\t}));\n\t\tthis._ptyResponsiveListener = backend.onPtyHostResponsive(() => {\n\t\t\tthis._isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t});\n\t\tthis._register(toDisposable(() => this._ptyResponsiveListener?.dispose()));\n\n\t\t// When the pty host restarts, reconnect is no longer possible so dispose the responsive\n\t\t// listener\n\t\tthis._register(backend.onPtyHostRestart(async () => {\n\t\t\t// When the pty host restarts, reconnect is no longer possible\n\t\t\tif (!this._isDisconnected) {\n\t\t\t\tthis._isDisconnected = true;\n\t\t\t\tthis._onPtyDisconnect.fire();\n\t\t\t}\n\t\t\tthis._ptyResponsiveListener?.dispose();\n\t\t\tthis._ptyResponsiveListener = undefined;\n\t\t\tif (this._shellLaunchConfig) {\n\t\t\t\tif (this._shellLaunchConfig.isFeatureTerminal && !this.reconnectionProperties) {\n\t\t\t\t\t// Indicate the process is exited (and gone forever) only for feature terminals\n\t\t\t\t\t// so they can react to the exit, this is particularly important for tasks so\n\t\t\t\t\t// that it knows that the process is not still active. Note that this is not\n\t\t\t\t\t// done for regular terminals because otherwise the terminal instance would be\n\t\t\t\t\t// disposed.\n\t\t\t\t\tthis._onExit(-1);\n\t\t\t\t} else {\n\t\t\t\t\t// For normal terminals write a message indicating what happened and relaunch\n\t\t\t\t\t// using the previous shellLaunchConfig\n\t\t\t\t\tconst message = localize('ptyHostRelaunch', \"Restarting the terminal because the connection to the shell process was lost...\");\n\t\t\t\t\tthis._onProcessData.fire({ data: formatMessageForTerminal(message, { loudFormatting: true }), trackCommit: false });\n\t\t\t\t\tawait this.relaunch(this._shellLaunchConfig, this._dimensions.cols, this._dimensions.rows, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync getBackendOS(): Promise<OperatingSystem> {\n\t\tlet os = OS;\n\t\tif (!!this.remoteAuthority) {\n\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\tif (!remoteEnv) {\n\t\t\t\tthrow new Error(`Failed to get remote environment for remote authority \"${this.remoteAuthority}\"`);\n\t\t\t}\n\t\t\tos = remoteEnv.os;\n\t\t}\n\t\treturn os;\n\t}\n\n\tsetDimensions(cols: number, rows: number): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: false): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: true): void;\n\tsetDimensions(cols: number, rows: number, sync?: boolean): Promise<void> | void {\n\t\tif (sync) {\n\t\t\tthis._resize(cols, rows);\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.ptyProcessReady.then(() => this._resize(cols, rows));\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\treturn this._process?.setUnicodeVersion(version);\n\t}\n\n\tprivate _resize(cols: number, rows: number) {\n\t\tif (!this._process) {\n\t\t\treturn;\n\t\t}\n\t\t// The child process could already be terminated\n\t\ttry {\n\t\t\tthis._process.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {\n\t\t\t\tthrow (error);\n\t\t\t}\n\t\t}\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\t}\n\n\tasync write(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tif (this.shellProcessId || this._processType === ProcessType.PsuedoTerminal) {\n\t\t\tif (this._process) {\n\t\t\t\t// Send data if the pty is ready\n\t\t\t\tthis._process.input(data);\n\t\t\t}\n\t\t} else {\n\t\t\t// If the pty is not ready, queue the data received to send later\n\t\t\tthis._preLaunchInputQueue.push(data);\n\t\t}\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tthis._process?.processBinary(data);\n\t}\n\n\tget initialCwd(): string {\n\t\treturn this._initialCwd ?? '';\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\tif (!this._process) {\n\t\t\tthrow new Error('Cannot refresh property when process is not set');\n\t\t}\n\t\treturn this._process.refreshProperty(type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._process?.updateProperty(type, value);\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tthis._ackDataBufferer.ack(charCount);\n\t}\n\n\tprivate _onExit(exitCode: number | undefined): void {\n\t\tthis._process = null;\n\t\t// If the process is marked as launching then mark the process as killed\n\t\t// during launch. This typically means that there is a problem with the\n\t\t// shell and args.\n\t\tif (this.processState === ProcessState.Launching) {\n\t\t\tthis._setProcessState(ProcessState.KilledDuringLaunch);\n\t\t}\n\n\t\t// If TerminalInstance did not know about the process exit then it was\n\t\t// triggered by the process, not on VS Code's side.\n\t\tif (this.processState === ProcessState.Running) {\n\t\t\tthis._setProcessState(ProcessState.KilledByProcess);\n\t\t}\n\n\t\tthis._onProcessExit.fire(exitCode);\n\t}\n\n\tprivate _setProcessState(state: ProcessState) {\n\t\tthis.processState = state;\n\t\tthis._onProcessStateChange.fire();\n\t}\n\n\tprivate _onEnvironmentVariableCollectionChange(newCollection: IMergedEnvironmentVariableCollection): void {\n\t\tconst diff = this._extEnvironmentVariableCollection!.diff(newCollection, { workspaceFolder: this._cwdWorkspaceFolder });\n\t\tif (diff === undefined) {\n\t\t\t// If there are no longer differences, remove the stale info indicator\n\t\t\tif (this.environmentVariableInfo instanceof EnvironmentVariableInfoStale) {\n\t\t\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoChangesActive, this._extEnvironmentVariableCollection!);\n\t\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoStale, diff, this._instanceId, newCollection);\n\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t}\n\n\tasync clearBuffer(): Promise<void> {\n\t\tthis._process?.clearBuffer?.();\n\t}\n}\n\nclass AckDataBufferer {\n\tprivate _unsentCharCount: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _callback: (charCount: number) => void\n\t) {\n\t}\n\n\tack(charCount: number) {\n\t\tthis._unsentCharCount += charCount;\n\t\twhile (this._unsentCharCount > FlowControlConstants.CharCountAckSize) {\n\t\t\tthis._unsentCharCount -= FlowControlConstants.CharCountAckSize;\n\t\t\tthis._callback(FlowControlConstants.CharCountAckSize);\n\t\t}\n\t}\n}\n\nconst enum SeamlessRelaunchConstants {\n\t/**\n\t * How long to record data events for new terminals.\n\t */\n\tRecordTerminalDuration = 10000,\n\t/**\n\t * The maximum duration after a relaunch occurs to trigger a swap.\n\t */\n\tSwapWaitMaximumDuration = 3000\n}\n\n/**\n * Filters data events from the process and supports seamlessly restarting swapping out the process\n * with another, delaying the swap in output in order to minimize flickering/clearing of the\n * terminal.\n */\nclass SeamlessRelaunchDataFilter extends Disposable {\n\tprivate _firstRecorder?: TerminalRecorder;\n\tprivate _secondRecorder?: TerminalRecorder;\n\tprivate _firstDisposable?: IDisposable;\n\tprivate _secondDisposable?: IDisposable;\n\tprivate _dataListener?: IDisposable;\n\tprivate _activeProcess?: ITerminalChildProcess;\n\tprivate _disableSeamlessRelaunch: boolean = false;\n\n\tprivate _swapTimeout?: number;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string | IProcessDataEvent>());\n\tget onProcessData(): Event<string | IProcessDataEvent> { return this._onProcessData.event; }\n\n\tconstructor(\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService\n\t) {\n\t\tsuper();\n\t}\n\n\tnewProcess(process: ITerminalChildProcess, reset: boolean) {\n\t\t// Stop listening to the old process and trigger delayed shutdown (for hang issue #71966)\n\t\tthis._dataListener?.dispose();\n\t\tthis._activeProcess?.shutdown(false);\n\n\t\tthis._activeProcess = process;\n\n\t\t// Start firing events immediately if:\n\t\t// - there's no recorder, which means it's a new terminal\n\t\t// - this is not a reset, so seamless relaunch isn't necessary\n\t\t// - seamless relaunch is disabled because the terminal has accepted input\n\t\tif (!this._firstRecorder || !reset || this._disableSeamlessRelaunch) {\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\t[this._firstRecorder, this._firstDisposable] = this._createRecorder(process);\n\t\t\tif (this._disableSeamlessRelaunch && reset) {\n\t\t\t\tthis._onProcessData.fire('\\x1bc');\n\t\t\t}\n\t\t\tthis._dataListener = process.onProcessData(e => this._onProcessData.fire(e));\n\t\t\tthis._disableSeamlessRelaunch = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger a swap if there was a recent relaunch\n\t\tif (this._secondRecorder) {\n\t\t\tthis.triggerSwap();\n\t\t}\n\n\t\tthis._swapTimeout = mainWindow.setTimeout(() => this.triggerSwap(), SeamlessRelaunchConstants.SwapWaitMaximumDuration);\n\n\t\t// Pause all outgoing data events\n\t\tthis._dataListener?.dispose();\n\n\t\tthis._firstDisposable?.dispose();\n\t\tconst recorder = this._createRecorder(process);\n\t\t[this._secondRecorder, this._secondDisposable] = recorder;\n\t}\n\n\t/**\n\t * Disables seamless relaunch for the active process\n\t */\n\tdisableSeamlessRelaunch() {\n\t\tthis._disableSeamlessRelaunch = true;\n\t\tthis._stopRecording();\n\t\tthis.triggerSwap();\n\t}\n\n\t/**\n\t * Trigger the swap of the processes if needed (eg. timeout, input)\n\t */\n\ttriggerSwap() {\n\t\t// Clear the swap timeout if it exists\n\t\tif (this._swapTimeout) {\n\t\t\tmainWindow.clearTimeout(this._swapTimeout);\n\t\t\tthis._swapTimeout = undefined;\n\t\t}\n\n\t\t// Do nothing if there's nothing being recorder\n\t\tif (!this._firstRecorder) {\n\t\t\treturn;\n\t\t}\n\t\t// Clear the first recorder if no second process was attached before the swap trigger\n\t\tif (!this._secondRecorder) {\n\t\t\tthis._firstRecorder = undefined;\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Generate data for each recorder\n\t\tconst firstData = this._getDataFromRecorder(this._firstRecorder);\n\t\tconst secondData = this._getDataFromRecorder(this._secondRecorder);\n\n\t\t// Re-write the terminal if the data differs\n\t\tif (firstData === secondData) {\n\t\t\tthis._logService.trace(`Seamless terminal relaunch - identical content`);\n\t\t} else {\n\t\t\tthis._logService.trace(`Seamless terminal relaunch - resetting content`);\n\t\t\t// Fire full reset (RIS) followed by the new data so the update happens in the same frame\n\t\t\tthis._onProcessData.fire({ data: `\\x1bc${secondData}`, trackCommit: false });\n\t\t}\n\n\t\t// Set up the new data listener\n\t\tthis._dataListener?.dispose();\n\t\tthis._dataListener = this._activeProcess!.onProcessData(e => this._onProcessData.fire(e));\n\n\t\t// Replace first recorder with second\n\t\tthis._firstRecorder = this._secondRecorder;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._firstDisposable = this._secondDisposable;\n\t\tthis._secondRecorder = undefined;\n\t}\n\n\tprivate _stopRecording() {\n\t\t// Continue recording if a swap is coming\n\t\tif (this._swapTimeout) {\n\t\t\treturn;\n\t\t}\n\t\t// Stop recording\n\t\tthis._firstRecorder = undefined;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._secondRecorder = undefined;\n\t\tthis._secondDisposable?.dispose();\n\t}\n\n\tprivate _createRecorder(process: ITerminalChildProcess): [TerminalRecorder, IDisposable] {\n\t\tconst recorder = new TerminalRecorder(0, 0);\n\t\tconst disposable = process.onProcessData(e => recorder.handleData(typeof e === 'string' ? e : e.data));\n\t\treturn [recorder, disposable];\n\t}\n\n\tprivate _getDataFromRecorder(recorder: TerminalRecorder): string {\n\t\treturn recorder.generateReplayEventSync().events.filter(e => !!e.data).map(e => e.data).join('');\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ProcessConstants", "ProcessType", "result", "SeamlessRelaunchConstants"]
}
