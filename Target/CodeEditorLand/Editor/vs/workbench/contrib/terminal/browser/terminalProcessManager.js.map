{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tgetActiveWindow,\n\trunWhenWindowIdle,\n} from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\tOperatingSystem,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { getRemoteAuthority } from \"../../../../platform/remote/common/remoteHosts.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype ISerializedCommandDetectionCapability,\n\tTerminalCapability,\n} from \"../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport { NaiveCwdDetectionCapability } from \"../../../../platform/terminal/common/capabilities/naiveCwdDetectionCapability.js\";\nimport { TerminalCapabilityStore } from \"../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js\";\nimport type {\n\tIEnvironmentVariableCollection,\n\tIMergedEnvironmentVariableCollection,\n} from \"../../../../platform/terminal/common/environmentVariable.js\";\nimport { MergedEnvironmentVariableCollection } from \"../../../../platform/terminal/common/environmentVariableCollection.js\";\nimport { serializeEnvironmentVariableCollections } from \"../../../../platform/terminal/common/environmentVariableShared.js\";\nimport {\n\tFlowControlConstants,\n\ttype IProcessDataEvent,\n\ttype IProcessProperty,\n\ttype IProcessPropertyMap,\n\ttype IProcessReadyEvent,\n\ttype IReconnectionProperties,\n\ttype IShellLaunchConfig,\n\ttype ITerminalBackend,\n\ttype ITerminalChildProcess,\n\ttype ITerminalDimensions,\n\ttype ITerminalEnvironment,\n\ttype ITerminalLaunchError,\n\tITerminalLogService,\n\ttype ITerminalProcessOptions,\n\tProcessPropertyType,\n\tTerminalSettingId,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { shouldUseEnvironmentVariableCollection } from \"../../../../platform/terminal/common/terminalEnvironment.js\";\nimport { TerminalRecorder } from \"../../../../platform/terminal/common/terminalRecorder.js\";\nimport { formatMessageForTerminal } from \"../../../../platform/terminal/common/terminalStrings.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { IPathService } from \"../../../services/path/common/pathService.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport { TaskSettingId } from \"../../tasks/common/tasks.js\";\nimport {\n\ttype IEnvironmentVariableInfo,\n\tIEnvironmentVariableService,\n} from \"../common/environmentVariable.js\";\nimport {\n\ttype IBeforeProcessDataEvent,\n\ttype ITerminalProcessManager,\n\tITerminalProfileResolverService,\n\tProcessState,\n} from \"../common/terminal.js\";\nimport * as terminalEnvironment from \"../common/terminalEnvironment.js\";\nimport {\n\tEnvironmentVariableInfoChangesActive,\n\tEnvironmentVariableInfoStale,\n} from \"./environmentVariableInfo.js\";\nimport {\n\tITerminalConfigurationService,\n\tITerminalInstanceService,\n} from \"./terminal.js\";\n\n// HACK: This file should not depend on terminalContrib\n// eslint-disable-next-line local/code-import-patterns\nimport { TerminalSuggestSettingId } from \"../../terminalContrib/suggest/common/terminalSuggestConfiguration.js\";\n\nenum ProcessConstants {\n\t/**\n\t * The amount of time to consider terminal errors to be related to the launch.\n\t */\n\tErrorLaunchThresholdDuration = 500,\n\t/**\n\t * The minimum amount of time between latency requests.\n\t */\n\tLatencyMeasuringInterval = 1000,\n}\n\nenum ProcessType {\n\tProcess = 0,\n\tPsuedoTerminal = 1,\n}\n\n/**\n * Holds all state related to the creation and management of terminal processes.\n *\n * Internal definitions:\n * - Process: The process launched with the terminalProcess.ts file, or the pty as a whole\n * - Pty Process: The pseudoterminal parent process (or the conpty/winpty agent process)\n * - Shell Process: The pseudoterminal child process (ie. the shell)\n */\nexport class TerminalProcessManager\n\textends Disposable\n\timplements ITerminalProcessManager\n{\n\tprocessState: ProcessState = ProcessState.Uninitialized;\n\tptyProcessReady: Promise<void>;\n\tshellProcessId: number | undefined;\n\treadonly remoteAuthority: string | undefined;\n\tos: OperatingSystem | undefined;\n\tuserHome: string | undefined;\n\tenvironmentVariableInfo: IEnvironmentVariableInfo | undefined;\n\tbackend: ITerminalBackend | undefined;\n\treadonly capabilities = this._register(new TerminalCapabilityStore());\n\treadonly shellIntegrationNonce: string;\n\n\tprivate _isDisposed = false;\n\tprivate _process: ITerminalChildProcess | null = null;\n\tprivate _processType: ProcessType = ProcessType.Process;\n\tprivate _preLaunchInputQueue: string[] = [];\n\tprivate _initialCwd: string | undefined;\n\tprivate _extEnvironmentVariableCollection:\n\t\t| IMergedEnvironmentVariableCollection\n\t\t| undefined;\n\tprivate _ackDataBufferer: AckDataBufferer;\n\tprivate _hasWrittenData = false;\n\tprivate _hasChildProcesses = false;\n\tprivate _ptyResponsiveListener: IDisposable | undefined;\n\tprivate _ptyListenersAttached = false;\n\tprivate _dataFilter: SeamlessRelaunchDataFilter;\n\tprivate _processListeners?: IDisposable[];\n\tprivate _isDisconnected = false;\n\n\tprivate _shellLaunchConfig?: IShellLaunchConfig;\n\tprivate _dimensions: ITerminalDimensions = { cols: 0, rows: 0 };\n\n\tprivate readonly _onPtyDisconnect = this._register(new Emitter<void>());\n\treadonly onPtyDisconnect = this._onPtyDisconnect.event;\n\tprivate readonly _onPtyReconnect = this._register(new Emitter<void>());\n\treadonly onPtyReconnect = this._onPtyReconnect.event;\n\n\tprivate readonly _onProcessReady = this._register(\n\t\tnew Emitter<IProcessReadyEvent>(),\n\t);\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessStateChange = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onProcessStateChange = this._onProcessStateChange.event;\n\tprivate readonly _onBeforeProcessData = this._register(\n\t\tnew Emitter<IBeforeProcessDataEvent>(),\n\t);\n\treadonly onBeforeProcessData = this._onBeforeProcessData.event;\n\tprivate readonly _onProcessData = this._register(\n\t\tnew Emitter<IProcessDataEvent>(),\n\t);\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReplayComplete = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onProcessReplayComplete = this._onProcessReplayComplete.event;\n\tprivate readonly _onDidChangeProperty = this._register(\n\t\tnew Emitter<IProcessProperty<any>>(),\n\t);\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onEnvironmentVariableInfoChange = this._register(\n\t\tnew Emitter<IEnvironmentVariableInfo>(),\n\t);\n\treadonly onEnvironmentVariableInfoChanged =\n\t\tthis._onEnvironmentVariableInfoChange.event;\n\tprivate readonly _onProcessExit = this._register(\n\t\tnew Emitter<number | undefined>(),\n\t);\n\treadonly onProcessExit = this._onProcessExit.event;\n\tprivate readonly _onRestoreCommands = this._register(\n\t\tnew Emitter<ISerializedCommandDetectionCapability>(),\n\t);\n\treadonly onRestoreCommands = this._onRestoreCommands.event;\n\tprivate _cwdWorkspaceFolder: IWorkspaceFolder | undefined;\n\n\tget persistentProcessId(): number | undefined {\n\t\treturn this._process?.id;\n\t}\n\tget shouldPersist(): boolean {\n\t\treturn (\n\t\t\t!!this.reconnectionProperties ||\n\t\t\t(this._process ? this._process.shouldPersist : false)\n\t\t);\n\t}\n\tget hasWrittenData(): boolean {\n\t\treturn this._hasWrittenData;\n\t}\n\tget hasChildProcesses(): boolean {\n\t\treturn this._hasChildProcesses;\n\t}\n\tget reconnectionProperties(): IReconnectionProperties | undefined {\n\t\treturn (\n\t\t\tthis._shellLaunchConfig?.attachPersistentProcess\n\t\t\t\t?.reconnectionProperties ||\n\t\t\tthis._shellLaunchConfig?.reconnectionProperties ||\n\t\t\tundefined\n\t\t);\n\t}\n\tget extEnvironmentVariableCollection():\n\t\t| IMergedEnvironmentVariableCollection\n\t\t| undefined {\n\t\treturn this._extEnvironmentVariableCollection;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _instanceId: number,\n\t\tcwd: string | URI | undefined,\n\t\tenvironmentVariableCollections: ReadonlyMap<string, IEnvironmentVariableCollection> | undefined,\n\t\tshellIntegrationNonce: string | undefined,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IWorkbenchEnvironmentService private readonly _workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly _notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis._cwdWorkspaceFolder = terminalEnvironment.getWorkspaceForTerminal(cwd, this._workspaceContextService, this._historyService);\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis._ackDataBufferer = new AckDataBufferer(e => this._process?.acknowledgeDataEvent(e));\n\t\tthis._dataFilter = this._register(this._instantiationService.createInstance(SeamlessRelaunchDataFilter));\n\t\tthis._register(this._dataFilter.onProcessData(ev => {\n\t\t\tconst data = (typeof ev === 'string' ? ev : ev.data);\n\t\t\tconst beforeProcessDataEvent: IBeforeProcessDataEvent = { data };\n\t\t\tthis._onBeforeProcessData.fire(beforeProcessDataEvent);\n\t\t\tif (beforeProcessDataEvent.data && beforeProcessDataEvent.data.length > 0) {\n\t\t\t\t// This event is used by the caller so the object must be reused\n\t\t\t\tif (typeof ev !== 'string') {\n\t\t\t\t\tev.data = beforeProcessDataEvent.data;\n\t\t\t\t}\n\t\t\t\tthis._onProcessData.fire(typeof ev !== 'string' ? ev : { data: beforeProcessDataEvent.data, trackCommit: false });\n\t\t\t}\n\t\t}));\n\n\t\tif (cwd && typeof cwd === 'object') {\n\t\t\tthis.remoteAuthority = getRemoteAuthority(cwd);\n\t\t} else {\n\t\t\tthis.remoteAuthority = this._workbenchEnvironmentService.remoteAuthority;\n\t\t}\n\n\t\tif (environmentVariableCollections) {\n\t\t\tthis._extEnvironmentVariableCollection = new MergedEnvironmentVariableCollection(environmentVariableCollections);\n\t\t\tthis._register(this._environmentVariableService.onDidChangeCollections(newCollection => this._onEnvironmentVariableCollectionChange(newCollection)));\n\t\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoChangesActive, this._extEnvironmentVariableCollection);\n\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t}\n\n\t\tthis.shellIntegrationNonce = shellIntegrationNonce ?? generateUuid();\n\t}\n\n\tasync freePortKillProcess(port: string): Promise<void> {\n\t\ttry {\n\t\t\tif (this._process?.freePortKillProcess) {\n\t\t\t\tawait this._process?.freePortKillProcess(port);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"killportfailure\",\n\t\t\t\t\t\"Could not kill process listening on port {0}, command exited with error {1}\",\n\t\t\t\t\tport,\n\t\t\t\t\te,\n\t\t\t\t),\n\t\t\t\tseverity: Severity.Warning,\n\t\t\t});\n\t\t}\n\t}\n\n\toverride dispose(immediate = false): void {\n\t\tthis._isDisposed = true;\n\t\tif (this._process) {\n\t\t\t// If the process was still connected this dispose came from\n\t\t\t// within VS Code, not the process, so mark the process as\n\t\t\t// killed by the user.\n\t\t\tthis._setProcessState(ProcessState.KilledByUser);\n\t\t\tthis._process.shutdown(immediate);\n\t\t\tthis._process = null;\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\tprivate _createPtyProcessReadyPromise(): Promise<void> {\n\t\treturn new Promise<void>((c) => {\n\t\t\tconst listener = Event.once(this.onProcessReady)(() => {\n\t\t\t\tthis._logService.debug(\n\t\t\t\t\t`Terminal process ready (shellProcessId: ${this.shellProcessId})`,\n\t\t\t\t);\n\t\t\t\tthis._store.delete(listener);\n\t\t\t\tc(undefined);\n\t\t\t});\n\t\t\tthis._store.add(listener);\n\t\t});\n\t}\n\n\tasync detachFromProcess(forcePersist?: boolean): Promise<void> {\n\t\tawait this._process?.detach?.(forcePersist);\n\t\tthis._process = null;\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\treset = true,\n\t): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tthis._shellLaunchConfig = shellLaunchConfig;\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\n\t\tlet newProcess: ITerminalChildProcess | undefined;\n\n\t\tif (shellLaunchConfig.customPtyImplementation) {\n\t\t\tthis._processType = ProcessType.PsuedoTerminal;\n\t\t\tnewProcess = shellLaunchConfig.customPtyImplementation(\n\t\t\t\tthis._instanceId,\n\t\t\t\tcols,\n\t\t\t\trows,\n\t\t\t);\n\t\t} else {\n\t\t\tconst backend = await this._terminalInstanceService.getBackend(\n\t\t\t\tthis.remoteAuthority,\n\t\t\t);\n\t\t\tif (!backend) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`No terminal backend registered for remote authority '${this.remoteAuthority}'`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.backend = backend;\n\n\t\t\t// Create variable resolver\n\t\t\tconst variableResolver = terminalEnvironment.createVariableResolver(\n\t\t\t\tthis._cwdWorkspaceFolder,\n\t\t\t\tawait this._terminalProfileResolverService.getEnvironment(\n\t\t\t\t\tthis.remoteAuthority,\n\t\t\t\t),\n\t\t\t\tthis._configurationResolverService,\n\t\t\t);\n\n\t\t\t// resolvedUserHome is needed here as remote resolvers can launch local terminals before\n\t\t\t// they're connected to the remote.\n\t\t\tthis.userHome = this._pathService.resolvedUserHome?.fsPath;\n\t\t\tthis.os = OS;\n\t\t\tif (!!this.remoteAuthority) {\n\t\t\t\tconst userHomeUri = await this._pathService.userHome();\n\t\t\t\tthis.userHome = userHomeUri.path;\n\t\t\t\tconst remoteEnv =\n\t\t\t\t\tawait this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Failed to get remote environment for remote authority \"${this.remoteAuthority}\"`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.userHome = remoteEnv.userHome.path;\n\t\t\t\tthis.os = remoteEnv.os;\n\n\t\t\t\t// this is a copy of what the merged environment collection is on the remote side\n\t\t\t\tconst env = await this._resolveEnvironment(\n\t\t\t\t\tbackend,\n\t\t\t\t\tvariableResolver,\n\t\t\t\t\tshellLaunchConfig,\n\t\t\t\t);\n\t\t\t\tconst shouldPersist =\n\t\t\t\t\t((this._configurationService.getValue(\n\t\t\t\t\t\tTaskSettingId.Reconnection,\n\t\t\t\t\t) &&\n\t\t\t\t\t\tshellLaunchConfig.reconnectionProperties) ||\n\t\t\t\t\t\t!shellLaunchConfig.isFeatureTerminal) &&\n\t\t\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t\t\t.enablePersistentSessions &&\n\t\t\t\t\t!shellLaunchConfig.isTransient;\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = await backend.attachToProcess(\n\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess.id,\n\t\t\t\t\t);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Warn and just create a new terminal if attach failed for some reason\n\t\t\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\t\t`Attach to process failed for terminal`,\n\t\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!newProcess) {\n\t\t\t\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(\n\t\t\t\t\t\tshellLaunchConfig,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tremoteAuthority: this.remoteAuthority,\n\t\t\t\t\t\t\tos: this.os,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tconst options: ITerminalProcessOptions = {\n\t\t\t\t\t\tshellIntegration: {\n\t\t\t\t\t\t\tenabled: this._configurationService.getValue(\n\t\t\t\t\t\t\t\tTerminalSettingId.ShellIntegrationEnabled,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tsuggestEnabled: this._configurationService.getValue(\n\t\t\t\t\t\t\t\tTerminalSuggestSettingId.Enabled,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tnonce: this.shellIntegrationNonce,\n\t\t\t\t\t\t},\n\t\t\t\t\t\twindowsEnableConpty:\n\t\t\t\t\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t\t\t\t\t.windowsEnableConpty,\n\t\t\t\t\t\twindowsUseConptyDll:\n\t\t\t\t\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t\t\t\t\t.experimental?.windowsUseConptyDll ?? false,\n\t\t\t\t\t\tenvironmentVariableCollections: this\n\t\t\t\t\t\t\t._extEnvironmentVariableCollection?.collections\n\t\t\t\t\t\t\t? serializeEnvironmentVariableCollections(\n\t\t\t\t\t\t\t\t\tthis._extEnvironmentVariableCollection\n\t\t\t\t\t\t\t\t\t\t.collections,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tworkspaceFolder: this._cwdWorkspaceFolder,\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnewProcess = await backend.createProcess(\n\t\t\t\t\t\t\tshellLaunchConfig,\n\t\t\t\t\t\t\t\"\", // TODO: Fix cwd\n\t\t\t\t\t\t\tcols,\n\t\t\t\t\t\t\trows,\n\t\t\t\t\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t\t\t\t\t.unicodeVersion,\n\t\t\t\t\t\t\tenv, // TODO:\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tshouldPersist,\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\te?.message === \"Could not fetch remote environment\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t\t\t`Could not fetch remote environment, silently failing`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(backend);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = shellLaunchConfig.attachPersistentProcess\n\t\t\t\t\t\t.findRevivedId\n\t\t\t\t\t\t? await backend.attachToRevivedProcess(\n\t\t\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess.id,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: await backend.attachToProcess(\n\t\t\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess.id,\n\t\t\t\t\t\t\t);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Warn and just create a new terminal if attach failed for some reason\n\t\t\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\t\t`Attach to process failed for terminal`,\n\t\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!newProcess) {\n\t\t\t\t\tnewProcess = await this._launchLocalProcess(\n\t\t\t\t\t\tbackend,\n\t\t\t\t\t\tshellLaunchConfig,\n\t\t\t\t\t\tcols,\n\t\t\t\t\t\trows,\n\t\t\t\t\t\tthis.userHome,\n\t\t\t\t\t\tvariableResolver,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(backend);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the process was disposed during its creation, shut it down and return failure\n\t\tif (this._isDisposed) {\n\t\t\tnewProcess.shutdown(false);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._process = newProcess;\n\t\tthis._setProcessState(ProcessState.Launching);\n\n\t\t// Add any capabilities inherent to the backend\n\t\tif (\n\t\t\tthis.os === OperatingSystem.Linux ||\n\t\t\tthis.os === OperatingSystem.Macintosh\n\t\t) {\n\t\t\tthis.capabilities.add(\n\t\t\t\tTerminalCapability.NaiveCwdDetection,\n\t\t\t\tnew NaiveCwdDetectionCapability(this._process),\n\t\t\t);\n\t\t}\n\n\t\tthis._dataFilter.newProcess(this._process, reset);\n\n\t\tif (this._processListeners) {\n\t\t\tdispose(this._processListeners);\n\t\t}\n\t\tthis._processListeners = [\n\t\t\tnewProcess.onProcessReady((e: IProcessReadyEvent) => {\n\t\t\t\tthis.shellProcessId = e.pid;\n\t\t\t\tthis._initialCwd = e.cwd;\n\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\ttype: ProcessPropertyType.InitialCwd,\n\t\t\t\t\tvalue: this._initialCwd,\n\t\t\t\t});\n\t\t\t\tthis._onProcessReady.fire(e);\n\n\t\t\t\tif (this._preLaunchInputQueue.length > 0 && this._process) {\n\t\t\t\t\t// Send any queued data that's waiting\n\t\t\t\t\tnewProcess.input(this._preLaunchInputQueue.join(\"\"));\n\t\t\t\t\tthis._preLaunchInputQueue.length = 0;\n\t\t\t\t}\n\t\t\t}),\n\t\t\tnewProcess.onProcessExit((exitCode) => this._onExit(exitCode)),\n\t\t\tnewProcess.onDidChangeProperty(({ type, value }) => {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase ProcessPropertyType.HasChildProcesses:\n\t\t\t\t\t\tthis._hasChildProcesses = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.FailedShellIntegrationActivation:\n\t\t\t\t\t\tthis._telemetryService?.publicLog2<\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\towner: \"meganrogge\";\n\t\t\t\t\t\t\t\tcomment: \"Indicates shell integration was not activated because of custom args\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>(\n\t\t\t\t\t\t\t\"terminal/shellIntegrationActivationFailureCustomArgs\",\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeProperty.fire({ type, value });\n\t\t\t}),\n\t\t];\n\t\tif (newProcess.onProcessReplayComplete) {\n\t\t\tthis._processListeners.push(\n\t\t\t\tnewProcess.onProcessReplayComplete(() =>\n\t\t\t\t\tthis._onProcessReplayComplete.fire(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (newProcess.onRestoreCommands) {\n\t\t\tthis._processListeners.push(\n\t\t\t\tnewProcess.onRestoreCommands((e) =>\n\t\t\t\t\tthis._onRestoreCommands.fire(e),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tif (this.processState === ProcessState.Launching) {\n\t\t\t\tthis._setProcessState(ProcessState.Running);\n\t\t\t}\n\t\t}, ProcessConstants.ErrorLaunchThresholdDuration);\n\n\t\tconst result = await newProcess.start();\n\t\tif (result) {\n\t\t\t// Error\n\t\t\treturn result;\n\t\t}\n\n\t\t// Report the latency to the pty host when idle\n\t\trunWhenWindowIdle(getActiveWindow(), () => {\n\t\t\tthis.backend?.getLatency().then((measurements) => {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Latency measurements for ${this.remoteAuthority ?? \"local\"} backend\\n${measurements.map((e) => `${e.label}: ${e.latency.toFixed(2)}ms`).join(\"\\n\")}`,\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\treturn undefined;\n\t}\n\n\tasync relaunch(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\treset: boolean,\n\t): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis._logService.trace(\n\t\t\t`Relaunching terminal instance ${this._instanceId}`,\n\t\t);\n\n\t\t// Fire reconnect if needed to ensure the terminal is usable again\n\t\tif (this._isDisconnected) {\n\t\t\tthis._isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t}\n\n\t\t// Clear data written flag to re-enable seamless relaunch if this relaunch was manually\n\t\t// triggered\n\t\tthis._hasWrittenData = false;\n\n\t\treturn this.createProcess(shellLaunchConfig, cols, rows, reset);\n\t}\n\n\t// Fetch any extension environment additions and apply them\n\tprivate async _resolveEnvironment(\n\t\tbackend: ITerminalBackend,\n\t\tvariableResolver: terminalEnvironment.VariableResolver | undefined,\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t): Promise<IProcessEnvironment> {\n\t\tconst workspaceFolder = terminalEnvironment.getWorkspaceForTerminal(\n\t\t\tshellLaunchConfig.cwd,\n\t\t\tthis._workspaceContextService,\n\t\t\tthis._historyService,\n\t\t);\n\t\tconst platformKey = isWindows\n\t\t\t? \"windows\"\n\t\t\t: isMacintosh\n\t\t\t\t? \"osx\"\n\t\t\t\t: \"linux\";\n\t\tconst envFromConfigValue = this._configurationService.getValue<\n\t\t\tITerminalEnvironment | undefined\n\t\t>(`terminal.integrated.env.${platformKey}`);\n\n\t\tlet baseEnv: IProcessEnvironment;\n\t\tif (shellLaunchConfig.useShellEnvironment) {\n\t\t\t// TODO: Avoid as any?\n\t\t\tbaseEnv = (await backend.getShellEnvironment()) as any;\n\t\t} else {\n\t\t\tbaseEnv = await this._terminalProfileResolverService.getEnvironment(\n\t\t\t\tthis.remoteAuthority,\n\t\t\t);\n\t\t}\n\t\tconst env = await terminalEnvironment.createTerminalEnvironment(\n\t\t\tshellLaunchConfig,\n\t\t\tenvFromConfigValue,\n\t\t\tvariableResolver,\n\t\t\tthis._productService.version,\n\t\t\tthis._terminalConfigurationService.config.detectLocale,\n\t\t\tbaseEnv,\n\t\t);\n\t\tif (\n\t\t\t!this._isDisposed &&\n\t\t\tshouldUseEnvironmentVariableCollection(shellLaunchConfig)\n\t\t) {\n\t\t\tthis._extEnvironmentVariableCollection =\n\t\t\t\tthis._environmentVariableService.mergedCollection;\n\n\t\t\tthis._register(\n\t\t\t\tthis._environmentVariableService.onDidChangeCollections(\n\t\t\t\t\t(newCollection) =>\n\t\t\t\t\t\tthis._onEnvironmentVariableCollectionChange(\n\t\t\t\t\t\t\tnewCollection,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\t// For remote terminals, this is a copy of the mergedEnvironmentCollection created on\n\t\t\t// the remote side. Since the environment collection is synced between the remote and\n\t\t\t// local sides immediately this is a fairly safe way of enabling the env var diffing and\n\t\t\t// info widget. While technically these could differ due to the slight change of a race\n\t\t\t// condition, the chance is minimal plus the impact on the user is also not that great\n\t\t\t// if it happens - it's not worth adding plumbing to sync back the resolved collection.\n\t\t\tawait this._extEnvironmentVariableCollection.applyToProcessEnvironment(\n\t\t\t\tenv,\n\t\t\t\t{ workspaceFolder },\n\t\t\t\tvariableResolver,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tthis._extEnvironmentVariableCollection.getVariableMap({\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t}).size\n\t\t\t) {\n\t\t\t\tthis.environmentVariableInfo =\n\t\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\t\tEnvironmentVariableInfoChangesActive,\n\t\t\t\t\t\tthis._extEnvironmentVariableCollection,\n\t\t\t\t\t);\n\t\t\t\tthis._onEnvironmentVariableInfoChange.fire(\n\t\t\t\t\tthis.environmentVariableInfo,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn env;\n\t}\n\n\tprivate async _launchLocalProcess(\n\t\tbackend: ITerminalBackend,\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\tuserHome: string | undefined,\n\t\tvariableResolver: terminalEnvironment.VariableResolver | undefined,\n\t): Promise<ITerminalChildProcess> {\n\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(\n\t\t\tshellLaunchConfig,\n\t\t\t{\n\t\t\t\tremoteAuthority: undefined,\n\t\t\t\tos: OS,\n\t\t\t},\n\t\t);\n\t\tconst activeWorkspaceRootUri =\n\t\t\tthis._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\n\t\tconst initialCwd = await terminalEnvironment.getCwd(\n\t\t\tshellLaunchConfig,\n\t\t\tuserHome,\n\t\t\tvariableResolver,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\tthis._terminalConfigurationService.config.cwd,\n\t\t\tthis._logService,\n\t\t);\n\n\t\tconst env = await this._resolveEnvironment(\n\t\t\tbackend,\n\t\t\tvariableResolver,\n\t\t\tshellLaunchConfig,\n\t\t);\n\n\t\tconst options: ITerminalProcessOptions = {\n\t\t\tshellIntegration: {\n\t\t\t\tenabled: this._configurationService.getValue(\n\t\t\t\t\tTerminalSettingId.ShellIntegrationEnabled,\n\t\t\t\t),\n\t\t\t\tsuggestEnabled: this._configurationService.getValue(\n\t\t\t\t\tTerminalSuggestSettingId.Enabled,\n\t\t\t\t),\n\t\t\t\tnonce: this.shellIntegrationNonce,\n\t\t\t},\n\t\t\twindowsEnableConpty:\n\t\t\t\tthis._terminalConfigurationService.config.windowsEnableConpty,\n\t\t\twindowsUseConptyDll:\n\t\t\t\tthis._terminalConfigurationService.config.experimental\n\t\t\t\t\t?.windowsUseConptyDll ?? false,\n\t\t\tenvironmentVariableCollections: this\n\t\t\t\t._extEnvironmentVariableCollection\n\t\t\t\t? serializeEnvironmentVariableCollections(\n\t\t\t\t\t\tthis._extEnvironmentVariableCollection.collections,\n\t\t\t\t\t)\n\t\t\t\t: undefined,\n\t\t\tworkspaceFolder: this._cwdWorkspaceFolder,\n\t\t};\n\t\tconst shouldPersist =\n\t\t\t((this._configurationService.getValue(TaskSettingId.Reconnection) &&\n\t\t\t\tshellLaunchConfig.reconnectionProperties) ||\n\t\t\t\t!shellLaunchConfig.isFeatureTerminal) &&\n\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t.enablePersistentSessions &&\n\t\t\t!shellLaunchConfig.isTransient;\n\t\treturn await backend.createProcess(\n\t\t\tshellLaunchConfig,\n\t\t\tinitialCwd,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tthis._terminalConfigurationService.config.unicodeVersion,\n\t\t\tenv,\n\t\t\toptions,\n\t\t\tshouldPersist,\n\t\t);\n\t}\n\n\tprivate _setupPtyHostListeners(backend: ITerminalBackend) {\n\t\tif (this._ptyListenersAttached) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ptyListenersAttached = true;\n\n\t\t// Mark the process as disconnected is the pty host is unresponsive, the responsive event\n\t\t// will fire only when the pty host was already unresponsive\n\t\tthis._register(\n\t\t\tbackend.onPtyHostUnresponsive(() => {\n\t\t\t\tthis._isDisconnected = true;\n\t\t\t\tthis._onPtyDisconnect.fire();\n\t\t\t}),\n\t\t);\n\t\tthis._ptyResponsiveListener = backend.onPtyHostResponsive(() => {\n\t\t\tthis._isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t});\n\t\tthis._register(\n\t\t\ttoDisposable(() => this._ptyResponsiveListener?.dispose()),\n\t\t);\n\n\t\t// When the pty host restarts, reconnect is no longer possible so dispose the responsive\n\t\t// listener\n\t\tthis._register(\n\t\t\tbackend.onPtyHostRestart(async () => {\n\t\t\t\t// When the pty host restarts, reconnect is no longer possible\n\t\t\t\tif (!this._isDisconnected) {\n\t\t\t\t\tthis._isDisconnected = true;\n\t\t\t\t\tthis._onPtyDisconnect.fire();\n\t\t\t\t}\n\t\t\t\tthis._ptyResponsiveListener?.dispose();\n\t\t\t\tthis._ptyResponsiveListener = undefined;\n\t\t\t\tif (this._shellLaunchConfig) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._shellLaunchConfig.isFeatureTerminal &&\n\t\t\t\t\t\t!this.reconnectionProperties\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Indicate the process is exited (and gone forever) only for feature terminals\n\t\t\t\t\t\t// so they can react to the exit, this is particularly important for tasks so\n\t\t\t\t\t\t// that it knows that the process is not still active. Note that this is not\n\t\t\t\t\t\t// done for regular terminals because otherwise the terminal instance would be\n\t\t\t\t\t\t// disposed.\n\t\t\t\t\t\tthis._onExit(-1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// For normal terminals write a message indicating what happened and relaunch\n\t\t\t\t\t\t// using the previous shellLaunchConfig\n\t\t\t\t\t\tconst message = localize(\n\t\t\t\t\t\t\t\"ptyHostRelaunch\",\n\t\t\t\t\t\t\t\"Restarting the terminal because the connection to the shell process was lost...\",\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._onProcessData.fire({\n\t\t\t\t\t\t\tdata: formatMessageForTerminal(message, {\n\t\t\t\t\t\t\t\tloudFormatting: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\ttrackCommit: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait this.relaunch(\n\t\t\t\t\t\t\tthis._shellLaunchConfig,\n\t\t\t\t\t\t\tthis._dimensions.cols,\n\t\t\t\t\t\t\tthis._dimensions.rows,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync getBackendOS(): Promise<OperatingSystem> {\n\t\tlet os = OS;\n\t\tif (!!this.remoteAuthority) {\n\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\tif (!remoteEnv) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Failed to get remote environment for remote authority \"${this.remoteAuthority}\"`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tos = remoteEnv.os;\n\t\t}\n\t\treturn os;\n\t}\n\n\tsetDimensions(cols: number, rows: number): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: false): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: true): void;\n\tsetDimensions(\n\t\tcols: number,\n\t\trows: number,\n\t\tsync?: boolean,\n\t): Promise<void> | void {\n\t\tif (sync) {\n\t\t\tthis._resize(cols, rows);\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.ptyProcessReady.then(() => this._resize(cols, rows));\n\t}\n\n\tasync setUnicodeVersion(version: \"6\" | \"11\"): Promise<void> {\n\t\treturn this._process?.setUnicodeVersion(version);\n\t}\n\n\tprivate _resize(cols: number, rows: number) {\n\t\tif (!this._process) {\n\t\t\treturn;\n\t\t}\n\t\t// The child process could already be terminated\n\t\ttry {\n\t\t\tthis._process.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (\n\t\t\t\terror.code !== \"EPIPE\" &&\n\t\t\t\terror.code !== \"ERR_IPC_CHANNEL_CLOSED\"\n\t\t\t) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\t}\n\n\tasync write(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tif (\n\t\t\tthis.shellProcessId ||\n\t\t\tthis._processType === ProcessType.PsuedoTerminal\n\t\t) {\n\t\t\tif (this._process) {\n\t\t\t\t// Send data if the pty is ready\n\t\t\t\tthis._process.input(data);\n\t\t\t}\n\t\t} else {\n\t\t\t// If the pty is not ready, queue the data received to send later\n\t\t\tthis._preLaunchInputQueue.push(data);\n\t\t}\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tthis._process?.processBinary(data);\n\t}\n\n\tget initialCwd(): string {\n\t\treturn this._initialCwd ?? \"\";\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\tif (!this._process) {\n\t\t\tthrow new Error(\"Cannot refresh property when process is not set\");\n\t\t}\n\t\treturn this._process.refreshProperty(type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\treturn this._process?.updateProperty(type, value);\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tthis._ackDataBufferer.ack(charCount);\n\t}\n\n\tprivate _onExit(exitCode: number | undefined): void {\n\t\tthis._process = null;\n\t\t// If the process is marked as launching then mark the process as killed\n\t\t// during launch. This typically means that there is a problem with the\n\t\t// shell and args.\n\t\tif (this.processState === ProcessState.Launching) {\n\t\t\tthis._setProcessState(ProcessState.KilledDuringLaunch);\n\t\t}\n\n\t\t// If TerminalInstance did not know about the process exit then it was\n\t\t// triggered by the process, not on VS Code's side.\n\t\tif (this.processState === ProcessState.Running) {\n\t\t\tthis._setProcessState(ProcessState.KilledByProcess);\n\t\t}\n\n\t\tthis._onProcessExit.fire(exitCode);\n\t}\n\n\tprivate _setProcessState(state: ProcessState) {\n\t\tthis.processState = state;\n\t\tthis._onProcessStateChange.fire();\n\t}\n\n\tprivate _onEnvironmentVariableCollectionChange(\n\t\tnewCollection: IMergedEnvironmentVariableCollection,\n\t): void {\n\t\tconst diff = this._extEnvironmentVariableCollection!.diff(\n\t\t\tnewCollection,\n\t\t\t{ workspaceFolder: this._cwdWorkspaceFolder },\n\t\t);\n\t\tif (diff === undefined) {\n\t\t\t// If there are no longer differences, remove the stale info indicator\n\t\t\tif (\n\t\t\t\tthis.environmentVariableInfo instanceof\n\t\t\t\tEnvironmentVariableInfoStale\n\t\t\t) {\n\t\t\t\tthis.environmentVariableInfo =\n\t\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\t\tEnvironmentVariableInfoChangesActive,\n\t\t\t\t\t\tthis._extEnvironmentVariableCollection!,\n\t\t\t\t\t);\n\t\t\t\tthis._onEnvironmentVariableInfoChange.fire(\n\t\t\t\t\tthis.environmentVariableInfo,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.environmentVariableInfo =\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\tEnvironmentVariableInfoStale,\n\t\t\t\tdiff,\n\t\t\t\tthis._instanceId,\n\t\t\t\tnewCollection,\n\t\t\t);\n\t\tthis._onEnvironmentVariableInfoChange.fire(\n\t\t\tthis.environmentVariableInfo,\n\t\t);\n\t}\n\n\tasync clearBuffer(): Promise<void> {\n\t\tthis._process?.clearBuffer?.();\n\t}\n}\n\nclass AckDataBufferer {\n\tprivate _unsentCharCount = 0;\n\n\tconstructor(private readonly _callback: (charCount: number) => void) {}\n\n\tack(charCount: number) {\n\t\tthis._unsentCharCount += charCount;\n\t\twhile (this._unsentCharCount > FlowControlConstants.CharCountAckSize) {\n\t\t\tthis._unsentCharCount -= FlowControlConstants.CharCountAckSize;\n\t\t\tthis._callback(FlowControlConstants.CharCountAckSize);\n\t\t}\n\t}\n}\n\nenum SeamlessRelaunchConstants {\n\t/**\n\t * How long to record data events for new terminals.\n\t */\n\tRecordTerminalDuration = 10000,\n\t/**\n\t * The maximum duration after a relaunch occurs to trigger a swap.\n\t */\n\tSwapWaitMaximumDuration = 3000,\n}\n\n/**\n * Filters data events from the process and supports seamlessly restarting swapping out the process\n * with another, delaying the swap in output in order to minimize flickering/clearing of the\n * terminal.\n */\nclass SeamlessRelaunchDataFilter extends Disposable {\n\tprivate _firstRecorder?: TerminalRecorder;\n\tprivate _secondRecorder?: TerminalRecorder;\n\tprivate _firstDisposable?: IDisposable;\n\tprivate _secondDisposable?: IDisposable;\n\tprivate _dataListener?: IDisposable;\n\tprivate _activeProcess?: ITerminalChildProcess;\n\tprivate _disableSeamlessRelaunch = false;\n\n\tprivate _swapTimeout?: number;\n\n\tprivate readonly _onProcessData = this._register(\n\t\tnew Emitter<string | IProcessDataEvent>(),\n\t);\n\tget onProcessData(): Event<string | IProcessDataEvent> {\n\t\treturn this._onProcessData.event;\n\t}\n\n\tconstructor(\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService\n\t) {\n\t\tsuper();\n\t}\n\n\tnewProcess(process: ITerminalChildProcess, reset: boolean) {\n\t\t// Stop listening to the old process and trigger delayed shutdown (for hang issue #71966)\n\t\tthis._dataListener?.dispose();\n\t\tthis._activeProcess?.shutdown(false);\n\n\t\tthis._activeProcess = process;\n\n\t\t// Start firing events immediately if:\n\t\t// - there's no recorder, which means it's a new terminal\n\t\t// - this is not a reset, so seamless relaunch isn't necessary\n\t\t// - seamless relaunch is disabled because the terminal has accepted input\n\t\tif (!this._firstRecorder || !reset || this._disableSeamlessRelaunch) {\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\t[this._firstRecorder, this._firstDisposable] =\n\t\t\t\tthis._createRecorder(process);\n\t\t\tif (this._disableSeamlessRelaunch && reset) {\n\t\t\t\tthis._onProcessData.fire(\"\\x1bc\");\n\t\t\t}\n\t\t\tthis._dataListener = process.onProcessData((e) =>\n\t\t\t\tthis._onProcessData.fire(e),\n\t\t\t);\n\t\t\tthis._disableSeamlessRelaunch = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger a swap if there was a recent relaunch\n\t\tif (this._secondRecorder) {\n\t\t\tthis.triggerSwap();\n\t\t}\n\n\t\tthis._swapTimeout = mainWindow.setTimeout(\n\t\t\t() => this.triggerSwap(),\n\t\t\tSeamlessRelaunchConstants.SwapWaitMaximumDuration,\n\t\t);\n\n\t\t// Pause all outgoing data events\n\t\tthis._dataListener?.dispose();\n\n\t\tthis._firstDisposable?.dispose();\n\t\tconst recorder = this._createRecorder(process);\n\t\t[this._secondRecorder, this._secondDisposable] = recorder;\n\t}\n\n\t/**\n\t * Disables seamless relaunch for the active process\n\t */\n\tdisableSeamlessRelaunch() {\n\t\tthis._disableSeamlessRelaunch = true;\n\t\tthis._stopRecording();\n\t\tthis.triggerSwap();\n\t}\n\n\t/**\n\t * Trigger the swap of the processes if needed (eg. timeout, input)\n\t */\n\ttriggerSwap() {\n\t\t// Clear the swap timeout if it exists\n\t\tif (this._swapTimeout) {\n\t\t\tmainWindow.clearTimeout(this._swapTimeout);\n\t\t\tthis._swapTimeout = undefined;\n\t\t}\n\n\t\t// Do nothing if there's nothing being recorder\n\t\tif (!this._firstRecorder) {\n\t\t\treturn;\n\t\t}\n\t\t// Clear the first recorder if no second process was attached before the swap trigger\n\t\tif (!this._secondRecorder) {\n\t\t\tthis._firstRecorder = undefined;\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Generate data for each recorder\n\t\tconst firstData = this._getDataFromRecorder(this._firstRecorder);\n\t\tconst secondData = this._getDataFromRecorder(this._secondRecorder);\n\n\t\t// Re-write the terminal if the data differs\n\t\tif (firstData === secondData) {\n\t\t\tthis._logService.trace(\n\t\t\t\t`Seamless terminal relaunch - identical content`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._logService.trace(\n\t\t\t\t`Seamless terminal relaunch - resetting content`,\n\t\t\t);\n\t\t\t// Fire full reset (RIS) followed by the new data so the update happens in the same frame\n\t\t\tthis._onProcessData.fire({\n\t\t\t\tdata: `\\x1bc${secondData}`,\n\t\t\t\ttrackCommit: false,\n\t\t\t});\n\t\t}\n\n\t\t// Set up the new data listener\n\t\tthis._dataListener?.dispose();\n\t\tthis._dataListener = this._activeProcess!.onProcessData((e) =>\n\t\t\tthis._onProcessData.fire(e),\n\t\t);\n\n\t\t// Replace first recorder with second\n\t\tthis._firstRecorder = this._secondRecorder;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._firstDisposable = this._secondDisposable;\n\t\tthis._secondRecorder = undefined;\n\t}\n\n\tprivate _stopRecording() {\n\t\t// Continue recording if a swap is coming\n\t\tif (this._swapTimeout) {\n\t\t\treturn;\n\t\t}\n\t\t// Stop recording\n\t\tthis._firstRecorder = undefined;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._secondRecorder = undefined;\n\t\tthis._secondDisposable?.dispose();\n\t}\n\n\tprivate _createRecorder(\n\t\tprocess: ITerminalChildProcess,\n\t): [TerminalRecorder, IDisposable] {\n\t\tconst recorder = new TerminalRecorder(0, 0);\n\t\tconst disposable = process.onProcessData((e) =>\n\t\t\trecorder.handleData(typeof e === \"string\" ? e : e.data),\n\t\t);\n\t\treturn [recorder, disposable];\n\t}\n\n\tprivate _getDataFromRecorder(recorder: TerminalRecorder): string {\n\t\treturn recorder\n\t\t\t.generateReplayEventSync()\n\t\t\t.events.filter((e) => !!e.data)\n\t\t\t.map((e) => e.data)\n\t\t\t.join(\"\");\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ProcessConstants", "ProcessType", "result", "SeamlessRelaunchConstants"]
}
