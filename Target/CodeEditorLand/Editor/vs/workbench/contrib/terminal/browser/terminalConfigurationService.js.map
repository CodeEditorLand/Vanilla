{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalConfigurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { EDITOR_FONT_DEFAULTS, type IEditorOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ITerminalConfigurationService, LinuxDistro } from './terminal.js';\nimport type { IXtermCore } from './xterm-private.js';\nimport { DEFAULT_BOLD_FONT_WEIGHT, DEFAULT_FONT_WEIGHT, DEFAULT_LETTER_SPACING, DEFAULT_LINE_HEIGHT, FontWeight, ITerminalConfiguration, MAXIMUM_FONT_WEIGHT, MINIMUM_FONT_WEIGHT, MINIMUM_LETTER_SPACING, TERMINAL_CONFIG_SECTION, type ITerminalFont } from '../common/terminal.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\n\n// #region TerminalConfigurationService\n\nexport class TerminalConfigurationService extends Disposable implements ITerminalConfigurationService {\n\tdeclare _serviceBrand: undefined;\n\n\tprotected _fontMetrics: TerminalFontMetrics;\n\n\tprotected _config!: Readonly<ITerminalConfiguration>;\n\tget config() { return this._config; }\n\n\tprivate readonly _onConfigChanged = new Emitter<void>();\n\tget onConfigChanged(): Event<void> { return this._onConfigChanged.event; }\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._fontMetrics = this._register(new TerminalFontMetrics(this, this._configurationService));\n\n\t\tthis._register(Event.runAndSubscribe(this._configurationService.onDidChangeConfiguration, e => {\n\t\t\tif (!e || e.affectsConfiguration(TERMINAL_CONFIG_SECTION)) {\n\t\t\t\tthis._updateConfig();\n\t\t\t}\n\t\t}));\n\t}\n\n\tsetPanelContainer(panelContainer: HTMLElement): void { return this._fontMetrics.setPanelContainer(panelContainer); }\n\tconfigFontIsMonospace(): boolean { return this._fontMetrics.configFontIsMonospace(); }\n\tgetFont(w: Window, xtermCore?: IXtermCore, excludeDimensions?: boolean): ITerminalFont { return this._fontMetrics.getFont(w, xtermCore, excludeDimensions); }\n\n\tprivate _updateConfig(): void {\n\t\tconst configValues = { ...this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION) };\n\t\tconfigValues.fontWeight = this._normalizeFontWeight(configValues.fontWeight, DEFAULT_FONT_WEIGHT);\n\t\tconfigValues.fontWeightBold = this._normalizeFontWeight(configValues.fontWeightBold, DEFAULT_BOLD_FONT_WEIGHT);\n\t\tthis._config = configValues;\n\t\tthis._onConfigChanged.fire();\n\t}\n\n\tprivate _normalizeFontWeight(input: any, defaultWeight: FontWeight): FontWeight {\n\t\tif (input === 'normal' || input === 'bold') {\n\t\t\treturn input;\n\t\t}\n\t\treturn clampInt(input, MINIMUM_FONT_WEIGHT, MAXIMUM_FONT_WEIGHT, defaultWeight);\n\t}\n}\n\n// #endregion TerminalConfigurationService\n\n// #region TerminalFontMetrics\n\nconst enum FontConstants {\n\tMinimumFontSize = 6,\n\tMaximumFontSize = 100,\n}\n\nexport class TerminalFontMetrics extends Disposable {\n\tprivate _panelContainer: HTMLElement | undefined;\n\tprivate _charMeasureElement: HTMLElement | undefined;\n\tprivate _lastFontMeasurement: ITerminalFont | undefined;\n\n\tlinuxDistro: LinuxDistro = LinuxDistro.Unknown;\n\n\tconstructor(\n\t\tprivate readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => this._charMeasureElement?.remove()));\n\t}\n\n\tsetPanelContainer(panelContainer: HTMLElement): void {\n\t\tthis._panelContainer = panelContainer;\n\t}\n\n\tconfigFontIsMonospace(): boolean {\n\t\tconst fontSize = 15;\n\t\tconst fontFamily = this._terminalConfigurationService.config.fontFamily || this._configurationService.getValue<IEditorOptions>('editor').fontFamily || EDITOR_FONT_DEFAULTS.fontFamily;\n\t\tconst iRect = this._getBoundingRectFor('i', fontFamily, fontSize);\n\t\tconst wRect = this._getBoundingRectFor('w', fontFamily, fontSize);\n\n\t\t// Check for invalid bounds, there is no reason to believe the font is not monospace\n\t\tif (!iRect || !wRect || !iRect.width || !wRect.width) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn iRect.width === wRect.width;\n\t}\n\n\t/**\n\t * Gets the font information based on the terminal.integrated.fontFamily\n\t * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties\n\t */\n\tgetFont(w: Window, xtermCore?: IXtermCore, excludeDimensions?: boolean): ITerminalFont {\n\t\tconst editorConfig = this._configurationService.getValue<IEditorOptions>('editor');\n\n\t\tlet fontFamily = this._terminalConfigurationService.config.fontFamily || editorConfig.fontFamily || EDITOR_FONT_DEFAULTS.fontFamily || 'monospace';\n\t\tlet fontSize = clampInt(this._terminalConfigurationService.config.fontSize, FontConstants.MinimumFontSize, FontConstants.MaximumFontSize, EDITOR_FONT_DEFAULTS.fontSize);\n\n\t\t// Work around bad font on Fedora/Ubuntu\n\t\tif (!this._terminalConfigurationService.config.fontFamily) {\n\t\t\tif (this.linuxDistro === LinuxDistro.Fedora) {\n\t\t\t\tfontFamily = '\\'DejaVu Sans Mono\\'';\n\t\t\t}\n\t\t\tif (this.linuxDistro === LinuxDistro.Ubuntu) {\n\t\t\t\tfontFamily = '\\'Ubuntu Mono\\'';\n\n\t\t\t\t// Ubuntu mono is somehow smaller, so set fontSize a bit larger to get the same perceived size.\n\t\t\t\tfontSize = clampInt(fontSize + 2, FontConstants.MinimumFontSize, FontConstants.MaximumFontSize, EDITOR_FONT_DEFAULTS.fontSize);\n\t\t\t}\n\t\t}\n\n\t\t// Always fallback to monospace, otherwise a proportional font may become the default\n\t\tfontFamily += ', monospace';\n\n\t\t// Always fallback to AppleBraille on macOS, otherwise braille will render with filled and\n\t\t// empty circles in all 8 positions, instead of just filled circles\n\t\t// See https://github.com/microsoft/vscode/issues/174521\n\t\tif (isMacintosh) {\n\t\t\tfontFamily += ', AppleBraille';\n\t\t}\n\n\t\tconst letterSpacing = this._terminalConfigurationService.config.letterSpacing ? Math.max(Math.floor(this._terminalConfigurationService.config.letterSpacing), MINIMUM_LETTER_SPACING) : DEFAULT_LETTER_SPACING;\n\t\tconst lineHeight = this._terminalConfigurationService.config.lineHeight ? Math.max(this._terminalConfigurationService.config.lineHeight, 1) : DEFAULT_LINE_HEIGHT;\n\n\t\tif (excludeDimensions) {\n\t\t\treturn {\n\t\t\t\tfontFamily,\n\t\t\t\tfontSize,\n\t\t\t\tletterSpacing,\n\t\t\t\tlineHeight\n\t\t\t};\n\t\t}\n\n\t\t// Get the character dimensions from xterm if it's available\n\t\tif (xtermCore?._renderService?._renderer.value) {\n\t\t\tconst cellDims = xtermCore._renderService.dimensions.css.cell;\n\t\t\tif (cellDims?.width && cellDims?.height) {\n\t\t\t\treturn {\n\t\t\t\t\tfontFamily,\n\t\t\t\t\tfontSize,\n\t\t\t\t\tletterSpacing,\n\t\t\t\t\tlineHeight,\n\t\t\t\t\tcharHeight: cellDims.height / lineHeight,\n\t\t\t\t\tcharWidth: cellDims.width - Math.round(letterSpacing) / w.devicePixelRatio\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Fall back to measuring the font ourselves\n\t\treturn this._measureFont(w, fontFamily, fontSize, letterSpacing, lineHeight);\n\t}\n\n\tprivate _createCharMeasureElementIfNecessary(): HTMLElement {\n\t\tif (!this._panelContainer) {\n\t\t\tthrow new Error('Cannot measure element when terminal is not attached');\n\t\t}\n\t\t// Create charMeasureElement if it hasn't been created or if it was orphaned by its parent\n\t\tif (!this._charMeasureElement || !this._charMeasureElement.parentElement) {\n\t\t\tthis._charMeasureElement = document.createElement('div');\n\t\t\tthis._panelContainer.appendChild(this._charMeasureElement);\n\t\t}\n\t\treturn this._charMeasureElement;\n\t}\n\n\tprivate _getBoundingRectFor(char: string, fontFamily: string, fontSize: number): ClientRect | DOMRect | undefined {\n\t\tlet charMeasureElement: HTMLElement;\n\t\ttry {\n\t\t\tcharMeasureElement = this._createCharMeasureElementIfNecessary();\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst style = charMeasureElement.style;\n\t\tstyle.display = 'inline-block';\n\t\tstyle.fontFamily = fontFamily;\n\t\tstyle.fontSize = fontSize + 'px';\n\t\tstyle.lineHeight = 'normal';\n\t\tcharMeasureElement.innerText = char;\n\t\tconst rect = charMeasureElement.getBoundingClientRect();\n\t\tstyle.display = 'none';\n\n\t\treturn rect;\n\t}\n\n\tprivate _measureFont(w: Window, fontFamily: string, fontSize: number, letterSpacing: number, lineHeight: number): ITerminalFont {\n\t\tconst rect = this._getBoundingRectFor('X', fontFamily, fontSize);\n\n\t\t// Bounding client rect was invalid, use last font measurement if available.\n\t\tif (this._lastFontMeasurement && (!rect || !rect.width || !rect.height)) {\n\t\t\treturn this._lastFontMeasurement;\n\t\t}\n\n\t\tthis._lastFontMeasurement = {\n\t\t\tfontFamily,\n\t\t\tfontSize,\n\t\t\tletterSpacing,\n\t\t\tlineHeight,\n\t\t\tcharWidth: 0,\n\t\t\tcharHeight: 0\n\t\t};\n\n\t\tif (rect && rect.width && rect.height) {\n\t\t\tthis._lastFontMeasurement.charHeight = Math.ceil(rect.height);\n\t\t\t// Char width is calculated differently for DOM and the other renderer types. Refer to\n\t\t\t// how each renderer updates their dimensions in xterm.js\n\t\t\tif (this._terminalConfigurationService.config.gpuAcceleration === 'off') {\n\t\t\t\tthis._lastFontMeasurement.charWidth = rect.width;\n\t\t\t} else {\n\t\t\t\tconst deviceCharWidth = Math.floor(rect.width * w.devicePixelRatio);\n\t\t\t\tconst deviceCellWidth = deviceCharWidth + Math.round(letterSpacing);\n\t\t\t\tconst cssCellWidth = deviceCellWidth / w.devicePixelRatio;\n\t\t\t\tthis._lastFontMeasurement.charWidth = cssCellWidth - Math.round(letterSpacing) / w.devicePixelRatio;\n\t\t\t}\n\t\t}\n\n\t\treturn this._lastFontMeasurement;\n\t}\n}\n\n// #endregion TerminalFontMetrics\n\n// #region Utils\n\nfunction clampInt<T>(source: any, minimum: number, maximum: number, fallback: T): number | T {\n\tlet r = parseInt(source, 10);\n\tif (isNaN(r)) {\n\t\treturn fallback;\n\t}\n\tif (typeof minimum === 'number') {\n\t\tr = Math.max(minimum, r);\n\t}\n\tif (typeof maximum === 'number') {\n\t\tr = Math.min(maximum, r);\n\t}\n\treturn r;\n}\n\n// #endregion Utils\n"],
  "mappings": "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",
  "names": ["FontConstants"]
}
