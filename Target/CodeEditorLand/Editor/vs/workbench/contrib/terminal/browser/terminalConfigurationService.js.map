{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalConfigurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { Disposable, toDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { isMacintosh } from \"../../../../base/common/platform.js\";\nimport {\n\tEDITOR_FONT_DEFAULTS,\n\ttype IEditorOptions,\n} from \"../../../../editor/common/config/editorOptions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tDEFAULT_BOLD_FONT_WEIGHT,\n\tDEFAULT_FONT_WEIGHT,\n\tDEFAULT_LETTER_SPACING,\n\tDEFAULT_LINE_HEIGHT,\n\ttype FontWeight,\n\ttype ITerminalConfiguration,\n\ttype ITerminalFont,\n\tMAXIMUM_FONT_WEIGHT,\n\tMINIMUM_FONT_WEIGHT,\n\tMINIMUM_LETTER_SPACING,\n\tTERMINAL_CONFIG_SECTION,\n} from \"../common/terminal.js\";\nimport { type ITerminalConfigurationService, LinuxDistro } from \"./terminal.js\";\nimport type { IXtermCore } from \"./xterm-private.js\";\n\n// #region TerminalConfigurationService\n\nexport class TerminalConfigurationService\n\textends Disposable\n\timplements ITerminalConfigurationService\n{\n\tdeclare _serviceBrand: undefined;\n\n\tprotected _fontMetrics: TerminalFontMetrics;\n\n\tprotected _config!: Readonly<ITerminalConfiguration>;\n\tget config() {\n\t\treturn this._config;\n\t}\n\n\tprivate readonly _onConfigChanged = new Emitter<void>();\n\tget onConfigChanged(): Event<void> {\n\t\treturn this._onConfigChanged.event;\n\t}\n\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._fontMetrics = this._register(\n\t\t\tnew TerminalFontMetrics(this, this._configurationService),\n\t\t);\n\n\t\tthis._register(\n\t\t\tEvent.runAndSubscribe(\n\t\t\t\tthis._configurationService.onDidChangeConfiguration,\n\t\t\t\t(e) => {\n\t\t\t\t\tif (!e || e.affectsConfiguration(TERMINAL_CONFIG_SECTION)) {\n\t\t\t\t\t\tthis._updateConfig();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tsetPanelContainer(panelContainer: HTMLElement): void {\n\t\treturn this._fontMetrics.setPanelContainer(panelContainer);\n\t}\n\tconfigFontIsMonospace(): boolean {\n\t\treturn this._fontMetrics.configFontIsMonospace();\n\t}\n\tgetFont(\n\t\tw: Window,\n\t\txtermCore?: IXtermCore,\n\t\texcludeDimensions?: boolean,\n\t): ITerminalFont {\n\t\treturn this._fontMetrics.getFont(w, xtermCore, excludeDimensions);\n\t}\n\n\tprivate _updateConfig(): void {\n\t\tconst configValues = {\n\t\t\t...this._configurationService.getValue<ITerminalConfiguration>(\n\t\t\t\tTERMINAL_CONFIG_SECTION,\n\t\t\t),\n\t\t};\n\t\tconfigValues.fontWeight = this._normalizeFontWeight(\n\t\t\tconfigValues.fontWeight,\n\t\t\tDEFAULT_FONT_WEIGHT,\n\t\t);\n\t\tconfigValues.fontWeightBold = this._normalizeFontWeight(\n\t\t\tconfigValues.fontWeightBold,\n\t\t\tDEFAULT_BOLD_FONT_WEIGHT,\n\t\t);\n\t\tthis._config = configValues;\n\t\tthis._onConfigChanged.fire();\n\t}\n\n\tprivate _normalizeFontWeight(\n\t\tinput: any,\n\t\tdefaultWeight: FontWeight,\n\t): FontWeight {\n\t\tif (input === \"normal\" || input === \"bold\") {\n\t\t\treturn input;\n\t\t}\n\t\treturn clampInt(\n\t\t\tinput,\n\t\t\tMINIMUM_FONT_WEIGHT,\n\t\t\tMAXIMUM_FONT_WEIGHT,\n\t\t\tdefaultWeight,\n\t\t);\n\t}\n}\n\n// #endregion TerminalConfigurationService\n\n// #region TerminalFontMetrics\n\nenum FontConstants {\n\tMinimumFontSize = 6,\n\tMaximumFontSize = 100,\n}\n\nexport class TerminalFontMetrics extends Disposable {\n\tprivate _panelContainer: HTMLElement | undefined;\n\tprivate _charMeasureElement: HTMLElement | undefined;\n\tprivate _lastFontMeasurement: ITerminalFont | undefined;\n\n\tlinuxDistro: LinuxDistro = LinuxDistro.Unknown;\n\n\tconstructor(\n\t\tprivate readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => this._charMeasureElement?.remove()));\n\t}\n\n\tsetPanelContainer(panelContainer: HTMLElement): void {\n\t\tthis._panelContainer = panelContainer;\n\t}\n\n\tconfigFontIsMonospace(): boolean {\n\t\tconst fontSize = 15;\n\t\tconst fontFamily =\n\t\t\tthis._terminalConfigurationService.config.fontFamily ||\n\t\t\tthis._configurationService.getValue<IEditorOptions>(\"editor\")\n\t\t\t\t.fontFamily ||\n\t\t\tEDITOR_FONT_DEFAULTS.fontFamily;\n\t\tconst iRect = this._getBoundingRectFor(\"i\", fontFamily, fontSize);\n\t\tconst wRect = this._getBoundingRectFor(\"w\", fontFamily, fontSize);\n\n\t\t// Check for invalid bounds, there is no reason to believe the font is not monospace\n\t\tif (!iRect || !wRect || !iRect.width || !wRect.width) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn iRect.width === wRect.width;\n\t}\n\n\t/**\n\t * Gets the font information based on the terminal.integrated.fontFamily\n\t * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties\n\t */\n\tgetFont(\n\t\tw: Window,\n\t\txtermCore?: IXtermCore,\n\t\texcludeDimensions?: boolean,\n\t): ITerminalFont {\n\t\tconst editorConfig =\n\t\t\tthis._configurationService.getValue<IEditorOptions>(\"editor\");\n\n\t\tlet fontFamily =\n\t\t\tthis._terminalConfigurationService.config.fontFamily ||\n\t\t\teditorConfig.fontFamily ||\n\t\t\tEDITOR_FONT_DEFAULTS.fontFamily ||\n\t\t\t\"monospace\";\n\t\tlet fontSize = clampInt(\n\t\t\tthis._terminalConfigurationService.config.fontSize,\n\t\t\tFontConstants.MinimumFontSize,\n\t\t\tFontConstants.MaximumFontSize,\n\t\t\tEDITOR_FONT_DEFAULTS.fontSize,\n\t\t);\n\n\t\t// Work around bad font on Fedora/Ubuntu\n\t\tif (!this._terminalConfigurationService.config.fontFamily) {\n\t\t\tif (this.linuxDistro === LinuxDistro.Fedora) {\n\t\t\t\tfontFamily = \"'DejaVu Sans Mono'\";\n\t\t\t}\n\t\t\tif (this.linuxDistro === LinuxDistro.Ubuntu) {\n\t\t\t\tfontFamily = \"'Ubuntu Mono'\";\n\n\t\t\t\t// Ubuntu mono is somehow smaller, so set fontSize a bit larger to get the same perceived size.\n\t\t\t\tfontSize = clampInt(\n\t\t\t\t\tfontSize + 2,\n\t\t\t\t\tFontConstants.MinimumFontSize,\n\t\t\t\t\tFontConstants.MaximumFontSize,\n\t\t\t\t\tEDITOR_FONT_DEFAULTS.fontSize,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Always fallback to monospace, otherwise a proportional font may become the default\n\t\tfontFamily += \", monospace\";\n\n\t\t// Always fallback to AppleBraille on macOS, otherwise braille will render with filled and\n\t\t// empty circles in all 8 positions, instead of just filled circles\n\t\t// See https://github.com/microsoft/vscode/issues/174521\n\t\tif (isMacintosh) {\n\t\t\tfontFamily += \", AppleBraille\";\n\t\t}\n\n\t\tconst letterSpacing = this._terminalConfigurationService.config\n\t\t\t.letterSpacing\n\t\t\t? Math.max(\n\t\t\t\t\tMath.floor(\n\t\t\t\t\t\tthis._terminalConfigurationService.config.letterSpacing,\n\t\t\t\t\t),\n\t\t\t\t\tMINIMUM_LETTER_SPACING,\n\t\t\t\t)\n\t\t\t: DEFAULT_LETTER_SPACING;\n\t\tconst lineHeight = this._terminalConfigurationService.config.lineHeight\n\t\t\t? Math.max(this._terminalConfigurationService.config.lineHeight, 1)\n\t\t\t: DEFAULT_LINE_HEIGHT;\n\n\t\tif (excludeDimensions) {\n\t\t\treturn {\n\t\t\t\tfontFamily,\n\t\t\t\tfontSize,\n\t\t\t\tletterSpacing,\n\t\t\t\tlineHeight,\n\t\t\t};\n\t\t}\n\n\t\t// Get the character dimensions from xterm if it's available\n\t\tif (xtermCore?._renderService?._renderer.value) {\n\t\t\tconst cellDims = xtermCore._renderService.dimensions.css.cell;\n\t\t\tif (cellDims?.width && cellDims?.height) {\n\t\t\t\treturn {\n\t\t\t\t\tfontFamily,\n\t\t\t\t\tfontSize,\n\t\t\t\t\tletterSpacing,\n\t\t\t\t\tlineHeight,\n\t\t\t\t\tcharHeight: cellDims.height / lineHeight,\n\t\t\t\t\tcharWidth:\n\t\t\t\t\t\tcellDims.width -\n\t\t\t\t\t\tMath.round(letterSpacing) / w.devicePixelRatio,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Fall back to measuring the font ourselves\n\t\treturn this._measureFont(\n\t\t\tw,\n\t\t\tfontFamily,\n\t\t\tfontSize,\n\t\t\tletterSpacing,\n\t\t\tlineHeight,\n\t\t);\n\t}\n\n\tprivate _createCharMeasureElementIfNecessary(): HTMLElement {\n\t\tif (!this._panelContainer) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot measure element when terminal is not attached\",\n\t\t\t);\n\t\t}\n\t\t// Create charMeasureElement if it hasn't been created or if it was orphaned by its parent\n\t\tif (\n\t\t\t!this._charMeasureElement ||\n\t\t\t!this._charMeasureElement.parentElement\n\t\t) {\n\t\t\tthis._charMeasureElement = document.createElement(\"div\");\n\t\t\tthis._panelContainer.appendChild(this._charMeasureElement);\n\t\t}\n\t\treturn this._charMeasureElement;\n\t}\n\n\tprivate _getBoundingRectFor(\n\t\tchar: string,\n\t\tfontFamily: string,\n\t\tfontSize: number,\n\t): ClientRect | DOMRect | undefined {\n\t\tlet charMeasureElement: HTMLElement;\n\t\ttry {\n\t\t\tcharMeasureElement = this._createCharMeasureElementIfNecessary();\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst style = charMeasureElement.style;\n\t\tstyle.display = \"inline-block\";\n\t\tstyle.fontFamily = fontFamily;\n\t\tstyle.fontSize = fontSize + \"px\";\n\t\tstyle.lineHeight = \"normal\";\n\t\tcharMeasureElement.innerText = char;\n\t\tconst rect = charMeasureElement.getBoundingClientRect();\n\t\tstyle.display = \"none\";\n\n\t\treturn rect;\n\t}\n\n\tprivate _measureFont(\n\t\tw: Window,\n\t\tfontFamily: string,\n\t\tfontSize: number,\n\t\tletterSpacing: number,\n\t\tlineHeight: number,\n\t): ITerminalFont {\n\t\tconst rect = this._getBoundingRectFor(\"X\", fontFamily, fontSize);\n\n\t\t// Bounding client rect was invalid, use last font measurement if available.\n\t\tif (\n\t\t\tthis._lastFontMeasurement &&\n\t\t\t(!rect || !rect.width || !rect.height)\n\t\t) {\n\t\t\treturn this._lastFontMeasurement;\n\t\t}\n\n\t\tthis._lastFontMeasurement = {\n\t\t\tfontFamily,\n\t\t\tfontSize,\n\t\t\tletterSpacing,\n\t\t\tlineHeight,\n\t\t\tcharWidth: 0,\n\t\t\tcharHeight: 0,\n\t\t};\n\n\t\tif (rect && rect.width && rect.height) {\n\t\t\tthis._lastFontMeasurement.charHeight = Math.ceil(rect.height);\n\t\t\t// Char width is calculated differently for DOM and the other renderer types. Refer to\n\t\t\t// how each renderer updates their dimensions in xterm.js\n\t\t\tif (\n\t\t\t\tthis._terminalConfigurationService.config.gpuAcceleration ===\n\t\t\t\t\"off\"\n\t\t\t) {\n\t\t\t\tthis._lastFontMeasurement.charWidth = rect.width;\n\t\t\t} else {\n\t\t\t\tconst deviceCharWidth = Math.floor(\n\t\t\t\t\trect.width * w.devicePixelRatio,\n\t\t\t\t);\n\t\t\t\tconst deviceCellWidth =\n\t\t\t\t\tdeviceCharWidth + Math.round(letterSpacing);\n\t\t\t\tconst cssCellWidth = deviceCellWidth / w.devicePixelRatio;\n\t\t\t\tthis._lastFontMeasurement.charWidth =\n\t\t\t\t\tcssCellWidth -\n\t\t\t\t\tMath.round(letterSpacing) / w.devicePixelRatio;\n\t\t\t}\n\t\t}\n\n\t\treturn this._lastFontMeasurement;\n\t}\n}\n\n// #endregion TerminalFontMetrics\n\n// #region Utils\n\nfunction clampInt<T>(\n\tsource: any,\n\tminimum: number,\n\tmaximum: number,\n\tfallback: T,\n): number | T {\n\tlet r = Number.parseInt(source, 10);\n\tif (isNaN(r)) {\n\t\treturn fallback;\n\t}\n\tif (typeof minimum === \"number\") {\n\t\tr = Math.max(minimum, r);\n\t}\n\tif (typeof maximum === \"number\") {\n\t\tr = Math.min(maximum, r);\n\t}\n\treturn r;\n}\n\n// #endregion Utils\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,oBAAoB;AACzC,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,OAEM;AACP,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAIA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAA6C,mBAAmB;AAKzD,IAAM,+BAAN,cACE,WAET;AAAA,EAeC,YAEkB,uBAChB;AACD,UAAM;AAFW;AAIjB,SAAK,eAAe,KAAK;AAAA,MACxB,IAAI,oBAAoB,MAAM,KAAK,qBAAqB;AAAA,IACzD;AAEA,SAAK;AAAA,MACJ,MAAM;AAAA,QACL,KAAK,sBAAsB;AAAA,QAC3B,CAAC,MAAM;AACN,cAAI,CAAC,KAAK,EAAE,qBAAqB,uBAAuB,GAAG;AAC1D,iBAAK,cAAc;AAAA,UACpB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EArED,OAkCA;AAAA;AAAA;AAAA,EAGW;AAAA,EAEA;AAAA,EACV,IAAI,SAAS;AACZ,WAAO,KAAK;AAAA,EACb;AAAA,EAEiB,mBAAmB,IAAI,QAAc;AAAA,EACtD,IAAI,kBAA+B;AAClC,WAAO,KAAK,iBAAiB;AAAA,EAC9B;AAAA,EAwBA,kBAAkB,gBAAmC;AACpD,WAAO,KAAK,aAAa,kBAAkB,cAAc;AAAA,EAC1D;AAAA,EACA,wBAAiC;AAChC,WAAO,KAAK,aAAa,sBAAsB;AAAA,EAChD;AAAA,EACA,QACC,GACA,WACA,mBACgB;AAChB,WAAO,KAAK,aAAa,QAAQ,GAAG,WAAW,iBAAiB;AAAA,EACjE;AAAA,EAEQ,gBAAsB;AAC7B,UAAM,eAAe;AAAA,MACpB,GAAG,KAAK,sBAAsB;AAAA,QAC7B;AAAA,MACD;AAAA,IACD;AACA,iBAAa,aAAa,KAAK;AAAA,MAC9B,aAAa;AAAA,MACb;AAAA,IACD;AACA,iBAAa,iBAAiB,KAAK;AAAA,MAClC,aAAa;AAAA,MACb;AAAA,IACD;AACA,SAAK,UAAU;AACf,SAAK,iBAAiB,KAAK;AAAA,EAC5B;AAAA,EAEQ,qBACP,OACA,eACa;AACb,QAAI,UAAU,YAAY,UAAU,QAAQ;AAC3C,aAAO;AAAA,IACR;AACA,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAtFa,+BAAN;AAAA,EAmBJ;AAAA,GAnBU;AA4Fb,IAAK,gBAAL,kBAAKA,mBAAL;AACC,EAAAA,8BAAA,qBAAkB,KAAlB;AACA,EAAAA,8BAAA,qBAAkB,OAAlB;AAFI,SAAAA;AAAA,GAAA;AAKE,MAAM,4BAA4B,WAAW;AAAA,EAOnD,YACkB,+BACA,uBAChB;AACD,UAAM;AAHW;AACA;AAGjB,SAAK,UAAU,aAAa,MAAM,KAAK,qBAAqB,OAAO,CAAC,CAAC;AAAA,EACtE;AAAA,EA7ID,OAgIoD;AAAA;AAAA;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AAAA,EAER,cAA2B,YAAY;AAAA,EAUvC,kBAAkB,gBAAmC;AACpD,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAEA,wBAAiC;AAChC,UAAM,WAAW;AACjB,UAAM,aACL,KAAK,8BAA8B,OAAO,cAC1C,KAAK,sBAAsB,SAAyB,QAAQ,EAC1D,cACF,qBAAqB;AACtB,UAAM,QAAQ,KAAK,oBAAoB,KAAK,YAAY,QAAQ;AAChE,UAAM,QAAQ,KAAK,oBAAoB,KAAK,YAAY,QAAQ;AAGhE,QAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,SAAS,CAAC,MAAM,OAAO;AACrD,aAAO;AAAA,IACR;AAEA,WAAO,MAAM,UAAU,MAAM;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QACC,GACA,WACA,mBACgB;AAChB,UAAM,eACL,KAAK,sBAAsB,SAAyB,QAAQ;AAE7D,QAAI,aACH,KAAK,8BAA8B,OAAO,cAC1C,aAAa,cACb,qBAAqB,cACrB;AACD,QAAI,WAAW;AAAA,MACd,KAAK,8BAA8B,OAAO;AAAA,MAC1C;AAAA,MACA;AAAA,MACA,qBAAqB;AAAA,IACtB;AAGA,QAAI,CAAC,KAAK,8BAA8B,OAAO,YAAY;AAC1D,UAAI,KAAK,gBAAgB,YAAY,QAAQ;AAC5C,qBAAa;AAAA,MACd;AACA,UAAI,KAAK,gBAAgB,YAAY,QAAQ;AAC5C,qBAAa;AAGb,mBAAW;AAAA,UACV,WAAW;AAAA,UACX;AAAA,UACA;AAAA,UACA,qBAAqB;AAAA,QACtB;AAAA,MACD;AAAA,IACD;AAGA,kBAAc;AAKd,QAAI,aAAa;AAChB,oBAAc;AAAA,IACf;AAEA,UAAM,gBAAgB,KAAK,8BAA8B,OACvD,gBACC,KAAK;AAAA,MACL,KAAK;AAAA,QACJ,KAAK,8BAA8B,OAAO;AAAA,MAC3C;AAAA,MACA;AAAA,IACD,IACC;AACH,UAAM,aAAa,KAAK,8BAA8B,OAAO,aAC1D,KAAK,IAAI,KAAK,8BAA8B,OAAO,YAAY,CAAC,IAChE;AAEH,QAAI,mBAAmB;AACtB,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAGA,QAAI,WAAW,gBAAgB,UAAU,OAAO;AAC/C,YAAM,WAAW,UAAU,eAAe,WAAW,IAAI;AACzD,UAAI,UAAU,SAAS,UAAU,QAAQ;AACxC,eAAO;AAAA,UACN;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,YAAY,SAAS,SAAS;AAAA,UAC9B,WACC,SAAS,QACT,KAAK,MAAM,aAAa,IAAI,EAAE;AAAA,QAChC;AAAA,MACD;AAAA,IACD;AAGA,WAAO,KAAK;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,uCAAoD;AAC3D,QAAI,CAAC,KAAK,iBAAiB;AAC1B,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAEA,QACC,CAAC,KAAK,uBACN,CAAC,KAAK,oBAAoB,eACzB;AACD,WAAK,sBAAsB,SAAS,cAAc,KAAK;AACvD,WAAK,gBAAgB,YAAY,KAAK,mBAAmB;AAAA,IAC1D;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,oBACP,MACA,YACA,UACmC;AACnC,QAAI;AACJ,QAAI;AACH,2BAAqB,KAAK,qCAAqC;AAAA,IAChE,QAAQ;AACP,aAAO;AAAA,IACR;AACA,UAAM,QAAQ,mBAAmB;AACjC,UAAM,UAAU;AAChB,UAAM,aAAa;AACnB,UAAM,WAAW,WAAW;AAC5B,UAAM,aAAa;AACnB,uBAAmB,YAAY;AAC/B,UAAM,OAAO,mBAAmB,sBAAsB;AACtD,UAAM,UAAU;AAEhB,WAAO;AAAA,EACR;AAAA,EAEQ,aACP,GACA,YACA,UACA,eACA,YACgB;AAChB,UAAM,OAAO,KAAK,oBAAoB,KAAK,YAAY,QAAQ;AAG/D,QACC,KAAK,yBACJ,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,KAAK,SAC9B;AACD,aAAO,KAAK;AAAA,IACb;AAEA,SAAK,uBAAuB;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX,YAAY;AAAA,IACb;AAEA,QAAI,QAAQ,KAAK,SAAS,KAAK,QAAQ;AACtC,WAAK,qBAAqB,aAAa,KAAK,KAAK,KAAK,MAAM;AAG5D,UACC,KAAK,8BAA8B,OAAO,oBAC1C,OACC;AACD,aAAK,qBAAqB,YAAY,KAAK;AAAA,MAC5C,OAAO;AACN,cAAM,kBAAkB,KAAK;AAAA,UAC5B,KAAK,QAAQ,EAAE;AAAA,QAChB;AACA,cAAM,kBACL,kBAAkB,KAAK,MAAM,aAAa;AAC3C,cAAM,eAAe,kBAAkB,EAAE;AACzC,aAAK,qBAAqB,YACzB,eACA,KAAK,MAAM,aAAa,IAAI,EAAE;AAAA,MAChC;AAAA,IACD;AAEA,WAAO,KAAK;AAAA,EACb;AACD;AAMA,SAAS,SACR,QACA,SACA,SACA,UACa;AACb,MAAI,IAAI,OAAO,SAAS,QAAQ,EAAE;AAClC,MAAI,MAAM,CAAC,GAAG;AACb,WAAO;AAAA,EACR;AACA,MAAI,OAAO,YAAY,UAAU;AAChC,QAAI,KAAK,IAAI,SAAS,CAAC;AAAA,EACxB;AACA,MAAI,OAAO,YAAY,UAAU;AAChC,QAAI,KAAK,IAAI,SAAS,CAAC;AAAA,EACxB;AACA,SAAO;AACR;AAjBS;",
  "names": ["FontConstants"]
}
