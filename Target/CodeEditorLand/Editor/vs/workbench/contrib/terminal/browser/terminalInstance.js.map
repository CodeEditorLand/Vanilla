{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalInstance.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IMarker, Terminal as XTermTerminal } from \"@xterm/xterm\";\nimport { importAMDNodeModule } from \"../../../../amdX.js\";\nimport { isFirefox } from \"../../../../base/browser/browser.js\";\nimport { BrowserFeatures } from \"../../../../base/browser/canIUse.js\";\nimport { DataTransfers } from \"../../../../base/browser/dnd.js\";\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport { StandardKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport { Orientation } from \"../../../../base/browser/ui/sash/sash.js\";\nimport { DomScrollableElement } from \"../../../../base/browser/ui/scrollbar/scrollableElement.js\";\nimport {\n\tAutoOpenBarrier,\n\ttype Barrier,\n\tPromises,\n\tdisposableTimeout,\n\ttimeout,\n} from \"../../../../base/common/async.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { debounce } from \"../../../../base/common/decorators.js\";\nimport {\n\tErrorNoTelemetry,\n\tonUnexpectedError,\n} from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { KeyCode } from \"../../../../base/common/keyCodes.js\";\nimport { type ISeparator, template } from \"../../../../base/common/labels.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport * as path from \"../../../../base/common/path.js\";\nimport {\n\tOS,\n\tOperatingSystem,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport { ScrollbarVisibility } from \"../../../../base/common/scrollable.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { TabFocus } from \"../../../../editor/browser/config/tabFocus.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IAccessibilityService } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport {\n\tAccessibilitySignal,\n\tIAccessibilitySignalService,\n} from \"../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tCodeDataTransfers,\n\tcontainsDragType,\n} from \"../../../../platform/dnd/browser/dnd.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../../../platform/instantiation/common/serviceCollection.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ResultKind } from \"../../../../platform/keybinding/common/keybindingResolver.js\";\nimport {\n\tINotificationService,\n\ttype IPromptChoice,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype QuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype IMarkProperties,\n\ttype ITerminalCommand,\n\tTerminalCapability,\n} from \"../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport { TerminalCapabilityStoreMultiplexer } from \"../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js\";\nimport type {\n\tIEnvironmentVariableCollection,\n\tIMergedEnvironmentVariableCollection,\n} from \"../../../../platform/terminal/common/environmentVariable.js\";\nimport { deserializeEnvironmentVariableCollections } from \"../../../../platform/terminal/common/environmentVariableShared.js\";\nimport {\n\tGeneralShellType,\n\ttype IProcessDataEvent,\n\ttype IProcessPropertyMap,\n\ttype IReconnectionProperties,\n\ttype IShellLaunchConfig,\n\ttype ITerminalDimensionsOverride,\n\ttype ITerminalLaunchError,\n\tITerminalLogService,\n\tPosixShellType,\n\tProcessPropertyType,\n\tShellIntegrationStatus,\n\tTerminalExitReason,\n\ttype TerminalIcon,\n\tTerminalLocation,\n\tTerminalSettingId,\n\ttype TerminalShellType,\n\tTitleEventSource,\n\ttype WindowsShellType,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { formatMessageForTerminal } from \"../../../../platform/terminal/common/terminalStrings.js\";\nimport { editorBackground } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { getIconRegistry } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport {\n\ttype IColorTheme,\n\tIThemeService,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspaceTrustRequestService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport {\n\tPANEL_BACKGROUND,\n\tSIDE_BAR_BACKGROUND,\n} from \"../../../common/theme.js\";\nimport {\n\tIViewDescriptorService,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tisHorizontal,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport { IPathService } from \"../../../services/path/common/pathService.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { AccessibilityVerbositySettingId } from \"../../accessibility/browser/accessibilityConfiguration.js\";\nimport { AccessibilityCommandId } from \"../../accessibility/common/accessibilityCommands.js\";\nimport type { IEnvironmentVariableInfo } from \"../common/environmentVariable.js\";\nimport { getCommandHistory, getDirectoryHistory } from \"../common/history.js\";\nimport {\n\tDEFAULT_COMMANDS_TO_SKIP_SHELL,\n\ttype ITerminalProcessManager,\n\tITerminalProfileResolverService,\n\tProcessState,\n\tTERMINAL_CREATION_COMMANDS,\n\tTERMINAL_VIEW_ID,\n\tTerminalCommandId,\n} from \"../common/terminal.js\";\nimport { shouldPasteTerminalText } from \"../common/terminalClipboard.js\";\nimport { TERMINAL_BACKGROUND_COLOR } from \"../common/terminalColorRegistry.js\";\nimport { TerminalContextKeys } from \"../common/terminalContextKey.js\";\nimport {\n\tgetWorkspaceForTerminal,\n\tpreparePathForShell,\n} from \"../common/terminalEnvironment.js\";\nimport { terminalStrings } from \"../common/terminalStrings.js\";\nimport {\n\ttype IRequestAddInstanceToGroupEvent,\n\tITerminalConfigurationService,\n\ttype ITerminalContribution,\n\ttype ITerminalInstance,\n\ttype IXtermColorProvider,\n\tTerminalDataTransfers,\n} from \"./terminal.js\";\nimport { TerminalLaunchHelpAction } from \"./terminalActions.js\";\nimport { TerminalEditorInput } from \"./terminalEditorInput.js\";\nimport { TerminalExtensionsRegistry } from \"./terminalExtensions.js\";\nimport {\n\tcreateColorStyleElement,\n\tgetColorClass,\n\tgetStandardColors,\n} from \"./terminalIcon.js\";\nimport { TerminalIconPicker } from \"./terminalIconPicker.js\";\nimport { TerminalProcessManager } from \"./terminalProcessManager.js\";\nimport { TerminalResizeDebouncer } from \"./terminalResizeDebouncer.js\";\nimport { showRunRecentQuickPick } from \"./terminalRunRecentQuickPick.js\";\nimport {\n\ttype ITerminalStatusList,\n\tTerminalStatus,\n\tTerminalStatusList,\n} from \"./terminalStatusList.js\";\nimport {\n\tgetTerminalResourcesFromDragEvent,\n\tgetTerminalUri,\n} from \"./terminalUri.js\";\nimport { TerminalWidgetManager } from \"./widgets/widgetManager.js\";\nimport { LineDataEventAddon } from \"./xterm/lineDataEventAddon.js\";\nimport {\n\tXtermTerminal,\n\tgetXtermScaledDimensions,\n} from \"./xterm/xtermTerminal.js\";\n\nimport type { IMenu } from \"../../../../platform/actions/common/actions.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\n// HACK: This file should not depend on terminalContrib\n// eslint-disable-next-line local/code-import-patterns\nimport { TerminalAccessibilityCommandId } from \"../../terminalContrib/accessibility/common/terminal.accessibility.js\";\nimport { openContextMenu } from \"./terminalContextMenu.js\";\n\nenum Constants {\n\t/**\n\t * The maximum amount of milliseconds to wait for a container before starting to create the\n\t * terminal process. This period helps ensure the terminal has good initial dimensions to work\n\t * with if it's going to be a foreground terminal.\n\t */\n\tWaitForContainerThreshold = 100,\n\n\tDefaultCols = 80,\n\tDefaultRows = 30,\n\tMaxCanvasWidth = 4096,\n}\n\nlet xtermConstructor: Promise<typeof XTermTerminal> | undefined;\n\ninterface ICanvasDimensions {\n\twidth: number;\n\theight: number;\n}\n\ninterface IGridDimensions {\n\tcols: number;\n\trows: number;\n}\n\nconst shellIntegrationSupportedShellTypes: (\n\t| PosixShellType\n\t| GeneralShellType\n\t| WindowsShellType\n)[] = [\n\tPosixShellType.Bash,\n\tPosixShellType.Zsh,\n\tGeneralShellType.PowerShell,\n\tGeneralShellType.Python,\n];\n\nexport class TerminalInstance extends Disposable implements ITerminalInstance {\n\tprivate static _lastKnownCanvasDimensions: ICanvasDimensions | undefined;\n\tprivate static _lastKnownGridDimensions: IGridDimensions | undefined;\n\tprivate static _instanceIdCounter = 1;\n\n\tprivate readonly _scopedInstantiationService: IInstantiationService;\n\n\tprivate readonly _processManager: ITerminalProcessManager;\n\tprivate readonly _contributions: Map<string, ITerminalContribution> =\n\t\tnew Map();\n\tprivate readonly _resource: URI;\n\tprivate _xtermReadyPromise: Promise<XtermTerminal>;\n\tprivate _pressAnyKeyToCloseListener: IDisposable | undefined;\n\tprivate _instanceId: number;\n\tprivate _latestXtermWriteData = 0;\n\tprivate _latestXtermParseData = 0;\n\tprivate _isExiting: boolean;\n\tprivate _hadFocusOnExit: boolean;\n\tprivate _isVisible: boolean;\n\tprivate _exitCode: number | undefined;\n\tprivate _exitReason: TerminalExitReason | undefined;\n\tprivate _skipTerminalCommands: string[];\n\tprivate _shellType: TerminalShellType | undefined;\n\tprivate _title = \"\";\n\tprivate _titleSource: TitleEventSource = TitleEventSource.Process;\n\tprivate _container: HTMLElement | undefined;\n\tprivate _wrapperElement: HTMLElement & { xterm?: XTermTerminal };\n\tget domElement(): HTMLElement {\n\t\treturn this._wrapperElement;\n\t}\n\tprivate _horizontalScrollbar: DomScrollableElement | undefined;\n\tprivate _terminalFocusContextKey: IContextKey<boolean>;\n\tprivate _terminalHasFixedWidth: IContextKey<boolean>;\n\tprivate _terminalHasTextContextKey: IContextKey<boolean>;\n\tprivate _terminalAltBufferActiveContextKey: IContextKey<boolean>;\n\tprivate _terminalShellIntegrationEnabledContextKey: IContextKey<boolean>;\n\tprivate _cols = 0;\n\tprivate _rows = 0;\n\tprivate _fixedCols: number | undefined;\n\tprivate _fixedRows: number | undefined;\n\tprivate _cwd: string | undefined = undefined;\n\tprivate _initialCwd: string | undefined = undefined;\n\tprivate _injectedArgs: string[] | undefined = undefined;\n\tprivate _layoutSettingsChanged = true;\n\tprivate _dimensionsOverride: ITerminalDimensionsOverride | undefined;\n\tprivate _areLinksReady = false;\n\tprivate readonly _initialDataEventsListener: MutableDisposable<IDisposable> =\n\t\tthis._register(new MutableDisposable());\n\tprivate _initialDataEvents: string[] | undefined = [];\n\tprivate _containerReadyBarrier: AutoOpenBarrier;\n\tprivate _attachBarrier: AutoOpenBarrier;\n\tprivate _icon: TerminalIcon | undefined;\n\tprivate readonly _messageTitleDisposable: MutableDisposable<IDisposable> =\n\t\tthis._register(new MutableDisposable());\n\tprivate _widgetManager: TerminalWidgetManager;\n\tprivate readonly _dndObserver: MutableDisposable<IDisposable> =\n\t\tthis._register(new MutableDisposable());\n\tprivate _lastLayoutDimensions: dom.Dimension | undefined;\n\tprivate _hasHadInput: boolean;\n\tprivate _description?: string;\n\tprivate _processName = \"\";\n\tprivate _sequence?: string;\n\tprivate _staticTitle?: string;\n\tprivate _workspaceFolder?: IWorkspaceFolder;\n\tprivate _labelComputer?: TerminalLabelComputer;\n\tprivate _userHome?: string;\n\tprivate _hasScrollBar?: boolean;\n\tprivate _target?: TerminalLocation | undefined;\n\tprivate _usedShellIntegrationInjection = false;\n\tget usedShellIntegrationInjection(): boolean {\n\t\treturn this._usedShellIntegrationInjection;\n\t}\n\tprivate _lineDataEventAddon: LineDataEventAddon | undefined;\n\tprivate readonly _scopedContextKeyService: IContextKeyService;\n\tprivate _resizeDebouncer?: TerminalResizeDebouncer;\n\tprivate _pauseInputEventBarrier: Barrier | undefined;\n\tpauseInputEvents(barrier: Barrier): void {\n\t\tthis._pauseInputEventBarrier = barrier;\n\t}\n\n\treadonly capabilities = this._register(\n\t\tnew TerminalCapabilityStoreMultiplexer(),\n\t);\n\treadonly statusList: ITerminalStatusList;\n\n\tget store(): DisposableStore {\n\t\treturn this._store;\n\t}\n\n\tget extEnvironmentVariableCollection():\n\t\t| IMergedEnvironmentVariableCollection\n\t\t| undefined {\n\t\treturn this._processManager.extEnvironmentVariableCollection;\n\t}\n\n\txterm?: XtermTerminal;\n\tdisableLayout = false;\n\n\tget waitOnExit(): ITerminalInstance[\"waitOnExit\"] {\n\t\treturn (\n\t\t\tthis._shellLaunchConfig.attachPersistentProcess?.waitOnExit ||\n\t\t\tthis._shellLaunchConfig.waitOnExit\n\t\t);\n\t}\n\tset waitOnExit(value: ITerminalInstance[\"waitOnExit\"]) {\n\t\tthis._shellLaunchConfig.waitOnExit = value;\n\t}\n\n\tget target(): TerminalLocation | undefined {\n\t\treturn this._target;\n\t}\n\tset target(value: TerminalLocation | undefined) {\n\t\tthis._target = value;\n\t\tthis._onDidChangeTarget.fire(value);\n\t}\n\n\tget instanceId(): number {\n\t\treturn this._instanceId;\n\t}\n\tget resource(): URI {\n\t\treturn this._resource;\n\t}\n\tget cols(): number {\n\t\tif (this._fixedCols !== undefined) {\n\t\t\treturn this._fixedCols;\n\t\t}\n\t\tif (this._dimensionsOverride && this._dimensionsOverride.cols) {\n\t\t\tif (this._dimensionsOverride.forceExactSize) {\n\t\t\t\treturn this._dimensionsOverride.cols;\n\t\t\t}\n\t\t\treturn Math.min(\n\t\t\t\tMath.max(this._dimensionsOverride.cols, 2),\n\t\t\t\tthis._cols,\n\t\t\t);\n\t\t}\n\t\treturn this._cols;\n\t}\n\tget rows(): number {\n\t\tif (this._fixedRows !== undefined) {\n\t\t\treturn this._fixedRows;\n\t\t}\n\t\tif (this._dimensionsOverride && this._dimensionsOverride.rows) {\n\t\t\tif (this._dimensionsOverride.forceExactSize) {\n\t\t\t\treturn this._dimensionsOverride.rows;\n\t\t\t}\n\t\t\treturn Math.min(\n\t\t\t\tMath.max(this._dimensionsOverride.rows, 2),\n\t\t\t\tthis._rows,\n\t\t\t);\n\t\t}\n\t\treturn this._rows;\n\t}\n\tget isDisposed(): boolean {\n\t\treturn this._store.isDisposed;\n\t}\n\tget fixedCols(): number | undefined {\n\t\treturn this._fixedCols;\n\t}\n\tget fixedRows(): number | undefined {\n\t\treturn this._fixedRows;\n\t}\n\tget maxCols(): number {\n\t\treturn this._cols;\n\t}\n\tget maxRows(): number {\n\t\treturn this._rows;\n\t}\n\t// TODO: Ideally processId would be merged into processReady\n\tget processId(): number | undefined {\n\t\treturn this._processManager.shellProcessId;\n\t}\n\t// TODO: How does this work with detached processes?\n\t// TODO: Should this be an event as it can fire twice?\n\tget processReady(): Promise<void> {\n\t\treturn this._processManager.ptyProcessReady;\n\t}\n\tget hasChildProcesses(): boolean {\n\t\treturn (\n\t\t\tthis.shellLaunchConfig.attachPersistentProcess?.hasChildProcesses ||\n\t\t\tthis._processManager.hasChildProcesses\n\t\t);\n\t}\n\tget reconnectionProperties(): IReconnectionProperties | undefined {\n\t\treturn (\n\t\t\tthis.shellLaunchConfig.attachPersistentProcess\n\t\t\t\t?.reconnectionProperties ||\n\t\t\tthis.shellLaunchConfig.reconnectionProperties\n\t\t);\n\t}\n\tget areLinksReady(): boolean {\n\t\treturn this._areLinksReady;\n\t}\n\tget initialDataEvents(): string[] | undefined {\n\t\treturn this._initialDataEvents;\n\t}\n\tget exitCode(): number | undefined {\n\t\treturn this._exitCode;\n\t}\n\tget exitReason(): TerminalExitReason | undefined {\n\t\treturn this._exitReason;\n\t}\n\tget hadFocusOnExit(): boolean {\n\t\treturn this._hadFocusOnExit;\n\t}\n\tget isTitleSetByProcess(): boolean {\n\t\treturn !!this._messageTitleDisposable.value;\n\t}\n\tget shellLaunchConfig(): IShellLaunchConfig {\n\t\treturn this._shellLaunchConfig;\n\t}\n\tget shellType(): TerminalShellType | undefined {\n\t\treturn this._shellType;\n\t}\n\tget os(): OperatingSystem | undefined {\n\t\treturn this._processManager.os;\n\t}\n\tget isRemote(): boolean {\n\t\treturn this._processManager.remoteAuthority !== undefined;\n\t}\n\tget remoteAuthority(): string | undefined {\n\t\treturn this._processManager.remoteAuthority;\n\t}\n\tget hasFocus(): boolean {\n\t\treturn dom.isAncestorOfActiveElement(this._wrapperElement);\n\t}\n\tget title(): string {\n\t\treturn this._title;\n\t}\n\tget titleSource(): TitleEventSource {\n\t\treturn this._titleSource;\n\t}\n\tget icon(): TerminalIcon | undefined {\n\t\treturn this._getIcon();\n\t}\n\tget color(): string | undefined {\n\t\treturn this._getColor();\n\t}\n\tget processName(): string {\n\t\treturn this._processName;\n\t}\n\tget sequence(): string | undefined {\n\t\treturn this._sequence;\n\t}\n\tget staticTitle(): string | undefined {\n\t\treturn this._staticTitle;\n\t}\n\tget workspaceFolder(): IWorkspaceFolder | undefined {\n\t\treturn this._workspaceFolder;\n\t}\n\tget cwd(): string | undefined {\n\t\treturn this._cwd;\n\t}\n\tget initialCwd(): string | undefined {\n\t\treturn this._initialCwd;\n\t}\n\tget description(): string | undefined {\n\t\tif (this._description) {\n\t\t\treturn this._description;\n\t\t}\n\t\tconst type =\n\t\t\tthis.shellLaunchConfig.attachPersistentProcess?.type ||\n\t\t\tthis.shellLaunchConfig.type;\n\t\tswitch (type) {\n\t\t\tcase \"Task\":\n\t\t\t\treturn terminalStrings.typeTask;\n\t\t\tcase \"Local\":\n\t\t\t\treturn terminalStrings.typeLocal;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\tget userHome(): string | undefined {\n\t\treturn this._userHome;\n\t}\n\tget shellIntegrationNonce(): string {\n\t\treturn this._processManager.shellIntegrationNonce;\n\t}\n\tget injectedArgs(): string[] | undefined {\n\t\treturn this._injectedArgs;\n\t}\n\n\t// The onExit event is special in that it fires and is disposed after the terminal instance\n\t// itself is disposed\n\tprivate readonly _onExit = new Emitter<\n\t\tnumber | ITerminalLaunchError | undefined\n\t>();\n\treadonly onExit = this._onExit.event;\n\tprivate readonly _onDisposed = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDisposed = this._onDisposed.event;\n\tprivate readonly _onProcessIdReady = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onProcessIdReady = this._onProcessIdReady.event;\n\tprivate readonly _onProcessReplayComplete = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onProcessReplayComplete = this._onProcessReplayComplete.event;\n\tprivate readonly _onTitleChanged = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onTitleChanged = this._onTitleChanged.event;\n\tprivate readonly _onIconChanged = this._register(\n\t\tnew Emitter<{ instance: ITerminalInstance; userInitiated: boolean }>(),\n\t);\n\treadonly onIconChanged = this._onIconChanged.event;\n\tprivate readonly _onWillData = this._register(new Emitter<string>());\n\treadonly onWillData = this._onWillData.event;\n\tprivate readonly _onData = this._register(new Emitter<string>());\n\treadonly onData = this._onData.event;\n\tprivate readonly _onBinary = this._register(new Emitter<string>());\n\treadonly onBinary = this._onBinary.event;\n\tprivate readonly _onLineData = this._register(\n\t\tnew Emitter<string>({\n\t\t\tonDidAddFirstListener: () => this._onLineDataSetup(),\n\t\t}),\n\t);\n\treadonly onLineData = this._onLineData.event;\n\tprivate readonly _onRequestExtHostProcess = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onRequestExtHostProcess = this._onRequestExtHostProcess.event;\n\tprivate readonly _onDimensionsChanged = this._register(new Emitter<void>());\n\treadonly onDimensionsChanged = this._onDimensionsChanged.event;\n\tprivate readonly _onMaximumDimensionsChanged = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onMaximumDimensionsChanged =\n\t\tthis._onMaximumDimensionsChanged.event;\n\tprivate readonly _onDidFocus = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDidFocus = this._onDidFocus.event;\n\tprivate readonly _onDidRequestFocus = this._register(new Emitter<void>());\n\treadonly onDidRequestFocus = this._onDidRequestFocus.event;\n\tprivate readonly _onDidBlur = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDidBlur = this._onDidBlur.event;\n\tprivate readonly _onDidInputData = this._register(new Emitter<string>());\n\treadonly onDidInputData = this._onDidInputData.event;\n\tprivate readonly _onDidChangeSelection = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\treadonly onDidChangeSelection = this._onDidChangeSelection.event;\n\tprivate readonly _onRequestAddInstanceToGroup = this._register(\n\t\tnew Emitter<IRequestAddInstanceToGroupEvent>(),\n\t);\n\treadonly onRequestAddInstanceToGroup =\n\t\tthis._onRequestAddInstanceToGroup.event;\n\tprivate readonly _onDidChangeHasChildProcesses = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\treadonly onDidChangeHasChildProcesses =\n\t\tthis._onDidChangeHasChildProcesses.event;\n\tprivate readonly _onDidExecuteText = this._register(new Emitter<void>());\n\treadonly onDidExecuteText = this._onDidExecuteText.event;\n\tprivate readonly _onDidChangeTarget = this._register(\n\t\tnew Emitter<TerminalLocation | undefined>(),\n\t);\n\treadonly onDidChangeTarget = this._onDidChangeTarget.event;\n\tprivate readonly _onDidSendText = this._register(new Emitter<string>());\n\treadonly onDidSendText = this._onDidSendText.event;\n\tprivate readonly _onDidChangeShellType = this._register(\n\t\tnew Emitter<TerminalShellType>(),\n\t);\n\treadonly onDidChangeShellType = this._onDidChangeShellType.event;\n\tprivate readonly _onDidChangeVisibility = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate readonly _onWillPaste = this._register(new Emitter<string>());\n\treadonly onWillPaste = this._onWillPaste.event;\n\tprivate readonly _onDidPaste = this._register(new Emitter<string>());\n\treadonly onDidPaste = this._onDidPaste.event;\n\n\tconstructor(\n\t\tprivate readonly _terminalShellTypeContextKey: IContextKey<string>,\n\t\tprivate readonly _terminalInRunCommandPicker: IContextKey<boolean>,\n\t\tprivate _shellLaunchConfig: IShellLaunchConfig,\n\t\t@IContextKeyService\n\t\tprivate readonly _contextKeyService: IContextKeyService,\n\t\t@IContextMenuService\n\t\tprivate readonly _contextMenuService: IContextMenuService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITerminalConfigurationService\n\t\tprivate readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@ITerminalProfileResolverService\n\t\tprivate readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@IKeybindingService\n\t\tprivate readonly _keybindingService: IKeybindingService,\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t\t@IPreferencesService\n\t\tprivate readonly _preferencesService: IPreferencesService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@IClipboardService\n\t\tprivate readonly _clipboardService: IClipboardService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IAccessibilityService\n\t\tprivate readonly _accessibilityService: IAccessibilityService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IQuickInputService\n\t\tprivate readonly _quickInputService: IQuickInputService,\n\t\t@IWorkbenchEnvironmentService\n\t\tworkbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IWorkspaceTrustRequestService\n\t\tprivate readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IAccessibilitySignalService\n\t\tprivate readonly _accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly _viewDescriptorService: IViewDescriptorService,\n\t) {\n\t\tsuper();\n\n\t\tthis._wrapperElement = document.createElement(\"div\");\n\t\tthis._wrapperElement.classList.add(\"terminal-wrapper\");\n\n\t\tthis._widgetManager = this._register(\n\t\t\tinstantiationService.createInstance(TerminalWidgetManager),\n\t\t);\n\n\t\tthis._skipTerminalCommands = [];\n\t\tthis._isExiting = false;\n\t\tthis._hadFocusOnExit = false;\n\t\tthis._isVisible = false;\n\t\tthis._instanceId = TerminalInstance._instanceIdCounter++;\n\t\tthis._hasHadInput = false;\n\t\tthis._fixedRows =\n\t\t\t_shellLaunchConfig.attachPersistentProcess?.fixedDimensions?.rows;\n\t\tthis._fixedCols =\n\t\t\t_shellLaunchConfig.attachPersistentProcess?.fixedDimensions?.cols;\n\n\t\tthis._resource = getTerminalUri(\n\t\t\tthis._workspaceContextService.getWorkspace().id,\n\t\t\tthis.instanceId,\n\t\t\tthis.title,\n\t\t);\n\n\t\tif (this._shellLaunchConfig.attachPersistentProcess?.hideFromUser) {\n\t\t\tthis._shellLaunchConfig.hideFromUser =\n\t\t\t\tthis._shellLaunchConfig.attachPersistentProcess.hideFromUser;\n\t\t}\n\n\t\tif (\n\t\t\tthis._shellLaunchConfig.attachPersistentProcess?.isFeatureTerminal\n\t\t) {\n\t\t\tthis._shellLaunchConfig.isFeatureTerminal =\n\t\t\t\tthis._shellLaunchConfig.attachPersistentProcess.isFeatureTerminal;\n\t\t}\n\n\t\tif (this._shellLaunchConfig.attachPersistentProcess?.type) {\n\t\t\tthis._shellLaunchConfig.type =\n\t\t\t\tthis._shellLaunchConfig.attachPersistentProcess.type;\n\t\t}\n\n\t\tif (this.shellLaunchConfig.cwd) {\n\t\t\tconst cwdUri =\n\t\t\t\ttypeof this._shellLaunchConfig.cwd === \"string\"\n\t\t\t\t\t? URI.from({\n\t\t\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t\t\t\tpath: this._shellLaunchConfig.cwd,\n\t\t\t\t\t\t})\n\t\t\t\t\t: this._shellLaunchConfig.cwd;\n\t\t\tif (cwdUri) {\n\t\t\t\tthis._workspaceFolder =\n\t\t\t\t\tthis._workspaceContextService.getWorkspaceFolder(cwdUri) ??\n\t\t\t\t\tundefined;\n\t\t\t}\n\t\t}\n\t\tif (!this._workspaceFolder) {\n\t\t\tconst activeWorkspaceRootUri =\n\t\t\t\tthis._historyService.getLastActiveWorkspaceRoot();\n\t\t\tthis._workspaceFolder = activeWorkspaceRootUri\n\t\t\t\t? (this._workspaceContextService.getWorkspaceFolder(\n\t\t\t\t\t\tactiveWorkspaceRootUri,\n\t\t\t\t\t) ?? undefined)\n\t\t\t\t: undefined;\n\t\t}\n\n\t\tconst scopedContextKeyService = this._register(\n\t\t\t_contextKeyService.createScoped(this._wrapperElement),\n\t\t);\n\t\tthis._scopedContextKeyService = scopedContextKeyService;\n\t\tthis._scopedInstantiationService = this._register(\n\t\t\tinstantiationService.createChild(\n\t\t\t\tnew ServiceCollection([\n\t\t\t\t\tIContextKeyService,\n\t\t\t\t\tscopedContextKeyService,\n\t\t\t\t]),\n\t\t\t),\n\t\t);\n\n\t\tthis._terminalFocusContextKey = TerminalContextKeys.focus.bindTo(\n\t\t\tscopedContextKeyService,\n\t\t);\n\t\tthis._terminalHasFixedWidth =\n\t\t\tTerminalContextKeys.terminalHasFixedWidth.bindTo(\n\t\t\t\tscopedContextKeyService,\n\t\t\t);\n\t\tthis._terminalHasTextContextKey =\n\t\t\tTerminalContextKeys.textSelected.bindTo(scopedContextKeyService);\n\t\tthis._terminalAltBufferActiveContextKey =\n\t\t\tTerminalContextKeys.altBufferActive.bindTo(scopedContextKeyService);\n\t\tthis._terminalShellIntegrationEnabledContextKey =\n\t\t\tTerminalContextKeys.terminalShellIntegrationEnabled.bindTo(\n\t\t\t\tscopedContextKeyService,\n\t\t\t);\n\n\t\tthis._logService.trace(\n\t\t\t`terminalInstance#ctor (instanceId: ${this.instanceId})`,\n\t\t\tthis._shellLaunchConfig,\n\t\t);\n\t\tthis._register(\n\t\t\tthis.capabilities.onDidAddCapabilityType((e) => {\n\t\t\t\tthis._logService.debug(\"terminalInstance added capability\", e);\n\t\t\t\tif (e === TerminalCapability.CwdDetection) {\n\t\t\t\t\tthis.capabilities\n\t\t\t\t\t\t.get(TerminalCapability.CwdDetection)\n\t\t\t\t\t\t?.onDidChangeCwd((e) => {\n\t\t\t\t\t\t\tthis._cwd = e;\n\t\t\t\t\t\t\tthis._setTitle(this.title, TitleEventSource.Config);\n\t\t\t\t\t\t\tthis._scopedInstantiationService\n\t\t\t\t\t\t\t\t.invokeFunction(getDirectoryHistory)\n\t\t\t\t\t\t\t\t?.add(e, {\n\t\t\t\t\t\t\t\t\tremoteAuthority: this.remoteAuthority,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t} else if (e === TerminalCapability.CommandDetection) {\n\t\t\t\t\tconst commandCapability = this.capabilities.get(\n\t\t\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t\t\t);\n\t\t\t\t\tcommandCapability?.onCommandFinished((e) => {\n\t\t\t\t\t\tif (e.command.trim().length > 0) {\n\t\t\t\t\t\t\tthis._scopedInstantiationService\n\t\t\t\t\t\t\t\t.invokeFunction(getCommandHistory)\n\t\t\t\t\t\t\t\t?.add(e.command, {\n\t\t\t\t\t\t\t\t\tshellType: this._shellType,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.capabilities.onDidRemoveCapabilityType((e) =>\n\t\t\t\tthis._logService.debug(\n\t\t\t\t\t\"terminalInstance removed capability\",\n\t\t\t\t\te,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\t// Resolve just the icon ahead of time so that it shows up immediately in the tabs. This is\n\t\t// disabled in remote because this needs to be sync and the OS may differ on the remote\n\t\t// which would result in the wrong profile being selected and the wrong icon being\n\t\t// permanently attached to the terminal. This also doesn't work when the default profile\n\t\t// setting is set to null, that's handled after the process is created.\n\t\tif (\n\t\t\t!this.shellLaunchConfig.executable &&\n\t\t\t!workbenchEnvironmentService.remoteAuthority\n\t\t) {\n\t\t\tthis._terminalProfileResolverService.resolveIcon(\n\t\t\t\tthis._shellLaunchConfig,\n\t\t\t\tOS,\n\t\t\t);\n\t\t}\n\t\tthis._icon =\n\t\t\t_shellLaunchConfig.attachPersistentProcess?.icon ||\n\t\t\t_shellLaunchConfig.icon;\n\n\t\t// When a custom pty is used set the name immediately so it gets passed over to the exthost\n\t\t// and is available when Pseudoterminal.open fires.\n\t\tif (this.shellLaunchConfig.customPtyImplementation) {\n\t\t\tthis._setTitle(this._shellLaunchConfig.name, TitleEventSource.Api);\n\t\t}\n\n\t\tthis.statusList = this._register(\n\t\t\tthis._scopedInstantiationService.createInstance(TerminalStatusList),\n\t\t);\n\t\tthis._initDimensions();\n\t\tthis._processManager = this._createProcessManager();\n\n\t\tthis._containerReadyBarrier = new AutoOpenBarrier(\n\t\t\tConstants.WaitForContainerThreshold,\n\t\t);\n\t\tthis._attachBarrier = new AutoOpenBarrier(1000);\n\t\tthis._xtermReadyPromise = this._createXterm();\n\t\tthis._xtermReadyPromise\n\t\t\t.then(async () => {\n\t\t\t\t// Wait for a period to allow a container to be ready\n\t\t\t\tawait this._containerReadyBarrier.wait();\n\n\t\t\t\t// Resolve the executable ahead of time if shell integration is enabled, this should not\n\t\t\t\t// be done for custom PTYs as that would cause extension Pseudoterminal-based terminals\n\t\t\t\t// to hang in resolver extensions\n\t\t\t\tif (\n\t\t\t\t\t!this.shellLaunchConfig.customPtyImplementation &&\n\t\t\t\t\tthis._terminalConfigurationService.config.shellIntegration\n\t\t\t\t\t\t?.enabled &&\n\t\t\t\t\t!this.shellLaunchConfig.executable\n\t\t\t\t) {\n\t\t\t\t\tconst os = await this._processManager.getBackendOS();\n\t\t\t\t\tconst defaultProfile =\n\t\t\t\t\t\tawait this._terminalProfileResolverService.getDefaultProfile(\n\t\t\t\t\t\t\t{ remoteAuthority: this.remoteAuthority, os },\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.shellLaunchConfig.executable = defaultProfile.path;\n\t\t\t\t\tthis.shellLaunchConfig.args = defaultProfile.args;\n\t\t\t\t\tif (this.shellLaunchConfig.isExtensionOwnedTerminal) {\n\t\t\t\t\t\t// Only use default icon and color and env if they are undefined in the SLC\n\t\t\t\t\t\tthis.shellLaunchConfig.icon ??= defaultProfile.icon;\n\t\t\t\t\t\tthis.shellLaunchConfig.color ??= defaultProfile.color;\n\t\t\t\t\t\tthis.shellLaunchConfig.env ??= defaultProfile.env;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.shellLaunchConfig.icon = defaultProfile.icon;\n\t\t\t\t\t\tthis.shellLaunchConfig.color = defaultProfile.color;\n\t\t\t\t\t\tthis.shellLaunchConfig.env = defaultProfile.env;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait this._createProcess();\n\n\t\t\t\t// Re-establish the title after reconnect\n\t\t\t\tif (this.shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tthis._cwd =\n\t\t\t\t\t\tthis.shellLaunchConfig.attachPersistentProcess.cwd;\n\t\t\t\t\tthis._setTitle(\n\t\t\t\t\t\tthis.shellLaunchConfig.attachPersistentProcess.title,\n\t\t\t\t\t\tthis.shellLaunchConfig.attachPersistentProcess\n\t\t\t\t\t\t\t.titleSource,\n\t\t\t\t\t);\n\t\t\t\t\tthis.setShellType(this.shellType);\n\t\t\t\t}\n\n\t\t\t\tif (this._fixedCols) {\n\t\t\t\t\tawait this._addScrollbar();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\t// Ignore exceptions if the terminal is already disposed\n\t\t\t\tif (!this.isDisposed) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis._register(\n\t\t\tthis._configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tAccessibilityVerbositySettingId.Terminal,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._setAriaLabel(\n\t\t\t\t\t\tthis.xterm?.raw,\n\t\t\t\t\t\tthis._instanceId,\n\t\t\t\t\t\tthis.title,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(\"terminal.integrated\")) {\n\t\t\t\t\tthis.updateConfig();\n\t\t\t\t\tthis.setVisible(this._isVisible);\n\t\t\t\t}\n\t\t\t\tconst layoutSettings: string[] = [\n\t\t\t\t\tTerminalSettingId.FontSize,\n\t\t\t\t\tTerminalSettingId.FontFamily,\n\t\t\t\t\tTerminalSettingId.FontWeight,\n\t\t\t\t\tTerminalSettingId.FontWeightBold,\n\t\t\t\t\tTerminalSettingId.LetterSpacing,\n\t\t\t\t\tTerminalSettingId.LineHeight,\n\t\t\t\t\t\"editor.fontFamily\",\n\t\t\t\t];\n\t\t\t\tif (layoutSettings.some((id) => e.affectsConfiguration(id))) {\n\t\t\t\t\tthis._layoutSettingsChanged = true;\n\t\t\t\t\tawait this._resize();\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(TerminalSettingId.UnicodeVersion)) {\n\t\t\t\t\tthis._updateUnicodeVersion();\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(\"editor.accessibilitySupport\")) {\n\t\t\t\t\tthis.updateAccessibilitySupport();\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(TerminalSettingId.TerminalTitle) ||\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingId.TerminalTitleSeparator,\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingId.TerminalDescription,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._labelComputer?.refreshLabel(this);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._workspaceContextService.onDidChangeWorkspaceFolders(() =>\n\t\t\t\tthis._labelComputer?.refreshLabel(this),\n\t\t\t),\n\t\t);\n\n\t\t// Clear out initial data events after 10 seconds, hopefully extension hosts are up and\n\t\t// running at that point.\n\t\tlet initialDataEventsTimeout: number | undefined = dom\n\t\t\t.getWindow(this._container)\n\t\t\t.setTimeout(() => {\n\t\t\t\tinitialDataEventsTimeout = undefined;\n\t\t\t\tthis._initialDataEvents = undefined;\n\t\t\t\tthis._initialDataEventsListener.clear();\n\t\t\t}, 10000);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (initialDataEventsTimeout) {\n\t\t\t\t\tdom.getWindow(this._container).clearTimeout(\n\t\t\t\t\t\tinitialDataEventsTimeout,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Initialize contributions\n\t\tconst contributionDescs =\n\t\t\tTerminalExtensionsRegistry.getTerminalContributions();\n\t\tfor (const desc of contributionDescs) {\n\t\t\tif (this._contributions.has(desc.id)) {\n\t\t\t\tonUnexpectedError(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Cannot have two terminal contributions with the same id ${desc.id}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet contribution: ITerminalContribution;\n\t\t\ttry {\n\t\t\t\tcontribution = this._register(\n\t\t\t\t\tthis._scopedInstantiationService.createInstance(\n\t\t\t\t\t\tdesc.ctor,\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tthis._processManager,\n\t\t\t\t\t\tthis._widgetManager,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._contributions.set(desc.id, contribution);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t\tthis._xtermReadyPromise.then((xterm) => {\n\t\t\t\tcontribution.xtermReady?.(xterm);\n\t\t\t});\n\t\t\tthis._register(\n\t\t\t\tthis.onDisposed(() => {\n\t\t\t\t\tcontribution.dispose();\n\t\t\t\t\tthis._contributions.delete(desc.id);\n\t\t\t\t\t// Just in case to prevent potential future memory leaks due to cyclic dependency.\n\t\t\t\t\tif (\"instance\" in contribution) {\n\t\t\t\t\t\tdelete contribution.instance;\n\t\t\t\t\t}\n\t\t\t\t\tif (\"_instance\" in contribution) {\n\t\t\t\t\t\tdelete contribution._instance;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getContribution<T extends ITerminalContribution>(\n\t\tid: string,\n\t): T | null {\n\t\treturn this._contributions.get(id) as T | null;\n\t}\n\n\tprivate _getIcon(): TerminalIcon | undefined {\n\t\tif (!this._icon) {\n\t\t\tthis._icon =\n\t\t\t\tthis._processManager.processState >= ProcessState.Launching\n\t\t\t\t\t? getIconRegistry().getIcon(\n\t\t\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\t\t\tTerminalSettingId.TabsDefaultIcon,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined;\n\t\t}\n\t\treturn this._icon;\n\t}\n\n\tprivate _getColor(): string | undefined {\n\t\tif (this.shellLaunchConfig.color) {\n\t\t\treturn this.shellLaunchConfig.color;\n\t\t}\n\t\tif (this.shellLaunchConfig?.attachPersistentProcess?.color) {\n\t\t\treturn this.shellLaunchConfig.attachPersistentProcess.color;\n\t\t}\n\t\tif (this._processManager.processState >= ProcessState.Launching) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _initDimensions(): void {\n\t\t// The terminal panel needs to have been created to get the real view dimensions\n\t\tif (!this._container) {\n\t\t\t// Set the fallback dimensions if not\n\t\t\tthis._cols = Constants.DefaultCols;\n\t\t\tthis._rows = Constants.DefaultRows;\n\t\t\treturn;\n\t\t}\n\n\t\tconst computedStyle = dom\n\t\t\t.getWindow(this._container)\n\t\t\t.getComputedStyle(this._container);\n\t\tconst width = Number.parseInt(computedStyle.width);\n\t\tconst height = Number.parseInt(computedStyle.height);\n\n\t\tthis._evaluateColsAndRows(width, height);\n\t}\n\n\t/**\n\t * Evaluates and sets the cols and rows of the terminal if possible.\n\t * @param width The width of the container.\n\t * @param height The height of the container.\n\t * @return The terminal's width if it requires a layout.\n\t */\n\tprivate _evaluateColsAndRows(width: number, height: number): number | null {\n\t\t// Ignore if dimensions are undefined or 0\n\t\tif (!width || !height) {\n\t\t\tthis._setLastKnownColsAndRows();\n\t\t\treturn null;\n\t\t}\n\n\t\tconst dimension = this._getDimension(width, height);\n\t\tif (!dimension) {\n\t\t\tthis._setLastKnownColsAndRows();\n\t\t\treturn null;\n\t\t}\n\n\t\tconst font = this.xterm\n\t\t\t? this.xterm.getFont()\n\t\t\t: this._terminalConfigurationService.getFont(\n\t\t\t\t\tdom.getWindow(this.domElement),\n\t\t\t\t);\n\t\tconst newRC = getXtermScaledDimensions(\n\t\t\tdom.getWindow(this.domElement),\n\t\t\tfont,\n\t\t\tdimension.width,\n\t\t\tdimension.height,\n\t\t);\n\t\tif (!newRC) {\n\t\t\tthis._setLastKnownColsAndRows();\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this._cols !== newRC.cols || this._rows !== newRC.rows) {\n\t\t\tthis._cols = newRC.cols;\n\t\t\tthis._rows = newRC.rows;\n\t\t\tthis._fireMaximumDimensionsChanged();\n\t\t}\n\n\t\treturn dimension.width;\n\t}\n\n\tprivate _setLastKnownColsAndRows(): void {\n\t\tif (TerminalInstance._lastKnownGridDimensions) {\n\t\t\tthis._cols = TerminalInstance._lastKnownGridDimensions.cols;\n\t\t\tthis._rows = TerminalInstance._lastKnownGridDimensions.rows;\n\t\t}\n\t}\n\n\t@debounce(50)\n\tprivate _fireMaximumDimensionsChanged(): void {\n\t\tthis._onMaximumDimensionsChanged.fire();\n\t}\n\n\tprivate _getDimension(\n\t\twidth: number,\n\t\theight: number,\n\t): ICanvasDimensions | undefined {\n\t\t// The font needs to have been initialized\n\t\tconst font = this.xterm\n\t\t\t? this.xterm.getFont()\n\t\t\t: this._terminalConfigurationService.getFont(\n\t\t\t\t\tdom.getWindow(this.domElement),\n\t\t\t\t);\n\t\tif (!font || !font.charWidth || !font.charHeight) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.xterm?.raw.element) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst computedStyle = dom\n\t\t\t.getWindow(this.xterm.raw.element)\n\t\t\t.getComputedStyle(this.xterm.raw.element);\n\t\tconst horizontalPadding =\n\t\t\tNumber.parseInt(computedStyle.paddingLeft) +\n\t\t\tNumber.parseInt(computedStyle.paddingRight) +\n\t\t\t14 /*scroll bar padding*/;\n\t\tconst verticalPadding =\n\t\t\tNumber.parseInt(computedStyle.paddingTop) +\n\t\t\tNumber.parseInt(computedStyle.paddingBottom);\n\t\tTerminalInstance._lastKnownCanvasDimensions = new dom.Dimension(\n\t\t\tMath.min(Constants.MaxCanvasWidth, width - horizontalPadding),\n\t\t\theight -\n\t\t\t\tverticalPadding +\n\t\t\t\t(this._hasScrollBar && this._horizontalScrollbar\n\t\t\t\t\t? -5 /* scroll bar height */\n\t\t\t\t\t: 0),\n\t\t);\n\t\treturn TerminalInstance._lastKnownCanvasDimensions;\n\t}\n\n\tget persistentProcessId(): number | undefined {\n\t\treturn this._processManager.persistentProcessId;\n\t}\n\tget shouldPersist(): boolean {\n\t\treturn (\n\t\t\tthis._processManager.shouldPersist &&\n\t\t\t!this.shellLaunchConfig.isTransient &&\n\t\t\t(!this.reconnectionProperties ||\n\t\t\t\tthis._configurationService.getValue(\"task.reconnection\") ===\n\t\t\t\t\ttrue)\n\t\t);\n\t}\n\n\tpublic static getXtermConstructor(\n\t\tkeybindingService: IKeybindingService,\n\t\tcontextKeyService: IContextKeyService,\n\t) {\n\t\tconst keybinding = keybindingService.lookupKeybinding(\n\t\t\tTerminalAccessibilityCommandId.FocusAccessibleBuffer,\n\t\t\tcontextKeyService,\n\t\t);\n\t\tif (xtermConstructor) {\n\t\t\treturn xtermConstructor;\n\t\t}\n\t\txtermConstructor = Promises.withAsyncBody<typeof XTermTerminal>(\n\t\t\tasync (resolve) => {\n\t\t\t\tconst Terminal = (\n\t\t\t\t\tawait importAMDNodeModule<typeof import(\"@xterm/xterm\")>(\n\t\t\t\t\t\t\"@xterm/xterm\",\n\t\t\t\t\t\t\"lib/xterm.js\",\n\t\t\t\t\t)\n\t\t\t\t).Terminal;\n\t\t\t\t// Localize strings\n\t\t\t\tTerminal.strings.promptLabel = nls.localize(\n\t\t\t\t\t\"terminal.integrated.a11yPromptLabel\",\n\t\t\t\t\t\"Terminal input\",\n\t\t\t\t);\n\t\t\t\tTerminal.strings.tooMuchOutput = keybinding\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"terminal.integrated.useAccessibleBuffer\",\n\t\t\t\t\t\t\t\"Use the accessible buffer {0} to manually review output\",\n\t\t\t\t\t\t\tkeybinding.getLabel(),\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\"terminal.integrated.useAccessibleBufferNoKb\",\n\t\t\t\t\t\t\t\"Use the Terminal: Focus Accessible Buffer command to manually review output\",\n\t\t\t\t\t\t);\n\t\t\t\tresolve(Terminal);\n\t\t\t},\n\t\t);\n\t\treturn xtermConstructor;\n\t}\n\n\t/**\n\t * Create xterm.js instance and attach data listeners.\n\t */\n\tprotected async _createXterm(): Promise<XtermTerminal> {\n\t\tconst Terminal = await TerminalInstance.getXtermConstructor(\n\t\t\tthis._keybindingService,\n\t\t\tthis._contextKeyService,\n\t\t);\n\t\tif (this.isDisposed) {\n\t\t\tthrow new ErrorNoTelemetry(\n\t\t\t\t\"Terminal disposed of during xterm.js creation\",\n\t\t\t);\n\t\t}\n\n\t\tconst disableShellIntegrationReporting =\n\t\t\tthis.shellLaunchConfig.executable === undefined ||\n\t\t\tthis.shellType === undefined ||\n\t\t\t!shellIntegrationSupportedShellTypes.includes(this.shellType);\n\t\tconst xterm = this._scopedInstantiationService.createInstance(\n\t\t\tXtermTerminal,\n\t\t\tTerminal,\n\t\t\tthis._cols,\n\t\t\tthis._rows,\n\t\t\tthis._scopedInstantiationService.createInstance(\n\t\t\t\tTerminalInstanceColorProvider,\n\t\t\t\tthis,\n\t\t\t),\n\t\t\tthis.capabilities,\n\t\t\tthis._processManager.shellIntegrationNonce,\n\t\t\tdisableShellIntegrationReporting,\n\t\t);\n\t\tthis.xterm = xterm;\n\t\tthis._resizeDebouncer = this._register(\n\t\t\tnew TerminalResizeDebouncer(\n\t\t\t\t() => this._isVisible,\n\t\t\t\t() => xterm,\n\t\t\t\tasync (cols, rows) => {\n\t\t\t\t\txterm.raw.resize(cols, rows);\n\t\t\t\t\tawait this._updatePtyDimensions(xterm.raw);\n\t\t\t\t},\n\t\t\t\tasync (cols) => {\n\t\t\t\t\txterm.raw.resize(cols, xterm.raw.rows);\n\t\t\t\t\tawait this._updatePtyDimensions(xterm.raw);\n\t\t\t\t},\n\t\t\t\tasync (rows) => {\n\t\t\t\t\txterm.raw.resize(xterm.raw.cols, rows);\n\t\t\t\t\tawait this._updatePtyDimensions(xterm.raw);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis.updateAccessibilitySupport();\n\t\tthis._register(\n\t\t\tthis.xterm.onDidRequestRunCommand((e) => {\n\t\t\t\tif (e.copyAsHtml) {\n\t\t\t\t\tthis.copySelection(true, e.command);\n\t\t\t\t} else {\n\t\t\t\t\tthis.sendText(\n\t\t\t\t\t\te.command.command,\n\t\t\t\t\t\te.noNewLine ? false : true,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(this.xterm.onDidRequestFocus(() => this.focus()));\n\t\tthis._register(\n\t\t\tthis.xterm.onDidRequestSendText((e) => this.sendText(e, false)),\n\t\t);\n\t\t// Write initial text, deferring onLineFeed listener when applicable to avoid firing\n\t\t// onLineData events containing initialText\n\t\tconst initialTextWrittenPromise = this._shellLaunchConfig.initialText\n\t\t\t? new Promise<void>((r) => this._writeInitialText(xterm, r))\n\t\t\t: undefined;\n\t\tconst lineDataEventAddon = this._register(\n\t\t\tnew LineDataEventAddon(initialTextWrittenPromise),\n\t\t);\n\t\tthis._register(\n\t\t\tlineDataEventAddon.onLineData((e) => this._onLineData.fire(e)),\n\t\t);\n\t\tthis._lineDataEventAddon = lineDataEventAddon;\n\t\t// Delay the creation of the bell listener to avoid showing the bell when the terminal\n\t\t// starts up or reconnects\n\t\tdisposableTimeout(\n\t\t\t() => {\n\t\t\t\tthis._register(\n\t\t\t\t\txterm.raw.onBell(() => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\t\t\tTerminalSettingId.EnableBell,\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\t\t\tTerminalSettingId.EnableVisualBell,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.statusList.add(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: TerminalStatus.Bell,\n\t\t\t\t\t\t\t\t\tseverity: Severity.Warning,\n\t\t\t\t\t\t\t\t\ticon: Codicon.bell,\n\t\t\t\t\t\t\t\t\ttooltip: nls.localize(\"bellStatus\", \"Bell\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t\t\t\t\t\t.bellDuration,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._accessibilitySignalService.playSignal(\n\t\t\t\t\t\t\tAccessibilitySignal.terminalBell,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t},\n\t\t\t1000,\n\t\t\tthis._store,\n\t\t);\n\t\tthis._register(\n\t\t\txterm.raw.onSelectionChange(async () => this._onSelectionChange()),\n\t\t);\n\t\tthis._register(\n\t\t\txterm.raw.buffer.onBufferChange(() =>\n\t\t\t\tthis._refreshAltBufferContextKey(),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._processManager.onProcessData((e) => this._onProcessData(e)),\n\t\t);\n\t\tthis._register(\n\t\t\txterm.raw.onData(async (data) => {\n\t\t\t\tawait this._pauseInputEventBarrier?.wait();\n\t\t\t\tawait this._processManager.write(data);\n\t\t\t\tthis._onDidInputData.fire(data);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\txterm.raw.onBinary((data) =>\n\t\t\t\tthis._processManager.processBinary(data),\n\t\t\t),\n\t\t);\n\t\t// Init winpty compat and link handler after process creation as they rely on the\n\t\t// underlying process OS\n\t\tthis._register(\n\t\t\tthis._processManager.onProcessReady(async (processTraits) => {\n\t\t\t\tif (this._processManager.os) {\n\t\t\t\t\tlineDataEventAddon.setOperatingSystem(\n\t\t\t\t\t\tthis._processManager.os,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\txterm.raw.options.windowsPty = processTraits.windowsPty;\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._processManager.onRestoreCommands((e) =>\n\t\t\t\tthis.xterm?.shellIntegration.deserialize(e),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._viewDescriptorService.onDidChangeLocation(({ views }) => {\n\t\t\t\tif (views.some((v) => v.id === TERMINAL_VIEW_ID)) {\n\t\t\t\t\txterm.refresh();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Set up updating of the process cwd on key press, this is only needed when the cwd\n\t\t// detection capability has not been registered\n\t\tif (!this.capabilities.has(TerminalCapability.CwdDetection)) {\n\t\t\tlet onKeyListener: IDisposable | undefined = xterm.raw.onKey(\n\t\t\t\t(e) => {\n\t\t\t\t\tconst event = new StandardKeyboardEvent(e.domEvent);\n\t\t\t\t\tif (event.equals(KeyCode.Enter)) {\n\t\t\t\t\t\tthis._updateProcessCwd();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis.capabilities.onDidAddCapabilityType((e) => {\n\t\t\t\t\tif (e === TerminalCapability.CwdDetection) {\n\t\t\t\t\t\tonKeyListener?.dispose();\n\t\t\t\t\t\tonKeyListener = undefined;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis._pathService.userHome().then((userHome) => {\n\t\t\tthis._userHome = userHome.fsPath;\n\t\t});\n\n\t\tif (this._isVisible) {\n\t\t\tthis._open();\n\t\t}\n\n\t\treturn xterm;\n\t}\n\n\tprivate async _onLineDataSetup(): Promise<void> {\n\t\tconst xterm = this.xterm || (await this._xtermReadyPromise);\n\t\txterm.raw.loadAddon(this._lineDataEventAddon!);\n\t}\n\n\tasync runCommand(\n\t\tcommandLine: string,\n\t\tshouldExecute: boolean,\n\t): Promise<void> {\n\t\tlet commandDetection = this.capabilities.get(\n\t\t\tTerminalCapability.CommandDetection,\n\t\t);\n\n\t\t// Await command detection if the terminal is starting up\n\t\tif (\n\t\t\t!commandDetection &&\n\t\t\t(this._processManager.processState === ProcessState.Uninitialized ||\n\t\t\t\tthis._processManager.processState === ProcessState.Launching)\n\t\t) {\n\t\t\tconst store = new DisposableStore();\n\t\t\tawait Promise.race([\n\t\t\t\tnew Promise<void>((r) => {\n\t\t\t\t\tstore.add(\n\t\t\t\t\t\tthis.capabilities.onDidAddCapabilityType((e) => {\n\t\t\t\t\t\t\tif (e === TerminalCapability.CommandDetection) {\n\t\t\t\t\t\t\t\tcommandDetection = this.capabilities.get(\n\t\t\t\t\t\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tr();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\ttimeout(2000),\n\t\t\t]);\n\t\t\tstore.dispose();\n\t\t}\n\n\t\t// Determine whether to send ETX (ctrl+c) before running the command. This should always\n\t\t// happen unless command detection can reliably say that a command is being entered and\n\t\t// there is no content in the prompt\n\t\tif (\n\t\t\t!commandDetection ||\n\t\t\tcommandDetection.promptInputModel.value.length > 0\n\t\t) {\n\t\t\tawait this.sendText(\"\\x03\", false);\n\t\t\t// Wait a little before running the command to avoid the sequences being echoed while the ^C\n\t\t\t// is being evaluated\n\t\t\tawait timeout(100);\n\t\t}\n\t\t// Use bracketed paste mode only when not running the command\n\t\tawait this.sendText(commandLine, shouldExecute, !shouldExecute);\n\t}\n\n\tasync runRecent(\n\t\ttype: \"command\" | \"cwd\",\n\t\tfilterMode?: \"fuzzy\" | \"contiguous\",\n\t\tvalue?: string,\n\t): Promise<void> {\n\t\treturn this._scopedInstantiationService.invokeFunction(\n\t\t\tshowRunRecentQuickPick,\n\t\t\tthis,\n\t\t\tthis._terminalInRunCommandPicker,\n\t\t\ttype,\n\t\t\tfilterMode,\n\t\t\tvalue,\n\t\t);\n\t}\n\n\tdetachFromElement(): void {\n\t\tthis._wrapperElement.remove();\n\t\tthis._container = undefined;\n\t}\n\n\tattachToElement(container: HTMLElement): void {\n\t\t// The container did not change, do nothing\n\t\tif (this._container === container) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._attachBarrier.isOpen()) {\n\t\t\tthis._attachBarrier.open();\n\t\t}\n\n\t\t// The container changed, reattach\n\t\tthis._container = container;\n\t\tthis._container.appendChild(this._wrapperElement);\n\n\t\t// If xterm is already attached, call open again to pick up any changes to the window.\n\t\tif (this.xterm?.raw.element) {\n\t\t\tthis.xterm.raw.open(this.xterm.raw.element);\n\t\t}\n\n\t\tthis.xterm?.refresh();\n\n\t\tsetTimeout(() => this._initDragAndDrop(container));\n\t}\n\n\t/**\n\t * Opens the the terminal instance inside the parent DOM element previously set with\n\t * `attachToElement`, you must ensure the parent DOM element is explicitly visible before\n\t * invoking this function as it performs some DOM calculations internally\n\t */\n\tprivate _open(): void {\n\t\tif (!this.xterm || this.xterm.raw.element) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._container || !this._container.isConnected) {\n\t\t\tthrow new Error(\n\t\t\t\t\"A container element needs to be set with `attachToElement` and be part of the DOM before calling `_open`\",\n\t\t\t);\n\t\t}\n\n\t\tconst xtermElement = document.createElement(\"div\");\n\t\tthis._wrapperElement.appendChild(xtermElement);\n\n\t\tthis._container.appendChild(this._wrapperElement);\n\n\t\tconst xterm = this.xterm;\n\n\t\t// Attach the xterm object to the DOM, exposing it to the smoke tests\n\t\tthis._wrapperElement.xterm = xterm.raw;\n\n\t\tconst screenElement = xterm.attachToElement(xtermElement);\n\n\t\t// Fire xtermOpen on all contributions\n\t\tfor (const contribution of this._contributions.values()) {\n\t\t\tif (this.xterm) {\n\t\t\t\tcontribution.xtermOpen?.(this.xterm);\n\t\t\t} else {\n\t\t\t\tthis._xtermReadyPromise.then((xterm) =>\n\t\t\t\t\tcontribution.xtermOpen?.(xterm),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._register(\n\t\t\txterm.shellIntegration.onDidChangeStatus(() => {\n\t\t\t\tif (this.hasFocus) {\n\t\t\t\t\tthis._setShellIntegrationContextKey();\n\t\t\t\t} else {\n\t\t\t\t\tthis._terminalShellIntegrationEnabledContextKey.reset();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (!xterm.raw.element || !xterm.raw.textarea) {\n\t\t\tthrow new Error(\"xterm elements not set after open\");\n\t\t}\n\n\t\tthis._setAriaLabel(xterm.raw, this._instanceId, this._title);\n\n\t\txterm.raw.attachCustomKeyEventHandler(\n\t\t\t(event: KeyboardEvent): boolean => {\n\t\t\t\t// Disable all input if the terminal is exiting\n\t\t\t\tif (this._isExiting) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(event);\n\t\t\t\tconst resolveResult = this._keybindingService.softDispatch(\n\t\t\t\t\tstandardKeyboardEvent,\n\t\t\t\t\tstandardKeyboardEvent.target,\n\t\t\t\t);\n\n\t\t\t\t// Respect chords if the allowChords setting is set and it's not Escape. Escape is\n\t\t\t\t// handled specially for Zen Mode's Escape, Escape chord, plus it's important in\n\t\t\t\t// terminals generally\n\t\t\t\tconst isValidChord =\n\t\t\t\t\tresolveResult.kind === ResultKind.MoreChordsNeeded &&\n\t\t\t\t\tthis._terminalConfigurationService.config.allowChords &&\n\t\t\t\t\tevent.key !== \"Escape\";\n\t\t\t\tif (this._keybindingService.inChordMode || isValidChord) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst SHOW_TERMINAL_CONFIG_PROMPT_KEY =\n\t\t\t\t\t\"terminal.integrated.showTerminalConfigPrompt\";\n\t\t\t\tconst EXCLUDED_KEYS = [\n\t\t\t\t\t\"RightArrow\",\n\t\t\t\t\t\"LeftArrow\",\n\t\t\t\t\t\"UpArrow\",\n\t\t\t\t\t\"DownArrow\",\n\t\t\t\t\t\"Space\",\n\t\t\t\t\t\"Meta\",\n\t\t\t\t\t\"Control\",\n\t\t\t\t\t\"Shift\",\n\t\t\t\t\t\"Alt\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"Delete\",\n\t\t\t\t\t\"Backspace\",\n\t\t\t\t\t\"Tab\",\n\t\t\t\t];\n\n\t\t\t\t// only keep track of input if prompt hasn't already been shown\n\t\t\t\tif (\n\t\t\t\t\tthis._storageService.getBoolean(\n\t\t\t\t\t\tSHOW_TERMINAL_CONFIG_PROMPT_KEY,\n\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t) &&\n\t\t\t\t\t!EXCLUDED_KEYS.includes(event.key) &&\n\t\t\t\t\t!event.ctrlKey &&\n\t\t\t\t\t!event.shiftKey &&\n\t\t\t\t\t!event.altKey\n\t\t\t\t) {\n\t\t\t\t\tthis._hasHadInput = true;\n\t\t\t\t}\n\n\t\t\t\t// for keyboard events that resolve to commands described\n\t\t\t\t// within commandsToSkipShell, either alert or skip processing by xterm.js\n\t\t\t\tif (\n\t\t\t\t\tresolveResult.kind === ResultKind.KbFound &&\n\t\t\t\t\tresolveResult.commandId &&\n\t\t\t\t\tthis._skipTerminalCommands.some(\n\t\t\t\t\t\t(k) => k === resolveResult.commandId,\n\t\t\t\t\t) &&\n\t\t\t\t\t!this._terminalConfigurationService.config\n\t\t\t\t\t\t.sendKeybindingsToShell\n\t\t\t\t) {\n\t\t\t\t\t// don't alert when terminal is opened or closed\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._storageService.getBoolean(\n\t\t\t\t\t\t\tSHOW_TERMINAL_CONFIG_PROMPT_KEY,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t) &&\n\t\t\t\t\t\tthis._hasHadInput &&\n\t\t\t\t\t\t!TERMINAL_CREATION_COMMANDS.includes(\n\t\t\t\t\t\t\tresolveResult.commandId,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"keybindingHandling\",\n\t\t\t\t\t\t\t\t\"Some keybindings don't go to the terminal by default and are handled by {0} instead.\",\n\t\t\t\t\t\t\t\tthis._productService.nameLong,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"configureTerminalSettings\",\n\t\t\t\t\t\t\t\t\t\t\"Configure Terminal Settings\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\t\tthis._preferencesService.openSettings({\n\t\t\t\t\t\t\t\t\t\t\tjsonEditor: false,\n\t\t\t\t\t\t\t\t\t\t\tquery: `@id:${TerminalSettingId.CommandsToSkipShell},${TerminalSettingId.SendKeybindingsToShell},${TerminalSettingId.AllowChords}`,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t} satisfies IPromptChoice,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._storageService.store(\n\t\t\t\t\t\t\tSHOW_TERMINAL_CONFIG_PROMPT_KEY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Skip processing by xterm.js of keyboard events that match menu bar mnemonics\n\t\t\t\tif (\n\t\t\t\t\tthis._terminalConfigurationService.config.allowMnemonics &&\n\t\t\t\t\t!isMacintosh &&\n\t\t\t\t\tevent.altKey\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If tab focus mode is on, tab is not passed to the terminal\n\t\t\t\tif (TabFocus.getTabFocusMode() && event.key === \"Tab\") {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Prevent default when shift+tab is being sent to the terminal to avoid it bubbling up\n\t\t\t\t// and changing focus https://github.com/microsoft/vscode/issues/188329\n\t\t\t\tif (event.key === \"Tab\" && event.shiftKey) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Always have alt+F4 skip the terminal on Windows and allow it to be handled by the\n\t\t\t\t// system\n\t\t\t\tif (\n\t\t\t\t\tisWindows &&\n\t\t\t\t\tevent.altKey &&\n\t\t\t\t\tevent.key === \"F4\" &&\n\t\t\t\t\t!event.ctrlKey\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Fallback to force ctrl+v to paste on browsers that do not support\n\t\t\t\t// navigator.clipboard.readText\n\t\t\t\tif (\n\t\t\t\t\t!BrowserFeatures.clipboard.readText &&\n\t\t\t\t\tevent.key === \"v\" &&\n\t\t\t\t\tevent.ctrlKey\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t);\n\t\tthis._register(\n\t\t\tdom.addDisposableListener(xterm.raw.element, \"mousedown\", () => {\n\t\t\t\t// We need to listen to the mouseup event on the document since the user may release\n\t\t\t\t// the mouse button anywhere outside of _xterm.element.\n\t\t\t\tconst listener = dom.addDisposableListener(\n\t\t\t\t\txterm.raw.element!.ownerDocument,\n\t\t\t\t\t\"mouseup\",\n\t\t\t\t\t() => {\n\t\t\t\t\t\t// Delay with a setTimeout to allow the mouseup to propagate through the DOM\n\t\t\t\t\t\t// before evaluating the new selection state.\n\t\t\t\t\t\tsetTimeout(() => this._refreshSelectionContextKey(), 0);\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tdom.addDisposableListener(xterm.raw.element, \"touchstart\", () => {\n\t\t\t\txterm.raw.focus();\n\t\t\t}),\n\t\t);\n\n\t\t// xterm.js currently drops selection on keyup as we need to handle this case.\n\t\tthis._register(\n\t\t\tdom.addDisposableListener(xterm.raw.element, \"keyup\", () => {\n\t\t\t\t// Wait until keyup has propagated through the DOM before evaluating\n\t\t\t\t// the new selection state.\n\t\t\t\tsetTimeout(() => this._refreshSelectionContextKey(), 0);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tdom.addDisposableListener(xterm.raw.textarea, \"focus\", () =>\n\t\t\t\tthis._setFocus(true),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tdom.addDisposableListener(xterm.raw.textarea, \"blur\", () =>\n\t\t\t\tthis._setFocus(false),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tdom.addDisposableListener(xterm.raw.textarea, \"focusout\", () =>\n\t\t\t\tthis._setFocus(false),\n\t\t\t),\n\t\t);\n\n\t\tthis._initDragAndDrop(this._container);\n\n\t\tthis._widgetManager.attachToElement(screenElement);\n\n\t\tif (this._lastLayoutDimensions) {\n\t\t\tthis.layout(this._lastLayoutDimensions);\n\t\t}\n\t\tthis.updateConfig();\n\n\t\t// If IShellLaunchConfig.waitOnExit was true and the process finished before the terminal\n\t\t// panel was initialized.\n\t\tif (xterm.raw.options.disableStdin) {\n\t\t\tthis._attachPressAnyKeyToCloseListener(xterm.raw);\n\t\t}\n\t}\n\n\tprivate _setFocus(focused?: boolean): void {\n\t\tif (focused) {\n\t\t\tthis._terminalFocusContextKey.set(true);\n\t\t\tthis._setShellIntegrationContextKey();\n\t\t\tthis._onDidFocus.fire(this);\n\t\t} else {\n\t\t\tthis.resetFocusContextKey();\n\t\t\tthis._onDidBlur.fire(this);\n\t\t\tthis._refreshSelectionContextKey();\n\t\t}\n\t}\n\n\tprivate _setShellIntegrationContextKey(): void {\n\t\tif (this.xterm) {\n\t\t\tthis._terminalShellIntegrationEnabledContextKey.set(\n\t\t\t\tthis.xterm.shellIntegration.status ===\n\t\t\t\t\tShellIntegrationStatus.VSCode,\n\t\t\t);\n\t\t}\n\t}\n\n\tresetFocusContextKey(): void {\n\t\tthis._terminalFocusContextKey.reset();\n\t\tthis._terminalShellIntegrationEnabledContextKey.reset();\n\t}\n\n\tprivate _initDragAndDrop(container: HTMLElement) {\n\t\tconst store = new DisposableStore();\n\t\tconst dndController = store.add(\n\t\t\tthis._scopedInstantiationService.createInstance(\n\t\t\t\tTerminalInstanceDragAndDropController,\n\t\t\t\tcontainer,\n\t\t\t),\n\t\t);\n\t\tstore.add(\n\t\t\tdndController.onDropTerminal((e) =>\n\t\t\t\tthis._onRequestAddInstanceToGroup.fire(e),\n\t\t\t),\n\t\t);\n\t\tstore.add(\n\t\t\tdndController.onDropFile(async (path) => {\n\t\t\t\tthis.focus();\n\t\t\t\tawait this.sendPath(path, false);\n\t\t\t}),\n\t\t);\n\t\tstore.add(new dom.DragAndDropObserver(container, dndController));\n\t\tthis._dndObserver.value = store;\n\t}\n\n\thasSelection(): boolean {\n\t\treturn this.xterm ? this.xterm.raw.hasSelection() : false;\n\t}\n\n\tasync copySelection(\n\t\tasHtml?: boolean,\n\t\tcommand?: ITerminalCommand,\n\t): Promise<void> {\n\t\tconst xterm = await this._xtermReadyPromise;\n\t\tawait xterm.copySelection(asHtml, command);\n\t}\n\n\tget selection(): string | undefined {\n\t\treturn this.xterm && this.hasSelection()\n\t\t\t? this.xterm.raw.getSelection()\n\t\t\t: undefined;\n\t}\n\n\tclearSelection(): void {\n\t\tthis.xterm?.raw.clearSelection();\n\t}\n\n\tprivate _refreshAltBufferContextKey() {\n\t\tthis._terminalAltBufferActiveContextKey.set(\n\t\t\t!!(\n\t\t\t\tthis.xterm &&\n\t\t\t\tthis.xterm.raw.buffer.active === this.xterm.raw.buffer.alternate\n\t\t\t),\n\t\t);\n\t}\n\n\toverride dispose(reason?: TerminalExitReason): void {\n\t\tif (\n\t\t\tthis.shellLaunchConfig.type === \"Task\" &&\n\t\t\treason === TerminalExitReason.Process &&\n\t\t\tthis._exitCode !== 0 &&\n\t\t\t!this.shellLaunchConfig.waitOnExit\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._logService.trace(\n\t\t\t`terminalInstance#dispose (instanceId: ${this.instanceId})`,\n\t\t);\n\t\tdispose(this._widgetManager);\n\n\t\tif (this.xterm?.raw.element) {\n\t\t\tthis._hadFocusOnExit = this.hasFocus;\n\t\t}\n\t\tif (this._wrapperElement.xterm) {\n\t\t\tthis._wrapperElement.xterm = undefined;\n\t\t}\n\t\tif (this._horizontalScrollbar) {\n\t\t\tthis._horizontalScrollbar.dispose();\n\t\t\tthis._horizontalScrollbar = undefined;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.xterm?.dispose();\n\t\t} catch (err: unknown) {\n\t\t\t// See https://github.com/microsoft/vscode/issues/153486\n\t\t\tthis._logService.error(\n\t\t\t\t\"Exception occurred during xterm disposal\",\n\t\t\t\terr,\n\t\t\t);\n\t\t}\n\n\t\t// HACK: Workaround for Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=559561,\n\t\t// as 'blur' event in xterm.raw.textarea is not triggered on xterm.dispose()\n\t\t// See https://github.com/microsoft/vscode/issues/138358\n\t\tif (isFirefox) {\n\t\t\tthis.resetFocusContextKey();\n\t\t\tthis._terminalHasTextContextKey.reset();\n\t\t\tthis._onDidBlur.fire(this);\n\t\t}\n\n\t\tif (this._pressAnyKeyToCloseListener) {\n\t\t\tthis._pressAnyKeyToCloseListener.dispose();\n\t\t\tthis._pressAnyKeyToCloseListener = undefined;\n\t\t}\n\n\t\tif (this._exitReason === undefined) {\n\t\t\tthis._exitReason = reason ?? TerminalExitReason.Unknown;\n\t\t}\n\n\t\tthis._processManager.dispose();\n\t\t// Process manager dispose/shutdown doesn't fire process exit, trigger with undefined if it\n\t\t// hasn't happened yet\n\t\tthis._onProcessExit(undefined);\n\n\t\tthis._onDisposed.fire(this);\n\n\t\tsuper.dispose();\n\t}\n\n\tasync detachProcessAndDispose(reason: TerminalExitReason): Promise<void> {\n\t\t// Detach the process and dispose the instance, without the instance dispose the terminal\n\t\t// won't go away. Force persist if the detach was requested by the user (not shutdown).\n\t\tawait this._processManager.detachFromProcess(\n\t\t\treason === TerminalExitReason.User,\n\t\t);\n\t\tthis.dispose(reason);\n\t}\n\n\tfocus(force?: boolean): void {\n\t\tthis._refreshAltBufferContextKey();\n\t\tif (!this.xterm) {\n\t\t\treturn;\n\t\t}\n\t\tif (force || !dom.getActiveWindow().getSelection()?.toString()) {\n\t\t\tthis.xterm.raw.focus();\n\t\t\tthis._onDidRequestFocus.fire();\n\t\t}\n\t}\n\n\tasync focusWhenReady(force?: boolean): Promise<void> {\n\t\tawait this._xtermReadyPromise;\n\t\tawait this._attachBarrier.wait();\n\t\tthis.focus(force);\n\t}\n\n\tasync paste(): Promise<void> {\n\t\tawait this._paste(await this._clipboardService.readText());\n\t}\n\n\tasync pasteSelection(): Promise<void> {\n\t\tawait this._paste(await this._clipboardService.readText(\"selection\"));\n\t}\n\n\tprivate async _paste(value: string): Promise<void> {\n\t\tif (!this.xterm) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet currentText = value;\n\t\tconst shouldPasteText =\n\t\t\tawait this._scopedInstantiationService.invokeFunction(\n\t\t\t\tshouldPasteTerminalText,\n\t\t\t\tcurrentText,\n\t\t\t\tthis.xterm?.raw.modes.bracketedPasteMode,\n\t\t\t);\n\t\tif (!shouldPasteText) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof shouldPasteText === \"object\") {\n\t\t\tcurrentText = shouldPasteText.modifiedText;\n\t\t}\n\n\t\tthis.focus();\n\n\t\tthis._onWillPaste.fire(currentText);\n\t\tthis.xterm.raw.paste(currentText);\n\t\tthis._onDidPaste.fire(currentText);\n\t}\n\n\tasync sendText(\n\t\ttext: string,\n\t\tshouldExecute: boolean,\n\t\tbracketedPasteMode?: boolean,\n\t): Promise<void> {\n\t\t// Apply bracketed paste sequences if the terminal has the mode enabled, this will prevent\n\t\t// the text from triggering keybindings and ensure new lines are handled properly\n\t\tif (bracketedPasteMode && this.xterm?.raw.modes.bracketedPasteMode) {\n\t\t\ttext = `\\x1b[200~${text}\\x1b[201~`;\n\t\t}\n\n\t\t// Normalize line endings to 'enter' press.\n\t\ttext = text.replace(/\\r?\\n/g, \"\\r\");\n\t\tif (shouldExecute && !text.endsWith(\"\\r\")) {\n\t\t\ttext += \"\\r\";\n\t\t}\n\n\t\t// Send it to the process\n\t\tthis._logService.debug(\"sending data (vscode)\", text);\n\t\tawait this._processManager.write(text);\n\t\tthis._onDidInputData.fire(text);\n\t\tthis._onDidSendText.fire(text);\n\t\tthis.xterm?.scrollToBottom();\n\t\tif (shouldExecute) {\n\t\t\tthis._onDidExecuteText.fire();\n\t\t}\n\t}\n\n\tasync sendPath(\n\t\toriginalPath: string | URI,\n\t\tshouldExecute: boolean,\n\t): Promise<void> {\n\t\treturn this.sendText(\n\t\t\tawait this.preparePathForShell(originalPath),\n\t\t\tshouldExecute,\n\t\t);\n\t}\n\n\tasync preparePathForShell(originalPath: string | URI): Promise<string> {\n\t\t// Wait for shell type to be ready\n\t\tawait this.processReady;\n\t\treturn preparePathForShell(\n\t\t\toriginalPath,\n\t\t\tthis.shellLaunchConfig.executable,\n\t\t\tthis.title,\n\t\t\tthis.shellType,\n\t\t\tthis._processManager.backend,\n\t\t\tthis._processManager.os,\n\t\t);\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tconst didChange = this._isVisible !== visible;\n\t\tthis._isVisible = visible;\n\t\tthis._wrapperElement.classList.toggle(\"active\", visible);\n\t\tif (visible && this.xterm) {\n\t\t\tthis._open();\n\t\t\t// Flush any pending resizes\n\t\t\tthis._resizeDebouncer?.flush();\n\t\t\t// Resize to re-evaluate dimensions, this will ensure when switching to a terminal it is\n\t\t\t// using the most up to date dimensions (eg. when terminal is created in the background\n\t\t\t// using cached dimensions of a split terminal).\n\t\t\tthis._resize();\n\t\t}\n\t\tif (didChange) {\n\t\t\tthis._onDidChangeVisibility.fire(visible);\n\t\t}\n\t}\n\n\tscrollDownLine(): void {\n\t\tthis.xterm?.scrollDownLine();\n\t}\n\n\tscrollDownPage(): void {\n\t\tthis.xterm?.scrollDownPage();\n\t}\n\n\tscrollToBottom(): void {\n\t\tthis.xterm?.scrollToBottom();\n\t}\n\n\tscrollUpLine(): void {\n\t\tthis.xterm?.scrollUpLine();\n\t}\n\n\tscrollUpPage(): void {\n\t\tthis.xterm?.scrollUpPage();\n\t}\n\n\tscrollToTop(): void {\n\t\tthis.xterm?.scrollToTop();\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._processManager.clearBuffer();\n\t\tthis.xterm?.clearBuffer();\n\t}\n\n\tprivate _refreshSelectionContextKey() {\n\t\tconst isActive =\n\t\t\t!!this._viewsService.getActiveViewWithId(TERMINAL_VIEW_ID);\n\t\tlet isEditorActive = false;\n\t\tconst editor = this._editorService.activeEditor;\n\t\tif (editor) {\n\t\t\tisEditorActive = editor instanceof TerminalEditorInput;\n\t\t}\n\t\tthis._terminalHasTextContextKey.set(\n\t\t\t(isActive || isEditorActive) && this.hasSelection(),\n\t\t);\n\t}\n\n\tprotected _createProcessManager(): TerminalProcessManager {\n\t\tlet deserializedCollections:\n\t\t\t| ReadonlyMap<string, IEnvironmentVariableCollection>\n\t\t\t| undefined;\n\t\tif (\n\t\t\tthis.shellLaunchConfig.attachPersistentProcess\n\t\t\t\t?.environmentVariableCollections\n\t\t) {\n\t\t\tdeserializedCollections = deserializeEnvironmentVariableCollections(\n\t\t\t\tthis.shellLaunchConfig.attachPersistentProcess\n\t\t\t\t\t.environmentVariableCollections,\n\t\t\t);\n\t\t}\n\t\tconst processManager = this._scopedInstantiationService.createInstance(\n\t\t\tTerminalProcessManager,\n\t\t\tthis._instanceId,\n\t\t\tthis.shellLaunchConfig?.cwd,\n\t\t\tdeserializedCollections,\n\t\t\tthis.shellLaunchConfig.attachPersistentProcess\n\t\t\t\t?.shellIntegrationNonce,\n\t\t);\n\t\tthis.capabilities.add(processManager.capabilities);\n\t\tthis._register(\n\t\t\tprocessManager.onProcessReady(async (e) => {\n\t\t\t\tthis._onProcessIdReady.fire(this);\n\t\t\t\tthis._initialCwd = await this.getInitialCwd();\n\t\t\t\t// Set the initial name based on the _resolved_ shell launch config, this will also\n\t\t\t\t// ensure the resolved icon gets shown\n\t\t\t\tif (!this._labelComputer) {\n\t\t\t\t\tthis._labelComputer = this._register(\n\t\t\t\t\t\tthis._scopedInstantiationService.createInstance(\n\t\t\t\t\t\t\tTerminalLabelComputer,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tthis._labelComputer.onDidChangeLabel((e) => {\n\t\t\t\t\t\t\tconst wasChanged =\n\t\t\t\t\t\t\t\tthis._title !== e.title ||\n\t\t\t\t\t\t\t\tthis._description !== e.description;\n\t\t\t\t\t\t\tif (wasChanged) {\n\t\t\t\t\t\t\t\tthis._title = e.title;\n\t\t\t\t\t\t\t\tthis._description = e.description;\n\t\t\t\t\t\t\t\tthis._onTitleChanged.fire(this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (this._shellLaunchConfig.name) {\n\t\t\t\t\tthis._setTitle(\n\t\t\t\t\t\tthis._shellLaunchConfig.name,\n\t\t\t\t\t\tTitleEventSource.Api,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Listen to xterm.js' sequence title change event, trigger this async to ensure\n\t\t\t\t\t// _xtermReadyPromise is ready constructed since this is called from the ctor\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis._xtermReadyPromise.then((xterm) => {\n\t\t\t\t\t\t\tthis._messageTitleDisposable.value =\n\t\t\t\t\t\t\t\txterm.raw.onTitleChange((e) =>\n\t\t\t\t\t\t\t\t\tthis._onTitleChange(e),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tthis._setTitle(\n\t\t\t\t\t\tthis._shellLaunchConfig.executable,\n\t\t\t\t\t\tTitleEventSource.Process,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tprocessManager.onProcessExit((exitCode) =>\n\t\t\t\tthis._onProcessExit(exitCode),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tprocessManager.onDidChangeProperty(({ type, value }) => {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase ProcessPropertyType.Cwd:\n\t\t\t\t\t\tthis._cwd = value;\n\t\t\t\t\t\tthis._labelComputer?.refreshLabel(this);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.InitialCwd:\n\t\t\t\t\t\tthis._initialCwd = value;\n\t\t\t\t\t\tthis._cwd = this._initialCwd;\n\t\t\t\t\t\tthis._setTitle(this.title, TitleEventSource.Config);\n\t\t\t\t\t\tthis._icon =\n\t\t\t\t\t\t\tthis._shellLaunchConfig.attachPersistentProcess\n\t\t\t\t\t\t\t\t?.icon || this._shellLaunchConfig.icon;\n\t\t\t\t\t\tthis._onIconChanged.fire({\n\t\t\t\t\t\t\tinstance: this,\n\t\t\t\t\t\t\tuserInitiated: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.Title:\n\t\t\t\t\t\tthis._setTitle(value ?? \"\", TitleEventSource.Process);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.OverrideDimensions:\n\t\t\t\t\t\tthis.setOverrideDimensions(value, true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.ResolvedShellLaunchConfig:\n\t\t\t\t\t\tthis._setResolvedShellLaunchConfig(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.ShellType:\n\t\t\t\t\t\tthis.setShellType(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.HasChildProcesses:\n\t\t\t\t\t\tthis._onDidChangeHasChildProcesses.fire(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.UsedShellIntegrationInjection:\n\t\t\t\t\t\tthis._usedShellIntegrationInjection = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._initialDataEventsListener.value = processManager.onProcessData(\n\t\t\t(ev) => this._initialDataEvents?.push(ev.data),\n\t\t);\n\t\tthis._register(\n\t\t\tprocessManager.onProcessReplayComplete(() =>\n\t\t\t\tthis._onProcessReplayComplete.fire(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tprocessManager.onEnvironmentVariableInfoChanged((e) =>\n\t\t\t\tthis._onEnvironmentVariableInfoChanged(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tprocessManager.onPtyDisconnect(() => {\n\t\t\t\tif (this.xterm) {\n\t\t\t\t\tthis.xterm.raw.options.disableStdin = true;\n\t\t\t\t}\n\t\t\t\tthis.statusList.add({\n\t\t\t\t\tid: TerminalStatus.Disconnected,\n\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\ticon: Codicon.debugDisconnect,\n\t\t\t\t\ttooltip: nls.localize(\n\t\t\t\t\t\t\"disconnectStatus\",\n\t\t\t\t\t\t\"Lost connection to process\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tprocessManager.onPtyReconnect(() => {\n\t\t\t\tif (this.xterm) {\n\t\t\t\t\tthis.xterm.raw.options.disableStdin = false;\n\t\t\t\t}\n\t\t\t\tthis.statusList.remove(TerminalStatus.Disconnected);\n\t\t\t}),\n\t\t);\n\n\t\treturn processManager;\n\t}\n\n\tprivate async _createProcess(): Promise<void> {\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tconst activeWorkspaceRootUri =\n\t\t\tthis._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tif (activeWorkspaceRootUri) {\n\t\t\tconst trusted = await this._trust();\n\t\t\tif (!trusted) {\n\t\t\t\tthis._onProcessExit({\n\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\"workspaceNotTrustedCreateTerminal\",\n\t\t\t\t\t\t\"Cannot launch a terminal process in an untrusted workspace\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (\n\t\t\tthis._cwd &&\n\t\t\tthis._userHome &&\n\t\t\tthis._cwd !== this._userHome\n\t\t) {\n\t\t\t// something strange is going on if cwd is not userHome in an empty workspace\n\t\t\tthis._onProcessExit({\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"workspaceNotTrustedCreateTerminalCwd\",\n\t\t\t\t\t\"Cannot launch a terminal process in an untrusted workspace with cwd {0} and userHome {1}\",\n\t\t\t\t\tthis._cwd,\n\t\t\t\t\tthis._userHome,\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\t// Re-evaluate dimensions if the container has been set since the xterm instance was created\n\t\tif (this._container && this._cols === 0 && this._rows === 0) {\n\t\t\tthis._initDimensions();\n\t\t\tthis.xterm?.raw.resize(\n\t\t\t\tthis._cols || Constants.DefaultCols,\n\t\t\t\tthis._rows || Constants.DefaultRows,\n\t\t\t);\n\t\t}\n\t\tconst originalIcon = this.shellLaunchConfig.icon;\n\t\tawait this._processManager\n\t\t\t.createProcess(\n\t\t\t\tthis._shellLaunchConfig,\n\t\t\t\tthis._cols || Constants.DefaultCols,\n\t\t\t\tthis._rows || Constants.DefaultRows,\n\t\t\t)\n\t\t\t.then((result) => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (\"message\" in result) {\n\t\t\t\t\t\tthis._onProcessExit(result);\n\t\t\t\t\t} else if (\"injectedArgs\" in result) {\n\t\t\t\t\t\tthis._injectedArgs = result.injectedArgs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.xterm?.shellIntegration) {\n\t\t\tthis.capabilities.add(this.xterm.shellIntegration.capabilities);\n\t\t}\n\t\tif (\n\t\t\toriginalIcon !== this.shellLaunchConfig.icon ||\n\t\t\tthis.shellLaunchConfig.color\n\t\t) {\n\t\t\tthis._icon =\n\t\t\t\tthis._shellLaunchConfig.attachPersistentProcess?.icon ||\n\t\t\t\tthis._shellLaunchConfig.icon;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: false });\n\t\t}\n\t}\n\n\tpublic registerMarker(offset?: number): IMarker | undefined {\n\t\treturn this.xterm?.raw.registerMarker(offset);\n\t}\n\n\tpublic addBufferMarker(properties: IMarkProperties): void {\n\t\tthis.capabilities\n\t\t\t.get(TerminalCapability.BufferMarkDetection)\n\t\t\t?.addMark(properties);\n\t}\n\n\tpublic scrollToMark(\n\t\tstartMarkId: string,\n\t\tendMarkId?: string,\n\t\thighlight?: boolean,\n\t): void {\n\t\tthis.xterm?.markTracker.scrollToClosestMarker(\n\t\t\tstartMarkId,\n\t\t\tendMarkId,\n\t\t\thighlight,\n\t\t);\n\t}\n\n\tpublic async freePortKillProcess(\n\t\tport: string,\n\t\tcommand: string,\n\t): Promise<void> {\n\t\tawait this._processManager?.freePortKillProcess(port);\n\t\tthis.runCommand(command, false);\n\t}\n\n\tprivate _onProcessData(ev: IProcessDataEvent): void {\n\t\t// Ensure events are split by SI command execute sequence to ensure the output of the\n\t\t// command can be read by extensions. This must be done here as xterm.js does not currently\n\t\t// have a listener for when individual data events are parsed, only `onWriteParsed` which\n\t\t// fires when the write buffer is flushed.\n\t\tconst execIndex = ev.data.indexOf(\"\\x1b]633;C\\x07\");\n\t\tif (execIndex !== -1) {\n\t\t\tif (ev.trackCommit) {\n\t\t\t\tthis._writeProcessData(\n\t\t\t\t\tev.data.substring(0, execIndex + \"\\x1b]633;C\\x07\".length),\n\t\t\t\t);\n\t\t\t\tev.writePromise = new Promise<void>((r) =>\n\t\t\t\t\tthis._writeProcessData(\n\t\t\t\t\t\tev.data.substring(execIndex + \"\\x1b]633;C\\x07\".length),\n\t\t\t\t\t\tr,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._writeProcessData(\n\t\t\t\t\tev.data.substring(0, execIndex + \"\\x1b]633;C\\x07\".length),\n\t\t\t\t);\n\t\t\t\tthis._writeProcessData(\n\t\t\t\t\tev.data.substring(execIndex + \"\\x1b]633;C\\x07\".length),\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (ev.trackCommit) {\n\t\t\tev.writePromise = new Promise<void>((r) =>\n\t\t\t\tthis._writeProcessData(ev.data, r),\n\t\t\t);\n\t\t} else {\n\t\t\tthis._writeProcessData(ev.data);\n\t\t}\n\t}\n\n\tprivate _writeProcessData(data: string, cb?: () => void) {\n\t\tthis._onWillData.fire(data);\n\t\tconst messageId = ++this._latestXtermWriteData;\n\t\tthis.xterm?.raw.write(data, () => {\n\t\t\tthis._latestXtermParseData = messageId;\n\t\t\tthis._processManager.acknowledgeDataEvent(data.length);\n\t\t\tcb?.();\n\t\t\tthis._onData.fire(data);\n\t\t});\n\t}\n\n\t/**\n\t * Called when either a process tied to a terminal has exited or when a terminal renderer\n\t * simulates a process exiting (e.g. custom execution task).\n\t * @param exitCode The exit code of the process, this is undefined when the terminal was exited\n\t * through user action.\n\t */\n\tprivate async _onProcessExit(\n\t\texitCodeOrError?: number | ITerminalLaunchError,\n\t): Promise<void> {\n\t\t// Prevent dispose functions being triggered multiple times\n\t\tif (this._isExiting) {\n\t\t\treturn;\n\t\t}\n\t\tconst parsedExitResult = parseExitResult(\n\t\t\texitCodeOrError,\n\t\t\tthis.shellLaunchConfig,\n\t\t\tthis._processManager.processState,\n\t\t\tthis._initialCwd,\n\t\t);\n\n\t\tif (\n\t\t\tthis._usedShellIntegrationInjection &&\n\t\t\tthis._processManager.processState ===\n\t\t\t\tProcessState.KilledDuringLaunch &&\n\t\t\tparsedExitResult?.code !== 0\n\t\t) {\n\t\t\tthis._relaunchWithShellIntegrationDisabled(\n\t\t\t\tparsedExitResult?.message,\n\t\t\t);\n\t\t\tthis._onExit.fire(exitCodeOrError);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._isExiting = true;\n\n\t\tawait this._flushXtermData();\n\n\t\tthis._exitCode = parsedExitResult?.code;\n\t\tconst exitMessage = parsedExitResult?.message;\n\n\t\tthis._logService.debug(\n\t\t\t\"Terminal process exit\",\n\t\t\t\"instanceId\",\n\t\t\tthis.instanceId,\n\t\t\t\"code\",\n\t\t\tthis._exitCode,\n\t\t\t\"processState\",\n\t\t\tthis._processManager.processState,\n\t\t);\n\n\t\t// Only trigger wait on exit when the exit was *not* triggered by the\n\t\t// user (via the `workbench.action.terminal.kill` command).\n\t\tconst waitOnExit = this.waitOnExit;\n\t\tif (\n\t\t\twaitOnExit &&\n\t\t\tthis._processManager.processState !== ProcessState.KilledByUser\n\t\t) {\n\t\t\tthis._xtermReadyPromise.then((xterm) => {\n\t\t\t\tif (exitMessage) {\n\t\t\t\t\txterm.raw.write(formatMessageForTerminal(exitMessage));\n\t\t\t\t}\n\t\t\t\tswitch (typeof waitOnExit) {\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\txterm.raw.write(\n\t\t\t\t\t\t\tformatMessageForTerminal(waitOnExit, {\n\t\t\t\t\t\t\t\texcludeLeadingNewLine: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\tif (this.exitCode !== undefined) {\n\t\t\t\t\t\t\txterm.raw.write(\n\t\t\t\t\t\t\t\tformatMessageForTerminal(\n\t\t\t\t\t\t\t\t\twaitOnExit(this.exitCode),\n\t\t\t\t\t\t\t\t\t{ excludeLeadingNewLine: true },\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Disable all input if the terminal is exiting and listen for next keypress\n\t\t\t\txterm.raw.options.disableStdin = true;\n\t\t\t\tif (xterm.raw.textarea) {\n\t\t\t\t\tthis._attachPressAnyKeyToCloseListener(xterm.raw);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (exitMessage) {\n\t\t\t\tconst failedDuringLaunch =\n\t\t\t\t\tthis._processManager.processState ===\n\t\t\t\t\tProcessState.KilledDuringLaunch;\n\t\t\t\tif (\n\t\t\t\t\tfailedDuringLaunch ||\n\t\t\t\t\tthis._terminalConfigurationService.config.showExitAlert\n\t\t\t\t) {\n\t\t\t\t\t// Always show launch failures\n\t\t\t\t\tthis._notificationService.notify({\n\t\t\t\t\t\tmessage: exitMessage,\n\t\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\tthis._scopedInstantiationService.createInstance(\n\t\t\t\t\t\t\t\t\tTerminalLaunchHelpAction,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Log to help surface the error in case users report issues with showExitAlert\n\t\t\t\t\t// disabled\n\t\t\t\t\tthis._logService.warn(exitMessage);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.dispose(TerminalExitReason.Process);\n\t\t}\n\n\t\t// First onExit to consumers, this can happen after the terminal has already been disposed.\n\t\tthis._onExit.fire(exitCodeOrError);\n\n\t\t// Dispose of the onExit event if the terminal will not be reused again\n\t\tif (this.isDisposed) {\n\t\t\tthis._onExit.dispose();\n\t\t}\n\t}\n\n\tprivate _relaunchWithShellIntegrationDisabled(\n\t\texitMessage: string | undefined,\n\t): void {\n\t\tthis._shellLaunchConfig.ignoreShellIntegration = true;\n\t\tthis.relaunch();\n\t\tthis.statusList.add({\n\t\t\tid: TerminalStatus.ShellIntegrationAttentionNeeded,\n\t\t\tseverity: Severity.Warning,\n\t\t\ticon: Codicon.warning,\n\t\t\ttooltip:\n\t\t\t\t`${exitMessage} ` +\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"launchFailed.exitCodeOnlyShellIntegration\",\n\t\t\t\t\t\"Disabling shell integration in user settings might help.\",\n\t\t\t\t),\n\t\t\thoverActions: [\n\t\t\t\t{\n\t\t\t\t\tcommandId: TerminalCommandId.ShellIntegrationLearnMore,\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"shellIntegration.learnMore\",\n\t\t\t\t\t\t\"Learn more about shell integration\",\n\t\t\t\t\t),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._openerService.open(\n\t\t\t\t\t\t\t\"https://code.visualstudio.com/docs/editor/integrated-terminal#_shell-integration\",\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcommandId: \"workbench.action.openSettings\",\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"shellIntegration.openSettings\",\n\t\t\t\t\t\t\"Open user settings\",\n\t\t\t\t\t),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._commandService.executeCommand(\n\t\t\t\t\t\t\t\"workbench.action.openSettings\",\n\t\t\t\t\t\t\t\"terminal.integrated.shellIntegration.enabled\",\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t\tthis._telemetryService.publicLog2<\n\t\t\t{},\n\t\t\t{\n\t\t\t\towner: \"meganrogge\";\n\t\t\t\tcomment: \"Indicates the process exited when created with shell integration args\";\n\t\t\t}\n\t\t>(\"terminal/shellIntegrationFailureProcessExit\");\n\t}\n\n\t/**\n\t * Ensure write calls to xterm.js have finished before resolving.\n\t */\n\tprivate _flushXtermData(): Promise<void> {\n\t\tif (this._latestXtermWriteData === this._latestXtermParseData) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tlet retries = 0;\n\t\treturn new Promise<void>((r) => {\n\t\t\tconst interval = dom.disposableWindowInterval(\n\t\t\t\tdom.getActiveWindow().window,\n\t\t\t\t() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._latestXtermWriteData ===\n\t\t\t\t\t\t\tthis._latestXtermParseData ||\n\t\t\t\t\t\t++retries === 5\n\t\t\t\t\t) {\n\t\t\t\t\t\tinterval.dispose();\n\t\t\t\t\t\tr();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t20,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _attachPressAnyKeyToCloseListener(xterm: XTermTerminal) {\n\t\tif (xterm.textarea && !this._pressAnyKeyToCloseListener) {\n\t\t\tthis._pressAnyKeyToCloseListener = dom.addDisposableListener(\n\t\t\t\txterm.textarea,\n\t\t\t\t\"keypress\",\n\t\t\t\t(event: KeyboardEvent) => {\n\t\t\t\t\tif (this._pressAnyKeyToCloseListener) {\n\t\t\t\t\t\tthis._pressAnyKeyToCloseListener.dispose();\n\t\t\t\t\t\tthis._pressAnyKeyToCloseListener = undefined;\n\t\t\t\t\t\tthis.dispose(TerminalExitReason.Process);\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _writeInitialText(\n\t\txterm: XtermTerminal,\n\t\tcallback?: () => void,\n\t): void {\n\t\tif (!this._shellLaunchConfig.initialText) {\n\t\t\tcallback?.();\n\t\t\treturn;\n\t\t}\n\t\tconst text =\n\t\t\ttypeof this._shellLaunchConfig.initialText === \"string\"\n\t\t\t\t? this._shellLaunchConfig.initialText\n\t\t\t\t: this._shellLaunchConfig.initialText?.text;\n\t\tif (typeof this._shellLaunchConfig.initialText === \"string\") {\n\t\t\txterm.raw.writeln(text, callback);\n\t\t} else if (this._shellLaunchConfig.initialText.trailingNewLine) {\n\t\t\txterm.raw.writeln(text, callback);\n\t\t} else {\n\t\t\txterm.raw.write(text, callback);\n\t\t}\n\t}\n\n\tasync reuseTerminal(\n\t\tshell: IShellLaunchConfig,\n\t\treset = false,\n\t): Promise<void> {\n\t\t// Unsubscribe any key listener we may have.\n\t\tthis._pressAnyKeyToCloseListener?.dispose();\n\t\tthis._pressAnyKeyToCloseListener = undefined;\n\n\t\tconst xterm = this.xterm;\n\t\tif (xterm) {\n\t\t\tif (!reset) {\n\t\t\t\t// Ensure new processes' output starts at start of new line\n\t\t\t\tawait new Promise<void>((r) => xterm.raw.write(\"\\n\\x1b[G\", r));\n\t\t\t}\n\n\t\t\t// Print initialText if specified\n\t\t\tif (shell.initialText) {\n\t\t\t\tthis._shellLaunchConfig.initialText = shell.initialText;\n\t\t\t\tawait new Promise<void>((r) =>\n\t\t\t\t\tthis._writeInitialText(xterm, r),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Clean up waitOnExit state\n\t\t\tif (this._isExiting && this._shellLaunchConfig.waitOnExit) {\n\t\t\t\txterm.raw.options.disableStdin = false;\n\t\t\t\tthis._isExiting = false;\n\t\t\t}\n\t\t\tif (reset) {\n\t\t\t\txterm.clearDecorations();\n\t\t\t}\n\t\t}\n\n\t\t// Dispose the environment info widget if it exists\n\t\tthis.statusList.remove(TerminalStatus.RelaunchNeeded);\n\n\t\tif (!reset) {\n\t\t\t// HACK: Force initialText to be non-falsy for reused terminals such that the\n\t\t\t// conptyInheritCursor flag is passed to the node-pty, this flag can cause a Window to stop\n\t\t\t// responding in Windows 10 1903 so we only want to use it when something is definitely written\n\t\t\t// to the terminal.\n\t\t\tshell.initialText = \" \";\n\t\t}\n\n\t\t// Set the new shell launch config\n\t\tthis._shellLaunchConfig = shell; // Must be done before calling _createProcess()\n\t\tawait this._processManager\n\t\t\t.relaunch(\n\t\t\t\tthis._shellLaunchConfig,\n\t\t\t\tthis._cols || Constants.DefaultCols,\n\t\t\t\tthis._rows || Constants.DefaultRows,\n\t\t\t\treset,\n\t\t\t)\n\t\t\t.then((result) => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (\"message\" in result) {\n\t\t\t\t\t\tthis._onProcessExit(result);\n\t\t\t\t\t} else if (\"injectedArgs\" in result) {\n\t\t\t\t\t\tthis._injectedArgs = result.injectedArgs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t@debounce(1000)\n\trelaunch(): void {\n\t\tthis.reuseTerminal(this._shellLaunchConfig, true);\n\t}\n\n\tprivate _onTitleChange(title: string): void {\n\t\tif (this.isTitleSetByProcess) {\n\t\t\tthis._setTitle(title, TitleEventSource.Sequence);\n\t\t}\n\t}\n\n\tprivate async _trust(): Promise<boolean> {\n\t\treturn (\n\t\t\t(await this._workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"terminal.requestTrust\",\n\t\t\t\t\t\"Creating a terminal process requires executing code\",\n\t\t\t\t),\n\t\t\t})) === true\n\t\t);\n\t}\n\n\tprivate async _onSelectionChange(): Promise<void> {\n\t\tthis._onDidChangeSelection.fire(this);\n\t\tif (\n\t\t\tthis._configurationService.getValue(\n\t\t\t\tTerminalSettingId.CopyOnSelection,\n\t\t\t)\n\t\t) {\n\t\t\tif (this._overrideCopySelection === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.hasSelection()) {\n\t\t\t\tawait this.copySelection();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _overrideCopySelection: boolean | undefined = undefined;\n\toverrideCopyOnSelection(value: boolean): IDisposable {\n\t\tif (this._overrideCopySelection !== undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot set a copy on selection override multiple times\",\n\t\t\t);\n\t\t}\n\t\tthis._overrideCopySelection = value;\n\t\treturn toDisposable(() => (this._overrideCopySelection = undefined));\n\t}\n\n\t@debounce(2000)\n\tprivate async _updateProcessCwd(): Promise<void> {\n\t\tif (this.isDisposed || this.shellLaunchConfig.customPtyImplementation) {\n\t\t\treturn;\n\t\t}\n\t\t// reset cwd if it has changed, so file based url paths can be resolved\n\t\ttry {\n\t\t\tconst cwd = await this._refreshProperty(ProcessPropertyType.Cwd);\n\t\t\tif (typeof cwd !== \"string\") {\n\t\t\t\tthrow new Error(`cwd is not a string ${cwd}`);\n\t\t\t}\n\t\t} catch (e: unknown) {\n\t\t\t// Swallow this as it means the process has been killed\n\t\t\tif (\n\t\t\t\te instanceof Error &&\n\t\t\t\te.message === \"Cannot refresh property when process is not set\"\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tupdateConfig(): void {\n\t\tthis._setCommandsToSkipShell(\n\t\t\tthis._terminalConfigurationService.config.commandsToSkipShell,\n\t\t);\n\t\tthis._refreshEnvironmentVariableInfoWidgetState(\n\t\t\tthis._processManager.environmentVariableInfo,\n\t\t);\n\t}\n\n\tprivate async _updateUnicodeVersion(): Promise<void> {\n\t\tthis._processManager.setUnicodeVersion(\n\t\t\tthis._terminalConfigurationService.config.unicodeVersion,\n\t\t);\n\t}\n\n\tupdateAccessibilitySupport(): void {\n\t\tthis.xterm!.raw.options.screenReaderMode =\n\t\t\tthis._accessibilityService.isScreenReaderOptimized();\n\t}\n\n\tprivate _setCommandsToSkipShell(commands: string[]): void {\n\t\tconst excludeCommands = commands\n\t\t\t.filter((command) => command[0] === \"-\")\n\t\t\t.map((command) => command.slice(1));\n\t\tthis._skipTerminalCommands = DEFAULT_COMMANDS_TO_SKIP_SHELL.filter(\n\t\t\t(defaultCommand) => {\n\t\t\t\treturn !excludeCommands.includes(defaultCommand);\n\t\t\t},\n\t\t).concat(commands);\n\t}\n\n\tlayout(dimension: dom.Dimension): void {\n\t\tthis._lastLayoutDimensions = dimension;\n\t\tif (this.disableLayout) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't layout if dimensions are invalid (eg. the container is not attached to the DOM or\n\t\t// if display: none\n\t\tif (dimension.width <= 0 || dimension.height <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Evaluate columns and rows, exclude the wrapper element's margin\n\t\tconst terminalWidth = this._evaluateColsAndRows(\n\t\t\tdimension.width,\n\t\t\tdimension.height,\n\t\t);\n\t\tif (!terminalWidth) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._resize();\n\n\t\t// Signal the container is ready\n\t\tif (!this._containerReadyBarrier.isOpen()) {\n\t\t\tthis._containerReadyBarrier.open();\n\t\t}\n\n\t\t// Layout all contributions\n\t\tfor (const contribution of this._contributions.values()) {\n\t\t\tif (this.xterm) {\n\t\t\t\tcontribution.layout?.(this.xterm, dimension);\n\t\t\t} else {\n\t\t\t\tthis._xtermReadyPromise.then((xterm) =>\n\t\t\t\t\tcontribution.layout?.(xterm, dimension),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _resize(immediate?: boolean): Promise<void> {\n\t\tif (!this.xterm) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet cols = this.cols;\n\t\tlet rows = this.rows;\n\n\t\t// Only apply these settings when the terminal is visible so that\n\t\t// the characters are measured correctly.\n\t\tif (this._isVisible && this._layoutSettingsChanged) {\n\t\t\tconst font = this.xterm.getFont();\n\t\t\tconst config = this._terminalConfigurationService.config;\n\t\t\tthis.xterm.raw.options.letterSpacing = font.letterSpacing;\n\t\t\tthis.xterm.raw.options.lineHeight = font.lineHeight;\n\t\t\tthis.xterm.raw.options.fontSize = font.fontSize;\n\t\t\tthis.xterm.raw.options.fontFamily = font.fontFamily;\n\t\t\tthis.xterm.raw.options.fontWeight = config.fontWeight;\n\t\t\tthis.xterm.raw.options.fontWeightBold = config.fontWeightBold;\n\n\t\t\t// Any of the above setting changes could have changed the dimensions of the\n\t\t\t// terminal, re-evaluate now.\n\t\t\tthis._initDimensions();\n\t\t\tcols = this.cols;\n\t\t\trows = this.rows;\n\n\t\t\tthis._layoutSettingsChanged = false;\n\t\t}\n\n\t\tif (isNaN(cols) || isNaN(rows)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (cols !== this.xterm.raw.cols || rows !== this.xterm.raw.rows) {\n\t\t\tif (this._fixedRows || this._fixedCols) {\n\t\t\t\tawait this._updateProperty(\n\t\t\t\t\tProcessPropertyType.FixedDimensions,\n\t\t\t\t\t{ cols: this._fixedCols, rows: this._fixedRows },\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._onDimensionsChanged.fire();\n\t\t}\n\n\t\tTerminalInstance._lastKnownGridDimensions = { cols, rows };\n\t\tthis._resizeDebouncer!.resize(cols, rows, immediate ?? false);\n\t}\n\n\tprivate async _updatePtyDimensions(rawXterm: XTermTerminal): Promise<void> {\n\t\tawait this._processManager.setDimensions(rawXterm.cols, rawXterm.rows);\n\t}\n\n\tsetShellType(shellType: TerminalShellType | undefined) {\n\t\tif (this._shellType === shellType) {\n\t\t\treturn;\n\t\t}\n\t\tif (shellType) {\n\t\t\tthis._shellType = shellType;\n\t\t\tthis._terminalShellTypeContextKey.set(shellType?.toString());\n\t\t\tthis._onDidChangeShellType.fire(shellType);\n\t\t}\n\t}\n\n\tprivate _setAriaLabel(\n\t\txterm: XTermTerminal | undefined,\n\t\tterminalId: number,\n\t\ttitle: string | undefined,\n\t): void {\n\t\tconst labelParts: string[] = [];\n\t\tif (xterm && xterm.textarea) {\n\t\t\tif (title && title.length > 0) {\n\t\t\t\tlabelParts.push(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"terminalTextBoxAriaLabelNumberAndTitle\",\n\t\t\t\t\t\t\"Terminal {0}, {1}\",\n\t\t\t\t\t\tterminalId,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlabelParts.push(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"terminalTextBoxAriaLabel\",\n\t\t\t\t\t\t\"Terminal {0}\",\n\t\t\t\t\t\tterminalId,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst screenReaderOptimized =\n\t\t\t\tthis._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!screenReaderOptimized) {\n\t\t\t\tlabelParts.push(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"terminalScreenReaderMode\",\n\t\t\t\t\t\t\"Run the command: Toggle Screen Reader Accessibility Mode for an optimized screen reader experience\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst accessibilityHelpKeybinding = this._keybindingService\n\t\t\t\t.lookupKeybinding(AccessibilityCommandId.OpenAccessibilityHelp)\n\t\t\t\t?.getLabel();\n\t\t\tif (\n\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\tAccessibilityVerbositySettingId.Terminal,\n\t\t\t\t) &&\n\t\t\t\taccessibilityHelpKeybinding\n\t\t\t) {\n\t\t\t\tlabelParts.push(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"terminalHelpAriaLabel\",\n\t\t\t\t\t\t\"Use {0} for terminal accessibility help\",\n\t\t\t\t\t\taccessibilityHelpKeybinding,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\txterm.textarea.setAttribute(\"aria-label\", labelParts.join(\"\\n\"));\n\t\t}\n\t}\n\n\tprivate _updateTitleProperties(\n\t\ttitle: string | undefined,\n\t\teventSource: TitleEventSource,\n\t): string {\n\t\tif (!title) {\n\t\t\treturn this._processName;\n\t\t}\n\t\tswitch (eventSource) {\n\t\t\tcase TitleEventSource.Process:\n\t\t\t\tif (this._processManager.os === OperatingSystem.Windows) {\n\t\t\t\t\t// Extract the file name without extension\n\t\t\t\t\ttitle = path.win32.parse(title).name;\n\t\t\t\t} else {\n\t\t\t\t\tconst firstSpaceIndex = title.indexOf(\" \");\n\t\t\t\t\tif (title.startsWith(\"/\")) {\n\t\t\t\t\t\ttitle = path.basename(title);\n\t\t\t\t\t} else if (firstSpaceIndex > -1) {\n\t\t\t\t\t\ttitle = title.substring(0, firstSpaceIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._processName = title;\n\t\t\t\tbreak;\n\t\t\tcase TitleEventSource.Api:\n\t\t\t\t// If the title has not been set by the API or the rename command, unregister the handler that\n\t\t\t\t// automatically updates the terminal name\n\t\t\t\tthis._staticTitle = title;\n\t\t\t\tthis._messageTitleDisposable.value = undefined;\n\t\t\t\tbreak;\n\t\t\tcase TitleEventSource.Sequence:\n\t\t\t\t// On Windows, some shells will fire this with the full path which we want to trim\n\t\t\t\t// to show just the file name. This should only happen if the title looks like an\n\t\t\t\t// absolute Windows file path\n\t\t\t\tthis._sequence = title;\n\t\t\t\tif (\n\t\t\t\t\tthis._processManager.os === OperatingSystem.Windows &&\n\t\t\t\t\ttitle.match(/^[a-zA-Z]:\\\\.+\\.[a-zA-Z]{1,3}/)\n\t\t\t\t) {\n\t\t\t\t\tthis._sequence = path.win32.parse(title).name;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tthis._titleSource = eventSource;\n\t\treturn title;\n\t}\n\n\tsetOverrideDimensions(\n\t\tdimensions: ITerminalDimensionsOverride | undefined,\n\t\timmediate = false,\n\t): void {\n\t\tif (\n\t\t\tthis._dimensionsOverride &&\n\t\t\tthis._dimensionsOverride.forceExactSize &&\n\t\t\t!dimensions &&\n\t\t\tthis._rows === 0 &&\n\t\t\tthis._cols === 0\n\t\t) {\n\t\t\t// this terminal never had a real size => keep the last dimensions override exact size\n\t\t\tthis._cols = this._dimensionsOverride.cols;\n\t\t\tthis._rows = this._dimensionsOverride.rows;\n\t\t}\n\t\tthis._dimensionsOverride = dimensions;\n\t\tif (immediate) {\n\t\t\tthis._resize(true);\n\t\t} else {\n\t\t\tthis._resize();\n\t\t}\n\t}\n\n\tasync setFixedDimensions(): Promise<void> {\n\t\tconst cols = await this._quickInputService.input({\n\t\t\ttitle: nls.localize(\n\t\t\t\t\"setTerminalDimensionsColumn\",\n\t\t\t\t\"Set Fixed Dimensions: Column\",\n\t\t\t),\n\t\t\tplaceHolder:\n\t\t\t\t\"Enter a number of columns or leave empty for automatic width\",\n\t\t\tvalidateInput: async (text) =>\n\t\t\t\ttext.length > 0 && !text.match(/^\\d+$/)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tcontent:\n\t\t\t\t\t\t\t\t\"Enter a number or leave empty size automatically\",\n\t\t\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined,\n\t\t});\n\t\tif (cols === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._fixedCols = this._parseFixedDimension(cols);\n\t\tthis._labelComputer?.refreshLabel(this);\n\t\tthis._terminalHasFixedWidth.set(!!this._fixedCols);\n\t\tconst rows = await this._quickInputService.input({\n\t\t\ttitle: nls.localize(\n\t\t\t\t\"setTerminalDimensionsRow\",\n\t\t\t\t\"Set Fixed Dimensions: Row\",\n\t\t\t),\n\t\t\tplaceHolder:\n\t\t\t\t\"Enter a number of rows or leave empty for automatic height\",\n\t\t\tvalidateInput: async (text) =>\n\t\t\t\ttext.length > 0 && !text.match(/^\\d+$/)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tcontent:\n\t\t\t\t\t\t\t\t\"Enter a number or leave empty size automatically\",\n\t\t\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined,\n\t\t});\n\t\tif (rows === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._fixedRows = this._parseFixedDimension(rows);\n\t\tthis._labelComputer?.refreshLabel(this);\n\t\tawait this._refreshScrollbar();\n\t\tthis._resize();\n\t\tthis.focus();\n\t}\n\n\tprivate _parseFixedDimension(value: string): number | undefined {\n\t\tif (value === \"\") {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsed = Number.parseInt(value);\n\t\tif (parsed <= 0) {\n\t\t\tthrow new Error(`Could not parse dimension \"${value}\"`);\n\t\t}\n\t\treturn parsed;\n\t}\n\n\tasync toggleSizeToContentWidth(): Promise<void> {\n\t\tif (!this.xterm?.raw.buffer.active) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._hasScrollBar) {\n\t\t\tthis._terminalHasFixedWidth.set(false);\n\t\t\tthis._fixedCols = undefined;\n\t\t\tthis._fixedRows = undefined;\n\t\t\tthis._hasScrollBar = false;\n\t\t\tthis._initDimensions();\n\t\t\tawait this._resize();\n\t\t} else {\n\t\t\tconst font = this.xterm\n\t\t\t\t? this.xterm.getFont()\n\t\t\t\t: this._terminalConfigurationService.getFont(\n\t\t\t\t\t\tdom.getWindow(this.domElement),\n\t\t\t\t\t);\n\t\t\tconst maxColsForTexture = Math.floor(\n\t\t\t\tConstants.MaxCanvasWidth / (font.charWidth ?? 20),\n\t\t\t);\n\t\t\t// Fixed columns should be at least xterm.js' regular column count\n\t\t\tconst proposedCols = Math.max(\n\t\t\t\tthis.maxCols,\n\t\t\t\tMath.min(\n\t\t\t\t\tthis.xterm.getLongestViewportWrappedLineLength(),\n\t\t\t\t\tmaxColsForTexture,\n\t\t\t\t),\n\t\t\t);\n\t\t\t// Don't switch to fixed dimensions if the content already fits as it makes the scroll\n\t\t\t// bar look bad being off the edge\n\t\t\tif (proposedCols > this.xterm.raw.cols) {\n\t\t\t\tthis._fixedCols = proposedCols;\n\t\t\t}\n\t\t}\n\t\tawait this._refreshScrollbar();\n\t\tthis._labelComputer?.refreshLabel(this);\n\t\tthis.focus();\n\t}\n\n\tprivate _refreshScrollbar(): Promise<void> {\n\t\tif (this._fixedCols || this._fixedRows) {\n\t\t\treturn this._addScrollbar();\n\t\t}\n\t\treturn this._removeScrollbar();\n\t}\n\n\tprivate async _addScrollbar(): Promise<void> {\n\t\tconst charWidth = (\n\t\t\tthis.xterm\n\t\t\t\t? this.xterm.getFont()\n\t\t\t\t: this._terminalConfigurationService.getFont(\n\t\t\t\t\t\tdom.getWindow(this.domElement),\n\t\t\t\t\t)\n\t\t).charWidth;\n\t\tif (\n\t\t\t!this.xterm?.raw.element ||\n\t\t\t!this._container ||\n\t\t\t!charWidth ||\n\t\t\t!this._fixedCols\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._wrapperElement.classList.add(\"fixed-dims\");\n\t\tthis._hasScrollBar = true;\n\t\tthis._initDimensions();\n\t\tawait this._resize();\n\t\tthis._terminalHasFixedWidth.set(true);\n\t\tif (!this._horizontalScrollbar) {\n\t\t\tthis._horizontalScrollbar = this._register(\n\t\t\t\tnew DomScrollableElement(this._wrapperElement, {\n\t\t\t\t\tvertical: ScrollbarVisibility.Hidden,\n\t\t\t\t\thorizontal: ScrollbarVisibility.Auto,\n\t\t\t\t\tuseShadows: false,\n\t\t\t\t\tscrollYToX: false,\n\t\t\t\t\tconsumeMouseWheelIfScrollbarIsNeeded: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis._container.appendChild(this._horizontalScrollbar.getDomNode());\n\t\t}\n\t\tthis._horizontalScrollbar.setScrollDimensions({\n\t\t\twidth: this.xterm.raw.element.clientWidth,\n\t\t\tscrollWidth: this._fixedCols * charWidth + 40, // Padding + scroll bar\n\t\t});\n\t\tthis._horizontalScrollbar.getDomNode().style.paddingBottom = \"16px\";\n\n\t\t// work around for https://github.com/xtermjs/xterm.js/issues/3482\n\t\tif (isWindows) {\n\t\t\tfor (\n\t\t\t\tlet i = this.xterm.raw.buffer.active.viewportY;\n\t\t\t\ti < this.xterm.raw.buffer.active.length;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\tconst line = this.xterm.raw.buffer.active.getLine(i);\n\t\t\t\t(line as any)._line.isWrapped = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _removeScrollbar(): Promise<void> {\n\t\tif (!this._container || !this._horizontalScrollbar) {\n\t\t\treturn;\n\t\t}\n\t\tthis._horizontalScrollbar.getDomNode().remove();\n\t\tthis._horizontalScrollbar.dispose();\n\t\tthis._horizontalScrollbar = undefined;\n\t\tthis._wrapperElement.remove();\n\t\tthis._wrapperElement.classList.remove(\"fixed-dims\");\n\t\tthis._container.appendChild(this._wrapperElement);\n\t}\n\n\tprivate _setResolvedShellLaunchConfig(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t): void {\n\t\tthis._shellLaunchConfig.args = shellLaunchConfig.args;\n\t\tthis._shellLaunchConfig.cwd = shellLaunchConfig.cwd;\n\t\tthis._shellLaunchConfig.executable = shellLaunchConfig.executable;\n\t\tthis._shellLaunchConfig.env = shellLaunchConfig.env;\n\t}\n\n\tprivate _onEnvironmentVariableInfoChanged(\n\t\tinfo: IEnvironmentVariableInfo,\n\t): void {\n\t\tif (info.requiresAction) {\n\t\t\tthis.xterm?.raw.textarea?.setAttribute(\n\t\t\t\t\"aria-label\",\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"terminalStaleTextBoxAriaLabel\",\n\t\t\t\t\t\"Terminal {0} environment is stale, run the 'Show Environment Information' command for more information\",\n\t\t\t\t\tthis._instanceId,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis._refreshEnvironmentVariableInfoWidgetState(info);\n\t}\n\n\tprivate async _refreshEnvironmentVariableInfoWidgetState(\n\t\tinfo?: IEnvironmentVariableInfo,\n\t): Promise<void> {\n\t\t// Check if the status should exist\n\t\tif (!info) {\n\t\t\tthis.statusList.remove(TerminalStatus.RelaunchNeeded);\n\t\t\tthis.statusList.remove(\n\t\t\t\tTerminalStatus.EnvironmentVariableInfoChangesActive,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// Recreate the process seamlessly without informing the use if the following conditions are\n\t\t// met.\n\t\tif (\n\t\t\t// The change requires a relaunch\n\t\t\tinfo.requiresAction &&\n\t\t\t// The feature is enabled\n\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t.environmentChangesRelaunch &&\n\t\t\t// Has not been interacted with\n\t\t\t!this._processManager.hasWrittenData &&\n\t\t\t// Not a feature terminal or is a reconnecting task terminal (TODO: Need to explain the latter case)\n\t\t\t(!this._shellLaunchConfig.isFeatureTerminal ||\n\t\t\t\t(this.reconnectionProperties &&\n\t\t\t\t\tthis._configurationService.getValue(\"task.reconnection\") ===\n\t\t\t\t\t\ttrue)) &&\n\t\t\t// Not a custom pty\n\t\t\t!this._shellLaunchConfig.customPtyImplementation &&\n\t\t\t// Not an extension owned terminal\n\t\t\t!this._shellLaunchConfig.isExtensionOwnedTerminal &&\n\t\t\t// Not a reconnected or revived terminal\n\t\t\t!this._shellLaunchConfig.attachPersistentProcess &&\n\t\t\t// Not a Windows remote using ConPTY (#187084)\n\t\t\t!(\n\t\t\t\tthis._processManager.remoteAuthority &&\n\t\t\t\tthis._terminalConfigurationService.config.windowsEnableConpty &&\n\t\t\t\t(await this._processManager.getBackendOS()) ===\n\t\t\t\t\tOperatingSystem.Windows\n\t\t\t)\n\t\t) {\n\t\t\tthis.relaunch();\n\t\t\treturn;\n\t\t}\n\t\t// Re-create statuses\n\t\tconst workspaceFolder = getWorkspaceForTerminal(\n\t\t\tthis.shellLaunchConfig.cwd,\n\t\t\tthis._workspaceContextService,\n\t\t\tthis._historyService,\n\t\t);\n\t\tthis.statusList.add(info.getStatus({ workspaceFolder }));\n\t}\n\n\tasync getInitialCwd(): Promise<string> {\n\t\tif (!this._initialCwd) {\n\t\t\tthis._initialCwd = this._processManager.initialCwd;\n\t\t}\n\t\treturn this._initialCwd;\n\t}\n\n\tasync getCwd(): Promise<string> {\n\t\tif (this.capabilities.has(TerminalCapability.CwdDetection)) {\n\t\t\treturn this.capabilities\n\t\t\t\t.get(TerminalCapability.CwdDetection)!\n\t\t\t\t.getCwd();\n\t\t} else if (\n\t\t\tthis.capabilities.has(TerminalCapability.NaiveCwdDetection)\n\t\t) {\n\t\t\treturn this.capabilities\n\t\t\t\t.get(TerminalCapability.NaiveCwdDetection)!\n\t\t\t\t.getCwd();\n\t\t}\n\t\treturn this._processManager.initialCwd;\n\t}\n\n\tprivate async _refreshProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\tawait this.processReady;\n\t\treturn this._processManager.refreshProperty(type);\n\t}\n\n\tprivate async _updateProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\treturn this._processManager.updateProperty(type, value);\n\t}\n\n\tasync rename(title?: string) {\n\t\tthis._setTitle(title, TitleEventSource.Api);\n\t}\n\n\tprivate _setTitle(\n\t\ttitle: string | undefined,\n\t\teventSource: TitleEventSource,\n\t): void {\n\t\tconst reset = !title;\n\t\ttitle = this._updateTitleProperties(title, eventSource);\n\t\tconst titleChanged = title !== this._title;\n\t\tthis._title = title;\n\t\tthis._labelComputer?.refreshLabel(this, reset);\n\t\tthis._setAriaLabel(this.xterm?.raw, this._instanceId, this._title);\n\n\t\tif (titleChanged) {\n\t\t\tthis._onTitleChanged.fire(this);\n\t\t}\n\t}\n\n\tasync changeIcon(icon?: TerminalIcon): Promise<TerminalIcon | undefined> {\n\t\tif (icon) {\n\t\t\tthis._icon = icon;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t\treturn icon;\n\t\t}\n\t\tconst iconPicker =\n\t\t\tthis._scopedInstantiationService.createInstance(TerminalIconPicker);\n\t\tconst pickedIcon = await iconPicker.pickIcons();\n\t\ticonPicker.dispose();\n\t\tif (!pickedIcon) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._icon = pickedIcon;\n\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\treturn pickedIcon;\n\t}\n\n\tasync changeColor(\n\t\tcolor?: string,\n\t\tskipQuickPick?: boolean,\n\t): Promise<string | undefined> {\n\t\tif (color) {\n\t\t\tthis.shellLaunchConfig.color = color;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t\treturn color;\n\t\t} else if (skipQuickPick) {\n\t\t\t// Reset this tab's color\n\t\t\tthis.shellLaunchConfig.color = \"\";\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t\treturn;\n\t\t}\n\t\tconst icon = this._getIcon();\n\t\tif (!icon) {\n\t\t\treturn;\n\t\t}\n\t\tconst colorTheme = this._themeService.getColorTheme();\n\t\tconst standardColors: string[] = getStandardColors(colorTheme);\n\t\tconst colorStyleDisposable = createColorStyleElement(colorTheme);\n\t\tconst items: QuickPickItem[] = [];\n\t\tfor (const colorKey of standardColors) {\n\t\t\tconst colorClass = getColorClass(colorKey);\n\t\t\titems.push({\n\t\t\t\tlabel: `$(${Codicon.circleFilled.id}) ${colorKey.replace(\"terminal.ansi\", \"\")}`,\n\t\t\t\tid: colorKey,\n\t\t\t\tdescription: colorKey,\n\t\t\t\ticonClasses: [colorClass],\n\t\t\t});\n\t\t}\n\t\titems.push({ type: \"separator\" });\n\t\tconst showAllColorsItem = { label: \"Reset to default\" };\n\t\titems.push(showAllColorsItem);\n\n\t\tconst disposables: IDisposable[] = [];\n\t\tconst quickPick = this._quickInputService.createQuickPick({\n\t\t\tuseSeparators: true,\n\t\t});\n\t\tdisposables.push(quickPick);\n\t\tquickPick.items = items;\n\t\tquickPick.matchOnDescription = true;\n\t\tquickPick.placeholder = nls.localize(\n\t\t\t\"changeColor\",\n\t\t\t\"Select a color for the terminal\",\n\t\t);\n\t\tquickPick.show();\n\t\tconst result = await new Promise<IQuickPickItem | undefined>((r) => {\n\t\t\tdisposables.push(quickPick.onDidHide(() => r(undefined)));\n\t\t\tdisposables.push(\n\t\t\t\tquickPick.onDidAccept(() => r(quickPick.selectedItems[0])),\n\t\t\t);\n\t\t});\n\t\tdispose(disposables);\n\n\t\tif (result) {\n\t\t\tthis.shellLaunchConfig.color = result.id;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t}\n\n\t\tquickPick.hide();\n\t\tcolorStyleDisposable.dispose();\n\t\treturn result?.id;\n\t}\n\n\tforceScrollbarVisibility(): void {\n\t\tthis._wrapperElement.classList.add(\"force-scrollbar\");\n\t}\n\n\tresetScrollbarVisibility(): void {\n\t\tthis._wrapperElement.classList.remove(\"force-scrollbar\");\n\t}\n\n\tsetParentContextKeyService(\n\t\tparentContextKeyService: IContextKeyService,\n\t): void {\n\t\tthis._scopedContextKeyService.updateParent(parentContextKeyService);\n\t}\n\n\tasync handleMouseEvent(\n\t\tevent: MouseEvent,\n\t\tcontextMenu: IMenu,\n\t): Promise<{ cancelContextMenu: boolean } | void> {\n\t\t// Don't handle mouse event if it was on the scroll bar\n\t\tif (\n\t\t\tdom.isHTMLElement(event.target) &&\n\t\t\t(event.target.classList.contains(\"scrollbar\") ||\n\t\t\t\tevent.target.classList.contains(\"slider\"))\n\t\t) {\n\t\t\treturn { cancelContextMenu: true };\n\t\t}\n\n\t\t// Middle click\n\t\tif (event.which === 2) {\n\t\t\tswitch (\n\t\t\t\tthis._terminalConfigurationService.config.middleClickBehavior\n\t\t\t) {\n\t\t\t\tcase \"paste\":\n\t\t\t\t\tthis.paste();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"default\":\n\t\t\t\tdefault:\n\t\t\t\t\t// Drop selection and focus terminal on Linux to enable middle button paste\n\t\t\t\t\t// when click occurs on the selection itself.\n\t\t\t\t\tthis.focus();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Right click\n\t\tif (event.which === 3) {\n\t\t\tconst rightClickBehavior =\n\t\t\t\tthis._terminalConfigurationService.config.rightClickBehavior;\n\t\t\tif (rightClickBehavior === \"nothing\") {\n\t\t\t\tif (!event.shiftKey) {\n\t\t\t\t\treturn { cancelContextMenu: true };\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else if (\n\t\t\t\trightClickBehavior === \"copyPaste\" ||\n\t\t\t\trightClickBehavior === \"paste\"\n\t\t\t) {\n\t\t\t\t// copyPaste: Shift+right click should open context menu\n\t\t\t\tif (rightClickBehavior === \"copyPaste\" && event.shiftKey) {\n\t\t\t\t\topenContextMenu(\n\t\t\t\t\t\tdom.getActiveWindow(),\n\t\t\t\t\t\tevent,\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tcontextMenu,\n\t\t\t\t\t\tthis._contextMenuService,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rightClickBehavior === \"copyPaste\" && this.hasSelection()) {\n\t\t\t\t\tawait this.copySelection();\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t} else if (BrowserFeatures.clipboard.readText) {\n\t\t\t\t\tthis.paste();\n\t\t\t\t} else {\n\t\t\t\t\tthis._notificationService.info(\n\t\t\t\t\t\t`This browser doesn't support the clipboard.readText API needed to trigger a paste, try ${isMacintosh ? \"\u2318\" : \"Ctrl\"}+V instead.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Clear selection after all click event bubbling is finished on Mac to prevent\n\t\t\t\t// right-click selecting a word which is seemed cannot be disabled. There is a\n\t\t\t\t// flicker when pasting but this appears to give the best experience if the\n\t\t\t\t// setting is enabled.\n\t\t\t\tif (isMacintosh) {\n\t\t\t\t\tsetTimeout(() => this.clearSelection(), 0);\n\t\t\t\t}\n\t\t\t\treturn { cancelContextMenu: true };\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass TerminalInstanceDragAndDropController\n\textends Disposable\n\timplements dom.IDragAndDropObserverCallbacks\n{\n\tprivate _dropOverlay?: HTMLElement;\n\n\tprivate readonly _onDropFile = this._register(new Emitter<string | URI>());\n\tget onDropFile(): Event<string | URI> {\n\t\treturn this._onDropFile.event;\n\t}\n\tprivate readonly _onDropTerminal = this._register(\n\t\tnew Emitter<IRequestAddInstanceToGroupEvent>(),\n\t);\n\tget onDropTerminal(): Event<IRequestAddInstanceToGroupEvent> {\n\t\treturn this._onDropTerminal.event;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _container: HTMLElement,\n\t\t@IWorkbenchLayoutService\n\t\tprivate readonly _layoutService: IWorkbenchLayoutService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => this._clearDropOverlay()));\n\t}\n\n\tprivate _clearDropOverlay() {\n\t\tthis._dropOverlay?.remove();\n\t\tthis._dropOverlay = undefined;\n\t}\n\n\tonDragEnter(e: DragEvent) {\n\t\tif (\n\t\t\t!containsDragType(\n\t\t\t\te,\n\t\t\t\tDataTransfers.FILES,\n\t\t\t\tDataTransfers.RESOURCES,\n\t\t\t\tTerminalDataTransfers.Terminals,\n\t\t\t\tCodeDataTransfers.FILES,\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._dropOverlay) {\n\t\t\tthis._dropOverlay = document.createElement(\"div\");\n\t\t\tthis._dropOverlay.classList.add(\"terminal-drop-overlay\");\n\t\t}\n\n\t\t// Dragging terminals\n\t\tif (containsDragType(e, TerminalDataTransfers.Terminals)) {\n\t\t\tconst side = this._getDropSide(e);\n\t\t\tthis._dropOverlay.classList.toggle(\n\t\t\t\t\"drop-before\",\n\t\t\t\tside === \"before\",\n\t\t\t);\n\t\t\tthis._dropOverlay.classList.toggle(\"drop-after\", side === \"after\");\n\t\t}\n\n\t\tif (!this._dropOverlay.parentElement) {\n\t\t\tthis._container.appendChild(this._dropOverlay);\n\t\t}\n\t}\n\tonDragLeave(e: DragEvent) {\n\t\tthis._clearDropOverlay();\n\t}\n\n\tonDragEnd(e: DragEvent) {\n\t\tthis._clearDropOverlay();\n\t}\n\n\tonDragOver(e: DragEvent) {\n\t\tif (!e.dataTransfer || !this._dropOverlay) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Dragging terminals\n\t\tif (containsDragType(e, TerminalDataTransfers.Terminals)) {\n\t\t\tconst side = this._getDropSide(e);\n\t\t\tthis._dropOverlay.classList.toggle(\n\t\t\t\t\"drop-before\",\n\t\t\t\tside === \"before\",\n\t\t\t);\n\t\t\tthis._dropOverlay.classList.toggle(\"drop-after\", side === \"after\");\n\t\t}\n\n\t\tthis._dropOverlay.style.opacity = \"1\";\n\t}\n\n\tasync onDrop(e: DragEvent) {\n\t\tthis._clearDropOverlay();\n\n\t\tif (!e.dataTransfer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst terminalResources = getTerminalResourcesFromDragEvent(e);\n\t\tif (terminalResources) {\n\t\t\tfor (const uri of terminalResources) {\n\t\t\t\tconst side = this._getDropSide(e);\n\t\t\t\tthis._onDropTerminal.fire({ uri, side });\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if files were dragged from the tree explorer\n\t\tlet path: URI | undefined;\n\t\tconst rawResources = e.dataTransfer.getData(DataTransfers.RESOURCES);\n\t\tif (rawResources) {\n\t\t\tpath = URI.parse(JSON.parse(rawResources)[0]);\n\t\t}\n\n\t\tconst rawCodeFiles = e.dataTransfer.getData(CodeDataTransfers.FILES);\n\t\tif (!path && rawCodeFiles) {\n\t\t\tpath = URI.file(JSON.parse(rawCodeFiles)[0]);\n\t\t}\n\n\t\tif (\n\t\t\t!path &&\n\t\t\te.dataTransfer.files.length > 0 &&\n\t\t\tthis._hostService.getPathForFile(e.dataTransfer.files[0])\n\t\t) {\n\t\t\t// Check if the file was dragged from the filesystem\n\t\t\tpath = URI.file(\n\t\t\t\tthis._hostService.getPathForFile(e.dataTransfer.files[0])!,\n\t\t\t);\n\t\t}\n\n\t\tif (!path) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDropFile.fire(path);\n\t}\n\n\tprivate _getDropSide(e: DragEvent): \"before\" | \"after\" {\n\t\tconst target = this._container;\n\t\tif (!target) {\n\t\t\treturn \"after\";\n\t\t}\n\n\t\tconst rect = target.getBoundingClientRect();\n\t\treturn this._getViewOrientation() === Orientation.HORIZONTAL\n\t\t\t? e.clientX - rect.left < rect.width / 2\n\t\t\t\t? \"before\"\n\t\t\t\t: \"after\"\n\t\t\t: e.clientY - rect.top < rect.height / 2\n\t\t\t\t? \"before\"\n\t\t\t\t: \"after\";\n\t}\n\n\tprivate _getViewOrientation(): Orientation {\n\t\tconst panelPosition = this._layoutService.getPanelPosition();\n\t\tconst terminalLocation =\n\t\t\tthis._viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID);\n\t\treturn terminalLocation === ViewContainerLocation.Panel &&\n\t\t\tisHorizontal(panelPosition)\n\t\t\t? Orientation.HORIZONTAL\n\t\t\t: Orientation.VERTICAL;\n\t}\n}\n\ninterface ITerminalLabelTemplateProperties {\n\tcwd?: string | null | undefined;\n\tcwdFolder?: string | null | undefined;\n\tworkspaceFolderName?: string | null | undefined;\n\tworkspaceFolder?: string | null | undefined;\n\tlocal?: string | null | undefined;\n\tprocess?: string | null | undefined;\n\tsequence?: string | null | undefined;\n\ttask?: string | null | undefined;\n\tfixedDimensions?: string | null | undefined;\n\tseparator?: string | ISeparator | null | undefined;\n}\n\nenum TerminalLabelType {\n\tTitle = \"title\",\n\tDescription = \"description\",\n}\n\nexport class TerminalLabelComputer extends Disposable {\n\tprivate _title = \"\";\n\tprivate _description = \"\";\n\tget title(): string | undefined {\n\t\treturn this._title;\n\t}\n\tget description(): string {\n\t\treturn this._description;\n\t}\n\n\tprivate readonly _onDidChangeLabel = this._register(\n\t\tnew Emitter<{ title: string; description: string }>(),\n\t);\n\treadonly onDidChangeLabel = this._onDidChangeLabel.event;\n\n\tconstructor(\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ITerminalConfigurationService\n\t\tprivate readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t}\n\n\trefreshLabel(\n\t\tinstance: Pick<\n\t\t\tITerminalInstance,\n\t\t\t| \"shellLaunchConfig\"\n\t\t\t| \"cwd\"\n\t\t\t| \"fixedCols\"\n\t\t\t| \"fixedRows\"\n\t\t\t| \"initialCwd\"\n\t\t\t| \"processName\"\n\t\t\t| \"sequence\"\n\t\t\t| \"userHome\"\n\t\t\t| \"workspaceFolder\"\n\t\t\t| \"staticTitle\"\n\t\t\t| \"capabilities\"\n\t\t\t| \"title\"\n\t\t\t| \"description\"\n\t\t>,\n\t\treset?: boolean,\n\t): void {\n\t\tthis._title = this.computeLabel(\n\t\t\tinstance,\n\t\t\tthis._terminalConfigurationService.config.tabs.title,\n\t\t\tTerminalLabelType.Title,\n\t\t\treset,\n\t\t);\n\t\tthis._description = this.computeLabel(\n\t\t\tinstance,\n\t\t\tthis._terminalConfigurationService.config.tabs.description,\n\t\t\tTerminalLabelType.Description,\n\t\t);\n\t\tif (\n\t\t\tthis._title !== instance.title ||\n\t\t\tthis._description !== instance.description ||\n\t\t\treset\n\t\t) {\n\t\t\tthis._onDidChangeLabel.fire({\n\t\t\t\ttitle: this._title,\n\t\t\t\tdescription: this._description,\n\t\t\t});\n\t\t}\n\t}\n\n\tcomputeLabel(\n\t\tinstance: Pick<\n\t\t\tITerminalInstance,\n\t\t\t| \"shellLaunchConfig\"\n\t\t\t| \"cwd\"\n\t\t\t| \"fixedCols\"\n\t\t\t| \"fixedRows\"\n\t\t\t| \"initialCwd\"\n\t\t\t| \"processName\"\n\t\t\t| \"sequence\"\n\t\t\t| \"userHome\"\n\t\t\t| \"workspaceFolder\"\n\t\t\t| \"staticTitle\"\n\t\t\t| \"capabilities\"\n\t\t\t| \"title\"\n\t\t\t| \"description\"\n\t\t>,\n\t\tlabelTemplate: string,\n\t\tlabelType: TerminalLabelType,\n\t\treset?: boolean,\n\t) {\n\t\tconst type =\n\t\t\tinstance.shellLaunchConfig.attachPersistentProcess?.type ||\n\t\t\tinstance.shellLaunchConfig.type;\n\t\tconst templateProperties: ITerminalLabelTemplateProperties = {\n\t\t\tcwd: instance.cwd || instance.initialCwd || \"\",\n\t\t\tcwdFolder: \"\",\n\t\t\tworkspaceFolderName: instance.workspaceFolder?.name,\n\t\t\tworkspaceFolder: instance.workspaceFolder\n\t\t\t\t? path.basename(instance.workspaceFolder.uri.fsPath)\n\t\t\t\t: undefined,\n\t\t\tlocal: type === \"Local\" ? terminalStrings.typeLocal : undefined,\n\t\t\tprocess: instance.processName,\n\t\t\tsequence: instance.sequence,\n\t\t\ttask: type === \"Task\" ? terminalStrings.typeTask : undefined,\n\t\t\tfixedDimensions: instance.fixedCols\n\t\t\t\t? instance.fixedRows\n\t\t\t\t\t? `\\u2194${instance.fixedCols} \\u2195${instance.fixedRows}`\n\t\t\t\t\t: `\\u2194${instance.fixedCols}`\n\t\t\t\t: instance.fixedRows\n\t\t\t\t\t? `\\u2195${instance.fixedRows}`\n\t\t\t\t\t: \"\",\n\t\t\tseparator: {\n\t\t\t\tlabel: this._terminalConfigurationService.config.tabs.separator,\n\t\t\t},\n\t\t};\n\t\ttemplateProperties.workspaceFolderName =\n\t\t\tinstance.workspaceFolder?.name ??\n\t\t\ttemplateProperties.workspaceFolder;\n\t\tlabelTemplate = labelTemplate.trim();\n\t\tif (!labelTemplate) {\n\t\t\treturn labelType === TerminalLabelType.Title\n\t\t\t\t? instance.processName || \"\"\n\t\t\t\t: \"\";\n\t\t}\n\t\tif (\n\t\t\t!reset &&\n\t\t\tinstance.staticTitle &&\n\t\t\tlabelType === TerminalLabelType.Title\n\t\t) {\n\t\t\treturn (\n\t\t\t\tinstance.staticTitle.replace(/[\\n\\r\\t]/g, \"\") ||\n\t\t\t\ttemplateProperties.process?.replace(/[\\n\\r\\t]/g, \"\") ||\n\t\t\t\t\"\"\n\t\t\t);\n\t\t}\n\t\tconst detection =\n\t\t\tinstance.capabilities.has(TerminalCapability.CwdDetection) ||\n\t\t\tinstance.capabilities.has(TerminalCapability.NaiveCwdDetection);\n\t\tconst folders = this._workspaceContextService.getWorkspace().folders;\n\t\tconst multiRootWorkspace = folders.length > 1;\n\n\t\t// Only set cwdFolder if detection is on\n\t\tif (\n\t\t\ttemplateProperties.cwd &&\n\t\t\tdetection &&\n\t\t\t(!instance.shellLaunchConfig.isFeatureTerminal ||\n\t\t\t\tlabelType === TerminalLabelType.Title)\n\t\t) {\n\t\t\tconst cwdUri = URI.from({\n\t\t\t\tscheme: instance.workspaceFolder?.uri.scheme || Schemas.file,\n\t\t\t\tpath: instance.cwd ? path.resolve(instance.cwd) : undefined,\n\t\t\t});\n\t\t\t// Multi-root workspaces always show cwdFolder to disambiguate them, otherwise only show\n\t\t\t// when it differs from the workspace folder in which it was launched from\n\t\t\tlet showCwd = false;\n\t\t\tif (multiRootWorkspace) {\n\t\t\t\tshowCwd = true;\n\t\t\t} else if (instance.workspaceFolder?.uri) {\n\t\t\t\tconst caseSensitive = this._fileService.hasCapability(\n\t\t\t\t\tinstance.workspaceFolder.uri,\n\t\t\t\t\tFileSystemProviderCapabilities.PathCaseSensitive,\n\t\t\t\t);\n\t\t\t\tshowCwd =\n\t\t\t\t\tcwdUri.fsPath.localeCompare(\n\t\t\t\t\t\tinstance.workspaceFolder.uri.fsPath,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t{ sensitivity: caseSensitive ? \"case\" : \"base\" },\n\t\t\t\t\t) !== 0;\n\t\t\t}\n\t\t\tif (showCwd) {\n\t\t\t\ttemplateProperties.cwdFolder = path.basename(\n\t\t\t\t\ttemplateProperties.cwd,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Remove special characters that could mess with rendering\n\t\tconst label = template(\n\t\t\tlabelTemplate,\n\t\t\ttemplateProperties as unknown as {\n\t\t\t\t[key: string]: string | ISeparator | undefined | null;\n\t\t\t},\n\t\t)\n\t\t\t.replace(/[\\n\\r\\t]/g, \"\")\n\t\t\t.trim();\n\t\treturn label === \"\" && labelType === TerminalLabelType.Title\n\t\t\t? instance.processName || \"\"\n\t\t\t: label;\n\t}\n}\n\nexport function parseExitResult(\n\texitCodeOrError: ITerminalLaunchError | number | undefined,\n\tshellLaunchConfig: IShellLaunchConfig,\n\tprocessState: ProcessState,\n\tinitialCwd: string | undefined,\n): { code: number | undefined; message: string | undefined } | undefined {\n\t// Only return a message if the exit code is non-zero\n\tif (exitCodeOrError === undefined || exitCodeOrError === 0) {\n\t\treturn { code: exitCodeOrError, message: undefined };\n\t}\n\n\tconst code =\n\t\ttypeof exitCodeOrError === \"number\"\n\t\t\t? exitCodeOrError\n\t\t\t: exitCodeOrError.code;\n\n\t// Create exit code message\n\tlet message: string | undefined;\n\tswitch (typeof exitCodeOrError) {\n\t\tcase \"number\": {\n\t\t\tlet commandLine: string | undefined;\n\t\t\tif (shellLaunchConfig.executable) {\n\t\t\t\tcommandLine = shellLaunchConfig.executable;\n\t\t\t\tif (typeof shellLaunchConfig.args === \"string\") {\n\t\t\t\t\tcommandLine += ` ${shellLaunchConfig.args}`;\n\t\t\t\t} else if (\n\t\t\t\t\tshellLaunchConfig.args &&\n\t\t\t\t\tshellLaunchConfig.args.length\n\t\t\t\t) {\n\t\t\t\t\tcommandLine += shellLaunchConfig.args\n\t\t\t\t\t\t.map((a) => ` '${a}'`)\n\t\t\t\t\t\t.join();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (processState === ProcessState.KilledDuringLaunch) {\n\t\t\t\tif (commandLine) {\n\t\t\t\t\tmessage = nls.localize(\n\t\t\t\t\t\t\"launchFailed.exitCodeAndCommandLine\",\n\t\t\t\t\t\t'The terminal process \"{0}\" failed to launch (exit code: {1}).',\n\t\t\t\t\t\tcommandLine,\n\t\t\t\t\t\tcode,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = nls.localize(\n\t\t\t\t\t\t\"launchFailed.exitCodeOnly\",\n\t\t\t\t\t\t\"The terminal process failed to launch (exit code: {0}).\",\n\t\t\t\t\t\tcode,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (commandLine) {\n\t\t\t\tmessage = nls.localize(\n\t\t\t\t\t\"terminated.exitCodeAndCommandLine\",\n\t\t\t\t\t'The terminal process \"{0}\" terminated with exit code: {1}.',\n\t\t\t\t\tcommandLine,\n\t\t\t\t\tcode,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmessage = nls.localize(\n\t\t\t\t\t\"terminated.exitCodeOnly\",\n\t\t\t\t\t\"The terminal process terminated with exit code: {0}.\",\n\t\t\t\t\tcode,\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase \"object\": {\n\t\t\t// Ignore internal errors\n\t\t\tif (\n\t\t\t\texitCodeOrError.message\n\t\t\t\t\t.toString()\n\t\t\t\t\t.includes(\"Could not find pty with id\")\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Convert conpty code-based failures into human friendly messages\n\t\t\tlet innerMessage = exitCodeOrError.message;\n\t\t\tconst conptyError = exitCodeOrError.message.match(\n\t\t\t\t/.*error code:\\s*(\\d+).*$/,\n\t\t\t);\n\t\t\tif (conptyError) {\n\t\t\t\tconst errorCode =\n\t\t\t\t\tconptyError.length > 1\n\t\t\t\t\t\t? Number.parseInt(conptyError[1])\n\t\t\t\t\t\t: undefined;\n\t\t\t\tswitch (errorCode) {\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tinnerMessage = `Access was denied to the path containing your executable \"${shellLaunchConfig.executable}\". Manage and change your permissions to get this to work`;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 267:\n\t\t\t\t\t\tinnerMessage = `Invalid starting directory \"${initialCwd}\", review your terminal.integrated.cwd setting`;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1260:\n\t\t\t\t\t\tinnerMessage = `Windows cannot open this program because it has been prevented by a software restriction policy. For more information, open Event Viewer or contact your system Administrator`;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmessage = nls.localize(\n\t\t\t\t\"launchFailed.errorMessage\",\n\t\t\t\t\"The terminal process failed to launch: {0}.\",\n\t\t\t\tinnerMessage,\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn { code, message };\n}\n\nexport class TerminalInstanceColorProvider implements IXtermColorProvider {\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\t@IViewDescriptorService\n\t\tprivate readonly _viewDescriptorService: IViewDescriptorService,\n\t) {}\n\n\tgetBackgroundColor(theme: IColorTheme) {\n\t\tconst terminalBackground = theme.getColor(TERMINAL_BACKGROUND_COLOR);\n\t\tif (terminalBackground) {\n\t\t\treturn terminalBackground;\n\t\t}\n\t\tif (this._instance.target === TerminalLocation.Editor) {\n\t\t\treturn theme.getColor(editorBackground);\n\t\t}\n\t\tconst location =\n\t\t\tthis._viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID)!;\n\t\tif (location === ViewContainerLocation.Panel) {\n\t\t\treturn theme.getColor(PANEL_BACKGROUND);\n\t\t}\n\t\treturn theme.getColor(SIDE_BAR_BACKGROUND);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants", "e", "xterm", "path", "TerminalLabelType"]
}
