{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalInstance.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isFirefox } from '../../../../base/browser/browser.js';\nimport { BrowserFeatures } from '../../../../base/browser/canIUse.js';\nimport { DataTransfers } from '../../../../base/browser/dnd.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { Orientation } from '../../../../base/browser/ui/sash/sash.js';\nimport { DomScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { AutoOpenBarrier, Barrier, Promises, disposableTimeout, timeout } from '../../../../base/common/async.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { debounce } from '../../../../base/common/decorators.js';\nimport { ErrorNoTelemetry, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { ISeparator, template } from '../../../../base/common/labels.js';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable, dispose, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport * as path from '../../../../base/common/path.js';\nimport { OS, OperatingSystem, isMacintosh, isWindows } from '../../../../base/common/platform.js';\nimport { ScrollbarVisibility } from '../../../../base/common/scrollable.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { TabFocus } from '../../../../editor/browser/config/tabFocus.js';\nimport * as nls from '../../../../nls.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CodeDataTransfers, containsDragType } from '../../../../platform/dnd/browser/dnd.js';\nimport { FileSystemProviderCapabilities, IFileService } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ResultKind } from '../../../../platform/keybinding/common/keybindingResolver.js';\nimport { INotificationService, IPromptChoice, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IQuickInputService, IQuickPickItem, QuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IMarkProperties, ITerminalCommand, TerminalCapability } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { TerminalCapabilityStoreMultiplexer } from '../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { IEnvironmentVariableCollection, IMergedEnvironmentVariableCollection } from '../../../../platform/terminal/common/environmentVariable.js';\nimport { deserializeEnvironmentVariableCollections } from '../../../../platform/terminal/common/environmentVariableShared.js';\nimport { GeneralShellType, IProcessDataEvent, IProcessPropertyMap, IReconnectionProperties, IShellLaunchConfig, ITerminalDimensionsOverride, ITerminalLaunchError, ITerminalLogService, PosixShellType, ProcessPropertyType, ShellIntegrationStatus, TerminalExitReason, TerminalIcon, TerminalLocation, TerminalSettingId, TerminalShellType, TitleEventSource, WindowsShellType } from '../../../../platform/terminal/common/terminal.js';\nimport { formatMessageForTerminal } from '../../../../platform/terminal/common/terminalStrings.js';\nimport { editorBackground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { getIconRegistry } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IColorTheme, IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IWorkspaceContextService, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkspaceTrustRequestService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { PANEL_BACKGROUND, SIDE_BAR_BACKGROUND } from '../../../common/theme.js';\nimport { IViewDescriptorService, ViewContainerLocation } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { IRequestAddInstanceToGroupEvent, ITerminalConfigurationService, ITerminalContribution, ITerminalInstance, IXtermColorProvider, TerminalDataTransfers } from './terminal.js';\nimport { TerminalLaunchHelpAction } from './terminalActions.js';\nimport { TerminalEditorInput } from './terminalEditorInput.js';\nimport { TerminalExtensionsRegistry } from './terminalExtensions.js';\nimport { getColorClass, createColorStyleElement, getStandardColors } from './terminalIcon.js';\nimport { TerminalProcessManager } from './terminalProcessManager.js';\nimport { showRunRecentQuickPick } from './terminalRunRecentQuickPick.js';\nimport { ITerminalStatusList, TerminalStatus, TerminalStatusList } from './terminalStatusList.js';\nimport { getTerminalResourcesFromDragEvent, getTerminalUri } from './terminalUri.js';\nimport { TerminalWidgetManager } from './widgets/widgetManager.js';\nimport { LineDataEventAddon } from './xterm/lineDataEventAddon.js';\nimport { XtermTerminal, getXtermScaledDimensions } from './xterm/xtermTerminal.js';\nimport { IEnvironmentVariableInfo } from '../common/environmentVariable.js';\nimport { getCommandHistory, getDirectoryHistory } from '../common/history.js';\nimport { DEFAULT_COMMANDS_TO_SKIP_SHELL, ITerminalProcessManager, ITerminalProfileResolverService, ProcessState, TERMINAL_CREATION_COMMANDS, TERMINAL_VIEW_ID, TerminalCommandId } from '../common/terminal.js';\nimport { TERMINAL_BACKGROUND_COLOR } from '../common/terminalColorRegistry.js';\nimport { TerminalContextKeys } from '../common/terminalContextKey.js';\nimport { getWorkspaceForTerminal, preparePathForShell } from '../common/terminalEnvironment.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { isHorizontal, IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { IPathService } from '../../../services/path/common/pathService.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { importAMDNodeModule } from '../../../../amdX.js';\nimport type { IMarker, Terminal as XTermTerminal } from '@xterm/xterm';\nimport { AccessibilityCommandId } from '../../accessibility/common/accessibilityCommands.js';\nimport { terminalStrings } from '../common/terminalStrings.js';\nimport { shouldPasteTerminalText } from '../common/terminalClipboard.js';\nimport { TerminalIconPicker } from './terminalIconPicker.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { TerminalResizeDebouncer } from './terminalResizeDebouncer.js';\n\n// HACK: This file should not depend on terminalContrib\n// eslint-disable-next-line local/code-import-patterns\nimport { TerminalAccessibilityCommandId } from '../../terminalContrib/accessibility/common/terminal.accessibility.js';\nimport { openContextMenu } from './terminalContextMenu.js';\nimport type { IMenu } from '../../../../platform/actions/common/actions.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\n\nconst enum Constants {\n\t/**\n\t * The maximum amount of milliseconds to wait for a container before starting to create the\n\t * terminal process. This period helps ensure the terminal has good initial dimensions to work\n\t * with if it's going to be a foreground terminal.\n\t */\n\tWaitForContainerThreshold = 100,\n\n\tDefaultCols = 80,\n\tDefaultRows = 30,\n\tMaxCanvasWidth = 4096\n}\n\nlet xtermConstructor: Promise<typeof XTermTerminal> | undefined;\n\ninterface ICanvasDimensions {\n\twidth: number;\n\theight: number;\n}\n\ninterface IGridDimensions {\n\tcols: number;\n\trows: number;\n}\n\nconst shellIntegrationSupportedShellTypes: (PosixShellType | GeneralShellType | WindowsShellType)[] = [\n\tPosixShellType.Bash,\n\tPosixShellType.Zsh,\n\tGeneralShellType.PowerShell,\n\tGeneralShellType.Python,\n];\n\nexport class TerminalInstance extends Disposable implements ITerminalInstance {\n\tprivate static _lastKnownCanvasDimensions: ICanvasDimensions | undefined;\n\tprivate static _lastKnownGridDimensions: IGridDimensions | undefined;\n\tprivate static _instanceIdCounter = 1;\n\n\tprivate readonly _scopedInstantiationService: IInstantiationService;\n\n\tprivate readonly _processManager: ITerminalProcessManager;\n\tprivate readonly _contributions: Map<string, ITerminalContribution> = new Map();\n\tprivate readonly _resource: URI;\n\tprivate _xtermReadyPromise: Promise<XtermTerminal>;\n\tprivate _pressAnyKeyToCloseListener: IDisposable | undefined;\n\tprivate _instanceId: number;\n\tprivate _latestXtermWriteData: number = 0;\n\tprivate _latestXtermParseData: number = 0;\n\tprivate _isExiting: boolean;\n\tprivate _hadFocusOnExit: boolean;\n\tprivate _isVisible: boolean;\n\tprivate _exitCode: number | undefined;\n\tprivate _exitReason: TerminalExitReason | undefined;\n\tprivate _skipTerminalCommands: string[];\n\tprivate _shellType: TerminalShellType | undefined;\n\tprivate _title: string = '';\n\tprivate _titleSource: TitleEventSource = TitleEventSource.Process;\n\tprivate _container: HTMLElement | undefined;\n\tprivate _wrapperElement: (HTMLElement & { xterm?: XTermTerminal });\n\tget domElement(): HTMLElement { return this._wrapperElement; }\n\tprivate _horizontalScrollbar: DomScrollableElement | undefined;\n\tprivate _terminalFocusContextKey: IContextKey<boolean>;\n\tprivate _terminalHasFixedWidth: IContextKey<boolean>;\n\tprivate _terminalHasTextContextKey: IContextKey<boolean>;\n\tprivate _terminalAltBufferActiveContextKey: IContextKey<boolean>;\n\tprivate _terminalShellIntegrationEnabledContextKey: IContextKey<boolean>;\n\tprivate _cols: number = 0;\n\tprivate _rows: number = 0;\n\tprivate _fixedCols: number | undefined;\n\tprivate _fixedRows: number | undefined;\n\tprivate _cwd: string | undefined = undefined;\n\tprivate _initialCwd: string | undefined = undefined;\n\tprivate _injectedArgs: string[] | undefined = undefined;\n\tprivate _layoutSettingsChanged: boolean = true;\n\tprivate _dimensionsOverride: ITerminalDimensionsOverride | undefined;\n\tprivate _areLinksReady: boolean = false;\n\tprivate readonly _initialDataEventsListener: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\tprivate _initialDataEvents: string[] | undefined = [];\n\tprivate _containerReadyBarrier: AutoOpenBarrier;\n\tprivate _attachBarrier: AutoOpenBarrier;\n\tprivate _icon: TerminalIcon | undefined;\n\tprivate readonly _messageTitleDisposable: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\tprivate _widgetManager: TerminalWidgetManager;\n\tprivate readonly _dndObserver: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\tprivate _lastLayoutDimensions: dom.Dimension | undefined;\n\tprivate _hasHadInput: boolean;\n\tprivate _description?: string;\n\tprivate _processName: string = '';\n\tprivate _sequence?: string;\n\tprivate _staticTitle?: string;\n\tprivate _workspaceFolder?: IWorkspaceFolder;\n\tprivate _labelComputer?: TerminalLabelComputer;\n\tprivate _userHome?: string;\n\tprivate _hasScrollBar?: boolean;\n\tprivate _target?: TerminalLocation | undefined;\n\tprivate _usedShellIntegrationInjection: boolean = false;\n\tget usedShellIntegrationInjection(): boolean { return this._usedShellIntegrationInjection; }\n\tprivate _lineDataEventAddon: LineDataEventAddon | undefined;\n\tprivate readonly _scopedContextKeyService: IContextKeyService;\n\tprivate _resizeDebouncer?: TerminalResizeDebouncer;\n\tprivate _pauseInputEventBarrier: Barrier | undefined;\n\tpauseInputEvents(barrier: Barrier): void {\n\t\tthis._pauseInputEventBarrier = barrier;\n\t}\n\n\treadonly capabilities = this._register(new TerminalCapabilityStoreMultiplexer());\n\treadonly statusList: ITerminalStatusList;\n\n\tget store(): DisposableStore {\n\t\treturn this._store;\n\t}\n\n\tget extEnvironmentVariableCollection(): IMergedEnvironmentVariableCollection | undefined { return this._processManager.extEnvironmentVariableCollection; }\n\n\txterm?: XtermTerminal;\n\tdisableLayout: boolean = false;\n\n\tget waitOnExit(): ITerminalInstance['waitOnExit'] { return this._shellLaunchConfig.attachPersistentProcess?.waitOnExit || this._shellLaunchConfig.waitOnExit; }\n\tset waitOnExit(value: ITerminalInstance['waitOnExit']) {\n\t\tthis._shellLaunchConfig.waitOnExit = value;\n\t}\n\n\tget target(): TerminalLocation | undefined { return this._target; }\n\tset target(value: TerminalLocation | undefined) {\n\t\tthis._target = value;\n\t\tthis._onDidChangeTarget.fire(value);\n\t}\n\n\tget instanceId(): number { return this._instanceId; }\n\tget resource(): URI { return this._resource; }\n\tget cols(): number {\n\t\tif (this._fixedCols !== undefined) {\n\t\t\treturn this._fixedCols;\n\t\t}\n\t\tif (this._dimensionsOverride && this._dimensionsOverride.cols) {\n\t\t\tif (this._dimensionsOverride.forceExactSize) {\n\t\t\t\treturn this._dimensionsOverride.cols;\n\t\t\t}\n\t\t\treturn Math.min(Math.max(this._dimensionsOverride.cols, 2), this._cols);\n\t\t}\n\t\treturn this._cols;\n\t}\n\tget rows(): number {\n\t\tif (this._fixedRows !== undefined) {\n\t\t\treturn this._fixedRows;\n\t\t}\n\t\tif (this._dimensionsOverride && this._dimensionsOverride.rows) {\n\t\t\tif (this._dimensionsOverride.forceExactSize) {\n\t\t\t\treturn this._dimensionsOverride.rows;\n\t\t\t}\n\t\t\treturn Math.min(Math.max(this._dimensionsOverride.rows, 2), this._rows);\n\t\t}\n\t\treturn this._rows;\n\t}\n\tget isDisposed(): boolean { return this._store.isDisposed; }\n\tget fixedCols(): number | undefined { return this._fixedCols; }\n\tget fixedRows(): number | undefined { return this._fixedRows; }\n\tget maxCols(): number { return this._cols; }\n\tget maxRows(): number { return this._rows; }\n\t// TODO: Ideally processId would be merged into processReady\n\tget processId(): number | undefined { return this._processManager.shellProcessId; }\n\t// TODO: How does this work with detached processes?\n\t// TODO: Should this be an event as it can fire twice?\n\tget processReady(): Promise<void> { return this._processManager.ptyProcessReady; }\n\tget hasChildProcesses(): boolean { return this.shellLaunchConfig.attachPersistentProcess?.hasChildProcesses || this._processManager.hasChildProcesses; }\n\tget reconnectionProperties(): IReconnectionProperties | undefined { return this.shellLaunchConfig.attachPersistentProcess?.reconnectionProperties || this.shellLaunchConfig.reconnectionProperties; }\n\tget areLinksReady(): boolean { return this._areLinksReady; }\n\tget initialDataEvents(): string[] | undefined { return this._initialDataEvents; }\n\tget exitCode(): number | undefined { return this._exitCode; }\n\tget exitReason(): TerminalExitReason | undefined { return this._exitReason; }\n\tget hadFocusOnExit(): boolean { return this._hadFocusOnExit; }\n\tget isTitleSetByProcess(): boolean { return !!this._messageTitleDisposable.value; }\n\tget shellLaunchConfig(): IShellLaunchConfig { return this._shellLaunchConfig; }\n\tget shellType(): TerminalShellType | undefined { return this._shellType; }\n\tget os(): OperatingSystem | undefined { return this._processManager.os; }\n\tget isRemote(): boolean { return this._processManager.remoteAuthority !== undefined; }\n\tget remoteAuthority(): string | undefined { return this._processManager.remoteAuthority; }\n\tget hasFocus(): boolean { return dom.isAncestorOfActiveElement(this._wrapperElement); }\n\tget title(): string { return this._title; }\n\tget titleSource(): TitleEventSource { return this._titleSource; }\n\tget icon(): TerminalIcon | undefined { return this._getIcon(); }\n\tget color(): string | undefined { return this._getColor(); }\n\tget processName(): string { return this._processName; }\n\tget sequence(): string | undefined { return this._sequence; }\n\tget staticTitle(): string | undefined { return this._staticTitle; }\n\tget workspaceFolder(): IWorkspaceFolder | undefined { return this._workspaceFolder; }\n\tget cwd(): string | undefined { return this._cwd; }\n\tget initialCwd(): string | undefined { return this._initialCwd; }\n\tget description(): string | undefined {\n\t\tif (this._description) {\n\t\t\treturn this._description;\n\t\t}\n\t\tconst type = this.shellLaunchConfig.attachPersistentProcess?.type || this.shellLaunchConfig.type;\n\t\tswitch (type) {\n\t\t\tcase 'Task': return terminalStrings.typeTask;\n\t\t\tcase 'Local': return terminalStrings.typeLocal;\n\t\t\tdefault: return undefined;\n\t\t}\n\t}\n\tget userHome(): string | undefined { return this._userHome; }\n\tget shellIntegrationNonce(): string { return this._processManager.shellIntegrationNonce; }\n\tget injectedArgs(): string[] | undefined { return this._injectedArgs; }\n\n\t// The onExit event is special in that it fires and is disposed after the terminal instance\n\t// itself is disposed\n\tprivate readonly _onExit = new Emitter<number | ITerminalLaunchError | undefined>();\n\treadonly onExit = this._onExit.event;\n\tprivate readonly _onDisposed = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDisposed = this._onDisposed.event;\n\tprivate readonly _onProcessIdReady = this._register(new Emitter<ITerminalInstance>());\n\treadonly onProcessIdReady = this._onProcessIdReady.event;\n\tprivate readonly _onProcessReplayComplete = this._register(new Emitter<void>());\n\treadonly onProcessReplayComplete = this._onProcessReplayComplete.event;\n\tprivate readonly _onTitleChanged = this._register(new Emitter<ITerminalInstance>());\n\treadonly onTitleChanged = this._onTitleChanged.event;\n\tprivate readonly _onIconChanged = this._register(new Emitter<{ instance: ITerminalInstance; userInitiated: boolean }>());\n\treadonly onIconChanged = this._onIconChanged.event;\n\tprivate readonly _onWillData = this._register(new Emitter<string>());\n\treadonly onWillData = this._onWillData.event;\n\tprivate readonly _onData = this._register(new Emitter<string>());\n\treadonly onData = this._onData.event;\n\tprivate readonly _onBinary = this._register(new Emitter<string>());\n\treadonly onBinary = this._onBinary.event;\n\tprivate readonly _onLineData = this._register(new Emitter<string>({\n\t\tonDidAddFirstListener: () => this._onLineDataSetup()\n\t}));\n\treadonly onLineData = this._onLineData.event;\n\tprivate readonly _onRequestExtHostProcess = this._register(new Emitter<ITerminalInstance>());\n\treadonly onRequestExtHostProcess = this._onRequestExtHostProcess.event;\n\tprivate readonly _onDimensionsChanged = this._register(new Emitter<void>());\n\treadonly onDimensionsChanged = this._onDimensionsChanged.event;\n\tprivate readonly _onMaximumDimensionsChanged = this._register(new Emitter<void>());\n\treadonly onMaximumDimensionsChanged = this._onMaximumDimensionsChanged.event;\n\tprivate readonly _onDidFocus = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidFocus = this._onDidFocus.event;\n\tprivate readonly _onDidRequestFocus = this._register(new Emitter<void>());\n\treadonly onDidRequestFocus = this._onDidRequestFocus.event;\n\tprivate readonly _onDidBlur = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidBlur = this._onDidBlur.event;\n\tprivate readonly _onDidInputData = this._register(new Emitter<string>());\n\treadonly onDidInputData = this._onDidInputData.event;\n\tprivate readonly _onDidChangeSelection = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidChangeSelection = this._onDidChangeSelection.event;\n\tprivate readonly _onRequestAddInstanceToGroup = this._register(new Emitter<IRequestAddInstanceToGroupEvent>());\n\treadonly onRequestAddInstanceToGroup = this._onRequestAddInstanceToGroup.event;\n\tprivate readonly _onDidChangeHasChildProcesses = this._register(new Emitter<boolean>());\n\treadonly onDidChangeHasChildProcesses = this._onDidChangeHasChildProcesses.event;\n\tprivate readonly _onDidExecuteText = this._register(new Emitter<void>());\n\treadonly onDidExecuteText = this._onDidExecuteText.event;\n\tprivate readonly _onDidChangeTarget = this._register(new Emitter<TerminalLocation | undefined>());\n\treadonly onDidChangeTarget = this._onDidChangeTarget.event;\n\tprivate readonly _onDidSendText = this._register(new Emitter<string>());\n\treadonly onDidSendText = this._onDidSendText.event;\n\tprivate readonly _onDidChangeShellType = this._register(new Emitter<TerminalShellType>());\n\treadonly onDidChangeShellType = this._onDidChangeShellType.event;\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate readonly _onWillPaste = this._register(new Emitter<string>());\n\treadonly onWillPaste = this._onWillPaste.event;\n\tprivate readonly _onDidPaste = this._register(new Emitter<string>());\n\treadonly onDidPaste = this._onDidPaste.event;\n\n\tconstructor(\n\t\tprivate readonly _terminalShellTypeContextKey: IContextKey<string>,\n\t\tprivate readonly _terminalInRunCommandPicker: IContextKey<boolean>,\n\t\tprivate _shellLaunchConfig: IShellLaunchConfig,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IContextMenuService private readonly _contextMenuService: IContextMenuService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IPreferencesService private readonly _preferencesService: IPreferencesService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IWorkbenchEnvironmentService workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IWorkspaceTrustRequestService private readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IAccessibilitySignalService private readonly _accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IViewDescriptorService private readonly _viewDescriptorService: IViewDescriptorService,\n\t) {\n\t\tsuper();\n\n\t\tthis._wrapperElement = document.createElement('div');\n\t\tthis._wrapperElement.classList.add('terminal-wrapper');\n\n\t\tthis._widgetManager = this._register(instantiationService.createInstance(TerminalWidgetManager));\n\n\t\tthis._skipTerminalCommands = [];\n\t\tthis._isExiting = false;\n\t\tthis._hadFocusOnExit = false;\n\t\tthis._isVisible = false;\n\t\tthis._instanceId = TerminalInstance._instanceIdCounter++;\n\t\tthis._hasHadInput = false;\n\t\tthis._fixedRows = _shellLaunchConfig.attachPersistentProcess?.fixedDimensions?.rows;\n\t\tthis._fixedCols = _shellLaunchConfig.attachPersistentProcess?.fixedDimensions?.cols;\n\n\t\tthis._resource = getTerminalUri(this._workspaceContextService.getWorkspace().id, this.instanceId, this.title);\n\n\t\tif (this._shellLaunchConfig.attachPersistentProcess?.hideFromUser) {\n\t\t\tthis._shellLaunchConfig.hideFromUser = this._shellLaunchConfig.attachPersistentProcess.hideFromUser;\n\t\t}\n\n\t\tif (this._shellLaunchConfig.attachPersistentProcess?.isFeatureTerminal) {\n\t\t\tthis._shellLaunchConfig.isFeatureTerminal = this._shellLaunchConfig.attachPersistentProcess.isFeatureTerminal;\n\t\t}\n\n\t\tif (this._shellLaunchConfig.attachPersistentProcess?.type) {\n\t\t\tthis._shellLaunchConfig.type = this._shellLaunchConfig.attachPersistentProcess.type;\n\t\t}\n\n\t\tif (this.shellLaunchConfig.cwd) {\n\t\t\tconst cwdUri = typeof this._shellLaunchConfig.cwd === 'string' ? URI.from({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t\tpath: this._shellLaunchConfig.cwd\n\t\t\t}) : this._shellLaunchConfig.cwd;\n\t\t\tif (cwdUri) {\n\t\t\t\tthis._workspaceFolder = this._workspaceContextService.getWorkspaceFolder(cwdUri) ?? undefined;\n\t\t\t}\n\t\t}\n\t\tif (!this._workspaceFolder) {\n\t\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot();\n\t\t\tthis._workspaceFolder = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\t}\n\n\t\tconst scopedContextKeyService = this._register(_contextKeyService.createScoped(this._wrapperElement));\n\t\tthis._scopedContextKeyService = scopedContextKeyService;\n\t\tthis._scopedInstantiationService = this._register(instantiationService.createChild(new ServiceCollection(\n\t\t\t[IContextKeyService, scopedContextKeyService]\n\t\t)));\n\n\t\tthis._terminalFocusContextKey = TerminalContextKeys.focus.bindTo(scopedContextKeyService);\n\t\tthis._terminalHasFixedWidth = TerminalContextKeys.terminalHasFixedWidth.bindTo(scopedContextKeyService);\n\t\tthis._terminalHasTextContextKey = TerminalContextKeys.textSelected.bindTo(scopedContextKeyService);\n\t\tthis._terminalAltBufferActiveContextKey = TerminalContextKeys.altBufferActive.bindTo(scopedContextKeyService);\n\t\tthis._terminalShellIntegrationEnabledContextKey = TerminalContextKeys.terminalShellIntegrationEnabled.bindTo(scopedContextKeyService);\n\n\t\tthis._logService.trace(`terminalInstance#ctor (instanceId: ${this.instanceId})`, this._shellLaunchConfig);\n\t\tthis._register(this.capabilities.onDidAddCapabilityType(e => {\n\t\t\tthis._logService.debug('terminalInstance added capability', e);\n\t\t\tif (e === TerminalCapability.CwdDetection) {\n\t\t\t\tthis.capabilities.get(TerminalCapability.CwdDetection)?.onDidChangeCwd(e => {\n\t\t\t\t\tthis._cwd = e;\n\t\t\t\t\tthis._setTitle(this.title, TitleEventSource.Config);\n\t\t\t\t\tthis._scopedInstantiationService.invokeFunction(getDirectoryHistory)?.add(e, { remoteAuthority: this.remoteAuthority });\n\t\t\t\t});\n\t\t\t} else if (e === TerminalCapability.CommandDetection) {\n\t\t\t\tconst commandCapability = this.capabilities.get(TerminalCapability.CommandDetection);\n\t\t\t\tcommandCapability?.onCommandFinished(e => {\n\t\t\t\t\tif (e.command.trim().length > 0) {\n\t\t\t\t\t\tthis._scopedInstantiationService.invokeFunction(getCommandHistory)?.add(e.command, { shellType: this._shellType });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.capabilities.onDidRemoveCapabilityType(e => this._logService.debug('terminalInstance removed capability', e)));\n\n\t\t// Resolve just the icon ahead of time so that it shows up immediately in the tabs. This is\n\t\t// disabled in remote because this needs to be sync and the OS may differ on the remote\n\t\t// which would result in the wrong profile being selected and the wrong icon being\n\t\t// permanently attached to the terminal. This also doesn't work when the default profile\n\t\t// setting is set to null, that's handled after the process is created.\n\t\tif (!this.shellLaunchConfig.executable && !workbenchEnvironmentService.remoteAuthority) {\n\t\t\tthis._terminalProfileResolverService.resolveIcon(this._shellLaunchConfig, OS);\n\t\t}\n\t\tthis._icon = _shellLaunchConfig.attachPersistentProcess?.icon || _shellLaunchConfig.icon;\n\n\t\t// When a custom pty is used set the name immediately so it gets passed over to the exthost\n\t\t// and is available when Pseudoterminal.open fires.\n\t\tif (this.shellLaunchConfig.customPtyImplementation) {\n\t\t\tthis._setTitle(this._shellLaunchConfig.name, TitleEventSource.Api);\n\t\t}\n\n\t\tthis.statusList = this._register(this._scopedInstantiationService.createInstance(TerminalStatusList));\n\t\tthis._initDimensions();\n\t\tthis._processManager = this._createProcessManager();\n\n\t\tthis._containerReadyBarrier = new AutoOpenBarrier(Constants.WaitForContainerThreshold);\n\t\tthis._attachBarrier = new AutoOpenBarrier(1000);\n\t\tthis._xtermReadyPromise = this._createXterm();\n\t\tthis._xtermReadyPromise.then(async () => {\n\t\t\t// Wait for a period to allow a container to be ready\n\t\t\tawait this._containerReadyBarrier.wait();\n\n\t\t\t// Resolve the executable ahead of time if shell integration is enabled, this should not\n\t\t\t// be done for custom PTYs as that would cause extension Pseudoterminal-based terminals\n\t\t\t// to hang in resolver extensions\n\t\t\tif (!this.shellLaunchConfig.customPtyImplementation && this._terminalConfigurationService.config.shellIntegration?.enabled && !this.shellLaunchConfig.executable) {\n\t\t\t\tconst os = await this._processManager.getBackendOS();\n\t\t\t\tconst defaultProfile = (await this._terminalProfileResolverService.getDefaultProfile({ remoteAuthority: this.remoteAuthority, os }));\n\t\t\t\tthis.shellLaunchConfig.executable = defaultProfile.path;\n\t\t\t\tthis.shellLaunchConfig.args = defaultProfile.args;\n\t\t\t\tif (this.shellLaunchConfig.isExtensionOwnedTerminal) {\n\t\t\t\t\t// Only use default icon and color and env if they are undefined in the SLC\n\t\t\t\t\tthis.shellLaunchConfig.icon ??= defaultProfile.icon;\n\t\t\t\t\tthis.shellLaunchConfig.color ??= defaultProfile.color;\n\t\t\t\t\tthis.shellLaunchConfig.env ??= defaultProfile.env;\n\t\t\t\t} else {\n\t\t\t\t\tthis.shellLaunchConfig.icon = defaultProfile.icon;\n\t\t\t\t\tthis.shellLaunchConfig.color = defaultProfile.color;\n\t\t\t\t\tthis.shellLaunchConfig.env = defaultProfile.env;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this._createProcess();\n\n\t\t\t// Re-establish the title after reconnect\n\t\t\tif (this.shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\tthis._cwd = this.shellLaunchConfig.attachPersistentProcess.cwd;\n\t\t\t\tthis._setTitle(this.shellLaunchConfig.attachPersistentProcess.title, this.shellLaunchConfig.attachPersistentProcess.titleSource);\n\t\t\t\tthis.setShellType(this.shellType);\n\t\t\t}\n\n\t\t\tif (this._fixedCols) {\n\t\t\t\tawait this._addScrollbar();\n\t\t\t}\n\t\t}).catch((err) => {\n\t\t\t// Ignore exceptions if the terminal is already disposed\n\t\t\tif (!this.isDisposed) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(AccessibilityVerbositySettingId.Terminal)) {\n\t\t\t\tthis._setAriaLabel(this.xterm?.raw, this._instanceId, this.title);\n\t\t\t}\n\t\t\tif (e.affectsConfiguration('terminal.integrated')) {\n\t\t\t\tthis.updateConfig();\n\t\t\t\tthis.setVisible(this._isVisible);\n\t\t\t}\n\t\t\tconst layoutSettings: string[] = [\n\t\t\t\tTerminalSettingId.FontSize,\n\t\t\t\tTerminalSettingId.FontFamily,\n\t\t\t\tTerminalSettingId.FontWeight,\n\t\t\t\tTerminalSettingId.FontWeightBold,\n\t\t\t\tTerminalSettingId.LetterSpacing,\n\t\t\t\tTerminalSettingId.LineHeight,\n\t\t\t\t'editor.fontFamily'\n\t\t\t];\n\t\t\tif (layoutSettings.some(id => e.affectsConfiguration(id))) {\n\t\t\t\tthis._layoutSettingsChanged = true;\n\t\t\t\tawait this._resize();\n\t\t\t}\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.UnicodeVersion)) {\n\t\t\t\tthis._updateUnicodeVersion();\n\t\t\t}\n\t\t\tif (e.affectsConfiguration('editor.accessibilitySupport')) {\n\t\t\t\tthis.updateAccessibilitySupport();\n\t\t\t}\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(TerminalSettingId.TerminalTitle) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.TerminalTitleSeparator) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.TerminalDescription)) {\n\t\t\t\tthis._labelComputer?.refreshLabel(this);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._workspaceContextService.onDidChangeWorkspaceFolders(() => this._labelComputer?.refreshLabel(this)));\n\n\t\t// Clear out initial data events after 10 seconds, hopefully extension hosts are up and\n\t\t// running at that point.\n\t\tlet initialDataEventsTimeout: number | undefined = dom.getWindow(this._container).setTimeout(() => {\n\t\t\tinitialDataEventsTimeout = undefined;\n\t\t\tthis._initialDataEvents = undefined;\n\t\t\tthis._initialDataEventsListener.clear();\n\t\t}, 10000);\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (initialDataEventsTimeout) {\n\t\t\t\tdom.getWindow(this._container).clearTimeout(initialDataEventsTimeout);\n\t\t\t}\n\t\t}));\n\n\t\t// Initialize contributions\n\t\tconst contributionDescs = TerminalExtensionsRegistry.getTerminalContributions();\n\t\tfor (const desc of contributionDescs) {\n\t\t\tif (this._contributions.has(desc.id)) {\n\t\t\t\tonUnexpectedError(new Error(`Cannot have two terminal contributions with the same id ${desc.id}`));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet contribution: ITerminalContribution;\n\t\t\ttry {\n\t\t\t\tcontribution = this._register(this._scopedInstantiationService.createInstance(desc.ctor, this, this._processManager, this._widgetManager));\n\t\t\t\tthis._contributions.set(desc.id, contribution);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t\tthis._xtermReadyPromise.then(xterm => {\n\t\t\t\tcontribution.xtermReady?.(xterm);\n\t\t\t});\n\t\t\tthis._register(this.onDisposed(() => {\n\t\t\t\tcontribution.dispose();\n\t\t\t\tthis._contributions.delete(desc.id);\n\t\t\t\t// Just in case to prevent potential future memory leaks due to cyclic dependency.\n\t\t\t\tif ('instance' in contribution) {\n\t\t\t\t\tdelete contribution.instance;\n\t\t\t\t}\n\t\t\t\tif ('_instance' in contribution) {\n\t\t\t\t\tdelete contribution._instance;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic getContribution<T extends ITerminalContribution>(id: string): T | null {\n\t\treturn this._contributions.get(id) as T | null;\n\t}\n\n\tprivate _getIcon(): TerminalIcon | undefined {\n\t\tif (!this._icon) {\n\t\t\tthis._icon = this._processManager.processState >= ProcessState.Launching\n\t\t\t\t? getIconRegistry().getIcon(this._configurationService.getValue(TerminalSettingId.TabsDefaultIcon))\n\t\t\t\t: undefined;\n\t\t}\n\t\treturn this._icon;\n\t}\n\n\tprivate _getColor(): string | undefined {\n\t\tif (this.shellLaunchConfig.color) {\n\t\t\treturn this.shellLaunchConfig.color;\n\t\t}\n\t\tif (this.shellLaunchConfig?.attachPersistentProcess?.color) {\n\t\t\treturn this.shellLaunchConfig.attachPersistentProcess.color;\n\t\t}\n\t\tif (this._processManager.processState >= ProcessState.Launching) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _initDimensions(): void {\n\t\t// The terminal panel needs to have been created to get the real view dimensions\n\t\tif (!this._container) {\n\t\t\t// Set the fallback dimensions if not\n\t\t\tthis._cols = Constants.DefaultCols;\n\t\t\tthis._rows = Constants.DefaultRows;\n\t\t\treturn;\n\t\t}\n\n\t\tconst computedStyle = dom.getWindow(this._container).getComputedStyle(this._container);\n\t\tconst width = parseInt(computedStyle.width);\n\t\tconst height = parseInt(computedStyle.height);\n\n\t\tthis._evaluateColsAndRows(width, height);\n\t}\n\n\t/**\n\t * Evaluates and sets the cols and rows of the terminal if possible.\n\t * @param width The width of the container.\n\t * @param height The height of the container.\n\t * @return The terminal's width if it requires a layout.\n\t */\n\tprivate _evaluateColsAndRows(width: number, height: number): number | null {\n\t\t// Ignore if dimensions are undefined or 0\n\t\tif (!width || !height) {\n\t\t\tthis._setLastKnownColsAndRows();\n\t\t\treturn null;\n\t\t}\n\n\t\tconst dimension = this._getDimension(width, height);\n\t\tif (!dimension) {\n\t\t\tthis._setLastKnownColsAndRows();\n\t\t\treturn null;\n\t\t}\n\n\t\tconst font = this.xterm ? this.xterm.getFont() : this._terminalConfigurationService.getFont(dom.getWindow(this.domElement));\n\t\tconst newRC = getXtermScaledDimensions(dom.getWindow(this.domElement), font, dimension.width, dimension.height);\n\t\tif (!newRC) {\n\t\t\tthis._setLastKnownColsAndRows();\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this._cols !== newRC.cols || this._rows !== newRC.rows) {\n\t\t\tthis._cols = newRC.cols;\n\t\t\tthis._rows = newRC.rows;\n\t\t\tthis._fireMaximumDimensionsChanged();\n\t\t}\n\n\t\treturn dimension.width;\n\t}\n\n\tprivate _setLastKnownColsAndRows(): void {\n\t\tif (TerminalInstance._lastKnownGridDimensions) {\n\t\t\tthis._cols = TerminalInstance._lastKnownGridDimensions.cols;\n\t\t\tthis._rows = TerminalInstance._lastKnownGridDimensions.rows;\n\t\t}\n\t}\n\n\t@debounce(50)\n\tprivate _fireMaximumDimensionsChanged(): void {\n\t\tthis._onMaximumDimensionsChanged.fire();\n\t}\n\n\tprivate _getDimension(width: number, height: number): ICanvasDimensions | undefined {\n\t\t// The font needs to have been initialized\n\t\tconst font = this.xterm ? this.xterm.getFont() : this._terminalConfigurationService.getFont(dom.getWindow(this.domElement));\n\t\tif (!font || !font.charWidth || !font.charHeight) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.xterm?.raw.element) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst computedStyle = dom.getWindow(this.xterm.raw.element).getComputedStyle(this.xterm.raw.element);\n\t\tconst horizontalPadding = parseInt(computedStyle.paddingLeft) + parseInt(computedStyle.paddingRight) + 14/*scroll bar padding*/;\n\t\tconst verticalPadding = parseInt(computedStyle.paddingTop) + parseInt(computedStyle.paddingBottom);\n\t\tTerminalInstance._lastKnownCanvasDimensions = new dom.Dimension(\n\t\t\tMath.min(Constants.MaxCanvasWidth, width - horizontalPadding),\n\t\t\theight - verticalPadding + (this._hasScrollBar && this._horizontalScrollbar ? -5/* scroll bar height */ : 0));\n\t\treturn TerminalInstance._lastKnownCanvasDimensions;\n\t}\n\n\tget persistentProcessId(): number | undefined { return this._processManager.persistentProcessId; }\n\tget shouldPersist(): boolean { return this._processManager.shouldPersist && !this.shellLaunchConfig.isTransient && (!this.reconnectionProperties || this._configurationService.getValue('task.reconnection') === true); }\n\n\tpublic static getXtermConstructor(keybindingService: IKeybindingService, contextKeyService: IContextKeyService) {\n\t\tconst keybinding = keybindingService.lookupKeybinding(TerminalAccessibilityCommandId.FocusAccessibleBuffer, contextKeyService);\n\t\tif (xtermConstructor) {\n\t\t\treturn xtermConstructor;\n\t\t}\n\t\txtermConstructor = Promises.withAsyncBody<typeof XTermTerminal>(async (resolve) => {\n\t\t\tconst Terminal = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\t\t\t// Localize strings\n\t\t\tTerminal.strings.promptLabel = nls.localize('terminal.integrated.a11yPromptLabel', 'Terminal input');\n\t\t\tTerminal.strings.tooMuchOutput = keybinding ? nls.localize('terminal.integrated.useAccessibleBuffer', 'Use the accessible buffer {0} to manually review output', keybinding.getLabel()) : nls.localize('terminal.integrated.useAccessibleBufferNoKb', 'Use the Terminal: Focus Accessible Buffer command to manually review output');\n\t\t\tresolve(Terminal);\n\t\t});\n\t\treturn xtermConstructor;\n\t}\n\n\t/**\n\t * Create xterm.js instance and attach data listeners.\n\t */\n\tprotected async _createXterm(): Promise<XtermTerminal> {\n\t\tconst Terminal = await TerminalInstance.getXtermConstructor(this._keybindingService, this._contextKeyService);\n\t\tif (this.isDisposed) {\n\t\t\tthrow new ErrorNoTelemetry('Terminal disposed of during xterm.js creation');\n\t\t}\n\n\t\tconst disableShellIntegrationReporting = (this.shellLaunchConfig.executable === undefined || this.shellType === undefined) || !shellIntegrationSupportedShellTypes.includes(this.shellType);\n\t\tconst xterm = this._scopedInstantiationService.createInstance(\n\t\t\tXtermTerminal,\n\t\t\tTerminal,\n\t\t\tthis._cols,\n\t\t\tthis._rows,\n\t\t\tthis._scopedInstantiationService.createInstance(TerminalInstanceColorProvider, this),\n\t\t\tthis.capabilities,\n\t\t\tthis._processManager.shellIntegrationNonce,\n\t\t\tdisableShellIntegrationReporting\n\t\t);\n\t\tthis.xterm = xterm;\n\t\tthis._resizeDebouncer = this._register(new TerminalResizeDebouncer(\n\t\t\t() => this._isVisible,\n\t\t\t() => xterm,\n\t\t\tasync (cols, rows) => {\n\t\t\t\txterm.raw.resize(cols, rows);\n\t\t\t\tawait this._updatePtyDimensions(xterm.raw);\n\t\t\t},\n\t\t\tasync (cols) => {\n\t\t\t\txterm.raw.resize(cols, xterm.raw.rows);\n\t\t\t\tawait this._updatePtyDimensions(xterm.raw);\n\t\t\t},\n\t\t\tasync (rows) => {\n\t\t\t\txterm.raw.resize(xterm.raw.cols, rows);\n\t\t\t\tawait this._updatePtyDimensions(xterm.raw);\n\t\t\t}\n\t\t));\n\t\tthis.updateAccessibilitySupport();\n\t\tthis._register(this.xterm.onDidRequestRunCommand(e => {\n\t\t\tif (e.copyAsHtml) {\n\t\t\t\tthis.copySelection(true, e.command);\n\t\t\t} else {\n\t\t\t\tthis.sendText(e.command.command, e.noNewLine ? false : true);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.xterm.onDidRequestFocus(() => this.focus()));\n\t\tthis._register(this.xterm.onDidRequestSendText(e => this.sendText(e, false)));\n\t\t// Write initial text, deferring onLineFeed listener when applicable to avoid firing\n\t\t// onLineData events containing initialText\n\t\tconst initialTextWrittenPromise = this._shellLaunchConfig.initialText ? new Promise<void>(r => this._writeInitialText(xterm, r)) : undefined;\n\t\tconst lineDataEventAddon = this._register(new LineDataEventAddon(initialTextWrittenPromise));\n\t\tthis._register(lineDataEventAddon.onLineData(e => this._onLineData.fire(e)));\n\t\tthis._lineDataEventAddon = lineDataEventAddon;\n\t\t// Delay the creation of the bell listener to avoid showing the bell when the terminal\n\t\t// starts up or reconnects\n\t\tdisposableTimeout(() => {\n\t\t\tthis._register(xterm.raw.onBell(() => {\n\t\t\t\tif (this._configurationService.getValue(TerminalSettingId.EnableBell) || this._configurationService.getValue(TerminalSettingId.EnableVisualBell)) {\n\t\t\t\t\tthis.statusList.add({\n\t\t\t\t\t\tid: TerminalStatus.Bell,\n\t\t\t\t\t\tseverity: Severity.Warning,\n\t\t\t\t\t\ticon: Codicon.bell,\n\t\t\t\t\t\ttooltip: nls.localize('bellStatus', \"Bell\")\n\t\t\t\t\t}, this._terminalConfigurationService.config.bellDuration);\n\t\t\t\t}\n\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.terminalBell);\n\t\t\t}));\n\t\t}, 1000, this._store);\n\t\tthis._register(xterm.raw.onSelectionChange(async () => this._onSelectionChange()));\n\t\tthis._register(xterm.raw.buffer.onBufferChange(() => this._refreshAltBufferContextKey()));\n\n\t\tthis._register(this._processManager.onProcessData(e => this._onProcessData(e)));\n\t\tthis._register(xterm.raw.onData(async data => {\n\t\t\tawait this._pauseInputEventBarrier?.wait();\n\t\t\tawait this._processManager.write(data);\n\t\t\tthis._onDidInputData.fire(data);\n\t\t}));\n\t\tthis._register(xterm.raw.onBinary(data => this._processManager.processBinary(data)));\n\t\t// Init winpty compat and link handler after process creation as they rely on the\n\t\t// underlying process OS\n\t\tthis._register(this._processManager.onProcessReady(async (processTraits) => {\n\t\t\tif (this._processManager.os) {\n\t\t\t\tlineDataEventAddon.setOperatingSystem(this._processManager.os);\n\t\t\t}\n\t\t\txterm.raw.options.windowsPty = processTraits.windowsPty;\n\t\t}));\n\t\tthis._register(this._processManager.onRestoreCommands(e => this.xterm?.shellIntegration.deserialize(e)));\n\n\t\tthis._register(this._viewDescriptorService.onDidChangeLocation(({ views }) => {\n\t\t\tif (views.some(v => v.id === TERMINAL_VIEW_ID)) {\n\t\t\t\txterm.refresh();\n\t\t\t}\n\t\t}));\n\n\t\t// Set up updating of the process cwd on key press, this is only needed when the cwd\n\t\t// detection capability has not been registered\n\t\tif (!this.capabilities.has(TerminalCapability.CwdDetection)) {\n\t\t\tlet onKeyListener: IDisposable | undefined = xterm.raw.onKey(e => {\n\t\t\t\tconst event = new StandardKeyboardEvent(e.domEvent);\n\t\t\t\tif (event.equals(KeyCode.Enter)) {\n\t\t\t\t\tthis._updateProcessCwd();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._register(this.capabilities.onDidAddCapabilityType(e => {\n\t\t\t\tif (e === TerminalCapability.CwdDetection) {\n\t\t\t\t\tonKeyListener?.dispose();\n\t\t\t\t\tonKeyListener = undefined;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis._pathService.userHome().then(userHome => {\n\t\t\tthis._userHome = userHome.fsPath;\n\t\t});\n\n\t\tif (this._isVisible) {\n\t\t\tthis._open();\n\t\t}\n\n\t\treturn xterm;\n\t}\n\n\tprivate async _onLineDataSetup(): Promise<void> {\n\t\tconst xterm = this.xterm || await this._xtermReadyPromise;\n\t\txterm.raw.loadAddon(this._lineDataEventAddon!);\n\t}\n\n\tasync runCommand(commandLine: string, shouldExecute: boolean): Promise<void> {\n\t\tlet commandDetection = this.capabilities.get(TerminalCapability.CommandDetection);\n\n\t\t// Await command detection if the terminal is starting up\n\t\tif (!commandDetection && (this._processManager.processState === ProcessState.Uninitialized || this._processManager.processState === ProcessState.Launching)) {\n\t\t\tconst store = new DisposableStore();\n\t\t\tawait Promise.race([\n\t\t\t\tnew Promise<void>(r => {\n\t\t\t\t\tstore.add(this.capabilities.onDidAddCapabilityType(e => {\n\t\t\t\t\t\tif (e === TerminalCapability.CommandDetection) {\n\t\t\t\t\t\t\tcommandDetection = this.capabilities.get(TerminalCapability.CommandDetection);\n\t\t\t\t\t\t\tr();\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}),\n\t\t\t\ttimeout(2000),\n\t\t\t]);\n\t\t\tstore.dispose();\n\t\t}\n\n\t\t// Determine whether to send ETX (ctrl+c) before running the command. This should always\n\t\t// happen unless command detection can reliably say that a command is being entered and\n\t\t// there is no content in the prompt\n\t\tif (!commandDetection || commandDetection.promptInputModel.value.length > 0) {\n\t\t\tawait this.sendText('\\x03', false);\n\t\t\t// Wait a little before running the command to avoid the sequences being echoed while the ^C\n\t\t\t// is being evaluated\n\t\t\tawait timeout(100);\n\t\t}\n\t\t// Use bracketed paste mode only when not running the command\n\t\tawait this.sendText(commandLine, shouldExecute, !shouldExecute);\n\t}\n\n\tasync runRecent(type: 'command' | 'cwd', filterMode?: 'fuzzy' | 'contiguous', value?: string): Promise<void> {\n\t\treturn this._scopedInstantiationService.invokeFunction(\n\t\t\tshowRunRecentQuickPick, this, this._terminalInRunCommandPicker, type, filterMode, value\n\t\t);\n\t}\n\n\tdetachFromElement(): void {\n\t\tthis._wrapperElement.remove();\n\t\tthis._container = undefined;\n\t}\n\n\tattachToElement(container: HTMLElement): void {\n\t\t// The container did not change, do nothing\n\t\tif (this._container === container) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._attachBarrier.isOpen()) {\n\t\t\tthis._attachBarrier.open();\n\t\t}\n\n\t\t// The container changed, reattach\n\t\tthis._container = container;\n\t\tthis._container.appendChild(this._wrapperElement);\n\n\t\t// If xterm is already attached, call open again to pick up any changes to the window.\n\t\tif (this.xterm?.raw.element) {\n\t\t\tthis.xterm.raw.open(this.xterm.raw.element);\n\t\t}\n\n\t\tthis.xterm?.refresh();\n\n\t\tsetTimeout(() => this._initDragAndDrop(container));\n\t}\n\n\t/**\n\t * Opens the the terminal instance inside the parent DOM element previously set with\n\t * `attachToElement`, you must ensure the parent DOM element is explicitly visible before\n\t * invoking this function as it performs some DOM calculations internally\n\t */\n\tprivate _open(): void {\n\t\tif (!this.xterm || this.xterm.raw.element) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._container || !this._container.isConnected) {\n\t\t\tthrow new Error('A container element needs to be set with `attachToElement` and be part of the DOM before calling `_open`');\n\t\t}\n\n\t\tconst xtermElement = document.createElement('div');\n\t\tthis._wrapperElement.appendChild(xtermElement);\n\n\t\tthis._container.appendChild(this._wrapperElement);\n\n\t\tconst xterm = this.xterm;\n\n\t\t// Attach the xterm object to the DOM, exposing it to the smoke tests\n\t\tthis._wrapperElement.xterm = xterm.raw;\n\n\t\tconst screenElement = xterm.attachToElement(xtermElement);\n\n\t\t// Fire xtermOpen on all contributions\n\t\tfor (const contribution of this._contributions.values()) {\n\t\t\tif (!this.xterm) {\n\t\t\t\tthis._xtermReadyPromise.then(xterm => contribution.xtermOpen?.(xterm));\n\t\t\t} else {\n\t\t\t\tcontribution.xtermOpen?.(this.xterm);\n\t\t\t}\n\t\t}\n\n\t\tthis._register(xterm.shellIntegration.onDidChangeStatus(() => {\n\t\t\tif (this.hasFocus) {\n\t\t\t\tthis._setShellIntegrationContextKey();\n\t\t\t} else {\n\t\t\t\tthis._terminalShellIntegrationEnabledContextKey.reset();\n\t\t\t}\n\t\t}));\n\n\t\tif (!xterm.raw.element || !xterm.raw.textarea) {\n\t\t\tthrow new Error('xterm elements not set after open');\n\t\t}\n\n\t\tthis._setAriaLabel(xterm.raw, this._instanceId, this._title);\n\n\t\txterm.raw.attachCustomKeyEventHandler((event: KeyboardEvent): boolean => {\n\t\t\t// Disable all input if the terminal is exiting\n\t\t\tif (this._isExiting) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(event);\n\t\t\tconst resolveResult = this._keybindingService.softDispatch(standardKeyboardEvent, standardKeyboardEvent.target);\n\n\t\t\t// Respect chords if the allowChords setting is set and it's not Escape. Escape is\n\t\t\t// handled specially for Zen Mode's Escape, Escape chord, plus it's important in\n\t\t\t// terminals generally\n\t\t\tconst isValidChord = resolveResult.kind === ResultKind.MoreChordsNeeded && this._terminalConfigurationService.config.allowChords && event.key !== 'Escape';\n\t\t\tif (this._keybindingService.inChordMode || isValidChord) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst SHOW_TERMINAL_CONFIG_PROMPT_KEY = 'terminal.integrated.showTerminalConfigPrompt';\n\t\t\tconst EXCLUDED_KEYS = ['RightArrow', 'LeftArrow', 'UpArrow', 'DownArrow', 'Space', 'Meta', 'Control', 'Shift', 'Alt', '', 'Delete', 'Backspace', 'Tab'];\n\n\t\t\t// only keep track of input if prompt hasn't already been shown\n\t\t\tif (this._storageService.getBoolean(SHOW_TERMINAL_CONFIG_PROMPT_KEY, StorageScope.APPLICATION, true) &&\n\t\t\t\t!EXCLUDED_KEYS.includes(event.key) &&\n\t\t\t\t!event.ctrlKey &&\n\t\t\t\t!event.shiftKey &&\n\t\t\t\t!event.altKey) {\n\t\t\t\tthis._hasHadInput = true;\n\t\t\t}\n\n\t\t\t// for keyboard events that resolve to commands described\n\t\t\t// within commandsToSkipShell, either alert or skip processing by xterm.js\n\t\t\tif (resolveResult.kind === ResultKind.KbFound && resolveResult.commandId && this._skipTerminalCommands.some(k => k === resolveResult.commandId) && !this._terminalConfigurationService.config.sendKeybindingsToShell) {\n\t\t\t\t// don't alert when terminal is opened or closed\n\t\t\t\tif (this._storageService.getBoolean(SHOW_TERMINAL_CONFIG_PROMPT_KEY, StorageScope.APPLICATION, true) &&\n\t\t\t\t\tthis._hasHadInput &&\n\t\t\t\t\t!TERMINAL_CREATION_COMMANDS.includes(resolveResult.commandId)) {\n\t\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\tnls.localize('keybindingHandling', \"Some keybindings don't go to the terminal by default and are handled by {0} instead.\", this._productService.nameLong),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: nls.localize('configureTerminalSettings', \"Configure Terminal Settings\"),\n\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\tthis._preferencesService.openSettings({ jsonEditor: false, query: `@id:${TerminalSettingId.CommandsToSkipShell},${TerminalSettingId.SendKeybindingsToShell},${TerminalSettingId.AllowChords}` });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} satisfies IPromptChoice\n\t\t\t\t\t\t]\n\t\t\t\t\t);\n\t\t\t\t\tthis._storageService.store(SHOW_TERMINAL_CONFIG_PROMPT_KEY, false, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Skip processing by xterm.js of keyboard events that match menu bar mnemonics\n\t\t\tif (this._terminalConfigurationService.config.allowMnemonics && !isMacintosh && event.altKey) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If tab focus mode is on, tab is not passed to the terminal\n\t\t\tif (TabFocus.getTabFocusMode() && event.key === 'Tab') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Prevent default when shift+tab is being sent to the terminal to avoid it bubbling up\n\t\t\t// and changing focus https://github.com/microsoft/vscode/issues/188329\n\t\t\tif (event.key === 'Tab' && event.shiftKey) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Always have alt+F4 skip the terminal on Windows and allow it to be handled by the\n\t\t\t// system\n\t\t\tif (isWindows && event.altKey && event.key === 'F4' && !event.ctrlKey) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Fallback to force ctrl+v to paste on browsers that do not support\n\t\t\t// navigator.clipboard.readText\n\t\t\tif (!BrowserFeatures.clipboard.readText && event.key === 'v' && event.ctrlKey) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t\tthis._register(dom.addDisposableListener(xterm.raw.element, 'mousedown', () => {\n\t\t\t// We need to listen to the mouseup event on the document since the user may release\n\t\t\t// the mouse button anywhere outside of _xterm.element.\n\t\t\tconst listener = dom.addDisposableListener(xterm.raw.element!.ownerDocument, 'mouseup', () => {\n\t\t\t\t// Delay with a setTimeout to allow the mouseup to propagate through the DOM\n\t\t\t\t// before evaluating the new selection state.\n\t\t\t\tsetTimeout(() => this._refreshSelectionContextKey(), 0);\n\t\t\t\tlistener.dispose();\n\t\t\t});\n\t\t}));\n\t\tthis._register(dom.addDisposableListener(xterm.raw.element, 'touchstart', () => {\n\t\t\txterm.raw.focus();\n\t\t}));\n\n\t\t// xterm.js currently drops selection on keyup as we need to handle this case.\n\t\tthis._register(dom.addDisposableListener(xterm.raw.element, 'keyup', () => {\n\t\t\t// Wait until keyup has propagated through the DOM before evaluating\n\t\t\t// the new selection state.\n\t\t\tsetTimeout(() => this._refreshSelectionContextKey(), 0);\n\t\t}));\n\n\t\tthis._register(dom.addDisposableListener(xterm.raw.textarea, 'focus', () => this._setFocus(true)));\n\t\tthis._register(dom.addDisposableListener(xterm.raw.textarea, 'blur', () => this._setFocus(false)));\n\t\tthis._register(dom.addDisposableListener(xterm.raw.textarea, 'focusout', () => this._setFocus(false)));\n\n\t\tthis._initDragAndDrop(this._container);\n\n\t\tthis._widgetManager.attachToElement(screenElement);\n\n\t\tif (this._lastLayoutDimensions) {\n\t\t\tthis.layout(this._lastLayoutDimensions);\n\t\t}\n\t\tthis.updateConfig();\n\n\t\t// If IShellLaunchConfig.waitOnExit was true and the process finished before the terminal\n\t\t// panel was initialized.\n\t\tif (xterm.raw.options.disableStdin) {\n\t\t\tthis._attachPressAnyKeyToCloseListener(xterm.raw);\n\t\t}\n\t}\n\n\tprivate _setFocus(focused?: boolean): void {\n\t\tif (focused) {\n\t\t\tthis._terminalFocusContextKey.set(true);\n\t\t\tthis._setShellIntegrationContextKey();\n\t\t\tthis._onDidFocus.fire(this);\n\t\t} else {\n\t\t\tthis.resetFocusContextKey();\n\t\t\tthis._onDidBlur.fire(this);\n\t\t\tthis._refreshSelectionContextKey();\n\t\t}\n\t}\n\n\tprivate _setShellIntegrationContextKey(): void {\n\t\tif (this.xterm) {\n\t\t\tthis._terminalShellIntegrationEnabledContextKey.set(this.xterm.shellIntegration.status === ShellIntegrationStatus.VSCode);\n\t\t}\n\t}\n\n\tresetFocusContextKey(): void {\n\t\tthis._terminalFocusContextKey.reset();\n\t\tthis._terminalShellIntegrationEnabledContextKey.reset();\n\t}\n\n\tprivate _initDragAndDrop(container: HTMLElement) {\n\t\tconst store = new DisposableStore();\n\t\tconst dndController = store.add(this._scopedInstantiationService.createInstance(TerminalInstanceDragAndDropController, container));\n\t\tstore.add(dndController.onDropTerminal(e => this._onRequestAddInstanceToGroup.fire(e)));\n\t\tstore.add(dndController.onDropFile(async path => {\n\t\t\tthis.focus();\n\t\t\tawait this.sendPath(path, false);\n\t\t}));\n\t\tstore.add(new dom.DragAndDropObserver(container, dndController));\n\t\tthis._dndObserver.value = store;\n\t}\n\n\thasSelection(): boolean {\n\t\treturn this.xterm ? this.xterm.raw.hasSelection() : false;\n\t}\n\n\tasync copySelection(asHtml?: boolean, command?: ITerminalCommand): Promise<void> {\n\t\tconst xterm = await this._xtermReadyPromise;\n\t\tawait xterm.copySelection(asHtml, command);\n\t}\n\n\tget selection(): string | undefined {\n\t\treturn this.xterm && this.hasSelection() ? this.xterm.raw.getSelection() : undefined;\n\t}\n\n\tclearSelection(): void {\n\t\tthis.xterm?.raw.clearSelection();\n\t}\n\n\tprivate _refreshAltBufferContextKey() {\n\t\tthis._terminalAltBufferActiveContextKey.set(!!(this.xterm && this.xterm.raw.buffer.active === this.xterm.raw.buffer.alternate));\n\t}\n\n\toverride dispose(reason?: TerminalExitReason): void {\n\t\tif (this.shellLaunchConfig.type === 'Task' && reason === TerminalExitReason.Process && this._exitCode !== 0 && !this.shellLaunchConfig.waitOnExit) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._logService.trace(`terminalInstance#dispose (instanceId: ${this.instanceId})`);\n\t\tdispose(this._widgetManager);\n\n\t\tif (this.xterm?.raw.element) {\n\t\t\tthis._hadFocusOnExit = this.hasFocus;\n\t\t}\n\t\tif (this._wrapperElement.xterm) {\n\t\t\tthis._wrapperElement.xterm = undefined;\n\t\t}\n\t\tif (this._horizontalScrollbar) {\n\t\t\tthis._horizontalScrollbar.dispose();\n\t\t\tthis._horizontalScrollbar = undefined;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.xterm?.dispose();\n\t\t} catch (err: unknown) {\n\t\t\t// See https://github.com/microsoft/vscode/issues/153486\n\t\t\tthis._logService.error('Exception occurred during xterm disposal', err);\n\t\t}\n\n\t\t// HACK: Workaround for Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=559561,\n\t\t// as 'blur' event in xterm.raw.textarea is not triggered on xterm.dispose()\n\t\t// See https://github.com/microsoft/vscode/issues/138358\n\t\tif (isFirefox) {\n\t\t\tthis.resetFocusContextKey();\n\t\t\tthis._terminalHasTextContextKey.reset();\n\t\t\tthis._onDidBlur.fire(this);\n\t\t}\n\n\t\tif (this._pressAnyKeyToCloseListener) {\n\t\t\tthis._pressAnyKeyToCloseListener.dispose();\n\t\t\tthis._pressAnyKeyToCloseListener = undefined;\n\t\t}\n\n\t\tif (this._exitReason === undefined) {\n\t\t\tthis._exitReason = reason ?? TerminalExitReason.Unknown;\n\t\t}\n\n\t\tthis._processManager.dispose();\n\t\t// Process manager dispose/shutdown doesn't fire process exit, trigger with undefined if it\n\t\t// hasn't happened yet\n\t\tthis._onProcessExit(undefined);\n\n\t\tthis._onDisposed.fire(this);\n\n\t\tsuper.dispose();\n\t}\n\n\tasync detachProcessAndDispose(reason: TerminalExitReason): Promise<void> {\n\t\t// Detach the process and dispose the instance, without the instance dispose the terminal\n\t\t// won't go away. Force persist if the detach was requested by the user (not shutdown).\n\t\tawait this._processManager.detachFromProcess(reason === TerminalExitReason.User);\n\t\tthis.dispose(reason);\n\t}\n\n\tfocus(force?: boolean): void {\n\t\tthis._refreshAltBufferContextKey();\n\t\tif (!this.xterm) {\n\t\t\treturn;\n\t\t}\n\t\tif (force || !dom.getActiveWindow().getSelection()?.toString()) {\n\t\t\tthis.xterm.raw.focus();\n\t\t\tthis._onDidRequestFocus.fire();\n\t\t}\n\t}\n\n\tasync focusWhenReady(force?: boolean): Promise<void> {\n\t\tawait this._xtermReadyPromise;\n\t\tawait this._attachBarrier.wait();\n\t\tthis.focus(force);\n\t}\n\n\tasync paste(): Promise<void> {\n\t\tawait this._paste(await this._clipboardService.readText());\n\t}\n\n\tasync pasteSelection(): Promise<void> {\n\t\tawait this._paste(await this._clipboardService.readText('selection'));\n\t}\n\n\tprivate async _paste(value: string): Promise<void> {\n\t\tif (!this.xterm) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet currentText = value;\n\t\tconst shouldPasteText = await this._scopedInstantiationService.invokeFunction(shouldPasteTerminalText, currentText, this.xterm?.raw.modes.bracketedPasteMode);\n\t\tif (!shouldPasteText) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof shouldPasteText === 'object') {\n\t\t\tcurrentText = shouldPasteText.modifiedText;\n\t\t}\n\n\t\tthis.focus();\n\n\t\tthis._onWillPaste.fire(currentText);\n\t\tthis.xterm.raw.paste(currentText);\n\t\tthis._onDidPaste.fire(currentText);\n\t}\n\n\tasync sendText(text: string, shouldExecute: boolean, bracketedPasteMode?: boolean): Promise<void> {\n\t\t// Apply bracketed paste sequences if the terminal has the mode enabled, this will prevent\n\t\t// the text from triggering keybindings and ensure new lines are handled properly\n\t\tif (bracketedPasteMode && this.xterm?.raw.modes.bracketedPasteMode) {\n\t\t\ttext = `\\x1b[200~${text}\\x1b[201~`;\n\t\t}\n\n\t\t// Normalize line endings to 'enter' press.\n\t\ttext = text.replace(/\\r?\\n/g, '\\r');\n\t\tif (shouldExecute && !text.endsWith('\\r')) {\n\t\t\ttext += '\\r';\n\t\t}\n\n\t\t// Send it to the process\n\t\tthis._logService.debug('sending data (vscode)', text);\n\t\tawait this._processManager.write(text);\n\t\tthis._onDidInputData.fire(text);\n\t\tthis._onDidSendText.fire(text);\n\t\tthis.xterm?.scrollToBottom();\n\t\tif (shouldExecute) {\n\t\t\tthis._onDidExecuteText.fire();\n\t\t}\n\t}\n\n\tasync sendPath(originalPath: string | URI, shouldExecute: boolean): Promise<void> {\n\t\treturn this.sendText(await this.preparePathForShell(originalPath), shouldExecute);\n\t}\n\n\tasync preparePathForShell(originalPath: string | URI): Promise<string> {\n\t\t// Wait for shell type to be ready\n\t\tawait this.processReady;\n\t\treturn preparePathForShell(originalPath, this.shellLaunchConfig.executable, this.title, this.shellType, this._processManager.backend, this._processManager.os);\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tconst didChange = this._isVisible !== visible;\n\t\tthis._isVisible = visible;\n\t\tthis._wrapperElement.classList.toggle('active', visible);\n\t\tif (visible && this.xterm) {\n\t\t\tthis._open();\n\t\t\t// Flush any pending resizes\n\t\t\tthis._resizeDebouncer?.flush();\n\t\t\t// Resize to re-evaluate dimensions, this will ensure when switching to a terminal it is\n\t\t\t// using the most up to date dimensions (eg. when terminal is created in the background\n\t\t\t// using cached dimensions of a split terminal).\n\t\t\tthis._resize();\n\t\t}\n\t\tif (didChange) {\n\t\t\tthis._onDidChangeVisibility.fire(visible);\n\t\t}\n\t}\n\n\tscrollDownLine(): void {\n\t\tthis.xterm?.scrollDownLine();\n\t}\n\n\tscrollDownPage(): void {\n\t\tthis.xterm?.scrollDownPage();\n\t}\n\n\tscrollToBottom(): void {\n\t\tthis.xterm?.scrollToBottom();\n\t}\n\n\tscrollUpLine(): void {\n\t\tthis.xterm?.scrollUpLine();\n\t}\n\n\tscrollUpPage(): void {\n\t\tthis.xterm?.scrollUpPage();\n\t}\n\n\tscrollToTop(): void {\n\t\tthis.xterm?.scrollToTop();\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._processManager.clearBuffer();\n\t\tthis.xterm?.clearBuffer();\n\t}\n\n\tprivate _refreshSelectionContextKey() {\n\t\tconst isActive = !!this._viewsService.getActiveViewWithId(TERMINAL_VIEW_ID);\n\t\tlet isEditorActive = false;\n\t\tconst editor = this._editorService.activeEditor;\n\t\tif (editor) {\n\t\t\tisEditorActive = editor instanceof TerminalEditorInput;\n\t\t}\n\t\tthis._terminalHasTextContextKey.set((isActive || isEditorActive) && this.hasSelection());\n\t}\n\n\tprotected _createProcessManager(): TerminalProcessManager {\n\t\tlet deserializedCollections: ReadonlyMap<string, IEnvironmentVariableCollection> | undefined;\n\t\tif (this.shellLaunchConfig.attachPersistentProcess?.environmentVariableCollections) {\n\t\t\tdeserializedCollections = deserializeEnvironmentVariableCollections(this.shellLaunchConfig.attachPersistentProcess.environmentVariableCollections);\n\t\t}\n\t\tconst processManager = this._scopedInstantiationService.createInstance(\n\t\t\tTerminalProcessManager,\n\t\t\tthis._instanceId,\n\t\t\tthis.shellLaunchConfig?.cwd,\n\t\t\tdeserializedCollections,\n\t\t\tthis.shellLaunchConfig.attachPersistentProcess?.shellIntegrationNonce\n\t\t);\n\t\tthis.capabilities.add(processManager.capabilities);\n\t\tthis._register(processManager.onProcessReady(async (e) => {\n\t\t\tthis._onProcessIdReady.fire(this);\n\t\t\tthis._initialCwd = await this.getInitialCwd();\n\t\t\t// Set the initial name based on the _resolved_ shell launch config, this will also\n\t\t\t// ensure the resolved icon gets shown\n\t\t\tif (!this._labelComputer) {\n\t\t\t\tthis._labelComputer = this._register(this._scopedInstantiationService.createInstance(TerminalLabelComputer));\n\t\t\t\tthis._register(this._labelComputer.onDidChangeLabel(e => {\n\t\t\t\t\tconst wasChanged = this._title !== e.title || this._description !== e.description;\n\t\t\t\t\tif (wasChanged) {\n\t\t\t\t\t\tthis._title = e.title;\n\t\t\t\t\t\tthis._description = e.description;\n\t\t\t\t\t\tthis._onTitleChanged.fire(this);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\tif (this._shellLaunchConfig.name) {\n\t\t\t\tthis._setTitle(this._shellLaunchConfig.name, TitleEventSource.Api);\n\t\t\t} else {\n\t\t\t\t// Listen to xterm.js' sequence title change event, trigger this async to ensure\n\t\t\t\t// _xtermReadyPromise is ready constructed since this is called from the ctor\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._xtermReadyPromise.then(xterm => {\n\t\t\t\t\t\tthis._messageTitleDisposable.value = xterm.raw.onTitleChange(e => this._onTitleChange(e));\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis._setTitle(this._shellLaunchConfig.executable, TitleEventSource.Process);\n\t\t\t}\n\t\t}));\n\t\tthis._register(processManager.onProcessExit(exitCode => this._onProcessExit(exitCode)));\n\t\tthis._register(processManager.onDidChangeProperty(({ type, value }) => {\n\t\t\tswitch (type) {\n\t\t\t\tcase ProcessPropertyType.Cwd:\n\t\t\t\t\tthis._cwd = value;\n\t\t\t\t\tthis._labelComputer?.refreshLabel(this);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ProcessPropertyType.InitialCwd:\n\t\t\t\t\tthis._initialCwd = value;\n\t\t\t\t\tthis._cwd = this._initialCwd;\n\t\t\t\t\tthis._setTitle(this.title, TitleEventSource.Config);\n\t\t\t\t\tthis._icon = this._shellLaunchConfig.attachPersistentProcess?.icon || this._shellLaunchConfig.icon;\n\t\t\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: false });\n\t\t\t\t\tbreak;\n\t\t\t\tcase ProcessPropertyType.Title:\n\t\t\t\t\tthis._setTitle(value ?? '', TitleEventSource.Process);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ProcessPropertyType.OverrideDimensions:\n\t\t\t\t\tthis.setOverrideDimensions(value, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ProcessPropertyType.ResolvedShellLaunchConfig:\n\t\t\t\t\tthis._setResolvedShellLaunchConfig(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ProcessPropertyType.ShellType:\n\t\t\t\t\tthis.setShellType(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ProcessPropertyType.HasChildProcesses:\n\t\t\t\t\tthis._onDidChangeHasChildProcesses.fire(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ProcessPropertyType.UsedShellIntegrationInjection:\n\t\t\t\t\tthis._usedShellIntegrationInjection = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\tthis._initialDataEventsListener.value = processManager.onProcessData(ev => this._initialDataEvents?.push(ev.data));\n\t\tthis._register(processManager.onProcessReplayComplete(() => this._onProcessReplayComplete.fire()));\n\t\tthis._register(processManager.onEnvironmentVariableInfoChanged(e => this._onEnvironmentVariableInfoChanged(e)));\n\t\tthis._register(processManager.onPtyDisconnect(() => {\n\t\t\tif (this.xterm) {\n\t\t\t\tthis.xterm.raw.options.disableStdin = true;\n\t\t\t}\n\t\t\tthis.statusList.add({\n\t\t\t\tid: TerminalStatus.Disconnected,\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\ticon: Codicon.debugDisconnect,\n\t\t\t\ttooltip: nls.localize('disconnectStatus', \"Lost connection to process\")\n\t\t\t});\n\t\t}));\n\t\tthis._register(processManager.onPtyReconnect(() => {\n\t\t\tif (this.xterm) {\n\t\t\t\tthis.xterm.raw.options.disableStdin = false;\n\t\t\t}\n\t\t\tthis.statusList.remove(TerminalStatus.Disconnected);\n\t\t}));\n\n\t\treturn processManager;\n\t}\n\n\tprivate async _createProcess(): Promise<void> {\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tif (activeWorkspaceRootUri) {\n\t\t\tconst trusted = await this._trust();\n\t\t\tif (!trusted) {\n\t\t\t\tthis._onProcessExit({ message: nls.localize('workspaceNotTrustedCreateTerminal', \"Cannot launch a terminal process in an untrusted workspace\") });\n\t\t\t}\n\t\t} else if (this._cwd && this._userHome && this._cwd !== this._userHome) {\n\t\t\t// something strange is going on if cwd is not userHome in an empty workspace\n\t\t\tthis._onProcessExit({\n\t\t\t\tmessage: nls.localize('workspaceNotTrustedCreateTerminalCwd', \"Cannot launch a terminal process in an untrusted workspace with cwd {0} and userHome {1}\", this._cwd, this._userHome)\n\t\t\t});\n\t\t}\n\n\t\t// Re-evaluate dimensions if the container has been set since the xterm instance was created\n\t\tif (this._container && this._cols === 0 && this._rows === 0) {\n\t\t\tthis._initDimensions();\n\t\t\tthis.xterm?.raw.resize(this._cols || Constants.DefaultCols, this._rows || Constants.DefaultRows);\n\t\t}\n\t\tconst originalIcon = this.shellLaunchConfig.icon;\n\t\tawait this._processManager.createProcess(this._shellLaunchConfig, this._cols || Constants.DefaultCols, this._rows || Constants.DefaultRows).then(result => {\n\t\t\tif (result) {\n\t\t\t\tif ('message' in result) {\n\t\t\t\t\tthis._onProcessExit(result);\n\t\t\t\t} else if ('injectedArgs' in result) {\n\t\t\t\t\tthis._injectedArgs = result.injectedArgs;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.xterm?.shellIntegration) {\n\t\t\tthis.capabilities.add(this.xterm.shellIntegration.capabilities);\n\t\t}\n\t\tif (originalIcon !== this.shellLaunchConfig.icon || this.shellLaunchConfig.color) {\n\t\t\tthis._icon = this._shellLaunchConfig.attachPersistentProcess?.icon || this._shellLaunchConfig.icon;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: false });\n\t\t}\n\t}\n\n\tpublic registerMarker(offset?: number): IMarker | undefined {\n\t\treturn this.xterm?.raw.registerMarker(offset);\n\t}\n\n\tpublic addBufferMarker(properties: IMarkProperties): void {\n\t\tthis.capabilities.get(TerminalCapability.BufferMarkDetection)?.addMark(properties);\n\t}\n\n\tpublic scrollToMark(startMarkId: string, endMarkId?: string, highlight?: boolean): void {\n\t\tthis.xterm?.markTracker.scrollToClosestMarker(startMarkId, endMarkId, highlight);\n\t}\n\n\tpublic async freePortKillProcess(port: string, command: string): Promise<void> {\n\t\tawait this._processManager?.freePortKillProcess(port);\n\t\tthis.runCommand(command, false);\n\t}\n\n\tprivate _onProcessData(ev: IProcessDataEvent): void {\n\t\t// Ensure events are split by SI command execute sequence to ensure the output of the\n\t\t// command can be read by extensions. This must be done here as xterm.js does not currently\n\t\t// have a listener for when individual data events are parsed, only `onWriteParsed` which\n\t\t// fires when the write buffer is flushed.\n\t\tconst execIndex = ev.data.indexOf('\\x1b]633;C\\x07');\n\t\tif (execIndex !== -1) {\n\t\t\tif (ev.trackCommit) {\n\t\t\t\tthis._writeProcessData(ev.data.substring(0, execIndex + '\\x1b]633;C\\x07'.length));\n\t\t\t\tev.writePromise = new Promise<void>(r => this._writeProcessData(ev.data.substring(execIndex + '\\x1b]633;C\\x07'.length), r));\n\t\t\t} else {\n\t\t\t\tthis._writeProcessData(ev.data.substring(0, execIndex + '\\x1b]633;C\\x07'.length));\n\t\t\t\tthis._writeProcessData(ev.data.substring(execIndex + '\\x1b]633;C\\x07'.length));\n\t\t\t}\n\t\t} else {\n\t\t\tif (ev.trackCommit) {\n\t\t\t\tev.writePromise = new Promise<void>(r => this._writeProcessData(ev.data, r));\n\t\t\t} else {\n\t\t\t\tthis._writeProcessData(ev.data);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _writeProcessData(data: string, cb?: () => void) {\n\t\tthis._onWillData.fire(data);\n\t\tconst messageId = ++this._latestXtermWriteData;\n\t\tthis.xterm?.raw.write(data, () => {\n\t\t\tthis._latestXtermParseData = messageId;\n\t\t\tthis._processManager.acknowledgeDataEvent(data.length);\n\t\t\tcb?.();\n\t\t\tthis._onData.fire(data);\n\t\t});\n\t}\n\n\t/**\n\t * Called when either a process tied to a terminal has exited or when a terminal renderer\n\t * simulates a process exiting (e.g. custom execution task).\n\t * @param exitCode The exit code of the process, this is undefined when the terminal was exited\n\t * through user action.\n\t */\n\tprivate async _onProcessExit(exitCodeOrError?: number | ITerminalLaunchError): Promise<void> {\n\t\t// Prevent dispose functions being triggered multiple times\n\t\tif (this._isExiting) {\n\t\t\treturn;\n\t\t}\n\t\tconst parsedExitResult = parseExitResult(exitCodeOrError, this.shellLaunchConfig, this._processManager.processState, this._initialCwd);\n\n\t\tif (this._usedShellIntegrationInjection && this._processManager.processState === ProcessState.KilledDuringLaunch && parsedExitResult?.code !== 0) {\n\t\t\tthis._relaunchWithShellIntegrationDisabled(parsedExitResult?.message);\n\t\t\tthis._onExit.fire(exitCodeOrError);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._isExiting = true;\n\n\t\tawait this._flushXtermData();\n\n\t\tthis._exitCode = parsedExitResult?.code;\n\t\tconst exitMessage = parsedExitResult?.message;\n\n\t\tthis._logService.debug('Terminal process exit', 'instanceId', this.instanceId, 'code', this._exitCode, 'processState', this._processManager.processState);\n\n\t\t// Only trigger wait on exit when the exit was *not* triggered by the\n\t\t// user (via the `workbench.action.terminal.kill` command).\n\t\tconst waitOnExit = this.waitOnExit;\n\t\tif (waitOnExit && this._processManager.processState !== ProcessState.KilledByUser) {\n\t\t\tthis._xtermReadyPromise.then(xterm => {\n\t\t\t\tif (exitMessage) {\n\t\t\t\t\txterm.raw.write(formatMessageForTerminal(exitMessage));\n\t\t\t\t}\n\t\t\t\tswitch (typeof waitOnExit) {\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\txterm.raw.write(formatMessageForTerminal(waitOnExit, { excludeLeadingNewLine: true }));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'function':\n\t\t\t\t\t\tif (this.exitCode !== undefined) {\n\t\t\t\t\t\t\txterm.raw.write(formatMessageForTerminal(waitOnExit(this.exitCode), { excludeLeadingNewLine: true }));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Disable all input if the terminal is exiting and listen for next keypress\n\t\t\t\txterm.raw.options.disableStdin = true;\n\t\t\t\tif (xterm.raw.textarea) {\n\t\t\t\t\tthis._attachPressAnyKeyToCloseListener(xterm.raw);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (exitMessage) {\n\t\t\t\tconst failedDuringLaunch = this._processManager.processState === ProcessState.KilledDuringLaunch;\n\t\t\t\tif (failedDuringLaunch || this._terminalConfigurationService.config.showExitAlert) {\n\t\t\t\t\t// Always show launch failures\n\t\t\t\t\tthis._notificationService.notify({\n\t\t\t\t\t\tmessage: exitMessage,\n\t\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\t\tactions: { primary: [this._scopedInstantiationService.createInstance(TerminalLaunchHelpAction)] }\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Log to help surface the error in case users report issues with showExitAlert\n\t\t\t\t\t// disabled\n\t\t\t\t\tthis._logService.warn(exitMessage);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.dispose(TerminalExitReason.Process);\n\t\t}\n\n\t\t// First onExit to consumers, this can happen after the terminal has already been disposed.\n\t\tthis._onExit.fire(exitCodeOrError);\n\n\t\t// Dispose of the onExit event if the terminal will not be reused again\n\t\tif (this.isDisposed) {\n\t\t\tthis._onExit.dispose();\n\t\t}\n\t}\n\n\tprivate _relaunchWithShellIntegrationDisabled(exitMessage: string | undefined): void {\n\t\tthis._shellLaunchConfig.ignoreShellIntegration = true;\n\t\tthis.relaunch();\n\t\tthis.statusList.add({\n\t\t\tid: TerminalStatus.ShellIntegrationAttentionNeeded,\n\t\t\tseverity: Severity.Warning,\n\t\t\ticon: Codicon.warning,\n\t\t\ttooltip: `${exitMessage} ` + nls.localize('launchFailed.exitCodeOnlyShellIntegration', 'Disabling shell integration in user settings might help.'),\n\t\t\thoverActions: [{\n\t\t\t\tcommandId: TerminalCommandId.ShellIntegrationLearnMore,\n\t\t\t\tlabel: nls.localize('shellIntegration.learnMore', \"Learn more about shell integration\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._openerService.open('https://code.visualstudio.com/docs/editor/integrated-terminal#_shell-integration');\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tcommandId: 'workbench.action.openSettings',\n\t\t\t\tlabel: nls.localize('shellIntegration.openSettings', \"Open user settings\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._commandService.executeCommand('workbench.action.openSettings', 'terminal.integrated.shellIntegration.enabled');\n\t\t\t\t}\n\t\t\t}]\n\t\t});\n\t\tthis._telemetryService.publicLog2<{}, { owner: 'meganrogge'; comment: 'Indicates the process exited when created with shell integration args' }>('terminal/shellIntegrationFailureProcessExit');\n\t}\n\n\t/**\n\t * Ensure write calls to xterm.js have finished before resolving.\n\t */\n\tprivate _flushXtermData(): Promise<void> {\n\t\tif (this._latestXtermWriteData === this._latestXtermParseData) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tlet retries = 0;\n\t\treturn new Promise<void>(r => {\n\t\t\tconst interval = dom.disposableWindowInterval(dom.getActiveWindow().window, () => {\n\t\t\t\tif (this._latestXtermWriteData === this._latestXtermParseData || ++retries === 5) {\n\t\t\t\t\tinterval.dispose();\n\t\t\t\t\tr();\n\t\t\t\t}\n\t\t\t}, 20);\n\t\t});\n\t}\n\n\tprivate _attachPressAnyKeyToCloseListener(xterm: XTermTerminal) {\n\t\tif (xterm.textarea && !this._pressAnyKeyToCloseListener) {\n\t\t\tthis._pressAnyKeyToCloseListener = dom.addDisposableListener(xterm.textarea, 'keypress', (event: KeyboardEvent) => {\n\t\t\t\tif (this._pressAnyKeyToCloseListener) {\n\t\t\t\t\tthis._pressAnyKeyToCloseListener.dispose();\n\t\t\t\t\tthis._pressAnyKeyToCloseListener = undefined;\n\t\t\t\t\tthis.dispose(TerminalExitReason.Process);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _writeInitialText(xterm: XtermTerminal, callback?: () => void): void {\n\t\tif (!this._shellLaunchConfig.initialText) {\n\t\t\tcallback?.();\n\t\t\treturn;\n\t\t}\n\t\tconst text = typeof this._shellLaunchConfig.initialText === 'string'\n\t\t\t? this._shellLaunchConfig.initialText\n\t\t\t: this._shellLaunchConfig.initialText?.text;\n\t\tif (typeof this._shellLaunchConfig.initialText === 'string') {\n\t\t\txterm.raw.writeln(text, callback);\n\t\t} else {\n\t\t\tif (this._shellLaunchConfig.initialText.trailingNewLine) {\n\t\t\t\txterm.raw.writeln(text, callback);\n\t\t\t} else {\n\t\t\t\txterm.raw.write(text, callback);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync reuseTerminal(shell: IShellLaunchConfig, reset: boolean = false): Promise<void> {\n\t\t// Unsubscribe any key listener we may have.\n\t\tthis._pressAnyKeyToCloseListener?.dispose();\n\t\tthis._pressAnyKeyToCloseListener = undefined;\n\n\t\tconst xterm = this.xterm;\n\t\tif (xterm) {\n\t\t\tif (!reset) {\n\t\t\t\t// Ensure new processes' output starts at start of new line\n\t\t\t\tawait new Promise<void>(r => xterm.raw.write('\\n\\x1b[G', r));\n\t\t\t}\n\n\t\t\t// Print initialText if specified\n\t\t\tif (shell.initialText) {\n\t\t\t\tthis._shellLaunchConfig.initialText = shell.initialText;\n\t\t\t\tawait new Promise<void>(r => this._writeInitialText(xterm, r));\n\t\t\t}\n\n\t\t\t// Clean up waitOnExit state\n\t\t\tif (this._isExiting && this._shellLaunchConfig.waitOnExit) {\n\t\t\t\txterm.raw.options.disableStdin = false;\n\t\t\t\tthis._isExiting = false;\n\t\t\t}\n\t\t\tif (reset) {\n\t\t\t\txterm.clearDecorations();\n\t\t\t}\n\t\t}\n\n\t\t// Dispose the environment info widget if it exists\n\t\tthis.statusList.remove(TerminalStatus.RelaunchNeeded);\n\n\t\tif (!reset) {\n\t\t\t// HACK: Force initialText to be non-falsy for reused terminals such that the\n\t\t\t// conptyInheritCursor flag is passed to the node-pty, this flag can cause a Window to stop\n\t\t\t// responding in Windows 10 1903 so we only want to use it when something is definitely written\n\t\t\t// to the terminal.\n\t\t\tshell.initialText = ' ';\n\t\t}\n\n\t\t// Set the new shell launch config\n\t\tthis._shellLaunchConfig = shell; // Must be done before calling _createProcess()\n\t\tawait this._processManager.relaunch(this._shellLaunchConfig, this._cols || Constants.DefaultCols, this._rows || Constants.DefaultRows, reset).then(result => {\n\t\t\tif (result) {\n\t\t\t\tif ('message' in result) {\n\t\t\t\t\tthis._onProcessExit(result);\n\t\t\t\t} else if ('injectedArgs' in result) {\n\t\t\t\t\tthis._injectedArgs = result.injectedArgs;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t@debounce(1000)\n\trelaunch(): void {\n\t\tthis.reuseTerminal(this._shellLaunchConfig, true);\n\t}\n\n\tprivate _onTitleChange(title: string): void {\n\t\tif (this.isTitleSetByProcess) {\n\t\t\tthis._setTitle(title, TitleEventSource.Sequence);\n\t\t}\n\t}\n\n\tprivate async _trust(): Promise<boolean> {\n\t\treturn (await this._workspaceTrustRequestService.requestWorkspaceTrust(\n\t\t\t{\n\t\t\t\tmessage: nls.localize('terminal.requestTrust', \"Creating a terminal process requires executing code\")\n\t\t\t})) === true;\n\t}\n\n\tprivate async _onSelectionChange(): Promise<void> {\n\t\tthis._onDidChangeSelection.fire(this);\n\t\tif (this._configurationService.getValue(TerminalSettingId.CopyOnSelection)) {\n\t\t\tif (this._overrideCopySelection === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.hasSelection()) {\n\t\t\t\tawait this.copySelection();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _overrideCopySelection: boolean | undefined = undefined;\n\toverrideCopyOnSelection(value: boolean): IDisposable {\n\t\tif (this._overrideCopySelection !== undefined) {\n\t\t\tthrow new Error('Cannot set a copy on selection override multiple times');\n\t\t}\n\t\tthis._overrideCopySelection = value;\n\t\treturn toDisposable(() => this._overrideCopySelection = undefined);\n\t}\n\n\t@debounce(2000)\n\tprivate async _updateProcessCwd(): Promise<void> {\n\t\tif (this.isDisposed || this.shellLaunchConfig.customPtyImplementation) {\n\t\t\treturn;\n\t\t}\n\t\t// reset cwd if it has changed, so file based url paths can be resolved\n\t\ttry {\n\t\t\tconst cwd = await this._refreshProperty(ProcessPropertyType.Cwd);\n\t\t\tif (typeof cwd !== 'string') {\n\t\t\t\tthrow new Error(`cwd is not a string ${cwd}`);\n\t\t\t}\n\t\t} catch (e: unknown) {\n\t\t\t// Swallow this as it means the process has been killed\n\t\t\tif (e instanceof Error && e.message === 'Cannot refresh property when process is not set') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tupdateConfig(): void {\n\t\tthis._setCommandsToSkipShell(this._terminalConfigurationService.config.commandsToSkipShell);\n\t\tthis._refreshEnvironmentVariableInfoWidgetState(this._processManager.environmentVariableInfo);\n\t}\n\n\tprivate async _updateUnicodeVersion(): Promise<void> {\n\t\tthis._processManager.setUnicodeVersion(this._terminalConfigurationService.config.unicodeVersion);\n\t}\n\n\tupdateAccessibilitySupport(): void {\n\t\tthis.xterm!.raw.options.screenReaderMode = this._accessibilityService.isScreenReaderOptimized();\n\t}\n\n\tprivate _setCommandsToSkipShell(commands: string[]): void {\n\t\tconst excludeCommands = commands.filter(command => command[0] === '-').map(command => command.slice(1));\n\t\tthis._skipTerminalCommands = DEFAULT_COMMANDS_TO_SKIP_SHELL.filter(defaultCommand => {\n\t\t\treturn !excludeCommands.includes(defaultCommand);\n\t\t}).concat(commands);\n\t}\n\n\tlayout(dimension: dom.Dimension): void {\n\t\tthis._lastLayoutDimensions = dimension;\n\t\tif (this.disableLayout) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't layout if dimensions are invalid (eg. the container is not attached to the DOM or\n\t\t// if display: none\n\t\tif (dimension.width <= 0 || dimension.height <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Evaluate columns and rows, exclude the wrapper element's margin\n\t\tconst terminalWidth = this._evaluateColsAndRows(dimension.width, dimension.height);\n\t\tif (!terminalWidth) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._resize();\n\n\t\t// Signal the container is ready\n\t\tif (!this._containerReadyBarrier.isOpen()) {\n\t\t\tthis._containerReadyBarrier.open();\n\t\t}\n\n\t\t// Layout all contributions\n\t\tfor (const contribution of this._contributions.values()) {\n\t\t\tif (!this.xterm) {\n\t\t\t\tthis._xtermReadyPromise.then(xterm => contribution.layout?.(xterm, dimension));\n\t\t\t} else {\n\t\t\t\tcontribution.layout?.(this.xterm, dimension);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _resize(immediate?: boolean): Promise<void> {\n\t\tif (!this.xterm) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet cols = this.cols;\n\t\tlet rows = this.rows;\n\n\t\t// Only apply these settings when the terminal is visible so that\n\t\t// the characters are measured correctly.\n\t\tif (this._isVisible && this._layoutSettingsChanged) {\n\t\t\tconst font = this.xterm.getFont();\n\t\t\tconst config = this._terminalConfigurationService.config;\n\t\t\tthis.xterm.raw.options.letterSpacing = font.letterSpacing;\n\t\t\tthis.xterm.raw.options.lineHeight = font.lineHeight;\n\t\t\tthis.xterm.raw.options.fontSize = font.fontSize;\n\t\t\tthis.xterm.raw.options.fontFamily = font.fontFamily;\n\t\t\tthis.xterm.raw.options.fontWeight = config.fontWeight;\n\t\t\tthis.xterm.raw.options.fontWeightBold = config.fontWeightBold;\n\n\t\t\t// Any of the above setting changes could have changed the dimensions of the\n\t\t\t// terminal, re-evaluate now.\n\t\t\tthis._initDimensions();\n\t\t\tcols = this.cols;\n\t\t\trows = this.rows;\n\n\t\t\tthis._layoutSettingsChanged = false;\n\t\t}\n\n\t\tif (isNaN(cols) || isNaN(rows)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (cols !== this.xterm.raw.cols || rows !== this.xterm.raw.rows) {\n\t\t\tif (this._fixedRows || this._fixedCols) {\n\t\t\t\tawait this._updateProperty(ProcessPropertyType.FixedDimensions, { cols: this._fixedCols, rows: this._fixedRows });\n\t\t\t}\n\t\t\tthis._onDimensionsChanged.fire();\n\t\t}\n\n\t\tTerminalInstance._lastKnownGridDimensions = { cols, rows };\n\t\tthis._resizeDebouncer!.resize(cols, rows, immediate ?? false);\n\t}\n\n\tprivate async _updatePtyDimensions(rawXterm: XTermTerminal): Promise<void> {\n\t\tawait this._processManager.setDimensions(rawXterm.cols, rawXterm.rows);\n\t}\n\n\tsetShellType(shellType: TerminalShellType | undefined) {\n\t\tif (this._shellType === shellType) {\n\t\t\treturn;\n\t\t}\n\t\tif (shellType) {\n\t\t\tthis._shellType = shellType;\n\t\t\tthis._terminalShellTypeContextKey.set(shellType?.toString());\n\t\t\tthis._onDidChangeShellType.fire(shellType);\n\t\t}\n\t}\n\n\tprivate _setAriaLabel(xterm: XTermTerminal | undefined, terminalId: number, title: string | undefined): void {\n\t\tconst labelParts: string[] = [];\n\t\tif (xterm && xterm.textarea) {\n\t\t\tif (title && title.length > 0) {\n\t\t\t\tlabelParts.push(nls.localize('terminalTextBoxAriaLabelNumberAndTitle', \"Terminal {0}, {1}\", terminalId, title));\n\t\t\t} else {\n\t\t\t\tlabelParts.push(nls.localize('terminalTextBoxAriaLabel', \"Terminal {0}\", terminalId));\n\t\t\t}\n\t\t\tconst screenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!screenReaderOptimized) {\n\t\t\t\tlabelParts.push(nls.localize('terminalScreenReaderMode', \"Run the command: Toggle Screen Reader Accessibility Mode for an optimized screen reader experience\"));\n\t\t\t}\n\t\t\tconst accessibilityHelpKeybinding = this._keybindingService.lookupKeybinding(AccessibilityCommandId.OpenAccessibilityHelp)?.getLabel();\n\t\t\tif (this._configurationService.getValue(AccessibilityVerbositySettingId.Terminal) && accessibilityHelpKeybinding) {\n\t\t\t\tlabelParts.push(nls.localize('terminalHelpAriaLabel', \"Use {0} for terminal accessibility help\", accessibilityHelpKeybinding));\n\t\t\t}\n\t\t\txterm.textarea.setAttribute('aria-label', labelParts.join('\\n'));\n\t\t}\n\t}\n\n\tprivate _updateTitleProperties(title: string | undefined, eventSource: TitleEventSource): string {\n\t\tif (!title) {\n\t\t\treturn this._processName;\n\t\t}\n\t\tswitch (eventSource) {\n\t\t\tcase TitleEventSource.Process:\n\t\t\t\tif (this._processManager.os === OperatingSystem.Windows) {\n\t\t\t\t\t// Extract the file name without extension\n\t\t\t\t\ttitle = path.win32.parse(title).name;\n\t\t\t\t} else {\n\t\t\t\t\tconst firstSpaceIndex = title.indexOf(' ');\n\t\t\t\t\tif (title.startsWith('/')) {\n\t\t\t\t\t\ttitle = path.basename(title);\n\t\t\t\t\t} else if (firstSpaceIndex > -1) {\n\t\t\t\t\t\ttitle = title.substring(0, firstSpaceIndex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._processName = title;\n\t\t\t\tbreak;\n\t\t\tcase TitleEventSource.Api:\n\t\t\t\t// If the title has not been set by the API or the rename command, unregister the handler that\n\t\t\t\t// automatically updates the terminal name\n\t\t\t\tthis._staticTitle = title;\n\t\t\t\tthis._messageTitleDisposable.value = undefined;\n\t\t\t\tbreak;\n\t\t\tcase TitleEventSource.Sequence:\n\t\t\t\t// On Windows, some shells will fire this with the full path which we want to trim\n\t\t\t\t// to show just the file name. This should only happen if the title looks like an\n\t\t\t\t// absolute Windows file path\n\t\t\t\tthis._sequence = title;\n\t\t\t\tif (this._processManager.os === OperatingSystem.Windows &&\n\t\t\t\t\ttitle.match(/^[a-zA-Z]:\\\\.+\\.[a-zA-Z]{1,3}/)) {\n\t\t\t\t\tthis._sequence = path.win32.parse(title).name;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tthis._titleSource = eventSource;\n\t\treturn title;\n\t}\n\n\tsetOverrideDimensions(dimensions: ITerminalDimensionsOverride | undefined, immediate: boolean = false): void {\n\t\tif (this._dimensionsOverride && this._dimensionsOverride.forceExactSize && !dimensions && this._rows === 0 && this._cols === 0) {\n\t\t\t// this terminal never had a real size => keep the last dimensions override exact size\n\t\t\tthis._cols = this._dimensionsOverride.cols;\n\t\t\tthis._rows = this._dimensionsOverride.rows;\n\t\t}\n\t\tthis._dimensionsOverride = dimensions;\n\t\tif (immediate) {\n\t\t\tthis._resize(true);\n\t\t} else {\n\t\t\tthis._resize();\n\t\t}\n\t}\n\n\tasync setFixedDimensions(): Promise<void> {\n\t\tconst cols = await this._quickInputService.input({\n\t\t\ttitle: nls.localize('setTerminalDimensionsColumn', \"Set Fixed Dimensions: Column\"),\n\t\t\tplaceHolder: 'Enter a number of columns or leave empty for automatic width',\n\t\t\tvalidateInput: async (text) => text.length > 0 && !text.match(/^\\d+$/) ? { content: 'Enter a number or leave empty size automatically', severity: Severity.Error } : undefined\n\t\t});\n\t\tif (cols === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._fixedCols = this._parseFixedDimension(cols);\n\t\tthis._labelComputer?.refreshLabel(this);\n\t\tthis._terminalHasFixedWidth.set(!!this._fixedCols);\n\t\tconst rows = await this._quickInputService.input({\n\t\t\ttitle: nls.localize('setTerminalDimensionsRow', \"Set Fixed Dimensions: Row\"),\n\t\t\tplaceHolder: 'Enter a number of rows or leave empty for automatic height',\n\t\t\tvalidateInput: async (text) => text.length > 0 && !text.match(/^\\d+$/) ? { content: 'Enter a number or leave empty size automatically', severity: Severity.Error } : undefined\n\t\t});\n\t\tif (rows === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._fixedRows = this._parseFixedDimension(rows);\n\t\tthis._labelComputer?.refreshLabel(this);\n\t\tawait this._refreshScrollbar();\n\t\tthis._resize();\n\t\tthis.focus();\n\t}\n\n\tprivate _parseFixedDimension(value: string): number | undefined {\n\t\tif (value === '') {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsed = parseInt(value);\n\t\tif (parsed <= 0) {\n\t\t\tthrow new Error(`Could not parse dimension \"${value}\"`);\n\t\t}\n\t\treturn parsed;\n\t}\n\n\tasync toggleSizeToContentWidth(): Promise<void> {\n\t\tif (!this.xterm?.raw.buffer.active) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._hasScrollBar) {\n\t\t\tthis._terminalHasFixedWidth.set(false);\n\t\t\tthis._fixedCols = undefined;\n\t\t\tthis._fixedRows = undefined;\n\t\t\tthis._hasScrollBar = false;\n\t\t\tthis._initDimensions();\n\t\t\tawait this._resize();\n\t\t} else {\n\t\t\tconst font = this.xterm ? this.xterm.getFont() : this._terminalConfigurationService.getFont(dom.getWindow(this.domElement));\n\t\t\tconst maxColsForTexture = Math.floor(Constants.MaxCanvasWidth / (font.charWidth ?? 20));\n\t\t\t// Fixed columns should be at least xterm.js' regular column count\n\t\t\tconst proposedCols = Math.max(this.maxCols, Math.min(this.xterm.getLongestViewportWrappedLineLength(), maxColsForTexture));\n\t\t\t// Don't switch to fixed dimensions if the content already fits as it makes the scroll\n\t\t\t// bar look bad being off the edge\n\t\t\tif (proposedCols > this.xterm.raw.cols) {\n\t\t\t\tthis._fixedCols = proposedCols;\n\t\t\t}\n\t\t}\n\t\tawait this._refreshScrollbar();\n\t\tthis._labelComputer?.refreshLabel(this);\n\t\tthis.focus();\n\t}\n\n\tprivate _refreshScrollbar(): Promise<void> {\n\t\tif (this._fixedCols || this._fixedRows) {\n\t\t\treturn this._addScrollbar();\n\t\t}\n\t\treturn this._removeScrollbar();\n\t}\n\n\tprivate async _addScrollbar(): Promise<void> {\n\t\tconst charWidth = (this.xterm ? this.xterm.getFont() : this._terminalConfigurationService.getFont(dom.getWindow(this.domElement))).charWidth;\n\t\tif (!this.xterm?.raw.element || !this._container || !charWidth || !this._fixedCols) {\n\t\t\treturn;\n\t\t}\n\t\tthis._wrapperElement.classList.add('fixed-dims');\n\t\tthis._hasScrollBar = true;\n\t\tthis._initDimensions();\n\t\tawait this._resize();\n\t\tthis._terminalHasFixedWidth.set(true);\n\t\tif (!this._horizontalScrollbar) {\n\t\t\tthis._horizontalScrollbar = this._register(new DomScrollableElement(this._wrapperElement, {\n\t\t\t\tvertical: ScrollbarVisibility.Hidden,\n\t\t\t\thorizontal: ScrollbarVisibility.Auto,\n\t\t\t\tuseShadows: false,\n\t\t\t\tscrollYToX: false,\n\t\t\t\tconsumeMouseWheelIfScrollbarIsNeeded: false\n\t\t\t}));\n\t\t\tthis._container.appendChild(this._horizontalScrollbar.getDomNode());\n\t\t}\n\t\tthis._horizontalScrollbar.setScrollDimensions({\n\t\t\twidth: this.xterm.raw.element.clientWidth,\n\t\t\tscrollWidth: this._fixedCols * charWidth + 40 // Padding + scroll bar\n\t\t});\n\t\tthis._horizontalScrollbar.getDomNode().style.paddingBottom = '16px';\n\n\t\t// work around for https://github.com/xtermjs/xterm.js/issues/3482\n\t\tif (isWindows) {\n\t\t\tfor (let i = this.xterm.raw.buffer.active.viewportY; i < this.xterm.raw.buffer.active.length; i++) {\n\t\t\t\tconst line = this.xterm.raw.buffer.active.getLine(i);\n\t\t\t\t(line as any)._line.isWrapped = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _removeScrollbar(): Promise<void> {\n\t\tif (!this._container || !this._horizontalScrollbar) {\n\t\t\treturn;\n\t\t}\n\t\tthis._horizontalScrollbar.getDomNode().remove();\n\t\tthis._horizontalScrollbar.dispose();\n\t\tthis._horizontalScrollbar = undefined;\n\t\tthis._wrapperElement.remove();\n\t\tthis._wrapperElement.classList.remove('fixed-dims');\n\t\tthis._container.appendChild(this._wrapperElement);\n\t}\n\n\tprivate _setResolvedShellLaunchConfig(shellLaunchConfig: IShellLaunchConfig): void {\n\t\tthis._shellLaunchConfig.args = shellLaunchConfig.args;\n\t\tthis._shellLaunchConfig.cwd = shellLaunchConfig.cwd;\n\t\tthis._shellLaunchConfig.executable = shellLaunchConfig.executable;\n\t\tthis._shellLaunchConfig.env = shellLaunchConfig.env;\n\t}\n\n\tprivate _onEnvironmentVariableInfoChanged(info: IEnvironmentVariableInfo): void {\n\t\tif (info.requiresAction) {\n\t\t\tthis.xterm?.raw.textarea?.setAttribute('aria-label', nls.localize('terminalStaleTextBoxAriaLabel', \"Terminal {0} environment is stale, run the 'Show Environment Information' command for more information\", this._instanceId));\n\t\t}\n\t\tthis._refreshEnvironmentVariableInfoWidgetState(info);\n\t}\n\n\tprivate async _refreshEnvironmentVariableInfoWidgetState(info?: IEnvironmentVariableInfo): Promise<void> {\n\t\t// Check if the status should exist\n\t\tif (!info) {\n\t\t\tthis.statusList.remove(TerminalStatus.RelaunchNeeded);\n\t\t\tthis.statusList.remove(TerminalStatus.EnvironmentVariableInfoChangesActive);\n\t\t\treturn;\n\t\t}\n\n\t\t// Recreate the process seamlessly without informing the use if the following conditions are\n\t\t// met.\n\t\tif (\n\t\t\t// The change requires a relaunch\n\t\t\tinfo.requiresAction &&\n\t\t\t// The feature is enabled\n\t\t\tthis._terminalConfigurationService.config.environmentChangesRelaunch &&\n\t\t\t// Has not been interacted with\n\t\t\t!this._processManager.hasWrittenData &&\n\t\t\t// Not a feature terminal or is a reconnecting task terminal (TODO: Need to explain the latter case)\n\t\t\t(!this._shellLaunchConfig.isFeatureTerminal || (this.reconnectionProperties && this._configurationService.getValue('task.reconnection') === true)) &&\n\t\t\t// Not a custom pty\n\t\t\t!this._shellLaunchConfig.customPtyImplementation &&\n\t\t\t// Not an extension owned terminal\n\t\t\t!this._shellLaunchConfig.isExtensionOwnedTerminal &&\n\t\t\t// Not a reconnected or revived terminal\n\t\t\t!this._shellLaunchConfig.attachPersistentProcess &&\n\t\t\t// Not a Windows remote using ConPTY (#187084)\n\t\t\t!(this._processManager.remoteAuthority && this._terminalConfigurationService.config.windowsEnableConpty && (await this._processManager.getBackendOS()) === OperatingSystem.Windows)\n\t\t) {\n\t\t\tthis.relaunch();\n\t\t\treturn;\n\t\t}\n\t\t// Re-create statuses\n\t\tconst workspaceFolder = getWorkspaceForTerminal(this.shellLaunchConfig.cwd, this._workspaceContextService, this._historyService);\n\t\tthis.statusList.add(info.getStatus({ workspaceFolder }));\n\t}\n\n\tasync getInitialCwd(): Promise<string> {\n\t\tif (!this._initialCwd) {\n\t\t\tthis._initialCwd = this._processManager.initialCwd;\n\t\t}\n\t\treturn this._initialCwd;\n\t}\n\n\tasync getCwd(): Promise<string> {\n\t\tif (this.capabilities.has(TerminalCapability.CwdDetection)) {\n\t\t\treturn this.capabilities.get(TerminalCapability.CwdDetection)!.getCwd();\n\t\t} else if (this.capabilities.has(TerminalCapability.NaiveCwdDetection)) {\n\t\t\treturn this.capabilities.get(TerminalCapability.NaiveCwdDetection)!.getCwd();\n\t\t}\n\t\treturn this._processManager.initialCwd;\n\t}\n\n\tprivate async _refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\tawait this.processReady;\n\t\treturn this._processManager.refreshProperty(type);\n\t}\n\n\tprivate async _updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._processManager.updateProperty(type, value);\n\t}\n\n\tasync rename(title?: string) {\n\t\tthis._setTitle(title, TitleEventSource.Api);\n\t}\n\n\tprivate _setTitle(title: string | undefined, eventSource: TitleEventSource): void {\n\t\tconst reset = !title;\n\t\ttitle = this._updateTitleProperties(title, eventSource);\n\t\tconst titleChanged = title !== this._title;\n\t\tthis._title = title;\n\t\tthis._labelComputer?.refreshLabel(this, reset);\n\t\tthis._setAriaLabel(this.xterm?.raw, this._instanceId, this._title);\n\n\t\tif (titleChanged) {\n\t\t\tthis._onTitleChanged.fire(this);\n\t\t}\n\t}\n\n\tasync changeIcon(icon?: TerminalIcon): Promise<TerminalIcon | undefined> {\n\t\tif (icon) {\n\t\t\tthis._icon = icon;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t\treturn icon;\n\t\t}\n\t\tconst iconPicker = this._scopedInstantiationService.createInstance(TerminalIconPicker);\n\t\tconst pickedIcon = await iconPicker.pickIcons();\n\t\ticonPicker.dispose();\n\t\tif (!pickedIcon) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._icon = pickedIcon;\n\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\treturn pickedIcon;\n\t}\n\n\tasync changeColor(color?: string, skipQuickPick?: boolean): Promise<string | undefined> {\n\t\tif (color) {\n\t\t\tthis.shellLaunchConfig.color = color;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t\treturn color;\n\t\t} else if (skipQuickPick) {\n\t\t\t// Reset this tab's color\n\t\t\tthis.shellLaunchConfig.color = '';\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t\treturn;\n\t\t}\n\t\tconst icon = this._getIcon();\n\t\tif (!icon) {\n\t\t\treturn;\n\t\t}\n\t\tconst colorTheme = this._themeService.getColorTheme();\n\t\tconst standardColors: string[] = getStandardColors(colorTheme);\n\t\tconst colorStyleDisposable = createColorStyleElement(colorTheme);\n\t\tconst items: QuickPickItem[] = [];\n\t\tfor (const colorKey of standardColors) {\n\t\t\tconst colorClass = getColorClass(colorKey);\n\t\t\titems.push({\n\t\t\t\tlabel: `$(${Codicon.circleFilled.id}) ${colorKey.replace('terminal.ansi', '')}`, id: colorKey, description: colorKey, iconClasses: [colorClass]\n\t\t\t});\n\t\t}\n\t\titems.push({ type: 'separator' });\n\t\tconst showAllColorsItem = { label: 'Reset to default' };\n\t\titems.push(showAllColorsItem);\n\n\t\tconst disposables: IDisposable[] = [];\n\t\tconst quickPick = this._quickInputService.createQuickPick({ useSeparators: true });\n\t\tdisposables.push(quickPick);\n\t\tquickPick.items = items;\n\t\tquickPick.matchOnDescription = true;\n\t\tquickPick.placeholder = nls.localize('changeColor', 'Select a color for the terminal');\n\t\tquickPick.show();\n\t\tconst result = await new Promise<IQuickPickItem | undefined>(r => {\n\t\t\tdisposables.push(quickPick.onDidHide(() => r(undefined)));\n\t\t\tdisposables.push(quickPick.onDidAccept(() => r(quickPick.selectedItems[0])));\n\t\t});\n\t\tdispose(disposables);\n\n\t\tif (result) {\n\t\t\tthis.shellLaunchConfig.color = result.id;\n\t\t\tthis._onIconChanged.fire({ instance: this, userInitiated: true });\n\t\t}\n\n\t\tquickPick.hide();\n\t\tcolorStyleDisposable.dispose();\n\t\treturn result?.id;\n\t}\n\n\tforceScrollbarVisibility(): void {\n\t\tthis._wrapperElement.classList.add('force-scrollbar');\n\t}\n\n\tresetScrollbarVisibility(): void {\n\t\tthis._wrapperElement.classList.remove('force-scrollbar');\n\t}\n\n\tsetParentContextKeyService(parentContextKeyService: IContextKeyService): void {\n\t\tthis._scopedContextKeyService.updateParent(parentContextKeyService);\n\t}\n\n\tasync handleMouseEvent(event: MouseEvent, contextMenu: IMenu): Promise<{ cancelContextMenu: boolean } | void> {\n\t\t// Don't handle mouse event if it was on the scroll bar\n\t\tif (dom.isHTMLElement(event.target) && (event.target.classList.contains('scrollbar') || event.target.classList.contains('slider'))) {\n\t\t\treturn { cancelContextMenu: true };\n\t\t}\n\n\t\t// Middle click\n\t\tif (event.which === 2) {\n\t\t\tswitch (this._terminalConfigurationService.config.middleClickBehavior) {\n\t\t\t\tcase 'paste':\n\t\t\t\t\tthis.paste();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'default':\n\t\t\t\tdefault:\n\t\t\t\t\t// Drop selection and focus terminal on Linux to enable middle button paste\n\t\t\t\t\t// when click occurs on the selection itself.\n\t\t\t\t\tthis.focus();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Right click\n\t\tif (event.which === 3) {\n\t\t\tconst rightClickBehavior = this._terminalConfigurationService.config.rightClickBehavior;\n\t\t\tif (rightClickBehavior === 'nothing') {\n\t\t\t\tif (!event.shiftKey) {\n\t\t\t\t\treturn { cancelContextMenu: true };\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (rightClickBehavior === 'copyPaste' || rightClickBehavior === 'paste') {\n\t\t\t\t// copyPaste: Shift+right click should open context menu\n\t\t\t\tif (rightClickBehavior === 'copyPaste' && event.shiftKey) {\n\t\t\t\t\topenContextMenu(dom.getActiveWindow(), event, this, contextMenu, this._contextMenuService);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rightClickBehavior === 'copyPaste' && this.hasSelection()) {\n\t\t\t\t\tawait this.copySelection();\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t} else {\n\t\t\t\t\tif (BrowserFeatures.clipboard.readText) {\n\t\t\t\t\t\tthis.paste();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._notificationService.info(`This browser doesn't support the clipboard.readText API needed to trigger a paste, try ${isMacintosh ? '\u2318' : 'Ctrl'}+V instead.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Clear selection after all click event bubbling is finished on Mac to prevent\n\t\t\t\t// right-click selecting a word which is seemed cannot be disabled. There is a\n\t\t\t\t// flicker when pasting but this appears to give the best experience if the\n\t\t\t\t// setting is enabled.\n\t\t\t\tif (isMacintosh) {\n\t\t\t\t\tsetTimeout(() => this.clearSelection(), 0);\n\t\t\t\t}\n\t\t\t\treturn { cancelContextMenu: true };\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass TerminalInstanceDragAndDropController extends Disposable implements dom.IDragAndDropObserverCallbacks {\n\tprivate _dropOverlay?: HTMLElement;\n\n\tprivate readonly _onDropFile = this._register(new Emitter<string | URI>());\n\tget onDropFile(): Event<string | URI> { return this._onDropFile.event; }\n\tprivate readonly _onDropTerminal = this._register(new Emitter<IRequestAddInstanceToGroupEvent>());\n\tget onDropTerminal(): Event<IRequestAddInstanceToGroupEvent> { return this._onDropTerminal.event; }\n\n\tconstructor(\n\t\tprivate readonly _container: HTMLElement,\n\t\t@IWorkbenchLayoutService private readonly _layoutService: IWorkbenchLayoutService,\n\t\t@IViewDescriptorService private readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => this._clearDropOverlay()));\n\t}\n\n\tprivate _clearDropOverlay() {\n\t\tthis._dropOverlay?.remove();\n\t\tthis._dropOverlay = undefined;\n\t}\n\n\tonDragEnter(e: DragEvent) {\n\t\tif (!containsDragType(e, DataTransfers.FILES, DataTransfers.RESOURCES, TerminalDataTransfers.Terminals, CodeDataTransfers.FILES)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._dropOverlay) {\n\t\t\tthis._dropOverlay = document.createElement('div');\n\t\t\tthis._dropOverlay.classList.add('terminal-drop-overlay');\n\t\t}\n\n\t\t// Dragging terminals\n\t\tif (containsDragType(e, TerminalDataTransfers.Terminals)) {\n\t\t\tconst side = this._getDropSide(e);\n\t\t\tthis._dropOverlay.classList.toggle('drop-before', side === 'before');\n\t\t\tthis._dropOverlay.classList.toggle('drop-after', side === 'after');\n\t\t}\n\n\t\tif (!this._dropOverlay.parentElement) {\n\t\t\tthis._container.appendChild(this._dropOverlay);\n\t\t}\n\t}\n\tonDragLeave(e: DragEvent) {\n\t\tthis._clearDropOverlay();\n\t}\n\n\tonDragEnd(e: DragEvent) {\n\t\tthis._clearDropOverlay();\n\t}\n\n\tonDragOver(e: DragEvent) {\n\t\tif (!e.dataTransfer || !this._dropOverlay) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Dragging terminals\n\t\tif (containsDragType(e, TerminalDataTransfers.Terminals)) {\n\t\t\tconst side = this._getDropSide(e);\n\t\t\tthis._dropOverlay.classList.toggle('drop-before', side === 'before');\n\t\t\tthis._dropOverlay.classList.toggle('drop-after', side === 'after');\n\t\t}\n\n\t\tthis._dropOverlay.style.opacity = '1';\n\t}\n\n\tasync onDrop(e: DragEvent) {\n\t\tthis._clearDropOverlay();\n\n\t\tif (!e.dataTransfer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst terminalResources = getTerminalResourcesFromDragEvent(e);\n\t\tif (terminalResources) {\n\t\t\tfor (const uri of terminalResources) {\n\t\t\t\tconst side = this._getDropSide(e);\n\t\t\t\tthis._onDropTerminal.fire({ uri, side });\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if files were dragged from the tree explorer\n\t\tlet path: URI | undefined;\n\t\tconst rawResources = e.dataTransfer.getData(DataTransfers.RESOURCES);\n\t\tif (rawResources) {\n\t\t\tpath = URI.parse(JSON.parse(rawResources)[0]);\n\t\t}\n\n\t\tconst rawCodeFiles = e.dataTransfer.getData(CodeDataTransfers.FILES);\n\t\tif (!path && rawCodeFiles) {\n\t\t\tpath = URI.file(JSON.parse(rawCodeFiles)[0]);\n\t\t}\n\n\t\tif (!path && e.dataTransfer.files.length > 0 && this._hostService.getPathForFile(e.dataTransfer.files[0])) {\n\t\t\t// Check if the file was dragged from the filesystem\n\t\t\tpath = URI.file(this._hostService.getPathForFile(e.dataTransfer.files[0])!);\n\t\t}\n\n\t\tif (!path) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDropFile.fire(path);\n\t}\n\n\tprivate _getDropSide(e: DragEvent): 'before' | 'after' {\n\t\tconst target = this._container;\n\t\tif (!target) {\n\t\t\treturn 'after';\n\t\t}\n\n\t\tconst rect = target.getBoundingClientRect();\n\t\treturn this._getViewOrientation() === Orientation.HORIZONTAL\n\t\t\t? (e.clientX - rect.left < rect.width / 2 ? 'before' : 'after')\n\t\t\t: (e.clientY - rect.top < rect.height / 2 ? 'before' : 'after');\n\t}\n\n\tprivate _getViewOrientation(): Orientation {\n\t\tconst panelPosition = this._layoutService.getPanelPosition();\n\t\tconst terminalLocation = this._viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID);\n\t\treturn terminalLocation === ViewContainerLocation.Panel && isHorizontal(panelPosition)\n\t\t\t? Orientation.HORIZONTAL\n\t\t\t: Orientation.VERTICAL;\n\t}\n}\n\ninterface ITerminalLabelTemplateProperties {\n\tcwd?: string | null | undefined;\n\tcwdFolder?: string | null | undefined;\n\tworkspaceFolderName?: string | null | undefined;\n\tworkspaceFolder?: string | null | undefined;\n\tlocal?: string | null | undefined;\n\tprocess?: string | null | undefined;\n\tsequence?: string | null | undefined;\n\ttask?: string | null | undefined;\n\tfixedDimensions?: string | null | undefined;\n\tseparator?: string | ISeparator | null | undefined;\n}\n\nconst enum TerminalLabelType {\n\tTitle = 'title',\n\tDescription = 'description'\n}\n\nexport class TerminalLabelComputer extends Disposable {\n\tprivate _title: string = '';\n\tprivate _description: string = '';\n\tget title(): string | undefined { return this._title; }\n\tget description(): string { return this._description; }\n\n\tprivate readonly _onDidChangeLabel = this._register(new Emitter<{ title: string; description: string }>());\n\treadonly onDidChangeLabel = this._onDidChangeLabel.event;\n\n\tconstructor(\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\t}\n\n\trefreshLabel(instance: Pick<ITerminalInstance, 'shellLaunchConfig' | 'cwd' | 'fixedCols' | 'fixedRows' | 'initialCwd' | 'processName' | 'sequence' | 'userHome' | 'workspaceFolder' | 'staticTitle' | 'capabilities' | 'title' | 'description'>, reset?: boolean): void {\n\t\tthis._title = this.computeLabel(instance, this._terminalConfigurationService.config.tabs.title, TerminalLabelType.Title, reset);\n\t\tthis._description = this.computeLabel(instance, this._terminalConfigurationService.config.tabs.description, TerminalLabelType.Description);\n\t\tif (this._title !== instance.title || this._description !== instance.description || reset) {\n\t\t\tthis._onDidChangeLabel.fire({ title: this._title, description: this._description });\n\t\t}\n\t}\n\n\tcomputeLabel(\n\t\tinstance: Pick<ITerminalInstance, 'shellLaunchConfig' | 'cwd' | 'fixedCols' | 'fixedRows' | 'initialCwd' | 'processName' | 'sequence' | 'userHome' | 'workspaceFolder' | 'staticTitle' | 'capabilities' | 'title' | 'description'>,\n\t\tlabelTemplate: string,\n\t\tlabelType: TerminalLabelType,\n\t\treset?: boolean\n\t) {\n\t\tconst type = instance.shellLaunchConfig.attachPersistentProcess?.type || instance.shellLaunchConfig.type;\n\t\tconst templateProperties: ITerminalLabelTemplateProperties = {\n\t\t\tcwd: instance.cwd || instance.initialCwd || '',\n\t\t\tcwdFolder: '',\n\t\t\tworkspaceFolderName: instance.workspaceFolder?.name,\n\t\t\tworkspaceFolder: instance.workspaceFolder ? path.basename(instance.workspaceFolder.uri.fsPath) : undefined,\n\t\t\tlocal: type === 'Local' ? terminalStrings.typeLocal : undefined,\n\t\t\tprocess: instance.processName,\n\t\t\tsequence: instance.sequence,\n\t\t\ttask: type === 'Task' ? terminalStrings.typeTask : undefined,\n\t\t\tfixedDimensions: instance.fixedCols\n\t\t\t\t? (instance.fixedRows ? `\\u2194${instance.fixedCols} \\u2195${instance.fixedRows}` : `\\u2194${instance.fixedCols}`)\n\t\t\t\t: (instance.fixedRows ? `\\u2195${instance.fixedRows}` : ''),\n\t\t\tseparator: { label: this._terminalConfigurationService.config.tabs.separator }\n\t\t};\n\t\ttemplateProperties.workspaceFolderName = instance.workspaceFolder?.name ?? templateProperties.workspaceFolder;\n\t\tlabelTemplate = labelTemplate.trim();\n\t\tif (!labelTemplate) {\n\t\t\treturn labelType === TerminalLabelType.Title ? (instance.processName || '') : '';\n\t\t}\n\t\tif (!reset && instance.staticTitle && labelType === TerminalLabelType.Title) {\n\t\t\treturn instance.staticTitle.replace(/[\\n\\r\\t]/g, '') || templateProperties.process?.replace(/[\\n\\r\\t]/g, '') || '';\n\t\t}\n\t\tconst detection = instance.capabilities.has(TerminalCapability.CwdDetection) || instance.capabilities.has(TerminalCapability.NaiveCwdDetection);\n\t\tconst folders = this._workspaceContextService.getWorkspace().folders;\n\t\tconst multiRootWorkspace = folders.length > 1;\n\n\t\t// Only set cwdFolder if detection is on\n\t\tif (templateProperties.cwd && detection && (!instance.shellLaunchConfig.isFeatureTerminal || labelType === TerminalLabelType.Title)) {\n\t\t\tconst cwdUri = URI.from({\n\t\t\t\tscheme: instance.workspaceFolder?.uri.scheme || Schemas.file,\n\t\t\t\tpath: instance.cwd ? path.resolve(instance.cwd) : undefined\n\t\t\t});\n\t\t\t// Multi-root workspaces always show cwdFolder to disambiguate them, otherwise only show\n\t\t\t// when it differs from the workspace folder in which it was launched from\n\t\t\tlet showCwd = false;\n\t\t\tif (multiRootWorkspace) {\n\t\t\t\tshowCwd = true;\n\t\t\t} else if (instance.workspaceFolder?.uri) {\n\t\t\t\tconst caseSensitive = this._fileService.hasCapability(instance.workspaceFolder.uri, FileSystemProviderCapabilities.PathCaseSensitive);\n\t\t\t\tshowCwd = cwdUri.fsPath.localeCompare(instance.workspaceFolder.uri.fsPath, undefined, { sensitivity: caseSensitive ? 'case' : 'base' }) !== 0;\n\t\t\t}\n\t\t\tif (showCwd) {\n\t\t\t\ttemplateProperties.cwdFolder = path.basename(templateProperties.cwd);\n\t\t\t}\n\t\t}\n\n\t\t// Remove special characters that could mess with rendering\n\t\tconst label = template(labelTemplate, (templateProperties as unknown) as { [key: string]: string | ISeparator | undefined | null }).replace(/[\\n\\r\\t]/g, '').trim();\n\t\treturn label === '' && labelType === TerminalLabelType.Title ? (instance.processName || '') : label;\n\t}\n}\n\nexport function parseExitResult(\n\texitCodeOrError: ITerminalLaunchError | number | undefined,\n\tshellLaunchConfig: IShellLaunchConfig,\n\tprocessState: ProcessState,\n\tinitialCwd: string | undefined\n): { code: number | undefined; message: string | undefined } | undefined {\n\t// Only return a message if the exit code is non-zero\n\tif (exitCodeOrError === undefined || exitCodeOrError === 0) {\n\t\treturn { code: exitCodeOrError, message: undefined };\n\t}\n\n\tconst code = typeof exitCodeOrError === 'number' ? exitCodeOrError : exitCodeOrError.code;\n\n\t// Create exit code message\n\tlet message: string | undefined = undefined;\n\tswitch (typeof exitCodeOrError) {\n\t\tcase 'number': {\n\t\t\tlet commandLine: string | undefined = undefined;\n\t\t\tif (shellLaunchConfig.executable) {\n\t\t\t\tcommandLine = shellLaunchConfig.executable;\n\t\t\t\tif (typeof shellLaunchConfig.args === 'string') {\n\t\t\t\t\tcommandLine += ` ${shellLaunchConfig.args}`;\n\t\t\t\t} else if (shellLaunchConfig.args && shellLaunchConfig.args.length) {\n\t\t\t\t\tcommandLine += shellLaunchConfig.args.map(a => ` '${a}'`).join();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (processState === ProcessState.KilledDuringLaunch) {\n\t\t\t\tif (commandLine) {\n\t\t\t\t\tmessage = nls.localize('launchFailed.exitCodeAndCommandLine', \"The terminal process \\\"{0}\\\" failed to launch (exit code: {1}).\", commandLine, code);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = nls.localize('launchFailed.exitCodeOnly', \"The terminal process failed to launch (exit code: {0}).\", code);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (commandLine) {\n\t\t\t\t\tmessage = nls.localize('terminated.exitCodeAndCommandLine', \"The terminal process \\\"{0}\\\" terminated with exit code: {1}.\", commandLine, code);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = nls.localize('terminated.exitCodeOnly', \"The terminal process terminated with exit code: {0}.\", code);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'object': {\n\t\t\t// Ignore internal errors\n\t\t\tif (exitCodeOrError.message.toString().includes('Could not find pty with id')) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Convert conpty code-based failures into human friendly messages\n\t\t\tlet innerMessage = exitCodeOrError.message;\n\t\t\tconst conptyError = exitCodeOrError.message.match(/.*error code:\\s*(\\d+).*$/);\n\t\t\tif (conptyError) {\n\t\t\t\tconst errorCode = conptyError.length > 1 ? parseInt(conptyError[1]) : undefined;\n\t\t\t\tswitch (errorCode) {\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tinnerMessage = `Access was denied to the path containing your executable \"${shellLaunchConfig.executable}\". Manage and change your permissions to get this to work`;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 267:\n\t\t\t\t\t\tinnerMessage = `Invalid starting directory \"${initialCwd}\", review your terminal.integrated.cwd setting`;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1260:\n\t\t\t\t\t\tinnerMessage = `Windows cannot open this program because it has been prevented by a software restriction policy. For more information, open Event Viewer or contact your system Administrator`;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmessage = nls.localize('launchFailed.errorMessage', \"The terminal process failed to launch: {0}.\", innerMessage);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn { code, message };\n}\n\n\nexport class TerminalInstanceColorProvider implements IXtermColorProvider {\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\t@IViewDescriptorService private readonly _viewDescriptorService: IViewDescriptorService,\n\t) {\n\t}\n\n\tgetBackgroundColor(theme: IColorTheme) {\n\t\tconst terminalBackground = theme.getColor(TERMINAL_BACKGROUND_COLOR);\n\t\tif (terminalBackground) {\n\t\t\treturn terminalBackground;\n\t\t}\n\t\tif (this._instance.target === TerminalLocation.Editor) {\n\t\t\treturn theme.getColor(editorBackground);\n\t\t}\n\t\tconst location = this._viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID)!;\n\t\tif (location === ViewContainerLocation.Panel) {\n\t\t\treturn theme.getColor(PANEL_BACKGROUND);\n\t\t}\n\t\treturn theme.getColor(SIDE_BAR_BACKGROUND);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants", "e", "xterm", "path", "TerminalLabelType"]
}
