var g=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var _=(h,d,e,i)=>{for(var t=i>1?void 0:i?D(d,e):d,n=h.length-1,s;n>=0;n--)(s=h[n])&&(t=(i?s(d,e,t):s(t))||t);return i&&t&&g(d,e,t),t},p=(h,d)=>(e,i)=>d(e,i,h);import{Emitter as u}from"../../../../../vs/base/common/event.js";import{Disposable as y,dispose as f,toDisposable as C}from"../../../../../vs/base/common/lifecycle.js";import{URI as S}from"../../../../../vs/base/common/uri.js";import{IContextKeyService as T}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{EditorActivation as R}from"../../../../../vs/platform/editor/common/editor.js";import{IInstantiationService as b}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{TerminalLocation as l}from"../../../../../vs/platform/terminal/common/terminal.js";import"../../../../../vs/workbench/common/editor.js";import"../../../../../vs/workbench/common/editor/editorInput.js";import{ITerminalInstanceService as w}from"../../../../../vs/workbench/contrib/terminal/browser/terminal.js";import{TerminalEditorInput as c}from"../../../../../vs/workbench/contrib/terminal/browser/terminalEditorInput.js";import{getInstanceFromResource as A}from"../../../../../vs/workbench/contrib/terminal/browser/terminalUri.js";import{TerminalContextKeys as x}from"../../../../../vs/workbench/contrib/terminal/common/terminalContextKey.js";import{IEditorGroupsService as P}from"../../../../../vs/workbench/services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as F,IEditorService as G,SIDE_GROUP as K}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{ILifecycleService as L}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";let v=class extends y{constructor(e,i,t,n,s,E){super();this._editorService=e;this._editorGroupsService=i;this._terminalInstanceService=t;this._instantiationService=n;this._terminalEditorActive=x.terminalEditorActive.bindTo(E),this._register(C(()=>{for(const r of this._instanceDisposables.values())f(r)})),this._register(s.onWillShutdown(()=>this._isShuttingDown=!0)),this._register(this._editorService.onDidActiveEditorChange(()=>{const r=this._editorService.activeEditor,I=r instanceof c?r?.terminalInstance:void 0,o=!!I&&r instanceof c;if(this._terminalEditorActive.set(o),o)r?.setGroup(this._editorService.activeEditorPane?.group),this.setActiveInstance(I);else for(const a of this.instances)a.resetFocusContextKey()})),this._register(this._editorService.onDidVisibleEditorsChange(()=>{const r=this.instances.map(a=>a.instanceId),o=this._getActiveTerminalEditors().find(a=>{const m=a instanceof c?a.terminalInstance?.instanceId:void 0;return m===void 0?!1:!r.includes(m)});o instanceof c&&o.terminalInstance&&(this._editorInputs.set(o.terminalInstance.resource.path,o),this.instances.push(o.terminalInstance))})),this._register(this._editorService.onDidCloseEditor(r=>{const I=r.editor instanceof c?r.editor.terminalInstance:void 0;if(I){const o=this.instances.findIndex(a=>a===I);if(o!==-1){const a=this.instances[o]===this.activeInstance;this._removeInstance(I),a&&this.setActiveInstance(void 0)}}}))}instances=[];_activeInstanceIndex=-1;_isShuttingDown=!1;_activeOpenEditorRequest;_terminalEditorActive;_editorInputs=new Map;_instanceDisposables=new Map;_onDidDisposeInstance=this._register(new u);onDidDisposeInstance=this._onDidDisposeInstance.event;_onDidFocusInstance=this._register(new u);onDidFocusInstance=this._onDidFocusInstance.event;_onDidChangeInstanceCapability=this._register(new u);onDidChangeInstanceCapability=this._onDidChangeInstanceCapability.event;_onDidChangeActiveInstance=this._register(new u);onDidChangeActiveInstance=this._onDidChangeActiveInstance.event;_onDidChangeInstances=this._register(new u);onDidChangeInstances=this._onDidChangeInstances.event;_getActiveTerminalEditors(){return this._editorService.visibleEditors.filter(e=>e instanceof c&&e.terminalInstance?.instanceId)}get activeInstance(){if(!(this.instances.length===0||this._activeInstanceIndex===-1))return this.instances[this._activeInstanceIndex]}setActiveInstance(e){this._activeInstanceIndex=e?this.instances.findIndex(i=>i===e):-1,this._onDidChangeActiveInstance.fire(this.activeInstance)}async focusInstance(e){return e.focusWhenReady(!0)}async focusActiveInstance(){return this.activeInstance?.focusWhenReady(!0)}async openEditor(e,i){const t=this.resolveResource(e);t&&(await this._activeOpenEditorRequest?.promise,this._activeOpenEditorRequest={instanceId:e.instanceId,promise:this._editorService.openEditor({resource:t,description:e.description||e.shellLaunchConfig.type,options:{pinned:!0,forceReload:!0,preserveFocus:i?.preserveFocus}},i?.viewColumn??F)},await this._activeOpenEditorRequest?.promise,this._activeOpenEditorRequest=void 0)}resolveResource(e){const i=e.resource,t=i.path,n=this._editorInputs.get(t);if(n)return n.resource;e.target=l.Editor;const s=this._instantiationService.createInstance(c,i,e);return this._registerInstance(t,s,e),s.resource}getInputFromResource(e){const i=this._editorInputs.get(e.path);if(!i)throw new Error(`Could not get input from resource: ${e.path}`);return i}_registerInstance(e,i,t){this._editorInputs.set(e,i),this._instanceDisposables.set(e,[t.onDidFocus(this._onDidFocusInstance.fire,this._onDidFocusInstance),t.onDisposed(this._onDidDisposeInstance.fire,this._onDidDisposeInstance),t.capabilities.onDidAddCapabilityType(()=>this._onDidChangeInstanceCapability.fire(t)),t.capabilities.onDidRemoveCapabilityType(()=>this._onDidChangeInstanceCapability.fire(t))]),this.instances.push(t),this._onDidChangeInstances.fire()}_removeInstance(e){const i=e.resource.path;this._editorInputs.delete(i);const t=this.instances.findIndex(s=>s===e);t!==-1&&this.instances.splice(t,1);const n=this._instanceDisposables.get(i);this._instanceDisposables.delete(i),n&&f(n),this._onDidChangeInstances.fire()}getInstanceFromResource(e){return A(this.instances,e)}splitInstance(e,i={}){if(e.target===l.Editor){const s=this._editorInputs.get(e.resource.path)?.group;s&&this._editorGroupsService.activateGroup(s)}const t=this._terminalInstanceService.createInstance(i,l.Editor),n=this.resolveResource(t);return n&&this._editorService.openEditor({resource:S.revive(n),description:t.description,options:{pinned:!0,forceReload:!0}},K),t}reviveInput(e){if("pid"in e){const i={...e,findRevivedId:!0},t=this._terminalInstanceService.createInstance({attachPersistentProcess:i},l.Editor),n=this._instantiationService.createInstance(c,t.resource,t);return this._registerInstance(t.resource.path,n,t),n}else throw new Error(`Could not revive terminal editor input, ${e}`)}detachInstance(e){const i=e.resource.path,t=this._editorInputs.get(i);t?.detachInstance(),this._removeInstance(e),this._isShuttingDown||t?.dispose()}async revealActiveEditor(e){const i=this.activeInstance;if(!i||this._activeOpenEditorRequest?.instanceId===i.instanceId)return;const t=this._editorInputs.get(i.resource.path);this._editorService.openEditor(t,{pinned:!0,forceReload:!0,preserveFocus:e,activation:R.PRESERVE})}};v=_([p(0,G),p(1,P),p(2,w),p(3,b),p(4,L),p(5,T)],v);export{v as TerminalEditorService};
