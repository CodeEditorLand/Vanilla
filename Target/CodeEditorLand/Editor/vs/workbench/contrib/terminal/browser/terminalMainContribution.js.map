{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalMainContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { TerminalLocation } from \"../../../../platform/terminal/common/terminal.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tIEditorResolverService,\n\tRegisteredEditorPriority,\n} from \"../../../services/editor/common/editorResolverService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IEmbedderTerminalService } from \"../../../services/terminal/common/embedderTerminalService.js\";\nimport { terminalStrings } from \"../common/terminalStrings.js\";\nimport {\n\tITerminalEditorService,\n\tITerminalGroupService,\n\tITerminalInstanceService,\n\tITerminalService,\n\tterminalEditorId,\n} from \"./terminal.js\";\nimport { parseTerminalUri } from \"./terminalUri.js\";\n\n/**\n * The main contribution for the terminal contrib. This contains calls to other components necessary\n * to set up the terminal but don't need to be tracked in the long term (where TerminalService would\n * be more relevant).\n */\nexport class TerminalMainContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic ID = \"terminalMain\";\n\n\tconstructor(\n\t\t@IEditorResolverService editorResolverService: IEditorResolverService,\n\t\t@IEmbedderTerminalService\n\t\tembedderTerminalService: IEmbedderTerminalService,\n\t\t@IWorkbenchEnvironmentService\n\t\tworkbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@ITerminalService terminalService: ITerminalService,\n\t\t@ITerminalEditorService terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalGroupService terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService,\n\t) {\n\t\tsuper();\n\n\t\tthis._init(\n\t\t\teditorResolverService,\n\t\t\tembedderTerminalService,\n\t\t\tworkbenchEnvironmentService,\n\t\t\tlabelService,\n\t\t\tlifecycleService,\n\t\t\tterminalService,\n\t\t\tterminalEditorService,\n\t\t\tterminalGroupService,\n\t\t\tterminalInstanceService,\n\t\t);\n\t}\n\n\tprivate async _init(\n\t\teditorResolverService: IEditorResolverService,\n\t\tembedderTerminalService: IEmbedderTerminalService,\n\t\tworkbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\tlabelService: ILabelService,\n\t\tlifecycleService: ILifecycleService,\n\t\tterminalService: ITerminalService,\n\t\tterminalEditorService: ITerminalEditorService,\n\t\tterminalGroupService: ITerminalGroupService,\n\t\tterminalInstanceService: ITerminalInstanceService,\n\t) {\n\t\t// IMPORTANT: This listener needs to be set up before the workbench is ready to support\n\t\t// embedder terminals.\n\t\tthis._register(\n\t\t\tembedderTerminalService.onDidCreateTerminal(\n\t\t\t\tasync (embedderTerminal) => {\n\t\t\t\t\tconst terminal = await terminalService.createTerminal({\n\t\t\t\t\t\tconfig: embedderTerminal,\n\t\t\t\t\t\tlocation: TerminalLocation.Panel,\n\t\t\t\t\t\tskipContributedProfileCheck: true,\n\t\t\t\t\t});\n\t\t\t\t\tterminalService.setActiveInstance(terminal);\n\t\t\t\t\tawait terminalService.revealActiveTerminal();\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tawait lifecycleService.when(LifecyclePhase.Restored);\n\n\t\t// Register terminal editors\n\t\tthis._register(\n\t\t\teditorResolverService.registerEditor(\n\t\t\t\t`${Schemas.vscodeTerminal}:/**`,\n\t\t\t\t{\n\t\t\t\t\tid: terminalEditorId,\n\t\t\t\t\tlabel: terminalStrings.terminal,\n\t\t\t\t\tpriority: RegisteredEditorPriority.exclusive,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcanSupportResource: (uri) =>\n\t\t\t\t\t\turi.scheme === Schemas.vscodeTerminal,\n\t\t\t\t\tsinglePerResource: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcreateEditorInput: async ({ resource, options }) => {\n\t\t\t\t\t\tlet instance =\n\t\t\t\t\t\t\tterminalService.getInstanceFromResource(resource);\n\t\t\t\t\t\tif (instance) {\n\t\t\t\t\t\t\tconst sourceGroup =\n\t\t\t\t\t\t\t\tterminalGroupService.getGroupForInstance(\n\t\t\t\t\t\t\t\t\tinstance,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsourceGroup?.removeInstance(instance);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Terminal from a different window\n\t\t\t\t\t\t\tconst terminalIdentifier =\n\t\t\t\t\t\t\t\tparseTerminalUri(resource);\n\t\t\t\t\t\t\tif (!terminalIdentifier.instanceId) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\"Terminal identifier without instanceId\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst primaryBackend =\n\t\t\t\t\t\t\t\tterminalService.getPrimaryBackend();\n\t\t\t\t\t\t\tif (!primaryBackend) {\n\t\t\t\t\t\t\t\tthrow new Error(\"No terminal primary backend\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst attachPersistentProcess =\n\t\t\t\t\t\t\t\tawait primaryBackend.requestDetachInstance(\n\t\t\t\t\t\t\t\t\tterminalIdentifier.workspaceId,\n\t\t\t\t\t\t\t\t\tterminalIdentifier.instanceId,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!attachPersistentProcess) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\"No terminal persistent process to attach\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinstance = terminalInstanceService.createInstance(\n\t\t\t\t\t\t\t\t{ attachPersistentProcess },\n\t\t\t\t\t\t\t\tTerminalLocation.Editor,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst resolvedResource =\n\t\t\t\t\t\t\tterminalEditorService.resolveResource(instance);\n\t\t\t\t\t\tconst editor =\n\t\t\t\t\t\t\tterminalEditorService.getInputFromResource(\n\t\t\t\t\t\t\t\tresolvedResource,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\teditor,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\t\t\tforceReload: true,\n\t\t\t\t\t\t\t\toverride: terminalEditorId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\t// Register a resource formatter for terminal URIs\n\t\tthis._register(\n\t\t\tlabelService.registerFormatter({\n\t\t\t\tscheme: Schemas.vscodeTerminal,\n\t\t\t\tformatting: {\n\t\t\t\t\tlabel: \"${path}\",\n\t\t\t\t\tseparator: \"\",\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
