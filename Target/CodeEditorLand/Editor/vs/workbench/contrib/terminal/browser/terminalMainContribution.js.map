{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalMainContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { TerminalLocation } from '../../../../platform/terminal/common/terminal.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { ITerminalEditorService, ITerminalGroupService, ITerminalInstanceService, ITerminalService, terminalEditorId } from './terminal.js';\nimport { parseTerminalUri } from './terminalUri.js';\nimport { terminalStrings } from '../common/terminalStrings.js';\nimport { IEditorResolverService, RegisteredEditorPriority } from '../../../services/editor/common/editorResolverService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { ILifecycleService, LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IEmbedderTerminalService } from '../../../services/terminal/common/embedderTerminalService.js';\n\n/**\n * The main contribution for the terminal contrib. This contains calls to other components necessary\n * to set up the terminal but don't need to be tracked in the long term (where TerminalService would\n * be more relevant).\n */\nexport class TerminalMainContribution extends Disposable implements IWorkbenchContribution {\n\tstatic ID = 'terminalMain';\n\n\tconstructor(\n\t\t@IEditorResolverService editorResolverService: IEditorResolverService,\n\t\t@IEmbedderTerminalService embedderTerminalService: IEmbedderTerminalService,\n\t\t@IWorkbenchEnvironmentService workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@ITerminalService terminalService: ITerminalService,\n\t\t@ITerminalEditorService terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalGroupService terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService\n\t) {\n\t\tsuper();\n\n\t\tthis._init(\n\t\t\teditorResolverService,\n\t\t\tembedderTerminalService,\n\t\t\tworkbenchEnvironmentService,\n\t\t\tlabelService,\n\t\t\tlifecycleService,\n\t\t\tterminalService,\n\t\t\tterminalEditorService,\n\t\t\tterminalGroupService,\n\t\t\tterminalInstanceService\n\t\t);\n\t}\n\n\tprivate async _init(\n\t\teditorResolverService: IEditorResolverService,\n\t\tembedderTerminalService: IEmbedderTerminalService,\n\t\tworkbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\tlabelService: ILabelService,\n\t\tlifecycleService: ILifecycleService,\n\t\tterminalService: ITerminalService,\n\t\tterminalEditorService: ITerminalEditorService,\n\t\tterminalGroupService: ITerminalGroupService,\n\t\tterminalInstanceService: ITerminalInstanceService\n\t) {\n\t\t// IMPORTANT: This listener needs to be set up before the workbench is ready to support\n\t\t// embedder terminals.\n\t\tthis._register(embedderTerminalService.onDidCreateTerminal(async embedderTerminal => {\n\t\t\tconst terminal = await terminalService.createTerminal({\n\t\t\t\tconfig: embedderTerminal,\n\t\t\t\tlocation: TerminalLocation.Panel,\n\t\t\t\tskipContributedProfileCheck: true,\n\t\t\t});\n\t\t\tterminalService.setActiveInstance(terminal);\n\t\t\tawait terminalService.revealActiveTerminal();\n\t\t}));\n\n\t\tawait lifecycleService.when(LifecyclePhase.Restored);\n\n\t\t// Register terminal editors\n\t\tthis._register(editorResolverService.registerEditor(\n\t\t\t`${Schemas.vscodeTerminal}:/**`,\n\t\t\t{\n\t\t\t\tid: terminalEditorId,\n\t\t\t\tlabel: terminalStrings.terminal,\n\t\t\t\tpriority: RegisteredEditorPriority.exclusive\n\t\t\t},\n\t\t\t{\n\t\t\t\tcanSupportResource: uri => uri.scheme === Schemas.vscodeTerminal,\n\t\t\t\tsinglePerResource: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreateEditorInput: async ({ resource, options }) => {\n\t\t\t\t\tlet instance = terminalService.getInstanceFromResource(resource);\n\t\t\t\t\tif (instance) {\n\t\t\t\t\t\tconst sourceGroup = terminalGroupService.getGroupForInstance(instance);\n\t\t\t\t\t\tsourceGroup?.removeInstance(instance);\n\t\t\t\t\t} else { // Terminal from a different window\n\t\t\t\t\t\tconst terminalIdentifier = parseTerminalUri(resource);\n\t\t\t\t\t\tif (!terminalIdentifier.instanceId) {\n\t\t\t\t\t\t\tthrow new Error('Terminal identifier without instanceId');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst primaryBackend = terminalService.getPrimaryBackend();\n\t\t\t\t\t\tif (!primaryBackend) {\n\t\t\t\t\t\t\tthrow new Error('No terminal primary backend');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst attachPersistentProcess = await primaryBackend.requestDetachInstance(terminalIdentifier.workspaceId, terminalIdentifier.instanceId);\n\t\t\t\t\t\tif (!attachPersistentProcess) {\n\t\t\t\t\t\t\tthrow new Error('No terminal persistent process to attach');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinstance = terminalInstanceService.createInstance({ attachPersistentProcess }, TerminalLocation.Editor);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst resolvedResource = terminalEditorService.resolveResource(instance);\n\t\t\t\t\tconst editor = terminalEditorService.getInputFromResource(resolvedResource);\n\t\t\t\t\treturn {\n\t\t\t\t\t\teditor,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\t\tforceReload: true,\n\t\t\t\t\t\t\toverride: terminalEditorId\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\t\t// Register a resource formatter for terminal URIs\n\t\tthis._register(labelService.registerFormatter({\n\t\t\tscheme: Schemas.vscodeTerminal,\n\t\t\tformatting: {\n\t\t\t\tlabel: '${path}',\n\t\t\t\tseparator: ''\n\t\t\t}\n\t\t}));\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,SAAS,8BAA8B;AACvC,SAAS,wBAAwB,uBAAuB,0BAA0B,kBAAkB,wBAAwB;AAC5H,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,wBAAwB,gCAAgC;AACjE,SAAS,oCAAoC;AAC7C,SAAS,mBAAmB,sBAAsB;AAClD,SAAS,gCAAgC;AAOlC,IAAM,2BAAN,cAAuC,WAA6C;AAAA,EAvB3F,OAuB2F;AAAA;AAAA;AAAA,EAC1F,OAAO,KAAK;AAAA,EAEZ,YACyB,uBACE,yBACI,6BACf,cACI,kBACD,iBACM,uBACD,sBACG,yBACzB;AACD,UAAM;AAEN,SAAK;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,MACb,uBACA,yBACA,6BACA,cACA,kBACA,iBACA,uBACA,sBACA,yBACC;AAGD,SAAK,UAAU,wBAAwB,oBAAoB,OAAM,qBAAoB;AACpF,YAAM,WAAW,MAAM,gBAAgB,eAAe;AAAA,QACrD,QAAQ;AAAA,QACR,UAAU,iBAAiB;AAAA,QAC3B,6BAA6B;AAAA,MAC9B,CAAC;AACD,sBAAgB,kBAAkB,QAAQ;AAC1C,YAAM,gBAAgB,qBAAqB;AAAA,IAC5C,CAAC,CAAC;AAEF,UAAM,iBAAiB,KAAK,eAAe,QAAQ;AAGnD,SAAK,UAAU,sBAAsB;AAAA,MACpC,GAAG,QAAQ,cAAc;AAAA,MACzB;AAAA,QACC,IAAI;AAAA,QACJ,OAAO,gBAAgB;AAAA,QACvB,UAAU,yBAAyB;AAAA,MACpC;AAAA,MACA;AAAA,QACC,oBAAoB,gCAAO,IAAI,WAAW,QAAQ,gBAA9B;AAAA,QACpB,mBAAmB;AAAA,MACpB;AAAA,MACA;AAAA,QACC,mBAAmB,8BAAO,EAAE,UAAU,QAAQ,MAAM;AACnD,cAAI,WAAW,gBAAgB,wBAAwB,QAAQ;AAC/D,cAAI,UAAU;AACb,kBAAM,cAAc,qBAAqB,oBAAoB,QAAQ;AACrE,yBAAa,eAAe,QAAQ;AAAA,UACrC,OAAO;AACN,kBAAM,qBAAqB,iBAAiB,QAAQ;AACpD,gBAAI,CAAC,mBAAmB,YAAY;AACnC,oBAAM,IAAI,MAAM,wCAAwC;AAAA,YACzD;AAEA,kBAAM,iBAAiB,gBAAgB,kBAAkB;AACzD,gBAAI,CAAC,gBAAgB;AACpB,oBAAM,IAAI,MAAM,6BAA6B;AAAA,YAC9C;AAEA,kBAAM,0BAA0B,MAAM,eAAe,sBAAsB,mBAAmB,aAAa,mBAAmB,UAAU;AACxI,gBAAI,CAAC,yBAAyB;AAC7B,oBAAM,IAAI,MAAM,0CAA0C;AAAA,YAC3D;AACA,uBAAW,wBAAwB,eAAe,EAAE,wBAAwB,GAAG,iBAAiB,MAAM;AAAA,UACvG;AAEA,gBAAM,mBAAmB,sBAAsB,gBAAgB,QAAQ;AACvE,gBAAM,SAAS,sBAAsB,qBAAqB,gBAAgB;AAC1E,iBAAO;AAAA,YACN;AAAA,YACA,SAAS;AAAA,cACR,GAAG;AAAA,cACH,QAAQ;AAAA,cACR,aAAa;AAAA,cACb,UAAU;AAAA,YACX;AAAA,UACD;AAAA,QACD,GAlCmB;AAAA,MAmCpB;AAAA,IACD,CAAC;AAGD,SAAK,UAAU,aAAa,kBAAkB;AAAA,MAC7C,QAAQ,QAAQ;AAAA,MAChB,YAAY;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,MACZ;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AACD;AAlHa,2BAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAZU;",
  "names": []
}
