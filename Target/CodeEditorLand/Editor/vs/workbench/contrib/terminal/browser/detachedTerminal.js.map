{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/detachedTerminal.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { Delayer } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { OperatingSystem } from '../../../../base/common/platform.js';\nimport { MicrotaskDelay } from '../../../../base/common/symbols.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { TerminalCapabilityStore } from '../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { IMergedEnvironmentVariableCollection } from '../../../../platform/terminal/common/environmentVariable.js';\nimport { ITerminalBackend } from '../../../../platform/terminal/common/terminal.js';\nimport { IDetachedTerminalInstance, IDetachedXTermOptions, IDetachedXtermTerminal, ITerminalContribution, IXtermAttachToElementOptions } from './terminal.js';\nimport { TerminalExtensionsRegistry } from './terminalExtensions.js';\nimport { TerminalWidgetManager } from './widgets/widgetManager.js';\nimport { XtermTerminal } from './xterm/xtermTerminal.js';\nimport { IEnvironmentVariableInfo } from '../common/environmentVariable.js';\nimport { ITerminalProcessInfo, ProcessState } from '../common/terminal.js';\n\nexport class DetachedTerminal extends Disposable implements IDetachedTerminalInstance {\n\tprivate readonly _widgets = this._register(new TerminalWidgetManager());\n\tpublic readonly capabilities = new TerminalCapabilityStore();\n\tprivate readonly _contributions: Map<string, ITerminalContribution> = new Map();\n\n\tpublic domElement?: HTMLElement;\n\n\tpublic get xterm(): IDetachedXtermTerminal {\n\t\treturn this._xterm;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _xterm: XtermTerminal,\n\t\toptions: IDetachedXTermOptions,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(_xterm);\n\n\t\t// Initialize contributions\n\t\tconst contributionDescs = TerminalExtensionsRegistry.getTerminalContributions();\n\t\tfor (const desc of contributionDescs) {\n\t\t\tif (this._contributions.has(desc.id)) {\n\t\t\t\tonUnexpectedError(new Error(`Cannot have two terminal contributions with the same id ${desc.id}`));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (desc.canRunInDetachedTerminals === false) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet contribution: ITerminalContribution;\n\t\t\ttry {\n\t\t\t\tcontribution = instantiationService.createInstance(desc.ctor, this, options.processInfo, this._widgets);\n\t\t\t\tthis._contributions.set(desc.id, contribution);\n\t\t\t\tthis._register(contribution);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\t// xterm is already by the time DetachedTerminal is created, so trigger everything\n\t\t// on the next microtask, allowing the caller to do any extra initialization\n\t\tthis._register(new Delayer(MicrotaskDelay)).trigger(() => {\n\t\t\tfor (const contr of this._contributions.values()) {\n\t\t\t\tcontr.xtermReady?.(this._xterm);\n\t\t\t}\n\t\t});\n\t}\n\n\tget selection(): string | undefined {\n\t\treturn this._xterm && this.hasSelection() ? this._xterm.raw.getSelection() : undefined;\n\t}\n\n\thasSelection(): boolean {\n\t\treturn this._xterm.hasSelection();\n\t}\n\n\tclearSelection(): void {\n\t\tthis._xterm.clearSelection();\n\t}\n\n\tfocus(force?: boolean): void {\n\t\tif (force || !dom.getActiveWindow().getSelection()?.toString()) {\n\t\t\tthis.xterm.focus();\n\t\t}\n\t}\n\n\tattachToElement(container: HTMLElement, options?: Partial<IXtermAttachToElementOptions> | undefined): void {\n\t\tthis.domElement = container;\n\t\tconst screenElement = this._xterm.attachToElement(container, options);\n\t\tthis._widgets.attachToElement(screenElement);\n\t}\n\n\tforceScrollbarVisibility(): void {\n\t\tthis.domElement?.classList.add('force-scrollbar');\n\t}\n\n\tresetScrollbarVisibility(): void {\n\t\tthis.domElement?.classList.remove('force-scrollbar');\n\t}\n\n\tgetContribution<T extends ITerminalContribution>(id: string): T | null {\n\t\treturn this._contributions.get(id) as T | null;\n\t}\n}\n\n/**\n * Implements {@link ITerminalProcessInfo} for a detached terminal where most\n * properties are stubbed. Properties are mutable and can be updated by\n * the instantiator.\n */\nexport class DetachedProcessInfo implements ITerminalProcessInfo {\n\tprocessState = ProcessState.Running;\n\tptyProcessReady = Promise.resolve();\n\tshellProcessId: number | undefined;\n\tremoteAuthority: string | undefined;\n\tos: OperatingSystem | undefined;\n\tuserHome: string | undefined;\n\tinitialCwd = '';\n\tenvironmentVariableInfo: IEnvironmentVariableInfo | undefined;\n\tpersistentProcessId: number | undefined;\n\tshouldPersist = false;\n\thasWrittenData = false;\n\thasChildProcesses = false;\n\tbackend: ITerminalBackend | undefined;\n\tcapabilities = new TerminalCapabilityStore();\n\tshellIntegrationNonce = '';\n\textEnvironmentVariableCollection: IMergedEnvironmentVariableCollection | undefined;\n\n\tconstructor(initialValues: Partial<ITerminalProcessInfo>) {\n\t\tObject.assign(this, initialValues);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
