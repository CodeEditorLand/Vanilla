{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/remotePty.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from \"../../../../base/common/async.js\";\nimport {\n\ttype IProcessPropertyMap,\n\ttype ITerminalChildProcess,\n\ttype ITerminalLaunchError,\n\tITerminalLogService,\n\ttype ProcessPropertyType,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport { BasePty } from \"../common/basePty.js\";\nimport type { RemoteTerminalChannelClient } from \"../common/remote/remoteTerminalChannel.js\";\n\nexport class RemotePty extends BasePty implements ITerminalChildProcess {\n\tprivate readonly _startBarrier: Barrier;\n\n\tconstructor(\n\t\tid: number,\n\t\tshouldPersist: boolean,\n\t\tprivate readonly _remoteTerminalChannel: RemoteTerminalChannelClient,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService\n\t) {\n\t\tsuper(id, shouldPersist);\n\t\tthis._startBarrier = new Barrier();\n\t}\n\n\tasync start(): Promise<\n\t\tITerminalLaunchError | { injectedArgs: string[] } | undefined\n\t> {\n\t\t// Fetch the environment to check shell permissions\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (!env) {\n\t\t\t// Extension host processes are only allowed in remote extension hosts currently\n\t\t\tthrow new Error(\"Could not fetch remote environment\");\n\t\t}\n\n\t\tthis._logService.trace(\"Spawning remote agent process\", {\n\t\t\tterminalId: this.id,\n\t\t});\n\n\t\tconst startResult = await this._remoteTerminalChannel.start(this.id);\n\n\t\tif (startResult && \"message\" in startResult) {\n\t\t\t// An error occurred\n\t\t\treturn startResult;\n\t\t}\n\n\t\tthis._startBarrier.open();\n\t\treturn startResult;\n\t}\n\n\tasync detach(forcePersist?: boolean): Promise<void> {\n\t\tawait this._startBarrier.wait();\n\t\treturn this._remoteTerminalChannel.detachFromProcess(\n\t\t\tthis.id,\n\t\t\tforcePersist,\n\t\t);\n\t}\n\n\tshutdown(immediate: boolean): void {\n\t\tthis._startBarrier.wait().then((_) => {\n\t\t\tthis._remoteTerminalChannel.shutdown(this.id, immediate);\n\t\t});\n\t}\n\n\tinput(data: string): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startBarrier.wait().then((_) => {\n\t\t\tthis._remoteTerminalChannel.input(this.id, data);\n\t\t});\n\t}\n\n\tprocessBinary(e: string): Promise<void> {\n\t\treturn this._remoteTerminalChannel.processBinary(this.id, e);\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tif (\n\t\t\tthis._inReplay ||\n\t\t\t(this._lastDimensions.cols === cols &&\n\t\t\t\tthis._lastDimensions.rows === rows)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._startBarrier.wait().then((_) => {\n\t\t\tthis._lastDimensions.cols = cols;\n\t\t\tthis._lastDimensions.rows = rows;\n\t\t\tthis._remoteTerminalChannel.resize(this.id, cols, rows);\n\t\t});\n\t}\n\n\tasync clearBuffer(): Promise<void> {\n\t\tawait this._remoteTerminalChannel.clearBuffer(this.id);\n\t}\n\n\tfreePortKillProcess(\n\t\tport: string,\n\t): Promise<{ port: string; processId: string }> {\n\t\tif (!this._remoteTerminalChannel.freePortKillProcess) {\n\t\t\tthrow new Error(\n\t\t\t\t\"freePortKillProcess does not exist on the local pty service\",\n\t\t\t);\n\t\t}\n\t\treturn this._remoteTerminalChannel.freePortKillProcess(port);\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// Support flow control for server spawned processes\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startBarrier.wait().then((_) => {\n\t\t\tthis._remoteTerminalChannel.acknowledgeDataEvent(\n\t\t\t\tthis.id,\n\t\t\t\tcharCount,\n\t\t\t);\n\t\t});\n\t}\n\n\tasync setUnicodeVersion(version: \"6\" | \"11\"): Promise<void> {\n\t\treturn this._remoteTerminalChannel.setUnicodeVersion(this.id, version);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._remoteTerminalChannel.refreshProperty(this.id, type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\treturn this._remoteTerminalChannel.updateProperty(this.id, type, value);\n\t}\n\n\thandleOrphanQuestion() {\n\t\tthis._remoteTerminalChannel.orphanQuestionReply(this.id);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
