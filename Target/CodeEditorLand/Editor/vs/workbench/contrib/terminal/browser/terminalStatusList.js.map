{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalStatusList.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { TerminalSettingId } from \"../../../../platform/terminal/common/terminal.js\";\nimport {\n\tlistErrorForeground,\n\tlistWarningForeground,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { spinningLoading } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport type { ITerminalStatus } from \"../common/terminal.js\";\n\n/**\n * The set of _internal_ terminal statuses, other components building on the terminal should put\n * their statuses within their component.\n */\nexport enum TerminalStatus {\n\tBell = \"bell\",\n\tDisconnected = \"disconnected\",\n\tRelaunchNeeded = \"relaunch-needed\",\n\tEnvironmentVariableInfoChangesActive = \"env-var-info-changes-active\",\n\tShellIntegrationAttentionNeeded = \"shell-integration-attention-needed\",\n}\n\nexport interface ITerminalStatusList {\n\t/** Gets the most recent, highest severity status. */\n\treadonly primary: ITerminalStatus | undefined;\n\t/** Gets all active statues. */\n\treadonly statuses: ITerminalStatus[];\n\n\treadonly onDidAddStatus: Event<ITerminalStatus>;\n\treadonly onDidRemoveStatus: Event<ITerminalStatus>;\n\treadonly onDidChangePrimaryStatus: Event<ITerminalStatus | undefined>;\n\n\t/**\n\t * Adds a status to the list.\n\t * @param status The status object. Ideally a single status object that does not change will be\n\t * shared as this call will no-op if the status is already set (checked by by object reference).\n\t * @param duration An optional duration in milliseconds of the status, when specified the status\n\t * will remove itself when the duration elapses unless the status gets re-added.\n\t */\n\tadd(status: ITerminalStatus, duration?: number): void;\n\tremove(status: ITerminalStatus): void;\n\tremove(statusId: string): void;\n\ttoggle(status: ITerminalStatus, value: boolean): void;\n}\n\nexport class TerminalStatusList\n\textends Disposable\n\timplements ITerminalStatusList\n{\n\tprivate readonly _statuses: Map<string, ITerminalStatus> = new Map();\n\tprivate readonly _statusTimeouts: Map<string, number> = new Map();\n\n\tprivate readonly _onDidAddStatus = this._register(\n\t\tnew Emitter<ITerminalStatus>(),\n\t);\n\tget onDidAddStatus(): Event<ITerminalStatus> {\n\t\treturn this._onDidAddStatus.event;\n\t}\n\tprivate readonly _onDidRemoveStatus = this._register(\n\t\tnew Emitter<ITerminalStatus>(),\n\t);\n\tget onDidRemoveStatus(): Event<ITerminalStatus> {\n\t\treturn this._onDidRemoveStatus.event;\n\t}\n\tprivate readonly _onDidChangePrimaryStatus = this._register(\n\t\tnew Emitter<ITerminalStatus | undefined>(),\n\t);\n\tget onDidChangePrimaryStatus(): Event<ITerminalStatus | undefined> {\n\t\treturn this._onDidChangePrimaryStatus.event;\n\t}\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tget primary(): ITerminalStatus | undefined {\n\t\tlet result: ITerminalStatus | undefined;\n\t\tfor (const s of this._statuses.values()) {\n\t\t\tif (!result || s.severity >= result.severity) {\n\t\t\t\tif (s.icon || !result?.icon) {\n\t\t\t\t\tresult = s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tget statuses(): ITerminalStatus[] {\n\t\treturn Array.from(this._statuses.values());\n\t}\n\n\tadd(status: ITerminalStatus, duration?: number) {\n\t\tstatus = this._applyAnimationSetting(status);\n\t\tconst outTimeout = this._statusTimeouts.get(status.id);\n\t\tif (outTimeout) {\n\t\t\tmainWindow.clearTimeout(outTimeout);\n\t\t\tthis._statusTimeouts.delete(status.id);\n\t\t}\n\t\tif (duration && duration > 0) {\n\t\t\tconst timeout = mainWindow.setTimeout(\n\t\t\t\t() => this.remove(status),\n\t\t\t\tduration,\n\t\t\t);\n\t\t\tthis._statusTimeouts.set(status.id, timeout);\n\t\t}\n\t\tconst existingStatus = this._statuses.get(status.id);\n\t\tif (existingStatus && existingStatus !== status) {\n\t\t\tthis._onDidRemoveStatus.fire(existingStatus);\n\t\t\tthis._statuses.delete(existingStatus.id);\n\t\t}\n\t\tif (!this._statuses.has(status.id)) {\n\t\t\tconst oldPrimary = this.primary;\n\t\t\tthis._statuses.set(status.id, status);\n\t\t\tthis._onDidAddStatus.fire(status);\n\t\t\tconst newPrimary = this.primary;\n\t\t\tif (oldPrimary !== newPrimary) {\n\t\t\t\tthis._onDidChangePrimaryStatus.fire(newPrimary);\n\t\t\t}\n\t\t}\n\t}\n\n\tremove(status: ITerminalStatus): void;\n\tremove(statusId: string): void;\n\tremove(statusOrId: ITerminalStatus | string): void {\n\t\tconst status =\n\t\t\ttypeof statusOrId === \"string\"\n\t\t\t\t? this._statuses.get(statusOrId)\n\t\t\t\t: statusOrId;\n\t\t// Verify the status is the same as the one passed in\n\t\tif (status && this._statuses.get(status.id)) {\n\t\t\tconst wasPrimary = this.primary?.id === status.id;\n\t\t\tthis._statuses.delete(status.id);\n\t\t\tthis._onDidRemoveStatus.fire(status);\n\t\t\tif (wasPrimary) {\n\t\t\t\tthis._onDidChangePrimaryStatus.fire(this.primary);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggle(status: ITerminalStatus, value: boolean) {\n\t\tif (value) {\n\t\t\tthis.add(status);\n\t\t} else {\n\t\t\tthis.remove(status);\n\t\t}\n\t}\n\n\tprivate _applyAnimationSetting(status: ITerminalStatus): ITerminalStatus {\n\t\tif (\n\t\t\t!status.icon ||\n\t\t\tThemeIcon.getModifier(status.icon) !== \"spin\" ||\n\t\t\tthis._configurationService.getValue(\n\t\t\t\tTerminalSettingId.TabsEnableAnimation,\n\t\t\t)\n\t\t) {\n\t\t\treturn status;\n\t\t}\n\t\tlet icon;\n\t\t// Loading without animation is just a curved line that doesn't mean anything\n\t\tif (status.icon.id === spinningLoading.id) {\n\t\t\ticon = Codicon.play;\n\t\t} else {\n\t\t\ticon = ThemeIcon.modify(status.icon, undefined);\n\t\t}\n\t\t// Clone the status when changing the icon so that setting changes are applied without a\n\t\t// reload being needed\n\t\treturn {\n\t\t\t...status,\n\t\t\ticon,\n\t\t};\n\t}\n}\n\nexport function getColorForSeverity(severity: Severity): string {\n\tswitch (severity) {\n\t\tcase Severity.Error:\n\t\t\treturn listErrorForeground;\n\t\tcase Severity.Warning:\n\t\t\treturn listWarningForeground;\n\t\tdefault:\n\t\t\treturn \"\";\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TerminalStatus"]
}
