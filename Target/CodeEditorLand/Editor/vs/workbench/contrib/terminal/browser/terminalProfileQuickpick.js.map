{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IQuickInputService, IKeyMods, IPickOptions, IQuickPickSeparator, IQuickInputButton, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IExtensionTerminalProfile, ITerminalProfile, ITerminalProfileObject, TerminalSettingPrefix, type ITerminalExecutable } from '../../../../platform/terminal/common/terminal.js';\nimport { getUriClasses, getColorClass, createColorStyleElement } from './terminalIcon.js';\nimport { configureTerminalProfileIcon } from './terminalIcons.js';\nimport * as nls from '../../../../nls.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { ITerminalProfileResolverService, ITerminalProfileService } from '../common/terminal.js';\nimport { IQuickPickTerminalObject, ITerminalInstance } from './terminal.js';\nimport { IPickerQuickAccessItem } from '../../../../platform/quickinput/browser/pickerQuickAccess.js';\nimport { getIconRegistry } from '../../../../platform/theme/common/iconRegistry.js';\nimport { basename } from '../../../../base/common/path.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\n\n\ntype DefaultProfileName = string;\nexport class TerminalProfileQuickpick {\n\tconstructor(\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@INotificationService private readonly _notificationService: INotificationService\n\t) { }\n\n\tasync showAndGetResult(type: 'setDefault' | 'createInstance'): Promise<IQuickPickTerminalObject | DefaultProfileName | undefined> {\n\t\tconst platformKey = await this._terminalProfileService.getPlatformKey();\n\t\tconst profilesKey = TerminalSettingPrefix.Profiles + platformKey;\n\t\tconst result = await this._createAndShow(type);\n\t\tconst defaultProfileKey = `${TerminalSettingPrefix.DefaultProfile}${platformKey}`;\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tif (type === 'setDefault') {\n\t\t\tif ('command' in result.profile) {\n\t\t\t\treturn; // Should never happen\n\t\t\t} else if ('id' in result.profile) {\n\t\t\t\t// extension contributed profile\n\t\t\t\tawait this._configurationService.updateValue(defaultProfileKey, result.profile.title, ConfigurationTarget.USER);\n\t\t\t\treturn {\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensionIdentifier: result.profile.extensionIdentifier,\n\t\t\t\t\t\tid: result.profile.id,\n\t\t\t\t\t\ttitle: result.profile.title,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tcolor: result.profile.color,\n\t\t\t\t\t\t\ticon: result.profile.icon\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tkeyMods: result.keyMods\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Add the profile to settings if necessary\n\t\t\tif ('isAutoDetected' in result.profile) {\n\t\t\t\tconst profilesConfig = await this._configurationService.getValue(profilesKey);\n\t\t\t\tif (typeof profilesConfig === 'object') {\n\t\t\t\t\tconst newProfile: ITerminalProfileObject = {\n\t\t\t\t\t\tpath: result.profile.path\n\t\t\t\t\t};\n\t\t\t\t\tif (result.profile.args) {\n\t\t\t\t\t\tnewProfile.args = result.profile.args;\n\t\t\t\t\t}\n\t\t\t\t\t(profilesConfig as { [key: string]: ITerminalProfileObject })[result.profile.profileName] = this._createNewProfileConfig(result.profile);\n\t\t\t\t\tawait this._configurationService.updateValue(profilesKey, profilesConfig, ConfigurationTarget.USER);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Set the default profile\n\t\t\tawait this._configurationService.updateValue(defaultProfileKey, result.profileName, ConfigurationTarget.USER);\n\t\t} else if (type === 'createInstance') {\n\t\t\tif ('id' in result.profile) {\n\t\t\t\treturn {\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensionIdentifier: result.profile.extensionIdentifier,\n\t\t\t\t\t\tid: result.profile.id,\n\t\t\t\t\t\ttitle: result.profile.title,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\ticon: result.profile.icon,\n\t\t\t\t\t\t\tcolor: result.profile.color,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tkeyMods: result.keyMods\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn { config: result.profile, keyMods: result.keyMods };\n\t\t\t}\n\t\t}\n\t\t// for tests\n\t\treturn 'profileName' in result.profile ? result.profile.profileName : result.profile.title;\n\t}\n\n\tprivate async _createAndShow(type: 'setDefault' | 'createInstance'): Promise<IProfileQuickPickItem | undefined> {\n\t\tconst platformKey = await this._terminalProfileService.getPlatformKey();\n\t\tconst profiles = this._terminalProfileService.availableProfiles;\n\t\tconst profilesKey = TerminalSettingPrefix.Profiles + platformKey;\n\t\tconst defaultProfileName = this._terminalProfileService.getDefaultProfileName();\n\t\tlet keyMods: IKeyMods | undefined;\n\t\tconst options: IPickOptions<IProfileQuickPickItem> = {\n\t\t\tplaceHolder: type === 'createInstance' ? nls.localize('terminal.integrated.selectProfileToCreate', \"Select the terminal profile to create\") : nls.localize('terminal.integrated.chooseDefaultProfile', \"Select your default terminal profile\"),\n\t\t\tonDidTriggerItemButton: async (context) => {\n\t\t\t\t// Get the user's explicit permission to use a potentially unsafe path\n\t\t\t\tif (!await this._isProfileSafe(context.item.profile)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ('command' in context.item.profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ('id' in context.item.profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst configProfiles: { [key: string]: any } = this._configurationService.getValue(TerminalSettingPrefix.Profiles + platformKey);\n\t\t\t\tconst existingProfiles = !!configProfiles ? Object.keys(configProfiles) : [];\n\t\t\t\tconst name = await this._quickInputService.input({\n\t\t\t\t\tprompt: nls.localize('enterTerminalProfileName', \"Enter terminal profile name\"),\n\t\t\t\t\tvalue: context.item.profile.profileName,\n\t\t\t\t\tvalidateInput: async input => {\n\t\t\t\t\t\tif (existingProfiles.includes(input)) {\n\t\t\t\t\t\t\treturn nls.localize('terminalProfileAlreadyExists', \"A terminal profile already exists with that name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (!name) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newConfigValue: { [key: string]: ITerminalExecutable } = {\n\t\t\t\t\t...configProfiles,\n\t\t\t\t\t[name]: this._createNewProfileConfig(context.item.profile)\n\t\t\t\t};\n\t\t\t\tawait this._configurationService.updateValue(profilesKey, newConfigValue, ConfigurationTarget.USER);\n\t\t\t},\n\t\t\tonKeyMods: mods => keyMods = mods\n\t\t};\n\n\t\t// Build quick pick items\n\t\tconst quickPickItems: (IProfileQuickPickItem | IQuickPickSeparator)[] = [];\n\t\tconst configProfiles = profiles.filter(e => !e.isAutoDetected);\n\t\tconst autoDetectedProfiles = profiles.filter(e => e.isAutoDetected);\n\n\t\tif (configProfiles.length > 0) {\n\t\t\tquickPickItems.push({ type: 'separator', label: nls.localize('terminalProfiles', \"profiles\") });\n\t\t\tquickPickItems.push(...this._sortProfileQuickPickItems(configProfiles.map(e => this._createProfileQuickPickItem(e)), defaultProfileName!));\n\t\t}\n\n\t\tquickPickItems.push({ type: 'separator', label: nls.localize('ICreateContributedTerminalProfileOptions', \"contributed\") });\n\t\tconst contributedProfiles: IProfileQuickPickItem[] = [];\n\t\tfor (const contributed of this._terminalProfileService.contributedProfiles) {\n\t\t\tlet icon: ThemeIcon | undefined;\n\t\t\tif (typeof contributed.icon === 'string') {\n\t\t\t\tif (contributed.icon.startsWith('$(')) {\n\t\t\t\t\ticon = ThemeIcon.fromString(contributed.icon);\n\t\t\t\t} else {\n\t\t\t\t\ticon = ThemeIcon.fromId(contributed.icon);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!icon || !getIconRegistry().getIcon(icon.id)) {\n\t\t\t\ticon = this._terminalProfileResolverService.getDefaultIcon();\n\t\t\t}\n\t\t\tconst uriClasses = getUriClasses(contributed, this._themeService.getColorTheme().type, true);\n\t\t\tconst colorClass = getColorClass(contributed);\n\t\t\tconst iconClasses = [];\n\t\t\tif (uriClasses) {\n\t\t\t\ticonClasses.push(...uriClasses);\n\t\t\t}\n\t\t\tif (colorClass) {\n\t\t\t\ticonClasses.push(colorClass);\n\t\t\t}\n\t\t\tcontributedProfiles.push({\n\t\t\t\tlabel: `$(${icon.id}) ${contributed.title}`,\n\t\t\t\tprofile: {\n\t\t\t\t\textensionIdentifier: contributed.extensionIdentifier,\n\t\t\t\t\ttitle: contributed.title,\n\t\t\t\t\ticon: contributed.icon,\n\t\t\t\t\tid: contributed.id,\n\t\t\t\t\tcolor: contributed.color\n\t\t\t\t},\n\t\t\t\tprofileName: contributed.title,\n\t\t\t\ticonClasses\n\t\t\t});\n\t\t}\n\n\t\tif (contributedProfiles.length > 0) {\n\t\t\tquickPickItems.push(...this._sortProfileQuickPickItems(contributedProfiles, defaultProfileName!));\n\t\t}\n\n\t\tif (autoDetectedProfiles.length > 0) {\n\t\t\tquickPickItems.push({ type: 'separator', label: nls.localize('terminalProfiles.detected', \"detected\") });\n\t\t\tquickPickItems.push(...this._sortProfileQuickPickItems(autoDetectedProfiles.map(e => this._createProfileQuickPickItem(e)), defaultProfileName!));\n\t\t}\n\t\tconst colorStyleDisposable = createColorStyleElement(this._themeService.getColorTheme());\n\n\t\tconst result = await this._quickInputService.pick(quickPickItems, options);\n\t\tcolorStyleDisposable.dispose();\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!await this._isProfileSafe(result.profile)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (keyMods) {\n\t\t\tresult.keyMods = keyMods;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _createNewProfileConfig(profile: ITerminalProfile): ITerminalExecutable {\n\t\tconst result: ITerminalExecutable = { path: profile.path };\n\t\tif (profile.args) {\n\t\t\tresult.args = profile.args;\n\t\t}\n\t\tif (profile.env) {\n\t\t\tresult.env = profile.env;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _isProfileSafe(profile: ITerminalProfile | IExtensionTerminalProfile): Promise<boolean> {\n\t\tconst isUnsafePath = 'isUnsafePath' in profile && profile.isUnsafePath;\n\t\tconst requiresUnsafePath = 'requiresUnsafePath' in profile && profile.requiresUnsafePath;\n\t\tif (!isUnsafePath && !requiresUnsafePath) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Get the user's explicit permission to use a potentially unsafe path\n\t\treturn await new Promise<boolean>(r => {\n\t\t\tconst unsafePaths = [];\n\t\t\tif (isUnsafePath) {\n\t\t\t\tunsafePaths.push(profile.path);\n\t\t\t}\n\t\t\tif (requiresUnsafePath) {\n\t\t\t\tunsafePaths.push(requiresUnsafePath);\n\t\t\t}\n\t\t\t// Notify about unsafe path(s). At the time of writing, multiple unsafe paths isn't\n\t\t\t// possible so the message is optimized for a single path.\n\t\t\tconst handle = this._notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tnls.localize('unsafePathWarning', 'This terminal profile uses a potentially unsafe path that can be modified by another user: {0}. Are you sure you want to use it?', `\"${unsafePaths.join(',')}\"`),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('yes', 'Yes'),\n\t\t\t\t\trun: () => r(true)\n\t\t\t\t}, {\n\t\t\t\t\tlabel: nls.localize('cancel', 'Cancel'),\n\t\t\t\t\trun: () => r(false)\n\t\t\t\t}]\n\t\t\t);\n\t\t\thandle.onDidClose(() => r(false));\n\t\t});\n\t}\n\n\tprivate _createProfileQuickPickItem(profile: ITerminalProfile): IProfileQuickPickItem {\n\t\tconst buttons: IQuickInputButton[] = [{\n\t\t\ticonClass: ThemeIcon.asClassName(configureTerminalProfileIcon),\n\t\t\ttooltip: nls.localize('createQuickLaunchProfile', \"Configure Terminal Profile\")\n\t\t}];\n\t\tconst icon = (profile.icon && ThemeIcon.isThemeIcon(profile.icon)) ? profile.icon : Codicon.terminal;\n\t\tconst label = `$(${icon.id}) ${profile.profileName}`;\n\t\tconst friendlyPath = profile.isFromPath ? basename(profile.path) : profile.path;\n\t\tconst colorClass = getColorClass(profile);\n\t\tconst iconClasses = [];\n\t\tif (colorClass) {\n\t\t\ticonClasses.push(colorClass);\n\t\t}\n\n\t\tif (profile.args) {\n\t\t\tif (typeof profile.args === 'string') {\n\t\t\t\treturn { label, description: `${profile.path} ${profile.args}`, profile, profileName: profile.profileName, buttons, iconClasses };\n\t\t\t}\n\t\t\tconst argsString = profile.args.map(e => {\n\t\t\t\tif (e.includes(' ')) {\n\t\t\t\t\treturn `\"${e.replace(/\"/g, '\\\\\"')}\"`; // CodeQL [SM02383] js/incomplete-sanitization This is only used as a label on the UI so this isn't a problem\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}).join(' ');\n\t\t\treturn { label, description: `${friendlyPath} ${argsString}`, profile, profileName: profile.profileName, buttons, iconClasses };\n\t\t}\n\t\treturn { label, description: friendlyPath, profile, profileName: profile.profileName, buttons, iconClasses };\n\t}\n\n\tprivate _sortProfileQuickPickItems(items: IProfileQuickPickItem[], defaultProfileName: string) {\n\t\treturn items.sort((a, b) => {\n\t\t\tif (b.profileName === defaultProfileName) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (a.profileName === defaultProfileName) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn a.profileName.localeCompare(b.profileName);\n\t\t});\n\t}\n}\n\nexport interface IProfileQuickPickItem extends IQuickPickItem {\n\tprofile: ITerminalProfile | IExtensionTerminalProfile;\n\tprofileName: string;\n\tkeyMods?: IKeyMods | undefined;\n}\n\nexport interface ITerminalQuickPickItem extends IPickerQuickAccessItem {\n\tterminal: ITerminalInstance;\n}\n"],
  "mappings": "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",
  "names": ["configProfiles"]
}
