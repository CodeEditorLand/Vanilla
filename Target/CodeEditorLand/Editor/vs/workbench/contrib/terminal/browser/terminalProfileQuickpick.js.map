{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { basename } from \"../../../../base/common/path.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport type { IPickerQuickAccessItem } from \"../../../../platform/quickinput/browser/pickerQuickAccess.js\";\nimport {\n\ttype IKeyMods,\n\ttype IPickOptions,\n\ttype IQuickInputButton,\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickSeparator,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\ttype IExtensionTerminalProfile,\n\ttype ITerminalExecutable,\n\ttype ITerminalProfile,\n\ttype ITerminalProfileObject,\n\tTerminalSettingPrefix,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { getIconRegistry } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tITerminalProfileResolverService,\n\tITerminalProfileService,\n} from \"../common/terminal.js\";\nimport type {\n\tIQuickPickTerminalObject,\n\tITerminalInstance,\n} from \"./terminal.js\";\nimport {\n\tcreateColorStyleElement,\n\tgetColorClass,\n\tgetUriClasses,\n} from \"./terminalIcon.js\";\nimport { configureTerminalProfileIcon } from \"./terminalIcons.js\";\n\ntype DefaultProfileName = string;\nexport class TerminalProfileQuickpick {\n\tconstructor(\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@INotificationService private readonly _notificationService: INotificationService\n\t) { }\n\n\tasync showAndGetResult(\n\t\ttype: \"setDefault\" | \"createInstance\",\n\t): Promise<IQuickPickTerminalObject | DefaultProfileName | undefined> {\n\t\tconst platformKey = await this._terminalProfileService.getPlatformKey();\n\t\tconst profilesKey = TerminalSettingPrefix.Profiles + platformKey;\n\t\tconst result = await this._createAndShow(type);\n\t\tconst defaultProfileKey = `${TerminalSettingPrefix.DefaultProfile}${platformKey}`;\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tif (type === \"setDefault\") {\n\t\t\tif (\"command\" in result.profile) {\n\t\t\t\treturn; // Should never happen\n\t\t\t} else if (\"id\" in result.profile) {\n\t\t\t\t// extension contributed profile\n\t\t\t\tawait this._configurationService.updateValue(\n\t\t\t\t\tdefaultProfileKey,\n\t\t\t\t\tresult.profile.title,\n\t\t\t\t\tConfigurationTarget.USER,\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensionIdentifier: result.profile.extensionIdentifier,\n\t\t\t\t\t\tid: result.profile.id,\n\t\t\t\t\t\ttitle: result.profile.title,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tcolor: result.profile.color,\n\t\t\t\t\t\t\ticon: result.profile.icon,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tkeyMods: result.keyMods,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Add the profile to settings if necessary\n\t\t\tif (\"isAutoDetected\" in result.profile) {\n\t\t\t\tconst profilesConfig =\n\t\t\t\t\tawait this._configurationService.getValue(profilesKey);\n\t\t\t\tif (typeof profilesConfig === \"object\") {\n\t\t\t\t\tconst newProfile: ITerminalProfileObject = {\n\t\t\t\t\t\tpath: result.profile.path,\n\t\t\t\t\t};\n\t\t\t\t\tif (result.profile.args) {\n\t\t\t\t\t\tnewProfile.args = result.profile.args;\n\t\t\t\t\t}\n\t\t\t\t\t(\n\t\t\t\t\t\tprofilesConfig as {\n\t\t\t\t\t\t\t[key: string]: ITerminalProfileObject;\n\t\t\t\t\t\t}\n\t\t\t\t\t)[result.profile.profileName] =\n\t\t\t\t\t\tthis._createNewProfileConfig(result.profile);\n\t\t\t\t\tawait this._configurationService.updateValue(\n\t\t\t\t\t\tprofilesKey,\n\t\t\t\t\t\tprofilesConfig,\n\t\t\t\t\t\tConfigurationTarget.USER,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Set the default profile\n\t\t\tawait this._configurationService.updateValue(\n\t\t\t\tdefaultProfileKey,\n\t\t\t\tresult.profileName,\n\t\t\t\tConfigurationTarget.USER,\n\t\t\t);\n\t\t} else if (type === \"createInstance\") {\n\t\t\tif (\"id\" in result.profile) {\n\t\t\t\treturn {\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensionIdentifier: result.profile.extensionIdentifier,\n\t\t\t\t\t\tid: result.profile.id,\n\t\t\t\t\t\ttitle: result.profile.title,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\ticon: result.profile.icon,\n\t\t\t\t\t\t\tcolor: result.profile.color,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tkeyMods: result.keyMods,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn { config: result.profile, keyMods: result.keyMods };\n\t\t\t}\n\t\t}\n\t\t// for tests\n\t\treturn \"profileName\" in result.profile\n\t\t\t? result.profile.profileName\n\t\t\t: result.profile.title;\n\t}\n\n\tprivate async _createAndShow(\n\t\ttype: \"setDefault\" | \"createInstance\",\n\t): Promise<IProfileQuickPickItem | undefined> {\n\t\tconst platformKey = await this._terminalProfileService.getPlatformKey();\n\t\tconst profiles = this._terminalProfileService.availableProfiles;\n\t\tconst profilesKey = TerminalSettingPrefix.Profiles + platformKey;\n\t\tconst defaultProfileName =\n\t\t\tthis._terminalProfileService.getDefaultProfileName();\n\t\tlet keyMods: IKeyMods | undefined;\n\t\tconst options: IPickOptions<IProfileQuickPickItem> = {\n\t\t\tplaceHolder:\n\t\t\t\ttype === \"createInstance\"\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"terminal.integrated.selectProfileToCreate\",\n\t\t\t\t\t\t\t\"Select the terminal profile to create\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\"terminal.integrated.chooseDefaultProfile\",\n\t\t\t\t\t\t\t\"Select your default terminal profile\",\n\t\t\t\t\t\t),\n\t\t\tonDidTriggerItemButton: async (context) => {\n\t\t\t\t// Get the user's explicit permission to use a potentially unsafe path\n\t\t\t\tif (!(await this._isProfileSafe(context.item.profile))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (\"command\" in context.item.profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (\"id\" in context.item.profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst configProfiles: { [key: string]: any } =\n\t\t\t\t\tthis._configurationService.getValue(\n\t\t\t\t\t\tTerminalSettingPrefix.Profiles + platformKey,\n\t\t\t\t\t);\n\t\t\t\tconst existingProfiles = !!configProfiles\n\t\t\t\t\t? Object.keys(configProfiles)\n\t\t\t\t\t: [];\n\t\t\t\tconst name = await this._quickInputService.input({\n\t\t\t\t\tprompt: nls.localize(\n\t\t\t\t\t\t\"enterTerminalProfileName\",\n\t\t\t\t\t\t\"Enter terminal profile name\",\n\t\t\t\t\t),\n\t\t\t\t\tvalue: context.item.profile.profileName,\n\t\t\t\t\tvalidateInput: async (input) => {\n\t\t\t\t\t\tif (existingProfiles.includes(input)) {\n\t\t\t\t\t\t\treturn nls.localize(\n\t\t\t\t\t\t\t\t\"terminalProfileAlreadyExists\",\n\t\t\t\t\t\t\t\t\"A terminal profile already exists with that name\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!name) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newConfigValue: { [key: string]: ITerminalExecutable } = {\n\t\t\t\t\t...configProfiles,\n\t\t\t\t\t[name]: this._createNewProfileConfig(context.item.profile),\n\t\t\t\t};\n\t\t\t\tawait this._configurationService.updateValue(\n\t\t\t\t\tprofilesKey,\n\t\t\t\t\tnewConfigValue,\n\t\t\t\t\tConfigurationTarget.USER,\n\t\t\t\t);\n\t\t\t},\n\t\t\tonKeyMods: (mods) => (keyMods = mods),\n\t\t};\n\n\t\t// Build quick pick items\n\t\tconst quickPickItems: (IProfileQuickPickItem | IQuickPickSeparator)[] =\n\t\t\t[];\n\t\tconst configProfiles = profiles.filter((e) => !e.isAutoDetected);\n\t\tconst autoDetectedProfiles = profiles.filter((e) => e.isAutoDetected);\n\n\t\tif (configProfiles.length > 0) {\n\t\t\tquickPickItems.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: nls.localize(\"terminalProfiles\", \"profiles\"),\n\t\t\t});\n\t\t\tquickPickItems.push(\n\t\t\t\t...this._sortProfileQuickPickItems(\n\t\t\t\t\tconfigProfiles.map((e) =>\n\t\t\t\t\t\tthis._createProfileQuickPickItem(e),\n\t\t\t\t\t),\n\t\t\t\t\tdefaultProfileName!,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tquickPickItems.push({\n\t\t\ttype: \"separator\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"ICreateContributedTerminalProfileOptions\",\n\t\t\t\t\"contributed\",\n\t\t\t),\n\t\t});\n\t\tconst contributedProfiles: IProfileQuickPickItem[] = [];\n\t\tfor (const contributed of this._terminalProfileService\n\t\t\t.contributedProfiles) {\n\t\t\tlet icon: ThemeIcon | undefined;\n\t\t\tif (typeof contributed.icon === \"string\") {\n\t\t\t\tif (contributed.icon.startsWith(\"$(\")) {\n\t\t\t\t\ticon = ThemeIcon.fromString(contributed.icon);\n\t\t\t\t} else {\n\t\t\t\t\ticon = ThemeIcon.fromId(contributed.icon);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!icon || !getIconRegistry().getIcon(icon.id)) {\n\t\t\t\ticon = this._terminalProfileResolverService.getDefaultIcon();\n\t\t\t}\n\t\t\tconst uriClasses = getUriClasses(\n\t\t\t\tcontributed,\n\t\t\t\tthis._themeService.getColorTheme().type,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconst colorClass = getColorClass(contributed);\n\t\t\tconst iconClasses = [];\n\t\t\tif (uriClasses) {\n\t\t\t\ticonClasses.push(...uriClasses);\n\t\t\t}\n\t\t\tif (colorClass) {\n\t\t\t\ticonClasses.push(colorClass);\n\t\t\t}\n\t\t\tcontributedProfiles.push({\n\t\t\t\tlabel: `$(${icon.id}) ${contributed.title}`,\n\t\t\t\tprofile: {\n\t\t\t\t\textensionIdentifier: contributed.extensionIdentifier,\n\t\t\t\t\ttitle: contributed.title,\n\t\t\t\t\ticon: contributed.icon,\n\t\t\t\t\tid: contributed.id,\n\t\t\t\t\tcolor: contributed.color,\n\t\t\t\t},\n\t\t\t\tprofileName: contributed.title,\n\t\t\t\ticonClasses,\n\t\t\t});\n\t\t}\n\n\t\tif (contributedProfiles.length > 0) {\n\t\t\tquickPickItems.push(\n\t\t\t\t...this._sortProfileQuickPickItems(\n\t\t\t\t\tcontributedProfiles,\n\t\t\t\t\tdefaultProfileName!,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (autoDetectedProfiles.length > 0) {\n\t\t\tquickPickItems.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: nls.localize(\"terminalProfiles.detected\", \"detected\"),\n\t\t\t});\n\t\t\tquickPickItems.push(\n\t\t\t\t...this._sortProfileQuickPickItems(\n\t\t\t\t\tautoDetectedProfiles.map((e) =>\n\t\t\t\t\t\tthis._createProfileQuickPickItem(e),\n\t\t\t\t\t),\n\t\t\t\t\tdefaultProfileName!,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst colorStyleDisposable = createColorStyleElement(\n\t\t\tthis._themeService.getColorTheme(),\n\t\t);\n\n\t\tconst result = await this._quickInputService.pick(\n\t\t\tquickPickItems,\n\t\t\toptions,\n\t\t);\n\t\tcolorStyleDisposable.dispose();\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!(await this._isProfileSafe(result.profile))) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (keyMods) {\n\t\t\tresult.keyMods = keyMods;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _createNewProfileConfig(\n\t\tprofile: ITerminalProfile,\n\t): ITerminalExecutable {\n\t\tconst result: ITerminalExecutable = { path: profile.path };\n\t\tif (profile.args) {\n\t\t\tresult.args = profile.args;\n\t\t}\n\t\tif (profile.env) {\n\t\t\tresult.env = profile.env;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _isProfileSafe(\n\t\tprofile: ITerminalProfile | IExtensionTerminalProfile,\n\t): Promise<boolean> {\n\t\tconst isUnsafePath = \"isUnsafePath\" in profile && profile.isUnsafePath;\n\t\tconst requiresUnsafePath =\n\t\t\t\"requiresUnsafePath\" in profile && profile.requiresUnsafePath;\n\t\tif (!isUnsafePath && !requiresUnsafePath) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Get the user's explicit permission to use a potentially unsafe path\n\t\treturn await new Promise<boolean>((r) => {\n\t\t\tconst unsafePaths = [];\n\t\t\tif (isUnsafePath) {\n\t\t\t\tunsafePaths.push(profile.path);\n\t\t\t}\n\t\t\tif (requiresUnsafePath) {\n\t\t\t\tunsafePaths.push(requiresUnsafePath);\n\t\t\t}\n\t\t\t// Notify about unsafe path(s). At the time of writing, multiple unsafe paths isn't\n\t\t\t// possible so the message is optimized for a single path.\n\t\t\tconst handle = this._notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"unsafePathWarning\",\n\t\t\t\t\t\"This terminal profile uses a potentially unsafe path that can be modified by another user: {0}. Are you sure you want to use it?\",\n\t\t\t\t\t`\"${unsafePaths.join(\",\")}\"`,\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\"yes\", \"Yes\"),\n\t\t\t\t\t\trun: () => r(true),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\"cancel\", \"Cancel\"),\n\t\t\t\t\t\trun: () => r(false),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t);\n\t\t\thandle.onDidClose(() => r(false));\n\t\t});\n\t}\n\n\tprivate _createProfileQuickPickItem(\n\t\tprofile: ITerminalProfile,\n\t): IProfileQuickPickItem {\n\t\tconst buttons: IQuickInputButton[] = [\n\t\t\t{\n\t\t\t\ticonClass: ThemeIcon.asClassName(configureTerminalProfileIcon),\n\t\t\t\ttooltip: nls.localize(\n\t\t\t\t\t\"createQuickLaunchProfile\",\n\t\t\t\t\t\"Configure Terminal Profile\",\n\t\t\t\t),\n\t\t\t},\n\t\t];\n\t\tconst icon =\n\t\t\tprofile.icon && ThemeIcon.isThemeIcon(profile.icon)\n\t\t\t\t? profile.icon\n\t\t\t\t: Codicon.terminal;\n\t\tconst label = `$(${icon.id}) ${profile.profileName}`;\n\t\tconst friendlyPath = profile.isFromPath\n\t\t\t? basename(profile.path)\n\t\t\t: profile.path;\n\t\tconst colorClass = getColorClass(profile);\n\t\tconst iconClasses = [];\n\t\tif (colorClass) {\n\t\t\ticonClasses.push(colorClass);\n\t\t}\n\n\t\tif (profile.args) {\n\t\t\tif (typeof profile.args === \"string\") {\n\t\t\t\treturn {\n\t\t\t\t\tlabel,\n\t\t\t\t\tdescription: `${profile.path} ${profile.args}`,\n\t\t\t\t\tprofile,\n\t\t\t\t\tprofileName: profile.profileName,\n\t\t\t\t\tbuttons,\n\t\t\t\t\ticonClasses,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst argsString = profile.args\n\t\t\t\t.map((e) => {\n\t\t\t\t\tif (e.includes(\" \")) {\n\t\t\t\t\t\treturn `\"${e.replace(/\"/g, '\\\\\"')}\"`; // CodeQL [SM02383] js/incomplete-sanitization This is only used as a label on the UI so this isn't a problem\n\t\t\t\t\t}\n\t\t\t\t\treturn e;\n\t\t\t\t})\n\t\t\t\t.join(\" \");\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tdescription: `${friendlyPath} ${argsString}`,\n\t\t\t\tprofile,\n\t\t\t\tprofileName: profile.profileName,\n\t\t\t\tbuttons,\n\t\t\t\ticonClasses,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tlabel,\n\t\t\tdescription: friendlyPath,\n\t\t\tprofile,\n\t\t\tprofileName: profile.profileName,\n\t\t\tbuttons,\n\t\t\ticonClasses,\n\t\t};\n\t}\n\n\tprivate _sortProfileQuickPickItems(\n\t\titems: IProfileQuickPickItem[],\n\t\tdefaultProfileName: string,\n\t) {\n\t\treturn items.sort((a, b) => {\n\t\t\tif (b.profileName === defaultProfileName) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (a.profileName === defaultProfileName) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn a.profileName.localeCompare(b.profileName);\n\t\t});\n\t}\n}\n\nexport interface IProfileQuickPickItem extends IQuickPickItem {\n\tprofile: ITerminalProfile | IExtensionTerminalProfile;\n\tprofileName: string;\n\tkeyMods?: IKeyMods | undefined;\n}\n\nexport interface ITerminalQuickPickItem extends IPickerQuickAccessItem {\n\tterminal: ITerminalInstance;\n}\n"],
  "mappings": "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",
  "names": ["configProfiles"]
}
