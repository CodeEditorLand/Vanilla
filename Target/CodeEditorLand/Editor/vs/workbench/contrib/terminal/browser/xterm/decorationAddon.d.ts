import type { IDecoration, ITerminalAddon, Terminal } from "@xterm/xterm";
import { Disposable } from "vs/base/common/lifecycle";
import { IAccessibilitySignalService } from "vs/platform/accessibilitySignal/browser/accessibilitySignalService";
import { IClipboardService } from "vs/platform/clipboard/common/clipboardService";
import { ICommandService } from "vs/platform/commands/common/commands";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextMenuService } from "vs/platform/contextview/browser/contextView";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IOpenerService } from "vs/platform/opener/common/opener";
import { IQuickInputService } from "vs/platform/quickinput/common/quickInput";
import { IMarkProperties, ITerminalCapabilityStore, ITerminalCommand } from "vs/platform/terminal/common/capabilities/capabilities";
import { IThemeService } from "vs/platform/theme/common/themeService";
import { ILifecycleService } from "vs/workbench/services/lifecycle/common/lifecycle";
export declare class DecorationAddon extends Disposable implements ITerminalAddon {
    private readonly _capabilities;
    private readonly _clipboardService;
    private readonly _contextMenuService;
    private readonly _configurationService;
    private readonly _themeService;
    private readonly _openerService;
    private readonly _quickInputService;
    private readonly _commandService;
    private readonly _accessibilitySignalService;
    private readonly _notificationService;
    protected _terminal: Terminal | undefined;
    private _capabilityDisposables;
    private _decorations;
    private _placeholderDecoration;
    private _showGutterDecorations?;
    private _showOverviewRulerDecorations?;
    private _terminalDecorationHoverManager;
    private readonly _onDidRequestRunCommand;
    readonly onDidRequestRunCommand: any;
    constructor(_capabilities: ITerminalCapabilityStore, _clipboardService: IClipboardService, _contextMenuService: IContextMenuService, _configurationService: IConfigurationService, _themeService: IThemeService, _openerService: IOpenerService, _quickInputService: IQuickInputService, lifecycleService: ILifecycleService, _commandService: ICommandService, instantiationService: IInstantiationService, _accessibilitySignalService: IAccessibilitySignalService, _notificationService: INotificationService);
    private _removeCapabilityDisposables;
    private _createCapabilityDisposables;
    registerMarkDecoration(mark: IMarkProperties): IDecoration | undefined;
    private _updateDecorationVisibility;
    private _disposeAllDecorations;
    private _updateGutterDecorationVisibility;
    private _updateCommandDecorationVisibility;
    refreshLayouts(): void;
    private _refreshStyles;
    private _dispose;
    private _clearPlaceholder;
    clearDecorations(): void;
    private _attachToCommandCapability;
    private _getCommandDetectionListeners;
    activate(terminal: Terminal): void;
    registerCommandDecoration(command?: ITerminalCommand, beforeCommandExecution?: boolean, markProperties?: IMarkProperties): IDecoration | undefined;
    private _createDisposables;
    private _updateClasses;
    private _createContextMenu;
    private _getContextMenuActions;
    private _getCommandActions;
    private _showToggleVisibilityQuickPick;
    private _getDecorationCssColor;
}
