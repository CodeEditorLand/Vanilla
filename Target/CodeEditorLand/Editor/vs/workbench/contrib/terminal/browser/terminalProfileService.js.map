{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProfileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../../base/common/arrays.js';\nimport * as objects from '../../../../base/common/objects.js';\nimport { AutoOpenBarrier } from '../../../../base/common/async.js';\nimport { throttle } from '../../../../base/common/decorators.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { isMacintosh, isWeb, isWindows, OperatingSystem, OS } from '../../../../base/common/platform.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ITerminalProfile, IExtensionTerminalProfile, TerminalSettingPrefix, TerminalSettingId, ITerminalProfileObject, IShellLaunchConfig, ITerminalExecutable } from '../../../../platform/terminal/common/terminal.js';\nimport { registerTerminalDefaultProfileConfiguration } from '../../../../platform/terminal/common/terminalPlatformConfiguration.js';\nimport { terminalIconsEqual, terminalProfileArgsMatch } from '../../../../platform/terminal/common/terminalProfiles.js';\nimport { ITerminalInstanceService } from './terminal.js';\nimport { refreshTerminalActions } from './terminalActions.js';\nimport { IRegisterContributedProfileArgs, ITerminalProfileProvider, ITerminalProfileService } from '../common/terminal.js';\nimport { TerminalContextKeys } from '../common/terminalContextKey.js';\nimport { ITerminalContributionService } from '../common/terminalExtensionPoints.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\n\n/*\n * Links TerminalService with TerminalProfileResolverService\n * and keeps the available terminal profiles updated\n */\nexport class TerminalProfileService extends Disposable implements ITerminalProfileService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _webExtensionContributedProfileContextKey: IContextKey<boolean>;\n\tprivate _profilesReadyBarrier: AutoOpenBarrier | undefined;\n\tprivate _profilesReadyPromise: Promise<void>;\n\tprivate _availableProfiles: ITerminalProfile[] | undefined;\n\tprivate _automationProfile: unknown;\n\tprivate _contributedProfiles: IExtensionTerminalProfile[] = [];\n\tprivate _defaultProfileName?: string;\n\tprivate _platformConfigJustRefreshed = false;\n\tprivate readonly _refreshTerminalActionsDisposable = this._register(new MutableDisposable());\n\tprivate readonly _profileProviders: Map</*ext id*/string, Map</*provider id*/string, ITerminalProfileProvider>> = new Map();\n\n\tprivate readonly _onDidChangeAvailableProfiles = this._register(new Emitter<ITerminalProfile[]>());\n\tget onDidChangeAvailableProfiles(): Event<ITerminalProfile[]> { return this._onDidChangeAvailableProfiles.event; }\n\n\tget profilesReady(): Promise<void> { return this._profilesReadyPromise; }\n\tget availableProfiles(): ITerminalProfile[] {\n\t\tif (!this._platformConfigJustRefreshed) {\n\t\t\tthis.refreshAvailableProfiles();\n\t\t}\n\t\treturn this._availableProfiles || [];\n\t}\n\tget contributedProfiles(): IExtensionTerminalProfile[] {\n\t\tconst userConfiguredProfileNames = this._availableProfiles?.map(p => p.profileName) || [];\n\t\t// Allow a user defined profile to override an extension contributed profile with the same name\n\t\treturn this._contributedProfiles?.filter(p => !userConfiguredProfileNames.includes(p.title)) || [];\n\t}\n\n\tconstructor(\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalContributionService private readonly _terminalContributionService: ITerminalContributionService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IRemoteAgentService private _remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService\n\t) {\n\t\tsuper();\n\n\t\t// in web, we don't want to show the dropdown unless there's a web extension\n\t\t// that contributes a profile\n\t\tthis._register(this._extensionService.onDidChangeExtensions(() => this.refreshAvailableProfiles()));\n\n\t\tthis._webExtensionContributedProfileContextKey = TerminalContextKeys.webExtensionContributedProfile.bindTo(this._contextKeyService);\n\t\tthis._updateWebContextKey();\n\t\tthis._profilesReadyPromise = this._remoteAgentService.getEnvironment()\n\t\t\t.then(() => {\n\t\t\t\t// Wait up to 20 seconds for profiles to be ready so it's assured that we know the actual\n\t\t\t\t// default terminal before launching the first terminal. This isn't expected to ever take\n\t\t\t\t// this long.\n\t\t\t\tthis._profilesReadyBarrier = new AutoOpenBarrier(20000);\n\t\t\t\treturn this._profilesReadyBarrier.wait().then(() => { });\n\t\t\t});\n\t\tthis.refreshAvailableProfiles();\n\t\tthis._setupConfigListener();\n\t}\n\n\tprivate async _setupConfigListener(): Promise<void> {\n\t\tconst platformKey = await this.getPlatformKey();\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingPrefix.AutomationProfile + platformKey) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingPrefix.DefaultProfile + platformKey) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingPrefix.Profiles + platformKey) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.UseWslProfiles)) {\n\t\t\t\tif (e.source !== ConfigurationTarget.DEFAULT) {\n\t\t\t\t\t// when _refreshPlatformConfig is called within refreshAvailableProfiles\n\t\t\t\t\t// on did change configuration is fired. this can lead to an infinite recursion\n\t\t\t\t\tthis.refreshAvailableProfiles();\n\t\t\t\t\tthis._platformConfigJustRefreshed = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis._platformConfigJustRefreshed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tgetDefaultProfileName(): string | undefined {\n\t\treturn this._defaultProfileName;\n\t}\n\n\tgetDefaultProfile(os?: OperatingSystem): ITerminalProfile | undefined {\n\t\tlet defaultProfileName: string | undefined;\n\t\tif (os) {\n\t\t\tdefaultProfileName = this._configurationService.getValue(`${TerminalSettingPrefix.DefaultProfile}${this._getOsKey(os)}`);\n\t\t\tif (!defaultProfileName || typeof defaultProfileName !== 'string') {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tdefaultProfileName = this._defaultProfileName;\n\t\t}\n\t\tif (!defaultProfileName) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// IMPORTANT: Only allow the default profile name to find non-auto detected profiles as\n\t\t// to avoid unsafe path profiles being picked up.\n\t\treturn this.availableProfiles.find(e => e.profileName === defaultProfileName && !e.isAutoDetected);\n\t}\n\n\tprivate _getOsKey(os: OperatingSystem): string {\n\t\tswitch (os) {\n\t\t\tcase OperatingSystem.Linux: return 'linux';\n\t\t\tcase OperatingSystem.Macintosh: return 'osx';\n\t\t\tcase OperatingSystem.Windows: return 'windows';\n\t\t}\n\t}\n\n\n\t@throttle(2000)\n\trefreshAvailableProfiles(): void {\n\t\tthis._refreshAvailableProfilesNow();\n\t}\n\n\tprotected async _refreshAvailableProfilesNow(): Promise<void> {\n\t\t// Profiles\n\t\tconst profiles = await this._detectProfiles(true);\n\t\tconst profilesChanged = !arrays.equals(profiles, this._availableProfiles, profilesEqual);\n\t\t// Contributed profiles\n\t\tconst contributedProfilesChanged = await this._updateContributedProfiles();\n\t\t// Automation profiles\n\t\tconst platform = await this.getPlatformKey();\n\t\tconst automationProfile = this._configurationService.getValue<ITerminalExecutable | null | undefined>(`${TerminalSettingPrefix.AutomationProfile}${platform}`);\n\t\tconst automationProfileChanged = !objects.equals(automationProfile, this._automationProfile);\n\t\t// Update\n\t\tif (profilesChanged || contributedProfilesChanged || automationProfileChanged) {\n\t\t\tthis._availableProfiles = profiles;\n\t\t\tthis._automationProfile = automationProfile;\n\t\t\tthis._onDidChangeAvailableProfiles.fire(this._availableProfiles);\n\t\t\tthis._profilesReadyBarrier!.open();\n\t\t\tthis._updateWebContextKey();\n\t\t\tawait this._refreshPlatformConfig(this._availableProfiles);\n\t\t}\n\t}\n\n\tprivate async _updateContributedProfiles(): Promise<boolean> {\n\t\tconst platformKey = await this.getPlatformKey();\n\t\tconst excludedContributedProfiles: string[] = [];\n\t\tconst configProfiles: { [key: string]: any } = this._configurationService.getValue(TerminalSettingPrefix.Profiles + platformKey);\n\t\tfor (const [profileName, value] of Object.entries(configProfiles)) {\n\t\t\tif (value === null) {\n\t\t\t\texcludedContributedProfiles.push(profileName);\n\t\t\t}\n\t\t}\n\t\tconst filteredContributedProfiles = Array.from(this._terminalContributionService.terminalProfiles.filter(p => !excludedContributedProfiles.includes(p.title)));\n\t\tconst contributedProfilesChanged = !arrays.equals(filteredContributedProfiles, this._contributedProfiles, contributedProfilesEqual);\n\t\tthis._contributedProfiles = filteredContributedProfiles;\n\t\treturn contributedProfilesChanged;\n\t}\n\n\tgetContributedProfileProvider(extensionIdentifier: string, id: string): ITerminalProfileProvider | undefined {\n\t\tconst extMap = this._profileProviders.get(extensionIdentifier);\n\t\treturn extMap?.get(id);\n\t}\n\n\tprivate async _detectProfiles(includeDetectedProfiles?: boolean): Promise<ITerminalProfile[]> {\n\t\tconst primaryBackend = await this._terminalInstanceService.getBackend(this._environmentService.remoteAuthority);\n\t\tif (!primaryBackend) {\n\t\t\treturn this._availableProfiles || [];\n\t\t}\n\t\tconst platform = await this.getPlatformKey();\n\t\tthis._defaultProfileName = this._configurationService.getValue(`${TerminalSettingPrefix.DefaultProfile}${platform}`) ?? undefined;\n\t\treturn primaryBackend.getProfiles(this._configurationService.getValue(`${TerminalSettingPrefix.Profiles}${platform}`), this._defaultProfileName, includeDetectedProfiles);\n\t}\n\n\tprivate _updateWebContextKey(): void {\n\t\tthis._webExtensionContributedProfileContextKey.set(isWeb && this._contributedProfiles.length > 0);\n\t}\n\n\tprivate async _refreshPlatformConfig(profiles: ITerminalProfile[]) {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tregisterTerminalDefaultProfileConfiguration({ os: env?.os || OS, profiles }, this._contributedProfiles);\n\t\tthis._refreshTerminalActionsDisposable.value = refreshTerminalActions(profiles);\n\t}\n\n\tasync getPlatformKey(): Promise<string> {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (env) {\n\t\t\treturn env.os === OperatingSystem.Windows ? 'windows' : (env.os === OperatingSystem.Macintosh ? 'osx' : 'linux');\n\t\t}\n\t\treturn isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t}\n\n\tregisterTerminalProfileProvider(extensionIdentifier: string, id: string, profileProvider: ITerminalProfileProvider): IDisposable {\n\t\tlet extMap = this._profileProviders.get(extensionIdentifier);\n\t\tif (!extMap) {\n\t\t\textMap = new Map();\n\t\t\tthis._profileProviders.set(extensionIdentifier, extMap);\n\t\t}\n\t\textMap.set(id, profileProvider);\n\t\treturn toDisposable(() => this._profileProviders.delete(id));\n\t}\n\n\tasync registerContributedProfile(args: IRegisterContributedProfileArgs): Promise<void> {\n\t\tconst platformKey = await this.getPlatformKey();\n\t\tconst profilesConfig = await this._configurationService.getValue(`${TerminalSettingPrefix.Profiles}${platformKey}`);\n\t\tif (typeof profilesConfig === 'object') {\n\t\t\tconst newProfile: IExtensionTerminalProfile = {\n\t\t\t\textensionIdentifier: args.extensionIdentifier,\n\t\t\t\ticon: args.options.icon,\n\t\t\t\tid: args.id,\n\t\t\t\ttitle: args.title,\n\t\t\t\tcolor: args.options.color\n\t\t\t};\n\n\t\t\t(profilesConfig as { [key: string]: ITerminalProfileObject })[args.title] = newProfile;\n\t\t}\n\t\tawait this._configurationService.updateValue(`${TerminalSettingPrefix.Profiles}${platformKey}`, profilesConfig, ConfigurationTarget.USER);\n\t\treturn;\n\t}\n\n\tasync getContributedDefaultProfile(shellLaunchConfig: IShellLaunchConfig): Promise<IExtensionTerminalProfile | undefined> {\n\t\t// prevents recursion with the MainThreadTerminalService call to create terminal\n\t\t// and defers to the provided launch config when an executable is provided\n\t\tif (shellLaunchConfig && !shellLaunchConfig.extHostTerminalId && !('executable' in shellLaunchConfig)) {\n\t\t\tconst key = await this.getPlatformKey();\n\t\t\tconst defaultProfileName = this._configurationService.getValue(`${TerminalSettingPrefix.DefaultProfile}${key}`);\n\t\t\tconst contributedDefaultProfile = this.contributedProfiles.find(p => p.title === defaultProfileName);\n\t\t\treturn contributedDefaultProfile;\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nfunction profilesEqual(one: ITerminalProfile, other: ITerminalProfile) {\n\treturn one.profileName === other.profileName &&\n\t\tterminalProfileArgsMatch(one.args, other.args) &&\n\t\tone.color === other.color &&\n\t\tterminalIconsEqual(one.icon, other.icon) &&\n\t\tone.isAutoDetected === other.isAutoDetected &&\n\t\tone.isDefault === other.isDefault &&\n\t\tone.overrideName === other.overrideName &&\n\t\tone.path === other.path;\n}\n\nfunction contributedProfilesEqual(one: IExtensionTerminalProfile, other: IExtensionTerminalProfile) {\n\treturn one.extensionIdentifier === other.extensionIdentifier &&\n\t\tone.color === other.color &&\n\t\tone.icon === other.icon &&\n\t\tone.id === other.id &&\n\t\tone.title === other.title;\n}\n"],
  "mappings": "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",
  "names": []
}
