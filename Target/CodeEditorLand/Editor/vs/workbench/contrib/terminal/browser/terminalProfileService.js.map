{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalProfileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from \"../../../../base/common/arrays.js\";\nimport { AutoOpenBarrier } from \"../../../../base/common/async.js\";\nimport { throttle } from \"../../../../base/common/decorators.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport {\n\tOS,\n\tOperatingSystem,\n\tisMacintosh,\n\tisWeb,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\ttype IExtensionTerminalProfile,\n\ttype IShellLaunchConfig,\n\ttype ITerminalExecutable,\n\ttype ITerminalProfile,\n\ttype ITerminalProfileObject,\n\tTerminalSettingId,\n\tTerminalSettingPrefix,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { registerTerminalDefaultProfileConfiguration } from \"../../../../platform/terminal/common/terminalPlatformConfiguration.js\";\nimport {\n\tterminalIconsEqual,\n\tterminalProfileArgsMatch,\n} from \"../../../../platform/terminal/common/terminalProfiles.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport type {\n\tIRegisterContributedProfileArgs,\n\tITerminalProfileProvider,\n\tITerminalProfileService,\n} from \"../common/terminal.js\";\nimport { TerminalContextKeys } from \"../common/terminalContextKey.js\";\nimport { ITerminalContributionService } from \"../common/terminalExtensionPoints.js\";\nimport { ITerminalInstanceService } from \"./terminal.js\";\nimport { refreshTerminalActions } from \"./terminalActions.js\";\n\n/*\n * Links TerminalService with TerminalProfileResolverService\n * and keeps the available terminal profiles updated\n */\nexport class TerminalProfileService\n\textends Disposable\n\timplements ITerminalProfileService\n{\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _webExtensionContributedProfileContextKey: IContextKey<boolean>;\n\tprivate _profilesReadyBarrier: AutoOpenBarrier | undefined;\n\tprivate _profilesReadyPromise: Promise<void>;\n\tprivate _availableProfiles: ITerminalProfile[] | undefined;\n\tprivate _automationProfile: unknown;\n\tprivate _contributedProfiles: IExtensionTerminalProfile[] = [];\n\tprivate _defaultProfileName?: string;\n\tprivate _platformConfigJustRefreshed = false;\n\tprivate readonly _refreshTerminalActionsDisposable = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly _profileProviders: Map<\n\t\t/*ext id*/ string,\n\t\tMap</*provider id*/ string, ITerminalProfileProvider>\n\t> = new Map();\n\n\tprivate readonly _onDidChangeAvailableProfiles = this._register(\n\t\tnew Emitter<ITerminalProfile[]>(),\n\t);\n\tget onDidChangeAvailableProfiles(): Event<ITerminalProfile[]> {\n\t\treturn this._onDidChangeAvailableProfiles.event;\n\t}\n\n\tget profilesReady(): Promise<void> {\n\t\treturn this._profilesReadyPromise;\n\t}\n\tget availableProfiles(): ITerminalProfile[] {\n\t\tif (!this._platformConfigJustRefreshed) {\n\t\t\tthis.refreshAvailableProfiles();\n\t\t}\n\t\treturn this._availableProfiles || [];\n\t}\n\tget contributedProfiles(): IExtensionTerminalProfile[] {\n\t\tconst userConfiguredProfileNames =\n\t\t\tthis._availableProfiles?.map((p) => p.profileName) || [];\n\t\t// Allow a user defined profile to override an extension contributed profile with the same name\n\t\treturn (\n\t\t\tthis._contributedProfiles?.filter(\n\t\t\t\t(p) => !userConfiguredProfileNames.includes(p.title),\n\t\t\t) || []\n\t\t);\n\t}\n\n\tconstructor(\n\t\t@IContextKeyService\n\t\tprivate readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@ITerminalContributionService\n\t\tprivate readonly _terminalContributionService: ITerminalContributionService,\n\t\t@IExtensionService\n\t\tprivate readonly _extensionService: IExtensionService,\n\t\t@IRemoteAgentService private _remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalInstanceService\n\t\tprivate readonly _terminalInstanceService: ITerminalInstanceService,\n\t) {\n\t\tsuper();\n\n\t\t// in web, we don't want to show the dropdown unless there's a web extension\n\t\t// that contributes a profile\n\t\tthis._register(\n\t\t\tthis._extensionService.onDidChangeExtensions(() =>\n\t\t\t\tthis.refreshAvailableProfiles(),\n\t\t\t),\n\t\t);\n\n\t\tthis._webExtensionContributedProfileContextKey =\n\t\t\tTerminalContextKeys.webExtensionContributedProfile.bindTo(\n\t\t\t\tthis._contextKeyService,\n\t\t\t);\n\t\tthis._updateWebContextKey();\n\t\tthis._profilesReadyPromise = this._remoteAgentService\n\t\t\t.getEnvironment()\n\t\t\t.then(() => {\n\t\t\t\t// Wait up to 20 seconds for profiles to be ready so it's assured that we know the actual\n\t\t\t\t// default terminal before launching the first terminal. This isn't expected to ever take\n\t\t\t\t// this long.\n\t\t\t\tthis._profilesReadyBarrier = new AutoOpenBarrier(20000);\n\t\t\t\treturn this._profilesReadyBarrier.wait().then(() => {});\n\t\t\t});\n\t\tthis.refreshAvailableProfiles();\n\t\tthis._setupConfigListener();\n\t}\n\n\tprivate async _setupConfigListener(): Promise<void> {\n\t\tconst platformKey = await this.getPlatformKey();\n\n\t\tthis._register(\n\t\t\tthis._configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingPrefix.AutomationProfile + platformKey,\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingPrefix.DefaultProfile + platformKey,\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tTerminalSettingPrefix.Profiles + platformKey,\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsConfiguration(TerminalSettingId.UseWslProfiles)\n\t\t\t\t) {\n\t\t\t\t\tif (e.source !== ConfigurationTarget.DEFAULT) {\n\t\t\t\t\t\t// when _refreshPlatformConfig is called within refreshAvailableProfiles\n\t\t\t\t\t\t// on did change configuration is fired. this can lead to an infinite recursion\n\t\t\t\t\t\tthis.refreshAvailableProfiles();\n\t\t\t\t\t\tthis._platformConfigJustRefreshed = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._platformConfigJustRefreshed = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tgetDefaultProfileName(): string | undefined {\n\t\treturn this._defaultProfileName;\n\t}\n\n\tgetDefaultProfile(os?: OperatingSystem): ITerminalProfile | undefined {\n\t\tlet defaultProfileName: string | undefined;\n\t\tif (os) {\n\t\t\tdefaultProfileName = this._configurationService.getValue(\n\t\t\t\t`${TerminalSettingPrefix.DefaultProfile}${this._getOsKey(os)}`,\n\t\t\t);\n\t\t\tif (!defaultProfileName || typeof defaultProfileName !== \"string\") {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tdefaultProfileName = this._defaultProfileName;\n\t\t}\n\t\tif (!defaultProfileName) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// IMPORTANT: Only allow the default profile name to find non-auto detected profiles as\n\t\t// to avoid unsafe path profiles being picked up.\n\t\treturn this.availableProfiles.find(\n\t\t\t(e) => e.profileName === defaultProfileName && !e.isAutoDetected,\n\t\t);\n\t}\n\n\tprivate _getOsKey(os: OperatingSystem): string {\n\t\tswitch (os) {\n\t\t\tcase OperatingSystem.Linux:\n\t\t\t\treturn \"linux\";\n\t\t\tcase OperatingSystem.Macintosh:\n\t\t\t\treturn \"osx\";\n\t\t\tcase OperatingSystem.Windows:\n\t\t\t\treturn \"windows\";\n\t\t}\n\t}\n\n\t@throttle(2000)\n\trefreshAvailableProfiles(): void {\n\t\tthis._refreshAvailableProfilesNow();\n\t}\n\n\tprotected async _refreshAvailableProfilesNow(): Promise<void> {\n\t\t// Profiles\n\t\tconst profiles = await this._detectProfiles(true);\n\t\tconst profilesChanged = !arrays.equals(\n\t\t\tprofiles,\n\t\t\tthis._availableProfiles,\n\t\t\tprofilesEqual,\n\t\t);\n\t\t// Contributed profiles\n\t\tconst contributedProfilesChanged =\n\t\t\tawait this._updateContributedProfiles();\n\t\t// Automation profiles\n\t\tconst platform = await this.getPlatformKey();\n\t\tconst automationProfile = this._configurationService.getValue<\n\t\t\tITerminalExecutable | null | undefined\n\t\t>(`${TerminalSettingPrefix.AutomationProfile}${platform}`);\n\t\tconst automationProfileChanged = !objects.equals(\n\t\t\tautomationProfile,\n\t\t\tthis._automationProfile,\n\t\t);\n\t\t// Update\n\t\tif (\n\t\t\tprofilesChanged ||\n\t\t\tcontributedProfilesChanged ||\n\t\t\tautomationProfileChanged\n\t\t) {\n\t\t\tthis._availableProfiles = profiles;\n\t\t\tthis._automationProfile = automationProfile;\n\t\t\tthis._onDidChangeAvailableProfiles.fire(this._availableProfiles);\n\t\t\tthis._profilesReadyBarrier!.open();\n\t\t\tthis._updateWebContextKey();\n\t\t\tawait this._refreshPlatformConfig(this._availableProfiles);\n\t\t}\n\t}\n\n\tprivate async _updateContributedProfiles(): Promise<boolean> {\n\t\tconst platformKey = await this.getPlatformKey();\n\t\tconst excludedContributedProfiles: string[] = [];\n\t\tconst configProfiles: { [key: string]: any } =\n\t\t\tthis._configurationService.getValue(\n\t\t\t\tTerminalSettingPrefix.Profiles + platformKey,\n\t\t\t);\n\t\tfor (const [profileName, value] of Object.entries(configProfiles)) {\n\t\t\tif (value === null) {\n\t\t\t\texcludedContributedProfiles.push(profileName);\n\t\t\t}\n\t\t}\n\t\tconst filteredContributedProfiles = Array.from(\n\t\t\tthis._terminalContributionService.terminalProfiles.filter(\n\t\t\t\t(p) => !excludedContributedProfiles.includes(p.title),\n\t\t\t),\n\t\t);\n\t\tconst contributedProfilesChanged = !arrays.equals(\n\t\t\tfilteredContributedProfiles,\n\t\t\tthis._contributedProfiles,\n\t\t\tcontributedProfilesEqual,\n\t\t);\n\t\tthis._contributedProfiles = filteredContributedProfiles;\n\t\treturn contributedProfilesChanged;\n\t}\n\n\tgetContributedProfileProvider(\n\t\textensionIdentifier: string,\n\t\tid: string,\n\t): ITerminalProfileProvider | undefined {\n\t\tconst extMap = this._profileProviders.get(extensionIdentifier);\n\t\treturn extMap?.get(id);\n\t}\n\n\tprivate async _detectProfiles(\n\t\tincludeDetectedProfiles?: boolean,\n\t): Promise<ITerminalProfile[]> {\n\t\tconst primaryBackend = await this._terminalInstanceService.getBackend(\n\t\t\tthis._environmentService.remoteAuthority,\n\t\t);\n\t\tif (!primaryBackend) {\n\t\t\treturn this._availableProfiles || [];\n\t\t}\n\t\tconst platform = await this.getPlatformKey();\n\t\tthis._defaultProfileName =\n\t\t\tthis._configurationService.getValue(\n\t\t\t\t`${TerminalSettingPrefix.DefaultProfile}${platform}`,\n\t\t\t) ?? undefined;\n\t\treturn primaryBackend.getProfiles(\n\t\t\tthis._configurationService.getValue(\n\t\t\t\t`${TerminalSettingPrefix.Profiles}${platform}`,\n\t\t\t),\n\t\t\tthis._defaultProfileName,\n\t\t\tincludeDetectedProfiles,\n\t\t);\n\t}\n\n\tprivate _updateWebContextKey(): void {\n\t\tthis._webExtensionContributedProfileContextKey.set(\n\t\t\tisWeb && this._contributedProfiles.length > 0,\n\t\t);\n\t}\n\n\tprivate async _refreshPlatformConfig(profiles: ITerminalProfile[]) {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tregisterTerminalDefaultProfileConfiguration(\n\t\t\t{ os: env?.os || OS, profiles },\n\t\t\tthis._contributedProfiles,\n\t\t);\n\t\tthis._refreshTerminalActionsDisposable.value =\n\t\t\trefreshTerminalActions(profiles);\n\t}\n\n\tasync getPlatformKey(): Promise<string> {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (env) {\n\t\t\treturn env.os === OperatingSystem.Windows\n\t\t\t\t? \"windows\"\n\t\t\t\t: env.os === OperatingSystem.Macintosh\n\t\t\t\t\t? \"osx\"\n\t\t\t\t\t: \"linux\";\n\t\t}\n\t\treturn isWindows ? \"windows\" : isMacintosh ? \"osx\" : \"linux\";\n\t}\n\n\tregisterTerminalProfileProvider(\n\t\textensionIdentifier: string,\n\t\tid: string,\n\t\tprofileProvider: ITerminalProfileProvider,\n\t): IDisposable {\n\t\tlet extMap = this._profileProviders.get(extensionIdentifier);\n\t\tif (!extMap) {\n\t\t\textMap = new Map();\n\t\t\tthis._profileProviders.set(extensionIdentifier, extMap);\n\t\t}\n\t\textMap.set(id, profileProvider);\n\t\treturn toDisposable(() => this._profileProviders.delete(id));\n\t}\n\n\tasync registerContributedProfile(\n\t\targs: IRegisterContributedProfileArgs,\n\t): Promise<void> {\n\t\tconst platformKey = await this.getPlatformKey();\n\t\tconst profilesConfig = await this._configurationService.getValue(\n\t\t\t`${TerminalSettingPrefix.Profiles}${platformKey}`,\n\t\t);\n\t\tif (typeof profilesConfig === \"object\") {\n\t\t\tconst newProfile: IExtensionTerminalProfile = {\n\t\t\t\textensionIdentifier: args.extensionIdentifier,\n\t\t\t\ticon: args.options.icon,\n\t\t\t\tid: args.id,\n\t\t\t\ttitle: args.title,\n\t\t\t\tcolor: args.options.color,\n\t\t\t};\n\n\t\t\t(profilesConfig as { [key: string]: ITerminalProfileObject })[\n\t\t\t\targs.title\n\t\t\t] = newProfile;\n\t\t}\n\t\tawait this._configurationService.updateValue(\n\t\t\t`${TerminalSettingPrefix.Profiles}${platformKey}`,\n\t\t\tprofilesConfig,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t\treturn;\n\t}\n\n\tasync getContributedDefaultProfile(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t): Promise<IExtensionTerminalProfile | undefined> {\n\t\t// prevents recursion with the MainThreadTerminalService call to create terminal\n\t\t// and defers to the provided launch config when an executable is provided\n\t\tif (\n\t\t\tshellLaunchConfig &&\n\t\t\t!shellLaunchConfig.extHostTerminalId &&\n\t\t\t!(\"executable\" in shellLaunchConfig)\n\t\t) {\n\t\t\tconst key = await this.getPlatformKey();\n\t\t\tconst defaultProfileName = this._configurationService.getValue(\n\t\t\t\t`${TerminalSettingPrefix.DefaultProfile}${key}`,\n\t\t\t);\n\t\t\tconst contributedDefaultProfile = this.contributedProfiles.find(\n\t\t\t\t(p) => p.title === defaultProfileName,\n\t\t\t);\n\t\t\treturn contributedDefaultProfile;\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nfunction profilesEqual(one: ITerminalProfile, other: ITerminalProfile) {\n\treturn (\n\t\tone.profileName === other.profileName &&\n\t\tterminalProfileArgsMatch(one.args, other.args) &&\n\t\tone.color === other.color &&\n\t\tterminalIconsEqual(one.icon, other.icon) &&\n\t\tone.isAutoDetected === other.isAutoDetected &&\n\t\tone.isDefault === other.isDefault &&\n\t\tone.overrideName === other.overrideName &&\n\t\tone.path === other.path\n\t);\n}\n\nfunction contributedProfilesEqual(\n\tone: IExtensionTerminalProfile,\n\tother: IExtensionTerminalProfile,\n) {\n\treturn (\n\t\tone.extensionIdentifier === other.extensionIdentifier &&\n\t\tone.color === other.color &&\n\t\tone.icon === other.icon &&\n\t\tone.id === other.id &&\n\t\tone.title === other.title\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
