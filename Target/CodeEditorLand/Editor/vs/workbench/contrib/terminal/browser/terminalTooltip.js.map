{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalTooltip.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IHoverAction } from \"../../../../base/browser/ui/hover/hover.js\";\nimport { asArray } from \"../../../../base/common/arrays.js\";\nimport { MarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { TerminalCapability } from \"../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport type { ITerminalInstance } from \"./terminal.js\";\n\nexport function getInstanceHoverInfo(instance: ITerminalInstance): {\n\tcontent: MarkdownString;\n\tactions: IHoverAction[];\n} {\n\tlet statusString = \"\";\n\tconst statuses = instance.statusList.statuses;\n\tconst actions = [];\n\tfor (const status of statuses) {\n\t\tstatusString += `\\n\\n---\\n\\n${status.icon ? `$(${status.icon?.id}) ` : \"\"}${status.tooltip || status.id}`;\n\t\tif (status.hoverActions) {\n\t\t\tactions.push(...status.hoverActions);\n\t\t}\n\t}\n\n\tconst shellProcessString = getShellProcessTooltip(instance, true);\n\tconst shellIntegrationString = getShellIntegrationTooltip(instance, true);\n\tconst content = new MarkdownString(\n\t\tinstance.title +\n\t\t\tshellProcessString +\n\t\t\tshellIntegrationString +\n\t\t\tstatusString,\n\t\t{ supportThemeIcons: true },\n\t);\n\n\treturn { content, actions };\n}\n\nexport function getShellIntegrationTooltip(\n\tinstance: ITerminalInstance,\n\tmarkdown: boolean,\n): string {\n\tconst shellIntegrationCapabilities: TerminalCapability[] = [];\n\tif (instance.capabilities.has(TerminalCapability.CommandDetection)) {\n\t\tshellIntegrationCapabilities.push(TerminalCapability.CommandDetection);\n\t}\n\tif (instance.capabilities.has(TerminalCapability.CwdDetection)) {\n\t\tshellIntegrationCapabilities.push(TerminalCapability.CwdDetection);\n\t}\n\tlet shellIntegrationString = \"\";\n\tif (shellIntegrationCapabilities.length > 0) {\n\t\tshellIntegrationString += `${markdown ? \"\\n\\n---\\n\\n\" : \"\\n\\n\"}${localize(\"shellIntegration.enabled\", \"Shell integration activated\")}`;\n\t} else if (instance.shellLaunchConfig.ignoreShellIntegration) {\n\t\tshellIntegrationString += `${markdown ? \"\\n\\n---\\n\\n\" : \"\\n\\n\"}${localize(\"launchFailed.exitCodeOnlyShellIntegration\", \"The terminal process failed to launch. Disabling shell integration with terminal.integrated.shellIntegration.enabled might help.\")}`;\n\t} else if (instance.usedShellIntegrationInjection) {\n\t\tshellIntegrationString += `${markdown ? \"\\n\\n---\\n\\n\" : \"\\n\\n\"}${localize(\"shellIntegration.activationFailed\", \"Shell integration failed to activate\")}`;\n\t}\n\treturn shellIntegrationString;\n}\n\nexport function getShellProcessTooltip(\n\tinstance: ITerminalInstance,\n\tmarkdown: boolean,\n): string {\n\tconst lines: string[] = [];\n\n\tif (instance.processId && instance.processId > 0) {\n\t\tlines.push(\n\t\t\tlocalize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"shellProcessTooltip.processId\",\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t'The first arg is \"PID\" which shouldn\\'t be translated',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\"Process ID ({0}): {1}\",\n\t\t\t\t\"PID\",\n\t\t\t\tinstance.processId,\n\t\t\t) + \"\\n\",\n\t\t);\n\t}\n\n\tif (instance.shellLaunchConfig.executable) {\n\t\tlet commandLine = instance.shellLaunchConfig.executable;\n\t\tconst args = asArray(\n\t\t\tinstance.injectedArgs || instance.shellLaunchConfig.args || [],\n\t\t)\n\t\t\t.map((x) => `'${x}'`)\n\t\t\t.join(\" \");\n\t\tif (args) {\n\t\t\tcommandLine += ` ${args}`;\n\t\t}\n\n\t\tlines.push(\n\t\t\tlocalize(\n\t\t\t\t\"shellProcessTooltip.commandLine\",\n\t\t\t\t\"Command line: {0}\",\n\t\t\t\tcommandLine,\n\t\t\t),\n\t\t);\n\t}\n\n\treturn lines.length\n\t\t? `${markdown ? \"\\n\\n---\\n\\n\" : \"\\n\\n\"}${lines.join(\"\\n\")}`\n\t\t: \"\";\n}\n"],
  "mappings": ";;AAMA,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AAG5B,SAAS,qBAAqB,UAGnC;AACD,MAAI,eAAe;AACnB,QAAM,WAAW,SAAS,WAAW;AACrC,QAAM,UAAU,CAAC;AACjB,aAAW,UAAU,UAAU;AAC9B,oBAAgB;AAAA;AAAA;AAAA;AAAA,EAAc,OAAO,OAAO,KAAK,OAAO,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,WAAW,OAAO,EAAE;AACvG,QAAI,OAAO,cAAc;AACxB,cAAQ,KAAK,GAAG,OAAO,YAAY;AAAA,IACpC;AAAA,EACD;AAEA,QAAM,qBAAqB,uBAAuB,UAAU,IAAI;AAChE,QAAM,yBAAyB,2BAA2B,UAAU,IAAI;AACxE,QAAM,UAAU,IAAI;AAAA,IACnB,SAAS,QACR,qBACA,yBACA;AAAA,IACD,EAAE,mBAAmB,KAAK;AAAA,EAC3B;AAEA,SAAO,EAAE,SAAS,QAAQ;AAC3B;AAzBgB;AA2BT,SAAS,2BACf,UACA,UACS;AACT,QAAM,+BAAqD,CAAC;AAC5D,MAAI,SAAS,aAAa,IAAI,mBAAmB,gBAAgB,GAAG;AACnE,iCAA6B,KAAK,mBAAmB,gBAAgB;AAAA,EACtE;AACA,MAAI,SAAS,aAAa,IAAI,mBAAmB,YAAY,GAAG;AAC/D,iCAA6B,KAAK,mBAAmB,YAAY;AAAA,EAClE;AACA,MAAI,yBAAyB;AAC7B,MAAI,6BAA6B,SAAS,GAAG;AAC5C,8BAA0B,GAAG,WAAW,gBAAgB,MAAM,GAAG,SAAS,4BAA4B,6BAA6B,CAAC;AAAA,EACrI,WAAW,SAAS,kBAAkB,wBAAwB;AAC7D,8BAA0B,GAAG,WAAW,gBAAgB,MAAM,GAAG,SAAS,6CAA6C,kIAAkI,CAAC;AAAA,EAC3P,WAAW,SAAS,+BAA+B;AAClD,8BAA0B,GAAG,WAAW,gBAAgB,MAAM,GAAG,SAAS,qCAAqC,sCAAsC,CAAC;AAAA,EACvJ;AACA,SAAO;AACR;AApBgB;AAsBT,SAAS,uBACf,UACA,UACS;AACT,QAAM,QAAkB,CAAC;AAEzB,MAAI,SAAS,aAAa,SAAS,YAAY,GAAG;AACjD,UAAM;AAAA,MACL;AAAA,QACC;AAAA,UACC,KAAK;AAAA,UACL,SAAS;AAAA,YACR;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS;AAAA,MACV,IAAI;AAAA,IACL;AAAA,EACD;AAEA,MAAI,SAAS,kBAAkB,YAAY;AAC1C,QAAI,cAAc,SAAS,kBAAkB;AAC7C,UAAM,OAAO;AAAA,MACZ,SAAS,gBAAgB,SAAS,kBAAkB,QAAQ,CAAC;AAAA,IAC9D,EACE,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,EACnB,KAAK,GAAG;AACV,QAAI,MAAM;AACT,qBAAe,IAAI,IAAI;AAAA,IACxB;AAEA,UAAM;AAAA,MACL;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,SAAO,MAAM,SACV,GAAG,WAAW,gBAAgB,MAAM,GAAG,MAAM,KAAK,IAAI,CAAC,KACvD;AACJ;AA7CgB;",
  "names": []
}
