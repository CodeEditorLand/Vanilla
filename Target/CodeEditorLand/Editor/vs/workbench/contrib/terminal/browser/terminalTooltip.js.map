{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalTooltip.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { ITerminalInstance } from './terminal.js';\nimport { TerminalCapability } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { asArray } from '../../../../base/common/arrays.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport type { IHoverAction } from '../../../../base/browser/ui/hover/hover.js';\n\nexport function getInstanceHoverInfo(instance: ITerminalInstance): { content: MarkdownString; actions: IHoverAction[] } {\n\tlet statusString = '';\n\tconst statuses = instance.statusList.statuses;\n\tconst actions = [];\n\tfor (const status of statuses) {\n\t\tstatusString += `\\n\\n---\\n\\n${status.icon ? `$(${status.icon?.id}) ` : ''}${status.tooltip || status.id}`;\n\t\tif (status.hoverActions) {\n\t\t\tactions.push(...status.hoverActions);\n\t\t}\n\t}\n\n\tconst shellProcessString = getShellProcessTooltip(instance, true);\n\tconst shellIntegrationString = getShellIntegrationTooltip(instance, true);\n\tconst content = new MarkdownString(instance.title + shellProcessString + shellIntegrationString + statusString, { supportThemeIcons: true });\n\n\treturn { content, actions };\n}\n\nexport function getShellIntegrationTooltip(instance: ITerminalInstance, markdown: boolean): string {\n\tconst shellIntegrationCapabilities: TerminalCapability[] = [];\n\tif (instance.capabilities.has(TerminalCapability.CommandDetection)) {\n\t\tshellIntegrationCapabilities.push(TerminalCapability.CommandDetection);\n\t}\n\tif (instance.capabilities.has(TerminalCapability.CwdDetection)) {\n\t\tshellIntegrationCapabilities.push(TerminalCapability.CwdDetection);\n\t}\n\tlet shellIntegrationString = '';\n\tif (shellIntegrationCapabilities.length > 0) {\n\t\tshellIntegrationString += `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${localize('shellIntegration.enabled', \"Shell integration activated\")}`;\n\t} else {\n\t\tif (instance.shellLaunchConfig.ignoreShellIntegration) {\n\t\t\tshellIntegrationString += `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${localize('launchFailed.exitCodeOnlyShellIntegration', \"The terminal process failed to launch. Disabling shell integration with terminal.integrated.shellIntegration.enabled might help.\")}`;\n\t\t} else {\n\t\t\tif (instance.usedShellIntegrationInjection) {\n\t\t\t\tshellIntegrationString += `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${localize('shellIntegration.activationFailed', \"Shell integration failed to activate\")}`;\n\t\t\t}\n\t\t}\n\t}\n\treturn shellIntegrationString;\n}\n\nexport function getShellProcessTooltip(instance: ITerminalInstance, markdown: boolean): string {\n\tconst lines: string[] = [];\n\n\tif (instance.processId && instance.processId > 0) {\n\t\tlines.push(localize({ key: 'shellProcessTooltip.processId', comment: ['The first arg is \"PID\" which shouldn\\'t be translated'] }, \"Process ID ({0}): {1}\", 'PID', instance.processId) + '\\n');\n\t}\n\n\tif (instance.shellLaunchConfig.executable) {\n\t\tlet commandLine = instance.shellLaunchConfig.executable;\n\t\tconst args = asArray(instance.injectedArgs || instance.shellLaunchConfig.args || []).map(x => `'${x}'`).join(' ');\n\t\tif (args) {\n\t\t\tcommandLine += ` ${args}`;\n\t\t}\n\n\t\tlines.push(localize('shellProcessTooltip.commandLine', 'Command line: {0}', commandLine));\n\t}\n\n\treturn lines.length ? `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${lines.join('\\n')}` : '';\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAGxB,SAAS,qBAAqB,UAAmF;AACvH,MAAI,eAAe;AACnB,QAAM,WAAW,SAAS,WAAW;AACrC,QAAM,UAAU,CAAC;AACjB,aAAW,UAAU,UAAU;AAC9B,oBAAgB;AAAA;AAAA;AAAA;AAAA,EAAc,OAAO,OAAO,KAAK,OAAO,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,WAAW,OAAO,EAAE;AACvG,QAAI,OAAO,cAAc;AACxB,cAAQ,KAAK,GAAG,OAAO,YAAY;AAAA,IACpC;AAAA,EACD;AAEA,QAAM,qBAAqB,uBAAuB,UAAU,IAAI;AAChE,QAAM,yBAAyB,2BAA2B,UAAU,IAAI;AACxE,QAAM,UAAU,IAAI,eAAe,SAAS,QAAQ,qBAAqB,yBAAyB,cAAc,EAAE,mBAAmB,KAAK,CAAC;AAE3I,SAAO,EAAE,SAAS,QAAQ;AAC3B;AAhBgB;AAkBT,SAAS,2BAA2B,UAA6B,UAA2B;AAClG,QAAM,+BAAqD,CAAC;AAC5D,MAAI,SAAS,aAAa,IAAI,mBAAmB,gBAAgB,GAAG;AACnE,iCAA6B,KAAK,mBAAmB,gBAAgB;AAAA,EACtE;AACA,MAAI,SAAS,aAAa,IAAI,mBAAmB,YAAY,GAAG;AAC/D,iCAA6B,KAAK,mBAAmB,YAAY;AAAA,EAClE;AACA,MAAI,yBAAyB;AAC7B,MAAI,6BAA6B,SAAS,GAAG;AAC5C,8BAA0B,GAAG,WAAW,gBAAgB,MAAM,GAAG,SAAS,4BAA4B,6BAA6B,CAAC;AAAA,EACrI,OAAO;AACN,QAAI,SAAS,kBAAkB,wBAAwB;AACtD,gCAA0B,GAAG,WAAW,gBAAgB,MAAM,GAAG,SAAS,6CAA6C,kIAAkI,CAAC;AAAA,IAC3P,OAAO;AACN,UAAI,SAAS,+BAA+B;AAC3C,kCAA0B,GAAG,WAAW,gBAAgB,MAAM,GAAG,SAAS,qCAAqC,sCAAsC,CAAC;AAAA,MACvJ;AAAA,IACD;AAAA,EACD;AACA,SAAO;AACR;AArBgB;AAuBT,SAAS,uBAAuB,UAA6B,UAA2B;AAC9F,QAAM,QAAkB,CAAC;AAEzB,MAAI,SAAS,aAAa,SAAS,YAAY,GAAG;AACjD,UAAM,KAAK,SAAS,EAAE,KAAK,iCAAiC,SAAS,CAAC,sDAAuD,EAAE,GAAG,yBAAyB,OAAO,SAAS,SAAS,IAAI,IAAI;AAAA,EAC7L;AAEA,MAAI,SAAS,kBAAkB,YAAY;AAC1C,QAAI,cAAc,SAAS,kBAAkB;AAC7C,UAAM,OAAO,QAAQ,SAAS,gBAAgB,SAAS,kBAAkB,QAAQ,CAAC,CAAC,EAAE,IAAI,OAAK,IAAI,CAAC,GAAG,EAAE,KAAK,GAAG;AAChH,QAAI,MAAM;AACT,qBAAe,IAAI,IAAI;AAAA,IACxB;AAEA,UAAM,KAAK,SAAS,mCAAmC,qBAAqB,WAAW,CAAC;AAAA,EACzF;AAEA,SAAO,MAAM,SAAS,GAAG,WAAW,gBAAgB,MAAM,GAAG,MAAM,KAAK,IAAI,CAAC,KAAK;AACnF;AAlBgB;",
  "names": []
}
