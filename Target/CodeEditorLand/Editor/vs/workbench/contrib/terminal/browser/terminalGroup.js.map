{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalGroup.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindow } from \"../../../../base/browser/dom.js\";\nimport {\n\ttype IView,\n\tOrientation,\n\tSizing,\n\tSplitView,\n} from \"../../../../base/browser/ui/splitview/splitview.js\";\nimport { asArray } from \"../../../../base/common/arrays.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IShellLaunchConfig,\n\ttype ITerminalTabLayoutInfoById,\n\tTerminalLocation,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport {\n\tIViewDescriptorService,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tPosition,\n\tisHorizontal,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport { getPartByLocation } from \"../../../services/views/browser/viewsService.js\";\nimport { TERMINAL_VIEW_ID } from \"../common/terminal.js\";\nimport {\n\tDirection,\n\tITerminalConfigurationService,\n\ttype ITerminalGroup,\n\ttype ITerminalInstance,\n\tITerminalInstanceService,\n} from \"./terminal.js\";\nimport { TerminalStatus } from \"./terminalStatusList.js\";\n\nenum Constants {\n\t/**\n\t * The minimum size in pixels of a split pane.\n\t */\n\tSplitPaneMinSize = 80,\n\t/**\n\t * The number of cells the terminal gets added or removed when asked to increase or decrease\n\t * the view size.\n\t */\n\tResizePartCellCount = 4,\n}\n\nclass SplitPaneContainer extends Disposable {\n\tprivate _height: number;\n\tprivate _width: number;\n\tprivate _splitView!: SplitView;\n\tprivate readonly _splitViewDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate _children: SplitPane[] = [];\n\tprivate _terminalToPane: Map<ITerminalInstance, SplitPane> = new Map();\n\n\tprivate _onDidChange: Event<number | undefined> = Event.None;\n\tget onDidChange(): Event<number | undefined> {\n\t\treturn this._onDidChange;\n\t}\n\n\tconstructor(\n\t\tprivate _container: HTMLElement,\n\t\tpublic orientation: Orientation,\n\t) {\n\t\tsuper();\n\t\tthis._width = this._container.offsetWidth;\n\t\tthis._height = this._container.offsetHeight;\n\t\tthis._createSplitView();\n\t\tthis._splitView.layout(\n\t\t\tthis.orientation === Orientation.HORIZONTAL\n\t\t\t\t? this._width\n\t\t\t\t: this._height,\n\t\t);\n\t}\n\n\tprivate _createSplitView(): void {\n\t\tthis._splitView = new SplitView(this._container, {\n\t\t\torientation: this.orientation,\n\t\t});\n\t\tthis._splitViewDisposables.clear();\n\t\tthis._splitViewDisposables.add(\n\t\t\tthis._splitView.onDidSashReset(() =>\n\t\t\t\tthis._splitView.distributeViewSizes(),\n\t\t\t),\n\t\t);\n\t}\n\n\tsplit(instance: ITerminalInstance, index: number): void {\n\t\tthis._addChild(instance, index);\n\t}\n\n\tresizePane(index: number, direction: Direction, amount: number): void {\n\t\t// Only resize when there is more than one pane\n\t\tif (this._children.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get sizes\n\t\tconst sizes: number[] = [];\n\t\tfor (let i = 0; i < this._splitView.length; i++) {\n\t\t\tsizes.push(this._splitView.getViewSize(i));\n\t\t}\n\n\t\t// Remove size from right pane, unless index is the last pane in which case use left pane\n\t\tconst isSizingEndPane = index !== this._children.length - 1;\n\t\tconst indexToChange = isSizingEndPane ? index + 1 : index - 1;\n\t\tif (isSizingEndPane && direction === Direction.Left) {\n\t\t\tamount *= -1;\n\t\t} else if (!isSizingEndPane && direction === Direction.Right) {\n\t\t\tamount *= -1;\n\t\t} else if (isSizingEndPane && direction === Direction.Up) {\n\t\t\tamount *= -1;\n\t\t} else if (!isSizingEndPane && direction === Direction.Down) {\n\t\t\tamount *= -1;\n\t\t}\n\n\t\t// Ensure the size is not reduced beyond the minimum, otherwise weird things can happen\n\t\tif (sizes[index] + amount < Constants.SplitPaneMinSize) {\n\t\t\tamount = Constants.SplitPaneMinSize - sizes[index];\n\t\t} else if (sizes[indexToChange] - amount < Constants.SplitPaneMinSize) {\n\t\t\tamount = sizes[indexToChange] - Constants.SplitPaneMinSize;\n\t\t}\n\n\t\t// Apply the size change\n\t\tsizes[index] += amount;\n\t\tsizes[indexToChange] -= amount;\n\t\tfor (let i = 0; i < this._splitView.length - 1; i++) {\n\t\t\tthis._splitView.resizeView(i, sizes[i]);\n\t\t}\n\t}\n\n\tresizePanes(relativeSizes: number[]): void {\n\t\tif (this._children.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// assign any extra size to last terminal\n\t\trelativeSizes[relativeSizes.length - 1] +=\n\t\t\t1 -\n\t\t\trelativeSizes.reduce(\n\t\t\t\t(totalValue, currentValue) => totalValue + currentValue,\n\t\t\t\t0,\n\t\t\t);\n\t\tlet totalSize = 0;\n\t\tfor (let i = 0; i < this._splitView.length; i++) {\n\t\t\ttotalSize += this._splitView.getViewSize(i);\n\t\t}\n\t\tfor (let i = 0; i < this._splitView.length; i++) {\n\t\t\tthis._splitView.resizeView(i, totalSize * relativeSizes[i]);\n\t\t}\n\t}\n\n\tgetPaneSize(instance: ITerminalInstance): number {\n\t\tconst paneForInstance = this._terminalToPane.get(instance);\n\t\tif (!paneForInstance) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst index = this._children.indexOf(paneForInstance);\n\t\treturn this._splitView.getViewSize(index);\n\t}\n\n\tprivate _addChild(instance: ITerminalInstance, index: number): void {\n\t\tconst child = new SplitPane(\n\t\t\tinstance,\n\t\t\tthis.orientation === Orientation.HORIZONTAL\n\t\t\t\t? this._height\n\t\t\t\t: this._width,\n\t\t);\n\t\tchild.orientation = this.orientation;\n\t\tif (typeof index === \"number\") {\n\t\t\tthis._children.splice(index, 0, child);\n\t\t} else {\n\t\t\tthis._children.push(child);\n\t\t}\n\t\tthis._terminalToPane.set(\n\t\t\tinstance,\n\t\t\tthis._children[this._children.indexOf(child)],\n\t\t);\n\n\t\tthis._withDisabledLayout(() =>\n\t\t\tthis._splitView.addView(child, Sizing.Distribute, index),\n\t\t);\n\t\tthis.layout(this._width, this._height);\n\n\t\tthis._onDidChange = Event.any(\n\t\t\t...this._children.map((c) => c.onDidChange),\n\t\t);\n\t}\n\n\tremove(instance: ITerminalInstance): void {\n\t\tlet index: number | null = null;\n\t\tfor (let i = 0; i < this._children.length; i++) {\n\t\t\tif (this._children[i].instance === instance) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tif (index !== null) {\n\t\t\tthis._children.splice(index, 1);\n\t\t\tthis._terminalToPane.delete(instance);\n\t\t\tthis._splitView.removeView(index, Sizing.Distribute);\n\t\t\tinstance.detachFromElement();\n\t\t}\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (this.orientation === Orientation.HORIZONTAL) {\n\t\t\tthis._children.forEach((c) => c.orthogonalLayout(height));\n\t\t\tthis._splitView.layout(width);\n\t\t} else {\n\t\t\tthis._children.forEach((c) => c.orthogonalLayout(width));\n\t\t\tthis._splitView.layout(height);\n\t\t}\n\t}\n\n\tsetOrientation(orientation: Orientation): void {\n\t\tif (this.orientation === orientation) {\n\t\t\treturn;\n\t\t}\n\t\tthis.orientation = orientation;\n\n\t\t// Remove old split view\n\t\twhile (this._container.children.length > 0) {\n\t\t\tthis._container.children[0].remove();\n\t\t}\n\t\tthis._splitViewDisposables.clear();\n\t\tthis._splitView.dispose();\n\n\t\t// Create new split view with updated orientation\n\t\tthis._createSplitView();\n\t\tthis._withDisabledLayout(() => {\n\t\t\tthis._children.forEach((child) => {\n\t\t\t\tchild.orientation = orientation;\n\t\t\t\tthis._splitView.addView(child, 1);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _withDisabledLayout(innerFunction: () => void): void {\n\t\t// Whenever manipulating views that are going to be changed immediately, disabling\n\t\t// layout/resize events in the terminal prevent bad dimensions going to the pty.\n\t\tthis._children.forEach((c) => (c.instance.disableLayout = true));\n\t\tinnerFunction();\n\t\tthis._children.forEach((c) => (c.instance.disableLayout = false));\n\t}\n}\n\nclass SplitPane implements IView {\n\tminimumSize: number = Constants.SplitPaneMinSize;\n\tmaximumSize: number = Number.MAX_VALUE;\n\n\torientation: Orientation | undefined;\n\n\tprivate _onDidChange: Event<number | undefined> = Event.None;\n\tget onDidChange(): Event<number | undefined> {\n\t\treturn this._onDidChange;\n\t}\n\n\treadonly element: HTMLElement;\n\n\tconstructor(\n\t\treadonly instance: ITerminalInstance,\n\t\tpublic orthogonalSize: number,\n\t) {\n\t\tthis.element = document.createElement(\"div\");\n\t\tthis.element.className = \"terminal-split-pane\";\n\t\tthis.instance.attachToElement(this.element);\n\t}\n\n\tlayout(size: number): void {\n\t\t// Only layout when both sizes are known\n\t\tif (!size || !this.orthogonalSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.orientation === Orientation.VERTICAL) {\n\t\t\tthis.instance.layout({ width: this.orthogonalSize, height: size });\n\t\t} else {\n\t\t\tthis.instance.layout({ width: size, height: this.orthogonalSize });\n\t\t}\n\t}\n\n\torthogonalLayout(size: number): void {\n\t\tthis.orthogonalSize = size;\n\t}\n}\n\nexport class TerminalGroup extends Disposable implements ITerminalGroup {\n\tprivate _terminalInstances: ITerminalInstance[] = [];\n\tprivate _splitPaneContainer: SplitPaneContainer | undefined;\n\tprivate _groupElement: HTMLElement | undefined;\n\tprivate _panelPosition: Position = Position.BOTTOM;\n\tprivate _terminalLocation: ViewContainerLocation =\n\t\tViewContainerLocation.Panel;\n\tprivate _instanceDisposables: Map<number, IDisposable[]> = new Map();\n\n\tprivate _activeInstanceIndex = -1;\n\n\tget terminalInstances(): ITerminalInstance[] {\n\t\treturn this._terminalInstances;\n\t}\n\n\tprivate _initialRelativeSizes: number[] | undefined;\n\tprivate _visible = false;\n\n\tprivate readonly _onDidDisposeInstance: Emitter<ITerminalInstance> =\n\t\tthis._register(new Emitter<ITerminalInstance>());\n\treadonly onDidDisposeInstance = this._onDidDisposeInstance.event;\n\tprivate readonly _onDidFocusInstance: Emitter<ITerminalInstance> =\n\t\tthis._register(new Emitter<ITerminalInstance>());\n\treadonly onDidFocusInstance = this._onDidFocusInstance.event;\n\tprivate readonly _onDidChangeInstanceCapability: Emitter<ITerminalInstance> =\n\t\tthis._register(new Emitter<ITerminalInstance>());\n\treadonly onDidChangeInstanceCapability =\n\t\tthis._onDidChangeInstanceCapability.event;\n\tprivate readonly _onDisposed: Emitter<ITerminalGroup> = this._register(\n\t\tnew Emitter<ITerminalGroup>(),\n\t);\n\treadonly onDisposed = this._onDisposed.event;\n\tprivate readonly _onInstancesChanged: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onInstancesChanged = this._onInstancesChanged.event;\n\tprivate readonly _onDidChangeActiveInstance = this._register(\n\t\tnew Emitter<ITerminalInstance | undefined>(),\n\t);\n\treadonly onDidChangeActiveInstance = this._onDidChangeActiveInstance.event;\n\tprivate readonly _onPanelOrientationChanged = this._register(\n\t\tnew Emitter<Orientation>(),\n\t);\n\treadonly onPanelOrientationChanged = this._onPanelOrientationChanged.event;\n\n\tconstructor(\n\t\tprivate _container: HTMLElement | undefined,\n\t\tshellLaunchConfigOrInstance:\n\t\t\t| IShellLaunchConfig\n\t\t\t| ITerminalInstance\n\t\t\t| undefined,\n\t\t@ITerminalConfigurationService\n\t\tprivate readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@ITerminalInstanceService\n\t\tprivate readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IWorkbenchLayoutService\n\t\tprivate readonly _layoutService: IWorkbenchLayoutService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tif (shellLaunchConfigOrInstance) {\n\t\t\tthis.addInstance(shellLaunchConfigOrInstance);\n\t\t}\n\t\tif (this._container) {\n\t\t\tthis.attachToElement(this._container);\n\t\t}\n\t\tthis._onPanelOrientationChanged.fire(\n\t\t\tthis._terminalLocation === ViewContainerLocation.Panel &&\n\t\t\t\tisHorizontal(this._panelPosition)\n\t\t\t\t? Orientation.HORIZONTAL\n\t\t\t\t: Orientation.VERTICAL,\n\t\t);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (this._container && this._groupElement) {\n\t\t\t\t\tthis._groupElement.remove();\n\t\t\t\t\tthis._groupElement = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\taddInstance(\n\t\tshellLaunchConfigOrInstance: IShellLaunchConfig | ITerminalInstance,\n\t\tparentTerminalId?: number,\n\t): void {\n\t\tlet instance: ITerminalInstance;\n\t\t// if a parent terminal is provided, find it\n\t\t// otherwise, parent is the active terminal\n\t\tconst parentIndex = parentTerminalId\n\t\t\t? this._terminalInstances.findIndex(\n\t\t\t\t\t(t) => t.instanceId === parentTerminalId,\n\t\t\t\t)\n\t\t\t: this._activeInstanceIndex;\n\t\tif (\"instanceId\" in shellLaunchConfigOrInstance) {\n\t\t\tinstance = shellLaunchConfigOrInstance;\n\t\t} else {\n\t\t\tinstance = this._terminalInstanceService.createInstance(\n\t\t\t\tshellLaunchConfigOrInstance,\n\t\t\t\tTerminalLocation.Panel,\n\t\t\t);\n\t\t}\n\t\tif (this._terminalInstances.length === 0) {\n\t\t\tthis._terminalInstances.push(instance);\n\t\t\tthis._activeInstanceIndex = 0;\n\t\t} else {\n\t\t\tthis._terminalInstances.splice(parentIndex + 1, 0, instance);\n\t\t}\n\t\tthis._initInstanceListeners(instance);\n\n\t\tif (this._splitPaneContainer) {\n\t\t\tthis._splitPaneContainer.split(instance, parentIndex + 1);\n\t\t}\n\n\t\tthis._onInstancesChanged.fire();\n\t}\n\n\toverride dispose(): void {\n\t\tthis._terminalInstances = [];\n\t\tthis._onInstancesChanged.fire();\n\t\tsuper.dispose();\n\t}\n\n\tget activeInstance(): ITerminalInstance | undefined {\n\t\tif (this._terminalInstances.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._terminalInstances[this._activeInstanceIndex];\n\t}\n\n\tgetLayoutInfo(isActive: boolean): ITerminalTabLayoutInfoById {\n\t\tconst instances = this.terminalInstances.filter(\n\t\t\t(instance) =>\n\t\t\t\ttypeof instance.persistentProcessId === \"number\" &&\n\t\t\t\tinstance.shouldPersist,\n\t\t);\n\t\tconst totalSize = instances\n\t\t\t.map((t) => this._splitPaneContainer?.getPaneSize(t) || 0)\n\t\t\t.reduce((total, size) => (total += size), 0);\n\t\treturn {\n\t\t\tisActive: isActive,\n\t\t\tactivePersistentProcessId: this.activeInstance\n\t\t\t\t? this.activeInstance.persistentProcessId\n\t\t\t\t: undefined,\n\t\t\tterminals: instances.map((t) => {\n\t\t\t\treturn {\n\t\t\t\t\trelativeSize:\n\t\t\t\t\t\ttotalSize > 0\n\t\t\t\t\t\t\t? this._splitPaneContainer!.getPaneSize(t) /\n\t\t\t\t\t\t\t\ttotalSize\n\t\t\t\t\t\t\t: 0,\n\t\t\t\t\tterminal: t.persistentProcessId || 0,\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate _initInstanceListeners(instance: ITerminalInstance) {\n\t\tthis._instanceDisposables.set(instance.instanceId, [\n\t\t\tinstance.onDisposed((instance) => {\n\t\t\t\tthis._onDidDisposeInstance.fire(instance);\n\t\t\t\tthis._handleOnDidDisposeInstance(instance);\n\t\t\t}),\n\t\t\tinstance.onDidFocus((instance) => {\n\t\t\t\tthis._setActiveInstance(instance);\n\t\t\t\tthis._onDidFocusInstance.fire(instance);\n\t\t\t}),\n\t\t\tinstance.capabilities.onDidAddCapabilityType(() =>\n\t\t\t\tthis._onDidChangeInstanceCapability.fire(instance),\n\t\t\t),\n\t\t\tinstance.capabilities.onDidRemoveCapabilityType(() =>\n\t\t\t\tthis._onDidChangeInstanceCapability.fire(instance),\n\t\t\t),\n\t\t]);\n\t}\n\n\tprivate _handleOnDidDisposeInstance(instance: ITerminalInstance) {\n\t\tthis._removeInstance(instance);\n\t}\n\n\tremoveInstance(instance: ITerminalInstance) {\n\t\tthis._removeInstance(instance);\n\t}\n\n\tprivate _removeInstance(instance: ITerminalInstance) {\n\t\tconst index = this._terminalInstances.indexOf(instance);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wasActiveInstance = instance === this.activeInstance;\n\t\tthis._terminalInstances.splice(index, 1);\n\n\t\t// Adjust focus if the instance was active\n\t\tif (wasActiveInstance && this._terminalInstances.length > 0) {\n\t\t\tconst newIndex =\n\t\t\t\tindex < this._terminalInstances.length\n\t\t\t\t\t? index\n\t\t\t\t\t: this._terminalInstances.length - 1;\n\t\t\tthis.setActiveInstanceByIndex(newIndex);\n\t\t\t// TODO: Only focus the new instance if the group had focus?\n\t\t\tthis.activeInstance?.focus(true);\n\t\t} else if (index < this._activeInstanceIndex) {\n\t\t\t// Adjust active instance index if needed\n\t\t\tthis._activeInstanceIndex--;\n\t\t}\n\n\t\tthis._splitPaneContainer?.remove(instance);\n\n\t\t// Fire events and dispose group if it was the last instance\n\t\tif (this._terminalInstances.length === 0) {\n\t\t\tthis._onDisposed.fire(this);\n\t\t\tthis.dispose();\n\t\t} else {\n\t\t\tthis._onInstancesChanged.fire();\n\t\t}\n\n\t\t// Dispose instance event listeners\n\t\tconst disposables = this._instanceDisposables.get(instance.instanceId);\n\t\tif (disposables) {\n\t\t\tdispose(disposables);\n\t\t\tthis._instanceDisposables.delete(instance.instanceId);\n\t\t}\n\t}\n\n\tmoveInstance(\n\t\tinstances: ITerminalInstance | ITerminalInstance[],\n\t\tindex: number,\n\t\tposition: \"before\" | \"after\",\n\t): void {\n\t\tinstances = asArray(instances);\n\t\tconst hasInvalidInstance = instances.some(\n\t\t\t(instance) => !this.terminalInstances.includes(instance),\n\t\t);\n\t\tif (hasInvalidInstance) {\n\t\t\treturn;\n\t\t}\n\t\tconst insertIndex = position === \"before\" ? index : index + 1;\n\t\tthis._terminalInstances.splice(insertIndex, 0, ...instances);\n\t\tfor (const item of instances) {\n\t\t\tconst originSourceGroupIndex =\n\t\t\t\tposition === \"after\"\n\t\t\t\t\t? this._terminalInstances.indexOf(item)\n\t\t\t\t\t: this._terminalInstances.lastIndexOf(item);\n\t\t\tthis._terminalInstances.splice(originSourceGroupIndex, 1);\n\t\t}\n\t\tif (this._splitPaneContainer) {\n\t\t\tfor (let i = 0; i < instances.length; i++) {\n\t\t\t\tconst item = instances[i];\n\t\t\t\tthis._splitPaneContainer.remove(item);\n\t\t\t\tthis._splitPaneContainer.split(\n\t\t\t\t\titem,\n\t\t\t\t\tindex + (position === \"before\" ? i : 0),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._onInstancesChanged.fire();\n\t}\n\n\tprivate _setActiveInstance(instance: ITerminalInstance) {\n\t\tthis.setActiveInstanceByIndex(\n\t\t\tthis._getIndexFromId(instance.instanceId),\n\t\t);\n\t}\n\n\tprivate _getIndexFromId(terminalId: number): number {\n\t\tlet terminalIndex = -1;\n\t\tthis.terminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tterminalIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (terminalIndex === -1) {\n\t\t\tthrow new Error(\n\t\t\t\t`Terminal with ID ${terminalId} does not exist (has it already been disposed?)`,\n\t\t\t);\n\t\t}\n\t\treturn terminalIndex;\n\t}\n\n\tsetActiveInstanceByIndex(index: number, force?: boolean): void {\n\t\t// Check for invalid value\n\t\tif (index < 0 || index >= this._terminalInstances.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldActiveInstance = this.activeInstance;\n\t\tthis._activeInstanceIndex = index;\n\t\tif (oldActiveInstance !== this.activeInstance || force) {\n\t\t\tthis._onInstancesChanged.fire();\n\t\t\tthis._onDidChangeActiveInstance.fire(this.activeInstance);\n\t\t}\n\t}\n\n\tattachToElement(element: HTMLElement): void {\n\t\tthis._container = element;\n\n\t\t// If we already have a group element, we can reparent it\n\t\tif (!this._groupElement) {\n\t\t\tthis._groupElement = document.createElement(\"div\");\n\t\t\tthis._groupElement.classList.add(\"terminal-group\");\n\t\t}\n\n\t\tthis._container.appendChild(this._groupElement);\n\t\tif (!this._splitPaneContainer) {\n\t\t\tthis._panelPosition = this._layoutService.getPanelPosition();\n\t\t\tthis._terminalLocation =\n\t\t\t\tthis._viewDescriptorService.getViewLocationById(\n\t\t\t\t\tTERMINAL_VIEW_ID,\n\t\t\t\t)!;\n\t\t\tconst orientation =\n\t\t\t\tthis._terminalLocation === ViewContainerLocation.Panel &&\n\t\t\t\tisHorizontal(this._panelPosition)\n\t\t\t\t\t? Orientation.HORIZONTAL\n\t\t\t\t\t: Orientation.VERTICAL;\n\t\t\tthis._splitPaneContainer =\n\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\tSplitPaneContainer,\n\t\t\t\t\tthis._groupElement,\n\t\t\t\t\torientation,\n\t\t\t\t);\n\t\t\tthis.terminalInstances.forEach((instance) =>\n\t\t\t\tthis._splitPaneContainer!.split(\n\t\t\t\t\tinstance,\n\t\t\t\t\tthis._activeInstanceIndex + 1,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tget title(): string {\n\t\tif (this._terminalInstances.length === 0) {\n\t\t\t// Normally consumers should not call into title at all after the group is disposed but\n\t\t\t// this is required when the group is used as part of a tree.\n\t\t\treturn \"\";\n\t\t}\n\t\tlet title =\n\t\t\tthis.terminalInstances[0].title +\n\t\t\tthis._getBellTitle(this.terminalInstances[0]);\n\t\tif (this.terminalInstances[0].description) {\n\t\t\ttitle += ` (${this.terminalInstances[0].description})`;\n\t\t}\n\t\tfor (let i = 1; i < this.terminalInstances.length; i++) {\n\t\t\tconst instance = this.terminalInstances[i];\n\t\t\tif (instance.title) {\n\t\t\t\ttitle += `, ${instance.title + this._getBellTitle(instance)}`;\n\t\t\t\tif (instance.description) {\n\t\t\t\t\ttitle += ` (${instance.description})`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn title;\n\t}\n\n\tprivate _getBellTitle(instance: ITerminalInstance) {\n\t\tif (\n\t\t\tthis._terminalConfigurationService.config.enableBell &&\n\t\t\tinstance.statusList.statuses.some(\n\t\t\t\t(e) => e.id === TerminalStatus.Bell,\n\t\t\t)\n\t\t) {\n\t\t\treturn \"*\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tthis._visible = visible;\n\t\tif (this._groupElement) {\n\t\t\tthis._groupElement.style.display = visible ? \"\" : \"none\";\n\t\t}\n\t\tthis.terminalInstances.forEach((i) => i.setVisible(visible));\n\t}\n\n\tsplit(shellLaunchConfig: IShellLaunchConfig): ITerminalInstance {\n\t\tconst instance = this._terminalInstanceService.createInstance(\n\t\t\tshellLaunchConfig,\n\t\t\tTerminalLocation.Panel,\n\t\t);\n\t\tthis.addInstance(instance, shellLaunchConfig.parentTerminalId);\n\t\tthis._setActiveInstance(instance);\n\t\treturn instance;\n\t}\n\n\taddDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tif (this._splitPaneContainer) {\n\t\t\t// Check if the panel position changed and rotate panes if so\n\t\t\tconst newPanelPosition = this._layoutService.getPanelPosition();\n\t\t\tconst newTerminalLocation =\n\t\t\t\tthis._viewDescriptorService.getViewLocationById(\n\t\t\t\t\tTERMINAL_VIEW_ID,\n\t\t\t\t)!;\n\t\t\tconst terminalPositionChanged =\n\t\t\t\tnewPanelPosition !== this._panelPosition ||\n\t\t\t\tnewTerminalLocation !== this._terminalLocation;\n\t\t\tif (terminalPositionChanged) {\n\t\t\t\tconst newOrientation =\n\t\t\t\t\tnewTerminalLocation === ViewContainerLocation.Panel &&\n\t\t\t\t\tisHorizontal(newPanelPosition)\n\t\t\t\t\t\t? Orientation.HORIZONTAL\n\t\t\t\t\t\t: Orientation.VERTICAL;\n\t\t\t\tthis._splitPaneContainer.setOrientation(newOrientation);\n\t\t\t\tthis._panelPosition = newPanelPosition;\n\t\t\t\tthis._terminalLocation = newTerminalLocation;\n\t\t\t\tthis._onPanelOrientationChanged.fire(\n\t\t\t\t\tthis._splitPaneContainer.orientation,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._splitPaneContainer.layout(width, height);\n\t\t\tif (this._initialRelativeSizes && this._visible) {\n\t\t\t\tthis.resizePanes(this._initialRelativeSizes);\n\t\t\t\tthis._initialRelativeSizes = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tfocusPreviousPane(): void {\n\t\tconst newIndex =\n\t\t\tthis._activeInstanceIndex === 0\n\t\t\t\t? this._terminalInstances.length - 1\n\t\t\t\t: this._activeInstanceIndex - 1;\n\t\tthis.setActiveInstanceByIndex(newIndex);\n\t}\n\n\tfocusNextPane(): void {\n\t\tconst newIndex =\n\t\t\tthis._activeInstanceIndex === this._terminalInstances.length - 1\n\t\t\t\t? 0\n\t\t\t\t: this._activeInstanceIndex + 1;\n\t\tthis.setActiveInstanceByIndex(newIndex);\n\t}\n\n\tprivate _getPosition(): Position {\n\t\tswitch (this._terminalLocation) {\n\t\t\tcase ViewContainerLocation.Panel:\n\t\t\t\treturn this._panelPosition;\n\t\t\tcase ViewContainerLocation.Sidebar:\n\t\t\t\treturn this._layoutService.getSideBarPosition();\n\t\t\tcase ViewContainerLocation.AuxiliaryBar:\n\t\t\t\treturn this._layoutService.getSideBarPosition() ===\n\t\t\t\t\tPosition.LEFT\n\t\t\t\t\t? Position.RIGHT\n\t\t\t\t\t: Position.LEFT;\n\t\t}\n\t}\n\n\tprivate _getOrientation(): Orientation {\n\t\treturn isHorizontal(this._getPosition())\n\t\t\t? Orientation.HORIZONTAL\n\t\t\t: Orientation.VERTICAL;\n\t}\n\n\tresizePane(direction: Direction): void {\n\t\tif (!this._splitPaneContainer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isHorizontalResize =\n\t\t\tdirection === Direction.Left || direction === Direction.Right;\n\n\t\tconst groupOrientation = this._getOrientation();\n\n\t\tconst shouldResizePart =\n\t\t\t(isHorizontalResize && groupOrientation === Orientation.VERTICAL) ||\n\t\t\t(!isHorizontalResize &&\n\t\t\t\tgroupOrientation === Orientation.HORIZONTAL);\n\n\t\tconst font = this._terminalConfigurationService.getFont(\n\t\t\tgetWindow(this._groupElement),\n\t\t);\n\t\t// TODO: Support letter spacing and line height\n\t\tconst charSize = isHorizontalResize ? font.charWidth : font.charHeight;\n\n\t\tif (charSize) {\n\t\t\tlet resizeAmount = charSize * Constants.ResizePartCellCount;\n\n\t\t\tif (shouldResizePart) {\n\t\t\t\tconst position = this._getPosition();\n\t\t\t\tconst shouldShrink =\n\t\t\t\t\t(position === Position.LEFT &&\n\t\t\t\t\t\tdirection === Direction.Left) ||\n\t\t\t\t\t(position === Position.RIGHT &&\n\t\t\t\t\t\tdirection === Direction.Right) ||\n\t\t\t\t\t(position === Position.BOTTOM &&\n\t\t\t\t\t\tdirection === Direction.Down) ||\n\t\t\t\t\t(position === Position.TOP && direction === Direction.Up);\n\n\t\t\t\tif (shouldShrink) {\n\t\t\t\t\tresizeAmount *= -1;\n\t\t\t\t}\n\n\t\t\t\tthis._layoutService.resizePart(\n\t\t\t\t\tgetPartByLocation(this._terminalLocation),\n\t\t\t\t\tresizeAmount,\n\t\t\t\t\tresizeAmount,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._splitPaneContainer.resizePane(\n\t\t\t\t\tthis._activeInstanceIndex,\n\t\t\t\t\tdirection,\n\t\t\t\t\tresizeAmount,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tresizePanes(relativeSizes: number[]): void {\n\t\tif (!this._splitPaneContainer) {\n\t\t\tthis._initialRelativeSizes = relativeSizes;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._splitPaneContainer.resizePanes(relativeSizes);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants", "instance"]
}
