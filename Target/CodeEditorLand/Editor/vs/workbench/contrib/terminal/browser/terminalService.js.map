{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { DeferredPromise, timeout } from \"../../../../base/common/async.js\";\nimport { debounce, memoize } from \"../../../../base/common/decorators.js\";\nimport {\n\tDynamicListEventMultiplexer,\n\tEmitter,\n\tEvent,\n\ttype IDynamicListEventMultiplexer,\n} from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { mark } from \"../../../../base/common/performance.js\";\nimport { isMacintosh, isWeb } from \"../../../../base/common/platform.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport type { IKeyMods } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport type {\n\tITerminalCapabilityImplMap,\n\tTerminalCapability,\n} from \"../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport { TerminalCapabilityStore } from \"../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js\";\nimport {\n\ttype ICreateContributedTerminalProfileOptions,\n\ttype IExtensionTerminalProfile,\n\ttype IPtyHostAttachTarget,\n\ttype IRawTerminalInstanceLayoutInfo,\n\ttype IRawTerminalTabLayoutInfo,\n\ttype IShellLaunchConfig,\n\ttype ITerminalBackend,\n\ttype ITerminalLaunchError,\n\tITerminalLogService,\n\ttype ITerminalsLayoutInfo,\n\ttype ITerminalsLayoutInfoById,\n\tTerminalExitReason,\n\tTerminalLocation,\n\tTerminalLocationString,\n\tTitleEventSource,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { formatMessageForTerminal } from \"../../../../platform/terminal/common/terminalStrings.js\";\nimport { iconForeground } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { getIconRegistry } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport { ColorScheme } from \"../../../../platform/theme/common/theme.js\";\nimport {\n\tIThemeService,\n\tThemable,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { VirtualWorkspaceContext } from \"../../../common/contextkeys.js\";\nimport type { GroupIdentifier } from \"../../../common/editor.js\";\nimport type { IEditableData } from \"../../../common/views.js\";\nimport { columnToEditorGroup } from \"../../../services/editor/common/editorGroupColumn.js\";\nimport { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport {\n\ttype ACTIVE_GROUP_TYPE,\n\tAUX_WINDOW_GROUP,\n\ttype AUX_WINDOW_GROUP_TYPE,\n\tIEditorService,\n\tSIDE_GROUP,\n\ttype SIDE_GROUP_TYPE,\n} from \"../../../services/editor/common/editorService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport {\n\tILifecycleService,\n\tShutdownReason,\n\tStartupKind,\n\ttype WillShutdownEvent,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\nimport { ITimerService } from \"../../../services/timer/browser/timerService.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport {\n\ttype IRemoteTerminalAttachTarget,\n\ttype IStartExtensionTerminalRequest,\n\ttype ITerminalProcessExtHostProxy,\n\tITerminalProfileService,\n\tTERMINAL_VIEW_ID,\n} from \"../common/terminal.js\";\nimport { TerminalContextKeys } from \"../common/terminalContextKey.js\";\nimport { DetachedTerminal } from \"./detachedTerminal.js\";\nimport {\n\ttype ICreateTerminalOptions,\n\ttype IDetachedTerminalInstance,\n\ttype IDetachedXTermOptions,\n\ttype IRequestAddInstanceToGroupEvent,\n\tITerminalConfigurationService,\n\tITerminalEditorService,\n\ttype ITerminalGroup,\n\tITerminalGroupService,\n\ttype ITerminalInstance,\n\ttype ITerminalInstanceHost,\n\tITerminalInstanceService,\n\ttype ITerminalLocationOptions,\n\tITerminalService,\n\ttype ITerminalServiceNativeDelegate,\n\tTerminalConnectionState,\n\ttype TerminalEditorLocation,\n} from \"./terminal.js\";\nimport { getCwdForSplit } from \"./terminalActions.js\";\nimport { TerminalEditorInput } from \"./terminalEditorInput.js\";\nimport { createInstanceCapabilityEventMultiplexer } from \"./terminalEvents.js\";\nimport { getColorStyleContent, getUriClasses } from \"./terminalIcon.js\";\nimport { TerminalInstance } from \"./terminalInstance.js\";\nimport { TerminalProfileQuickpick } from \"./terminalProfileQuickpick.js\";\nimport {\n\tgetInstanceFromResource,\n\tgetTerminalUri,\n\tparseTerminalUri,\n} from \"./terminalUri.js\";\nimport type { TerminalViewPane } from \"./terminalView.js\";\nimport { XtermTerminal } from \"./xterm/xtermTerminal.js\";\n\nexport class TerminalService extends Disposable implements ITerminalService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _hostActiveTerminals: Map<\n\t\tITerminalInstanceHost,\n\t\tITerminalInstance | undefined\n\t> = new Map();\n\n\tprivate _detachedXterms = new Set<IDetachedTerminalInstance>();\n\tprivate _terminalEditorActive: IContextKey<boolean>;\n\tprivate readonly _terminalShellTypeContextKey: IContextKey<string>;\n\n\tprivate _isShuttingDown = false;\n\tprivate _backgroundedTerminalInstances: ITerminalInstance[] = [];\n\tprivate _backgroundedTerminalDisposables: Map<number, IDisposable[]> =\n\t\tnew Map();\n\tprivate _processSupportContextKey: IContextKey<boolean>;\n\n\tprivate _primaryBackend?: ITerminalBackend;\n\tprivate _terminalHasBeenCreated: IContextKey<boolean>;\n\tprivate _terminalCountContextKey: IContextKey<number>;\n\tprivate _nativeDelegate?: ITerminalServiceNativeDelegate;\n\tprivate _shutdownWindowCount?: number;\n\n\tprivate _editable:\n\t\t| { instance: ITerminalInstance; data: IEditableData }\n\t\t| undefined;\n\n\tget isProcessSupportRegistered(): boolean {\n\t\treturn !!this._processSupportContextKey.get();\n\t}\n\n\tprivate _connectionState: TerminalConnectionState =\n\t\tTerminalConnectionState.Connecting;\n\tget connectionState(): TerminalConnectionState {\n\t\treturn this._connectionState;\n\t}\n\n\tprivate readonly _whenConnected = new DeferredPromise<void>();\n\tget whenConnected(): Promise<void> {\n\t\treturn this._whenConnected.p;\n\t}\n\n\tprivate _restoredGroupCount = 0;\n\tget restoredGroupCount(): number {\n\t\treturn this._restoredGroupCount;\n\t}\n\n\tget instances(): ITerminalInstance[] {\n\t\treturn this._terminalGroupService.instances\n\t\t\t.concat(this._terminalEditorService.instances)\n\t\t\t.concat(this._backgroundedTerminalInstances);\n\t}\n\tget detachedInstances(): Iterable<IDetachedTerminalInstance> {\n\t\treturn this._detachedXterms;\n\t}\n\n\tprivate _reconnectedTerminalGroups: Promise<ITerminalGroup[]> | undefined;\n\n\tprivate _reconnectedTerminals: Map<string, ITerminalInstance[]> = new Map();\n\tgetReconnectedTerminals(\n\t\treconnectionOwner: string,\n\t): ITerminalInstance[] | undefined {\n\t\treturn this._reconnectedTerminals.get(reconnectionOwner);\n\t}\n\n\tget defaultLocation(): TerminalLocation {\n\t\treturn this._terminalConfigurationService.config.defaultLocation ===\n\t\t\tTerminalLocationString.Editor\n\t\t\t? TerminalLocation.Editor\n\t\t\t: TerminalLocation.Panel;\n\t}\n\n\tprivate _activeInstance: ITerminalInstance | undefined;\n\tget activeInstance(): ITerminalInstance | undefined {\n\t\t// Check if either an editor or panel terminal has focus and return that, regardless of the\n\t\t// value of _activeInstance. This avoids terminals created in the panel for example stealing\n\t\t// the active status even when it's not focused.\n\t\tfor (const activeHostTerminal of this._hostActiveTerminals.values()) {\n\t\t\tif (activeHostTerminal?.hasFocus) {\n\t\t\t\treturn activeHostTerminal;\n\t\t\t}\n\t\t}\n\t\t// Fallback to the last recorded active terminal if neither have focus\n\t\treturn this._activeInstance;\n\t}\n\n\tprivate _editingTerminal: ITerminalInstance | undefined;\n\n\tprivate readonly _onDidCreateInstance = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\tget onDidCreateInstance(): Event<ITerminalInstance> {\n\t\treturn this._onDidCreateInstance.event;\n\t}\n\tprivate readonly _onDidChangeInstanceDimensions = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\tget onDidChangeInstanceDimensions(): Event<ITerminalInstance> {\n\t\treturn this._onDidChangeInstanceDimensions.event;\n\t}\n\tprivate readonly _onDidRegisterProcessSupport = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tget onDidRegisterProcessSupport(): Event<void> {\n\t\treturn this._onDidRegisterProcessSupport.event;\n\t}\n\tprivate readonly _onDidChangeConnectionState = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tget onDidChangeConnectionState(): Event<void> {\n\t\treturn this._onDidChangeConnectionState.event;\n\t}\n\tprivate readonly _onDidRequestStartExtensionTerminal = this._register(\n\t\tnew Emitter<IStartExtensionTerminalRequest>(),\n\t);\n\tget onDidRequestStartExtensionTerminal(): Event<IStartExtensionTerminalRequest> {\n\t\treturn this._onDidRequestStartExtensionTerminal.event;\n\t}\n\n\t// ITerminalInstanceHost events\n\tprivate readonly _onDidDisposeInstance = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\tget onDidDisposeInstance(): Event<ITerminalInstance> {\n\t\treturn this._onDidDisposeInstance.event;\n\t}\n\tprivate readonly _onDidFocusInstance = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\tget onDidFocusInstance(): Event<ITerminalInstance> {\n\t\treturn this._onDidFocusInstance.event;\n\t}\n\tprivate readonly _onDidChangeActiveInstance = this._register(\n\t\tnew Emitter<ITerminalInstance | undefined>(),\n\t);\n\tget onDidChangeActiveInstance(): Event<ITerminalInstance | undefined> {\n\t\treturn this._onDidChangeActiveInstance.event;\n\t}\n\tprivate readonly _onDidChangeInstances = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tget onDidChangeInstances(): Event<void> {\n\t\treturn this._onDidChangeInstances.event;\n\t}\n\tprivate readonly _onDidChangeInstanceCapability = this._register(\n\t\tnew Emitter<ITerminalInstance>(),\n\t);\n\tget onDidChangeInstanceCapability(): Event<ITerminalInstance> {\n\t\treturn this._onDidChangeInstanceCapability.event;\n\t}\n\n\t// Terminal view events\n\tprivate readonly _onDidChangeActiveGroup = this._register(\n\t\tnew Emitter<ITerminalGroup | undefined>(),\n\t);\n\tget onDidChangeActiveGroup(): Event<ITerminalGroup | undefined> {\n\t\treturn this._onDidChangeActiveGroup.event;\n\t}\n\n\t// Lazily initialized events that fire when the specified event fires on _any_ terminal\n\t// TODO: Batch events\n\t@memoize get onAnyInstanceData() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((instance) =>\n\t\t\t\tEvent.map(instance.onData, (data) => ({ instance, data })),\n\t\t\t),\n\t\t).event;\n\t}\n\t@memoize get onAnyInstanceDataInput() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((e) =>\n\t\t\t\tEvent.map(e.onDidInputData, () => e, e.store),\n\t\t\t),\n\t\t).event;\n\t}\n\t@memoize get onAnyInstanceIconChange() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((e) => e.onIconChanged),\n\t\t).event;\n\t}\n\t@memoize get onAnyInstanceMaximumDimensionsChange() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((e) =>\n\t\t\t\tEvent.map(e.onMaximumDimensionsChanged, () => e, e.store),\n\t\t\t),\n\t\t).event;\n\t}\n\t@memoize get onAnyInstancePrimaryStatusChange() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((e) =>\n\t\t\t\tEvent.map(\n\t\t\t\t\te.statusList.onDidChangePrimaryStatus,\n\t\t\t\t\t() => e,\n\t\t\t\t\te.store,\n\t\t\t\t),\n\t\t\t),\n\t\t).event;\n\t}\n\t@memoize get onAnyInstanceProcessIdReady() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((e) => e.onProcessIdReady),\n\t\t).event;\n\t}\n\t@memoize get onAnyInstanceSelectionChange() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((e) => e.onDidChangeSelection),\n\t\t).event;\n\t}\n\t@memoize get onAnyInstanceTitleChange() {\n\t\treturn this._register(\n\t\t\tthis.createOnInstanceEvent((e) => e.onTitleChanged),\n\t\t).event;\n\t}\n\n\tconstructor(\n\t\t@IContextKeyService private _contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IInstantiationService private _instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService private _remoteAgentService: IRemoteAgentService,\n\t\t@IViewsService private _viewsService: IViewsService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigService: ITerminalConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@ITerminalEditorService private readonly _terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@ITimerService private readonly _timerService: ITimerService\n\t) {\n\t\tsuper();\n\n\t\t// the below avoids having to poll routinely.\n\t\t// we update detected profiles when an instance is created so that,\n\t\t// for example, we detect if you've installed a pwsh\n\t\tthis._register(this.onDidCreateInstance(() => this._terminalProfileService.refreshAvailableProfiles()));\n\t\tthis._forwardInstanceHostEvents(this._terminalGroupService);\n\t\tthis._forwardInstanceHostEvents(this._terminalEditorService);\n\t\tthis._register(this._terminalGroupService.onDidChangeActiveGroup(this._onDidChangeActiveGroup.fire, this._onDidChangeActiveGroup));\n\t\tthis._register(this._terminalInstanceService.onDidCreateInstance(instance => {\n\t\t\tthis._initInstanceListeners(instance);\n\t\t\tthis._onDidCreateInstance.fire(instance);\n\t\t}));\n\n\t\t// Hide the panel if there are no more instances, provided that VS Code is not shutting\n\t\t// down. When shutting down the panel is locked in place so that it is restored upon next\n\t\t// launch.\n\t\tthis._register(this._terminalGroupService.onDidChangeActiveInstance(instance => {\n\t\t\tif (!instance && !this._isShuttingDown) {\n\t\t\t\tthis._terminalGroupService.hidePanel();\n\t\t\t}\n\t\t\tif (instance?.shellType) {\n\t\t\t\tthis._terminalShellTypeContextKey.set(instance.shellType.toString());\n\t\t\t} else if (!instance || !(instance.shellType)) {\n\t\t\t\tthis._terminalShellTypeContextKey.reset();\n\t\t\t}\n\t\t}));\n\n\t\tthis._handleInstanceContextKeys();\n\t\tthis._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);\n\t\tthis._processSupportContextKey = TerminalContextKeys.processSupported.bindTo(this._contextKeyService);\n\t\tthis._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null);\n\t\tthis._terminalHasBeenCreated = TerminalContextKeys.terminalHasBeenCreated.bindTo(this._contextKeyService);\n\t\tthis._terminalCountContextKey = TerminalContextKeys.count.bindTo(this._contextKeyService);\n\t\tthis._terminalEditorActive = TerminalContextKeys.terminalEditorActive.bindTo(this._contextKeyService);\n\n\t\tthis._register(this.onDidChangeActiveInstance(instance => {\n\t\t\tthis._terminalEditorActive.set(!!instance?.target && instance.target === TerminalLocation.Editor);\n\t\t}));\n\n\t\tthis._register(_lifecycleService.onBeforeShutdown(async e => e.veto(this._onBeforeShutdown(e.reason), 'veto.terminal')));\n\t\tthis._register(_lifecycleService.onWillShutdown(e => this._onWillShutdown(e)));\n\n\t\tthis._initializePrimaryBackend();\n\n\t\t// Create async as the class depends on `this`\n\t\ttimeout(0).then(() => this._register(this._instantiationService.createInstance(TerminalEditorStyle, mainWindow.document.head)));\n\t}\n\n\tasync showProfileQuickPick(\n\t\ttype: \"setDefault\" | \"createInstance\",\n\t\tcwd?: string | URI,\n\t): Promise<ITerminalInstance | undefined> {\n\t\tconst quickPick = this._instantiationService.createInstance(\n\t\t\tTerminalProfileQuickpick,\n\t\t);\n\t\tconst result = await quickPick.showAndGetResult(type);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof result === \"string\") {\n\t\t\treturn;\n\t\t}\n\t\tconst keyMods: IKeyMods | undefined = result.keyMods;\n\t\tif (type === \"createInstance\") {\n\t\t\tconst activeInstance = this.getDefaultInstanceHost().activeInstance;\n\t\t\tlet instance;\n\n\t\t\tif (result.config && \"id\" in result?.config) {\n\t\t\t\tawait this.createContributedTerminalProfile(\n\t\t\t\t\tresult.config.extensionIdentifier,\n\t\t\t\t\tresult.config.id,\n\t\t\t\t\t{\n\t\t\t\t\t\ticon: result.config.options?.icon,\n\t\t\t\t\t\tcolor: result.config.options?.color,\n\t\t\t\t\t\tlocation: !!(keyMods?.alt && activeInstance)\n\t\t\t\t\t\t\t? { splitActiveTerminal: true }\n\t\t\t\t\t\t\t: this.defaultLocation,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t} else if (result.config && \"profileName\" in result.config) {\n\t\t\t\tif (keyMods?.alt && activeInstance) {\n\t\t\t\t\t// create split, only valid if there's an active instance\n\t\t\t\t\tinstance = await this.createTerminal({\n\t\t\t\t\t\tlocation: { parentTerminal: activeInstance },\n\t\t\t\t\t\tconfig: result.config,\n\t\t\t\t\t\tcwd,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tinstance = await this.createTerminal({\n\t\t\t\t\t\tlocation: this.defaultLocation,\n\t\t\t\t\t\tconfig: result.config,\n\t\t\t\t\t\tcwd,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (instance && this.defaultLocation !== TerminalLocation.Editor) {\n\t\t\t\tthis._terminalGroupService.showPanel(true);\n\t\t\t\tthis.setActiveInstance(instance);\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _initializePrimaryBackend() {\n\t\tmark(\"code/terminal/willGetTerminalBackend\");\n\t\tthis._primaryBackend = await this._terminalInstanceService.getBackend(\n\t\t\tthis._environmentService.remoteAuthority,\n\t\t);\n\t\tmark(\"code/terminal/didGetTerminalBackend\");\n\t\tconst enableTerminalReconnection =\n\t\t\tthis._terminalConfigurationService.config.enablePersistentSessions;\n\n\t\t// Connect to the extension host if it's there, set the connection state to connected when\n\t\t// it's done. This should happen even when there is no extension host.\n\t\tthis._connectionState = TerminalConnectionState.Connecting;\n\n\t\tconst isPersistentRemote =\n\t\t\t!!this._environmentService.remoteAuthority &&\n\t\t\tenableTerminalReconnection;\n\n\t\tif (this._primaryBackend) {\n\t\t\tthis._register(\n\t\t\t\tthis._primaryBackend.onDidRequestDetach(async (e) => {\n\t\t\t\t\tconst instanceToDetach = this.getInstanceFromResource(\n\t\t\t\t\t\tgetTerminalUri(e.workspaceId, e.instanceId),\n\t\t\t\t\t);\n\t\t\t\t\tif (instanceToDetach) {\n\t\t\t\t\t\tconst persistentProcessId =\n\t\t\t\t\t\t\tinstanceToDetach?.persistentProcessId;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpersistentProcessId &&\n\t\t\t\t\t\t\t!instanceToDetach.shellLaunchConfig\n\t\t\t\t\t\t\t\t.isFeatureTerminal &&\n\t\t\t\t\t\t\t!instanceToDetach.shellLaunchConfig\n\t\t\t\t\t\t\t\t.customPtyImplementation\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tinstanceToDetach.target ===\n\t\t\t\t\t\t\t\tTerminalLocation.Editor\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis._terminalEditorService.detachInstance(\n\t\t\t\t\t\t\t\t\tinstanceToDetach,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._terminalGroupService\n\t\t\t\t\t\t\t\t\t.getGroupForInstance(instanceToDetach)\n\t\t\t\t\t\t\t\t\t?.removeInstance(instanceToDetach);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait instanceToDetach.detachProcessAndDispose(\n\t\t\t\t\t\t\t\tTerminalExitReason.User,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tawait this._primaryBackend?.acceptDetachInstanceReply(\n\t\t\t\t\t\t\t\te.requestId,\n\t\t\t\t\t\t\t\tpersistentProcessId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// will get rejected without a persistentProcessId to attach to\n\t\t\t\t\t\t\tawait this._primaryBackend?.acceptDetachInstanceReply(\n\t\t\t\t\t\t\t\te.requestId,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tmark(\"code/terminal/willReconnect\");\n\t\tlet reconnectedPromise: Promise<any>;\n\t\tif (isPersistentRemote) {\n\t\t\treconnectedPromise = this._reconnectToRemoteTerminals();\n\t\t} else if (enableTerminalReconnection) {\n\t\t\treconnectedPromise = this._reconnectToLocalTerminals();\n\t\t} else {\n\t\t\treconnectedPromise = Promise.resolve();\n\t\t}\n\t\treconnectedPromise.then(async () => {\n\t\t\tthis._setConnected();\n\t\t\tmark(\"code/terminal/didReconnect\");\n\t\t\tmark(\"code/terminal/willReplay\");\n\t\t\tconst instances =\n\t\t\t\t(await this._reconnectedTerminalGroups?.then((groups) =>\n\t\t\t\t\tgroups.flatMap((e) => e.terminalInstances),\n\t\t\t\t)) ?? [];\n\t\t\tawait Promise.all(\n\t\t\t\tinstances.map(\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\tnew Promise<void>((r) =>\n\t\t\t\t\t\t\tEvent.once(e.onProcessReplayComplete)(r),\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tmark(\"code/terminal/didReplay\");\n\t\t\tmark(\"code/terminal/willGetPerformanceMarks\");\n\t\t\tawait Promise.all(\n\t\t\t\tArray.from(\n\t\t\t\t\tthis._terminalInstanceService.getRegisteredBackends(),\n\t\t\t\t).map(async (backend) => {\n\t\t\t\t\tthis._timerService.setPerformanceMarks(\n\t\t\t\t\t\tbackend.remoteAuthority === undefined\n\t\t\t\t\t\t\t? \"localPtyHost\"\n\t\t\t\t\t\t\t: \"remotePtyHost\",\n\t\t\t\t\t\tawait backend.getPerformanceMarks(),\n\t\t\t\t\t);\n\t\t\t\t\tbackend.setReady();\n\t\t\t\t}),\n\t\t\t);\n\t\t\tmark(\"code/terminal/didGetPerformanceMarks\");\n\t\t\tthis._whenConnected.complete();\n\t\t});\n\t}\n\n\tgetPrimaryBackend(): ITerminalBackend | undefined {\n\t\treturn this._primaryBackend;\n\t}\n\n\tprivate _forwardInstanceHostEvents(host: ITerminalInstanceHost) {\n\t\tthis._register(\n\t\t\thost.onDidChangeInstances(\n\t\t\t\tthis._onDidChangeInstances.fire,\n\t\t\t\tthis._onDidChangeInstances,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\thost.onDidDisposeInstance(\n\t\t\t\tthis._onDidDisposeInstance.fire,\n\t\t\t\tthis._onDidDisposeInstance,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\thost.onDidChangeActiveInstance((instance) =>\n\t\t\t\tthis._evaluateActiveInstance(host, instance),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\thost.onDidFocusInstance((instance) => {\n\t\t\t\tthis._onDidFocusInstance.fire(instance);\n\t\t\t\tthis._evaluateActiveInstance(host, instance);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\thost.onDidChangeInstanceCapability((instance) => {\n\t\t\t\tthis._onDidChangeInstanceCapability.fire(instance);\n\t\t\t}),\n\t\t);\n\t\tthis._hostActiveTerminals.set(host, undefined);\n\t}\n\n\tprivate _evaluateActiveInstance(\n\t\thost: ITerminalInstanceHost,\n\t\tinstance: ITerminalInstance | undefined,\n\t) {\n\t\t// Track the latest active terminal for each host so that when one becomes undefined, the\n\t\t// TerminalService's active terminal is set to the last active terminal from the other host.\n\t\t// This means if the last terminal editor is closed such that it becomes undefined, the last\n\t\t// active group's terminal will be used as the active terminal if available.\n\t\tthis._hostActiveTerminals.set(host, instance);\n\t\tif (instance === undefined) {\n\t\t\tfor (const active of this._hostActiveTerminals.values()) {\n\t\t\t\tif (active) {\n\t\t\t\t\tinstance = active;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._activeInstance = instance;\n\t\tthis._onDidChangeActiveInstance.fire(instance);\n\t}\n\n\tsetActiveInstance(value: ITerminalInstance) {\n\t\t// If this was a hideFromUser terminal created by the API this was triggered by show,\n\t\t// in which case we need to create the terminal group\n\t\tif (value.shellLaunchConfig.hideFromUser) {\n\t\t\tthis._showBackgroundTerminal(value);\n\t\t}\n\t\tif (value.target === TerminalLocation.Editor) {\n\t\t\tthis._terminalEditorService.setActiveInstance(value);\n\t\t} else {\n\t\t\tthis._terminalGroupService.setActiveInstance(value);\n\t\t}\n\t}\n\n\tasync focusInstance(instance: ITerminalInstance): Promise<void> {\n\t\tif (instance.target === TerminalLocation.Editor) {\n\t\t\treturn this._terminalEditorService.focusInstance(instance);\n\t\t}\n\t\treturn this._terminalGroupService.focusInstance(instance);\n\t}\n\n\tasync focusActiveInstance(): Promise<void> {\n\t\tif (!this._activeInstance) {\n\t\t\treturn;\n\t\t}\n\t\treturn this.focusInstance(this._activeInstance);\n\t}\n\n\tasync createContributedTerminalProfile(\n\t\textensionIdentifier: string,\n\t\tid: string,\n\t\toptions: ICreateContributedTerminalProfileOptions,\n\t): Promise<void> {\n\t\tawait this._extensionService.activateByEvent(`onTerminalProfile:${id}`);\n\n\t\tconst profileProvider =\n\t\t\tthis._terminalProfileService.getContributedProfileProvider(\n\t\t\t\textensionIdentifier,\n\t\t\t\tid,\n\t\t\t);\n\t\tif (!profileProvider) {\n\t\t\tthis._notificationService.error(\n\t\t\t\t`No terminal profile provider registered for id \"${id}\"`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait profileProvider.createContributedTerminalProfile(options);\n\t\t\tthis._terminalGroupService.setActiveInstanceByIndex(\n\t\t\t\tthis._terminalGroupService.instances.length - 1,\n\t\t\t);\n\t\t\tawait this._terminalGroupService.activeInstance?.focusWhenReady();\n\t\t} catch (e) {\n\t\t\tthis._notificationService.error(e.message);\n\t\t}\n\t}\n\n\tasync safeDisposeTerminal(instance: ITerminalInstance): Promise<void> {\n\t\t// Confirm on kill in the editor is handled by the editor input\n\t\tif (\n\t\t\tinstance.target !== TerminalLocation.Editor &&\n\t\t\tinstance.hasChildProcesses &&\n\t\t\t(this._terminalConfigurationService.config.confirmOnKill ===\n\t\t\t\t\"panel\" ||\n\t\t\t\tthis._terminalConfigurationService.config.confirmOnKill ===\n\t\t\t\t\t\"always\")\n\t\t) {\n\t\t\tconst veto = await this._showTerminalCloseConfirmation(true);\n\t\t\tif (veto) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\treturn new Promise<void>((r) => {\n\t\t\tEvent.once(instance.onExit)(() => r());\n\t\t\tinstance.dispose(TerminalExitReason.User);\n\t\t});\n\t}\n\n\tprivate _setConnected() {\n\t\tthis._connectionState = TerminalConnectionState.Connected;\n\t\tthis._onDidChangeConnectionState.fire();\n\t\tthis._logService.trace(\"Pty host ready\");\n\t}\n\n\tprivate async _reconnectToRemoteTerminals(): Promise<void> {\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tif (!remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\t\tconst backend =\n\t\t\tawait this._terminalInstanceService.getBackend(remoteAuthority);\n\t\tif (!backend) {\n\t\t\treturn;\n\t\t}\n\t\tmark(\"code/terminal/willGetTerminalLayoutInfo\");\n\t\tconst layoutInfo = await backend.getTerminalLayoutInfo();\n\t\tmark(\"code/terminal/didGetTerminalLayoutInfo\");\n\t\tbackend.reduceConnectionGraceTime();\n\t\tmark(\"code/terminal/willRecreateTerminalGroups\");\n\t\tawait this._recreateTerminalGroups(layoutInfo);\n\t\tmark(\"code/terminal/didRecreateTerminalGroups\");\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update remote when terminals are changed\n\t\tthis._attachProcessLayoutListeners();\n\n\t\tthis._logService.trace(\"Reconnected to remote terminals\");\n\t}\n\n\tprivate async _reconnectToLocalTerminals(): Promise<void> {\n\t\tconst localBackend = await this._terminalInstanceService.getBackend();\n\t\tif (!localBackend) {\n\t\t\treturn;\n\t\t}\n\t\tmark(\"code/terminal/willGetTerminalLayoutInfo\");\n\t\tconst layoutInfo = await localBackend.getTerminalLayoutInfo();\n\t\tmark(\"code/terminal/didGetTerminalLayoutInfo\");\n\t\tif (layoutInfo && layoutInfo.tabs.length > 0) {\n\t\t\tmark(\"code/terminal/willRecreateTerminalGroups\");\n\t\t\tthis._reconnectedTerminalGroups =\n\t\t\t\tthis._recreateTerminalGroups(layoutInfo);\n\t\t\tmark(\"code/terminal/didRecreateTerminalGroups\");\n\t\t}\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update local state when terminals are changed\n\t\tthis._attachProcessLayoutListeners();\n\n\t\tthis._logService.trace(\"Reconnected to local terminals\");\n\t}\n\n\tprivate _recreateTerminalGroups(\n\t\tlayoutInfo?: ITerminalsLayoutInfo,\n\t): Promise<ITerminalGroup[]> {\n\t\tconst groupPromises: Promise<ITerminalGroup | undefined>[] = [];\n\t\tlet activeGroup: Promise<ITerminalGroup | undefined> | undefined;\n\t\tif (layoutInfo) {\n\t\t\tfor (const tabLayout of layoutInfo.tabs) {\n\t\t\t\tconst terminalLayouts = tabLayout.terminals.filter(\n\t\t\t\t\t(t) => t.terminal && t.terminal.isOrphan,\n\t\t\t\t);\n\t\t\t\tif (terminalLayouts.length) {\n\t\t\t\t\tthis._restoredGroupCount += terminalLayouts.length;\n\t\t\t\t\tconst promise = this._recreateTerminalGroup(\n\t\t\t\t\t\ttabLayout,\n\t\t\t\t\t\tterminalLayouts,\n\t\t\t\t\t);\n\t\t\t\t\tgroupPromises.push(promise);\n\t\t\t\t\tif (tabLayout.isActive) {\n\t\t\t\t\t\tactiveGroup = promise;\n\t\t\t\t\t}\n\t\t\t\t\tconst activeInstance = this.instances.find(\n\t\t\t\t\t\t(t) =>\n\t\t\t\t\t\t\tt.shellLaunchConfig.attachPersistentProcess?.id ===\n\t\t\t\t\t\t\ttabLayout.activePersistentProcessId,\n\t\t\t\t\t);\n\t\t\t\t\tif (activeInstance) {\n\t\t\t\t\t\tthis.setActiveInstance(activeInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (layoutInfo.tabs.length) {\n\t\t\t\tactiveGroup?.then(\n\t\t\t\t\t(group) => (this._terminalGroupService.activeGroup = group),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn Promise.all(groupPromises).then(\n\t\t\t(result) => result.filter((e) => !!e) as ITerminalGroup[],\n\t\t);\n\t}\n\n\tprivate async _recreateTerminalGroup(\n\t\ttabLayout: IRawTerminalTabLayoutInfo<IPtyHostAttachTarget | null>,\n\t\tterminalLayouts: IRawTerminalInstanceLayoutInfo<IPtyHostAttachTarget | null>[],\n\t): Promise<ITerminalGroup | undefined> {\n\t\tlet lastInstance: Promise<ITerminalInstance> | undefined;\n\t\tfor (const terminalLayout of terminalLayouts) {\n\t\t\tconst attachPersistentProcess = terminalLayout.terminal!;\n\t\t\tif (\n\t\t\t\tthis._lifecycleService.startupKind !==\n\t\t\t\t\tStartupKind.ReloadedWindow &&\n\t\t\t\tattachPersistentProcess.type === \"Task\"\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmark(\n\t\t\t\t`code/terminal/willRecreateTerminal/${attachPersistentProcess.id}-${attachPersistentProcess.pid}`,\n\t\t\t);\n\t\t\tlastInstance = this.createTerminal({\n\t\t\t\tconfig: { attachPersistentProcess },\n\t\t\t\tlocation: lastInstance\n\t\t\t\t\t? { parentTerminal: lastInstance }\n\t\t\t\t\t: TerminalLocation.Panel,\n\t\t\t});\n\t\t\tlastInstance.then(() =>\n\t\t\t\tmark(\n\t\t\t\t\t`code/terminal/didRecreateTerminal/${attachPersistentProcess.id}-${attachPersistentProcess.pid}`,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst group = lastInstance?.then((instance) => {\n\t\t\tconst g = this._terminalGroupService.getGroupForInstance(instance);\n\t\t\tg?.resizePanes(\n\t\t\t\ttabLayout.terminals.map((terminal) => terminal.relativeSize),\n\t\t\t);\n\t\t\treturn g;\n\t\t});\n\t\treturn group;\n\t}\n\n\tprivate _attachProcessLayoutListeners(): void {\n\t\tthis._register(this.onDidChangeActiveGroup(() => this._saveState()));\n\t\tthis._register(this.onDidChangeActiveInstance(() => this._saveState()));\n\t\tthis._register(this.onDidChangeInstances(() => this._saveState()));\n\t\t// The state must be updated when the terminal is relaunched, otherwise the persistent\n\t\t// terminal ID will be stale and the process will be leaked.\n\t\tthis._register(\n\t\t\tthis.onAnyInstanceProcessIdReady(() => this._saveState()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onAnyInstanceTitleChange((instance) =>\n\t\t\t\tthis._updateTitle(instance),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onAnyInstanceIconChange((e) =>\n\t\t\t\tthis._updateIcon(e.instance, e.userInitiated),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _handleInstanceContextKeys(): void {\n\t\tconst terminalIsOpenContext = TerminalContextKeys.isOpen.bindTo(\n\t\t\tthis._contextKeyService,\n\t\t);\n\t\tconst updateTerminalContextKeys = () => {\n\t\t\tterminalIsOpenContext.set(this.instances.length > 0);\n\t\t\tthis._terminalCountContextKey.set(this.instances.length);\n\t\t};\n\t\tthis._register(\n\t\t\tthis.onDidChangeInstances(() => updateTerminalContextKeys()),\n\t\t);\n\t}\n\n\tasync getActiveOrCreateInstance(options?: {\n\t\tacceptsInput?: boolean;\n\t}): Promise<ITerminalInstance> {\n\t\tconst activeInstance = this.activeInstance;\n\t\t// No instance, create\n\t\tif (!activeInstance) {\n\t\t\treturn this.createTerminal();\n\t\t}\n\t\t// Active instance, ensure accepts input\n\t\tif (\n\t\t\t!options?.acceptsInput ||\n\t\t\tactiveInstance.xterm?.isStdinDisabled !== true\n\t\t) {\n\t\t\treturn activeInstance;\n\t\t}\n\t\t// Active instance doesn't accept input, create and focus\n\t\tconst instance = await this.createTerminal();\n\t\tthis.setActiveInstance(instance);\n\t\tawait this.revealActiveTerminal();\n\t\treturn instance;\n\t}\n\n\tasync revealTerminal(\n\t\tsource: ITerminalInstance,\n\t\tpreserveFocus?: boolean,\n\t): Promise<void> {\n\t\tif (source.target === TerminalLocation.Editor) {\n\t\t\tawait this._terminalEditorService.revealActiveEditor(preserveFocus);\n\t\t} else {\n\t\t\tawait this._terminalGroupService.showPanel();\n\t\t}\n\t}\n\n\tasync revealActiveTerminal(preserveFocus?: boolean): Promise<void> {\n\t\tconst instance = this.activeInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.revealTerminal(instance, preserveFocus);\n\t}\n\n\tsetEditable(\n\t\tinstance: ITerminalInstance,\n\t\tdata?: IEditableData | null,\n\t): void {\n\t\tif (data) {\n\t\t\tthis._editable = { instance: instance, data };\n\t\t} else {\n\t\t\tthis._editable = undefined;\n\t\t}\n\t\tconst pane =\n\t\t\tthis._viewsService.getActiveViewWithId<TerminalViewPane>(\n\t\t\t\tTERMINAL_VIEW_ID,\n\t\t\t);\n\t\tconst isEditing = this.isEditable(instance);\n\t\tpane?.terminalTabbedView?.setEditable(isEditing);\n\t}\n\n\tisEditable(instance: ITerminalInstance | undefined): boolean {\n\t\treturn (\n\t\t\t!!this._editable &&\n\t\t\t(this._editable.instance === instance || !instance)\n\t\t);\n\t}\n\n\tgetEditableData(instance: ITerminalInstance): IEditableData | undefined {\n\t\treturn this._editable && this._editable.instance === instance\n\t\t\t? this._editable.data\n\t\t\t: undefined;\n\t}\n\n\trequestStartExtensionTerminal(\n\t\tproxy: ITerminalProcessExtHostProxy,\n\t\tcols: number,\n\t\trows: number,\n\t): Promise<ITerminalLaunchError | undefined> {\n\t\t// The initial request came from the extension host, no need to wait for it\n\t\treturn new Promise<ITerminalLaunchError | undefined>((callback) => {\n\t\t\tthis._onDidRequestStartExtensionTerminal.fire({\n\t\t\t\tproxy,\n\t\t\t\tcols,\n\t\t\t\trows,\n\t\t\t\tcallback,\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _onBeforeShutdown(\n\t\treason: ShutdownReason,\n\t): boolean | Promise<boolean> {\n\t\t// Never veto on web as this would block all windows from being closed. This disables\n\t\t// process revive as we can't handle it on shutdown.\n\t\tif (isWeb) {\n\t\t\tthis._isShuttingDown = true;\n\t\t\treturn false;\n\t\t}\n\t\treturn this._onBeforeShutdownAsync(reason);\n\t}\n\n\tprivate async _onBeforeShutdownAsync(\n\t\treason: ShutdownReason,\n\t): Promise<boolean> {\n\t\tif (this.instances.length === 0) {\n\t\t\t// No terminal instances, don't veto\n\t\t\treturn false;\n\t\t}\n\n\t\t// Persist terminal _buffer state_, note that even if this happens the dirty terminal prompt\n\t\t// still shows as that cannot be revived\n\t\ttry {\n\t\t\tthis._shutdownWindowCount =\n\t\t\t\tawait this._nativeDelegate?.getWindowCount();\n\t\t\tconst shouldReviveProcesses = this._shouldReviveProcesses(reason);\n\t\t\tif (shouldReviveProcesses) {\n\t\t\t\t// Attempt to persist the terminal state but only allow 2000ms as we can't block\n\t\t\t\t// shutdown. This can happen when in a remote workspace but the other side has been\n\t\t\t\t// suspended and is in the process of reconnecting, the message will be put in a\n\t\t\t\t// queue in this case for when the connection is back up and running. Aborting the\n\t\t\t\t// process is preferable in this case.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tthis._primaryBackend?.persistTerminalState(),\n\t\t\t\t\ttimeout(2000),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Persist terminal _processes_\n\t\t\tconst shouldPersistProcesses =\n\t\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t\t.enablePersistentSessions &&\n\t\t\t\treason === ShutdownReason.RELOAD;\n\t\t\tif (!shouldPersistProcesses) {\n\t\t\t\tconst hasDirtyInstances =\n\t\t\t\t\t(this._terminalConfigurationService.config.confirmOnExit ===\n\t\t\t\t\t\t\"always\" &&\n\t\t\t\t\t\tthis.instances.length > 0) ||\n\t\t\t\t\t(this._terminalConfigurationService.config.confirmOnExit ===\n\t\t\t\t\t\t\"hasChildProcesses\" &&\n\t\t\t\t\t\tthis.instances.some((e) => e.hasChildProcesses));\n\t\t\t\tif (hasDirtyInstances) {\n\t\t\t\t\treturn this._onBeforeShutdownConfirmation(reason);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: unknown) {\n\t\t\t// Swallow as exceptions should not cause a veto to prevent shutdown\n\t\t\tthis._logService.warn(\n\t\t\t\t\"Exception occurred during terminal shutdown\",\n\t\t\t\terr,\n\t\t\t);\n\t\t}\n\n\t\tthis._isShuttingDown = true;\n\n\t\treturn false;\n\t}\n\n\tsetNativeDelegate(nativeDelegate: ITerminalServiceNativeDelegate): void {\n\t\tthis._nativeDelegate = nativeDelegate;\n\t}\n\n\tprivate _shouldReviveProcesses(reason: ShutdownReason): boolean {\n\t\tif (\n\t\t\t!this._terminalConfigurationService.config.enablePersistentSessions\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (\n\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t.persistentSessionReviveProcess\n\t\t) {\n\t\t\tcase \"onExit\": {\n\t\t\t\t// Allow on close if it's the last window on Windows or Linux\n\t\t\t\tif (\n\t\t\t\t\treason === ShutdownReason.CLOSE &&\n\t\t\t\t\tthis._shutdownWindowCount === 1 &&\n\t\t\t\t\t!isMacintosh\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\treason === ShutdownReason.LOAD ||\n\t\t\t\t\treason === ShutdownReason.QUIT\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase \"onExitAndWindowClose\":\n\t\t\t\treturn reason !== ShutdownReason.RELOAD;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate async _onBeforeShutdownConfirmation(\n\t\treason: ShutdownReason,\n\t): Promise<boolean> {\n\t\t// veto if configured to show confirmation and the user chose not to exit\n\t\tconst veto = await this._showTerminalCloseConfirmation();\n\t\tif (!veto) {\n\t\t\tthis._isShuttingDown = true;\n\t\t}\n\n\t\treturn veto;\n\t}\n\n\tprivate _onWillShutdown(e: WillShutdownEvent): void {\n\t\t// Don't touch processes if the shutdown was a result of reload as they will be reattached\n\t\tconst shouldPersistTerminals =\n\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t.enablePersistentSessions && e.reason === ShutdownReason.RELOAD;\n\n\t\tfor (const instance of [\n\t\t\t...this._terminalGroupService.instances,\n\t\t\t...this._backgroundedTerminalInstances,\n\t\t]) {\n\t\t\tif (shouldPersistTerminals && instance.shouldPersist) {\n\t\t\t\tinstance.detachProcessAndDispose(TerminalExitReason.Shutdown);\n\t\t\t} else {\n\t\t\t\tinstance.dispose(TerminalExitReason.Shutdown);\n\t\t\t}\n\t\t}\n\n\t\t// Clear terminal layout info only when not persisting\n\t\tif (!shouldPersistTerminals && !this._shouldReviveProcesses(e.reason)) {\n\t\t\tthis._primaryBackend?.setTerminalLayoutInfo(undefined);\n\t\t}\n\t}\n\n\t@debounce(500)\n\tprivate _saveState(): void {\n\t\t// Avoid saving state when shutting down as that would override process state to be revived\n\t\tif (this._isShuttingDown) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\t!this._terminalConfigurationService.config.enablePersistentSessions\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst tabs = this._terminalGroupService.groups.map((g) =>\n\t\t\tg.getLayoutInfo(g === this._terminalGroupService.activeGroup),\n\t\t);\n\t\tconst state: ITerminalsLayoutInfoById = { tabs };\n\t\tthis._primaryBackend?.setTerminalLayoutInfo(state);\n\t}\n\n\t@debounce(500)\n\tprivate _updateTitle(instance: ITerminalInstance | undefined): void {\n\t\tif (\n\t\t\t!this._terminalConfigurationService.config\n\t\t\t\t.enablePersistentSessions ||\n\t\t\t!instance ||\n\t\t\t!instance.persistentProcessId ||\n\t\t\t!instance.title ||\n\t\t\tinstance.isDisposed\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tif (instance.staticTitle) {\n\t\t\tthis._primaryBackend?.updateTitle(\n\t\t\t\tinstance.persistentProcessId,\n\t\t\t\tinstance.staticTitle,\n\t\t\t\tTitleEventSource.Api,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._primaryBackend?.updateTitle(\n\t\t\t\tinstance.persistentProcessId,\n\t\t\t\tinstance.title,\n\t\t\t\tinstance.titleSource,\n\t\t\t);\n\t\t}\n\t}\n\n\t@debounce(500)\n\tprivate _updateIcon(\n\t\tinstance: ITerminalInstance,\n\t\tuserInitiated: boolean,\n\t): void {\n\t\tif (\n\t\t\t!this._terminalConfigurationService.config\n\t\t\t\t.enablePersistentSessions ||\n\t\t\t!instance ||\n\t\t\t!instance.persistentProcessId ||\n\t\t\t!instance.icon ||\n\t\t\tinstance.isDisposed\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._primaryBackend?.updateIcon(\n\t\t\tinstance.persistentProcessId,\n\t\t\tuserInitiated,\n\t\t\tinstance.icon,\n\t\t\tinstance.color,\n\t\t);\n\t}\n\n\trefreshActiveGroup(): void {\n\t\tthis._onDidChangeActiveGroup.fire(\n\t\t\tthis._terminalGroupService.activeGroup,\n\t\t);\n\t}\n\n\tgetInstanceFromId(terminalId: number): ITerminalInstance | undefined {\n\t\tlet bgIndex = -1;\n\t\tthis._backgroundedTerminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tbgIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (bgIndex !== -1) {\n\t\t\treturn this._backgroundedTerminalInstances[bgIndex];\n\t\t}\n\t\ttry {\n\t\t\treturn this.instances[this._getIndexFromId(terminalId)];\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tgetInstanceFromIndex(terminalIndex: number): ITerminalInstance {\n\t\treturn this.instances[terminalIndex];\n\t}\n\n\tgetInstanceFromResource(\n\t\tresource: URI | undefined,\n\t): ITerminalInstance | undefined {\n\t\treturn getInstanceFromResource(this.instances, resource);\n\t}\n\n\tisAttachedToTerminal(remoteTerm: IRemoteTerminalAttachTarget): boolean {\n\t\treturn this.instances.some((term) => term.processId === remoteTerm.pid);\n\t}\n\n\tmoveToEditor(\n\t\tsource: ITerminalInstance,\n\t\tgroup?:\n\t\t\t| GroupIdentifier\n\t\t\t| SIDE_GROUP_TYPE\n\t\t\t| ACTIVE_GROUP_TYPE\n\t\t\t| AUX_WINDOW_GROUP_TYPE,\n\t): void {\n\t\tif (source.target === TerminalLocation.Editor) {\n\t\t\treturn;\n\t\t}\n\t\tconst sourceGroup =\n\t\t\tthis._terminalGroupService.getGroupForInstance(source);\n\t\tif (!sourceGroup) {\n\t\t\treturn;\n\t\t}\n\t\tsourceGroup.removeInstance(source);\n\t\tthis._terminalEditorService.openEditor(\n\t\t\tsource,\n\t\t\tgroup ? { viewColumn: group } : undefined,\n\t\t);\n\t}\n\n\tmoveIntoNewEditor(source: ITerminalInstance): void {\n\t\tthis.moveToEditor(source, AUX_WINDOW_GROUP);\n\t}\n\n\tasync moveToTerminalView(\n\t\tsource?: ITerminalInstance | URI,\n\t\ttarget?: ITerminalInstance,\n\t\tside?: \"before\" | \"after\",\n\t): Promise<void> {\n\t\tif (URI.isUri(source)) {\n\t\t\tsource = this.getInstanceFromResource(source);\n\t\t}\n\n\t\tif (!source) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._terminalEditorService.detachInstance(source);\n\n\t\tif (source.target !== TerminalLocation.Editor) {\n\t\t\tawait this._terminalGroupService.showPanel(true);\n\t\t\treturn;\n\t\t}\n\t\tsource.target = TerminalLocation.Panel;\n\n\t\tlet group: ITerminalGroup | undefined;\n\t\tif (target) {\n\t\t\tgroup = this._terminalGroupService.getGroupForInstance(target);\n\t\t}\n\n\t\tif (!group) {\n\t\t\tgroup = this._terminalGroupService.createGroup();\n\t\t}\n\n\t\tgroup.addInstance(source);\n\t\tthis.setActiveInstance(source);\n\t\tawait this._terminalGroupService.showPanel(true);\n\n\t\tif (target && side) {\n\t\t\tconst index =\n\t\t\t\tgroup.terminalInstances.indexOf(target) +\n\t\t\t\t(side === \"after\" ? 1 : 0);\n\t\t\tgroup.moveInstance(source, index, side);\n\t\t}\n\n\t\t// Fire events\n\t\tthis._onDidChangeInstances.fire();\n\t\tthis._onDidChangeActiveGroup.fire(\n\t\t\tthis._terminalGroupService.activeGroup,\n\t\t);\n\t}\n\n\tprotected _initInstanceListeners(instance: ITerminalInstance): void {\n\t\tconst instanceDisposables: IDisposable[] = [\n\t\t\tinstance.onDimensionsChanged(() => {\n\t\t\t\tthis._onDidChangeInstanceDimensions.fire(instance);\n\t\t\t\tif (\n\t\t\t\t\tthis._terminalConfigurationService.config\n\t\t\t\t\t\t.enablePersistentSessions &&\n\t\t\t\t\tthis.isProcessSupportRegistered\n\t\t\t\t) {\n\t\t\t\t\tthis._saveState();\n\t\t\t\t}\n\t\t\t}),\n\t\t\tinstance.onDidFocus(\n\t\t\t\tthis._onDidChangeActiveInstance.fire,\n\t\t\t\tthis._onDidChangeActiveInstance,\n\t\t\t),\n\t\t\tinstance.onRequestAddInstanceToGroup(\n\t\t\t\tasync (e) => await this._addInstanceToGroup(instance, e),\n\t\t\t),\n\t\t];\n\t\tinstance.onDisposed(() => dispose(instanceDisposables));\n\t}\n\n\tprivate async _addInstanceToGroup(\n\t\tinstance: ITerminalInstance,\n\t\te: IRequestAddInstanceToGroupEvent,\n\t): Promise<void> {\n\t\tconst terminalIdentifier = parseTerminalUri(e.uri);\n\t\tif (terminalIdentifier.instanceId === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet sourceInstance: ITerminalInstance | undefined =\n\t\t\tthis.getInstanceFromResource(e.uri);\n\n\t\t// Terminal from a different window\n\t\tif (!sourceInstance) {\n\t\t\tconst attachPersistentProcess =\n\t\t\t\tawait this._primaryBackend?.requestDetachInstance(\n\t\t\t\t\tterminalIdentifier.workspaceId,\n\t\t\t\t\tterminalIdentifier.instanceId,\n\t\t\t\t);\n\t\t\tif (attachPersistentProcess) {\n\t\t\t\tsourceInstance = await this.createTerminal({\n\t\t\t\t\tconfig: { attachPersistentProcess },\n\t\t\t\t\tresource: e.uri,\n\t\t\t\t});\n\t\t\t\tthis._terminalGroupService.moveInstance(\n\t\t\t\t\tsourceInstance,\n\t\t\t\t\tinstance,\n\t\t\t\t\te.side,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// View terminals\n\t\tsourceInstance = this._terminalGroupService.getInstanceFromResource(\n\t\t\te.uri,\n\t\t);\n\t\tif (sourceInstance) {\n\t\t\tthis._terminalGroupService.moveInstance(\n\t\t\t\tsourceInstance,\n\t\t\t\tinstance,\n\t\t\t\te.side,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// Terminal editors\n\t\tsourceInstance = this._terminalEditorService.getInstanceFromResource(\n\t\t\te.uri,\n\t\t);\n\t\tif (sourceInstance) {\n\t\t\tthis.moveToTerminalView(sourceInstance, instance, e.side);\n\t\t\treturn;\n\t\t}\n\t\treturn;\n\t}\n\n\tregisterProcessSupport(isSupported: boolean): void {\n\t\tif (!isSupported) {\n\t\t\treturn;\n\t\t}\n\t\tthis._processSupportContextKey.set(isSupported);\n\t\tthis._onDidRegisterProcessSupport.fire();\n\t}\n\n\t// TODO: Remove this, it should live in group/editor servioce\n\tprivate _getIndexFromId(terminalId: number): number {\n\t\tlet terminalIndex = -1;\n\t\tthis.instances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tterminalIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (terminalIndex === -1) {\n\t\t\tthrow new Error(\n\t\t\t\t`Terminal with ID ${terminalId} does not exist (has it already been disposed?)`,\n\t\t\t);\n\t\t}\n\t\treturn terminalIndex;\n\t}\n\n\tprotected async _showTerminalCloseConfirmation(\n\t\tsingleTerminal?: boolean,\n\t): Promise<boolean> {\n\t\tlet message: string;\n\t\tif (this.instances.length === 1 || singleTerminal) {\n\t\t\tmessage = nls.localize(\n\t\t\t\t\"terminalService.terminalCloseConfirmationSingular\",\n\t\t\t\t\"Do you want to terminate the active terminal session?\",\n\t\t\t);\n\t\t} else {\n\t\t\tmessage = nls.localize(\n\t\t\t\t\"terminalService.terminalCloseConfirmationPlural\",\n\t\t\t\t\"Do you want to terminate the {0} active terminal sessions?\",\n\t\t\t\tthis.instances.length,\n\t\t\t);\n\t\t}\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: \"warning\",\n\t\t\tmessage,\n\t\t\tprimaryButton: nls.localize(\n\t\t\t\t{ key: \"terminate\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\"&&Terminate\",\n\t\t\t),\n\t\t});\n\t\treturn !confirmed;\n\t}\n\n\tgetDefaultInstanceHost(): ITerminalInstanceHost {\n\t\tif (this.defaultLocation === TerminalLocation.Editor) {\n\t\t\treturn this._terminalEditorService;\n\t\t}\n\t\treturn this._terminalGroupService;\n\t}\n\n\tasync getInstanceHost(\n\t\tlocation: ITerminalLocationOptions | undefined,\n\t): Promise<ITerminalInstanceHost> {\n\t\tif (location) {\n\t\t\tif (location === TerminalLocation.Editor) {\n\t\t\t\treturn this._terminalEditorService;\n\t\t\t} else if (typeof location === \"object\") {\n\t\t\t\tif (\"viewColumn\" in location) {\n\t\t\t\t\treturn this._terminalEditorService;\n\t\t\t\t} else if (\"parentTerminal\" in location) {\n\t\t\t\t\treturn (await location.parentTerminal).target ===\n\t\t\t\t\t\tTerminalLocation.Editor\n\t\t\t\t\t\t? this._terminalEditorService\n\t\t\t\t\t\t: this._terminalGroupService;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this._terminalGroupService;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tasync createTerminal(\n\t\toptions?: ICreateTerminalOptions,\n\t): Promise<ITerminalInstance> {\n\t\t// Await the initialization of available profiles as long as this is not a pty terminal or a\n\t\t// local terminal in a remote workspace as profile won't be used in those cases and these\n\t\t// terminals need to be launched before remote connections are established.\n\t\tif (this._terminalProfileService.availableProfiles.length === 0) {\n\t\t\tconst isPtyTerminal =\n\t\t\t\toptions?.config && \"customPtyImplementation\" in options.config;\n\t\t\tconst isLocalInRemoteTerminal =\n\t\t\t\tthis._remoteAgentService.getConnection() &&\n\t\t\t\tURI.isUri(options?.cwd) &&\n\t\t\t\toptions?.cwd.scheme === Schemas.vscodeFileResource;\n\t\t\tif (!isPtyTerminal && !isLocalInRemoteTerminal) {\n\t\t\t\tif (\n\t\t\t\t\tthis._connectionState === TerminalConnectionState.Connecting\n\t\t\t\t) {\n\t\t\t\t\tmark(`code/terminal/willGetProfiles`);\n\t\t\t\t}\n\t\t\t\tawait this._terminalProfileService.profilesReady;\n\t\t\t\tif (\n\t\t\t\t\tthis._connectionState === TerminalConnectionState.Connecting\n\t\t\t\t) {\n\t\t\t\t\tmark(`code/terminal/didGetProfiles`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst config =\n\t\t\toptions?.config || this._terminalProfileService.getDefaultProfile();\n\t\tconst shellLaunchConfig =\n\t\t\tconfig && \"extensionIdentifier\" in config\n\t\t\t\t? {}\n\t\t\t\t: this._terminalInstanceService.convertProfileToShellLaunchConfig(\n\t\t\t\t\t\tconfig || {},\n\t\t\t\t\t);\n\n\t\t// Get the contributed profile if it was provided\n\t\tconst contributedProfile = options?.skipContributedProfileCheck\n\t\t\t? undefined\n\t\t\t: await this._getContributedProfile(shellLaunchConfig, options);\n\n\t\tconst splitActiveTerminal =\n\t\t\ttypeof options?.location === \"object\" &&\n\t\t\t\"splitActiveTerminal\" in options.location\n\t\t\t\t? options.location.splitActiveTerminal\n\t\t\t\t: typeof options?.location === \"object\"\n\t\t\t\t\t? \"parentTerminal\" in options.location\n\t\t\t\t\t: false;\n\n\t\tawait this._resolveCwd(shellLaunchConfig, splitActiveTerminal, options);\n\n\t\t// Launch the contributed profile\n\t\tif (contributedProfile) {\n\t\t\tconst resolvedLocation = await this.resolveLocation(\n\t\t\t\toptions?.location,\n\t\t\t);\n\t\t\tlet location:\n\t\t\t\t| TerminalLocation\n\t\t\t\t| { viewColumn: number; preserveState?: boolean }\n\t\t\t\t| { splitActiveTerminal: boolean }\n\t\t\t\t| undefined;\n\t\t\tif (splitActiveTerminal) {\n\t\t\t\tlocation =\n\t\t\t\t\tresolvedLocation === TerminalLocation.Editor\n\t\t\t\t\t\t? { viewColumn: SIDE_GROUP }\n\t\t\t\t\t\t: { splitActiveTerminal: true };\n\t\t\t} else {\n\t\t\t\tlocation =\n\t\t\t\t\ttypeof options?.location === \"object\" &&\n\t\t\t\t\t\"viewColumn\" in options.location\n\t\t\t\t\t\t? options.location\n\t\t\t\t\t\t: resolvedLocation;\n\t\t\t}\n\t\t\tawait this.createContributedTerminalProfile(\n\t\t\t\tcontributedProfile.extensionIdentifier,\n\t\t\t\tcontributedProfile.id,\n\t\t\t\t{\n\t\t\t\t\ticon: contributedProfile.icon,\n\t\t\t\t\tcolor: contributedProfile.color,\n\t\t\t\t\tlocation,\n\t\t\t\t\tcwd: shellLaunchConfig.cwd,\n\t\t\t\t},\n\t\t\t);\n\t\t\tconst instanceHost =\n\t\t\t\tresolvedLocation === TerminalLocation.Editor\n\t\t\t\t\t? this._terminalEditorService\n\t\t\t\t\t: this._terminalGroupService;\n\t\t\tconst instance =\n\t\t\t\tinstanceHost.instances[instanceHost.instances.length - 1];\n\t\t\tawait instance?.focusWhenReady();\n\t\t\tthis._terminalHasBeenCreated.set(true);\n\t\t\treturn instance;\n\t\t}\n\n\t\tif (\n\t\t\t!shellLaunchConfig.customPtyImplementation &&\n\t\t\t!this.isProcessSupportRegistered\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Could not create terminal when process support is not registered\",\n\t\t\t);\n\t\t}\n\t\tif (shellLaunchConfig.hideFromUser) {\n\t\t\tconst instance = this._terminalInstanceService.createInstance(\n\t\t\t\tshellLaunchConfig,\n\t\t\t\tTerminalLocation.Panel,\n\t\t\t);\n\t\t\tthis._backgroundedTerminalInstances.push(instance);\n\t\t\tthis._backgroundedTerminalDisposables.set(instance.instanceId, [\n\t\t\t\tinstance.onDisposed(\n\t\t\t\t\tthis._onDidDisposeInstance.fire,\n\t\t\t\t\tthis._onDidDisposeInstance,\n\t\t\t\t),\n\t\t\t]);\n\t\t\tthis._terminalHasBeenCreated.set(true);\n\t\t\treturn instance;\n\t\t}\n\n\t\tthis._evaluateLocalCwd(shellLaunchConfig);\n\t\tconst location =\n\t\t\t(await this.resolveLocation(options?.location)) ||\n\t\t\tthis.defaultLocation;\n\t\tconst parent = await this._getSplitParent(options?.location);\n\t\tthis._terminalHasBeenCreated.set(true);\n\t\tif (parent) {\n\t\t\treturn this._splitTerminal(shellLaunchConfig, location, parent);\n\t\t}\n\t\treturn this._createTerminal(shellLaunchConfig, location, options);\n\t}\n\n\tprivate async _getContributedProfile(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\toptions?: ICreateTerminalOptions,\n\t): Promise<IExtensionTerminalProfile | undefined> {\n\t\tif (options?.config && \"extensionIdentifier\" in options.config) {\n\t\t\treturn options.config;\n\t\t}\n\n\t\treturn this._terminalProfileService.getContributedDefaultProfile(\n\t\t\tshellLaunchConfig,\n\t\t);\n\t}\n\n\tasync createDetachedTerminal(\n\t\toptions: IDetachedXTermOptions,\n\t): Promise<IDetachedTerminalInstance> {\n\t\tconst ctor = await TerminalInstance.getXtermConstructor(\n\t\t\tthis._keybindingService,\n\t\t\tthis._contextKeyService,\n\t\t);\n\t\tconst xterm = this._instantiationService.createInstance(\n\t\t\tXtermTerminal,\n\t\t\tctor,\n\t\t\toptions.cols,\n\t\t\toptions.rows,\n\t\t\toptions.colorProvider,\n\t\t\toptions.capabilities || new TerminalCapabilityStore(),\n\t\t\t\"\",\n\t\t\tfalse,\n\t\t);\n\n\t\tif (options.readonly) {\n\t\t\txterm.raw.attachCustomKeyEventHandler(() => false);\n\t\t}\n\n\t\tconst instance = new DetachedTerminal(\n\t\t\txterm,\n\t\t\toptions,\n\t\t\tthis._instantiationService,\n\t\t);\n\t\tthis._detachedXterms.add(instance);\n\t\tconst l = xterm.onDidDispose(() => {\n\t\t\tthis._detachedXterms.delete(instance);\n\t\t\tl.dispose();\n\t\t});\n\n\t\treturn instance;\n\t}\n\n\tprivate async _resolveCwd(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tsplitActiveTerminal: boolean,\n\t\toptions?: ICreateTerminalOptions,\n\t): Promise<void> {\n\t\tconst cwd = shellLaunchConfig.cwd;\n\t\tif (!cwd) {\n\t\t\tif (options?.cwd) {\n\t\t\t\tshellLaunchConfig.cwd = options.cwd;\n\t\t\t} else if (splitActiveTerminal && options?.location) {\n\t\t\t\tlet parent = this.activeInstance;\n\t\t\t\tif (\n\t\t\t\t\ttypeof options.location === \"object\" &&\n\t\t\t\t\t\"parentTerminal\" in options.location\n\t\t\t\t) {\n\t\t\t\t\tparent = await options.location.parentTerminal;\n\t\t\t\t}\n\t\t\t\tif (!parent) {\n\t\t\t\t\tthrow new Error(\"Cannot split without an active instance\");\n\t\t\t\t}\n\t\t\t\tshellLaunchConfig.cwd = await getCwdForSplit(\n\t\t\t\t\tparent,\n\t\t\t\t\tthis._workspaceContextService.getWorkspace().folders,\n\t\t\t\t\tthis._commandService,\n\t\t\t\t\tthis._terminalConfigService,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _splitTerminal(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tlocation: TerminalLocation,\n\t\tparent: ITerminalInstance,\n\t): ITerminalInstance {\n\t\tlet instance;\n\t\t// Use the URI from the base instance if it exists, this will correctly split local terminals\n\t\tif (\n\t\t\ttypeof shellLaunchConfig.cwd !== \"object\" &&\n\t\t\ttypeof parent.shellLaunchConfig.cwd === \"object\"\n\t\t) {\n\t\t\tshellLaunchConfig.cwd = URI.from({\n\t\t\t\tscheme: parent.shellLaunchConfig.cwd.scheme,\n\t\t\t\tauthority: parent.shellLaunchConfig.cwd.authority,\n\t\t\t\tpath:\n\t\t\t\t\tshellLaunchConfig.cwd || parent.shellLaunchConfig.cwd.path,\n\t\t\t});\n\t\t}\n\t\tif (\n\t\t\tlocation === TerminalLocation.Editor ||\n\t\t\tparent.target === TerminalLocation.Editor\n\t\t) {\n\t\t\tinstance = this._terminalEditorService.splitInstance(\n\t\t\t\tparent,\n\t\t\t\tshellLaunchConfig,\n\t\t\t);\n\t\t} else {\n\t\t\tconst group =\n\t\t\t\tthis._terminalGroupService.getGroupForInstance(parent);\n\t\t\tif (!group) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot split a terminal without a group (instanceId: ${parent.instanceId}, title: ${parent.title})`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tshellLaunchConfig.parentTerminalId = parent.instanceId;\n\t\t\tinstance = group.split(shellLaunchConfig);\n\t\t}\n\t\tthis._addToReconnected(instance);\n\t\treturn instance;\n\t}\n\n\tprivate _addToReconnected(instance: ITerminalInstance): void {\n\t\tif (!instance.reconnectionProperties?.ownerId) {\n\t\t\treturn;\n\t\t}\n\t\tconst reconnectedTerminals = this._reconnectedTerminals.get(\n\t\t\tinstance.reconnectionProperties.ownerId,\n\t\t);\n\t\tif (reconnectedTerminals) {\n\t\t\treconnectedTerminals.push(instance);\n\t\t} else {\n\t\t\tthis._reconnectedTerminals.set(\n\t\t\t\tinstance.reconnectionProperties.ownerId,\n\t\t\t\t[instance],\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _createTerminal(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tlocation: TerminalLocation,\n\t\toptions?: ICreateTerminalOptions,\n\t): ITerminalInstance {\n\t\tlet instance;\n\t\tconst editorOptions = this._getEditorOptions(options?.location);\n\t\tif (location === TerminalLocation.Editor) {\n\t\t\tinstance = this._terminalInstanceService.createInstance(\n\t\t\t\tshellLaunchConfig,\n\t\t\t\tTerminalLocation.Editor,\n\t\t\t);\n\t\t\tthis._terminalEditorService.openEditor(instance, editorOptions);\n\t\t} else {\n\t\t\t// TODO: pass resource?\n\t\t\tconst group =\n\t\t\t\tthis._terminalGroupService.createGroup(shellLaunchConfig);\n\t\t\tinstance = group.terminalInstances[0];\n\t\t}\n\t\tthis._addToReconnected(instance);\n\t\treturn instance;\n\t}\n\n\tasync resolveLocation(\n\t\tlocation?: ITerminalLocationOptions,\n\t): Promise<TerminalLocation | undefined> {\n\t\tif (location && typeof location === \"object\") {\n\t\t\tif (\"parentTerminal\" in location) {\n\t\t\t\t// since we don't set the target unless it's an editor terminal, this is necessary\n\t\t\t\tconst parentTerminal = await location.parentTerminal;\n\t\t\t\treturn parentTerminal.target\n\t\t\t\t\t? parentTerminal.target\n\t\t\t\t\t: TerminalLocation.Panel;\n\t\t\t} else if (\"viewColumn\" in location) {\n\t\t\t\treturn TerminalLocation.Editor;\n\t\t\t} else if (\"splitActiveTerminal\" in location) {\n\t\t\t\t// since we don't set the target unless it's an editor terminal, this is necessary\n\t\t\t\treturn this._activeInstance?.target\n\t\t\t\t\t? this._activeInstance?.target\n\t\t\t\t\t: TerminalLocation.Panel;\n\t\t\t}\n\t\t}\n\t\treturn location;\n\t}\n\n\tprivate async _getSplitParent(\n\t\tlocation?: ITerminalLocationOptions,\n\t): Promise<ITerminalInstance | undefined> {\n\t\tif (\n\t\t\tlocation &&\n\t\t\ttypeof location === \"object\" &&\n\t\t\t\"parentTerminal\" in location\n\t\t) {\n\t\t\treturn location.parentTerminal;\n\t\t} else if (\n\t\t\tlocation &&\n\t\t\ttypeof location === \"object\" &&\n\t\t\t\"splitActiveTerminal\" in location\n\t\t) {\n\t\t\treturn this.activeInstance;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _getEditorOptions(\n\t\tlocation?: ITerminalLocationOptions,\n\t): TerminalEditorLocation | undefined {\n\t\tif (\n\t\t\tlocation &&\n\t\t\ttypeof location === \"object\" &&\n\t\t\t\"viewColumn\" in location\n\t\t) {\n\t\t\tlocation.viewColumn = columnToEditorGroup(\n\t\t\t\tthis._editorGroupsService,\n\t\t\t\tthis._configurationService,\n\t\t\t\tlocation.viewColumn,\n\t\t\t);\n\t\t\treturn location;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _evaluateLocalCwd(shellLaunchConfig: IShellLaunchConfig) {\n\t\t// Add welcome message and title annotation for local terminals launched within remote or\n\t\t// virtual workspaces\n\t\tif (\n\t\t\ttypeof shellLaunchConfig.cwd !== \"string\" &&\n\t\t\tshellLaunchConfig.cwd?.scheme === Schemas.file\n\t\t) {\n\t\t\tif (VirtualWorkspaceContext.getValue(this._contextKeyService)) {\n\t\t\t\tshellLaunchConfig.initialText = formatMessageForTerminal(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"localTerminalVirtualWorkspace\",\n\t\t\t\t\t\t\"This shell is open to a {0}local{1} folder, NOT to the virtual folder\",\n\t\t\t\t\t\t\"\\x1b[3m\",\n\t\t\t\t\t\t\"\\x1b[23m\",\n\t\t\t\t\t),\n\t\t\t\t\t{ excludeLeadingNewLine: true, loudFormatting: true },\n\t\t\t\t);\n\t\t\t\tshellLaunchConfig.type = \"Local\";\n\t\t\t} else if (this._remoteAgentService.getConnection()) {\n\t\t\t\tshellLaunchConfig.initialText = formatMessageForTerminal(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"localTerminalRemote\",\n\t\t\t\t\t\t\"This shell is running on your {0}local{1} machine, NOT on the connected remote machine\",\n\t\t\t\t\t\t\"\\x1b[3m\",\n\t\t\t\t\t\t\"\\x1b[23m\",\n\t\t\t\t\t),\n\t\t\t\t\t{ excludeLeadingNewLine: true, loudFormatting: true },\n\t\t\t\t);\n\t\t\t\tshellLaunchConfig.type = \"Local\";\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _showBackgroundTerminal(instance: ITerminalInstance): void {\n\t\tthis._backgroundedTerminalInstances.splice(\n\t\t\tthis._backgroundedTerminalInstances.indexOf(instance),\n\t\t\t1,\n\t\t);\n\t\tconst disposables = this._backgroundedTerminalDisposables.get(\n\t\t\tinstance.instanceId,\n\t\t);\n\t\tif (disposables) {\n\t\t\tdispose(disposables);\n\t\t}\n\t\tthis._backgroundedTerminalDisposables.delete(instance.instanceId);\n\t\tinstance.shellLaunchConfig.hideFromUser = false;\n\t\tthis._terminalGroupService.createGroup(instance);\n\n\t\t// Make active automatically if it's the first instance\n\t\tif (this.instances.length === 1) {\n\t\t\tthis._terminalGroupService.setActiveInstanceByIndex(0);\n\t\t}\n\n\t\tthis._onDidChangeInstances.fire();\n\t}\n\n\tasync setContainers(\n\t\tpanelContainer: HTMLElement,\n\t\tterminalContainer: HTMLElement,\n\t): Promise<void> {\n\t\tthis._terminalConfigurationService.setPanelContainer(panelContainer);\n\t\tthis._terminalGroupService.setContainer(terminalContainer);\n\t}\n\n\tgetEditingTerminal(): ITerminalInstance | undefined {\n\t\treturn this._editingTerminal;\n\t}\n\n\tsetEditingTerminal(instance: ITerminalInstance | undefined) {\n\t\tthis._editingTerminal = instance;\n\t}\n\n\tcreateOnInstanceEvent<T>(\n\t\tgetEvent: (instance: ITerminalInstance) => Event<T>,\n\t): DynamicListEventMultiplexer<ITerminalInstance, T> {\n\t\treturn new DynamicListEventMultiplexer(\n\t\t\tthis.instances,\n\t\t\tthis.onDidCreateInstance,\n\t\t\tthis.onDidDisposeInstance,\n\t\t\tgetEvent,\n\t\t);\n\t}\n\n\tcreateOnInstanceCapabilityEvent<T extends TerminalCapability, K>(\n\t\tcapabilityId: T,\n\t\tgetEvent: (capability: ITerminalCapabilityImplMap[T]) => Event<K>,\n\t): IDynamicListEventMultiplexer<{ instance: ITerminalInstance; data: K }> {\n\t\treturn createInstanceCapabilityEventMultiplexer(\n\t\t\tthis.instances,\n\t\t\tthis.onDidCreateInstance,\n\t\t\tthis.onDidDisposeInstance,\n\t\t\tcapabilityId,\n\t\t\tgetEvent,\n\t\t);\n\t}\n}\n\nclass TerminalEditorStyle extends Themable {\n\tprivate _styleElement: HTMLElement;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@IEditorService private readonly _editorService: IEditorService\n\t) {\n\t\tsuper(_themeService);\n\t\tthis._registerListeners();\n\t\tthis._styleElement = dom.createStyleSheet(container);\n\t\tthis._register(toDisposable(() => this._styleElement.remove()));\n\t\tthis.updateStyles();\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis._terminalService.onAnyInstanceIconChange(() =>\n\t\t\t\tthis.updateStyles(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._terminalService.onDidCreateInstance(() =>\n\t\t\t\tthis.updateStyles(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editorService.onDidActiveEditorChange(() => {\n\t\t\t\tif (\n\t\t\t\t\tthis._editorService.activeEditor instanceof\n\t\t\t\t\tTerminalEditorInput\n\t\t\t\t) {\n\t\t\t\t\tthis.updateStyles();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editorService.onDidCloseEditor(() => {\n\t\t\t\tif (\n\t\t\t\t\tthis._editorService.activeEditor instanceof\n\t\t\t\t\tTerminalEditorInput\n\t\t\t\t) {\n\t\t\t\t\tthis.updateStyles();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._terminalProfileService.onDidChangeAvailableProfiles(() =>\n\t\t\t\tthis.updateStyles(),\n\t\t\t),\n\t\t);\n\t}\n\n\toverride updateStyles(): void {\n\t\tsuper.updateStyles();\n\t\tconst colorTheme = this._themeService.getColorTheme();\n\n\t\t// TODO: add a rule collector to avoid duplication\n\t\tlet css = \"\";\n\n\t\tconst productIconTheme = this._themeService.getProductIconTheme();\n\n\t\t// Add icons\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tconst icon = instance.icon;\n\t\t\tif (!icon) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet uri;\n\t\t\tif (icon instanceof URI) {\n\t\t\t\turi = icon;\n\t\t\t} else if (\n\t\t\t\ticon instanceof Object &&\n\t\t\t\t\"light\" in icon &&\n\t\t\t\t\"dark\" in icon\n\t\t\t) {\n\t\t\t\turi =\n\t\t\t\t\tcolorTheme.type === ColorScheme.LIGHT\n\t\t\t\t\t\t? icon.light\n\t\t\t\t\t\t: icon.dark;\n\t\t\t}\n\t\t\tconst iconClasses = getUriClasses(instance, colorTheme.type);\n\t\t\tif (uri instanceof URI && iconClasses && iconClasses.length > 1) {\n\t\t\t\tcss +=\n\t\t\t\t\t`.monaco-workbench .terminal-tab.${iconClasses[0]}::before` +\n\t\t\t\t\t`{content: ''; background-image: ${dom.asCSSUrl(uri)};}`;\n\t\t\t}\n\t\t\tif (ThemeIcon.isThemeIcon(icon)) {\n\t\t\t\tconst iconRegistry = getIconRegistry();\n\t\t\t\tconst iconContribution = iconRegistry.getIcon(icon.id);\n\t\t\t\tif (iconContribution) {\n\t\t\t\t\tconst def = productIconTheme.getIcon(iconContribution);\n\t\t\t\t\tif (def) {\n\t\t\t\t\t\tcss +=\n\t\t\t\t\t\t\t`.monaco-workbench .terminal-tab.codicon-${icon.id}::before` +\n\t\t\t\t\t\t\t`{content: '${def.fontCharacter}' !important; font-family: ${dom.asCSSPropertyValue(def.font?.id ?? \"codicon\")} !important;}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add colors\n\t\tconst iconForegroundColor = colorTheme.getColor(iconForeground);\n\t\tif (iconForegroundColor) {\n\t\t\tcss += `.monaco-workbench .show-file-icons .file-icon.terminal-tab::before { color: ${iconForegroundColor}; }`;\n\t\t}\n\n\t\tcss += getColorStyleContent(colorTheme, true);\n\t\tthis._styleElement.textContent = css;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["location"]
}
