{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/browser/terminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { DeferredPromise, timeout } from '../../../../base/common/async.js';\nimport { debounce, memoize } from '../../../../base/common/decorators.js';\nimport { DynamicListEventMultiplexer, Emitter, Event, IDynamicListEventMultiplexer } from '../../../../base/common/event.js';\nimport { Disposable, dispose, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { isMacintosh, isWeb } from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IKeyMods } from '../../../../platform/quickinput/common/quickInput.js';\nimport * as nls from '../../../../nls.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ICreateContributedTerminalProfileOptions, IExtensionTerminalProfile, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalLocation, TerminalLocationString, TitleEventSource } from '../../../../platform/terminal/common/terminal.js';\nimport { formatMessageForTerminal } from '../../../../platform/terminal/common/terminalStrings.js';\nimport { iconForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { getIconRegistry } from '../../../../platform/theme/common/iconRegistry.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nimport { IThemeService, Themable } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { VirtualWorkspaceContext } from '../../../common/contextkeys.js';\nimport { IEditableData } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { ICreateTerminalOptions, IDetachedTerminalInstance, IDetachedXTermOptions, IRequestAddInstanceToGroupEvent, ITerminalConfigurationService, ITerminalEditorService, ITerminalGroup, ITerminalGroupService, ITerminalInstance, ITerminalInstanceHost, ITerminalInstanceService, ITerminalLocationOptions, ITerminalService, ITerminalServiceNativeDelegate, TerminalConnectionState, TerminalEditorLocation } from './terminal.js';\nimport { getCwdForSplit } from './terminalActions.js';\nimport { TerminalEditorInput } from './terminalEditorInput.js';\nimport { getColorStyleContent, getUriClasses } from './terminalIcon.js';\nimport { TerminalProfileQuickpick } from './terminalProfileQuickpick.js';\nimport { getInstanceFromResource, getTerminalUri, parseTerminalUri } from './terminalUri.js';\nimport { TerminalViewPane } from './terminalView.js';\nimport { IRemoteTerminalAttachTarget, IStartExtensionTerminalRequest, ITerminalProcessExtHostProxy, ITerminalProfileService, TERMINAL_VIEW_ID } from '../common/terminal.js';\nimport { TerminalContextKeys } from '../common/terminalContextKey.js';\nimport { columnToEditorGroup } from '../../../services/editor/common/editorGroupColumn.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { ACTIVE_GROUP_TYPE, AUX_WINDOW_GROUP, AUX_WINDOW_GROUP_TYPE, IEditorService, SIDE_GROUP, SIDE_GROUP_TYPE } from '../../../services/editor/common/editorService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { ILifecycleService, ShutdownReason, StartupKind, WillShutdownEvent } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { XtermTerminal } from './xterm/xtermTerminal.js';\nimport { TerminalInstance } from './terminalInstance.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { TerminalCapabilityStore } from '../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { ITimerService } from '../../../services/timer/browser/timerService.js';\nimport { mark } from '../../../../base/common/performance.js';\nimport { DetachedTerminal } from './detachedTerminal.js';\nimport { ITerminalCapabilityImplMap, TerminalCapability } from '../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { createInstanceCapabilityEventMultiplexer } from './terminalEvents.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { GroupIdentifier } from '../../../common/editor.js';\n\nexport class TerminalService extends Disposable implements ITerminalService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _hostActiveTerminals: Map<ITerminalInstanceHost, ITerminalInstance | undefined> = new Map();\n\n\tprivate _detachedXterms = new Set<IDetachedTerminalInstance>();\n\tprivate _terminalEditorActive: IContextKey<boolean>;\n\tprivate readonly _terminalShellTypeContextKey: IContextKey<string>;\n\n\tprivate _isShuttingDown: boolean = false;\n\tprivate _backgroundedTerminalInstances: ITerminalInstance[] = [];\n\tprivate _backgroundedTerminalDisposables: Map<number, IDisposable[]> = new Map();\n\tprivate _processSupportContextKey: IContextKey<boolean>;\n\n\tprivate _primaryBackend?: ITerminalBackend;\n\tprivate _terminalHasBeenCreated: IContextKey<boolean>;\n\tprivate _terminalCountContextKey: IContextKey<number>;\n\tprivate _nativeDelegate?: ITerminalServiceNativeDelegate;\n\tprivate _shutdownWindowCount?: number;\n\n\tprivate _editable: { instance: ITerminalInstance; data: IEditableData } | undefined;\n\n\tget isProcessSupportRegistered(): boolean { return !!this._processSupportContextKey.get(); }\n\n\tprivate _connectionState: TerminalConnectionState = TerminalConnectionState.Connecting;\n\tget connectionState(): TerminalConnectionState { return this._connectionState; }\n\n\tprivate readonly _whenConnected = new DeferredPromise<void>();\n\tget whenConnected(): Promise<void> { return this._whenConnected.p; }\n\n\tprivate _restoredGroupCount: number = 0;\n\tget restoredGroupCount(): number { return this._restoredGroupCount; }\n\n\tget instances(): ITerminalInstance[] {\n\t\treturn this._terminalGroupService.instances.concat(this._terminalEditorService.instances).concat(this._backgroundedTerminalInstances);\n\t}\n\tget detachedInstances(): Iterable<IDetachedTerminalInstance> {\n\t\treturn this._detachedXterms;\n\t}\n\n\tprivate _reconnectedTerminalGroups: Promise<ITerminalGroup[]> | undefined;\n\n\tprivate _reconnectedTerminals: Map<string, ITerminalInstance[]> = new Map();\n\tgetReconnectedTerminals(reconnectionOwner: string): ITerminalInstance[] | undefined {\n\t\treturn this._reconnectedTerminals.get(reconnectionOwner);\n\t}\n\n\tget defaultLocation(): TerminalLocation { return this._terminalConfigurationService.config.defaultLocation === TerminalLocationString.Editor ? TerminalLocation.Editor : TerminalLocation.Panel; }\n\n\tprivate _activeInstance: ITerminalInstance | undefined;\n\tget activeInstance(): ITerminalInstance | undefined {\n\t\t// Check if either an editor or panel terminal has focus and return that, regardless of the\n\t\t// value of _activeInstance. This avoids terminals created in the panel for example stealing\n\t\t// the active status even when it's not focused.\n\t\tfor (const activeHostTerminal of this._hostActiveTerminals.values()) {\n\t\t\tif (activeHostTerminal?.hasFocus) {\n\t\t\t\treturn activeHostTerminal;\n\t\t\t}\n\t\t}\n\t\t// Fallback to the last recorded active terminal if neither have focus\n\t\treturn this._activeInstance;\n\t}\n\n\tprivate _editingTerminal: ITerminalInstance | undefined;\n\n\tprivate readonly _onDidCreateInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidCreateInstance(): Event<ITerminalInstance> { return this._onDidCreateInstance.event; }\n\tprivate readonly _onDidChangeInstanceDimensions = this._register(new Emitter<ITerminalInstance>());\n\tget onDidChangeInstanceDimensions(): Event<ITerminalInstance> { return this._onDidChangeInstanceDimensions.event; }\n\tprivate readonly _onDidRegisterProcessSupport = this._register(new Emitter<void>());\n\tget onDidRegisterProcessSupport(): Event<void> { return this._onDidRegisterProcessSupport.event; }\n\tprivate readonly _onDidChangeConnectionState = this._register(new Emitter<void>());\n\tget onDidChangeConnectionState(): Event<void> { return this._onDidChangeConnectionState.event; }\n\tprivate readonly _onDidRequestStartExtensionTerminal = this._register(new Emitter<IStartExtensionTerminalRequest>());\n\tget onDidRequestStartExtensionTerminal(): Event<IStartExtensionTerminalRequest> { return this._onDidRequestStartExtensionTerminal.event; }\n\n\t// ITerminalInstanceHost events\n\tprivate readonly _onDidDisposeInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidDisposeInstance(): Event<ITerminalInstance> { return this._onDidDisposeInstance.event; }\n\tprivate readonly _onDidFocusInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidFocusInstance(): Event<ITerminalInstance> { return this._onDidFocusInstance.event; }\n\tprivate readonly _onDidChangeActiveInstance = this._register(new Emitter<ITerminalInstance | undefined>());\n\tget onDidChangeActiveInstance(): Event<ITerminalInstance | undefined> { return this._onDidChangeActiveInstance.event; }\n\tprivate readonly _onDidChangeInstances = this._register(new Emitter<void>());\n\tget onDidChangeInstances(): Event<void> { return this._onDidChangeInstances.event; }\n\tprivate readonly _onDidChangeInstanceCapability = this._register(new Emitter<ITerminalInstance>());\n\tget onDidChangeInstanceCapability(): Event<ITerminalInstance> { return this._onDidChangeInstanceCapability.event; }\n\n\t// Terminal view events\n\tprivate readonly _onDidChangeActiveGroup = this._register(new Emitter<ITerminalGroup | undefined>());\n\tget onDidChangeActiveGroup(): Event<ITerminalGroup | undefined> { return this._onDidChangeActiveGroup.event; }\n\n\t// Lazily initialized events that fire when the specified event fires on _any_ terminal\n\t// TODO: Batch events\n\t@memoize get onAnyInstanceData() { return this._register(this.createOnInstanceEvent(instance => Event.map(instance.onData, data => ({ instance, data })))).event; }\n\t@memoize get onAnyInstanceDataInput() { return this._register(this.createOnInstanceEvent(e => Event.map(e.onDidInputData, () => e, e.store))).event; }\n\t@memoize get onAnyInstanceIconChange() { return this._register(this.createOnInstanceEvent(e => e.onIconChanged)).event; }\n\t@memoize get onAnyInstanceMaximumDimensionsChange() { return this._register(this.createOnInstanceEvent(e => Event.map(e.onMaximumDimensionsChanged, () => e, e.store))).event; }\n\t@memoize get onAnyInstancePrimaryStatusChange() { return this._register(this.createOnInstanceEvent(e => Event.map(e.statusList.onDidChangePrimaryStatus, () => e, e.store))).event; }\n\t@memoize get onAnyInstanceProcessIdReady() { return this._register(this.createOnInstanceEvent(e => e.onProcessIdReady)).event; }\n\t@memoize get onAnyInstanceSelectionChange() { return this._register(this.createOnInstanceEvent(e => e.onDidChangeSelection)).event; }\n\t@memoize get onAnyInstanceTitleChange() { return this._register(this.createOnInstanceEvent(e => e.onTitleChanged)).event; }\n\n\tconstructor(\n\t\t@IContextKeyService private _contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IInstantiationService private _instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService private _remoteAgentService: IRemoteAgentService,\n\t\t@IViewsService private _viewsService: IViewsService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigService: ITerminalConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t\t@ITerminalEditorService private readonly _terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@ITimerService private readonly _timerService: ITimerService\n\t) {\n\t\tsuper();\n\n\t\t// the below avoids having to poll routinely.\n\t\t// we update detected profiles when an instance is created so that,\n\t\t// for example, we detect if you've installed a pwsh\n\t\tthis._register(this.onDidCreateInstance(() => this._terminalProfileService.refreshAvailableProfiles()));\n\t\tthis._forwardInstanceHostEvents(this._terminalGroupService);\n\t\tthis._forwardInstanceHostEvents(this._terminalEditorService);\n\t\tthis._register(this._terminalGroupService.onDidChangeActiveGroup(this._onDidChangeActiveGroup.fire, this._onDidChangeActiveGroup));\n\t\tthis._register(this._terminalInstanceService.onDidCreateInstance(instance => {\n\t\t\tthis._initInstanceListeners(instance);\n\t\t\tthis._onDidCreateInstance.fire(instance);\n\t\t}));\n\n\t\t// Hide the panel if there are no more instances, provided that VS Code is not shutting\n\t\t// down. When shutting down the panel is locked in place so that it is restored upon next\n\t\t// launch.\n\t\tthis._register(this._terminalGroupService.onDidChangeActiveInstance(instance => {\n\t\t\tif (!instance && !this._isShuttingDown) {\n\t\t\t\tthis._terminalGroupService.hidePanel();\n\t\t\t}\n\t\t\tif (instance?.shellType) {\n\t\t\t\tthis._terminalShellTypeContextKey.set(instance.shellType.toString());\n\t\t\t} else if (!instance || !(instance.shellType)) {\n\t\t\t\tthis._terminalShellTypeContextKey.reset();\n\t\t\t}\n\t\t}));\n\n\t\tthis._handleInstanceContextKeys();\n\t\tthis._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);\n\t\tthis._processSupportContextKey = TerminalContextKeys.processSupported.bindTo(this._contextKeyService);\n\t\tthis._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null);\n\t\tthis._terminalHasBeenCreated = TerminalContextKeys.terminalHasBeenCreated.bindTo(this._contextKeyService);\n\t\tthis._terminalCountContextKey = TerminalContextKeys.count.bindTo(this._contextKeyService);\n\t\tthis._terminalEditorActive = TerminalContextKeys.terminalEditorActive.bindTo(this._contextKeyService);\n\n\t\tthis._register(this.onDidChangeActiveInstance(instance => {\n\t\t\tthis._terminalEditorActive.set(!!instance?.target && instance.target === TerminalLocation.Editor);\n\t\t}));\n\n\t\tthis._register(_lifecycleService.onBeforeShutdown(async e => e.veto(this._onBeforeShutdown(e.reason), 'veto.terminal')));\n\t\tthis._register(_lifecycleService.onWillShutdown(e => this._onWillShutdown(e)));\n\n\t\tthis._initializePrimaryBackend();\n\n\t\t// Create async as the class depends on `this`\n\t\ttimeout(0).then(() => this._register(this._instantiationService.createInstance(TerminalEditorStyle, mainWindow.document.head)));\n\t}\n\n\tasync showProfileQuickPick(type: 'setDefault' | 'createInstance', cwd?: string | URI): Promise<ITerminalInstance | undefined> {\n\t\tconst quickPick = this._instantiationService.createInstance(TerminalProfileQuickpick);\n\t\tconst result = await quickPick.showAndGetResult(type);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof result === 'string') {\n\t\t\treturn;\n\t\t}\n\t\tconst keyMods: IKeyMods | undefined = result.keyMods;\n\t\tif (type === 'createInstance') {\n\t\t\tconst activeInstance = this.getDefaultInstanceHost().activeInstance;\n\t\t\tlet instance;\n\n\t\t\tif (result.config && 'id' in result?.config) {\n\t\t\t\tawait this.createContributedTerminalProfile(result.config.extensionIdentifier, result.config.id, {\n\t\t\t\t\ticon: result.config.options?.icon,\n\t\t\t\t\tcolor: result.config.options?.color,\n\t\t\t\t\tlocation: !!(keyMods?.alt && activeInstance) ? { splitActiveTerminal: true } : this.defaultLocation\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} else if (result.config && 'profileName' in result.config) {\n\t\t\t\tif (keyMods?.alt && activeInstance) {\n\t\t\t\t\t// create split, only valid if there's an active instance\n\t\t\t\t\tinstance = await this.createTerminal({ location: { parentTerminal: activeInstance }, config: result.config, cwd });\n\t\t\t\t} else {\n\t\t\t\t\tinstance = await this.createTerminal({ location: this.defaultLocation, config: result.config, cwd });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (instance && this.defaultLocation !== TerminalLocation.Editor) {\n\t\t\t\tthis._terminalGroupService.showPanel(true);\n\t\t\t\tthis.setActiveInstance(instance);\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _initializePrimaryBackend() {\n\t\tmark('code/terminal/willGetTerminalBackend');\n\t\tthis._primaryBackend = await this._terminalInstanceService.getBackend(this._environmentService.remoteAuthority);\n\t\tmark('code/terminal/didGetTerminalBackend');\n\t\tconst enableTerminalReconnection = this._terminalConfigurationService.config.enablePersistentSessions;\n\n\t\t// Connect to the extension host if it's there, set the connection state to connected when\n\t\t// it's done. This should happen even when there is no extension host.\n\t\tthis._connectionState = TerminalConnectionState.Connecting;\n\n\t\tconst isPersistentRemote = !!this._environmentService.remoteAuthority && enableTerminalReconnection;\n\n\t\tif (this._primaryBackend) {\n\t\t\tthis._register(this._primaryBackend.onDidRequestDetach(async (e) => {\n\t\t\t\tconst instanceToDetach = this.getInstanceFromResource(getTerminalUri(e.workspaceId, e.instanceId));\n\t\t\t\tif (instanceToDetach) {\n\t\t\t\t\tconst persistentProcessId = instanceToDetach?.persistentProcessId;\n\t\t\t\t\tif (persistentProcessId && !instanceToDetach.shellLaunchConfig.isFeatureTerminal && !instanceToDetach.shellLaunchConfig.customPtyImplementation) {\n\t\t\t\t\t\tif (instanceToDetach.target === TerminalLocation.Editor) {\n\t\t\t\t\t\t\tthis._terminalEditorService.detachInstance(instanceToDetach);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._terminalGroupService.getGroupForInstance(instanceToDetach)?.removeInstance(instanceToDetach);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait instanceToDetach.detachProcessAndDispose(TerminalExitReason.User);\n\t\t\t\t\t\tawait this._primaryBackend?.acceptDetachInstanceReply(e.requestId, persistentProcessId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// will get rejected without a persistentProcessId to attach to\n\t\t\t\t\t\tawait this._primaryBackend?.acceptDetachInstanceReply(e.requestId, undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tmark('code/terminal/willReconnect');\n\t\tlet reconnectedPromise: Promise<any>;\n\t\tif (isPersistentRemote) {\n\t\t\treconnectedPromise = this._reconnectToRemoteTerminals();\n\t\t} else if (enableTerminalReconnection) {\n\t\t\treconnectedPromise = this._reconnectToLocalTerminals();\n\t\t} else {\n\t\t\treconnectedPromise = Promise.resolve();\n\t\t}\n\t\treconnectedPromise.then(async () => {\n\t\t\tthis._setConnected();\n\t\t\tmark('code/terminal/didReconnect');\n\t\t\tmark('code/terminal/willReplay');\n\t\t\tconst instances = await this._reconnectedTerminalGroups?.then(groups => groups.map(e => e.terminalInstances).flat()) ?? [];\n\t\t\tawait Promise.all(instances.map(e => new Promise<void>(r => Event.once(e.onProcessReplayComplete)(r))));\n\t\t\tmark('code/terminal/didReplay');\n\t\t\tmark('code/terminal/willGetPerformanceMarks');\n\t\t\tawait Promise.all(Array.from(this._terminalInstanceService.getRegisteredBackends()).map(async backend => {\n\t\t\t\tthis._timerService.setPerformanceMarks(backend.remoteAuthority === undefined ? 'localPtyHost' : 'remotePtyHost', await backend.getPerformanceMarks());\n\t\t\t\tbackend.setReady();\n\t\t\t}));\n\t\t\tmark('code/terminal/didGetPerformanceMarks');\n\t\t\tthis._whenConnected.complete();\n\t\t});\n\t}\n\n\tgetPrimaryBackend(): ITerminalBackend | undefined {\n\t\treturn this._primaryBackend;\n\t}\n\n\tprivate _forwardInstanceHostEvents(host: ITerminalInstanceHost) {\n\t\tthis._register(host.onDidChangeInstances(this._onDidChangeInstances.fire, this._onDidChangeInstances));\n\t\tthis._register(host.onDidDisposeInstance(this._onDidDisposeInstance.fire, this._onDidDisposeInstance));\n\t\tthis._register(host.onDidChangeActiveInstance(instance => this._evaluateActiveInstance(host, instance)));\n\t\tthis._register(host.onDidFocusInstance(instance => {\n\t\t\tthis._onDidFocusInstance.fire(instance);\n\t\t\tthis._evaluateActiveInstance(host, instance);\n\t\t}));\n\t\tthis._register(host.onDidChangeInstanceCapability((instance) => {\n\t\t\tthis._onDidChangeInstanceCapability.fire(instance);\n\t\t}));\n\t\tthis._hostActiveTerminals.set(host, undefined);\n\t}\n\n\tprivate _evaluateActiveInstance(host: ITerminalInstanceHost, instance: ITerminalInstance | undefined) {\n\t\t// Track the latest active terminal for each host so that when one becomes undefined, the\n\t\t// TerminalService's active terminal is set to the last active terminal from the other host.\n\t\t// This means if the last terminal editor is closed such that it becomes undefined, the last\n\t\t// active group's terminal will be used as the active terminal if available.\n\t\tthis._hostActiveTerminals.set(host, instance);\n\t\tif (instance === undefined) {\n\t\t\tfor (const active of this._hostActiveTerminals.values()) {\n\t\t\t\tif (active) {\n\t\t\t\t\tinstance = active;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._activeInstance = instance;\n\t\tthis._onDidChangeActiveInstance.fire(instance);\n\t}\n\n\tsetActiveInstance(value: ITerminalInstance) {\n\t\t// If this was a hideFromUser terminal created by the API this was triggered by show,\n\t\t// in which case we need to create the terminal group\n\t\tif (value.shellLaunchConfig.hideFromUser) {\n\t\t\tthis._showBackgroundTerminal(value);\n\t\t}\n\t\tif (value.target === TerminalLocation.Editor) {\n\t\t\tthis._terminalEditorService.setActiveInstance(value);\n\t\t} else {\n\t\t\tthis._terminalGroupService.setActiveInstance(value);\n\t\t}\n\t}\n\n\tasync focusInstance(instance: ITerminalInstance): Promise<void> {\n\t\tif (instance.target === TerminalLocation.Editor) {\n\t\t\treturn this._terminalEditorService.focusInstance(instance);\n\t\t}\n\t\treturn this._terminalGroupService.focusInstance(instance);\n\t}\n\n\tasync focusActiveInstance(): Promise<void> {\n\t\tif (!this._activeInstance) {\n\t\t\treturn;\n\t\t}\n\t\treturn this.focusInstance(this._activeInstance);\n\t}\n\n\tasync createContributedTerminalProfile(extensionIdentifier: string, id: string, options: ICreateContributedTerminalProfileOptions): Promise<void> {\n\t\tawait this._extensionService.activateByEvent(`onTerminalProfile:${id}`);\n\n\t\tconst profileProvider = this._terminalProfileService.getContributedProfileProvider(extensionIdentifier, id);\n\t\tif (!profileProvider) {\n\t\t\tthis._notificationService.error(`No terminal profile provider registered for id \"${id}\"`);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait profileProvider.createContributedTerminalProfile(options);\n\t\t\tthis._terminalGroupService.setActiveInstanceByIndex(this._terminalGroupService.instances.length - 1);\n\t\t\tawait this._terminalGroupService.activeInstance?.focusWhenReady();\n\t\t} catch (e) {\n\t\t\tthis._notificationService.error(e.message);\n\t\t}\n\t}\n\n\tasync safeDisposeTerminal(instance: ITerminalInstance): Promise<void> {\n\t\t// Confirm on kill in the editor is handled by the editor input\n\t\tif (instance.target !== TerminalLocation.Editor &&\n\t\t\tinstance.hasChildProcesses &&\n\t\t\t(this._terminalConfigurationService.config.confirmOnKill === 'panel' || this._terminalConfigurationService.config.confirmOnKill === 'always')) {\n\n\t\t\tconst veto = await this._showTerminalCloseConfirmation(true);\n\t\t\tif (veto) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\treturn new Promise<void>(r => {\n\t\t\tEvent.once(instance.onExit)(() => r());\n\t\t\tinstance.dispose(TerminalExitReason.User);\n\t\t});\n\t}\n\n\tprivate _setConnected() {\n\t\tthis._connectionState = TerminalConnectionState.Connected;\n\t\tthis._onDidChangeConnectionState.fire();\n\t\tthis._logService.trace('Pty host ready');\n\t}\n\n\tprivate async _reconnectToRemoteTerminals(): Promise<void> {\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tif (!remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\t\tconst backend = await this._terminalInstanceService.getBackend(remoteAuthority);\n\t\tif (!backend) {\n\t\t\treturn;\n\t\t}\n\t\tmark('code/terminal/willGetTerminalLayoutInfo');\n\t\tconst layoutInfo = await backend.getTerminalLayoutInfo();\n\t\tmark('code/terminal/didGetTerminalLayoutInfo');\n\t\tbackend.reduceConnectionGraceTime();\n\t\tmark('code/terminal/willRecreateTerminalGroups');\n\t\tawait this._recreateTerminalGroups(layoutInfo);\n\t\tmark('code/terminal/didRecreateTerminalGroups');\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update remote when terminals are changed\n\t\tthis._attachProcessLayoutListeners();\n\n\t\tthis._logService.trace('Reconnected to remote terminals');\n\t}\n\n\tprivate async _reconnectToLocalTerminals(): Promise<void> {\n\t\tconst localBackend = await this._terminalInstanceService.getBackend();\n\t\tif (!localBackend) {\n\t\t\treturn;\n\t\t}\n\t\tmark('code/terminal/willGetTerminalLayoutInfo');\n\t\tconst layoutInfo = await localBackend.getTerminalLayoutInfo();\n\t\tmark('code/terminal/didGetTerminalLayoutInfo');\n\t\tif (layoutInfo && layoutInfo.tabs.length > 0) {\n\t\t\tmark('code/terminal/willRecreateTerminalGroups');\n\t\t\tthis._reconnectedTerminalGroups = this._recreateTerminalGroups(layoutInfo);\n\t\t\tmark('code/terminal/didRecreateTerminalGroups');\n\t\t}\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update local state when terminals are changed\n\t\tthis._attachProcessLayoutListeners();\n\n\t\tthis._logService.trace('Reconnected to local terminals');\n\t}\n\n\tprivate _recreateTerminalGroups(layoutInfo?: ITerminalsLayoutInfo): Promise<ITerminalGroup[]> {\n\t\tconst groupPromises: Promise<ITerminalGroup | undefined>[] = [];\n\t\tlet activeGroup: Promise<ITerminalGroup | undefined> | undefined;\n\t\tif (layoutInfo) {\n\t\t\tfor (const tabLayout of layoutInfo.tabs) {\n\t\t\t\tconst terminalLayouts = tabLayout.terminals.filter(t => t.terminal && t.terminal.isOrphan);\n\t\t\t\tif (terminalLayouts.length) {\n\t\t\t\t\tthis._restoredGroupCount += terminalLayouts.length;\n\t\t\t\t\tconst promise = this._recreateTerminalGroup(tabLayout, terminalLayouts);\n\t\t\t\t\tgroupPromises.push(promise);\n\t\t\t\t\tif (tabLayout.isActive) {\n\t\t\t\t\t\tactiveGroup = promise;\n\t\t\t\t\t}\n\t\t\t\t\tconst activeInstance = this.instances.find(t => t.shellLaunchConfig.attachPersistentProcess?.id === tabLayout.activePersistentProcessId);\n\t\t\t\t\tif (activeInstance) {\n\t\t\t\t\t\tthis.setActiveInstance(activeInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (layoutInfo.tabs.length) {\n\t\t\t\tactiveGroup?.then(group => this._terminalGroupService.activeGroup = group);\n\t\t\t}\n\t\t}\n\t\treturn Promise.all(groupPromises).then(result => result.filter(e => !!e) as ITerminalGroup[]);\n\t}\n\n\tprivate async _recreateTerminalGroup(tabLayout: IRawTerminalTabLayoutInfo<IPtyHostAttachTarget | null>, terminalLayouts: IRawTerminalInstanceLayoutInfo<IPtyHostAttachTarget | null>[]): Promise<ITerminalGroup | undefined> {\n\t\tlet lastInstance: Promise<ITerminalInstance> | undefined;\n\t\tfor (const terminalLayout of terminalLayouts) {\n\t\t\tconst attachPersistentProcess = terminalLayout.terminal!;\n\t\t\tif (this._lifecycleService.startupKind !== StartupKind.ReloadedWindow && attachPersistentProcess.type === 'Task') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmark(`code/terminal/willRecreateTerminal/${attachPersistentProcess.id}-${attachPersistentProcess.pid}`);\n\t\t\tlastInstance = this.createTerminal({\n\t\t\t\tconfig: { attachPersistentProcess },\n\t\t\t\tlocation: lastInstance ? { parentTerminal: lastInstance } : TerminalLocation.Panel\n\t\t\t});\n\t\t\tlastInstance.then(() => mark(`code/terminal/didRecreateTerminal/${attachPersistentProcess.id}-${attachPersistentProcess.pid}`));\n\t\t}\n\t\tconst group = lastInstance?.then(instance => {\n\t\t\tconst g = this._terminalGroupService.getGroupForInstance(instance);\n\t\t\tg?.resizePanes(tabLayout.terminals.map(terminal => terminal.relativeSize));\n\t\t\treturn g;\n\t\t});\n\t\treturn group;\n\t}\n\n\tprivate _attachProcessLayoutListeners(): void {\n\t\tthis._register(this.onDidChangeActiveGroup(() => this._saveState()));\n\t\tthis._register(this.onDidChangeActiveInstance(() => this._saveState()));\n\t\tthis._register(this.onDidChangeInstances(() => this._saveState()));\n\t\t// The state must be updated when the terminal is relaunched, otherwise the persistent\n\t\t// terminal ID will be stale and the process will be leaked.\n\t\tthis._register(this.onAnyInstanceProcessIdReady(() => this._saveState()));\n\t\tthis._register(this.onAnyInstanceTitleChange(instance => this._updateTitle(instance)));\n\t\tthis._register(this.onAnyInstanceIconChange(e => this._updateIcon(e.instance, e.userInitiated)));\n\t}\n\n\tprivate _handleInstanceContextKeys(): void {\n\t\tconst terminalIsOpenContext = TerminalContextKeys.isOpen.bindTo(this._contextKeyService);\n\t\tconst updateTerminalContextKeys = () => {\n\t\t\tterminalIsOpenContext.set(this.instances.length > 0);\n\t\t\tthis._terminalCountContextKey.set(this.instances.length);\n\t\t};\n\t\tthis._register(this.onDidChangeInstances(() => updateTerminalContextKeys()));\n\t}\n\n\tasync getActiveOrCreateInstance(options?: { acceptsInput?: boolean }): Promise<ITerminalInstance> {\n\t\tconst activeInstance = this.activeInstance;\n\t\t// No instance, create\n\t\tif (!activeInstance) {\n\t\t\treturn this.createTerminal();\n\t\t}\n\t\t// Active instance, ensure accepts input\n\t\tif (!options?.acceptsInput || activeInstance.xterm?.isStdinDisabled !== true) {\n\t\t\treturn activeInstance;\n\t\t}\n\t\t// Active instance doesn't accept input, create and focus\n\t\tconst instance = await this.createTerminal();\n\t\tthis.setActiveInstance(instance);\n\t\tawait this.revealActiveTerminal();\n\t\treturn instance;\n\t}\n\n\tasync revealTerminal(source: ITerminalInstance, preserveFocus?: boolean): Promise<void> {\n\t\tif (source.target === TerminalLocation.Editor) {\n\t\t\tawait this._terminalEditorService.revealActiveEditor(preserveFocus);\n\t\t} else {\n\t\t\tawait this._terminalGroupService.showPanel();\n\t\t}\n\t}\n\n\tasync revealActiveTerminal(preserveFocus?: boolean): Promise<void> {\n\t\tconst instance = this.activeInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.revealTerminal(instance, preserveFocus);\n\t}\n\n\tsetEditable(instance: ITerminalInstance, data?: IEditableData | null): void {\n\t\tif (!data) {\n\t\t\tthis._editable = undefined;\n\t\t} else {\n\t\t\tthis._editable = { instance: instance, data };\n\t\t}\n\t\tconst pane = this._viewsService.getActiveViewWithId<TerminalViewPane>(TERMINAL_VIEW_ID);\n\t\tconst isEditing = this.isEditable(instance);\n\t\tpane?.terminalTabbedView?.setEditable(isEditing);\n\t}\n\n\tisEditable(instance: ITerminalInstance | undefined): boolean {\n\t\treturn !!this._editable && (this._editable.instance === instance || !instance);\n\t}\n\n\tgetEditableData(instance: ITerminalInstance): IEditableData | undefined {\n\t\treturn this._editable && this._editable.instance === instance ? this._editable.data : undefined;\n\t}\n\n\trequestStartExtensionTerminal(proxy: ITerminalProcessExtHostProxy, cols: number, rows: number): Promise<ITerminalLaunchError | undefined> {\n\t\t// The initial request came from the extension host, no need to wait for it\n\t\treturn new Promise<ITerminalLaunchError | undefined>(callback => {\n\t\t\tthis._onDidRequestStartExtensionTerminal.fire({ proxy, cols, rows, callback });\n\t\t});\n\t}\n\n\tprivate _onBeforeShutdown(reason: ShutdownReason): boolean | Promise<boolean> {\n\t\t// Never veto on web as this would block all windows from being closed. This disables\n\t\t// process revive as we can't handle it on shutdown.\n\t\tif (isWeb) {\n\t\t\tthis._isShuttingDown = true;\n\t\t\treturn false;\n\t\t}\n\t\treturn this._onBeforeShutdownAsync(reason);\n\t}\n\n\tprivate async _onBeforeShutdownAsync(reason: ShutdownReason): Promise<boolean> {\n\t\tif (this.instances.length === 0) {\n\t\t\t// No terminal instances, don't veto\n\t\t\treturn false;\n\t\t}\n\n\t\t// Persist terminal _buffer state_, note that even if this happens the dirty terminal prompt\n\t\t// still shows as that cannot be revived\n\t\ttry {\n\t\t\tthis._shutdownWindowCount = await this._nativeDelegate?.getWindowCount();\n\t\t\tconst shouldReviveProcesses = this._shouldReviveProcesses(reason);\n\t\t\tif (shouldReviveProcesses) {\n\t\t\t\t// Attempt to persist the terminal state but only allow 2000ms as we can't block\n\t\t\t\t// shutdown. This can happen when in a remote workspace but the other side has been\n\t\t\t\t// suspended and is in the process of reconnecting, the message will be put in a\n\t\t\t\t// queue in this case for when the connection is back up and running. Aborting the\n\t\t\t\t// process is preferable in this case.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tthis._primaryBackend?.persistTerminalState(),\n\t\t\t\t\ttimeout(2000)\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Persist terminal _processes_\n\t\t\tconst shouldPersistProcesses = this._terminalConfigurationService.config.enablePersistentSessions && reason === ShutdownReason.RELOAD;\n\t\t\tif (!shouldPersistProcesses) {\n\t\t\t\tconst hasDirtyInstances = (\n\t\t\t\t\t(this._terminalConfigurationService.config.confirmOnExit === 'always' && this.instances.length > 0) ||\n\t\t\t\t\t(this._terminalConfigurationService.config.confirmOnExit === 'hasChildProcesses' && this.instances.some(e => e.hasChildProcesses))\n\t\t\t\t);\n\t\t\t\tif (hasDirtyInstances) {\n\t\t\t\t\treturn this._onBeforeShutdownConfirmation(reason);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: unknown) {\n\t\t\t// Swallow as exceptions should not cause a veto to prevent shutdown\n\t\t\tthis._logService.warn('Exception occurred during terminal shutdown', err);\n\t\t}\n\n\t\tthis._isShuttingDown = true;\n\n\t\treturn false;\n\t}\n\n\tsetNativeDelegate(nativeDelegate: ITerminalServiceNativeDelegate): void {\n\t\tthis._nativeDelegate = nativeDelegate;\n\t}\n\n\tprivate _shouldReviveProcesses(reason: ShutdownReason): boolean {\n\t\tif (!this._terminalConfigurationService.config.enablePersistentSessions) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (this._terminalConfigurationService.config.persistentSessionReviveProcess) {\n\t\t\tcase 'onExit': {\n\t\t\t\t// Allow on close if it's the last window on Windows or Linux\n\t\t\t\tif (reason === ShutdownReason.CLOSE && (this._shutdownWindowCount === 1 && !isMacintosh)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn reason === ShutdownReason.LOAD || reason === ShutdownReason.QUIT;\n\t\t\t}\n\t\t\tcase 'onExitAndWindowClose': return reason !== ShutdownReason.RELOAD;\n\t\t\tdefault: return false;\n\t\t}\n\t}\n\n\tprivate async _onBeforeShutdownConfirmation(reason: ShutdownReason): Promise<boolean> {\n\t\t// veto if configured to show confirmation and the user chose not to exit\n\t\tconst veto = await this._showTerminalCloseConfirmation();\n\t\tif (!veto) {\n\t\t\tthis._isShuttingDown = true;\n\t\t}\n\n\t\treturn veto;\n\t}\n\n\tprivate _onWillShutdown(e: WillShutdownEvent): void {\n\t\t// Don't touch processes if the shutdown was a result of reload as they will be reattached\n\t\tconst shouldPersistTerminals = this._terminalConfigurationService.config.enablePersistentSessions && e.reason === ShutdownReason.RELOAD;\n\n\t\tfor (const instance of [...this._terminalGroupService.instances, ...this._backgroundedTerminalInstances]) {\n\t\t\tif (shouldPersistTerminals && instance.shouldPersist) {\n\t\t\t\tinstance.detachProcessAndDispose(TerminalExitReason.Shutdown);\n\t\t\t} else {\n\t\t\t\tinstance.dispose(TerminalExitReason.Shutdown);\n\t\t\t}\n\t\t}\n\n\t\t// Clear terminal layout info only when not persisting\n\t\tif (!shouldPersistTerminals && !this._shouldReviveProcesses(e.reason)) {\n\t\t\tthis._primaryBackend?.setTerminalLayoutInfo(undefined);\n\t\t}\n\t}\n\n\t@debounce(500)\n\tprivate _saveState(): void {\n\t\t// Avoid saving state when shutting down as that would override process state to be revived\n\t\tif (this._isShuttingDown) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._terminalConfigurationService.config.enablePersistentSessions) {\n\t\t\treturn;\n\t\t}\n\t\tconst tabs = this._terminalGroupService.groups.map(g => g.getLayoutInfo(g === this._terminalGroupService.activeGroup));\n\t\tconst state: ITerminalsLayoutInfoById = { tabs };\n\t\tthis._primaryBackend?.setTerminalLayoutInfo(state);\n\t}\n\n\t@debounce(500)\n\tprivate _updateTitle(instance: ITerminalInstance | undefined): void {\n\t\tif (!this._terminalConfigurationService.config.enablePersistentSessions || !instance || !instance.persistentProcessId || !instance.title || instance.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (instance.staticTitle) {\n\t\t\tthis._primaryBackend?.updateTitle(instance.persistentProcessId, instance.staticTitle, TitleEventSource.Api);\n\t\t} else {\n\t\t\tthis._primaryBackend?.updateTitle(instance.persistentProcessId, instance.title, instance.titleSource);\n\t\t}\n\t}\n\n\t@debounce(500)\n\tprivate _updateIcon(instance: ITerminalInstance, userInitiated: boolean): void {\n\t\tif (!this._terminalConfigurationService.config.enablePersistentSessions || !instance || !instance.persistentProcessId || !instance.icon || instance.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._primaryBackend?.updateIcon(instance.persistentProcessId, userInitiated, instance.icon, instance.color);\n\t}\n\n\trefreshActiveGroup(): void {\n\t\tthis._onDidChangeActiveGroup.fire(this._terminalGroupService.activeGroup);\n\t}\n\n\tgetInstanceFromId(terminalId: number): ITerminalInstance | undefined {\n\t\tlet bgIndex = -1;\n\t\tthis._backgroundedTerminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tbgIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (bgIndex !== -1) {\n\t\t\treturn this._backgroundedTerminalInstances[bgIndex];\n\t\t}\n\t\ttry {\n\t\t\treturn this.instances[this._getIndexFromId(terminalId)];\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tgetInstanceFromIndex(terminalIndex: number): ITerminalInstance {\n\t\treturn this.instances[terminalIndex];\n\t}\n\n\tgetInstanceFromResource(resource: URI | undefined): ITerminalInstance | undefined {\n\t\treturn getInstanceFromResource(this.instances, resource);\n\t}\n\n\tisAttachedToTerminal(remoteTerm: IRemoteTerminalAttachTarget): boolean {\n\t\treturn this.instances.some(term => term.processId === remoteTerm.pid);\n\t}\n\n\tmoveToEditor(source: ITerminalInstance, group?: GroupIdentifier | SIDE_GROUP_TYPE | ACTIVE_GROUP_TYPE | AUX_WINDOW_GROUP_TYPE): void {\n\t\tif (source.target === TerminalLocation.Editor) {\n\t\t\treturn;\n\t\t}\n\t\tconst sourceGroup = this._terminalGroupService.getGroupForInstance(source);\n\t\tif (!sourceGroup) {\n\t\t\treturn;\n\t\t}\n\t\tsourceGroup.removeInstance(source);\n\t\tthis._terminalEditorService.openEditor(source, group ? { viewColumn: group } : undefined);\n\n\t}\n\n\tmoveIntoNewEditor(source: ITerminalInstance): void {\n\t\tthis.moveToEditor(source, AUX_WINDOW_GROUP);\n\t}\n\n\tasync moveToTerminalView(source?: ITerminalInstance | URI, target?: ITerminalInstance, side?: 'before' | 'after'): Promise<void> {\n\t\tif (URI.isUri(source)) {\n\t\t\tsource = this.getInstanceFromResource(source);\n\t\t}\n\n\t\tif (!source) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._terminalEditorService.detachInstance(source);\n\n\t\tif (source.target !== TerminalLocation.Editor) {\n\t\t\tawait this._terminalGroupService.showPanel(true);\n\t\t\treturn;\n\t\t}\n\t\tsource.target = TerminalLocation.Panel;\n\n\t\tlet group: ITerminalGroup | undefined;\n\t\tif (target) {\n\t\t\tgroup = this._terminalGroupService.getGroupForInstance(target);\n\t\t}\n\n\t\tif (!group) {\n\t\t\tgroup = this._terminalGroupService.createGroup();\n\t\t}\n\n\t\tgroup.addInstance(source);\n\t\tthis.setActiveInstance(source);\n\t\tawait this._terminalGroupService.showPanel(true);\n\n\t\tif (target && side) {\n\t\t\tconst index = group.terminalInstances.indexOf(target) + (side === 'after' ? 1 : 0);\n\t\t\tgroup.moveInstance(source, index, side);\n\t\t}\n\n\t\t// Fire events\n\t\tthis._onDidChangeInstances.fire();\n\t\tthis._onDidChangeActiveGroup.fire(this._terminalGroupService.activeGroup);\n\t}\n\n\tprotected _initInstanceListeners(instance: ITerminalInstance): void {\n\t\tconst instanceDisposables: IDisposable[] = [\n\t\t\tinstance.onDimensionsChanged(() => {\n\t\t\t\tthis._onDidChangeInstanceDimensions.fire(instance);\n\t\t\t\tif (this._terminalConfigurationService.config.enablePersistentSessions && this.isProcessSupportRegistered) {\n\t\t\t\t\tthis._saveState();\n\t\t\t\t}\n\t\t\t}),\n\t\t\tinstance.onDidFocus(this._onDidChangeActiveInstance.fire, this._onDidChangeActiveInstance),\n\t\t\tinstance.onRequestAddInstanceToGroup(async e => await this._addInstanceToGroup(instance, e))\n\t\t];\n\t\tinstance.onDisposed(() => dispose(instanceDisposables));\n\t}\n\n\tprivate async _addInstanceToGroup(instance: ITerminalInstance, e: IRequestAddInstanceToGroupEvent): Promise<void> {\n\t\tconst terminalIdentifier = parseTerminalUri(e.uri);\n\t\tif (terminalIdentifier.instanceId === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet sourceInstance: ITerminalInstance | undefined = this.getInstanceFromResource(e.uri);\n\n\t\t// Terminal from a different window\n\t\tif (!sourceInstance) {\n\t\t\tconst attachPersistentProcess = await this._primaryBackend?.requestDetachInstance(terminalIdentifier.workspaceId, terminalIdentifier.instanceId);\n\t\t\tif (attachPersistentProcess) {\n\t\t\t\tsourceInstance = await this.createTerminal({ config: { attachPersistentProcess }, resource: e.uri });\n\t\t\t\tthis._terminalGroupService.moveInstance(sourceInstance, instance, e.side);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// View terminals\n\t\tsourceInstance = this._terminalGroupService.getInstanceFromResource(e.uri);\n\t\tif (sourceInstance) {\n\t\t\tthis._terminalGroupService.moveInstance(sourceInstance, instance, e.side);\n\t\t\treturn;\n\t\t}\n\n\t\t// Terminal editors\n\t\tsourceInstance = this._terminalEditorService.getInstanceFromResource(e.uri);\n\t\tif (sourceInstance) {\n\t\t\tthis.moveToTerminalView(sourceInstance, instance, e.side);\n\t\t\treturn;\n\t\t}\n\t\treturn;\n\t}\n\n\tregisterProcessSupport(isSupported: boolean): void {\n\t\tif (!isSupported) {\n\t\t\treturn;\n\t\t}\n\t\tthis._processSupportContextKey.set(isSupported);\n\t\tthis._onDidRegisterProcessSupport.fire();\n\t}\n\n\t// TODO: Remove this, it should live in group/editor servioce\n\tprivate _getIndexFromId(terminalId: number): number {\n\t\tlet terminalIndex = -1;\n\t\tthis.instances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tterminalIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (terminalIndex === -1) {\n\t\t\tthrow new Error(`Terminal with ID ${terminalId} does not exist (has it already been disposed?)`);\n\t\t}\n\t\treturn terminalIndex;\n\t}\n\n\tprotected async _showTerminalCloseConfirmation(singleTerminal?: boolean): Promise<boolean> {\n\t\tlet message: string;\n\t\tif (this.instances.length === 1 || singleTerminal) {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationSingular', \"Do you want to terminate the active terminal session?\");\n\t\t} else {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationPlural', \"Do you want to terminate the {0} active terminal sessions?\", this.instances.length);\n\t\t}\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: 'warning',\n\t\t\tmessage,\n\t\t\tprimaryButton: nls.localize({ key: 'terminate', comment: ['&& denotes a mnemonic'] }, \"&&Terminate\")\n\t\t});\n\t\treturn !confirmed;\n\t}\n\n\tgetDefaultInstanceHost(): ITerminalInstanceHost {\n\t\tif (this.defaultLocation === TerminalLocation.Editor) {\n\t\t\treturn this._terminalEditorService;\n\t\t}\n\t\treturn this._terminalGroupService;\n\t}\n\n\tasync getInstanceHost(location: ITerminalLocationOptions | undefined): Promise<ITerminalInstanceHost> {\n\t\tif (location) {\n\t\t\tif (location === TerminalLocation.Editor) {\n\t\t\t\treturn this._terminalEditorService;\n\t\t\t} else if (typeof location === 'object') {\n\t\t\t\tif ('viewColumn' in location) {\n\t\t\t\t\treturn this._terminalEditorService;\n\t\t\t\t} else if ('parentTerminal' in location) {\n\t\t\t\t\treturn (await location.parentTerminal).target === TerminalLocation.Editor ? this._terminalEditorService : this._terminalGroupService;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this._terminalGroupService;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tasync createTerminal(options?: ICreateTerminalOptions): Promise<ITerminalInstance> {\n\t\t// Await the initialization of available profiles as long as this is not a pty terminal or a\n\t\t// local terminal in a remote workspace as profile won't be used in those cases and these\n\t\t// terminals need to be launched before remote connections are established.\n\t\tif (this._terminalProfileService.availableProfiles.length === 0) {\n\t\t\tconst isPtyTerminal = options?.config && 'customPtyImplementation' in options.config;\n\t\t\tconst isLocalInRemoteTerminal = this._remoteAgentService.getConnection() && URI.isUri(options?.cwd) && options?.cwd.scheme === Schemas.vscodeFileResource;\n\t\t\tif (!isPtyTerminal && !isLocalInRemoteTerminal) {\n\t\t\t\tif (this._connectionState === TerminalConnectionState.Connecting) {\n\t\t\t\t\tmark(`code/terminal/willGetProfiles`);\n\t\t\t\t}\n\t\t\t\tawait this._terminalProfileService.profilesReady;\n\t\t\t\tif (this._connectionState === TerminalConnectionState.Connecting) {\n\t\t\t\t\tmark(`code/terminal/didGetProfiles`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst config = options?.config || this._terminalProfileService.getDefaultProfile();\n\t\tconst shellLaunchConfig = config && 'extensionIdentifier' in config ? {} : this._terminalInstanceService.convertProfileToShellLaunchConfig(config || {});\n\n\t\t// Get the contributed profile if it was provided\n\t\tconst contributedProfile = options?.skipContributedProfileCheck ? undefined : await this._getContributedProfile(shellLaunchConfig, options);\n\n\t\tconst splitActiveTerminal = typeof options?.location === 'object' && 'splitActiveTerminal' in options.location ? options.location.splitActiveTerminal : typeof options?.location === 'object' ? 'parentTerminal' in options.location : false;\n\n\t\tawait this._resolveCwd(shellLaunchConfig, splitActiveTerminal, options);\n\n\t\t// Launch the contributed profile\n\t\tif (contributedProfile) {\n\t\t\tconst resolvedLocation = await this.resolveLocation(options?.location);\n\t\t\tlet location: TerminalLocation | { viewColumn: number; preserveState?: boolean } | { splitActiveTerminal: boolean } | undefined;\n\t\t\tif (splitActiveTerminal) {\n\t\t\t\tlocation = resolvedLocation === TerminalLocation.Editor ? { viewColumn: SIDE_GROUP } : { splitActiveTerminal: true };\n\t\t\t} else {\n\t\t\t\tlocation = typeof options?.location === 'object' && 'viewColumn' in options.location ? options.location : resolvedLocation;\n\t\t\t}\n\t\t\tawait this.createContributedTerminalProfile(contributedProfile.extensionIdentifier, contributedProfile.id, {\n\t\t\t\ticon: contributedProfile.icon,\n\t\t\t\tcolor: contributedProfile.color,\n\t\t\t\tlocation,\n\t\t\t\tcwd: shellLaunchConfig.cwd,\n\t\t\t});\n\t\t\tconst instanceHost = resolvedLocation === TerminalLocation.Editor ? this._terminalEditorService : this._terminalGroupService;\n\t\t\tconst instance = instanceHost.instances[instanceHost.instances.length - 1];\n\t\t\tawait instance?.focusWhenReady();\n\t\t\tthis._terminalHasBeenCreated.set(true);\n\t\t\treturn instance;\n\t\t}\n\n\t\tif (!shellLaunchConfig.customPtyImplementation && !this.isProcessSupportRegistered) {\n\t\t\tthrow new Error('Could not create terminal when process support is not registered');\n\t\t}\n\t\tif (shellLaunchConfig.hideFromUser) {\n\t\t\tconst instance = this._terminalInstanceService.createInstance(shellLaunchConfig, TerminalLocation.Panel);\n\t\t\tthis._backgroundedTerminalInstances.push(instance);\n\t\t\tthis._backgroundedTerminalDisposables.set(instance.instanceId, [\n\t\t\t\tinstance.onDisposed(this._onDidDisposeInstance.fire, this._onDidDisposeInstance)\n\t\t\t]);\n\t\t\tthis._terminalHasBeenCreated.set(true);\n\t\t\treturn instance;\n\t\t}\n\n\t\tthis._evaluateLocalCwd(shellLaunchConfig);\n\t\tconst location = await this.resolveLocation(options?.location) || this.defaultLocation;\n\t\tconst parent = await this._getSplitParent(options?.location);\n\t\tthis._terminalHasBeenCreated.set(true);\n\t\tif (parent) {\n\t\t\treturn this._splitTerminal(shellLaunchConfig, location, parent);\n\t\t}\n\t\treturn this._createTerminal(shellLaunchConfig, location, options);\n\t}\n\n\tprivate async _getContributedProfile(shellLaunchConfig: IShellLaunchConfig, options?: ICreateTerminalOptions): Promise<IExtensionTerminalProfile | undefined> {\n\t\tif (options?.config && 'extensionIdentifier' in options.config) {\n\t\t\treturn options.config;\n\t\t}\n\n\t\treturn this._terminalProfileService.getContributedDefaultProfile(shellLaunchConfig);\n\t}\n\n\tasync createDetachedTerminal(options: IDetachedXTermOptions): Promise<IDetachedTerminalInstance> {\n\t\tconst ctor = await TerminalInstance.getXtermConstructor(this._keybindingService, this._contextKeyService);\n\t\tconst xterm = this._instantiationService.createInstance(\n\t\t\tXtermTerminal,\n\t\t\tctor,\n\t\t\toptions.cols,\n\t\t\toptions.rows,\n\t\t\toptions.colorProvider,\n\t\t\toptions.capabilities || new TerminalCapabilityStore(),\n\t\t\t'',\n\t\t\tfalse,\n\t\t);\n\n\t\tif (options.readonly) {\n\t\t\txterm.raw.attachCustomKeyEventHandler(() => false);\n\t\t}\n\n\t\tconst instance = new DetachedTerminal(xterm, options, this._instantiationService);\n\t\tthis._detachedXterms.add(instance);\n\t\tconst l = xterm.onDidDispose(() => {\n\t\t\tthis._detachedXterms.delete(instance);\n\t\t\tl.dispose();\n\t\t});\n\n\t\treturn instance;\n\t}\n\n\tprivate async _resolveCwd(shellLaunchConfig: IShellLaunchConfig, splitActiveTerminal: boolean, options?: ICreateTerminalOptions): Promise<void> {\n\t\tconst cwd = shellLaunchConfig.cwd;\n\t\tif (!cwd) {\n\t\t\tif (options?.cwd) {\n\t\t\t\tshellLaunchConfig.cwd = options.cwd;\n\t\t\t} else if (splitActiveTerminal && options?.location) {\n\t\t\t\tlet parent = this.activeInstance;\n\t\t\t\tif (typeof options.location === 'object' && 'parentTerminal' in options.location) {\n\t\t\t\t\tparent = await options.location.parentTerminal;\n\t\t\t\t}\n\t\t\t\tif (!parent) {\n\t\t\t\t\tthrow new Error('Cannot split without an active instance');\n\t\t\t\t}\n\t\t\t\tshellLaunchConfig.cwd = await getCwdForSplit(parent, this._workspaceContextService.getWorkspace().folders, this._commandService, this._terminalConfigService);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _splitTerminal(shellLaunchConfig: IShellLaunchConfig, location: TerminalLocation, parent: ITerminalInstance): ITerminalInstance {\n\t\tlet instance;\n\t\t// Use the URI from the base instance if it exists, this will correctly split local terminals\n\t\tif (typeof shellLaunchConfig.cwd !== 'object' && typeof parent.shellLaunchConfig.cwd === 'object') {\n\t\t\tshellLaunchConfig.cwd = URI.from({\n\t\t\t\tscheme: parent.shellLaunchConfig.cwd.scheme,\n\t\t\t\tauthority: parent.shellLaunchConfig.cwd.authority,\n\t\t\t\tpath: shellLaunchConfig.cwd || parent.shellLaunchConfig.cwd.path\n\t\t\t});\n\t\t}\n\t\tif (location === TerminalLocation.Editor || parent.target === TerminalLocation.Editor) {\n\t\t\tinstance = this._terminalEditorService.splitInstance(parent, shellLaunchConfig);\n\t\t} else {\n\t\t\tconst group = this._terminalGroupService.getGroupForInstance(parent);\n\t\t\tif (!group) {\n\t\t\t\tthrow new Error(`Cannot split a terminal without a group (instanceId: ${parent.instanceId}, title: ${parent.title})`);\n\t\t\t}\n\t\t\tshellLaunchConfig.parentTerminalId = parent.instanceId;\n\t\t\tinstance = group.split(shellLaunchConfig);\n\t\t}\n\t\tthis._addToReconnected(instance);\n\t\treturn instance;\n\t}\n\n\tprivate _addToReconnected(instance: ITerminalInstance): void {\n\t\tif (!instance.reconnectionProperties?.ownerId) {\n\t\t\treturn;\n\t\t}\n\t\tconst reconnectedTerminals = this._reconnectedTerminals.get(instance.reconnectionProperties.ownerId);\n\t\tif (reconnectedTerminals) {\n\t\t\treconnectedTerminals.push(instance);\n\t\t} else {\n\t\t\tthis._reconnectedTerminals.set(instance.reconnectionProperties.ownerId, [instance]);\n\t\t}\n\t}\n\n\tprivate _createTerminal(shellLaunchConfig: IShellLaunchConfig, location: TerminalLocation, options?: ICreateTerminalOptions): ITerminalInstance {\n\t\tlet instance;\n\t\tconst editorOptions = this._getEditorOptions(options?.location);\n\t\tif (location === TerminalLocation.Editor) {\n\t\t\tinstance = this._terminalInstanceService.createInstance(shellLaunchConfig, TerminalLocation.Editor);\n\t\t\tthis._terminalEditorService.openEditor(instance, editorOptions);\n\t\t} else {\n\t\t\t// TODO: pass resource?\n\t\t\tconst group = this._terminalGroupService.createGroup(shellLaunchConfig);\n\t\t\tinstance = group.terminalInstances[0];\n\t\t}\n\t\tthis._addToReconnected(instance);\n\t\treturn instance;\n\t}\n\n\tasync resolveLocation(location?: ITerminalLocationOptions): Promise<TerminalLocation | undefined> {\n\t\tif (location && typeof location === 'object') {\n\t\t\tif ('parentTerminal' in location) {\n\t\t\t\t// since we don't set the target unless it's an editor terminal, this is necessary\n\t\t\t\tconst parentTerminal = await location.parentTerminal;\n\t\t\t\treturn !parentTerminal.target ? TerminalLocation.Panel : parentTerminal.target;\n\t\t\t} else if ('viewColumn' in location) {\n\t\t\t\treturn TerminalLocation.Editor;\n\t\t\t} else if ('splitActiveTerminal' in location) {\n\t\t\t\t// since we don't set the target unless it's an editor terminal, this is necessary\n\t\t\t\treturn !this._activeInstance?.target ? TerminalLocation.Panel : this._activeInstance?.target;\n\t\t\t}\n\t\t}\n\t\treturn location;\n\t}\n\n\tprivate async _getSplitParent(location?: ITerminalLocationOptions): Promise<ITerminalInstance | undefined> {\n\t\tif (location && typeof location === 'object' && 'parentTerminal' in location) {\n\t\t\treturn location.parentTerminal;\n\t\t} else if (location && typeof location === 'object' && 'splitActiveTerminal' in location) {\n\t\t\treturn this.activeInstance;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _getEditorOptions(location?: ITerminalLocationOptions): TerminalEditorLocation | undefined {\n\t\tif (location && typeof location === 'object' && 'viewColumn' in location) {\n\t\t\tlocation.viewColumn = columnToEditorGroup(this._editorGroupsService, this._configurationService, location.viewColumn);\n\t\t\treturn location;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _evaluateLocalCwd(shellLaunchConfig: IShellLaunchConfig) {\n\t\t// Add welcome message and title annotation for local terminals launched within remote or\n\t\t// virtual workspaces\n\t\tif (typeof shellLaunchConfig.cwd !== 'string' && shellLaunchConfig.cwd?.scheme === Schemas.file) {\n\t\t\tif (VirtualWorkspaceContext.getValue(this._contextKeyService)) {\n\t\t\t\tshellLaunchConfig.initialText = formatMessageForTerminal(nls.localize('localTerminalVirtualWorkspace', \"This shell is open to a {0}local{1} folder, NOT to the virtual folder\", '\\x1b[3m', '\\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true });\n\t\t\t\tshellLaunchConfig.type = 'Local';\n\t\t\t} else if (this._remoteAgentService.getConnection()) {\n\t\t\t\tshellLaunchConfig.initialText = formatMessageForTerminal(nls.localize('localTerminalRemote', \"This shell is running on your {0}local{1} machine, NOT on the connected remote machine\", '\\x1b[3m', '\\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true });\n\t\t\t\tshellLaunchConfig.type = 'Local';\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _showBackgroundTerminal(instance: ITerminalInstance): void {\n\t\tthis._backgroundedTerminalInstances.splice(this._backgroundedTerminalInstances.indexOf(instance), 1);\n\t\tconst disposables = this._backgroundedTerminalDisposables.get(instance.instanceId);\n\t\tif (disposables) {\n\t\t\tdispose(disposables);\n\t\t}\n\t\tthis._backgroundedTerminalDisposables.delete(instance.instanceId);\n\t\tinstance.shellLaunchConfig.hideFromUser = false;\n\t\tthis._terminalGroupService.createGroup(instance);\n\n\t\t// Make active automatically if it's the first instance\n\t\tif (this.instances.length === 1) {\n\t\t\tthis._terminalGroupService.setActiveInstanceByIndex(0);\n\t\t}\n\n\t\tthis._onDidChangeInstances.fire();\n\t}\n\n\tasync setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): Promise<void> {\n\t\tthis._terminalConfigurationService.setPanelContainer(panelContainer);\n\t\tthis._terminalGroupService.setContainer(terminalContainer);\n\t}\n\n\tgetEditingTerminal(): ITerminalInstance | undefined {\n\t\treturn this._editingTerminal;\n\t}\n\n\tsetEditingTerminal(instance: ITerminalInstance | undefined) {\n\t\tthis._editingTerminal = instance;\n\t}\n\n\tcreateOnInstanceEvent<T>(getEvent: (instance: ITerminalInstance) => Event<T>): DynamicListEventMultiplexer<ITerminalInstance, T> {\n\t\treturn new DynamicListEventMultiplexer(this.instances, this.onDidCreateInstance, this.onDidDisposeInstance, getEvent);\n\t}\n\n\tcreateOnInstanceCapabilityEvent<T extends TerminalCapability, K>(capabilityId: T, getEvent: (capability: ITerminalCapabilityImplMap[T]) => Event<K>): IDynamicListEventMultiplexer<{ instance: ITerminalInstance; data: K }> {\n\t\treturn createInstanceCapabilityEventMultiplexer(this.instances, this.onDidCreateInstance, this.onDidDisposeInstance, capabilityId, getEvent);\n\t}\n}\n\nclass TerminalEditorStyle extends Themable {\n\tprivate _styleElement: HTMLElement;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@IEditorService private readonly _editorService: IEditorService\n\t) {\n\t\tsuper(_themeService);\n\t\tthis._registerListeners();\n\t\tthis._styleElement = dom.createStyleSheet(container);\n\t\tthis._register(toDisposable(() => this._styleElement.remove()));\n\t\tthis.updateStyles();\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tthis._register(this._terminalService.onAnyInstanceIconChange(() => this.updateStyles()));\n\t\tthis._register(this._terminalService.onDidCreateInstance(() => this.updateStyles()));\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => {\n\t\t\tif (this._editorService.activeEditor instanceof TerminalEditorInput) {\n\t\t\t\tthis.updateStyles();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._editorService.onDidCloseEditor(() => {\n\t\t\tif (this._editorService.activeEditor instanceof TerminalEditorInput) {\n\t\t\t\tthis.updateStyles();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._terminalProfileService.onDidChangeAvailableProfiles(() => this.updateStyles()));\n\t}\n\n\toverride updateStyles(): void {\n\t\tsuper.updateStyles();\n\t\tconst colorTheme = this._themeService.getColorTheme();\n\n\t\t// TODO: add a rule collector to avoid duplication\n\t\tlet css = '';\n\n\t\tconst productIconTheme = this._themeService.getProductIconTheme();\n\n\t\t// Add icons\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tconst icon = instance.icon;\n\t\t\tif (!icon) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet uri = undefined;\n\t\t\tif (icon instanceof URI) {\n\t\t\t\turi = icon;\n\t\t\t} else if (icon instanceof Object && 'light' in icon && 'dark' in icon) {\n\t\t\t\turi = colorTheme.type === ColorScheme.LIGHT ? icon.light : icon.dark;\n\t\t\t}\n\t\t\tconst iconClasses = getUriClasses(instance, colorTheme.type);\n\t\t\tif (uri instanceof URI && iconClasses && iconClasses.length > 1) {\n\t\t\t\tcss += (\n\t\t\t\t\t`.monaco-workbench .terminal-tab.${iconClasses[0]}::before` +\n\t\t\t\t\t`{content: ''; background-image: ${dom.asCSSUrl(uri)};}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (ThemeIcon.isThemeIcon(icon)) {\n\t\t\t\tconst iconRegistry = getIconRegistry();\n\t\t\t\tconst iconContribution = iconRegistry.getIcon(icon.id);\n\t\t\t\tif (iconContribution) {\n\t\t\t\t\tconst def = productIconTheme.getIcon(iconContribution);\n\t\t\t\t\tif (def) {\n\t\t\t\t\t\tcss += (\n\t\t\t\t\t\t\t`.monaco-workbench .terminal-tab.codicon-${icon.id}::before` +\n\t\t\t\t\t\t\t`{content: '${def.fontCharacter}' !important; font-family: ${dom.asCSSPropertyValue(def.font?.id ?? 'codicon')} !important;}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add colors\n\t\tconst iconForegroundColor = colorTheme.getColor(iconForeground);\n\t\tif (iconForegroundColor) {\n\t\t\tcss += `.monaco-workbench .show-file-icons .file-icon.terminal-tab::before { color: ${iconForegroundColor}; }`;\n\t\t}\n\n\t\tcss += getColorStyleContent(colorTheme, true);\n\t\tthis._styleElement.textContent = css;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["location"]
}
