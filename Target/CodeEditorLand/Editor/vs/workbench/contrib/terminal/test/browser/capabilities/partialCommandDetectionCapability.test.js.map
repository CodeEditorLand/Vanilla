{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/capabilities/partialCommandDetectionCapability.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IMarker, Terminal } from '@xterm/xterm';\nimport { deepStrictEqual } from 'assert';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { PartialCommandDetectionCapability } from '../../../../../../platform/terminal/common/capabilities/partialCommandDetectionCapability.js';\nimport { writeP } from '../../../browser/terminalTestHelpers.js';\n\nsuite('PartialCommandDetectionCapability', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet xterm: Terminal;\n\tlet capability: PartialCommandDetectionCapability;\n\tlet addEvents: IMarker[];\n\n\tfunction assertCommands(expectedLines: number[]) {\n\t\tdeepStrictEqual(capability.commands.map(e => e.line), expectedLines);\n\t\tdeepStrictEqual(addEvents.map(e => e.line), expectedLines);\n\t}\n\n\tsetup(async () => {\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\n\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true, cols: 80 }) as Terminal);\n\t\tcapability = store.add(new PartialCommandDetectionCapability(xterm));\n\t\taddEvents = [];\n\t\tstore.add(capability.onCommandFinished(e => addEvents.push(e)));\n\t});\n\n\ttest('should not add commands when the cursor position is too close to the left side', async () => {\n\t\tassertCommands([]);\n\t\txterm.input('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n');\n\t\tassertCommands([]);\n\t\tawait writeP(xterm, 'a');\n\t\txterm.input('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n');\n\t\tassertCommands([]);\n\t});\n\n\ttest('should add commands when the cursor position is not too close to the left side', async () => {\n\t\tassertCommands([]);\n\t\tawait writeP(xterm, 'ab');\n\t\txterm.input('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n\\r\\n');\n\t\tassertCommands([0]);\n\t\tawait writeP(xterm, 'cd');\n\t\txterm.input('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n');\n\t\tassertCommands([0, 2]);\n\t});\n});\n"],
  "mappings": ";;AAMA,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,SAAS,+CAA+C;AACxD,SAAS,yCAAyC;AAClD,SAAS,cAAc;AAEvB,MAAM,qCAAqC,MAAM;AAChD,QAAM,QAAQ,wCAAwC;AAEtD,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,WAAS,eAAe,eAAyB;AAChD,oBAAgB,WAAW,SAAS,IAAI,OAAK,EAAE,IAAI,GAAG,aAAa;AACnE,oBAAgB,UAAU,IAAI,OAAK,EAAE,IAAI,GAAG,aAAa;AAAA,EAC1D;AAHS;AAKT,QAAM,YAAY;AACjB,UAAM,gBAAgB,MAAM,oBAAmD,gBAAgB,cAAc,GAAG;AAEhH,YAAQ,MAAM,IAAI,IAAI,aAAa,EAAE,kBAAkB,MAAM,MAAM,GAAG,CAAC,CAAa;AACpF,iBAAa,MAAM,IAAI,IAAI,kCAAkC,KAAK,CAAC;AACnE,gBAAY,CAAC;AACb,UAAM,IAAI,WAAW,kBAAkB,OAAK,UAAU,KAAK,CAAC,CAAC,CAAC;AAAA,EAC/D,CAAC;AAED,OAAK,kFAAkF,YAAY;AAClG,mBAAe,CAAC,CAAC;AACjB,UAAM,MAAM,IAAM;AAClB,UAAM,OAAO,OAAO,MAAM;AAC1B,mBAAe,CAAC,CAAC;AACjB,UAAM,OAAO,OAAO,GAAG;AACvB,UAAM,MAAM,IAAM;AAClB,UAAM,OAAO,OAAO,MAAM;AAC1B,mBAAe,CAAC,CAAC;AAAA,EAClB,CAAC;AAED,OAAK,kFAAkF,YAAY;AAClG,mBAAe,CAAC,CAAC;AACjB,UAAM,OAAO,OAAO,IAAI;AACxB,UAAM,MAAM,IAAM;AAClB,UAAM,OAAO,OAAO,UAAU;AAC9B,mBAAe,CAAC,CAAC,CAAC;AAClB,UAAM,OAAO,OAAO,IAAI;AACxB,UAAM,MAAM,IAAM;AAClB,UAAM,OAAO,OAAO,MAAM;AAC1B,mBAAe,CAAC,GAAG,CAAC,CAAC;AAAA,EACtB,CAAC;AACF,CAAC;",
  "names": []
}
