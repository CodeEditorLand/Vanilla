{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/common/environmentVariableCollection.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual } from 'assert';\nimport { EnvironmentVariableMutatorType } from '../../../../../platform/terminal/common/environmentVariable.js';\nimport { IProcessEnvironment, isWindows } from '../../../../../base/common/platform.js';\nimport { MergedEnvironmentVariableCollection } from '../../../../../platform/terminal/common/environmentVariableCollection.js';\nimport { deserializeEnvironmentDescriptionMap, deserializeEnvironmentVariableCollection } from '../../../../../platform/terminal/common/environmentVariableShared.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('EnvironmentVariable - MergedEnvironmentVariableCollection', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('ctor', () => {\n\t\ttest('Should keep entries that come after a Prepend or Append type mutators', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext4', type: EnvironmentVariableMutatorType.Append, value: 'a4', variable: 'A', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } },\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Prepend, value: 'a3', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'a1', variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('Should remove entries that come after a Replace type mutator', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Replace, value: 'a3', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'a1', variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t], 'The ext4 entry should be removed as it comes after a Replace');\n\t\t});\n\n\t\ttest('Appropriate workspace scoped entries are returned when querying for a particular workspace folder', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, scope: scope1, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, scope: scope2, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(scope2).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext4', type: EnvironmentVariableMutatorType.Append, value: 'a4', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Prepend, value: 'a3', scope: scope2, variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('Workspace scoped entries are not included when looking for global entries', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, scope: scope1, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, scope: scope2, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext4', type: EnvironmentVariableMutatorType.Append, value: 'a4', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('Workspace scoped description entries are properly filtered for each extension', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, scope: scope1, variable: 'A' }]\n\t\t\t\t\t]),\n\t\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap([\n\t\t\t\t\t\t['A-key-scope1', { description: 'ext1 scope1 description', scope: scope1 }],\n\t\t\t\t\t\t['A-key-scope2', { description: 'ext1 scope2 description', scope: scope2 }],\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t]),\n\t\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap([\n\t\t\t\t\t\t['A-key', { description: 'ext2 global description' }],\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, scope: scope2, variable: 'A' }]\n\t\t\t\t\t]),\n\t\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap([\n\t\t\t\t\t\t['A-key', { description: 'ext3 scope2 description', scope: scope2 }],\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getDescriptionMap(scope1).entries()], [\n\t\t\t\t['ext1', 'ext1 scope1 description'],\n\t\t\t]);\n\t\t\tdeepStrictEqual([...merged.getDescriptionMap(undefined).entries()], [\n\t\t\t\t['ext2', 'ext2 global description'],\n\t\t\t]);\n\t\t});\n\t});\n\n\tsuite('applyToProcessEnvironment', () => {\n\t\ttest('should apply the collection to an environment', async () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'foo',\n\t\t\t\tB: 'bar',\n\t\t\t\tC: 'baz'\n\t\t\t};\n\t\t\tawait merged.applyToProcessEnvironment(env, undefined);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'barb',\n\t\t\t\tC: 'cbaz'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply the appropriate workspace scoped entries to an environment', async () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, scope: scope2, variable: 'B' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'foo',\n\t\t\t\tB: 'bar',\n\t\t\t\tC: 'baz'\n\t\t\t};\n\t\t\tawait merged.applyToProcessEnvironment(env, scope1);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'bar', // This is not changed because the scope does not match\n\t\t\t\tC: 'cbaz'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply the collection to environment entries with no values', async () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {};\n\t\t\tawait merged.applyToProcessEnvironment(env, undefined);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'b',\n\t\t\t\tC: 'c'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply to variable case insensitively on Windows only', async () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'a' }],\n\t\t\t\t\t\t['b', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'b' }],\n\t\t\t\t\t\t['c', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'c' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'A',\n\t\t\t\tB: 'B',\n\t\t\t\tC: 'C'\n\t\t\t};\n\t\t\tawait merged.applyToProcessEnvironment(env, undefined);\n\t\t\tif (isWindows) {\n\t\t\t\tdeepStrictEqual(env, {\n\t\t\t\t\tA: 'a',\n\t\t\t\t\tB: 'Bb',\n\t\t\t\t\tC: 'cC'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdeepStrictEqual(env, {\n\t\t\t\t\ta: 'a',\n\t\t\t\t\tA: 'A',\n\t\t\t\t\tb: 'b',\n\t\t\t\t\tB: 'B',\n\t\t\t\t\tc: 'c',\n\t\t\t\t\tC: 'C'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('diff', () => {\n\t\ttest('should return undefined when collectinos are the same', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined);\n\t\t\tstrictEqual(diff, undefined);\n\t\t});\n\t\ttest('should generate added diffs from when the first entry is added', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tconst entries = [...diff.added.entries()];\n\t\t\tdeepStrictEqual(entries, [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate added diffs from the same extension', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tconst entries = [...diff.added.entries()];\n\t\t\tdeepStrictEqual(entries, [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate added diffs from a different extension', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.added.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext2', value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A', options: undefined }]]\n\t\t\t]);\n\n\t\t\tconst merged3 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t// This entry should get removed\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff2 = merged1.diff(merged3, undefined)!;\n\t\t\tstrictEqual(diff2.changed.size, 0);\n\t\t\tstrictEqual(diff2.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.added.entries()], [...diff2.added.entries()], 'Swapping the order of the entries in the other collection should yield the same result');\n\t\t});\n\n\t\ttest('should remove entries in the diff that come after a Replace', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged4 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t// This entry should get removed as it comes after a replace\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged4, undefined);\n\t\t\tstrictEqual(diff, undefined, 'Replace should ignore any entries after it');\n\t\t});\n\n\t\ttest('should generate removed diffs', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Replace, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Replace, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate changed diffs', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Replace, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A', options: undefined }]],\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate diffs with added, changed and removed', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Append, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tdeepStrictEqual([...diff.added.entries()], [\n\t\t\t\t['C', [{ extensionIdentifier: 'ext1', value: 'c', type: EnvironmentVariableMutatorType.Append, variable: 'C', options: undefined }]],\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should only generate workspace specific diffs', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Append, scope: scope2, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, scope1)!;\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A', options: undefined }]]\n\t\t\t]);\n\t\t});\n\t});\n});\n"],
  "mappings": "AAKA,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,sCAAsC;AAC/C,SAAS,qBAAqB,iBAAiB;AAC/C,SAAS,2CAA2C;AACpD,SAAS,sCAAsC,gDAAgD;AAC/F,SAAS,WAAW;AACpB,SAAS,+CAA+C;AAExD,MAAM,6DAA6D,MAAM;AACxE,0CAAwC;AAExC,QAAM,QAAQ,MAAM;AACnB,SAAK,yEAAyE,MAAM;AACnF,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,KAAK,SAAS,EAAE,wBAAwB,MAAM,yBAAyB,KAAK,EAAE,CAAC;AAAA,UAChK,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,sBAAgB,CAAC,GAAG,OAAO,eAAe,MAAS,EAAE,QAAQ,CAAC,GAAG;AAAA,QAChE,CAAC,KAAK;AAAA,UACL,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,QAAQ,OAAO,MAAM,UAAU,KAAK,SAAS,EAAE,wBAAwB,MAAM,yBAAyB,KAAK,EAAE;AAAA,UACjL,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,SAAS,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,UAC5H,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,QAAQ,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,UAC3H,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,SAAS,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,QAC7H,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAED,SAAK,gEAAgE,MAAM;AAC1E,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,sBAAgB,CAAC,GAAG,OAAO,eAAe,MAAS,EAAE,QAAQ,CAAC,GAAG;AAAA,QAChE,CAAC,KAAK;AAAA,UACL,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,SAAS,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,UAC5H,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,QAAQ,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,UAC3H,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,SAAS,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,QAC7H,CAAC;AAAA,MACF,GAAG,8DAA8D;AAAA,IAClE,CAAC;AAED,SAAK,qGAAqG,MAAM;AAC/G,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtG,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtG,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,sBAAgB,CAAC,GAAG,OAAO,eAAe,MAAM,EAAE,QAAQ,CAAC,GAAG;AAAA,QAC7D,CAAC,KAAK;AAAA,UACL,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,QAAQ,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,UAC3H,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,SAAS,OAAO,MAAM,OAAO,QAAQ,UAAU,KAAK,SAAS,OAAU;AAAA,UAC3I,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,QAAQ,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,QAC5H,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAED,SAAK,6EAA6E,MAAM;AACvF,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtG,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtG,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,sBAAgB,CAAC,GAAG,OAAO,eAAe,MAAS,EAAE,QAAQ,CAAC,GAAG;AAAA,QAChE,CAAC,KAAK;AAAA,UACL,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,QAAQ,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,UAC3H,EAAE,qBAAqB,QAAQ,MAAM,+BAA+B,QAAQ,OAAO,MAAM,UAAU,KAAK,SAAS,OAAU;AAAA,QAC5H,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAED,SAAK,iFAAiF,MAAM;AAC3F,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtG,CAAC;AAAA,UACD,gBAAgB,qCAAqC;AAAA,YACpD,CAAC,gBAAgB,EAAE,aAAa,2BAA2B,OAAO,OAAO,CAAC;AAAA,YAC1E,CAAC,gBAAgB,EAAE,aAAa,2BAA2B,OAAO,OAAO,CAAC;AAAA,UAC3E,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,UACD,gBAAgB,qCAAqC;AAAA,YACpD,CAAC,SAAS,EAAE,aAAa,0BAA0B,CAAC;AAAA,UACrD,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtG,CAAC;AAAA,UACD,gBAAgB,qCAAqC;AAAA,YACpD,CAAC,SAAS,EAAE,aAAa,2BAA2B,OAAO,OAAO,CAAC;AAAA,UACpE,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,sBAAgB,CAAC,GAAG,OAAO,kBAAkB,MAAM,EAAE,QAAQ,CAAC,GAAG;AAAA,QAChE,CAAC,QAAQ,yBAAyB;AAAA,MACnC,CAAC;AACD,sBAAgB,CAAC,GAAG,OAAO,kBAAkB,MAAS,EAAE,QAAQ,CAAC,GAAG;AAAA,QACnE,CAAC,QAAQ,yBAAyB;AAAA,MACnC,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,QAAM,6BAA6B,MAAM;AACxC,SAAK,iDAAiD,YAAY;AACjE,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,OAAO;AAAA,UACP,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACrF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,YAChF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,MAA2B;AAAA,QAChC,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AACA,YAAM,OAAO,0BAA0B,KAAK,MAAS;AACrD,sBAAgB,KAAK;AAAA,QACpB,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACJ,CAAC;AAAA,IACF,CAAC;AAED,SAAK,2EAA2E,YAAY;AAC3F,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,OAAO;AAAA,UACP,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,YACpG,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,YAC/F,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,MAA2B;AAAA,QAChC,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AACA,YAAM,OAAO,0BAA0B,KAAK,MAAM;AAClD,sBAAgB,KAAK;AAAA,QACpB,GAAG;AAAA,QACH,GAAG;AAAA;AAAA,QACH,GAAG;AAAA,MACJ,CAAC;AAAA,IACF,CAAC;AAED,SAAK,qEAAqE,YAAY;AACrF,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,OAAO;AAAA,UACP,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACrF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,YAChF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,MAA2B,CAAC;AAClC,YAAM,OAAO,0BAA0B,KAAK,MAAS;AACrD,sBAAgB,KAAK;AAAA,QACpB,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACJ,CAAC;AAAA,IACF,CAAC;AAED,SAAK,+DAA+D,YAAY;AAC/E,YAAM,SAAS,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC9D,CAAC,OAAO;AAAA,UACP,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACrF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,YAChF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,MAA2B;AAAA,QAChC,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AACA,YAAM,OAAO,0BAA0B,KAAK,MAAS;AACrD,UAAI,WAAW;AACd,wBAAgB,KAAK;AAAA,UACpB,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,QACJ,CAAC;AAAA,MACF,OAAO;AACN,wBAAgB,KAAK;AAAA,UACpB,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,QACJ,CAAC;AAAA,MACF;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,QAAM,QAAQ,MAAM;AACnB,SAAK,yDAAyD,MAAM;AACnE,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,kBAAY,MAAM,MAAS;AAAA,IAC5B,CAAC;AACD,SAAK,kEAAkE,MAAM;AAC5E,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI,CAAC,CAAC,CAAC;AACnE,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,YAAM,UAAU,CAAC,GAAG,KAAK,MAAM,QAAQ,CAAC;AACxC,sBAAgB,SAAS;AAAA,QACxB,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACrI,CAAC;AAAA,IACF,CAAC;AAED,SAAK,uDAAuD,MAAM;AACjE,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACrF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACjF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,YAAM,UAAU,CAAC,GAAG,KAAK,MAAM,QAAQ,CAAC;AACxC,sBAAgB,SAAS;AAAA,QACxB,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACpI,CAAC;AAAA,IACF,CAAC;AAED,SAAK,0DAA0D,MAAM;AACpE,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AAEF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,sBAAgB,CAAC,GAAG,KAAK,MAAM,QAAQ,CAAC,GAAG;AAAA,QAC1C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACrI,CAAC;AAED,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA;AAAA,QAED,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,QAAQ,QAAQ,KAAK,SAAS,MAAS;AAC7C,kBAAY,MAAM,QAAQ,MAAM,CAAC;AACjC,kBAAY,MAAM,QAAQ,MAAM,CAAC;AACjC,sBAAgB,CAAC,GAAG,KAAK,MAAM,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,MAAM,QAAQ,CAAC,GAAG,wFAAwF;AAAA,IAChK,CAAC;AAED,SAAK,+DAA+D,MAAM;AACzE,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACvF,CAAC;AAAA,QACF,CAAC;AAAA;AAAA,QAED,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,kBAAY,MAAM,QAAW,4CAA4C;AAAA,IAC1E,CAAC;AAED,SAAK,iCAAiC,MAAM;AAC3C,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACrF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UACtF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,kBAAY,KAAK,MAAM,MAAM,CAAC;AAC9B,sBAAgB,CAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC,GAAG;AAAA,QAC5C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACrI,CAAC;AAAA,IACF,CAAC;AAED,SAAK,iCAAiC,MAAM;AAC3C,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACtF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACtF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACjF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,kBAAY,KAAK,MAAM,MAAM,CAAC;AAC9B,kBAAY,KAAK,QAAQ,MAAM,CAAC;AAChC,sBAAgB,CAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC,GAAG;AAAA,QAC5C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,QACrI,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACpI,CAAC;AAAA,IACF,CAAC;AAED,SAAK,yDAAyD,MAAM;AACnE,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACtF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,YACtF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,UACjF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAS;AAC5C,sBAAgB,CAAC,GAAG,KAAK,MAAM,QAAQ,CAAC,GAAG;AAAA,QAC1C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACpI,CAAC;AACD,sBAAgB,CAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC,GAAG;AAAA,QAC5C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACrI,CAAC;AACD,sBAAgB,CAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC,GAAG;AAAA,QAC5C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,MAAM,MAAM,+BAA+B,SAAS,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACtI,CAAC;AAAA,IACF,CAAC;AAED,SAAK,iDAAiD,MAAM;AAC3D,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,SAAS,EAAE,iBAAiB,EAAE,KAAK,IAAI,KAAK,YAAY,GAAG,MAAM,cAAc,OAAO,EAAE,EAAE;AAChG,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,YACrG,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,UAClF,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,UAAU,IAAI,oCAAoC,oBAAI,IAAI;AAAA,QAC/D,CAAC,QAAQ;AAAA,UACR,KAAK,yCAAyC;AAAA,YAC7C,CAAC,SAAS,EAAE,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,YACrG,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,OAAO,QAAQ,UAAU,IAAI,CAAC;AAAA,UAChG,CAAC;AAAA,QACF,CAAC;AAAA,MACF,CAAC,CAAC;AACF,YAAM,OAAO,QAAQ,KAAK,SAAS,MAAM;AACzC,kBAAY,KAAK,MAAM,MAAM,CAAC;AAC9B,sBAAgB,CAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC,GAAG;AAAA,QAC5C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACrI,CAAC;AACD,sBAAgB,CAAC,GAAG,KAAK,QAAQ,QAAQ,CAAC,GAAG;AAAA,QAC5C,CAAC,KAAK,CAAC,EAAE,qBAAqB,QAAQ,OAAO,MAAM,MAAM,+BAA+B,SAAS,OAAO,QAAQ,UAAU,KAAK,SAAS,OAAU,CAAC,CAAC;AAAA,MACrJ,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
