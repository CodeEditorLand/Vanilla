import{deepStrictEqual as o,strictEqual as t}from"assert";import{Codicon as s}from"../../../../../base/common/codicons.js";import i from"../../../../../base/common/severity.js";import{ThemeIcon as m}from"../../../../../base/common/themables.js";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"../../../../../base/test/common/utils.js";import{spinningLoading as y}from"../../../../../platform/theme/common/iconRegistry.js";import{TerminalStatusList as v}from"../../browser/terminalStatusList.js";import"../../common/terminal.js";import{workbenchInstantiationService as u}from"../../../../test/browser/workbenchTestServices.js";function n(a,r){o(a.statuses.map(e=>[e.id,e.severity]),r)}suite("Workbench - TerminalStatusList",()=>{const a=f();let r;setup(()=>{const e=u(void 0,a);r=a.add(e.createInstance(v))}),test("primary",()=>{t(r.primary?.id,void 0),r.add({id:"info1",severity:i.Info}),t(r.primary?.id,"info1"),r.add({id:"warning1",severity:i.Warning}),t(r.primary?.id,"warning1"),r.add({id:"info2",severity:i.Info}),t(r.primary?.id,"warning1"),r.add({id:"warning2",severity:i.Warning}),t(r.primary?.id,"warning2"),r.add({id:"info3",severity:i.Info}),t(r.primary?.id,"warning2"),r.add({id:"error1",severity:i.Error}),t(r.primary?.id,"error1"),r.add({id:"warning3",severity:i.Warning}),t(r.primary?.id,"error1"),r.add({id:"error2",severity:i.Error}),t(r.primary?.id,"error2"),r.remove("error1"),t(r.primary?.id,"error2"),r.remove("error2"),t(r.primary?.id,"warning3")}),test("statuses",()=>{t(r.statuses.length,0),r.add({id:"info",severity:i.Info}),r.add({id:"warning",severity:i.Warning}),r.add({id:"error",severity:i.Error}),t(r.statuses.length,3),n(r,[["info",i.Info],["warning",i.Warning],["error",i.Error]]),r.remove("info"),r.remove("warning"),r.remove("error"),t(r.statuses.length,0)}),test("onDidAddStatus",async()=>{const e=await new Promise(d=>{a.add(r.onDidAddStatus(d)),r.add({id:"test",severity:i.Info})});o(e,{id:"test",severity:i.Info})}),test("onDidRemoveStatus",async()=>{const e=await new Promise(d=>{a.add(r.onDidRemoveStatus(d)),r.add({id:"test",severity:i.Info}),r.remove("test")});o(e,{id:"test",severity:i.Info})}),test("onDidChangePrimaryStatus",async()=>{const e=await new Promise(d=>{a.add(r.onDidChangePrimaryStatus(d)),r.add({id:"test",severity:i.Info})});o(e,{id:"test",severity:i.Info})}),test("primary is not updated to status without an icon",async()=>{r.add({id:"test",severity:i.Info,icon:s.check}),r.add({id:"warning",severity:i.Warning}),o(r.primary,{id:"test",severity:i.Info,icon:s.check})}),test("add",()=>{n(r,[]),r.add({id:"info",severity:i.Info}),n(r,[["info",i.Info]]),r.add({id:"warning",severity:i.Warning}),n(r,[["info",i.Info],["warning",i.Warning]]),r.add({id:"error",severity:i.Error}),n(r,[["info",i.Info],["warning",i.Warning],["error",i.Error]])}),test("add should remove animation",()=>{n(r,[]),r.add({id:"info",severity:i.Info,icon:y}),n(r,[["info",i.Info]]),t(r.statuses[0].icon.id,s.play.id,"loading~spin should be converted to play"),r.add({id:"warning",severity:i.Warning,icon:m.modify(s.zap,"spin")}),n(r,[["info",i.Info],["warning",i.Warning]]),t(r.statuses[1].icon.id,s.zap.id,"zap~spin should have animation removed only")}),test("add should fire onDidRemoveStatus if same status id with a different object reference was added",()=>{const e=[];a.add(r.onDidAddStatus(()=>e.push("add"))),a.add(r.onDidRemoveStatus(()=>e.push("remove"))),r.add({id:"test",severity:i.Info}),r.add({id:"test",severity:i.Info}),o(e,["add","remove","add"])}),test("remove",()=>{r.add({id:"info",severity:i.Info}),r.add({id:"warning",severity:i.Warning}),r.add({id:"error",severity:i.Error}),n(r,[["info",i.Info],["warning",i.Warning],["error",i.Error]]),r.remove("warning"),n(r,[["info",i.Info],["error",i.Error]]),r.remove("info"),n(r,[["error",i.Error]]),r.remove("error"),n(r,[])}),test("toggle",()=>{const e={id:"info",severity:i.Info};r.toggle(e,!0),n(r,[["info",i.Info]]),r.toggle(e,!1),n(r,[])})});
