{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/common/terminalClipboard.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { strictEqual } from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\nimport { TestDialogService } from '../../../../../platform/dialogs/test/common/testDialogService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\nimport { shouldPasteTerminalText } from '../../common/terminalClipboard.js';\n\nsuite('TerminalClipboard', function () {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('shouldPasteTerminalText', () => {\n\t\tlet instantiationService: TestInstantiationService;\n\t\tlet configurationService: TestConfigurationService;\n\n\t\tsetup(async () => {\n\t\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\t\tconfigurationService = new TestConfigurationService({\n\t\t\t\t[TerminalSettingId.EnableMultiLinePasteWarning]: 'auto'\n\t\t\t});\n\t\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\t\tinstantiationService.stub(IDialogService, new TestDialogService(undefined, { result: { confirmed: false } }));\n\t\t});\n\n\t\tfunction setConfigValue(value: unknown) {\n\t\t\tconfigurationService = new TestConfigurationService({\n\t\t\t\t[TerminalSettingId.EnableMultiLinePasteWarning]: value\n\t\t\t});\n\t\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\t}\n\n\t\ttest('Single line string', async () => {\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo', undefined), true);\n\n\t\t\tsetConfigValue('always');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo', undefined), true);\n\n\t\t\tsetConfigValue('never');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo', undefined), true);\n\t\t});\n\t\ttest('Single line string with trailing new line', async () => {\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\n', undefined), true);\n\n\t\t\tsetConfigValue('always');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\n', undefined), false);\n\n\t\t\tsetConfigValue('never');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\n', undefined), true);\n\t\t});\n\t\ttest('Multi-line string', async () => {\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', undefined), false);\n\n\t\t\tsetConfigValue('always');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', undefined), false);\n\n\t\t\tsetConfigValue('never');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', undefined), true);\n\t\t});\n\t\ttest('Bracketed paste mode', async () => {\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', true), true);\n\n\t\t\tsetConfigValue('always');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', true), false);\n\n\t\t\tsetConfigValue('never');\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', true), true);\n\t\t});\n\t\ttest('Legacy config', async () => {\n\t\t\tsetConfigValue(true); // 'auto'\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', undefined), false);\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', true), true);\n\n\t\t\tsetConfigValue(false); // 'never'\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', true), true);\n\t\t});\n\t\ttest('Invalid config', async () => {\n\t\t\tsetConfigValue(123);\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', undefined), false);\n\t\t\tstrictEqual(await instantiationService.invokeFunction(shouldPasteTerminalText, 'foo\\nbar', true), true);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
