import{deepStrictEqual as o}from"assert";import{importAMDNodeModule as d}from"../../../../../../amdX.js";import{OperatingSystem as m}from"../../../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../../base/test/common/utils.js";import{writeP as a}from"../../../browser/terminalTestHelpers.js";import{LineDataEventAddon as p}from"../../../browser/xterm/lineDataEventAddon.js";suite("LineDataEventAddon",()=>{let e,n;const i=w();suite("onLineData",()=>{let t;setup(async()=>{const r=(await d("@xterm/xterm","lib/xterm.js")).Terminal;e=i.add(new r({allowProposedApi:!0,cols:4})),n=i.add(new p),e.loadAddon(n),t=[],i.add(n.onLineData(s=>t.push(s)))}),test("should fire when a non-wrapped line ends with a line feed",async()=>{await a(e,"foo"),o(t,[]),await a(e,`
\r`),o(t,["foo"]),await a(e,"bar"),o(t,["foo"]),await a(e,`
`),o(t,["foo","bar"])}),test("should not fire soft wrapped lines",async()=>{await a(e,"foo."),o(t,[]),await a(e,"bar."),o(t,[]),await a(e,"baz."),o(t,[])}),test("should fire when a wrapped line ends with a line feed",async()=>{await a(e,"foo.bar.baz."),o(t,[]),await a(e,`
\r`),o(t,["foo.bar.baz."])}),test("should not fire on cursor move when the backing process is not on Windows",async()=>{await a(e,"foo.\x1B[H"),o(t,[])}),test("should fire on cursor move when the backing process is on Windows",async()=>{n.setOperatingSystem(m.Windows),await a(e,"foo\x1B[H"),o(t,["foo"])})})});
