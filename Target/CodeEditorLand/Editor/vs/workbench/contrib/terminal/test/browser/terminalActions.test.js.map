{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/terminalActions.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IWorkspaceFolder } from '../../../../../platform/workspace/common/workspace.js';\nimport { WorkspaceFolderCwdPair, shrinkWorkspaceFolderCwdPairs } from '../../browser/terminalActions.js';\n\nfunction makeFakeFolder(name: string, uri: URI): IWorkspaceFolder {\n\treturn {\n\t\tname,\n\t\turi,\n\t\tindex: 0,\n\t\ttoResource: () => uri,\n\t};\n}\n\nfunction makePair(folder: IWorkspaceFolder, cwd?: URI | IWorkspaceFolder, isAbsolute?: boolean): WorkspaceFolderCwdPair {\n\treturn {\n\t\tfolder,\n\t\tcwd: !cwd ? folder.uri : (cwd instanceof URI ? cwd : cwd.uri),\n\t\tisAbsolute: !!isAbsolute,\n\t\tisOverridden: !!cwd && cwd.toString() !== folder.uri.toString(),\n\t};\n}\n\nsuite('terminalActions', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst root: URI = URI.file('/some-root');\n\tconst a = makeFakeFolder('a', URI.joinPath(root, 'a'));\n\tconst b = makeFakeFolder('b', URI.joinPath(root, 'b'));\n\tconst c = makeFakeFolder('c', URI.joinPath(root, 'c'));\n\tconst d = makeFakeFolder('d', URI.joinPath(root, 'd'));\n\n\tsuite('shrinkWorkspaceFolderCwdPairs', () => {\n\t\ttest('should return empty when given array is empty', () => {\n\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([]), []);\n\t\t});\n\n\t\ttest('should return the only single pair when given argument is a single element array', () => {\n\t\t\tconst pairs = [makePair(a)];\n\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs(pairs), pairs);\n\t\t});\n\n\t\ttest('should return all pairs when no repeated cwds', () => {\n\t\t\tconst pairs = [makePair(a), makePair(b), makePair(c)];\n\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs(pairs), pairs);\n\t\t});\n\n\t\tsuite('should select the pair that has the same URI when repeated cwds exist', () => {\n\t\t\ttest('all repeated', () => {\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairC = makePair(c, a); // CWD points to A\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC]), [pairA]);\n\t\t\t});\n\n\t\t\ttest('two repeated + one different', () => {\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairC = makePair(c);\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC]), [pairA, pairC]);\n\t\t\t});\n\n\t\t\ttest('two repeated + two repeated', () => {\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairC = makePair(c);\n\t\t\t\tconst pairD = makePair(d, c);\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC, pairD]), [pairA, pairC]);\n\t\t\t});\n\n\t\t\ttest('two repeated + two repeated (reverse order)', () => {\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairD = makePair(d, c);\n\t\t\t\tconst pairC = makePair(c);\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC, pairD]), [pairA, pairC]);\n\t\t\t});\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,WAAW;AACpB,SAAS,+CAA+C;AACxD,SAAS,wBAAwB;AACjC,SAAS,wBAAwB,qCAAqC;AAEtE,SAAS,eAAe,MAAc,KAA4B;AACjE,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,YAAY,6BAAM,KAAN;AAAA,EACb;AACD;AAPS;AAST,SAAS,SAAS,QAA0B,KAA8B,YAA8C;AACvH,SAAO;AAAA,IACN;AAAA,IACA,KAAK,CAAC,MAAM,OAAO,MAAO,eAAe,MAAM,MAAM,IAAI;AAAA,IACzD,YAAY,CAAC,CAAC;AAAA,IACd,cAAc,CAAC,CAAC,OAAO,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS;AAAA,EAC/D;AACD;AAPS;AAST,MAAM,mBAAmB,MAAM;AAC9B,0CAAwC;AAExC,QAAM,OAAY,IAAI,KAAK,YAAY;AACvC,QAAM,IAAI,eAAe,KAAK,IAAI,SAAS,MAAM,GAAG,CAAC;AACrD,QAAM,IAAI,eAAe,KAAK,IAAI,SAAS,MAAM,GAAG,CAAC;AACrD,QAAM,IAAI,eAAe,KAAK,IAAI,SAAS,MAAM,GAAG,CAAC;AACrD,QAAM,IAAI,eAAe,KAAK,IAAI,SAAS,MAAM,GAAG,CAAC;AAErD,QAAM,iCAAiC,MAAM;AAC5C,SAAK,iDAAiD,MAAM;AAC3D,sBAAgB,8BAA8B,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA,IACtD,CAAC;AAED,SAAK,oFAAoF,MAAM;AAC9F,YAAM,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC1B,sBAAgB,8BAA8B,KAAK,GAAG,KAAK;AAAA,IAC5D,CAAC;AAED,SAAK,iDAAiD,MAAM;AAC3D,YAAM,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC;AACpD,sBAAgB,8BAA8B,KAAK,GAAG,KAAK;AAAA,IAC5D,CAAC;AAED,UAAM,yEAAyE,MAAM;AACpF,WAAK,gBAAgB,MAAM;AAC1B,cAAM,QAAQ,SAAS,CAAC;AACxB,cAAM,QAAQ,SAAS,GAAG,CAAC;AAC3B,cAAM,QAAQ,SAAS,GAAG,CAAC;AAC3B,wBAAgB,8BAA8B,CAAC,OAAO,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC;AAAA,MAC9E,CAAC;AAED,WAAK,gCAAgC,MAAM;AAC1C,cAAM,QAAQ,SAAS,CAAC;AACxB,cAAM,QAAQ,SAAS,GAAG,CAAC;AAC3B,cAAM,QAAQ,SAAS,CAAC;AACxB,wBAAgB,8BAA8B,CAAC,OAAO,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,KAAK,CAAC;AAAA,MACrF,CAAC;AAED,WAAK,+BAA+B,MAAM;AACzC,cAAM,QAAQ,SAAS,CAAC;AACxB,cAAM,QAAQ,SAAS,GAAG,CAAC;AAC3B,cAAM,QAAQ,SAAS,CAAC;AACxB,cAAM,QAAQ,SAAS,GAAG,CAAC;AAC3B,wBAAgB,8BAA8B,CAAC,OAAO,OAAO,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,KAAK,CAAC;AAAA,MAC5F,CAAC;AAED,WAAK,+CAA+C,MAAM;AACzD,cAAM,QAAQ,SAAS,GAAG,CAAC;AAC3B,cAAM,QAAQ,SAAS,CAAC;AACxB,cAAM,QAAQ,SAAS,GAAG,CAAC;AAC3B,cAAM,QAAQ,SAAS,CAAC;AACxB,wBAAgB,8BAA8B,CAAC,OAAO,OAAO,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,KAAK,CAAC;AAAA,MAC5F,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
