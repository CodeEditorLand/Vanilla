{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/common/environmentVariableService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { TestExtensionService, TestHistoryService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\nimport { EnvironmentVariableService } from '../../common/environmentVariableService.js';\nimport { EnvironmentVariableMutatorType, IEnvironmentVariableMutator } from '../../../../../platform/terminal/common/environmentVariable.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IExtensionService } from '../../../../services/extensions/common/extensions.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { IProcessEnvironment } from '../../../../../base/common/platform.js';\nimport { IHistoryService } from '../../../../services/history/common/history.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nclass TestEnvironmentVariableService extends EnvironmentVariableService {\n\tpersistCollections(): void { this._persistCollections(); }\n\tnotifyCollectionUpdates(): void { this._notifyCollectionUpdates(); }\n}\n\nsuite('EnvironmentVariable - EnvironmentVariableService', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\tlet environmentVariableService: TestEnvironmentVariableService;\n\tlet changeExtensionsEvent: Emitter<void>;\n\n\tsetup(() => {\n\t\tchangeExtensionsEvent = store.add(new Emitter<void>());\n\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tinstantiationService.stub(IExtensionService, TestExtensionService);\n\t\tinstantiationService.stub(IStorageService, store.add(new TestStorageService()));\n\t\tinstantiationService.stub(IHistoryService, new TestHistoryService());\n\t\tinstantiationService.stub(IExtensionService, TestExtensionService);\n\t\tinstantiationService.stub(IExtensionService, 'onDidChangeExtensions', changeExtensionsEvent.event);\n\t\tinstantiationService.stub(IExtensionService, 'extensions', [\n\t\t\t{ identifier: { value: 'ext1' } },\n\t\t\t{ identifier: { value: 'ext2' } },\n\t\t\t{ identifier: { value: 'ext3' } }\n\t\t]);\n\n\t\tenvironmentVariableService = store.add(instantiationService.createInstance(TestEnvironmentVariableService));\n\t});\n\n\ttest('should persist collections to the storage service and be able to restore from them', () => {\n\t\tconst collection = new Map<string, IEnvironmentVariableMutator>();\n\t\tcollection.set('A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\tcollection.set('B-key', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\tcollection.set('C-key', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } });\n\t\tenvironmentVariableService.set('ext1', { map: collection, persistent: true });\n\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t['A', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'a', variable: 'A', options: undefined }]],\n\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'b', variable: 'B', options: undefined }]],\n\t\t\t['C', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'c', variable: 'C', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } }]]\n\t\t]);\n\n\t\t// Persist with old service, create a new service with the same storage service to verify restore\n\t\tenvironmentVariableService.persistCollections();\n\t\tconst service2: TestEnvironmentVariableService = store.add(instantiationService.createInstance(TestEnvironmentVariableService));\n\t\tdeepStrictEqual([...service2.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t['A', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'a', variable: 'A', options: undefined }]],\n\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'b', variable: 'B', options: undefined }]],\n\t\t\t['C', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'c', variable: 'C', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } }]]\n\t\t]);\n\t});\n\n\tsuite('mergedCollection', () => {\n\t\ttest('should overwrite any other variable with the first extension that replaces', () => {\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Append, variable: 'A' });\n\t\t\tcollection1.set('B-key', { value: 'b1', type: EnvironmentVariableMutatorType.Replace, variable: 'B' });\n\t\t\tcollection2.set('A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\t\tcollection2.set('B-key', { value: 'b2', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\t\tcollection3.set('A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' });\n\t\t\tcollection3.set('B-key', { value: 'b3', type: EnvironmentVariableMutatorType.Replace, variable: 'B' });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Replace, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'a1', variable: 'A', options: undefined }\n\t\t\t\t]],\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'b1', variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should correctly apply the environment values from multiple extension contributions in the correct order', async () => {\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A-key', { value: ':a1', type: EnvironmentVariableMutatorType.Append, variable: 'A' });\n\t\t\tcollection2.set('A-key', { value: 'a2:', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' });\n\t\t\tcollection3.set('A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\n\t\t\t// The entries should be ordered in the order they are applied\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Replace, value: 'a3', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Prepend, value: 'a2:', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: ':a1', variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t]);\n\n\t\t\t// Verify the entries get applied to the environment as expected\n\t\t\tconst env: IProcessEnvironment = { A: 'foo' };\n\t\t\tawait environmentVariableService.mergedCollection.applyToProcessEnvironment(env, undefined);\n\t\t\tdeepStrictEqual(env, { A: 'a2:a3:a1' });\n\t\t});\n\n\t\ttest('should correctly apply the workspace specific environment values from multiple extension contributions in the correct order', async () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A-key', { value: ':a1', type: EnvironmentVariableMutatorType.Append, scope: scope1, variable: 'A' });\n\t\t\tcollection2.set('A-key', { value: 'a2:', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' });\n\t\t\tcollection3.set('A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Replace, scope: scope2, variable: 'A' });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\n\t\t\t// The entries should be ordered in the order they are applied\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(scope1).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Prepend, value: 'a2:', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: ':a1', scope: scope1, variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t]);\n\n\t\t\t// Verify the entries get applied to the environment as expected\n\t\t\tconst env: IProcessEnvironment = { A: 'foo' };\n\t\t\tawait environmentVariableService.mergedCollection.applyToProcessEnvironment(env, scope1);\n\t\t\tdeepStrictEqual(env, { A: 'a2:foo:a1' });\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
