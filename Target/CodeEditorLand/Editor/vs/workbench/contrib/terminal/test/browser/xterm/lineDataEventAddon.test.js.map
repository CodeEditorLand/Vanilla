{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/xterm/lineDataEventAddon.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from '@xterm/xterm';\nimport { deepStrictEqual } from 'assert';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { OperatingSystem } from '../../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { writeP } from '../../../browser/terminalTestHelpers.js';\nimport { LineDataEventAddon } from '../../../browser/xterm/lineDataEventAddon.js';\n\nsuite('LineDataEventAddon', () => {\n\tlet xterm: Terminal;\n\tlet lineDataEventAddon: LineDataEventAddon;\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('onLineData', () => {\n\t\tlet events: string[];\n\n\t\tsetup(async () => {\n\t\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\t\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true, cols: 4 }));\n\t\t\tlineDataEventAddon = store.add(new LineDataEventAddon());\n\t\t\txterm.loadAddon(lineDataEventAddon);\n\n\t\t\tevents = [];\n\t\t\tstore.add(lineDataEventAddon.onLineData(e => events.push(e)));\n\t\t});\n\n\t\ttest('should fire when a non-wrapped line ends with a line feed', async () => {\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, '\\n\\r');\n\t\t\tdeepStrictEqual(events, ['foo']);\n\t\t\tawait writeP(xterm, 'bar');\n\t\t\tdeepStrictEqual(events, ['foo']);\n\t\t\tawait writeP(xterm, '\\n');\n\t\t\tdeepStrictEqual(events, ['foo', 'bar']);\n\t\t});\n\n\t\ttest('should not fire soft wrapped lines', async () => {\n\t\t\tawait writeP(xterm, 'foo.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, 'bar.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, 'baz.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t});\n\n\t\ttest('should fire when a wrapped line ends with a line feed', async () => {\n\t\t\tawait writeP(xterm, 'foo.bar.baz.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, '\\n\\r');\n\t\t\tdeepStrictEqual(events, ['foo.bar.baz.']);\n\t\t});\n\n\t\ttest('should not fire on cursor move when the backing process is not on Windows', async () => {\n\t\t\tawait writeP(xterm, 'foo.\\x1b[H');\n\t\t\tdeepStrictEqual(events, []);\n\t\t});\n\n\t\ttest('should fire on cursor move when the backing process is on Windows', async () => {\n\t\t\tlineDataEventAddon.setOperatingSystem(OperatingSystem.Windows);\n\t\t\tawait writeP(xterm, 'foo\\x1b[H');\n\t\t\tdeepStrictEqual(events, ['foo']);\n\t\t});\n\t});\n});\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AACxD,SAAS,cAAc;AACvB,SAAS,0BAA0B;AAEnC,MAAM,sBAAsB,MAAM;AACjC,MAAI;AACJ,MAAI;AAEJ,QAAM,QAAQ,wCAAwC;AAEtD,QAAM,cAAc,MAAM;AACzB,QAAI;AAEJ,UAAM,YAAY;AACjB,YAAM,gBAAgB,MAAM,oBAAmD,gBAAgB,cAAc,GAAG;AAChH,cAAQ,MAAM,IAAI,IAAI,aAAa,EAAE,kBAAkB,MAAM,MAAM,EAAE,CAAC,CAAC;AACvE,2BAAqB,MAAM,IAAI,IAAI,mBAAmB,CAAC;AACvD,YAAM,UAAU,kBAAkB;AAElC,eAAS,CAAC;AACV,YAAM,IAAI,mBAAmB,WAAW,OAAK,OAAO,KAAK,CAAC,CAAC,CAAC;AAAA,IAC7D,CAAC;AAED,SAAK,6DAA6D,YAAY;AAC7E,YAAM,OAAO,OAAO,KAAK;AACzB,sBAAgB,QAAQ,CAAC,CAAC;AAC1B,YAAM,OAAO,OAAO,MAAM;AAC1B,sBAAgB,QAAQ,CAAC,KAAK,CAAC;AAC/B,YAAM,OAAO,OAAO,KAAK;AACzB,sBAAgB,QAAQ,CAAC,KAAK,CAAC;AAC/B,YAAM,OAAO,OAAO,IAAI;AACxB,sBAAgB,QAAQ,CAAC,OAAO,KAAK,CAAC;AAAA,IACvC,CAAC;AAED,SAAK,sCAAsC,YAAY;AACtD,YAAM,OAAO,OAAO,MAAM;AAC1B,sBAAgB,QAAQ,CAAC,CAAC;AAC1B,YAAM,OAAO,OAAO,MAAM;AAC1B,sBAAgB,QAAQ,CAAC,CAAC;AAC1B,YAAM,OAAO,OAAO,MAAM;AAC1B,sBAAgB,QAAQ,CAAC,CAAC;AAAA,IAC3B,CAAC;AAED,SAAK,yDAAyD,YAAY;AACzE,YAAM,OAAO,OAAO,cAAc;AAClC,sBAAgB,QAAQ,CAAC,CAAC;AAC1B,YAAM,OAAO,OAAO,MAAM;AAC1B,sBAAgB,QAAQ,CAAC,cAAc,CAAC;AAAA,IACzC,CAAC;AAED,SAAK,6EAA6E,YAAY;AAC7F,YAAM,OAAO,OAAO,YAAY;AAChC,sBAAgB,QAAQ,CAAC,CAAC;AAAA,IAC3B,CAAC;AAED,SAAK,qEAAqE,YAAY;AACrF,yBAAmB,mBAAmB,gBAAgB,OAAO;AAC7D,YAAM,OAAO,OAAO,WAAW;AAC/B,sBAAgB,QAAQ,CAAC,KAAK,CAAC;AAAA,IAChC,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
