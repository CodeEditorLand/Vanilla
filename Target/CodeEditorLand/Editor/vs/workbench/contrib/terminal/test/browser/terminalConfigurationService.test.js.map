{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/terminalConfigurationService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { notStrictEqual, ok, strictEqual } from 'assert';\nimport { getActiveWindow } from '../../../../../base/browser/dom.js';\nimport { mainWindow } from '../../../../../base/browser/window.js';\nimport { isLinux } from '../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../../../editor/common/config/editorOptions.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ITerminalConfigurationService, LinuxDistro } from '../../browser/terminal.js';\nimport { TestTerminalConfigurationService, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nsuite('Workbench - TerminalConfigurationService', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet configurationService: TestConfigurationService;\n\tlet terminalConfigurationService: ITerminalConfigurationService;\n\n\tsetup(() => {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, store);\n\t\tconfigurationService = instantiationService.get(IConfigurationService) as TestConfigurationService;\n\t\tterminalConfigurationService = instantiationService.get(ITerminalConfigurationService);\n\t});\n\n\tsuite('config', () => {\n\t\ttest('should update on any change to terminal.integrated', () => {\n\t\t\tconst originalConfig = terminalConfigurationService.config;\n\t\t\tconfigurationService.onDidChangeConfigurationEmitter.fire({\n\t\t\t\taffectsConfiguration: configuration => configuration.startsWith('terminal.integrated'),\n\t\t\t\taffectedKeys: new Set(['terminal.integrated.fontWeight']),\n\t\t\t\tchange: null!,\n\t\t\t\tsource: ConfigurationTarget.USER\n\t\t\t});\n\t\t\tnotStrictEqual(terminalConfigurationService.config, originalConfig, 'Object reference must change');\n\t\t});\n\n\t\tsuite('onConfigChanged', () => {\n\t\t\ttest('should fire on any change to terminal.integrated', async () => {\n\t\t\t\tawait new Promise<void>(r => {\n\t\t\t\t\tstore.add(terminalConfigurationService.onConfigChanged(() => r()));\n\t\t\t\t\tconfigurationService.onDidChangeConfigurationEmitter.fire({\n\t\t\t\t\t\taffectsConfiguration: configuration => configuration.startsWith('terminal.integrated'),\n\t\t\t\t\t\taffectedKeys: new Set(['terminal.integrated.fontWeight']),\n\t\t\t\t\t\tchange: null!,\n\t\t\t\t\t\tsource: ConfigurationTarget.USER\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n\n\tfunction createTerminalConfigationService(config: any, linuxDistro?: LinuxDistro): ITerminalConfigurationService {\n\t\tconst instantiationService = new TestInstantiationService();\n\t\tinstantiationService.set(IConfigurationService, new TestConfigurationService(config));\n\t\tconst terminalConfigurationService = store.add(instantiationService.createInstance(TestTerminalConfigurationService));\n\t\tinstantiationService.set(ITerminalConfigurationService, terminalConfigurationService);\n\t\tterminalConfigurationService.setPanelContainer(mainWindow.document.body);\n\t\tif (linuxDistro) {\n\t\t\tterminalConfigurationService.fontMetrics.linuxDistro = linuxDistro;\n\t\t}\n\t\treturn terminalConfigurationService;\n\t}\n\n\tsuite('getFont', () => {\n\t\ttest('fontFamily', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: { fontFamily: 'foo' },\n\t\t\t\tterminal: { integrated: { fontFamily: 'bar' } }\n\t\t\t});\n\t\t\tok(terminalConfigurationService.getFont(getActiveWindow()).fontFamily.startsWith('bar'), 'terminal.integrated.fontFamily should be selected over editor.fontFamily');\n\t\t});\n\n\t\ttest('fontFamily (Linux Fedora)', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: { fontFamily: 'foo' },\n\t\t\t\tterminal: { integrated: { fontFamily: null } }\n\t\t\t}, LinuxDistro.Fedora);\n\t\t\tok(terminalConfigurationService.getFont(getActiveWindow()).fontFamily.startsWith('\\'DejaVu Sans Mono\\''), 'Fedora should have its font overridden when terminal.integrated.fontFamily not set');\n\t\t});\n\n\t\ttest('fontFamily (Linux Ubuntu)', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: { fontFamily: 'foo' },\n\t\t\t\tterminal: { integrated: { fontFamily: null } }\n\t\t\t}, LinuxDistro.Ubuntu);\n\t\t\tok(terminalConfigurationService.getFont(getActiveWindow()).fontFamily.startsWith('\\'Ubuntu Mono\\''), 'Ubuntu should have its font overridden when terminal.integrated.fontFamily not set');\n\t\t});\n\n\t\ttest('fontFamily (Linux Unknown)', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: { fontFamily: 'foo' },\n\t\t\t\tterminal: { integrated: { fontFamily: null } }\n\t\t\t});\n\t\t\tok(terminalConfigurationService.getFont(getActiveWindow()).fontFamily.startsWith('foo'), 'editor.fontFamily should be the fallback when terminal.integrated.fontFamily not set');\n\t\t});\n\n\t\ttest('fontSize 10', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo',\n\t\t\t\t\tfontSize: 9\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 'bar',\n\t\t\t\t\t\tfontSize: 10\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).fontSize, 10, 'terminal.integrated.fontSize should be selected over editor.fontSize');\n\t\t});\n\n\t\ttest('fontSize 0', () => {\n\t\t\tlet terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: null,\n\t\t\t\t\t\tfontSize: 0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, LinuxDistro.Ubuntu);\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).fontSize, 8, 'The minimum terminal font size (with adjustment) should be used when terminal.integrated.fontSize less than it');\n\n\t\t\tterminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: null,\n\t\t\t\t\t\tfontSize: 0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).fontSize, 6, 'The minimum terminal font size should be used when terminal.integrated.fontSize less than it');\n\t\t});\n\n\t\ttest('fontSize 1500', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\t\tfontSize: 1500\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).fontSize, 100, 'The maximum terminal font size should be used when terminal.integrated.fontSize more than it');\n\t\t});\n\n\t\ttest('fontSize null', () => {\n\t\t\tlet terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\t\tfontSize: null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, LinuxDistro.Ubuntu);\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).fontSize, EDITOR_FONT_DEFAULTS.fontSize + 2, 'The default editor font size (with adjustment) should be used when terminal.integrated.fontSize is not set');\n\n\t\t\tterminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\t\tfontSize: null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).fontSize, EDITOR_FONT_DEFAULTS.fontSize, 'The default editor font size should be used when terminal.integrated.fontSize is not set');\n\t\t});\n\n\t\ttest('lineHeight 2', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo',\n\t\t\t\t\tlineHeight: 1\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\t\tlineHeight: 2\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).lineHeight, 2, 'terminal.integrated.lineHeight should be selected over editor.lineHeight');\n\t\t});\n\n\t\ttest('lineHeight 0', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'foo',\n\t\t\t\t\tlineHeight: 1\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\t\tlineHeight: 0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.getFont(getActiveWindow()).lineHeight, isLinux ? 1.1 : 1, 'editor.lineHeight should be the default when terminal.integrated.lineHeight not set');\n\t\t});\n\t});\n\n\tsuite('configFontIsMonospace', () => {\n\t\ttest('isMonospace monospace', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 'monospace'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tstrictEqual(terminalConfigurationService.configFontIsMonospace(), true, 'monospace is monospaced');\n\t\t});\n\n\t\ttest('isMonospace sans-serif', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 'sans-serif'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.configFontIsMonospace(), false, 'sans-serif is not monospaced');\n\t\t});\n\n\t\ttest('isMonospace serif', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: 'serif'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.configFontIsMonospace(), false, 'serif is not monospaced');\n\t\t});\n\n\t\ttest('isMonospace monospace falls back to editor.fontFamily', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'monospace'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.configFontIsMonospace(), true, 'monospace is monospaced');\n\t\t});\n\n\t\ttest('isMonospace sans-serif falls back to editor.fontFamily', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'sans-serif'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.configFontIsMonospace(), false, 'sans-serif is not monospaced');\n\t\t});\n\n\t\ttest('isMonospace serif falls back to editor.fontFamily', () => {\n\t\t\tconst terminalConfigurationService = createTerminalConfigationService({\n\t\t\t\teditor: {\n\t\t\t\t\tfontFamily: 'serif'\n\t\t\t\t},\n\t\t\t\tterminal: {\n\t\t\t\t\tintegrated: {\n\t\t\t\t\t\tfontFamily: null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tstrictEqual(terminalConfigurationService.configFontIsMonospace(), false, 'serif is not monospaced');\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["terminalConfigurationService"]
}
