{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/common/history.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual, ok } from 'assert';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { join } from '../../../../../base/common/path.js';\nimport { isWindows, OperatingSystem } from '../../../../../base/common/platform.js';\nimport { env } from '../../../../../base/common/process.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IRemoteAgentEnvironment } from '../../../../../platform/remote/common/remoteAgentEnvironment.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { fetchBashHistory, fetchFishHistory, fetchPwshHistory, fetchZshHistory, ITerminalPersistedHistory, sanitizeFishHistoryCmd, TerminalPersistedHistory } from '../../common/history.js';\nimport { IRemoteAgentConnection, IRemoteAgentService } from '../../../../services/remote/common/remoteAgentService.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nfunction getConfig(limit: number) {\n\treturn {\n\t\tterminal: {\n\t\t\tintegrated: {\n\t\t\t\tshellIntegration: {\n\t\t\t\t\thistory: limit\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\nconst expectedCommands = [\n\t'single line command',\n\t'git commit -m \"A wrapped line in pwsh history\\n\\nSome commit description\\n\\nFixes #xyz\"',\n\t'git status',\n\t'two \"\\nline\"'\n];\n\nsuite('Terminal history', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('TerminalPersistedHistory', () => {\n\t\tlet history: ITerminalPersistedHistory<number>;\n\t\tlet instantiationService: TestInstantiationService;\n\t\tlet configurationService: TestConfigurationService;\n\n\t\tsetup(() => {\n\t\t\tconfigurationService = new TestConfigurationService(getConfig(5));\n\t\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\t\tinstantiationService.set(IConfigurationService, configurationService);\n\t\t\tinstantiationService.set(IStorageService, store.add(new TestStorageService()));\n\n\t\t\thistory = store.add(instantiationService.createInstance(TerminalPersistedHistory<number>, 'test'));\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tinstantiationService.dispose();\n\t\t});\n\n\t\ttest('should support adding items to the cache and respect LRU', () => {\n\t\t\thistory.add('foo', 1);\n\t\t\tdeepStrictEqual(Array.from(history.entries), [\n\t\t\t\t['foo', 1]\n\t\t\t]);\n\t\t\thistory.add('bar', 2);\n\t\t\tdeepStrictEqual(Array.from(history.entries), [\n\t\t\t\t['foo', 1],\n\t\t\t\t['bar', 2]\n\t\t\t]);\n\t\t\thistory.add('foo', 1);\n\t\t\tdeepStrictEqual(Array.from(history.entries), [\n\t\t\t\t['bar', 2],\n\t\t\t\t['foo', 1]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should support removing specific items', () => {\n\t\t\thistory.add('1', 1);\n\t\t\thistory.add('2', 2);\n\t\t\thistory.add('3', 3);\n\t\t\thistory.add('4', 4);\n\t\t\thistory.add('5', 5);\n\t\t\tstrictEqual(Array.from(history.entries).length, 5);\n\t\t\thistory.add('6', 6);\n\t\t\tstrictEqual(Array.from(history.entries).length, 5);\n\t\t});\n\n\t\ttest('should limit the number of entries based on config', () => {\n\t\t\thistory.add('1', 1);\n\t\t\thistory.add('2', 2);\n\t\t\thistory.add('3', 3);\n\t\t\thistory.add('4', 4);\n\t\t\thistory.add('5', 5);\n\t\t\tstrictEqual(Array.from(history.entries).length, 5);\n\t\t\thistory.add('6', 6);\n\t\t\tstrictEqual(Array.from(history.entries).length, 5);\n\t\t\tconfigurationService.setUserConfiguration('terminal', getConfig(2).terminal);\n\t\t\tconfigurationService.onDidChangeConfigurationEmitter.fire({ affectsConfiguration: () => true } as any);\n\t\t\tstrictEqual(Array.from(history.entries).length, 2);\n\t\t\thistory.add('7', 7);\n\t\t\tstrictEqual(Array.from(history.entries).length, 2);\n\t\t\tconfigurationService.setUserConfiguration('terminal', getConfig(3).terminal);\n\t\t\tconfigurationService.onDidChangeConfigurationEmitter.fire({ affectsConfiguration: () => true } as any);\n\t\t\tstrictEqual(Array.from(history.entries).length, 2);\n\t\t\thistory.add('8', 8);\n\t\t\tstrictEqual(Array.from(history.entries).length, 3);\n\t\t\thistory.add('9', 9);\n\t\t\tstrictEqual(Array.from(history.entries).length, 3);\n\t\t});\n\n\t\ttest('should reload from storage service after recreation', () => {\n\t\t\thistory.add('1', 1);\n\t\t\thistory.add('2', 2);\n\t\t\thistory.add('3', 3);\n\t\t\tstrictEqual(Array.from(history.entries).length, 3);\n\t\t\tconst history2 = store.add(instantiationService.createInstance(TerminalPersistedHistory, 'test'));\n\t\t\tstrictEqual(Array.from(history2.entries).length, 3);\n\t\t});\n\t});\n\tsuite('fetchBashHistory', () => {\n\t\tlet fileScheme: string;\n\t\tlet filePath: string;\n\t\tconst fileContent: string = [\n\t\t\t'single line command',\n\t\t\t'git commit -m \"A wrapped line in pwsh history',\n\t\t\t'',\n\t\t\t'Some commit description',\n\t\t\t'',\n\t\t\t'Fixes #xyz\"',\n\t\t\t'git status',\n\t\t\t'two \"',\n\t\t\t'line\"'\n\t\t].join('\\n');\n\n\t\tlet instantiationService: TestInstantiationService;\n\t\tlet remoteConnection: Pick<IRemoteAgentConnection, 'remoteAuthority'> | null = null;\n\t\tlet remoteEnvironment: Pick<IRemoteAgentEnvironment, 'os'> | null = null;\n\n\t\tsetup(() => {\n\t\t\tinstantiationService = new TestInstantiationService();\n\t\t\tinstantiationService.stub(IFileService, {\n\t\t\t\tasync readFile(resource: URI) {\n\t\t\t\t\tconst expected = URI.from({ scheme: fileScheme, path: filePath });\n\t\t\t\t\tstrictEqual(resource.scheme, expected.scheme);\n\t\t\t\t\tstrictEqual(resource.path, expected.path);\n\t\t\t\t\treturn { value: VSBuffer.fromString(fileContent) };\n\t\t\t\t}\n\t\t\t} as Pick<IFileService, 'readFile'>);\n\t\t\tinstantiationService.stub(IRemoteAgentService, {\n\t\t\t\tasync getEnvironment() { return remoteEnvironment; },\n\t\t\t\tgetConnection() { return remoteConnection; }\n\t\t\t} as Pick<IRemoteAgentService, 'getConnection' | 'getEnvironment'>);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tinstantiationService.dispose();\n\t\t});\n\n\t\tif (!isWindows) {\n\t\t\tsuite('local', () => {\n\t\t\t\tlet originalEnvValues: { HOME: string | undefined };\n\t\t\t\tsetup(() => {\n\t\t\t\t\toriginalEnvValues = { HOME: env['HOME'] };\n\t\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\t\tfilePath = '/home/user/.bash_history';\n\t\t\t\t});\n\t\t\t\tteardown(() => {\n\t\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttest('current OS', async () => {\n\t\t\t\t\tfilePath = '/home/user/.bash_history';\n\t\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchBashHistory))!), expectedCommands);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tsuite('remote', () => {\n\t\t\tlet originalEnvValues: { HOME: string | undefined };\n\t\t\tsetup(() => {\n\t\t\t\toriginalEnvValues = { HOME: env['HOME'] };\n\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\tfilePath = '/home/user/.bash_history';\n\t\t\t});\n\t\t\tteardown(() => {\n\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttest('Windows', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Windows };\n\t\t\t\tstrictEqual(await instantiationService.invokeFunction(fetchBashHistory), undefined);\n\t\t\t});\n\t\t\ttest('macOS', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Macintosh };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchBashHistory))!), expectedCommands);\n\t\t\t});\n\t\t\ttest('Linux', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Linux };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchBashHistory))!), expectedCommands);\n\t\t\t});\n\t\t});\n\t});\n\tsuite('fetchZshHistory', () => {\n\t\tlet fileScheme: string;\n\t\tlet filePath: string;\n\t\tconst fileContent: string = [\n\t\t\t': 1655252330:0;single line command',\n\t\t\t': 1655252330:0;git commit -m \"A wrapped line in pwsh history\\\\',\n\t\t\t'\\\\',\n\t\t\t'Some commit description\\\\',\n\t\t\t'\\\\',\n\t\t\t'Fixes #xyz\"',\n\t\t\t': 1655252330:0;git status',\n\t\t\t': 1655252330:0;two \"\\\\',\n\t\t\t'line\"'\n\t\t].join('\\n');\n\n\t\tlet instantiationService: TestInstantiationService;\n\t\tlet remoteConnection: Pick<IRemoteAgentConnection, 'remoteAuthority'> | null = null;\n\t\tlet remoteEnvironment: Pick<IRemoteAgentEnvironment, 'os'> | null = null;\n\n\t\tsetup(() => {\n\t\t\tinstantiationService = new TestInstantiationService();\n\t\t\tinstantiationService.stub(IFileService, {\n\t\t\t\tasync readFile(resource: URI) {\n\t\t\t\t\tconst expected = URI.from({ scheme: fileScheme, path: filePath });\n\t\t\t\t\tstrictEqual(resource.scheme, expected.scheme);\n\t\t\t\t\tstrictEqual(resource.path, expected.path);\n\t\t\t\t\treturn { value: VSBuffer.fromString(fileContent) };\n\t\t\t\t}\n\t\t\t} as Pick<IFileService, 'readFile'>);\n\t\t\tinstantiationService.stub(IRemoteAgentService, {\n\t\t\t\tasync getEnvironment() { return remoteEnvironment; },\n\t\t\t\tgetConnection() { return remoteConnection; }\n\t\t\t} as Pick<IRemoteAgentService, 'getConnection' | 'getEnvironment'>);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tinstantiationService.dispose();\n\t\t});\n\n\t\tif (!isWindows) {\n\t\t\tsuite('local', () => {\n\t\t\t\tlet originalEnvValues: { HOME: string | undefined };\n\t\t\t\tsetup(() => {\n\t\t\t\t\toriginalEnvValues = { HOME: env['HOME'] };\n\t\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\t\tfilePath = '/home/user/.bash_history';\n\t\t\t\t});\n\t\t\t\tteardown(() => {\n\t\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttest('current OS', async () => {\n\t\t\t\t\tfilePath = '/home/user/.zsh_history';\n\t\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchZshHistory))!), expectedCommands);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tsuite('remote', () => {\n\t\t\tlet originalEnvValues: { HOME: string | undefined };\n\t\t\tsetup(() => {\n\t\t\t\toriginalEnvValues = { HOME: env['HOME'] };\n\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\tfilePath = '/home/user/.zsh_history';\n\t\t\t});\n\t\t\tteardown(() => {\n\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttest('Windows', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Windows };\n\t\t\t\tstrictEqual(await instantiationService.invokeFunction(fetchZshHistory), undefined);\n\t\t\t});\n\t\t\ttest('macOS', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Macintosh };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchZshHistory))!), expectedCommands);\n\t\t\t});\n\t\t\ttest('Linux', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Linux };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchZshHistory))!), expectedCommands);\n\t\t\t});\n\t\t});\n\t});\n\tsuite('fetchPwshHistory', () => {\n\t\tlet fileScheme: string;\n\t\tlet filePath: string;\n\t\tconst fileContent: string = [\n\t\t\t'single line command',\n\t\t\t'git commit -m \"A wrapped line in pwsh history`',\n\t\t\t'`',\n\t\t\t'Some commit description`',\n\t\t\t'`',\n\t\t\t'Fixes #xyz\"',\n\t\t\t'git status',\n\t\t\t'two \"`',\n\t\t\t'line\"'\n\t\t].join('\\n');\n\n\t\tlet instantiationService: TestInstantiationService;\n\t\tlet remoteConnection: Pick<IRemoteAgentConnection, 'remoteAuthority'> | null = null;\n\t\tlet remoteEnvironment: Pick<IRemoteAgentEnvironment, 'os'> | null = null;\n\n\t\tsetup(() => {\n\t\t\tinstantiationService = new TestInstantiationService();\n\t\t\tinstantiationService.stub(IFileService, {\n\t\t\t\tasync readFile(resource: URI) {\n\t\t\t\t\tconst expected = URI.from({\n\t\t\t\t\t\tscheme: fileScheme,\n\t\t\t\t\t\tauthority: remoteConnection?.remoteAuthority,\n\t\t\t\t\t\tpath: URI.file(filePath).path\n\t\t\t\t\t});\n\t\t\t\t\t// Sanitize the encoded `/` chars as they don't impact behavior\n\t\t\t\t\tstrictEqual(resource.toString().replaceAll('%5C', '/'), expected.toString().replaceAll('%5C', '/'));\n\t\t\t\t\treturn { value: VSBuffer.fromString(fileContent) };\n\t\t\t\t}\n\t\t\t} as Pick<IFileService, 'readFile'>);\n\t\t\tinstantiationService.stub(IRemoteAgentService, {\n\t\t\t\tasync getEnvironment() { return remoteEnvironment; },\n\t\t\t\tgetConnection() { return remoteConnection; }\n\t\t\t} as Pick<IRemoteAgentService, 'getConnection' | 'getEnvironment'>);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tinstantiationService.dispose();\n\t\t});\n\n\t\tsuite('local', () => {\n\t\t\tlet originalEnvValues: { HOME: string | undefined; APPDATA: string | undefined };\n\t\t\tsetup(() => {\n\t\t\t\toriginalEnvValues = { HOME: env['HOME'], APPDATA: env['APPDATA'] };\n\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\tenv['APPDATA'] = 'C:\\\\AppData';\n\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\tfilePath = '/home/user/.zsh_history';\n\t\t\t\toriginalEnvValues = { HOME: env['HOME'], APPDATA: env['APPDATA'] };\n\t\t\t});\n\t\t\tteardown(() => {\n\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t}\n\t\t\t\tif (originalEnvValues['APPDATA'] === undefined) {\n\t\t\t\t\tdelete env['APPDATA'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['APPDATA'] = originalEnvValues['APPDATA'];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttest('current OS', async () => {\n\t\t\t\tif (isWindows) {\n\t\t\t\t\tfilePath = join(env['APPDATA']!, 'Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine\\\\ConsoleHost_history.txt');\n\t\t\t\t} else {\n\t\t\t\t\tfilePath = join(env['HOME']!, '.local/share/powershell/PSReadline/ConsoleHost_history.txt');\n\t\t\t\t}\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchPwshHistory))!), expectedCommands);\n\t\t\t});\n\t\t});\n\t\tsuite('remote', () => {\n\t\t\tlet originalEnvValues: { HOME: string | undefined; APPDATA: string | undefined };\n\t\t\tsetup(() => {\n\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\toriginalEnvValues = { HOME: env['HOME'], APPDATA: env['APPDATA'] };\n\t\t\t});\n\t\t\tteardown(() => {\n\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t}\n\t\t\t\tif (originalEnvValues['APPDATA'] === undefined) {\n\t\t\t\t\tdelete env['APPDATA'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['APPDATA'] = originalEnvValues['APPDATA'];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttest('Windows', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Windows };\n\t\t\t\tenv['APPDATA'] = 'C:\\\\AppData';\n\t\t\t\tfilePath = 'C:\\\\AppData\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine\\\\ConsoleHost_history.txt';\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchPwshHistory))!), expectedCommands);\n\t\t\t});\n\t\t\ttest('macOS', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Macintosh };\n\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\tfilePath = '/home/user/.local/share/powershell/PSReadline/ConsoleHost_history.txt';\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchPwshHistory))!), expectedCommands);\n\t\t\t});\n\t\t\ttest('Linux', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Linux };\n\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\tfilePath = '/home/user/.local/share/powershell/PSReadline/ConsoleHost_history.txt';\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchPwshHistory))!), expectedCommands);\n\t\t\t});\n\t\t});\n\t});\n\tsuite('fetchFishHistory', () => {\n\t\tlet fileScheme: string;\n\t\tlet filePath: string;\n\t\tconst fileContent: string = [\n\t\t\t'- cmd: single line command',\n\t\t\t'  when: 1650000000',\n\t\t\t'- cmd: git commit -m \"A wrapped line in pwsh history\\\\n\\\\nSome commit description\\\\n\\\\nFixes #xyz\"',\n\t\t\t'  when: 1650000010',\n\t\t\t'- cmd: git status',\n\t\t\t'  when: 1650000020',\n\t\t\t'- cmd: two \"\\\\nline\"',\n\t\t\t'  when: 1650000030',\n\t\t].join('\\n');\n\n\t\tlet instantiationService: TestInstantiationService;\n\t\tlet remoteConnection: Pick<IRemoteAgentConnection, 'remoteAuthority'> | null = null;\n\t\tlet remoteEnvironment: Pick<IRemoteAgentEnvironment, 'os'> | null = null;\n\n\t\tsetup(() => {\n\t\t\tinstantiationService = new TestInstantiationService();\n\t\t\tinstantiationService.stub(IFileService, {\n\t\t\t\tasync readFile(resource: URI) {\n\t\t\t\t\tconst expected = URI.from({ scheme: fileScheme, path: filePath });\n\t\t\t\t\tstrictEqual(resource.scheme, expected.scheme);\n\t\t\t\t\tstrictEqual(resource.path, expected.path);\n\t\t\t\t\treturn { value: VSBuffer.fromString(fileContent) };\n\t\t\t\t}\n\t\t\t} as Pick<IFileService, 'readFile'>);\n\t\t\tinstantiationService.stub(IRemoteAgentService, {\n\t\t\t\tasync getEnvironment() { return remoteEnvironment; },\n\t\t\t\tgetConnection() { return remoteConnection; }\n\t\t\t} as Pick<IRemoteAgentService, 'getConnection' | 'getEnvironment'>);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tinstantiationService.dispose();\n\t\t});\n\n\t\tif (!isWindows) {\n\t\t\tsuite('local', () => {\n\t\t\t\tlet originalEnvValues: { HOME: string | undefined };\n\t\t\t\tsetup(() => {\n\t\t\t\t\toriginalEnvValues = { HOME: env['HOME'] };\n\t\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\t\tfilePath = '/home/user/.local/share/fish/fish_history';\n\t\t\t\t});\n\t\t\t\tteardown(() => {\n\t\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttest('current OS', async () => {\n\t\t\t\t\tfilePath = '/home/user/.local/share/fish/fish_history';\n\t\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchFishHistory))!), expectedCommands);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsuite('local (overriden path)', () => {\n\t\t\t\tlet originalEnvValues: { XDG_DATA_HOME: string | undefined };\n\t\t\t\tsetup(() => {\n\t\t\t\t\toriginalEnvValues = { XDG_DATA_HOME: env['XDG_DATA_HOME'] };\n\t\t\t\t\tenv['XDG_DATA_HOME'] = '/home/user/data-home';\n\t\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\t\tfilePath = '/home/user/data-home/fish/fish_history';\n\t\t\t\t});\n\t\t\t\tteardown(() => {\n\t\t\t\t\tif (originalEnvValues['XDG_DATA_HOME'] === undefined) {\n\t\t\t\t\t\tdelete env['XDG_DATA_HOME'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenv['XDG_DATA_HOME'] = originalEnvValues['XDG_DATA_HOME'];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttest('current OS', async () => {\n\t\t\t\t\tfilePath = '/home/user/data-home/fish/fish_history';\n\t\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchFishHistory))!), expectedCommands);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tsuite('remote', () => {\n\t\t\tlet originalEnvValues: { HOME: string | undefined };\n\t\t\tsetup(() => {\n\t\t\t\toriginalEnvValues = { HOME: env['HOME'] };\n\t\t\t\tenv['HOME'] = '/home/user';\n\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\tfilePath = '/home/user/.local/share/fish/fish_history';\n\t\t\t});\n\t\t\tteardown(() => {\n\t\t\t\tif (originalEnvValues['HOME'] === undefined) {\n\t\t\t\t\tdelete env['HOME'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['HOME'] = originalEnvValues['HOME'];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttest('Windows', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Windows };\n\t\t\t\tstrictEqual(await instantiationService.invokeFunction(fetchFishHistory), undefined);\n\t\t\t});\n\t\t\ttest('macOS', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Macintosh };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchFishHistory))!), expectedCommands);\n\t\t\t});\n\t\t\ttest('Linux', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Linux };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchFishHistory))!), expectedCommands);\n\t\t\t});\n\t\t});\n\n\t\tsuite('remote (overriden path)', () => {\n\t\t\tlet originalEnvValues: { XDG_DATA_HOME: string | undefined };\n\t\t\tsetup(() => {\n\t\t\t\toriginalEnvValues = { XDG_DATA_HOME: env['XDG_DATA_HOME'] };\n\t\t\t\tenv['XDG_DATA_HOME'] = '/home/user/data-home';\n\t\t\t\tremoteConnection = { remoteAuthority: 'some-remote' };\n\t\t\t\tfileScheme = Schemas.vscodeRemote;\n\t\t\t\tfilePath = '/home/user/data-home/fish/fish_history';\n\t\t\t});\n\t\t\tteardown(() => {\n\t\t\t\tif (originalEnvValues['XDG_DATA_HOME'] === undefined) {\n\t\t\t\t\tdelete env['XDG_DATA_HOME'];\n\t\t\t\t} else {\n\t\t\t\t\tenv['XDG_DATA_HOME'] = originalEnvValues['XDG_DATA_HOME'];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttest('Windows', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Windows };\n\t\t\t\tstrictEqual(await instantiationService.invokeFunction(fetchFishHistory), undefined);\n\t\t\t});\n\t\t\ttest('macOS', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Macintosh };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchFishHistory))!), expectedCommands);\n\t\t\t});\n\t\t\ttest('Linux', async () => {\n\t\t\t\tremoteEnvironment = { os: OperatingSystem.Linux };\n\t\t\t\tdeepStrictEqual(Array.from((await instantiationService.invokeFunction(fetchFishHistory))!), expectedCommands);\n\t\t\t});\n\t\t});\n\n\t\tsuite('sanitizeFishHistoryCmd', () => {\n\t\t\ttest('valid new-lines', () => {\n\t\t\t\t/**\n\t\t\t\t * Valid new-lines have odd number of leading backslashes: \\n, \\\\\\n, \\\\\\\\\\n\n\t\t\t\t */\n\t\t\t\tconst cases = [\n\t\t\t\t\t'\\\\n',\n\t\t\t\t\t'\\\\n at start',\n\t\t\t\t\t'some \\\\n in the middle',\n\t\t\t\t\t'at the end \\\\n',\n\t\t\t\t\t'\\\\\\\\\\\\n',\n\t\t\t\t\t'\\\\\\\\\\\\n valid at start',\n\t\t\t\t\t'valid \\\\\\\\\\\\n in the middle',\n\t\t\t\t\t'valid in the end \\\\\\\\\\\\n',\n\t\t\t\t\t'\\\\\\\\\\\\\\\\\\\\n',\n\t\t\t\t\t'\\\\\\\\\\\\\\\\\\\\n valid at start',\n\t\t\t\t\t'valid \\\\\\\\\\\\\\\\\\\\n in the middle',\n\t\t\t\t\t'valid in the end \\\\\\\\\\\\\\\\\\\\n',\n\t\t\t\t\t'mixed valid \\\\r\\\\n',\n\t\t\t\t\t'mixed valid \\\\\\\\\\\\r\\\\n',\n\t\t\t\t\t'mixed valid \\\\r\\\\\\\\\\\\n',\n\t\t\t\t];\n\n\t\t\t\tfor (const x of cases) {\n\t\t\t\t\tok(sanitizeFishHistoryCmd(x).includes('\\n'));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttest('invalid new-lines', () => {\n\t\t\t\t/**\n\t\t\t\t * Invalid new-lines have even number of leading backslashes: \\\\n, \\\\\\\\n, \\\\\\\\\\\\n\n\t\t\t\t */\n\t\t\t\tconst cases = [\n\t\t\t\t\t'\\\\\\\\n',\n\t\t\t\t\t'\\\\\\\\n invalid at start',\n\t\t\t\t\t'invalid \\\\\\\\n in the middle',\n\t\t\t\t\t'invalid in the end \\\\\\\\n',\n\t\t\t\t\t'\\\\\\\\\\\\\\\\n',\n\t\t\t\t\t'\\\\\\\\\\\\\\\\n invalid at start',\n\t\t\t\t\t'invalid \\\\\\\\\\\\\\\\n in the middle',\n\t\t\t\t\t'invalid in the end \\\\\\\\\\\\\\\\n',\n\t\t\t\t\t'mixed invalid \\\\r\\\\\\\\n',\n\t\t\t\t\t'mixed invalid \\\\r\\\\\\\\\\\\\\\\n',\n\t\t\t\t\t'echo \"\\\\\\\\n\"',\n\t\t\t\t];\n\n\t\t\t\tfor (const x of cases) {\n\t\t\t\t\tok(!sanitizeFishHistoryCmd(x).includes('\\n'));\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
