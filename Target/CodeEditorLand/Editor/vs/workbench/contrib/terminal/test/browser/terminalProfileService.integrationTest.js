import{deepStrictEqual as r}from"assert";import"../../../../../base/common/cancellation.js";import{Codicon as k}from"../../../../../base/common/codicons.js";import{Emitter as y}from"../../../../../base/common/event.js";import{isLinux as A,isWindows as C,OperatingSystem as m}from"../../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as x}from"../../../../../base/test/common/utils.js";import{ConfigurationTarget as h,IConfigurationService as E}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as Q}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{IQuickInputService as D}from"../../../../../platform/quickinput/common/quickInput.js";import"../../../../../platform/remote/common/remoteAgentEnvironment.js";import"../../../../../platform/terminal/common/terminal.js";import{IThemeService as R}from"../../../../../platform/theme/common/themeService.js";import{TestThemeService as N}from"../../../../../platform/theme/test/common/testThemeService.js";import{ITerminalInstanceService as _}from"../../browser/terminal.js";import{TerminalProfileQuickpick as M}from"../../browser/terminalProfileQuickpick.js";import{TerminalProfileService as O}from"../../browser/terminalProfileService.js";import{ITerminalProfileService as U}from"../../common/terminal.js";import{ITerminalContributionService as W}from"../../common/terminalExtensionPoints.js";import{IWorkbenchEnvironmentService as I}from"../../../../services/environment/common/environmentService.js";import{IExtensionService as j}from"../../../../services/extensions/common/extensions.js";import{IRemoteAgentService as B}from"../../../../services/remote/common/remoteAgentService.js";import{workbenchInstantiationService as J}from"../../../../test/browser/workbenchTestServices.js";import{TestExtensionService as L}from"../../../../test/common/workbenchTestServices.js";class g extends O{hasRefreshedProfiles;refreshAvailableProfiles(){this.hasRefreshedProfiles=this._refreshAvailableProfilesNow()}refreshAndAwaitAvailableProfiles(){if(this.refreshAvailableProfiles(),!this.hasRefreshedProfiles)throw new Error("has not refreshed profiles yet");return this.hasRefreshedProfiles}}class G{hasRefreshedProfiles;_defaultProfileName;availableProfiles=[];contributedProfiles=[];async getPlatformKey(){return"linux"}getDefaultProfileName(){return this._defaultProfileName}setProfiles(t,c){this.availableProfiles=t,this.contributedProfiles=c}setDefaultProfileName(t){this._defaultProfileName=t}}class q{_pick=T;async pick(t,c,e){return Promise.resolve(t),this._pick}setPick(t){this._pick=t}}class K extends M{}class z extends L{_onDidChangeExtensions=new y}class F{_serviceBrand;terminalProfiles=[];setProfiles(t){this.terminalProfiles=t}}class H{_profiles=new Map;_hasReturnedNone=!0;async getBackend(t){return{getProfiles:async()=>this._hasReturnedNone?this._profiles.get(t??"")||[]:(this._hasReturnedNone=!0,[])}}setProfiles(t,c){this._profiles.set(t??"",c)}setReturnNone(){this._hasReturnedNone=!1}}class V{_os;setEnvironment(t){this._os=t}async getEnvironment(){return{os:this._os}}}const b={profiles:{windows:{},linux:{},osx:{}}};let i={profileName:"PowerShell",path:"C:\\Powershell.exe",isDefault:!0,icon:k.terminalPowershell},o={extensionIdentifier:"ms-vscode.js-debug-nightly",icon:"debug",id:"extension.js-debug.debugTerminal",title:"JavaScript Debug Terminal"};const T={label:"Powershell",profile:i,profileName:i.profileName},S={label:"Javascript Debug Terminal",profile:o,profileName:o.title};suite("TerminalProfileService",()=>{const a=x();let t,c,e,f,p,v,l;setup(async()=>{t=new Q({files:{},terminal:{integrated:b}}),l=J({configurationService:()=>t},a),f=new V,c=new H,p=new z,v={remoteAuthority:void 0};const n=new N,s=new F;l.stub(j,p),l.stub(E,t),l.stub(B,f),l.stub(W,s),l.stub(_,c),l.stub(I,v),l.stub(R,n),e=a.add(l.createInstance(g)),i={profileName:"PowerShell",path:"C:\\Powershell.exe",isDefault:!0,icon:k.terminalPowershell},o={extensionIdentifier:"ms-vscode.js-debug-nightly",icon:"debug",id:"extension.js-debug.debugTerminal",title:"JavaScript Debug Terminal"},c.setProfiles(void 0,[i]),c.setProfiles("fakeremote",[]),s.setProfiles([o]),C?f.setEnvironment(m.Windows):A?f.setEnvironment(m.Linux):f.setEnvironment(m.Macintosh),t.setUserConfiguration("terminal",{integrated:b})}),suite("Contributed Profiles",()=>{test("should filter out contributed profiles set to null (Linux)",async()=>{f.setEnvironment(m.Linux),await t.setUserConfiguration("terminal",{integrated:{profiles:{linux:{"JavaScript Debug Terminal":null}}}}),t.onDidChangeConfigurationEmitter.fire({affectsConfiguration:()=>!0,source:h.USER}),await e.refreshAndAwaitAvailableProfiles(),r(e.availableProfiles,[i]),r(e.contributedProfiles,[])}),test("should filter out contributed profiles set to null (Windows)",async()=>{f.setEnvironment(m.Windows),await t.setUserConfiguration("terminal",{integrated:{profiles:{windows:{"JavaScript Debug Terminal":null}}}}),t.onDidChangeConfigurationEmitter.fire({affectsConfiguration:()=>!0,source:h.USER}),await e.refreshAndAwaitAvailableProfiles(),r(e.availableProfiles,[i]),r(e.contributedProfiles,[])}),test("should filter out contributed profiles set to null (macOS)",async()=>{f.setEnvironment(m.Macintosh),await t.setUserConfiguration("terminal",{integrated:{profiles:{osx:{"JavaScript Debug Terminal":null}}}}),t.onDidChangeConfigurationEmitter.fire({affectsConfiguration:()=>!0,source:h.USER}),await e.refreshAndAwaitAvailableProfiles(),r(e.availableProfiles,[i]),r(e.contributedProfiles,[])}),test("should include contributed profiles",async()=>{await e.refreshAndAwaitAvailableProfiles(),r(e.availableProfiles,[i]),r(e.contributedProfiles,[o])})}),test("should get profiles from remoteTerminalService when there is a remote authority",async()=>{v={remoteAuthority:"fakeremote"},l.stub(I,v),e=a.add(l.createInstance(g)),await e.hasRefreshedProfiles,r(e.availableProfiles,[]),r(e.contributedProfiles,[o]),c.setProfiles("fakeremote",[i]),await e.refreshAndAwaitAvailableProfiles(),r(e.availableProfiles,[i]),r(e.contributedProfiles,[o])}),test("should fire onDidChangeAvailableProfiles only when available profiles have changed via user config",async()=>{i.icon=k.lightBulb;let n=[];a.add(e.onDidChangeAvailableProfiles(s=>n.push(s))),await t.setUserConfiguration("terminal",{integrated:{profiles:{windows:i,linux:i,osx:i}}}),await e.hasRefreshedProfiles,r(n,[[i]]),r(e.availableProfiles,[i]),r(e.contributedProfiles,[o]),n=[],await e.refreshAndAwaitAvailableProfiles(),r(n,[])}),test("should fire onDidChangeAvailableProfiles when available or contributed profiles have changed via remote/localTerminalService",async()=>{i.isDefault=!1,c.setProfiles(void 0,[i]);const n=[];a.add(e.onDidChangeAvailableProfiles(s=>n.push(s))),await e.hasRefreshedProfiles,r(n,[[i]]),r(e.availableProfiles,[i]),r(e.contributedProfiles,[o])}),test("should call refreshAvailableProfiles _onDidChangeExtensions",async()=>{p._onDidChangeExtensions.fire();const n=[];a.add(e.onDidChangeAvailableProfiles(s=>n.push(s))),await e.hasRefreshedProfiles,r(n,[[i]]),r(e.availableProfiles,[i]),r(e.contributedProfiles,[o])}),suite("Profiles Quickpick",()=>{let n,s,d;setup(async()=>{n=new q,s=new G,l.stub(D,n),l.stub(U,s),d=l.createInstance(K)}),test("setDefault",async()=>{i.isDefault=!1,s.setProfiles([i],[o]),s.setDefaultProfileName(o.title);const u=await d.showAndGetResult("setDefault");r(u,i.profileName)}),test("setDefault to contributed",async()=>{s.setDefaultProfileName(i.profileName),n.setPick(S);const u=await d.showAndGetResult("setDefault"),P={config:{extensionIdentifier:o.extensionIdentifier,id:o.id,options:{color:void 0,icon:"debug"},title:o.title},keyMods:void 0};r(u,P)}),test("createInstance",async()=>{s.setDefaultProfileName(i.profileName);const u={...T,keyMods:{alt:!0,ctrlCmd:!1}};n.setPick(u);const P=await d.showAndGetResult("createInstance");r(P,{config:i,keyMods:{alt:!0,ctrlCmd:!1}})}),test("createInstance with contributed",async()=>{const u={...S,keyMods:{alt:!0,ctrlCmd:!1}};n.setPick(u);const P=await d.showAndGetResult("createInstance"),w={config:{extensionIdentifier:o.extensionIdentifier,id:o.id,options:{color:void 0,icon:"debug"},title:o.title},keyMods:{alt:!0,ctrlCmd:!1}};r(P,w)})})});
