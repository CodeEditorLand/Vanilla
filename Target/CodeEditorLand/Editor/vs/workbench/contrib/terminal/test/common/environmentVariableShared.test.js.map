{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/common/environmentVariableShared.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { deserializeEnvironmentVariableCollection, serializeEnvironmentVariableCollection } from '../../../../../platform/terminal/common/environmentVariableShared.js';\nimport { EnvironmentVariableMutatorType, IEnvironmentVariableMutator } from '../../../../../platform/terminal/common/environmentVariable.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('EnvironmentVariable - deserializeEnvironmentVariableCollection', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should construct correctly with 3 arguments', () => {\n\t\tconst c = deserializeEnvironmentVariableCollection([\n\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t]);\n\t\tconst keys = [...c.keys()];\n\t\tdeepStrictEqual(keys, ['A', 'B', 'C']);\n\t\tdeepStrictEqual(c.get('A'), { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\tdeepStrictEqual(c.get('B'), { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\tdeepStrictEqual(c.get('C'), { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' });\n\t});\n});\n\nsuite('EnvironmentVariable - serializeEnvironmentVariableCollection', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should correctly serialize the object', () => {\n\t\tconst collection = new Map<string, IEnvironmentVariableMutator>();\n\t\tdeepStrictEqual(serializeEnvironmentVariableCollection(collection), []);\n\t\tcollection.set('A', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\tcollection.set('B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\tcollection.set('C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' });\n\t\tdeepStrictEqual(serializeEnvironmentVariableCollection(collection), [\n\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t]);\n\t});\n});\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,0CAA0C,8CAA8C;AACjG,SAAS,gCAAgC,mCAAmC;AAC5E,SAAS,+CAA+C;AAExD,MAAM,kEAAkE,MAAM;AAC7E,0CAAwC;AAExC,OAAK,+CAA+C,MAAM;AACzD,UAAM,IAAI,yCAAyC;AAAA,MAClD,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,MACjF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,MAChF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,IAClF,CAAC;AACD,UAAM,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;AACzB,oBAAgB,MAAM,CAAC,KAAK,KAAK,GAAG,CAAC;AACrC,oBAAgB,EAAE,IAAI,GAAG,GAAG,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AACvG,oBAAgB,EAAE,IAAI,GAAG,GAAG,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AACtG,oBAAgB,EAAE,IAAI,GAAG,GAAG,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,EACxG,CAAC;AACF,CAAC;AAED,MAAM,gEAAgE,MAAM;AAC3E,0CAAwC;AAExC,OAAK,yCAAyC,MAAM;AACnD,UAAM,aAAa,oBAAI,IAAyC;AAChE,oBAAgB,uCAAuC,UAAU,GAAG,CAAC,CAAC;AACtE,eAAW,IAAI,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAC/F,eAAW,IAAI,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAC9F,eAAW,IAAI,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAC/F,oBAAgB,uCAAuC,UAAU,GAAG;AAAA,MACnE,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,MACjF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,QAAQ,UAAU,IAAI,CAAC;AAAA,MAChF,CAAC,KAAK,EAAE,OAAO,KAAK,MAAM,+BAA+B,SAAS,UAAU,IAAI,CAAC;AAAA,IAClF,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
