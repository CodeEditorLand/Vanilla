{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/node/terminalProfiles.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, fail, ok, strictEqual } from 'assert';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { ITerminalProfile, ProfileSource } from '../../../../../platform/terminal/common/terminal.js';\nimport { ITerminalConfiguration, ITerminalProfiles } from '../../common/terminal.js';\nimport { detectAvailableProfiles, IFsProvider } from '../../../../../platform/terminal/node/terminalProfiles.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\n/**\n * Assets that two profiles objects are equal, this will treat explicit undefined and unset\n * properties the same. Order of the profiles is ignored.\n */\nfunction profilesEqual(actualProfiles: ITerminalProfile[], expectedProfiles: ITerminalProfile[]) {\n\tstrictEqual(actualProfiles.length, expectedProfiles.length, `Actual: ${actualProfiles.map(e => e.profileName).join(',')}\\nExpected: ${expectedProfiles.map(e => e.profileName).join(',')}`);\n\tfor (const expected of expectedProfiles) {\n\t\tconst actual = actualProfiles.find(e => e.profileName === expected.profileName);\n\t\tok(actual, `Expected profile ${expected.profileName} not found`);\n\t\tstrictEqual(actual.profileName, expected.profileName);\n\t\tstrictEqual(actual.path, expected.path);\n\t\tdeepStrictEqual(actual.args, expected.args);\n\t\tstrictEqual(actual.isAutoDetected, expected.isAutoDetected);\n\t\tstrictEqual(actual.overrideName, expected.overrideName);\n\t}\n}\n\nsuite('Workbench - TerminalProfiles', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('detectAvailableProfiles', () => {\n\t\tif (isWindows) {\n\t\t\ttest('should detect Git Bash and provide login args', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe'\n\t\t\t\t]);\n\t\t\t\tconst config: ITestTerminalConfig = {\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'Git Bash': { source: ProfileSource.GitBash }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {}\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t};\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: config } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ profileName: 'Git Bash', path: 'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe', args: ['--login', '-i'], isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('should allow source to have args', async () => {\n\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe'\n\t\t\t\t];\n\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\tconst config: ITestTerminalConfig = {\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'PowerShell': { source: ProfileSource.Pwsh, args: ['-NoProfile'], overrideName: true }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {},\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t};\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: config } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ profileName: 'PowerShell', path: 'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', overrideName: true, args: ['-NoProfile'], isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('configured args should override default source ones', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe'\n\t\t\t\t]);\n\t\t\t\tconst config: ITestTerminalConfig = {\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'Git Bash': { source: ProfileSource.GitBash, args: [] }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {}\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t};\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: config } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected = [{ profileName: 'Git Bash', path: 'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe', args: [], isAutoDetected: undefined, overrideName: undefined, isDefault: true }];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\tsuite('pwsh source detection/fallback', () => {\n\t\t\t\tconst pwshSourceConfig = ({\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'PowerShell': { source: ProfileSource.Pwsh }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {},\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t} as ITestTerminalConfig) as ITerminalConfiguration;\n\n\t\t\t\ttest('should prefer pwsh 7 to Windows PowerShell', async () => {\n\t\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe',\n\t\t\t\t\t\t'C:\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe',\n\t\t\t\t\t\t'C:\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n\t\t\t\t\t];\n\t\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: pwshSourceConfig } });\n\t\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\t\tconst expected = [\n\t\t\t\t\t\t{ profileName: 'PowerShell', path: 'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', isDefault: true }\n\t\t\t\t\t];\n\t\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t\t});\n\t\t\t\ttest('should prefer pwsh 7 to pwsh 6', async () => {\n\t\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe',\n\t\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\6\\\\pwsh.exe',\n\t\t\t\t\t\t'C:\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe',\n\t\t\t\t\t\t'C:\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n\t\t\t\t\t];\n\t\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: pwshSourceConfig } });\n\t\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\t\tconst expected = [\n\t\t\t\t\t\t{ profileName: 'PowerShell', path: 'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', isDefault: true }\n\t\t\t\t\t];\n\t\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t\t});\n\t\t\t\ttest('should fallback to Windows PowerShell', async () => {\n\t\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t\t'C:\\\\Windows\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe',\n\t\t\t\t\t\t'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n\t\t\t\t\t];\n\t\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: pwshSourceConfig } });\n\t\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\t\tstrictEqual(profiles.length, 1);\n\t\t\t\t\tstrictEqual(profiles[0].profileName, 'PowerShell');\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tconst absoluteConfig = ({\n\t\t\t\tprofiles: {\n\t\t\t\t\twindows: {},\n\t\t\t\t\tosx: {\n\t\t\t\t\t\t'fakeshell1': { path: '/bin/fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: '/bin/fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: '/bin/fakeshell3' }\n\t\t\t\t\t},\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\t'fakeshell1': { path: '/bin/fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: '/bin/fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: '/bin/fakeshell3' }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tuseWslProfiles: false\n\t\t\t} as ITestTerminalConfig) as ITerminalConfiguration;\n\t\t\tconst onPathConfig = ({\n\t\t\t\tprofiles: {\n\t\t\t\t\twindows: {},\n\t\t\t\t\tosx: {\n\t\t\t\t\t\t'fakeshell1': { path: 'fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: 'fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: 'fakeshell3' }\n\t\t\t\t\t},\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\t'fakeshell1': { path: 'fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: 'fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: 'fakeshell3' }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tuseWslProfiles: false\n\t\t\t} as ITestTerminalConfig) as ITerminalConfiguration;\n\n\t\t\ttest('should detect shells via absolute paths', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'/bin/fakeshell1',\n\t\t\t\t\t'/bin/fakeshell3'\n\t\t\t\t]);\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: absoluteConfig } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected: ITerminalProfile[] = [\n\t\t\t\t\t{ profileName: 'fakeshell1', path: '/bin/fakeshell1', isDefault: true },\n\t\t\t\t\t{ profileName: 'fakeshell3', path: '/bin/fakeshell3', isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('should auto detect shells via /etc/shells', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'/bin/fakeshell1',\n\t\t\t\t\t'/bin/fakeshell3'\n\t\t\t\t], '/bin/fakeshell1\\n/bin/fakeshell3');\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: onPathConfig } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, true, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected: ITerminalProfile[] = [\n\t\t\t\t\t{ profileName: 'fakeshell1', path: '/bin/fakeshell1', isFromPath: true, isDefault: true },\n\t\t\t\t\t{ profileName: 'fakeshell3', path: '/bin/fakeshell3', isFromPath: true, isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('should validate auto detected shells from /etc/shells exist', async () => {\n\t\t\t\t// fakeshell3 exists in /etc/shells but not on FS\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'/bin/fakeshell1'\n\t\t\t\t], '/bin/fakeshell1\\n/bin/fakeshell3');\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: onPathConfig } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, true, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected: ITerminalProfile[] = [\n\t\t\t\t\t{ profileName: 'fakeshell1', path: '/bin/fakeshell1', isFromPath: true, isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction createFsProvider(expectedPaths: string[], etcShellsContent: string = ''): IFsProvider {\n\t\tconst provider = {\n\t\t\tasync existsFile(path: string): Promise<boolean> {\n\t\t\t\treturn expectedPaths.includes(path);\n\t\t\t},\n\t\t\tasync readFile(path: string): Promise<Buffer> {\n\t\t\t\tif (path !== '/etc/shells') {\n\t\t\t\t\tfail('Unexepected path');\n\t\t\t\t}\n\t\t\t\treturn Buffer.from(etcShellsContent);\n\t\t\t}\n\t\t};\n\t\treturn provider;\n\t}\n});\n\nexport interface ITestTerminalConfig {\n\tprofiles: ITerminalProfiles;\n\tuseWslProfiles: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
