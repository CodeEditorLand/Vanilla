{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/capabilities/commandDetectionCapability.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from '@xterm/xterm';\nimport { deepStrictEqual, ok } from 'assert';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { ITerminalCommand } from '../../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { CommandDetectionCapability } from '../../../../../../platform/terminal/common/capabilities/commandDetectionCapability.js';\nimport { writeP } from '../../../browser/terminalTestHelpers.js';\nimport { workbenchInstantiationService } from '../../../../../test/browser/workbenchTestServices.js';\n\ntype TestTerminalCommandMatch = Pick<ITerminalCommand, 'command' | 'cwd' | 'exitCode'> & { marker: { line: number } };\n\nclass TestCommandDetectionCapability extends CommandDetectionCapability {\n\tclearCommands() {\n\t\tthis._commands.length = 0;\n\t}\n}\n\nsuite('CommandDetectionCapability', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet xterm: Terminal;\n\tlet capability: TestCommandDetectionCapability;\n\tlet addEvents: ITerminalCommand[];\n\n\tfunction assertCommands(expectedCommands: TestTerminalCommandMatch[]) {\n\t\tdeepStrictEqual(capability.commands.map(e => e.command), expectedCommands.map(e => e.command));\n\t\tdeepStrictEqual(capability.commands.map(e => e.cwd), expectedCommands.map(e => e.cwd));\n\t\tdeepStrictEqual(capability.commands.map(e => e.exitCode), expectedCommands.map(e => e.exitCode));\n\t\tdeepStrictEqual(capability.commands.map(e => e.marker?.line), expectedCommands.map(e => e.marker?.line));\n\t\t// Ensure timestamps are set and were captured recently\n\t\tfor (const command of capability.commands) {\n\t\t\tok(Math.abs(Date.now() - command.timestamp) < 2000);\n\t\t}\n\t\tdeepStrictEqual(addEvents, capability.commands);\n\t\t// Clear the commands to avoid re-asserting past commands\n\t\taddEvents.length = 0;\n\t\tcapability.clearCommands();\n\t}\n\n\tasync function printStandardCommand(prompt: string, command: string, output: string, cwd: string | undefined, exitCode: number) {\n\t\tif (cwd !== undefined) {\n\t\t\tcapability.setCwd(cwd);\n\t\t}\n\t\tcapability.handlePromptStart();\n\t\tawait writeP(xterm, `\\r${prompt}`);\n\t\tcapability.handleCommandStart();\n\t\tawait writeP(xterm, command);\n\t\tcapability.handleCommandExecuted();\n\t\tawait writeP(xterm, `\\r\\n${output}\\r\\n`);\n\t\tcapability.handleCommandFinished(exitCode);\n\t}\n\n\tasync function printCommandStart(prompt: string) {\n\t\tcapability.handlePromptStart();\n\t\tawait writeP(xterm, `\\r${prompt}`);\n\t\tcapability.handleCommandStart();\n\t}\n\n\n\tsetup(async () => {\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\n\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true, cols: 80 }));\n\t\tconst instantiationService = workbenchInstantiationService(undefined, store);\n\t\tcapability = store.add(instantiationService.createInstance(TestCommandDetectionCapability, xterm));\n\t\taddEvents = [];\n\t\tstore.add(capability.onCommandFinished(e => addEvents.push(e)));\n\t\tassertCommands([]);\n\t});\n\n\ttest('should not add commands when no capability methods are triggered', async () => {\n\t\tawait writeP(xterm, 'foo\\r\\nbar\\r\\n');\n\t\tassertCommands([]);\n\t\tawait writeP(xterm, 'baz\\r\\n');\n\t\tassertCommands([]);\n\t});\n\n\ttest('should add commands for expected capability method calls', async () => {\n\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', undefined, 0);\n\t\tawait printCommandStart('$ ');\n\t\tassertCommands([{\n\t\t\tcommand: 'echo foo',\n\t\t\texitCode: 0,\n\t\t\tcwd: undefined,\n\t\t\tmarker: { line: 0 }\n\t\t}]);\n\t});\n\n\ttest('should trim the command when command executed appears on the following line', async () => {\n\t\tawait printStandardCommand('$ ', 'echo foo\\r\\n', 'foo', undefined, 0);\n\t\tawait printCommandStart('$ ');\n\t\tassertCommands([{\n\t\t\tcommand: 'echo foo',\n\t\t\texitCode: 0,\n\t\t\tcwd: undefined,\n\t\t\tmarker: { line: 0 }\n\t\t}]);\n\t});\n\n\tsuite('cwd', () => {\n\t\ttest('should add cwd to commands when it\\'s set', async () => {\n\t\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', '/home', 0);\n\t\t\tawait printStandardCommand('$ ', 'echo bar', 'bar', '/home/second', 0);\n\t\t\tawait printCommandStart('$ ');\n\t\t\tassertCommands([\n\t\t\t\t{ command: 'echo foo', exitCode: 0, cwd: '/home', marker: { line: 0 } },\n\t\t\t\t{ command: 'echo bar', exitCode: 0, cwd: '/home/second', marker: { line: 2 } }\n\t\t\t]);\n\t\t});\n\t\ttest('should add old cwd to commands if no cwd sequence is output', async () => {\n\t\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', '/home', 0);\n\t\t\tawait printStandardCommand('$ ', 'echo bar', 'bar', undefined, 0);\n\t\t\tawait printCommandStart('$ ');\n\t\t\tassertCommands([\n\t\t\t\t{ command: 'echo foo', exitCode: 0, cwd: '/home', marker: { line: 0 } },\n\t\t\t\t{ command: 'echo bar', exitCode: 0, cwd: '/home', marker: { line: 2 } }\n\t\t\t]);\n\t\t});\n\t\ttest('should use an undefined cwd if it\\'s not set initially', async () => {\n\t\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', undefined, 0);\n\t\t\tawait printStandardCommand('$ ', 'echo bar', 'bar', '/home', 0);\n\t\t\tawait printCommandStart('$ ');\n\t\t\tassertCommands([\n\t\t\t\t{ command: 'echo foo', exitCode: 0, cwd: undefined, marker: { line: 0 } },\n\t\t\t\t{ command: 'echo bar', exitCode: 0, cwd: '/home', marker: { line: 2 } }\n\t\t\t]);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
