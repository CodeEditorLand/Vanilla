{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/common/terminalEnvironment.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual } from 'assert';\nimport { IStringDictionary } from '../../../../../base/common/collections.js';\nimport { isWindows, OperatingSystem } from '../../../../../base/common/platform.js';\nimport { URI as Uri } from '../../../../../base/common/uri.js';\nimport { addTerminalEnvironmentKeys, createTerminalEnvironment, getCwd, getLangEnvVariable, mergeEnvironments, preparePathForShell, shouldSetLangEnvVariable } from '../../common/terminalEnvironment.js';\nimport { GeneralShellType, PosixShellType, WindowsShellType } from '../../../../../platform/terminal/common/terminal.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('Workbench - TerminalEnvironment', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('addTerminalEnvironmentKeys', () => {\n\t\ttest('should set expected variables', () => {\n\t\t\tconst env: { [key: string]: any } = {};\n\t\t\taddTerminalEnvironmentKeys(env, '1.2.3', 'en', 'on');\n\t\t\tstrictEqual(env['TERM_PROGRAM'], 'vscode');\n\t\t\tstrictEqual(env['TERM_PROGRAM_VERSION'], '1.2.3');\n\t\t\tstrictEqual(env['COLORTERM'], 'truecolor');\n\t\t\tstrictEqual(env['LANG'], 'en_US.UTF-8');\n\t\t});\n\t\ttest('should use language variant for LANG that is provided in locale', () => {\n\t\t\tconst env: { [key: string]: any } = {};\n\t\t\taddTerminalEnvironmentKeys(env, '1.2.3', 'en-au', 'on');\n\t\t\tstrictEqual(env['LANG'], 'en_AU.UTF-8', 'LANG is equal to the requested locale with UTF-8');\n\t\t});\n\t\ttest('should fallback to en_US when no locale is provided', () => {\n\t\t\tconst env2: { [key: string]: any } = { FOO: 'bar' };\n\t\t\taddTerminalEnvironmentKeys(env2, '1.2.3', undefined, 'on');\n\t\t\tstrictEqual(env2['LANG'], 'en_US.UTF-8', 'LANG is equal to en_US.UTF-8 as fallback.'); // More info on issue #14586\n\t\t});\n\t\ttest('should fallback to en_US when an invalid locale is provided', () => {\n\t\t\tconst env3 = { LANG: 'replace' };\n\t\t\taddTerminalEnvironmentKeys(env3, '1.2.3', undefined, 'on');\n\t\t\tstrictEqual(env3['LANG'], 'en_US.UTF-8', 'LANG is set to the fallback LANG');\n\t\t});\n\t\ttest('should override existing LANG', () => {\n\t\t\tconst env4 = { LANG: 'en_AU.UTF-8' };\n\t\t\taddTerminalEnvironmentKeys(env4, '1.2.3', undefined, 'on');\n\t\t\tstrictEqual(env4['LANG'], 'en_US.UTF-8', 'LANG is equal to the parent environment\\'s LANG');\n\t\t});\n\t});\n\n\tsuite('shouldSetLangEnvVariable', () => {\n\t\ttest('auto', () => {\n\t\t\tstrictEqual(shouldSetLangEnvVariable({}, 'auto'), true);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US' }, 'auto'), true);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.utf' }, 'auto'), true);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.utf8' }, 'auto'), false);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.UTF-8' }, 'auto'), false);\n\t\t});\n\t\ttest('off', () => {\n\t\t\tstrictEqual(shouldSetLangEnvVariable({}, 'off'), false);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US' }, 'off'), false);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.utf' }, 'off'), false);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.utf8' }, 'off'), false);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.UTF-8' }, 'off'), false);\n\t\t});\n\t\ttest('on', () => {\n\t\t\tstrictEqual(shouldSetLangEnvVariable({}, 'on'), true);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US' }, 'on'), true);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.utf' }, 'on'), true);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.utf8' }, 'on'), true);\n\t\t\tstrictEqual(shouldSetLangEnvVariable({ LANG: 'en-US.UTF-8' }, 'on'), true);\n\t\t});\n\t});\n\n\tsuite('getLangEnvVariable', () => {\n\t\ttest('should fallback to en_US when no locale is provided', () => {\n\t\t\tstrictEqual(getLangEnvVariable(undefined), 'en_US.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable(''), 'en_US.UTF-8');\n\t\t});\n\t\ttest('should fallback to default language variants when variant isn\\'t provided', () => {\n\t\t\tstrictEqual(getLangEnvVariable('af'), 'af_ZA.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('am'), 'am_ET.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('be'), 'be_BY.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('bg'), 'bg_BG.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('ca'), 'ca_ES.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('cs'), 'cs_CZ.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('da'), 'da_DK.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('de'), 'de_DE.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('el'), 'el_GR.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('en'), 'en_US.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('es'), 'es_ES.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('et'), 'et_EE.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('eu'), 'eu_ES.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('fi'), 'fi_FI.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('fr'), 'fr_FR.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('he'), 'he_IL.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('hr'), 'hr_HR.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('hu'), 'hu_HU.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('hy'), 'hy_AM.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('is'), 'is_IS.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('it'), 'it_IT.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('ja'), 'ja_JP.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('kk'), 'kk_KZ.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('ko'), 'ko_KR.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('lt'), 'lt_LT.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('nl'), 'nl_NL.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('no'), 'no_NO.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('pl'), 'pl_PL.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('pt'), 'pt_BR.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('ro'), 'ro_RO.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('ru'), 'ru_RU.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('sk'), 'sk_SK.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('sl'), 'sl_SI.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('sr'), 'sr_YU.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('sv'), 'sv_SE.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('tr'), 'tr_TR.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('uk'), 'uk_UA.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('zh'), 'zh_CN.UTF-8');\n\t\t});\n\t\ttest('should set language variant based on full locale', () => {\n\t\t\tstrictEqual(getLangEnvVariable('en-AU'), 'en_AU.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('en-au'), 'en_AU.UTF-8');\n\t\t\tstrictEqual(getLangEnvVariable('fa-ke'), 'fa_KE.UTF-8');\n\t\t});\n\t});\n\n\tsuite('mergeEnvironments', () => {\n\t\ttest('should add keys', () => {\n\t\t\tconst parent = {\n\t\t\t\ta: 'b'\n\t\t\t};\n\t\t\tconst other = {\n\t\t\t\tc: 'd'\n\t\t\t};\n\t\t\tmergeEnvironments(parent, other);\n\t\t\tdeepStrictEqual(parent, {\n\t\t\t\ta: 'b',\n\t\t\t\tc: 'd'\n\t\t\t});\n\t\t});\n\n\t\t(!isWindows ? test.skip : test)('should add keys ignoring case on Windows', () => {\n\t\t\tconst parent = {\n\t\t\t\ta: 'b'\n\t\t\t};\n\t\t\tconst other = {\n\t\t\t\tA: 'c'\n\t\t\t};\n\t\t\tmergeEnvironments(parent, other);\n\t\t\tdeepStrictEqual(parent, {\n\t\t\t\ta: 'c'\n\t\t\t});\n\t\t});\n\n\t\ttest('null values should delete keys from the parent env', () => {\n\t\t\tconst parent = {\n\t\t\t\ta: 'b',\n\t\t\t\tc: 'd'\n\t\t\t};\n\t\t\tconst other: IStringDictionary<string | null> = {\n\t\t\t\ta: null\n\t\t\t};\n\t\t\tmergeEnvironments(parent, other);\n\t\t\tdeepStrictEqual(parent, {\n\t\t\t\tc: 'd'\n\t\t\t});\n\t\t});\n\n\t\t(!isWindows ? test.skip : test)('null values should delete keys from the parent env ignoring case on Windows', () => {\n\t\t\tconst parent = {\n\t\t\t\ta: 'b',\n\t\t\t\tc: 'd'\n\t\t\t};\n\t\t\tconst other: IStringDictionary<string | null> = {\n\t\t\t\tA: null\n\t\t\t};\n\t\t\tmergeEnvironments(parent, other);\n\t\t\tdeepStrictEqual(parent, {\n\t\t\t\tc: 'd'\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('getCwd', () => {\n\t\t// This helper checks the paths in a cross-platform friendly manner\n\t\tfunction assertPathsMatch(a: string, b: string): void {\n\t\t\tstrictEqual(Uri.file(a).fsPath, Uri.file(b).fsPath);\n\t\t}\n\n\t\ttest('should default to userHome for an empty workspace', async () => {\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, undefined, undefined), '/userHome/');\n\t\t});\n\n\t\ttest('should use to the workspace if it exists', async () => {\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, Uri.file('/foo'), undefined), '/foo');\n\t\t});\n\n\t\ttest('should use an absolute custom cwd as is', async () => {\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, undefined, '/foo'), '/foo');\n\t\t});\n\n\t\ttest('should normalize a relative custom cwd against the workspace path', async () => {\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, Uri.file('/bar'), 'foo'), '/bar/foo');\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, Uri.file('/bar'), './foo'), '/bar/foo');\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, Uri.file('/bar'), '../foo'), '/foo');\n\t\t});\n\n\t\ttest('should fall back for relative a custom cwd that doesn\\'t have a workspace', async () => {\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, undefined, 'foo'), '/userHome/');\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, undefined, './foo'), '/userHome/');\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [] }, '/userHome/', undefined, undefined, '../foo'), '/userHome/');\n\t\t});\n\n\t\ttest('should ignore custom cwd when told to ignore', async () => {\n\t\t\tassertPathsMatch(await getCwd({ executable: undefined, args: [], ignoreConfigurationCwd: true }, '/userHome/', undefined, Uri.file('/bar'), '/foo'), '/bar');\n\t\t});\n\t});\n\n\tsuite('preparePathForShell', () => {\n\t\tconst wslPathBackend = {\n\t\t\tgetWslPath: async (original: string, direction: 'unix-to-win' | 'win-to-unix') => {\n\t\t\t\tif (direction === 'unix-to-win') {\n\t\t\t\t\tconst match = original.match(/^\\/mnt\\/(?<drive>[a-zA-Z])\\/(?<path>.+)$/);\n\t\t\t\t\tconst groups = match?.groups;\n\t\t\t\t\tif (!groups) {\n\t\t\t\t\t\treturn original;\n\t\t\t\t\t}\n\t\t\t\t\treturn `${groups.drive}:\\\\${groups.path.replace(/\\//g, '\\\\')}`;\n\t\t\t\t}\n\t\t\t\tconst match = original.match(/(?<drive>[a-zA-Z]):\\\\(?<path>.+)/);\n\t\t\t\tconst groups = match?.groups;\n\t\t\t\tif (!groups) {\n\t\t\t\t\treturn original;\n\t\t\t\t}\n\t\t\t\treturn `/mnt/${groups.drive.toLowerCase()}/${groups.path.replace(/\\\\/g, '/')}`;\n\t\t\t}\n\t\t};\n\t\tsuite('Windows frontend, Windows backend', () => {\n\t\t\ttest('Command Prompt', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'cmd', 'cmd', WindowsShellType.CommandPrompt, wslPathBackend, OperatingSystem.Windows, true), `c:\\\\foo\\\\bar`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar\\'baz', 'cmd', 'cmd', WindowsShellType.CommandPrompt, wslPathBackend, OperatingSystem.Windows, true), `c:\\\\foo\\\\bar'baz`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar$(echo evil)baz', 'cmd', 'cmd', WindowsShellType.CommandPrompt, wslPathBackend, OperatingSystem.Windows, true), `\"c:\\\\foo\\\\bar$(echo evil)baz\"`);\n\t\t\t});\n\t\t\ttest('PowerShell', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'pwsh', 'pwsh', GeneralShellType.PowerShell, wslPathBackend, OperatingSystem.Windows, true), `c:\\\\foo\\\\bar`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar\\'baz', 'pwsh', 'pwsh', GeneralShellType.PowerShell, wslPathBackend, OperatingSystem.Windows, true), `& 'c:\\\\foo\\\\bar''baz'`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar$(echo evil)baz', 'pwsh', 'pwsh', GeneralShellType.PowerShell, wslPathBackend, OperatingSystem.Windows, true), `& 'c:\\\\foo\\\\bar$(echo evil)baz'`);\n\t\t\t});\n\t\t\ttest('Git Bash', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'bash', 'bash', WindowsShellType.GitBash, wslPathBackend, OperatingSystem.Windows, true), `'c:/foo/bar'`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar$(echo evil)baz', 'bash', 'bash', WindowsShellType.GitBash, wslPathBackend, OperatingSystem.Windows, true), `'c:/foo/bar(echo evil)baz'`);\n\t\t\t});\n\t\t\ttest('WSL', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'bash', 'bash', WindowsShellType.Wsl, wslPathBackend, OperatingSystem.Windows, true), '/mnt/c/foo/bar');\n\t\t\t});\n\t\t});\n\t\tsuite('Windows frontend, Linux backend', () => {\n\t\t\ttest('Bash', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('/foo/bar', 'bash', 'bash', PosixShellType.Bash, wslPathBackend, OperatingSystem.Linux, true), `'/foo/bar'`);\n\t\t\t\tstrictEqual(await preparePathForShell('/foo/bar\\'baz', 'bash', 'bash', PosixShellType.Bash, wslPathBackend, OperatingSystem.Linux, true), `'/foo/barbaz'`);\n\t\t\t\tstrictEqual(await preparePathForShell('/foo/bar$(echo evil)baz', 'bash', 'bash', PosixShellType.Bash, wslPathBackend, OperatingSystem.Linux, true), `'/foo/bar(echo evil)baz'`);\n\t\t\t});\n\t\t});\n\t\tsuite('Linux frontend, Windows backend', () => {\n\t\t\ttest('Command Prompt', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'cmd', 'cmd', WindowsShellType.CommandPrompt, wslPathBackend, OperatingSystem.Windows, false), `c:\\\\foo\\\\bar`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar\\'baz', 'cmd', 'cmd', WindowsShellType.CommandPrompt, wslPathBackend, OperatingSystem.Windows, false), `c:\\\\foo\\\\bar'baz`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar$(echo evil)baz', 'cmd', 'cmd', WindowsShellType.CommandPrompt, wslPathBackend, OperatingSystem.Windows, false), `\"c:\\\\foo\\\\bar$(echo evil)baz\"`);\n\t\t\t});\n\t\t\ttest('PowerShell', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'pwsh', 'pwsh', GeneralShellType.PowerShell, wslPathBackend, OperatingSystem.Windows, false), `c:\\\\foo\\\\bar`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar\\'baz', 'pwsh', 'pwsh', GeneralShellType.PowerShell, wslPathBackend, OperatingSystem.Windows, false), `& 'c:\\\\foo\\\\bar''baz'`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar$(echo evil)baz', 'pwsh', 'pwsh', GeneralShellType.PowerShell, wslPathBackend, OperatingSystem.Windows, false), `& 'c:\\\\foo\\\\bar$(echo evil)baz'`);\n\t\t\t});\n\t\t\ttest('Git Bash', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'bash', 'bash', WindowsShellType.GitBash, wslPathBackend, OperatingSystem.Windows, false), `'c:/foo/bar'`);\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar$(echo evil)baz', 'bash', 'bash', WindowsShellType.GitBash, wslPathBackend, OperatingSystem.Windows, false), `'c:/foo/bar(echo evil)baz'`);\n\t\t\t});\n\t\t\ttest('WSL', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('c:\\\\foo\\\\bar', 'bash', 'bash', WindowsShellType.Wsl, wslPathBackend, OperatingSystem.Windows, false), '/mnt/c/foo/bar');\n\t\t\t});\n\t\t});\n\t\tsuite('Linux frontend, Linux backend', () => {\n\t\t\ttest('Bash', async () => {\n\t\t\t\tstrictEqual(await preparePathForShell('/foo/bar', 'bash', 'bash', PosixShellType.Bash, wslPathBackend, OperatingSystem.Linux, false), `'/foo/bar'`);\n\t\t\t\tstrictEqual(await preparePathForShell('/foo/bar\\'baz', 'bash', 'bash', PosixShellType.Bash, wslPathBackend, OperatingSystem.Linux, false), `'/foo/barbaz'`);\n\t\t\t\tstrictEqual(await preparePathForShell('/foo/bar$(echo evil)baz', 'bash', 'bash', PosixShellType.Bash, wslPathBackend, OperatingSystem.Linux, false), `'/foo/bar(echo evil)baz'`);\n\t\t\t});\n\t\t});\n\t});\n\tsuite('createTerminalEnvironment', () => {\n\t\tconst commonVariables = {\n\t\t\tCOLORTERM: 'truecolor',\n\t\t\tTERM_PROGRAM: 'vscode'\n\t\t};\n\t\ttest('should retain variables equal to the empty string', async () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tawait createTerminalEnvironment({}, undefined, undefined, undefined, 'off', { foo: 'bar', empty: '' }),\n\t\t\t\t{ foo: 'bar', empty: '', ...commonVariables }\n\t\t\t);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["match", "groups"]
}
