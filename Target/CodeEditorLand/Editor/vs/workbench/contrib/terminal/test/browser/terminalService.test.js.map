{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/terminalService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { fail } from 'assert';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\nimport { TestDialogService } from '../../../../../platform/dialogs/test/common/testDialogService.js';\nimport { TerminalLocation } from '../../../../../platform/terminal/common/terminal.js';\nimport { ITerminalInstance, ITerminalInstanceService, ITerminalService } from '../../browser/terminal.js';\nimport { TerminalService } from '../../browser/terminalService.js';\nimport { TERMINAL_CONFIG_SECTION } from '../../common/terminal.js';\nimport { IRemoteAgentService } from '../../../../services/remote/common/remoteAgentService.js';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nsuite('Workbench - TerminalService', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet terminalService: TerminalService;\n\tlet configurationService: TestConfigurationService;\n\tlet dialogService: TestDialogService;\n\n\tsetup(async () => {\n\t\tdialogService = new TestDialogService();\n\t\tconfigurationService = new TestConfigurationService({\n\t\t\tfiles: {},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tconfirmOnKill: 'never'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst instantiationService = workbenchInstantiationService({\n\t\t\tconfigurationService: () => configurationService,\n\t\t}, store);\n\t\tinstantiationService.stub(IDialogService, dialogService);\n\t\tinstantiationService.stub(ITerminalInstanceService, 'getBackend', undefined);\n\t\tinstantiationService.stub(ITerminalInstanceService, 'getRegisteredBackends', []);\n\t\tinstantiationService.stub(IRemoteAgentService, 'getConnection', null);\n\n\t\tterminalService = store.add(instantiationService.createInstance(TerminalService));\n\t\tinstantiationService.stub(ITerminalService, terminalService);\n\t});\n\n\tsuite('safeDisposeTerminal', () => {\n\t\tlet onExitEmitter: Emitter<number | undefined>;\n\n\t\tsetup(() => {\n\t\t\tonExitEmitter = store.add(new Emitter<number | undefined>());\n\t\t});\n\n\t\ttest('should not show prompt when confirmOnKill is never', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'never');\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Editor,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should not show prompt when any terminal editor is closed (handled by editor itself)', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'editor');\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Editor,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tawait setConfirmOnKill(configurationService, 'always');\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Editor,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should not show prompt when confirmOnKill is editor and panel terminal is closed', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'editor');\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should show prompt when confirmOnKill is panel and panel terminal is closed', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'panel');\n\t\t\t// No child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\t// Child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tdispose: () => fail()\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should show prompt when confirmOnKill is always and panel terminal is closed', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'always');\n\t\t\t// No child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\t// Child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tdispose: () => fail()\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t});\n});\n\nasync function setConfirmOnKill(configurationService: TestConfigurationService, value: 'never' | 'always' | 'panel' | 'editor') {\n\tawait configurationService.setUserConfiguration(TERMINAL_CONFIG_SECTION, { confirmOnKill: value });\n\tconfigurationService.onDidChangeConfigurationEmitter.fire({\n\t\taffectsConfiguration: () => true,\n\t\taffectedKeys: ['terminal.integrated.confirmOnKill']\n\t} as any);\n}\n"],
  "mappings": "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",
  "names": []
}
