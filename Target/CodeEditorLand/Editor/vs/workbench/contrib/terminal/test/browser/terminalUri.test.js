import{deepStrictEqual as r,strictEqual as o}from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as i}from"../../../../../base/test/common/utils.js";import{getInstanceFromResource as a,getTerminalResourcesFromDragEvent as n,getTerminalUri as t}from"../../browser/terminalUri.js";function s(e){return{dataTransfer:{getData:()=>e}}}suite("terminalUri",()=>{i(),suite("getTerminalResourcesFromDragEvent",()=>{test("should give undefined when no terminal resources is in event",()=>{r(n(s(""))?.map(e=>e.toString()),void 0)}),test("should give undefined when an empty terminal resources array is in event",()=>{r(n(s("[]"))?.map(e=>e.toString()),void 0)}),test("should return terminal resource when event contains one",()=>{r(n(s('["vscode-terminal:/1626874386474/3"]'))?.map(e=>e.toString()),["vscode-terminal:/1626874386474/3"])}),test("should return multiple terminal resources when event contains multiple",()=>{r(n(s('["vscode-terminal:/foo/1","vscode-terminal:/bar/2"]'))?.map(e=>e.toString()),["vscode-terminal:/foo/1","vscode-terminal:/bar/2"])})}),suite("getInstanceFromResource",()=>{test("should return undefined if there is no match",()=>{o(a([{resource:t("workspace",2,"title")}],t("workspace",1)),void 0)}),test("should return a result if there is a match",()=>{const e={resource:t("workspace",2,"title")};o(a([{resource:t("workspace",1,"title")},e,{resource:t("workspace",3,"title")}],t("workspace",2)),e)}),test("should ignore the fragment",()=>{const e={resource:t("workspace",2,"title")};o(a([{resource:t("workspace",1,"title")},e,{resource:t("workspace",3,"title")}],t("workspace",2,"does not match!")),e)})})});
