{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/terminalInstance.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual } from 'assert';\nimport { Event } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { TerminalCapability } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { TerminalCapabilityStore } from '../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { ITerminalChildProcess, ITerminalProfile } from '../../../../../platform/terminal/common/terminal.js';\nimport { IWorkspaceFolder } from '../../../../../platform/workspace/common/workspace.js';\nimport { IViewDescriptorService } from '../../../../common/views.js';\nimport { ITerminalConfigurationService, ITerminalInstance, ITerminalInstanceService } from '../../browser/terminal.js';\nimport { TerminalConfigurationService } from '../../browser/terminalConfigurationService.js';\nimport { parseExitResult, TerminalInstance, TerminalLabelComputer } from '../../browser/terminalInstance.js';\nimport { IEnvironmentVariableService } from '../../common/environmentVariable.js';\nimport { EnvironmentVariableService } from '../../common/environmentVariableService.js';\nimport { ITerminalProfileResolverService, ProcessState } from '../../common/terminal.js';\nimport { TestViewDescriptorService } from './xterm/xtermTerminal.test.js';\nimport { fixPath } from '../../../../services/search/test/browser/queryBuilder.test.js';\nimport { TestTerminalProfileResolverService, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nconst root1 = '/foo/root1';\nconst ROOT_1 = fixPath(root1);\nconst root2 = '/foo/root2';\nconst ROOT_2 = fixPath(root2);\n\nclass MockTerminalProfileResolverService extends TestTerminalProfileResolverService {\n\toverride async getDefaultProfile(): Promise<ITerminalProfile> {\n\t\treturn {\n\t\t\tprofileName: \"my-sh\",\n\t\t\tpath: \"/usr/bin/zsh\",\n\t\t\tenv: {\n\t\t\t\tTEST: \"TEST\",\n\t\t\t},\n\t\t\tisDefault: true,\n\t\t\tisUnsafePath: false,\n\t\t\tisFromPath: true,\n\t\t\ticon: {\n\t\t\t\tid: \"terminal-linux\",\n\t\t\t},\n\t\t\tcolor: \"terminal.ansiYellow\",\n\t\t};\n\t}\n}\n\nconst terminalShellTypeContextKey = {\n\tset: () => { },\n\treset: () => { },\n\tget: () => undefined\n};\n\nconst terminalInRunCommandPicker = {\n\tset: () => { },\n\treset: () => { },\n\tget: () => undefined\n};\n\nclass TestTerminalChildProcess extends Disposable implements ITerminalChildProcess {\n\tid: number = 0;\n\tget capabilities() { return []; }\n\tconstructor(\n\t\treadonly shouldPersist: boolean\n\t) {\n\t\tsuper();\n\t}\n\tupdateProperty(property: any, value: any): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tonProcessOverrideDimensions?: Event<any> | undefined;\n\tonProcessResolvedShellLaunchConfig?: Event<any> | undefined;\n\tonDidChangeHasChildProcesses?: Event<any> | undefined;\n\n\tonDidChangeProperty = Event.None;\n\tonProcessData = Event.None;\n\tonProcessExit = Event.None;\n\tonProcessReady = Event.None;\n\tonProcessTitleChanged = Event.None;\n\tonProcessShellTypeChanged = Event.None;\n\tasync start(): Promise<undefined> { return undefined; }\n\tshutdown(immediate: boolean): void { }\n\tinput(data: string): void { }\n\tresize(cols: number, rows: number): void { }\n\tclearBuffer(): void { }\n\tacknowledgeDataEvent(charCount: number): void { }\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> { }\n\tasync getInitialCwd(): Promise<string> { return ''; }\n\tasync getCwd(): Promise<string> { return ''; }\n\tasync processBinary(data: string): Promise<void> { }\n\trefreshProperty(property: any): Promise<any> { return Promise.resolve(''); }\n}\n\nclass TestTerminalInstanceService extends Disposable implements Partial<ITerminalInstanceService> {\n\tgetBackend() {\n\t\treturn {\n\t\t\tonPtyHostExit: Event.None,\n\t\t\tonPtyHostUnresponsive: Event.None,\n\t\t\tonPtyHostResponsive: Event.None,\n\t\t\tonPtyHostRestart: Event.None,\n\t\t\tonDidMoveWindowInstance: Event.None,\n\t\t\tonDidRequestDetach: Event.None,\n\t\t\tcreateProcess: (\n\t\t\t\tshellLaunchConfig: any,\n\t\t\t\tcwd: string,\n\t\t\t\tcols: number,\n\t\t\t\trows: number,\n\t\t\t\tunicodeVersion: '6' | '11',\n\t\t\t\tenv: any,\n\t\t\t\twindowsEnableConpty: boolean,\n\t\t\t\tshouldPersist: boolean\n\t\t\t) => this._register(new TestTerminalChildProcess(shouldPersist)),\n\t\t\tgetLatency: () => Promise.resolve([])\n\t\t} as any;\n\t}\n}\n\nsuite('Workbench - TerminalInstance', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('TerminalInstance', () => {\n\t\tlet terminalInstance: ITerminalInstance;\n\t\ttest('should create an instance of TerminalInstance with env from default profile', async () => {\n\t\t\tconst instantiationService = workbenchInstantiationService({\n\t\t\t\tconfigurationService: () => new TestConfigurationService({\n\t\t\t\t\tfiles: {},\n\t\t\t\t\tterminal: {\n\t\t\t\t\t\tintegrated: {\n\t\t\t\t\t\t\tfontFamily: 'monospace',\n\t\t\t\t\t\t\tscrollback: 1000,\n\t\t\t\t\t\t\tfastScrollSensitivity: 2,\n\t\t\t\t\t\t\tmouseWheelScrollSensitivity: 1,\n\t\t\t\t\t\t\tunicodeVersion: '6',\n\t\t\t\t\t\t\tshellIntegration: {\n\t\t\t\t\t\t\t\tenabled: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}, store);\n\t\t\tinstantiationService.set(ITerminalProfileResolverService, new MockTerminalProfileResolverService());\n\t\t\tinstantiationService.stub(IViewDescriptorService, new TestViewDescriptorService());\n\t\t\tinstantiationService.stub(IEnvironmentVariableService, store.add(instantiationService.createInstance(EnvironmentVariableService)));\n\t\t\tinstantiationService.stub(ITerminalInstanceService, store.add(new TestTerminalInstanceService()));\n\t\t\tterminalInstance = store.add(instantiationService.createInstance(TerminalInstance, terminalShellTypeContextKey, terminalInRunCommandPicker, {}));\n\t\t\t// //Wait for the teminalInstance._xtermReadyPromise to resolve\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 100));\n\t\t\tdeepStrictEqual(terminalInstance.shellLaunchConfig.env, { TEST: 'TEST' });\n\t\t});\n\t});\n\tsuite('parseExitResult', () => {\n\t\ttest('should return no message for exit code = undefined', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(undefined, {}, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: undefined, message: undefined }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(undefined, {}, ProcessState.KilledByUser, undefined),\n\t\t\t\t{ code: undefined, message: undefined }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(undefined, {}, ProcessState.KilledByProcess, undefined),\n\t\t\t\t{ code: undefined, message: undefined }\n\t\t\t);\n\t\t});\n\t\ttest('should return no message for exit code = 0', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(0, {}, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 0, message: undefined }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(0, {}, ProcessState.KilledByUser, undefined),\n\t\t\t\t{ code: 0, message: undefined }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(0, {}, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 0, message: undefined }\n\t\t\t);\n\t\t});\n\t\ttest('should return friendly message when executable is specified for non-zero exit codes', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, { executable: 'foo' }, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 1, message: 'The terminal process \"foo\" failed to launch (exit code: 1).' }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, { executable: 'foo' }, ProcessState.KilledByUser, undefined),\n\t\t\t\t{ code: 1, message: 'The terminal process \"foo\" terminated with exit code: 1.' }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, { executable: 'foo' }, ProcessState.KilledByProcess, undefined),\n\t\t\t\t{ code: 1, message: 'The terminal process \"foo\" terminated with exit code: 1.' }\n\t\t\t);\n\t\t});\n\t\ttest('should return friendly message when executable and args are specified for non-zero exit codes', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, { executable: 'foo', args: ['bar', 'baz'] }, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 1, message: `The terminal process \"foo 'bar', 'baz'\" failed to launch (exit code: 1).` }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, { executable: 'foo', args: ['bar', 'baz'] }, ProcessState.KilledByUser, undefined),\n\t\t\t\t{ code: 1, message: `The terminal process \"foo 'bar', 'baz'\" terminated with exit code: 1.` }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, { executable: 'foo', args: ['bar', 'baz'] }, ProcessState.KilledByProcess, undefined),\n\t\t\t\t{ code: 1, message: `The terminal process \"foo 'bar', 'baz'\" terminated with exit code: 1.` }\n\t\t\t);\n\t\t});\n\t\ttest('should return friendly message when executable and arguments are omitted for non-zero exit codes', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, {}, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 1, message: `The terminal process failed to launch (exit code: 1).` }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, {}, ProcessState.KilledByUser, undefined),\n\t\t\t\t{ code: 1, message: `The terminal process terminated with exit code: 1.` }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult(1, {}, ProcessState.KilledByProcess, undefined),\n\t\t\t\t{ code: 1, message: `The terminal process terminated with exit code: 1.` }\n\t\t\t);\n\t\t});\n\t\ttest('should ignore pty host-related errors', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult({ message: 'Could not find pty with id 16' }, {}, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: undefined, message: undefined }\n\t\t\t);\n\t\t});\n\t\ttest('should format conpty failure code 5', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult({ code: 5, message: 'A native exception occurred during launch (Cannot create process, error code: 5)' }, { executable: 'foo' }, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 5, message: `The terminal process failed to launch: Access was denied to the path containing your executable \"foo\". Manage and change your permissions to get this to work.` }\n\t\t\t);\n\t\t});\n\t\ttest('should format conpty failure code 267', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult({ code: 267, message: 'A native exception occurred during launch (Cannot create process, error code: 267)' }, {}, ProcessState.KilledDuringLaunch, '/foo'),\n\t\t\t\t{ code: 267, message: `The terminal process failed to launch: Invalid starting directory \"/foo\", review your terminal.integrated.cwd setting.` }\n\t\t\t);\n\t\t});\n\t\ttest('should format conpty failure code 1260', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult({ code: 1260, message: 'A native exception occurred during launch (Cannot create process, error code: 1260)' }, { executable: 'foo' }, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 1260, message: `The terminal process failed to launch: Windows cannot open this program because it has been prevented by a software restriction policy. For more information, open Event Viewer or contact your system Administrator.` }\n\t\t\t);\n\t\t});\n\t\ttest('should format generic failures', () => {\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult({ code: 123, message: 'A native exception occurred during launch (Cannot create process, error code: 123)' }, {}, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 123, message: `The terminal process failed to launch: A native exception occurred during launch (Cannot create process, error code: 123).` }\n\t\t\t);\n\t\t\tdeepStrictEqual(\n\t\t\t\tparseExitResult({ code: 123, message: 'foo' }, {}, ProcessState.KilledDuringLaunch, undefined),\n\t\t\t\t{ code: 123, message: `The terminal process failed to launch: foo.` }\n\t\t\t);\n\t\t});\n\t});\n\tsuite('TerminalLabelComputer', () => {\n\t\tlet instantiationService: TestInstantiationService;\n\t\tlet capabilities: TerminalCapabilityStore;\n\n\t\tfunction createInstance(partial?: Partial<ITerminalInstance>): Pick<ITerminalInstance, 'shellLaunchConfig' | 'userHome' | 'cwd' | 'initialCwd' | 'processName' | 'sequence' | 'workspaceFolder' | 'staticTitle' | 'capabilities' | 'title' | 'description'> {\n\t\t\tconst capabilities = store.add(new TerminalCapabilityStore());\n\t\t\tif (!isWindows) {\n\t\t\t\tcapabilities.add(TerminalCapability.NaiveCwdDetection, null!);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tshellLaunchConfig: {},\n\t\t\t\tcwd: 'cwd',\n\t\t\t\tinitialCwd: undefined,\n\t\t\t\tprocessName: '',\n\t\t\t\tsequence: undefined,\n\t\t\t\tworkspaceFolder: undefined,\n\t\t\t\tstaticTitle: undefined,\n\t\t\t\tcapabilities,\n\t\t\t\ttitle: '',\n\t\t\t\tdescription: '',\n\t\t\t\tuserHome: undefined,\n\t\t\t\t...partial\n\t\t\t};\n\t\t}\n\n\t\tsetup(async () => {\n\t\t\tinstantiationService = workbenchInstantiationService(undefined, store);\n\t\t\tcapabilities = store.add(new TerminalCapabilityStore());\n\t\t\tif (!isWindows) {\n\t\t\t\tcapabilities.add(TerminalCapability.NaiveCwdDetection, null!);\n\t\t\t}\n\t\t});\n\n\t\tfunction createLabelComputer(configuration: any) {\n\t\t\tinstantiationService.set(IConfigurationService, new TestConfigurationService(configuration));\n\t\t\tinstantiationService.set(ITerminalConfigurationService, store.add(instantiationService.createInstance(TerminalConfigurationService)));\n\t\t\treturn store.add(instantiationService.createInstance(TerminalLabelComputer));\n\t\t}\n\n\t\ttest('should resolve to \"\" when the template variables are empty', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' - ', title: '', description: '' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: '' }));\n\t\t\t// TODO:\n\t\t\t// terminalLabelComputer.onLabelChanged(e => {\n\t\t\t// \tstrictEqual(e.title, '');\n\t\t\t// \tstrictEqual(e.description, '');\n\t\t\t// });\n\t\t\tstrictEqual(terminalLabelComputer.title, '');\n\t\t\tstrictEqual(terminalLabelComputer.description, '');\n\t\t});\n\t\ttest('should resolve cwd', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' - ', title: '${cwd}', description: '${cwd}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, cwd: ROOT_1 }));\n\t\t\tstrictEqual(terminalLabelComputer.title, ROOT_1);\n\t\t\tstrictEqual(terminalLabelComputer.description, ROOT_1);\n\t\t});\n\t\ttest('should resolve workspaceFolder', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' - ', title: '${workspaceFolder}', description: '${workspaceFolder}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'zsh', workspaceFolder: { uri: URI.from({ scheme: Schemas.file, path: 'folder' }) } as IWorkspaceFolder }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'folder');\n\t\t\tstrictEqual(terminalLabelComputer.description, 'folder');\n\t\t});\n\t\ttest('should resolve local', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' - ', title: '${local}', description: '${local}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'zsh', shellLaunchConfig: { type: 'Local' } }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'Local');\n\t\t\tstrictEqual(terminalLabelComputer.description, 'Local');\n\t\t});\n\t\ttest('should resolve process', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' - ', title: '${process}', description: '${process}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'zsh' }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'zsh');\n\t\t\tstrictEqual(terminalLabelComputer.description, 'zsh');\n\t\t});\n\t\ttest('should resolve sequence', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' - ', title: '${sequence}', description: '${sequence}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, sequence: 'sequence' }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'sequence');\n\t\t\tstrictEqual(terminalLabelComputer.description, 'sequence');\n\t\t});\n\t\ttest('should resolve task', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' ~ ', title: '${process}${separator}${task}', description: '${task}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'zsh', shellLaunchConfig: { type: 'Task' } }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'zsh ~ Task');\n\t\t\tstrictEqual(terminalLabelComputer.description, 'Task');\n\t\t});\n\t\ttest('should resolve separator', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' ~ ', title: '${separator}', description: '${separator}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'zsh', shellLaunchConfig: { type: 'Task' } }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'zsh');\n\t\t\tstrictEqual(terminalLabelComputer.description, '');\n\t\t});\n\t\ttest('should always return static title when specified', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' ~ ', title: '${process}', description: '${workspaceFolder}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'process', workspaceFolder: { uri: URI.from({ scheme: Schemas.file, path: 'folder' }) } as IWorkspaceFolder, staticTitle: 'my-title' }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'my-title');\n\t\t\tstrictEqual(terminalLabelComputer.description, 'folder');\n\t\t});\n\t\ttest('should provide cwdFolder for all cwds only when in multi-root', () => {\n\t\t\tconst terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' ~ ', title: '${process}${separator}${cwdFolder}', description: '${cwdFolder}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'process', workspaceFolder: { uri: URI.from({ scheme: Schemas.file, path: ROOT_1 }) } as IWorkspaceFolder, cwd: ROOT_1 }));\n\t\t\t// single-root, cwd is same as root\n\t\t\tstrictEqual(terminalLabelComputer.title, 'process');\n\t\t\tstrictEqual(terminalLabelComputer.description, '');\n\t\t\t// multi-root\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'process', workspaceFolder: { uri: URI.from({ scheme: Schemas.file, path: ROOT_1 }) } as IWorkspaceFolder, cwd: ROOT_2 }));\n\t\t\tif (isWindows) {\n\t\t\t\tstrictEqual(terminalLabelComputer.title, 'process');\n\t\t\t\tstrictEqual(terminalLabelComputer.description, '');\n\t\t\t} else {\n\t\t\t\tstrictEqual(terminalLabelComputer.title, 'process ~ root2');\n\t\t\t\tstrictEqual(terminalLabelComputer.description, 'root2');\n\t\t\t}\n\t\t});\n\t\ttest('should hide cwdFolder in single folder workspaces when cwd matches the workspace\\'s default cwd even when slashes differ', async () => {\n\t\t\tlet terminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' ~ ', title: '${process}${separator}${cwdFolder}', description: '${cwdFolder}' } } } });\n\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'process', workspaceFolder: { uri: URI.from({ scheme: Schemas.file, path: ROOT_1 }) } as IWorkspaceFolder, cwd: ROOT_1 }));\n\t\t\tstrictEqual(terminalLabelComputer.title, 'process');\n\t\t\tstrictEqual(terminalLabelComputer.description, '');\n\t\t\tif (!isWindows) {\n\t\t\t\tterminalLabelComputer = createLabelComputer({ terminal: { integrated: { tabs: { separator: ' ~ ', title: '${process}${separator}${cwdFolder}', description: '${cwdFolder}' } } } });\n\t\t\t\tterminalLabelComputer.refreshLabel(createInstance({ capabilities, processName: 'process', workspaceFolder: { uri: URI.from({ scheme: Schemas.file, path: ROOT_1 }) } as IWorkspaceFolder, cwd: ROOT_2 }));\n\t\t\t\tstrictEqual(terminalLabelComputer.title, 'process ~ root2');\n\t\t\t\tstrictEqual(terminalLabelComputer.description, 'root2');\n\t\t\t}\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["capabilities"]
}
