{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/terminal/test/browser/xterm/shellIntegrationAddon.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from '@xterm/xterm';\nimport { deepEqual, deepStrictEqual, strictEqual } from 'assert';\nimport * as sinon from 'sinon';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../../../../platform/log/common/log.js';\nimport { ITerminalCapabilityStore, TerminalCapability } from '../../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { deserializeMessage, parseKeyValueAssignment, parseMarkSequence, ShellIntegrationAddon } from '../../../../../../platform/terminal/common/xterm/shellIntegrationAddon.js';\nimport { writeP } from '../../../browser/terminalTestHelpers.js';\n\nclass TestShellIntegrationAddon extends ShellIntegrationAddon {\n\tgetCommandDetectionMock(terminal: Terminal): sinon.SinonMock {\n\t\tconst capability = super._createOrGetCommandDetection(terminal);\n\t\tthis.capabilities.add(TerminalCapability.CommandDetection, capability);\n\t\treturn sinon.mock(capability);\n\t}\n\tgetCwdDectionMock(): sinon.SinonMock {\n\t\tconst capability = super._createOrGetCwdDetection();\n\t\tthis.capabilities.add(TerminalCapability.CwdDetection, capability);\n\t\treturn sinon.mock(capability);\n\t}\n}\n\nsuite('ShellIntegrationAddon', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet xterm: Terminal;\n\tlet shellIntegrationAddon: TestShellIntegrationAddon;\n\tlet capabilities: ITerminalCapabilityStore;\n\n\tsetup(async () => {\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('@xterm/xterm')>('@xterm/xterm', 'lib/xterm.js')).Terminal;\n\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true, cols: 80, rows: 30 }));\n\t\tshellIntegrationAddon = store.add(new TestShellIntegrationAddon('', true, undefined, new NullLogService()));\n\t\txterm.loadAddon(shellIntegrationAddon);\n\t\tcapabilities = shellIntegrationAddon.capabilities;\n\t});\n\n\tsuite('cwd detection', () => {\n\t\ttest('should activate capability on the cwd sequence (OSC 633 ; P ; Cwd=<cwd> ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CwdDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CwdDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CwdDetection), true);\n\t\t});\n\n\t\ttest('should pass cwd sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\tmock.expects('updateCwd').once().withExactArgs('/foo');\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tmock.verify();\n\t\t});\n\n\t\ttest('detect ITerm sequence: `OSC 1337 ; CurrentDir=<Cwd> ST`', async () => {\n\t\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\t\tconst cases: TestCase[] = [\n\t\t\t\t['root', '/', '/'],\n\t\t\t\t['non-root', '/some/path', '/some/path'],\n\t\t\t];\n\t\t\tfor (const x of cases) {\n\t\t\t\tconst [title, input, expected] = x;\n\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\tmock.expects('updateCwd').once().withExactArgs(expected).named(title);\n\t\t\t\tawait writeP(xterm, `\\x1b]1337;CurrentDir=${input}\\x07`);\n\t\t\t\tmock.verify();\n\t\t\t}\n\t\t});\n\n\t\tsuite('detect `SetCwd` sequence: `OSC 7; scheme://cwd ST`', () => {\n\t\t\ttest('should accept well-formatted URLs', async () => {\n\t\t\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\t\t\tconst cases: TestCase[] = [\n\t\t\t\t\t// Different hostname values:\n\t\t\t\t\t['empty hostname, pointing root', 'file:///', '/'],\n\t\t\t\t\t['empty hostname', 'file:///test-root/local', '/test-root/local'],\n\t\t\t\t\t['non-empty hostname', 'file://some-hostname/test-root/local', '/test-root/local'],\n\t\t\t\t\t// URL-encoded chars:\n\t\t\t\t\t['URL-encoded value (1)', 'file:///test-root/%6c%6f%63%61%6c', '/test-root/local'],\n\t\t\t\t\t['URL-encoded value (2)', 'file:///test-root/local%22', '/test-root/local\"'],\n\t\t\t\t\t['URL-encoded value (3)', 'file:///test-root/local\"', '/test-root/local\"'],\n\t\t\t\t];\n\t\t\t\tfor (const x of cases) {\n\t\t\t\t\tconst [title, input, expected] = x;\n\t\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\t\tmock.expects('updateCwd').once().withExactArgs(expected).named(title);\n\t\t\t\t\tawait writeP(xterm, `\\x1b]7;${input}\\x07`);\n\t\t\t\t\tmock.verify();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttest('should ignore ill-formatted URLs', async () => {\n\t\t\t\ttype TestCase = [title: string, input: string];\n\t\t\t\tconst cases: TestCase[] = [\n\t\t\t\t\t// Different hostname values:\n\t\t\t\t\t['no hostname, pointing root', 'file://'],\n\t\t\t\t\t// Non-`file` scheme values:\n\t\t\t\t\t['no scheme (1)', '/test-root'],\n\t\t\t\t\t['no scheme (2)', '//test-root'],\n\t\t\t\t\t['no scheme (3)', '///test-root'],\n\t\t\t\t\t['no scheme (4)', ':///test-root'],\n\t\t\t\t\t['http', 'http:///test-root'],\n\t\t\t\t\t['ftp', 'ftp:///test-root'],\n\t\t\t\t\t['ssh', 'ssh:///test-root'],\n\t\t\t\t];\n\n\t\t\t\tfor (const x of cases) {\n\t\t\t\t\tconst [title, input] = x;\n\t\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\t\tmock.expects('updateCwd').never().named(title);\n\t\t\t\t\tawait writeP(xterm, `\\x1b]7;${input}\\x07`);\n\t\t\t\t\tmock.verify();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\ttest('detect `SetWindowsFrindlyCwd` sequence: `OSC 9 ; 9 ; <cwd> ST`', async () => {\n\t\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\t\tconst cases: TestCase[] = [\n\t\t\t\t['root', '/', '/'],\n\t\t\t\t['non-root', '/some/path', '/some/path'],\n\t\t\t];\n\t\t\tfor (const x of cases) {\n\t\t\t\tconst [title, input, expected] = x;\n\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\tmock.expects('updateCwd').once().withExactArgs(expected).named(title);\n\t\t\t\tawait writeP(xterm, `\\x1b]9;9;${input}\\x07`);\n\t\t\t\tmock.verify();\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('command tracking', () => {\n\t\ttest('should activate capability on the prompt start sequence (OSC 633 ; A ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;A\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass prompt start sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handlePromptStart').once().withExactArgs();\n\t\t\tawait writeP(xterm, '\\x1b]633;A\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should activate capability on the command start sequence (OSC 633 ; B ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;B\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass command start sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handleCommandStart').once().withExactArgs();\n\t\t\tawait writeP(xterm, '\\x1b]633;B\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should activate capability on the command executed sequence (OSC 633 ; C ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;C\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass command executed sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handleCommandExecuted').once().withExactArgs();\n\t\t\tawait writeP(xterm, '\\x1b]633;C\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should activate capability on the command finished sequence (OSC 633 ; D ; <ExitCode> ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;D;7\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass command finished sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handleCommandFinished').once().withExactArgs(7);\n\t\t\tawait writeP(xterm, '\\x1b]633;D;7\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should pass command line sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('setCommandLine').once().withExactArgs('', false);\n\t\t\tawait writeP(xterm, '\\x1b]633;E\\x07');\n\t\t\tmock.verify();\n\n\t\t\tconst mock2 = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock2.expects('setCommandLine').twice().withExactArgs('cmd', false);\n\t\t\tawait writeP(xterm, '\\x1b]633;E;cmd\\x07');\n\t\t\tawait writeP(xterm, '\\x1b]633;E;cmd;invalid-nonce\\x07');\n\t\t\tmock2.verify();\n\t\t});\n\t\ttest('should not activate capability on the cwd sequence (OSC 633 ; P=Cwd=<cwd> ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t});\n\t\ttest('should pass cwd sequence to the capability if it\\'s initialized', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('setCwd').once().withExactArgs('/foo');\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t});\n\tsuite('BufferMarkCapability', () => {\n\t\ttest('SetMark', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\ttest('SetMark - ID', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;1;\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\ttest('SetMark - hidden', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;;Hidden\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\ttest('SetMark - hidden & ID', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;1;Hidden\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\tsuite('parseMarkSequence', () => {\n\t\t\ttest('basic', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['', '']), { id: undefined, hidden: false });\n\t\t\t});\n\t\t\ttest('ID', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['Id=3', '']), { id: \"3\", hidden: false });\n\t\t\t});\n\t\t\ttest('hidden', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['', 'Hidden']), { id: undefined, hidden: true });\n\t\t\t});\n\t\t\ttest('ID + hidden', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['Id=4555', 'Hidden']), { id: \"4555\", hidden: true });\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('deserializeMessage', () => {\n\t\t// A single literal backslash, in order to avoid confusion about whether we are escaping test data or testing escapes.\n\t\tconst Backslash = '\\\\' as const;\n\t\tconst Newline = '\\n' as const;\n\t\tconst Semicolon = ';' as const;\n\n\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\tconst cases: TestCase[] = [\n\t\t\t['empty', '', ''],\n\t\t\t['basic', 'value', 'value'],\n\t\t\t['space', 'some thing', 'some thing'],\n\t\t\t['escaped backslash', `${Backslash}${Backslash}`, Backslash],\n\t\t\t['non-initial escaped backslash', `foo${Backslash}${Backslash}`, `foo${Backslash}`],\n\t\t\t['two escaped backslashes', `${Backslash}${Backslash}${Backslash}${Backslash}`, `${Backslash}${Backslash}`],\n\t\t\t['escaped backslash amidst text', `Hello${Backslash}${Backslash}there`, `Hello${Backslash}there`],\n\t\t\t['backslash escaped literally and as hex', `${Backslash}${Backslash} is same as ${Backslash}x5c`, `${Backslash} is same as ${Backslash}`],\n\t\t\t['escaped semicolon', `${Backslash}x3b`, Semicolon],\n\t\t\t['non-initial escaped semicolon', `foo${Backslash}x3b`, `foo${Semicolon}`],\n\t\t\t['escaped semicolon (upper hex)', `${Backslash}x3B`, Semicolon],\n\t\t\t['escaped backslash followed by literal \"x3b\" is not a semicolon', `${Backslash}${Backslash}x3b`, `${Backslash}x3b`],\n\t\t\t['non-initial escaped backslash followed by literal \"x3b\" is not a semicolon', `foo${Backslash}${Backslash}x3b`, `foo${Backslash}x3b`],\n\t\t\t['escaped backslash followed by escaped semicolon', `${Backslash}${Backslash}${Backslash}x3b`, `${Backslash}${Semicolon}`],\n\t\t\t['escaped semicolon amidst text', `some${Backslash}x3bthing`, `some${Semicolon}thing`],\n\t\t\t['escaped newline', `${Backslash}x0a`, Newline],\n\t\t\t['non-initial escaped newline', `foo${Backslash}x0a`, `foo${Newline}`],\n\t\t\t['escaped newline (upper hex)', `${Backslash}x0A`, Newline],\n\t\t\t['escaped backslash followed by literal \"x0a\" is not a newline', `${Backslash}${Backslash}x0a`, `${Backslash}x0a`],\n\t\t\t['non-initial escaped backslash followed by literal \"x0a\" is not a newline', `foo${Backslash}${Backslash}x0a`, `foo${Backslash}x0a`],\n\t\t];\n\n\t\tcases.forEach(([title, input, expected]) => {\n\t\t\ttest(title, () => strictEqual(deserializeMessage(input), expected));\n\t\t});\n\t});\n\n\ttest('parseKeyValueAssignment', () => {\n\t\ttype TestCase = [title: string, input: string, expected: [key: string, value: string | undefined]];\n\t\tconst cases: TestCase[] = [\n\t\t\t['empty', '', ['', undefined]],\n\t\t\t['no \"=\" sign', 'some-text', ['some-text', undefined]],\n\t\t\t['empty value', 'key=', ['key', '']],\n\t\t\t['empty key', '=value', ['', 'value']],\n\t\t\t['normal', 'key=value', ['key', 'value']],\n\t\t\t['multiple \"=\" signs (1)', 'key==value', ['key', '=value']],\n\t\t\t['multiple \"=\" signs (2)', 'key=value===true', ['key', 'value===true']],\n\t\t\t['just a \"=\"', '=', ['', '']],\n\t\t\t['just a \"==\"', '==', ['', '=']],\n\t\t];\n\n\t\tcases.forEach(x => {\n\t\t\tconst [title, input, [key, value]] = x;\n\t\t\tdeepStrictEqual(parseKeyValueAssignment(input), { key, value }, title);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
