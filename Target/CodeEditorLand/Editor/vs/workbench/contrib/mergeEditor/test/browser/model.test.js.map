{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/test/browser/model.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { IReader, transaction } from '../../../../../base/common/observable.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { linesDiffComputers } from '../../../../../editor/common/diff/linesDiffComputers.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../../editor/common/model.js';\nimport { createModelServices, createTextModel } from '../../../../../editor/test/common/testTextModel.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IMergeDiffComputer, IMergeDiffComputerResult, toLineRange, toRangeMapping } from '../../browser/model/diffComputer.js';\nimport { DetailedLineRangeMapping } from '../../browser/model/mapping.js';\nimport { MergeEditorModel } from '../../browser/model/mergeEditorModel.js';\nimport { MergeEditorTelemetry } from '../../browser/telemetry.js';\n\nsuite('merge editor model', () => {\n\t// todo: renable when failing case is found https://github.com/microsoft/vscode/pull/190444#issuecomment-1678151428\n\t// ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('prepend line', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"line1\\nline2\",\n\t\t\t\t\"input1\": \"0\\nline1\\nline2\",\n\t\t\t\t\"input2\": \"0\\nline1\\nline2\",\n\t\t\t\t\"result\": \"\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['\u27E6\u27E7\u2080line1', 'line2'],\n\t\t\t\t\tinput1: ['\u27E60', '\u27E7\u2080line1', 'line2'],\n\t\t\t\t\tinput2: ['\u27E60', '\u27E7\u2080line1', 'line2'],\n\t\t\t\t\tresult: ['\u27E6\u27E7{unrecognized}\u2080'],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(0, 1);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t{ result: '0\\nline1\\nline2' }\n\t\t\t\t);\n\n\t\t\t\tmodel.toggleConflict(0, 2);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t({ result: \"0\\n0\\nline1\\nline2\" })\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('empty base', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"\",\n\t\t\t\t\"input1\": \"input1\",\n\t\t\t\t\"input2\": \"input2\",\n\t\t\t\t\"result\": \"\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['\u27E6\u27E7\u2080'],\n\t\t\t\t\tinput1: ['\u27E6input1\u27E7\u2080'],\n\t\t\t\t\tinput2: ['\u27E6input2\u27E7\u2080'],\n\t\t\t\t\tresult: ['\u27E6\u27E7{base}\u2080'],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(0, 1);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t({ result: \"input1\" })\n\t\t\t\t);\n\n\t\t\t\tmodel.toggleConflict(0, 2);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t({ result: \"input2\" })\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('can merge word changes', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"hello\",\n\t\t\t\t\"input1\": \"hallo\",\n\t\t\t\t\"input2\": \"helloworld\",\n\t\t\t\t\"result\": \"\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['\u27E6hello\u27E7\u2080'],\n\t\t\t\t\tinput1: ['\u27E6hallo\u27E7\u2080'],\n\t\t\t\t\tinput2: ['\u27E6helloworld\u27E7\u2080'],\n\t\t\t\t\tresult: ['\u27E6\u27E7{unrecognized}\u2080'],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(0, 1);\n\t\t\t\tmodel.toggleConflict(0, 2);\n\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t{ result: 'halloworld' }\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t});\n\n\ttest('can combine insertions at end of document', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"Z\u00FCrich\\nBern\\nBasel\\nChur\\nGenf\\nThun\",\n\t\t\t\t\"input1\": \"Z\u00FCrich\\nBern\\nChur\\nDavos\\nGenf\\nThun\\nfunction f(b:boolean) {}\",\n\t\t\t\t\"input2\": \"Z\u00FCrich\\nBern\\nBasel (FCB)\\nChur\\nGenf\\nThun\\nfunction f(a:number) {}\",\n\t\t\t\t\"result\": \"Z\u00FCrich\\nBern\\nBasel\\nChur\\nDavos\\nGenf\\nThun\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['Z\u00FCrich', 'Bern', '\u27E6Basel', '\u27E7\u2080Chur', '\u27E6\u27E7\u2081Genf', 'Thun\u27E6\u27E7\u2082'],\n\t\t\t\t\tinput1: [\n\t\t\t\t\t\t'Z\u00FCrich',\n\t\t\t\t\t\t'Bern',\n\t\t\t\t\t\t'\u27E6\u27E7\u2080Chur',\n\t\t\t\t\t\t'\u27E6Davos',\n\t\t\t\t\t\t'\u27E7\u2081Genf',\n\t\t\t\t\t\t'Thun',\n\t\t\t\t\t\t'\u27E6function f(b:boolean) {}\u27E7\u2082',\n\t\t\t\t\t],\n\t\t\t\t\tinput2: [\n\t\t\t\t\t\t'Z\u00FCrich',\n\t\t\t\t\t\t'Bern',\n\t\t\t\t\t\t'\u27E6Basel (FCB)',\n\t\t\t\t\t\t'\u27E7\u2080Chur',\n\t\t\t\t\t\t'\u27E6\u27E7\u2081Genf',\n\t\t\t\t\t\t'Thun',\n\t\t\t\t\t\t'\u27E6function f(a:number) {}\u27E7\u2082',\n\t\t\t\t\t],\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t'Z\u00FCrich',\n\t\t\t\t\t\t'Bern',\n\t\t\t\t\t\t'\u27E6Basel',\n\t\t\t\t\t\t'\u27E7{base}\u2080Chur',\n\t\t\t\t\t\t'\u27E6Davos',\n\t\t\t\t\t\t'\u27E7{1\u2713}\u2081Genf',\n\t\t\t\t\t\t'Thun\u27E6\u27E7{base}\u2082',\n\t\t\t\t\t],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(2, 1);\n\t\t\t\tmodel.toggleConflict(2, 2);\n\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t{\n\t\t\t\t\t\tresult:\n\t\t\t\t\t\t\t'Z\u00FCrich\\nBern\\nBasel\\nChur\\nDavos\\nGenf\\nThun\\nfunction f(b:boolean) {}\\nfunction f(a:number) {}',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('conflicts are reset', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"typescript\",\n\t\t\t\t\"base\": \"import { h } from 'vs/base/browser/dom';\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\\nimport { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\n\",\n\t\t\t\t\"input1\": \"import { h } from 'vs/base/browser/dom';\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\nimport { observableSignalFromEvent } from 'vs/base/common/observable';\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\nimport { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\n\",\n\t\t\t\t\"input2\": \"import { h } from 'vs/base/browser/dom';\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\nimport { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\n\",\n\t\t\t\t\"result\": \"import { h } from 'vs/base/browser/dom';\\r\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\r\\nimport { observableSignalFromEvent } from 'vs/base/common/observable';\\r\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\r\\n<<<<<<< Updated upstream\\r\\nimport { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\\r\\n=======\\r\\nimport { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\\r\\n>>>>>>> Stashed changes\\r\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\r\\n\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"\u27E6\u27E7\u2080import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t\"\u27E6import { EditorOption } from 'vs/editor/common/config/editorOptions';\",\n\t\t\t\t\t\t\"import { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t\"\u27E7\u2081import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t\tinput1: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"\u27E6import { observableSignalFromEvent } from 'vs/base/common/observable';\",\n\t\t\t\t\t\t\"\u27E7\u2080import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t\"\u27E6import { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t\"\u27E7\u2081import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t\tinput2: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"\u27E6\u27E7\u2080import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t\"\u27E6import { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t\"\u27E7\u2081import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"\u27E6import { observableSignalFromEvent } from 'vs/base/common/observable';\",\n\t\t\t\t\t\t\"\u27E7{1\u2713}\u2080import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t'\u27E6<<<<<<< Updated upstream',\n\t\t\t\t\t\t\"import { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t'=======',\n\t\t\t\t\t\t\"import { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t'>>>>>>> Stashed changes',\n\t\t\t\t\t\t\"\u27E7{unrecognized}\u2081import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('auto-solve equal edits', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"javascript\",\n\t\t\t\t\"base\": \"const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nmain(paths);\\n\\nfunction main(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    let data = getLineCountInfo(paths);\\n    console.log(\\\"Lines: \\\" + data.totalLineCount);\\n}\\n\\n/**\\n * Prints the welcome message\\n*/\\nfunction printMessage() {\\n    console.log(\\\"Welcome To Line Counter\\\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n\",\n\t\t\t\t\"input1\": \"const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nmain(paths);\\n\\nfunction main(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    const data = getLineCountInfo(paths);\\n    console.log(\\\"Lines: \\\" + data.totalLineCount);\\n}\\n\\nfunction printMessage() {\\n    console.log(\\\"Welcome To Line Counter\\\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n\",\n\t\t\t\t\"input2\": \"const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nrun(paths);\\n\\nfunction run(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    const data = getLineCountInfo(paths);\\n    console.log(\\\"Lines: \\\" + data.totalLineCount);\\n}\\n\\nfunction printMessage() {\\n    console.log(\\\"Welcome To Line Counter\\\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n\",\n\t\t\t\t\"result\": \"<<<<<<< uiae\\n>>>>>>> Stashed changes\",\n\t\t\t\tresetResult: true,\n\t\t\t},\n\t\t\tasync model => {\n\t\t\t\tawait model.mergeModel.reset();\n\n\t\t\t\tassert.deepStrictEqual(model.getResult(), `const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nrun(paths);\\n\\nfunction run(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    const data = getLineCountInfo(paths);\\n    console.log(\"Lines: \" + data.totalLineCount);\\n}\\n\\nfunction printMessage() {\\n    console.log(\"Welcome To Line Counter\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n`);\n\t\t\t}\n\t\t);\n\t});\n});\n\nasync function testMergeModel(\n\toptions: MergeModelOptions,\n\tfn: (model: MergeModelInterface) => void\n): Promise<void> {\n\tconst disposables = new DisposableStore();\n\tconst modelInterface = disposables.add(\n\t\tnew MergeModelInterface(options, createModelServices(disposables))\n\t);\n\tawait modelInterface.mergeModel.onInitialized;\n\tawait fn(modelInterface);\n\tdisposables.dispose();\n}\n\ninterface MergeModelOptions {\n\tlanguageId: string;\n\tinput1: string;\n\tinput2: string;\n\tbase: string;\n\tresult: string;\n\tresetResult?: boolean;\n}\n\nfunction toSmallNumbersDec(value: number): string {\n\tconst smallNumbers = ['\u2080', '\u2081', '\u2082', '\u2083', '\u2084', '\u2085', '\u2086', '\u2087', '\u2088', '\u2089'];\n\treturn value.toString().split('').map(c => smallNumbers[parseInt(c)]).join('');\n}\n\nclass MergeModelInterface extends Disposable {\n\tpublic readonly mergeModel: MergeEditorModel;\n\n\tconstructor(options: MergeModelOptions, instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tconst input1TextModel = this._register(createTextModel(options.input1, options.languageId));\n\t\tconst input2TextModel = this._register(createTextModel(options.input2, options.languageId));\n\t\tconst baseTextModel = this._register(createTextModel(options.base, options.languageId));\n\t\tconst resultTextModel = this._register(createTextModel(options.result, options.languageId));\n\n\t\tconst diffComputer: IMergeDiffComputer = {\n\t\t\tasync computeDiff(textModel1: ITextModel, textModel2: ITextModel, reader: IReader): Promise<IMergeDiffComputerResult> {\n\t\t\t\tconst result = await linesDiffComputers.getLegacy().computeDiff(\n\t\t\t\t\ttextModel1.getLinesContent(),\n\t\t\t\t\ttextModel2.getLinesContent(),\n\t\t\t\t\t{ ignoreTrimWhitespace: false, maxComputationTimeMs: 10000, computeMoves: false }\n\t\t\t\t);\n\t\t\t\tconst changes = result.changes.map(c =>\n\t\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\t\ttoLineRange(c.original),\n\t\t\t\t\t\ttextModel1,\n\t\t\t\t\t\ttoLineRange(c.modified),\n\t\t\t\t\t\ttextModel2,\n\t\t\t\t\t\tc.innerChanges?.map(ic => toRangeMapping(ic)).filter(isDefined)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tdiffs: changes\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tthis.mergeModel = this._register(instantiationService.createInstance(MergeEditorModel,\n\t\t\tbaseTextModel,\n\t\t\t{\n\t\t\t\ttextModel: input1TextModel,\n\t\t\t\tdescription: '',\n\t\t\t\tdetail: '',\n\t\t\t\ttitle: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttextModel: input2TextModel,\n\t\t\t\tdescription: '',\n\t\t\t\tdetail: '',\n\t\t\t\ttitle: '',\n\t\t\t},\n\t\t\tresultTextModel,\n\t\t\tdiffComputer,\n\t\t\t{\n\t\t\t\tresetResult: options.resetResult || false\n\t\t\t},\n\t\t\tnew MergeEditorTelemetry(NullTelemetryService),\n\t\t));\n\t}\n\n\tgetProjections(): unknown {\n\t\tinterface LabeledRange {\n\t\t\trange: Range;\n\t\t\tlabel: string;\n\t\t}\n\t\tfunction applyRanges(textModel: ITextModel, ranges: LabeledRange[]): void {\n\t\t\ttextModel.applyEdits(ranges.map(({ range, label }) => ({\n\t\t\t\trange: range,\n\t\t\t\ttext: `\u27E6${textModel.getValueInRange(range)}\u27E7${label}`,\n\t\t\t})));\n\t\t}\n\t\tconst baseRanges = this.mergeModel.modifiedBaseRanges.get();\n\n\t\tconst baseTextModel = createTextModel(this.mergeModel.base.getValue());\n\t\tapplyRanges(\n\t\t\tbaseTextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: r.baseRange.toRange(),\n\t\t\t\tlabel: toSmallNumbersDec(idx),\n\t\t\t}))\n\t\t);\n\n\t\tconst input1TextModel = createTextModel(this.mergeModel.input1.textModel.getValue());\n\t\tapplyRanges(\n\t\t\tinput1TextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: r.input1Range.toRange(),\n\t\t\t\tlabel: toSmallNumbersDec(idx),\n\t\t\t}))\n\t\t);\n\n\t\tconst input2TextModel = createTextModel(this.mergeModel.input2.textModel.getValue());\n\t\tapplyRanges(\n\t\t\tinput2TextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: r.input2Range.toRange(),\n\t\t\t\tlabel: toSmallNumbersDec(idx),\n\t\t\t}))\n\t\t);\n\n\t\tconst resultTextModel = createTextModel(this.mergeModel.resultTextModel.getValue());\n\t\tapplyRanges(\n\t\t\tresultTextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: this.mergeModel.getLineRangeInResult(r.baseRange).toRange(),\n\t\t\t\tlabel: `{${this.mergeModel.getState(r).get()}}${toSmallNumbersDec(idx)}`,\n\t\t\t}))\n\t\t);\n\n\t\tconst result = {\n\t\t\tbase: baseTextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t\tinput1: input1TextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t\tinput2: input2TextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t\tresult: resultTextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t};\n\t\tbaseTextModel.dispose();\n\t\tinput1TextModel.dispose();\n\t\tinput2TextModel.dispose();\n\t\tresultTextModel.dispose();\n\t\treturn result;\n\t}\n\n\ttoggleConflict(conflictIdx: number, inputNumber: 1 | 2): void {\n\t\tconst baseRange = this.mergeModel.modifiedBaseRanges.get()[conflictIdx];\n\t\tif (!baseRange) {\n\t\t\tthrow new Error();\n\t\t}\n\t\tconst state = this.mergeModel.getState(baseRange).get();\n\t\ttransaction(tx => {\n\t\t\tthis.mergeModel.setState(baseRange, state.toggle(inputNumber), true, tx);\n\t\t});\n\t}\n\n\tgetResult(): string {\n\t\treturn this.mergeModel.resultTextModel.getValue();\n\t}\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,YAAY,uBAAuB;AAC5C,SAAS,SAAS,mBAAmB;AACrC,SAAS,iBAAiB;AAC1B,SAAS,aAAa;AACtB,SAAS,0BAA0B;AACnC,SAAS,qBAAqB,kBAAkB;AAChD,SAAS,qBAAqB,uBAAuB;AACrD,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,oBAAoB,0BAA0B,aAAa,sBAAsB;AAC1F,SAAS,gCAAgC;AACzC,SAAS,wBAAwB;AACjC,SAAS,4BAA4B;AAErC,MAAM,sBAAsB,MAAM;AAIjC,OAAK,gBAAgB,YAAY;AAChC,UAAM;AAAA,MACL;AAAA,QACC,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,MACA,WAAS;AACR,eAAO,gBAAgB,MAAM,eAAe,GAAG;AAAA,UAC9C,MAAM,CAAC,2BAAY,OAAO;AAAA,UAC1B,QAAQ,CAAC,WAAM,qBAAW,OAAO;AAAA,UACjC,QAAQ,CAAC,WAAM,qBAAW,OAAO;AAAA,UACjC,QAAQ,CAAC,kCAAmB;AAAA,QAC7B,CAAC;AAED,cAAM,eAAe,GAAG,CAAC;AACzB,eAAO;AAAA,UACN,EAAE,QAAQ,MAAM,UAAU,EAAE;AAAA,UAC5B,EAAE,QAAQ,kBAAkB;AAAA,QAC7B;AAEA,cAAM,eAAe,GAAG,CAAC;AACzB,eAAO;AAAA,UACN,EAAE,QAAQ,MAAM,UAAU,EAAE;AAAA,UAC3B,EAAE,QAAQ,qBAAqB;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,cAAc,YAAY;AAC9B,UAAM;AAAA,MACL;AAAA,QACC,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,MACA,WAAS;AACR,eAAO,gBAAgB,MAAM,eAAe,GAAG;AAAA,UAC9C,MAAM,CAAC,oBAAK;AAAA,UACZ,QAAQ,CAAC,0BAAW;AAAA,UACpB,QAAQ,CAAC,0BAAW;AAAA,UACpB,QAAQ,CAAC,0BAAW;AAAA,QACrB,CAAC;AAED,cAAM,eAAe,GAAG,CAAC;AACzB,eAAO;AAAA,UACN,EAAE,QAAQ,MAAM,UAAU,EAAE;AAAA,UAC3B,EAAE,QAAQ,SAAS;AAAA,QACrB;AAEA,cAAM,eAAe,GAAG,CAAC;AACzB,eAAO;AAAA,UACN,EAAE,QAAQ,MAAM,UAAU,EAAE;AAAA,UAC3B,EAAE,QAAQ,SAAS;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,0BAA0B,YAAY;AAC1C,UAAM;AAAA,MACL;AAAA,QACC,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,MACA,WAAS;AACR,eAAO,gBAAgB,MAAM,eAAe,GAAG;AAAA,UAC9C,MAAM,CAAC,yBAAU;AAAA,UACjB,QAAQ,CAAC,yBAAU;AAAA,UACnB,QAAQ,CAAC,8BAAe;AAAA,UACxB,QAAQ,CAAC,kCAAmB;AAAA,QAC7B,CAAC;AAED,cAAM,eAAe,GAAG,CAAC;AACzB,cAAM,eAAe,GAAG,CAAC;AAEzB,eAAO;AAAA,UACN,EAAE,QAAQ,MAAM,UAAU,EAAE;AAAA,UAC5B,EAAE,QAAQ,aAAa;AAAA,QACxB;AAAA,MACD;AAAA,IACD;AAAA,EAED,CAAC;AAED,OAAK,6CAA6C,YAAY;AAC7D,UAAM;AAAA,MACL;AAAA,QACC,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,MACA,WAAS;AACR,eAAO,gBAAgB,MAAM,eAAe,GAAG;AAAA,UAC9C,MAAM,CAAC,aAAU,QAAQ,eAAU,oBAAU,0BAAW,wBAAS;AAAA,UACjE,QAAQ;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,UACA,QAAQ;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,UACA,QAAQ;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,QACD,CAAC;AAED,cAAM,eAAe,GAAG,CAAC;AACzB,cAAM,eAAe,GAAG,CAAC;AAEzB,eAAO;AAAA,UACN,EAAE,QAAQ,MAAM,UAAU,EAAE;AAAA,UAC5B;AAAA,YACC,QACC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,uBAAuB,YAAY;AACvC,UAAM;AAAA,MACL;AAAA,QACC,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,MACA,WAAS;AACR,eAAO,gBAAgB,MAAM,eAAe,GAAG;AAAA,UAC9C,MAAM;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,UACA,QAAQ;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,UACA,QAAQ;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,UACA,QAAQ;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,0BAA0B,YAAY;AAC1C,UAAM;AAAA,MACL;AAAA,QACC,cAAc;AAAA,QACdaAAa;AAAA,MACd;AAAA,MACA,OAAM,UAAS;AACd,cAAM,MAAM,WAAW,MAAM;AAE7B,eAAO,gBAAgB,MAAM,UAAU,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA2vB;AAAA,MACtyB;AAAA,IACD;AAAA,EACD,CAAC;AACF,CAAC;AAED,eAAe,eACd,SACA,IACgB;AAChB,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,iBAAiB,YAAY;AAAA,IAClC,IAAI,oBAAoB,SAAS,oBAAoB,WAAW,CAAC;AAAA,EAClE;AACA,QAAM,eAAe,WAAW;AAChC,QAAM,GAAG,cAAc;AACvB,cAAY,QAAQ;AACrB;AAXe;AAsBf,SAAS,kBAAkB,OAAuB;AACjD,QAAM,eAAe,CAAC,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,QAAG;AACtE,SAAO,MAAM,SAAS,EAAE,MAAM,EAAE,EAAE,IAAI,OAAK,aAAa,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE;AAC9E;AAHS;AAKT,MAAM,4BAA4B,WAAW;AAAA,EAjR7C,OAiR6C;AAAA;AAAA;AAAA,EAC5B;AAAA,EAEhB,YAAY,SAA4B,sBAA6C;AACpF,UAAM;AACN,UAAM,kBAAkB,KAAK,UAAU,gBAAgB,QAAQ,QAAQ,QAAQ,UAAU,CAAC;AAC1F,UAAM,kBAAkB,KAAK,UAAU,gBAAgB,QAAQ,QAAQ,QAAQ,UAAU,CAAC;AAC1F,UAAM,gBAAgB,KAAK,UAAU,gBAAgB,QAAQ,MAAM,QAAQ,UAAU,CAAC;AACtF,UAAM,kBAAkB,KAAK,UAAU,gBAAgB,QAAQ,QAAQ,QAAQ,UAAU,CAAC;AAE1F,UAAM,eAAmC;AAAA,MACxC,MAAM,YAAY,YAAwB,YAAwB,QAAoD;AACrH,cAAM,SAAS,MAAM,mBAAmB,UAAU,EAAE;AAAA,UACnD,WAAW,gBAAgB;AAAA,UAC3B,WAAW,gBAAgB;AAAA,UAC3B,EAAE,sBAAsB,OAAO,sBAAsB,KAAO,cAAc,MAAM;AAAA,QACjF;AACA,cAAM,UAAU,OAAO,QAAQ;AAAA,UAAI,OAClC,IAAI;AAAA,YACH,YAAY,EAAE,QAAQ;AAAA,YACtB;AAAA,YACA,YAAY,EAAE,QAAQ;AAAA,YACtB;AAAA,YACA,EAAE,cAAc,IAAI,QAAM,eAAe,EAAE,CAAC,EAAE,OAAO,SAAS;AAAA,UAC/D;AAAA,QACD;AACA,eAAO;AAAA,UACN,OAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,SAAK,aAAa,KAAK,UAAU,qBAAqB;AAAA,MAAe;AAAA,MACpE;AAAA,MACA;AAAA,QACC,WAAW;AAAA,QACX,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,WAAW;AAAA,QACX,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,OAAO;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACC,aAAa,QAAQ,eAAe;AAAA,MACrC;AAAA,MACA,IAAI,qBAAqB,oBAAoB;AAAA,IAC9C,CAAC;AAAA,EACF;AAAA,EAEA,iBAA0B;AAKzB,aAAS,YAAY,WAAuB,QAA8B;AACzE,gBAAU,WAAW,OAAO,IAAI,CAAC,EAAE,OAAO,MAAM,OAAO;AAAA,QACtD;AAAA,QACA,MAAM,SAAI,UAAU,gBAAgB,KAAK,CAAC,SAAI,KAAK;AAAA,MACpD,EAAE,CAAC;AAAA,IACJ;AALS;AAMT,UAAM,aAAa,KAAK,WAAW,mBAAmB,IAAI;AAE1D,UAAM,gBAAgB,gBAAgB,KAAK,WAAW,KAAK,SAAS,CAAC;AACrE;AAAA,MACC;AAAA,MACA,WAAW,IAAkB,CAAC,GAAG,SAAS;AAAA,QACzC,OAAO,EAAE,UAAU,QAAQ;AAAA,QAC3B,OAAO,kBAAkB,GAAG;AAAA,MAC7B,EAAE;AAAA,IACH;AAEA,UAAM,kBAAkB,gBAAgB,KAAK,WAAW,OAAO,UAAU,SAAS,CAAC;AACnF;AAAA,MACC;AAAA,MACA,WAAW,IAAkB,CAAC,GAAG,SAAS;AAAA,QACzC,OAAO,EAAE,YAAY,QAAQ;AAAA,QAC7B,OAAO,kBAAkB,GAAG;AAAA,MAC7B,EAAE;AAAA,IACH;AAEA,UAAM,kBAAkB,gBAAgB,KAAK,WAAW,OAAO,UAAU,SAAS,CAAC;AACnF;AAAA,MACC;AAAA,MACA,WAAW,IAAkB,CAAC,GAAG,SAAS;AAAA,QACzC,OAAO,EAAE,YAAY,QAAQ;AAAA,QAC7B,OAAO,kBAAkB,GAAG;AAAA,MAC7B,EAAE;AAAA,IACH;AAEA,UAAM,kBAAkB,gBAAgB,KAAK,WAAW,gBAAgB,SAAS,CAAC;AAClF;AAAA,MACC;AAAA,MACA,WAAW,IAAkB,CAAC,GAAG,SAAS;AAAA,QACzC,OAAO,KAAK,WAAW,qBAAqB,EAAE,SAAS,EAAE,QAAQ;AAAA,QACjE,OAAO,IAAI,KAAK,WAAW,SAAS,CAAC,EAAE,IAAI,CAAC,IAAI,kBAAkB,GAAG,CAAC;AAAA,MACvE,EAAE;AAAA,IACH;AAEA,UAAM,SAAS;AAAA,MACd,MAAM,cAAc,SAAS,oBAAoB,EAAE,EAAE,MAAM,IAAI;AAAA,MAC/D,QAAQ,gBAAgB,SAAS,oBAAoB,EAAE,EAAE,MAAM,IAAI;AAAA,MACnE,QAAQ,gBAAgB,SAAS,oBAAoB,EAAE,EAAE,MAAM,IAAI;AAAA,MACnE,QAAQ,gBAAgB,SAAS,oBAAoB,EAAE,EAAE,MAAM,IAAI;AAAA,IACpE;AACA,kBAAc,QAAQ;AACtB,oBAAgB,QAAQ;AACxB,oBAAgB,QAAQ;AACxB,oBAAgB,QAAQ;AACxB,WAAO;AAAA,EACR;AAAA,EAEA,eAAe,aAAqB,aAA0B;AAC7D,UAAM,YAAY,KAAK,WAAW,mBAAmB,IAAI,EAAE,WAAW;AACtE,QAAI,CAAC,WAAW;AACf,YAAM,IAAI,MAAM;AAAA,IACjB;AACA,UAAM,QAAQ,KAAK,WAAW,SAAS,SAAS,EAAE,IAAI;AACtD,gBAAY,QAAM;AACjB,WAAK,WAAW,SAAS,WAAW,MAAM,OAAO,WAAW,GAAG,MAAM,EAAE;AAAA,IACxE,CAAC;AAAA,EACF;AAAA,EAEA,YAAoB;AACnB,WAAO,KAAK,WAAW,gBAAgB,SAAS;AAAA,EACjD;AACD;",
  "names": []
}
