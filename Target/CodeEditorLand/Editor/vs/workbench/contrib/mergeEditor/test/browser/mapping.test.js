import e from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../../../../../base/test/common/utils.js";import{Position as l}from"../../../../../editor/common/core/position.js";import{Range as f}from"../../../../../editor/common/core/range.js";import{TextLength as r}from"../../../../../editor/common/core/textLength.js";import{DocumentRangeMap as m,RangeMapping as g}from"../../browser/model/mapping.js";suite("merge editor mapping",()=>{d(),suite("DocumentRangeMap",()=>{const i=S(["1:3",["0:2","0:3"],"1:1",["1:2","3:3"],"0:2",["0:2","0:3"]]);test("map",()=>e.deepStrictEqual(i.rangeMappings.map(n=>n.toString()),["[2:4, 2:6) -> [2:4, 2:7)","[3:2, 4:3) -> [3:2, 6:4)","[4:5, 4:7) -> [6:6, 6:9)"]));function t(){return i.project(h(this.test.title)).toString()}test("1:1",function(){e.deepStrictEqual(t.apply(this),"[1:1, 1:1) -> [1:1, 1:1)")}),test("2:3",function(){e.deepStrictEqual(t.apply(this),"[2:3, 2:3) -> [2:3, 2:3)")}),test("2:4",function(){e.deepStrictEqual(t.apply(this),"[2:4, 2:6) -> [2:4, 2:7)")}),test("2:5",function(){e.deepStrictEqual(t.apply(this),"[2:4, 2:6) -> [2:4, 2:7)")}),test("2:6",function(){e.deepStrictEqual(t.apply(this),"[2:6, 2:6) -> [2:7, 2:7)")}),test("2:7",function(){e.deepStrictEqual(t.apply(this),"[2:7, 2:7) -> [2:8, 2:8)")}),test("3:1",function(){e.deepStrictEqual(t.apply(this),"[3:1, 3:1) -> [3:1, 3:1)")}),test("3:2",function(){e.deepStrictEqual(t.apply(this),"[3:2, 4:3) -> [3:2, 6:4)")}),test("4:2",function(){e.deepStrictEqual(t.apply(this),"[3:2, 4:3) -> [3:2, 6:4)")}),test("4:3",function(){e.deepStrictEqual(t.apply(this),"[4:3, 4:3) -> [6:4, 6:4)")}),test("4:4",function(){e.deepStrictEqual(t.apply(this),"[4:4, 4:4) -> [6:5, 6:5)")}),test("4:5",function(){e.deepStrictEqual(t.apply(this),"[4:5, 4:7) -> [6:6, 6:9)")})})});function h(i){const[t,n]=i.split(":");return new l(parseInt(t,10),parseInt(n,10))}function u(i){const[t,n]=i.split(":");return new r(parseInt(t,10),parseInt(n,10))}function a(i){return new l(i.lineCount+1,i.columnCount+1)}function S(i){const t=[];let n=new r(0,0),o=new r(0,0);for(const p of i)if(typeof p=="string"){const s=u(p);n=n.add(s),o=o.add(s)}else{const s=u(p[0]),c=u(p[1]);t.push(new g(f.fromPositions(a(n),a(n.add(s))),f.fromPositions(a(o),a(o.add(c))))),n=n.add(s),o=o.add(c)}return new m(t,n.lineCount)}
