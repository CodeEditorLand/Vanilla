var y=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var p=(u,o,e,i)=>{for(var r=i>1?void 0:i?M(o,e):o,a=u.length-1,d;a>=0;a--)(d=u[a])&&(r=(i?d(o,e,r):d(r))||r);return i&&r&&y(o,e,r),r},t=(u,o)=>(e,i)=>o(e,i,u);import{assertFn as b}from"../../../../base/common/assert.js";import{autorun as E}from"../../../../base/common/observable.js";import{isEqual as n}from"../../../../base/common/resources.js";import{isDefined as S}from"../../../../base/common/types.js";import"../../../../base/common/uri.js";import{ITextResourceConfigurationService as C}from"../../../../editor/common/services/textResourceConfiguration.js";import{localize as _}from"../../../../nls.js";import{IConfigurationService as F}from"../../../../platform/configuration/common/configuration.js";import{IFileService as D}from"../../../../platform/files/common/files.js";import{IInstantiationService as R}from"../../../../platform/instantiation/common/instantiation.js";import{ILabelService as T}from"../../../../platform/label/common/label.js";import{DEFAULT_EDITOR_ASSOCIATION as x,EditorInputCapabilities as l,isResourceMergeEditorInput as U}from"../../../common/editor.js";import"../../../common/editor/editorInput.js";import{AbstractTextResourceEditorInput as L}from"../../../common/editor/textResourceEditorInput.js";import{ICustomEditorLabelService as O}from"../../../services/editor/common/customEditorLabelService.js";import{IEditorService as w}from"../../../services/editor/common/editorService.js";import{IFilesConfigurationService as k}from"../../../services/filesConfiguration/common/filesConfigurationService.js";import{ITextFileService as W}from"../../../services/textfile/common/textfiles.js";import{TempFileMergeEditorModeFactory as A,WorkspaceMergeEditorModeFactory as P}from"./mergeEditorInputModel.js";import{MergeEditorTelemetry as H}from"./telemetry.js";class ge{constructor(o,e,i,r){this.uri=o;this.title=e;this.detail=i;this.description=r}}let s=class extends L{constructor(e,i,r,a,d,c,m,v,I,N,f,g,h){super(a,void 0,c,m,v,I,f,g,h);this.base=e;this.input1=i;this.input2=r;this.result=a;this._instaService=d;this.configurationService=N}static ID="mergeEditor.Input";_inputModel;closeHandler={showConfirm:()=>this._inputModel?.shouldConfirmClose()??!1,confirm:async e=>{b(()=>e.every(r=>r.editor instanceof s));const i=e.map(r=>r.editor._inputModel).filter(S);return await this._inputModel.confirmClose(i)}};get useWorkingCopy(){return this.configurationService.getValue("mergeEditor.useWorkingCopy")??!1}dispose(){super.dispose()}get typeId(){return s.ID}get editorId(){return x.id}get capabilities(){let e=super.capabilities|l.MultipleEditors;return this.useWorkingCopy&&(e|=l.Untitled),e}getName(){return _("name","Merging: {0}",super.getName())}mergeEditorModeFactory=this._instaService.createInstance(this.useWorkingCopy?A:P,this._instaService.createInstance(H));async resolve(){if(!this._inputModel){const e=this._register(await this.mergeEditorModeFactory.createInputModel({base:this.base,input1:this.input1,input2:this.input2,result:this.result}));this._inputModel=e,this._register(E(i=>{e.isDirty.read(i),this._onDidChangeDirty.fire()})),await this._inputModel.model.onInitialized}return this._inputModel}async accept(){await this._inputModel?.accept()}async save(e,i){await this._inputModel?.save(i)}toUntyped(){return{input1:{resource:this.input1.uri,label:this.input1.title,description:this.input1.description,detail:this.input1.detail},input2:{resource:this.input2.uri,label:this.input2.title,description:this.input2.description,detail:this.input2.detail},base:{resource:this.base},result:{resource:this.result},options:{override:this.typeId}}}matches(e){return this===e?!0:e instanceof s?n(this.base,e.base)&&n(this.input1.uri,e.input1.uri)&&n(this.input2.uri,e.input2.uri)&&n(this.result,e.result):U(e)?(this.editorId===e.options?.override||e.options?.override===void 0)&&n(this.base,e.base.resource)&&n(this.input1.uri,e.input1.resource)&&n(this.input2.uri,e.input2.resource)&&n(this.result,e.result.resource):!1}async revert(e,i){return this._inputModel?.revert(i)}isDirty(){return this._inputModel?.isDirty.get()??!1}setLanguageId(e,i){this._inputModel?.model.setLanguageId(e,i)}};s=p([t(4,R),t(5,w),t(6,W),t(7,T),t(8,D),t(9,F),t(10,k),t(11,C),t(12,O)],s);export{s as MergeEditorInput,ge as MergeEditorInputData};
