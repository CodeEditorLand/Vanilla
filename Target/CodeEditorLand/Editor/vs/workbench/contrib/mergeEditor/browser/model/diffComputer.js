var M=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var L=(r,e,i,u)=>{for(var a=u>1?void 0:u?h(e,i):e,s=r.length-1,m;s>=0;s--)(m=r[s])&&(a=(u?m(e,i,a):m(a))||a);return u&&a&&M(e,i,a),a},l=(r,e)=>(i,u)=>e(i,u,r);import{assertFn as D,checkAdjacentItems as C}from"../../../../../base/common/assert.js";import{IEditorWorkerService as E}from"../../../../../editor/common/services/editorWorker.js";import{IConfigurationService as T}from"../../../../../platform/configuration/common/configuration.js";import{observableConfigValue as V}from"../../../../../platform/observable/common/platformObservableUtils.js";import{LineRange as y}from"./lineRange.js";import{DetailedLineRangeMapping as w,RangeMapping as S}from"./mapping.js";let c=class{constructor(e,i){this.editorWorkerService=e;this.configurationService=i}mergeAlgorithm=V("mergeEditor.diffAlgorithm","advanced",this.configurationService).map(e=>e==="smart"?"legacy":e==="experimental"?"advanced":e);async computeDiff(e,i,u){const a=this.mergeAlgorithm.read(u),s=e.getVersionId(),m=i.getVersionId(),R=await this.editorWorkerService.computeDiff(e.uri,i.uri,{ignoreTrimWhitespace:!1,maxComputationTimeMs:0,computeMoves:!1},a);if(!R)throw new Error("Diff computation failed");if(e.isDisposed()||i.isDisposed())return{diffs:null};const p=R.changes.map(n=>new w(b(n.original),e,b(n.modified),i,n.innerChanges?.map(o=>j(o)))),N=e.getVersionId(),v=i.getVersionId();return s!==N||m!==v?{diffs:null}:(D(()=>{for(const n of p){const o=n.inputRange,d=n.outputRange,I=n.inputTextModel,x=n.outputTextModel;for(const t of n.rangeMappings){let g=o.startLineNumber-1<=t.inputRange.startLineNumber&&t.inputRange.endLineNumber<=o.endLineNumberExclusive;g&&t.inputRange.startLineNumber===o.startLineNumber-1&&(g=t.inputRange.endColumn>=I.getLineMaxColumn(t.inputRange.startLineNumber)),g&&t.inputRange.endLineNumber===o.endLineNumberExclusive&&(g=t.inputRange.endColumn===1);let f=d.startLineNumber-1<=t.outputRange.startLineNumber&&t.outputRange.endLineNumber<=d.endLineNumberExclusive;if(f&&t.outputRange.startLineNumber===d.startLineNumber-1&&(f=t.outputRange.endColumn>=x.getLineMaxColumn(t.outputRange.endLineNumber)),f&&t.outputRange.endLineNumber===d.endLineNumberExclusive&&(f=t.outputRange.endColumn===1),!g||!f)return!1}}return p.length===0||p[0].inputRange.startLineNumber===p[0].outputRange.startLineNumber&&C(p,(n,o)=>o.inputRange.startLineNumber-n.inputRange.endLineNumberExclusive===o.outputRange.startLineNumber-n.outputRange.endLineNumberExclusive&&n.inputRange.endLineNumberExclusive<o.inputRange.startLineNumber&&n.outputRange.endLineNumberExclusive<o.outputRange.startLineNumber)}),{diffs:p})}};c=L([l(0,E),l(1,T)],c);function b(r){return new y(r.startLineNumber,r.length)}function j(r){return new S(r.originalRange,r.modifiedRange)}export{c as MergeDiffComputer,b as toLineRange,j as toRangeMapping};
