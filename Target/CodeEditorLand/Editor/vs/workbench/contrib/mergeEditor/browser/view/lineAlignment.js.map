{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/view/lineAlignment.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy } from '../../../../../base/common/arrays.js';\nimport { assertFn, checkAdjacentItems } from '../../../../../base/common/assert.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { Position } from '../../../../../editor/common/core/position.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { TextLength } from '../../../../../editor/common/core/textLength.js';\nimport { RangeMapping } from '../model/mapping.js';\nimport { ModifiedBaseRange } from '../model/modifiedBaseRange.js';\nimport { addLength, lengthBetweenPositions, lengthOfRange } from '../model/rangeUtils.js';\n\nexport type LineAlignment = [input1LineNumber: number | undefined, baseLineNumber: number, input2LineNumber: number | undefined];\n\nexport function getAlignments(m: ModifiedBaseRange): LineAlignment[] {\n\tconst equalRanges1 = toEqualRangeMappings(m.input1Diffs.flatMap(d => d.rangeMappings), m.baseRange.toRange(), m.input1Range.toRange());\n\tconst equalRanges2 = toEqualRangeMappings(m.input2Diffs.flatMap(d => d.rangeMappings), m.baseRange.toRange(), m.input2Range.toRange());\n\n\tconst commonRanges = splitUpCommonEqualRangeMappings(equalRanges1, equalRanges2);\n\n\tlet result: LineAlignment[] = [];\n\tresult.push([m.input1Range.startLineNumber - 1, m.baseRange.startLineNumber - 1, m.input2Range.startLineNumber - 1]);\n\n\tfunction isFullSync(lineAlignment: LineAlignment) {\n\t\treturn lineAlignment.every((i) => i !== undefined);\n\t}\n\n\t// One base line has either up to one full sync or up to two half syncs.\n\tfor (const m of commonRanges) {\n\t\tconst lineAlignment: LineAlignment = [m.output1Pos?.lineNumber, m.inputPos.lineNumber, m.output2Pos?.lineNumber];\n\t\tconst alignmentIsFullSync = isFullSync(lineAlignment);\n\n\t\tlet shouldAdd = true;\n\t\tif (alignmentIsFullSync) {\n\t\t\tconst isNewFullSyncAlignment = !result.some(r => isFullSync(r) && r.some((v, idx) => v !== undefined && v === lineAlignment[idx]));\n\t\t\tif (isNewFullSyncAlignment) {\n\t\t\t\t// Remove half syncs\n\t\t\t\tresult = result.filter(r => !r.some((v, idx) => v !== undefined && v === lineAlignment[idx]));\n\t\t\t}\n\t\t\tshouldAdd = isNewFullSyncAlignment;\n\t\t} else {\n\t\t\tconst isNew = !result.some(r => r.some((v, idx) => v !== undefined && v === lineAlignment[idx]));\n\t\t\tshouldAdd = isNew;\n\t\t}\n\n\t\tif (shouldAdd) {\n\t\t\tresult.push(lineAlignment);\n\t\t} else {\n\t\t\tif (m.length.isGreaterThan(new TextLength(1, 0))) {\n\t\t\t\tresult.push([\n\t\t\t\t\tm.output1Pos ? m.output1Pos.lineNumber + 1 : undefined,\n\t\t\t\t\tm.inputPos.lineNumber + 1,\n\t\t\t\t\tm.output2Pos ? m.output2Pos.lineNumber + 1 : undefined\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst finalLineAlignment: LineAlignment = [m.input1Range.endLineNumberExclusive, m.baseRange.endLineNumberExclusive, m.input2Range.endLineNumberExclusive];\n\tresult = result.filter(r => r.every((v, idx) => v !== finalLineAlignment[idx]));\n\tresult.push(finalLineAlignment);\n\n\tassertFn(() => checkAdjacentItems(result.map(r => r[0]).filter(isDefined), (a, b) => a < b)\n\t\t&& checkAdjacentItems(result.map(r => r[1]).filter(isDefined), (a, b) => a <= b)\n\t\t&& checkAdjacentItems(result.map(r => r[2]).filter(isDefined), (a, b) => a < b)\n\t\t&& result.every(alignment => alignment.filter(isDefined).length >= 2)\n\t);\n\n\treturn result;\n}\ninterface CommonRangeMapping {\n\toutput1Pos: Position | undefined;\n\toutput2Pos: Position | undefined;\n\tinputPos: Position;\n\tlength: TextLength;\n}\n\nfunction toEqualRangeMappings(diffs: RangeMapping[], inputRange: Range, outputRange: Range): RangeMapping[] {\n\tconst result: RangeMapping[] = [];\n\n\tlet equalRangeInputStart = inputRange.getStartPosition();\n\tlet equalRangeOutputStart = outputRange.getStartPosition();\n\n\tfor (const d of diffs) {\n\t\tconst equalRangeMapping = new RangeMapping(\n\t\t\tRange.fromPositions(equalRangeInputStart, d.inputRange.getStartPosition()),\n\t\t\tRange.fromPositions(equalRangeOutputStart, d.outputRange.getStartPosition())\n\t\t);\n\t\tassertFn(() => lengthOfRange(equalRangeMapping.inputRange).equals(\n\t\t\tlengthOfRange(equalRangeMapping.outputRange)\n\t\t)\n\t\t);\n\t\tif (!equalRangeMapping.inputRange.isEmpty()) {\n\t\t\tresult.push(equalRangeMapping);\n\t\t}\n\n\t\tequalRangeInputStart = d.inputRange.getEndPosition();\n\t\tequalRangeOutputStart = d.outputRange.getEndPosition();\n\t}\n\n\tconst equalRangeMapping = new RangeMapping(\n\t\tRange.fromPositions(equalRangeInputStart, inputRange.getEndPosition()),\n\t\tRange.fromPositions(equalRangeOutputStart, outputRange.getEndPosition())\n\t);\n\tassertFn(() => lengthOfRange(equalRangeMapping.inputRange).equals(\n\t\tlengthOfRange(equalRangeMapping.outputRange)\n\t)\n\t);\n\tif (!equalRangeMapping.inputRange.isEmpty()) {\n\t\tresult.push(equalRangeMapping);\n\t}\n\n\treturn result;\n}\n\n/**\n * It is `result[i][0].inputRange.equals(result[i][1].inputRange)`.\n*/\nfunction splitUpCommonEqualRangeMappings(\n\tequalRangeMappings1: RangeMapping[],\n\tequalRangeMappings2: RangeMapping[]\n): CommonRangeMapping[] {\n\tconst result: CommonRangeMapping[] = [];\n\n\tconst events: { input: 0 | 1; start: boolean; inputPos: Position; outputPos: Position }[] = [];\n\tfor (const [input, rangeMappings] of [[0, equalRangeMappings1], [1, equalRangeMappings2]] as const) {\n\t\tfor (const rangeMapping of rangeMappings) {\n\t\t\tevents.push({\n\t\t\t\tinput: input,\n\t\t\t\tstart: true,\n\t\t\t\tinputPos: rangeMapping.inputRange.getStartPosition(),\n\t\t\t\toutputPos: rangeMapping.outputRange.getStartPosition()\n\t\t\t});\n\t\t\tevents.push({\n\t\t\t\tinput: input,\n\t\t\t\tstart: false,\n\t\t\t\tinputPos: rangeMapping.inputRange.getEndPosition(),\n\t\t\t\toutputPos: rangeMapping.outputRange.getEndPosition()\n\t\t\t});\n\t\t}\n\t}\n\n\tevents.sort(compareBy((m) => m.inputPos, Position.compare));\n\n\tconst starts: [Position | undefined, Position | undefined] = [undefined, undefined];\n\tlet lastInputPos: Position | undefined;\n\n\tfor (const event of events) {\n\t\tif (lastInputPos && starts.some(s => !!s)) {\n\t\t\tconst length = lengthBetweenPositions(lastInputPos, event.inputPos);\n\t\t\tif (!length.isZero()) {\n\t\t\t\tresult.push({\n\t\t\t\t\tinputPos: lastInputPos,\n\t\t\t\t\tlength,\n\t\t\t\t\toutput1Pos: starts[0],\n\t\t\t\t\toutput2Pos: starts[1]\n\t\t\t\t});\n\t\t\t\tif (starts[0]) {\n\t\t\t\t\tstarts[0] = addLength(starts[0], length);\n\t\t\t\t}\n\t\t\t\tif (starts[1]) {\n\t\t\t\t\tstarts[1] = addLength(starts[1], length);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstarts[event.input] = event.start ? event.outputPos : undefined;\n\t\tlastInputPos = event.inputPos;\n\t}\n\n\treturn result;\n}\n"],
  "mappings": "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",
  "names": ["m", "equalRangeMapping"]
}
