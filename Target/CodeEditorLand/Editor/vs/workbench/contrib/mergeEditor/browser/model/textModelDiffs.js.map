{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/textModelDiffs.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, numberComparator } from '../../../../../base/common/arrays.js';\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { Disposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { DetailedLineRangeMapping } from './mapping.js';\nimport { LineRangeEdit } from './editing.js';\nimport { LineRange } from './lineRange.js';\nimport { ReentrancyBarrier } from '../../../../../base/common/controlFlow.js';\nimport { IMergeDiffComputer } from './diffComputer.js';\nimport { autorun, IObservable, IReader, ITransaction, observableSignal, observableValue, transaction } from '../../../../../base/common/observable.js';\nimport { UndoRedoGroup } from '../../../../../platform/undoRedo/common/undoRedo.js';\n\nexport class TextModelDiffs extends Disposable {\n\tprivate _recomputeCount = 0;\n\tprivate readonly _state = observableValue<TextModelDiffState, TextModelDiffChangeReason>(this, TextModelDiffState.initializing);\n\tprivate readonly _diffs = observableValue<DetailedLineRangeMapping[], TextModelDiffChangeReason>(this, []);\n\n\tprivate readonly _barrier = new ReentrancyBarrier();\n\tprivate _isDisposed = false;\n\n\tpublic get isApplyingChange() {\n\t\treturn this._barrier.isOccupied;\n\t}\n\n\tconstructor(\n\t\tprivate readonly baseTextModel: ITextModel,\n\t\tprivate readonly textModel: ITextModel,\n\t\tprivate readonly diffComputer: IMergeDiffComputer,\n\t) {\n\t\tsuper();\n\n\t\tconst recomputeSignal = observableSignal('recompute');\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description Update diff state */\n\t\t\trecomputeSignal.read(reader);\n\t\t\tthis._recompute(reader);\n\t\t}));\n\n\t\tthis._register(\n\t\t\tbaseTextModel.onDidChangeContent(\n\t\t\t\tthis._barrier.makeExclusiveOrSkip(() => {\n\t\t\t\t\trecomputeSignal.trigger(undefined);\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t\tthis._register(\n\t\t\ttextModel.onDidChangeContent(\n\t\t\t\tthis._barrier.makeExclusiveOrSkip(() => {\n\t\t\t\t\trecomputeSignal.trigger(undefined);\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis._isDisposed = true;\n\t\t}));\n\t}\n\n\tpublic get state(): IObservable<TextModelDiffState, TextModelDiffChangeReason> {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * Diffs from base to input.\n\t*/\n\tpublic get diffs(): IObservable<DetailedLineRangeMapping[], TextModelDiffChangeReason> {\n\t\treturn this._diffs;\n\t}\n\n\tprivate _isInitializing = true;\n\n\tprivate _recompute(reader: IReader): void {\n\t\tthis._recomputeCount++;\n\t\tconst currentRecomputeIdx = this._recomputeCount;\n\n\t\tif (this._state.get() === TextModelDiffState.initializing) {\n\t\t\tthis._isInitializing = true;\n\t\t}\n\n\t\ttransaction(tx => {\n\t\t\t/** @description Starting Diff Computation. */\n\t\t\tthis._state.set(\n\t\t\t\tthis._isInitializing ? TextModelDiffState.initializing : TextModelDiffState.updating,\n\t\t\t\ttx,\n\t\t\t\tTextModelDiffChangeReason.other\n\t\t\t);\n\t\t});\n\n\t\tconst result = this.diffComputer.computeDiff(this.baseTextModel, this.textModel, reader);\n\n\t\tresult.then((result) => {\n\t\t\tif (this._isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentRecomputeIdx !== this._recomputeCount) {\n\t\t\t\t// There is a newer recompute call\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Completed Diff Computation */\n\t\t\t\tif (result.diffs) {\n\t\t\t\t\tthis._state.set(TextModelDiffState.upToDate, tx, TextModelDiffChangeReason.textChange);\n\t\t\t\t\tthis._diffs.set(result.diffs, tx, TextModelDiffChangeReason.textChange);\n\t\t\t\t} else {\n\t\t\t\t\tthis._state.set(TextModelDiffState.error, tx, TextModelDiffChangeReason.textChange);\n\t\t\t\t}\n\t\t\t\tthis._isInitializing = false;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate ensureUpToDate(): void {\n\t\tif (this.state.get() !== TextModelDiffState.upToDate) {\n\t\t\tthrow new BugIndicatingError('Cannot remove diffs when the model is not up to date');\n\t\t}\n\t}\n\n\tpublic removeDiffs(diffToRemoves: DetailedLineRangeMapping[], transaction: ITransaction | undefined, group?: UndoRedoGroup): void {\n\t\tthis.ensureUpToDate();\n\n\t\tdiffToRemoves.sort(compareBy((d) => d.inputRange.startLineNumber, numberComparator));\n\t\tdiffToRemoves.reverse();\n\n\t\tlet diffs = this._diffs.get();\n\n\t\tfor (const diffToRemove of diffToRemoves) {\n\t\t\t// TODO improve performance\n\t\t\tconst len = diffs.length;\n\t\t\tdiffs = diffs.filter((d) => d !== diffToRemove);\n\t\t\tif (len === diffs.length) {\n\t\t\t\tthrow new BugIndicatingError();\n\t\t\t}\n\n\t\t\tthis._barrier.runExclusivelyOrThrow(() => {\n\t\t\t\tconst edits = diffToRemove.getReverseLineEdit().toEdits(this.textModel.getLineCount());\n\t\t\t\tthis.textModel.pushEditOperations(null, edits, () => null, group);\n\t\t\t});\n\n\t\t\tdiffs = diffs.map((d) =>\n\t\t\t\td.outputRange.isAfter(diffToRemove.outputRange)\n\t\t\t\t\t? d.addOutputLineDelta(diffToRemove.inputRange.lineCount - diffToRemove.outputRange.lineCount)\n\t\t\t\t\t: d\n\t\t\t);\n\t\t}\n\n\t\tthis._diffs.set(diffs, transaction, TextModelDiffChangeReason.other);\n\t}\n\n\t/**\n\t * Edit must be conflict free.\n\t */\n\tpublic applyEditRelativeToOriginal(edit: LineRangeEdit, transaction: ITransaction | undefined, group?: UndoRedoGroup): void {\n\t\tthis.ensureUpToDate();\n\n\t\tconst editMapping = new DetailedLineRangeMapping(\n\t\t\tedit.range,\n\t\t\tthis.baseTextModel,\n\t\t\tnew LineRange(edit.range.startLineNumber, edit.newLines.length),\n\t\t\tthis.textModel\n\t\t);\n\n\t\tlet firstAfter = false;\n\t\tlet delta = 0;\n\t\tconst newDiffs = new Array<DetailedLineRangeMapping>();\n\t\tfor (const diff of this.diffs.get()) {\n\t\t\tif (diff.inputRange.touches(edit.range)) {\n\t\t\t\tthrow new BugIndicatingError('Edit must be conflict free.');\n\t\t\t} else if (diff.inputRange.isAfter(edit.range)) {\n\t\t\t\tif (!firstAfter) {\n\t\t\t\t\tfirstAfter = true;\n\t\t\t\t\tnewDiffs.push(editMapping.addOutputLineDelta(delta));\n\t\t\t\t}\n\n\t\t\t\tnewDiffs.push(diff.addOutputLineDelta(edit.newLines.length - edit.range.lineCount));\n\t\t\t} else {\n\t\t\t\tnewDiffs.push(diff);\n\t\t\t}\n\n\t\t\tif (!firstAfter) {\n\t\t\t\tdelta += diff.outputRange.lineCount - diff.inputRange.lineCount;\n\t\t\t}\n\t\t}\n\n\t\tif (!firstAfter) {\n\t\t\tfirstAfter = true;\n\t\t\tnewDiffs.push(editMapping.addOutputLineDelta(delta));\n\t\t}\n\n\t\tthis._barrier.runExclusivelyOrThrow(() => {\n\t\t\tconst edits = new LineRangeEdit(edit.range.delta(delta), edit.newLines).toEdits(this.textModel.getLineCount());\n\t\t\tthis.textModel.pushEditOperations(null, edits, () => null, group);\n\t\t});\n\t\tthis._diffs.set(newDiffs, transaction, TextModelDiffChangeReason.other);\n\t}\n\n\tpublic findTouchingDiffs(baseRange: LineRange): DetailedLineRangeMapping[] {\n\t\treturn this.diffs.get().filter(d => d.inputRange.touches(baseRange));\n\t}\n\n\tprivate getResultLine(lineNumber: number, reader?: IReader): number | DetailedLineRangeMapping {\n\t\tlet offset = 0;\n\t\tconst diffs = reader ? this.diffs.read(reader) : this.diffs.get();\n\t\tfor (const diff of diffs) {\n\t\t\tif (diff.inputRange.contains(lineNumber) || diff.inputRange.endLineNumberExclusive === lineNumber) {\n\t\t\t\treturn diff;\n\t\t\t} else if (diff.inputRange.endLineNumberExclusive < lineNumber) {\n\t\t\t\toffset = diff.resultingDeltaFromOriginalToModified;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn lineNumber + offset;\n\t}\n\n\tpublic getResultLineRange(baseRange: LineRange, reader?: IReader): LineRange {\n\t\tlet start = this.getResultLine(baseRange.startLineNumber, reader);\n\t\tif (typeof start !== 'number') {\n\t\t\tstart = start.outputRange.startLineNumber;\n\t\t}\n\t\tlet endExclusive = this.getResultLine(baseRange.endLineNumberExclusive, reader);\n\t\tif (typeof endExclusive !== 'number') {\n\t\t\tendExclusive = endExclusive.outputRange.endLineNumberExclusive;\n\t\t}\n\n\t\treturn LineRange.fromLineNumbers(start, endExclusive);\n\t}\n}\n\nexport const enum TextModelDiffChangeReason {\n\tother = 0,\n\ttextChange = 1,\n}\n\nexport const enum TextModelDiffState {\n\tinitializing = 1,\n\tupToDate = 2,\n\tupdating = 3,\n\terror = 4,\n}\n\nexport interface ITextModelDiffsState {\n\tstate: TextModelDiffState;\n\tdiffs: DetailedLineRangeMapping[];\n}\n"],
  "mappings": "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",
  "names": ["result", "transaction", "TextModelDiffChangeReason", "TextModelDiffState"]
}
