var B=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var I=(l,s,t,e)=>{for(var o=e>1?void 0:e?y(s,t):s,i=l.length-1,n;i>=0;i--)(n=l[i])&&(o=(e?n(s,t,o):n(o))||o);return e&&o&&B(s,t,o),o},p=(l,s)=>(t,e)=>s(t,e,l);import{findLast as C}from"../../../../../base/common/arraysFind.js";import{Disposable as E}from"../../../../../base/common/lifecycle.js";import{derived as v,derivedObservableWithWritableCache as w,observableValue as M,transaction as c}from"../../../../../base/common/observable.js";import{Range as V}from"../../../../../editor/common/core/range.js";import{ScrollType as A}from"../../../../../editor/common/editorCommon.js";import{localize as S}from"../../../../../nls.js";import{IConfigurationService as L}from"../../../../../platform/configuration/common/configuration.js";import{INotificationService as N}from"../../../../../platform/notification/common/notification.js";import{LineRange as H}from"../model/lineRange.js";import{observableConfigValue as T}from"../../../../../platform/observable/common/platformObservableUtils.js";let g=class extends E{constructor(t,e,o,i,n,d,r,b){super();this.model=t;this.inputCodeEditorView1=e;this.inputCodeEditorView2=o;this.resultCodeEditorView=i;this.baseCodeEditorView=n;this.showNonConflictingChanges=d;this.configurationService=r;this.notificationService=b;this._register(i.editor.onDidChangeModelContent(h=>{if(this.model.isApplyingEditInResult||h.isRedoing||h.isUndoing)return;const f=[];for(const u of h.changes){const a=this.model.translateResultRangeToBase(V.lift(u.range)),m=this.model.findModifiedBaseRangesInRange(new H(a.startLineNumber,a.endLineNumber-a.startLineNumber));m.length===1&&(this.model.isHandled(m[0]).get()||f.push(m[0]))}if(f.length===0)return;const R={model:this.model,redo(){c(u=>{for(const a of f)this.model.setHandled(a,!0,u)})},undo(){c(u=>{for(const a of f)this.model.setHandled(a,!1,u)})}};this.attachedHistory.pushAttachedHistoryElement(R),R.redo()}))}manuallySetActiveModifiedBaseRange=M(this,{range:void 0,counter:0});attachedHistory=this._register(new O(this.model.resultTextModel));shouldUseAppendInsteadOfAccept=T("mergeEditor.shouldUseAppendInsteadOfAccept",!1,this.configurationService);counter=0;lastFocusedEditor=w(this,(t,e)=>{const i=[this.inputCodeEditorView1,this.inputCodeEditorView2,this.resultCodeEditorView,this.baseCodeEditorView.read(t)].find(n=>n&&n.isFocused.read(t));return i?{view:i,counter:this.counter++}:e||{view:void 0,counter:this.counter++}});baseShowDiffAgainst=v(this,t=>{const e=this.lastFocusedEditor.read(t);if(e.view===this.inputCodeEditorView1)return 1;if(e.view===this.inputCodeEditorView2)return 2});selectionInBase=v(this,t=>{const e=this.lastFocusedEditor.read(t).view;return e?{rangesInBase:(e.selection.read(t)||[]).map(n=>e===this.inputCodeEditorView1?this.model.translateInputRangeToBase(1,n):e===this.inputCodeEditorView2?this.model.translateInputRangeToBase(2,n):e===this.resultCodeEditorView?this.model.translateResultRangeToBase(n):(e===this.baseCodeEditorView.read(t),n)),sourceEditor:e}:void 0});getRangeOfModifiedBaseRange(t,e,o){if(t===this.resultCodeEditorView)return this.model.getLineRangeInResult(e.baseRange,o);if(t===this.baseCodeEditorView.get())return e.baseRange;{const i=t===this.inputCodeEditorView1?1:2;return e.getInputRange(i)}}activeModifiedBaseRange=v(this,t=>{const e=this.lastFocusedEditor.read(t),o=this.manuallySetActiveModifiedBaseRange.read(t);if(o.counter>e.counter)return o.range;if(!e.view)return;const i=e.view.cursorLineNumber.read(t);return i?this.model.modifiedBaseRanges.read(t).find(d=>{const r=this.getRangeOfModifiedBaseRange(e.view,d,t);return r.isEmpty?r.startLineNumber===i:r.contains(i)}):void 0});setActiveModifiedBaseRange(t,e){this.manuallySetActiveModifiedBaseRange.set({range:t,counter:this.counter++},e)}setState(t,e,o,i){this.manuallySetActiveModifiedBaseRange.set({range:t,counter:this.counter++},o),this.model.setState(t,e,i,o),this.lastFocusedEditor.clearCache(o)}goToConflict(t){let e=this.lastFocusedEditor.get().view;e||(e=this.resultCodeEditorView);const o=e.editor.getPosition()?.lineNumber;if(o===void 0)return;const i=t(e,o);if(i){const n=this.getRangeOfModifiedBaseRange(e,i,void 0);e.editor.focus();let d=n.startLineNumber,r=n.endLineNumberExclusive;n.startLineNumber>e.editor.getModel().getLineCount()&&(c(b=>{this.setActiveModifiedBaseRange(i,b)}),d=r=e.editor.getModel().getLineCount()),e.editor.setPosition({lineNumber:d,column:e.editor.getModel().getLineFirstNonWhitespaceColumn(d)}),e.editor.revealLinesNearTop(d,r,A.Smooth)}}goToNextModifiedBaseRange(t){this.goToConflict((e,o)=>this.model.modifiedBaseRanges.get().find(i=>t(i)&&this.getRangeOfModifiedBaseRange(e,i,void 0).startLineNumber>o)||this.model.modifiedBaseRanges.get().find(i=>t(i)))}goToPreviousModifiedBaseRange(t){this.goToConflict((e,o)=>C(this.model.modifiedBaseRanges.get(),i=>t(i)&&this.getRangeOfModifiedBaseRange(e,i,void 0).endLineNumberExclusive<o)||C(this.model.modifiedBaseRanges.get(),i=>t(i)))}toggleActiveConflict(t){const e=this.activeModifiedBaseRange.get();if(!e){this.notificationService.error(S("noConflictMessage","There is currently no conflict focused that can be toggled."));return}c(o=>{this.setState(e,this.model.getState(e).get().toggle(t),o,t)})}acceptAll(t){c(e=>{for(const o of this.model.modifiedBaseRanges.get())this.setState(o,this.model.getState(o).get().withInputValue(t,!0),e,t)})}};g=I([p(6,L),p(7,N)],g);class O extends E{constructor(t){super();this.model=t;this._register(t.onDidChangeContent(e=>{const o=t.getAlternativeVersionId();if(e.isRedoing)for(const i of this.attachedHistory)this.previousAltId<i.altId&&i.altId<=o&&i.element.redo();else if(e.isUndoing)for(let i=this.attachedHistory.length-1;i>=0;i--){const n=this.attachedHistory[i];o<n.altId&&n.altId<=this.previousAltId&&n.element.undo()}else for(;this.attachedHistory.length>0&&this.attachedHistory[this.attachedHistory.length-1].altId>this.previousAltId;)this.attachedHistory.pop();this.previousAltId=o}))}attachedHistory=[];previousAltId=this.model.getAlternativeVersionId();pushAttachedHistoryElement(t){this.attachedHistory.push({altId:this.model.getAlternativeVersionId(),element:t})}}export{g as MergeEditorViewModel};
