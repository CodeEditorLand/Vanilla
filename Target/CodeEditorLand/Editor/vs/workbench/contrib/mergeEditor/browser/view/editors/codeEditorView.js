var b=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var c=(n,r,e,t)=>{for(var i=t>1?void 0:t?f(r,e):r,o=n.length-1,d;o>=0;o--)(d=n[o])&&(i=(t?d(r,e,i):d(i))||i);return t&&i&&b(r,e,i),i},p=(n,r)=>(e,t)=>r(e,t,n);import{h as s}from"../../../../../../base/browser/dom.js";import{Emitter as v,Event as E}from"../../../../../../base/common/event.js";import{Disposable as u}from"../../../../../../base/common/lifecycle.js";import{autorun as I,derived as y,observableFromEvent as m}from"../../../../../../base/common/observable.js";import{EditorExtensionsRegistry as D}from"../../../../../../editor/browser/editorExtensions.js";import{CodeEditorWidget as S}from"../../../../../../editor/browser/widget/codeEditor/codeEditorWidget.js";import{Selection as w}from"../../../../../../editor/common/core/selection.js";import{CodeLensContribution as C}from"../../../../../../editor/contrib/codelens/browser/codelensController.js";import{FoldingController as M}from"../../../../../../editor/contrib/folding/browser/folding.js";import{MenuWorkbenchToolBar as O}from"../../../../../../platform/actions/browser/toolbar.js";import{IInstantiationService as V}from"../../../../../../platform/instantiation/common/instantiation.js";import{observableConfigValue as l}from"../../../../../../platform/observable/common/platformObservableUtils.js";import{DEFAULT_EDITOR_MAX_DIMENSIONS as h,DEFAULT_EDITOR_MIN_DIMENSIONS as g}from"../../../../../browser/parts/editor/editor.js";import{setStyle as x}from"../../utils.js";class G extends u{constructor(e,t,i){super();this.instantiationService=e;this.viewModel=t;this.configurationService=i}model=this.viewModel.map(e=>e?.model);htmlElements=s("div.code-view",[s("div.header@header",[s("span.title@title"),s("span.description@description"),s("span.detail@detail"),s("span.toolbar@toolbar")]),s("div.container",[s("div.gutter@gutterDiv"),s("div@editor")])]);_onDidViewChange=new v;view={element:this.htmlElements.root,minimumWidth:g.width,maximumWidth:h.width,minimumHeight:g.height,maximumHeight:h.height,onDidChange:this._onDidViewChange.event,layout:(e,t,i,o)=>{x(this.htmlElements.root,{width:e,height:t,top:i,left:o}),this.editor.layout({width:e-this.htmlElements.gutterDiv.clientWidth,height:t-this.htmlElements.header.clientHeight})}};checkboxesVisible=l("mergeEditor.showCheckboxes",!1,this.configurationService);showDeletionMarkers=l("mergeEditor.showDeletionMarkers",!0,this.configurationService);useSimplifiedDecorations=l("mergeEditor.useSimplifiedDecorations",!1,this.configurationService);editor=this.instantiationService.createInstance(S,this.htmlElements.editor,{},{contributions:this.getEditorContributions()});updateOptions(e){this.editor.updateOptions(e)}isFocused=m(this,E.any(this.editor.onDidBlurEditorWidget,this.editor.onDidFocusEditorWidget),()=>this.editor.hasWidgetFocus());cursorPosition=m(this,this.editor.onDidChangeCursorPosition,()=>this.editor.getPosition());selection=m(this,this.editor.onDidChangeCursorSelection,()=>this.editor.getSelections());cursorLineNumber=this.cursorPosition.map(e=>e?.lineNumber);getEditorContributions(){return D.getEditorContributions().filter(e=>e.id!==M.ID&&e.id!==C.ID)}}function X(n,r){const e=y(t=>{const i=n.viewModel.read(t);if(!i)return[];const o=i.selectionInBase.read(t);return!o||o.sourceEditor===n?[]:o.rangesInBase.map(d=>r(d,i))});return I(t=>{const i=e.read(t);i.length!==0&&n.editor.setSelections(i.map(o=>new w(o.startLineNumber,o.startColumn,o.endLineNumber,o.endColumn)))})}let a=class extends u{constructor(r,e,t){super();const i=t.createInstance(O,e,r,{menuOptions:{renderShortTitle:!0},toolbarOptions:{primaryGroup:o=>o==="primary"}});this._store.add(i)}};a=c([p(2,V)],a);export{G as CodeEditorView,a as TitleMenu,X as createSelectionsAutorun};
