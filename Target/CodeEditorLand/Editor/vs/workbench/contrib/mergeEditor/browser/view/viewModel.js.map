{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/view/viewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLast } from \"../../../../../base/common/arraysFind.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\ttype IReader,\n\ttype ITransaction,\n\tderived,\n\tderivedObservableWithWritableCache,\n\tobservableValue,\n\ttransaction,\n} from \"../../../../../base/common/observable.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport { ScrollType } from \"../../../../../editor/common/editorCommon.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { INotificationService } from \"../../../../../platform/notification/common/notification.js\";\nimport { observableConfigValue } from \"../../../../../platform/observable/common/platformObservableUtils.js\";\nimport { LineRange } from \"../model/lineRange.js\";\nimport type { MergeEditorModel } from \"../model/mergeEditorModel.js\";\nimport type {\n\tInputNumber,\n\tModifiedBaseRange,\n\tModifiedBaseRangeState,\n} from \"../model/modifiedBaseRange.js\";\nimport type { BaseCodeEditorView } from \"./editors/baseCodeEditorView.js\";\nimport type { CodeEditorView } from \"./editors/codeEditorView.js\";\nimport type { InputCodeEditorView } from \"./editors/inputCodeEditorView.js\";\nimport type { ResultCodeEditorView } from \"./editors/resultCodeEditorView.js\";\n\nexport class MergeEditorViewModel extends Disposable {\n\tprivate readonly manuallySetActiveModifiedBaseRange = observableValue<{\n\t\trange: ModifiedBaseRange | undefined;\n\t\tcounter: number;\n\t}>(this, { range: undefined, counter: 0 });\n\n\tprivate readonly attachedHistory = this._register(\n\t\tnew AttachedHistory(this.model.resultTextModel),\n\t);\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tpublic readonly inputCodeEditorView1: InputCodeEditorView,\n\t\tpublic readonly inputCodeEditorView2: InputCodeEditorView,\n\t\tpublic readonly resultCodeEditorView: ResultCodeEditorView,\n\t\tpublic readonly baseCodeEditorView: IObservable<\n\t\t\tBaseCodeEditorView | undefined\n\t\t>,\n\t\tpublic readonly showNonConflictingChanges: IObservable<boolean>,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tresultCodeEditorView.editor.onDidChangeModelContent((e) => {\n\t\t\t\tif (\n\t\t\t\t\tthis.model.isApplyingEditInResult ||\n\t\t\t\t\te.isRedoing ||\n\t\t\t\t\te.isUndoing\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst baseRangeStates: ModifiedBaseRange[] = [];\n\n\t\t\t\tfor (const change of e.changes) {\n\t\t\t\t\tconst rangeInBase = this.model.translateResultRangeToBase(\n\t\t\t\t\t\tRange.lift(change.range),\n\t\t\t\t\t);\n\t\t\t\t\tconst baseRanges = this.model.findModifiedBaseRangesInRange(\n\t\t\t\t\t\tnew LineRange(\n\t\t\t\t\t\t\trangeInBase.startLineNumber,\n\t\t\t\t\t\t\trangeInBase.endLineNumber -\n\t\t\t\t\t\t\t\trangeInBase.startLineNumber,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tif (baseRanges.length === 1) {\n\t\t\t\t\t\tconst isHandled = this.model\n\t\t\t\t\t\t\t.isHandled(baseRanges[0])\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\t\tif (!isHandled) {\n\t\t\t\t\t\t\tbaseRangeStates.push(baseRanges[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (baseRangeStates.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst element = {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tredo() {\n\t\t\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t\t\t/** @description Mark conflicts touched by manual edits as handled */\n\t\t\t\t\t\t\tfor (const r of baseRangeStates) {\n\t\t\t\t\t\t\t\tthis.model.setHandled(r, true, tx);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tundo() {\n\t\t\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t\t\t/** @description Mark conflicts touched by manual edits as handled */\n\t\t\t\t\t\t\tfor (const r of baseRangeStates) {\n\t\t\t\t\t\t\t\tthis.model.setHandled(r, false, tx);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tthis.attachedHistory.pushAttachedHistoryElement(element);\n\t\t\t\telement.redo();\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic readonly shouldUseAppendInsteadOfAccept =\n\t\tobservableConfigValue<boolean>(\n\t\t\t\"mergeEditor.shouldUseAppendInsteadOfAccept\",\n\t\t\tfalse,\n\t\t\tthis.configurationService,\n\t\t);\n\n\tprivate counter = 0;\n\tprivate readonly lastFocusedEditor = derivedObservableWithWritableCache<{\n\t\tview: CodeEditorView | undefined;\n\t\tcounter: number;\n\t}>(this, (reader, lastValue) => {\n\t\tconst editors = [\n\t\t\tthis.inputCodeEditorView1,\n\t\t\tthis.inputCodeEditorView2,\n\t\t\tthis.resultCodeEditorView,\n\t\t\tthis.baseCodeEditorView.read(reader),\n\t\t];\n\t\tconst view = editors.find((e) => e && e.isFocused.read(reader));\n\t\treturn view\n\t\t\t? { view, counter: this.counter++ }\n\t\t\t: lastValue || { view: undefined, counter: this.counter++ };\n\t});\n\n\tpublic readonly baseShowDiffAgainst = derived<1 | 2 | undefined>(\n\t\tthis,\n\t\t(reader) => {\n\t\t\tconst lastFocusedEditor = this.lastFocusedEditor.read(reader);\n\t\t\tif (lastFocusedEditor.view === this.inputCodeEditorView1) {\n\t\t\t\treturn 1;\n\t\t\t} else if (lastFocusedEditor.view === this.inputCodeEditorView2) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t);\n\n\tpublic readonly selectionInBase = derived(this, (reader) => {\n\t\tconst sourceEditor = this.lastFocusedEditor.read(reader).view;\n\t\tif (!sourceEditor) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst selections = sourceEditor.selection.read(reader) || [];\n\n\t\tconst rangesInBase = selections.map((selection) => {\n\t\t\tif (sourceEditor === this.inputCodeEditorView1) {\n\t\t\t\treturn this.model.translateInputRangeToBase(1, selection);\n\t\t\t} else if (sourceEditor === this.inputCodeEditorView2) {\n\t\t\t\treturn this.model.translateInputRangeToBase(2, selection);\n\t\t\t} else if (sourceEditor === this.resultCodeEditorView) {\n\t\t\t\treturn this.model.translateResultRangeToBase(selection);\n\t\t\t} else if (sourceEditor === this.baseCodeEditorView.read(reader)) {\n\t\t\t\treturn selection;\n\t\t\t} else {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\trangesInBase,\n\t\t\tsourceEditor,\n\t\t};\n\t});\n\n\tprivate getRangeOfModifiedBaseRange(\n\t\teditor: CodeEditorView,\n\t\tmodifiedBaseRange: ModifiedBaseRange,\n\t\treader: IReader | undefined,\n\t): LineRange {\n\t\tif (editor === this.resultCodeEditorView) {\n\t\t\treturn this.model.getLineRangeInResult(\n\t\t\t\tmodifiedBaseRange.baseRange,\n\t\t\t\treader,\n\t\t\t);\n\t\t} else if (editor === this.baseCodeEditorView.get()) {\n\t\t\treturn modifiedBaseRange.baseRange;\n\t\t} else {\n\t\t\tconst input = editor === this.inputCodeEditorView1 ? 1 : 2;\n\t\t\treturn modifiedBaseRange.getInputRange(input);\n\t\t}\n\t}\n\n\tpublic readonly activeModifiedBaseRange = derived(this, (reader) => {\n\t\t/** @description activeModifiedBaseRange */\n\t\tconst focusedEditor = this.lastFocusedEditor.read(reader);\n\t\tconst manualRange =\n\t\t\tthis.manuallySetActiveModifiedBaseRange.read(reader);\n\t\tif (manualRange.counter > focusedEditor.counter) {\n\t\t\treturn manualRange.range;\n\t\t}\n\n\t\tif (!focusedEditor.view) {\n\t\t\treturn;\n\t\t}\n\t\tconst cursorLineNumber =\n\t\t\tfocusedEditor.view.cursorLineNumber.read(reader);\n\t\tif (!cursorLineNumber) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst modifiedBaseRanges = this.model.modifiedBaseRanges.read(reader);\n\t\treturn modifiedBaseRanges.find((r) => {\n\t\t\tconst range = this.getRangeOfModifiedBaseRange(\n\t\t\t\tfocusedEditor.view!,\n\t\t\t\tr,\n\t\t\t\treader,\n\t\t\t);\n\t\t\treturn range.isEmpty\n\t\t\t\t? range.startLineNumber === cursorLineNumber\n\t\t\t\t: range.contains(cursorLineNumber);\n\t\t});\n\t});\n\n\tpublic setActiveModifiedBaseRange(\n\t\trange: ModifiedBaseRange | undefined,\n\t\ttx: ITransaction,\n\t): void {\n\t\tthis.manuallySetActiveModifiedBaseRange.set(\n\t\t\t{ range, counter: this.counter++ },\n\t\t\ttx,\n\t\t);\n\t}\n\n\tpublic setState(\n\t\tbaseRange: ModifiedBaseRange,\n\t\tstate: ModifiedBaseRangeState,\n\t\ttx: ITransaction,\n\t\tinputNumber: InputNumber,\n\t): void {\n\t\tthis.manuallySetActiveModifiedBaseRange.set(\n\t\t\t{ range: baseRange, counter: this.counter++ },\n\t\t\ttx,\n\t\t);\n\t\tthis.model.setState(baseRange, state, inputNumber, tx);\n\t\tthis.lastFocusedEditor.clearCache(tx);\n\t}\n\n\tprivate goToConflict(\n\t\tgetModifiedBaseRange: (\n\t\t\teditor: CodeEditorView,\n\t\t\tcurLineNumber: number,\n\t\t) => ModifiedBaseRange | undefined,\n\t): void {\n\t\tlet editor = this.lastFocusedEditor.get().view;\n\t\tif (!editor) {\n\t\t\teditor = this.resultCodeEditorView;\n\t\t}\n\t\tconst curLineNumber = editor.editor.getPosition()?.lineNumber;\n\t\tif (curLineNumber === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tconst modifiedBaseRange = getModifiedBaseRange(editor, curLineNumber);\n\t\tif (modifiedBaseRange) {\n\t\t\tconst range = this.getRangeOfModifiedBaseRange(\n\t\t\t\teditor,\n\t\t\t\tmodifiedBaseRange,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t\teditor.editor.focus();\n\n\t\t\tlet startLineNumber = range.startLineNumber;\n\t\t\tlet endLineNumberExclusive = range.endLineNumberExclusive;\n\t\t\tif (\n\t\t\t\trange.startLineNumber > editor.editor.getModel()!.getLineCount()\n\t\t\t) {\n\t\t\t\ttransaction((tx) => {\n\t\t\t\t\tthis.setActiveModifiedBaseRange(modifiedBaseRange, tx);\n\t\t\t\t});\n\t\t\t\tstartLineNumber = endLineNumberExclusive = editor.editor\n\t\t\t\t\t.getModel()!\n\t\t\t\t\t.getLineCount();\n\t\t\t}\n\n\t\t\teditor.editor.setPosition({\n\t\t\t\tlineNumber: startLineNumber,\n\t\t\t\tcolumn: editor.editor\n\t\t\t\t\t.getModel()!\n\t\t\t\t\t.getLineFirstNonWhitespaceColumn(startLineNumber),\n\t\t\t});\n\t\t\teditor.editor.revealLinesNearTop(\n\t\t\t\tstartLineNumber,\n\t\t\t\tendLineNumberExclusive,\n\t\t\t\tScrollType.Smooth,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic goToNextModifiedBaseRange(\n\t\tpredicate: (m: ModifiedBaseRange) => boolean,\n\t): void {\n\t\tthis.goToConflict(\n\t\t\t(e, l) =>\n\t\t\t\tthis.model.modifiedBaseRanges\n\t\t\t\t\t.get()\n\t\t\t\t\t.find(\n\t\t\t\t\t\t(r) =>\n\t\t\t\t\t\t\tpredicate(r) &&\n\t\t\t\t\t\t\tthis.getRangeOfModifiedBaseRange(e, r, undefined)\n\t\t\t\t\t\t\t\t.startLineNumber > l,\n\t\t\t\t\t) ||\n\t\t\t\tthis.model.modifiedBaseRanges.get().find((r) => predicate(r)),\n\t\t);\n\t}\n\n\tpublic goToPreviousModifiedBaseRange(\n\t\tpredicate: (m: ModifiedBaseRange) => boolean,\n\t): void {\n\t\tthis.goToConflict(\n\t\t\t(e, l) =>\n\t\t\t\tfindLast(\n\t\t\t\t\tthis.model.modifiedBaseRanges.get(),\n\t\t\t\t\t(r) =>\n\t\t\t\t\t\tpredicate(r) &&\n\t\t\t\t\t\tthis.getRangeOfModifiedBaseRange(e, r, undefined)\n\t\t\t\t\t\t\t.endLineNumberExclusive < l,\n\t\t\t\t) ||\n\t\t\t\tfindLast(this.model.modifiedBaseRanges.get(), (r) =>\n\t\t\t\t\tpredicate(r),\n\t\t\t\t),\n\t\t);\n\t}\n\n\tpublic toggleActiveConflict(inputNumber: 1 | 2): void {\n\t\tconst activeModifiedBaseRange = this.activeModifiedBaseRange.get();\n\t\tif (!activeModifiedBaseRange) {\n\t\t\tthis.notificationService.error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noConflictMessage\",\n\t\t\t\t\t\"There is currently no conflict focused that can be toggled.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\ttransaction((tx) => {\n\t\t\t/** @description Toggle Active Conflict */\n\t\t\tthis.setState(\n\t\t\t\tactiveModifiedBaseRange,\n\t\t\t\tthis.model\n\t\t\t\t\t.getState(activeModifiedBaseRange)\n\t\t\t\t\t.get()\n\t\t\t\t\t.toggle(inputNumber),\n\t\t\t\ttx,\n\t\t\t\tinputNumber,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic acceptAll(inputNumber: 1 | 2): void {\n\t\ttransaction((tx) => {\n\t\t\t/** @description Toggle Active Conflict */\n\t\t\tfor (const range of this.model.modifiedBaseRanges.get()) {\n\t\t\t\tthis.setState(\n\t\t\t\t\trange,\n\t\t\t\t\tthis.model\n\t\t\t\t\t\t.getState(range)\n\t\t\t\t\t\t.get()\n\t\t\t\t\t\t.withInputValue(inputNumber, true),\n\t\t\t\t\ttx,\n\t\t\t\t\tinputNumber,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass AttachedHistory extends Disposable {\n\tprivate readonly attachedHistory: {\n\t\telement: IAttachedHistoryElement;\n\t\taltId: number;\n\t}[] = [];\n\tprivate previousAltId: number = this.model.getAlternativeVersionId();\n\n\tconstructor(private readonly model: ITextModel) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tmodel.onDidChangeContent((e) => {\n\t\t\t\tconst currentAltId = model.getAlternativeVersionId();\n\n\t\t\t\tif (e.isRedoing) {\n\t\t\t\t\tfor (const item of this.attachedHistory) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.previousAltId < item.altId &&\n\t\t\t\t\t\t\titem.altId <= currentAltId\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\titem.element.redo();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (e.isUndoing) {\n\t\t\t\t\tfor (let i = this.attachedHistory.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst item = this.attachedHistory[i];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcurrentAltId < item.altId &&\n\t\t\t\t\t\t\titem.altId <= this.previousAltId\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\titem.element.undo();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// The user destroyed the redo stack by performing a non redo/undo operation.\n\t\t\t\t\t// Thus we also need to remove all history elements after the last version id.\n\t\t\t\t\twhile (\n\t\t\t\t\t\tthis.attachedHistory.length > 0 &&\n\t\t\t\t\t\tthis.attachedHistory[this.attachedHistory.length - 1]!\n\t\t\t\t\t\t\t.altId > this.previousAltId\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.attachedHistory.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.previousAltId = currentAltId;\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * Pushes an history item that is tied to the last text edit (or an extension of it).\n\t * When the last text edit is undone/redone, so is is this history item.\n\t */\n\tpublic pushAttachedHistoryElement(element: IAttachedHistoryElement): void {\n\t\tthis.attachedHistory.push({\n\t\t\taltId: this.model.getAlternativeVersionId(),\n\t\t\telement,\n\t\t});\n\t}\n}\n\ninterface IAttachedHistoryElement {\n\tundo(): void;\n\tredo(): void;\n}\n"],
  "mappings": "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",
  "names": []
}
