{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/view/viewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLast } from '../../../../../base/common/arraysFind.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { derived, derivedObservableWithWritableCache, IObservable, IReader, ITransaction, observableValue, transaction } from '../../../../../base/common/observable.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ScrollType } from '../../../../../editor/common/editorCommon.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { localize } from '../../../../../nls.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { LineRange } from '../model/lineRange.js';\nimport { MergeEditorModel } from '../model/mergeEditorModel.js';\nimport { InputNumber, ModifiedBaseRange, ModifiedBaseRangeState } from '../model/modifiedBaseRange.js';\nimport { observableConfigValue } from '../../../../../platform/observable/common/platformObservableUtils.js';\nimport { BaseCodeEditorView } from './editors/baseCodeEditorView.js';\nimport { CodeEditorView } from './editors/codeEditorView.js';\nimport { InputCodeEditorView } from './editors/inputCodeEditorView.js';\nimport { ResultCodeEditorView } from './editors/resultCodeEditorView.js';\n\nexport class MergeEditorViewModel extends Disposable {\n\tprivate readonly manuallySetActiveModifiedBaseRange = observableValue<\n\t\t{ range: ModifiedBaseRange | undefined; counter: number }\n\t>(this, { range: undefined, counter: 0 });\n\n\tprivate readonly attachedHistory = this._register(new AttachedHistory(this.model.resultTextModel));\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tpublic readonly inputCodeEditorView1: InputCodeEditorView,\n\t\tpublic readonly inputCodeEditorView2: InputCodeEditorView,\n\t\tpublic readonly resultCodeEditorView: ResultCodeEditorView,\n\t\tpublic readonly baseCodeEditorView: IObservable<BaseCodeEditorView | undefined>,\n\t\tpublic readonly showNonConflictingChanges: IObservable<boolean>,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(resultCodeEditorView.editor.onDidChangeModelContent(e => {\n\t\t\tif (this.model.isApplyingEditInResult || e.isRedoing || e.isUndoing) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst baseRangeStates: ModifiedBaseRange[] = [];\n\n\t\t\tfor (const change of e.changes) {\n\t\t\t\tconst rangeInBase = this.model.translateResultRangeToBase(Range.lift(change.range));\n\t\t\t\tconst baseRanges = this.model.findModifiedBaseRangesInRange(new LineRange(rangeInBase.startLineNumber, rangeInBase.endLineNumber - rangeInBase.startLineNumber));\n\t\t\t\tif (baseRanges.length === 1) {\n\t\t\t\t\tconst isHandled = this.model.isHandled(baseRanges[0]).get();\n\t\t\t\t\tif (!isHandled) {\n\t\t\t\t\t\tbaseRangeStates.push(baseRanges[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (baseRangeStates.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst element = {\n\t\t\t\tmodel: this.model,\n\t\t\t\tredo() {\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\t/** @description Mark conflicts touched by manual edits as handled */\n\t\t\t\t\t\tfor (const r of baseRangeStates) {\n\t\t\t\t\t\t\tthis.model.setHandled(r, true, tx);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tundo() {\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\t/** @description Mark conflicts touched by manual edits as handled */\n\t\t\t\t\t\tfor (const r of baseRangeStates) {\n\t\t\t\t\t\t\tthis.model.setHandled(r, false, tx);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t};\n\t\t\tthis.attachedHistory.pushAttachedHistoryElement(element);\n\t\t\telement.redo();\n\t\t}));\n\t}\n\n\tpublic readonly shouldUseAppendInsteadOfAccept = observableConfigValue<boolean>(\n\t\t'mergeEditor.shouldUseAppendInsteadOfAccept',\n\t\tfalse,\n\t\tthis.configurationService,\n\t);\n\n\tprivate counter = 0;\n\tprivate readonly lastFocusedEditor = derivedObservableWithWritableCache<\n\t\t{ view: CodeEditorView | undefined; counter: number }\n\t>(this, (reader, lastValue) => {\n\t\tconst editors = [\n\t\t\tthis.inputCodeEditorView1,\n\t\t\tthis.inputCodeEditorView2,\n\t\t\tthis.resultCodeEditorView,\n\t\t\tthis.baseCodeEditorView.read(reader),\n\t\t];\n\t\tconst view = editors.find((e) => e && e.isFocused.read(reader));\n\t\treturn view ? { view, counter: this.counter++ } : lastValue || { view: undefined, counter: this.counter++ };\n\t});\n\n\tpublic readonly baseShowDiffAgainst = derived<1 | 2 | undefined>(this, reader => {\n\t\tconst lastFocusedEditor = this.lastFocusedEditor.read(reader);\n\t\tif (lastFocusedEditor.view === this.inputCodeEditorView1) {\n\t\t\treturn 1;\n\t\t} else if (lastFocusedEditor.view === this.inputCodeEditorView2) {\n\t\t\treturn 2;\n\t\t}\n\t\treturn undefined;\n\t});\n\n\tpublic readonly selectionInBase = derived(this, reader => {\n\t\tconst sourceEditor = this.lastFocusedEditor.read(reader).view;\n\t\tif (!sourceEditor) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst selections = sourceEditor.selection.read(reader) || [];\n\n\t\tconst rangesInBase = selections.map((selection) => {\n\t\t\tif (sourceEditor === this.inputCodeEditorView1) {\n\t\t\t\treturn this.model.translateInputRangeToBase(1, selection);\n\t\t\t} else if (sourceEditor === this.inputCodeEditorView2) {\n\t\t\t\treturn this.model.translateInputRangeToBase(2, selection);\n\t\t\t} else if (sourceEditor === this.resultCodeEditorView) {\n\t\t\t\treturn this.model.translateResultRangeToBase(selection);\n\t\t\t} else if (sourceEditor === this.baseCodeEditorView.read(reader)) {\n\t\t\t\treturn selection;\n\t\t\t} else {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\trangesInBase,\n\t\t\tsourceEditor\n\t\t};\n\t});\n\n\tprivate getRangeOfModifiedBaseRange(editor: CodeEditorView, modifiedBaseRange: ModifiedBaseRange, reader: IReader | undefined): LineRange {\n\t\tif (editor === this.resultCodeEditorView) {\n\t\t\treturn this.model.getLineRangeInResult(modifiedBaseRange.baseRange, reader);\n\t\t} else if (editor === this.baseCodeEditorView.get()) {\n\t\t\treturn modifiedBaseRange.baseRange;\n\t\t} else {\n\t\t\tconst input = editor === this.inputCodeEditorView1 ? 1 : 2;\n\t\t\treturn modifiedBaseRange.getInputRange(input);\n\t\t}\n\t}\n\n\tpublic readonly activeModifiedBaseRange = derived(this,\n\t\t(reader) => {\n\t\t\t/** @description activeModifiedBaseRange */\n\t\t\tconst focusedEditor = this.lastFocusedEditor.read(reader);\n\t\t\tconst manualRange = this.manuallySetActiveModifiedBaseRange.read(reader);\n\t\t\tif (manualRange.counter > focusedEditor.counter) {\n\t\t\t\treturn manualRange.range;\n\t\t\t}\n\n\t\t\tif (!focusedEditor.view) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst cursorLineNumber = focusedEditor.view.cursorLineNumber.read(reader);\n\t\t\tif (!cursorLineNumber) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst modifiedBaseRanges = this.model.modifiedBaseRanges.read(reader);\n\t\t\treturn modifiedBaseRanges.find((r) => {\n\t\t\t\tconst range = this.getRangeOfModifiedBaseRange(focusedEditor.view!, r, reader);\n\t\t\t\treturn range.isEmpty\n\t\t\t\t\t? range.startLineNumber === cursorLineNumber\n\t\t\t\t\t: range.contains(cursorLineNumber);\n\t\t\t});\n\t\t}\n\t);\n\n\tpublic setActiveModifiedBaseRange(range: ModifiedBaseRange | undefined, tx: ITransaction): void {\n\t\tthis.manuallySetActiveModifiedBaseRange.set({ range, counter: this.counter++ }, tx);\n\t}\n\n\tpublic setState(\n\t\tbaseRange: ModifiedBaseRange,\n\t\tstate: ModifiedBaseRangeState,\n\t\ttx: ITransaction,\n\t\tinputNumber: InputNumber,\n\t): void {\n\t\tthis.manuallySetActiveModifiedBaseRange.set({ range: baseRange, counter: this.counter++ }, tx);\n\t\tthis.model.setState(baseRange, state, inputNumber, tx);\n\t\tthis.lastFocusedEditor.clearCache(tx);\n\t}\n\n\tprivate goToConflict(getModifiedBaseRange: (editor: CodeEditorView, curLineNumber: number) => ModifiedBaseRange | undefined): void {\n\t\tlet editor = this.lastFocusedEditor.get().view;\n\t\tif (!editor) {\n\t\t\teditor = this.resultCodeEditorView;\n\t\t}\n\t\tconst curLineNumber = editor.editor.getPosition()?.lineNumber;\n\t\tif (curLineNumber === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tconst modifiedBaseRange = getModifiedBaseRange(editor, curLineNumber);\n\t\tif (modifiedBaseRange) {\n\t\t\tconst range = this.getRangeOfModifiedBaseRange(editor, modifiedBaseRange, undefined);\n\t\t\teditor.editor.focus();\n\n\t\t\tlet startLineNumber = range.startLineNumber;\n\t\t\tlet endLineNumberExclusive = range.endLineNumberExclusive;\n\t\t\tif (range.startLineNumber > editor.editor.getModel()!.getLineCount()) {\n\t\t\t\ttransaction(tx => {\n\t\t\t\t\tthis.setActiveModifiedBaseRange(modifiedBaseRange, tx);\n\t\t\t\t});\n\t\t\t\tstartLineNumber = endLineNumberExclusive = editor.editor.getModel()!.getLineCount();\n\t\t\t}\n\n\t\t\teditor.editor.setPosition({\n\t\t\t\tlineNumber: startLineNumber,\n\t\t\t\tcolumn: editor.editor.getModel()!.getLineFirstNonWhitespaceColumn(startLineNumber),\n\t\t\t});\n\t\t\teditor.editor.revealLinesNearTop(startLineNumber, endLineNumberExclusive, ScrollType.Smooth);\n\t\t}\n\t}\n\n\tpublic goToNextModifiedBaseRange(predicate: (m: ModifiedBaseRange) => boolean): void {\n\t\tthis.goToConflict(\n\t\t\t(e, l) =>\n\t\t\t\tthis.model.modifiedBaseRanges\n\t\t\t\t\t.get()\n\t\t\t\t\t.find(\n\t\t\t\t\t\t(r) =>\n\t\t\t\t\t\t\tpredicate(r) &&\n\t\t\t\t\t\t\tthis.getRangeOfModifiedBaseRange(e, r, undefined).startLineNumber > l\n\t\t\t\t\t) ||\n\t\t\t\tthis.model.modifiedBaseRanges\n\t\t\t\t\t.get()\n\t\t\t\t\t.find((r) => predicate(r))\n\t\t);\n\t}\n\n\tpublic goToPreviousModifiedBaseRange(predicate: (m: ModifiedBaseRange) => boolean): void {\n\t\tthis.goToConflict(\n\t\t\t(e, l) =>\n\t\t\t\tfindLast(\n\t\t\t\t\tthis.model.modifiedBaseRanges.get(),\n\t\t\t\t\t(r) =>\n\t\t\t\t\t\tpredicate(r) &&\n\t\t\t\t\t\tthis.getRangeOfModifiedBaseRange(e, r, undefined).endLineNumberExclusive < l\n\t\t\t\t) ||\n\t\t\t\tfindLast(\n\t\t\t\t\tthis.model.modifiedBaseRanges.get(),\n\t\t\t\t\t(r) => predicate(r)\n\t\t\t\t)\n\t\t);\n\t}\n\n\tpublic toggleActiveConflict(inputNumber: 1 | 2): void {\n\t\tconst activeModifiedBaseRange = this.activeModifiedBaseRange.get();\n\t\tif (!activeModifiedBaseRange) {\n\t\t\tthis.notificationService.error(localize('noConflictMessage', \"There is currently no conflict focused that can be toggled.\"));\n\t\t\treturn;\n\t\t}\n\t\ttransaction(tx => {\n\t\t\t/** @description Toggle Active Conflict */\n\t\t\tthis.setState(\n\t\t\t\tactiveModifiedBaseRange,\n\t\t\t\tthis.model.getState(activeModifiedBaseRange).get().toggle(inputNumber),\n\t\t\t\ttx,\n\t\t\t\tinputNumber,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic acceptAll(inputNumber: 1 | 2): void {\n\t\ttransaction(tx => {\n\t\t\t/** @description Toggle Active Conflict */\n\t\t\tfor (const range of this.model.modifiedBaseRanges.get()) {\n\t\t\t\tthis.setState(\n\t\t\t\t\trange,\n\t\t\t\t\tthis.model.getState(range).get().withInputValue(inputNumber, true),\n\t\t\t\t\ttx,\n\t\t\t\t\tinputNumber\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass AttachedHistory extends Disposable {\n\tprivate readonly attachedHistory: { element: IAttachedHistoryElement; altId: number }[] = [];\n\tprivate previousAltId: number = this.model.getAlternativeVersionId();\n\n\tconstructor(private readonly model: ITextModel) {\n\t\tsuper();\n\n\t\tthis._register(model.onDidChangeContent((e) => {\n\t\t\tconst currentAltId = model.getAlternativeVersionId();\n\n\t\t\tif (e.isRedoing) {\n\t\t\t\tfor (const item of this.attachedHistory) {\n\t\t\t\t\tif (this.previousAltId < item.altId && item.altId <= currentAltId) {\n\t\t\t\t\t\titem.element.redo();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (e.isUndoing) {\n\t\t\t\tfor (let i = this.attachedHistory.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst item = this.attachedHistory[i];\n\t\t\t\t\tif (currentAltId < item.altId && item.altId <= this.previousAltId) {\n\t\t\t\t\t\titem.element.undo();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// The user destroyed the redo stack by performing a non redo/undo operation.\n\t\t\t\t// Thus we also need to remove all history elements after the last version id.\n\t\t\t\twhile (\n\t\t\t\t\tthis.attachedHistory.length > 0\n\t\t\t\t\t&& this.attachedHistory[this.attachedHistory.length - 1]!.altId > this.previousAltId\n\t\t\t\t) {\n\t\t\t\t\tthis.attachedHistory.pop();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previousAltId = currentAltId;\n\t\t}));\n\t}\n\n\t/**\n\t * Pushes an history item that is tied to the last text edit (or an extension of it).\n\t * When the last text edit is undone/redone, so is is this history item.\n\t */\n\tpublic pushAttachedHistoryElement(element: IAttachedHistoryElement): void {\n\t\tthis.attachedHistory.push({ altId: this.model.getAlternativeVersionId(), element });\n\t}\n}\n\ninterface IAttachedHistoryElement {\n\tundo(): void;\n\tredo(): void;\n}\n"],
  "mappings": "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",
  "names": []
}
