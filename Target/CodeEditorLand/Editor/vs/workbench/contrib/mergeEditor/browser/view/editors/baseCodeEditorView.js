var E=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var I=(d,e,i,r)=>{for(var t=r>1?void 0:r?k(e,i):e,o=d.length-1,n;o>=0;o--)(n=d[o])&&(t=(r?n(e,i,t):n(t))||t);return r&&t&&E(e,i,t),t},u=(d,e)=>(i,r)=>e(i,r,d);import{h as N,reset as C}from"../../../../../../base/browser/dom.js";import{renderLabelWithIcons as S}from"../../../../../../base/browser/ui/iconLabel/iconLabels.js";import{BugIndicatingError as O}from"../../../../../../base/common/errors.js";import{autorun as y,autorunWithStore as A,derived as L}from"../../../../../../base/common/observable.js";import{MinimapPosition as W,OverviewRulerLane as _}from"../../../../../../editor/common/model.js";import{localize as h}from"../../../../../../nls.js";import{MenuId as x}from"../../../../../../platform/actions/common/actions.js";import{IConfigurationService as B}from"../../../../../../platform/configuration/common/configuration.js";import{IInstantiationService as T}from"../../../../../../platform/instantiation/common/instantiation.js";import{applyObservableDecorations as V}from"../../utils.js";import{handledConflictMinimapOverViewRulerColor as R,unhandledConflictMinimapOverViewRulerColor as D}from"../colors.js";import{EditorGutter as G}from"../editorGutter.js";import{CodeEditorView as H,TitleMenu as P,createSelectionsAutorun as j}from"./codeEditorView.js";let m=class extends H{constructor(e,i,r){super(i,e,r),this._register(j(this,(t,o)=>t)),this._register(i.createInstance(P,x.MergeBaseToolbar,this.htmlElements.title)),this._register(A((t,o)=>{this.checkboxesVisible.read(t)&&o.add(new G(this.editor,this.htmlElements.gutterDiv,{getIntersectingGutterItems:(n,a)=>[],createView:(n,a)=>{throw new O}}))})),this._register(y(t=>{const o=this.viewModel.read(t);if(!o)return;this.editor.setModel(o.model.base),C(this.htmlElements.title,...S(h("base","Base")));const n=o.baseShowDiffAgainst.read(t);let a;if(n){const l=h("compareWith","Comparing with {0}",n===1?o.model.input1.title:o.model.input2.title),s=h("compareWithTooltip","Differences are highlighted with a background color.");a=N("span",{title:s},[l]).root}C(this.htmlElements.description,...a?[a]:[])})),this._register(V(this.editor,this.decorations))}decorations=L(this,e=>{const i=this.viewModel.read(e);if(!i)return[];const r=i.model,t=r.base,o=i.activeModifiedBaseRange.read(e),n=i.showNonConflictingChanges.read(e),a=this.showDeletionMarkers.read(e),l=[];for(const s of r.modifiedBaseRanges.read(e)){const p=s.baseRange;if(!p)continue;const f=r.isHandled(s).read(e);if(!s.isConflicting&&f&&!n)continue;const c=["merge-editor-block"];let b=[0,0,0,0];f&&c.push("handled"),s===o&&(c.push("focused"),b=[0,2,0,2]),c.push("base");const M=i.baseShowDiffAgainst.read(e);if(M)for(const w of s.getInputDiffs(M)){const v=w.inputRange.toInclusiveRange();v&&l.push({range:v,options:{className:"merge-editor-diff base",description:"Merge Editor",isWholeLine:!0}});for(const g of w.rangeMappings)(a||!g.inputRange.isEmpty())&&l.push({range:g.inputRange,options:{className:g.inputRange.isEmpty()?"merge-editor-diff-empty-word base":"merge-editor-diff-word base",description:"Merge Editor",showIfCollapsed:!0}})}l.push({range:p.toInclusiveRangeOrEmpty(),options:{showIfCollapsed:!0,blockClassName:c.join(" "),blockPadding:b,blockIsAfterEnd:p.startLineNumber>t.getLineCount(),description:"Merge Editor",minimap:{position:W.Gutter,color:{id:f?R:D}},overviewRuler:s.isConflicting?{position:_.Center,color:{id:f?R:D}}:void 0}})}return l})};m=I([u(1,T),u(2,B)],m);export{m as BaseCodeEditorView};
