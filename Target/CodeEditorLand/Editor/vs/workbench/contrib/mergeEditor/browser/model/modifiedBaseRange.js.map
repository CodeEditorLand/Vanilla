{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/modifiedBaseRange.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tcompareBy,\n\tequals,\n\tnumberComparator,\n\ttieBreakComparators,\n} from \"../../../../../base/common/arrays.js\";\nimport { BugIndicatingError } from \"../../../../../base/common/errors.js\";\nimport { splitLines } from \"../../../../../base/common/strings.js\";\nimport { Constants } from \"../../../../../base/common/uint.js\";\nimport { Position } from \"../../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\nimport { concatArrays } from \"../utils.js\";\nimport { LineRangeEdit, RangeEdit } from \"./editing.js\";\nimport type { LineRange } from \"./lineRange.js\";\nimport { DetailedLineRangeMapping, MappingAlignment } from \"./mapping.js\";\n\n/**\n * Describes modifications in input 1 and input 2 for a specific range in base.\n *\n * The UI offers a mechanism to either apply all changes from input 1 or input 2 or both.\n *\n * Immutable.\n */\nexport class ModifiedBaseRange {\n\tpublic static fromDiffs(\n\t\tdiffs1: readonly DetailedLineRangeMapping[],\n\t\tdiffs2: readonly DetailedLineRangeMapping[],\n\t\tbaseTextModel: ITextModel,\n\t\tinput1TextModel: ITextModel,\n\t\tinput2TextModel: ITextModel,\n\t): ModifiedBaseRange[] {\n\t\tconst alignments = MappingAlignment.compute(diffs1, diffs2);\n\t\treturn alignments.map(\n\t\t\t(a) =>\n\t\t\t\tnew ModifiedBaseRange(\n\t\t\t\t\ta.inputRange,\n\t\t\t\t\tbaseTextModel,\n\t\t\t\t\ta.output1Range,\n\t\t\t\t\tinput1TextModel,\n\t\t\t\t\ta.output1LineMappings,\n\t\t\t\t\ta.output2Range,\n\t\t\t\t\tinput2TextModel,\n\t\t\t\t\ta.output2LineMappings,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tpublic readonly input1CombinedDiff = DetailedLineRangeMapping.join(\n\t\tthis.input1Diffs,\n\t);\n\tpublic readonly input2CombinedDiff = DetailedLineRangeMapping.join(\n\t\tthis.input2Diffs,\n\t);\n\tpublic readonly isEqualChange = equals(\n\t\tthis.input1Diffs,\n\t\tthis.input2Diffs,\n\t\t(a, b) => a.getLineEdit().equals(b.getLineEdit()),\n\t);\n\n\tconstructor(\n\t\tpublic readonly baseRange: LineRange,\n\t\tpublic readonly baseTextModel: ITextModel,\n\t\tpublic readonly input1Range: LineRange,\n\t\tpublic readonly input1TextModel: ITextModel,\n\n\t\t/**\n\t\t * From base to input1\n\t\t */\n\t\tpublic readonly input1Diffs: readonly DetailedLineRangeMapping[],\n\t\tpublic readonly input2Range: LineRange,\n\t\tpublic readonly input2TextModel: ITextModel,\n\n\t\t/**\n\t\t * From base to input2\n\t\t */\n\t\tpublic readonly input2Diffs: readonly DetailedLineRangeMapping[],\n\t) {\n\t\tif (this.input1Diffs.length === 0 && this.input2Diffs.length === 0) {\n\t\t\tthrow new BugIndicatingError(\"must have at least one diff\");\n\t\t}\n\t}\n\n\tpublic getInputRange(inputNumber: 1 | 2): LineRange {\n\t\treturn inputNumber === 1 ? this.input1Range : this.input2Range;\n\t}\n\n\tpublic getInputCombinedDiff(\n\t\tinputNumber: 1 | 2,\n\t): DetailedLineRangeMapping | undefined {\n\t\treturn inputNumber === 1\n\t\t\t? this.input1CombinedDiff\n\t\t\t: this.input2CombinedDiff;\n\t}\n\n\tpublic getInputDiffs(\n\t\tinputNumber: 1 | 2,\n\t): readonly DetailedLineRangeMapping[] {\n\t\treturn inputNumber === 1 ? this.input1Diffs : this.input2Diffs;\n\t}\n\n\tpublic get isConflicting(): boolean {\n\t\treturn this.input1Diffs.length > 0 && this.input2Diffs.length > 0;\n\t}\n\n\tpublic get canBeCombined(): boolean {\n\t\treturn this.smartCombineInputs(1) !== undefined;\n\t}\n\n\tpublic get isOrderRelevant(): boolean {\n\t\tconst input1 = this.smartCombineInputs(1);\n\t\tconst input2 = this.smartCombineInputs(2);\n\t\tif (!input1 || !input2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !input1.equals(input2);\n\t}\n\n\tpublic getEditForBase(state: ModifiedBaseRangeState): {\n\t\tedit: LineRangeEdit | undefined;\n\t\teffectiveState: ModifiedBaseRangeState;\n\t} {\n\t\tconst diffs: {\n\t\t\tdiff: DetailedLineRangeMapping;\n\t\t\tinputNumber: InputNumber;\n\t\t}[] = [];\n\t\tif (state.includesInput1 && this.input1CombinedDiff) {\n\t\t\tdiffs.push({ diff: this.input1CombinedDiff, inputNumber: 1 });\n\t\t}\n\t\tif (state.includesInput2 && this.input2CombinedDiff) {\n\t\t\tdiffs.push({ diff: this.input2CombinedDiff, inputNumber: 2 });\n\t\t}\n\n\t\tif (diffs.length === 0) {\n\t\t\treturn {\n\t\t\t\tedit: undefined,\n\t\t\t\teffectiveState: ModifiedBaseRangeState.base,\n\t\t\t};\n\t\t}\n\t\tif (diffs.length === 1) {\n\t\t\treturn {\n\t\t\t\tedit: diffs[0].diff.getLineEdit(),\n\t\t\t\teffectiveState: ModifiedBaseRangeState.base.withInputValue(\n\t\t\t\t\tdiffs[0].inputNumber,\n\t\t\t\t\ttrue,\n\t\t\t\t\tfalse,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (state.kind !== ModifiedBaseRangeStateKind.both) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst smartCombinedEdit = state.smartCombination\n\t\t\t? this.smartCombineInputs(state.firstInput)\n\t\t\t: this.dumbCombineInputs(state.firstInput);\n\t\tif (smartCombinedEdit) {\n\t\t\treturn { edit: smartCombinedEdit, effectiveState: state };\n\t\t}\n\n\t\treturn {\n\t\t\tedit: diffs[\n\t\t\t\tgetOtherInputNumber(state.firstInput) - 1\n\t\t\t].diff.getLineEdit(),\n\t\t\teffectiveState: ModifiedBaseRangeState.base.withInputValue(\n\t\t\t\tgetOtherInputNumber(state.firstInput),\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t),\n\t\t};\n\t}\n\n\tprivate smartInput1LineRangeEdit: LineRangeEdit | undefined | null = null;\n\tprivate smartInput2LineRangeEdit: LineRangeEdit | undefined | null = null;\n\n\tprivate smartCombineInputs(firstInput: 1 | 2): LineRangeEdit | undefined {\n\t\tif (firstInput === 1 && this.smartInput1LineRangeEdit !== null) {\n\t\t\treturn this.smartInput1LineRangeEdit;\n\t\t} else if (firstInput === 2 && this.smartInput2LineRangeEdit !== null) {\n\t\t\treturn this.smartInput2LineRangeEdit;\n\t\t}\n\n\t\tconst combinedDiffs = concatArrays(\n\t\t\tthis.input1Diffs.flatMap((diffs) =>\n\t\t\t\tdiffs.rangeMappings.map((diff) => ({\n\t\t\t\t\tdiff,\n\t\t\t\t\tinput: 1 as const,\n\t\t\t\t})),\n\t\t\t),\n\t\t\tthis.input2Diffs.flatMap((diffs) =>\n\t\t\t\tdiffs.rangeMappings.map((diff) => ({\n\t\t\t\t\tdiff,\n\t\t\t\t\tinput: 2 as const,\n\t\t\t\t})),\n\t\t\t),\n\t\t).sort(\n\t\t\ttieBreakComparators(\n\t\t\t\tcompareBy(\n\t\t\t\t\t(d) => d.diff.inputRange,\n\t\t\t\t\tRange.compareRangesUsingStarts,\n\t\t\t\t),\n\t\t\t\tcompareBy(\n\t\t\t\t\t(d) => (d.input === firstInput ? 1 : 2),\n\t\t\t\t\tnumberComparator,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tconst sortedEdits = combinedDiffs.map((d) => {\n\t\t\tconst sourceTextModel =\n\t\t\t\td.input === 1 ? this.input1TextModel : this.input2TextModel;\n\t\t\treturn new RangeEdit(\n\t\t\t\td.diff.inputRange,\n\t\t\t\tsourceTextModel.getValueInRange(d.diff.outputRange),\n\t\t\t);\n\t\t});\n\n\t\tconst result = editsToLineRangeEdit(\n\t\t\tthis.baseRange,\n\t\t\tsortedEdits,\n\t\t\tthis.baseTextModel,\n\t\t);\n\t\tif (firstInput === 1) {\n\t\t\tthis.smartInput1LineRangeEdit = result;\n\t\t} else {\n\t\t\tthis.smartInput2LineRangeEdit = result;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate dumbInput1LineRangeEdit: LineRangeEdit | undefined | null = null;\n\tprivate dumbInput2LineRangeEdit: LineRangeEdit | undefined | null = null;\n\n\tprivate dumbCombineInputs(firstInput: 1 | 2): LineRangeEdit | undefined {\n\t\tif (firstInput === 1 && this.dumbInput1LineRangeEdit !== null) {\n\t\t\treturn this.dumbInput1LineRangeEdit;\n\t\t} else if (firstInput === 2 && this.dumbInput2LineRangeEdit !== null) {\n\t\t\treturn this.dumbInput2LineRangeEdit;\n\t\t}\n\n\t\tlet input1Lines = this.input1Range.getLines(this.input1TextModel);\n\t\tlet input2Lines = this.input2Range.getLines(this.input2TextModel);\n\t\tif (firstInput === 2) {\n\t\t\t[input1Lines, input2Lines] = [input2Lines, input1Lines];\n\t\t}\n\n\t\tconst result = new LineRangeEdit(\n\t\t\tthis.baseRange,\n\t\t\tinput1Lines.concat(input2Lines),\n\t\t);\n\t\tif (firstInput === 1) {\n\t\t\tthis.dumbInput1LineRangeEdit = result;\n\t\t} else {\n\t\t\tthis.dumbInput2LineRangeEdit = result;\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction editsToLineRangeEdit(\n\trange: LineRange,\n\tsortedEdits: RangeEdit[],\n\ttextModel: ITextModel,\n): LineRangeEdit | undefined {\n\tlet text = \"\";\n\tconst startsLineBefore = range.startLineNumber > 1;\n\tlet currentPosition = startsLineBefore\n\t\t? new Position(\n\t\t\t\trange.startLineNumber - 1,\n\t\t\t\ttextModel.getLineMaxColumn(range.startLineNumber - 1),\n\t\t\t)\n\t\t: new Position(range.startLineNumber, 1);\n\n\tfor (const edit of sortedEdits) {\n\t\tconst diffStart = edit.range.getStartPosition();\n\t\tif (!currentPosition.isBeforeOrEqual(diffStart)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet originalText = textModel.getValueInRange(\n\t\t\tRange.fromPositions(currentPosition, diffStart),\n\t\t);\n\t\tif (diffStart.lineNumber > textModel.getLineCount()) {\n\t\t\t// assert diffStart.lineNumber === textModel.getLineCount() + 1\n\t\t\t// getValueInRange doesn't include this virtual line break, as the document ends the line before.\n\t\t\t// endsLineAfter will be false.\n\t\t\toriginalText += \"\\n\";\n\t\t}\n\t\ttext += originalText;\n\t\ttext += edit.newText;\n\t\tcurrentPosition = edit.range.getEndPosition();\n\t}\n\n\tconst endsLineAfter =\n\t\trange.endLineNumberExclusive <= textModel.getLineCount();\n\tconst end = endsLineAfter\n\t\t? new Position(range.endLineNumberExclusive, 1)\n\t\t: new Position(\n\t\t\t\trange.endLineNumberExclusive - 1,\n\t\t\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t);\n\n\tconst originalText = textModel.getValueInRange(\n\t\tRange.fromPositions(currentPosition, end),\n\t);\n\ttext += originalText;\n\n\tconst lines = splitLines(text);\n\tif (startsLineBefore) {\n\t\tif (lines[0] !== \"\") {\n\t\t\treturn undefined;\n\t\t}\n\t\tlines.shift();\n\t}\n\tif (endsLineAfter) {\n\t\tif (lines[lines.length - 1] !== \"\") {\n\t\t\treturn undefined;\n\t\t}\n\t\tlines.pop();\n\t}\n\treturn new LineRangeEdit(range, lines);\n}\n\nexport enum ModifiedBaseRangeStateKind {\n\tbase = 0,\n\tinput1 = 1,\n\tinput2 = 2,\n\tboth = 3,\n\tunrecognized = 4,\n}\n\nexport type InputNumber = 1 | 2;\n\nexport function getOtherInputNumber(inputNumber: InputNumber): InputNumber {\n\treturn inputNumber === 1 ? 2 : 1;\n}\n\nexport abstract class AbstractModifiedBaseRangeState {\n\tconstructor() {}\n\n\tabstract get kind(): ModifiedBaseRangeStateKind;\n\n\tpublic get includesInput1(): boolean {\n\t\treturn false;\n\t}\n\tpublic get includesInput2(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic includesInput(inputNumber: InputNumber): boolean {\n\t\treturn inputNumber === 1 ? this.includesInput1 : this.includesInput2;\n\t}\n\n\tpublic isInputIncluded(inputNumber: InputNumber): boolean {\n\t\treturn inputNumber === 1 ? this.includesInput1 : this.includesInput2;\n\t}\n\n\tpublic abstract toString(): string;\n\n\tpublic abstract swap(): ModifiedBaseRangeState;\n\n\tpublic abstract withInputValue(\n\t\tinputNumber: InputNumber,\n\t\tvalue: boolean,\n\t\tsmartCombination?: boolean,\n\t): ModifiedBaseRangeState;\n\n\tpublic abstract equals(other: ModifiedBaseRangeState): boolean;\n\n\tpublic toggle(inputNumber: InputNumber) {\n\t\treturn this.withInputValue(\n\t\t\tinputNumber,\n\t\t\t!this.includesInput(inputNumber),\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tpublic getInput(inputNumber: 1 | 2): InputState {\n\t\tif (!this.isInputIncluded(inputNumber)) {\n\t\t\treturn InputState.excluded;\n\t\t}\n\t\treturn InputState.first;\n\t}\n}\n\nexport class ModifiedBaseRangeStateBase extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.base {\n\t\treturn ModifiedBaseRangeStateKind.base;\n\t}\n\tpublic override toString(): string {\n\t\treturn \"base\";\n\t}\n\tpublic override swap(): ModifiedBaseRangeState {\n\t\treturn this;\n\t}\n\n\tpublic override withInputValue(\n\t\tinputNumber: InputNumber,\n\t\tvalue: boolean,\n\t\tsmartCombination = false,\n\t): ModifiedBaseRangeState {\n\t\tif (inputNumber === 1) {\n\t\t\treturn value ? new ModifiedBaseRangeStateInput1() : this;\n\t\t} else {\n\t\t\treturn value ? new ModifiedBaseRangeStateInput2() : this;\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.base;\n\t}\n}\n\nexport class ModifiedBaseRangeStateInput1 extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.input1 {\n\t\treturn ModifiedBaseRangeStateKind.input1;\n\t}\n\toverride get includesInput1(): boolean {\n\t\treturn true;\n\t}\n\tpublic toString(): string {\n\t\treturn \"1\u2713\";\n\t}\n\tpublic override swap(): ModifiedBaseRangeState {\n\t\treturn new ModifiedBaseRangeStateInput2();\n\t}\n\n\tpublic override withInputValue(\n\t\tinputNumber: InputNumber,\n\t\tvalue: boolean,\n\t\tsmartCombination = false,\n\t): ModifiedBaseRangeState {\n\t\tif (inputNumber === 1) {\n\t\t\treturn value ? this : new ModifiedBaseRangeStateBase();\n\t\t} else {\n\t\t\treturn value\n\t\t\t\t? new ModifiedBaseRangeStateBoth(1, smartCombination)\n\t\t\t\t: new ModifiedBaseRangeStateInput2();\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.input1;\n\t}\n}\n\nexport class ModifiedBaseRangeStateInput2 extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.input2 {\n\t\treturn ModifiedBaseRangeStateKind.input2;\n\t}\n\toverride get includesInput2(): boolean {\n\t\treturn true;\n\t}\n\tpublic toString(): string {\n\t\treturn \"2\u2713\";\n\t}\n\tpublic override swap(): ModifiedBaseRangeState {\n\t\treturn new ModifiedBaseRangeStateInput1();\n\t}\n\n\tpublic withInputValue(\n\t\tinputNumber: InputNumber,\n\t\tvalue: boolean,\n\t\tsmartCombination = false,\n\t): ModifiedBaseRangeState {\n\t\tif (inputNumber === 2) {\n\t\t\treturn value ? this : new ModifiedBaseRangeStateBase();\n\t\t} else {\n\t\t\treturn value\n\t\t\t\t? new ModifiedBaseRangeStateBoth(2, smartCombination)\n\t\t\t\t: new ModifiedBaseRangeStateInput2();\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.input2;\n\t}\n}\n\nexport class ModifiedBaseRangeStateBoth extends AbstractModifiedBaseRangeState {\n\tconstructor(\n\t\tpublic readonly firstInput: InputNumber,\n\t\tpublic readonly smartCombination: boolean,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride get kind(): ModifiedBaseRangeStateKind.both {\n\t\treturn ModifiedBaseRangeStateKind.both;\n\t}\n\toverride get includesInput1(): boolean {\n\t\treturn true;\n\t}\n\toverride get includesInput2(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toString(): string {\n\t\treturn \"2\u2713\";\n\t}\n\n\tpublic override swap(): ModifiedBaseRangeState {\n\t\treturn new ModifiedBaseRangeStateBoth(\n\t\t\tgetOtherInputNumber(this.firstInput),\n\t\t\tthis.smartCombination,\n\t\t);\n\t}\n\n\tpublic withInputValue(\n\t\tinputNumber: InputNumber,\n\t\tvalue: boolean,\n\t\tsmartCombination = false,\n\t): ModifiedBaseRangeState {\n\t\tif (value) {\n\t\t\treturn this;\n\t\t}\n\t\treturn inputNumber === 1\n\t\t\t? new ModifiedBaseRangeStateInput2()\n\t\t\t: new ModifiedBaseRangeStateInput1();\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn (\n\t\t\tother.kind === ModifiedBaseRangeStateKind.both &&\n\t\t\tthis.firstInput === other.firstInput &&\n\t\t\tthis.smartCombination === other.smartCombination\n\t\t);\n\t}\n\n\tpublic override getInput(inputNumber: 1 | 2): InputState {\n\t\treturn inputNumber === this.firstInput\n\t\t\t? InputState.first\n\t\t\t: InputState.second;\n\t}\n}\n\nexport class ModifiedBaseRangeStateUnrecognized extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.unrecognized {\n\t\treturn ModifiedBaseRangeStateKind.unrecognized;\n\t}\n\tpublic override toString(): string {\n\t\treturn \"unrecognized\";\n\t}\n\tpublic override swap(): ModifiedBaseRangeState {\n\t\treturn this;\n\t}\n\n\tpublic withInputValue(\n\t\tinputNumber: InputNumber,\n\t\tvalue: boolean,\n\t\tsmartCombination = false,\n\t): ModifiedBaseRangeState {\n\t\tif (!value) {\n\t\t\treturn this;\n\t\t}\n\t\treturn inputNumber === 1\n\t\t\t? new ModifiedBaseRangeStateInput1()\n\t\t\t: new ModifiedBaseRangeStateInput2();\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.unrecognized;\n\t}\n}\n\nexport type ModifiedBaseRangeState =\n\t| ModifiedBaseRangeStateBase\n\t| ModifiedBaseRangeStateInput1\n\t| ModifiedBaseRangeStateInput2\n\t| ModifiedBaseRangeStateInput2\n\t| ModifiedBaseRangeStateBoth\n\t| ModifiedBaseRangeStateUnrecognized;\n\nexport namespace ModifiedBaseRangeState {\n\texport const base = new ModifiedBaseRangeStateBase();\n\texport const unrecognized = new ModifiedBaseRangeStateUnrecognized();\n}\n\nexport enum InputState {\n\texcluded = 0,\n\tfirst = 1,\n\tsecond = 2,\n\tunrecognized = 3,\n}\n"],
  "mappings": "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",
  "names": ["originalText", "ModifiedBaseRangeStateKind", "ModifiedBaseRangeState", "InputState"]
}
