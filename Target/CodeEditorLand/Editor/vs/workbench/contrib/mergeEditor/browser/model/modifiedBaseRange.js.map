{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/modifiedBaseRange.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, equals, numberComparator, tieBreakComparators } from '../../../../../base/common/arrays.js';\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Constants } from '../../../../../base/common/uint.js';\nimport { Position } from '../../../../../editor/common/core/position.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { LineRangeEdit, RangeEdit } from './editing.js';\nimport { LineRange } from './lineRange.js';\nimport { DetailedLineRangeMapping, MappingAlignment } from './mapping.js';\nimport { concatArrays } from '../utils.js';\n\n/**\n * Describes modifications in input 1 and input 2 for a specific range in base.\n *\n * The UI offers a mechanism to either apply all changes from input 1 or input 2 or both.\n *\n * Immutable.\n*/\nexport class ModifiedBaseRange {\n\tpublic static fromDiffs(\n\t\tdiffs1: readonly DetailedLineRangeMapping[],\n\t\tdiffs2: readonly DetailedLineRangeMapping[],\n\t\tbaseTextModel: ITextModel,\n\t\tinput1TextModel: ITextModel,\n\t\tinput2TextModel: ITextModel\n\t): ModifiedBaseRange[] {\n\t\tconst alignments = MappingAlignment.compute(diffs1, diffs2);\n\t\treturn alignments.map(\n\t\t\t(a) => new ModifiedBaseRange(\n\t\t\t\ta.inputRange,\n\t\t\t\tbaseTextModel,\n\t\t\t\ta.output1Range,\n\t\t\t\tinput1TextModel,\n\t\t\t\ta.output1LineMappings,\n\t\t\t\ta.output2Range,\n\t\t\t\tinput2TextModel,\n\t\t\t\ta.output2LineMappings\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic readonly input1CombinedDiff = DetailedLineRangeMapping.join(this.input1Diffs);\n\tpublic readonly input2CombinedDiff = DetailedLineRangeMapping.join(this.input2Diffs);\n\tpublic readonly isEqualChange = equals(this.input1Diffs, this.input2Diffs, (a, b) => a.getLineEdit().equals(b.getLineEdit()));\n\n\tconstructor(\n\t\tpublic readonly baseRange: LineRange,\n\t\tpublic readonly baseTextModel: ITextModel,\n\t\tpublic readonly input1Range: LineRange,\n\t\tpublic readonly input1TextModel: ITextModel,\n\n\t\t/**\n\t\t * From base to input1\n\t\t*/\n\t\tpublic readonly input1Diffs: readonly DetailedLineRangeMapping[],\n\t\tpublic readonly input2Range: LineRange,\n\t\tpublic readonly input2TextModel: ITextModel,\n\n\t\t/**\n\t\t * From base to input2\n\t\t*/\n\t\tpublic readonly input2Diffs: readonly DetailedLineRangeMapping[]\n\t) {\n\t\tif (this.input1Diffs.length === 0 && this.input2Diffs.length === 0) {\n\t\t\tthrow new BugIndicatingError('must have at least one diff');\n\t\t}\n\t}\n\n\tpublic getInputRange(inputNumber: 1 | 2): LineRange {\n\t\treturn inputNumber === 1 ? this.input1Range : this.input2Range;\n\t}\n\n\tpublic getInputCombinedDiff(inputNumber: 1 | 2): DetailedLineRangeMapping | undefined {\n\t\treturn inputNumber === 1 ? this.input1CombinedDiff : this.input2CombinedDiff;\n\t}\n\n\tpublic getInputDiffs(inputNumber: 1 | 2): readonly DetailedLineRangeMapping[] {\n\t\treturn inputNumber === 1 ? this.input1Diffs : this.input2Diffs;\n\t}\n\n\tpublic get isConflicting(): boolean {\n\t\treturn this.input1Diffs.length > 0 && this.input2Diffs.length > 0;\n\t}\n\n\tpublic get canBeCombined(): boolean {\n\t\treturn this.smartCombineInputs(1) !== undefined;\n\t}\n\n\tpublic get isOrderRelevant(): boolean {\n\t\tconst input1 = this.smartCombineInputs(1);\n\t\tconst input2 = this.smartCombineInputs(2);\n\t\tif (!input1 || !input2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !input1.equals(input2);\n\t}\n\n\tpublic getEditForBase(state: ModifiedBaseRangeState): { edit: LineRangeEdit | undefined; effectiveState: ModifiedBaseRangeState } {\n\t\tconst diffs: { diff: DetailedLineRangeMapping; inputNumber: InputNumber }[] = [];\n\t\tif (state.includesInput1 && this.input1CombinedDiff) {\n\t\t\tdiffs.push({ diff: this.input1CombinedDiff, inputNumber: 1 });\n\t\t}\n\t\tif (state.includesInput2 && this.input2CombinedDiff) {\n\t\t\tdiffs.push({ diff: this.input2CombinedDiff, inputNumber: 2 });\n\t\t}\n\n\t\tif (diffs.length === 0) {\n\t\t\treturn { edit: undefined, effectiveState: ModifiedBaseRangeState.base };\n\t\t}\n\t\tif (diffs.length === 1) {\n\t\t\treturn { edit: diffs[0].diff.getLineEdit(), effectiveState: ModifiedBaseRangeState.base.withInputValue(diffs[0].inputNumber, true, false) };\n\t\t}\n\n\t\tif (state.kind !== ModifiedBaseRangeStateKind.both) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst smartCombinedEdit = state.smartCombination ? this.smartCombineInputs(state.firstInput) : this.dumbCombineInputs(state.firstInput);\n\t\tif (smartCombinedEdit) {\n\t\t\treturn { edit: smartCombinedEdit, effectiveState: state };\n\t\t}\n\n\t\treturn {\n\t\t\tedit: diffs[getOtherInputNumber(state.firstInput) - 1].diff.getLineEdit(),\n\t\t\teffectiveState: ModifiedBaseRangeState.base.withInputValue(\n\t\t\t\tgetOtherInputNumber(state.firstInput),\n\t\t\t\ttrue,\n\t\t\t\tfalse\n\t\t\t),\n\t\t};\n\t}\n\n\tprivate smartInput1LineRangeEdit: LineRangeEdit | undefined | null = null;\n\tprivate smartInput2LineRangeEdit: LineRangeEdit | undefined | null = null;\n\n\tprivate smartCombineInputs(firstInput: 1 | 2): LineRangeEdit | undefined {\n\t\tif (firstInput === 1 && this.smartInput1LineRangeEdit !== null) {\n\t\t\treturn this.smartInput1LineRangeEdit;\n\t\t} else if (firstInput === 2 && this.smartInput2LineRangeEdit !== null) {\n\t\t\treturn this.smartInput2LineRangeEdit;\n\t\t}\n\n\t\tconst combinedDiffs = concatArrays(\n\t\t\tthis.input1Diffs.flatMap((diffs) =>\n\t\t\t\tdiffs.rangeMappings.map((diff) => ({ diff, input: 1 as const }))\n\t\t\t),\n\t\t\tthis.input2Diffs.flatMap((diffs) =>\n\t\t\t\tdiffs.rangeMappings.map((diff) => ({ diff, input: 2 as const }))\n\t\t\t)\n\t\t).sort(\n\t\t\ttieBreakComparators(\n\t\t\t\tcompareBy((d) => d.diff.inputRange, Range.compareRangesUsingStarts),\n\t\t\t\tcompareBy((d) => (d.input === firstInput ? 1 : 2), numberComparator)\n\t\t\t)\n\t\t);\n\n\t\tconst sortedEdits = combinedDiffs.map(d => {\n\t\t\tconst sourceTextModel = d.input === 1 ? this.input1TextModel : this.input2TextModel;\n\t\t\treturn new RangeEdit(d.diff.inputRange, sourceTextModel.getValueInRange(d.diff.outputRange));\n\t\t});\n\n\t\tconst result = editsToLineRangeEdit(this.baseRange, sortedEdits, this.baseTextModel);\n\t\tif (firstInput === 1) {\n\t\t\tthis.smartInput1LineRangeEdit = result;\n\t\t} else {\n\t\t\tthis.smartInput2LineRangeEdit = result;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate dumbInput1LineRangeEdit: LineRangeEdit | undefined | null = null;\n\tprivate dumbInput2LineRangeEdit: LineRangeEdit | undefined | null = null;\n\n\tprivate dumbCombineInputs(firstInput: 1 | 2): LineRangeEdit | undefined {\n\t\tif (firstInput === 1 && this.dumbInput1LineRangeEdit !== null) {\n\t\t\treturn this.dumbInput1LineRangeEdit;\n\t\t} else if (firstInput === 2 && this.dumbInput2LineRangeEdit !== null) {\n\t\t\treturn this.dumbInput2LineRangeEdit;\n\t\t}\n\n\t\tlet input1Lines = this.input1Range.getLines(this.input1TextModel);\n\t\tlet input2Lines = this.input2Range.getLines(this.input2TextModel);\n\t\tif (firstInput === 2) {\n\t\t\t[input1Lines, input2Lines] = [input2Lines, input1Lines];\n\t\t}\n\n\t\tconst result = new LineRangeEdit(this.baseRange, input1Lines.concat(input2Lines));\n\t\tif (firstInput === 1) {\n\t\t\tthis.dumbInput1LineRangeEdit = result;\n\t\t} else {\n\t\t\tthis.dumbInput2LineRangeEdit = result;\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction editsToLineRangeEdit(range: LineRange, sortedEdits: RangeEdit[], textModel: ITextModel): LineRangeEdit | undefined {\n\tlet text = '';\n\tconst startsLineBefore = range.startLineNumber > 1;\n\tlet currentPosition = startsLineBefore\n\t\t? new Position(\n\t\t\trange.startLineNumber - 1,\n\t\t\ttextModel.getLineMaxColumn(range.startLineNumber - 1)\n\t\t)\n\t\t: new Position(range.startLineNumber, 1);\n\n\tfor (const edit of sortedEdits) {\n\t\tconst diffStart = edit.range.getStartPosition();\n\t\tif (!currentPosition.isBeforeOrEqual(diffStart)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet originalText = textModel.getValueInRange(Range.fromPositions(currentPosition, diffStart));\n\t\tif (diffStart.lineNumber > textModel.getLineCount()) {\n\t\t\t// assert diffStart.lineNumber === textModel.getLineCount() + 1\n\t\t\t// getValueInRange doesn't include this virtual line break, as the document ends the line before.\n\t\t\t// endsLineAfter will be false.\n\t\t\toriginalText += '\\n';\n\t\t}\n\t\ttext += originalText;\n\t\ttext += edit.newText;\n\t\tcurrentPosition = edit.range.getEndPosition();\n\t}\n\n\tconst endsLineAfter = range.endLineNumberExclusive <= textModel.getLineCount();\n\tconst end = endsLineAfter ? new Position(\n\t\trange.endLineNumberExclusive,\n\t\t1\n\t) : new Position(range.endLineNumberExclusive - 1, Constants.MAX_SAFE_SMALL_INTEGER);\n\n\tconst originalText = textModel.getValueInRange(\n\t\tRange.fromPositions(currentPosition, end)\n\t);\n\ttext += originalText;\n\n\tconst lines = splitLines(text);\n\tif (startsLineBefore) {\n\t\tif (lines[0] !== '') {\n\t\t\treturn undefined;\n\t\t}\n\t\tlines.shift();\n\t}\n\tif (endsLineAfter) {\n\t\tif (lines[lines.length - 1] !== '') {\n\t\t\treturn undefined;\n\t\t}\n\t\tlines.pop();\n\t}\n\treturn new LineRangeEdit(range, lines);\n}\n\nexport enum ModifiedBaseRangeStateKind {\n\tbase,\n\tinput1,\n\tinput2,\n\tboth,\n\tunrecognized,\n}\n\nexport type InputNumber = 1 | 2;\n\nexport function getOtherInputNumber(inputNumber: InputNumber): InputNumber {\n\treturn inputNumber === 1 ? 2 : 1;\n}\n\nexport abstract class AbstractModifiedBaseRangeState {\n\tconstructor() { }\n\n\tabstract get kind(): ModifiedBaseRangeStateKind;\n\n\tpublic get includesInput1(): boolean { return false; }\n\tpublic get includesInput2(): boolean { return false; }\n\n\tpublic includesInput(inputNumber: InputNumber): boolean {\n\t\treturn inputNumber === 1 ? this.includesInput1 : this.includesInput2;\n\t}\n\n\tpublic isInputIncluded(inputNumber: InputNumber): boolean {\n\t\treturn inputNumber === 1 ? this.includesInput1 : this.includesInput2;\n\t}\n\n\tpublic abstract toString(): string;\n\n\tpublic abstract swap(): ModifiedBaseRangeState;\n\n\tpublic abstract withInputValue(inputNumber: InputNumber, value: boolean, smartCombination?: boolean): ModifiedBaseRangeState;\n\n\tpublic abstract equals(other: ModifiedBaseRangeState): boolean;\n\n\tpublic toggle(inputNumber: InputNumber) {\n\t\treturn this.withInputValue(inputNumber, !this.includesInput(inputNumber), true);\n\t}\n\n\tpublic getInput(inputNumber: 1 | 2): InputState {\n\t\tif (!this.isInputIncluded(inputNumber)) {\n\t\t\treturn InputState.excluded;\n\t\t}\n\t\treturn InputState.first;\n\t}\n}\n\nexport class ModifiedBaseRangeStateBase extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.base { return ModifiedBaseRangeStateKind.base; }\n\tpublic override toString(): string { return 'base'; }\n\tpublic override swap(): ModifiedBaseRangeState { return this; }\n\n\tpublic override withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (inputNumber === 1) {\n\t\t\treturn value ? new ModifiedBaseRangeStateInput1() : this;\n\t\t} else {\n\t\t\treturn value ? new ModifiedBaseRangeStateInput2() : this;\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.base;\n\t}\n}\n\nexport class ModifiedBaseRangeStateInput1 extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.input1 { return ModifiedBaseRangeStateKind.input1; }\n\toverride get includesInput1(): boolean { return true; }\n\tpublic toString(): string { return '1\u2713'; }\n\tpublic override swap(): ModifiedBaseRangeState { return new ModifiedBaseRangeStateInput2(); }\n\n\tpublic override withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (inputNumber === 1) {\n\t\t\treturn value ? this : new ModifiedBaseRangeStateBase();\n\t\t} else {\n\t\t\treturn value ? new ModifiedBaseRangeStateBoth(1, smartCombination) : new ModifiedBaseRangeStateInput2();\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.input1;\n\t}\n}\n\nexport class ModifiedBaseRangeStateInput2 extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.input2 { return ModifiedBaseRangeStateKind.input2; }\n\toverride get includesInput2(): boolean { return true; }\n\tpublic toString(): string { return '2\u2713'; }\n\tpublic override swap(): ModifiedBaseRangeState { return new ModifiedBaseRangeStateInput1(); }\n\n\tpublic withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (inputNumber === 2) {\n\t\t\treturn value ? this : new ModifiedBaseRangeStateBase();\n\t\t} else {\n\t\t\treturn value ? new ModifiedBaseRangeStateBoth(2, smartCombination) : new ModifiedBaseRangeStateInput2();\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.input2;\n\t}\n}\n\nexport class ModifiedBaseRangeStateBoth extends AbstractModifiedBaseRangeState {\n\tconstructor(\n\t\tpublic readonly firstInput: InputNumber,\n\t\tpublic readonly smartCombination: boolean\n\t) {\n\t\tsuper();\n\t}\n\n\toverride get kind(): ModifiedBaseRangeStateKind.both { return ModifiedBaseRangeStateKind.both; }\n\toverride get includesInput1(): boolean { return true; }\n\toverride get includesInput2(): boolean { return true; }\n\n\tpublic toString(): string {\n\t\treturn '2\u2713';\n\t}\n\n\tpublic override swap(): ModifiedBaseRangeState { return new ModifiedBaseRangeStateBoth(getOtherInputNumber(this.firstInput), this.smartCombination); }\n\n\tpublic withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (value) {\n\t\t\treturn this;\n\t\t}\n\t\treturn inputNumber === 1 ? new ModifiedBaseRangeStateInput2() : new ModifiedBaseRangeStateInput1();\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.both && this.firstInput === other.firstInput && this.smartCombination === other.smartCombination;\n\t}\n\n\tpublic override getInput(inputNumber: 1 | 2): InputState {\n\t\treturn inputNumber === this.firstInput ? InputState.first : InputState.second;\n\t}\n}\n\nexport class ModifiedBaseRangeStateUnrecognized extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.unrecognized { return ModifiedBaseRangeStateKind.unrecognized; }\n\tpublic override toString(): string { return 'unrecognized'; }\n\tpublic override swap(): ModifiedBaseRangeState { return this; }\n\n\tpublic withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (!value) {\n\t\t\treturn this;\n\t\t}\n\t\treturn inputNumber === 1 ? new ModifiedBaseRangeStateInput1() : new ModifiedBaseRangeStateInput2();\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.unrecognized;\n\t}\n}\n\nexport type ModifiedBaseRangeState = ModifiedBaseRangeStateBase | ModifiedBaseRangeStateInput1 | ModifiedBaseRangeStateInput2 | ModifiedBaseRangeStateInput2 | ModifiedBaseRangeStateBoth | ModifiedBaseRangeStateUnrecognized;\n\nexport namespace ModifiedBaseRangeState {\n\texport const base = new ModifiedBaseRangeStateBase();\n\texport const unrecognized = new ModifiedBaseRangeStateUnrecognized();\n}\n\nexport const enum InputState {\n\texcluded = 0,\n\tfirst = 1,\n\tsecond = 2,\n\tunrecognized = 3\n}\n"],
  "mappings": "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",
  "names": ["originalText", "ModifiedBaseRangeStateKind", "ModifiedBaseRangeState", "InputState"]
}
