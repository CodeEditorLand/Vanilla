{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/mergeEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CompareResult, equals } from '../../../../../base/common/arrays.js';\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { autorunHandleChanges, derived, IObservable, IReader, ISettableObservable, ITransaction, keepObserved, observableValue, transaction, waitForState } from '../../../../../base/common/observable.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { localize } from '../../../../../nls.js';\nimport { IResourceUndoRedoElement, IUndoRedoService, UndoRedoElementType, UndoRedoGroup } from '../../../../../platform/undoRedo/common/undoRedo.js';\nimport { EditorModel } from '../../../../common/editor/editorModel.js';\nimport { IMergeDiffComputer } from './diffComputer.js';\nimport { LineRange } from './lineRange.js';\nimport { DetailedLineRangeMapping, DocumentLineRangeMap, DocumentRangeMap, LineRangeMapping } from './mapping.js';\nimport { TextModelDiffChangeReason, TextModelDiffs, TextModelDiffState } from './textModelDiffs.js';\nimport { MergeEditorTelemetry } from '../telemetry.js';\nimport { leftJoin } from '../utils.js';\nimport { InputNumber, ModifiedBaseRange, ModifiedBaseRangeState, ModifiedBaseRangeStateKind } from './modifiedBaseRange.js';\n\nexport interface InputData {\n\treadonly textModel: ITextModel;\n\treadonly title: string | undefined;\n\treadonly detail: string | undefined;\n\treadonly description: string | undefined;\n}\n\nexport class MergeEditorModel extends EditorModel {\n\tprivate readonly input1TextModelDiffs = this._register(new TextModelDiffs(this.base, this.input1.textModel, this.diffComputer));\n\tprivate readonly input2TextModelDiffs = this._register(new TextModelDiffs(this.base, this.input2.textModel, this.diffComputer));\n\tprivate readonly resultTextModelDiffs = this._register(new TextModelDiffs(this.base, this.resultTextModel, this.diffComputer));\n\tpublic readonly modifiedBaseRanges = derived<ModifiedBaseRange[]>(this, (reader) => {\n\t\tconst input1Diffs = this.input1TextModelDiffs.diffs.read(reader);\n\t\tconst input2Diffs = this.input2TextModelDiffs.diffs.read(reader);\n\t\treturn ModifiedBaseRange.fromDiffs(input1Diffs, input2Diffs, this.base, this.input1.textModel, this.input2.textModel);\n\t});\n\n\tprivate readonly modifiedBaseRangeResultStates = derived(this, reader => {\n\t\tconst map = new Map<ModifiedBaseRange, ModifiedBaseRangeData>(\n\t\t\tthis.modifiedBaseRanges.read(reader).map<[ModifiedBaseRange, ModifiedBaseRangeData]>((s) => [\n\t\t\t\ts, new ModifiedBaseRangeData(s)\n\t\t\t])\n\t\t);\n\t\treturn map;\n\t});\n\n\tprivate readonly resultSnapshot = this.resultTextModel.createSnapshot();\n\n\tconstructor(\n\t\treadonly base: ITextModel,\n\t\treadonly input1: InputData,\n\t\treadonly input2: InputData,\n\t\treadonly resultTextModel: ITextModel,\n\t\tprivate readonly diffComputer: IMergeDiffComputer,\n\t\tprivate readonly options: { resetResult: boolean },\n\t\tpublic readonly telemetry: MergeEditorTelemetry,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IUndoRedoService private readonly undoRedoService: IUndoRedoService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(keepObserved(this.modifiedBaseRangeResultStates));\n\t\tthis._register(keepObserved(this.input1ResultMapping));\n\t\tthis._register(keepObserved(this.input2ResultMapping));\n\n\t\tconst initializePromise = this.initialize();\n\n\t\tthis.onInitialized = this.onInitialized.then(async () => {\n\t\t\tawait initializePromise;\n\t\t});\n\n\t\tinitializePromise.then(() => {\n\t\t\tlet shouldRecomputeHandledFromAccepted = true;\n\t\t\tthis._register(\n\t\t\t\tautorunHandleChanges(\n\t\t\t\t\t{\n\t\t\t\t\t\thandleChange: (ctx) => {\n\t\t\t\t\t\t\tif (ctx.didChange(this.modifiedBaseRangeResultStates)) {\n\t\t\t\t\t\t\t\tshouldRecomputeHandledFromAccepted = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ctx.didChange(this.resultTextModelDiffs.diffs)\n\t\t\t\t\t\t\t\t// Ignore non-text changes as we update the state directly\n\t\t\t\t\t\t\t\t? ctx.change === TextModelDiffChangeReason.textChange\n\t\t\t\t\t\t\t\t: true;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t(reader) => {\n\t\t\t\t\t\t/** @description Merge Editor Model: Recompute State From Result */\n\t\t\t\t\t\tconst states = this.modifiedBaseRangeResultStates.read(reader);\n\t\t\t\t\t\tif (!this.isUpToDate.read(reader)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst resultDiffs = this.resultTextModelDiffs.diffs.read(reader);\n\t\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\t\t/** @description Merge Editor Model: Recompute State */\n\n\t\t\t\t\t\t\tthis.updateBaseRangeAcceptedState(resultDiffs, states, tx);\n\n\t\t\t\t\t\t\tif (shouldRecomputeHandledFromAccepted) {\n\t\t\t\t\t\t\t\tshouldRecomputeHandledFromAccepted = false;\n\t\t\t\t\t\t\t\tfor (const [_range, observableState] of states) {\n\t\t\t\t\t\t\t\t\tconst state = observableState.accepted.get();\n\t\t\t\t\t\t\t\t\tconst handled = !(state.kind === ModifiedBaseRangeStateKind.base || state.kind === ModifiedBaseRangeStateKind.unrecognized);\n\t\t\t\t\t\t\t\t\tobservableState.handledInput1.set(handled, tx);\n\t\t\t\t\t\t\t\t\tobservableState.handledInput2.set(handled, tx);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tif (this.options.resetResult) {\n\t\t\tawait this.reset();\n\t\t}\n\t}\n\n\tpublic async reset(): Promise<void> {\n\t\tawait waitForState(this.inputDiffComputingState, state => state === MergeEditorModelState.upToDate);\n\t\tconst states = this.modifiedBaseRangeResultStates.get();\n\n\t\ttransaction(tx => {\n\t\t\t/** @description Set initial state */\n\n\t\t\tfor (const [range, state] of states) {\n\t\t\t\tlet newState: ModifiedBaseRangeState;\n\t\t\t\tlet handled = false;\n\t\t\t\tif (range.input1Diffs.length === 0) {\n\t\t\t\t\tnewState = ModifiedBaseRangeState.base.withInputValue(2, true);\n\t\t\t\t\thandled = true;\n\t\t\t\t} else if (range.input2Diffs.length === 0) {\n\t\t\t\t\tnewState = ModifiedBaseRangeState.base.withInputValue(1, true);\n\t\t\t\t\thandled = true;\n\t\t\t\t} else if (range.isEqualChange) {\n\t\t\t\t\tnewState = ModifiedBaseRangeState.base.withInputValue(1, true);\n\t\t\t\t\thandled = true;\n\t\t\t\t} else {\n\t\t\t\t\tnewState = ModifiedBaseRangeState.base;\n\t\t\t\t\thandled = false;\n\t\t\t\t}\n\n\t\t\t\tstate.accepted.set(newState, tx);\n\t\t\t\tstate.computedFromDiffing = false;\n\t\t\t\tstate.previousNonDiffingState = undefined;\n\t\t\t\tstate.handledInput1.set(handled, tx);\n\t\t\t\tstate.handledInput2.set(handled, tx);\n\t\t\t}\n\n\t\t\tthis.resultTextModel.pushEditOperations(null, [{\n\t\t\t\trange: new Range(1, 1, Number.MAX_SAFE_INTEGER, 1),\n\t\t\t\ttext: this.computeAutoMergedResult()\n\t\t\t}], () => null);\n\t\t});\n\t}\n\n\tprivate computeAutoMergedResult(): string {\n\t\tconst baseRanges = this.modifiedBaseRanges.get();\n\n\t\tconst baseLines = this.base.getLinesContent();\n\t\tconst input1Lines = this.input1.textModel.getLinesContent();\n\t\tconst input2Lines = this.input2.textModel.getLinesContent();\n\n\t\tconst resultLines: string[] = [];\n\t\tfunction appendLinesToResult(source: string[], lineRange: LineRange) {\n\t\t\tfor (let i = lineRange.startLineNumber; i < lineRange.endLineNumberExclusive; i++) {\n\t\t\t\tresultLines.push(source[i - 1]);\n\t\t\t}\n\t\t}\n\n\t\tlet baseStartLineNumber = 1;\n\n\t\tfor (const baseRange of baseRanges) {\n\t\t\tappendLinesToResult(baseLines, LineRange.fromLineNumbers(baseStartLineNumber, baseRange.baseRange.startLineNumber));\n\t\t\tbaseStartLineNumber = baseRange.baseRange.endLineNumberExclusive;\n\n\t\t\tif (baseRange.input1Diffs.length === 0) {\n\t\t\t\tappendLinesToResult(input2Lines, baseRange.input2Range);\n\t\t\t} else if (baseRange.input2Diffs.length === 0) {\n\t\t\t\tappendLinesToResult(input1Lines, baseRange.input1Range);\n\t\t\t} else if (baseRange.isEqualChange) {\n\t\t\t\tappendLinesToResult(input1Lines, baseRange.input1Range);\n\t\t\t} else {\n\t\t\t\tappendLinesToResult(baseLines, baseRange.baseRange);\n\t\t\t}\n\t\t}\n\n\t\tappendLinesToResult(baseLines, LineRange.fromLineNumbers(baseStartLineNumber, baseLines.length + 1));\n\n\t\treturn resultLines.join(this.resultTextModel.getEOL());\n\t}\n\n\tpublic hasBaseRange(baseRange: ModifiedBaseRange): boolean {\n\t\treturn this.modifiedBaseRangeResultStates.get().has(baseRange);\n\t}\n\n\tpublic readonly baseInput1Diffs = this.input1TextModelDiffs.diffs;\n\n\tpublic readonly baseInput2Diffs = this.input2TextModelDiffs.diffs;\n\tpublic readonly baseResultDiffs = this.resultTextModelDiffs.diffs;\n\tpublic get isApplyingEditInResult(): boolean { return this.resultTextModelDiffs.isApplyingChange; }\n\tpublic readonly input1ResultMapping = derived(this, reader => {\n\t\treturn this.getInputResultMapping(\n\t\t\tthis.baseInput1Diffs.read(reader),\n\t\t\tthis.baseResultDiffs.read(reader),\n\t\t\tthis.input1.textModel.getLineCount(),\n\t\t);\n\t});\n\n\tpublic readonly resultInput1Mapping = derived(this, reader => this.input1ResultMapping.read(reader).reverse());\n\n\tpublic readonly input2ResultMapping = derived(this, reader => {\n\t\treturn this.getInputResultMapping(\n\t\t\tthis.baseInput2Diffs.read(reader),\n\t\t\tthis.baseResultDiffs.read(reader),\n\t\t\tthis.input2.textModel.getLineCount(),\n\t\t);\n\t});\n\n\tpublic readonly resultInput2Mapping = derived(this, reader => this.input2ResultMapping.read(reader).reverse());\n\n\tprivate getInputResultMapping(inputLinesDiffs: DetailedLineRangeMapping[], resultDiffs: DetailedLineRangeMapping[], inputLineCount: number) {\n\t\tconst map = DocumentLineRangeMap.betweenOutputs(inputLinesDiffs, resultDiffs, inputLineCount);\n\t\treturn new DocumentLineRangeMap(\n\t\t\tmap.lineRangeMappings.map((m) =>\n\t\t\t\tm.inputRange.isEmpty || m.outputRange.isEmpty\n\t\t\t\t\t? new LineRangeMapping(\n\t\t\t\t\t\t// We can do this because two adjacent diffs have one line in between.\n\t\t\t\t\t\tm.inputRange.deltaStart(-1),\n\t\t\t\t\t\tm.outputRange.deltaStart(-1)\n\t\t\t\t\t)\n\t\t\t\t\t: m\n\t\t\t),\n\t\t\tmap.inputLineCount\n\t\t);\n\t}\n\n\tpublic readonly baseResultMapping = derived(this, reader => {\n\t\tconst map = new DocumentLineRangeMap(this.baseResultDiffs.read(reader), -1);\n\t\treturn new DocumentLineRangeMap(\n\t\t\tmap.lineRangeMappings.map((m) =>\n\t\t\t\tm.inputRange.isEmpty || m.outputRange.isEmpty\n\t\t\t\t\t? new LineRangeMapping(\n\t\t\t\t\t\t// We can do this because two adjacent diffs have one line in between.\n\t\t\t\t\t\tm.inputRange.deltaStart(-1),\n\t\t\t\t\t\tm.outputRange.deltaStart(-1)\n\t\t\t\t\t)\n\t\t\t\t\t: m\n\t\t\t),\n\t\t\tmap.inputLineCount\n\t\t);\n\t});\n\n\tpublic readonly resultBaseMapping = derived(this, reader => this.baseResultMapping.read(reader).reverse());\n\n\tpublic translateInputRangeToBase(input: 1 | 2, range: Range): Range {\n\t\tconst baseInputDiffs = input === 1 ? this.baseInput1Diffs.get() : this.baseInput2Diffs.get();\n\t\tconst map = new DocumentRangeMap(baseInputDiffs.flatMap(d => d.rangeMappings), 0).reverse();\n\t\treturn map.projectRange(range).outputRange;\n\t}\n\n\tpublic translateBaseRangeToInput(input: 1 | 2, range: Range): Range {\n\t\tconst baseInputDiffs = input === 1 ? this.baseInput1Diffs.get() : this.baseInput2Diffs.get();\n\t\tconst map = new DocumentRangeMap(baseInputDiffs.flatMap(d => d.rangeMappings), 0);\n\t\treturn map.projectRange(range).outputRange;\n\t}\n\n\tpublic getLineRangeInResult(baseRange: LineRange, reader?: IReader): LineRange {\n\t\treturn this.resultTextModelDiffs.getResultLineRange(baseRange, reader);\n\t}\n\n\tpublic translateResultRangeToBase(range: Range): Range {\n\t\tconst map = new DocumentRangeMap(this.baseResultDiffs.get().flatMap(d => d.rangeMappings), 0).reverse();\n\t\treturn map.projectRange(range).outputRange;\n\t}\n\n\tpublic translateBaseRangeToResult(range: Range): Range {\n\t\tconst map = new DocumentRangeMap(this.baseResultDiffs.get().flatMap(d => d.rangeMappings), 0);\n\t\treturn map.projectRange(range).outputRange;\n\t}\n\n\tpublic findModifiedBaseRangesInRange(rangeInBase: LineRange): ModifiedBaseRange[] {\n\t\t// TODO use binary search\n\t\treturn this.modifiedBaseRanges.get().filter(r => r.baseRange.intersects(rangeInBase));\n\t}\n\n\tpublic readonly diffComputingState = derived(this, reader => {\n\t\tconst states = [\n\t\t\tthis.input1TextModelDiffs,\n\t\t\tthis.input2TextModelDiffs,\n\t\t\tthis.resultTextModelDiffs,\n\t\t].map((s) => s.state.read(reader));\n\n\t\tif (states.some((s) => s === TextModelDiffState.initializing)) {\n\t\t\treturn MergeEditorModelState.initializing;\n\t\t}\n\t\tif (states.some((s) => s === TextModelDiffState.updating)) {\n\t\t\treturn MergeEditorModelState.updating;\n\t\t}\n\t\treturn MergeEditorModelState.upToDate;\n\t});\n\n\tpublic readonly inputDiffComputingState = derived(this, reader => {\n\t\tconst states = [\n\t\t\tthis.input1TextModelDiffs,\n\t\t\tthis.input2TextModelDiffs,\n\t\t].map((s) => s.state.read(reader));\n\n\t\tif (states.some((s) => s === TextModelDiffState.initializing)) {\n\t\t\treturn MergeEditorModelState.initializing;\n\t\t}\n\t\tif (states.some((s) => s === TextModelDiffState.updating)) {\n\t\t\treturn MergeEditorModelState.updating;\n\t\t}\n\t\treturn MergeEditorModelState.upToDate;\n\t});\n\n\tpublic readonly isUpToDate = derived(this, reader => this.diffComputingState.read(reader) === MergeEditorModelState.upToDate);\n\n\tpublic readonly onInitialized = waitForState(this.diffComputingState, state => state === MergeEditorModelState.upToDate).then(() => { });\n\n\tprivate firstRun = true;\n\tprivate updateBaseRangeAcceptedState(resultDiffs: DetailedLineRangeMapping[], states: Map<ModifiedBaseRange, ModifiedBaseRangeData>, tx: ITransaction): void {\n\t\tconst baseRangeWithStoreAndTouchingDiffs = leftJoin(\n\t\t\tstates,\n\t\t\tresultDiffs,\n\t\t\t(baseRange, diff) =>\n\t\t\t\tbaseRange[0].baseRange.touches(diff.inputRange)\n\t\t\t\t\t? CompareResult.neitherLessOrGreaterThan\n\t\t\t\t\t: LineRange.compareByStart(\n\t\t\t\t\t\tbaseRange[0].baseRange,\n\t\t\t\t\t\tdiff.inputRange\n\t\t\t\t\t)\n\t\t);\n\n\t\tfor (const row of baseRangeWithStoreAndTouchingDiffs) {\n\t\t\tconst newState = this.computeState(row.left[0], row.rights);\n\t\t\tconst data = row.left[1];\n\t\t\tconst oldState = data.accepted.get();\n\t\t\tif (!oldState.equals(newState)) {\n\t\t\t\tif (!this.firstRun && !data.computedFromDiffing) {\n\t\t\t\t\t// Don't set this on the first run - the first run might be used to restore state.\n\t\t\t\t\tdata.computedFromDiffing = true;\n\t\t\t\t\tdata.previousNonDiffingState = oldState;\n\t\t\t\t}\n\t\t\t\tdata.accepted.set(newState, tx);\n\t\t\t}\n\t\t}\n\n\t\tif (this.firstRun) {\n\t\t\tthis.firstRun = false;\n\t\t}\n\t}\n\n\tprivate computeState(baseRange: ModifiedBaseRange, conflictingDiffs: DetailedLineRangeMapping[]): ModifiedBaseRangeState {\n\t\tif (conflictingDiffs.length === 0) {\n\t\t\treturn ModifiedBaseRangeState.base;\n\t\t}\n\t\tconst conflictingEdits = conflictingDiffs.map((d) => d.getLineEdit());\n\n\t\tfunction editsAgreeWithDiffs(diffs: readonly DetailedLineRangeMapping[]): boolean {\n\t\t\treturn equals(\n\t\t\t\tconflictingEdits,\n\t\t\t\tdiffs.map((d) => d.getLineEdit()),\n\t\t\t\t(a, b) => a.equals(b)\n\t\t\t);\n\t\t}\n\n\t\tif (editsAgreeWithDiffs(baseRange.input1Diffs)) {\n\t\t\treturn ModifiedBaseRangeState.base.withInputValue(1, true);\n\t\t}\n\t\tif (editsAgreeWithDiffs(baseRange.input2Diffs)) {\n\t\t\treturn ModifiedBaseRangeState.base.withInputValue(2, true);\n\t\t}\n\n\t\tconst states = [\n\t\t\tModifiedBaseRangeState.base.withInputValue(1, true).withInputValue(2, true, true),\n\t\t\tModifiedBaseRangeState.base.withInputValue(2, true).withInputValue(1, true, true),\n\t\t\tModifiedBaseRangeState.base.withInputValue(1, true).withInputValue(2, true, false),\n\t\t\tModifiedBaseRangeState.base.withInputValue(2, true).withInputValue(1, true, false),\n\t\t];\n\n\t\tfor (const s of states) {\n\t\t\tconst { edit } = baseRange.getEditForBase(s);\n\t\t\tif (edit) {\n\t\t\t\tconst resultRange = this.resultTextModelDiffs.getResultLineRange(baseRange.baseRange);\n\t\t\t\tconst existingLines = resultRange.getLines(this.resultTextModel);\n\n\t\t\t\tif (equals(edit.newLines, existingLines, (a, b) => a === b)) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ModifiedBaseRangeState.unrecognized;\n\t}\n\n\tpublic getState(baseRange: ModifiedBaseRange): IObservable<ModifiedBaseRangeState> {\n\t\tconst existingState = this.modifiedBaseRangeResultStates.get().get(baseRange);\n\t\tif (!existingState) {\n\t\t\tthrow new BugIndicatingError('object must be from this instance');\n\t\t}\n\t\treturn existingState.accepted;\n\t}\n\n\tpublic setState(\n\t\tbaseRange: ModifiedBaseRange,\n\t\tstate: ModifiedBaseRangeState,\n\t\t_markInputAsHandled: boolean | InputNumber,\n\t\ttx: ITransaction,\n\t\t_pushStackElement: boolean = false\n\t): void {\n\t\tif (!this.isUpToDate.get()) {\n\t\t\tthrow new BugIndicatingError('Cannot set state while updating');\n\t\t}\n\n\t\tconst existingState = this.modifiedBaseRangeResultStates.get().get(baseRange);\n\t\tif (!existingState) {\n\t\t\tthrow new BugIndicatingError('object must be from this instance');\n\t\t}\n\n\t\tconst conflictingDiffs = this.resultTextModelDiffs.findTouchingDiffs(\n\t\t\tbaseRange.baseRange\n\t\t);\n\t\tconst group = new UndoRedoGroup();\n\t\tif (conflictingDiffs) {\n\t\t\tthis.resultTextModelDiffs.removeDiffs(conflictingDiffs, tx, group);\n\t\t}\n\n\t\tconst { edit, effectiveState } = baseRange.getEditForBase(state);\n\n\t\texistingState.accepted.set(effectiveState, tx);\n\t\texistingState.previousNonDiffingState = undefined;\n\t\texistingState.computedFromDiffing = false;\n\n\t\tconst input1Handled = existingState.handledInput1.get();\n\t\tconst input2Handled = existingState.handledInput2.get();\n\n\t\tif (!input1Handled || !input2Handled) {\n\t\t\tthis.undoRedoService.pushElement(\n\t\t\t\tnew MarkAsHandledUndoRedoElement(this.resultTextModel.uri, new WeakRef(this), new WeakRef(existingState), input1Handled, input2Handled),\n\t\t\t\tgroup\n\t\t\t);\n\t\t}\n\n\t\tif (edit) {\n\t\t\tthis.resultTextModel.pushStackElement();\n\t\t\tthis.resultTextModelDiffs.applyEditRelativeToOriginal(edit, tx, group);\n\t\t\tthis.resultTextModel.pushStackElement();\n\t\t}\n\n\t\t// always set conflict as handled\n\t\texistingState.handledInput1.set(true, tx);\n\t\texistingState.handledInput2.set(true, tx);\n\t}\n\n\tpublic resetDirtyConflictsToBase(): void {\n\t\ttransaction(tx => {\n\t\t\t/** @description Reset Unknown Base Range States */\n\t\t\tthis.resultTextModel.pushStackElement();\n\t\t\tfor (const range of this.modifiedBaseRanges.get()) {\n\t\t\t\tif (this.getState(range).get().kind === ModifiedBaseRangeStateKind.unrecognized) {\n\t\t\t\t\tthis.setState(range, ModifiedBaseRangeState.base, false, tx, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.resultTextModel.pushStackElement();\n\t\t});\n\t}\n\n\tpublic isHandled(baseRange: ModifiedBaseRange): IObservable<boolean> {\n\t\treturn this.modifiedBaseRangeResultStates.get().get(baseRange)!.handled;\n\t}\n\n\tpublic isInputHandled(baseRange: ModifiedBaseRange, inputNumber: InputNumber): IObservable<boolean> {\n\t\tconst state = this.modifiedBaseRangeResultStates.get().get(baseRange)!;\n\t\treturn inputNumber === 1 ? state.handledInput1 : state.handledInput2;\n\t}\n\n\tpublic setInputHandled(baseRange: ModifiedBaseRange, inputNumber: InputNumber, handled: boolean, tx: ITransaction): void {\n\t\tconst state = this.modifiedBaseRangeResultStates.get().get(baseRange)!;\n\t\tif (state.handled.get() === handled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataRef = new WeakRef(ModifiedBaseRangeData);\n\t\tconst modelRef = new WeakRef(this);\n\n\t\tthis.undoRedoService.pushElement({\n\t\t\ttype: UndoRedoElementType.Resource,\n\t\t\tresource: this.resultTextModel.uri,\n\t\t\tcode: 'setInputHandled',\n\t\t\tlabel: localize('setInputHandled', \"Set Input Handled\"),\n\t\t\tredo() {\n\t\t\t\tconst model = modelRef.deref();\n\t\t\t\tconst data = dataRef.deref();\n\t\t\t\tif (model && !model.isDisposed() && data) {\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\tif (inputNumber === 1) {\n\t\t\t\t\t\t\tstate.handledInput1.set(handled, tx);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.handledInput2.set(handled, tx);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tundo() {\n\t\t\t\tconst model = modelRef.deref();\n\t\t\t\tconst data = dataRef.deref();\n\t\t\t\tif (model && !model.isDisposed() && data) {\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\tif (inputNumber === 1) {\n\t\t\t\t\t\t\tstate.handledInput1.set(!handled, tx);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.handledInput2.set(!handled, tx);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tif (inputNumber === 1) {\n\t\t\tstate.handledInput1.set(handled, tx);\n\t\t} else {\n\t\t\tstate.handledInput2.set(handled, tx);\n\t\t}\n\t}\n\n\tpublic setHandled(baseRange: ModifiedBaseRange, handled: boolean, tx: ITransaction): void {\n\t\tconst state = this.modifiedBaseRangeResultStates.get().get(baseRange)!;\n\t\tif (state.handled.get() === handled) {\n\t\t\treturn;\n\t\t}\n\n\t\tstate.handledInput1.set(handled, tx);\n\t\tstate.handledInput2.set(handled, tx);\n\t}\n\n\tpublic readonly unhandledConflictsCount = derived(this, reader => {\n\t\tconst map = this.modifiedBaseRangeResultStates.read(reader);\n\t\tlet unhandledCount = 0;\n\t\tfor (const [_key, value] of map) {\n\t\t\tif (!value.handled.read(reader)) {\n\t\t\t\tunhandledCount++;\n\t\t\t}\n\t\t}\n\t\treturn unhandledCount;\n\t});\n\n\tpublic readonly hasUnhandledConflicts = this.unhandledConflictsCount.map(value => /** @description hasUnhandledConflicts */ value > 0);\n\n\tpublic setLanguageId(languageId: string, source?: string): void {\n\t\tconst language = this.languageService.createById(languageId);\n\t\tthis.base.setLanguage(language, source);\n\t\tthis.input1.textModel.setLanguage(language, source);\n\t\tthis.input2.textModel.setLanguage(language, source);\n\t\tthis.resultTextModel.setLanguage(language, source);\n\t}\n\n\tpublic getInitialResultValue(): string {\n\t\tconst chunks: string[] = [];\n\t\twhile (true) {\n\t\t\tconst chunk = this.resultSnapshot.read();\n\t\t\tif (chunk === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchunks.push(chunk);\n\t\t}\n\t\treturn chunks.join();\n\t}\n\n\tpublic async getResultValueWithConflictMarkers(): Promise<string> {\n\t\tawait waitForState(this.diffComputingState, state => state === MergeEditorModelState.upToDate);\n\n\t\tif (this.unhandledConflictsCount.get() === 0) {\n\t\t\treturn this.resultTextModel.getValue();\n\t\t}\n\n\t\tconst resultLines = this.resultTextModel.getLinesContent();\n\t\tconst input1Lines = this.input1.textModel.getLinesContent();\n\t\tconst input2Lines = this.input2.textModel.getLinesContent();\n\n\t\tconst states = this.modifiedBaseRangeResultStates.get();\n\n\t\tconst outputLines: string[] = [];\n\t\tfunction appendLinesToResult(source: string[], lineRange: LineRange) {\n\t\t\tfor (let i = lineRange.startLineNumber; i < lineRange.endLineNumberExclusive; i++) {\n\t\t\t\toutputLines.push(source[i - 1]);\n\t\t\t}\n\t\t}\n\n\t\tlet resultStartLineNumber = 1;\n\n\t\tfor (const [range, state] of states) {\n\t\t\tif (state.handled.get()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst resultRange = this.resultTextModelDiffs.getResultLineRange(range.baseRange);\n\n\t\t\tappendLinesToResult(resultLines, LineRange.fromLineNumbers(resultStartLineNumber, Math.max(resultStartLineNumber, resultRange.startLineNumber)));\n\t\t\tresultStartLineNumber = resultRange.endLineNumberExclusive;\n\n\t\t\toutputLines.push('<<<<<<<');\n\t\t\tif (state.accepted.get().kind === ModifiedBaseRangeStateKind.unrecognized) {\n\t\t\t\t// to prevent loss of data, use modified result as \"ours\"\n\t\t\t\tappendLinesToResult(resultLines, resultRange);\n\t\t\t} else {\n\t\t\t\tappendLinesToResult(input1Lines, range.input1Range);\n\t\t\t}\n\t\t\toutputLines.push('=======');\n\t\t\tappendLinesToResult(input2Lines, range.input2Range);\n\t\t\toutputLines.push('>>>>>>>');\n\t\t}\n\n\t\tappendLinesToResult(resultLines, LineRange.fromLineNumbers(resultStartLineNumber, resultLines.length + 1));\n\t\treturn outputLines.join('\\n');\n\t}\n\n\tpublic get conflictCount(): number {\n\t\treturn arrayCount(this.modifiedBaseRanges.get(), r => r.isConflicting);\n\t}\n\tpublic get combinableConflictCount(): number {\n\t\treturn arrayCount(this.modifiedBaseRanges.get(), r => r.isConflicting && r.canBeCombined);\n\t}\n\n\tpublic get conflictsResolvedWithBase(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]) =>\n\t\t\t\tr.isConflicting &&\n\t\t\t\ts.accepted.get().kind === ModifiedBaseRangeStateKind.base\n\t\t);\n\t}\n\tpublic get conflictsResolvedWithInput1(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]) =>\n\t\t\t\tr.isConflicting &&\n\t\t\t\ts.accepted.get().kind === ModifiedBaseRangeStateKind.input1\n\t\t);\n\t}\n\tpublic get conflictsResolvedWithInput2(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]) =>\n\t\t\t\tr.isConflicting &&\n\t\t\t\ts.accepted.get().kind === ModifiedBaseRangeStateKind.input2\n\t\t);\n\t}\n\tpublic get conflictsResolvedWithSmartCombination(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && state.kind === ModifiedBaseRangeStateKind.both && state.smartCombination;\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic get manuallySolvedConflictCountThatEqualNone(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]) =>\n\t\t\t\tr.isConflicting &&\n\t\t\t\ts.accepted.get().kind === ModifiedBaseRangeStateKind.unrecognized\n\t\t);\n\t}\n\tpublic get manuallySolvedConflictCountThatEqualSmartCombine(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && s.computedFromDiffing && state.kind === ModifiedBaseRangeStateKind.both && state.smartCombination;\n\t\t\t}\n\t\t);\n\t}\n\tpublic get manuallySolvedConflictCountThatEqualInput1(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && s.computedFromDiffing && state.kind === ModifiedBaseRangeStateKind.input1;\n\t\t\t}\n\t\t);\n\t}\n\tpublic get manuallySolvedConflictCountThatEqualInput2(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && s.computedFromDiffing && state.kind === ModifiedBaseRangeStateKind.input2;\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic get manuallySolvedConflictCountThatEqualNoneAndStartedWithBase(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && state.kind === ModifiedBaseRangeStateKind.unrecognized && s.previousNonDiffingState?.kind === ModifiedBaseRangeStateKind.base;\n\t\t\t}\n\t\t);\n\t}\n\tpublic get manuallySolvedConflictCountThatEqualNoneAndStartedWithInput1(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && state.kind === ModifiedBaseRangeStateKind.unrecognized && s.previousNonDiffingState?.kind === ModifiedBaseRangeStateKind.input1;\n\t\t\t}\n\t\t);\n\t}\n\tpublic get manuallySolvedConflictCountThatEqualNoneAndStartedWithInput2(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && state.kind === ModifiedBaseRangeStateKind.unrecognized && s.previousNonDiffingState?.kind === ModifiedBaseRangeStateKind.input2;\n\t\t\t}\n\t\t);\n\t}\n\tpublic get manuallySolvedConflictCountThatEqualNoneAndStartedWithBothNonSmart(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && state.kind === ModifiedBaseRangeStateKind.unrecognized && s.previousNonDiffingState?.kind === ModifiedBaseRangeStateKind.both && !s.previousNonDiffingState?.smartCombination;\n\t\t\t}\n\t\t);\n\t}\n\tpublic get manuallySolvedConflictCountThatEqualNoneAndStartedWithBothSmart(): number {\n\t\treturn arrayCount(\n\t\t\tthis.modifiedBaseRangeResultStates.get().entries(),\n\t\t\t([r, s]: [ModifiedBaseRange, ModifiedBaseRangeData]) => {\n\t\t\t\tconst state = s.accepted.get();\n\t\t\t\treturn r.isConflicting && state.kind === ModifiedBaseRangeStateKind.unrecognized && s.previousNonDiffingState?.kind === ModifiedBaseRangeStateKind.both && s.previousNonDiffingState?.smartCombination;\n\t\t\t}\n\t\t);\n\t}\n}\n\nfunction arrayCount<T>(array: Iterable<T>, predicate: (value: T) => boolean): number {\n\tlet count = 0;\n\tfor (const value of array) {\n\t\tif (predicate(value)) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nclass ModifiedBaseRangeData {\n\tconstructor(private readonly baseRange: ModifiedBaseRange) { }\n\n\tpublic accepted: ISettableObservable<ModifiedBaseRangeState> = observableValue(`BaseRangeState${this.baseRange.baseRange}`, ModifiedBaseRangeState.base);\n\tpublic handledInput1: ISettableObservable<boolean> = observableValue(`BaseRangeHandledState${this.baseRange.baseRange}.Input1`, false);\n\tpublic handledInput2: ISettableObservable<boolean> = observableValue(`BaseRangeHandledState${this.baseRange.baseRange}.Input2`, false);\n\n\tpublic computedFromDiffing = false;\n\tpublic previousNonDiffingState: ModifiedBaseRangeState | undefined = undefined;\n\n\tpublic readonly handled = derived(this, reader => this.handledInput1.read(reader) && this.handledInput2.read(reader));\n}\n\nexport const enum MergeEditorModelState {\n\tinitializing = 1,\n\tupToDate = 2,\n\tupdating = 3,\n}\n\nclass MarkAsHandledUndoRedoElement implements IResourceUndoRedoElement {\n\tpublic readonly code = 'undoMarkAsHandled';\n\tpublic readonly label = localize('undoMarkAsHandled', 'Undo Mark As Handled');\n\n\tpublic readonly type = UndoRedoElementType.Resource;\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tprivate readonly mergeEditorModelRef: WeakRef<MergeEditorModel>,\n\t\tprivate readonly stateRef: WeakRef<ModifiedBaseRangeData>,\n\t\tprivate readonly input1Handled: boolean,\n\t\tprivate readonly input2Handled: boolean,\n\t) { }\n\n\tpublic redo() {\n\t\tconst mergeEditorModel = this.mergeEditorModelRef.deref();\n\t\tif (!mergeEditorModel || mergeEditorModel.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\t\tconst state = this.stateRef.deref();\n\t\tif (!state) { return; }\n\t\ttransaction(tx => {\n\t\t\tstate.handledInput1.set(true, tx);\n\t\t\tstate.handledInput2.set(true, tx);\n\t\t});\n\t}\n\tpublic undo() {\n\t\tconst mergeEditorModel = this.mergeEditorModelRef.deref();\n\t\tif (!mergeEditorModel || mergeEditorModel.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\t\tconst state = this.stateRef.deref();\n\t\tif (!state) { return; }\n\t\ttransaction(tx => {\n\t\t\tstate.handledInput1.set(this.input1Handled, tx);\n\t\t\tstate.handledInput2.set(this.input2Handled, tx);\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["tx", "MergeEditorModelState"]
}
