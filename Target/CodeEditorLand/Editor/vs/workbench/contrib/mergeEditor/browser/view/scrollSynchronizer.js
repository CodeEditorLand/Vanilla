import{Disposable as f}from"../../../../../base/common/lifecycle.js";import{autorunWithStore as w}from"../../../../../base/common/observable.js";import"../../../../../editor/browser/widget/codeEditor/codeEditorWidget.js";import{ScrollType as t}from"../../../../../editor/common/editorCommon.js";import{DocumentLineRangeMap as p}from"../model/mapping.js";import{ReentrancyBarrier as V}from"../../../../../base/common/controlFlow.js";import"./editors/baseCodeEditorView.js";import"./mergeEditor.js";import"./viewModel.js";import"./editors/inputCodeEditorView.js";import"./editors/resultCodeEditorView.js";class F extends f{constructor(r,n,a,u,g,h){super();this.viewModel=r;this.input1View=n;this.input2View=a;this.baseView=u;this.inputResultView=g;this.layout=h;const d=this.updateScrolling=()=>{if(!this.model)return;if(this.input2View.editor.setScrollTop(this.input1View.editor.getScrollTop(),t.Immediate),this.shouldAlignResult)this.inputResultView.editor.setScrollTop(this.input1View.editor.getScrollTop(),t.Immediate);else{const o=this.model.input1ResultMapping.get();this.synchronizeScrolling(this.input1View.editor,this.inputResultView.editor,o)}const e=this.baseView.get();if(e)if(this.shouldAlignBase)this.baseView.get()?.editor.setScrollTop(this.input1View.editor.getScrollTop(),t.Immediate);else{const o=new p(this.model.baseInput1Diffs.get(),-1).reverse();this.synchronizeScrolling(this.input1View.editor,e.editor,o)}};this._store.add(this.input1View.editor.onDidScrollChange(this.reentrancyBarrier.makeExclusiveOrSkip(e=>{e.scrollTopChanged&&d(),e.scrollLeftChanged&&(this.baseView.get()?.editor.setScrollLeft(e.scrollLeft,t.Immediate),this.input2View.editor.setScrollLeft(e.scrollLeft,t.Immediate),this.inputResultView.editor.setScrollLeft(e.scrollLeft,t.Immediate))}))),this._store.add(this.input2View.editor.onDidScrollChange(this.reentrancyBarrier.makeExclusiveOrSkip(e=>{if(this.model){if(e.scrollTopChanged){if(this.input1View.editor.setScrollTop(e.scrollTop,t.Immediate),this.shouldAlignResult)this.inputResultView.editor.setScrollTop(this.input2View.editor.getScrollTop(),t.Immediate);else{const i=this.model.input2ResultMapping.get();this.synchronizeScrolling(this.input2View.editor,this.inputResultView.editor,i)}const o=this.baseView.get();if(o&&this.model)if(this.shouldAlignBase)this.baseView.get()?.editor.setScrollTop(e.scrollTop,t.Immediate);else{const i=new p(this.model.baseInput2Diffs.get(),-1).reverse();this.synchronizeScrolling(this.input2View.editor,o.editor,i)}}e.scrollLeftChanged&&(this.baseView.get()?.editor.setScrollLeft(e.scrollLeft,t.Immediate),this.input1View.editor.setScrollLeft(e.scrollLeft,t.Immediate),this.inputResultView.editor.setScrollLeft(e.scrollLeft,t.Immediate))}}))),this._store.add(this.inputResultView.editor.onDidScrollChange(this.reentrancyBarrier.makeExclusiveOrSkip(e=>{if(e.scrollTopChanged){if(this.shouldAlignResult)this.input1View.editor.setScrollTop(e.scrollTop,t.Immediate),this.input2View.editor.setScrollTop(e.scrollTop,t.Immediate);else{const s=this.model?.resultInput1Mapping.get();this.synchronizeScrolling(this.inputResultView.editor,this.input1View.editor,s);const l=this.model?.resultInput2Mapping.get();this.synchronizeScrolling(this.inputResultView.editor,this.input2View.editor,l)}const o=this.model?.resultBaseMapping.get(),i=this.baseView.get();i&&this.model&&this.synchronizeScrolling(this.inputResultView.editor,i.editor,o)}e.scrollLeftChanged&&(this.baseView.get()?.editor?.setScrollLeft(e.scrollLeft,t.Immediate),this.input1View.editor.setScrollLeft(e.scrollLeft,t.Immediate),this.input2View.editor.setScrollLeft(e.scrollLeft,t.Immediate))}))),this._store.add(w((e,o)=>{const i=this.baseView.read(e);i&&o.add(i.editor.onDidScrollChange(this.reentrancyBarrier.makeExclusiveOrSkip(s=>{if(s.scrollTopChanged){if(!this.model)return;if(this.shouldAlignBase)this.input1View.editor.setScrollTop(s.scrollTop,t.Immediate),this.input2View.editor.setScrollTop(s.scrollTop,t.Immediate);else{const c=new p(this.model.baseInput1Diffs.get(),-1);this.synchronizeScrolling(i.editor,this.input1View.editor,c);const m=new p(this.model.baseInput2Diffs.get(),-1);this.synchronizeScrolling(i.editor,this.input2View.editor,m)}const l=this.model?.baseResultMapping.get();this.synchronizeScrolling(i.editor,this.inputResultView.editor,l)}s.scrollLeftChanged&&(this.inputResultView.editor.setScrollLeft(s.scrollLeft,t.Immediate),this.input1View.editor.setScrollLeft(s.scrollLeft,t.Immediate),this.input2View.editor.setScrollLeft(s.scrollLeft,t.Immediate))})))}))}get model(){return this.viewModel.get()?.model}reentrancyBarrier=new V;updateScrolling;get shouldAlignResult(){return this.layout.get().kind==="columns"}get shouldAlignBase(){return this.layout.get().kind==="mixed"&&!this.layout.get().showBaseAtTop}synchronizeScrolling(r,n,a){if(!a)return;const u=r.getVisibleRanges();if(u.length===0)return;const g=u[0].startLineNumber-1,h=a.project(g),d=h.inputRange,e=h.outputRange,o=n.getTopForLineNumber(e.startLineNumber),i=n.getTopForLineNumber(e.endLineNumberExclusive),s=r.getTopForLineNumber(d.startLineNumber),l=r.getTopForLineNumber(d.endLineNumberExclusive),c=Math.min((r.getScrollTop()-s)/(l-s),1),m=o+(i-o)*c;n.setScrollTop(m,t.Immediate)}}export{F as ScrollSynchronizer};
