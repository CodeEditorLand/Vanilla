{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/lineRange.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Comparator, compareBy, numberComparator } from '../../../../../base/common/arrays.js';\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { Constants } from '../../../../../base/common/uint.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\n\nexport class LineRange {\n\tpublic static readonly compareByStart: Comparator<LineRange> = compareBy(l => l.startLineNumber, numberComparator);\n\n\tpublic static join(ranges: LineRange[]): LineRange | undefined {\n\t\tif (ranges.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet startLineNumber = Number.MAX_SAFE_INTEGER;\n\t\tlet endLineNumber = 0;\n\t\tfor (const range of ranges) {\n\t\t\tstartLineNumber = Math.min(startLineNumber, range.startLineNumber);\n\t\t\tendLineNumber = Math.max(endLineNumber, range.startLineNumber + range.lineCount);\n\t\t}\n\t\treturn new LineRange(startLineNumber, endLineNumber - startLineNumber);\n\t}\n\n\tstatic fromLineNumbers(startLineNumber: number, endExclusiveLineNumber: number): LineRange {\n\t\treturn new LineRange(startLineNumber, endExclusiveLineNumber - startLineNumber);\n\t}\n\n\tconstructor(\n\t\tpublic readonly startLineNumber: number,\n\t\tpublic readonly lineCount: number\n\t) {\n\t\tif (lineCount < 0) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\t}\n\n\tpublic join(other: LineRange): LineRange {\n\t\treturn new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive) - this.startLineNumber);\n\t}\n\n\tpublic get endLineNumberExclusive(): number {\n\t\treturn this.startLineNumber + this.lineCount;\n\t}\n\n\tpublic get isEmpty(): boolean {\n\t\treturn this.lineCount === 0;\n\t}\n\n\t/**\n\t * Returns false if there is at least one line between `this` and `other`.\n\t*/\n\tpublic touches(other: LineRange): boolean {\n\t\treturn (\n\t\t\tthis.endLineNumberExclusive >= other.startLineNumber &&\n\t\t\tother.endLineNumberExclusive >= this.startLineNumber\n\t\t);\n\t}\n\n\tpublic isAfter(range: LineRange): boolean {\n\t\treturn this.startLineNumber >= range.endLineNumberExclusive;\n\t}\n\n\tpublic isBefore(range: LineRange): boolean {\n\t\treturn range.startLineNumber >= this.endLineNumberExclusive;\n\t}\n\n\tpublic delta(lineDelta: number): LineRange {\n\t\treturn new LineRange(this.startLineNumber + lineDelta, this.lineCount);\n\t}\n\n\tpublic toString() {\n\t\treturn `[${this.startLineNumber},${this.endLineNumberExclusive})`;\n\t}\n\n\tpublic equals(originalRange: LineRange) {\n\t\treturn this.startLineNumber === originalRange.startLineNumber && this.lineCount === originalRange.lineCount;\n\t}\n\n\tpublic contains(lineNumber: number): boolean {\n\t\treturn this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n\t}\n\n\tpublic deltaEnd(delta: number): LineRange {\n\t\treturn new LineRange(this.startLineNumber, this.lineCount + delta);\n\t}\n\n\tpublic deltaStart(lineDelta: number): LineRange {\n\t\treturn new LineRange(this.startLineNumber + lineDelta, this.lineCount - lineDelta);\n\t}\n\n\tpublic getLines(model: ITextModel): string[] {\n\t\tconst result = new Array(this.lineCount);\n\t\tfor (let i = 0; i < this.lineCount; i++) {\n\t\t\tresult[i] = model.getLineContent(this.startLineNumber + i);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic containsRange(range: LineRange): boolean {\n\t\treturn this.startLineNumber <= range.startLineNumber && range.endLineNumberExclusive <= this.endLineNumberExclusive;\n\t}\n\n\tpublic toRange(): Range {\n\t\treturn new Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);\n\t}\n\n\tpublic toInclusiveRange(): Range | undefined {\n\t\tif (this.isEmpty) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Constants.MAX_SAFE_SMALL_INTEGER);\n\t}\n\n\tpublic toInclusiveRangeOrEmpty(): Range {\n\t\tif (this.isEmpty) {\n\t\t\treturn new Range(this.startLineNumber, 1, this.startLineNumber, 1);\n\t\t}\n\t\treturn new Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Constants.MAX_SAFE_SMALL_INTEGER);\n\t}\n\n\tintersects(lineRange: LineRange) {\n\t\treturn this.startLineNumber <= lineRange.endLineNumberExclusive\n\t\t\t&& lineRange.startLineNumber <= this.endLineNumberExclusive;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,YAAY,WAAW,wBAAwB;AACxD,SAAS,0BAA0B;AACnC,SAAS,iBAAiB;AAC1B,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAEpB,MAAM,UAAU;AAAA,EAqBtB,YACiB,iBACA,WACf;AAFe;AACA;AAEhB,QAAI,YAAY,GAAG;AAClB,YAAM,IAAI,mBAAmB;AAAA,IAC9B;AAAA,EACD;AAAA,EAvCD,OAWuB;AAAA;AAAA;AAAA,EACtB,OAAuB,iBAAwC,UAAU,OAAK,EAAE,iBAAiB,gBAAgB;AAAA,EAEjH,OAAc,KAAK,QAA4C;AAC9D,QAAI,OAAO,WAAW,GAAG;AACxB,aAAO;AAAA,IACR;AAEA,QAAI,kBAAkB,OAAO;AAC7B,QAAI,gBAAgB;AACpB,eAAW,SAAS,QAAQ;AAC3B,wBAAkB,KAAK,IAAI,iBAAiB,MAAM,eAAe;AACjE,sBAAgB,KAAK,IAAI,eAAe,MAAM,kBAAkB,MAAM,SAAS;AAAA,IAChF;AACA,WAAO,IAAI,UAAU,iBAAiB,gBAAgB,eAAe;AAAA,EACtE;AAAA,EAEA,OAAO,gBAAgB,iBAAyB,wBAA2C;AAC1F,WAAO,IAAI,UAAU,iBAAiB,yBAAyB,eAAe;AAAA,EAC/E;AAAA,EAWO,KAAK,OAA6B;AACxC,WAAO,IAAI,UAAU,KAAK,IAAI,KAAK,iBAAiB,MAAM,eAAe,GAAG,KAAK,IAAI,KAAK,wBAAwB,MAAM,sBAAsB,IAAI,KAAK,eAAe;AAAA,EACvK;AAAA,EAEA,IAAW,yBAAiC;AAC3C,WAAO,KAAK,kBAAkB,KAAK;AAAA,EACpC;AAAA,EAEA,IAAW,UAAmB;AAC7B,WAAO,KAAK,cAAc;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKO,QAAQ,OAA2B;AACzC,WACC,KAAK,0BAA0B,MAAM,mBACrC,MAAM,0BAA0B,KAAK;AAAA,EAEvC;AAAA,EAEO,QAAQ,OAA2B;AACzC,WAAO,KAAK,mBAAmB,MAAM;AAAA,EACtC;AAAA,EAEO,SAAS,OAA2B;AAC1C,WAAO,MAAM,mBAAmB,KAAK;AAAA,EACtC;AAAA,EAEO,MAAM,WAA8B;AAC1C,WAAO,IAAI,UAAU,KAAK,kBAAkB,WAAW,KAAK,SAAS;AAAA,EACtE;AAAA,EAEO,WAAW;AACjB,WAAO,IAAI,KAAK,eAAe,IAAI,KAAK,sBAAsB;AAAA,EAC/D;AAAA,EAEO,OAAO,eAA0B;AACvC,WAAO,KAAK,oBAAoB,cAAc,mBAAmB,KAAK,cAAc,cAAc;AAAA,EACnG;AAAA,EAEO,SAAS,YAA6B;AAC5C,WAAO,KAAK,mBAAmB,cAAc,aAAa,KAAK;AAAA,EAChE;AAAA,EAEO,SAAS,OAA0B;AACzC,WAAO,IAAI,UAAU,KAAK,iBAAiB,KAAK,YAAY,KAAK;AAAA,EAClE;AAAA,EAEO,WAAW,WAA8B;AAC/C,WAAO,IAAI,UAAU,KAAK,kBAAkB,WAAW,KAAK,YAAY,SAAS;AAAA,EAClF;AAAA,EAEO,SAAS,OAA6B;AAC5C,UAAM,SAAS,IAAI,MAAM,KAAK,SAAS;AACvC,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,KAAK;AACxC,aAAO,CAAC,IAAI,MAAM,eAAe,KAAK,kBAAkB,CAAC;AAAA,IAC1D;AACA,WAAO;AAAA,EACR;AAAA,EAEO,cAAc,OAA2B;AAC/C,WAAO,KAAK,mBAAmB,MAAM,mBAAmB,MAAM,0BAA0B,KAAK;AAAA,EAC9F;AAAA,EAEO,UAAiB;AACvB,WAAO,IAAI,MAAM,KAAK,iBAAiB,GAAG,KAAK,wBAAwB,CAAC;AAAA,EACzE;AAAA,EAEO,mBAAsC;AAC5C,QAAI,KAAK,SAAS;AACjB,aAAO;AAAA,IACR;AACA,WAAO,IAAI,MAAM,KAAK,iBAAiB,GAAG,KAAK,yBAAyB,GAAG,UAAU,sBAAsB;AAAA,EAC5G;AAAA,EAEO,0BAAiC;AACvC,QAAI,KAAK,SAAS;AACjB,aAAO,IAAI,MAAM,KAAK,iBAAiB,GAAG,KAAK,iBAAiB,CAAC;AAAA,IAClE;AACA,WAAO,IAAI,MAAM,KAAK,iBAAiB,GAAG,KAAK,yBAAyB,GAAG,UAAU,sBAAsB;AAAA,EAC5G;AAAA,EAEA,WAAW,WAAsB;AAChC,WAAO,KAAK,mBAAmB,UAAU,0BACrC,UAAU,mBAAmB,KAAK;AAAA,EACvC;AACD;",
  "names": []
}
