{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/view/viewZones.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $ } from \"../../../../../base/browser/dom.js\";\nimport { CompareResult } from \"../../../../../base/common/arrays.js\";\nimport type { DisposableStore } from \"../../../../../base/common/lifecycle.js\";\nimport type {\n\tIObservable,\n\tIReader,\n} from \"../../../../../base/common/observable.js\";\nimport type {\n\tICodeEditor,\n\tIViewZoneChangeAccessor,\n} from \"../../../../../editor/browser/editorBrowser.js\";\nimport { LineRange } from \"../model/lineRange.js\";\nimport type { DetailedLineRangeMapping } from \"../model/mapping.js\";\nimport type { ModifiedBaseRange } from \"../model/modifiedBaseRange.js\";\nimport { join } from \"../utils.js\";\nimport {\n\tActionsSource,\n\tConflictActionsFactory,\n\ttype IContentWidgetAction,\n} from \"./conflictActions.js\";\nimport { getAlignments } from \"./lineAlignment.js\";\nimport type { MergeEditorViewModel } from \"./viewModel.js\";\n\nexport class ViewZoneComputer {\n\tprivate readonly conflictActionsFactoryInput1 = new ConflictActionsFactory(\n\t\tthis.input1Editor,\n\t);\n\tprivate readonly conflictActionsFactoryInput2 = new ConflictActionsFactory(\n\t\tthis.input2Editor,\n\t);\n\tprivate readonly conflictActionsFactoryResult = new ConflictActionsFactory(\n\t\tthis.resultEditor,\n\t);\n\n\tconstructor(\n\t\tprivate readonly input1Editor: ICodeEditor,\n\t\tprivate readonly input2Editor: ICodeEditor,\n\t\tprivate readonly resultEditor: ICodeEditor,\n\t) {}\n\n\tpublic computeViewZones(\n\t\treader: IReader,\n\t\tviewModel: MergeEditorViewModel,\n\t\toptions: {\n\t\t\tshouldAlignResult: boolean;\n\t\t\tshouldAlignBase: boolean;\n\t\t\tcodeLensesVisible: boolean;\n\t\t\tshowNonConflictingChanges: boolean;\n\t\t},\n\t): MergeEditorViewZones {\n\t\tlet input1LinesAdded = 0;\n\t\tlet input2LinesAdded = 0;\n\t\tlet baseLinesAdded = 0;\n\t\tlet resultLinesAdded = 0;\n\n\t\tconst input1ViewZones: MergeEditorViewZone[] = [];\n\t\tconst input2ViewZones: MergeEditorViewZone[] = [];\n\t\tconst baseViewZones: MergeEditorViewZone[] = [];\n\t\tconst resultViewZones: MergeEditorViewZone[] = [];\n\n\t\tconst model = viewModel.model;\n\n\t\tconst resultDiffs = model.baseResultDiffs.read(reader);\n\t\tconst baseRangeWithStoreAndTouchingDiffs = join(\n\t\t\tmodel.modifiedBaseRanges.read(reader),\n\t\t\tresultDiffs,\n\t\t\t(baseRange, diff) =>\n\t\t\t\tbaseRange.baseRange.touches(diff.inputRange)\n\t\t\t\t\t? CompareResult.neitherLessOrGreaterThan\n\t\t\t\t\t: LineRange.compareByStart(\n\t\t\t\t\t\t\tbaseRange.baseRange,\n\t\t\t\t\t\t\tdiff.inputRange,\n\t\t\t\t\t\t),\n\t\t);\n\n\t\tconst shouldShowCodeLenses = options.codeLensesVisible;\n\t\tconst showNonConflictingChanges = options.showNonConflictingChanges;\n\n\t\tlet lastModifiedBaseRange: ModifiedBaseRange | undefined;\n\t\tlet lastBaseResultDiff: DetailedLineRangeMapping | undefined;\n\t\tfor (const m of baseRangeWithStoreAndTouchingDiffs) {\n\t\t\tif (\n\t\t\t\tshouldShowCodeLenses &&\n\t\t\t\tm.left &&\n\t\t\t\t(m.left.isConflicting ||\n\t\t\t\t\tshowNonConflictingChanges ||\n\t\t\t\t\t!model.isHandled(m.left).read(reader))\n\t\t\t) {\n\t\t\t\tconst actions = new ActionsSource(viewModel, m.left);\n\t\t\t\tif (\n\t\t\t\t\toptions.shouldAlignResult ||\n\t\t\t\t\t!actions.inputIsEmpty.read(reader)\n\t\t\t\t) {\n\t\t\t\t\tinput1ViewZones.push(\n\t\t\t\t\t\tnew CommandViewZone(\n\t\t\t\t\t\t\tthis.conflictActionsFactoryInput1,\n\t\t\t\t\t\t\tm.left.input1Range.startLineNumber - 1,\n\t\t\t\t\t\t\tactions.itemsInput1,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tinput2ViewZones.push(\n\t\t\t\t\t\tnew CommandViewZone(\n\t\t\t\t\t\t\tthis.conflictActionsFactoryInput2,\n\t\t\t\t\t\t\tm.left.input2Range.startLineNumber - 1,\n\t\t\t\t\t\t\tactions.itemsInput2,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tif (options.shouldAlignBase) {\n\t\t\t\t\t\tbaseViewZones.push(\n\t\t\t\t\t\t\tnew Placeholder(\n\t\t\t\t\t\t\t\tm.left.baseRange.startLineNumber - 1,\n\t\t\t\t\t\t\t\t16,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst afterLineNumber =\n\t\t\t\t\tm.left.baseRange.startLineNumber +\n\t\t\t\t\t(lastBaseResultDiff?.resultingDeltaFromOriginalToModified ??\n\t\t\t\t\t\t0) -\n\t\t\t\t\t1;\n\t\t\t\tresultViewZones.push(\n\t\t\t\t\tnew CommandViewZone(\n\t\t\t\t\t\tthis.conflictActionsFactoryResult,\n\t\t\t\t\t\tafterLineNumber,\n\t\t\t\t\t\tactions.resultItems,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst lastResultDiff = m.rights.at(-1)!;\n\t\t\tif (lastResultDiff) {\n\t\t\t\tlastBaseResultDiff = lastResultDiff;\n\t\t\t}\n\t\t\tlet alignedLines: LineAlignment[];\n\t\t\tif (m.left) {\n\t\t\t\talignedLines = getAlignments(m.left).map((a) => ({\n\t\t\t\t\tinput1Line: a[0],\n\t\t\t\t\tbaseLine: a[1],\n\t\t\t\t\tinput2Line: a[2],\n\t\t\t\t\tresultLine: undefined,\n\t\t\t\t}));\n\n\t\t\t\tlastModifiedBaseRange = m.left;\n\t\t\t\t// This is a total hack.\n\t\t\t\talignedLines[alignedLines.length - 1].resultLine =\n\t\t\t\t\tm.left.baseRange.endLineNumberExclusive +\n\t\t\t\t\t(lastBaseResultDiff\n\t\t\t\t\t\t? lastBaseResultDiff.resultingDeltaFromOriginalToModified\n\t\t\t\t\t\t: 0);\n\t\t\t} else {\n\t\t\t\talignedLines = [\n\t\t\t\t\t{\n\t\t\t\t\t\tbaseLine:\n\t\t\t\t\t\t\tlastResultDiff.inputRange.endLineNumberExclusive,\n\t\t\t\t\t\tinput1Line:\n\t\t\t\t\t\t\tlastResultDiff.inputRange.endLineNumberExclusive +\n\t\t\t\t\t\t\t(lastModifiedBaseRange\n\t\t\t\t\t\t\t\t? lastModifiedBaseRange.input1Range\n\t\t\t\t\t\t\t\t\t\t.endLineNumberExclusive -\n\t\t\t\t\t\t\t\t\tlastModifiedBaseRange.baseRange\n\t\t\t\t\t\t\t\t\t\t.endLineNumberExclusive\n\t\t\t\t\t\t\t\t: 0),\n\t\t\t\t\t\tinput2Line:\n\t\t\t\t\t\t\tlastResultDiff.inputRange.endLineNumberExclusive +\n\t\t\t\t\t\t\t(lastModifiedBaseRange\n\t\t\t\t\t\t\t\t? lastModifiedBaseRange.input2Range\n\t\t\t\t\t\t\t\t\t\t.endLineNumberExclusive -\n\t\t\t\t\t\t\t\t\tlastModifiedBaseRange.baseRange\n\t\t\t\t\t\t\t\t\t\t.endLineNumberExclusive\n\t\t\t\t\t\t\t\t: 0),\n\t\t\t\t\t\tresultLine:\n\t\t\t\t\t\t\tlastResultDiff.outputRange.endLineNumberExclusive,\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tfor (const {\n\t\t\t\tinput1Line,\n\t\t\t\tbaseLine,\n\t\t\t\tinput2Line,\n\t\t\t\tresultLine,\n\t\t\t} of alignedLines) {\n\t\t\t\tif (\n\t\t\t\t\t!options.shouldAlignBase &&\n\t\t\t\t\t(input1Line === undefined || input2Line === undefined)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst input1Line_ =\n\t\t\t\t\tinput1Line !== undefined\n\t\t\t\t\t\t? input1Line + input1LinesAdded\n\t\t\t\t\t\t: -1;\n\t\t\t\tconst input2Line_ =\n\t\t\t\t\tinput2Line !== undefined\n\t\t\t\t\t\t? input2Line + input2LinesAdded\n\t\t\t\t\t\t: -1;\n\t\t\t\tconst baseLine_ = baseLine + baseLinesAdded;\n\t\t\t\tconst resultLine_ =\n\t\t\t\t\tresultLine !== undefined\n\t\t\t\t\t\t? resultLine + resultLinesAdded\n\t\t\t\t\t\t: -1;\n\n\t\t\t\tconst max = Math.max(\n\t\t\t\t\toptions.shouldAlignBase ? baseLine_ : 0,\n\t\t\t\t\tinput1Line_,\n\t\t\t\t\tinput2Line_,\n\t\t\t\t\toptions.shouldAlignResult ? resultLine_ : 0,\n\t\t\t\t);\n\n\t\t\t\tif (input1Line !== undefined) {\n\t\t\t\t\tconst diffInput1 = max - input1Line_;\n\t\t\t\t\tif (diffInput1 > 0) {\n\t\t\t\t\t\tinput1ViewZones.push(\n\t\t\t\t\t\t\tnew Spacer(input1Line - 1, diffInput1),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tinput1LinesAdded += diffInput1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (input2Line !== undefined) {\n\t\t\t\t\tconst diffInput2 = max - input2Line_;\n\t\t\t\t\tif (diffInput2 > 0) {\n\t\t\t\t\t\tinput2ViewZones.push(\n\t\t\t\t\t\t\tnew Spacer(input2Line - 1, diffInput2),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tinput2LinesAdded += diffInput2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (options.shouldAlignBase) {\n\t\t\t\t\tconst diffBase = max - baseLine_;\n\t\t\t\t\tif (diffBase > 0) {\n\t\t\t\t\t\tbaseViewZones.push(new Spacer(baseLine - 1, diffBase));\n\t\t\t\t\t\tbaseLinesAdded += diffBase;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (options.shouldAlignResult && resultLine !== undefined) {\n\t\t\t\t\tconst diffResult = max - resultLine_;\n\t\t\t\t\tif (diffResult > 0) {\n\t\t\t\t\t\tresultViewZones.push(\n\t\t\t\t\t\t\tnew Spacer(resultLine - 1, diffResult),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresultLinesAdded += diffResult;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new MergeEditorViewZones(\n\t\t\tinput1ViewZones,\n\t\t\tinput2ViewZones,\n\t\t\tbaseViewZones,\n\t\t\tresultViewZones,\n\t\t);\n\t}\n}\n\ninterface LineAlignment {\n\tbaseLine: number;\n\tinput1Line?: number;\n\tinput2Line?: number;\n\tresultLine?: number;\n}\n\nexport class MergeEditorViewZones {\n\tconstructor(\n\t\tpublic readonly input1ViewZones: readonly MergeEditorViewZone[],\n\t\tpublic readonly input2ViewZones: readonly MergeEditorViewZone[],\n\t\tpublic readonly baseViewZones: readonly MergeEditorViewZone[],\n\t\tpublic readonly resultViewZones: readonly MergeEditorViewZone[],\n\t) {}\n}\n\n/**\n * This is an abstract class to create various editor view zones.\n */\nexport abstract class MergeEditorViewZone {\n\tabstract create(\n\t\tviewZoneChangeAccessor: IViewZoneChangeAccessor,\n\t\tviewZoneIdsToCleanUp: string[],\n\t\tdisposableStore: DisposableStore,\n\t): void;\n}\n\nclass Spacer extends MergeEditorViewZone {\n\tconstructor(\n\t\tprivate readonly afterLineNumber: number,\n\t\tprivate readonly heightInLines: number,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride create(\n\t\tviewZoneChangeAccessor: IViewZoneChangeAccessor,\n\t\tviewZoneIdsToCleanUp: string[],\n\t\tdisposableStore: DisposableStore,\n\t): void {\n\t\tviewZoneIdsToCleanUp.push(\n\t\t\tviewZoneChangeAccessor.addZone({\n\t\t\t\tafterLineNumber: this.afterLineNumber,\n\t\t\t\theightInLines: this.heightInLines,\n\t\t\t\tdomNode: $(\"div.diagonal-fill\"),\n\t\t\t}),\n\t\t);\n\t}\n}\n\nclass Placeholder extends MergeEditorViewZone {\n\tconstructor(\n\t\tprivate readonly afterLineNumber: number,\n\t\tprivate readonly heightPx: number,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride create(\n\t\tviewZoneChangeAccessor: IViewZoneChangeAccessor,\n\t\tviewZoneIdsToCleanUp: string[],\n\t\tdisposableStore: DisposableStore,\n\t): void {\n\t\tviewZoneIdsToCleanUp.push(\n\t\t\tviewZoneChangeAccessor.addZone({\n\t\t\t\tafterLineNumber: this.afterLineNumber,\n\t\t\t\theightInPx: this.heightPx,\n\t\t\t\tdomNode: $(\"div.conflict-actions-placeholder\"),\n\t\t\t}),\n\t\t);\n\t}\n}\n\nclass CommandViewZone extends MergeEditorViewZone {\n\tconstructor(\n\t\tprivate readonly conflictActionsFactory: ConflictActionsFactory,\n\t\tprivate readonly lineNumber: number,\n\t\tprivate readonly items: IObservable<IContentWidgetAction[]>,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride create(\n\t\tviewZoneChangeAccessor: IViewZoneChangeAccessor,\n\t\tviewZoneIdsToCleanUp: string[],\n\t\tdisposableStore: DisposableStore,\n\t): void {\n\t\tdisposableStore.add(\n\t\t\tthis.conflictActionsFactory.createWidget(\n\t\t\t\tviewZoneChangeAccessor,\n\t\t\t\tthis.lineNumber,\n\t\t\t\tthis.items,\n\t\t\t\tviewZoneIdsToCleanUp,\n\t\t\t),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
