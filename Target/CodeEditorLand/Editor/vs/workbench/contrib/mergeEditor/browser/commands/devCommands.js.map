{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { ILocalizedString } from '../../../../../platform/action/common/action.js';\nimport { Action2 } from '../../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../../platform/clipboard/common/clipboardService.js';\nimport { IFileDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { IQuickInputService } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { IResourceMergeEditorInput } from '../../../../common/editor.js';\nimport { MergeEditor } from '../view/mergeEditor.js';\nimport { ctxIsMergeEditor, MergeEditorContents } from '../../common/mergeEditor.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\n\nconst MERGE_EDITOR_CATEGORY: ILocalizedString = localize2('mergeEditor', 'Merge Editor (Dev)');\n\nexport class MergeEditorCopyContentsToJSON extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.copyContentsJson',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: localize2('merge.dev.copyState', \"Copy Merge Editor State as JSON\"),\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t\tprecondition: ctxIsMergeEditor,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst { activeEditorPane } = accessor.get(IEditorService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tif (!(activeEditorPane instanceof MergeEditor)) {\n\t\t\tnotificationService.info({\n\t\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\t\tmessage: localize('mergeEditor.noActiveMergeEditor', \"No active merge editor\")\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst model = activeEditorPane.model;\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst contents: MergeEditorContents = {\n\t\t\tlanguageId: model.resultTextModel.getLanguageId(),\n\t\t\tbase: model.base.getValue(),\n\t\t\tinput1: model.input1.textModel.getValue(),\n\t\t\tinput2: model.input2.textModel.getValue(),\n\t\t\tresult: model.resultTextModel.getValue(),\n\t\t\tinitialResult: model.getInitialResultValue(),\n\t\t};\n\t\tconst jsonStr = JSON.stringify(contents, undefined, 4);\n\t\tclipboardService.writeText(jsonStr);\n\n\t\tnotificationService.info({\n\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\tmessage: localize('mergeEditor.successfullyCopiedMergeEditorContents', \"Successfully copied merge editor state\"),\n\t\t});\n\t}\n}\n\nexport class MergeEditorSaveContentsToFolder extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.saveContentsToFolder',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: localize2('merge.dev.saveContentsToFolder', \"Save Merge Editor State to Folder\"),\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t\tprecondition: ctxIsMergeEditor,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst { activeEditorPane } = accessor.get(IEditorService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst dialogService = accessor.get(IFileDialogService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\n\t\tif (!(activeEditorPane instanceof MergeEditor)) {\n\t\t\tnotificationService.info({\n\t\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\t\tmessage: localize('mergeEditor.noActiveMergeEditor', \"No active merge editor\")\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst model = activeEditorPane.model;\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await dialogService.showOpenDialog({\n\t\t\tcanSelectFiles: false,\n\t\t\tcanSelectFolders: true,\n\t\t\tcanSelectMany: false,\n\t\t\ttitle: localize('mergeEditor.selectFolderToSaveTo', 'Select folder to save to')\n\t\t});\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tconst targetDir = result[0];\n\n\t\tconst extension = languageService.getExtensions(model.resultTextModel.getLanguageId())[0] || '';\n\n\t\tasync function write(fileName: string, source: string) {\n\t\t\tawait fileService.writeFile(URI.joinPath(targetDir, fileName + extension), VSBuffer.fromString(source), {});\n\t\t}\n\n\t\tawait Promise.all([\n\t\t\twrite('base', model.base.getValue()),\n\t\t\twrite('input1', model.input1.textModel.getValue()),\n\t\t\twrite('input2', model.input2.textModel.getValue()),\n\t\t\twrite('result', model.resultTextModel.getValue()),\n\t\t\twrite('initialResult', model.getInitialResultValue()),\n\t\t]);\n\n\t\tnotificationService.info({\n\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\tmessage: localize('mergeEditor.successfullySavedMergeEditorContentsToFolder', \"Successfully saved merge editor state to folder\"),\n\t\t});\n\t}\n}\n\nexport class MergeEditorLoadContentsFromFolder extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.loadContentsFromFolder',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: localize2('merge.dev.loadContentsFromFolder', \"Load Merge Editor State from Folder\"),\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, args?: { folderUri?: URI; resultState?: 'initial' | 'current' }) {\n\t\tconst dialogService = accessor.get(IFileDialogService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tif (!args) {\n\t\t\targs = {};\n\t\t}\n\n\t\tlet targetDir: URI;\n\t\tif (!args.folderUri) {\n\t\t\tconst result = await dialogService.showOpenDialog({\n\t\t\t\tcanSelectFiles: false,\n\t\t\t\tcanSelectFolders: true,\n\t\t\t\tcanSelectMany: false,\n\t\t\t\ttitle: localize('mergeEditor.selectFolderToSaveTo', 'Select folder to save to')\n\t\t\t});\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttargetDir = result[0];\n\t\t} else {\n\t\t\ttargetDir = args.folderUri;\n\t\t}\n\n\t\tconst targetDirInfo = await fileService.resolve(targetDir);\n\n\t\tfunction findFile(name: string) {\n\t\t\treturn targetDirInfo.children!.find(c => c.name.startsWith(name))?.resource!;\n\t\t}\n\n\t\tconst shouldOpenInitial = await promptOpenInitial(quickInputService, args.resultState);\n\n\t\tconst baseUri = findFile('base');\n\t\tconst input1Uri = findFile('input1');\n\t\tconst input2Uri = findFile('input2');\n\t\tconst resultUri = findFile(shouldOpenInitial ? 'initialResult' : 'result');\n\n\t\tconst input: IResourceMergeEditorInput = {\n\t\t\tbase: { resource: baseUri },\n\t\t\tinput1: { resource: input1Uri, label: 'Input 1', description: 'Input 1', detail: '(from file)' },\n\t\t\tinput2: { resource: input2Uri, label: 'Input 2', description: 'Input 2', detail: '(from file)' },\n\t\t\tresult: { resource: resultUri },\n\t\t};\n\t\teditorService.openEditor(input);\n\t}\n}\n\nasync function promptOpenInitial(quickInputService: IQuickInputService, resultStateOverride?: 'initial' | 'current') {\n\tif (resultStateOverride) {\n\t\treturn resultStateOverride === 'initial';\n\t}\n\tconst result = await quickInputService.pick([{ label: 'result', result: false }, { label: 'initial result', result: true }], { canPickMany: false });\n\treturn result?.result;\n}\n"],
  "mappings": "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",
  "names": []
}
