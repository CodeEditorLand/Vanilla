{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/rangeUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from '../../../../../editor/common/core/position.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { TextLength } from '../../../../../editor/common/core/textLength.js';\n\nexport function rangeContainsPosition(range: Range, position: Position): boolean {\n\tif (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n\t\treturn false;\n\t}\n\tif (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n\t\treturn false;\n\t}\n\tif (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nexport function lengthOfRange(range: Range): TextLength {\n\tif (range.startLineNumber === range.endLineNumber) {\n\t\treturn new TextLength(0, range.endColumn - range.startColumn);\n\t} else {\n\t\treturn new TextLength(range.endLineNumber - range.startLineNumber, range.endColumn - 1);\n\t}\n}\n\nexport function lengthBetweenPositions(position1: Position, position2: Position): TextLength {\n\tif (position1.lineNumber === position2.lineNumber) {\n\t\treturn new TextLength(0, position2.column - position1.column);\n\t} else {\n\t\treturn new TextLength(position2.lineNumber - position1.lineNumber, position2.column - 1);\n\t}\n}\n\nexport function addLength(position: Position, length: TextLength): Position {\n\tif (length.lineCount === 0) {\n\t\treturn new Position(position.lineNumber, position.column + length.columnCount);\n\t} else {\n\t\treturn new Position(position.lineNumber + length.lineCount, length.columnCount + 1);\n\t}\n}\n\nexport function rangeIsBeforeOrTouching(range: Range, other: Range): boolean {\n\treturn (\n\t\trange.endLineNumber < other.startLineNumber ||\n\t\t(range.endLineNumber === other.startLineNumber &&\n\t\t\trange.endColumn <= other.startColumn)\n\t);\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAEpB,SAAS,sBAAsB,OAAc,UAA6B;AAChF,MAAI,SAAS,aAAa,MAAM,mBAAmB,SAAS,aAAa,MAAM,eAAe;AAC7F,WAAO;AAAA,EACR;AACA,MAAI,SAAS,eAAe,MAAM,mBAAmB,SAAS,SAAS,MAAM,aAAa;AACzF,WAAO;AAAA,EACR;AACA,MAAI,SAAS,eAAe,MAAM,iBAAiB,SAAS,UAAU,MAAM,WAAW;AACtF,WAAO;AAAA,EACR;AACA,SAAO;AACR;AAXgB;AAaT,SAAS,cAAc,OAA0B;AACvD,MAAI,MAAM,oBAAoB,MAAM,eAAe;AAClD,WAAO,IAAI,WAAW,GAAG,MAAM,YAAY,MAAM,WAAW;AAAA,EAC7D,OAAO;AACN,WAAO,IAAI,WAAW,MAAM,gBAAgB,MAAM,iBAAiB,MAAM,YAAY,CAAC;AAAA,EACvF;AACD;AANgB;AAQT,SAAS,uBAAuB,WAAqB,WAAiC;AAC5F,MAAI,UAAU,eAAe,UAAU,YAAY;AAClD,WAAO,IAAI,WAAW,GAAG,UAAU,SAAS,UAAU,MAAM;AAAA,EAC7D,OAAO;AACN,WAAO,IAAI,WAAW,UAAU,aAAa,UAAU,YAAY,UAAU,SAAS,CAAC;AAAA,EACxF;AACD;AANgB;AAQT,SAAS,UAAU,UAAoB,QAA8B;AAC3E,MAAI,OAAO,cAAc,GAAG;AAC3B,WAAO,IAAI,SAAS,SAAS,YAAY,SAAS,SAAS,OAAO,WAAW;AAAA,EAC9E,OAAO;AACN,WAAO,IAAI,SAAS,SAAS,aAAa,OAAO,WAAW,OAAO,cAAc,CAAC;AAAA,EACnF;AACD;AANgB;AAQT,SAAS,wBAAwB,OAAc,OAAuB;AAC5E,SACC,MAAM,gBAAgB,MAAM,mBAC3B,MAAM,kBAAkB,MAAM,mBAC9B,MAAM,aAAa,MAAM;AAE5B;AANgB;",
  "names": []
}
