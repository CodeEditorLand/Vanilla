{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/editing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from \"../../../../../base/common/arrays.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type { IIdentifiedSingleEditOperation } from \"../../../../../editor/common/model.js\";\nimport type { LineRange } from \"./lineRange.js\";\n\n/**\n * Represents an edit, expressed in whole lines:\n * At (before) {@link LineRange.startLineNumber}, delete {@link LineRange.lineCount} many lines and insert {@link newLines}.\n */\nexport class LineRangeEdit {\n\tconstructor(\n\t\tpublic readonly range: LineRange,\n\t\tpublic readonly newLines: string[],\n\t) {}\n\n\tpublic equals(other: LineRangeEdit): boolean {\n\t\treturn (\n\t\t\tthis.range.equals(other.range) &&\n\t\t\tequals(this.newLines, other.newLines)\n\t\t);\n\t}\n\n\tpublic toEdits(modelLineCount: number): IIdentifiedSingleEditOperation[] {\n\t\treturn new LineEdits([this]).toEdits(modelLineCount);\n\t}\n}\n\nexport class RangeEdit {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly newText: string,\n\t) {}\n\n\tpublic equals(other: RangeEdit): boolean {\n\t\treturn (\n\t\t\tRange.equalsRange(this.range, other.range) &&\n\t\t\tthis.newText === other.newText\n\t\t);\n\t}\n}\n\nexport class LineEdits {\n\tconstructor(public readonly edits: readonly LineRangeEdit[]) {}\n\n\tpublic toEdits(modelLineCount: number): IIdentifiedSingleEditOperation[] {\n\t\treturn this.edits.map((e) => {\n\t\t\tif (e.range.endLineNumberExclusive <= modelLineCount) {\n\t\t\t\treturn {\n\t\t\t\t\trange: new Range(\n\t\t\t\t\t\te.range.startLineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\te.range.endLineNumberExclusive,\n\t\t\t\t\t\t1,\n\t\t\t\t\t),\n\t\t\t\t\ttext: e.newLines.map((s) => s + \"\\n\").join(\"\"),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (e.range.startLineNumber === 1) {\n\t\t\t\treturn {\n\t\t\t\t\trange: new Range(\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmodelLineCount,\n\t\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\t),\n\t\t\t\t\ttext: e.newLines.join(\"\\n\"),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\trange: new Range(\n\t\t\t\t\te.range.startLineNumber - 1,\n\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t\tmodelLineCount,\n\t\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\t),\n\t\t\t\ttext: e.newLines.map((s) => \"\\n\" + s).join(\"\"),\n\t\t\t};\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AACvB,SAAS,aAAa;AAQf,MAAM,cAAc;AAAA,EAC1B,YACiB,OACA,UACf;AAFe;AACA;AAAA,EACd;AAAA,EAlBJ,OAc2B;AAAA;AAAA;AAAA,EAMnB,OAAO,OAA+B;AAC5C,WACC,KAAK,MAAM,OAAO,MAAM,KAAK,KAC7B,OAAO,KAAK,UAAU,MAAM,QAAQ;AAAA,EAEtC;AAAA,EAEO,QAAQ,gBAA0D;AACxE,WAAO,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,cAAc;AAAA,EACpD;AACD;AAEO,MAAM,UAAU;AAAA,EACtB,YACiB,OACA,SACf;AAFe;AACA;AAAA,EACd;AAAA,EApCJ,OAgCuB;AAAA;AAAA;AAAA,EAMf,OAAO,OAA2B;AACxC,WACC,MAAM,YAAY,KAAK,OAAO,MAAM,KAAK,KACzC,KAAK,YAAY,MAAM;AAAA,EAEzB;AACD;AAEO,MAAM,UAAU;AAAA,EACtB,YAA4B,OAAiC;AAAjC;AAAA,EAAkC;AAAA,EA/C/D,OA8CuB;AAAA;AAAA;AAAA,EAGf,QAAQ,gBAA0D;AACxE,WAAO,KAAK,MAAM,IAAI,CAAC,MAAM;AAC5B,UAAI,EAAE,MAAM,0BAA0B,gBAAgB;AACrD,eAAO;AAAA,UACN,OAAO,IAAI;AAAA,YACV,EAAE,MAAM;AAAA,YACR;AAAA,YACA,EAAE,MAAM;AAAA,YACR;AAAA,UACD;AAAA,UACA,MAAM,EAAE,SAAS,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,EAAE;AAAA,QAC9C;AAAA,MACD;AAEA,UAAI,EAAE,MAAM,oBAAoB,GAAG;AAClC,eAAO;AAAA,UACN,OAAO,IAAI;AAAA,YACV;AAAA,YACA;AAAA,YACA;AAAA,YACA,OAAO;AAAA,UACR;AAAA,UACA,MAAM,EAAE,SAAS,KAAK,IAAI;AAAA,QAC3B;AAAA,MACD;AAEA,aAAO;AAAA,QACN,OAAO,IAAI;AAAA,UACV,EAAE,MAAM,kBAAkB;AAAA,UAC1B,OAAO;AAAA,UACP;AAAA,UACA,OAAO;AAAA,QACR;AAAA,QACA,MAAM,EAAE,SAAS,IAAI,CAAC,MAAM,OAAO,CAAC,EAAE,KAAK,EAAE;AAAA,MAC9C;AAAA,IACD,CAAC;AAAA,EACF;AACD;",
  "names": []
}
