{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/editing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../../../base/common/arrays.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IIdentifiedSingleEditOperation } from '../../../../../editor/common/model.js';\nimport { LineRange } from './lineRange.js';\n\n/**\n * Represents an edit, expressed in whole lines:\n * At (before) {@link LineRange.startLineNumber}, delete {@link LineRange.lineCount} many lines and insert {@link newLines}.\n*/\nexport class LineRangeEdit {\n\tconstructor(\n\t\tpublic readonly range: LineRange,\n\t\tpublic readonly newLines: string[]\n\t) { }\n\n\tpublic equals(other: LineRangeEdit): boolean {\n\t\treturn this.range.equals(other.range) && equals(this.newLines, other.newLines);\n\t}\n\n\tpublic toEdits(modelLineCount: number): IIdentifiedSingleEditOperation[] {\n\t\treturn new LineEdits([this]).toEdits(modelLineCount);\n\t}\n}\n\nexport class RangeEdit {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly newText: string\n\t) { }\n\n\tpublic equals(other: RangeEdit): boolean {\n\t\treturn Range.equalsRange(this.range, other.range) && this.newText === other.newText;\n\t}\n}\n\nexport class LineEdits {\n\tconstructor(public readonly edits: readonly LineRangeEdit[]) { }\n\n\tpublic toEdits(modelLineCount: number): IIdentifiedSingleEditOperation[] {\n\t\treturn this.edits.map((e) => {\n\t\t\tif (e.range.endLineNumberExclusive <= modelLineCount) {\n\t\t\t\treturn {\n\t\t\t\t\trange: new Range(e.range.startLineNumber, 1, e.range.endLineNumberExclusive, 1),\n\t\t\t\t\ttext: e.newLines.map(s => s + '\\n').join(''),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (e.range.startLineNumber === 1) {\n\t\t\t\treturn {\n\t\t\t\t\trange: new Range(1, 1, modelLineCount, Number.MAX_SAFE_INTEGER),\n\t\t\t\t\ttext: e.newLines.join('\\n'),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\trange: new Range(e.range.startLineNumber - 1, Number.MAX_SAFE_INTEGER, modelLineCount, Number.MAX_SAFE_INTEGER),\n\t\t\t\ttext: e.newLines.map(s => '\\n' + s).join(''),\n\t\t\t};\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AACvB,SAAS,aAAa;AACtB,SAAS,sCAAsC;AAC/C,SAAS,iBAAiB;AAMnB,MAAM,cAAc;AAAA,EAC1B,YACiB,OACA,UACf;AAFe;AACA;AAAA,EACb;AAAA,EAlBL,OAc2B;AAAA;AAAA;AAAA,EAMnB,OAAO,OAA+B;AAC5C,WAAO,KAAK,MAAM,OAAO,MAAM,KAAK,KAAK,OAAO,KAAK,UAAU,MAAM,QAAQ;AAAA,EAC9E;AAAA,EAEO,QAAQ,gBAA0D;AACxE,WAAO,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,cAAc;AAAA,EACpD;AACD;AAEO,MAAM,UAAU;AAAA,EACtB,YACiB,OACA,SACf;AAFe;AACA;AAAA,EACb;AAAA,EAjCL,OA6BuB;AAAA;AAAA;AAAA,EAMf,OAAO,OAA2B;AACxC,WAAO,MAAM,YAAY,KAAK,OAAO,MAAM,KAAK,KAAK,KAAK,YAAY,MAAM;AAAA,EAC7E;AACD;AAEO,MAAM,UAAU;AAAA,EACtB,YAA4B,OAAiC;AAAjC;AAAA,EAAmC;AAAA,EAzChE,OAwCuB;AAAA;AAAA;AAAA,EAGf,QAAQ,gBAA0D;AACxE,WAAO,KAAK,MAAM,IAAI,CAAC,MAAM;AAC5B,UAAI,EAAE,MAAM,0BAA0B,gBAAgB;AACrD,eAAO;AAAA,UACN,OAAO,IAAI,MAAM,EAAE,MAAM,iBAAiB,GAAG,EAAE,MAAM,wBAAwB,CAAC;AAAA,UAC9E,MAAM,EAAE,SAAS,IAAI,OAAK,IAAI,IAAI,EAAE,KAAK,EAAE;AAAA,QAC5C;AAAA,MACD;AAEA,UAAI,EAAE,MAAM,oBAAoB,GAAG;AAClC,eAAO;AAAA,UACN,OAAO,IAAI,MAAM,GAAG,GAAG,gBAAgB,OAAO,gBAAgB;AAAA,UAC9D,MAAM,EAAE,SAAS,KAAK,IAAI;AAAA,QAC3B;AAAA,MACD;AAEA,aAAO;AAAA,QACN,OAAO,IAAI,MAAM,EAAE,MAAM,kBAAkB,GAAG,OAAO,kBAAkB,gBAAgB,OAAO,gBAAgB;AAAA,QAC9G,MAAM,EAAE,SAAS,IAAI,OAAK,OAAO,CAAC,EAAE,KAAK,EAAE;AAAA,MAC5C;AAAA,IACD,CAAC;AAAA,EACF;AACD;",
  "names": []
}
