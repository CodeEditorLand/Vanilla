import{VSBuffer as V}from"../../../../../base/common/buffer.js";import{Codicon as v}from"../../../../../base/common/codicons.js";import{URI as U}from"../../../../../base/common/uri.js";import{ILanguageService as A}from"../../../../../editor/common/languages/language.js";import{localize as i,localize2 as m}from"../../../../../nls.js";import{Action2 as E}from"../../../../../platform/actions/common/actions.js";import{IClipboardService as D}from"../../../../../platform/clipboard/common/clipboardService.js";import{IFileDialogService as y}from"../../../../../platform/dialogs/common/dialogs.js";import{IFileService as F}from"../../../../../platform/files/common/files.js";import{INotificationService as C}from"../../../../../platform/notification/common/notification.js";import{IQuickInputService as O}from"../../../../../platform/quickinput/common/quickInput.js";import{MergeEditor as x}from"../view/mergeEditor.js";import{ctxIsMergeEditor as T}from"../../common/mergeEditor.js";import{IEditorService as I}from"../../../../services/editor/common/editorService.js";const M=m("mergeEditor","Merge Editor (Dev)");class re extends E{constructor(){super({id:"merge.dev.copyContentsJson",category:M,title:m("merge.dev.copyState","Copy Merge Editor State as JSON"),icon:v.layoutCentered,f1:!0,precondition:T})}run(e){const{activeEditorPane:r}=e.get(I),l=e.get(D),s=e.get(C);if(!(r instanceof x)){s.info({name:i("mergeEditor.name","Merge Editor"),message:i("mergeEditor.noActiveMergeEditor","No active merge editor")});return}const o=r.model;if(!o)return;const c={languageId:o.resultTextModel.getLanguageId(),base:o.base.getValue(),input1:o.input1.textModel.getValue(),input2:o.input2.textModel.getValue(),result:o.resultTextModel.getValue(),initialResult:o.getInitialResultValue()},t=JSON.stringify(c,void 0,4);l.writeText(t),s.info({name:i("mergeEditor.name","Merge Editor"),message:i("mergeEditor.successfullyCopiedMergeEditorContents","Successfully copied merge editor state")})}}class oe extends E{constructor(){super({id:"merge.dev.saveContentsToFolder",category:M,title:m("merge.dev.saveContentsToFolder","Save Merge Editor State to Folder"),icon:v.layoutCentered,f1:!0,precondition:T})}async run(e){const{activeEditorPane:r}=e.get(I),l=e.get(C),s=e.get(y),o=e.get(F),c=e.get(A);if(!(r instanceof x)){l.info({name:i("mergeEditor.name","Merge Editor"),message:i("mergeEditor.noActiveMergeEditor","No active merge editor")});return}const t=r.model;if(!t)return;const u=await s.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,title:i("mergeEditor.selectFolderToSaveTo","Select folder to save to")});if(!u)return;const a=u[0],f=c.getExtensions(t.resultTextModel.getLanguageId())[0]||"";async function n(p,S){await o.writeFile(U.joinPath(a,p+f),V.fromString(S),{})}await Promise.all([n("base",t.base.getValue()),n("input1",t.input1.textModel.getValue()),n("input2",t.input2.textModel.getValue()),n("result",t.resultTextModel.getValue()),n("initialResult",t.getInitialResultValue())]),l.info({name:i("mergeEditor.name","Merge Editor"),message:i("mergeEditor.successfullySavedMergeEditorContentsToFolder","Successfully saved merge editor state to folder")})}}class ie extends E{constructor(){super({id:"merge.dev.loadContentsFromFolder",category:M,title:m("merge.dev.loadContentsFromFolder","Load Merge Editor State from Folder"),icon:v.layoutCentered,f1:!0})}async run(e,r){const l=e.get(y),s=e.get(I),o=e.get(F),c=e.get(O);r||(r={});let t;if(r.folderUri)t=r.folderUri;else{const g=await l.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,title:i("mergeEditor.selectFolderToSaveTo","Select folder to save to")});if(!g)return;t=g[0]}const u=await o.resolve(t);function a(g){return u.children.find(w=>w.name.startsWith(g))?.resource}const f=await L(c,r.resultState),n=a("base"),p=a("input1"),S=a("input2"),b=a(f?"initialResult":"result"),R={base:{resource:n},input1:{resource:p,label:"Input 1",description:"Input 1",detail:"(from file)"},input2:{resource:S,label:"Input 2",description:"Input 2",detail:"(from file)"},result:{resource:b}};s.openEditor(R)}}async function L(d,e){return e?e==="initial":(await d.pick([{label:"result",result:!1},{label:"initial result",result:!0}],{canPickMany:!1}))?.result}export{re as MergeEditorCopyContentsToJSON,ie as MergeEditorLoadContentsFromFolder,oe as MergeEditorSaveContentsToFolder};
