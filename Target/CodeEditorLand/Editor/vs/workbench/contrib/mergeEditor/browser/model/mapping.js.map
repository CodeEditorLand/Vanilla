{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/mapping.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tcompareBy,\n\tnumberComparator,\n} from \"../../../../../base/common/arrays.js\";\nimport { findLast } from \"../../../../../base/common/arraysFind.js\";\nimport {\n\tassertFn,\n\tcheckAdjacentItems,\n} from \"../../../../../base/common/assert.js\";\nimport { BugIndicatingError } from \"../../../../../base/common/errors.js\";\nimport type { Position } from \"../../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\nimport { concatArrays } from \"../utils.js\";\nimport { LineRangeEdit } from \"./editing.js\";\nimport { LineRange } from \"./lineRange.js\";\nimport {\n\taddLength,\n\tlengthBetweenPositions,\n\trangeContainsPosition,\n\trangeIsBeforeOrTouching,\n} from \"./rangeUtils.js\";\n\n/**\n * Represents a mapping of an input line range to an output line range.\n */\nexport class LineRangeMapping {\n\tpublic static join(\n\t\tmappings: readonly LineRangeMapping[],\n\t): LineRangeMapping | undefined {\n\t\treturn mappings.reduce<undefined | LineRangeMapping>(\n\t\t\t(acc, cur) => (acc ? acc.join(cur) : cur),\n\t\t\tundefined,\n\t\t);\n\t}\n\tconstructor(\n\t\tpublic readonly inputRange: LineRange,\n\t\tpublic readonly outputRange: LineRange,\n\t) {}\n\n\tpublic extendInputRange(extendedInputRange: LineRange): LineRangeMapping {\n\t\tif (!extendedInputRange.containsRange(this.inputRange)) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst startDelta =\n\t\t\textendedInputRange.startLineNumber -\n\t\t\tthis.inputRange.startLineNumber;\n\t\tconst endDelta =\n\t\t\textendedInputRange.endLineNumberExclusive -\n\t\t\tthis.inputRange.endLineNumberExclusive;\n\t\treturn new LineRangeMapping(\n\t\t\textendedInputRange,\n\t\t\tnew LineRange(\n\t\t\t\tthis.outputRange.startLineNumber + startDelta,\n\t\t\t\tthis.outputRange.lineCount - startDelta + endDelta,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic join(other: LineRangeMapping): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.inputRange.join(other.inputRange),\n\t\t\tthis.outputRange.join(other.outputRange),\n\t\t);\n\t}\n\n\tpublic get resultingDeltaFromOriginalToModified(): number {\n\t\treturn (\n\t\t\tthis.outputRange.endLineNumberExclusive -\n\t\t\tthis.inputRange.endLineNumberExclusive\n\t\t);\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.inputRange.toString()} -> ${this.outputRange.toString()}`;\n\t}\n\n\tpublic addOutputLineDelta(delta: number): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.inputRange,\n\t\t\tthis.outputRange.delta(delta),\n\t\t);\n\t}\n\n\tpublic addInputLineDelta(delta: number): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.inputRange.delta(delta),\n\t\t\tthis.outputRange,\n\t\t);\n\t}\n\n\tpublic reverse(): LineRangeMapping {\n\t\treturn new LineRangeMapping(this.outputRange, this.inputRange);\n\t}\n}\n\n/**\n * Represents a total monotonous mapping of line ranges in one document to another document.\n */\nexport class DocumentLineRangeMap {\n\tpublic static betweenOutputs(\n\t\tinputToOutput1: readonly LineRangeMapping[],\n\t\tinputToOutput2: readonly LineRangeMapping[],\n\t\tinputLineCount: number,\n\t): DocumentLineRangeMap {\n\t\tconst alignments = MappingAlignment.compute(\n\t\t\tinputToOutput1,\n\t\t\tinputToOutput2,\n\t\t);\n\t\tconst mappings = alignments.map(\n\t\t\t(m) => new LineRangeMapping(m.output1Range, m.output2Range),\n\t\t);\n\t\treturn new DocumentLineRangeMap(mappings, inputLineCount);\n\t}\n\n\tconstructor(\n\t\t/**\n\t\t * The line range mappings that define this document mapping.\n\t\t * The space between two input ranges must equal the space between two output ranges.\n\t\t * These holes act as dense sequence of 1:1 line mappings.\n\t\t */\n\t\tpublic readonly lineRangeMappings: LineRangeMapping[],\n\t\tpublic readonly inputLineCount: number,\n\t) {\n\t\tassertFn(() => {\n\t\t\treturn checkAdjacentItems(\n\t\t\t\tlineRangeMappings,\n\t\t\t\t(m1, m2) =>\n\t\t\t\t\tm1.inputRange.isBefore(m2.inputRange) &&\n\t\t\t\t\tm1.outputRange.isBefore(m2.outputRange) &&\n\t\t\t\t\tm2.inputRange.startLineNumber -\n\t\t\t\t\t\tm1.inputRange.endLineNumberExclusive ===\n\t\t\t\t\t\tm2.outputRange.startLineNumber -\n\t\t\t\t\t\t\tm1.outputRange.endLineNumberExclusive,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic project(lineNumber: number): LineRangeMapping {\n\t\tconst lastBefore = findLast(\n\t\t\tthis.lineRangeMappings,\n\t\t\t(r) => r.inputRange.startLineNumber <= lineNumber,\n\t\t);\n\t\tif (!lastBefore) {\n\t\t\treturn new LineRangeMapping(\n\t\t\t\tnew LineRange(lineNumber, 1),\n\t\t\t\tnew LineRange(lineNumber, 1),\n\t\t\t);\n\t\t}\n\n\t\tif (lastBefore.inputRange.contains(lineNumber)) {\n\t\t\treturn lastBefore;\n\t\t}\n\t\tconst containingRange = new LineRange(lineNumber, 1);\n\t\tconst mappedRange = new LineRange(\n\t\t\tlineNumber +\n\t\t\t\tlastBefore.outputRange.endLineNumberExclusive -\n\t\t\t\tlastBefore.inputRange.endLineNumberExclusive,\n\t\t\t1,\n\t\t);\n\t\treturn new LineRangeMapping(containingRange, mappedRange);\n\t}\n\n\tpublic get outputLineCount(): number {\n\t\tconst last = this.lineRangeMappings.at(-1);\n\t\tconst diff = last\n\t\t\t? last.outputRange.endLineNumberExclusive -\n\t\t\t\tlast.inputRange.endLineNumberExclusive\n\t\t\t: 0;\n\t\treturn this.inputLineCount + diff;\n\t}\n\n\tpublic reverse(): DocumentLineRangeMap {\n\t\treturn new DocumentLineRangeMap(\n\t\t\tthis.lineRangeMappings.map((r) => r.reverse()),\n\t\t\tthis.outputLineCount,\n\t\t);\n\t}\n}\n\n/**\n * Aligns two mappings with a common input range.\n */\nexport class MappingAlignment<T extends LineRangeMapping> {\n\tpublic static compute<T extends LineRangeMapping>(\n\t\tfromInputToOutput1: readonly T[],\n\t\tfromInputToOutput2: readonly T[],\n\t): MappingAlignment<T>[] {\n\t\tconst compareByStartLineNumber = compareBy<LineRangeMapping, number>(\n\t\t\t(d) => d.inputRange.startLineNumber,\n\t\t\tnumberComparator,\n\t\t);\n\n\t\tconst combinedDiffs = concatArrays(\n\t\t\tfromInputToOutput1.map((diff) => ({ source: 0 as const, diff })),\n\t\t\tfromInputToOutput2.map((diff) => ({ source: 1 as const, diff })),\n\t\t).sort(compareBy((d) => d.diff, compareByStartLineNumber));\n\n\t\tconst currentDiffs = [new Array<T>(), new Array<T>()];\n\t\tconst deltaFromBaseToInput = [0, 0];\n\n\t\tconst alignments = new Array<MappingAlignment<T>>();\n\n\t\tfunction pushAndReset(inputRange: LineRange) {\n\t\t\tconst mapping1 =\n\t\t\t\tLineRangeMapping.join(currentDiffs[0]) ||\n\t\t\t\tnew LineRangeMapping(\n\t\t\t\t\tinputRange,\n\t\t\t\t\tinputRange.delta(deltaFromBaseToInput[0]),\n\t\t\t\t);\n\t\t\tconst mapping2 =\n\t\t\t\tLineRangeMapping.join(currentDiffs[1]) ||\n\t\t\t\tnew LineRangeMapping(\n\t\t\t\t\tinputRange,\n\t\t\t\t\tinputRange.delta(deltaFromBaseToInput[1]),\n\t\t\t\t);\n\n\t\t\talignments.push(\n\t\t\t\tnew MappingAlignment(\n\t\t\t\t\tcurrentInputRange!,\n\t\t\t\t\tmapping1.extendInputRange(currentInputRange!).outputRange,\n\t\t\t\t\tcurrentDiffs[0],\n\t\t\t\t\tmapping2.extendInputRange(currentInputRange!).outputRange,\n\t\t\t\t\tcurrentDiffs[1],\n\t\t\t\t),\n\t\t\t);\n\t\t\tcurrentDiffs[0] = [];\n\t\t\tcurrentDiffs[1] = [];\n\t\t}\n\n\t\tlet currentInputRange: LineRange | undefined;\n\n\t\tfor (const diff of combinedDiffs) {\n\t\t\tconst range = diff.diff.inputRange;\n\t\t\tif (currentInputRange && !currentInputRange.touches(range)) {\n\t\t\t\tpushAndReset(currentInputRange);\n\t\t\t\tcurrentInputRange = undefined;\n\t\t\t}\n\t\t\tdeltaFromBaseToInput[diff.source] =\n\t\t\t\tdiff.diff.resultingDeltaFromOriginalToModified;\n\t\t\tcurrentInputRange = currentInputRange\n\t\t\t\t? currentInputRange.join(range)\n\t\t\t\t: range;\n\t\t\tcurrentDiffs[diff.source].push(diff.diff);\n\t\t}\n\t\tif (currentInputRange) {\n\t\t\tpushAndReset(currentInputRange);\n\t\t}\n\n\t\treturn alignments;\n\t}\n\n\tconstructor(\n\t\tpublic readonly inputRange: LineRange,\n\t\tpublic readonly output1Range: LineRange,\n\t\tpublic readonly output1LineMappings: T[],\n\t\tpublic readonly output2Range: LineRange,\n\t\tpublic readonly output2LineMappings: T[],\n\t) {}\n\n\tpublic toString(): string {\n\t\treturn `${this.output1Range} <- ${this.inputRange} -> ${this.output2Range}`;\n\t}\n}\n\n/**\n * A line range mapping with inner range mappings.\n */\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n\tpublic static override join(\n\t\tmappings: readonly DetailedLineRangeMapping[],\n\t): DetailedLineRangeMapping | undefined {\n\t\treturn mappings.reduce<undefined | DetailedLineRangeMapping>(\n\t\t\t(acc, cur) => (acc ? acc.join(cur) : cur),\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tpublic readonly rangeMappings: readonly RangeMapping[];\n\n\tconstructor(\n\t\tinputRange: LineRange,\n\t\tpublic readonly inputTextModel: ITextModel,\n\t\toutputRange: LineRange,\n\t\tpublic readonly outputTextModel: ITextModel,\n\t\trangeMappings?: readonly RangeMapping[],\n\t) {\n\t\tsuper(inputRange, outputRange);\n\n\t\tthis.rangeMappings = rangeMappings || [\n\t\t\tnew RangeMapping(\n\t\t\t\tthis.inputRange.toRange(),\n\t\t\t\tthis.outputRange.toRange(),\n\t\t\t),\n\t\t];\n\t}\n\n\tpublic override addOutputLineDelta(\n\t\tdelta: number,\n\t): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(\n\t\t\tthis.inputRange,\n\t\t\tthis.inputTextModel,\n\t\t\tthis.outputRange.delta(delta),\n\t\t\tthis.outputTextModel,\n\t\t\tthis.rangeMappings.map((d) => d.addOutputLineDelta(delta)),\n\t\t);\n\t}\n\n\tpublic override addInputLineDelta(delta: number): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(\n\t\t\tthis.inputRange.delta(delta),\n\t\t\tthis.inputTextModel,\n\t\t\tthis.outputRange,\n\t\t\tthis.outputTextModel,\n\t\t\tthis.rangeMappings.map((d) => d.addInputLineDelta(delta)),\n\t\t);\n\t}\n\n\tpublic override join(\n\t\tother: DetailedLineRangeMapping,\n\t): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(\n\t\t\tthis.inputRange.join(other.inputRange),\n\t\t\tthis.inputTextModel,\n\t\t\tthis.outputRange.join(other.outputRange),\n\t\t\tthis.outputTextModel,\n\t\t);\n\t}\n\n\tpublic getLineEdit(): LineRangeEdit {\n\t\treturn new LineRangeEdit(this.inputRange, this.getOutputLines());\n\t}\n\n\tpublic getReverseLineEdit(): LineRangeEdit {\n\t\treturn new LineRangeEdit(this.outputRange, this.getInputLines());\n\t}\n\n\tprivate getOutputLines(): string[] {\n\t\treturn this.outputRange.getLines(this.outputTextModel);\n\t}\n\n\tprivate getInputLines(): string[] {\n\t\treturn this.inputRange.getLines(this.inputTextModel);\n\t}\n}\n\n/**\n * Represents a mapping of an input range to an output range.\n */\nexport class RangeMapping {\n\tconstructor(\n\t\tpublic readonly inputRange: Range,\n\t\tpublic readonly outputRange: Range,\n\t) {}\n\ttoString(): string {\n\t\tfunction rangeToString(range: Range) {\n\t\t\t// TODO@hediet make this the default Range.toString\n\t\t\treturn `[${range.startLineNumber}:${range.startColumn}, ${range.endLineNumber}:${range.endColumn})`;\n\t\t}\n\n\t\treturn `${rangeToString(this.inputRange)} -> ${rangeToString(this.outputRange)}`;\n\t}\n\n\taddOutputLineDelta(deltaLines: number): RangeMapping {\n\t\treturn new RangeMapping(\n\t\t\tthis.inputRange,\n\t\t\tnew Range(\n\t\t\t\tthis.outputRange.startLineNumber + deltaLines,\n\t\t\t\tthis.outputRange.startColumn,\n\t\t\t\tthis.outputRange.endLineNumber + deltaLines,\n\t\t\t\tthis.outputRange.endColumn,\n\t\t\t),\n\t\t);\n\t}\n\n\taddInputLineDelta(deltaLines: number): RangeMapping {\n\t\treturn new RangeMapping(\n\t\t\tnew Range(\n\t\t\t\tthis.inputRange.startLineNumber + deltaLines,\n\t\t\t\tthis.inputRange.startColumn,\n\t\t\t\tthis.inputRange.endLineNumber + deltaLines,\n\t\t\t\tthis.inputRange.endColumn,\n\t\t\t),\n\t\t\tthis.outputRange,\n\t\t);\n\t}\n\n\treverse(): RangeMapping {\n\t\treturn new RangeMapping(this.outputRange, this.inputRange);\n\t}\n}\n\n/**\n * Represents a total monotonous mapping of ranges in one document to another document.\n */\nexport class DocumentRangeMap {\n\tconstructor(\n\t\t/**\n\t\t * The line range mappings that define this document mapping.\n\t\t * Can have holes.\n\t\t */\n\t\tpublic readonly rangeMappings: RangeMapping[],\n\t\tpublic readonly inputLineCount: number,\n\t) {\n\t\tassertFn(() =>\n\t\t\tcheckAdjacentItems(\n\t\t\t\trangeMappings,\n\t\t\t\t(m1, m2) =>\n\t\t\t\t\trangeIsBeforeOrTouching(m1.inputRange, m2.inputRange) &&\n\t\t\t\t\trangeIsBeforeOrTouching(m1.outputRange, m2.outputRange) /*&&\n\t\t\t\tlengthBetweenPositions(m1.inputRange.getEndPosition(), m2.inputRange.getStartPosition()).equals(\n\t\t\t\t\tlengthBetweenPositions(m1.outputRange.getEndPosition(), m2.outputRange.getStartPosition())\n\t\t\t\t)*/,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic project(position: Position): RangeMapping {\n\t\tconst lastBefore = findLast(this.rangeMappings, (r) =>\n\t\t\tr.inputRange.getStartPosition().isBeforeOrEqual(position),\n\t\t);\n\t\tif (!lastBefore) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tRange.fromPositions(position, position),\n\t\t\t\tRange.fromPositions(position, position),\n\t\t\t);\n\t\t}\n\n\t\tif (rangeContainsPosition(lastBefore.inputRange, position)) {\n\t\t\treturn lastBefore;\n\t\t}\n\n\t\tconst dist = lengthBetweenPositions(\n\t\t\tlastBefore.inputRange.getEndPosition(),\n\t\t\tposition,\n\t\t);\n\t\tconst outputPos = addLength(\n\t\t\tlastBefore.outputRange.getEndPosition(),\n\t\t\tdist,\n\t\t);\n\n\t\treturn new RangeMapping(\n\t\t\tRange.fromPositions(position),\n\t\t\tRange.fromPositions(outputPos),\n\t\t);\n\t}\n\n\tpublic projectRange(range: Range): RangeMapping {\n\t\tconst start = this.project(range.getStartPosition());\n\t\tconst end = this.project(range.getEndPosition());\n\t\treturn new RangeMapping(\n\t\t\tstart.inputRange.plusRange(end.inputRange),\n\t\t\tstart.outputRange.plusRange(end.outputRange),\n\t\t);\n\t}\n\n\tpublic get outputLineCount(): number {\n\t\tconst last = this.rangeMappings.at(-1);\n\t\tconst diff = last\n\t\t\t? last.outputRange.endLineNumber - last.inputRange.endLineNumber\n\t\t\t: 0;\n\t\treturn this.inputLineCount + diff;\n\t}\n\n\tpublic reverse(): DocumentRangeMap {\n\t\treturn new DocumentRangeMap(\n\t\t\tthis.rangeMappings.map((m) => m.reverse()),\n\t\t\tthis.outputLineCount,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
