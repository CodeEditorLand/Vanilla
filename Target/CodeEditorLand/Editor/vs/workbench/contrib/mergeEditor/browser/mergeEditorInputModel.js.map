{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertFn } from '../../../../base/common/assert.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { derived, IObservable, observableFromEvent, observableValue } from '../../../../base/common/observable.js';\nimport { basename, isEqual } from '../../../../base/common/resources.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { localize } from '../../../../nls.js';\nimport { ConfirmResult, IDialogService, IPromptButton } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IRevertOptions, SaveSourceRegistry } from '../../../common/editor.js';\nimport { EditorModel } from '../../../common/editor/editorModel.js';\nimport { MergeEditorInputData } from './mergeEditorInput.js';\nimport { conflictMarkers } from './mergeMarkers/mergeMarkersController.js';\nimport { MergeDiffComputer } from './model/diffComputer.js';\nimport { InputData, MergeEditorModel } from './model/mergeEditorModel.js';\nimport { MergeEditorTelemetry } from './telemetry.js';\nimport { StorageCloseWithConflicts } from '../common/mergeEditor.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ITextFileEditorModel, ITextFileSaveOptions, ITextFileService } from '../../../services/textfile/common/textfiles.js';\n\nexport interface MergeEditorArgs {\n\tbase: URI;\n\tinput1: MergeEditorInputData;\n\tinput2: MergeEditorInputData;\n\tresult: URI;\n}\n\nexport interface IMergeEditorInputModelFactory {\n\tcreateInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel>;\n}\n\nexport interface IMergeEditorInputModel extends IDisposable {\n\treadonly resultUri: URI;\n\n\treadonly model: MergeEditorModel;\n\treadonly isDirty: IObservable<boolean>;\n\n\tsave(options?: ITextFileSaveOptions): Promise<void>;\n\n\t/**\n\t * If save resets the dirty state, revert must do so too.\n\t*/\n\trevert(options?: IRevertOptions): Promise<void>;\n\n\tshouldConfirmClose(): boolean;\n\n\tconfirmClose(inputModels: IMergeEditorInputModel[]): Promise<ConfirmResult>;\n\n\t/**\n\t * Marks the merge as done. The merge editor must be closed afterwards.\n\t*/\n\taccept(): Promise<void>;\n}\n\n/* ================ Temp File ================ */\n\nexport class TempFileMergeEditorModeFactory implements IMergeEditorInputModelFactory {\n\tconstructor(\n\t\tprivate readonly _mergeEditorTelemetry: MergeEditorTelemetry,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) {\n\t}\n\n\tasync createInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel> {\n\t\tconst store = new DisposableStore();\n\n\t\tconst [\n\t\t\tbase,\n\t\t\tresult,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t] = await Promise.all([\n\t\t\tthis._textModelService.createModelReference(args.base),\n\t\t\tthis._textModelService.createModelReference(args.result),\n\t\t\ttoInputData(args.input1, this._textModelService, store),\n\t\t\ttoInputData(args.input2, this._textModelService, store),\n\t\t]);\n\n\t\tstore.add(base);\n\t\tstore.add(result);\n\n\t\tconst tempResultUri = result.object.textEditorModel.uri.with({ scheme: 'merge-result' });\n\n\t\tconst temporaryResultModel = this._modelService.createModel(\n\t\t\t'',\n\t\t\t{\n\t\t\t\tlanguageId: result.object.textEditorModel.getLanguageId(),\n\t\t\t\tonDidChange: Event.None,\n\t\t\t},\n\t\t\ttempResultUri,\n\t\t);\n\t\tstore.add(temporaryResultModel);\n\n\t\tconst mergeDiffComputer = this._instantiationService.createInstance(MergeDiffComputer);\n\t\tconst model = this._instantiationService.createInstance(\n\t\t\tMergeEditorModel,\n\t\t\tbase.object.textEditorModel,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t\ttemporaryResultModel,\n\t\t\tmergeDiffComputer,\n\t\t\t{\n\t\t\t\tresetResult: true,\n\t\t\t},\n\t\t\tthis._mergeEditorTelemetry,\n\t\t);\n\t\tstore.add(model);\n\n\t\tawait model.onInitialized;\n\n\t\treturn this._instantiationService.createInstance(TempFileMergeEditorInputModel, model, store, result.object, args.result);\n\t}\n}\n\nclass TempFileMergeEditorInputModel extends EditorModel implements IMergeEditorInputModel {\n\tprivate readonly savedAltVersionId = observableValue(this, this.model.resultTextModel.getAlternativeVersionId());\n\tprivate readonly altVersionId = observableFromEvent(this,\n\t\te => this.model.resultTextModel.onDidChangeContent(e),\n\t\t() =>\n\t\t\t/** @description getAlternativeVersionId */ this.model.resultTextModel.getAlternativeVersionId()\n\t);\n\n\tpublic readonly isDirty = derived(this, (reader) => this.altVersionId.read(reader) !== this.savedAltVersionId.read(reader));\n\n\tprivate finished = false;\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tprivate readonly disposable: IDisposable,\n\t\tprivate readonly result: IResolvedTextEditorModel,\n\t\tpublic readonly resultUri: URI,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride dispose(): void {\n\t\tthis.disposable.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tasync accept(): Promise<void> {\n\t\tconst value = await this.model.resultTextModel.getValue();\n\t\tthis.result.textEditorModel.setValue(value);\n\t\tthis.savedAltVersionId.set(this.model.resultTextModel.getAlternativeVersionId(), undefined);\n\t\tawait this.textFileService.save(this.result.textEditorModel.uri);\n\t\tthis.finished = true;\n\t}\n\n\tprivate async _discard(): Promise<void> {\n\t\tawait this.textFileService.revert(this.model.resultTextModel.uri);\n\t\tthis.savedAltVersionId.set(this.model.resultTextModel.getAlternativeVersionId(), undefined);\n\t\tthis.finished = true;\n\t}\n\n\tpublic shouldConfirmClose(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic async confirmClose(inputModels: TempFileMergeEditorInputModel[]): Promise<ConfirmResult> {\n\t\tassertFn(\n\t\t\t() => inputModels.some((m) => m === this)\n\t\t);\n\n\t\tconst someDirty = inputModels.some((m) => m.isDirty.get());\n\t\tlet choice: ConfirmResult;\n\t\tif (someDirty) {\n\t\t\tconst isMany = inputModels.length > 1;\n\n\t\t\tconst message = isMany\n\t\t\t\t? localize('messageN', 'Do you want keep the merge result of {0} files?', inputModels.length)\n\t\t\t\t: localize('message1', 'Do you want keep the merge result of {0}?', basename(inputModels[0].model.resultTextModel.uri));\n\n\t\t\tconst hasUnhandledConflicts = inputModels.some((m) => m.model.hasUnhandledConflicts.get());\n\n\t\t\tconst buttons: IPromptButton<ConfirmResult>[] = [\n\t\t\t\t{\n\t\t\t\t\tlabel: hasUnhandledConflicts ?\n\t\t\t\t\t\tlocalize({ key: 'saveWithConflict', comment: ['&& denotes a mnemonic'] }, \"&&Save With Conflicts\") :\n\t\t\t\t\t\tlocalize({ key: 'save', comment: ['&& denotes a mnemonic'] }, \"&&Save\"),\n\t\t\t\t\trun: () => ConfirmResult.SAVE\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'discard', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\"),\n\t\t\t\t\trun: () => ConfirmResult.DONT_SAVE\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tchoice = (await this.dialogService.prompt<ConfirmResult>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tdetail:\n\t\t\t\t\thasUnhandledConflicts\n\t\t\t\t\t\t? isMany\n\t\t\t\t\t\t\t? localize('detailNConflicts', \"The files contain unhandled conflicts. The merge results will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('detail1Conflicts', \"The file contains unhandled conflicts. The merge result will be lost if you don't save it.\")\n\t\t\t\t\t\t: isMany\n\t\t\t\t\t\t\t? localize('detailN', \"The merge results will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('detail1', \"The merge result will be lost if you don't save it.\"),\n\t\t\t\tbuttons,\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => ConfirmResult.CANCEL\n\t\t\t\t}\n\t\t\t})).result;\n\t\t} else {\n\t\t\tchoice = ConfirmResult.DONT_SAVE;\n\t\t}\n\n\t\tif (choice === ConfirmResult.SAVE) {\n\t\t\t// save with conflicts\n\t\t\tawait Promise.all(inputModels.map(m => m.accept()));\n\t\t} else if (choice === ConfirmResult.DONT_SAVE) {\n\t\t\t// discard changes\n\t\t\tawait Promise.all(inputModels.map(m => m._discard()));\n\t\t} else {\n\t\t\t// cancel: stay in editor\n\t\t}\n\t\treturn choice;\n\t}\n\n\tpublic async save(options?: ITextFileSaveOptions): Promise<void> {\n\t\tif (this.finished) {\n\t\t\treturn;\n\t\t}\n\t\t// It does not make sense to save anything in the temp file mode.\n\t\t// The file stays dirty from the first edit on.\n\n\t\t(async () => {\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t'saveTempFile.message',\n\t\t\t\t\t\"Do you want to accept the merge result?\"\n\t\t\t\t),\n\t\t\t\tdetail: localize(\n\t\t\t\t\t'saveTempFile.detail',\n\t\t\t\t\t\"This will write the merge result to the original file and close the merge editor.\"\n\t\t\t\t),\n\t\t\t\tprimaryButton: localize({ key: 'acceptMerge', comment: ['&& denotes a mnemonic'] }, '&&Accept Merge')\n\t\t\t});\n\n\t\t\tif (confirmed) {\n\t\t\t\tawait this.accept();\n\t\t\t\tconst editors = this.editorService.findEditors(this.resultUri).filter(e => e.editor.typeId === 'mergeEditor.Input');\n\t\t\t\tawait this.editorService.closeEditors(editors);\n\t\t\t}\n\t\t})();\n\t}\n\n\tpublic async revert(options?: IRevertOptions): Promise<void> {\n\t\t// no op\n\t}\n}\n\n/* ================ Workspace ================ */\n\nexport class WorkspaceMergeEditorModeFactory implements IMergeEditorInputModelFactory {\n\tconstructor(\n\t\tprivate readonly _mergeEditorTelemetry: MergeEditorTelemetry,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t) {\n\t}\n\n\tprivate static readonly FILE_SAVED_SOURCE = SaveSourceRegistry.registerSource('merge-editor.source', localize('merge-editor.source', \"Before Resolving Conflicts In Merge Editor\"));\n\n\tpublic async createInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel> {\n\t\tconst store = new DisposableStore();\n\n\t\tlet resultTextFileModel = undefined as ITextFileEditorModel | undefined;\n\t\tconst modelListener = store.add(new DisposableStore());\n\t\tconst handleDidCreate = (model: ITextFileEditorModel) => {\n\t\t\tif (isEqual(args.result, model.resource)) {\n\t\t\t\tmodelListener.clear();\n\t\t\t\tresultTextFileModel = model;\n\t\t\t}\n\t\t};\n\t\tmodelListener.add(this.textFileService.files.onDidCreate(handleDidCreate));\n\t\tthis.textFileService.files.models.forEach(handleDidCreate);\n\n\t\tconst [\n\t\t\tbase,\n\t\t\tresult,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t] = await Promise.all([\n\t\t\tthis._textModelService.createModelReference(args.base),\n\t\t\tthis._textModelService.createModelReference(args.result),\n\t\t\ttoInputData(args.input1, this._textModelService, store),\n\t\t\ttoInputData(args.input2, this._textModelService, store),\n\t\t]);\n\n\t\tstore.add(base);\n\t\tstore.add(result);\n\n\t\tif (!resultTextFileModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\t\t// So that \"Don't save\" does revert the file\n\t\tawait resultTextFileModel.save({ source: WorkspaceMergeEditorModeFactory.FILE_SAVED_SOURCE });\n\n\t\tconst lines = resultTextFileModel.textEditorModel!.getLinesContent();\n\t\tconst hasConflictMarkers = lines.some(l => l.startsWith(conflictMarkers.start));\n\t\tconst resetResult = hasConflictMarkers;\n\n\t\tconst mergeDiffComputer = this._instantiationService.createInstance(MergeDiffComputer);\n\n\t\tconst model = this._instantiationService.createInstance(\n\t\t\tMergeEditorModel,\n\t\t\tbase.object.textEditorModel,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t\tresult.object.textEditorModel,\n\t\t\tmergeDiffComputer,\n\t\t\t{\n\t\t\t\tresetResult\n\t\t\t},\n\t\t\tthis._mergeEditorTelemetry,\n\t\t);\n\t\tstore.add(model);\n\n\t\tawait model.onInitialized;\n\n\t\treturn this._instantiationService.createInstance(WorkspaceMergeEditorInputModel, model, store, resultTextFileModel, this._mergeEditorTelemetry);\n\t}\n}\n\nclass WorkspaceMergeEditorInputModel extends EditorModel implements IMergeEditorInputModel {\n\tpublic readonly isDirty = observableFromEvent(this,\n\t\tEvent.any(this.resultTextFileModel.onDidChangeDirty, this.resultTextFileModel.onDidSaveError),\n\t\t() => /** @description isDirty */ this.resultTextFileModel.isDirty()\n\t);\n\n\tprivate reported = false;\n\tprivate readonly dateTimeOpened = new Date();\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tprivate readonly disposableStore: DisposableStore,\n\t\tprivate readonly resultTextFileModel: ITextFileEditorModel,\n\t\tprivate readonly telemetry: MergeEditorTelemetry,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.disposableStore.dispose();\n\t\tsuper.dispose();\n\n\t\tthis.reportClose(false);\n\t}\n\n\tprivate reportClose(accepted: boolean): void {\n\t\tif (!this.reported) {\n\t\t\tconst remainingConflictCount = this.model.unhandledConflictsCount.get();\n\t\t\tconst durationOpenedMs = new Date().getTime() - this.dateTimeOpened.getTime();\n\t\t\tthis.telemetry.reportMergeEditorClosed({\n\t\t\t\tdurationOpenedSecs: durationOpenedMs / 1000,\n\t\t\t\tremainingConflictCount,\n\t\t\t\taccepted,\n\n\t\t\t\tconflictCount: this.model.conflictCount,\n\t\t\t\tcombinableConflictCount: this.model.combinableConflictCount,\n\n\t\t\t\tconflictsResolvedWithBase: this.model.conflictsResolvedWithBase,\n\t\t\t\tconflictsResolvedWithInput1: this.model.conflictsResolvedWithInput1,\n\t\t\t\tconflictsResolvedWithInput2: this.model.conflictsResolvedWithInput2,\n\t\t\t\tconflictsResolvedWithSmartCombination: this.model.conflictsResolvedWithSmartCombination,\n\n\t\t\t\tmanuallySolvedConflictCountThatEqualNone: this.model.manuallySolvedConflictCountThatEqualNone,\n\t\t\t\tmanuallySolvedConflictCountThatEqualSmartCombine: this.model.manuallySolvedConflictCountThatEqualSmartCombine,\n\t\t\t\tmanuallySolvedConflictCountThatEqualInput1: this.model.manuallySolvedConflictCountThatEqualInput1,\n\t\t\t\tmanuallySolvedConflictCountThatEqualInput2: this.model.manuallySolvedConflictCountThatEqualInput2,\n\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBase: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithBase,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithInput1: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithInput1,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithInput2: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithInput2,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBothNonSmart: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithBothNonSmart,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBothSmart: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithBothSmart,\n\t\t\t});\n\t\t\tthis.reported = true;\n\t\t}\n\t}\n\n\tpublic async accept(): Promise<void> {\n\t\tthis.reportClose(true);\n\t\tawait this.resultTextFileModel.save();\n\t}\n\n\tget resultUri(): URI {\n\t\treturn this.resultTextFileModel.resource;\n\t}\n\n\tasync save(options?: ITextFileSaveOptions): Promise<void> {\n\t\tawait this.resultTextFileModel.save(options);\n\t}\n\n\t/**\n\t * If save resets the dirty state, revert must do so too.\n\t*/\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tawait this.resultTextFileModel.revert(options);\n\t}\n\n\tshouldConfirmClose(): boolean {\n\t\t// Always confirm\n\t\treturn true;\n\t}\n\n\tasync confirmClose(inputModels: IMergeEditorInputModel[]): Promise<ConfirmResult> {\n\t\tconst isMany = inputModels.length > 1;\n\t\tconst someDirty = inputModels.some(m => m.isDirty.get());\n\t\tconst someUnhandledConflicts = inputModels.some(m => m.model.hasUnhandledConflicts.get());\n\t\tif (someDirty) {\n\t\t\tconst message = isMany\n\t\t\t\t? localize('workspace.messageN', 'Do you want to save the changes you made to {0} files?', inputModels.length)\n\t\t\t\t: localize('workspace.message1', 'Do you want to save the changes you made to {0}?', basename(inputModels[0].resultUri));\n\t\t\tconst { result } = await this._dialogService.prompt<ConfirmResult>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tdetail:\n\t\t\t\t\tsomeUnhandledConflicts ?\n\t\t\t\t\t\tisMany\n\t\t\t\t\t\t\t? localize('workspace.detailN.unhandled', \"The files contain unhandled conflicts. Your changes will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('workspace.detail1.unhandled', \"The file contains unhandled conflicts. Your changes will be lost if you don't save them.\")\n\t\t\t\t\t\t: isMany\n\t\t\t\t\t\t\t? localize('workspace.detailN.handled', \"Your changes will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('workspace.detail1.handled', \"Your changes will be lost if you don't save them.\"),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: someUnhandledConflicts\n\t\t\t\t\t\t\t? localize({ key: 'workspace.saveWithConflict', comment: ['&& denotes a mnemonic'] }, '&&Save with Conflicts')\n\t\t\t\t\t\t\t: localize({ key: 'workspace.save', comment: ['&& denotes a mnemonic'] }, '&&Save'),\n\t\t\t\t\t\trun: () => ConfirmResult.SAVE\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize({ key: 'workspace.doNotSave', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\"),\n\t\t\t\t\t\trun: () => ConfirmResult.DONT_SAVE\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => ConfirmResult.CANCEL\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\n\t\t} else if (someUnhandledConflicts && !this._storageService.getBoolean(StorageCloseWithConflicts, StorageScope.PROFILE, false)) {\n\t\t\tconst { confirmed, checkboxChecked } = await this._dialogService.confirm({\n\t\t\t\tmessage: isMany\n\t\t\t\t\t? localize('workspace.messageN.nonDirty', 'Do you want to close {0} merge editors?', inputModels.length)\n\t\t\t\t\t: localize('workspace.message1.nonDirty', 'Do you want to close the merge editor for {0}?', basename(inputModels[0].resultUri)),\n\t\t\t\tdetail: someUnhandledConflicts ?\n\t\t\t\t\tisMany\n\t\t\t\t\t\t? localize('workspace.detailN.unhandled.nonDirty', \"The files contain unhandled conflicts.\")\n\t\t\t\t\t\t: localize('workspace.detail1.unhandled.nonDirty', \"The file contains unhandled conflicts.\")\n\t\t\t\t\t: undefined,\n\t\t\t\tprimaryButton: someUnhandledConflicts\n\t\t\t\t\t? localize({ key: 'workspace.closeWithConflicts', comment: ['&& denotes a mnemonic'] }, '&&Close with Conflicts')\n\t\t\t\t\t: localize({ key: 'workspace.close', comment: ['&& denotes a mnemonic'] }, '&&Close'),\n\t\t\t\tcheckbox: { label: localize('noMoreWarn', \"Do not ask me again\") }\n\t\t\t});\n\n\t\t\tif (checkboxChecked) {\n\t\t\t\tthis._storageService.store(StorageCloseWithConflicts, true, StorageScope.PROFILE, StorageTarget.USER);\n\t\t\t}\n\n\t\t\treturn confirmed ? ConfirmResult.SAVE : ConfirmResult.CANCEL;\n\t\t} else {\n\t\t\t// This shouldn't do anything\n\t\t\treturn ConfirmResult.SAVE;\n\t\t}\n\t}\n}\n\n/* ================= Utils ================== */\n\nasync function toInputData(data: MergeEditorInputData, textModelService: ITextModelService, store: DisposableStore): Promise<InputData> {\n\tconst ref = await textModelService.createModelReference(data.uri);\n\tstore.add(ref);\n\treturn {\n\t\ttextModel: ref.object.textEditorModel,\n\t\ttitle: data.title,\n\t\tdescription: data.description,\n\t\tdetail: data.detail,\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AACnC,SAAS,aAAa;AACtB,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,SAAS,aAAa,qBAAqB,uBAAuB;AAC3E,SAAS,UAAU,eAAe;AAClC,OAAO,cAAc;AACrB,SAAS,WAAW;AACpB,SAAS,qBAAqB;AAC9B,SAAS,0BAA0B,yBAAyB;AAC5D,SAAS,gBAAgB;AACzB,SAAS,eAAe,gBAAgB,qBAAqB;AAC7D,SAAS,6BAA6B;AACtC,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,gBAAgB,0BAA0B;AACnD,SAAS,mBAAmB;AAC5B,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,WAAW,wBAAwB;AAC5C,SAAS,4BAA4B;AACrC,SAAS,iCAAiC;AAC1C,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB,sBAAsB,wBAAwB;AAsCtE,IAAM,iCAAN,MAA8E;AAAA,EACpF,YACkB,uBACuB,uBACJ,mBACJ,eAC/B;AAJgB;AACuB;AACJ;AACJ;AAAA,EAEjC;AAAA,EAzED,OAkEqF;AAAA;AAAA;AAAA,EASpF,MAAM,iBAAiB,MAAwD;AAC9E,UAAM,QAAQ,IAAI,gBAAgB;AAElC,UAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,IAAI,MAAM,QAAQ,IAAI;AAAA,MACrB,KAAK,kBAAkB,qBAAqB,KAAK,IAAI;AAAA,MACrD,KAAK,kBAAkB,qBAAqB,KAAK,MAAM;AAAA,MACvD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,MACtD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,IACvD,CAAC;AAED,UAAM,IAAI,IAAI;AACd,UAAM,IAAI,MAAM;AAEhB,UAAM,gBAAgB,OAAO,OAAO,gBAAgB,IAAI,KAAK,EAAE,QAAQ,eAAe,CAAC;AAEvF,UAAM,uBAAuB,KAAK,cAAc;AAAA,MAC/C;AAAA,MACA;AAAA,QACC,YAAY,OAAO,OAAO,gBAAgB,cAAc;AAAA,QACxD,aAAa,MAAM;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AACA,UAAM,IAAI,oBAAoB;AAE9B,UAAM,oBAAoB,KAAK,sBAAsB,eAAe,iBAAiB;AACrF,UAAM,QAAQ,KAAK,sBAAsB;AAAA,MACxC;AAAA,MACA,KAAK,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACC,aAAa;AAAA,MACd;AAAA,MACA,KAAK;AAAA,IACN;AACA,UAAM,IAAI,KAAK;AAEf,UAAM,MAAM;AAEZ,WAAO,KAAK,sBAAsB,eAAe,+BAA+B,OAAO,OAAO,OAAO,QAAQ,KAAK,MAAM;AAAA,EACzH;AACD;AA1Da,iCAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,GALU;AA4Db,IAAM,gCAAN,cAA4C,YAA8C;AAAA,EAYzF,YACiB,OACC,YACA,QACD,WACmB,iBACF,eACA,eAChC;AACD,UAAM;AARU;AACC;AACA;AACD;AACmB;AACF;AACA;AAAA,EAGlC;AAAA,EApJD,OA8H0F;AAAA;AAAA;AAAA,EACxE,oBAAoB,gBAAgB,MAAM,KAAK,MAAM,gBAAgB,wBAAwB,CAAC;AAAA,EAC9F,eAAe;AAAA,IAAoB;AAAA,IACnD,OAAK,KAAK,MAAM,gBAAgB,mBAAmB,CAAC;AAAA,IACpD;AAAA;AAAA,MAC6C,KAAK,MAAM,gBAAgB,wBAAwB;AAAA;AAAA,EACjG;AAAA,EAEgB,UAAU,QAAQ,MAAM,CAAC,WAAW,KAAK,aAAa,KAAK,MAAM,MAAM,KAAK,kBAAkB,KAAK,MAAM,CAAC;AAAA,EAElH,WAAW;AAAA,EAcV,UAAgB;AACxB,SAAK,WAAW,QAAQ;AACxB,UAAM,QAAQ;AAAA,EACf;AAAA,EAEA,MAAM,SAAwB;AAC7B,UAAM,QAAQ,MAAM,KAAK,MAAM,gBAAgB,SAAS;AACxD,SAAK,OAAO,gBAAgB,SAAS,KAAK;AAC1C,SAAK,kBAAkB,IAAI,KAAK,MAAM,gBAAgB,wBAAwB,GAAG,MAAS;AAC1F,UAAM,KAAK,gBAAgB,KAAK,KAAK,OAAO,gBAAgB,GAAG;AAC/D,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,MAAc,WAA0B;AACvC,UAAM,KAAK,gBAAgB,OAAO,KAAK,MAAM,gBAAgB,GAAG;AAChE,SAAK,kBAAkB,IAAI,KAAK,MAAM,gBAAgB,wBAAwB,GAAG,MAAS;AAC1F,SAAK,WAAW;AAAA,EACjB;AAAA,EAEO,qBAA8B;AACpC,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,aAAa,aAAsE;AAC/F;AAAA,MACC,MAAM,YAAY,KAAK,CAAC,MAAM,MAAM,IAAI;AAAA,IACzC;AAEA,UAAM,YAAY,YAAY,KAAK,CAAC,MAAM,EAAE,QAAQ,IAAI,CAAC;AACzD,QAAI;AACJ,QAAI,WAAW;AACd,YAAM,SAAS,YAAY,SAAS;AAEpC,YAAM,UAAU,SACb,SAAS,YAAY,mDAAmD,YAAY,MAAM,IAC1F,SAAS,YAAY,6CAA6C,SAAS,YAAY,CAAC,EAAE,MAAM,gBAAgB,GAAG,CAAC;AAEvH,YAAM,wBAAwB,YAAY,KAAK,CAAC,MAAM,EAAE,MAAM,sBAAsB,IAAI,CAAC;AAEzF,YAAM,UAA0C;AAAA,QAC/C;AAAA,UACC,OAAO,wBACN,SAAS,EAAE,KAAK,oBAAoB,SAAS,CAAC,uBAAuB,EAAE,GAAG,uBAAuB,IACjG,SAAS,EAAE,KAAK,QAAQ,SAAS,CAAC,uBAAuB,EAAE,GAAG,QAAQ;AAAA,UACvE,KAAK,6BAAM,cAAc,MAApB;AAAA,QACN;AAAA,QACA;AAAA,UACC,OAAO,SAAS,EAAE,KAAK,WAAW,SAAS,CAAC,uBAAuB,EAAE,GAAG,cAAc;AAAA,UACtF,KAAK,6BAAM,cAAc,WAApB;AAAA,QACN;AAAA,MACD;AAEA,gBAAU,MAAM,KAAK,cAAc,OAAsB;AAAA,QACxD,MAAM,SAAS;AAAA,QACf;AAAA,QACA,QACC,wBACG,SACC,SAAS,oBAAoB,+FAA+F,IAC5H,SAAS,oBAAoB,4FAA4F,IAC1H,SACC,SAAS,WAAW,wDAAwD,IAC5E,SAAS,WAAW,qDAAqD;AAAA,QAC9E;AAAA,QACA,cAAc;AAAA,UACb,KAAK,6BAAM,cAAc,QAApB;AAAA,QACN;AAAA,MACD,CAAC,GAAG;AAAA,IACL,OAAO;AACN,eAAS,cAAc;AAAA,IACxB;AAEA,QAAI,WAAW,cAAc,MAAM;AAElC,YAAM,QAAQ,IAAI,YAAY,IAAI,OAAK,EAAE,OAAO,CAAC,CAAC;AAAA,IACnD,WAAW,WAAW,cAAc,WAAW;AAE9C,YAAM,QAAQ,IAAI,YAAY,IAAI,OAAK,EAAE,SAAS,CAAC,CAAC;AAAA,IACrD,OAAO;AAAA,IAEP;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,KAAK,SAA+C;AAChE,QAAI,KAAK,UAAU;AAClB;AAAA,IACD;AAIA,KAAC,YAAY;AACZ,YAAM,EAAE,UAAU,IAAI,MAAM,KAAK,cAAc,QAAQ;AAAA,QACtD,SAAS;AAAA,UACR;AAAA,UACA;AAAA,QACD;AAAA,QACA,QAAQ;AAAA,UACP;AAAA,UACA;AAAA,QACD;AAAA,QACA,eAAe,SAAS,EAAE,KAAK,eAAe,SAAS,CAAC,uBAAuB,EAAE,GAAG,gBAAgB;AAAA,MACrG,CAAC;AAED,UAAI,WAAW;AACd,cAAM,KAAK,OAAO;AAClB,cAAM,UAAU,KAAK,cAAc,YAAY,KAAK,SAAS,EAAE,OAAO,OAAK,EAAE,OAAO,WAAW,mBAAmB;AAClH,cAAM,KAAK,cAAc,aAAa,OAAO;AAAA,MAC9C;AAAA,IACD,GAAG;AAAA,EACJ;AAAA,EAEA,MAAa,OAAO,SAAyC;AAAA,EAE7D;AACD;AA3IM,gCAAN;AAAA,EAiBG;AAAA,EACA;AAAA,EACA;AAAA,GAnBG;AA+IC,IAAM,kCAAN,MAA+E;AAAA,EACrF,YACkB,uBACuB,uBACJ,mBACD,iBAClC;AAJgB;AACuB;AACJ;AACD;AAAA,EAEpC;AAAA,EApRD,OA6QsF;AAAA;AAAA;AAAA,EASrF,OAAwB,oBAAoB,mBAAmB,eAAe,uBAAuB,SAAS,uBAAuB,4CAA4C,CAAC;AAAA,EAElL,MAAa,iBAAiB,MAAwD;AACrF,UAAM,QAAQ,IAAI,gBAAgB;AAElC,QAAI,sBAAsB;AAC1B,UAAM,gBAAgB,MAAM,IAAI,IAAI,gBAAgB,CAAC;AACrD,UAAM,kBAAkB,wBAACA,WAAgC;AACxD,UAAI,QAAQ,KAAK,QAAQA,OAAM,QAAQ,GAAG;AACzC,sBAAc,MAAM;AACpB,8BAAsBA;AAAA,MACvB;AAAA,IACD,GALwB;AAMxB,kBAAc,IAAI,KAAK,gBAAgB,MAAM,YAAY,eAAe,CAAC;AACzE,SAAK,gBAAgB,MAAM,OAAO,QAAQ,eAAe;AAEzD,UAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,IAAI,MAAM,QAAQ,IAAI;AAAA,MACrB,KAAK,kBAAkB,qBAAqB,KAAK,IAAI;AAAA,MACrD,KAAK,kBAAkB,qBAAqB,KAAK,MAAM;AAAA,MACvD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,MACtD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,IACvD,CAAC;AAED,UAAM,IAAI,IAAI;AACd,UAAM,IAAI,MAAM;AAEhB,QAAI,CAAC,qBAAqB;AACzB,YAAM,IAAI,mBAAmB;AAAA,IAC9B;AAEA,UAAM,oBAAoB,KAAK,EAAE,QAAQ,gCAAgC,kBAAkB,CAAC;AAE5F,UAAM,QAAQ,oBAAoB,gBAAiB,gBAAgB;AACnE,UAAM,qBAAqB,MAAM,KAAK,OAAK,EAAE,WAAW,gBAAgB,KAAK,CAAC;AAC9E,UAAM,cAAc;AAEpB,UAAM,oBAAoB,KAAK,sBAAsB,eAAe,iBAAiB;AAErF,UAAM,QAAQ,KAAK,sBAAsB;AAAA,MACxC;AAAA,MACA,KAAK,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA,OAAO,OAAO;AAAA,MACd;AAAA,MACA;AAAA,QACC;AAAA,MACD;AAAA,MACA,KAAK;AAAA,IACN;AACA,UAAM,IAAI,KAAK;AAEf,UAAM,MAAM;AAEZ,WAAO,KAAK,sBAAsB,eAAe,gCAAgC,OAAO,OAAO,qBAAqB,KAAK,qBAAqB;AAAA,EAC/I;AACD;AAtEa,kCAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,GALU;AAwEb,IAAM,iCAAN,cAA6C,YAA8C;AAAA,EAS1F,YACiB,OACC,iBACA,qBACA,WACgB,gBACC,iBACjC;AACD,UAAM;AAPU;AACC;AACA;AACA;AACgB;AACC;AAAA,EAGnC;AAAA,EAvWD,OAqV2F;AAAA;AAAA;AAAA,EAC1E,UAAU;AAAA,IAAoB;AAAA,IAC7C,MAAM,IAAI,KAAK,oBAAoB,kBAAkB,KAAK,oBAAoB,cAAc;AAAA,IAC5F;AAAA;AAAA,MAAkC,KAAK,oBAAoB,QAAQ;AAAA;AAAA,EACpE;AAAA,EAEQ,WAAW;AAAA,EACF,iBAAiB,oBAAI,KAAK;AAAA,EAa3B,UAAgB;AAC/B,SAAK,gBAAgB,QAAQ;AAC7B,UAAM,QAAQ;AAEd,SAAK,YAAY,KAAK;AAAA,EACvB;AAAA,EAEQ,YAAY,UAAyB;AAC5C,QAAI,CAAC,KAAK,UAAU;AACnB,YAAM,yBAAyB,KAAK,MAAM,wBAAwB,IAAI;AACtE,YAAM,oBAAmB,oBAAI,KAAK,GAAE,QAAQ,IAAI,KAAK,eAAe,QAAQ;AAC5E,WAAK,UAAU,wBAAwB;AAAA,QACtC,oBAAoB,mBAAmB;AAAA,QACvC;AAAA,QACA;AAAA,QAEA,eAAe,KAAK,MAAM;AAAA,QAC1B,yBAAyB,KAAK,MAAM;AAAA,QAEpC,2BAA2B,KAAK,MAAM;AAAA,QACtC,6BAA6B,KAAK,MAAM;AAAA,QACxC,6BAA6B,KAAK,MAAM;AAAA,QACxC,uCAAuC,KAAK,MAAM;AAAA,QAElD,0CAA0C,KAAK,MAAM;AAAA,QACrD,kDAAkD,KAAK,MAAM;AAAA,QAC7D,4CAA4C,KAAK,MAAM;AAAA,QACvD,4CAA4C,KAAK,MAAM;AAAA,QAEvD,4DAA4D,KAAK,MAAM;AAAA,QACvE,8DAA8D,KAAK,MAAM;AAAA,QACzE,8DAA8D,KAAK,MAAM;AAAA,QACzE,oEAAoE,KAAK,MAAM;AAAA,QAC/E,iEAAiE,KAAK,MAAM;AAAA,MAC7E,CAAC;AACD,WAAK,WAAW;AAAA,IACjB;AAAA,EACD;AAAA,EAEA,MAAa,SAAwB;AACpC,SAAK,YAAY,IAAI;AACrB,UAAM,KAAK,oBAAoB,KAAK;AAAA,EACrC;AAAA,EAEA,IAAI,YAAiB;AACpB,WAAO,KAAK,oBAAoB;AAAA,EACjC;AAAA,EAEA,MAAM,KAAK,SAA+C;AACzD,UAAM,KAAK,oBAAoB,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,SAAyC;AACrD,UAAM,KAAK,oBAAoB,OAAO,OAAO;AAAA,EAC9C;AAAA,EAEA,qBAA8B;AAE7B,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,aAAa,aAA+D;AACjF,UAAM,SAAS,YAAY,SAAS;AACpC,UAAM,YAAY,YAAY,KAAK,OAAK,EAAE,QAAQ,IAAI,CAAC;AACvD,UAAM,yBAAyB,YAAY,KAAK,OAAK,EAAE,MAAM,sBAAsB,IAAI,CAAC;AACxF,QAAI,WAAW;AACd,YAAM,UAAU,SACb,SAAS,sBAAsB,0DAA0D,YAAY,MAAM,IAC3G,SAAS,sBAAsB,oDAAoD,SAAS,YAAY,CAAC,EAAE,SAAS,CAAC;AACxH,YAAM,EAAE,OAAO,IAAI,MAAM,KAAK,eAAe,OAAsB;AAAA,QAClE,MAAM,SAAS;AAAA,QACf;AAAA,QACA,QACC,yBACC,SACG,SAAS,+BAA+B,0FAA0F,IAClI,SAAS,+BAA+B,0FAA0F,IACnI,SACC,SAAS,6BAA6B,mDAAmD,IACzF,SAAS,6BAA6B,mDAAmD;AAAA,QAC9F,SAAS;AAAA,UACR;AAAA,YACC,OAAO,yBACJ,SAAS,EAAE,KAAK,8BAA8B,SAAS,CAAC,uBAAuB,EAAE,GAAG,uBAAuB,IAC3G,SAAS,EAAE,KAAK,kBAAkB,SAAS,CAAC,uBAAuB,EAAE,GAAG,QAAQ;AAAA,YACnF,KAAK,6BAAM,cAAc,MAApB;AAAA,UACN;AAAA,UACA;AAAA,YACC,OAAO,SAAS,EAAE,KAAK,uBAAuB,SAAS,CAAC,uBAAuB,EAAE,GAAG,cAAc;AAAA,YAClG,KAAK,6BAAM,cAAc,WAApB;AAAA,UACN;AAAA,QACD;AAAA,QACA,cAAc;AAAA,UACb,KAAK,6BAAM,cAAc,QAApB;AAAA,QACN;AAAA,MACD,CAAC;AACD,aAAO;AAAA,IAER,WAAW,0BAA0B,CAAC,KAAK,gBAAgB,WAAW,2BAA2B,aAAa,SAAS,KAAK,GAAG;AAC9H,YAAM,EAAE,WAAW,gBAAgB,IAAI,MAAM,KAAK,eAAe,QAAQ;AAAA,QACxE,SAAS,SACN,SAAS,+BAA+B,2CAA2C,YAAY,MAAM,IACrG,SAAS,+BAA+B,kDAAkD,SAAS,YAAY,CAAC,EAAE,SAAS,CAAC;AAAA,QAC/H,QAAQ,yBACP,SACG,SAAS,wCAAwC,wCAAwC,IACzF,SAAS,wCAAwC,wCAAwC,IAC1F;AAAA,QACH,eAAe,yBACZ,SAAS,EAAE,KAAK,gCAAgC,SAAS,CAAC,uBAAuB,EAAE,GAAG,wBAAwB,IAC9G,SAAS,EAAE,KAAK,mBAAmB,SAAS,CAAC,uBAAuB,EAAE,GAAG,SAAS;AAAA,QACrF,UAAU,EAAE,OAAO,SAAS,cAAc,qBAAqB,EAAE;AAAA,MAClE,CAAC;AAED,UAAI,iBAAiB;AACpB,aAAK,gBAAgB,MAAM,2BAA2B,MAAM,aAAa,SAAS,cAAc,IAAI;AAAA,MACrG;AAEA,aAAO,YAAY,cAAc,OAAO,cAAc;AAAA,IACvD,OAAO;AAEN,aAAO,cAAc;AAAA,IACtB;AAAA,EACD;AACD;AAnJM,iCAAN;AAAA,EAcG;AAAA,EACA;AAAA,GAfG;AAuJN,eAAe,YAAY,MAA4B,kBAAqC,OAA4C;AACvI,QAAM,MAAM,MAAM,iBAAiB,qBAAqB,KAAK,GAAG;AAChE,QAAM,IAAI,GAAG;AACb,SAAO;AAAA,IACN,WAAW,IAAI,OAAO;AAAA,IACtB,OAAO,KAAK;AAAA,IACZ,aAAa,KAAK;AAAA,IAClB,QAAQ,KAAK;AAAA,EACd;AACD;AATe;",
  "names": ["model"]
}
