{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertFn } from \"../../../../base/common/assert.js\";\nimport { BugIndicatingError } from \"../../../../base/common/errors.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tderived,\n\tobservableFromEvent,\n\tobservableValue,\n} from \"../../../../base/common/observable.js\";\nimport { basename, isEqual } from \"../../../../base/common/resources.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tConfirmResult,\n\tIDialogService,\n\ttype IPromptButton,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype IRevertOptions,\n\tSaveSourceRegistry,\n} from \"../../../common/editor.js\";\nimport { EditorModel } from \"../../../common/editor/editorModel.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport {\n\ttype ITextFileEditorModel,\n\ttype ITextFileSaveOptions,\n\tITextFileService,\n} from \"../../../services/textfile/common/textfiles.js\";\nimport { StorageCloseWithConflicts } from \"../common/mergeEditor.js\";\nimport type { MergeEditorInputData } from \"./mergeEditorInput.js\";\nimport { conflictMarkers } from \"./mergeMarkers/mergeMarkersController.js\";\nimport { MergeDiffComputer } from \"./model/diffComputer.js\";\nimport { type InputData, MergeEditorModel } from \"./model/mergeEditorModel.js\";\nimport type { MergeEditorTelemetry } from \"./telemetry.js\";\n\nexport interface MergeEditorArgs {\n\tbase: URI;\n\tinput1: MergeEditorInputData;\n\tinput2: MergeEditorInputData;\n\tresult: URI;\n}\n\nexport interface IMergeEditorInputModelFactory {\n\tcreateInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel>;\n}\n\nexport interface IMergeEditorInputModel extends IDisposable {\n\treadonly resultUri: URI;\n\n\treadonly model: MergeEditorModel;\n\treadonly isDirty: IObservable<boolean>;\n\n\tsave(options?: ITextFileSaveOptions): Promise<void>;\n\n\t/**\n\t * If save resets the dirty state, revert must do so too.\n\t */\n\trevert(options?: IRevertOptions): Promise<void>;\n\n\tshouldConfirmClose(): boolean;\n\n\tconfirmClose(inputModels: IMergeEditorInputModel[]): Promise<ConfirmResult>;\n\n\t/**\n\t * Marks the merge as done. The merge editor must be closed afterwards.\n\t */\n\taccept(): Promise<void>;\n}\n\n/* ================ Temp File ================ */\n\nexport class TempFileMergeEditorModeFactory\n\timplements IMergeEditorInputModelFactory\n{\n\tconstructor(\n\t\tprivate readonly _mergeEditorTelemetry: MergeEditorTelemetry,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) {\n\t}\n\n\tasync createInputModel(\n\t\targs: MergeEditorArgs,\n\t): Promise<IMergeEditorInputModel> {\n\t\tconst store = new DisposableStore();\n\n\t\tconst [base, result, input1Data, input2Data] = await Promise.all([\n\t\t\tthis._textModelService.createModelReference(args.base),\n\t\t\tthis._textModelService.createModelReference(args.result),\n\t\t\ttoInputData(args.input1, this._textModelService, store),\n\t\t\ttoInputData(args.input2, this._textModelService, store),\n\t\t]);\n\n\t\tstore.add(base);\n\t\tstore.add(result);\n\n\t\tconst tempResultUri = result.object.textEditorModel.uri.with({\n\t\t\tscheme: \"merge-result\",\n\t\t});\n\n\t\tconst temporaryResultModel = this._modelService.createModel(\n\t\t\t\"\",\n\t\t\t{\n\t\t\t\tlanguageId: result.object.textEditorModel.getLanguageId(),\n\t\t\t\tonDidChange: Event.None,\n\t\t\t},\n\t\t\ttempResultUri,\n\t\t);\n\t\tstore.add(temporaryResultModel);\n\n\t\tconst mergeDiffComputer =\n\t\t\tthis._instantiationService.createInstance(MergeDiffComputer);\n\t\tconst model = this._instantiationService.createInstance(\n\t\t\tMergeEditorModel,\n\t\t\tbase.object.textEditorModel,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t\ttemporaryResultModel,\n\t\t\tmergeDiffComputer,\n\t\t\t{\n\t\t\t\tresetResult: true,\n\t\t\t},\n\t\t\tthis._mergeEditorTelemetry,\n\t\t);\n\t\tstore.add(model);\n\n\t\tawait model.onInitialized;\n\n\t\treturn this._instantiationService.createInstance(\n\t\t\tTempFileMergeEditorInputModel,\n\t\t\tmodel,\n\t\t\tstore,\n\t\t\tresult.object,\n\t\t\targs.result,\n\t\t);\n\t}\n}\n\nclass TempFileMergeEditorInputModel\n\textends EditorModel\n\timplements IMergeEditorInputModel\n{\n\tprivate readonly savedAltVersionId = observableValue(\n\t\tthis,\n\t\tthis.model.resultTextModel.getAlternativeVersionId(),\n\t);\n\tprivate readonly altVersionId = observableFromEvent(\n\t\tthis,\n\t\t(e) => this.model.resultTextModel.onDidChangeContent(e),\n\t\t() =>\n\t\t\t/** @description getAlternativeVersionId */ this.model.resultTextModel.getAlternativeVersionId(),\n\t);\n\n\tpublic readonly isDirty = derived(\n\t\tthis,\n\t\t(reader) =>\n\t\t\tthis.altVersionId.read(reader) !==\n\t\t\tthis.savedAltVersionId.read(reader),\n\t);\n\n\tprivate finished = false;\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tprivate readonly disposable: IDisposable,\n\t\tprivate readonly result: IResolvedTextEditorModel,\n\t\tpublic readonly resultUri: URI,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride dispose(): void {\n\t\tthis.disposable.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tasync accept(): Promise<void> {\n\t\tconst value = await this.model.resultTextModel.getValue();\n\t\tthis.result.textEditorModel.setValue(value);\n\t\tthis.savedAltVersionId.set(\n\t\t\tthis.model.resultTextModel.getAlternativeVersionId(),\n\t\t\tundefined,\n\t\t);\n\t\tawait this.textFileService.save(this.result.textEditorModel.uri);\n\t\tthis.finished = true;\n\t}\n\n\tprivate async _discard(): Promise<void> {\n\t\tawait this.textFileService.revert(this.model.resultTextModel.uri);\n\t\tthis.savedAltVersionId.set(\n\t\t\tthis.model.resultTextModel.getAlternativeVersionId(),\n\t\t\tundefined,\n\t\t);\n\t\tthis.finished = true;\n\t}\n\n\tpublic shouldConfirmClose(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic async confirmClose(\n\t\tinputModels: TempFileMergeEditorInputModel[],\n\t): Promise<ConfirmResult> {\n\t\tassertFn(() => inputModels.some((m) => m === this));\n\n\t\tconst someDirty = inputModels.some((m) => m.isDirty.get());\n\t\tlet choice: ConfirmResult;\n\t\tif (someDirty) {\n\t\t\tconst isMany = inputModels.length > 1;\n\n\t\t\tconst message = isMany\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"messageN\",\n\t\t\t\t\t\t\"Do you want keep the merge result of {0} files?\",\n\t\t\t\t\t\tinputModels.length,\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"message1\",\n\t\t\t\t\t\t\"Do you want keep the merge result of {0}?\",\n\t\t\t\t\t\tbasename(inputModels[0].model.resultTextModel.uri),\n\t\t\t\t\t);\n\n\t\t\tconst hasUnhandledConflicts = inputModels.some((m) =>\n\t\t\t\tm.model.hasUnhandledConflicts.get(),\n\t\t\t);\n\n\t\t\tconst buttons: IPromptButton<ConfirmResult>[] = [\n\t\t\t\t{\n\t\t\t\t\tlabel: hasUnhandledConflicts\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"saveWithConflict\",\n\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"&&Save With Conflicts\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"save\",\n\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"&&Save\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\trun: () => ConfirmResult.SAVE,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t{ key: \"discard\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"Do&&n't Save\",\n\t\t\t\t\t),\n\t\t\t\t\trun: () => ConfirmResult.DONT_SAVE,\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tchoice = (\n\t\t\t\tawait this.dialogService.prompt<ConfirmResult>({\n\t\t\t\t\ttype: Severity.Info,\n\t\t\t\t\tmessage,\n\t\t\t\t\tdetail: hasUnhandledConflicts\n\t\t\t\t\t\t? isMany\n\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\"detailNConflicts\",\n\t\t\t\t\t\t\t\t\t\"The files contain unhandled conflicts. The merge results will be lost if you don't save them.\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\"detail1Conflicts\",\n\t\t\t\t\t\t\t\t\t\"The file contains unhandled conflicts. The merge result will be lost if you don't save it.\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: isMany\n\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\"detailN\",\n\t\t\t\t\t\t\t\t\t\"The merge results will be lost if you don't save them.\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\"detail1\",\n\t\t\t\t\t\t\t\t\t\"The merge result will be lost if you don't save it.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\tbuttons,\n\t\t\t\t\tcancelButton: {\n\t\t\t\t\t\trun: () => ConfirmResult.CANCEL,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t).result;\n\t\t} else {\n\t\t\tchoice = ConfirmResult.DONT_SAVE;\n\t\t}\n\n\t\tif (choice === ConfirmResult.SAVE) {\n\t\t\t// save with conflicts\n\t\t\tawait Promise.all(inputModels.map((m) => m.accept()));\n\t\t} else if (choice === ConfirmResult.DONT_SAVE) {\n\t\t\t// discard changes\n\t\t\tawait Promise.all(inputModels.map((m) => m._discard()));\n\t\t} else {\n\t\t\t// cancel: stay in editor\n\t\t}\n\t\treturn choice;\n\t}\n\n\tpublic async save(options?: ITextFileSaveOptions): Promise<void> {\n\t\tif (this.finished) {\n\t\t\treturn;\n\t\t}\n\t\t// It does not make sense to save anything in the temp file mode.\n\t\t// The file stays dirty from the first edit on.\n\n\t\t(async () => {\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"saveTempFile.message\",\n\t\t\t\t\t\"Do you want to accept the merge result?\",\n\t\t\t\t),\n\t\t\t\tdetail: localize(\n\t\t\t\t\t\"saveTempFile.detail\",\n\t\t\t\t\t\"This will write the merge result to the original file and close the merge editor.\",\n\t\t\t\t),\n\t\t\t\tprimaryButton: localize(\n\t\t\t\t\t{ key: \"acceptMerge\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Accept Merge\",\n\t\t\t\t),\n\t\t\t});\n\n\t\t\tif (confirmed) {\n\t\t\t\tawait this.accept();\n\t\t\t\tconst editors = this.editorService\n\t\t\t\t\t.findEditors(this.resultUri)\n\t\t\t\t\t.filter((e) => e.editor.typeId === \"mergeEditor.Input\");\n\t\t\t\tawait this.editorService.closeEditors(editors);\n\t\t\t}\n\t\t})();\n\t}\n\n\tpublic async revert(options?: IRevertOptions): Promise<void> {\n\t\t// no op\n\t}\n}\n\n/* ================ Workspace ================ */\n\nexport class WorkspaceMergeEditorModeFactory\n\timplements IMergeEditorInputModelFactory\n{\n\tconstructor(\n\t\tprivate readonly _mergeEditorTelemetry: MergeEditorTelemetry,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t) {\n\t}\n\n\tprivate static readonly FILE_SAVED_SOURCE =\n\t\tSaveSourceRegistry.registerSource(\n\t\t\t\"merge-editor.source\",\n\t\t\tlocalize(\n\t\t\t\t\"merge-editor.source\",\n\t\t\t\t\"Before Resolving Conflicts In Merge Editor\",\n\t\t\t),\n\t\t);\n\n\tpublic async createInputModel(\n\t\targs: MergeEditorArgs,\n\t): Promise<IMergeEditorInputModel> {\n\t\tconst store = new DisposableStore();\n\n\t\tlet resultTextFileModel = undefined as ITextFileEditorModel | undefined;\n\t\tconst modelListener = store.add(new DisposableStore());\n\t\tconst handleDidCreate = (model: ITextFileEditorModel) => {\n\t\t\tif (isEqual(args.result, model.resource)) {\n\t\t\t\tmodelListener.clear();\n\t\t\t\tresultTextFileModel = model;\n\t\t\t}\n\t\t};\n\t\tmodelListener.add(\n\t\t\tthis.textFileService.files.onDidCreate(handleDidCreate),\n\t\t);\n\t\tthis.textFileService.files.models.forEach(handleDidCreate);\n\n\t\tconst [base, result, input1Data, input2Data] = await Promise.all([\n\t\t\tthis._textModelService.createModelReference(args.base),\n\t\t\tthis._textModelService.createModelReference(args.result),\n\t\t\ttoInputData(args.input1, this._textModelService, store),\n\t\t\ttoInputData(args.input2, this._textModelService, store),\n\t\t]);\n\n\t\tstore.add(base);\n\t\tstore.add(result);\n\n\t\tif (!resultTextFileModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\t\t// So that \"Don't save\" does revert the file\n\t\tawait resultTextFileModel.save({\n\t\t\tsource: WorkspaceMergeEditorModeFactory.FILE_SAVED_SOURCE,\n\t\t});\n\n\t\tconst lines = resultTextFileModel.textEditorModel!.getLinesContent();\n\t\tconst hasConflictMarkers = lines.some((l) =>\n\t\t\tl.startsWith(conflictMarkers.start),\n\t\t);\n\t\tconst resetResult = hasConflictMarkers;\n\n\t\tconst mergeDiffComputer =\n\t\t\tthis._instantiationService.createInstance(MergeDiffComputer);\n\n\t\tconst model = this._instantiationService.createInstance(\n\t\t\tMergeEditorModel,\n\t\t\tbase.object.textEditorModel,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t\tresult.object.textEditorModel,\n\t\t\tmergeDiffComputer,\n\t\t\t{\n\t\t\t\tresetResult,\n\t\t\t},\n\t\t\tthis._mergeEditorTelemetry,\n\t\t);\n\t\tstore.add(model);\n\n\t\tawait model.onInitialized;\n\n\t\treturn this._instantiationService.createInstance(\n\t\t\tWorkspaceMergeEditorInputModel,\n\t\t\tmodel,\n\t\t\tstore,\n\t\t\tresultTextFileModel,\n\t\t\tthis._mergeEditorTelemetry,\n\t\t);\n\t}\n}\n\nclass WorkspaceMergeEditorInputModel\n\textends EditorModel\n\timplements IMergeEditorInputModel\n{\n\tpublic readonly isDirty = observableFromEvent(\n\t\tthis,\n\t\tEvent.any(\n\t\t\tthis.resultTextFileModel.onDidChangeDirty,\n\t\t\tthis.resultTextFileModel.onDidSaveError,\n\t\t),\n\t\t() => /** @description isDirty */ this.resultTextFileModel.isDirty(),\n\t);\n\n\tprivate reported = false;\n\tprivate readonly dateTimeOpened = new Date();\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tprivate readonly disposableStore: DisposableStore,\n\t\tprivate readonly resultTextFileModel: ITextFileEditorModel,\n\t\tprivate readonly telemetry: MergeEditorTelemetry,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.disposableStore.dispose();\n\t\tsuper.dispose();\n\n\t\tthis.reportClose(false);\n\t}\n\n\tprivate reportClose(accepted: boolean): void {\n\t\tif (!this.reported) {\n\t\t\tconst remainingConflictCount =\n\t\t\t\tthis.model.unhandledConflictsCount.get();\n\t\t\tconst durationOpenedMs =\n\t\t\t\tnew Date().getTime() - this.dateTimeOpened.getTime();\n\t\t\tthis.telemetry.reportMergeEditorClosed({\n\t\t\t\tdurationOpenedSecs: durationOpenedMs / 1000,\n\t\t\t\tremainingConflictCount,\n\t\t\t\taccepted,\n\n\t\t\t\tconflictCount: this.model.conflictCount,\n\t\t\t\tcombinableConflictCount: this.model.combinableConflictCount,\n\n\t\t\t\tconflictsResolvedWithBase: this.model.conflictsResolvedWithBase,\n\t\t\t\tconflictsResolvedWithInput1:\n\t\t\t\t\tthis.model.conflictsResolvedWithInput1,\n\t\t\t\tconflictsResolvedWithInput2:\n\t\t\t\t\tthis.model.conflictsResolvedWithInput2,\n\t\t\t\tconflictsResolvedWithSmartCombination:\n\t\t\t\t\tthis.model.conflictsResolvedWithSmartCombination,\n\n\t\t\t\tmanuallySolvedConflictCountThatEqualNone:\n\t\t\t\t\tthis.model.manuallySolvedConflictCountThatEqualNone,\n\t\t\t\tmanuallySolvedConflictCountThatEqualSmartCombine:\n\t\t\t\t\tthis.model.manuallySolvedConflictCountThatEqualSmartCombine,\n\t\t\t\tmanuallySolvedConflictCountThatEqualInput1:\n\t\t\t\t\tthis.model.manuallySolvedConflictCountThatEqualInput1,\n\t\t\t\tmanuallySolvedConflictCountThatEqualInput2:\n\t\t\t\t\tthis.model.manuallySolvedConflictCountThatEqualInput2,\n\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBase:\n\t\t\t\t\tthis.model\n\t\t\t\t\t\t.manuallySolvedConflictCountThatEqualNoneAndStartedWithBase,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithInput1:\n\t\t\t\t\tthis.model\n\t\t\t\t\t\t.manuallySolvedConflictCountThatEqualNoneAndStartedWithInput1,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithInput2:\n\t\t\t\t\tthis.model\n\t\t\t\t\t\t.manuallySolvedConflictCountThatEqualNoneAndStartedWithInput2,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBothNonSmart:\n\t\t\t\t\tthis.model\n\t\t\t\t\t\t.manuallySolvedConflictCountThatEqualNoneAndStartedWithBothNonSmart,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBothSmart:\n\t\t\t\t\tthis.model\n\t\t\t\t\t\t.manuallySolvedConflictCountThatEqualNoneAndStartedWithBothSmart,\n\t\t\t});\n\t\t\tthis.reported = true;\n\t\t}\n\t}\n\n\tpublic async accept(): Promise<void> {\n\t\tthis.reportClose(true);\n\t\tawait this.resultTextFileModel.save();\n\t}\n\n\tget resultUri(): URI {\n\t\treturn this.resultTextFileModel.resource;\n\t}\n\n\tasync save(options?: ITextFileSaveOptions): Promise<void> {\n\t\tawait this.resultTextFileModel.save(options);\n\t}\n\n\t/**\n\t * If save resets the dirty state, revert must do so too.\n\t */\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tawait this.resultTextFileModel.revert(options);\n\t}\n\n\tshouldConfirmClose(): boolean {\n\t\t// Always confirm\n\t\treturn true;\n\t}\n\n\tasync confirmClose(\n\t\tinputModels: IMergeEditorInputModel[],\n\t): Promise<ConfirmResult> {\n\t\tconst isMany = inputModels.length > 1;\n\t\tconst someDirty = inputModels.some((m) => m.isDirty.get());\n\t\tconst someUnhandledConflicts = inputModels.some((m) =>\n\t\t\tm.model.hasUnhandledConflicts.get(),\n\t\t);\n\t\tif (someDirty) {\n\t\t\tconst message = isMany\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"workspace.messageN\",\n\t\t\t\t\t\t\"Do you want to save the changes you made to {0} files?\",\n\t\t\t\t\t\tinputModels.length,\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"workspace.message1\",\n\t\t\t\t\t\t\"Do you want to save the changes you made to {0}?\",\n\t\t\t\t\t\tbasename(inputModels[0].resultUri),\n\t\t\t\t\t);\n\t\t\tconst { result } = await this._dialogService.prompt<ConfirmResult>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tdetail: someUnhandledConflicts\n\t\t\t\t\t? isMany\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"workspace.detailN.unhandled\",\n\t\t\t\t\t\t\t\t\"The files contain unhandled conflicts. Your changes will be lost if you don't save them.\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"workspace.detail1.unhandled\",\n\t\t\t\t\t\t\t\t\"The file contains unhandled conflicts. Your changes will be lost if you don't save them.\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t: isMany\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"workspace.detailN.handled\",\n\t\t\t\t\t\t\t\t\"Your changes will be lost if you don't save them.\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"workspace.detail1.handled\",\n\t\t\t\t\t\t\t\t\"Your changes will be lost if you don't save them.\",\n\t\t\t\t\t\t\t),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: someUnhandledConflicts\n\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tkey: \"workspace.saveWithConflict\",\n\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"&&Save with Conflicts\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tkey: \"workspace.save\",\n\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"&&Save\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => ConfirmResult.SAVE,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"workspace.doNotSave\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Do&&n't Save\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => ConfirmResult.DONT_SAVE,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => ConfirmResult.CANCEL,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn result;\n\t\t} else if (\n\t\t\tsomeUnhandledConflicts &&\n\t\t\t!this._storageService.getBoolean(\n\t\t\t\tStorageCloseWithConflicts,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\tfalse,\n\t\t\t)\n\t\t) {\n\t\t\tconst { confirmed, checkboxChecked } =\n\t\t\t\tawait this._dialogService.confirm({\n\t\t\t\t\tmessage: isMany\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"workspace.messageN.nonDirty\",\n\t\t\t\t\t\t\t\t\"Do you want to close {0} merge editors?\",\n\t\t\t\t\t\t\t\tinputModels.length,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"workspace.message1.nonDirty\",\n\t\t\t\t\t\t\t\t\"Do you want to close the merge editor for {0}?\",\n\t\t\t\t\t\t\t\tbasename(inputModels[0].resultUri),\n\t\t\t\t\t\t\t),\n\t\t\t\t\tdetail: someUnhandledConflicts\n\t\t\t\t\t\t? isMany\n\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\"workspace.detailN.unhandled.nonDirty\",\n\t\t\t\t\t\t\t\t\t\"The files contain unhandled conflicts.\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\"workspace.detail1.unhandled.nonDirty\",\n\t\t\t\t\t\t\t\t\t\"The file contains unhandled conflicts.\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tprimaryButton: someUnhandledConflicts\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"workspace.closeWithConflicts\",\n\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"&&Close with Conflicts\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"workspace.close\",\n\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"&&Close\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\tlabel: localize(\"noMoreWarn\", \"Do not ask me again\"),\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\tif (checkboxChecked) {\n\t\t\t\tthis._storageService.store(\n\t\t\t\t\tStorageCloseWithConflicts,\n\t\t\t\t\ttrue,\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn confirmed ? ConfirmResult.SAVE : ConfirmResult.CANCEL;\n\t\t} else {\n\t\t\t// This shouldn't do anything\n\t\t\treturn ConfirmResult.SAVE;\n\t\t}\n\t}\n}\n\n/* ================= Utils ================== */\n\nasync function toInputData(\n\tdata: MergeEditorInputData,\n\ttextModelService: ITextModelService,\n\tstore: DisposableStore,\n): Promise<InputData> {\n\tconst ref = await textModelService.createModelReference(data.uri);\n\tstore.add(ref);\n\treturn {\n\t\ttextModel: ref.object.textEditorModel,\n\t\ttitle: data.title,\n\t\tdescription: data.description,\n\t\tdetail: data.detail,\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AACnC,SAAS,aAAa;AACtB;AAAA,EACC;AAAA,OAEM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,UAAU,eAAe;AAClC,OAAO,cAAc;AAErB,SAAS,qBAAqB;AAC9B;AAAA,EAEC;AAAA,OACM;AACP,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AACP,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B;AAAA,EAGC;AAAA,OACM;AACP,SAAS,iCAAiC;AAE1C,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAyB,wBAAwB;AAuC1C,IAAM,iCAAN,MAEP;AAAA,EACC,YACkB,uBACuB,uBACJ,mBACJ,eAC/B;AAJgB;AACuB;AACJ;AACJ;AAAA,EAEjC;AAAA,EArGD,OA8FA;AAAA;AAAA;AAAA,EASC,MAAM,iBACL,MACkC;AAClC,UAAM,QAAQ,IAAI,gBAAgB;AAElC,UAAM,CAAC,MAAM,QAAQ,YAAY,UAAU,IAAI,MAAM,QAAQ,IAAI;AAAA,MAChE,KAAK,kBAAkB,qBAAqB,KAAK,IAAI;AAAA,MACrD,KAAK,kBAAkB,qBAAqB,KAAK,MAAM;AAAA,MACvD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,MACtD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,IACvD,CAAC;AAED,UAAM,IAAI,IAAI;AACd,UAAM,IAAI,MAAM;AAEhB,UAAM,gBAAgB,OAAO,OAAO,gBAAgB,IAAI,KAAK;AAAA,MAC5D,QAAQ;AAAA,IACT,CAAC;AAED,UAAM,uBAAuB,KAAK,cAAc;AAAA,MAC/C;AAAA,MACA;AAAA,QACC,YAAY,OAAO,OAAO,gBAAgB,cAAc;AAAA,QACxD,aAAa,MAAM;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AACA,UAAM,IAAI,oBAAoB;AAE9B,UAAM,oBACL,KAAK,sBAAsB,eAAe,iBAAiB;AAC5D,UAAM,QAAQ,KAAK,sBAAsB;AAAA,MACxC;AAAA,MACA,KAAK,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACC,aAAa;AAAA,MACd;AAAA,MACA,KAAK;AAAA,IACN;AACA,UAAM,IAAI,KAAK;AAEf,UAAM,MAAM;AAEZ,WAAO,KAAK,sBAAsB;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,KAAK;AAAA,IACN;AAAA,EACD;AACD;AAlEa,iCAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,GAPU;AAoEb,IAAM,gCAAN,cACS,YAET;AAAA,EAqBC,YACiB,OACC,YACA,QACD,WACmB,iBACF,eACA,eAChC;AACD,UAAM;AARU;AACC;AACA;AACD;AACmB;AACF;AACA;AAAA,EAGlC;AAAA,EAlMD,OAmKA;AAAA;AAAA;AAAA,EACkB,oBAAoB;AAAA,IACpC;AAAA,IACA,KAAK,MAAM,gBAAgB,wBAAwB;AAAA,EACpD;AAAA,EACiB,eAAe;AAAA,IAC/B;AAAA,IACA,CAAC,MAAM,KAAK,MAAM,gBAAgB,mBAAmB,CAAC;AAAA,IACtD;AAAA;AAAA,MAC6C,KAAK,MAAM,gBAAgB,wBAAwB;AAAA;AAAA,EACjG;AAAA,EAEgB,UAAU;AAAA,IACzB;AAAA,IACA,CAAC,WACA,KAAK,aAAa,KAAK,MAAM,MAC7B,KAAK,kBAAkB,KAAK,MAAM;AAAA,EACpC;AAAA,EAEQ,WAAW;AAAA,EAcV,UAAgB;AACxB,SAAK,WAAW,QAAQ;AACxB,UAAM,QAAQ;AAAA,EACf;AAAA,EAEA,MAAM,SAAwB;AAC7B,UAAM,QAAQ,MAAM,KAAK,MAAM,gBAAgB,SAAS;AACxD,SAAK,OAAO,gBAAgB,SAAS,KAAK;AAC1C,SAAK,kBAAkB;AAAA,MACtB,KAAK,MAAM,gBAAgB,wBAAwB;AAAA,MACnD;AAAA,IACD;AACA,UAAM,KAAK,gBAAgB,KAAK,KAAK,OAAO,gBAAgB,GAAG;AAC/D,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,MAAc,WAA0B;AACvC,UAAM,KAAK,gBAAgB,OAAO,KAAK,MAAM,gBAAgB,GAAG;AAChE,SAAK,kBAAkB;AAAA,MACtB,KAAK,MAAM,gBAAgB,wBAAwB;AAAA,MACnD;AAAA,IACD;AACA,SAAK,WAAW;AAAA,EACjB;AAAA,EAEO,qBAA8B;AACpC,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,aACZ,aACyB;AACzB,aAAS,MAAM,YAAY,KAAK,CAAC,MAAM,MAAM,IAAI,CAAC;AAElD,UAAM,YAAY,YAAY,KAAK,CAAC,MAAM,EAAE,QAAQ,IAAI,CAAC;AACzD,QAAI;AACJ,QAAI,WAAW;AACd,YAAM,SAAS,YAAY,SAAS;AAEpC,YAAM,UAAU,SACb;AAAA,QACA;AAAA,QACA;AAAA,QACA,YAAY;AAAA,MACb,IACC;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,YAAY,CAAC,EAAE,MAAM,gBAAgB,GAAG;AAAA,MAClD;AAEF,YAAM,wBAAwB,YAAY;AAAA,QAAK,CAAC,MAC/C,EAAE,MAAM,sBAAsB,IAAI;AAAA,MACnC;AAEA,YAAM,UAA0C;AAAA,QAC/C;AAAA,UACC,OAAO,wBACJ;AAAA,YACA;AAAA,cACC,KAAK;AAAA,cACL,SAAS,CAAC,uBAAuB;AAAA,YAClC;AAAA,YACA;AAAA,UACD,IACC;AAAA,YACA;AAAA,cACC,KAAK;AAAA,cACL,SAAS,CAAC,uBAAuB;AAAA,YAClC;AAAA,YACA;AAAA,UACD;AAAA,UACF,KAAK,6BAAM,cAAc,MAApB;AAAA,QACN;AAAA,QACA;AAAA,UACC,OAAO;AAAA,YACN,EAAE,KAAK,WAAW,SAAS,CAAC,uBAAuB,EAAE;AAAA,YACrD;AAAA,UACD;AAAA,UACA,KAAK,6BAAM,cAAc,WAApB;AAAA,QACN;AAAA,MACD;AAEA,gBACC,MAAM,KAAK,cAAc,OAAsB;AAAA,QAC9C,MAAM,SAAS;AAAA,QACf;AAAA,QACA,QAAQ,wBACL,SACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACA,SACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACH;AAAA,QACA,cAAc;AAAA,UACb,KAAK,6BAAM,cAAc,QAApB;AAAA,QACN;AAAA,MACD,CAAC,GACA;AAAA,IACH,OAAO;AACN,eAAS,cAAc;AAAA,IACxB;AAEA,QAAI,WAAW,cAAc,MAAM;AAElC,YAAM,QAAQ,IAAI,YAAY,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAAA,IACrD,WAAW,WAAW,cAAc,WAAW;AAE9C,YAAM,QAAQ,IAAI,YAAY,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAAA,IACvD,OAAO;AAAA,IAEP;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,KAAK,SAA+C;AAChE,QAAI,KAAK,UAAU;AAClB;AAAA,IACD;AAIA,KAAC,YAAY;AACZ,YAAM,EAAE,UAAU,IAAI,MAAM,KAAK,cAAc,QAAQ;AAAA,QACtD,SAAS;AAAA,UACR;AAAA,UACA;AAAA,QACD;AAAA,QACA,QAAQ;AAAA,UACP;AAAA,UACA;AAAA,QACD;AAAA,QACA,eAAe;AAAA,UACd,EAAE,KAAK,eAAe,SAAS,CAAC,uBAAuB,EAAE;AAAA,UACzD;AAAA,QACD;AAAA,MACD,CAAC;AAED,UAAI,WAAW;AACd,cAAM,KAAK,OAAO;AAClB,cAAM,UAAU,KAAK,cACnB,YAAY,KAAK,SAAS,EAC1B,OAAO,CAAC,MAAM,EAAE,OAAO,WAAW,mBAAmB;AACvD,cAAM,KAAK,cAAc,aAAa,OAAO;AAAA,MAC9C;AAAA,IACD,GAAG;AAAA,EACJ;AAAA,EAEA,MAAa,OAAO,SAAyC;AAAA,EAE7D;AACD;AAxMM,gCAAN;AAAA,EA6BG;AAAA,EACA;AAAA,EACA;AAAA,GA/BG;AA4MC,IAAM,kCAAN,MAEP;AAAA,EACC,YACkB,uBACuB,uBACJ,mBACD,iBAClC;AAJgB;AACuB;AACJ;AACD;AAAA,EAEpC;AAAA,EArXD,OA8WA;AAAA;AAAA;AAAA,EASC,OAAwB,oBACvB,mBAAmB;AAAA,IAClB;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAED,MAAa,iBACZ,MACkC;AAClC,UAAM,QAAQ,IAAI,gBAAgB;AAElC,QAAI,sBAAsB;AAC1B,UAAM,gBAAgB,MAAM,IAAI,IAAI,gBAAgB,CAAC;AACrD,UAAM,kBAAkB,wBAACA,WAAgC;AACxD,UAAI,QAAQ,KAAK,QAAQA,OAAM,QAAQ,GAAG;AACzC,sBAAc,MAAM;AACpB,8BAAsBA;AAAA,MACvB;AAAA,IACD,GALwB;AAMxB,kBAAc;AAAA,MACb,KAAK,gBAAgB,MAAM,YAAY,eAAe;AAAA,IACvD;AACA,SAAK,gBAAgB,MAAM,OAAO,QAAQ,eAAe;AAEzD,UAAM,CAAC,MAAM,QAAQ,YAAY,UAAU,IAAI,MAAM,QAAQ,IAAI;AAAA,MAChE,KAAK,kBAAkB,qBAAqB,KAAK,IAAI;AAAA,MACrD,KAAK,kBAAkB,qBAAqB,KAAK,MAAM;AAAA,MACvD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,MACtD,YAAY,KAAK,QAAQ,KAAK,mBAAmB,KAAK;AAAA,IACvD,CAAC;AAED,UAAM,IAAI,IAAI;AACd,UAAM,IAAI,MAAM;AAEhB,QAAI,CAAC,qBAAqB;AACzB,YAAM,IAAI,mBAAmB;AAAA,IAC9B;AAEA,UAAM,oBAAoB,KAAK;AAAA,MAC9B,QAAQ,gCAAgC;AAAA,IACzC,CAAC;AAED,UAAM,QAAQ,oBAAoB,gBAAiB,gBAAgB;AACnE,UAAM,qBAAqB,MAAM;AAAA,MAAK,CAAC,MACtC,EAAE,WAAW,gBAAgB,KAAK;AAAA,IACnC;AACA,UAAM,cAAc;AAEpB,UAAM,oBACL,KAAK,sBAAsB,eAAe,iBAAiB;AAE5D,UAAM,QAAQ,KAAK,sBAAsB;AAAA,MACxC;AAAA,MACA,KAAK,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA,OAAO,OAAO;AAAA,MACd;AAAA,MACA;AAAA,QACC;AAAA,MACD;AAAA,MACA,KAAK;AAAA,IACN;AACA,UAAM,IAAI,KAAK;AAEf,UAAM,MAAM;AAEZ,WAAO,KAAK,sBAAsB;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAAA,IACN;AAAA,EACD;AACD;AAzFa,kCAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,GAPU;AA2Fb,IAAM,iCAAN,cACS,YAET;AAAA,EAaC,YACiB,OACC,iBACA,qBACA,WACgB,gBACC,iBACjC;AACD,UAAM;AAPU;AACC;AACA;AACA;AACgB;AACC;AAAA,EAGnC;AAAA,EAheD,OA0cA;AAAA;AAAA;AAAA,EACiB,UAAU;AAAA,IACzB;AAAA,IACA,MAAM;AAAA,MACL,KAAK,oBAAoB;AAAA,MACzB,KAAK,oBAAoB;AAAA,IAC1B;AAAA,IACA;AAAA;AAAA,MAAkC,KAAK,oBAAoB,QAAQ;AAAA;AAAA,EACpE;AAAA,EAEQ,WAAW;AAAA,EACF,iBAAiB,oBAAI,KAAK;AAAA,EAa3B,UAAgB;AAC/B,SAAK,gBAAgB,QAAQ;AAC7B,UAAM,QAAQ;AAEd,SAAK,YAAY,KAAK;AAAA,EACvB;AAAA,EAEQ,YAAY,UAAyB;AAC5C,QAAI,CAAC,KAAK,UAAU;AACnB,YAAM,yBACL,KAAK,MAAM,wBAAwB,IAAI;AACxC,YAAM,oBACL,oBAAI,KAAK,GAAE,QAAQ,IAAI,KAAK,eAAe,QAAQ;AACpD,WAAK,UAAU,wBAAwB;AAAA,QACtC,oBAAoB,mBAAmB;AAAA,QACvC;AAAA,QACA;AAAA,QAEA,eAAe,KAAK,MAAM;AAAA,QAC1B,yBAAyB,KAAK,MAAM;AAAA,QAEpC,2BAA2B,KAAK,MAAM;AAAA,QACtC,6BACC,KAAK,MAAM;AAAA,QACZ,6BACC,KAAK,MAAM;AAAA,QACZ,uCACC,KAAK,MAAM;AAAA,QAEZ,0CACC,KAAK,MAAM;AAAA,QACZ,kDACC,KAAK,MAAM;AAAA,QACZ,4CACC,KAAK,MAAM;AAAA,QACZ,4CACC,KAAK,MAAM;AAAA,QAEZ,4DACC,KAAK,MACH;AAAA,QACH,8DACC,KAAK,MACH;AAAA,QACH,8DACC,KAAK,MACH;AAAA,QACH,oEACC,KAAK,MACH;AAAA,QACH,iEACC,KAAK,MACH;AAAA,MACJ,CAAC;AACD,WAAK,WAAW;AAAA,IACjB;AAAA,EACD;AAAA,EAEA,MAAa,SAAwB;AACpC,SAAK,YAAY,IAAI;AACrB,UAAM,KAAK,oBAAoB,KAAK;AAAA,EACrC;AAAA,EAEA,IAAI,YAAiB;AACpB,WAAO,KAAK,oBAAoB;AAAA,EACjC;AAAA,EAEA,MAAM,KAAK,SAA+C;AACzD,UAAM,KAAK,oBAAoB,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,SAAyC;AACrD,UAAM,KAAK,oBAAoB,OAAO,OAAO;AAAA,EAC9C;AAAA,EAEA,qBAA8B;AAE7B,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,aACL,aACyB;AACzB,UAAM,SAAS,YAAY,SAAS;AACpC,UAAM,YAAY,YAAY,KAAK,CAAC,MAAM,EAAE,QAAQ,IAAI,CAAC;AACzD,UAAM,yBAAyB,YAAY;AAAA,MAAK,CAAC,MAChD,EAAE,MAAM,sBAAsB,IAAI;AAAA,IACnC;AACA,QAAI,WAAW;AACd,YAAM,UAAU,SACb;AAAA,QACA;AAAA,QACA;AAAA,QACA,YAAY;AAAA,MACb,IACC;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,YAAY,CAAC,EAAE,SAAS;AAAA,MAClC;AACF,YAAM,EAAE,OAAO,IAAI,MAAM,KAAK,eAAe,OAAsB;AAAA,QAClE,MAAM,SAAS;AAAA,QACf;AAAA,QACA,QAAQ,yBACL,SACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACA,SACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACH,SAAS;AAAA,UACR;AAAA,YACC,OAAO,yBACJ;AAAA,cACA;AAAA,gBACC,KAAK;AAAA,gBACL,SAAS,CAAC,uBAAuB;AAAA,cAClC;AAAA,cACA;AAAA,YACD,IACC;AAAA,cACA;AAAA,gBACC,KAAK;AAAA,gBACL,SAAS,CAAC,uBAAuB;AAAA,cAClC;AAAA,cACA;AAAA,YACD;AAAA,YACF,KAAK,6BAAM,cAAc,MAApB;AAAA,UACN;AAAA,UACA;AAAA,YACC,OAAO;AAAA,cACN;AAAA,gBACC,KAAK;AAAA,gBACL,SAAS,CAAC,uBAAuB;AAAA,cAClC;AAAA,cACA;AAAA,YACD;AAAA,YACA,KAAK,6BAAM,cAAc,WAApB;AAAA,UACN;AAAA,QACD;AAAA,QACA,cAAc;AAAA,UACb,KAAK,6BAAM,cAAc,QAApB;AAAA,QACN;AAAA,MACD,CAAC;AACD,aAAO;AAAA,IACR,WACC,0BACA,CAAC,KAAK,gBAAgB;AAAA,MACrB;AAAA,MACA,aAAa;AAAA,MACb;AAAA,IACD,GACC;AACD,YAAM,EAAE,WAAW,gBAAgB,IAClC,MAAM,KAAK,eAAe,QAAQ;AAAA,QACjC,SAAS,SACN;AAAA,UACA;AAAA,UACA;AAAA,UACA,YAAY;AAAA,QACb,IACC;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,YAAY,CAAC,EAAE,SAAS;AAAA,QAClC;AAAA,QACF,QAAQ,yBACL,SACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACA;AAAA,QACH,eAAe,yBACZ;AAAA,UACA;AAAA,YACC,KAAK;AAAA,YACL,SAAS,CAAC,uBAAuB;AAAA,UAClC;AAAA,UACA;AAAA,QACD,IACC;AAAA,UACA;AAAA,YACC,KAAK;AAAA,YACL,SAAS,CAAC,uBAAuB;AAAA,UAClC;AAAA,UACA;AAAA,QACD;AAAA,QACF,UAAU;AAAA,UACT,OAAO,SAAS,cAAc,qBAAqB;AAAA,QACpD;AAAA,MACD,CAAC;AAEF,UAAI,iBAAiB;AACpB,aAAK,gBAAgB;AAAA,UACpB;AAAA,UACA;AAAA,UACA,aAAa;AAAA,UACb,cAAc;AAAA,QACf;AAAA,MACD;AAEA,aAAO,YAAY,cAAc,OAAO,cAAc;AAAA,IACvD,OAAO;AAEN,aAAO,cAAc;AAAA,IACtB;AAAA,EACD;AACD;AA9PM,iCAAN;AAAA,EAqBG;AAAA,EACA;AAAA,GAtBG;AAkQN,eAAe,YACd,MACA,kBACA,OACqB;AACrB,QAAM,MAAM,MAAM,iBAAiB,qBAAqB,KAAK,GAAG;AAChE,QAAM,IAAI,GAAG;AACb,SAAO;AAAA,IACN,WAAW,IAAI,OAAO;AAAA,IACtB,OAAO,KAAK;AAAA,IACZ,aAAa,KAAK;AAAA,IAClB,QAAQ,KAAK;AAAA,EACd;AACD;AAbe;",
  "names": ["model"]
}
