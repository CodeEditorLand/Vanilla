{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/diffComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertFn, checkAdjacentItems } from '../../../../../base/common/assert.js';\nimport { IReader } from '../../../../../base/common/observable.js';\nimport { RangeMapping as DiffRangeMapping } from '../../../../../editor/common/diff/rangeMapping.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { IEditorWorkerService } from '../../../../../editor/common/services/editorWorker.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { LineRange } from './lineRange.js';\nimport { DetailedLineRangeMapping, RangeMapping } from './mapping.js';\nimport { observableConfigValue } from '../../../../../platform/observable/common/platformObservableUtils.js';\nimport { LineRange as DiffLineRange } from '../../../../../editor/common/core/lineRange.js';\n\nexport interface IMergeDiffComputer {\n\tcomputeDiff(textModel1: ITextModel, textModel2: ITextModel, reader: IReader): Promise<IMergeDiffComputerResult>;\n}\n\nexport interface IMergeDiffComputerResult {\n\tdiffs: DetailedLineRangeMapping[] | null;\n}\n\nexport class MergeDiffComputer implements IMergeDiffComputer {\n\tprivate readonly mergeAlgorithm = observableConfigValue<'smart' | 'experimental' | 'legacy' | 'advanced'>(\n\t\t'mergeEditor.diffAlgorithm', 'advanced', this.configurationService)\n\t\t.map(v => v === 'smart' ? 'legacy' : v === 'experimental' ? 'advanced' : v);\n\n\tconstructor(\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t}\n\n\tasync computeDiff(textModel1: ITextModel, textModel2: ITextModel, reader: IReader): Promise<IMergeDiffComputerResult> {\n\t\tconst diffAlgorithm = this.mergeAlgorithm.read(reader);\n\t\tconst inputVersion = textModel1.getVersionId();\n\t\tconst outputVersion = textModel2.getVersionId();\n\n\t\tconst result = await this.editorWorkerService.computeDiff(\n\t\t\ttextModel1.uri,\n\t\t\ttextModel2.uri,\n\t\t\t{\n\t\t\t\tignoreTrimWhitespace: false,\n\t\t\t\tmaxComputationTimeMs: 0,\n\t\t\t\tcomputeMoves: false,\n\t\t\t},\n\t\t\tdiffAlgorithm,\n\t\t);\n\n\t\tif (!result) {\n\t\t\tthrow new Error('Diff computation failed');\n\t\t}\n\n\t\tif (textModel1.isDisposed() || textModel2.isDisposed()) {\n\t\t\treturn { diffs: null };\n\t\t}\n\n\t\tconst changes = result.changes.map(c =>\n\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\ttoLineRange(c.original),\n\t\t\t\ttextModel1,\n\t\t\t\ttoLineRange(c.modified),\n\t\t\t\ttextModel2,\n\t\t\t\tc.innerChanges?.map(ic => toRangeMapping(ic))\n\t\t\t)\n\t\t);\n\n\t\tconst newInputVersion = textModel1.getVersionId();\n\t\tconst newOutputVersion = textModel2.getVersionId();\n\n\t\tif (inputVersion !== newInputVersion || outputVersion !== newOutputVersion) {\n\t\t\treturn { diffs: null };\n\t\t}\n\n\t\tassertFn(() => {\n\t\t\tfor (const c of changes) {\n\t\t\t\tconst inputRange = c.inputRange;\n\t\t\t\tconst outputRange = c.outputRange;\n\t\t\t\tconst inputTextModel = c.inputTextModel;\n\t\t\t\tconst outputTextModel = c.outputTextModel;\n\n\t\t\t\tfor (const map of c.rangeMappings) {\n\t\t\t\t\tlet inputRangesValid = inputRange.startLineNumber - 1 <= map.inputRange.startLineNumber\n\t\t\t\t\t\t&& map.inputRange.endLineNumber <= inputRange.endLineNumberExclusive;\n\t\t\t\t\tif (inputRangesValid && map.inputRange.startLineNumber === inputRange.startLineNumber - 1) {\n\t\t\t\t\t\tinputRangesValid = map.inputRange.endColumn >= inputTextModel.getLineMaxColumn(map.inputRange.startLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (inputRangesValid && map.inputRange.endLineNumber === inputRange.endLineNumberExclusive) {\n\t\t\t\t\t\tinputRangesValid = map.inputRange.endColumn === 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet outputRangesValid = outputRange.startLineNumber - 1 <= map.outputRange.startLineNumber\n\t\t\t\t\t\t&& map.outputRange.endLineNumber <= outputRange.endLineNumberExclusive;\n\t\t\t\t\tif (outputRangesValid && map.outputRange.startLineNumber === outputRange.startLineNumber - 1) {\n\t\t\t\t\t\toutputRangesValid = map.outputRange.endColumn >= outputTextModel.getLineMaxColumn(map.outputRange.endLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (outputRangesValid && map.outputRange.endLineNumber === outputRange.endLineNumberExclusive) {\n\t\t\t\t\t\toutputRangesValid = map.outputRange.endColumn === 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!inputRangesValid || !outputRangesValid) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changes.length === 0 || (changes[0].inputRange.startLineNumber === changes[0].outputRange.startLineNumber &&\n\t\t\t\tcheckAdjacentItems(changes,\n\t\t\t\t\t(m1, m2) => m2.inputRange.startLineNumber - m1.inputRange.endLineNumberExclusive === m2.outputRange.startLineNumber - m1.outputRange.endLineNumberExclusive &&\n\t\t\t\t\t\t// There has to be an unchanged line in between (otherwise both diffs should have been joined)\n\t\t\t\t\t\tm1.inputRange.endLineNumberExclusive < m2.inputRange.startLineNumber &&\n\t\t\t\t\t\tm1.outputRange.endLineNumberExclusive < m2.outputRange.startLineNumber,\n\t\t\t\t));\n\t\t});\n\n\t\treturn {\n\t\t\tdiffs: changes\n\t\t};\n\t}\n}\n\nexport function toLineRange(range: DiffLineRange): LineRange {\n\treturn new LineRange(range.startLineNumber, range.length);\n}\n\nexport function toRangeMapping(mapping: DiffRangeMapping): RangeMapping {\n\treturn new RangeMapping(mapping.originalRange, mapping.modifiedRange);\n}\n"],
  "mappings": "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",
  "names": []
}
