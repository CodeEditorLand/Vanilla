{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/browser/model/diffComputer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tassertFn,\n\tcheckAdjacentItems,\n} from \"../../../../../base/common/assert.js\";\nimport type { IReader } from \"../../../../../base/common/observable.js\";\nimport type { LineRange as DiffLineRange } from \"../../../../../editor/common/core/lineRange.js\";\nimport type { RangeMapping as DiffRangeMapping } from \"../../../../../editor/common/diff/rangeMapping.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\nimport { IEditorWorkerService } from \"../../../../../editor/common/services/editorWorker.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { observableConfigValue } from \"../../../../../platform/observable/common/platformObservableUtils.js\";\nimport { LineRange } from \"./lineRange.js\";\nimport { DetailedLineRangeMapping, RangeMapping } from \"./mapping.js\";\n\nexport interface IMergeDiffComputer {\n\tcomputeDiff(\n\t\ttextModel1: ITextModel,\n\t\ttextModel2: ITextModel,\n\t\treader: IReader,\n\t): Promise<IMergeDiffComputerResult>;\n}\n\nexport interface IMergeDiffComputerResult {\n\tdiffs: DetailedLineRangeMapping[] | null;\n}\n\nexport class MergeDiffComputer implements IMergeDiffComputer {\n\tprivate readonly mergeAlgorithm = observableConfigValue<\n\t\t\"smart\" | \"experimental\" | \"legacy\" | \"advanced\"\n\t>(\"mergeEditor.diffAlgorithm\", \"advanced\", this.configurationService).map(\n\t\t(v) =>\n\t\t\tv === \"smart\" ? \"legacy\" : v === \"experimental\" ? \"advanced\" : v,\n\t);\n\n\tconstructor(\n\t\t@IEditorWorkerService\n\t\tprivate readonly editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {}\n\n\tasync computeDiff(\n\t\ttextModel1: ITextModel,\n\t\ttextModel2: ITextModel,\n\t\treader: IReader,\n\t): Promise<IMergeDiffComputerResult> {\n\t\tconst diffAlgorithm = this.mergeAlgorithm.read(reader);\n\t\tconst inputVersion = textModel1.getVersionId();\n\t\tconst outputVersion = textModel2.getVersionId();\n\n\t\tconst result = await this.editorWorkerService.computeDiff(\n\t\t\ttextModel1.uri,\n\t\t\ttextModel2.uri,\n\t\t\t{\n\t\t\t\tignoreTrimWhitespace: false,\n\t\t\t\tmaxComputationTimeMs: 0,\n\t\t\t\tcomputeMoves: false,\n\t\t\t},\n\t\t\tdiffAlgorithm,\n\t\t);\n\n\t\tif (!result) {\n\t\t\tthrow new Error(\"Diff computation failed\");\n\t\t}\n\n\t\tif (textModel1.isDisposed() || textModel2.isDisposed()) {\n\t\t\treturn { diffs: null };\n\t\t}\n\n\t\tconst changes = result.changes.map(\n\t\t\t(c) =>\n\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\ttoLineRange(c.original),\n\t\t\t\t\ttextModel1,\n\t\t\t\t\ttoLineRange(c.modified),\n\t\t\t\t\ttextModel2,\n\t\t\t\t\tc.innerChanges?.map((ic) => toRangeMapping(ic)),\n\t\t\t\t),\n\t\t);\n\n\t\tconst newInputVersion = textModel1.getVersionId();\n\t\tconst newOutputVersion = textModel2.getVersionId();\n\n\t\tif (\n\t\t\tinputVersion !== newInputVersion ||\n\t\t\toutputVersion !== newOutputVersion\n\t\t) {\n\t\t\treturn { diffs: null };\n\t\t}\n\n\t\tassertFn(() => {\n\t\t\tfor (const c of changes) {\n\t\t\t\tconst inputRange = c.inputRange;\n\t\t\t\tconst outputRange = c.outputRange;\n\t\t\t\tconst inputTextModel = c.inputTextModel;\n\t\t\t\tconst outputTextModel = c.outputTextModel;\n\n\t\t\t\tfor (const map of c.rangeMappings) {\n\t\t\t\t\tlet inputRangesValid =\n\t\t\t\t\t\tinputRange.startLineNumber - 1 <=\n\t\t\t\t\t\t\tmap.inputRange.startLineNumber &&\n\t\t\t\t\t\tmap.inputRange.endLineNumber <=\n\t\t\t\t\t\t\tinputRange.endLineNumberExclusive;\n\t\t\t\t\tif (\n\t\t\t\t\t\tinputRangesValid &&\n\t\t\t\t\t\tmap.inputRange.startLineNumber ===\n\t\t\t\t\t\t\tinputRange.startLineNumber - 1\n\t\t\t\t\t) {\n\t\t\t\t\t\tinputRangesValid =\n\t\t\t\t\t\t\tmap.inputRange.endColumn >=\n\t\t\t\t\t\t\tinputTextModel.getLineMaxColumn(\n\t\t\t\t\t\t\t\tmap.inputRange.startLineNumber,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tinputRangesValid &&\n\t\t\t\t\t\tmap.inputRange.endLineNumber ===\n\t\t\t\t\t\t\tinputRange.endLineNumberExclusive\n\t\t\t\t\t) {\n\t\t\t\t\t\tinputRangesValid = map.inputRange.endColumn === 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet outputRangesValid =\n\t\t\t\t\t\toutputRange.startLineNumber - 1 <=\n\t\t\t\t\t\t\tmap.outputRange.startLineNumber &&\n\t\t\t\t\t\tmap.outputRange.endLineNumber <=\n\t\t\t\t\t\t\toutputRange.endLineNumberExclusive;\n\t\t\t\t\tif (\n\t\t\t\t\t\toutputRangesValid &&\n\t\t\t\t\t\tmap.outputRange.startLineNumber ===\n\t\t\t\t\t\t\toutputRange.startLineNumber - 1\n\t\t\t\t\t) {\n\t\t\t\t\t\toutputRangesValid =\n\t\t\t\t\t\t\tmap.outputRange.endColumn >=\n\t\t\t\t\t\t\toutputTextModel.getLineMaxColumn(\n\t\t\t\t\t\t\t\tmap.outputRange.endLineNumber,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\toutputRangesValid &&\n\t\t\t\t\t\tmap.outputRange.endLineNumber ===\n\t\t\t\t\t\t\toutputRange.endLineNumberExclusive\n\t\t\t\t\t) {\n\t\t\t\t\t\toutputRangesValid = map.outputRange.endColumn === 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!inputRangesValid || !outputRangesValid) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\tchanges.length === 0 ||\n\t\t\t\t(changes[0].inputRange.startLineNumber ===\n\t\t\t\t\tchanges[0].outputRange.startLineNumber &&\n\t\t\t\t\tcheckAdjacentItems(\n\t\t\t\t\t\tchanges,\n\t\t\t\t\t\t(m1, m2) =>\n\t\t\t\t\t\t\tm2.inputRange.startLineNumber -\n\t\t\t\t\t\t\t\tm1.inputRange.endLineNumberExclusive ===\n\t\t\t\t\t\t\t\tm2.outputRange.startLineNumber -\n\t\t\t\t\t\t\t\t\tm1.outputRange.endLineNumberExclusive &&\n\t\t\t\t\t\t\t// There has to be an unchanged line in between (otherwise both diffs should have been joined)\n\t\t\t\t\t\t\tm1.inputRange.endLineNumberExclusive <\n\t\t\t\t\t\t\t\tm2.inputRange.startLineNumber &&\n\t\t\t\t\t\t\tm1.outputRange.endLineNumberExclusive <\n\t\t\t\t\t\t\t\tm2.outputRange.startLineNumber,\n\t\t\t\t\t))\n\t\t\t);\n\t\t});\n\n\t\treturn {\n\t\t\tdiffs: changes,\n\t\t};\n\t}\n}\n\nexport function toLineRange(range: DiffLineRange): LineRange {\n\treturn new LineRange(range.startLineNumber, range.length);\n}\n\nexport function toRangeMapping(mapping: DiffRangeMapping): RangeMapping {\n\treturn new RangeMapping(mapping.originalRange, mapping.modifiedRange);\n}\n"],
  "mappings": "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",
  "names": []
}
