{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { randomPath } from \"../../../../base/common/extpath.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport type { ILocalizedString } from \"../../../../platform/action/common/action.js\";\nimport {\n\tAction2,\n\ttype IAction2Options,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { INativeEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IQuickInputService } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport type { IResourceMergeEditorInput } from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { MergeEditor } from \"../browser/view/mergeEditor.js\";\nimport type { MergeEditorViewModel } from \"../browser/view/viewModel.js\";\nimport type { MergeEditorContents } from \"../common/mergeEditor.js\";\n\nconst MERGE_EDITOR_CATEGORY: ILocalizedString = localize2(\n\t\"mergeEditor\",\n\t\"Merge Editor (Dev)\",\n);\n\nexport class MergeEditorOpenContentsFromJSON extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"merge.dev.openContentsJson\",\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: localize2(\n\t\t\t\t\"merge.dev.openState\",\n\t\t\t\t\"Open Merge Editor State from JSON\",\n\t\t\t),\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(\n\t\taccessor: ServicesAccessor,\n\t\targs?: {\n\t\t\tdata?: MergeEditorContents;\n\t\t\tresultState?: \"initial\" | \"current\";\n\t\t},\n\t): Promise<void> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst env = accessor.get(INativeEnvironmentService);\n\t\tconst fileService = accessor.get(IFileService);\n\n\t\tif (!args) {\n\t\t\targs = {};\n\t\t}\n\n\t\tlet content: MergeEditorContents;\n\t\tif (args.data) {\n\t\t\tcontent = args.data;\n\t\t} else {\n\t\t\tconst result = await quickInputService.input({\n\t\t\t\tprompt: localize(\"mergeEditor.enterJSON\", \"Enter JSON\"),\n\t\t\t\tvalue: await clipboardService.readText(),\n\t\t\t});\n\t\t\tif (result === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcontent =\n\t\t\t\tresult !== \"\"\n\t\t\t\t\t? JSON.parse(result)\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tbase: \"\",\n\t\t\t\t\t\t\tinput1: \"\",\n\t\t\t\t\t\t\tinput2: \"\",\n\t\t\t\t\t\t\tresult: \"\",\n\t\t\t\t\t\t\tlanguageId: \"plaintext\",\n\t\t\t\t\t\t};\n\t\t}\n\n\t\tconst targetDir = URI.joinPath(env.tmpDir, randomPath());\n\n\t\tconst extension =\n\t\t\tlanguageService.getExtensions(content.languageId)[0] || \"\";\n\n\t\tconst baseUri = URI.joinPath(targetDir, `/base${extension}`);\n\t\tconst input1Uri = URI.joinPath(targetDir, `/input1${extension}`);\n\t\tconst input2Uri = URI.joinPath(targetDir, `/input2${extension}`);\n\t\tconst resultUri = URI.joinPath(targetDir, `/result${extension}`);\n\t\tconst initialResultUri = URI.joinPath(\n\t\t\ttargetDir,\n\t\t\t`/initialResult${extension}`,\n\t\t);\n\n\t\tasync function writeFile(uri: URI, content: string): Promise<void> {\n\t\t\tawait fileService.writeFile(uri, VSBuffer.fromString(content));\n\t\t}\n\n\t\tconst shouldOpenInitial = await promptOpenInitial(\n\t\t\tquickInputService,\n\t\t\targs.resultState,\n\t\t);\n\n\t\tawait Promise.all([\n\t\t\twriteFile(baseUri, content.base),\n\t\t\twriteFile(input1Uri, content.input1),\n\t\t\twriteFile(input2Uri, content.input2),\n\t\t\twriteFile(\n\t\t\t\tresultUri,\n\t\t\t\tshouldOpenInitial\n\t\t\t\t\t? content.initialResult || \"\"\n\t\t\t\t\t: content.result,\n\t\t\t),\n\t\t\twriteFile(initialResultUri, content.initialResult || \"\"),\n\t\t]);\n\n\t\tconst input: IResourceMergeEditorInput = {\n\t\t\tbase: { resource: baseUri },\n\t\t\tinput1: {\n\t\t\t\tresource: input1Uri,\n\t\t\t\tlabel: \"Input 1\",\n\t\t\t\tdescription: \"Input 1\",\n\t\t\t\tdetail: \"(from JSON)\",\n\t\t\t},\n\t\t\tinput2: {\n\t\t\t\tresource: input2Uri,\n\t\t\t\tlabel: \"Input 2\",\n\t\t\t\tdescription: \"Input 2\",\n\t\t\t\tdetail: \"(from JSON)\",\n\t\t\t},\n\t\t\tresult: { resource: resultUri },\n\t\t};\n\t\teditorService.openEditor(input);\n\t}\n}\n\nasync function promptOpenInitial(\n\tquickInputService: IQuickInputService,\n\tresultStateOverride?: \"initial\" | \"current\",\n) {\n\tif (resultStateOverride) {\n\t\treturn resultStateOverride === \"initial\";\n\t}\n\tconst result = await quickInputService.pick(\n\t\t[\n\t\t\t{ label: \"result\", result: false },\n\t\t\t{ label: \"initial result\", result: true },\n\t\t],\n\t\t{ canPickMany: false },\n\t);\n\treturn result?.result;\n}\n\nabstract class MergeEditorAction extends Action2 {\n\tconstructor(desc: Readonly<IAction2Options>) {\n\t\tsuper(desc);\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst { activeEditorPane } = accessor.get(IEditorService);\n\t\tif (activeEditorPane instanceof MergeEditor) {\n\t\t\tconst vm = activeEditorPane.viewModel.get();\n\t\t\tif (!vm) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runWithViewModel(vm, accessor);\n\t\t}\n\t}\n\n\tabstract runWithViewModel(\n\t\tviewModel: MergeEditorViewModel,\n\t\taccessor: ServicesAccessor,\n\t): void;\n}\n\nexport class OpenSelectionInTemporaryMergeEditor extends MergeEditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"merge.dev.openSelectionInTemporaryMergeEditor\",\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: localize2(\n\t\t\t\t\"merge.dev.openSelectionInTemporaryMergeEditor\",\n\t\t\t\t\"Open Selection In Temporary Merge Editor\",\n\t\t\t),\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async runWithViewModel(\n\t\tviewModel: MergeEditorViewModel,\n\t\taccessor: ServicesAccessor,\n\t) {\n\t\tconst rangesInBase = viewModel.selectionInBase.get()?.rangesInBase;\n\t\tif (!rangesInBase || rangesInBase.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst base = rangesInBase\n\t\t\t.map((r) => viewModel.model.base.getValueInRange(r))\n\t\t\t.join(\"\\n\");\n\n\t\tconst input1 = rangesInBase\n\t\t\t.map((r) =>\n\t\t\t\tviewModel.inputCodeEditorView1.editor\n\t\t\t\t\t.getModel()!\n\t\t\t\t\t.getValueInRange(\n\t\t\t\t\t\tviewModel.model.translateBaseRangeToInput(1, r),\n\t\t\t\t\t),\n\t\t\t)\n\t\t\t.join(\"\\n\");\n\n\t\tconst input2 = rangesInBase\n\t\t\t.map((r) =>\n\t\t\t\tviewModel.inputCodeEditorView2.editor\n\t\t\t\t\t.getModel()!\n\t\t\t\t\t.getValueInRange(\n\t\t\t\t\t\tviewModel.model.translateBaseRangeToInput(2, r),\n\t\t\t\t\t),\n\t\t\t)\n\t\t\t.join(\"\\n\");\n\n\t\tconst result = rangesInBase\n\t\t\t.map((r) =>\n\t\t\t\tviewModel.resultCodeEditorView.editor\n\t\t\t\t\t.getModel()!\n\t\t\t\t\t.getValueInRange(\n\t\t\t\t\t\tviewModel.model.translateBaseRangeToResult(r),\n\t\t\t\t\t),\n\t\t\t)\n\t\t\t.join(\"\\n\");\n\n\t\tnew MergeEditorOpenContentsFromJSON().run(accessor, {\n\t\t\tdata: {\n\t\t\t\tbase,\n\t\t\t\tinput1,\n\t\t\t\tinput2,\n\t\t\t\tresult,\n\t\t\t\tlanguageId: viewModel.resultCodeEditorView.editor\n\t\t\t\t\t.getModel()!\n\t\t\t\t\t.getLanguageId(),\n\t\t\t},\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["content"]
}
