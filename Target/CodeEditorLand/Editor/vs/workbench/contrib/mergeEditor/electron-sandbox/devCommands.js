import{VSBuffer as C}from"../../../../base/common/buffer.js";import{Codicon as M}from"../../../../base/common/codicons.js";import{randomPath as h}from"../../../../base/common/extpath.js";import{URI as n}from"../../../../base/common/uri.js";import{ILanguageService as P}from"../../../../editor/common/languages/language.js";import{localize as A,localize2 as I}from"../../../../nls.js";import{Action2 as y}from"../../../../platform/actions/common/actions.js";import{IClipboardService as T}from"../../../../platform/clipboard/common/clipboardService.js";import{INativeEnvironmentService as x}from"../../../../platform/environment/common/environment.js";import{IFileService as J}from"../../../../platform/files/common/files.js";import{IQuickInputService as N}from"../../../../platform/quickinput/common/quickInput.js";import{IEditorService as R}from"../../../services/editor/common/editorService.js";import{MergeEditor as B}from"../browser/view/mergeEditor.js";const b=I("mergeEditor","Merge Editor (Dev)");class U extends y{constructor(){super({id:"merge.dev.openContentsJson",category:b,title:I("merge.dev.openState","Open Merge Editor State from JSON"),icon:M.layoutCentered,f1:!0})}async run(e,r){const t=e.get(N),p=e.get(T),d=e.get(R),m=e.get(P),g=e.get(x),i=e.get(J);r||(r={});let o;if(r.data)o=r.data;else{const l=await t.input({prompt:A("mergeEditor.enterJSON","Enter JSON"),value:await p.readText()});if(l===void 0)return;o=l!==""?JSON.parse(l):{base:"",input1:"",input2:"",result:"",languageId:"plaintext"}}const a=n.joinPath(g.tmpDir,h()),s=m.getExtensions(o.languageId)[0]||"",f=n.joinPath(a,`/base${s}`),S=n.joinPath(a,`/input1${s}`),E=n.joinPath(a,`/input2${s}`),v=n.joinPath(a,`/result${s}`),w=n.joinPath(a,`/initialResult${s}`);async function c(l,V){await i.writeFile(l,C.fromString(V))}const O=await k(t,r.resultState);await Promise.all([c(f,o.base),c(S,o.input1),c(E,o.input2),c(v,O?o.initialResult||"":o.result),c(w,o.initialResult||"")]);const j={base:{resource:f},input1:{resource:S,label:"Input 1",description:"Input 1",detail:"(from JSON)"},input2:{resource:E,label:"Input 2",description:"Input 2",detail:"(from JSON)"},result:{resource:v}};d.openEditor(j)}}async function k(u,e){return e?e==="initial":(await u.pick([{label:"result",result:!1},{label:"initial result",result:!0}],{canPickMany:!1}))?.result}class $ extends y{constructor(e){super(e)}run(e){const{activeEditorPane:r}=e.get(R);if(r instanceof B){const t=r.viewModel.get();if(!t)return;this.runWithViewModel(t,e)}}}class Z extends ${constructor(){super({id:"merge.dev.openSelectionInTemporaryMergeEditor",category:b,title:I("merge.dev.openSelectionInTemporaryMergeEditor","Open Selection In Temporary Merge Editor"),icon:M.layoutCentered,f1:!0})}async runWithViewModel(e,r){const t=e.selectionInBase.get()?.rangesInBase;if(!t||t.length===0)return;const p=t.map(i=>e.model.base.getValueInRange(i)).join(`
`),d=t.map(i=>e.inputCodeEditorView1.editor.getModel().getValueInRange(e.model.translateBaseRangeToInput(1,i))).join(`
`),m=t.map(i=>e.inputCodeEditorView2.editor.getModel().getValueInRange(e.model.translateBaseRangeToInput(2,i))).join(`
`),g=t.map(i=>e.resultCodeEditorView.editor.getModel().getValueInRange(e.model.translateBaseRangeToResult(i))).join(`
`);new U().run(r,{data:{base:p,input1:d,input2:m,result:g,languageId:e.resultCodeEditorView.editor.getModel().getLanguageId()}})}}export{U as MergeEditorOpenContentsFromJSON,Z as OpenSelectionInTemporaryMergeEditor};
