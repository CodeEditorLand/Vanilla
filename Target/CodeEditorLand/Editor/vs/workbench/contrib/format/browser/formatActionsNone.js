import{KeyCode as l,KeyMod as t}from"../../../../../vs/base/common/keyCodes.js";import"../../../../../vs/editor/browser/editorBrowser.js";import{EditorAction as v,registerEditorAction as S}from"../../../../../vs/editor/browser/editorExtensions.js";import{EditorContextKeys as n}from"../../../../../vs/editor/common/editorContextKeys.js";import{ILanguageFeaturesService as y}from"../../../../../vs/editor/common/services/languageFeatures.js";import*as i from"../../../../../vs/nls.js";import{ICommandService as I}from"../../../../../vs/platform/commands/common/commands.js";import{ContextKeyExpr as E}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IDialogService as x}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{KeybindingWeight as h}from"../../../../../vs/platform/keybinding/common/keybindingsRegistry.js";import{INotificationService as w}from"../../../../../vs/platform/notification/common/notification.js";import{ViewContainerLocation as F}from"../../../../../vs/workbench/common/views.js";import{VIEWLET_ID as P}from"../../../../../vs/workbench/contrib/extensions/common/extensions.js";import{IPaneCompositePartService as b}from"../../../../../vs/workbench/services/panecomposite/browser/panecomposite.js";async function D(a,e){const o=await a.openPaneComposite(P,F.Sidebar,!0);o&&(o?.getViewPaneContainer()).search(e)}S(class extends v{constructor(){super({id:"editor.action.formatDocument.none",label:i.localize("formatDocument.label.multiple","Format Document"),alias:"Format Document",precondition:E.and(n.writable,n.hasDocumentFormattingProvider.toNegated()),kbOpts:{kbExpr:n.editorTextFocus,primary:t.Shift|t.Alt|l.KeyF,linux:{primary:t.CtrlCmd|t.Shift|l.KeyI},weight:h.EditorContrib}})}async run(e,o){if(!o.hasModel())return;const m=e.get(I),d=e.get(b),f=e.get(w),u=e.get(x),g=e.get(y),r=o.getModel(),c=g.documentFormattingEditProvider.all(r).length;if(c>1)return m.executeCommand("editor.action.formatDocument.multiple");if(c===1)return m.executeCommand("editor.action.formatDocument");if(r.isTooLargeForSyncing())f.warn(i.localize("too.large","This file cannot be formatted because it is too large"));else{const s=r.getLanguageId(),p=i.localize("no.provider","There is no formatter for '{0}' files installed.",s),{confirmed:C}=await u.confirm({message:p,primaryButton:i.localize({key:"install.formatter",comment:["&& denotes a mnemonic"]},"&&Install Formatter...")});C&&D(d,`category:formatters ${s}`)}}});
