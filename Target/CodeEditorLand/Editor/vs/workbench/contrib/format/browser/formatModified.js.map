{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/format/browser/formatModified.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { ITextModel, shouldSynchronizeModel } from '../../../../editor/common/model.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { formatDocumentRangesWithSelectedProvider, FormattingMode } from '../../../../editor/contrib/format/browser/format.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { getOriginalResource } from '../../scm/browser/dirtydiffDecorator.js';\nimport { IQuickDiffService } from '../../scm/common/quickDiff.js';\n\nregisterEditorAction(class FormatModifiedAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatChanges',\n\t\t\tlabel: nls.localize('formatChanges', \"Format Modified Lines\"),\n\t\t\talias: 'Format Modified Lines',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst instaService = accessor.get(IInstantiationService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ranges = await instaService.invokeFunction(getModifiedRanges, editor.getModel());\n\t\tif (isNonEmptyArray(ranges)) {\n\t\t\treturn instaService.invokeFunction(\n\t\t\t\tformatDocumentRangesWithSelectedProvider, editor, ranges,\n\t\t\t\tFormattingMode.Explicit, Progress.None, CancellationToken.None,\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\t}\n});\n\n\nexport async function getModifiedRanges(accessor: ServicesAccessor, modified: ITextModel): Promise<Range[] | undefined | null> {\n\tconst quickDiffService = accessor.get(IQuickDiffService);\n\tconst workerService = accessor.get(IEditorWorkerService);\n\tconst modelService = accessor.get(ITextModelService);\n\n\tconst original = await getOriginalResource(quickDiffService, modified.uri, modified.getLanguageId(), shouldSynchronizeModel(modified));\n\tif (!original) {\n\t\treturn null; // let undefined signify no changes, null represents no source control (there's probably a better way, but I can't think of one rn)\n\t}\n\n\tconst ranges: Range[] = [];\n\tconst ref = await modelService.createModelReference(original);\n\ttry {\n\t\tif (!workerService.canComputeDirtyDiff(original, modified.uri)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst changes = await workerService.computeDirtyDiff(original, modified.uri, false);\n\t\tif (!isNonEmptyArray(changes)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tfor (const change of changes) {\n\t\t\tranges.push(modified.validateRange(new Range(\n\t\t\t\tchange.modifiedStartLineNumber, 1,\n\t\t\t\tchange.modifiedEndLineNumber || change.modifiedStartLineNumber /*endLineNumber is 0 when things got deleted*/, Number.MAX_SAFE_INTEGER)\n\t\t\t));\n\t\t}\n\t} finally {\n\t\tref.dispose();\n\t}\n\n\treturn ranges;\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,cAAc,sBAAsB,wBAAwB;AACrE,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAClC,SAAS,YAAY,8BAA8B;AACnD,SAAS,4BAA4B;AACrC,SAAS,yBAAyB;AAClC,SAAS,0CAA0C,sBAAsB;AACzE,YAAY,SAAS;AACrB,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B;AACtC,SAAS,gBAAgB;AACzB,SAAS,2BAA2B;AACpC,SAAS,yBAAyB;AAElC,qBAAqB,MAAM,6BAA6B,aAAa;AAAA,EAtBrE,OAsBqE;AAAA;AAAA;AAAA,EAEpE,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,IAAI,SAAS,iBAAiB,uBAAuB;AAAA,MAC5D,OAAO;AAAA,MACP,cAAc,eAAe,IAAI,kBAAkB,UAAU,kBAAkB,sCAAsC;AAAA,IACtH,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA4B,QAAoC;AACzE,UAAM,eAAe,SAAS,IAAI,qBAAqB;AAEvD,QAAI,CAAC,OAAO,SAAS,GAAG;AACvB;AAAA,IACD;AAEA,UAAM,SAAS,MAAM,aAAa,eAAe,mBAAmB,OAAO,SAAS,CAAC;AACrF,QAAI,gBAAgB,MAAM,GAAG;AAC5B,aAAO,aAAa;AAAA,QACnB;AAAA,QAA0C;AAAA,QAAQ;AAAA,QAClD,eAAe;AAAA,QAAU,SAAS;AAAA,QAAM,kBAAkB;AAAA,QAC1D;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,CAAC;AAGD,eAAsB,kBAAkB,UAA4B,UAA2D;AAC9H,QAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,QAAM,gBAAgB,SAAS,IAAI,oBAAoB;AACvD,QAAM,eAAe,SAAS,IAAI,iBAAiB;AAEnD,QAAM,WAAW,MAAM,oBAAoB,kBAAkB,SAAS,KAAK,SAAS,cAAc,GAAG,uBAAuB,QAAQ,CAAC;AACrI,MAAI,CAAC,UAAU;AACd,WAAO;AAAA,EACR;AAEA,QAAM,SAAkB,CAAC;AACzB,QAAM,MAAM,MAAM,aAAa,qBAAqB,QAAQ;AAC5D,MAAI;AACH,QAAI,CAAC,cAAc,oBAAoB,UAAU,SAAS,GAAG,GAAG;AAC/D,aAAO;AAAA,IACR;AACA,UAAM,UAAU,MAAM,cAAc,iBAAiB,UAAU,SAAS,KAAK,KAAK;AAClF,QAAI,CAAC,gBAAgB,OAAO,GAAG;AAC9B,aAAO;AAAA,IACR;AACA,eAAW,UAAU,SAAS;AAC7B,aAAO,KAAK,SAAS;AAAA,QAAc,IAAI;AAAA,UACtC,OAAO;AAAA,UAAyB;AAAA,UAChC,OAAO,yBAAyB,OAAO;AAAA,UAAwE,OAAO;AAAA,QAAgB;AAAA,MACvI,CAAC;AAAA,IACF;AAAA,EACD,UAAE;AACD,QAAI,QAAQ;AAAA,EACb;AAEA,SAAO;AACR;AA/BsB;",
  "names": []
}
