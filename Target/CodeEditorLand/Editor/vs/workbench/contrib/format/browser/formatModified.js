import{isNonEmptyArray as m}from"../../../../base/common/arrays.js";import{CancellationToken as u}from"../../../../base/common/cancellation.js";import{EditorAction as l,registerEditorAction as p}from"../../../../editor/browser/editorExtensions.js";import{Range as g}from"../../../../editor/common/core/range.js";import{EditorContextKeys as f}from"../../../../editor/common/editorContextKeys.js";import{shouldSynchronizeModel as v}from"../../../../editor/common/model.js";import{IEditorWorkerService as S}from"../../../../editor/common/services/editorWorker.js";import{ITextModelService as y}from"../../../../editor/common/services/resolverService.js";import{FormattingMode as E,formatDocumentRangesWithSelectedProvider as M}from"../../../../editor/contrib/format/browser/format.js";import*as I from"../../../../nls.js";import{ContextKeyExpr as h}from"../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as w}from"../../../../platform/instantiation/common/instantiation.js";import{Progress as x}from"../../../../platform/progress/common/progress.js";import{getOriginalResource as A}from"../../scm/browser/dirtydiffDecorator.js";import{IQuickDiffService as R}from"../../scm/common/quickDiff.js";p(class extends l{constructor(){super({id:"editor.action.formatChanges",label:I.localize("formatChanges","Format Modified Lines"),alias:"Format Modified Lines",precondition:h.and(f.writable,f.hasDocumentSelectionFormattingProvider)})}async run(e,r){const o=e.get(w);if(!r.hasModel())return;const i=await o.invokeFunction(C,r.getModel());if(m(i))return o.invokeFunction(M,r,i,E.Explicit,x.None,u.None,!0)}});async function C(t,e){const r=t.get(R),o=t.get(S),i=t.get(y),n=await A(r,e.uri,e.getLanguageId(),v(e));if(!n)return null;const s=[],d=await i.createModelReference(n);try{if(!o.canComputeDirtyDiff(n,e.uri))return;const c=await o.computeDirtyDiff(n,e.uri,!1);if(!m(c))return;for(const a of c)s.push(e.validateRange(new g(a.modifiedStartLineNumber,1,a.modifiedEndLineNumber||a.modifiedStartLineNumber,Number.MAX_SAFE_INTEGER)))}finally{d.dispose()}return s}export{C as getModifiedRanges};
