{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/format/browser/formatActionsMultiple.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getCodeEditor, ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction } from '../../../../editor/browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { DocumentFormattingEditProvider, DocumentRangeFormattingEditProvider } from '../../../../editor/common/languages.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { formatDocumentRangesWithProvider, formatDocumentWithProvider, getRealAndSyntheticDocumentFormattersOrdered, FormattingConflicts, FormattingMode, FormattingKind } from '../../../../editor/contrib/format/browser/format.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from '../../../common/contributions.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IExtensionService, toExtension } from '../../../services/extensions/common/extensions.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { INotificationService, NotificationPriority, Severity } from '../../../../platform/notification/common/notification.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IWorkbenchExtensionEnablementService } from '../../../services/extensionManagement/common/extensionManagement.js';\nimport { editorConfigurationBaseNode } from '../../../../editor/common/config/editorConfigurationSchema.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { ILanguageStatusService } from '../../../services/languageStatus/common/languageStatusService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\n\ntype FormattingEditProvider = DocumentFormattingEditProvider | DocumentRangeFormattingEditProvider;\n\nexport class DefaultFormatter extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly configName = 'editor.defaultFormatter';\n\n\tstatic extensionIds: (string | null)[] = [];\n\tstatic extensionItemLabels: string[] = [];\n\tstatic extensionDescriptions: string[] = [];\n\n\tprivate readonly _languageStatusStore = this._store.add(new DisposableStore());\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageStatusService private readonly _languageStatusService: ILanguageStatusService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._store.add(this._extensionService.onDidChangeExtensions(this._updateConfigValues, this));\n\t\tthis._store.add(FormattingConflicts.setFormatterSelector((formatter, document, mode, kind) => this._selectFormatter(formatter, document, mode, kind)));\n\t\tthis._store.add(_editorService.onDidActiveEditorChange(this._updateStatus, this));\n\t\tthis._store.add(_languageFeaturesService.documentFormattingEditProvider.onDidChange(this._updateStatus, this));\n\t\tthis._store.add(_languageFeaturesService.documentRangeFormattingEditProvider.onDidChange(this._updateStatus, this));\n\t\tthis._store.add(_configService.onDidChangeConfiguration(e => e.affectsConfiguration(DefaultFormatter.configName) && this._updateStatus()));\n\t\tthis._updateConfigValues();\n\t}\n\n\tprivate async _updateConfigValues(): Promise<void> {\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tlet extensions = [...this._extensionService.extensions];\n\n\t\textensions = extensions.sort((a, b) => {\n\t\t\tconst boostA = a.categories?.find(cat => cat === 'Formatters' || cat === 'Programming Languages');\n\t\t\tconst boostB = b.categories?.find(cat => cat === 'Formatters' || cat === 'Programming Languages');\n\n\t\t\tif (boostA && !boostB) {\n\t\t\t\treturn -1;\n\t\t\t} else if (!boostA && boostB) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn a.name.localeCompare(b.name);\n\t\t\t}\n\t\t});\n\n\t\tDefaultFormatter.extensionIds.length = 0;\n\t\tDefaultFormatter.extensionItemLabels.length = 0;\n\t\tDefaultFormatter.extensionDescriptions.length = 0;\n\n\t\tDefaultFormatter.extensionIds.push(null);\n\t\tDefaultFormatter.extensionItemLabels.push(nls.localize('null', 'None'));\n\t\tDefaultFormatter.extensionDescriptions.push(nls.localize('nullFormatterDescription', \"None\"));\n\n\t\tfor (const extension of extensions) {\n\t\t\tif (extension.main || extension.browser) {\n\t\t\t\tDefaultFormatter.extensionIds.push(extension.identifier.value);\n\t\t\t\tDefaultFormatter.extensionItemLabels.push(extension.displayName ?? '');\n\t\t\t\tDefaultFormatter.extensionDescriptions.push(extension.description ?? '');\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic _maybeQuotes(s: string): string {\n\t\treturn s.match(/\\s/) ? `'${s}'` : s;\n\t}\n\n\tprivate async _analyzeFormatter<T extends FormattingEditProvider>(kind: FormattingKind, formatter: T[], document: ITextModel): Promise<T | string> {\n\t\tconst defaultFormatterId = this._configService.getValue<string>(DefaultFormatter.configName, {\n\t\t\tresource: document.uri,\n\t\t\toverrideIdentifier: document.getLanguageId()\n\t\t});\n\n\t\tif (defaultFormatterId) {\n\t\t\t// good -> formatter configured\n\t\t\tconst defaultFormatter = formatter.find(formatter => ExtensionIdentifier.equals(formatter.extensionId, defaultFormatterId));\n\t\t\tif (defaultFormatter) {\n\t\t\t\t// formatter available\n\t\t\t\treturn defaultFormatter;\n\t\t\t}\n\n\t\t\t// bad -> formatter gone\n\t\t\tconst extension = await this._extensionService.getExtension(defaultFormatterId);\n\t\t\tif (extension && this._extensionEnablementService.isEnabled(toExtension(extension))) {\n\t\t\t\t// formatter does not target this file\n\t\t\t\tconst langName = this._languageService.getLanguageName(document.getLanguageId()) || document.getLanguageId();\n\t\t\t\tconst detail = kind === FormattingKind.File\n\t\t\t\t\t? nls.localize('miss.1', \"Extension '{0}' is configured as formatter but it cannot format '{1}'-files\", extension.displayName || extension.name, langName)\n\t\t\t\t\t: nls.localize('miss.2', \"Extension '{0}' is configured as formatter but it can only format '{1}'-files as a whole, not selections or parts of it.\", extension.displayName || extension.name, langName);\n\t\t\t\treturn detail;\n\t\t\t}\n\n\t\t} else if (formatter.length === 1) {\n\t\t\t// ok -> nothing configured but only one formatter available\n\t\t\treturn formatter[0];\n\t\t}\n\n\t\tconst langName = this._languageService.getLanguageName(document.getLanguageId()) || document.getLanguageId();\n\t\tconst message = !defaultFormatterId\n\t\t\t? nls.localize('config.needed', \"There are multiple formatters for '{0}' files. One of them should be configured as default formatter.\", DefaultFormatter._maybeQuotes(langName))\n\t\t\t: nls.localize('config.bad', \"Extension '{0}' is configured as formatter but not available. Select a different default formatter to continue.\", defaultFormatterId);\n\n\t\treturn message;\n\t}\n\n\tprivate async _selectFormatter<T extends FormattingEditProvider>(formatter: T[], document: ITextModel, mode: FormattingMode, kind: FormattingKind): Promise<T | undefined> {\n\t\tconst formatterOrMessage = await this._analyzeFormatter(kind, formatter, document);\n\t\tif (typeof formatterOrMessage !== 'string') {\n\t\t\treturn formatterOrMessage;\n\t\t}\n\n\t\tif (mode !== FormattingMode.Silent) {\n\t\t\t// running from a user action -> show modal dialog so that users configure\n\t\t\t// a default formatter\n\t\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\t\tmessage: nls.localize('miss', \"Configure Default Formatter\"),\n\t\t\t\tdetail: formatterOrMessage,\n\t\t\t\tprimaryButton: nls.localize({ key: 'do.config', comment: ['&& denotes a mnemonic'] }, \"&&Configure...\")\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\treturn this._pickAndPersistDefaultFormatter(formatter, document);\n\t\t\t}\n\t\t} else {\n\t\t\t// no user action -> show a silent notification and proceed\n\t\t\tthis._notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tformatterOrMessage,\n\t\t\t\t[{ label: nls.localize('do.config.notification', \"Configure...\"), run: () => this._pickAndPersistDefaultFormatter(formatter, document) }],\n\t\t\t\t{ priority: NotificationPriority.SILENT }\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _pickAndPersistDefaultFormatter<T extends FormattingEditProvider>(formatter: T[], document: ITextModel): Promise<T | undefined> {\n\t\tconst picks = formatter.map((formatter, index): IIndexedPick => {\n\t\t\treturn {\n\t\t\t\tindex,\n\t\t\t\tlabel: formatter.displayName || (formatter.extensionId ? formatter.extensionId.value : '?'),\n\t\t\t\tdescription: formatter.extensionId && formatter.extensionId.value\n\t\t\t};\n\t\t});\n\t\tconst langName = this._languageService.getLanguageName(document.getLanguageId()) || document.getLanguageId();\n\t\tconst pick = await this._quickInputService.pick(picks, { placeHolder: nls.localize('select', \"Select a default formatter for '{0}' files\", DefaultFormatter._maybeQuotes(langName)) });\n\t\tif (!pick || !formatter[pick.index].extensionId) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._configService.updateValue(DefaultFormatter.configName, formatter[pick.index].extensionId!.value, {\n\t\t\tresource: document.uri,\n\t\t\toverrideIdentifier: document.getLanguageId()\n\t\t});\n\t\treturn formatter[pick.index];\n\t}\n\n\t// --- status item\n\n\tprivate _updateStatus() {\n\t\tthis._languageStatusStore.clear();\n\n\t\tconst editor = getCodeEditor(this._editorService.activeTextEditorControl);\n\t\tif (!editor || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tconst document = editor.getModel();\n\t\tconst formatter = getRealAndSyntheticDocumentFormattersOrdered(this._languageFeaturesService.documentFormattingEditProvider, this._languageFeaturesService.documentRangeFormattingEditProvider, document);\n\n\t\tif (formatter.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis._languageStatusStore.add(toDisposable(() => cts.dispose(true)));\n\n\t\tthis._analyzeFormatter(FormattingKind.File, formatter, document).then(result => {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (typeof result !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst command = { id: `formatter/configure/dfl/${generateUuid()}`, title: nls.localize('do.config.command', \"Configure...\") };\n\t\t\tthis._languageStatusStore.add(CommandsRegistry.registerCommand(command.id, () => this._pickAndPersistDefaultFormatter(formatter, document)));\n\t\t\tthis._languageStatusStore.add(this._languageStatusService.addStatus({\n\t\t\t\tid: 'formatter.conflict',\n\t\t\t\tname: nls.localize('summary', \"Formatter Conflicts\"),\n\t\t\t\tselector: { language: document.getLanguageId(), pattern: document.uri.fsPath },\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tlabel: nls.localize('formatter', \"Formatting\"),\n\t\t\t\tdetail: result,\n\t\t\t\tbusy: false,\n\t\t\t\tsource: '',\n\t\t\t\tcommand,\n\t\t\t\taccessibilityInfo: undefined\n\t\t\t}));\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(\n\tDefaultFormatter,\n\tLifecyclePhase.Restored\n);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\t...editorConfigurationBaseNode,\n\tproperties: {\n\t\t[DefaultFormatter.configName]: {\n\t\t\tdescription: nls.localize('formatter.default', \"Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.\"),\n\t\t\ttype: ['string', 'null'],\n\t\t\tdefault: null,\n\t\t\tenum: DefaultFormatter.extensionIds,\n\t\t\tenumItemLabels: DefaultFormatter.extensionItemLabels,\n\t\t\tmarkdownEnumDescriptions: DefaultFormatter.extensionDescriptions\n\t\t}\n\t}\n});\n\ninterface IIndexedPick extends IQuickPickItem {\n\tindex: number;\n}\n\nfunction logFormatterTelemetry<T extends { extensionId?: ExtensionIdentifier }>(telemetryService: ITelemetryService, mode: 'document' | 'range', options: T[], pick?: T) {\n\ttype FormatterPicks = {\n\t\tmode: 'document' | 'range';\n\t\textensions: string[];\n\t\tpick: string;\n\t};\n\ttype FormatterPicksClassification = {\n\t\towner: 'jrieken';\n\t\tcomment: 'Information about resolving formatter conflicts';\n\t\tmode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Formatting mode: whole document or a range/selection' };\n\t\textensions: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension that got picked' };\n\t\tpick: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The possible extensions to pick' };\n\t};\n\tfunction extKey(obj: T): string {\n\t\treturn obj.extensionId ? ExtensionIdentifier.toKey(obj.extensionId) : 'unknown';\n\t}\n\ttelemetryService.publicLog2<FormatterPicks, FormatterPicksClassification>('formatterpick', {\n\t\tmode,\n\t\textensions: options.map(extKey),\n\t\tpick: pick ? extKey(pick) : 'none'\n\t});\n}\n\nasync function showFormatterPick(accessor: ServicesAccessor, model: ITextModel, formatters: FormattingEditProvider[]): Promise<number | undefined> {\n\tconst quickPickService = accessor.get(IQuickInputService);\n\tconst configService = accessor.get(IConfigurationService);\n\tconst languageService = accessor.get(ILanguageService);\n\n\tconst overrides = { resource: model.uri, overrideIdentifier: model.getLanguageId() };\n\tconst defaultFormatter = configService.getValue<string>(DefaultFormatter.configName, overrides);\n\n\tlet defaultFormatterPick: IIndexedPick | undefined;\n\n\tconst picks = formatters.map((provider, index) => {\n\t\tconst isDefault = ExtensionIdentifier.equals(provider.extensionId, defaultFormatter);\n\t\tconst pick: IIndexedPick = {\n\t\t\tindex,\n\t\t\tlabel: provider.displayName || '',\n\t\t\tdescription: isDefault ? nls.localize('def', \"(default)\") : undefined,\n\t\t};\n\n\t\tif (isDefault) {\n\t\t\t// autofocus default pick\n\t\t\tdefaultFormatterPick = pick;\n\t\t}\n\n\t\treturn pick;\n\t});\n\n\tconst configurePick: IQuickPickItem = {\n\t\tlabel: nls.localize('config', \"Configure Default Formatter...\")\n\t};\n\n\tconst pick = await quickPickService.pick([...picks, { type: 'separator' }, configurePick],\n\t\t{\n\t\t\tplaceHolder: nls.localize('format.placeHolder', \"Select a formatter\"),\n\t\t\tactiveItem: defaultFormatterPick\n\t\t}\n\t);\n\tif (!pick) {\n\t\t// dismissed\n\t\treturn undefined;\n\n\t} else if (pick === configurePick) {\n\t\t// config default\n\t\tconst langName = languageService.getLanguageName(model.getLanguageId()) || model.getLanguageId();\n\t\tconst pick = await quickPickService.pick(picks, { placeHolder: nls.localize('select', \"Select a default formatter for '{0}' files\", DefaultFormatter._maybeQuotes(langName)) });\n\t\tif (pick && formatters[pick.index].extensionId) {\n\t\t\tconfigService.updateValue(DefaultFormatter.configName, formatters[pick.index].extensionId!.value, overrides);\n\t\t}\n\t\treturn undefined;\n\n\t} else {\n\t\t// picked one\n\t\treturn (<IIndexedPick>pick).index;\n\t}\n\n}\n\nregisterEditorAction(class FormatDocumentMultipleAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatDocument.multiple',\n\t\t\tlabel: nls.localize('formatDocument.label.multiple', \"Format Document With...\"),\n\t\t\talias: 'Format Document...',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasMultipleDocumentFormattingProvider),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.3\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst model = editor.getModel();\n\t\tconst provider = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n\t\tconst pick = await instaService.invokeFunction(showFormatterPick, model, provider);\n\t\tif (typeof pick === 'number') {\n\t\t\tawait instaService.invokeFunction(formatDocumentWithProvider, provider[pick], editor, FormattingMode.Explicit, CancellationToken.None);\n\t\t}\n\t\tlogFormatterTelemetry(telemetryService, 'document', provider, typeof pick === 'number' && provider[pick] || undefined);\n\t}\n});\n\nregisterEditorAction(class FormatSelectionMultipleAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatSelection.multiple',\n\t\t\tlabel: nls.localize('formatSelection.label.multiple', \"Format Selection With...\"),\n\t\t\talias: 'Format Code...',\n\t\t\tprecondition: ContextKeyExpr.and(ContextKeyExpr.and(EditorContextKeys.writable), EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider),\n\t\t\tcontextMenuOpts: {\n\t\t\t\twhen: ContextKeyExpr.and(EditorContextKeys.hasNonEmptySelection),\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.31\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\tconst model = editor.getModel();\n\t\tlet range: Range = editor.getSelection();\n\t\tif (range.isEmpty()) {\n\t\t\trange = new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));\n\t\t}\n\n\t\tconst provider = languageFeaturesService.documentRangeFormattingEditProvider.ordered(model);\n\t\tconst pick = await instaService.invokeFunction(showFormatterPick, model, provider);\n\t\tif (typeof pick === 'number') {\n\t\t\tawait instaService.invokeFunction(formatDocumentRangesWithProvider, provider[pick], editor, range, CancellationToken.None, true);\n\t\t}\n\n\t\tlogFormatterTelemetry(telemetryService, 'range', provider, typeof pick === 'number' && provider[pick] || undefined);\n\t}\n});\n"],
  "mappings": "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",
  "names": ["formatter", "langName", "pick"]
}
