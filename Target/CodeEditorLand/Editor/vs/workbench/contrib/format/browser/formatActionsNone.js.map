{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/format/browser/formatActionsNone.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\n\nregisterEditorAction(class FormatDocumentMultipleAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatDocument.none',\n\t\t\tlabel: nls.localize('formatDocument.label.multiple', \"Format Document\"),\n\t\t\talias: 'Format Document',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider.toNegated()),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyF,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\n\t\tconst model = editor.getModel();\n\t\tconst formatterCount = languageFeaturesService.documentFormattingEditProvider.all(model).length;\n\n\t\tif (formatterCount > 1) {\n\t\t\treturn commandService.executeCommand('editor.action.formatDocument.multiple');\n\t\t} else if (formatterCount === 1) {\n\t\t\treturn commandService.executeCommand('editor.action.formatDocument');\n\t\t} else if (model.isTooLargeForSyncing()) {\n\t\t\tnotificationService.warn(nls.localize('too.large', \"This file cannot be formatted because it is too large\"));\n\t\t} else {\n\t\t\tconst langName = model.getLanguageId();\n\t\t\tconst message = nls.localize('no.provider', \"There is no formatter for '{0}' files installed.\", langName);\n\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\tmessage,\n\t\t\t\tprimaryButton: nls.localize({ key: 'install.formatter', comment: ['&& denotes a mnemonic'] }, \"&&Install Formatter...\")\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\textensionsWorkbenchService.openSearch(`category:formatters ${langName}`);\n\t\t\t}\n\t\t}\n\t}\n});\n"],
  "mappings": ";;AAKA,SAAS,SAAS,cAAc;AAChC,SAAS,mBAAmB;AAC5B,SAAS,cAAc,sBAAsB,wBAAwB;AACrE,SAAS,yBAAyB;AAClC,YAAY,SAAS;AACrB,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,4BAA4B;AACrC,SAAS,mCAAmC;AAC5C,SAAS,sBAAsB;AAC/B,SAAS,gCAAgC;AAEzC,qBAAqB,MAAM,qCAAqC,aAAa;AAAA,EAlB7E,OAkB6E;AAAA;AAAA;AAAA,EAE5E,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,IAAI,SAAS,iCAAiC,iBAAiB;AAAA,MACtE,OAAO;AAAA,MACP,cAAc,eAAe,IAAI,kBAAkB,UAAU,kBAAkB,8BAA8B,UAAU,CAAC;AAAA,MACxH,QAAQ;AAAA,QACP,QAAQ,kBAAkB;AAAA,QAC1B,SAAS,OAAO,QAAQ,OAAO,MAAM,QAAQ;AAAA,QAC7C,OAAO,EAAE,SAAS,OAAO,UAAU,OAAO,QAAQ,QAAQ,KAAK;AAAA,QAC/D,QAAQ,iBAAiB;AAAA,MAC1B;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA4B,QAAoC;AACzE,QAAI,CAAC,OAAO,SAAS,GAAG;AACvB;AAAA,IACD;AAEA,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,6BAA6B,SAAS,IAAI,2BAA2B;AAC3E,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAC7D,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,0BAA0B,SAAS,IAAI,wBAAwB;AAErE,UAAM,QAAQ,OAAO,SAAS;AAC9B,UAAM,iBAAiB,wBAAwB,+BAA+B,IAAI,KAAK,EAAE;AAEzF,QAAI,iBAAiB,GAAG;AACvB,aAAO,eAAe,eAAe,uCAAuC;AAAA,IAC7E,WAAW,mBAAmB,GAAG;AAChC,aAAO,eAAe,eAAe,8BAA8B;AAAA,IACpE,WAAW,MAAM,qBAAqB,GAAG;AACxC,0BAAoB,KAAK,IAAI,SAAS,aAAa,uDAAuD,CAAC;AAAA,IAC5G,OAAO;AACN,YAAM,WAAW,MAAM,cAAc;AACrC,YAAM,UAAU,IAAI,SAAS,eAAe,oDAAoD,QAAQ;AACxG,YAAM,EAAE,UAAU,IAAI,MAAM,cAAc,QAAQ;AAAA,QACjD;AAAA,QACA,eAAe,IAAI,SAAS,EAAE,KAAK,qBAAqB,SAAS,CAAC,uBAAuB,EAAE,GAAG,wBAAwB;AAAA,MACvH,CAAC;AACD,UAAI,WAAW;AACd,mCAA2B,WAAW,uBAAuB,QAAQ,EAAE;AAAA,MACxE;AAAA,IACD;AAAA,EACD;AACD,CAAC;",
  "names": []
}
