{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/format/browser/formatActionsNone.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\ttype ServicesAccessor,\n\tregisterEditorAction,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport { ILanguageFeaturesService } from \"../../../../editor/common/services/languageFeatures.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IExtensionsWorkbenchService } from \"../../extensions/common/extensions.js\";\n\nregisterEditorAction(\n\tclass FormatDocumentMultipleAction extends EditorAction {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"editor.action.formatDocument.none\",\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"formatDocument.label.multiple\",\n\t\t\t\t\t\"Format Document\",\n\t\t\t\t),\n\t\t\t\talias: \"Format Document\",\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\tEditorContextKeys.writable,\n\t\t\t\t\tEditorContextKeys.hasDocumentFormattingProvider.toNegated(),\n\t\t\t\t),\n\t\t\t\tkbOpts: {\n\t\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyF,\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI,\n\t\t\t\t\t},\n\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tasync run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\teditor: ICodeEditor,\n\t\t): Promise<void> {\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst extensionsWorkbenchService = accessor.get(\n\t\t\t\tIExtensionsWorkbenchService,\n\t\t\t);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\tconst languageFeaturesService = accessor.get(\n\t\t\t\tILanguageFeaturesService,\n\t\t\t);\n\n\t\t\tconst model = editor.getModel();\n\t\t\tconst formatterCount =\n\t\t\t\tlanguageFeaturesService.documentFormattingEditProvider.all(\n\t\t\t\t\tmodel,\n\t\t\t\t).length;\n\n\t\t\tif (formatterCount > 1) {\n\t\t\t\treturn commandService.executeCommand(\n\t\t\t\t\t\"editor.action.formatDocument.multiple\",\n\t\t\t\t);\n\t\t\t} else if (formatterCount === 1) {\n\t\t\t\treturn commandService.executeCommand(\n\t\t\t\t\t\"editor.action.formatDocument\",\n\t\t\t\t);\n\t\t\t} else if (model.isTooLargeForSyncing()) {\n\t\t\t\tnotificationService.warn(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"too.large\",\n\t\t\t\t\t\t\"This file cannot be formatted because it is too large\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst langName = model.getLanguageId();\n\t\t\t\tconst message = nls.localize(\n\t\t\t\t\t\"no.provider\",\n\t\t\t\t\t\"There is no formatter for '{0}' files installed.\",\n\t\t\t\t\tlangName,\n\t\t\t\t);\n\t\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\t\tmessage,\n\t\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"install.formatter\",\n\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"&&Install Formatter...\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t\tif (confirmed) {\n\t\t\t\t\textensionsWorkbenchService.openSearch(\n\t\t\t\t\t\t`category:formatters ${langName}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n);\n"],
  "mappings": ";;AAKA,SAAS,SAAS,cAAc;AAEhC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC,SAAS,gCAAgC;AACzC,YAAY,SAAS;AACrB,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,4BAA4B;AACrC,SAAS,mCAAmC;AAE5C;AAAA,EACC,MAAM,qCAAqC,aAAa;AAAA,IAvBzD,OAuByD;AAAA;AAAA;AAAA,IACvD,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO,IAAI;AAAA,UACV;AAAA,UACA;AAAA,QACD;AAAA,QACA,OAAO;AAAA,QACP,cAAc,eAAe;AAAA,UAC5B,kBAAkB;AAAA,UAClB,kBAAkB,8BAA8B,UAAU;AAAA,QAC3D;AAAA,QACA,QAAQ;AAAA,UACP,QAAQ,kBAAkB;AAAA,UAC1B,SAAS,OAAO,QAAQ,OAAO,MAAM,QAAQ;AAAA,UAC7C,OAAO;AAAA,YACN,SAAS,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,UAClD;AAAA,UACA,QAAQ,iBAAiB;AAAA,QAC1B;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IAEA,MAAM,IACL,UACA,QACgB;AAChB,UAAI,CAAC,OAAO,SAAS,GAAG;AACvB;AAAA,MACD;AAEA,YAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,YAAM,6BAA6B,SAAS;AAAA,QAC3C;AAAA,MACD;AACA,YAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAC7D,YAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,YAAM,0BAA0B,SAAS;AAAA,QACxC;AAAA,MACD;AAEA,YAAM,QAAQ,OAAO,SAAS;AAC9B,YAAM,iBACL,wBAAwB,+BAA+B;AAAA,QACtD;AAAA,MACD,EAAE;AAEH,UAAI,iBAAiB,GAAG;AACvB,eAAO,eAAe;AAAA,UACrB;AAAA,QACD;AAAA,MACD,WAAW,mBAAmB,GAAG;AAChC,eAAO,eAAe;AAAA,UACrB;AAAA,QACD;AAAA,MACD,WAAW,MAAM,qBAAqB,GAAG;AACxC,4BAAoB;AAAA,UACnB,IAAI;AAAA,YACH;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MACD,OAAO;AACN,cAAM,WAAW,MAAM,cAAc;AACrC,cAAM,UAAU,IAAI;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,QACD;AACA,cAAM,EAAE,UAAU,IAAI,MAAM,cAAc,QAAQ;AAAA,UACjD;AAAA,UACA,eAAe,IAAI;AAAA,YAClB;AAAA,cACC,KAAK;AAAA,cACL,SAAS,CAAC,uBAAuB;AAAA,YAClC;AAAA,YACA;AAAA,UACD;AAAA,QACD,CAAC;AACD,YAAI,WAAW;AACd,qCAA2B;AAAA,YAC1B,uBAAuB,QAAQ;AAAA,UAChC;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
