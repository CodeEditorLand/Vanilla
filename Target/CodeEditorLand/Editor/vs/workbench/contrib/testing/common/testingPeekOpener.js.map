{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingPeekOpener.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IEditor } from \"../../../../editor/common/editorCommon.js\";\nimport type { ITextEditorOptions } from \"../../../../platform/editor/common/editor.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { MutableObservableValue } from \"./observableValue.js\";\nimport type { ITestResult } from \"./testResult.js\";\nimport type { TestResultItem } from \"./testTypes.js\";\n\nexport interface IShowResultOptions {\n\t/** Reveal the peek, if configured, in the given editor */\n\tinEditor?: IEditor;\n\t/** Editor options, if a new editor is opened */\n\toptions?: Partial<ITextEditorOptions>;\n}\n\nexport interface ITestingPeekOpener {\n\t_serviceBrand: undefined;\n\n\t/** Whether test history should be shown in the results output. */\n\thistoryVisible: MutableObservableValue<boolean>;\n\n\t/**\n\t * Tries to peek the first test error, if the item is in a failed state.\n\t * @returns a boolean indicating whether a peek was opened\n\t */\n\ttryPeekFirstError(\n\t\tresult: ITestResult,\n\t\ttest: TestResultItem,\n\t\toptions?: Partial<ITextEditorOptions>,\n\t): boolean;\n\n\t/**\n\t * Peeks at the given test message uri.\n\t * @returns a boolean indicating whether a peek was opened\n\t */\n\tpeekUri(uri: URI, options?: IShowResultOptions): boolean;\n\n\t/**\n\t * Opens the currently selected message in an editor.\n\t */\n\topenCurrentInEditor(): void;\n\n\t/**\n\t * Opens the peek. Shows any available message.\n\t */\n\topen(): void;\n\n\t/**\n\t * Closes peeks for all visible editors.\n\t */\n\tcloseAllPeeks(): void;\n}\n\nexport const ITestingPeekOpener =\n\tcreateDecorator<ITestingPeekOpener>(\"testingPeekOpener\");\n"],
  "mappings": "AAQA,SAAS,uBAAuB;AAkDzB,MAAM,qBACZ,gBAAoC,mBAAmB;",
  "names": []
}
