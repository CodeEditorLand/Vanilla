var p=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var l=(i,a,e,t)=>{for(var r=t>1?void 0:t?h(a,e):a,o=i.length-1,n;o>=0;o--)(n=i[o])&&(r=(t?n(a,e,r):n(r))||r);return t&&r&&p(a,e,r),r},g=(i,a)=>(e,t)=>a(e,t,i);import"../../../../base/common/event.js";import{Disposable as d,DisposableStore as u}from"../../../../base/common/lifecycle.js";import{IStorageService as c}from"../../../../platform/storage/common/storage.js";const S={deserialize:i=>JSON.parse(i),serialize:i=>JSON.stringify(i)};let s=class extends d{constructor(e,t){super();this.storage=t;this.key=e.key,this.scope=e.scope,this.target=e.target,this.serialization=e.serialization??S,this.onDidChange=this.storage.onDidChangeValue(this.scope,this.key,this._register(new u))}serialization;key;scope;target;value;onDidChange;get(e){if(this.value===void 0){const t=this.storage.get(this.key,this.scope);this.value=t===void 0?e:this.serialization.deserialize(t)}return this.value}store(e){this.value=e,this.storage.store(this.key,this.serialization.serialize(e),this.scope,this.target)}delete(){this.storage.remove(this.key,this.scope)}};s=l([g(1,c)],s);export{s as StoredValue};
