{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/constants.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from \"../../../../base/common/iconLabels.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { TestResultState, TestRunProfileBitset } from \"./testTypes.js\";\n\nexport enum Testing {\n\t// marked as \"extension\" so that any existing test extensions are assigned to it.\n\tViewletId = \"workbench.view.extension.test\",\n\tExplorerViewId = \"workbench.view.testing\",\n\tOutputPeekContributionId = \"editor.contrib.testingOutputPeek\",\n\tDecorationsContributionId = \"editor.contrib.testingDecorations\",\n\tCoverageDecorationsContributionId = \"editor.contrib.coverageDecorations\",\n\tCoverageViewId = \"workbench.view.testCoverage\",\n\n\tResultsPanelId = \"workbench.panel.testResults\",\n\tResultsViewId = \"workbench.panel.testResults.view\",\n\n\tMessageLanguageId = \"vscodeInternalTestMessage\",\n}\n\nexport enum TestExplorerViewMode {\n\tList = \"list\",\n\tTree = \"true\",\n}\n\nexport enum TestExplorerViewSorting {\n\tByLocation = \"location\",\n\tByStatus = \"status\",\n\tByDuration = \"duration\",\n}\n\nconst testStateNames: { [K in TestResultState]: string } = {\n\t[TestResultState.Errored]: localize(\"testState.errored\", \"Errored\"),\n\t[TestResultState.Failed]: localize(\"testState.failed\", \"Failed\"),\n\t[TestResultState.Passed]: localize(\"testState.passed\", \"Passed\"),\n\t[TestResultState.Queued]: localize(\"testState.queued\", \"Queued\"),\n\t[TestResultState.Running]: localize(\"testState.running\", \"Running\"),\n\t[TestResultState.Skipped]: localize(\"testState.skipped\", \"Skipped\"),\n\t[TestResultState.Unset]: localize(\"testState.unset\", \"Not yet run\"),\n};\n\nexport const labelForTestInState = (label: string, state: TestResultState) =>\n\tlocalize(\n\t\t{\n\t\t\tkey: \"testing.treeElementLabel\",\n\t\t\tcomment: [\n\t\t\t\t'label then the unit tests state, for example \"Addition Tests (Running)\"',\n\t\t\t],\n\t\t},\n\t\t\"{0} ({1})\",\n\t\tstripIcons(label),\n\t\ttestStateNames[state],\n\t);\n\nexport const testConfigurationGroupNames: Partial<\n\tRecord<TestRunProfileBitset, string | undefined>\n> = {\n\t[TestRunProfileBitset.Debug]: localize(\"testGroup.debug\", \"Debug\"),\n\t[TestRunProfileBitset.Run]: localize(\"testGroup.run\", \"Run\"),\n\t[TestRunProfileBitset.Coverage]: localize(\"testGroup.coverage\", \"Coverage\"),\n};\n\nexport enum TestCommandId {\n\tCancelTestRefreshAction = \"testing.cancelTestRefresh\",\n\tCancelTestRunAction = \"testing.cancelRun\",\n\tClearTestResultsAction = \"testing.clearTestResults\",\n\tCollapseAllAction = \"testing.collapseAll\",\n\tConfigureTestProfilesAction = \"testing.configureProfile\",\n\tContinousRunUsingForTest = \"testing.continuousRunUsingForTest\",\n\tCoverageAtCursor = \"testing.coverageAtCursor\",\n\tCoverageByUri = \"testing.coverage.uri\",\n\tCoverageClear = \"testing.coverage.close\",\n\tCoverageCurrentFile = \"testing.coverageCurrentFile\",\n\tCoverageFilterToTest = \"testing.coverageFilterToTest\",\n\tCoverageFilterToTestInEditor = \"testing.coverageFilterToTestInEditor\",\n\tCoverageLastRun = \"testing.coverageLastRun\",\n\tCoverageSelectedAction = \"testing.coverageSelected\",\n\tCoverageToggleToolbar = \"testing.coverageToggleToolbar\",\n\tCoverageViewChangeSorting = \"testing.coverageViewChangeSorting\",\n\tDebugAction = \"testing.debug\",\n\tDebugAllAction = \"testing.debugAll\",\n\tDebugAtCursor = \"testing.debugAtCursor\",\n\tDebugByUri = \"testing.debug.uri\",\n\tDebugCurrentFile = \"testing.debugCurrentFile\",\n\tDebugFailedTests = \"testing.debugFailTests\",\n\tDebugLastRun = \"testing.debugLastRun\",\n\tDebugSelectedAction = \"testing.debugSelected\",\n\tFilterAction = \"workbench.actions.treeView.testExplorer.filter\",\n\tGetExplorerSelection = \"_testing.getExplorerSelection\",\n\tGetSelectedProfiles = \"testing.getSelectedProfiles\",\n\tGoToTest = \"testing.editFocusedTest\",\n\tGoToRelatedTest = \"testing.goToRelatedTest\",\n\tPeekRelatedTest = \"testing.peekRelatedTest\",\n\tGoToRelatedCode = \"testing.goToRelatedCode\",\n\tPeekRelatedCode = \"testing.peekRelatedCode\",\n\tHideTestAction = \"testing.hideTest\",\n\tOpenCoverage = \"testing.openCoverage\",\n\tOpenOutputPeek = \"testing.openOutputPeek\",\n\tRefreshTestsAction = \"testing.refreshTests\",\n\tReRunFailedTests = \"testing.reRunFailTests\",\n\tReRunLastRun = \"testing.reRunLastRun\",\n\tRunAction = \"testing.run\",\n\tRunAllAction = \"testing.runAll\",\n\tRunAllWithCoverageAction = \"testing.coverageAll\",\n\tRunAtCursor = \"testing.runAtCursor\",\n\tRunByUri = \"testing.run.uri\",\n\tRunCurrentFile = \"testing.runCurrentFile\",\n\tRunSelectedAction = \"testing.runSelected\",\n\tRunUsingProfileAction = \"testing.runUsing\",\n\tRunWithCoverageAction = \"testing.coverage\",\n\tSearchForTestExtension = \"testing.searchForTestExtension\",\n\tSelectDefaultTestProfiles = \"testing.selectDefaultTestProfiles\",\n\tShowMostRecentOutputAction = \"testing.showMostRecentOutput\",\n\tStartContinousRun = \"testing.startContinuousRun\",\n\tStopContinousRun = \"testing.stopContinuousRun\",\n\tTestingSortByDurationAction = \"testing.sortByDuration\",\n\tTestingSortByLocationAction = \"testing.sortByLocation\",\n\tTestingSortByStatusAction = \"testing.sortByStatus\",\n\tTestingViewAsListAction = \"testing.viewAsList\",\n\tTestingViewAsTreeAction = \"testing.viewAsTree\",\n\tToggleContinousRunForTest = \"testing.toggleContinuousRunForTest\",\n\tToggleInlineTestOutput = \"testing.toggleInlineTestOutput\",\n\tUnhideAllTestsAction = \"testing.unhideAllTests\",\n\tUnhideTestAction = \"testing.unhideTest\",\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,iBAAiB,4BAA4B;AAE/C,IAAK,UAAL,kBAAKA,aAAL;AAEN,EAAAA,SAAA,eAAY;AACZ,EAAAA,SAAA,oBAAiB;AACjB,EAAAA,SAAA,8BAA2B;AAC3B,EAAAA,SAAA,+BAA4B;AAC5B,EAAAA,SAAA,uCAAoC;AACpC,EAAAA,SAAA,oBAAiB;AAEjB,EAAAA,SAAA,oBAAiB;AACjB,EAAAA,SAAA,mBAAgB;AAEhB,EAAAA,SAAA,uBAAoB;AAZT,SAAAA;AAAA,GAAA;AAeL,IAAK,uBAAL,kBAAKC,0BAAL;AACN,EAAAA,sBAAA,UAAO;AACP,EAAAA,sBAAA,UAAO;AAFI,SAAAA;AAAA,GAAA;AAKL,IAAK,0BAAL,kBAAKC,6BAAL;AACN,EAAAA,yBAAA,gBAAa;AACb,EAAAA,yBAAA,cAAW;AACX,EAAAA,yBAAA,gBAAa;AAHF,SAAAA;AAAA,GAAA;AAMZ,MAAM,iBAAqD;AAAA,EAC1D,CAAC,gBAAgB,OAAO,GAAG,SAAS,qBAAqB,SAAS;AAAA,EAClE,CAAC,gBAAgB,MAAM,GAAG,SAAS,oBAAoB,QAAQ;AAAA,EAC/D,CAAC,gBAAgB,MAAM,GAAG,SAAS,oBAAoB,QAAQ;AAAA,EAC/D,CAAC,gBAAgB,MAAM,GAAG,SAAS,oBAAoB,QAAQ;AAAA,EAC/D,CAAC,gBAAgB,OAAO,GAAG,SAAS,qBAAqB,SAAS;AAAA,EAClE,CAAC,gBAAgB,OAAO,GAAG,SAAS,qBAAqB,SAAS;AAAA,EAClE,CAAC,gBAAgB,KAAK,GAAG,SAAS,mBAAmB,aAAa;AACnE;AAEO,MAAM,sBAAsB,wBAAC,OAAe,UAClD;AAAA,EACC;AAAA,IACC,KAAK;AAAA,IACL,SAAS;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,EACA,WAAW,KAAK;AAAA,EAChB,eAAe,KAAK;AACrB,GAXkC;AAa5B,MAAM,8BAET;AAAA,EACH,CAAC,qBAAqB,KAAK,GAAG,SAAS,mBAAmB,OAAO;AAAA,EACjE,CAAC,qBAAqB,GAAG,GAAG,SAAS,iBAAiB,KAAK;AAAA,EAC3D,CAAC,qBAAqB,QAAQ,GAAG,SAAS,sBAAsB,UAAU;AAC3E;AAEO,IAAK,gBAAL,kBAAKC,mBAAL;AACN,EAAAA,eAAA,6BAA0B;AAC1B,EAAAA,eAAA,yBAAsB;AACtB,EAAAA,eAAA,4BAAyB;AACzB,EAAAA,eAAA,uBAAoB;AACpB,EAAAA,eAAA,iCAA8B;AAC9B,EAAAA,eAAA,8BAA2B;AAC3B,EAAAA,eAAA,sBAAmB;AACnB,EAAAA,eAAA,mBAAgB;AAChB,EAAAA,eAAA,mBAAgB;AAChB,EAAAA,eAAA,yBAAsB;AACtB,EAAAA,eAAA,0BAAuB;AACvB,EAAAA,eAAA,kCAA+B;AAC/B,EAAAA,eAAA,qBAAkB;AAClB,EAAAA,eAAA,4BAAyB;AACzB,EAAAA,eAAA,2BAAwB;AACxB,EAAAA,eAAA,+BAA4B;AAC5B,EAAAA,eAAA,iBAAc;AACd,EAAAA,eAAA,oBAAiB;AACjB,EAAAA,eAAA,mBAAgB;AAChB,EAAAA,eAAA,gBAAa;AACb,EAAAA,eAAA,sBAAmB;AACnB,EAAAA,eAAA,sBAAmB;AACnB,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,yBAAsB;AACtB,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,0BAAuB;AACvB,EAAAA,eAAA,yBAAsB;AACtB,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,qBAAkB;AAClB,EAAAA,eAAA,qBAAkB;AAClB,EAAAA,eAAA,qBAAkB;AAClB,EAAAA,eAAA,qBAAkB;AAClB,EAAAA,eAAA,oBAAiB;AACjB,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,oBAAiB;AACjB,EAAAA,eAAA,wBAAqB;AACrB,EAAAA,eAAA,sBAAmB;AACnB,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,8BAA2B;AAC3B,EAAAA,eAAA,iBAAc;AACd,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,oBAAiB;AACjB,EAAAA,eAAA,uBAAoB;AACpB,EAAAA,eAAA,2BAAwB;AACxB,EAAAA,eAAA,2BAAwB;AACxB,EAAAA,eAAA,4BAAyB;AACzB,EAAAA,eAAA,+BAA4B;AAC5B,EAAAA,eAAA,gCAA6B;AAC7B,EAAAA,eAAA,uBAAoB;AACpB,EAAAA,eAAA,sBAAmB;AACnB,EAAAA,eAAA,iCAA8B;AAC9B,EAAAA,eAAA,iCAA8B;AAC9B,EAAAA,eAAA,+BAA4B;AAC5B,EAAAA,eAAA,6BAA0B;AAC1B,EAAAA,eAAA,6BAA0B;AAC1B,EAAAA,eAAA,+BAA4B;AAC5B,EAAAA,eAAA,4BAAyB;AACzB,EAAAA,eAAA,0BAAuB;AACvB,EAAAA,eAAA,sBAAmB;AA7DR,SAAAA;AAAA,GAAA;",
  "names": ["Testing", "TestExplorerViewMode", "TestExplorerViewSorting", "TestCommandId"]
}
