var h=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var g=(s,e,t,r)=>{for(var o=r>1?void 0:r?T(e,t):e,i=s.length-1,l;i>=0;i--)(l=s[i])&&(o=(r?l(e,t,o):l(o))||o);return r&&o&&h(e,t,o),o},u=(s,e)=>(t,r)=>e(t,r,s);import{Emitter as b}from"../../../../base/common/event.js";import{Iterable as m}from"../../../../base/common/iterator.js";import{Disposable as D}from"../../../../base/common/lifecycle.js";import{deepClone as C}from"../../../../base/common/objects.js";import{IContextKeyService as R}from"../../../../platform/contextkey/common/contextkey.js";import{createDecorator as v}from"../../../../platform/instantiation/common/instantiation.js";import{IStorageService as y,StorageScope as I,StorageTarget as x}from"../../../../platform/storage/common/storage.js";import{StoredValue as E}from"./storedValue.js";import{TestId as P}from"./testId.js";import{TestRunProfileBitset as n,testRunProfileBitsetList as M}from"./testTypes.js";import{TestingContextKeys as f}from"./testingContextKeys.js";const W=v("testProfileService"),j=(s,e)=>s.controllerId===e.controllerId&&(P.isRoot(e.item.extId)||!s.tag||e.item.tags.includes(s.tag)),p=(s,e)=>s.isDefault!==e.isDefault?s.isDefault?-1:1:s.label.localeCompare(e.label),F=s=>[[f.hasRunnableTests.key,(s&n.Run)!==0],[f.hasDebuggableTests.key,(s&n.Debug)!==0],[f.hasCoverableTests.key,(s&n.Coverage)!==0]];let a=class extends D{userDefaults;capabilitiesContexts;changeEmitter=this._register(new b);controllerProfiles=new Map;onDidChange=this.changeEmitter.event;constructor(e,t){super(),t.remove("testingPreferredProfiles",I.WORKSPACE),this.userDefaults=this._register(new E({key:"testingPreferredProfiles2",scope:I.WORKSPACE,target:x.MACHINE},t)),this.capabilitiesContexts={[n.Run]:f.hasRunnableTests.bindTo(e),[n.Debug]:f.hasDebuggableTests.bindTo(e),[n.Coverage]:f.hasCoverableTests.bindTo(e),[n.HasNonDefaultProfile]:f.hasNonDefaultProfile.bindTo(e),[n.HasConfigurable]:f.hasConfigurableProfile.bindTo(e),[n.SupportsContinuousRun]:f.supportsContinuousRun.bindTo(e)},this.refreshContextKeys()}addProfile(e,t){const r=this.userDefaults.get()?.[e.id]?.[t.profileId],o={...t,isDefault:r??t.isDefault,wasInitiallyDefault:t.isDefault};let i=this.controllerProfiles.get(t.controllerId);i?(i.profiles.push(o),i.profiles.sort(p)):(i={profiles:[o],controller:e},this.controllerProfiles.set(t.controllerId,i)),this.refreshContextKeys(),this.changeEmitter.fire()}updateProfile(e,t,r){const o=this.controllerProfiles.get(e);if(!o)return;const i=o.profiles.find(l=>l.controllerId===e&&l.profileId===t);if(i){if(Object.assign(i,r),o.profiles.sort(p),r.isDefault!==void 0){const l=C(this.userDefaults.get({}));d(l,i,r.isDefault),this.userDefaults.store(l)}this.changeEmitter.fire()}}configure(e,t){this.controllerProfiles.get(e)?.controller.configureRunProfile(t)}removeProfile(e,t){const r=this.controllerProfiles.get(e);if(!r)return;if(!t){this.controllerProfiles.delete(e),this.changeEmitter.fire();return}const o=r.profiles.findIndex(i=>i.profileId===t);o!==-1&&(r.profiles.splice(o,1),this.refreshContextKeys(),this.changeEmitter.fire())}capabilitiesForTest(e){const t=this.controllerProfiles.get(P.root(e.extId));if(!t)return 0;let r=0;for(const o of t.profiles)(!o.tag||e.tags.includes(o.tag))&&(r|=r&o.group?n.HasNonDefaultProfile:o.group);return r}all(){return this.controllerProfiles.values()}getControllerProfiles(e){return this.controllerProfiles.get(e)?.profiles??[]}getGroupDefaultProfiles(e,t){const r=t?this.controllerProfiles.get(t)?.profiles||[]:[...m.flatMap(this.controllerProfiles.values(),i=>i.profiles)],o=r.filter(i=>i.group===e&&i.isDefault);if(o.length===0){const i=r.find(l=>l.group===e);i&&o.push(i)}return o}setGroupDefaultProfiles(e,t){const r={};for(const o of this.controllerProfiles.values()){r[o.controller.id]={};for(const i of o.profiles)i.group===e&&d(r,i,t.some(l=>l.profileId===i.profileId));for(const i of o.profiles){if(i.group===e)continue;const l=o.profiles.find(c=>c.group===e&&c.label===i.label);l&&d(r,i,l.isDefault)}o.profiles.sort(p)}this.userDefaults.store(r),this.changeEmitter.fire()}refreshContextKeys(){let e=0;for(const{profiles:t}of this.controllerProfiles.values())for(const r of t)e|=e&r.group?n.HasNonDefaultProfile:r.group,e|=r.supportsContinuousRun?n.SupportsContinuousRun:0;for(const t of M)this.capabilitiesContexts[t].set((e&t)!==0)}};a=g([u(0,R),u(1,y)],a);const d=(s,e,t)=>{e.isDefault=t,s[e.controllerId]??={},e.isDefault!==e.wasInitiallyDefault?s[e.controllerId][e.profileId]=e.isDefault:delete s[e.controllerId][e.profileId]};export{W as ITestProfileService,a as TestProfileService,j as canUseProfileWithTest,F as capabilityContextKeys};
