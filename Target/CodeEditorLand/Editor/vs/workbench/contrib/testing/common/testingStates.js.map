{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingStates.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapValues } from \"../../../../base/common/objects.js\";\nimport { TestResultState } from \"./testTypes.js\";\n\nexport type TreeStateNode = {\n\tstatusNode: true;\n\tstate: TestResultState;\n\tpriority: number;\n};\n\n/**\n * List of display priorities for different run states. When tests update,\n * the highest-priority state from any of their children will be the state\n * reflected in the parent node.\n */\nexport const statePriority: { [K in TestResultState]: number } = {\n\t[TestResultState.Running]: 6,\n\t[TestResultState.Errored]: 5,\n\t[TestResultState.Failed]: 4,\n\t[TestResultState.Queued]: 3,\n\t[TestResultState.Passed]: 2,\n\t[TestResultState.Unset]: 0,\n\t[TestResultState.Skipped]: 1,\n};\n\nexport const isFailedState = (s: TestResultState) =>\n\ts === TestResultState.Errored || s === TestResultState.Failed;\nexport const isStateWithResult = (s: TestResultState) =>\n\ts === TestResultState.Errored ||\n\ts === TestResultState.Failed ||\n\ts === TestResultState.Passed;\n\nexport const stateNodes: { [K in TestResultState]: TreeStateNode } = mapValues(\n\tstatePriority,\n\t(priority, stateStr): TreeStateNode => {\n\t\tconst state = Number(stateStr) as TestResultState;\n\t\treturn { statusNode: true, state, priority };\n\t},\n);\n\nexport const cmpPriority = (a: TestResultState, b: TestResultState) =>\n\tstatePriority[b] - statePriority[a];\n\nexport const maxPriority = (...states: TestResultState[]) => {\n\tswitch (states.length) {\n\t\tcase 0:\n\t\t\treturn TestResultState.Unset;\n\t\tcase 1:\n\t\t\treturn states[0];\n\t\tcase 2:\n\t\t\treturn statePriority[states[0]] > statePriority[states[1]]\n\t\t\t\t? states[0]\n\t\t\t\t: states[1];\n\t\tdefault: {\n\t\t\tlet max = states[0];\n\t\t\tfor (let i = 1; i < states.length; i++) {\n\t\t\t\tif (statePriority[max] < statePriority[states[i]]) {\n\t\t\t\t\tmax = states[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn max;\n\t\t}\n\t}\n};\n\nexport const statesInOrder = Object.keys(statePriority)\n\t.map((s) => Number(s) as TestResultState)\n\t.sort(cmpPriority);\n\n/**\n * Some states are considered terminal; once these are set for a given test run, they\n * are not reset back to a non-terminal state, or to a terminal state with lower\n * priority.\n */\nexport const terminalStatePriorities: { [key in TestResultState]?: number } = {\n\t[TestResultState.Passed]: 0,\n\t[TestResultState.Skipped]: 1,\n\t[TestResultState.Failed]: 2,\n\t[TestResultState.Errored]: 3,\n};\n\n/**\n * Count of the number of tests in each run state.\n */\nexport type TestStateCount = { [K in TestResultState]: number };\n\nexport const makeEmptyCounts = (): TestStateCount => {\n\t// shh! don't tell anyone this is actually an array!\n\treturn new Uint32Array(statesInOrder.length) as any as {\n\t\t[K in TestResultState]: number;\n\t};\n};\n"],
  "mappings": ";;AAKA,SAAS,iBAAiB;AAC1B,SAAS,uBAAuB;AAazB,MAAM,gBAAoD;AAAA,EAChE,CAAC,gBAAgB,OAAO,GAAG;AAAA,EAC3B,CAAC,gBAAgB,OAAO,GAAG;AAAA,EAC3B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,KAAK,GAAG;AAAA,EACzB,CAAC,gBAAgB,OAAO,GAAG;AAC5B;AAEO,MAAM,gBAAgB,wBAAC,MAC7B,MAAM,gBAAgB,WAAW,MAAM,gBAAgB,QAD3B;AAEtB,MAAM,oBAAoB,wBAAC,MACjC,MAAM,gBAAgB,WACtB,MAAM,gBAAgB,UACtB,MAAM,gBAAgB,QAHU;AAK1B,MAAM,aAAwD;AAAA,EACpE;AAAA,EACA,CAAC,UAAU,aAA4B;AACtC,UAAM,QAAQ,OAAO,QAAQ;AAC7B,WAAO,EAAE,YAAY,MAAM,OAAO,SAAS;AAAA,EAC5C;AACD;AAEO,MAAM,cAAc,wBAAC,GAAoB,MAC/C,cAAc,CAAC,IAAI,cAAc,CAAC,GADR;AAGpB,MAAM,cAAc,2BAAI,WAA8B;AAC5D,UAAQ,OAAO,QAAQ;AAAA,IACtB,KAAK;AACJ,aAAO,gBAAgB;AAAA,IACxB,KAAK;AACJ,aAAO,OAAO,CAAC;AAAA,IAChB,KAAK;AACJ,aAAO,cAAc,OAAO,CAAC,CAAC,IAAI,cAAc,OAAO,CAAC,CAAC,IACtD,OAAO,CAAC,IACR,OAAO,CAAC;AAAA,IACZ,SAAS;AACR,UAAI,MAAM,OAAO,CAAC;AAClB,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,YAAI,cAAc,GAAG,IAAI,cAAc,OAAO,CAAC,CAAC,GAAG;AAClD,gBAAM,OAAO,CAAC;AAAA,QACf;AAAA,MACD;AAEA,aAAO;AAAA,IACR;AAAA,EACD;AACD,GArB2B;AAuBpB,MAAM,gBAAgB,OAAO,KAAK,aAAa,EACpD,IAAI,CAAC,MAAM,OAAO,CAAC,CAAoB,EACvC,KAAK,WAAW;AAOX,MAAM,0BAAiE;AAAA,EAC7E,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,OAAO,GAAG;AAAA,EAC3B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,OAAO,GAAG;AAC5B;AAOO,MAAM,kBAAkB,6BAAsB;AAEpD,SAAO,IAAI,YAAY,cAAc,MAAM;AAG5C,GAL+B;",
  "names": []
}
