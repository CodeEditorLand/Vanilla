{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testCoverageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\ttype ISettableObservable,\n\tobservableValue,\n\ttransaction,\n} from \"../../../../base/common/observable.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tbindContextKey,\n\tobservableConfigValue,\n} from \"../../../../platform/observable/common/platformObservableUtils.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { TestingConfigKeys } from \"./configuration.js\";\nimport { Testing } from \"./constants.js\";\nimport type { TestCoverage } from \"./testCoverage.js\";\nimport type { TestId } from \"./testId.js\";\nimport type { ITestRunTaskResults } from \"./testResult.js\";\nimport { ITestResultService } from \"./testResultService.js\";\nimport { TestingContextKeys } from \"./testingContextKeys.js\";\n\nexport const ITestCoverageService = createDecorator<ITestCoverageService>(\n\t\"testCoverageService\",\n);\n\nexport interface ITestCoverageService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Settable observable that can be used to show the test coverage instance\n\t * currently in the editor.\n\t */\n\treadonly selected: IObservable<TestCoverage | undefined>;\n\n\t/**\n\t * Filter to per-test coverage from the given test ID.\n\t */\n\treadonly filterToTest: ISettableObservable<TestId | undefined>;\n\n\t/**\n\t * Whether inline coverage is shown.\n\t */\n\treadonly showInline: ISettableObservable<boolean>;\n\n\t/**\n\t * Opens a test coverage report from a task, optionally focusing it in the editor.\n\t */\n\topenCoverage(task: ITestRunTaskResults, focus?: boolean): Promise<void>;\n\n\t/**\n\t * Closes any open coverage.\n\t */\n\tcloseCoverage(): void;\n}\n\nexport class TestCoverageService\n\textends Disposable\n\timplements ITestCoverageService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly lastOpenCts = this._register(\n\t\tnew MutableDisposable<CancellationTokenSource>(),\n\t);\n\n\tpublic readonly selected = observableValue<TestCoverage | undefined>(\n\t\t\"testCoverage\",\n\t\tundefined,\n\t);\n\tpublic readonly filterToTest = observableValue<TestId | undefined>(\n\t\t\"filterToTest\",\n\t\tundefined,\n\t);\n\tpublic readonly showInline = observableValue(\"inlineCoverage\", false);\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITestResultService resultService: ITestResultService,\n\t\t@IConfigurationService configService: IConfigurationService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t) {\n\t\tsuper();\n\n\t\tconst toolbarConfig = observableConfigValue(\n\t\t\tTestingConfigKeys.CoverageToolbarEnabled,\n\t\t\ttrue,\n\t\t\tconfigService,\n\t\t);\n\t\tthis._register(\n\t\t\tbindContextKey(\n\t\t\t\tTestingContextKeys.coverageToolbarEnabled,\n\t\t\t\tcontextKeyService,\n\t\t\t\t(reader) => toolbarConfig.read(reader),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tbindContextKey(\n\t\t\t\tTestingContextKeys.inlineCoverageEnabled,\n\t\t\t\tcontextKeyService,\n\t\t\t\t(reader) => this.showInline.read(reader),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tbindContextKey(\n\t\t\t\tTestingContextKeys.isTestCoverageOpen,\n\t\t\t\tcontextKeyService,\n\t\t\t\t(reader) => !!this.selected.read(reader),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tbindContextKey(\n\t\t\t\tTestingContextKeys.hasPerTestCoverage,\n\t\t\t\tcontextKeyService,\n\t\t\t\t(reader) =>\n\t\t\t\t\t!Iterable.isEmpty(\n\t\t\t\t\t\tthis.selected.read(reader)?.allPerTestIDs(),\n\t\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tbindContextKey(\n\t\t\t\tTestingContextKeys.isCoverageFilteredToTest,\n\t\t\t\tcontextKeyService,\n\t\t\t\t(reader) => !!this.filterToTest.read(reader),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tresultService.onResultsChanged((evt) => {\n\t\t\t\tif (\"completed\" in evt) {\n\t\t\t\t\tconst coverage = evt.completed.tasks.find((t) =>\n\t\t\t\t\t\tt.coverage.get(),\n\t\t\t\t\t);\n\t\t\t\t\tif (coverage) {\n\t\t\t\t\t\tthis.openCoverage(coverage, false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.closeCoverage();\n\t\t\t\t\t}\n\t\t\t\t} else if (\"removed\" in evt && this.selected.get()) {\n\t\t\t\t\tconst taskId = this.selected.get()?.fromTaskId;\n\t\t\t\t\tif (\n\t\t\t\t\t\tevt.removed.some((e) =>\n\t\t\t\t\t\t\te.tasks.some((t) => t.id === taskId),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.closeCoverage();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic async openCoverage(task: ITestRunTaskResults, focus = true) {\n\t\tthis.lastOpenCts.value?.cancel();\n\t\tconst cts = (this.lastOpenCts.value = new CancellationTokenSource());\n\t\tconst coverage = task.coverage.get();\n\t\tif (!coverage) {\n\t\t\treturn;\n\t\t}\n\n\t\ttransaction((tx) => {\n\t\t\t// todo: may want to preserve this if coverage for that test in the new run?\n\t\t\tthis.filterToTest.set(undefined, tx);\n\t\t\tthis.selected.set(coverage, tx);\n\t\t});\n\n\t\tif (focus && !cts.token.isCancellationRequested) {\n\t\t\tthis.viewsService.openView(Testing.CoverageViewId, true);\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tpublic closeCoverage() {\n\t\tthis.selected.set(undefined, undefined);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
