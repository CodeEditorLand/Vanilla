import{mapValues as o}from"../../../../../vs/base/common/objects.js";import{TestResultState as e}from"../../../../../vs/workbench/contrib/testing/common/testTypes.js";const r={[e.Running]:6,[e.Errored]:5,[e.Failed]:4,[e.Queued]:3,[e.Passed]:2,[e.Unset]:0,[e.Skipped]:1},p=t=>t===e.Errored||t===e.Failed,S=t=>t===e.Errored||t===e.Failed||t===e.Passed,d=o(r,(t,s)=>({statusNode:!0,state:Number(s),priority:t})),n=(t,s)=>r[s]-r[t],m=(...t)=>{switch(t.length){case 0:return e.Unset;case 1:return t[0];case 2:return r[t[0]]>r[t[1]]?t[0]:t[1];default:{let s=t[0];for(let a=1;a<t.length;a++)r[s]<r[t[a]]&&(s=t[a]);return s}}},u=Object.keys(r).map(t=>Number(t)).sort(n),T={[e.Passed]:0,[e.Skipped]:1,[e.Failed]:2,[e.Errored]:3},c=()=>new Uint32Array(u.length);export{n as cmpPriority,p as isFailedState,S as isStateWithResult,c as makeEmptyCounts,m as maxPriority,d as stateNodes,r as statePriority,u as statesInOrder,T as terminalStatePriorities};
