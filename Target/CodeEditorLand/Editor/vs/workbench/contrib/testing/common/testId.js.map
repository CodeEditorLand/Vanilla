{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testId.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport const enum TestIdPathParts {\n\t/** Delimiter for path parts in test IDs */\n\tDelimiter = '\\0',\n}\n\n/**\n * Enum for describing relative positions of tests. Similar to\n * `node.compareDocumentPosition` in the DOM.\n */\nexport const enum TestPosition {\n\t/** a === b */\n\tIsSame,\n\t/** Neither a nor b are a child of one another. They may share a common parent, though. */\n\tDisconnected,\n\t/** b is a child of a */\n\tIsChild,\n\t/** b is a parent of a */\n\tIsParent,\n}\n\ntype TestItemLike = { id: string; parent?: TestItemLike; _isRoot?: boolean };\n\n/**\n * The test ID is a stringifiable client that\n */\nexport class TestId {\n\tprivate stringifed?: string;\n\n\t/**\n\t * Creates a test ID from an ext host test item.\n\t */\n\tpublic static fromExtHostTestItem(item: TestItemLike, rootId: string, parent = item.parent) {\n\t\tif (item._isRoot) {\n\t\t\treturn new TestId([rootId]);\n\t\t}\n\n\t\tconst path = [item.id];\n\t\tfor (let i = parent; i && i.id !== rootId; i = i.parent) {\n\t\t\tpath.push(i.id);\n\t\t}\n\t\tpath.push(rootId);\n\n\t\treturn new TestId(path.reverse());\n\t}\n\n\t/**\n\t * Cheaply ets whether the ID refers to the root .\n\t */\n\tpublic static isRoot(idString: string) {\n\t\treturn !idString.includes(TestIdPathParts.Delimiter);\n\t}\n\n\t/**\n\t * Cheaply gets whether the ID refers to the root .\n\t */\n\tpublic static root(idString: string) {\n\t\tconst idx = idString.indexOf(TestIdPathParts.Delimiter);\n\t\treturn idx === -1 ? idString : idString.slice(0, idx);\n\t}\n\n\t/**\n\t * Creates a test ID from a serialized TestId instance.\n\t */\n\tpublic static fromString(idString: string) {\n\t\treturn new TestId(idString.split(TestIdPathParts.Delimiter));\n\t}\n\n\t/**\n\t * Gets the ID resulting from adding b to the base ID.\n\t */\n\tpublic static join(base: TestId, b: string) {\n\t\treturn new TestId([...base.path, b]);\n\t}\n\n\t/**\n\t * Gets the string ID resulting from adding b to the base ID.\n\t */\n\tpublic static joinToString(base: string | TestId, b: string) {\n\t\treturn base.toString() + TestIdPathParts.Delimiter + b;\n\t}\n\n\t/**\n\t * Cheaply gets the parent ID of a test identified with the string.\n\t */\n\tpublic static parentId(idString: string) {\n\t\tconst idx = idString.lastIndexOf(TestIdPathParts.Delimiter);\n\t\treturn idx === -1 ? undefined : idString.slice(0, idx);\n\t}\n\n\t/**\n\t * Cheaply gets the local ID of a test identified with the string.\n\t */\n\tpublic static localId(idString: string) {\n\t\tconst idx = idString.lastIndexOf(TestIdPathParts.Delimiter);\n\t\treturn idx === -1 ? idString : idString.slice(idx + TestIdPathParts.Delimiter.length);\n\t}\n\n\t/**\n\t * Gets whether maybeChild is a child of maybeParent.\n\t * todo@connor4312: review usages of this to see if using the WellDefinedPrefixTree is better\n\t */\n\tpublic static isChild(maybeParent: string, maybeChild: string) {\n\t\treturn maybeChild[maybeParent.length] === TestIdPathParts.Delimiter && maybeChild.startsWith(maybeParent);\n\t}\n\n\t/**\n\t * Compares the position of the two ID strings.\n\t * todo@connor4312: review usages of this to see if using the WellDefinedPrefixTree is better\n\t */\n\tpublic static compare(a: string, b: string) {\n\t\tif (a === b) {\n\t\t\treturn TestPosition.IsSame;\n\t\t}\n\n\t\tif (TestId.isChild(a, b)) {\n\t\t\treturn TestPosition.IsChild;\n\t\t}\n\n\t\tif (TestId.isChild(b, a)) {\n\t\t\treturn TestPosition.IsParent;\n\t\t}\n\n\t\treturn TestPosition.Disconnected;\n\t}\n\n\tpublic static getLengthOfCommonPrefix(length: number, getId: (i: number) => TestId): number {\n\t\tif (length === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet commonPrefix = 0;\n\t\twhile (commonPrefix < length - 1) {\n\t\t\tfor (let i = 1; i < length; i++) {\n\t\t\t\tconst a = getId(i - 1);\n\t\t\t\tconst b = getId(i);\n\t\t\t\tif (a.path[commonPrefix] !== b.path[commonPrefix]) {\n\t\t\t\t\treturn commonPrefix;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcommonPrefix++;\n\t\t}\n\n\t\treturn commonPrefix;\n\t}\n\n\tconstructor(\n\t\tpublic readonly path: readonly string[],\n\t\tprivate readonly viewEnd = path.length,\n\t) {\n\t\tif (path.length === 0 || viewEnd < 1) {\n\t\t\tthrow new Error('cannot create test with empty path');\n\t\t}\n\t}\n\n\t/**\n\t * Gets the ID of the parent test.\n\t */\n\tpublic get rootId(): TestId {\n\t\treturn new TestId(this.path, 1);\n\t}\n\n\t/**\n\t * Gets the ID of the parent test.\n\t */\n\tpublic get parentId(): TestId | undefined {\n\t\treturn this.viewEnd > 1 ? new TestId(this.path, this.viewEnd - 1) : undefined;\n\t}\n\n\t/**\n\t * Gets the local ID of the current full test ID.\n\t */\n\tpublic get localId() {\n\t\treturn this.path[this.viewEnd - 1];\n\t}\n\n\t/**\n\t * Gets whether this ID refers to the root.\n\t */\n\tpublic get controllerId() {\n\t\treturn this.path[0];\n\t}\n\n\t/**\n\t * Gets whether this ID refers to the root.\n\t */\n\tpublic get isRoot() {\n\t\treturn this.viewEnd === 1;\n\t}\n\n\t/**\n\t * Returns an iterable that yields IDs of all parent items down to and\n\t * including the current item.\n\t */\n\tpublic *idsFromRoot() {\n\t\tfor (let i = 1; i <= this.viewEnd; i++) {\n\t\t\tyield new TestId(this.path, i);\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterable that yields IDs of the current item up to the root\n\t * item.\n\t */\n\tpublic *idsToRoot() {\n\t\tfor (let i = this.viewEnd; i > 0; i--) {\n\t\t\tyield new TestId(this.path, i);\n\t\t}\n\t}\n\n\t/**\n\t * Compares the other test ID with this one.\n\t */\n\tpublic compare(other: TestId | string) {\n\t\tif (typeof other === 'string') {\n\t\t\treturn TestId.compare(this.toString(), other);\n\t\t}\n\n\t\tfor (let i = 0; i < other.viewEnd && i < this.viewEnd; i++) {\n\t\t\tif (other.path[i] !== this.path[i]) {\n\t\t\t\treturn TestPosition.Disconnected;\n\t\t\t}\n\t\t}\n\n\t\tif (other.viewEnd > this.viewEnd) {\n\t\t\treturn TestPosition.IsChild;\n\t\t}\n\n\t\tif (other.viewEnd < this.viewEnd) {\n\t\t\treturn TestPosition.IsParent;\n\t\t}\n\n\t\treturn TestPosition.IsSame;\n\t}\n\n\t/**\n\t * Serializes the ID.\n\t */\n\tpublic toJSON() {\n\t\treturn this.toString();\n\t}\n\n\t/**\n\t * Serializes the ID to a string.\n\t */\n\tpublic toString() {\n\t\tif (!this.stringifed) {\n\t\t\tthis.stringifed = this.path[0];\n\t\t\tfor (let i = 1; i < this.viewEnd; i++) {\n\t\t\t\tthis.stringifed += TestIdPathParts.Delimiter;\n\t\t\t\tthis.stringifed += this.path[i];\n\t\t\t}\n\t\t}\n\n\t\treturn this.stringifed;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TestIdPathParts", "TestPosition"]
}
