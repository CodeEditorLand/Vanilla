{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingContentProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { removeAnsiEscapeCodes } from \"../../../../base/common/strings.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\ttype ILanguageSelection,\n\tILanguageService,\n} from \"../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport {\n\ttype ITextModelContentProvider,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { ITestResultService } from \"./testResultService.js\";\nimport { TestMessageType } from \"./testTypes.js\";\nimport { TEST_DATA_SCHEME, TestUriType, parseTestUri } from \"./testingUri.js\";\n\n/**\n * A content provider that returns various outputs for tests. This is used\n * in the inline peek view.\n */\nexport class TestingContentProvider\n\timplements IWorkbenchContribution, ITextModelContentProvider\n{\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(\n\t\t\tTEST_DATA_SCHEME,\n\t\t\tthis,\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this.modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst parsed = parseTestUri(resource);\n\t\tif (!parsed) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result = this.resultService.getResult(parsed.resultId);\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (parsed.type === TestUriType.TaskOutput) {\n\t\t\tconst task = result.tasks[parsed.taskIndex];\n\t\t\tconst model = this.modelService.createModel(\n\t\t\t\t\"\",\n\t\t\t\tnull,\n\t\t\t\tresource,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tconst append = (text: string) =>\n\t\t\t\tmodel.applyEdits([\n\t\t\t\t\t{\n\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\t\tendColumn: 1,\n\t\t\t\t\t\t\tstartLineNumber: Number.POSITIVE_INFINITY,\n\t\t\t\t\t\t\tendLineNumber: Number.POSITIVE_INFINITY,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttext,\n\t\t\t\t\t},\n\t\t\t\t]);\n\n\t\t\tconst init = VSBuffer.concat(\n\t\t\t\ttask.output.buffers,\n\t\t\t\ttask.output.length,\n\t\t\t).toString();\n\t\t\tappend(removeAnsiEscapeCodes(init));\n\n\t\t\tlet hadContent = init.length > 0;\n\t\t\tconst dispose = new DisposableStore();\n\t\t\tdispose.add(\n\t\t\t\ttask.output.onDidWriteData((d) => {\n\t\t\t\t\thadContent ||= d.byteLength > 0;\n\t\t\t\t\tappend(removeAnsiEscapeCodes(d.toString()));\n\t\t\t\t}),\n\t\t\t);\n\t\t\ttask.output.endPromise.then(() => {\n\t\t\t\tif (dispose.isDisposed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!hadContent) {\n\t\t\t\t\tappend(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"runNoOutout\",\n\t\t\t\t\t\t\t\"The test run did not record any output.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tdispose.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tmodel.onWillDispose(() => dispose.dispose());\n\n\t\t\treturn model;\n\t\t}\n\n\t\tconst test = result?.getStateById(parsed.testExtId);\n\t\tif (!test) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet text: string | undefined;\n\t\tlet language: ILanguageSelection | null = null;\n\t\tswitch (parsed.type) {\n\t\t\tcase TestUriType.ResultActualOutput: {\n\t\t\t\tconst message =\n\t\t\t\t\ttest.tasks[parsed.taskIndex].messages[parsed.messageIndex];\n\t\t\t\tif (message?.type === TestMessageType.Error) {\n\t\t\t\t\ttext = message.actual;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TestUriType.TestOutput: {\n\t\t\t\ttext = \"\";\n\t\t\t\tconst output = result.tasks[parsed.taskIndex].output;\n\t\t\t\tfor (const message of test.tasks[parsed.taskIndex].messages) {\n\t\t\t\t\tif (message.type === TestMessageType.Output) {\n\t\t\t\t\t\ttext += removeAnsiEscapeCodes(\n\t\t\t\t\t\t\toutput\n\t\t\t\t\t\t\t\t.getRange(message.offset, message.length)\n\t\t\t\t\t\t\t\t.toString(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TestUriType.ResultExpectedOutput: {\n\t\t\t\tconst message =\n\t\t\t\t\ttest.tasks[parsed.taskIndex].messages[parsed.messageIndex];\n\t\t\t\tif (message?.type === TestMessageType.Error) {\n\t\t\t\t\ttext = message.expected;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TestUriType.ResultMessage: {\n\t\t\t\tconst message =\n\t\t\t\t\ttest.tasks[parsed.taskIndex].messages[parsed.messageIndex];\n\t\t\t\tif (!message) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (message.type === TestMessageType.Output) {\n\t\t\t\t\tconst content = result.tasks[\n\t\t\t\t\t\tparsed.taskIndex\n\t\t\t\t\t].output.getRange(message.offset, message.length);\n\t\t\t\t\ttext = removeAnsiEscapeCodes(content.toString());\n\t\t\t\t} else if (typeof message.message === \"string\") {\n\t\t\t\t\ttext = removeAnsiEscapeCodes(message.message);\n\t\t\t\t} else {\n\t\t\t\t\ttext = message.message.value;\n\t\t\t\t\tlanguage = this.languageService.createById(\"markdown\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (text === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.modelService.createModel(text, language, resource, false);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["text"]
}
