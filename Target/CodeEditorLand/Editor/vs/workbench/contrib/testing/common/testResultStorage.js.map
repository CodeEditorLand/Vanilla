{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testResultStorage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { bufferToStream, newWriteableBufferStream, VSBuffer, VSBufferReadableStream, VSBufferWriteableStream } from '../../../../base/common/buffer.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { StoredValue } from './storedValue.js';\nimport { HydratedTestResult, ITestResult } from './testResult.js';\nimport { ISerializedTestResults } from './testTypes.js';\n\nexport const RETAIN_MAX_RESULTS = 128;\nconst RETAIN_MIN_RESULTS = 16;\nconst RETAIN_MAX_BYTES = 1024 * 128;\nconst CLEANUP_PROBABILITY = 0.2;\n\nexport interface ITestResultStorage {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Retrieves the list of stored test results.\n\t */\n\tread(): Promise<HydratedTestResult[]>;\n\n\t/**\n\t * Persists the list of test results.\n\t */\n\tpersist(results: ReadonlyArray<ITestResult>): Promise<void>;\n}\n\nexport const ITestResultStorage = createDecorator('ITestResultStorage');\n\n/**\n * Data revision this version of VS Code deals with. Should be bumped whenever\n * a breaking change is made to the stored results, which will cause previous\n * revisions to be discarded.\n */\nconst currentRevision = 1;\n\nexport abstract class BaseTestResultStorage extends Disposable implements ITestResultStorage {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly stored = this._register(new StoredValue<ReadonlyArray<{ rev: number; id: string; bytes: number }>>({\n\t\tkey: 'storedTestResults',\n\t\tscope: StorageScope.WORKSPACE,\n\t\ttarget: StorageTarget.MACHINE\n\t}, this.storageService));\n\n\tconstructor(\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async read(): Promise<HydratedTestResult[]> {\n\t\tconst results = await Promise.all(this.stored.get([]).map(async ({ id, rev }) => {\n\t\t\tif (rev !== currentRevision) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst contents = await this.readForResultId(id);\n\t\t\t\tif (!contents) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn new HydratedTestResult(this.uriIdentityService, contents);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.warn(`Error deserializing stored test result ${id}`, e);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\treturn results.filter(isDefined);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic getResultOutputWriter(resultId: string) {\n\t\tconst stream = newWriteableBufferStream();\n\t\tthis.storeOutputForResultId(resultId, stream);\n\t\treturn stream;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async persist(results: ReadonlyArray<ITestResult>): Promise<void> {\n\t\tconst toDelete = new Map(this.stored.get([]).map(({ id, bytes }) => [id, bytes]));\n\t\tconst toStore: { rev: number; id: string; bytes: number }[] = [];\n\t\tconst todo: Promise<unknown>[] = [];\n\t\tlet budget = RETAIN_MAX_BYTES;\n\n\t\t// Run until either:\n\t\t// 1. We store all results\n\t\t// 2. We store the max results\n\t\t// 3. We store the min results, and have no more byte budget\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < results.length && i < RETAIN_MAX_RESULTS && (budget > 0 || toStore.length < RETAIN_MIN_RESULTS);\n\t\t\ti++\n\t\t) {\n\t\t\tconst result = results[i];\n\t\t\tconst existingBytes = toDelete.get(result.id);\n\t\t\tif (existingBytes !== undefined) {\n\t\t\t\ttoDelete.delete(result.id);\n\t\t\t\ttoStore.push({ id: result.id, rev: currentRevision, bytes: existingBytes });\n\t\t\t\tbudget -= existingBytes;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst obj = result.toJSON();\n\t\t\tif (!obj) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst contents = VSBuffer.fromString(JSON.stringify(obj));\n\t\t\ttodo.push(this.storeForResultId(result.id, obj));\n\t\t\ttoStore.push({ id: result.id, rev: currentRevision, bytes: contents.byteLength });\n\t\t\tbudget -= contents.byteLength;\n\t\t}\n\n\t\tfor (const id of toDelete.keys()) {\n\t\t\ttodo.push(this.deleteForResultId(id).catch(() => undefined));\n\t\t}\n\n\t\tthis.stored.store(toStore);\n\t\tawait Promise.all(todo);\n\t}\n\n\t/**\n\t * Reads serialized results for the test. Is allowed to throw.\n\t */\n\tprotected abstract readForResultId(id: string): Promise<ISerializedTestResults | undefined>;\n\n\t/**\n\t * Reads output as a stream for the test.\n\t */\n\tprotected abstract readOutputForResultId(id: string): Promise<VSBufferReadableStream>;\n\n\t/**\n\t * Reads an output range for the test.\n\t */\n\tprotected abstract readOutputRangeForResultId(id: string, offset: number, length: number): Promise<VSBuffer>;\n\n\t/**\n\t * Deletes serialized results for the test.\n\t */\n\tprotected abstract deleteForResultId(id: string): Promise<unknown>;\n\n\t/**\n\t * Stores test results by ID.\n\t */\n\tprotected abstract storeForResultId(id: string, data: ISerializedTestResults): Promise<unknown>;\n\n\t/**\n\t * Reads serialized results for the test. Is allowed to throw.\n\t */\n\tprotected abstract storeOutputForResultId(id: string, input: VSBufferWriteableStream): Promise<void>;\n}\n\nexport class InMemoryResultStorage extends BaseTestResultStorage {\n\tpublic readonly cache = new Map<string, ISerializedTestResults>();\n\n\tprotected async readForResultId(id: string) {\n\t\treturn Promise.resolve(this.cache.get(id));\n\t}\n\n\tprotected storeForResultId(id: string, contents: ISerializedTestResults) {\n\t\tthis.cache.set(id, contents);\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected deleteForResultId(id: string) {\n\t\tthis.cache.delete(id);\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected readOutputForResultId(id: string): Promise<VSBufferReadableStream> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected storeOutputForResultId(id: string, input: VSBufferWriteableStream): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected readOutputRangeForResultId(id: string, offset: number, length: number): Promise<VSBuffer> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nexport class TestResultStorage extends BaseTestResultStorage {\n\tprivate readonly directory: URI;\n\n\tconstructor(\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkspaceContextService workspaceContext: IWorkspaceContextService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t) {\n\t\tsuper(uriIdentityService, storageService, logService);\n\t\tthis.directory = URI.joinPath(environmentService.workspaceStorageHome, workspaceContext.getWorkspace().id, 'testResults');\n\t}\n\n\tprotected async readForResultId(id: string) {\n\t\tconst contents = await this.fileService.readFile(this.getResultJsonPath(id));\n\t\treturn JSON.parse(contents.value.toString());\n\t}\n\n\tprotected storeForResultId(id: string, contents: ISerializedTestResults) {\n\t\treturn this.fileService.writeFile(this.getResultJsonPath(id), VSBuffer.fromString(JSON.stringify(contents)));\n\t}\n\n\tprotected deleteForResultId(id: string) {\n\t\treturn this.fileService.del(this.getResultJsonPath(id)).catch(() => undefined);\n\t}\n\n\tprotected async readOutputRangeForResultId(id: string, offset: number, length: number): Promise<VSBuffer> {\n\t\ttry {\n\t\t\tconst { value } = await this.fileService.readFile(this.getResultOutputPath(id), { position: offset, length });\n\t\t\treturn value;\n\t\t} catch {\n\t\t\treturn VSBuffer.alloc(0);\n\t\t}\n\t}\n\n\n\tprotected async readOutputForResultId(id: string): Promise<VSBufferReadableStream> {\n\t\ttry {\n\t\t\tconst { value } = await this.fileService.readFileStream(this.getResultOutputPath(id));\n\t\t\treturn value;\n\t\t} catch {\n\t\t\treturn bufferToStream(VSBuffer.alloc(0));\n\t\t}\n\t}\n\n\tprotected async storeOutputForResultId(id: string, input: VSBufferWriteableStream) {\n\t\tawait this.fileService.createFile(this.getResultOutputPath(id), input);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic override async persist(results: ReadonlyArray<ITestResult>) {\n\t\tawait super.persist(results);\n\t\tif (Math.random() < CLEANUP_PROBABILITY) {\n\t\t\tawait this.cleanupDereferenced();\n\t\t}\n\t}\n\n\t/**\n\t * Cleans up orphaned files. For instance, output can get orphaned if it's\n\t * written but the editor is closed before the test run is complete.\n\t */\n\tprivate async cleanupDereferenced() {\n\t\tconst { children } = await this.fileService.resolve(this.directory);\n\t\tif (!children) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stored = new Set(this.stored.get([]).filter(s => s.rev === currentRevision).map(s => s.id));\n\n\t\tawait Promise.all(\n\t\t\tchildren\n\t\t\t\t.filter(child => !stored.has(child.name.replace(/\\.[a-z]+$/, '')))\n\t\t\t\t.map(child => this.fileService.del(child.resource).catch(() => undefined))\n\t\t);\n\t}\n\n\tprivate getResultJsonPath(id: string) {\n\t\treturn URI.joinPath(this.directory, `${id}.json`);\n\t}\n\n\tprivate getResultOutputPath(id: string) {\n\t\treturn URI.joinPath(this.directory, `${id}.output`);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
