import{Emitter as n,Event as s}from"../../../../base/common/event.js";import{Disposable as o}from"../../../../base/common/lifecycle.js";const v=a=>({onDidChange:s.None,value:a});class r extends o{constructor(e){super();this._value=e}changeEmitter=this._register(new n);onDidChange=this.changeEmitter.event;get value(){return this._value}set value(e){e!==this._value&&(this._value=e,this.changeEmitter.fire(e))}static stored(e,i){const t=new r(e.get(i));return t._register(e),t._register(t.onDidChange(l=>e.store(l))),t}}export{r as MutableObservableValue,v as staticObservableValue};
