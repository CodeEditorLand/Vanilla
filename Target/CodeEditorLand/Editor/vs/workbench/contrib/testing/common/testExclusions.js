var u=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var n=(l,i,e,t)=>{for(var r=t>1?void 0:t?c(i,e):i,d=l.length-1,o;d>=0;d--)(o=l[d])&&(r=(t?o(i,e,r):o(r))||r);return t&&r&&u(i,e,r),r},s=(l,i)=>(e,t)=>i(e,t,l);import{Iterable as m}from"../../../../base/common/iterator.js";import{Disposable as p}from"../../../../base/common/lifecycle.js";import{IStorageService as v,StorageScope as h,StorageTarget as S}from"../../../../platform/storage/common/storage.js";import{MutableObservableValue as g}from"./observableValue.js";import{StoredValue as x}from"./storedValue.js";let a=class extends p{constructor(e){super();this.storageService=e}excluded=this._register(g.stored(new x({key:"excludedTestItems",scope:h.WORKSPACE,target:S.MACHINE,serialization:{deserialize:e=>new Set(JSON.parse(e)),serialize:e=>JSON.stringify([...e])}},this.storageService),new Set));onTestExclusionsChanged=this.excluded.onDidChange;get hasAny(){return this.excluded.value.size>0}get all(){return this.excluded.value}toggle(e,t){t!==!0&&this.excluded.value.has(e.item.extId)?this.excluded.value=new Set(m.filter(this.excluded.value,r=>r!==e.item.extId)):t!==!1&&!this.excluded.value.has(e.item.extId)&&(this.excluded.value=new Set([...this.excluded.value,e.item.extId]))}contains(e){return this.excluded.value.has(e.item.extId)}clear(){this.excluded.value=new Set}};a=n([s(0,v)],a);export{a as TestExclusions};
