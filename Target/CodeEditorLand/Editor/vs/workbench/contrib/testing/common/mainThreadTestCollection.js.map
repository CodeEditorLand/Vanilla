{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/mainThreadTestCollection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IMainThreadTestCollection } from './testService.js';\nimport { AbstractIncrementalTestCollection, ITestUriCanonicalizer, IncrementalChangeCollector, IncrementalTestCollectionItem, InternalTestItem, TestDiffOpType, TestsDiff } from './testTypes.js';\n\nexport class MainThreadTestCollection extends AbstractIncrementalTestCollection<IncrementalTestCollectionItem> implements IMainThreadTestCollection {\n\tprivate testsByUrl = new ResourceMap<Set<IncrementalTestCollectionItem>>();\n\n\tprivate busyProvidersChangeEmitter = new Emitter<number>();\n\tprivate expandPromises = new WeakMap<IncrementalTestCollectionItem, {\n\t\tpendingLvl: number;\n\t\tdoneLvl: number;\n\t\tprom: Promise<void>;\n\t}>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get busyProviders() {\n\t\treturn this.busyControllerCount;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get rootItems() {\n\t\treturn this.roots;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get all() {\n\t\treturn this.getIterator();\n\t}\n\n\tpublic get rootIds() {\n\t\treturn Iterable.map(this.roots.values(), r => r.item.extId);\n\t}\n\n\tpublic readonly onBusyProvidersChange = this.busyProvidersChangeEmitter.event;\n\n\tconstructor(uriIdentityService: ITestUriCanonicalizer, private readonly expandActual: (id: string, levels: number) => Promise<void>) {\n\t\tsuper(uriIdentityService);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expand(testId: string, levels: number): Promise<void> {\n\t\tconst test = this.items.get(testId);\n\t\tif (!test) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// simple cache to avoid duplicate/unnecessary expansion calls\n\t\tconst existing = this.expandPromises.get(test);\n\t\tif (existing && existing.pendingLvl >= levels) {\n\t\t\treturn existing.prom;\n\t\t}\n\n\t\tconst prom = this.expandActual(test.item.extId, levels);\n\t\tconst record = { doneLvl: existing ? existing.doneLvl : -1, pendingLvl: levels, prom };\n\t\tthis.expandPromises.set(test, record);\n\n\t\treturn prom.then(() => {\n\t\t\trecord.doneLvl = levels;\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getNodeById(id: string) {\n\t\treturn this.items.get(id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getNodeByUrl(uri: URI): Iterable<IncrementalTestCollectionItem> {\n\t\treturn this.testsByUrl.get(uri) || Iterable.empty();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getReviverDiff() {\n\t\tconst ops: TestsDiff = [{ op: TestDiffOpType.IncrementPendingExtHosts, amount: this.pendingRootCount }];\n\n\t\tconst queue = [this.rootIds];\n\t\twhile (queue.length) {\n\t\t\tfor (const child of queue.pop()!) {\n\t\t\t\tconst item = this.items.get(child)!;\n\t\t\t\tops.push({\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: {\n\t\t\t\t\t\tcontrollerId: item.controllerId,\n\t\t\t\t\t\texpand: item.expand,\n\t\t\t\t\t\titem: item.item,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tqueue.push(item.children);\n\t\t\t}\n\t\t}\n\n\t\treturn ops;\n\t}\n\n\t/**\n\t * Applies the diff to the collection.\n\t */\n\tpublic override apply(diff: TestsDiff) {\n\t\tconst prevBusy = this.busyControllerCount;\n\t\tsuper.apply(diff);\n\n\t\tif (prevBusy !== this.busyControllerCount) {\n\t\t\tthis.busyProvidersChangeEmitter.fire(this.busyControllerCount);\n\t\t}\n\t}\n\n\t/**\n\t * Clears everything from the collection, and returns a diff that applies\n\t * that action.\n\t */\n\tpublic clear() {\n\t\tconst ops: TestsDiff = [];\n\t\tfor (const root of this.roots) {\n\t\t\tops.push({ op: TestDiffOpType.Remove, itemId: root.item.extId });\n\t\t}\n\n\t\tthis.roots.clear();\n\t\tthis.items.clear();\n\n\t\treturn ops;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected createItem(internal: InternalTestItem): IncrementalTestCollectionItem {\n\t\treturn { ...internal, children: new Set() };\n\t}\n\n\tprivate readonly changeCollector: IncrementalChangeCollector<IncrementalTestCollectionItem> = {\n\t\tadd: node => {\n\t\t\tif (!node.item.uri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst s = this.testsByUrl.get(node.item.uri);\n\t\t\tif (!s) {\n\t\t\t\tthis.testsByUrl.set(node.item.uri, new Set([node]));\n\t\t\t} else {\n\t\t\t\ts.add(node);\n\t\t\t}\n\t\t},\n\t\tremove: node => {\n\t\t\tif (!node.item.uri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst s = this.testsByUrl.get(node.item.uri);\n\t\t\tif (!s) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ts.delete(node);\n\t\t\tif (s.size === 0) {\n\t\t\t\tthis.testsByUrl.delete(node.item.uri);\n\t\t\t}\n\t\t},\n\t};\n\n\tprotected override createChangeCollector(): IncrementalChangeCollector<IncrementalTestCollectionItem> {\n\t\treturn this.changeCollector;\n\t}\n\n\tprivate *getIterator() {\n\t\tconst queue = [this.rootIds];\n\t\twhile (queue.length) {\n\t\t\tfor (const id of queue.pop()!) {\n\t\t\t\tconst node = this.getNodeById(id)!;\n\t\t\t\tyield node;\n\t\t\t\tqueue.push(node.children);\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
