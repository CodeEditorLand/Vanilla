{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from \"../../../../base/common/arrays.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { observableValue } from \"../../../../base/common/observable.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { Position } from \"../../../../editor/common/core/position.js\";\nimport type { Location } from \"../../../../editor/common/languages.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n\ttype RawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { bindContextKey } from \"../../../../platform/observable/common/platformObservableUtils.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceTrustRequestService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { TestingConfigKeys, getTestingConfiguration } from \"./configuration.js\";\nimport { MainThreadTestCollection } from \"./mainThreadTestCollection.js\";\nimport { MutableObservableValue } from \"./observableValue.js\";\nimport { StoredValue } from \"./storedValue.js\";\nimport { TestExclusions } from \"./testExclusions.js\";\nimport { TestId } from \"./testId.js\";\nimport {\n\tITestProfileService,\n\tcanUseProfileWithTest,\n} from \"./testProfileService.js\";\nimport type { ITestResult } from \"./testResult.js\";\nimport { ITestResultService } from \"./testResultService.js\";\nimport type {\n\tAmbiguousRunTestsRequest,\n\tIMainThreadTestController,\n\tIMainThreadTestHostProxy,\n\tITestFollowups,\n\tITestService,\n} from \"./testService.js\";\nimport {\n\ttype ITestRunProfile,\n\ttype InternalTestItem,\n\ttype ResolvedTestRunRequest,\n\tTestControllerCapability,\n\tTestDiffOpType,\n\ttype TestMessageFollowupRequest,\n\ttype TestsDiff,\n} from \"./testTypes.js\";\nimport { TestingContextKeys } from \"./testingContextKeys.js\";\n\nexport class TestService extends Disposable implements ITestService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate testControllers = observableValue<\n\t\tReadonlyMap<string, IMainThreadTestController>\n\t>(\"testControllers\", new Map<string, IMainThreadTestController>());\n\tprivate testExtHosts = new Set<IMainThreadTestHostProxy>();\n\n\tprivate readonly cancelExtensionTestRunEmitter = new Emitter<{\n\t\trunId: string | undefined;\n\t\ttaskId: string | undefined;\n\t}>();\n\tprivate readonly willProcessDiffEmitter = new Emitter<TestsDiff>();\n\tprivate readonly didProcessDiffEmitter = new Emitter<TestsDiff>();\n\tprivate readonly testRefreshCancellations =\n\t\tnew Set<CancellationTokenSource>();\n\tprivate readonly isRefreshingTests: IContextKey<boolean>;\n\tprivate readonly activeEditorHasTests: IContextKey<boolean>;\n\n\t/**\n\t * Cancellation for runs requested by the user being managed by the UI.\n\t * Test runs initiated by extensions are not included here.\n\t */\n\tprivate readonly uiRunningTests = new Map<\n\t\tstring /* run ID */,\n\t\tCancellationTokenSource\n\t>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onWillProcessDiff = this.willProcessDiffEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onDidProcessDiff = this.didProcessDiffEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onDidCancelTestRun =\n\t\tthis.cancelExtensionTestRunEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly collection = new MainThreadTestCollection(\n\t\tthis.uriIdentityService,\n\t\tthis.expandTest.bind(this),\n\t);\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly excluded: TestExclusions;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly showInlineOutput = this._register(\n\t\tMutableObservableValue.stored(\n\t\t\tnew StoredValue<boolean>(\n\t\t\t\t{\n\t\t\t\t\tkey: \"inlineTestOutputVisible\",\n\t\t\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\t\t\ttarget: StorageTarget.USER,\n\t\t\t\t},\n\t\t\t\tthis.storage,\n\t\t\t),\n\t\t\ttrue,\n\t\t),\n\t);\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@IStorageService private readonly storage: IStorageService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITestProfileService private readonly testProfiles: ITestProfileService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@IWorkspaceTrustRequestService\n\t\tprivate readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t) {\n\t\tsuper();\n\t\tthis.excluded = instantiationService.createInstance(TestExclusions);\n\t\tthis.isRefreshingTests =\n\t\t\tTestingContextKeys.isRefreshingTests.bindTo(contextKeyService);\n\t\tthis.activeEditorHasTests =\n\t\t\tTestingContextKeys.activeEditorHasTests.bindTo(contextKeyService);\n\n\t\tthis._register(\n\t\t\tbindContextKey(\n\t\t\t\tTestingContextKeys.providerCount,\n\t\t\t\tcontextKeyService,\n\t\t\t\t(reader) => this.testControllers.read(reader).size,\n\t\t\t),\n\t\t);\n\n\t\tconst bindCapability = (\n\t\t\tkey: RawContextKey<boolean>,\n\t\t\tcapability: TestControllerCapability,\n\t\t) =>\n\t\t\tthis._register(\n\t\t\t\tbindContextKey(key, contextKeyService, (reader) =>\n\t\t\t\t\tIterable.some(\n\t\t\t\t\t\tthis.testControllers.read(reader).values(),\n\t\t\t\t\t\t(ctrl) =>\n\t\t\t\t\t\t\t!!(ctrl.capabilities.read(reader) & capability),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\tbindCapability(\n\t\t\tTestingContextKeys.canRefreshTests,\n\t\t\tTestControllerCapability.Refresh,\n\t\t);\n\t\tbindCapability(\n\t\t\tTestingContextKeys.canGoToRelatedCode,\n\t\t\tTestControllerCapability.CodeRelatedToTest,\n\t\t);\n\t\tbindCapability(\n\t\t\tTestingContextKeys.canGoToRelatedTest,\n\t\t\tTestControllerCapability.TestRelatedToCode,\n\t\t);\n\n\t\tthis._register(\n\t\t\teditorService.onDidActiveEditorChange(() =>\n\t\t\t\tthis.updateEditorContextKeys(),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async expandTest(id: string, levels: number) {\n\t\tawait this.testControllers\n\t\t\t.get()\n\t\t\t.get(TestId.fromString(id).controllerId)\n\t\t\t?.expandTest(id, levels);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic cancelTestRun(runId?: string, taskId?: string) {\n\t\tthis.cancelExtensionTestRunEmitter.fire({ runId, taskId });\n\n\t\tif (runId === undefined) {\n\t\t\tfor (const runCts of this.uiRunningTests.values()) {\n\t\t\t\trunCts.cancel();\n\t\t\t}\n\t\t} else if (!taskId) {\n\t\t\tthis.uiRunningTests.get(runId)?.cancel();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async runTests(\n\t\treq: AmbiguousRunTestsRequest,\n\t\ttoken = CancellationToken.None,\n\t): Promise<ITestResult> {\n\t\t// We try to ensure that all tests in the request will be run, preferring\n\t\t// to use default profiles for each controller when possible.\n\t\tconst byProfile: {\n\t\t\tprofile: ITestRunProfile;\n\t\t\ttests: InternalTestItem[];\n\t\t}[] = [];\n\t\tfor (const test of req.tests) {\n\t\t\tconst existing = byProfile.find((p) =>\n\t\t\t\tcanUseProfileWithTest(p.profile, test),\n\t\t\t);\n\t\t\tif (existing) {\n\t\t\t\texisting.tests.push(test);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst allProfiles = this.testProfiles\n\t\t\t\t.getControllerProfiles(test.controllerId)\n\t\t\t\t.filter(\n\t\t\t\t\t(p) =>\n\t\t\t\t\t\t(p.group & req.group) !== 0 &&\n\t\t\t\t\t\tcanUseProfileWithTest(p, test),\n\t\t\t\t);\n\t\t\tconst bestProfile =\n\t\t\t\tallProfiles.find((p) => p.isDefault) || allProfiles[0];\n\t\t\tif (!bestProfile) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbyProfile.push({ profile: bestProfile, tests: [test] });\n\t\t}\n\n\t\tconst resolved: ResolvedTestRunRequest = {\n\t\t\ttargets: byProfile.map(({ profile, tests }) => ({\n\t\t\t\tprofileId: profile.profileId,\n\t\t\t\tcontrollerId: tests[0].controllerId,\n\t\t\t\ttestIds: tests.map((t) => t.item.extId),\n\t\t\t})),\n\t\t\tgroup: req.group,\n\t\t\texclude: req.exclude?.map((t) => t.item.extId),\n\t\t\tcontinuous: req.continuous,\n\t\t};\n\n\t\t// If no tests are covered by the defaults, just use whatever the defaults\n\t\t// for their controller are. This can happen if the user chose specific\n\t\t// profiles for the run button, but then asked to run a single test from the\n\t\t// explorer or decoration. We shouldn't no-op.\n\t\tif (resolved.targets.length === 0) {\n\t\t\tfor (const byController of groupBy(req.tests, (a, b) =>\n\t\t\t\ta.controllerId === b.controllerId ? 0 : 1,\n\t\t\t)) {\n\t\t\t\tconst profiles = this.testProfiles.getControllerProfiles(\n\t\t\t\t\tbyController[0].controllerId,\n\t\t\t\t);\n\t\t\t\tconst withControllers = byController.map((test) => ({\n\t\t\t\t\tprofile: profiles.find(\n\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\tp.group === req.group &&\n\t\t\t\t\t\t\tcanUseProfileWithTest(p, test),\n\t\t\t\t\t),\n\t\t\t\t\ttest,\n\t\t\t\t}));\n\n\t\t\t\tfor (const byProfile of groupBy(withControllers, (a, b) =>\n\t\t\t\t\ta.profile === b.profile ? 0 : 1,\n\t\t\t\t)) {\n\t\t\t\t\tconst profile = byProfile[0].profile;\n\t\t\t\t\tif (profile) {\n\t\t\t\t\t\tresolved.targets.push({\n\t\t\t\t\t\t\ttestIds: byProfile.map((t) => t.test.item.extId),\n\t\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.runResolvedTests(resolved, token);\n\t}\n\n\t/** @inheritdoc */\n\tpublic async startContinuousRun(\n\t\treq: ResolvedTestRunRequest,\n\t\ttoken: CancellationToken,\n\t) {\n\t\tif (!req.exclude) {\n\t\t\treq.exclude = [...this.excluded.all];\n\t\t}\n\n\t\tconst trust =\n\t\t\tawait this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"testTrust\",\n\t\t\t\t\t\"Running tests may execute code in your workspace.\",\n\t\t\t\t),\n\t\t\t});\n\n\t\tif (!trust) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst byController = groupBy(req.targets, (a, b) =>\n\t\t\ta.controllerId.localeCompare(b.controllerId),\n\t\t);\n\t\tconst requests = byController.map((group) =>\n\t\t\tthis.getTestController(group[0].controllerId)\n\t\t\t\t?.startContinuousRun(\n\t\t\t\t\tgroup.map((controlReq) => ({\n\t\t\t\t\t\texcludeExtIds: req.exclude!.filter(\n\t\t\t\t\t\t\t(t) => !controlReq.testIds.includes(t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tprofileId: controlReq.profileId,\n\t\t\t\t\t\tcontrollerId: controlReq.controllerId,\n\t\t\t\t\t\ttestIds: controlReq.testIds,\n\t\t\t\t\t})),\n\t\t\t\t\ttoken,\n\t\t\t\t)\n\t\t\t\t.then((result) => {\n\t\t\t\t\tconst errs = result.map((r) => r.error).filter(isDefined);\n\t\t\t\t\tif (errs.length) {\n\t\t\t\t\t\tthis.notificationService.error(\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"testError\",\n\t\t\t\t\t\t\t\t\"An error occurred attempting to run tests: {0}\",\n\t\t\t\t\t\t\t\terrs.join(\" \"),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t);\n\n\t\tawait Promise.all(requests);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async runResolvedTests(\n\t\treq: ResolvedTestRunRequest,\n\t\ttoken = CancellationToken.None,\n\t) {\n\t\tif (!req.exclude) {\n\t\t\treq.exclude = [...this.excluded.all];\n\t\t}\n\n\t\tconst result = this.testResults.createLiveResult(req);\n\t\tconst trust =\n\t\t\tawait this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"testTrust\",\n\t\t\t\t\t\"Running tests may execute code in your workspace.\",\n\t\t\t\t),\n\t\t\t});\n\n\t\tif (!trust) {\n\t\t\tresult.markComplete();\n\t\t\treturn result;\n\t\t}\n\n\t\ttry {\n\t\t\tconst cancelSource = new CancellationTokenSource(token);\n\t\t\tthis.uiRunningTests.set(result.id, cancelSource);\n\n\t\t\tconst byController = groupBy(req.targets, (a, b) =>\n\t\t\t\ta.controllerId.localeCompare(b.controllerId),\n\t\t\t);\n\t\t\tconst requests = byController.map((group) =>\n\t\t\t\tthis.getTestController(group[0].controllerId)\n\t\t\t\t\t?.runTests(\n\t\t\t\t\t\tgroup.map((controlReq) => ({\n\t\t\t\t\t\t\trunId: result.id,\n\t\t\t\t\t\t\texcludeExtIds: req.exclude!.filter(\n\t\t\t\t\t\t\t\t(t) => !controlReq.testIds.includes(t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tprofileId: controlReq.profileId,\n\t\t\t\t\t\t\tcontrollerId: controlReq.controllerId,\n\t\t\t\t\t\t\ttestIds: controlReq.testIds,\n\t\t\t\t\t\t})),\n\t\t\t\t\t\tcancelSource.token,\n\t\t\t\t\t)\n\t\t\t\t\t.then((result) => {\n\t\t\t\t\t\tconst errs = result\n\t\t\t\t\t\t\t.map((r) => r.error)\n\t\t\t\t\t\t\t.filter(isDefined);\n\t\t\t\t\t\tif (errs.length) {\n\t\t\t\t\t\t\tthis.notificationService.error(\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"testError\",\n\t\t\t\t\t\t\t\t\t\"An error occurred attempting to run tests: {0}\",\n\t\t\t\t\t\t\t\t\terrs.join(\" \"),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t);\n\t\t\tawait this.saveAllBeforeTest(req);\n\t\t\tawait Promise.all(requests);\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis.uiRunningTests.delete(result.id);\n\t\t\tresult.markComplete();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async provideTestFollowups(\n\t\treq: TestMessageFollowupRequest,\n\t\ttoken: CancellationToken,\n\t): Promise<ITestFollowups> {\n\t\tconst reqs = await Promise.all(\n\t\t\t[...this.testExtHosts].map(async (ctrl) => ({\n\t\t\t\tctrl,\n\t\t\t\tfollowups: await ctrl.provideTestFollowups(req, token),\n\t\t\t})),\n\t\t);\n\n\t\tconst followups: ITestFollowups = {\n\t\t\tfollowups: reqs.flatMap(({ ctrl, followups }) =>\n\t\t\t\tfollowups.map((f) => ({\n\t\t\t\t\tmessage: f.title,\n\t\t\t\t\texecute: () => ctrl.executeTestFollowup(f.id),\n\t\t\t\t})),\n\t\t\t),\n\t\t\tdispose: () => {\n\t\t\t\tfor (const { ctrl, followups } of reqs) {\n\t\t\t\t\tctrl.disposeTestFollowups(followups.map((f) => f.id));\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tfollowups.dispose();\n\t\t}\n\n\t\treturn followups;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic publishDiff(_controllerId: string, diff: TestsDiff) {\n\t\tthis.willProcessDiffEmitter.fire(diff);\n\t\tthis.collection.apply(diff);\n\t\tthis.updateEditorContextKeys();\n\t\tthis.didProcessDiffEmitter.fire(diff);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getTestController(id: string) {\n\t\treturn this.testControllers.get().get(id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async syncTests(): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\t\ttry {\n\t\t\tawait Promise.all(\n\t\t\t\t[...this.testControllers.get().values()].map((c) =>\n\t\t\t\t\tc.syncTests(cts.token),\n\t\t\t\t),\n\t\t\t);\n\t\t} finally {\n\t\t\tcts.dispose(true);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async refreshTests(controllerId?: string): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.testRefreshCancellations.add(cts);\n\t\tthis.isRefreshingTests.set(true);\n\n\t\ttry {\n\t\t\tif (controllerId) {\n\t\t\t\tawait this.getTestController(controllerId)?.refreshTests(\n\t\t\t\t\tcts.token,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\t[...this.testControllers.get().values()].map((c) =>\n\t\t\t\t\t\tc.refreshTests(cts.token),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.testRefreshCancellations.delete(cts);\n\t\t\tthis.isRefreshingTests.set(this.testRefreshCancellations.size > 0);\n\t\t\tcts.dispose(true);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic cancelRefreshTests(): void {\n\t\tfor (const cts of this.testRefreshCancellations) {\n\t\t\tcts.cancel();\n\t\t}\n\t\tthis.testRefreshCancellations.clear();\n\t\tthis.isRefreshingTests.set(false);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic registerExtHost(controller: IMainThreadTestHostProxy): IDisposable {\n\t\tthis.testExtHosts.add(controller);\n\t\treturn toDisposable(() => this.testExtHosts.delete(controller));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async getTestsRelatedToCode(\n\t\turi: URI,\n\t\tposition: Position,\n\t\ttoken: CancellationToken = CancellationToken.None,\n\t): Promise<InternalTestItem[]> {\n\t\tconst testIds = await Promise.all(\n\t\t\t[...this.testExtHosts.values()].map((v) =>\n\t\t\t\tv.getTestsRelatedToCode(uri, position, token),\n\t\t\t),\n\t\t);\n\t\t// ext host will flush diffs before returning, so we should have everything here:\n\t\treturn testIds\n\t\t\t.flatMap((ids) => ids.map((id) => this.collection.getNodeById(id)))\n\t\t\t.filter(isDefined);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic registerTestController(\n\t\tid: string,\n\t\tcontroller: IMainThreadTestController,\n\t): IDisposable {\n\t\tthis.testControllers.set(\n\t\t\tnew Map(this.testControllers.get()).set(id, controller),\n\t\t\tundefined,\n\t\t);\n\n\t\treturn toDisposable(() => {\n\t\t\tconst diff: TestsDiff = [];\n\t\t\tfor (const root of this.collection.rootItems) {\n\t\t\t\tif (root.controllerId === id) {\n\t\t\t\t\tdiff.push({\n\t\t\t\t\t\top: TestDiffOpType.Remove,\n\t\t\t\t\t\titemId: root.item.extId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.publishDiff(id, diff);\n\n\t\t\tconst next = new Map(this.testControllers.get());\n\t\t\tnext.delete(id);\n\t\t\tthis.testControllers.set(next, undefined);\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async getCodeRelatedToTest(\n\t\ttest: InternalTestItem,\n\t\ttoken: CancellationToken = CancellationToken.None,\n\t): Promise<Location[]> {\n\t\treturn (\n\t\t\t(await this.testControllers\n\t\t\t\t.get()\n\t\t\t\t.get(test.controllerId)\n\t\t\t\t?.getRelatedCode(test.item.extId, token)) || []\n\t\t);\n\t}\n\n\tprivate updateEditorContextKeys() {\n\t\tconst uri = this.editorService.activeEditor?.resource;\n\t\tif (uri) {\n\t\t\tthis.activeEditorHasTests.set(\n\t\t\t\t!Iterable.isEmpty(this.collection.getNodeByUrl(uri)),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.activeEditorHasTests.set(false);\n\t\t}\n\t}\n\n\tprivate async saveAllBeforeTest(\n\t\treq: ResolvedTestRunRequest,\n\t\tconfigurationService: IConfigurationService = this.configurationService,\n\t\teditorService: IEditorService = this.editorService,\n\t): Promise<void> {\n\t\tif (req.preserveFocus === true) {\n\t\t\treturn;\n\t\t}\n\t\tconst saveBeforeTest = getTestingConfiguration(\n\t\t\tthis.configurationService,\n\t\t\tTestingConfigKeys.SaveBeforeTest,\n\t\t);\n\t\tif (saveBeforeTest) {\n\t\t\tawait editorService.saveAll();\n\t\t}\n\t\treturn;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["byProfile", "result", "followups"]
}
