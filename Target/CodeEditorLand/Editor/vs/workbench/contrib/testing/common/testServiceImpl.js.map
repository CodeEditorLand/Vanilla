{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { observableValue } from '../../../../base/common/observable.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Location } from '../../../../editor/common/languages.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { bindContextKey } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceTrustRequestService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { getTestingConfiguration, TestingConfigKeys } from './configuration.js';\nimport { MainThreadTestCollection } from './mainThreadTestCollection.js';\nimport { MutableObservableValue } from './observableValue.js';\nimport { StoredValue } from './storedValue.js';\nimport { TestExclusions } from './testExclusions.js';\nimport { TestId } from './testId.js';\nimport { TestingContextKeys } from './testingContextKeys.js';\nimport { canUseProfileWithTest, ITestProfileService } from './testProfileService.js';\nimport { ITestResult } from './testResult.js';\nimport { ITestResultService } from './testResultService.js';\nimport { AmbiguousRunTestsRequest, IMainThreadTestController, IMainThreadTestHostProxy, ITestFollowups, ITestService } from './testService.js';\nimport { InternalTestItem, ITestRunProfile, ResolvedTestRunRequest, TestControllerCapability, TestDiffOpType, TestMessageFollowupRequest, TestsDiff } from './testTypes.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nexport class TestService extends Disposable implements ITestService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate testControllers = observableValue<ReadonlyMap<string, IMainThreadTestController>>('testControllers', new Map<string, IMainThreadTestController>());\n\tprivate testExtHosts = new Set<IMainThreadTestHostProxy>();\n\n\tprivate readonly cancelExtensionTestRunEmitter = new Emitter<{ runId: string | undefined; taskId: string | undefined }>();\n\tprivate readonly willProcessDiffEmitter = new Emitter<TestsDiff>();\n\tprivate readonly didProcessDiffEmitter = new Emitter<TestsDiff>();\n\tprivate readonly testRefreshCancellations = new Set<CancellationTokenSource>();\n\tprivate readonly isRefreshingTests: IContextKey<boolean>;\n\tprivate readonly activeEditorHasTests: IContextKey<boolean>;\n\n\t/**\n\t * Cancellation for runs requested by the user being managed by the UI.\n\t * Test runs initiated by extensions are not included here.\n\t */\n\tprivate readonly uiRunningTests = new Map<string /* run ID */, CancellationTokenSource>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onWillProcessDiff = this.willProcessDiffEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onDidProcessDiff = this.didProcessDiffEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onDidCancelTestRun = this.cancelExtensionTestRunEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly collection = new MainThreadTestCollection(this.uriIdentityService, this.expandTest.bind(this));\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly excluded: TestExclusions;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly showInlineOutput = this._register(MutableObservableValue.stored(new StoredValue<boolean>({\n\t\tkey: 'inlineTestOutputVisible',\n\t\tscope: StorageScope.WORKSPACE,\n\t\ttarget: StorageTarget.USER\n\t}, this.storage), true));\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IStorageService private readonly storage: IStorageService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITestProfileService private readonly testProfiles: ITestProfileService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t) {\n\t\tsuper();\n\t\tthis.excluded = instantiationService.createInstance(TestExclusions);\n\t\tthis.isRefreshingTests = TestingContextKeys.isRefreshingTests.bindTo(contextKeyService);\n\t\tthis.activeEditorHasTests = TestingContextKeys.activeEditorHasTests.bindTo(contextKeyService);\n\n\t\tthis._register(bindContextKey(TestingContextKeys.providerCount, contextKeyService,\n\t\t\treader => this.testControllers.read(reader).size));\n\n\t\tconst bindCapability = (key: RawContextKey<boolean>, capability: TestControllerCapability) =>\n\t\t\tthis._register(bindContextKey(key, contextKeyService, reader =>\n\t\t\t\tIterable.some(\n\t\t\t\t\tthis.testControllers.read(reader).values(),\n\t\t\t\t\tctrl => !!(ctrl.capabilities.read(reader) & capability)\n\t\t\t\t),\n\t\t\t));\n\n\t\tbindCapability(TestingContextKeys.canRefreshTests, TestControllerCapability.Refresh);\n\t\tbindCapability(TestingContextKeys.canGoToRelatedCode, TestControllerCapability.CodeRelatedToTest);\n\t\tbindCapability(TestingContextKeys.canGoToRelatedTest, TestControllerCapability.TestRelatedToCode);\n\n\t\tthis._register(editorService.onDidActiveEditorChange(() => this.updateEditorContextKeys()));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async expandTest(id: string, levels: number) {\n\t\tawait this.testControllers.get().get(TestId.fromString(id).controllerId)?.expandTest(id, levels);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic cancelTestRun(runId?: string, taskId?: string) {\n\t\tthis.cancelExtensionTestRunEmitter.fire({ runId, taskId });\n\n\t\tif (runId === undefined) {\n\t\t\tfor (const runCts of this.uiRunningTests.values()) {\n\t\t\t\trunCts.cancel();\n\t\t\t}\n\t\t} else if (!taskId) {\n\t\t\tthis.uiRunningTests.get(runId)?.cancel();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async runTests(req: AmbiguousRunTestsRequest, token = CancellationToken.None): Promise<ITestResult> {\n\t\t// We try to ensure that all tests in the request will be run, preferring\n\t\t// to use default profiles for each controller when possible.\n\t\tconst byProfile: { profile: ITestRunProfile; tests: InternalTestItem[] }[] = [];\n\t\tfor (const test of req.tests) {\n\t\t\tconst existing = byProfile.find(p => canUseProfileWithTest(p.profile, test));\n\t\t\tif (existing) {\n\t\t\t\texisting.tests.push(test);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst allProfiles = this.testProfiles.getControllerProfiles(test.controllerId)\n\t\t\t\t.filter(p => (p.group & req.group) !== 0 && canUseProfileWithTest(p, test));\n\t\t\tconst bestProfile = allProfiles.find(p => p.isDefault) || allProfiles[0];\n\t\t\tif (!bestProfile) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbyProfile.push({ profile: bestProfile, tests: [test] });\n\t\t}\n\n\t\tconst resolved: ResolvedTestRunRequest = {\n\t\t\ttargets: byProfile.map(({ profile, tests }) => ({\n\t\t\t\tprofileId: profile.profileId,\n\t\t\t\tcontrollerId: tests[0].controllerId,\n\t\t\t\ttestIds: tests.map(t => t.item.extId),\n\t\t\t})),\n\t\t\tgroup: req.group,\n\t\t\texclude: req.exclude?.map(t => t.item.extId),\n\t\t\tcontinuous: req.continuous,\n\t\t};\n\n\t\t// If no tests are covered by the defaults, just use whatever the defaults\n\t\t// for their controller are. This can happen if the user chose specific\n\t\t// profiles for the run button, but then asked to run a single test from the\n\t\t// explorer or decoration. We shouldn't no-op.\n\t\tif (resolved.targets.length === 0) {\n\t\t\tfor (const byController of groupBy(req.tests, (a, b) => a.controllerId === b.controllerId ? 0 : 1)) {\n\t\t\t\tconst profiles = this.testProfiles.getControllerProfiles(byController[0].controllerId);\n\t\t\t\tconst withControllers = byController.map(test => ({\n\t\t\t\t\tprofile: profiles.find(p => p.group === req.group && canUseProfileWithTest(p, test)),\n\t\t\t\t\ttest,\n\t\t\t\t}));\n\n\t\t\t\tfor (const byProfile of groupBy(withControllers, (a, b) => a.profile === b.profile ? 0 : 1)) {\n\t\t\t\t\tconst profile = byProfile[0].profile;\n\t\t\t\t\tif (profile) {\n\t\t\t\t\t\tresolved.targets.push({\n\t\t\t\t\t\t\ttestIds: byProfile.map(t => t.test.item.extId),\n\t\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.runResolvedTests(resolved, token);\n\t}\n\n\t/** @inheritdoc */\n\tpublic async startContinuousRun(req: ResolvedTestRunRequest, token: CancellationToken) {\n\t\tif (!req.exclude) {\n\t\t\treq.exclude = [...this.excluded.all];\n\t\t}\n\n\t\tconst trust = await this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\tmessage: localize('testTrust', \"Running tests may execute code in your workspace.\"),\n\t\t});\n\n\t\tif (!trust) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst byController = groupBy(req.targets, (a, b) => a.controllerId.localeCompare(b.controllerId));\n\t\tconst requests = byController.map(\n\t\t\tgroup => this.getTestController(group[0].controllerId)?.startContinuousRun(\n\t\t\t\tgroup.map(controlReq => ({\n\t\t\t\t\texcludeExtIds: req.exclude!.filter(t => !controlReq.testIds.includes(t)),\n\t\t\t\t\tprofileId: controlReq.profileId,\n\t\t\t\t\tcontrollerId: controlReq.controllerId,\n\t\t\t\t\ttestIds: controlReq.testIds,\n\t\t\t\t})),\n\t\t\t\ttoken,\n\t\t\t).then(result => {\n\t\t\t\tconst errs = result.map(r => r.error).filter(isDefined);\n\t\t\t\tif (errs.length) {\n\t\t\t\t\tthis.notificationService.error(localize('testError', 'An error occurred attempting to run tests: {0}', errs.join(' ')));\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tawait Promise.all(requests);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async runResolvedTests(req: ResolvedTestRunRequest, token = CancellationToken.None) {\n\t\tif (!req.exclude) {\n\t\t\treq.exclude = [...this.excluded.all];\n\t\t}\n\n\t\tconst result = this.testResults.createLiveResult(req);\n\t\tconst trust = await this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\tmessage: localize('testTrust', \"Running tests may execute code in your workspace.\"),\n\t\t});\n\n\t\tif (!trust) {\n\t\t\tresult.markComplete();\n\t\t\treturn result;\n\t\t}\n\n\t\ttry {\n\t\t\tconst cancelSource = new CancellationTokenSource(token);\n\t\t\tthis.uiRunningTests.set(result.id, cancelSource);\n\n\t\t\tconst byController = groupBy(req.targets, (a, b) => a.controllerId.localeCompare(b.controllerId));\n\t\t\tconst requests = byController.map(\n\t\t\t\tgroup => this.getTestController(group[0].controllerId)?.runTests(\n\t\t\t\t\tgroup.map(controlReq => ({\n\t\t\t\t\t\trunId: result.id,\n\t\t\t\t\t\texcludeExtIds: req.exclude!.filter(t => !controlReq.testIds.includes(t)),\n\t\t\t\t\t\tprofileId: controlReq.profileId,\n\t\t\t\t\t\tcontrollerId: controlReq.controllerId,\n\t\t\t\t\t\ttestIds: controlReq.testIds,\n\t\t\t\t\t})),\n\t\t\t\t\tcancelSource.token,\n\t\t\t\t).then(result => {\n\t\t\t\t\tconst errs = result.map(r => r.error).filter(isDefined);\n\t\t\t\t\tif (errs.length) {\n\t\t\t\t\t\tthis.notificationService.error(localize('testError', 'An error occurred attempting to run tests: {0}', errs.join(' ')));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tawait this.saveAllBeforeTest(req);\n\t\t\tawait Promise.all(requests);\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis.uiRunningTests.delete(result.id);\n\t\t\tresult.markComplete();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async provideTestFollowups(req: TestMessageFollowupRequest, token: CancellationToken): Promise<ITestFollowups> {\n\t\tconst reqs = await Promise.all([...this.testExtHosts].map(async ctrl =>\n\t\t\t({ ctrl, followups: await ctrl.provideTestFollowups(req, token) })));\n\n\t\tconst followups: ITestFollowups = {\n\t\t\tfollowups: reqs.flatMap(({ ctrl, followups }) => followups.map(f => ({\n\t\t\t\tmessage: f.title,\n\t\t\t\texecute: () => ctrl.executeTestFollowup(f.id)\n\t\t\t}))),\n\t\t\tdispose: () => {\n\t\t\t\tfor (const { ctrl, followups } of reqs) {\n\t\t\t\t\tctrl.disposeTestFollowups(followups.map(f => f.id));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tfollowups.dispose();\n\t\t}\n\n\t\treturn followups;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic publishDiff(_controllerId: string, diff: TestsDiff) {\n\t\tthis.willProcessDiffEmitter.fire(diff);\n\t\tthis.collection.apply(diff);\n\t\tthis.updateEditorContextKeys();\n\t\tthis.didProcessDiffEmitter.fire(diff);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getTestController(id: string) {\n\t\treturn this.testControllers.get().get(id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async syncTests(): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\t\ttry {\n\t\t\tawait Promise.all([...this.testControllers.get().values()].map(c => c.syncTests(cts.token)));\n\t\t} finally {\n\t\t\tcts.dispose(true);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async refreshTests(controllerId?: string): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.testRefreshCancellations.add(cts);\n\t\tthis.isRefreshingTests.set(true);\n\n\t\ttry {\n\t\t\tif (controllerId) {\n\t\t\t\tawait this.getTestController(controllerId)?.refreshTests(cts.token);\n\t\t\t} else {\n\t\t\t\tawait Promise.all([...this.testControllers.get().values()].map(c => c.refreshTests(cts.token)));\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.testRefreshCancellations.delete(cts);\n\t\t\tthis.isRefreshingTests.set(this.testRefreshCancellations.size > 0);\n\t\t\tcts.dispose(true);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic cancelRefreshTests(): void {\n\t\tfor (const cts of this.testRefreshCancellations) {\n\t\t\tcts.cancel();\n\t\t}\n\t\tthis.testRefreshCancellations.clear();\n\t\tthis.isRefreshingTests.set(false);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic registerExtHost(controller: IMainThreadTestHostProxy): IDisposable {\n\t\tthis.testExtHosts.add(controller);\n\t\treturn toDisposable(() => this.testExtHosts.delete(controller));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async getTestsRelatedToCode(uri: URI, position: Position, token: CancellationToken = CancellationToken.None): Promise<InternalTestItem[]> {\n\t\tconst testIds = await Promise.all([...this.testExtHosts.values()].map(v => v.getTestsRelatedToCode(uri, position, token)));\n\t\t// ext host will flush diffs before returning, so we should have everything here:\n\t\treturn testIds.flatMap(ids => ids.map(id => this.collection.getNodeById(id))).filter(isDefined);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic registerTestController(id: string, controller: IMainThreadTestController): IDisposable {\n\t\tthis.testControllers.set(new Map(this.testControllers.get()).set(id, controller), undefined);\n\n\t\treturn toDisposable(() => {\n\t\t\tconst diff: TestsDiff = [];\n\t\t\tfor (const root of this.collection.rootItems) {\n\t\t\t\tif (root.controllerId === id) {\n\t\t\t\t\tdiff.push({ op: TestDiffOpType.Remove, itemId: root.item.extId });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.publishDiff(id, diff);\n\n\t\t\tconst next = new Map(this.testControllers.get());\n\t\t\tnext.delete(id);\n\t\t\tthis.testControllers.set(next, undefined);\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async getCodeRelatedToTest(test: InternalTestItem, token: CancellationToken = CancellationToken.None): Promise<Location[]> {\n\t\treturn (await this.testControllers.get().get(test.controllerId)?.getRelatedCode(test.item.extId, token)) || [];\n\t}\n\n\tprivate updateEditorContextKeys() {\n\t\tconst uri = this.editorService.activeEditor?.resource;\n\t\tif (uri) {\n\t\t\tthis.activeEditorHasTests.set(!Iterable.isEmpty(this.collection.getNodeByUrl(uri)));\n\t\t} else {\n\t\t\tthis.activeEditorHasTests.set(false);\n\t\t}\n\t}\n\n\tprivate async saveAllBeforeTest(req: ResolvedTestRunRequest, configurationService: IConfigurationService = this.configurationService, editorService: IEditorService = this.editorService): Promise<void> {\n\t\tif (req.preserveFocus === true) {\n\t\t\treturn;\n\t\t}\n\t\tconst saveBeforeTest = getTestingConfiguration(this.configurationService, TestingConfigKeys.SaveBeforeTest);\n\t\tif (saveBeforeTest) {\n\t\t\tawait editorService.saveAll();\n\t\t}\n\t\treturn;\n\t}\n}\n\n\n"],
  "mappings": "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",
  "names": ["byProfile", "result", "followups"]
}
