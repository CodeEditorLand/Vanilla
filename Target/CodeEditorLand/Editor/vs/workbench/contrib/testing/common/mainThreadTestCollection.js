import{Emitter as c}from"../../../../base/common/event.js";import{Iterable as l}from"../../../../base/common/iterator.js";import{ResourceMap as m}from"../../../../base/common/map.js";import{AbstractIncrementalTestCollection as a,TestDiffOpType as i}from"./testTypes.js";class U extends a{constructor(e,t){super(e);this.expandActual=t}testsByUrl=new m;busyProvidersChangeEmitter=new c;expandPromises=new WeakMap;get busyProviders(){return this.busyControllerCount}get rootItems(){return this.roots}get all(){return this.getIterator()}get rootIds(){return l.map(this.roots.values(),e=>e.item.extId)}onBusyProvidersChange=this.busyProvidersChangeEmitter.event;expand(e,t){const o=this.items.get(e);if(!o)return Promise.resolve();const r=this.expandPromises.get(o);if(r&&r.pendingLvl>=t)return r.prom;const n=this.expandActual(o.item.extId,t),s={doneLvl:r?r.doneLvl:-1,pendingLvl:t,prom:n};return this.expandPromises.set(o,s),n.then(()=>{s.doneLvl=t})}getNodeById(e){return this.items.get(e)}getNodeByUrl(e){return this.testsByUrl.get(e)||l.empty()}getReviverDiff(){const e=[{op:i.IncrementPendingExtHosts,amount:this.pendingRootCount}],t=[this.rootIds];for(;t.length;)for(const o of t.pop()){const r=this.items.get(o);e.push({op:i.Add,item:{controllerId:r.controllerId,expand:r.expand,item:r.item}}),t.push(r.children)}return e}apply(e){const t=this.busyControllerCount;super.apply(e),t!==this.busyControllerCount&&this.busyProvidersChangeEmitter.fire(this.busyControllerCount)}clear(){const e=[];for(const t of this.roots)e.push({op:i.Remove,itemId:t.item.extId});return this.roots.clear(),this.items.clear(),e}createItem(e){return{...e,children:new Set}}changeCollector={add:e=>{if(!e.item.uri)return;const t=this.testsByUrl.get(e.item.uri);t?t.add(e):this.testsByUrl.set(e.item.uri,new Set([e]))},remove:e=>{if(!e.item.uri)return;const t=this.testsByUrl.get(e.item.uri);t&&(t.delete(e),t.size===0&&this.testsByUrl.delete(e.item.uri))}};createChangeCollector(){return this.changeCollector}*getIterator(){const e=[this.rootIds];for(;e.length;)for(const t of e.pop()){const o=this.getNodeById(t);yield o,e.push(o.children)}}}export{U as MainThreadTestCollection};
