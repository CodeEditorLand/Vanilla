var f=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var g=(s,o,e,l)=>{for(var r=l>1?void 0:l?b(o,e):o,t=s.length-1,i;t>=0;t--)(i=s[t])&&(r=(l?i(o,e,r):i(r))||r);return l&&r&&f(o,e,r),r},p=(s,o)=>(e,l)=>o(e,l,s);import{Emitter as h}from"../../../../../vs/base/common/event.js";import{splitGlobAware as T}from"../../../../../vs/base/common/glob.js";import{Disposable as F}from"../../../../../vs/base/common/lifecycle.js";import{createDecorator as v}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{IStorageService as x,StorageScope as S,StorageTarget as y}from"../../../../../vs/platform/storage/common/storage.js";import{MutableObservableValue as u}from"../../../../../vs/workbench/contrib/testing/common/observableValue.js";import{StoredValue as I}from"../../../../../vs/workbench/contrib/testing/common/storedValue.js";import{namespaceTestTag as m}from"../../../../../vs/workbench/contrib/testing/common/testTypes.js";const B=v("testingFilterState"),E=/!?@([^ ,:]+)/g,w=s=>s.replace(/\s\s+/g," ").trim();let d=class extends F{constructor(e){super();this.storageService=e}focusEmitter=new h;termFilterState={};globList=[];includeTags=new Set;excludeTags=new Set;text=this._register(new u(""));fuzzy=this._register(u.stored(new I({key:"testHistoryFuzzy",scope:S.PROFILE,target:y.USER},this.storageService),!1));reveal=this._register(new u(void 0));onDidRequestInputFocus=this.focusEmitter.event;focusInput(){this.focusEmitter.fire()}setText(e){if(e===this.text.value)return;this.termFilterState={},this.globList=[],this.includeTags.clear(),this.excludeTags.clear();let l="",r=0;for(const t of e.matchAll(E)){let i=t.index+t[0].length;const c=t[0];if(O.includes(c)&&(this.termFilterState[c]=!0),e[i]===":"){i++;let n=e[i];n!=='"'&&n!=="'"?n=" ":i++;let a="";for(;i<e.length&&e[i]!==n;)e[i]==="\\"?(a+=e[i+1],i+=2):(a+=e[i],i++);t[0].startsWith("!")?this.excludeTags.add(m(t[1],a)):this.includeTags.add(m(t[1],a)),i++}l+=e.slice(r,t.index),r=i}if(l+=e.slice(r).trim(),l.length)for(const t of T(l,",").map(i=>i.trim()).filter(i=>!!i.length))t.startsWith("!")?this.globList.push({include:!1,text:t.slice(1).toLowerCase()}):this.globList.push({include:!0,text:t.toLowerCase()});this.text.value=e}isFilteringFor(e){return!!this.termFilterState[e]}toggleFilteringFor(e,l){const r=this.text.value.trim();l!==!1&&!this.termFilterState[e]?this.setText(r?`${r} ${e}`:e):l!==!0&&this.termFilterState[e]&&this.setText(w(r.replace(e,"")))}};d=g([p(0,x)],d);var L=(t=>(t.Failed="@failed",t.Executed="@executed",t.CurrentDoc="@doc",t.OpenedFiles="@openedFiles",t.Hidden="@hidden",t))(L||{});const O=["@failed","@executed","@doc","@openedFiles","@hidden"];export{B as ITestExplorerFilterState,d as TestExplorerFilterState,L as TestFilterTerm};
