{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testExclusions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { MutableObservableValue } from './observableValue.js';\nimport { StoredValue } from './storedValue.js';\nimport { InternalTestItem } from './testTypes.js';\n\nexport class TestExclusions extends Disposable {\n\tprivate readonly excluded = this._register(\n\t\tMutableObservableValue.stored(new StoredValue<ReadonlySet<string>>({\n\t\t\tkey: 'excludedTestItems',\n\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\ttarget: StorageTarget.MACHINE,\n\t\t\tserialization: {\n\t\t\t\tdeserialize: v => new Set(JSON.parse(v)),\n\t\t\t\tserialize: v => JSON.stringify([...v])\n\t\t\t},\n\t\t}, this.storageService), new Set())\n\t);\n\n\tconstructor(@IStorageService private readonly storageService: IStorageService) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Event that fires when the excluded tests change.\n\t */\n\tpublic readonly onTestExclusionsChanged: Event<unknown> = this.excluded.onDidChange;\n\n\t/**\n\t * Gets whether there's any excluded tests.\n\t */\n\tpublic get hasAny() {\n\t\treturn this.excluded.value.size > 0;\n\t}\n\n\t/**\n\t * Gets all excluded tests.\n\t */\n\tpublic get all(): Iterable<string> {\n\t\treturn this.excluded.value;\n\t}\n\n\t/**\n\t * Sets whether a test is excluded.\n\t */\n\tpublic toggle(test: InternalTestItem, exclude?: boolean): void {\n\t\tif (exclude !== true && this.excluded.value.has(test.item.extId)) {\n\t\t\tthis.excluded.value = new Set(Iterable.filter(this.excluded.value, e => e !== test.item.extId));\n\t\t} else if (exclude !== false && !this.excluded.value.has(test.item.extId)) {\n\t\t\tthis.excluded.value = new Set([...this.excluded.value, test.item.extId]);\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether a test is excluded.\n\t */\n\tpublic contains(test: InternalTestItem): boolean {\n\t\treturn this.excluded.value.has(test.item.extId);\n\t}\n\n\t/**\n\t * Removes all test exclusions.\n\t */\n\tpublic clear(): void {\n\t\tthis.excluded.value = new Set();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,8BAA8B;AACvC,SAAS,mBAAmB;AAC5B,SAAS,wBAAwB;AAE1B,IAAM,iBAAN,cAA6B,WAAW;AAAA,EAa9C,YAA8C,gBAAiC;AAC9E,UAAM;AADuC;AAAA,EAE9C;AAAA,EA5BD,OAa+C;AAAA;AAAA;AAAA,EAC7B,WAAW,KAAK;AAAA,IAChC,uBAAuB,OAAO,IAAI,YAAiC;AAAA,MAClE,KAAK;AAAA,MACL,OAAO,aAAa;AAAA,MACpB,QAAQ,cAAc;AAAA,MACtB,eAAe;AAAA,QACd,aAAa,8BAAK,IAAI,IAAI,KAAK,MAAM,CAAC,CAAC,GAA1B;AAAA,QACb,WAAW,8BAAK,KAAK,UAAU,CAAC,GAAG,CAAC,CAAC,GAA1B;AAAA,MACZ;AAAA,IACD,GAAG,KAAK,cAAc,GAAG,oBAAI,IAAI,CAAC;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EASgB,0BAA0C,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA,EAKxE,IAAW,SAAS;AACnB,WAAO,KAAK,SAAS,MAAM,OAAO;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAwB;AAClC,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKO,OAAO,MAAwB,SAAyB;AAC9D,QAAI,YAAY,QAAQ,KAAK,SAAS,MAAM,IAAI,KAAK,KAAK,KAAK,GAAG;AACjE,WAAK,SAAS,QAAQ,IAAI,IAAI,SAAS,OAAO,KAAK,SAAS,OAAO,OAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,IAC/F,WAAW,YAAY,SAAS,CAAC,KAAK,SAAS,MAAM,IAAI,KAAK,KAAK,KAAK,GAAG;AAC1E,WAAK,SAAS,QAAQ,oBAAI,IAAI,CAAC,GAAG,KAAK,SAAS,OAAO,KAAK,KAAK,KAAK,CAAC;AAAA,IACxE;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKO,SAAS,MAAiC;AAChD,WAAO,KAAK,SAAS,MAAM,IAAI,KAAK,KAAK,KAAK;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKO,QAAc;AACpB,SAAK,SAAS,QAAQ,oBAAI,IAAI;AAAA,EAC/B;AACD;AA5Da,iBAAN;AAAA,EAaO;AAAA,GAbD;",
  "names": []
}
