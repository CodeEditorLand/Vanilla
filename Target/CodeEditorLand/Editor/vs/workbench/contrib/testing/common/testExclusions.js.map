{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testExclusions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { MutableObservableValue } from \"./observableValue.js\";\nimport { StoredValue } from \"./storedValue.js\";\nimport type { InternalTestItem } from \"./testTypes.js\";\n\nexport class TestExclusions extends Disposable {\n\tprivate readonly excluded = this._register(\n\t\tMutableObservableValue.stored(\n\t\t\tnew StoredValue<ReadonlySet<string>>(\n\t\t\t\t{\n\t\t\t\t\tkey: \"excludedTestItems\",\n\t\t\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\t\t\ttarget: StorageTarget.MACHINE,\n\t\t\t\t\tserialization: {\n\t\t\t\t\t\tdeserialize: (v) => new Set(JSON.parse(v)),\n\t\t\t\t\t\tserialize: (v) => JSON.stringify([...v]),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tthis.storageService,\n\t\t\t),\n\t\t\tnew Set(),\n\t\t),\n\t);\n\n\tconstructor(@IStorageService private readonly storageService: IStorageService) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Event that fires when the excluded tests change.\n\t */\n\tpublic readonly onTestExclusionsChanged: Event<unknown> =\n\t\tthis.excluded.onDidChange;\n\n\t/**\n\t * Gets whether there's any excluded tests.\n\t */\n\tpublic get hasAny() {\n\t\treturn this.excluded.value.size > 0;\n\t}\n\n\t/**\n\t * Gets all excluded tests.\n\t */\n\tpublic get all(): Iterable<string> {\n\t\treturn this.excluded.value;\n\t}\n\n\t/**\n\t * Sets whether a test is excluded.\n\t */\n\tpublic toggle(test: InternalTestItem, exclude?: boolean): void {\n\t\tif (exclude !== true && this.excluded.value.has(test.item.extId)) {\n\t\t\tthis.excluded.value = new Set(\n\t\t\t\tIterable.filter(\n\t\t\t\t\tthis.excluded.value,\n\t\t\t\t\t(e) => e !== test.item.extId,\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (\n\t\t\texclude !== false &&\n\t\t\t!this.excluded.value.has(test.item.extId)\n\t\t) {\n\t\t\tthis.excluded.value = new Set([\n\t\t\t\t...this.excluded.value,\n\t\t\t\ttest.item.extId,\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether a test is excluded.\n\t */\n\tpublic contains(test: InternalTestItem): boolean {\n\t\treturn this.excluded.value.has(test.item.extId);\n\t}\n\n\t/**\n\t * Removes all test exclusions.\n\t */\n\tpublic clear(): void {\n\t\tthis.excluded.value = new Set();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,8BAA8B;AACvC,SAAS,mBAAmB;AAGrB,IAAM,iBAAN,cAA6B,WAAW;AAAA,EAmB9C,YAA8C,gBAAiC;AAC9E,UAAM;AADuC;AAAA,EAE9C;AAAA,EAtCD,OAiB+C;AAAA;AAAA;AAAA,EAC7B,WAAW,KAAK;AAAA,IAChC,uBAAuB;AAAA,MACtB,IAAI;AAAA,QACH;AAAA,UACC,KAAK;AAAA,UACL,OAAO,aAAa;AAAA,UACpB,QAAQ,cAAc;AAAA,UACtB,eAAe;AAAA,YACd,aAAa,wBAAC,MAAM,IAAI,IAAI,KAAK,MAAM,CAAC,CAAC,GAA5B;AAAA,YACb,WAAW,wBAAC,MAAM,KAAK,UAAU,CAAC,GAAG,CAAC,CAAC,GAA5B;AAAA,UACZ;AAAA,QACD;AAAA,QACA,KAAK;AAAA,MACN;AAAA,MACA,oBAAI,IAAI;AAAA,IACT;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EASgB,0BACf,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA,EAKf,IAAW,SAAS;AACnB,WAAO,KAAK,SAAS,MAAM,OAAO;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAwB;AAClC,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKO,OAAO,MAAwB,SAAyB;AAC9D,QAAI,YAAY,QAAQ,KAAK,SAAS,MAAM,IAAI,KAAK,KAAK,KAAK,GAAG;AACjE,WAAK,SAAS,QAAQ,IAAI;AAAA,QACzB,SAAS;AAAA,UACR,KAAK,SAAS;AAAA,UACd,CAAC,MAAM,MAAM,KAAK,KAAK;AAAA,QACxB;AAAA,MACD;AAAA,IACD,WACC,YAAY,SACZ,CAAC,KAAK,SAAS,MAAM,IAAI,KAAK,KAAK,KAAK,GACvC;AACD,WAAK,SAAS,QAAQ,oBAAI,IAAI;AAAA,QAC7B,GAAG,KAAK,SAAS;AAAA,QACjB,KAAK,KAAK;AAAA,MACX,CAAC;AAAA,IACF;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKO,SAAS,MAAiC;AAChD,WAAO,KAAK,SAAS,MAAM,IAAI,KAAK,KAAK,KAAK;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKO,QAAc;AACpB,SAAK,SAAS,QAAQ,oBAAI,IAAI;AAAA,EAC/B;AACD;AA9Ea,iBAAN;AAAA,EAmBO;AAAA,GAnBD;",
  "names": []
}
