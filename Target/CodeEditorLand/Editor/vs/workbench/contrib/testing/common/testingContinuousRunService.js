var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=(a,o,e,i)=>{for(var t=i>1?void 0:i?h(o,e):o,s=a.length-1,n;s>=0;s--)(n=a[s])&&(t=(i?n(o,e,t):n(t))||t);return i&&t&&c(o,e,t),t},u=(a,o)=>(e,i)=>o(e,i,a);import*as m from"../../../../../vs/base/common/arrays.js";import{CancellationTokenSource as b}from"../../../../../vs/base/common/cancellation.js";import{Emitter as S}from"../../../../../vs/base/common/event.js";import{Disposable as y,DisposableStore as v,toDisposable as p}from"../../../../../vs/base/common/lifecycle.js";import{WellDefinedPrefixTree as R}from"../../../../../vs/base/common/prefixTree.js";import{IContextKeyService as I}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{createDecorator as P}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{IStorageService as C,StorageScope as T,StorageTarget as E}from"../../../../../vs/platform/storage/common/storage.js";import{StoredValue as O}from"../../../../../vs/workbench/contrib/testing/common/storedValue.js";import{TestId as l}from"../../../../../vs/workbench/contrib/testing/common/testId.js";import{TestingContextKeys as D}from"../../../../../vs/workbench/contrib/testing/common/testingContextKeys.js";import{ITestProfileService as x}from"../../../../../vs/workbench/contrib/testing/common/testProfileService.js";import{ITestService as K}from"../../../../../vs/workbench/contrib/testing/common/testService.js";import"../../../../../vs/workbench/contrib/testing/common/testServiceImpl.js";import"../../../../../vs/workbench/contrib/testing/common/testTypes.js";const Z=P("testingContinuousRunService");let d=class extends y{constructor(e,i,t,s){super();this.testService=e;this.testProfileService=s;this.isGloballyOn=D.isContinuousModeOn.bindTo(t),this.lastRun=this._register(new O({key:"lastContinuousRunProfileIds",scope:T.WORKSPACE,target:E.MACHINE,serialization:{deserialize:n=>new Set(JSON.parse(n)),serialize:n=>JSON.stringify([...n])}},i)),this._register(p(()=>{this.globallyRunning?.dispose();for(const n of this.running.values())n.dispose()}))}changeEmitter=new S;globallyRunning;running=new R;lastRun;isGloballyOn;onDidChange=this.changeEmitter.event;get lastRunProfileIds(){return this.lastRun.get(new Set)}isSpecificallyEnabledFor(e){return this.running.size>0&&this.running.hasKey(l.fromString(e).path)}isEnabledForAParentOf(e){return this.globallyRunning?!0:this.running.size>0&&this.running.hasKeyOrParent(l.fromString(e).path)}isEnabledForAChildOf(e){return this.running.size>0&&this.running.hasKeyOrChildren(l.fromString(e).path)}isEnabled(){return!!this.globallyRunning||this.running.size>0}start(e,i){const t=new v,s=new b;t.add(p(()=>s.dispose(!0))),i===void 0&&this.isGloballyOn.set(!0),i?this.running.mutate(l.fromString(i).path,r=>(r?.dispose(),t)):(this.globallyRunning?.dispose(),this.globallyRunning=t);let n;if(e instanceof Array)n=e;else{const r=()=>this.testProfileService.getGroupDefaultProfiles(e).filter(f=>f.supportsContinuousRun&&(!i||l.root(i)===f.controllerId));n=r(),t.add(this.testProfileService.onDidChange(()=>{m.equals(r(),n)||this.start(e,i)}))}this.lastRun.store(new Set(n.map(r=>r.profileId))),n.length&&this.testService.startContinuousRun({continuous:!0,group:n[0].group,targets:n.map(r=>({testIds:[i??r.controllerId],controllerId:r.controllerId,profileId:r.profileId}))},s.token),this.changeEmitter.fire(i)}stop(e){if(!e)this.globallyRunning?.dispose(),this.globallyRunning=void 0;else{const i=[...this.running.deleteRecursive(l.fromString(e).path)];for(let t=i.length-1;t>=0;t--)i[t].dispose()}e===void 0&&this.isGloballyOn.set(!1),this.changeEmitter.fire(e)}};d=g([u(0,K),u(1,C),u(2,I),u(3,x)],d);export{Z as ITestingContinuousRunService,d as TestingContinuousRunService};
