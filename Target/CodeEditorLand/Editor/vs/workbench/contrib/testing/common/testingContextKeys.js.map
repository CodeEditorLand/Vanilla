{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { TestExplorerViewMode, TestExplorerViewSorting } from './constants.js';\nimport { TestRunProfileBitset } from './testTypes.js';\n\nexport namespace TestingContextKeys {\n\texport const providerCount = new RawContextKey('testing.providerCount', 0);\n\texport const canRefreshTests = new RawContextKey('testing.canRefresh', false, { type: 'boolean', description: localize('testing.canRefresh', 'Indicates whether any test controller has an attached refresh handler.') });\n\texport const isRefreshingTests = new RawContextKey('testing.isRefreshing', false, { type: 'boolean', description: localize('testing.isRefreshing', 'Indicates whether any test controller is currently refreshing tests.') });\n\texport const isContinuousModeOn = new RawContextKey('testing.isContinuousModeOn', false, { type: 'boolean', description: localize('testing.isContinuousModeOn', 'Indicates whether continuous test mode is on.') });\n\texport const hasDebuggableTests = new RawContextKey('testing.hasDebuggableTests', false, { type: 'boolean', description: localize('testing.hasDebuggableTests', 'Indicates whether any test controller has registered a debug configuration') });\n\texport const hasRunnableTests = new RawContextKey('testing.hasRunnableTests', false, { type: 'boolean', description: localize('testing.hasRunnableTests', 'Indicates whether any test controller has registered a run configuration') });\n\texport const hasCoverableTests = new RawContextKey('testing.hasCoverableTests', false, { type: 'boolean', description: localize('testing.hasCoverableTests', 'Indicates whether any test controller has registered a coverage configuration') });\n\texport const hasNonDefaultProfile = new RawContextKey('testing.hasNonDefaultProfile', false, { type: 'boolean', description: localize('testing.hasNonDefaultConfig', 'Indicates whether any test controller has registered a non-default configuration') });\n\texport const hasConfigurableProfile = new RawContextKey('testing.hasConfigurableProfile', false, { type: 'boolean', description: localize('testing.hasConfigurableConfig', 'Indicates whether any test configuration can be configured') });\n\texport const supportsContinuousRun = new RawContextKey('testing.supportsContinuousRun', false, { type: 'boolean', description: localize('testing.supportsContinuousRun', 'Indicates whether continous test running is supported') });\n\texport const isParentRunningContinuously = new RawContextKey('testing.isParentRunningContinuously', false, { type: 'boolean', description: localize('testing.isParentRunningContinuously', 'Indicates whether the parent of a test is continuously running, set in the menu context of test items') });\n\texport const activeEditorHasTests = new RawContextKey('testing.activeEditorHasTests', false, { type: 'boolean', description: localize('testing.activeEditorHasTests', 'Indicates whether any tests are present in the current editor') });\n\texport const cursorInsideTestRange = new RawContextKey('testing.cursorInsideTestRange', false, { type: 'boolean', description: localize('testing.cursorInsideTestRange', 'Whether the cursor is currently inside a test range') });\n\texport const isTestCoverageOpen = new RawContextKey('testing.isTestCoverageOpen', false, { type: 'boolean', description: localize('testing.isTestCoverageOpen', 'Indicates whether a test coverage report is open') });\n\texport const hasPerTestCoverage = new RawContextKey('testing.hasPerTestCoverage', false, { type: 'boolean', description: localize('testing.hasPerTestCoverage', 'Indicates whether per-test coverage is available') });\n\texport const isCoverageFilteredToTest = new RawContextKey('testing.isCoverageFilteredToTest', false, { type: 'boolean', description: localize('testing.isCoverageFilteredToTest', 'Indicates whether coverage has been filterd to a single test') });\n\texport const coverageToolbarEnabled = new RawContextKey('testing.coverageToolbarEnabled', true, { type: 'boolean', description: localize('testing.coverageToolbarEnabled', 'Indicates whether the coverage toolbar is enabled') });\n\texport const inlineCoverageEnabled = new RawContextKey('testing.inlineCoverageEnabled', false, { type: 'boolean', description: localize('testing.inlineCoverageEnabled', 'Indicates whether inline coverage is shown') });\n\texport const canGoToRelatedCode = new RawContextKey('testing.canGoToRelatedCode', false, { type: 'boolean', description: localize('testing.canGoToRelatedCode', 'Whether a controller implements a capability to find code related to a test') });\n\texport const canGoToRelatedTest = new RawContextKey('testing.canGoToRelatedTest', false, { type: 'boolean', description: localize('testing.canGoToRelatedTest', 'Whether a controller implements a capability to find tests related to code') });\n\texport const peekHasStack = new RawContextKey('testing.peekHasStack', false, { type: 'boolean', description: localize('testing.peekHasStack', 'Whether the message shown in a peek view has a stack trace') });\n\n\texport const capabilityToContextKey: { [K in TestRunProfileBitset]: RawContextKey<boolean> } = {\n\t\t[TestRunProfileBitset.Run]: hasRunnableTests,\n\t\t[TestRunProfileBitset.Coverage]: hasCoverableTests,\n\t\t[TestRunProfileBitset.Debug]: hasDebuggableTests,\n\t\t[TestRunProfileBitset.HasNonDefaultProfile]: hasNonDefaultProfile,\n\t\t[TestRunProfileBitset.HasConfigurable]: hasConfigurableProfile,\n\t\t[TestRunProfileBitset.SupportsContinuousRun]: supportsContinuousRun,\n\t};\n\n\texport const hasAnyResults = new RawContextKey<boolean>('testing.hasAnyResults', false);\n\texport const viewMode = new RawContextKey<TestExplorerViewMode>('testing.explorerViewMode', TestExplorerViewMode.List);\n\texport const viewSorting = new RawContextKey<TestExplorerViewSorting>('testing.explorerViewSorting', TestExplorerViewSorting.ByLocation);\n\texport const isRunning = new RawContextKey<boolean>('testing.isRunning', false);\n\texport const isInPeek = new RawContextKey<boolean>('testing.isInPeek', false);\n\texport const isPeekVisible = new RawContextKey<boolean>('testing.isPeekVisible', false);\n\n\texport const peekItemType = new RawContextKey<string | undefined>('peekItemType', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.peekItemType', 'Type of the item in the output peek view. Either a \"test\", \"message\", \"task\", or \"result\".'),\n\t});\n\texport const controllerId = new RawContextKey<string | undefined>('controllerId', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.controllerId', 'Controller ID of the current test item')\n\t});\n\texport const testItemExtId = new RawContextKey<string | undefined>('testId', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.testId', 'ID of the current test item, set when creating or opening menus on test items')\n\t});\n\texport const testItemHasUri = new RawContextKey<boolean>('testing.testItemHasUri', false, {\n\t\ttype: 'boolean',\n\t\tdescription: localize('testing.testItemHasUri', 'Boolean indicating whether the test item has a URI defined')\n\t});\n\texport const testItemIsHidden = new RawContextKey<boolean>('testing.testItemIsHidden', false, {\n\t\ttype: 'boolean',\n\t\tdescription: localize('testing.testItemIsHidden', 'Boolean indicating whether the test item is hidden')\n\t});\n\texport const testMessageContext = new RawContextKey<string>('testMessage', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.testMessage', 'Value set in `testMessage.contextValue`, available in editor/content and testing/message/context')\n\t});\n\texport const testResultOutdated = new RawContextKey<boolean>('testResultOutdated', undefined, {\n\t\ttype: 'boolean',\n\t\tdescription: localize('testing.testResultOutdated', 'Value available in editor/content and testing/message/context when the result is outdated')\n\t});\n\texport const testResultState = new RawContextKey<string>('testResultState', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.testResultState', 'Value available testing/item/result indicating the state of the item.')\n\t});\n\texport const testProfileContextGroup = new RawContextKey<string>('testing.profile.context.group', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.profile.context.group', 'Type of menu where the configure testing profile submenu exists. Either \"run\", \"debug\", or \"coverage\"')\n\t});\n}\n"],
  "mappings": "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",
  "names": ["TestingContextKeys"]
}
