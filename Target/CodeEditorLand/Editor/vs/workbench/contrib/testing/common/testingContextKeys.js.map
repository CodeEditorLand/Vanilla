{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../nls.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { TestExplorerViewMode, TestExplorerViewSorting } from \"./constants.js\";\nimport { TestRunProfileBitset } from \"./testTypes.js\";\n\nexport namespace TestingContextKeys {\n\texport const providerCount = new RawContextKey(\"testing.providerCount\", 0);\n\texport const canRefreshTests = new RawContextKey(\n\t\t\"testing.canRefresh\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.canRefresh\",\n\t\t\t\t\"Indicates whether any test controller has an attached refresh handler.\",\n\t\t\t),\n\t\t},\n\t);\n\texport const isRefreshingTests = new RawContextKey(\n\t\t\"testing.isRefreshing\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.isRefreshing\",\n\t\t\t\t\"Indicates whether any test controller is currently refreshing tests.\",\n\t\t\t),\n\t\t},\n\t);\n\texport const isContinuousModeOn = new RawContextKey(\n\t\t\"testing.isContinuousModeOn\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.isContinuousModeOn\",\n\t\t\t\t\"Indicates whether continuous test mode is on.\",\n\t\t\t),\n\t\t},\n\t);\n\texport const hasDebuggableTests = new RawContextKey(\n\t\t\"testing.hasDebuggableTests\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.hasDebuggableTests\",\n\t\t\t\t\"Indicates whether any test controller has registered a debug configuration\",\n\t\t\t),\n\t\t},\n\t);\n\texport const hasRunnableTests = new RawContextKey(\n\t\t\"testing.hasRunnableTests\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.hasRunnableTests\",\n\t\t\t\t\"Indicates whether any test controller has registered a run configuration\",\n\t\t\t),\n\t\t},\n\t);\n\texport const hasCoverableTests = new RawContextKey(\n\t\t\"testing.hasCoverableTests\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.hasCoverableTests\",\n\t\t\t\t\"Indicates whether any test controller has registered a coverage configuration\",\n\t\t\t),\n\t\t},\n\t);\n\texport const hasNonDefaultProfile = new RawContextKey(\n\t\t\"testing.hasNonDefaultProfile\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.hasNonDefaultConfig\",\n\t\t\t\t\"Indicates whether any test controller has registered a non-default configuration\",\n\t\t\t),\n\t\t},\n\t);\n\texport const hasConfigurableProfile = new RawContextKey(\n\t\t\"testing.hasConfigurableProfile\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.hasConfigurableConfig\",\n\t\t\t\t\"Indicates whether any test configuration can be configured\",\n\t\t\t),\n\t\t},\n\t);\n\texport const supportsContinuousRun = new RawContextKey(\n\t\t\"testing.supportsContinuousRun\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.supportsContinuousRun\",\n\t\t\t\t\"Indicates whether continous test running is supported\",\n\t\t\t),\n\t\t},\n\t);\n\texport const isParentRunningContinuously = new RawContextKey(\n\t\t\"testing.isParentRunningContinuously\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.isParentRunningContinuously\",\n\t\t\t\t\"Indicates whether the parent of a test is continuously running, set in the menu context of test items\",\n\t\t\t),\n\t\t},\n\t);\n\texport const activeEditorHasTests = new RawContextKey(\n\t\t\"testing.activeEditorHasTests\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.activeEditorHasTests\",\n\t\t\t\t\"Indicates whether any tests are present in the current editor\",\n\t\t\t),\n\t\t},\n\t);\n\texport const cursorInsideTestRange = new RawContextKey(\n\t\t\"testing.cursorInsideTestRange\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.cursorInsideTestRange\",\n\t\t\t\t\"Whether the cursor is currently inside a test range\",\n\t\t\t),\n\t\t},\n\t);\n\texport const isTestCoverageOpen = new RawContextKey(\n\t\t\"testing.isTestCoverageOpen\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.isTestCoverageOpen\",\n\t\t\t\t\"Indicates whether a test coverage report is open\",\n\t\t\t),\n\t\t},\n\t);\n\texport const hasPerTestCoverage = new RawContextKey(\n\t\t\"testing.hasPerTestCoverage\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.hasPerTestCoverage\",\n\t\t\t\t\"Indicates whether per-test coverage is available\",\n\t\t\t),\n\t\t},\n\t);\n\texport const isCoverageFilteredToTest = new RawContextKey(\n\t\t\"testing.isCoverageFilteredToTest\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.isCoverageFilteredToTest\",\n\t\t\t\t\"Indicates whether coverage has been filterd to a single test\",\n\t\t\t),\n\t\t},\n\t);\n\texport const coverageToolbarEnabled = new RawContextKey(\n\t\t\"testing.coverageToolbarEnabled\",\n\t\ttrue,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.coverageToolbarEnabled\",\n\t\t\t\t\"Indicates whether the coverage toolbar is enabled\",\n\t\t\t),\n\t\t},\n\t);\n\texport const inlineCoverageEnabled = new RawContextKey(\n\t\t\"testing.inlineCoverageEnabled\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.inlineCoverageEnabled\",\n\t\t\t\t\"Indicates whether inline coverage is shown\",\n\t\t\t),\n\t\t},\n\t);\n\texport const canGoToRelatedCode = new RawContextKey(\n\t\t\"testing.canGoToRelatedCode\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.canGoToRelatedCode\",\n\t\t\t\t\"Whether a controller implements a capability to find code related to a test\",\n\t\t\t),\n\t\t},\n\t);\n\texport const canGoToRelatedTest = new RawContextKey(\n\t\t\"testing.canGoToRelatedTest\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.canGoToRelatedTest\",\n\t\t\t\t\"Whether a controller implements a capability to find tests related to code\",\n\t\t\t),\n\t\t},\n\t);\n\texport const peekHasStack = new RawContextKey(\n\t\t\"testing.peekHasStack\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.peekHasStack\",\n\t\t\t\t\"Whether the message shown in a peek view has a stack trace\",\n\t\t\t),\n\t\t},\n\t);\n\n\texport const capabilityToContextKey: {\n\t\t[K in TestRunProfileBitset]: RawContextKey<boolean>;\n\t} = {\n\t\t[TestRunProfileBitset.Run]: hasRunnableTests,\n\t\t[TestRunProfileBitset.Coverage]: hasCoverableTests,\n\t\t[TestRunProfileBitset.Debug]: hasDebuggableTests,\n\t\t[TestRunProfileBitset.HasNonDefaultProfile]: hasNonDefaultProfile,\n\t\t[TestRunProfileBitset.HasConfigurable]: hasConfigurableProfile,\n\t\t[TestRunProfileBitset.SupportsContinuousRun]: supportsContinuousRun,\n\t};\n\n\texport const hasAnyResults = new RawContextKey<boolean>(\n\t\t\"testing.hasAnyResults\",\n\t\tfalse,\n\t);\n\texport const viewMode = new RawContextKey<TestExplorerViewMode>(\n\t\t\"testing.explorerViewMode\",\n\t\tTestExplorerViewMode.List,\n\t);\n\texport const viewSorting = new RawContextKey<TestExplorerViewSorting>(\n\t\t\"testing.explorerViewSorting\",\n\t\tTestExplorerViewSorting.ByLocation,\n\t);\n\texport const isRunning = new RawContextKey<boolean>(\n\t\t\"testing.isRunning\",\n\t\tfalse,\n\t);\n\texport const isInPeek = new RawContextKey<boolean>(\n\t\t\"testing.isInPeek\",\n\t\tfalse,\n\t);\n\texport const isPeekVisible = new RawContextKey<boolean>(\n\t\t\"testing.isPeekVisible\",\n\t\tfalse,\n\t);\n\n\texport const peekItemType = new RawContextKey<string | undefined>(\n\t\t\"peekItemType\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.peekItemType\",\n\t\t\t\t'Type of the item in the output peek view. Either a \"test\", \"message\", \"task\", or \"result\".',\n\t\t\t),\n\t\t},\n\t);\n\texport const controllerId = new RawContextKey<string | undefined>(\n\t\t\"controllerId\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.controllerId\",\n\t\t\t\t\"Controller ID of the current test item\",\n\t\t\t),\n\t\t},\n\t);\n\texport const testItemExtId = new RawContextKey<string | undefined>(\n\t\t\"testId\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.testId\",\n\t\t\t\t\"ID of the current test item, set when creating or opening menus on test items\",\n\t\t\t),\n\t\t},\n\t);\n\texport const testItemHasUri = new RawContextKey<boolean>(\n\t\t\"testing.testItemHasUri\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.testItemHasUri\",\n\t\t\t\t\"Boolean indicating whether the test item has a URI defined\",\n\t\t\t),\n\t\t},\n\t);\n\texport const testItemIsHidden = new RawContextKey<boolean>(\n\t\t\"testing.testItemIsHidden\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.testItemIsHidden\",\n\t\t\t\t\"Boolean indicating whether the test item is hidden\",\n\t\t\t),\n\t\t},\n\t);\n\texport const testMessageContext = new RawContextKey<string>(\n\t\t\"testMessage\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.testMessage\",\n\t\t\t\t\"Value set in `testMessage.contextValue`, available in editor/content and testing/message/context\",\n\t\t\t),\n\t\t},\n\t);\n\texport const testResultOutdated = new RawContextKey<boolean>(\n\t\t\"testResultOutdated\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.testResultOutdated\",\n\t\t\t\t\"Value available in editor/content and testing/message/context when the result is outdated\",\n\t\t\t),\n\t\t},\n\t);\n\texport const testResultState = new RawContextKey<string>(\n\t\t\"testResultState\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.testResultState\",\n\t\t\t\t\"Value available testing/item/result indicating the state of the item.\",\n\t\t\t),\n\t\t},\n\t);\n\texport const testProfileContextGroup = new RawContextKey<string>(\n\t\t\"testing.profile.context.group\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.profile.context.group\",\n\t\t\t\t'Type of menu where the configure testing profile submenu exists. Either \"run\", \"debug\", or \"coverage\"',\n\t\t\t),\n\t\t},\n\t);\n}\n"],
  "mappings": "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",
  "names": ["TestingContextKeys"]
}
