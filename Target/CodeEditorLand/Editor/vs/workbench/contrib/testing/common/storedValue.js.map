{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/storedValue.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\tIStorageService,\n\ttype IStorageValueChangeEvent,\n\ttype StorageScope,\n\ttype StorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\n\nexport interface IStoredValueSerialization<T> {\n\tdeserialize(data: string): T;\n\tserialize(data: T): string;\n}\n\nconst defaultSerialization: IStoredValueSerialization<any> = {\n\tdeserialize: (d) => JSON.parse(d),\n\tserialize: (d) => JSON.stringify(d),\n};\n\ninterface IStoredValueOptions<T> {\n\tkey: string;\n\tscope: StorageScope;\n\ttarget: StorageTarget;\n\tserialization?: IStoredValueSerialization<T>;\n}\n\n/**\n * todo@connor4312: is this worthy to be in common?\n */\nexport class StoredValue<T> extends Disposable {\n\tprivate readonly serialization: IStoredValueSerialization<T>;\n\tprivate readonly key: string;\n\tprivate readonly scope: StorageScope;\n\tprivate readonly target: StorageTarget;\n\tprivate value?: T;\n\n\t/**\n\t * Emitted whenever the value is updated or deleted.\n\t */\n\tpublic readonly onDidChange: Event<IStorageValueChangeEvent>;\n\n\tconstructor(\n\t\toptions: IStoredValueOptions<T>,\n\t\t@IStorageService private readonly storage: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tthis.key = options.key;\n\t\tthis.scope = options.scope;\n\t\tthis.target = options.target;\n\t\tthis.serialization = options.serialization ?? defaultSerialization;\n\t\tthis.onDidChange = this.storage.onDidChangeValue(this.scope, this.key, this._register(new DisposableStore()));\n\t}\n\n\t/**\n\t * Reads the value, returning the undefined if it's not set.\n\t */\n\tpublic get(): T | undefined;\n\n\t/**\n\t * Reads the value, returning the default value if it's not set.\n\t */\n\tpublic get(defaultValue: T): T;\n\n\tpublic get(defaultValue?: T): T | undefined {\n\t\tif (this.value === undefined) {\n\t\t\tconst value = this.storage.get(this.key, this.scope);\n\t\t\tthis.value =\n\t\t\t\tvalue === undefined\n\t\t\t\t\t? defaultValue\n\t\t\t\t\t: this.serialization.deserialize(value);\n\t\t}\n\n\t\treturn this.value;\n\t}\n\n\t/**\n\t * Persists changes to the value.\n\t * @param value\n\t */\n\tpublic store(value: T) {\n\t\tthis.value = value;\n\t\tthis.storage.store(\n\t\t\tthis.key,\n\t\t\tthis.serialization.serialize(value),\n\t\t\tthis.scope,\n\t\t\tthis.target,\n\t\t);\n\t}\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t */\n\tpublic delete() {\n\t\tthis.storage.remove(this.key, this.scope);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,OAIM;AAOP,MAAM,uBAAuD;AAAA,EAC5D,aAAa,wBAAC,MAAM,KAAK,MAAM,CAAC,GAAnB;AAAA,EACb,WAAW,wBAAC,MAAM,KAAK,UAAU,CAAC,GAAvB;AACZ;AAYO,IAAM,cAAN,cAA6B,WAAW;AAAA,EAY9C,YACC,SACkC,SACjC;AACD,UAAM;AAF4B;AAIlC,SAAK,MAAM,QAAQ;AACnB,SAAK,QAAQ,QAAQ;AACrB,SAAK,SAAS,QAAQ;AACtB,SAAK,gBAAgB,QAAQ,iBAAiB;AAC9C,SAAK,cAAc,KAAK,QAAQ,iBAAiB,KAAK,OAAO,KAAK,KAAK,KAAK,UAAU,IAAI,gBAAgB,CAAC,CAAC;AAAA,EAC7G;AAAA,EA5DD,OAqC+C;AAAA;AAAA;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ;AAAA,EAyBT,IAAI,cAAiC;AAC3C,QAAI,KAAK,UAAU,QAAW;AAC7B,YAAM,QAAQ,KAAK,QAAQ,IAAI,KAAK,KAAK,KAAK,KAAK;AACnD,WAAK,QACJ,UAAU,SACP,eACA,KAAK,cAAc,YAAY,KAAK;AAAA,IACzC;AAEA,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,MAAM,OAAU;AACtB,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA,MACZ,KAAK;AAAA,MACL,KAAK,cAAc,UAAU,KAAK;AAAA,MAClC,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKO,SAAS;AACf,SAAK,QAAQ,OAAO,KAAK,KAAK,KAAK,KAAK;AAAA,EACzC;AACD;AAnEa,cAAN;AAAA,EAcJ;AAAA,GAdU;",
  "names": []
}
