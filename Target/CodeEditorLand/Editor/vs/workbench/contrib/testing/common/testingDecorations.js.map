{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IAction } from \"../../../../base/common/actions.js\";\nimport { binarySearch } from \"../../../../base/common/arrays.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { Position } from \"../../../../editor/common/core/position.js\";\nimport type { IModelDeltaDecoration } from \"../../../../editor/common/model.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ITestMessage } from \"./testTypes.js\";\n\nexport interface ITestingDecorationsService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Fires when something happened to change decorations in an editor.\n\t * Interested consumers should call {@link syncDecorations} to update them.\n\t */\n\tonDidChange: Event<void>;\n\n\t/**\n\t * Signals the code underlying a test message has changed, and it should\n\t * no longer be decorated in the source.\n\t */\n\tinvalidateResultMessage(message: ITestMessage): void;\n\n\t/**\n\t * Ensures decorations in the given document URI are up to date,\n\t * and returns them.\n\t */\n\tsyncDecorations(resource: URI): Iterable<ITestDecoration> & {\n\t\treadonly size: number;\n\t\tgetById(decorationId: string): ITestDecoration | undefined;\n\t};\n\n\t/**\n\t * Gets the range where a test ID is displayed, in the given URI.\n\t * Returns undefined if there's no such decoration.\n\t */\n\tgetDecoratedTestPosition(\n\t\tresource: URI,\n\t\ttestId: string,\n\t): Position | undefined;\n\n\t/**\n\t * Sets that alternative actions are displayed on the model.\n\t */\n\tupdateDecorationsAlternateAction(resource: URI, isAlt: boolean): void;\n}\n\nexport interface ITestDecoration {\n\t/**\n\t * ID of the decoration after being added to the editor, set after the\n\t * decoration is applied.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * Original decoration line number.\n\t */\n\treadonly line: number;\n\n\t/**\n\t * Editor decoration instance.\n\t */\n\treadonly editorDecoration: IModelDeltaDecoration;\n\n\tgetContextMenuActions(): { object: IAction[]; dispose(): void };\n}\n\nexport class TestDecorations<\n\tT extends { id: string; line: number } = ITestDecoration,\n> {\n\tpublic value: T[] = [];\n\t/**\n\t * Adds a new value to the decorations.\n\t */\n\tpublic push(value: T) {\n\t\tconst searchIndex = binarySearch(\n\t\t\tthis.value,\n\t\t\tvalue,\n\t\t\t(a, b) => a.line - b.line,\n\t\t);\n\t\tthis.value.splice(\n\t\t\tsearchIndex < 0 ? ~searchIndex : searchIndex,\n\t\t\t0,\n\t\t\tvalue,\n\t\t);\n\t}\n\n\t/**\n\t * Gets decorations on each line.\n\t */\n\tpublic *lines(): Iterable<[number, T[]]> {\n\t\tif (!this.value.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet startIndex = 0;\n\t\tlet startLine = this.value[0].line;\n\t\tfor (let i = 1; i < this.value.length; i++) {\n\t\t\tconst v = this.value[i];\n\t\t\tif (v.line !== startLine) {\n\t\t\t\tyield [startLine, this.value.slice(startIndex, i)];\n\t\t\t\tstartLine = v.line;\n\t\t\t\tstartIndex = i;\n\t\t\t}\n\t\t}\n\n\t\tyield [startLine, this.value.slice(startIndex)];\n\t}\n}\n\nexport const ITestingDecorationsService =\n\tcreateDecorator<ITestingDecorationsService>(\"testingDecorationService\");\n"],
  "mappings": ";;AAMA,SAAS,oBAAoB;AAK7B,SAAS,uBAAuB;AA8DzB,MAAM,gBAEX;AAAA,EA3EF,OA2EE;AAAA;AAAA;AAAA,EACM,QAAa,CAAC;AAAA;AAAA;AAAA;AAAA,EAId,KAAK,OAAU;AACrB,UAAM,cAAc;AAAA,MACnB,KAAK;AAAA,MACL;AAAA,MACA,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE;AAAA,IACtB;AACA,SAAK,MAAM;AAAA,MACV,cAAc,IAAI,CAAC,cAAc;AAAA,MACjC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,CAAQ,QAAiC;AACxC,QAAI,CAAC,KAAK,MAAM,QAAQ;AACvB;AAAA,IACD;AAEA,QAAI,aAAa;AACjB,QAAI,YAAY,KAAK,MAAM,CAAC,EAAE;AAC9B,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC3C,YAAM,IAAI,KAAK,MAAM,CAAC;AACtB,UAAI,EAAE,SAAS,WAAW;AACzB,cAAM,CAAC,WAAW,KAAK,MAAM,MAAM,YAAY,CAAC,CAAC;AACjD,oBAAY,EAAE;AACd,qBAAa;AAAA,MACd;AAAA,IACD;AAEA,UAAM,CAAC,WAAW,KAAK,MAAM,MAAM,UAAU,CAAC;AAAA,EAC/C;AACD;AAEO,MAAM,6BACZ,gBAA4C,0BAA0B;",
  "names": []
}
