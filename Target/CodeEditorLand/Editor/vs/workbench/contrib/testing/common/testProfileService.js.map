{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testProfileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { StoredValue } from './storedValue.js';\nimport { TestId } from './testId.js';\nimport { IMainThreadTestController } from './testService.js';\nimport { ITestItem, ITestRunProfile, InternalTestItem, TestRunProfileBitset, testRunProfileBitsetList } from './testTypes.js';\nimport { TestingContextKeys } from './testingContextKeys.js';\n\nexport const ITestProfileService = createDecorator<ITestProfileService>('testProfileService');\n\nexport interface ITestProfileService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Fired when any profile changes.\n\t */\n\treadonly onDidChange: Event<void>;\n\n\t/**\n\t * Publishes a new test profile.\n\t */\n\taddProfile(controller: IMainThreadTestController, profile: ITestRunProfile): void;\n\n\t/**\n\t * Updates an existing test run profile\n\t */\n\tupdateProfile(controllerId: string, profileId: number, update: Partial<ITestRunProfile>): void;\n\n\t/**\n\t * Removes a profile. If profileId is not given, all profiles\n\t * for the given controller will be removed.\n\t */\n\tremoveProfile(controllerId: string, profileId?: number): void;\n\n\t/**\n\t * Gets capabilities for the given test, indicating whether\n\t * there's any usable profiles available for those groups.\n\t * @returns a bitset to use with {@link TestRunProfileBitset}\n\t */\n\tcapabilitiesForTest(test: ITestItem): number;\n\n\t/**\n\t * Configures a test profile.\n\t */\n\tconfigure(controllerId: string, profileId: number): void;\n\n\t/**\n\t * Gets all registered controllers, grouping by controller.\n\t */\n\tall(): Iterable<Readonly<{\n\t\tcontroller: IMainThreadTestController;\n\t\tprofiles: ITestRunProfile[];\n\t}>>;\n\n\t/**\n\t * Gets the default profiles to be run for a given run group.\n\t */\n\tgetGroupDefaultProfiles(group: TestRunProfileBitset, controllerId?: string): ITestRunProfile[];\n\n\t/**\n\t * Sets the default profiles to be run for a given run group.\n\t */\n\tsetGroupDefaultProfiles(group: TestRunProfileBitset, profiles: ITestRunProfile[]): void;\n\n\t/**\n\t * Gets the profiles for a controller, in priority order.\n\t */\n\tgetControllerProfiles(controllerId: string): ITestRunProfile[];\n}\n\n/**\n * Gets whether the given profile can be used to run the test.\n */\nexport const canUseProfileWithTest = (profile: ITestRunProfile, test: InternalTestItem) =>\n\tprofile.controllerId === test.controllerId && (TestId.isRoot(test.item.extId) || !profile.tag || test.item.tags.includes(profile.tag));\n\nconst sorter = (a: ITestRunProfile, b: ITestRunProfile) => {\n\tif (a.isDefault !== b.isDefault) {\n\t\treturn a.isDefault ? -1 : 1;\n\t}\n\n\treturn a.label.localeCompare(b.label);\n};\n\ninterface IExtendedTestRunProfile extends ITestRunProfile {\n\twasInitiallyDefault: boolean;\n}\n\n/**\n * Given a capabilities bitset, returns a map of context keys representing\n * them.\n */\nexport const capabilityContextKeys = (capabilities: number): [key: string, value: boolean][] => [\n\t[TestingContextKeys.hasRunnableTests.key, (capabilities & TestRunProfileBitset.Run) !== 0],\n\t[TestingContextKeys.hasDebuggableTests.key, (capabilities & TestRunProfileBitset.Debug) !== 0],\n\t[TestingContextKeys.hasCoverableTests.key, (capabilities & TestRunProfileBitset.Coverage) !== 0],\n];\n\ntype DefaultsMap = { [controllerId: string]: { [profileId: number]: /* isDefault */ boolean } };\n\nexport class TestProfileService extends Disposable implements ITestProfileService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly userDefaults: StoredValue<DefaultsMap>;\n\tprivate readonly capabilitiesContexts: { [K in TestRunProfileBitset]: IContextKey<boolean> };\n\tprivate readonly changeEmitter = this._register(new Emitter<void>());\n\tprivate readonly controllerProfiles = new Map</* controller ID */string, {\n\t\tprofiles: IExtendedTestRunProfile[];\n\t\tcontroller: IMainThreadTestController;\n\t}>();\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tstorageService.remove('testingPreferredProfiles', StorageScope.WORKSPACE); // cleanup old format\n\t\tthis.userDefaults = this._register(new StoredValue({\n\t\t\tkey: 'testingPreferredProfiles2',\n\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\ttarget: StorageTarget.MACHINE,\n\t\t}, storageService));\n\n\t\tthis.capabilitiesContexts = {\n\t\t\t[TestRunProfileBitset.Run]: TestingContextKeys.hasRunnableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.Debug]: TestingContextKeys.hasDebuggableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.Coverage]: TestingContextKeys.hasCoverableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.HasNonDefaultProfile]: TestingContextKeys.hasNonDefaultProfile.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.HasConfigurable]: TestingContextKeys.hasConfigurableProfile.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.SupportsContinuousRun]: TestingContextKeys.supportsContinuousRun.bindTo(contextKeyService),\n\t\t};\n\n\t\tthis.refreshContextKeys();\n\t}\n\n\t/** @inheritdoc */\n\tpublic addProfile(controller: IMainThreadTestController, profile: ITestRunProfile): void {\n\t\tconst previousExplicitDefaultValue = this.userDefaults.get()?.[controller.id]?.[profile.profileId];\n\t\tconst extended: IExtendedTestRunProfile = {\n\t\t\t...profile,\n\t\t\tisDefault: previousExplicitDefaultValue ?? profile.isDefault,\n\t\t\twasInitiallyDefault: profile.isDefault,\n\t\t};\n\n\t\tlet record = this.controllerProfiles.get(profile.controllerId);\n\t\tif (record) {\n\t\t\trecord.profiles.push(extended);\n\t\t\trecord.profiles.sort(sorter);\n\t\t} else {\n\t\t\trecord = {\n\t\t\t\tprofiles: [extended],\n\t\t\t\tcontroller,\n\t\t\t};\n\t\t\tthis.controllerProfiles.set(profile.controllerId, record);\n\t\t}\n\n\t\tthis.refreshContextKeys();\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic updateProfile(controllerId: string, profileId: number, update: Partial<ITestRunProfile>): void {\n\t\tconst ctrl = this.controllerProfiles.get(controllerId);\n\t\tif (!ctrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst profile = ctrl.profiles.find(c => c.controllerId === controllerId && c.profileId === profileId);\n\t\tif (!profile) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.assign(profile, update);\n\t\tctrl.profiles.sort(sorter);\n\n\t\t// store updates is isDefault as if the user changed it (which they might\n\t\t// have through some extension-contributed UI)\n\t\tif (update.isDefault !== undefined) {\n\t\t\tconst map = deepClone(this.userDefaults.get({}));\n\t\t\tsetIsDefault(map, profile, update.isDefault);\n\t\t\tthis.userDefaults.store(map);\n\t\t}\n\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic configure(controllerId: string, profileId: number) {\n\t\tthis.controllerProfiles.get(controllerId)?.controller.configureRunProfile(profileId);\n\t}\n\n\t/** @inheritdoc */\n\tpublic removeProfile(controllerId: string, profileId?: number): void {\n\t\tconst ctrl = this.controllerProfiles.get(controllerId);\n\t\tif (!ctrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!profileId) {\n\t\t\tthis.controllerProfiles.delete(controllerId);\n\t\t\tthis.changeEmitter.fire();\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = ctrl.profiles.findIndex(c => c.profileId === profileId);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tctrl.profiles.splice(index, 1);\n\t\tthis.refreshContextKeys();\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic capabilitiesForTest(test: ITestItem) {\n\t\tconst ctrl = this.controllerProfiles.get(TestId.root(test.extId));\n\t\tif (!ctrl) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet capabilities = 0;\n\t\tfor (const profile of ctrl.profiles) {\n\t\t\tif (!profile.tag || test.tags.includes(profile.tag)) {\n\t\t\t\tcapabilities |= capabilities & profile.group ? TestRunProfileBitset.HasNonDefaultProfile : profile.group;\n\t\t\t}\n\t\t}\n\n\t\treturn capabilities;\n\t}\n\n\t/** @inheritdoc */\n\tpublic all() {\n\t\treturn this.controllerProfiles.values();\n\t}\n\n\t/** @inheritdoc */\n\tpublic getControllerProfiles(profileId: string) {\n\t\treturn this.controllerProfiles.get(profileId)?.profiles ?? [];\n\t}\n\n\t/** @inheritdoc */\n\tpublic getGroupDefaultProfiles(group: TestRunProfileBitset, controllerId?: string) {\n\t\tconst allProfiles = controllerId\n\t\t\t? (this.controllerProfiles.get(controllerId)?.profiles || [])\n\t\t\t: [...Iterable.flatMap(this.controllerProfiles.values(), c => c.profiles)];\n\t\tconst defaults = allProfiles.filter(c => c.group === group && c.isDefault);\n\n\t\t// have *some* default profile to run if none are set otherwise\n\t\tif (defaults.length === 0) {\n\t\t\tconst first = allProfiles.find(p => p.group === group);\n\t\t\tif (first) {\n\t\t\t\tdefaults.push(first);\n\t\t\t}\n\t\t}\n\n\t\treturn defaults;\n\t}\n\n\t/** @inheritdoc */\n\tpublic setGroupDefaultProfiles(group: TestRunProfileBitset, profiles: ITestRunProfile[]) {\n\t\tconst next: DefaultsMap = {};\n\t\tfor (const ctrl of this.controllerProfiles.values()) {\n\t\t\tnext[ctrl.controller.id] = {};\n\t\t\tfor (const profile of ctrl.profiles) {\n\t\t\t\tif (profile.group !== group) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsetIsDefault(next, profile, profiles.some(p => p.profileId === profile.profileId));\n\t\t\t}\n\n\t\t\t// When switching a profile, if the controller has a same-named profile in\n\t\t\t// other groups, update those to match the enablement state as well.\n\t\t\tfor (const profile of ctrl.profiles) {\n\t\t\t\tif (profile.group === group) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst matching = ctrl.profiles.find(p => p.group === group && p.label === profile.label);\n\t\t\t\tif (matching) {\n\t\t\t\t\tsetIsDefault(next, profile, matching.isDefault);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctrl.profiles.sort(sorter);\n\t\t}\n\n\t\tthis.userDefaults.store(next);\n\t\tthis.changeEmitter.fire();\n\t}\n\n\tprivate refreshContextKeys() {\n\t\tlet allCapabilities = 0;\n\t\tfor (const { profiles } of this.controllerProfiles.values()) {\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tallCapabilities |= allCapabilities & profile.group ? TestRunProfileBitset.HasNonDefaultProfile : profile.group;\n\t\t\t\tallCapabilities |= profile.supportsContinuousRun ? TestRunProfileBitset.SupportsContinuousRun : 0;\n\t\t\t}\n\t\t}\n\n\t\tfor (const group of testRunProfileBitsetList) {\n\t\t\tthis.capabilitiesContexts[group].set((allCapabilities & group) !== 0);\n\t\t}\n\t}\n}\n\nconst setIsDefault = (map: DefaultsMap, profile: IExtendedTestRunProfile, isDefault: boolean) => {\n\tprofile.isDefault = isDefault;\n\tmap[profile.controllerId] ??= {};\n\tif (profile.isDefault !== profile.wasInitiallyDefault) {\n\t\tmap[profile.controllerId][profile.profileId] = profile.isDefault;\n\t} else {\n\t\tdelete map[profile.controllerId][profile.profileId];\n\t}\n};\n"],
  "mappings": "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",
  "names": []
}
