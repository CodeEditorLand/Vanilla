{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testProfileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { deepClone } from \"../../../../base/common/objects.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { StoredValue } from \"./storedValue.js\";\nimport { TestId } from \"./testId.js\";\nimport type { IMainThreadTestController } from \"./testService.js\";\nimport {\n\ttype ITestItem,\n\ttype ITestRunProfile,\n\ttype InternalTestItem,\n\tTestRunProfileBitset,\n\ttestRunProfileBitsetList,\n} from \"./testTypes.js\";\nimport { TestingContextKeys } from \"./testingContextKeys.js\";\n\nexport const ITestProfileService =\n\tcreateDecorator<ITestProfileService>(\"testProfileService\");\n\nexport interface ITestProfileService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Fired when any profile changes.\n\t */\n\treadonly onDidChange: Event<void>;\n\n\t/**\n\t * Publishes a new test profile.\n\t */\n\taddProfile(\n\t\tcontroller: IMainThreadTestController,\n\t\tprofile: ITestRunProfile,\n\t): void;\n\n\t/**\n\t * Updates an existing test run profile\n\t */\n\tupdateProfile(\n\t\tcontrollerId: string,\n\t\tprofileId: number,\n\t\tupdate: Partial<ITestRunProfile>,\n\t): void;\n\n\t/**\n\t * Removes a profile. If profileId is not given, all profiles\n\t * for the given controller will be removed.\n\t */\n\tremoveProfile(controllerId: string, profileId?: number): void;\n\n\t/**\n\t * Gets capabilities for the given test, indicating whether\n\t * there's any usable profiles available for those groups.\n\t * @returns a bitset to use with {@link TestRunProfileBitset}\n\t */\n\tcapabilitiesForTest(test: ITestItem): number;\n\n\t/**\n\t * Configures a test profile.\n\t */\n\tconfigure(controllerId: string, profileId: number): void;\n\n\t/**\n\t * Gets all registered controllers, grouping by controller.\n\t */\n\tall(): Iterable<\n\t\tReadonly<{\n\t\t\tcontroller: IMainThreadTestController;\n\t\t\tprofiles: ITestRunProfile[];\n\t\t}>\n\t>;\n\n\t/**\n\t * Gets the default profiles to be run for a given run group.\n\t */\n\tgetGroupDefaultProfiles(\n\t\tgroup: TestRunProfileBitset,\n\t\tcontrollerId?: string,\n\t): ITestRunProfile[];\n\n\t/**\n\t * Sets the default profiles to be run for a given run group.\n\t */\n\tsetGroupDefaultProfiles(\n\t\tgroup: TestRunProfileBitset,\n\t\tprofiles: ITestRunProfile[],\n\t): void;\n\n\t/**\n\t * Gets the profiles for a controller, in priority order.\n\t */\n\tgetControllerProfiles(controllerId: string): ITestRunProfile[];\n}\n\n/**\n * Gets whether the given profile can be used to run the test.\n */\nexport const canUseProfileWithTest = (\n\tprofile: ITestRunProfile,\n\ttest: InternalTestItem,\n) =>\n\tprofile.controllerId === test.controllerId &&\n\t(TestId.isRoot(test.item.extId) ||\n\t\t!profile.tag ||\n\t\ttest.item.tags.includes(profile.tag));\n\nconst sorter = (a: ITestRunProfile, b: ITestRunProfile) => {\n\tif (a.isDefault !== b.isDefault) {\n\t\treturn a.isDefault ? -1 : 1;\n\t}\n\n\treturn a.label.localeCompare(b.label);\n};\n\ninterface IExtendedTestRunProfile extends ITestRunProfile {\n\twasInitiallyDefault: boolean;\n}\n\n/**\n * Given a capabilities bitset, returns a map of context keys representing\n * them.\n */\nexport const capabilityContextKeys = (\n\tcapabilities: number,\n): [key: string, value: boolean][] => [\n\t[\n\t\tTestingContextKeys.hasRunnableTests.key,\n\t\t(capabilities & TestRunProfileBitset.Run) !== 0,\n\t],\n\t[\n\t\tTestingContextKeys.hasDebuggableTests.key,\n\t\t(capabilities & TestRunProfileBitset.Debug) !== 0,\n\t],\n\t[\n\t\tTestingContextKeys.hasCoverableTests.key,\n\t\t(capabilities & TestRunProfileBitset.Coverage) !== 0,\n\t],\n];\n\ntype DefaultsMap = {\n\t[controllerId: string]: { [profileId: number]: /* isDefault */ boolean };\n};\n\nexport class TestProfileService\n\textends Disposable\n\timplements ITestProfileService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly userDefaults: StoredValue<DefaultsMap>;\n\tprivate readonly capabilitiesContexts: {\n\t\t[K in TestRunProfileBitset]: IContextKey<boolean>;\n\t};\n\tprivate readonly changeEmitter = this._register(new Emitter<void>());\n\tprivate readonly controllerProfiles = new Map<\n\t\t/* controller ID */ string,\n\t\t{\n\t\t\tprofiles: IExtendedTestRunProfile[];\n\t\t\tcontroller: IMainThreadTestController;\n\t\t}\n\t>();\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tstorageService.remove(\n\t\t\t\"testingPreferredProfiles\",\n\t\t\tStorageScope.WORKSPACE,\n\t\t); // cleanup old format\n\t\tthis.userDefaults = this._register(\n\t\t\tnew StoredValue(\n\t\t\t\t{\n\t\t\t\t\tkey: \"testingPreferredProfiles2\",\n\t\t\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\t\t\ttarget: StorageTarget.MACHINE,\n\t\t\t\t},\n\t\t\t\tstorageService,\n\t\t\t),\n\t\t);\n\n\t\tthis.capabilitiesContexts = {\n\t\t\t[TestRunProfileBitset.Run]:\n\t\t\t\tTestingContextKeys.hasRunnableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.Debug]:\n\t\t\t\tTestingContextKeys.hasDebuggableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.Coverage]:\n\t\t\t\tTestingContextKeys.hasCoverableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.HasNonDefaultProfile]:\n\t\t\t\tTestingContextKeys.hasNonDefaultProfile.bindTo(\n\t\t\t\t\tcontextKeyService,\n\t\t\t\t),\n\t\t\t[TestRunProfileBitset.HasConfigurable]:\n\t\t\t\tTestingContextKeys.hasConfigurableProfile.bindTo(\n\t\t\t\t\tcontextKeyService,\n\t\t\t\t),\n\t\t\t[TestRunProfileBitset.SupportsContinuousRun]:\n\t\t\t\tTestingContextKeys.supportsContinuousRun.bindTo(\n\t\t\t\t\tcontextKeyService,\n\t\t\t\t),\n\t\t};\n\n\t\tthis.refreshContextKeys();\n\t}\n\n\t/** @inheritdoc */\n\tpublic addProfile(\n\t\tcontroller: IMainThreadTestController,\n\t\tprofile: ITestRunProfile,\n\t): void {\n\t\tconst previousExplicitDefaultValue =\n\t\t\tthis.userDefaults.get()?.[controller.id]?.[profile.profileId];\n\t\tconst extended: IExtendedTestRunProfile = {\n\t\t\t...profile,\n\t\t\tisDefault: previousExplicitDefaultValue ?? profile.isDefault,\n\t\t\twasInitiallyDefault: profile.isDefault,\n\t\t};\n\n\t\tlet record = this.controllerProfiles.get(profile.controllerId);\n\t\tif (record) {\n\t\t\trecord.profiles.push(extended);\n\t\t\trecord.profiles.sort(sorter);\n\t\t} else {\n\t\t\trecord = {\n\t\t\t\tprofiles: [extended],\n\t\t\t\tcontroller,\n\t\t\t};\n\t\t\tthis.controllerProfiles.set(profile.controllerId, record);\n\t\t}\n\n\t\tthis.refreshContextKeys();\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic updateProfile(\n\t\tcontrollerId: string,\n\t\tprofileId: number,\n\t\tupdate: Partial<ITestRunProfile>,\n\t): void {\n\t\tconst ctrl = this.controllerProfiles.get(controllerId);\n\t\tif (!ctrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst profile = ctrl.profiles.find(\n\t\t\t(c) => c.controllerId === controllerId && c.profileId === profileId,\n\t\t);\n\t\tif (!profile) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.assign(profile, update);\n\t\tctrl.profiles.sort(sorter);\n\n\t\t// store updates is isDefault as if the user changed it (which they might\n\t\t// have through some extension-contributed UI)\n\t\tif (update.isDefault !== undefined) {\n\t\t\tconst map = deepClone(this.userDefaults.get({}));\n\t\t\tsetIsDefault(map, profile, update.isDefault);\n\t\t\tthis.userDefaults.store(map);\n\t\t}\n\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic configure(controllerId: string, profileId: number) {\n\t\tthis.controllerProfiles\n\t\t\t.get(controllerId)\n\t\t\t?.controller.configureRunProfile(profileId);\n\t}\n\n\t/** @inheritdoc */\n\tpublic removeProfile(controllerId: string, profileId?: number): void {\n\t\tconst ctrl = this.controllerProfiles.get(controllerId);\n\t\tif (!ctrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!profileId) {\n\t\t\tthis.controllerProfiles.delete(controllerId);\n\t\t\tthis.changeEmitter.fire();\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = ctrl.profiles.findIndex((c) => c.profileId === profileId);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tctrl.profiles.splice(index, 1);\n\t\tthis.refreshContextKeys();\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic capabilitiesForTest(test: ITestItem) {\n\t\tconst ctrl = this.controllerProfiles.get(TestId.root(test.extId));\n\t\tif (!ctrl) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet capabilities = 0;\n\t\tfor (const profile of ctrl.profiles) {\n\t\t\tif (!profile.tag || test.tags.includes(profile.tag)) {\n\t\t\t\tcapabilities |=\n\t\t\t\t\tcapabilities & profile.group\n\t\t\t\t\t\t? TestRunProfileBitset.HasNonDefaultProfile\n\t\t\t\t\t\t: profile.group;\n\t\t\t}\n\t\t}\n\n\t\treturn capabilities;\n\t}\n\n\t/** @inheritdoc */\n\tpublic all() {\n\t\treturn this.controllerProfiles.values();\n\t}\n\n\t/** @inheritdoc */\n\tpublic getControllerProfiles(profileId: string) {\n\t\treturn this.controllerProfiles.get(profileId)?.profiles ?? [];\n\t}\n\n\t/** @inheritdoc */\n\tpublic getGroupDefaultProfiles(\n\t\tgroup: TestRunProfileBitset,\n\t\tcontrollerId?: string,\n\t) {\n\t\tconst allProfiles = controllerId\n\t\t\t? this.controllerProfiles.get(controllerId)?.profiles || []\n\t\t\t: [\n\t\t\t\t\t...Iterable.flatMap(\n\t\t\t\t\t\tthis.controllerProfiles.values(),\n\t\t\t\t\t\t(c) => c.profiles,\n\t\t\t\t\t),\n\t\t\t\t];\n\t\tconst defaults = allProfiles.filter(\n\t\t\t(c) => c.group === group && c.isDefault,\n\t\t);\n\n\t\t// have *some* default profile to run if none are set otherwise\n\t\tif (defaults.length === 0) {\n\t\t\tconst first = allProfiles.find((p) => p.group === group);\n\t\t\tif (first) {\n\t\t\t\tdefaults.push(first);\n\t\t\t}\n\t\t}\n\n\t\treturn defaults;\n\t}\n\n\t/** @inheritdoc */\n\tpublic setGroupDefaultProfiles(\n\t\tgroup: TestRunProfileBitset,\n\t\tprofiles: ITestRunProfile[],\n\t) {\n\t\tconst next: DefaultsMap = {};\n\t\tfor (const ctrl of this.controllerProfiles.values()) {\n\t\t\tnext[ctrl.controller.id] = {};\n\t\t\tfor (const profile of ctrl.profiles) {\n\t\t\t\tif (profile.group !== group) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsetIsDefault(\n\t\t\t\t\tnext,\n\t\t\t\t\tprofile,\n\t\t\t\t\tprofiles.some((p) => p.profileId === profile.profileId),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// When switching a profile, if the controller has a same-named profile in\n\t\t\t// other groups, update those to match the enablement state as well.\n\t\t\tfor (const profile of ctrl.profiles) {\n\t\t\t\tif (profile.group === group) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst matching = ctrl.profiles.find(\n\t\t\t\t\t(p) => p.group === group && p.label === profile.label,\n\t\t\t\t);\n\t\t\t\tif (matching) {\n\t\t\t\t\tsetIsDefault(next, profile, matching.isDefault);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctrl.profiles.sort(sorter);\n\t\t}\n\n\t\tthis.userDefaults.store(next);\n\t\tthis.changeEmitter.fire();\n\t}\n\n\tprivate refreshContextKeys() {\n\t\tlet allCapabilities = 0;\n\t\tfor (const { profiles } of this.controllerProfiles.values()) {\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tallCapabilities |=\n\t\t\t\t\tallCapabilities & profile.group\n\t\t\t\t\t\t? TestRunProfileBitset.HasNonDefaultProfile\n\t\t\t\t\t\t: profile.group;\n\t\t\t\tallCapabilities |= profile.supportsContinuousRun\n\t\t\t\t\t? TestRunProfileBitset.SupportsContinuousRun\n\t\t\t\t\t: 0;\n\t\t\t}\n\t\t}\n\n\t\tfor (const group of testRunProfileBitsetList) {\n\t\t\tthis.capabilitiesContexts[group].set(\n\t\t\t\t(allCapabilities & group) !== 0,\n\t\t\t);\n\t\t}\n\t}\n}\n\nconst setIsDefault = (\n\tmap: DefaultsMap,\n\tprofile: IExtendedTestRunProfile,\n\tisDefault: boolean,\n) => {\n\tprofile.isDefault = isDefault;\n\tmap[profile.controllerId] ??= {};\n\tif (profile.isDefault !== profile.wasInitiallyDefault) {\n\t\tmap[profile.controllerId][profile.profileId] = profile.isDefault;\n\t} else {\n\t\tdelete map[profile.controllerId][profile.profileId];\n\t}\n};\n"],
  "mappings": "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",
  "names": []
}
