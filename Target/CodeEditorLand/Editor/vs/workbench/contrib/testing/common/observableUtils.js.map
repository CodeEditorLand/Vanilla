{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/observableUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type {\n\tIObservable,\n\tIObserver,\n} from \"../../../../base/common/observable.js\";\n\nexport function onObservableChange<T>(\n\tobservable: IObservable<unknown, T>,\n\tcallback: (value: T) => void,\n): IDisposable {\n\tconst o: IObserver = {\n\t\tbeginUpdate() {},\n\t\tendUpdate() {},\n\t\thandlePossibleChange(observable) {\n\t\t\tobservable.reportChanges();\n\t\t},\n\t\thandleChange<T2, TChange>(\n\t\t\t_observable: IObservable<T2, TChange>,\n\t\t\tchange: TChange,\n\t\t) {\n\t\t\tcallback(change as any as T);\n\t\t},\n\t};\n\n\tobservable.addObserver(o);\n\treturn {\n\t\tdispose() {\n\t\t\tobservable.removeObserver(o);\n\t\t},\n\t};\n}\n"],
  "mappings": ";;AAWO,SAAS,mBACf,YACA,UACc;AACd,QAAM,IAAe;AAAA,IACpB,cAAc;AAAA,IAAC;AAAA,IACf,YAAY;AAAA,IAAC;AAAA,IACb,qBAAqBA,aAAY;AAChC,MAAAA,YAAW,cAAc;AAAA,IAC1B;AAAA,IACA,aACC,aACA,QACC;AACD,eAAS,MAAkB;AAAA,IAC5B;AAAA,EACD;AAEA,aAAW,YAAY,CAAC;AACxB,SAAO;AAAA,IACN,UAAU;AACT,iBAAW,eAAe,CAAC;AAAA,IAC5B;AAAA,EACD;AACD;AAxBgB;",
  "names": ["observable"]
}
