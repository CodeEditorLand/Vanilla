{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/observableUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, IObserver } from '../../../../base/common/observable.js';\n\nexport function onObservableChange<T>(observable: IObservable<unknown, T>, callback: (value: T) => void): IDisposable {\n\tconst o: IObserver = {\n\t\tbeginUpdate() { },\n\t\tendUpdate() { },\n\t\thandlePossibleChange(observable) {\n\t\t\tobservable.reportChanges();\n\t\t},\n\t\thandleChange<T2, TChange>(_observable: IObservable<T2, TChange>, change: TChange) {\n\t\t\tcallback(change as any as T);\n\t\t}\n\t};\n\n\tobservable.addObserver(o);\n\treturn {\n\t\tdispose() {\n\t\t\tobservable.removeObserver(o);\n\t\t}\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,aAAa,iBAAiB;AAEhC,SAAS,mBAAsB,YAAqC,UAA2C;AACrH,QAAM,IAAe;AAAA,IACpB,cAAc;AAAA,IAAE;AAAA,IAChB,YAAY;AAAA,IAAE;AAAA,IACd,qBAAqBA,aAAY;AAChC,MAAAA,YAAW,cAAc;AAAA,IAC1B;AAAA,IACA,aAA0B,aAAuC,QAAiB;AACjF,eAAS,MAAkB;AAAA,IAC5B;AAAA,EACD;AAEA,aAAW,YAAY,CAAC;AACxB,SAAO;AAAA,IACN,UAAU;AACT,iBAAW,eAAe,CAAC;AAAA,IAC5B;AAAA,EACD;AACD;AAlBgB;",
  "names": ["observable"]
}
