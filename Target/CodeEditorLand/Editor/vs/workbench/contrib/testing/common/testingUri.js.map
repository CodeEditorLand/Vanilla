{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingUri.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from \"../../../../base/common/assert.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\n\nexport const TEST_DATA_SCHEME = \"vscode-test-data\";\n\nexport enum TestUriType {\n\t/** All console output for a task */\n\tTaskOutput = 0,\n\t/** All console output for a test in a task */\n\tTestOutput = 1,\n\t/** Specific message in a test */\n\tResultMessage = 2,\n\t/** Specific actual output message in a test */\n\tResultActualOutput = 3,\n\t/** Specific expected output message in a test */\n\tResultExpectedOutput = 4,\n}\n\ninterface IAllOutputReference {\n\ttype: TestUriType.TaskOutput;\n\tresultId: string;\n\ttaskIndex: number;\n}\n\ninterface IResultTestUri {\n\tresultId: string;\n\ttaskIndex: number;\n\ttestExtId: string;\n}\n\ninterface ITestOutputReference extends IResultTestUri {\n\ttype: TestUriType.TestOutput;\n}\n\ninterface IResultTestMessageReference extends IResultTestUri {\n\ttype: TestUriType.ResultMessage;\n\tmessageIndex: number;\n}\n\ninterface ITestDiffOutputReference extends IResultTestUri {\n\ttype: TestUriType.ResultActualOutput | TestUriType.ResultExpectedOutput;\n\tmessageIndex: number;\n}\n\nexport type ParsedTestUri =\n\t| IAllOutputReference\n\t| IResultTestMessageReference\n\t| ITestDiffOutputReference\n\t| ITestOutputReference;\n\nenum TestUriParts {\n\tResults = \"results\",\n\n\tAllOutput = \"output\",\n\tMessages = \"message\",\n\tText = \"TestFailureMessage\",\n\tActualOutput = \"ActualOutput\",\n\tExpectedOutput = \"ExpectedOutput\",\n}\n\nexport const parseTestUri = (uri: URI): ParsedTestUri | undefined => {\n\tconst type = uri.authority;\n\tconst [resultId, ...request] = uri.path.slice(1).split(\"/\");\n\n\tif (request[0] === TestUriParts.Messages) {\n\t\tconst taskIndex = Number(request[1]);\n\t\tconst testExtId = uri.query;\n\t\tconst index = Number(request[2]);\n\t\tconst part = request[3];\n\t\tif (type === TestUriParts.Results) {\n\t\t\tswitch (part) {\n\t\t\t\tcase TestUriParts.Text:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresultId,\n\t\t\t\t\t\ttaskIndex,\n\t\t\t\t\t\ttestExtId,\n\t\t\t\t\t\tmessageIndex: index,\n\t\t\t\t\t\ttype: TestUriType.ResultMessage,\n\t\t\t\t\t};\n\t\t\t\tcase TestUriParts.ActualOutput:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresultId,\n\t\t\t\t\t\ttaskIndex,\n\t\t\t\t\t\ttestExtId,\n\t\t\t\t\t\tmessageIndex: index,\n\t\t\t\t\t\ttype: TestUriType.ResultActualOutput,\n\t\t\t\t\t};\n\t\t\t\tcase TestUriParts.ExpectedOutput:\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresultId,\n\t\t\t\t\t\ttaskIndex,\n\t\t\t\t\t\ttestExtId,\n\t\t\t\t\t\tmessageIndex: index,\n\t\t\t\t\t\ttype: TestUriType.ResultExpectedOutput,\n\t\t\t\t\t};\n\t\t\t\tcase TestUriParts.Messages:\n\t\t\t}\n\t\t}\n\t}\n\n\tif (request[0] === TestUriParts.AllOutput) {\n\t\tconst testExtId = uri.query;\n\t\tconst taskIndex = Number(request[1]);\n\t\treturn testExtId\n\t\t\t? { resultId, taskIndex, testExtId, type: TestUriType.TestOutput }\n\t\t\t: { resultId, taskIndex, type: TestUriType.TaskOutput };\n\t}\n\n\treturn undefined;\n};\n\nexport const buildTestUri = (parsed: ParsedTestUri): URI => {\n\tconst uriParts = {\n\t\tscheme: TEST_DATA_SCHEME,\n\t\tauthority: TestUriParts.Results,\n\t};\n\n\tif (parsed.type === TestUriType.TaskOutput) {\n\t\treturn URI.from({\n\t\t\t...uriParts,\n\t\t\tpath: [\n\t\t\t\t\"\",\n\t\t\t\tparsed.resultId,\n\t\t\t\tTestUriParts.AllOutput,\n\t\t\t\tparsed.taskIndex,\n\t\t\t].join(\"/\"),\n\t\t});\n\t}\n\n\tconst msgRef = (resultId: string, ...remaining: (string | number)[]) =>\n\t\tURI.from({\n\t\t\t...uriParts,\n\t\t\tquery: parsed.testExtId,\n\t\t\tpath: [\"\", resultId, TestUriParts.Messages, ...remaining].join(\"/\"),\n\t\t});\n\n\tswitch (parsed.type) {\n\t\tcase TestUriType.ResultActualOutput:\n\t\t\treturn msgRef(\n\t\t\t\tparsed.resultId,\n\t\t\t\tparsed.taskIndex,\n\t\t\t\tparsed.messageIndex,\n\t\t\t\tTestUriParts.ActualOutput,\n\t\t\t);\n\t\tcase TestUriType.ResultExpectedOutput:\n\t\t\treturn msgRef(\n\t\t\t\tparsed.resultId,\n\t\t\t\tparsed.taskIndex,\n\t\t\t\tparsed.messageIndex,\n\t\t\t\tTestUriParts.ExpectedOutput,\n\t\t\t);\n\t\tcase TestUriType.ResultMessage:\n\t\t\treturn msgRef(\n\t\t\t\tparsed.resultId,\n\t\t\t\tparsed.taskIndex,\n\t\t\t\tparsed.messageIndex,\n\t\t\t\tTestUriParts.Text,\n\t\t\t);\n\t\tcase TestUriType.TestOutput:\n\t\t\treturn URI.from({\n\t\t\t\t...uriParts,\n\t\t\t\tquery: parsed.testExtId,\n\t\t\t\tpath: [\n\t\t\t\t\t\"\",\n\t\t\t\t\tparsed.resultId,\n\t\t\t\t\tTestUriParts.AllOutput,\n\t\t\t\t\tparsed.taskIndex,\n\t\t\t\t].join(\"/\"),\n\t\t\t});\n\t\tdefault:\n\t\t\tassertNever(parsed, \"Invalid test uri\");\n\t}\n};\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AAEb,MAAM,mBAAmB;AAEzB,IAAK,cAAL,kBAAKA,iBAAL;AAEN,EAAAA,0BAAA,gBAAa,KAAb;AAEA,EAAAA,0BAAA,gBAAa,KAAb;AAEA,EAAAA,0BAAA,mBAAgB,KAAhB;AAEA,EAAAA,0BAAA,wBAAqB,KAArB;AAEA,EAAAA,0BAAA,0BAAuB,KAAvB;AAVW,SAAAA;AAAA,GAAA;AA6CZ,IAAK,eAAL,kBAAKC,kBAAL;AACC,EAAAA,cAAA,aAAU;AAEV,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,cAAW;AACX,EAAAA,cAAA,UAAO;AACP,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,oBAAiB;AAPb,SAAAA;AAAA,GAAA;AAUE,MAAM,eAAe,wBAAC,QAAwC;AACpE,QAAM,OAAO,IAAI;AACjB,QAAM,CAAC,UAAU,GAAG,OAAO,IAAI,IAAI,KAAK,MAAM,CAAC,EAAE,MAAM,GAAG;AAE1D,MAAI,QAAQ,CAAC,MAAM,0BAAuB;AACzC,UAAM,YAAY,OAAO,QAAQ,CAAC,CAAC;AACnC,UAAM,YAAY,IAAI;AACtB,UAAM,QAAQ,OAAO,QAAQ,CAAC,CAAC;AAC/B,UAAM,OAAO,QAAQ,CAAC;AACtB,QAAI,SAAS,yBAAsB;AAClC,cAAQ,MAAM;AAAA,QACb,KAAK;AACJ,iBAAO;AAAA,YACN;AAAA,YACA;AAAA,YACA;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,UACP;AAAA,QACD,KAAK;AACJ,iBAAO;AAAA,YACN;AAAA,YACA;AAAA,YACA;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,UACP;AAAA,QACD,KAAK;AACJ,iBAAO;AAAA,YACN;AAAA,YACA;AAAA,YACA;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,UACP;AAAA,QACD,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AAEA,MAAI,QAAQ,CAAC,MAAM,0BAAwB;AAC1C,UAAM,YAAY,IAAI;AACtB,UAAM,YAAY,OAAO,QAAQ,CAAC,CAAC;AACnC,WAAO,YACJ,EAAE,UAAU,WAAW,WAAW,MAAM,mBAAuB,IAC/D,EAAE,UAAU,WAAW,MAAM,mBAAuB;AAAA,EACxD;AAEA,SAAO;AACR,GAjD4B;AAmDrB,MAAM,eAAe,wBAAC,WAA+B;AAC3D,QAAM,WAAW;AAAA,IAChB,QAAQ;AAAA,IACR,WAAW;AAAA,EACZ;AAEA,MAAI,OAAO,SAAS,oBAAwB;AAC3C,WAAO,IAAI,KAAK;AAAA,MACf,GAAG;AAAA,MACH,MAAM;AAAA,QACL;AAAA,QACA,OAAO;AAAA,QACP;AAAA,QACA,OAAO;AAAA,MACR,EAAE,KAAK,GAAG;AAAA,IACX,CAAC;AAAA,EACF;AAEA,QAAM,SAAS,wBAAC,aAAqB,cACpC,IAAI,KAAK;AAAA,IACR,GAAG;AAAA,IACH,OAAO,OAAO;AAAA,IACd,MAAM,CAAC,IAAI,UAAU,0BAAuB,GAAG,SAAS,EAAE,KAAK,GAAG;AAAA,EACnE,CAAC,GALa;AAOf,UAAQ,OAAO,MAAM;AAAA,IACpB,KAAK;AACJ,aAAO;AAAA,QACN,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,MACD;AAAA,IACD,KAAK;AACJ,aAAO;AAAA,QACN,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,MACD;AAAA,IACD,KAAK;AACJ,aAAO;AAAA,QACN,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,MACD;AAAA,IACD,KAAK;AACJ,aAAO,IAAI,KAAK;AAAA,QACf,GAAG;AAAA,QACH,OAAO,OAAO;AAAA,QACd,MAAM;AAAA,UACL;AAAA,UACA,OAAO;AAAA,UACP;AAAA,UACA,OAAO;AAAA,QACR,EAAE,KAAK,GAAG;AAAA,MACX,CAAC;AAAA,IACF;AACC,kBAAY,QAAQ,kBAAkB;AAAA,EACxC;AACD,GA7D4B;",
  "names": ["TestUriType", "TestUriParts"]
}
