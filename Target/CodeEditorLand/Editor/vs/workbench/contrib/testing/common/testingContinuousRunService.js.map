{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingContinuousRunService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from \"../../../../base/common/arrays.js\";\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { WellDefinedPrefixTree } from \"../../../../base/common/prefixTree.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { StoredValue } from \"./storedValue.js\";\nimport { TestId } from \"./testId.js\";\nimport { ITestProfileService } from \"./testProfileService.js\";\nimport { ITestService } from \"./testService.js\";\nimport type { TestService } from \"./testServiceImpl.js\";\nimport type { ITestRunProfile, TestRunProfileBitset } from \"./testTypes.js\";\nimport { TestingContextKeys } from \"./testingContextKeys.js\";\n\nexport const ITestingContinuousRunService =\n\tcreateDecorator<ITestingContinuousRunService>(\n\t\t\"testingContinuousRunService\",\n\t);\n\nexport interface ITestingContinuousRunService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Gets a list of the last test profiles that were continuously run in the workspace.\n\t */\n\treadonly lastRunProfileIds: ReadonlySet<number>;\n\n\t/**\n\t * Fired when a test is added or removed from continous run, or when\n\t * enablement is changed globally.\n\t */\n\tonDidChange: Event<string | undefined>;\n\n\t/**\n\t * Gets whether continous run is specifically enabled for the given test ID.\n\t */\n\tisSpecificallyEnabledFor(testId: string): boolean;\n\n\t/**\n\t * Gets whether continous run is specifically enabled for\n\t * the given test ID, or any of its parents.\n\t */\n\tisEnabledForAParentOf(testId: string): boolean;\n\n\t/**\n\t * Gets whether continous run is specifically enabled for\n\t * the given test ID, or any of its parents.\n\t */\n\tisEnabledForAChildOf(testId: string): boolean;\n\n\t/**\n\t * Gets whether it's enabled at all.\n\t */\n\tisEnabled(): boolean;\n\n\t/**\n\t * Starts a continuous auto run with a specific set of profiles, or all\n\t * default profiles in a group. Globally if no test is given,\n\t * for a specific test otherwise.\n\t */\n\tstart(\n\t\tprofile: ITestRunProfile[] | TestRunProfileBitset,\n\t\ttestId?: string,\n\t): void;\n\n\t/**\n\t * Stops any continuous run\n\t * Globally if no test is given, for a specific test otherwise.\n\t */\n\tstop(testId?: string): void;\n}\n\nexport class TestingContinuousRunService\n\textends Disposable\n\timplements ITestingContinuousRunService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly changeEmitter = new Emitter<string | undefined>();\n\tprivate globallyRunning?: IDisposable;\n\tprivate readonly running = new WellDefinedPrefixTree<IDisposable>();\n\tprivate readonly lastRun: StoredValue<Set<number>>;\n\tprivate readonly isGloballyOn: IContextKey<boolean>;\n\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tpublic get lastRunProfileIds() {\n\t\treturn this.lastRun.get(new Set());\n\t}\n\n\tconstructor(\n\t\t@ITestService private readonly testService: TestService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITestProfileService private readonly testProfileService: ITestProfileService,\n\t) {\n\t\tsuper();\n\t\tthis.isGloballyOn = TestingContextKeys.isContinuousModeOn.bindTo(contextKeyService);\n\t\tthis.lastRun = this._register(new StoredValue<Set<number>>({\n\t\t\tkey: 'lastContinuousRunProfileIds',\n\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\ttarget: StorageTarget.MACHINE,\n\t\t\tserialization: {\n\t\t\t\tdeserialize: v => new Set(JSON.parse(v)),\n\t\t\t\tserialize: v => JSON.stringify([...v])\n\t\t\t},\n\t\t}, storageService));\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.globallyRunning?.dispose();\n\t\t\tfor (const cts of this.running.values()) {\n\t\t\t\tcts.dispose();\n\t\t\t}\n\t\t}));\n\t}\n\n\t/** @inheritdoc */\n\tpublic isSpecificallyEnabledFor(testId: string): boolean {\n\t\treturn (\n\t\t\tthis.running.size > 0 &&\n\t\t\tthis.running.hasKey(TestId.fromString(testId).path)\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic isEnabledForAParentOf(testId: string): boolean {\n\t\tif (this.globallyRunning) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (\n\t\t\tthis.running.size > 0 &&\n\t\t\tthis.running.hasKeyOrParent(TestId.fromString(testId).path)\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic isEnabledForAChildOf(testId: string): boolean {\n\t\treturn (\n\t\t\tthis.running.size > 0 &&\n\t\t\tthis.running.hasKeyOrChildren(TestId.fromString(testId).path)\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic isEnabled(): boolean {\n\t\treturn !!this.globallyRunning || this.running.size > 0;\n\t}\n\n\t/** @inheritdoc */\n\tpublic start(\n\t\tprofiles: ITestRunProfile[] | TestRunProfileBitset,\n\t\ttestId?: string,\n\t): void {\n\t\tconst store = new DisposableStore();\n\t\tconst cts = new CancellationTokenSource();\n\t\tstore.add(toDisposable(() => cts.dispose(true)));\n\n\t\tif (testId === undefined) {\n\t\t\tthis.isGloballyOn.set(true);\n\t\t}\n\n\t\tif (testId) {\n\t\t\tthis.running.mutate(TestId.fromString(testId).path, (c) => {\n\t\t\t\tc?.dispose();\n\t\t\t\treturn store;\n\t\t\t});\n\t\t} else {\n\t\t\tthis.globallyRunning?.dispose();\n\t\t\tthis.globallyRunning = store;\n\t\t}\n\n\t\tlet actualProfiles: ITestRunProfile[];\n\t\tif (profiles instanceof Array) {\n\t\t\tactualProfiles = profiles;\n\t\t} else {\n\t\t\t// restart the continuous run when default profiles change, if we were\n\t\t\t// asked to run for a group\n\t\t\tconst getRelevant = () =>\n\t\t\t\tthis.testProfileService\n\t\t\t\t\t.getGroupDefaultProfiles(profiles)\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\tp.supportsContinuousRun &&\n\t\t\t\t\t\t\t(!testId || TestId.root(testId) === p.controllerId),\n\t\t\t\t\t);\n\t\t\tactualProfiles = getRelevant();\n\t\t\tstore.add(\n\t\t\t\tthis.testProfileService.onDidChange(() => {\n\t\t\t\t\tif (!arrays.equals(getRelevant(), actualProfiles)) {\n\t\t\t\t\t\tthis.start(profiles, testId);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis.lastRun.store(new Set(actualProfiles.map((p) => p.profileId)));\n\n\t\tif (actualProfiles.length) {\n\t\t\tthis.testService.startContinuousRun(\n\t\t\t\t{\n\t\t\t\t\tcontinuous: true,\n\t\t\t\t\tgroup: actualProfiles[0].group,\n\t\t\t\t\ttargets: actualProfiles.map((p) => ({\n\t\t\t\t\t\ttestIds: [testId ?? p.controllerId],\n\t\t\t\t\t\tcontrollerId: p.controllerId,\n\t\t\t\t\t\tprofileId: p.profileId,\n\t\t\t\t\t})),\n\t\t\t\t},\n\t\t\t\tcts.token,\n\t\t\t);\n\t\t}\n\n\t\tthis.changeEmitter.fire(testId);\n\t}\n\n\t/** @inheritdoc */\n\tpublic stop(testId?: string): void {\n\t\tif (testId) {\n\t\t\tconst cancellations = [\n\t\t\t\t...this.running.deleteRecursive(TestId.fromString(testId).path),\n\t\t\t];\n\t\t\t// deleteRecursive returns a BFS order, reverse it so children are cancelled before parents\n\t\t\tfor (let i = cancellations.length - 1; i >= 0; i--) {\n\t\t\t\tcancellations[i].dispose();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.globallyRunning?.dispose();\n\t\t\tthis.globallyRunning = undefined;\n\t\t}\n\n\t\tif (testId === undefined) {\n\t\t\tthis.isGloballyOn.set(false);\n\t\t}\n\n\t\tthis.changeEmitter.fire(testId);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
