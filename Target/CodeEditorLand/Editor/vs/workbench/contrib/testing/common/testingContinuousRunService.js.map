{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/testingContinuousRunService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { StoredValue } from './storedValue.js';\nimport { TestingContextKeys } from './testingContextKeys.js';\nimport { ITestService } from './testService.js';\nimport { TestService } from './testServiceImpl.js';\nimport { ITestRunProfile, TestRunProfileBitset } from './testTypes.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { TestId } from './testId.js';\nimport { WellDefinedPrefixTree } from '../../../../base/common/prefixTree.js';\nimport { ITestProfileService } from './testProfileService.js';\nimport * as arrays from '../../../../base/common/arrays.js';\n\nexport const ITestingContinuousRunService = createDecorator<ITestingContinuousRunService>('testingContinuousRunService');\n\nexport interface ITestingContinuousRunService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Gets a list of the last test profiles that were continuously run in the workspace.\n\t */\n\treadonly lastRunProfileIds: ReadonlySet<number>;\n\n\t/**\n\t * Fired when a test is added or removed from continous run, or when\n\t * enablement is changed globally.\n\t */\n\tonDidChange: Event<string | undefined>;\n\n\t/**\n\t * Gets whether continous run is specifically enabled for the given test ID.\n\t */\n\tisSpecificallyEnabledFor(testId: string): boolean;\n\n\t/**\n\t * Gets whether continous run is specifically enabled for\n\t * the given test ID, or any of its parents.\n\t */\n\tisEnabledForAParentOf(testId: string): boolean;\n\n\t/**\n\t * Gets whether continous run is specifically enabled for\n\t * the given test ID, or any of its parents.\n\t */\n\tisEnabledForAChildOf(testId: string): boolean;\n\n\t/**\n\t * Gets whether it's enabled at all.\n\t */\n\tisEnabled(): boolean;\n\n\t/**\n\t * Starts a continuous auto run with a specific set of profiles, or all\n\t * default profiles in a group. Globally if no test is given,\n\t * for a specific test otherwise.\n\t */\n\tstart(profile: ITestRunProfile[] | TestRunProfileBitset, testId?: string): void;\n\n\t/**\n\t * Stops any continuous run\n\t * Globally if no test is given, for a specific test otherwise.\n\t */\n\tstop(testId?: string): void;\n}\n\nexport class TestingContinuousRunService extends Disposable implements ITestingContinuousRunService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly changeEmitter = new Emitter<string | undefined>();\n\tprivate globallyRunning?: IDisposable;\n\tprivate readonly running = new WellDefinedPrefixTree<IDisposable>();\n\tprivate readonly lastRun: StoredValue<Set<number>>;\n\tprivate readonly isGloballyOn: IContextKey<boolean>;\n\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tpublic get lastRunProfileIds() {\n\t\treturn this.lastRun.get(new Set());\n\t}\n\n\tconstructor(\n\t\t@ITestService private readonly testService: TestService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITestProfileService private readonly testProfileService: ITestProfileService,\n\t) {\n\t\tsuper();\n\t\tthis.isGloballyOn = TestingContextKeys.isContinuousModeOn.bindTo(contextKeyService);\n\t\tthis.lastRun = this._register(new StoredValue<Set<number>>({\n\t\t\tkey: 'lastContinuousRunProfileIds',\n\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\ttarget: StorageTarget.MACHINE,\n\t\t\tserialization: {\n\t\t\t\tdeserialize: v => new Set(JSON.parse(v)),\n\t\t\t\tserialize: v => JSON.stringify([...v])\n\t\t\t},\n\t\t}, storageService));\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.globallyRunning?.dispose();\n\t\t\tfor (const cts of this.running.values()) {\n\t\t\t\tcts.dispose();\n\t\t\t}\n\t\t}));\n\t}\n\n\t/** @inheritdoc */\n\tpublic isSpecificallyEnabledFor(testId: string): boolean {\n\t\treturn this.running.size > 0 && this.running.hasKey(TestId.fromString(testId).path);\n\t}\n\n\t/** @inheritdoc */\n\tpublic isEnabledForAParentOf(testId: string): boolean {\n\t\tif (this.globallyRunning) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.running.size > 0 && this.running.hasKeyOrParent(TestId.fromString(testId).path);\n\t}\n\n\t/** @inheritdoc */\n\tpublic isEnabledForAChildOf(testId: string): boolean {\n\t\treturn this.running.size > 0 && this.running.hasKeyOrChildren(TestId.fromString(testId).path);\n\t}\n\n\t/** @inheritdoc */\n\tpublic isEnabled(): boolean {\n\t\treturn !!this.globallyRunning || this.running.size > 0;\n\t}\n\n\t/** @inheritdoc */\n\tpublic start(profiles: ITestRunProfile[] | TestRunProfileBitset, testId?: string): void {\n\t\tconst store = new DisposableStore();\n\t\tconst cts = new CancellationTokenSource();\n\t\tstore.add(toDisposable(() => cts.dispose(true)));\n\n\t\tif (testId === undefined) {\n\t\t\tthis.isGloballyOn.set(true);\n\t\t}\n\n\t\tif (!testId) {\n\t\t\tthis.globallyRunning?.dispose();\n\t\t\tthis.globallyRunning = store;\n\t\t} else {\n\t\t\tthis.running.mutate(TestId.fromString(testId).path, c => {\n\t\t\t\tc?.dispose();\n\t\t\t\treturn store;\n\t\t\t});\n\t\t}\n\n\t\tlet actualProfiles: ITestRunProfile[];\n\t\tif (profiles instanceof Array) {\n\t\t\tactualProfiles = profiles;\n\t\t} else {\n\t\t\t// restart the continuous run when default profiles change, if we were\n\t\t\t// asked to run for a group\n\t\t\tconst getRelevant = () => this.testProfileService.getGroupDefaultProfiles(profiles)\n\t\t\t\t.filter(p => p.supportsContinuousRun && (!testId || TestId.root(testId) === p.controllerId));\n\t\t\tactualProfiles = getRelevant();\n\t\t\tstore.add(this.testProfileService.onDidChange(() => {\n\t\t\t\tif (!arrays.equals(getRelevant(), actualProfiles)) {\n\t\t\t\t\tthis.start(profiles, testId);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis.lastRun.store(new Set(actualProfiles.map(p => p.profileId)));\n\n\t\tif (actualProfiles.length) {\n\t\t\tthis.testService.startContinuousRun({\n\t\t\t\tcontinuous: true,\n\t\t\t\tgroup: actualProfiles[0].group,\n\t\t\t\ttargets: actualProfiles.map(p => ({\n\t\t\t\t\ttestIds: [testId ?? p.controllerId],\n\t\t\t\t\tcontrollerId: p.controllerId,\n\t\t\t\t\tprofileId: p.profileId\n\t\t\t\t})),\n\t\t\t}, cts.token);\n\t\t}\n\n\t\tthis.changeEmitter.fire(testId);\n\t}\n\n\t/** @inheritdoc */\n\tpublic stop(testId?: string): void {\n\t\tif (!testId) {\n\t\t\tthis.globallyRunning?.dispose();\n\t\t\tthis.globallyRunning = undefined;\n\t\t} else {\n\t\t\tconst cancellations = [...this.running.deleteRecursive(TestId.fromString(testId).path)];\n\t\t\t// deleteRecursive returns a BFS order, reverse it so children are cancelled before parents\n\t\t\tfor (let i = cancellations.length - 1; i >= 0; i--) {\n\t\t\t\tcancellations[i].dispose();\n\t\t\t}\n\t\t}\n\n\t\tif (testId === undefined) {\n\t\t\tthis.isGloballyOn.set(false);\n\t\t}\n\n\t\tthis.changeEmitter.fire(testId);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
