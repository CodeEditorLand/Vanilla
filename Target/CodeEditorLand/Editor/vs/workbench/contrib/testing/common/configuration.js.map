{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { observableFromEvent } from '../../../../base/common/observable.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IConfigurationNode } from '../../../../platform/configuration/common/configurationRegistry.js';\n\nexport const enum TestingConfigKeys {\n\tAutoRunDelay = 'testing.autoRun.delay',\n\tAutoOpenPeekView = 'testing.automaticallyOpenPeekView',\n\tAutoOpenPeekViewDuringContinuousRun = 'testing.automaticallyOpenPeekViewDuringAutoRun',\n\tOpenTesting = 'testing.openTesting',\n\tFollowRunningTest = 'testing.followRunningTest',\n\tDefaultGutterClickAction = 'testing.defaultGutterClickAction',\n\tGutterEnabled = 'testing.gutterEnabled',\n\tSaveBeforeTest = 'testing.saveBeforeTest',\n\tAlwaysRevealTestOnStateChange = 'testing.alwaysRevealTestOnStateChange',\n\tCountBadge = 'testing.countBadge',\n\tShowAllMessages = 'testing.showAllMessages',\n\tCoveragePercent = 'testing.displayedCoveragePercent',\n\tShowCoverageInExplorer = 'testing.showCoverageInExplorer',\n\tCoverageBarThresholds = 'testing.coverageBarThresholds',\n\tCoverageToolbarEnabled = 'testing.coverageToolbarEnabled',\n}\n\nexport const enum AutoOpenTesting {\n\tNeverOpen = 'neverOpen',\n\tOpenOnTestStart = 'openOnTestStart',\n\tOpenOnTestFailure = 'openOnTestFailure',\n\tOpenExplorerOnTestStart = 'openExplorerOnTestStart',\n}\n\nexport const enum AutoOpenPeekViewWhen {\n\tFailureVisible = 'failureInVisibleDocument',\n\tFailureAnywhere = 'failureAnywhere',\n\tNever = 'never',\n}\n\nexport const enum DefaultGutterClickAction {\n\tRun = 'run',\n\tDebug = 'debug',\n\tCoverage = 'runWithCoverage',\n\tContextMenu = 'contextMenu',\n}\n\nexport const enum TestingCountBadge {\n\tFailed = 'failed',\n\tOff = 'off',\n\tPassed = 'passed',\n\tSkipped = 'skipped',\n}\n\nexport const enum TestingDisplayedCoveragePercent {\n\tTotalCoverage = 'totalCoverage',\n\tStatement = 'statement',\n\tMinimum = 'minimum',\n}\n\nexport const testingConfiguration: IConfigurationNode = {\n\tid: 'testing',\n\torder: 21,\n\ttitle: localize('testConfigurationTitle', \"Testing\"),\n\ttype: 'object',\n\tproperties: {\n\t\t[TestingConfigKeys.AutoRunDelay]: {\n\t\t\ttype: 'integer',\n\t\t\tminimum: 0,\n\t\t\tdescription: localize('testing.autoRun.delay', \"How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.\"),\n\t\t\tdefault: 1000,\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekView]: {\n\t\t\tdescription: localize('testing.automaticallyOpenPeekView', \"Configures when the error Peek view is automatically opened.\"),\n\t\t\tenum: [\n\t\t\t\tAutoOpenPeekViewWhen.FailureAnywhere,\n\t\t\t\tAutoOpenPeekViewWhen.FailureVisible,\n\t\t\t\tAutoOpenPeekViewWhen.Never,\n\t\t\t],\n\t\t\tdefault: AutoOpenPeekViewWhen.FailureVisible,\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.failureAnywhere', \"Open automatically no matter where the failure is.\"),\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.failureInVisibleDocument', \"Open automatically when a test fails in a visible document.\"),\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.never', \"Never automatically open.\"),\n\t\t\t],\n\t\t},\n\t\t[TestingConfigKeys.ShowAllMessages]: {\n\t\t\tdescription: localize('testing.showAllMessages', \"Controls whether to show messages from all test runs.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekViewDuringContinuousRun]: {\n\t\t\tdescription: localize('testing.automaticallyOpenPeekViewDuringContinuousRun', \"Controls whether to automatically open the Peek view during continuous run mode.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.CountBadge]: {\n\t\t\tdescription: localize('testing.countBadge', 'Controls the count badge on the Testing icon on the Activity Bar.'),\n\t\t\tenum: [\n\t\t\t\tTestingCountBadge.Failed,\n\t\t\t\tTestingCountBadge.Off,\n\t\t\t\tTestingCountBadge.Passed,\n\t\t\t\tTestingCountBadge.Skipped,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.countBadge.failed', 'Show the number of failed tests'),\n\t\t\t\tlocalize('testing.countBadge.off', 'Disable the testing count badge'),\n\t\t\t\tlocalize('testing.countBadge.passed', 'Show the number of passed tests'),\n\t\t\t\tlocalize('testing.countBadge.skipped', 'Show the number of skipped tests'),\n\t\t\t],\n\t\t\tdefault: TestingCountBadge.Failed,\n\t\t},\n\t\t[TestingConfigKeys.FollowRunningTest]: {\n\t\t\tdescription: localize('testing.followRunningTest', 'Controls whether the running test should be followed in the Test Explorer view.'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.DefaultGutterClickAction]: {\n\t\t\tdescription: localize('testing.defaultGutterClickAction', 'Controls the action to take when left-clicking on a test decoration in the gutter.'),\n\t\t\tenum: [\n\t\t\t\tDefaultGutterClickAction.Run,\n\t\t\t\tDefaultGutterClickAction.Debug,\n\t\t\t\tDefaultGutterClickAction.Coverage,\n\t\t\t\tDefaultGutterClickAction.ContextMenu,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.defaultGutterClickAction.run', 'Run the test.'),\n\t\t\t\tlocalize('testing.defaultGutterClickAction.debug', 'Debug the test.'),\n\t\t\t\tlocalize('testing.defaultGutterClickAction.coverage', 'Run the test with coverage.'),\n\t\t\t\tlocalize('testing.defaultGutterClickAction.contextMenu', 'Open the context menu for more options.'),\n\t\t\t],\n\t\t\tdefault: DefaultGutterClickAction.Run,\n\t\t},\n\t\t[TestingConfigKeys.GutterEnabled]: {\n\t\t\tdescription: localize('testing.gutterEnabled', 'Controls whether test decorations are shown in the editor gutter.'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.SaveBeforeTest]: {\n\t\t\tdescription: localize('testing.saveBeforeTest', 'Control whether save all dirty editors before running a test.'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.OpenTesting]: {\n\t\t\tenum: [\n\t\t\t\tAutoOpenTesting.NeverOpen,\n\t\t\t\tAutoOpenTesting.OpenOnTestStart,\n\t\t\t\tAutoOpenTesting.OpenOnTestFailure,\n\t\t\t\tAutoOpenTesting.OpenExplorerOnTestStart,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.openTesting.neverOpen', 'Never automatically open the testing views'),\n\t\t\t\tlocalize('testing.openTesting.openOnTestStart', 'Open the test results view when tests start'),\n\t\t\t\tlocalize('testing.openTesting.openOnTestFailure', 'Open the test result view on any test failure'),\n\t\t\t\tlocalize('testing.openTesting.openExplorerOnTestStart', 'Open the test explorer when tests start'),\n\t\t\t],\n\t\t\tdefault: 'openOnTestStart',\n\t\t\tdescription: localize('testing.openTesting', \"Controls when the testing view should open.\")\n\t\t},\n\t\t[TestingConfigKeys.AlwaysRevealTestOnStateChange]: {\n\t\t\tmarkdownDescription: localize('testing.alwaysRevealTestOnStateChange', \"Always reveal the executed test when {0} is on. If this setting is turned off, only failed tests will be revealed.\", '`#testing.followRunningTest#`'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.ShowCoverageInExplorer]: {\n\t\t\tdescription: localize('testing.ShowCoverageInExplorer', \"Whether test coverage should be down in the File Explorer view.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.CoveragePercent]: {\n\t\t\tmarkdownDescription: localize('testing.displayedCoveragePercent', \"Configures what percentage is displayed by default for test coverage.\"),\n\t\t\tdefault: TestingDisplayedCoveragePercent.TotalCoverage,\n\t\t\tenum: [\n\t\t\t\tTestingDisplayedCoveragePercent.TotalCoverage,\n\t\t\t\tTestingDisplayedCoveragePercent.Statement,\n\t\t\t\tTestingDisplayedCoveragePercent.Minimum,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.displayedCoveragePercent.totalCoverage', 'A calculation of the combined statement, function, and branch coverage.'),\n\t\t\t\tlocalize('testing.displayedCoveragePercent.statement', 'The statement coverage.'),\n\t\t\t\tlocalize('testing.displayedCoveragePercent.minimum', 'The minimum of statement, function, and branch coverage.'),\n\t\t\t],\n\t\t},\n\t\t[TestingConfigKeys.CoverageBarThresholds]: {\n\t\t\tmarkdownDescription: localize('testing.coverageBarThresholds', \"Configures the colors used for percentages in test coverage bars.\"),\n\t\t\tdefault: { red: 0, yellow: 60, green: 90 },\n\t\t\tproperties: {\n\t\t\t\tred: { type: 'number', minimum: 0, maximum: 100, default: 0 },\n\t\t\t\tyellow: { type: 'number', minimum: 0, maximum: 100, default: 60 },\n\t\t\t\tgreen: { type: 'number', minimum: 0, maximum: 100, default: 90 },\n\t\t\t},\n\t\t},\n\t\t[TestingConfigKeys.CoverageToolbarEnabled]: {\n\t\t\tdescription: localize('testing.coverageToolbarEnabled', 'Controls whether the coverage toolbar is shown in the editor.'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false, // todo@connor4312: disabled by default until UI sync\n\t\t},\n\t}\n};\n\nexport interface ITestingCoverageBarThresholds {\n\tred: number;\n\tgreen: number;\n\tyellow: number;\n}\n\nexport interface ITestingConfiguration {\n\t[TestingConfigKeys.AutoRunDelay]: number;\n\t[TestingConfigKeys.AutoOpenPeekView]: AutoOpenPeekViewWhen;\n\t[TestingConfigKeys.AutoOpenPeekViewDuringContinuousRun]: boolean;\n\t[TestingConfigKeys.CountBadge]: TestingCountBadge;\n\t[TestingConfigKeys.FollowRunningTest]: boolean;\n\t[TestingConfigKeys.DefaultGutterClickAction]: DefaultGutterClickAction;\n\t[TestingConfigKeys.GutterEnabled]: boolean;\n\t[TestingConfigKeys.SaveBeforeTest]: boolean;\n\t[TestingConfigKeys.OpenTesting]: AutoOpenTesting;\n\t[TestingConfigKeys.AlwaysRevealTestOnStateChange]: boolean;\n\t[TestingConfigKeys.ShowAllMessages]: boolean;\n\t[TestingConfigKeys.CoveragePercent]: TestingDisplayedCoveragePercent;\n\t[TestingConfigKeys.ShowCoverageInExplorer]: boolean;\n\t[TestingConfigKeys.CoverageBarThresholds]: ITestingCoverageBarThresholds;\n\t[TestingConfigKeys.CoverageToolbarEnabled]: boolean;\n}\n\nexport const getTestingConfiguration = <K extends TestingConfigKeys>(config: IConfigurationService, key: K) => config.getValue<ITestingConfiguration[K]>(key);\n\nexport const observeTestingConfiguration = <K extends TestingConfigKeys>(config: IConfigurationService, key: K) => observableFromEvent(config.onDidChangeConfiguration, () =>\n\tgetTestingConfiguration(config, key));\n"],
  "mappings": "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",
  "names": ["TestingConfigKeys", "AutoOpenTesting", "AutoOpenPeekViewWhen", "DefaultGutterClickAction", "TestingCountBadge", "TestingDisplayedCoveragePercent"]
}
