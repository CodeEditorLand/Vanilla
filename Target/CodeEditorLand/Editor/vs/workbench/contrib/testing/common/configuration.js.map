{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/common/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { observableFromEvent } from \"../../../../base/common/observable.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { IConfigurationNode } from \"../../../../platform/configuration/common/configurationRegistry.js\";\n\nexport enum TestingConfigKeys {\n\tAutoRunDelay = \"testing.autoRun.delay\",\n\tAutoOpenPeekView = \"testing.automaticallyOpenPeekView\",\n\tAutoOpenPeekViewDuringContinuousRun = \"testing.automaticallyOpenPeekViewDuringAutoRun\",\n\tOpenTesting = \"testing.openTesting\",\n\tFollowRunningTest = \"testing.followRunningTest\",\n\tDefaultGutterClickAction = \"testing.defaultGutterClickAction\",\n\tGutterEnabled = \"testing.gutterEnabled\",\n\tSaveBeforeTest = \"testing.saveBeforeTest\",\n\tAlwaysRevealTestOnStateChange = \"testing.alwaysRevealTestOnStateChange\",\n\tCountBadge = \"testing.countBadge\",\n\tShowAllMessages = \"testing.showAllMessages\",\n\tCoveragePercent = \"testing.displayedCoveragePercent\",\n\tShowCoverageInExplorer = \"testing.showCoverageInExplorer\",\n\tCoverageBarThresholds = \"testing.coverageBarThresholds\",\n\tCoverageToolbarEnabled = \"testing.coverageToolbarEnabled\",\n}\n\nexport enum AutoOpenTesting {\n\tNeverOpen = \"neverOpen\",\n\tOpenOnTestStart = \"openOnTestStart\",\n\tOpenOnTestFailure = \"openOnTestFailure\",\n\tOpenExplorerOnTestStart = \"openExplorerOnTestStart\",\n}\n\nexport enum AutoOpenPeekViewWhen {\n\tFailureVisible = \"failureInVisibleDocument\",\n\tFailureAnywhere = \"failureAnywhere\",\n\tNever = \"never\",\n}\n\nexport enum DefaultGutterClickAction {\n\tRun = \"run\",\n\tDebug = \"debug\",\n\tCoverage = \"runWithCoverage\",\n\tContextMenu = \"contextMenu\",\n}\n\nexport enum TestingCountBadge {\n\tFailed = \"failed\",\n\tOff = \"off\",\n\tPassed = \"passed\",\n\tSkipped = \"skipped\",\n}\n\nexport enum TestingDisplayedCoveragePercent {\n\tTotalCoverage = \"totalCoverage\",\n\tStatement = \"statement\",\n\tMinimum = \"minimum\",\n}\n\nexport const testingConfiguration: IConfigurationNode = {\n\tid: \"testing\",\n\torder: 21,\n\ttitle: localize(\"testConfigurationTitle\", \"Testing\"),\n\ttype: \"object\",\n\tproperties: {\n\t\t[TestingConfigKeys.AutoRunDelay]: {\n\t\t\ttype: \"integer\",\n\t\t\tminimum: 0,\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.autoRun.delay\",\n\t\t\t\t\"How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.\",\n\t\t\t),\n\t\t\tdefault: 1000,\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekView]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.automaticallyOpenPeekView\",\n\t\t\t\t\"Configures when the error Peek view is automatically opened.\",\n\t\t\t),\n\t\t\tenum: [\n\t\t\t\tAutoOpenPeekViewWhen.FailureAnywhere,\n\t\t\t\tAutoOpenPeekViewWhen.FailureVisible,\n\t\t\t\tAutoOpenPeekViewWhen.Never,\n\t\t\t],\n\t\t\tdefault: AutoOpenPeekViewWhen.FailureVisible,\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.automaticallyOpenPeekView.failureAnywhere\",\n\t\t\t\t\t\"Open automatically no matter where the failure is.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.automaticallyOpenPeekView.failureInVisibleDocument\",\n\t\t\t\t\t\"Open automatically when a test fails in a visible document.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.automaticallyOpenPeekView.never\",\n\t\t\t\t\t\"Never automatically open.\",\n\t\t\t\t),\n\t\t\t],\n\t\t},\n\t\t[TestingConfigKeys.ShowAllMessages]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.showAllMessages\",\n\t\t\t\t\"Controls whether to show messages from all test runs.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekViewDuringContinuousRun]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.automaticallyOpenPeekViewDuringContinuousRun\",\n\t\t\t\t\"Controls whether to automatically open the Peek view during continuous run mode.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.CountBadge]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.countBadge\",\n\t\t\t\t\"Controls the count badge on the Testing icon on the Activity Bar.\",\n\t\t\t),\n\t\t\tenum: [\n\t\t\t\tTestingCountBadge.Failed,\n\t\t\t\tTestingCountBadge.Off,\n\t\t\t\tTestingCountBadge.Passed,\n\t\t\t\tTestingCountBadge.Skipped,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.countBadge.failed\",\n\t\t\t\t\t\"Show the number of failed tests\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.countBadge.off\",\n\t\t\t\t\t\"Disable the testing count badge\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.countBadge.passed\",\n\t\t\t\t\t\"Show the number of passed tests\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.countBadge.skipped\",\n\t\t\t\t\t\"Show the number of skipped tests\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: TestingCountBadge.Failed,\n\t\t},\n\t\t[TestingConfigKeys.FollowRunningTest]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.followRunningTest\",\n\t\t\t\t\"Controls whether the running test should be followed in the Test Explorer view.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.DefaultGutterClickAction]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.defaultGutterClickAction\",\n\t\t\t\t\"Controls the action to take when left-clicking on a test decoration in the gutter.\",\n\t\t\t),\n\t\t\tenum: [\n\t\t\t\tDefaultGutterClickAction.Run,\n\t\t\t\tDefaultGutterClickAction.Debug,\n\t\t\t\tDefaultGutterClickAction.Coverage,\n\t\t\t\tDefaultGutterClickAction.ContextMenu,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.defaultGutterClickAction.run\",\n\t\t\t\t\t\"Run the test.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.defaultGutterClickAction.debug\",\n\t\t\t\t\t\"Debug the test.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.defaultGutterClickAction.coverage\",\n\t\t\t\t\t\"Run the test with coverage.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.defaultGutterClickAction.contextMenu\",\n\t\t\t\t\t\"Open the context menu for more options.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: DefaultGutterClickAction.Run,\n\t\t},\n\t\t[TestingConfigKeys.GutterEnabled]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.gutterEnabled\",\n\t\t\t\t\"Controls whether test decorations are shown in the editor gutter.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.SaveBeforeTest]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.saveBeforeTest\",\n\t\t\t\t\"Control whether save all dirty editors before running a test.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.OpenTesting]: {\n\t\t\tenum: [\n\t\t\t\tAutoOpenTesting.NeverOpen,\n\t\t\t\tAutoOpenTesting.OpenOnTestStart,\n\t\t\t\tAutoOpenTesting.OpenOnTestFailure,\n\t\t\t\tAutoOpenTesting.OpenExplorerOnTestStart,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.openTesting.neverOpen\",\n\t\t\t\t\t\"Never automatically open the testing views\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.openTesting.openOnTestStart\",\n\t\t\t\t\t\"Open the test results view when tests start\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.openTesting.openOnTestFailure\",\n\t\t\t\t\t\"Open the test result view on any test failure\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.openTesting.openExplorerOnTestStart\",\n\t\t\t\t\t\"Open the test explorer when tests start\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"openOnTestStart\",\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.openTesting\",\n\t\t\t\t\"Controls when the testing view should open.\",\n\t\t\t),\n\t\t},\n\t\t[TestingConfigKeys.AlwaysRevealTestOnStateChange]: {\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"testing.alwaysRevealTestOnStateChange\",\n\t\t\t\t\"Always reveal the executed test when {0} is on. If this setting is turned off, only failed tests will be revealed.\",\n\t\t\t\t\"`#testing.followRunningTest#`\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.ShowCoverageInExplorer]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.ShowCoverageInExplorer\",\n\t\t\t\t\"Whether test coverage should be down in the File Explorer view.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.CoveragePercent]: {\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"testing.displayedCoveragePercent\",\n\t\t\t\t\"Configures what percentage is displayed by default for test coverage.\",\n\t\t\t),\n\t\t\tdefault: TestingDisplayedCoveragePercent.TotalCoverage,\n\t\t\tenum: [\n\t\t\t\tTestingDisplayedCoveragePercent.TotalCoverage,\n\t\t\t\tTestingDisplayedCoveragePercent.Statement,\n\t\t\t\tTestingDisplayedCoveragePercent.Minimum,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.displayedCoveragePercent.totalCoverage\",\n\t\t\t\t\t\"A calculation of the combined statement, function, and branch coverage.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.displayedCoveragePercent.statement\",\n\t\t\t\t\t\"The statement coverage.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.displayedCoveragePercent.minimum\",\n\t\t\t\t\t\"The minimum of statement, function, and branch coverage.\",\n\t\t\t\t),\n\t\t\t],\n\t\t},\n\t\t[TestingConfigKeys.CoverageBarThresholds]: {\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"testing.coverageBarThresholds\",\n\t\t\t\t\"Configures the colors used for percentages in test coverage bars.\",\n\t\t\t),\n\t\t\tdefault: { red: 0, yellow: 60, green: 90 },\n\t\t\tproperties: {\n\t\t\t\tred: { type: \"number\", minimum: 0, maximum: 100, default: 0 },\n\t\t\t\tyellow: {\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\tminimum: 0,\n\t\t\t\t\tmaximum: 100,\n\t\t\t\t\tdefault: 60,\n\t\t\t\t},\n\t\t\t\tgreen: {\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\tminimum: 0,\n\t\t\t\t\tmaximum: 100,\n\t\t\t\t\tdefault: 90,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t[TestingConfigKeys.CoverageToolbarEnabled]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"testing.coverageToolbarEnabled\",\n\t\t\t\t\"Controls whether the coverage toolbar is shown in the editor.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false, // todo@connor4312: disabled by default until UI sync\n\t\t},\n\t},\n};\n\nexport interface ITestingCoverageBarThresholds {\n\tred: number;\n\tgreen: number;\n\tyellow: number;\n}\n\nexport interface ITestingConfiguration {\n\t[TestingConfigKeys.AutoRunDelay]: number;\n\t[TestingConfigKeys.AutoOpenPeekView]: AutoOpenPeekViewWhen;\n\t[TestingConfigKeys.AutoOpenPeekViewDuringContinuousRun]: boolean;\n\t[TestingConfigKeys.CountBadge]: TestingCountBadge;\n\t[TestingConfigKeys.FollowRunningTest]: boolean;\n\t[TestingConfigKeys.DefaultGutterClickAction]: DefaultGutterClickAction;\n\t[TestingConfigKeys.GutterEnabled]: boolean;\n\t[TestingConfigKeys.SaveBeforeTest]: boolean;\n\t[TestingConfigKeys.OpenTesting]: AutoOpenTesting;\n\t[TestingConfigKeys.AlwaysRevealTestOnStateChange]: boolean;\n\t[TestingConfigKeys.ShowAllMessages]: boolean;\n\t[TestingConfigKeys.CoveragePercent]: TestingDisplayedCoveragePercent;\n\t[TestingConfigKeys.ShowCoverageInExplorer]: boolean;\n\t[TestingConfigKeys.CoverageBarThresholds]: ITestingCoverageBarThresholds;\n\t[TestingConfigKeys.CoverageToolbarEnabled]: boolean;\n}\n\nexport const getTestingConfiguration = <K extends TestingConfigKeys>(\n\tconfig: IConfigurationService,\n\tkey: K,\n) => config.getValue<ITestingConfiguration[K]>(key);\n\nexport const observeTestingConfiguration = <K extends TestingConfigKeys>(\n\tconfig: IConfigurationService,\n\tkey: K,\n) =>\n\tobservableFromEvent(config.onDidChangeConfiguration, () =>\n\t\tgetTestingConfiguration(config, key),\n\t);\n"],
  "mappings": "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",
  "names": ["TestingConfigKeys", "AutoOpenTesting", "AutoOpenPeekViewWhen", "DefaultGutterClickAction", "TestingCountBadge", "TestingDisplayedCoveragePercent"]
}
