import{stripIcons as l}from"../../../../base/common/iconLabels.js";import{localize as t}from"../../../../nls.js";import{TestResultState as n,TestRunProfileBitset as r}from"./testTypes.js";var c=(i=>(i.ViewletId="workbench.view.extension.test",i.ExplorerViewId="workbench.view.testing",i.OutputPeekContributionId="editor.contrib.testingOutputPeek",i.DecorationsContributionId="editor.contrib.testingDecorations",i.CoverageDecorationsContributionId="editor.contrib.coverageDecorations",i.CoverageViewId="workbench.view.testCoverage",i.ResultsPanelId="workbench.panel.testResults",i.ResultsViewId="workbench.panel.testResults.view",i.MessageLanguageId="vscodeInternalTestMessage",i))(c||{}),a=(o=>(o.List="list",o.Tree="true",o))(a||{}),R=(s=>(s.ByLocation="location",s.ByStatus="status",s.ByDuration="duration",s))(R||{});const A={[n.Errored]:t("testState.errored","Errored"),[n.Failed]:t("testState.failed","Failed"),[n.Passed]:t("testState.passed","Passed"),[n.Queued]:t("testState.queued","Queued"),[n.Running]:t("testState.running","Running"),[n.Skipped]:t("testState.skipped","Skipped"),[n.Unset]:t("testState.unset","Not yet run")},f=(u,g)=>t({key:"testing.treeElementLabel",comment:['label then the unit tests state, for example "Addition Tests (Running)"']},"{0} ({1})",l(u),A[g]),h={[r.Debug]:t("testGroup.debug","Debug"),[r.Run]:t("testGroup.run","Run"),[r.Coverage]:t("testGroup.coverage","Coverage")};var p=(e=>(e.CancelTestRefreshAction="testing.cancelTestRefresh",e.CancelTestRunAction="testing.cancelRun",e.ClearTestResultsAction="testing.clearTestResults",e.CollapseAllAction="testing.collapseAll",e.ConfigureTestProfilesAction="testing.configureProfile",e.ContinousRunUsingForTest="testing.continuousRunUsingForTest",e.CoverageAtCursor="testing.coverageAtCursor",e.CoverageByUri="testing.coverage.uri",e.CoverageClear="testing.coverage.close",e.CoverageCurrentFile="testing.coverageCurrentFile",e.CoverageFilterToTest="testing.coverageFilterToTest",e.CoverageFilterToTestInEditor="testing.coverageFilterToTestInEditor",e.CoverageLastRun="testing.coverageLastRun",e.CoverageSelectedAction="testing.coverageSelected",e.CoverageToggleToolbar="testing.coverageToggleToolbar",e.CoverageViewChangeSorting="testing.coverageViewChangeSorting",e.DebugAction="testing.debug",e.DebugAllAction="testing.debugAll",e.DebugAtCursor="testing.debugAtCursor",e.DebugByUri="testing.debug.uri",e.DebugCurrentFile="testing.debugCurrentFile",e.DebugFailedTests="testing.debugFailTests",e.DebugLastRun="testing.debugLastRun",e.DebugSelectedAction="testing.debugSelected",e.FilterAction="workbench.actions.treeView.testExplorer.filter",e.GetExplorerSelection="_testing.getExplorerSelection",e.GetSelectedProfiles="testing.getSelectedProfiles",e.GoToTest="testing.editFocusedTest",e.GoToRelatedTest="testing.goToRelatedTest",e.PeekRelatedTest="testing.peekRelatedTest",e.GoToRelatedCode="testing.goToRelatedCode",e.PeekRelatedCode="testing.peekRelatedCode",e.HideTestAction="testing.hideTest",e.OpenCoverage="testing.openCoverage",e.OpenOutputPeek="testing.openOutputPeek",e.RefreshTestsAction="testing.refreshTests",e.ReRunFailedTests="testing.reRunFailTests",e.ReRunLastRun="testing.reRunLastRun",e.RunAction="testing.run",e.RunAllAction="testing.runAll",e.RunAllWithCoverageAction="testing.coverageAll",e.RunAtCursor="testing.runAtCursor",e.RunByUri="testing.run.uri",e.RunCurrentFile="testing.runCurrentFile",e.RunSelectedAction="testing.runSelected",e.RunUsingProfileAction="testing.runUsing",e.RunWithCoverageAction="testing.coverage",e.SearchForTestExtension="testing.searchForTestExtension",e.SelectDefaultTestProfiles="testing.selectDefaultTestProfiles",e.ShowMostRecentOutputAction="testing.showMostRecentOutput",e.StartContinousRun="testing.startContinuousRun",e.StopContinousRun="testing.stopContinuousRun",e.TestingSortByDurationAction="testing.sortByDuration",e.TestingSortByLocationAction="testing.sortByLocation",e.TestingSortByStatusAction="testing.sortByStatus",e.TestingViewAsListAction="testing.viewAsList",e.TestingViewAsTreeAction="testing.viewAsTree",e.ToggleContinousRunForTest="testing.toggleContinuousRunForTest",e.ToggleInlineTestOutput="testing.toggleInlineTestOutput",e.UnhideAllTestsAction="testing.unhideAllTests",e.UnhideTestAction="testing.unhideTest",e))(p||{});export{p as TestCommandId,a as TestExplorerViewMode,R as TestExplorerViewSorting,c as Testing,f as labelForTestInState,h as testConfigurationGroupNames};
