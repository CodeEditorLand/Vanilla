import{assertNever as l}from"../../../../../vs/base/common/assert.js";import{URI as p}from"../../../../../vs/base/common/uri.js";const i="vscode-test-data";var T=(e=>(e[e.TaskOutput=0]="TaskOutput",e[e.TestOutput=1]="TestOutput",e[e.ResultMessage=2]="ResultMessage",e[e.ResultActualOutput=3]="ResultActualOutput",e[e.ResultExpectedOutput=4]="ResultExpectedOutput",e))(T||{}),I=(s=>(s.Results="results",s.AllOutput="output",s.Messages="message",s.Text="TestFailureMessage",s.ActualOutput="ActualOutput",s.ExpectedOutput="ExpectedOutput",s))(I||{});const o=t=>{const a=t.authority,[u,...r]=t.path.slice(1).split("/");if(r[0]==="message"){const n=Number(r[1]),e=t.query,s=Number(r[2]),c=r[3];if(a==="results")switch(c){case"TestFailureMessage":return{resultId:u,taskIndex:n,testExtId:e,messageIndex:s,type:2};case"ActualOutput":return{resultId:u,taskIndex:n,testExtId:e,messageIndex:s,type:3};case"ExpectedOutput":return{resultId:u,taskIndex:n,testExtId:e,messageIndex:s,type:4};case"message":}}if(r[0]==="output"){const n=t.query,e=Number(r[1]);return n?{resultId:u,taskIndex:e,testExtId:n,type:1}:{resultId:u,taskIndex:e,type:0}}},O=t=>{const a={scheme:i,authority:"results"};if(t.type===0)return p.from({...a,path:["",t.resultId,"output",t.taskIndex].join("/")});const u=(r,...n)=>p.from({...a,query:t.testExtId,path:["",r,"message",...n].join("/")});switch(t.type){case 3:return u(t.resultId,t.taskIndex,t.messageIndex,"ActualOutput");case 4:return u(t.resultId,t.taskIndex,t.messageIndex,"ExpectedOutput");case 2:return u(t.resultId,t.taskIndex,t.messageIndex,"TestFailureMessage");case 1:return p.from({...a,query:t.testExtId,path:["",t.resultId,"output",t.taskIndex].join("/")});default:l(t,"Invalid test uri")}};export{i as TEST_DATA_SCHEME,T as TestUriType,O as buildTestUri,o as parseTestUri};
