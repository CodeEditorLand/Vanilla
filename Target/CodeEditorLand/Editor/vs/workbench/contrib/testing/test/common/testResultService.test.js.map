{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/common/testResultService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { TestId } from '../../common/testId.js';\nimport { TestProfileService } from '../../common/testProfileService.js';\nimport { HydratedTestResult, LiveTestResult, TaskRawOutput, TestResultItemChange, TestResultItemChangeReason, resultItemParents } from '../../common/testResult.js';\nimport { TestResultService } from '../../common/testResultService.js';\nimport { ITestResultStorage, InMemoryResultStorage } from '../../common/testResultStorage.js';\nimport { ITestTaskState, ResolvedTestRunRequest, TestResultItem, TestResultState, TestRunProfileBitset } from '../../common/testTypes.js';\nimport { makeEmptyCounts } from '../../common/testingStates.js';\nimport { TestTestCollection, getInitializedMainTestCollection, testStubs } from './testStubs.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('Workbench - Test Results Service', () => {\n\tconst getLabelsIn = (it: Iterable<TestResultItem>) => [...it].map(t => t.item.label).sort();\n\tconst getChangeSummary = () => [...changed]\n\t\t.map(c => ({ reason: c.reason, label: c.item.item.label }));\n\n\tlet r: TestLiveTestResult;\n\tlet changed = new Set<TestResultItemChange>();\n\tlet tests: TestTestCollection;\n\n\tconst defaultOpts = (testIds: string[]): ResolvedTestRunRequest => ({\n\t\tgroup: TestRunProfileBitset.Run,\n\t\ttargets: [{\n\t\t\tprofileId: 0,\n\t\t\tcontrollerId: 'ctrlId',\n\t\t\ttestIds,\n\t\t}]\n\t});\n\n\tclass TestLiveTestResult extends LiveTestResult {\n\t\tconstructor(\n\t\t\tid: string,\n\t\t\tpersist: boolean,\n\t\t\trequest: ResolvedTestRunRequest,\n\t\t) {\n\t\t\tsuper(id, persist, request, NullTelemetryService);\n\t\t\tds.add(this);\n\t\t}\n\n\t\tpublic setAllToStatePublic(state: TestResultState, taskId: string, when: (task: ITestTaskState, item: TestResultItem) => boolean) {\n\t\t\tthis.setAllToState(state, taskId, when);\n\t\t}\n\t}\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tchanged = new Set();\n\t\tr = ds.add(new TestLiveTestResult(\n\t\t\t'foo',\n\t\t\ttrue,\n\t\t\tdefaultOpts(['id-a']),\n\t\t));\n\n\t\tds.add(r.onChange(e => changed.add(e)));\n\t\tr.addTask({ id: 't', name: 'n', running: true, ctrlId: 'ctrl' });\n\n\t\ttests = ds.add(testStubs.nested());\n\t\tconst cts = ds.add(new CancellationTokenSource());\n\t\tconst ok = await Promise.race([\n\t\t\tPromise.resolve(tests.expand(tests.root.id, Infinity)).then(() => true),\n\t\t\ttimeout(1000, cts.token).then(() => false),\n\t\t]);\n\t\tcts.cancel();\n\n\t\t// todo@connor4312: debug for tests #137853:\n\t\tif (!ok) {\n\t\t\tthrow new Error('timed out while expanding, diff: ' + JSON.stringify(tests.collectDiff()));\n\t\t}\n\n\t\tr.addTestChainToRun('ctrlId', [\n\t\t\ttests.root.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.children.get('id-aa')!.toTestItem(),\n\t\t]);\n\n\t\tr.addTestChainToRun('ctrlId', [\n\t\t\ttests.root.children.get('id-a')!.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.children.get('id-ab')!.toTestItem(),\n\t\t]);\n\t});\n\n\t// ensureNoDisposablesAreLeakedInTestSuite(); todo@connor4312\n\n\tsuite('LiveTestResult', () => {\n\t\ttest('is empty if no tests are yet present', async () => {\n\t\t\tassert.deepStrictEqual(getLabelsIn(new TestLiveTestResult(\n\t\t\t\t'foo',\n\t\t\t\tfalse,\n\t\t\t\tdefaultOpts(['id-a']),\n\t\t\t).tests), []);\n\t\t});\n\n\t\ttest('initially queues nothing', () => {\n\t\t\tassert.deepStrictEqual(getChangeSummary(), []);\n\t\t});\n\n\t\ttest('initializes with the subtree of requested tests', () => {\n\t\t\tassert.deepStrictEqual(getLabelsIn(r.tests), ['a', 'aa', 'ab', 'root']);\n\t\t});\n\n\t\ttest('initializes with valid counts', () => {\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 4;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\t\t});\n\n\t\ttest('setAllToState', () => {\n\t\t\tchanged.clear();\n\t\t\tr.setAllToStatePublic(TestResultState.Queued, 't', (_, t) => t.item.label !== 'root');\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 1;\n\t\t\tc[TestResultState.Queued] = 3;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\n\t\t\tr.setAllToStatePublic(TestResultState.Failed, 't', (_, t) => t.item.label !== 'root');\n\t\t\tconst c2 = makeEmptyCounts();\n\t\t\tc2[TestResultState.Unset] = 1;\n\t\t\tc2[TestResultState.Failed] = 3;\n\t\t\tassert.deepStrictEqual(r.counts, c2);\n\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-a']).toString())?.ownComputedState, TestResultState.Failed);\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-a']).toString())?.tasks[0].state, TestResultState.Failed);\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'ab', reason: TestResultItemChangeReason.OwnStateChange },\n\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'ab', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t]);\n\t\t});\n\n\t\ttest('updateState', () => {\n\t\t\tchanged.clear();\n\t\t\tconst testId = new TestId(['ctrlId', 'id-a', 'id-aa']).toString();\n\t\t\tr.updateState(testId, 't', TestResultState.Running);\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Running] = 1;\n\t\t\tc[TestResultState.Unset] = 3;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Running);\n\t\t\t// update computed state:\n\t\t\tassert.deepStrictEqual(r.getStateById(tests.root.id)?.computedState, TestResultState.Running);\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t]);\n\n\t\t\tr.updateState(testId, 't', TestResultState.Passed);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Passed);\n\n\t\t\tr.updateState(testId, 't', TestResultState.Errored);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Errored);\n\n\t\t\tr.updateState(testId, 't', TestResultState.Passed);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Errored);\n\t\t});\n\n\t\ttest('ignores outside run', () => {\n\t\t\tchanged.clear();\n\t\t\tr.updateState(new TestId(['ctrlId', 'id-b']).toString(), 't', TestResultState.Running);\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 4;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-b']).toString()), undefined);\n\t\t});\n\n\t\ttest('markComplete', () => {\n\t\t\tr.setAllToStatePublic(TestResultState.Queued, 't', () => true);\n\t\t\tr.updateState(new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), 't', TestResultState.Passed);\n\t\t\tchanged.clear();\n\n\t\t\tr.markComplete();\n\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 3;\n\t\t\tc[TestResultState.Passed] = 1;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\n\t\t\tassert.deepStrictEqual(r.getStateById(tests.root.id)?.ownComputedState, TestResultState.Unset);\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-a', 'id-aa']).toString())?.ownComputedState, TestResultState.Passed);\n\t\t});\n\t});\n\n\tsuite('service', () => {\n\t\tlet storage: ITestResultStorage;\n\t\tlet results: TestResultService;\n\n\t\tclass TestTestResultService extends TestResultService {\n\t\t\tprotected override persistScheduler = { schedule: () => this.persistImmediately() } as any;\n\t\t}\n\n\t\tsetup(() => {\n\t\t\tstorage = ds.add(new InMemoryResultStorage({\n\t\t\t\tasCanonicalUri(uri) {\n\t\t\t\t\treturn uri;\n\t\t\t\t},\n\t\t\t} as IUriIdentityService, ds.add(new TestStorageService()), new NullLogService()));\n\t\t\tresults = ds.add(new TestTestResultService(\n\t\t\t\tnew MockContextKeyService(),\n\t\t\t\tstorage,\n\t\t\t\tds.add(new TestProfileService(new MockContextKeyService(), ds.add(new TestStorageService()))),\n\t\t\t\tNullTelemetryService,\n\t\t\t));\n\t\t});\n\n\t\ttest('pushes new result', () => {\n\t\t\tresults.push(r);\n\t\t\tassert.deepStrictEqual(results.results, [r]);\n\t\t});\n\n\t\ttest('serializes and re-hydrates', async () => {\n\t\t\tresults.push(r);\n\t\t\tr.updateState(new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), 't', TestResultState.Passed, 42);\n\t\t\tr.markComplete();\n\t\t\tawait timeout(10); // allow persistImmediately async to happen\n\n\t\t\tresults = ds.add(new TestResultService(\n\t\t\t\tnew MockContextKeyService(),\n\t\t\t\tstorage,\n\t\t\t\tds.add(new TestProfileService(new MockContextKeyService(), ds.add(new TestStorageService()))),\n\t\t\t\tNullTelemetryService,\n\t\t\t));\n\n\t\t\tassert.strictEqual(0, results.results.length);\n\t\t\tawait timeout(10); // allow load promise to resolve\n\t\t\tassert.strictEqual(1, results.results.length);\n\n\t\t\tconst [rehydrated, actual] = results.getStateById(tests.root.id)!;\n\t\t\tconst expected: any = { ...r.getStateById(tests.root.id)! };\n\t\t\texpected.item.uri = actual.item.uri;\n\t\t\texpected.item.children = undefined;\n\t\t\texpected.retired = true;\n\t\t\tdelete expected.children;\n\t\t\tassert.deepStrictEqual(actual, { ...expected });\n\t\t\tassert.deepStrictEqual(rehydrated.counts, r.counts);\n\t\t\tassert.strictEqual(typeof rehydrated.completedAt, 'number');\n\t\t});\n\n\t\ttest('clears results but keeps ongoing tests', async () => {\n\t\t\tresults.push(r);\n\t\t\tr.markComplete();\n\n\t\t\tconst r2 = results.push(new LiveTestResult(\n\t\t\t\t'',\n\t\t\t\tfalse,\n\t\t\t\tdefaultOpts([]),\n\t\t\t\tNullTelemetryService,\n\t\t\t));\n\t\t\tresults.clear();\n\n\t\t\tassert.deepStrictEqual(results.results, [r2]);\n\t\t});\n\n\t\ttest('keeps ongoing tests on top', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst r2 = results.push(new LiveTestResult(\n\t\t\t\t'',\n\t\t\t\tfalse,\n\t\t\t\tdefaultOpts([]),\n\t\t\t\tNullTelemetryService,\n\t\t\t));\n\n\t\t\tassert.deepStrictEqual(results.results, [r2, r]);\n\t\t\tr2.markComplete();\n\t\t\tassert.deepStrictEqual(results.results, [r, r2]);\n\t\t\tr.markComplete();\n\t\t\tassert.deepStrictEqual(results.results, [r, r2]);\n\t\t});\n\n\t\tconst makeHydrated = async (completedAt = 42, state = TestResultState.Passed) => new HydratedTestResult({\n\t\t\tasCanonicalUri(uri) {\n\t\t\t\treturn uri;\n\t\t\t},\n\t\t} as IUriIdentityService, {\n\t\t\tcompletedAt,\n\t\t\tid: 'some-id',\n\t\t\ttasks: [{ id: 't', name: undefined, ctrlId: 'ctrl', hasCoverage: false }],\n\t\t\tname: 'hello world',\n\t\t\trequest: defaultOpts([]),\n\t\t\titems: [{\n\t\t\t\t...(await getInitializedMainTestCollection()).getNodeById(new TestId(['ctrlId', 'id-a']).toString())!,\n\t\t\t\ttasks: [{ state, duration: 0, messages: [] }],\n\t\t\t\tcomputedState: state,\n\t\t\t\townComputedState: state,\n\t\t\t}]\n\t\t});\n\n\t\ttest('pushes hydrated results', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated = await makeHydrated();\n\t\t\tresults.push(hydrated);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated]);\n\t\t});\n\n\t\ttest('inserts in correct order', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated1 = await makeHydrated();\n\t\t\tresults.push(hydrated1);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated1]);\n\t\t});\n\n\t\ttest('inserts in correct order 2', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated1 = await makeHydrated();\n\t\t\tresults.push(hydrated1);\n\t\t\tconst hydrated2 = await makeHydrated(30);\n\t\t\tresults.push(hydrated2);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated1, hydrated2]);\n\t\t});\n\t});\n\n\ttest('resultItemParents', function () {\n\t\tassert.deepStrictEqual([...resultItemParents(r, r.getStateById(new TestId(['ctrlId', 'id-a', 'id-aa']).toString())!)], [\n\t\t\tr.getStateById(new TestId(['ctrlId', 'id-a', 'id-aa']).toString()),\n\t\t\tr.getStateById(new TestId(['ctrlId', 'id-a']).toString()),\n\t\t\tr.getStateById(new TestId(['ctrlId']).toString()),\n\t\t]);\n\n\t\tassert.deepStrictEqual([...resultItemParents(r, r.getStateById(tests.root.id)!)], [\n\t\t\tr.getStateById(tests.root.id),\n\t\t]);\n\t});\n\n\tsuite('output controller', () => {\n\t\ttest('reads live output ranges', async () => {\n\t\t\tconst ctrl = new TaskRawOutput();\n\n\t\t\tctrl.append(VSBuffer.fromString('12345'));\n\t\t\tctrl.append(VSBuffer.fromString('67890'));\n\t\t\tctrl.append(VSBuffer.fromString('12345'));\n\t\t\tctrl.append(VSBuffer.fromString('67890'));\n\n\t\t\tassert.deepStrictEqual(ctrl.getRange(0, 5), VSBuffer.fromString('12345'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(5, 5), VSBuffer.fromString('67890'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(7, 6), VSBuffer.fromString('890123'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(15, 5), VSBuffer.fromString('67890'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(15, 10), VSBuffer.fromString('67890'));\n\t\t});\n\n\t\ttest('corrects offsets for marked ranges', async () => {\n\t\t\tconst ctrl = new TaskRawOutput();\n\n\t\t\tconst a1 = ctrl.append(VSBuffer.fromString('12345'), 1);\n\t\t\tconst a2 = ctrl.append(VSBuffer.fromString('67890'), 1234);\n\t\t\tconst a3 = ctrl.append(VSBuffer.fromString('with new line\\r\\n'), 4);\n\n\t\t\tassert.deepStrictEqual(ctrl.getRange(a1.offset, a1.length), VSBuffer.fromString('\\x1b]633;SetMark;Id=s1;Hidden\\x0712345\\x1b]633;SetMark;Id=e1;Hidden\\x07'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(a2.offset, a2.length), VSBuffer.fromString('\\x1b]633;SetMark;Id=s1234;Hidden\\x0767890\\x1b]633;SetMark;Id=e1234;Hidden\\x07'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(a3.offset, a3.length), VSBuffer.fromString('\\x1b]633;SetMark;Id=s4;Hidden\\x07with new line\\x1b]633;SetMark;Id=e4;Hidden\\x07\\r\\n'));\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;AACxC,SAAS,+CAA+C;AACxD,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAC/B,SAAS,4BAA4B;AACrC,SAAS,2BAA2B;AACpC,SAAS,cAAc;AACvB,SAAS,0BAA0B;AACnC,SAAS,oBAAoB,gBAAgB,eAAe,sBAAsB,4BAA4B,yBAAyB;AACvI,SAAS,yBAAyB;AAClC,SAAS,oBAAoB,6BAA6B;AAC1D,SAAS,gBAAgB,wBAAwB,gBAAgB,iBAAiB,4BAA4B;AAC9G,SAAS,uBAAuB;AAChC,SAAS,oBAAoB,kCAAkC,iBAAiB;AAChF,SAAS,0BAA0B;AAEnC,MAAM,oCAAoC,MAAM;AAC/C,QAAM,cAAc,wBAAC,OAAiC,CAAC,GAAG,EAAE,EAAE,IAAI,OAAK,EAAE,KAAK,KAAK,EAAE,KAAK,GAAtE;AACpB,QAAM,mBAAmB,6BAAM,CAAC,GAAG,OAAO,EACxC,IAAI,QAAM,EAAE,QAAQ,EAAE,QAAQ,OAAO,EAAE,KAAK,KAAK,MAAM,EAAE,GADlC;AAGzB,MAAI;AACJ,MAAI,UAAU,oBAAI,IAA0B;AAC5C,MAAI;AAEJ,QAAM,cAAc,wBAAC,aAA+C;AAAA,IACnE,OAAO,qBAAqB;AAAA,IAC5B,SAAS,CAAC;AAAA,MACT,WAAW;AAAA,MACX,cAAc;AAAA,MACd;AAAA,IACD,CAAC;AAAA,EACF,IAPoB;AAAA,EASpB,MAAM,2BAA2B,eAAe;AAAA,IA1CjD,OA0CiD;AAAA;AAAA;AAAA,IAC/C,YACC,IACA,SACA,SACC;AACD,YAAM,IAAI,SAAS,SAAS,oBAAoB;AAChD,SAAG,IAAI,IAAI;AAAA,IACZ;AAAA,IAEO,oBAAoB,OAAwB,QAAgB,MAA+D;AACjI,WAAK,cAAc,OAAO,QAAQ,IAAI;AAAA,IACvC;AAAA,EACD;AAEA,QAAM,KAAK,wCAAwC;AAEnD,QAAM,YAAY;AACjB,cAAU,oBAAI,IAAI;AAClB,QAAI,GAAG,IAAI,IAAI;AAAA,MACd;AAAA,MACA;AAAA,MACA,YAAY,CAAC,MAAM,CAAC;AAAA,IACrB,CAAC;AAED,OAAG,IAAI,EAAE,SAAS,OAAK,QAAQ,IAAI,CAAC,CAAC,CAAC;AACtC,MAAE,QAAQ,EAAE,IAAI,KAAK,MAAM,KAAK,SAAS,MAAM,QAAQ,OAAO,CAAC;AAE/D,YAAQ,GAAG,IAAI,UAAU,OAAO,CAAC;AACjC,UAAM,MAAM,GAAG,IAAI,IAAI,wBAAwB,CAAC;AAChD,UAAM,KAAK,MAAM,QAAQ,KAAK;AAAA,MAC7B,QAAQ,QAAQ,MAAM,OAAO,MAAM,KAAK,IAAI,QAAQ,CAAC,EAAE,KAAK,MAAM,IAAI;AAAA,MACtE,QAAQ,KAAM,IAAI,KAAK,EAAE,KAAK,MAAM,KAAK;AAAA,IAC1C,CAAC;AACD,QAAI,OAAO;AAGX,QAAI,CAAC,IAAI;AACR,YAAM,IAAI,MAAM,sCAAsC,KAAK,UAAU,MAAM,YAAY,CAAC,CAAC;AAAA,IAC1F;AAEA,MAAE,kBAAkB,UAAU;AAAA,MAC7B,MAAM,KAAK,WAAW;AAAA,MACtB,MAAM,KAAK,SAAS,IAAI,MAAM,EAAG,WAAW;AAAA,MAC5C,MAAM,KAAK,SAAS,IAAI,MAAM,EAAG,SAAS,IAAI,OAAO,EAAG,WAAW;AAAA,IACpE,CAAC;AAED,MAAE,kBAAkB,UAAU;AAAA,MAC7B,MAAM,KAAK,SAAS,IAAI,MAAM,EAAG,WAAW;AAAA,MAC5C,MAAM,KAAK,SAAS,IAAI,MAAM,EAAG,SAAS,IAAI,OAAO,EAAG,WAAW;AAAA,IACpE,CAAC;AAAA,EACF,CAAC;AAID,QAAM,kBAAkB,MAAM;AAC7B,SAAK,wCAAwC,YAAY;AACxD,aAAO,gBAAgB,YAAY,IAAI;AAAA,QACtC;AAAA,QACA;AAAA,QACA,YAAY,CAAC,MAAM,CAAC;AAAA,MACrB,EAAE,KAAK,GAAG,CAAC,CAAC;AAAA,IACb,CAAC;AAED,SAAK,4BAA4B,MAAM;AACtC,aAAO,gBAAgB,iBAAiB,GAAG,CAAC,CAAC;AAAA,IAC9C,CAAC;AAED,SAAK,mDAAmD,MAAM;AAC7D,aAAO,gBAAgB,YAAY,EAAE,KAAK,GAAG,CAAC,KAAK,MAAM,MAAM,MAAM,CAAC;AAAA,IACvE,CAAC;AAED,SAAK,iCAAiC,MAAM;AAC3C,YAAM,IAAI,gBAAgB;AAC1B,QAAE,gBAAgB,KAAK,IAAI;AAC3B,aAAO,gBAAgB,EAAE,QAAQ,CAAC;AAAA,IACnC,CAAC;AAED,SAAK,iBAAiB,MAAM;AAC3B,cAAQ,MAAM;AACd,QAAE,oBAAoB,gBAAgB,QAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,UAAU,MAAM;AACpF,YAAM,IAAI,gBAAgB;AAC1B,QAAE,gBAAgB,KAAK,IAAI;AAC3B,QAAE,gBAAgB,MAAM,IAAI;AAC5B,aAAO,gBAAgB,EAAE,QAAQ,CAAC;AAElC,QAAE,oBAAoB,gBAAgB,QAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,UAAU,MAAM;AACpF,YAAM,KAAK,gBAAgB;AAC3B,SAAG,gBAAgB,KAAK,IAAI;AAC5B,SAAG,gBAAgB,MAAM,IAAI;AAC7B,aAAO,gBAAgB,EAAE,QAAQ,EAAE;AAEnC,aAAO,gBAAgB,EAAE,aAAa,IAAI,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE,SAAS,CAAC,GAAG,kBAAkB,gBAAgB,MAAM;AAC1H,aAAO,gBAAgB,EAAE,aAAa,IAAI,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE,SAAS,CAAC,GAAG,MAAM,CAAC,EAAE,OAAO,gBAAgB,MAAM;AACxH,aAAO,gBAAgB,iBAAiB,GAAG;AAAA,QAC1C,EAAE,OAAO,KAAK,QAAQ,2BAA2B,eAAe;AAAA,QAChE,EAAE,OAAO,QAAQ,QAAQ,2BAA2B,oBAAoB;AAAA,QACxE,EAAE,OAAO,MAAM,QAAQ,2BAA2B,eAAe;AAAA,QACjE,EAAE,OAAO,MAAM,QAAQ,2BAA2B,eAAe;AAAA,QAEjE,EAAE,OAAO,KAAK,QAAQ,2BAA2B,eAAe;AAAA,QAChE,EAAE,OAAO,QAAQ,QAAQ,2BAA2B,oBAAoB;AAAA,QACxE,EAAE,OAAO,MAAM,QAAQ,2BAA2B,eAAe;AAAA,QACjE,EAAE,OAAO,MAAM,QAAQ,2BAA2B,eAAe;AAAA,MAClE,CAAC;AAAA,IACF,CAAC;AAED,SAAK,eAAe,MAAM;AACzB,cAAQ,MAAM;AACd,YAAM,SAAS,IAAI,OAAO,CAAC,UAAU,QAAQ,OAAO,CAAC,EAAE,SAAS;AAChE,QAAE,YAAY,QAAQ,KAAK,gBAAgB,OAAO;AAClD,YAAM,IAAI,gBAAgB;AAC1B,QAAE,gBAAgB,OAAO,IAAI;AAC7B,QAAE,gBAAgB,KAAK,IAAI;AAC3B,aAAO,gBAAgB,EAAE,QAAQ,CAAC;AAClC,aAAO,gBAAgB,EAAE,aAAa,MAAM,GAAG,kBAAkB,gBAAgB,OAAO;AAExF,aAAO,gBAAgB,EAAE,aAAa,MAAM,KAAK,EAAE,GAAG,eAAe,gBAAgB,OAAO;AAC5F,aAAO,gBAAgB,iBAAiB,GAAG;AAAA,QAC1C,EAAE,OAAO,MAAM,QAAQ,2BAA2B,eAAe;AAAA,QACjE,EAAE,OAAO,KAAK,QAAQ,2BAA2B,oBAAoB;AAAA,QACrE,EAAE,OAAO,QAAQ,QAAQ,2BAA2B,oBAAoB;AAAA,MACzE,CAAC;AAED,QAAE,YAAY,QAAQ,KAAK,gBAAgB,MAAM;AACjD,aAAO,gBAAgB,EAAE,aAAa,MAAM,GAAG,kBAAkB,gBAAgB,MAAM;AAEvF,QAAE,YAAY,QAAQ,KAAK,gBAAgB,OAAO;AAClD,aAAO,gBAAgB,EAAE,aAAa,MAAM,GAAG,kBAAkB,gBAAgB,OAAO;AAExF,QAAE,YAAY,QAAQ,KAAK,gBAAgB,MAAM;AACjD,aAAO,gBAAgB,EAAE,aAAa,MAAM,GAAG,kBAAkB,gBAAgB,OAAO;AAAA,IACzF,CAAC;AAED,SAAK,uBAAuB,MAAM;AACjC,cAAQ,MAAM;AACd,QAAE,YAAY,IAAI,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE,SAAS,GAAG,KAAK,gBAAgB,OAAO;AACrF,YAAM,IAAI,gBAAgB;AAC1B,QAAE,gBAAgB,KAAK,IAAI;AAC3B,aAAO,gBAAgB,EAAE,QAAQ,CAAC;AAClC,aAAO,gBAAgB,EAAE,aAAa,IAAI,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE,SAAS,CAAC,GAAG,MAAS;AAAA,IAC5F,CAAC;AAED,SAAK,gBAAgB,MAAM;AAC1B,QAAE,oBAAoB,gBAAgB,QAAQ,KAAK,MAAM,IAAI;AAC7D,QAAE,YAAY,IAAI,OAAO,CAAC,UAAU,QAAQ,OAAO,CAAC,EAAE,SAAS,GAAG,KAAK,gBAAgB,MAAM;AAC7F,cAAQ,MAAM;AAEd,QAAE,aAAa;AAEf,YAAM,IAAI,gBAAgB;AAC1B,QAAE,gBAAgB,KAAK,IAAI;AAC3B,QAAE,gBAAgB,MAAM,IAAI;AAC5B,aAAO,gBAAgB,EAAE,QAAQ,CAAC;AAElC,aAAO,gBAAgB,EAAE,aAAa,MAAM,KAAK,EAAE,GAAG,kBAAkB,gBAAgB,KAAK;AAC7F,aAAO,gBAAgB,EAAE,aAAa,IAAI,OAAO,CAAC,UAAU,QAAQ,OAAO,CAAC,EAAE,SAAS,CAAC,GAAG,kBAAkB,gBAAgB,MAAM;AAAA,IACpI,CAAC;AAAA,EACF,CAAC;AAED,QAAM,WAAW,MAAM;AACtB,QAAI;AACJ,QAAI;AAAA,IAEJ,MAAM,8BAA8B,kBAAkB;AAAA,MA9MxD,OA8MwD;AAAA;AAAA;AAAA,MAClC,mBAAmB,EAAE,UAAU,6BAAM,KAAK,mBAAmB,GAA9B,YAAgC;AAAA,IACnF;AAEA,UAAM,MAAM;AACX,gBAAU,GAAG,IAAI,IAAI,sBAAsB;AAAA,QAC1C,eAAe,KAAK;AACnB,iBAAO;AAAA,QACR;AAAA,MACD,GAA0B,GAAG,IAAI,IAAI,mBAAmB,CAAC,GAAG,IAAI,eAAe,CAAC,CAAC;AACjF,gBAAU,GAAG,IAAI,IAAI;AAAA,QACpB,IAAI,sBAAsB;AAAA,QAC1B;AAAA,QACA,GAAG,IAAI,IAAI,mBAAmB,IAAI,sBAAsB,GAAG,GAAG,IAAI,IAAI,mBAAmB,CAAC,CAAC,CAAC;AAAA,QAC5F;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAED,SAAK,qBAAqB,MAAM;AAC/B,cAAQ,KAAK,CAAC;AACd,aAAO,gBAAgB,QAAQ,SAAS,CAAC,CAAC,CAAC;AAAA,IAC5C,CAAC;AAED,SAAK,8BAA8B,YAAY;AAC9C,cAAQ,KAAK,CAAC;AACd,QAAE,YAAY,IAAI,OAAO,CAAC,UAAU,QAAQ,OAAO,CAAC,EAAE,SAAS,GAAG,KAAK,gBAAgB,QAAQ,EAAE;AACjG,QAAE,aAAa;AACf,YAAM,QAAQ,EAAE;AAEhB,gBAAU,GAAG,IAAI,IAAI;AAAA,QACpB,IAAI,sBAAsB;AAAA,QAC1B;AAAA,QACA,GAAG,IAAI,IAAI,mBAAmB,IAAI,sBAAsB,GAAG,GAAG,IAAI,IAAI,mBAAmB,CAAC,CAAC,CAAC;AAAA,QAC5F;AAAA,MACD,CAAC;AAED,aAAO,YAAY,GAAG,QAAQ,QAAQ,MAAM;AAC5C,YAAM,QAAQ,EAAE;AAChB,aAAO,YAAY,GAAG,QAAQ,QAAQ,MAAM;AAE5C,YAAM,CAAC,YAAY,MAAM,IAAI,QAAQ,aAAa,MAAM,KAAK,EAAE;AAC/D,YAAM,WAAgB,EAAE,GAAG,EAAE,aAAa,MAAM,KAAK,EAAE,EAAG;AAC1D,eAAS,KAAK,MAAM,OAAO,KAAK;AAChC,eAAS,KAAK,WAAW;AACzB,eAAS,UAAU;AACnB,aAAO,SAAS;AAChB,aAAO,gBAAgB,QAAQ,EAAE,GAAG,SAAS,CAAC;AAC9C,aAAO,gBAAgB,WAAW,QAAQ,EAAE,MAAM;AAClD,aAAO,YAAY,OAAO,WAAW,aAAa,QAAQ;AAAA,IAC3D,CAAC;AAED,SAAK,0CAA0C,YAAY;AAC1D,cAAQ,KAAK,CAAC;AACd,QAAE,aAAa;AAEf,YAAM,KAAK,QAAQ,KAAK,IAAI;AAAA,QAC3B;AAAA,QACA;AAAA,QACA,YAAY,CAAC,CAAC;AAAA,QACd;AAAA,MACD,CAAC;AACD,cAAQ,MAAM;AAEd,aAAO,gBAAgB,QAAQ,SAAS,CAAC,EAAE,CAAC;AAAA,IAC7C,CAAC;AAED,SAAK,8BAA8B,YAAY;AAC9C,cAAQ,KAAK,CAAC;AACd,YAAM,KAAK,QAAQ,KAAK,IAAI;AAAA,QAC3B;AAAA,QACA;AAAA,QACA,YAAY,CAAC,CAAC;AAAA,QACd;AAAA,MACD,CAAC;AAED,aAAO,gBAAgB,QAAQ,SAAS,CAAC,IAAI,CAAC,CAAC;AAC/C,SAAG,aAAa;AAChB,aAAO,gBAAgB,QAAQ,SAAS,CAAC,GAAG,EAAE,CAAC;AAC/C,QAAE,aAAa;AACf,aAAO,gBAAgB,QAAQ,SAAS,CAAC,GAAG,EAAE,CAAC;AAAA,IAChD,CAAC;AAED,UAAM,eAAe,8BAAO,cAAc,IAAI,QAAQ,gBAAgB,WAAW,IAAI,mBAAmB;AAAA,MACvG,eAAe,KAAK;AACnB,eAAO;AAAA,MACR;AAAA,IACD,GAA0B;AAAA,MACzB;AAAA,MACA,IAAI;AAAA,MACJ,OAAO,CAAC,EAAE,IAAI,KAAK,MAAM,QAAW,QAAQ,QAAQ,aAAa,MAAM,CAAC;AAAA,MACxE,MAAM;AAAA,MACN,SAAS,YAAY,CAAC,CAAC;AAAA,MACvB,OAAO,CAAC;AAAA,QACP,IAAI,MAAM,iCAAiC,GAAG,YAAY,IAAI,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE,SAAS,CAAC;AAAA,QACnG,OAAO,CAAC,EAAE,OAAO,UAAU,GAAG,UAAU,CAAC,EAAE,CAAC;AAAA,QAC5C,eAAe;AAAA,QACf,kBAAkB;AAAA,MACnB,CAAC;AAAA,IACF,CAAC,GAhBoB;AAkBrB,SAAK,2BAA2B,YAAY;AAC3C,cAAQ,KAAK,CAAC;AACd,YAAM,WAAW,MAAM,aAAa;AACpC,cAAQ,KAAK,QAAQ;AACrB,aAAO,gBAAgB,QAAQ,SAAS,CAAC,GAAG,QAAQ,CAAC;AAAA,IACtD,CAAC;AAED,SAAK,4BAA4B,YAAY;AAC5C,cAAQ,KAAK,CAAC;AACd,YAAM,YAAY,MAAM,aAAa;AACrC,cAAQ,KAAK,SAAS;AACtB,aAAO,gBAAgB,QAAQ,SAAS,CAAC,GAAG,SAAS,CAAC;AAAA,IACvD,CAAC;AAED,SAAK,8BAA8B,YAAY;AAC9C,cAAQ,KAAK,CAAC;AACd,YAAM,YAAY,MAAM,aAAa;AACrC,cAAQ,KAAK,SAAS;AACtB,YAAM,YAAY,MAAM,aAAa,EAAE;AACvC,cAAQ,KAAK,SAAS;AACtB,aAAO,gBAAgB,QAAQ,SAAS,CAAC,GAAG,WAAW,SAAS,CAAC;AAAA,IAClE,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qBAAqB,WAAY;AACrC,WAAO,gBAAgB,CAAC,GAAG,kBAAkB,GAAG,EAAE,aAAa,IAAI,OAAO,CAAC,UAAU,QAAQ,OAAO,CAAC,EAAE,SAAS,CAAC,CAAE,CAAC,GAAG;AAAA,MACtH,EAAE,aAAa,IAAI,OAAO,CAAC,UAAU,QAAQ,OAAO,CAAC,EAAE,SAAS,CAAC;AAAA,MACjE,EAAE,aAAa,IAAI,OAAO,CAAC,UAAU,MAAM,CAAC,EAAE,SAAS,CAAC;AAAA,MACxD,EAAE,aAAa,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC;AAAA,IACjD,CAAC;AAED,WAAO,gBAAgB,CAAC,GAAG,kBAAkB,GAAG,EAAE,aAAa,MAAM,KAAK,EAAE,CAAE,CAAC,GAAG;AAAA,MACjF,EAAE,aAAa,MAAM,KAAK,EAAE;AAAA,IAC7B,CAAC;AAAA,EACF,CAAC;AAED,QAAM,qBAAqB,MAAM;AAChC,SAAK,4BAA4B,YAAY;AAC5C,YAAM,OAAO,IAAI,cAAc;AAE/B,WAAK,OAAO,SAAS,WAAW,OAAO,CAAC;AACxC,WAAK,OAAO,SAAS,WAAW,OAAO,CAAC;AACxC,WAAK,OAAO,SAAS,WAAW,OAAO,CAAC;AACxC,WAAK,OAAO,SAAS,WAAW,OAAO,CAAC;AAExC,aAAO,gBAAgB,KAAK,SAAS,GAAG,CAAC,GAAG,SAAS,WAAW,OAAO,CAAC;AACxE,aAAO,gBAAgB,KAAK,SAAS,GAAG,CAAC,GAAG,SAAS,WAAW,OAAO,CAAC;AACxE,aAAO,gBAAgB,KAAK,SAAS,GAAG,CAAC,GAAG,SAAS,WAAW,QAAQ,CAAC;AACzE,aAAO,gBAAgB,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,WAAW,OAAO,CAAC;AACzE,aAAO,gBAAgB,KAAK,SAAS,IAAI,EAAE,GAAG,SAAS,WAAW,OAAO,CAAC;AAAA,IAC3E,CAAC;AAED,SAAK,sCAAsC,YAAY;AACtD,YAAM,OAAO,IAAI,cAAc;AAE/B,YAAM,KAAK,KAAK,OAAO,SAAS,WAAW,OAAO,GAAG,CAAC;AACtD,YAAM,KAAK,KAAK,OAAO,SAAS,WAAW,OAAO,GAAG,IAAI;AACzD,YAAM,KAAK,KAAK,OAAO,SAAS,WAAW,mBAAmB,GAAG,CAAC;AAElE,aAAO,gBAAgB,KAAK,SAAS,GAAG,QAAQ,GAAG,MAAM,GAAG,SAAS,WAAW,yEAAyE,CAAC;AAC1J,aAAO,gBAAgB,KAAK,SAAS,GAAG,QAAQ,GAAG,MAAM,GAAG,SAAS,WAAW,+EAA+E,CAAC;AAChK,aAAO,gBAAgB,KAAK,SAAS,GAAG,QAAQ,GAAG,MAAM,GAAG,SAAS,WAAW,qFAAqF,CAAC;AAAA,IACvK,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
