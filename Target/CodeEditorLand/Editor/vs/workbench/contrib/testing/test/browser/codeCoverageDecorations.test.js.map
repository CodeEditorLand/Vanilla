{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/browser/codeCoverageDecorations.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { assertSnapshot } from '../../../../../base/test/common/snapshot.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Position } from '../../../../../editor/common/core/position.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { CoverageDetailsModel } from '../../browser/codeCoverageDecorations.js';\nimport { CoverageDetails, DetailType } from '../../common/testTypes.js';\n\nsuite('Code Coverage Decorations', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst textModel = { getValueInRange: () => '' } as any as ITextModel;\n\tconst assertRanges = async (model: CoverageDetailsModel) => await assertSnapshot(model.ranges.map(r => ({\n\t\trange: r.range.toString(),\n\t\tcount: r.metadata.detail.type === DetailType.Branch ? r.metadata.detail.detail.branches![r.metadata.detail.branch].count : r.metadata.detail.count,\n\t})));\n\n\ttest('CoverageDetailsModel#1', async () => {\n\t\t// Create some sample coverage details\n\t\tconst details: CoverageDetails[] = [\n\t\t\t{ location: new Range(1, 0, 5, 0), type: DetailType.Statement, count: 1 },\n\t\t\t{ location: new Range(2, 0, 3, 0), type: DetailType.Statement, count: 2 },\n\t\t\t{ location: new Range(4, 0, 6, 0), type: DetailType.Statement, branches: [{ location: new Range(3, 0, 7, 0), count: 3 }], count: 4 },\n\t\t];\n\n\t\t// Create a new CoverageDetailsModel instance\n\t\tconst model = new CoverageDetailsModel(details, textModel);\n\n\t\t// Verify that the ranges are generated correctly\n\t\tawait assertRanges(model);\n\t});\n\n\ttest('CoverageDetailsModel#2', async () => {\n\t\t// Create some sample coverage details\n\t\tconst details: CoverageDetails[] = [\n\t\t\t{ location: new Range(1, 0, 5, 0), type: DetailType.Statement, count: 1 },\n\t\t\t{ location: new Range(2, 0, 4, 0), type: DetailType.Statement, count: 2 },\n\t\t\t{ location: new Range(3, 0, 3, 5), type: DetailType.Statement, count: 3 },\n\t\t];\n\n\t\t// Create a new CoverageDetailsModel instance\n\t\tconst model = new CoverageDetailsModel(details, textModel);\n\n\t\t// Verify that the ranges are generated correctly\n\t\tawait assertRanges(model);\n\t});\n\n\ttest('CoverageDetailsModel#3', async () => {\n\t\t// Create some sample coverage details\n\t\tconst details: CoverageDetails[] = [\n\t\t\t{ location: new Range(1, 0, 5, 0), type: DetailType.Statement, count: 1 },\n\t\t\t{ location: new Range(2, 0, 3, 0), type: DetailType.Statement, count: 2 },\n\t\t\t{ location: new Range(4, 0, 5, 0), type: DetailType.Statement, count: 3 },\n\t\t];\n\n\t\t// Create a new CoverageDetailsModel instance\n\t\tconst model = new CoverageDetailsModel(details, textModel);\n\n\t\t// Verify that the ranges are generated correctly\n\t\tawait assertRanges(model);\n\t});\n\n\ttest('CoverageDetailsModel#4', async () => {\n\t\t// Create some sample coverage details\n\t\tconst details: CoverageDetails[] = [\n\t\t\t{ location: new Range(1, 0, 5, 0), type: DetailType.Statement, count: 1 },\n\t\t\t{ location: new Position(2, 0), type: DetailType.Statement, count: 2 },\n\t\t\t{ location: new Range(4, 0, 5, 0), type: DetailType.Statement, count: 3 },\n\t\t\t{ location: new Position(4, 3), type: DetailType.Statement, count: 4 },\n\t\t];\n\n\t\t// Create a new CoverageDetailsModel instance\n\t\tconst model = new CoverageDetailsModel(details, textModel);\n\n\t\t// Verify that the ranges are generated correctly\n\t\tawait assertRanges(model);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
