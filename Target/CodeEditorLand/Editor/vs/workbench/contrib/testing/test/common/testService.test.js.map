{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/common/testService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { TestId } from '../../common/testId.js';\nimport { simplifyTestsToExecute } from '../../common/testService.js';\nimport { getInitializedMainTestCollection, makeSimpleStubTree } from './testStubs.js';\n\nsuite('Workbench - Test Service', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('simplifyTestsToExecute', () => {\n\t\tconst tree1 = {\n\t\t\ta: {\n\t\t\t\tb1: {\n\t\t\t\t\tc1: {\n\t\t\t\t\t\td: undefined\n\t\t\t\t\t},\n\t\t\t\t\tc2: {\n\t\t\t\t\t\td: undefined\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tb2: undefined,\n\t\t\t}\n\t\t} as const;\n\n\t\ttest('noop on single item', async () => {\n\t\t\tconst c = await getInitializedMainTestCollection(makeSimpleStubTree(tree1));\n\n\t\t\tconst t = simplifyTestsToExecute(c, [\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1']).toString())!\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(t.map(t => t.item.extId.toString()), [\n\t\t\t\tnew TestId(['ctrlId', 'a', 'b1']).toString()\n\t\t\t]);\n\t\t});\n\n\t\ttest('goes to common root 1', async () => {\n\t\t\tconst c = await getInitializedMainTestCollection(makeSimpleStubTree(tree1));\n\n\t\t\tconst t = simplifyTestsToExecute(c, [\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1', 'c1', 'd']).toString())!,\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1', 'c2']).toString())!,\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(t.map(t => t.item.extId.toString()), [\n\t\t\t\tnew TestId(['ctrlId', 'a', 'b1']).toString()\n\t\t\t]);\n\t\t});\n\n\t\ttest('goes to common root 2', async () => {\n\t\t\tconst c = await getInitializedMainTestCollection(makeSimpleStubTree(tree1));\n\n\t\t\tconst t = simplifyTestsToExecute(c, [\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1', 'c1']).toString())!,\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1']).toString())!,\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(t.map(t => t.item.extId.toString()), [\n\t\t\t\tnew TestId(['ctrlId', 'a', 'b1']).toString()\n\t\t\t]);\n\t\t});\n\n\t\ttest('goes to common root 3', async () => {\n\t\t\tconst c = await getInitializedMainTestCollection(makeSimpleStubTree(tree1));\n\n\t\t\tconst t = simplifyTestsToExecute(c, [\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1', 'c1', 'd']).toString())!,\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1', 'c2']).toString())!,\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(t.map(t => t.item.extId.toString()), [\n\t\t\t\tnew TestId(['ctrlId', 'a', 'b1']).toString()\n\t\t\t]);\n\t\t});\n\n\t\ttest('goes to common root 4', async () => {\n\t\t\tconst c = await getInitializedMainTestCollection(makeSimpleStubTree(tree1));\n\n\t\t\tconst t = simplifyTestsToExecute(c, [\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b2']).toString())!,\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1']).toString())!,\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(t.map(t => t.item.extId.toString()), [\n\t\t\t\tnew TestId(['ctrlId']).toString()\n\t\t\t]);\n\t\t});\n\n\t\ttest('no-op divergent trees', async () => {\n\t\t\tconst c = await getInitializedMainTestCollection(makeSimpleStubTree(tree1));\n\n\t\t\tconst t = simplifyTestsToExecute(c, [\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b1', 'c2']).toString())!,\n\t\t\t\tc.getNodeById(new TestId(['ctrlId', 'a', 'b2']).toString())!,\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(t.map(t => t.item.extId.toString()), [\n\t\t\t\tnew TestId(['ctrlId', 'a', 'b1', 'c2']).toString(),\n\t\t\t\tnew TestId(['ctrlId', 'a', 'b2']).toString(),\n\t\t\t]);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["t"]
}
