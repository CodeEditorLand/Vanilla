{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/common/testProfileService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { TestProfileService } from '../../common/testProfileService.js';\nimport { ITestRunProfile, TestRunProfileBitset } from '../../common/testTypes.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('Workbench - TestProfileService', () => {\n\tlet t: TestProfileService;\n\tlet ds: DisposableStore;\n\tlet idCounter = 0;\n\n\tteardown(() => {\n\t\tds.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tidCounter = 0;\n\t\tds = new DisposableStore();\n\t\tt = ds.add(new TestProfileService(\n\t\t\tnew MockContextKeyService(),\n\t\t\tds.add(new TestStorageService()),\n\t\t));\n\t});\n\n\tconst addProfile = (profile: Partial<ITestRunProfile>) => {\n\t\tconst p: ITestRunProfile = {\n\t\t\tcontrollerId: 'ctrlId',\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\tisDefault: true,\n\t\t\tlabel: 'profile',\n\t\t\tprofileId: idCounter++,\n\t\t\thasConfigurationHandler: false,\n\t\t\ttag: null,\n\t\t\tsupportsContinuousRun: false,\n\t\t\t...profile,\n\t\t};\n\n\t\tt.addProfile({ id: 'ctrlId' } as any, p);\n\t\treturn p;\n\t};\n\n\tconst assertGroupDefaults = (group: TestRunProfileBitset, expected: ITestRunProfile[]) => {\n\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(group).map(p => p.label), expected.map(e => e.label));\n\t};\n\n\tconst expectProfiles = (expected: ITestRunProfile[], actual: string[]) => {\n\t\tconst e = expected.map(e => e.label).sort();\n\t\tconst a = actual.sort();\n\t\tassert.deepStrictEqual(e, a);\n\t};\n\n\ttest('getGroupDefaultProfiles', () => {\n\t\taddProfile({ isDefault: true, group: TestRunProfileBitset.Debug, label: 'a' });\n\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'b' });\n\t\taddProfile({ isDefault: true, group: TestRunProfileBitset.Run, label: 'c' });\n\t\taddProfile({ isDefault: true, group: TestRunProfileBitset.Run, label: 'd', controllerId: '2' });\n\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'e', controllerId: '2' });\n\t\texpectProfiles(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), ['c', 'd']);\n\t\texpectProfiles(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), ['a']);\n\t});\n\n\tsuite('setGroupDefaultProfiles', () => {\n\t\ttest('applies simple changes', () => {\n\t\t\tconst p1 = addProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'a' });\n\t\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'b' });\n\t\t\tconst p3 = addProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'c' });\n\t\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'd' });\n\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p3]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Run, [p3]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Debug, [p1]);\n\t\t});\n\n\t\ttest('syncs labels if same', () => {\n\t\t\tconst p1 = addProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'a' });\n\t\t\tconst p2 = addProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'b' });\n\t\t\tconst p3 = addProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'a' });\n\t\t\tconst p4 = addProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'b' });\n\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p3]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Run, [p3]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Debug, [p1]);\n\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Debug, [p2]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Run, [p4]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Debug, [p2]);\n\t\t});\n\n\t\ttest('does not mess up sync for multiple controllers', () => {\n\t\t\t// ctrl a and b both of have their own labels. ctrl c does not and should be unaffected\n\t\t\tconst p1 = addProfile({ isDefault: false, controllerId: 'a', group: TestRunProfileBitset.Debug, label: 'a' });\n\t\t\tconst p2 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Debug, label: 'b1' });\n\t\t\tconst p3 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Debug, label: 'b2' });\n\t\t\tconst p4 = addProfile({ isDefault: false, controllerId: 'c', group: TestRunProfileBitset.Debug, label: 'c1' });\n\n\t\t\tconst p5 = addProfile({ isDefault: false, controllerId: 'a', group: TestRunProfileBitset.Run, label: 'a' });\n\t\t\tconst p6 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Run, label: 'b1' });\n\t\t\tconst p7 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Run, label: 'b2' });\n\t\t\tconst p8 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Run, label: 'b3' });\n\n\t\t\t// same profile on both\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Debug, [p3]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Run, [p7]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Debug, [p3]);\n\n\t\t\t// different profile, other should be unaffected\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p8]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Run, [p8]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Debug, [p5]);\n\n\t\t\t// multiple changes in one go, with unmatched c\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Debug, [p1, p2, p4]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Run, [p5, p6, p8]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Debug, [p1, p2, p4]);\n\n\t\t\t// identity\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p5, p6, p8]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Run, [p5, p6, p8]);\n\t\t\tassertGroupDefaults(TestRunProfileBitset.Debug, [p1, p2, p4]);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["e"]
}
