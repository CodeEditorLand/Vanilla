{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/common/testResultStorage.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { range } from '../../../../../base/common/arrays.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { ITestResult, LiveTestResult } from '../../common/testResult.js';\nimport { InMemoryResultStorage, RETAIN_MAX_RESULTS } from '../../common/testResultStorage.js';\nimport { TestRunProfileBitset } from '../../common/testTypes.js';\nimport { testStubs } from './testStubs.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('Workbench - Test Result Storage', () => {\n\tlet storage: InMemoryResultStorage;\n\tlet ds: DisposableStore;\n\n\tconst makeResult = (taskName = 't') => {\n\t\tconst t = ds.add(new LiveTestResult(\n\t\t\t'',\n\t\t\ttrue,\n\t\t\t{ targets: [], group: TestRunProfileBitset.Run },\n\t\t\tNullTelemetryService,\n\t\t));\n\n\t\tt.addTask({ id: taskName, name: 'n', running: true, ctrlId: 'ctrlId' });\n\t\tconst tests = ds.add(testStubs.nested());\n\t\ttests.expand(tests.root.id, Infinity);\n\t\tt.addTestChainToRun('ctrlId', [\n\t\t\ttests.root.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.children.get('id-aa')!.toTestItem(),\n\t\t]);\n\n\t\tt.markComplete();\n\t\treturn t;\n\t};\n\n\tconst assertStored = async (stored: ITestResult[]) =>\n\t\tassert.deepStrictEqual((await storage.read()).map(r => r.id), stored.map(s => s.id));\n\n\tsetup(async () => {\n\t\tds = new DisposableStore();\n\t\tstorage = ds.add(new InMemoryResultStorage({\n\t\t\tasCanonicalUri(uri) {\n\t\t\t\treturn uri;\n\t\t\t},\n\t\t} as IUriIdentityService, ds.add(new TestStorageService()), new NullLogService()));\n\t});\n\n\tteardown(() => ds.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('stores a single result', async () => {\n\t\tconst r = range(5).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r);\n\t});\n\n\ttest('deletes old results', async () => {\n\t\tconst r = range(5).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tconst r2 = [makeResult(), ...r.slice(0, 3)];\n\t\tawait storage.persist(r2);\n\t\tawait assertStored(r2);\n\t});\n\n\ttest('limits stored results', async () => {\n\t\tconst r = range(100).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r.slice(0, RETAIN_MAX_RESULTS));\n\t});\n\n\ttest('limits stored result by budget', async () => {\n\t\tconst r = range(100).map(() => makeResult('a'.repeat(2048)));\n\t\tawait storage.persist(r);\n\t\tconst length = (await storage.read()).length;\n\t\tassert.strictEqual(true, length < 50);\n\t});\n\n\ttest('always stores the min number of results', async () => {\n\t\tconst r = range(20).map(() => makeResult('a'.repeat(1024 * 10)));\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r.slice(0, 16));\n\t});\n\n\ttest('takes into account existing stored bytes', async () => {\n\t\tconst r = range(10).map(() => makeResult('a'.repeat(1024 * 10)));\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r);\n\n\t\tconst r2 = [...r, ...range(10).map(() => makeResult('a'.repeat(1024 * 10)))];\n\t\tawait storage.persist(r2);\n\t\tawait assertStored(r2.slice(0, 16));\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
