{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/common/testExplorerFilterState.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { InMemoryStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { TestExplorerFilterState, TestFilterTerm } from '../../common/testExplorerFilterState.js';\n\nsuite('TestExplorerFilterState', () => {\n\tlet t: TestExplorerFilterState;\n\tlet ds: DisposableStore;\n\n\tteardown(() => {\n\t\tds.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tds = new DisposableStore();\n\t\tt = ds.add(new TestExplorerFilterState(ds.add(new InMemoryStorageService())));\n\t});\n\n\tconst assertFilteringFor = (expected: { [T in TestFilterTerm]?: boolean }) => {\n\t\tfor (const [term, expectation] of Object.entries(expected)) {\n\t\t\tassert.strictEqual(t.isFilteringFor(term as TestFilterTerm), expectation, `expected filtering for ${term} === ${expectation}`);\n\t\t}\n\t};\n\n\tconst termFiltersOff = {\n\t\t[TestFilterTerm.Failed]: false,\n\t\t[TestFilterTerm.Executed]: false,\n\t\t[TestFilterTerm.CurrentDoc]: false,\n\t\t[TestFilterTerm.Hidden]: false,\n\t};\n\n\ttest('filters simple globs', () => {\n\t\tt.setText('hello, !world');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'hello', include: true }, { text: 'world', include: false }]);\n\t\tassert.deepStrictEqual(t.includeTags, new Set());\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t\tassertFilteringFor(termFiltersOff);\n\t});\n\n\ttest('filters to patterns', () => {\n\t\tt.setText('@doc');\n\t\tassert.deepStrictEqual(t.globList, []);\n\t\tassert.deepStrictEqual(t.includeTags, new Set());\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t\tassertFilteringFor({\n\t\t\t...termFiltersOff,\n\t\t\t[TestFilterTerm.CurrentDoc]: true,\n\t\t});\n\t});\n\n\ttest('filters to tags', () => {\n\t\tt.setText('@hello:world !@foo:bar');\n\t\tassert.deepStrictEqual(t.globList, []);\n\t\tassert.deepStrictEqual(t.includeTags, new Set(['hello\\0world']));\n\t\tassert.deepStrictEqual(t.excludeTags, new Set(['foo\\0bar']));\n\t\tassertFilteringFor(termFiltersOff);\n\t});\n\n\ttest('filters to mixed terms and tags', () => {\n\t\tt.setText('@hello:world foo, !bar @doc !@foo:bar');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'foo', include: true }, { text: 'bar', include: false }]);\n\t\tassert.deepStrictEqual(t.includeTags, new Set(['hello\\0world']));\n\t\tassert.deepStrictEqual(t.excludeTags, new Set(['foo\\0bar']));\n\t\tassertFilteringFor({\n\t\t\t...termFiltersOff,\n\t\t\t[TestFilterTerm.CurrentDoc]: true,\n\t\t});\n\t});\n\n\ttest('parses quotes', () => {\n\t\tt.setText('@hello:\"world\" @foo:\\'bar\\' baz');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'baz', include: true }]);\n\t\tassert.deepStrictEqual([...t.includeTags], ['hello\\0world', 'foo\\0bar']);\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t});\n\n\ttest('parses quotes with escapes', () => {\n\t\tt.setText('@hello:\"world\\\\\"1\" foo');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'foo', include: true }]);\n\t\tassert.deepStrictEqual([...t.includeTags], ['hello\\0world\"1']);\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
