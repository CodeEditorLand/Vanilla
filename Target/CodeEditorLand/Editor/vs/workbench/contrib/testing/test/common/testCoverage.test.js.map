{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/common/testCoverage.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { SinonSandbox, createSandbox } from 'sinon';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { onObservableChange } from '../../common/observableUtils.js';\nimport { ICoverageAccessor, TestCoverage } from '../../common/testCoverage.js';\nimport { LiveTestResult } from '../../common/testResult.js';\nimport { IFileCoverage } from '../../common/testTypes.js';\n\nsuite('TestCoverage', () => {\n\tlet sandbox: SinonSandbox;\n\tlet coverageAccessor: ICoverageAccessor;\n\tlet testCoverage: TestCoverage;\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tsandbox = createSandbox();\n\t\tcoverageAccessor = {\n\t\t\tgetCoverageDetails: sandbox.stub().resolves([]),\n\t\t};\n\t\ttestCoverage = new TestCoverage({} as LiveTestResult, 'taskId', { extUri: { ignorePathCasing: () => true } } as any, coverageAccessor);\n\t});\n\n\tteardown(() => {\n\t\tsandbox.restore();\n\t});\n\n\tfunction addTests() {\n\t\tconst raw1: IFileCoverage = {\n\t\t\tid: '1',\n\t\t\turi: URI.file('/path/to/file'),\n\t\t\tstatement: { covered: 10, total: 20 },\n\t\t\tbranch: { covered: 5, total: 10 },\n\t\t\tdeclaration: { covered: 2, total: 5 },\n\t\t};\n\n\t\ttestCoverage.append(raw1, undefined);\n\n\t\tconst raw2: IFileCoverage = {\n\t\t\tid: '1',\n\t\t\turi: URI.file('/path/to/file2'),\n\t\t\tstatement: { covered: 5, total: 10 },\n\t\t\tbranch: { covered: 1, total: 5 },\n\t\t};\n\n\t\ttestCoverage.append(raw2, undefined);\n\n\t\treturn { raw1, raw2 };\n\t}\n\n\ttest('should look up file coverage', async () => {\n\t\tconst { raw1 } = addTests();\n\n\t\tconst fileCoverage = testCoverage.getUri(raw1.uri);\n\t\tassert.equal(fileCoverage?.id, raw1.id);\n\t\tassert.deepEqual(fileCoverage?.statement, raw1.statement);\n\t\tassert.deepEqual(fileCoverage?.branch, raw1.branch);\n\t\tassert.deepEqual(fileCoverage?.declaration, raw1.declaration);\n\n\t\tassert.strictEqual(testCoverage.getComputedForUri(raw1.uri), testCoverage.getUri(raw1.uri));\n\t\tassert.strictEqual(testCoverage.getComputedForUri(URI.file('/path/to/x')), undefined);\n\t\tassert.strictEqual(testCoverage.getUri(URI.file('/path/to/x')), undefined);\n\t});\n\n\ttest('should compute coverage for directories', async () => {\n\t\tconst { raw1 } = addTests();\n\t\tconst dirCoverage = testCoverage.getComputedForUri(URI.file('/path/to'));\n\t\tassert.deepEqual(dirCoverage?.statement, { covered: 15, total: 30 });\n\t\tassert.deepEqual(dirCoverage?.branch, { covered: 6, total: 15 });\n\t\tassert.deepEqual(dirCoverage?.declaration, raw1.declaration);\n\t});\n\n\ttest('should incrementally diff updates to existing files', async () => {\n\t\taddTests();\n\n\t\tconst raw3: IFileCoverage = {\n\t\t\tid: '1',\n\t\t\turi: URI.file('/path/to/file'),\n\t\t\tstatement: { covered: 12, total: 24 },\n\t\t\tbranch: { covered: 7, total: 10 },\n\t\t\tdeclaration: { covered: 2, total: 5 },\n\t\t};\n\n\t\ttestCoverage.append(raw3, undefined);\n\n\t\tconst fileCoverage = testCoverage.getUri(raw3.uri);\n\t\tassert.deepEqual(fileCoverage?.statement, raw3.statement);\n\t\tassert.deepEqual(fileCoverage?.branch, raw3.branch);\n\t\tassert.deepEqual(fileCoverage?.declaration, raw3.declaration);\n\n\t\tconst dirCoverage = testCoverage.getComputedForUri(URI.file('/path/to'));\n\t\tassert.deepEqual(dirCoverage?.statement, { covered: 17, total: 34 });\n\t\tassert.deepEqual(dirCoverage?.branch, { covered: 8, total: 15 });\n\t\tassert.deepEqual(dirCoverage?.declaration, raw3.declaration);\n\t});\n\n\ttest('should emit changes', async () => {\n\t\tconst changes: string[][] = [];\n\t\tds.add(onObservableChange(testCoverage.didAddCoverage, value =>\n\t\t\tchanges.push(value.map(v => v.value!.uri.toString()))));\n\n\t\taddTests();\n\n\t\tassert.deepStrictEqual(changes, [\n\t\t\t[\n\t\t\t\t\"file:///\",\n\t\t\t\t\"file:///\",\n\t\t\t\t\"file:///\",\n\t\t\t\t\"file:///path\",\n\t\t\t\t\"file:///path/to\",\n\t\t\t\t\"file:///path/to/file\",\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"file:///\",\n\t\t\t\t\"file:///\",\n\t\t\t\t\"file:///\",\n\t\t\t\t\"file:///path\",\n\t\t\t\t\"file:///path/to\",\n\t\t\t\t\"file:///path/to/file2\",\n\t\t\t],\n\t\t]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
