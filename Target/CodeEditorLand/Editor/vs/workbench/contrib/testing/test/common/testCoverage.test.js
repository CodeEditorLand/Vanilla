import a from"assert";import{createSandbox as c}from"sinon";import{URI as r}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../../base/test/common/utils.js";import{onObservableChange as p}from"../../common/observableUtils.js";import{TestCoverage as f}from"../../common/testCoverage.js";import"../../common/testResult.js";import"../../common/testTypes.js";suite("TestCoverage",()=>{let n,d,o;const s=u();setup(()=>{n=c(),d={getCoverageDetails:n.stub().resolves([])},o=new f({},"taskId",{extUri:{ignorePathCasing:()=>!0}},d)}),teardown(()=>{n.restore()});function l(){const e={id:"1",uri:r.file("/path/to/file"),statement:{covered:10,total:20},branch:{covered:5,total:10},declaration:{covered:2,total:5}};o.append(e,void 0);const t={id:"1",uri:r.file("/path/to/file2"),statement:{covered:5,total:10},branch:{covered:1,total:5}};return o.append(t,void 0),{raw1:e,raw2:t}}test("should look up file coverage",async()=>{const{raw1:e}=l(),t=o.getUri(e.uri);a.equal(t?.id,e.id),a.deepEqual(t?.statement,e.statement),a.deepEqual(t?.branch,e.branch),a.deepEqual(t?.declaration,e.declaration),a.strictEqual(o.getComputedForUri(e.uri),o.getUri(e.uri)),a.strictEqual(o.getComputedForUri(r.file("/path/to/x")),void 0),a.strictEqual(o.getUri(r.file("/path/to/x")),void 0)}),test("should compute coverage for directories",async()=>{const{raw1:e}=l(),t=o.getComputedForUri(r.file("/path/to"));a.deepEqual(t?.statement,{covered:15,total:30}),a.deepEqual(t?.branch,{covered:6,total:15}),a.deepEqual(t?.declaration,e.declaration)}),test("should incrementally diff updates to existing files",async()=>{l();const e={id:"1",uri:r.file("/path/to/file"),statement:{covered:12,total:24},branch:{covered:7,total:10},declaration:{covered:2,total:5}};o.append(e,void 0);const t=o.getUri(e.uri);a.deepEqual(t?.statement,e.statement),a.deepEqual(t?.branch,e.branch),a.deepEqual(t?.declaration,e.declaration);const i=o.getComputedForUri(r.file("/path/to"));a.deepEqual(i?.statement,{covered:17,total:34}),a.deepEqual(i?.branch,{covered:8,total:15}),a.deepEqual(i?.declaration,e.declaration)}),test("should emit changes",async()=>{const e=[];s.add(p(o.didAddCoverage,t=>e.push(t.map(i=>i.value.uri.toString())))),l(),a.deepStrictEqual(e,[["file:///","file:///","file:///","file:///path","file:///path/to","file:///path/to/file"],["file:///","file:///","file:///","file:///path","file:///path/to","file:///path/to/file2"]])})});
