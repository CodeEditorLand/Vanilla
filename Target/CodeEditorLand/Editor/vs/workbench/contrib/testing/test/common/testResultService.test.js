import r from"assert";import{timeout as y}from"../../../../../base/common/async.js";import{VSBuffer as i}from"../../../../../base/common/buffer.js";import{CancellationTokenSource as x}from"../../../../../base/common/cancellation.js";import{ensureNoDisposablesAreLeakedInTestSuite as P}from"../../../../../base/test/common/utils.js";import{MockContextKeyService as f}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{NullLogService as U}from"../../../../../platform/log/common/log.js";import{NullTelemetryService as w}from"../../../../../platform/telemetry/common/telemetryUtils.js";import"../../../../../platform/uriIdentity/common/uriIdentity.js";import{TestId as u}from"../../common/testId.js";import{TestProfileService as b}from"../../common/testProfileService.js";import{HydratedTestResult as O,LiveTestResult as q,TaskRawOutput as k,TestResultItemChangeReason as S,resultItemParents as v}from"../../common/testResult.js";import{TestResultService as B}from"../../common/testResultService.js";import{InMemoryResultStorage as M}from"../../common/testResultStorage.js";import{TestResultState as s,TestRunProfileBitset as A}from"../../common/testTypes.js";import{makeEmptyCounts as I}from"../../common/testingStates.js";import{getInitializedMainTestCollection as H,testStubs as L}from"./testStubs.js";import{TestStorageService as E}from"../../../../test/common/workbenchTestServices.js";suite("Workbench - Test Results Service",()=>{const R=e=>[...e].map(a=>a.item.label).sort(),T=()=>[...m].map(e=>({reason:e.reason,label:e.item.item.label}));let t,m=new Set,d;const h=e=>({group:A.Run,targets:[{profileId:0,controllerId:"ctrlId",testIds:e}]});class C extends q{constructor(a,c,o){super(a,c,o,w),l.add(this)}setAllToStatePublic(a,c,o){this.setAllToState(a,c,o)}}const l=P();setup(async()=>{m=new Set,t=l.add(new C("foo",!0,h(["id-a"]))),l.add(t.onChange(c=>m.add(c))),t.addTask({id:"t",name:"n",running:!0,ctrlId:"ctrl"}),d=l.add(L.nested());const e=l.add(new x),a=await Promise.race([Promise.resolve(d.expand(d.root.id,1/0)).then(()=>!0),y(1e3,e.token).then(()=>!1)]);if(e.cancel(),!a)throw new Error("timed out while expanding, diff: "+JSON.stringify(d.collectDiff()));t.addTestChainToRun("ctrlId",[d.root.toTestItem(),d.root.children.get("id-a").toTestItem(),d.root.children.get("id-a").children.get("id-aa").toTestItem()]),t.addTestChainToRun("ctrlId",[d.root.children.get("id-a").toTestItem(),d.root.children.get("id-a").children.get("id-ab").toTestItem()])}),suite("LiveTestResult",()=>{test("is empty if no tests are yet present",async()=>{r.deepStrictEqual(R(new C("foo",!1,h(["id-a"])).tests),[])}),test("initially queues nothing",()=>{r.deepStrictEqual(T(),[])}),test("initializes with the subtree of requested tests",()=>{r.deepStrictEqual(R(t.tests),["a","aa","ab","root"])}),test("initializes with valid counts",()=>{const e=I();e[s.Unset]=4,r.deepStrictEqual(t.counts,e)}),test("setAllToState",()=>{m.clear(),t.setAllToStatePublic(s.Queued,"t",(c,o)=>o.item.label!=="root");const e=I();e[s.Unset]=1,e[s.Queued]=3,r.deepStrictEqual(t.counts,e),t.setAllToStatePublic(s.Failed,"t",(c,o)=>o.item.label!=="root");const a=I();a[s.Unset]=1,a[s.Failed]=3,r.deepStrictEqual(t.counts,a),r.deepStrictEqual(t.getStateById(new u(["ctrlId","id-a"]).toString())?.ownComputedState,s.Failed),r.deepStrictEqual(t.getStateById(new u(["ctrlId","id-a"]).toString())?.tasks[0].state,s.Failed),r.deepStrictEqual(T(),[{label:"a",reason:S.OwnStateChange},{label:"root",reason:S.ComputedStateChange},{label:"aa",reason:S.OwnStateChange},{label:"ab",reason:S.OwnStateChange},{label:"a",reason:S.OwnStateChange},{label:"root",reason:S.ComputedStateChange},{label:"aa",reason:S.OwnStateChange},{label:"ab",reason:S.OwnStateChange}])}),test("updateState",()=>{m.clear();const e=new u(["ctrlId","id-a","id-aa"]).toString();t.updateState(e,"t",s.Running);const a=I();a[s.Running]=1,a[s.Unset]=3,r.deepStrictEqual(t.counts,a),r.deepStrictEqual(t.getStateById(e)?.ownComputedState,s.Running),r.deepStrictEqual(t.getStateById(d.root.id)?.computedState,s.Running),r.deepStrictEqual(T(),[{label:"aa",reason:S.OwnStateChange},{label:"a",reason:S.ComputedStateChange},{label:"root",reason:S.ComputedStateChange}]),t.updateState(e,"t",s.Passed),r.deepStrictEqual(t.getStateById(e)?.ownComputedState,s.Passed),t.updateState(e,"t",s.Errored),r.deepStrictEqual(t.getStateById(e)?.ownComputedState,s.Errored),t.updateState(e,"t",s.Passed),r.deepStrictEqual(t.getStateById(e)?.ownComputedState,s.Errored)}),test("ignores outside run",()=>{m.clear(),t.updateState(new u(["ctrlId","id-b"]).toString(),"t",s.Running);const e=I();e[s.Unset]=4,r.deepStrictEqual(t.counts,e),r.deepStrictEqual(t.getStateById(new u(["ctrlId","id-b"]).toString()),void 0)}),test("markComplete",()=>{t.setAllToStatePublic(s.Queued,"t",()=>!0),t.updateState(new u(["ctrlId","id-a","id-aa"]).toString(),"t",s.Passed),m.clear(),t.markComplete();const e=I();e[s.Unset]=3,e[s.Passed]=1,r.deepStrictEqual(t.counts,e),r.deepStrictEqual(t.getStateById(d.root.id)?.ownComputedState,s.Unset),r.deepStrictEqual(t.getStateById(new u(["ctrlId","id-a","id-aa"]).toString())?.ownComputedState,s.Passed)})}),suite("service",()=>{let e,a;class c extends B{persistScheduler={schedule:()=>this.persistImmediately()}}setup(()=>{e=l.add(new M({asCanonicalUri(n){return n}},l.add(new E),new U)),a=l.add(new c(new f,e,l.add(new b(new f,l.add(new E))),w))}),test("pushes new result",()=>{a.push(t),r.deepStrictEqual(a.results,[t])}),test("serializes and re-hydrates",async()=>{a.push(t),t.updateState(new u(["ctrlId","id-a","id-aa"]).toString(),"t",s.Passed,42),t.markComplete(),await y(10),a=l.add(new B(new f,e,l.add(new b(new f,l.add(new E))),w)),r.strictEqual(0,a.results.length),await y(10),r.strictEqual(1,a.results.length);const[n,p]=a.getStateById(d.root.id),g={...t.getStateById(d.root.id)};g.item.uri=p.item.uri,g.item.children=void 0,g.retired=!0,delete g.children,r.deepStrictEqual(p,{...g}),r.deepStrictEqual(n.counts,t.counts),r.strictEqual(typeof n.completedAt,"number")}),test("clears results but keeps ongoing tests",async()=>{a.push(t),t.markComplete();const n=a.push(new q("",!1,h([]),w));a.clear(),r.deepStrictEqual(a.results,[n])}),test("keeps ongoing tests on top",async()=>{a.push(t);const n=a.push(new q("",!1,h([]),w));r.deepStrictEqual(a.results,[n,t]),n.markComplete(),r.deepStrictEqual(a.results,[t,n]),t.markComplete(),r.deepStrictEqual(a.results,[t,n])});const o=async(n=42,p=s.Passed)=>new O({asCanonicalUri(g){return g}},{completedAt:n,id:"some-id",tasks:[{id:"t",name:void 0,ctrlId:"ctrl",hasCoverage:!1}],name:"hello world",request:h([]),items:[{...(await H()).getNodeById(new u(["ctrlId","id-a"]).toString()),tasks:[{state:p,duration:0,messages:[]}],computedState:p,ownComputedState:p}]});test("pushes hydrated results",async()=>{a.push(t);const n=await o();a.push(n),r.deepStrictEqual(a.results,[t,n])}),test("inserts in correct order",async()=>{a.push(t);const n=await o();a.push(n),r.deepStrictEqual(a.results,[t,n])}),test("inserts in correct order 2",async()=>{a.push(t);const n=await o();a.push(n);const p=await o(30);a.push(p),r.deepStrictEqual(a.results,[t,n,p])})}),test("resultItemParents",function(){r.deepStrictEqual([...v(t,t.getStateById(new u(["ctrlId","id-a","id-aa"]).toString()))],[t.getStateById(new u(["ctrlId","id-a","id-aa"]).toString()),t.getStateById(new u(["ctrlId","id-a"]).toString()),t.getStateById(new u(["ctrlId"]).toString())]),r.deepStrictEqual([...v(t,t.getStateById(d.root.id))],[t.getStateById(d.root.id)])}),suite("output controller",()=>{test("reads live output ranges",async()=>{const e=new k;e.append(i.fromString("12345")),e.append(i.fromString("67890")),e.append(i.fromString("12345")),e.append(i.fromString("67890")),r.deepStrictEqual(e.getRange(0,5),i.fromString("12345")),r.deepStrictEqual(e.getRange(5,5),i.fromString("67890")),r.deepStrictEqual(e.getRange(7,6),i.fromString("890123")),r.deepStrictEqual(e.getRange(15,5),i.fromString("67890")),r.deepStrictEqual(e.getRange(15,10),i.fromString("67890"))}),test("corrects offsets for marked ranges",async()=>{const e=new k,a=e.append(i.fromString("12345"),1),c=e.append(i.fromString("67890"),1234),o=e.append(i.fromString(`with new line\r
`),4);r.deepStrictEqual(e.getRange(a.offset,a.length),i.fromString("\x1B]633;SetMark;Id=s1;Hidden\x0712345\x1B]633;SetMark;Id=e1;Hidden\x07")),r.deepStrictEqual(e.getRange(c.offset,c.length),i.fromString("\x1B]633;SetMark;Id=s1234;Hidden\x0767890\x1B]633;SetMark;Id=e1234;Hidden\x07")),r.deepStrictEqual(e.getRange(o.offset,o.length),i.fromString(`\x1B]633;SetMark;Id=s4;Hidden\x07with new line\x1B]633;SetMark;Id=e4;Hidden\x07\r
`))})})});
