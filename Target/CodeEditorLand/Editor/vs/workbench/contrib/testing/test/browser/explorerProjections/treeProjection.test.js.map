{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/browser/explorerProjections/treeProjection.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Emitter } from '../../../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { TreeProjection } from '../../../browser/explorerProjections/treeProjection.js';\nimport { TestId } from '../../../common/testId.js';\nimport { TestResultItemChange, TestResultItemChangeReason } from '../../../common/testResult.js';\nimport { TestDiffOpType, TestItemExpandState, TestResultItem, TestResultState } from '../../../common/testTypes.js';\nimport { TestTreeTestHarness } from '../testObjectTree.js';\nimport { TestTestItem } from '../../common/testStubs.js';\n\nclass TestHierarchicalByLocationProjection extends TreeProjection {\n}\n\nsuite('Workbench - Testing Explorer Hierarchal by Location Projection', () => {\n\tlet harness: TestTreeTestHarness<TestHierarchicalByLocationProjection>;\n\tlet onTestChanged: Emitter<TestResultItemChange>;\n\tlet resultsService: any;\n\tlet ds: DisposableStore;\n\n\tteardown(() => {\n\t\tds.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tds = new DisposableStore();\n\t\tonTestChanged = ds.add(new Emitter());\n\t\tresultsService = {\n\t\t\tresults: [],\n\t\t\tonResultsChanged: () => undefined,\n\t\t\tonTestChanged: onTestChanged.event,\n\t\t\tgetStateById: () => ({ state: { state: 0 }, computedState: 0 }),\n\t\t};\n\n\t\tharness = ds.add(new TestTreeTestHarness(l => new TestHierarchicalByLocationProjection({}, l, resultsService as any)));\n\t});\n\n\ttest('renders initial tree', async () => {\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'a' }, { e: 'b' }\n\t\t]);\n\t});\n\n\ttest('expands children', async () => {\n\t\tharness.flush();\n\t\tharness.tree.expand(harness.projection.getElementByTestId(new TestId(['ctrlId', 'id-a']).toString())!);\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'aa' }, { e: 'ab' }] }, { e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates render if second test provider appears', async () => {\n\t\tharness.flush();\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.Expanded, item: new TestTestItem(new TestId(['ctrlId2']), 'c').toTestItem() },\n\t\t}, {\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrlId2', 'id-c']), 'ca').toTestItem() },\n\t\t});\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'c', children: [{ e: 'ca' }] },\n\t\t\t{ e: 'root', children: [{ e: 'a' }, { e: 'b' }] }\n\t\t]);\n\t});\n\n\ttest('updates nodes if they add children', async () => {\n\t\tharness.flush();\n\t\tharness.tree.expand(harness.projection.getElementByTestId(new TestId(['ctrlId', 'id-a']).toString())!);\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'aa' }, { e: 'ab' }] },\n\t\t\t{ e: 'b' }\n\t\t]);\n\n\t\tharness.c.root.children.get('id-a')!.children.add(new TestTestItem(new TestId(['ctrlId', 'id-a', 'id-ac']), 'ac'));\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'aa' }, { e: 'ab' }, { e: 'ac' }] },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates nodes if they remove children', async () => {\n\t\tharness.flush();\n\t\tharness.tree.expand(harness.projection.getElementByTestId(new TestId(['ctrlId', 'id-a']).toString())!);\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'aa' }, { e: 'ab' }] },\n\t\t\t{ e: 'b' }\n\t\t]);\n\n\t\tharness.c.root.children.get('id-a')!.children.delete('id-ab');\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'aa' }] },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('applies state changes', async () => {\n\t\tharness.flush();\n\n\t\tconst resultInState = (state: TestResultState): TestResultItem => ({\n\t\t\titem: {\n\t\t\t\textId: new TestId(['ctrlId', 'id-a']).toString(),\n\t\t\t\tbusy: false,\n\t\t\t\tdescription: null,\n\t\t\t\terror: null,\n\t\t\t\tlabel: 'a',\n\t\t\t\trange: null,\n\t\t\t\tsortText: null,\n\t\t\t\ttags: [],\n\t\t\t\turi: undefined,\n\t\t\t},\n\t\t\ttasks: [],\n\t\t\townComputedState: state,\n\t\t\tcomputedState: state,\n\t\t\texpand: 0,\n\t\t\tcontrollerId: 'ctrl',\n\t\t});\n\n\t\t// Applies the change:\n\t\tresultsService.getStateById = () => [undefined, resultInState(TestResultState.Queued)];\n\t\tonTestChanged.fire({\n\t\t\treason: TestResultItemChangeReason.OwnStateChange,\n\t\t\tresult: null as any,\n\t\t\tpreviousState: TestResultState.Unset,\n\t\t\titem: resultInState(TestResultState.Queued),\n\t\t\tpreviousOwnDuration: undefined,\n\t\t});\n\t\tharness.projection.applyTo(harness.tree);\n\n\t\tassert.deepStrictEqual(harness.tree.getRendered('state'), [\n\t\t\t{ e: 'a', data: String(TestResultState.Queued) },\n\t\t\t{ e: 'b', data: String(TestResultState.Unset) }\n\t\t]);\n\n\t\t// Falls back if moved into unset state:\n\t\tresultsService.getStateById = () => [undefined, resultInState(TestResultState.Failed)];\n\t\tonTestChanged.fire({\n\t\t\treason: TestResultItemChangeReason.OwnStateChange,\n\t\t\tresult: null as any,\n\t\t\tpreviousState: TestResultState.Queued,\n\t\t\titem: resultInState(TestResultState.Unset),\n\t\t\tpreviousOwnDuration: undefined,\n\t\t});\n\t\tharness.projection.applyTo(harness.tree);\n\n\t\tassert.deepStrictEqual(harness.tree.getRendered('state'), [\n\t\t\t{ e: 'a', data: String(TestResultState.Failed) },\n\t\t\t{ e: 'b', data: String(TestResultState.Unset) }\n\t\t]);\n\t});\n\n\ttest('applies test changes (resort)', async () => {\n\t\tharness.flush();\n\t\tharness.tree.expand(harness.projection.getElementByTestId(new TestId(['ctrlId', 'id-a']).toString())!);\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'aa' }, { e: 'ab' }] }, { e: 'b' }\n\t\t]);\n\t\t// sortText causes order to change\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), item: { sortText: \"z\" } }\n\t\t}, {\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-ab']).toString(), item: { sortText: \"a\" } }\n\t\t});\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'ab' }, { e: 'aa' }] }, { e: 'b' }\n\t\t]);\n\t\t// label causes order to change\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), item: { sortText: undefined, label: \"z\" } }\n\t\t}, {\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-ab']).toString(), item: { sortText: undefined, label: \"a\" } }\n\t\t});\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'a' }, { e: 'z' }] }, { e: 'b' }\n\t\t]);\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), item: { label: \"a2\" } }\n\t\t}, {\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-ab']).toString(), item: { label: \"z2\" } }\n\t\t});\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'a2' }, { e: 'z2' }] }, { e: 'b' }\n\t\t]);\n\t});\n\n\ttest('applies test changes (error)', async () => {\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a' }, { e: 'b' }\n\t\t]);\n\t\t// sortText causes order to change\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), item: { error: \"bad\" } }\n\t\t});\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a' }, { e: 'b' }\n\t\t]);\n\t\tharness.tree.expand(harness.projection.getElementByTestId(new TestId(['ctrlId', 'id-a']).toString())!);\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'bad' }, { e: 'aa' }, { e: 'ab' }] }, { e: 'b' }\n\t\t]);\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), item: { error: \"badder\" } }\n\t\t});\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a', children: [{ e: 'badder' }, { e: 'aa' }, { e: 'ab' }] }, { e: 'b' }\n\t\t]);\n\n\t});\n\n\ttest('fixes #204805', async () => {\n\t\tharness.flush();\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Remove,\n\t\t\titemId: 'ctrlId',\n\t\t}, {\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrlId']), 'ctrl').toTestItem() },\n\t\t}, {\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrlId', 'a']), 'a').toTestItem() },\n\t\t});\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'a' }\n\t\t]);\n\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrlId', 'a', 'b']), 'b').toTestItem() },\n\t\t});\n\t\tharness.flush();\n\t\tharness.tree.expandAll();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'a', children: [{ e: 'b' }] }\n\t\t]);\n\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrlId', 'a', 'b', 'c']), 'c').toTestItem() },\n\t\t});\n\t\tharness.flush();\n\t\tharness.tree.expandAll();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'a', children: [{ e: 'b', children: [{ e: 'c' }] }] }\n\t\t]);\n\t});\n\n\ttest('fixes #213316 (single root)', async () => {\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'a' }, { e: 'b' }\n\t\t]);\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Remove,\n\t\t\titemId: new TestId(['ctrlId', 'id-a']).toString(),\n\t\t});\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('fixes #213316 (multi root)', async () => {\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.Expanded, item: new TestTestItem(new TestId(['ctrlId2']), 'c').toTestItem() },\n\t\t}, {\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrlId2', 'id-c']), 'ca').toTestItem() },\n\t\t});\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'c', children: [{ e: 'ca' }] },\n\t\t\t{ e: 'root', children: [{ e: 'a' }, { e: 'b' }] }\n\t\t]);\n\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Remove,\n\t\t\titemId: new TestId(['ctrlId', 'id-a']).toString(),\n\t\t});\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'c', children: [{ e: 'ca' }] },\n\t\t\t{ e: 'root', children: [{ e: 'b' }] }\n\t\t]);\n\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Remove,\n\t\t\titemId: new TestId(['ctrlId', 'id-b']).toString(),\n\t\t});\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'ca' }\n\t\t]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
