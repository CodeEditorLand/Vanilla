{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/browser/explorerProjections/nameProjection.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Emitter } from '../../../../../../base/common/event.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { ListProjection } from '../../../browser/explorerProjections/listProjection.js';\nimport { TestId } from '../../../common/testId.js';\nimport { TestResultItemChange } from '../../../common/testResult.js';\nimport { TestDiffOpType, TestItemExpandState } from '../../../common/testTypes.js';\nimport { TestTreeTestHarness } from '../testObjectTree.js';\nimport { TestTestItem } from '../../common/testStubs.js';\n\nsuite('Workbench - Testing Explorer Hierarchal by Name Projection', () => {\n\tlet harness: TestTreeTestHarness<ListProjection>;\n\tlet onTestChanged: Emitter<TestResultItemChange>;\n\tlet resultsService: any;\n\n\tteardown(() => {\n\t\tharness.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tonTestChanged = new Emitter();\n\t\tresultsService = {\n\t\t\tonResultsChanged: () => undefined,\n\t\t\tonTestChanged: onTestChanged.event,\n\t\t\tgetStateById: () => ({ state: { state: 0 }, computedState: 0 }),\n\t\t};\n\n\t\tharness = new TestTreeTestHarness(l => new ListProjection({}, l, resultsService as any));\n\t});\n\n\ttest('renders initial tree', () => {\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'aa' }, { e: 'ab' }, { e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates render if second test provider appears', async () => {\n\t\tharness.flush();\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.Expanded, item: new TestTestItem(new TestId(['ctrl2']), 'root2').toTestItem() },\n\t\t}, {\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrl2', 'id-c']), 'c', undefined).toTestItem() },\n\t\t});\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'root', children: [{ e: 'aa' }, { e: 'ab' }, { e: 'b' }] },\n\t\t\t{ e: 'root2', children: [{ e: 'c' }] },\n\t\t]);\n\t});\n\n\ttest('updates nodes if they add children', async () => {\n\t\tharness.flush();\n\n\t\tharness.c.root.children.get('id-a')!.children.add(new TestTestItem(new TestId(['ctrlId', 'id-a', 'id-ac']), 'ac'));\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'ab' },\n\t\t\t{ e: 'ac' },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates nodes if they remove children', async () => {\n\t\tharness.flush();\n\t\tharness.c.root.children.get('id-a')!.children.delete('id-ab');\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('swaps when node is no longer leaf', async () => {\n\t\tharness.flush();\n\t\tharness.c.root.children.get('id-b')!.children.add(new TestTestItem(new TestId(['ctrlId', 'id-b', 'id-ba']), 'ba'));\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'ab' },\n\t\t\t{ e: 'ba' },\n\t\t]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
