import t from"assert";import{Emitter as l}from"../../../../../../base/common/event.js";import{ensureNoDisposablesAreLeakedInTestSuite as c}from"../../../../../../base/test/common/utils.js";import{ListProjection as p}from"../../../browser/explorerProjections/listProjection.js";import{TestId as r}from"../../../common/testId.js";import"../../../common/testResult.js";import{TestDiffOpType as n,TestItemExpandState as i}from"../../../common/testTypes.js";import{TestTreeTestHarness as m}from"../testObjectTree.js";import{TestTestItem as s}from"../../common/testStubs.js";suite("Workbench - Testing Explorer Hierarchal by Name Projection",()=>{let e,a,d;teardown(()=>{e.dispose()}),c(),setup(()=>{a=new l,d={onResultsChanged:()=>{},onTestChanged:a.event,getStateById:()=>({state:{state:0},computedState:0})},e=new m(o=>new p({},o,d))}),test("renders initial tree",()=>{e.flush(),t.deepStrictEqual(e.tree.getRendered(),[{e:"aa"},{e:"ab"},{e:"b"}])}),test("updates render if second test provider appears",async()=>{e.flush(),e.pushDiff({op:n.Add,item:{controllerId:"ctrl2",expand:i.Expanded,item:new s(new r(["ctrl2"]),"root2").toTestItem()}},{op:n.Add,item:{controllerId:"ctrl2",expand:i.NotExpandable,item:new s(new r(["ctrl2","id-c"]),"c",void 0).toTestItem()}}),t.deepStrictEqual(e.flush(),[{e:"root",children:[{e:"aa"},{e:"ab"},{e:"b"}]},{e:"root2",children:[{e:"c"}]}])}),test("updates nodes if they add children",async()=>{e.flush(),e.c.root.children.get("id-a").children.add(new s(new r(["ctrlId","id-a","id-ac"]),"ac")),t.deepStrictEqual(e.flush(),[{e:"aa"},{e:"ab"},{e:"ac"},{e:"b"}])}),test("updates nodes if they remove children",async()=>{e.flush(),e.c.root.children.get("id-a").children.delete("id-ab"),t.deepStrictEqual(e.flush(),[{e:"aa"},{e:"b"}])}),test("swaps when node is no longer leaf",async()=>{e.flush(),e.c.root.children.get("id-b").children.add(new s(new r(["ctrlId","id-b","id-ba"]),"ba")),t.deepStrictEqual(e.flush(),[{e:"aa"},{e:"ab"},{e:"ba"}])})});
