import t from"assert";import{DisposableStore as u}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as c}from"../../../../../base/test/common/utils.js";import{InMemoryStorageService as n}from"../../../../../platform/storage/common/storage.js";import{TestExplorerFilterState as p,TestFilterTerm as l}from"../../common/testExplorerFilterState.js";suite("TestExplorerFilterState",()=>{let e,r;teardown(()=>{r.dispose()}),c(),setup(()=>{r=new u,e=r.add(new p(r.add(new n)))});const o=d=>{for(const[i,a]of Object.entries(d))t.strictEqual(e.isFilteringFor(i),a,`expected filtering for ${i} === ${a}`)},s={[l.Failed]:!1,[l.Executed]:!1,[l.CurrentDoc]:!1,[l.Hidden]:!1};test("filters simple globs",()=>{e.setText("hello, !world"),t.deepStrictEqual(e.globList,[{text:"hello",include:!0},{text:"world",include:!1}]),t.deepStrictEqual(e.includeTags,new Set),t.deepStrictEqual(e.excludeTags,new Set),o(s)}),test("filters to patterns",()=>{e.setText("@doc"),t.deepStrictEqual(e.globList,[]),t.deepStrictEqual(e.includeTags,new Set),t.deepStrictEqual(e.excludeTags,new Set),o({...s,[l.CurrentDoc]:!0})}),test("filters to tags",()=>{e.setText("@hello:world !@foo:bar"),t.deepStrictEqual(e.globList,[]),t.deepStrictEqual(e.includeTags,new Set(["hello\0world"])),t.deepStrictEqual(e.excludeTags,new Set(["foo\0bar"])),o(s)}),test("filters to mixed terms and tags",()=>{e.setText("@hello:world foo, !bar @doc !@foo:bar"),t.deepStrictEqual(e.globList,[{text:"foo",include:!0},{text:"bar",include:!1}]),t.deepStrictEqual(e.includeTags,new Set(["hello\0world"])),t.deepStrictEqual(e.excludeTags,new Set(["foo\0bar"])),o({...s,[l.CurrentDoc]:!0})}),test("parses quotes",()=>{e.setText(`@hello:"world" @foo:'bar' baz`),t.deepStrictEqual(e.globList,[{text:"baz",include:!0}]),t.deepStrictEqual([...e.includeTags],["hello\0world","foo\0bar"]),t.deepStrictEqual(e.excludeTags,new Set)}),test("parses quotes with escapes",()=>{e.setText('@hello:"world\\"1" foo'),t.deepStrictEqual(e.globList,[{text:"foo",include:!0}]),t.deepStrictEqual([...e.includeTags],['hello\0world"1']),t.deepStrictEqual(e.excludeTags,new Set)})});
