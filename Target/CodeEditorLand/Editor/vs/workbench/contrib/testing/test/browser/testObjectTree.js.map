{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/test/browser/testObjectTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ObjectTree } from '../../../../../base/browser/ui/tree/objectTree.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { IWorkspaceFoldersChangeEvent } from '../../../../../platform/workspace/common/workspace.js';\nimport { ITestTreeProjection, TestExplorerTreeElement, TestItemTreeElement, TestTreeErrorMessage } from '../../browser/explorerProjections/index.js';\nimport { MainThreadTestCollection } from '../../common/mainThreadTestCollection.js';\nimport { TestsDiff, TestsDiffOp } from '../../common/testTypes.js';\nimport { ITestService } from '../../common/testService.js';\nimport { testStubs } from '../common/testStubs.js';\nimport { ITreeRenderer, ITreeSorter } from '../../../../../base/browser/ui/tree/tree.js';\n\ntype SerializedTree = { e: string; children?: SerializedTree[]; data?: string };\n\nconst element = document.createElement('div');\nelement.style.height = '1000px';\nelement.style.width = '200px';\n\nclass TestObjectTree<T> extends ObjectTree<T, any> {\n\tconstructor(serializer: (node: T) => string, sorter?: ITreeSorter<T>) {\n\t\tsuper(\n\t\t\t'test',\n\t\t\telement,\n\t\t\t{\n\t\t\t\tgetHeight: () => 20,\n\t\t\t\tgetTemplateId: () => 'default'\n\t\t\t},\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tdisposeTemplate: ({ store }) => store.dispose(),\n\t\t\t\t\trenderElement: ({ depth, element }, _index, { container, store }) => {\n\t\t\t\t\t\tconst render = () => {\n\t\t\t\t\t\t\tcontainer.textContent = `${depth}:${serializer(element)}`;\n\t\t\t\t\t\t\tObject.assign(container.dataset, element);\n\t\t\t\t\t\t};\n\t\t\t\t\t\trender();\n\n\t\t\t\t\t\tif (element instanceof TestItemTreeElement) {\n\t\t\t\t\t\t\tstore.add(element.onChange(render));\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdisposeElement: (_el, _index, { store }) => store.clear(),\n\t\t\t\t\trenderTemplate: container => ({ container, store: new DisposableStore() }),\n\t\t\t\t\ttemplateId: 'default'\n\t\t\t\t} satisfies ITreeRenderer<T, any, { store: DisposableStore; container: HTMLElement }>\n\t\t\t],\n\t\t\t{\n\t\t\t\tsorter: sorter ?? {\n\t\t\t\t\tcompare: (a, b) => serializer(a).localeCompare(serializer(b))\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tthis.layout(1000, 200);\n\t}\n\n\tpublic getRendered(getProperty?: string) {\n\t\tconst elements = element.querySelectorAll<HTMLElement>('.monaco-tl-contents');\n\t\tconst sorted = [...elements].sort((a, b) => pos(a) - pos(b));\n\t\tconst chain: SerializedTree[] = [{ e: '', children: [] }];\n\t\tfor (const element of sorted) {\n\t\t\tconst [depthStr, label] = element.textContent!.split(':');\n\t\t\tconst depth = Number(depthStr);\n\t\t\tconst parent = chain[depth - 1];\n\t\t\tconst child: SerializedTree = { e: label };\n\t\t\tif (getProperty) {\n\t\t\t\tchild.data = element.dataset[getProperty];\n\t\t\t}\n\t\t\tparent.children = parent.children?.concat(child) ?? [child];\n\t\t\tchain[depth] = child;\n\t\t}\n\n\t\treturn chain[0].children;\n\t}\n}\n\nconst pos = (element: Element) => Number(element.parentElement!.parentElement!.getAttribute('aria-posinset'));\n\n\nclass ByLabelTreeSorter implements ITreeSorter<TestExplorerTreeElement> {\n\tpublic compare(a: TestExplorerTreeElement, b: TestExplorerTreeElement): number {\n\t\tif (a instanceof TestTreeErrorMessage || b instanceof TestTreeErrorMessage) {\n\t\t\treturn (a instanceof TestTreeErrorMessage ? -1 : 0) + (b instanceof TestTreeErrorMessage ? 1 : 0);\n\t\t}\n\n\t\tif (a instanceof TestItemTreeElement && b instanceof TestItemTreeElement && a.test.item.uri && b.test.item.uri && a.test.item.uri.toString() === b.test.item.uri.toString() && a.test.item.range && b.test.item.range) {\n\t\t\tconst delta = a.test.item.range.startLineNumber - b.test.item.range.startLineNumber;\n\t\t\tif (delta !== 0) {\n\t\t\t\treturn delta;\n\t\t\t}\n\t\t}\n\n\t\treturn (a.test.item.sortText || a.test.item.label).localeCompare(b.test.item.sortText || b.test.item.label);\n\t}\n}\n\n// names are hard\nexport class TestTreeTestHarness<T extends ITestTreeProjection = ITestTreeProjection> extends Disposable {\n\tprivate readonly onDiff = this._register(new Emitter<TestsDiff>());\n\tpublic readonly onFolderChange = this._register(new Emitter<IWorkspaceFoldersChangeEvent>());\n\tprivate isProcessingDiff = false;\n\tpublic readonly projection: T;\n\tpublic readonly tree: TestObjectTree<TestExplorerTreeElement>;\n\n\tconstructor(makeTree: (listener: ITestService) => T, public readonly c = testStubs.nested()) {\n\t\tsuper();\n\t\tthis._register(c);\n\t\tthis._register(this.c.onDidGenerateDiff(d => this.c.setDiff(d /* don't clear during testing */)));\n\n\t\tconst collection = new MainThreadTestCollection({ asCanonicalUri: u => u }, (testId, levels) => {\n\t\t\tthis.c.expand(testId, levels);\n\t\t\tif (!this.isProcessingDiff) {\n\t\t\t\tthis.onDiff.fire(this.c.collectDiff());\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t});\n\t\tthis._register(this.onDiff.event(diff => collection.apply(diff)));\n\n\t\tthis.projection = this._register(makeTree({\n\t\t\tcollection,\n\t\t\tonDidProcessDiff: this.onDiff.event,\n\t\t} as any));\n\t\tconst sorter = new ByLabelTreeSorter();\n\t\tthis.tree = this._register(new TestObjectTree(t => 'test' in t ? t.test.item.label : t.message.toString(), sorter));\n\t\tthis._register(this.tree.onDidChangeCollapseState(evt => {\n\t\t\tif (evt.node.element instanceof TestItemTreeElement) {\n\t\t\t\tthis.projection.expandElement(evt.node.element, evt.deep ? Infinity : 0);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic pushDiff(...diff: TestsDiffOp[]) {\n\t\tthis.onDiff.fire(diff);\n\t}\n\n\tpublic flush() {\n\t\tthis.isProcessingDiff = true;\n\t\twhile (this.c.currentDiff.length) {\n\t\t\tthis.onDiff.fire(this.c.collectDiff());\n\t\t}\n\t\tthis.isProcessingDiff = false;\n\n\t\tthis.projection.applyTo(this.tree);\n\t\treturn this.tree.getRendered();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["element"]
}
