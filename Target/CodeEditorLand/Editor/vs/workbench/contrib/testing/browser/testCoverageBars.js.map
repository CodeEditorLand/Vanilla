{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testCoverageBars.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { h } from \"../../../../base/browser/dom.js\";\nimport type {\n\tIManagedHover,\n\tIManagedHoverTooltipMarkdownString,\n} from \"../../../../base/browser/ui/hover/hover.js\";\nimport { getDefaultHoverDelegate } from \"../../../../base/browser/ui/hover/hoverDelegateFactory.js\";\nimport { MarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { Lazy } from \"../../../../base/common/lazy.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype ITransaction,\n\tautorun,\n\tobservableValue,\n} from \"../../../../base/common/observable.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IHoverService } from \"../../../../platform/hover/browser/hover.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tExplorerExtensions,\n\ttype IExplorerFileContribution,\n\ttype IExplorerFileContributionRegistry,\n} from \"../../files/browser/explorerFileContrib.js\";\nimport {\n\ttype ITestingCoverageBarThresholds,\n\tTestingConfigKeys,\n\tgetTestingConfiguration,\n\tobserveTestingConfiguration,\n} from \"../common/configuration.js\";\nimport type { AbstractFileCoverage } from \"../common/testCoverage.js\";\nimport { ITestCoverageService } from \"../common/testCoverageService.js\";\nimport * as coverUtils from \"./codeCoverageDisplayUtils.js\";\n\nexport interface TestCoverageBarsOptions {\n\t/**\n\t * Whether the bars should be shown in a more compact way, where only the\n\t * overall bar is shown and more details are given in the hover.\n\t */\n\tcompact: boolean;\n\t/**\n\t * Whether the overall stat is shown, defaults to true.\n\t */\n\toverall?: boolean;\n\t/**\n\t * Container in which is render the bars.\n\t */\n\tcontainer: HTMLElement;\n}\n\n/** Type that can be used to render coverage bars */\nexport type CoverageBarSource = Pick<\n\tAbstractFileCoverage,\n\t\"statement\" | \"branch\" | \"declaration\"\n>;\n\nexport class ManagedTestCoverageBars extends Disposable {\n\tprivate _coverage?: CoverageBarSource;\n\tprivate readonly el = new Lazy(() => {\n\t\tif (this.options.compact) {\n\t\t\tconst el = h(\".test-coverage-bars.compact\", [\n\t\t\t\th(\".tpc@overall\"),\n\t\t\t\th(\".bar@tpcBar\"),\n\t\t\t]);\n\t\t\tthis.attachHover(el.tpcBar, getOverallHoverText);\n\t\t\treturn el;\n\t\t} else {\n\t\t\tconst el = h(\".test-coverage-bars\", [\n\t\t\t\th(\".tpc@overall\"),\n\t\t\t\th(\".bar@statement\"),\n\t\t\t\th(\".bar@function\"),\n\t\t\t\th(\".bar@branch\"),\n\t\t\t]);\n\t\t\tthis.attachHover(el.statement, stmtCoverageText);\n\t\t\tthis.attachHover(el.function, fnCoverageText);\n\t\t\tthis.attachHover(el.branch, branchCoverageText);\n\t\t\treturn el;\n\t\t}\n\t});\n\n\tprivate readonly visibleStore = this._register(new DisposableStore());\n\tprivate readonly customHovers: IManagedHover[] = [];\n\n\t/** Gets whether coverage is currently visible for the resource. */\n\tpublic get visible() {\n\t\treturn !!this._coverage;\n\t}\n\n\tconstructor(\n\t\tprotected readonly options: TestCoverageBarsOptions,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate attachHover(\n\t\ttarget: HTMLElement,\n\t\tfactory: (\n\t\t\tcoverage: CoverageBarSource,\n\t\t) => string | IManagedHoverTooltipMarkdownString | undefined,\n\t) {\n\t\tthis._register(\n\t\t\tthis.hoverService.setupManagedHover(\n\t\t\t\tgetDefaultHoverDelegate(\"element\"),\n\t\t\t\ttarget,\n\t\t\t\t() => this._coverage && factory(this._coverage),\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic setCoverageInfo(coverage: CoverageBarSource | undefined) {\n\t\tconst ds = this.visibleStore;\n\t\tif (!coverage) {\n\t\t\tif (this._coverage) {\n\t\t\t\tthis._coverage = undefined;\n\t\t\t\tthis.customHovers.forEach((c) => c.hide());\n\t\t\t\tds.clear();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._coverage) {\n\t\t\tconst root = this.el.value.root;\n\t\t\tds.add(toDisposable(() => root.remove()));\n\t\t\tthis.options.container.appendChild(root);\n\t\t\tds.add(\n\t\t\t\tthis.configurationService.onDidChangeConfiguration((c) => {\n\t\t\t\t\tif (!this._coverage) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tc.affectsConfiguration(\n\t\t\t\t\t\t\tTestingConfigKeys.CoveragePercent,\n\t\t\t\t\t\t) ||\n\t\t\t\t\t\tc.affectsConfiguration(\n\t\t\t\t\t\t\tTestingConfigKeys.CoverageBarThresholds,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.doRender(this._coverage);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis._coverage = coverage;\n\t\tthis.doRender(coverage);\n\t}\n\n\tprivate doRender(coverage: CoverageBarSource) {\n\t\tconst el = this.el.value;\n\n\t\tconst precision = this.options.compact ? 0 : 2;\n\t\tconst thresholds = getTestingConfiguration(\n\t\t\tthis.configurationService,\n\t\t\tTestingConfigKeys.CoverageBarThresholds,\n\t\t);\n\t\tconst overallStat = coverUtils.calculateDisplayedStat(\n\t\t\tcoverage,\n\t\t\tgetTestingConfiguration(\n\t\t\t\tthis.configurationService,\n\t\t\t\tTestingConfigKeys.CoveragePercent,\n\t\t\t),\n\t\t);\n\t\tif (this.options.overall !== false) {\n\t\t\tel.overall.textContent = coverUtils.displayPercent(\n\t\t\t\toverallStat,\n\t\t\t\tprecision,\n\t\t\t);\n\t\t} else {\n\t\t\tel.overall.style.display = \"none\";\n\t\t}\n\t\tif (\"tpcBar\" in el) {\n\t\t\t// compact mode\n\t\t\trenderBar(el.tpcBar, overallStat, false, thresholds);\n\t\t} else {\n\t\t\trenderBar(\n\t\t\t\tel.statement,\n\t\t\t\tcoverUtils.percent(coverage.statement),\n\t\t\t\tcoverage.statement.total === 0,\n\t\t\t\tthresholds,\n\t\t\t);\n\t\t\trenderBar(\n\t\t\t\tel.function,\n\t\t\t\tcoverage.declaration &&\n\t\t\t\t\tcoverUtils.percent(coverage.declaration),\n\t\t\t\tcoverage.declaration?.total === 0,\n\t\t\t\tthresholds,\n\t\t\t);\n\t\t\trenderBar(\n\t\t\t\tel.branch,\n\t\t\t\tcoverage.branch && coverUtils.percent(coverage.branch),\n\t\t\t\tcoverage.branch?.total === 0,\n\t\t\t\tthresholds,\n\t\t\t);\n\t\t}\n\t}\n}\n\nconst barWidth = 16;\n\nconst renderBar = (\n\tbar: HTMLElement,\n\tpct: number | undefined,\n\tisZero: boolean,\n\tthresholds: ITestingCoverageBarThresholds,\n) => {\n\tif (pct === undefined) {\n\t\tbar.style.display = \"none\";\n\t\treturn;\n\t}\n\n\tbar.style.display = \"block\";\n\tbar.style.width = `${barWidth}px`;\n\t// this is floored so the bar is only completely filled at 100% and not 99.9%\n\tbar.style.setProperty(\"--test-bar-width\", `${Math.floor(pct * 16)}px`);\n\n\tif (isZero) {\n\t\tbar.style.color = \"currentColor\";\n\t\tbar.style.opacity = \"0.5\";\n\t\treturn;\n\t}\n\n\tbar.style.color = coverUtils.getCoverageColor(pct, thresholds);\n\tbar.style.opacity = \"1\";\n};\n\nconst nf = new Intl.NumberFormat();\nconst stmtCoverageText = (coverage: CoverageBarSource) =>\n\tlocalize(\n\t\t\"statementCoverage\",\n\t\t\"{0}/{1} statements covered ({2})\",\n\t\tnf.format(coverage.statement.covered),\n\t\tnf.format(coverage.statement.total),\n\t\tcoverUtils.displayPercent(coverUtils.percent(coverage.statement)),\n\t);\nconst fnCoverageText = (coverage: CoverageBarSource) =>\n\tcoverage.declaration &&\n\tlocalize(\n\t\t\"functionCoverage\",\n\t\t\"{0}/{1} functions covered ({2})\",\n\t\tnf.format(coverage.declaration.covered),\n\t\tnf.format(coverage.declaration.total),\n\t\tcoverUtils.displayPercent(coverUtils.percent(coverage.declaration)),\n\t);\nconst branchCoverageText = (coverage: CoverageBarSource) =>\n\tcoverage.branch &&\n\tlocalize(\n\t\t\"branchCoverage\",\n\t\t\"{0}/{1} branches covered ({2})\",\n\t\tnf.format(coverage.branch.covered),\n\t\tnf.format(coverage.branch.total),\n\t\tcoverUtils.displayPercent(coverUtils.percent(coverage.branch)),\n\t);\n\nconst getOverallHoverText = (\n\tcoverage: CoverageBarSource,\n): IManagedHoverTooltipMarkdownString => {\n\tconst str = [\n\t\tstmtCoverageText(coverage),\n\t\tfnCoverageText(coverage),\n\t\tbranchCoverageText(coverage),\n\t]\n\t\t.filter(isDefined)\n\t\t.join(\"\\n\\n\");\n\n\treturn {\n\t\tmarkdown: new MarkdownString().appendText(str),\n\t\tmarkdownNotSupportedFallback: str,\n\t};\n};\n\n/**\n * Renders test coverage bars for a resource in the given container. It will\n * not render anything unless a test coverage report has been opened.\n */\nexport class ExplorerTestCoverageBars\n\textends ManagedTestCoverageBars\n\timplements IExplorerFileContribution\n{\n\tprivate readonly resource = observableValue<URI | undefined>(\n\t\tthis,\n\t\tundefined,\n\t);\n\tprivate static hasRegistered = false;\n\tpublic static register() {\n\t\tif (this.hasRegistered) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hasRegistered = true;\n\t\tRegistry.as<IExplorerFileContributionRegistry>(\n\t\t\tExplorerExtensions.FileContributionRegistry,\n\t\t).register({\n\t\t\tcreate(insta, container) {\n\t\t\t\treturn insta.createInstance(ExplorerTestCoverageBars, {\n\t\t\t\t\tcompact: true,\n\t\t\t\t\tcontainer,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n\n\tconstructor(\n\t\toptions: TestCoverageBarsOptions,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITestCoverageService testCoverageService: ITestCoverageService,\n\t) {\n\t\tsuper(options, configurationService, hoverService);\n\n\t\tconst isEnabled = observeTestingConfiguration(\n\t\t\tconfigurationService,\n\t\t\tTestingConfigKeys.ShowCoverageInExplorer,\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorun(async (reader) => {\n\t\t\t\tlet info: AbstractFileCoverage | undefined;\n\t\t\t\tconst coverage = testCoverageService.selected.read(reader);\n\t\t\t\tif (coverage && isEnabled.read(reader)) {\n\t\t\t\t\tconst resource = this.resource.read(reader);\n\t\t\t\t\tif (resource) {\n\t\t\t\t\t\tinfo = coverage.getComputedForUri(resource);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.setCoverageInfo(info);\n\t\t\t}),\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic setResource(resource: URI | undefined, transaction?: ITransaction) {\n\t\tthis.resource.set(resource, transaction);\n\t}\n\n\tpublic override setCoverageInfo(\n\t\tcoverage: AbstractFileCoverage | undefined,\n\t) {\n\t\tsuper.setCoverageInfo(coverage);\n\t\tthis.options.container?.classList.toggle(\n\t\t\t\"explorer-item-with-test-coverage\",\n\t\t\tthis.visible,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
