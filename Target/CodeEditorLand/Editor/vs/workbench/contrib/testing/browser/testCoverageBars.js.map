{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testCoverageBars.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { h } from '../../../../base/browser/dom.js';\nimport type { IManagedHover, IManagedHoverTooltipMarkdownString } from '../../../../base/browser/ui/hover/hover.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Lazy } from '../../../../base/common/lazy.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { ITransaction, autorun, observableValue } from '../../../../base/common/observable.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ExplorerExtensions, IExplorerFileContribution, IExplorerFileContributionRegistry } from '../../files/browser/explorerFileContrib.js';\nimport * as coverUtils from './codeCoverageDisplayUtils.js';\nimport { ITestingCoverageBarThresholds, TestingConfigKeys, getTestingConfiguration, observeTestingConfiguration } from '../common/configuration.js';\nimport { AbstractFileCoverage } from '../common/testCoverage.js';\nimport { ITestCoverageService } from '../common/testCoverageService.js';\n\nexport interface TestCoverageBarsOptions {\n\t/**\n\t * Whether the bars should be shown in a more compact way, where only the\n\t * overall bar is shown and more details are given in the hover.\n\t */\n\tcompact: boolean;\n\t/**\n\t * Whether the overall stat is shown, defaults to true.\n\t */\n\toverall?: boolean;\n\t/**\n\t * Container in which is render the bars.\n\t */\n\tcontainer: HTMLElement;\n}\n\n/** Type that can be used to render coverage bars */\nexport type CoverageBarSource = Pick<AbstractFileCoverage, 'statement' | 'branch' | 'declaration'>;\n\nexport class ManagedTestCoverageBars extends Disposable {\n\tprivate _coverage?: CoverageBarSource;\n\tprivate readonly el = new Lazy(() => {\n\t\tif (this.options.compact) {\n\t\t\tconst el = h('.test-coverage-bars.compact', [\n\t\t\t\th('.tpc@overall'),\n\t\t\t\th('.bar@tpcBar'),\n\t\t\t]);\n\t\t\tthis.attachHover(el.tpcBar, getOverallHoverText);\n\t\t\treturn el;\n\t\t} else {\n\t\t\tconst el = h('.test-coverage-bars', [\n\t\t\t\th('.tpc@overall'),\n\t\t\t\th('.bar@statement'),\n\t\t\t\th('.bar@function'),\n\t\t\t\th('.bar@branch'),\n\t\t\t]);\n\t\t\tthis.attachHover(el.statement, stmtCoverageText);\n\t\t\tthis.attachHover(el.function, fnCoverageText);\n\t\t\tthis.attachHover(el.branch, branchCoverageText);\n\t\t\treturn el;\n\t\t}\n\t});\n\n\tprivate readonly visibleStore = this._register(new DisposableStore());\n\tprivate readonly customHovers: IManagedHover[] = [];\n\n\t/** Gets whether coverage is currently visible for the resource. */\n\tpublic get visible() {\n\t\treturn !!this._coverage;\n\t}\n\n\tconstructor(\n\t\tprotected readonly options: TestCoverageBarsOptions,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate attachHover(target: HTMLElement, factory: (coverage: CoverageBarSource) => string | IManagedHoverTooltipMarkdownString | undefined) {\n\t\tthis._register(this.hoverService.setupManagedHover(getDefaultHoverDelegate('element'), target, () => this._coverage && factory(this._coverage)));\n\t}\n\n\tpublic setCoverageInfo(coverage: CoverageBarSource | undefined) {\n\t\tconst ds = this.visibleStore;\n\t\tif (!coverage) {\n\t\t\tif (this._coverage) {\n\t\t\t\tthis._coverage = undefined;\n\t\t\t\tthis.customHovers.forEach(c => c.hide());\n\t\t\t\tds.clear();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._coverage) {\n\t\t\tconst root = this.el.value.root;\n\t\t\tds.add(toDisposable(() => root.remove()));\n\t\t\tthis.options.container.appendChild(root);\n\t\t\tds.add(this.configurationService.onDidChangeConfiguration(c => {\n\t\t\t\tif (!this._coverage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (c.affectsConfiguration(TestingConfigKeys.CoveragePercent) || c.affectsConfiguration(TestingConfigKeys.CoverageBarThresholds)) {\n\t\t\t\t\tthis.doRender(this._coverage);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis._coverage = coverage;\n\t\tthis.doRender(coverage);\n\t}\n\n\tprivate doRender(coverage: CoverageBarSource) {\n\t\tconst el = this.el.value;\n\n\t\tconst precision = this.options.compact ? 0 : 2;\n\t\tconst thresholds = getTestingConfiguration(this.configurationService, TestingConfigKeys.CoverageBarThresholds);\n\t\tconst overallStat = coverUtils.calculateDisplayedStat(coverage, getTestingConfiguration(this.configurationService, TestingConfigKeys.CoveragePercent));\n\t\tif (this.options.overall !== false) {\n\t\t\tel.overall.textContent = coverUtils.displayPercent(overallStat, precision);\n\t\t} else {\n\t\t\tel.overall.style.display = 'none';\n\t\t}\n\t\tif ('tpcBar' in el) { // compact mode\n\t\t\trenderBar(el.tpcBar, overallStat, false, thresholds);\n\t\t} else {\n\t\t\trenderBar(el.statement, coverUtils.percent(coverage.statement), coverage.statement.total === 0, thresholds);\n\t\t\trenderBar(el.function, coverage.declaration && coverUtils.percent(coverage.declaration), coverage.declaration?.total === 0, thresholds);\n\t\t\trenderBar(el.branch, coverage.branch && coverUtils.percent(coverage.branch), coverage.branch?.total === 0, thresholds);\n\t\t}\n\t}\n}\n\nconst barWidth = 16;\n\nconst renderBar = (bar: HTMLElement, pct: number | undefined, isZero: boolean, thresholds: ITestingCoverageBarThresholds) => {\n\tif (pct === undefined) {\n\t\tbar.style.display = 'none';\n\t\treturn;\n\t}\n\n\tbar.style.display = 'block';\n\tbar.style.width = `${barWidth}px`;\n\t// this is floored so the bar is only completely filled at 100% and not 99.9%\n\tbar.style.setProperty('--test-bar-width', `${Math.floor(pct * 16)}px`);\n\n\tif (isZero) {\n\t\tbar.style.color = 'currentColor';\n\t\tbar.style.opacity = '0.5';\n\t\treturn;\n\t}\n\n\tbar.style.color = coverUtils.getCoverageColor(pct, thresholds);\n\tbar.style.opacity = '1';\n};\n\nconst nf = new Intl.NumberFormat();\nconst stmtCoverageText = (coverage: CoverageBarSource) => localize('statementCoverage', '{0}/{1} statements covered ({2})', nf.format(coverage.statement.covered), nf.format(coverage.statement.total), coverUtils.displayPercent(coverUtils.percent(coverage.statement)));\nconst fnCoverageText = (coverage: CoverageBarSource) => coverage.declaration && localize('functionCoverage', '{0}/{1} functions covered ({2})', nf.format(coverage.declaration.covered), nf.format(coverage.declaration.total), coverUtils.displayPercent(coverUtils.percent(coverage.declaration)));\nconst branchCoverageText = (coverage: CoverageBarSource) => coverage.branch && localize('branchCoverage', '{0}/{1} branches covered ({2})', nf.format(coverage.branch.covered), nf.format(coverage.branch.total), coverUtils.displayPercent(coverUtils.percent(coverage.branch)));\n\nconst getOverallHoverText = (coverage: CoverageBarSource): IManagedHoverTooltipMarkdownString => {\n\tconst str = [\n\t\tstmtCoverageText(coverage),\n\t\tfnCoverageText(coverage),\n\t\tbranchCoverageText(coverage),\n\t].filter(isDefined).join('\\n\\n');\n\n\treturn {\n\t\tmarkdown: new MarkdownString().appendText(str),\n\t\tmarkdownNotSupportedFallback: str\n\t};\n};\n\n/**\n * Renders test coverage bars for a resource in the given container. It will\n * not render anything unless a test coverage report has been opened.\n */\nexport class ExplorerTestCoverageBars extends ManagedTestCoverageBars implements IExplorerFileContribution {\n\tprivate readonly resource = observableValue<URI | undefined>(this, undefined);\n\tprivate static hasRegistered = false;\n\tpublic static register() {\n\t\tif (this.hasRegistered) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hasRegistered = true;\n\t\tRegistry.as<IExplorerFileContributionRegistry>(ExplorerExtensions.FileContributionRegistry).register({\n\t\t\tcreate(insta, container) {\n\t\t\t\treturn insta.createInstance(\n\t\t\t\t\tExplorerTestCoverageBars,\n\t\t\t\t\t{ compact: true, container }\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n\n\tconstructor(\n\t\toptions: TestCoverageBarsOptions,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITestCoverageService testCoverageService: ITestCoverageService,\n\t) {\n\t\tsuper(options, configurationService, hoverService);\n\n\t\tconst isEnabled = observeTestingConfiguration(configurationService, TestingConfigKeys.ShowCoverageInExplorer);\n\n\t\tthis._register(autorun(async reader => {\n\t\t\tlet info: AbstractFileCoverage | undefined;\n\t\t\tconst coverage = testCoverageService.selected.read(reader);\n\t\t\tif (coverage && isEnabled.read(reader)) {\n\t\t\t\tconst resource = this.resource.read(reader);\n\t\t\t\tif (resource) {\n\t\t\t\t\tinfo = coverage.getComputedForUri(resource);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setCoverageInfo(info);\n\t\t}));\n\t}\n\n\t/** @inheritdoc */\n\tpublic setResource(resource: URI | undefined, transaction?: ITransaction) {\n\t\tthis.resource.set(resource, transaction);\n\t}\n\n\tpublic override setCoverageInfo(coverage: AbstractFileCoverage | undefined) {\n\t\tsuper.setCoverageInfo(coverage);\n\t\tthis.options.container?.classList.toggle('explorer-item-with-test-coverage', this.visible);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
