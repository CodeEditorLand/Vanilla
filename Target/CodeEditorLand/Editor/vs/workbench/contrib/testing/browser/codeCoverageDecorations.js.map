{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/codeCoverageDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { ActionViewItem } from '../../../../base/browser/ui/actionbar/actionViewItems.js';\nimport { ActionBar, ActionsOrientation } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { renderIcon } from '../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { mapFindFirst } from '../../../../base/common/arraysFind.js';\nimport { assert, assertNever } from '../../../../base/common/assert.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { IMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { Lazy } from '../../../../base/common/lazy.js';\nimport { Disposable, DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, observableFromEvent } from '../../../../base/common/observable.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { isUriComponents, URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition, MouseTargetType, OverlayWidgetPositionPreference } from '../../../../editor/browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { IEditorContribution } from '../../../../editor/common/editorCommon.js';\nimport { IModelDecorationOptions, InjectedTextCursorStops, InjectedTextOptions, ITextModel } from '../../../../editor/common/model.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { observableConfigValue } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { IQuickInputService, QuickPickInput } from '../../../../platform/quickinput/common/quickInput.js';\nimport * as coverUtils from './codeCoverageDisplayUtils.js';\nimport { testingCoverageMissingBranch, testingCoverageReport, testingFilterIcon, testingRerunIcon } from './icons.js';\nimport { ManagedTestCoverageBars } from './testCoverageBars.js';\nimport { getTestingConfiguration, TestingConfigKeys } from '../common/configuration.js';\nimport { TestCommandId } from '../common/constants.js';\nimport { FileCoverage } from '../common/testCoverage.js';\nimport { ITestCoverageService } from '../common/testCoverageService.js';\nimport { TestId } from '../common/testId.js';\nimport { ITestService } from '../common/testService.js';\nimport { CoverageDetails, DetailType, IDeclarationCoverage, IStatementCoverage } from '../common/testTypes.js';\nimport { TestingContextKeys } from '../common/testingContextKeys.js';\n\nconst CLASS_HIT = 'coverage-deco-hit';\nconst CLASS_MISS = 'coverage-deco-miss';\nconst TOGGLE_INLINE_COMMAND_TEXT = localize('testing.toggleInlineCoverage', 'Toggle Inline');\nconst TOGGLE_INLINE_COMMAND_ID = 'testing.toggleInlineCoverage';\nconst BRANCH_MISS_INDICATOR_CHARS = 4;\n\nexport class CodeCoverageDecorations extends Disposable implements IEditorContribution {\n\tprivate loadingCancellation?: CancellationTokenSource;\n\tprivate readonly displayedStore = this._register(new DisposableStore());\n\tprivate readonly hoveredStore = this._register(new DisposableStore());\n\tprivate readonly summaryWidget: Lazy<CoverageToolbarWidget>;\n\tprivate decorationIds = new Map<string, {\n\t\tdetail: DetailRange;\n\t\toptions: IModelDecorationOptions;\n\t\tapplyHoverOptions(target: IModelDecorationOptions): void;\n\t}>();\n\tprivate hoveredSubject?: unknown;\n\tprivate details?: CoverageDetailsModel;\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITestCoverageService private readonly coverage: ITestCoverageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly log: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.summaryWidget = new Lazy(() => this._register(instantiationService.createInstance(CoverageToolbarWidget, this.editor)));\n\n\t\tconst modelObs = observableFromEvent(this, editor.onDidChangeModel, () => editor.getModel());\n\t\tconst configObs = observableFromEvent(this, editor.onDidChangeConfiguration, i => i);\n\n\t\tconst fileCoverage = derived(reader => {\n\t\t\tconst report = coverage.selected.read(reader);\n\t\t\tif (!report) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = modelObs.read(reader);\n\t\t\tif (!model) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst file = report.getUri(model.uri);\n\t\t\tif (!file) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport.didAddCoverage.read(reader); // re-read if changes when there's no report\n\t\t\treturn { file, testId: coverage.filterToTest.read(reader) };\n\t\t});\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst c = fileCoverage.read(reader);\n\t\t\tif (c) {\n\t\t\t\tthis.apply(editor.getModel()!, c.file, c.testId, coverage.showInline.read(reader));\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t}));\n\n\t\tconst toolbarEnabled = observableConfigValue(TestingConfigKeys.CoverageToolbarEnabled, true, configurationService);\n\t\tthis._register(autorun(reader => {\n\t\t\tconst c = fileCoverage.read(reader);\n\t\t\tif (c && toolbarEnabled.read(reader)) {\n\t\t\t\tthis.summaryWidget.value.setCoverage(c.file, c.testId);\n\t\t\t} else {\n\t\t\t\tthis.summaryWidget.rawValue?.clearCoverage();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst c = fileCoverage.read(reader);\n\t\t\tif (c) {\n\t\t\t\tconst evt = configObs.read(reader);\n\t\t\t\tif (evt?.hasChanged(EditorOption.lineHeight) !== false) {\n\t\t\t\t\tthis.updateEditorStyles();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(editor.onMouseMove(e => {\n\t\t\tconst model = editor.getModel();\n\t\t\tif (e.target.type === MouseTargetType.GUTTER_LINE_NUMBERS && model) {\n\t\t\t\tthis.hoverLineNumber(editor.getModel()!);\n\t\t\t} else if (coverage.showInline.get() && e.target.type === MouseTargetType.CONTENT_TEXT && model) {\n\t\t\t\tthis.hoverInlineDecoration(model, e.target.position);\n\t\t\t} else {\n\t\t\t\tthis.hoveredStore.clear();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(editor.onWillChangeModel(() => {\n\t\t\tconst model = editor.getModel();\n\t\t\tif (!this.details || !model) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Decorations adjust to local changes made in-editor, keep them synced in case the file is reopened:\n\t\t\tfor (const decoration of model.getAllDecorations()) {\n\t\t\t\tconst own = this.decorationIds.get(decoration.id);\n\t\t\t\tif (own) {\n\t\t\t\t\town.detail.range = decoration.range;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateEditorStyles() {\n\t\tconst lineHeight = this.editor.getOption(EditorOption.lineHeight);\n\t\tconst { style } = this.editor.getContainerDomNode();\n\t\tstyle.setProperty('--vscode-testing-coverage-lineHeight', `${lineHeight}px`);\n\t}\n\n\tprivate hoverInlineDecoration(model: ITextModel, position: Position) {\n\t\tconst allDecorations = model.getDecorationsInRange(Range.fromPositions(position));\n\t\tconst decoration = mapFindFirst(allDecorations, ({ id }) => this.decorationIds.has(id) ? { id, deco: this.decorationIds.get(id)! } : undefined);\n\t\tif (decoration === this.hoveredSubject) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hoveredStore.clear();\n\t\tthis.hoveredSubject = decoration;\n\n\t\tif (!decoration) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.changeDecorations(e => {\n\t\t\te.changeDecorationOptions(decoration.id, {\n\t\t\t\t...decoration.deco.options,\n\t\t\t\tclassName: `${decoration.deco.options.className} coverage-deco-hovered`,\n\t\t\t});\n\t\t});\n\n\t\tthis.hoveredStore.add(toDisposable(() => {\n\t\t\tthis.hoveredSubject = undefined;\n\t\t\tmodel.changeDecorations(e => {\n\t\t\t\te.changeDecorationOptions(decoration!.id, decoration!.deco.options);\n\t\t\t});\n\t\t}));\n\t}\n\n\tprivate hoverLineNumber(model: ITextModel) {\n\t\tif (this.hoveredSubject === 'lineNo' || !this.details || this.coverage.showInline.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hoveredStore.clear();\n\t\tthis.hoveredSubject = 'lineNo';\n\n\t\tmodel.changeDecorations(e => {\n\t\t\tfor (const [id, decoration] of this.decorationIds) {\n\t\t\t\tconst { applyHoverOptions, options } = decoration;\n\t\t\t\tconst dup = { ...options };\n\t\t\t\tapplyHoverOptions(dup);\n\t\t\t\te.changeDecorationOptions(id, dup);\n\t\t\t}\n\t\t});\n\n\t\tthis.hoveredStore.add(this.editor.onMouseLeave(() => {\n\t\t\tthis.hoveredStore.clear();\n\t\t}));\n\n\t\tthis.hoveredStore.add(toDisposable(() => {\n\t\t\tthis.hoveredSubject = undefined;\n\n\t\t\tmodel.changeDecorations(e => {\n\t\t\t\tfor (const [id, decoration] of this.decorationIds) {\n\t\t\t\t\te.changeDecorationOptions(id, decoration.options);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\tprivate async apply(model: ITextModel, coverage: FileCoverage, testId: TestId | undefined, showInlineByDefault: boolean) {\n\t\tconst details = this.details = await this.loadDetails(coverage, testId, model);\n\t\tif (!details) {\n\t\t\treturn this.clear();\n\t\t}\n\n\t\tthis.displayedStore.clear();\n\n\t\tmodel.changeDecorations(e => {\n\t\t\tfor (const detailRange of details.ranges) {\n\t\t\t\tconst { metadata: { detail, description }, range, primary } = detailRange;\n\t\t\t\tif (detail.type === DetailType.Branch) {\n\t\t\t\t\tconst hits = detail.detail.branches![detail.branch].count;\n\t\t\t\t\tconst cls = hits ? CLASS_HIT : CLASS_MISS;\n\t\t\t\t\t// don't bother showing the miss indicator if the condition wasn't executed at all:\n\t\t\t\t\tconst showMissIndicator = !hits && range.isEmpty() && detail.detail.branches!.some(b => b.count);\n\t\t\t\t\tconst options: IModelDecorationOptions = {\n\t\t\t\t\t\tshowIfCollapsed: showMissIndicator, // only avoid collapsing if we want to show the miss indicator\n\t\t\t\t\t\tdescription: 'coverage-gutter',\n\t\t\t\t\t\tlineNumberClassName: `coverage-deco-gutter ${cls}`,\n\t\t\t\t\t};\n\n\t\t\t\t\tconst applyHoverOptions = (target: IModelDecorationOptions) => {\n\t\t\t\t\t\ttarget.hoverMessage = description;\n\t\t\t\t\t\tif (showMissIndicator) {\n\t\t\t\t\t\t\ttarget.after = {\n\t\t\t\t\t\t\t\tcontent: '\\xa0'.repeat(BRANCH_MISS_INDICATOR_CHARS), // nbsp\n\t\t\t\t\t\t\t\tinlineClassName: `coverage-deco-branch-miss-indicator ${ThemeIcon.asClassName(testingCoverageMissingBranch)}`,\n\t\t\t\t\t\t\t\tinlineClassNameAffectsLetterSpacing: true,\n\t\t\t\t\t\t\t\tcursorStops: InjectedTextCursorStops.None,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget.className = `coverage-deco-inline ${cls}`;\n\t\t\t\t\t\t\tif (primary && typeof hits === 'number') {\n\t\t\t\t\t\t\t\ttarget.before = countBadge(hits);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tif (showInlineByDefault) {\n\t\t\t\t\t\tapplyHoverOptions(options);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.decorationIds.set(e.addDecoration(range, options), { options, applyHoverOptions, detail: detailRange });\n\t\t\t\t} else if (detail.type === DetailType.Statement) {\n\t\t\t\t\tconst cls = detail.count ? CLASS_HIT : CLASS_MISS;\n\t\t\t\t\tconst options: IModelDecorationOptions = {\n\t\t\t\t\t\tshowIfCollapsed: false,\n\t\t\t\t\t\tdescription: 'coverage-inline',\n\t\t\t\t\t\tlineNumberClassName: `coverage-deco-gutter ${cls}`,\n\t\t\t\t\t};\n\n\t\t\t\t\tconst applyHoverOptions = (target: IModelDecorationOptions) => {\n\t\t\t\t\t\ttarget.className = `coverage-deco-inline ${cls}`;\n\t\t\t\t\t\ttarget.hoverMessage = description;\n\t\t\t\t\t\tif (primary && typeof detail.count === 'number') {\n\t\t\t\t\t\t\ttarget.before = countBadge(detail.count);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tif (showInlineByDefault) {\n\t\t\t\t\t\tapplyHoverOptions(options);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.decorationIds.set(e.addDecoration(range, options), { options, applyHoverOptions, detail: detailRange });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.displayedStore.add(toDisposable(() => {\n\t\t\tmodel.changeDecorations(e => {\n\t\t\t\tfor (const decoration of this.decorationIds.keys()) {\n\t\t\t\t\te.removeDecoration(decoration);\n\t\t\t\t}\n\t\t\t\tthis.decorationIds.clear();\n\t\t\t});\n\t\t}));\n\t}\n\n\tprivate clear() {\n\t\tthis.loadingCancellation?.cancel();\n\t\tthis.loadingCancellation = undefined;\n\t\tthis.displayedStore.clear();\n\t\tthis.hoveredStore.clear();\n\t}\n\n\tprivate async loadDetails(coverage: FileCoverage, testId: TestId | undefined, textModel: ITextModel) {\n\t\tconst cts = this.loadingCancellation = new CancellationTokenSource();\n\t\tthis.displayedStore.add(this.loadingCancellation);\n\n\t\ttry {\n\t\t\tconst details = testId\n\t\t\t\t? await coverage.detailsForTest(testId, this.loadingCancellation.token)\n\t\t\t\t: await coverage.details(this.loadingCancellation.token);\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn new CoverageDetailsModel(details, textModel);\n\t\t} catch (e) {\n\t\t\tthis.log.error('Error loading coverage details', e);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nconst countBadge = (count: number): InjectedTextOptions | undefined => {\n\tif (count === 0) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tcontent: `${count > 99 ? '99+' : count}x`,\n\t\tcursorStops: InjectedTextCursorStops.None,\n\t\tinlineClassName: `coverage-deco-inline-count`,\n\t\tinlineClassNameAffectsLetterSpacing: true,\n\t};\n};\n\ntype CoverageDetailsWithBranch = CoverageDetails | { type: DetailType.Branch; branch: number; detail: IStatementCoverage };\ntype DetailRange = { range: Range; primary: boolean; metadata: { detail: CoverageDetailsWithBranch; description: IMarkdownString | undefined } };\n\nexport class CoverageDetailsModel {\n\tpublic readonly ranges: DetailRange[] = [];\n\n\tconstructor(public readonly details: CoverageDetails[], textModel: ITextModel) {\n\n\t\t//#region decoration generation\n\t\t// Coverage from a provider can have a range that contains smaller ranges,\n\t\t// such as a function declaration that has nested statements. In this we\n\t\t// make sequential, non-overlapping ranges for each detail for display in\n\t\t// the editor without ugly overlaps.\n\t\tconst detailRanges: DetailRange[] = details.map(detail => ({\n\t\t\trange: tidyLocation(detail.location),\n\t\t\tprimary: true,\n\t\t\tmetadata: { detail, description: this.describe(detail, textModel) }\n\t\t}));\n\n\t\tfor (const { range, metadata: { detail } } of detailRanges) {\n\t\t\tif (detail.type === DetailType.Statement && detail.branches) {\n\t\t\t\tfor (let i = 0; i < detail.branches.length; i++) {\n\t\t\t\t\tconst branch: CoverageDetailsWithBranch = { type: DetailType.Branch, branch: i, detail };\n\t\t\t\t\tdetailRanges.push({\n\t\t\t\t\t\trange: tidyLocation(detail.branches[i].location || Range.fromPositions(range.getEndPosition())),\n\t\t\t\t\t\tprimary: true,\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\tdetail: branch,\n\t\t\t\t\t\t\tdescription: this.describe(branch, textModel),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// type ordering is done so that function declarations come first on a tie so that\n\t\t// single-statement functions (`() => foo()` for example) get inline decorations.\n\t\tdetailRanges.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range) || a.metadata.detail.type - b.metadata.detail.type);\n\n\t\tconst stack: DetailRange[] = [];\n\t\tconst result: DetailRange[] = this.ranges = [];\n\t\tconst pop = () => {\n\t\t\tconst next = stack.pop()!;\n\t\t\tconst prev = stack[stack.length - 1];\n\t\t\tif (prev) {\n\t\t\t\tprev.range = prev.range.setStartPosition(next.range.endLineNumber, next.range.endColumn);\n\t\t\t}\n\n\t\t\tresult.push(next);\n\t\t};\n\n\t\tfor (const item of detailRanges) {\n\t\t\t// 1. Ensure that any ranges in the stack that ended before this are flushed\n\t\t\tconst start = item.range.getStartPosition();\n\t\t\twhile (stack[stack.length - 1]?.range.containsPosition(start) === false) {\n\t\t\t\tpop();\n\t\t\t}\n\n\t\t\t// Empty ranges (usually representing missing branches) can be added\n\t\t\t// without worry about overlay.\n\t\t\tif (item.range.isEmpty()) {\n\t\t\t\tresult.push(item);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 2. Take the last (overlapping) item in the stack, push range before\n\t\t\t// the `item.range` into the result and modify its stack to push the start\n\t\t\t// until after the `item.range` ends.\n\t\t\tconst prev = stack[stack.length - 1];\n\t\t\tif (prev) {\n\t\t\t\tconst primary = prev.primary;\n\t\t\t\tconst si = prev.range.setEndPosition(start.lineNumber, start.column);\n\t\t\t\tprev.range = prev.range.setStartPosition(item.range.endLineNumber, item.range.endColumn);\n\t\t\t\tprev.primary = false;\n\t\t\t\t// discard the previous range if it became empty, e.g. a nested statement\n\t\t\t\tif (prev.range.isEmpty()) { stack.pop(); }\n\t\t\t\tresult.push({ range: si, primary, metadata: prev.metadata });\n\t\t\t}\n\n\t\t\tstack.push(item);\n\t\t}\n\t\twhile (stack.length) {\n\t\t\tpop();\n\t\t}\n\t\t//#endregion\n\t}\n\n\t/** Gets the markdown description for the given detail */\n\tpublic describe(detail: CoverageDetailsWithBranch, model: ITextModel): IMarkdownString | undefined {\n\t\tif (detail.type === DetailType.Declaration) {\n\t\t\treturn namedDetailLabel(detail.name, detail);\n\t\t} else if (detail.type === DetailType.Statement) {\n\t\t\tconst text = wrapName(model.getValueInRange(tidyLocation(detail.location)).trim() || `<empty statement>`);\n\t\t\tif (detail.branches?.length) {\n\t\t\t\tconst covered = detail.branches.filter(b => !!b.count).length;\n\t\t\t\treturn new MarkdownString().appendMarkdown(localize('coverage.branches', '{0} of {1} of branches in {2} were covered.', covered, detail.branches.length, text));\n\t\t\t} else {\n\t\t\t\treturn namedDetailLabel(text, detail);\n\t\t\t}\n\t\t} else if (detail.type === DetailType.Branch) {\n\t\t\tconst text = wrapName(model.getValueInRange(tidyLocation(detail.detail.location)).trim() || `<empty statement>`);\n\t\t\tconst { count, label } = detail.detail.branches![detail.branch];\n\t\t\tconst label2 = label ? wrapInBackticks(label) : `#${detail.branch + 1}`;\n\t\t\tif (!count) {\n\t\t\t\treturn new MarkdownString().appendMarkdown(localize('coverage.branchNotCovered', 'Branch {0} in {1} was not covered.', label2, text));\n\t\t\t} else if (count === true) {\n\t\t\t\treturn new MarkdownString().appendMarkdown(localize('coverage.branchCoveredYes', 'Branch {0} in {1} was executed.', label2, text));\n\t\t\t} else {\n\t\t\t\treturn new MarkdownString().appendMarkdown(localize('coverage.branchCovered', 'Branch {0} in {1} was executed {2} time(s).', label2, text, count));\n\t\t\t}\n\t\t}\n\n\t\tassertNever(detail);\n\t}\n}\n\nfunction namedDetailLabel(name: string, detail: IStatementCoverage | IDeclarationCoverage) {\n\treturn new MarkdownString().appendMarkdown(\n\t\t!detail.count // 0 or false\n\t\t\t? localize('coverage.declExecutedNo', '`{0}` was not executed.', name)\n\t\t\t: typeof detail.count === 'number'\n\t\t\t\t? localize('coverage.declExecutedCount', '`{0}` was executed {1} time(s).', name, detail.count)\n\t\t\t\t: localize('coverage.declExecutedYes', '`{0}` was executed.', name)\n\t);\n}\n\n// 'tidies' the range by normalizing it into a range and removing leading\n// and trailing whitespace.\nfunction tidyLocation(location: Range | Position): Range {\n\tif (location instanceof Position) {\n\t\treturn Range.fromPositions(location, new Position(location.lineNumber, 0x7FFFFFFF));\n\t}\n\n\treturn location;\n}\n\nfunction wrapInBackticks(str: string) {\n\treturn '`' + str.replace(/[\\n\\r`]/g, '') + '`';\n}\n\nfunction wrapName(functionNameOrCode: string) {\n\tif (functionNameOrCode.length > 50) {\n\t\tfunctionNameOrCode = functionNameOrCode.slice(0, 40) + '...';\n\t}\n\treturn wrapInBackticks(functionNameOrCode);\n}\n\nclass CoverageToolbarWidget extends Disposable implements IOverlayWidget {\n\tprivate current: { coverage: FileCoverage; testId: TestId | undefined } | undefined;\n\tprivate registered = false;\n\tprivate isRunning = false;\n\tprivate readonly showStore = this._register(new DisposableStore());\n\tprivate readonly actionBar: ActionBar;\n\tprivate readonly _domNode = dom.h('div.coverage-summary-widget', [\n\t\tdom.h('div', [\n\t\t\tdom.h('span.bars@bars'),\n\t\t\tdom.h('span.toolbar@toolbar'),\n\t\t]),\n\t]);\n\n\tprivate readonly bars: ManagedTestCoverageBars;\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@ITestCoverageService private readonly coverage: ITestCoverageService,\n\t\t@IInstantiationService instaService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.bars = this._register(instaService.createInstance(ManagedTestCoverageBars, {\n\t\t\tcompact: false,\n\t\t\toverall: false,\n\t\t\tcontainer: this._domNode.bars,\n\t\t}));\n\n\t\tthis.actionBar = this._register(instaService.createInstance(ActionBar, this._domNode.toolbar, {\n\t\t\torientation: ActionsOrientation.HORIZONTAL,\n\t\t\tactionViewItemProvider: (action, options) => {\n\t\t\t\tconst vm = new CodiconActionViewItem(undefined, action, options);\n\t\t\t\tif (action instanceof ActionWithIcon) {\n\t\t\t\t\tvm.themeIcon = action.icon;\n\t\t\t\t}\n\t\t\t\treturn vm;\n\t\t\t}\n\t\t}));\n\n\n\t\tthis._register(autorun(reader => {\n\t\t\tcoverage.showInline.read(reader);\n\t\t\tthis.setActions();\n\t\t}));\n\n\t\tthis._register(dom.addStandardDisposableListener(this._domNode.root, dom.EventType.CONTEXT_MENU, e => {\n\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\tmenuId: MenuId.StickyScrollContext,\n\t\t\t\tgetAnchor: () => e,\n\t\t\t});\n\t\t}));\n\t}\n\n\t/** @inheritdoc */\n\tpublic getId(): string {\n\t\treturn 'coverage-summary-widget';\n\t}\n\n\t/** @inheritdoc */\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._domNode.root;\n\t}\n\n\t/** @inheritdoc */\n\tpublic getPosition(): IOverlayWidgetPosition | null {\n\t\treturn {\n\t\t\tpreference: OverlayWidgetPositionPreference.TOP_CENTER,\n\t\t\tstackOridinal: 9,\n\t\t};\n\t}\n\n\tpublic clearCoverage() {\n\t\tthis.current = undefined;\n\t\tthis.bars.setCoverageInfo(undefined);\n\t\tthis.hide();\n\t}\n\n\tpublic setCoverage(coverage: FileCoverage, testId: TestId | undefined) {\n\t\tthis.current = { coverage, testId };\n\t\tthis.bars.setCoverageInfo(coverage);\n\n\t\tif (!coverage) {\n\t\t\tthis.hide();\n\t\t} else {\n\t\t\tthis.setActions();\n\t\t\tthis.show();\n\t\t}\n\t}\n\n\tprivate setActions() {\n\t\tthis.actionBar.clear();\n\t\tconst current = this.current;\n\t\tif (!current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst toggleAction = new ActionWithIcon(\n\t\t\t'toggleInline',\n\t\t\tthis.coverage.showInline.get()\n\t\t\t\t? localize('testing.hideInlineCoverage', 'Hide Inline Coverage')\n\t\t\t\t: localize('testing.showInlineCoverage', 'Show Inline Coverage'),\n\t\t\ttestingCoverageReport,\n\t\t\tundefined,\n\t\t\t() => this.coverage.showInline.set(!this.coverage.showInline.get(), undefined),\n\t\t);\n\n\t\tconst kb = this.keybindingService.lookupKeybinding(TOGGLE_INLINE_COMMAND_ID);\n\t\tif (kb) {\n\t\t\ttoggleAction.tooltip = `${TOGGLE_INLINE_COMMAND_TEXT} (${kb.getLabel()})`;\n\t\t}\n\n\t\tthis.actionBar.push(toggleAction);\n\n\t\tif (current.testId) {\n\t\t\tconst testItem = current.coverage.fromResult.getTestById(current.testId.toString());\n\t\t\tassert(!!testItem, 'got coverage for an unreported test');\n\t\t\tthis.actionBar.push(new ActionWithIcon('perTestFilter',\n\t\t\t\tcoverUtils.labels.showingFilterFor(testItem.label),\n\t\t\t\ttestingFilterIcon,\n\t\t\t\tundefined,\n\t\t\t\t() => this.commandService.executeCommand(TestCommandId.CoverageFilterToTestInEditor, this.current, this.editor),\n\t\t\t));\n\t\t} else if (current.coverage.perTestData?.size) {\n\t\t\tthis.actionBar.push(new ActionWithIcon('perTestFilter',\n\t\t\t\tlocalize('testing.coverageForTestAvailable', \"{0} test(s) ran code in this file\", current.coverage.perTestData.size),\n\t\t\t\ttestingFilterIcon,\n\t\t\t\tundefined,\n\t\t\t\t() => this.commandService.executeCommand(TestCommandId.CoverageFilterToTestInEditor, this.current, this.editor),\n\t\t\t));\n\t\t}\n\n\t\tthis.actionBar.push(new ActionWithIcon(\n\t\t\t'rerun',\n\t\t\tlocalize('testing.rerun', 'Rerun'),\n\t\t\ttestingRerunIcon,\n\t\t\t!this.isRunning,\n\t\t\t() => this.rerunTest()\n\t\t));\n\t}\n\n\tprivate show() {\n\t\tif (this.registered) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.registered = true;\n\t\tlet viewZoneId: string;\n\t\tconst ds = this.showStore;\n\n\t\tthis.editor.addOverlayWidget(this);\n\t\tthis.editor.changeViewZones(accessor => {\n\t\t\tviewZoneId = accessor.addZone({ // make space for the widget\n\t\t\t\tafterLineNumber: 0,\n\t\t\t\tafterColumn: 0,\n\t\t\t\tdomNode: document.createElement('div'),\n\t\t\t\theightInPx: 30,\n\t\t\t\tordinal: -1, // show before code lenses\n\t\t\t});\n\t\t});\n\n\t\tds.add(toDisposable(() => {\n\t\t\tthis.registered = false;\n\t\t\tthis.editor.removeOverlayWidget(this);\n\t\t\tthis.editor.changeViewZones(accessor => {\n\t\t\t\taccessor.removeZone(viewZoneId);\n\t\t\t});\n\t\t}));\n\n\t\tds.add(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (this.current && (e.affectsConfiguration(TestingConfigKeys.CoverageBarThresholds) || e.affectsConfiguration(TestingConfigKeys.CoveragePercent))) {\n\t\t\t\tthis.setCoverage(this.current.coverage, this.current.testId);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate rerunTest() {\n\t\tconst current = this.current;\n\t\tif (current) {\n\t\t\tthis.isRunning = true;\n\t\t\tthis.setActions();\n\t\t\tthis.testService.runResolvedTests(current.coverage.fromResult.request).finally(() => {\n\t\t\t\tthis.isRunning = false;\n\t\t\t\tthis.setActions();\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate hide() {\n\t\tthis.showStore.clear();\n\t}\n}\n\nregisterAction2(class ToggleInlineCoverage extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_INLINE_COMMAND_ID,\n\t\t\t// note: ideally this would be \"show inline\", but the command palette does\n\t\t\t// not use the 'toggled' titles, so we need to make this generic.\n\t\t\ttitle: localize2('coverage.toggleInline', \"Toggle Inline Coverage\"),\n\t\t\tcategory: Categories.Test,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI),\n\t\t\t},\n\t\t\ttoggled: {\n\t\t\t\tcondition: TestingContextKeys.inlineCoverageEnabled,\n\t\t\t\ttitle: localize('coverage.hideInline', \"Hide Inline Coverage\"),\n\t\t\t},\n\t\t\ticon: testingCoverageReport,\n\t\t\tmenu: [\n\t\t\t\t{ id: MenuId.CommandPalette, when: TestingContextKeys.isTestCoverageOpen },\n\t\t\t\t{ id: MenuId.EditorTitle, when: ContextKeyExpr.and(TestingContextKeys.isTestCoverageOpen, TestingContextKeys.coverageToolbarEnabled.notEqualsTo(true)), group: 'navigation' },\n\t\t\t]\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor): void {\n\t\tconst coverage = accessor.get(ITestCoverageService);\n\t\tcoverage.showInline.set(!coverage.showInline.get(), undefined);\n\t}\n});\n\nregisterAction2(class ToggleCoverageToolbar extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageToggleToolbar,\n\t\t\ttitle: localize2('testing.toggleToolbarTitle', \"Test Coverage Toolbar\"),\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize2('testing.toggleToolbarDesc', 'Toggle the sticky coverage bar in the editor.')\n\t\t\t},\n\t\t\tcategory: Categories.Test,\n\t\t\ttoggled: {\n\t\t\t\tcondition: TestingContextKeys.coverageToolbarEnabled,\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{ id: MenuId.CommandPalette, when: TestingContextKeys.isTestCoverageOpen },\n\t\t\t\t{ id: MenuId.StickyScrollContext, when: TestingContextKeys.isTestCoverageOpen },\n\t\t\t\t{ id: MenuId.EditorTitle, when: TestingContextKeys.isTestCoverageOpen, group: 'coverage@1' },\n\t\t\t]\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst config = accessor.get(IConfigurationService);\n\t\tconst value = getTestingConfiguration(config, TestingConfigKeys.CoverageToolbarEnabled);\n\t\tconfig.updateValue(TestingConfigKeys.CoverageToolbarEnabled, !value);\n\t}\n});\n\nregisterAction2(class FilterCoverageToTestInEditor extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageFilterToTestInEditor,\n\t\t\ttitle: localize2('testing.filterActionLabel', \"Filter Coverage to Test\"),\n\t\t\tcategory: Categories.Test,\n\t\t\ticon: Codicon.filter,\n\t\t\ttoggled: {\n\t\t\t\ticon: Codicon.filterFilled,\n\t\t\t\tcondition: TestingContextKeys.isCoverageFilteredToTest,\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{ id: MenuId.EditorTitle, when: ContextKeyExpr.and(TestingContextKeys.isTestCoverageOpen, TestingContextKeys.coverageToolbarEnabled.notEqualsTo(true)), group: 'navigation' },\n\t\t\t]\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, coverageOrUri?: FileCoverage | URI, editor?: ICodeEditor): void {\n\t\tconst testCoverageService = accessor.get(ITestCoverageService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst activeEditor = editor ?? accessor.get(ICodeEditorService).getActiveCodeEditor();\n\t\tlet coverage: FileCoverage | undefined;\n\t\tif (coverageOrUri instanceof FileCoverage) {\n\t\t\tcoverage = coverageOrUri;\n\t\t} else if (isUriComponents(coverageOrUri)) {\n\t\t\tcoverage = testCoverageService.selected.get()?.getUri(URI.from(coverageOrUri));\n\t\t} else {\n\t\t\tconst uri = activeEditor?.getModel()?.uri;\n\t\t\tcoverage = uri && testCoverageService.selected.get()?.getUri(uri);\n\t\t}\n\n\t\tif (!coverage || !coverage.perTestData?.size) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tests = [...coverage.perTestData].map(TestId.fromString);\n\t\tconst commonPrefix = TestId.getLengthOfCommonPrefix(tests.length, i => tests[i]);\n\t\tconst result = coverage.fromResult;\n\t\tconst previousSelection = testCoverageService.filterToTest.get();\n\n\t\ttype TItem = { label: string; testId: TestId | undefined };\n\n\t\tconst items: QuickPickInput<TItem>[] = [\n\t\t\t{ label: coverUtils.labels.allTests, testId: undefined },\n\t\t\t{ type: 'separator' },\n\t\t\t...tests.map(id => ({ label: coverUtils.getLabelForItem(result, id, commonPrefix), testId: id })),\n\t\t];\n\n\t\t// These handle the behavior that reveals the start of coverage when the\n\t\t// user picks from the quickpick. Scroll position is restored if the user\n\t\t// exits without picking an item, or picks \"all tets\".\n\t\tconst scrollTop = activeEditor?.getScrollTop() || 0;\n\t\tconst revealScrollCts = new MutableDisposable<CancellationTokenSource>();\n\n\t\tquickInputService.pick(items, {\n\t\t\tactiveItem: items.find((item): item is TItem => 'item' in item && item.item === coverage),\n\t\t\tplaceHolder: coverUtils.labels.pickShowCoverage,\n\t\t\tonDidFocus: (entry) => {\n\t\t\t\tif (!entry.testId) {\n\t\t\t\t\trevealScrollCts.clear();\n\t\t\t\t\tactiveEditor?.setScrollTop(scrollTop);\n\t\t\t\t\ttestCoverageService.filterToTest.set(undefined, undefined);\n\t\t\t\t} else {\n\t\t\t\t\tconst cts = revealScrollCts.value = new CancellationTokenSource();\n\t\t\t\t\tcoverage.detailsForTest(entry.testId, cts.token).then(\n\t\t\t\t\t\tdetails => {\n\t\t\t\t\t\t\tconst first = details.find(d => d.type === DetailType.Statement);\n\t\t\t\t\t\t\tif (!cts.token.isCancellationRequested && first) {\n\t\t\t\t\t\t\t\tactiveEditor?.revealLineNearTop(first.location instanceof Position ? first.location.lineNumber : first.location.startLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() => { /* ignored */ }\n\t\t\t\t\t);\n\t\t\t\t\ttestCoverageService.filterToTest.set(entry.testId, undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t}).then(selected => {\n\t\t\tif (!selected) {\n\t\t\t\tactiveEditor?.setScrollTop(scrollTop);\n\t\t\t}\n\n\t\t\trevealScrollCts.dispose();\n\t\t\ttestCoverageService.filterToTest.set(selected ? selected.testId : previousSelection, undefined);\n\t\t});\n\t}\n});\n\nclass ActionWithIcon extends Action {\n\tconstructor(id: string, title: string, public readonly icon: ThemeIcon, enabled: boolean | undefined, run: () => void) {\n\t\tsuper(id, title, undefined, enabled, run);\n\t}\n}\n\nclass CodiconActionViewItem extends ActionViewItem {\n\n\tpublic themeIcon?: ThemeIcon;\n\n\tprotected override updateLabel(): void {\n\t\tif (this.options.label && this.label && this.themeIcon) {\n\t\t\tdom.reset(this.label, renderIcon(this.themeIcon), this.action.label);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
