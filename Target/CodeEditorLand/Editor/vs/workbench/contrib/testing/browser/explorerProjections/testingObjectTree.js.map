{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/explorerProjections/testingObjectTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ITreeNode } from \"../../../../../base/browser/ui/tree/tree.js\";\nimport { WorkbenchObjectTree } from \"../../../../../platform/list/browser/listService.js\";\nimport { TestId } from \"../../common/testId.js\";\nimport { type TestExplorerTreeElement, TestItemTreeElement } from \"./index.js\";\nimport type { ISerializedTestTreeCollapseState } from \"./testingViewState.js\";\n\nexport class TestingObjectTree<TFilterData = void> extends WorkbenchObjectTree<\n\tTestExplorerTreeElement,\n\tTFilterData\n> {\n\t/**\n\t * Gets a serialized view state for the tree, optimized for storage.\n\t *\n\t * @param updatePreviousState Optional previous state to mutate and update\n\t * instead of creating a new one.\n\t */\n\tpublic getOptimizedViewState(\n\t\tupdatePreviousState?: ISerializedTestTreeCollapseState,\n\t): ISerializedTestTreeCollapseState {\n\t\tconst root: ISerializedTestTreeCollapseState =\n\t\t\tupdatePreviousState || {};\n\n\t\t/**\n\t\t * Recursive builder function. Returns whether the subtree has any non-default\n\t\t * value. Adds itself to the parent children if it does.\n\t\t */\n\t\tconst build = (\n\t\t\tnode: ITreeNode<TestExplorerTreeElement | null, unknown>,\n\t\t\tparent: ISerializedTestTreeCollapseState,\n\t\t): boolean => {\n\t\t\tif (!(node.element instanceof TestItemTreeElement)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst localId = TestId.localId(node.element.test.item.extId);\n\t\t\tconst inTree = parent.children?.[localId] || {};\n\t\t\t// only saved collapsed state if it's not the default (not collapsed, or a root depth)\n\t\t\tinTree.collapsed =\n\t\t\t\tnode.depth === 0 || !node.collapsed\n\t\t\t\t\t? node.collapsed\n\t\t\t\t\t: undefined;\n\n\t\t\tlet hasAnyNonDefaultValue = inTree.collapsed !== undefined;\n\t\t\tif (node.children.length) {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\thasAnyNonDefaultValue =\n\t\t\t\t\t\tbuild(child, inTree) || hasAnyNonDefaultValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasAnyNonDefaultValue) {\n\t\t\t\tparent.children ??= {};\n\t\t\t\tparent.children[localId] = inTree;\n\t\t\t} else if (parent.children?.hasOwnProperty(localId)) {\n\t\t\t\tdelete parent.children[localId];\n\t\t\t}\n\n\t\t\treturn hasAnyNonDefaultValue;\n\t\t};\n\n\t\troot.children ??= {};\n\n\t\t// Controller IDs are hidden if there's only a single test controller, but\n\t\t// make sure they're added when the tree is built if this is the case, so\n\t\t// that the later ID lookup works.\n\t\tfor (const node of this.getNode().children) {\n\t\t\tif (node.element instanceof TestItemTreeElement) {\n\t\t\t\tif (\n\t\t\t\t\tnode.element.test.controllerId ===\n\t\t\t\t\tnode.element.test.item.extId\n\t\t\t\t) {\n\t\t\t\t\tbuild(node, root);\n\t\t\t\t} else {\n\t\t\t\t\tconst ctrlNode = (root.children[\n\t\t\t\t\t\tnode.element.test.controllerId\n\t\t\t\t\t] ??= { children: {} });\n\t\t\t\t\tbuild(node, ctrlNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn root;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,2BAA2B;AACpC,SAAS,cAAc;AACvB,SAAuC,2BAA2B;AAG3D,MAAM,0BAA8C,oBAGzD;AAAA,EAdF,OAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,sBACN,qBACmC;AACnC,UAAM,OACL,uBAAuB,CAAC;AAMzB,UAAM,QAAQ,wBACb,MACA,WACa;AACb,UAAI,EAAE,KAAK,mBAAmB,sBAAsB;AACnD,eAAO;AAAA,MACR;AAEA,YAAM,UAAU,OAAO,QAAQ,KAAK,QAAQ,KAAK,KAAK,KAAK;AAC3D,YAAM,SAAS,OAAO,WAAW,OAAO,KAAK,CAAC;AAE9C,aAAO,YACN,KAAK,UAAU,KAAK,CAAC,KAAK,YACvB,KAAK,YACL;AAEJ,UAAI,wBAAwB,OAAO,cAAc;AACjD,UAAI,KAAK,SAAS,QAAQ;AACzB,mBAAW,SAAS,KAAK,UAAU;AAClC,kCACC,MAAM,OAAO,MAAM,KAAK;AAAA,QAC1B;AAAA,MACD;AAEA,UAAI,uBAAuB;AAC1B,eAAO,aAAa,CAAC;AACrB,eAAO,SAAS,OAAO,IAAI;AAAA,MAC5B,WAAW,OAAO,UAAU,eAAe,OAAO,GAAG;AACpD,eAAO,OAAO,SAAS,OAAO;AAAA,MAC/B;AAEA,aAAO;AAAA,IACR,GAhCc;AAkCd,SAAK,aAAa,CAAC;AAKnB,eAAW,QAAQ,KAAK,QAAQ,EAAE,UAAU;AAC3C,UAAI,KAAK,mBAAmB,qBAAqB;AAChD,YACC,KAAK,QAAQ,KAAK,iBAClB,KAAK,QAAQ,KAAK,KAAK,OACtB;AACD,gBAAM,MAAM,IAAI;AAAA,QACjB,OAAO;AACN,gBAAM,WAAY,KAAK,SACtB,KAAK,QAAQ,KAAK,YACnB,MAAM,EAAE,UAAU,CAAC,EAAE;AACrB,gBAAM,MAAM,QAAQ;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
