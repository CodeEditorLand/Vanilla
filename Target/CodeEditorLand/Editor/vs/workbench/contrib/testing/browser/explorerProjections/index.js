import{ObjectTreeElementCollapseState as o}from"../../../../../base/browser/ui/tree/tree.js";import{Emitter as m}from"../../../../../base/common/event.js";import{Iterable as c}from"../../../../../base/common/iterator.js";import{MarshalledId as T}from"../../../../../base/common/marshallingIds.js";import{InternalTestItem as l,TestItemExpandState as i,TestResultState as I}from"../../common/testTypes.js";import{isCollapsedInSerializedTestTree as b}from"./testingViewState.js";let u=0;const p=()=>String(u++);class S{constructor(s,r=null){this.test=s;this.parent=r}changeEmitter=new m;onChange=this.changeEmitter.event;children=new Set;treeId=p();depth=this.parent?this.parent.depth+1:0;retired=!1;state=I.Unset;duration;toJSON(){if(this.depth===0)return{controllerId:this.test.controllerId};const s={$mid:T.TestItemContext,tests:[l.serialize(this.test)]};for(let r=this.parent;r&&r.depth>0;r=r.parent)s.tests.unshift(l.serialize(r.test));return s}}class a{constructor(s,r){this.message=s;this.parent=r}treeId=p();children=new Set;get description(){return typeof this.message=="string"?this.message:this.message.value}}const v={getId(t){const s=t instanceof a?"error":t.test.expand===i.NotExpandable?!!t.children.size:t.test.expand;return t.treeId+"\0"+s}},d=(t,s,r)=>{let n;if(r===null){const e=[...s];if(e.length===1)return d(t,e,e[0]);n=e}else n=r.children;return c.map(n,e=>e instanceof a?{element:e}:{element:e,collapsible:e.test.expand!==i.NotExpandable,collapsed:e.test.item.error?o.PreserveOrExpanded:b(t,e.test.item.extId)??e.depth>0?o.PreserveOrCollapsed:o.PreserveOrExpanded,children:d(t,s,e)})};export{S as TestItemTreeElement,a as TestTreeErrorMessage,d as getChildrenForParent,v as testIdentityProvider};
