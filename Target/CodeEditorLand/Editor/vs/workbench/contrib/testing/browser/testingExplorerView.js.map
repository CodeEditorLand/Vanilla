{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testingExplorerView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { IKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { IActionViewItemOptions } from '../../../../base/browser/ui/actionbar/actionViewItems.js';\nimport { ActionBar, IActionViewItem } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { Button } from '../../../../base/browser/ui/button/button.js';\nimport type { IManagedHover } from '../../../../base/browser/ui/hover/hover.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport { renderLabelWithIcons } from '../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { IIdentityProvider, IKeyboardNavigationLabelProvider, IListVirtualDelegate } from '../../../../base/browser/ui/list/list.js';\nimport { DefaultKeyboardNavigationDelegate, IListAccessibilityProvider } from '../../../../base/browser/ui/list/listWidget.js';\nimport { ITreeContextMenuEvent, ITreeFilter, ITreeNode, ITreeRenderer, ITreeSorter, TreeFilterResult, TreeVisibility } from '../../../../base/browser/ui/tree/tree.js';\nimport { Action, ActionRunner, IAction, Separator } from '../../../../base/common/actions.js';\nimport { mapFindFirst } from '../../../../base/common/arraysFind.js';\nimport { RunOnceScheduler, disposableTimeout } from '../../../../base/common/async.js';\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, observableFromEvent } from '../../../../base/common/observable.js';\nimport { fuzzyContains } from '../../../../base/common/strings.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport './media/testing.css';\nimport { MarkdownRenderer } from '../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';\nimport { localize } from '../../../../nls.js';\nimport { DropdownWithPrimaryActionViewItem } from '../../../../platform/actions/browser/dropdownWithPrimaryActionViewItem.js';\nimport { MenuEntryActionViewItem, createActionViewItem, createAndFillInActionBarActions, createAndFillInContextMenuActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { IMenuService, MenuId, MenuItemAction } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { UnmanagedProgress } from '../../../../platform/progress/common/progress.js';\nimport { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { defaultButtonStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { foreground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { spinningLoading } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IThemeService, registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { registerNavigableContainer } from '../../../browser/actions/widgetNavigationCommands.js';\nimport { ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { IViewletViewOptions } from '../../../browser/parts/views/viewsViewlet.js';\nimport { DiffEditorInput } from '../../../common/editor/diffEditorInput.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { ITestTreeProjection, TestExplorerTreeElement, TestItemTreeElement, TestTreeErrorMessage } from './explorerProjections/index.js';\nimport { ListProjection } from './explorerProjections/listProjection.js';\nimport { getTestItemContextOverlay } from './explorerProjections/testItemContextOverlay.js';\nimport { TestingObjectTree } from './explorerProjections/testingObjectTree.js';\nimport { ISerializedTestTreeCollapseState } from './explorerProjections/testingViewState.js';\nimport { TreeProjection } from './explorerProjections/treeProjection.js';\nimport * as icons from './icons.js';\nimport { DebugLastRun, ReRunLastRun } from './testExplorerActions.js';\nimport { TestingExplorerFilter } from './testingExplorerFilter.js';\nimport { CountSummary, collectTestStateCounts, getTestProgressText } from './testingProgressUiService.js';\nimport { TestingConfigKeys, TestingCountBadge, getTestingConfiguration } from '../common/configuration.js';\nimport { TestCommandId, TestExplorerViewMode, TestExplorerViewSorting, Testing, labelForTestInState } from '../common/constants.js';\nimport { StoredValue } from '../common/storedValue.js';\nimport { ITestExplorerFilterState, TestExplorerFilterState, TestFilterTerm } from '../common/testExplorerFilterState.js';\nimport { TestId } from '../common/testId.js';\nimport { ITestProfileService, canUseProfileWithTest } from '../common/testProfileService.js';\nimport { LiveTestResult, TestResultItemChangeReason } from '../common/testResult.js';\nimport { ITestResultService } from '../common/testResultService.js';\nimport { IMainThreadTestCollection, ITestService, testCollectionIsEmpty } from '../common/testService.js';\nimport { ITestRunProfile, InternalTestItem, TestControllerCapability, TestItemExpandState, TestResultState, TestRunProfileBitset } from '../common/testTypes.js';\nimport { TestingContextKeys } from '../common/testingContextKeys.js';\nimport { ITestingContinuousRunService } from '../common/testingContinuousRunService.js';\nimport { ITestingPeekOpener } from '../common/testingPeekOpener.js';\nimport { cmpPriority, isFailedState, isStateWithResult, statesInOrder } from '../common/testingStates.js';\nimport { IActivityService, IconBadge, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nconst enum LastFocusState {\n\tInput,\n\tTree,\n}\n\nexport class TestingExplorerView extends ViewPane {\n\tpublic viewModel!: TestingExplorerViewModel;\n\tprivate readonly filterActionBar = this._register(new MutableDisposable());\n\tprivate container!: HTMLElement;\n\tprivate treeHeader!: HTMLElement;\n\tprivate readonly discoveryProgress = this._register(new MutableDisposable<UnmanagedProgress>());\n\tprivate readonly filter = this._register(new MutableDisposable<TestingExplorerFilter>());\n\tprivate readonly filterFocusListener = this._register(new MutableDisposable());\n\tprivate readonly dimensions = { width: 0, height: 0 };\n\tprivate lastFocusState = LastFocusState.Input;\n\n\tpublic get focusedTreeElements() {\n\t\treturn this.viewModel.tree.getFocus().filter(isDefined);\n\t}\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITestProfileService private readonly testProfileService: ITestProfileService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\n\t\tconst relayout = this._register(new RunOnceScheduler(() => this.layoutBody(), 1));\n\t\tthis._register(this.onDidChangeViewWelcomeState(() => {\n\t\t\tif (!this.shouldShowWelcome()) {\n\t\t\t\trelayout.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(testService.collection.onBusyProvidersChange(busy => {\n\t\t\tthis.updateDiscoveryProgress(busy);\n\t\t}));\n\n\t\tthis._register(testProfileService.onDidChange(() => this.updateActions()));\n\t}\n\n\tpublic override shouldShowWelcome() {\n\t\treturn this.viewModel?.welcomeExperience === WelcomeExperience.ForWorkspace;\n\t}\n\n\tpublic override focus() {\n\t\tsuper.focus();\n\t\tif (this.lastFocusState === LastFocusState.Tree) {\n\t\t\tthis.viewModel.tree.domFocus();\n\t\t} else {\n\t\t\tthis.filter.value?.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Gets include/exclude items in the tree, based either on visible tests\n\t * or a use selection.\n\t */\n\tpublic getTreeIncludeExclude(withinItems?: InternalTestItem[], profile?: ITestRunProfile, filterToType: 'visible' | 'selected' = 'visible') {\n\t\tconst projection = this.viewModel.projection.value;\n\t\tif (!projection) {\n\t\t\treturn { include: [], exclude: [] };\n\t\t}\n\n\t\t// To calculate includes and excludes, we include the first children that\n\t\t// have a majority of their items included too, and then apply exclusions.\n\t\tconst include = new Set<InternalTestItem>();\n\t\tconst exclude: InternalTestItem[] = [];\n\n\t\tconst attempt = (element: TestExplorerTreeElement, alreadyIncluded: boolean) => {\n\t\t\t// sanity check hasElement since updates are debounced and they may exist\n\t\t\t// but not be rendered yet\n\t\t\tif (!(element instanceof TestItemTreeElement) || !this.viewModel.tree.hasElement(element)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the current node is not visible or runnable in the current profile, it's excluded\n\t\t\tconst inTree = this.viewModel.tree.getNode(element);\n\t\t\tif (!inTree.visible) {\n\t\t\t\tif (alreadyIncluded) { exclude.push(element.test); }\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If it's not already included but most of its children are, then add it\n\t\t\t// if it can be run under the current profile (when specified)\n\t\t\tif (\n\t\t\t\t// If it's not already included...\n\t\t\t\t!alreadyIncluded\n\t\t\t\t// And it can be run using the current profile (if any)\n\t\t\t\t&& (!profile || canUseProfileWithTest(profile, element.test))\n\t\t\t\t// And either it's a leaf node or most children are included, the  include it.\n\t\t\t\t&& (inTree.children.length === 0 || inTree.visibleChildrenCount * 2 >= inTree.children.length)\n\t\t\t\t// And not if we're only showing a single of its children, since it\n\t\t\t\t// probably fans out later. (Worse case we'll directly include its single child)\n\t\t\t\t&& inTree.visibleChildrenCount !== 1\n\t\t\t) {\n\t\t\t\tinclude.add(element.test);\n\t\t\t\talreadyIncluded = true;\n\t\t\t}\n\n\t\t\t// Recurse \u2728\n\t\t\tfor (const child of element.children) {\n\t\t\t\tattempt(child, alreadyIncluded);\n\t\t\t}\n\t\t};\n\n\t\tif (filterToType === 'selected') {\n\t\t\tconst sel = this.viewModel.tree.getSelection().filter(isDefined);\n\t\t\tif (sel.length) {\n\n\t\t\t\tL:\n\t\t\t\tfor (const node of sel) {\n\t\t\t\t\tif (node instanceof TestItemTreeElement) {\n\t\t\t\t\t\t// avoid adding an item if its parent is already included\n\t\t\t\t\t\tfor (let i: TestItemTreeElement | null = node; i; i = i.parent) {\n\t\t\t\t\t\t\tif (include.has(i.test)) {\n\t\t\t\t\t\t\t\tcontinue L;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinclude.add(node.test);\n\t\t\t\t\t\tnode.children.forEach(c => attempt(c, true));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { include: [...include], exclude };\n\t\t\t}\n\t\t}\n\n\t\tfor (const root of withinItems || this.testService.collection.rootItems) {\n\t\t\tconst element = projection.getElementByTestId(root.item.extId);\n\t\t\tif (!element) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (profile && !canUseProfileWithTest(profile, root)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// single controllers won't have visible root ID nodes, handle that  case specially\n\t\t\tif (!this.viewModel.tree.hasElement(element)) {\n\t\t\t\tconst visibleChildren = [...element.children].reduce((acc, c) =>\n\t\t\t\t\tthis.viewModel.tree.hasElement(c) && this.viewModel.tree.getNode(c).visible ? acc + 1 : acc, 0);\n\n\t\t\t\t// note we intentionally check children > 0 here, unlike above, since\n\t\t\t\t// we don't want to bother dispatching to controllers who have no discovered tests\n\t\t\t\tif (element.children.size > 0 && visibleChildren * 2 >= element.children.size) {\n\t\t\t\t\tinclude.add(element.test);\n\t\t\t\t\telement.children.forEach(c => attempt(c, true));\n\t\t\t\t} else {\n\t\t\t\t\telement.children.forEach(c => attempt(c, false));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tattempt(element, false);\n\t\t\t}\n\t\t}\n\n\t\treturn { include: [...include], exclude };\n\t}\n\n\toverride render(): void {\n\t\tsuper.render();\n\t\tthis._register(registerNavigableContainer({\n\t\t\tname: 'testingExplorerView',\n\t\t\tfocusNotifiers: [this],\n\t\t\tfocusNextWidget: () => {\n\t\t\t\tif (!this.viewModel.tree.isDOMFocused()) {\n\t\t\t\t\tthis.viewModel.tree.domFocus();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocusPreviousWidget: () => {\n\t\t\t\tif (this.viewModel.tree.isDOMFocused()) {\n\t\t\t\t\tthis.filter.value?.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis.container = dom.append(container, dom.$('.test-explorer'));\n\t\tthis.treeHeader = dom.append(this.container, dom.$('.test-explorer-header'));\n\t\tthis.filterActionBar.value = this.createFilterActionBar();\n\n\t\tconst messagesContainer = dom.append(this.treeHeader, dom.$('.result-summary-container'));\n\t\tthis._register(this.instantiationService.createInstance(ResultSummaryView, messagesContainer));\n\n\t\tconst listContainer = dom.append(this.container, dom.$('.test-explorer-tree'));\n\t\tthis.viewModel = this.instantiationService.createInstance(TestingExplorerViewModel, listContainer, this.onDidChangeBodyVisibility);\n\t\tthis._register(this.viewModel.tree.onDidFocus(() => this.lastFocusState = LastFocusState.Tree));\n\t\tthis._register(this.viewModel.onChangeWelcomeVisibility(() => this._onDidChangeViewWelcomeState.fire()));\n\t\tthis._register(this.viewModel);\n\t\tthis._onDidChangeViewWelcomeState.fire();\n\t}\n\n\t/** @override  */\n\tpublic override getActionViewItem(action: IAction, options: IActionViewItemOptions): IActionViewItem | undefined {\n\t\tswitch (action.id) {\n\t\t\tcase TestCommandId.FilterAction:\n\t\t\t\tthis.filter.value = this.instantiationService.createInstance(TestingExplorerFilter, action, options);\n\t\t\t\tthis.filterFocusListener.value = this.filter.value.onDidFocus(() => this.lastFocusState = LastFocusState.Input);\n\t\t\t\treturn this.filter.value;\n\t\t\tcase TestCommandId.RunSelectedAction:\n\t\t\t\treturn this.getRunGroupDropdown(TestRunProfileBitset.Run, action, options);\n\t\t\tcase TestCommandId.DebugSelectedAction:\n\t\t\t\treturn this.getRunGroupDropdown(TestRunProfileBitset.Debug, action, options);\n\t\t\tdefault:\n\t\t\t\treturn super.getActionViewItem(action, options);\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tprivate getTestConfigGroupActions(group: TestRunProfileBitset) {\n\t\tconst profileActions: IAction[] = [];\n\n\t\tlet participatingGroups = 0;\n\t\tlet hasConfigurable = false;\n\t\tconst defaults = this.testProfileService.getGroupDefaultProfiles(group);\n\t\tfor (const { profiles, controller } of this.testProfileService.all()) {\n\t\t\tlet hasAdded = false;\n\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tif (profile.group !== group) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!hasAdded) {\n\t\t\t\t\thasAdded = true;\n\t\t\t\t\tparticipatingGroups++;\n\t\t\t\t\tprofileActions.push(new Action(`${controller.id}.$root`, controller.label.get(), undefined, false));\n\t\t\t\t}\n\n\t\t\t\thasConfigurable = hasConfigurable || profile.hasConfigurationHandler;\n\t\t\t\tprofileActions.push(new Action(\n\t\t\t\t\t`${controller.id}.${profile.profileId}`,\n\t\t\t\t\tdefaults.includes(profile) ? localize('defaultTestProfile', '{0} (Default)', profile.label) : profile.label,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst { include, exclude } = this.getTreeIncludeExclude(undefined, profile);\n\t\t\t\t\t\tthis.testService.runResolvedTests({\n\t\t\t\t\t\t\texclude: exclude.map(e => e.item.extId),\n\t\t\t\t\t\t\tgroup: profile.group,\n\t\t\t\t\t\t\ttargets: [{\n\t\t\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\t\t\ttestIds: include.map(i => i.item.extId),\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\n\t\tconst menuActions: IAction[] = [];\n\t\tconst contextKeys: [string, unknown][] = [];\n\t\t// allow extension author to define context for when to show the test menu actions for run or debug menus\n\t\tif (group === TestRunProfileBitset.Run) {\n\t\t\tcontextKeys.push(['testing.profile.context.group', 'run']);\n\t\t}\n\t\tif (group === TestRunProfileBitset.Debug) {\n\t\t\tcontextKeys.push(['testing.profile.context.group', 'debug']);\n\t\t}\n\t\tif (group === TestRunProfileBitset.Coverage) {\n\t\t\tcontextKeys.push(['testing.profile.context.group', 'coverage']);\n\t\t}\n\t\tconst key = this.contextKeyService.createOverlay(contextKeys);\n\t\tconst menu = this.menuService.getMenuActions(MenuId.TestProfilesContext, key);\n\n\t\t// fill if there are any actions\n\t\tcreateAndFillInContextMenuActions(menu, menuActions);\n\n\t\tconst postActions: IAction[] = [];\n\t\tif (profileActions.length > 1) {\n\t\t\tpostActions.push(new Action(\n\t\t\t\t'selectDefaultTestConfigurations',\n\t\t\t\tlocalize('selectDefaultConfigs', 'Select Default Profile'),\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\t() => this.commandService.executeCommand<ITestRunProfile>(TestCommandId.SelectDefaultTestProfiles, group),\n\t\t\t));\n\t\t}\n\n\t\tif (hasConfigurable) {\n\t\t\tpostActions.push(new Action(\n\t\t\t\t'configureTestProfiles',\n\t\t\t\tlocalize('configureTestProfiles', 'Configure Test Profiles'),\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\t() => this.commandService.executeCommand<ITestRunProfile>(TestCommandId.ConfigureTestProfilesAction, group),\n\t\t\t));\n\t\t}\n\n\t\t// show menu actions if there are any otherwise don't\n\t\treturn menuActions.length > 0\n\t\t\t? Separator.join(profileActions, menuActions, postActions)\n\t\t\t: Separator.join(profileActions, postActions);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override saveState() {\n\t\tthis.filter.value?.saveState();\n\t\tsuper.saveState();\n\t}\n\n\tprivate getRunGroupDropdown(group: TestRunProfileBitset, defaultAction: IAction, options: IActionViewItemOptions) {\n\t\tconst dropdownActions = this.getTestConfigGroupActions(group);\n\t\tif (dropdownActions.length < 2) {\n\t\t\treturn super.getActionViewItem(defaultAction, options);\n\t\t}\n\n\t\tconst primaryAction = this.instantiationService.createInstance(MenuItemAction, {\n\t\t\tid: defaultAction.id,\n\t\t\ttitle: defaultAction.label,\n\t\t\ticon: group === TestRunProfileBitset.Run\n\t\t\t\t? icons.testingRunAllIcon\n\t\t\t\t: icons.testingDebugAllIcon,\n\t\t}, undefined, undefined, undefined, undefined);\n\n\t\tconst dropdownAction = new Action('selectRunConfig', 'Select Configuration...', 'codicon-chevron-down', true);\n\n\t\treturn this.instantiationService.createInstance(\n\t\t\tDropdownWithPrimaryActionViewItem,\n\t\t\tprimaryAction, dropdownAction, dropdownActions,\n\t\t\t'',\n\t\t\tthis.contextMenuService,\n\t\t\toptions\n\t\t);\n\t}\n\n\tprivate createFilterActionBar() {\n\t\tconst bar = new ActionBar(this.treeHeader, {\n\t\t\tactionViewItemProvider: (action, options) => this.getActionViewItem(action, options),\n\t\t\ttriggerKeys: { keyDown: false, keys: [] },\n\t\t});\n\t\tbar.push(new Action(TestCommandId.FilterAction));\n\t\tbar.getContainer().classList.add('testing-filter-action-bar');\n\t\treturn bar;\n\t}\n\n\tprivate updateDiscoveryProgress(busy: number) {\n\t\tif (!busy && this.discoveryProgress) {\n\t\t\tthis.discoveryProgress.clear();\n\t\t} else if (busy && !this.discoveryProgress.value) {\n\t\t\tthis.discoveryProgress.value = this.instantiationService.createInstance(UnmanagedProgress, { location: this.getProgressLocation() });\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override layoutBody(height = this.dimensions.height, width = this.dimensions.width): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.dimensions.height = height;\n\t\tthis.dimensions.width = width;\n\t\tthis.container.style.height = `${height}px`;\n\t\tthis.viewModel?.layout(height - this.treeHeader.clientHeight, width);\n\t\tthis.filter.value?.layout(width);\n\t}\n}\n\nconst SUMMARY_RENDER_INTERVAL = 200;\n\nclass ResultSummaryView extends Disposable {\n\tprivate elementsWereAttached = false;\n\tprivate badgeType: TestingCountBadge;\n\tprivate lastBadge?: NumberBadge | IconBadge;\n\tprivate countHover: IManagedHover;\n\tprivate readonly badgeDisposable = this._register(new MutableDisposable());\n\tprivate readonly renderLoop = this._register(new RunOnceScheduler(() => this.render(), SUMMARY_RENDER_INTERVAL));\n\tprivate readonly elements = dom.h('div.result-summary', [\n\t\tdom.h('div@status'),\n\t\tdom.h('div@count'),\n\t\tdom.h('div@count'),\n\t\tdom.h('span'),\n\t\tdom.h('duration@duration'),\n\t\tdom.h('a@rerun'),\n\t]);\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@ITestingContinuousRunService private readonly crService: ITestingContinuousRunService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IHoverService hoverService: IHoverService,\n\t) {\n\t\tsuper();\n\n\t\tthis.badgeType = configurationService.getValue<TestingCountBadge>(TestingConfigKeys.CountBadge);\n\t\tthis._register(resultService.onResultsChanged(this.render, this));\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TestingConfigKeys.CountBadge)) {\n\t\t\t\tthis.badgeType = configurationService.getValue(TestingConfigKeys.CountBadge);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}));\n\n\t\tthis.countHover = this._register(hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), this.elements.count, ''));\n\n\t\tconst ab = this._register(new ActionBar(this.elements.rerun, {\n\t\t\tactionViewItemProvider: (action, options) => createActionViewItem(instantiationService, action, options),\n\t\t}));\n\t\tab.push(instantiationService.createInstance(MenuItemAction,\n\t\t\t{ ...new ReRunLastRun().desc, icon: icons.testingRerunIcon },\n\t\t\t{ ...new DebugLastRun().desc, icon: icons.testingDebugIcon },\n\t\t\t{},\n\t\t\tundefined, undefined\n\t\t), { icon: true, label: false });\n\n\t\tthis.render();\n\t}\n\n\tprivate render() {\n\t\tconst { results } = this.resultService;\n\t\tconst { count, root, status, duration, rerun } = this.elements;\n\t\tif (!results.length) {\n\t\t\tif (this.elementsWereAttached) {\n\t\t\t\troot.remove();\n\t\t\t\tthis.elementsWereAttached = false;\n\t\t\t}\n\t\t\tthis.container.innerText = localize('noResults', 'No test results yet.');\n\t\t\tthis.badgeDisposable.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst live = results.filter(r => !r.completedAt) as LiveTestResult[];\n\t\tlet counts: CountSummary;\n\t\tif (live.length) {\n\t\t\tstatus.className = ThemeIcon.asClassName(spinningLoading);\n\t\t\tcounts = collectTestStateCounts(true, live);\n\t\t\tthis.renderLoop.schedule();\n\n\t\t\tconst last = live[live.length - 1];\n\t\t\tduration.textContent = formatDuration(Date.now() - last.startedAt);\n\t\t\trerun.style.display = 'none';\n\t\t} else {\n\t\t\tconst last = results[0];\n\t\t\tconst dominantState = mapFindFirst(statesInOrder, s => last.counts[s] > 0 ? s : undefined);\n\t\t\tstatus.className = ThemeIcon.asClassName(icons.testingStatesToIcons.get(dominantState ?? TestResultState.Unset)!);\n\t\t\tcounts = collectTestStateCounts(false, [last]);\n\t\t\tduration.textContent = last instanceof LiveTestResult ? formatDuration(last.completedAt! - last.startedAt) : '';\n\t\t\trerun.style.display = 'block';\n\t\t}\n\n\t\tcount.textContent = `${counts.passed}/${counts.totalWillBeRun}`;\n\t\tthis.countHover.update(getTestProgressText(counts));\n\t\tthis.renderActivityBadge(counts);\n\n\t\tif (!this.elementsWereAttached) {\n\t\t\tdom.clearNode(this.container);\n\t\t\tthis.container.appendChild(root);\n\t\t\tthis.elementsWereAttached = true;\n\t\t}\n\t}\n\n\tprivate renderActivityBadge(countSummary: CountSummary) {\n\t\tif (countSummary && this.badgeType !== TestingCountBadge.Off && countSummary[this.badgeType] !== 0) {\n\t\t\tif (this.lastBadge instanceof NumberBadge && this.lastBadge.number === countSummary[this.badgeType]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.lastBadge = new NumberBadge(countSummary[this.badgeType], num => this.getLocalizedBadgeString(this.badgeType, num));\n\t\t} else if (this.crService.isEnabled()) {\n\t\t\tif (this.lastBadge instanceof IconBadge && this.lastBadge.icon === icons.testingContinuousIsOn) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.lastBadge = new IconBadge(icons.testingContinuousIsOn, () => localize('testingContinuousBadge', 'Tests are being watched for changes'));\n\t\t} else {\n\t\t\tif (!this.lastBadge) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.lastBadge = undefined;\n\t\t}\n\n\t\tthis.badgeDisposable.value = this.lastBadge && this.activityService.showViewActivity(Testing.ExplorerViewId, { badge: this.lastBadge });\n\t}\n\n\tprivate getLocalizedBadgeString(countBadgeType: TestingCountBadge, count: number): string {\n\t\tswitch (countBadgeType) {\n\t\t\tcase TestingCountBadge.Passed:\n\t\t\t\treturn localize('testingCountBadgePassed', '{0} passed tests', count);\n\t\t\tcase TestingCountBadge.Skipped:\n\t\t\t\treturn localize('testingCountBadgeSkipped', '{0} skipped tests', count);\n\t\t\tdefault:\n\t\t\t\treturn localize('testingCountBadgeFailed', '{0} failed tests', count);\n\t\t}\n\t}\n}\n\nconst enum WelcomeExperience {\n\tNone,\n\tForWorkspace,\n\tForDocument,\n}\n\nclass TestingExplorerViewModel extends Disposable {\n\tpublic tree: TestingObjectTree<FuzzyScore>;\n\tprivate filter: TestsFilter;\n\tpublic readonly projection = this._register(new MutableDisposable<ITestTreeProjection>());\n\n\tprivate readonly revealTimeout = new MutableDisposable();\n\tprivate readonly _viewMode = TestingContextKeys.viewMode.bindTo(this.contextKeyService);\n\tprivate readonly _viewSorting = TestingContextKeys.viewSorting.bindTo(this.contextKeyService);\n\tprivate readonly welcomeVisibilityEmitter = new Emitter<WelcomeExperience>();\n\tprivate readonly actionRunner = new TestExplorerActionRunner(() => this.tree.getSelection().filter(isDefined));\n\tprivate readonly lastViewState = this._register(new StoredValue<ISerializedTestTreeCollapseState>({\n\t\tkey: 'testing.treeState',\n\t\tscope: StorageScope.WORKSPACE,\n\t\ttarget: StorageTarget.MACHINE,\n\t}, this.storageService));\n\tprivate readonly noTestForDocumentWidget: NoTestsForDocumentWidget;\n\n\t/**\n\t * Whether there's a reveal request which has not yet been delivered. This\n\t * can happen if the user asks to reveal before the test tree is loaded.\n\t * We check to see if the reveal request is present on each tree update,\n\t * and do it then if so.\n\t */\n\tprivate hasPendingReveal = false;\n\t/**\n\t * Fires when the visibility of the placeholder state changes.\n\t */\n\tpublic readonly onChangeWelcomeVisibility = this.welcomeVisibilityEmitter.event;\n\n\t/**\n\t * Gets whether the welcome should be visible.\n\t */\n\tpublic welcomeExperience = WelcomeExperience.None;\n\n\tpublic get viewMode() {\n\t\treturn this._viewMode.get() ?? TestExplorerViewMode.Tree;\n\t}\n\n\tpublic set viewMode(newMode: TestExplorerViewMode) {\n\t\tif (newMode === this._viewMode.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._viewMode.set(newMode);\n\t\tthis.updatePreferredProjection();\n\t\tthis.storageService.store('testing.viewMode', newMode, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\n\tpublic get viewSorting() {\n\t\treturn this._viewSorting.get() ?? TestExplorerViewSorting.ByStatus;\n\t}\n\n\tpublic set viewSorting(newSorting: TestExplorerViewSorting) {\n\t\tif (newSorting === this._viewSorting.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._viewSorting.set(newSorting);\n\t\tthis.tree.resort(null);\n\t\tthis.storageService.store('testing.viewSorting', newSorting, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tconstructor(\n\t\tlistContainer: HTMLElement,\n\t\tonDidChangeVisibility: Event<boolean>,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupsService: IEditorGroupsService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestExplorerFilterState private readonly filterState: TestExplorerFilterState,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@ITestingPeekOpener private readonly peekOpener: ITestingPeekOpener,\n\t\t@ITestProfileService private readonly testProfileService: ITestProfileService,\n\t\t@ITestingContinuousRunService private readonly crService: ITestingContinuousRunService,\n\t\t@ICommandService commandService: ICommandService,\n\t) {\n\t\tsuper();\n\n\t\tthis.hasPendingReveal = !!filterState.reveal.value;\n\t\tthis.noTestForDocumentWidget = this._register(instantiationService.createInstance(NoTestsForDocumentWidget, listContainer));\n\t\tthis._viewMode.set(this.storageService.get('testing.viewMode', StorageScope.WORKSPACE, TestExplorerViewMode.Tree) as TestExplorerViewMode);\n\t\tthis._viewSorting.set(this.storageService.get('testing.viewSorting', StorageScope.WORKSPACE, TestExplorerViewSorting.ByLocation) as TestExplorerViewSorting);\n\n\t\tthis.reevaluateWelcomeState();\n\t\tthis.filter = this.instantiationService.createInstance(TestsFilter, testService.collection);\n\t\tthis.tree = instantiationService.createInstance(\n\t\t\tTestingObjectTree,\n\t\t\t'Test Explorer List',\n\t\t\tlistContainer,\n\t\t\tnew ListDelegate(),\n\t\t\t[\n\t\t\t\tinstantiationService.createInstance(TestItemRenderer, this.actionRunner),\n\t\t\t\tinstantiationService.createInstance(ErrorRenderer),\n\t\t\t],\n\t\t\t{\n\t\t\t\tidentityProvider: instantiationService.createInstance(IdentityProvider),\n\t\t\t\thideTwistiesOfChildlessElements: false,\n\t\t\t\tsorter: instantiationService.createInstance(TreeSorter, this),\n\t\t\t\tkeyboardNavigationLabelProvider: instantiationService.createInstance(TreeKeyboardNavigationLabelProvider),\n\t\t\t\taccessibilityProvider: instantiationService.createInstance(ListAccessibilityProvider),\n\t\t\t\tfilter: this.filter,\n\t\t\t\tfindWidgetEnabled: false,\n\t\t\t\topenOnSingleClick: false,\n\t\t\t}) as TestingObjectTree<FuzzyScore>;\n\n\n\t\t// saves the collapse state so that if items are removed or refreshed, they\n\t\t// retain the same state (#170169)\n\t\tconst collapseStateSaver = this._register(new RunOnceScheduler(() => {\n\t\t\t// reuse the last view state to avoid making a bunch of object garbage:\n\t\t\tconst state = this.tree.getOptimizedViewState(this.lastViewState.get({}));\n\t\t\tconst projection = this.projection.value;\n\t\t\tif (projection) {\n\t\t\t\tprojection.lastState = state;\n\t\t\t}\n\t\t}, 3000));\n\n\t\tthis._register(this.tree.onDidChangeCollapseState(evt => {\n\t\t\tif (evt.node.element instanceof TestItemTreeElement) {\n\t\t\t\tif (!evt.node.collapsed) {\n\t\t\t\t\tthis.projection.value?.expandElement(evt.node.element, evt.deep ? Infinity : 0);\n\t\t\t\t}\n\t\t\t\tcollapseStateSaver.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.crService.onDidChange(testId => {\n\t\t\tif (testId) {\n\t\t\t\t// a continuous run test will sort to the top:\n\t\t\t\tconst elem = this.projection.value?.getElementByTestId(testId);\n\t\t\t\tthis.tree.resort(elem?.parent && this.tree.hasElement(elem.parent) ? elem.parent : null, false);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(onDidChangeVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tthis.ensureProjection();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tree.onContextMenu(e => this.onContextMenu(e)));\n\n\t\tthis._register(Event.any(\n\t\t\tfilterState.text.onDidChange,\n\t\t\tfilterState.fuzzy.onDidChange,\n\t\t\ttestService.excluded.onTestExclusionsChanged,\n\t\t)(this.tree.refilter, this.tree));\n\n\t\tthis._register(this.tree.onDidOpen(e => {\n\t\t\tif (e.element instanceof TestItemTreeElement && !e.element.children.size && e.element.test.item.uri) {\n\t\t\t\tcommandService.executeCommand('vscode.revealTest', e.element.test.item.extId);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tree);\n\n\t\tthis._register(this.onChangeWelcomeVisibility(e => {\n\t\t\tthis.noTestForDocumentWidget.setVisible(e === WelcomeExperience.ForDocument);\n\t\t}));\n\n\t\tthis._register(dom.addStandardDisposableListener(this.tree.getHTMLElement(), 'keydown', evt => {\n\t\t\tif (evt.equals(KeyCode.Enter)) {\n\t\t\t\tthis.handleExecuteKeypress(evt);\n\t\t\t} else if (DefaultKeyboardNavigationDelegate.mightProducePrintableCharacter(evt)) {\n\t\t\t\tfilterState.text.value = evt.browserEvent.key;\n\t\t\t\tfilterState.focusInput();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(filterState.reveal.onDidChange(id => this.revealById(id, undefined, false)));\n\n\t\tthis._register(onDidChangeVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tfilterState.focusInput();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tree.onDidChangeSelection(evt => {\n\t\t\tif (dom.isMouseEvent(evt.browserEvent) && (evt.browserEvent.altKey || evt.browserEvent.shiftKey)) {\n\t\t\t\treturn; // don't focus when alt-clicking to multi select\n\t\t\t}\n\n\t\t\tconst selected = evt.elements[0];\n\t\t\tif (selected && evt.browserEvent && selected instanceof TestItemTreeElement\n\t\t\t\t&& selected.children.size === 0 && selected.test.expand === TestItemExpandState.NotExpandable) {\n\t\t\t\tthis.tryPeekError(selected);\n\t\t\t}\n\t\t}));\n\n\t\tlet followRunningTests = getTestingConfiguration(configurationService, TestingConfigKeys.FollowRunningTest);\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TestingConfigKeys.FollowRunningTest)) {\n\t\t\t\tfollowRunningTests = getTestingConfiguration(configurationService, TestingConfigKeys.FollowRunningTest);\n\t\t\t}\n\t\t}));\n\n\t\tlet alwaysRevealTestAfterStateChange = getTestingConfiguration(configurationService, TestingConfigKeys.AlwaysRevealTestOnStateChange);\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TestingConfigKeys.AlwaysRevealTestOnStateChange)) {\n\t\t\t\talwaysRevealTestAfterStateChange = getTestingConfiguration(configurationService, TestingConfigKeys.AlwaysRevealTestOnStateChange);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(testResults.onTestChanged(evt => {\n\t\t\tif (!followRunningTests) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (evt.reason !== TestResultItemChangeReason.OwnStateChange) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.tree.selectionSize > 1) {\n\t\t\t\treturn; // don't change a multi-selection #180950\n\t\t\t}\n\n\t\t\t// follow running tests, or tests whose state changed. Tests that\n\t\t\t// complete very fast may not enter the running state at all.\n\t\t\tif (evt.item.ownComputedState !== TestResultState.Running && !(evt.previousState === TestResultState.Queued && isStateWithResult(evt.item.ownComputedState))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.revealById(evt.item.item.extId, alwaysRevealTestAfterStateChange, false);\n\t\t}));\n\n\t\tthis._register(testResults.onResultsChanged(() => {\n\t\t\tthis.tree.resort(null);\n\t\t}));\n\n\t\tthis._register(this.testProfileService.onDidChange(() => {\n\t\t\tthis.tree.rerender();\n\t\t}));\n\n\t\tconst allOpenEditorInputs = observableFromEvent(this,\n\t\t\teditorService.onDidEditorsChange,\n\t\t\t() => new Set(editorGroupsService.groups.flatMap(g => g.editors).map(e => e.resource).filter(isDefined)),\n\t\t);\n\n\t\tconst activeResource = observableFromEvent(this, editorService.onDidActiveEditorChange, () => {\n\t\t\tif (editorService.activeEditor instanceof DiffEditorInput) {\n\t\t\t\treturn editorService.activeEditor.primary.resource;\n\t\t\t} else {\n\t\t\t\treturn editorService.activeEditor?.resource;\n\t\t\t}\n\t\t});\n\n\t\tconst filterText = observableFromEvent(this.filterState.text.onDidChange, () => this.filterState.text);\n\t\tthis._register(autorun(reader => {\n\t\t\tfilterText.read(reader);\n\t\t\tif (this.filterState.isFilteringFor(TestFilterTerm.OpenedFiles)) {\n\t\t\t\tthis.filter.filterToDocumentUri([...allOpenEditorInputs.read(reader)]);\n\t\t\t} else {\n\t\t\t\tthis.filter.filterToDocumentUri([activeResource.read(reader)].filter(isDefined));\n\t\t\t}\n\n\t\t\tif (this.filterState.isFilteringFor(TestFilterTerm.CurrentDoc) || this.filterState.isFilteringFor(TestFilterTerm.OpenedFiles)) {\n\t\t\t\tthis.tree.refilter();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.storageService.onWillSaveState(({ reason, }) => {\n\t\t\tif (reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\tthis.lastViewState.store(this.tree.getOptimizedViewState());\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Re-layout the tree.\n\t */\n\tpublic layout(height?: number, width?: number): void {\n\t\tthis.tree.layout(height, width);\n\t}\n\n\t/**\n\t * Tries to reveal by extension ID. Queues the request if the extension\n\t * ID is not currently available.\n\t */\n\tprivate revealById(id: string | undefined, expand = true, focus = true) {\n\t\tif (!id) {\n\t\t\tthis.hasPendingReveal = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst projection = this.ensureProjection();\n\n\t\t// If the item itself is visible in the tree, show it. Otherwise, expand\n\t\t// its closest parent.\n\t\tlet expandToLevel = 0;\n\t\tconst idPath = [...TestId.fromString(id).idsFromRoot()];\n\t\tfor (let i = idPath.length - 1; i >= expandToLevel; i--) {\n\t\t\tconst element = projection.getElementByTestId(idPath[i].toString());\n\t\t\t// Skip all elements that aren't in the tree.\n\t\t\tif (!element || !this.tree.hasElement(element)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If this 'if' is true, we're at the closest-visible parent to the node\n\t\t\t// we want to expand. Expand that, and then start the loop again because\n\t\t\t// we might already have children for it.\n\t\t\tif (i < idPath.length - 1) {\n\t\t\t\tif (expand) {\n\t\t\t\t\tthis.tree.expand(element);\n\t\t\t\t\texpandToLevel = i + 1; // avoid an infinite loop if the test does not exist\n\t\t\t\t\ti = idPath.length - 1; // restart the loop since new children may now be visible\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, we've arrived!\n\n\t\t\t// If the node or any of its children are excluded, flip on the 'show\n\t\t\t// excluded tests' checkbox automatically. If we didn't expand, then set\n\t\t\t// target focus target to the first collapsed element.\n\n\t\t\tlet focusTarget = element;\n\t\t\tfor (let n: TestItemTreeElement | null = element; n instanceof TestItemTreeElement; n = n.parent) {\n\t\t\t\tif (n.test && this.testService.excluded.contains(n.test)) {\n\t\t\t\t\tthis.filterState.toggleFilteringFor(TestFilterTerm.Hidden, true);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!expand && (this.tree.hasElement(n) && this.tree.isCollapsed(n))) {\n\t\t\t\t\tfocusTarget = n;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.filterState.reveal.value = undefined;\n\t\t\tthis.hasPendingReveal = false;\n\t\t\tif (focus) {\n\t\t\t\tthis.tree.domFocus();\n\t\t\t}\n\n\t\t\tif (this.tree.getRelativeTop(focusTarget) === null) {\n\t\t\t\tthis.tree.reveal(focusTarget, 0.5);\n\t\t\t}\n\n\t\t\tthis.revealTimeout.value = disposableTimeout(() => {\n\t\t\t\tthis.tree.setFocus([focusTarget]);\n\t\t\t\tthis.tree.setSelection([focusTarget]);\n\t\t\t}, 1);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If here, we've expanded all parents we can. Waiting on data to come\n\t\t// in to possibly show the revealed test.\n\t\tthis.hasPendingReveal = true;\n\t}\n\n\t/**\n\t * Collapse all items in the tree.\n\t */\n\tpublic async collapseAll() {\n\t\tthis.tree.collapseAll();\n\t}\n\n\t/**\n\t * Tries to peek the first test error, if the item is in a failed state.\n\t */\n\tprivate tryPeekError(item: TestItemTreeElement) {\n\t\tconst lookup = item.test && this.testResults.getStateById(item.test.item.extId);\n\t\treturn lookup && lookup[1].tasks.some(s => isFailedState(s.state))\n\t\t\t? this.peekOpener.tryPeekFirstError(lookup[0], lookup[1], { preserveFocus: true })\n\t\t\t: false;\n\t}\n\n\tprivate onContextMenu(evt: ITreeContextMenuEvent<TestExplorerTreeElement | null>) {\n\t\tconst element = evt.element;\n\t\tif (!(element instanceof TestItemTreeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { actions } = getActionableElementActions(this.contextKeyService, this.menuService, this.testService, this.crService, this.testProfileService, element);\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => evt.anchor,\n\t\t\tgetActions: () => actions.secondary,\n\t\t\tgetActionsContext: () => element,\n\t\t\tactionRunner: this.actionRunner,\n\t\t});\n\t}\n\n\tprivate handleExecuteKeypress(evt: IKeyboardEvent) {\n\t\tconst focused = this.tree.getFocus();\n\t\tconst selected = this.tree.getSelection();\n\t\tlet targeted: (TestExplorerTreeElement | null)[];\n\t\tif (focused.length === 1 && selected.includes(focused[0])) {\n\t\t\tevt.browserEvent?.preventDefault();\n\t\t\ttargeted = selected;\n\t\t} else {\n\t\t\ttargeted = focused;\n\t\t}\n\n\t\tconst toRun = targeted\n\t\t\t.filter((e): e is TestItemTreeElement => e instanceof TestItemTreeElement);\n\n\t\tif (toRun.length) {\n\t\t\tthis.testService.runTests({\n\t\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\t\ttests: toRun.map(t => t.test),\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate reevaluateWelcomeState() {\n\t\tconst shouldShowWelcome = this.testService.collection.busyProviders === 0 && testCollectionIsEmpty(this.testService.collection);\n\t\tconst welcomeExperience = shouldShowWelcome\n\t\t\t? (this.filterState.isFilteringFor(TestFilterTerm.CurrentDoc) ? WelcomeExperience.ForDocument : WelcomeExperience.ForWorkspace)\n\t\t\t: WelcomeExperience.None;\n\n\t\tif (welcomeExperience !== this.welcomeExperience) {\n\t\t\tthis.welcomeExperience = welcomeExperience;\n\t\t\tthis.welcomeVisibilityEmitter.fire(welcomeExperience);\n\t\t}\n\t}\n\n\tprivate ensureProjection() {\n\t\treturn this.projection.value ?? this.updatePreferredProjection();\n\t}\n\n\tprivate updatePreferredProjection() {\n\t\tthis.projection.clear();\n\n\t\tconst lastState = this.lastViewState.get({});\n\t\tif (this._viewMode.get() === TestExplorerViewMode.List) {\n\t\t\tthis.projection.value = this.instantiationService.createInstance(ListProjection, lastState);\n\t\t} else {\n\t\t\tthis.projection.value = this.instantiationService.createInstance(TreeProjection, lastState);\n\t\t}\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => this.applyProjectionChanges(), 200));\n\t\tthis.projection.value.onUpdate(() => {\n\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule();\n\t\t\t}\n\t\t});\n\n\t\tthis.applyProjectionChanges();\n\t\treturn this.projection.value;\n\t}\n\n\tprivate applyProjectionChanges() {\n\t\tthis.reevaluateWelcomeState();\n\t\tthis.projection.value?.applyTo(this.tree);\n\n\t\tthis.tree.refilter();\n\n\t\tif (this.hasPendingReveal) {\n\t\t\tthis.revealById(this.filterState.reveal.value);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the selected tests from the tree.\n\t */\n\tpublic getSelectedTests() {\n\t\treturn this.tree.getSelection();\n\t}\n}\n\nconst enum FilterResult {\n\tExclude,\n\tInherit,\n\tInclude,\n}\n\nconst hasNodeInOrParentOfUri = (collection: IMainThreadTestCollection, ident: IUriIdentityService, testUri: URI, fromNode?: string) => {\n\tconst queue: Iterable<string>[] = [fromNode ? [fromNode] : collection.rootIds];\n\twhile (queue.length) {\n\t\tfor (const id of queue.pop()!) {\n\t\t\tconst node = collection.getNodeById(id);\n\t\t\tif (!node) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!node.item.uri || !ident.extUri.isEqualOrParent(testUri, node.item.uri)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Only show nodes that can be expanded (and might have a child with\n\t\t\t// a range) or ones that have a physical location.\n\t\t\tif (node.item.range || node.expand === TestItemExpandState.Expandable) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tqueue.push(node.children);\n\t\t}\n\t}\n\n\treturn false;\n};\n\nclass TestsFilter implements ITreeFilter<TestExplorerTreeElement> {\n\tprivate documentUris: URI[] = [];\n\n\tconstructor(\n\t\tprivate readonly collection: IMainThreadTestCollection,\n\t\t@ITestExplorerFilterState private readonly state: ITestExplorerFilterState,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) { }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic filter(element: TestItemTreeElement): TreeFilterResult<void> {\n\t\tif (element instanceof TestTreeErrorMessage) {\n\t\t\treturn TreeVisibility.Visible;\n\t\t}\n\n\t\tif (\n\t\t\telement.test\n\t\t\t&& !this.state.isFilteringFor(TestFilterTerm.Hidden)\n\t\t\t&& this.testService.excluded.contains(element.test)\n\t\t) {\n\t\t\treturn TreeVisibility.Hidden;\n\t\t}\n\n\t\tswitch (Math.min(this.testFilterText(element), this.testLocation(element), this.testState(element), this.testTags(element))) {\n\t\t\tcase FilterResult.Exclude:\n\t\t\t\treturn TreeVisibility.Hidden;\n\t\t\tcase FilterResult.Include:\n\t\t\t\treturn TreeVisibility.Visible;\n\t\t\tdefault:\n\t\t\t\treturn TreeVisibility.Recurse;\n\t\t}\n\t}\n\n\tpublic filterToDocumentUri(uris: readonly URI[]) {\n\t\tthis.documentUris = [...uris];\n\t}\n\n\tprivate testTags(element: TestItemTreeElement): FilterResult {\n\t\tif (!this.state.includeTags.size && !this.state.excludeTags.size) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\treturn (this.state.includeTags.size ?\n\t\t\telement.test.item.tags.some(t => this.state.includeTags.has(t)) :\n\t\t\ttrue) && element.test.item.tags.every(t => !this.state.excludeTags.has(t))\n\t\t\t? FilterResult.Include\n\t\t\t: FilterResult.Inherit;\n\t}\n\n\tprivate testState(element: TestItemTreeElement): FilterResult {\n\t\tif (this.state.isFilteringFor(TestFilterTerm.Failed)) {\n\t\t\treturn isFailedState(element.state) ? FilterResult.Include : FilterResult.Inherit;\n\t\t}\n\n\t\tif (this.state.isFilteringFor(TestFilterTerm.Executed)) {\n\t\t\treturn element.state !== TestResultState.Unset ? FilterResult.Include : FilterResult.Inherit;\n\t\t}\n\n\t\treturn FilterResult.Include;\n\t}\n\n\tprivate testLocation(element: TestItemTreeElement): FilterResult {\n\t\tif (this.documentUris.length === 0) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\tif ((!this.state.isFilteringFor(TestFilterTerm.CurrentDoc) && !this.state.isFilteringFor(TestFilterTerm.OpenedFiles)) || !(element instanceof TestItemTreeElement)) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\tif (this.documentUris.some(uri => hasNodeInOrParentOfUri(this.collection, this.uriIdentityService, uri, element.test.item.extId))) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\treturn FilterResult.Inherit;\n\t}\n\n\tprivate testFilterText(element: TestItemTreeElement) {\n\t\tif (this.state.globList.length === 0) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\tconst fuzzy = this.state.fuzzy.value;\n\t\tfor (let e: TestItemTreeElement | null = element; e; e = e.parent) {\n\t\t\t// start as included if the first glob is a negation\n\t\t\tlet included = this.state.globList[0].include === false ? FilterResult.Include : FilterResult.Inherit;\n\t\t\tconst data = e.test.item.label.toLowerCase();\n\n\t\t\tfor (const { include, text } of this.state.globList) {\n\t\t\t\tif (fuzzy ? fuzzyContains(data, text) : data.includes(text)) {\n\t\t\t\t\tincluded = include ? FilterResult.Include : FilterResult.Exclude;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (included !== FilterResult.Inherit) {\n\t\t\t\treturn included;\n\t\t\t}\n\t\t}\n\n\t\treturn FilterResult.Inherit;\n\t}\n}\n\nclass TreeSorter implements ITreeSorter<TestExplorerTreeElement> {\n\tconstructor(\n\t\tprivate readonly viewModel: TestingExplorerViewModel,\n\t) { }\n\n\tpublic compare(a: TestExplorerTreeElement, b: TestExplorerTreeElement): number {\n\t\tif (a instanceof TestTreeErrorMessage || b instanceof TestTreeErrorMessage) {\n\t\t\treturn (a instanceof TestTreeErrorMessage ? -1 : 0) + (b instanceof TestTreeErrorMessage ? 1 : 0);\n\t\t}\n\n\t\tconst durationDelta = (b.duration || 0) - (a.duration || 0);\n\t\tif (this.viewModel.viewSorting === TestExplorerViewSorting.ByDuration && durationDelta !== 0) {\n\t\t\treturn durationDelta;\n\t\t}\n\n\t\tconst stateDelta = cmpPriority(a.state, b.state);\n\t\tif (this.viewModel.viewSorting === TestExplorerViewSorting.ByStatus && stateDelta !== 0) {\n\t\t\treturn stateDelta;\n\t\t}\n\n\t\tlet inSameLocation = false;\n\t\tif (a instanceof TestItemTreeElement && b instanceof TestItemTreeElement && a.test.item.uri && b.test.item.uri && a.test.item.uri.toString() === b.test.item.uri.toString() && a.test.item.range && b.test.item.range) {\n\t\t\tinSameLocation = true;\n\n\t\t\tconst delta = a.test.item.range.startLineNumber - b.test.item.range.startLineNumber;\n\t\t\tif (delta !== 0) {\n\t\t\t\treturn delta;\n\t\t\t}\n\t\t}\n\n\t\tconst sa = a.test.item.sortText;\n\t\tconst sb = b.test.item.sortText;\n\t\t// If tests are in the same location and there's no preferred sortText,\n\t\t// keep the extension's insertion order (#163449).\n\t\treturn inSameLocation && !sa && !sb ? 0 : (sa || a.test.item.label).localeCompare(sb || b.test.item.label);\n\t}\n}\n\nclass NoTestsForDocumentWidget extends Disposable {\n\tprivate readonly el: HTMLElement;\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\t@ITestExplorerFilterState filterState: ITestExplorerFilterState\n\t) {\n\t\tsuper();\n\t\tconst el = this.el = dom.append(container, dom.$('.testing-no-test-placeholder'));\n\t\tconst emptyParagraph = dom.append(el, dom.$('p'));\n\t\temptyParagraph.innerText = localize('testingNoTest', 'No tests were found in this file.');\n\t\tconst buttonLabel = localize('testingFindExtension', 'Show Workspace Tests');\n\t\tconst button = this._register(new Button(el, { title: buttonLabel, ...defaultButtonStyles }));\n\t\tbutton.label = buttonLabel;\n\t\tthis._register(button.onDidClick(() => filterState.toggleFilteringFor(TestFilterTerm.CurrentDoc, false)));\n\t}\n\n\tpublic setVisible(isVisible: boolean) {\n\t\tthis.el.classList.toggle('visible', isVisible);\n\t}\n}\n\nclass TestExplorerActionRunner extends ActionRunner {\n\tconstructor(private getSelectedTests: () => ReadonlyArray<TestExplorerTreeElement>) {\n\t\tsuper();\n\t}\n\n\tprotected override async runAction(action: IAction, context: TestExplorerTreeElement): Promise<any> {\n\t\tif (!(action instanceof MenuItemAction)) {\n\t\t\treturn super.runAction(action, context);\n\t\t}\n\n\t\tconst selection = this.getSelectedTests();\n\t\tconst contextIsSelected = selection.some(s => s === context);\n\t\tconst actualContext = contextIsSelected ? selection : [context];\n\t\tconst actionable = actualContext.filter((t): t is TestItemTreeElement => t instanceof TestItemTreeElement);\n\t\tawait action.run(...actionable);\n\t}\n}\n\nconst getLabelForTestTreeElement = (element: TestItemTreeElement) => {\n\tlet label = labelForTestInState(element.description || element.test.item.label, element.state);\n\n\tif (element instanceof TestItemTreeElement) {\n\t\tif (element.duration !== undefined) {\n\t\t\tlabel = localize({\n\t\t\t\tkey: 'testing.treeElementLabelDuration',\n\t\t\t\tcomment: ['{0} is the original label in testing.treeElementLabel, {1} is a duration'],\n\t\t\t}, '{0}, in {1}', label, formatDuration(element.duration));\n\t\t}\n\n\t\tif (element.retired) {\n\t\t\tlabel = localize({\n\t\t\t\tkey: 'testing.treeElementLabelOutdated',\n\t\t\t\tcomment: ['{0} is the original label in testing.treeElementLabel'],\n\t\t\t}, '{0}, outdated result', label);\n\t\t}\n\t}\n\n\treturn label;\n};\n\nclass ListAccessibilityProvider implements IListAccessibilityProvider<TestExplorerTreeElement> {\n\tgetWidgetAriaLabel(): string {\n\t\treturn localize('testExplorer', \"Test Explorer\");\n\t}\n\n\tgetAriaLabel(element: TestExplorerTreeElement): string {\n\t\treturn element instanceof TestTreeErrorMessage\n\t\t\t? element.description\n\t\t\t: getLabelForTestTreeElement(element);\n\t}\n}\n\nclass TreeKeyboardNavigationLabelProvider implements IKeyboardNavigationLabelProvider<TestExplorerTreeElement> {\n\tgetKeyboardNavigationLabel(element: TestExplorerTreeElement) {\n\t\treturn element instanceof TestTreeErrorMessage ? element.message : element.test.item.label;\n\t}\n}\n\nclass ListDelegate implements IListVirtualDelegate<TestExplorerTreeElement> {\n\tgetHeight(element: TestExplorerTreeElement) {\n\t\treturn element instanceof TestTreeErrorMessage ? 17 + 10 : 22;\n\t}\n\n\tgetTemplateId(element: TestExplorerTreeElement) {\n\t\tif (element instanceof TestTreeErrorMessage) {\n\t\t\treturn ErrorRenderer.ID;\n\t\t}\n\n\t\treturn TestItemRenderer.ID;\n\t}\n}\n\nclass IdentityProvider implements IIdentityProvider<TestExplorerTreeElement> {\n\tpublic getId(element: TestExplorerTreeElement) {\n\t\treturn element.treeId;\n\t}\n}\n\ninterface IErrorTemplateData {\n\tlabel: HTMLElement;\n\tdisposable: DisposableStore;\n}\n\nclass ErrorRenderer implements ITreeRenderer<TestTreeErrorMessage, FuzzyScore, IErrorTemplateData> {\n\tstatic readonly ID = 'error';\n\n\tprivate readonly renderer: MarkdownRenderer;\n\n\tconstructor(\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t\t@IInstantiationService instantionService: IInstantiationService,\n\t) {\n\t\tthis.renderer = instantionService.createInstance(MarkdownRenderer, {});\n\t}\n\n\tget templateId(): string {\n\t\treturn ErrorRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IErrorTemplateData {\n\t\tconst label = dom.append(container, dom.$('.error'));\n\t\treturn { label, disposable: new DisposableStore() };\n\t}\n\n\trenderElement({ element }: ITreeNode<TestTreeErrorMessage, FuzzyScore>, _: number, data: IErrorTemplateData): void {\n\t\tdom.clearNode(data.label);\n\n\t\tif (typeof element.message === 'string') {\n\t\t\tdata.label.innerText = element.message;\n\t\t} else {\n\t\t\tconst result = this.renderer.render(element.message, { inline: true });\n\t\t\tdata.label.appendChild(result.element);\n\t\t}\n\t\tdata.disposable.add(this.hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), data.label, element.description));\n\t}\n\n\tdisposeTemplate(data: IErrorTemplateData): void {\n\t\tdata.disposable.dispose();\n\t}\n}\n\ninterface ITestElementTemplateData {\n\tcurrent?: TestItemTreeElement;\n\tlabel: HTMLElement;\n\ticon: HTMLElement;\n\twrapper: HTMLElement;\n\tactionBar: ActionBar;\n\telementDisposable: DisposableStore;\n\ttemplateDisposable: DisposableStore;\n}\n\nclass TestItemRenderer extends Disposable\n\timplements ITreeRenderer<TestItemTreeElement, FuzzyScore, ITestElementTemplateData> {\n\tpublic static readonly ID = 'testItem';\n\n\tconstructor(\n\t\tprivate readonly actionRunner: TestExplorerActionRunner,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@ITestService protected readonly testService: ITestService,\n\t\t@ITestProfileService protected readonly profiles: ITestProfileService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITestingContinuousRunService private readonly crService: ITestingContinuousRunService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly templateId = TestItemRenderer.ID;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic renderTemplate(container: HTMLElement): ITestElementTemplateData {\n\t\tconst wrapper = dom.append(container, dom.$('.test-item'));\n\n\t\tconst icon = dom.append(wrapper, dom.$('.computed-state'));\n\t\tconst label = dom.append(wrapper, dom.$('.label'));\n\t\tconst disposable = new DisposableStore();\n\n\t\tdom.append(wrapper, dom.$(ThemeIcon.asCSSSelector(icons.testingHiddenIcon)));\n\t\tconst actionBar = disposable.add(new ActionBar(wrapper, {\n\t\t\tactionRunner: this.actionRunner,\n\t\t\tactionViewItemProvider: (action, options) =>\n\t\t\t\taction instanceof MenuItemAction\n\t\t\t\t\t? this.instantiationService.createInstance(MenuEntryActionViewItem, action, { hoverDelegate: options.hoverDelegate })\n\t\t\t\t\t: undefined\n\t\t}));\n\n\t\tdisposable.add(this.crService.onDidChange(changed => {\n\t\t\tconst id = templateData.current?.test.item.extId;\n\t\t\tif (id && (!changed || changed === id || TestId.isChild(id, changed))) {\n\t\t\t\tthis.fillActionBar(templateData.current!, templateData);\n\t\t\t}\n\t\t}));\n\n\t\tconst templateData: ITestElementTemplateData = { wrapper, label, actionBar, icon, elementDisposable: new DisposableStore(), templateDisposable: disposable };\n\t\treturn templateData;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tdisposeTemplate(templateData: ITestElementTemplateData): void {\n\t\ttemplateData.templateDisposable.clear();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tdisposeElement(_element: ITreeNode<TestItemTreeElement, FuzzyScore>, _: number, templateData: ITestElementTemplateData): void {\n\t\ttemplateData.elementDisposable.clear();\n\t}\n\n\tprivate fillActionBar(element: TestItemTreeElement, data: ITestElementTemplateData) {\n\t\tconst { actions, contextOverlay } = getActionableElementActions(this.contextKeyService, this.menuService, this.testService, this.crService, this.profiles, element);\n\t\tconst crSelf = !!contextOverlay.getContextKeyValue(TestingContextKeys.isContinuousModeOn.key);\n\t\tconst crChild = !crSelf && this.crService.isEnabledForAChildOf(element.test.item.extId);\n\t\tdata.actionBar.domNode.classList.toggle('testing-is-continuous-run', crSelf || crChild);\n\t\tdata.actionBar.clear();\n\t\tdata.actionBar.context = element;\n\t\tdata.actionBar.push(actions.primary, { icon: true, label: false });\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic renderElement(node: ITreeNode<TestItemTreeElement, FuzzyScore>, _depth: number, data: ITestElementTemplateData): void {\n\t\tdata.elementDisposable.clear();\n\t\tdata.current = node.element;\n\t\tthis.fillActionBar(node.element, data);\n\n\n\t\tdata.elementDisposable.add(node.element.onChange(() => this._renderElement(node, data)));\n\t\tthis._renderElement(node, data);\n\t}\n\n\tpublic _renderElement(node: ITreeNode<TestItemTreeElement, FuzzyScore>, data: ITestElementTemplateData): void {\n\t\tconst testHidden = this.testService.excluded.contains(node.element.test);\n\t\tdata.wrapper.classList.toggle('test-is-hidden', testHidden);\n\n\t\tconst icon = icons.testingStatesToIcons.get(\n\t\t\tnode.element.test.expand === TestItemExpandState.BusyExpanding || node.element.test.item.busy\n\t\t\t\t? TestResultState.Running\n\t\t\t\t: node.element.state);\n\n\t\tdata.icon.className = 'computed-state ' + (icon ? ThemeIcon.asClassName(icon) : '');\n\t\tif (node.element.retired) {\n\t\t\tdata.icon.className += ' retired';\n\t\t}\n\n\t\tdata.elementDisposable.add(this.hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), data.label, getLabelForTestTreeElement(node.element)));\n\t\tif (node.element.test.item.label.trim()) {\n\t\t\tdom.reset(data.label, ...renderLabelWithIcons(node.element.test.item.label));\n\t\t} else {\n\t\t\tdata.label.textContent = String.fromCharCode(0xA0); // &nbsp;\n\t\t}\n\n\t\tlet description = node.element.description;\n\t\tif (node.element.duration !== undefined) {\n\t\t\tdescription = description\n\t\t\t\t? `${description}: ${formatDuration(node.element.duration)}`\n\t\t\t\t: formatDuration(node.element.duration);\n\t\t}\n\n\t\tif (description) {\n\t\t\tdom.append(data.label, dom.$('span.test-label-description', {}, description));\n\t\t}\n\t}\n}\n\nconst formatDuration = (ms: number) => {\n\tif (ms < 10) {\n\t\treturn `${ms.toFixed(1)}ms`;\n\t}\n\n\tif (ms < 1_000) {\n\t\treturn `${ms.toFixed(0)}ms`;\n\t}\n\n\treturn `${(ms / 1000).toFixed(1)}s`;\n};\n\nconst getActionableElementActions = (\n\tcontextKeyService: IContextKeyService,\n\tmenuService: IMenuService,\n\ttestService: ITestService,\n\tcrService: ITestingContinuousRunService,\n\tprofiles: ITestProfileService,\n\telement: TestItemTreeElement,\n) => {\n\tconst test = element instanceof TestItemTreeElement ? element.test : undefined;\n\tconst contextKeys: [string, unknown][] = getTestItemContextOverlay(test, test ? profiles.capabilitiesForTest(test.item) : 0);\n\tcontextKeys.push(['view', Testing.ExplorerViewId]);\n\tif (test) {\n\t\tconst ctrl = testService.getTestController(test.controllerId);\n\t\tconst supportsCr = !!ctrl && profiles.getControllerProfiles(ctrl.id).some(p => p.supportsContinuousRun);\n\t\tcontextKeys.push([\n\t\t\tTestingContextKeys.canRefreshTests.key,\n\t\t\tctrl && !!(ctrl.capabilities.get() & TestControllerCapability.Refresh) && TestId.isRoot(test.item.extId),\n\t\t], [\n\t\t\tTestingContextKeys.testItemIsHidden.key,\n\t\t\ttestService.excluded.contains(test)\n\t\t], [\n\t\t\tTestingContextKeys.isContinuousModeOn.key,\n\t\t\tsupportsCr && crService.isSpecificallyEnabledFor(test.item.extId)\n\t\t], [\n\t\t\tTestingContextKeys.isParentRunningContinuously.key,\n\t\t\tsupportsCr && crService.isEnabledForAParentOf(test.item.extId)\n\t\t], [\n\t\t\tTestingContextKeys.supportsContinuousRun.key,\n\t\t\tsupportsCr,\n\t\t]);\n\t}\n\n\tconst contextOverlay = contextKeyService.createOverlay(contextKeys);\n\tconst menu = menuService.getMenuActions(MenuId.TestItem, contextOverlay, {\n\t\tshouldForwardArgs: true,\n\t});\n\n\tconst primary: IAction[] = [];\n\tconst secondary: IAction[] = [];\n\tconst result = { primary, secondary };\n\tcreateAndFillInActionBarActions(menu, result, 'inline');\n\n\treturn { actions: result, contextOverlay };\n\n};\n\nregisterThemingParticipant((theme, collector) => {\n\tif (theme.type === 'dark') {\n\t\tconst foregroundColor = theme.getColor(foreground);\n\t\tif (foregroundColor) {\n\t\t\tconst fgWithOpacity = new Color(new RGBA(foregroundColor.rgba.r, foregroundColor.rgba.g, foregroundColor.rgba.b, 0.65));\n\t\t\tcollector.addRule(`.test-explorer .test-explorer-messages { color: ${fgWithOpacity}; }`);\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": ["LastFocusState", "WelcomeExperience", "FilterResult"]
}
