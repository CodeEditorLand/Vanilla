{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testingProgressUiService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { autorun } from '../../../../base/common/observable.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ExplorerTestCoverageBars } from './testCoverageBars.js';\nimport { AutoOpenTesting, getTestingConfiguration, TestingConfigKeys } from '../common/configuration.js';\nimport { Testing } from '../common/constants.js';\nimport { ITestCoverageService } from '../common/testCoverageService.js';\nimport { isFailedState } from '../common/testingStates.js';\nimport { ITestResult, LiveTestResult, TestResultItemChangeReason } from '../common/testResult.js';\nimport { ITestResultService } from '../common/testResultService.js';\nimport { TestResultState } from '../common/testTypes.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\n\n/** Workbench contribution that triggers updates in the TestingProgressUi service */\nexport class TestingProgressTrigger extends Disposable {\n\tconstructor(\n\t\t@ITestResultService resultService: ITestResultService,\n\t\t@ITestCoverageService testCoverageService: ITestCoverageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(resultService.onResultsChanged((e) => {\n\t\t\tif ('started' in e) {\n\t\t\t\tthis.attachAutoOpenForNewResults(e.started);\n\t\t\t}\n\t\t}));\n\n\t\tconst barContributionRegistration = autorun(reader => {\n\t\t\tconst hasCoverage = !!testCoverageService.selected.read(reader);\n\t\t\tif (!hasCoverage) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbarContributionRegistration.dispose();\n\t\t\tExplorerTestCoverageBars.register();\n\t\t});\n\n\t\tthis._register(barContributionRegistration);\n\t}\n\n\tprivate attachAutoOpenForNewResults(result: LiveTestResult) {\n\t\tif (result.request.preserveFocus === true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cfg = getTestingConfiguration(this.configurationService, TestingConfigKeys.OpenTesting);\n\t\tif (cfg === AutoOpenTesting.NeverOpen) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (cfg === AutoOpenTesting.OpenExplorerOnTestStart) {\n\t\t\treturn this.openExplorerView();\n\t\t}\n\n\t\tif (cfg === AutoOpenTesting.OpenOnTestStart) {\n\t\t\treturn this.openResultsView();\n\t\t}\n\n\t\t// open on failure\n\t\tconst disposable = new DisposableStore();\n\t\tdisposable.add(result.onComplete(() => disposable.dispose()));\n\t\tdisposable.add(result.onChange(e => {\n\t\t\tif (e.reason === TestResultItemChangeReason.OwnStateChange && isFailedState(e.item.ownComputedState)) {\n\t\t\t\tthis.openResultsView();\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate openExplorerView() {\n\t\tthis.viewsService.openView(Testing.ExplorerViewId, false);\n\t}\n\n\tprivate openResultsView() {\n\t\tthis.viewsService.openView(Testing.ResultsViewId, false);\n\t}\n}\n\nexport type CountSummary = ReturnType<typeof collectTestStateCounts>;\n\nexport const collectTestStateCounts = (isRunning: boolean, results: ReadonlyArray<ITestResult>) => {\n\tlet passed = 0;\n\tlet failed = 0;\n\tlet skipped = 0;\n\tlet running = 0;\n\tlet queued = 0;\n\n\tfor (const result of results) {\n\t\tconst count = result.counts;\n\t\tfailed += count[TestResultState.Errored] + count[TestResultState.Failed];\n\t\tpassed += count[TestResultState.Passed];\n\t\tskipped += count[TestResultState.Skipped];\n\t\trunning += count[TestResultState.Running];\n\t\tqueued += count[TestResultState.Queued];\n\t}\n\n\treturn {\n\t\tisRunning,\n\t\tpassed,\n\t\tfailed,\n\t\trunSoFar: passed + failed,\n\t\ttotalWillBeRun: passed + failed + queued + running,\n\t\tskipped,\n\t};\n};\n\nexport const getTestProgressText = ({ isRunning, passed, runSoFar, totalWillBeRun, skipped, failed }: CountSummary) => {\n\tlet percent = passed / runSoFar * 100;\n\tif (failed > 0) {\n\t\t// fix: prevent from rounding to 100 if there's any failed test\n\t\tpercent = Math.min(percent, 99.9);\n\t} else if (runSoFar === 0) {\n\t\tpercent = 0;\n\t}\n\n\tif (isRunning) {\n\t\tif (runSoFar === 0) {\n\t\t\treturn localize('testProgress.runningInitial', 'Running tests...');\n\t\t} else if (skipped === 0) {\n\t\t\treturn localize('testProgress.running', 'Running tests, {0}/{1} passed ({2}%)', passed, totalWillBeRun, percent.toPrecision(3));\n\t\t} else {\n\t\t\treturn localize('testProgressWithSkip.running', 'Running tests, {0}/{1} tests passed ({2}%, {3} skipped)', passed, totalWillBeRun, percent.toPrecision(3), skipped);\n\t\t}\n\t} else {\n\t\tif (skipped === 0) {\n\t\t\treturn localize('testProgress.completed', '{0}/{1} tests passed ({2}%)', passed, runSoFar, percent.toPrecision(3));\n\t\t} else {\n\t\t\treturn localize('testProgressWithSkip.completed', '{0}/{1} tests passed ({2}%, {3} skipped)', passed, runSoFar, percent.toPrecision(3), skipped);\n\t\t}\n\t}\n};\n"],
  "mappings": "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",
  "names": []
}
