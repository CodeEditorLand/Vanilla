import{Color as f,RGBA as v}from"../../../../base/common/color.js";import{localize as e}from"../../../../nls.js";import{badgeBackground as I,badgeForeground as L,chartsGreen as x,chartsRed as C,contrastBorder as n,diffInserted as d,diffRemoved as c,editorBackground as l,editorErrorForeground as s,editorForeground as u,editorInfoForeground as g,opaque as m,registerColor as o,transparent as t}from"../../../../platform/theme/common/colorRegistry.js";import{registerThemingParticipant as S}from"../../../../platform/theme/common/themeService.js";import{TestResultState as r}from"../common/testTypes.js";const w=o("testing.iconFailed",{dark:"#f14c4c",light:"#f14c4c",hcDark:"#f14c4c",hcLight:"#B5200D"},e("testing.iconFailed","Color for the 'failed' icon in the test explorer.")),R=o("testing.iconErrored",{dark:"#f14c4c",light:"#f14c4c",hcDark:"#f14c4c",hcLight:"#B5200D"},e("testing.iconErrored","Color for the 'Errored' icon in the test explorer.")),h=o("testing.iconPassed",{dark:"#73c991",light:"#73c991",hcDark:"#73c991",hcLight:"#007100"},e("testing.iconPassed","Color for the 'passed' icon in the test explorer.")),j=o("testing.runAction",h,e("testing.runAction","Color for 'run' icons in the editor.")),F=o("testing.iconQueued","#cca700",e("testing.iconQueued","Color for the 'Queued' icon in the test explorer.")),D=o("testing.iconUnset","#848484",e("testing.iconUnset","Color for the 'Unset' icon in the test explorer.")),b=o("testing.iconSkipped","#848484",e("testing.iconSkipped","Color for the 'Skipped' icon in the test explorer.")),y=o("testing.peekBorder",{dark:s,light:s,hcDark:n,hcLight:n},e("testing.peekBorder","Color of the peek view borders and arrow.")),J=o("testing.messagePeekBorder",{dark:g,light:g,hcDark:n,hcLight:n},e("testing.messagePeekBorder","Color of the peek view borders and arrow when peeking a logged message.")),N=o("testing.peekHeaderBackground",{dark:t(s,.1),light:t(s,.1),hcDark:null,hcLight:null},e("testing.peekBorder","Color of the peek view borders and arrow.")),V=o("testing.messagePeekHeaderBackground",{dark:t(g,.1),light:t(g,.1),hcDark:null,hcLight:null},e("testing.messagePeekHeaderBackground","Color of the peek view borders and arrow when peeking a logged message.")),k=o("testing.coveredBackground",{dark:d,light:d,hcDark:null,hcLight:null},e("testing.coveredBackground","Background color of text that was covered.")),U=o("testing.coveredBorder",{dark:t(k,.75),light:t(k,.75),hcDark:n,hcLight:n},e("testing.coveredBorder","Border color of text that was covered.")),W=o("testing.coveredGutterBackground",{dark:t(d,.6),light:t(d,.6),hcDark:x,hcLight:x},e("testing.coveredGutterBackground","Gutter color of regions where code was covered.")),X=o("testing.uncoveredBranchBackground",{dark:m(t(c,2),l),light:m(t(c,2),l),hcDark:null,hcLight:null},e("testing.uncoveredBranchBackground","Background of the widget shown for an uncovered branch.")),a=o("testing.uncoveredBackground",{dark:c,light:c,hcDark:null,hcLight:null},e("testing.uncoveredBackground","Background color of text that was not covered.")),E=o("testing.uncoveredBorder",{dark:t(a,.75),light:t(a,.75),hcDark:n,hcLight:n},e("testing.uncoveredBorder","Border color of text that was not covered.")),Y=o("testing.uncoveredGutterBackground",{dark:t(c,1.5),light:t(c,1.5),hcDark:C,hcLight:C},e("testing.uncoveredGutterBackground","Gutter color of regions where code not covered.")),Z=o("testing.coverCountBadgeBackground",I,e("testing.coverCountBadgeBackground","Background for the badge indicating execution count")),_=o("testing.coverCountBadgeForeground",L,e("testing.coverCountBadgeForeground","Foreground for the badge indicating execution count"));o("testing.message.error.decorationForeground",{dark:s,light:s,hcDark:u,hcLight:u},e("testing.message.error.decorationForeground","Text color of test error messages shown inline in the editor.")),o("testing.message.error.lineBackground",{dark:new f(new v(255,0,0,.1)),light:new f(new v(255,0,0,.1)),hcDark:null,hcLight:null},e("testing.message.error.marginBackground","Margin color beside error messages shown inline in the editor.")),o("testing.message.info.decorationForeground",t(u,.5),e("testing.message.info.decorationForeground","Text color of test info messages shown inline in the editor.")),o("testing.message.info.lineBackground",null,e("testing.message.info.marginBackground","Margin color beside info messages shown inline in the editor."));const ee={[r.Errored]:R,[r.Failed]:w,[r.Passed]:h,[r.Queued]:F,[r.Unset]:D,[r.Skipped]:b},G=o("testing.iconErrored.retired",t(R,.7),e("testing.iconErrored.retired","Retired color for the 'Errored' icon in the test explorer.")),Q=o("testing.iconFailed.retired",t(w,.7),e("testing.iconFailed.retired","Retired color for the 'failed' icon in the test explorer.")),T=o("testing.iconPassed.retired",t(h,.7),e("testing.iconPassed.retired","Retired color for the 'passed' icon in the test explorer.")),$=o("testing.iconQueued.retired",t(F,.7),e("testing.iconQueued.retired","Retired color for the 'Queued' icon in the test explorer.")),H=o("testing.iconUnset.retired",t(D,.7),e("testing.iconUnset.retired","Retired color for the 'Unset' icon in the test explorer.")),A=o("testing.iconSkipped.retired",t(b,.7),e("testing.iconSkipped.retired","Retired color for the 'Skipped' icon in the test explorer.")),oe={[r.Errored]:G,[r.Failed]:Q,[r.Passed]:T,[r.Queued]:$,[r.Unset]:H,[r.Skipped]:A};S((i,P)=>{const p=i.getColor(l),B=p&&i.getColor(a)?.transparent(2).makeOpaque(p);P.addRule(`
	.coverage-deco-inline.coverage-deco-hit.coverage-deco-hovered {
		background: ${i.getColor(k)?.transparent(1.3)};
		outline-color: ${i.getColor(U)?.transparent(2)};
	}
	.coverage-deco-inline.coverage-deco-miss.coverage-deco-hovered {
		background: ${i.getColor(a)?.transparent(1.3)};
		outline-color: ${i.getColor(E)?.transparent(2)};
	}
	.coverage-deco-branch-miss-indicator::before {
		border-color: ${B?.transparent(1.3)};
		background-color: ${B};
	}
	`)});export{ee as testStatesToIconColors,oe as testStatesToRetiredIconColors,R as testingColorIconErrored,w as testingColorIconFailed,h as testingColorIconPassed,F as testingColorIconQueued,b as testingColorIconSkipped,D as testingColorIconUnset,j as testingColorRunAction,Z as testingCoverCountBadgeBackground,_ as testingCoverCountBadgeForeground,k as testingCoveredBackground,U as testingCoveredBorder,W as testingCoveredGutterBackground,J as testingMessagePeekBorder,y as testingPeekBorder,N as testingPeekHeaderBackground,V as testingPeekMessageHeaderBackground,G as testingRetiredColorIconErrored,Q as testingRetiredColorIconFailed,T as testingRetiredColorIconPassed,$ as testingRetiredColorIconQueued,A as testingRetiredColorIconSkipped,H as testingRetiredColorIconUnset,a as testingUncoveredBackground,E as testingUncoveredBorder,X as testingUncoveredBranchBackground,Y as testingUncoveredGutterBackground};
