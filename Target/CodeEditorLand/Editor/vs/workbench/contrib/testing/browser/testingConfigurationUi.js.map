{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testingConfigurationUi.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from \"../../../../base/common/arrays.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport type { ServicesAccessor } from \"../../../../editor/browser/editorExtensions.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickItemButtonEvent,\n\ttype QuickPickInput,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { testConfigurationGroupNames } from \"../common/constants.js\";\nimport {\n\tITestProfileService,\n\tcanUseProfileWithTest,\n} from \"../common/testProfileService.js\";\nimport type {\n\tITestRunProfile,\n\tInternalTestItem,\n\tTestRunProfileBitset,\n} from \"../common/testTypes.js\";\nimport { testingUpdateProfiles } from \"./icons.js\";\n\ninterface IConfigurationPickerOptions {\n\t/** Placeholder text */\n\tplaceholder?: string;\n\t/** Show buttons to trigger configuration */\n\tshowConfigureButtons?: boolean;\n\t/** Only show configurations from this controller */\n\tonlyForTest?: InternalTestItem;\n\t/** Only show this group */\n\tonlyGroup?: TestRunProfileBitset;\n\t/** Only show items which are configurable */\n\tonlyConfigurable?: boolean;\n}\n\nfunction buildPicker(\n\taccessor: ServicesAccessor,\n\t{\n\t\tonlyGroup,\n\t\tshowConfigureButtons = true,\n\t\tonlyForTest,\n\t\tonlyConfigurable,\n\t\tplaceholder = localize(\n\t\t\t\"testConfigurationUi.pick\",\n\t\t\t\"Pick a test profile to use\",\n\t\t),\n\t}: IConfigurationPickerOptions,\n) {\n\tconst profileService = accessor.get(ITestProfileService);\n\tconst items: QuickPickInput<\n\t\tIQuickPickItem & { profile: ITestRunProfile }\n\t>[] = [];\n\tconst pushItems = (\n\t\tallProfiles: ITestRunProfile[],\n\t\tdescription?: string,\n\t) => {\n\t\tfor (const profiles of groupBy(\n\t\t\tallProfiles,\n\t\t\t(a, b) => a.group - b.group,\n\t\t)) {\n\t\t\tlet addedHeader = false;\n\t\t\tif (onlyGroup) {\n\t\t\t\tif (profiles[0].group !== onlyGroup) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\taddedHeader = true; // showing one group, no need for label\n\t\t\t}\n\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tif (onlyConfigurable && !profile.hasConfigurationHandler) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!addedHeader) {\n\t\t\t\t\titems.push({\n\t\t\t\t\t\ttype: \"separator\",\n\t\t\t\t\t\tlabel: testConfigurationGroupNames[profiles[0].group],\n\t\t\t\t\t});\n\t\t\t\t\taddedHeader = true;\n\t\t\t\t}\n\n\t\t\t\titems.push({\n\t\t\t\t\ttype: \"item\",\n\t\t\t\t\tprofile,\n\t\t\t\t\tlabel: profile.label,\n\t\t\t\t\tdescription,\n\t\t\t\t\talwaysShow: true,\n\t\t\t\t\tbuttons:\n\t\t\t\t\t\tprofile.hasConfigurationHandler && showConfigureButtons\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(\n\t\t\t\t\t\t\t\t\t\t\ttestingUpdateProfiles,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\t\t\t\t\t\"updateTestConfiguration\",\n\t\t\t\t\t\t\t\t\t\t\t\"Update Test Configuration\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t: [],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tif (onlyForTest !== undefined) {\n\t\tpushItems(\n\t\t\tprofileService\n\t\t\t\t.getControllerProfiles(onlyForTest.controllerId)\n\t\t\t\t.filter((p) => canUseProfileWithTest(p, onlyForTest)),\n\t\t);\n\t} else {\n\t\tfor (const { profiles, controller } of profileService.all()) {\n\t\t\tpushItems(profiles, controller.label.get());\n\t\t}\n\t}\n\n\tconst quickpick = accessor\n\t\t.get(IQuickInputService)\n\t\t.createQuickPick<IQuickPickItem & { profile: ITestRunProfile }>({\n\t\t\tuseSeparators: true,\n\t\t});\n\tquickpick.items = items;\n\tquickpick.placeholder = placeholder;\n\treturn quickpick;\n}\n\nconst triggerButtonHandler =\n\t(service: ITestProfileService, resolve: (arg: undefined) => void) =>\n\t(evt: IQuickPickItemButtonEvent<IQuickPickItem>) => {\n\t\tconst profile = (evt.item as { profile?: ITestRunProfile }).profile;\n\t\tif (profile) {\n\t\t\tservice.configure(profile.controllerId, profile.profileId);\n\t\t\tresolve(undefined);\n\t\t}\n\t};\n\nCommandsRegistry.registerCommand({\n\tid: \"vscode.pickMultipleTestProfiles\",\n\thandler: async (\n\t\taccessor: ServicesAccessor,\n\t\toptions: IConfigurationPickerOptions & {\n\t\t\tselected?: ITestRunProfile[];\n\t\t},\n\t) => {\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst quickpick = buildPicker(accessor, options);\n\t\tif (!quickpick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(quickpick);\n\n\t\tquickpick.canSelectMany = true;\n\t\tif (options.selected) {\n\t\t\tquickpick.selectedItems = quickpick.items\n\t\t\t\t.filter(\n\t\t\t\t\t(i): i is IQuickPickItem & { profile: ITestRunProfile } =>\n\t\t\t\t\t\ti.type === \"item\",\n\t\t\t\t)\n\t\t\t\t.filter((i) =>\n\t\t\t\t\toptions.selected!.some(\n\t\t\t\t\t\t(s) =>\n\t\t\t\t\t\t\ts.controllerId === i.profile.controllerId &&\n\t\t\t\t\t\t\ts.profileId === i.profile.profileId,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t}\n\n\t\tconst pick = await new Promise<ITestRunProfile[] | undefined>(\n\t\t\t(resolve) => {\n\t\t\t\tdisposables.add(\n\t\t\t\t\tquickpick.onDidAccept(() => {\n\t\t\t\t\t\tconst selected = quickpick.selectedItems as readonly {\n\t\t\t\t\t\t\tprofile?: ITestRunProfile;\n\t\t\t\t\t\t}[];\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tselected.map((s) => s.profile).filter(isDefined),\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tdisposables.add(quickpick.onDidHide(() => resolve(undefined)));\n\t\t\t\tdisposables.add(\n\t\t\t\t\tquickpick.onDidTriggerItemButton(\n\t\t\t\t\t\ttriggerButtonHandler(profileService, resolve),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tquickpick.show();\n\t\t\t},\n\t\t);\n\n\t\tdisposables.dispose();\n\t\treturn pick;\n\t},\n});\n\nCommandsRegistry.registerCommand({\n\tid: \"vscode.pickTestProfile\",\n\thandler: async (\n\t\taccessor: ServicesAccessor,\n\t\toptions: IConfigurationPickerOptions,\n\t) => {\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst quickpick = buildPicker(accessor, options);\n\t\tif (!quickpick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(quickpick);\n\n\t\tconst pick = await new Promise<ITestRunProfile | undefined>(\n\t\t\t(resolve) => {\n\t\t\t\tdisposables.add(\n\t\t\t\t\tquickpick.onDidAccept(() =>\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tquickpick.selectedItems[0] as {\n\t\t\t\t\t\t\t\t\tprofile?: ITestRunProfile;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)?.profile,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tdisposables.add(quickpick.onDidHide(() => resolve(undefined)));\n\t\t\t\tdisposables.add(\n\t\t\t\t\tquickpick.onDidTriggerItemButton(\n\t\t\t\t\t\ttriggerButtonHandler(profileService, resolve),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tquickpick.show();\n\t\t\t},\n\t\t);\n\n\t\tdisposables.dispose();\n\t\treturn pick;\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
