{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testingConfigurationUi.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { localize } from '../../../../nls.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { QuickPickInput, IQuickPickItem, IQuickInputService, IQuickPickItemButtonEvent } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { testingUpdateProfiles } from './icons.js';\nimport { testConfigurationGroupNames } from '../common/constants.js';\nimport { InternalTestItem, ITestRunProfile, TestRunProfileBitset } from '../common/testTypes.js';\nimport { canUseProfileWithTest, ITestProfileService } from '../common/testProfileService.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\n\ninterface IConfigurationPickerOptions {\n\t/** Placeholder text */\n\tplaceholder?: string;\n\t/** Show buttons to trigger configuration */\n\tshowConfigureButtons?: boolean;\n\t/** Only show configurations from this controller */\n\tonlyForTest?: InternalTestItem;\n\t/** Only show this group */\n\tonlyGroup?: TestRunProfileBitset;\n\t/** Only show items which are configurable */\n\tonlyConfigurable?: boolean;\n}\n\nfunction buildPicker(accessor: ServicesAccessor, {\n\tonlyGroup,\n\tshowConfigureButtons = true,\n\tonlyForTest,\n\tonlyConfigurable,\n\tplaceholder = localize('testConfigurationUi.pick', 'Pick a test profile to use'),\n}: IConfigurationPickerOptions) {\n\tconst profileService = accessor.get(ITestProfileService);\n\tconst items: QuickPickInput<IQuickPickItem & { profile: ITestRunProfile }>[] = [];\n\tconst pushItems = (allProfiles: ITestRunProfile[], description?: string) => {\n\t\tfor (const profiles of groupBy(allProfiles, (a, b) => a.group - b.group)) {\n\t\t\tlet addedHeader = false;\n\t\t\tif (onlyGroup) {\n\t\t\t\tif (profiles[0].group !== onlyGroup) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\taddedHeader = true; // showing one group, no need for label\n\t\t\t}\n\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tif (onlyConfigurable && !profile.hasConfigurationHandler) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!addedHeader) {\n\t\t\t\t\titems.push({ type: 'separator', label: testConfigurationGroupNames[profiles[0].group] });\n\t\t\t\t\taddedHeader = true;\n\t\t\t\t}\n\n\t\t\t\titems.push(({\n\t\t\t\t\ttype: 'item',\n\t\t\t\t\tprofile,\n\t\t\t\t\tlabel: profile.label,\n\t\t\t\t\tdescription,\n\t\t\t\t\talwaysShow: true,\n\t\t\t\t\tbuttons: profile.hasConfigurationHandler && showConfigureButtons\n\t\t\t\t\t\t? [{\n\t\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(testingUpdateProfiles),\n\t\t\t\t\t\t\ttooltip: localize('updateTestConfiguration', 'Update Test Configuration')\n\t\t\t\t\t\t}] : []\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t};\n\n\tif (onlyForTest !== undefined) {\n\t\tpushItems(profileService.getControllerProfiles(onlyForTest.controllerId).filter(p => canUseProfileWithTest(p, onlyForTest)));\n\t} else {\n\t\tfor (const { profiles, controller } of profileService.all()) {\n\t\t\tpushItems(profiles, controller.label.get());\n\t\t}\n\t}\n\n\tconst quickpick = accessor.get(IQuickInputService).createQuickPick<IQuickPickItem & { profile: ITestRunProfile }>({ useSeparators: true });\n\tquickpick.items = items;\n\tquickpick.placeholder = placeholder;\n\treturn quickpick;\n}\n\nconst triggerButtonHandler = (service: ITestProfileService, resolve: (arg: undefined) => void) =>\n\t(evt: IQuickPickItemButtonEvent<IQuickPickItem>) => {\n\t\tconst profile = (evt.item as { profile?: ITestRunProfile }).profile;\n\t\tif (profile) {\n\t\t\tservice.configure(profile.controllerId, profile.profileId);\n\t\t\tresolve(undefined);\n\t\t}\n\t};\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.pickMultipleTestProfiles',\n\thandler: async (accessor: ServicesAccessor, options: IConfigurationPickerOptions & {\n\t\tselected?: ITestRunProfile[];\n\t}) => {\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst quickpick = buildPicker(accessor, options);\n\t\tif (!quickpick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(quickpick);\n\n\t\tquickpick.canSelectMany = true;\n\t\tif (options.selected) {\n\t\t\tquickpick.selectedItems = quickpick.items\n\t\t\t\t.filter((i): i is IQuickPickItem & { profile: ITestRunProfile } => i.type === 'item')\n\t\t\t\t.filter(i => options.selected!.some(s => s.controllerId === i.profile.controllerId && s.profileId === i.profile.profileId));\n\t\t}\n\n\t\tconst pick = await new Promise<ITestRunProfile[] | undefined>(resolve => {\n\t\t\tdisposables.add(quickpick.onDidAccept(() => {\n\t\t\t\tconst selected = quickpick.selectedItems as readonly { profile?: ITestRunProfile }[];\n\t\t\t\tresolve(selected.map(s => s.profile).filter(isDefined));\n\t\t\t}));\n\t\t\tdisposables.add(quickpick.onDidHide(() => resolve(undefined)));\n\t\t\tdisposables.add(quickpick.onDidTriggerItemButton(triggerButtonHandler(profileService, resolve)));\n\t\t\tquickpick.show();\n\t\t});\n\n\t\tdisposables.dispose();\n\t\treturn pick;\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.pickTestProfile',\n\thandler: async (accessor: ServicesAccessor, options: IConfigurationPickerOptions) => {\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst quickpick = buildPicker(accessor, options);\n\t\tif (!quickpick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(quickpick);\n\n\t\tconst pick = await new Promise<ITestRunProfile | undefined>(resolve => {\n\t\t\tdisposables.add(quickpick.onDidAccept(() => resolve((quickpick.selectedItems[0] as { profile?: ITestRunProfile })?.profile)));\n\t\t\tdisposables.add(quickpick.onDidHide(() => resolve(undefined)));\n\t\t\tdisposables.add(quickpick.onDidTriggerItemButton(triggerButtonHandler(profileService, resolve)));\n\t\t\tquickpick.show();\n\t\t});\n\n\t\tdisposables.dispose();\n\t\treturn pick;\n\t}\n});\n\n"],
  "mappings": "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",
  "names": []
}
