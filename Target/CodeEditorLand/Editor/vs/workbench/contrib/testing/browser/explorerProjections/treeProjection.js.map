{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/explorerProjections/treeProjection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ObjectTree } from \"../../../../../base/browser/ui/tree/objectTree.js\";\nimport { Emitter } from \"../../../../../base/common/event.js\";\nimport type { FuzzyScore } from \"../../../../../base/common/filters.js\";\nimport { Iterable } from \"../../../../../base/common/iterator.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IComputedStateAndDurationAccessor,\n\trefreshComputedState,\n} from \"../../common/getComputedState.js\";\nimport { TestId } from \"../../common/testId.js\";\nimport { TestResultItemChangeReason } from \"../../common/testResult.js\";\nimport { ITestResultService } from \"../../common/testResultService.js\";\nimport { ITestService } from \"../../common/testService.js\";\nimport {\n\ttype ITestItemUpdate,\n\ttype InternalTestItem,\n\tTestDiffOpType,\n\tTestItemExpandState,\n\tTestResultState,\n\ttype TestsDiff,\n\tapplyTestItemUpdate,\n} from \"../../common/testTypes.js\";\nimport {\n\ttype ITestTreeProjection,\n\ttype TestExplorerTreeElement,\n\tTestItemTreeElement,\n\tTestTreeErrorMessage,\n\tgetChildrenForParent,\n\ttestIdentityProvider,\n} from \"./index.js\";\nimport {\n\ttype ISerializedTestTreeCollapseState,\n\tisCollapsedInSerializedTestTree,\n} from \"./testingViewState.js\";\n\nconst computedStateAccessor: IComputedStateAndDurationAccessor<TreeTestItemElement> =\n\t{\n\t\tgetOwnState: (i) =>\n\t\t\ti instanceof TestItemTreeElement\n\t\t\t\t? i.ownState\n\t\t\t\t: TestResultState.Unset,\n\t\tgetCurrentComputedState: (i) => i.state,\n\t\tsetComputedState: (i, s) => (i.state = s),\n\n\t\tgetCurrentComputedDuration: (i) => i.duration,\n\t\tgetOwnDuration: (i) =>\n\t\t\ti instanceof TestItemTreeElement ? i.ownDuration : undefined,\n\t\tsetComputedDuration: (i, d) => (i.duration = d),\n\n\t\tgetChildren: (i) =>\n\t\t\tIterable.filter(\n\t\t\t\ti.children.values(),\n\t\t\t\t(t): t is TreeTestItemElement =>\n\t\t\t\t\tt instanceof TreeTestItemElement,\n\t\t\t),\n\t\t*getParents(i) {\n\t\t\tfor (let parent = i.parent; parent; parent = parent.parent) {\n\t\t\t\tyield parent as TreeTestItemElement;\n\t\t\t}\n\t\t},\n\t};\n\n/**\n * Test tree element element that groups be hierarchy.\n */\nclass TreeTestItemElement extends TestItemTreeElement {\n\t/**\n\t * Own, non-computed state.\n\t * @internal\n\t */\n\tpublic ownState = TestResultState.Unset;\n\n\t/**\n\t * Own, non-computed duration.\n\t * @internal\n\t */\n\tpublic ownDuration: number | undefined;\n\n\tpublic override get description() {\n\t\treturn this.test.item.description;\n\t}\n\n\tprivate errorChild?: TestTreeErrorMessage;\n\n\tconstructor(\n\t\ttest: InternalTestItem,\n\t\tparent: null | TreeTestItemElement,\n\t\tprotected readonly addedOrRemoved: (n: TestItemTreeElement) => void,\n\t) {\n\t\tsuper({ ...test, item: { ...test.item } }, parent);\n\t\tthis.updateErrorVisibility();\n\t}\n\n\tpublic update(patch: ITestItemUpdate) {\n\t\tapplyTestItemUpdate(this.test, patch);\n\t\tthis.updateErrorVisibility(patch);\n\t\tthis.fireChange();\n\t}\n\n\tpublic fireChange() {\n\t\tthis.changeEmitter.fire();\n\t}\n\n\tprivate updateErrorVisibility(patch?: ITestItemUpdate) {\n\t\tif (this.errorChild && (!this.test.item.error || patch?.item?.error)) {\n\t\t\tthis.addedOrRemoved(this);\n\t\t\tthis.children.delete(this.errorChild);\n\t\t\tthis.errorChild = undefined;\n\t\t}\n\t\tif (this.test.item.error && !this.errorChild) {\n\t\t\tthis.errorChild = new TestTreeErrorMessage(\n\t\t\t\tthis.test.item.error,\n\t\t\t\tthis,\n\t\t\t);\n\t\t\tthis.children.add(this.errorChild);\n\t\t\tthis.addedOrRemoved(this);\n\t\t}\n\t}\n}\n\n/**\n * Projection that lists tests in their traditional tree view.\n */\nexport class TreeProjection extends Disposable implements ITestTreeProjection {\n\tprivate readonly updateEmitter = new Emitter<void>();\n\n\tprivate readonly changedParents = new Set<TestItemTreeElement | null>();\n\tprivate readonly resortedParents = new Set<TestItemTreeElement | null>();\n\n\tprivate readonly items = new Map<string, TreeTestItemElement>();\n\n\t/**\n\t * Gets root elements of the tree.\n\t */\n\tprivate get rootsWithChildren(): Iterable<TreeTestItemElement> {\n\t\tconst rootsIt = Iterable.map(\n\t\t\tthis.testService.collection.rootItems,\n\t\t\t(r) => this.items.get(r.item.extId),\n\t\t);\n\t\treturn Iterable.filter(\n\t\t\trootsIt,\n\t\t\t(r): r is TreeTestItemElement => !!r?.children.size,\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onUpdate = this.updateEmitter.event;\n\n\tconstructor(\n\t\tpublic lastState: ISerializedTestTreeCollapseState,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis._register(testService.onDidProcessDiff((diff) => this.applyDiff(diff)));\n\n\t\t// when test results are cleared, recalculate all state\n\t\tthis._register(results.onResultsChanged((evt) => {\n\t\t\tif (!('removed' in evt)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const inTree of [...this.items.values()].sort((a, b) => b.depth - a.depth)) {\n\t\t\t\tconst lookup = this.results.getStateById(inTree.test.item.extId)?.[1];\n\t\t\t\tinTree.ownDuration = lookup?.ownDuration;\n\t\t\t\trefreshComputedState(computedStateAccessor, inTree, lookup?.ownComputedState ?? TestResultState.Unset).forEach(i => i.fireChange());\n\t\t\t}\n\t\t}));\n\n\t\t// when test states change, reflect in the tree\n\t\tthis._register(results.onTestChanged(ev => {\n\t\t\tif (ev.reason === TestResultItemChangeReason.NewMessage) {\n\t\t\t\treturn; // no effect in the tree\n\t\t\t}\n\n\t\t\tlet result = ev.item;\n\t\t\t// if the state is unset, or the latest run is not making the change,\n\t\t\t// double check that it's valid. Retire calls might cause previous\n\t\t\t// emit a state change for a test run that's already long completed.\n\t\t\tif (result.ownComputedState === TestResultState.Unset || ev.result !== results.results[0]) {\n\t\t\t\tconst fallback = results.getStateById(result.item.extId);\n\t\t\t\tif (fallback) {\n\t\t\t\t\tresult = fallback[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst item = this.items.get(result.item.extId);\n\t\t\tif (!item) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip refreshing the duration if we can trivially tell it didn't change.\n\t\t\tconst refreshDuration = ev.reason === TestResultItemChangeReason.OwnStateChange && ev.previousOwnDuration !== result.ownDuration;\n\t\t\t// For items without children, always use the computed state. They are\n\t\t\t// either leaves (for which it's fine) or nodes where we haven't expanded\n\t\t\t// children and should trust whatever the result service gives us.\n\t\t\tconst explicitComputed = item.children.size ? undefined : result.computedState;\n\n\t\t\titem.retired = !!result.retired;\n\t\t\titem.ownState = result.ownComputedState;\n\t\t\titem.ownDuration = result.ownDuration;\n\t\t\titem.fireChange();\n\n\t\t\trefreshComputedState(computedStateAccessor, item, explicitComputed, refreshDuration).forEach(i => i.fireChange());\n\t\t}));\n\n\t\tfor (const test of testService.collection.all) {\n\t\t\tthis.storeItem(this.createItem(test));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getElementByTestId(testId: string): TestItemTreeElement | undefined {\n\t\treturn this.items.get(testId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprivate applyDiff(diff: TestsDiff) {\n\t\tfor (const op of diff) {\n\t\t\tswitch (op.op) {\n\t\t\t\tcase TestDiffOpType.Add: {\n\t\t\t\t\tconst item = this.createItem(op.item);\n\t\t\t\t\tthis.storeItem(item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Update: {\n\t\t\t\t\tconst patch = op.item;\n\t\t\t\t\tconst existing = this.items.get(patch.extId);\n\t\t\t\t\tif (!existing) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// parent needs to be re-rendered on an expand update, so that its\n\t\t\t\t\t// children are rewritten.\n\t\t\t\t\tconst needsParentUpdate =\n\t\t\t\t\t\texisting.test.expand ===\n\t\t\t\t\t\t\tTestItemExpandState.NotExpandable && patch.expand;\n\t\t\t\t\texisting.update(patch);\n\t\t\t\t\tif (needsParentUpdate) {\n\t\t\t\t\t\tthis.changedParents.add(existing.parent);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.resortedParents.add(existing.parent);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Remove: {\n\t\t\t\t\tconst toRemove = this.items.get(op.itemId);\n\t\t\t\t\tif (!toRemove) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Removing the first element will cause the root to be hidden.\n\t\t\t\t\t// Changing first-level elements will need the root to re-render if\n\t\t\t\t\t// there are no other controllers with items.\n\t\t\t\t\tconst parent = toRemove.parent;\n\t\t\t\t\tconst affectsRootElement =\n\t\t\t\t\t\ttoRemove.depth === 1 &&\n\t\t\t\t\t\t(parent?.children.size === 1 ||\n\t\t\t\t\t\t\t!Iterable.some(\n\t\t\t\t\t\t\t\tthis.rootsWithChildren,\n\t\t\t\t\t\t\t\t(_, i) => i === 1,\n\t\t\t\t\t\t\t));\n\t\t\t\t\tthis.changedParents.add(affectsRootElement ? null : parent);\n\n\t\t\t\t\tconst queue: Iterable<TestExplorerTreeElement>[] = [\n\t\t\t\t\t\t[toRemove],\n\t\t\t\t\t];\n\t\t\t\t\twhile (queue.length) {\n\t\t\t\t\t\tfor (const item of queue.pop()!) {\n\t\t\t\t\t\t\tif (item instanceof TreeTestItemElement) {\n\t\t\t\t\t\t\t\tqueue.push(this.unstoreItem(item));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parent instanceof TreeTestItemElement) {\n\t\t\t\t\t\trefreshComputedState(\n\t\t\t\t\t\t\tcomputedStateAccessor,\n\t\t\t\t\t\t\tparent,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t!!parent.duration,\n\t\t\t\t\t\t).forEach((i) => i.fireChange());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (diff.length !== 0) {\n\t\t\tthis.updateEmitter.fire();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic applyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>) {\n\t\tfor (const parent of this.changedParents) {\n\t\t\tif (!parent || tree.hasElement(parent)) {\n\t\t\t\ttree.setChildren(\n\t\t\t\t\tparent,\n\t\t\t\t\tgetChildrenForParent(\n\t\t\t\t\t\tthis.lastState,\n\t\t\t\t\t\tthis.rootsWithChildren,\n\t\t\t\t\t\tparent,\n\t\t\t\t\t),\n\t\t\t\t\t{ diffIdentityProvider: testIdentityProvider },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tfor (const parent of this.resortedParents) {\n\t\t\tif (!parent || tree.hasElement(parent)) {\n\t\t\t\ttree.resort(parent, false);\n\t\t\t}\n\t\t}\n\n\t\tthis.changedParents.clear();\n\t\tthis.resortedParents.clear();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expandElement(element: TestItemTreeElement, depth: number): void {\n\t\tif (!(element instanceof TreeTestItemElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.test.expand === TestItemExpandState.NotExpandable) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.testService.collection.expand(element.test.item.extId, depth);\n\t}\n\n\tprivate createItem(item: InternalTestItem): TreeTestItemElement {\n\t\tconst parentId = TestId.parentId(item.item.extId);\n\t\tconst parent = parentId ? this.items.get(parentId)! : null;\n\t\treturn new TreeTestItemElement(item, parent, (n) =>\n\t\t\tthis.changedParents.add(n),\n\t\t);\n\t}\n\n\tprivate unstoreItem(treeElement: TreeTestItemElement) {\n\t\tconst parent = treeElement.parent;\n\t\tparent?.children.delete(treeElement);\n\t\tthis.items.delete(treeElement.test.item.extId);\n\t\treturn treeElement.children;\n\t}\n\n\tprivate storeItem(treeElement: TreeTestItemElement) {\n\t\ttreeElement.parent?.children.add(treeElement);\n\t\tthis.items.set(treeElement.test.item.extId, treeElement);\n\n\t\t// The first element will cause the root to be shown. The first element of\n\t\t// a parent may need to re-render it for #204805.\n\t\tconst affectsParent = treeElement.parent?.children.size === 1;\n\t\tconst affectedParent = affectsParent\n\t\t\t? treeElement.parent.parent\n\t\t\t: treeElement.parent;\n\t\tthis.changedParents.add(affectedParent);\n\t\tif (affectedParent?.depth === 0) {\n\t\t\tthis.changedParents.add(null);\n\t\t}\n\n\t\tif (\n\t\t\ttreeElement.depth === 0 ||\n\t\t\tisCollapsedInSerializedTestTree(\n\t\t\t\tthis.lastState,\n\t\t\t\ttreeElement.test.item.extId,\n\t\t\t) === false\n\t\t) {\n\t\t\tthis.expandElement(treeElement, 0);\n\t\t}\n\n\t\tconst prevState = this.results.getStateById(\n\t\t\ttreeElement.test.item.extId,\n\t\t)?.[1];\n\t\tif (prevState) {\n\t\t\ttreeElement.retired = !!prevState.retired;\n\t\t\ttreeElement.ownState = prevState.computedState;\n\t\t\ttreeElement.ownDuration = prevState.ownDuration;\n\n\t\t\trefreshComputedState(\n\t\t\t\tcomputedStateAccessor,\n\t\t\t\ttreeElement,\n\t\t\t\tundefined,\n\t\t\t\t!!treeElement.ownDuration,\n\t\t\t).forEach((i) => i.fireChange());\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
