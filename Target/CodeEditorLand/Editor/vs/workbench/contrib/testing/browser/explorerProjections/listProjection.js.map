{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/explorerProjections/listProjection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ObjectTree } from \"../../../../../base/browser/ui/tree/objectTree.js\";\nimport { Emitter } from \"../../../../../base/common/event.js\";\nimport type { FuzzyScore } from \"../../../../../base/common/filters.js\";\nimport { Iterable } from \"../../../../../base/common/iterator.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport { TestId } from \"../../common/testId.js\";\nimport { TestResultItemChangeReason } from \"../../common/testResult.js\";\nimport { ITestResultService } from \"../../common/testResultService.js\";\nimport { ITestService } from \"../../common/testService.js\";\nimport {\n\ttype ITestItemUpdate,\n\ttype InternalTestItem,\n\tTestDiffOpType,\n\tTestItemExpandState,\n\tTestResultState,\n\ttype TestsDiff,\n\tapplyTestItemUpdate,\n} from \"../../common/testTypes.js\";\nimport { flatTestItemDelimiter } from \"./display.js\";\nimport {\n\ttype ITestTreeProjection,\n\ttype TestExplorerTreeElement,\n\tTestItemTreeElement,\n\tTestTreeErrorMessage,\n\tgetChildrenForParent,\n\ttestIdentityProvider,\n} from \"./index.js\";\nimport {\n\ttype ISerializedTestTreeCollapseState,\n\tisCollapsedInSerializedTestTree,\n} from \"./testingViewState.js\";\n\n/**\n * Test tree element element that groups be hierarchy.\n */\nclass ListTestItemElement extends TestItemTreeElement {\n\tprivate errorChild?: TestTreeErrorMessage;\n\n\tpublic descriptionParts: string[] = [];\n\n\tpublic override get description() {\n\t\treturn this.chain.map((c) => c.item.label).join(flatTestItemDelimiter);\n\t}\n\n\tconstructor(\n\t\ttest: InternalTestItem,\n\t\tparent: null | ListTestItemElement,\n\t\tprivate readonly chain: InternalTestItem[],\n\t) {\n\t\tsuper({ ...test, item: { ...test.item } }, parent);\n\t\tthis.updateErrorVisibility();\n\t}\n\n\tpublic update(patch: ITestItemUpdate) {\n\t\tapplyTestItemUpdate(this.test, patch);\n\t\tthis.updateErrorVisibility(patch);\n\t\tthis.fireChange();\n\t}\n\n\tpublic fireChange() {\n\t\tthis.changeEmitter.fire();\n\t}\n\n\tprivate updateErrorVisibility(patch?: ITestItemUpdate) {\n\t\tif (this.errorChild && (!this.test.item.error || patch?.item?.error)) {\n\t\t\tthis.children.delete(this.errorChild);\n\t\t\tthis.errorChild = undefined;\n\t\t}\n\t\tif (this.test.item.error && !this.errorChild) {\n\t\t\tthis.errorChild = new TestTreeErrorMessage(\n\t\t\t\tthis.test.item.error,\n\t\t\t\tthis,\n\t\t\t);\n\t\t\tthis.children.add(this.errorChild);\n\t\t}\n\t}\n}\n\n/**\n * Projection that lists tests in their traditional tree view.\n */\nexport class ListProjection extends Disposable implements ITestTreeProjection {\n\tprivate readonly updateEmitter = new Emitter<void>();\n\tprivate readonly items = new Map<string, ListTestItemElement>();\n\n\t/**\n\t * Gets root elements of the tree.\n\t */\n\tprivate get rootsWithChildren(): Iterable<ListTestItemElement> {\n\t\tconst rootsIt = Iterable.map(\n\t\t\tthis.testService.collection.rootItems,\n\t\t\t(r) => this.items.get(r.item.extId),\n\t\t);\n\t\treturn Iterable.filter(\n\t\t\trootsIt,\n\t\t\t(r): r is ListTestItemElement => !!r?.children.size,\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onUpdate = this.updateEmitter.event;\n\n\tconstructor(\n\t\tpublic lastState: ISerializedTestTreeCollapseState,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis._register(testService.onDidProcessDiff((diff) => this.applyDiff(diff)));\n\n\t\t// when test results are cleared, recalculate all state\n\t\tthis._register(results.onResultsChanged((evt) => {\n\t\t\tif (!('removed' in evt)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const inTree of this.items.values()) {\n\t\t\t\t// Simple logic here, because we know in this projection states\n\t\t\t\t// are never inherited.\n\t\t\t\tconst lookup = this.results.getStateById(inTree.test.item.extId)?.[1];\n\t\t\t\tinTree.duration = lookup?.ownDuration;\n\t\t\t\tinTree.state = lookup?.ownComputedState || TestResultState.Unset;\n\t\t\t\tinTree.fireChange();\n\t\t\t}\n\t\t}));\n\n\t\t// when test states change, reflect in the tree\n\t\tthis._register(results.onTestChanged(ev => {\n\t\t\tif (ev.reason === TestResultItemChangeReason.NewMessage) {\n\t\t\t\treturn; // no effect in the tree\n\t\t\t}\n\n\t\t\tlet result = ev.item;\n\t\t\t// if the state is unset, or the latest run is not making the change,\n\t\t\t// double check that it's valid. Retire calls might cause previous\n\t\t\t// emit a state change for a test run that's already long completed.\n\t\t\tif (result.ownComputedState === TestResultState.Unset || ev.result !== results.results[0]) {\n\t\t\t\tconst fallback = results.getStateById(result.item.extId);\n\t\t\t\tif (fallback) {\n\t\t\t\t\tresult = fallback[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst item = this.items.get(result.item.extId);\n\t\t\tif (!item) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titem.retired = !!result.retired;\n\t\t\titem.state = result.computedState;\n\t\t\titem.duration = result.ownDuration;\n\t\t\titem.fireChange();\n\t\t}));\n\n\t\tfor (const test of testService.collection.all) {\n\t\t\tthis.storeItem(test);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getElementByTestId(testId: string): TestItemTreeElement | undefined {\n\t\treturn this.items.get(testId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprivate applyDiff(diff: TestsDiff) {\n\t\tfor (const op of diff) {\n\t\t\tswitch (op.op) {\n\t\t\t\tcase TestDiffOpType.Add: {\n\t\t\t\t\tthis.storeItem(op.item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Update: {\n\t\t\t\t\tthis.items.get(op.item.extId)?.update(op.item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Remove: {\n\t\t\t\t\tfor (const [id, item] of this.items) {\n\t\t\t\t\t\tif (id === op.itemId || TestId.isChild(op.itemId, id)) {\n\t\t\t\t\t\t\tthis.unstoreItem(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (diff.length !== 0) {\n\t\t\tthis.updateEmitter.fire();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic applyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>) {\n\t\t// We don't bother doing a very specific update like we do in the TreeProjection.\n\t\t// It's a flat list, so chances are we need to render everything anyway.\n\t\t// Let the diffIdentityProvider handle that.\n\t\ttree.setChildren(\n\t\t\tnull,\n\t\t\tgetChildrenForParent(this.lastState, this.rootsWithChildren, null),\n\t\t\t{\n\t\t\t\tdiffIdentityProvider: testIdentityProvider,\n\t\t\t\tdiffDepth: Number.POSITIVE_INFINITY,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expandElement(element: TestItemTreeElement, depth: number): void {\n\t\tif (!(element instanceof ListTestItemElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.test.expand === TestItemExpandState.NotExpandable) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.testService.collection.expand(element.test.item.extId, depth);\n\t}\n\n\tprivate unstoreItem(treeElement: ListTestItemElement) {\n\t\tthis.items.delete(treeElement.test.item.extId);\n\t\ttreeElement.parent?.children.delete(treeElement);\n\n\t\tconst parentId = TestId.fromString(\n\t\t\ttreeElement.test.item.extId,\n\t\t).parentId;\n\t\tif (!parentId) {\n\t\t\treturn;\n\t\t}\n\n\t\t// create the parent if it's now its own leaf\n\t\tfor (const id of parentId.idsToRoot()) {\n\t\t\tconst parentTest = this.testService.collection.getNodeById(\n\t\t\t\tid.toString(),\n\t\t\t);\n\t\t\tif (parentTest) {\n\t\t\t\tif (\n\t\t\t\t\tparentTest.children.size === 0 &&\n\t\t\t\t\t!this.items.has(id.toString())\n\t\t\t\t) {\n\t\t\t\t\tthis._storeItem(parentId, parentTest);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _storeItem(testId: TestId, item: InternalTestItem) {\n\t\tconst displayedParent = testId.isRoot\n\t\t\t? null\n\t\t\t: this.items.get(item.controllerId)!;\n\t\tconst chain = [...testId.idsFromRoot()]\n\t\t\t.slice(1, -1)\n\t\t\t.map(\n\t\t\t\t(id) => this.testService.collection.getNodeById(id.toString())!,\n\t\t\t);\n\t\tconst treeElement = new ListTestItemElement(\n\t\t\titem,\n\t\t\tdisplayedParent,\n\t\t\tchain,\n\t\t);\n\t\tdisplayedParent?.children.add(treeElement);\n\t\tthis.items.set(treeElement.test.item.extId, treeElement);\n\n\t\tif (\n\t\t\ttreeElement.depth === 0 ||\n\t\t\tisCollapsedInSerializedTestTree(\n\t\t\t\tthis.lastState,\n\t\t\t\ttreeElement.test.item.extId,\n\t\t\t) === false\n\t\t) {\n\t\t\tthis.expandElement(treeElement, Number.POSITIVE_INFINITY);\n\t\t}\n\n\t\tconst prevState = this.results.getStateById(\n\t\t\ttreeElement.test.item.extId,\n\t\t)?.[1];\n\t\tif (prevState) {\n\t\t\ttreeElement.retired = !!prevState.retired;\n\t\t\ttreeElement.state = prevState.computedState;\n\t\t\ttreeElement.duration = prevState.ownDuration;\n\t\t}\n\t}\n\n\tprivate storeItem(item: InternalTestItem) {\n\t\tconst testId = TestId.fromString(item.item.extId);\n\n\t\t// Remove any non-root parent of this item which is no longer a leaf.\n\t\tfor (const parentId of testId.idsToRoot()) {\n\t\t\tif (!parentId.isRoot) {\n\t\t\t\tconst prevParent = this.items.get(parentId.toString());\n\t\t\t\tif (prevParent) {\n\t\t\t\t\tthis.unstoreItem(prevParent);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._storeItem(testId, item);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
