import{MarshalledId as T}from"../../../../../base/common/marshallingIds.js";import{Range as b}from"../../../../../editor/common/core/range.js";import{TestId as m}from"../../common/testId.js";import{ITestMessage as I,InternalTestItem as f,TestMessageType as l}from"../../common/testTypes.js";import{TestUriType as i,buildTestUri as a}from"../../common/testingUri.js";const y=(e,t)=>({$mid:T.TestMessageMenuArgs,test:f.serialize(e),message:I.serialize(t)}),M=e=>e instanceof o&&!!e.stack?.length;class o{constructor(t,s,n,r){this.result=t;this.taskIndex=n;this.messageIndex=r;this.test=s.item;const u=s.tasks[n].messages;this.messageIndex=r;const c={messageIndex:r,resultId:t.id,taskIndex:n,testExtId:s.item.extId};this.expectedUri=a({...c,type:i.ResultExpectedOutput}),this.actualUri=a({...c,type:i.ResultActualOutput}),this.messageUri=a({...c,type:i.ResultMessage});const d=this.message=u[this.messageIndex];this.context=y(s,d),this.revealLocation=d.location??(s.item.uri&&s.item.range?{uri:s.item.uri,range:b.lift(s.item.range)}:void 0)}test;message;expectedUri;actualUri;messageUri;revealLocation;context;get controllerId(){return m.root(this.test.extId)}get isDiffable(){return this.message.type===l.Error&&I.isDiffable(this.message)}get contextValue(){return this.message.type===l.Error?this.message.contextValue:void 0}get stack(){return this.message.type===l.Error&&this.message.stackTrace?.length?this.message.stackTrace:void 0}}class p{constructor(t,s){this.result=t;this.taskIndex=s;this.outputUri=a({resultId:t.id,taskIndex:s,type:i.TaskOutput})}outputUri;revealLocation;get controllerId(){return this.result.tasks[this.taskIndex].ctrlId}}class g{constructor(t,s,n){this.result=t;this.taskIndex=s;this.test=n;this.outputUri=a({resultId:this.result.id,taskIndex:this.taskIndex,testExtId:this.test.item.extId,type:i.TestOutput}),this.task=t.tasks[this.taskIndex]}outputUri;revealLocation;task;get controllerId(){return m.root(this.test.item.extId)}}const U=(e,t)=>e instanceof o&&t instanceof o&&e.message===t.message||e instanceof p&&t instanceof p&&e.result===t.result&&e.taskIndex===t.taskIndex||e instanceof g&&t instanceof g&&e.test===t.test&&e.taskIndex===t.taskIndex,j=(e,t)=>{for(let s=0;s<e.tasks.length;s++){const n=e.tasks[s];for(let r=0;r<n.messages.length;r++){const u=t(n,n.messages[r],r,s);if(u!==void 0)return u}}},A=e=>{if(e instanceof o)return e.test;if(!(e instanceof p))return e.test.item};export{o as MessageSubject,p as TaskSubject,g as TestOutputSubject,U as equalsSubject,y as getMessageArgs,A as getSubjectTestItem,M as inspectSubjectHasStack,j as mapFindTestMessage};
