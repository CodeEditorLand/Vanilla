import{MarshalledId as T}from"../../../../../../vs/base/common/marshallingIds.js";import"../../../../../../vs/base/common/uri.js";import{Range as b}from"../../../../../../vs/editor/common/core/range.js";import{TestId as p}from"../../../../../../vs/workbench/contrib/testing/common/testId.js";import{buildTestUri as i,TestUriType as a}from"../../../../../../vs/workbench/contrib/testing/common/testingUri.js";import"../../../../../../vs/workbench/contrib/testing/common/testResult.js";import{InternalTestItem as f,ITestMessage as I,TestMessageType as l}from"../../../../../../vs/workbench/contrib/testing/common/testTypes.js";const x=(e,t)=>({$mid:T.TestMessageMenuArgs,test:f.serialize(e),message:I.serialize(t)});class c{constructor(t,s,n,r){this.result=t;this.taskIndex=n;this.messageIndex=r;this.test=s.item;const u=s.tasks[n].messages;this.messageIndex=r;const o={messageIndex:r,resultId:t.id,taskIndex:n,testExtId:s.item.extId};this.expectedUri=i({...o,type:a.ResultExpectedOutput}),this.actualUri=i({...o,type:a.ResultActualOutput}),this.messageUri=i({...o,type:a.ResultMessage});const m=this.message=u[this.messageIndex];this.context=x(s,m),this.revealLocation=m.location??(s.item.uri&&s.item.range?{uri:s.item.uri,range:b.lift(s.item.range)}:void 0)}test;message;expectedUri;actualUri;messageUri;revealLocation;context;get controllerId(){return p.root(this.test.extId)}get isDiffable(){return this.message.type===l.Error&&I.isDiffable(this.message)}get contextValue(){return this.message.type===l.Error?this.message.contextValue:void 0}get stack(){return this.message.type===l.Error&&this.message.stackTrace?.length?this.message.stackTrace:void 0}}class d{constructor(t,s){this.result=t;this.taskIndex=s;this.outputUri=i({resultId:t.id,taskIndex:s,type:a.TaskOutput})}outputUri;revealLocation;get controllerId(){return this.result.tasks[this.taskIndex].ctrlId}}class g{constructor(t,s,n){this.result=t;this.taskIndex=s;this.test=n;this.outputUri=i({resultId:this.result.id,taskIndex:this.taskIndex,testExtId:this.test.item.extId,type:a.TestOutput}),this.task=t.tasks[this.taskIndex]}outputUri;revealLocation;task;get controllerId(){return p.root(this.test.item.extId)}}const D=(e,t)=>e instanceof c&&t instanceof c&&e.message===t.message||e instanceof d&&t instanceof d&&e.result===t.result&&e.taskIndex===t.taskIndex||e instanceof g&&t instanceof g&&e.test===t.test&&e.taskIndex===t.taskIndex,V=(e,t)=>{for(let s=0;s<e.tasks.length;s++){const n=e.tasks[s];for(let r=0;r<n.messages.length;r++){const u=t(n,n.messages[r],r,s);if(u!==void 0)return u}}},q=e=>{if(e instanceof c)return e.test;if(!(e instanceof d))return e.test.item};export{c as MessageSubject,d as TaskSubject,g as TestOutputSubject,D as equalsSubject,x as getMessageArgs,q as getSubjectTestItem,V as mapFindTestMessage};
