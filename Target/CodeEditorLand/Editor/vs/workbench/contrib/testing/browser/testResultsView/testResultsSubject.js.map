{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testResultsView/testResultsSubject.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarshalledId } from \"../../../../../base/common/marshallingIds.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport { TestId } from \"../../common/testId.js\";\nimport type { ITestResult } from \"../../common/testResult.js\";\nimport {\n\ttype IRichLocation,\n\ttype ITestItem,\n\tITestMessage,\n\ttype ITestMessageMenuArgs,\n\ttype ITestRunTask,\n\ttype ITestTaskState,\n\tInternalTestItem,\n\tTestMessageType,\n\ttype TestResultItem,\n} from \"../../common/testTypes.js\";\nimport { TestUriType, buildTestUri } from \"../../common/testingUri.js\";\n\nexport const getMessageArgs = (\n\ttest: TestResultItem,\n\tmessage: ITestMessage,\n): ITestMessageMenuArgs => ({\n\t$mid: MarshalledId.TestMessageMenuArgs,\n\ttest: InternalTestItem.serialize(test),\n\tmessage: ITestMessage.serialize(message),\n});\n\ninterface ISubjectCommon {\n\tcontrollerId: string;\n}\n\nexport const inspectSubjectHasStack = (subject: InspectSubject | undefined) =>\n\tsubject instanceof MessageSubject && !!subject.stack?.length;\n\nexport class MessageSubject implements ISubjectCommon {\n\tpublic readonly test: ITestItem;\n\tpublic readonly message: ITestMessage;\n\tpublic readonly expectedUri: URI;\n\tpublic readonly actualUri: URI;\n\tpublic readonly messageUri: URI;\n\tpublic readonly revealLocation: IRichLocation | undefined;\n\tpublic readonly context: ITestMessageMenuArgs | undefined;\n\n\tpublic get controllerId() {\n\t\treturn TestId.root(this.test.extId);\n\t}\n\n\tpublic get isDiffable() {\n\t\treturn (\n\t\t\tthis.message.type === TestMessageType.Error &&\n\t\t\tITestMessage.isDiffable(this.message)\n\t\t);\n\t}\n\n\tpublic get contextValue() {\n\t\treturn this.message.type === TestMessageType.Error\n\t\t\t? this.message.contextValue\n\t\t\t: undefined;\n\t}\n\n\tpublic get stack() {\n\t\treturn this.message.type === TestMessageType.Error &&\n\t\t\tthis.message.stackTrace?.length\n\t\t\t? this.message.stackTrace\n\t\t\t: undefined;\n\t}\n\n\tconstructor(\n\t\tpublic readonly result: ITestResult,\n\t\ttest: TestResultItem,\n\t\tpublic readonly taskIndex: number,\n\t\tpublic readonly messageIndex: number,\n\t) {\n\t\tthis.test = test.item;\n\t\tconst messages = test.tasks[taskIndex].messages;\n\t\tthis.messageIndex = messageIndex;\n\n\t\tconst parts = {\n\t\t\tmessageIndex,\n\t\t\tresultId: result.id,\n\t\t\ttaskIndex,\n\t\t\ttestExtId: test.item.extId,\n\t\t};\n\t\tthis.expectedUri = buildTestUri({\n\t\t\t...parts,\n\t\t\ttype: TestUriType.ResultExpectedOutput,\n\t\t});\n\t\tthis.actualUri = buildTestUri({\n\t\t\t...parts,\n\t\t\ttype: TestUriType.ResultActualOutput,\n\t\t});\n\t\tthis.messageUri = buildTestUri({\n\t\t\t...parts,\n\t\t\ttype: TestUriType.ResultMessage,\n\t\t});\n\n\t\tconst message = (this.message = messages[this.messageIndex]);\n\t\tthis.context = getMessageArgs(test, message);\n\t\tthis.revealLocation =\n\t\t\tmessage.location ??\n\t\t\t(test.item.uri && test.item.range\n\t\t\t\t? { uri: test.item.uri, range: Range.lift(test.item.range) }\n\t\t\t\t: undefined);\n\t}\n}\n\nexport class TaskSubject implements ISubjectCommon {\n\tpublic readonly outputUri: URI;\n\tpublic readonly revealLocation: undefined;\n\n\tpublic get controllerId() {\n\t\treturn this.result.tasks[this.taskIndex].ctrlId;\n\t}\n\n\tconstructor(\n\t\tpublic readonly result: ITestResult,\n\t\tpublic readonly taskIndex: number,\n\t) {\n\t\tthis.outputUri = buildTestUri({\n\t\t\tresultId: result.id,\n\t\t\ttaskIndex,\n\t\t\ttype: TestUriType.TaskOutput,\n\t\t});\n\t}\n}\n\nexport class TestOutputSubject implements ISubjectCommon {\n\tpublic readonly outputUri: URI;\n\tpublic readonly revealLocation: undefined;\n\tpublic readonly task: ITestRunTask;\n\n\tpublic get controllerId() {\n\t\treturn TestId.root(this.test.item.extId);\n\t}\n\n\tconstructor(\n\t\tpublic readonly result: ITestResult,\n\t\tpublic readonly taskIndex: number,\n\t\tpublic readonly test: TestResultItem,\n\t) {\n\t\tthis.outputUri = buildTestUri({\n\t\t\tresultId: this.result.id,\n\t\t\ttaskIndex: this.taskIndex,\n\t\t\ttestExtId: this.test.item.extId,\n\t\t\ttype: TestUriType.TestOutput,\n\t\t});\n\t\tthis.task = result.tasks[this.taskIndex];\n\t}\n}\n\nexport type InspectSubject = MessageSubject | TaskSubject | TestOutputSubject;\n\nexport const equalsSubject = (a: InspectSubject, b: InspectSubject) =>\n\t(a instanceof MessageSubject &&\n\t\tb instanceof MessageSubject &&\n\t\ta.message === b.message) ||\n\t(a instanceof TaskSubject &&\n\t\tb instanceof TaskSubject &&\n\t\ta.result === b.result &&\n\t\ta.taskIndex === b.taskIndex) ||\n\t(a instanceof TestOutputSubject &&\n\t\tb instanceof TestOutputSubject &&\n\t\ta.test === b.test &&\n\t\ta.taskIndex === b.taskIndex);\n\nexport const mapFindTestMessage = <T>(\n\ttest: TestResultItem,\n\tfn: (\n\t\ttask: ITestTaskState,\n\t\tmessage: ITestMessage,\n\t\tmessageIndex: number,\n\t\ttaskIndex: number,\n\t) => T | undefined,\n) => {\n\tfor (let taskIndex = 0; taskIndex < test.tasks.length; taskIndex++) {\n\t\tconst task = test.tasks[taskIndex];\n\t\tfor (\n\t\t\tlet messageIndex = 0;\n\t\t\tmessageIndex < task.messages.length;\n\t\t\tmessageIndex++\n\t\t) {\n\t\t\tconst r = fn(\n\t\t\t\ttask,\n\t\t\t\ttask.messages[messageIndex],\n\t\t\t\tmessageIndex,\n\t\t\t\ttaskIndex,\n\t\t\t);\n\t\t\tif (r !== undefined) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\nexport const getSubjectTestItem = (subject: InspectSubject) => {\n\tif (subject instanceof MessageSubject) {\n\t\treturn subject.test;\n\t}\n\n\tif (subject instanceof TaskSubject) {\n\t\treturn undefined;\n\t}\n\n\treturn subject.test.item;\n};\n"],
  "mappings": "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",
  "names": []
}
