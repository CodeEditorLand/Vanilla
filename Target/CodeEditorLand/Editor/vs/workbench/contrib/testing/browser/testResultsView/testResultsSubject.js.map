{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testResultsView/testResultsSubject.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { MarshalledId } from '../../../../../base/common/marshallingIds.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { TestId } from '../../common/testId.js';\nimport { ITestResult } from '../../common/testResult.js';\nimport { IRichLocation, ITestItem, ITestMessage, ITestMessageMenuArgs, ITestRunTask, ITestTaskState, InternalTestItem, TestMessageType, TestResultItem } from '../../common/testTypes.js';\nimport { TestUriType, buildTestUri } from '../../common/testingUri.js';\n\nexport const getMessageArgs = (test: TestResultItem, message: ITestMessage): ITestMessageMenuArgs => ({\n\t$mid: MarshalledId.TestMessageMenuArgs,\n\ttest: InternalTestItem.serialize(test),\n\tmessage: ITestMessage.serialize(message),\n});\n\ninterface ISubjectCommon {\n\tcontrollerId: string;\n}\n\nexport const inspectSubjectHasStack = (subject: InspectSubject | undefined) =>\n\tsubject instanceof MessageSubject && !!subject.stack?.length;\n\nexport class MessageSubject implements ISubjectCommon {\n\tpublic readonly test: ITestItem;\n\tpublic readonly message: ITestMessage;\n\tpublic readonly expectedUri: URI;\n\tpublic readonly actualUri: URI;\n\tpublic readonly messageUri: URI;\n\tpublic readonly revealLocation: IRichLocation | undefined;\n\tpublic readonly context: ITestMessageMenuArgs | undefined;\n\n\tpublic get controllerId() {\n\t\treturn TestId.root(this.test.extId);\n\t}\n\n\tpublic get isDiffable() {\n\t\treturn this.message.type === TestMessageType.Error && ITestMessage.isDiffable(this.message);\n\t}\n\n\tpublic get contextValue() {\n\t\treturn this.message.type === TestMessageType.Error ? this.message.contextValue : undefined;\n\t}\n\n\tpublic get stack() {\n\t\treturn this.message.type === TestMessageType.Error && this.message.stackTrace?.length ? this.message.stackTrace : undefined;\n\t}\n\n\tconstructor(public readonly result: ITestResult, test: TestResultItem, public readonly taskIndex: number, public readonly messageIndex: number) {\n\t\tthis.test = test.item;\n\t\tconst messages = test.tasks[taskIndex].messages;\n\t\tthis.messageIndex = messageIndex;\n\n\t\tconst parts = { messageIndex, resultId: result.id, taskIndex, testExtId: test.item.extId };\n\t\tthis.expectedUri = buildTestUri({ ...parts, type: TestUriType.ResultExpectedOutput });\n\t\tthis.actualUri = buildTestUri({ ...parts, type: TestUriType.ResultActualOutput });\n\t\tthis.messageUri = buildTestUri({ ...parts, type: TestUriType.ResultMessage });\n\n\t\tconst message = this.message = messages[this.messageIndex];\n\t\tthis.context = getMessageArgs(test, message);\n\t\tthis.revealLocation = message.location ?? (test.item.uri && test.item.range ? { uri: test.item.uri, range: Range.lift(test.item.range) } : undefined);\n\t}\n}\n\nexport class TaskSubject implements ISubjectCommon {\n\tpublic readonly outputUri: URI;\n\tpublic readonly revealLocation: undefined;\n\n\tpublic get controllerId() {\n\t\treturn this.result.tasks[this.taskIndex].ctrlId;\n\t}\n\n\tconstructor(public readonly result: ITestResult, public readonly taskIndex: number) {\n\t\tthis.outputUri = buildTestUri({ resultId: result.id, taskIndex, type: TestUriType.TaskOutput });\n\t}\n}\n\nexport class TestOutputSubject implements ISubjectCommon {\n\tpublic readonly outputUri: URI;\n\tpublic readonly revealLocation: undefined;\n\tpublic readonly task: ITestRunTask;\n\n\tpublic get controllerId() {\n\t\treturn TestId.root(this.test.item.extId);\n\t}\n\n\tconstructor(public readonly result: ITestResult, public readonly taskIndex: number, public readonly test: TestResultItem) {\n\t\tthis.outputUri = buildTestUri({ resultId: this.result.id, taskIndex: this.taskIndex, testExtId: this.test.item.extId, type: TestUriType.TestOutput });\n\t\tthis.task = result.tasks[this.taskIndex];\n\t}\n}\n\nexport type InspectSubject = MessageSubject | TaskSubject | TestOutputSubject;\n\nexport const equalsSubject = (a: InspectSubject, b: InspectSubject) => (\n\t(a instanceof MessageSubject && b instanceof MessageSubject && a.message === b.message) ||\n\t(a instanceof TaskSubject && b instanceof TaskSubject && a.result === b.result && a.taskIndex === b.taskIndex) ||\n\t(a instanceof TestOutputSubject && b instanceof TestOutputSubject && a.test === b.test && a.taskIndex === b.taskIndex)\n);\n\n\nexport const mapFindTestMessage = <T>(test: TestResultItem, fn: (task: ITestTaskState, message: ITestMessage, messageIndex: number, taskIndex: number) => T | undefined) => {\n\tfor (let taskIndex = 0; taskIndex < test.tasks.length; taskIndex++) {\n\t\tconst task = test.tasks[taskIndex];\n\t\tfor (let messageIndex = 0; messageIndex < task.messages.length; messageIndex++) {\n\t\t\tconst r = fn(task, task.messages[messageIndex], messageIndex, taskIndex);\n\t\t\tif (r !== undefined) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\nexport const getSubjectTestItem = (subject: InspectSubject) => {\n\tif (subject instanceof MessageSubject) {\n\t\treturn subject.test;\n\t}\n\n\tif (subject instanceof TaskSubject) {\n\t\treturn undefined;\n\t}\n\n\treturn subject.test.item;\n};\n"],
  "mappings": ";;AAMA,SAAS,oBAAoB;AAC7B,SAAS,WAAW;AACpB,SAAS,aAAa;AACtB,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAC5B,SAAS,eAAe,WAAW,cAAc,sBAAsB,cAAc,gBAAgB,kBAAkB,iBAAiB,sBAAsB;AAC9J,SAAS,aAAa,oBAAoB;AAEnC,MAAM,iBAAiB,wBAAC,MAAsB,aAAiD;AAAA,EACrG,MAAM,aAAa;AAAA,EACnB,MAAM,iBAAiB,UAAU,IAAI;AAAA,EACrC,SAAS,aAAa,UAAU,OAAO;AACxC,IAJ8B;AAUvB,MAAM,yBAAyB,wBAAC,YACtC,mBAAmB,kBAAkB,CAAC,CAAC,QAAQ,OAAO,QADjB;AAG/B,MAAM,eAAyC;AAAA,EAyBrD,YAA4B,QAAqB,MAAsC,WAAmC,cAAsB;AAApH;AAA2D;AAAmC;AACzH,SAAK,OAAO,KAAK;AACjB,UAAM,WAAW,KAAK,MAAM,SAAS,EAAE;AACvC,SAAK,eAAe;AAEpB,UAAM,QAAQ,EAAE,cAAc,UAAU,OAAO,IAAI,WAAW,WAAW,KAAK,KAAK,MAAM;AACzF,SAAK,cAAc,aAAa,EAAE,GAAG,OAAO,MAAM,YAAY,qBAAqB,CAAC;AACpF,SAAK,YAAY,aAAa,EAAE,GAAG,OAAO,MAAM,YAAY,mBAAmB,CAAC;AAChF,SAAK,aAAa,aAAa,EAAE,GAAG,OAAO,MAAM,YAAY,cAAc,CAAC;AAE5E,UAAM,UAAU,KAAK,UAAU,SAAS,KAAK,YAAY;AACzD,SAAK,UAAU,eAAe,MAAM,OAAO;AAC3C,SAAK,iBAAiB,QAAQ,aAAa,KAAK,KAAK,OAAO,KAAK,KAAK,QAAQ,EAAE,KAAK,KAAK,KAAK,KAAK,OAAO,MAAM,KAAK,KAAK,KAAK,KAAK,EAAE,IAAI;AAAA,EAC5I;AAAA,EAjED,OA2BsD;AAAA;AAAA;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,IAAW,eAAe;AACzB,WAAO,OAAO,KAAK,KAAK,KAAK,KAAK;AAAA,EACnC;AAAA,EAEA,IAAW,aAAa;AACvB,WAAO,KAAK,QAAQ,SAAS,gBAAgB,SAAS,aAAa,WAAW,KAAK,OAAO;AAAA,EAC3F;AAAA,EAEA,IAAW,eAAe;AACzB,WAAO,KAAK,QAAQ,SAAS,gBAAgB,QAAQ,KAAK,QAAQ,eAAe;AAAA,EAClF;AAAA,EAEA,IAAW,QAAQ;AAClB,WAAO,KAAK,QAAQ,SAAS,gBAAgB,SAAS,KAAK,QAAQ,YAAY,SAAS,KAAK,QAAQ,aAAa;AAAA,EACnH;AAgBD;AAEO,MAAM,YAAsC;AAAA,EAQlD,YAA4B,QAAqC,WAAmB;AAAxD;AAAqC;AAChE,SAAK,YAAY,aAAa,EAAE,UAAU,OAAO,IAAI,WAAW,MAAM,YAAY,WAAW,CAAC;AAAA,EAC/F;AAAA,EA9ED,OAoEmD;AAAA;AAAA;AAAA,EAClC;AAAA,EACA;AAAA,EAEhB,IAAW,eAAe;AACzB,WAAO,KAAK,OAAO,MAAM,KAAK,SAAS,EAAE;AAAA,EAC1C;AAKD;AAEO,MAAM,kBAA4C;AAAA,EASxD,YAA4B,QAAqC,WAAmC,MAAsB;AAA9F;AAAqC;AAAmC;AACnG,SAAK,YAAY,aAAa,EAAE,UAAU,KAAK,OAAO,IAAI,WAAW,KAAK,WAAW,WAAW,KAAK,KAAK,KAAK,OAAO,MAAM,YAAY,WAAW,CAAC;AACpJ,SAAK,OAAO,OAAO,MAAM,KAAK,SAAS;AAAA,EACxC;AAAA,EA7FD,OAiFyD;AAAA;AAAA;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,IAAW,eAAe;AACzB,WAAO,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA,EACxC;AAMD;AAIO,MAAM,gBAAgB,wBAAC,GAAmB,MAC/C,aAAa,kBAAkB,aAAa,kBAAkB,EAAE,YAAY,EAAE,WAC9E,aAAa,eAAe,aAAa,eAAe,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,aACnG,aAAa,qBAAqB,aAAa,qBAAqB,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAE,WAHhF;AAOtB,MAAM,qBAAqB,wBAAI,MAAsB,OAAgH;AAC3K,WAAS,YAAY,GAAG,YAAY,KAAK,MAAM,QAAQ,aAAa;AACnE,UAAM,OAAO,KAAK,MAAM,SAAS;AACjC,aAAS,eAAe,GAAG,eAAe,KAAK,SAAS,QAAQ,gBAAgB;AAC/E,YAAM,IAAI,GAAG,MAAM,KAAK,SAAS,YAAY,GAAG,cAAc,SAAS;AACvE,UAAI,MAAM,QAAW;AACpB,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR,GAZkC;AAc3B,MAAM,qBAAqB,wBAAC,YAA4B;AAC9D,MAAI,mBAAmB,gBAAgB;AACtC,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,mBAAmB,aAAa;AACnC,WAAO;AAAA,EACR;AAEA,SAAO,QAAQ,KAAK;AACrB,GAVkC;",
  "names": []
}
