{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/codeCoverageDisplayUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from '../../../../base/common/assert.js';\nimport { clamp } from '../../../../base/common/numbers.js';\nimport { localize } from '../../../../nls.js';\nimport { chartsGreen, chartsRed, chartsYellow } from '../../../../platform/theme/common/colorRegistry.js';\nimport { asCssVariableName } from '../../../../platform/theme/common/colorUtils.js';\nimport { CoverageBarSource } from './testCoverageBars.js';\nimport { ITestingCoverageBarThresholds, TestingDisplayedCoveragePercent } from '../common/configuration.js';\nimport { getTotalCoveragePercent } from '../common/testCoverage.js';\nimport { TestId } from '../common/testId.js';\nimport { LiveTestResult } from '../common/testResult.js';\nimport { ICoverageCount } from '../common/testTypes.js';\n\nexport const percent = (cc: ICoverageCount) => clamp(cc.total === 0 ? 1 : cc.covered / cc.total, 0, 1);\n\nconst colorThresholds = [\n\t{ color: `var(${asCssVariableName(chartsRed)})`, key: 'red' },\n\t{ color: `var(${asCssVariableName(chartsYellow)})`, key: 'yellow' },\n\t{ color: `var(${asCssVariableName(chartsGreen)})`, key: 'green' },\n] as const;\n\nexport const getCoverageColor = (pct: number, thresholds: ITestingCoverageBarThresholds) => {\n\tlet best = colorThresholds[0].color; //  red\n\tlet distance = pct;\n\tfor (const { key, color } of colorThresholds) {\n\t\tconst t = thresholds[key] / 100;\n\t\tif (t && pct >= t && pct - t < distance) {\n\t\t\tbest = color;\n\t\t\tdistance = pct - t;\n\t\t}\n\t}\n\treturn best;\n};\n\n\nconst epsilon = 10e-8;\n\nexport const displayPercent = (value: number, precision = 2) => {\n\tconst display = (value * 100).toFixed(precision);\n\n\t// avoid showing 100% coverage if it just rounds up:\n\tif (value < 1 - epsilon && display === '100') {\n\t\treturn `${100 - (10 ** -precision)}%`;\n\t}\n\n\treturn `${display}%`;\n};\n\nexport const calculateDisplayedStat = (coverage: CoverageBarSource, method: TestingDisplayedCoveragePercent) => {\n\tswitch (method) {\n\t\tcase TestingDisplayedCoveragePercent.Statement:\n\t\t\treturn percent(coverage.statement);\n\t\tcase TestingDisplayedCoveragePercent.Minimum: {\n\t\t\tlet value = percent(coverage.statement);\n\t\t\tif (coverage.branch) { value = Math.min(value, percent(coverage.branch)); }\n\t\t\tif (coverage.declaration) { value = Math.min(value, percent(coverage.declaration)); }\n\t\t\treturn value;\n\t\t}\n\t\tcase TestingDisplayedCoveragePercent.TotalCoverage:\n\t\t\treturn getTotalCoveragePercent(coverage.statement, coverage.branch, coverage.declaration);\n\t\tdefault:\n\t\t\tassertNever(method);\n\t}\n};\n\nexport function getLabelForItem(result: LiveTestResult, testId: TestId, commonPrefixLen: number) {\n\tconst parts: string[] = [];\n\tfor (const id of testId.idsFromRoot()) {\n\t\tconst item = result.getTestById(id.toString());\n\t\tif (!item) {\n\t\t\tbreak;\n\t\t}\n\n\t\tparts.push(item.label);\n\t}\n\n\treturn parts.slice(commonPrefixLen).join(' \\u203a ');\n}\n\nexport namespace labels {\n\texport const showingFilterFor = (label: string) => localize('testing.coverageForTest', \"Showing \\\"{0}\\\"\", label);\n\texport const clickToChangeFiltering = localize('changePerTestFilter', 'Click to view coverage for a single test');\n\texport const percentCoverage = (percent: number, precision?: number) => localize('testing.percentCoverage', '{0} Coverage', displayPercent(percent, precision));\n\texport const allTests = localize('testing.allTests', 'All tests');\n\texport const pickShowCoverage = localize('testing.pickTest', 'Pick a test to show coverage for');\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,aAAa,WAAW,oBAAoB;AACrD,SAAS,yBAAyB;AAClC,SAAS,yBAAyB;AAClC,SAAS,+BAA+B,uCAAuC;AAC/E,SAAS,+BAA+B;AACxC,SAAS,cAAc;AACvB,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAExB,MAAM,UAAU,wBAAC,OAAuB,MAAM,GAAG,UAAU,IAAI,IAAI,GAAG,UAAU,GAAG,OAAO,GAAG,CAAC,GAA9E;AAEvB,MAAM,kBAAkB;AAAA,EACvB,EAAE,OAAO,OAAO,kBAAkB,SAAS,CAAC,KAAK,KAAK,MAAM;AAAA,EAC5D,EAAE,OAAO,OAAO,kBAAkB,YAAY,CAAC,KAAK,KAAK,SAAS;AAAA,EAClE,EAAE,OAAO,OAAO,kBAAkB,WAAW,CAAC,KAAK,KAAK,QAAQ;AACjE;AAEO,MAAM,mBAAmB,wBAAC,KAAa,eAA8C;AAC3F,MAAI,OAAO,gBAAgB,CAAC,EAAE;AAC9B,MAAI,WAAW;AACf,aAAW,EAAE,KAAK,MAAM,KAAK,iBAAiB;AAC7C,UAAM,IAAI,WAAW,GAAG,IAAI;AAC5B,QAAI,KAAK,OAAO,KAAK,MAAM,IAAI,UAAU;AACxC,aAAO;AACP,iBAAW,MAAM;AAAA,IAClB;AAAA,EACD;AACA,SAAO;AACR,GAXgC;AAchC,MAAM,UAAU;AAET,MAAM,iBAAiB,wBAAC,OAAe,YAAY,MAAM;AAC/D,QAAM,WAAW,QAAQ,KAAK,QAAQ,SAAS;AAG/C,MAAI,QAAQ,IAAI,WAAW,YAAY,OAAO;AAC7C,WAAO,GAAG,MAAO,MAAM,CAAC,SAAU;AAAA,EACnC;AAEA,SAAO,GAAG,OAAO;AAClB,GAT8B;AAWvB,MAAM,yBAAyB,wBAAC,UAA6B,WAA4C;AAC/G,UAAQ,QAAQ;AAAA,IACf,KAAK,gCAAgC;AACpC,aAAO,QAAQ,SAAS,SAAS;AAAA,IAClC,KAAK,gCAAgC,SAAS;AAC7C,UAAI,QAAQ,QAAQ,SAAS,SAAS;AACtC,UAAI,SAAS,QAAQ;AAAE,gBAAQ,KAAK,IAAI,OAAO,QAAQ,SAAS,MAAM,CAAC;AAAA,MAAG;AAC1E,UAAI,SAAS,aAAa;AAAE,gBAAQ,KAAK,IAAI,OAAO,QAAQ,SAAS,WAAW,CAAC;AAAA,MAAG;AACpF,aAAO;AAAA,IACR;AAAA,IACA,KAAK,gCAAgC;AACpC,aAAO,wBAAwB,SAAS,WAAW,SAAS,QAAQ,SAAS,WAAW;AAAA,IACzF;AACC,kBAAY,MAAM;AAAA,EACpB;AACD,GAfsC;AAiB/B,SAAS,gBAAgB,QAAwB,QAAgB,iBAAyB;AAChG,QAAM,QAAkB,CAAC;AACzB,aAAW,MAAM,OAAO,YAAY,GAAG;AACtC,UAAM,OAAO,OAAO,YAAY,GAAG,SAAS,CAAC;AAC7C,QAAI,CAAC,MAAM;AACV;AAAA,IACD;AAEA,UAAM,KAAK,KAAK,KAAK;AAAA,EACtB;AAEA,SAAO,MAAM,MAAM,eAAe,EAAE,KAAK,UAAU;AACpD;AAZgB;AAcT,IAAU;AAAA,CAAV,CAAUA,YAAV;AACC,EAAMA,QAAA,mBAAmB,wBAAC,UAAkB,SAAS,2BAA2B,iBAAmB,KAAK,GAA/E;AACzB,EAAMA,QAAA,yBAAyB,SAAS,uBAAuB,0CAA0C;AACzG,EAAMA,QAAA,kBAAkB,wBAACC,UAAiB,cAAuB,SAAS,2BAA2B,gBAAgB,eAAeA,UAAS,SAAS,CAAC,GAA/H;AACxB,EAAMD,QAAA,WAAW,SAAS,oBAAoB,WAAW;AACzD,EAAMA,QAAA,mBAAmB,SAAS,oBAAoB,kCAAkC;AAAA,GAL/E;",
  "names": ["labels", "percent"]
}
