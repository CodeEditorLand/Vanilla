{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/codeCoverageDisplayUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from \"../../../../base/common/assert.js\";\nimport { clamp } from \"../../../../base/common/numbers.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tchartsGreen,\n\tchartsRed,\n\tchartsYellow,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { asCssVariableName } from \"../../../../platform/theme/common/colorUtils.js\";\nimport {\n\ttype ITestingCoverageBarThresholds,\n\tTestingDisplayedCoveragePercent,\n} from \"../common/configuration.js\";\nimport { getTotalCoveragePercent } from \"../common/testCoverage.js\";\nimport type { TestId } from \"../common/testId.js\";\nimport type { LiveTestResult } from \"../common/testResult.js\";\nimport type { ICoverageCount } from \"../common/testTypes.js\";\nimport type { CoverageBarSource } from \"./testCoverageBars.js\";\n\nexport const percent = (cc: ICoverageCount) =>\n\tclamp(cc.total === 0 ? 1 : cc.covered / cc.total, 0, 1);\n\nconst colorThresholds = [\n\t{ color: `var(${asCssVariableName(chartsRed)})`, key: \"red\" },\n\t{ color: `var(${asCssVariableName(chartsYellow)})`, key: \"yellow\" },\n\t{ color: `var(${asCssVariableName(chartsGreen)})`, key: \"green\" },\n] as const;\n\nexport const getCoverageColor = (\n\tpct: number,\n\tthresholds: ITestingCoverageBarThresholds,\n) => {\n\tlet best = colorThresholds[0].color; //  red\n\tlet distance = pct;\n\tfor (const { key, color } of colorThresholds) {\n\t\tconst t = thresholds[key] / 100;\n\t\tif (t && pct >= t && pct - t < distance) {\n\t\t\tbest = color;\n\t\t\tdistance = pct - t;\n\t\t}\n\t}\n\treturn best;\n};\n\nconst epsilon = 10e-8;\n\nexport const displayPercent = (value: number, precision = 2) => {\n\tconst display = (value * 100).toFixed(precision);\n\n\t// avoid showing 100% coverage if it just rounds up:\n\tif (value < 1 - epsilon && display === \"100\") {\n\t\treturn `${100 - 10 ** -precision}%`;\n\t}\n\n\treturn `${display}%`;\n};\n\nexport const calculateDisplayedStat = (\n\tcoverage: CoverageBarSource,\n\tmethod: TestingDisplayedCoveragePercent,\n) => {\n\tswitch (method) {\n\t\tcase TestingDisplayedCoveragePercent.Statement:\n\t\t\treturn percent(coverage.statement);\n\t\tcase TestingDisplayedCoveragePercent.Minimum: {\n\t\t\tlet value = percent(coverage.statement);\n\t\t\tif (coverage.branch) {\n\t\t\t\tvalue = Math.min(value, percent(coverage.branch));\n\t\t\t}\n\t\t\tif (coverage.declaration) {\n\t\t\t\tvalue = Math.min(value, percent(coverage.declaration));\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t\tcase TestingDisplayedCoveragePercent.TotalCoverage:\n\t\t\treturn getTotalCoveragePercent(\n\t\t\t\tcoverage.statement,\n\t\t\t\tcoverage.branch,\n\t\t\t\tcoverage.declaration,\n\t\t\t);\n\t\tdefault:\n\t\t\tassertNever(method);\n\t}\n};\n\nexport function getLabelForItem(\n\tresult: LiveTestResult,\n\ttestId: TestId,\n\tcommonPrefixLen: number,\n) {\n\tconst parts: string[] = [];\n\tfor (const id of testId.idsFromRoot()) {\n\t\tconst item = result.getTestById(id.toString());\n\t\tif (!item) {\n\t\t\tbreak;\n\t\t}\n\n\t\tparts.push(item.label);\n\t}\n\n\treturn parts.slice(commonPrefixLen).join(\" \\u203a \");\n}\n\nexport namespace labels {\n\texport const showingFilterFor = (label: string) =>\n\t\tlocalize(\"testing.coverageForTest\", 'Showing \"{0}\"', label);\n\texport const clickToChangeFiltering = localize(\n\t\t\"changePerTestFilter\",\n\t\t\"Click to view coverage for a single test\",\n\t);\n\texport const percentCoverage = (percent: number, precision?: number) =>\n\t\tlocalize(\n\t\t\t\"testing.percentCoverage\",\n\t\t\t\"{0} Coverage\",\n\t\t\tdisplayPercent(percent, precision),\n\t\t);\n\texport const allTests = localize(\"testing.allTests\", \"All tests\");\n\texport const pickShowCoverage = localize(\n\t\t\"testing.pickTest\",\n\t\t\"Pick a test to show coverage for\",\n\t);\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,+BAA+B;AAMjC,MAAM,UAAU,wBAAC,OACvB,MAAM,GAAG,UAAU,IAAI,IAAI,GAAG,UAAU,GAAG,OAAO,GAAG,CAAC,GADhC;AAGvB,MAAM,kBAAkB;AAAA,EACvB,EAAE,OAAO,OAAO,kBAAkB,SAAS,CAAC,KAAK,KAAK,MAAM;AAAA,EAC5D,EAAE,OAAO,OAAO,kBAAkB,YAAY,CAAC,KAAK,KAAK,SAAS;AAAA,EAClE,EAAE,OAAO,OAAO,kBAAkB,WAAW,CAAC,KAAK,KAAK,QAAQ;AACjE;AAEO,MAAM,mBAAmB,wBAC/B,KACA,eACI;AACJ,MAAI,OAAO,gBAAgB,CAAC,EAAE;AAC9B,MAAI,WAAW;AACf,aAAW,EAAE,KAAK,MAAM,KAAK,iBAAiB;AAC7C,UAAM,IAAI,WAAW,GAAG,IAAI;AAC5B,QAAI,KAAK,OAAO,KAAK,MAAM,IAAI,UAAU;AACxC,aAAO;AACP,iBAAW,MAAM;AAAA,IAClB;AAAA,EACD;AACA,SAAO;AACR,GAdgC;AAgBhC,MAAM,UAAU;AAET,MAAM,iBAAiB,wBAAC,OAAe,YAAY,MAAM;AAC/D,QAAM,WAAW,QAAQ,KAAK,QAAQ,SAAS;AAG/C,MAAI,QAAQ,IAAI,WAAW,YAAY,OAAO;AAC7C,WAAO,GAAG,MAAM,MAAM,CAAC,SAAS;AAAA,EACjC;AAEA,SAAO,GAAG,OAAO;AAClB,GAT8B;AAWvB,MAAM,yBAAyB,wBACrC,UACA,WACI;AACJ,UAAQ,QAAQ;AAAA,IACf,KAAK,gCAAgC;AACpC,aAAO,QAAQ,SAAS,SAAS;AAAA,IAClC,KAAK,gCAAgC,SAAS;AAC7C,UAAI,QAAQ,QAAQ,SAAS,SAAS;AACtC,UAAI,SAAS,QAAQ;AACpB,gBAAQ,KAAK,IAAI,OAAO,QAAQ,SAAS,MAAM,CAAC;AAAA,MACjD;AACA,UAAI,SAAS,aAAa;AACzB,gBAAQ,KAAK,IAAI,OAAO,QAAQ,SAAS,WAAW,CAAC;AAAA,MACtD;AACA,aAAO;AAAA,IACR;AAAA,IACA,KAAK,gCAAgC;AACpC,aAAO;AAAA,QACN,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,MACV;AAAA,IACD;AACC,kBAAY,MAAM;AAAA,EACpB;AACD,GA1BsC;AA4B/B,SAAS,gBACf,QACA,QACA,iBACC;AACD,QAAM,QAAkB,CAAC;AACzB,aAAW,MAAM,OAAO,YAAY,GAAG;AACtC,UAAM,OAAO,OAAO,YAAY,GAAG,SAAS,CAAC;AAC7C,QAAI,CAAC,MAAM;AACV;AAAA,IACD;AAEA,UAAM,KAAK,KAAK,KAAK;AAAA,EACtB;AAEA,SAAO,MAAM,MAAM,eAAe,EAAE,KAAK,UAAU;AACpD;AAhBgB;AAkBT,IAAU;AAAA,CAAV,CAAUA,YAAV;AACC,EAAMA,QAAA,mBAAmB,wBAAC,UAChC,SAAS,2BAA2B,iBAAiB,KAAK,GAD3B;AAEzB,EAAMA,QAAA,yBAAyB;AAAA,IACrC;AAAA,IACA;AAAA,EACD;AACO,EAAMA,QAAA,kBAAkB,wBAACC,UAAiB,cAChD;AAAA,IACC;AAAA,IACA;AAAA,IACA,eAAeA,UAAS,SAAS;AAAA,EAClC,GAL8B;AAMxB,EAAMD,QAAA,WAAW,SAAS,oBAAoB,WAAW;AACzD,EAAMA,QAAA,mBAAmB;AAAA,IAC/B;AAAA,IACA;AAAA,EACD;AAAA,GAjBgB;",
  "names": ["labels", "percent"]
}
