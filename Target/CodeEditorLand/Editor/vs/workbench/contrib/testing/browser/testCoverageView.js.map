{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testCoverageView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport type {\n\tIIdentityProvider,\n\tIListVirtualDelegate,\n} from \"../../../../base/browser/ui/list/list.js\";\nimport type {\n\tICompressedTreeElement,\n\tICompressedTreeNode,\n} from \"../../../../base/browser/ui/tree/compressedObjectTreeModel.js\";\nimport type { ICompressibleTreeRenderer } from \"../../../../base/browser/ui/tree/objectTree.js\";\nimport type {\n\tITreeNode,\n\tITreeSorter,\n} from \"../../../../base/browser/ui/tree/tree.js\";\nimport { findLast } from \"../../../../base/common/arraysFind.js\";\nimport { assertNever } from \"../../../../base/common/assert.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { memoize } from \"../../../../base/common/decorators.js\";\nimport {\n\ttype FuzzyScore,\n\tcreateMatches,\n} from \"../../../../base/common/filters.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tautorun,\n\tobservableValue,\n} from \"../../../../base/common/observable.js\";\nimport type { IPrefixTreeNode } from \"../../../../base/common/prefixTree.js\";\nimport { basenameOrAuthority } from \"../../../../base/common/resources.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport {\n\tEditorOpenSource,\n\tTextEditorSelectionRevealType,\n} from \"../../../../platform/editor/common/editor.js\";\nimport { FileKind } from \"../../../../platform/files/common/files.js\";\nimport { IHoverService } from \"../../../../platform/hover/browser/hover.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { WorkbenchCompressibleObjectTree } from \"../../../../platform/list/browser/listService.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype QuickPickInput,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype IResourceLabel,\n\tResourceLabels,\n} from \"../../../browser/labels.js\";\nimport {\n\ttype IViewPaneOptions,\n\tViewAction,\n\tViewPane,\n} from \"../../../browser/parts/views/viewPane.js\";\nimport { IViewDescriptorService } from \"../../../common/views.js\";\nimport {\n\tACTIVE_GROUP,\n\tIEditorService,\n\tSIDE_GROUP,\n} from \"../../../services/editor/common/editorService.js\";\nimport { TestCommandId, Testing } from \"../common/constants.js\";\nimport { onObservableChange } from \"../common/observableUtils.js\";\nimport {\n\tBypassedFileCoverage,\n\ttype ComputedFileCoverage,\n\tFileCoverage,\n\ttype TestCoverage,\n\tgetTotalCoveragePercent,\n} from \"../common/testCoverage.js\";\nimport { ITestCoverageService } from \"../common/testCoverageService.js\";\nimport { TestId } from \"../common/testId.js\";\nimport {\n\ttype CoverageDetails,\n\tDetailType,\n\ttype ICoverageCount,\n\ttype IDeclarationCoverage,\n\tTestResultState,\n} from \"../common/testTypes.js\";\nimport { TestingContextKeys } from \"../common/testingContextKeys.js\";\nimport * as coverUtils from \"./codeCoverageDisplayUtils.js\";\nimport { testingStatesToIcons, testingWasCovered } from \"./icons.js\";\nimport {\n\ttype CoverageBarSource,\n\tManagedTestCoverageBars,\n} from \"./testCoverageBars.js\";\n\nenum CoverageSortOrder {\n\tCoverage = 0,\n\tLocation = 1,\n\tName = 2,\n}\n\nexport class TestCoverageView extends ViewPane {\n\tprivate readonly tree = new MutableDisposable<TestCoverageTree>();\n\tpublic readonly sortOrder = observableValue(\n\t\t\"sortOrder\",\n\t\tCoverageSortOrder.Location,\n\t);\n\n\tconstructor(\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITestCoverageService private readonly coverageService: ITestCoverageService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tconst labels = this._register(\n\t\t\tthis.instantiationService.createInstance(ResourceLabels, {\n\t\t\t\tonDidChangeVisibility: this.onDidChangeBodyVisibility,\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\tconst coverage = this.coverageService.selected.read(reader);\n\t\t\t\tif (coverage) {\n\t\t\t\t\tconst t = (this.tree.value ??=\n\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\tTestCoverageTree,\n\t\t\t\t\t\t\tcontainer,\n\t\t\t\t\t\t\tlabels,\n\t\t\t\t\t\t\tthis.sortOrder,\n\t\t\t\t\t\t));\n\t\t\t\t\tt.setInput(\n\t\t\t\t\t\tcoverage,\n\t\t\t\t\t\tthis.coverageService.filterToTest.read(reader),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.tree.clear();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\tthis.element.classList.toggle(\n\t\t\t\t\t\"coverage-view-is-filtered\",\n\t\t\t\t\t!!this.coverageService.filterToTest.read(reader),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.tree.value?.layout(height, width);\n\t}\n}\n\nlet fnNodeId = 0;\n\nclass DeclarationCoverageNode {\n\tpublic readonly id = String(fnNodeId++);\n\tpublic readonly containedDetails = new Set<CoverageDetails>();\n\tpublic readonly children: DeclarationCoverageNode[] = [];\n\n\tpublic get hits() {\n\t\treturn this.data.count;\n\t}\n\n\tpublic get label() {\n\t\treturn this.data.name;\n\t}\n\n\tpublic get location() {\n\t\treturn this.data.location;\n\t}\n\n\tpublic get tpc() {\n\t\tconst attr = this.attributableCoverage();\n\t\treturn (\n\t\t\tattr &&\n\t\t\tgetTotalCoveragePercent(attr.statement, attr.branch, undefined)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly uri: URI,\n\t\tprivate readonly data: IDeclarationCoverage,\n\t\tdetails: readonly CoverageDetails[],\n\t) {\n\t\tif (data.location instanceof Range) {\n\t\t\tfor (const detail of details) {\n\t\t\t\tif (this.contains(detail.location)) {\n\t\t\t\t\tthis.containedDetails.add(detail);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Gets whether this function has a defined range and contains the given range. */\n\tpublic contains(location: Range | Position) {\n\t\tconst own = this.data.location;\n\t\treturn (\n\t\t\town instanceof Range &&\n\t\t\t(location instanceof Range\n\t\t\t\t? own.containsRange(location)\n\t\t\t\t: own.containsPosition(location))\n\t\t);\n\t}\n\n\t/**\n\t * If the function defines a range, we can look at statements within the\n\t * function to get total coverage for the function, rather than a boolean\n\t * yes/no.\n\t */\n\t@memoize\n\tpublic attributableCoverage() {\n\t\tconst { location, count } = this.data;\n\t\tif (!(location instanceof Range) || !count) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst statement: ICoverageCount = { covered: 0, total: 0 };\n\t\tconst branch: ICoverageCount = { covered: 0, total: 0 };\n\t\tfor (const detail of this.containedDetails) {\n\t\t\tif (detail.type !== DetailType.Statement) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstatement.covered += detail.count ? 1 : 0;\n\t\t\tstatement.total++;\n\t\t\tif (detail.branches) {\n\t\t\t\tfor (const { count } of detail.branches) {\n\t\t\t\t\tbranch.covered += count ? 1 : 0;\n\t\t\t\t\tbranch.total++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { statement, branch } satisfies CoverageBarSource;\n\t}\n}\n\nclass RevealUncoveredDeclarations {\n\tpublic readonly id = String(fnNodeId++);\n\n\tpublic get label() {\n\t\treturn localize(\n\t\t\t\"functionsWithoutCoverage\",\n\t\t\t\"{0} declarations without coverage...\",\n\t\t\tthis.n,\n\t\t);\n\t}\n\n\tconstructor(public readonly n: number) {}\n}\n\nclass LoadingDetails {\n\tpublic readonly id = String(fnNodeId++);\n\tpublic readonly label = localize(\n\t\t\"loadingCoverageDetails\",\n\t\t\"Loading Coverage Details...\",\n\t);\n}\n\n/** Type of nodes returned from {@link TestCoverage}. Note: value is *always* defined. */\ntype TestCoverageFileNode = IPrefixTreeNode<\n\tComputedFileCoverage | FileCoverage\n>;\ntype CoverageTreeElement =\n\t| TestCoverageFileNode\n\t| DeclarationCoverageNode\n\t| LoadingDetails\n\t| RevealUncoveredDeclarations;\n\nconst isFileCoverage = (c: CoverageTreeElement): c is TestCoverageFileNode =>\n\ttypeof c === \"object\" && \"value\" in c;\nconst isDeclarationCoverage = (\n\tc: CoverageTreeElement,\n): c is DeclarationCoverageNode => c instanceof DeclarationCoverageNode;\nconst shouldShowDeclDetailsOnExpand = (\n\tc: CoverageTreeElement,\n): c is IPrefixTreeNode<FileCoverage> =>\n\tisFileCoverage(c) &&\n\tc.value instanceof FileCoverage &&\n\t!!c.value.declaration?.total;\n\nclass TestCoverageTree extends Disposable {\n\tprivate readonly tree: WorkbenchCompressibleObjectTree<\n\t\tCoverageTreeElement,\n\t\tvoid\n\t>;\n\tprivate readonly inputDisposables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tlabels: ResourceLabels,\n\t\tsortOrder: IObservable<CoverageSortOrder>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEditorService editorService: IEditorService,\n\t) {\n\t\tsuper();\n\n\t\tthis.tree = <\n\t\t\tWorkbenchCompressibleObjectTree<CoverageTreeElement, void>\n\t\t>instantiationService.createInstance(\n\t\t\tWorkbenchCompressibleObjectTree,\n\t\t\t\"TestCoverageView\",\n\t\t\tcontainer,\n\t\t\tnew TestCoverageTreeListDelegate(),\n\t\t\t[\n\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\tFileCoverageRenderer,\n\t\t\t\t\tlabels,\n\t\t\t\t),\n\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\tDeclarationCoverageRenderer,\n\t\t\t\t),\n\t\t\t\tinstantiationService.createInstance(BasicRenderer),\n\t\t\t],\n\t\t\t{\n\t\t\t\texpandOnlyOnTwistieClick: true,\n\t\t\t\tsorter: new Sorter(sortOrder),\n\t\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\t\tgetCompressedNodeKeyboardNavigationLabel(\n\t\t\t\t\t\telements: CoverageTreeElement[],\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn elements\n\t\t\t\t\t\t\t.map((e) => this.getKeyboardNavigationLabel(e))\n\t\t\t\t\t\t\t.join(\"/\");\n\t\t\t\t\t},\n\t\t\t\t\tgetKeyboardNavigationLabel(e: CoverageTreeElement) {\n\t\t\t\t\t\treturn isFileCoverage(e)\n\t\t\t\t\t\t\t? basenameOrAuthority(e.value!.uri)\n\t\t\t\t\t\t\t: e.label;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taccessibilityProvider: {\n\t\t\t\t\tgetAriaLabel(element: CoverageTreeElement) {\n\t\t\t\t\t\tif (isFileCoverage(element)) {\n\t\t\t\t\t\t\tconst name = basenameOrAuthority(\n\t\t\t\t\t\t\t\telement.value!.uri,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn localize(\n\t\t\t\t\t\t\t\t\"testCoverageItemLabel\",\n\t\t\t\t\t\t\t\t\"{0} coverage: {0}%\",\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t(element.value!.tpc * 100).toFixed(2),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn element.label;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tgetWidgetAriaLabel() {\n\t\t\t\t\t\treturn localize(\n\t\t\t\t\t\t\t\"testCoverageTreeLabel\",\n\t\t\t\t\t\t\t\"Test Coverage Explorer\",\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tidentityProvider: new TestCoverageIdentityProvider(),\n\t\t\t},\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\tsortOrder.read(reader);\n\t\t\t\tthis.tree.resort(null, true);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(this.tree);\n\t\tthis._register(\n\t\t\tthis.tree.onDidChangeCollapseState((e) => {\n\t\t\t\tconst el = e.node.element;\n\t\t\t\tif (\n\t\t\t\t\t!e.node.collapsed &&\n\t\t\t\t\t!e.node.children.length &&\n\t\t\t\t\tel &&\n\t\t\t\t\tshouldShowDeclDetailsOnExpand(el)\n\t\t\t\t) {\n\t\t\t\t\tif (el.value!.hasSynchronousDetails) {\n\t\t\t\t\t\tthis.tree.setChildren(el, [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: new LoadingDetails(),\n\t\t\t\t\t\t\t\tincompressible: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\n\t\t\t\t\tel.value!.details().then((details) =>\n\t\t\t\t\t\tthis.updateWithDetails(el, details),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.tree.onDidOpen((e) => {\n\t\t\t\tlet resource: URI | undefined;\n\t\t\t\tlet selection: Range | Position | undefined;\n\t\t\t\tif (e.element) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisFileCoverage(e.element) &&\n\t\t\t\t\t\t!e.element.children?.size\n\t\t\t\t\t) {\n\t\t\t\t\t\tresource = e.element.value!.uri;\n\t\t\t\t\t} else if (isDeclarationCoverage(e.element)) {\n\t\t\t\t\t\tresource = e.element.uri;\n\t\t\t\t\t\tselection = e.element.location;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\teditorService.openEditor(\n\t\t\t\t\t{\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tselection:\n\t\t\t\t\t\t\t\tselection instanceof Position\n\t\t\t\t\t\t\t\t\t? Range.fromPositions(selection, selection)\n\t\t\t\t\t\t\t\t\t: selection,\n\t\t\t\t\t\t\trevealIfOpened: true,\n\t\t\t\t\t\t\tselectionRevealType:\n\t\t\t\t\t\t\t\tTextEditorSelectionRevealType.NearTopIfOutsideViewport,\n\t\t\t\t\t\t\tpreserveFocus: e.editorOptions.preserveFocus,\n\t\t\t\t\t\t\tpinned: e.editorOptions.pinned,\n\t\t\t\t\t\t\tsource: EditorOpenSource.USER,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\te.sideBySide ? SIDE_GROUP : ACTIVE_GROUP,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic setInput(coverage: TestCoverage, showOnlyTest?: TestId) {\n\t\tthis.inputDisposables.clear();\n\n\t\tlet tree = coverage.tree;\n\n\t\t// Filter to only a test, generate a new tree with only those items selected\n\t\tif (showOnlyTest) {\n\t\t\ttree = coverage.filterTreeForTest(showOnlyTest);\n\t\t}\n\n\t\tconst files: TestCoverageFileNode[] = [];\n\t\tfor (let node of tree.nodes) {\n\t\t\t// when showing initial children, only show from the first file or tee\n\t\t\twhile (\n\t\t\t\t!(node.value instanceof FileCoverage) &&\n\t\t\t\tnode.children?.size === 1\n\t\t\t) {\n\t\t\t\tnode = Iterable.first(node.children.values())!;\n\t\t\t}\n\t\t\tfiles.push(node);\n\t\t}\n\n\t\tconst toChild = (\n\t\t\tvalue: TestCoverageFileNode,\n\t\t): ICompressedTreeElement<CoverageTreeElement> => {\n\t\t\tconst isFile = !value.children?.size;\n\t\t\treturn {\n\t\t\t\telement: value,\n\t\t\t\tincompressible: isFile,\n\t\t\t\tcollapsed: isFile,\n\t\t\t\t// directories can be expanded, and items with function info can be expanded\n\t\t\t\tcollapsible: !isFile || !!value.value?.declaration?.total,\n\t\t\t\tchildren:\n\t\t\t\t\tvalue.children &&\n\t\t\t\t\tIterable.map(value.children?.values(), toChild),\n\t\t\t};\n\t\t};\n\n\t\tthis.inputDisposables.add(\n\t\t\tonObservableChange(coverage.didAddCoverage, (nodes) => {\n\t\t\t\tconst toRender = findLast(nodes, (n) =>\n\t\t\t\t\tthis.tree.hasElement(n),\n\t\t\t\t);\n\t\t\t\tif (toRender) {\n\t\t\t\t\tthis.tree.setChildren(\n\t\t\t\t\t\ttoRender,\n\t\t\t\t\t\tIterable.map(\n\t\t\t\t\t\t\ttoRender.children?.values() || [],\n\t\t\t\t\t\t\ttoChild,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdiffIdentityProvider: {\n\t\t\t\t\t\t\t\tgetId: (el) =>\n\t\t\t\t\t\t\t\t\t(el as TestCoverageFileNode).value!.id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.tree.setChildren(null, Iterable.map(files, toChild));\n\t}\n\n\tpublic layout(height: number, width: number) {\n\t\tthis.tree.layout(height, width);\n\t}\n\n\tprivate updateWithDetails(\n\t\tel: IPrefixTreeNode<FileCoverage>,\n\t\tdetails: readonly CoverageDetails[],\n\t) {\n\t\tif (!this.tree.hasElement(el)) {\n\t\t\treturn; // avoid any issues if the tree changes in the meanwhile\n\t\t}\n\n\t\tconst decl: DeclarationCoverageNode[] = [];\n\t\tfor (const fn of details) {\n\t\t\tif (fn.type !== DetailType.Declaration) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet arr = decl;\n\t\t\twhile (true) {\n\t\t\t\tconst parent = arr.find((p) => p.containedDetails.has(fn));\n\t\t\t\tif (parent) {\n\t\t\t\t\tarr = parent.children;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tarr.push(new DeclarationCoverageNode(el.value!.uri, fn, details));\n\t\t}\n\n\t\tconst makeChild = (\n\t\t\tfn: DeclarationCoverageNode,\n\t\t): ICompressedTreeElement<CoverageTreeElement> => ({\n\t\t\telement: fn,\n\t\t\tincompressible: true,\n\t\t\tcollapsed: true,\n\t\t\tcollapsible: fn.children.length > 0,\n\t\t\tchildren: fn.children.map(makeChild),\n\t\t});\n\n\t\tthis.tree.setChildren(el, decl.map(makeChild));\n\t}\n}\n\nclass TestCoverageTreeListDelegate\n\timplements IListVirtualDelegate<CoverageTreeElement>\n{\n\tgetHeight(element: CoverageTreeElement): number {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: CoverageTreeElement): string {\n\t\tif (isFileCoverage(element)) {\n\t\t\treturn FileCoverageRenderer.ID;\n\t\t}\n\t\tif (isDeclarationCoverage(element)) {\n\t\t\treturn DeclarationCoverageRenderer.ID;\n\t\t}\n\t\tif (\n\t\t\telement instanceof LoadingDetails ||\n\t\t\telement instanceof RevealUncoveredDeclarations\n\t\t) {\n\t\t\treturn BasicRenderer.ID;\n\t\t}\n\t\tassertNever(element);\n\t}\n}\n\nclass Sorter implements ITreeSorter<CoverageTreeElement> {\n\tconstructor(private readonly order: IObservable<CoverageSortOrder>) {}\n\tcompare(a: CoverageTreeElement, b: CoverageTreeElement): number {\n\t\tconst order = this.order.get();\n\t\tif (isFileCoverage(a) && isFileCoverage(b)) {\n\t\t\tswitch (order) {\n\t\t\t\tcase CoverageSortOrder.Location:\n\t\t\t\tcase CoverageSortOrder.Name:\n\t\t\t\t\treturn a\n\t\t\t\t\t\t.value!.uri.toString()\n\t\t\t\t\t\t.localeCompare(b.value!.uri.toString());\n\t\t\t\tcase CoverageSortOrder.Coverage:\n\t\t\t\t\treturn b.value!.tpc - a.value!.tpc;\n\t\t\t}\n\t\t} else if (isDeclarationCoverage(a) && isDeclarationCoverage(b)) {\n\t\t\tswitch (order) {\n\t\t\t\tcase CoverageSortOrder.Location:\n\t\t\t\t\treturn Position.compare(\n\t\t\t\t\t\ta.location instanceof Range\n\t\t\t\t\t\t\t? a.location.getStartPosition()\n\t\t\t\t\t\t\t: a.location,\n\t\t\t\t\t\tb.location instanceof Range\n\t\t\t\t\t\t\t? b.location.getStartPosition()\n\t\t\t\t\t\t\t: b.location,\n\t\t\t\t\t);\n\t\t\t\tcase CoverageSortOrder.Name:\n\t\t\t\t\treturn a.label.localeCompare(b.label);\n\t\t\t\tcase CoverageSortOrder.Coverage: {\n\t\t\t\t\tconst attrA = a.tpc;\n\t\t\t\t\tconst attrB = b.tpc;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t(attrA !== undefined &&\n\t\t\t\t\t\t\tattrB !== undefined &&\n\t\t\t\t\t\t\tattrB - attrA) ||\n\t\t\t\t\t\t+b.hits - +a.hits ||\n\t\t\t\t\t\ta.label.localeCompare(b.label)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\ninterface FileTemplateData {\n\tcontainer: HTMLElement;\n\tbars: ManagedTestCoverageBars;\n\ttemplateDisposables: DisposableStore;\n\telementsDisposables: DisposableStore;\n\tlabel: IResourceLabel;\n}\n\nclass FileCoverageRenderer\n\timplements\n\t\tICompressibleTreeRenderer<\n\t\t\tCoverageTreeElement,\n\t\t\tFuzzyScore,\n\t\t\tFileTemplateData\n\t\t>\n{\n\tpublic static readonly ID = \"F\";\n\tpublic readonly templateId = FileCoverageRenderer.ID;\n\n\tconstructor(\n\t\tprivate readonly labels: ResourceLabels,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) { }\n\n\t/** @inheritdoc */\n\tpublic renderTemplate(container: HTMLElement): FileTemplateData {\n\t\tconst templateDisposables = new DisposableStore();\n\t\tcontainer.classList.add(\"test-coverage-list-item\");\n\n\t\treturn {\n\t\t\tcontainer,\n\t\t\tbars: templateDisposables.add(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tManagedTestCoverageBars,\n\t\t\t\t\t{ compact: false, container },\n\t\t\t\t),\n\t\t\t),\n\t\t\tlabel: templateDisposables.add(\n\t\t\t\tthis.labels.create(container, {\n\t\t\t\t\tsupportHighlights: true,\n\t\t\t\t}),\n\t\t\t),\n\t\t\telementsDisposables: templateDisposables.add(new DisposableStore()),\n\t\t\ttemplateDisposables,\n\t\t};\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderElement(\n\t\tnode: ITreeNode<CoverageTreeElement, FuzzyScore>,\n\t\t_index: number,\n\t\ttemplateData: FileTemplateData,\n\t): void {\n\t\tthis.doRender(\n\t\t\tnode.element as TestCoverageFileNode,\n\t\t\ttemplateData,\n\t\t\tnode.filterData,\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderCompressedElements(\n\t\tnode: ITreeNode<ICompressedTreeNode<CoverageTreeElement>, FuzzyScore>,\n\t\t_index: number,\n\t\ttemplateData: FileTemplateData,\n\t): void {\n\t\tthis.doRender(node.element.elements, templateData, node.filterData);\n\t}\n\n\tpublic disposeTemplate(templateData: FileTemplateData) {\n\t\ttemplateData.templateDisposables.dispose();\n\t}\n\n\t/** @inheritdoc */\n\tprivate doRender(\n\t\telement: CoverageTreeElement | CoverageTreeElement[],\n\t\ttemplateData: FileTemplateData,\n\t\tfilterData: FuzzyScore | undefined,\n\t) {\n\t\ttemplateData.elementsDisposables.clear();\n\n\t\tconst stat = (\n\t\t\telement instanceof Array ? element[element.length - 1] : element\n\t\t) as TestCoverageFileNode;\n\t\tconst file = stat.value!;\n\t\tconst name =\n\t\t\telement instanceof Array\n\t\t\t\t? element.map((e) =>\n\t\t\t\t\t\tbasenameOrAuthority(\n\t\t\t\t\t\t\t(e as TestCoverageFileNode).value!.uri,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t: basenameOrAuthority(file.uri);\n\t\tif (file instanceof BypassedFileCoverage) {\n\t\t\ttemplateData.bars.setCoverageInfo(undefined);\n\t\t} else {\n\t\t\ttemplateData.elementsDisposables.add(\n\t\t\t\tautorun((reader) => {\n\t\t\t\t\tstat.value?.didChange.read(reader);\n\t\t\t\t\ttemplateData.bars.setCoverageInfo(file);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\ttemplateData.bars.setCoverageInfo(file);\n\t\t}\n\n\t\ttemplateData.label.setResource(\n\t\t\t{ resource: file.uri, name },\n\t\t\t{\n\t\t\t\tfileKind: stat.children?.size ? FileKind.FOLDER : FileKind.FILE,\n\t\t\t\tmatches: createMatches(filterData),\n\t\t\t\tseparator: this.labelService.getSeparator(\n\t\t\t\t\tfile.uri.scheme,\n\t\t\t\t\tfile.uri.authority,\n\t\t\t\t),\n\t\t\t\textraClasses: [\"test-coverage-list-item-label\"],\n\t\t\t},\n\t\t);\n\t}\n}\n\ninterface DeclarationTemplateData {\n\tcontainer: HTMLElement;\n\tbars: ManagedTestCoverageBars;\n\ttemplateDisposables: DisposableStore;\n\ticon: HTMLElement;\n\tlabel: HTMLElement;\n}\n\nclass DeclarationCoverageRenderer\n\timplements\n\t\tICompressibleTreeRenderer<\n\t\t\tCoverageTreeElement,\n\t\t\tFuzzyScore,\n\t\t\tDeclarationTemplateData\n\t\t>\n{\n\tpublic static readonly ID = \"N\";\n\tpublic readonly templateId = DeclarationCoverageRenderer.ID;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) { }\n\n\t/** @inheritdoc */\n\tpublic renderTemplate(container: HTMLElement): DeclarationTemplateData {\n\t\tconst templateDisposables = new DisposableStore();\n\t\tcontainer.classList.add(\"test-coverage-list-item\");\n\t\tconst icon = dom.append(container, dom.$(\".state\"));\n\t\tconst label = dom.append(container, dom.$(\".name\"));\n\n\t\treturn {\n\t\t\tcontainer,\n\t\t\tbars: templateDisposables.add(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tManagedTestCoverageBars,\n\t\t\t\t\t{ compact: false, container },\n\t\t\t\t),\n\t\t\t),\n\t\t\ttemplateDisposables,\n\t\t\ticon,\n\t\t\tlabel,\n\t\t};\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderElement(\n\t\tnode: ITreeNode<CoverageTreeElement, FuzzyScore>,\n\t\t_index: number,\n\t\ttemplateData: DeclarationTemplateData,\n\t): void {\n\t\tthis.doRender(\n\t\t\tnode.element as DeclarationCoverageNode,\n\t\t\ttemplateData,\n\t\t\tnode.filterData,\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderCompressedElements(\n\t\tnode: ITreeNode<ICompressedTreeNode<CoverageTreeElement>, FuzzyScore>,\n\t\t_index: number,\n\t\ttemplateData: DeclarationTemplateData,\n\t): void {\n\t\tthis.doRender(\n\t\t\tnode.element.elements[\n\t\t\t\tnode.element.elements.length - 1\n\t\t\t] as DeclarationCoverageNode,\n\t\t\ttemplateData,\n\t\t\tnode.filterData,\n\t\t);\n\t}\n\n\tpublic disposeTemplate(templateData: DeclarationTemplateData) {\n\t\ttemplateData.templateDisposables.dispose();\n\t}\n\n\t/** @inheritdoc */\n\tprivate doRender(\n\t\telement: DeclarationCoverageNode,\n\t\ttemplateData: DeclarationTemplateData,\n\t\t_filterData: FuzzyScore | undefined,\n\t) {\n\t\tconst covered = !!element.hits;\n\t\tconst icon = covered\n\t\t\t? testingWasCovered\n\t\t\t: testingStatesToIcons.get(TestResultState.Unset);\n\t\ttemplateData.container.classList.toggle(\"not-covered\", !covered);\n\t\ttemplateData.icon.className = `computed-state ${ThemeIcon.asClassName(icon!)}`;\n\t\ttemplateData.label.innerText = element.label;\n\t\ttemplateData.bars.setCoverageInfo(element.attributableCoverage());\n\t}\n}\n\nclass BasicRenderer\n\timplements\n\t\tICompressibleTreeRenderer<CoverageTreeElement, FuzzyScore, HTMLElement>\n{\n\tpublic static readonly ID = \"B\";\n\tpublic readonly templateId = BasicRenderer.ID;\n\n\trenderCompressedElements(\n\t\tnode: ITreeNode<ICompressedTreeNode<CoverageTreeElement>, FuzzyScore>,\n\t\t_index: number,\n\t\tcontainer: HTMLElement,\n\t): void {\n\t\tthis.renderInner(\n\t\t\tnode.element.elements[node.element.elements.length - 1],\n\t\t\tcontainer,\n\t\t);\n\t}\n\n\trenderTemplate(container: HTMLElement): HTMLElement {\n\t\treturn container;\n\t}\n\n\trenderElement(\n\t\tnode: ITreeNode<CoverageTreeElement, FuzzyScore>,\n\t\tindex: number,\n\t\tcontainer: HTMLElement,\n\t): void {\n\t\tthis.renderInner(node.element, container);\n\t}\n\n\tdisposeTemplate(): void {\n\t\t// no-op\n\t}\n\n\tprivate renderInner(element: CoverageTreeElement, container: HTMLElement) {\n\t\tcontainer.innerText = (\n\t\t\telement as RevealUncoveredDeclarations | LoadingDetails\n\t\t).label;\n\t}\n}\n\nclass TestCoverageIdentityProvider\n\timplements IIdentityProvider<CoverageTreeElement>\n{\n\tpublic getId(element: CoverageTreeElement) {\n\t\treturn isFileCoverage(element)\n\t\t\t? element.value!.uri.toString()\n\t\t\t: element.id;\n\t}\n}\n\nregisterAction2(\n\tclass TestCoverageChangePerTestFilterAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: TestCommandId.CoverageFilterToTest,\n\t\t\t\tcategory: Categories.Test,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.changeCoverageFilter\",\n\t\t\t\t\t\"Filter Coverage by Test\",\n\t\t\t\t),\n\t\t\t\ticon: Codicon.filter,\n\t\t\t\ttoggled: {\n\t\t\t\t\ticon: Codicon.filterFilled,\n\t\t\t\t\tcondition: TestingContextKeys.isCoverageFilteredToTest,\n\t\t\t\t},\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: TestingContextKeys.hasPerTestCoverage,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\tTestingContextKeys.hasPerTestCoverage,\n\t\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\"view\",\n\t\t\t\t\t\t\t\tTesting.CoverageViewId,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\toverride run(accessor: ServicesAccessor): void {\n\t\t\tconst coverageService = accessor.get(ITestCoverageService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst coverage = coverageService.selected.get();\n\t\t\tif (!coverage) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tests = [...coverage.allPerTestIDs()].map(TestId.fromString);\n\t\t\tconst commonPrefix = TestId.getLengthOfCommonPrefix(\n\t\t\t\ttests.length,\n\t\t\t\t(i) => tests[i],\n\t\t\t);\n\t\t\tconst result = coverage.result;\n\t\t\tconst previousSelection = coverageService.filterToTest.get();\n\t\t\tconst previousSelectionStr = previousSelection?.toString();\n\n\t\t\ttype TItem = { label: string; testId?: TestId };\n\n\t\t\tconst items: QuickPickInput<TItem>[] = [\n\t\t\t\t{ label: coverUtils.labels.allTests, id: undefined },\n\t\t\t\t{ type: \"separator\" },\n\t\t\t\t...tests.map((testId) => ({\n\t\t\t\t\tlabel: coverUtils.getLabelForItem(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\ttestId,\n\t\t\t\t\t\tcommonPrefix,\n\t\t\t\t\t),\n\t\t\t\t\ttestId,\n\t\t\t\t})),\n\t\t\t];\n\n\t\t\tquickInputService\n\t\t\t\t.pick(items, {\n\t\t\t\t\tactiveItem: items.find(\n\t\t\t\t\t\t(item): item is TItem =>\n\t\t\t\t\t\t\t\"testId\" in item &&\n\t\t\t\t\t\t\titem.testId?.toString() === previousSelectionStr,\n\t\t\t\t\t),\n\t\t\t\t\tplaceHolder: coverUtils.labels.pickShowCoverage,\n\t\t\t\t\tonDidFocus: (entry) => {\n\t\t\t\t\t\tcoverageService.filterToTest.set(\n\t\t\t\t\t\t\tentry.testId,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.then((selected) => {\n\t\t\t\t\tcoverageService.filterToTest.set(\n\t\t\t\t\t\tselected ? selected.testId : previousSelection,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass TestCoverageChangeSortingAction extends ViewAction<TestCoverageView> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: TestCommandId.CoverageViewChangeSorting,\n\t\t\t\tviewId: Testing.CoverageViewId,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.changeCoverageSort\",\n\t\t\t\t\t\"Change Sort Order\",\n\t\t\t\t),\n\t\t\t\ticon: Codicon.sortPrecedence,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.CoverageViewId),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\toverride runInView(accessor: ServicesAccessor, view: TestCoverageView) {\n\t\t\ttype Item = IQuickPickItem & { value: CoverageSortOrder };\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst quickInput = disposables.add(\n\t\t\t\taccessor.get(IQuickInputService).createQuickPick<Item>(),\n\t\t\t);\n\t\t\tconst items: Item[] = [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"testing.coverageSortByLocation\",\n\t\t\t\t\t\t\"Sort by Location\",\n\t\t\t\t\t),\n\t\t\t\t\tvalue: CoverageSortOrder.Location,\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"testing.coverageSortByLocationDescription\",\n\t\t\t\t\t\t\"Files are sorted alphabetically, declarations are sorted by position\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"testing.coverageSortByCoverage\",\n\t\t\t\t\t\t\"Sort by Coverage\",\n\t\t\t\t\t),\n\t\t\t\t\tvalue: CoverageSortOrder.Coverage,\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"testing.coverageSortByCoverageDescription\",\n\t\t\t\t\t\t\"Files and declarations are sorted by total coverage\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"testing.coverageSortByName\",\n\t\t\t\t\t\t\"Sort by Name\",\n\t\t\t\t\t),\n\t\t\t\t\tvalue: CoverageSortOrder.Name,\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"testing.coverageSortByNameDescription\",\n\t\t\t\t\t\t\"Files and declarations are sorted alphabetically\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tquickInput.placeholder = localize(\n\t\t\t\t\"testing.coverageSortPlaceholder\",\n\t\t\t\t\"Sort the Test Coverage view...\",\n\t\t\t);\n\t\t\tquickInput.items = items;\n\t\t\tquickInput.show();\n\t\t\tdisposables.add(quickInput.onDidHide(() => disposables.dispose()));\n\t\t\tdisposables.add(\n\t\t\t\tquickInput.onDidAccept(() => {\n\t\t\t\t\tconst picked = quickInput.selectedItems[0]?.value;\n\t\t\t\t\tif (picked !== undefined) {\n\t\t\t\t\t\tview.sortOrder.set(picked, undefined);\n\t\t\t\t\t\tquickInput.dispose();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": ["CoverageSortOrder", "count"]
}
