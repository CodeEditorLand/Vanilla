{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testCoverageView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { IIdentityProvider, IListVirtualDelegate } from '../../../../base/browser/ui/list/list.js';\nimport { ICompressedTreeElement, ICompressedTreeNode } from '../../../../base/browser/ui/tree/compressedObjectTreeModel.js';\nimport { ICompressibleTreeRenderer } from '../../../../base/browser/ui/tree/objectTree.js';\nimport { ITreeNode, ITreeSorter } from '../../../../base/browser/ui/tree/tree.js';\nimport { findLast } from '../../../../base/common/arraysFind.js';\nimport { assertNever } from '../../../../base/common/assert.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { FuzzyScore, createMatches } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, autorun, observableValue } from '../../../../base/common/observable.js';\nimport { IPrefixTreeNode } from '../../../../base/common/prefixTree.js';\nimport { basenameOrAuthority } from '../../../../base/common/resources.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { EditorOpenSource, TextEditorSelectionRevealType } from '../../../../platform/editor/common/editor.js';\nimport { FileKind } from '../../../../platform/files/common/files.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { WorkbenchCompressibleObjectTree } from '../../../../platform/list/browser/listService.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IQuickInputService, IQuickPickItem, QuickPickInput } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IResourceLabel, ResourceLabels } from '../../../browser/labels.js';\nimport { IViewPaneOptions, ViewAction, ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport * as coverUtils from './codeCoverageDisplayUtils.js';\nimport { testingStatesToIcons, testingWasCovered } from './icons.js';\nimport { CoverageBarSource, ManagedTestCoverageBars } from './testCoverageBars.js';\nimport { TestCommandId, Testing } from '../common/constants.js';\nimport { onObservableChange } from '../common/observableUtils.js';\nimport { BypassedFileCoverage, ComputedFileCoverage, FileCoverage, TestCoverage, getTotalCoveragePercent } from '../common/testCoverage.js';\nimport { ITestCoverageService } from '../common/testCoverageService.js';\nimport { TestId } from '../common/testId.js';\nimport { TestingContextKeys } from '../common/testingContextKeys.js';\nimport { CoverageDetails, DetailType, ICoverageCount, IDeclarationCoverage, TestResultState } from '../common/testTypes.js';\nimport { ACTIVE_GROUP, IEditorService, SIDE_GROUP } from '../../../services/editor/common/editorService.js';\n\nconst enum CoverageSortOrder {\n\tCoverage,\n\tLocation,\n\tName,\n}\n\nexport class TestCoverageView extends ViewPane {\n\tprivate readonly tree = new MutableDisposable<TestCoverageTree>();\n\tpublic readonly sortOrder = observableValue('sortOrder', CoverageSortOrder.Location);\n\n\tconstructor(\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITestCoverageService private readonly coverageService: ITestCoverageService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tconst labels = this._register(this.instantiationService.createInstance(ResourceLabels, { onDidChangeVisibility: this.onDidChangeBodyVisibility }));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst coverage = this.coverageService.selected.read(reader);\n\t\t\tif (coverage) {\n\t\t\t\tconst t = (this.tree.value ??= this.instantiationService.createInstance(TestCoverageTree, container, labels, this.sortOrder));\n\t\t\t\tt.setInput(coverage, this.coverageService.filterToTest.read(reader));\n\t\t\t} else {\n\t\t\t\tthis.tree.clear();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tthis.element.classList.toggle(\n\t\t\t\t'coverage-view-is-filtered',\n\t\t\t\t!!this.coverageService.filterToTest.read(reader),\n\t\t\t);\n\t\t}));\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.tree.value?.layout(height, width);\n\t}\n}\n\nlet fnNodeId = 0;\n\nclass DeclarationCoverageNode {\n\tpublic readonly id = String(fnNodeId++);\n\tpublic readonly containedDetails = new Set<CoverageDetails>();\n\tpublic readonly children: DeclarationCoverageNode[] = [];\n\n\tpublic get hits() {\n\t\treturn this.data.count;\n\t}\n\n\tpublic get label() {\n\t\treturn this.data.name;\n\t}\n\n\tpublic get location() {\n\t\treturn this.data.location;\n\t}\n\n\tpublic get tpc() {\n\t\tconst attr = this.attributableCoverage();\n\t\treturn attr && getTotalCoveragePercent(attr.statement, attr.branch, undefined);\n\t}\n\n\tconstructor(\n\t\tpublic readonly uri: URI,\n\t\tprivate readonly data: IDeclarationCoverage,\n\t\tdetails: readonly CoverageDetails[],\n\t) {\n\t\tif (data.location instanceof Range) {\n\t\t\tfor (const detail of details) {\n\t\t\t\tif (this.contains(detail.location)) {\n\t\t\t\t\tthis.containedDetails.add(detail);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Gets whether this function has a defined range and contains the given range. */\n\tpublic contains(location: Range | Position) {\n\t\tconst own = this.data.location;\n\t\treturn own instanceof Range && (location instanceof Range ? own.containsRange(location) : own.containsPosition(location));\n\t}\n\n\t/**\n\t * If the function defines a range, we can look at statements within the\n\t * function to get total coverage for the function, rather than a boolean\n\t * yes/no.\n\t */\n\t@memoize\n\tpublic attributableCoverage() {\n\t\tconst { location, count } = this.data;\n\t\tif (!(location instanceof Range) || !count) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst statement: ICoverageCount = { covered: 0, total: 0 };\n\t\tconst branch: ICoverageCount = { covered: 0, total: 0 };\n\t\tfor (const detail of this.containedDetails) {\n\t\t\tif (detail.type !== DetailType.Statement) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstatement.covered += detail.count ? 1 : 0;\n\t\t\tstatement.total++;\n\t\t\tif (detail.branches) {\n\t\t\t\tfor (const { count } of detail.branches) {\n\t\t\t\t\tbranch.covered += count ? 1 : 0;\n\t\t\t\t\tbranch.total++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { statement, branch } satisfies CoverageBarSource;\n\t}\n}\n\nclass RevealUncoveredDeclarations {\n\tpublic readonly id = String(fnNodeId++);\n\n\tpublic get label() {\n\t\treturn localize('functionsWithoutCoverage', \"{0} declarations without coverage...\", this.n);\n\t}\n\n\tconstructor(public readonly n: number) { }\n}\n\nclass LoadingDetails {\n\tpublic readonly id = String(fnNodeId++);\n\tpublic readonly label = localize('loadingCoverageDetails', \"Loading Coverage Details...\");\n}\n\n/** Type of nodes returned from {@link TestCoverage}. Note: value is *always* defined. */\ntype TestCoverageFileNode = IPrefixTreeNode<ComputedFileCoverage | FileCoverage>;\ntype CoverageTreeElement = TestCoverageFileNode | DeclarationCoverageNode | LoadingDetails | RevealUncoveredDeclarations;\n\nconst isFileCoverage = (c: CoverageTreeElement): c is TestCoverageFileNode => typeof c === 'object' && 'value' in c;\nconst isDeclarationCoverage = (c: CoverageTreeElement): c is DeclarationCoverageNode => c instanceof DeclarationCoverageNode;\nconst shouldShowDeclDetailsOnExpand = (c: CoverageTreeElement): c is IPrefixTreeNode<FileCoverage> =>\n\tisFileCoverage(c) && c.value instanceof FileCoverage && !!c.value.declaration?.total;\n\nclass TestCoverageTree extends Disposable {\n\tprivate readonly tree: WorkbenchCompressibleObjectTree<CoverageTreeElement, void>;\n\tprivate readonly inputDisposables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tlabels: ResourceLabels,\n\t\tsortOrder: IObservable<CoverageSortOrder>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEditorService editorService: IEditorService,\n\t) {\n\t\tsuper();\n\n\t\tthis.tree = <WorkbenchCompressibleObjectTree<CoverageTreeElement, void>>instantiationService.createInstance(\n\t\t\tWorkbenchCompressibleObjectTree,\n\t\t\t'TestCoverageView',\n\t\t\tcontainer,\n\t\t\tnew TestCoverageTreeListDelegate(),\n\t\t\t[\n\t\t\t\tinstantiationService.createInstance(FileCoverageRenderer, labels),\n\t\t\t\tinstantiationService.createInstance(DeclarationCoverageRenderer),\n\t\t\t\tinstantiationService.createInstance(BasicRenderer),\n\t\t\t],\n\t\t\t{\n\t\t\t\texpandOnlyOnTwistieClick: true,\n\t\t\t\tsorter: new Sorter(sortOrder),\n\t\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\t\tgetCompressedNodeKeyboardNavigationLabel(elements: CoverageTreeElement[]) {\n\t\t\t\t\t\treturn elements.map(e => this.getKeyboardNavigationLabel(e)).join('/');\n\t\t\t\t\t},\n\t\t\t\t\tgetKeyboardNavigationLabel(e: CoverageTreeElement) {\n\t\t\t\t\t\treturn isFileCoverage(e)\n\t\t\t\t\t\t\t? basenameOrAuthority(e.value!.uri)\n\t\t\t\t\t\t\t: e.label;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taccessibilityProvider: {\n\t\t\t\t\tgetAriaLabel(element: CoverageTreeElement) {\n\t\t\t\t\t\tif (isFileCoverage(element)) {\n\t\t\t\t\t\t\tconst name = basenameOrAuthority(element.value!.uri);\n\t\t\t\t\t\t\treturn localize('testCoverageItemLabel', \"{0} coverage: {0}%\", name, (element.value!.tpc * 100).toFixed(2));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn element.label;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tgetWidgetAriaLabel() {\n\t\t\t\t\t\treturn localize('testCoverageTreeLabel', \"Test Coverage Explorer\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tidentityProvider: new TestCoverageIdentityProvider(),\n\t\t\t}\n\t\t);\n\n\t\tthis._register(autorun(reader => {\n\t\t\tsortOrder.read(reader);\n\t\t\tthis.tree.resort(null, true);\n\t\t}));\n\n\t\tthis._register(this.tree);\n\t\tthis._register(this.tree.onDidChangeCollapseState(e => {\n\t\t\tconst el = e.node.element;\n\t\t\tif (!e.node.collapsed && !e.node.children.length && el && shouldShowDeclDetailsOnExpand(el)) {\n\t\t\t\tif (el.value!.hasSynchronousDetails) {\n\t\t\t\t\tthis.tree.setChildren(el, [{ element: new LoadingDetails(), incompressible: true }]);\n\t\t\t\t}\n\n\t\t\t\tel.value!.details().then(details => this.updateWithDetails(el, details));\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.tree.onDidOpen(e => {\n\t\t\tlet resource: URI | undefined;\n\t\t\tlet selection: Range | Position | undefined;\n\t\t\tif (e.element) {\n\t\t\t\tif (isFileCoverage(e.element) && !e.element.children?.size) {\n\t\t\t\t\tresource = e.element.value!.uri;\n\t\t\t\t} else if (isDeclarationCoverage(e.element)) {\n\t\t\t\t\tresource = e.element.uri;\n\t\t\t\t\tselection = e.element.location;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!resource) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditorService.openEditor({\n\t\t\t\tresource,\n\t\t\t\toptions: {\n\t\t\t\t\tselection: selection instanceof Position ? Range.fromPositions(selection, selection) : selection,\n\t\t\t\t\trevealIfOpened: true,\n\t\t\t\t\tselectionRevealType: TextEditorSelectionRevealType.NearTopIfOutsideViewport,\n\t\t\t\t\tpreserveFocus: e.editorOptions.preserveFocus,\n\t\t\t\t\tpinned: e.editorOptions.pinned,\n\t\t\t\t\tsource: EditorOpenSource.USER,\n\t\t\t\t},\n\t\t\t}, e.sideBySide ? SIDE_GROUP : ACTIVE_GROUP);\n\t\t}));\n\t}\n\n\tpublic setInput(coverage: TestCoverage, showOnlyTest?: TestId) {\n\t\tthis.inputDisposables.clear();\n\n\t\tlet tree = coverage.tree;\n\n\t\t// Filter to only a test, generate a new tree with only those items selected\n\t\tif (showOnlyTest) {\n\t\t\ttree = coverage.filterTreeForTest(showOnlyTest);\n\t\t}\n\n\t\tconst files: TestCoverageFileNode[] = [];\n\t\tfor (let node of tree.nodes) {\n\t\t\t// when showing initial children, only show from the first file or tee\n\t\t\twhile (!(node.value instanceof FileCoverage) && node.children?.size === 1) {\n\t\t\t\tnode = Iterable.first(node.children.values())!;\n\t\t\t}\n\t\t\tfiles.push(node);\n\t\t}\n\n\t\tconst toChild = (value: TestCoverageFileNode): ICompressedTreeElement<CoverageTreeElement> => {\n\t\t\tconst isFile = !value.children?.size;\n\t\t\treturn {\n\t\t\t\telement: value,\n\t\t\t\tincompressible: isFile,\n\t\t\t\tcollapsed: isFile,\n\t\t\t\t// directories can be expanded, and items with function info can be expanded\n\t\t\t\tcollapsible: !isFile || !!value.value?.declaration?.total,\n\t\t\t\tchildren: value.children && Iterable.map(value.children?.values(), toChild)\n\t\t\t};\n\t\t};\n\n\t\tthis.inputDisposables.add(onObservableChange(coverage.didAddCoverage, nodes => {\n\t\t\tconst toRender = findLast(nodes, n => this.tree.hasElement(n));\n\t\t\tif (toRender) {\n\t\t\t\tthis.tree.setChildren(\n\t\t\t\t\ttoRender,\n\t\t\t\t\tIterable.map(toRender.children?.values() || [], toChild),\n\t\t\t\t\t{ diffIdentityProvider: { getId: el => (el as TestCoverageFileNode).value!.id } }\n\t\t\t\t);\n\t\t\t}\n\t\t}));\n\n\t\tthis.tree.setChildren(null, Iterable.map(files, toChild));\n\t}\n\n\tpublic layout(height: number, width: number) {\n\t\tthis.tree.layout(height, width);\n\t}\n\n\tprivate updateWithDetails(el: IPrefixTreeNode<FileCoverage>, details: readonly CoverageDetails[]) {\n\t\tif (!this.tree.hasElement(el)) {\n\t\t\treturn; // avoid any issues if the tree changes in the meanwhile\n\t\t}\n\n\t\tconst decl: DeclarationCoverageNode[] = [];\n\t\tfor (const fn of details) {\n\t\t\tif (fn.type !== DetailType.Declaration) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet arr = decl;\n\t\t\twhile (true) {\n\t\t\t\tconst parent = arr.find(p => p.containedDetails.has(fn));\n\t\t\t\tif (parent) {\n\t\t\t\t\tarr = parent.children;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tarr.push(new DeclarationCoverageNode(el.value!.uri, fn, details));\n\t\t}\n\n\t\tconst makeChild = (fn: DeclarationCoverageNode): ICompressedTreeElement<CoverageTreeElement> => ({\n\t\t\telement: fn,\n\t\t\tincompressible: true,\n\t\t\tcollapsed: true,\n\t\t\tcollapsible: fn.children.length > 0,\n\t\t\tchildren: fn.children.map(makeChild)\n\t\t});\n\n\t\tthis.tree.setChildren(el, decl.map(makeChild));\n\t}\n}\n\nclass TestCoverageTreeListDelegate implements IListVirtualDelegate<CoverageTreeElement> {\n\tgetHeight(element: CoverageTreeElement): number {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: CoverageTreeElement): string {\n\t\tif (isFileCoverage(element)) {\n\t\t\treturn FileCoverageRenderer.ID;\n\t\t}\n\t\tif (isDeclarationCoverage(element)) {\n\t\t\treturn DeclarationCoverageRenderer.ID;\n\t\t}\n\t\tif (element instanceof LoadingDetails || element instanceof RevealUncoveredDeclarations) {\n\t\t\treturn BasicRenderer.ID;\n\t\t}\n\t\tassertNever(element);\n\t}\n}\n\nclass Sorter implements ITreeSorter<CoverageTreeElement> {\n\tconstructor(private readonly order: IObservable<CoverageSortOrder>) { }\n\tcompare(a: CoverageTreeElement, b: CoverageTreeElement): number {\n\t\tconst order = this.order.get();\n\t\tif (isFileCoverage(a) && isFileCoverage(b)) {\n\t\t\tswitch (order) {\n\t\t\t\tcase CoverageSortOrder.Location:\n\t\t\t\tcase CoverageSortOrder.Name:\n\t\t\t\t\treturn a.value!.uri.toString().localeCompare(b.value!.uri.toString());\n\t\t\t\tcase CoverageSortOrder.Coverage:\n\t\t\t\t\treturn b.value!.tpc - a.value!.tpc;\n\t\t\t}\n\t\t} else if (isDeclarationCoverage(a) && isDeclarationCoverage(b)) {\n\t\t\tswitch (order) {\n\t\t\t\tcase CoverageSortOrder.Location:\n\t\t\t\t\treturn Position.compare(\n\t\t\t\t\t\ta.location instanceof Range ? a.location.getStartPosition() : a.location,\n\t\t\t\t\t\tb.location instanceof Range ? b.location.getStartPosition() : b.location,\n\t\t\t\t\t);\n\t\t\t\tcase CoverageSortOrder.Name:\n\t\t\t\t\treturn a.label.localeCompare(b.label);\n\t\t\t\tcase CoverageSortOrder.Coverage: {\n\t\t\t\t\tconst attrA = a.tpc;\n\t\t\t\t\tconst attrB = b.tpc;\n\t\t\t\t\treturn (attrA !== undefined && attrB !== undefined && attrB - attrA)\n\t\t\t\t\t\t|| (+b.hits - +a.hits)\n\t\t\t\t\t\t|| a.label.localeCompare(b.label);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\ninterface FileTemplateData {\n\tcontainer: HTMLElement;\n\tbars: ManagedTestCoverageBars;\n\ttemplateDisposables: DisposableStore;\n\telementsDisposables: DisposableStore;\n\tlabel: IResourceLabel;\n}\n\nclass FileCoverageRenderer implements ICompressibleTreeRenderer<CoverageTreeElement, FuzzyScore, FileTemplateData> {\n\tpublic static readonly ID = 'F';\n\tpublic readonly templateId = FileCoverageRenderer.ID;\n\n\tconstructor(\n\t\tprivate readonly labels: ResourceLabels,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) { }\n\n\t/** @inheritdoc */\n\tpublic renderTemplate(container: HTMLElement): FileTemplateData {\n\t\tconst templateDisposables = new DisposableStore();\n\t\tcontainer.classList.add('test-coverage-list-item');\n\n\t\treturn {\n\t\t\tcontainer,\n\t\t\tbars: templateDisposables.add(this.instantiationService.createInstance(ManagedTestCoverageBars, { compact: false, container })),\n\t\t\tlabel: templateDisposables.add(this.labels.create(container, {\n\t\t\t\tsupportHighlights: true,\n\t\t\t})),\n\t\t\telementsDisposables: templateDisposables.add(new DisposableStore()),\n\t\t\ttemplateDisposables,\n\t\t};\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderElement(node: ITreeNode<CoverageTreeElement, FuzzyScore>, _index: number, templateData: FileTemplateData): void {\n\t\tthis.doRender(node.element as TestCoverageFileNode, templateData, node.filterData);\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderCompressedElements(node: ITreeNode<ICompressedTreeNode<CoverageTreeElement>, FuzzyScore>, _index: number, templateData: FileTemplateData): void {\n\t\tthis.doRender(node.element.elements, templateData, node.filterData);\n\t}\n\n\tpublic disposeTemplate(templateData: FileTemplateData) {\n\t\ttemplateData.templateDisposables.dispose();\n\t}\n\n\t/** @inheritdoc */\n\tprivate doRender(element: CoverageTreeElement | CoverageTreeElement[], templateData: FileTemplateData, filterData: FuzzyScore | undefined) {\n\t\ttemplateData.elementsDisposables.clear();\n\n\t\tconst stat = (element instanceof Array ? element[element.length - 1] : element) as TestCoverageFileNode;\n\t\tconst file = stat.value!;\n\t\tconst name = element instanceof Array ? element.map(e => basenameOrAuthority((e as TestCoverageFileNode).value!.uri)) : basenameOrAuthority(file.uri);\n\t\tif (file instanceof BypassedFileCoverage) {\n\t\t\ttemplateData.bars.setCoverageInfo(undefined);\n\t\t} else {\n\t\t\ttemplateData.elementsDisposables.add(autorun(reader => {\n\t\t\t\tstat.value?.didChange.read(reader);\n\t\t\t\ttemplateData.bars.setCoverageInfo(file);\n\t\t\t}));\n\n\t\t\ttemplateData.bars.setCoverageInfo(file);\n\t\t}\n\n\t\ttemplateData.label.setResource({ resource: file.uri, name }, {\n\t\t\tfileKind: stat.children?.size ? FileKind.FOLDER : FileKind.FILE,\n\t\t\tmatches: createMatches(filterData),\n\t\t\tseparator: this.labelService.getSeparator(file.uri.scheme, file.uri.authority),\n\t\t\textraClasses: ['test-coverage-list-item-label'],\n\t\t});\n\t}\n}\n\ninterface DeclarationTemplateData {\n\tcontainer: HTMLElement;\n\tbars: ManagedTestCoverageBars;\n\ttemplateDisposables: DisposableStore;\n\ticon: HTMLElement;\n\tlabel: HTMLElement;\n}\n\nclass DeclarationCoverageRenderer implements ICompressibleTreeRenderer<CoverageTreeElement, FuzzyScore, DeclarationTemplateData> {\n\tpublic static readonly ID = 'N';\n\tpublic readonly templateId = DeclarationCoverageRenderer.ID;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) { }\n\n\t/** @inheritdoc */\n\tpublic renderTemplate(container: HTMLElement): DeclarationTemplateData {\n\t\tconst templateDisposables = new DisposableStore();\n\t\tcontainer.classList.add('test-coverage-list-item');\n\t\tconst icon = dom.append(container, dom.$('.state'));\n\t\tconst label = dom.append(container, dom.$('.name'));\n\n\t\treturn {\n\t\t\tcontainer,\n\t\t\tbars: templateDisposables.add(this.instantiationService.createInstance(ManagedTestCoverageBars, { compact: false, container })),\n\t\t\ttemplateDisposables,\n\t\t\ticon,\n\t\t\tlabel,\n\t\t};\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderElement(node: ITreeNode<CoverageTreeElement, FuzzyScore>, _index: number, templateData: DeclarationTemplateData): void {\n\t\tthis.doRender(node.element as DeclarationCoverageNode, templateData, node.filterData);\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderCompressedElements(node: ITreeNode<ICompressedTreeNode<CoverageTreeElement>, FuzzyScore>, _index: number, templateData: DeclarationTemplateData): void {\n\t\tthis.doRender(node.element.elements[node.element.elements.length - 1] as DeclarationCoverageNode, templateData, node.filterData);\n\t}\n\n\tpublic disposeTemplate(templateData: DeclarationTemplateData) {\n\t\ttemplateData.templateDisposables.dispose();\n\t}\n\n\t/** @inheritdoc */\n\tprivate doRender(element: DeclarationCoverageNode, templateData: DeclarationTemplateData, _filterData: FuzzyScore | undefined) {\n\t\tconst covered = !!element.hits;\n\t\tconst icon = covered ? testingWasCovered : testingStatesToIcons.get(TestResultState.Unset);\n\t\ttemplateData.container.classList.toggle('not-covered', !covered);\n\t\ttemplateData.icon.className = `computed-state ${ThemeIcon.asClassName(icon!)}`;\n\t\ttemplateData.label.innerText = element.label;\n\t\ttemplateData.bars.setCoverageInfo(element.attributableCoverage());\n\t}\n}\n\nclass BasicRenderer implements ICompressibleTreeRenderer<CoverageTreeElement, FuzzyScore, HTMLElement> {\n\tpublic static readonly ID = 'B';\n\tpublic readonly templateId = BasicRenderer.ID;\n\n\trenderCompressedElements(node: ITreeNode<ICompressedTreeNode<CoverageTreeElement>, FuzzyScore>, _index: number, container: HTMLElement): void {\n\t\tthis.renderInner(node.element.elements[node.element.elements.length - 1], container);\n\t}\n\n\trenderTemplate(container: HTMLElement): HTMLElement {\n\t\treturn container;\n\t}\n\n\trenderElement(node: ITreeNode<CoverageTreeElement, FuzzyScore>, index: number, container: HTMLElement): void {\n\t\tthis.renderInner(node.element, container);\n\t}\n\n\tdisposeTemplate(): void {\n\t\t// no-op\n\t}\n\n\tprivate renderInner(element: CoverageTreeElement, container: HTMLElement) {\n\t\tcontainer.innerText = (element as RevealUncoveredDeclarations | LoadingDetails).label;\n\t}\n}\n\nclass TestCoverageIdentityProvider implements IIdentityProvider<CoverageTreeElement> {\n\tpublic getId(element: CoverageTreeElement) {\n\t\treturn isFileCoverage(element)\n\t\t\t? element.value!.uri.toString()\n\t\t\t: element.id;\n\t}\n}\n\nregisterAction2(class TestCoverageChangePerTestFilterAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageFilterToTest,\n\t\t\tcategory: Categories.Test,\n\t\t\ttitle: localize2('testing.changeCoverageFilter', 'Filter Coverage by Test'),\n\t\t\ticon: Codicon.filter,\n\t\t\ttoggled: {\n\t\t\t\ticon: Codicon.filterFilled,\n\t\t\t\tcondition: TestingContextKeys.isCoverageFilteredToTest,\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{ id: MenuId.CommandPalette, when: TestingContextKeys.hasPerTestCoverage },\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\twhen: ContextKeyExpr.and(TestingContextKeys.hasPerTestCoverage, ContextKeyExpr.equals('view', Testing.CoverageViewId)),\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t},\n\t\t\t]\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor): void {\n\t\tconst coverageService = accessor.get(ITestCoverageService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst coverage = coverageService.selected.get();\n\t\tif (!coverage) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tests = [...coverage.allPerTestIDs()].map(TestId.fromString);\n\t\tconst commonPrefix = TestId.getLengthOfCommonPrefix(tests.length, i => tests[i]);\n\t\tconst result = coverage.result;\n\t\tconst previousSelection = coverageService.filterToTest.get();\n\t\tconst previousSelectionStr = previousSelection?.toString();\n\n\t\ttype TItem = { label: string; testId?: TestId };\n\n\t\tconst items: QuickPickInput<TItem>[] = [\n\t\t\t{ label: coverUtils.labels.allTests, id: undefined },\n\t\t\t{ type: 'separator' },\n\t\t\t...tests.map(testId => ({ label: coverUtils.getLabelForItem(result, testId, commonPrefix), testId })),\n\t\t];\n\n\t\tquickInputService.pick(items, {\n\t\t\tactiveItem: items.find((item): item is TItem => 'testId' in item && item.testId?.toString() === previousSelectionStr),\n\t\t\tplaceHolder: coverUtils.labels.pickShowCoverage,\n\t\t\tonDidFocus: (entry) => {\n\t\t\t\tcoverageService.filterToTest.set(entry.testId, undefined);\n\t\t\t},\n\t\t}).then(selected => {\n\t\t\tcoverageService.filterToTest.set(selected ? selected.testId : previousSelection, undefined);\n\t\t});\n\t}\n});\n\nregisterAction2(class TestCoverageChangeSortingAction extends ViewAction<TestCoverageView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageViewChangeSorting,\n\t\t\tviewId: Testing.CoverageViewId,\n\t\t\ttitle: localize2('testing.changeCoverageSort', 'Change Sort Order'),\n\t\t\ticon: Codicon.sortPrecedence,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.CoverageViewId),\n\t\t\t\tgroup: 'navigation',\n\t\t\t}\n\t\t});\n\t}\n\n\toverride runInView(accessor: ServicesAccessor, view: TestCoverageView) {\n\t\ttype Item = IQuickPickItem & { value: CoverageSortOrder };\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickInput = disposables.add(accessor.get(IQuickInputService).createQuickPick<Item>());\n\t\tconst items: Item[] = [\n\t\t\t{ label: localize('testing.coverageSortByLocation', 'Sort by Location'), value: CoverageSortOrder.Location, description: localize('testing.coverageSortByLocationDescription', 'Files are sorted alphabetically, declarations are sorted by position') },\n\t\t\t{ label: localize('testing.coverageSortByCoverage', 'Sort by Coverage'), value: CoverageSortOrder.Coverage, description: localize('testing.coverageSortByCoverageDescription', 'Files and declarations are sorted by total coverage') },\n\t\t\t{ label: localize('testing.coverageSortByName', 'Sort by Name'), value: CoverageSortOrder.Name, description: localize('testing.coverageSortByNameDescription', 'Files and declarations are sorted alphabetically') },\n\t\t];\n\n\t\tquickInput.placeholder = localize('testing.coverageSortPlaceholder', 'Sort the Test Coverage view...');\n\t\tquickInput.items = items;\n\t\tquickInput.show();\n\t\tdisposables.add(quickInput.onDidHide(() => disposables.dispose()));\n\t\tdisposables.add(quickInput.onDidAccept(() => {\n\t\t\tconst picked = quickInput.selectedItems[0]?.value;\n\t\t\tif (picked !== undefined) {\n\t\t\t\tview.sortOrder.set(picked, undefined);\n\t\t\t\tquickInput.dispose();\n\t\t\t}\n\t\t}));\n\t}\n});\n"],
  "mappings": "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",
  "names": ["CoverageSortOrder", "count"]
}
