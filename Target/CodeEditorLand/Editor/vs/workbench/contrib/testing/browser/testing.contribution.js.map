{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testing.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../../editor/browser/editorExtensions.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { IViewContainersRegistry, IViewsRegistry, Extensions as ViewContainerExtensions, ViewContainerLocation } from '../../../common/views.js';\nimport { REVEAL_IN_EXPLORER_COMMAND_ID } from '../../files/browser/fileConstants.js';\nimport { CodeCoverageDecorations } from './codeCoverageDecorations.js';\nimport { testingResultsIcon, testingViewIcon } from './icons.js';\nimport { TestCoverageView } from './testCoverageView.js';\nimport { TestingDecorationService, TestingDecorations } from './testingDecorations.js';\nimport { TestingExplorerView } from './testingExplorerView.js';\nimport { CloseTestPeek, CollapsePeekStack, GoToNextMessageAction, GoToPreviousMessageAction, OpenMessageInEditorAction, TestResultsView, TestingOutputPeekController, TestingPeekOpener, ToggleTestingPeekHistory } from './testingOutputPeek.js';\nimport { TestingProgressTrigger } from './testingProgressUiService.js';\nimport { TestingViewPaneContainer } from './testingViewPaneContainer.js';\nimport { testingConfiguration } from '../common/configuration.js';\nimport { TestCommandId, Testing } from '../common/constants.js';\nimport { ITestCoverageService, TestCoverageService } from '../common/testCoverageService.js';\nimport { ITestExplorerFilterState, TestExplorerFilterState } from '../common/testExplorerFilterState.js';\nimport { TestId, TestPosition } from '../common/testId.js';\nimport { ITestProfileService, TestProfileService } from '../common/testProfileService.js';\nimport { ITestResultService, TestResultService } from '../common/testResultService.js';\nimport { ITestResultStorage, TestResultStorage } from '../common/testResultStorage.js';\nimport { ITestService } from '../common/testService.js';\nimport { TestService } from '../common/testServiceImpl.js';\nimport { ITestItem, TestRunProfileBitset } from '../common/testTypes.js';\nimport { TestingContentProvider } from '../common/testingContentProvider.js';\nimport { TestingContextKeys } from '../common/testingContextKeys.js';\nimport { ITestingContinuousRunService, TestingContinuousRunService } from '../common/testingContinuousRunService.js';\nimport { ITestingDecorationsService } from '../common/testingDecorations.js';\nimport { ITestingPeekOpener } from '../common/testingPeekOpener.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { allTestActions, discoverAndRunTests } from './testExplorerActions.js';\nimport './testingConfigurationUi.js';\n\nregisterSingleton(ITestService, TestService, InstantiationType.Delayed);\nregisterSingleton(ITestResultStorage, TestResultStorage, InstantiationType.Delayed);\nregisterSingleton(ITestProfileService, TestProfileService, InstantiationType.Delayed);\nregisterSingleton(ITestCoverageService, TestCoverageService, InstantiationType.Delayed);\nregisterSingleton(ITestingContinuousRunService, TestingContinuousRunService, InstantiationType.Delayed);\nregisterSingleton(ITestResultService, TestResultService, InstantiationType.Delayed);\nregisterSingleton(ITestExplorerFilterState, TestExplorerFilterState, InstantiationType.Delayed);\nregisterSingleton(ITestingPeekOpener, TestingPeekOpener, InstantiationType.Delayed);\nregisterSingleton(ITestingDecorationsService, TestingDecorationService, InstantiationType.Delayed);\n\nconst viewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({\n\tid: Testing.ViewletId,\n\ttitle: localize2('test', 'Testing'),\n\tctorDescriptor: new SyncDescriptor(TestingViewPaneContainer),\n\ticon: testingViewIcon,\n\talwaysUseContainerInfo: true,\n\torder: 6,\n\topenCommandActionDescriptor: {\n\t\tid: Testing.ViewletId,\n\t\tmnemonicTitle: localize({ key: 'miViewTesting', comment: ['&& denotes a mnemonic'] }, \"T&&esting\"),\n\t\t// todo: coordinate with joh whether this is available\n\t\t// keybindings: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_SEMICOLON },\n\t\torder: 4,\n\t},\n\thideIfEmpty: true,\n}, ViewContainerLocation.Sidebar);\n\n\nconst testResultsViewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({\n\tid: Testing.ResultsPanelId,\n\ttitle: localize2('testResultsPanelName', \"Test Results\"),\n\ticon: testingResultsIcon,\n\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [Testing.ResultsPanelId, { mergeViewWithContainerWhenSingleView: true }]),\n\thideIfEmpty: true,\n\torder: 3,\n}, ViewContainerLocation.Panel, { doNotRegisterOpenCommand: true });\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\n\n\nviewsRegistry.registerViews([{\n\tid: Testing.ResultsViewId,\n\tname: localize2('testResultsPanelName', \"Test Results\"),\n\tcontainerIcon: testingResultsIcon,\n\tcanToggleVisibility: false,\n\tcanMoveView: true,\n\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\tctorDescriptor: new SyncDescriptor(TestResultsView),\n}], testResultsViewContainer);\n\nviewsRegistry.registerViewWelcomeContent(Testing.ExplorerViewId, {\n\tcontent: localize('noTestProvidersRegistered', \"No tests have been found in this workspace yet.\"),\n});\n\nviewsRegistry.registerViewWelcomeContent(Testing.ExplorerViewId, {\n\tcontent: '[' + localize('searchForAdditionalTestExtensions', \"Install Additional Test Extensions...\") + `](command:${TestCommandId.SearchForTestExtension})`,\n\torder: 10\n});\n\nviewsRegistry.registerViews([{\n\tid: Testing.ExplorerViewId,\n\tname: localize2('testExplorer', \"Test Explorer\"),\n\tctorDescriptor: new SyncDescriptor(TestingExplorerView),\n\tcanToggleVisibility: true,\n\tcanMoveView: true,\n\tweight: 80,\n\torder: -999,\n\tcontainerIcon: testingViewIcon,\n\twhen: ContextKeyExpr.greater(TestingContextKeys.providerCount.key, 0),\n}, {\n\tid: Testing.CoverageViewId,\n\tname: localize2('testCoverage', \"Test Coverage\"),\n\tctorDescriptor: new SyncDescriptor(TestCoverageView),\n\tcanToggleVisibility: true,\n\tcanMoveView: true,\n\tweight: 80,\n\torder: -998,\n\tcontainerIcon: testingViewIcon,\n\twhen: TestingContextKeys.isTestCoverageOpen,\n}], viewContainer);\n\nallTestActions.forEach(registerAction2);\nregisterAction2(OpenMessageInEditorAction);\nregisterAction2(GoToPreviousMessageAction);\nregisterAction2(GoToNextMessageAction);\nregisterAction2(CloseTestPeek);\nregisterAction2(ToggleTestingPeekHistory);\nregisterAction2(CollapsePeekStack);\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(TestingContentProvider, LifecyclePhase.Restored);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(TestingPeekOpener, LifecyclePhase.Eventually);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(TestingProgressTrigger, LifecyclePhase.Eventually);\n\nregisterEditorContribution(Testing.OutputPeekContributionId, TestingOutputPeekController, EditorContributionInstantiation.AfterFirstRender);\nregisterEditorContribution(Testing.DecorationsContributionId, TestingDecorations, EditorContributionInstantiation.AfterFirstRender);\nregisterEditorContribution(Testing.CoverageDecorationsContributionId, CodeCoverageDecorations, EditorContributionInstantiation.Eventually);\n\nCommandsRegistry.registerCommand({\n\tid: '_revealTestInExplorer',\n\thandler: async (accessor: ServicesAccessor, testId: string | ITestItem, focus?: boolean) => {\n\t\taccessor.get(ITestExplorerFilterState).reveal.value = typeof testId === 'string' ? testId : testId.extId;\n\t\taccessor.get(IViewsService).openView(Testing.ExplorerViewId, focus);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.peekTestError',\n\thandler: async (accessor: ServicesAccessor, extId: string) => {\n\t\tconst lookup = accessor.get(ITestResultService).getStateById(extId);\n\t\tif (!lookup) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [result, ownState] = lookup;\n\t\tconst opener = accessor.get(ITestingPeekOpener);\n\t\tif (opener.tryPeekFirstError(result, ownState)) { // fast path\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (const test of result.tests) {\n\t\t\tif (TestId.compare(ownState.item.extId, test.item.extId) === TestPosition.IsChild && opener.tryPeekFirstError(result, test)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.revealTest',\n\thandler: async (accessor: ServicesAccessor, extId: string) => {\n\t\tconst test = accessor.get(ITestService).collection.getNodeById(extId);\n\t\tif (!test) {\n\t\t\treturn;\n\t\t}\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst openerService = accessor.get(IOpenerService);\n\n\t\tconst { range, uri } = test.item;\n\t\tif (!uri) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If an editor has the file open, there are decorations. Try to adjust the\n\t\t// revealed range to those decorations (#133441).\n\t\tconst position = accessor.get(ITestingDecorationsService).getDecoratedTestPosition(uri, extId) || range?.getStartPosition();\n\n\t\taccessor.get(ITestExplorerFilterState).reveal.value = extId;\n\t\taccessor.get(ITestingPeekOpener).closeAllPeeks();\n\n\t\tlet isFile = true;\n\t\ttry {\n\t\t\tif (!(await fileService.stat(uri)).isFile) {\n\t\t\t\tisFile = false;\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignored\n\t\t}\n\n\t\tif (!isFile) {\n\t\t\tawait commandService.executeCommand(REVEAL_IN_EXPLORER_COMMAND_ID, uri);\n\t\t\treturn;\n\t\t}\n\n\t\tawait openerService.open(position\n\t\t\t? uri.with({ fragment: `L${position.lineNumber}:${position.column}` })\n\t\t\t: uri\n\t\t);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.runTestsById',\n\thandler: async (accessor: ServicesAccessor, group: TestRunProfileBitset, ...testIds: string[]) => {\n\t\tconst testService = accessor.get(ITestService);\n\t\tawait discoverAndRunTests(\n\t\t\taccessor.get(ITestService).collection,\n\t\t\taccessor.get(IProgressService),\n\t\t\ttestIds,\n\t\t\ttests => testService.runTests({ group, tests }),\n\t\t);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.testing.getControllersWithTests',\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst testService = accessor.get(ITestService);\n\t\treturn [...testService.collection.rootItems]\n\t\t\t.filter(r => r.children.size > 0)\n\t\t\t.map(r => r.controllerId);\n\t}\n});\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration(testingConfiguration);\n\n"],
  "mappings": "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",
  "names": []
}
