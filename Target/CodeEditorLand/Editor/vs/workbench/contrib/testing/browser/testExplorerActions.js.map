{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testExplorerActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport { KeyChord, KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tIActiveCodeEditor,\n\tICodeEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { EmbeddedCodeEditorWidget } from \"../../../../editor/browser/widget/codeEditor/embeddedCodeEditorWidget.js\";\nimport {\n\tEditorOption,\n\ttype GoToLocationValues,\n} from \"../../../../editor/common/config/editorOptions.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { SymbolNavigationAction } from \"../../../../editor/contrib/gotoSymbol/browser/goToCommands.js\";\nimport { ReferencesModel } from \"../../../../editor/contrib/gotoSymbol/browser/referencesModel.js\";\nimport { MessageController } from \"../../../../editor/contrib/message/browser/messageController.js\";\nimport { PeekContext } from \"../../../../editor/contrib/peekView/browser/peekView.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\ttype IAction2Options,\n\tMenuId,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\ttype ContextKeyExpression,\n\tContextKeyGreaterExpr,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickSeparator,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { widgetClose } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { ViewAction } from \"../../../browser/parts/views/viewPane.js\";\nimport { FocusedViewContext } from \"../../../common/contextkeys.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { IExtensionsWorkbenchService } from \"../../extensions/common/extensions.js\";\nimport {\n\tTestingConfigKeys,\n\tgetTestingConfiguration,\n} from \"../common/configuration.js\";\nimport {\n\tTestCommandId,\n\tTestExplorerViewMode,\n\tTestExplorerViewSorting,\n\tTesting,\n\ttestConfigurationGroupNames,\n} from \"../common/constants.js\";\nimport { ITestCoverageService } from \"../common/testCoverageService.js\";\nimport { TestId } from \"../common/testId.js\";\nimport {\n\tITestProfileService,\n\tcanUseProfileWithTest,\n} from \"../common/testProfileService.js\";\nimport type { ITestResult } from \"../common/testResult.js\";\nimport { ITestResultService } from \"../common/testResultService.js\";\nimport {\n\ttype IMainThreadTestCollection,\n\ttype IMainThreadTestController,\n\tITestService,\n\texpandAndGetTestById,\n\ttestsInFile,\n\ttestsUnderUri,\n} from \"../common/testService.js\";\nimport {\n\tExtTestRunProfileKind,\n\ttype ITestRunProfile,\n\ttype InternalTestItem,\n\tTestItemExpandState,\n\tTestRunProfileBitset,\n} from \"../common/testTypes.js\";\nimport { TestingContextKeys } from \"../common/testingContextKeys.js\";\nimport { ITestingContinuousRunService } from \"../common/testingContinuousRunService.js\";\nimport { ITestingPeekOpener } from \"../common/testingPeekOpener.js\";\nimport { isFailedState } from \"../common/testingStates.js\";\nimport {\n\ttype TestExplorerTreeElement,\n\tTestItemTreeElement,\n} from \"./explorerProjections/index.js\";\nimport * as icons from \"./icons.js\";\nimport type { TestingExplorerView } from \"./testingExplorerView.js\";\nimport type { TestResultsView } from \"./testingOutputPeek.js\";\n\nconst category = Categories.Test;\n\nenum ActionOrder {\n\t// Navigation:\n\tRefresh = 10,\n\tRun = 11,\n\tDebug = 12,\n\tCoverage = 13,\n\tRunContinuous = 14,\n\tRunUsing = 15,\n\n\t// Submenu:\n\tCollapse = 16,\n\tClearResults = 17,\n\tDisplayMode = 18,\n\tSort = 19,\n\tGoToTest = 20,\n\tHideTest = 21,\n\tContinuousRunTest = -1 >>> 1, // max int, always at the end to avoid shifting on hover\n}\n\nconst hasAnyTestProvider = ContextKeyGreaterExpr.create(\n\tTestingContextKeys.providerCount.key,\n\t0,\n);\n\nconst LABEL_RUN_TESTS = localize2(\"runSelectedTests\", \"Run Tests\");\nconst LABEL_DEBUG_TESTS = localize2(\"debugSelectedTests\", \"Debug Tests\");\nconst LABEL_COVERAGE_TESTS = localize2(\n\t\"coverageSelectedTests\",\n\t\"Run Tests with Coverage\",\n);\n\nexport class HideTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.HideTestAction,\n\t\t\ttitle: localize2(\"hideTest\", \"Hide Test\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\tgroup: \"builtin@2\",\n\t\t\t\twhen: TestingContextKeys.testItemIsHidden.isEqualTo(false),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override run(\n\t\taccessor: ServicesAccessor,\n\t\t...elements: TestItemTreeElement[]\n\t) {\n\t\tconst service = accessor.get(ITestService);\n\t\tfor (const element of elements) {\n\t\t\tservice.excluded.toggle(element.test, true);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class UnhideTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.UnhideTestAction,\n\t\t\ttitle: localize2(\"unhideTest\", \"Unhide Test\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\torder: ActionOrder.HideTest,\n\t\t\t\twhen: TestingContextKeys.testItemIsHidden.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override run(\n\t\taccessor: ServicesAccessor,\n\t\t...elements: InternalTestItem[]\n\t) {\n\t\tconst service = accessor.get(ITestService);\n\t\tfor (const element of elements) {\n\t\t\tif (element instanceof TestItemTreeElement) {\n\t\t\t\tservice.excluded.toggle(element.test, false);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class UnhideAllTestsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.UnhideAllTestsAction,\n\t\t\ttitle: localize2(\"unhideAllTests\", \"Unhide All Tests\"),\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst service = accessor.get(ITestService);\n\t\tservice.excluded.clear();\n\t\treturn Promise.resolve();\n\t}\n}\n\nconst testItemInlineAndInContext = (\n\torder: ActionOrder,\n\twhen?: ContextKeyExpression,\n) => [\n\t{\n\t\tid: MenuId.TestItem,\n\t\tgroup: \"inline\",\n\t\torder,\n\t\twhen,\n\t},\n\t{\n\t\tid: MenuId.TestItem,\n\t\tgroup: \"builtin@1\",\n\t\torder,\n\t\twhen,\n\t},\n];\n\nabstract class RunVisibleAction extends ViewAction<TestingExplorerView> {\n\tconstructor(\n\t\tprivate readonly bitset: TestRunProfileBitset,\n\t\tdesc: Readonly<IAction2Options>,\n\t) {\n\t\tsuper({\n\t\t\t...desc,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(\n\t\taccessor: ServicesAccessor,\n\t\tview: TestingExplorerView,\n\t\t...elements: TestItemTreeElement[]\n\t): Promise<unknown> {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude(\n\t\t\telements.map((e) => e.test),\n\t\t);\n\t\treturn accessor.get(ITestService).runTests({\n\t\t\ttests: include,\n\t\t\texclude,\n\t\t\tgroup: this.bitset,\n\t\t});\n\t}\n}\n\nexport class DebugAction extends RunVisibleAction {\n\tconstructor() {\n\t\tsuper(TestRunProfileBitset.Debug, {\n\t\t\tid: TestCommandId.DebugAction,\n\t\t\ttitle: localize2(\"debug test\", \"Debug Test\"),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: testItemInlineAndInContext(\n\t\t\t\tActionOrder.Debug,\n\t\t\t\tTestingContextKeys.hasDebuggableTests.isEqualTo(true),\n\t\t\t),\n\t\t});\n\t}\n}\n\nexport class CoverageAction extends RunVisibleAction {\n\tconstructor() {\n\t\tsuper(TestRunProfileBitset.Coverage, {\n\t\t\tid: TestCommandId.RunWithCoverageAction,\n\t\t\ttitle: localize2(\"run with cover test\", \"Run Test with Coverage\"),\n\t\t\ticon: icons.testingCoverageIcon,\n\t\t\tmenu: testItemInlineAndInContext(\n\t\t\t\tActionOrder.Coverage,\n\t\t\t\tTestingContextKeys.hasCoverableTests.isEqualTo(true),\n\t\t\t),\n\t\t});\n\t}\n}\n\nexport class RunUsingProfileAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunUsingProfileAction,\n\t\t\ttitle: localize2(\"testing.runUsing\", \"Execute Using Profile...\"),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\torder: ActionOrder.RunUsing,\n\t\t\t\tgroup: \"builtin@2\",\n\t\t\t\twhen: TestingContextKeys.hasNonDefaultProfile.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(\n\t\tacessor: ServicesAccessor,\n\t\t...elements: TestItemTreeElement[]\n\t): Promise<any> {\n\t\tconst commandService = acessor.get(ICommandService);\n\t\tconst testService = acessor.get(ITestService);\n\t\tconst profile: ITestRunProfile | undefined =\n\t\t\tawait commandService.executeCommand(\"vscode.pickTestProfile\", {\n\t\t\t\tonlyForTest: elements[0].test,\n\t\t\t});\n\t\tif (!profile) {\n\t\t\treturn;\n\t\t}\n\n\t\ttestService.runResolvedTests({\n\t\t\tgroup: profile.group,\n\t\t\ttargets: [\n\t\t\t\t{\n\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\ttestIds: elements\n\t\t\t\t\t\t.filter((t) => canUseProfileWithTest(profile, t.test))\n\t\t\t\t\t\t.map((t) => t.test.item.extId),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n}\n\nexport class RunAction extends RunVisibleAction {\n\tconstructor() {\n\t\tsuper(TestRunProfileBitset.Run, {\n\t\t\tid: TestCommandId.RunAction,\n\t\t\ttitle: localize2(\"run test\", \"Run Test\"),\n\t\t\ticon: icons.testingRunIcon,\n\t\t\tmenu: testItemInlineAndInContext(\n\t\t\t\tActionOrder.Run,\n\t\t\t\tTestingContextKeys.hasRunnableTests.isEqualTo(true),\n\t\t\t),\n\t\t});\n\t}\n}\n\nexport class SelectDefaultTestProfiles extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.SelectDefaultTestProfiles,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.selectDefaultTestProfiles\",\n\t\t\t\t\"Select Default Profile\",\n\t\t\t),\n\t\t\ticon: icons.testingUpdateProfiles,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tpublic override async run(\n\t\tacessor: ServicesAccessor,\n\t\tonlyGroup: TestRunProfileBitset,\n\t) {\n\t\tconst commands = acessor.get(ICommandService);\n\t\tconst testProfileService = acessor.get(ITestProfileService);\n\t\tconst profiles = await commands.executeCommand<ITestRunProfile[]>(\n\t\t\t\"vscode.pickMultipleTestProfiles\",\n\t\t\t{\n\t\t\t\tshowConfigureButtons: false,\n\t\t\t\tselected: testProfileService.getGroupDefaultProfiles(onlyGroup),\n\t\t\t\tonlyGroup,\n\t\t\t},\n\t\t);\n\n\t\tif (profiles?.length) {\n\t\t\ttestProfileService.setGroupDefaultProfiles(onlyGroup, profiles);\n\t\t}\n\t}\n}\n\nexport class ContinuousRunTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ToggleContinousRunForTest,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.toggleContinuousRunOn\",\n\t\t\t\t\"Turn on Continuous Run\",\n\t\t\t),\n\t\t\ticon: icons.testingTurnContinuousRunOn,\n\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(true),\n\t\t\t\tTestingContextKeys.isParentRunningContinuously.isEqualTo(false),\n\t\t\t),\n\t\t\ttoggled: {\n\t\t\t\tcondition:\n\t\t\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(true),\n\t\t\t\ticon: icons.testingContinuousIsOn,\n\t\t\t\ttitle: localize(\n\t\t\t\t\t\"testing.toggleContinuousRunOff\",\n\t\t\t\t\t\"Turn off Continuous Run\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tmenu: testItemInlineAndInContext(\n\t\t\t\tActionOrder.ContinuousRunTest,\n\t\t\t\tTestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t\t\t),\n\t\t});\n\t}\n\n\tpublic override async run(\n\t\taccessor: ServicesAccessor,\n\t\t...elements: TestItemTreeElement[]\n\t): Promise<any> {\n\t\tconst crService = accessor.get(ITestingContinuousRunService);\n\t\tfor (const element of elements) {\n\t\t\tconst id = element.test.item.extId;\n\t\t\tif (crService.isSpecificallyEnabledFor(id)) {\n\t\t\t\tcrService.stop(id);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcrService.start(TestRunProfileBitset.Run, id);\n\t\t}\n\t}\n}\n\nexport class ContinuousRunUsingProfileTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ContinousRunUsingForTest,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.startContinuousRunUsing\",\n\t\t\t\t\"Start Continous Run Using...\",\n\t\t\t),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.TestItem,\n\t\t\t\t\torder: ActionOrder.RunContinuous,\n\t\t\t\t\tgroup: \"builtin@2\",\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tTestingContextKeys.supportsContinuousRun.isEqualTo(\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(false),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic override async run(\n\t\taccessor: ServicesAccessor,\n\t\t...elements: TestItemTreeElement[]\n\t): Promise<any> {\n\t\tconst crService = accessor.get(ITestingContinuousRunService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tfor (const element of elements) {\n\t\t\tconst selected = await selectContinuousRunProfiles(\n\t\t\t\tcrService,\n\t\t\t\tnotificationService,\n\t\t\t\tquickInputService,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tprofiles: profileService.getControllerProfiles(\n\t\t\t\t\t\t\telement.test.controllerId,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t);\n\n\t\t\tif (selected.length) {\n\t\t\t\tcrService.start(selected, element.test.item.extId);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ConfigureTestProfilesAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ConfigureTestProfilesAction,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.configureProfile\",\n\t\t\t\t\"Configure Test Profiles\",\n\t\t\t),\n\t\t\ticon: icons.testingUpdateProfiles,\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasConfigurableProfile.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(\n\t\tacessor: ServicesAccessor,\n\t\tonlyGroup?: TestRunProfileBitset,\n\t) {\n\t\tconst commands = acessor.get(ICommandService);\n\t\tconst testProfileService = acessor.get(ITestProfileService);\n\t\tconst profile = await commands.executeCommand<ITestRunProfile>(\n\t\t\t\"vscode.pickTestProfile\",\n\t\t\t{\n\t\t\t\tplaceholder: localize(\n\t\t\t\t\t\"configureProfile\",\n\t\t\t\t\t\"Select a profile to update\",\n\t\t\t\t),\n\t\t\t\tshowConfigureButtons: false,\n\t\t\t\tonlyConfigurable: true,\n\t\t\t\tonlyGroup,\n\t\t\t},\n\t\t);\n\n\t\tif (profile) {\n\t\t\ttestProfileService.configure(\n\t\t\t\tprofile.controllerId,\n\t\t\t\tprofile.profileId,\n\t\t\t);\n\t\t}\n\t}\n}\n\nconst continuousMenus = (\n\twhenIsContinuousOn: boolean,\n): IAction2Options[\"menu\"] => [\n\t{\n\t\tid: MenuId.ViewTitle,\n\t\tgroup: \"navigation\",\n\t\torder: ActionOrder.RunUsing,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\tTestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(whenIsContinuousOn),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.CommandPalette,\n\t\twhen: TestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t},\n];\n\nclass StopContinuousRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.StopContinousRun,\n\t\t\ttitle: localize2(\"testing.stopContinuous\", \"Stop Continuous Run\"),\n\t\t\tcategory,\n\t\t\ticon: icons.testingTurnContinuousRunOff,\n\t\t\tmenu: continuousMenus(true),\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(ITestingContinuousRunService).stop();\n\t}\n}\n\nfunction selectContinuousRunProfiles(\n\tcrs: ITestingContinuousRunService,\n\tnotificationService: INotificationService,\n\tquickInputService: IQuickInputService,\n\tprofilesToPickFrom: Iterable<\n\t\tReadonly<{\n\t\t\tcontroller?: IMainThreadTestController;\n\t\t\tprofiles: ITestRunProfile[];\n\t\t}>\n\t>,\n): Promise<ITestRunProfile[]> {\n\ttype ItemType = IQuickPickItem & { profile: ITestRunProfile };\n\n\tconst items: ItemType[] = [];\n\tfor (const { controller, profiles } of profilesToPickFrom) {\n\t\tfor (const profile of profiles) {\n\t\t\tif (profile.supportsContinuousRun) {\n\t\t\t\titems.push({\n\t\t\t\t\tlabel: profile.label || controller?.label.get() || \"\",\n\t\t\t\t\tdescription: controller?.label.get(),\n\t\t\t\t\tprofile,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (items.length === 0) {\n\t\tnotificationService.info(\n\t\t\tlocalize(\n\t\t\t\t\"testing.noProfiles\",\n\t\t\t\t\"No test continuous run-enabled profiles were found\",\n\t\t\t),\n\t\t);\n\t\treturn Promise.resolve([]);\n\t}\n\n\t// special case: don't bother to quick a pickpick if there's only a single profile\n\tif (items.length === 1) {\n\t\treturn Promise.resolve([items[0].profile]);\n\t}\n\n\tconst qpItems: (ItemType | IQuickPickSeparator)[] = [];\n\tconst selectedItems: ItemType[] = [];\n\tconst lastRun = crs.lastRunProfileIds;\n\n\titems.sort(\n\t\t(a, b) =>\n\t\t\ta.profile.group - b.profile.group ||\n\t\t\ta.profile.controllerId.localeCompare(b.profile.controllerId) ||\n\t\t\ta.label.localeCompare(b.label),\n\t);\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst item = items[i];\n\t\tif (i === 0 || items[i - 1].profile.group !== item.profile.group) {\n\t\t\tqpItems.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: testConfigurationGroupNames[item.profile.group],\n\t\t\t});\n\t\t}\n\n\t\tqpItems.push(item);\n\t\tif (lastRun.has(item.profile.profileId)) {\n\t\t\tselectedItems.push(item);\n\t\t}\n\t}\n\n\tconst disposables = new DisposableStore();\n\tconst quickpick = disposables.add(\n\t\tquickInputService.createQuickPick<\n\t\t\tIQuickPickItem & { profile: ITestRunProfile }\n\t\t>({ useSeparators: true }),\n\t);\n\tquickpick.title = localize(\n\t\t\"testing.selectContinuousProfiles\",\n\t\t\"Select profiles to run when files change:\",\n\t);\n\tquickpick.canSelectMany = true;\n\tquickpick.items = qpItems;\n\tquickpick.selectedItems = selectedItems;\n\tquickpick.show();\n\treturn new Promise((resolve) => {\n\t\tdisposables.add(\n\t\t\tquickpick.onDidAccept(() => {\n\t\t\t\tresolve(quickpick.selectedItems.map((i) => i.profile));\n\t\t\t\tdisposables.dispose();\n\t\t\t}),\n\t\t);\n\n\t\tdisposables.add(\n\t\t\tquickpick.onDidHide(() => {\n\t\t\t\tresolve([]);\n\t\t\t\tdisposables.dispose();\n\t\t\t}),\n\t\t);\n\t});\n}\n\nclass StartContinuousRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.StartContinousRun,\n\t\t\ttitle: localize2(\"testing.startContinuous\", \"Start Continuous Run\"),\n\t\t\tcategory,\n\t\t\ticon: icons.testingTurnContinuousRunOn,\n\t\t\tmenu: continuousMenus(false),\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, ...args: any[]): Promise<void> {\n\t\tconst crs = accessor.get(ITestingContinuousRunService);\n\t\tconst selected = await selectContinuousRunProfiles(\n\t\t\tcrs,\n\t\t\taccessor.get(INotificationService),\n\t\t\taccessor.get(IQuickInputService),\n\t\t\taccessor.get(ITestProfileService).all(),\n\t\t);\n\t\tif (selected.length) {\n\t\t\tcrs.start(selected);\n\t\t}\n\t}\n}\n\nabstract class ExecuteSelectedAction extends ViewAction<TestingExplorerView> {\n\tconstructor(\n\t\toptions: IAction2Options,\n\t\tprivate readonly group: TestRunProfileBitset,\n\t) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\torder:\n\t\t\t\t\t\tgroup === TestRunProfileBitset.Run\n\t\t\t\t\t\t\t? ActionOrder.Run\n\t\t\t\t\t\t\t: group === TestRunProfileBitset.Debug\n\t\t\t\t\t\t\t\t? ActionOrder.Debug\n\t\t\t\t\t\t\t\t: ActionOrder.Coverage,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t\t\t\tTestingContextKeys.isRunning.isEqualTo(false),\n\t\t\t\t\t\tTestingContextKeys.capabilityToContextKey[\n\t\t\t\t\t\t\tgroup\n\t\t\t\t\t\t].isEqualTo(true),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t\tcategory,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(\n\t\taccessor: ServicesAccessor,\n\t\tview: TestingExplorerView,\n\t): Promise<ITestResult | undefined> {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude();\n\t\treturn accessor\n\t\t\t.get(ITestService)\n\t\t\t.runTests({ tests: include, exclude, group: this.group });\n\t}\n}\n\nexport class GetSelectedProfiles extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.GetSelectedProfiles,\n\t\t\ttitle: localize2(\"getSelectedProfiles\", \"Get Selected Profiles\"),\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst profiles = accessor.get(ITestProfileService);\n\t\treturn [\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Run),\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Debug),\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Coverage),\n\t\t].map((p) => ({\n\t\t\tcontrollerId: p.controllerId,\n\t\t\tlabel: p.label,\n\t\t\tkind:\n\t\t\t\tp.group & TestRunProfileBitset.Coverage\n\t\t\t\t\t? ExtTestRunProfileKind.Coverage\n\t\t\t\t\t: p.group & TestRunProfileBitset.Debug\n\t\t\t\t\t\t? ExtTestRunProfileKind.Debug\n\t\t\t\t\t\t: ExtTestRunProfileKind.Run,\n\t\t}));\n\t}\n}\n\nexport class GetExplorerSelection extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.GetExplorerSelection,\n\t\t\ttitle: localize2(\"getExplorerSelection\", \"Get Explorer Selection\"),\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override runInView(\n\t\t_accessor: ServicesAccessor,\n\t\tview: TestingExplorerView,\n\t) {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude(\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t\"selected\",\n\t\t);\n\t\tconst mapper = (i: InternalTestItem) => i.item.extId;\n\t\treturn { include: include.map(mapper), exclude: exclude.map(mapper) };\n\t}\n}\n\nexport class RunSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunSelectedAction,\n\t\t\t\ttitle: LABEL_RUN_TESTS,\n\t\t\t\ticon: icons.testingRunAllIcon,\n\t\t\t},\n\t\t\tTestRunProfileBitset.Run,\n\t\t);\n\t}\n}\n\nexport class DebugSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.DebugSelectedAction,\n\t\t\t\ttitle: LABEL_DEBUG_TESTS,\n\t\t\t\ticon: icons.testingDebugAllIcon,\n\t\t\t},\n\t\t\tTestRunProfileBitset.Debug,\n\t\t);\n\t}\n}\n\nexport class CoverageSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.CoverageSelectedAction,\n\t\t\t\ttitle: LABEL_COVERAGE_TESTS,\n\t\t\t\ticon: icons.testingCoverageAllIcon,\n\t\t\t},\n\t\t\tTestRunProfileBitset.Coverage,\n\t\t);\n\t}\n}\n\nconst showDiscoveringWhile = <R>(\n\tprogress: IProgressService,\n\ttask: Promise<R>,\n): Promise<R> => {\n\treturn progress.withProgress(\n\t\t{\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize(\"discoveringTests\", \"Discovering Tests\"),\n\t\t},\n\t\t() => task,\n\t);\n};\n\nabstract class RunOrDebugAllTestsAction extends Action2 {\n\tconstructor(\n\t\toptions: IAction2Options,\n\t\tprivate readonly group: TestRunProfileBitset,\n\t\tprivate noTestsFoundError: string,\n\t) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tcategory,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[\n\t\t\t\t\t\tgroup\n\t\t\t\t\t].isEqualTo(true),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst notifications = accessor.get(INotificationService);\n\n\t\tconst roots = [...testService.collection.rootItems].filter(\n\t\t\t(r) =>\n\t\t\t\tr.children.size ||\n\t\t\t\tr.expand === TestItemExpandState.Expandable ||\n\t\t\t\tr.expand === TestItemExpandState.BusyExpanding,\n\t\t);\n\t\tif (!roots.length) {\n\t\t\tnotifications.info(this.noTestsFoundError);\n\t\t\treturn;\n\t\t}\n\n\t\tawait testService.runTests({ tests: roots, group: this.group });\n\t}\n}\n\nexport class RunAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunAllAction,\n\t\t\t\ttitle: localize2(\"runAllTests\", \"Run All Tests\"),\n\t\t\t\ticon: icons.testingRunAllIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyCode.KeyA,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Run,\n\t\t\tlocalize(\n\t\t\t\t\"noTestProvider\",\n\t\t\t\t\"No tests found in this workspace. You may need to install a test provider extension\",\n\t\t\t),\n\t\t);\n\t}\n}\n\nexport class DebugAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.DebugAllAction,\n\t\t\t\ttitle: localize2(\"debugAllTests\", \"Debug All Tests\"),\n\t\t\t\ticon: icons.testingDebugIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyA,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Debug,\n\t\t\tlocalize(\n\t\t\t\t\"noDebugTestProvider\",\n\t\t\t\t\"No debuggable tests found in this workspace. You may need to install a test provider extension\",\n\t\t\t),\n\t\t);\n\t}\n}\n\nexport class CoverageAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunAllWithCoverageAction,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"runAllWithCoverage\",\n\t\t\t\t\t\"Run All Tests with Coverage\",\n\t\t\t\t),\n\t\t\t\ticon: icons.testingCoverageIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Coverage,\n\t\t\tlocalize(\n\t\t\t\t\"noCoverageTestProvider\",\n\t\t\t\t\"No tests with coverage runners found in this workspace. You may need to install a test provider extension\",\n\t\t\t),\n\t\t);\n\t}\n}\n\nexport class CancelTestRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CancelTestRunAction,\n\t\t\ttitle: localize2(\"testing.cancelRun\", \"Cancel Test Run\"),\n\t\t\ticon: icons.testingCancelIcon,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyX,\n\t\t\t\t),\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\torder: ActionOrder.Run,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\tTestingContextKeys.isRunning.serialize(),\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async run(\n\t\taccessor: ServicesAccessor,\n\t\tresultId?: string,\n\t\ttaskId?: string,\n\t) {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst testService = accessor.get(ITestService);\n\t\tif (resultId) {\n\t\t\ttestService.cancelTestRun(resultId, taskId);\n\t\t} else {\n\t\t\tfor (const run of resultService.results) {\n\t\t\t\tif (!run.completedAt) {\n\t\t\t\t\ttestService.cancelTestRun(run.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class TestingViewAsListAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingViewAsListAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2(\"testing.viewAsList\", \"View as List\"),\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(\n\t\t\t\tTestExplorerViewMode.List,\n\t\t\t),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: \"viewAs\",\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.List;\n\t}\n}\n\nexport class TestingViewAsTreeAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingViewAsTreeAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2(\"testing.viewAsTree\", \"View as Tree\"),\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(\n\t\t\t\tTestExplorerViewMode.Tree,\n\t\t\t),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: \"viewAs\",\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.Tree;\n\t}\n}\n\nexport class TestingSortByStatusAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByStatusAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2(\"testing.sortByStatus\", \"Sort by Status\"),\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(\n\t\t\t\tTestExplorerViewSorting.ByStatus,\n\t\t\t),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: \"sortBy\",\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByStatus;\n\t}\n}\n\nexport class TestingSortByLocationAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByLocationAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2(\"testing.sortByLocation\", \"Sort by Location\"),\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(\n\t\t\t\tTestExplorerViewSorting.ByLocation,\n\t\t\t),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: \"sortBy\",\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByLocation;\n\t}\n}\n\nexport class TestingSortByDurationAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByDurationAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2(\"testing.sortByDuration\", \"Sort by Duration\"),\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(\n\t\t\t\tTestExplorerViewSorting.ByDuration,\n\t\t\t),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: \"sortBy\",\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByDuration;\n\t}\n}\n\nexport class ShowMostRecentOutputAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ShowMostRecentOutputAction,\n\t\t\ttitle: localize2(\"testing.showMostRecentOutput\", \"Show Output\"),\n\t\t\tcategory,\n\t\t\ticon: Codicon.terminal,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyO,\n\t\t\t\t),\n\t\t\t},\n\t\t\tprecondition: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst viewService = accessor.get(IViewsService);\n\t\tconst testView = await viewService.openView<TestResultsView>(\n\t\t\tTesting.ResultsViewId,\n\t\t\ttrue,\n\t\t);\n\t\ttestView?.showLatestRun();\n\t}\n}\n\nexport class CollapseAllAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CollapseAllAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2(\"testing.collapseAll\", \"Collapse All Tests\"),\n\t\t\ticon: Codicon.collapseAll,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\tgroup: \"displayAction\",\n\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.collapseAll();\n\t}\n}\n\nexport class ClearTestResultsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ClearTestResultsAction,\n\t\t\ttitle: localize2(\"testing.clearResults\", \"Clear All Results\"),\n\t\t\tcategory,\n\t\t\ticon: Codicon.clearAll,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.TestPeekTitle,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\torder: ActionOrder.ClearResults,\n\t\t\t\t\tgroup: \"displayAction\",\n\t\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\torder: ActionOrder.ClearResults,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.ResultsViewId),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestResultService).clear();\n\t}\n}\n\nexport class GoToTest extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.GoToTest,\n\t\t\ttitle: localize2(\"testing.editFocusedTest\", \"Go to Test\"),\n\t\t\ticon: Codicon.goToFile,\n\t\t\tmenu: testItemInlineAndInContext(\n\t\t\t\tActionOrder.GoToTest,\n\t\t\t\tTestingContextKeys.testItemHasUri.isEqualTo(true),\n\t\t\t),\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib - 10,\n\t\t\t\twhen: FocusedViewContext.isEqualTo(Testing.ExplorerViewId),\n\t\t\t\tprimary: KeyCode.Enter | KeyMod.Alt,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(\n\t\taccessor: ServicesAccessor,\n\t\telement?: TestExplorerTreeElement,\n\t\tpreserveFocus?: boolean,\n\t) {\n\t\tif (!element) {\n\t\t\tconst view = accessor\n\t\t\t\t.get(IViewsService)\n\t\t\t\t.getActiveViewWithId<TestingExplorerView>(\n\t\t\t\t\tTesting.ExplorerViewId,\n\t\t\t\t);\n\t\t\telement = view?.focusedTreeElements[0];\n\t\t}\n\n\t\tif (element && element instanceof TestItemTreeElement) {\n\t\t\taccessor\n\t\t\t\t.get(ICommandService)\n\t\t\t\t.executeCommand(\n\t\t\t\t\t\"vscode.revealTest\",\n\t\t\t\t\telement.test.item.extId,\n\t\t\t\t\tpreserveFocus,\n\t\t\t\t);\n\t\t}\n\t}\n}\n\nasync function getTestsAtCursor(\n\ttestService: ITestService,\n\turiIdentityService: IUriIdentityService,\n\turi: URI,\n\tposition: Position,\n\tfilter?: (test: InternalTestItem) => boolean,\n) {\n\t// testsInFile will descend in the test tree. We assume that as we go\n\t// deeper, ranges get more specific. We'll want to run all tests whose\n\t// range is equal to the most specific range we find (see #133519)\n\t//\n\t// If we don't find any test whose range contains the position, we pick\n\t// the closest one before the position. Again, if we find several tests\n\t// whose range is equal to the closest one, we run them all.\n\n\tlet bestNodes: InternalTestItem[] = [];\n\tlet bestRange: Range | undefined;\n\n\tlet bestNodesBefore: InternalTestItem[] = [];\n\tlet bestRangeBefore: Range | undefined;\n\n\tfor await (const test of testsInFile(\n\t\ttestService,\n\t\turiIdentityService,\n\t\turi,\n\t)) {\n\t\tif (!test.item.range || filter?.(test) === false) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst irange = Range.lift(test.item.range);\n\t\tif (irange.containsPosition(position)) {\n\t\t\tif (bestRange && Range.equalsRange(test.item.range, bestRange)) {\n\t\t\t\t// check that a parent isn't already included (#180760)\n\t\t\t\tif (\n\t\t\t\t\t!bestNodes.some((b) =>\n\t\t\t\t\t\tTestId.isChild(b.item.extId, test.item.extId),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tbestNodes.push(test);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbestRange = irange;\n\t\t\t\tbestNodes = [test];\n\t\t\t}\n\t\t} else if (Position.isBefore(irange.getStartPosition(), position)) {\n\t\t\tif (\n\t\t\t\t!bestRangeBefore ||\n\t\t\t\tbestRangeBefore\n\t\t\t\t\t.getStartPosition()\n\t\t\t\t\t.isBefore(irange.getStartPosition())\n\t\t\t) {\n\t\t\t\tbestRangeBefore = irange;\n\t\t\t\tbestNodesBefore = [test];\n\t\t\t} else if (\n\t\t\t\tirange.equalsRange(bestRangeBefore) &&\n\t\t\t\t!bestNodesBefore.some((b) =>\n\t\t\t\t\tTestId.isChild(b.item.extId, test.item.extId),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tbestNodesBefore.push(test);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bestNodes.length ? bestNodes : bestNodesBefore;\n}\n\nenum EditorContextOrder {\n\tRunAtCursor = 0,\n\tDebugAtCursor = 1,\n\tRunInFile = 2,\n\tDebugInFile = 3,\n\tGoToRelated = 4,\n\tPeekRelated = 5,\n}\n\nabstract class ExecuteTestAtCursor extends Action2 {\n\tconstructor(\n\t\toptions: IAction2Options,\n\t\tprotected readonly group: TestRunProfileBitset,\n\t) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: hasAnyTestProvider,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\tgroup: \"testing\",\n\t\t\t\t\torder:\n\t\t\t\t\t\tgroup === TestRunProfileBitset.Run\n\t\t\t\t\t\t\t? EditorContextOrder.RunAtCursor\n\t\t\t\t\t\t\t: EditorContextOrder.DebugAtCursor,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tTestingContextKeys.activeEditorHasTests,\n\t\t\t\t\t\tTestingContextKeys.capabilityToContextKey[group],\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst activeEditorPane = editorService.activeEditorPane;\n\t\tlet editor = codeEditorService.getActiveCodeEditor();\n\t\tif (!activeEditorPane || !editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (editor instanceof EmbeddedCodeEditorWidget) {\n\t\t\teditor = editor.getParentEditor();\n\t\t}\n\n\t\tconst position = editor?.getPosition();\n\t\tconst model = editor?.getModel();\n\t\tif (!position || !model || !(\"uri\" in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\t\tconst progressService = accessor.get(IProgressService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tconst saveBeforeTest = getTestingConfiguration(\n\t\t\tconfigurationService,\n\t\t\tTestingConfigKeys.SaveBeforeTest,\n\t\t);\n\t\tif (saveBeforeTest) {\n\t\t\tawait editorService.save({\n\t\t\t\teditor: activeEditorPane.input,\n\t\t\t\tgroupId: activeEditorPane.group.id,\n\t\t\t});\n\t\t\tawait testService.syncTests();\n\t\t}\n\n\t\t// testsInFile will descend in the test tree. We assume that as we go\n\t\t// deeper, ranges get more specific. We'll want to run all tests whose\n\t\t// range is equal to the most specific range we find (see #133519)\n\t\t//\n\t\t// If we don't find any test whose range contains the position, we pick\n\t\t// the closest one before the position. Again, if we find several tests\n\t\t// whose range is equal to the closest one, we run them all.\n\t\tconst testsToRun = await showDiscoveringWhile(\n\t\t\tprogressService,\n\t\t\tgetTestsAtCursor(\n\t\t\t\ttestService,\n\t\t\t\turiIdentityService,\n\t\t\t\tmodel.uri,\n\t\t\t\tposition,\n\t\t\t\t(test) =>\n\t\t\t\t\t!!(\n\t\t\t\t\t\tprofileService.capabilitiesForTest(test.item) &\n\t\t\t\t\t\tthis.group\n\t\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tif (testsToRun.length) {\n\t\t\tawait testService.runTests({\n\t\t\t\tgroup: this.group,\n\t\t\t\ttests: testsToRun,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst relatedTests = await testService.getTestsRelatedToCode(\n\t\t\tmodel.uri,\n\t\t\tposition,\n\t\t);\n\t\tif (relatedTests.length) {\n\t\t\tawait testService.runTests({\n\t\t\t\tgroup: this.group,\n\t\t\t\ttests: relatedTests,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (editor) {\n\t\t\tMessageController.get(editor)?.showMessage(\n\t\t\t\tlocalize(\"noTestsAtCursor\", \"No tests found here\"),\n\t\t\t\tposition,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport class RunAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunAtCursor,\n\t\t\t\ttitle: localize2(\"testing.runAtCursor\", \"Run Test at Cursor\"),\n\t\t\t\tcategory,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyCode.KeyC,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Run,\n\t\t);\n\t}\n}\n\nexport class DebugAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.DebugAtCursor,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.debugAtCursor\",\n\t\t\t\t\t\"Debug Test at Cursor\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Debug,\n\t\t);\n\t}\n}\n\nexport class CoverageAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.CoverageAtCursor,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.coverageAtCursor\",\n\t\t\t\t\t\"Run Test at Cursor with Coverage\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Coverage,\n\t\t);\n\t}\n}\n\nabstract class ExecuteTestsUnderUriAction extends Action2 {\n\tconstructor(\n\t\toptions: IAction2Options,\n\t\tprotected readonly group: TestRunProfileBitset,\n\t) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ExplorerContext,\n\t\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[\n\t\t\t\t\t\tgroup\n\t\t\t\t\t].isEqualTo(true),\n\t\t\t\t\tgroup: \"6.5_testing\",\n\t\t\t\t\torder:\n\t\t\t\t\t\t(group === TestRunProfileBitset.Run\n\t\t\t\t\t\t\t? ActionOrder.Run\n\t\t\t\t\t\t\t: ActionOrder.Debug) + 0.1,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic override async run(\n\t\taccessor: ServicesAccessor,\n\t\turi: URI,\n\t): Promise<unknown> {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst tests = await Iterable.asyncToArray(\n\t\t\ttestsUnderUri(testService, accessor.get(IUriIdentityService), uri),\n\t\t);\n\n\t\tif (!tests.length) {\n\t\t\tnotificationService.notify({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"noTests\",\n\t\t\t\t\t\"No tests found in the selected file or folder\",\n\t\t\t\t),\n\t\t\t\tseverity: Severity.Info,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\treturn testService.runTests({ tests, group: this.group });\n\t}\n}\n\nclass RunTestsUnderUri extends ExecuteTestsUnderUriAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunByUri,\n\t\t\t\ttitle: LABEL_RUN_TESTS,\n\t\t\t\tcategory,\n\t\t\t},\n\t\t\tTestRunProfileBitset.Run,\n\t\t);\n\t}\n}\n\nclass DebugTestsUnderUri extends ExecuteTestsUnderUriAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.DebugByUri,\n\t\t\t\ttitle: LABEL_DEBUG_TESTS,\n\t\t\t\tcategory,\n\t\t\t},\n\t\t\tTestRunProfileBitset.Debug,\n\t\t);\n\t}\n}\n\nclass CoverageTestsUnderUri extends ExecuteTestsUnderUriAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.CoverageByUri,\n\t\t\t\ttitle: LABEL_COVERAGE_TESTS,\n\t\t\t\tcategory,\n\t\t\t},\n\t\t\tTestRunProfileBitset.Coverage,\n\t\t);\n\t}\n}\n\nabstract class ExecuteTestsInCurrentFile extends Action2 {\n\tconstructor(\n\t\toptions: IAction2Options,\n\t\tprotected readonly group: TestRunProfileBitset,\n\t) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[\n\t\t\t\t\t\tgroup\n\t\t\t\t\t].isEqualTo(true),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\tgroup: \"testing\",\n\t\t\t\t\torder:\n\t\t\t\t\t\tgroup === TestRunProfileBitset.Run\n\t\t\t\t\t\t\t? EditorContextOrder.RunInFile\n\t\t\t\t\t\t\t: EditorContextOrder.DebugInFile,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tTestingContextKeys.activeEditorHasTests,\n\t\t\t\t\t\tTestingContextKeys.capabilityToContextKey[group],\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\tlet editor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\t\tif (editor instanceof EmbeddedCodeEditorWidget) {\n\t\t\teditor = editor.getParentEditor();\n\t\t}\n\t\tconst position = editor?.getPosition();\n\t\tconst model = editor?.getModel();\n\t\tif (!position || !model || !(\"uri\" in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst demandedUri = model.uri.toString();\n\n\t\t// Iterate through the entire collection and run any tests that are in the\n\t\t// uri. See #138007.\n\t\tconst queue = [testService.collection.rootIds];\n\t\tconst discovered: InternalTestItem[] = [];\n\t\twhile (queue.length) {\n\t\t\tfor (const id of queue.pop()!) {\n\t\t\t\tconst node = testService.collection.getNodeById(id)!;\n\t\t\t\tif (node.item.uri?.toString() === demandedUri) {\n\t\t\t\t\tdiscovered.push(node);\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push(node.children);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (discovered.length) {\n\t\t\treturn testService.runTests({\n\t\t\t\ttests: discovered,\n\t\t\t\tgroup: this.group,\n\t\t\t});\n\t\t}\n\n\t\tif (editor) {\n\t\t\tMessageController.get(editor)?.showMessage(\n\t\t\t\tlocalize(\"noTestsInFile\", \"No tests found in this file\"),\n\t\t\t\tposition,\n\t\t\t);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class RunCurrentFile extends ExecuteTestsInCurrentFile {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunCurrentFile,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.runCurrentFile\",\n\t\t\t\t\t\"Run Tests in Current File\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyCode.KeyF,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Run,\n\t\t);\n\t}\n}\n\nexport class DebugCurrentFile extends ExecuteTestsInCurrentFile {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.DebugCurrentFile,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.debugCurrentFile\",\n\t\t\t\t\t\"Debug Tests in Current File\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyF,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Debug,\n\t\t);\n\t}\n}\n\nexport class CoverageCurrentFile extends ExecuteTestsInCurrentFile {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.CoverageCurrentFile,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.coverageCurrentFile\",\n\t\t\t\t\t\"Run Tests with Coverage in Current File\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\t\tprimary: KeyChord(\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyF,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Coverage,\n\t\t);\n\t}\n}\n\nexport const discoverAndRunTests = async (\n\tcollection: IMainThreadTestCollection,\n\tprogress: IProgressService,\n\tids: ReadonlyArray<string>,\n\trunTests: (tests: ReadonlyArray<InternalTestItem>) => Promise<ITestResult>,\n): Promise<ITestResult | undefined> => {\n\tconst todo = Promise.all(\n\t\tids.map((p) => expandAndGetTestById(collection, p)),\n\t);\n\tconst tests = (await showDiscoveringWhile(progress, todo)).filter(\n\t\tisDefined,\n\t);\n\treturn tests.length ? await runTests(tests) : undefined;\n};\n\nabstract class RunOrDebugExtsByPath extends Action2 {\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor, ...args: unknown[]) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tawait discoverAndRunTests(\n\t\t\taccessor.get(ITestService).collection,\n\t\t\taccessor.get(IProgressService),\n\t\t\t[...this.getTestExtIdsToRun(accessor, ...args)],\n\t\t\t(tests) => this.runTest(testService, tests),\n\t\t);\n\t}\n\n\tprotected abstract getTestExtIdsToRun(\n\t\taccessor: ServicesAccessor,\n\t\t...args: unknown[]\n\t): Iterable<string>;\n\n\tprotected abstract runTest(\n\t\tservice: ITestService,\n\t\tnode: readonly InternalTestItem[],\n\t): Promise<ITestResult>;\n}\n\nabstract class RunOrDebugFailedTests extends RunOrDebugExtsByPath {\n\tconstructor(options: IAction2Options) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: hasAnyTestProvider,\n\t\t\t},\n\t\t});\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected getTestExtIdsToRun(accessor: ServicesAccessor) {\n\t\tconst { results } = accessor.get(ITestResultService);\n\t\tconst ids = new Set<string>();\n\t\tfor (let i = results.length - 1; i >= 0; i--) {\n\t\t\tconst resultSet = results[i];\n\t\t\tfor (const test of resultSet.tests) {\n\t\t\t\tif (isFailedState(test.ownComputedState)) {\n\t\t\t\t\tids.add(test.item.extId);\n\t\t\t\t} else {\n\t\t\t\t\tids.delete(test.item.extId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ids;\n\t}\n}\n\nabstract class RunOrDebugLastRun extends Action2 {\n\tconstructor(options: IAction2Options) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\thasAnyTestProvider,\n\t\t\t\t\tTestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected abstract getGroup(): TestRunProfileBitset;\n\n\tprotected getLastTestRunRequest(\n\t\taccessor: ServicesAccessor,\n\t\trunId?: string,\n\t) {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst lastResult = runId\n\t\t\t? resultService.results.find((r) => r.id === runId)\n\t\t\t: resultService.results[0];\n\t\treturn lastResult?.request;\n\t}\n\n\t/** @inheritdoc */\n\tpublic override async run(accessor: ServicesAccessor, runId?: string) {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst lastResult = runId\n\t\t\t? resultService.results.find((r) => r.id === runId)\n\t\t\t: resultService.results[0];\n\t\tif (!lastResult) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst req = lastResult.request;\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst profileExists = (t: {\n\t\t\tcontrollerId: string;\n\t\t\tprofileId: number;\n\t\t}) =>\n\t\t\tprofileService\n\t\t\t\t.getControllerProfiles(t.controllerId)\n\t\t\t\t.some((p) => p.profileId === t.profileId);\n\n\t\tawait discoverAndRunTests(\n\t\t\ttestService.collection,\n\t\t\taccessor.get(IProgressService),\n\t\t\treq.targets.flatMap((t) => t.testIds),\n\t\t\t(tests) => {\n\t\t\t\t// If we're requesting a re-run in the same group and have the same profiles\n\t\t\t\t// as were used before, then use those exactly. Otherwise guess naively.\n\t\t\t\tif (\n\t\t\t\t\tthis.getGroup() & req.group &&\n\t\t\t\t\treq.targets.every(profileExists)\n\t\t\t\t) {\n\t\t\t\t\treturn testService.runResolvedTests({\n\t\t\t\t\t\ttargets: req.targets,\n\t\t\t\t\t\tgroup: req.group,\n\t\t\t\t\t\texclude: req.exclude,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn testService.runTests({\n\t\t\t\t\t\ttests,\n\t\t\t\t\t\tgroup: this.getGroup(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n}\n\nexport class ReRunFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ReRunFailedTests,\n\t\t\ttitle: localize2(\"testing.reRunFailTests\", \"Rerun Failed Tests\"),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyCode.KeyE,\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(\n\t\tservice: ITestService,\n\t\tinternalTests: InternalTestItem[],\n\t): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class DebugFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugFailedTests,\n\t\t\ttitle: localize2(\"testing.debugFailTests\", \"Debug Failed Tests\"),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyE,\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(\n\t\tservice: ITestService,\n\t\tinternalTests: InternalTestItem[],\n\t): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Debug,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class ReRunLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ReRunLastRun,\n\t\t\ttitle: localize2(\"testing.reRunLastRun\", \"Rerun Last Run\"),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyCode.KeyL,\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected override getGroup(): TestRunProfileBitset {\n\t\treturn TestRunProfileBitset.Run;\n\t}\n}\n\nexport class DebugLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugLastRun,\n\t\t\ttitle: localize2(\"testing.debugLastRun\", \"Debug Last Run\"),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyL,\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected override getGroup(): TestRunProfileBitset {\n\t\treturn TestRunProfileBitset.Debug;\n\t}\n}\n\nexport class CoverageLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageLastRun,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.coverageLastRun\",\n\t\t\t\t\"Rerun Last Run with Coverage\",\n\t\t\t),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyL,\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected override getGroup(): TestRunProfileBitset {\n\t\treturn TestRunProfileBitset.Coverage;\n\t}\n}\n\nexport class SearchForTestExtension extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.SearchForTestExtension,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.searchForTestExtension\",\n\t\t\t\t\"Search for Test Extension\",\n\t\t\t),\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor\n\t\t\t.get(IExtensionsWorkbenchService)\n\t\t\t.openSearch('@category:\"testing\"');\n\t}\n}\n\nexport class OpenOutputPeek extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.OpenOutputPeek,\n\t\t\ttitle: localize2(\"testing.openOutputPeek\", \"Peek Output\"),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyM,\n\t\t\t\t),\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestingPeekOpener).open();\n\t}\n}\n\nexport class ToggleInlineTestOutput extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ToggleInlineTestOutput,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.toggleInlineTestOutput\",\n\t\t\t\t\"Toggle Inline Test Output\",\n\t\t\t),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyI,\n\t\t\t\t),\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\ttestService.showInlineOutput.value =\n\t\t\t!testService.showInlineOutput.value;\n\t}\n}\n\nconst refreshMenus = (whenIsRefreshing: boolean): IAction2Options[\"menu\"] => [\n\t{\n\t\tid: MenuId.TestItem,\n\t\tgroup: \"inline\",\n\t\torder: ActionOrder.Refresh,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tTestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\tTestingContextKeys.isRefreshingTests.isEqualTo(whenIsRefreshing),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.ViewTitle,\n\t\tgroup: \"navigation\",\n\t\torder: ActionOrder.Refresh,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals(\"view\", Testing.ExplorerViewId),\n\t\t\tTestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\tTestingContextKeys.isRefreshingTests.isEqualTo(whenIsRefreshing),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.CommandPalette,\n\t\twhen: TestingContextKeys.canRefreshTests.isEqualTo(true),\n\t},\n];\n\nexport class RefreshTestsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RefreshTestsAction,\n\t\t\ttitle: localize2(\"testing.refreshTests\", \"Refresh Tests\"),\n\t\t\tcategory,\n\t\t\ticon: icons.testingRefreshTests,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.Semicolon,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyR,\n\t\t\t\t),\n\t\t\t\twhen: TestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\t},\n\t\t\tmenu: refreshMenus(false),\n\t\t});\n\t}\n\n\tpublic async run(\n\t\taccessor: ServicesAccessor,\n\t\t...elements: TestItemTreeElement[]\n\t) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst progressService = accessor.get(IProgressService);\n\n\t\tconst controllerIds = distinct(\n\t\t\telements.filter(isDefined).map((e) => e.test.controllerId),\n\t\t);\n\t\treturn progressService.withProgress(\n\t\t\t{ location: Testing.ViewletId },\n\t\t\tasync () => {\n\t\t\t\tif (controllerIds.length) {\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tcontrollerIds.map((id) => testService.refreshTests(id)),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tawait testService.refreshTests();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n}\n\nexport class CancelTestRefreshAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CancelTestRefreshAction,\n\t\t\ttitle: localize2(\n\t\t\t\t\"testing.cancelTestRefresh\",\n\t\t\t\t\"Cancel Test Refresh\",\n\t\t\t),\n\t\t\tcategory,\n\t\t\ticon: icons.testingCancelRefreshTests,\n\t\t\tmenu: refreshMenus(true),\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestService).cancelRefreshTests();\n\t}\n}\n\nexport class CleareCoverage extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageClear,\n\t\t\ttitle: localize2(\"testing.clearCoverage\", \"Clear Coverage\"),\n\t\t\ticon: widgetClose,\n\t\t\tcategory,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: ActionOrder.Refresh,\n\t\t\t\t\twhen: ContextKeyExpr.equals(\"view\", Testing.CoverageViewId),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: TestingContextKeys.isTestCoverageOpen.isEqualTo(true),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestCoverageService).closeCoverage();\n\t}\n}\n\nexport class OpenCoverage extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.OpenCoverage,\n\t\t\ttitle: localize2(\"testing.openCoverage\", \"Open Coverage\"),\n\t\t\tcategory,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst results = accessor.get(ITestResultService).results;\n\t\tconst task = results.length && results[0].tasks.find((r) => r.coverage);\n\t\tif (!task) {\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tnotificationService.info(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"testing.noCoverage\",\n\t\t\t\t\t\"No coverage information available on the last test run.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\taccessor.get(ITestCoverageService).openCoverage(task, true);\n\t}\n}\n\nabstract class TestNavigationAction extends SymbolNavigationAction {\n\tprotected testService!: ITestService; // little hack...\n\tprotected uriIdentityService!: IUriIdentityService;\n\n\toverride runEditorCommand(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\t...args: any[]\n\t) {\n\t\tthis.testService = accessor.get(ITestService);\n\t\tthis.uriIdentityService = accessor.get(IUriIdentityService);\n\t\treturn super.runEditorCommand(accessor, editor, ...args);\n\t}\n\n\tprotected override _getAlternativeCommand(\n\t\teditor: IActiveCodeEditor,\n\t): string {\n\t\treturn editor.getOption(EditorOption.gotoLocation)\n\t\t\t.alternativeTestsCommand;\n\t}\n\tprotected override _getGoToPreference(\n\t\teditor: IActiveCodeEditor,\n\t): GoToLocationValues {\n\t\treturn (\n\t\t\teditor.getOption(EditorOption.gotoLocation).multipleTests || \"peek\"\n\t\t);\n\t}\n}\n\nabstract class GoToRelatedTestAction extends TestNavigationAction {\n\tprotected override async _getLocationModel(\n\t\t_languageFeaturesService: unknown,\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t\ttoken: CancellationToken,\n\t): Promise<ReferencesModel | undefined> {\n\t\tconst tests = await this.testService.getTestsRelatedToCode(\n\t\t\tmodel.uri,\n\t\t\tposition,\n\t\t\ttoken,\n\t\t);\n\t\treturn new ReferencesModel(\n\t\t\ttests\n\t\t\t\t.map(\n\t\t\t\t\t(t) =>\n\t\t\t\t\t\tt.item.uri && {\n\t\t\t\t\t\t\turi: t.item.uri,\n\t\t\t\t\t\t\trange: t.item.range || new Range(1, 1, 1, 1),\n\t\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\t.filter(isDefined),\n\t\t\tlocalize(\"relatedTests\", \"Related Tests\"),\n\t\t);\n\t}\n\n\tprotected override _getNoResultFoundMessage(): string {\n\t\treturn localize(\"noTestFound\", \"No related tests found.\");\n\t}\n}\n\nclass GoToRelatedTest extends GoToRelatedTestAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\topenToSide: false,\n\t\t\t\topenInPeek: false,\n\t\t\t\tmuteMessage: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: TestCommandId.GoToRelatedTest,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.goToRelatedTest\",\n\t\t\t\t\t\"Go to Related Test\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\t// todo@connor4312: make this more explicit based on cursor position\n\t\t\t\t\tContextKeyExpr.not(\n\t\t\t\t\t\tTestingContextKeys.activeEditorHasTests.key,\n\t\t\t\t\t),\n\t\t\t\t\tTestingContextKeys.canGoToRelatedTest,\n\t\t\t\t),\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\t\tgroup: \"testing\",\n\t\t\t\t\t\torder: EditorContextOrder.GoToRelated,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t);\n\t}\n}\n\nclass PeekRelatedTest extends GoToRelatedTestAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\topenToSide: false,\n\t\t\t\topenInPeek: true,\n\t\t\t\tmuteMessage: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: TestCommandId.PeekRelatedTest,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.peekToRelatedTest\",\n\t\t\t\t\t\"Peek Related Test\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\tTestingContextKeys.canGoToRelatedTest,\n\t\t\t\t\t// todo@connor4312: make this more explicit based on cursor position\n\t\t\t\t\tContextKeyExpr.not(\n\t\t\t\t\t\tTestingContextKeys.activeEditorHasTests.key,\n\t\t\t\t\t),\n\t\t\t\t\tPeekContext.notInPeekEditor,\n\t\t\t\t\tEditorContextKeys.isInEmbeddedEditor.toNegated(),\n\t\t\t\t),\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\t\tgroup: \"testing\",\n\t\t\t\t\t\torder: EditorContextOrder.PeekRelated,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t);\n\t}\n}\n\nabstract class GoToRelatedCodeAction extends TestNavigationAction {\n\tprotected override async _getLocationModel(\n\t\t_languageFeaturesService: unknown,\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t\ttoken: CancellationToken,\n\t): Promise<ReferencesModel | undefined> {\n\t\tconst testsAtCursor = await getTestsAtCursor(\n\t\t\tthis.testService,\n\t\t\tthis.uriIdentityService,\n\t\t\tmodel.uri,\n\t\t\tposition,\n\t\t);\n\t\tconst code = await Promise.all(\n\t\t\ttestsAtCursor.map((t) => this.testService.getCodeRelatedToTest(t)),\n\t\t);\n\t\treturn new ReferencesModel(\n\t\t\tcode.flat(),\n\t\t\tlocalize(\"relatedCode\", \"Related Code\"),\n\t\t);\n\t}\n\n\tprotected override _getNoResultFoundMessage(): string {\n\t\treturn localize(\"noRelatedCode\", \"No related code found.\");\n\t}\n}\n\nclass GoToRelatedCode extends GoToRelatedCodeAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\topenToSide: false,\n\t\t\t\topenInPeek: false,\n\t\t\t\tmuteMessage: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: TestCommandId.GoToRelatedCode,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.goToRelatedCode\",\n\t\t\t\t\t\"Go to Related Code\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\tTestingContextKeys.activeEditorHasTests,\n\t\t\t\t\tTestingContextKeys.canGoToRelatedCode,\n\t\t\t\t),\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\t\tgroup: \"testing\",\n\t\t\t\t\t\torder: EditorContextOrder.GoToRelated,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t);\n\t}\n}\n\nclass PeekRelatedCode extends GoToRelatedCodeAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\topenToSide: false,\n\t\t\t\topenInPeek: true,\n\t\t\t\tmuteMessage: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: TestCommandId.PeekRelatedCode,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"testing.peekToRelatedCode\",\n\t\t\t\t\t\"Peek Related Code\",\n\t\t\t\t),\n\t\t\t\tcategory,\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\tTestingContextKeys.activeEditorHasTests,\n\t\t\t\t\tTestingContextKeys.canGoToRelatedCode,\n\t\t\t\t\tPeekContext.notInPeekEditor,\n\t\t\t\t\tEditorContextKeys.isInEmbeddedEditor.toNegated(),\n\t\t\t\t),\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\t\tgroup: \"testing\",\n\t\t\t\t\t\torder: EditorContextOrder.PeekRelated,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t);\n\t}\n}\n\nexport const allTestActions = [\n\tCancelTestRefreshAction,\n\tCancelTestRunAction,\n\tCleareCoverage,\n\tClearTestResultsAction,\n\tCollapseAllAction,\n\tConfigureTestProfilesAction,\n\tContinuousRunTestAction,\n\tContinuousRunUsingProfileTestAction,\n\tCoverageAction,\n\tCoverageAllAction,\n\tCoverageAtCursor,\n\tCoverageCurrentFile,\n\tCoverageLastRun,\n\tCoverageSelectedAction,\n\tCoverageTestsUnderUri,\n\tDebugAction,\n\tDebugAllAction,\n\tDebugAtCursor,\n\tDebugCurrentFile,\n\tDebugFailedTests,\n\tDebugLastRun,\n\tDebugSelectedAction,\n\tDebugTestsUnderUri,\n\tGetExplorerSelection,\n\tGetSelectedProfiles,\n\tGoToRelatedCode,\n\tGoToRelatedTest,\n\tGoToTest,\n\tHideTestAction,\n\tOpenCoverage,\n\tOpenOutputPeek,\n\tPeekRelatedCode,\n\tPeekRelatedTest,\n\tRefreshTestsAction,\n\tReRunFailedTests,\n\tReRunLastRun,\n\tRunAction,\n\tRunAllAction,\n\tRunAtCursor,\n\tRunCurrentFile,\n\tRunSelectedAction,\n\tRunTestsUnderUri,\n\tRunUsingProfileAction,\n\tSearchForTestExtension,\n\tSelectDefaultTestProfiles,\n\tShowMostRecentOutputAction,\n\tStartContinuousRunAction,\n\tStopContinuousRunAction,\n\tTestingSortByDurationAction,\n\tTestingSortByLocationAction,\n\tTestingSortByStatusAction,\n\tTestingViewAsListAction,\n\tTestingViewAsTreeAction,\n\tToggleInlineTestOutput,\n\tUnhideAllTestsAction,\n\tUnhideTestAction,\n];\n"],
  "mappings": "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
  "names": ["ActionOrder", "EditorContextOrder"]
}
