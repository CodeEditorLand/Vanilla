{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testExplorerActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IActiveCodeEditor, ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { EmbeddedCodeEditorWidget } from '../../../../editor/browser/widget/codeEditor/embeddedCodeEditorWidget.js';\nimport { EditorOption, GoToLocationValues } from '../../../../editor/common/config/editorOptions.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { SymbolNavigationAction } from '../../../../editor/contrib/gotoSymbol/browser/goToCommands.js';\nimport { ReferencesModel } from '../../../../editor/contrib/gotoSymbol/browser/referencesModel.js';\nimport { MessageController } from '../../../../editor/contrib/message/browser/messageController.js';\nimport { PeekContext } from '../../../../editor/contrib/peekView/browser/peekView.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, IAction2Options, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, ContextKeyExpression, ContextKeyGreaterExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { widgetClose } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { ViewAction } from '../../../browser/parts/views/viewPane.js';\nimport { FocusedViewContext } from '../../../common/contextkeys.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { TestExplorerTreeElement, TestItemTreeElement } from './explorerProjections/index.js';\nimport * as icons from './icons.js';\nimport { TestingExplorerView } from './testingExplorerView.js';\nimport { TestResultsView } from './testingOutputPeek.js';\nimport { TestingConfigKeys, getTestingConfiguration } from '../common/configuration.js';\nimport { TestCommandId, TestExplorerViewMode, TestExplorerViewSorting, Testing, testConfigurationGroupNames } from '../common/constants.js';\nimport { ITestCoverageService } from '../common/testCoverageService.js';\nimport { TestId } from '../common/testId.js';\nimport { ITestProfileService, canUseProfileWithTest } from '../common/testProfileService.js';\nimport { ITestResult } from '../common/testResult.js';\nimport { ITestResultService } from '../common/testResultService.js';\nimport { IMainThreadTestCollection, IMainThreadTestController, ITestService, expandAndGetTestById, testsInFile, testsUnderUri } from '../common/testService.js';\nimport { ExtTestRunProfileKind, ITestRunProfile, InternalTestItem, TestItemExpandState, TestRunProfileBitset } from '../common/testTypes.js';\nimport { TestingContextKeys } from '../common/testingContextKeys.js';\nimport { ITestingContinuousRunService } from '../common/testingContinuousRunService.js';\nimport { ITestingPeekOpener } from '../common/testingPeekOpener.js';\nimport { isFailedState } from '../common/testingStates.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\n\nconst category = Categories.Test;\n\nconst enum ActionOrder {\n\t// Navigation:\n\tRefresh = 10,\n\tRun,\n\tDebug,\n\tCoverage,\n\tRunContinuous,\n\tRunUsing,\n\n\t// Submenu:\n\tCollapse,\n\tClearResults,\n\tDisplayMode,\n\tSort,\n\tGoToTest,\n\tHideTest,\n\tContinuousRunTest = -1 >>> 1, // max int, always at the end to avoid shifting on hover\n}\n\nconst hasAnyTestProvider = ContextKeyGreaterExpr.create(TestingContextKeys.providerCount.key, 0);\n\nconst LABEL_RUN_TESTS = localize2('runSelectedTests', \"Run Tests\");\nconst LABEL_DEBUG_TESTS = localize2('debugSelectedTests', \"Debug Tests\");\nconst LABEL_COVERAGE_TESTS = localize2('coverageSelectedTests', \"Run Tests with Coverage\");\n\nexport class HideTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.HideTestAction,\n\t\t\ttitle: localize2('hideTest', 'Hide Test'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\tgroup: 'builtin@2',\n\t\t\t\twhen: TestingContextKeys.testItemIsHidden.isEqualTo(false)\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]) {\n\t\tconst service = accessor.get(ITestService);\n\t\tfor (const element of elements) {\n\t\t\tservice.excluded.toggle(element.test, true);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class UnhideTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.UnhideTestAction,\n\t\t\ttitle: localize2('unhideTest', 'Unhide Test'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\torder: ActionOrder.HideTest,\n\t\t\t\twhen: TestingContextKeys.testItemIsHidden.isEqualTo(true)\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor, ...elements: InternalTestItem[]) {\n\t\tconst service = accessor.get(ITestService);\n\t\tfor (const element of elements) {\n\t\t\tif (element instanceof TestItemTreeElement) {\n\t\t\t\tservice.excluded.toggle(element.test, false);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class UnhideAllTestsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.UnhideAllTestsAction,\n\t\t\ttitle: localize2('unhideAllTests', 'Unhide All Tests'),\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst service = accessor.get(ITestService);\n\t\tservice.excluded.clear();\n\t\treturn Promise.resolve();\n\t}\n}\n\nconst testItemInlineAndInContext = (order: ActionOrder, when?: ContextKeyExpression) => [\n\t{\n\t\tid: MenuId.TestItem,\n\t\tgroup: 'inline',\n\t\torder,\n\t\twhen,\n\t}, {\n\t\tid: MenuId.TestItem,\n\t\tgroup: 'builtin@1',\n\t\torder,\n\t\twhen,\n\t}\n];\n\nabstract class RunVisibleAction extends ViewAction<TestingExplorerView> {\n\tconstructor(private readonly bitset: TestRunProfileBitset, desc: Readonly<IAction2Options>) {\n\t\tsuper({\n\t\t\t...desc,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(accessor: ServicesAccessor, view: TestingExplorerView, ...elements: TestItemTreeElement[]): Promise<unknown> {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude(elements.map(e => e.test));\n\t\treturn accessor.get(ITestService).runTests({\n\t\t\ttests: include,\n\t\t\texclude,\n\t\t\tgroup: this.bitset,\n\t\t});\n\t}\n}\n\nexport class DebugAction extends RunVisibleAction {\n\tconstructor() {\n\t\tsuper(TestRunProfileBitset.Debug, {\n\t\t\tid: TestCommandId.DebugAction,\n\t\t\ttitle: localize2('debug test', 'Debug Test'),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.Debug, TestingContextKeys.hasDebuggableTests.isEqualTo(true)),\n\t\t});\n\t}\n}\n\nexport class CoverageAction extends RunVisibleAction {\n\tconstructor() {\n\t\tsuper(TestRunProfileBitset.Coverage, {\n\t\t\tid: TestCommandId.RunWithCoverageAction,\n\t\t\ttitle: localize2('run with cover test', 'Run Test with Coverage'),\n\t\t\ticon: icons.testingCoverageIcon,\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.Coverage, TestingContextKeys.hasCoverableTests.isEqualTo(true)),\n\t\t});\n\t}\n}\n\nexport class RunUsingProfileAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunUsingProfileAction,\n\t\t\ttitle: localize2('testing.runUsing', 'Execute Using Profile...'),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\torder: ActionOrder.RunUsing,\n\t\t\t\tgroup: 'builtin@2',\n\t\t\t\twhen: TestingContextKeys.hasNonDefaultProfile.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(acessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\tconst commandService = acessor.get(ICommandService);\n\t\tconst testService = acessor.get(ITestService);\n\t\tconst profile: ITestRunProfile | undefined = await commandService.executeCommand('vscode.pickTestProfile', {\n\t\t\tonlyForTest: elements[0].test,\n\t\t});\n\t\tif (!profile) {\n\t\t\treturn;\n\t\t}\n\n\t\ttestService.runResolvedTests({\n\t\t\tgroup: profile.group,\n\t\t\ttargets: [{\n\t\t\t\tprofileId: profile.profileId,\n\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\ttestIds: elements.filter(t => canUseProfileWithTest(profile, t.test)).map(t => t.test.item.extId)\n\t\t\t}]\n\t\t});\n\t}\n}\n\nexport class RunAction extends RunVisibleAction {\n\tconstructor() {\n\t\tsuper(TestRunProfileBitset.Run, {\n\t\t\tid: TestCommandId.RunAction,\n\t\t\ttitle: localize2('run test', 'Run Test'),\n\t\t\ticon: icons.testingRunIcon,\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.Run, TestingContextKeys.hasRunnableTests.isEqualTo(true)),\n\t\t});\n\t}\n}\n\nexport class SelectDefaultTestProfiles extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.SelectDefaultTestProfiles,\n\t\t\ttitle: localize2('testing.selectDefaultTestProfiles', 'Select Default Profile'),\n\t\t\ticon: icons.testingUpdateProfiles,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tpublic override async run(acessor: ServicesAccessor, onlyGroup: TestRunProfileBitset) {\n\t\tconst commands = acessor.get(ICommandService);\n\t\tconst testProfileService = acessor.get(ITestProfileService);\n\t\tconst profiles = await commands.executeCommand<ITestRunProfile[]>('vscode.pickMultipleTestProfiles', {\n\t\t\tshowConfigureButtons: false,\n\t\t\tselected: testProfileService.getGroupDefaultProfiles(onlyGroup),\n\t\t\tonlyGroup,\n\t\t});\n\n\t\tif (profiles?.length) {\n\t\t\ttestProfileService.setGroupDefaultProfiles(onlyGroup, profiles);\n\t\t}\n\t}\n}\n\nexport class ContinuousRunTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ToggleContinousRunForTest,\n\t\t\ttitle: localize2('testing.toggleContinuousRunOn', 'Turn on Continuous Run'),\n\t\t\ticon: icons.testingTurnContinuousRunOn,\n\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(true),\n\t\t\t\tTestingContextKeys.isParentRunningContinuously.isEqualTo(false)\n\t\t\t),\n\t\t\ttoggled: {\n\t\t\t\tcondition: TestingContextKeys.isContinuousModeOn.isEqualTo(true),\n\t\t\t\ticon: icons.testingContinuousIsOn,\n\t\t\t\ttitle: localize('testing.toggleContinuousRunOff', 'Turn off Continuous Run'),\n\t\t\t},\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.ContinuousRunTest, TestingContextKeys.supportsContinuousRun.isEqualTo(true)),\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\tconst crService = accessor.get(ITestingContinuousRunService);\n\t\tfor (const element of elements) {\n\t\t\tconst id = element.test.item.extId;\n\t\t\tif (crService.isSpecificallyEnabledFor(id)) {\n\t\t\t\tcrService.stop(id);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcrService.start(TestRunProfileBitset.Run, id);\n\t\t}\n\t}\n}\n\nexport class ContinuousRunUsingProfileTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ContinousRunUsingForTest,\n\t\t\ttitle: localize2('testing.startContinuousRunUsing', 'Start Continous Run Using...'),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.TestItem,\n\t\t\t\t\torder: ActionOrder.RunContinuous,\n\t\t\t\t\tgroup: 'builtin@2',\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tTestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t\t\t\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(false),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\tconst crService = accessor.get(ITestingContinuousRunService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tfor (const element of elements) {\n\t\t\tconst selected = await selectContinuousRunProfiles(crService, notificationService, quickInputService,\n\t\t\t\t[{ profiles: profileService.getControllerProfiles(element.test.controllerId) }]);\n\n\t\t\tif (selected.length) {\n\t\t\t\tcrService.start(selected, element.test.item.extId);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ConfigureTestProfilesAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ConfigureTestProfilesAction,\n\t\t\ttitle: localize2('testing.configureProfile', \"Configure Test Profiles\"),\n\t\t\ticon: icons.testingUpdateProfiles,\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasConfigurableProfile.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(acessor: ServicesAccessor, onlyGroup?: TestRunProfileBitset) {\n\t\tconst commands = acessor.get(ICommandService);\n\t\tconst testProfileService = acessor.get(ITestProfileService);\n\t\tconst profile = await commands.executeCommand<ITestRunProfile>('vscode.pickTestProfile', {\n\t\t\tplaceholder: localize('configureProfile', 'Select a profile to update'),\n\t\t\tshowConfigureButtons: false,\n\t\t\tonlyConfigurable: true,\n\t\t\tonlyGroup,\n\t\t});\n\n\t\tif (profile) {\n\t\t\ttestProfileService.configure(profile.controllerId, profile.profileId);\n\t\t}\n\t}\n}\n\nconst continuousMenus = (whenIsContinuousOn: boolean): IAction2Options['menu'] => [\n\t{\n\t\tid: MenuId.ViewTitle,\n\t\tgroup: 'navigation',\n\t\torder: ActionOrder.RunUsing,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\tTestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(whenIsContinuousOn),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.CommandPalette,\n\t\twhen: TestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t},\n];\n\nclass StopContinuousRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.StopContinousRun,\n\t\t\ttitle: localize2('testing.stopContinuous', 'Stop Continuous Run'),\n\t\t\tcategory,\n\t\t\ticon: icons.testingTurnContinuousRunOff,\n\t\t\tmenu: continuousMenus(true),\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(ITestingContinuousRunService).stop();\n\t}\n}\n\nfunction selectContinuousRunProfiles(\n\tcrs: ITestingContinuousRunService,\n\tnotificationService: INotificationService,\n\tquickInputService: IQuickInputService,\n\tprofilesToPickFrom: Iterable<Readonly<{\n\t\tcontroller?: IMainThreadTestController;\n\t\tprofiles: ITestRunProfile[];\n\t}>>,\n): Promise<ITestRunProfile[]> {\n\ttype ItemType = IQuickPickItem & { profile: ITestRunProfile };\n\n\tconst items: ItemType[] = [];\n\tfor (const { controller, profiles } of profilesToPickFrom) {\n\t\tfor (const profile of profiles) {\n\t\t\tif (profile.supportsContinuousRun) {\n\t\t\t\titems.push({\n\t\t\t\t\tlabel: profile.label || controller?.label.get() || '',\n\t\t\t\t\tdescription: controller?.label.get(),\n\t\t\t\t\tprofile,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (items.length === 0) {\n\t\tnotificationService.info(localize('testing.noProfiles', 'No test continuous run-enabled profiles were found'));\n\t\treturn Promise.resolve([]);\n\t}\n\n\t// special case: don't bother to quick a pickpick if there's only a single profile\n\tif (items.length === 1) {\n\t\treturn Promise.resolve([items[0].profile]);\n\t}\n\n\tconst qpItems: (ItemType | IQuickPickSeparator)[] = [];\n\tconst selectedItems: ItemType[] = [];\n\tconst lastRun = crs.lastRunProfileIds;\n\n\titems.sort((a, b) => a.profile.group - b.profile.group\n\t\t|| a.profile.controllerId.localeCompare(b.profile.controllerId)\n\t\t|| a.label.localeCompare(b.label));\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst item = items[i];\n\t\tif (i === 0 || items[i - 1].profile.group !== item.profile.group) {\n\t\t\tqpItems.push({ type: 'separator', label: testConfigurationGroupNames[item.profile.group] });\n\t\t}\n\n\t\tqpItems.push(item);\n\t\tif (lastRun.has(item.profile.profileId)) {\n\t\t\tselectedItems.push(item);\n\t\t}\n\t}\n\n\tconst disposables = new DisposableStore();\n\tconst quickpick = disposables.add(quickInputService.createQuickPick<IQuickPickItem & { profile: ITestRunProfile }>({ useSeparators: true }));\n\tquickpick.title = localize('testing.selectContinuousProfiles', 'Select profiles to run when files change:');\n\tquickpick.canSelectMany = true;\n\tquickpick.items = qpItems;\n\tquickpick.selectedItems = selectedItems;\n\tquickpick.show();\n\treturn new Promise(resolve => {\n\t\tdisposables.add(quickpick.onDidAccept(() => {\n\t\t\tresolve(quickpick.selectedItems.map(i => i.profile));\n\t\t\tdisposables.dispose();\n\t\t}));\n\n\t\tdisposables.add(quickpick.onDidHide(() => {\n\t\t\tresolve([]);\n\t\t\tdisposables.dispose();\n\t\t}));\n\t});\n}\n\nclass StartContinuousRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.StartContinousRun,\n\t\t\ttitle: localize2('testing.startContinuous', \"Start Continuous Run\"),\n\t\t\tcategory,\n\t\t\ticon: icons.testingTurnContinuousRunOn,\n\t\t\tmenu: continuousMenus(false),\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, ...args: any[]): Promise<void> {\n\t\tconst crs = accessor.get(ITestingContinuousRunService);\n\t\tconst selected = await selectContinuousRunProfiles(crs, accessor.get(INotificationService), accessor.get(IQuickInputService), accessor.get(ITestProfileService).all());\n\t\tif (selected.length) {\n\t\t\tcrs.start(selected);\n\t\t}\n\t}\n}\n\nabstract class ExecuteSelectedAction extends ViewAction<TestingExplorerView> {\n\tconstructor(options: IAction2Options, private readonly group: TestRunProfileBitset) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: group === TestRunProfileBitset.Run\n\t\t\t\t\t? ActionOrder.Run\n\t\t\t\t\t: group === TestRunProfileBitset.Debug\n\t\t\t\t\t\t? ActionOrder.Debug\n\t\t\t\t\t\t: ActionOrder.Coverage,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\t\t\tTestingContextKeys.isRunning.isEqualTo(false),\n\t\t\t\t\tTestingContextKeys.capabilityToContextKey[group].isEqualTo(true),\n\t\t\t\t)\n\t\t\t}],\n\t\t\tcategory,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(accessor: ServicesAccessor, view: TestingExplorerView): Promise<ITestResult | undefined> {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude();\n\t\treturn accessor.get(ITestService).runTests({ tests: include, exclude, group: this.group });\n\t}\n}\n\nexport class GetSelectedProfiles extends Action2 {\n\tconstructor() {\n\t\tsuper({ id: TestCommandId.GetSelectedProfiles, title: localize2('getSelectedProfiles', 'Get Selected Profiles') });\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst profiles = accessor.get(ITestProfileService);\n\t\treturn [\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Run),\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Debug),\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Coverage),\n\t\t].map(p => ({\n\t\t\tcontrollerId: p.controllerId,\n\t\t\tlabel: p.label,\n\t\t\tkind: p.group & TestRunProfileBitset.Coverage\n\t\t\t\t? ExtTestRunProfileKind.Coverage\n\t\t\t\t: p.group & TestRunProfileBitset.Debug\n\t\t\t\t\t? ExtTestRunProfileKind.Debug\n\t\t\t\t\t: ExtTestRunProfileKind.Run,\n\t\t}));\n\t}\n}\n\nexport class GetExplorerSelection extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({ id: TestCommandId.GetExplorerSelection, title: localize2('getExplorerSelection', 'Get Explorer Selection'), viewId: Testing.ExplorerViewId });\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude(undefined, undefined, 'selected');\n\t\tconst mapper = (i: InternalTestItem) => i.item.extId;\n\t\treturn { include: include.map(mapper), exclude: exclude.map(mapper) };\n\t}\n}\n\nexport class RunSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunSelectedAction,\n\t\t\ttitle: LABEL_RUN_TESTS,\n\t\t\ticon: icons.testingRunAllIcon,\n\t\t}, TestRunProfileBitset.Run);\n\t}\n}\n\nexport class DebugSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugSelectedAction,\n\t\t\ttitle: LABEL_DEBUG_TESTS,\n\t\t\ticon: icons.testingDebugAllIcon,\n\t\t}, TestRunProfileBitset.Debug);\n\t}\n}\n\nexport class CoverageSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageSelectedAction,\n\t\t\ttitle: LABEL_COVERAGE_TESTS,\n\t\t\ticon: icons.testingCoverageAllIcon,\n\t\t}, TestRunProfileBitset.Coverage);\n\t}\n}\n\nconst showDiscoveringWhile = <R>(progress: IProgressService, task: Promise<R>): Promise<R> => {\n\treturn progress.withProgress(\n\t\t{\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('discoveringTests', 'Discovering Tests'),\n\t\t},\n\t\t() => task,\n\t);\n};\n\nabstract class RunOrDebugAllTestsAction extends Action2 {\n\tconstructor(options: IAction2Options, private readonly group: TestRunProfileBitset, private noTestsFoundError: string) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tcategory,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[group].isEqualTo(true),\n\t\t\t}]\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst notifications = accessor.get(INotificationService);\n\n\t\tconst roots = [...testService.collection.rootItems].filter(r => r.children.size\n\t\t\t|| r.expand === TestItemExpandState.Expandable || r.expand === TestItemExpandState.BusyExpanding);\n\t\tif (!roots.length) {\n\t\t\tnotifications.info(this.noTestsFoundError);\n\t\t\treturn;\n\t\t}\n\n\t\tawait testService.runTests({ tests: roots, group: this.group });\n\t}\n}\n\nexport class RunAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunAllAction,\n\t\t\t\ttitle: localize2('runAllTests', 'Run All Tests'),\n\t\t\t\ticon: icons.testingRunAllIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyA),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Run,\n\t\t\tlocalize('noTestProvider', 'No tests found in this workspace. You may need to install a test provider extension'),\n\t\t);\n\t}\n}\n\nexport class DebugAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.DebugAllAction,\n\t\t\t\ttitle: localize2('debugAllTests', 'Debug All Tests'),\n\t\t\t\ticon: icons.testingDebugIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyA),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Debug,\n\t\t\tlocalize('noDebugTestProvider', 'No debuggable tests found in this workspace. You may need to install a test provider extension'),\n\t\t);\n\t}\n}\n\nexport class CoverageAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunAllWithCoverageAction,\n\t\t\t\ttitle: localize2('runAllWithCoverage', 'Run All Tests with Coverage'),\n\t\t\t\ticon: icons.testingCoverageIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Coverage,\n\t\t\tlocalize('noCoverageTestProvider', 'No tests with coverage runners found in this workspace. You may need to install a test provider extension'),\n\t\t);\n\t}\n}\n\nexport class CancelTestRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CancelTestRunAction,\n\t\t\ttitle: localize2('testing.cancelRun', 'Cancel Test Run'),\n\t\t\ticon: icons.testingCancelIcon,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyX),\n\t\t\t},\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Run,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\t\t\tContextKeyExpr.equals(TestingContextKeys.isRunning.serialize(), true),\n\t\t\t\t)\n\t\t\t}]\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor, resultId?: string, taskId?: string) {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst testService = accessor.get(ITestService);\n\t\tif (resultId) {\n\t\t\ttestService.cancelTestRun(resultId, taskId);\n\t\t} else {\n\t\t\tfor (const run of resultService.results) {\n\t\t\t\tif (!run.completedAt) {\n\t\t\t\t\ttestService.cancelTestRun(run.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class TestingViewAsListAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingViewAsListAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2('testing.viewAsList', 'View as List'),\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(TestExplorerViewMode.List),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: 'viewAs',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.List;\n\t}\n}\n\nexport class TestingViewAsTreeAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingViewAsTreeAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2('testing.viewAsTree', 'View as Tree'),\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(TestExplorerViewMode.Tree),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: 'viewAs',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.Tree;\n\t}\n}\n\n\nexport class TestingSortByStatusAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByStatusAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2('testing.sortByStatus', 'Sort by Status'),\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByStatus),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByStatus;\n\t}\n}\n\nexport class TestingSortByLocationAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByLocationAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2('testing.sortByLocation', 'Sort by Location'),\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByLocation),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByLocation;\n\t}\n}\n\nexport class TestingSortByDurationAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByDurationAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2('testing.sortByDuration', 'Sort by Duration'),\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByDuration),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByDuration;\n\t}\n}\n\nexport class ShowMostRecentOutputAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ShowMostRecentOutputAction,\n\t\t\ttitle: localize2('testing.showMostRecentOutput', 'Show Output'),\n\t\t\tcategory,\n\t\t\ticon: Codicon.terminal,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyO),\n\t\t\t},\n\t\t\tprecondition: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\t}, {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true)\n\t\t\t}]\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst viewService = accessor.get(IViewsService);\n\t\tconst testView = await viewService.openView<TestResultsView>(Testing.ResultsViewId, true);\n\t\ttestView?.showLatestRun();\n\t}\n}\n\nexport class CollapseAllAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CollapseAllAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: localize2('testing.collapseAll', 'Collapse All Tests'),\n\t\t\ticon: Codicon.collapseAll,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\tgroup: 'displayAction',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.collapseAll();\n\t}\n}\n\nexport class ClearTestResultsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ClearTestResultsAction,\n\t\t\ttitle: localize2('testing.clearResults', 'Clear All Results'),\n\t\t\tcategory,\n\t\t\ticon: Codicon.clearAll,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.TestPeekTitle,\n\t\t\t}, {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t}, {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.ClearResults,\n\t\t\t\tgroup: 'displayAction',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}, {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.ClearResults,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ResultsViewId)\n\t\t\t}],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestResultService).clear();\n\t}\n}\n\nexport class GoToTest extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.GoToTest,\n\t\t\ttitle: localize2('testing.editFocusedTest', 'Go to Test'),\n\t\t\ticon: Codicon.goToFile,\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.GoToTest, TestingContextKeys.testItemHasUri.isEqualTo(true)),\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib - 10,\n\t\t\t\twhen: FocusedViewContext.isEqualTo(Testing.ExplorerViewId),\n\t\t\t\tprimary: KeyCode.Enter | KeyMod.Alt,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, element?: TestExplorerTreeElement, preserveFocus?: boolean) {\n\t\tif (!element) {\n\t\t\tconst view = accessor.get(IViewsService).getActiveViewWithId<TestingExplorerView>(Testing.ExplorerViewId);\n\t\t\telement = view?.focusedTreeElements[0];\n\t\t}\n\n\t\tif (element && element instanceof TestItemTreeElement) {\n\t\t\taccessor.get(ICommandService).executeCommand('vscode.revealTest', element.test.item.extId, preserveFocus);\n\t\t}\n\t}\n}\n\nasync function getTestsAtCursor(testService: ITestService, uriIdentityService: IUriIdentityService, uri: URI, position: Position, filter?: (test: InternalTestItem) => boolean) {\n\t// testsInFile will descend in the test tree. We assume that as we go\n\t// deeper, ranges get more specific. We'll want to run all tests whose\n\t// range is equal to the most specific range we find (see #133519)\n\t//\n\t// If we don't find any test whose range contains the position, we pick\n\t// the closest one before the position. Again, if we find several tests\n\t// whose range is equal to the closest one, we run them all.\n\n\tlet bestNodes: InternalTestItem[] = [];\n\tlet bestRange: Range | undefined;\n\n\tlet bestNodesBefore: InternalTestItem[] = [];\n\tlet bestRangeBefore: Range | undefined;\n\n\tfor await (const test of testsInFile(testService, uriIdentityService, uri)) {\n\t\tif (!test.item.range || filter?.(test) === false) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst irange = Range.lift(test.item.range);\n\t\tif (irange.containsPosition(position)) {\n\t\t\tif (bestRange && Range.equalsRange(test.item.range, bestRange)) {\n\t\t\t\t// check that a parent isn't already included (#180760)\n\t\t\t\tif (!bestNodes.some(b => TestId.isChild(b.item.extId, test.item.extId))) {\n\t\t\t\t\tbestNodes.push(test);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbestRange = irange;\n\t\t\t\tbestNodes = [test];\n\t\t\t}\n\t\t} else if (Position.isBefore(irange.getStartPosition(), position)) {\n\t\t\tif (!bestRangeBefore || bestRangeBefore.getStartPosition().isBefore(irange.getStartPosition())) {\n\t\t\t\tbestRangeBefore = irange;\n\t\t\t\tbestNodesBefore = [test];\n\t\t\t} else if (irange.equalsRange(bestRangeBefore) && !bestNodesBefore.some(b => TestId.isChild(b.item.extId, test.item.extId))) {\n\t\t\t\tbestNodesBefore.push(test);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bestNodes.length ? bestNodes : bestNodesBefore;\n}\n\nconst enum EditorContextOrder {\n\tRunAtCursor,\n\tDebugAtCursor,\n\tRunInFile,\n\tDebugInFile,\n\tGoToRelated,\n\tPeekRelated,\n}\n\nabstract class ExecuteTestAtCursor extends Action2 {\n\tconstructor(options: IAction2Options, protected readonly group: TestRunProfileBitset) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: hasAnyTestProvider,\n\t\t\t}, {\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\torder: group === TestRunProfileBitset.Run ? EditorContextOrder.RunAtCursor : EditorContextOrder.DebugAtCursor,\n\t\t\t\twhen: ContextKeyExpr.and(TestingContextKeys.activeEditorHasTests, TestingContextKeys.capabilityToContextKey[group]),\n\t\t\t}]\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst activeEditorPane = editorService.activeEditorPane;\n\t\tlet editor = codeEditorService.getActiveCodeEditor();\n\t\tif (!activeEditorPane || !editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (editor instanceof EmbeddedCodeEditorWidget) {\n\t\t\teditor = editor.getParentEditor();\n\t\t}\n\n\t\tconst position = editor?.getPosition();\n\t\tconst model = editor?.getModel();\n\t\tif (!position || !model || !('uri' in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\t\tconst progressService = accessor.get(IProgressService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tconst saveBeforeTest = getTestingConfiguration(configurationService, TestingConfigKeys.SaveBeforeTest);\n\t\tif (saveBeforeTest) {\n\t\t\tawait editorService.save({ editor: activeEditorPane.input, groupId: activeEditorPane.group.id });\n\t\t\tawait testService.syncTests();\n\t\t}\n\n\n\t\t// testsInFile will descend in the test tree. We assume that as we go\n\t\t// deeper, ranges get more specific. We'll want to run all tests whose\n\t\t// range is equal to the most specific range we find (see #133519)\n\t\t//\n\t\t// If we don't find any test whose range contains the position, we pick\n\t\t// the closest one before the position. Again, if we find several tests\n\t\t// whose range is equal to the closest one, we run them all.\n\t\tconst testsToRun = await showDiscoveringWhile(progressService,\n\t\t\tgetTestsAtCursor(\n\t\t\t\ttestService,\n\t\t\t\turiIdentityService,\n\t\t\t\tmodel.uri,\n\t\t\t\tposition,\n\t\t\t\ttest => !!(profileService.capabilitiesForTest(test.item) & this.group)\n\t\t\t)\n\t\t);\n\n\t\tif (testsToRun.length) {\n\t\t\tawait testService.runTests({ group: this.group, tests: testsToRun });\n\t\t\treturn;\n\t\t}\n\n\t\tconst relatedTests = await testService.getTestsRelatedToCode(model.uri, position);\n\t\tif (relatedTests.length) {\n\t\t\tawait testService.runTests({ group: this.group, tests: relatedTests });\n\t\t\treturn;\n\t\t}\n\n\t\tif (editor) {\n\t\t\tMessageController.get(editor)?.showMessage(localize('noTestsAtCursor', \"No tests found here\"), position);\n\t\t}\n\t}\n}\n\nexport class RunAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunAtCursor,\n\t\t\ttitle: localize2('testing.runAtCursor', 'Run Test at Cursor'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyC),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Run);\n\t}\n}\n\nexport class DebugAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugAtCursor,\n\t\t\ttitle: localize2('testing.debugAtCursor', 'Debug Test at Cursor'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyC),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Debug);\n\t}\n}\n\nexport class CoverageAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageAtCursor,\n\t\t\ttitle: localize2('testing.coverageAtCursor', 'Run Test at Cursor with Coverage'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Coverage);\n\t}\n}\n\nabstract class ExecuteTestsUnderUriAction extends Action2 {\n\tconstructor(options: IAction2Options, protected readonly group: TestRunProfileBitset) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ExplorerContext,\n\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[group].isEqualTo(true),\n\t\t\t\tgroup: '6.5_testing',\n\t\t\t\torder: (group === TestRunProfileBitset.Run ? ActionOrder.Run : ActionOrder.Debug) + 0.1,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, uri: URI): Promise<unknown> {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst tests = await Iterable.asyncToArray(testsUnderUri(\n\t\t\ttestService,\n\t\t\taccessor.get(IUriIdentityService),\n\t\t\turi\n\t\t));\n\n\t\tif (!tests.length) {\n\t\t\tnotificationService.notify({ message: localize('noTests', 'No tests found in the selected file or folder'), severity: Severity.Info });\n\t\t\treturn;\n\t\t}\n\n\t\treturn testService.runTests({ tests, group: this.group });\n\t}\n}\n\nclass RunTestsUnderUri extends ExecuteTestsUnderUriAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunByUri,\n\t\t\ttitle: LABEL_RUN_TESTS,\n\t\t\tcategory,\n\t\t}, TestRunProfileBitset.Run);\n\t}\n}\n\nclass DebugTestsUnderUri extends ExecuteTestsUnderUriAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugByUri,\n\t\t\ttitle: LABEL_DEBUG_TESTS,\n\t\t\tcategory,\n\t\t}, TestRunProfileBitset.Debug);\n\t}\n}\n\nclass CoverageTestsUnderUri extends ExecuteTestsUnderUriAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageByUri,\n\t\t\ttitle: LABEL_COVERAGE_TESTS,\n\t\t\tcategory,\n\t\t}, TestRunProfileBitset.Coverage);\n\t}\n}\n\nabstract class ExecuteTestsInCurrentFile extends Action2 {\n\tconstructor(options: IAction2Options, protected readonly group: TestRunProfileBitset) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[group].isEqualTo(true),\n\t\t\t}, {\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\torder: group === TestRunProfileBitset.Run ? EditorContextOrder.RunInFile : EditorContextOrder.DebugInFile,\n\t\t\t\twhen: ContextKeyExpr.and(TestingContextKeys.activeEditorHasTests, TestingContextKeys.capabilityToContextKey[group]),\n\t\t\t}],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\tlet editor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\t\tif (editor instanceof EmbeddedCodeEditorWidget) {\n\t\t\teditor = editor.getParentEditor();\n\t\t}\n\t\tconst position = editor?.getPosition();\n\t\tconst model = editor?.getModel();\n\t\tif (!position || !model || !('uri' in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst demandedUri = model.uri.toString();\n\n\t\t// Iterate through the entire collection and run any tests that are in the\n\t\t// uri. See #138007.\n\t\tconst queue = [testService.collection.rootIds];\n\t\tconst discovered: InternalTestItem[] = [];\n\t\twhile (queue.length) {\n\t\t\tfor (const id of queue.pop()!) {\n\t\t\t\tconst node = testService.collection.getNodeById(id)!;\n\t\t\t\tif (node.item.uri?.toString() === demandedUri) {\n\t\t\t\t\tdiscovered.push(node);\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push(node.children);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (discovered.length) {\n\t\t\treturn testService.runTests({\n\t\t\t\ttests: discovered,\n\t\t\t\tgroup: this.group,\n\t\t\t});\n\t\t}\n\n\t\tif (editor) {\n\t\t\tMessageController.get(editor)?.showMessage(localize('noTestsInFile', \"No tests found in this file\"), position);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class RunCurrentFile extends ExecuteTestsInCurrentFile {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunCurrentFile,\n\t\t\ttitle: localize2('testing.runCurrentFile', 'Run Tests in Current File'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyF),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Run);\n\t}\n}\n\nexport class DebugCurrentFile extends ExecuteTestsInCurrentFile {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugCurrentFile,\n\t\t\ttitle: localize2('testing.debugCurrentFile', 'Debug Tests in Current File'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyF),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Debug);\n\t}\n}\n\nexport class CoverageCurrentFile extends ExecuteTestsInCurrentFile {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageCurrentFile,\n\t\t\ttitle: localize2('testing.coverageCurrentFile', 'Run Tests with Coverage in Current File'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyF),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Coverage);\n\t}\n}\n\nexport const discoverAndRunTests = async (\n\tcollection: IMainThreadTestCollection,\n\tprogress: IProgressService,\n\tids: ReadonlyArray<string>,\n\trunTests: (tests: ReadonlyArray<InternalTestItem>) => Promise<ITestResult>,\n): Promise<ITestResult | undefined> => {\n\tconst todo = Promise.all(ids.map(p => expandAndGetTestById(collection, p)));\n\tconst tests = (await showDiscoveringWhile(progress, todo)).filter(isDefined);\n\treturn tests.length ? await runTests(tests) : undefined;\n};\n\nabstract class RunOrDebugExtsByPath extends Action2 {\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor, ...args: unknown[]) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tawait discoverAndRunTests(\n\t\t\taccessor.get(ITestService).collection,\n\t\t\taccessor.get(IProgressService),\n\t\t\t[...this.getTestExtIdsToRun(accessor, ...args)],\n\t\t\ttests => this.runTest(testService, tests),\n\t\t);\n\t}\n\n\tprotected abstract getTestExtIdsToRun(accessor: ServicesAccessor, ...args: unknown[]): Iterable<string>;\n\n\tprotected abstract runTest(service: ITestService, node: readonly InternalTestItem[]): Promise<ITestResult>;\n}\n\nabstract class RunOrDebugFailedTests extends RunOrDebugExtsByPath {\n\tconstructor(options: IAction2Options) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: hasAnyTestProvider,\n\t\t\t},\n\t\t});\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected getTestExtIdsToRun(accessor: ServicesAccessor) {\n\t\tconst { results } = accessor.get(ITestResultService);\n\t\tconst ids = new Set<string>();\n\t\tfor (let i = results.length - 1; i >= 0; i--) {\n\t\t\tconst resultSet = results[i];\n\t\t\tfor (const test of resultSet.tests) {\n\t\t\t\tif (isFailedState(test.ownComputedState)) {\n\t\t\t\t\tids.add(test.item.extId);\n\t\t\t\t} else {\n\t\t\t\t\tids.delete(test.item.extId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ids;\n\t}\n}\n\n\nabstract class RunOrDebugLastRun extends Action2 {\n\tconstructor(options: IAction2Options) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\thasAnyTestProvider,\n\t\t\t\t\tTestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected abstract getGroup(): TestRunProfileBitset;\n\n\tprotected getLastTestRunRequest(accessor: ServicesAccessor, runId?: string) {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst lastResult = runId ? resultService.results.find(r => r.id === runId) : resultService.results[0];\n\t\treturn lastResult?.request;\n\t}\n\n\t/** @inheritdoc */\n\tpublic override async run(accessor: ServicesAccessor, runId?: string) {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst lastResult = runId ? resultService.results.find(r => r.id === runId) : resultService.results[0];\n\t\tif (!lastResult) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst req = lastResult.request;\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst profileExists = (t: { controllerId: string; profileId: number }) =>\n\t\t\tprofileService.getControllerProfiles(t.controllerId).some(p => p.profileId === t.profileId);\n\n\t\tawait discoverAndRunTests(\n\t\t\ttestService.collection,\n\t\t\taccessor.get(IProgressService),\n\t\t\treq.targets.flatMap(t => t.testIds),\n\t\t\ttests => {\n\t\t\t\t// If we're requesting a re-run in the same group and have the same profiles\n\t\t\t\t// as were used before, then use those exactly. Otherwise guess naively.\n\t\t\t\tif (this.getGroup() & req.group && req.targets.every(profileExists)) {\n\t\t\t\t\treturn testService.runResolvedTests({\n\t\t\t\t\t\ttargets: req.targets,\n\t\t\t\t\t\tgroup: req.group,\n\t\t\t\t\t\texclude: req.exclude,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn testService.runTests({ tests, group: this.getGroup() });\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n}\n\nexport class ReRunFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ReRunFailedTests,\n\t\t\ttitle: localize2('testing.reRunFailTests', 'Rerun Failed Tests'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyE),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class DebugFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugFailedTests,\n\t\t\ttitle: localize2('testing.debugFailTests', 'Debug Failed Tests'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyE),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Debug,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class ReRunLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ReRunLastRun,\n\t\t\ttitle: localize2('testing.reRunLastRun', 'Rerun Last Run'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyL),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected override getGroup(): TestRunProfileBitset {\n\t\treturn TestRunProfileBitset.Run;\n\t}\n}\n\nexport class DebugLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugLastRun,\n\t\t\ttitle: localize2('testing.debugLastRun', 'Debug Last Run'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyL),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected override getGroup(): TestRunProfileBitset {\n\t\treturn TestRunProfileBitset.Debug;\n\t}\n}\n\nexport class CoverageLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageLastRun,\n\t\t\ttitle: localize2('testing.coverageLastRun', 'Rerun Last Run with Coverage'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyL),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected override getGroup(): TestRunProfileBitset {\n\t\treturn TestRunProfileBitset.Coverage;\n\t}\n}\n\nexport class SearchForTestExtension extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.SearchForTestExtension,\n\t\t\ttitle: localize2('testing.searchForTestExtension', 'Search for Test Extension'),\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor.get(IExtensionsWorkbenchService).openSearch('@category:\"testing\"');\n\t}\n}\n\nexport class OpenOutputPeek extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.OpenOutputPeek,\n\t\t\ttitle: localize2('testing.openOutputPeek', 'Peek Output'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyM),\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestingPeekOpener).open();\n\t}\n}\n\nexport class ToggleInlineTestOutput extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ToggleInlineTestOutput,\n\t\t\ttitle: localize2('testing.toggleInlineTestOutput', 'Toggle Inline Test Output'),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyI),\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\ttestService.showInlineOutput.value = !testService.showInlineOutput.value;\n\t}\n}\n\nconst refreshMenus = (whenIsRefreshing: boolean): IAction2Options['menu'] => [\n\t{\n\t\tid: MenuId.TestItem,\n\t\tgroup: 'inline',\n\t\torder: ActionOrder.Refresh,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tTestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\tTestingContextKeys.isRefreshingTests.isEqualTo(whenIsRefreshing),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.ViewTitle,\n\t\tgroup: 'navigation',\n\t\torder: ActionOrder.Refresh,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\tTestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\tTestingContextKeys.isRefreshingTests.isEqualTo(whenIsRefreshing),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.CommandPalette,\n\t\twhen: TestingContextKeys.canRefreshTests.isEqualTo(true),\n\t},\n];\n\nexport class RefreshTestsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RefreshTestsAction,\n\t\t\ttitle: localize2('testing.refreshTests', 'Refresh Tests'),\n\t\t\tcategory,\n\t\t\ticon: icons.testingRefreshTests,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyR),\n\t\t\t\twhen: TestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\t},\n\t\t\tmenu: refreshMenus(false),\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst progressService = accessor.get(IProgressService);\n\n\t\tconst controllerIds = distinct(elements.filter(isDefined).map(e => e.test.controllerId));\n\t\treturn progressService.withProgress({ location: Testing.ViewletId }, async () => {\n\t\t\tif (controllerIds.length) {\n\t\t\t\tawait Promise.all(controllerIds.map(id => testService.refreshTests(id)));\n\t\t\t} else {\n\t\t\t\tawait testService.refreshTests();\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CancelTestRefreshAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CancelTestRefreshAction,\n\t\t\ttitle: localize2('testing.cancelTestRefresh', 'Cancel Test Refresh'),\n\t\t\tcategory,\n\t\t\ticon: icons.testingCancelRefreshTests,\n\t\t\tmenu: refreshMenus(true),\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestService).cancelRefreshTests();\n\t}\n}\n\nexport class CleareCoverage extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CoverageClear,\n\t\t\ttitle: localize2('testing.clearCoverage', 'Clear Coverage'),\n\t\t\ticon: widgetClose,\n\t\t\tcategory,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: ActionOrder.Refresh,\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.CoverageViewId)\n\t\t\t}, {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.isTestCoverageOpen.isEqualTo(true),\n\t\t\t}]\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestCoverageService).closeCoverage();\n\t}\n}\n\nexport class OpenCoverage extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.OpenCoverage,\n\t\t\ttitle: localize2('testing.openCoverage', 'Open Coverage'),\n\t\t\tcategory,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t}]\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst results = accessor.get(ITestResultService).results;\n\t\tconst task = results.length && results[0].tasks.find(r => r.coverage);\n\t\tif (!task) {\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tnotificationService.info(localize('testing.noCoverage', 'No coverage information available on the last test run.'));\n\t\t\treturn;\n\t\t}\n\n\t\taccessor.get(ITestCoverageService).openCoverage(task, true);\n\t}\n}\n\nabstract class TestNavigationAction extends SymbolNavigationAction {\n\tprotected testService!: ITestService; // little hack...\n\tprotected uriIdentityService!: IUriIdentityService;\n\n\toverride runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, ...args: any[]) {\n\t\tthis.testService = accessor.get(ITestService);\n\t\tthis.uriIdentityService = accessor.get(IUriIdentityService);\n\t\treturn super.runEditorCommand(accessor, editor, ...args);\n\t}\n\n\tprotected override _getAlternativeCommand(editor: IActiveCodeEditor): string {\n\t\treturn editor.getOption(EditorOption.gotoLocation).alternativeTestsCommand;\n\t}\n\tprotected override _getGoToPreference(editor: IActiveCodeEditor): GoToLocationValues {\n\t\treturn editor.getOption(EditorOption.gotoLocation).multipleTests || 'peek';\n\t}\n}\n\nabstract class GoToRelatedTestAction extends TestNavigationAction {\n\tprotected override async _getLocationModel(_languageFeaturesService: unknown, model: ITextModel, position: Position, token: CancellationToken): Promise<ReferencesModel | undefined> {\n\t\tconst tests = await this.testService.getTestsRelatedToCode(model.uri, position, token);\n\t\treturn new ReferencesModel(\n\t\t\ttests.map(t => t.item.uri && ({ uri: t.item.uri, range: t.item.range || new Range(1, 1, 1, 1) })).filter(isDefined),\n\t\t\tlocalize('relatedTests', 'Related Tests'),\n\t\t);\n\t}\n\n\tprotected override _getNoResultFoundMessage(): string {\n\t\treturn localize('noTestFound', 'No related tests found.');\n\t}\n}\n\nclass GoToRelatedTest extends GoToRelatedTestAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\topenToSide: false,\n\t\t\topenInPeek: false,\n\t\t\tmuteMessage: false\n\t\t}, {\n\t\t\tid: TestCommandId.GoToRelatedTest,\n\t\t\ttitle: localize2('testing.goToRelatedTest', 'Go to Related Test'),\n\t\t\tcategory,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t// todo@connor4312: make this more explicit based on cursor position\n\t\t\t\tContextKeyExpr.not(TestingContextKeys.activeEditorHasTests.key), TestingContextKeys.canGoToRelatedTest,\n\t\t\t),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\torder: EditorContextOrder.GoToRelated,\n\t\t\t}]\n\t\t});\n\t}\n}\n\nclass PeekRelatedTest extends GoToRelatedTestAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\topenToSide: false,\n\t\t\topenInPeek: true,\n\t\t\tmuteMessage: false\n\t\t}, {\n\t\t\tid: TestCommandId.PeekRelatedTest,\n\t\t\ttitle: localize2('testing.peekToRelatedTest', 'Peek Related Test'),\n\t\t\tcategory,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tTestingContextKeys.canGoToRelatedTest,\n\t\t\t\t// todo@connor4312: make this more explicit based on cursor position\n\t\t\t\tContextKeyExpr.not(TestingContextKeys.activeEditorHasTests.key),\n\t\t\t\tPeekContext.notInPeekEditor,\n\t\t\t\tEditorContextKeys.isInEmbeddedEditor.toNegated()\n\t\t\t),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\torder: EditorContextOrder.PeekRelated,\n\t\t\t}]\n\t\t});\n\t}\n}\n\nabstract class GoToRelatedCodeAction extends TestNavigationAction {\n\tprotected override async _getLocationModel(_languageFeaturesService: unknown, model: ITextModel, position: Position, token: CancellationToken): Promise<ReferencesModel | undefined> {\n\t\tconst testsAtCursor = await getTestsAtCursor(this.testService, this.uriIdentityService, model.uri, position);\n\t\tconst code = await Promise.all(testsAtCursor.map(t => this.testService.getCodeRelatedToTest(t)));\n\t\treturn new ReferencesModel(code.flat(), localize('relatedCode', 'Related Code'));\n\t}\n\n\tprotected override _getNoResultFoundMessage(): string {\n\t\treturn localize('noRelatedCode', 'No related code found.');\n\t}\n}\n\nclass GoToRelatedCode extends GoToRelatedCodeAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\topenToSide: false,\n\t\t\topenInPeek: false,\n\t\t\tmuteMessage: false\n\t\t}, {\n\t\t\tid: TestCommandId.GoToRelatedCode,\n\t\t\ttitle: localize2('testing.goToRelatedCode', 'Go to Related Code'),\n\t\t\tcategory,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tTestingContextKeys.activeEditorHasTests,\n\t\t\t\tTestingContextKeys.canGoToRelatedCode,\n\t\t\t),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\torder: EditorContextOrder.GoToRelated,\n\t\t\t}]\n\t\t});\n\t}\n}\n\nclass PeekRelatedCode extends GoToRelatedCodeAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\topenToSide: false,\n\t\t\topenInPeek: true,\n\t\t\tmuteMessage: false\n\t\t}, {\n\t\t\tid: TestCommandId.PeekRelatedCode,\n\t\t\ttitle: localize2('testing.peekToRelatedCode', 'Peek Related Code'),\n\t\t\tcategory,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tTestingContextKeys.activeEditorHasTests,\n\t\t\t\tTestingContextKeys.canGoToRelatedCode,\n\t\t\t\tPeekContext.notInPeekEditor,\n\t\t\t\tEditorContextKeys.isInEmbeddedEditor.toNegated()\n\t\t\t),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\torder: EditorContextOrder.PeekRelated,\n\t\t\t}]\n\t\t});\n\t}\n}\n\nexport const allTestActions = [\n\tCancelTestRefreshAction,\n\tCancelTestRunAction,\n\tCleareCoverage,\n\tClearTestResultsAction,\n\tCollapseAllAction,\n\tConfigureTestProfilesAction,\n\tContinuousRunTestAction,\n\tContinuousRunUsingProfileTestAction,\n\tCoverageAction,\n\tCoverageAllAction,\n\tCoverageAtCursor,\n\tCoverageCurrentFile,\n\tCoverageLastRun,\n\tCoverageSelectedAction,\n\tCoverageTestsUnderUri,\n\tDebugAction,\n\tDebugAllAction,\n\tDebugAtCursor,\n\tDebugCurrentFile,\n\tDebugFailedTests,\n\tDebugLastRun,\n\tDebugSelectedAction,\n\tDebugTestsUnderUri,\n\tGetExplorerSelection,\n\tGetSelectedProfiles,\n\tGoToRelatedCode,\n\tGoToRelatedTest,\n\tGoToTest,\n\tHideTestAction,\n\tOpenCoverage,\n\tOpenOutputPeek,\n\tPeekRelatedCode,\n\tPeekRelatedTest,\n\tRefreshTestsAction,\n\tReRunFailedTests,\n\tReRunLastRun,\n\tRunAction,\n\tRunAllAction,\n\tRunAtCursor,\n\tRunCurrentFile,\n\tRunSelectedAction,\n\tRunTestsUnderUri,\n\tRunUsingProfileAction,\n\tSearchForTestExtension,\n\tSelectDefaultTestProfiles,\n\tShowMostRecentOutputAction,\n\tStartContinuousRunAction,\n\tStopContinuousRunAction,\n\tTestingSortByDurationAction,\n\tTestingSortByLocationAction,\n\tTestingSortByStatusAction,\n\tTestingViewAsListAction,\n\tTestingViewAsTreeAction,\n\tToggleInlineTestOutput,\n\tUnhideAllTestsAction,\n\tUnhideTestAction,\n];\n"],
  "mappings": "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
  "names": ["ActionOrder", "EditorContextOrder"]
}
