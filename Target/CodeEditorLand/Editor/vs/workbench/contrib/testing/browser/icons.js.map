{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/icons.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { localize } from '../../../../nls.js';\nimport { registerIcon, spinningLoading } from '../../../../platform/theme/common/iconRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { testingColorRunAction, testStatesToIconColors, testStatesToRetiredIconColors } from './theme.js';\nimport { TestResultState } from '../common/testTypes.js';\n\nexport const testingViewIcon = registerIcon('test-view-icon', Codicon.beaker, localize('testViewIcon', 'View icon of the test view.'));\nexport const testingResultsIcon = registerIcon('test-results-icon', Codicon.checklist, localize('testingResultsIcon', 'Icons for test results.'));\nexport const testingRunIcon = registerIcon('testing-run-icon', Codicon.run, localize('testingRunIcon', 'Icon of the \"run test\" action.'));\nexport const testingRerunIcon = registerIcon('testing-rerun-icon', Codicon.refresh, localize('testingRerunIcon', 'Icon of the \"rerun tests\" action.'));\nexport const testingRunAllIcon = registerIcon('testing-run-all-icon', Codicon.runAll, localize('testingRunAllIcon', 'Icon of the \"run all tests\" action.'));\n// todo: https://github.com/microsoft/vscode-codicons/issues/72\nexport const testingDebugAllIcon = registerIcon('testing-debug-all-icon', Codicon.debugAltSmall, localize('testingDebugAllIcon', 'Icon of the \"debug all tests\" action.'));\nexport const testingDebugIcon = registerIcon('testing-debug-icon', Codicon.debugAltSmall, localize('testingDebugIcon', 'Icon of the \"debug test\" action.'));\nexport const testingCoverageIcon = registerIcon('testing-coverage-icon', Codicon.runCoverage, localize('testingCoverageIcon', 'Icon of the \"run test with coverage\" action.'));\nexport const testingCoverageAllIcon = registerIcon('testing-coverage-all-icon', Codicon.runAllCoverage, localize('testingRunAllWithCoverageIcon', 'Icon of the \"run all tests with coverage\" action.'));\nexport const testingCancelIcon = registerIcon('testing-cancel-icon', Codicon.debugStop, localize('testingCancelIcon', 'Icon to cancel ongoing test runs.'));\nexport const testingFilterIcon = registerIcon('testing-filter', Codicon.filter, localize('filterIcon', 'Icon for the \\'Filter\\' action in the testing view.'));\nexport const testingHiddenIcon = registerIcon('testing-hidden', Codicon.eyeClosed, localize('hiddenIcon', 'Icon shown beside hidden tests, when they\\'ve been shown.'));\n\nexport const testingShowAsList = registerIcon('testing-show-as-list-icon', Codicon.listTree, localize('testingShowAsList', 'Icon shown when the test explorer is disabled as a tree.'));\nexport const testingShowAsTree = registerIcon('testing-show-as-list-icon', Codicon.listFlat, localize('testingShowAsTree', 'Icon shown when the test explorer is disabled as a list.'));\n\nexport const testingUpdateProfiles = registerIcon('testing-update-profiles', Codicon.gear, localize('testingUpdateProfiles', 'Icon shown to update test profiles.'));\nexport const testingRefreshTests = registerIcon('testing-refresh-tests', Codicon.refresh, localize('testingRefreshTests', 'Icon on the button to refresh tests.'));\nexport const testingTurnContinuousRunOn = registerIcon('testing-turn-continuous-run-on', Codicon.eye, localize('testingTurnContinuousRunOn', 'Icon to turn continuous test runs on.'));\nexport const testingTurnContinuousRunOff = registerIcon('testing-turn-continuous-run-off', Codicon.eyeClosed, localize('testingTurnContinuousRunOff', 'Icon to turn continuous test runs off.'));\nexport const testingContinuousIsOn = registerIcon('testing-continuous-is-on', Codicon.eye, localize('testingTurnContinuousRunIsOn', 'Icon when continuous run is on for a test ite,.'));\nexport const testingCancelRefreshTests = registerIcon('testing-cancel-refresh-tests', Codicon.stop, localize('testingCancelRefreshTests', 'Icon on the button to cancel refreshing tests.'));\n\nexport const testingCoverageReport = registerIcon('testing-coverage', Codicon.coverage, localize('testingCoverage', 'Icon representing test coverage'));\nexport const testingWasCovered = registerIcon('testing-was-covered', Codicon.check, localize('testingWasCovered', 'Icon representing that an element was covered'));\nexport const testingCoverageMissingBranch = registerIcon('testing-missing-branch', Codicon.question, localize('testingMissingBranch', 'Icon representing a uncovered block without a range'));\n\nexport const testingStatesToIcons = new Map<TestResultState, ThemeIcon>([\n\t[TestResultState.Errored, registerIcon('testing-error-icon', Codicon.issues, localize('testingErrorIcon', 'Icon shown for tests that have an error.'))],\n\t[TestResultState.Failed, registerIcon('testing-failed-icon', Codicon.error, localize('testingFailedIcon', 'Icon shown for tests that failed.'))],\n\t[TestResultState.Passed, registerIcon('testing-passed-icon', Codicon.pass, localize('testingPassedIcon', 'Icon shown for tests that passed.'))],\n\t[TestResultState.Queued, registerIcon('testing-queued-icon', Codicon.history, localize('testingQueuedIcon', 'Icon shown for tests that are queued.'))],\n\t[TestResultState.Running, spinningLoading],\n\t[TestResultState.Skipped, registerIcon('testing-skipped-icon', Codicon.debugStepOver, localize('testingSkippedIcon', 'Icon shown for tests that are skipped.'))],\n\t[TestResultState.Unset, registerIcon('testing-unset-icon', Codicon.circleOutline, localize('testingUnsetIcon', 'Icon shown for tests that are in an unset state.'))],\n]);\n\nregisterThemingParticipant((theme, collector) => {\n\tfor (const [state, icon] of testingStatesToIcons.entries()) {\n\t\tconst color = testStatesToIconColors[state];\n\t\tconst retiredColor = testStatesToRetiredIconColors[state];\n\t\tif (!color) {\n\t\t\tcontinue;\n\t\t}\n\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icon)} {\n\t\t\tcolor: ${theme.getColor(color)} !important;\n\t\t}`);\n\t\tif (!retiredColor) {\n\t\t\tcontinue;\n\t\t}\n\t\tcollector.addRule(`\n\t\t\t.test-explorer .computed-state.retired${ThemeIcon.asCSSSelector(icon)},\n\t\t\t.testing-run-glyph.retired${ThemeIcon.asCSSSelector(icon)}{\n\t\t\t\tcolor: ${theme.getColor(retiredColor)} !important;\n\t\t\t}\n\t\t`);\n\t}\n\n\tcollector.addRule(`\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingRunIcon)},\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingRunAllIcon)},\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingDebugIcon)},\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingDebugAllIcon)} {\n\t\t\tcolor: ${theme.getColor(testingColorRunAction)};\n\t\t}\n\t`);\n});\n"],
  "mappings": "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",
  "names": []
}
