{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/icons.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tregisterIcon,\n\tspinningLoading,\n} from \"../../../../platform/theme/common/iconRegistry.js\";\nimport { registerThemingParticipant } from \"../../../../platform/theme/common/themeService.js\";\nimport { TestResultState } from \"../common/testTypes.js\";\nimport {\n\ttestStatesToIconColors,\n\ttestStatesToRetiredIconColors,\n\ttestingColorRunAction,\n} from \"./theme.js\";\n\nexport const testingViewIcon = registerIcon(\n\t\"test-view-icon\",\n\tCodicon.beaker,\n\tlocalize(\"testViewIcon\", \"View icon of the test view.\"),\n);\nexport const testingResultsIcon = registerIcon(\n\t\"test-results-icon\",\n\tCodicon.checklist,\n\tlocalize(\"testingResultsIcon\", \"Icons for test results.\"),\n);\nexport const testingRunIcon = registerIcon(\n\t\"testing-run-icon\",\n\tCodicon.run,\n\tlocalize(\"testingRunIcon\", 'Icon of the \"run test\" action.'),\n);\nexport const testingRerunIcon = registerIcon(\n\t\"testing-rerun-icon\",\n\tCodicon.refresh,\n\tlocalize(\"testingRerunIcon\", 'Icon of the \"rerun tests\" action.'),\n);\nexport const testingRunAllIcon = registerIcon(\n\t\"testing-run-all-icon\",\n\tCodicon.runAll,\n\tlocalize(\"testingRunAllIcon\", 'Icon of the \"run all tests\" action.'),\n);\n// todo: https://github.com/microsoft/vscode-codicons/issues/72\nexport const testingDebugAllIcon = registerIcon(\n\t\"testing-debug-all-icon\",\n\tCodicon.debugAltSmall,\n\tlocalize(\"testingDebugAllIcon\", 'Icon of the \"debug all tests\" action.'),\n);\nexport const testingDebugIcon = registerIcon(\n\t\"testing-debug-icon\",\n\tCodicon.debugAltSmall,\n\tlocalize(\"testingDebugIcon\", 'Icon of the \"debug test\" action.'),\n);\nexport const testingCoverageIcon = registerIcon(\n\t\"testing-coverage-icon\",\n\tCodicon.runCoverage,\n\tlocalize(\n\t\t\"testingCoverageIcon\",\n\t\t'Icon of the \"run test with coverage\" action.',\n\t),\n);\nexport const testingCoverageAllIcon = registerIcon(\n\t\"testing-coverage-all-icon\",\n\tCodicon.runAllCoverage,\n\tlocalize(\n\t\t\"testingRunAllWithCoverageIcon\",\n\t\t'Icon of the \"run all tests with coverage\" action.',\n\t),\n);\nexport const testingCancelIcon = registerIcon(\n\t\"testing-cancel-icon\",\n\tCodicon.debugStop,\n\tlocalize(\"testingCancelIcon\", \"Icon to cancel ongoing test runs.\"),\n);\nexport const testingFilterIcon = registerIcon(\n\t\"testing-filter\",\n\tCodicon.filter,\n\tlocalize(\"filterIcon\", \"Icon for the 'Filter' action in the testing view.\"),\n);\nexport const testingHiddenIcon = registerIcon(\n\t\"testing-hidden\",\n\tCodicon.eyeClosed,\n\tlocalize(\n\t\t\"hiddenIcon\",\n\t\t\"Icon shown beside hidden tests, when they've been shown.\",\n\t),\n);\n\nexport const testingShowAsList = registerIcon(\n\t\"testing-show-as-list-icon\",\n\tCodicon.listTree,\n\tlocalize(\n\t\t\"testingShowAsList\",\n\t\t\"Icon shown when the test explorer is disabled as a tree.\",\n\t),\n);\nexport const testingShowAsTree = registerIcon(\n\t\"testing-show-as-list-icon\",\n\tCodicon.listFlat,\n\tlocalize(\n\t\t\"testingShowAsTree\",\n\t\t\"Icon shown when the test explorer is disabled as a list.\",\n\t),\n);\n\nexport const testingUpdateProfiles = registerIcon(\n\t\"testing-update-profiles\",\n\tCodicon.gear,\n\tlocalize(\"testingUpdateProfiles\", \"Icon shown to update test profiles.\"),\n);\nexport const testingRefreshTests = registerIcon(\n\t\"testing-refresh-tests\",\n\tCodicon.refresh,\n\tlocalize(\"testingRefreshTests\", \"Icon on the button to refresh tests.\"),\n);\nexport const testingTurnContinuousRunOn = registerIcon(\n\t\"testing-turn-continuous-run-on\",\n\tCodicon.eye,\n\tlocalize(\n\t\t\"testingTurnContinuousRunOn\",\n\t\t\"Icon to turn continuous test runs on.\",\n\t),\n);\nexport const testingTurnContinuousRunOff = registerIcon(\n\t\"testing-turn-continuous-run-off\",\n\tCodicon.eyeClosed,\n\tlocalize(\n\t\t\"testingTurnContinuousRunOff\",\n\t\t\"Icon to turn continuous test runs off.\",\n\t),\n);\nexport const testingContinuousIsOn = registerIcon(\n\t\"testing-continuous-is-on\",\n\tCodicon.eye,\n\tlocalize(\n\t\t\"testingTurnContinuousRunIsOn\",\n\t\t\"Icon when continuous run is on for a test ite,.\",\n\t),\n);\nexport const testingCancelRefreshTests = registerIcon(\n\t\"testing-cancel-refresh-tests\",\n\tCodicon.stop,\n\tlocalize(\n\t\t\"testingCancelRefreshTests\",\n\t\t\"Icon on the button to cancel refreshing tests.\",\n\t),\n);\n\nexport const testingCoverageReport = registerIcon(\n\t\"testing-coverage\",\n\tCodicon.coverage,\n\tlocalize(\"testingCoverage\", \"Icon representing test coverage\"),\n);\nexport const testingWasCovered = registerIcon(\n\t\"testing-was-covered\",\n\tCodicon.check,\n\tlocalize(\n\t\t\"testingWasCovered\",\n\t\t\"Icon representing that an element was covered\",\n\t),\n);\nexport const testingCoverageMissingBranch = registerIcon(\n\t\"testing-missing-branch\",\n\tCodicon.question,\n\tlocalize(\n\t\t\"testingMissingBranch\",\n\t\t\"Icon representing a uncovered block without a range\",\n\t),\n);\n\nexport const testingStatesToIcons = new Map<TestResultState, ThemeIcon>([\n\t[\n\t\tTestResultState.Errored,\n\t\tregisterIcon(\n\t\t\t\"testing-error-icon\",\n\t\t\tCodicon.issues,\n\t\t\tlocalize(\n\t\t\t\t\"testingErrorIcon\",\n\t\t\t\t\"Icon shown for tests that have an error.\",\n\t\t\t),\n\t\t),\n\t],\n\t[\n\t\tTestResultState.Failed,\n\t\tregisterIcon(\n\t\t\t\"testing-failed-icon\",\n\t\t\tCodicon.error,\n\t\t\tlocalize(\"testingFailedIcon\", \"Icon shown for tests that failed.\"),\n\t\t),\n\t],\n\t[\n\t\tTestResultState.Passed,\n\t\tregisterIcon(\n\t\t\t\"testing-passed-icon\",\n\t\t\tCodicon.pass,\n\t\t\tlocalize(\"testingPassedIcon\", \"Icon shown for tests that passed.\"),\n\t\t),\n\t],\n\t[\n\t\tTestResultState.Queued,\n\t\tregisterIcon(\n\t\t\t\"testing-queued-icon\",\n\t\t\tCodicon.history,\n\t\t\tlocalize(\n\t\t\t\t\"testingQueuedIcon\",\n\t\t\t\t\"Icon shown for tests that are queued.\",\n\t\t\t),\n\t\t),\n\t],\n\t[TestResultState.Running, spinningLoading],\n\t[\n\t\tTestResultState.Skipped,\n\t\tregisterIcon(\n\t\t\t\"testing-skipped-icon\",\n\t\t\tCodicon.debugStepOver,\n\t\t\tlocalize(\n\t\t\t\t\"testingSkippedIcon\",\n\t\t\t\t\"Icon shown for tests that are skipped.\",\n\t\t\t),\n\t\t),\n\t],\n\t[\n\t\tTestResultState.Unset,\n\t\tregisterIcon(\n\t\t\t\"testing-unset-icon\",\n\t\t\tCodicon.circleOutline,\n\t\t\tlocalize(\n\t\t\t\t\"testingUnsetIcon\",\n\t\t\t\t\"Icon shown for tests that are in an unset state.\",\n\t\t\t),\n\t\t),\n\t],\n]);\n\nregisterThemingParticipant((theme, collector) => {\n\tfor (const [state, icon] of testingStatesToIcons.entries()) {\n\t\tconst color = testStatesToIconColors[state];\n\t\tconst retiredColor = testStatesToRetiredIconColors[state];\n\t\tif (!color) {\n\t\t\tcontinue;\n\t\t}\n\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icon)} {\n\t\t\tcolor: ${theme.getColor(color)} !important;\n\t\t}`);\n\t\tif (!retiredColor) {\n\t\t\tcontinue;\n\t\t}\n\t\tcollector.addRule(`\n\t\t\t.test-explorer .computed-state.retired${ThemeIcon.asCSSSelector(icon)},\n\t\t\t.testing-run-glyph.retired${ThemeIcon.asCSSSelector(icon)}{\n\t\t\t\tcolor: ${theme.getColor(retiredColor)} !important;\n\t\t\t}\n\t\t`);\n\t}\n\n\tcollector.addRule(`\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingRunIcon)},\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingRunAllIcon)},\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingDebugIcon)},\n\t\t.monaco-editor .glyph-margin-widgets ${ThemeIcon.asCSSSelector(testingDebugAllIcon)} {\n\t\t\tcolor: ${theme.getColor(testingColorRunAction)};\n\t\t}\n\t`);\n});\n"],
  "mappings": "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",
  "names": []
}
