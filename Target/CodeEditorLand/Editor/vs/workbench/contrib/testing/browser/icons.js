import{Codicon as t}from"../../../../base/common/codicons.js";import{ThemeIcon as o}from"../../../../base/common/themables.js";import{localize as e}from"../../../../nls.js";import{registerIcon as n,spinningLoading as l}from"../../../../platform/theme/common/iconRegistry.js";import{registerThemingParticipant as h}from"../../../../platform/theme/common/themeService.js";import{TestResultState as s}from"../common/testTypes.js";import{testStatesToIconColors as d,testStatesToRetiredIconColors as p,testingColorRunAction as I}from"./theme.js";const $=n("test-view-icon",t.beaker,e("testViewIcon","View icon of the test view.")),k=n("test-results-icon",t.checklist,e("testingResultsIcon","Icons for test results.")),f=n("testing-run-icon",t.run,e("testingRunIcon",'Icon of the "run test" action.')),O=n("testing-rerun-icon",t.refresh,e("testingRerunIcon",'Icon of the "rerun tests" action.')),w=n("testing-run-all-icon",t.runAll,e("testingRunAllIcon",'Icon of the "run all tests" action.')),C=n("testing-debug-all-icon",t.debugAltSmall,e("testingDebugAllIcon",'Icon of the "debug all tests" action.')),S=n("testing-debug-icon",t.debugAltSmall,e("testingDebugIcon",'Icon of the "debug test" action.')),F=n("testing-coverage-icon",t.runCoverage,e("testingCoverageIcon",'Icon of the "run test with coverage" action.')),P=n("testing-coverage-all-icon",t.runAllCoverage,e("testingRunAllWithCoverageIcon",'Icon of the "run all tests with coverage" action.')),D=n("testing-cancel-icon",t.debugStop,e("testingCancelIcon","Icon to cancel ongoing test runs.")),U=n("testing-filter",t.filter,e("filterIcon","Icon for the 'Filter' action in the testing view.")),q=n("testing-hidden",t.eyeClosed,e("hiddenIcon","Icon shown beside hidden tests, when they've been shown.")),L=n("testing-show-as-list-icon",t.listTree,e("testingShowAsList","Icon shown when the test explorer is disabled as a tree.")),M=n("testing-show-as-list-icon",t.listFlat,e("testingShowAsTree","Icon shown when the test explorer is disabled as a list.")),V=n("testing-update-profiles",t.gear,e("testingUpdateProfiles","Icon shown to update test profiles.")),W=n("testing-refresh-tests",t.refresh,e("testingRefreshTests","Icon on the button to refresh tests.")),B=n("testing-turn-continuous-run-on",t.eye,e("testingTurnContinuousRunOn","Icon to turn continuous test runs on.")),E=n("testing-turn-continuous-run-off",t.eyeClosed,e("testingTurnContinuousRunOff","Icon to turn continuous test runs off.")),Q=n("testing-continuous-is-on",t.eye,e("testingTurnContinuousRunIsOn","Icon when continuous run is on for a test ite,.")),z=n("testing-cancel-refresh-tests",t.stop,e("testingCancelRefreshTests","Icon on the button to cancel refreshing tests.")),H=n("testing-coverage",t.coverage,e("testingCoverage","Icon representing test coverage")),j=n("testing-was-covered",t.check,e("testingWasCovered","Icon representing that an element was covered")),G=n("testing-missing-branch",t.question,e("testingMissingBranch","Icon representing a uncovered block without a range")),m=new Map([[s.Errored,n("testing-error-icon",t.issues,e("testingErrorIcon","Icon shown for tests that have an error."))],[s.Failed,n("testing-failed-icon",t.error,e("testingFailedIcon","Icon shown for tests that failed."))],[s.Passed,n("testing-passed-icon",t.pass,e("testingPassedIcon","Icon shown for tests that passed."))],[s.Queued,n("testing-queued-icon",t.history,e("testingQueuedIcon","Icon shown for tests that are queued."))],[s.Running,l],[s.Skipped,n("testing-skipped-icon",t.debugStepOver,e("testingSkippedIcon","Icon shown for tests that are skipped."))],[s.Unset,n("testing-unset-icon",t.circleOutline,e("testingUnsetIcon","Icon shown for tests that are in an unset state."))]]);h((i,r)=>{for(const[g,c]of m.entries()){const a=d[g],u=p[g];a&&(r.addRule(`.monaco-workbench ${o.asCSSSelector(c)} {
			color: ${i.getColor(a)} !important;
		}`),u&&r.addRule(`
			.test-explorer .computed-state.retired${o.asCSSSelector(c)},
			.testing-run-glyph.retired${o.asCSSSelector(c)}{
				color: ${i.getColor(u)} !important;
			}
		`))}r.addRule(`
		.monaco-editor .glyph-margin-widgets ${o.asCSSSelector(f)},
		.monaco-editor .glyph-margin-widgets ${o.asCSSSelector(w)},
		.monaco-editor .glyph-margin-widgets ${o.asCSSSelector(S)},
		.monaco-editor .glyph-margin-widgets ${o.asCSSSelector(C)} {
			color: ${i.getColor(I)};
		}
	`)});export{D as testingCancelIcon,z as testingCancelRefreshTests,Q as testingContinuousIsOn,P as testingCoverageAllIcon,F as testingCoverageIcon,G as testingCoverageMissingBranch,H as testingCoverageReport,C as testingDebugAllIcon,S as testingDebugIcon,U as testingFilterIcon,q as testingHiddenIcon,W as testingRefreshTests,O as testingRerunIcon,k as testingResultsIcon,w as testingRunAllIcon,f as testingRunIcon,L as testingShowAsList,M as testingShowAsTree,m as testingStatesToIcons,E as testingTurnContinuousRunOff,B as testingTurnContinuousRunOn,V as testingUpdateProfiles,$ as testingViewIcon,j as testingWasCovered};
