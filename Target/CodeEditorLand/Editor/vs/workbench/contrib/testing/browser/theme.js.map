{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/theme.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color, RGBA } from \"../../../../base/common/color.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tbadgeBackground,\n\tbadgeForeground,\n\tchartsGreen,\n\tchartsRed,\n\tcontrastBorder,\n\tdiffInserted,\n\tdiffRemoved,\n\teditorBackground,\n\teditorErrorForeground,\n\teditorForeground,\n\teditorInfoForeground,\n\topaque,\n\tregisterColor,\n\ttransparent,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { registerThemingParticipant } from \"../../../../platform/theme/common/themeService.js\";\nimport { TestResultState } from \"../common/testTypes.js\";\n\nexport const testingColorIconFailed = registerColor(\n\t\"testing.iconFailed\",\n\t{\n\t\tdark: \"#f14c4c\",\n\t\tlight: \"#f14c4c\",\n\t\thcDark: \"#f14c4c\",\n\t\thcLight: \"#B5200D\",\n\t},\n\tlocalize(\n\t\t\"testing.iconFailed\",\n\t\t\"Color for the 'failed' icon in the test explorer.\",\n\t),\n);\n\nexport const testingColorIconErrored = registerColor(\n\t\"testing.iconErrored\",\n\t{\n\t\tdark: \"#f14c4c\",\n\t\tlight: \"#f14c4c\",\n\t\thcDark: \"#f14c4c\",\n\t\thcLight: \"#B5200D\",\n\t},\n\tlocalize(\n\t\t\"testing.iconErrored\",\n\t\t\"Color for the 'Errored' icon in the test explorer.\",\n\t),\n);\n\nexport const testingColorIconPassed = registerColor(\n\t\"testing.iconPassed\",\n\t{\n\t\tdark: \"#73c991\",\n\t\tlight: \"#73c991\",\n\t\thcDark: \"#73c991\",\n\t\thcLight: \"#007100\",\n\t},\n\tlocalize(\n\t\t\"testing.iconPassed\",\n\t\t\"Color for the 'passed' icon in the test explorer.\",\n\t),\n);\n\nexport const testingColorRunAction = registerColor(\n\t\"testing.runAction\",\n\ttestingColorIconPassed,\n\tlocalize(\"testing.runAction\", \"Color for 'run' icons in the editor.\"),\n);\n\nexport const testingColorIconQueued = registerColor(\n\t\"testing.iconQueued\",\n\t\"#cca700\",\n\tlocalize(\n\t\t\"testing.iconQueued\",\n\t\t\"Color for the 'Queued' icon in the test explorer.\",\n\t),\n);\n\nexport const testingColorIconUnset = registerColor(\n\t\"testing.iconUnset\",\n\t\"#848484\",\n\tlocalize(\n\t\t\"testing.iconUnset\",\n\t\t\"Color for the 'Unset' icon in the test explorer.\",\n\t),\n);\n\nexport const testingColorIconSkipped = registerColor(\n\t\"testing.iconSkipped\",\n\t\"#848484\",\n\tlocalize(\n\t\t\"testing.iconSkipped\",\n\t\t\"Color for the 'Skipped' icon in the test explorer.\",\n\t),\n);\n\nexport const testingPeekBorder = registerColor(\n\t\"testing.peekBorder\",\n\t{\n\t\tdark: editorErrorForeground,\n\t\tlight: editorErrorForeground,\n\t\thcDark: contrastBorder,\n\t\thcLight: contrastBorder,\n\t},\n\tlocalize(\"testing.peekBorder\", \"Color of the peek view borders and arrow.\"),\n);\n\nexport const testingMessagePeekBorder = registerColor(\n\t\"testing.messagePeekBorder\",\n\t{\n\t\tdark: editorInfoForeground,\n\t\tlight: editorInfoForeground,\n\t\thcDark: contrastBorder,\n\t\thcLight: contrastBorder,\n\t},\n\tlocalize(\n\t\t\"testing.messagePeekBorder\",\n\t\t\"Color of the peek view borders and arrow when peeking a logged message.\",\n\t),\n);\n\nexport const testingPeekHeaderBackground = registerColor(\n\t\"testing.peekHeaderBackground\",\n\t{\n\t\tdark: transparent(editorErrorForeground, 0.1),\n\t\tlight: transparent(editorErrorForeground, 0.1),\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tlocalize(\"testing.peekBorder\", \"Color of the peek view borders and arrow.\"),\n);\n\nexport const testingPeekMessageHeaderBackground = registerColor(\n\t\"testing.messagePeekHeaderBackground\",\n\t{\n\t\tdark: transparent(editorInfoForeground, 0.1),\n\t\tlight: transparent(editorInfoForeground, 0.1),\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tlocalize(\n\t\t\"testing.messagePeekHeaderBackground\",\n\t\t\"Color of the peek view borders and arrow when peeking a logged message.\",\n\t),\n);\n\nexport const testingCoveredBackground = registerColor(\n\t\"testing.coveredBackground\",\n\t{\n\t\tdark: diffInserted,\n\t\tlight: diffInserted,\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tlocalize(\n\t\t\"testing.coveredBackground\",\n\t\t\"Background color of text that was covered.\",\n\t),\n);\n\nexport const testingCoveredBorder = registerColor(\n\t\"testing.coveredBorder\",\n\t{\n\t\tdark: transparent(testingCoveredBackground, 0.75),\n\t\tlight: transparent(testingCoveredBackground, 0.75),\n\t\thcDark: contrastBorder,\n\t\thcLight: contrastBorder,\n\t},\n\tlocalize(\"testing.coveredBorder\", \"Border color of text that was covered.\"),\n);\n\nexport const testingCoveredGutterBackground = registerColor(\n\t\"testing.coveredGutterBackground\",\n\t{\n\t\tdark: transparent(diffInserted, 0.6),\n\t\tlight: transparent(diffInserted, 0.6),\n\t\thcDark: chartsGreen,\n\t\thcLight: chartsGreen,\n\t},\n\tlocalize(\n\t\t\"testing.coveredGutterBackground\",\n\t\t\"Gutter color of regions where code was covered.\",\n\t),\n);\n\nexport const testingUncoveredBranchBackground = registerColor(\n\t\"testing.uncoveredBranchBackground\",\n\t{\n\t\tdark: opaque(transparent(diffRemoved, 2), editorBackground),\n\t\tlight: opaque(transparent(diffRemoved, 2), editorBackground),\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tlocalize(\n\t\t\"testing.uncoveredBranchBackground\",\n\t\t\"Background of the widget shown for an uncovered branch.\",\n\t),\n);\n\nexport const testingUncoveredBackground = registerColor(\n\t\"testing.uncoveredBackground\",\n\t{\n\t\tdark: diffRemoved,\n\t\tlight: diffRemoved,\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tlocalize(\n\t\t\"testing.uncoveredBackground\",\n\t\t\"Background color of text that was not covered.\",\n\t),\n);\n\nexport const testingUncoveredBorder = registerColor(\n\t\"testing.uncoveredBorder\",\n\t{\n\t\tdark: transparent(testingUncoveredBackground, 0.75),\n\t\tlight: transparent(testingUncoveredBackground, 0.75),\n\t\thcDark: contrastBorder,\n\t\thcLight: contrastBorder,\n\t},\n\tlocalize(\n\t\t\"testing.uncoveredBorder\",\n\t\t\"Border color of text that was not covered.\",\n\t),\n);\n\nexport const testingUncoveredGutterBackground = registerColor(\n\t\"testing.uncoveredGutterBackground\",\n\t{\n\t\tdark: transparent(diffRemoved, 1.5),\n\t\tlight: transparent(diffRemoved, 1.5),\n\t\thcDark: chartsRed,\n\t\thcLight: chartsRed,\n\t},\n\tlocalize(\n\t\t\"testing.uncoveredGutterBackground\",\n\t\t\"Gutter color of regions where code not covered.\",\n\t),\n);\n\nexport const testingCoverCountBadgeBackground = registerColor(\n\t\"testing.coverCountBadgeBackground\",\n\tbadgeBackground,\n\tlocalize(\n\t\t\"testing.coverCountBadgeBackground\",\n\t\t\"Background for the badge indicating execution count\",\n\t),\n);\n\nexport const testingCoverCountBadgeForeground = registerColor(\n\t\"testing.coverCountBadgeForeground\",\n\tbadgeForeground,\n\tlocalize(\n\t\t\"testing.coverCountBadgeForeground\",\n\t\t\"Foreground for the badge indicating execution count\",\n\t),\n);\n\nregisterColor(\n\t\"testing.message.error.decorationForeground\",\n\t{\n\t\tdark: editorErrorForeground,\n\t\tlight: editorErrorForeground,\n\t\thcDark: editorForeground,\n\t\thcLight: editorForeground,\n\t},\n\tlocalize(\n\t\t\"testing.message.error.decorationForeground\",\n\t\t\"Text color of test error messages shown inline in the editor.\",\n\t),\n);\nregisterColor(\n\t\"testing.message.error.lineBackground\",\n\t{\n\t\tdark: new Color(new RGBA(255, 0, 0, 0.1)),\n\t\tlight: new Color(new RGBA(255, 0, 0, 0.1)),\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tlocalize(\n\t\t\"testing.message.error.marginBackground\",\n\t\t\"Margin color beside error messages shown inline in the editor.\",\n\t),\n);\nregisterColor(\n\t\"testing.message.info.decorationForeground\",\n\ttransparent(editorForeground, 0.5),\n\tlocalize(\n\t\t\"testing.message.info.decorationForeground\",\n\t\t\"Text color of test info messages shown inline in the editor.\",\n\t),\n);\nregisterColor(\n\t\"testing.message.info.lineBackground\",\n\tnull,\n\tlocalize(\n\t\t\"testing.message.info.marginBackground\",\n\t\t\"Margin color beside info messages shown inline in the editor.\",\n\t),\n);\n\nexport const testStatesToIconColors: { [K in TestResultState]?: string } = {\n\t[TestResultState.Errored]: testingColorIconErrored,\n\t[TestResultState.Failed]: testingColorIconFailed,\n\t[TestResultState.Passed]: testingColorIconPassed,\n\t[TestResultState.Queued]: testingColorIconQueued,\n\t[TestResultState.Unset]: testingColorIconUnset,\n\t[TestResultState.Skipped]: testingColorIconSkipped,\n};\n\nexport const testingRetiredColorIconErrored = registerColor(\n\t\"testing.iconErrored.retired\",\n\ttransparent(testingColorIconErrored, 0.7),\n\tlocalize(\n\t\t\"testing.iconErrored.retired\",\n\t\t\"Retired color for the 'Errored' icon in the test explorer.\",\n\t),\n);\n\nexport const testingRetiredColorIconFailed = registerColor(\n\t\"testing.iconFailed.retired\",\n\ttransparent(testingColorIconFailed, 0.7),\n\tlocalize(\n\t\t\"testing.iconFailed.retired\",\n\t\t\"Retired color for the 'failed' icon in the test explorer.\",\n\t),\n);\n\nexport const testingRetiredColorIconPassed = registerColor(\n\t\"testing.iconPassed.retired\",\n\ttransparent(testingColorIconPassed, 0.7),\n\tlocalize(\n\t\t\"testing.iconPassed.retired\",\n\t\t\"Retired color for the 'passed' icon in the test explorer.\",\n\t),\n);\n\nexport const testingRetiredColorIconQueued = registerColor(\n\t\"testing.iconQueued.retired\",\n\ttransparent(testingColorIconQueued, 0.7),\n\tlocalize(\n\t\t\"testing.iconQueued.retired\",\n\t\t\"Retired color for the 'Queued' icon in the test explorer.\",\n\t),\n);\n\nexport const testingRetiredColorIconUnset = registerColor(\n\t\"testing.iconUnset.retired\",\n\ttransparent(testingColorIconUnset, 0.7),\n\tlocalize(\n\t\t\"testing.iconUnset.retired\",\n\t\t\"Retired color for the 'Unset' icon in the test explorer.\",\n\t),\n);\n\nexport const testingRetiredColorIconSkipped = registerColor(\n\t\"testing.iconSkipped.retired\",\n\ttransparent(testingColorIconSkipped, 0.7),\n\tlocalize(\n\t\t\"testing.iconSkipped.retired\",\n\t\t\"Retired color for the 'Skipped' icon in the test explorer.\",\n\t),\n);\n\nexport const testStatesToRetiredIconColors: {\n\t[K in TestResultState]?: string;\n} = {\n\t[TestResultState.Errored]: testingRetiredColorIconErrored,\n\t[TestResultState.Failed]: testingRetiredColorIconFailed,\n\t[TestResultState.Passed]: testingRetiredColorIconPassed,\n\t[TestResultState.Queued]: testingRetiredColorIconQueued,\n\t[TestResultState.Unset]: testingRetiredColorIconUnset,\n\t[TestResultState.Skipped]: testingRetiredColorIconSkipped,\n};\n\nregisterThemingParticipant((theme, collector) => {\n\tconst editorBg = theme.getColor(editorBackground);\n\tconst missBadgeBackground =\n\t\teditorBg &&\n\t\ttheme\n\t\t\t.getColor(testingUncoveredBackground)\n\t\t\t?.transparent(2)\n\t\t\t.makeOpaque(editorBg);\n\n\tcollector.addRule(`\n\t.coverage-deco-inline.coverage-deco-hit.coverage-deco-hovered {\n\t\tbackground: ${theme.getColor(testingCoveredBackground)?.transparent(1.3)};\n\t\toutline-color: ${theme.getColor(testingCoveredBorder)?.transparent(2)};\n\t}\n\t.coverage-deco-inline.coverage-deco-miss.coverage-deco-hovered {\n\t\tbackground: ${theme.getColor(testingUncoveredBackground)?.transparent(1.3)};\n\t\toutline-color: ${theme.getColor(testingUncoveredBorder)?.transparent(2)};\n\t}\n\t.coverage-deco-branch-miss-indicator::before {\n\t\tborder-color: ${missBadgeBackground?.transparent(1.3)};\n\t\tbackground-color: ${missBadgeBackground};\n\t}\n\t`);\n});\n"],
  "mappings": "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",
  "names": []
}
