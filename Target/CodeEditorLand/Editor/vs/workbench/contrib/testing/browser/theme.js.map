{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/theme.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { localize } from '../../../../nls.js';\nimport { badgeBackground, badgeForeground, chartsGreen, chartsRed, contrastBorder, diffInserted, diffRemoved, editorBackground, editorErrorForeground, editorForeground, editorInfoForeground, opaque, registerColor, transparent } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { TestResultState } from '../common/testTypes.js';\n\nexport const testingColorIconFailed = registerColor('testing.iconFailed', {\n\tdark: '#f14c4c',\n\tlight: '#f14c4c',\n\thcDark: '#f14c4c',\n\thcLight: '#B5200D'\n}, localize('testing.iconFailed', \"Color for the 'failed' icon in the test explorer.\"));\n\nexport const testingColorIconErrored = registerColor('testing.iconErrored', {\n\tdark: '#f14c4c',\n\tlight: '#f14c4c',\n\thcDark: '#f14c4c',\n\thcLight: '#B5200D'\n}, localize('testing.iconErrored', \"Color for the 'Errored' icon in the test explorer.\"));\n\nexport const testingColorIconPassed = registerColor('testing.iconPassed', {\n\tdark: '#73c991',\n\tlight: '#73c991',\n\thcDark: '#73c991',\n\thcLight: '#007100'\n}, localize('testing.iconPassed', \"Color for the 'passed' icon in the test explorer.\"));\n\nexport const testingColorRunAction = registerColor('testing.runAction', testingColorIconPassed, localize('testing.runAction', \"Color for 'run' icons in the editor.\"));\n\nexport const testingColorIconQueued = registerColor('testing.iconQueued', '#cca700', localize('testing.iconQueued', \"Color for the 'Queued' icon in the test explorer.\"));\n\nexport const testingColorIconUnset = registerColor('testing.iconUnset', '#848484', localize('testing.iconUnset', \"Color for the 'Unset' icon in the test explorer.\"));\n\nexport const testingColorIconSkipped = registerColor('testing.iconSkipped', '#848484', localize('testing.iconSkipped', \"Color for the 'Skipped' icon in the test explorer.\"));\n\nexport const testingPeekBorder = registerColor('testing.peekBorder', {\n\tdark: editorErrorForeground,\n\tlight: editorErrorForeground,\n\thcDark: contrastBorder,\n\thcLight: contrastBorder\n}, localize('testing.peekBorder', 'Color of the peek view borders and arrow.'));\n\nexport const testingMessagePeekBorder = registerColor('testing.messagePeekBorder', {\n\tdark: editorInfoForeground,\n\tlight: editorInfoForeground,\n\thcDark: contrastBorder,\n\thcLight: contrastBorder\n}, localize('testing.messagePeekBorder', 'Color of the peek view borders and arrow when peeking a logged message.'));\n\nexport const testingPeekHeaderBackground = registerColor('testing.peekHeaderBackground', {\n\tdark: transparent(editorErrorForeground, 0.1),\n\tlight: transparent(editorErrorForeground, 0.1),\n\thcDark: null,\n\thcLight: null\n}, localize('testing.peekBorder', 'Color of the peek view borders and arrow.'));\n\nexport const testingPeekMessageHeaderBackground = registerColor('testing.messagePeekHeaderBackground', {\n\tdark: transparent(editorInfoForeground, 0.1),\n\tlight: transparent(editorInfoForeground, 0.1),\n\thcDark: null,\n\thcLight: null\n}, localize('testing.messagePeekHeaderBackground', 'Color of the peek view borders and arrow when peeking a logged message.'));\n\nexport const testingCoveredBackground = registerColor('testing.coveredBackground', {\n\tdark: diffInserted,\n\tlight: diffInserted,\n\thcDark: null,\n\thcLight: null\n}, localize('testing.coveredBackground', 'Background color of text that was covered.'));\n\nexport const testingCoveredBorder = registerColor('testing.coveredBorder', {\n\tdark: transparent(testingCoveredBackground, 0.75),\n\tlight: transparent(testingCoveredBackground, 0.75),\n\thcDark: contrastBorder,\n\thcLight: contrastBorder\n}, localize('testing.coveredBorder', 'Border color of text that was covered.'));\n\nexport const testingCoveredGutterBackground = registerColor('testing.coveredGutterBackground', {\n\tdark: transparent(diffInserted, 0.6),\n\tlight: transparent(diffInserted, 0.6),\n\thcDark: chartsGreen,\n\thcLight: chartsGreen\n}, localize('testing.coveredGutterBackground', 'Gutter color of regions where code was covered.'));\n\nexport const testingUncoveredBranchBackground = registerColor('testing.uncoveredBranchBackground', {\n\tdark: opaque(transparent(diffRemoved, 2), editorBackground),\n\tlight: opaque(transparent(diffRemoved, 2), editorBackground),\n\thcDark: null,\n\thcLight: null\n}, localize('testing.uncoveredBranchBackground', 'Background of the widget shown for an uncovered branch.'));\n\nexport const testingUncoveredBackground = registerColor('testing.uncoveredBackground', {\n\tdark: diffRemoved,\n\tlight: diffRemoved,\n\thcDark: null,\n\thcLight: null\n}, localize('testing.uncoveredBackground', 'Background color of text that was not covered.'));\n\nexport const testingUncoveredBorder = registerColor('testing.uncoveredBorder', {\n\tdark: transparent(testingUncoveredBackground, 0.75),\n\tlight: transparent(testingUncoveredBackground, 0.75),\n\thcDark: contrastBorder,\n\thcLight: contrastBorder\n}, localize('testing.uncoveredBorder', 'Border color of text that was not covered.'));\n\nexport const testingUncoveredGutterBackground = registerColor('testing.uncoveredGutterBackground', {\n\tdark: transparent(diffRemoved, 1.5),\n\tlight: transparent(diffRemoved, 1.5),\n\thcDark: chartsRed,\n\thcLight: chartsRed\n}, localize('testing.uncoveredGutterBackground', 'Gutter color of regions where code not covered.'));\n\nexport const testingCoverCountBadgeBackground = registerColor('testing.coverCountBadgeBackground', badgeBackground, localize('testing.coverCountBadgeBackground', 'Background for the badge indicating execution count'));\n\nexport const testingCoverCountBadgeForeground = registerColor('testing.coverCountBadgeForeground', badgeForeground, localize('testing.coverCountBadgeForeground', 'Foreground for the badge indicating execution count'));\n\n\nregisterColor(\n\t'testing.message.error.decorationForeground',\n\t{ dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorForeground, hcLight: editorForeground },\n\tlocalize('testing.message.error.decorationForeground', 'Text color of test error messages shown inline in the editor.')\n);\nregisterColor(\n\t'testing.message.error.lineBackground',\n\t{ dark: new Color(new RGBA(255, 0, 0, 0.1)), light: new Color(new RGBA(255, 0, 0, 0.1)), hcDark: null, hcLight: null },\n\tlocalize('testing.message.error.marginBackground', 'Margin color beside error messages shown inline in the editor.')\n);\nregisterColor(\n\t'testing.message.info.decorationForeground',\n\ttransparent(editorForeground, 0.5),\n\tlocalize('testing.message.info.decorationForeground', 'Text color of test info messages shown inline in the editor.')\n);\nregisterColor(\n\t'testing.message.info.lineBackground',\n\tnull,\n\tlocalize('testing.message.info.marginBackground', 'Margin color beside info messages shown inline in the editor.')\n);\n\nexport const testStatesToIconColors: { [K in TestResultState]?: string } = {\n\t[TestResultState.Errored]: testingColorIconErrored,\n\t[TestResultState.Failed]: testingColorIconFailed,\n\t[TestResultState.Passed]: testingColorIconPassed,\n\t[TestResultState.Queued]: testingColorIconQueued,\n\t[TestResultState.Unset]: testingColorIconUnset,\n\t[TestResultState.Skipped]: testingColorIconSkipped,\n};\n\nexport const testingRetiredColorIconErrored = registerColor('testing.iconErrored.retired', transparent(testingColorIconErrored, 0.7), localize('testing.iconErrored.retired', \"Retired color for the 'Errored' icon in the test explorer.\"));\n\nexport const testingRetiredColorIconFailed = registerColor('testing.iconFailed.retired', transparent(testingColorIconFailed, 0.7), localize('testing.iconFailed.retired', \"Retired color for the 'failed' icon in the test explorer.\"));\n\nexport const testingRetiredColorIconPassed = registerColor('testing.iconPassed.retired', transparent(testingColorIconPassed, 0.7), localize('testing.iconPassed.retired', \"Retired color for the 'passed' icon in the test explorer.\"));\n\nexport const testingRetiredColorIconQueued = registerColor('testing.iconQueued.retired', transparent(testingColorIconQueued, 0.7), localize('testing.iconQueued.retired', \"Retired color for the 'Queued' icon in the test explorer.\"));\n\nexport const testingRetiredColorIconUnset = registerColor('testing.iconUnset.retired', transparent(testingColorIconUnset, 0.7), localize('testing.iconUnset.retired', \"Retired color for the 'Unset' icon in the test explorer.\"));\n\nexport const testingRetiredColorIconSkipped = registerColor('testing.iconSkipped.retired', transparent(testingColorIconSkipped, 0.7), localize('testing.iconSkipped.retired', \"Retired color for the 'Skipped' icon in the test explorer.\"));\n\nexport const testStatesToRetiredIconColors: { [K in TestResultState]?: string } = {\n\t[TestResultState.Errored]: testingRetiredColorIconErrored,\n\t[TestResultState.Failed]: testingRetiredColorIconFailed,\n\t[TestResultState.Passed]: testingRetiredColorIconPassed,\n\t[TestResultState.Queued]: testingRetiredColorIconQueued,\n\t[TestResultState.Unset]: testingRetiredColorIconUnset,\n\t[TestResultState.Skipped]: testingRetiredColorIconSkipped,\n};\n\nregisterThemingParticipant((theme, collector) => {\n\n\tconst editorBg = theme.getColor(editorBackground);\n\tconst missBadgeBackground = editorBg && theme.getColor(testingUncoveredBackground)?.transparent(2).makeOpaque(editorBg);\n\n\tcollector.addRule(`\n\t.coverage-deco-inline.coverage-deco-hit.coverage-deco-hovered {\n\t\tbackground: ${theme.getColor(testingCoveredBackground)?.transparent(1.3)};\n\t\toutline-color: ${theme.getColor(testingCoveredBorder)?.transparent(2)};\n\t}\n\t.coverage-deco-inline.coverage-deco-miss.coverage-deco-hovered {\n\t\tbackground: ${theme.getColor(testingUncoveredBackground)?.transparent(1.3)};\n\t\toutline-color: ${theme.getColor(testingUncoveredBorder)?.transparent(2)};\n\t}\n\t.coverage-deco-branch-miss-indicator::before {\n\t\tborder-color: ${missBadgeBackground?.transparent(1.3)};\n\t\tbackground-color: ${missBadgeBackground};\n\t}\n\t`);\n});\n"],
  "mappings": "AAKA,SAAS,OAAO,YAAY;AAC5B,SAAS,gBAAgB;AACzB,SAAS,iBAAiB,iBAAiB,aAAa,WAAW,gBAAgB,cAAc,aAAa,kBAAkB,uBAAuB,kBAAkB,sBAAsB,QAAQ,eAAe,mBAAmB;AACzO,SAAS,kCAAkC;AAC3C,SAAS,uBAAuB;AAEzB,MAAM,yBAAyB,cAAc,sBAAsB;AAAA,EACzE,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,sBAAsB,mDAAmD,CAAC;AAE/E,MAAM,0BAA0B,cAAc,uBAAuB;AAAA,EAC3E,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,uBAAuB,oDAAoD,CAAC;AAEjF,MAAM,yBAAyB,cAAc,sBAAsB;AAAA,EACzE,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,sBAAsB,mDAAmD,CAAC;AAE/E,MAAM,wBAAwB,cAAc,qBAAqB,wBAAwB,SAAS,qBAAqB,sCAAsC,CAAC;AAE9J,MAAM,yBAAyB,cAAc,sBAAsB,WAAW,SAAS,sBAAsB,mDAAmD,CAAC;AAEjK,MAAM,wBAAwB,cAAc,qBAAqB,WAAW,SAAS,qBAAqB,kDAAkD,CAAC;AAE7J,MAAM,0BAA0B,cAAc,uBAAuB,WAAW,SAAS,uBAAuB,oDAAoD,CAAC;AAErK,MAAM,oBAAoB,cAAc,sBAAsB;AAAA,EACpE,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,sBAAsB,2CAA2C,CAAC;AAEvE,MAAM,2BAA2B,cAAc,6BAA6B;AAAA,EAClF,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,6BAA6B,yEAAyE,CAAC;AAE5G,MAAM,8BAA8B,cAAc,gCAAgC;AAAA,EACxF,MAAM,YAAY,uBAAuB,GAAG;AAAA,EAC5C,OAAO,YAAY,uBAAuB,GAAG;AAAA,EAC7C,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,sBAAsB,2CAA2C,CAAC;AAEvE,MAAM,qCAAqC,cAAc,uCAAuC;AAAA,EACtG,MAAM,YAAY,sBAAsB,GAAG;AAAA,EAC3C,OAAO,YAAY,sBAAsB,GAAG;AAAA,EAC5C,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,uCAAuC,yEAAyE,CAAC;AAEtH,MAAM,2BAA2B,cAAc,6BAA6B;AAAA,EAClF,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,6BAA6B,4CAA4C,CAAC;AAE/E,MAAM,uBAAuB,cAAc,yBAAyB;AAAA,EAC1E,MAAM,YAAY,0BAA0B,IAAI;AAAA,EAChD,OAAO,YAAY,0BAA0B,IAAI;AAAA,EACjD,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,yBAAyB,wCAAwC,CAAC;AAEvE,MAAM,iCAAiC,cAAc,mCAAmC;AAAA,EAC9F,MAAM,YAAY,cAAc,GAAG;AAAA,EACnC,OAAO,YAAY,cAAc,GAAG;AAAA,EACpC,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,mCAAmC,iDAAiD,CAAC;AAE1F,MAAM,mCAAmC,cAAc,qCAAqC;AAAA,EAClG,MAAM,OAAO,YAAY,aAAa,CAAC,GAAG,gBAAgB;AAAA,EAC1D,OAAO,OAAO,YAAY,aAAa,CAAC,GAAG,gBAAgB;AAAA,EAC3D,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,qCAAqC,yDAAyD,CAAC;AAEpG,MAAM,6BAA6B,cAAc,+BAA+B;AAAA,EACtF,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,+BAA+B,gDAAgD,CAAC;AAErF,MAAM,yBAAyB,cAAc,2BAA2B;AAAA,EAC9E,MAAM,YAAY,4BAA4B,IAAI;AAAA,EAClD,OAAO,YAAY,4BAA4B,IAAI;AAAA,EACnD,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,2BAA2B,4CAA4C,CAAC;AAE7E,MAAM,mCAAmC,cAAc,qCAAqC;AAAA,EAClG,MAAM,YAAY,aAAa,GAAG;AAAA,EAClC,OAAO,YAAY,aAAa,GAAG;AAAA,EACnC,QAAQ;AAAA,EACR,SAAS;AACV,GAAG,SAAS,qCAAqC,iDAAiD,CAAC;AAE5F,MAAM,mCAAmC,cAAc,qCAAqC,iBAAiB,SAAS,qCAAqC,qDAAqD,CAAC;AAEjN,MAAM,mCAAmC,cAAc,qCAAqC,iBAAiB,SAAS,qCAAqC,qDAAqD,CAAC;AAGxN;AAAA,EACC;AAAA,EACA,EAAE,MAAM,uBAAuB,OAAO,uBAAuB,QAAQ,kBAAkB,SAAS,iBAAiB;AAAA,EACjH,SAAS,8CAA8C,+DAA+D;AACvH;AACA;AAAA,EACC;AAAA,EACA,EAAE,MAAM,IAAI,MAAM,IAAI,KAAK,KAAK,GAAG,GAAG,GAAG,CAAC,GAAG,OAAO,IAAI,MAAM,IAAI,KAAK,KAAK,GAAG,GAAG,GAAG,CAAC,GAAG,QAAQ,MAAM,SAAS,KAAK;AAAA,EACrH,SAAS,0CAA0C,gEAAgE;AACpH;AACA;AAAA,EACC;AAAA,EACA,YAAY,kBAAkB,GAAG;AAAA,EACjC,SAAS,6CAA6C,8DAA8D;AACrH;AACA;AAAA,EACC;AAAA,EACA;AAAA,EACA,SAAS,yCAAyC,+DAA+D;AAClH;AAEO,MAAM,yBAA8D;AAAA,EAC1E,CAAC,gBAAgB,OAAO,GAAG;AAAA,EAC3B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,KAAK,GAAG;AAAA,EACzB,CAAC,gBAAgB,OAAO,GAAG;AAC5B;AAEO,MAAM,iCAAiC,cAAc,+BAA+B,YAAY,yBAAyB,GAAG,GAAG,SAAS,+BAA+B,4DAA4D,CAAC;AAEpO,MAAM,gCAAgC,cAAc,8BAA8B,YAAY,wBAAwB,GAAG,GAAG,SAAS,8BAA8B,2DAA2D,CAAC;AAE/N,MAAM,gCAAgC,cAAc,8BAA8B,YAAY,wBAAwB,GAAG,GAAG,SAAS,8BAA8B,2DAA2D,CAAC;AAE/N,MAAM,gCAAgC,cAAc,8BAA8B,YAAY,wBAAwB,GAAG,GAAG,SAAS,8BAA8B,2DAA2D,CAAC;AAE/N,MAAM,+BAA+B,cAAc,6BAA6B,YAAY,uBAAuB,GAAG,GAAG,SAAS,6BAA6B,0DAA0D,CAAC;AAE1N,MAAM,iCAAiC,cAAc,+BAA+B,YAAY,yBAAyB,GAAG,GAAG,SAAS,+BAA+B,4DAA4D,CAAC;AAEpO,MAAM,gCAAqE;AAAA,EACjF,CAAC,gBAAgB,OAAO,GAAG;AAAA,EAC3B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,MAAM,GAAG;AAAA,EAC1B,CAAC,gBAAgB,KAAK,GAAG;AAAA,EACzB,CAAC,gBAAgB,OAAO,GAAG;AAC5B;AAEA,2BAA2B,CAAC,OAAO,cAAc;AAEhD,QAAM,WAAW,MAAM,SAAS,gBAAgB;AAChD,QAAM,sBAAsB,YAAY,MAAM,SAAS,0BAA0B,GAAG,YAAY,CAAC,EAAE,WAAW,QAAQ;AAEtH,YAAU,QAAQ;AAAA;AAAA,gBAEH,MAAM,SAAS,wBAAwB,GAAG,YAAY,GAAG,CAAC;AAAA,mBACvD,MAAM,SAAS,oBAAoB,GAAG,YAAY,CAAC,CAAC;AAAA;AAAA;AAAA,gBAGvD,MAAM,SAAS,0BAA0B,GAAG,YAAY,GAAG,CAAC;AAAA,mBACzD,MAAM,SAAS,sBAAsB,GAAG,YAAY,CAAC,CAAC;AAAA;AAAA;AAAA,kBAGvD,qBAAqB,YAAY,GAAG,CAAC;AAAA,sBACjC,mBAAmB;AAAA;AAAA,EAEvC;AACF,CAAC;",
  "names": []
}
