{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testResultsView/testResultsOutput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { Delayer } from \"../../../../../base/common/async.js\";\nimport type { VSBuffer } from \"../../../../../base/common/buffer.js\";\nimport { Event } from \"../../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../../base/common/iterator.js\";\nimport { Lazy } from \"../../../../../base/common/lazy.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttype IReference,\n\tMutableDisposable,\n\tcombinedDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport type {\n\tICodeEditor,\n\tIDiffEditorConstructionOptions,\n} from \"../../../../../editor/browser/editorBrowser.js\";\nimport { CodeEditorWidget } from \"../../../../../editor/browser/widget/codeEditor/codeEditorWidget.js\";\nimport { EmbeddedCodeEditorWidget } from \"../../../../../editor/browser/widget/codeEditor/embeddedCodeEditorWidget.js\";\nimport { DiffEditorWidget } from \"../../../../../editor/browser/widget/diffEditor/diffEditorWidget.js\";\nimport { EmbeddedDiffEditorWidget } from \"../../../../../editor/browser/widget/diffEditor/embeddedDiffEditorWidget.js\";\nimport { MarkdownRenderer } from \"../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js\";\nimport type {\n\tIDiffEditorOptions,\n\tIEditorOptions,\n} from \"../../../../../editor/common/config/editorOptions.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../../editor/common/services/resolverService.js\";\nimport { peekViewResultsBackground } from \"../../../../../editor/contrib/peekView/browser/peekView.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { TerminalCapability } from \"../../../../../platform/terminal/common/capabilities/capabilities.js\";\nimport { TerminalCapabilityStore } from \"../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js\";\nimport { formatMessageForTerminal } from \"../../../../../platform/terminal/common/terminalStrings.js\";\nimport { IWorkspaceContextService } from \"../../../../../platform/workspace/common/workspace.js\";\nimport { EditorModel } from \"../../../../common/editor/editorModel.js\";\nimport {\n\tPANEL_BACKGROUND,\n\tSIDE_BAR_BACKGROUND,\n} from \"../../../../common/theme.js\";\nimport {\n\tIViewDescriptorService,\n\tViewContainerLocation,\n} from \"../../../../common/views.js\";\nimport { DetachedProcessInfo } from \"../../../terminal/browser/detachedTerminal.js\";\nimport {\n\ttype IDetachedTerminalInstance,\n\tITerminalService,\n} from \"../../../terminal/browser/terminal.js\";\nimport { getXtermScaledDimensions } from \"../../../terminal/browser/xterm/xtermTerminal.js\";\nimport { TERMINAL_BACKGROUND_COLOR } from \"../../../terminal/common/terminalColorRegistry.js\";\nimport { Testing } from \"../../common/constants.js\";\nimport { MutableObservableValue } from \"../../common/observableValue.js\";\nimport {\n\ttype ITaskRawOutput,\n\ttype ITestResult,\n\ttype ITestRunTaskResults,\n\tLiveTestResult,\n\tTestResultItemChangeReason,\n} from \"../../common/testResult.js\";\nimport {\n\tITestMessage,\n\tTestMessageType,\n\tgetMarkId,\n} from \"../../common/testTypes.js\";\nimport { colorizeTestMessageInEditor } from \"../testMessageColorizer.js\";\nimport {\n\ttype InspectSubject,\n\tMessageSubject,\n\tTaskSubject,\n\tTestOutputSubject,\n} from \"./testResultsSubject.js\";\n\nclass SimpleDiffEditorModel extends EditorModel {\n\tpublic readonly original = this._original.object.textEditorModel;\n\tpublic readonly modified = this._modified.object.textEditorModel;\n\n\tconstructor(\n\t\tprivate readonly _original: IReference<IResolvedTextEditorModel>,\n\t\tprivate readonly _modified: IReference<IResolvedTextEditorModel>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tthis._original.dispose();\n\t\tthis._modified.dispose();\n\t}\n}\n\nexport interface IPeekOutputRenderer extends IDisposable {\n\tonDidContentSizeChange?: Event<void>;\n\t/** Updates the displayed test. Should clear if it cannot display the test. */\n\tupdate(subject: InspectSubject): Promise<boolean>;\n\t/** Recalculate content layout. Returns the height it should be rendered at. */\n\tlayout(\n\t\tdimension: dom.IDimension,\n\t\thasMultipleFrames: boolean,\n\t): number | undefined;\n\t/** Dispose the content provider. */\n\tdispose(): void;\n}\n\nconst commonEditorOptions: IEditorOptions = {\n\tscrollBeyondLastLine: false,\n\tlinks: true,\n\tlineNumbers: \"off\",\n\tglyphMargin: false,\n\tscrollbar: {\n\t\tverticalScrollbarSize: 14,\n\t\thorizontal: \"auto\",\n\t\tuseShadows: false,\n\t\tverticalHasArrows: false,\n\t\thorizontalHasArrows: false,\n\t\talwaysConsumeMouseWheel: false,\n\t},\n\toverviewRulerLanes: 0,\n\tfixedOverflowWidgets: true,\n\treadOnly: true,\n\tstickyScroll: { enabled: false },\n\tminimap: { enabled: false },\n\tautomaticLayout: false,\n};\n\nconst diffEditorOptions: IDiffEditorConstructionOptions = {\n\t...commonEditorOptions,\n\tenableSplitViewResizing: true,\n\tisInEmbeddedEditor: true,\n\trenderOverviewRuler: false,\n\tignoreTrimWhitespace: false,\n\trenderSideBySide: true,\n\tuseInlineViewWhenSpaceIsLimited: false,\n\toriginalAriaLabel: localize(\"testingOutputExpected\", \"Expected result\"),\n\tmodifiedAriaLabel: localize(\"testingOutputActual\", \"Actual result\"),\n\tdiffAlgorithm: \"advanced\",\n};\n\nexport class DiffContentProvider\n\textends Disposable\n\timplements IPeekOutputRenderer\n{\n\tprivate readonly widget = this._register(\n\t\tnew MutableDisposable<DiffEditorWidget>(),\n\t);\n\tprivate readonly model = this._register(new MutableDisposable());\n\tprivate dimension?: dom.IDimension;\n\n\tpublic get onDidContentSizeChange() {\n\t\treturn this.widget.value?.onDidContentSizeChange || Event.None;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\tprivate readonly container: HTMLElement,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly modelService: ITextModelService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic async update(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\t\tconst message = subject.message;\n\t\tif (!ITestMessage.isDiffable(message)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [original, modified] = await Promise.all([\n\t\t\tthis.modelService.createModelReference(subject.expectedUri),\n\t\t\tthis.modelService.createModelReference(subject.actualUri),\n\t\t]);\n\n\t\tconst model = (this.model.value = new SimpleDiffEditorModel(\n\t\t\toriginal,\n\t\t\tmodified,\n\t\t));\n\t\tif (!this.widget.value) {\n\t\t\tthis.widget.value = this.editor\n\t\t\t\t? this.instantiationService.createInstance(\n\t\t\t\t\t\tEmbeddedDiffEditorWidget,\n\t\t\t\t\t\tthis.container,\n\t\t\t\t\t\tdiffEditorOptions,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tthis.editor,\n\t\t\t\t\t)\n\t\t\t\t: this.instantiationService.createInstance(\n\t\t\t\t\t\tDiffEditorWidget,\n\t\t\t\t\t\tthis.container,\n\t\t\t\t\t\tdiffEditorOptions,\n\t\t\t\t\t\t{},\n\t\t\t\t\t);\n\n\t\t\tif (this.dimension) {\n\t\t\t\tthis.widget.value.layout(this.dimension);\n\t\t\t}\n\t\t}\n\n\t\tthis.widget.value.setModel(model);\n\t\tthis.widget.value.updateOptions(\n\t\t\tthis.getOptions(\n\t\t\t\tisMultiline(message.expected) || isMultiline(message.actual),\n\t\t\t),\n\t\t);\n\n\t\treturn true;\n\t}\n\n\tprivate clear() {\n\t\tthis.model.clear();\n\t\tthis.widget.clear();\n\t}\n\n\tpublic layout(dimensions: dom.IDimension, hasMultipleFrames: boolean) {\n\t\tthis.dimension = dimensions;\n\t\tconst editor = this.widget.value;\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.layout(dimensions);\n\t\tif (!hasMultipleFrames) {\n\t\t\treturn dimensions.height;\n\t\t}\n\n\t\tconst height = Math.min(\n\t\t\t10000,\n\t\t\tMath.max(\n\t\t\t\teditor.getOriginalEditor().getContentHeight(),\n\t\t\t\teditor.getModifiedEditor().getContentHeight(),\n\t\t\t),\n\t\t);\n\t\teditor.layout({ height, width: dimensions.width });\n\t\treturn height;\n\t}\n\n\tprotected getOptions(isMultiline: boolean): IDiffEditorOptions {\n\t\treturn isMultiline\n\t\t\t? { ...diffEditorOptions, lineNumbers: \"on\" }\n\t\t\t: { ...diffEditorOptions, lineNumbers: \"off\" };\n\t}\n}\n\nexport class MarkdownTestMessagePeek\n\textends Disposable\n\timplements IPeekOutputRenderer\n{\n\tprivate readonly markdown = new Lazy(() =>\n\t\tthis._register(\n\t\t\tthis.instantiationService.createInstance(MarkdownRenderer, {}),\n\t\t),\n\t);\n\n\tprivate element?: HTMLElement;\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => this.clear()));\n\t}\n\n\tpublic async update(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst message = subject.message;\n\t\tif (\n\t\t\tITestMessage.isDiffable(message) ||\n\t\t\ttypeof message.message === \"string\"\n\t\t) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst rendered = this._register(\n\t\t\tthis.markdown.value.render(message.message, {}),\n\t\t);\n\t\trendered.element.style.userSelect = \"text\";\n\t\trendered.element.classList.add(\"preview-text\");\n\t\tthis.container.appendChild(rendered.element);\n\t\tthis.element = rendered.element;\n\t\treturn true;\n\t}\n\n\tpublic layout(dimension: dom.IDimension): number | undefined {\n\t\tif (!this.element) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.element.style.width = `${dimension.width - 32}px`;\n\t\treturn this.element.clientHeight;\n\t}\n\n\tprivate clear() {\n\t\tif (this.element) {\n\t\t\tthis.element.remove();\n\t\t\tthis.element = undefined;\n\t\t}\n\t}\n}\n\nexport class PlainTextMessagePeek\n\textends Disposable\n\timplements IPeekOutputRenderer\n{\n\tprivate readonly widgetDecorations = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly widget = this._register(\n\t\tnew MutableDisposable<CodeEditorWidget>(),\n\t);\n\tprivate readonly model = this._register(new MutableDisposable());\n\tprivate dimension?: dom.IDimension;\n\n\tpublic get onDidContentSizeChange() {\n\t\treturn this.widget.value?.onDidContentSizeChange || Event.None;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\tprivate readonly container: HTMLElement,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly modelService: ITextModelService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic async update(subject: InspectSubject): Promise<boolean> {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst message = subject.message;\n\t\tif (\n\t\t\tITestMessage.isDiffable(message) ||\n\t\t\tmessage.type === TestMessageType.Output ||\n\t\t\ttypeof message.message !== \"string\"\n\t\t) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst modelRef = (this.model.value =\n\t\t\tawait this.modelService.createModelReference(subject.messageUri));\n\t\tif (!this.widget.value) {\n\t\t\tthis.widget.value = this.editor\n\t\t\t\t? this.instantiationService.createInstance(\n\t\t\t\t\t\tEmbeddedCodeEditorWidget,\n\t\t\t\t\t\tthis.container,\n\t\t\t\t\t\tcommonEditorOptions,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tthis.editor,\n\t\t\t\t\t)\n\t\t\t\t: this.instantiationService.createInstance(\n\t\t\t\t\t\tCodeEditorWidget,\n\t\t\t\t\t\tthis.container,\n\t\t\t\t\t\tcommonEditorOptions,\n\t\t\t\t\t\t{ isSimpleWidget: true },\n\t\t\t\t\t);\n\n\t\t\tif (this.dimension) {\n\t\t\t\tthis.widget.value.layout(this.dimension);\n\t\t\t}\n\t\t}\n\n\t\tthis.widget.value.setModel(modelRef.object.textEditorModel);\n\t\tthis.widget.value.updateOptions(commonEditorOptions);\n\t\tthis.widgetDecorations.value = colorizeTestMessageInEditor(\n\t\t\tmessage.message,\n\t\t\tthis.widget.value,\n\t\t);\n\t\treturn true;\n\t}\n\n\tprivate clear() {\n\t\tthis.widgetDecorations.clear();\n\t\tthis.widget.clear();\n\t\tthis.model.clear();\n\t}\n\n\tpublic layout(dimensions: dom.IDimension, hasMultipleFrames: boolean) {\n\t\tthis.dimension = dimensions;\n\t\tconst editor = this.widget.value;\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.layout(dimensions);\n\t\tif (!hasMultipleFrames) {\n\t\t\treturn dimensions.height;\n\t\t}\n\n\t\tconst height = editor.getContentHeight();\n\t\teditor.layout({ height, width: dimensions.width });\n\t\treturn height;\n\t}\n}\n\nexport class TerminalMessagePeek\n\textends Disposable\n\timplements IPeekOutputRenderer\n{\n\tprivate dimensions?: dom.IDimension;\n\tprivate readonly terminalCwd = this._register(\n\t\tnew MutableObservableValue<string>(\"\"),\n\t);\n\tprivate readonly xtermLayoutDelayer = this._register(new Delayer(50));\n\n\t/** Active terminal instance. */\n\tprivate readonly terminal = this._register(\n\t\tnew MutableDisposable<IDetachedTerminalInstance>(),\n\t);\n\t/** Listener for streaming result data */\n\tprivate readonly outputDataListener = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly isInPeekView: boolean,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly workspaceContext: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate async makeTerminal() {\n\t\tconst prev = this.terminal.value;\n\t\tif (prev) {\n\t\t\tprev.xterm.clearBuffer();\n\t\t\tprev.xterm.clearSearchDecorations();\n\t\t\t// clearBuffer tries to retain the prompt line, but this doesn't exist for tests.\n\t\t\t// So clear the screen (J) and move to home (H) to ensure previous data is cleaned up.\n\t\t\tprev.xterm.write(`\\x1b[2J\\x1b[0;0H`);\n\t\t\treturn prev;\n\t\t}\n\n\t\tconst capabilities = new TerminalCapabilityStore();\n\t\tconst cwd = this.terminalCwd;\n\t\tcapabilities.add(TerminalCapability.CwdDetection, {\n\t\t\ttype: TerminalCapability.CwdDetection,\n\t\t\tget cwds() {\n\t\t\t\treturn [cwd.value];\n\t\t\t},\n\t\t\tonDidChangeCwd: cwd.onDidChange,\n\t\t\tgetCwd: () => cwd.value,\n\t\t\tupdateCwd: () => {},\n\t\t});\n\n\t\treturn (this.terminal.value =\n\t\t\tawait this.terminalService.createDetachedTerminal({\n\t\t\t\trows: 10,\n\t\t\t\tcols: 80,\n\t\t\t\treadonly: true,\n\t\t\t\tcapabilities,\n\t\t\t\tprocessInfo: new DetachedProcessInfo({ initialCwd: cwd.value }),\n\t\t\t\tcolorProvider: {\n\t\t\t\t\tgetBackgroundColor: (theme) => {\n\t\t\t\t\t\tconst terminalBackground = theme.getColor(\n\t\t\t\t\t\t\tTERMINAL_BACKGROUND_COLOR,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (terminalBackground) {\n\t\t\t\t\t\t\treturn terminalBackground;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.isInPeekView) {\n\t\t\t\t\t\t\treturn theme.getColor(peekViewResultsBackground);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst location =\n\t\t\t\t\t\t\tthis.viewDescriptorService.getViewLocationById(\n\t\t\t\t\t\t\t\tTesting.ResultsViewId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\treturn location === ViewContainerLocation.Panel\n\t\t\t\t\t\t\t? theme.getColor(PANEL_BACKGROUND)\n\t\t\t\t\t\t\t: theme.getColor(SIDE_BAR_BACKGROUND);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}));\n\t}\n\n\tpublic async update(subject: InspectSubject): Promise<boolean> {\n\t\tthis.outputDataListener.clear();\n\t\tif (subject instanceof TaskSubject) {\n\t\t\tawait this.updateForTaskSubject(subject);\n\t\t} else if (\n\t\t\tsubject instanceof TestOutputSubject ||\n\t\t\t(subject instanceof MessageSubject &&\n\t\t\t\tsubject.message.type === TestMessageType.Output)\n\t\t) {\n\t\t\tawait this.updateForTestSubject(subject);\n\t\t} else {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async updateForTestSubject(\n\t\tsubject: TestOutputSubject | MessageSubject,\n\t) {\n\t\tconst that = this;\n\t\tconst testItem =\n\t\t\tsubject instanceof TestOutputSubject\n\t\t\t\t? subject.test.item\n\t\t\t\t: subject.test;\n\t\tconst terminal = await this.updateGenerically<ITaskRawOutput>({\n\t\t\tsubject,\n\t\t\tnoOutputMessage: localize(\n\t\t\t\t\"caseNoOutput\",\n\t\t\t\t\"The test case did not report any output.\",\n\t\t\t),\n\t\t\tgetTarget: (result) => result?.tasks[subject.taskIndex].output,\n\t\t\t*doInitialWrite(output, results) {\n\t\t\t\tthat.updateCwd(testItem.uri);\n\t\t\t\tconst state =\n\t\t\t\t\tsubject instanceof TestOutputSubject\n\t\t\t\t\t\t? subject.test\n\t\t\t\t\t\t: results.getStateById(testItem.extId);\n\t\t\t\tif (!state) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const message of state.tasks[subject.taskIndex].messages) {\n\t\t\t\t\tif (message.type === TestMessageType.Output) {\n\t\t\t\t\t\tyield* output.getRangeIter(\n\t\t\t\t\t\t\tmessage.offset,\n\t\t\t\t\t\t\tmessage.length,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdoListenForMoreData: (output, result, write) =>\n\t\t\t\tresult.onChange((e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\te.reason === TestResultItemChangeReason.NewMessage &&\n\t\t\t\t\t\te.item.item.extId === testItem.extId &&\n\t\t\t\t\t\te.message.type === TestMessageType.Output\n\t\t\t\t\t) {\n\t\t\t\t\t\tfor (const chunk of output.getRangeIter(\n\t\t\t\t\t\t\te.message.offset,\n\t\t\t\t\t\t\te.message.length,\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\twrite(chunk.buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t});\n\n\t\tif (\n\t\t\tsubject instanceof MessageSubject &&\n\t\t\tsubject.message.type === TestMessageType.Output &&\n\t\t\tsubject.message.marker !== undefined\n\t\t) {\n\t\t\tterminal?.xterm.selectMarkedRange(\n\t\t\t\tgetMarkId(subject.message.marker, true),\n\t\t\t\tgetMarkId(subject.message.marker, false),\n\t\t\t\t/* scrollIntoView= */ true,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateForTaskSubject(subject: TaskSubject) {\n\t\treturn this.updateGenerically<ITestRunTaskResults>({\n\t\t\tsubject,\n\t\t\tnoOutputMessage: localize(\n\t\t\t\t\"runNoOutput\",\n\t\t\t\t\"The test run did not record any output.\",\n\t\t\t),\n\t\t\tgetTarget: (result) => result?.tasks[subject.taskIndex],\n\t\t\tdoInitialWrite: (task, result) => {\n\t\t\t\t// Update the cwd and use the first test to try to hint at the correct cwd,\n\t\t\t\t// but often this will fall back to the first workspace folder.\n\t\t\t\tthis.updateCwd(\n\t\t\t\t\tIterable.find(result.tests, (t) => !!t.item.uri)?.item.uri,\n\t\t\t\t);\n\t\t\t\treturn task.output.buffers;\n\t\t\t},\n\t\t\tdoListenForMoreData: (task, _result, write) =>\n\t\t\t\ttask.output.onDidWriteData((e) => write(e.buffer)),\n\t\t});\n\t}\n\n\tprivate async updateGenerically<T>(opts: {\n\t\tsubject: InspectSubject;\n\t\tnoOutputMessage: string;\n\t\tgetTarget: (result: ITestResult) => T | undefined;\n\t\tdoInitialWrite: (\n\t\t\ttarget: T,\n\t\t\tresult: LiveTestResult,\n\t\t) => Iterable<VSBuffer>;\n\t\tdoListenForMoreData: (\n\t\t\ttarget: T,\n\t\t\tresult: LiveTestResult,\n\t\t\twrite: (s: Uint8Array) => void,\n\t\t) => IDisposable;\n\t}) {\n\t\tconst result = opts.subject.result;\n\t\tconst target = opts.getTarget(result);\n\t\tif (!target) {\n\t\t\treturn this.clear();\n\t\t}\n\n\t\tconst terminal = await this.makeTerminal();\n\t\tlet didWriteData = false;\n\n\t\tconst pendingWrites = new MutableObservableValue(0);\n\t\tif (result instanceof LiveTestResult) {\n\t\t\tfor (const chunk of opts.doInitialWrite(target, result)) {\n\t\t\t\tdidWriteData ||= chunk.byteLength > 0;\n\t\t\t\tpendingWrites.value++;\n\t\t\t\tterminal.xterm.write(chunk.buffer, () => pendingWrites.value--);\n\t\t\t}\n\t\t} else {\n\t\t\tdidWriteData = true;\n\t\t\tthis.writeNotice(\n\t\t\t\tterminal,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"runNoOutputForPast\",\n\t\t\t\t\t\"Test output is only available for new test runs.\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis.attachTerminalToDom(terminal);\n\t\tthis.outputDataListener.clear();\n\n\t\tif (result instanceof LiveTestResult && !result.completedAt) {\n\t\t\tconst l1 = result.onComplete(() => {\n\t\t\t\tif (!didWriteData) {\n\t\t\t\t\tthis.writeNotice(terminal, opts.noOutputMessage);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst l2 = opts.doListenForMoreData(target, result, (data) => {\n\t\t\t\tterminal.xterm.write(data);\n\t\t\t\tdidWriteData ||= data.byteLength > 0;\n\t\t\t});\n\n\t\t\tthis.outputDataListener.value = combinedDisposable(l1, l2);\n\t\t}\n\n\t\tif (!this.outputDataListener.value && !didWriteData) {\n\t\t\tthis.writeNotice(terminal, opts.noOutputMessage);\n\t\t}\n\n\t\t// Ensure pending writes finish, otherwise the selection in `updateForTestSubject`\n\t\t// can happen before the markers are processed.\n\t\tif (pendingWrites.value > 0) {\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tconst l = pendingWrites.onDidChange(() => {\n\t\t\t\t\tif (pendingWrites.value === 0) {\n\t\t\t\t\t\tl.dispose();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn terminal;\n\t}\n\n\tprivate updateCwd(testUri?: URI) {\n\t\tconst wf =\n\t\t\t(testUri && this.workspaceContext.getWorkspaceFolder(testUri)) ||\n\t\t\tthis.workspaceContext.getWorkspace().folders[0];\n\t\tif (wf) {\n\t\t\tthis.terminalCwd.value = wf.uri.fsPath;\n\t\t}\n\t}\n\n\tprivate writeNotice(terminal: IDetachedTerminalInstance, str: string) {\n\t\tterminal.xterm.write(formatMessageForTerminal(str));\n\t}\n\n\tprivate attachTerminalToDom(terminal: IDetachedTerminalInstance) {\n\t\tterminal.xterm.write(\"\\x1b[?25l\"); // hide cursor\n\t\tdom.scheduleAtNextAnimationFrame(dom.getWindow(this.container), () =>\n\t\t\tthis.layoutTerminal(terminal),\n\t\t);\n\t\tterminal.attachToElement(this.container, { enableGpu: false });\n\t}\n\n\tprivate clear() {\n\t\tthis.outputDataListener.clear();\n\t\tthis.xtermLayoutDelayer.cancel();\n\t\tthis.terminal.clear();\n\t}\n\n\tpublic layout(dimensions: dom.IDimension) {\n\t\tthis.dimensions = dimensions;\n\t\tif (this.terminal.value) {\n\t\t\tthis.layoutTerminal(\n\t\t\t\tthis.terminal.value,\n\t\t\t\tdimensions.width,\n\t\t\t\tdimensions.height,\n\t\t\t);\n\t\t\treturn dimensions.height;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate layoutTerminal(\n\t\t{ xterm }: IDetachedTerminalInstance,\n\t\twidth = this.dimensions?.width ?? this.container.clientWidth,\n\t\theight = this.dimensions?.height ?? this.container.clientHeight,\n\t) {\n\t\twidth -= 10 + 20; // scrollbar width + margin\n\t\tthis.xtermLayoutDelayer.trigger(() => {\n\t\t\tconst scaled = getXtermScaledDimensions(\n\t\t\t\tdom.getWindow(this.container),\n\t\t\t\txterm.getFont(),\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t);\n\t\t\tif (scaled) {\n\t\t\t\txterm.resize(scaled.cols, scaled.rows);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst isMultiline = (str: string | undefined) => !!str && str.includes(\"\\n\");\n"],
  "mappings": "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",
  "names": ["isMultiline"]
}
