{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testResultsView/testResultsOutput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { Delayer } from '../../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { Iterable } from '../../../../../base/common/iterator.js';\nimport { Lazy } from '../../../../../base/common/lazy.js';\nimport { Disposable, IDisposable, IReference, MutableDisposable, combinedDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ICodeEditor, IDiffEditorConstructionOptions } from '../../../../../editor/browser/editorBrowser.js';\nimport { CodeEditorWidget } from '../../../../../editor/browser/widget/codeEditor/codeEditorWidget.js';\nimport { EmbeddedCodeEditorWidget } from '../../../../../editor/browser/widget/codeEditor/embeddedCodeEditorWidget.js';\nimport { DiffEditorWidget } from '../../../../../editor/browser/widget/diffEditor/diffEditorWidget.js';\nimport { EmbeddedDiffEditorWidget } from '../../../../../editor/browser/widget/diffEditor/embeddedDiffEditorWidget.js';\nimport { MarkdownRenderer } from '../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';\nimport { IDiffEditorOptions, IEditorOptions } from '../../../../../editor/common/config/editorOptions.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { peekViewResultsBackground } from '../../../../../editor/contrib/peekView/browser/peekView.js';\nimport { localize } from '../../../../../nls.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { TerminalCapability } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { TerminalCapabilityStore } from '../../../../../platform/terminal/common/capabilities/terminalCapabilityStore.js';\nimport { formatMessageForTerminal } from '../../../../../platform/terminal/common/terminalStrings.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { EditorModel } from '../../../../common/editor/editorModel.js';\nimport { PANEL_BACKGROUND, SIDE_BAR_BACKGROUND } from '../../../../common/theme.js';\nimport { IViewDescriptorService, ViewContainerLocation } from '../../../../common/views.js';\nimport { DetachedProcessInfo } from '../../../terminal/browser/detachedTerminal.js';\nimport { IDetachedTerminalInstance, ITerminalService } from '../../../terminal/browser/terminal.js';\nimport { getXtermScaledDimensions } from '../../../terminal/browser/xterm/xtermTerminal.js';\nimport { TERMINAL_BACKGROUND_COLOR } from '../../../terminal/common/terminalColorRegistry.js';\nimport { colorizeTestMessageInEditor } from '../testMessageColorizer.js';\nimport { InspectSubject, MessageSubject, TaskSubject, TestOutputSubject } from './testResultsSubject.js';\nimport { Testing } from '../../common/constants.js';\nimport { MutableObservableValue } from '../../common/observableValue.js';\nimport { ITaskRawOutput, ITestResult, ITestRunTaskResults, LiveTestResult, TestResultItemChangeReason } from '../../common/testResult.js';\nimport { ITestMessage, TestMessageType, getMarkId } from '../../common/testTypes.js';\n\n\nclass SimpleDiffEditorModel extends EditorModel {\n\tpublic readonly original = this._original.object.textEditorModel;\n\tpublic readonly modified = this._modified.object.textEditorModel;\n\n\tconstructor(\n\t\tprivate readonly _original: IReference<IResolvedTextEditorModel>,\n\t\tprivate readonly _modified: IReference<IResolvedTextEditorModel>,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tthis._original.dispose();\n\t\tthis._modified.dispose();\n\t}\n}\n\n\nexport interface IPeekOutputRenderer extends IDisposable {\n\tonDidContentSizeChange?: Event<void>;\n\t/** Updates the displayed test. Should clear if it cannot display the test. */\n\tupdate(subject: InspectSubject): Promise<boolean>;\n\t/** Recalculate content layout. Returns the height it should be rendered at. */\n\tlayout(dimension: dom.IDimension, hasMultipleFrames: boolean): number | undefined;\n\t/** Dispose the content provider. */\n\tdispose(): void;\n}\n\nconst commonEditorOptions: IEditorOptions = {\n\tscrollBeyondLastLine: false,\n\tlinks: true,\n\tlineNumbers: 'off',\n\tglyphMargin: false,\n\tscrollbar: {\n\t\tverticalScrollbarSize: 14,\n\t\thorizontal: 'auto',\n\t\tuseShadows: false,\n\t\tverticalHasArrows: false,\n\t\thorizontalHasArrows: false,\n\t\talwaysConsumeMouseWheel: false\n\t},\n\toverviewRulerLanes: 0,\n\tfixedOverflowWidgets: true,\n\treadOnly: true,\n\tstickyScroll: { enabled: false },\n\tminimap: { enabled: false },\n\tautomaticLayout: false,\n};\n\nconst diffEditorOptions: IDiffEditorConstructionOptions = {\n\t...commonEditorOptions,\n\tenableSplitViewResizing: true,\n\tisInEmbeddedEditor: true,\n\trenderOverviewRuler: false,\n\tignoreTrimWhitespace: false,\n\trenderSideBySide: true,\n\tuseInlineViewWhenSpaceIsLimited: false,\n\toriginalAriaLabel: localize('testingOutputExpected', 'Expected result'),\n\tmodifiedAriaLabel: localize('testingOutputActual', 'Actual result'),\n\tdiffAlgorithm: 'advanced',\n};\n\n\nexport class DiffContentProvider extends Disposable implements IPeekOutputRenderer {\n\tprivate readonly widget = this._register(new MutableDisposable<DiffEditorWidget>());\n\tprivate readonly model = this._register(new MutableDisposable());\n\tprivate dimension?: dom.IDimension;\n\n\tpublic get onDidContentSizeChange() {\n\t\treturn this.widget.value?.onDidContentSizeChange || Event.None;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\tprivate readonly container: HTMLElement,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly modelService: ITextModelService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic async update(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\t\tconst message = subject.message;\n\t\tif (!ITestMessage.isDiffable(message)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [original, modified] = await Promise.all([\n\t\t\tthis.modelService.createModelReference(subject.expectedUri),\n\t\t\tthis.modelService.createModelReference(subject.actualUri),\n\t\t]);\n\n\t\tconst model = this.model.value = new SimpleDiffEditorModel(original, modified);\n\t\tif (!this.widget.value) {\n\t\t\tthis.widget.value = this.editor ? this.instantiationService.createInstance(\n\t\t\t\tEmbeddedDiffEditorWidget,\n\t\t\t\tthis.container,\n\t\t\t\tdiffEditorOptions,\n\t\t\t\t{},\n\t\t\t\tthis.editor,\n\t\t\t) : this.instantiationService.createInstance(\n\t\t\t\tDiffEditorWidget,\n\t\t\t\tthis.container,\n\t\t\t\tdiffEditorOptions,\n\t\t\t\t{},\n\t\t\t);\n\n\t\t\tif (this.dimension) {\n\t\t\t\tthis.widget.value.layout(this.dimension);\n\t\t\t}\n\t\t}\n\n\t\tthis.widget.value.setModel(model);\n\t\tthis.widget.value.updateOptions(this.getOptions(\n\t\t\tisMultiline(message.expected) || isMultiline(message.actual)\n\t\t));\n\n\t\treturn true;\n\t}\n\n\tprivate clear() {\n\t\tthis.model.clear();\n\t\tthis.widget.clear();\n\t}\n\n\tpublic layout(dimensions: dom.IDimension, hasMultipleFrames: boolean) {\n\t\tthis.dimension = dimensions;\n\t\tconst editor = this.widget.value;\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.layout(dimensions);\n\t\tif (!hasMultipleFrames) {\n\t\t\treturn dimensions.height;\n\t\t}\n\n\t\tconst height = Math.min(10000, Math.max(editor.getOriginalEditor().getContentHeight(), editor.getModifiedEditor().getContentHeight()));\n\t\teditor.layout({ height, width: dimensions.width });\n\t\treturn height;\n\t}\n\n\tprotected getOptions(isMultiline: boolean): IDiffEditorOptions {\n\t\treturn isMultiline\n\t\t\t? { ...diffEditorOptions, lineNumbers: 'on' }\n\t\t\t: { ...diffEditorOptions, lineNumbers: 'off' };\n\t}\n}\n\n\nexport class MarkdownTestMessagePeek extends Disposable implements IPeekOutputRenderer {\n\tprivate readonly markdown = new Lazy(\n\t\t() => this._register(this.instantiationService.createInstance(MarkdownRenderer, {})),\n\t);\n\n\tprivate element?: HTMLElement;\n\n\tconstructor(private readonly container: HTMLElement, @IInstantiationService private readonly instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => this.clear()));\n\t}\n\n\tpublic async update(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst message = subject.message;\n\t\tif (ITestMessage.isDiffable(message) || typeof message.message === 'string') {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\n\t\tconst rendered = this._register(this.markdown.value.render(message.message, {}));\n\t\trendered.element.style.userSelect = 'text';\n\t\trendered.element.classList.add('preview-text');\n\t\tthis.container.appendChild(rendered.element);\n\t\tthis.element = rendered.element;\n\t\treturn true;\n\t}\n\n\tpublic layout(dimension: dom.IDimension): number | undefined {\n\t\tif (!this.element) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.element.style.width = `${dimension.width - 32}px`;\n\t\treturn this.element.clientHeight;\n\t}\n\n\tprivate clear() {\n\t\tif (this.element) {\n\t\t\tthis.element.remove();\n\t\t\tthis.element = undefined;\n\t\t}\n\t}\n}\n\nexport class PlainTextMessagePeek extends Disposable implements IPeekOutputRenderer {\n\tprivate readonly widgetDecorations = this._register(new MutableDisposable());\n\tprivate readonly widget = this._register(new MutableDisposable<CodeEditorWidget>());\n\tprivate readonly model = this._register(new MutableDisposable());\n\tprivate dimension?: dom.IDimension;\n\n\tpublic get onDidContentSizeChange() {\n\t\treturn this.widget.value?.onDidContentSizeChange || Event.None;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\tprivate readonly container: HTMLElement,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly modelService: ITextModelService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic async update(subject: InspectSubject): Promise<boolean> {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst message = subject.message;\n\t\tif (ITestMessage.isDiffable(message) || message.type === TestMessageType.Output || typeof message.message !== 'string') {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\tconst modelRef = this.model.value = await this.modelService.createModelReference(subject.messageUri);\n\t\tif (!this.widget.value) {\n\t\t\tthis.widget.value = this.editor ? this.instantiationService.createInstance(\n\t\t\t\tEmbeddedCodeEditorWidget,\n\t\t\t\tthis.container,\n\t\t\t\tcommonEditorOptions,\n\t\t\t\t{},\n\t\t\t\tthis.editor,\n\t\t\t) : this.instantiationService.createInstance(\n\t\t\t\tCodeEditorWidget,\n\t\t\t\tthis.container,\n\t\t\t\tcommonEditorOptions,\n\t\t\t\t{ isSimpleWidget: true }\n\t\t\t);\n\n\t\t\tif (this.dimension) {\n\t\t\t\tthis.widget.value.layout(this.dimension);\n\t\t\t}\n\t\t}\n\n\t\tthis.widget.value.setModel(modelRef.object.textEditorModel);\n\t\tthis.widget.value.updateOptions(commonEditorOptions);\n\t\tthis.widgetDecorations.value = colorizeTestMessageInEditor(message.message, this.widget.value);\n\t\treturn true;\n\t}\n\n\tprivate clear() {\n\t\tthis.widgetDecorations.clear();\n\t\tthis.widget.clear();\n\t\tthis.model.clear();\n\t}\n\n\tpublic layout(dimensions: dom.IDimension, hasMultipleFrames: boolean) {\n\t\tthis.dimension = dimensions;\n\t\tconst editor = this.widget.value;\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.layout(dimensions);\n\t\tif (!hasMultipleFrames) {\n\t\t\treturn dimensions.height;\n\t\t}\n\n\t\tconst height = editor.getContentHeight();\n\t\teditor.layout({ height, width: dimensions.width });\n\t\treturn height;\n\t}\n}\n\nexport class TerminalMessagePeek extends Disposable implements IPeekOutputRenderer {\n\tprivate dimensions?: dom.IDimension;\n\tprivate readonly terminalCwd = this._register(new MutableObservableValue<string>(''));\n\tprivate readonly xtermLayoutDelayer = this._register(new Delayer(50));\n\n\t/** Active terminal instance. */\n\tprivate readonly terminal = this._register(new MutableDisposable<IDetachedTerminalInstance>());\n\t/** Listener for streaming result data */\n\tprivate readonly outputDataListener = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly isInPeekView: boolean,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IWorkspaceContextService private readonly workspaceContext: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate async makeTerminal() {\n\t\tconst prev = this.terminal.value;\n\t\tif (prev) {\n\t\t\tprev.xterm.clearBuffer();\n\t\t\tprev.xterm.clearSearchDecorations();\n\t\t\t// clearBuffer tries to retain the prompt line, but this doesn't exist for tests.\n\t\t\t// So clear the screen (J) and move to home (H) to ensure previous data is cleaned up.\n\t\t\tprev.xterm.write(`\\x1b[2J\\x1b[0;0H`);\n\t\t\treturn prev;\n\t\t}\n\n\t\tconst capabilities = new TerminalCapabilityStore();\n\t\tconst cwd = this.terminalCwd;\n\t\tcapabilities.add(TerminalCapability.CwdDetection, {\n\t\t\ttype: TerminalCapability.CwdDetection,\n\t\t\tget cwds() { return [cwd.value]; },\n\t\t\tonDidChangeCwd: cwd.onDidChange,\n\t\t\tgetCwd: () => cwd.value,\n\t\t\tupdateCwd: () => { },\n\t\t});\n\n\t\treturn this.terminal.value = await this.terminalService.createDetachedTerminal({\n\t\t\trows: 10,\n\t\t\tcols: 80,\n\t\t\treadonly: true,\n\t\t\tcapabilities,\n\t\t\tprocessInfo: new DetachedProcessInfo({ initialCwd: cwd.value }),\n\t\t\tcolorProvider: {\n\t\t\t\tgetBackgroundColor: theme => {\n\t\t\t\t\tconst terminalBackground = theme.getColor(TERMINAL_BACKGROUND_COLOR);\n\t\t\t\t\tif (terminalBackground) {\n\t\t\t\t\t\treturn terminalBackground;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.isInPeekView) {\n\t\t\t\t\t\treturn theme.getColor(peekViewResultsBackground);\n\t\t\t\t\t}\n\t\t\t\t\tconst location = this.viewDescriptorService.getViewLocationById(Testing.ResultsViewId);\n\t\t\t\t\treturn location === ViewContainerLocation.Panel\n\t\t\t\t\t\t? theme.getColor(PANEL_BACKGROUND)\n\t\t\t\t\t\t: theme.getColor(SIDE_BAR_BACKGROUND);\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async update(subject: InspectSubject): Promise<boolean> {\n\t\tthis.outputDataListener.clear();\n\t\tif (subject instanceof TaskSubject) {\n\t\t\tawait this.updateForTaskSubject(subject);\n\t\t} else if (subject instanceof TestOutputSubject || (subject instanceof MessageSubject && subject.message.type === TestMessageType.Output)) {\n\t\t\tawait this.updateForTestSubject(subject);\n\t\t} else {\n\t\t\tthis.clear();\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async updateForTestSubject(subject: TestOutputSubject | MessageSubject) {\n\t\tconst that = this;\n\t\tconst testItem = subject instanceof TestOutputSubject ? subject.test.item : subject.test;\n\t\tconst terminal = await this.updateGenerically<ITaskRawOutput>({\n\t\t\tsubject,\n\t\t\tnoOutputMessage: localize('caseNoOutput', 'The test case did not report any output.'),\n\t\t\tgetTarget: result => result?.tasks[subject.taskIndex].output,\n\t\t\t*doInitialWrite(output, results) {\n\t\t\t\tthat.updateCwd(testItem.uri);\n\t\t\t\tconst state = subject instanceof TestOutputSubject ? subject.test : results.getStateById(testItem.extId);\n\t\t\t\tif (!state) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const message of state.tasks[subject.taskIndex].messages) {\n\t\t\t\t\tif (message.type === TestMessageType.Output) {\n\t\t\t\t\t\tyield* output.getRangeIter(message.offset, message.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdoListenForMoreData: (output, result, write) => result.onChange(e => {\n\t\t\t\tif (e.reason === TestResultItemChangeReason.NewMessage && e.item.item.extId === testItem.extId && e.message.type === TestMessageType.Output) {\n\t\t\t\t\tfor (const chunk of output.getRangeIter(e.message.offset, e.message.length)) {\n\t\t\t\t\t\twrite(chunk.buffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t});\n\n\t\tif (subject instanceof MessageSubject && subject.message.type === TestMessageType.Output && subject.message.marker !== undefined) {\n\t\t\tterminal?.xterm.selectMarkedRange(getMarkId(subject.message.marker, true), getMarkId(subject.message.marker, false), /* scrollIntoView= */ true);\n\t\t}\n\t}\n\n\tprivate updateForTaskSubject(subject: TaskSubject) {\n\t\treturn this.updateGenerically<ITestRunTaskResults>({\n\t\t\tsubject,\n\t\t\tnoOutputMessage: localize('runNoOutput', 'The test run did not record any output.'),\n\t\t\tgetTarget: result => result?.tasks[subject.taskIndex],\n\t\t\tdoInitialWrite: (task, result) => {\n\t\t\t\t// Update the cwd and use the first test to try to hint at the correct cwd,\n\t\t\t\t// but often this will fall back to the first workspace folder.\n\t\t\t\tthis.updateCwd(Iterable.find(result.tests, t => !!t.item.uri)?.item.uri);\n\t\t\t\treturn task.output.buffers;\n\t\t\t},\n\t\t\tdoListenForMoreData: (task, _result, write) => task.output.onDidWriteData(e => write(e.buffer)),\n\t\t});\n\t}\n\n\tprivate async updateGenerically<T>(opts: {\n\t\tsubject: InspectSubject;\n\t\tnoOutputMessage: string;\n\t\tgetTarget: (result: ITestResult) => T | undefined;\n\t\tdoInitialWrite: (target: T, result: LiveTestResult) => Iterable<VSBuffer>;\n\t\tdoListenForMoreData: (target: T, result: LiveTestResult, write: (s: Uint8Array) => void) => IDisposable;\n\t}) {\n\t\tconst result = opts.subject.result;\n\t\tconst target = opts.getTarget(result);\n\t\tif (!target) {\n\t\t\treturn this.clear();\n\t\t}\n\n\t\tconst terminal = await this.makeTerminal();\n\t\tlet didWriteData = false;\n\n\t\tconst pendingWrites = new MutableObservableValue(0);\n\t\tif (result instanceof LiveTestResult) {\n\t\t\tfor (const chunk of opts.doInitialWrite(target, result)) {\n\t\t\t\tdidWriteData ||= chunk.byteLength > 0;\n\t\t\t\tpendingWrites.value++;\n\t\t\t\tterminal.xterm.write(chunk.buffer, () => pendingWrites.value--);\n\t\t\t}\n\t\t} else {\n\t\t\tdidWriteData = true;\n\t\t\tthis.writeNotice(terminal, localize('runNoOutputForPast', 'Test output is only available for new test runs.'));\n\t\t}\n\n\t\tthis.attachTerminalToDom(terminal);\n\t\tthis.outputDataListener.clear();\n\n\t\tif (result instanceof LiveTestResult && !result.completedAt) {\n\t\t\tconst l1 = result.onComplete(() => {\n\t\t\t\tif (!didWriteData) {\n\t\t\t\t\tthis.writeNotice(terminal, opts.noOutputMessage);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst l2 = opts.doListenForMoreData(target, result, data => {\n\t\t\t\tterminal.xterm.write(data);\n\t\t\t\tdidWriteData ||= data.byteLength > 0;\n\t\t\t});\n\n\t\t\tthis.outputDataListener.value = combinedDisposable(l1, l2);\n\t\t}\n\n\t\tif (!this.outputDataListener.value && !didWriteData) {\n\t\t\tthis.writeNotice(terminal, opts.noOutputMessage);\n\t\t}\n\n\t\t// Ensure pending writes finish, otherwise the selection in `updateForTestSubject`\n\t\t// can happen before the markers are processed.\n\t\tif (pendingWrites.value > 0) {\n\t\t\tawait new Promise<void>(resolve => {\n\t\t\t\tconst l = pendingWrites.onDidChange(() => {\n\t\t\t\t\tif (pendingWrites.value === 0) {\n\t\t\t\t\t\tl.dispose();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn terminal;\n\t}\n\n\tprivate updateCwd(testUri?: URI) {\n\t\tconst wf = (testUri && this.workspaceContext.getWorkspaceFolder(testUri))\n\t\t\t|| this.workspaceContext.getWorkspace().folders[0];\n\t\tif (wf) {\n\t\t\tthis.terminalCwd.value = wf.uri.fsPath;\n\t\t}\n\t}\n\n\tprivate writeNotice(terminal: IDetachedTerminalInstance, str: string) {\n\t\tterminal.xterm.write(formatMessageForTerminal(str));\n\t}\n\n\tprivate attachTerminalToDom(terminal: IDetachedTerminalInstance) {\n\t\tterminal.xterm.write('\\x1b[?25l'); // hide cursor\n\t\tdom.scheduleAtNextAnimationFrame(dom.getWindow(this.container), () => this.layoutTerminal(terminal));\n\t\tterminal.attachToElement(this.container, { enableGpu: false });\n\t}\n\n\tprivate clear() {\n\t\tthis.outputDataListener.clear();\n\t\tthis.xtermLayoutDelayer.cancel();\n\t\tthis.terminal.clear();\n\t}\n\n\tpublic layout(dimensions: dom.IDimension) {\n\t\tthis.dimensions = dimensions;\n\t\tif (this.terminal.value) {\n\t\t\tthis.layoutTerminal(this.terminal.value, dimensions.width, dimensions.height);\n\t\t\treturn dimensions.height;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate layoutTerminal(\n\t\t{ xterm }: IDetachedTerminalInstance,\n\t\twidth = this.dimensions?.width ?? this.container.clientWidth,\n\t\theight = this.dimensions?.height ?? this.container.clientHeight\n\t) {\n\t\twidth -= 10 + 20; // scrollbar width + margin\n\t\tthis.xtermLayoutDelayer.trigger(() => {\n\t\t\tconst scaled = getXtermScaledDimensions(dom.getWindow(this.container), xterm.getFont(), width, height);\n\t\t\tif (scaled) {\n\t\t\t\txterm.resize(scaled.cols, scaled.rows);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst isMultiline = (str: string | undefined) => !!str && str.includes('\\n');\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,YAAY,aAAa,YAAY,mBAAmB,oBAAoB,oBAAoB;AACzG,SAAS,WAAW;AACpB,SAAS,aAAa,sCAAsC;AAC5D,SAAS,wBAAwB;AACjC,SAAS,gCAAgC;AACzC,SAAS,wBAAwB;AACjC,SAAS,gCAAgC;AACzC,SAAS,wBAAwB;AACjC,SAAS,oBAAoB,sBAAsB;AACnD,SAAS,0BAA0B,yBAAyB;AAC5D,SAAS,iCAAiC;AAC1C,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AACnC,SAAS,+BAA+B;AACxC,SAAS,gCAAgC;AACzC,SAAS,gCAAgC;AACzC,SAAS,mBAAmB;AAC5B,SAAS,kBAAkB,2BAA2B;AACtD,SAAS,wBAAwB,6BAA6B;AAC9D,SAAS,2BAA2B;AACpC,SAAS,2BAA2B,wBAAwB;AAC5D,SAAS,gCAAgC;AACzC,SAAS,iCAAiC;AAC1C,SAAS,mCAAmC;AAC5C,SAAS,gBAAgB,gBAAgB,aAAa,yBAAyB;AAC/E,SAAS,eAAe;AACxB,SAAS,8BAA8B;AACvC,SAAS,gBAAgB,aAAa,qBAAqB,gBAAgB,kCAAkC;AAC7G,SAAS,cAAc,iBAAiB,iBAAiB;AAGzD,MAAM,8BAA8B,YAAY;AAAA,EAI/C,YACkB,WACA,WAChB;AACD,UAAM;AAHW;AACA;AAAA,EAGlB;AAAA,EApDD,OA2CgD;AAAA;AAAA;AAAA,EAC/B,WAAW,KAAK,UAAU,OAAO;AAAA,EACjC,WAAW,KAAK,UAAU,OAAO;AAAA,EASjC,UAAU;AACzB,UAAM,QAAQ;AACd,SAAK,UAAU,QAAQ;AACvB,SAAK,UAAU,QAAQ;AAAA,EACxB;AACD;AAaA,MAAM,sBAAsC;AAAA,EAC3C,sBAAsB;AAAA,EACtB,OAAO;AAAA,EACP,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,IACV,uBAAuB;AAAA,IACvB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,mBAAmB;AAAA,IACnB,qBAAqB;AAAA,IACrB,yBAAyB;AAAA,EAC1B;AAAA,EACA,oBAAoB;AAAA,EACpB,sBAAsB;AAAA,EACtB,UAAU;AAAA,EACV,cAAc,EAAE,SAAS,MAAM;AAAA,EAC/B,SAAS,EAAE,SAAS,MAAM;AAAA,EAC1B,iBAAiB;AAClB;AAEA,MAAM,oBAAoD;AAAA,EACzD,GAAG;AAAA,EACH,yBAAyB;AAAA,EACzB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,kBAAkB;AAAA,EAClB,iCAAiC;AAAA,EACjC,mBAAmB,SAAS,yBAAyB,iBAAiB;AAAA,EACtE,mBAAmB,SAAS,uBAAuB,eAAe;AAAA,EAClE,eAAe;AAChB;AAGO,IAAM,sBAAN,cAAkC,WAA0C;AAAA,EASlF,YACkB,QACA,WACuB,sBACJ,cACnC;AACD,UAAM;AALW;AACA;AACuB;AACJ;AAAA,EAGrC;AAAA,EA3HD,OA2GmF;AAAA;AAAA;AAAA,EACjE,SAAS,KAAK,UAAU,IAAI,kBAAoC,CAAC;AAAA,EACjE,QAAQ,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EACvD;AAAA,EAER,IAAW,yBAAyB;AACnC,WAAO,KAAK,OAAO,OAAO,0BAA0B,MAAM;AAAA,EAC3D;AAAA,EAWA,MAAa,OAAO,SAAyB;AAC5C,QAAI,EAAE,mBAAmB,iBAAiB;AACzC,WAAK,MAAM;AACX,aAAO;AAAA,IACR;AACA,UAAM,UAAU,QAAQ;AACxB,QAAI,CAAC,aAAa,WAAW,OAAO,GAAG;AACtC,WAAK,MAAM;AACX,aAAO;AAAA,IACR;AAEA,UAAM,CAAC,UAAU,QAAQ,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC9C,KAAK,aAAa,qBAAqB,QAAQ,WAAW;AAAA,MAC1D,KAAK,aAAa,qBAAqB,QAAQ,SAAS;AAAA,IACzD,CAAC;AAED,UAAM,QAAQ,KAAK,MAAM,QAAQ,IAAI,sBAAsB,UAAU,QAAQ;AAC7E,QAAI,CAAC,KAAK,OAAO,OAAO;AACvB,WAAK,OAAO,QAAQ,KAAK,SAAS,KAAK,qBAAqB;AAAA,QAC3D;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,CAAC;AAAA,QACD,KAAK;AAAA,MACN,IAAI,KAAK,qBAAqB;AAAA,QAC7B;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,CAAC;AAAA,MACF;AAEA,UAAI,KAAK,WAAW;AACnB,aAAK,OAAO,MAAM,OAAO,KAAK,SAAS;AAAA,MACxC;AAAA,IACD;AAEA,SAAK,OAAO,MAAM,SAAS,KAAK;AAChC,SAAK,OAAO,MAAM,cAAc,KAAK;AAAA,MACpC,YAAY,QAAQ,QAAQ,KAAK,YAAY,QAAQ,MAAM;AAAA,IAC5D,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEQ,QAAQ;AACf,SAAK,MAAM,MAAM;AACjB,SAAK,OAAO,MAAM;AAAA,EACnB;AAAA,EAEO,OAAO,YAA4B,mBAA4B;AACrE,SAAK,YAAY;AACjB,UAAM,SAAS,KAAK,OAAO;AAC3B,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AAEA,WAAO,OAAO,UAAU;AACxB,QAAI,CAAC,mBAAmB;AACvB,aAAO,WAAW;AAAA,IACnB;AAEA,UAAM,SAAS,KAAK,IAAI,KAAO,KAAK,IAAI,OAAO,kBAAkB,EAAE,iBAAiB,GAAG,OAAO,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;AACrI,WAAO,OAAO,EAAE,QAAQ,OAAO,WAAW,MAAM,CAAC;AACjD,WAAO;AAAA,EACR;AAAA,EAEU,WAAWA,cAA0C;AAC9D,WAAOA,eACJ,EAAE,GAAG,mBAAmB,aAAa,KAAK,IAC1C,EAAE,GAAG,mBAAmB,aAAa,MAAM;AAAA,EAC/C;AACD;AAzFa,sBAAN;AAAA,EAYJ;AAAA,EACA;AAAA,GAbU;AA4FN,IAAM,0BAAN,cAAsC,WAA0C;AAAA,EAOtF,YAA6B,WAAgE,sBAA6C;AACzI,UAAM;AADsB;AAAgE;AAE5F,SAAK,UAAU,aAAa,MAAM,KAAK,MAAM,CAAC,CAAC;AAAA,EAChD;AAAA,EAjND,OAuMuF;AAAA;AAAA;AAAA,EACrE,WAAW,IAAI;AAAA,IAC/B,MAAM,KAAK,UAAU,KAAK,qBAAqB,eAAe,kBAAkB,CAAC,CAAC,CAAC;AAAA,EACpF;AAAA,EAEQ;AAAA,EAOR,MAAa,OAAO,SAAyB;AAC5C,QAAI,EAAE,mBAAmB,iBAAiB;AACzC,WAAK,MAAM;AACX,aAAO;AAAA,IACR;AAEA,UAAM,UAAU,QAAQ;AACxB,QAAI,aAAa,WAAW,OAAO,KAAK,OAAO,QAAQ,YAAY,UAAU;AAC5E,WAAK,MAAM;AACX,aAAO;AAAA,IACR;AAGA,UAAM,WAAW,KAAK,UAAU,KAAK,SAAS,MAAM,OAAO,QAAQ,SAAS,CAAC,CAAC,CAAC;AAC/E,aAAS,QAAQ,MAAM,aAAa;AACpC,aAAS,QAAQ,UAAU,IAAI,cAAc;AAC7C,SAAK,UAAU,YAAY,SAAS,OAAO;AAC3C,SAAK,UAAU,SAAS;AACxB,WAAO;AAAA,EACR;AAAA,EAEO,OAAO,WAA+C;AAC5D,QAAI,CAAC,KAAK,SAAS;AAClB,aAAO;AAAA,IACR;AAEA,SAAK,QAAQ,MAAM,QAAQ,GAAG,UAAU,QAAQ,EAAE;AAClD,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEQ,QAAQ;AACf,QAAI,KAAK,SAAS;AACjB,WAAK,QAAQ,OAAO;AACpB,WAAK,UAAU;AAAA,IAChB;AAAA,EACD;AACD;AAhDa,0BAAN;AAAA,EAOgD;AAAA,GAP1C;AAkDN,IAAM,uBAAN,cAAmC,WAA0C;AAAA,EAUnF,YACkB,QACA,WACuB,sBACJ,cACnC;AACD,UAAM;AALW;AACA;AACuB;AACJ;AAAA,EAGrC;AAAA,EA1QD,OAyPoF;AAAA;AAAA;AAAA,EAClE,oBAAoB,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAC1D,SAAS,KAAK,UAAU,IAAI,kBAAoC,CAAC;AAAA,EACjE,QAAQ,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EACvD;AAAA,EAER,IAAW,yBAAyB;AACnC,WAAO,KAAK,OAAO,OAAO,0BAA0B,MAAM;AAAA,EAC3D;AAAA,EAWA,MAAa,OAAO,SAA2C;AAC9D,QAAI,EAAE,mBAAmB,iBAAiB;AACzC,WAAK,MAAM;AACX,aAAO;AAAA,IACR;AAEA,UAAM,UAAU,QAAQ;AACxB,QAAI,aAAa,WAAW,OAAO,KAAK,QAAQ,SAAS,gBAAgB,UAAU,OAAO,QAAQ,YAAY,UAAU;AACvH,WAAK,MAAM;AACX,aAAO;AAAA,IACR;AAEA,UAAM,WAAW,KAAK,MAAM,QAAQ,MAAM,KAAK,aAAa,qBAAqB,QAAQ,UAAU;AACnG,QAAI,CAAC,KAAK,OAAO,OAAO;AACvB,WAAK,OAAO,QAAQ,KAAK,SAAS,KAAK,qBAAqB;AAAA,QAC3D;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,CAAC;AAAA,QACD,KAAK;AAAA,MACN,IAAI,KAAK,qBAAqB;AAAA,QAC7B;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,EAAE,gBAAgB,KAAK;AAAA,MACxB;AAEA,UAAI,KAAK,WAAW;AACnB,aAAK,OAAO,MAAM,OAAO,KAAK,SAAS;AAAA,MACxC;AAAA,IACD;AAEA,SAAK,OAAO,MAAM,SAAS,SAAS,OAAO,eAAe;AAC1D,SAAK,OAAO,MAAM,cAAc,mBAAmB;AACnD,SAAK,kBAAkB,QAAQ,4BAA4B,QAAQ,SAAS,KAAK,OAAO,KAAK;AAC7F,WAAO;AAAA,EACR;AAAA,EAEQ,QAAQ;AACf,SAAK,kBAAkB,MAAM;AAC7B,SAAK,OAAO,MAAM;AAClB,SAAK,MAAM,MAAM;AAAA,EAClB;AAAA,EAEO,OAAO,YAA4B,mBAA4B;AACrE,SAAK,YAAY;AACjB,UAAM,SAAS,KAAK,OAAO;AAC3B,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AAEA,WAAO,OAAO,UAAU;AACxB,QAAI,CAAC,mBAAmB;AACvB,aAAO,WAAW;AAAA,IACnB;AAEA,UAAM,SAAS,OAAO,iBAAiB;AACvC,WAAO,OAAO,EAAE,QAAQ,OAAO,WAAW,MAAM,CAAC;AACjD,WAAO;AAAA,EACR;AACD;AA/Ea,uBAAN;AAAA,EAaJ;AAAA,EACA;AAAA,GAdU;AAiFN,IAAM,sBAAN,cAAkC,WAA0C;AAAA,EAUlF,YACkB,WACA,cACkB,iBACM,uBACE,kBAC1C;AACD,UAAM;AANW;AACA;AACkB;AACM;AACE;AAAA,EAG5C;AAAA,EA5VD,OA0UmF;AAAA;AAAA;AAAA,EAC1E;AAAA,EACS,cAAc,KAAK,UAAU,IAAI,uBAA+B,EAAE,CAAC;AAAA,EACnE,qBAAqB,KAAK,UAAU,IAAI,QAAQ,EAAE,CAAC;AAAA;AAAA,EAGnD,WAAW,KAAK,UAAU,IAAI,kBAA6C,CAAC;AAAA;AAAA,EAE5E,qBAAqB,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAY5E,MAAc,eAAe;AAC5B,UAAM,OAAO,KAAK,SAAS;AAC3B,QAAI,MAAM;AACT,WAAK,MAAM,YAAY;AACvB,WAAK,MAAM,uBAAuB;AAGlC,WAAK,MAAM,MAAM,kBAAkB;AACnC,aAAO;AAAA,IACR;AAEA,UAAM,eAAe,IAAI,wBAAwB;AACjD,UAAM,MAAM,KAAK;AACjB,iBAAa,IAAI,mBAAmB,cAAc;AAAA,MACjD,MAAM,mBAAmB;AAAA,MACzB,IAAI,OAAO;AAAE,eAAO,CAAC,IAAI,KAAK;AAAA,MAAG;AAAA,MACjC,gBAAgB,IAAI;AAAA,MACpB,QAAQ,6BAAM,IAAI,OAAV;AAAA,MACR,WAAW,6BAAM;AAAA,MAAE,GAAR;AAAA,IACZ,CAAC;AAED,WAAO,KAAK,SAAS,QAAQ,MAAM,KAAK,gBAAgB,uBAAuB;AAAA,MAC9E,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,MACV;AAAA,MACA,aAAa,IAAI,oBAAoB,EAAE,YAAY,IAAI,MAAM,CAAC;AAAA,MAC9D,eAAe;AAAA,QACd,oBAAoB,kCAAS;AAC5B,gBAAM,qBAAqB,MAAM,SAAS,yBAAyB;AACnE,cAAI,oBAAoB;AACvB,mBAAO;AAAA,UACR;AACA,cAAI,KAAK,cAAc;AACtB,mBAAO,MAAM,SAAS,yBAAyB;AAAA,UAChD;AACA,gBAAM,WAAW,KAAK,sBAAsB,oBAAoB,QAAQ,aAAa;AACrF,iBAAO,aAAa,sBAAsB,QACvC,MAAM,SAAS,gBAAgB,IAC/B,MAAM,SAAS,mBAAmB;AAAA,QACtC,GAZoB;AAAA,MAarB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAa,OAAO,SAA2C;AAC9D,SAAK,mBAAmB,MAAM;AAC9B,QAAI,mBAAmB,aAAa;AACnC,YAAM,KAAK,qBAAqB,OAAO;AAAA,IACxC,WAAW,mBAAmB,qBAAsB,mBAAmB,kBAAkB,QAAQ,QAAQ,SAAS,gBAAgB,QAAS;AAC1I,YAAM,KAAK,qBAAqB,OAAO;AAAA,IACxC,OAAO;AACN,WAAK,MAAM;AACX,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,qBAAqB,SAA6C;AAC/E,UAAM,OAAO;AACb,UAAM,WAAW,mBAAmB,oBAAoB,QAAQ,KAAK,OAAO,QAAQ;AACpF,UAAM,WAAW,MAAM,KAAK,kBAAkC;AAAA,MAC7D;AAAA,MACA,iBAAiB,SAAS,gBAAgB,0CAA0C;AAAA,MACpF,WAAW,mCAAU,QAAQ,MAAM,QAAQ,SAAS,EAAE,QAA3C;AAAA,MACX,CAAC,eAAe,QAAQ,SAAS;AAChC,aAAK,UAAU,SAAS,GAAG;AAC3B,cAAM,QAAQ,mBAAmB,oBAAoB,QAAQ,OAAO,QAAQ,aAAa,SAAS,KAAK;AACvG,YAAI,CAAC,OAAO;AACX;AAAA,QACD;AAEA,mBAAW,WAAW,MAAM,MAAM,QAAQ,SAAS,EAAE,UAAU;AAC9D,cAAI,QAAQ,SAAS,gBAAgB,QAAQ;AAC5C,mBAAO,OAAO,aAAa,QAAQ,QAAQ,QAAQ,MAAM;AAAA,UAC1D;AAAA,QACD;AAAA,MACD;AAAA,MACA,qBAAqB,wBAAC,QAAQ,QAAQ,UAAU,OAAO,SAAS,OAAK;AACpE,YAAI,EAAE,WAAW,2BAA2B,cAAc,EAAE,KAAK,KAAK,UAAU,SAAS,SAAS,EAAE,QAAQ,SAAS,gBAAgB,QAAQ;AAC5I,qBAAW,SAAS,OAAO,aAAa,EAAE,QAAQ,QAAQ,EAAE,QAAQ,MAAM,GAAG;AAC5E,kBAAM,MAAM,MAAM;AAAA,UACnB;AAAA,QACD;AAAA,MACD,CAAC,GANoB;AAAA,IAOtB,CAAC;AAED,QAAI,mBAAmB,kBAAkB,QAAQ,QAAQ,SAAS,gBAAgB,UAAU,QAAQ,QAAQ,WAAW,QAAW;AACjI,gBAAU,MAAM;AAAA,QAAkB,UAAU,QAAQ,QAAQ,QAAQ,IAAI;AAAA,QAAG,UAAU,QAAQ,QAAQ,QAAQ,KAAK;AAAA;AAAA,QAAyB;AAAA,MAAI;AAAA,IAChJ;AAAA,EACD;AAAA,EAEQ,qBAAqB,SAAsB;AAClD,WAAO,KAAK,kBAAuC;AAAA,MAClD;AAAA,MACA,iBAAiB,SAAS,eAAe,yCAAyC;AAAA,MAClF,WAAW,mCAAU,QAAQ,MAAM,QAAQ,SAAS,GAAzC;AAAA,MACX,gBAAgB,wBAAC,MAAM,WAAW;AAGjC,aAAK,UAAU,SAAS,KAAK,OAAO,OAAO,OAAK,CAAC,CAAC,EAAE,KAAK,GAAG,GAAG,KAAK,GAAG;AACvE,eAAO,KAAK,OAAO;AAAA,MACpB,GALgB;AAAA,MAMhB,qBAAqB,wBAAC,MAAM,SAAS,UAAU,KAAK,OAAO,eAAe,OAAK,MAAM,EAAE,MAAM,CAAC,GAAzE;AAAA,IACtB,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,kBAAqB,MAMhC;AACF,UAAM,SAAS,KAAK,QAAQ;AAC5B,UAAM,SAAS,KAAK,UAAU,MAAM;AACpC,QAAI,CAAC,QAAQ;AACZ,aAAO,KAAK,MAAM;AAAA,IACnB;AAEA,UAAM,WAAW,MAAM,KAAK,aAAa;AACzC,QAAI,eAAe;AAEnB,UAAM,gBAAgB,IAAI,uBAAuB,CAAC;AAClD,QAAI,kBAAkB,gBAAgB;AACrC,iBAAW,SAAS,KAAK,eAAe,QAAQ,MAAM,GAAG;AACxD,yBAAiB,MAAM,aAAa;AACpC,sBAAc;AACd,iBAAS,MAAM,MAAM,MAAM,QAAQ,MAAM,cAAc,OAAO;AAAA,MAC/D;AAAA,IACD,OAAO;AACN,qBAAe;AACf,WAAK,YAAY,UAAU,SAAS,sBAAsB,kDAAkD,CAAC;AAAA,IAC9G;AAEA,SAAK,oBAAoB,QAAQ;AACjC,SAAK,mBAAmB,MAAM;AAE9B,QAAI,kBAAkB,kBAAkB,CAAC,OAAO,aAAa;AAC5D,YAAM,KAAK,OAAO,WAAW,MAAM;AAClC,YAAI,CAAC,cAAc;AAClB,eAAK,YAAY,UAAU,KAAK,eAAe;AAAA,QAChD;AAAA,MACD,CAAC;AACD,YAAM,KAAK,KAAK,oBAAoB,QAAQ,QAAQ,UAAQ;AAC3D,iBAAS,MAAM,MAAM,IAAI;AACzB,yBAAiB,KAAK,aAAa;AAAA,MACpC,CAAC;AAED,WAAK,mBAAmB,QAAQ,mBAAmB,IAAI,EAAE;AAAA,IAC1D;AAEA,QAAI,CAAC,KAAK,mBAAmB,SAAS,CAAC,cAAc;AACpD,WAAK,YAAY,UAAU,KAAK,eAAe;AAAA,IAChD;AAIA,QAAI,cAAc,QAAQ,GAAG;AAC5B,YAAM,IAAI,QAAc,aAAW;AAClC,cAAM,IAAI,cAAc,YAAY,MAAM;AACzC,cAAI,cAAc,UAAU,GAAG;AAC9B,cAAE,QAAQ;AACV,oBAAQ;AAAA,UACT;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,UAAU,SAAe;AAChC,UAAM,KAAM,WAAW,KAAK,iBAAiB,mBAAmB,OAAO,KACnE,KAAK,iBAAiB,aAAa,EAAE,QAAQ,CAAC;AAClD,QAAI,IAAI;AACP,WAAK,YAAY,QAAQ,GAAG,IAAI;AAAA,IACjC;AAAA,EACD;AAAA,EAEQ,YAAY,UAAqC,KAAa;AACrE,aAAS,MAAM,MAAM,yBAAyB,GAAG,CAAC;AAAA,EACnD;AAAA,EAEQ,oBAAoB,UAAqC;AAChE,aAAS,MAAM,MAAM,WAAW;AAChC,QAAI,6BAA6B,IAAI,UAAU,KAAK,SAAS,GAAG,MAAM,KAAK,eAAe,QAAQ,CAAC;AACnG,aAAS,gBAAgB,KAAK,WAAW,EAAE,WAAW,MAAM,CAAC;AAAA,EAC9D;AAAA,EAEQ,QAAQ;AACf,SAAK,mBAAmB,MAAM;AAC9B,SAAK,mBAAmB,OAAO;AAC/B,SAAK,SAAS,MAAM;AAAA,EACrB;AAAA,EAEO,OAAO,YAA4B;AACzC,SAAK,aAAa;AAClB,QAAI,KAAK,SAAS,OAAO;AACxB,WAAK,eAAe,KAAK,SAAS,OAAO,WAAW,OAAO,WAAW,MAAM;AAC5E,aAAO,WAAW;AAAA,IACnB;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,eACP,EAAE,MAAM,GACR,QAAQ,KAAK,YAAY,SAAS,KAAK,UAAU,aACjD,SAAS,KAAK,YAAY,UAAU,KAAK,UAAU,cAClD;AACD,aAAS,KAAK;AACd,SAAK,mBAAmB,QAAQ,MAAM;AACrC,YAAM,SAAS,yBAAyB,IAAI,UAAU,KAAK,SAAS,GAAG,MAAM,QAAQ,GAAG,OAAO,MAAM;AACrG,UAAI,QAAQ;AACX,cAAM,OAAO,OAAO,MAAM,OAAO,IAAI;AAAA,MACtC;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAhPa,sBAAN;AAAA,EAaJ;AAAA,EACA;AAAA,EACA;AAAA,GAfU;AAkPb,MAAM,cAAc,wBAAC,QAA4B,CAAC,CAAC,OAAO,IAAI,SAAS,IAAI,GAAvD;",
  "names": ["isMultiline"]
}
