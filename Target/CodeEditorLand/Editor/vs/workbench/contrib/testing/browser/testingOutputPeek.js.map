{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testingOutputPeek.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { IAction } from '../../../../base/common/actions.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { Lazy } from '../../../../base/common/lazy.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { observableValue } from '../../../../base/common/observable.js';\nimport { count } from '../../../../base/common/strings.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor, isCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorAction2 } from '../../../../editor/browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { EmbeddedCodeEditorWidget } from '../../../../editor/browser/widget/codeEditor/embeddedCodeEditorWidget.js';\nimport { EmbeddedDiffEditorWidget } from '../../../../editor/browser/widget/diffEditor/embeddedDiffEditorWidget.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { IEditor, IEditorContribution, ScrollType } from '../../../../editor/common/editorCommon.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { IPeekViewService, PeekViewWidget, peekViewTitleForeground, peekViewTitleInfoForeground } from '../../../../editor/contrib/peekView/browser/peekView.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { createAndFillInActionBarActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { Action2, IMenuService, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { ITextEditorOptions, TextEditorSelectionRevealType } from '../../../../platform/editor/common/editor.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { bindContextKey } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { editorBackground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IViewPaneOptions, ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { renderTestMessageAsText } from './testMessageColorizer.js';\nimport { InspectSubject, MessageSubject, TaskSubject, TestOutputSubject, inspectSubjectHasStack, mapFindTestMessage } from './testResultsView/testResultsSubject.js';\nimport { TestResultsViewContent } from './testResultsView/testResultsViewContent.js';\nimport { testingMessagePeekBorder, testingPeekBorder, testingPeekHeaderBackground, testingPeekMessageHeaderBackground } from './theme.js';\nimport { AutoOpenPeekViewWhen, TestingConfigKeys, getTestingConfiguration } from '../common/configuration.js';\nimport { Testing } from '../common/constants.js';\nimport { MutableObservableValue, staticObservableValue } from '../common/observableValue.js';\nimport { StoredValue } from '../common/storedValue.js';\nimport { ITestResult, TestResultItemChange, TestResultItemChangeReason, resultItemParents } from '../common/testResult.js';\nimport { ITestResultService, ResultChangeEvent } from '../common/testResultService.js';\nimport { ITestService } from '../common/testService.js';\nimport { IRichLocation, ITestMessage, TestMessageType, TestResultItem } from '../common/testTypes.js';\nimport { TestingContextKeys } from '../common/testingContextKeys.js';\nimport { IShowResultOptions, ITestingPeekOpener } from '../common/testingPeekOpener.js';\nimport { isFailedState } from '../common/testingStates.js';\nimport { ParsedTestUri, TestUriType, buildTestUri, parseTestUri } from '../common/testingUri.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\n\n\n/** Iterates through every message in every result */\nfunction* allMessages(results: readonly ITestResult[]) {\n\tfor (const result of results) {\n\t\tfor (const test of result.tests) {\n\t\t\tfor (let taskIndex = 0; taskIndex < test.tasks.length; taskIndex++) {\n\t\t\t\tfor (let messageIndex = 0; messageIndex < test.tasks[taskIndex].messages.length; messageIndex++) {\n\t\t\t\t\tyield { result, test, taskIndex, messageIndex };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ntype TestUriWithDocument = ParsedTestUri & { documentUri: URI };\n\nexport class TestingPeekOpener extends Disposable implements ITestingPeekOpener {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate lastUri?: TestUriWithDocument;\n\n\t/** @inheritdoc */\n\tpublic readonly historyVisible = this._register(MutableObservableValue.stored(new StoredValue<boolean>({\n\t\tkey: 'testHistoryVisibleInPeek',\n\t\tscope: StorageScope.PROFILE,\n\t\ttarget: StorageTarget.USER,\n\t}, this.storageService), false));\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configuration: IConfigurationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(testResults.onTestChanged(this.openPeekOnFailure, this));\n\t}\n\n\t/** @inheritdoc */\n\tpublic async open() {\n\t\tlet uri: TestUriWithDocument | undefined;\n\t\tconst active = this.editorService.activeTextEditorControl;\n\t\tif (isCodeEditor(active) && active.getModel()?.uri) {\n\t\t\tconst modelUri = active.getModel()?.uri;\n\t\t\tif (modelUri) {\n\t\t\t\turi = await this.getFileCandidateMessage(modelUri, active.getPosition());\n\t\t\t}\n\t\t}\n\n\t\tif (!uri) {\n\t\t\turi = this.lastUri;\n\t\t}\n\n\t\tif (!uri) {\n\t\t\turi = this.getAnyCandidateMessage();\n\t\t}\n\n\t\tif (!uri) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.showPeekFromUri(uri);\n\t}\n\n\t/** @inheritdoc */\n\tpublic tryPeekFirstError(result: ITestResult, test: TestResultItem, options?: Partial<ITextEditorOptions>) {\n\t\tconst candidate = this.getFailedCandidateMessage(test);\n\t\tif (!candidate) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.showPeekFromUri({\n\t\t\ttype: TestUriType.ResultMessage,\n\t\t\tdocumentUri: candidate.location.uri,\n\t\t\ttaskIndex: candidate.taskId,\n\t\t\tmessageIndex: candidate.index,\n\t\t\tresultId: result.id,\n\t\t\ttestExtId: test.item.extId,\n\t\t}, undefined, { selection: candidate.location.range, selectionRevealType: TextEditorSelectionRevealType.NearTopIfOutsideViewport, ...options });\n\t\treturn true;\n\t}\n\n\t/** @inheritdoc */\n\tpublic peekUri(uri: URI, options: IShowResultOptions = {}) {\n\t\tconst parsed = parseTestUri(uri);\n\t\tconst result = parsed && this.testResults.getResult(parsed.resultId);\n\t\tif (!parsed || !result || !('testExtId' in parsed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!('messageIndex' in parsed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst message = result.getStateById(parsed.testExtId)?.tasks[parsed.taskIndex].messages[parsed.messageIndex];\n\t\tif (!message?.location) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.showPeekFromUri({\n\t\t\ttype: TestUriType.ResultMessage,\n\t\t\tdocumentUri: message.location.uri,\n\t\t\ttaskIndex: parsed.taskIndex,\n\t\t\tmessageIndex: parsed.messageIndex,\n\t\t\tresultId: result.id,\n\t\t\ttestExtId: parsed.testExtId,\n\t\t}, options.inEditor, { selection: message.location.range, ...options.options });\n\t\treturn true;\n\t}\n\n\t/** @inheritdoc */\n\tpublic closeAllPeeks() {\n\t\tfor (const editor of this.codeEditorService.listCodeEditors()) {\n\t\t\tTestingOutputPeekController.get(editor)?.removePeek();\n\t\t}\n\t}\n\n\tpublic openCurrentInEditor(): void {\n\t\tconst current = this.getActiveControl();\n\t\tif (!current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options = { pinned: false, revealIfOpened: true };\n\t\tif (current instanceof TaskSubject || current instanceof TestOutputSubject) {\n\t\t\tthis.editorService.openEditor({ resource: current.outputUri, options });\n\t\t\treturn;\n\t\t}\n\n\t\tif (current instanceof TestOutputSubject) {\n\t\t\tthis.editorService.openEditor({ resource: current.outputUri, options });\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = current.message;\n\t\tif (current.isDiffable) {\n\t\t\tthis.editorService.openEditor({\n\t\t\t\toriginal: { resource: current.expectedUri },\n\t\t\t\tmodified: { resource: current.actualUri },\n\t\t\t\toptions,\n\t\t\t});\n\t\t} else if (typeof message.message === 'string') {\n\t\t\tthis.editorService.openEditor({ resource: current.messageUri, options });\n\t\t} else {\n\t\t\tthis.commandService.executeCommand('markdown.showPreview', current.messageUri).catch(err => {\n\t\t\t\tthis.notificationService.error(localize('testing.markdownPeekError', 'Could not open markdown preview: {0}.\\n\\nPlease make sure the markdown extension is enabled.', err.message));\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getActiveControl(): InspectSubject | undefined {\n\t\tconst editor = getPeekedEditorFromFocus(this.codeEditorService);\n\t\tconst controller = editor && TestingOutputPeekController.get(editor);\n\t\treturn controller?.subject ?? this.viewsService.getActiveViewWithId<TestResultsView>(Testing.ResultsViewId)?.subject;\n\t}\n\n\t/** @inheritdoc */\n\tprivate async showPeekFromUri(uri: TestUriWithDocument, editor?: IEditor, options?: ITextEditorOptions) {\n\t\tif (isCodeEditor(editor)) {\n\t\t\tthis.lastUri = uri;\n\t\t\tTestingOutputPeekController.get(editor)?.show(buildTestUri(this.lastUri));\n\t\t\treturn true;\n\t\t}\n\n\t\tconst pane = await this.editorService.openEditor({\n\t\t\tresource: uri.documentUri,\n\t\t\toptions: { revealIfOpened: true, ...options }\n\t\t});\n\n\t\tconst control = pane?.getControl();\n\t\tif (!isCodeEditor(control)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.lastUri = uri;\n\t\tTestingOutputPeekController.get(control)?.show(buildTestUri(this.lastUri));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Opens the peek view on a test failure, based on user preferences.\n\t */\n\tprivate openPeekOnFailure(evt: TestResultItemChange) {\n\t\tif (evt.reason !== TestResultItemChangeReason.OwnStateChange) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst candidate = this.getFailedCandidateMessage(evt.item);\n\t\tif (!candidate) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (evt.result.request.continuous && !getTestingConfiguration(this.configuration, TestingConfigKeys.AutoOpenPeekViewDuringContinuousRun)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editors = this.codeEditorService.listCodeEditors();\n\t\tconst cfg = getTestingConfiguration(this.configuration, TestingConfigKeys.AutoOpenPeekView);\n\n\t\t// don't show the peek if the user asked to only auto-open peeks for visible tests,\n\t\t// and this test is not in any of the editors' models.\n\t\tswitch (cfg) {\n\t\t\tcase AutoOpenPeekViewWhen.FailureVisible: {\n\t\t\t\tconst editorUris = new Set(editors.map(e => e.getModel()?.uri.toString()));\n\t\t\t\tif (!Iterable.some(resultItemParents(evt.result, evt.item), i => i.item.uri && editorUris.has(i.item.uri.toString()))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak; //continue\n\t\t\t}\n\t\t\tcase AutoOpenPeekViewWhen.FailureAnywhere:\n\t\t\t\tbreak; //continue\n\n\t\t\tdefault:\n\t\t\t\treturn; // never show\n\t\t}\n\n\t\tconst controllers = editors.map(TestingOutputPeekController.get);\n\t\tif (controllers.some(c => c?.subject)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tryPeekFirstError(evt.result, evt.item);\n\t}\n\n\t/**\n\t * Gets the message closest to the given position from a test in the file.\n\t */\n\tprivate async getFileCandidateMessage(uri: URI, position: Position | null) {\n\t\tlet best: TestUriWithDocument | undefined;\n\t\tlet bestDistance = Infinity;\n\n\t\t// Get all tests for the document. In those, find one that has a test\n\t\t// message closest to the cursor position.\n\t\tconst demandedUriStr = uri.toString();\n\t\tfor (const test of this.testService.collection.all) {\n\t\t\tconst result = this.testResults.getStateById(test.item.extId);\n\t\t\tif (!result) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmapFindTestMessage(result[1], (_task, message, messageIndex, taskIndex) => {\n\t\t\t\tif (message.type !== TestMessageType.Error || !message.location || message.location.uri.toString() !== demandedUriStr) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst distance = position ? Math.abs(position.lineNumber - message.location.range.startLineNumber) : 0;\n\t\t\t\tif (!best || distance <= bestDistance) {\n\t\t\t\t\tbestDistance = distance;\n\t\t\t\t\tbest = {\n\t\t\t\t\t\ttype: TestUriType.ResultMessage,\n\t\t\t\t\t\ttestExtId: result[1].item.extId,\n\t\t\t\t\t\tresultId: result[0].id,\n\t\t\t\t\t\ttaskIndex,\n\t\t\t\t\t\tmessageIndex,\n\t\t\t\t\t\tdocumentUri: uri,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn best;\n\t}\n\n\t/**\n\t * Gets any possible still-relevant message from the results.\n\t */\n\tprivate getAnyCandidateMessage() {\n\t\tconst seen = new Set<string>();\n\t\tfor (const result of this.testResults.results) {\n\t\t\tfor (const test of result.tests) {\n\t\t\t\tif (seen.has(test.item.extId)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tseen.add(test.item.extId);\n\t\t\t\tconst found = mapFindTestMessage(test, (task, message, messageIndex, taskIndex) => (\n\t\t\t\t\tmessage.location && {\n\t\t\t\t\t\ttype: TestUriType.ResultMessage,\n\t\t\t\t\t\ttestExtId: test.item.extId,\n\t\t\t\t\t\tresultId: result.id,\n\t\t\t\t\t\ttaskIndex,\n\t\t\t\t\t\tmessageIndex,\n\t\t\t\t\t\tdocumentUri: message.location.uri,\n\t\t\t\t\t}\n\t\t\t\t));\n\n\t\t\t\tif (found) {\n\t\t\t\t\treturn found;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the first failed message that can be displayed from the result.\n\t */\n\tprivate getFailedCandidateMessage(test: TestResultItem) {\n\t\tconst fallbackLocation = test.item.uri && test.item.range\n\t\t\t? { uri: test.item.uri, range: test.item.range }\n\t\t\t: undefined;\n\n\t\tlet best: { taskId: number; index: number; message: ITestMessage; location: IRichLocation } | undefined;\n\t\tmapFindTestMessage(test, (task, message, messageIndex, taskId) => {\n\t\t\tconst location = message.location || fallbackLocation;\n\t\t\tif (!isFailedState(task.state) || !location) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (best && message.type !== TestMessageType.Error) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbest = { taskId, index: messageIndex, message, location };\n\t\t});\n\n\t\treturn best;\n\t}\n}\n\n/**\n * Adds output/message peek functionality to code editors.\n */\nexport class TestingOutputPeekController extends Disposable implements IEditorContribution {\n\t/**\n\t * Gets the controller associated with the given code editor.\n\t */\n\tpublic static get(editor: ICodeEditor): TestingOutputPeekController | null {\n\t\treturn editor.getContribution<TestingOutputPeekController>(Testing.OutputPeekContributionId);\n\t}\n\n\t/**\n\t * Currently-shown peek view.\n\t */\n\tprivate readonly peek = this._register(new MutableDisposable<TestResultsPeek>());\n\n\t/**\n\t * Context key updated when the peek is visible/hidden.\n\t */\n\tprivate readonly visible: IContextKey<boolean>;\n\n\t/**\n\t * Gets the currently display subject. Undefined if the peek is not open.\n\t */\n\tpublic get subject() {\n\t\treturn this.peek.value?.current;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.visible = TestingContextKeys.isPeekVisible.bindTo(contextKeyService);\n\t\tthis._register(editor.onDidChangeModel(() => this.peek.clear()));\n\t\tthis._register(testResults.onResultsChanged(this.closePeekOnCertainResultEvents, this));\n\t\tthis._register(testResults.onTestChanged(this.closePeekOnTestChange, this));\n\t}\n\n\t/**\n\t * Shows a peek for the message in the editor.\n\t */\n\tpublic async show(uri: URI) {\n\t\tconst subject = this.retrieveTest(uri);\n\t\tif (subject) {\n\t\t\tthis.showSubject(subject);\n\t\t}\n\t}\n\n\t/**\n\t * Shows a peek for the existing inspect subject.\n\t */\n\tpublic async showSubject(subject: InspectSubject) {\n\t\tif (!this.peek.value) {\n\t\t\tthis.peek.value = this.instantiationService.createInstance(TestResultsPeek, this.editor);\n\t\t\tthis.peek.value.onDidClose(() => {\n\t\t\t\tthis.visible.set(false);\n\t\t\t\tthis.peek.value = undefined;\n\t\t\t});\n\n\t\t\tthis.visible.set(true);\n\t\t\tthis.peek.value.create();\n\t\t}\n\n\t\tif (subject instanceof MessageSubject) {\n\t\t\talert(renderTestMessageAsText(subject.message.message));\n\t\t}\n\n\t\tthis.peek.value.setModel(subject);\n\t}\n\n\tpublic async openAndShow(uri: URI) {\n\t\tconst subject = this.retrieveTest(uri);\n\t\tif (!subject) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!subject.revealLocation || subject.revealLocation.uri.toString() === this.editor.getModel()?.uri.toString()) {\n\t\t\treturn this.show(uri);\n\t\t}\n\n\t\tconst otherEditor = await this.codeEditorService.openCodeEditor({\n\t\t\tresource: subject.revealLocation.uri,\n\t\t\toptions: { pinned: false, revealIfOpened: true }\n\t\t}, this.editor);\n\n\t\tif (otherEditor) {\n\t\t\tTestingOutputPeekController.get(otherEditor)?.removePeek();\n\t\t\treturn TestingOutputPeekController.get(otherEditor)?.show(uri);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes the peek view, if any.\n\t */\n\tpublic removePeek() {\n\t\tthis.peek.clear();\n\t}\n\n\t/**\n\t * Collapses all displayed stack frames.\n\t */\n\tpublic collapseStack() {\n\t\tthis.peek.value?.collapseStack();\n\t}\n\n\t/**\n\t * Shows the next message in the peek, if possible.\n\t */\n\tpublic next() {\n\t\tconst subject = this.peek.value?.current;\n\t\tif (!subject) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet found = false;\n\t\tfor (const { messageIndex, taskIndex, result, test } of allMessages(this.testResults.results)) {\n\t\t\tif (subject instanceof TaskSubject && result.id === subject.result.id) {\n\t\t\t\tfound = true; // open the first message found in the current result\n\t\t\t}\n\n\t\t\tif (found) {\n\t\t\t\tthis.openAndShow(buildTestUri({\n\t\t\t\t\ttype: TestUriType.ResultMessage,\n\t\t\t\t\tmessageIndex,\n\t\t\t\t\ttaskIndex,\n\t\t\t\t\tresultId: result.id,\n\t\t\t\t\ttestExtId: test.item.extId\n\t\t\t\t}));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (subject instanceof TestOutputSubject && subject.test.item.extId === test.item.extId && subject.taskIndex === taskIndex && subject.result.id === result.id) {\n\t\t\t\tfound = true;\n\t\t\t}\n\n\t\t\tif (subject instanceof MessageSubject && subject.test.extId === test.item.extId && subject.messageIndex === messageIndex && subject.taskIndex === taskIndex && subject.result.id === result.id) {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows the previous message in the peek, if possible.\n\t */\n\tpublic previous() {\n\t\tconst subject = this.peek.value?.current;\n\t\tif (!subject) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet previous: { messageIndex: number; taskIndex: number; result: ITestResult; test: TestResultItem } | undefined;\n\t\tfor (const m of allMessages(this.testResults.results)) {\n\t\t\tif (subject instanceof TaskSubject) {\n\t\t\t\tif (m.result.id === subject.result.id) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (subject instanceof TestOutputSubject) {\n\t\t\t\tif (m.test.item.extId === subject.test.item.extId && m.result.id === subject.result.id && m.taskIndex === subject.taskIndex) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (subject.test.extId === m.test.item.extId && subject.messageIndex === m.messageIndex && subject.taskIndex === m.taskIndex && subject.result.id === m.result.id) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tprevious = m;\n\t\t}\n\n\t\tif (previous) {\n\t\t\tthis.openAndShow(buildTestUri({\n\t\t\t\ttype: TestUriType.ResultMessage,\n\t\t\t\tmessageIndex: previous.messageIndex,\n\t\t\t\ttaskIndex: previous.taskIndex,\n\t\t\t\tresultId: previous.result.id,\n\t\t\t\ttestExtId: previous.test.item.extId\n\t\t\t}));\n\t\t}\n\t}\n\n\t/**\n\t * Removes the peek view if it's being displayed on the given test ID.\n\t */\n\tpublic removeIfPeekingForTest(testId: string) {\n\t\tconst c = this.peek.value?.current;\n\t\tif (c && c instanceof MessageSubject && c.test.extId === testId) {\n\t\t\tthis.peek.clear();\n\t\t}\n\t}\n\n\t/**\n\t * If the test we're currently showing has its state change to something\n\t * else, then clear the peek.\n\t */\n\tprivate closePeekOnTestChange(evt: TestResultItemChange) {\n\t\tif (evt.reason !== TestResultItemChangeReason.OwnStateChange || evt.previousState === evt.item.ownComputedState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.removeIfPeekingForTest(evt.item.item.extId);\n\t}\n\n\tprivate closePeekOnCertainResultEvents(evt: ResultChangeEvent) {\n\t\tif ('started' in evt) {\n\t\t\tthis.peek.clear(); // close peek when runs start\n\t\t}\n\n\t\tif ('removed' in evt && this.testResults.results.length === 0) {\n\t\t\tthis.peek.clear(); // close the peek if results are cleared\n\t\t}\n\t}\n\n\tprivate retrieveTest(uri: URI): InspectSubject | undefined {\n\t\tconst parts = parseTestUri(uri);\n\t\tif (!parts) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result = this.testResults.results.find(r => r.id === parts.resultId);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (parts.type === TestUriType.TaskOutput) {\n\t\t\treturn new TaskSubject(result, parts.taskIndex);\n\t\t}\n\n\t\tif (parts.type === TestUriType.TestOutput) {\n\t\t\tconst test = result.getStateById(parts.testExtId);\n\t\t\tif (!test) { return; }\n\t\t\treturn new TestOutputSubject(result, parts.taskIndex, test);\n\t\t}\n\n\t\tconst { testExtId, taskIndex, messageIndex } = parts;\n\t\tconst test = result?.getStateById(testExtId);\n\t\tif (!test || !test.tasks[parts.taskIndex]) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new MessageSubject(result, test, taskIndex, messageIndex);\n\t}\n}\n\n\nclass TestResultsPeek extends PeekViewWidget {\n\tprivate static lastHeightInLines?: number;\n\n\tprivate readonly visibilityChange = this._disposables.add(new Emitter<boolean>());\n\tprivate readonly _current = observableValue<InspectSubject | undefined>('testPeekCurrent', undefined);\n\tprivate content!: TestResultsViewContent;\n\tprivate scopedContextKeyService!: IContextKeyService;\n\tprivate dimension?: dom.Dimension;\n\n\tpublic get current() {\n\t\treturn this._current.get();\n\t}\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IPeekViewService peekViewService: IPeekViewService,\n\t\t@ITestingPeekOpener private readonly testingPeek: ITestingPeekOpener,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITextModelService protected readonly modelService: ITextModelService,\n\t\t@ICodeEditorService protected readonly codeEditorService: ICodeEditorService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(editor, { showFrame: true, frameWidth: 1, showArrow: true, isResizeable: true, isAccessible: true, className: 'test-output-peek' }, instantiationService);\n\n\t\tthis._disposables.add(themeService.onDidColorThemeChange(this.applyTheme, this));\n\t\tthis._disposables.add(this.onDidClose(() => this.visibilityChange.fire(false)));\n\t\tpeekViewService.addExclusiveWidget(editor, this);\n\t}\n\n\tprivate applyTheme() {\n\t\tconst theme = this.themeService.getColorTheme();\n\t\tconst isError = this.current instanceof MessageSubject && this.current.message.type === TestMessageType.Error;\n\t\tconst borderColor = (isError ? theme.getColor(testingPeekBorder) : theme.getColor(testingMessagePeekBorder)) || Color.transparent;\n\t\tconst headerBg = (isError ? theme.getColor(testingPeekHeaderBackground) : theme.getColor(testingPeekMessageHeaderBackground)) || Color.transparent;\n\t\tconst editorBg = theme.getColor(editorBackground);\n\t\tthis.style({\n\t\t\tarrowColor: borderColor,\n\t\t\tframeColor: borderColor,\n\t\t\theaderBackgroundColor: editorBg && headerBg ? headerBg.makeOpaque(editorBg) : headerBg,\n\t\t\tprimaryHeadingColor: theme.getColor(peekViewTitleForeground),\n\t\t\tsecondaryHeadingColor: theme.getColor(peekViewTitleInfoForeground)\n\t\t});\n\t}\n\n\tprotected override _fillContainer(container: HTMLElement): void {\n\t\tif (!this.scopedContextKeyService) {\n\t\t\tthis.scopedContextKeyService = this._disposables.add(this.contextKeyService.createScoped(container));\n\t\t\tTestingContextKeys.isInPeek.bindTo(this.scopedContextKeyService).set(true);\n\t\t\tconst instaService = this._disposables.add(this.instantiationService.createChild(new ServiceCollection([IContextKeyService, this.scopedContextKeyService])));\n\t\t\tthis.content = this._disposables.add(instaService.createInstance(TestResultsViewContent, this.editor, { historyVisible: this.testingPeek.historyVisible, showRevealLocationOnMessages: false, locationForProgress: Testing.ResultsViewId }));\n\n\t\t\tthis._disposables.add(this.content.onClose(() => {\n\t\t\t\tTestingOutputPeekController.get(this.editor)?.removePeek();\n\t\t\t}));\n\t\t}\n\n\t\tsuper._fillContainer(container);\n\t}\n\n\tprotected override _fillHead(container: HTMLElement): void {\n\t\tsuper._fillHead(container);\n\n\t\tconst menuContextKeyService = this._disposables.add(this.contextKeyService.createScoped(container));\n\t\tthis._disposables.add(bindContextKey(\n\t\t\tTestingContextKeys.peekHasStack,\n\t\t\tmenuContextKeyService,\n\t\t\treader => inspectSubjectHasStack(this._current.read(reader)),\n\t\t));\n\n\t\tconst menu = this.menuService.createMenu(MenuId.TestPeekTitle, menuContextKeyService);\n\t\tconst actionBar = this._actionbarWidget!;\n\t\tthis._disposables.add(menu.onDidChange(() => {\n\t\t\tactions.length = 0;\n\t\t\tcreateAndFillInActionBarActions(menu, undefined, actions);\n\t\t\twhile (actionBar.getAction(1)) {\n\t\t\t\tactionBar.pull(0); // remove all but the view's default \"close\" button\n\t\t\t}\n\t\t\tactionBar.push(actions, { label: false, icon: true, index: 0 });\n\t\t}));\n\n\t\tconst actions: IAction[] = [];\n\t\tcreateAndFillInActionBarActions(menu, undefined, actions);\n\t\tactionBar.push(actions, { label: false, icon: true, index: 0 });\n\t}\n\n\tprotected override _fillBody(containerElement: HTMLElement): void {\n\t\tthis.content.fillBody(containerElement);\n\t\tthis._disposables.add(this.content.onDidRequestReveal(sub => {\n\t\t\tTestingOutputPeekController.get(this.editor)?.show(sub instanceof MessageSubject\n\t\t\t\t? sub.messageUri\n\t\t\t\t: sub.outputUri);\n\t\t}));\n\t}\n\n\t/**\n\t * Updates the test to be shown.\n\t */\n\tpublic setModel(subject: InspectSubject): Promise<void> {\n\t\tif (subject instanceof TaskSubject || subject instanceof TestOutputSubject) {\n\t\t\tthis._current.set(subject, undefined);\n\t\t\treturn this.showInPlace(subject);\n\t\t}\n\n\t\tconst message = subject.message;\n\t\tconst previous = this.current;\n\t\tconst revealLocation = subject.revealLocation?.range.getStartPosition();\n\t\tif (!revealLocation && !previous) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis._current.set(subject, undefined);\n\t\tif (!revealLocation) {\n\t\t\treturn this.showInPlace(subject);\n\t\t}\n\n\t\t// If there is a stack we want to display, ensure the default size is large-ish\n\t\tconst peekLines = TestResultsPeek.lastHeightInLines || Math.max(\n\t\t\tinspectSubjectHasStack(subject) ? Math.ceil(this.getVisibleEditorLines() / 2) : 0,\n\t\t\thintMessagePeekHeight(message)\n\t\t);\n\n\t\tthis.show(revealLocation, peekLines);\n\t\tthis.editor.revealRangeNearTopIfOutsideViewport(Range.fromPositions(revealLocation), ScrollType.Smooth);\n\n\t\treturn this.showInPlace(subject);\n\t}\n\n\t/**\n\t * Collapses all displayed stack frames.\n\t */\n\tpublic collapseStack() {\n\t\tthis.content.collapseStack();\n\t}\n\n\tprivate getVisibleEditorLines() {\n\t\t// note that we don't use the view ranges because we don't want to get\n\t\t// thrown off by large wrapping lines. Being approximate here is okay.\n\t\treturn Math.round(this.editor.getDomNode()!.clientHeight / this.editor.getOption(EditorOption.lineHeight));\n\t}\n\n\t/**\n\t * Shows a message in-place without showing or changing the peek location.\n\t * This is mostly used if peeking a message without a location.\n\t */\n\tpublic async showInPlace(subject: InspectSubject) {\n\t\tif (subject instanceof MessageSubject) {\n\t\t\tconst message = subject.message;\n\t\t\tthis.setTitle(firstLine(renderTestMessageAsText(message.message)), stripIcons(subject.test.label));\n\t\t} else {\n\t\t\tthis.setTitle(localize('testOutputTitle', 'Test Output'));\n\t\t}\n\t\tthis.applyTheme();\n\t\tawait this.content.reveal({ subject, preserveFocus: false });\n\t}\n\n\tprotected override _relayout(newHeightInLines: number): void {\n\t\tsuper._relayout(newHeightInLines);\n\t\tTestResultsPeek.lastHeightInLines = newHeightInLines;\n\t}\n\n\t/** @override */\n\tprotected override _doLayoutBody(height: number, width: number) {\n\t\tsuper._doLayoutBody(height, width);\n\t\tthis.content.onLayoutBody(height, width);\n\t}\n\n\t/** @override */\n\tprotected override _onWidth(width: number) {\n\t\tsuper._onWidth(width);\n\t\tif (this.dimension) {\n\t\t\tthis.dimension = new dom.Dimension(width, this.dimension.height);\n\t\t}\n\n\t\tthis.content.onWidth(width);\n\t}\n}\n\nexport class TestResultsView extends ViewPane {\n\tprivate readonly content = new Lazy(() => this._register(this.instantiationService.createInstance(TestResultsViewContent, undefined, {\n\t\thistoryVisible: staticObservableValue(true),\n\t\tshowRevealLocationOnMessages: true,\n\t\tlocationForProgress: Testing.ExplorerViewId,\n\t})));\n\n\tconstructor(\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\t}\n\n\tpublic get subject() {\n\t\treturn this.content.rawValue?.current;\n\t}\n\n\tpublic showLatestRun(preserveFocus = false) {\n\t\tconst result = this.resultService.results.find(r => r.tasks.length);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.content.rawValue?.reveal({ preserveFocus, subject: new TaskSubject(result, 0) });\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\t\t// Avoid rendering into the body until it's attached the DOM, as it can\n\t\t// result in rendering issues in the terminal (#194156)\n\t\tif (this.isBodyVisible()) {\n\t\t\tthis.renderContent(container);\n\t\t} else {\n\t\t\tthis._register(Event.once(Event.filter(this.onDidChangeBodyVisibility, Boolean))(() => this.renderContent(container)));\n\t\t}\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.content.rawValue?.onLayoutBody(height, width);\n\t}\n\n\tprivate renderContent(container: HTMLElement) {\n\t\tconst content = this.content.value;\n\t\tcontent.fillBody(container);\n\t\tthis._register(content.onDidRequestReveal(subject => content.reveal({ preserveFocus: true, subject })));\n\n\t\tconst [lastResult] = this.resultService.results;\n\t\tif (lastResult && lastResult.tasks.length) {\n\t\t\tcontent.reveal({ preserveFocus: true, subject: new TaskSubject(lastResult, 0) });\n\t\t}\n\t}\n}\n\nconst hintMessagePeekHeight = (msg: ITestMessage) => {\n\tconst msgHeight = ITestMessage.isDiffable(msg)\n\t\t? Math.max(hintPeekStrHeight(msg.actual), hintPeekStrHeight(msg.expected))\n\t\t: hintPeekStrHeight(typeof msg.message === 'string' ? msg.message : msg.message.value);\n\n\t// add 8ish lines for the size of the title and decorations in the peek.\n\treturn msgHeight + 8;\n};\n\nconst firstLine = (str: string) => {\n\tconst index = str.indexOf('\\n');\n\treturn index === -1 ? str : str.slice(0, index);\n};\n\n\nconst hintPeekStrHeight = (str: string) => Math.min(count(str, '\\n'), 24);\n\nfunction getOuterEditorFromDiffEditor(codeEditorService: ICodeEditorService): ICodeEditor | null {\n\tconst diffEditors = codeEditorService.listDiffEditors();\n\n\tfor (const diffEditor of diffEditors) {\n\t\tif (diffEditor.hasTextFocus() && diffEditor instanceof EmbeddedDiffEditorWidget) {\n\t\t\treturn diffEditor.getParentEditor();\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport class CloseTestPeek extends EditorAction2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.closeTestPeek',\n\t\t\ttitle: localize2('close', 'Close'),\n\t\t\ticon: Codicon.close,\n\t\t\tprecondition: ContextKeyExpr.or(TestingContextKeys.isInPeek, TestingContextKeys.isPeekVisible),\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib - 101,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\twhen: ContextKeyExpr.not('config.editor.stablePeek')\n\t\t\t}\n\t\t});\n\t}\n\n\trunEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst parent = getPeekedEditorFromFocus(accessor.get(ICodeEditorService));\n\t\tTestingOutputPeekController.get(parent ?? editor)?.removePeek();\n\t}\n}\n\n\nconst navWhen = ContextKeyExpr.and(\n\tEditorContextKeys.focus,\n\tTestingContextKeys.isPeekVisible,\n);\n\n/**\n * Gets the appropriate editor for peeking based on the currently focused editor.\n */\nconst getPeekedEditorFromFocus = (codeEditorService: ICodeEditorService) => {\n\tconst editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\treturn editor && getPeekedEditor(codeEditorService, editor);\n};\n\n/**\n * Gets the editor where the peek may be shown, bubbling upwards if the given\n * editor is embedded (i.e. inside a peek already).\n */\nconst getPeekedEditor = (codeEditorService: ICodeEditorService, editor: ICodeEditor) => {\n\tif (TestingOutputPeekController.get(editor)?.subject) {\n\t\treturn editor;\n\t}\n\n\tif (editor instanceof EmbeddedCodeEditorWidget) {\n\t\treturn editor.getParentEditor();\n\t}\n\n\tconst outer = getOuterEditorFromDiffEditor(codeEditorService);\n\tif (outer) {\n\t\treturn outer;\n\t}\n\n\treturn editor;\n};\n\nexport class GoToNextMessageAction extends Action2 {\n\tpublic static readonly ID = 'testing.goToNextMessage';\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: GoToNextMessageAction.ID,\n\t\t\tf1: true,\n\t\t\ttitle: localize2('testing.goToNextMessage', 'Go to Next Test Failure'),\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize2('testing.goToNextMessage.description', 'Shows the next failure message in your file')\n\t\t\t},\n\t\t\ticon: Codicon.arrowDown,\n\t\t\tcategory: Categories.Test,\n\t\t\tkeybinding: {\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.F8,\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\twhen: navWhen,\n\t\t\t},\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.TestPeekTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 2,\n\t\t\t}, {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: navWhen\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst editor = getPeekedEditorFromFocus(accessor.get(ICodeEditorService));\n\t\tif (editor) {\n\t\t\tTestingOutputPeekController.get(editor)?.next();\n\t\t}\n\t}\n}\n\nexport class GoToPreviousMessageAction extends Action2 {\n\tpublic static readonly ID = 'testing.goToPreviousMessage';\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: GoToPreviousMessageAction.ID,\n\t\t\tf1: true,\n\t\t\ttitle: localize2('testing.goToPreviousMessage', 'Go to Previous Test Failure'),\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize2('testing.goToPreviousMessage.description', 'Shows the previous failure message in your file')\n\t\t\t},\n\t\t\ticon: Codicon.arrowUp,\n\t\t\tcategory: Categories.Test,\n\t\t\tkeybinding: {\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.F8,\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\twhen: navWhen\n\t\t\t},\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.TestPeekTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 1,\n\t\t\t}, {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: navWhen\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst editor = getPeekedEditorFromFocus(accessor.get(ICodeEditorService));\n\t\tif (editor) {\n\t\t\tTestingOutputPeekController.get(editor)?.previous();\n\t\t}\n\t}\n}\n\nexport class CollapsePeekStack extends Action2 {\n\tpublic static readonly ID = 'testing.collapsePeekStack';\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: CollapsePeekStack.ID,\n\t\t\ttitle: localize2('testing.collapsePeekStack', 'Collapse Stack Frames'),\n\t\t\ticon: Codicon.collapseAll,\n\t\t\tcategory: Categories.Test,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.TestPeekTitle,\n\t\t\t\twhen: TestingContextKeys.peekHasStack,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 4,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst editor = getPeekedEditorFromFocus(accessor.get(ICodeEditorService));\n\t\tif (editor) {\n\t\t\tTestingOutputPeekController.get(editor)?.collapseStack();\n\t\t}\n\t}\n}\n\nexport class OpenMessageInEditorAction extends Action2 {\n\tpublic static readonly ID = 'testing.openMessageInEditor';\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenMessageInEditorAction.ID,\n\t\t\tf1: false,\n\t\t\ttitle: localize2('testing.openMessageInEditor', 'Open in Editor'),\n\t\t\ticon: Codicon.goToFile,\n\t\t\tcategory: Categories.Test,\n\t\t\tmenu: [{ id: MenuId.TestPeekTitle }],\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestingPeekOpener).openCurrentInEditor();\n\t}\n}\n\nexport class ToggleTestingPeekHistory extends Action2 {\n\tpublic static readonly ID = 'testing.toggleTestingPeekHistory';\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleTestingPeekHistory.ID,\n\t\t\tf1: true,\n\t\t\ttitle: localize2('testing.toggleTestingPeekHistory', 'Toggle Test History in Peek'),\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize2('testing.toggleTestingPeekHistory.description', 'Shows or hides the history of test runs in the peek view')\n\t\t\t},\n\t\t\ticon: Codicon.history,\n\t\t\tcategory: Categories.Test,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.TestPeekTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 3,\n\t\t\t}],\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.KeyH,\n\t\t\t\twhen: TestingContextKeys.isPeekVisible.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst opener = accessor.get(ITestingPeekOpener);\n\t\topener.historyVisible.value = !opener.historyVisible.value;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["test"]
}
