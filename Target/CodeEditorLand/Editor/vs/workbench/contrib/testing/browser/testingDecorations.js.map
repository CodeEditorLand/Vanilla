{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testingDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { Action, IAction, Separator, SubmenuAction } from '../../../../base/common/actions.js';\nimport { equals } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore, IReference, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ContentWidgetPositionPreference, ICodeEditor, IContentWidgetPosition, IEditorMouseEvent, MouseTargetType } from '../../../../editor/browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { overviewRulerError, overviewRulerInfo } from '../../../../editor/common/core/editorColorRegistry.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { IEditorContribution } from '../../../../editor/common/editorCommon.js';\nimport { GlyphMarginLane, IModelDecorationOptions, IModelDeltaDecoration, ITextModel, OverviewRulerLane, TrackedRangeStickiness } from '../../../../editor/common/model.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { localize } from '../../../../nls.js';\nimport { createAndFillInContextMenuActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { IMenuService, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { EditorLineNumberContextMenu, GutterActionsRegistry } from '../../codeEditor/browser/editorLineNumberMenu.js';\nimport { getTestItemContextOverlay } from './explorerProjections/testItemContextOverlay.js';\nimport { testingDebugAllIcon, testingDebugIcon, testingRunAllIcon, testingRunIcon, testingStatesToIcons } from './icons.js';\nimport { renderTestMessageAsText } from './testMessageColorizer.js';\nimport { DefaultGutterClickAction, TestingConfigKeys, getTestingConfiguration } from '../common/configuration.js';\nimport { Testing, labelForTestInState } from '../common/constants.js';\nimport { TestId } from '../common/testId.js';\nimport { ITestProfileService } from '../common/testProfileService.js';\nimport { ITestResult, LiveTestResult } from '../common/testResult.js';\nimport { ITestResultService } from '../common/testResultService.js';\nimport { ITestService, getContextForTestItem, simplifyTestsToExecute, testsInFile } from '../common/testService.js';\nimport { IRichLocation, ITestMessage, ITestRunProfile, IncrementalTestCollectionItem, InternalTestItem, TestDiffOpType, TestMessageType, TestResultItem, TestResultState, TestRunProfileBitset } from '../common/testTypes.js';\nimport { ITestDecoration as IPublicTestDecoration, ITestingDecorationsService, TestDecorations } from '../common/testingDecorations.js';\nimport { ITestingPeekOpener } from '../common/testingPeekOpener.js';\nimport { isFailedState, maxPriority } from '../common/testingStates.js';\nimport { TestUriType, buildTestUri, parseTestUri } from '../common/testingUri.js';\n\nconst MAX_INLINE_MESSAGE_LENGTH = 128;\nconst MAX_TESTS_IN_SUBMENU = 30;\nconst GLYPH_MARGIN_LANE = GlyphMarginLane.Center;\n\nfunction isOriginalInDiffEditor(codeEditorService: ICodeEditorService, codeEditor: ICodeEditor): boolean {\n\tconst diffEditors = codeEditorService.listDiffEditors();\n\n\tfor (const diffEditor of diffEditors) {\n\t\tif (diffEditor.getOriginalEditor() === codeEditor) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\ninterface ITestDecoration extends IPublicTestDecoration {\n\tid: string;\n\tclick(e: IEditorMouseEvent): boolean;\n}\n\n/** Value for saved decorations, providing fast accessors for the hot 'syncDecorations' path */\nclass CachedDecorations {\n\tprivate readonly runByIdKey = new Map<string, RunTestDecoration>();\n\tprivate readonly messages = new Map<ITestMessage, TestMessageDecoration>();\n\n\tpublic get size() {\n\t\treturn this.runByIdKey.size + this.messages.size;\n\t}\n\n\t/** Gets a test run decoration that contains exactly the given test IDs */\n\tpublic getForExactTests(testIds: string[]) {\n\t\tconst key = testIds.sort().join('\\0\\0');\n\t\treturn this.runByIdKey.get(key);\n\t}\n\n\t/** Gets the decoration that corresponds to the given test message */\n\tpublic getMessage(message: ITestMessage) {\n\t\treturn this.messages.get(message);\n\t}\n\n\t/** Removes the decoration for the given test messsage */\n\tpublic removeMessage(message: ITestMessage) {\n\t\tthis.messages.delete(message);\n\t}\n\n\t/** Adds a new test message decoration */\n\tpublic addMessage(d: TestMessageDecoration) {\n\t\tthis.messages.set(d.testMessage, d);\n\t}\n\n\t/** Adds a new test run decroation */\n\tpublic addTest(d: RunTestDecoration) {\n\t\tconst key = d.testIds.sort().join('\\0\\0');\n\t\tthis.runByIdKey.set(key, d);\n\t}\n\n\t/** Finds an extension by VS Code event ID */\n\tpublic getById(decorationId: string) {\n\t\tfor (const d of this.runByIdKey.values()) {\n\t\t\tif (d.id === decorationId) {\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t\tfor (const d of this.messages.values()) {\n\t\t\tif (d.id === decorationId) {\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/** Iterate over all decorations */\n\t*[Symbol.iterator](): IterableIterator<ITestDecoration> {\n\t\tfor (const d of this.runByIdKey.values()) {\n\t\t\tyield d;\n\t\t}\n\t\tfor (const d of this.messages.values()) {\n\t\t\tyield d;\n\t\t}\n\t}\n}\n\nexport class TestingDecorationService extends Disposable implements ITestingDecorationsService {\n\tdeclare public _serviceBrand: undefined;\n\n\tprivate generation = 0;\n\tprivate readonly changeEmitter = new Emitter<void>();\n\tprivate readonly decorationCache = new ResourceMap<{\n\t\t/** The document version at which ranges have been updated, requiring rerendering */\n\t\trangeUpdateVersionId?: number;\n\t\t/** Counter for the results rendered in the document */\n\t\tgeneration: number;\n\t\tisAlt?: boolean;\n\t\tvalue: CachedDecorations;\n\t}>();\n\n\t/**\n\t * List of messages that should be hidden because an editor changed their\n\t * underlying ranges. I think this is good enough, because:\n\t *  - Message decorations are never shown across reloads; this does not\n\t *    need to persist\n\t *  - Message instances are stable for any completed test results for\n\t *    the duration of the session.\n\t */\n\tprivate readonly invalidatedMessages = new WeakSet<ITestMessage>();\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tconstructor(\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t) {\n\t\tsuper();\n\t\tcodeEditorService.registerDecorationType('test-message-decoration', TestMessageDecoration.decorationId, {}, undefined);\n\n\t\tthis._register(modelService.onModelRemoved(e => this.decorationCache.delete(e.uri)));\n\n\t\tconst debounceInvalidate = this._register(new RunOnceScheduler(() => this.invalidate(), 100));\n\n\t\t// If ranges were updated in the document, mark that we should explicitly\n\t\t// sync decorations to the published lines, since we assume that everything\n\t\t// is up to date. This prevents issues, as in #138632, #138835, #138922.\n\t\tthis._register(this.testService.onWillProcessDiff(diff => {\n\t\t\tfor (const entry of diff) {\n\t\t\t\tif (entry.op !== TestDiffOpType.DocumentSynced) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rec = this.decorationCache.get(entry.uri);\n\t\t\t\tif (rec) {\n\t\t\t\t\trec.rangeUpdateVersionId = entry.docv;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!debounceInvalidate.isScheduled()) {\n\t\t\t\tdebounceInvalidate.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(Event.any(\n\t\t\tthis.results.onResultsChanged,\n\t\t\tthis.results.onTestChanged,\n\t\t\tthis.testService.excluded.onTestExclusionsChanged,\n\t\t\tthis.testService.showInlineOutput.onDidChange,\n\t\t\tEvent.filter(configurationService.onDidChangeConfiguration, e => e.affectsConfiguration(TestingConfigKeys.GutterEnabled)),\n\t\t)(() => {\n\t\t\tif (!debounceInvalidate.isScheduled()) {\n\t\t\t\tdebounceInvalidate.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(GutterActionsRegistry.registerGutterActionsGenerator((context, result) => {\n\t\t\tconst model = context.editor.getModel();\n\t\t\tconst testingDecorations = TestingDecorations.get(context.editor);\n\t\t\tif (!model || !testingDecorations?.currentUri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentDecorations = this.syncDecorations(testingDecorations.currentUri);\n\t\t\tif (!currentDecorations.size) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst modelDecorations = model.getLinesDecorations(context.lineNumber, context.lineNumber);\n\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\tconst decoration = currentDecorations.getById(id);\n\t\t\t\tif (decoration) {\n\t\t\t\t\tconst { object: actions } = decoration.getContextMenuActions();\n\t\t\t\t\tfor (const action of actions) {\n\t\t\t\t\t\tresult.push(action, '1_testing');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t/** @inheritdoc */\n\tpublic invalidateResultMessage(message: ITestMessage) {\n\t\tthis.invalidatedMessages.add(message);\n\t\tthis.invalidate();\n\t}\n\n\t/** @inheritdoc */\n\tpublic syncDecorations(resource: URI): CachedDecorations {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn new CachedDecorations();\n\t\t}\n\n\t\tconst cached = this.decorationCache.get(resource);\n\t\tif (cached && cached.generation === this.generation && (cached.rangeUpdateVersionId === undefined || cached.rangeUpdateVersionId !== model.getVersionId())) {\n\t\t\treturn cached.value;\n\t\t}\n\n\t\treturn this.applyDecorations(model);\n\t}\n\n\t/** @inheritdoc */\n\tpublic getDecoratedTestPosition(resource: URI, testId: string) {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst decoration = Iterable.find(this.syncDecorations(resource), v => v instanceof RunTestDecoration && v.isForTest(testId));\n\t\tif (!decoration) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// decoration is collapsed, so the range is meaningless; only position matters.\n\t\treturn model.getDecorationRange(decoration.id)?.getStartPosition();\n\t}\n\n\tprivate invalidate() {\n\t\tthis.generation++;\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/**\n\t * Sets whether alternate actions are shown for the model.\n\t */\n\tpublic updateDecorationsAlternateAction(resource: URI, isAlt: boolean) {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tconst cached = this.decorationCache.get(resource);\n\t\tif (!model || !cached || cached.isAlt === isAlt) {\n\t\t\treturn;\n\t\t}\n\n\t\tcached.isAlt = isAlt;\n\t\tmodel.changeDecorations(accessor => {\n\t\t\tfor (const decoration of cached.value) {\n\t\t\t\tif (decoration instanceof RunTestDecoration && decoration.editorDecoration.alternate) {\n\t\t\t\t\taccessor.changeDecorationOptions(\n\t\t\t\t\t\tdecoration.id,\n\t\t\t\t\t\tisAlt ? decoration.editorDecoration.alternate : decoration.editorDecoration.options,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Applies the current set of test decorations to the given text model.\n\t */\n\tprivate applyDecorations(model: ITextModel) {\n\t\tconst gutterEnabled = getTestingConfiguration(this.configurationService, TestingConfigKeys.GutterEnabled);\n\t\tconst uriStr = model.uri.toString();\n\t\tconst cached = this.decorationCache.get(model.uri);\n\t\tconst testRangesUpdated = cached?.rangeUpdateVersionId === model.getVersionId();\n\t\tconst lastDecorations = cached?.value ?? new CachedDecorations();\n\n\t\tconst newDecorations = model.changeDecorations(accessor => {\n\t\t\tconst newDecorations = new CachedDecorations();\n\t\t\tconst runDecorations = new TestDecorations<{ line: number; id: ''; test: IncrementalTestCollectionItem; resultItem: TestResultItem | undefined }>();\n\t\t\tfor (const test of this.testService.collection.getNodeByUrl(model.uri)) {\n\t\t\t\tif (!test.item.range) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst stateLookup = this.results.getStateById(test.item.extId);\n\t\t\t\tconst line = test.item.range.startLineNumber;\n\t\t\t\trunDecorations.push({ line, id: '', test, resultItem: stateLookup?.[1] });\n\t\t\t}\n\n\t\t\tfor (const [line, tests] of runDecorations.lines()) {\n\t\t\t\tconst multi = tests.length > 1;\n\t\t\t\tlet existing = lastDecorations.getForExactTests(tests.map(t => t.test.item.extId));\n\n\t\t\t\t// see comment in the constructor for what's going on here\n\t\t\t\tif (existing && testRangesUpdated && model.getDecorationRange(existing.id)?.startLineNumber !== line) {\n\t\t\t\t\texisting = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.replaceOptions(tests, gutterEnabled)) {\n\t\t\t\t\t\taccessor.changeDecorationOptions(existing.id, existing.editorDecoration.options);\n\t\t\t\t\t}\n\t\t\t\t\tnewDecorations.addTest(existing);\n\t\t\t\t} else {\n\t\t\t\t\tnewDecorations.addTest(multi\n\t\t\t\t\t\t? this.instantiationService.createInstance(MultiRunTestDecoration, tests, gutterEnabled, model)\n\t\t\t\t\t\t: this.instantiationService.createInstance(RunSingleTestDecoration, tests[0].test, tests[0].resultItem, model, gutterEnabled));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst messageLines = new Set<number>();\n\t\t\tif (getTestingConfiguration(this.configurationService, TestingConfigKeys.ShowAllMessages)) {\n\t\t\t\tthis.results.results.forEach(lastResult => this.applyDecorationsFromResult(lastResult, messageLines, uriStr, lastDecorations, model, newDecorations));\n\t\t\t} else {\n\t\t\t\tthis.applyDecorationsFromResult(this.results.results[0], messageLines, uriStr, lastDecorations, model, newDecorations);\n\t\t\t}\n\n\t\t\tconst saveFromRemoval = new Set<string>();\n\t\t\tfor (const decoration of newDecorations) {\n\t\t\t\tif (decoration.id === '') {\n\t\t\t\t\tdecoration.id = accessor.addDecoration(decoration.editorDecoration.range, decoration.editorDecoration.options);\n\t\t\t\t} else {\n\t\t\t\t\tsaveFromRemoval.add(decoration.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const decoration of lastDecorations) {\n\t\t\t\tif (!saveFromRemoval.has(decoration.id)) {\n\t\t\t\t\taccessor.removeDecoration(decoration.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.decorationCache.set(model.uri, {\n\t\t\t\tgeneration: this.generation,\n\t\t\t\trangeUpdateVersionId: cached?.rangeUpdateVersionId,\n\t\t\t\tvalue: newDecorations,\n\t\t\t});\n\n\t\t\treturn newDecorations;\n\t\t});\n\n\t\treturn newDecorations || lastDecorations;\n\t}\n\n\tprivate applyDecorationsFromResult(lastResult: ITestResult, messageLines: Set<Number>, uriStr: string, lastDecorations: CachedDecorations, model: ITextModel, newDecorations: CachedDecorations) {\n\t\tif (this.testService.showInlineOutput.value && lastResult instanceof LiveTestResult) {\n\t\t\tfor (const task of lastResult.tasks) {\n\t\t\t\tfor (const m of task.otherMessages) {\n\t\t\t\t\tif (!this.invalidatedMessages.has(m) && m.location?.uri.toString() === uriStr) {\n\t\t\t\t\t\tconst decoration = lastDecorations.getMessage(m) || this.instantiationService.createInstance(TestMessageDecoration, m, undefined, model);\n\t\t\t\t\t\tnewDecorations.addMessage(decoration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const test of lastResult.tests) {\n\t\t\t\tfor (let taskId = 0; taskId < test.tasks.length; taskId++) {\n\t\t\t\t\tconst state = test.tasks[taskId];\n\t\t\t\t\t// push error decorations first so they take precedence over normal output\n\t\t\t\t\tfor (const kind of [TestMessageType.Error, TestMessageType.Output]) {\n\t\t\t\t\t\tfor (let i = 0; i < state.messages.length; i++) {\n\t\t\t\t\t\t\tconst m = state.messages[i];\n\t\t\t\t\t\t\tif (m.type !== kind || this.invalidatedMessages.has(m) || m.location?.uri.toString() !== uriStr) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Only add one message per line number. Overlapping messages\n\t\t\t\t\t\t\t// don't appear well, and the peek will show all of them (#134129)\n\t\t\t\t\t\t\tconst line = m.location.range.startLineNumber;\n\t\t\t\t\t\t\tif (!messageLines.has(line)) {\n\t\t\t\t\t\t\t\tconst decoration = lastDecorations.getMessage(m) || this.instantiationService.createInstance(TestMessageDecoration, m, buildTestUri({\n\t\t\t\t\t\t\t\t\ttype: TestUriType.ResultActualOutput,\n\t\t\t\t\t\t\t\t\tmessageIndex: i,\n\t\t\t\t\t\t\t\t\ttaskIndex: taskId,\n\t\t\t\t\t\t\t\t\tresultId: lastResult.id,\n\t\t\t\t\t\t\t\t\ttestExtId: test.item.extId,\n\t\t\t\t\t\t\t\t}), model);\n\n\t\t\t\t\t\t\t\tnewDecorations.addMessage(decoration);\n\t\t\t\t\t\t\t\tmessageLines.add(line);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class TestingDecorations extends Disposable implements IEditorContribution {\n\t/**\n\t * Gets the decorations associated with the given code editor.\n\t */\n\tpublic static get(editor: ICodeEditor): TestingDecorations | null {\n\t\treturn editor.getContribution<TestingDecorations>(Testing.DecorationsContributionId);\n\t}\n\n\tpublic get currentUri() { return this._currentUri; }\n\n\tprivate _currentUri?: URI;\n\tprivate readonly expectedWidget = new MutableDisposable<ExpectedLensContentWidget>();\n\tprivate readonly actualWidget = new MutableDisposable<ActualLensContentWidget>();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestingDecorationsService private readonly decorations: ITestingDecorationsService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tcodeEditorService.registerDecorationType('test-message-decoration', TestMessageDecoration.decorationId, {}, undefined, editor);\n\n\t\tthis.attachModel(editor.getModel()?.uri);\n\t\tthis._register(decorations.onDidChange(() => {\n\t\t\tif (this._currentUri) {\n\t\t\t\tdecorations.syncDecorations(this._currentUri);\n\t\t\t}\n\t\t}));\n\n\t\tconst win = dom.getWindow(editor.getDomNode());\n\t\tthis._register(dom.addDisposableListener(win, 'keydown', e => {\n\t\t\tif (new StandardKeyboardEvent(e).keyCode === KeyCode.Alt && this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri, true);\n\t\t\t}\n\t\t}));\n\t\tthis._register(dom.addDisposableListener(win, 'keyup', e => {\n\t\t\tif (new StandardKeyboardEvent(e).keyCode === KeyCode.Alt && this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri, false);\n\t\t\t}\n\t\t}));\n\t\tthis._register(dom.addDisposableListener(win, 'blur', () => {\n\t\t\tif (this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri, false);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.editor.onKeyUp(e => {\n\t\t\tif (e.keyCode === KeyCode.Alt && this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri!, false);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.editor.onDidChangeModel(e => this.attachModel(e.newModelUrl || undefined)));\n\t\tthis._register(this.editor.onMouseDown(e => {\n\t\t\tif (e.target.position && this.currentUri) {\n\t\t\t\tconst modelDecorations = editor.getModel()?.getLineDecorations(e.target.position.lineNumber) ?? [];\n\t\t\t\tif (!modelDecorations.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst cache = decorations.syncDecorations(this.currentUri);\n\t\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\t\tif ((cache.getById(id) as ITestDecoration | undefined)?.click(e)) {\n\t\t\t\t\t\te.event.stopPropagation();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(Event.accumulate(this.editor.onDidChangeModelContent, 0, this._store)(evts => {\n\t\t\tconst model = editor.getModel();\n\t\t\tif (!this._currentUri || !model) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentDecorations = decorations.syncDecorations(this._currentUri);\n\t\t\tif (!currentDecorations.size) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const e of evts) {\n\t\t\t\tfor (const change of e.changes) {\n\t\t\t\t\tconst modelDecorations = model.getLinesDecorations(change.range.startLineNumber, change.range.endLineNumber);\n\t\t\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\t\t\tconst decoration = currentDecorations.getById(id);\n\t\t\t\t\t\tif (decoration instanceof TestMessageDecoration) {\n\t\t\t\t\t\t\tdecorations.invalidateResultMessage(decoration.testMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tconst updateFontFamilyVar = () => {\n\t\t\tthis.editor.getContainerDomNode().style.setProperty('--testMessageDecorationFontFamily', editor.getOption(EditorOption.fontFamily));\n\t\t\tthis.editor.getContainerDomNode().style.setProperty('--testMessageDecorationFontSize', `${editor.getOption(EditorOption.fontSize)}px`);\n\t\t};\n\t\tthis._register(this.editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.fontFamily)) {\n\t\t\t\tupdateFontFamilyVar();\n\t\t\t}\n\t\t}));\n\t\tupdateFontFamilyVar();\n\t}\n\n\tprivate attachModel(uri?: URI) {\n\t\tswitch (uri && parseTestUri(uri)?.type) {\n\t\t\tcase TestUriType.ResultExpectedOutput:\n\t\t\t\tthis.expectedWidget.value = new ExpectedLensContentWidget(this.editor);\n\t\t\t\tthis.actualWidget.clear();\n\t\t\t\tbreak;\n\t\t\tcase TestUriType.ResultActualOutput:\n\t\t\t\tthis.expectedWidget.clear();\n\t\t\t\tthis.actualWidget.value = new ActualLensContentWidget(this.editor);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.expectedWidget.clear();\n\t\t\t\tthis.actualWidget.clear();\n\t\t}\n\n\t\tif (isOriginalInDiffEditor(this.codeEditorService, this.editor)) {\n\t\t\turi = undefined;\n\t\t}\n\n\t\tthis._currentUri = uri;\n\n\t\tif (!uri) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.decorations.syncDecorations(uri);\n\n\t\t(async () => {\n\t\t\tfor await (const _test of testsInFile(this.testService, this.uriIdentityService, uri, false)) {\n\t\t\t\t// consume the iterator so that all tests in the file get expanded. Or\n\t\t\t\t// at least until the URI changes. If new items are requested, changes\n\t\t\t\t// will be trigged in the `onDidProcessDiff` callback.\n\t\t\t\tif (this._currentUri !== uri) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t}\n}\n\nconst collapseRange = (originalRange: IRange) => ({\n\tstartLineNumber: originalRange.startLineNumber,\n\tendLineNumber: originalRange.startLineNumber,\n\tstartColumn: originalRange.startColumn,\n\tendColumn: originalRange.startColumn,\n});\n\nconst createRunTestDecoration = (\n\ttests: readonly IncrementalTestCollectionItem[],\n\tstates: readonly (TestResultItem | undefined)[],\n\tvisible: boolean,\n\tdefaultGutterAction: DefaultGutterClickAction,\n): IModelDeltaDecoration & { alternate?: IModelDecorationOptions } => {\n\tconst range = tests[0]?.item.range;\n\tif (!range) {\n\t\tthrow new Error('Test decorations can only be created for tests with a range');\n\t}\n\n\tif (!visible) {\n\t\treturn {\n\t\t\trange: collapseRange(range),\n\t\t\toptions: { isWholeLine: true, description: 'run-test-decoration' },\n\t\t};\n\t}\n\n\tlet computedState = TestResultState.Unset;\n\tconst hoverMessageParts: string[] = [];\n\tlet testIdWithMessages: string | undefined;\n\tlet retired = false;\n\tfor (let i = 0; i < tests.length; i++) {\n\t\tconst test = tests[i];\n\t\tconst resultItem = states[i];\n\t\tconst state = resultItem?.computedState ?? TestResultState.Unset;\n\t\tif (hoverMessageParts.length < 10) {\n\t\t\thoverMessageParts.push(labelForTestInState(test.item.label, state));\n\t\t}\n\t\tcomputedState = maxPriority(computedState, state);\n\t\tretired = retired || !!resultItem?.retired;\n\t\tif (!testIdWithMessages && resultItem?.tasks.some(t => t.messages.length)) {\n\t\t\ttestIdWithMessages = test.item.extId;\n\t\t}\n\t}\n\n\tconst hasMultipleTests = tests.length > 1 || tests[0].children.size > 0;\n\n\tconst primaryIcon = computedState === TestResultState.Unset\n\t\t? (hasMultipleTests ? testingRunAllIcon : testingRunIcon)\n\t\t: testingStatesToIcons.get(computedState)!;\n\n\tconst alternateIcon = defaultGutterAction === DefaultGutterClickAction.Debug\n\t\t? (hasMultipleTests ? testingRunAllIcon : testingRunIcon)\n\t\t: (hasMultipleTests ? testingDebugAllIcon : testingDebugIcon);\n\n\tlet hoverMessage: IMarkdownString | undefined;\n\n\tlet glyphMarginClassName = 'testing-run-glyph';\n\tif (retired) {\n\t\tglyphMarginClassName += ' retired';\n\t}\n\n\tconst defaultOptions: IModelDecorationOptions = {\n\t\tdescription: 'run-test-decoration',\n\t\tshowIfCollapsed: true,\n\t\tget hoverMessage() {\n\t\t\tif (!hoverMessage) {\n\t\t\t\tconst building = hoverMessage = new MarkdownString('', true).appendText(hoverMessageParts.join(', ') + '.');\n\t\t\t\tif (testIdWithMessages) {\n\t\t\t\t\tconst args = encodeURIComponent(JSON.stringify([testIdWithMessages]));\n\t\t\t\t\tbuilding.appendMarkdown(` [${localize('peekTestOutout', 'Peek Test Output')}](command:vscode.peekTestError?${args})`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn hoverMessage;\n\t\t},\n\t\tglyphMargin: { position: GLYPH_MARGIN_LANE },\n\t\tglyphMarginClassName: `${ThemeIcon.asClassName(primaryIcon)} ${glyphMarginClassName}`,\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tzIndex: 10000,\n\t};\n\n\tconst alternateOptions: IModelDecorationOptions = {\n\t\t...defaultOptions,\n\t\tglyphMarginClassName: `${ThemeIcon.asClassName(alternateIcon)} ${glyphMarginClassName}`,\n\t};\n\n\treturn {\n\t\trange: collapseRange(range),\n\t\toptions: defaultOptions,\n\t\talternate: alternateOptions,\n\t};\n};\n\nconst enum LensContentWidgetVars {\n\tFontFamily = 'testingDiffLensFontFamily',\n\tFontFeatures = 'testingDiffLensFontFeatures',\n}\n\nabstract class TitleLensContentWidget {\n\t/** @inheritdoc */\n\tpublic readonly allowEditorOverflow = false;\n\t/** @inheritdoc */\n\tpublic readonly suppressMouseDown = true;\n\n\tprivate readonly _domNode = dom.$('span');\n\tprivate viewZoneId?: string;\n\n\tconstructor(private readonly editor: ICodeEditor) {\n\t\tqueueMicrotask(() => {\n\t\t\tthis.applyStyling();\n\t\t\tthis.editor.addContentWidget(this);\n\t\t});\n\t}\n\n\tprivate applyStyling() {\n\t\tlet fontSize = this.editor.getOption(EditorOption.codeLensFontSize);\n\t\tlet height: number;\n\t\tif (!fontSize || fontSize < 5) {\n\t\t\tfontSize = (this.editor.getOption(EditorOption.fontSize) * .9) | 0;\n\t\t\theight = this.editor.getOption(EditorOption.lineHeight);\n\t\t} else {\n\t\t\theight = (fontSize * Math.max(1.3, this.editor.getOption(EditorOption.lineHeight) / this.editor.getOption(EditorOption.fontSize))) | 0;\n\t\t}\n\n\t\tconst editorFontInfo = this.editor.getOption(EditorOption.fontInfo);\n\t\tconst node = this._domNode;\n\t\tnode.classList.add('testing-diff-lens-widget');\n\t\tnode.textContent = this.getText();\n\t\tnode.style.lineHeight = `${height}px`;\n\t\tnode.style.fontSize = `${fontSize}px`;\n\t\tnode.style.fontFamily = `var(--${LensContentWidgetVars.FontFamily})`;\n\t\tnode.style.fontFeatureSettings = `var(--${LensContentWidgetVars.FontFeatures})`;\n\n\t\tconst containerStyle = this.editor.getContainerDomNode().style;\n\t\tcontainerStyle.setProperty(LensContentWidgetVars.FontFamily, this.editor.getOption(EditorOption.codeLensFontFamily) ?? 'inherit');\n\t\tcontainerStyle.setProperty(LensContentWidgetVars.FontFeatures, editorFontInfo.fontFeatureSettings);\n\n\t\tthis.editor.changeViewZones(accessor => {\n\t\t\tif (this.viewZoneId) {\n\t\t\t\taccessor.removeZone(this.viewZoneId);\n\t\t\t}\n\n\t\t\tthis.viewZoneId = accessor.addZone({\n\t\t\t\tafterLineNumber: 0,\n\t\t\t\tafterColumn: Constants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t\tdomNode: document.createElement('div'),\n\t\t\t\theightInPx: 20,\n\t\t\t});\n\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic abstract getId(): string;\n\n\t/** @inheritdoc */\n\tpublic getDomNode() {\n\t\treturn this._domNode;\n\t}\n\n\t/** @inheritdoc */\n\tpublic dispose() {\n\t\tthis.editor.changeViewZones(accessor => {\n\t\t\tif (this.viewZoneId) {\n\t\t\t\taccessor.removeZone(this.viewZoneId);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.removeContentWidget(this);\n\t}\n\n\t/** @inheritdoc */\n\tpublic getPosition(): IContentWidgetPosition {\n\t\treturn {\n\t\t\tposition: { column: 0, lineNumber: 0 },\n\t\t\tpreference: [ContentWidgetPositionPreference.ABOVE],\n\t\t};\n\t}\n\n\tprotected abstract getText(): string;\n}\n\nclass ExpectedLensContentWidget extends TitleLensContentWidget {\n\tpublic getId() {\n\t\treturn 'expectedTestingLens';\n\t}\n\n\tprotected override getText() {\n\t\treturn localize('expected.title', 'Expected');\n\t}\n}\n\n\nclass ActualLensContentWidget extends TitleLensContentWidget {\n\tpublic getId() {\n\t\treturn 'actualTestingLens';\n\t}\n\n\tprotected override getText() {\n\t\treturn localize('actual.title', 'Actual');\n\t}\n}\n\nabstract class RunTestDecoration {\n\t/** @inheritdoc */\n\tpublic id = '';\n\n\tpublic get line() {\n\t\treturn this.editorDecoration.range.startLineNumber;\n\t}\n\n\tpublic get testIds() {\n\t\treturn this.tests.map(t => t.test.item.extId);\n\t}\n\n\tpublic editorDecoration: IModelDeltaDecoration & { alternate?: IModelDecorationOptions };\n\tpublic displayedStates: readonly (TestResultState | undefined)[];\n\n\tconstructor(\n\t\tprotected tests: readonly {\n\t\t\ttest: IncrementalTestCollectionItem;\n\t\t\tresultItem: TestResultItem | undefined;\n\t\t}[],\n\t\tprivate visible: boolean,\n\t\tprotected readonly model: ITextModel,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestService protected readonly testService: ITestService,\n\t\t@IContextMenuService protected readonly contextMenuService: IContextMenuService,\n\t\t@ICommandService protected readonly commandService: ICommandService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@ITestProfileService protected readonly testProfileService: ITestProfileService,\n\t\t@IContextKeyService protected readonly contextKeyService: IContextKeyService,\n\t\t@IMenuService protected readonly menuService: IMenuService,\n\t) {\n\t\tthis.displayedStates = tests.map(t => t.resultItem?.computedState);\n\t\tthis.editorDecoration = createRunTestDecoration(\n\t\t\ttests.map(t => t.test),\n\t\t\ttests.map(t => t.resultItem),\n\t\t\tvisible,\n\t\t\tgetTestingConfiguration(this.configurationService, TestingConfigKeys.DefaultGutterClickAction),\n\t\t);\n\t\tthis.editorDecoration.options.glyphMarginHoverMessage = new MarkdownString().appendText(this.getGutterLabel());\n\t}\n\n\t/** @inheritdoc */\n\tpublic click(e: IEditorMouseEvent): boolean {\n\t\tif (e.target.type !== MouseTargetType.GUTTER_GLYPH_MARGIN\n\t\t\t|| e.target.detail.glyphMarginLane !== GLYPH_MARGIN_LANE\n\t\t\t// handled by editor gutter context menu\n\t\t\t|| e.event.rightButton\n\t\t\t|| isMacintosh && e.event.leftButton && e.event.ctrlKey\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst alternateAction = e.event.altKey;\n\t\tswitch (getTestingConfiguration(this.configurationService, TestingConfigKeys.DefaultGutterClickAction)) {\n\t\t\tcase DefaultGutterClickAction.ContextMenu:\n\t\t\t\tthis.showContextMenu(e);\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Debug:\n\t\t\t\tthis.runWith(alternateAction ? TestRunProfileBitset.Run : TestRunProfileBitset.Debug);\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Coverage:\n\t\t\t\tthis.runWith(alternateAction ? TestRunProfileBitset.Debug : TestRunProfileBitset.Coverage);\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Run:\n\t\t\tdefault:\n\t\t\t\tthis.runWith(alternateAction ? TestRunProfileBitset.Debug : TestRunProfileBitset.Run);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Updates the decoration to match the new set of tests.\n\t * @returns true if options were changed, false otherwise\n\t */\n\tpublic replaceOptions(newTests: readonly {\n\t\ttest: IncrementalTestCollectionItem;\n\t\tresultItem: TestResultItem | undefined;\n\t}[], visible: boolean): boolean {\n\t\tconst displayedStates = newTests.map(t => t.resultItem?.computedState);\n\t\tif (visible === this.visible && equals(this.displayedStates, displayedStates)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tests = newTests;\n\t\tthis.displayedStates = displayedStates;\n\t\tthis.visible = visible;\n\n\t\tconst { options, alternate } = createRunTestDecoration(\n\t\t\tnewTests.map(t => t.test),\n\t\t\tnewTests.map(t => t.resultItem),\n\t\t\tvisible,\n\t\t\tgetTestingConfiguration(this.configurationService, TestingConfigKeys.DefaultGutterClickAction)\n\t\t);\n\n\t\tthis.editorDecoration.options = options;\n\t\tthis.editorDecoration.alternate = alternate;\n\t\tthis.editorDecoration.options.glyphMarginHoverMessage = new MarkdownString().appendText(this.getGutterLabel());\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets whether this decoration serves as the run button for the given test ID.\n\t */\n\tpublic isForTest(testId: string) {\n\t\treturn this.tests.some(t => t.test.item.extId === testId);\n\t}\n\n\t/**\n\t * Called when the decoration is clicked on.\n\t */\n\tabstract getContextMenuActions(): IReference<IAction[]>;\n\n\tprotected runWith(profile: TestRunProfileBitset) {\n\t\treturn this.testService.runTests({\n\t\t\ttests: simplifyTestsToExecute(this.testService.collection, this.tests.map(({ test }) => test)),\n\t\t\tgroup: profile,\n\t\t});\n\t}\n\n\tprivate showContextMenu(e: IEditorMouseEvent) {\n\t\tconst editor = this.codeEditorService.listCodeEditors().find(e => e.getModel() === this.model);\n\t\teditor?.getContribution<EditorLineNumberContextMenu>(EditorLineNumberContextMenu.ID)?.show(e);\n\t}\n\n\tprivate getGutterLabel() {\n\t\tswitch (getTestingConfiguration(this.configurationService, TestingConfigKeys.DefaultGutterClickAction)) {\n\t\t\tcase DefaultGutterClickAction.ContextMenu:\n\t\t\t\treturn localize('testing.gutterMsg.contextMenu', 'Click for test options');\n\t\t\tcase DefaultGutterClickAction.Debug:\n\t\t\t\treturn localize('testing.gutterMsg.debug', 'Click to debug tests, right click for more options');\n\t\t\tcase DefaultGutterClickAction.Coverage:\n\t\t\t\treturn localize('testing.gutterMsg.coverage', 'Click to run tests with coverage, right click for more options');\n\t\t\tcase DefaultGutterClickAction.Run:\n\t\t\tdefault:\n\t\t\t\treturn localize('testing.gutterMsg.run', 'Click to run tests, right click for more options');\n\t\t}\n\t}\n\n\t/**\n\t * Gets context menu actions relevant for a singel test.\n\t */\n\tprotected getTestContextMenuActions(test: InternalTestItem, resultItem?: TestResultItem): IReference<IAction[]> {\n\t\tconst testActions: IAction[] = [];\n\t\tconst capabilities = this.testProfileService.capabilitiesForTest(test.item);\n\n\t\t[\n\t\t\t{ bitset: TestRunProfileBitset.Run, label: localize('run test', 'Run Test') },\n\t\t\t{ bitset: TestRunProfileBitset.Debug, label: localize('debug test', 'Debug Test') },\n\t\t\t{ bitset: TestRunProfileBitset.Coverage, label: localize('coverage test', 'Run with Coverage') },\n\t\t].forEach(({ bitset, label }) => {\n\t\t\tif (capabilities & bitset) {\n\t\t\t\ttestActions.push(new Action(`testing.gutter.${bitset}`, label, undefined, undefined,\n\t\t\t\t\t() => this.testService.runTests({ group: bitset, tests: [test] })));\n\t\t\t}\n\t\t});\n\n\t\tif (capabilities & TestRunProfileBitset.HasNonDefaultProfile) {\n\t\t\ttestActions.push(new Action('testing.runUsing', localize('testing.runUsing', 'Execute Using Profile...'), undefined, undefined, async () => {\n\t\t\t\tconst profile: ITestRunProfile | undefined = await this.commandService.executeCommand('vscode.pickTestProfile', { onlyForTest: test });\n\t\t\t\tif (!profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.testService.runResolvedTests({\n\t\t\t\t\tgroup: profile.group,\n\t\t\t\t\ttargets: [{\n\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\ttestIds: [test.item.extId]\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}));\n\t\t}\n\n\t\tif (resultItem && isFailedState(resultItem.computedState)) {\n\t\t\ttestActions.push(new Action('testing.gutter.peekFailure', localize('peek failure', 'Peek Error'), undefined, undefined,\n\t\t\t\t() => this.commandService.executeCommand('vscode.peekTestError', test.item.extId)));\n\t\t}\n\n\t\ttestActions.push(new Action('testing.gutter.reveal', localize('reveal test', 'Reveal in Test Explorer'), undefined, undefined,\n\t\t\t() => this.commandService.executeCommand('_revealTestInExplorer', test.item.extId)));\n\n\t\tconst contributed = this.getContributedTestActions(test, capabilities);\n\t\treturn { object: Separator.join(testActions, contributed), dispose() { } };\n\t}\n\n\tprivate getContributedTestActions(test: InternalTestItem, capabilities: number): IAction[] {\n\t\tconst contextOverlay = this.contextKeyService.createOverlay(getTestItemContextOverlay(test, capabilities));\n\n\t\tconst target: IAction[] = [];\n\t\tconst arg = getContextForTestItem(this.testService.collection, test.item.extId);\n\t\tconst menu = this.menuService.getMenuActions(MenuId.TestItemGutter, contextOverlay, { shouldForwardArgs: true, arg });\n\t\tcreateAndFillInContextMenuActions(menu, target);\n\t\treturn target;\n\t}\n}\n\ninterface IMultiRunTest {\n\tcurrentLabel: string;\n\tparent: TestId | undefined;\n\ttestItem: {\n\t\ttest: IncrementalTestCollectionItem;\n\t\tresultItem: TestResultItem | undefined;\n\t};\n}\n\nclass MultiRunTestDecoration extends RunTestDecoration implements ITestDecoration {\n\tconstructor(\n\t\ttests: readonly {\n\t\t\ttest: IncrementalTestCollectionItem;\n\t\t\tresultItem: TestResultItem | undefined;\n\t\t}[],\n\t\tvisible: boolean,\n\t\tmodel: ITextModel,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ITestService testService: ITestService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITestProfileService testProfileService: ITestProfileService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IMenuService menuService: IMenuService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t) {\n\t\tsuper(tests, visible, model, codeEditorService, testService, contextMenuService, commandService, configurationService, testProfileService, contextKeyService, menuService);\n\t}\n\n\tpublic override getContextMenuActions() {\n\t\tconst allActions: IAction[] = [];\n\n\t\t[\n\t\t\t{ bitset: TestRunProfileBitset.Run, label: localize('run all test', 'Run All Tests') },\n\t\t\t{ bitset: TestRunProfileBitset.Coverage, label: localize('run all test with coverage', 'Run All Tests with Coverage') },\n\t\t\t{ bitset: TestRunProfileBitset.Debug, label: localize('debug all test', 'Debug All Tests') },\n\t\t].forEach(({ bitset, label }, i) => {\n\t\t\tconst canRun = this.tests.some(({ test }) => this.testProfileService.capabilitiesForTest(test.item) & bitset);\n\t\t\tif (canRun) {\n\t\t\t\tallActions.push(new Action(`testing.gutter.run${i}`, label, undefined, undefined, () => this.runWith(bitset)));\n\t\t\t}\n\t\t});\n\n\t\tconst testItems = this.tests.map((testItem): IMultiRunTest => ({\n\t\t\tcurrentLabel: testItem.test.item.label,\n\t\t\ttestItem,\n\t\t\tparent: TestId.fromString(testItem.test.item.extId).parentId,\n\t\t}));\n\n\t\tconst getLabelConflicts = (tests: typeof testItems) => {\n\t\t\tconst labelCount = new Map<string, number>();\n\t\t\tfor (const test of tests) {\n\t\t\t\tlabelCount.set(test.currentLabel, (labelCount.get(test.currentLabel) || 0) + 1);\n\t\t\t}\n\n\t\t\treturn tests.filter(e => labelCount.get(e.currentLabel)! > 1);\n\t\t};\n\n\t\tlet conflicts, hasParent = true;\n\t\twhile ((conflicts = getLabelConflicts(testItems)).length && hasParent) {\n\t\t\tfor (const conflict of conflicts) {\n\t\t\t\tif (conflict.parent) {\n\t\t\t\t\tconst parent = this.testService.collection.getNodeById(conflict.parent.toString());\n\t\t\t\t\tconflict.currentLabel = parent?.item.label + ' > ' + conflict.currentLabel;\n\t\t\t\t\tconflict.parent = conflict.parent.parentId;\n\t\t\t\t} else {\n\t\t\t\t\thasParent = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttestItems.sort((a, b) => {\n\t\t\tconst ai = a.testItem.test.item;\n\t\t\tconst bi = b.testItem.test.item;\n\t\t\treturn (ai.sortText || ai.label).localeCompare(bi.sortText || bi.label);\n\t\t});\n\n\t\tconst disposable = new DisposableStore();\n\t\tlet testSubmenus: IAction[] = testItems.map(({ currentLabel, testItem }) => {\n\t\t\tconst actions = this.getTestContextMenuActions(testItem.test, testItem.resultItem);\n\t\t\tdisposable.add(actions);\n\t\t\tlet label = stripIcons(currentLabel);\n\t\t\tconst lf = label.indexOf('\\n');\n\t\t\tif (lf !== -1) {\n\t\t\t\tlabel = label.slice(0, lf);\n\t\t\t}\n\n\t\t\treturn new SubmenuAction(testItem.test.item.extId, label, actions.object);\n\t\t});\n\n\n\t\tconst overflow = testSubmenus.length - MAX_TESTS_IN_SUBMENU;\n\t\tif (overflow > 0) {\n\t\t\ttestSubmenus = testSubmenus.slice(0, MAX_TESTS_IN_SUBMENU);\n\t\t\ttestSubmenus.push(new Action(\n\t\t\t\t'testing.gutter.overflow',\n\t\t\t\tlocalize('testOverflowItems', '{0} more tests...', overflow),\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\t() => this.pickAndRun(testItems),\n\t\t\t));\n\t\t}\n\n\t\treturn { object: Separator.join(allActions, testSubmenus), dispose: () => disposable.dispose() };\n\t}\n\n\tprivate async pickAndRun(testItems: IMultiRunTest[]) {\n\t\tconst doPick = <T extends IQuickPickItem>(items: T[], title: string) => new Promise<T | undefined>(resolve => {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst pick = disposables.add(this.quickInputService.createQuickPick<T>());\n\t\t\tpick.placeholder = title;\n\t\t\tpick.items = items;\n\t\t\tdisposables.add(pick.onDidHide(() => {\n\t\t\t\tresolve(undefined);\n\t\t\t\tdisposables.dispose();\n\t\t\t}));\n\t\t\tdisposables.add(pick.onDidAccept(() => {\n\t\t\t\tresolve(pick.selectedItems[0]);\n\t\t\t\tdisposables.dispose();\n\t\t\t}));\n\t\t\tpick.show();\n\t\t});\n\n\t\tconst item = await doPick(\n\t\t\ttestItems.map(({ currentLabel, testItem }) => ({ label: currentLabel, test: testItem.test, result: testItem.resultItem })),\n\t\t\tlocalize('selectTestToRun', 'Select a test to run'),\n\t\t);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions = this.getTestContextMenuActions(item.test, item.result);\n\t\ttry {\n\t\t\t(await doPick(actions.object, item.label))?.run();\n\t\t} finally {\n\t\t\tactions.dispose();\n\t\t}\n\t}\n}\n\nclass RunSingleTestDecoration extends RunTestDecoration implements ITestDecoration {\n\tconstructor(\n\t\ttest: IncrementalTestCollectionItem,\n\t\tresultItem: TestResultItem | undefined,\n\t\tmodel: ITextModel,\n\t\tvisible: boolean,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ITestService testService: ITestService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITestProfileService testProfiles: ITestProfileService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IMenuService menuService: IMenuService,\n\t) {\n\t\tsuper([{ test, resultItem }], visible, model, codeEditorService, testService, contextMenuService, commandService, configurationService, testProfiles, contextKeyService, menuService);\n\t}\n\n\toverride getContextMenuActions() {\n\t\treturn this.getTestContextMenuActions(this.tests[0].test, this.tests[0].resultItem);\n\t}\n}\n\nconst lineBreakRe = /\\r?\\n\\s*/g;\n\nclass TestMessageDecoration implements ITestDecoration {\n\tpublic static readonly inlineClassName = 'test-message-inline-content';\n\tpublic static readonly decorationId = `testmessage-${generateUuid()}`;\n\n\tpublic id = '';\n\n\tpublic readonly editorDecoration: IModelDeltaDecoration;\n\tpublic readonly location: IRichLocation;\n\tpublic readonly line: number;\n\n\tprivate readonly contentIdClass = `test-message-inline-content-id${generateUuid()}`;\n\n\tconstructor(\n\t\tpublic readonly testMessage: ITestMessage,\n\t\tprivate readonly messageUri: URI | undefined,\n\t\ttextModel: ITextModel,\n\t\t@ITestingPeekOpener private readonly peekOpener: ITestingPeekOpener,\n\t\t@ICodeEditorService editorService: ICodeEditorService,\n\t) {\n\t\tthis.location = testMessage.location!;\n\t\tthis.line = this.location.range.startLineNumber;\n\t\tconst severity = testMessage.type;\n\t\tconst message = testMessage.message;\n\n\t\tconst options = editorService.resolveDecorationOptions(TestMessageDecoration.decorationId, true);\n\t\toptions.hoverMessage = typeof message === 'string' ? new MarkdownString().appendText(message) : message;\n\t\toptions.zIndex = 10; // todo: in spite of the z-index, this appears behind gitlens\n\t\toptions.className = `testing-inline-message-severity-${severity}`;\n\t\toptions.isWholeLine = true;\n\t\toptions.stickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\t\toptions.collapseOnReplaceEdit = true;\n\n\t\tlet inlineText = renderTestMessageAsText(message).replace(lineBreakRe, ' ');\n\t\tif (inlineText.length > MAX_INLINE_MESSAGE_LENGTH) {\n\t\t\tinlineText = inlineText.slice(0, MAX_INLINE_MESSAGE_LENGTH - 1) + '\u2026';\n\t\t}\n\n\t\toptions.after = {\n\t\t\tcontent: ' '.repeat(4) + inlineText,\n\t\t\tinlineClassName: `test-message-inline-content test-message-inline-content-s${severity} ${this.contentIdClass} ${messageUri ? 'test-message-inline-content-clickable' : ''}`\n\t\t};\n\t\toptions.showIfCollapsed = true;\n\n\t\tconst rulerColor = severity === TestMessageType.Error\n\t\t\t? overviewRulerError\n\t\t\t: overviewRulerInfo;\n\n\t\tif (rulerColor) {\n\t\t\toptions.overviewRuler = { color: themeColorFromId(rulerColor), position: OverviewRulerLane.Right };\n\t\t}\n\n\t\tconst lineLength = textModel.getLineLength(this.location.range.startLineNumber);\n\t\tconst column = lineLength ? (lineLength + 1) : this.location.range.endColumn;\n\t\tthis.editorDecoration = {\n\t\t\toptions,\n\t\t\trange: {\n\t\t\t\tstartLineNumber: this.location.range.startLineNumber,\n\t\t\t\tstartColumn: column,\n\t\t\t\tendColumn: column,\n\t\t\t\tendLineNumber: this.location.range.startLineNumber,\n\t\t\t}\n\t\t};\n\t}\n\n\tclick(e: IEditorMouseEvent): boolean {\n\t\tif (e.event.rightButton) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.messageUri) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (e.target.element?.className.includes(this.contentIdClass)) {\n\t\t\tthis.peekOpener.peekUri(this.messageUri);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetContextMenuActions() {\n\t\treturn { object: [], dispose: () => { } };\n\t}\n}\n"],
  "mappings": "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",
  "names": ["newDecorations", "LensContentWidgetVars", "e"]
}
