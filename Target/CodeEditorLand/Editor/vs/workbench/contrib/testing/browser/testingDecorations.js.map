{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testingDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport { StandardKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport {\n\tAction,\n\ttype IAction,\n\tSeparator,\n\tSubmenuAction,\n} from \"../../../../base/common/actions.js\";\nimport { equals } from \"../../../../base/common/arrays.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\ttype IMarkdownString,\n\tMarkdownString,\n} from \"../../../../base/common/htmlContent.js\";\nimport { stripIcons } from \"../../../../base/common/iconLabels.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport { KeyCode } from \"../../../../base/common/keyCodes.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IReference,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { isMacintosh } from \"../../../../base/common/platform.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { Constants } from \"../../../../base/common/uint.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport {\n\tContentWidgetPositionPreference,\n\ttype ICodeEditor,\n\ttype IContentWidgetPosition,\n\ttype IEditorMouseEvent,\n\tMouseTargetType,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { EditorOption } from \"../../../../editor/common/config/editorOptions.js\";\nimport {\n\toverviewRulerError,\n\toverviewRulerInfo,\n} from \"../../../../editor/common/core/editorColorRegistry.js\";\nimport type { IRange } from \"../../../../editor/common/core/range.js\";\nimport type { IEditorContribution } from \"../../../../editor/common/editorCommon.js\";\nimport {\n\tGlyphMarginLane,\n\ttype IModelDecorationOptions,\n\ttype IModelDeltaDecoration,\n\ttype ITextModel,\n\tOverviewRulerLane,\n\tTrackedRangeStickiness,\n} from \"../../../../editor/common/model.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { createAndFillInContextMenuActions } from \"../../../../platform/actions/browser/menuEntryActionViewItem.js\";\nimport {\n\tIMenuService,\n\tMenuId,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { themeColorFromId } from \"../../../../platform/theme/common/themeService.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tEditorLineNumberContextMenu,\n\tGutterActionsRegistry,\n} from \"../../codeEditor/browser/editorLineNumberMenu.js\";\nimport {\n\tDefaultGutterClickAction,\n\tTestingConfigKeys,\n\tgetTestingConfiguration,\n} from \"../common/configuration.js\";\nimport { Testing, labelForTestInState } from \"../common/constants.js\";\nimport { TestId } from \"../common/testId.js\";\nimport { ITestProfileService } from \"../common/testProfileService.js\";\nimport { type ITestResult, LiveTestResult } from \"../common/testResult.js\";\nimport { ITestResultService } from \"../common/testResultService.js\";\nimport {\n\tITestService,\n\tgetContextForTestItem,\n\tsimplifyTestsToExecute,\n\ttestsInFile,\n} from \"../common/testService.js\";\nimport {\n\ttype IRichLocation,\n\ttype ITestMessage,\n\ttype ITestRunProfile,\n\ttype IncrementalTestCollectionItem,\n\ttype InternalTestItem,\n\tTestDiffOpType,\n\tTestMessageType,\n\ttype TestResultItem,\n\tTestResultState,\n\tTestRunProfileBitset,\n} from \"../common/testTypes.js\";\nimport {\n\ttype ITestDecoration as IPublicTestDecoration,\n\tITestingDecorationsService,\n\tTestDecorations,\n} from \"../common/testingDecorations.js\";\nimport { ITestingPeekOpener } from \"../common/testingPeekOpener.js\";\nimport { isFailedState, maxPriority } from \"../common/testingStates.js\";\nimport {\n\tTestUriType,\n\tbuildTestUri,\n\tparseTestUri,\n} from \"../common/testingUri.js\";\nimport { getTestItemContextOverlay } from \"./explorerProjections/testItemContextOverlay.js\";\nimport {\n\ttestingDebugAllIcon,\n\ttestingDebugIcon,\n\ttestingRunAllIcon,\n\ttestingRunIcon,\n\ttestingStatesToIcons,\n} from \"./icons.js\";\nimport { renderTestMessageAsText } from \"./testMessageColorizer.js\";\n\nconst MAX_INLINE_MESSAGE_LENGTH = 128;\nconst MAX_TESTS_IN_SUBMENU = 30;\nconst GLYPH_MARGIN_LANE = GlyphMarginLane.Center;\n\nfunction isOriginalInDiffEditor(\n\tcodeEditorService: ICodeEditorService,\n\tcodeEditor: ICodeEditor,\n): boolean {\n\tconst diffEditors = codeEditorService.listDiffEditors();\n\n\tfor (const diffEditor of diffEditors) {\n\t\tif (diffEditor.getOriginalEditor() === codeEditor) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\ninterface ITestDecoration extends IPublicTestDecoration {\n\tid: string;\n\tclick(e: IEditorMouseEvent): boolean;\n}\n\n/** Value for saved decorations, providing fast accessors for the hot 'syncDecorations' path */\nclass CachedDecorations {\n\tprivate readonly runByIdKey = new Map<string, RunTestDecoration>();\n\tprivate readonly messages = new Map<ITestMessage, TestMessageDecoration>();\n\n\tpublic get size() {\n\t\treturn this.runByIdKey.size + this.messages.size;\n\t}\n\n\t/** Gets a test run decoration that contains exactly the given test IDs */\n\tpublic getForExactTests(testIds: string[]) {\n\t\tconst key = testIds.sort().join(\"\\0\\0\");\n\t\treturn this.runByIdKey.get(key);\n\t}\n\n\t/** Gets the decoration that corresponds to the given test message */\n\tpublic getMessage(message: ITestMessage) {\n\t\treturn this.messages.get(message);\n\t}\n\n\t/** Removes the decoration for the given test messsage */\n\tpublic removeMessage(message: ITestMessage) {\n\t\tthis.messages.delete(message);\n\t}\n\n\t/** Adds a new test message decoration */\n\tpublic addMessage(d: TestMessageDecoration) {\n\t\tthis.messages.set(d.testMessage, d);\n\t}\n\n\t/** Adds a new test run decroation */\n\tpublic addTest(d: RunTestDecoration) {\n\t\tconst key = d.testIds.sort().join(\"\\0\\0\");\n\t\tthis.runByIdKey.set(key, d);\n\t}\n\n\t/** Finds an extension by VS Code event ID */\n\tpublic getById(decorationId: string) {\n\t\tfor (const d of this.runByIdKey.values()) {\n\t\t\tif (d.id === decorationId) {\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t\tfor (const d of this.messages.values()) {\n\t\t\tif (d.id === decorationId) {\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/** Iterate over all decorations */\n\t*[Symbol.iterator](): IterableIterator<ITestDecoration> {\n\t\tfor (const d of this.runByIdKey.values()) {\n\t\t\tyield d;\n\t\t}\n\t\tfor (const d of this.messages.values()) {\n\t\t\tyield d;\n\t\t}\n\t}\n}\n\nexport class TestingDecorationService\n\textends Disposable\n\timplements ITestingDecorationsService\n{\n\tpublic declare _serviceBrand: undefined;\n\n\tprivate generation = 0;\n\tprivate readonly changeEmitter = new Emitter<void>();\n\tprivate readonly decorationCache = new ResourceMap<{\n\t\t/** The document version at which ranges have been updated, requiring rerendering */\n\t\trangeUpdateVersionId?: number;\n\t\t/** Counter for the results rendered in the document */\n\t\tgeneration: number;\n\t\tisAlt?: boolean;\n\t\tvalue: CachedDecorations;\n\t}>();\n\n\t/**\n\t * List of messages that should be hidden because an editor changed their\n\t * underlying ranges. I think this is good enough, because:\n\t *  - Message decorations are never shown across reloads; this does not\n\t *    need to persist\n\t *  - Message instances are stable for any completed test results for\n\t *    the duration of the session.\n\t */\n\tprivate readonly invalidatedMessages = new WeakSet<ITestMessage>();\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tconstructor(\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t) {\n\t\tsuper();\n\t\tcodeEditorService.registerDecorationType('test-message-decoration', TestMessageDecoration.decorationId, {}, undefined);\n\n\t\tthis._register(modelService.onModelRemoved(e => this.decorationCache.delete(e.uri)));\n\n\t\tconst debounceInvalidate = this._register(new RunOnceScheduler(() => this.invalidate(), 100));\n\n\t\t// If ranges were updated in the document, mark that we should explicitly\n\t\t// sync decorations to the published lines, since we assume that everything\n\t\t// is up to date. This prevents issues, as in #138632, #138835, #138922.\n\t\tthis._register(this.testService.onWillProcessDiff(diff => {\n\t\t\tfor (const entry of diff) {\n\t\t\t\tif (entry.op !== TestDiffOpType.DocumentSynced) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rec = this.decorationCache.get(entry.uri);\n\t\t\t\tif (rec) {\n\t\t\t\t\trec.rangeUpdateVersionId = entry.docv;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!debounceInvalidate.isScheduled()) {\n\t\t\t\tdebounceInvalidate.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(Event.any(\n\t\t\tthis.results.onResultsChanged,\n\t\t\tthis.results.onTestChanged,\n\t\t\tthis.testService.excluded.onTestExclusionsChanged,\n\t\t\tthis.testService.showInlineOutput.onDidChange,\n\t\t\tEvent.filter(configurationService.onDidChangeConfiguration, e => e.affectsConfiguration(TestingConfigKeys.GutterEnabled)),\n\t\t)(() => {\n\t\t\tif (!debounceInvalidate.isScheduled()) {\n\t\t\t\tdebounceInvalidate.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(GutterActionsRegistry.registerGutterActionsGenerator((context, result) => {\n\t\t\tconst model = context.editor.getModel();\n\t\t\tconst testingDecorations = TestingDecorations.get(context.editor);\n\t\t\tif (!model || !testingDecorations?.currentUri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentDecorations = this.syncDecorations(testingDecorations.currentUri);\n\t\t\tif (!currentDecorations.size) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst modelDecorations = model.getLinesDecorations(context.lineNumber, context.lineNumber);\n\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\tconst decoration = currentDecorations.getById(id);\n\t\t\t\tif (decoration) {\n\t\t\t\t\tconst { object: actions } = decoration.getContextMenuActions();\n\t\t\t\t\tfor (const action of actions) {\n\t\t\t\t\t\tresult.push(action, '1_testing');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t/** @inheritdoc */\n\tpublic invalidateResultMessage(message: ITestMessage) {\n\t\tthis.invalidatedMessages.add(message);\n\t\tthis.invalidate();\n\t}\n\n\t/** @inheritdoc */\n\tpublic syncDecorations(resource: URI): CachedDecorations {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn new CachedDecorations();\n\t\t}\n\n\t\tconst cached = this.decorationCache.get(resource);\n\t\tif (\n\t\t\tcached &&\n\t\t\tcached.generation === this.generation &&\n\t\t\t(cached.rangeUpdateVersionId === undefined ||\n\t\t\t\tcached.rangeUpdateVersionId !== model.getVersionId())\n\t\t) {\n\t\t\treturn cached.value;\n\t\t}\n\n\t\treturn this.applyDecorations(model);\n\t}\n\n\t/** @inheritdoc */\n\tpublic getDecoratedTestPosition(resource: URI, testId: string) {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst decoration = Iterable.find(\n\t\t\tthis.syncDecorations(resource),\n\t\t\t(v) => v instanceof RunTestDecoration && v.isForTest(testId),\n\t\t);\n\t\tif (!decoration) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// decoration is collapsed, so the range is meaningless; only position matters.\n\t\treturn model.getDecorationRange(decoration.id)?.getStartPosition();\n\t}\n\n\tprivate invalidate() {\n\t\tthis.generation++;\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/**\n\t * Sets whether alternate actions are shown for the model.\n\t */\n\tpublic updateDecorationsAlternateAction(resource: URI, isAlt: boolean) {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tconst cached = this.decorationCache.get(resource);\n\t\tif (!model || !cached || cached.isAlt === isAlt) {\n\t\t\treturn;\n\t\t}\n\n\t\tcached.isAlt = isAlt;\n\t\tmodel.changeDecorations((accessor) => {\n\t\t\tfor (const decoration of cached.value) {\n\t\t\t\tif (\n\t\t\t\t\tdecoration instanceof RunTestDecoration &&\n\t\t\t\t\tdecoration.editorDecoration.alternate\n\t\t\t\t) {\n\t\t\t\t\taccessor.changeDecorationOptions(\n\t\t\t\t\t\tdecoration.id,\n\t\t\t\t\t\tisAlt\n\t\t\t\t\t\t\t? decoration.editorDecoration.alternate\n\t\t\t\t\t\t\t: decoration.editorDecoration.options,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Applies the current set of test decorations to the given text model.\n\t */\n\tprivate applyDecorations(model: ITextModel) {\n\t\tconst gutterEnabled = getTestingConfiguration(\n\t\t\tthis.configurationService,\n\t\t\tTestingConfigKeys.GutterEnabled,\n\t\t);\n\t\tconst uriStr = model.uri.toString();\n\t\tconst cached = this.decorationCache.get(model.uri);\n\t\tconst testRangesUpdated =\n\t\t\tcached?.rangeUpdateVersionId === model.getVersionId();\n\t\tconst lastDecorations = cached?.value ?? new CachedDecorations();\n\n\t\tconst newDecorations = model.changeDecorations((accessor) => {\n\t\t\tconst newDecorations = new CachedDecorations();\n\t\t\tconst runDecorations = new TestDecorations<{\n\t\t\t\tline: number;\n\t\t\t\tid: \"\";\n\t\t\t\ttest: IncrementalTestCollectionItem;\n\t\t\t\tresultItem: TestResultItem | undefined;\n\t\t\t}>();\n\t\t\tfor (const test of this.testService.collection.getNodeByUrl(\n\t\t\t\tmodel.uri,\n\t\t\t)) {\n\t\t\t\tif (!test.item.range) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst stateLookup = this.results.getStateById(test.item.extId);\n\t\t\t\tconst line = test.item.range.startLineNumber;\n\t\t\t\trunDecorations.push({\n\t\t\t\t\tline,\n\t\t\t\t\tid: \"\",\n\t\t\t\t\ttest,\n\t\t\t\t\tresultItem: stateLookup?.[1],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const [line, tests] of runDecorations.lines()) {\n\t\t\t\tconst multi = tests.length > 1;\n\t\t\t\tlet existing = lastDecorations.getForExactTests(\n\t\t\t\t\ttests.map((t) => t.test.item.extId),\n\t\t\t\t);\n\n\t\t\t\t// see comment in the constructor for what's going on here\n\t\t\t\tif (\n\t\t\t\t\texisting &&\n\t\t\t\t\ttestRangesUpdated &&\n\t\t\t\t\tmodel.getDecorationRange(existing.id)?.startLineNumber !==\n\t\t\t\t\t\tline\n\t\t\t\t) {\n\t\t\t\t\texisting = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.replaceOptions(tests, gutterEnabled)) {\n\t\t\t\t\t\taccessor.changeDecorationOptions(\n\t\t\t\t\t\t\texisting.id,\n\t\t\t\t\t\t\texisting.editorDecoration.options,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tnewDecorations.addTest(existing);\n\t\t\t\t} else {\n\t\t\t\t\tnewDecorations.addTest(\n\t\t\t\t\t\tmulti\n\t\t\t\t\t\t\t? this.instantiationService.createInstance(\n\t\t\t\t\t\t\t\t\tMultiRunTestDecoration,\n\t\t\t\t\t\t\t\t\ttests,\n\t\t\t\t\t\t\t\t\tgutterEnabled,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: this.instantiationService.createInstance(\n\t\t\t\t\t\t\t\t\tRunSingleTestDecoration,\n\t\t\t\t\t\t\t\t\ttests[0].test,\n\t\t\t\t\t\t\t\t\ttests[0].resultItem,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\tgutterEnabled,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst messageLines = new Set<number>();\n\t\t\tif (\n\t\t\t\tgetTestingConfiguration(\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t\tTestingConfigKeys.ShowAllMessages,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.results.results.forEach((lastResult) =>\n\t\t\t\t\tthis.applyDecorationsFromResult(\n\t\t\t\t\t\tlastResult,\n\t\t\t\t\t\tmessageLines,\n\t\t\t\t\t\turiStr,\n\t\t\t\t\t\tlastDecorations,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tnewDecorations,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.applyDecorationsFromResult(\n\t\t\t\t\tthis.results.results[0],\n\t\t\t\t\tmessageLines,\n\t\t\t\t\turiStr,\n\t\t\t\t\tlastDecorations,\n\t\t\t\t\tmodel,\n\t\t\t\t\tnewDecorations,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst saveFromRemoval = new Set<string>();\n\t\t\tfor (const decoration of newDecorations) {\n\t\t\t\tif (decoration.id === \"\") {\n\t\t\t\t\tdecoration.id = accessor.addDecoration(\n\t\t\t\t\t\tdecoration.editorDecoration.range,\n\t\t\t\t\t\tdecoration.editorDecoration.options,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tsaveFromRemoval.add(decoration.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const decoration of lastDecorations) {\n\t\t\t\tif (!saveFromRemoval.has(decoration.id)) {\n\t\t\t\t\taccessor.removeDecoration(decoration.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.decorationCache.set(model.uri, {\n\t\t\t\tgeneration: this.generation,\n\t\t\t\trangeUpdateVersionId: cached?.rangeUpdateVersionId,\n\t\t\t\tvalue: newDecorations,\n\t\t\t});\n\n\t\t\treturn newDecorations;\n\t\t});\n\n\t\treturn newDecorations || lastDecorations;\n\t}\n\n\tprivate applyDecorationsFromResult(\n\t\tlastResult: ITestResult,\n\t\tmessageLines: Set<number>,\n\t\turiStr: string,\n\t\tlastDecorations: CachedDecorations,\n\t\tmodel: ITextModel,\n\t\tnewDecorations: CachedDecorations,\n\t) {\n\t\tif (\n\t\t\tthis.testService.showInlineOutput.value &&\n\t\t\tlastResult instanceof LiveTestResult\n\t\t) {\n\t\t\tfor (const task of lastResult.tasks) {\n\t\t\t\tfor (const m of task.otherMessages) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.invalidatedMessages.has(m) &&\n\t\t\t\t\t\tm.location?.uri.toString() === uriStr\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst decoration =\n\t\t\t\t\t\t\tlastDecorations.getMessage(m) ||\n\t\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\t\tTestMessageDecoration,\n\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tnewDecorations.addMessage(decoration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const test of lastResult.tests) {\n\t\t\t\tfor (let taskId = 0; taskId < test.tasks.length; taskId++) {\n\t\t\t\t\tconst state = test.tasks[taskId];\n\t\t\t\t\t// push error decorations first so they take precedence over normal output\n\t\t\t\t\tfor (const kind of [\n\t\t\t\t\t\tTestMessageType.Error,\n\t\t\t\t\t\tTestMessageType.Output,\n\t\t\t\t\t]) {\n\t\t\t\t\t\tfor (let i = 0; i < state.messages.length; i++) {\n\t\t\t\t\t\t\tconst m = state.messages[i];\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tm.type !== kind ||\n\t\t\t\t\t\t\t\tthis.invalidatedMessages.has(m) ||\n\t\t\t\t\t\t\t\tm.location?.uri.toString() !== uriStr\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Only add one message per line number. Overlapping messages\n\t\t\t\t\t\t\t// don't appear well, and the peek will show all of them (#134129)\n\t\t\t\t\t\t\tconst line = m.location.range.startLineNumber;\n\t\t\t\t\t\t\tif (!messageLines.has(line)) {\n\t\t\t\t\t\t\t\tconst decoration =\n\t\t\t\t\t\t\t\t\tlastDecorations.getMessage(m) ||\n\t\t\t\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\t\t\t\tTestMessageDecoration,\n\t\t\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t\t\tbuildTestUri({\n\t\t\t\t\t\t\t\t\t\t\ttype: TestUriType.ResultActualOutput,\n\t\t\t\t\t\t\t\t\t\t\tmessageIndex: i,\n\t\t\t\t\t\t\t\t\t\t\ttaskIndex: taskId,\n\t\t\t\t\t\t\t\t\t\t\tresultId: lastResult.id,\n\t\t\t\t\t\t\t\t\t\t\ttestExtId: test.item.extId,\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tnewDecorations.addMessage(decoration);\n\t\t\t\t\t\t\t\tmessageLines.add(line);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class TestingDecorations\n\textends Disposable\n\timplements IEditorContribution\n{\n\t/**\n\t * Gets the decorations associated with the given code editor.\n\t */\n\tpublic static get(editor: ICodeEditor): TestingDecorations | null {\n\t\treturn editor.getContribution<TestingDecorations>(\n\t\t\tTesting.DecorationsContributionId,\n\t\t);\n\t}\n\n\tpublic get currentUri() {\n\t\treturn this._currentUri;\n\t}\n\n\tprivate _currentUri?: URI;\n\tprivate readonly expectedWidget =\n\t\tnew MutableDisposable<ExpectedLensContentWidget>();\n\tprivate readonly actualWidget =\n\t\tnew MutableDisposable<ActualLensContentWidget>();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestingDecorationsService private readonly decorations: ITestingDecorationsService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tcodeEditorService.registerDecorationType('test-message-decoration', TestMessageDecoration.decorationId, {}, undefined, editor);\n\n\t\tthis.attachModel(editor.getModel()?.uri);\n\t\tthis._register(decorations.onDidChange(() => {\n\t\t\tif (this._currentUri) {\n\t\t\t\tdecorations.syncDecorations(this._currentUri);\n\t\t\t}\n\t\t}));\n\n\t\tconst win = dom.getWindow(editor.getDomNode());\n\t\tthis._register(dom.addDisposableListener(win, 'keydown', e => {\n\t\t\tif (new StandardKeyboardEvent(e).keyCode === KeyCode.Alt && this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri, true);\n\t\t\t}\n\t\t}));\n\t\tthis._register(dom.addDisposableListener(win, 'keyup', e => {\n\t\t\tif (new StandardKeyboardEvent(e).keyCode === KeyCode.Alt && this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri, false);\n\t\t\t}\n\t\t}));\n\t\tthis._register(dom.addDisposableListener(win, 'blur', () => {\n\t\t\tif (this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri, false);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.editor.onKeyUp(e => {\n\t\t\tif (e.keyCode === KeyCode.Alt && this._currentUri) {\n\t\t\t\tdecorations.updateDecorationsAlternateAction(this._currentUri!, false);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.editor.onDidChangeModel(e => this.attachModel(e.newModelUrl || undefined)));\n\t\tthis._register(this.editor.onMouseDown(e => {\n\t\t\tif (e.target.position && this.currentUri) {\n\t\t\t\tconst modelDecorations = editor.getModel()?.getLineDecorations(e.target.position.lineNumber) ?? [];\n\t\t\t\tif (!modelDecorations.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst cache = decorations.syncDecorations(this.currentUri);\n\t\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\t\tif ((cache.getById(id) as ITestDecoration | undefined)?.click(e)) {\n\t\t\t\t\t\te.event.stopPropagation();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(Event.accumulate(this.editor.onDidChangeModelContent, 0, this._store)(evts => {\n\t\t\tconst model = editor.getModel();\n\t\t\tif (!this._currentUri || !model) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentDecorations = decorations.syncDecorations(this._currentUri);\n\t\t\tif (!currentDecorations.size) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const e of evts) {\n\t\t\t\tfor (const change of e.changes) {\n\t\t\t\t\tconst modelDecorations = model.getLinesDecorations(change.range.startLineNumber, change.range.endLineNumber);\n\t\t\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\t\t\tconst decoration = currentDecorations.getById(id);\n\t\t\t\t\t\tif (decoration instanceof TestMessageDecoration) {\n\t\t\t\t\t\t\tdecorations.invalidateResultMessage(decoration.testMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tconst updateFontFamilyVar = () => {\n\t\t\tthis.editor.getContainerDomNode().style.setProperty('--testMessageDecorationFontFamily', editor.getOption(EditorOption.fontFamily));\n\t\t\tthis.editor.getContainerDomNode().style.setProperty('--testMessageDecorationFontSize', `${editor.getOption(EditorOption.fontSize)}px`);\n\t\t};\n\t\tthis._register(this.editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.fontFamily)) {\n\t\t\t\tupdateFontFamilyVar();\n\t\t\t}\n\t\t}));\n\t\tupdateFontFamilyVar();\n\t}\n\n\tprivate attachModel(uri?: URI) {\n\t\tswitch (uri && parseTestUri(uri)?.type) {\n\t\t\tcase TestUriType.ResultExpectedOutput:\n\t\t\t\tthis.expectedWidget.value = new ExpectedLensContentWidget(\n\t\t\t\t\tthis.editor,\n\t\t\t\t);\n\t\t\t\tthis.actualWidget.clear();\n\t\t\t\tbreak;\n\t\t\tcase TestUriType.ResultActualOutput:\n\t\t\t\tthis.expectedWidget.clear();\n\t\t\t\tthis.actualWidget.value = new ActualLensContentWidget(\n\t\t\t\t\tthis.editor,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.expectedWidget.clear();\n\t\t\t\tthis.actualWidget.clear();\n\t\t}\n\n\t\tif (isOriginalInDiffEditor(this.codeEditorService, this.editor)) {\n\t\t\turi = undefined;\n\t\t}\n\n\t\tthis._currentUri = uri;\n\n\t\tif (!uri) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.decorations.syncDecorations(uri);\n\n\t\t(async () => {\n\t\t\tfor await (const _test of testsInFile(\n\t\t\t\tthis.testService,\n\t\t\t\tthis.uriIdentityService,\n\t\t\t\turi,\n\t\t\t\tfalse,\n\t\t\t)) {\n\t\t\t\t// consume the iterator so that all tests in the file get expanded. Or\n\t\t\t\t// at least until the URI changes. If new items are requested, changes\n\t\t\t\t// will be trigged in the `onDidProcessDiff` callback.\n\t\t\t\tif (this._currentUri !== uri) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t}\n}\n\nconst collapseRange = (originalRange: IRange) => ({\n\tstartLineNumber: originalRange.startLineNumber,\n\tendLineNumber: originalRange.startLineNumber,\n\tstartColumn: originalRange.startColumn,\n\tendColumn: originalRange.startColumn,\n});\n\nconst createRunTestDecoration = (\n\ttests: readonly IncrementalTestCollectionItem[],\n\tstates: readonly (TestResultItem | undefined)[],\n\tvisible: boolean,\n\tdefaultGutterAction: DefaultGutterClickAction,\n): IModelDeltaDecoration & { alternate?: IModelDecorationOptions } => {\n\tconst range = tests[0]?.item.range;\n\tif (!range) {\n\t\tthrow new Error(\n\t\t\t\"Test decorations can only be created for tests with a range\",\n\t\t);\n\t}\n\n\tif (!visible) {\n\t\treturn {\n\t\t\trange: collapseRange(range),\n\t\t\toptions: { isWholeLine: true, description: \"run-test-decoration\" },\n\t\t};\n\t}\n\n\tlet computedState = TestResultState.Unset;\n\tconst hoverMessageParts: string[] = [];\n\tlet testIdWithMessages: string | undefined;\n\tlet retired = false;\n\tfor (let i = 0; i < tests.length; i++) {\n\t\tconst test = tests[i];\n\t\tconst resultItem = states[i];\n\t\tconst state = resultItem?.computedState ?? TestResultState.Unset;\n\t\tif (hoverMessageParts.length < 10) {\n\t\t\thoverMessageParts.push(labelForTestInState(test.item.label, state));\n\t\t}\n\t\tcomputedState = maxPriority(computedState, state);\n\t\tretired = retired || !!resultItem?.retired;\n\t\tif (\n\t\t\t!testIdWithMessages &&\n\t\t\tresultItem?.tasks.some((t) => t.messages.length)\n\t\t) {\n\t\t\ttestIdWithMessages = test.item.extId;\n\t\t}\n\t}\n\n\tconst hasMultipleTests = tests.length > 1 || tests[0].children.size > 0;\n\n\tconst primaryIcon =\n\t\tcomputedState === TestResultState.Unset\n\t\t\t? hasMultipleTests\n\t\t\t\t? testingRunAllIcon\n\t\t\t\t: testingRunIcon\n\t\t\t: testingStatesToIcons.get(computedState)!;\n\n\tconst alternateIcon =\n\t\tdefaultGutterAction === DefaultGutterClickAction.Debug\n\t\t\t? hasMultipleTests\n\t\t\t\t? testingRunAllIcon\n\t\t\t\t: testingRunIcon\n\t\t\t: hasMultipleTests\n\t\t\t\t? testingDebugAllIcon\n\t\t\t\t: testingDebugIcon;\n\n\tlet hoverMessage: IMarkdownString | undefined;\n\n\tlet glyphMarginClassName = \"testing-run-glyph\";\n\tif (retired) {\n\t\tglyphMarginClassName += \" retired\";\n\t}\n\n\tconst defaultOptions: IModelDecorationOptions = {\n\t\tdescription: \"run-test-decoration\",\n\t\tshowIfCollapsed: true,\n\t\tget hoverMessage() {\n\t\t\tif (!hoverMessage) {\n\t\t\t\tconst building = (hoverMessage = new MarkdownString(\n\t\t\t\t\t\"\",\n\t\t\t\t\ttrue,\n\t\t\t\t).appendText(hoverMessageParts.join(\", \") + \".\"));\n\t\t\t\tif (testIdWithMessages) {\n\t\t\t\t\tconst args = encodeURIComponent(\n\t\t\t\t\t\tJSON.stringify([testIdWithMessages]),\n\t\t\t\t\t);\n\t\t\t\t\tbuilding.appendMarkdown(\n\t\t\t\t\t\t` [${localize(\"peekTestOutout\", \"Peek Test Output\")}](command:vscode.peekTestError?${args})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn hoverMessage;\n\t\t},\n\t\tglyphMargin: { position: GLYPH_MARGIN_LANE },\n\t\tglyphMarginClassName: `${ThemeIcon.asClassName(primaryIcon)} ${glyphMarginClassName}`,\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tzIndex: 10000,\n\t};\n\n\tconst alternateOptions: IModelDecorationOptions = {\n\t\t...defaultOptions,\n\t\tglyphMarginClassName: `${ThemeIcon.asClassName(alternateIcon)} ${glyphMarginClassName}`,\n\t};\n\n\treturn {\n\t\trange: collapseRange(range),\n\t\toptions: defaultOptions,\n\t\talternate: alternateOptions,\n\t};\n};\n\nenum LensContentWidgetVars {\n\tFontFamily = \"testingDiffLensFontFamily\",\n\tFontFeatures = \"testingDiffLensFontFeatures\",\n}\n\nabstract class TitleLensContentWidget {\n\t/** @inheritdoc */\n\tpublic readonly allowEditorOverflow = false;\n\t/** @inheritdoc */\n\tpublic readonly suppressMouseDown = true;\n\n\tprivate readonly _domNode = dom.$(\"span\");\n\tprivate viewZoneId?: string;\n\n\tconstructor(private readonly editor: ICodeEditor) {\n\t\tqueueMicrotask(() => {\n\t\t\tthis.applyStyling();\n\t\t\tthis.editor.addContentWidget(this);\n\t\t});\n\t}\n\n\tprivate applyStyling() {\n\t\tlet fontSize = this.editor.getOption(EditorOption.codeLensFontSize);\n\t\tlet height: number;\n\t\tif (!fontSize || fontSize < 5) {\n\t\t\tfontSize = (this.editor.getOption(EditorOption.fontSize) * 0.9) | 0;\n\t\t\theight = this.editor.getOption(EditorOption.lineHeight);\n\t\t} else {\n\t\t\theight =\n\t\t\t\t(fontSize *\n\t\t\t\t\tMath.max(\n\t\t\t\t\t\t1.3,\n\t\t\t\t\t\tthis.editor.getOption(EditorOption.lineHeight) /\n\t\t\t\t\t\t\tthis.editor.getOption(EditorOption.fontSize),\n\t\t\t\t\t)) |\n\t\t\t\t0;\n\t\t}\n\n\t\tconst editorFontInfo = this.editor.getOption(EditorOption.fontInfo);\n\t\tconst node = this._domNode;\n\t\tnode.classList.add(\"testing-diff-lens-widget\");\n\t\tnode.textContent = this.getText();\n\t\tnode.style.lineHeight = `${height}px`;\n\t\tnode.style.fontSize = `${fontSize}px`;\n\t\tnode.style.fontFamily = `var(--${LensContentWidgetVars.FontFamily})`;\n\t\tnode.style.fontFeatureSettings = `var(--${LensContentWidgetVars.FontFeatures})`;\n\n\t\tconst containerStyle = this.editor.getContainerDomNode().style;\n\t\tcontainerStyle.setProperty(\n\t\t\tLensContentWidgetVars.FontFamily,\n\t\t\tthis.editor.getOption(EditorOption.codeLensFontFamily) ?? \"inherit\",\n\t\t);\n\t\tcontainerStyle.setProperty(\n\t\t\tLensContentWidgetVars.FontFeatures,\n\t\t\teditorFontInfo.fontFeatureSettings,\n\t\t);\n\n\t\tthis.editor.changeViewZones((accessor) => {\n\t\t\tif (this.viewZoneId) {\n\t\t\t\taccessor.removeZone(this.viewZoneId);\n\t\t\t}\n\n\t\t\tthis.viewZoneId = accessor.addZone({\n\t\t\t\tafterLineNumber: 0,\n\t\t\t\tafterColumn: Constants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t\tdomNode: document.createElement(\"div\"),\n\t\t\t\theightInPx: 20,\n\t\t\t});\n\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic abstract getId(): string;\n\n\t/** @inheritdoc */\n\tpublic getDomNode() {\n\t\treturn this._domNode;\n\t}\n\n\t/** @inheritdoc */\n\tpublic dispose() {\n\t\tthis.editor.changeViewZones((accessor) => {\n\t\t\tif (this.viewZoneId) {\n\t\t\t\taccessor.removeZone(this.viewZoneId);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.removeContentWidget(this);\n\t}\n\n\t/** @inheritdoc */\n\tpublic getPosition(): IContentWidgetPosition {\n\t\treturn {\n\t\t\tposition: { column: 0, lineNumber: 0 },\n\t\t\tpreference: [ContentWidgetPositionPreference.ABOVE],\n\t\t};\n\t}\n\n\tprotected abstract getText(): string;\n}\n\nclass ExpectedLensContentWidget extends TitleLensContentWidget {\n\tpublic getId() {\n\t\treturn \"expectedTestingLens\";\n\t}\n\n\tprotected override getText() {\n\t\treturn localize(\"expected.title\", \"Expected\");\n\t}\n}\n\nclass ActualLensContentWidget extends TitleLensContentWidget {\n\tpublic getId() {\n\t\treturn \"actualTestingLens\";\n\t}\n\n\tprotected override getText() {\n\t\treturn localize(\"actual.title\", \"Actual\");\n\t}\n}\n\nabstract class RunTestDecoration {\n\t/** @inheritdoc */\n\tpublic id = \"\";\n\n\tpublic get line() {\n\t\treturn this.editorDecoration.range.startLineNumber;\n\t}\n\n\tpublic get testIds() {\n\t\treturn this.tests.map((t) => t.test.item.extId);\n\t}\n\n\tpublic editorDecoration: IModelDeltaDecoration & {\n\t\talternate?: IModelDecorationOptions;\n\t};\n\tpublic displayedStates: readonly (TestResultState | undefined)[];\n\n\tconstructor(\n\t\tprotected tests: readonly {\n\t\t\ttest: IncrementalTestCollectionItem;\n\t\t\tresultItem: TestResultItem | undefined;\n\t\t}[],\n\t\tprivate visible: boolean,\n\t\tprotected readonly model: ITextModel,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestService protected readonly testService: ITestService,\n\t\t@IContextMenuService protected readonly contextMenuService: IContextMenuService,\n\t\t@ICommandService protected readonly commandService: ICommandService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@ITestProfileService protected readonly testProfileService: ITestProfileService,\n\t\t@IContextKeyService protected readonly contextKeyService: IContextKeyService,\n\t\t@IMenuService protected readonly menuService: IMenuService,\n\t) {\n\t\tthis.displayedStates = tests.map(t => t.resultItem?.computedState);\n\t\tthis.editorDecoration = createRunTestDecoration(\n\t\t\ttests.map(t => t.test),\n\t\t\ttests.map(t => t.resultItem),\n\t\t\tvisible,\n\t\t\tgetTestingConfiguration(this.configurationService, TestingConfigKeys.DefaultGutterClickAction),\n\t\t);\n\t\tthis.editorDecoration.options.glyphMarginHoverMessage = new MarkdownString().appendText(this.getGutterLabel());\n\t}\n\n\t/** @inheritdoc */\n\tpublic click(e: IEditorMouseEvent): boolean {\n\t\tif (\n\t\t\te.target.type !== MouseTargetType.GUTTER_GLYPH_MARGIN ||\n\t\t\te.target.detail.glyphMarginLane !== GLYPH_MARGIN_LANE ||\n\t\t\t// handled by editor gutter context menu\n\t\t\te.event.rightButton ||\n\t\t\t(isMacintosh && e.event.leftButton && e.event.ctrlKey)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst alternateAction = e.event.altKey;\n\t\tswitch (\n\t\t\tgetTestingConfiguration(\n\t\t\t\tthis.configurationService,\n\t\t\t\tTestingConfigKeys.DefaultGutterClickAction,\n\t\t\t)\n\t\t) {\n\t\t\tcase DefaultGutterClickAction.ContextMenu:\n\t\t\t\tthis.showContextMenu(e);\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Debug:\n\t\t\t\tthis.runWith(\n\t\t\t\t\talternateAction\n\t\t\t\t\t\t? TestRunProfileBitset.Run\n\t\t\t\t\t\t: TestRunProfileBitset.Debug,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Coverage:\n\t\t\t\tthis.runWith(\n\t\t\t\t\talternateAction\n\t\t\t\t\t\t? TestRunProfileBitset.Debug\n\t\t\t\t\t\t: TestRunProfileBitset.Coverage,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Run:\n\t\t\tdefault:\n\t\t\t\tthis.runWith(\n\t\t\t\t\talternateAction\n\t\t\t\t\t\t? TestRunProfileBitset.Debug\n\t\t\t\t\t\t: TestRunProfileBitset.Run,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Updates the decoration to match the new set of tests.\n\t * @returns true if options were changed, false otherwise\n\t */\n\tpublic replaceOptions(\n\t\tnewTests: readonly {\n\t\t\ttest: IncrementalTestCollectionItem;\n\t\t\tresultItem: TestResultItem | undefined;\n\t\t}[],\n\t\tvisible: boolean,\n\t): boolean {\n\t\tconst displayedStates = newTests.map(\n\t\t\t(t) => t.resultItem?.computedState,\n\t\t);\n\t\tif (\n\t\t\tvisible === this.visible &&\n\t\t\tequals(this.displayedStates, displayedStates)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tests = newTests;\n\t\tthis.displayedStates = displayedStates;\n\t\tthis.visible = visible;\n\n\t\tconst { options, alternate } = createRunTestDecoration(\n\t\t\tnewTests.map((t) => t.test),\n\t\t\tnewTests.map((t) => t.resultItem),\n\t\t\tvisible,\n\t\t\tgetTestingConfiguration(\n\t\t\t\tthis.configurationService,\n\t\t\t\tTestingConfigKeys.DefaultGutterClickAction,\n\t\t\t),\n\t\t);\n\n\t\tthis.editorDecoration.options = options;\n\t\tthis.editorDecoration.alternate = alternate;\n\t\tthis.editorDecoration.options.glyphMarginHoverMessage =\n\t\t\tnew MarkdownString().appendText(this.getGutterLabel());\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets whether this decoration serves as the run button for the given test ID.\n\t */\n\tpublic isForTest(testId: string) {\n\t\treturn this.tests.some((t) => t.test.item.extId === testId);\n\t}\n\n\t/**\n\t * Called when the decoration is clicked on.\n\t */\n\tabstract getContextMenuActions(): IReference<IAction[]>;\n\n\tprotected runWith(profile: TestRunProfileBitset) {\n\t\treturn this.testService.runTests({\n\t\t\ttests: simplifyTestsToExecute(\n\t\t\t\tthis.testService.collection,\n\t\t\t\tthis.tests.map(({ test }) => test),\n\t\t\t),\n\t\t\tgroup: profile,\n\t\t});\n\t}\n\n\tprivate showContextMenu(e: IEditorMouseEvent) {\n\t\tconst editor = this.codeEditorService\n\t\t\t.listCodeEditors()\n\t\t\t.find((e) => e.getModel() === this.model);\n\t\teditor\n\t\t\t?.getContribution<EditorLineNumberContextMenu>(\n\t\t\t\tEditorLineNumberContextMenu.ID,\n\t\t\t)\n\t\t\t?.show(e);\n\t}\n\n\tprivate getGutterLabel() {\n\t\tswitch (\n\t\t\tgetTestingConfiguration(\n\t\t\t\tthis.configurationService,\n\t\t\t\tTestingConfigKeys.DefaultGutterClickAction,\n\t\t\t)\n\t\t) {\n\t\t\tcase DefaultGutterClickAction.ContextMenu:\n\t\t\t\treturn localize(\n\t\t\t\t\t\"testing.gutterMsg.contextMenu\",\n\t\t\t\t\t\"Click for test options\",\n\t\t\t\t);\n\t\t\tcase DefaultGutterClickAction.Debug:\n\t\t\t\treturn localize(\n\t\t\t\t\t\"testing.gutterMsg.debug\",\n\t\t\t\t\t\"Click to debug tests, right click for more options\",\n\t\t\t\t);\n\t\t\tcase DefaultGutterClickAction.Coverage:\n\t\t\t\treturn localize(\n\t\t\t\t\t\"testing.gutterMsg.coverage\",\n\t\t\t\t\t\"Click to run tests with coverage, right click for more options\",\n\t\t\t\t);\n\t\t\tcase DefaultGutterClickAction.Run:\n\t\t\tdefault:\n\t\t\t\treturn localize(\n\t\t\t\t\t\"testing.gutterMsg.run\",\n\t\t\t\t\t\"Click to run tests, right click for more options\",\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Gets context menu actions relevant for a singel test.\n\t */\n\tprotected getTestContextMenuActions(\n\t\ttest: InternalTestItem,\n\t\tresultItem?: TestResultItem,\n\t): IReference<IAction[]> {\n\t\tconst testActions: IAction[] = [];\n\t\tconst capabilities = this.testProfileService.capabilitiesForTest(\n\t\t\ttest.item,\n\t\t);\n\n\t\t[\n\t\t\t{\n\t\t\t\tbitset: TestRunProfileBitset.Run,\n\t\t\t\tlabel: localize(\"run test\", \"Run Test\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tbitset: TestRunProfileBitset.Debug,\n\t\t\t\tlabel: localize(\"debug test\", \"Debug Test\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tbitset: TestRunProfileBitset.Coverage,\n\t\t\t\tlabel: localize(\"coverage test\", \"Run with Coverage\"),\n\t\t\t},\n\t\t].forEach(({ bitset, label }) => {\n\t\t\tif (capabilities & bitset) {\n\t\t\t\ttestActions.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t`testing.gutter.${bitset}`,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.testService.runTests({\n\t\t\t\t\t\t\t\tgroup: bitset,\n\t\t\t\t\t\t\t\ttests: [test],\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tif (capabilities & TestRunProfileBitset.HasNonDefaultProfile) {\n\t\t\ttestActions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"testing.runUsing\",\n\t\t\t\t\tlocalize(\"testing.runUsing\", \"Execute Using Profile...\"),\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\tconst profile: ITestRunProfile | undefined =\n\t\t\t\t\t\t\tawait this.commandService.executeCommand(\n\t\t\t\t\t\t\t\t\"vscode.pickTestProfile\",\n\t\t\t\t\t\t\t\t{ onlyForTest: test },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!profile) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.testService.runResolvedTests({\n\t\t\t\t\t\t\tgroup: profile.group,\n\t\t\t\t\t\t\ttargets: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\t\t\t\ttestIds: [test.item.extId],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (resultItem && isFailedState(resultItem.computedState)) {\n\t\t\ttestActions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"testing.gutter.peekFailure\",\n\t\t\t\t\tlocalize(\"peek failure\", \"Peek Error\"),\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\"vscode.peekTestError\",\n\t\t\t\t\t\t\ttest.item.extId,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\ttestActions.push(\n\t\t\tnew Action(\n\t\t\t\t\"testing.gutter.reveal\",\n\t\t\t\tlocalize(\"reveal test\", \"Reveal in Test Explorer\"),\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\t() =>\n\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\"_revealTestInExplorer\",\n\t\t\t\t\t\ttest.item.extId,\n\t\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tconst contributed = this.getContributedTestActions(test, capabilities);\n\t\treturn {\n\t\t\tobject: Separator.join(testActions, contributed),\n\t\t\tdispose() {},\n\t\t};\n\t}\n\n\tprivate getContributedTestActions(\n\t\ttest: InternalTestItem,\n\t\tcapabilities: number,\n\t): IAction[] {\n\t\tconst contextOverlay = this.contextKeyService.createOverlay(\n\t\t\tgetTestItemContextOverlay(test, capabilities),\n\t\t);\n\n\t\tconst target: IAction[] = [];\n\t\tconst arg = getContextForTestItem(\n\t\t\tthis.testService.collection,\n\t\t\ttest.item.extId,\n\t\t);\n\t\tconst menu = this.menuService.getMenuActions(\n\t\t\tMenuId.TestItemGutter,\n\t\t\tcontextOverlay,\n\t\t\t{ shouldForwardArgs: true, arg },\n\t\t);\n\t\tcreateAndFillInContextMenuActions(menu, target);\n\t\treturn target;\n\t}\n}\n\ninterface IMultiRunTest {\n\tcurrentLabel: string;\n\tparent: TestId | undefined;\n\ttestItem: {\n\t\ttest: IncrementalTestCollectionItem;\n\t\tresultItem: TestResultItem | undefined;\n\t};\n}\n\nclass MultiRunTestDecoration\n\textends RunTestDecoration\n\timplements ITestDecoration\n{\n\tconstructor(\n\t\ttests: readonly {\n\t\t\ttest: IncrementalTestCollectionItem;\n\t\t\tresultItem: TestResultItem | undefined;\n\t\t}[],\n\t\tvisible: boolean,\n\t\tmodel: ITextModel,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ITestService testService: ITestService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITestProfileService testProfileService: ITestProfileService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IMenuService menuService: IMenuService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t) {\n\t\tsuper(tests, visible, model, codeEditorService, testService, contextMenuService, commandService, configurationService, testProfileService, contextKeyService, menuService);\n\t}\n\n\tpublic override getContextMenuActions() {\n\t\tconst allActions: IAction[] = [];\n\n\t\t[\n\t\t\t{\n\t\t\t\tbitset: TestRunProfileBitset.Run,\n\t\t\t\tlabel: localize(\"run all test\", \"Run All Tests\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tbitset: TestRunProfileBitset.Coverage,\n\t\t\t\tlabel: localize(\n\t\t\t\t\t\"run all test with coverage\",\n\t\t\t\t\t\"Run All Tests with Coverage\",\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tbitset: TestRunProfileBitset.Debug,\n\t\t\t\tlabel: localize(\"debug all test\", \"Debug All Tests\"),\n\t\t\t},\n\t\t].forEach(({ bitset, label }, i) => {\n\t\t\tconst canRun = this.tests.some(\n\t\t\t\t({ test }) =>\n\t\t\t\t\tthis.testProfileService.capabilitiesForTest(test.item) &\n\t\t\t\t\tbitset,\n\t\t\t);\n\t\t\tif (canRun) {\n\t\t\t\tallActions.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t`testing.gutter.run${i}`,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() => this.runWith(bitset),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tconst testItems = this.tests.map(\n\t\t\t(testItem): IMultiRunTest => ({\n\t\t\t\tcurrentLabel: testItem.test.item.label,\n\t\t\t\ttestItem,\n\t\t\t\tparent: TestId.fromString(testItem.test.item.extId).parentId,\n\t\t\t}),\n\t\t);\n\n\t\tconst getLabelConflicts = (tests: typeof testItems) => {\n\t\t\tconst labelCount = new Map<string, number>();\n\t\t\tfor (const test of tests) {\n\t\t\t\tlabelCount.set(\n\t\t\t\t\ttest.currentLabel,\n\t\t\t\t\t(labelCount.get(test.currentLabel) || 0) + 1,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn tests.filter((e) => labelCount.get(e.currentLabel)! > 1);\n\t\t};\n\n\t\tlet conflicts,\n\t\t\thasParent = true;\n\t\twhile ((conflicts = getLabelConflicts(testItems)).length && hasParent) {\n\t\t\tfor (const conflict of conflicts) {\n\t\t\t\tif (conflict.parent) {\n\t\t\t\t\tconst parent = this.testService.collection.getNodeById(\n\t\t\t\t\t\tconflict.parent.toString(),\n\t\t\t\t\t);\n\t\t\t\t\tconflict.currentLabel =\n\t\t\t\t\t\tparent?.item.label + \" > \" + conflict.currentLabel;\n\t\t\t\t\tconflict.parent = conflict.parent.parentId;\n\t\t\t\t} else {\n\t\t\t\t\thasParent = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttestItems.sort((a, b) => {\n\t\t\tconst ai = a.testItem.test.item;\n\t\t\tconst bi = b.testItem.test.item;\n\t\t\treturn (ai.sortText || ai.label).localeCompare(\n\t\t\t\tbi.sortText || bi.label,\n\t\t\t);\n\t\t});\n\n\t\tconst disposable = new DisposableStore();\n\t\tlet testSubmenus: IAction[] = testItems.map(\n\t\t\t({ currentLabel, testItem }) => {\n\t\t\t\tconst actions = this.getTestContextMenuActions(\n\t\t\t\t\ttestItem.test,\n\t\t\t\t\ttestItem.resultItem,\n\t\t\t\t);\n\t\t\t\tdisposable.add(actions);\n\t\t\t\tlet label = stripIcons(currentLabel);\n\t\t\t\tconst lf = label.indexOf(\"\\n\");\n\t\t\t\tif (lf !== -1) {\n\t\t\t\t\tlabel = label.slice(0, lf);\n\t\t\t\t}\n\n\t\t\t\treturn new SubmenuAction(\n\t\t\t\t\ttestItem.test.item.extId,\n\t\t\t\t\tlabel,\n\t\t\t\t\tactions.object,\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\n\t\tconst overflow = testSubmenus.length - MAX_TESTS_IN_SUBMENU;\n\t\tif (overflow > 0) {\n\t\t\ttestSubmenus = testSubmenus.slice(0, MAX_TESTS_IN_SUBMENU);\n\t\t\ttestSubmenus.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"testing.gutter.overflow\",\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"testOverflowItems\",\n\t\t\t\t\t\t\"{0} more tests...\",\n\t\t\t\t\t\toverflow,\n\t\t\t\t\t),\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\t() => this.pickAndRun(testItems),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tobject: Separator.join(allActions, testSubmenus),\n\t\t\tdispose: () => disposable.dispose(),\n\t\t};\n\t}\n\n\tprivate async pickAndRun(testItems: IMultiRunTest[]) {\n\t\tconst doPick = <T extends IQuickPickItem>(items: T[], title: string) =>\n\t\t\tnew Promise<T | undefined>((resolve) => {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst pick = disposables.add(\n\t\t\t\t\tthis.quickInputService.createQuickPick<T>(),\n\t\t\t\t);\n\t\t\t\tpick.placeholder = title;\n\t\t\t\tpick.items = items;\n\t\t\t\tdisposables.add(\n\t\t\t\t\tpick.onDidHide(() => {\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tdisposables.add(\n\t\t\t\t\tpick.onDidAccept(() => {\n\t\t\t\t\t\tresolve(pick.selectedItems[0]);\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tpick.show();\n\t\t\t});\n\n\t\tconst item = await doPick(\n\t\t\ttestItems.map(({ currentLabel, testItem }) => ({\n\t\t\t\tlabel: currentLabel,\n\t\t\t\ttest: testItem.test,\n\t\t\t\tresult: testItem.resultItem,\n\t\t\t})),\n\t\t\tlocalize(\"selectTestToRun\", \"Select a test to run\"),\n\t\t);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions = this.getTestContextMenuActions(item.test, item.result);\n\t\ttry {\n\t\t\t(await doPick(actions.object, item.label))?.run();\n\t\t} finally {\n\t\t\tactions.dispose();\n\t\t}\n\t}\n}\n\nclass RunSingleTestDecoration\n\textends RunTestDecoration\n\timplements ITestDecoration\n{\n\tconstructor(\n\t\ttest: IncrementalTestCollectionItem,\n\t\tresultItem: TestResultItem | undefined,\n\t\tmodel: ITextModel,\n\t\tvisible: boolean,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ITestService testService: ITestService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITestProfileService testProfiles: ITestProfileService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IMenuService menuService: IMenuService,\n\t) {\n\t\tsuper(\n\t\t\t[{ test, resultItem }],\n\t\t\tvisible,\n\t\t\tmodel,\n\t\t\tcodeEditorService,\n\t\t\ttestService,\n\t\t\tcontextMenuService,\n\t\t\tcommandService,\n\t\t\tconfigurationService,\n\t\t\ttestProfiles,\n\t\t\tcontextKeyService,\n\t\t\tmenuService,\n\t\t);\n\t}\n\n\toverride getContextMenuActions() {\n\t\treturn this.getTestContextMenuActions(\n\t\t\tthis.tests[0].test,\n\t\t\tthis.tests[0].resultItem,\n\t\t);\n\t}\n}\n\nconst lineBreakRe = /\\r?\\n\\s*/g;\n\nclass TestMessageDecoration implements ITestDecoration {\n\tpublic static readonly inlineClassName = \"test-message-inline-content\";\n\tpublic static readonly decorationId = `testmessage-${generateUuid()}`;\n\n\tpublic id = \"\";\n\n\tpublic readonly editorDecoration: IModelDeltaDecoration;\n\tpublic readonly location: IRichLocation;\n\tpublic readonly line: number;\n\n\tprivate readonly contentIdClass =\n\t\t`test-message-inline-content-id${generateUuid()}`;\n\n\tconstructor(\n\t\tpublic readonly testMessage: ITestMessage,\n\t\tprivate readonly messageUri: URI | undefined,\n\t\ttextModel: ITextModel,\n\t\t@ITestingPeekOpener private readonly peekOpener: ITestingPeekOpener,\n\t\t@ICodeEditorService editorService: ICodeEditorService,\n\t) {\n\t\tthis.location = testMessage.location!;\n\t\tthis.line = this.location.range.startLineNumber;\n\t\tconst severity = testMessage.type;\n\t\tconst message = testMessage.message;\n\n\t\tconst options = editorService.resolveDecorationOptions(TestMessageDecoration.decorationId, true);\n\t\toptions.hoverMessage = typeof message === 'string' ? new MarkdownString().appendText(message) : message;\n\t\toptions.zIndex = 10; // todo: in spite of the z-index, this appears behind gitlens\n\t\toptions.className = `testing-inline-message-severity-${severity}`;\n\t\toptions.isWholeLine = true;\n\t\toptions.stickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\t\toptions.collapseOnReplaceEdit = true;\n\n\t\tlet inlineText = renderTestMessageAsText(message).replace(lineBreakRe, ' ');\n\t\tif (inlineText.length > MAX_INLINE_MESSAGE_LENGTH) {\n\t\t\tinlineText = inlineText.slice(0, MAX_INLINE_MESSAGE_LENGTH - 1) + '\u2026';\n\t\t}\n\n\t\toptions.after = {\n\t\t\tcontent: ' '.repeat(4) + inlineText,\n\t\t\tinlineClassName: `test-message-inline-content test-message-inline-content-s${severity} ${this.contentIdClass} ${messageUri ? 'test-message-inline-content-clickable' : ''}`\n\t\t};\n\t\toptions.showIfCollapsed = true;\n\n\t\tconst rulerColor = severity === TestMessageType.Error\n\t\t\t? overviewRulerError\n\t\t\t: overviewRulerInfo;\n\n\t\tif (rulerColor) {\n\t\t\toptions.overviewRuler = { color: themeColorFromId(rulerColor), position: OverviewRulerLane.Right };\n\t\t}\n\n\t\tconst lineLength = textModel.getLineLength(this.location.range.startLineNumber);\n\t\tconst column = lineLength ? (lineLength + 1) : this.location.range.endColumn;\n\t\tthis.editorDecoration = {\n\t\t\toptions,\n\t\t\trange: {\n\t\t\t\tstartLineNumber: this.location.range.startLineNumber,\n\t\t\t\tstartColumn: column,\n\t\t\t\tendColumn: column,\n\t\t\t\tendLineNumber: this.location.range.startLineNumber,\n\t\t\t}\n\t\t};\n\t}\n\n\tclick(e: IEditorMouseEvent): boolean {\n\t\tif (e.event.rightButton) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.messageUri) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (e.target.element?.className.includes(this.contentIdClass)) {\n\t\t\tthis.peekOpener.peekUri(this.messageUri);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetContextMenuActions() {\n\t\treturn { object: [], dispose: () => {} };\n\t}\n}\n"],
  "mappings": "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",
  "names": ["newDecorations", "LensContentWidgetVars", "e"]
}
