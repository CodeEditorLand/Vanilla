{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testResultsView/testResultsTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { ActionBar } from \"../../../../../base/browser/ui/actionbar/actionbar.js\";\nimport { renderLabelWithIcons } from \"../../../../../base/browser/ui/iconLabel/iconLabels.js\";\nimport type { IIdentityProvider } from \"../../../../../base/browser/ui/list/list.js\";\nimport type {\n\tICompressedTreeElement,\n\tICompressedTreeNode,\n} from \"../../../../../base/browser/ui/tree/compressedObjectTreeModel.js\";\nimport type { ICompressibleTreeRenderer } from \"../../../../../base/browser/ui/tree/objectTree.js\";\nimport type {\n\tITreeContextMenuEvent,\n\tITreeNode,\n} from \"../../../../../base/browser/ui/tree/tree.js\";\nimport {\n\tAction,\n\ttype IAction,\n\tSeparator,\n} from \"../../../../../base/common/actions.js\";\nimport { RunOnceScheduler } from \"../../../../../base/common/async.js\";\nimport { Codicon } from \"../../../../../base/common/codicons.js\";\nimport { Emitter, Event } from \"../../../../../base/common/event.js\";\nimport type { FuzzyScore } from \"../../../../../base/common/filters.js\";\nimport { Iterable } from \"../../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { MarshalledId } from \"../../../../../base/common/marshallingIds.js\";\nimport { autorun } from \"../../../../../base/common/observable.js\";\nimport { count } from \"../../../../../base/common/strings.js\";\nimport { ThemeIcon } from \"../../../../../base/common/themables.js\";\nimport { isDefined } from \"../../../../../base/common/types.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport {\n\tMenuEntryActionViewItem,\n\tcreateAndFillInActionBarActions,\n} from \"../../../../../platform/actions/browser/menuEntryActionViewItem.js\";\nimport {\n\tIMenuService,\n\tMenuId,\n\tMenuItemAction,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../../platform/commands/common/commands.js\";\nimport { IContextKeyService } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../../platform/contextview/browser/contextView.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { WorkbenchCompressibleObjectTree } from \"../../../../../platform/list/browser/listService.js\";\nimport { IProgressService } from \"../../../../../platform/progress/common/progress.js\";\nimport { ITelemetryService } from \"../../../../../platform/telemetry/common/telemetry.js\";\nimport { widgetClose } from \"../../../../../platform/theme/common/iconRegistry.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport { TestCommandId, Testing } from \"../../common/constants.js\";\nimport { ITestCoverageService } from \"../../common/testCoverageService.js\";\nimport { ITestExplorerFilterState } from \"../../common/testExplorerFilterState.js\";\nimport { ITestProfileService } from \"../../common/testProfileService.js\";\nimport {\n\ttype ITestResult,\n\ttype ITestRunTaskResults,\n\tLiveTestResult,\n\tTestResultItemChangeReason,\n\tmaxCountPriority,\n} from \"../../common/testResult.js\";\nimport { ITestResultService } from \"../../common/testResultService.js\";\nimport {\n\ttype IRichLocation,\n\ttype ITestItemContext,\n\ttype ITestMessage,\n\ttype ITestMessageMenuArgs,\n\tInternalTestItem,\n\tTestMessageType,\n\ttype TestResultItem,\n\tTestResultState,\n\tTestRunProfileBitset,\n\ttestResultStateToContextValues,\n} from \"../../common/testTypes.js\";\nimport { TestingContextKeys } from \"../../common/testingContextKeys.js\";\nimport { cmpPriority } from \"../../common/testingStates.js\";\nimport { TestUriType, buildTestUri } from \"../../common/testingUri.js\";\nimport { getTestItemContextOverlay } from \"../explorerProjections/testItemContextOverlay.js\";\nimport * as icons from \"../icons.js\";\nimport { renderTestMessageAsText } from \"../testMessageColorizer.js\";\nimport {\n\ttype InspectSubject,\n\tMessageSubject,\n\tTaskSubject,\n\tTestOutputSubject,\n\tgetMessageArgs,\n\tmapFindTestMessage,\n} from \"./testResultsSubject.js\";\n\ninterface ITreeElement {\n\ttype: string;\n\tcontext: unknown;\n\tid: string;\n\tlabel: string;\n\tonDidChange: Event<void>;\n\tlabelWithIcons?: readonly (HTMLSpanElement | string)[];\n\ticon?: ThemeIcon;\n\tdescription?: string;\n\tariaLabel?: string;\n}\n\ninterface ITreeElement {\n\ttype: string;\n\tcontext: unknown;\n\tid: string;\n\tlabel: string;\n\tonDidChange: Event<void>;\n\tlabelWithIcons?: readonly (HTMLSpanElement | string)[];\n\ticon?: ThemeIcon;\n\tdescription?: string;\n\tariaLabel?: string;\n}\n\nclass TestResultElement implements ITreeElement {\n\tpublic readonly changeEmitter = new Emitter<void>();\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\tpublic readonly type = \"result\";\n\tpublic readonly context = this.value.id;\n\tpublic readonly id = this.value.id;\n\tpublic readonly label = this.value.name;\n\n\tpublic get icon() {\n\t\treturn icons.testingStatesToIcons.get(\n\t\t\tthis.value.completedAt === undefined\n\t\t\t\t? TestResultState.Running\n\t\t\t\t: maxCountPriority(this.value.counts),\n\t\t);\n\t}\n\n\tconstructor(public readonly value: ITestResult) {}\n}\n\nconst openCoverageLabel = localize(\"openTestCoverage\", \"View Test Coverage\");\nconst closeCoverageLabel = localize(\"closeTestCoverage\", \"Close Test Coverage\");\n\nclass CoverageElement implements ITreeElement {\n\tpublic readonly type = \"coverage\";\n\tpublic readonly context: undefined;\n\tpublic readonly id = `coverage-${this.results.id}/${this.task.id}`;\n\tpublic readonly onDidChange: Event<void>;\n\n\tpublic get label() {\n\t\treturn this.isOpen ? closeCoverageLabel : openCoverageLabel;\n\t}\n\n\tpublic get icon() {\n\t\treturn this.isOpen ? widgetClose : icons.testingCoverageReport;\n\t}\n\n\tpublic get isOpen() {\n\t\treturn this.coverageService.selected.get()?.fromTaskId === this.task.id;\n\t}\n\n\tconstructor(\n\t\tprivate readonly results: ITestResult,\n\t\tpublic readonly task: ITestRunTaskResults,\n\t\tprivate readonly coverageService: ITestCoverageService,\n\t) {\n\t\tthis.onDidChange = Event.fromObservableLight(coverageService.selected);\n\t}\n}\n\nclass OlderResultsElement implements ITreeElement {\n\tpublic readonly type = \"older\";\n\tpublic readonly context: undefined;\n\tpublic readonly id = `older-${this.n}`;\n\tpublic readonly onDidChange = Event.None;\n\tpublic readonly label: string;\n\n\tconstructor(private readonly n: number) {\n\t\tthis.label = localize(\"nOlderResults\", \"{0} older results\", n);\n\t}\n}\n\nclass TestCaseElement implements ITreeElement {\n\tpublic readonly type = \"test\";\n\tpublic readonly context: ITestItemContext = {\n\t\t$mid: MarshalledId.TestItemContext,\n\t\ttests: [InternalTestItem.serialize(this.test)],\n\t};\n\tpublic readonly id = `${this.results.id}/${this.test.item.extId}`;\n\tpublic readonly description?: string;\n\n\tpublic get onDidChange() {\n\t\tif (!(this.results instanceof LiveTestResult)) {\n\t\t\treturn Event.None;\n\t\t}\n\n\t\treturn Event.filter(\n\t\t\tthis.results.onChange,\n\t\t\t(e) => e.item.item.extId === this.test.item.extId,\n\t\t);\n\t}\n\n\tpublic get state() {\n\t\treturn this.test.tasks[this.taskIndex].state;\n\t}\n\n\tpublic get label() {\n\t\treturn this.test.item.label;\n\t}\n\n\tpublic get labelWithIcons() {\n\t\treturn renderLabelWithIcons(this.label);\n\t}\n\n\tpublic get icon() {\n\t\treturn icons.testingStatesToIcons.get(this.state);\n\t}\n\n\tpublic get outputSubject() {\n\t\treturn new TestOutputSubject(this.results, this.taskIndex, this.test);\n\t}\n\n\tconstructor(\n\t\tpublic readonly results: ITestResult,\n\t\tpublic readonly test: TestResultItem,\n\t\tpublic readonly taskIndex: number,\n\t) {}\n}\n\nclass TaskElement implements ITreeElement {\n\tpublic readonly changeEmitter = new Emitter<void>();\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\tpublic readonly type = \"task\";\n\tpublic readonly context: { resultId: string; taskId: string };\n\tpublic readonly id: string;\n\tpublic readonly label: string;\n\tpublic readonly itemsCache = new CreationCache<TestCaseElement>();\n\n\tpublic get icon() {\n\t\treturn this.results.tasks[this.index].running\n\t\t\t? icons.testingStatesToIcons.get(TestResultState.Running)\n\t\t\t: undefined;\n\t}\n\n\tconstructor(\n\t\tpublic readonly results: ITestResult,\n\t\tpublic readonly task: ITestRunTaskResults,\n\t\tpublic readonly index: number,\n\t) {\n\t\tthis.id = `${results.id}/${index}`;\n\t\tthis.task = results.tasks[index];\n\t\tthis.context = { resultId: results.id, taskId: this.task.id };\n\t\tthis.label = this.task.name;\n\t}\n}\n\nclass TestMessageElement implements ITreeElement {\n\tpublic readonly type = \"message\";\n\tpublic readonly id: string;\n\tpublic readonly label: string;\n\tpublic readonly uri: URI;\n\tpublic readonly location?: IRichLocation;\n\tpublic readonly description?: string;\n\tpublic readonly contextValue?: string;\n\tpublic readonly message: ITestMessage;\n\n\tpublic get onDidChange() {\n\t\tif (!(this.result instanceof LiveTestResult)) {\n\t\t\treturn Event.None;\n\t\t}\n\n\t\t// rerender when the test case changes so it gets retired events\n\t\treturn Event.filter(\n\t\t\tthis.result.onChange,\n\t\t\t(e) => e.item.item.extId === this.test.item.extId,\n\t\t);\n\t}\n\n\tpublic get context(): ITestMessageMenuArgs {\n\t\treturn getMessageArgs(this.test, this.message);\n\t}\n\n\tpublic get outputSubject() {\n\t\treturn new TestOutputSubject(this.result, this.taskIndex, this.test);\n\t}\n\n\tconstructor(\n\t\tpublic readonly result: ITestResult,\n\t\tpublic readonly test: TestResultItem,\n\t\tpublic readonly taskIndex: number,\n\t\tpublic readonly messageIndex: number,\n\t) {\n\t\tconst m = (this.message = test.tasks[taskIndex].messages[messageIndex]);\n\n\t\tthis.location = m.location;\n\t\tthis.contextValue =\n\t\t\tm.type === TestMessageType.Error ? m.contextValue : undefined;\n\t\tthis.uri = buildTestUri({\n\t\t\ttype: TestUriType.ResultMessage,\n\t\t\tmessageIndex,\n\t\t\tresultId: result.id,\n\t\t\ttaskIndex,\n\t\t\ttestExtId: test.item.extId,\n\t\t});\n\n\t\tthis.id = this.uri.toString();\n\n\t\tconst asPlaintext = renderTestMessageAsText(m.message);\n\t\tconst lines = count(asPlaintext.trimEnd(), \"\\n\");\n\t\tthis.label = firstLine(asPlaintext);\n\t\tif (lines > 0) {\n\t\t\tthis.description =\n\t\t\t\tlines > 1\n\t\t\t\t\t? localize(\"messageMoreLinesN\", \"+ {0} more lines\", lines)\n\t\t\t\t\t: localize(\"messageMoreLines1\", \"+ 1 more line\");\n\t\t}\n\t}\n}\n\ntype TreeElement =\n\t| TestResultElement\n\t| TestCaseElement\n\t| TestMessageElement\n\t| TaskElement\n\t| CoverageElement\n\t| OlderResultsElement;\n\nexport class OutputPeekTree extends Disposable {\n\tprivate disposed = false;\n\tprivate readonly tree: WorkbenchCompressibleObjectTree<\n\t\tTreeElement,\n\t\tFuzzyScore\n\t>;\n\tprivate readonly treeActions: TreeActionsProvider;\n\tprivate readonly requestReveal = this._register(\n\t\tnew Emitter<InspectSubject>(),\n\t);\n\n\tpublic readonly onDidRequestReview = this.requestReveal.event;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tonDidReveal: Event<{ subject: InspectSubject; preserveFocus: boolean }>,\n\t\toptions: {\n\t\t\tshowRevealLocationOnMessages: boolean;\n\t\t\tlocationForProgress: string;\n\t\t},\n\t\t@IContextMenuService\n\t\tprivate readonly contextMenuService: IContextMenuService,\n\t\t@ITestResultService results: ITestResultService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITestExplorerFilterState explorerFilter: ITestExplorerFilterState,\n\t\t@ITestCoverageService coverageService: ITestCoverageService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis.treeActions = instantiationService.createInstance(\n\t\t\tTreeActionsProvider,\n\t\t\toptions.showRevealLocationOnMessages,\n\t\t\tthis.requestReveal,\n\t\t);\n\t\tconst diffIdentityProvider: IIdentityProvider<TreeElement> = {\n\t\t\tgetId(e: TreeElement) {\n\t\t\t\treturn e.id;\n\t\t\t},\n\t\t};\n\n\t\tthis.tree = this._register(\n\t\t\tinstantiationService.createInstance(\n\t\t\t\tWorkbenchCompressibleObjectTree,\n\t\t\t\t\"Test Output Peek\",\n\t\t\t\tcontainer,\n\t\t\t\t{\n\t\t\t\t\tgetHeight: () => 22,\n\t\t\t\t\tgetTemplateId: () => TestRunElementRenderer.ID,\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\t\tTestRunElementRenderer,\n\t\t\t\t\t\tthis.treeActions,\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tcompressionEnabled: true,\n\t\t\t\t\thideTwistiesOfChildlessElements: true,\n\t\t\t\t\tidentityProvider: diffIdentityProvider,\n\t\t\t\t\tsorter: {\n\t\t\t\t\t\tcompare(a, b) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ta instanceof TestCaseElement &&\n\t\t\t\t\t\t\t\tb instanceof TestCaseElement\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn cmpPriority(a.state, b.state);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\taccessibilityProvider: {\n\t\t\t\t\t\tgetAriaLabel(element: ITreeElement) {\n\t\t\t\t\t\t\treturn element.ariaLabel || element.label;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetWidgetAriaLabel() {\n\t\t\t\t\t\t\treturn localize(\n\t\t\t\t\t\t\t\t\"testingPeekLabel\",\n\t\t\t\t\t\t\t\t\"Test Result Messages\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t) as WorkbenchCompressibleObjectTree<TreeElement, FuzzyScore>;\n\n\t\tconst cc = new CreationCache<TreeElement>();\n\n\t\tconst getTaskChildren = (\n\t\t\ttaskElem: TaskElement,\n\t\t): Iterable<ICompressedTreeElement<TreeElement>> => {\n\t\t\tconst { results, index, itemsCache, task } = taskElem;\n\t\t\tconst tests = Iterable.filter(\n\t\t\t\tresults.tests,\n\t\t\t\t(test) =>\n\t\t\t\t\ttest.tasks[index].state >= TestResultState.Running ||\n\t\t\t\t\ttest.tasks[index].messages.length > 0,\n\t\t\t);\n\t\t\tlet result: Iterable<ICompressedTreeElement<TreeElement>> =\n\t\t\t\tIterable.map(tests, (test) => ({\n\t\t\t\t\telement: itemsCache.getOrCreate(\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\t() => new TestCaseElement(results, test, index),\n\t\t\t\t\t),\n\t\t\t\t\tincompressible: true,\n\t\t\t\t\tchildren: getTestChildren(results, test, index),\n\t\t\t\t}));\n\n\t\t\tif (task.coverage.get()) {\n\t\t\t\tresult = Iterable.concat(\n\t\t\t\t\tIterable.single<ICompressedTreeElement<TreeElement>>({\n\t\t\t\t\t\telement: new CoverageElement(\n\t\t\t\t\t\t\tresults,\n\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\tcoverageService,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcollapsible: true,\n\t\t\t\t\t\tincompressible: true,\n\t\t\t\t\t}),\n\t\t\t\t\tresult,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tconst getTestChildren = (\n\t\t\tresult: ITestResult,\n\t\t\ttest: TestResultItem,\n\t\t\ttaskIndex: number,\n\t\t): Iterable<ICompressedTreeElement<TreeElement>> => {\n\t\t\treturn test.tasks[taskIndex].messages\n\t\t\t\t.map((m, messageIndex) =>\n\t\t\t\t\tm.type === TestMessageType.Error\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\telement: cc.getOrCreate(\n\t\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\tnew TestMessageElement(\n\t\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\t\ttest,\n\t\t\t\t\t\t\t\t\t\t\ttaskIndex,\n\t\t\t\t\t\t\t\t\t\t\tmessageIndex,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tincompressible: false,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\t)\n\t\t\t\t.filter(isDefined);\n\t\t};\n\n\t\tconst getResultChildren = (\n\t\t\tresult: ITestResult,\n\t\t): ICompressedTreeElement<TreeElement>[] => {\n\t\t\treturn result.tasks.map((task, taskIndex) => {\n\t\t\t\tconst taskElem = cc.getOrCreate(\n\t\t\t\t\ttask,\n\t\t\t\t\t() => new TaskElement(result, task, taskIndex),\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\telement: taskElem,\n\t\t\t\t\tincompressible: false,\n\t\t\t\t\tcollapsible: true,\n\t\t\t\t\tchildren: getTaskChildren(taskElem),\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\n\t\tconst getRootChildren = (): Iterable<\n\t\t\tICompressedTreeElement<TreeElement>\n\t\t> => {\n\t\t\tlet children: ICompressedTreeElement<TreeElement>[] = [];\n\n\t\t\tconst older = [];\n\n\t\t\tfor (const result of results.results) {\n\t\t\t\tif (!children.length && result.tasks.length) {\n\t\t\t\t\tchildren = getResultChildren(result);\n\t\t\t\t} else if (children) {\n\t\t\t\t\tconst element = cc.getOrCreate(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\t() => new TestResultElement(result),\n\t\t\t\t\t);\n\t\t\t\t\tolder.push({\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tincompressible: true,\n\t\t\t\t\t\tcollapsible: true,\n\t\t\t\t\t\tcollapsed: this.tree.hasElement(element)\n\t\t\t\t\t\t\t? this.tree.isCollapsed(element)\n\t\t\t\t\t\t\t: true,\n\t\t\t\t\t\tchildren: getResultChildren(result),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!children.length) {\n\t\t\t\treturn older;\n\t\t\t}\n\n\t\t\tif (older.length) {\n\t\t\t\tchildren.push({\n\t\t\t\t\telement: new OlderResultsElement(older.length),\n\t\t\t\t\tincompressible: true,\n\t\t\t\t\tcollapsible: true,\n\t\t\t\t\tcollapsed: true,\n\t\t\t\t\tchildren: older,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn children;\n\t\t};\n\n\t\t// Queued result updates to prevent spamming CPU when lots of tests are\n\t\t// completing and messaging quickly (#142514)\n\t\tconst taskChildrenToUpdate = new Set<TaskElement>();\n\t\tconst taskChildrenUpdate = this._register(\n\t\t\tnew RunOnceScheduler(() => {\n\t\t\t\tfor (const taskNode of taskChildrenToUpdate) {\n\t\t\t\t\tif (this.tree.hasElement(taskNode)) {\n\t\t\t\t\t\tthis.tree.setChildren(\n\t\t\t\t\t\t\ttaskNode,\n\t\t\t\t\t\t\tgetTaskChildren(taskNode),\n\t\t\t\t\t\t\t{ diffIdentityProvider },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttaskChildrenToUpdate.clear();\n\t\t\t}, 300),\n\t\t);\n\n\t\tconst queueTaskChildrenUpdate = (taskNode: TaskElement) => {\n\t\t\ttaskChildrenToUpdate.add(taskNode);\n\t\t\tif (!taskChildrenUpdate.isScheduled()) {\n\t\t\t\ttaskChildrenUpdate.schedule();\n\t\t\t}\n\t\t};\n\n\t\tconst attachToResults = (result: LiveTestResult) => {\n\t\t\tconst disposable = new DisposableStore();\n\t\t\tdisposable.add(\n\t\t\t\tresult.onNewTask((i) => {\n\t\t\t\t\tthis.tree.setChildren(null, getRootChildren(), {\n\t\t\t\t\t\tdiffIdentityProvider,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (result.tasks.length === 1) {\n\t\t\t\t\t\tthis.requestReveal.fire(new TaskSubject(result, 0)); // reveal the first task in new runs\n\t\t\t\t\t}\n\n\t\t\t\t\t// note: tasks are bounded and their lifetime is equivalent to that of\n\t\t\t\t\t// the test result, so this doesn't leak indefinitely.\n\t\t\t\t\tconst task = result.tasks[i];\n\t\t\t\t\tdisposable.add(\n\t\t\t\t\t\tautorun((reader) => {\n\t\t\t\t\t\t\ttask.coverage.read(reader); // add it to the autorun\n\t\t\t\t\t\t\tqueueTaskChildrenUpdate(\n\t\t\t\t\t\t\t\tcc.get(task) as TaskElement,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposable.add(\n\t\t\t\tresult.onEndTask((index) => {\n\t\t\t\t\t(\n\t\t\t\t\t\tcc.get(result.tasks[index]) as TaskElement | undefined\n\t\t\t\t\t)?.changeEmitter.fire();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposable.add(\n\t\t\t\tresult.onChange((e) => {\n\t\t\t\t\t// try updating the item in each of its tasks\n\t\t\t\t\tfor (const [index, task] of result.tasks.entries()) {\n\t\t\t\t\t\tconst taskNode = cc.get(task) as TaskElement;\n\t\t\t\t\t\tif (!this.tree.hasElement(taskNode)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst itemNode = taskNode.itemsCache.get(e.item);\n\t\t\t\t\t\tif (itemNode && this.tree.hasElement(itemNode)) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\te.reason ===\n\t\t\t\t\t\t\t\t\tTestResultItemChangeReason.NewMessage &&\n\t\t\t\t\t\t\t\te.message.type === TestMessageType.Error\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.tree.setChildren(\n\t\t\t\t\t\t\t\t\titemNode,\n\t\t\t\t\t\t\t\t\tgetTestChildren(result, e.item, index),\n\t\t\t\t\t\t\t\t\t{ diffIdentityProvider },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqueueTaskChildrenUpdate(taskNode);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposable.add(\n\t\t\t\tresult.onComplete(() => {\n\t\t\t\t\t(\n\t\t\t\t\t\tcc.get(result) as TestResultElement | undefined\n\t\t\t\t\t)?.changeEmitter.fire();\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t}),\n\t\t\t);\n\t\t};\n\n\t\tthis._register(\n\t\t\tresults.onResultsChanged((e) => {\n\t\t\t\t// little hack here: a result change can cause the peek to be disposed,\n\t\t\t\t// but this listener will still be queued. Doing stuff with the tree\n\t\t\t\t// will cause errors.\n\t\t\t\tif (this.disposed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\"completed\" in e) {\n\t\t\t\t\t(\n\t\t\t\t\t\tcc.get(e.completed) as TestResultElement | undefined\n\t\t\t\t\t)?.changeEmitter.fire();\n\t\t\t\t} else if (\"started\" in e) {\n\t\t\t\t\tattachToResults(e.started);\n\t\t\t\t} else {\n\t\t\t\t\tthis.tree.setChildren(null, getRootChildren(), {\n\t\t\t\t\t\tdiffIdentityProvider,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst revealItem = (element: TreeElement, preserveFocus: boolean) => {\n\t\t\tthis.tree.setFocus([element]);\n\t\t\tthis.tree.setSelection([element]);\n\t\t\tif (!preserveFocus) {\n\t\t\t\tthis.tree.domFocus();\n\t\t\t}\n\t\t};\n\n\t\tthis._register(\n\t\t\tonDidReveal(async ({ subject, preserveFocus = false }) => {\n\t\t\t\tif (subject instanceof TaskSubject) {\n\t\t\t\t\tconst resultItem = this.tree\n\t\t\t\t\t\t.getNode(null)\n\t\t\t\t\t\t.children.find((c) => {\n\t\t\t\t\t\t\tif (c.element instanceof TaskElement) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tc.element.results.id ===\n\t\t\t\t\t\t\t\t\t\tsubject.result.id &&\n\t\t\t\t\t\t\t\t\tc.element.index === subject.taskIndex\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (c.element instanceof TestResultElement) {\n\t\t\t\t\t\t\t\treturn c.element.id === subject.result.id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t});\n\n\t\t\t\t\tif (resultItem) {\n\t\t\t\t\t\trevealItem(resultItem.element!, preserveFocus);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst revealElement =\n\t\t\t\t\tsubject instanceof TestOutputSubject\n\t\t\t\t\t\t? cc\n\t\t\t\t\t\t\t\t.get<TaskElement>(subject.task)\n\t\t\t\t\t\t\t\t?.itemsCache.get(subject.test)\n\t\t\t\t\t\t: cc.get(subject.message);\n\t\t\t\tif (!revealElement || !this.tree.hasElement(revealElement)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parents: TreeElement[] = [];\n\t\t\t\tfor (\n\t\t\t\t\tlet parent = this.tree.getParentElement(revealElement);\n\t\t\t\t\tparent;\n\t\t\t\t\tparent = this.tree.getParentElement(parent)\n\t\t\t\t) {\n\t\t\t\t\tparents.unshift(parent);\n\t\t\t\t}\n\n\t\t\t\tfor (const parent of parents) {\n\t\t\t\t\tthis.tree.expand(parent);\n\t\t\t\t}\n\n\t\t\t\tif (this.tree.getRelativeTop(revealElement) === null) {\n\t\t\t\t\tthis.tree.reveal(revealElement, 0.5);\n\t\t\t\t}\n\n\t\t\t\trevealItem(revealElement, preserveFocus);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.tree.onDidOpen(async (e) => {\n\t\t\t\tif (e.element instanceof TestMessageElement) {\n\t\t\t\t\tthis.requestReveal.fire(\n\t\t\t\t\t\tnew MessageSubject(\n\t\t\t\t\t\t\te.element.result,\n\t\t\t\t\t\t\te.element.test,\n\t\t\t\t\t\t\te.element.taskIndex,\n\t\t\t\t\t\t\te.element.messageIndex,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else if (e.element instanceof TestCaseElement) {\n\t\t\t\t\tconst t = e.element;\n\t\t\t\t\tconst message = mapFindTestMessage(\n\t\t\t\t\t\te.element.test,\n\t\t\t\t\t\t(_t, _m, mesasgeIndex, taskIndex) =>\n\t\t\t\t\t\t\tnew MessageSubject(\n\t\t\t\t\t\t\t\tt.results,\n\t\t\t\t\t\t\t\tt.test,\n\t\t\t\t\t\t\t\ttaskIndex,\n\t\t\t\t\t\t\t\tmesasgeIndex,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis.requestReveal.fire(\n\t\t\t\t\t\tmessage || new TestOutputSubject(t.results, 0, t.test),\n\t\t\t\t\t);\n\t\t\t\t} else if (e.element instanceof CoverageElement) {\n\t\t\t\t\tconst task = e.element.task;\n\t\t\t\t\tif (e.element.isOpen) {\n\t\t\t\t\t\treturn coverageService.closeCoverage();\n\t\t\t\t\t}\n\t\t\t\t\tprogressService.withProgress(\n\t\t\t\t\t\t{ location: options.locationForProgress },\n\t\t\t\t\t\t() => coverageService.openCoverage(task, true),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.tree.onDidChangeSelection((evt) => {\n\t\t\t\tfor (const element of evt.elements) {\n\t\t\t\t\tif (element && \"test\" in element) {\n\t\t\t\t\t\texplorerFilter.reveal.value = element.test.item.extId;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(this.tree.onContextMenu((e) => this.onContextMenu(e)));\n\n\t\tthis._register(\n\t\t\tthis.tree.onDidChangeCollapseState((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.node.element instanceof OlderResultsElement &&\n\t\t\t\t\t!e.node.collapsed\n\t\t\t\t) {\n\t\t\t\t\ttelemetryService.publicLog2<\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\towner: \"connor4312\";\n\t\t\t\t\t\t\t// we're considering removing or depromoting this feature because we don't think it's used:\n\t\t\t\t\t\t\tcomment: \"Records that test history was used\";\n\t\t\t\t\t\t}\n\t\t\t\t\t>(\"testing.expandOlderResults\");\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.tree.setChildren(null, getRootChildren());\n\t\tfor (const result of results.results) {\n\t\t\tif (!result.completedAt && result instanceof LiveTestResult) {\n\t\t\t\tattachToResults(result);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic layout(height: number, width: number) {\n\t\tthis.tree.layout(height, width);\n\t}\n\n\tprivate onContextMenu(evt: ITreeContextMenuEvent<ITreeElement | null>) {\n\t\tif (!evt.element) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions = this.treeActions.provideActionBar(evt.element);\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => evt.anchor,\n\t\t\tgetActions: () =>\n\t\t\t\tactions.secondary.length\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t...actions.primary,\n\t\t\t\t\t\t\tnew Separator(),\n\t\t\t\t\t\t\t...actions.secondary,\n\t\t\t\t\t\t]\n\t\t\t\t\t: actions.primary,\n\t\t\tgetActionsContext: () => evt.element?.context,\n\t\t});\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tthis.disposed = true;\n\t}\n}\n\ninterface TemplateData {\n\tlabel: HTMLElement;\n\ticon: HTMLElement;\n\tactionBar: ActionBar;\n\telementDisposable: DisposableStore;\n\ttemplateDisposable: DisposableStore;\n}\n\nclass TestRunElementRenderer\n\timplements ICompressibleTreeRenderer<ITreeElement, FuzzyScore, TemplateData>\n{\n\tpublic static readonly ID = \"testRunElementRenderer\";\n\tpublic readonly templateId = TestRunElementRenderer.ID;\n\n\tconstructor(\n\t\tprivate readonly treeActions: TreeActionsProvider,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {}\n\n\t/** @inheritdoc */\n\tpublic renderCompressedElements(\n\t\tnode: ITreeNode<ICompressedTreeNode<ITreeElement>, FuzzyScore>,\n\t\t_index: number,\n\t\ttemplateData: TemplateData,\n\t): void {\n\t\tconst chain = node.element.elements;\n\t\tconst lastElement = chain[chain.length - 1];\n\t\tif (\n\t\t\t(lastElement instanceof TaskElement ||\n\t\t\t\tlastElement instanceof TestMessageElement) &&\n\t\t\tchain.length >= 2\n\t\t) {\n\t\t\tthis.doRender(chain[chain.length - 2], templateData, lastElement);\n\t\t} else {\n\t\t\tthis.doRender(lastElement, templateData);\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderTemplate(container: HTMLElement): TemplateData {\n\t\tconst templateDisposable = new DisposableStore();\n\t\tconst wrapper = dom.append(container, dom.$(\".test-peek-item\"));\n\t\tconst icon = dom.append(wrapper, dom.$(\".state\"));\n\t\tconst label = dom.append(wrapper, dom.$(\".name\"));\n\n\t\tconst actionBar = new ActionBar(wrapper, {\n\t\t\tactionViewItemProvider: (action, options) =>\n\t\t\t\taction instanceof MenuItemAction\n\t\t\t\t\t? this.instantiationService.createInstance(\n\t\t\t\t\t\t\tMenuEntryActionViewItem,\n\t\t\t\t\t\t\taction,\n\t\t\t\t\t\t\t{ hoverDelegate: options.hoverDelegate },\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t});\n\n\t\tconst elementDisposable = new DisposableStore();\n\t\ttemplateDisposable.add(elementDisposable);\n\t\ttemplateDisposable.add(actionBar);\n\n\t\treturn {\n\t\t\ticon,\n\t\t\tlabel,\n\t\t\tactionBar,\n\t\t\telementDisposable,\n\t\t\ttemplateDisposable,\n\t\t};\n\t}\n\n\t/** @inheritdoc */\n\tpublic renderElement(\n\t\telement: ITreeNode<ITreeElement, FuzzyScore>,\n\t\t_index: number,\n\t\ttemplateData: TemplateData,\n\t): void {\n\t\tthis.doRender(element.element, templateData);\n\t}\n\n\t/** @inheritdoc */\n\tpublic disposeTemplate(templateData: TemplateData): void {\n\t\ttemplateData.templateDisposable.dispose();\n\t}\n\n\t/** Called to render a new element */\n\tprivate doRender(\n\t\telement: ITreeElement,\n\t\ttemplateData: TemplateData,\n\t\tsubjectElement?: ITreeElement,\n\t) {\n\t\ttemplateData.elementDisposable.clear();\n\t\ttemplateData.elementDisposable.add(\n\t\t\telement.onDidChange(() =>\n\t\t\t\tthis.doRender(element, templateData, subjectElement),\n\t\t\t),\n\t\t);\n\t\tthis.doRenderInner(element, templateData, subjectElement);\n\t}\n\n\t/** Called, and may be re-called, to render or re-render an element */\n\tprivate doRenderInner(\n\t\telement: ITreeElement,\n\t\ttemplateData: TemplateData,\n\t\tsubjectElement: ITreeElement | undefined,\n\t) {\n\t\tlet { label, labelWithIcons, description } = element;\n\t\tif (subjectElement instanceof TestMessageElement) {\n\t\t\tdescription = subjectElement.label;\n\t\t}\n\n\t\tconst descriptionElement = description\n\t\t\t? dom.$(\"span.test-label-description\", {}, description)\n\t\t\t: \"\";\n\t\tif (labelWithIcons) {\n\t\t\tdom.reset(\n\t\t\t\ttemplateData.label,\n\t\t\t\t...labelWithIcons,\n\t\t\t\tdescriptionElement,\n\t\t\t);\n\t\t} else {\n\t\t\tdom.reset(templateData.label, label, descriptionElement);\n\t\t}\n\n\t\tconst icon = element.icon;\n\t\ttemplateData.icon.className = `computed-state ${icon ? ThemeIcon.asClassName(icon) : \"\"}`;\n\n\t\tconst actions = this.treeActions.provideActionBar(element);\n\t\ttemplateData.actionBar.clear();\n\t\ttemplateData.actionBar.context = element.context;\n\t\ttemplateData.actionBar.push(actions.primary, {\n\t\t\ticon: true,\n\t\t\tlabel: false,\n\t\t});\n\t}\n}\n\nclass TreeActionsProvider {\n\tconstructor(\n\t\tprivate readonly showRevealLocationOnMessages: boolean,\n\t\tprivate readonly requestReveal: Emitter<InspectSubject>,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@ITestProfileService\n\t\tprivate readonly testProfileService: ITestProfileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) {}\n\n\tpublic provideActionBar(element: ITreeElement) {\n\t\tconst test =\n\t\t\telement instanceof TestCaseElement ? element.test : undefined;\n\t\tconst capabilities = test\n\t\t\t? this.testProfileService.capabilitiesForTest(test.item)\n\t\t\t: 0;\n\n\t\tconst contextKeys: [string, unknown][] = [\n\t\t\t[\"peek\", Testing.OutputPeekContributionId],\n\t\t\t[TestingContextKeys.peekItemType.key, element.type],\n\t\t];\n\n\t\tlet id = MenuId.TestPeekElement;\n\t\tconst primary: IAction[] = [];\n\t\tconst secondary: IAction[] = [];\n\n\t\tif (element instanceof TaskElement) {\n\t\t\tprimary.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"testing.outputPeek.showResultOutput\",\n\t\t\t\t\tlocalize(\"testing.showResultOutput\", \"Show Result Output\"),\n\t\t\t\t\tThemeIcon.asClassName(Codicon.terminal),\n\t\t\t\t\tundefined,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.requestReveal.fire(\n\t\t\t\t\t\t\tnew TaskSubject(element.results, element.index),\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (element.task.running) {\n\t\t\t\tprimary.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\"testing.outputPeek.cancel\",\n\t\t\t\t\t\tlocalize(\"testing.cancelRun\", \"Cancel Test Run\"),\n\t\t\t\t\t\tThemeIcon.asClassName(icons.testingCancelIcon),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\tTestCommandId.CancelTestRunAction,\n\t\t\t\t\t\t\t\telement.results.id,\n\t\t\t\t\t\t\t\telement.task.id,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (element instanceof TestResultElement) {\n\t\t\t// only show if there are no collapsed test nodes that have more specific choices\n\t\t\tif (element.value.tasks.length === 1) {\n\t\t\t\tprimary.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\"testing.outputPeek.showResultOutput\",\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"testing.showResultOutput\",\n\t\t\t\t\t\t\t\"Show Result Output\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tThemeIcon.asClassName(Codicon.terminal),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.requestReveal.fire(\n\t\t\t\t\t\t\t\tnew TaskSubject(element.value, 0),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tprimary.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"testing.outputPeek.reRunLastRun\",\n\t\t\t\t\tlocalize(\"testing.reRunLastRun\", \"Rerun Test Run\"),\n\t\t\t\t\tThemeIcon.asClassName(icons.testingRunIcon),\n\t\t\t\t\tundefined,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\"testing.reRunLastRun\",\n\t\t\t\t\t\t\telement.value.id,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (capabilities & TestRunProfileBitset.Debug) {\n\t\t\t\tprimary.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\"testing.outputPeek.debugLastRun\",\n\t\t\t\t\t\tlocalize(\"testing.debugLastRun\", \"Debug Test Run\"),\n\t\t\t\t\t\tThemeIcon.asClassName(icons.testingDebugIcon),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\t\"testing.debugLastRun\",\n\t\t\t\t\t\t\t\telement.value.id,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\telement instanceof TestCaseElement ||\n\t\t\telement instanceof TestMessageElement\n\t\t) {\n\t\t\tcontextKeys.push(\n\t\t\t\t[\n\t\t\t\t\tTestingContextKeys.testResultOutdated.key,\n\t\t\t\t\telement.test.retired,\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestingContextKeys.testResultState.key,\n\t\t\t\t\ttestResultStateToContextValues[\n\t\t\t\t\t\telement.test.ownComputedState\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t...getTestItemContextOverlay(element.test, capabilities),\n\t\t\t);\n\n\t\t\tconst extId = element.test.item.extId;\n\t\t\tif (\n\t\t\t\telement.test.tasks[element.taskIndex].messages.some(\n\t\t\t\t\t(m) => m.type === TestMessageType.Output,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tprimary.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\"testing.outputPeek.showResultOutput\",\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"testing.showResultOutput\",\n\t\t\t\t\t\t\t\"Show Result Output\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tThemeIcon.asClassName(Codicon.terminal),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() => this.requestReveal.fire(element.outputSubject),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tsecondary.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"testing.outputPeek.revealInExplorer\",\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"testing.revealInExplorer\",\n\t\t\t\t\t\t\"Reveal in Test Explorer\",\n\t\t\t\t\t),\n\t\t\t\t\tThemeIcon.asClassName(Codicon.listTree),\n\t\t\t\t\tundefined,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\"_revealTestInExplorer\",\n\t\t\t\t\t\t\textId,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (capabilities & TestRunProfileBitset.Run) {\n\t\t\t\tprimary.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\"testing.outputPeek.runTest\",\n\t\t\t\t\t\tlocalize(\"run test\", \"Run Test\"),\n\t\t\t\t\t\tThemeIcon.asClassName(icons.testingRunIcon),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\t\"vscode.runTestsById\",\n\t\t\t\t\t\t\t\tTestRunProfileBitset.Run,\n\t\t\t\t\t\t\t\textId,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (capabilities & TestRunProfileBitset.Debug) {\n\t\t\t\tprimary.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\"testing.outputPeek.debugTest\",\n\t\t\t\t\t\tlocalize(\"debug test\", \"Debug Test\"),\n\t\t\t\t\t\tThemeIcon.asClassName(icons.testingDebugIcon),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\t\"vscode.runTestsById\",\n\t\t\t\t\t\t\t\tTestRunProfileBitset.Debug,\n\t\t\t\t\t\t\t\textId,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (element instanceof TestMessageElement) {\n\t\t\tid = MenuId.TestMessageContext;\n\t\t\tcontextKeys.push([\n\t\t\t\tTestingContextKeys.testMessageContext.key,\n\t\t\t\telement.contextValue,\n\t\t\t]);\n\n\t\t\tprimary.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"testing.outputPeek.goToTest\",\n\t\t\t\t\tlocalize(\"testing.goToTest\", \"Go to Test\"),\n\t\t\t\t\tThemeIcon.asClassName(Codicon.goToFile),\n\t\t\t\t\tundefined,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\"vscode.revealTest\",\n\t\t\t\t\t\t\telement.test.item.extId,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (this.showRevealLocationOnMessages && element.location) {\n\t\t\t\tprimary.push(\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\"testing.outputPeek.goToError\",\n\t\t\t\t\t\tlocalize(\"testing.goToError\", \"Go to Error\"),\n\t\t\t\t\t\tThemeIcon.asClassName(Codicon.goToFile),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\t\t\t\tresource: element.location!.uri,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tselection: element.location!.range,\n\t\t\t\t\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst contextOverlay =\n\t\t\tthis.contextKeyService.createOverlay(contextKeys);\n\t\tconst result = { primary, secondary };\n\t\tconst menu = this.menuService.getMenuActions(id, contextOverlay, {\n\t\t\targ: element.context,\n\t\t});\n\t\tcreateAndFillInActionBarActions(menu, result, \"inline\");\n\t\treturn result;\n\t}\n}\n\nclass CreationCache<T> {\n\tprivate readonly v = new WeakMap<object, T>();\n\n\tpublic get<T2 extends T = T>(key: object): T2 | undefined {\n\t\treturn this.v.get(key) as T2 | undefined;\n\t}\n\n\tpublic getOrCreate<T2 extends T>(ref: object, factory: () => T2): T2 {\n\t\tconst existing = this.v.get(ref);\n\t\tif (existing) {\n\t\t\treturn existing as T2;\n\t\t}\n\n\t\tconst fresh = factory();\n\t\tthis.v.set(ref, fresh);\n\t\treturn fresh;\n\t}\n}\n\nconst firstLine = (str: string) => {\n\tconst index = str.indexOf(\"\\n\");\n\treturn index === -1 ? str : str.slice(0, index);\n};\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,iBAAiB;AAC1B,SAAS,4BAA4B;AAWrC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,wBAAwB;AACjC,SAAS,eAAe;AACxB,SAAS,SAAS,aAAa;AAE/B,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,oBAAoB;AAC7B,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAE1B,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AACnC,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC,SAAS,uCAAuC;AAChD,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,eAAe,eAAe;AACvC,SAAS,4BAA4B;AACrC,SAAS,gCAAgC;AACzC,SAAS,2BAA2B;AACpC;AAAA,EAGC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC;AAAA,EAKC;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC,SAAS,mBAAmB;AAC5B,SAAS,aAAa,oBAAoB;AAC1C,SAAS,iCAAiC;AAC1C,YAAY,WAAW;AACvB,SAAS,+BAA+B;AACxC;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AA0BP,MAAM,kBAA0C;AAAA,EAgB/C,YAA4B,OAAoB;AAApB;AAAA,EAAqB;AAAA,EAxIlD,OAwHgD;AAAA;AAAA;AAAA,EAC/B,gBAAgB,IAAI,QAAc;AAAA,EAClC,cAAc,KAAK,cAAc;AAAA,EACjC,OAAO;AAAA,EACP,UAAU,KAAK,MAAM;AAAA,EACrB,KAAK,KAAK,MAAM;AAAA,EAChB,QAAQ,KAAK,MAAM;AAAA,EAEnC,IAAW,OAAO;AACjB,WAAO,MAAM,qBAAqB;AAAA,MACjC,KAAK,MAAM,gBAAgB,SACxB,gBAAgB,UAChB,iBAAiB,KAAK,MAAM,MAAM;AAAA,IACtC;AAAA,EACD;AAGD;AAEA,MAAM,oBAAoB,SAAS,oBAAoB,oBAAoB;AAC3E,MAAM,qBAAqB,SAAS,qBAAqB,qBAAqB;AAE9E,MAAM,gBAAwC;AAAA,EAkB7C,YACkB,SACD,MACC,iBAChB;AAHgB;AACD;AACC;AAEjB,SAAK,cAAc,MAAM,oBAAoB,gBAAgB,QAAQ;AAAA,EACtE;AAAA,EAtKD,OA8I8C;AAAA;AAAA;AAAA,EAC7B,OAAO;AAAA,EACP;AAAA,EACA,KAAK,YAAY,KAAK,QAAQ,EAAE,IAAI,KAAK,KAAK,EAAE;AAAA,EAChD;AAAA,EAEhB,IAAW,QAAQ;AAClB,WAAO,KAAK,SAAS,qBAAqB;AAAA,EAC3C;AAAA,EAEA,IAAW,OAAO;AACjB,WAAO,KAAK,SAAS,cAAc,MAAM;AAAA,EAC1C;AAAA,EAEA,IAAW,SAAS;AACnB,WAAO,KAAK,gBAAgB,SAAS,IAAI,GAAG,eAAe,KAAK,KAAK;AAAA,EACtE;AASD;AAEA,MAAM,oBAA4C;AAAA,EAOjD,YAA6B,GAAW;AAAX;AAC5B,SAAK,QAAQ,SAAS,iBAAiB,qBAAqB,CAAC;AAAA,EAC9D;AAAA,EAlLD,OAyKkD;AAAA;AAAA;AAAA,EACjC,OAAO;AAAA,EACP;AAAA,EACA,KAAK,SAAS,KAAK,CAAC;AAAA,EACpB,cAAc,MAAM;AAAA,EACpB;AAKjB;AAEA,MAAM,gBAAwC;AAAA,EAwC7C,YACiB,SACA,MACA,WACf;AAHe;AACA;AACA;AAAA,EACd;AAAA,EAjOJ,OAqL8C;AAAA;AAAA;AAAA,EAC7B,OAAO;AAAA,EACP,UAA4B;AAAA,IAC3C,MAAM,aAAa;AAAA,IACnB,OAAO,CAAC,iBAAiB,UAAU,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EACgB,KAAK,GAAG,KAAK,QAAQ,EAAE,IAAI,KAAK,KAAK,KAAK,KAAK;AAAA,EAC/C;AAAA,EAEhB,IAAW,cAAc;AACxB,QAAI,EAAE,KAAK,mBAAmB,iBAAiB;AAC9C,aAAO,MAAM;AAAA,IACd;AAEA,WAAO,MAAM;AAAA,MACZ,KAAK,QAAQ;AAAA,MACb,CAAC,MAAM,EAAE,KAAK,KAAK,UAAU,KAAK,KAAK,KAAK;AAAA,IAC7C;AAAA,EACD;AAAA,EAEA,IAAW,QAAQ;AAClB,WAAO,KAAK,KAAK,MAAM,KAAK,SAAS,EAAE;AAAA,EACxC;AAAA,EAEA,IAAW,QAAQ;AAClB,WAAO,KAAK,KAAK,KAAK;AAAA,EACvB;AAAA,EAEA,IAAW,iBAAiB;AAC3B,WAAO,qBAAqB,KAAK,KAAK;AAAA,EACvC;AAAA,EAEA,IAAW,OAAO;AACjB,WAAO,MAAM,qBAAqB,IAAI,KAAK,KAAK;AAAA,EACjD;AAAA,EAEA,IAAW,gBAAgB;AAC1B,WAAO,IAAI,kBAAkB,KAAK,SAAS,KAAK,WAAW,KAAK,IAAI;AAAA,EACrE;AAOD;AAEA,MAAM,YAAoC;AAAA,EAezC,YACiB,SACA,MACA,OACf;AAHe;AACA;AACA;AAEhB,SAAK,KAAK,GAAG,QAAQ,EAAE,IAAI,KAAK;AAChC,SAAK,OAAO,QAAQ,MAAM,KAAK;AAC/B,SAAK,UAAU,EAAE,UAAU,QAAQ,IAAI,QAAQ,KAAK,KAAK,GAAG;AAC5D,SAAK,QAAQ,KAAK,KAAK;AAAA,EACxB;AAAA,EA5PD,OAoO0C;AAAA;AAAA;AAAA,EACzB,gBAAgB,IAAI,QAAc;AAAA,EAClC,cAAc,KAAK,cAAc;AAAA,EACjC,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAa,IAAI,cAA+B;AAAA,EAEhE,IAAW,OAAO;AACjB,WAAO,KAAK,QAAQ,MAAM,KAAK,KAAK,EAAE,UACnC,MAAM,qBAAqB,IAAI,gBAAgB,OAAO,IACtD;AAAA,EACJ;AAYD;AAEA,MAAM,mBAA2C;AAAA,EA8BhD,YACiB,QACA,MACA,WACA,cACf;AAJe;AACA;AACA;AACA;AAEhB,UAAM,IAAK,KAAK,UAAU,KAAK,MAAM,SAAS,EAAE,SAAS,YAAY;AAErE,SAAK,WAAW,EAAE;AAClB,SAAK,eACJ,EAAE,SAAS,gBAAgB,QAAQ,EAAE,eAAe;AACrD,SAAK,MAAM,aAAa;AAAA,MACvB,MAAM,YAAY;AAAA,MAClB;AAAA,MACA,UAAU,OAAO;AAAA,MACjB;AAAA,MACA,WAAW,KAAK,KAAK;AAAA,IACtB,CAAC;AAED,SAAK,KAAK,KAAK,IAAI,SAAS;AAE5B,UAAM,cAAc,wBAAwB,EAAE,OAAO;AACrD,UAAM,QAAQ,MAAM,YAAY,QAAQ,GAAG,IAAI;AAC/C,SAAK,QAAQ,UAAU,WAAW;AAClC,QAAI,QAAQ,GAAG;AACd,WAAK,cACJ,QAAQ,IACL,SAAS,qBAAqB,oBAAoB,KAAK,IACvD,SAAS,qBAAqB,eAAe;AAAA,IAClD;AAAA,EACD;AAAA,EA3TD,OA+PiD;AAAA;AAAA;AAAA,EAChC,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,IAAW,cAAc;AACxB,QAAI,EAAE,KAAK,kBAAkB,iBAAiB;AAC7C,aAAO,MAAM;AAAA,IACd;AAGA,WAAO,MAAM;AAAA,MACZ,KAAK,OAAO;AAAA,MACZ,CAAC,MAAM,EAAE,KAAK,KAAK,UAAU,KAAK,KAAK,KAAK;AAAA,IAC7C;AAAA,EACD;AAAA,EAEA,IAAW,UAAgC;AAC1C,WAAO,eAAe,KAAK,MAAM,KAAK,OAAO;AAAA,EAC9C;AAAA,EAEA,IAAW,gBAAgB;AAC1B,WAAO,IAAI,kBAAkB,KAAK,QAAQ,KAAK,WAAW,KAAK,IAAI;AAAA,EACpE;AAiCD;AAUO,IAAM,iBAAN,cAA6B,WAAW;AAAA,EAa9C,YACC,WACA,aACA,SAKiB,oBACG,SACG,sBACG,gBACJ,iBACJ,iBACC,kBAClB;AACD,UAAM;AARW;AAUjB,SAAK,cAAc,qBAAqB;AAAA,MACvC;AAAA,MACA,QAAQ;AAAA,MACR,KAAK;AAAA,IACN;AACA,UAAM,uBAAuD;AAAA,MAC5D,MAAM,GAAgB;AACrB,eAAO,EAAE;AAAA,MACV;AAAA,IACD;AAEA,SAAK,OAAO,KAAK;AAAA,MAChB,qBAAqB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,UACC,WAAW,6BAAM,IAAN;AAAA,UACX,eAAe,6BAAM,uBAAuB,IAA7B;AAAA,QAChB;AAAA,QACA;AAAA,UACC,qBAAqB;AAAA,YACpB;AAAA,YACA,KAAK;AAAA,UACN;AAAA,QACD;AAAA,QACA;AAAA,UACC,oBAAoB;AAAA,UACpB,iCAAiC;AAAA,UACjC,kBAAkB;AAAA,UAClB,QAAQ;AAAA,YACP,QAAQ,GAAG,GAAG;AACb,kBACC,aAAa,mBACb,aAAa,iBACZ;AACD,uBAAO,YAAY,EAAE,OAAO,EAAE,KAAK;AAAA,cACpC;AAEA,qBAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,uBAAuB;AAAA,YACtB,aAAa,SAAuB;AACnC,qBAAO,QAAQ,aAAa,QAAQ;AAAA,YACrC;AAAA,YACA,qBAAqB;AACpB,qBAAO;AAAA,gBACN;AAAA,gBACA;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,UAAM,KAAK,IAAI,cAA2B;AAE1C,UAAM,kBAAkB,wBACvB,aACmD;AACnD,YAAM,EAAE,SAAAA,UAAS,OAAO,YAAY,KAAK,IAAI;AAC7C,YAAM,QAAQ,SAAS;AAAA,QACtBA,SAAQ;AAAA,QACR,CAAC,SACA,KAAK,MAAM,KAAK,EAAE,SAAS,gBAAgB,WAC3C,KAAK,MAAM,KAAK,EAAE,SAAS,SAAS;AAAA,MACtC;AACA,UAAI,SACH,SAAS,IAAI,OAAO,CAAC,UAAU;AAAA,QAC9B,SAAS,WAAW;AAAA,UACnB;AAAA,UACA,MAAM,IAAI,gBAAgBA,UAAS,MAAM,KAAK;AAAA,QAC/C;AAAA,QACA,gBAAgB;AAAA,QAChB,UAAU,gBAAgBA,UAAS,MAAM,KAAK;AAAA,MAC/C,EAAE;AAEH,UAAI,KAAK,SAAS,IAAI,GAAG;AACxB,iBAAS,SAAS;AAAA,UACjB,SAAS,OAA4C;AAAA,YACpD,SAAS,IAAI;AAAA,cACZA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,YACA,aAAa;AAAA,YACb,gBAAgB;AAAA,UACjB,CAAC;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,aAAO;AAAA,IACR,GApCwB;AAsCxB,UAAM,kBAAkB,wBACvB,QACA,MACA,cACmD;AACnD,aAAO,KAAK,MAAM,SAAS,EAAE,SAC3B;AAAA,QAAI,CAAC,GAAG,iBACR,EAAE,SAAS,gBAAgB,QACxB;AAAA,UACA,SAAS,GAAG;AAAA,YACX;AAAA,YACA,MACC,IAAI;AAAA,cACH;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,UACF;AAAA,UACA,gBAAgB;AAAA,QACjB,IACC;AAAA,MACJ,EACC,OAAO,SAAS;AAAA,IACnB,GAxBwB;AA0BxB,UAAM,oBAAoB,wBACzB,WAC2C;AAC3C,aAAO,OAAO,MAAM,IAAI,CAAC,MAAM,cAAc;AAC5C,cAAM,WAAW,GAAG;AAAA,UACnB;AAAA,UACA,MAAM,IAAI,YAAY,QAAQ,MAAM,SAAS;AAAA,QAC9C;AACA,eAAO;AAAA,UACN,SAAS;AAAA,UACT,gBAAgB;AAAA,UAChB,aAAa;AAAA,UACb,UAAU,gBAAgB,QAAQ;AAAA,QACnC;AAAA,MACD,CAAC;AAAA,IACF,GAf0B;AAiB1B,UAAM,kBAAkB,6BAEnB;AACJ,UAAI,WAAkD,CAAC;AAEvD,YAAM,QAAQ,CAAC;AAEf,iBAAW,UAAU,QAAQ,SAAS;AACrC,YAAI,CAAC,SAAS,UAAU,OAAO,MAAM,QAAQ;AAC5C,qBAAW,kBAAkB,MAAM;AAAA,QACpC,WAAW,UAAU;AACpB,gBAAM,UAAU,GAAG;AAAA,YAClB;AAAA,YACA,MAAM,IAAI,kBAAkB,MAAM;AAAA,UACnC;AACA,gBAAM,KAAK;AAAA,YACV;AAAA,YACA,gBAAgB;AAAA,YAChB,aAAa;AAAA,YACb,WAAW,KAAK,KAAK,WAAW,OAAO,IACpC,KAAK,KAAK,YAAY,OAAO,IAC7B;AAAA,YACH,UAAU,kBAAkB,MAAM;AAAA,UACnC,CAAC;AAAA,QACF;AAAA,MACD;AAEA,UAAI,CAAC,SAAS,QAAQ;AACrB,eAAO;AAAA,MACR;AAEA,UAAI,MAAM,QAAQ;AACjB,iBAAS,KAAK;AAAA,UACb,SAAS,IAAI,oBAAoB,MAAM,MAAM;AAAA,UAC7C,gBAAgB;AAAA,UAChB,aAAa;AAAA,UACb,WAAW;AAAA,UACX,UAAU;AAAA,QACX,CAAC;AAAA,MACF;AAEA,aAAO;AAAA,IACR,GA1CwB;AA8CxB,UAAM,uBAAuB,oBAAI,IAAiB;AAClD,UAAM,qBAAqB,KAAK;AAAA,MAC/B,IAAI,iBAAiB,MAAM;AAC1B,mBAAW,YAAY,sBAAsB;AAC5C,cAAI,KAAK,KAAK,WAAW,QAAQ,GAAG;AACnC,iBAAK,KAAK;AAAA,cACT;AAAA,cACA,gBAAgB,QAAQ;AAAA,cACxB,EAAE,qBAAqB;AAAA,YACxB;AAAA,UACD;AAAA,QACD;AACA,6BAAqB,MAAM;AAAA,MAC5B,GAAG,GAAG;AAAA,IACP;AAEA,UAAM,0BAA0B,wBAAC,aAA0B;AAC1D,2BAAqB,IAAI,QAAQ;AACjC,UAAI,CAAC,mBAAmB,YAAY,GAAG;AACtC,2BAAmB,SAAS;AAAA,MAC7B;AAAA,IACD,GALgC;AAOhC,UAAM,kBAAkB,wBAAC,WAA2B;AACnD,YAAM,aAAa,IAAI,gBAAgB;AACvC,iBAAW;AAAA,QACV,OAAO,UAAU,CAAC,MAAM;AACvB,eAAK,KAAK,YAAY,MAAM,gBAAgB,GAAG;AAAA,YAC9C;AAAA,UACD,CAAC;AAED,cAAI,OAAO,MAAM,WAAW,GAAG;AAC9B,iBAAK,cAAc,KAAK,IAAI,YAAY,QAAQ,CAAC,CAAC;AAAA,UACnD;AAIA,gBAAM,OAAO,OAAO,MAAM,CAAC;AAC3B,qBAAW;AAAA,YACV,QAAQ,CAAC,WAAW;AACnB,mBAAK,SAAS,KAAK,MAAM;AACzB;AAAA,gBACC,GAAG,IAAI,IAAI;AAAA,cACZ;AAAA,YACD,CAAC;AAAA,UACF;AAAA,QACD,CAAC;AAAA,MACF;AAEA,iBAAW;AAAA,QACV,OAAO,UAAU,CAAC,UAAU;AAC3B,UACC,GAAG,IAAI,OAAO,MAAM,KAAK,CAAC,GACxB,cAAc,KAAK;AAAA,QACvB,CAAC;AAAA,MACF;AAEA,iBAAW;AAAA,QACV,OAAO,SAAS,CAAC,MAAM;AAEtB,qBAAW,CAAC,OAAO,IAAI,KAAK,OAAO,MAAM,QAAQ,GAAG;AACnD,kBAAM,WAAW,GAAG,IAAI,IAAI;AAC5B,gBAAI,CAAC,KAAK,KAAK,WAAW,QAAQ,GAAG;AACpC;AAAA,YACD;AAEA,kBAAM,WAAW,SAAS,WAAW,IAAI,EAAE,IAAI;AAC/C,gBAAI,YAAY,KAAK,KAAK,WAAW,QAAQ,GAAG;AAC/C,kBACC,EAAE,WACD,2BAA2B,cAC5B,EAAE,QAAQ,SAAS,gBAAgB,OAClC;AACD,qBAAK,KAAK;AAAA,kBACT;AAAA,kBACA,gBAAgB,QAAQ,EAAE,MAAM,KAAK;AAAA,kBACrC,EAAE,qBAAqB;AAAA,gBACxB;AAAA,cACD;AACA;AAAA,YACD;AAEA,oCAAwB,QAAQ;AAAA,UACjC;AAAA,QACD,CAAC;AAAA,MACF;AAEA,iBAAW;AAAA,QACV,OAAO,WAAW,MAAM;AACvB,UACC,GAAG,IAAI,MAAM,GACX,cAAc,KAAK;AACtB,qBAAW,QAAQ;AAAA,QACpB,CAAC;AAAA,MACF;AAAA,IACD,GAxEwB;AA0ExB,SAAK;AAAA,MACJ,QAAQ,iBAAiB,CAAC,MAAM;AAI/B,YAAI,KAAK,UAAU;AAClB;AAAA,QACD;AAEA,YAAI,eAAe,GAAG;AACrB,UACC,GAAG,IAAI,EAAE,SAAS,GAChB,cAAc,KAAK;AAAA,QACvB,WAAW,aAAa,GAAG;AAC1B,0BAAgB,EAAE,OAAO;AAAA,QAC1B,OAAO;AACN,eAAK,KAAK,YAAY,MAAM,gBAAgB,GAAG;AAAA,YAC9C;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD,CAAC;AAAA,IACF;AAEA,UAAM,aAAa,wBAAC,SAAsB,kBAA2B;AACpE,WAAK,KAAK,SAAS,CAAC,OAAO,CAAC;AAC5B,WAAK,KAAK,aAAa,CAAC,OAAO,CAAC;AAChC,UAAI,CAAC,eAAe;AACnB,aAAK,KAAK,SAAS;AAAA,MACpB;AAAA,IACD,GANmB;AAQnB,SAAK;AAAA,MACJ,YAAY,OAAO,EAAE,SAAS,gBAAgB,MAAM,MAAM;AACzD,YAAI,mBAAmB,aAAa;AACnC,gBAAM,aAAa,KAAK,KACtB,QAAQ,IAAI,EACZ,SAAS,KAAK,CAAC,MAAM;AACrB,gBAAI,EAAE,mBAAmB,aAAa;AACrC,qBACC,EAAE,QAAQ,QAAQ,OACjB,QAAQ,OAAO,MAChB,EAAE,QAAQ,UAAU,QAAQ;AAAA,YAE9B;AACA,gBAAI,EAAE,mBAAmB,mBAAmB;AAC3C,qBAAO,EAAE,QAAQ,OAAO,QAAQ,OAAO;AAAA,YACxC;AACA,mBAAO;AAAA,UACR,CAAC;AAEF,cAAI,YAAY;AACf,uBAAW,WAAW,SAAU,aAAa;AAAA,UAC9C;AACA;AAAA,QACD;AAEA,cAAM,gBACL,mBAAmB,oBAChB,GACC,IAAiB,QAAQ,IAAI,GAC5B,WAAW,IAAI,QAAQ,IAAI,IAC7B,GAAG,IAAI,QAAQ,OAAO;AAC1B,YAAI,CAAC,iBAAiB,CAAC,KAAK,KAAK,WAAW,aAAa,GAAG;AAC3D;AAAA,QACD;AAEA,cAAM,UAAyB,CAAC;AAChC,iBACK,SAAS,KAAK,KAAK,iBAAiB,aAAa,GACrD,QACA,SAAS,KAAK,KAAK,iBAAiB,MAAM,GACzC;AACD,kBAAQ,QAAQ,MAAM;AAAA,QACvB;AAEA,mBAAW,UAAU,SAAS;AAC7B,eAAK,KAAK,OAAO,MAAM;AAAA,QACxB;AAEA,YAAI,KAAK,KAAK,eAAe,aAAa,MAAM,MAAM;AACrD,eAAK,KAAK,OAAO,eAAe,GAAG;AAAA,QACpC;AAEA,mBAAW,eAAe,aAAa;AAAA,MACxC,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,KAAK,KAAK,UAAU,OAAO,MAAM;AAChC,YAAI,EAAE,mBAAmB,oBAAoB;AAC5C,eAAK,cAAc;AAAA,YAClB,IAAI;AAAA,cACH,EAAE,QAAQ;AAAA,cACV,EAAE,QAAQ;AAAA,cACV,EAAE,QAAQ;AAAA,cACV,EAAE,QAAQ;AAAA,YACX;AAAA,UACD;AAAA,QACD,WAAW,EAAE,mBAAmB,iBAAiB;AAChD,gBAAM,IAAI,EAAE;AACZ,gBAAM,UAAU;AAAA,YACf,EAAE,QAAQ;AAAA,YACV,CAAC,IAAI,IAAI,cAAc,cACtB,IAAI;AAAA,cACH,EAAE;AAAA,cACF,EAAE;AAAA,cACF;AAAA,cACA;AAAA,YACD;AAAA,UACF;AACA,eAAK,cAAc;AAAA,YAClB,WAAW,IAAI,kBAAkB,EAAE,SAAS,GAAG,EAAE,IAAI;AAAA,UACtD;AAAA,QACD,WAAW,EAAE,mBAAmB,iBAAiB;AAChD,gBAAM,OAAO,EAAE,QAAQ;AACvB,cAAI,EAAE,QAAQ,QAAQ;AACrB,mBAAO,gBAAgB,cAAc;AAAA,UACtC;AACA,0BAAgB;AAAA,YACf,EAAE,UAAU,QAAQ,oBAAoB;AAAA,YACxC,MAAM,gBAAgB,aAAa,MAAM,IAAI;AAAA,UAC9C;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,KAAK,KAAK,qBAAqB,CAAC,QAAQ;AACvC,mBAAW,WAAW,IAAI,UAAU;AACnC,cAAI,WAAW,UAAU,SAAS;AACjC,2BAAe,OAAO,QAAQ,QAAQ,KAAK,KAAK;AAChD;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK,UAAU,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,cAAc,CAAC,CAAC,CAAC;AAEpE,SAAK;AAAA,MACJ,KAAK,KAAK,yBAAyB,CAAC,MAAM;AACzC,YACC,EAAE,KAAK,mBAAmB,uBAC1B,CAAC,EAAE,KAAK,WACP;AACD,2BAAiB,WAOf,4BAA4B;AAAA,QAC/B;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK,KAAK,YAAY,MAAM,gBAAgB,CAAC;AAC7C,eAAW,UAAU,QAAQ,SAAS;AACrC,UAAI,CAAC,OAAO,eAAe,kBAAkB,gBAAgB;AAC5D,wBAAgB,MAAM;AAAA,MACvB;AAAA,IACD;AAAA,EACD;AAAA,EAnyBD,OAsU+C;AAAA;AAAA;AAAA,EACtC,WAAW;AAAA,EACF;AAAA,EAIA;AAAA,EACA,gBAAgB,KAAK;AAAA,IACrC,IAAI,QAAwB;AAAA,EAC7B;AAAA,EAEgB,qBAAqB,KAAK,cAAc;AAAA,EAodjD,OAAO,QAAgB,OAAe;AAC5C,SAAK,KAAK,OAAO,QAAQ,KAAK;AAAA,EAC/B;AAAA,EAEQ,cAAc,KAAiD;AACtE,QAAI,CAAC,IAAI,SAAS;AACjB;AAAA,IACD;AAEA,UAAM,UAAU,KAAK,YAAY,iBAAiB,IAAI,OAAO;AAC7D,SAAK,mBAAmB,gBAAgB;AAAA,MACvC,WAAW,6BAAM,IAAI,QAAV;AAAA,MACX,YAAY,6BACX,QAAQ,UAAU,SACf;AAAA,QACA,GAAG,QAAQ;AAAA,QACX,IAAI,UAAU;AAAA,QACd,GAAG,QAAQ;AAAA,MACZ,IACC,QAAQ,SAPA;AAAA,MAQZ,mBAAmB,6BAAM,IAAI,SAAS,SAAnB;AAAA,IACpB,CAAC;AAAA,EACF;AAAA,EAEgB,UAAU;AACzB,UAAM,QAAQ;AACd,SAAK,WAAW;AAAA,EACjB;AACD;AA3fa,iBAAN;AAAA,EAoBJ;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA3BU;AAqgBb,IAAM,yBAAN,MAEA;AAAA,EAIC,YACkB,aAEA,sBAChB;AAHgB;AAEA;AAAA,EACf;AAAA,EAr1BJ,OA60BA;AAAA;AAAA;AAAA,EACC,OAAuB,KAAK;AAAA,EACZ,aAAa,uBAAuB;AAAA;AAAA,EAS7C,yBACN,MACA,QACA,cACO;AACP,UAAM,QAAQ,KAAK,QAAQ;AAC3B,UAAM,cAAc,MAAM,MAAM,SAAS,CAAC;AAC1C,SACE,uBAAuB,eACvB,uBAAuB,uBACxB,MAAM,UAAU,GACf;AACD,WAAK,SAAS,MAAM,MAAM,SAAS,CAAC,GAAG,cAAc,WAAW;AAAA,IACjE,OAAO;AACN,WAAK,SAAS,aAAa,YAAY;AAAA,IACxC;AAAA,EACD;AAAA;AAAA,EAGO,eAAe,WAAsC;AAC3D,UAAM,qBAAqB,IAAI,gBAAgB;AAC/C,UAAM,UAAU,IAAI,OAAO,WAAW,IAAI,EAAE,iBAAiB,CAAC;AAC9D,UAAM,OAAO,IAAI,OAAO,SAAS,IAAI,EAAE,QAAQ,CAAC;AAChD,UAAM,QAAQ,IAAI,OAAO,SAAS,IAAI,EAAE,OAAO,CAAC;AAEhD,UAAM,YAAY,IAAI,UAAU,SAAS;AAAA,MACxC,wBAAwB,wBAAC,QAAQ,YAChC,kBAAkB,iBACf,KAAK,qBAAqB;AAAA,QAC1B;AAAA,QACA;AAAA,QACA,EAAE,eAAe,QAAQ,cAAc;AAAA,MACxC,IACC,QAPoB;AAAA,IAQzB,CAAC;AAED,UAAM,oBAAoB,IAAI,gBAAgB;AAC9C,uBAAmB,IAAI,iBAAiB;AACxC,uBAAmB,IAAI,SAAS;AAEhC,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAGO,cACN,SACA,QACA,cACO;AACP,SAAK,SAAS,QAAQ,SAAS,YAAY;AAAA,EAC5C;AAAA;AAAA,EAGO,gBAAgB,cAAkC;AACxD,iBAAa,mBAAmB,QAAQ;AAAA,EACzC;AAAA;AAAA,EAGQ,SACP,SACA,cACA,gBACC;AACD,iBAAa,kBAAkB,MAAM;AACrC,iBAAa,kBAAkB;AAAA,MAC9B,QAAQ;AAAA,QAAY,MACnB,KAAK,SAAS,SAAS,cAAc,cAAc;AAAA,MACpD;AAAA,IACD;AACA,SAAK,cAAc,SAAS,cAAc,cAAc;AAAA,EACzD;AAAA;AAAA,EAGQ,cACP,SACA,cACA,gBACC;AACD,QAAI,EAAE,OAAO,gBAAgB,YAAY,IAAI;AAC7C,QAAI,0BAA0B,oBAAoB;AACjD,oBAAc,eAAe;AAAA,IAC9B;AAEA,UAAM,qBAAqB,cACxB,IAAI,EAAE,+BAA+B,CAAC,GAAG,WAAW,IACpD;AACH,QAAI,gBAAgB;AACnB,UAAI;AAAA,QACH,aAAa;AAAA,QACb,GAAG;AAAA,QACH;AAAA,MACD;AAAA,IACD,OAAO;AACN,UAAI,MAAM,aAAa,OAAO,OAAO,kBAAkB;AAAA,IACxD;AAEA,UAAM,OAAO,QAAQ;AACrB,iBAAa,KAAK,YAAY,kBAAkB,OAAO,UAAU,YAAY,IAAI,IAAI,EAAE;AAEvF,UAAM,UAAU,KAAK,YAAY,iBAAiB,OAAO;AACzD,iBAAa,UAAU,MAAM;AAC7B,iBAAa,UAAU,UAAU,QAAQ;AACzC,iBAAa,UAAU,KAAK,QAAQ,SAAS;AAAA,MAC5C,MAAM;AAAA,MACN,OAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AA9HM,yBAAN;AAAA,EAQG;AAAA,GARG;AAgIN,IAAM,sBAAN,MAA0B;AAAA,EACzB,YACkB,8BACA,eAEA,mBACc,aACG,gBAEjB,oBACgB,eAChC;AATgB;AACA;AAEA;AACc;AACG;AAEjB;AACgB;AAAA,EAC/B;AAAA,EAt9BJ,OA28B0B;AAAA;AAAA;AAAA,EAalB,iBAAiB,SAAuB;AAC9C,UAAM,OACL,mBAAmB,kBAAkB,QAAQ,OAAO;AACrD,UAAM,eAAe,OAClB,KAAK,mBAAmB,oBAAoB,KAAK,IAAI,IACrD;AAEH,UAAM,cAAmC;AAAA,MACxC,CAAC,QAAQ,QAAQ,wBAAwB;AAAA,MACzC,CAAC,mBAAmB,aAAa,KAAK,QAAQ,IAAI;AAAA,IACnD;AAEA,QAAI,KAAK,OAAO;AAChB,UAAM,UAAqB,CAAC;AAC5B,UAAM,YAAuB,CAAC;AAE9B,QAAI,mBAAmB,aAAa;AACnC,cAAQ;AAAA,QACP,IAAI;AAAA,UACH;AAAA,UACA,SAAS,4BAA4B,oBAAoB;AAAA,UACzD,UAAU,YAAY,QAAQ,QAAQ;AAAA,UACtC;AAAA,UACA,MACC,KAAK,cAAc;AAAA,YAClB,IAAI,YAAY,QAAQ,SAAS,QAAQ,KAAK;AAAA,UAC/C;AAAA,QACF;AAAA,MACD;AACA,UAAI,QAAQ,KAAK,SAAS;AACzB,gBAAQ;AAAA,UACP,IAAI;AAAA,YACH;AAAA,YACA,SAAS,qBAAqB,iBAAiB;AAAA,YAC/C,UAAU,YAAY,MAAM,iBAAiB;AAAA,YAC7C;AAAA,YACA,MACC,KAAK,eAAe;AAAA,cACnB,cAAc;AAAA,cACd,QAAQ,QAAQ;AAAA,cAChB,QAAQ,KAAK;AAAA,YACd;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,mBAAmB,mBAAmB;AAEzC,UAAI,QAAQ,MAAM,MAAM,WAAW,GAAG;AACrC,gBAAQ;AAAA,UACP,IAAI;AAAA,YACH;AAAA,YACA;AAAA,cACC;AAAA,cACA;AAAA,YACD;AAAA,YACA,UAAU,YAAY,QAAQ,QAAQ;AAAA,YACtC;AAAA,YACA,MACC,KAAK,cAAc;AAAA,cAClB,IAAI,YAAY,QAAQ,OAAO,CAAC;AAAA,YACjC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAEA,cAAQ;AAAA,QACP,IAAI;AAAA,UACH;AAAA,UACA,SAAS,wBAAwB,gBAAgB;AAAA,UACjD,UAAU,YAAY,MAAM,cAAc;AAAA,UAC1C;AAAA,UACA,MACC,KAAK,eAAe;AAAA,YACnB;AAAA,YACA,QAAQ,MAAM;AAAA,UACf;AAAA,QACF;AAAA,MACD;AAEA,UAAI,eAAe,qBAAqB,OAAO;AAC9C,gBAAQ;AAAA,UACP,IAAI;AAAA,YACH;AAAA,YACA,SAAS,wBAAwB,gBAAgB;AAAA,YACjD,UAAU,YAAY,MAAM,gBAAgB;AAAA,YAC5C;AAAA,YACA,MACC,KAAK,eAAe;AAAA,cACnB;AAAA,cACA,QAAQ,MAAM;AAAA,YACf;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QACC,mBAAmB,mBACnB,mBAAmB,oBAClB;AACD,kBAAY;AAAA,QACX;AAAA,UACC,mBAAmB,mBAAmB;AAAA,UACtC,QAAQ,KAAK;AAAA,QACd;AAAA,QACA;AAAA,UACC,mBAAmB,gBAAgB;AAAA,UACnC,+BACC,QAAQ,KAAK,gBACd;AAAA,QACD;AAAA,QACA,GAAG,0BAA0B,QAAQ,MAAM,YAAY;AAAA,MACxD;AAEA,YAAM,QAAQ,QAAQ,KAAK,KAAK;AAChC,UACC,QAAQ,KAAK,MAAM,QAAQ,SAAS,EAAE,SAAS;AAAA,QAC9C,CAAC,MAAM,EAAE,SAAS,gBAAgB;AAAA,MACnC,GACC;AACD,gBAAQ;AAAA,UACP,IAAI;AAAA,YACH;AAAA,YACA;AAAA,cACC;AAAA,cACA;AAAA,YACD;AAAA,YACA,UAAU,YAAY,QAAQ,QAAQ;AAAA,YACtC;AAAA,YACA,MAAM,KAAK,cAAc,KAAK,QAAQ,aAAa;AAAA,UACpD;AAAA,QACD;AAAA,MACD;AAEA,gBAAU;AAAA,QACT,IAAI;AAAA,UACH;AAAA,UACA;AAAA,YACC;AAAA,YACA;AAAA,UACD;AAAA,UACA,UAAU,YAAY,QAAQ,QAAQ;AAAA,UACtC;AAAA,UACA,MACC,KAAK,eAAe;AAAA,YACnB;AAAA,YACA;AAAA,UACD;AAAA,QACF;AAAA,MACD;AAEA,UAAI,eAAe,qBAAqB,KAAK;AAC5C,gBAAQ;AAAA,UACP,IAAI;AAAA,YACH;AAAA,YACA,SAAS,YAAY,UAAU;AAAA,YAC/B,UAAU,YAAY,MAAM,cAAc;AAAA,YAC1C;AAAA,YACA,MACC,KAAK,eAAe;AAAA,cACnB;AAAA,cACA,qBAAqB;AAAA,cACrB;AAAA,YACD;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAEA,UAAI,eAAe,qBAAqB,OAAO;AAC9C,gBAAQ;AAAA,UACP,IAAI;AAAA,YACH;AAAA,YACA,SAAS,cAAc,YAAY;AAAA,YACnC,UAAU,YAAY,MAAM,gBAAgB;AAAA,YAC5C;AAAA,YACA,MACC,KAAK,eAAe;AAAA,cACnB;AAAA,cACA,qBAAqB;AAAA,cACrB;AAAA,YACD;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,mBAAmB,oBAAoB;AAC1C,WAAK,OAAO;AACZ,kBAAY,KAAK;AAAA,QAChB,mBAAmB,mBAAmB;AAAA,QACtC,QAAQ;AAAA,MACT,CAAC;AAED,cAAQ;AAAA,QACP,IAAI;AAAA,UACH;AAAA,UACA,SAAS,oBAAoB,YAAY;AAAA,UACzC,UAAU,YAAY,QAAQ,QAAQ;AAAA,UACtC;AAAA,UACA,MACC,KAAK,eAAe;AAAA,YACnB;AAAA,YACA,QAAQ,KAAK,KAAK;AAAA,UACnB;AAAA,QACF;AAAA,MACD;AAEA,UAAI,KAAK,gCAAgC,QAAQ,UAAU;AAC1D,gBAAQ;AAAA,UACP,IAAI;AAAA,YACH;AAAA,YACA,SAAS,qBAAqB,aAAa;AAAA,YAC3C,UAAU,YAAY,QAAQ,QAAQ;AAAA,YACtC;AAAA,YACA,MACC,KAAK,cAAc,WAAW;AAAA,cAC7B,UAAU,QAAQ,SAAU;AAAA,cAC5B,SAAS;AAAA,gBACR,WAAW,QAAQ,SAAU;AAAA,gBAC7B,eAAe;AAAA,cAChB;AAAA,YACD,CAAC;AAAA,UACH;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,UAAM,iBACL,KAAK,kBAAkB,cAAc,WAAW;AACjD,UAAM,SAAS,EAAE,SAAS,UAAU;AACpC,UAAM,OAAO,KAAK,YAAY,eAAe,IAAI,gBAAgB;AAAA,MAChE,KAAK,QAAQ;AAAA,IACd,CAAC;AACD,oCAAgC,MAAM,QAAQ,QAAQ;AACtD,WAAO;AAAA,EACR;AACD;AA3PM,sBAAN;AAAA,EAIG;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,GAVG;AA6PN,MAAM,cAAiB;AAAA,EAxsCvB,OAwsCuB;AAAA;AAAA;AAAA,EACL,IAAI,oBAAI,QAAmB;AAAA,EAErC,IAAsB,KAA6B;AACzD,WAAO,KAAK,EAAE,IAAI,GAAG;AAAA,EACtB;AAAA,EAEO,YAA0B,KAAa,SAAuB;AACpE,UAAM,WAAW,KAAK,EAAE,IAAI,GAAG;AAC/B,QAAI,UAAU;AACb,aAAO;AAAA,IACR;AAEA,UAAM,QAAQ,QAAQ;AACtB,SAAK,EAAE,IAAI,KAAK,KAAK;AACrB,WAAO;AAAA,EACR;AACD;AAEA,MAAM,YAAY,wBAAC,QAAgB;AAClC,QAAM,QAAQ,IAAI,QAAQ,IAAI;AAC9B,SAAO,UAAU,KAAK,MAAM,IAAI,MAAM,GAAG,KAAK;AAC/C,GAHkB;",
  "names": ["results"]
}
