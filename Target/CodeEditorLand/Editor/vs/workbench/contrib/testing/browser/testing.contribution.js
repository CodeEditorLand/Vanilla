import{EditorContributionInstantiation as v,registerEditorContribution as w}from"../../../../editor/browser/editorExtensions.js";import{localize as y,localize2 as g}from"../../../../nls.js";import{registerAction2 as a}from"../../../../platform/actions/common/actions.js";import{CommandsRegistry as d,ICommandService as O}from"../../../../platform/commands/common/commands.js";import{Extensions as N}from"../../../../platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as M}from"../../../../platform/contextkey/common/contextkey.js";import{IFileService as B}from"../../../../platform/files/common/files.js";import{SyncDescriptor as p}from"../../../../platform/instantiation/common/descriptors.js";import{InstantiationType as o,registerSingleton as n}from"../../../../platform/instantiation/common/extensions.js";import"../../../../platform/instantiation/common/instantiation.js";import{IOpenerService as L}from"../../../../platform/opener/common/opener.js";import{IProgressService as _}from"../../../../platform/progress/common/progress.js";import{Registry as m}from"../../../../platform/registry/common/platform.js";import{ViewPaneContainer as z}from"../../../browser/parts/views/viewPaneContainer.js";import{Extensions as R}from"../../../common/contributions.js";import{Extensions as V,ViewContainerLocation as x}from"../../../common/views.js";import{REVEAL_IN_EXPLORER_COMMAND_ID as $}from"../../files/browser/fileConstants.js";import{CodeCoverageDecorations as G}from"./codeCoverageDecorations.js";import{testingResultsIcon as D,testingViewIcon as S}from"./icons.js";import{TestCoverageView as K}from"./testCoverageView.js";import{TestingDecorationService as q,TestingDecorations as H}from"./testingDecorations.js";import{TestingExplorerView as U}from"./testingExplorerView.js";import{CloseTestPeek as X,CollapsePeekStack as j,GoToNextMessageAction as J,GoToPreviousMessageAction as Q,OpenMessageInEditorAction as Y,TestResultsView as Z,TestingOutputPeekController as ee,TestingPeekOpener as A,ToggleTestingPeekHistory as te}from"./testingOutputPeek.js";import{TestingProgressTrigger as re}from"./testingProgressUiService.js";import{TestingViewPaneContainer as ie}from"./testingViewPaneContainer.js";import{testingConfiguration as oe}from"../common/configuration.js";import{TestCommandId as ne,Testing as r}from"../common/constants.js";import{ITestCoverageService as se,TestCoverageService as ae}from"../common/testCoverageService.js";import{ITestExplorerFilterState as h,TestExplorerFilterState as me}from"../common/testExplorerFilterState.js";import{TestId as ce,TestPosition as le}from"../common/testId.js";import{ITestProfileService as ge,TestProfileService as de}from"../common/testProfileService.js";import{ITestResultService as W,TestResultService as pe}from"../common/testResultService.js";import{ITestResultStorage as ue,TestResultStorage as fe}from"../common/testResultStorage.js";import{ITestService as u}from"../common/testService.js";import{TestService as Ce}from"../common/testServiceImpl.js";import"../common/testTypes.js";import{TestingContentProvider as Te}from"../common/testingContentProvider.js";import{TestingContextKeys as E}from"../common/testingContextKeys.js";import{ITestingContinuousRunService as Ie,TestingContinuousRunService as ve}from"../common/testingContinuousRunService.js";import{ITestingDecorationsService as F}from"../common/testingDecorations.js";import{ITestingPeekOpener as P}from"../common/testingPeekOpener.js";import{LifecyclePhase as b}from"../../../services/lifecycle/common/lifecycle.js";import{IViewsService as we}from"../../../services/views/common/viewsService.js";import{allTestActions as ye,discoverAndRunTests as Re}from"./testExplorerActions.js";import"./testingConfigurationUi.js";n(u,Ce,o.Delayed),n(ue,fe,o.Delayed),n(ge,de,o.Delayed),n(se,ae,o.Delayed),n(Ie,ve,o.Delayed),n(W,pe,o.Delayed),n(h,me,o.Delayed),n(P,A,o.Delayed),n(F,q,o.Delayed);const Ve=m.as(V.ViewContainersRegistry).registerViewContainer({id:r.ViewletId,title:g("test","Testing"),ctorDescriptor:new p(ie),icon:S,alwaysUseContainerInfo:!0,order:6,openCommandActionDescriptor:{id:r.ViewletId,mnemonicTitle:y({key:"miViewTesting",comment:["&& denotes a mnemonic"]},"T&&esting"),order:4},hideIfEmpty:!0},x.Sidebar),Se=m.as(V.ViewContainersRegistry).registerViewContainer({id:r.ResultsPanelId,title:g("testResultsPanelName","Test Results"),icon:D,ctorDescriptor:new p(z,[r.ResultsPanelId,{mergeViewWithContainerWhenSingleView:!0}]),hideIfEmpty:!0,order:3},x.Panel,{doNotRegisterOpenCommand:!0}),T=m.as(V.ViewsRegistry);T.registerViews([{id:r.ResultsViewId,name:g("testResultsPanelName","Test Results"),containerIcon:D,canToggleVisibility:!1,canMoveView:!0,when:E.hasAnyResults.isEqualTo(!0),ctorDescriptor:new p(Z)}],Se),T.registerViewWelcomeContent(r.ExplorerViewId,{content:y("noTestProvidersRegistered","No tests have been found in this workspace yet.")}),T.registerViewWelcomeContent(r.ExplorerViewId,{content:"["+y("searchForAdditionalTestExtensions","Install Additional Test Extensions...")+`](command:${ne.SearchForTestExtension})`,order:10}),T.registerViews([{id:r.ExplorerViewId,name:g("testExplorer","Test Explorer"),ctorDescriptor:new p(U),canToggleVisibility:!0,canMoveView:!0,weight:80,order:-999,containerIcon:S,when:M.greater(E.providerCount.key,0)},{id:r.CoverageViewId,name:g("testCoverage","Test Coverage"),ctorDescriptor:new p(K),canToggleVisibility:!0,canMoveView:!0,weight:80,order:-998,containerIcon:S,when:E.isTestCoverageOpen}],Ve),ye.forEach(a),a(Y),a(Q),a(J),a(X),a(te),a(j),m.as(R.Workbench).registerWorkbenchContribution(Te,b.Restored),m.as(R.Workbench).registerWorkbenchContribution(A,b.Eventually),m.as(R.Workbench).registerWorkbenchContribution(re,b.Eventually),w(r.OutputPeekContributionId,ee,v.AfterFirstRender),w(r.DecorationsContributionId,H,v.AfterFirstRender),w(r.CoverageDecorationsContributionId,G,v.Eventually),d.registerCommand({id:"_revealTestInExplorer",handler:async(e,i,t)=>{e.get(h).reveal.value=typeof i=="string"?i:i.extId,e.get(we).openView(r.ExplorerViewId,t)}}),d.registerCommand({id:"vscode.peekTestError",handler:async(e,i)=>{const t=e.get(W).getStateById(i);if(!t)return!1;const[s,c]=t,f=e.get(P);if(f.tryPeekFirstError(s,c))return!0;for(const C of s.tests)if(ce.compare(c.item.extId,C.item.extId)===le.IsChild&&f.tryPeekFirstError(s,C))return!0;return!1}}),d.registerCommand({id:"vscode.revealTest",handler:async(e,i)=>{const t=e.get(u).collection.getNodeById(i);if(!t)return;const s=e.get(O),c=e.get(B),f=e.get(L),{range:C,uri:l}=t.item;if(!l)return;const I=e.get(F).getDecoratedTestPosition(l,i)||C?.getStartPosition();e.get(h).reveal.value=i,e.get(P).closeAllPeeks();let k=!0;try{(await c.stat(l)).isFile||(k=!1)}catch{}if(!k){await s.executeCommand($,l);return}await f.open(I?l.with({fragment:`L${I.lineNumber}:${I.column}`}):l)}}),d.registerCommand({id:"vscode.runTestsById",handler:async(e,i,...t)=>{const s=e.get(u);await Re(e.get(u).collection,e.get(_),t,c=>s.runTests({group:i,tests:c}))}}),d.registerCommand({id:"vscode.testing.getControllersWithTests",handler:async e=>[...e.get(u).collection.rootItems].filter(t=>t.children.size>0).map(t=>t.controllerId)}),m.as(N.Configuration).registerConfiguration(oe);
