import{EditorContributionInstantiation as w,registerEditorContribution as v}from"../../../../editor/browser/editorExtensions.js";import{localize as y,localize2 as l}from"../../../../nls.js";import{registerAction2 as a}from"../../../../platform/actions/common/actions.js";import{CommandsRegistry as f,ICommandService as O}from"../../../../platform/commands/common/commands.js";import{Extensions as N}from"../../../../platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as M}from"../../../../platform/contextkey/common/contextkey.js";import{IFileService as B}from"../../../../platform/files/common/files.js";import{SyncDescriptor as d}from"../../../../platform/instantiation/common/descriptors.js";import{InstantiationType as o,registerSingleton as n}from"../../../../platform/instantiation/common/extensions.js";import"../../../../platform/instantiation/common/instantiation.js";import{IOpenerService as L}from"../../../../platform/opener/common/opener.js";import{IProgressService as _}from"../../../../platform/progress/common/progress.js";import{Registry as m}from"../../../../platform/registry/common/platform.js";import{ViewPaneContainer as $}from"../../../browser/parts/views/viewPaneContainer.js";import{Extensions as R}from"../../../common/contributions.js";import{Extensions as V,ViewContainerLocation as x}from"../../../common/views.js";import{LifecyclePhase as S}from"../../../services/lifecycle/common/lifecycle.js";import{IViewsService as z}from"../../../services/views/common/viewsService.js";import{REVEAL_IN_EXPLORER_COMMAND_ID as G}from"../../files/browser/fileConstants.js";import{testingConfiguration as K}from"../common/configuration.js";import{TestCommandId as q,Testing as t}from"../common/constants.js";import{ITestCoverageService as H,TestCoverageService as U}from"../common/testCoverageService.js";import{ITestExplorerFilterState as E,TestExplorerFilterState as X}from"../common/testExplorerFilterState.js";import{TestId as j,TestPosition as J}from"../common/testId.js";import{TestingContentProvider as Q}from"../common/testingContentProvider.js";import{TestingContextKeys as h}from"../common/testingContextKeys.js";import{ITestingContinuousRunService as Y,TestingContinuousRunService as Z}from"../common/testingContinuousRunService.js";import{ITestingDecorationsService as D}from"../common/testingDecorations.js";import{ITestingPeekOpener as P}from"../common/testingPeekOpener.js";import{ITestProfileService as ee,TestProfileService as te}from"../common/testProfileService.js";import{ITestResultService as A,TestResultService as re}from"../common/testResultService.js";import{ITestResultStorage as ie,TestResultStorage as oe}from"../common/testResultStorage.js";import{ITestService as T}from"../common/testService.js";import{TestService as ne}from"../common/testServiceImpl.js";import"../common/testTypes.js";import{CodeCoverageDecorations as se}from"./codeCoverageDecorations.js";import{testingResultsIcon as W,testingViewIcon as b}from"./icons.js";import{TestCoverageView as ae}from"./testCoverageView.js";import{allTestActions as me,discoverAndRunTests as ce}from"./testExplorerActions.js";import{TestingDecorations as ge,TestingDecorationService as le}from"./testingDecorations.js";import{TestingExplorerView as de}from"./testingExplorerView.js";import{CloseTestPeek as pe,CollapsePeekStack as ue,GoToNextMessageAction as fe,GoToPreviousMessageAction as Te,OpenMessageInEditorAction as Ce,TestingOutputPeekController as Ie,TestingPeekOpener as F,TestResultsView as we,ToggleTestingPeekHistory as ve}from"./testingOutputPeek.js";import{TestingProgressTrigger as ye}from"./testingProgressUiService.js";import{TestingViewPaneContainer as Re}from"./testingViewPaneContainer.js";import"./testingConfigurationUi.js";n(T,ne,o.Delayed),n(ie,oe,o.Delayed),n(ee,te,o.Delayed),n(H,U,o.Delayed),n(Y,Z,o.Delayed),n(A,re,o.Delayed),n(E,X,o.Delayed),n(P,F,o.Delayed),n(D,le,o.Delayed);const Ve=m.as(V.ViewContainersRegistry).registerViewContainer({id:t.ViewletId,title:l("test","Testing"),ctorDescriptor:new d(Re),icon:b,alwaysUseContainerInfo:!0,order:6,openCommandActionDescriptor:{id:t.ViewletId,mnemonicTitle:y({key:"miViewTesting",comment:["&& denotes a mnemonic"]},"T&&esting"),order:4},hideIfEmpty:!0},x.Sidebar),Se=m.as(V.ViewContainersRegistry).registerViewContainer({id:t.ResultsPanelId,title:l("testResultsPanelName","Test Results"),icon:W,ctorDescriptor:new d($,[t.ResultsPanelId,{mergeViewWithContainerWhenSingleView:!0}]),hideIfEmpty:!0,order:3},x.Panel,{doNotRegisterOpenCommand:!0}),C=m.as(V.ViewsRegistry);C.registerViews([{id:t.ResultsViewId,name:l("testResultsPanelName","Test Results"),containerIcon:W,canToggleVisibility:!1,canMoveView:!0,when:h.hasAnyResults.isEqualTo(!0),ctorDescriptor:new d(we)}],Se),C.registerViewWelcomeContent(t.ExplorerViewId,{content:y("noTestProvidersRegistered","No tests have been found in this workspace yet.")}),C.registerViewWelcomeContent(t.ExplorerViewId,{content:"["+y("searchForAdditionalTestExtensions","Install Additional Test Extensions...")+`](command:${q.SearchForTestExtension})`,order:10}),C.registerViews([{id:t.ExplorerViewId,name:l("testExplorer","Test Explorer"),ctorDescriptor:new d(de),canToggleVisibility:!0,canMoveView:!0,weight:80,order:-999,containerIcon:b,when:M.greater(h.providerCount.key,0)},{id:t.CoverageViewId,name:l("testCoverage","Test Coverage"),ctorDescriptor:new d(ae),canToggleVisibility:!0,canMoveView:!0,weight:80,order:-998,containerIcon:b,when:h.isTestCoverageOpen}],Ve),me.forEach(a),a(Ce),a(Te),a(fe),a(pe),a(ve),a(ue),m.as(R.Workbench).registerWorkbenchContribution(Q,S.Restored),m.as(R.Workbench).registerWorkbenchContribution(F,S.Eventually),m.as(R.Workbench).registerWorkbenchContribution(ye,S.Eventually),v(t.OutputPeekContributionId,Ie,w.AfterFirstRender),v(t.DecorationsContributionId,ge,w.AfterFirstRender),v(t.CoverageDecorationsContributionId,se,w.Eventually),f.registerCommand({id:"_revealTestInExplorer",handler:async(e,r,i)=>{e.get(E).reveal.value=typeof r=="string"?r:r.extId,e.get(z).openView(t.ExplorerViewId,i)}}),f.registerCommand({id:"vscode.peekTestError",handler:async(e,r)=>{const i=e.get(A).getStateById(r);if(!i)return!1;const[s,c]=i,p=e.get(P);if(p.tryPeekFirstError(s,c))return!0;for(const u of s.tests)if(j.compare(c.item.extId,u.item.extId)===J.IsChild&&p.tryPeekFirstError(s,u))return!0;return!1}}),f.registerCommand({id:"vscode.revealTest",handler:async(e,r)=>{const i=e.get(T).collection.getNodeById(r);if(!i)return;const s=e.get(O),c=e.get(B),p=e.get(L),{range:u,uri:g}=i.item;if(!g)return;const I=e.get(D).getDecoratedTestPosition(g,r)||u?.getStartPosition();e.get(E).reveal.value=r,e.get(P).closeAllPeeks();let k=!0;try{(await c.stat(g)).isFile||(k=!1)}catch{}if(!k){await s.executeCommand(G,g);return}await p.open(I?g.with({fragment:`L${I.lineNumber}:${I.column}`}):g)}}),f.registerCommand({id:"vscode.runTestsById",handler:async(e,r,...i)=>{const s=e.get(T);await ce(e.get(T).collection,e.get(_),i,c=>s.runTests({group:r,tests:c}))}}),m.as(N.Configuration).registerConfiguration(K);
