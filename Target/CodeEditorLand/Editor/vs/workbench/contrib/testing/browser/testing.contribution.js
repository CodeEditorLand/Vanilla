import{EditorContributionInstantiation as w,registerEditorContribution as v}from"../../../../../vs/editor/browser/editorExtensions.js";import{localize as y,localize2 as l}from"../../../../../vs/nls.js";import{registerAction2 as c}from"../../../../../vs/platform/actions/common/actions.js";import{CommandsRegistry as f,ICommandService as O}from"../../../../../vs/platform/commands/common/commands.js";import{Extensions as N}from"../../../../../vs/platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as M}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IFileService as B}from"../../../../../vs/platform/files/common/files.js";import{SyncDescriptor as d}from"../../../../../vs/platform/instantiation/common/descriptors.js";import{InstantiationType as o,registerSingleton as n}from"../../../../../vs/platform/instantiation/common/extensions.js";import"../../../../../vs/platform/instantiation/common/instantiation.js";import{IOpenerService as L}from"../../../../../vs/platform/opener/common/opener.js";import{IProgressService as _}from"../../../../../vs/platform/progress/common/progress.js";import{Registry as a}from"../../../../../vs/platform/registry/common/platform.js";import{ViewPaneContainer as $}from"../../../../../vs/workbench/browser/parts/views/viewPaneContainer.js";import{Extensions as R}from"../../../../../vs/workbench/common/contributions.js";import{Extensions as V,ViewContainerLocation as x}from"../../../../../vs/workbench/common/views.js";import{REVEAL_IN_EXPLORER_COMMAND_ID as z}from"../../../../../vs/workbench/contrib/files/browser/fileConstants.js";import{CodeCoverageDecorations as G}from"../../../../../vs/workbench/contrib/testing/browser/codeCoverageDecorations.js";import{testingResultsIcon as D,testingViewIcon as S}from"../../../../../vs/workbench/contrib/testing/browser/icons.js";import{TestCoverageView as K}from"../../../../../vs/workbench/contrib/testing/browser/testCoverageView.js";import{TestingDecorations as q,TestingDecorationService as H}from"../../../../../vs/workbench/contrib/testing/browser/testingDecorations.js";import{TestingExplorerView as U}from"../../../../../vs/workbench/contrib/testing/browser/testingExplorerView.js";import{CloseTestPeek as X,GoToNextMessageAction as j,GoToPreviousMessageAction as J,OpenMessageInEditorAction as Q,TestingOutputPeekController as Y,TestingPeekOpener as A,TestResultsView as Z,ToggleTestingPeekHistory as ee}from"../../../../../vs/workbench/contrib/testing/browser/testingOutputPeek.js";import{TestingProgressTrigger as te}from"../../../../../vs/workbench/contrib/testing/browser/testingProgressUiService.js";import{TestingViewPaneContainer as re}from"../../../../../vs/workbench/contrib/testing/browser/testingViewPaneContainer.js";import{testingConfiguration as ie}from"../../../../../vs/workbench/contrib/testing/common/configuration.js";import{TestCommandId as oe,Testing as t}from"../../../../../vs/workbench/contrib/testing/common/constants.js";import{ITestCoverageService as ne,TestCoverageService as se}from"../../../../../vs/workbench/contrib/testing/common/testCoverageService.js";import{ITestExplorerFilterState as E,TestExplorerFilterState as ae}from"../../../../../vs/workbench/contrib/testing/common/testExplorerFilterState.js";import{TestId as me,TestPosition as ge}from"../../../../../vs/workbench/contrib/testing/common/testId.js";import{TestingContentProvider as ce}from"../../../../../vs/workbench/contrib/testing/common/testingContentProvider.js";import{TestingContextKeys as h}from"../../../../../vs/workbench/contrib/testing/common/testingContextKeys.js";import{ITestingContinuousRunService as le,TestingContinuousRunService as de}from"../../../../../vs/workbench/contrib/testing/common/testingContinuousRunService.js";import{ITestingDecorationsService as W}from"../../../../../vs/workbench/contrib/testing/common/testingDecorations.js";import{ITestingPeekOpener as b}from"../../../../../vs/workbench/contrib/testing/common/testingPeekOpener.js";import{ITestProfileService as pe,TestProfileService as ue}from"../../../../../vs/workbench/contrib/testing/common/testProfileService.js";import{ITestResultService as F,TestResultService as fe}from"../../../../../vs/workbench/contrib/testing/common/testResultService.js";import{ITestResultStorage as Te,TestResultStorage as Ce}from"../../../../../vs/workbench/contrib/testing/common/testResultStorage.js";import{ITestService as T}from"../../../../../vs/workbench/contrib/testing/common/testService.js";import{TestService as Ie}from"../../../../../vs/workbench/contrib/testing/common/testServiceImpl.js";import"../../../../../vs/workbench/contrib/testing/common/testTypes.js";import{LifecyclePhase as P}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";import{IViewsService as we}from"../../../../../vs/workbench/services/views/common/viewsService.js";import{allTestActions as ve,discoverAndRunTests as ye}from"./testExplorerActions.js";import"./testingConfigurationUi.js";n(T,Ie,o.Delayed),n(Te,Ce,o.Delayed),n(pe,ue,o.Delayed),n(ne,se,o.Delayed),n(le,de,o.Delayed),n(F,fe,o.Delayed),n(E,ae,o.Delayed),n(b,A,o.Delayed),n(W,H,o.Delayed);const Re=a.as(V.ViewContainersRegistry).registerViewContainer({id:t.ViewletId,title:l("test","Testing"),ctorDescriptor:new d(re),icon:S,alwaysUseContainerInfo:!0,order:6,openCommandActionDescriptor:{id:t.ViewletId,mnemonicTitle:y({key:"miViewTesting",comment:["&& denotes a mnemonic"]},"T&&esting"),order:4},hideIfEmpty:!0},x.Sidebar),Ve=a.as(V.ViewContainersRegistry).registerViewContainer({id:t.ResultsPanelId,title:l("testResultsPanelName","Test Results"),icon:D,ctorDescriptor:new d($,[t.ResultsPanelId,{mergeViewWithContainerWhenSingleView:!0}]),hideIfEmpty:!0,order:3},x.Panel,{doNotRegisterOpenCommand:!0}),C=a.as(V.ViewsRegistry);C.registerViews([{id:t.ResultsViewId,name:l("testResultsPanelName","Test Results"),containerIcon:D,canToggleVisibility:!1,canMoveView:!0,when:h.hasAnyResults.isEqualTo(!0),ctorDescriptor:new d(Z)}],Ve),C.registerViewWelcomeContent(t.ExplorerViewId,{content:y("noTestProvidersRegistered","No tests have been found in this workspace yet.")}),C.registerViewWelcomeContent(t.ExplorerViewId,{content:"["+y("searchForAdditionalTestExtensions","Install Additional Test Extensions...")+`](command:${oe.SearchForTestExtension})`,order:10}),C.registerViews([{id:t.ExplorerViewId,name:l("testExplorer","Test Explorer"),ctorDescriptor:new d(U),canToggleVisibility:!0,canMoveView:!0,weight:80,order:-999,containerIcon:S,when:M.greater(h.providerCount.key,0)},{id:t.CoverageViewId,name:l("testCoverage","Test Coverage"),ctorDescriptor:new d(K),canToggleVisibility:!0,canMoveView:!0,weight:80,order:-998,containerIcon:S,when:h.isTestCoverageOpen}],Re),ve.forEach(c),c(Q),c(J),c(j),c(X),c(ee),a.as(R.Workbench).registerWorkbenchContribution(ce,P.Restored),a.as(R.Workbench).registerWorkbenchContribution(A,P.Eventually),a.as(R.Workbench).registerWorkbenchContribution(te,P.Eventually),v(t.OutputPeekContributionId,Y,w.AfterFirstRender),v(t.DecorationsContributionId,q,w.AfterFirstRender),v(t.CoverageDecorationsContributionId,G,w.Eventually),f.registerCommand({id:"_revealTestInExplorer",handler:async(e,r,i)=>{e.get(E).reveal.value=typeof r=="string"?r:r.extId,e.get(we).openView(t.ExplorerViewId,i)}}),f.registerCommand({id:"vscode.peekTestError",handler:async(e,r)=>{const i=e.get(F).getStateById(r);if(!i)return!1;const[s,m]=i,p=e.get(b);if(p.tryPeekFirstError(s,m))return!0;for(const u of s.tests)if(me.compare(m.item.extId,u.item.extId)===ge.IsChild&&p.tryPeekFirstError(s,u))return!0;return!1}}),f.registerCommand({id:"vscode.revealTest",handler:async(e,r)=>{const i=e.get(T).collection.getNodeById(r);if(!i)return;const s=e.get(O),m=e.get(B),p=e.get(L),{range:u,uri:g}=i.item;if(!g)return;const I=e.get(W).getDecoratedTestPosition(g,r)||u?.getStartPosition();e.get(E).reveal.value=r,e.get(b).closeAllPeeks();let k=!0;try{(await m.stat(g)).isFile||(k=!1)}catch{}if(!k){await s.executeCommand(z,g);return}await p.open(I?g.with({fragment:`L${I.lineNumber}:${I.column}`}):g)}}),f.registerCommand({id:"vscode.runTestsById",handler:async(e,r,...i)=>{const s=e.get(T);await ye(e.get(T).collection,e.get(_),i,m=>s.runTests({group:r,tests:m}))}}),a.as(N.Configuration).registerConfiguration(ie);
