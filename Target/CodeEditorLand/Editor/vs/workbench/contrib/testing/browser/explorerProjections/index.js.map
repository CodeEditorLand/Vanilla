{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/explorerProjections/index.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IIdentityProvider } from \"../../../../../base/browser/ui/list/list.js\";\nimport type { ObjectTree } from \"../../../../../base/browser/ui/tree/objectTree.js\";\nimport {\n\ttype IObjectTreeElement,\n\tObjectTreeElementCollapseState,\n} from \"../../../../../base/browser/ui/tree/tree.js\";\nimport { Emitter, type Event } from \"../../../../../base/common/event.js\";\nimport type { FuzzyScore } from \"../../../../../base/common/filters.js\";\nimport type { IMarkdownString } from \"../../../../../base/common/htmlContent.js\";\nimport { Iterable } from \"../../../../../base/common/iterator.js\";\nimport type { IDisposable } from \"../../../../../base/common/lifecycle.js\";\nimport { MarshalledId } from \"../../../../../base/common/marshallingIds.js\";\nimport {\n\ttype ITestItemContext,\n\tInternalTestItem,\n\tTestItemExpandState,\n\tTestResultState,\n} from \"../../common/testTypes.js\";\nimport {\n\ttype ISerializedTestTreeCollapseState,\n\tisCollapsedInSerializedTestTree,\n} from \"./testingViewState.js\";\n\n/**\n * Describes a rendering of tests in the explorer view. Different\n * implementations of this are used for trees and lists, and groupings.\n * Originally this was implemented as inline logic within the ViewModel and\n * using a single IncrementalTestChangeCollector, but this became hairy\n * with status projections.\n */\nexport interface ITestTreeProjection extends IDisposable {\n\t/**\n\t * Event that fires when the projection changes.\n\t */\n\tonUpdate: Event<void>;\n\n\t/**\n\t * State to use for applying default collapse state of items.\n\t */\n\tlastState: ISerializedTestTreeCollapseState;\n\n\t/**\n\t * Fired when an element in the tree is expanded.\n\t */\n\texpandElement(element: TestItemTreeElement, depth: number): void;\n\n\t/**\n\t * Gets an element by its extension-assigned ID.\n\t */\n\tgetElementByTestId(testId: string): TestItemTreeElement | undefined;\n\n\t/**\n\t * Applies pending update to the tree.\n\t */\n\tapplyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>): void;\n}\n\nlet idCounter = 0;\n\nconst getId = () => String(idCounter++);\n\nexport abstract class TestItemTreeElement {\n\tprotected readonly changeEmitter = new Emitter<void>();\n\n\t/**\n\t * Fired whenever the element or test properties change.\n\t */\n\tpublic readonly onChange = this.changeEmitter.event;\n\n\t/**\n\t * Tree children of this item.\n\t */\n\tpublic readonly children = new Set<TestExplorerTreeElement>();\n\n\t/**\n\t * Unique ID of the element in the tree.\n\t */\n\tpublic readonly treeId = getId();\n\n\t/**\n\t * Depth of the element in the tree.\n\t */\n\tpublic depth: number = this.parent ? this.parent.depth + 1 : 0;\n\n\t/**\n\t * Whether the node's test result is 'retired' -- from an outdated test run.\n\t */\n\tpublic retired = false;\n\n\t/**\n\t * State to show on the item. This is generally the item's computed state\n\t * from its children.\n\t */\n\tpublic state = TestResultState.Unset;\n\n\t/**\n\t * Time it took this test/item to run.\n\t */\n\tpublic duration: number | undefined;\n\n\t/**\n\t * Tree element description.\n\t */\n\tpublic abstract description: string | null;\n\n\tconstructor(\n\t\tpublic readonly test: InternalTestItem,\n\t\t/**\n\t\t * Parent tree item. May not actually be the test item who owns this one\n\t\t * in a 'flat' projection.\n\t\t */\n\t\tpublic readonly parent: TestItemTreeElement | null = null,\n\t) {}\n\n\tpublic toJSON() {\n\t\tif (this.depth === 0) {\n\t\t\treturn { controllerId: this.test.controllerId };\n\t\t}\n\n\t\tconst context: ITestItemContext = {\n\t\t\t$mid: MarshalledId.TestItemContext,\n\t\t\ttests: [InternalTestItem.serialize(this.test)],\n\t\t};\n\n\t\tfor (let p = this.parent; p && p.depth > 0; p = p.parent) {\n\t\t\tcontext.tests.unshift(InternalTestItem.serialize(p.test));\n\t\t}\n\n\t\treturn context;\n\t}\n}\n\nexport class TestTreeErrorMessage {\n\tpublic readonly treeId = getId();\n\tpublic readonly children = new Set<never>();\n\n\tpublic get description() {\n\t\treturn typeof this.message === \"string\"\n\t\t\t? this.message\n\t\t\t: this.message.value;\n\t}\n\n\tconstructor(\n\t\tpublic readonly message: string | IMarkdownString,\n\t\tpublic readonly parent: TestExplorerTreeElement,\n\t) {}\n}\n\nexport type TestExplorerTreeElement =\n\t| TestItemTreeElement\n\t| TestTreeErrorMessage;\n\nexport const testIdentityProvider: IIdentityProvider<TestExplorerTreeElement> =\n\t{\n\t\tgetId(element) {\n\t\t\t// For \"not expandable\" elements, whether they have children is part of the\n\t\t\t// ID so they're rerendered if that changes (#204805)\n\t\t\tconst expandComponent =\n\t\t\t\telement instanceof TestTreeErrorMessage\n\t\t\t\t\t? \"error\"\n\t\t\t\t\t: element.test.expand === TestItemExpandState.NotExpandable\n\t\t\t\t\t\t? !!element.children.size\n\t\t\t\t\t\t: element.test.expand;\n\n\t\t\treturn element.treeId + \"\\0\" + expandComponent;\n\t\t},\n\t};\n\nexport const getChildrenForParent = (\n\tserialized: ISerializedTestTreeCollapseState,\n\trootsWithChildren: Iterable<TestExplorerTreeElement>,\n\tnode: TestExplorerTreeElement | null,\n): Iterable<IObjectTreeElement<TestExplorerTreeElement>> => {\n\tlet it: Iterable<TestExplorerTreeElement>;\n\tif (node === null) {\n\t\t// roots\n\t\tconst rootsWithChildrenArr = [...rootsWithChildren];\n\t\tif (rootsWithChildrenArr.length === 1) {\n\t\t\treturn getChildrenForParent(\n\t\t\t\tserialized,\n\t\t\t\trootsWithChildrenArr,\n\t\t\t\trootsWithChildrenArr[0],\n\t\t\t);\n\t\t}\n\t\tit = rootsWithChildrenArr;\n\t} else {\n\t\tit = node.children;\n\t}\n\n\treturn Iterable.map(it, (element) =>\n\t\telement instanceof TestTreeErrorMessage\n\t\t\t? { element }\n\t\t\t: {\n\t\t\t\t\telement,\n\t\t\t\t\tcollapsible:\n\t\t\t\t\t\telement.test.expand !==\n\t\t\t\t\t\tTestItemExpandState.NotExpandable,\n\t\t\t\t\tcollapsed: element.test.item.error\n\t\t\t\t\t\t? ObjectTreeElementCollapseState.PreserveOrExpanded\n\t\t\t\t\t\t: (isCollapsedInSerializedTestTree(\n\t\t\t\t\t\t\t\t\tserialized,\n\t\t\t\t\t\t\t\t\telement.test.item.extId,\n\t\t\t\t\t\t\t\t) ?? element.depth > 0)\n\t\t\t\t\t\t\t? ObjectTreeElementCollapseState.PreserveOrCollapsed\n\t\t\t\t\t\t\t: ObjectTreeElementCollapseState.PreserveOrExpanded,\n\t\t\t\t\tchildren: getChildrenForParent(\n\t\t\t\t\t\tserialized,\n\t\t\t\t\t\trootsWithChildren,\n\t\t\t\t\t\telement,\n\t\t\t\t\t),\n\t\t\t\t},\n\t);\n};\n"],
  "mappings": ";;AAOA;AAAA,EAEC;AAAA,OACM;AACP,SAAS,eAA2B;AAGpC,SAAS,gBAAgB;AAEzB,SAAS,oBAAoB;AAC7B;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AAoCP,IAAI,YAAY;AAEhB,MAAM,QAAQ,6BAAM,OAAO,WAAW,GAAxB;AAEP,MAAe,oBAAoB;AAAA,EA4CzC,YACiB,MAKA,SAAqC,MACpD;AANe;AAKA;AAAA,EACd;AAAA,EArHJ,OAkE0C;AAAA;AAAA;AAAA,EACtB,gBAAgB,IAAI,QAAc;AAAA;AAAA;AAAA;AAAA,EAKrC,WAAW,KAAK,cAAc;AAAA;AAAA;AAAA;AAAA,EAK9B,WAAW,oBAAI,IAA6B;AAAA;AAAA;AAAA;AAAA,EAK5C,SAAS,MAAM;AAAA;AAAA;AAAA;AAAA,EAKxB,QAAgB,KAAK,SAAS,KAAK,OAAO,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA,EAKtD,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAMV,QAAQ,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAKxB;AAAA,EAgBA,SAAS;AACf,QAAI,KAAK,UAAU,GAAG;AACrB,aAAO,EAAE,cAAc,KAAK,KAAK,aAAa;AAAA,IAC/C;AAEA,UAAM,UAA4B;AAAA,MACjC,MAAM,aAAa;AAAA,MACnB,OAAO,CAAC,iBAAiB,UAAU,KAAK,IAAI,CAAC;AAAA,IAC9C;AAEA,aAAS,IAAI,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG,IAAI,EAAE,QAAQ;AACzD,cAAQ,MAAM,QAAQ,iBAAiB,UAAU,EAAE,IAAI,CAAC;AAAA,IACzD;AAEA,WAAO;AAAA,EACR;AACD;AAEO,MAAM,qBAAqB;AAAA,EAUjC,YACiB,SACA,QACf;AAFe;AACA;AAAA,EACd;AAAA,EAtJJ,OAyIkC;AAAA;AAAA;AAAA,EACjB,SAAS,MAAM;AAAA,EACf,WAAW,oBAAI,IAAW;AAAA,EAE1C,IAAW,cAAc;AACxB,WAAO,OAAO,KAAK,YAAY,WAC5B,KAAK,UACL,KAAK,QAAQ;AAAA,EACjB;AAMD;AAMO,MAAM,uBACZ;AAAA,EACC,MAAM,SAAS;AAGd,UAAM,kBACL,mBAAmB,uBAChB,UACA,QAAQ,KAAK,WAAW,oBAAoB,gBAC3C,CAAC,CAAC,QAAQ,SAAS,OACnB,QAAQ,KAAK;AAElB,WAAO,QAAQ,SAAS,OAAO;AAAA,EAChC;AACD;AAEM,MAAM,uBAAuB,wBACnC,YACA,mBACA,SAC2D;AAC3D,MAAI;AACJ,MAAI,SAAS,MAAM;AAElB,UAAM,uBAAuB,CAAC,GAAG,iBAAiB;AAClD,QAAI,qBAAqB,WAAW,GAAG;AACtC,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA,qBAAqB,CAAC;AAAA,MACvB;AAAA,IACD;AACA,SAAK;AAAA,EACN,OAAO;AACN,SAAK,KAAK;AAAA,EACX;AAEA,SAAO,SAAS;AAAA,IAAI;AAAA,IAAI,CAAC,YACxB,mBAAmB,uBAChB,EAAE,QAAQ,IACV;AAAA,MACA;AAAA,MACA,aACC,QAAQ,KAAK,WACb,oBAAoB;AAAA,MACrB,WAAW,QAAQ,KAAK,KAAK,QAC1B,+BAA+B,qBAC9B;AAAA,QACA;AAAA,QACA,QAAQ,KAAK,KAAK;AAAA,MACnB,KAAK,QAAQ,QAAQ,IACpB,+BAA+B,sBAC/B,+BAA+B;AAAA,MACnC,UAAU;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACH;AACD,GA5CoC;",
  "names": []
}
