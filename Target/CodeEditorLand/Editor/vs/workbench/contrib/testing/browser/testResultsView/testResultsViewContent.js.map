{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testResultsView/testResultsViewContent.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { StandardKeyboardEvent } from '../../../../../base/browser/keyboardEvent.js';\nimport { renderLabelWithIcons } from '../../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { Orientation, Sizing, SplitView } from '../../../../../base/browser/ui/splitview/splitview.js';\nimport { findAsync } from '../../../../../base/common/arrays.js';\nimport { Limiter } from '../../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { Emitter, Event, Relay } from '../../../../../base/common/event.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { observableValue } from '../../../../../base/common/observable.js';\nimport './testResultsViewContent.css';\nimport { ICodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { localize } from '../../../../../nls.js';\nimport { FloatingClickMenu } from '../../../../../platform/actions/browser/floatingMenu.js';\nimport { createActionViewItem } from '../../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { MenuWorkbenchToolBar } from '../../../../../platform/actions/browser/toolbar.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IContextKey, IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { IQuickInputService } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { CustomStackFrame } from '../../../debug/browser/callStackWidget.js';\nimport * as icons from '../icons.js';\nimport { TestResultStackWidget } from './testMessageStack.js';\nimport { DiffContentProvider, IPeekOutputRenderer, MarkdownTestMessagePeek, PlainTextMessagePeek, TerminalMessagePeek } from './testResultsOutput.js';\nimport { equalsSubject, getSubjectTestItem, InspectSubject, MessageSubject, TaskSubject, TestOutputSubject } from './testResultsSubject.js';\nimport { OutputPeekTree } from './testResultsTree.js';\nimport { TestCommandId } from '../../common/constants.js';\nimport { IObservableValue } from '../../common/observableValue.js';\nimport { capabilityContextKeys, ITestProfileService } from '../../common/testProfileService.js';\nimport { LiveTestResult } from '../../common/testResult.js';\nimport { ITestFollowup, ITestService } from '../../common/testService.js';\nimport { ITestMessageStackFrame, TestRunProfileBitset } from '../../common/testTypes.js';\nimport { TestingContextKeys } from '../../common/testingContextKeys.js';\n\nconst enum SubView {\n\tDiff = 0,\n\tHistory = 1,\n}\n\n/** UI state that can be saved/restored, used to give a nice experience when switching stack frames */\nexport interface ITestResultsViewContentUiState {\n\tsplitViewWidths: number[];\n}\n\nclass MessageStackFrame extends CustomStackFrame {\n\tpublic override height = observableValue('MessageStackFrame.height', 100);\n\tpublic override label: string;\n\tpublic override icon = icons.testingViewIcon;\n\n\tconstructor(\n\t\tprivate readonly message: HTMLElement,\n\t\tprivate readonly followup: FollowupActionWidget,\n\t\tprivate readonly subject: InspectSubject,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ITestProfileService private readonly profileService: ITestProfileService,\n\t) {\n\t\tsuper();\n\n\t\tthis.label = subject instanceof MessageSubject\n\t\t\t? subject.test.label\n\t\t\t: subject instanceof TestOutputSubject\n\t\t\t\t? subject.test.item.label\n\t\t\t\t: subject.result.name;\n\t}\n\n\tpublic override render(container: HTMLElement): IDisposable {\n\t\tthis.message.style.visibility = 'visible';\n\t\tcontainer.appendChild(this.message);\n\t\treturn toDisposable(() => this.message.remove());\n\t}\n\n\tpublic override renderActions(container: HTMLElement): IDisposable {\n\t\tconst store = new DisposableStore();\n\n\t\tcontainer.appendChild(this.followup.domNode);\n\t\tstore.add(toDisposable(() => this.followup.domNode.remove()));\n\n\t\tconst test = getSubjectTestItem(this.subject);\n\t\tconst capabilities = test && this.profileService.capabilitiesForTest(test);\n\t\tlet contextKeyService: IContextKeyService;\n\t\tif (capabilities) {\n\t\t\tcontextKeyService = this.contextKeyService.createOverlay(capabilityContextKeys(capabilities));\n\t\t} else {\n\t\t\tconst profiles = this.profileService.getControllerProfiles(this.subject.controllerId);\n\t\t\tcontextKeyService = this.contextKeyService.createOverlay([\n\t\t\t\t[TestingContextKeys.hasRunnableTests.key, profiles.some(p => p.group & TestRunProfileBitset.Run)],\n\t\t\t\t[TestingContextKeys.hasDebuggableTests.key, profiles.some(p => p.group & TestRunProfileBitset.Debug)],\n\t\t\t]);\n\t\t}\n\n\t\tconst instaService = store.add(this.instantiationService.createChild(new ServiceCollection([IContextKeyService, contextKeyService])));\n\n\t\tconst toolbar = store.add(instaService.createInstance(MenuWorkbenchToolBar, container, MenuId.TestCallStack, {\n\t\t\tmenuOptions: { shouldForwardArgs: true },\n\t\t\tactionViewItemProvider: (action, options) => createActionViewItem(this.instantiationService, action, options),\n\t\t}));\n\t\ttoolbar.context = this.subject;\n\t\tstore.add(toolbar);\n\n\t\treturn store;\n\t}\n}\n\nfunction runInLast(accessor: ServicesAccessor, bitset: TestRunProfileBitset, subject: InspectSubject) {\n\t// Let the full command do its thing if we want to run the whole set of tests\n\tif (subject instanceof TaskSubject) {\n\t\treturn accessor.get(ICommandService).executeCommand(\n\t\t\tbitset === TestRunProfileBitset.Debug ? TestCommandId.DebugLastRun : TestCommandId.ReRunLastRun,\n\t\t\tsubject.result.id,\n\t\t);\n\t}\n\n\tconst testService = accessor.get(ITestService);\n\tconst plainTest = subject instanceof MessageSubject ? subject.test : subject.test.item;\n\tconst currentTest = testService.collection.getNodeById(plainTest.extId);\n\tif (!currentTest) {\n\t\treturn;\n\t}\n\n\treturn testService.runTests({\n\t\tgroup: bitset,\n\t\ttests: [currentTest],\n\t});\n}\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.callStack.run',\n\t\t\ttitle: localize('testing.callStack.run', \"Rerun Test\"),\n\t\t\ticon: icons.testingRunIcon,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestCallStack,\n\t\t\t\twhen: TestingContextKeys.hasRunnableTests,\n\t\t\t\tgroup: 'navigation',\n\t\t\t},\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, subject: InspectSubject): void {\n\t\trunInLast(accessor, TestRunProfileBitset.Run, subject);\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'testing.callStack.debug',\n\t\t\ttitle: localize('testing.callStack.debug', \"Debug Test\"),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestCallStack,\n\t\t\t\twhen: TestingContextKeys.hasDebuggableTests,\n\t\t\t\tgroup: 'navigation',\n\t\t\t},\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, subject: InspectSubject): void {\n\t\trunInLast(accessor, TestRunProfileBitset.Debug, subject);\n\t}\n});\n\nexport class TestResultsViewContent extends Disposable {\n\tprivate static lastSplitWidth?: number;\n\n\tprivate readonly didReveal = this._register(new Emitter<{ subject: InspectSubject; preserveFocus: boolean }>());\n\tprivate readonly currentSubjectStore = this._register(new DisposableStore());\n\tprivate readonly onCloseEmitter = this._register(new Relay<void>());\n\tprivate followupWidget!: FollowupActionWidget;\n\tprivate messageContextKeyService!: IContextKeyService;\n\tprivate contextKeyTestMessage!: IContextKey<string>;\n\tprivate contextKeyResultOutdated!: IContextKey<boolean>;\n\tprivate stackContainer!: HTMLElement;\n\tprivate callStackWidget!: TestResultStackWidget;\n\tprivate currentTopFrame?: MessageStackFrame;\n\tprivate isDoingLayoutUpdate?: boolean;\n\n\tprivate dimension?: dom.Dimension;\n\tprivate splitView!: SplitView;\n\tprivate messageContainer!: HTMLElement;\n\tprivate contentProviders!: IPeekOutputRenderer[];\n\tprivate contentProvidersUpdateLimiter = this._register(new Limiter(1));\n\n\tpublic current?: InspectSubject;\n\n\t/** Fired when a tree item is selected. Populated only on .fillBody() */\n\tpublic onDidRequestReveal!: Event<InspectSubject>;\n\n\tpublic readonly onClose = this.onCloseEmitter.event;\n\n\tpublic get uiState(): ITestResultsViewContentUiState {\n\t\treturn {\n\t\t\tsplitViewWidths: Array.from(\n\t\t\t\t{ length: this.splitView.length },\n\t\t\t\t(_, i) => this.splitView.getViewSize(i)\n\t\t\t),\n\t\t};\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\tprivate readonly options: {\n\t\t\thistoryVisible: IObservableValue<boolean>;\n\t\t\tshowRevealLocationOnMessages: boolean;\n\t\t\tlocationForProgress: string;\n\t\t},\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService protected readonly modelService: ITextModelService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic fillBody(containerElement: HTMLElement): void {\n\t\tconst initialSpitWidth = TestResultsViewContent.lastSplitWidth;\n\t\tthis.splitView = new SplitView(containerElement, { orientation: Orientation.HORIZONTAL });\n\n\t\tconst { historyVisible, showRevealLocationOnMessages } = this.options;\n\t\tconst isInPeekView = this.editor !== undefined;\n\n\t\tconst messageContainer = this.messageContainer = dom.$('.test-output-peek-message-container');\n\t\tthis.stackContainer = dom.append(containerElement, dom.$('.test-output-call-stack-container'));\n\t\tthis.callStackWidget = this._register(this.instantiationService.createInstance(TestResultStackWidget, this.stackContainer, this.editor));\n\t\tthis.followupWidget = this._register(this.instantiationService.createInstance(FollowupActionWidget, this.editor));\n\t\tthis.onCloseEmitter.input = this.followupWidget.onClose;\n\n\t\tthis.contentProviders = [\n\t\t\tthis._register(this.instantiationService.createInstance(DiffContentProvider, this.editor, messageContainer)),\n\t\t\tthis._register(this.instantiationService.createInstance(MarkdownTestMessagePeek, messageContainer)),\n\t\t\tthis._register(this.instantiationService.createInstance(TerminalMessagePeek, messageContainer, isInPeekView)),\n\t\t\tthis._register(this.instantiationService.createInstance(PlainTextMessagePeek, this.editor, messageContainer)),\n\t\t];\n\n\t\tthis.messageContextKeyService = this._register(this.contextKeyService.createScoped(containerElement));\n\t\tthis.contextKeyTestMessage = TestingContextKeys.testMessageContext.bindTo(this.messageContextKeyService);\n\t\tthis.contextKeyResultOutdated = TestingContextKeys.testResultOutdated.bindTo(this.messageContextKeyService);\n\n\t\tconst treeContainer = dom.append(containerElement, dom.$('.test-output-peek-tree'));\n\t\tconst tree = this._register(this.instantiationService.createInstance(\n\t\t\tOutputPeekTree,\n\t\t\ttreeContainer,\n\t\t\tthis.didReveal.event,\n\t\t\t{ showRevealLocationOnMessages, locationForProgress: this.options.locationForProgress },\n\t\t));\n\n\t\tthis.onDidRequestReveal = tree.onDidRequestReview;\n\n\t\tthis.splitView.addView({\n\t\t\tonDidChange: Event.None,\n\t\t\telement: this.stackContainer,\n\t\t\tminimumSize: 200,\n\t\t\tmaximumSize: Number.MAX_VALUE,\n\t\t\tlayout: width => {\n\t\t\t\tTestResultsViewContent.lastSplitWidth = width;\n\n\t\t\t\tif (this.dimension) {\n\t\t\t\t\tthis.callStackWidget?.layout(this.dimension.height, width);\n\t\t\t\t\tthis.layoutContentWidgets(this.dimension, width);\n\t\t\t\t}\n\t\t\t},\n\t\t}, Sizing.Distribute);\n\n\t\tthis.splitView.addView({\n\t\t\tonDidChange: Event.None,\n\t\t\telement: treeContainer,\n\t\t\tminimumSize: 100,\n\t\t\tmaximumSize: Number.MAX_VALUE,\n\t\t\tlayout: width => {\n\t\t\t\tif (this.dimension) {\n\t\t\t\t\ttree.layout(this.dimension.height, width);\n\t\t\t\t}\n\t\t\t},\n\t\t}, Sizing.Distribute);\n\n\n\t\tthis.splitView.setViewVisible(SubView.History, historyVisible.value);\n\t\tthis._register(historyVisible.onDidChange(visible => {\n\t\t\tthis.splitView.setViewVisible(SubView.History, visible);\n\t\t}));\n\n\t\tif (initialSpitWidth) {\n\t\t\tqueueMicrotask(() => this.splitView.resizeView(0, initialSpitWidth));\n\t\t}\n\t}\n\n\t/**\n\t * Shows a message in-place without showing or changing the peek location.\n\t * This is mostly used if peeking a message without a location.\n\t */\n\tpublic reveal(opts: {\n\t\tsubject: InspectSubject;\n\t\tpreserveFocus: boolean;\n\t}) {\n\t\tthis.didReveal.fire(opts);\n\n\t\tif (this.current && equalsSubject(this.current, opts.subject)) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.current = opts.subject;\n\t\treturn this.contentProvidersUpdateLimiter.queue(async () => {\n\t\t\tthis.currentSubjectStore.clear();\n\t\t\tconst callFrames = this.getCallFrames(opts.subject) || [];\n\t\t\tconst topFrame = await this.prepareTopFrame(opts.subject, callFrames);\n\t\t\tthis.callStackWidget.update(topFrame, callFrames);\n\n\t\t\tthis.followupWidget.show(opts.subject);\n\t\t\tthis.populateFloatingClick(opts.subject);\n\t\t});\n\t}\n\n\t/**\n\t * Collapses all displayed stack frames.\n\t */\n\tpublic collapseStack() {\n\t\tthis.callStackWidget.collapseAll();\n\t}\n\n\tprivate getCallFrames(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst frames = subject.stack;\n\t\tif (!frames?.length || !this.editor) {\n\t\t\treturn frames;\n\t\t}\n\n\t\t// If the test extension just sets the top frame as the same location\n\t\t// where the message is displayed, in the case of a peek in an editor,\n\t\t// don't show it again because it's just a duplicate\n\t\tconst topFrame = frames[0];\n\t\tconst peekLocation = subject.revealLocation;\n\t\tconst isTopFrameSame = peekLocation && topFrame.position && topFrame.uri\n\t\t\t&& topFrame.position.lineNumber === peekLocation.range.startLineNumber\n\t\t\t&& topFrame.position.column === peekLocation.range.startColumn\n\t\t\t&& this.uriIdentityService.extUri.isEqual(topFrame.uri, peekLocation.uri);\n\n\t\treturn isTopFrameSame ? frames.slice(1) : frames;\n\t}\n\n\tprivate async prepareTopFrame(subject: InspectSubject, callFrames: ITestMessageStackFrame[]) {\n\t\t// ensure the messageContainer is in the DOM so renderers can calculate the\n\t\t// dimensions before it's rendered in the list.\n\t\tthis.messageContainer.style.visibility = 'hidden';\n\t\tthis.stackContainer.appendChild(this.messageContainer);\n\n\t\tconst topFrame = this.currentTopFrame = this.instantiationService.createInstance(MessageStackFrame, this.messageContainer, this.followupWidget, subject);\n\n\t\tconst hasMultipleFrames = callFrames.length > 0;\n\t\ttopFrame.showHeader.set(hasMultipleFrames, undefined);\n\n\t\tconst provider = await findAsync(this.contentProviders, p => p.update(subject));\n\t\tif (provider) {\n\t\t\tif (this.dimension) {\n\t\t\t\ttopFrame.height.set(provider.layout(this.dimension, hasMultipleFrames)!, undefined);\n\t\t\t}\n\t\t\tif (provider.onDidContentSizeChange) {\n\t\t\t\tthis.currentSubjectStore.add(provider.onDidContentSizeChange(() => {\n\t\t\t\t\tif (this.dimension && !this.isDoingLayoutUpdate) {\n\t\t\t\t\t\tthis.isDoingLayoutUpdate = true;\n\t\t\t\t\t\ttopFrame.height.set(provider.layout(this.dimension, hasMultipleFrames)!, undefined);\n\t\t\t\t\t\tthis.isDoingLayoutUpdate = false;\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\treturn topFrame;\n\t}\n\n\tprivate layoutContentWidgets(dimension: dom.Dimension, width = this.splitView.getViewSize(SubView.Diff)) {\n\t\tthis.isDoingLayoutUpdate = true;\n\t\tfor (const provider of this.contentProviders) {\n\t\t\tconst frameHeight = provider.layout({ height: dimension.height, width }, !!this.currentTopFrame?.showHeader.get());\n\t\t\tif (frameHeight) {\n\t\t\t\tthis.currentTopFrame?.height.set(frameHeight, undefined);\n\t\t\t}\n\t\t}\n\t\tthis.isDoingLayoutUpdate = false;\n\t}\n\n\tprivate populateFloatingClick(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentSubjectStore.add(toDisposable(() => {\n\t\t\tthis.contextKeyResultOutdated.reset();\n\t\t\tthis.contextKeyTestMessage.reset();\n\t\t}));\n\n\t\tthis.contextKeyTestMessage.set(subject.contextValue || '');\n\t\tif (subject.result instanceof LiveTestResult) {\n\t\t\tthis.contextKeyResultOutdated.set(subject.result.getStateById(subject.test.extId)?.retired ?? false);\n\t\t\tthis.currentSubjectStore.add(subject.result.onChange(ev => {\n\t\t\t\tif (ev.item.item.extId === subject.test.extId) {\n\t\t\t\t\tthis.contextKeyResultOutdated.set(ev.item.retired ?? false);\n\t\t\t\t}\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.contextKeyResultOutdated.set(true);\n\t\t}\n\n\t\tconst instaService = this.currentSubjectStore.add(this.instantiationService\n\t\t\t.createChild(new ServiceCollection([IContextKeyService, this.messageContextKeyService])));\n\n\t\tthis.currentSubjectStore.add(instaService.createInstance(FloatingClickMenu, {\n\t\t\tcontainer: this.messageContainer,\n\t\t\tmenuId: MenuId.TestMessageContent,\n\t\t\tgetActionArg: () => (subject as MessageSubject).context,\n\t\t}));\n\t}\n\n\tpublic onLayoutBody(height: number, width: number) {\n\t\tthis.dimension = new dom.Dimension(width, height);\n\t\tthis.splitView.layout(width);\n\t}\n\n\tpublic onWidth(width: number) {\n\t\tthis.splitView.layout(width);\n\t}\n}\n\nconst FOLLOWUP_ANIMATION_MIN_TIME = 500;\n\nclass FollowupActionWidget extends Disposable {\n\tprivate readonly el = dom.h('div.testing-followup-action', []);\n\tprivate readonly visibleStore = this._register(new DisposableStore());\n\tprivate readonly onCloseEmitter = this._register(new Emitter<void>());\n\tpublic readonly onClose = this.onCloseEmitter.event;\n\n\tpublic get domNode() {\n\t\treturn this.el.root;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@IQuickInputService private readonly quickInput: IQuickInputService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic show(subject: InspectSubject) {\n\t\tthis.visibleStore.clear();\n\t\tif (subject instanceof MessageSubject) {\n\t\t\tthis.showMessage(subject);\n\t\t}\n\t}\n\n\tprivate async showMessage(subject: MessageSubject) {\n\t\tconst cts = this.visibleStore.add(new CancellationTokenSource());\n\t\tconst start = Date.now();\n\n\t\t// Wait for completion otherwise results will not be available to the ext host:\n\t\tif (subject.result instanceof LiveTestResult && !subject.result.completedAt) {\n\t\t\tawait new Promise(r => Event.once((subject.result as LiveTestResult).onComplete)(r));\n\t\t}\n\n\t\tconst followups = await this.testService.provideTestFollowups({\n\t\t\textId: subject.test.extId,\n\t\t\tmessageIndex: subject.messageIndex,\n\t\t\tresultId: subject.result.id,\n\t\t\ttaskIndex: subject.taskIndex,\n\t\t}, cts.token);\n\n\n\t\tif (!followups.followups.length || cts.token.isCancellationRequested) {\n\t\t\tfollowups.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.visibleStore.add(followups);\n\n\t\tdom.clearNode(this.el.root);\n\t\tthis.el.root.classList.toggle('animated', Date.now() - start > FOLLOWUP_ANIMATION_MIN_TIME);\n\n\t\tthis.el.root.appendChild(this.makeFollowupLink(followups.followups[0]));\n\t\tif (followups.followups.length > 1) {\n\t\t\tthis.el.root.appendChild(this.makeMoreLink(followups.followups));\n\t\t}\n\n\t\tthis.visibleStore.add(toDisposable(() => {\n\t\t\tthis.el.root.remove();\n\t\t}));\n\t}\n\n\tprivate makeFollowupLink(first: ITestFollowup) {\n\t\tconst link = this.makeLink(() => this.actionFollowup(link, first));\n\t\tdom.reset(link, ...renderLabelWithIcons(first.message));\n\t\treturn link;\n\t}\n\n\tprivate makeMoreLink(followups: ITestFollowup[]) {\n\t\tconst link = this.makeLink(() =>\n\t\t\tthis.quickInput.pick(followups.map((f, i) => ({\n\t\t\t\tlabel: f.message,\n\t\t\t\tindex: i\n\t\t\t}))).then(picked => {\n\t\t\t\tif (picked?.length) {\n\t\t\t\t\tfollowups[picked[0].index].execute();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tlink.innerText = localize('testFollowup.more', '+{0} More...', followups.length - 1);\n\t\treturn link;\n\t}\n\n\tprivate makeLink(onClick: () => void) {\n\t\tconst link = document.createElement('a');\n\t\tlink.tabIndex = 0;\n\t\tthis.visibleStore.add(dom.addDisposableListener(link, 'click', onClick));\n\t\tthis.visibleStore.add(dom.addDisposableListener(link, 'keydown', e => {\n\t\t\tconst event = new StandardKeyboardEvent(e);\n\t\t\tif (event.equals(KeyCode.Space) || event.equals(KeyCode.Enter)) {\n\t\t\t\tonClick();\n\t\t\t}\n\t\t}));\n\n\t\treturn link;\n\t}\n\n\tprivate actionFollowup(link: HTMLAnchorElement, fu: ITestFollowup) {\n\t\tif (link.ariaDisabled !== 'true') {\n\t\t\tlink.ariaDisabled = 'true';\n\t\t\tfu.execute();\n\n\t\t\tif (this.editor) {\n\t\t\t\tthis.onCloseEmitter.fire();\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SubView"]
}
