{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/testing/browser/testResultsView/testResultsViewContent.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { StandardKeyboardEvent } from \"../../../../../base/browser/keyboardEvent.js\";\nimport { renderLabelWithIcons } from \"../../../../../base/browser/ui/iconLabel/iconLabels.js\";\nimport {\n\tOrientation,\n\tSizing,\n\tSplitView,\n} from \"../../../../../base/browser/ui/splitview/splitview.js\";\nimport { findAsync } from \"../../../../../base/common/arrays.js\";\nimport { Limiter } from \"../../../../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../../../../base/common/cancellation.js\";\nimport { Emitter, Event, Relay } from \"../../../../../base/common/event.js\";\nimport { KeyCode } from \"../../../../../base/common/keyCodes.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { observableValue } from \"../../../../../base/common/observable.js\";\nimport \"./testResultsViewContent.css\";\nimport type { ICodeEditor } from \"../../../../../editor/browser/editorBrowser.js\";\nimport { ITextModelService } from \"../../../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { FloatingClickMenu } from \"../../../../../platform/actions/browser/floatingMenu.js\";\nimport { createActionViewItem } from \"../../../../../platform/actions/browser/menuEntryActionViewItem.js\";\nimport { MenuWorkbenchToolBar } from \"../../../../../platform/actions/browser/toolbar.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../../platform/commands/common/commands.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../../../../platform/instantiation/common/serviceCollection.js\";\nimport { IQuickInputService } from \"../../../../../platform/quickinput/common/quickInput.js\";\nimport { IUriIdentityService } from \"../../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { CustomStackFrame } from \"../../../debug/browser/callStackWidget.js\";\nimport { TestCommandId } from \"../../common/constants.js\";\nimport type { IObservableValue } from \"../../common/observableValue.js\";\nimport {\n\tITestProfileService,\n\tcapabilityContextKeys,\n} from \"../../common/testProfileService.js\";\nimport { LiveTestResult } from \"../../common/testResult.js\";\nimport { type ITestFollowup, ITestService } from \"../../common/testService.js\";\nimport {\n\ttype ITestMessageStackFrame,\n\tTestRunProfileBitset,\n} from \"../../common/testTypes.js\";\nimport { TestingContextKeys } from \"../../common/testingContextKeys.js\";\nimport * as icons from \"../icons.js\";\nimport { TestResultStackWidget } from \"./testMessageStack.js\";\nimport {\n\tDiffContentProvider,\n\ttype IPeekOutputRenderer,\n\tMarkdownTestMessagePeek,\n\tPlainTextMessagePeek,\n\tTerminalMessagePeek,\n} from \"./testResultsOutput.js\";\nimport {\n\ttype InspectSubject,\n\tMessageSubject,\n\tTaskSubject,\n\tTestOutputSubject,\n\tequalsSubject,\n\tgetSubjectTestItem,\n} from \"./testResultsSubject.js\";\nimport { OutputPeekTree } from \"./testResultsTree.js\";\n\nenum SubView {\n\tDiff = 0,\n\tHistory = 1,\n}\n\n/** UI state that can be saved/restored, used to give a nice experience when switching stack frames */\nexport interface ITestResultsViewContentUiState {\n\tsplitViewWidths: number[];\n}\n\nclass MessageStackFrame extends CustomStackFrame {\n\tpublic override height = observableValue(\"MessageStackFrame.height\", 100);\n\tpublic override label: string;\n\tpublic override icon = icons.testingViewIcon;\n\n\tconstructor(\n\t\tprivate readonly message: HTMLElement,\n\t\tprivate readonly followup: FollowupActionWidget,\n\t\tprivate readonly subject: InspectSubject,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ITestProfileService private readonly profileService: ITestProfileService,\n\t) {\n\t\tsuper();\n\n\t\tthis.label = subject instanceof MessageSubject\n\t\t\t? subject.test.label\n\t\t\t: subject instanceof TestOutputSubject\n\t\t\t\t? subject.test.item.label\n\t\t\t\t: subject.result.name;\n\t}\n\n\tpublic override render(container: HTMLElement): IDisposable {\n\t\tthis.message.style.visibility = \"visible\";\n\t\tcontainer.appendChild(this.message);\n\t\treturn toDisposable(() => this.message.remove());\n\t}\n\n\tpublic override renderActions(container: HTMLElement): IDisposable {\n\t\tconst store = new DisposableStore();\n\n\t\tcontainer.appendChild(this.followup.domNode);\n\t\tstore.add(toDisposable(() => this.followup.domNode.remove()));\n\n\t\tconst test = getSubjectTestItem(this.subject);\n\t\tconst capabilities =\n\t\t\ttest && this.profileService.capabilitiesForTest(test);\n\t\tlet contextKeyService: IContextKeyService;\n\t\tif (capabilities) {\n\t\t\tcontextKeyService = this.contextKeyService.createOverlay(\n\t\t\t\tcapabilityContextKeys(capabilities),\n\t\t\t);\n\t\t} else {\n\t\t\tconst profiles = this.profileService.getControllerProfiles(\n\t\t\t\tthis.subject.controllerId,\n\t\t\t);\n\t\t\tcontextKeyService = this.contextKeyService.createOverlay([\n\t\t\t\t[\n\t\t\t\t\tTestingContextKeys.hasRunnableTests.key,\n\t\t\t\t\tprofiles.some((p) => p.group & TestRunProfileBitset.Run),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tTestingContextKeys.hasDebuggableTests.key,\n\t\t\t\t\tprofiles.some((p) => p.group & TestRunProfileBitset.Debug),\n\t\t\t\t],\n\t\t\t]);\n\t\t}\n\n\t\tconst instaService = store.add(\n\t\t\tthis.instantiationService.createChild(\n\t\t\t\tnew ServiceCollection([IContextKeyService, contextKeyService]),\n\t\t\t),\n\t\t);\n\n\t\tconst toolbar = store.add(\n\t\t\tinstaService.createInstance(\n\t\t\t\tMenuWorkbenchToolBar,\n\t\t\t\tcontainer,\n\t\t\t\tMenuId.TestCallStack,\n\t\t\t\t{\n\t\t\t\t\tmenuOptions: { shouldForwardArgs: true },\n\t\t\t\t\tactionViewItemProvider: (action, options) =>\n\t\t\t\t\t\tcreateActionViewItem(\n\t\t\t\t\t\t\tthis.instantiationService,\n\t\t\t\t\t\t\taction,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\ttoolbar.context = this.subject;\n\t\tstore.add(toolbar);\n\n\t\treturn store;\n\t}\n}\n\nfunction runInLast(\n\taccessor: ServicesAccessor,\n\tbitset: TestRunProfileBitset,\n\tsubject: InspectSubject,\n) {\n\t// Let the full command do its thing if we want to run the whole set of tests\n\tif (subject instanceof TaskSubject) {\n\t\treturn accessor\n\t\t\t.get(ICommandService)\n\t\t\t.executeCommand(\n\t\t\t\tbitset === TestRunProfileBitset.Debug\n\t\t\t\t\t? TestCommandId.DebugLastRun\n\t\t\t\t\t: TestCommandId.ReRunLastRun,\n\t\t\t\tsubject.result.id,\n\t\t\t);\n\t}\n\n\tconst testService = accessor.get(ITestService);\n\tconst plainTest =\n\t\tsubject instanceof MessageSubject ? subject.test : subject.test.item;\n\tconst currentTest = testService.collection.getNodeById(plainTest.extId);\n\tif (!currentTest) {\n\t\treturn;\n\t}\n\n\treturn testService.runTests({\n\t\tgroup: bitset,\n\t\ttests: [currentTest],\n\t});\n}\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"testing.callStack.run\",\n\t\t\t\ttitle: localize(\"testing.callStack.run\", \"Rerun Test\"),\n\t\t\t\ticon: icons.testingRunIcon,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.TestCallStack,\n\t\t\t\t\twhen: TestingContextKeys.hasRunnableTests,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\toverride run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\tsubject: InspectSubject,\n\t\t): void {\n\t\t\trunInLast(accessor, TestRunProfileBitset.Run, subject);\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"testing.callStack.debug\",\n\t\t\t\ttitle: localize(\"testing.callStack.debug\", \"Debug Test\"),\n\t\t\t\ticon: icons.testingDebugIcon,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.TestCallStack,\n\t\t\t\t\twhen: TestingContextKeys.hasDebuggableTests,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\toverride run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\tsubject: InspectSubject,\n\t\t): void {\n\t\t\trunInLast(accessor, TestRunProfileBitset.Debug, subject);\n\t\t}\n\t},\n);\n\nexport class TestResultsViewContent extends Disposable {\n\tprivate static lastSplitWidth?: number;\n\n\tprivate readonly didReveal = this._register(\n\t\tnew Emitter<{ subject: InspectSubject; preserveFocus: boolean }>(),\n\t);\n\tprivate readonly currentSubjectStore = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate readonly onCloseEmitter = this._register(new Relay<void>());\n\tprivate followupWidget!: FollowupActionWidget;\n\tprivate messageContextKeyService!: IContextKeyService;\n\tprivate contextKeyTestMessage!: IContextKey<string>;\n\tprivate contextKeyResultOutdated!: IContextKey<boolean>;\n\tprivate stackContainer!: HTMLElement;\n\tprivate callStackWidget!: TestResultStackWidget;\n\tprivate currentTopFrame?: MessageStackFrame;\n\tprivate isDoingLayoutUpdate?: boolean;\n\n\tprivate dimension?: dom.Dimension;\n\tprivate splitView!: SplitView;\n\tprivate messageContainer!: HTMLElement;\n\tprivate contentProviders!: IPeekOutputRenderer[];\n\tprivate contentProvidersUpdateLimiter = this._register(new Limiter(1));\n\n\tpublic current?: InspectSubject;\n\n\t/** Fired when a tree item is selected. Populated only on .fillBody() */\n\tpublic onDidRequestReveal!: Event<InspectSubject>;\n\n\tpublic readonly onClose = this.onCloseEmitter.event;\n\n\tpublic get uiState(): ITestResultsViewContentUiState {\n\t\treturn {\n\t\t\tsplitViewWidths: Array.from(\n\t\t\t\t{ length: this.splitView.length },\n\t\t\t\t(_, i) => this.splitView.getViewSize(i),\n\t\t\t),\n\t\t};\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\tprivate readonly options: {\n\t\t\thistoryVisible: IObservableValue<boolean>;\n\t\t\tshowRevealLocationOnMessages: boolean;\n\t\t\tlocationForProgress: string;\n\t\t},\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService protected readonly modelService: ITextModelService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic fillBody(containerElement: HTMLElement): void {\n\t\tconst initialSpitWidth = TestResultsViewContent.lastSplitWidth;\n\t\tthis.splitView = new SplitView(containerElement, {\n\t\t\torientation: Orientation.HORIZONTAL,\n\t\t});\n\n\t\tconst { historyVisible, showRevealLocationOnMessages } = this.options;\n\t\tconst isInPeekView = this.editor !== undefined;\n\n\t\tconst messageContainer = (this.messageContainer = dom.$(\n\t\t\t\".test-output-peek-message-container\",\n\t\t));\n\t\tthis.stackContainer = dom.append(\n\t\t\tcontainerElement,\n\t\t\tdom.$(\".test-output-call-stack-container\"),\n\t\t);\n\t\tthis.callStackWidget = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tTestResultStackWidget,\n\t\t\t\tthis.stackContainer,\n\t\t\t\tthis.editor,\n\t\t\t),\n\t\t);\n\t\tthis.followupWidget = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tFollowupActionWidget,\n\t\t\t\tthis.editor,\n\t\t\t),\n\t\t);\n\t\tthis.onCloseEmitter.input = this.followupWidget.onClose;\n\n\t\tthis.contentProviders = [\n\t\t\tthis._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tDiffContentProvider,\n\t\t\t\t\tthis.editor,\n\t\t\t\t\tmessageContainer,\n\t\t\t\t),\n\t\t\t),\n\t\t\tthis._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tMarkdownTestMessagePeek,\n\t\t\t\t\tmessageContainer,\n\t\t\t\t),\n\t\t\t),\n\t\t\tthis._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tTerminalMessagePeek,\n\t\t\t\t\tmessageContainer,\n\t\t\t\t\tisInPeekView,\n\t\t\t\t),\n\t\t\t),\n\t\t\tthis._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tPlainTextMessagePeek,\n\t\t\t\t\tthis.editor,\n\t\t\t\t\tmessageContainer,\n\t\t\t\t),\n\t\t\t),\n\t\t];\n\n\t\tthis.messageContextKeyService = this._register(\n\t\t\tthis.contextKeyService.createScoped(containerElement),\n\t\t);\n\t\tthis.contextKeyTestMessage =\n\t\t\tTestingContextKeys.testMessageContext.bindTo(\n\t\t\t\tthis.messageContextKeyService,\n\t\t\t);\n\t\tthis.contextKeyResultOutdated =\n\t\t\tTestingContextKeys.testResultOutdated.bindTo(\n\t\t\t\tthis.messageContextKeyService,\n\t\t\t);\n\n\t\tconst treeContainer = dom.append(\n\t\t\tcontainerElement,\n\t\t\tdom.$(\".test-output-peek-tree\"),\n\t\t);\n\t\tconst tree = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tOutputPeekTree,\n\t\t\t\ttreeContainer,\n\t\t\t\tthis.didReveal.event,\n\t\t\t\t{\n\t\t\t\t\tshowRevealLocationOnMessages,\n\t\t\t\t\tlocationForProgress: this.options.locationForProgress,\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis.onDidRequestReveal = tree.onDidRequestReview;\n\n\t\tthis.splitView.addView(\n\t\t\t{\n\t\t\t\tonDidChange: Event.None,\n\t\t\t\telement: this.stackContainer,\n\t\t\t\tminimumSize: 200,\n\t\t\t\tmaximumSize: Number.MAX_VALUE,\n\t\t\t\tlayout: (width) => {\n\t\t\t\t\tTestResultsViewContent.lastSplitWidth = width;\n\n\t\t\t\t\tif (this.dimension) {\n\t\t\t\t\t\tthis.callStackWidget?.layout(\n\t\t\t\t\t\t\tthis.dimension.height,\n\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.layoutContentWidgets(this.dimension, width);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tSizing.Distribute,\n\t\t);\n\n\t\tthis.splitView.addView(\n\t\t\t{\n\t\t\t\tonDidChange: Event.None,\n\t\t\t\telement: treeContainer,\n\t\t\t\tminimumSize: 100,\n\t\t\t\tmaximumSize: Number.MAX_VALUE,\n\t\t\t\tlayout: (width) => {\n\t\t\t\t\tif (this.dimension) {\n\t\t\t\t\t\ttree.layout(this.dimension.height, width);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tSizing.Distribute,\n\t\t);\n\n\t\tthis.splitView.setViewVisible(SubView.History, historyVisible.value);\n\t\tthis._register(\n\t\t\thistoryVisible.onDidChange((visible) => {\n\t\t\t\tthis.splitView.setViewVisible(SubView.History, visible);\n\t\t\t}),\n\t\t);\n\n\t\tif (initialSpitWidth) {\n\t\t\tqueueMicrotask(() =>\n\t\t\t\tthis.splitView.resizeView(0, initialSpitWidth),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Shows a message in-place without showing or changing the peek location.\n\t * This is mostly used if peeking a message without a location.\n\t */\n\tpublic reveal(opts: {\n\t\tsubject: InspectSubject;\n\t\tpreserveFocus: boolean;\n\t}) {\n\t\tthis.didReveal.fire(opts);\n\n\t\tif (this.current && equalsSubject(this.current, opts.subject)) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.current = opts.subject;\n\t\treturn this.contentProvidersUpdateLimiter.queue(async () => {\n\t\t\tthis.currentSubjectStore.clear();\n\t\t\tconst callFrames = this.getCallFrames(opts.subject) || [];\n\t\t\tconst topFrame = await this.prepareTopFrame(\n\t\t\t\topts.subject,\n\t\t\t\tcallFrames,\n\t\t\t);\n\t\t\tthis.callStackWidget.update(topFrame, callFrames);\n\n\t\t\tthis.followupWidget.show(opts.subject);\n\t\t\tthis.populateFloatingClick(opts.subject);\n\t\t});\n\t}\n\n\t/**\n\t * Collapses all displayed stack frames.\n\t */\n\tpublic collapseStack() {\n\t\tthis.callStackWidget.collapseAll();\n\t}\n\n\tprivate getCallFrames(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst frames = subject.stack;\n\t\tif (!frames?.length || !this.editor) {\n\t\t\treturn frames;\n\t\t}\n\n\t\t// If the test extension just sets the top frame as the same location\n\t\t// where the message is displayed, in the case of a peek in an editor,\n\t\t// don't show it again because it's just a duplicate\n\t\tconst topFrame = frames[0];\n\t\tconst peekLocation = subject.revealLocation;\n\t\tconst isTopFrameSame =\n\t\t\tpeekLocation &&\n\t\t\ttopFrame.position &&\n\t\t\ttopFrame.uri &&\n\t\t\ttopFrame.position.lineNumber ===\n\t\t\t\tpeekLocation.range.startLineNumber &&\n\t\t\ttopFrame.position.column === peekLocation.range.startColumn &&\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\ttopFrame.uri,\n\t\t\t\tpeekLocation.uri,\n\t\t\t);\n\n\t\treturn isTopFrameSame ? frames.slice(1) : frames;\n\t}\n\n\tprivate async prepareTopFrame(\n\t\tsubject: InspectSubject,\n\t\tcallFrames: ITestMessageStackFrame[],\n\t) {\n\t\t// ensure the messageContainer is in the DOM so renderers can calculate the\n\t\t// dimensions before it's rendered in the list.\n\t\tthis.messageContainer.style.visibility = \"hidden\";\n\t\tthis.stackContainer.appendChild(this.messageContainer);\n\n\t\tconst topFrame = (this.currentTopFrame =\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tMessageStackFrame,\n\t\t\t\tthis.messageContainer,\n\t\t\t\tthis.followupWidget,\n\t\t\t\tsubject,\n\t\t\t));\n\n\t\tconst hasMultipleFrames = callFrames.length > 0;\n\t\ttopFrame.showHeader.set(hasMultipleFrames, undefined);\n\n\t\tconst provider = await findAsync(this.contentProviders, (p) =>\n\t\t\tp.update(subject),\n\t\t);\n\t\tif (provider) {\n\t\t\tif (this.dimension) {\n\t\t\t\ttopFrame.height.set(\n\t\t\t\t\tprovider.layout(this.dimension, hasMultipleFrames)!,\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (provider.onDidContentSizeChange) {\n\t\t\t\tthis.currentSubjectStore.add(\n\t\t\t\t\tprovider.onDidContentSizeChange(() => {\n\t\t\t\t\t\tif (this.dimension && !this.isDoingLayoutUpdate) {\n\t\t\t\t\t\t\tthis.isDoingLayoutUpdate = true;\n\t\t\t\t\t\t\ttopFrame.height.set(\n\t\t\t\t\t\t\t\tprovider.layout(\n\t\t\t\t\t\t\t\t\tthis.dimension,\n\t\t\t\t\t\t\t\t\thasMultipleFrames,\n\t\t\t\t\t\t\t\t)!,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.isDoingLayoutUpdate = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn topFrame;\n\t}\n\n\tprivate layoutContentWidgets(\n\t\tdimension: dom.Dimension,\n\t\twidth = this.splitView.getViewSize(SubView.Diff),\n\t) {\n\t\tthis.isDoingLayoutUpdate = true;\n\t\tfor (const provider of this.contentProviders) {\n\t\t\tconst frameHeight = provider.layout(\n\t\t\t\t{ height: dimension.height, width },\n\t\t\t\t!!this.currentTopFrame?.showHeader.get(),\n\t\t\t);\n\t\t\tif (frameHeight) {\n\t\t\t\tthis.currentTopFrame?.height.set(frameHeight, undefined);\n\t\t\t}\n\t\t}\n\t\tthis.isDoingLayoutUpdate = false;\n\t}\n\n\tprivate populateFloatingClick(subject: InspectSubject) {\n\t\tif (!(subject instanceof MessageSubject)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentSubjectStore.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis.contextKeyResultOutdated.reset();\n\t\t\t\tthis.contextKeyTestMessage.reset();\n\t\t\t}),\n\t\t);\n\n\t\tthis.contextKeyTestMessage.set(subject.contextValue || \"\");\n\t\tif (subject.result instanceof LiveTestResult) {\n\t\t\tthis.contextKeyResultOutdated.set(\n\t\t\t\tsubject.result.getStateById(subject.test.extId)?.retired ??\n\t\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis.currentSubjectStore.add(\n\t\t\t\tsubject.result.onChange((ev) => {\n\t\t\t\t\tif (ev.item.item.extId === subject.test.extId) {\n\t\t\t\t\t\tthis.contextKeyResultOutdated.set(\n\t\t\t\t\t\t\tev.item.retired ?? false,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.contextKeyResultOutdated.set(true);\n\t\t}\n\n\t\tconst instaService = this.currentSubjectStore.add(\n\t\t\tthis.instantiationService.createChild(\n\t\t\t\tnew ServiceCollection([\n\t\t\t\t\tIContextKeyService,\n\t\t\t\t\tthis.messageContextKeyService,\n\t\t\t\t]),\n\t\t\t),\n\t\t);\n\n\t\tthis.currentSubjectStore.add(\n\t\t\tinstaService.createInstance(FloatingClickMenu, {\n\t\t\t\tcontainer: this.messageContainer,\n\t\t\t\tmenuId: MenuId.TestMessageContent,\n\t\t\t\tgetActionArg: () => (subject as MessageSubject).context,\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic onLayoutBody(height: number, width: number) {\n\t\tthis.dimension = new dom.Dimension(width, height);\n\t\tthis.splitView.layout(width);\n\t}\n\n\tpublic onWidth(width: number) {\n\t\tthis.splitView.layout(width);\n\t}\n}\n\nconst FOLLOWUP_ANIMATION_MIN_TIME = 500;\n\nclass FollowupActionWidget extends Disposable {\n\tprivate readonly el = dom.h(\"div.testing-followup-action\", []);\n\tprivate readonly visibleStore = this._register(new DisposableStore());\n\tprivate readonly onCloseEmitter = this._register(new Emitter<void>());\n\tpublic readonly onClose = this.onCloseEmitter.event;\n\n\tpublic get domNode() {\n\t\treturn this.el.root;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor | undefined,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@IQuickInputService private readonly quickInput: IQuickInputService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic show(subject: InspectSubject) {\n\t\tthis.visibleStore.clear();\n\t\tif (subject instanceof MessageSubject) {\n\t\t\tthis.showMessage(subject);\n\t\t}\n\t}\n\n\tprivate async showMessage(subject: MessageSubject) {\n\t\tconst cts = this.visibleStore.add(new CancellationTokenSource());\n\t\tconst start = Date.now();\n\n\t\t// Wait for completion otherwise results will not be available to the ext host:\n\t\tif (\n\t\t\tsubject.result instanceof LiveTestResult &&\n\t\t\t!subject.result.completedAt\n\t\t) {\n\t\t\tawait new Promise((r) =>\n\t\t\t\tEvent.once((subject.result as LiveTestResult).onComplete)(r),\n\t\t\t);\n\t\t}\n\n\t\tconst followups = await this.testService.provideTestFollowups(\n\t\t\t{\n\t\t\t\textId: subject.test.extId,\n\t\t\t\tmessageIndex: subject.messageIndex,\n\t\t\t\tresultId: subject.result.id,\n\t\t\t\ttaskIndex: subject.taskIndex,\n\t\t\t},\n\t\t\tcts.token,\n\t\t);\n\n\t\tif (!followups.followups.length || cts.token.isCancellationRequested) {\n\t\t\tfollowups.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.visibleStore.add(followups);\n\n\t\tdom.clearNode(this.el.root);\n\t\tthis.el.root.classList.toggle(\n\t\t\t\"animated\",\n\t\t\tDate.now() - start > FOLLOWUP_ANIMATION_MIN_TIME,\n\t\t);\n\n\t\tthis.el.root.appendChild(this.makeFollowupLink(followups.followups[0]));\n\t\tif (followups.followups.length > 1) {\n\t\t\tthis.el.root.appendChild(this.makeMoreLink(followups.followups));\n\t\t}\n\n\t\tthis.visibleStore.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis.el.root.remove();\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate makeFollowupLink(first: ITestFollowup) {\n\t\tconst link = this.makeLink(() => this.actionFollowup(link, first));\n\t\tdom.reset(link, ...renderLabelWithIcons(first.message));\n\t\treturn link;\n\t}\n\n\tprivate makeMoreLink(followups: ITestFollowup[]) {\n\t\tconst link = this.makeLink(() =>\n\t\t\tthis.quickInput\n\t\t\t\t.pick(\n\t\t\t\t\tfollowups.map((f, i) => ({\n\t\t\t\t\t\tlabel: f.message,\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t})),\n\t\t\t\t)\n\t\t\t\t.then((picked) => {\n\t\t\t\t\tif (picked?.length) {\n\t\t\t\t\t\tfollowups[picked[0].index].execute();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t);\n\n\t\tlink.innerText = localize(\n\t\t\t\"testFollowup.more\",\n\t\t\t\"+{0} More...\",\n\t\t\tfollowups.length - 1,\n\t\t);\n\t\treturn link;\n\t}\n\n\tprivate makeLink(onClick: () => void) {\n\t\tconst link = document.createElement(\"a\");\n\t\tlink.tabIndex = 0;\n\t\tthis.visibleStore.add(\n\t\t\tdom.addDisposableListener(link, \"click\", onClick),\n\t\t);\n\t\tthis.visibleStore.add(\n\t\t\tdom.addDisposableListener(link, \"keydown\", (e) => {\n\t\t\t\tconst event = new StandardKeyboardEvent(e);\n\t\t\t\tif (\n\t\t\t\t\tevent.equals(KeyCode.Space) ||\n\t\t\t\t\tevent.equals(KeyCode.Enter)\n\t\t\t\t) {\n\t\t\t\t\tonClick();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn link;\n\t}\n\n\tprivate actionFollowup(link: HTMLAnchorElement, fu: ITestFollowup) {\n\t\tif (link.ariaDisabled !== \"true\") {\n\t\t\tlink.ariaDisabled = \"true\";\n\t\t\tfu.execute();\n\n\t\t\tif (this.editor) {\n\t\t\t\tthis.onCloseEmitter.fire();\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SubView"]
}
