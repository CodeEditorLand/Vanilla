{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/list/browser/tableColumnResizeQuickPick.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Table } from '../../../../base/browser/ui/table/tableWidget.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { localize } from '../../../../nls.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\n\ninterface IColumnResizeQuickPickItem extends IQuickPickItem {\n\tindex: number;\n}\n\nexport class TableColumnResizeQuickPick extends Disposable {\n\tconstructor(\n\t\tprivate readonly _table: Table<any>,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync show(): Promise<void> {\n\t\tconst items: IColumnResizeQuickPickItem[] = [];\n\t\tthis._table.getColumnLabels().forEach((label, index) => {\n\t\t\tif (label) {\n\t\t\t\titems.push({ label, index });\n\t\t\t}\n\t\t});\n\t\tconst column = await this._quickInputService.pick<IColumnResizeQuickPickItem>(items, { placeHolder: localize('table.column.selection', \"Select the column to resize, type to filter.\") });\n\t\tif (!column) {\n\t\t\treturn;\n\t\t}\n\t\tconst value = await this._quickInputService.input({\n\t\t\tplaceHolder: localize('table.column.resizeValue.placeHolder', \"i.e. 20, 60, 100...\"),\n\t\t\tprompt: localize('table.column.resizeValue.prompt', \"Please enter a width in percentage for the '{0}' column.\", column.label),\n\t\t\tvalidateInput: (input: string) => this._validateColumnResizeValue(input)\n\t\t});\n\t\tconst percentageValue = value ? Number.parseInt(value) : undefined;\n\t\tif (!percentageValue) {\n\t\t\treturn;\n\t\t}\n\t\tthis._table.resizeColumn(column.index, percentageValue);\n\t}\n\n\tprivate async _validateColumnResizeValue(input: string): Promise<string | { content: string; severity: Severity } | null | undefined> {\n\t\tconst percentage = Number.parseInt(input);\n\t\tif (input && !Number.isInteger(percentage)) {\n\t\t\treturn localize('table.column.resizeValue.invalidType', \"Please enter an integer.\");\n\t\t} else if (percentage < 0 || percentage > 100) {\n\t\t\treturn localize('table.column.resizeValue.invalidRange', \"Please enter a number greater than 0 and less than or equal to 100.\");\n\t\t}\n\t\treturn null;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,OAAO,cAAc;AACrB,SAAS,gBAAgB;AACzB,SAAS,oBAAoB,sBAAsB;AAM5C,IAAM,6BAAN,cAAyC,WAAW;AAAA,EAC1D,YACkB,QACoB,oBACpC;AACD,UAAM;AAHW;AACoB;AAAA,EAGtC;AAAA,EArBD,OAe2D;AAAA;AAAA;AAAA,EAQ1D,MAAM,OAAsB;AAC3B,UAAM,QAAsC,CAAC;AAC7C,SAAK,OAAO,gBAAgB,EAAE,QAAQ,CAAC,OAAO,UAAU;AACvD,UAAI,OAAO;AACV,cAAM,KAAK,EAAE,OAAO,MAAM,CAAC;AAAA,MAC5B;AAAA,IACD,CAAC;AACD,UAAM,SAAS,MAAM,KAAK,mBAAmB,KAAiC,OAAO,EAAE,aAAa,SAAS,0BAA0B,8CAA8C,EAAE,CAAC;AACxL,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AACA,UAAM,QAAQ,MAAM,KAAK,mBAAmB,MAAM;AAAA,MACjD,aAAa,SAAS,wCAAwC,qBAAqB;AAAA,MACnF,QAAQ,SAAS,mCAAmC,4DAA4D,OAAO,KAAK;AAAA,MAC5H,eAAe,wBAAC,UAAkB,KAAK,2BAA2B,KAAK,GAAxD;AAAA,IAChB,CAAC;AACD,UAAM,kBAAkB,QAAQ,OAAO,SAAS,KAAK,IAAI;AACzD,QAAI,CAAC,iBAAiB;AACrB;AAAA,IACD;AACA,SAAK,OAAO,aAAa,OAAO,OAAO,eAAe;AAAA,EACvD;AAAA,EAEA,MAAc,2BAA2B,OAA6F;AACrI,UAAM,aAAa,OAAO,SAAS,KAAK;AACxC,QAAI,SAAS,CAAC,OAAO,UAAU,UAAU,GAAG;AAC3C,aAAO,SAAS,wCAAwC,0BAA0B;AAAA,IACnF,WAAW,aAAa,KAAK,aAAa,KAAK;AAC9C,aAAO,SAAS,yCAAyC,qEAAqE;AAAA,IAC/H;AACA,WAAO;AAAA,EACR;AACD;AAxCa,6BAAN;AAAA,EAGJ;AAAA,GAHU;",
  "names": []
}
