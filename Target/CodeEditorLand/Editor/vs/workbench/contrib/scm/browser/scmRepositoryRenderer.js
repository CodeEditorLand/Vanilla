var f=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var b=(u,o,t,e)=>{for(var i=e>1?void 0:e?T(o,t):o,r=u.length-1,n;r>=0;r--)(n=u[r])&&(i=(e?n(o,t,i):n(i))||i);return e&&i&&f(o,t,i),i},s=(u,o)=>(t,e)=>o(t,e,u);import"./media/scm.css";import{$ as l,append as d}from"../../../../base/browser/dom.js";import"../../../../base/browser/ui/actionbar/actionbar.js";import{CountBadge as h}from"../../../../base/browser/ui/countBadge/countBadge.js";import"../../../../base/browser/ui/hover/hover.js";import{getDefaultHoverDelegate as g}from"../../../../base/browser/ui/hover/hoverDelegateFactory.js";import"../../../../base/browser/ui/list/list.js";import"../../../../base/browser/ui/tree/objectTree.js";import"../../../../base/browser/ui/tree/tree.js";import{ActionRunner as A}from"../../../../base/common/actions.js";import"../../../../base/common/filters.js";import{combinedDisposable as R,DisposableStore as w}from"../../../../base/common/lifecycle.js";import{autorun as M}from"../../../../base/common/observable.js";import{WorkbenchToolBar as x}from"../../../../platform/actions/browser/toolbar.js";import{IMenuService as E,MenuId as H,MenuItemAction as P}from"../../../../platform/actions/common/actions.js";import{ICommandService as L}from"../../../../platform/commands/common/commands.js";import{IContextKeyService as B}from"../../../../platform/contextkey/common/contextkey.js";import{IContextMenuService as D}from"../../../../platform/contextview/browser/contextView.js";import{IHoverService as V}from"../../../../platform/hover/browser/hover.js";import{IKeybindingService as z}from"../../../../platform/keybinding/common/keybinding.js";import{ITelemetryService as K}from"../../../../platform/telemetry/common/telemetry.js";import{defaultCountBadgeStyles as k}from"../../../../platform/theme/browser/defaultStyles.js";import{ISCMViewService as F}from"../common/scm.js";import{connectPrimaryMenu as N,getRepositoryResourceCount as $,isSCMRepository as U,StatusBarAction as W}from"./util.js";class Ae extends A{constructor(t){super();this.getSelectedRepositories=t}async runAction(t,e){if(!(t instanceof P))return super.runAction(t,e);const i=this.getSelectedRepositories().map(n=>n.provider),r=i.some(n=>n===e)?i:[e];await t.run(...r)}}let v=class{constructor(o,t,e,i,r,n,S,c,a,I){this.toolbarMenuId=o;this.actionViewItemProvider=t;this.commandService=e;this.contextKeyService=i;this.contextMenuService=r;this.hoverService=n;this.keybindingService=S;this.menuService=c;this.scmViewService=a;this.telemetryService=I}static TEMPLATE_ID="repository";get templateId(){return v.TEMPLATE_ID}renderTemplate(o){o.classList.contains("monaco-tl-contents")&&o.parentElement.parentElement.querySelector(".monaco-tl-twistie").classList.add("force-twistie");const t=d(o,l(".scm-provider")),e=d(t,l(".label")),i=this.hoverService.setupManagedHover(g("mouse"),e,"",{}),r=d(e,l("span.name")),n=d(e,l("span.description")),S=d(t,l(".actions")),c=new x(S,{actionViewItemProvider:this.actionViewItemProvider,resetMenu:this.toolbarMenuId},this.menuService,this.contextKeyService,this.contextMenuService,this.keybindingService,this.commandService,this.telemetryService),a=d(t,l(".count")),I=new h(a,{},k),y=c.onDidChangeDropdownVisibility(p=>t.classList.toggle("active",p)),m=R(i,y,c);return{label:e,labelCustomHover:i,name:r,description:n,countContainer:a,count:I,toolBar:c,elementDisposables:new w,templateDisposable:m}}renderElement(o,t,e,i){const r=U(o)?o:o.element;e.name.textContent=r.provider.name,r.provider.rootUri?(e.labelCustomHover.update(`${r.provider.label}: ${r.provider.rootUri.fsPath}`),e.description.textContent=r.provider.label):(e.labelCustomHover.update(r.provider.label),e.description.textContent="");let n=[],S=[],c=[];const a=()=>{e.toolBar.setActions([...n,...S],c)};e.elementDisposables.add(M(m=>{n=(r.provider.statusBarCommands.read(m)??[]).map(C=>new W(C,this.commandService)),a()})),e.elementDisposables.add(M(m=>{const p=r.provider.count.read(m)??$(r.provider);e.countContainer.setAttribute("data-count",String(p)),e.count.setCount(p)}));const I=this.scmViewService.menus.getRepositoryMenus(r.provider),y=this.toolbarMenuId===H.SCMTitle?I.titleMenu.menu:I.repositoryMenu;e.elementDisposables.add(N(y,(m,p)=>{S=m,c=p,a()})),e.toolBar.context=r.provider}renderCompressedElements(){throw new Error("Should never happen since node is incompressible")}disposeElement(o,t,e){e.elementDisposables.clear()}disposeTemplate(o){o.elementDisposables.dispose(),o.templateDisposable.dispose()}};v=b([s(2,L),s(3,B),s(4,D),s(5,V),s(6,z),s(7,E),s(8,F),s(9,K)],v);export{Ae as RepositoryActionRunner,v as RepositoryRenderer};
