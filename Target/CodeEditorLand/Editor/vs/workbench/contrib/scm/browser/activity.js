var N=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var S=(v,d,e,t)=>{for(var r=t>1?void 0:t?D(d,e):d,s=v.length-1,o;s>=0;s--)(o=v[s])&&(r=(t?o(d,e,r):o(r))||r);return t&&r&&N(d,e,r),r},a=(v,d)=>(e,t)=>d(e,t,v);import{Emitter as w,Event as C}from"../../../../../vs/base/common/event.js";import{Iterable as P}from"../../../../../vs/base/common/iterator.js";import{Disposable as E}from"../../../../../vs/base/common/lifecycle.js";import{autorun as V,autorunWithStore as I,derived as K,observableFromEvent as b}from"../../../../../vs/base/common/observable.js";import{derivedObservableWithCache as U,latestChangedValue as G,observableFromEventOpts as A}from"../../../../../vs/base/common/observableInternal/utils.js";import{basename as O}from"../../../../../vs/base/common/resources.js";import"../../../../../vs/editor/common/languages.js";import{localize as y}from"../../../../../vs/nls.js";import{IConfigurationService as T}from"../../../../../vs/platform/configuration/common/configuration.js";import{IContextKeyService as $,RawContextKey as m}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{observableConfigValue as F}from"../../../../../vs/platform/observable/common/platformObservableUtils.js";import{IUriIdentityService as H}from"../../../../../vs/platform/uriIdentity/common/uriIdentity.js";import"../../../../../vs/workbench/common/contributions.js";import{EditorResourceAccessor as _}from"../../../../../vs/workbench/common/editor.js";import"../../../../../vs/workbench/common/editor/editorInput.js";import{getRepositoryResourceCount as W}from"../../../../../vs/workbench/contrib/scm/browser/util.js";import{ISCMService as B,ISCMViewService as k,VIEW_PANE_ID as M}from"../../../../../vs/workbench/contrib/scm/common/scm.js";import{IActivityService as L,NumberBadge as q}from"../../../../../vs/workbench/services/activity/common/activity.js";import{IEditorGroupsService as j}from"../../../../../vs/workbench/services/editor/common/editorGroupsService.js";import{IEditorService as z}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{IStatusbarService as J,StatusbarAlignment as x}from"../../../../../vs/workbench/services/statusbar/browser/statusbar.js";import{ITitleService as Q}from"../../../../../vs/workbench/services/title/browser/titleService.js";const h={ActiveRepositoryName:new m("scmActiveRepositoryName",""),ActiveRepositoryBranchName:new m("scmActiveRepositoryBranchName","")};let g=class extends E{constructor(e,t,r,s,o,c,u,i){super();this.activityService=e;this.configurationService=t;this.contextKeyService=r;this.editorService=s;this.scmService=o;this.scmViewService=c;this.statusbarService=u;this.titleService=i;this._activeRepositoryNameContextKey=h.ActiveRepositoryName.bindTo(this.contextKeyService),this._activeRepositoryBranchNameContextKey=h.ActiveRepositoryBranchName.bindTo(this.contextKeyService),this.titleService.registerVariables([{name:"activeRepositoryName",contextKey:h.ActiveRepositoryName.key},{name:"activeRepositoryBranchName",contextKey:h.ActiveRepositoryBranchName.key}]),this._register(I((n,p)=>{this._updateActivityCountBadge(this._countBadge.read(n),p)})),this._register(I((n,p)=>{const R=this._activeRepository.read(n),f=R?.provider.statusBarCommands.read(n);this._updateStatusBar(R,f??[],p)})),this._register(V(n=>{const p=this._activeRepository.read(n),f=p?.provider.historyProvider.read(n)?.currentHistoryItemGroupName.read(n);this._updateActiveRepositoryContextKeys(p?.provider.name,f)}))}_countBadgeConfig=F("scm.countBadge","all",this.configurationService);_repositories=b(this,C.any(this.scmService.onDidAddRepository,this.scmService.onDidRemoveRepository),()=>this.scmService.repositories);_focusedRepository=A({owner:this,equalsFn:()=>!1},this.scmViewService.onDidFocusRepository,()=>this.scmViewService.focusedRepository);_activeEditor=A({owner:this,equalsFn:()=>!1},this.editorService.onDidActiveEditorChange,()=>this.editorService.activeEditor);_activeEditorRepository=U(this,(e,t)=>{const r=_.getOriginalUri(this._activeEditor.read(e));if(!r)return t;const s=this.scmService.getRepository(r);return s?Object.create(s):t});_activeRepository=G(this,[this._activeEditorRepository,this._focusedRepository]);_countBadgeRepositories=K(this,e=>{switch(this._countBadgeConfig.read(e)){case"all":{const t=this._repositories.read(e);return[...P.map(t,r=>({provider:r.provider,resourceCount:this._getRepositoryResourceCount(r)}))]}case"focused":{const t=this._activeRepository.read(e);return t?[{provider:t.provider,resourceCount:this._getRepositoryResourceCount(t)}]:[]}case"off":return[];default:throw new Error("Invalid countBadge setting")}});_countBadge=K(this,e=>{let t=0;for(const r of this._countBadgeRepositories.read(e)){const s=r.provider.count?.read(e),o=r.resourceCount.read(e);t=t+(s??o)}return t});_activeRepositoryNameContextKey;_activeRepositoryBranchNameContextKey;_getRepositoryResourceCount(e){return b(this,e.provider.onDidChangeResources,()=>W(e.provider))}_updateActivityCountBadge(e,t){if(e===0)return;const r=new q(e,s=>y("scmPendingChangesBadge","{0} pending changes",s));t.add(this.activityService.showViewActivity(M,{badge:r}))}_updateStatusBar(e,t,r){if(!e)return;const s=e.provider.rootUri?`${O(e.provider.rootUri)} (${e.provider.label})`:e.provider.label;for(let o=0;o<t.length;o++){const c=t[o],u=`${s}${c.tooltip?` - ${c.tooltip}`:""}`;let i=c.arguments?.[0];i&&typeof i=="string"?(i=i.substring(0,i.lastIndexOf("/")).replace(/^git\./,""),i.length>1&&(i=i[0].toLocaleUpperCase()+i.slice(1))):i="";const n={name:y("status.scm","Source Control")+(i?` ${i}`:""),text:c.title,ariaLabel:u,tooltip:u,command:c.id?c:void 0};r.add(o===0?this.statusbarService.addEntry(n,`status.scm.${o}`,x.LEFT,1e4):this.statusbarService.addEntry(n,`status.scm.${o}`,x.LEFT,{id:`status.scm.${o-1}`,alignment:x.RIGHT,compact:!0}))}}_updateActiveRepositoryContextKeys(e,t){this._activeRepositoryNameContextKey.set(e??""),this._activeRepositoryBranchNameContextKey.set(t??"")}};g=S([a(0,L),a(1,T),a(2,$),a(3,z),a(4,B),a(5,k),a(6,J),a(7,Q)],g);let l=class extends E{constructor(e,t,r){super();this.scmService=t;this.uriIdentityService=r;const s=new m("scmActiveResourceHasChanges",!1,y("scmActiveResourceHasChanges","Whether the active resource has changes")),o=new m("scmActiveResourceRepository",void 0,y("scmActiveResourceRepository","The active resource's repository"));this._store.add(I((i,n)=>{for(const p of this._repositories.read(i))n.add(C.runAndSubscribe(p.provider.onDidChangeResources,()=>{this._onDidRepositoryChange.fire()}))}));const c={contextKey:s,getGroupContextKeyValue:i=>this._getEditorHasChanges(i.activeEditor),onDidChange:this._onDidRepositoryChange.event},u={contextKey:o,getGroupContextKeyValue:i=>this._getEditorRepositoryId(i.activeEditor),onDidChange:this._onDidRepositoryChange.event};this._store.add(e.registerContextKeyProvider(c)),this._store.add(e.registerContextKeyProvider(u))}_repositories=b(this,C.any(this.scmService.onDidAddRepository,this.scmService.onDidRemoveRepository),()=>this.scmService.repositories);_onDidRepositoryChange=new w;_getEditorHasChanges(e){const t=_.getOriginalUri(e);if(!t)return!1;const r=this.scmService.getRepository(t);for(const s of r?.provider.groups??[])if(s.resources.some(o=>this.uriIdentityService.extUri.isEqual(t,o.sourceUri)))return!0;return!1}_getEditorRepositoryId(e){const t=_.getOriginalUri(e);return t?this.scmService.getRepository(t)?.id:void 0}dispose(){this._onDidRepositoryChange.dispose(),super.dispose()}};l=S([a(0,j),a(1,B),a(2,H)],l);export{g as SCMActiveRepositoryController,l as SCMActiveResourceContextKeyController};
