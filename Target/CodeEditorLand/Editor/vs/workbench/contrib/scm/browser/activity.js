var B=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var R=(p,d,e,t)=>{for(var i=t>1?void 0:t?A(d,e):d,s=p.length-1,o;s>=0;s--)(o=p[s])&&(i=(t?o(d,e,i):o(i))||i);return t&&i&&B(d,e,i),i},n=(p,d)=>(e,t)=>d(e,t,p);import{localize as y}from"../../../../nls.js";import{basename as N}from"../../../../base/common/resources.js";import{Disposable as _}from"../../../../base/common/lifecycle.js";import{Emitter as w,Event as f}from"../../../../base/common/event.js";import{VIEW_PANE_ID as D,ISCMService as x,ISCMViewService as G}from"../common/scm.js";import{IActivityService as V,NumberBadge as H}from"../../../services/activity/common/activity.js";import{IContextKeyService as P,RawContextKey as m}from"../../../../platform/contextkey/common/contextkey.js";import{IStatusbarService as T,StatusbarAlignment as S}from"../../../services/statusbar/browser/statusbar.js";import{IConfigurationService as U}from"../../../../platform/configuration/common/configuration.js";import{EditorResourceAccessor as K}from"../../../common/editor.js";import{IUriIdentityService as $}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{Iterable as W}from"../../../../base/common/iterator.js";import{ITitleService as k}from"../../../services/title/browser/titleService.js";import{IEditorGroupsService as O}from"../../../services/editor/common/editorGroupsService.js";import{getRepositoryResourceCount as L}from"./util.js";import{autorun as F,autorunWithStore as C,derived as I,observableFromEvent as b}from"../../../../base/common/observable.js";import{observableConfigValue as M}from"../../../../platform/observable/common/platformObservableUtils.js";const h={ActiveRepositoryName:new m("scmActiveRepositoryName",""),ActiveRepositoryBranchName:new m("scmActiveRepositoryBranchName","")};let g=class extends _{constructor(e,t,i,s,o,c,u){super();this.activityService=e;this.configurationService=t;this.contextKeyService=i;this.scmService=s;this.scmViewService=o;this.statusbarService=c;this.titleService=u;this._activeRepositoryNameContextKey=h.ActiveRepositoryName.bindTo(this.contextKeyService),this._activeRepositoryBranchNameContextKey=h.ActiveRepositoryBranchName.bindTo(this.contextKeyService),this.titleService.registerVariables([{name:"activeRepositoryName",contextKey:h.ActiveRepositoryName.key},{name:"activeRepositoryBranchName",contextKey:h.ActiveRepositoryBranchName.key}]),this._register(C((r,a)=>{this._updateActivityCountBadge(this._countBadge.read(r),a)})),this._register(C((r,a)=>{const v=this.scmViewService.activeRepository.read(r),E=v?.provider.statusBarCommands.read(r);this._updateStatusBar(v,E??[],a)})),this._register(F(r=>{const a=this.scmViewService.activeRepository.read(r),v=this._activeRepositoryCurrentHistoryItemGroupName.read(r);this._updateActiveRepositoryContextKeys(a?.provider.name,v)}))}_countBadgeConfig=M("scm.countBadge","all",this.configurationService);_repositories=b(this,f.any(this.scmService.onDidAddRepository,this.scmService.onDidRemoveRepository),()=>this.scmService.repositories);_activeRepositoryCurrentHistoryItemGroupName=I(e=>this.scmViewService.activeRepository.read(e)?.provider.historyProvider.read(e)?.currentHistoryItemGroup.read(e)?.name);_countBadgeRepositories=I(this,e=>{switch(this._countBadgeConfig.read(e)){case"all":{const t=this._repositories.read(e);return[...W.map(t,i=>({provider:i.provider,resourceCount:this._getRepositoryResourceCount(i)}))]}case"focused":{const t=this.scmViewService.activeRepository.read(e);return t?[{provider:t.provider,resourceCount:this._getRepositoryResourceCount(t)}]:[]}case"off":return[];default:throw new Error("Invalid countBadge setting")}});_countBadge=I(this,e=>{let t=0;for(const i of this._countBadgeRepositories.read(e)){const s=i.provider.count?.read(e),o=i.resourceCount.read(e);t=t+(s??o)}return t});_activeRepositoryNameContextKey;_activeRepositoryBranchNameContextKey;_getRepositoryResourceCount(e){return b(this,e.provider.onDidChangeResources,()=>L(e.provider))}_updateActivityCountBadge(e,t){if(e===0)return;const i=new H(e,s=>y("scmPendingChangesBadge","{0} pending changes",s));t.add(this.activityService.showViewActivity(D,{badge:i}))}_updateStatusBar(e,t,i){if(!e)return;const s=e.provider.rootUri?`${N(e.provider.rootUri)} (${e.provider.label})`:e.provider.label;for(let o=0;o<t.length;o++){const c=t[o],u=`${s}${c.tooltip?` - ${c.tooltip}`:""}`;let r=c.arguments?.[0];r&&typeof r=="string"?(r=r.substring(0,r.lastIndexOf("/")).replace(/^git\./,""),r.length>1&&(r=r[0].toLocaleUpperCase()+r.slice(1))):r="";const a={name:y("status.scm","Source Control")+(r?` ${r}`:""),text:c.title,ariaLabel:u,tooltip:u,command:c.id?c:void 0};i.add(o===0?this.statusbarService.addEntry(a,`status.scm.${o}`,S.LEFT,1e4):this.statusbarService.addEntry(a,`status.scm.${o}`,S.LEFT,{id:`status.scm.${o-1}`,alignment:S.RIGHT,compact:!0}))}}_updateActiveRepositoryContextKeys(e,t){this._activeRepositoryNameContextKey.set(e??""),this._activeRepositoryBranchNameContextKey.set(t??"")}};g=R([n(0,V),n(1,U),n(2,P),n(3,x),n(4,G),n(5,T),n(6,k)],g);let l=class extends _{constructor(e,t,i){super();this.scmService=t;this.uriIdentityService=i;const s=new m("scmActiveResourceHasChanges",!1,y("scmActiveResourceHasChanges","Whether the active resource has changes")),o=new m("scmActiveResourceRepository",void 0,y("scmActiveResourceRepository","The active resource's repository"));this._store.add(C((r,a)=>{for(const v of this._repositories.read(r))a.add(f.runAndSubscribe(v.provider.onDidChangeResources,()=>{this._onDidRepositoryChange.fire()}))}));const c={contextKey:s,getGroupContextKeyValue:r=>this._getEditorHasChanges(r.activeEditor),onDidChange:this._onDidRepositoryChange.event},u={contextKey:o,getGroupContextKeyValue:r=>this._getEditorRepositoryId(r.activeEditor),onDidChange:this._onDidRepositoryChange.event};this._store.add(e.registerContextKeyProvider(c)),this._store.add(e.registerContextKeyProvider(u))}_repositories=b(this,f.any(this.scmService.onDidAddRepository,this.scmService.onDidRemoveRepository),()=>this.scmService.repositories);_onDidRepositoryChange=new w;_getEditorHasChanges(e){const t=K.getOriginalUri(e);if(!t)return!1;const i=this.scmService.getRepository(t);for(const s of i?.provider.groups??[])if(s.resources.some(o=>this.uriIdentityService.extUri.isEqual(t,o.sourceUri)))return!0;return!1}_getEditorRepositoryId(e){const t=K.getOriginalUri(e);return t?this.scmService.getRepository(t)?.id:void 0}dispose(){this._onDidRepositoryChange.dispose(),super.dispose()}};l=R([n(0,O),n(1,x),n(2,$)],l);export{g as SCMActiveRepositoryController,l as SCMActiveResourceContextKeyController};
