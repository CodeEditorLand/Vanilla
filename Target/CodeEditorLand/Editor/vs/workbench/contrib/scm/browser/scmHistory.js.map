{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/scmHistory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { buttonForeground, chartsBlue, chartsPurple, foreground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { asCssVariable, ColorIdentifier, registerColor, transparent } from '../../../../platform/theme/common/colorUtils.js';\nimport { ISCMHistoryItem, ISCMHistoryItemGraphNode, ISCMHistoryItemRef, ISCMHistoryItemViewModel } from '../common/history.js';\nimport { rot } from '../../../../base/common/numbers.js';\nimport { svgElem } from '../../../../base/browser/dom.js';\n\nexport const SWIMLANE_HEIGHT = 22;\nexport const SWIMLANE_WIDTH = 11;\nconst SWIMLANE_CURVE_RADIUS = 5;\nconst CIRCLE_RADIUS = 4;\nconst CIRCLE_STROKE_WIDTH = 2;\n\n/**\n * History item reference colors (local, remote, base)\n */\nexport const historyItemRefColor = registerColor('scmGraph.historyItemRefColor', chartsBlue, localize('scmGraphHistoryItemRefColor', \"History item reference color.\"));\nexport const historyItemRemoteRefColor = registerColor('scmGraph.historyItemRemoteRefColor', chartsPurple, localize('scmGraphHistoryItemRemoteRefColor', \"History item remote reference color.\"));\nexport const historyItemBaseRefColor = registerColor('scmGraph.historyItemBaseRefColor', '#EA5C00', localize('scmGraphHistoryItemBaseRefColor', \"History item base reference color.\"));\n\n/**\n * History item hover color\n */\nexport const historyItemHoverDefaultLabelForeground = registerColor('scmGraph.historyItemHoverDefaultLabelForeground', foreground, localize('scmGraphHistoryItemHoverDefaultLabelForeground', \"History item hover default label foreground color.\"));\nexport const historyItemHoverDefaultLabelBackground = registerColor('scmGraph.historyItemHoverDefaultLabelBackground', transparent(foreground, 0.2), localize('scmGraphHistoryItemHoverDefaultLabelBackground', \"History item hover default label background color.\"));\nexport const historyItemHoverLabelForeground = registerColor('scmGraph.historyItemHoverLabelForeground', buttonForeground, localize('scmGraphHistoryItemHoverLabelForeground', \"History item hover label foreground color.\"));\nexport const historyItemHoverAdditionsForeground = registerColor('scmGraph.historyItemHoverAdditionsForeground', 'gitDecoration.addedResourceForeground', localize('scmGraph.HistoryItemHoverAdditionsForeground', \"History item hover additions foreground color.\"));\nexport const historyItemHoverDeletionsForeground = registerColor('scmGraph.historyItemHoverDeletionsForeground', 'gitDecoration.deletedResourceForeground', localize('scmGraph.HistoryItemHoverDeletionsForeground', \"History item hover deletions foreground color.\"));\n\n/**\n * History graph color registry\n */\nexport const colorRegistry: ColorIdentifier[] = [\n\tregisterColor('scmGraph.foreground1', '#FFB000', localize('scmGraphForeground1', \"Source control graph foreground color (1).\")),\n\tregisterColor('scmGraph.foreground2', '#DC267F', localize('scmGraphForeground2', \"Source control graph foreground color (2).\")),\n\tregisterColor('scmGraph.foreground3', '#994F00', localize('scmGraphForeground3', \"Source control graph foreground color (3).\")),\n\tregisterColor('scmGraph.foreground4', '#40B0A6', localize('scmGraphForeground4', \"Source control graph foreground color (4).\")),\n\tregisterColor('scmGraph.foreground5', '#B66DFF', localize('scmGraphForeground5', \"Source control graph foreground color (5).\")),\n];\n\nfunction getLabelColorIdentifier(historyItem: ISCMHistoryItem, colorMap: Map<string, ColorIdentifier | undefined>): ColorIdentifier | undefined {\n\tfor (const ref of historyItem.references ?? []) {\n\t\tconst colorIdentifier = colorMap.get(ref.id);\n\t\tif (colorIdentifier !== undefined) {\n\t\t\treturn colorIdentifier;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction createPath(colorIdentifier: string): SVGPathElement {\n\tconst path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\tpath.setAttribute('fill', 'none');\n\tpath.setAttribute('stroke-width', '1px');\n\tpath.setAttribute('stroke-linecap', 'round');\n\tpath.style.stroke = asCssVariable(colorIdentifier);\n\n\treturn path;\n}\n\nfunction drawCircle(index: number, radius: number, strokeWidth: number, colorIdentifier?: string): SVGCircleElement {\n\tconst circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n\tcircle.setAttribute('cx', `${SWIMLANE_WIDTH * (index + 1)}`);\n\tcircle.setAttribute('cy', `${SWIMLANE_WIDTH}`);\n\tcircle.setAttribute('r', `${radius}`);\n\n\tcircle.style.strokeWidth = `${strokeWidth}px`;\n\tif (colorIdentifier) {\n\t\tcircle.style.fill = asCssVariable(colorIdentifier);\n\t}\n\n\treturn circle;\n}\n\nfunction drawVerticalLine(x1: number, y1: number, y2: number, color: string): SVGPathElement {\n\tconst path = createPath(color);\n\tpath.setAttribute('d', `M ${x1} ${y1} V ${y2}`);\n\n\treturn path;\n}\n\nfunction findLastIndex(nodes: ISCMHistoryItemGraphNode[], id: string): number {\n\tfor (let i = nodes.length - 1; i >= 0; i--) {\n\t\tif (nodes[i].id === id) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\nexport function renderSCMHistoryItemGraph(historyItemViewModel: ISCMHistoryItemViewModel): SVGElement {\n\tconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\tsvg.classList.add('graph');\n\n\tconst historyItem = historyItemViewModel.historyItem;\n\tconst inputSwimlanes = historyItemViewModel.inputSwimlanes;\n\tconst outputSwimlanes = historyItemViewModel.outputSwimlanes;\n\n\t// Find the history item in the input swimlanes\n\tconst inputIndex = inputSwimlanes.findIndex(node => node.id === historyItem.id);\n\n\t// Circle index - use the input swimlane index if present, otherwise add it to the end\n\tconst circleIndex = inputIndex !== -1 ? inputIndex : inputSwimlanes.length;\n\n\t// Circle color - use the output swimlane color if present, otherwise the input swimlane color\n\tconst circleColor = circleIndex < outputSwimlanes.length ? outputSwimlanes[circleIndex].color :\n\t\tcircleIndex < inputSwimlanes.length ? inputSwimlanes[circleIndex].color : historyItemRefColor;\n\n\tlet outputSwimlaneIndex = 0;\n\tfor (let index = 0; index < inputSwimlanes.length; index++) {\n\t\tconst color = inputSwimlanes[index].color;\n\n\t\t// Current commit\n\t\tif (inputSwimlanes[index].id === historyItem.id) {\n\t\t\t// Base commit\n\t\t\tif (index !== circleIndex) {\n\t\t\t\tconst d: string[] = [];\n\t\t\t\tconst path = createPath(color);\n\n\t\t\t\t// Draw /\n\t\t\t\td.push(`M ${SWIMLANE_WIDTH * (index + 1)} 0`);\n\t\t\t\td.push(`A ${SWIMLANE_WIDTH} ${SWIMLANE_WIDTH} 0 0 1 ${SWIMLANE_WIDTH * (index)} ${SWIMLANE_WIDTH}`);\n\n\t\t\t\t// Draw -\n\t\t\t\td.push(`H ${SWIMLANE_WIDTH * (circleIndex + 1)}`);\n\n\t\t\t\tpath.setAttribute('d', d.join(' '));\n\t\t\t\tsvg.append(path);\n\t\t\t} else {\n\t\t\t\toutputSwimlaneIndex++;\n\t\t\t}\n\t\t} else {\n\t\t\t// Not the current commit\n\t\t\tif (outputSwimlaneIndex < outputSwimlanes.length &&\n\t\t\t\tinputSwimlanes[index].id === outputSwimlanes[outputSwimlaneIndex].id) {\n\t\t\t\tif (index === outputSwimlaneIndex) {\n\t\t\t\t\t// Draw |\n\t\t\t\t\tconst path = drawVerticalLine(SWIMLANE_WIDTH * (index + 1), 0, SWIMLANE_HEIGHT, color);\n\t\t\t\t\tsvg.append(path);\n\t\t\t\t} else {\n\t\t\t\t\tconst d: string[] = [];\n\t\t\t\t\tconst path = createPath(color);\n\n\t\t\t\t\t// Draw |\n\t\t\t\t\td.push(`M ${SWIMLANE_WIDTH * (index + 1)} 0`);\n\t\t\t\t\td.push(`V 6`);\n\n\t\t\t\t\t// Draw /\n\t\t\t\t\td.push(`A ${SWIMLANE_CURVE_RADIUS} ${SWIMLANE_CURVE_RADIUS} 0 0 1 ${(SWIMLANE_WIDTH * (index + 1)) - SWIMLANE_CURVE_RADIUS} ${SWIMLANE_HEIGHT / 2}`);\n\n\t\t\t\t\t// Draw -\n\t\t\t\t\td.push(`H ${(SWIMLANE_WIDTH * (outputSwimlaneIndex + 1)) + SWIMLANE_CURVE_RADIUS}`);\n\n\t\t\t\t\t// Draw /\n\t\t\t\t\td.push(`A ${SWIMLANE_CURVE_RADIUS} ${SWIMLANE_CURVE_RADIUS} 0 0 0 ${SWIMLANE_WIDTH * (outputSwimlaneIndex + 1)} ${(SWIMLANE_HEIGHT / 2) + SWIMLANE_CURVE_RADIUS}`);\n\n\t\t\t\t\t// Draw |\n\t\t\t\t\td.push(`V ${SWIMLANE_HEIGHT}`);\n\n\t\t\t\t\tpath.setAttribute('d', d.join(' '));\n\t\t\t\t\tsvg.append(path);\n\t\t\t\t}\n\n\t\t\t\toutputSwimlaneIndex++;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add remaining parent(s)\n\tfor (let i = 1; i < historyItem.parentIds.length; i++) {\n\t\tconst parentOutputIndex = findLastIndex(outputSwimlanes, historyItem.parentIds[i]);\n\t\tif (parentOutputIndex === -1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Draw -\\\n\t\tconst d: string[] = [];\n\t\tconst path = createPath(outputSwimlanes[parentOutputIndex].color);\n\n\t\t// Draw \\\n\t\td.push(`M ${SWIMLANE_WIDTH * parentOutputIndex} ${SWIMLANE_HEIGHT / 2}`);\n\t\td.push(`A ${SWIMLANE_WIDTH} ${SWIMLANE_WIDTH} 0 0 1 ${SWIMLANE_WIDTH * (parentOutputIndex + 1)} ${SWIMLANE_HEIGHT}`);\n\n\t\t// Draw -\n\t\td.push(`M ${SWIMLANE_WIDTH * parentOutputIndex} ${SWIMLANE_HEIGHT / 2}`);\n\t\td.push(`H ${SWIMLANE_WIDTH * (circleIndex + 1)} `);\n\n\t\tpath.setAttribute('d', d.join(' '));\n\t\tsvg.append(path);\n\t}\n\n\t// Draw | to *\n\tif (inputIndex !== -1) {\n\t\tconst path = drawVerticalLine(SWIMLANE_WIDTH * (circleIndex + 1), 0, SWIMLANE_HEIGHT / 2, inputSwimlanes[inputIndex].color);\n\t\tsvg.append(path);\n\t}\n\n\t// Draw | from *\n\tif (historyItem.parentIds.length > 0) {\n\t\tconst path = drawVerticalLine(SWIMLANE_WIDTH * (circleIndex + 1), SWIMLANE_HEIGHT / 2, SWIMLANE_HEIGHT, circleColor);\n\t\tsvg.append(path);\n\t}\n\n\t// Draw *\n\tif (historyItemViewModel.isCurrent) {\n\t\t// HEAD\n\t\tconst outerCircle = drawCircle(circleIndex, CIRCLE_RADIUS + 3, CIRCLE_STROKE_WIDTH, circleColor);\n\t\tsvg.append(outerCircle);\n\n\t\tconst innerCircle = drawCircle(circleIndex, CIRCLE_STROKE_WIDTH, CIRCLE_RADIUS);\n\t\tsvg.append(innerCircle);\n\t} else {\n\t\tif (historyItem.parentIds.length > 1) {\n\t\t\t// Multi-parent node\n\t\t\tconst circleOuter = drawCircle(circleIndex, CIRCLE_RADIUS + 2, CIRCLE_STROKE_WIDTH, circleColor);\n\t\t\tsvg.append(circleOuter);\n\n\t\t\tconst circleInner = drawCircle(circleIndex, CIRCLE_RADIUS - 1, CIRCLE_STROKE_WIDTH, circleColor);\n\t\t\tsvg.append(circleInner);\n\t\t} else {\n\t\t\t// Node\n\t\t\tconst circle = drawCircle(circleIndex, CIRCLE_RADIUS + 1, CIRCLE_STROKE_WIDTH, circleColor);\n\t\t\tsvg.append(circle);\n\t\t}\n\t}\n\n\t// Set dimensions\n\tsvg.style.height = `${SWIMLANE_HEIGHT}px`;\n\tsvg.style.width = `${SWIMLANE_WIDTH * (Math.max(inputSwimlanes.length, outputSwimlanes.length, 1) + 1)}px`;\n\n\treturn svg;\n}\n\nexport function renderSCMHistoryGraphPlaceholder(columns: ISCMHistoryItemGraphNode[]): HTMLElement {\n\tconst elements = svgElem('svg', {\n\t\tstyle: { height: `${SWIMLANE_HEIGHT}px`, width: `${SWIMLANE_WIDTH * (columns.length + 1)}px`, }\n\t});\n\n\t// Draw |\n\tfor (let index = 0; index < columns.length; index++) {\n\t\tconst path = drawVerticalLine(SWIMLANE_WIDTH * (index + 1), 0, SWIMLANE_HEIGHT, columns[index].color);\n\t\telements.root.append(path);\n\t}\n\n\treturn elements.root;\n}\n\nexport function toISCMHistoryItemViewModelArray(\n\thistoryItems: ISCMHistoryItem[],\n\tcolorMap = new Map<string, ColorIdentifier | undefined>(),\n\tcurrentHistoryItemRef?: ISCMHistoryItemRef\n): ISCMHistoryItemViewModel[] {\n\tlet colorIndex = -1;\n\tconst viewModels: ISCMHistoryItemViewModel[] = [];\n\n\tfor (let index = 0; index < historyItems.length; index++) {\n\t\tconst historyItem = historyItems[index];\n\n\t\tconst isCurrent = historyItem.id === currentHistoryItemRef?.revision;\n\t\tconst outputSwimlanesFromPreviousItem = viewModels.at(-1)?.outputSwimlanes ?? [];\n\t\tconst inputSwimlanes = outputSwimlanesFromPreviousItem.map(i => deepClone(i));\n\t\tconst outputSwimlanes: ISCMHistoryItemGraphNode[] = [];\n\n\t\tlet firstParentAdded = false;\n\n\t\t// Add first parent to the output\n\t\tif (historyItem.parentIds.length > 0) {\n\t\t\tfor (const node of inputSwimlanes) {\n\t\t\t\tif (node.id === historyItem.id) {\n\t\t\t\t\tif (!firstParentAdded) {\n\t\t\t\t\t\toutputSwimlanes.push({\n\t\t\t\t\t\t\tid: historyItem.parentIds[0],\n\t\t\t\t\t\t\tcolor: getLabelColorIdentifier(historyItem, colorMap) ?? node.color\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfirstParentAdded = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\toutputSwimlanes.push(deepClone(node));\n\t\t\t}\n\t\t}\n\n\t\t// Add unprocessed parent(s) to the output\n\t\tfor (let i = firstParentAdded ? 1 : 0; i < historyItem.parentIds.length; i++) {\n\t\t\t// Color index (label -> next color)\n\t\t\tlet colorIdentifier: string | undefined;\n\n\t\t\tif (!firstParentAdded) {\n\t\t\t\tcolorIdentifier = getLabelColorIdentifier(historyItem, colorMap);\n\t\t\t} else {\n\t\t\t\tconst historyItemParent = historyItems\n\t\t\t\t\t.find(h => h.id === historyItem.parentIds[i]);\n\t\t\t\tcolorIdentifier = historyItemParent ? getLabelColorIdentifier(historyItemParent, colorMap) : undefined;\n\t\t\t}\n\n\t\t\tif (!colorIdentifier) {\n\t\t\t\tcolorIndex = rot(colorIndex + 1, colorRegistry.length);\n\t\t\t\tcolorIdentifier = colorRegistry[colorIndex];\n\t\t\t}\n\n\t\t\toutputSwimlanes.push({\n\t\t\t\tid: historyItem.parentIds[i],\n\t\t\t\tcolor: colorIdentifier\n\t\t\t});\n\t\t}\n\n\t\t// Add colors to references\n\t\tconst references = (historyItem.references ?? [])\n\t\t\t.map(ref => {\n\t\t\t\tlet color = colorMap.get(ref.id);\n\t\t\t\tif (colorMap.has(ref.id) && color === undefined) {\n\t\t\t\t\t// Find the history item in the input swimlanes\n\t\t\t\t\tconst inputIndex = inputSwimlanes.findIndex(node => node.id === historyItem.id);\n\n\t\t\t\t\t// Circle index - use the input swimlane index if present, otherwise add it to the end\n\t\t\t\t\tconst circleIndex = inputIndex !== -1 ? inputIndex : inputSwimlanes.length;\n\n\t\t\t\t\t// Circle color - use the output swimlane color if present, otherwise the input swimlane color\n\t\t\t\t\tcolor = circleIndex < outputSwimlanes.length ? outputSwimlanes[circleIndex].color :\n\t\t\t\t\t\tcircleIndex < inputSwimlanes.length ? inputSwimlanes[circleIndex].color : historyItemRefColor;\n\t\t\t\t}\n\n\t\t\t\treturn { ...ref, color };\n\t\t\t});\n\n\t\tviewModels.push({\n\t\t\thistoryItem: {\n\t\t\t\t...historyItem,\n\t\t\t\treferences\n\t\t\t},\n\t\t\tisCurrent,\n\t\t\tinputSwimlanes,\n\t\t\toutputSwimlanes,\n\t\t});\n\t}\n\n\treturn viewModels;\n}\n"],
  "mappings": "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",
  "names": []
}
