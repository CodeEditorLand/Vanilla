{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/scmHistory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { svgElem } from \"../../../../base/browser/dom.js\";\nimport { rot } from \"../../../../base/common/numbers.js\";\nimport { deepClone } from \"../../../../base/common/objects.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tbuttonForeground,\n\tchartsBlue,\n\tchartsPurple,\n\tforeground,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\ttype ColorIdentifier,\n\tasCssVariable,\n\tregisterColor,\n\ttransparent,\n} from \"../../../../platform/theme/common/colorUtils.js\";\nimport type {\n\tISCMHistoryItem,\n\tISCMHistoryItemGraphNode,\n\tISCMHistoryItemRef,\n\tISCMHistoryItemViewModel,\n} from \"../common/history.js\";\n\nexport const SWIMLANE_HEIGHT = 22;\nexport const SWIMLANE_WIDTH = 11;\nconst SWIMLANE_CURVE_RADIUS = 5;\nconst CIRCLE_RADIUS = 4;\nconst CIRCLE_STROKE_WIDTH = 2;\n\n/**\n * History item reference colors (local, remote, base)\n */\nexport const historyItemRefColor = registerColor(\n\t\"scmGraph.historyItemRefColor\",\n\tchartsBlue,\n\tlocalize(\"scmGraphHistoryItemRefColor\", \"History item reference color.\"),\n);\nexport const historyItemRemoteRefColor = registerColor(\n\t\"scmGraph.historyItemRemoteRefColor\",\n\tchartsPurple,\n\tlocalize(\n\t\t\"scmGraphHistoryItemRemoteRefColor\",\n\t\t\"History item remote reference color.\",\n\t),\n);\nexport const historyItemBaseRefColor = registerColor(\n\t\"scmGraph.historyItemBaseRefColor\",\n\t\"#EA5C00\",\n\tlocalize(\n\t\t\"scmGraphHistoryItemBaseRefColor\",\n\t\t\"History item base reference color.\",\n\t),\n);\n\n/**\n * History item hover color\n */\nexport const historyItemHoverDefaultLabelForeground = registerColor(\n\t\"scmGraph.historyItemHoverDefaultLabelForeground\",\n\tforeground,\n\tlocalize(\n\t\t\"scmGraphHistoryItemHoverDefaultLabelForeground\",\n\t\t\"History item hover default label foreground color.\",\n\t),\n);\nexport const historyItemHoverDefaultLabelBackground = registerColor(\n\t\"scmGraph.historyItemHoverDefaultLabelBackground\",\n\ttransparent(foreground, 0.2),\n\tlocalize(\n\t\t\"scmGraphHistoryItemHoverDefaultLabelBackground\",\n\t\t\"History item hover default label background color.\",\n\t),\n);\nexport const historyItemHoverLabelForeground = registerColor(\n\t\"scmGraph.historyItemHoverLabelForeground\",\n\tbuttonForeground,\n\tlocalize(\n\t\t\"scmGraphHistoryItemHoverLabelForeground\",\n\t\t\"History item hover label foreground color.\",\n\t),\n);\nexport const historyItemHoverAdditionsForeground = registerColor(\n\t\"scmGraph.historyItemHoverAdditionsForeground\",\n\t\"gitDecoration.addedResourceForeground\",\n\tlocalize(\n\t\t\"scmGraph.HistoryItemHoverAdditionsForeground\",\n\t\t\"History item hover additions foreground color.\",\n\t),\n);\nexport const historyItemHoverDeletionsForeground = registerColor(\n\t\"scmGraph.historyItemHoverDeletionsForeground\",\n\t\"gitDecoration.deletedResourceForeground\",\n\tlocalize(\n\t\t\"scmGraph.HistoryItemHoverDeletionsForeground\",\n\t\t\"History item hover deletions foreground color.\",\n\t),\n);\n\n/**\n * History graph color registry\n */\nexport const colorRegistry: ColorIdentifier[] = [\n\tregisterColor(\n\t\t\"scmGraph.foreground1\",\n\t\t\"#FFB000\",\n\t\tlocalize(\n\t\t\t\"scmGraphForeground1\",\n\t\t\t\"Source control graph foreground color (1).\",\n\t\t),\n\t),\n\tregisterColor(\n\t\t\"scmGraph.foreground2\",\n\t\t\"#DC267F\",\n\t\tlocalize(\n\t\t\t\"scmGraphForeground2\",\n\t\t\t\"Source control graph foreground color (2).\",\n\t\t),\n\t),\n\tregisterColor(\n\t\t\"scmGraph.foreground3\",\n\t\t\"#994F00\",\n\t\tlocalize(\n\t\t\t\"scmGraphForeground3\",\n\t\t\t\"Source control graph foreground color (3).\",\n\t\t),\n\t),\n\tregisterColor(\n\t\t\"scmGraph.foreground4\",\n\t\t\"#40B0A6\",\n\t\tlocalize(\n\t\t\t\"scmGraphForeground4\",\n\t\t\t\"Source control graph foreground color (4).\",\n\t\t),\n\t),\n\tregisterColor(\n\t\t\"scmGraph.foreground5\",\n\t\t\"#B66DFF\",\n\t\tlocalize(\n\t\t\t\"scmGraphForeground5\",\n\t\t\t\"Source control graph foreground color (5).\",\n\t\t),\n\t),\n];\n\nfunction getLabelColorIdentifier(\n\thistoryItem: ISCMHistoryItem,\n\tcolorMap: Map<string, ColorIdentifier | undefined>,\n): ColorIdentifier | undefined {\n\tfor (const ref of historyItem.references ?? []) {\n\t\tconst colorIdentifier = colorMap.get(ref.id);\n\t\tif (colorIdentifier !== undefined) {\n\t\t\treturn colorIdentifier;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction createPath(colorIdentifier: string): SVGPathElement {\n\tconst path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\tpath.setAttribute(\"fill\", \"none\");\n\tpath.setAttribute(\"stroke-width\", \"1px\");\n\tpath.setAttribute(\"stroke-linecap\", \"round\");\n\tpath.style.stroke = asCssVariable(colorIdentifier);\n\n\treturn path;\n}\n\nfunction drawCircle(\n\tindex: number,\n\tradius: number,\n\tstrokeWidth: number,\n\tcolorIdentifier?: string,\n): SVGCircleElement {\n\tconst circle = document.createElementNS(\n\t\t\"http://www.w3.org/2000/svg\",\n\t\t\"circle\",\n\t);\n\tcircle.setAttribute(\"cx\", `${SWIMLANE_WIDTH * (index + 1)}`);\n\tcircle.setAttribute(\"cy\", `${SWIMLANE_WIDTH}`);\n\tcircle.setAttribute(\"r\", `${radius}`);\n\n\tcircle.style.strokeWidth = `${strokeWidth}px`;\n\tif (colorIdentifier) {\n\t\tcircle.style.fill = asCssVariable(colorIdentifier);\n\t}\n\n\treturn circle;\n}\n\nfunction drawVerticalLine(\n\tx1: number,\n\ty1: number,\n\ty2: number,\n\tcolor: string,\n): SVGPathElement {\n\tconst path = createPath(color);\n\tpath.setAttribute(\"d\", `M ${x1} ${y1} V ${y2}`);\n\n\treturn path;\n}\n\nfunction findLastIndex(nodes: ISCMHistoryItemGraphNode[], id: string): number {\n\tfor (let i = nodes.length - 1; i >= 0; i--) {\n\t\tif (nodes[i].id === id) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\nexport function renderSCMHistoryItemGraph(\n\thistoryItemViewModel: ISCMHistoryItemViewModel,\n): SVGElement {\n\tconst svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n\tsvg.classList.add(\"graph\");\n\n\tconst historyItem = historyItemViewModel.historyItem;\n\tconst inputSwimlanes = historyItemViewModel.inputSwimlanes;\n\tconst outputSwimlanes = historyItemViewModel.outputSwimlanes;\n\n\t// Find the history item in the input swimlanes\n\tconst inputIndex = inputSwimlanes.findIndex(\n\t\t(node) => node.id === historyItem.id,\n\t);\n\n\t// Circle index - use the input swimlane index if present, otherwise add it to the end\n\tconst circleIndex = inputIndex !== -1 ? inputIndex : inputSwimlanes.length;\n\n\t// Circle color - use the output swimlane color if present, otherwise the input swimlane color\n\tconst circleColor =\n\t\tcircleIndex < outputSwimlanes.length\n\t\t\t? outputSwimlanes[circleIndex].color\n\t\t\t: circleIndex < inputSwimlanes.length\n\t\t\t\t? inputSwimlanes[circleIndex].color\n\t\t\t\t: historyItemRefColor;\n\n\tlet outputSwimlaneIndex = 0;\n\tfor (let index = 0; index < inputSwimlanes.length; index++) {\n\t\tconst color = inputSwimlanes[index].color;\n\n\t\t// Current commit\n\t\tif (inputSwimlanes[index].id === historyItem.id) {\n\t\t\t// Base commit\n\t\t\tif (index !== circleIndex) {\n\t\t\t\tconst d: string[] = [];\n\t\t\t\tconst path = createPath(color);\n\n\t\t\t\t// Draw /\n\t\t\t\td.push(`M ${SWIMLANE_WIDTH * (index + 1)} 0`);\n\t\t\t\td.push(\n\t\t\t\t\t`A ${SWIMLANE_WIDTH} ${SWIMLANE_WIDTH} 0 0 1 ${SWIMLANE_WIDTH * index} ${SWIMLANE_WIDTH}`,\n\t\t\t\t);\n\n\t\t\t\t// Draw -\n\t\t\t\td.push(`H ${SWIMLANE_WIDTH * (circleIndex + 1)}`);\n\n\t\t\t\tpath.setAttribute(\"d\", d.join(\" \"));\n\t\t\t\tsvg.append(path);\n\t\t\t} else {\n\t\t\t\toutputSwimlaneIndex++;\n\t\t\t}\n\t\t} else {\n\t\t\t// Not the current commit\n\t\t\tif (\n\t\t\t\toutputSwimlaneIndex < outputSwimlanes.length &&\n\t\t\t\tinputSwimlanes[index].id ===\n\t\t\t\t\toutputSwimlanes[outputSwimlaneIndex].id\n\t\t\t) {\n\t\t\t\tif (index === outputSwimlaneIndex) {\n\t\t\t\t\t// Draw |\n\t\t\t\t\tconst path = drawVerticalLine(\n\t\t\t\t\t\tSWIMLANE_WIDTH * (index + 1),\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSWIMLANE_HEIGHT,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t);\n\t\t\t\t\tsvg.append(path);\n\t\t\t\t} else {\n\t\t\t\t\tconst d: string[] = [];\n\t\t\t\t\tconst path = createPath(color);\n\n\t\t\t\t\t// Draw |\n\t\t\t\t\td.push(`M ${SWIMLANE_WIDTH * (index + 1)} 0`);\n\t\t\t\t\td.push(`V 6`);\n\n\t\t\t\t\t// Draw /\n\t\t\t\t\td.push(\n\t\t\t\t\t\t`A ${SWIMLANE_CURVE_RADIUS} ${SWIMLANE_CURVE_RADIUS} 0 0 1 ${SWIMLANE_WIDTH * (index + 1) - SWIMLANE_CURVE_RADIUS} ${SWIMLANE_HEIGHT / 2}`,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Draw -\n\t\t\t\t\td.push(\n\t\t\t\t\t\t`H ${SWIMLANE_WIDTH * (outputSwimlaneIndex + 1) + SWIMLANE_CURVE_RADIUS}`,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Draw /\n\t\t\t\t\td.push(\n\t\t\t\t\t\t`A ${SWIMLANE_CURVE_RADIUS} ${SWIMLANE_CURVE_RADIUS} 0 0 0 ${SWIMLANE_WIDTH * (outputSwimlaneIndex + 1)} ${SWIMLANE_HEIGHT / 2 + SWIMLANE_CURVE_RADIUS}`,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Draw |\n\t\t\t\t\td.push(`V ${SWIMLANE_HEIGHT}`);\n\n\t\t\t\t\tpath.setAttribute(\"d\", d.join(\" \"));\n\t\t\t\t\tsvg.append(path);\n\t\t\t\t}\n\n\t\t\t\toutputSwimlaneIndex++;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add remaining parent(s)\n\tfor (let i = 1; i < historyItem.parentIds.length; i++) {\n\t\tconst parentOutputIndex = findLastIndex(\n\t\t\toutputSwimlanes,\n\t\t\thistoryItem.parentIds[i],\n\t\t);\n\t\tif (parentOutputIndex === -1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Draw -\\\n\t\tconst d: string[] = [];\n\t\tconst path = createPath(outputSwimlanes[parentOutputIndex].color);\n\n\t\t// Draw \\\n\t\td.push(\n\t\t\t`M ${SWIMLANE_WIDTH * parentOutputIndex} ${SWIMLANE_HEIGHT / 2}`,\n\t\t);\n\t\td.push(\n\t\t\t`A ${SWIMLANE_WIDTH} ${SWIMLANE_WIDTH} 0 0 1 ${SWIMLANE_WIDTH * (parentOutputIndex + 1)} ${SWIMLANE_HEIGHT}`,\n\t\t);\n\n\t\t// Draw -\n\t\td.push(\n\t\t\t`M ${SWIMLANE_WIDTH * parentOutputIndex} ${SWIMLANE_HEIGHT / 2}`,\n\t\t);\n\t\td.push(`H ${SWIMLANE_WIDTH * (circleIndex + 1)} `);\n\n\t\tpath.setAttribute(\"d\", d.join(\" \"));\n\t\tsvg.append(path);\n\t}\n\n\t// Draw | to *\n\tif (inputIndex !== -1) {\n\t\tconst path = drawVerticalLine(\n\t\t\tSWIMLANE_WIDTH * (circleIndex + 1),\n\t\t\t0,\n\t\t\tSWIMLANE_HEIGHT / 2,\n\t\t\tinputSwimlanes[inputIndex].color,\n\t\t);\n\t\tsvg.append(path);\n\t}\n\n\t// Draw | from *\n\tif (historyItem.parentIds.length > 0) {\n\t\tconst path = drawVerticalLine(\n\t\t\tSWIMLANE_WIDTH * (circleIndex + 1),\n\t\t\tSWIMLANE_HEIGHT / 2,\n\t\t\tSWIMLANE_HEIGHT,\n\t\t\tcircleColor,\n\t\t);\n\t\tsvg.append(path);\n\t}\n\n\t// Draw *\n\tif (historyItemViewModel.isCurrent) {\n\t\t// HEAD\n\t\tconst outerCircle = drawCircle(\n\t\t\tcircleIndex,\n\t\t\tCIRCLE_RADIUS + 3,\n\t\t\tCIRCLE_STROKE_WIDTH,\n\t\t\tcircleColor,\n\t\t);\n\t\tsvg.append(outerCircle);\n\n\t\tconst innerCircle = drawCircle(\n\t\t\tcircleIndex,\n\t\t\tCIRCLE_STROKE_WIDTH,\n\t\t\tCIRCLE_RADIUS,\n\t\t);\n\t\tsvg.append(innerCircle);\n\t} else if (historyItem.parentIds.length > 1) {\n\t\t// Multi-parent node\n\t\tconst circleOuter = drawCircle(\n\t\t\tcircleIndex,\n\t\t\tCIRCLE_RADIUS + 2,\n\t\t\tCIRCLE_STROKE_WIDTH,\n\t\t\tcircleColor,\n\t\t);\n\t\tsvg.append(circleOuter);\n\n\t\tconst circleInner = drawCircle(\n\t\t\tcircleIndex,\n\t\t\tCIRCLE_RADIUS - 1,\n\t\t\tCIRCLE_STROKE_WIDTH,\n\t\t\tcircleColor,\n\t\t);\n\t\tsvg.append(circleInner);\n\t} else {\n\t\t// Node\n\t\tconst circle = drawCircle(\n\t\t\tcircleIndex,\n\t\t\tCIRCLE_RADIUS + 1,\n\t\t\tCIRCLE_STROKE_WIDTH,\n\t\t\tcircleColor,\n\t\t);\n\t\tsvg.append(circle);\n\t}\n\n\t// Set dimensions\n\tsvg.style.height = `${SWIMLANE_HEIGHT}px`;\n\tsvg.style.width = `${SWIMLANE_WIDTH * (Math.max(inputSwimlanes.length, outputSwimlanes.length, 1) + 1)}px`;\n\n\treturn svg;\n}\n\nexport function renderSCMHistoryGraphPlaceholder(\n\tcolumns: ISCMHistoryItemGraphNode[],\n): HTMLElement {\n\tconst elements = svgElem(\"svg\", {\n\t\tstyle: {\n\t\t\theight: `${SWIMLANE_HEIGHT}px`,\n\t\t\twidth: `${SWIMLANE_WIDTH * (columns.length + 1)}px`,\n\t\t},\n\t});\n\n\t// Draw |\n\tfor (let index = 0; index < columns.length; index++) {\n\t\tconst path = drawVerticalLine(\n\t\t\tSWIMLANE_WIDTH * (index + 1),\n\t\t\t0,\n\t\t\tSWIMLANE_HEIGHT,\n\t\t\tcolumns[index].color,\n\t\t);\n\t\telements.root.append(path);\n\t}\n\n\treturn elements.root;\n}\n\nexport function toISCMHistoryItemViewModelArray(\n\thistoryItems: ISCMHistoryItem[],\n\tcolorMap = new Map<string, ColorIdentifier | undefined>(),\n\tcurrentHistoryItemRef?: ISCMHistoryItemRef,\n): ISCMHistoryItemViewModel[] {\n\tlet colorIndex = -1;\n\tconst viewModels: ISCMHistoryItemViewModel[] = [];\n\n\tfor (let index = 0; index < historyItems.length; index++) {\n\t\tconst historyItem = historyItems[index];\n\n\t\tconst isCurrent = historyItem.id === currentHistoryItemRef?.revision;\n\t\tconst outputSwimlanesFromPreviousItem =\n\t\t\tviewModels.at(-1)?.outputSwimlanes ?? [];\n\t\tconst inputSwimlanes = outputSwimlanesFromPreviousItem.map((i) =>\n\t\t\tdeepClone(i),\n\t\t);\n\t\tconst outputSwimlanes: ISCMHistoryItemGraphNode[] = [];\n\n\t\tlet firstParentAdded = false;\n\n\t\t// Add first parent to the output\n\t\tif (historyItem.parentIds.length > 0) {\n\t\t\tfor (const node of inputSwimlanes) {\n\t\t\t\tif (node.id === historyItem.id) {\n\t\t\t\t\tif (!firstParentAdded) {\n\t\t\t\t\t\toutputSwimlanes.push({\n\t\t\t\t\t\t\tid: historyItem.parentIds[0],\n\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\tgetLabelColorIdentifier(\n\t\t\t\t\t\t\t\t\thistoryItem,\n\t\t\t\t\t\t\t\t\tcolorMap,\n\t\t\t\t\t\t\t\t) ?? node.color,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfirstParentAdded = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\toutputSwimlanes.push(deepClone(node));\n\t\t\t}\n\t\t}\n\n\t\t// Add unprocessed parent(s) to the output\n\t\tfor (\n\t\t\tlet i = firstParentAdded ? 1 : 0;\n\t\t\ti < historyItem.parentIds.length;\n\t\t\ti++\n\t\t) {\n\t\t\t// Color index (label -> next color)\n\t\t\tlet colorIdentifier: string | undefined;\n\n\t\t\tif (firstParentAdded) {\n\t\t\t\tconst historyItemParent = historyItems.find(\n\t\t\t\t\t(h) => h.id === historyItem.parentIds[i],\n\t\t\t\t);\n\t\t\t\tcolorIdentifier = historyItemParent\n\t\t\t\t\t? getLabelColorIdentifier(historyItemParent, colorMap)\n\t\t\t\t\t: undefined;\n\t\t\t} else {\n\t\t\t\tcolorIdentifier = getLabelColorIdentifier(\n\t\t\t\t\thistoryItem,\n\t\t\t\t\tcolorMap,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!colorIdentifier) {\n\t\t\t\tcolorIndex = rot(colorIndex + 1, colorRegistry.length);\n\t\t\t\tcolorIdentifier = colorRegistry[colorIndex];\n\t\t\t}\n\n\t\t\toutputSwimlanes.push({\n\t\t\t\tid: historyItem.parentIds[i],\n\t\t\t\tcolor: colorIdentifier,\n\t\t\t});\n\t\t}\n\n\t\t// Add colors to references\n\t\tconst references = (historyItem.references ?? []).map((ref) => {\n\t\t\tlet color = colorMap.get(ref.id);\n\t\t\tif (colorMap.has(ref.id) && color === undefined) {\n\t\t\t\t// Find the history item in the input swimlanes\n\t\t\t\tconst inputIndex = inputSwimlanes.findIndex(\n\t\t\t\t\t(node) => node.id === historyItem.id,\n\t\t\t\t);\n\n\t\t\t\t// Circle index - use the input swimlane index if present, otherwise add it to the end\n\t\t\t\tconst circleIndex =\n\t\t\t\t\tinputIndex !== -1 ? inputIndex : inputSwimlanes.length;\n\n\t\t\t\t// Circle color - use the output swimlane color if present, otherwise the input swimlane color\n\t\t\t\tcolor =\n\t\t\t\t\tcircleIndex < outputSwimlanes.length\n\t\t\t\t\t\t? outputSwimlanes[circleIndex].color\n\t\t\t\t\t\t: circleIndex < inputSwimlanes.length\n\t\t\t\t\t\t\t? inputSwimlanes[circleIndex].color\n\t\t\t\t\t\t\t: historyItemRefColor;\n\t\t\t}\n\n\t\t\treturn { ...ref, color };\n\t\t});\n\n\t\tviewModels.push({\n\t\t\thistoryItem: {\n\t\t\t\t...historyItem,\n\t\t\t\treferences,\n\t\t\t},\n\t\t\tisCurrent,\n\t\t\tinputSwimlanes,\n\t\t\toutputSwimlanes,\n\t\t});\n\t}\n\n\treturn viewModels;\n}\n"],
  "mappings": "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",
  "names": []
}
