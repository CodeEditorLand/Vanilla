{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/scmRepositoryRenderer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/scm.css';\nimport { IDisposable, DisposableStore, combinedDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun } from '../../../../base/common/observable.js';\nimport { append, $ } from '../../../../base/browser/dom.js';\nimport { ISCMProvider, ISCMRepository, ISCMViewService } from '../common/scm.js';\nimport { CountBadge } from '../../../../base/browser/ui/countBadge/countBadge.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ActionRunner, IAction } from '../../../../base/common/actions.js';\nimport { connectPrimaryMenu, getRepositoryResourceCount, isSCMRepository, StatusBarAction } from './util.js';\nimport { ITreeNode } from '../../../../base/browser/ui/tree/tree.js';\nimport { ICompressibleTreeRenderer } from '../../../../base/browser/ui/tree/objectTree.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { IListRenderer } from '../../../../base/browser/ui/list/list.js';\nimport { IActionViewItemProvider } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { defaultCountBadgeStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { WorkbenchToolBar } from '../../../../platform/actions/browser/toolbar.js';\nimport { IMenuService, MenuId, MenuItemAction } from '../../../../platform/actions/common/actions.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IManagedHover } from '../../../../base/browser/ui/hover/hover.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\n\nexport class RepositoryActionRunner extends ActionRunner {\n\tconstructor(private readonly getSelectedRepositories: () => ISCMRepository[]) {\n\t\tsuper();\n\t}\n\n\tprotected override async runAction(action: IAction, context: ISCMProvider): Promise<void> {\n\t\tif (!(action instanceof MenuItemAction)) {\n\t\t\treturn super.runAction(action, context);\n\t\t}\n\n\t\tconst selection = this.getSelectedRepositories().map(r => r.provider);\n\t\tconst actionContext = selection.some(s => s === context) ? selection : [context];\n\n\t\tawait action.run(...actionContext);\n\t}\n}\n\ninterface RepositoryTemplate {\n\treadonly label: HTMLElement;\n\treadonly labelCustomHover: IManagedHover;\n\treadonly name: HTMLElement;\n\treadonly description: HTMLElement;\n\treadonly countContainer: HTMLElement;\n\treadonly count: CountBadge;\n\treadonly toolBar: WorkbenchToolBar;\n\treadonly elementDisposables: DisposableStore;\n\treadonly templateDisposable: IDisposable;\n}\n\nexport class RepositoryRenderer implements ICompressibleTreeRenderer<ISCMRepository, FuzzyScore, RepositoryTemplate>, IListRenderer<ISCMRepository, RepositoryTemplate> {\n\n\tstatic readonly TEMPLATE_ID = 'repository';\n\tget templateId(): string { return RepositoryRenderer.TEMPLATE_ID; }\n\n\tconstructor(\n\t\tprivate readonly toolbarMenuId: MenuId,\n\t\tprivate readonly actionViewItemProvider: IActionViewItemProvider,\n\t\t@ICommandService private commandService: ICommandService,\n\t\t@IContextKeyService private contextKeyService: IContextKeyService,\n\t\t@IContextMenuService private contextMenuService: IContextMenuService,\n\t\t@IHoverService private hoverService: IHoverService,\n\t\t@IKeybindingService private keybindingService: IKeybindingService,\n\t\t@IMenuService private menuService: IMenuService,\n\t\t@ISCMViewService private scmViewService: ISCMViewService,\n\t\t@ITelemetryService private telemetryService: ITelemetryService\n\t) { }\n\n\trenderTemplate(container: HTMLElement): RepositoryTemplate {\n\t\t// hack\n\t\tif (container.classList.contains('monaco-tl-contents')) {\n\t\t\t(container.parentElement!.parentElement!.querySelector('.monaco-tl-twistie')! as HTMLElement).classList.add('force-twistie');\n\t\t}\n\n\t\tconst provider = append(container, $('.scm-provider'));\n\t\tconst label = append(provider, $('.label'));\n\t\tconst labelCustomHover = this.hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), label, '', {});\n\t\tconst name = append(label, $('span.name'));\n\t\tconst description = append(label, $('span.description'));\n\t\tconst actions = append(provider, $('.actions'));\n\t\tconst toolBar = new WorkbenchToolBar(actions, { actionViewItemProvider: this.actionViewItemProvider, resetMenu: this.toolbarMenuId }, this.menuService, this.contextKeyService, this.contextMenuService, this.keybindingService, this.commandService, this.telemetryService);\n\t\tconst countContainer = append(provider, $('.count'));\n\t\tconst count = new CountBadge(countContainer, {}, defaultCountBadgeStyles);\n\t\tconst visibilityDisposable = toolBar.onDidChangeDropdownVisibility(e => provider.classList.toggle('active', e));\n\n\t\tconst templateDisposable = combinedDisposable(labelCustomHover, visibilityDisposable, toolBar);\n\n\t\treturn { label, labelCustomHover, name, description, countContainer, count, toolBar, elementDisposables: new DisposableStore(), templateDisposable };\n\t}\n\n\trenderElement(arg: ISCMRepository | ITreeNode<ISCMRepository, FuzzyScore>, index: number, templateData: RepositoryTemplate, height: number | undefined): void {\n\t\tconst repository = isSCMRepository(arg) ? arg : arg.element;\n\n\t\ttemplateData.name.textContent = repository.provider.name;\n\t\tif (repository.provider.rootUri) {\n\t\t\ttemplateData.labelCustomHover.update(`${repository.provider.label}: ${repository.provider.rootUri.fsPath}`);\n\t\t\ttemplateData.description.textContent = repository.provider.label;\n\t\t} else {\n\t\t\ttemplateData.labelCustomHover.update(repository.provider.label);\n\t\t\ttemplateData.description.textContent = '';\n\t\t}\n\n\t\tlet statusPrimaryActions: IAction[] = [];\n\t\tlet menuPrimaryActions: IAction[] = [];\n\t\tlet menuSecondaryActions: IAction[] = [];\n\t\tconst updateToolbar = () => {\n\t\t\ttemplateData.toolBar.setActions([...statusPrimaryActions, ...menuPrimaryActions], menuSecondaryActions);\n\t\t};\n\n\t\ttemplateData.elementDisposables.add(autorun(reader => {\n\t\t\tconst commands = repository.provider.statusBarCommands.read(reader) ?? [];\n\t\t\tstatusPrimaryActions = commands.map(c => new StatusBarAction(c, this.commandService));\n\t\t\tupdateToolbar();\n\t\t}));\n\n\t\ttemplateData.elementDisposables.add(autorun(reader => {\n\t\t\tconst count = repository.provider.count.read(reader) ?? getRepositoryResourceCount(repository.provider);\n\t\t\ttemplateData.countContainer.setAttribute('data-count', String(count));\n\t\t\ttemplateData.count.setCount(count);\n\t\t}));\n\n\t\tconst repositoryMenus = this.scmViewService.menus.getRepositoryMenus(repository.provider);\n\t\tconst menu = this.toolbarMenuId === MenuId.SCMTitle ? repositoryMenus.titleMenu.menu : repositoryMenus.repositoryMenu;\n\t\ttemplateData.elementDisposables.add(connectPrimaryMenu(menu, (primary, secondary) => {\n\t\t\tmenuPrimaryActions = primary;\n\t\t\tmenuSecondaryActions = secondary;\n\t\t\tupdateToolbar();\n\t\t}));\n\n\t\ttemplateData.toolBar.context = repository.provider;\n\t}\n\n\trenderCompressedElements(): void {\n\t\tthrow new Error('Should never happen since node is incompressible');\n\t}\n\n\tdisposeElement(group: ISCMRepository | ITreeNode<ISCMRepository, FuzzyScore>, index: number, template: RepositoryTemplate): void {\n\t\ttemplate.elementDisposables.clear();\n\t}\n\n\tdisposeTemplate(templateData: RepositoryTemplate): void {\n\t\ttemplateData.elementDisposables.dispose();\n\t\ttemplateData.templateDisposable.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
