{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/scmViewService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { binarySearch } from \"../../../../base/common/arrays.js\";\nimport {\n\tcompareFileNames,\n\tcomparePaths,\n} from \"../../../../base/common/comparers.js\";\nimport { debounce } from \"../../../../base/common/decorators.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tderivedObservableWithCache,\n\tlatestChangedValue,\n\tobservableFromEventOpts,\n} from \"../../../../base/common/observable.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { EditorResourceAccessor } from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport {\n\ttype ISCMMenus,\n\ttype ISCMProvider,\n\ttype ISCMRepository,\n\tISCMRepositorySortKey,\n\tISCMService,\n\ttype ISCMViewService,\n\ttype ISCMViewVisibleRepositoryChangeEvent,\n} from \"../common/scm.js\";\nimport { SCMMenus } from \"./menus.js\";\n\nfunction getProviderStorageKey(provider: ISCMProvider): string {\n\treturn `${provider.contextValue}:${provider.label}${provider.rootUri ? `:${provider.rootUri.toString()}` : \"\"}`;\n}\n\nfunction getRepositoryName(\n\tworkspaceContextService: IWorkspaceContextService,\n\trepository: ISCMRepository,\n): string {\n\tif (!repository.provider.rootUri) {\n\t\treturn repository.provider.label;\n\t}\n\n\tconst folder = workspaceContextService.getWorkspaceFolder(\n\t\trepository.provider.rootUri,\n\t);\n\treturn folder?.uri.toString() === repository.provider.rootUri.toString()\n\t\t? folder.name\n\t\t: basename(repository.provider.rootUri);\n}\n\nexport const RepositoryContextKeys = {\n\tRepositorySortKey: new RawContextKey<ISCMRepositorySortKey>(\n\t\t\"scmRepositorySortKey\",\n\t\tISCMRepositorySortKey.DiscoveryTime,\n\t),\n};\n\ninterface ISCMRepositoryView {\n\treadonly repository: ISCMRepository;\n\treadonly discoveryTime: number;\n\tfocused: boolean;\n\tselectionIndex: number;\n}\n\nexport interface ISCMViewServiceState {\n\treadonly all: string[];\n\treadonly sortKey: ISCMRepositorySortKey;\n\treadonly visible: number[];\n}\n\nexport class SCMViewService implements ISCMViewService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly menus: ISCMMenus;\n\n\tprivate didFinishLoading = false;\n\tprivate didSelectRepository = false;\n\tprivate previousState: ISCMViewServiceState | undefined;\n\tprivate readonly disposables = new DisposableStore();\n\n\tprivate _repositories: ISCMRepositoryView[] = [];\n\n\tget repositories(): ISCMRepository[] {\n\t\treturn this._repositories.map((r) => r.repository);\n\t}\n\n\tget visibleRepositories(): ISCMRepository[] {\n\t\t// In order to match the legacy behaviour, when the repositories are sorted by discovery time,\n\t\t// the visible repositories are sorted by the selection index instead of the discovery time.\n\t\tif (this._repositoriesSortKey === ISCMRepositorySortKey.DiscoveryTime) {\n\t\t\treturn this._repositories\n\t\t\t\t.filter((r) => r.selectionIndex !== -1)\n\t\t\t\t.sort((r1, r2) => r1.selectionIndex - r2.selectionIndex)\n\t\t\t\t.map((r) => r.repository);\n\t\t}\n\n\t\treturn this._repositories\n\t\t\t.filter((r) => r.selectionIndex !== -1)\n\t\t\t.map((r) => r.repository);\n\t}\n\n\tset visibleRepositories(visibleRepositories: ISCMRepository[]) {\n\t\tconst set = new Set(visibleRepositories);\n\t\tconst added = new Set<ISCMRepository>();\n\t\tconst removed = new Set<ISCMRepository>();\n\n\t\tfor (const repositoryView of this._repositories) {\n\t\t\t// Selected -> !Selected\n\t\t\tif (\n\t\t\t\t!set.has(repositoryView.repository) &&\n\t\t\t\trepositoryView.selectionIndex !== -1\n\t\t\t) {\n\t\t\t\trepositoryView.selectionIndex = -1;\n\t\t\t\tremoved.add(repositoryView.repository);\n\t\t\t}\n\t\t\t// Selected | !Selected -> Selected\n\t\t\tif (set.has(repositoryView.repository)) {\n\t\t\t\tif (repositoryView.selectionIndex === -1) {\n\t\t\t\t\tadded.add(repositoryView.repository);\n\t\t\t\t}\n\t\t\t\trepositoryView.selectionIndex = visibleRepositories.indexOf(\n\t\t\t\t\trepositoryView.repository,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (added.size === 0 && removed.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDidSetVisibleRepositories.fire({ added, removed });\n\n\t\t// Update focus if the focused repository is not visible anymore\n\t\tif (\n\t\t\tthis._repositories.find((r) => r.focused && r.selectionIndex === -1)\n\t\t) {\n\t\t\tthis.focus(\n\t\t\t\tthis._repositories.find((r) => r.selectionIndex !== -1)\n\t\t\t\t\t?.repository,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _onDidChangeRepositories =\n\t\tnew Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\treadonly onDidChangeRepositories = this._onDidChangeRepositories.event;\n\n\tprivate _onDidSetVisibleRepositories =\n\t\tnew Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\treadonly onDidChangeVisibleRepositories = Event.any(\n\t\tthis._onDidSetVisibleRepositories.event,\n\t\tEvent.debounce(\n\t\t\tthis._onDidChangeRepositories.event,\n\t\t\t(last, e) => {\n\t\t\t\tif (!last) {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\n\t\t\t\tconst added = new Set(last.added);\n\t\t\t\tconst removed = new Set(last.removed);\n\n\t\t\t\tfor (const repository of e.added) {\n\t\t\t\t\tif (removed.has(repository)) {\n\t\t\t\t\t\tremoved.delete(repository);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tadded.add(repository);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const repository of e.removed) {\n\t\t\t\t\tif (added.has(repository)) {\n\t\t\t\t\t\tadded.delete(repository);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoved.add(repository);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { added, removed };\n\t\t\t},\n\t\t\t0,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tthis.disposables,\n\t\t),\n\t);\n\n\tget focusedRepository(): ISCMRepository | undefined {\n\t\treturn this._repositories.find((r) => r.focused)?.repository;\n\t}\n\n\tprivate _onDidFocusRepository = new Emitter<ISCMRepository | undefined>();\n\treadonly onDidFocusRepository = this._onDidFocusRepository.event;\n\n\tprivate readonly _focusedRepository = observableFromEventOpts<\n\t\tISCMRepository | undefined\n\t>(\n\t\t{ owner: this, equalsFn: () => false },\n\t\tthis.onDidFocusRepository,\n\t\t() => this.focusedRepository,\n\t);\n\n\tprivate readonly _activeEditor = observableFromEventOpts(\n\t\t{ owner: this, equalsFn: () => false },\n\t\tthis.editorService.onDidActiveEditorChange,\n\t\t() => this.editorService.activeEditor,\n\t);\n\n\tprivate readonly _activeEditorRepository = derivedObservableWithCache<\n\t\tISCMRepository | undefined\n\t>(this, (reader, lastValue) => {\n\t\tconst activeResource = EditorResourceAccessor.getOriginalUri(\n\t\t\tthis._activeEditor.read(reader),\n\t\t);\n\t\tif (!activeResource) {\n\t\t\treturn lastValue;\n\t\t}\n\n\t\tconst repository = this.scmService.getRepository(activeResource);\n\t\tif (!repository) {\n\t\t\treturn lastValue;\n\t\t}\n\n\t\treturn Object.create(repository);\n\t});\n\n\t/**\n\t * The focused repository takes precedence over the active editor repository when the observable\n\t * values are updated in the same transaction (or during the initial read of the observable value).\n\t */\n\treadonly activeRepository = latestChangedValue(this, [\n\t\tthis._activeEditorRepository,\n\t\tthis._focusedRepository,\n\t]);\n\n\tprivate _repositoriesSortKey: ISCMRepositorySortKey;\n\tprivate _sortKeyContextKey: IContextKey<ISCMRepositorySortKey>;\n\n\tconstructor(\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tthis.menus = instantiationService.createInstance(SCMMenus);\n\n\t\ttry {\n\t\t\tthis.previousState = JSON.parse(storageService.get('scm:view:visibleRepositories', StorageScope.WORKSPACE, ''));\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\n\t\tthis._repositoriesSortKey = this.previousState?.sortKey ?? this.getViewSortOrder();\n\t\tthis._sortKeyContextKey = RepositoryContextKeys.RepositorySortKey.bindTo(contextKeyService);\n\t\tthis._sortKeyContextKey.set(this._repositoriesSortKey);\n\n\t\tscmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n\t\tscmService.onDidRemoveRepository(this.onDidRemoveRepository, this, this.disposables);\n\n\t\tfor (const repository of scmService.repositories) {\n\t\t\tthis.onDidAddRepository(repository);\n\t\t}\n\n\t\tstorageService.onWillSaveState(this.onWillSaveState, this, this.disposables);\n\n\t\t// Maintain repository selection when the extension host restarts.\n\t\t// Extension host is restarted after installing an extension update\n\t\t// or during a profile switch.\n\t\textensionService.onWillStop(() => {\n\t\t\tthis.onWillSaveState();\n\t\t\tthis.didFinishLoading = false;\n\t\t}, this, this.disposables);\n\t}\n\n\tprivate onDidAddRepository(repository: ISCMRepository): void {\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tconst repositoryView: ISCMRepositoryView = {\n\t\t\trepository,\n\t\t\tdiscoveryTime: Date.now(),\n\t\t\tfocused: false,\n\t\t\tselectionIndex: -1,\n\t\t};\n\n\t\tlet removed: Iterable<ISCMRepository> = Iterable.empty();\n\n\t\tif (this.previousState && !this.didFinishLoading) {\n\t\t\tconst index = this.previousState.all.indexOf(\n\t\t\t\tgetProviderStorageKey(repository.provider),\n\t\t\t);\n\n\t\t\tif (index === -1) {\n\t\t\t\t// This repository is not part of the previous state which means that it\n\t\t\t\t// was either manually closed in the previous session, or the repository\n\t\t\t\t// was added after the previous session.In this case, we should select all\n\t\t\t\t// of the repositories.\n\t\t\t\tconst added: ISCMRepository[] = [];\n\n\t\t\t\tthis.insertRepositoryView(this._repositories, repositoryView);\n\t\t\t\tthis._repositories.forEach((repositoryView, index) => {\n\t\t\t\t\tif (repositoryView.selectionIndex === -1) {\n\t\t\t\t\t\tadded.push(repositoryView.repository);\n\t\t\t\t\t}\n\t\t\t\t\trepositoryView.selectionIndex = index;\n\t\t\t\t});\n\n\t\t\t\tthis._onDidChangeRepositories.fire({\n\t\t\t\t\tadded,\n\t\t\t\t\tremoved: Iterable.empty(),\n\t\t\t\t});\n\t\t\t\tthis.didSelectRepository = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.previousState.visible.indexOf(index) === -1) {\n\t\t\t\t// Explicit selection started\n\t\t\t\tif (this.didSelectRepository) {\n\t\t\t\t\tthis.insertRepositoryView(\n\t\t\t\t\t\tthis._repositories,\n\t\t\t\t\t\trepositoryView,\n\t\t\t\t\t);\n\t\t\t\t\tthis._onDidChangeRepositories.fire({\n\t\t\t\t\t\tadded: Iterable.empty(),\n\t\t\t\t\t\tremoved: Iterable.empty(),\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// First visible repository\n\t\t\t\tif (!this.didSelectRepository) {\n\t\t\t\t\tremoved = [...this.visibleRepositories];\n\t\t\t\t\tthis._repositories.forEach((r) => {\n\t\t\t\t\t\tr.focused = false;\n\t\t\t\t\t\tr.selectionIndex = -1;\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.didSelectRepository = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst maxSelectionIndex = this.getMaxSelectionIndex();\n\t\tthis.insertRepositoryView(this._repositories, {\n\t\t\t...repositoryView,\n\t\t\tselectionIndex: maxSelectionIndex + 1,\n\t\t});\n\t\tthis._onDidChangeRepositories.fire({\n\t\t\tadded: [repositoryView.repository],\n\t\t\tremoved,\n\t\t});\n\n\t\tif (!this._repositories.find((r) => r.focused)) {\n\t\t\tthis.focus(repository);\n\t\t}\n\t}\n\n\tprivate onDidRemoveRepository(repository: ISCMRepository): void {\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tconst repositoriesIndex = this._repositories.findIndex(\n\t\t\t(r) => r.repository === repository,\n\t\t);\n\n\t\tif (repositoriesIndex === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet added: Iterable<ISCMRepository> = Iterable.empty();\n\t\tconst repositoryView = this._repositories.splice(repositoriesIndex, 1);\n\n\t\tif (\n\t\t\tthis._repositories.length > 0 &&\n\t\t\tthis.visibleRepositories.length === 0\n\t\t) {\n\t\t\tthis._repositories[0].selectionIndex = 0;\n\t\t\tadded = [this._repositories[0].repository];\n\t\t}\n\n\t\tthis._onDidChangeRepositories.fire({\n\t\t\tadded,\n\t\t\tremoved: repositoryView.map((r) => r.repository),\n\t\t});\n\n\t\tif (\n\t\t\trepositoryView.length === 1 &&\n\t\t\trepositoryView[0].focused &&\n\t\t\tthis.visibleRepositories.length > 0\n\t\t) {\n\t\t\tthis.focus(this.visibleRepositories[0]);\n\t\t}\n\t}\n\n\tisVisible(repository: ISCMRepository): boolean {\n\t\treturn (\n\t\t\tthis._repositories.find((r) => r.repository === repository)\n\t\t\t\t?.selectionIndex !== -1\n\t\t);\n\t}\n\n\ttoggleVisibility(repository: ISCMRepository, visible?: boolean): void {\n\t\tif (typeof visible === \"undefined\") {\n\t\t\tvisible = !this.isVisible(repository);\n\t\t} else if (this.isVisible(repository) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (visible) {\n\t\t\tthis.visibleRepositories = [\n\t\t\t\t...this.visibleRepositories,\n\t\t\t\trepository,\n\t\t\t];\n\t\t} else {\n\t\t\tconst index = this.visibleRepositories.indexOf(repository);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.visibleRepositories = [\n\t\t\t\t\t...this.visibleRepositories.slice(0, index),\n\t\t\t\t\t...this.visibleRepositories.slice(index + 1),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggleSortKey(sortKey: ISCMRepositorySortKey): void {\n\t\tthis._repositoriesSortKey = sortKey;\n\t\tthis._sortKeyContextKey.set(this._repositoriesSortKey);\n\t\tthis._repositories.sort(this.compareRepositories.bind(this));\n\n\t\tthis._onDidChangeRepositories.fire({\n\t\t\tadded: Iterable.empty(),\n\t\t\tremoved: Iterable.empty(),\n\t\t});\n\t}\n\n\tfocus(repository: ISCMRepository | undefined): void {\n\t\tif (repository && !this.isVisible(repository)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._repositories.forEach(\n\t\t\t(r) => (r.focused = r.repository === repository),\n\t\t);\n\n\t\tif (this._repositories.find((r) => r.focused)) {\n\t\t\tthis._onDidFocusRepository.fire(repository);\n\t\t}\n\t}\n\n\tprivate compareRepositories(\n\t\top1: ISCMRepositoryView,\n\t\top2: ISCMRepositoryView,\n\t): number {\n\t\t// Sort by discovery time\n\t\tif (this._repositoriesSortKey === ISCMRepositorySortKey.DiscoveryTime) {\n\t\t\treturn op1.discoveryTime - op2.discoveryTime;\n\t\t}\n\n\t\t// Sort by path\n\t\tif (\n\t\t\tthis._repositoriesSortKey === \"path\" &&\n\t\t\top1.repository.provider.rootUri &&\n\t\t\top2.repository.provider.rootUri\n\t\t) {\n\t\t\treturn comparePaths(\n\t\t\t\top1.repository.provider.rootUri.fsPath,\n\t\t\t\top2.repository.provider.rootUri.fsPath,\n\t\t\t);\n\t\t}\n\n\t\t// Sort by name, path\n\t\tconst name1 = getRepositoryName(\n\t\t\tthis.workspaceContextService,\n\t\t\top1.repository,\n\t\t);\n\t\tconst name2 = getRepositoryName(\n\t\t\tthis.workspaceContextService,\n\t\t\top2.repository,\n\t\t);\n\n\t\tconst nameComparison = compareFileNames(name1, name2);\n\t\tif (\n\t\t\tnameComparison === 0 &&\n\t\t\top1.repository.provider.rootUri &&\n\t\t\top2.repository.provider.rootUri\n\t\t) {\n\t\t\treturn comparePaths(\n\t\t\t\top1.repository.provider.rootUri.fsPath,\n\t\t\t\top2.repository.provider.rootUri.fsPath,\n\t\t\t);\n\t\t}\n\n\t\treturn nameComparison;\n\t}\n\n\tprivate getMaxSelectionIndex(): number {\n\t\treturn this._repositories.length === 0\n\t\t\t? -1\n\t\t\t: Math.max(...this._repositories.map((r) => r.selectionIndex));\n\t}\n\n\tprivate getViewSortOrder(): ISCMRepositorySortKey {\n\t\tconst sortOder = this.configurationService.getValue<\n\t\t\t\"discovery time\" | \"name\" | \"path\"\n\t\t>(\"scm.repositories.sortOrder\");\n\t\tswitch (sortOder) {\n\t\t\tcase \"discovery time\":\n\t\t\t\treturn ISCMRepositorySortKey.DiscoveryTime;\n\t\t\tcase \"name\":\n\t\t\t\treturn ISCMRepositorySortKey.Name;\n\t\t\tcase \"path\":\n\t\t\t\treturn ISCMRepositorySortKey.Path;\n\t\t\tdefault:\n\t\t\t\treturn ISCMRepositorySortKey.DiscoveryTime;\n\t\t}\n\t}\n\n\tprivate insertRepositoryView(\n\t\trepositories: ISCMRepositoryView[],\n\t\trepositoryView: ISCMRepositoryView,\n\t): void {\n\t\tconst index = binarySearch(\n\t\t\trepositories,\n\t\t\trepositoryView,\n\t\t\tthis.compareRepositories.bind(this),\n\t\t);\n\t\trepositories.splice(index < 0 ? ~index : index, 0, repositoryView);\n\t}\n\n\tprivate onWillSaveState(): void {\n\t\tif (!this.didFinishLoading) {\n\t\t\t// don't remember state, if the workbench didn't really finish loading\n\t\t\treturn;\n\t\t}\n\n\t\tconst all = this.repositories.map((r) =>\n\t\t\tgetProviderStorageKey(r.provider),\n\t\t);\n\t\tconst visible = this.visibleRepositories.map((r) =>\n\t\t\tall.indexOf(getProviderStorageKey(r.provider)),\n\t\t);\n\t\tthis.previousState = {\n\t\t\tall,\n\t\t\tsortKey: this._repositoriesSortKey,\n\t\t\tvisible,\n\t\t};\n\n\t\tthis.storageService.store(\n\t\t\t\"scm:view:visibleRepositories\",\n\t\t\tJSON.stringify(this.previousState),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\t@debounce(5000)\n\tprivate eventuallyFinishLoading(): void {\n\t\tthis.finishLoading();\n\t}\n\n\tprivate finishLoading(): void {\n\t\tif (this.didFinishLoading) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.didFinishLoading = true;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis._onDidChangeRepositories.dispose();\n\t\tthis._onDidSetVisibleRepositories.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["repositoryView", "index"]
}
