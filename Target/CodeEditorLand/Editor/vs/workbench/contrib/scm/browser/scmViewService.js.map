{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/scmViewService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { ISCMViewService, ISCMRepository, ISCMService, ISCMViewVisibleRepositoryChangeEvent, ISCMMenus, ISCMProvider, ISCMRepositorySortKey } from '../common/scm.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { SCMMenus } from './menus.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { debounce } from '../../../../base/common/decorators.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { compareFileNames, comparePaths } from '../../../../base/common/comparers.js';\nimport { basename } from '../../../../base/common/resources.js';\nimport { binarySearch } from '../../../../base/common/arrays.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { derivedObservableWithCache, latestChangedValue, observableFromEventOpts } from '../../../../base/common/observable.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { EditorResourceAccessor } from '../../../common/editor.js';\n\nfunction getProviderStorageKey(provider: ISCMProvider): string {\n\treturn `${provider.contextValue}:${provider.label}${provider.rootUri ? `:${provider.rootUri.toString()}` : ''}`;\n}\n\nfunction getRepositoryName(workspaceContextService: IWorkspaceContextService, repository: ISCMRepository): string {\n\tif (!repository.provider.rootUri) {\n\t\treturn repository.provider.label;\n\t}\n\n\tconst folder = workspaceContextService.getWorkspaceFolder(repository.provider.rootUri);\n\treturn folder?.uri.toString() === repository.provider.rootUri.toString() ? folder.name : basename(repository.provider.rootUri);\n}\n\nexport const RepositoryContextKeys = {\n\tRepositorySortKey: new RawContextKey<ISCMRepositorySortKey>('scmRepositorySortKey', ISCMRepositorySortKey.DiscoveryTime),\n};\n\ninterface ISCMRepositoryView {\n\treadonly repository: ISCMRepository;\n\treadonly discoveryTime: number;\n\tfocused: boolean;\n\tselectionIndex: number;\n}\n\nexport interface ISCMViewServiceState {\n\treadonly all: string[];\n\treadonly sortKey: ISCMRepositorySortKey;\n\treadonly visible: number[];\n}\n\nexport class SCMViewService implements ISCMViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly menus: ISCMMenus;\n\n\tprivate didFinishLoading: boolean = false;\n\tprivate didSelectRepository: boolean = false;\n\tprivate previousState: ISCMViewServiceState | undefined;\n\tprivate readonly disposables = new DisposableStore();\n\n\tprivate _repositories: ISCMRepositoryView[] = [];\n\n\tget repositories(): ISCMRepository[] {\n\t\treturn this._repositories.map(r => r.repository);\n\t}\n\n\tget visibleRepositories(): ISCMRepository[] {\n\t\t// In order to match the legacy behaviour, when the repositories are sorted by discovery time,\n\t\t// the visible repositories are sorted by the selection index instead of the discovery time.\n\t\tif (this._repositoriesSortKey === ISCMRepositorySortKey.DiscoveryTime) {\n\t\t\treturn this._repositories.filter(r => r.selectionIndex !== -1)\n\t\t\t\t.sort((r1, r2) => r1.selectionIndex - r2.selectionIndex)\n\t\t\t\t.map(r => r.repository);\n\t\t}\n\n\t\treturn this._repositories\n\t\t\t.filter(r => r.selectionIndex !== -1)\n\t\t\t.map(r => r.repository);\n\t}\n\n\tset visibleRepositories(visibleRepositories: ISCMRepository[]) {\n\t\tconst set = new Set(visibleRepositories);\n\t\tconst added = new Set<ISCMRepository>();\n\t\tconst removed = new Set<ISCMRepository>();\n\n\t\tfor (const repositoryView of this._repositories) {\n\t\t\t// Selected -> !Selected\n\t\t\tif (!set.has(repositoryView.repository) && repositoryView.selectionIndex !== -1) {\n\t\t\t\trepositoryView.selectionIndex = -1;\n\t\t\t\tremoved.add(repositoryView.repository);\n\t\t\t}\n\t\t\t// Selected | !Selected -> Selected\n\t\t\tif (set.has(repositoryView.repository)) {\n\t\t\t\tif (repositoryView.selectionIndex === -1) {\n\t\t\t\t\tadded.add(repositoryView.repository);\n\t\t\t\t}\n\t\t\t\trepositoryView.selectionIndex = visibleRepositories.indexOf(repositoryView.repository);\n\t\t\t}\n\t\t}\n\n\t\tif (added.size === 0 && removed.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDidSetVisibleRepositories.fire({ added, removed });\n\n\t\t// Update focus if the focused repository is not visible anymore\n\t\tif (this._repositories.find(r => r.focused && r.selectionIndex === -1)) {\n\t\t\tthis.focus(this._repositories.find(r => r.selectionIndex !== -1)?.repository);\n\t\t}\n\t}\n\n\tprivate _onDidChangeRepositories = new Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\treadonly onDidChangeRepositories = this._onDidChangeRepositories.event;\n\n\tprivate _onDidSetVisibleRepositories = new Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\treadonly onDidChangeVisibleRepositories = Event.any(\n\t\tthis._onDidSetVisibleRepositories.event,\n\t\tEvent.debounce(\n\t\t\tthis._onDidChangeRepositories.event,\n\t\t\t(last, e) => {\n\t\t\t\tif (!last) {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\n\t\t\t\tconst added = new Set(last.added);\n\t\t\t\tconst removed = new Set(last.removed);\n\n\t\t\t\tfor (const repository of e.added) {\n\t\t\t\t\tif (removed.has(repository)) {\n\t\t\t\t\t\tremoved.delete(repository);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tadded.add(repository);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const repository of e.removed) {\n\t\t\t\t\tif (added.has(repository)) {\n\t\t\t\t\t\tadded.delete(repository);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoved.add(repository);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { added, removed };\n\t\t\t}, 0, undefined, undefined, undefined, this.disposables)\n\t);\n\n\tget focusedRepository(): ISCMRepository | undefined {\n\t\treturn this._repositories.find(r => r.focused)?.repository;\n\t}\n\n\tprivate _onDidFocusRepository = new Emitter<ISCMRepository | undefined>();\n\treadonly onDidFocusRepository = this._onDidFocusRepository.event;\n\n\tprivate readonly _focusedRepository = observableFromEventOpts<ISCMRepository | undefined>(\n\t\t{ owner: this, equalsFn: () => false },\n\t\tthis.onDidFocusRepository,\n\t\t() => this.focusedRepository);\n\n\tprivate readonly _activeEditor = observableFromEventOpts(\n\t\t{ owner: this, equalsFn: () => false },\n\t\tthis.editorService.onDidActiveEditorChange,\n\t\t() => this.editorService.activeEditor);\n\n\tprivate readonly _activeEditorRepository = derivedObservableWithCache<ISCMRepository | undefined>(this,\n\t\t(reader, lastValue) => {\n\t\t\tconst activeResource = EditorResourceAccessor.getOriginalUri(this._activeEditor.read(reader));\n\t\t\tif (!activeResource) {\n\t\t\t\treturn lastValue;\n\t\t\t}\n\n\t\t\tconst repository = this.scmService.getRepository(activeResource);\n\t\t\tif (!repository) {\n\t\t\t\treturn lastValue;\n\t\t\t}\n\n\t\t\treturn Object.create(repository);\n\t\t});\n\n\t/**\n\t * The focused repository takes precedence over the active editor repository when the observable\n\t * values are updated in the same transaction (or during the initial read of the observable value).\n\t */\n\treadonly activeRepository = latestChangedValue(this, [this._activeEditorRepository, this._focusedRepository]);\n\n\tprivate _repositoriesSortKey: ISCMRepositorySortKey;\n\tprivate _sortKeyContextKey: IContextKey<ISCMRepositorySortKey>;\n\n\tconstructor(\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tthis.menus = instantiationService.createInstance(SCMMenus);\n\n\t\ttry {\n\t\t\tthis.previousState = JSON.parse(storageService.get('scm:view:visibleRepositories', StorageScope.WORKSPACE, ''));\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\n\t\tthis._repositoriesSortKey = this.previousState?.sortKey ?? this.getViewSortOrder();\n\t\tthis._sortKeyContextKey = RepositoryContextKeys.RepositorySortKey.bindTo(contextKeyService);\n\t\tthis._sortKeyContextKey.set(this._repositoriesSortKey);\n\n\t\tscmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n\t\tscmService.onDidRemoveRepository(this.onDidRemoveRepository, this, this.disposables);\n\n\t\tfor (const repository of scmService.repositories) {\n\t\t\tthis.onDidAddRepository(repository);\n\t\t}\n\n\t\tstorageService.onWillSaveState(this.onWillSaveState, this, this.disposables);\n\n\t\t// Maintain repository selection when the extension host restarts.\n\t\t// Extension host is restarted after installing an extension update\n\t\t// or during a profile switch.\n\t\textensionService.onWillStop(() => {\n\t\t\tthis.onWillSaveState();\n\t\t\tthis.didFinishLoading = false;\n\t\t}, this, this.disposables);\n\t}\n\n\tprivate onDidAddRepository(repository: ISCMRepository): void {\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tconst repositoryView: ISCMRepositoryView = {\n\t\t\trepository, discoveryTime: Date.now(), focused: false, selectionIndex: -1\n\t\t};\n\n\t\tlet removed: Iterable<ISCMRepository> = Iterable.empty();\n\n\t\tif (this.previousState && !this.didFinishLoading) {\n\t\t\tconst index = this.previousState.all.indexOf(getProviderStorageKey(repository.provider));\n\n\t\t\tif (index === -1) {\n\t\t\t\t// This repository is not part of the previous state which means that it\n\t\t\t\t// was either manually closed in the previous session, or the repository\n\t\t\t\t// was added after the previous session.In this case, we should select all\n\t\t\t\t// of the repositories.\n\t\t\t\tconst added: ISCMRepository[] = [];\n\n\t\t\t\tthis.insertRepositoryView(this._repositories, repositoryView);\n\t\t\t\tthis._repositories.forEach((repositoryView, index) => {\n\t\t\t\t\tif (repositoryView.selectionIndex === -1) {\n\t\t\t\t\t\tadded.push(repositoryView.repository);\n\t\t\t\t\t}\n\t\t\t\t\trepositoryView.selectionIndex = index;\n\t\t\t\t});\n\n\t\t\t\tthis._onDidChangeRepositories.fire({ added, removed: Iterable.empty() });\n\t\t\t\tthis.didSelectRepository = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.previousState.visible.indexOf(index) === -1) {\n\t\t\t\t// Explicit selection started\n\t\t\t\tif (this.didSelectRepository) {\n\t\t\t\t\tthis.insertRepositoryView(this._repositories, repositoryView);\n\t\t\t\t\tthis._onDidChangeRepositories.fire({ added: Iterable.empty(), removed: Iterable.empty() });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// First visible repository\n\t\t\t\tif (!this.didSelectRepository) {\n\t\t\t\t\tremoved = [...this.visibleRepositories];\n\t\t\t\t\tthis._repositories.forEach(r => {\n\t\t\t\t\t\tr.focused = false;\n\t\t\t\t\t\tr.selectionIndex = -1;\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.didSelectRepository = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst maxSelectionIndex = this.getMaxSelectionIndex();\n\t\tthis.insertRepositoryView(this._repositories, { ...repositoryView, selectionIndex: maxSelectionIndex + 1 });\n\t\tthis._onDidChangeRepositories.fire({ added: [repositoryView.repository], removed });\n\n\t\tif (!this._repositories.find(r => r.focused)) {\n\t\t\tthis.focus(repository);\n\t\t}\n\t}\n\n\tprivate onDidRemoveRepository(repository: ISCMRepository): void {\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tconst repositoriesIndex = this._repositories.findIndex(r => r.repository === repository);\n\n\t\tif (repositoriesIndex === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet added: Iterable<ISCMRepository> = Iterable.empty();\n\t\tconst repositoryView = this._repositories.splice(repositoriesIndex, 1);\n\n\t\tif (this._repositories.length > 0 && this.visibleRepositories.length === 0) {\n\t\t\tthis._repositories[0].selectionIndex = 0;\n\t\t\tadded = [this._repositories[0].repository];\n\t\t}\n\n\t\tthis._onDidChangeRepositories.fire({ added, removed: repositoryView.map(r => r.repository) });\n\n\t\tif (repositoryView.length === 1 && repositoryView[0].focused && this.visibleRepositories.length > 0) {\n\t\t\tthis.focus(this.visibleRepositories[0]);\n\t\t}\n\t}\n\n\tisVisible(repository: ISCMRepository): boolean {\n\t\treturn this._repositories.find(r => r.repository === repository)?.selectionIndex !== -1;\n\t}\n\n\ttoggleVisibility(repository: ISCMRepository, visible?: boolean): void {\n\t\tif (typeof visible === 'undefined') {\n\t\t\tvisible = !this.isVisible(repository);\n\t\t} else if (this.isVisible(repository) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (visible) {\n\t\t\tthis.visibleRepositories = [...this.visibleRepositories, repository];\n\t\t} else {\n\t\t\tconst index = this.visibleRepositories.indexOf(repository);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.visibleRepositories = [\n\t\t\t\t\t...this.visibleRepositories.slice(0, index),\n\t\t\t\t\t...this.visibleRepositories.slice(index + 1)\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggleSortKey(sortKey: ISCMRepositorySortKey): void {\n\t\tthis._repositoriesSortKey = sortKey;\n\t\tthis._sortKeyContextKey.set(this._repositoriesSortKey);\n\t\tthis._repositories.sort(this.compareRepositories.bind(this));\n\n\t\tthis._onDidChangeRepositories.fire({ added: Iterable.empty(), removed: Iterable.empty() });\n\t}\n\n\tfocus(repository: ISCMRepository | undefined): void {\n\t\tif (repository && !this.isVisible(repository)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._repositories.forEach(r => r.focused = r.repository === repository);\n\n\t\tif (this._repositories.find(r => r.focused)) {\n\t\t\tthis._onDidFocusRepository.fire(repository);\n\t\t}\n\t}\n\n\tprivate compareRepositories(op1: ISCMRepositoryView, op2: ISCMRepositoryView): number {\n\t\t// Sort by discovery time\n\t\tif (this._repositoriesSortKey === ISCMRepositorySortKey.DiscoveryTime) {\n\t\t\treturn op1.discoveryTime - op2.discoveryTime;\n\t\t}\n\n\t\t// Sort by path\n\t\tif (this._repositoriesSortKey === 'path' && op1.repository.provider.rootUri && op2.repository.provider.rootUri) {\n\t\t\treturn comparePaths(op1.repository.provider.rootUri.fsPath, op2.repository.provider.rootUri.fsPath);\n\t\t}\n\n\t\t// Sort by name, path\n\t\tconst name1 = getRepositoryName(this.workspaceContextService, op1.repository);\n\t\tconst name2 = getRepositoryName(this.workspaceContextService, op2.repository);\n\n\t\tconst nameComparison = compareFileNames(name1, name2);\n\t\tif (nameComparison === 0 && op1.repository.provider.rootUri && op2.repository.provider.rootUri) {\n\t\t\treturn comparePaths(op1.repository.provider.rootUri.fsPath, op2.repository.provider.rootUri.fsPath);\n\t\t}\n\n\t\treturn nameComparison;\n\t}\n\n\tprivate getMaxSelectionIndex(): number {\n\t\treturn this._repositories.length === 0 ? -1 :\n\t\t\tMath.max(...this._repositories.map(r => r.selectionIndex));\n\t}\n\n\tprivate getViewSortOrder(): ISCMRepositorySortKey {\n\t\tconst sortOder = this.configurationService.getValue<'discovery time' | 'name' | 'path'>('scm.repositories.sortOrder');\n\t\tswitch (sortOder) {\n\t\t\tcase 'discovery time':\n\t\t\t\treturn ISCMRepositorySortKey.DiscoveryTime;\n\t\t\tcase 'name':\n\t\t\t\treturn ISCMRepositorySortKey.Name;\n\t\t\tcase 'path':\n\t\t\t\treturn ISCMRepositorySortKey.Path;\n\t\t\tdefault:\n\t\t\t\treturn ISCMRepositorySortKey.DiscoveryTime;\n\t\t}\n\t}\n\n\tprivate insertRepositoryView(repositories: ISCMRepositoryView[], repositoryView: ISCMRepositoryView): void {\n\t\tconst index = binarySearch(repositories, repositoryView, this.compareRepositories.bind(this));\n\t\trepositories.splice(index < 0 ? ~index : index, 0, repositoryView);\n\t}\n\n\tprivate onWillSaveState(): void {\n\t\tif (!this.didFinishLoading) { // don't remember state, if the workbench didn't really finish loading\n\t\t\treturn;\n\t\t}\n\n\t\tconst all = this.repositories.map(r => getProviderStorageKey(r.provider));\n\t\tconst visible = this.visibleRepositories.map(r => all.indexOf(getProviderStorageKey(r.provider)));\n\t\tthis.previousState = { all, sortKey: this._repositoriesSortKey, visible };\n\n\t\tthis.storageService.store('scm:view:visibleRepositories', JSON.stringify(this.previousState), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\t@debounce(5000)\n\tprivate eventuallyFinishLoading(): void {\n\t\tthis.finishLoading();\n\t}\n\n\tprivate finishLoading(): void {\n\t\tif (this.didFinishLoading) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.didFinishLoading = true;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis._onDidChangeRepositories.dispose();\n\t\tthis._onDidSetVisibleRepositories.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["repositoryView", "index"]
}
