{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/activity.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { basename } from '../../../../base/common/resources.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { VIEW_PANE_ID, ISCMService, ISCMRepository, ISCMViewService } from '../common/scm.js';\nimport { IActivityService, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IStatusbarEntry, IStatusbarService, StatusbarAlignment as MainThreadStatusBarAlignment } from '../../../services/statusbar/browser/statusbar.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { EditorResourceAccessor } from '../../../common/editor.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { ITitleService } from '../../../services/title/browser/titleService.js';\nimport { IEditorGroupContextKeyProvider, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { getRepositoryResourceCount } from './util.js';\nimport { autorun, autorunWithStore, derived, IObservable, observableFromEvent } from '../../../../base/common/observable.js';\nimport { observableConfigValue } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { Command } from '../../../../editor/common/languages.js';\n\nconst ActiveRepositoryContextKeys = {\n\tActiveRepositoryName: new RawContextKey<string>('scmActiveRepositoryName', ''),\n\tActiveRepositoryBranchName: new RawContextKey<string>('scmActiveRepositoryBranchName', ''),\n};\n\nexport class SCMActiveRepositoryController extends Disposable implements IWorkbenchContribution {\n\tprivate readonly _countBadgeConfig = observableConfigValue<'all' | 'focused' | 'off'>('scm.countBadge', 'all', this.configurationService);\n\n\tprivate readonly _repositories = observableFromEvent(this,\n\t\tEvent.any(this.scmService.onDidAddRepository, this.scmService.onDidRemoveRepository),\n\t\t() => this.scmService.repositories);\n\n\tprivate readonly _activeRepositoryHistoryItemRefName = derived(reader => {\n\t\tconst repository = this.scmViewService.activeRepository.read(reader);\n\t\tconst historyProvider = repository?.provider.historyProvider.read(reader);\n\t\tconst historyItemRef = historyProvider?.historyItemRef.read(reader);\n\n\t\treturn historyItemRef?.name;\n\t});\n\n\tprivate readonly _countBadgeRepositories = derived(this, reader => {\n\t\tswitch (this._countBadgeConfig.read(reader)) {\n\t\t\tcase 'all': {\n\t\t\t\tconst repositories = this._repositories.read(reader);\n\t\t\t\treturn [...Iterable.map(repositories, r => ({ provider: r.provider, resourceCount: this._getRepositoryResourceCount(r) }))];\n\t\t\t}\n\t\t\tcase 'focused': {\n\t\t\t\tconst repository = this.scmViewService.activeRepository.read(reader);\n\t\t\t\treturn repository ? [{ provider: repository.provider, resourceCount: this._getRepositoryResourceCount(repository) }] : [];\n\t\t\t}\n\t\t\tcase 'off':\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid countBadge setting');\n\t\t}\n\t});\n\n\tprivate readonly _countBadge = derived(this, reader => {\n\t\tlet total = 0;\n\n\t\tfor (const repository of this._countBadgeRepositories.read(reader)) {\n\t\t\tconst count = repository.provider.count?.read(reader);\n\t\t\tconst resourceCount = repository.resourceCount.read(reader);\n\n\t\t\ttotal = total + (count ?? resourceCount);\n\t\t}\n\n\t\treturn total;\n\t});\n\n\tprivate _activeRepositoryNameContextKey: IContextKey<string>;\n\tprivate _activeRepositoryBranchNameContextKey: IContextKey<string>;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@ISCMViewService private readonly scmViewService: ISCMViewService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ITitleService private readonly titleService: ITitleService\n\t) {\n\t\tsuper();\n\n\t\tthis._activeRepositoryNameContextKey = ActiveRepositoryContextKeys.ActiveRepositoryName.bindTo(this.contextKeyService);\n\t\tthis._activeRepositoryBranchNameContextKey = ActiveRepositoryContextKeys.ActiveRepositoryBranchName.bindTo(this.contextKeyService);\n\n\t\tthis.titleService.registerVariables([\n\t\t\t{ name: 'activeRepositoryName', contextKey: ActiveRepositoryContextKeys.ActiveRepositoryName.key },\n\t\t\t{ name: 'activeRepositoryBranchName', contextKey: ActiveRepositoryContextKeys.ActiveRepositoryBranchName.key, }\n\t\t]);\n\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\tthis._updateActivityCountBadge(this._countBadge.read(reader), store);\n\t\t}));\n\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\tconst repository = this.scmViewService.activeRepository.read(reader);\n\t\t\tconst commands = repository?.provider.statusBarCommands.read(reader);\n\n\t\t\tthis._updateStatusBar(repository, commands ?? [], store);\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst repository = this.scmViewService.activeRepository.read(reader);\n\t\t\tconst historyItemRefName = this._activeRepositoryHistoryItemRefName.read(reader);\n\n\t\t\tthis._updateActiveRepositoryContextKeys(repository?.provider.name, historyItemRefName);\n\t\t}));\n\t}\n\n\tprivate _getRepositoryResourceCount(repository: ISCMRepository): IObservable<number> {\n\t\treturn observableFromEvent(this, repository.provider.onDidChangeResources, () => /** @description repositoryResourceCount */ getRepositoryResourceCount(repository.provider));\n\t}\n\n\tprivate _updateActivityCountBadge(count: number, store: DisposableStore): void {\n\t\tif (count === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst badge = new NumberBadge(count, num => localize('scmPendingChangesBadge', '{0} pending changes', num));\n\t\tstore.add(this.activityService.showViewActivity(VIEW_PANE_ID, { badge }));\n\t}\n\n\tprivate _updateStatusBar(repository: ISCMRepository | undefined, commands: readonly Command[], store: DisposableStore): void {\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst label = repository.provider.rootUri\n\t\t\t? `${basename(repository.provider.rootUri)} (${repository.provider.label})`\n\t\t\t: repository.provider.label;\n\n\t\tfor (let index = 0; index < commands.length; index++) {\n\t\t\tconst command = commands[index];\n\t\t\tconst tooltip = `${label}${command.tooltip ? ` - ${command.tooltip}` : ''}`;\n\n\t\t\t// Get a repository agnostic name for the status bar action, derive this from the\n\t\t\t// first command argument which is in the form \"git.<command>/<number>\"\n\t\t\tlet repoAgnosticActionName = command.arguments?.[0];\n\t\t\tif (repoAgnosticActionName && typeof repoAgnosticActionName === 'string') {\n\t\t\t\trepoAgnosticActionName = repoAgnosticActionName\n\t\t\t\t\t.substring(0, repoAgnosticActionName.lastIndexOf('/'))\n\t\t\t\t\t.replace(/^git\\./, '');\n\t\t\t\tif (repoAgnosticActionName.length > 1) {\n\t\t\t\t\trepoAgnosticActionName = repoAgnosticActionName[0].toLocaleUpperCase() + repoAgnosticActionName.slice(1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trepoAgnosticActionName = '';\n\t\t\t}\n\n\t\t\tconst statusbarEntry: IStatusbarEntry = {\n\t\t\t\tname: localize('status.scm', \"Source Control\") + (repoAgnosticActionName ? ` ${repoAgnosticActionName}` : ''),\n\t\t\t\ttext: command.title,\n\t\t\t\tariaLabel: tooltip,\n\t\t\t\ttooltip,\n\t\t\t\tcommand: command.id ? command : undefined\n\t\t\t};\n\n\t\t\tstore.add(index === 0 ?\n\t\t\t\tthis.statusbarService.addEntry(statusbarEntry, `status.scm.${index}`, MainThreadStatusBarAlignment.LEFT, 10000) :\n\t\t\t\tthis.statusbarService.addEntry(statusbarEntry, `status.scm.${index}`, MainThreadStatusBarAlignment.LEFT, { id: `status.scm.${index - 1}`, alignment: MainThreadStatusBarAlignment.RIGHT, compact: true })\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _updateActiveRepositoryContextKeys(repositoryName: string | undefined, branchName: string | undefined): void {\n\t\tthis._activeRepositoryNameContextKey.set(repositoryName ?? '');\n\t\tthis._activeRepositoryBranchNameContextKey.set(branchName ?? '');\n\t}\n}\n\nexport class SCMActiveResourceContextKeyController extends Disposable implements IWorkbenchContribution {\n\tprivate readonly _repositories = observableFromEvent(this,\n\t\tEvent.any(this.scmService.onDidAddRepository, this.scmService.onDidRemoveRepository),\n\t\t() => this.scmService.repositories);\n\n\tprivate readonly _onDidRepositoryChange = new Emitter<void>();\n\n\tconstructor(\n\t\t@IEditorGroupsService editorGroupsService: IEditorGroupsService,\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tconst activeResourceHasChangesContextKey = new RawContextKey<boolean>('scmActiveResourceHasChanges', false, localize('scmActiveResourceHasChanges', \"Whether the active resource has changes\"));\n\t\tconst activeResourceRepositoryContextKey = new RawContextKey<string | undefined>('scmActiveResourceRepository', undefined, localize('scmActiveResourceRepository', \"The active resource's repository\"));\n\n\t\tthis._store.add(autorunWithStore((reader, store) => {\n\t\t\tfor (const repository of this._repositories.read(reader)) {\n\t\t\t\tstore.add(Event.runAndSubscribe(repository.provider.onDidChangeResources, () => {\n\t\t\t\t\tthis._onDidRepositoryChange.fire();\n\t\t\t\t}));\n\t\t\t}\n\t\t}));\n\n\t\t// Create context key providers which will update the context keys based on each groups active editor\n\t\tconst hasChangesContextKeyProvider: IEditorGroupContextKeyProvider<boolean> = {\n\t\t\tcontextKey: activeResourceHasChangesContextKey,\n\t\t\tgetGroupContextKeyValue: (group) => this._getEditorHasChanges(group.activeEditor),\n\t\t\tonDidChange: this._onDidRepositoryChange.event\n\t\t};\n\n\t\tconst repositoryContextKeyProvider: IEditorGroupContextKeyProvider<string | undefined> = {\n\t\t\tcontextKey: activeResourceRepositoryContextKey,\n\t\t\tgetGroupContextKeyValue: (group) => this._getEditorRepositoryId(group.activeEditor),\n\t\t\tonDidChange: this._onDidRepositoryChange.event\n\t\t};\n\n\t\tthis._store.add(editorGroupsService.registerContextKeyProvider(hasChangesContextKeyProvider));\n\t\tthis._store.add(editorGroupsService.registerContextKeyProvider(repositoryContextKeyProvider));\n\t}\n\n\tprivate _getEditorHasChanges(activeEditor: EditorInput | null): boolean {\n\t\tconst activeResource = EditorResourceAccessor.getOriginalUri(activeEditor);\n\t\tif (!activeResource) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst activeResourceRepository = this.scmService.getRepository(activeResource);\n\t\tfor (const resourceGroup of activeResourceRepository?.provider.groups ?? []) {\n\t\t\tif (resourceGroup.resources\n\t\t\t\t.some(scmResource =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(activeResource, scmResource.sourceUri))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _getEditorRepositoryId(activeEditor: EditorInput | null): string | undefined {\n\t\tconst activeResource = EditorResourceAccessor.getOriginalUri(activeEditor);\n\t\tif (!activeResource) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst activeResourceRepository = this.scmService.getRepository(activeResource);\n\t\treturn activeResourceRepository?.id;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onDidRepositoryChange.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
