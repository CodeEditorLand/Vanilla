{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/activity.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\ttype DisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tautorun,\n\tautorunWithStore,\n\tderived,\n\tobservableFromEvent,\n} from \"../../../../base/common/observable.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport type { Command } from \"../../../../editor/common/languages.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { observableConfigValue } from \"../../../../platform/observable/common/platformObservableUtils.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { EditorResourceAccessor } from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport {\n\tIActivityService,\n\tNumberBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport {\n\ttype IEditorGroupContextKeyProvider,\n\tIEditorGroupsService,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport {\n\ttype IStatusbarEntry,\n\tIStatusbarService,\n\tStatusbarAlignment as MainThreadStatusBarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\nimport { ITitleService } from \"../../../services/title/browser/titleService.js\";\nimport {\n\ttype ISCMRepository,\n\tISCMService,\n\tISCMViewService,\n\tVIEW_PANE_ID,\n} from \"../common/scm.js\";\nimport { getRepositoryResourceCount } from \"./util.js\";\n\nconst ActiveRepositoryContextKeys = {\n\tActiveRepositoryName: new RawContextKey<string>(\n\t\t\"scmActiveRepositoryName\",\n\t\t\"\",\n\t),\n\tActiveRepositoryBranchName: new RawContextKey<string>(\n\t\t\"scmActiveRepositoryBranchName\",\n\t\t\"\",\n\t),\n};\n\nexport class SCMActiveRepositoryController\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate readonly _countBadgeConfig = observableConfigValue<\n\t\t\"all\" | \"focused\" | \"off\"\n\t>(\"scm.countBadge\", \"all\", this.configurationService);\n\n\tprivate readonly _repositories = observableFromEvent(\n\t\tthis,\n\t\tEvent.any(\n\t\t\tthis.scmService.onDidAddRepository,\n\t\t\tthis.scmService.onDidRemoveRepository,\n\t\t),\n\t\t() => this.scmService.repositories,\n\t);\n\n\tprivate readonly _activeRepositoryHistoryItemRefName = derived((reader) => {\n\t\tconst repository = this.scmViewService.activeRepository.read(reader);\n\t\tconst historyProvider =\n\t\t\trepository?.provider.historyProvider.read(reader);\n\t\tconst historyItemRef = historyProvider?.historyItemRef.read(reader);\n\n\t\treturn historyItemRef?.name;\n\t});\n\n\tprivate readonly _countBadgeRepositories = derived(this, (reader) => {\n\t\tswitch (this._countBadgeConfig.read(reader)) {\n\t\t\tcase \"all\": {\n\t\t\t\tconst repositories = this._repositories.read(reader);\n\t\t\t\treturn [\n\t\t\t\t\t...Iterable.map(repositories, (r) => ({\n\t\t\t\t\t\tprovider: r.provider,\n\t\t\t\t\t\tresourceCount: this._getRepositoryResourceCount(r),\n\t\t\t\t\t})),\n\t\t\t\t];\n\t\t\t}\n\t\t\tcase \"focused\": {\n\t\t\t\tconst repository =\n\t\t\t\t\tthis.scmViewService.activeRepository.read(reader);\n\t\t\t\treturn repository\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprovider: repository.provider,\n\t\t\t\t\t\t\t\tresourceCount:\n\t\t\t\t\t\t\t\t\tthis._getRepositoryResourceCount(\n\t\t\t\t\t\t\t\t\t\trepository,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t: [];\n\t\t\t}\n\t\t\tcase \"off\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid countBadge setting\");\n\t\t}\n\t});\n\n\tprivate readonly _countBadge = derived(this, (reader) => {\n\t\tlet total = 0;\n\n\t\tfor (const repository of this._countBadgeRepositories.read(reader)) {\n\t\t\tconst count = repository.provider.count?.read(reader);\n\t\t\tconst resourceCount = repository.resourceCount.read(reader);\n\n\t\t\ttotal = total + (count ?? resourceCount);\n\t\t}\n\n\t\treturn total;\n\t});\n\n\tprivate _activeRepositoryNameContextKey: IContextKey<string>;\n\tprivate _activeRepositoryBranchNameContextKey: IContextKey<string>;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@ISCMViewService private readonly scmViewService: ISCMViewService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ITitleService private readonly titleService: ITitleService,\n\t) {\n\t\tsuper();\n\n\t\tthis._activeRepositoryNameContextKey =\n\t\t\tActiveRepositoryContextKeys.ActiveRepositoryName.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\tthis._activeRepositoryBranchNameContextKey =\n\t\t\tActiveRepositoryContextKeys.ActiveRepositoryBranchName.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\n\t\tthis.titleService.registerVariables([\n\t\t\t{\n\t\t\t\tname: \"activeRepositoryName\",\n\t\t\t\tcontextKey:\n\t\t\t\t\tActiveRepositoryContextKeys.ActiveRepositoryName.key,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"activeRepositoryBranchName\",\n\t\t\t\tcontextKey:\n\t\t\t\t\tActiveRepositoryContextKeys.ActiveRepositoryBranchName.key,\n\t\t\t},\n\t\t]);\n\n\t\tthis._register(\n\t\t\tautorunWithStore((reader, store) => {\n\t\t\t\tthis._updateActivityCountBadge(\n\t\t\t\t\tthis._countBadge.read(reader),\n\t\t\t\t\tstore,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorunWithStore((reader, store) => {\n\t\t\t\tconst repository =\n\t\t\t\t\tthis.scmViewService.activeRepository.read(reader);\n\t\t\t\tconst commands =\n\t\t\t\t\trepository?.provider.statusBarCommands.read(reader);\n\n\t\t\t\tthis._updateStatusBar(repository, commands ?? [], store);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\tconst repository =\n\t\t\t\t\tthis.scmViewService.activeRepository.read(reader);\n\t\t\t\tconst historyItemRefName =\n\t\t\t\t\tthis._activeRepositoryHistoryItemRefName.read(reader);\n\n\t\t\t\tthis._updateActiveRepositoryContextKeys(\n\t\t\t\t\trepository?.provider.name,\n\t\t\t\t\thistoryItemRefName,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _getRepositoryResourceCount(\n\t\trepository: ISCMRepository,\n\t): IObservable<number> {\n\t\treturn observableFromEvent(\n\t\t\tthis,\n\t\t\trepository.provider.onDidChangeResources,\n\t\t\t() =>\n\t\t\t\t/** @description repositoryResourceCount */ getRepositoryResourceCount(\n\t\t\t\t\trepository.provider,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tprivate _updateActivityCountBadge(\n\t\tcount: number,\n\t\tstore: DisposableStore,\n\t): void {\n\t\tif (count === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst badge = new NumberBadge(count, (num) =>\n\t\t\tlocalize(\"scmPendingChangesBadge\", \"{0} pending changes\", num),\n\t\t);\n\t\tstore.add(\n\t\t\tthis.activityService.showViewActivity(VIEW_PANE_ID, { badge }),\n\t\t);\n\t}\n\n\tprivate _updateStatusBar(\n\t\trepository: ISCMRepository | undefined,\n\t\tcommands: readonly Command[],\n\t\tstore: DisposableStore,\n\t): void {\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst label = repository.provider.rootUri\n\t\t\t? `${basename(repository.provider.rootUri)} (${repository.provider.label})`\n\t\t\t: repository.provider.label;\n\n\t\tfor (let index = 0; index < commands.length; index++) {\n\t\t\tconst command = commands[index];\n\t\t\tconst tooltip = `${label}${command.tooltip ? ` - ${command.tooltip}` : \"\"}`;\n\n\t\t\t// Get a repository agnostic name for the status bar action, derive this from the\n\t\t\t// first command argument which is in the form \"git.<command>/<number>\"\n\t\t\tlet repoAgnosticActionName = command.arguments?.[0];\n\t\t\tif (\n\t\t\t\trepoAgnosticActionName &&\n\t\t\t\ttypeof repoAgnosticActionName === \"string\"\n\t\t\t) {\n\t\t\t\trepoAgnosticActionName = repoAgnosticActionName\n\t\t\t\t\t.substring(0, repoAgnosticActionName.lastIndexOf(\"/\"))\n\t\t\t\t\t.replace(/^git\\./, \"\");\n\t\t\t\tif (repoAgnosticActionName.length > 1) {\n\t\t\t\t\trepoAgnosticActionName =\n\t\t\t\t\t\trepoAgnosticActionName[0].toLocaleUpperCase() +\n\t\t\t\t\t\trepoAgnosticActionName.slice(1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trepoAgnosticActionName = \"\";\n\t\t\t}\n\n\t\t\tconst statusbarEntry: IStatusbarEntry = {\n\t\t\t\tname:\n\t\t\t\t\tlocalize(\"status.scm\", \"Source Control\") +\n\t\t\t\t\t(repoAgnosticActionName\n\t\t\t\t\t\t? ` ${repoAgnosticActionName}`\n\t\t\t\t\t\t: \"\"),\n\t\t\t\ttext: command.title,\n\t\t\t\tariaLabel: tooltip,\n\t\t\t\ttooltip,\n\t\t\t\tcommand: command.id ? command : undefined,\n\t\t\t};\n\n\t\t\tstore.add(\n\t\t\t\tindex === 0\n\t\t\t\t\t? this.statusbarService.addEntry(\n\t\t\t\t\t\t\tstatusbarEntry,\n\t\t\t\t\t\t\t`status.scm.${index}`,\n\t\t\t\t\t\t\tMainThreadStatusBarAlignment.LEFT,\n\t\t\t\t\t\t\t10000,\n\t\t\t\t\t\t)\n\t\t\t\t\t: this.statusbarService.addEntry(\n\t\t\t\t\t\t\tstatusbarEntry,\n\t\t\t\t\t\t\t`status.scm.${index}`,\n\t\t\t\t\t\t\tMainThreadStatusBarAlignment.LEFT,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: `status.scm.${index - 1}`,\n\t\t\t\t\t\t\t\talignment: MainThreadStatusBarAlignment.RIGHT,\n\t\t\t\t\t\t\t\tcompact: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _updateActiveRepositoryContextKeys(\n\t\trepositoryName: string | undefined,\n\t\tbranchName: string | undefined,\n\t): void {\n\t\tthis._activeRepositoryNameContextKey.set(repositoryName ?? \"\");\n\t\tthis._activeRepositoryBranchNameContextKey.set(branchName ?? \"\");\n\t}\n}\n\nexport class SCMActiveResourceContextKeyController\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate readonly _repositories = observableFromEvent(\n\t\tthis,\n\t\tEvent.any(\n\t\t\tthis.scmService.onDidAddRepository,\n\t\t\tthis.scmService.onDidRemoveRepository,\n\t\t),\n\t\t() => this.scmService.repositories,\n\t);\n\n\tprivate readonly _onDidRepositoryChange = new Emitter<void>();\n\n\tconstructor(\n\t\t@IEditorGroupsService editorGroupsService: IEditorGroupsService,\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tconst activeResourceHasChangesContextKey = new RawContextKey<boolean>(\n\t\t\t\"scmActiveResourceHasChanges\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"scmActiveResourceHasChanges\",\n\t\t\t\t\"Whether the active resource has changes\",\n\t\t\t),\n\t\t);\n\t\tconst activeResourceRepositoryContextKey = new RawContextKey<\n\t\t\tstring | undefined\n\t\t>(\n\t\t\t\"scmActiveResourceRepository\",\n\t\t\tundefined,\n\t\t\tlocalize(\n\t\t\t\t\"scmActiveResourceRepository\",\n\t\t\t\t\"The active resource's repository\",\n\t\t\t),\n\t\t);\n\n\t\tthis._store.add(\n\t\t\tautorunWithStore((reader, store) => {\n\t\t\t\tfor (const repository of this._repositories.read(reader)) {\n\t\t\t\t\tstore.add(\n\t\t\t\t\t\tEvent.runAndSubscribe(\n\t\t\t\t\t\t\trepository.provider.onDidChangeResources,\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tthis._onDidRepositoryChange.fire();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Create context key providers which will update the context keys based on each groups active editor\n\t\tconst hasChangesContextKeyProvider: IEditorGroupContextKeyProvider<boolean> =\n\t\t\t{\n\t\t\t\tcontextKey: activeResourceHasChangesContextKey,\n\t\t\t\tgetGroupContextKeyValue: (group) =>\n\t\t\t\t\tthis._getEditorHasChanges(group.activeEditor),\n\t\t\t\tonDidChange: this._onDidRepositoryChange.event,\n\t\t\t};\n\n\t\tconst repositoryContextKeyProvider: IEditorGroupContextKeyProvider<\n\t\t\tstring | undefined\n\t\t> = {\n\t\t\tcontextKey: activeResourceRepositoryContextKey,\n\t\t\tgetGroupContextKeyValue: (group) =>\n\t\t\t\tthis._getEditorRepositoryId(group.activeEditor),\n\t\t\tonDidChange: this._onDidRepositoryChange.event,\n\t\t};\n\n\t\tthis._store.add(\n\t\t\teditorGroupsService.registerContextKeyProvider(\n\t\t\t\thasChangesContextKeyProvider,\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\teditorGroupsService.registerContextKeyProvider(\n\t\t\t\trepositoryContextKeyProvider,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _getEditorHasChanges(activeEditor: EditorInput | null): boolean {\n\t\tconst activeResource =\n\t\t\tEditorResourceAccessor.getOriginalUri(activeEditor);\n\t\tif (!activeResource) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst activeResourceRepository =\n\t\t\tthis.scmService.getRepository(activeResource);\n\t\tfor (const resourceGroup of activeResourceRepository?.provider.groups ??\n\t\t\t[]) {\n\t\t\tif (\n\t\t\t\tresourceGroup.resources.some((scmResource) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\tactiveResource,\n\t\t\t\t\t\tscmResource.sourceUri,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _getEditorRepositoryId(\n\t\tactiveEditor: EditorInput | null,\n\t): string | undefined {\n\t\tconst activeResource =\n\t\t\tEditorResourceAccessor.getOriginalUri(activeEditor);\n\t\tif (!activeResource) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst activeResourceRepository =\n\t\t\tthis.scmService.getRepository(activeResource);\n\t\treturn activeResourceRepository?.id;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onDidRepositoryChange.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
