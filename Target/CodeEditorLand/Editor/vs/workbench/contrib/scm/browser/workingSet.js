var k=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var v=(S,d,r,o)=>{for(var e=o>1?void 0:o?m(d,r):d,t=S.length-1,i;t>=0;t--)(i=S[t])&&(e=(o?i(d,r,e):i(e))||e);return o&&e&&k(d,r,e),e},p=(S,d)=>(r,o)=>d(r,o,S);import{Disposable as I,DisposableMap as h,DisposableStore as l}from"../../../../../vs/base/common/lifecycle.js";import{autorun as W,autorunWithStore as f}from"../../../../../vs/base/common/observable.js";import{IConfigurationService as _}from"../../../../../vs/platform/configuration/common/configuration.js";import{observableConfigValue as w}from"../../../../../vs/platform/observable/common/platformObservableUtils.js";import{IStorageService as R,StorageScope as c,StorageTarget as b}from"../../../../../vs/platform/storage/common/storage.js";import"../../../../../vs/workbench/common/contributions.js";import{getProviderKey as C}from"../../../../../vs/workbench/contrib/scm/browser/util.js";import{ISCMService as M}from"../../../../../vs/workbench/contrib/scm/common/scm.js";import{IEditorGroupsService as D}from"../../../../../vs/workbench/services/editor/common/editorGroupsService.js";import{IWorkbenchLayoutService as G,Parts as A}from"../../../../../vs/workbench/services/layout/browser/layoutService.js";let a=class extends I{constructor(r,o,e,t,i){super();this.configurationService=r;this.editorGroupsService=o;this.scmService=e;this.storageService=t;this.layoutService=i;this._store.add(f((n,s)=>{if(!this._enabledConfig.read(n)){this.storageService.remove("scm.workingSets",c.WORKSPACE),this._repositoryDisposables.clearAndDisposeAll();return}this._workingSets=this._loadWorkingSets(),this.scmService.onDidAddRepository(this._onDidAddRepository,this,s),this.scmService.onDidRemoveRepository(this._onDidRemoveRepository,this,s);for(const g of this.scmService.repositories)this._onDidAddRepository(g)}))}static ID="workbench.contrib.scmWorkingSets";_workingSets;_enabledConfig=w("scm.workingSets.enabled",!1,this.configurationService);_repositoryDisposables=new h;_onDidAddRepository(r){const o=new l;o.add(W(async e=>{const i=r.provider.historyProvider.read(e)?.currentHistoryItemGroupId.read(e);if(!i)return;const n=C(r.provider),s=this._workingSets.get(n);if(!s){this._workingSets.set(n,{currentHistoryItemGroupId:i,editorWorkingSets:new Map});return}s.currentHistoryItemGroupId!==i&&(this._saveWorkingSet(n,i,s),await this._restoreWorkingSet(n,i))})),this._repositoryDisposables.set(r,o)}_onDidRemoveRepository(r){this._repositoryDisposables.deleteAndDispose(r)}_loadWorkingSets(){const r=new Map,o=this.storageService.get("scm.workingSets",c.WORKSPACE);if(!o)return r;for(const e of JSON.parse(o))r.set(e.providerKey,{currentHistoryItemGroupId:e.currentHistoryItemGroupId,editorWorkingSets:new Map(e.editorWorkingSets)});return r}_saveWorkingSet(r,o,e){const t=e.currentHistoryItemGroupId,i=e.editorWorkingSets,n=this.editorGroupsService.saveWorkingSet(t);this._workingSets.set(r,{currentHistoryItemGroupId:o,editorWorkingSets:i.set(t,n)});const s=[];for(const[g,{currentHistoryItemGroupId:y,editorWorkingSets:u}]of this._workingSets)s.push({providerKey:g,currentHistoryItemGroupId:y,editorWorkingSets:[...u]});this.storageService.store("scm.workingSets",JSON.stringify(s),c.WORKSPACE,b.MACHINE)}async _restoreWorkingSet(r,o){const e=this._workingSets.get(r);if(!e)return;let t=e.editorWorkingSets.get(o);if(!t&&this.configurationService.getValue("scm.workingSets.default")==="empty"&&(t="empty"),t){const i=this.layoutService.hasFocus(A.PANEL_PART);await this.editorGroupsService.applyWorkingSet(t,{preserveFocus:i})}}dispose(){this._repositoryDisposables.dispose(),super.dispose()}};a=v([p(0,_),p(1,D),p(2,M),p(3,R),p(4,G)],a);export{a as SCMWorkingSetController};
