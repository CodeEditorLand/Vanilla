var m=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var y=(a,d,e,o)=>{for(var r=o>1?void 0:o?I(d,e):d,i=a.length-1,t;i>=0;i--)(t=a[i])&&(r=(o?t(d,e,r):t(r))||r);return o&&r&&m(d,e,r),r},p=(a,d)=>(e,o)=>d(e,o,a);import{Disposable as k,DisposableMap as h,DisposableStore as f}from"../../../../base/common/lifecycle.js";import{autorun as l,autorunWithStore as W,derived as R}from"../../../../base/common/observable.js";import{IConfigurationService as _}from"../../../../platform/configuration/common/configuration.js";import{observableConfigValue as w}from"../../../../platform/observable/common/platformObservableUtils.js";import{IStorageService as b,StorageScope as g,StorageTarget as C}from"../../../../platform/storage/common/storage.js";import{IEditorGroupsService as M}from"../../../services/editor/common/editorGroupsService.js";import{IWorkbenchLayoutService as D,Parts as G}from"../../../services/layout/browser/layoutService.js";import{ISCMService as A}from"../common/scm.js";import{getProviderKey as E}from"./util.js";let S=class extends k{constructor(e,o,r,i,t){super();this.configurationService=e;this.editorGroupsService=o;this.scmService=r;this.storageService=i;this.layoutService=t;this._store.add(W((s,n)=>{if(!this._enabledConfig.read(s)){this.storageService.remove("scm.workingSets",g.WORKSPACE),this._repositoryDisposables.clearAndDisposeAll();return}this._workingSets=this._loadWorkingSets(),this.scmService.onDidAddRepository(this._onDidAddRepository,this,n),this.scmService.onDidRemoveRepository(this._onDidRemoveRepository,this,n);for(const c of this.scmService.repositories)this._onDidAddRepository(c)}))}static ID="workbench.contrib.scmWorkingSets";_workingSets;_enabledConfig=w("scm.workingSets.enabled",!1,this.configurationService);_repositoryDisposables=new h;_onDidAddRepository(e){const o=new f,r=R(i=>e.provider.historyProvider.read(i)?.historyItemRef.read(i)?.id);o.add(l(async i=>{const t=r.read(i);if(!t)return;const s=E(e.provider),n=this._workingSets.get(s);if(!n){this._workingSets.set(s,{currentHistoryItemGroupId:t,editorWorkingSets:new Map});return}n.currentHistoryItemGroupId!==t&&(this._saveWorkingSet(s,t,n),await this._restoreWorkingSet(s,t))})),this._repositoryDisposables.set(e,o)}_onDidRemoveRepository(e){this._repositoryDisposables.deleteAndDispose(e)}_loadWorkingSets(){const e=new Map,o=this.storageService.get("scm.workingSets",g.WORKSPACE);if(!o)return e;for(const r of JSON.parse(o))e.set(r.providerKey,{currentHistoryItemGroupId:r.currentHistoryItemGroupId,editorWorkingSets:new Map(r.editorWorkingSets)});return e}_saveWorkingSet(e,o,r){const i=r.currentHistoryItemGroupId,t=r.editorWorkingSets,s=this.editorGroupsService.saveWorkingSet(i);this._workingSets.set(e,{currentHistoryItemGroupId:o,editorWorkingSets:t.set(i,s)});const n=[];for(const[c,{currentHistoryItemGroupId:v,editorWorkingSets:u}]of this._workingSets)n.push({providerKey:c,currentHistoryItemGroupId:v,editorWorkingSets:[...u]});this.storageService.store("scm.workingSets",JSON.stringify(n),g.WORKSPACE,C.MACHINE)}async _restoreWorkingSet(e,o){const r=this._workingSets.get(e);if(!r)return;let i=r.editorWorkingSets.get(o);if(!i&&this.configurationService.getValue("scm.workingSets.default")==="empty"&&(i="empty"),i){const t=this.layoutService.hasFocus(G.PANEL_PART);await this.editorGroupsService.applyWorkingSet(i,{preserveFocus:t})}}dispose(){this._repositoryDisposables.dispose(),super.dispose()}};S=y([p(0,_),p(1,M),p(2,A),p(3,b),p(4,D)],S);export{S as SCMWorkingSetController};
