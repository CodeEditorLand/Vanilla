{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/workingSet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\tDisposableMap,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\tautorun,\n\tautorunWithStore,\n\tderived,\n} from \"../../../../base/common/observable.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { observableConfigValue } from \"../../../../platform/observable/common/platformObservableUtils.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tIEditorGroupsService,\n\ttype IEditorWorkingSet,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tParts,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport { type ISCMRepository, ISCMService } from \"../common/scm.js\";\nimport { getProviderKey } from \"./util.js\";\n\ntype ISCMSerializedWorkingSet = {\n\treadonly providerKey: string;\n\treadonly currentHistoryItemGroupId: string;\n\treadonly editorWorkingSets: [string, IEditorWorkingSet][];\n};\n\ninterface ISCMRepositoryWorkingSet {\n\treadonly currentHistoryItemGroupId: string;\n\treadonly editorWorkingSets: Map<string, IEditorWorkingSet>;\n}\n\nexport class SCMWorkingSetController\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.scmWorkingSets\";\n\n\tprivate _workingSets!: Map<string, ISCMRepositoryWorkingSet>;\n\tprivate _enabledConfig = observableConfigValue<boolean>(\n\t\t\"scm.workingSets.enabled\",\n\t\tfalse,\n\t\tthis.configurationService,\n\t);\n\n\tprivate readonly _repositoryDisposables =\n\t\tnew DisposableMap<ISCMRepository>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorGroupsService private readonly editorGroupsService: IEditorGroupsService,\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis._store.add(autorunWithStore((reader, store) => {\n\t\t\tif (!this._enabledConfig.read(reader)) {\n\t\t\t\tthis.storageService.remove('scm.workingSets', StorageScope.WORKSPACE);\n\t\t\t\tthis._repositoryDisposables.clearAndDisposeAll();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._workingSets = this._loadWorkingSets();\n\n\t\t\tthis.scmService.onDidAddRepository(this._onDidAddRepository, this, store);\n\t\t\tthis.scmService.onDidRemoveRepository(this._onDidRemoveRepository, this, store);\n\n\t\t\tfor (const repository of this.scmService.repositories) {\n\t\t\t\tthis._onDidAddRepository(repository);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _onDidAddRepository(repository: ISCMRepository): void {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst historyItemRefId = derived((reader) => {\n\t\t\tconst historyProvider =\n\t\t\t\trepository.provider.historyProvider.read(reader);\n\t\t\tconst historyItemRef = historyProvider?.historyItemRef.read(reader);\n\n\t\t\treturn historyItemRef?.id;\n\t\t});\n\n\t\tdisposables.add(\n\t\t\tautorun(async (reader) => {\n\t\t\t\tconst historyItemRefIdValue = historyItemRefId.read(reader);\n\n\t\t\t\tif (!historyItemRefIdValue) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst providerKey = getProviderKey(repository.provider);\n\t\t\t\tconst repositoryWorkingSets =\n\t\t\t\t\tthis._workingSets.get(providerKey);\n\n\t\t\t\tif (!repositoryWorkingSets) {\n\t\t\t\t\tthis._workingSets.set(providerKey, {\n\t\t\t\t\t\tcurrentHistoryItemGroupId: historyItemRefIdValue,\n\t\t\t\t\t\teditorWorkingSets: new Map(),\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Editors for the current working set are automatically restored\n\t\t\t\tif (\n\t\t\t\t\trepositoryWorkingSets.currentHistoryItemGroupId ===\n\t\t\t\t\thistoryItemRefIdValue\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Save the working set\n\t\t\t\tthis._saveWorkingSet(\n\t\t\t\t\tproviderKey,\n\t\t\t\t\thistoryItemRefIdValue,\n\t\t\t\t\trepositoryWorkingSets,\n\t\t\t\t);\n\n\t\t\t\t// Restore the working set\n\t\t\t\tawait this._restoreWorkingSet(\n\t\t\t\t\tproviderKey,\n\t\t\t\t\thistoryItemRefIdValue,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._repositoryDisposables.set(repository, disposables);\n\t}\n\n\tprivate _onDidRemoveRepository(repository: ISCMRepository): void {\n\t\tthis._repositoryDisposables.deleteAndDispose(repository);\n\t}\n\n\tprivate _loadWorkingSets(): Map<string, ISCMRepositoryWorkingSet> {\n\t\tconst workingSets = new Map<string, ISCMRepositoryWorkingSet>();\n\t\tconst workingSetsRaw = this.storageService.get(\n\t\t\t\"scm.workingSets\",\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tif (!workingSetsRaw) {\n\t\t\treturn workingSets;\n\t\t}\n\n\t\tfor (const serializedWorkingSet of JSON.parse(\n\t\t\tworkingSetsRaw,\n\t\t) as ISCMSerializedWorkingSet[]) {\n\t\t\tworkingSets.set(serializedWorkingSet.providerKey, {\n\t\t\t\tcurrentHistoryItemGroupId:\n\t\t\t\t\tserializedWorkingSet.currentHistoryItemGroupId,\n\t\t\t\teditorWorkingSets: new Map(\n\t\t\t\t\tserializedWorkingSet.editorWorkingSets,\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\treturn workingSets;\n\t}\n\n\tprivate _saveWorkingSet(\n\t\tproviderKey: string,\n\t\tcurrentHistoryItemGroupId: string,\n\t\trepositoryWorkingSets: ISCMRepositoryWorkingSet,\n\t): void {\n\t\tconst previousHistoryItemGroupId =\n\t\t\trepositoryWorkingSets.currentHistoryItemGroupId;\n\t\tconst editorWorkingSets = repositoryWorkingSets.editorWorkingSets;\n\n\t\tconst editorWorkingSet = this.editorGroupsService.saveWorkingSet(\n\t\t\tpreviousHistoryItemGroupId,\n\t\t);\n\t\tthis._workingSets.set(providerKey, {\n\t\t\tcurrentHistoryItemGroupId,\n\t\t\teditorWorkingSets: editorWorkingSets.set(\n\t\t\t\tpreviousHistoryItemGroupId,\n\t\t\t\teditorWorkingSet,\n\t\t\t),\n\t\t});\n\n\t\t// Save to storage\n\t\tconst workingSets: ISCMSerializedWorkingSet[] = [];\n\t\tfor (const [\n\t\t\tproviderKey,\n\t\t\t{ currentHistoryItemGroupId, editorWorkingSets },\n\t\t] of this._workingSets) {\n\t\t\tworkingSets.push({\n\t\t\t\tproviderKey,\n\t\t\t\tcurrentHistoryItemGroupId,\n\t\t\t\teditorWorkingSets: [...editorWorkingSets],\n\t\t\t});\n\t\t}\n\t\tthis.storageService.store(\n\t\t\t\"scm.workingSets\",\n\t\t\tJSON.stringify(workingSets),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tprivate async _restoreWorkingSet(\n\t\tproviderKey: string,\n\t\tcurrentHistoryItemGroupId: string,\n\t): Promise<void> {\n\t\tconst workingSets = this._workingSets.get(providerKey);\n\t\tif (!workingSets) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet editorWorkingSetId: IEditorWorkingSet | \"empty\" | undefined =\n\t\t\tworkingSets.editorWorkingSets.get(currentHistoryItemGroupId);\n\t\tif (\n\t\t\t!editorWorkingSetId &&\n\t\t\tthis.configurationService.getValue<\"empty\" | \"current\">(\n\t\t\t\t\"scm.workingSets.default\",\n\t\t\t) === \"empty\"\n\t\t) {\n\t\t\teditorWorkingSetId = \"empty\";\n\t\t}\n\n\t\tif (editorWorkingSetId) {\n\t\t\t// Applying a working set can be the result of a user action that has been\n\t\t\t// initiated from the terminal (ex: switching branches). As such, we want\n\t\t\t// to preserve the focus in the terminal. This does not cover the scenario\n\t\t\t// in which the terminal is in the editor part.\n\t\t\tconst preserveFocus = this.layoutService.hasFocus(Parts.PANEL_PART);\n\n\t\t\tawait this.editorGroupsService.applyWorkingSet(editorWorkingSetId, {\n\t\t\t\tpreserveFocus,\n\t\t\t});\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis._repositoryDisposables.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["providerKey", "currentHistoryItemGroupId", "editorWorkingSets"]
}
