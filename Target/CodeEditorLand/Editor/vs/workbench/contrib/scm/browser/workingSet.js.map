{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/browser/workingSet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableMap, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived } from '../../../../base/common/observable.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { observableConfigValue } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { getProviderKey } from './util.js';\nimport { ISCMRepository, ISCMService } from '../common/scm.js';\nimport { IEditorGroupsService, IEditorWorkingSet } from '../../../services/editor/common/editorGroupsService.js';\nimport { IWorkbenchLayoutService, Parts } from '../../../services/layout/browser/layoutService.js';\n\ntype ISCMSerializedWorkingSet = {\n\treadonly providerKey: string;\n\treadonly currentHistoryItemGroupId: string;\n\treadonly editorWorkingSets: [string, IEditorWorkingSet][];\n};\n\ninterface ISCMRepositoryWorkingSet {\n\treadonly currentHistoryItemGroupId: string;\n\treadonly editorWorkingSets: Map<string, IEditorWorkingSet>;\n}\n\nexport class SCMWorkingSetController extends Disposable implements IWorkbenchContribution {\n\tstatic readonly ID = 'workbench.contrib.scmWorkingSets';\n\n\tprivate _workingSets!: Map<string, ISCMRepositoryWorkingSet>;\n\tprivate _enabledConfig = observableConfigValue<boolean>('scm.workingSets.enabled', false, this.configurationService);\n\n\tprivate readonly _repositoryDisposables = new DisposableMap<ISCMRepository>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorGroupsService private readonly editorGroupsService: IEditorGroupsService,\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis._store.add(autorunWithStore((reader, store) => {\n\t\t\tif (!this._enabledConfig.read(reader)) {\n\t\t\t\tthis.storageService.remove('scm.workingSets', StorageScope.WORKSPACE);\n\t\t\t\tthis._repositoryDisposables.clearAndDisposeAll();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._workingSets = this._loadWorkingSets();\n\n\t\t\tthis.scmService.onDidAddRepository(this._onDidAddRepository, this, store);\n\t\t\tthis.scmService.onDidRemoveRepository(this._onDidRemoveRepository, this, store);\n\n\t\t\tfor (const repository of this.scmService.repositories) {\n\t\t\t\tthis._onDidAddRepository(repository);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _onDidAddRepository(repository: ISCMRepository): void {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst historyItemRefId = derived(reader => {\n\t\t\tconst historyProvider = repository.provider.historyProvider.read(reader);\n\t\t\tconst historyItemRef = historyProvider?.historyItemRef.read(reader);\n\n\t\t\treturn historyItemRef?.id;\n\t\t});\n\n\t\tdisposables.add(autorun(async reader => {\n\t\t\tconst historyItemRefIdValue = historyItemRefId.read(reader);\n\n\t\t\tif (!historyItemRefIdValue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst providerKey = getProviderKey(repository.provider);\n\t\t\tconst repositoryWorkingSets = this._workingSets.get(providerKey);\n\n\t\t\tif (!repositoryWorkingSets) {\n\t\t\t\tthis._workingSets.set(providerKey, { currentHistoryItemGroupId: historyItemRefIdValue, editorWorkingSets: new Map() });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Editors for the current working set are automatically restored\n\t\t\tif (repositoryWorkingSets.currentHistoryItemGroupId === historyItemRefIdValue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Save the working set\n\t\t\tthis._saveWorkingSet(providerKey, historyItemRefIdValue, repositoryWorkingSets);\n\n\t\t\t// Restore the working set\n\t\t\tawait this._restoreWorkingSet(providerKey, historyItemRefIdValue);\n\t\t}));\n\n\t\tthis._repositoryDisposables.set(repository, disposables);\n\t}\n\n\tprivate _onDidRemoveRepository(repository: ISCMRepository): void {\n\t\tthis._repositoryDisposables.deleteAndDispose(repository);\n\t}\n\n\tprivate _loadWorkingSets(): Map<string, ISCMRepositoryWorkingSet> {\n\t\tconst workingSets = new Map<string, ISCMRepositoryWorkingSet>();\n\t\tconst workingSetsRaw = this.storageService.get('scm.workingSets', StorageScope.WORKSPACE);\n\t\tif (!workingSetsRaw) {\n\t\t\treturn workingSets;\n\t\t}\n\n\t\tfor (const serializedWorkingSet of JSON.parse(workingSetsRaw) as ISCMSerializedWorkingSet[]) {\n\t\t\tworkingSets.set(serializedWorkingSet.providerKey, {\n\t\t\t\tcurrentHistoryItemGroupId: serializedWorkingSet.currentHistoryItemGroupId,\n\t\t\t\teditorWorkingSets: new Map(serializedWorkingSet.editorWorkingSets)\n\t\t\t});\n\t\t}\n\n\t\treturn workingSets;\n\t}\n\n\tprivate _saveWorkingSet(providerKey: string, currentHistoryItemGroupId: string, repositoryWorkingSets: ISCMRepositoryWorkingSet): void {\n\t\tconst previousHistoryItemGroupId = repositoryWorkingSets.currentHistoryItemGroupId;\n\t\tconst editorWorkingSets = repositoryWorkingSets.editorWorkingSets;\n\n\t\tconst editorWorkingSet = this.editorGroupsService.saveWorkingSet(previousHistoryItemGroupId);\n\t\tthis._workingSets.set(providerKey, { currentHistoryItemGroupId, editorWorkingSets: editorWorkingSets.set(previousHistoryItemGroupId, editorWorkingSet) });\n\n\t\t// Save to storage\n\t\tconst workingSets: ISCMSerializedWorkingSet[] = [];\n\t\tfor (const [providerKey, { currentHistoryItemGroupId, editorWorkingSets }] of this._workingSets) {\n\t\t\tworkingSets.push({ providerKey, currentHistoryItemGroupId, editorWorkingSets: [...editorWorkingSets] });\n\t\t}\n\t\tthis.storageService.store('scm.workingSets', JSON.stringify(workingSets), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate async _restoreWorkingSet(providerKey: string, currentHistoryItemGroupId: string): Promise<void> {\n\t\tconst workingSets = this._workingSets.get(providerKey);\n\t\tif (!workingSets) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet editorWorkingSetId: IEditorWorkingSet | 'empty' | undefined = workingSets.editorWorkingSets.get(currentHistoryItemGroupId);\n\t\tif (!editorWorkingSetId && this.configurationService.getValue<'empty' | 'current'>('scm.workingSets.default') === 'empty') {\n\t\t\teditorWorkingSetId = 'empty';\n\t\t}\n\n\t\tif (editorWorkingSetId) {\n\t\t\t// Applying a working set can be the result of a user action that has been\n\t\t\t// initiated from the terminal (ex: switching branches). As such, we want\n\t\t\t// to preserve the focus in the terminal. This does not cover the scenario\n\t\t\t// in which the terminal is in the editor part.\n\t\t\tconst preserveFocus = this.layoutService.hasFocus(Parts.PANEL_PART);\n\n\t\t\tawait this.editorGroupsService.applyWorkingSet(editorWorkingSetId, { preserveFocus });\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis._repositoryDisposables.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["providerKey", "currentHistoryItemGroupId", "editorWorkingSets"]
}
