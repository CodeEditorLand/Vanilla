{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/common/scmService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { ISCMService, ISCMProvider, ISCMInput, ISCMRepository, IInputValidator, ISCMInputChangeEvent, SCMInputChangeReason, InputValidationType, IInputValidation } from './scm.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { HistoryNavigator2 } from '../../../../base/common/history.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\n\nclass SCMInput extends Disposable implements ISCMInput {\n\n\tprivate _value = '';\n\n\tget value(): string {\n\t\treturn this._value;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<ISCMInputChangeEvent>();\n\treadonly onDidChange: Event<ISCMInputChangeEvent> = this._onDidChange.event;\n\n\tprivate _placeholder = '';\n\n\tget placeholder(): string {\n\t\treturn this._placeholder;\n\t}\n\n\tset placeholder(placeholder: string) {\n\t\tthis._placeholder = placeholder;\n\t\tthis._onDidChangePlaceholder.fire(placeholder);\n\t}\n\n\tprivate readonly _onDidChangePlaceholder = new Emitter<string>();\n\treadonly onDidChangePlaceholder: Event<string> = this._onDidChangePlaceholder.event;\n\n\tprivate _enabled = true;\n\n\tget enabled(): boolean {\n\t\treturn this._enabled;\n\t}\n\n\tset enabled(enabled: boolean) {\n\t\tthis._enabled = enabled;\n\t\tthis._onDidChangeEnablement.fire(enabled);\n\t}\n\n\tprivate readonly _onDidChangeEnablement = new Emitter<boolean>();\n\treadonly onDidChangeEnablement: Event<boolean> = this._onDidChangeEnablement.event;\n\n\tprivate _visible = true;\n\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tset visible(visible: boolean) {\n\t\tthis._visible = visible;\n\t\tthis._onDidChangeVisibility.fire(visible);\n\t}\n\n\tprivate readonly _onDidChangeVisibility = new Emitter<boolean>();\n\treadonly onDidChangeVisibility: Event<boolean> = this._onDidChangeVisibility.event;\n\n\tsetFocus(): void {\n\t\tthis._onDidChangeFocus.fire();\n\t}\n\n\tprivate readonly _onDidChangeFocus = new Emitter<void>();\n\treadonly onDidChangeFocus: Event<void> = this._onDidChangeFocus.event;\n\n\tshowValidationMessage(message: string | IMarkdownString, type: InputValidationType): void {\n\t\tthis._onDidChangeValidationMessage.fire({ message: message, type: type });\n\t}\n\n\tprivate readonly _onDidChangeValidationMessage = new Emitter<IInputValidation>();\n\treadonly onDidChangeValidationMessage: Event<IInputValidation> = this._onDidChangeValidationMessage.event;\n\n\tprivate _validateInput: IInputValidator = () => Promise.resolve(undefined);\n\n\tget validateInput(): IInputValidator {\n\t\treturn this._validateInput;\n\t}\n\n\tset validateInput(validateInput: IInputValidator) {\n\t\tthis._validateInput = validateInput;\n\t\tthis._onDidChangeValidateInput.fire();\n\t}\n\n\tprivate readonly _onDidChangeValidateInput = new Emitter<void>();\n\treadonly onDidChangeValidateInput: Event<void> = this._onDidChangeValidateInput.event;\n\n\tprivate readonly historyNavigator: HistoryNavigator2<string>;\n\tprivate didChangeHistory: boolean = false;\n\n\tconstructor(\n\t\treadonly repository: ISCMRepository,\n\t\tprivate readonly history: SCMInputHistory\n\t) {\n\t\tsuper();\n\n\t\tif (this.repository.provider.rootUri) {\n\t\t\tthis.historyNavigator = history.getHistory(this.repository.provider.label, this.repository.provider.rootUri);\n\t\t\tthis._register(this.history.onWillSaveHistory(event => {\n\t\t\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\t\t\tthis.saveValue();\n\t\t\t\t}\n\n\t\t\t\tif (this.didChangeHistory) {\n\t\t\t\t\tevent.historyDidIndeedChange();\n\t\t\t\t}\n\n\t\t\t\tthis.didChangeHistory = false;\n\t\t\t}));\n\t\t} else { // in memory only\n\t\t\tthis.historyNavigator = new HistoryNavigator2([''], 100);\n\t\t}\n\n\t\tthis._value = this.historyNavigator.current();\n\t}\n\n\tsetValue(value: string, transient: boolean, reason?: SCMInputChangeReason) {\n\t\tif (value === this._value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!transient) {\n\t\t\tthis.historyNavigator.replaceLast(this._value);\n\t\t\tthis.historyNavigator.add(value);\n\t\t\tthis.didChangeHistory = true;\n\t\t}\n\n\t\tthis._value = value;\n\t\tthis._onDidChange.fire({ value, reason });\n\t}\n\n\tshowNextHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\treturn;\n\t\t} else if (!this.historyNavigator.has(this.value)) {\n\t\t\tthis.saveValue();\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.next();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryNext);\n\t}\n\n\tshowPreviousHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\tthis.saveValue();\n\t\t} else if (!this.historyNavigator.has(this._value)) {\n\t\t\tthis.saveValue();\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.previous();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryPrevious);\n\t}\n\n\tprivate saveValue(): void {\n\t\tconst oldValue = this.historyNavigator.replaceLast(this._value);\n\t\tthis.didChangeHistory = this.didChangeHistory || (oldValue !== this._value);\n\t}\n}\n\nclass SCMRepository implements ISCMRepository {\n\n\tprivate _selected = false;\n\tget selected(): boolean {\n\t\treturn this._selected;\n\t}\n\n\tprivate readonly _onDidChangeSelection = new Emitter<boolean>();\n\treadonly onDidChangeSelection: Event<boolean> = this._onDidChangeSelection.event;\n\n\treadonly input: ISCMInput;\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic readonly provider: ISCMProvider,\n\t\tprivate disposable: IDisposable,\n\t\tinputHistory: SCMInputHistory\n\t) {\n\t\tthis.input = new SCMInput(this, inputHistory);\n\t}\n\n\tsetSelected(selected: boolean): void {\n\t\tif (this._selected === selected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._selected = selected;\n\t\tthis._onDidChangeSelection.fire(selected);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.provider.dispose();\n\t}\n}\n\nclass WillSaveHistoryEvent {\n\tprivate _didChangeHistory = false;\n\tget didChangeHistory() { return this._didChangeHistory; }\n\thistoryDidIndeedChange() { this._didChangeHistory = true; }\n}\n\nclass SCMInputHistory {\n\n\tprivate readonly disposables = new DisposableStore();\n\tprivate readonly histories = new Map<string, ResourceMap<HistoryNavigator2<string>>>();\n\n\tprivate readonly _onWillSaveHistory = this.disposables.add(new Emitter<WillSaveHistoryEvent>());\n\treadonly onWillSaveHistory = this._onWillSaveHistory.event;\n\n\tconstructor(\n\t\t@IStorageService private storageService: IStorageService,\n\t\t@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tthis.histories = new Map();\n\n\t\tconst entries = this.storageService.getObject<[string, URI, string[]][]>('scm.history', StorageScope.WORKSPACE, []);\n\n\t\tfor (const [providerLabel, rootUri, history] of entries) {\n\t\t\tlet providerHistories = this.histories.get(providerLabel);\n\n\t\t\tif (!providerHistories) {\n\t\t\t\tproviderHistories = new ResourceMap();\n\t\t\t\tthis.histories.set(providerLabel, providerHistories);\n\t\t\t}\n\n\t\t\tproviderHistories.set(rootUri, new HistoryNavigator2(history, 100));\n\t\t}\n\n\t\tif (this.migrateStorage()) {\n\t\t\tthis.saveToStorage();\n\t\t}\n\n\t\tthis.disposables.add(this.storageService.onDidChangeValue(StorageScope.WORKSPACE, 'scm.history', this.disposables)(e => {\n\t\t\tif (e.external && e.key === 'scm.history') {\n\t\t\t\tconst raw = this.storageService.getObject<[string, URI, string[]][]>('scm.history', StorageScope.WORKSPACE, []);\n\n\t\t\t\tfor (const [providerLabel, uri, rawHistory] of raw) {\n\t\t\t\t\tconst history = this.getHistory(providerLabel, uri);\n\n\t\t\t\t\tfor (const value of Iterable.reverse(rawHistory)) {\n\t\t\t\t\t\thistory.prepend(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.disposables.add(this.storageService.onWillSaveState(_ => {\n\t\t\tconst event = new WillSaveHistoryEvent();\n\t\t\tthis._onWillSaveHistory.fire(event);\n\n\t\t\tif (event.didChangeHistory) {\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate saveToStorage(): void {\n\t\tconst raw: [string, URI, string[]][] = [];\n\n\t\tfor (const [providerLabel, providerHistories] of this.histories) {\n\t\t\tfor (const [rootUri, history] of providerHistories) {\n\t\t\t\tif (!(history.size === 1 && history.current() === '')) {\n\t\t\t\t\traw.push([providerLabel, rootUri, [...history]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.storageService.store('scm.history', raw, StorageScope.WORKSPACE, StorageTarget.USER);\n\t}\n\n\tgetHistory(providerLabel: string, rootUri: URI): HistoryNavigator2<string> {\n\t\tlet providerHistories = this.histories.get(providerLabel);\n\n\t\tif (!providerHistories) {\n\t\t\tproviderHistories = new ResourceMap();\n\t\t\tthis.histories.set(providerLabel, providerHistories);\n\t\t}\n\n\t\tlet history = providerHistories.get(rootUri);\n\n\t\tif (!history) {\n\t\t\thistory = new HistoryNavigator2([''], 100);\n\t\t\tproviderHistories.set(rootUri, history);\n\t\t}\n\n\t\treturn history;\n\t}\n\n\t// Migrates from Application scope storage to Workspace scope.\n\t// TODO@joaomoreno: Change from January 2024 onwards such that the only code is to remove all `scm/input:` storage keys\n\tprivate migrateStorage(): boolean {\n\t\tlet didSomethingChange = false;\n\t\tconst machineKeys = Iterable.filter(this.storageService.keys(StorageScope.APPLICATION, StorageTarget.MACHINE), key => key.startsWith('scm/input:'));\n\n\t\tfor (const key of machineKeys) {\n\t\t\ttry {\n\t\t\t\tconst legacyHistory = JSON.parse(this.storageService.get(key, StorageScope.APPLICATION, ''));\n\t\t\t\tconst match = /^scm\\/input:([^:]+):(.+)$/.exec(key);\n\n\t\t\t\tif (!match || !Array.isArray(legacyHistory?.history) || !Number.isInteger(legacyHistory?.timestamp)) {\n\t\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst [, providerLabel, rootPath] = match;\n\t\t\t\tconst rootUri = URI.file(rootPath);\n\n\t\t\t\tif (this.workspaceContextService.getWorkspaceFolder(rootUri)) {\n\t\t\t\t\tconst history = this.getHistory(providerLabel, rootUri);\n\n\t\t\t\t\tfor (const entry of Iterable.reverse(legacyHistory.history as string[])) {\n\t\t\t\t\t\thistory.prepend(entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tdidSomethingChange = true;\n\t\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t}\n\t\t}\n\n\t\treturn didSomethingChange;\n\t}\n\n\tdispose() {\n\t\tthis.disposables.dispose();\n\t}\n}\n\n\nexport class SCMService implements ISCMService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t_repositories = new Map<string, ISCMRepository>();  // used in tests\n\tget repositories(): Iterable<ISCMRepository> { return this._repositories.values(); }\n\tget repositoryCount(): number { return this._repositories.size; }\n\n\tprivate inputHistory: SCMInputHistory;\n\tprivate providerCount: IContextKey<number>;\n\n\tprivate readonly _onDidAddProvider = new Emitter<ISCMRepository>();\n\treadonly onDidAddRepository: Event<ISCMRepository> = this._onDidAddProvider.event;\n\n\tprivate readonly _onDidRemoveProvider = new Emitter<ISCMRepository>();\n\treadonly onDidRemoveRepository: Event<ISCMRepository> = this._onDidRemoveProvider.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tthis.inputHistory = new SCMInputHistory(storageService, workspaceContextService);\n\t\tthis.providerCount = contextKeyService.createKey('scm.providerCount', 0);\n\t}\n\n\tregisterSCMProvider(provider: ISCMProvider): ISCMRepository {\n\t\tthis.logService.trace('SCMService#registerSCMProvider');\n\n\t\tif (this._repositories.has(provider.id)) {\n\t\t\tthrow new Error(`SCM Provider ${provider.id} already exists.`);\n\t\t}\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tthis._repositories.delete(provider.id);\n\t\t\tthis._onDidRemoveProvider.fire(repository);\n\t\t\tthis.providerCount.set(this._repositories.size);\n\t\t});\n\n\t\tconst repository = new SCMRepository(provider.id, provider, disposable, this.inputHistory);\n\t\tthis._repositories.set(provider.id, repository);\n\t\tthis._onDidAddProvider.fire(repository);\n\n\t\tthis.providerCount.set(this._repositories.size);\n\t\treturn repository;\n\t}\n\n\tgetRepository(id: string): ISCMRepository | undefined;\n\tgetRepository(resource: URI): ISCMRepository | undefined;\n\tgetRepository(idOrResource: string | URI): ISCMRepository | undefined {\n\t\tif (typeof idOrResource === 'string') {\n\t\t\treturn this._repositories.get(idOrResource);\n\t\t}\n\n\t\tif (idOrResource.scheme !== Schemas.file &&\n\t\t\tidOrResource.scheme !== Schemas.vscodeRemote) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet bestRepository: ISCMRepository | undefined = undefined;\n\t\tlet bestMatchLength = Number.POSITIVE_INFINITY;\n\n\t\tfor (const repository of this.repositories) {\n\t\t\tconst root = repository.provider.rootUri;\n\n\t\t\tif (!root) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst path = this.uriIdentityService.extUri.relativePath(root, idOrResource);\n\n\t\t\tif (path && !/^\\.\\./.test(path) && path.length < bestMatchLength) {\n\t\t\t\tbestRepository = repository;\n\t\t\t\tbestMatchLength = path.length;\n\t\t\t}\n\t\t}\n\n\t\treturn bestRepository;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
