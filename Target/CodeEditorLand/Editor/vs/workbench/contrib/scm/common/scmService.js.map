{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/scm/common/scmService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { HistoryNavigator2 } from \"../../../../base/common/history.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IInputValidation,\n\ttype IInputValidator,\n\ttype ISCMInput,\n\ttype ISCMInputChangeEvent,\n\ttype ISCMProvider,\n\ttype ISCMRepository,\n\ttype ISCMService,\n\ttype InputValidationType,\n\tSCMInputChangeReason,\n} from \"./scm.js\";\n\nclass SCMInput extends Disposable implements ISCMInput {\n\tprivate _value = \"\";\n\n\tget value(): string {\n\t\treturn this._value;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<ISCMInputChangeEvent>();\n\treadonly onDidChange: Event<ISCMInputChangeEvent> = this._onDidChange.event;\n\n\tprivate _placeholder = \"\";\n\n\tget placeholder(): string {\n\t\treturn this._placeholder;\n\t}\n\n\tset placeholder(placeholder: string) {\n\t\tthis._placeholder = placeholder;\n\t\tthis._onDidChangePlaceholder.fire(placeholder);\n\t}\n\n\tprivate readonly _onDidChangePlaceholder = new Emitter<string>();\n\treadonly onDidChangePlaceholder: Event<string> =\n\t\tthis._onDidChangePlaceholder.event;\n\n\tprivate _enabled = true;\n\n\tget enabled(): boolean {\n\t\treturn this._enabled;\n\t}\n\n\tset enabled(enabled: boolean) {\n\t\tthis._enabled = enabled;\n\t\tthis._onDidChangeEnablement.fire(enabled);\n\t}\n\n\tprivate readonly _onDidChangeEnablement = new Emitter<boolean>();\n\treadonly onDidChangeEnablement: Event<boolean> =\n\t\tthis._onDidChangeEnablement.event;\n\n\tprivate _visible = true;\n\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tset visible(visible: boolean) {\n\t\tthis._visible = visible;\n\t\tthis._onDidChangeVisibility.fire(visible);\n\t}\n\n\tprivate readonly _onDidChangeVisibility = new Emitter<boolean>();\n\treadonly onDidChangeVisibility: Event<boolean> =\n\t\tthis._onDidChangeVisibility.event;\n\n\tsetFocus(): void {\n\t\tthis._onDidChangeFocus.fire();\n\t}\n\n\tprivate readonly _onDidChangeFocus = new Emitter<void>();\n\treadonly onDidChangeFocus: Event<void> = this._onDidChangeFocus.event;\n\n\tshowValidationMessage(\n\t\tmessage: string | IMarkdownString,\n\t\ttype: InputValidationType,\n\t): void {\n\t\tthis._onDidChangeValidationMessage.fire({\n\t\t\tmessage: message,\n\t\t\ttype: type,\n\t\t});\n\t}\n\n\tprivate readonly _onDidChangeValidationMessage =\n\t\tnew Emitter<IInputValidation>();\n\treadonly onDidChangeValidationMessage: Event<IInputValidation> =\n\t\tthis._onDidChangeValidationMessage.event;\n\n\tprivate _validateInput: IInputValidator = () => Promise.resolve(undefined);\n\n\tget validateInput(): IInputValidator {\n\t\treturn this._validateInput;\n\t}\n\n\tset validateInput(validateInput: IInputValidator) {\n\t\tthis._validateInput = validateInput;\n\t\tthis._onDidChangeValidateInput.fire();\n\t}\n\n\tprivate readonly _onDidChangeValidateInput = new Emitter<void>();\n\treadonly onDidChangeValidateInput: Event<void> =\n\t\tthis._onDidChangeValidateInput.event;\n\n\tprivate readonly historyNavigator: HistoryNavigator2<string>;\n\tprivate didChangeHistory = false;\n\n\tconstructor(\n\t\treadonly repository: ISCMRepository,\n\t\tprivate readonly history: SCMInputHistory,\n\t) {\n\t\tsuper();\n\n\t\tif (this.repository.provider.rootUri) {\n\t\t\tthis.historyNavigator = history.getHistory(\n\t\t\t\tthis.repository.provider.label,\n\t\t\t\tthis.repository.provider.rootUri,\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis.history.onWillSaveHistory((event) => {\n\t\t\t\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\t\t\t\tthis.saveValue();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.didChangeHistory) {\n\t\t\t\t\t\tevent.historyDidIndeedChange();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.didChangeHistory = false;\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\t// in memory only\n\t\t\tthis.historyNavigator = new HistoryNavigator2([\"\"], 100);\n\t\t}\n\n\t\tthis._value = this.historyNavigator.current();\n\t}\n\n\tsetValue(value: string, transient: boolean, reason?: SCMInputChangeReason) {\n\t\tif (value === this._value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!transient) {\n\t\t\tthis.historyNavigator.replaceLast(this._value);\n\t\t\tthis.historyNavigator.add(value);\n\t\t\tthis.didChangeHistory = true;\n\t\t}\n\n\t\tthis._value = value;\n\t\tthis._onDidChange.fire({ value, reason });\n\t}\n\n\tshowNextHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\treturn;\n\t\t} else if (!this.historyNavigator.has(this.value)) {\n\t\t\tthis.saveValue();\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.next();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryNext);\n\t}\n\n\tshowPreviousHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\tthis.saveValue();\n\t\t} else if (!this.historyNavigator.has(this._value)) {\n\t\t\tthis.saveValue();\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.previous();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryPrevious);\n\t}\n\n\tprivate saveValue(): void {\n\t\tconst oldValue = this.historyNavigator.replaceLast(this._value);\n\t\tthis.didChangeHistory =\n\t\t\tthis.didChangeHistory || oldValue !== this._value;\n\t}\n}\n\nclass SCMRepository implements ISCMRepository {\n\tprivate _selected = false;\n\tget selected(): boolean {\n\t\treturn this._selected;\n\t}\n\n\tprivate readonly _onDidChangeSelection = new Emitter<boolean>();\n\treadonly onDidChangeSelection: Event<boolean> =\n\t\tthis._onDidChangeSelection.event;\n\n\treadonly input: ISCMInput;\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic readonly provider: ISCMProvider,\n\t\tprivate disposable: IDisposable,\n\t\tinputHistory: SCMInputHistory,\n\t) {\n\t\tthis.input = new SCMInput(this, inputHistory);\n\t}\n\n\tsetSelected(selected: boolean): void {\n\t\tif (this._selected === selected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._selected = selected;\n\t\tthis._onDidChangeSelection.fire(selected);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.provider.dispose();\n\t}\n}\n\nclass WillSaveHistoryEvent {\n\tprivate _didChangeHistory = false;\n\tget didChangeHistory() {\n\t\treturn this._didChangeHistory;\n\t}\n\thistoryDidIndeedChange() {\n\t\tthis._didChangeHistory = true;\n\t}\n}\n\nclass SCMInputHistory {\n\tprivate readonly disposables = new DisposableStore();\n\tprivate readonly histories = new Map<\n\t\tstring,\n\t\tResourceMap<HistoryNavigator2<string>>\n\t>();\n\n\tprivate readonly _onWillSaveHistory = this.disposables.add(\n\t\tnew Emitter<WillSaveHistoryEvent>(),\n\t);\n\treadonly onWillSaveHistory = this._onWillSaveHistory.event;\n\n\tconstructor(\n\t\t@IStorageService private storageService: IStorageService,\n\t\t@IWorkspaceContextService\n\t\tprivate workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tthis.histories = new Map();\n\n\t\tconst entries = this.storageService.getObject<\n\t\t\t[string, URI, string[]][]\n\t\t>(\"scm.history\", StorageScope.WORKSPACE, []);\n\n\t\tfor (const [providerLabel, rootUri, history] of entries) {\n\t\t\tlet providerHistories = this.histories.get(providerLabel);\n\n\t\t\tif (!providerHistories) {\n\t\t\t\tproviderHistories = new ResourceMap();\n\t\t\t\tthis.histories.set(providerLabel, providerHistories);\n\t\t\t}\n\n\t\t\tproviderHistories.set(rootUri, new HistoryNavigator2(history, 100));\n\t\t}\n\n\t\tif (this.migrateStorage()) {\n\t\t\tthis.saveToStorage();\n\t\t}\n\n\t\tthis.disposables.add(\n\t\t\tthis.storageService.onDidChangeValue(\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\"scm.history\",\n\t\t\t\tthis.disposables,\n\t\t\t)((e) => {\n\t\t\t\tif (e.external && e.key === \"scm.history\") {\n\t\t\t\t\tconst raw = this.storageService.getObject<\n\t\t\t\t\t\t[string, URI, string[]][]\n\t\t\t\t\t>(\"scm.history\", StorageScope.WORKSPACE, []);\n\n\t\t\t\t\tfor (const [providerLabel, uri, rawHistory] of raw) {\n\t\t\t\t\t\tconst history = this.getHistory(providerLabel, uri);\n\n\t\t\t\t\t\tfor (const value of Iterable.reverse(rawHistory)) {\n\t\t\t\t\t\t\thistory.prepend(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.disposables.add(\n\t\t\tthis.storageService.onWillSaveState((_) => {\n\t\t\t\tconst event = new WillSaveHistoryEvent();\n\t\t\t\tthis._onWillSaveHistory.fire(event);\n\n\t\t\t\tif (event.didChangeHistory) {\n\t\t\t\t\tthis.saveToStorage();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate saveToStorage(): void {\n\t\tconst raw: [string, URI, string[]][] = [];\n\n\t\tfor (const [providerLabel, providerHistories] of this.histories) {\n\t\t\tfor (const [rootUri, history] of providerHistories) {\n\t\t\t\tif (!(history.size === 1 && history.current() === \"\")) {\n\t\t\t\t\traw.push([providerLabel, rootUri, [...history]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.storageService.store(\n\t\t\t\"scm.history\",\n\t\t\traw,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n\n\tgetHistory(providerLabel: string, rootUri: URI): HistoryNavigator2<string> {\n\t\tlet providerHistories = this.histories.get(providerLabel);\n\n\t\tif (!providerHistories) {\n\t\t\tproviderHistories = new ResourceMap();\n\t\t\tthis.histories.set(providerLabel, providerHistories);\n\t\t}\n\n\t\tlet history = providerHistories.get(rootUri);\n\n\t\tif (!history) {\n\t\t\thistory = new HistoryNavigator2([\"\"], 100);\n\t\t\tproviderHistories.set(rootUri, history);\n\t\t}\n\n\t\treturn history;\n\t}\n\n\t// Migrates from Application scope storage to Workspace scope.\n\t// TODO@joaomoreno: Change from January 2024 onwards such that the only code is to remove all `scm/input:` storage keys\n\tprivate migrateStorage(): boolean {\n\t\tlet didSomethingChange = false;\n\t\tconst machineKeys = Iterable.filter(\n\t\t\tthis.storageService.keys(\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t),\n\t\t\t(key) => key.startsWith(\"scm/input:\"),\n\t\t);\n\n\t\tfor (const key of machineKeys) {\n\t\t\ttry {\n\t\t\t\tconst legacyHistory = JSON.parse(\n\t\t\t\t\tthis.storageService.get(key, StorageScope.APPLICATION, \"\"),\n\t\t\t\t);\n\t\t\t\tconst match = /^scm\\/input:([^:]+):(.+)$/.exec(key);\n\n\t\t\t\tif (\n\t\t\t\t\t!match ||\n\t\t\t\t\t!Array.isArray(legacyHistory?.history) ||\n\t\t\t\t\t!Number.isInteger(legacyHistory?.timestamp)\n\t\t\t\t) {\n\t\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst [, providerLabel, rootPath] = match;\n\t\t\t\tconst rootUri = URI.file(rootPath);\n\n\t\t\t\tif (this.workspaceContextService.getWorkspaceFolder(rootUri)) {\n\t\t\t\t\tconst history = this.getHistory(providerLabel, rootUri);\n\n\t\t\t\t\tfor (const entry of Iterable.reverse(\n\t\t\t\t\t\tlegacyHistory.history as string[],\n\t\t\t\t\t)) {\n\t\t\t\t\t\thistory.prepend(entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tdidSomethingChange = true;\n\t\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t}\n\t\t}\n\n\t\treturn didSomethingChange;\n\t}\n\n\tdispose() {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport class SCMService implements ISCMService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\t_repositories = new Map<string, ISCMRepository>(); // used in tests\n\tget repositories(): Iterable<ISCMRepository> {\n\t\treturn this._repositories.values();\n\t}\n\tget repositoryCount(): number {\n\t\treturn this._repositories.size;\n\t}\n\n\tprivate inputHistory: SCMInputHistory;\n\tprivate providerCount: IContextKey<number>;\n\n\tprivate readonly _onDidAddProvider = new Emitter<ISCMRepository>();\n\treadonly onDidAddRepository: Event<ISCMRepository> =\n\t\tthis._onDidAddProvider.event;\n\n\tprivate readonly _onDidRemoveProvider = new Emitter<ISCMRepository>();\n\treadonly onDidRemoveRepository: Event<ISCMRepository> =\n\t\tthis._onDidRemoveProvider.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspaceContextService\n\t\tworkspaceContextService: IWorkspaceContextService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tthis.inputHistory = new SCMInputHistory(\n\t\t\tstorageService,\n\t\t\tworkspaceContextService,\n\t\t);\n\t\tthis.providerCount = contextKeyService.createKey(\n\t\t\t\"scm.providerCount\",\n\t\t\t0,\n\t\t);\n\t}\n\n\tregisterSCMProvider(provider: ISCMProvider): ISCMRepository {\n\t\tthis.logService.trace(\"SCMService#registerSCMProvider\");\n\n\t\tif (this._repositories.has(provider.id)) {\n\t\t\tthrow new Error(`SCM Provider ${provider.id} already exists.`);\n\t\t}\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tthis._repositories.delete(provider.id);\n\t\t\tthis._onDidRemoveProvider.fire(repository);\n\t\t\tthis.providerCount.set(this._repositories.size);\n\t\t});\n\n\t\tconst repository = new SCMRepository(\n\t\t\tprovider.id,\n\t\t\tprovider,\n\t\t\tdisposable,\n\t\t\tthis.inputHistory,\n\t\t);\n\t\tthis._repositories.set(provider.id, repository);\n\t\tthis._onDidAddProvider.fire(repository);\n\n\t\tthis.providerCount.set(this._repositories.size);\n\t\treturn repository;\n\t}\n\n\tgetRepository(id: string): ISCMRepository | undefined;\n\tgetRepository(resource: URI): ISCMRepository | undefined;\n\tgetRepository(idOrResource: string | URI): ISCMRepository | undefined {\n\t\tif (typeof idOrResource === \"string\") {\n\t\t\treturn this._repositories.get(idOrResource);\n\t\t}\n\n\t\tif (\n\t\t\tidOrResource.scheme !== Schemas.file &&\n\t\t\tidOrResource.scheme !== Schemas.vscodeRemote\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet bestRepository: ISCMRepository | undefined;\n\t\tlet bestMatchLength = Number.POSITIVE_INFINITY;\n\n\t\tfor (const repository of this.repositories) {\n\t\t\tconst root = repository.provider.rootUri;\n\n\t\t\tif (!root) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst path = this.uriIdentityService.extUri.relativePath(\n\t\t\t\troot,\n\t\t\t\tidOrResource,\n\t\t\t);\n\n\t\t\tif (path && !/^\\.\\./.test(path) && path.length < bestMatchLength) {\n\t\t\t\tbestRepository = repository;\n\t\t\t\tbestMatchLength = path.length;\n\t\t\t}\n\t\t}\n\n\t\treturn bestRepository;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
