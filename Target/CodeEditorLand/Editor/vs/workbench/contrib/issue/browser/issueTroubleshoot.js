var x=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var f=(c,r,e,t)=>{for(var o=t>1?void 0:t?E(r,e):r,u=c.length-1,l;u>=0;u--)(l=c[u])&&(o=(t?l(r,e,o):l(o))||o);return t&&o&&x(r,e,o),o},s=(c,r)=>(e,t)=>r(e,t,c);import{Disposable as v,DisposableStore as T}from"../../../../base/common/lifecycle.js";import{URI as R}from"../../../../base/common/uri.js";import{localize as i,localize2 as S}from"../../../../nls.js";import{Categories as I}from"../../../../platform/action/common/actionCommonCategories.js";import{Action2 as g,registerAction2 as b}from"../../../../platform/actions/common/actions.js";import{ContextKeyExpr as D,IContextKeyService as C,RawContextKey as k}from"../../../../platform/contextkey/common/contextkey.js";import{IsWebContext as A}from"../../../../platform/contextkey/common/contextkeys.js";import{IDialogService as N}from"../../../../platform/dialogs/common/dialogs.js";import{IExtensionManagementService as B}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionType as y}from"../../../../platform/extensions/common/extensions.js";import{InstantiationType as W,registerSingleton as O}from"../../../../platform/instantiation/common/extensions.js";import{createDecorator as H}from"../../../../platform/instantiation/common/instantiation.js";import{INotificationService as K,NotificationPriority as L,Severity as P}from"../../../../platform/notification/common/notification.js";import{IOpenerService as M}from"../../../../platform/opener/common/opener.js";import{IProductService as U}from"../../../../platform/product/common/productService.js";import{Registry as F}from"../../../../platform/registry/common/platform.js";import{IStorageService as w,StorageScope as p,StorageTarget as J}from"../../../../platform/storage/common/storage.js";import{IUserDataProfilesService as X}from"../../../../platform/userDataProfile/common/userDataProfile.js";import{RemoteNameContext as _}from"../../../common/contextkeys.js";import{Extensions as $}from"../../../common/contributions.js";import{IExtensionBisectService as q}from"../../../services/extensionManagement/browser/extensionBisect.js";import{IWorkbenchExtensionEnablementService as z}from"../../../services/extensionManagement/common/extensionManagement.js";import{IHostService as G}from"../../../services/host/browser/host.js";import{LifecyclePhase as V}from"../../../services/lifecycle/common/lifecycle.js";import{IUserDataProfileImportExportService as Y,IUserDataProfileManagementService as j,IUserDataProfileService as Q}from"../../../services/userDataProfile/common/userDataProfile.js";import{IWorkbenchIssueService as Z}from"../common/issue.js";const h=H("ITroubleshootIssueService");var ee=(e=>(e[e.EXTENSIONS=1]="EXTENSIONS",e[e.WORKBENCH=2]="WORKBENCH",e))(ee||{});class d{constructor(r,e){this.stage=r;this.profile=e}static fromJSON(r){if(r)try{const e=JSON.parse(r);if((e.stage===1||e.stage===2)&&typeof e.profile=="string")return new d(e.stage,e.profile)}catch{}}}let a=class extends v{constructor(e,t,o,u,l,m,te,ie,oe,se,re,ae,ne,ce){super();this.userDataProfileService=e;this.userDataProfilesService=t;this.userDataProfileManagementService=o;this.userDataProfileImportExportService=u;this.dialogService=l;this.extensionBisectService=m;this.notificationService=te;this.extensionManagementService=ie;this.extensionEnablementService=oe;this.issueService=se;this.productService=re;this.hostService=ae;this.storageService=ne;this.openerService=ce}_serviceBrand;static storageKey="issueTroubleshootState";notificationHandle;isActive(){return this.state!==void 0}async start(){if(this.isActive())throw new Error("invalid state");if(!(await this.dialogService.confirm({message:i("troubleshoot issue","Troubleshoot Issue"),detail:i("detail.start",`Issue troubleshooting is a process to help you identify the cause for an issue. The cause for an issue can be a misconfiguration, due to an extension, or be {0} itself.

During the process the window reloads repeatedly. Each time you must confirm if you are still seeing the issue.`,this.productService.nameLong),primaryButton:i({key:"msg",comment:["&& denotes a mnemonic"]},"&&Troubleshoot Issue"),custom:!0})).confirmed)return;const t=this.userDataProfileService.currentProfile;await this.userDataProfileImportExportService.createTroubleshootProfile(),this.state=new d(1,t.id),await this.resume()}async resume(){this.isActive()&&(this.state?.stage===1&&!this.extensionBisectService.isActive&&await this.reproduceIssueWithExtensionsDisabled(),this.state?.stage===2&&await this.reproduceIssueWithEmptyProfile(),await this.stop())}async stop(){if(!this.isActive())return;this.notificationHandle&&(this.notificationHandle.close(),this.notificationHandle=void 0),this.extensionBisectService.isActive&&await this.extensionBisectService.reset();const e=this.userDataProfilesService.profiles.find(t=>t.id===this.state?.profile)??this.userDataProfilesService.defaultProfile;this.state=void 0,await this.userDataProfileManagementService.switchProfile(e)}async reproduceIssueWithExtensionsDisabled(){if(!(await this.extensionManagementService.getInstalled(y.User)).length){this.state=new d(2,this.state.profile);return}const e=await this.askToReproduceIssue(i("profile.extensions.disabled","Issue troubleshooting is active and has temporarily disabled all installed extensions. Check if you can still reproduce the problem and proceed by selecting from these options."));if(e==="good"){const t=this.userDataProfilesService.profiles.find(o=>o.id===this.state.profile)??this.userDataProfilesService.defaultProfile;await this.reproduceIssueWithExtensionsBisect(t)}e==="bad"&&(this.state=new d(2,this.state.profile)),e==="stop"&&await this.stop()}async reproduceIssueWithEmptyProfile(){await this.userDataProfileManagementService.createAndEnterTransientProfile(),this.updateState(this.state);const e=await this.askToReproduceIssue(i("empty.profile","Issue troubleshooting is active and has temporarily reset your configurations to defaults. Check if you can still reproduce the problem and proceed by selecting from these options."));e==="stop"&&await this.stop(),e==="good"&&await this.askToReportIssue(i("issue is with configuration",'Issue troubleshooting has identified that the issue is caused by your configurations. Please report the issue by exporting your configurations using "Export Profile" command and share the file in the issue report.')),e==="bad"&&await this.askToReportIssue(i("issue is in core","Issue troubleshooting has identified that the issue is with {0}.",this.productService.nameLong))}async reproduceIssueWithExtensionsBisect(e){await this.userDataProfileManagementService.switchProfile(e);const t=(await this.extensionManagementService.getInstalled(y.User)).filter(o=>this.extensionEnablementService.isEnabled(o));await this.extensionBisectService.start(t),await this.hostService.reload()}askToReproduceIssue(e){return new Promise((t,o)=>{const u={label:i("I cannot reproduce","I Can't Reproduce"),run:()=>t("good")},l={label:i("This is Bad","I Can Reproduce"),run:()=>t("bad")},m={label:i("Stop","Stop"),run:()=>t("stop")};this.notificationHandle=this.notificationService.prompt(P.Info,e,[u,l,m],{sticky:!0,priority:L.URGENT})})}async askToReportIssue(e){let t=!1;if(this.productService.quality==="stable"){const o=await this.askToReproduceIssueWithInsiders();if(o==="good"){await this.dialogService.prompt({type:P.Info,message:i("troubleshoot issue","Troubleshoot Issue"),detail:i("use insiders","This likely means that the issue has been addressed already and will be available in an upcoming release. You can safely use {0} insiders until the new stable version is available.",this.productService.nameLong),custom:!0});return}if(o==="stop"){await this.stop();return}o==="bad"&&(t=!0)}await this.issueService.openReporter({issueBody:`> ${e} ${t?`It is confirmed that the issue exists in ${this.productService.nameLong} Insiders`:""}`})}async askToReproduceIssueWithInsiders(){return!(await this.dialogService.confirm({type:"info",message:i("troubleshoot issue","Troubleshoot Issue"),primaryButton:i("download insiders","Download {0} Insiders",this.productService.nameLong),cancelButton:i("report anyway","Report Issue Anyway"),detail:i("ask to download insiders","Please try to download and reproduce the issue in {0} insiders.",this.productService.nameLong),custom:{disableCloseAction:!0}})).confirmed||!await this.openerService.open(R.parse("https://aka.ms/vscode-insiders"))?void 0:(await this.dialogService.prompt({type:"info",message:i("troubleshoot issue","Troubleshoot Issue"),buttons:[{label:i("good","I can't reproduce"),run:()=>"good"},{label:i("bad","I can reproduce"),run:()=>"bad"}],cancelButton:{label:i("stop","Stop"),run:()=>"stop"},detail:i("ask to reproduce issue","Please try to reproduce the issue in {0} insiders and confirm if the issue exists there.",this.productService.nameLong),custom:{disableCloseAction:!0}})).result}_state;get state(){if(this._state===void 0){const e=this.storageService.get(a.storageKey,p.PROFILE);this._state=d.fromJSON(e)}return this._state||void 0}set state(e){this._state=e??null,this.updateState(e)}updateState(e){e?this.storageService.store(a.storageKey,JSON.stringify(e),p.PROFILE,J.MACHINE):this.storageService.remove(a.storageKey,p.PROFILE)}};a=f([s(0,Q),s(1,X),s(2,j),s(3,Y),s(4,N),s(5,q),s(6,K),s(7,B),s(8,z),s(9,Z),s(10,U),s(11,G),s(12,w),s(13,M)],a);let n=class extends v{constructor(e,t,o){super();this.contextKeyService=e;this.troubleshootIssueService=t;this.updateContext(),t.isActive()&&t.resume(),this._register(o.onDidChangeValue(p.PROFILE,a.storageKey,this._register(new T))(()=>{this.updateContext()}))}static ctxIsTroubleshootActive=new k("isIssueTroubleshootActive",!1);updateContext(){n.ctxIsTroubleshootActive.bindTo(this.contextKeyService).set(this.troubleshootIssueService.isActive())}};n=f([s(0,C),s(1,h),s(2,w)],n),F.as($.Workbench).registerWorkbenchContribution(n,V.Restored),b(class extends g{constructor(){super({id:"workbench.action.troubleshootIssue.start",title:S("troubleshootIssue","Troubleshoot Issue..."),category:I.Help,f1:!0,precondition:D.and(n.ctxIsTroubleshootActive.negate(),_.isEqualTo(""),A.negate())})}run(r){return r.get(h).start()}}),b(class extends g{constructor(){super({id:"workbench.action.troubleshootIssue.stop",title:S("title.stop","Stop Troubleshoot Issue"),category:I.Help,f1:!0,precondition:n.ctxIsTroubleshootActive})}async run(c){return c.get(h).stop()}}),O(h,a,W.Delayed);
