{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/issue/common/issue.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { UriComponents } from \"../../../../base/common/uri.js\";\nimport type { ISandboxConfiguration } from \"../../../../base/parts/sandbox/common/sandboxTypes.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { OldIssueReporterData } from \"../../../../platform/issue/common/issue.js\";\n\n// Since data sent through the service is serialized to JSON, functions will be lost, so Color objects\n// should not be sent as their 'toString' method will be stripped. Instead convert to strings before sending.\nexport interface WindowStyles {\n\tbackgroundColor?: string;\n\tcolor?: string;\n}\nexport interface WindowData {\n\tstyles: WindowStyles;\n\tzoomLevel: number;\n}\n\nexport enum IssueType {\n\tBug = 0,\n\tPerformanceIssue = 1,\n\tFeatureRequest = 2,\n}\n\nexport enum IssueSource {\n\tVSCode = \"vscode\",\n\tExtension = \"extension\",\n\tMarketplace = \"marketplace\",\n}\n\nexport interface IssueReporterStyles extends WindowStyles {\n\ttextLinkColor?: string;\n\ttextLinkActiveForeground?: string;\n\tinputBackground?: string;\n\tinputForeground?: string;\n\tinputBorder?: string;\n\tinputErrorBorder?: string;\n\tinputErrorBackground?: string;\n\tinputErrorForeground?: string;\n\tinputActiveBorder?: string;\n\tbuttonBackground?: string;\n\tbuttonForeground?: string;\n\tbuttonHoverBackground?: string;\n\tsliderBackgroundColor?: string;\n\tsliderHoverColor?: string;\n\tsliderActiveColor?: string;\n}\n\nexport interface IssueReporterExtensionData {\n\tname: string;\n\tpublisher: string | undefined;\n\tversion: string;\n\tid: string;\n\tisTheme: boolean;\n\tisBuiltin: boolean;\n\tdisplayName: string | undefined;\n\trepositoryUrl: string | undefined;\n\tbugsUrl: string | undefined;\n\textensionData?: string;\n\textensionTemplate?: string;\n\tdata?: string;\n\turi?: UriComponents;\n}\n\nexport interface IssueReporterData extends WindowData {\n\tstyles: IssueReporterStyles;\n\tenabledExtensions: IssueReporterExtensionData[];\n\tissueType?: IssueType;\n\tissueSource?: IssueSource;\n\textensionId?: string;\n\texperiments?: string;\n\trestrictedMode: boolean;\n\tisUnsupported: boolean;\n\tgithubAccessToken: string;\n\tissueTitle?: string;\n\tissueBody?: string;\n\tdata?: string;\n\turi?: UriComponents;\n}\n\nexport interface ISettingSearchResult {\n\textensionId: string;\n\tkey: string;\n\tscore: number;\n}\n\nexport interface ProcessExplorerStyles extends WindowStyles {\n\tlistHoverBackground?: string;\n\tlistHoverForeground?: string;\n\tlistFocusBackground?: string;\n\tlistFocusForeground?: string;\n\tlistFocusOutline?: string;\n\tlistActiveSelectionBackground?: string;\n\tlistActiveSelectionForeground?: string;\n\tlistHoverOutline?: string;\n\tscrollbarShadowColor?: string;\n\tscrollbarSliderBackgroundColor?: string;\n\tscrollbarSliderHoverBackgroundColor?: string;\n\tscrollbarSliderActiveBackgroundColor?: string;\n}\n\nexport interface ProcessExplorerData extends WindowData {\n\tpid: number;\n\tstyles: ProcessExplorerStyles;\n\tplatform: string;\n\tapplicationName: string;\n}\n\nexport interface IssueReporterWindowConfiguration\n\textends ISandboxConfiguration {\n\tdisableExtensions: boolean;\n\tdata: IssueReporterData | OldIssueReporterData;\n\tos: {\n\t\ttype: string;\n\t\tarch: string;\n\t\trelease: string;\n\t};\n}\n\nexport interface ProcessExplorerWindowConfiguration\n\textends ISandboxConfiguration {\n\tdata: ProcessExplorerData;\n}\n\nexport const IIssueFormService =\n\tcreateDecorator<IIssueFormService>(\"issueFormService\");\n\nexport interface IIssueFormService {\n\treadonly _serviceBrand: undefined;\n\n\t// Used by the issue reporter\n\topenReporter(data: IssueReporterData): Promise<void>;\n\treloadWithExtensionsDisabled(): Promise<void>;\n\tshowConfirmCloseDialog(): Promise<void>;\n\tshowClipboardDialog(): Promise<boolean>;\n\tsendReporterMenu(\n\t\textensionId: string,\n\t): Promise<IssueReporterData | undefined>;\n\tcloseReporter(): Promise<void>;\n}\n\nexport const IWorkbenchIssueService = createDecorator<IWorkbenchIssueService>(\n\t\"workbenchIssueService\",\n);\n\nexport interface IWorkbenchIssueService {\n\treadonly _serviceBrand: undefined;\n\topenReporter(dataOverrides?: Partial<IssueReporterData>): Promise<void>;\n}\n\nexport const IWorkbenchProcessService =\n\tcreateDecorator<IWorkbenchProcessService>(\"workbenchProcessService\");\n\nexport interface IWorkbenchProcessService {\n\treadonly _serviceBrand: undefined;\n\topenProcessExplorer(): Promise<void>;\n}\n"],
  "mappings": "AAOA,SAAS,uBAAuB;AAczB,IAAK,YAAL,kBAAKA,eAAL;AACN,EAAAA,sBAAA,SAAM,KAAN;AACA,EAAAA,sBAAA,sBAAmB,KAAnB;AACA,EAAAA,sBAAA,oBAAiB,KAAjB;AAHW,SAAAA;AAAA,GAAA;AAML,IAAK,cAAL,kBAAKC,iBAAL;AACN,EAAAA,aAAA,YAAS;AACT,EAAAA,aAAA,eAAY;AACZ,EAAAA,aAAA,iBAAc;AAHH,SAAAA;AAAA,GAAA;AAoGL,MAAM,oBACZ,gBAAmC,kBAAkB;AAgB/C,MAAM,yBAAyB;AAAA,EACrC;AACD;AAOO,MAAM,2BACZ,gBAA0C,yBAAyB;",
  "names": ["IssueType", "IssueSource"]
}
