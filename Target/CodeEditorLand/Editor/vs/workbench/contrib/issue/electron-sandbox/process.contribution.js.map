{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/issue/electron-sandbox/process.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tMenuRegistry,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { INativeEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IProcessMainService } from \"../../../../platform/issue/common/issue.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport { IWorkbenchProcessService } from \"../common/issue.js\";\nimport \"./processService.js\";\nimport \"./issueMainService.js\";\n\n//#region Commands\n\nclass OpenProcessExplorer extends Action2 {\n\tstatic readonly ID = \"workbench.action.openProcessExplorer\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenProcessExplorer.ID,\n\t\t\ttitle: localize2(\"openProcessExplorer\", \"Open Process Explorer\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst processService = accessor.get(IWorkbenchProcessService);\n\n\t\treturn processService.openProcessExplorer();\n\t}\n}\nregisterAction2(OpenProcessExplorer);\nMenuRegistry.appendMenuItem(MenuId.MenubarHelpMenu, {\n\tgroup: \"5_tools\",\n\tcommand: {\n\t\tid: OpenProcessExplorer.ID,\n\t\ttitle: localize(\n\t\t\t{\n\t\t\t\tkey: \"miOpenProcessExplorerer\",\n\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t},\n\t\t\t\"Open &&Process Explorer\",\n\t\t),\n\t},\n\torder: 2,\n});\n\nclass StopTracing extends Action2 {\n\tstatic readonly ID = \"workbench.action.stopTracing\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopTracing.ID,\n\t\t\ttitle: localize2(\"stopTracing\", \"Stop Tracing\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst processService = accessor.get(IProcessMainService);\n\t\tconst environmentService = accessor.get(INativeEnvironmentService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst progressService = accessor.get(IProgressService);\n\n\t\tif (!environmentService.args.trace) {\n\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"stopTracing.message\",\n\t\t\t\t\t\"Tracing requires to launch with a '--trace' argument\",\n\t\t\t\t),\n\t\t\t\tprimaryButton: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"stopTracing.button\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Relaunch and Enable Tracing\",\n\t\t\t\t),\n\t\t\t});\n\n\t\t\tif (confirmed) {\n\t\t\t\treturn nativeHostService.relaunch({ addArgs: [\"--trace\"] });\n\t\t\t}\n\t\t}\n\n\t\tawait progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Dialog,\n\t\t\t\ttitle: localize(\"stopTracing.title\", \"Creating trace file...\"),\n\t\t\t\tcancellable: false,\n\t\t\t\tdetail: localize(\n\t\t\t\t\t\"stopTracing.detail\",\n\t\t\t\t\t\"This can take up to one minute to complete.\",\n\t\t\t\t),\n\t\t\t},\n\t\t\t() => processService.stopTracing(),\n\t\t);\n\t}\n}\nregisterAction2(StopTracing);\n\nCommandsRegistry.registerCommand(\"_issues.getSystemStatus\", (accessor) => {\n\treturn accessor.get(IProcessMainService).getSystemStatus();\n});\n//#endregion\n"],
  "mappings": ";;AAKA,SAAS,UAAU,iBAAiB;AACpC,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,iCAAiC;AAE1C,SAAS,2BAA2B;AACpC,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,gCAAgC;AACzC,OAAO;AACP,OAAO;AAIP,MAAM,4BAA4B,QAAQ;AAAA,EA7B1C,OA6B0C;AAAA;AAAA;AAAA,EACzC,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM;AAAA,MACL,IAAI,oBAAoB;AAAA,MACxB,OAAO,UAAU,uBAAuB,uBAAuB;AAAA,MAC/D,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAe,IAAI,UAA2C;AAC7D,UAAM,iBAAiB,SAAS,IAAI,wBAAwB;AAE5D,WAAO,eAAe,oBAAoB;AAAA,EAC3C;AACD;AACA,gBAAgB,mBAAmB;AACnC,aAAa,eAAe,OAAO,iBAAiB;AAAA,EACnD,OAAO;AAAA,EACP,SAAS;AAAA,IACR,IAAI,oBAAoB;AAAA,IACxB,OAAO;AAAA,MACN;AAAA,QACC,KAAK;AAAA,QACL,SAAS,CAAC,uBAAuB;AAAA,MAClC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EACA,OAAO;AACR,CAAC;AAED,MAAM,oBAAoB,QAAQ;AAAA,EA/DlC,OA+DkC;AAAA;AAAA;AAAA,EACjC,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM;AAAA,MACL,IAAI,YAAY;AAAA,MAChB,OAAO,UAAU,eAAe,cAAc;AAAA,MAC9C,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAe,IAAI,UAA2C;AAC7D,UAAM,iBAAiB,SAAS,IAAI,mBAAmB;AACvD,UAAM,qBAAqB,SAAS,IAAI,yBAAyB;AACjE,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AAErD,QAAI,CAAC,mBAAmB,KAAK,OAAO;AACnC,YAAM,EAAE,UAAU,IAAI,MAAM,cAAc,QAAQ;AAAA,QACjD,SAAS;AAAA,UACR;AAAA,UACA;AAAA,QACD;AAAA,QACA,eAAe;AAAA,UACd;AAAA,YACC,KAAK;AAAA,YACL,SAAS,CAAC,uBAAuB;AAAA,UAClC;AAAA,UACA;AAAA,QACD;AAAA,MACD,CAAC;AAED,UAAI,WAAW;AACd,eAAO,kBAAkB,SAAS,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC;AAAA,MAC3D;AAAA,IACD;AAEA,UAAM,gBAAgB;AAAA,MACrB;AAAA,QACC,UAAU,iBAAiB;AAAA,QAC3B,OAAO,SAAS,qBAAqB,wBAAwB;AAAA,QAC7D,aAAa;AAAA,QACb,QAAQ;AAAA,UACP;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,MAAM,eAAe,YAAY;AAAA,IAClC;AAAA,EACD;AACD;AACA,gBAAgB,WAAW;AAE3B,iBAAiB,gBAAgB,2BAA2B,CAAC,aAAa;AACzE,SAAO,SAAS,IAAI,mBAAmB,EAAE,gBAAgB;AAC1D,CAAC;",
  "names": []
}
