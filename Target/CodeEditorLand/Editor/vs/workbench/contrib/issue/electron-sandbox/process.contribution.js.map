{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/issue/electron-sandbox/process.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../nls.js';\nimport { MenuRegistry, MenuId, registerAction2, Action2 } from '../../../../platform/actions/common/actions.js';\nimport { IWorkbenchProcessService } from '../common/issue.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INativeEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IProcessMainService } from '../../../../platform/issue/common/issue.js';\nimport './processService.js';\nimport './issueMainService.js';\n\n\n//#region Commands\n\nclass OpenProcessExplorer extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.openProcessExplorer';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenProcessExplorer.ID,\n\t\t\ttitle: localize2('openProcessExplorer', 'Open Process Explorer'),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst processService = accessor.get(IWorkbenchProcessService);\n\n\t\treturn processService.openProcessExplorer();\n\t}\n}\nregisterAction2(OpenProcessExplorer);\nMenuRegistry.appendMenuItem(MenuId.MenubarHelpMenu, {\n\tgroup: '5_tools',\n\tcommand: {\n\t\tid: OpenProcessExplorer.ID,\n\t\ttitle: localize({ key: 'miOpenProcessExplorerer', comment: ['&& denotes a mnemonic'] }, \"Open &&Process Explorer\")\n\t},\n\torder: 2\n});\n\nclass StopTracing extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.stopTracing';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopTracing.ID,\n\t\t\ttitle: localize2('stopTracing', 'Stop Tracing'),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst processService = accessor.get(IProcessMainService);\n\t\tconst environmentService = accessor.get(INativeEnvironmentService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst progressService = accessor.get(IProgressService);\n\n\t\tif (!environmentService.args.trace) {\n\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\tmessage: localize('stopTracing.message', \"Tracing requires to launch with a '--trace' argument\"),\n\t\t\t\tprimaryButton: localize({ key: 'stopTracing.button', comment: ['&& denotes a mnemonic'] }, \"&&Relaunch and Enable Tracing\"),\n\t\t\t});\n\n\t\t\tif (confirmed) {\n\t\t\t\treturn nativeHostService.relaunch({ addArgs: ['--trace'] });\n\t\t\t}\n\t\t}\n\n\t\tawait progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Dialog,\n\t\t\ttitle: localize('stopTracing.title', \"Creating trace file...\"),\n\t\t\tcancellable: false,\n\t\t\tdetail: localize('stopTracing.detail', \"This can take up to one minute to complete.\")\n\t\t}, () => processService.stopTracing());\n\t}\n}\nregisterAction2(StopTracing);\n\nCommandsRegistry.registerCommand('_issues.getSystemStatus', (accessor) => {\n\treturn accessor.get(IProcessMainService).getSystemStatus();\n});\n//#endregion\n"],
  "mappings": ";;AAKA,SAAS,UAAU,iBAAiB;AACpC,SAAS,cAAc,QAAQ,iBAAiB,eAAe;AAC/D,SAAS,gCAAgC;AACzC,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC,SAAS,iCAAiC;AAC1C,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B;AACnC,SAAS,kBAAkB,wBAAwB;AACnD,SAAS,2BAA2B;AACpC,OAAO;AACP,OAAO;AAKP,MAAM,4BAA4B,QAAQ;AAAA,EAtB1C,OAsB0C;AAAA;AAAA;AAAA,EAEzC,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM;AAAA,MACL,IAAI,oBAAoB;AAAA,MACxB,OAAO,UAAU,uBAAuB,uBAAuB;AAAA,MAC/D,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAe,IAAI,UAA2C;AAC7D,UAAM,iBAAiB,SAAS,IAAI,wBAAwB;AAE5D,WAAO,eAAe,oBAAoB;AAAA,EAC3C;AACD;AACA,gBAAgB,mBAAmB;AACnC,aAAa,eAAe,OAAO,iBAAiB;AAAA,EACnD,OAAO;AAAA,EACP,SAAS;AAAA,IACR,IAAI,oBAAoB;AAAA,IACxB,OAAO,SAAS,EAAE,KAAK,2BAA2B,SAAS,CAAC,uBAAuB,EAAE,GAAG,yBAAyB;AAAA,EAClH;AAAA,EACA,OAAO;AACR,CAAC;AAED,MAAM,oBAAoB,QAAQ;AAAA,EAnDlC,OAmDkC;AAAA;AAAA;AAAA,EAEjC,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM;AAAA,MACL,IAAI,YAAY;AAAA,MAChB,OAAO,UAAU,eAAe,cAAc;AAAA,MAC9C,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAe,IAAI,UAA2C;AAC7D,UAAM,iBAAiB,SAAS,IAAI,mBAAmB;AACvD,UAAM,qBAAqB,SAAS,IAAI,yBAAyB;AACjE,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AAErD,QAAI,CAAC,mBAAmB,KAAK,OAAO;AACnC,YAAM,EAAE,UAAU,IAAI,MAAM,cAAc,QAAQ;AAAA,QACjD,SAAS,SAAS,uBAAuB,sDAAsD;AAAA,QAC/F,eAAe,SAAS,EAAE,KAAK,sBAAsB,SAAS,CAAC,uBAAuB,EAAE,GAAG,+BAA+B;AAAA,MAC3H,CAAC;AAED,UAAI,WAAW;AACd,eAAO,kBAAkB,SAAS,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC;AAAA,MAC3D;AAAA,IACD;AAEA,UAAM,gBAAgB,aAAa;AAAA,MAClC,UAAU,iBAAiB;AAAA,MAC3B,OAAO,SAAS,qBAAqB,wBAAwB;AAAA,MAC7D,aAAa;AAAA,MACb,QAAQ,SAAS,sBAAsB,6CAA6C;AAAA,IACrF,GAAG,MAAM,eAAe,YAAY,CAAC;AAAA,EACtC;AACD;AACA,gBAAgB,WAAW;AAE3B,iBAAiB,gBAAgB,2BAA2B,CAAC,aAAa;AACzE,SAAO,SAAS,IAAI,mBAAmB,EAAE,gBAAgB;AAC1D,CAAC;",
  "names": []
}
