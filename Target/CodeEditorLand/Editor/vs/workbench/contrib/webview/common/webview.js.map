{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/webview/common/webview.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\n\nexport interface WebviewRemoteInfo {\n\treadonly isRemote: boolean;\n\treadonly authority: string | undefined;\n}\n\n/**\n * Root from which resources in webviews are loaded.\n *\n * This is hardcoded because we never expect to actually hit it. Instead these requests\n * should always go to a service worker.\n */\nexport const webviewResourceBaseHost = 'vscode-cdn.net';\n\nexport const webviewRootResourceAuthority = `vscode-resource.${webviewResourceBaseHost}`;\n\nexport const webviewGenericCspSource = `'self' https://*.${webviewResourceBaseHost}`;\n\n/**\n * Construct a uri that can load resources inside a webview\n *\n * We encode the resource component of the uri so that on the main thread\n * we know where to load the resource from (remote or truly local):\n *\n * ```txt\n * ${scheme}+${resource-authority}.vscode-resource.vscode-cdn.net/${path}\n * ```\n *\n * @param resource Uri of the resource to load.\n * @param remoteInfo Optional information about the remote that specifies where `resource` should be resolved from.\n */\nexport function asWebviewUri(resource: URI, remoteInfo?: WebviewRemoteInfo): URI {\n\tif (resource.scheme === Schemas.http || resource.scheme === Schemas.https) {\n\t\treturn resource;\n\t}\n\n\tif (remoteInfo && remoteInfo.authority && remoteInfo.isRemote && resource.scheme === Schemas.file) {\n\t\tresource = URI.from({\n\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\tauthority: remoteInfo.authority,\n\t\t\tpath: resource.path,\n\t\t});\n\t}\n\n\treturn URI.from({\n\t\tscheme: Schemas.https,\n\t\tauthority: `${resource.scheme}+${encodeAuthority(resource.authority)}.${webviewRootResourceAuthority}`,\n\t\tpath: resource.path,\n\t\tfragment: resource.fragment,\n\t\tquery: resource.query,\n\t});\n}\n\nfunction encodeAuthority(authority: string): string {\n\treturn authority.replace(/./g, char => {\n\t\tconst code = char.charCodeAt(0);\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t) {\n\t\t\treturn char;\n\t\t}\n\t\treturn '-' + code.toString(16).padStart(4, '0');\n\t});\n}\n\nexport function decodeAuthority(authority: string) {\n\treturn authority.replace(/-([0-9a-f]{4})/g, (_, code) => String.fromCharCode(parseInt(code, 16)));\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,WAAW;AAab,MAAM,0BAA0B;AAEhC,MAAM,+BAA+B,mBAAmB,uBAAuB;AAE/E,MAAM,0BAA0B,oBAAoB,uBAAuB;AAe3E,SAAS,aAAa,UAAe,YAAqC;AAChF,MAAI,SAAS,WAAW,QAAQ,QAAQ,SAAS,WAAW,QAAQ,OAAO;AAC1E,WAAO;AAAA,EACR;AAEA,MAAI,cAAc,WAAW,aAAa,WAAW,YAAY,SAAS,WAAW,QAAQ,MAAM;AAClG,eAAW,IAAI,KAAK;AAAA,MACnB,QAAQ,QAAQ;AAAA,MAChB,WAAW,WAAW;AAAA,MACtB,MAAM,SAAS;AAAA,IAChB,CAAC;AAAA,EACF;AAEA,SAAO,IAAI,KAAK;AAAA,IACf,QAAQ,QAAQ;AAAA,IAChB,WAAW,GAAG,SAAS,MAAM,IAAI,gBAAgB,SAAS,SAAS,CAAC,IAAI,4BAA4B;AAAA,IACpG,MAAM,SAAS;AAAA,IACf,UAAU,SAAS;AAAA,IACnB,OAAO,SAAS;AAAA,EACjB,CAAC;AACF;AApBgB;AAsBhB,SAAS,gBAAgB,WAA2B;AACnD,SAAO,UAAU,QAAQ,MAAM,UAAQ;AACtC,UAAM,OAAO,KAAK,WAAW,CAAC;AAC9B,QACE,QAAQ,SAAS,KAAK,QAAQ,SAAS,KACpC,QAAQ,SAAS,KAAK,QAAQ,SAAS,KACvC,QAAQ,SAAS,UAAU,QAAQ,SAAS,QAC/C;AACD,aAAO;AAAA,IACR;AACA,WAAO,MAAM,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAAA,EAC/C,CAAC;AACF;AAZS;AAcF,SAAS,gBAAgB,WAAmB;AAClD,SAAO,UAAU,QAAQ,mBAAmB,CAAC,GAAG,SAAS,OAAO,aAAa,SAAS,MAAM,EAAE,CAAC,CAAC;AACjG;AAFgB;",
  "names": []
}
