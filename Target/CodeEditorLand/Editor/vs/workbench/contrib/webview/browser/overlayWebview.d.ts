import { Dimension } from "vs/base/browser/dom";
import { CodeWindow } from "vs/base/browser/window";
import { Disposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IOverlayWebview, IWebviewService, WebviewContentOptions, WebviewExtensionDescription, WebviewInitInfo, WebviewOptions } from "vs/workbench/contrib/webview/browser/webview";
import { IWorkbenchLayoutService } from "vs/workbench/services/layout/browser/layoutService";
/**
 * Webview that is absolutely positioned over another element and that can creates and destroys an underlying webview as needed.
 */
export declare class OverlayWebview extends Disposable implements IOverlayWebview {
    private readonly _layoutService;
    private readonly _webviewService;
    private readonly _baseContextKeyService;
    private _isFirstLoad;
    private readonly _firstLoadPendingMessages;
    private readonly _webview;
    private readonly _webviewEvents;
    private _html;
    private _title;
    private _initialScrollProgress;
    private _state;
    private _extension;
    private _contentOptions;
    private _options;
    private _owner;
    private _windowId;
    private get window();
    private readonly _scopedContextKeyService;
    private _findWidgetVisible;
    private _findWidgetEnabled;
    private _shouldShowFindWidgetOnRestore;
    readonly providedViewType?: string;
    origin: string;
    private _container;
    constructor(initInfo: WebviewInitInfo, _layoutService: IWorkbenchLayoutService, _webviewService: IWebviewService, _baseContextKeyService: IContextKeyService);
    get isFocused(): boolean;
    private _isDisposed;
    private readonly _onDidDispose;
    onDidDispose: any;
    dispose(): void;
    get container(): HTMLElement;
    claim(owner: any, targetWindow: CodeWindow, scopedContextKeyService: IContextKeyService | undefined): void;
    release(owner: any): void;
    layoutWebviewOverElement(element: HTMLElement, dimension?: Dimension, clippingContainer?: HTMLElement): void;
    private doLayoutWebviewOverElement;
    private _show;
    setHtml(html: string): void;
    setTitle(title: string): void;
    get initialScrollProgress(): number;
    set initialScrollProgress(value: number);
    get state(): string | undefined;
    set state(value: string | undefined);
    get extension(): WebviewExtensionDescription | undefined;
    set extension(value: WebviewExtensionDescription | undefined);
    get options(): WebviewOptions;
    set options(value: WebviewOptions);
    get contentOptions(): WebviewContentOptions;
    set contentOptions(value: WebviewContentOptions);
    set localResourcesRoot(resources: URI[]);
    private readonly _onDidFocus;
    readonly onDidFocus: any;
    private readonly _onDidBlur;
    readonly onDidBlur: any;
    private readonly _onDidClickLink;
    readonly onDidClickLink: any;
    private readonly _onDidReload;
    readonly onDidReload: any;
    private readonly _onDidScroll;
    readonly onDidScroll: any;
    private readonly _onDidUpdateState;
    readonly onDidUpdateState: any;
    private readonly _onMessage;
    readonly onMessage: any;
    private readonly _onMissingCsp;
    readonly onMissingCsp: any;
    private readonly _onDidWheel;
    readonly onDidWheel: any;
    private readonly _onFatalError;
    onFatalError: any;
    postMessage(message: any, transfer?: readonly ArrayBuffer[]): Promise<boolean>;
    focus(): void;
    reload(): void;
    selectAll(): void;
    copy(): void;
    paste(): void;
    cut(): void;
    undo(): void;
    redo(): void;
    showFind(animated?: boolean): void;
    hideFind(animated?: boolean): void;
    runFindAction(previous: boolean): void;
    private _withWebview;
    windowDidDragStart(): void;
    windowDidDragEnd(): void;
    setContextKeyService(contextKeyService: IContextKeyService): void;
}
