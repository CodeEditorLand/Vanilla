{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/webview/browser/webviewWindowDragMonitor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from '../../../../base/browser/dom.js';\nimport { CodeWindow } from '../../../../base/browser/window.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IWebview } from './webview.js';\n\n/**\n * Allows webviews to monitor when an element in the VS Code editor is being dragged/dropped.\n *\n * This is required since webview end up eating the drag event. VS Code needs to see this\n * event so it can handle editor element drag drop.\n */\nexport class WebviewWindowDragMonitor extends Disposable {\n\tconstructor(targetWindow: CodeWindow, getWebview: () => IWebview | undefined) {\n\t\tsuper();\n\n\t\tconst onDragStart = () => {\n\t\t\tgetWebview()?.windowDidDragStart();\n\t\t};\n\n\t\tconst onDragEnd = () => {\n\t\t\tgetWebview()?.windowDidDragEnd();\n\t\t};\n\n\t\tthis._register(DOM.addDisposableListener(targetWindow, DOM.EventType.DRAG_START, () => {\n\t\t\tonDragStart();\n\t\t}));\n\n\t\tthis._register(DOM.addDisposableListener(targetWindow, DOM.EventType.DRAG_END, onDragEnd));\n\n\t\tthis._register(DOM.addDisposableListener(targetWindow, DOM.EventType.MOUSE_MOVE, currentEvent => {\n\t\t\tif (currentEvent.buttons === 0) {\n\t\t\t\tonDragEnd();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(DOM.addDisposableListener(targetWindow, DOM.EventType.DRAG, (event) => {\n\t\t\tif (event.shiftKey) {\n\t\t\t\tonDragEnd();\n\t\t\t} else {\n\t\t\t\tonDragStart();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(DOM.addDisposableListener(targetWindow, DOM.EventType.DRAG_OVER, (event) => {\n\t\t\tif (event.shiftKey) {\n\t\t\t\tonDragEnd();\n\t\t\t} else {\n\t\t\t\tonDragStart();\n\t\t\t}\n\t\t}));\n\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,kBAAkB;AAC3B,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AAQlB,MAAM,iCAAiC,WAAW;AAAA,EAhBzD,OAgByD;AAAA;AAAA;AAAA,EACxD,YAAY,cAA0B,YAAwC;AAC7E,UAAM;AAEN,UAAM,cAAc,6BAAM;AACzB,iBAAW,GAAG,mBAAmB;AAAA,IAClC,GAFoB;AAIpB,UAAM,YAAY,6BAAM;AACvB,iBAAW,GAAG,iBAAiB;AAAA,IAChC,GAFkB;AAIlB,SAAK,UAAU,IAAI,sBAAsB,cAAc,IAAI,UAAU,YAAY,MAAM;AACtF,kBAAY;AAAA,IACb,CAAC,CAAC;AAEF,SAAK,UAAU,IAAI,sBAAsB,cAAc,IAAI,UAAU,UAAU,SAAS,CAAC;AAEzF,SAAK,UAAU,IAAI,sBAAsB,cAAc,IAAI,UAAU,YAAY,kBAAgB;AAChG,UAAI,aAAa,YAAY,GAAG;AAC/B,kBAAU;AAAA,MACX;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,UAAU,IAAI,sBAAsB,cAAc,IAAI,UAAU,MAAM,CAAC,UAAU;AACrF,UAAI,MAAM,UAAU;AACnB,kBAAU;AAAA,MACX,OAAO;AACN,oBAAY;AAAA,MACb;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,UAAU,IAAI,sBAAsB,cAAc,IAAI,UAAU,WAAW,CAAC,UAAU;AAC1F,UAAI,MAAM,UAAU;AACnB,kBAAU;AAAA,MACX,OAAO;AACN,oBAAY;AAAA,MACb;AAAA,IACD,CAAC,CAAC;AAAA,EAEH;AACD;",
  "names": []
}
