{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/webview/browser/webviewWindowDragMonitor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from \"../../../../base/browser/dom.js\";\nimport type { CodeWindow } from \"../../../../base/browser/window.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport type { IWebview } from \"./webview.js\";\n\n/**\n * Allows webviews to monitor when an element in the VS Code editor is being dragged/dropped.\n *\n * This is required since webview end up eating the drag event. VS Code needs to see this\n * event so it can handle editor element drag drop.\n */\nexport class WebviewWindowDragMonitor extends Disposable {\n\tconstructor(\n\t\ttargetWindow: CodeWindow,\n\t\tgetWebview: () => IWebview | undefined,\n\t) {\n\t\tsuper();\n\n\t\tconst onDragStart = () => {\n\t\t\tgetWebview()?.windowDidDragStart();\n\t\t};\n\n\t\tconst onDragEnd = () => {\n\t\t\tgetWebview()?.windowDidDragEnd();\n\t\t};\n\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\ttargetWindow,\n\t\t\t\tDOM.EventType.DRAG_START,\n\t\t\t\t() => {\n\t\t\t\t\tonDragStart();\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\ttargetWindow,\n\t\t\t\tDOM.EventType.DRAG_END,\n\t\t\t\tonDragEnd,\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\ttargetWindow,\n\t\t\t\tDOM.EventType.MOUSE_MOVE,\n\t\t\t\t(currentEvent) => {\n\t\t\t\t\tif (currentEvent.buttons === 0) {\n\t\t\t\t\t\tonDragEnd();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\ttargetWindow,\n\t\t\t\tDOM.EventType.DRAG,\n\t\t\t\t(event) => {\n\t\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\t\tonDragEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tonDragStart();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\ttargetWindow,\n\t\t\t\tDOM.EventType.DRAG_OVER,\n\t\t\t\t(event) => {\n\t\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\t\tonDragEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tonDragStart();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AAErB,SAAS,kBAAkB;AASpB,MAAM,iCAAiC,WAAW;AAAA,EAhBzD,OAgByD;AAAA;AAAA;AAAA,EACxD,YACC,cACA,YACC;AACD,UAAM;AAEN,UAAM,cAAc,6BAAM;AACzB,iBAAW,GAAG,mBAAmB;AAAA,IAClC,GAFoB;AAIpB,UAAM,YAAY,6BAAM;AACvB,iBAAW,GAAG,iBAAiB;AAAA,IAChC,GAFkB;AAIlB,SAAK;AAAA,MACJ,IAAI;AAAA,QACH;AAAA,QACA,IAAI,UAAU;AAAA,QACd,MAAM;AACL,sBAAY;AAAA,QACb;AAAA,MACD;AAAA,IACD;AAEA,SAAK;AAAA,MACJ,IAAI;AAAA,QACH;AAAA,QACA,IAAI,UAAU;AAAA,QACd;AAAA,MACD;AAAA,IACD;AAEA,SAAK;AAAA,MACJ,IAAI;AAAA,QACH;AAAA,QACA,IAAI,UAAU;AAAA,QACd,CAAC,iBAAiB;AACjB,cAAI,aAAa,YAAY,GAAG;AAC/B,sBAAU;AAAA,UACX;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,SAAK;AAAA,MACJ,IAAI;AAAA,QACH;AAAA,QACA,IAAI,UAAU;AAAA,QACd,CAAC,UAAU;AACV,cAAI,MAAM,UAAU;AACnB,sBAAU;AAAA,UACX,OAAO;AACN,wBAAY;AAAA,UACb;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,SAAK;AAAA,MACJ,IAAI;AAAA,QACH;AAAA,QACA,IAAI,UAAU;AAAA,QACd,CAAC,UAAU;AACV,cAAI,MAAM,UAAU;AACnB,sBAAU;AAAA,UACX,OAAO;AACN,wBAAY;AAAA,UACb;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
