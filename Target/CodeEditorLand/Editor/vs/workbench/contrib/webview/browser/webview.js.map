{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/webview/browser/webview.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Dimension } from '../../../../base/browser/dom.js';\nimport { IMouseWheelEvent } from '../../../../base/browser/mouseEvent.js';\nimport { CodeWindow } from '../../../../base/browser/window.js';\nimport { equals } from '../../../../base/common/arrays.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IWebviewPortMapping } from '../../../../platform/webview/common/webviewPortMapping.js';\nimport { Memento, MementoObject } from '../../../common/memento.js';\n\n/**\n * Set when the find widget in a webview in a webview is visible.\n */\nexport const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE = new RawContextKey<boolean>('webviewFindWidgetVisible', false);\n\n/**\n * Set when the find widget in a webview is focused.\n */\nexport const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED = new RawContextKey<boolean>('webviewFindWidgetFocused', false);\n\n/**\n * Set when the find widget in a webview is enabled in a webview\n */\nexport const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED = new RawContextKey<boolean>('webviewFindWidgetEnabled', false);\n\nexport const IWebviewService = createDecorator<IWebviewService>('webviewService');\n\nexport interface IWebviewService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * The currently focused webview.\n\t */\n\treadonly activeWebview: IWebview | undefined;\n\n\t/**\n\t * All webviews.\n\t */\n\treadonly webviews: Iterable<IWebview>;\n\n\t/**\n\t * Fired when the currently focused webview changes.\n\t */\n\treadonly onDidChangeActiveWebview: Event<IWebview | undefined>;\n\n\t/**\n\t * Create a basic webview dom element.\n\t */\n\tcreateWebviewElement(initInfo: WebviewInitInfo): IWebviewElement;\n\n\t/**\n\t * Create a lazily created webview element that is overlaid on top of another element.\n\t *\n\t * Allows us to avoid re-parenting the webview (which destroys its contents) when\n\t * moving webview around the workbench.\n\t */\n\tcreateWebviewOverlay(initInfo: WebviewInitInfo): IOverlayWebview;\n}\n\nexport interface WebviewInitInfo {\n\treadonly providedViewType?: string;\n\treadonly origin?: string;\n\n\treadonly title: string | undefined;\n\n\treadonly options: WebviewOptions;\n\treadonly contentOptions: WebviewContentOptions;\n\n\treadonly extension: WebviewExtensionDescription | undefined;\n}\n\nexport const enum WebviewContentPurpose {\n\tNotebookRenderer = 'notebookRenderer',\n\tCustomEditor = 'customEditor',\n\tWebviewView = 'webviewView',\n}\n\nexport type WebviewStyles = { readonly [key: string]: string | number };\n\nexport interface WebviewOptions {\n\t/**\n\t * The purpose of the webview; this is (currently) only used for filtering in js-debug\n\t */\n\treadonly purpose?: WebviewContentPurpose;\n\treadonly customClasses?: string;\n\treadonly enableFindWidget?: boolean;\n\n\t/**\n\t * Disable the service worker used for loading local resources in the webview.\n\t */\n\treadonly disableServiceWorker?: boolean;\n\n\treadonly tryRestoreScrollPosition?: boolean;\n\treadonly retainContextWhenHidden?: boolean;\n\ttransformCssVariables?(styles: WebviewStyles): WebviewStyles;\n}\n\nexport interface WebviewContentOptions {\n\t/**\n\t * Should the webview allow `acquireVsCodeApi` to be called multiple times? Defaults to false.\n\t */\n\treadonly allowMultipleAPIAcquire?: boolean;\n\n\t/**\n\t * Should scripts be enabled in the webview? Defaults to false.\n\t */\n\treadonly allowScripts?: boolean;\n\n\t/**\n\t * Should forms be enabled in the webview? Defaults to the value of {@link allowScripts}.\n\t */\n\treadonly allowForms?: boolean;\n\n\t/**\n\t * Set of root paths from which the webview can load local resources.\n\t */\n\treadonly localResourceRoots?: readonly URI[];\n\n\t/**\n\t * Set of localhost port mappings to apply inside the webview.\n\t */\n\treadonly portMapping?: readonly IWebviewPortMapping[];\n\n\t/**\n\t * Are command uris enabled in the webview? Defaults to false.\n\t *\n\t * TODO: This is only supported by mainThreadWebviews and should be removed from here.\n\t */\n\treadonly enableCommandUris?: boolean | readonly string[];\n}\n\n/**\n * Check if two {@link WebviewContentOptions} are equal.\n */\nexport function areWebviewContentOptionsEqual(a: WebviewContentOptions, b: WebviewContentOptions): boolean {\n\treturn (\n\t\ta.allowMultipleAPIAcquire === b.allowMultipleAPIAcquire\n\t\t&& a.allowScripts === b.allowScripts\n\t\t&& a.allowForms === b.allowForms\n\t\t&& equals(a.localResourceRoots, b.localResourceRoots, isEqual)\n\t\t&& equals(a.portMapping, b.portMapping, (a, b) => a.extensionHostPort === b.extensionHostPort && a.webviewPort === b.webviewPort)\n\t\t&& areEnableCommandUrisEqual(a, b)\n\t);\n}\n\nfunction areEnableCommandUrisEqual(a: WebviewContentOptions, b: WebviewContentOptions): boolean {\n\tif (a.enableCommandUris === b.enableCommandUris) {\n\t\treturn true;\n\t}\n\n\tif (Array.isArray(a.enableCommandUris) && Array.isArray(b.enableCommandUris)) {\n\t\treturn equals(a.enableCommandUris, b.enableCommandUris);\n\t}\n\n\treturn false;\n}\n\nexport interface WebviewExtensionDescription {\n\treadonly location?: URI;\n\treadonly id: ExtensionIdentifier;\n}\n\nexport interface WebviewMessageReceivedEvent {\n\treadonly message: any;\n\treadonly transfer?: readonly ArrayBuffer[];\n}\n\nexport interface IWebview extends IDisposable {\n\n\t/**\n\t * The original view type of the webview.\n\t */\n\treadonly providedViewType?: string;\n\n\t/**\n\t * The origin this webview itself is loaded from. May not be unique.\n\t */\n\treadonly origin: string;\n\n\t/**\n\t * Set html content of the webview.\n\t */\n\tsetHtml(html: string): void;\n\n\t/**\n\t * Set the title of the webview. This is set on the webview's iframe element.\n\t */\n\tsetTitle(title: string): void;\n\n\t/**\n\t * Control what content is allowed/blocked inside the webview.\n\t */\n\tcontentOptions: WebviewContentOptions;\n\n\t/**\n\t * List of roots from which local resources can be loaded.\n\t *\n\t * Requests for local resources not in this list are blocked.\n\t */\n\tlocalResourcesRoot: readonly URI[];\n\n\t/**\n\t * The extension that created/owns this webview.\n\t */\n\textension: WebviewExtensionDescription | undefined;\n\n\tinitialScrollProgress: number;\n\tstate: string | undefined;\n\n\treadonly isFocused: boolean;\n\n\treadonly onDidFocus: Event<void>;\n\treadonly onDidBlur: Event<void>;\n\n\t/**\n\t * Fired when the webview is disposed of.\n\t */\n\treadonly onDidDispose: Event<void>;\n\n\treadonly onDidClickLink: Event<string>;\n\treadonly onDidScroll: Event<{ readonly scrollYPercentage: number }>;\n\treadonly onDidWheel: Event<IMouseWheelEvent>;\n\n\treadonly onDidUpdateState: Event<string | undefined>;\n\treadonly onDidReload: Event<void>;\n\n\t/**\n\t * Fired when the webview cannot be loaded or is now in a non-functional state.\n\t */\n\treadonly onFatalError: Event<{ readonly message: string }>;\n\treadonly onMissingCsp: Event<ExtensionIdentifier>;\n\n\treadonly onMessage: Event<WebviewMessageReceivedEvent>;\n\n\tpostMessage(message: any, transfer?: readonly ArrayBuffer[]): Promise<boolean>;\n\n\tfocus(): void;\n\treload(): void;\n\n\tshowFind(animated?: boolean): void;\n\thideFind(animated?: boolean): void;\n\trunFindAction(previous: boolean): void;\n\n\tselectAll(): void;\n\tcopy(): void;\n\tpaste(): void;\n\tcut(): void;\n\tundo(): void;\n\tredo(): void;\n\n\twindowDidDragStart(): void;\n\twindowDidDragEnd(): void;\n\n\tsetContextKeyService(scopedContextKeyService: IContextKeyService): void;\n}\n\n/**\n * Basic webview rendered directly in the dom\n */\nexport interface IWebviewElement extends IWebview {\n\t/**\n\t * Append the webview to a HTML element.\n\t *\n\t * Note that the webview content will be destroyed if any part of the parent hierarchy\n\t * changes. You can avoid this by using a {@link IOverlayWebview} instead.\n\t *\n\t * @param parent Element to append the webview to.\n\t */\n\tmountTo(parent: HTMLElement, targetWindow: CodeWindow): void;\n}\n\n/**\n * Lazily created {@link IWebview} that is absolutely positioned over another element.\n *\n * Absolute positioning lets us avoid having the webview be re-parented, which would destroy the\n * webview's content.\n *\n * Note that the underlying webview owned by a `WebviewOverlay` can be dynamically created\n * and destroyed depending on who has {@link IOverlayWebview.claim claimed} or {@link IOverlayWebview.release released} it.\n */\nexport interface IOverlayWebview extends IWebview {\n\t/**\n\t * The HTML element that holds the webview.\n\t */\n\treadonly container: HTMLElement;\n\n\torigin: string;\n\n\toptions: WebviewOptions;\n\n\t/**\n\t * Take ownership of the webview.\n\t *\n\t * This will create the underlying webview element.\n\t *\n\t * @param claimant Identifier for the object claiming the webview.\n\t *   This must match the `claimant` passed to {@link IOverlayWebview.release}.\n\t */\n\tclaim(claimant: any, targetWindow: CodeWindow, scopedContextKeyService: IContextKeyService | undefined): void;\n\n\t/**\n\t * Release ownership of the webview.\n\t *\n\t * If the {@link claimant} is still the current owner of the webview, this will\n\t * cause the underlying webview element to be destoryed.\n\t *\n\t * @param claimant Identifier for the object releasing its claim on the webview.\n\t *   This must match the `claimant` passed to {@link IOverlayWebview.claim}.\n\t */\n\trelease(claimant: any): void;\n\n\t/**\n\t * Absolutely position the webview on top of another element in the DOM.\n\t *\n\t * @param element Element to position the webview on top of. This element should\n\t *   be an placeholder for the webview since the webview will entirely cover it.\n\t * @param dimension Optional explicit dimensions to use for sizing the webview.\n\t * @param clippingContainer Optional container to clip the webview to. This should generally be a parent of `element`.\n\t */\n\tlayoutWebviewOverElement(element: HTMLElement, dimension?: Dimension, clippingContainer?: HTMLElement): void;\n}\n\n/**\n * Stores the unique origins for a webview.\n *\n * These are randomly generated\n */\nexport class WebviewOriginStore {\n\n\tprivate readonly _memento: Memento;\n\tprivate readonly _state: MementoObject;\n\n\tconstructor(\n\t\trootStorageKey: string,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tthis._memento = new Memento(rootStorageKey, storageService);\n\t\tthis._state = this._memento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tpublic getOrigin(viewType: string, additionalKey: string | undefined): string {\n\t\tconst key = this._getKey(viewType, additionalKey);\n\n\t\tconst existing = this._state[key];\n\t\tif (existing && typeof existing === 'string') {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst newOrigin = generateUuid();\n\t\tthis._state[key] = newOrigin;\n\t\tthis._memento.saveMemento();\n\t\treturn newOrigin;\n\t}\n\n\tprivate _getKey(viewType: string, additionalKey: string | undefined): string {\n\t\treturn JSON.stringify({ viewType, key: additionalKey });\n\t}\n}\n\n/**\n * Stores the unique origins for a webview.\n *\n * These are randomly generated, but keyed on extension and webview viewType.\n */\nexport class ExtensionKeyedWebviewOriginStore {\n\n\tprivate readonly _store: WebviewOriginStore;\n\n\tconstructor(\n\t\trootStorageKey: string,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tthis._store = new WebviewOriginStore(rootStorageKey, storageService);\n\t}\n\n\tpublic getOrigin(viewType: string, extId: ExtensionIdentifier): string {\n\t\treturn this._store.getOrigin(viewType, extId.value);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,iBAAiB;AAC1B,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,cAAc;AACvB,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB,qBAAqB;AAClD,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,2BAA2B;AACpC,SAAS,SAAS,qBAAqB;AAKhC,MAAM,iDAAiD,IAAI,cAAuB,4BAA4B,KAAK;AAKnH,MAAM,iDAAiD,IAAI,cAAuB,4BAA4B,KAAK;AAKnH,MAAM,iDAAiD,IAAI,cAAuB,4BAA4B,KAAK;AAEnH,MAAM,kBAAkB,gBAAiC,gBAAgB;AA8CzE,IAAW,wBAAX,kBAAWA,2BAAX;AACN,EAAAA,uBAAA,sBAAmB;AACnB,EAAAA,uBAAA,kBAAe;AACf,EAAAA,uBAAA,iBAAc;AAHG,SAAAA;AAAA,GAAA;AA+DX,SAAS,8BAA8B,GAA0B,GAAmC;AAC1G,SACC,EAAE,4BAA4B,EAAE,2BAC7B,EAAE,iBAAiB,EAAE,gBACrB,EAAE,eAAe,EAAE,cACnB,OAAO,EAAE,oBAAoB,EAAE,oBAAoB,OAAO,KAC1D,OAAO,EAAE,aAAa,EAAE,aAAa,CAACC,IAAGC,OAAMD,GAAE,sBAAsBC,GAAE,qBAAqBD,GAAE,gBAAgBC,GAAE,WAAW,KAC7H,0BAA0B,GAAG,CAAC;AAEnC;AATgB;AAWhB,SAAS,0BAA0B,GAA0B,GAAmC;AAC/F,MAAI,EAAE,sBAAsB,EAAE,mBAAmB;AAChD,WAAO;AAAA,EACR;AAEA,MAAI,MAAM,QAAQ,EAAE,iBAAiB,KAAK,MAAM,QAAQ,EAAE,iBAAiB,GAAG;AAC7E,WAAO,OAAO,EAAE,mBAAmB,EAAE,iBAAiB;AAAA,EACvD;AAEA,SAAO;AACR;AAVS;AAsLF,IAAM,qBAAN,MAAyB;AAAA,EAlVhC,OAkVgC;AAAA;AAAA;AAAA,EAEd;AAAA,EACA;AAAA,EAEjB,YACC,gBACiB,gBAChB;AACD,SAAK,WAAW,IAAI,QAAQ,gBAAgB,cAAc;AAC1D,SAAK,SAAS,KAAK,SAAS,WAAW,aAAa,aAAa,cAAc,OAAO;AAAA,EACvF;AAAA,EAEO,UAAU,UAAkB,eAA2C;AAC7E,UAAM,MAAM,KAAK,QAAQ,UAAU,aAAa;AAEhD,UAAM,WAAW,KAAK,OAAO,GAAG;AAChC,QAAI,YAAY,OAAO,aAAa,UAAU;AAC7C,aAAO;AAAA,IACR;AAEA,UAAM,YAAY,aAAa;AAC/B,SAAK,OAAO,GAAG,IAAI;AACnB,SAAK,SAAS,YAAY;AAC1B,WAAO;AAAA,EACR;AAAA,EAEQ,QAAQ,UAAkB,eAA2C;AAC5E,WAAO,KAAK,UAAU,EAAE,UAAU,KAAK,cAAc,CAAC;AAAA,EACvD;AACD;AA9Ba,qBAAN;AAAA,EAOJ;AAAA,GAPU;AAqCN,IAAM,mCAAN,MAAuC;AAAA,EAvX9C,OAuX8C;AAAA;AAAA;AAAA,EAE5B;AAAA,EAEjB,YACC,gBACiB,gBAChB;AACD,SAAK,SAAS,IAAI,mBAAmB,gBAAgB,cAAc;AAAA,EACpE;AAAA,EAEO,UAAU,UAAkB,OAAoC;AACtE,WAAO,KAAK,OAAO,UAAU,UAAU,MAAM,KAAK;AAAA,EACnD;AACD;AAda,mCAAN;AAAA,EAMJ;AAAA,GANU;",
  "names": ["WebviewContentPurpose", "a", "b"]
}
