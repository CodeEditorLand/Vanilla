import l from"assert";import{CancellationToken as u}from"../../../../../base/common/cancellation.js";import{URI as c}from"../../../../../base/common/uri.js";import{mockObject as s}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as R}from"../../../../../base/test/common/utils.js";import"../../../../../platform/progress/common/progress.js";import{UndoRedoGroup as v,UndoRedoSource as w}from"../../../../../platform/undoRedo/common/undoRedo.js";import{BulkCellEdits as I,ResourceNotebookCellEdit as y}from"../../browser/bulkCellEdits.js";import"../../../notebook/common/model/notebookTextModel.js";import{CellEditType as U,CellUri as a}from"../../../notebook/common/notebookCommon.js";import"../../../notebook/common/notebookEditorModelResolverService.js";import{TestEditorService as E}from"../../../../test/browser/workbenchTestServices.js";suite("BulkCellEdits",function(){const d=R();async function e(t,m){const p={report:N=>{}},b=d.add(new E),i=s()();i.uri.returns(c.file("/project/notebook.ipynb"));const n=s()({notebook:i});n.isReadonly.returns(!1);const r=s()();r.resolve.returns({object:n,dispose:()=>{}});const k=[new y(t,{index:0,count:1,editType:U.Replace,cells:[]})];await new I(new v,new w,p,u.None,k,b,r).apply();const f=r.resolve.args[0];l.strictEqual(f[0].toString(),m.toString())}const o=c.file("/foo/bar.ipynb");test("works with notebook URI",async()=>{await e(o,o)}),test("maps cell URI to notebook URI",async()=>{await e(a.generate(o,5),o)}),test("throws for invalid cell URI",async()=>{const t=a.generate(o,5).with({fragment:""});await l.rejects(async()=>await e(t,o))})});
