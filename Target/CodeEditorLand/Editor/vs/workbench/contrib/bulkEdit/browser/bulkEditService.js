var k=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var h=(c,e,t,r)=>{for(var o=r>1?void 0:r?b(e,t):e,i=c.length-1,s;i>=0;i--)(s=c[i])&&(o=(r?s(e,t,o):s(o))||o);return r&&o&&k(e,t,o),o},l=(c,e)=>(t,r)=>e(t,r,c);import{CancellationToken as C}from"../../../../base/common/cancellation.js";import{toDisposable as U}from"../../../../base/common/lifecycle.js";import{LinkedList as P}from"../../../../base/common/linkedList.js";import{ResourceMap as R,ResourceSet as G}from"../../../../base/common/map.js";import{isCodeEditor as x,isDiffEditor as O}from"../../../../editor/browser/editorBrowser.js";import{IBulkEditService as W,ResourceFileEdit as f,ResourceTextEdit as m}from"../../../../editor/browser/services/bulkEditService.js";import{EditorOption as T}from"../../../../editor/common/config/editorOptions.js";import{localize as n}from"../../../../nls.js";import{IConfigurationService as B}from"../../../../platform/configuration/common/configuration.js";import{Extensions as A}from"../../../../platform/configuration/common/configurationRegistry.js";import{IDialogService as H}from"../../../../platform/dialogs/common/dialogs.js";import{InstantiationType as D,registerSingleton as L}from"../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as w}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as E}from"../../../../platform/log/common/log.js";import{Progress as N}from"../../../../platform/progress/common/progress.js";import{Registry as F}from"../../../../platform/registry/common/platform.js";import{UndoRedoGroup as M}from"../../../../platform/undoRedo/common/undoRedo.js";import{IEditorService as z}from"../../../services/editor/common/editorService.js";import{ILifecycleService as j,ShutdownReason as _}from"../../../services/lifecycle/common/lifecycle.js";import{IWorkingCopyService as q}from"../../../services/workingCopy/common/workingCopyService.js";import{BulkCellEdits as J,ResourceNotebookCellEdit as S}from"./bulkCellEdits.js";import{BulkFileEdits as V}from"./bulkFileEdits.js";import{BulkTextEdits as Q}from"./bulkTextEdits.js";function K(c){return c.map(e=>{if(m.is(e))return m.lift(e);if(f.is(e))return f.lift(e);if(S.is(e))return S.lift(e);throw new Error("Unsupported edit")})}let u=class{constructor(e,t,r,o,i,s,d,v,g,a,y){this._label=e;this._code=t;this._editor=r;this._progress=o;this._token=i;this._edits=s;this._undoRedoGroup=d;this._undoRedoSource=v;this._confirmBeforeUndo=g;this._instaService=a;this._logService=y}ariaMessage(){const e=new R,t=new R;let r=0;for(const o of this._edits)o instanceof m?(r+=1,t.set(o.resource,!0)):o instanceof f&&e.set(o.oldResource??o.newResource,!0);return this._edits.length===0?n("summary.0","Made no edits"):e.size===0?r>1&&t.size>1?n("summary.nm","Made {0} text edits in {1} files",r,t.size):n("summary.n0","Made {0} text edits in one file",r):n("summary.textFiles","Made {0} text edits in {1} files, also created or deleted {2} files",r,t.size,e.size)}async perform(){if(this._edits.length===0)return[];const e=[1];for(let s=1;s<this._edits.length;s++)Object.getPrototypeOf(this._edits[s-1])===Object.getPrototypeOf(this._edits[s])?e[e.length-1]++:e.push(1);const t=this._edits.length>1?0:void 0;this._progress.report({increment:t,total:100});const r={report:s=>this._progress.report({increment:100/this._edits.length})},o=[];let i=0;for(const s of e){if(this._token.isCancellationRequested)break;const d=this._edits.slice(i,i+s);d[0]instanceof f?o.push(await this._performFileEdits(d,this._undoRedoGroup,this._undoRedoSource,this._confirmBeforeUndo,r)):d[0]instanceof m?o.push(await this._performTextEdits(d,this._undoRedoGroup,this._undoRedoSource,r)):d[0]instanceof S&&o.push(await this._performCellEdits(d,this._undoRedoGroup,this._undoRedoSource,r)),i=i+s}return o.flat()}async _performFileEdits(e,t,r,o,i){return this._logService.debug("_performFileEdits",JSON.stringify(e)),await this._instaService.createInstance(V,this._label||n("workspaceEdit","Workspace Edit"),this._code||"undoredo.workspaceEdit",t,r,o,i,this._token,e).apply()}async _performTextEdits(e,t,r,o){return this._logService.debug("_performTextEdits",JSON.stringify(e)),await this._instaService.createInstance(Q,this._label||n("workspaceEdit","Workspace Edit"),this._code||"undoredo.workspaceEdit",this._editor,t,r,o,this._token,e).apply()}async _performCellEdits(e,t,r,o){return this._logService.debug("_performCellEdits",JSON.stringify(e)),await this._instaService.createInstance(J,t,r,o,this._token,e).apply()}};u=h([l(9,w),l(10,E)],u);let p=class{constructor(e,t,r,o,i,s,d){this._instaService=e;this._logService=t;this._editorService=r;this._lifecycleService=o;this._dialogService=i;this._workingCopyService=s;this._configService=d}_activeUndoRedoGroups=new P;_previewHandler;setPreviewHandler(e){return this._previewHandler=e,U(()=>{this._previewHandler===e&&(this._previewHandler=void 0)})}hasPreviewHandler(){return!!this._previewHandler}async apply(e,t){let r=K(Array.isArray(e)?e:e.edits);if(r.length===0)return{ariaSummary:n("nothing","Made no edits"),isApplied:!1};this._previewHandler&&(t?.showPreview||r.some(a=>a.metadata?.needsConfirmation))&&(r=await this._previewHandler(r,t));let o=t?.editor;if(!o){const a=this._editorService.activeTextEditorControl;x(a)?o=a:O(a)&&(o=a.getModifiedEditor())}o&&o.getOption(T.readOnly)&&(o=void 0);let i,s=()=>{};if(typeof t?.undoRedoGroupId=="number"){for(const a of this._activeUndoRedoGroups)if(a.id===t.undoRedoGroupId){i=a;break}}i||(i=new M,s=this._activeUndoRedoGroups.push(i));const d=t?.quotableLabel||t?.label,v=this._instaService.createInstance(u,d,t?.code,o,t?.progress??N.None,t?.token??C.None,r,i,t?.undoRedoSource,!!t?.confirmBeforeUndo);let g;try{g=this._lifecycleService.onBeforeShutdown(y=>y.veto(this._shouldVeto(d,y.reason),"veto.blukEditService"));const a=await v.perform();return t?.respectAutoSaveConfig&&this._configService.getValue(I)===!0&&a.length>1&&await this._saveAll(a),{ariaSummary:v.ariaMessage(),isApplied:r.length>0}}catch(a){throw this._logService.error(a),a}finally{g?.dispose(),s()}}async _saveAll(e){const t=new G(e),r=this._workingCopyService.dirtyWorkingCopies.map(async i=>{t.has(i.resource)&&await i.save()}),o=await Promise.allSettled(r);for(const i of o)i.status==="rejected"&&this._logService.warn(i.reason)}async _shouldVeto(e,t){let r,o;switch(t){case _.CLOSE:r=n("closeTheWindow.message","Are you sure you want to close the window?"),o=n({key:"closeTheWindow",comment:["&& denotes a mnemonic"]},"&&Close Window");break;case _.LOAD:r=n("changeWorkspace.message","Are you sure you want to change the workspace?"),o=n({key:"changeWorkspace",comment:["&& denotes a mnemonic"]},"Change &&Workspace");break;case _.RELOAD:r=n("reloadTheWindow.message","Are you sure you want to reload the window?"),o=n({key:"reloadTheWindow",comment:["&& denotes a mnemonic"]},"&&Reload Window");break;default:r=n("quit.message","Are you sure you want to quit?"),o=n({key:"quit",comment:["&& denotes a mnemonic"]},"&&Quit");break}return!(await this._dialogService.confirm({message:r,detail:n("areYouSureQuiteBulkEdit.detail","'{0}' is in progress.",e||n("fileOperation","File operation")),primaryButton:o})).confirmed}};p=h([l(0,w),l(1,E),l(2,z),l(3,j),l(4,H),l(5,q),l(6,B)],p),L(W,p,D.Delayed);const I="files.refactoring.autoSave";F.as(A.Configuration).registerConfiguration({id:"files",properties:{[I]:{description:n("refactoring.autoSave","Controls if files that were part of a refactoring are saved automatically"),default:!0,type:"boolean"}}});export{p as BulkEditService};
