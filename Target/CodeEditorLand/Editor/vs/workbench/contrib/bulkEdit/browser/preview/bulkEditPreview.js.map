{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPreview.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesceInPlace } from \"../../../../../base/common/arrays.js\";\nimport { Codicon } from \"../../../../../base/common/codicons.js\";\nimport { Emitter, Event } from \"../../../../../base/common/event.js\";\nimport { DisposableStore } from \"../../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../../base/common/map.js\";\nimport { extUri } from \"../../../../../base/common/resources.js\";\nimport { MicrotaskDelay } from \"../../../../../base/common/symbols.js\";\nimport { URI } from \"../../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../../base/common/uuid.js\";\nimport {\n\ttype ResourceEdit,\n\tResourceFileEdit,\n\tResourceTextEdit,\n} from \"../../../../../editor/browser/services/bulkEditService.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../../../editor/common/core/editOperation.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type { WorkspaceEditMetadata } from \"../../../../../editor/common/languages.js\";\nimport { ILanguageService } from \"../../../../../editor/common/languages/language.js\";\nimport { createTextBufferFactoryFromSnapshot } from \"../../../../../editor/common/model/textModel.js\";\nimport { IModelService } from \"../../../../../editor/common/services/model.js\";\nimport {\n\ttype ITextModelContentProvider,\n\tITextModelService,\n} from \"../../../../../editor/common/services/resolverService.js\";\nimport { SnippetParser } from \"../../../../../editor/contrib/snippet/browser/snippetParser.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { IFileService } from \"../../../../../platform/files/common/files.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { ConflictDetector } from \"../conflicts.js\";\n\nexport class CheckedStates<T extends object> {\n\tprivate readonly _states = new WeakMap<T, boolean>();\n\tprivate _checkedCount = 0;\n\n\tprivate readonly _onDidChange = new Emitter<T>();\n\treadonly onDidChange: Event<T> = this._onDidChange.event;\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n\n\tget checkedCount() {\n\t\treturn this._checkedCount;\n\t}\n\n\tisChecked(obj: T): boolean {\n\t\treturn this._states.get(obj) ?? false;\n\t}\n\n\tupdateChecked(obj: T, value: boolean): void {\n\t\tconst valueNow = this._states.get(obj);\n\t\tif (valueNow === value) {\n\t\t\treturn;\n\t\t}\n\t\tif (valueNow === undefined) {\n\t\t\tif (value) {\n\t\t\t\tthis._checkedCount += 1;\n\t\t\t}\n\t\t} else if (value) {\n\t\t\tthis._checkedCount += 1;\n\t\t} else {\n\t\t\tthis._checkedCount -= 1;\n\t\t}\n\t\tthis._states.set(obj, value);\n\t\tthis._onDidChange.fire(obj);\n\t}\n}\n\nexport class BulkTextEdit {\n\tconstructor(\n\t\treadonly parent: BulkFileOperation,\n\t\treadonly textEdit: ResourceTextEdit,\n\t) {}\n}\n\nexport enum BulkFileOperationType {\n\tTextEdit = 1,\n\tCreate = 2,\n\tDelete = 4,\n\tRename = 8,\n}\n\nexport class BulkFileOperation {\n\ttype = 0;\n\ttextEdits: BulkTextEdit[] = [];\n\toriginalEdits = new Map<number, ResourceTextEdit | ResourceFileEdit>();\n\tnewUri?: URI;\n\n\tconstructor(\n\t\treadonly uri: URI,\n\t\treadonly parent: BulkFileOperations,\n\t) {}\n\n\taddEdit(\n\t\tindex: number,\n\t\ttype: BulkFileOperationType,\n\t\tedit: ResourceTextEdit | ResourceFileEdit,\n\t) {\n\t\tthis.type |= type;\n\t\tthis.originalEdits.set(index, edit);\n\t\tif (edit instanceof ResourceTextEdit) {\n\t\t\tthis.textEdits.push(new BulkTextEdit(this, edit));\n\t\t} else if (type === BulkFileOperationType.Rename) {\n\t\t\tthis.newUri = edit.newResource;\n\t\t}\n\t}\n\n\tneedsConfirmation(): boolean {\n\t\tfor (const [, edit] of this.originalEdits) {\n\t\t\tif (!this.parent.checked.isChecked(edit)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class BulkCategory {\n\tprivate static readonly _defaultMetadata = Object.freeze({\n\t\tlabel: localize(\"default\", \"Other\"),\n\t\ticon: Codicon.symbolFile,\n\t\tneedsConfirmation: false,\n\t});\n\n\tstatic keyOf(metadata?: WorkspaceEditMetadata) {\n\t\treturn metadata?.label || \"<default>\";\n\t}\n\n\treadonly operationByResource = new Map<string, BulkFileOperation>();\n\n\tconstructor(\n\t\treadonly metadata: WorkspaceEditMetadata = BulkCategory._defaultMetadata,\n\t) {}\n\n\tget fileOperations(): IterableIterator<BulkFileOperation> {\n\t\treturn this.operationByResource.values();\n\t}\n}\n\nexport class BulkFileOperations {\n\tstatic async create(\n\t\taccessor: ServicesAccessor,\n\t\tbulkEdit: ResourceEdit[],\n\t): Promise<BulkFileOperations> {\n\t\tconst result = accessor\n\t\t\t.get(IInstantiationService)\n\t\t\t.createInstance(BulkFileOperations, bulkEdit);\n\t\treturn await result._init();\n\t}\n\n\treadonly checked = new CheckedStates<ResourceEdit>();\n\n\treadonly fileOperations: BulkFileOperation[] = [];\n\treadonly categories: BulkCategory[] = [];\n\treadonly conflicts: ConflictDetector;\n\n\tconstructor(\n\t\tprivate readonly _bulkEdit: ResourceEdit[],\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IInstantiationService instaService: IInstantiationService,\n\t) {\n\t\tthis.conflicts = instaService.createInstance(\n\t\t\tConflictDetector,\n\t\t\t_bulkEdit,\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis.checked.dispose();\n\t\tthis.conflicts.dispose();\n\t}\n\n\tasync _init() {\n\t\tconst operationByResource = new Map<string, BulkFileOperation>();\n\t\tconst operationByCategory = new Map<string, BulkCategory>();\n\n\t\tconst newToOldUri = new ResourceMap<URI>();\n\n\t\tfor (let idx = 0; idx < this._bulkEdit.length; idx++) {\n\t\t\tconst edit = this._bulkEdit[idx];\n\n\t\t\tlet uri: URI;\n\t\t\tlet type: BulkFileOperationType;\n\n\t\t\t// store inital checked state\n\t\t\tthis.checked.updateChecked(edit, !edit.metadata?.needsConfirmation);\n\n\t\t\tif (edit instanceof ResourceTextEdit) {\n\t\t\t\ttype = BulkFileOperationType.TextEdit;\n\t\t\t\turi = edit.resource;\n\t\t\t} else if (edit instanceof ResourceFileEdit) {\n\t\t\t\tif (edit.newResource && edit.oldResource) {\n\t\t\t\t\ttype = BulkFileOperationType.Rename;\n\t\t\t\t\turi = edit.oldResource;\n\t\t\t\t\tif (\n\t\t\t\t\t\tedit.options?.overwrite === undefined &&\n\t\t\t\t\t\tedit.options?.ignoreIfExists &&\n\t\t\t\t\t\t(await this._fileService.exists(uri))\n\t\t\t\t\t) {\n\t\t\t\t\t\t// noop -> \"soft\" rename to something that already exists\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// map newResource onto oldResource so that text-edit appear for\n\t\t\t\t\t// the same file element\n\t\t\t\t\tnewToOldUri.set(edit.newResource, uri);\n\t\t\t\t} else if (edit.oldResource) {\n\t\t\t\t\ttype = BulkFileOperationType.Delete;\n\t\t\t\t\turi = edit.oldResource;\n\t\t\t\t\tif (\n\t\t\t\t\t\tedit.options?.ignoreIfNotExists &&\n\t\t\t\t\t\t!(await this._fileService.exists(uri))\n\t\t\t\t\t) {\n\t\t\t\t\t\t// noop -> \"soft\" delete something that doesn't exist\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else if (edit.newResource) {\n\t\t\t\t\ttype = BulkFileOperationType.Create;\n\t\t\t\t\turi = edit.newResource;\n\t\t\t\t\tif (\n\t\t\t\t\t\tedit.options?.overwrite === undefined &&\n\t\t\t\t\t\tedit.options?.ignoreIfExists &&\n\t\t\t\t\t\t(await this._fileService.exists(uri))\n\t\t\t\t\t) {\n\t\t\t\t\t\t// noop -> \"soft\" create something that already exists\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// invalid edit -> skip\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// unsupported edit\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst insert = (uri: URI, map: Map<string, BulkFileOperation>) => {\n\t\t\t\tlet key = extUri.getComparisonKey(uri, true);\n\t\t\t\tlet operation = map.get(key);\n\n\t\t\t\t// rename\n\t\t\t\tif (!operation && newToOldUri.has(uri)) {\n\t\t\t\t\turi = newToOldUri.get(uri)!;\n\t\t\t\t\tkey = extUri.getComparisonKey(uri, true);\n\t\t\t\t\toperation = map.get(key);\n\t\t\t\t}\n\n\t\t\t\tif (!operation) {\n\t\t\t\t\toperation = new BulkFileOperation(uri, this);\n\t\t\t\t\tmap.set(key, operation);\n\t\t\t\t}\n\t\t\t\toperation.addEdit(idx, type, edit);\n\t\t\t};\n\n\t\t\tinsert(uri, operationByResource);\n\n\t\t\t// insert into \"this\" category\n\t\t\tconst key = BulkCategory.keyOf(edit.metadata);\n\t\t\tlet category = operationByCategory.get(key);\n\t\t\tif (!category) {\n\t\t\t\tcategory = new BulkCategory(edit.metadata);\n\t\t\t\toperationByCategory.set(key, category);\n\t\t\t}\n\t\t\tinsert(uri, category.operationByResource);\n\t\t}\n\n\t\toperationByResource.forEach((value) => this.fileOperations.push(value));\n\t\toperationByCategory.forEach((value) => this.categories.push(value));\n\n\t\t// \"correct\" invalid parent-check child states that is\n\t\t// unchecked file edits (rename, create, delete) uncheck\n\t\t// all edits for a file, e.g no text change without rename\n\t\tfor (const file of this.fileOperations) {\n\t\t\tif (file.type !== BulkFileOperationType.TextEdit) {\n\t\t\t\tlet checked = true;\n\t\t\t\tfor (const edit of file.originalEdits.values()) {\n\t\t\t\t\tif (edit instanceof ResourceFileEdit) {\n\t\t\t\t\t\tchecked = checked && this.checked.isChecked(edit);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!checked) {\n\t\t\t\t\tfor (const edit of file.originalEdits.values()) {\n\t\t\t\t\t\tthis.checked.updateChecked(edit, checked);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// sort (once) categories atop which have unconfirmed edits\n\t\tthis.categories.sort((a, b) => {\n\t\t\tif (a.metadata.needsConfirmation === b.metadata.needsConfirmation) {\n\t\t\t\treturn a.metadata.label.localeCompare(b.metadata.label);\n\t\t\t} else if (a.metadata.needsConfirmation) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tgetWorkspaceEdit(): ResourceEdit[] {\n\t\tconst result: ResourceEdit[] = [];\n\t\tlet allAccepted = true;\n\n\t\tfor (let i = 0; i < this._bulkEdit.length; i++) {\n\t\t\tconst edit = this._bulkEdit[i];\n\t\t\tif (this.checked.isChecked(edit)) {\n\t\t\t\tresult[i] = edit;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tallAccepted = false;\n\t\t}\n\n\t\tif (allAccepted) {\n\t\t\treturn this._bulkEdit;\n\t\t}\n\n\t\t// not all edits have been accepted\n\t\tcoalesceInPlace(result);\n\t\treturn result;\n\t}\n\n\tprivate async getFileEditOperation(\n\t\tedit: ResourceFileEdit,\n\t): Promise<ISingleEditOperation | undefined> {\n\t\tconst content = await edit.options.contents;\n\t\tif (!content) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn EditOperation.replaceMove(\n\t\t\tRange.lift({\n\t\t\t\tstartLineNumber: 0,\n\t\t\t\tstartColumn: 0,\n\t\t\t\tendLineNumber: Number.MAX_VALUE,\n\t\t\t\tendColumn: 0,\n\t\t\t}),\n\t\t\tcontent.toString(),\n\t\t);\n\t}\n\n\tasync getFileEdits(uri: URI): Promise<ISingleEditOperation[]> {\n\t\tfor (const file of this.fileOperations) {\n\t\t\tif (file.uri.toString() === uri.toString()) {\n\t\t\t\tconst result: Promise<ISingleEditOperation | undefined>[] = [];\n\t\t\t\tlet ignoreAll = false;\n\n\t\t\t\tfor (const edit of file.originalEdits.values()) {\n\t\t\t\t\tif (edit instanceof ResourceFileEdit) {\n\t\t\t\t\t\tresult.push(this.getFileEditOperation(edit));\n\t\t\t\t\t} else if (edit instanceof ResourceTextEdit) {\n\t\t\t\t\t\tif (this.checked.isChecked(edit)) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t\t\t\tEditOperation.replaceMove(\n\t\t\t\t\t\t\t\t\t\tRange.lift(edit.textEdit.range),\n\t\t\t\t\t\t\t\t\t\tedit.textEdit.insertAsSnippet\n\t\t\t\t\t\t\t\t\t\t\t? SnippetParser.asInsertText(\n\t\t\t\t\t\t\t\t\t\t\t\t\tedit.textEdit.text,\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t: edit.textEdit.text,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!this.checked.isChecked(edit)) {\n\t\t\t\t\t\t// UNCHECKED WorkspaceFileEdit disables all text edits\n\t\t\t\t\t\tignoreAll = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (ignoreAll) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\treturn (await Promise.all(result))\n\t\t\t\t\t.filter((r) => r !== undefined)\n\t\t\t\t\t.sort((a, b) =>\n\t\t\t\t\t\tRange.compareRangesUsingStarts(a.range, b.range),\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tgetUriOfEdit(edit: ResourceEdit): URI {\n\t\tfor (const file of this.fileOperations) {\n\t\t\tfor (const value of file.originalEdits.values()) {\n\t\t\t\tif (value === edit) {\n\t\t\t\t\treturn file.uri;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"invalid edit\");\n\t}\n}\n\nexport class BulkEditPreviewProvider implements ITextModelContentProvider {\n\tprivate static readonly Schema = \"vscode-bulkeditpreview-editor\";\n\n\tstatic emptyPreview = URI.from({ scheme: this.Schema, fragment: \"empty\" });\n\n\tstatic fromPreviewUri(uri: URI): URI {\n\t\treturn URI.parse(uri.query);\n\t}\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _ready: Promise<any>;\n\tprivate readonly _modelPreviewEdits = new Map<\n\t\tstring,\n\t\tISingleEditOperation[]\n\t>();\n\tprivate readonly _instanceId = generateUuid();\n\n\tconstructor(\n\t\tprivate readonly _operations: BulkFileOperations,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService\n\t\tprivate readonly _textModelResolverService: ITextModelService,\n\t) {\n\t\tthis._disposables.add(\n\t\t\tthis._textModelResolverService.registerTextModelContentProvider(\n\t\t\t\tBulkEditPreviewProvider.Schema,\n\t\t\t\tthis,\n\t\t\t),\n\t\t);\n\t\tthis._ready = this._init();\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tasPreviewUri(uri: URI): URI {\n\t\treturn URI.from({\n\t\t\tscheme: BulkEditPreviewProvider.Schema,\n\t\t\tauthority: this._instanceId,\n\t\t\tpath: uri.path,\n\t\t\tquery: uri.toString(),\n\t\t});\n\t}\n\n\tprivate async _init() {\n\t\tfor (const operation of this._operations.fileOperations) {\n\t\t\tawait this._applyTextEditsToPreviewModel(operation.uri);\n\t\t}\n\t\tthis._disposables.add(\n\t\t\tEvent.debounce(\n\t\t\t\tthis._operations.checked.onDidChange,\n\t\t\t\t(_last, e) => e,\n\t\t\t\tMicrotaskDelay,\n\t\t\t)((e) => {\n\t\t\t\tconst uri = this._operations.getUriOfEdit(e);\n\t\t\t\tthis._applyTextEditsToPreviewModel(uri);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async _applyTextEditsToPreviewModel(uri: URI) {\n\t\tconst model = await this._getOrCreatePreviewModel(uri);\n\n\t\t// undo edits that have been done before\n\t\tconst undoEdits = this._modelPreviewEdits.get(model.id);\n\t\tif (undoEdits) {\n\t\t\tmodel.applyEdits(undoEdits);\n\t\t}\n\t\t// apply new edits and keep (future) undo edits\n\t\tconst newEdits = await this._operations.getFileEdits(uri);\n\t\tconst newUndoEdits = model.applyEdits(newEdits, true);\n\t\tthis._modelPreviewEdits.set(model.id, newUndoEdits);\n\t}\n\n\tprivate async _getOrCreatePreviewModel(uri: URI) {\n\t\tconst previewUri = this.asPreviewUri(uri);\n\t\tlet model = this._modelService.getModel(previewUri);\n\t\tif (!model) {\n\t\t\ttry {\n\t\t\t\t// try: copy existing\n\t\t\t\tconst ref =\n\t\t\t\t\tawait this._textModelResolverService.createModelReference(\n\t\t\t\t\t\turi,\n\t\t\t\t\t);\n\t\t\t\tconst sourceModel = ref.object.textEditorModel;\n\t\t\t\tmodel = this._modelService.createModel(\n\t\t\t\t\tcreateTextBufferFactoryFromSnapshot(\n\t\t\t\t\t\tsourceModel.createSnapshot(),\n\t\t\t\t\t),\n\t\t\t\t\tthis._languageService.createById(\n\t\t\t\t\t\tsourceModel.getLanguageId(),\n\t\t\t\t\t),\n\t\t\t\t\tpreviewUri,\n\t\t\t\t);\n\t\t\t\tref.dispose();\n\t\t\t} catch {\n\t\t\t\t// create NEW model\n\t\t\t\tmodel = this._modelService.createModel(\n\t\t\t\t\t\"\",\n\t\t\t\t\tthis._languageService.createByFilepathOrFirstLine(\n\t\t\t\t\t\tpreviewUri,\n\t\t\t\t\t),\n\t\t\t\t\tpreviewUri,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// this is a little weird but otherwise editors and other cusomers\n\t\t\t// will dispose my models before they should be disposed...\n\t\t\t// And all of this is off the eventloop to prevent endless recursion\n\t\t\tqueueMicrotask(async () => {\n\t\t\t\tthis._disposables.add(\n\t\t\t\t\tawait this._textModelResolverService.createModelReference(\n\t\t\t\t\t\tmodel!.uri,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\treturn model;\n\t}\n\n\tasync provideTextContent(previewUri: URI) {\n\t\tif (\n\t\t\tpreviewUri.toString() ===\n\t\t\tBulkEditPreviewProvider.emptyPreview.toString()\n\t\t) {\n\t\t\treturn this._modelService.createModel(\"\", null, previewUri);\n\t\t}\n\t\tawait this._ready;\n\t\treturn this._modelService.getModel(previewUri);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["BulkFileOperationType", "uri", "key"]
}
