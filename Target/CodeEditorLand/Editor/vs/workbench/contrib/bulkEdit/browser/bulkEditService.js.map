{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { ResourceMap, ResourceSet } from '../../../../base/common/map.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor, isCodeEditor, isDiffEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IBulkEditOptions, IBulkEditPreviewHandler, IBulkEditResult, IBulkEditService, ResourceEdit, ResourceFileEdit, ResourceTextEdit } from '../../../../editor/browser/services/bulkEditService.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { WorkspaceEdit } from '../../../../editor/common/languages.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { Extensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProgress, IProgressStep, Progress } from '../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { UndoRedoGroup, UndoRedoSource } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { BulkCellEdits, ResourceNotebookCellEdit } from './bulkCellEdits.js';\nimport { BulkFileEdits } from './bulkFileEdits.js';\nimport { BulkTextEdits } from './bulkTextEdits.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ILifecycleService, ShutdownReason } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IWorkingCopyService } from '../../../services/workingCopy/common/workingCopyService.js';\n\nfunction liftEdits(edits: ResourceEdit[]): ResourceEdit[] {\n\treturn edits.map(edit => {\n\t\tif (ResourceTextEdit.is(edit)) {\n\t\t\treturn ResourceTextEdit.lift(edit);\n\t\t}\n\t\tif (ResourceFileEdit.is(edit)) {\n\t\t\treturn ResourceFileEdit.lift(edit);\n\t\t}\n\t\tif (ResourceNotebookCellEdit.is(edit)) {\n\t\t\treturn ResourceNotebookCellEdit.lift(edit);\n\t\t}\n\t\tthrow new Error('Unsupported edit');\n\t});\n}\n\nclass BulkEdit {\n\n\tconstructor(\n\t\tprivate readonly _label: string | undefined,\n\t\tprivate readonly _code: string | undefined,\n\t\tprivate readonly _editor: ICodeEditor | undefined,\n\t\tprivate readonly _progress: IProgress<IProgressStep>,\n\t\tprivate readonly _token: CancellationToken,\n\t\tprivate readonly _edits: ResourceEdit[],\n\t\tprivate readonly _undoRedoGroup: UndoRedoGroup,\n\t\tprivate readonly _undoRedoSource: UndoRedoSource | undefined,\n\t\tprivate readonly _confirmBeforeUndo: boolean,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\n\t}\n\n\tariaMessage(): string {\n\n\t\tconst otherResources = new ResourceMap<boolean>();\n\t\tconst textEditResources = new ResourceMap<boolean>();\n\t\tlet textEditCount = 0;\n\t\tfor (const edit of this._edits) {\n\t\t\tif (edit instanceof ResourceTextEdit) {\n\t\t\t\ttextEditCount += 1;\n\t\t\t\ttextEditResources.set(edit.resource, true);\n\t\t\t} else if (edit instanceof ResourceFileEdit) {\n\t\t\t\totherResources.set(edit.oldResource ?? edit.newResource!, true);\n\t\t\t}\n\t\t}\n\t\tif (this._edits.length === 0) {\n\t\t\treturn localize('summary.0', \"Made no edits\");\n\t\t} else if (otherResources.size === 0) {\n\t\t\tif (textEditCount > 1 && textEditResources.size > 1) {\n\t\t\t\treturn localize('summary.nm', \"Made {0} text edits in {1} files\", textEditCount, textEditResources.size);\n\t\t\t} else {\n\t\t\t\treturn localize('summary.n0', \"Made {0} text edits in one file\", textEditCount);\n\t\t\t}\n\t\t} else {\n\t\t\treturn localize('summary.textFiles', \"Made {0} text edits in {1} files, also created or deleted {2} files\", textEditCount, textEditResources.size, otherResources.size);\n\t\t}\n\t}\n\n\tasync perform(): Promise<readonly URI[]> {\n\n\t\tif (this._edits.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst ranges: number[] = [1];\n\t\tfor (let i = 1; i < this._edits.length; i++) {\n\t\t\tif (Object.getPrototypeOf(this._edits[i - 1]) === Object.getPrototypeOf(this._edits[i])) {\n\t\t\t\tranges[ranges.length - 1]++;\n\t\t\t} else {\n\t\t\t\tranges.push(1);\n\t\t\t}\n\t\t}\n\n\t\t// Show infinte progress when there is only 1 item since we do not know how long it takes\n\t\tconst increment = this._edits.length > 1 ? 0 : undefined;\n\t\tthis._progress.report({ increment, total: 100 });\n\t\t// Increment by percentage points since progress API expects that\n\t\tconst progress: IProgress<void> = { report: _ => this._progress.report({ increment: 100 / this._edits.length }) };\n\n\t\tconst resources: (readonly URI[])[] = [];\n\t\tlet index = 0;\n\t\tfor (const range of ranges) {\n\t\t\tif (this._token.isCancellationRequested) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst group = this._edits.slice(index, index + range);\n\t\t\tif (group[0] instanceof ResourceFileEdit) {\n\t\t\t\tresources.push(await this._performFileEdits(<ResourceFileEdit[]>group, this._undoRedoGroup, this._undoRedoSource, this._confirmBeforeUndo, progress));\n\t\t\t} else if (group[0] instanceof ResourceTextEdit) {\n\t\t\t\tresources.push(await this._performTextEdits(<ResourceTextEdit[]>group, this._undoRedoGroup, this._undoRedoSource, progress));\n\t\t\t} else if (group[0] instanceof ResourceNotebookCellEdit) {\n\t\t\t\tresources.push(await this._performCellEdits(<ResourceNotebookCellEdit[]>group, this._undoRedoGroup, this._undoRedoSource, progress));\n\t\t\t} else {\n\t\t\t\tconsole.log('UNKNOWN EDIT');\n\t\t\t}\n\t\t\tindex = index + range;\n\t\t}\n\n\t\treturn resources.flat();\n\t}\n\n\tprivate async _performFileEdits(edits: ResourceFileEdit[], undoRedoGroup: UndoRedoGroup, undoRedoSource: UndoRedoSource | undefined, confirmBeforeUndo: boolean, progress: IProgress<void>): Promise<readonly URI[]> {\n\t\tthis._logService.debug('_performFileEdits', JSON.stringify(edits));\n\t\tconst model = this._instaService.createInstance(BulkFileEdits, this._label || localize('workspaceEdit', \"Workspace Edit\"), this._code || 'undoredo.workspaceEdit', undoRedoGroup, undoRedoSource, confirmBeforeUndo, progress, this._token, edits);\n\t\treturn await model.apply();\n\t}\n\n\tprivate async _performTextEdits(edits: ResourceTextEdit[], undoRedoGroup: UndoRedoGroup, undoRedoSource: UndoRedoSource | undefined, progress: IProgress<void>): Promise<readonly URI[]> {\n\t\tthis._logService.debug('_performTextEdits', JSON.stringify(edits));\n\t\tconst model = this._instaService.createInstance(BulkTextEdits, this._label || localize('workspaceEdit', \"Workspace Edit\"), this._code || 'undoredo.workspaceEdit', this._editor, undoRedoGroup, undoRedoSource, progress, this._token, edits);\n\t\treturn await model.apply();\n\t}\n\n\tprivate async _performCellEdits(edits: ResourceNotebookCellEdit[], undoRedoGroup: UndoRedoGroup, undoRedoSource: UndoRedoSource | undefined, progress: IProgress<void>): Promise<readonly URI[]> {\n\t\tthis._logService.debug('_performCellEdits', JSON.stringify(edits));\n\t\tconst model = this._instaService.createInstance(BulkCellEdits, undoRedoGroup, undoRedoSource, progress, this._token, edits);\n\t\treturn await model.apply();\n\t}\n}\n\nexport class BulkEditService implements IBulkEditService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _activeUndoRedoGroups = new LinkedList<UndoRedoGroup>();\n\tprivate _previewHandler?: IBulkEditPreviewHandler;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IWorkingCopyService private readonly _workingCopyService: IWorkingCopyService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t) { }\n\n\tsetPreviewHandler(handler: IBulkEditPreviewHandler): IDisposable {\n\t\tthis._previewHandler = handler;\n\t\treturn toDisposable(() => {\n\t\t\tif (this._previewHandler === handler) {\n\t\t\t\tthis._previewHandler = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\thasPreviewHandler(): boolean {\n\t\treturn Boolean(this._previewHandler);\n\t}\n\n\tasync apply(editsIn: ResourceEdit[] | WorkspaceEdit, options?: IBulkEditOptions): Promise<IBulkEditResult> {\n\t\tlet edits = liftEdits(Array.isArray(editsIn) ? editsIn : editsIn.edits);\n\n\t\tif (edits.length === 0) {\n\t\t\treturn { ariaSummary: localize('nothing', \"Made no edits\"), isApplied: false };\n\t\t}\n\n\t\tif (this._previewHandler && (options?.showPreview || edits.some(value => value.metadata?.needsConfirmation))) {\n\t\t\tedits = await this._previewHandler(edits, options);\n\t\t}\n\n\t\tlet codeEditor = options?.editor;\n\t\t// try to find code editor\n\t\tif (!codeEditor) {\n\t\t\tconst candidate = this._editorService.activeTextEditorControl;\n\t\t\tif (isCodeEditor(candidate)) {\n\t\t\t\tcodeEditor = candidate;\n\t\t\t} else if (isDiffEditor(candidate)) {\n\t\t\t\tcodeEditor = candidate.getModifiedEditor();\n\t\t\t}\n\t\t}\n\n\t\tif (codeEditor && codeEditor.getOption(EditorOption.readOnly)) {\n\t\t\t// If the code editor is readonly still allow bulk edits to be applied #68549\n\t\t\tcodeEditor = undefined;\n\t\t}\n\n\t\t// undo-redo-group: if a group id is passed then try to find it\n\t\t// in the list of active edits. otherwise (or when not found)\n\t\t// create a separate undo-redo-group\n\t\tlet undoRedoGroup: UndoRedoGroup | undefined;\n\t\tlet undoRedoGroupRemove = () => { };\n\t\tif (typeof options?.undoRedoGroupId === 'number') {\n\t\t\tfor (const candidate of this._activeUndoRedoGroups) {\n\t\t\t\tif (candidate.id === options.undoRedoGroupId) {\n\t\t\t\t\tundoRedoGroup = candidate;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!undoRedoGroup) {\n\t\t\tundoRedoGroup = new UndoRedoGroup();\n\t\t\tundoRedoGroupRemove = this._activeUndoRedoGroups.push(undoRedoGroup);\n\t\t}\n\n\t\tconst label = options?.quotableLabel || options?.label;\n\t\tconst bulkEdit = this._instaService.createInstance(\n\t\t\tBulkEdit,\n\t\t\tlabel,\n\t\t\toptions?.code,\n\t\t\tcodeEditor,\n\t\t\toptions?.progress ?? Progress.None,\n\t\t\toptions?.token ?? CancellationToken.None,\n\t\t\tedits,\n\t\t\tundoRedoGroup,\n\t\t\toptions?.undoRedoSource,\n\t\t\t!!options?.confirmBeforeUndo\n\t\t);\n\n\t\tlet listener: IDisposable | undefined;\n\t\ttry {\n\t\t\tlistener = this._lifecycleService.onBeforeShutdown(e => e.veto(this._shouldVeto(label, e.reason), 'veto.blukEditService'));\n\t\t\tconst resources = await bulkEdit.perform();\n\n\t\t\t// when enabled (option AND setting) loop over all dirty working copies and trigger save\n\t\t\t// for those that were involved in this bulk edit operation.\n\t\t\tif (options?.respectAutoSaveConfig && this._configService.getValue(autoSaveSetting) === true && resources.length > 1) {\n\t\t\t\tawait this._saveAll(resources);\n\t\t\t}\n\n\t\t\treturn { ariaSummary: bulkEdit.ariaMessage(), isApplied: edits.length > 0 };\n\t\t} catch (err) {\n\t\t\t// console.log('apply FAILED');\n\t\t\t// console.log(err);\n\t\t\tthis._logService.error(err);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tlistener?.dispose();\n\t\t\tundoRedoGroupRemove();\n\t\t}\n\t}\n\n\tprivate async _saveAll(resources: readonly URI[]) {\n\t\tconst set = new ResourceSet(resources);\n\t\tconst saves = this._workingCopyService.dirtyWorkingCopies.map(async (copy) => {\n\t\t\tif (set.has(copy.resource)) {\n\t\t\t\tawait copy.save();\n\t\t\t}\n\t\t});\n\n\t\tconst result = await Promise.allSettled(saves);\n\t\tfor (const item of result) {\n\t\t\tif (item.status === 'rejected') {\n\t\t\t\tthis._logService.warn(item.reason);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _shouldVeto(label: string | undefined, reason: ShutdownReason): Promise<boolean> {\n\t\tlet message: string;\n\t\tlet primaryButton: string;\n\t\tswitch (reason) {\n\t\t\tcase ShutdownReason.CLOSE:\n\t\t\t\tmessage = localize('closeTheWindow.message', \"Are you sure you want to close the window?\");\n\t\t\t\tprimaryButton = localize({ key: 'closeTheWindow', comment: ['&& denotes a mnemonic'] }, \"&&Close Window\");\n\t\t\t\tbreak;\n\t\t\tcase ShutdownReason.LOAD:\n\t\t\t\tmessage = localize('changeWorkspace.message', \"Are you sure you want to change the workspace?\");\n\t\t\t\tprimaryButton = localize({ key: 'changeWorkspace', comment: ['&& denotes a mnemonic'] }, \"Change &&Workspace\");\n\t\t\t\tbreak;\n\t\t\tcase ShutdownReason.RELOAD:\n\t\t\t\tmessage = localize('reloadTheWindow.message', \"Are you sure you want to reload the window?\");\n\t\t\t\tprimaryButton = localize({ key: 'reloadTheWindow', comment: ['&& denotes a mnemonic'] }, \"&&Reload Window\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmessage = localize('quit.message', \"Are you sure you want to quit?\");\n\t\t\t\tprimaryButton = localize({ key: 'quit', comment: ['&& denotes a mnemonic'] }, \"&&Quit\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst result = await this._dialogService.confirm({\n\t\t\tmessage,\n\t\t\tdetail: localize('areYouSureQuiteBulkEdit.detail', \"'{0}' is in progress.\", label || localize('fileOperation', \"File operation\")),\n\t\t\tprimaryButton\n\t\t});\n\n\t\treturn !result.confirmed;\n\t}\n}\n\nregisterSingleton(IBulkEditService, BulkEditService, InstantiationType.Delayed);\n\nconst autoSaveSetting = 'files.refactoring.autoSave';\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\tid: 'files',\n\tproperties: {\n\t\t[autoSaveSetting]: {\n\t\t\tdescription: localize('refactoring.autoSave', \"Controls if files that were part of a refactoring are saved automatically\"),\n\t\t\tdefault: true,\n\t\t\ttype: 'boolean'\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
