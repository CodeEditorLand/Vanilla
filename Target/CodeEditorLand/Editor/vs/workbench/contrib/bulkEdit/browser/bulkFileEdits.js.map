{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/bulkEdit/browser/bulkFileEdits.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { WorkspaceFileEditOptions } from '../../../../editor/common/languages.js';\nimport { IFileService, FileSystemProviderCapabilities, IFileContent, IFileStatWithMetadata } from '../../../../platform/files/common/files.js';\nimport { IProgress } from '../../../../platform/progress/common/progress.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IWorkingCopyFileService, IFileOperationUndoRedoInfo, IMoveOperation, ICopyOperation, IDeleteOperation, ICreateOperation, ICreateFileOperation } from '../../../services/workingCopy/common/workingCopyFileService.js';\nimport { IWorkspaceUndoRedoElement, UndoRedoElementType, IUndoRedoService, UndoRedoGroup, UndoRedoSource } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { ResourceFileEdit } from '../../../../editor/browser/services/bulkEditService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { tail } from '../../../../base/common/arrays.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { Schemas } from '../../../../base/common/network.js';\n\ninterface IFileOperation {\n\turis: URI[];\n\tperform(token: CancellationToken): Promise<IFileOperation>;\n}\n\nclass Noop implements IFileOperation {\n\treadonly uris = [];\n\tasync perform() { return this; }\n\ttoString(): string {\n\t\treturn '(noop)';\n\t}\n}\n\nclass RenameEdit {\n\treadonly type = 'rename';\n\tconstructor(\n\t\treadonly newUri: URI,\n\t\treadonly oldUri: URI,\n\t\treadonly options: WorkspaceFileEditOptions\n\t) { }\n}\n\nclass RenameOperation implements IFileOperation {\n\n\tconstructor(\n\t\tprivate readonly _edits: RenameEdit[],\n\t\tprivate readonly _undoRedoInfo: IFileOperationUndoRedoInfo,\n\t\t@IWorkingCopyFileService private readonly _workingCopyFileService: IWorkingCopyFileService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t) { }\n\n\tget uris() {\n\t\treturn this._edits.flatMap(edit => [edit.newUri, edit.oldUri]);\n\t}\n\n\tasync perform(token: CancellationToken): Promise<IFileOperation> {\n\n\t\tconst moves: IMoveOperation[] = [];\n\t\tconst undoes: RenameEdit[] = [];\n\t\tfor (const edit of this._edits) {\n\t\t\t// check: not overwriting, but ignoring, and the target file exists\n\t\t\tconst skip = edit.options.overwrite === undefined && edit.options.ignoreIfExists && await this._fileService.exists(edit.newUri);\n\t\t\tif (!skip) {\n\t\t\t\tmoves.push({\n\t\t\t\t\tfile: { source: edit.oldUri, target: edit.newUri },\n\t\t\t\t\toverwrite: edit.options.overwrite\n\t\t\t\t});\n\n\t\t\t\t// reverse edit\n\t\t\t\tundoes.push(new RenameEdit(edit.oldUri, edit.newUri, edit.options));\n\t\t\t}\n\t\t}\n\n\t\tif (moves.length === 0) {\n\t\t\treturn new Noop();\n\t\t}\n\n\t\tawait this._workingCopyFileService.move(moves, token, this._undoRedoInfo);\n\t\treturn new RenameOperation(undoes, { isUndoing: true }, this._workingCopyFileService, this._fileService);\n\t}\n\n\ttoString(): string {\n\t\treturn `(rename ${this._edits.map(edit => `${edit.oldUri} to ${edit.newUri}`).join(', ')})`;\n\t}\n}\n\nclass CopyEdit {\n\treadonly type = 'copy';\n\tconstructor(\n\t\treadonly newUri: URI,\n\t\treadonly oldUri: URI,\n\t\treadonly options: WorkspaceFileEditOptions\n\t) { }\n}\n\nclass CopyOperation implements IFileOperation {\n\n\tconstructor(\n\t\tprivate readonly _edits: CopyEdit[],\n\t\tprivate readonly _undoRedoInfo: IFileOperationUndoRedoInfo,\n\t\t@IWorkingCopyFileService private readonly _workingCopyFileService: IWorkingCopyFileService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService\n\t) { }\n\n\tget uris() {\n\t\treturn this._edits.flatMap(edit => [edit.newUri, edit.oldUri]);\n\t}\n\n\tasync perform(token: CancellationToken): Promise<IFileOperation> {\n\n\t\t// (1) create copy operations, remove noops\n\t\tconst copies: ICopyOperation[] = [];\n\t\tfor (const edit of this._edits) {\n\t\t\t//check: not overwriting, but ignoring, and the target file exists\n\t\t\tconst skip = edit.options.overwrite === undefined && edit.options.ignoreIfExists && await this._fileService.exists(edit.newUri);\n\t\t\tif (!skip) {\n\t\t\t\tcopies.push({ file: { source: edit.oldUri, target: edit.newUri }, overwrite: edit.options.overwrite });\n\t\t\t}\n\t\t}\n\n\t\tif (copies.length === 0) {\n\t\t\treturn new Noop();\n\t\t}\n\n\t\t// (2) perform the actual copy and use the return stats to build undo edits\n\t\tconst stats = await this._workingCopyFileService.copy(copies, token, this._undoRedoInfo);\n\t\tconst undoes: DeleteEdit[] = [];\n\n\t\tfor (let i = 0; i < stats.length; i++) {\n\t\t\tconst stat = stats[i];\n\t\t\tconst edit = this._edits[i];\n\t\t\tundoes.push(new DeleteEdit(stat.resource, { recursive: true, folder: this._edits[i].options.folder || stat.isDirectory, ...edit.options }, false));\n\t\t}\n\n\t\treturn this._instaService.createInstance(DeleteOperation, undoes, { isUndoing: true });\n\t}\n\n\ttoString(): string {\n\t\treturn `(copy ${this._edits.map(edit => `${edit.oldUri} to ${edit.newUri}`).join(', ')})`;\n\t}\n}\n\nclass CreateEdit {\n\treadonly type = 'create';\n\tconstructor(\n\t\treadonly newUri: URI,\n\t\treadonly options: WorkspaceFileEditOptions,\n\t\treadonly contents: VSBuffer | undefined,\n\t) { }\n}\n\nclass CreateOperation implements IFileOperation {\n\n\tconstructor(\n\t\tprivate readonly _edits: CreateEdit[],\n\t\tprivate readonly _undoRedoInfo: IFileOperationUndoRedoInfo,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IWorkingCopyFileService private readonly _workingCopyFileService: IWorkingCopyFileService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService\n\t) { }\n\n\tget uris() {\n\t\treturn this._edits.map(edit => edit.newUri);\n\t}\n\n\tasync perform(token: CancellationToken): Promise<IFileOperation> {\n\n\t\tconst folderCreates: ICreateOperation[] = [];\n\t\tconst fileCreates: ICreateFileOperation[] = [];\n\t\tconst undoes: DeleteEdit[] = [];\n\n\t\tfor (const edit of this._edits) {\n\t\t\tif (edit.newUri.scheme === Schemas.untitled) {\n\t\t\t\tcontinue; // ignore, will be handled by a later edit\n\t\t\t}\n\t\t\tif (edit.options.overwrite === undefined && edit.options.ignoreIfExists && await this._fileService.exists(edit.newUri)) {\n\t\t\t\tcontinue; // not overwriting, but ignoring, and the target file exists\n\t\t\t}\n\t\t\tif (edit.options.folder) {\n\t\t\t\tfolderCreates.push({ resource: edit.newUri });\n\t\t\t} else {\n\t\t\t\t// If the contents are part of the edit they include the encoding, thus use them. Otherwise get the encoding for a new empty file.\n\t\t\t\tconst encodedReadable = typeof edit.contents !== 'undefined' ? edit.contents : await this._textFileService.getEncodedReadable(edit.newUri);\n\t\t\t\tfileCreates.push({ resource: edit.newUri, contents: encodedReadable, overwrite: edit.options.overwrite });\n\t\t\t}\n\t\t\tundoes.push(new DeleteEdit(edit.newUri, edit.options, !edit.options.folder && !edit.contents));\n\t\t}\n\n\t\tif (folderCreates.length === 0 && fileCreates.length === 0) {\n\t\t\treturn new Noop();\n\t\t}\n\n\t\tawait this._workingCopyFileService.createFolder(folderCreates, token, this._undoRedoInfo);\n\t\tawait this._workingCopyFileService.create(fileCreates, token, this._undoRedoInfo);\n\n\t\treturn this._instaService.createInstance(DeleteOperation, undoes, { isUndoing: true });\n\t}\n\n\ttoString(): string {\n\t\treturn `(create ${this._edits.map(edit => edit.options.folder ? `folder ${edit.newUri}` : `file ${edit.newUri} with ${edit.contents?.byteLength || 0} bytes`).join(', ')})`;\n\t}\n}\n\nclass DeleteEdit {\n\treadonly type = 'delete';\n\tconstructor(\n\t\treadonly oldUri: URI,\n\t\treadonly options: WorkspaceFileEditOptions,\n\t\treadonly undoesCreate: boolean,\n\t) { }\n}\n\nclass DeleteOperation implements IFileOperation {\n\n\tconstructor(\n\t\tprivate _edits: DeleteEdit[],\n\t\tprivate readonly _undoRedoInfo: IFileOperationUndoRedoInfo,\n\t\t@IWorkingCopyFileService private readonly _workingCopyFileService: IWorkingCopyFileService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService\n\t) { }\n\n\tget uris() {\n\t\treturn this._edits.map(edit => edit.oldUri);\n\t}\n\n\tasync perform(token: CancellationToken): Promise<IFileOperation> {\n\t\t// delete file\n\n\t\tconst deletes: IDeleteOperation[] = [];\n\t\tconst undoes: CreateEdit[] = [];\n\n\t\tfor (const edit of this._edits) {\n\t\t\tlet fileStat: IFileStatWithMetadata | undefined;\n\t\t\ttry {\n\t\t\t\tfileStat = await this._fileService.resolve(edit.oldUri, { resolveMetadata: true });\n\t\t\t} catch (err) {\n\t\t\t\tif (!edit.options.ignoreIfNotExists) {\n\t\t\t\t\tthrow new Error(`${edit.oldUri} does not exist and can not be deleted`);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdeletes.push({\n\t\t\t\tresource: edit.oldUri,\n\t\t\t\trecursive: edit.options.recursive,\n\t\t\t\tuseTrash: !edit.options.skipTrashBin && this._fileService.hasCapability(edit.oldUri, FileSystemProviderCapabilities.Trash) && this._configurationService.getValue<boolean>('files.enableTrash')\n\t\t\t});\n\n\n\t\t\t// read file contents for undo operation. when a file is too large it won't be restored\n\t\t\tlet fileContent: IFileContent | undefined;\n\t\t\tif (!edit.undoesCreate && !edit.options.folder && !(typeof edit.options.maxSize === 'number' && fileStat.size > edit.options.maxSize)) {\n\t\t\t\ttry {\n\t\t\t\t\tfileContent = await this._fileService.readFile(edit.oldUri);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis._logService.error(err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fileContent !== undefined) {\n\t\t\t\tundoes.push(new CreateEdit(edit.oldUri, edit.options, fileContent.value));\n\t\t\t}\n\t\t}\n\n\t\tif (deletes.length === 0) {\n\t\t\treturn new Noop();\n\t\t}\n\n\t\tawait this._workingCopyFileService.delete(deletes, token, this._undoRedoInfo);\n\n\t\tif (undoes.length === 0) {\n\t\t\treturn new Noop();\n\t\t}\n\t\treturn this._instaService.createInstance(CreateOperation, undoes, { isUndoing: true });\n\t}\n\n\ttoString(): string {\n\t\treturn `(delete ${this._edits.map(edit => edit.oldUri).join(', ')})`;\n\t}\n}\n\nclass FileUndoRedoElement implements IWorkspaceUndoRedoElement {\n\n\treadonly type = UndoRedoElementType.Workspace;\n\n\treadonly resources: readonly URI[];\n\n\tconstructor(\n\t\treadonly label: string,\n\t\treadonly code: string,\n\t\treadonly operations: IFileOperation[],\n\t\treadonly confirmBeforeUndo: boolean\n\t) {\n\t\tthis.resources = operations.flatMap(op => op.uris);\n\t}\n\n\tasync undo(): Promise<void> {\n\t\tawait this._reverse();\n\t}\n\n\tasync redo(): Promise<void> {\n\t\tawait this._reverse();\n\t}\n\n\tprivate async _reverse() {\n\t\tfor (let i = 0; i < this.operations.length; i++) {\n\t\t\tconst op = this.operations[i];\n\t\t\tconst undo = await op.perform(CancellationToken.None);\n\t\t\tthis.operations[i] = undo;\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\treturn this.operations.map(op => String(op)).join(', ');\n\t}\n}\n\nexport class BulkFileEdits {\n\n\tconstructor(\n\t\tprivate readonly _label: string,\n\t\tprivate readonly _code: string,\n\t\tprivate readonly _undoRedoGroup: UndoRedoGroup,\n\t\tprivate readonly _undoRedoSource: UndoRedoSource | undefined,\n\t\tprivate readonly _confirmBeforeUndo: boolean,\n\t\tprivate readonly _progress: IProgress<void>,\n\t\tprivate readonly _token: CancellationToken,\n\t\tprivate readonly _edits: ResourceFileEdit[],\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t) { }\n\n\tasync apply(): Promise<readonly URI[]> {\n\t\tconst undoOperations: IFileOperation[] = [];\n\t\tconst undoRedoInfo = { undoRedoGroupId: this._undoRedoGroup.id };\n\n\t\tconst edits: Array<RenameEdit | CopyEdit | DeleteEdit | CreateEdit> = [];\n\t\tfor (const edit of this._edits) {\n\t\t\tif (edit.newResource && edit.oldResource && !edit.options?.copy) {\n\t\t\t\tedits.push(new RenameEdit(edit.newResource, edit.oldResource, edit.options ?? {}));\n\t\t\t} else if (edit.newResource && edit.oldResource && edit.options?.copy) {\n\t\t\t\tedits.push(new CopyEdit(edit.newResource, edit.oldResource, edit.options ?? {}));\n\t\t\t} else if (!edit.newResource && edit.oldResource) {\n\t\t\t\tedits.push(new DeleteEdit(edit.oldResource, edit.options ?? {}, false));\n\t\t\t} else if (edit.newResource && !edit.oldResource) {\n\t\t\t\tedits.push(new CreateEdit(edit.newResource, edit.options ?? {}, await edit.options.contents));\n\t\t\t}\n\t\t}\n\n\t\tif (edits.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst groups: Array<RenameEdit | CopyEdit | DeleteEdit | CreateEdit>[] = [];\n\t\tgroups[0] = [edits[0]];\n\n\t\tfor (let i = 1; i < edits.length; i++) {\n\t\t\tconst edit = edits[i];\n\t\t\tconst lastGroup = tail(groups);\n\t\t\tif (lastGroup?.[0].type === edit.type) {\n\t\t\t\tlastGroup.push(edit);\n\t\t\t} else {\n\t\t\t\tgroups.push([edit]);\n\t\t\t}\n\t\t}\n\n\t\tfor (const group of groups) {\n\n\t\t\tif (this._token.isCancellationRequested) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet op: IFileOperation | undefined;\n\t\t\tswitch (group[0].type) {\n\t\t\t\tcase 'rename':\n\t\t\t\t\top = this._instaService.createInstance(RenameOperation, <RenameEdit[]>group, undoRedoInfo);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'copy':\n\t\t\t\t\top = this._instaService.createInstance(CopyOperation, <CopyEdit[]>group, undoRedoInfo);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'delete':\n\t\t\t\t\top = this._instaService.createInstance(DeleteOperation, <DeleteEdit[]>group, undoRedoInfo);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'create':\n\t\t\t\t\top = this._instaService.createInstance(CreateOperation, <CreateEdit[]>group, undoRedoInfo);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (op) {\n\t\t\t\tconst undoOp = await op.perform(this._token);\n\t\t\t\tundoOperations.push(undoOp);\n\t\t\t}\n\t\t\tthis._progress.report(undefined);\n\t\t}\n\n\t\tconst undoRedoElement = new FileUndoRedoElement(this._label, this._code, undoOperations, this._confirmBeforeUndo);\n\t\tthis._undoRedoService.pushElement(undoRedoElement, this._undoRedoGroup, this._undoRedoSource);\n\t\treturn undoRedoElement.resources;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
