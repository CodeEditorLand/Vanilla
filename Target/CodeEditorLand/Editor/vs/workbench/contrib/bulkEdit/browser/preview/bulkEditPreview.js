var C=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var v=(n,e,i,r)=>{for(var o=r>1?void 0:r?w(e,i):e,t=n.length-1,s;t>=0;t--)(s=n[t])&&(o=(r?s(e,i,o):s(o))||o);return r&&o&&C(e,i,o),o},l=(n,e)=>(i,r)=>e(i,r,n);import{coalesceInPlace as M}from"../../../../../base/common/arrays.js";import{Codicon as T}from"../../../../../base/common/codicons.js";import{Emitter as O,Event as b}from"../../../../../base/common/event.js";import{DisposableStore as U}from"../../../../../base/common/lifecycle.js";import{ResourceMap as F}from"../../../../../base/common/map.js";import{extUri as x}from"../../../../../base/common/resources.js";import{MicrotaskDelay as B}from"../../../../../base/common/symbols.js";import{URI as y}from"../../../../../base/common/uri.js";import{generateUuid as D}from"../../../../../base/common/uuid.js";import{ResourceFileEdit as S,ResourceTextEdit as E}from"../../../../../editor/browser/services/bulkEditService.js";import{EditOperation as P}from"../../../../../editor/common/core/editOperation.js";import{Range as k}from"../../../../../editor/common/core/range.js";import"../../../../../editor/common/languages.js";import{ILanguageService as A}from"../../../../../editor/common/languages/language.js";import{createTextBufferFactoryFromSnapshot as W}from"../../../../../editor/common/model/textModel.js";import{IModelService as L}from"../../../../../editor/common/services/model.js";import{ITextModelService as q}from"../../../../../editor/common/services/resolverService.js";import{SnippetParser as z}from"../../../../../editor/contrib/snippet/browser/snippetParser.js";import{localize as K}from"../../../../../nls.js";import{IFileService as N}from"../../../../../platform/files/common/files.js";import{IInstantiationService as I}from"../../../../../platform/instantiation/common/instantiation.js";import{ConflictDetector as j}from"../conflicts.js";class G{_states=new WeakMap;_checkedCount=0;_onDidChange=new O;onDidChange=this._onDidChange.event;dispose(){this._onDidChange.dispose()}get checkedCount(){return this._checkedCount}isChecked(e){return this._states.get(e)??!1}updateChecked(e,i){const r=this._states.get(e);r!==i&&(r===void 0?i&&(this._checkedCount+=1):i?this._checkedCount+=1:this._checkedCount-=1,this._states.set(e,i),this._onDidChange.fire(e))}}class H{constructor(e,i){this.parent=e;this.textEdit=i}}var J=(o=>(o[o.TextEdit=1]="TextEdit",o[o.Create=2]="Create",o[o.Delete=4]="Delete",o[o.Rename=8]="Rename",o))(J||{});class Q{constructor(e,i){this.uri=e;this.parent=i}type=0;textEdits=[];originalEdits=new Map;newUri;addEdit(e,i,r){this.type|=i,this.originalEdits.set(e,r),r instanceof E?this.textEdits.push(new H(this,r)):i===8&&(this.newUri=r.newResource)}needsConfirmation(){for(const[,e]of this.originalEdits)if(!this.parent.checked.isChecked(e))return!0;return!1}}class m{constructor(e=m._defaultMetadata){this.metadata=e}static _defaultMetadata=Object.freeze({label:K("default","Other"),icon:T.symbolFile,needsConfirmation:!1});static keyOf(e){return e?.label||"<default>"}operationByResource=new Map;get fileOperations(){return this.operationByResource.values()}}let p=class{constructor(e,i,r){this._bulkEdit=e;this._fileService=i;this.conflicts=r.createInstance(j,e)}static async create(e,i){return await e.get(I).createInstance(p,i)._init()}checked=new G;fileOperations=[];categories=[];conflicts;dispose(){this.checked.dispose(),this.conflicts.dispose()}async _init(){const e=new Map,i=new Map,r=new F;for(let o=0;o<this._bulkEdit.length;o++){const t=this._bulkEdit[o];let s,f;if(this.checked.updateChecked(t,!t.metadata?.needsConfirmation),t instanceof E)f=1,s=t.resource;else if(t instanceof S)if(t.newResource&&t.oldResource){if(f=8,s=t.oldResource,t.options?.overwrite===void 0&&t.options?.ignoreIfExists&&await this._fileService.exists(s))continue;r.set(t.newResource,s)}else if(t.oldResource){if(f=4,s=t.oldResource,t.options?.ignoreIfNotExists&&!await this._fileService.exists(s))continue}else if(t.newResource){if(f=2,s=t.newResource,t.options?.overwrite===void 0&&t.options?.ignoreIfExists&&await this._fileService.exists(s))continue}else continue;else continue;const _=(c,g)=>{let u=x.getComparisonKey(c,!0),d=g.get(u);!d&&r.has(c)&&(c=r.get(c),u=x.getComparisonKey(c,!0),d=g.get(u)),d||(d=new Q(c,this),g.set(u,d)),d.addEdit(o,f,t)};_(s,e);const R=m.keyOf(t.metadata);let h=i.get(R);h||(h=new m(t.metadata),i.set(R,h)),_(s,h.operationByResource)}e.forEach(o=>this.fileOperations.push(o)),i.forEach(o=>this.categories.push(o));for(const o of this.fileOperations)if(o.type!==1){let t=!0;for(const s of o.originalEdits.values())s instanceof S&&(t=t&&this.checked.isChecked(s));if(!t)for(const s of o.originalEdits.values())this.checked.updateChecked(s,t)}return this.categories.sort((o,t)=>o.metadata.needsConfirmation===t.metadata.needsConfirmation?o.metadata.label.localeCompare(t.metadata.label):o.metadata.needsConfirmation?-1:1),this}getWorkspaceEdit(){const e=[];let i=!0;for(let r=0;r<this._bulkEdit.length;r++){const o=this._bulkEdit[r];if(this.checked.isChecked(o)){e[r]=o;continue}i=!1}return i?this._bulkEdit:(M(e),e)}getFileEdits(e){for(const i of this.fileOperations)if(i.uri.toString()===e.toString()){const r=[];let o=!1;for(const t of i.originalEdits.values())t instanceof E?this.checked.isChecked(t)&&r.push(P.replaceMove(k.lift(t.textEdit.range),t.textEdit.insertAsSnippet?z.asInsertText(t.textEdit.text):t.textEdit.text)):this.checked.isChecked(t)||(o=!0);return o?[]:r.sort((t,s)=>k.compareRangesUsingStarts(t.range,s.range))}return[]}getUriOfEdit(e){for(const i of this.fileOperations)for(const r of i.originalEdits.values())if(r===e)return i.uri;throw new Error("invalid edit")}};p=v([l(1,N),l(2,I)],p);let a=class{constructor(e,i,r,o){this._operations=e;this._languageService=i;this._modelService=r;this._textModelResolverService=o;this._disposables.add(this._textModelResolverService.registerTextModelContentProvider(a.Schema,this)),this._ready=this._init()}static Schema="vscode-bulkeditpreview-editor";static emptyPreview=y.from({scheme:this.Schema,fragment:"empty"});static fromPreviewUri(e){return y.parse(e.query)}_disposables=new U;_ready;_modelPreviewEdits=new Map;_instanceId=D();dispose(){this._disposables.dispose()}asPreviewUri(e){return y.from({scheme:a.Schema,authority:this._instanceId,path:e.path,query:e.toString()})}async _init(){for(const e of this._operations.fileOperations)await this._applyTextEditsToPreviewModel(e.uri);this._disposables.add(b.debounce(this._operations.checked.onDidChange,(e,i)=>i,B)(e=>{const i=this._operations.getUriOfEdit(e);this._applyTextEditsToPreviewModel(i)}))}async _applyTextEditsToPreviewModel(e){const i=await this._getOrCreatePreviewModel(e),r=this._modelPreviewEdits.get(i.id);r&&i.applyEdits(r);const o=this._operations.getFileEdits(e),t=i.applyEdits(o,!0);this._modelPreviewEdits.set(i.id,t)}async _getOrCreatePreviewModel(e){const i=this.asPreviewUri(e);let r=this._modelService.getModel(i);if(!r){try{const o=await this._textModelResolverService.createModelReference(e),t=o.object.textEditorModel;r=this._modelService.createModel(W(t.createSnapshot()),this._languageService.createById(t.getLanguageId()),i),o.dispose()}catch{r=this._modelService.createModel("",this._languageService.createByFilepathOrFirstLine(i),i)}queueMicrotask(async()=>{this._disposables.add(await this._textModelResolverService.createModelReference(r.uri))})}return r}async provideTextContent(e){return e.toString()===a.emptyPreview.toString()?this._modelService.createModel("",null,e):(await this._ready,this._modelService.getModel(e))}};a=v([l(1,A),l(2,L),l(3,q)],a);export{m as BulkCategory,a as BulkEditPreviewProvider,Q as BulkFileOperation,J as BulkFileOperationType,p as BulkFileOperations,H as BulkTextEdit,G as CheckedStates};
