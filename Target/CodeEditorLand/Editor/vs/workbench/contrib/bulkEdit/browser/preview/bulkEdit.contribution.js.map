{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { WorkbenchPhase, registerWorkbenchContribution2 } from '../../../../common/contributions.js';\nimport { IBulkEditService, ResourceEdit } from '../../../../../editor/browser/services/bulkEditService.js';\nimport { BulkEditPane } from './bulkEditPane.js';\nimport { IViewContainersRegistry, Extensions as ViewContainerExtensions, ViewContainerLocation, IViewsRegistry } from '../../../../common/views.js';\nimport { IViewsService } from '../../../../services/views/common/viewsService.js';\nimport { FocusedViewContext } from '../../../../common/contextkeys.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { ViewPaneContainer } from '../../../../browser/parts/views/viewPaneContainer.js';\nimport { RawContextKey, IContextKeyService, IContextKey, ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { KeyMod, KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { WorkbenchListFocusContextKey } from '../../../../../platform/list/browser/listService.js';\nimport { SyncDescriptor } from '../../../../../platform/instantiation/common/descriptors.js';\nimport { MenuId, registerAction2, Action2 } from '../../../../../platform/actions/common/actions.js';\nimport { EditorResourceAccessor, SideBySideEditor } from '../../../../common/editor.js';\nimport { EditorInput } from '../../../../common/editor/editorInput.js';\nimport type { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\nimport Severity from '../../../../../base/common/severity.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { registerIcon } from '../../../../../platform/theme/common/iconRegistry.js';\nimport { IPaneCompositePartService } from '../../../../services/panecomposite/browser/panecomposite.js';\n\nasync function getBulkEditPane(viewsService: IViewsService): Promise<BulkEditPane | undefined> {\n\tconst view = await viewsService.openView(BulkEditPane.ID, true);\n\tif (view instanceof BulkEditPane) {\n\t\treturn view;\n\t}\n\treturn undefined;\n}\n\nclass UXState {\n\n\tprivate readonly _activePanel: string | undefined;\n\n\tconstructor(\n\t\t@IPaneCompositePartService private readonly _paneCompositeService: IPaneCompositePartService,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t) {\n\t\tthis._activePanel = _paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel)?.getId();\n\t}\n\n\tasync restore(panels: boolean, editors: boolean): Promise<void> {\n\n\t\t// (1) restore previous panel\n\t\tif (panels) {\n\t\t\tif (typeof this._activePanel === 'string') {\n\t\t\t\tawait this._paneCompositeService.openPaneComposite(this._activePanel, ViewContainerLocation.Panel);\n\t\t\t} else {\n\t\t\t\tthis._paneCompositeService.hideActivePaneComposite(ViewContainerLocation.Panel);\n\t\t\t}\n\t\t}\n\n\t\t// (2) close preview editors\n\t\tif (editors) {\n\t\t\tfor (const group of this._editorGroupsService.groups) {\n\t\t\t\tconst previewEditors: EditorInput[] = [];\n\t\t\t\tfor (const input of group.editors) {\n\n\t\t\t\t\tconst resource = EditorResourceAccessor.getCanonicalUri(input, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t\t\t\tif (resource?.scheme === BulkEditPane.Schema) {\n\t\t\t\t\t\tpreviewEditors.push(input);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (previewEditors.length) {\n\t\t\t\t\tgroup.closeEditors(previewEditors, { preserveFocus: true });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass PreviewSession {\n\tconstructor(\n\t\treadonly uxState: UXState,\n\t\treadonly cts: CancellationTokenSource = new CancellationTokenSource(),\n\t) { }\n}\n\nclass BulkEditPreviewContribution {\n\n\tstatic readonly ID = 'workbench.contrib.bulkEditPreview';\n\n\tstatic readonly ctxEnabled = new RawContextKey('refactorPreview.enabled', false);\n\n\tprivate readonly _ctxEnabled: IContextKey<boolean>;\n\n\tprivate _activeSession: PreviewSession | undefined;\n\n\tconstructor(\n\t\t@IPaneCompositePartService private readonly _paneCompositeService: IPaneCompositePartService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IBulkEditService bulkEditService: IBulkEditService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tbulkEditService.setPreviewHandler(edits => this._previewEdit(edits));\n\t\tthis._ctxEnabled = BulkEditPreviewContribution.ctxEnabled.bindTo(contextKeyService);\n\t}\n\n\tprivate async _previewEdit(edits: ResourceEdit[]): Promise<ResourceEdit[]> {\n\t\tthis._ctxEnabled.set(true);\n\n\t\tconst uxState = this._activeSession?.uxState ?? new UXState(this._paneCompositeService, this._editorGroupsService);\n\t\tconst view = await getBulkEditPane(this._viewsService);\n\t\tif (!view) {\n\t\t\tthis._ctxEnabled.set(false);\n\t\t\treturn edits;\n\t\t}\n\n\t\t// check for active preview session and let the user decide\n\t\tif (view.hasInput()) {\n\t\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: localize('overlap', \"Another refactoring is being previewed.\"),\n\t\t\t\tdetail: localize('detail', \"Press 'Continue' to discard the previous refactoring and continue with the current refactoring.\"),\n\t\t\t\tprimaryButton: localize({ key: 'continue', comment: ['&& denotes a mnemonic'] }, \"&&Continue\")\n\t\t\t});\n\n\t\t\tif (!confirmed) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// session\n\t\tlet session: PreviewSession;\n\t\tif (this._activeSession) {\n\t\t\tawait this._activeSession.uxState.restore(false, true);\n\t\t\tthis._activeSession.cts.dispose(true);\n\t\t\tsession = new PreviewSession(uxState);\n\t\t} else {\n\t\t\tsession = new PreviewSession(uxState);\n\t\t}\n\t\tthis._activeSession = session;\n\n\t\t// the actual work...\n\t\ttry {\n\n\t\t\treturn await view.setInput(edits, session.cts.token) ?? [];\n\n\t\t} finally {\n\t\t\t// restore UX state\n\t\t\tif (this._activeSession === session) {\n\t\t\t\tawait this._activeSession.uxState.restore(true, true);\n\t\t\t\tthis._activeSession.cts.dispose();\n\t\t\t\tthis._ctxEnabled.set(false);\n\t\t\t\tthis._activeSession = undefined;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// CMD: accept\nregisterAction2(class ApplyAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'refactorPreview.apply',\n\t\t\ttitle: localize2('apply', \"Apply Refactoring\"),\n\t\t\tcategory: localize2('cat', \"Refactor Preview\"),\n\t\t\ticon: Codicon.check,\n\t\t\tprecondition: ContextKeyExpr.and(BulkEditPreviewContribution.ctxEnabled, BulkEditPane.ctxHasCheckedChanges),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.BulkEditContext,\n\t\t\t\torder: 1\n\t\t\t}],\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib - 10,\n\t\t\t\twhen: ContextKeyExpr.and(BulkEditPreviewContribution.ctxEnabled, FocusedViewContext.isEqualTo(BulkEditPane.ID)),\n\t\t\t\tprimary: KeyMod.CtrlCmd + KeyCode.Enter,\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<any> {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst view = await getBulkEditPane(viewsService);\n\t\tview?.accept();\n\t}\n});\n\n// CMD: discard\nregisterAction2(class DiscardAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'refactorPreview.discard',\n\t\t\ttitle: localize2('Discard', \"Discard Refactoring\"),\n\t\t\tcategory: localize2('cat', \"Refactor Preview\"),\n\t\t\ticon: Codicon.clearAll,\n\t\t\tprecondition: BulkEditPreviewContribution.ctxEnabled,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.BulkEditContext,\n\t\t\t\torder: 2\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst view = await getBulkEditPane(viewsService);\n\t\tview?.discard();\n\t}\n});\n\n\n// CMD: toggle change\nregisterAction2(class ToggleAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'refactorPreview.toggleCheckedState',\n\t\t\ttitle: localize2('toogleSelection', \"Toggle Change\"),\n\t\t\tcategory: localize2('cat', \"Refactor Preview\"),\n\t\t\tprecondition: BulkEditPreviewContribution.ctxEnabled,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: WorkbenchListFocusContextKey,\n\t\t\t\tprimary: KeyCode.Space,\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.BulkEditContext,\n\t\t\t\tgroup: 'navigation'\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst view = await getBulkEditPane(viewsService);\n\t\tview?.toggleChecked();\n\t}\n});\n\n\n// CMD: toggle category\nregisterAction2(class GroupByFile extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'refactorPreview.groupByFile',\n\t\t\ttitle: localize2('groupByFile', \"Group Changes By File\"),\n\t\t\tcategory: localize2('cat', \"Refactor Preview\"),\n\t\t\ticon: Codicon.ungroupByRefType,\n\t\t\tprecondition: ContextKeyExpr.and(BulkEditPane.ctxHasCategories, BulkEditPane.ctxGroupByFile.negate(), BulkEditPreviewContribution.ctxEnabled),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.BulkEditTitle,\n\t\t\t\twhen: ContextKeyExpr.and(BulkEditPane.ctxHasCategories, BulkEditPane.ctxGroupByFile.negate()),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 3,\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst view = await getBulkEditPane(viewsService);\n\t\tview?.groupByFile();\n\t}\n});\n\nregisterAction2(class GroupByType extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'refactorPreview.groupByType',\n\t\t\ttitle: localize2('groupByType', \"Group Changes By Type\"),\n\t\t\tcategory: localize2('cat', \"Refactor Preview\"),\n\t\t\ticon: Codicon.groupByRefType,\n\t\t\tprecondition: ContextKeyExpr.and(BulkEditPane.ctxHasCategories, BulkEditPane.ctxGroupByFile, BulkEditPreviewContribution.ctxEnabled),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.BulkEditTitle,\n\t\t\t\twhen: ContextKeyExpr.and(BulkEditPane.ctxHasCategories, BulkEditPane.ctxGroupByFile),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 3\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst view = await getBulkEditPane(viewsService);\n\t\tview?.groupByType();\n\t}\n});\n\nregisterAction2(class ToggleGrouping extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'refactorPreview.toggleGrouping',\n\t\t\ttitle: localize2('groupByType', \"Group Changes By Type\"),\n\t\t\tcategory: localize2('cat', \"Refactor Preview\"),\n\t\t\ticon: Codicon.listTree,\n\t\t\ttoggled: BulkEditPane.ctxGroupByFile.negate(),\n\t\t\tprecondition: ContextKeyExpr.and(BulkEditPane.ctxHasCategories, BulkEditPreviewContribution.ctxEnabled),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.BulkEditContext,\n\t\t\t\torder: 3\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst view = await getBulkEditPane(viewsService);\n\t\tview?.toggleGrouping();\n\t}\n});\n\nregisterWorkbenchContribution2(\n\tBulkEditPreviewContribution.ID, BulkEditPreviewContribution, WorkbenchPhase.BlockRestore\n);\n\nconst refactorPreviewViewIcon = registerIcon('refactor-preview-view-icon', Codicon.lightbulb, localize('refactorPreviewViewIcon', 'View icon of the refactor preview view.'));\n\nconst container = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({\n\tid: BulkEditPane.ID,\n\ttitle: localize2('panel', \"Refactor Preview\"),\n\thideIfEmpty: true,\n\tctorDescriptor: new SyncDescriptor(\n\t\tViewPaneContainer,\n\t\t[BulkEditPane.ID, { mergeViewWithContainerWhenSingleView: true }]\n\t),\n\ticon: refactorPreviewViewIcon,\n\tstorageId: BulkEditPane.ID\n}, ViewContainerLocation.Panel);\n\nRegistry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry).registerViews([{\n\tid: BulkEditPane.ID,\n\tname: localize2('panel', \"Refactor Preview\"),\n\twhen: BulkEditPreviewContribution.ctxEnabled,\n\tctorDescriptor: new SyncDescriptor(BulkEditPane),\n\tcontainerIcon: refactorPreviewViewIcon,\n}], container);\n"],
  "mappings": "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",
  "names": []
}
