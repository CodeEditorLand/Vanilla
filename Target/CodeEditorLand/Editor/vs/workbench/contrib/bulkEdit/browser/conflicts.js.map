{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/bulkEdit/browser/conflicts.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { ResourceEdit, ResourceFileEdit, ResourceTextEdit } from '../../../../editor/browser/services/bulkEditService.js';\nimport { ResourceNotebookCellEdit } from './bulkCellEdits.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport class ConflictDetector {\n\n\tprivate readonly _conflicts = new ResourceMap<boolean>();\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _onDidConflict = new Emitter<this>();\n\treadonly onDidConflict: Event<this> = this._onDidConflict.event;\n\n\tconstructor(\n\t\tedits: ResourceEdit[],\n\t\t@IFileService fileService: IFileService,\n\t\t@IModelService modelService: IModelService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\n\t\tconst _workspaceEditResources = new ResourceMap<boolean>();\n\n\t\tfor (const edit of edits) {\n\t\t\tif (edit instanceof ResourceTextEdit) {\n\t\t\t\t_workspaceEditResources.set(edit.resource, true);\n\t\t\t\tif (typeof edit.versionId === 'number') {\n\t\t\t\t\tconst model = modelService.getModel(edit.resource);\n\t\t\t\t\tif (model && model.getVersionId() !== edit.versionId) {\n\t\t\t\t\t\tthis._conflicts.set(edit.resource, true);\n\t\t\t\t\t\tthis._onDidConflict.fire(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (edit instanceof ResourceFileEdit) {\n\t\t\t\tif (edit.newResource) {\n\t\t\t\t\t_workspaceEditResources.set(edit.newResource, true);\n\n\t\t\t\t} else if (edit.oldResource) {\n\t\t\t\t\t_workspaceEditResources.set(edit.oldResource, true);\n\t\t\t\t}\n\t\t\t} else if (edit instanceof ResourceNotebookCellEdit) {\n\t\t\t\t_workspaceEditResources.set(edit.resource, true);\n\n\t\t\t} else {\n\t\t\t\tlogService.warn('UNKNOWN edit type', edit);\n\t\t\t}\n\t\t}\n\n\t\t// listen to file changes\n\t\tthis._disposables.add(fileService.onDidFilesChange(e => {\n\n\t\t\tfor (const uri of _workspaceEditResources.keys()) {\n\t\t\t\t// conflict happens when a file that we are working\n\t\t\t\t// on changes on disk. ignore changes for which a model\n\t\t\t\t// exists because we have a better check for models\n\t\t\t\tif (!modelService.getModel(uri) && e.contains(uri)) {\n\t\t\t\t\tthis._conflicts.set(uri, true);\n\t\t\t\t\tthis._onDidConflict.fire(this);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// listen to model changes...?\n\t\tconst onDidChangeModel = (model: ITextModel) => {\n\n\t\t\t// conflict\n\t\t\tif (_workspaceEditResources.has(model.uri)) {\n\t\t\t\tthis._conflicts.set(model.uri, true);\n\t\t\t\tthis._onDidConflict.fire(this);\n\t\t\t}\n\t\t};\n\t\tfor (const model of modelService.getModels()) {\n\t\t\tthis._disposables.add(model.onDidChangeContent(() => onDidChangeModel(model)));\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._onDidConflict.dispose();\n\t}\n\n\tlist(): URI[] {\n\t\treturn [...this._conflicts.keys()];\n\t}\n\n\thasConflicts(): boolean {\n\t\treturn this._conflicts.size > 0;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,oBAAoB;AAC7B,SAAS,WAAW;AACpB,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,SAAS,aAAa;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,cAAc,kBAAkB,wBAAwB;AACjE,SAAS,gCAAgC;AACzC,SAAS,mBAAmB;AAErB,IAAM,mBAAN,MAAuB;AAAA,EAhB9B,OAgB8B;AAAA;AAAA;AAAA,EAEZ,aAAa,IAAI,YAAqB;AAAA,EACtC,eAAe,IAAI,gBAAgB;AAAA,EAEnC,iBAAiB,IAAI,QAAc;AAAA,EAC3C,gBAA6B,KAAK,eAAe;AAAA,EAE1D,YACC,OACc,aACC,cACF,YACZ;AAED,UAAM,0BAA0B,IAAI,YAAqB;AAEzD,eAAW,QAAQ,OAAO;AACzB,UAAI,gBAAgB,kBAAkB;AACrC,gCAAwB,IAAI,KAAK,UAAU,IAAI;AAC/C,YAAI,OAAO,KAAK,cAAc,UAAU;AACvC,gBAAM,QAAQ,aAAa,SAAS,KAAK,QAAQ;AACjD,cAAI,SAAS,MAAM,aAAa,MAAM,KAAK,WAAW;AACrD,iBAAK,WAAW,IAAI,KAAK,UAAU,IAAI;AACvC,iBAAK,eAAe,KAAK,IAAI;AAAA,UAC9B;AAAA,QACD;AAAA,MAED,WAAW,gBAAgB,kBAAkB;AAC5C,YAAI,KAAK,aAAa;AACrB,kCAAwB,IAAI,KAAK,aAAa,IAAI;AAAA,QAEnD,WAAW,KAAK,aAAa;AAC5B,kCAAwB,IAAI,KAAK,aAAa,IAAI;AAAA,QACnD;AAAA,MACD,WAAW,gBAAgB,0BAA0B;AACpD,gCAAwB,IAAI,KAAK,UAAU,IAAI;AAAA,MAEhD,OAAO;AACN,mBAAW,KAAK,qBAAqB,IAAI;AAAA,MAC1C;AAAA,IACD;AAGA,SAAK,aAAa,IAAI,YAAY,iBAAiB,OAAK;AAEvD,iBAAW,OAAO,wBAAwB,KAAK,GAAG;AAIjD,YAAI,CAAC,aAAa,SAAS,GAAG,KAAK,EAAE,SAAS,GAAG,GAAG;AACnD,eAAK,WAAW,IAAI,KAAK,IAAI;AAC7B,eAAK,eAAe,KAAK,IAAI;AAC7B;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,mBAAmB,wBAAC,UAAsB;AAG/C,UAAI,wBAAwB,IAAI,MAAM,GAAG,GAAG;AAC3C,aAAK,WAAW,IAAI,MAAM,KAAK,IAAI;AACnC,aAAK,eAAe,KAAK,IAAI;AAAA,MAC9B;AAAA,IACD,GAPyB;AAQzB,eAAW,SAAS,aAAa,UAAU,GAAG;AAC7C,WAAK,aAAa,IAAI,MAAM,mBAAmB,MAAM,iBAAiB,KAAK,CAAC,CAAC;AAAA,IAC9E;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,aAAa,QAAQ;AAC1B,SAAK,eAAe,QAAQ;AAAA,EAC7B;AAAA,EAEA,OAAc;AACb,WAAO,CAAC,GAAG,KAAK,WAAW,KAAK,CAAC;AAAA,EAClC;AAAA,EAEA,eAAwB;AACvB,WAAO,KAAK,WAAW,OAAO;AAAA,EAC/B;AACD;AApFa,mBAAN;AAAA,EAUJ;AAAA,EACA;AAAA,EACA;AAAA,GAZU;",
  "names": []
}
