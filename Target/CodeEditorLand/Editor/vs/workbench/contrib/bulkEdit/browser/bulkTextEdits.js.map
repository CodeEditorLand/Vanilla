{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/bulkEdit/browser/bulkTextEdits.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport {\n\ttype IDisposable,\n\ttype IReference,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport { ResourceTextEdit } from \"../../../../editor/browser/services/bulkEditService.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../../editor/common/core/editOperation.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { Selection } from \"../../../../editor/common/core/selection.js\";\nimport type {\n\tEndOfLineSequence,\n\tITextModel,\n} from \"../../../../editor/common/model.js\";\nimport {\n\tMultiModelEditStackElement,\n\tSingleModelEditStackElement,\n} from \"../../../../editor/common/model/editStack.js\";\nimport { IEditorWorkerService } from \"../../../../editor/common/services/editorWorker.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport { SnippetController2 } from \"../../../../editor/contrib/snippet/browser/snippetController2.js\";\nimport { SnippetParser } from \"../../../../editor/contrib/snippet/browser/snippetParser.js\";\nimport type { ISnippetEdit } from \"../../../../editor/contrib/snippet/browser/snippetSession.js\";\nimport type { IProgress } from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIUndoRedoService,\n\ttype UndoRedoGroup,\n\ttype UndoRedoSource,\n} from \"../../../../platform/undoRedo/common/undoRedo.js\";\n\ntype ValidationResult = { canApply: true } | { canApply: false; reason: URI };\n\ntype ISingleSnippetEditOperation = ISingleEditOperation & {\n\tinsertAsSnippet?: boolean;\n};\n\nclass ModelEditTask implements IDisposable {\n\treadonly model: ITextModel;\n\n\tprivate _expectedModelVersionId: number | undefined;\n\tprotected _edits: ISingleSnippetEditOperation[];\n\tprotected _newEol: EndOfLineSequence | undefined;\n\n\tconstructor(\n\t\tprivate readonly _modelReference: IReference<IResolvedTextEditorModel>,\n\t) {\n\t\tthis.model = this._modelReference.object.textEditorModel;\n\t\tthis._edits = [];\n\t}\n\n\tdispose() {\n\t\tthis._modelReference.dispose();\n\t}\n\n\tisNoOp() {\n\t\tif (this._edits.length > 0) {\n\t\t\t// contains textual edits\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\tthis._newEol !== undefined &&\n\t\t\tthis._newEol !== this.model.getEndOfLineSequence()\n\t\t) {\n\t\t\t// contains an eol change that is a real change\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\taddEdit(resourceEdit: ResourceTextEdit): void {\n\t\tthis._expectedModelVersionId = resourceEdit.versionId;\n\t\tconst { textEdit } = resourceEdit;\n\n\t\tif (typeof textEdit.eol === \"number\") {\n\t\t\t// honor eol-change\n\t\t\tthis._newEol = textEdit.eol;\n\t\t}\n\t\tif (!textEdit.range && !textEdit.text) {\n\t\t\t// lacks both a range and the text\n\t\t\treturn;\n\t\t}\n\t\tif (Range.isEmpty(textEdit.range) && !textEdit.text) {\n\t\t\t// no-op edit (replace empty range with empty text)\n\t\t\treturn;\n\t\t}\n\n\t\t// create edit operation\n\t\tlet range: Range;\n\t\tif (textEdit.range) {\n\t\t\trange = Range.lift(textEdit.range);\n\t\t} else {\n\t\t\trange = this.model.getFullModelRange();\n\t\t}\n\t\tthis._edits.push({\n\t\t\t...EditOperation.replaceMove(range, textEdit.text),\n\t\t\tinsertAsSnippet: textEdit.insertAsSnippet,\n\t\t});\n\t}\n\n\tvalidate(): ValidationResult {\n\t\tif (\n\t\t\ttypeof this._expectedModelVersionId === \"undefined\" ||\n\t\t\tthis.model.getVersionId() === this._expectedModelVersionId\n\t\t) {\n\t\t\treturn { canApply: true };\n\t\t}\n\t\treturn { canApply: false, reason: this.model.uri };\n\t}\n\n\tgetBeforeCursorState(): Selection[] | null {\n\t\treturn null;\n\t}\n\n\tapply(): void {\n\t\tif (this._edits.length > 0) {\n\t\t\tthis._edits = this._edits\n\t\t\t\t.map(this._transformSnippetStringToInsertText, this) // no editor -> no snippet mode\n\t\t\t\t.sort((a, b) =>\n\t\t\t\t\tRange.compareRangesUsingStarts(a.range, b.range),\n\t\t\t\t);\n\t\t\tthis.model.pushEditOperations(null, this._edits, () => null);\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tthis.model.pushEOL(this._newEol);\n\t\t}\n\t}\n\n\tprotected _transformSnippetStringToInsertText(\n\t\tedit: ISingleSnippetEditOperation,\n\t): ISingleSnippetEditOperation {\n\t\t// transform a snippet edit (and only those) into a normal text edit\n\t\t// for that we need to parse the snippet and get its actual text, e.g without placeholder\n\t\t// or variable syntaxes\n\t\tif (!edit.insertAsSnippet) {\n\t\t\treturn edit;\n\t\t}\n\t\tif (!edit.text) {\n\t\t\treturn edit;\n\t\t}\n\t\tconst text = SnippetParser.asInsertText(edit.text);\n\t\treturn { ...edit, insertAsSnippet: false, text };\n\t}\n}\n\nclass EditorEditTask extends ModelEditTask {\n\tprivate readonly _editor: ICodeEditor;\n\n\tconstructor(\n\t\tmodelReference: IReference<IResolvedTextEditorModel>,\n\t\teditor: ICodeEditor,\n\t) {\n\t\tsuper(modelReference);\n\t\tthis._editor = editor;\n\t}\n\n\toverride getBeforeCursorState(): Selection[] | null {\n\t\treturn this._canUseEditor() ? this._editor.getSelections() : null;\n\t}\n\n\toverride apply(): void {\n\t\t// Check that the editor is still for the wanted model. It might have changed in the\n\t\t// meantime and that means we cannot use the editor anymore (instead we perform the edit through the model)\n\t\tif (!this._canUseEditor()) {\n\t\t\tsuper.apply();\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._edits.length > 0) {\n\t\t\tconst snippetCtrl = SnippetController2.get(this._editor);\n\t\t\tif (\n\t\t\t\tsnippetCtrl &&\n\t\t\t\tthis._edits.some((edit) => edit.insertAsSnippet)\n\t\t\t) {\n\t\t\t\t// some edit is a snippet edit -> use snippet controller and ISnippetEdits\n\t\t\t\tconst snippetEdits: ISnippetEdit[] = [];\n\t\t\t\tfor (const edit of this._edits) {\n\t\t\t\t\tif (edit.range && edit.text !== null) {\n\t\t\t\t\t\tsnippetEdits.push({\n\t\t\t\t\t\t\trange: Range.lift(edit.range),\n\t\t\t\t\t\t\ttemplate: edit.insertAsSnippet\n\t\t\t\t\t\t\t\t? edit.text\n\t\t\t\t\t\t\t\t: SnippetParser.escape(edit.text),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsnippetCtrl.apply(snippetEdits, {\n\t\t\t\t\tundoStopBefore: false,\n\t\t\t\t\tundoStopAfter: false,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// normal edit\n\t\t\t\tthis._edits = this._edits\n\t\t\t\t\t.map(this._transformSnippetStringToInsertText, this) // mixed edits (snippet and normal) -> no snippet mode\n\t\t\t\t\t.sort((a, b) =>\n\t\t\t\t\t\tRange.compareRangesUsingStarts(a.range, b.range),\n\t\t\t\t\t);\n\t\t\t\tthis._editor.executeEdits(\"\", this._edits);\n\t\t\t}\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tif (this._editor.hasModel()) {\n\t\t\t\tthis._editor.getModel().pushEOL(this._newEol);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _canUseEditor(): boolean {\n\t\treturn (\n\t\t\tthis._editor?.getModel()?.uri.toString() ===\n\t\t\tthis.model.uri.toString()\n\t\t);\n\t}\n}\n\nexport class BulkTextEdits {\n\tprivate readonly _edits = new ResourceMap<ResourceTextEdit[]>();\n\n\tconstructor(\n\t\tprivate readonly _label: string,\n\t\tprivate readonly _code: string,\n\t\tprivate readonly _editor: ICodeEditor | undefined,\n\t\tprivate readonly _undoRedoGroup: UndoRedoGroup,\n\t\tprivate readonly _undoRedoSource: UndoRedoSource | undefined,\n\t\tprivate readonly _progress: IProgress<void>,\n\t\tprivate readonly _token: CancellationToken,\n\t\tedits: ResourceTextEdit[],\n\t\t@IEditorWorkerService\n\t\tprivate readonly _editorWorker: IEditorWorkerService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService\n\t\tprivate readonly _textModelResolverService: ITextModelService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t) {\n\t\tfor (const edit of edits) {\n\t\t\tlet array = this._edits.get(edit.resource);\n\t\t\tif (!array) {\n\t\t\t\tarray = [];\n\t\t\t\tthis._edits.set(edit.resource, array);\n\t\t\t}\n\t\t\tarray.push(edit);\n\t\t}\n\t}\n\n\tprivate _validateBeforePrepare(): void {\n\t\t// First check if loaded models were not changed in the meantime\n\t\tfor (const array of this._edits.values()) {\n\t\t\tfor (const edit of array) {\n\t\t\t\tif (typeof edit.versionId === \"number\") {\n\t\t\t\t\tconst model = this._modelService.getModel(edit.resource);\n\t\t\t\t\tif (model && model.getVersionId() !== edit.versionId) {\n\t\t\t\t\t\t// model changed in the meantime\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`${model.uri.toString()} has changed in the meantime`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _createEditsTasks(): Promise<ModelEditTask[]> {\n\t\tconst tasks: ModelEditTask[] = [];\n\t\tconst promises: Promise<any>[] = [];\n\n\t\tfor (const [key, edits] of this._edits) {\n\t\t\tconst promise = this._textModelResolverService\n\t\t\t\t.createModelReference(key)\n\t\t\t\t.then(async (ref) => {\n\t\t\t\t\tlet task: ModelEditTask;\n\t\t\t\t\tlet makeMinimal = false;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._editor?.getModel()?.uri.toString() ===\n\t\t\t\t\t\tref.object.textEditorModel.uri.toString()\n\t\t\t\t\t) {\n\t\t\t\t\t\ttask = new EditorEditTask(ref, this._editor);\n\t\t\t\t\t\tmakeMinimal = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttask = new ModelEditTask(ref);\n\t\t\t\t\t}\n\t\t\t\t\ttasks.push(task);\n\n\t\t\t\t\tif (!makeMinimal) {\n\t\t\t\t\t\tedits.forEach(task.addEdit, task);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// group edits by type (snippet, metadata, or simple) and make simple groups more minimal\n\n\t\t\t\t\tconst makeGroupMoreMinimal = async (\n\t\t\t\t\t\tstart: number,\n\t\t\t\t\t\tend: number,\n\t\t\t\t\t) => {\n\t\t\t\t\t\tconst oldEdits = edits.slice(start, end);\n\t\t\t\t\t\tconst newEdits =\n\t\t\t\t\t\t\tawait this._editorWorker.computeMoreMinimalEdits(\n\t\t\t\t\t\t\t\tref.object.textEditorModel.uri,\n\t\t\t\t\t\t\t\toldEdits.map((e) => e.textEdit),\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (newEdits) {\n\t\t\t\t\t\t\tnewEdits.forEach((edit) =>\n\t\t\t\t\t\t\t\ttask.addEdit(\n\t\t\t\t\t\t\t\t\tnew ResourceTextEdit(\n\t\t\t\t\t\t\t\t\t\tref.object.textEditorModel.uri,\n\t\t\t\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toldEdits.forEach(task.addEdit, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tlet start = 0;\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (; i < edits.length; i++) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tedits[i].textEdit.insertAsSnippet ||\n\t\t\t\t\t\t\tedits[i].metadata\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tawait makeGroupMoreMinimal(start, i); // grouped edits until now\n\t\t\t\t\t\t\ttask.addEdit(edits[i]); // this edit\n\t\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tawait makeGroupMoreMinimal(start, i);\n\t\t\t\t});\n\t\t\tpromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t\treturn tasks;\n\t}\n\n\tprivate _validateTasks(tasks: ModelEditTask[]): ValidationResult {\n\t\tfor (const task of tasks) {\n\t\t\tconst result = task.validate();\n\t\t\tif (!result.canApply) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn { canApply: true };\n\t}\n\n\tasync apply(): Promise<readonly URI[]> {\n\t\tthis._validateBeforePrepare();\n\t\tconst tasks = await this._createEditsTasks();\n\n\t\ttry {\n\t\t\tif (this._token.isCancellationRequested) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst resources: URI[] = [];\n\t\t\tconst validation = this._validateTasks(tasks);\n\t\t\tif (!validation.canApply) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`${validation.reason.toString()} has changed in the meantime`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (tasks.length === 1) {\n\t\t\t\t// This edit touches a single model => keep things simple\n\t\t\t\tconst task = tasks[0];\n\t\t\t\tif (!task.isNoOp()) {\n\t\t\t\t\tconst singleModelEditStackElement =\n\t\t\t\t\t\tnew SingleModelEditStackElement(\n\t\t\t\t\t\t\tthis._label,\n\t\t\t\t\t\t\tthis._code,\n\t\t\t\t\t\t\ttask.model,\n\t\t\t\t\t\t\ttask.getBeforeCursorState(),\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._undoRedoService.pushElement(\n\t\t\t\t\t\tsingleModelEditStackElement,\n\t\t\t\t\t\tthis._undoRedoGroup,\n\t\t\t\t\t\tthis._undoRedoSource,\n\t\t\t\t\t);\n\t\t\t\t\ttask.apply();\n\t\t\t\t\tsingleModelEditStackElement.close();\n\t\t\t\t\tresources.push(task.model.uri);\n\t\t\t\t}\n\t\t\t\tthis._progress.report(undefined);\n\t\t\t} else {\n\t\t\t\t// prepare multi model undo element\n\t\t\t\tconst multiModelEditStackElement =\n\t\t\t\t\tnew MultiModelEditStackElement(\n\t\t\t\t\t\tthis._label,\n\t\t\t\t\t\tthis._code,\n\t\t\t\t\t\ttasks.map(\n\t\t\t\t\t\t\t(t) =>\n\t\t\t\t\t\t\t\tnew SingleModelEditStackElement(\n\t\t\t\t\t\t\t\t\tthis._label,\n\t\t\t\t\t\t\t\t\tthis._code,\n\t\t\t\t\t\t\t\t\tt.model,\n\t\t\t\t\t\t\t\t\tt.getBeforeCursorState(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\tthis._undoRedoService.pushElement(\n\t\t\t\t\tmultiModelEditStackElement,\n\t\t\t\t\tthis._undoRedoGroup,\n\t\t\t\t\tthis._undoRedoSource,\n\t\t\t\t);\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\ttask.apply();\n\t\t\t\t\tthis._progress.report(undefined);\n\t\t\t\t\tresources.push(task.model.uri);\n\t\t\t\t}\n\t\t\t\tmultiModelEditStackElement.close();\n\t\t\t}\n\n\t\t\treturn resources;\n\t\t} finally {\n\t\t\tdispose(tasks);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["start"]
}
