{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/bulkEdit/browser/bulkTextEdits.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { dispose, IDisposable, IReference } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditOperation, ISingleEditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { EndOfLineSequence, ITextModel } from '../../../../editor/common/model.js';\nimport { ITextModelService, IResolvedTextEditorModel } from '../../../../editor/common/services/resolverService.js';\nimport { IProgress } from '../../../../platform/progress/common/progress.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { IUndoRedoService, UndoRedoGroup, UndoRedoSource } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { SingleModelEditStackElement, MultiModelEditStackElement } from '../../../../editor/common/model/editStack.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ResourceTextEdit } from '../../../../editor/browser/services/bulkEditService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { SnippetController2 } from '../../../../editor/contrib/snippet/browser/snippetController2.js';\nimport { SnippetParser } from '../../../../editor/contrib/snippet/browser/snippetParser.js';\nimport { ISnippetEdit } from '../../../../editor/contrib/snippet/browser/snippetSession.js';\n\ntype ValidationResult = { canApply: true } | { canApply: false; reason: URI };\n\ntype ISingleSnippetEditOperation = ISingleEditOperation & { insertAsSnippet?: boolean };\n\nclass ModelEditTask implements IDisposable {\n\n\treadonly model: ITextModel;\n\n\tprivate _expectedModelVersionId: number | undefined;\n\tprotected _edits: ISingleSnippetEditOperation[];\n\tprotected _newEol: EndOfLineSequence | undefined;\n\n\tconstructor(private readonly _modelReference: IReference<IResolvedTextEditorModel>) {\n\t\tthis.model = this._modelReference.object.textEditorModel;\n\t\tthis._edits = [];\n\t}\n\n\tdispose() {\n\t\tthis._modelReference.dispose();\n\t}\n\n\tisNoOp() {\n\t\tif (this._edits.length > 0) {\n\t\t\t// contains textual edits\n\t\t\treturn false;\n\t\t}\n\t\tif (this._newEol !== undefined && this._newEol !== this.model.getEndOfLineSequence()) {\n\t\t\t// contains an eol change that is a real change\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\taddEdit(resourceEdit: ResourceTextEdit): void {\n\t\tthis._expectedModelVersionId = resourceEdit.versionId;\n\t\tconst { textEdit } = resourceEdit;\n\n\t\tif (typeof textEdit.eol === 'number') {\n\t\t\t// honor eol-change\n\t\t\tthis._newEol = textEdit.eol;\n\t\t}\n\t\tif (!textEdit.range && !textEdit.text) {\n\t\t\t// lacks both a range and the text\n\t\t\treturn;\n\t\t}\n\t\tif (Range.isEmpty(textEdit.range) && !textEdit.text) {\n\t\t\t// no-op edit (replace empty range with empty text)\n\t\t\treturn;\n\t\t}\n\n\t\t// create edit operation\n\t\tlet range: Range;\n\t\tif (!textEdit.range) {\n\t\t\trange = this.model.getFullModelRange();\n\t\t} else {\n\t\t\trange = Range.lift(textEdit.range);\n\t\t}\n\t\tthis._edits.push({ ...EditOperation.replaceMove(range, textEdit.text), insertAsSnippet: textEdit.insertAsSnippet });\n\t}\n\n\tvalidate(): ValidationResult {\n\t\tif (typeof this._expectedModelVersionId === 'undefined' || this.model.getVersionId() === this._expectedModelVersionId) {\n\t\t\treturn { canApply: true };\n\t\t}\n\t\treturn { canApply: false, reason: this.model.uri };\n\t}\n\n\tgetBeforeCursorState(): Selection[] | null {\n\t\treturn null;\n\t}\n\n\tapply(): void {\n\t\tif (this._edits.length > 0) {\n\t\t\tthis._edits = this._edits\n\t\t\t\t.map(this._transformSnippetStringToInsertText, this) // no editor -> no snippet mode\n\t\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\t\tthis.model.pushEditOperations(null, this._edits, () => null);\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tthis.model.pushEOL(this._newEol);\n\t\t}\n\t}\n\n\tprotected _transformSnippetStringToInsertText(edit: ISingleSnippetEditOperation): ISingleSnippetEditOperation {\n\t\t// transform a snippet edit (and only those) into a normal text edit\n\t\t// for that we need to parse the snippet and get its actual text, e.g without placeholder\n\t\t// or variable syntaxes\n\t\tif (!edit.insertAsSnippet) {\n\t\t\treturn edit;\n\t\t}\n\t\tif (!edit.text) {\n\t\t\treturn edit;\n\t\t}\n\t\tconst text = SnippetParser.asInsertText(edit.text);\n\t\treturn { ...edit, insertAsSnippet: false, text };\n\t}\n}\n\nclass EditorEditTask extends ModelEditTask {\n\n\tprivate readonly _editor: ICodeEditor;\n\n\tconstructor(modelReference: IReference<IResolvedTextEditorModel>, editor: ICodeEditor) {\n\t\tsuper(modelReference);\n\t\tthis._editor = editor;\n\t}\n\n\toverride getBeforeCursorState(): Selection[] | null {\n\t\treturn this._canUseEditor() ? this._editor.getSelections() : null;\n\t}\n\n\toverride apply(): void {\n\n\t\t// Check that the editor is still for the wanted model. It might have changed in the\n\t\t// meantime and that means we cannot use the editor anymore (instead we perform the edit through the model)\n\t\tif (!this._canUseEditor()) {\n\t\t\tsuper.apply();\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._edits.length > 0) {\n\t\t\tconst snippetCtrl = SnippetController2.get(this._editor);\n\t\t\tif (snippetCtrl && this._edits.some(edit => edit.insertAsSnippet)) {\n\t\t\t\t// some edit is a snippet edit -> use snippet controller and ISnippetEdits\n\t\t\t\tconst snippetEdits: ISnippetEdit[] = [];\n\t\t\t\tfor (const edit of this._edits) {\n\t\t\t\t\tif (edit.range && edit.text !== null) {\n\t\t\t\t\t\tsnippetEdits.push({\n\t\t\t\t\t\t\trange: Range.lift(edit.range),\n\t\t\t\t\t\t\ttemplate: edit.insertAsSnippet ? edit.text : SnippetParser.escape(edit.text)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsnippetCtrl.apply(snippetEdits, { undoStopBefore: false, undoStopAfter: false });\n\n\t\t\t} else {\n\t\t\t\t// normal edit\n\t\t\t\tthis._edits = this._edits\n\t\t\t\t\t.map(this._transformSnippetStringToInsertText, this) // mixed edits (snippet and normal) -> no snippet mode\n\t\t\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\t\t\tthis._editor.executeEdits('', this._edits);\n\t\t\t}\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tif (this._editor.hasModel()) {\n\t\t\t\tthis._editor.getModel().pushEOL(this._newEol);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _canUseEditor(): boolean {\n\t\treturn this._editor?.getModel()?.uri.toString() === this.model.uri.toString();\n\t}\n}\n\nexport class BulkTextEdits {\n\n\tprivate readonly _edits = new ResourceMap<ResourceTextEdit[]>();\n\n\tconstructor(\n\t\tprivate readonly _label: string,\n\t\tprivate readonly _code: string,\n\t\tprivate readonly _editor: ICodeEditor | undefined,\n\t\tprivate readonly _undoRedoGroup: UndoRedoGroup,\n\t\tprivate readonly _undoRedoSource: UndoRedoSource | undefined,\n\t\tprivate readonly _progress: IProgress<void>,\n\t\tprivate readonly _token: CancellationToken,\n\t\tedits: ResourceTextEdit[],\n\t\t@IEditorWorkerService private readonly _editorWorker: IEditorWorkerService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService\n\t) {\n\n\t\tfor (const edit of edits) {\n\t\t\tlet array = this._edits.get(edit.resource);\n\t\t\tif (!array) {\n\t\t\t\tarray = [];\n\t\t\t\tthis._edits.set(edit.resource, array);\n\t\t\t}\n\t\t\tarray.push(edit);\n\t\t}\n\t}\n\n\tprivate _validateBeforePrepare(): void {\n\t\t// First check if loaded models were not changed in the meantime\n\t\tfor (const array of this._edits.values()) {\n\t\t\tfor (const edit of array) {\n\t\t\t\tif (typeof edit.versionId === 'number') {\n\t\t\t\t\tconst model = this._modelService.getModel(edit.resource);\n\t\t\t\t\tif (model && model.getVersionId() !== edit.versionId) {\n\t\t\t\t\t\t// model changed in the meantime\n\t\t\t\t\t\tthrow new Error(`${model.uri.toString()} has changed in the meantime`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _createEditsTasks(): Promise<ModelEditTask[]> {\n\n\t\tconst tasks: ModelEditTask[] = [];\n\t\tconst promises: Promise<any>[] = [];\n\n\t\tfor (const [key, edits] of this._edits) {\n\t\t\tconst promise = this._textModelResolverService.createModelReference(key).then(async ref => {\n\t\t\t\tlet task: ModelEditTask;\n\t\t\t\tlet makeMinimal = false;\n\t\t\t\tif (this._editor?.getModel()?.uri.toString() === ref.object.textEditorModel.uri.toString()) {\n\t\t\t\t\ttask = new EditorEditTask(ref, this._editor);\n\t\t\t\t\tmakeMinimal = true;\n\t\t\t\t} else {\n\t\t\t\t\ttask = new ModelEditTask(ref);\n\t\t\t\t}\n\t\t\t\ttasks.push(task);\n\n\n\t\t\t\tif (!makeMinimal) {\n\t\t\t\t\tedits.forEach(task.addEdit, task);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// group edits by type (snippet, metadata, or simple) and make simple groups more minimal\n\n\t\t\t\tconst makeGroupMoreMinimal = async (start: number, end: number) => {\n\t\t\t\t\tconst oldEdits = edits.slice(start, end);\n\t\t\t\t\tconst newEdits = await this._editorWorker.computeMoreMinimalEdits(ref.object.textEditorModel.uri, oldEdits.map(e => e.textEdit), false);\n\t\t\t\t\tif (!newEdits) {\n\t\t\t\t\t\toldEdits.forEach(task.addEdit, task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewEdits.forEach(edit => task.addEdit(new ResourceTextEdit(ref.object.textEditorModel.uri, edit, undefined, undefined)));\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tlet start = 0;\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (; i < edits.length; i++) {\n\t\t\t\t\tif (edits[i].textEdit.insertAsSnippet || edits[i].metadata) {\n\t\t\t\t\t\tawait makeGroupMoreMinimal(start, i); // grouped edits until now\n\t\t\t\t\t\ttask.addEdit(edits[i]); // this edit\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait makeGroupMoreMinimal(start, i);\n\n\t\t\t});\n\t\t\tpromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t\treturn tasks;\n\t}\n\n\tprivate _validateTasks(tasks: ModelEditTask[]): ValidationResult {\n\t\tfor (const task of tasks) {\n\t\t\tconst result = task.validate();\n\t\t\tif (!result.canApply) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn { canApply: true };\n\t}\n\n\tasync apply(): Promise<readonly URI[]> {\n\n\t\tthis._validateBeforePrepare();\n\t\tconst tasks = await this._createEditsTasks();\n\n\t\ttry {\n\t\t\tif (this._token.isCancellationRequested) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst resources: URI[] = [];\n\t\t\tconst validation = this._validateTasks(tasks);\n\t\t\tif (!validation.canApply) {\n\t\t\t\tthrow new Error(`${validation.reason.toString()} has changed in the meantime`);\n\t\t\t}\n\t\t\tif (tasks.length === 1) {\n\t\t\t\t// This edit touches a single model => keep things simple\n\t\t\t\tconst task = tasks[0];\n\t\t\t\tif (!task.isNoOp()) {\n\t\t\t\t\tconst singleModelEditStackElement = new SingleModelEditStackElement(this._label, this._code, task.model, task.getBeforeCursorState());\n\t\t\t\t\tthis._undoRedoService.pushElement(singleModelEditStackElement, this._undoRedoGroup, this._undoRedoSource);\n\t\t\t\t\ttask.apply();\n\t\t\t\t\tsingleModelEditStackElement.close();\n\t\t\t\t\tresources.push(task.model.uri);\n\t\t\t\t}\n\t\t\t\tthis._progress.report(undefined);\n\t\t\t} else {\n\t\t\t\t// prepare multi model undo element\n\t\t\t\tconst multiModelEditStackElement = new MultiModelEditStackElement(\n\t\t\t\t\tthis._label,\n\t\t\t\t\tthis._code,\n\t\t\t\t\ttasks.map(t => new SingleModelEditStackElement(this._label, this._code, t.model, t.getBeforeCursorState()))\n\t\t\t\t);\n\t\t\t\tthis._undoRedoService.pushElement(multiModelEditStackElement, this._undoRedoGroup, this._undoRedoSource);\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\ttask.apply();\n\t\t\t\t\tthis._progress.report(undefined);\n\t\t\t\t\tresources.push(task.model.uri);\n\t\t\t\t}\n\t\t\t\tmultiModelEditStackElement.close();\n\t\t\t}\n\n\t\t\treturn resources;\n\n\t\t} finally {\n\t\t\tdispose(tasks);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["start"]
}
