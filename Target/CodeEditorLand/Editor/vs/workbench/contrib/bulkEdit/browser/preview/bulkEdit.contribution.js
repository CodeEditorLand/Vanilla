var A=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var x=(s,e,i,t)=>{for(var o=t>1?void 0:t?G(e,i):e,a=s.length-1,u;a>=0;a--)(u=s[a])&&(o=(t?u(e,i,o):u(o))||o);return t&&o&&A(e,i,o),o},d=(s,e)=>(i,t)=>e(i,t,s);import{CancellationTokenSource as T}from"../../../../../../vs/base/common/cancellation.js";import{Codicon as g}from"../../../../../../vs/base/common/codicons.js";import{KeyCode as C,KeyMod as D}from"../../../../../../vs/base/common/keyCodes.js";import F from"../../../../../../vs/base/common/severity.js";import{IBulkEditService as K}from"../../../../../../vs/editor/browser/services/bulkEditService.js";import{localize as S,localize2 as c}from"../../../../../../vs/nls.js";import{Action2 as w,MenuId as m,registerAction2 as y}from"../../../../../../vs/platform/actions/common/actions.js";import{ContextKeyExpr as p,IContextKeyService as H,RawContextKey as W}from"../../../../../../vs/platform/contextkey/common/contextkey.js";import{IDialogService as M}from"../../../../../../vs/platform/dialogs/common/dialogs.js";import{SyncDescriptor as P}from"../../../../../../vs/platform/instantiation/common/descriptors.js";import{KeybindingWeight as E}from"../../../../../../vs/platform/keybinding/common/keybindingsRegistry.js";import{WorkbenchListFocusContextKey as z}from"../../../../../../vs/platform/list/browser/listService.js";import{Registry as I}from"../../../../../../vs/platform/registry/common/platform.js";import{registerIcon as L}from"../../../../../../vs/platform/theme/common/iconRegistry.js";import{ViewPaneContainer as q}from"../../../../../../vs/workbench/browser/parts/views/viewPaneContainer.js";import{FocusedViewContext as Y}from"../../../../../../vs/workbench/common/contextkeys.js";import{registerWorkbenchContribution2 as j,WorkbenchPhase as J}from"../../../../../../vs/workbench/common/contributions.js";import{EditorResourceAccessor as N,SideBySideEditor as O}from"../../../../../../vs/workbench/common/editor.js";import"../../../../../../vs/workbench/common/editor/editorInput.js";import{Extensions as b,ViewContainerLocation as h}from"../../../../../../vs/workbench/common/views.js";import{BulkEditPane as r}from"../../../../../../vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.js";import{IEditorGroupsService as _}from"../../../../../../vs/workbench/services/editor/common/editorGroupsService.js";import{IPaneCompositePartService as B}from"../../../../../../vs/workbench/services/panecomposite/browser/panecomposite.js";import{IViewsService as l}from"../../../../../../vs/workbench/services/views/common/viewsService.js";async function v(s){const e=await s.openView(r.ID,!0);if(e instanceof r)return e}let f=class{constructor(e,i){this._paneCompositeService=e;this._editorGroupsService=i;this._activePanel=e.getActivePaneComposite(h.Panel)?.getId()}_activePanel;async restore(e,i){if(e&&(typeof this._activePanel=="string"?await this._paneCompositeService.openPaneComposite(this._activePanel,h.Panel):this._paneCompositeService.hideActivePaneComposite(h.Panel)),i)for(const t of this._editorGroupsService.groups){const o=[];for(const a of t.editors)N.getCanonicalUri(a,{supportSideBySide:O.PRIMARY})?.scheme===r.Schema&&o.push(a);o.length&&t.closeEditors(o,{preserveFocus:!0})}}};f=x([d(0,B),d(1,_)],f);class R{constructor(e,i=new T){this.uxState=e;this.cts=i}}let n=class{constructor(e,i,t,o,a,u){this._paneCompositeService=e;this._viewsService=i;this._editorGroupsService=t;this._dialogService=o;a.setPreviewHandler(V=>this._previewEdit(V)),this._ctxEnabled=n.ctxEnabled.bindTo(u)}static ID="workbench.contrib.bulkEditPreview";static ctxEnabled=new W("refactorPreview.enabled",!1);_ctxEnabled;_activeSession;async _previewEdit(e){this._ctxEnabled.set(!0);const i=this._activeSession?.uxState??new f(this._paneCompositeService,this._editorGroupsService),t=await v(this._viewsService);if(!t)return this._ctxEnabled.set(!1),e;if(t.hasInput()){const{confirmed:a}=await this._dialogService.confirm({type:F.Info,message:S("overlap","Another refactoring is being previewed."),detail:S("detail","Press 'Continue' to discard the previous refactoring and continue with the current refactoring."),primaryButton:S({key:"continue",comment:["&& denotes a mnemonic"]},"&&Continue")});if(!a)return[]}let o;this._activeSession?(await this._activeSession.uxState.restore(!1,!0),this._activeSession.cts.dispose(!0),o=new R(i)):o=new R(i),this._activeSession=o;try{return await t.setInput(e,o.cts.token)??[]}finally{this._activeSession===o&&(await this._activeSession.uxState.restore(!0,!0),this._activeSession.cts.dispose(),this._ctxEnabled.set(!1),this._activeSession=void 0)}}};n=x([d(0,B),d(1,l),d(2,_),d(3,M),d(4,K),d(5,H)],n),y(class extends w{constructor(){super({id:"refactorPreview.apply",title:c("apply","Apply Refactoring"),category:c("cat","Refactor Preview"),icon:g.check,precondition:p.and(n.ctxEnabled,r.ctxHasCheckedChanges),menu:[{id:m.BulkEditContext,order:1}],keybinding:{weight:E.EditorContrib-10,when:p.and(n.ctxEnabled,Y.isEqualTo(r.ID)),primary:D.CtrlCmd+C.Enter}})}async run(e){const i=e.get(l);(await v(i))?.accept()}}),y(class extends w{constructor(){super({id:"refactorPreview.discard",title:c("Discard","Discard Refactoring"),category:c("cat","Refactor Preview"),icon:g.clearAll,precondition:n.ctxEnabled,menu:[{id:m.BulkEditContext,order:2}]})}async run(e){const i=e.get(l);(await v(i))?.discard()}}),y(class extends w{constructor(){super({id:"refactorPreview.toggleCheckedState",title:c("toogleSelection","Toggle Change"),category:c("cat","Refactor Preview"),precondition:n.ctxEnabled,keybinding:{weight:E.WorkbenchContrib,when:z,primary:C.Space},menu:{id:m.BulkEditContext,group:"navigation"}})}async run(e){const i=e.get(l);(await v(i))?.toggleChecked()}}),y(class extends w{constructor(){super({id:"refactorPreview.groupByFile",title:c("groupByFile","Group Changes By File"),category:c("cat","Refactor Preview"),icon:g.ungroupByRefType,precondition:p.and(r.ctxHasCategories,r.ctxGroupByFile.negate(),n.ctxEnabled),menu:[{id:m.BulkEditTitle,when:p.and(r.ctxHasCategories,r.ctxGroupByFile.negate()),group:"navigation",order:3}]})}async run(e){const i=e.get(l);(await v(i))?.groupByFile()}}),y(class extends w{constructor(){super({id:"refactorPreview.groupByType",title:c("groupByType","Group Changes By Type"),category:c("cat","Refactor Preview"),icon:g.groupByRefType,precondition:p.and(r.ctxHasCategories,r.ctxGroupByFile,n.ctxEnabled),menu:[{id:m.BulkEditTitle,when:p.and(r.ctxHasCategories,r.ctxGroupByFile),group:"navigation",order:3}]})}async run(e){const i=e.get(l);(await v(i))?.groupByType()}}),y(class extends w{constructor(){super({id:"refactorPreview.toggleGrouping",title:c("groupByType","Group Changes By Type"),category:c("cat","Refactor Preview"),icon:g.listTree,toggled:r.ctxGroupByFile.negate(),precondition:p.and(r.ctxHasCategories,n.ctxEnabled),menu:[{id:m.BulkEditContext,order:3}]})}async run(e){const i=e.get(l);(await v(i))?.toggleGrouping()}}),j(n.ID,n,J.BlockRestore);const k=L("refactor-preview-view-icon",g.lightbulb,S("refactorPreviewViewIcon","View icon of the refactor preview view.")),Q=I.as(b.ViewContainersRegistry).registerViewContainer({id:r.ID,title:c("panel","Refactor Preview"),hideIfEmpty:!0,ctorDescriptor:new P(q,[r.ID,{mergeViewWithContainerWhenSingleView:!0}]),icon:k,storageId:r.ID},h.Panel);I.as(b.ViewsRegistry).registerViews([{id:r.ID,name:c("panel","Refactor Preview"),when:n.ctxEnabled,ctorDescriptor:new P(r),containerIcon:k}],Q);
