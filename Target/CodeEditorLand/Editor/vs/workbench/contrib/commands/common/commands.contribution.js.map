{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/commands/common/commands.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { safeStringify } from \"../../../../base/common/objects.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\n\ntype RunnableCommand = string | { command: string; args: any[] };\n\ntype CommandArgs = {\n\tcommands: RunnableCommand[];\n};\n\n/** Runs several commands passed to it as an argument */\nclass RunCommands extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"runCommands\",\n\t\t\ttitle: nls.localize2(\"runCommands\", \"Run Commands\"),\n\t\t\tf1: false,\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\"runCommands.description\",\n\t\t\t\t\t\"Run several commands\",\n\t\t\t\t),\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"args\",\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\trequired: [\"commands\"],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tcommands: {\n\t\t\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"runCommands.commands\",\n\t\t\t\t\t\t\t\t\t\t\"Commands to run\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$ref: \"vscode://schemas/keybindings#/definitions/commandNames\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\t\t\t\t\t\trequired: [\"command\"],\n\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcommand: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ref: \"vscode://schemas/keybindings#/definitions/commandNames\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t$ref: \"vscode://schemas/keybindings#/definitions/commandsSchemas\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n\n\t// dev decisions:\n\t// - this command takes a single argument-object because\n\t//\t- keybinding definitions don't allow running commands with several arguments\n\t//  - and we want to be able to take on different other arguments in future, e.g., `runMode : 'serial' | 'concurrent'`\n\tasync run(accessor: ServicesAccessor, args: unknown) {\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tif (!this._isCommandArgs(args)) {\n\t\t\tnotificationService.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"runCommands.invalidArgs\",\n\t\t\t\t\t\"'runCommands' has received an argument with incorrect type. Please, review the argument passed to the command.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (args.commands.length === 0) {\n\t\t\tnotificationService.warn(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"runCommands.noCommandsToRun\",\n\t\t\t\t\t\"'runCommands' has not received commands to run. Did you forget to pass commands in the 'runCommands' argument?\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst logService = accessor.get(ILogService);\n\n\t\tlet i = 0;\n\t\ttry {\n\t\t\tfor (; i < args.commands.length; ++i) {\n\t\t\t\tconst cmd = args.commands[i];\n\n\t\t\t\tlogService.debug(\n\t\t\t\t\t`runCommands: executing ${i}-th command: ${safeStringify(cmd)}`,\n\t\t\t\t);\n\n\t\t\t\tawait this._runCommand(commandService, cmd);\n\n\t\t\t\tlogService.debug(`runCommands: executed ${i}-th command`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlogService.debug(\n\t\t\t\t`runCommands: executing ${i}-th command resulted in an error: ${err instanceof Error ? err.message : safeStringify(err)}`,\n\t\t\t);\n\n\t\t\tnotificationService.error(err);\n\t\t}\n\t}\n\n\tprivate _isCommandArgs(args: unknown): args is CommandArgs {\n\t\tif (!args || typeof args !== \"object\") {\n\t\t\treturn false;\n\t\t}\n\t\tif (!(\"commands\" in args) || !Array.isArray(args.commands)) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (const cmd of args.commands) {\n\t\t\tif (typeof cmd === \"string\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (typeof cmd === \"object\" && typeof cmd.command === \"string\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _runCommand(commandService: ICommandService, cmd: RunnableCommand) {\n\t\tlet commandID: string, commandArgs;\n\n\t\tif (typeof cmd === \"string\") {\n\t\t\tcommandID = cmd;\n\t\t} else {\n\t\t\tcommandID = cmd.command;\n\t\t\tcommandArgs = cmd.args;\n\t\t}\n\n\t\tif (commandArgs === undefined) {\n\t\t\treturn commandService.executeCommand(commandID);\n\t\t} else if (Array.isArray(commandArgs)) {\n\t\t\treturn commandService.executeCommand(commandID, ...commandArgs);\n\t\t} else {\n\t\t\treturn commandService.executeCommand(commandID, commandArgs);\n\t\t}\n\t}\n}\n\nregisterAction2(RunCommands);\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB;AAC9B,YAAY,SAAS;AACrB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAEhC,SAAS,mBAAmB;AAC5B,SAAS,4BAA4B;AASrC,MAAM,oBAAoB,QAAQ;AAAA,EAvBlC,OAuBkC;AAAA;AAAA;AAAA,EACjC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,IAAI,UAAU,eAAe,cAAc;AAAA,MAClD,IAAI;AAAA,MACJ,UAAU;AAAA,QACT,aAAa,IAAI;AAAA,UAChB;AAAA,UACA;AAAA,QACD;AAAA,QACA,MAAM;AAAA,UACL;AAAA,YACC,MAAM;AAAA,YACN,QAAQ;AAAA,cACP,MAAM;AAAA,cACN,UAAU,CAAC,UAAU;AAAA,cACrB,YAAY;AAAA,gBACX,UAAU;AAAA,kBACT,MAAM;AAAA,kBACN,aAAa,IAAI;AAAA,oBAChB;AAAA,oBACA;AAAA,kBACD;AAAA,kBACA,OAAO;AAAA,oBACN,OAAO;AAAA,sBACN;AAAA,wBACC,MAAM;AAAA,sBACP;AAAA,sBACA;AAAA,wBACC,MAAM;AAAA,sBACP;AAAA,sBACA;AAAA,wBACC,MAAM;AAAA,wBACN,UAAU,CAAC,SAAS;AAAA,wBACpB,YAAY;AAAA,0BACX,SAAS;AAAA,4BACR,OAAO;AAAA,8BACN;AAAA,gCACC,MAAM;AAAA,8BACP;AAAA,8BACA;AAAA,gCACC,MAAM;AAAA,8BACP;AAAA,4BACD;AAAA,0BACD;AAAA,wBACD;AAAA,wBACA,MAAM;AAAA,sBACP;AAAA,oBACD;AAAA,kBACD;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,IAAI,UAA4B,MAAe;AACpD,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,QAAI,CAAC,KAAK,eAAe,IAAI,GAAG;AAC/B,0BAAoB;AAAA,QACnB,IAAI;AAAA,UACH;AAAA,UACA;AAAA,QACD;AAAA,MACD;AACA;AAAA,IACD;AAEA,QAAI,KAAK,SAAS,WAAW,GAAG;AAC/B,0BAAoB;AAAA,QACnB,IAAI;AAAA,UACH;AAAA,UACA;AAAA,QACD;AAAA,MACD;AACA;AAAA,IACD;AAEA,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,aAAa,SAAS,IAAI,WAAW;AAE3C,QAAI,IAAI;AACR,QAAI;AACH,aAAO,IAAI,KAAK,SAAS,QAAQ,EAAE,GAAG;AACrC,cAAM,MAAM,KAAK,SAAS,CAAC;AAE3B,mBAAW;AAAA,UACV,0BAA0B,CAAC,gBAAgB,cAAc,GAAG,CAAC;AAAA,QAC9D;AAEA,cAAM,KAAK,YAAY,gBAAgB,GAAG;AAE1C,mBAAW,MAAM,yBAAyB,CAAC,aAAa;AAAA,MACzD;AAAA,IACD,SAAS,KAAK;AACb,iBAAW;AAAA,QACV,0BAA0B,CAAC,qCAAqC,eAAe,QAAQ,IAAI,UAAU,cAAc,GAAG,CAAC;AAAA,MACxH;AAEA,0BAAoB,MAAM,GAAG;AAAA,IAC9B;AAAA,EACD;AAAA,EAEQ,eAAe,MAAoC;AAC1D,QAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;AACtC,aAAO;AAAA,IACR;AACA,QAAI,EAAE,cAAc,SAAS,CAAC,MAAM,QAAQ,KAAK,QAAQ,GAAG;AAC3D,aAAO;AAAA,IACR;AACA,eAAW,OAAO,KAAK,UAAU;AAChC,UAAI,OAAO,QAAQ,UAAU;AAC5B;AAAA,MACD;AACA,UAAI,OAAO,QAAQ,YAAY,OAAO,IAAI,YAAY,UAAU;AAC/D;AAAA,MACD;AACA,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,YAAY,gBAAiC,KAAsB;AAC1E,QAAI,WAAmB;AAEvB,QAAI,OAAO,QAAQ,UAAU;AAC5B,kBAAY;AAAA,IACb,OAAO;AACN,kBAAY,IAAI;AAChB,oBAAc,IAAI;AAAA,IACnB;AAEA,QAAI,gBAAgB,QAAW;AAC9B,aAAO,eAAe,eAAe,SAAS;AAAA,IAC/C,WAAW,MAAM,QAAQ,WAAW,GAAG;AACtC,aAAO,eAAe,eAAe,WAAW,GAAG,WAAW;AAAA,IAC/D,OAAO;AACN,aAAO,eAAe,eAAe,WAAW,WAAW;AAAA,IAC5D;AAAA,EACD;AACD;AAEA,gBAAgB,WAAW;",
  "names": []
}
