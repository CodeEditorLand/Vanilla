var de=Object.defineProperty;var Se=Object.getOwnPropertyDescriptor;var K=(D,f,e,t)=>{for(var r=t>1?void 0:t?Se(f,e):f,i=D.length-1,s;i>=0;i--)(s=D[i])&&(r=(t?s(f,e,r):s(r))||r);return t&&r&&de(f,e,r),r},c=(D,f)=>(e,t)=>f(e,t,D);import{Action as b}from"../../../../../vs/base/common/actions.js";import{Codicon as Q}from"../../../../../vs/base/common/codicons.js";import{fromNow as ye}from"../../../../../vs/base/common/date.js";import{getErrorMessage as he,isCancellationError as j}from"../../../../../vs/base/common/errors.js";import{Event as x}from"../../../../../vs/base/common/event.js";import{Disposable as ge,DisposableStore as M,MutableDisposable as F,toDisposable as J}from"../../../../../vs/base/common/lifecycle.js";import{isWeb as pe}from"../../../../../vs/base/common/platform.js";import{isEqual as H}from"../../../../../vs/base/common/resources.js";import{URI as fe}from"../../../../../vs/base/common/uri.js";import"../../../../../vs/editor/browser/editorExtensions.js";import{ILanguageService as ve}from"../../../../../vs/editor/common/languages/language.js";import{IModelService as me}from"../../../../../vs/editor/common/services/model.js";import{ITextModelService as be}from"../../../../../vs/editor/common/services/resolverService.js";import{localize as n,localize2 as A}from"../../../../../vs/nls.js";import"../../../../../vs/platform/action/common/action.js";import{Categories as Z}from"../../../../../vs/platform/action/common/actionCommonCategories.js";import{Action2 as y,MenuId as a,MenuRegistry as ee,registerAction2 as h}from"../../../../../vs/platform/actions/common/actions.js";import{ICommandService as te}from"../../../../../vs/platform/commands/common/commands.js";import{ContextKeyExpr as u,ContextKeyTrueExpr as we,IContextKeyService as De,RawContextKey as Ie}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IDialogService as Ce}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{SyncDescriptor as Ee}from"../../../../../vs/platform/instantiation/common/descriptors.js";import{IInstantiationService as Ae}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{INotificationService as ie,Severity as p}from"../../../../../vs/platform/notification/common/notification.js";import{IOpenerService as ke}from"../../../../../vs/platform/opener/common/opener.js";import{IProductService as Te}from"../../../../../vs/platform/product/common/productService.js";import{IQuickInputService as ne}from"../../../../../vs/platform/quickinput/common/quickInput.js";import{Registry as Pe}from"../../../../../vs/platform/registry/common/platform.js";import{ITelemetryService as Re}from"../../../../../vs/platform/telemetry/common/telemetry.js";import{IUserDataProfilesService as _e}from"../../../../../vs/platform/userDataProfile/common/userDataProfile.js";import{IUserDataAutoSyncService as Oe,IUserDataSyncEnablementService as Ue,IUserDataSyncService as re,IUserDataSyncStoreManagementService as xe,registerConfiguration as Me,SyncResource as o,SyncStatus as g,USER_DATA_SYNC_LOG_ID as Ne,USER_DATA_SYNC_SCHEME as Y,UserDataSyncError as Le,UserDataSyncErrorCode as S}from"../../../../../vs/platform/userDataSync/common/userDataSync.js";import{ViewPaneContainer as qe}from"../../../../../vs/workbench/browser/parts/views/viewPaneContainer.js";import"../../../../../vs/workbench/common/contributions.js";import{EditorResourceAccessor as $e,SideBySideEditor as We}from"../../../../../vs/workbench/common/editor.js";import{Extensions as Ve,ViewContainerLocation as Be}from"../../../../../vs/workbench/common/views.js";import{IWorkbenchIssueService as Ge}from"../../../../../vs/workbench/contrib/issue/common/issue.js";import{ctxIsMergeResultEditor as ze,ctxMergeBaseUri as Ke}from"../../../../../vs/workbench/contrib/mergeEditor/common/mergeEditor.js";import{UserDataSyncDataViews as Qe}from"../../../../../vs/workbench/contrib/userDataSync/browser/userDataSyncViews.js";import{IActivityService as Fe,NumberBadge as se,ProgressBadge as He}from"../../../../../vs/workbench/services/activity/common/activity.js";import{IAuthenticationService as Ye}from"../../../../../vs/workbench/services/authentication/common/authentication.js";import{IEditorService as Xe}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{IHostService as je}from"../../../../../vs/workbench/services/host/browser/host.js";import{IOutputService as Je}from"../../../../../vs/workbench/services/output/common/output.js";import{IPreferencesService as oe}from"../../../../../vs/workbench/services/preferences/common/preferences.js";import{ITextFileService as Ze}from"../../../../../vs/workbench/services/textfile/common/textfiles.js";import{IUserDataProfileService as et}from"../../../../../vs/workbench/services/userDataProfile/common/userDataProfile.js";import{AccountStatus as T,CONFIGURE_SYNC_COMMAND_ID as tt,CONTEXT_ACCOUNT_STATE as N,CONTEXT_HAS_CONFLICTS as X,CONTEXT_SYNC_ENABLEMENT as E,CONTEXT_SYNC_STATE as w,DOWNLOAD_ACTIVITY_ACTION_DESCRIPTOR as it,getSyncAreaLabel as m,IUserDataSyncWorkbenchService as ce,SHOW_SYNC_LOG_COMMAND_ID as P,SYNC_TITLE as d,SYNC_VIEW_CONTAINER_ID as k,SYNC_VIEW_ICON as nt}from"../../../../../vs/workbench/services/userDataSync/common/userDataSync.js";const L={id:"workbench.userDataSync.actions.turnOff",title:A("stop sync","Turn Off")},q={id:tt,title:A("configure sync","Configure...")},ae="workbench.userDataSync.actions.showConflicts",O={id:"workbench.userDataSync.actions.syncNow",title:A("sync now","Sync Now"),description(D){if(D.status===g.Syncing)return n("syncing","syncing");if(D.lastSyncTime)return n("synced with time","synced {0}",ye(D.lastSyncTime,!0))}},$={id:"workbench.userDataSync.actions.settings",title:A("sync settings","Show Settings")},W={id:"workbench.userDataSync.actions.showSyncedData",title:A("show synced data","Show Synced Data")},V=new Ie("userDataSyncTurningOn",!1);let B=class extends ge{constructor(e,t,r,i,s,l,v,G,R,I,C,_,rt,le,ue,st,ot,ct,at,lt,ut,dt,St,yt){super();this.userDataSyncEnablementService=e;this.userDataSyncService=t;this.userDataSyncWorkbenchService=r;this.activityService=s;this.notificationService=l;this.editorService=v;this.userDataProfilesService=G;this.userDataProfileService=R;this.dialogService=I;this.quickInputService=C;this.instantiationService=_;this.outputService=rt;this.preferencesService=st;this.telemetryService=ot;this.productService=ct;this.openerService=at;this.authenticationService=lt;this.userDataSyncStoreManagementService=ut;this.hostService=dt;this.commandService=St;this.workbenchIssueService=yt;this.turningOnSyncContext=V.bindTo(i),r.enabled&&(Me(),this.updateAccountBadge(),this.updateGlobalActivityBadge(),this.onDidChangeConflicts(this.userDataSyncService.conflicts),this._register(x.any(x.debounce(t.onDidChangeStatus,()=>{},500),this.userDataSyncEnablementService.onDidChangeEnablement,this.userDataSyncWorkbenchService.onDidChangeAccountStatus)(()=>{this.updateAccountBadge(),this.updateGlobalActivityBadge()})),this._register(t.onDidChangeConflicts(()=>this.onDidChangeConflicts(this.userDataSyncService.conflicts))),this._register(e.onDidChangeEnablement(()=>this.onDidChangeConflicts(this.userDataSyncService.conflicts))),this._register(t.onSyncErrors(z=>this.onSynchronizerErrors(z))),this._register(le.onError(z=>this.onAutoSyncError(z))),this.registerActions(),this.registerViews(),ue.registerTextModelContentProvider(Y,_.createInstance(U)),this._register(x.any(t.onDidChangeStatus,e.onDidChangeEnablement)(()=>this.turningOnSync=!e.isEnabled()&&t.status!==g.Idle)))}turningOnSyncContext;globalActivityBadgeDisposable=this._register(new F);accountBadgeDisposable=this._register(new F);get turningOnSync(){return!!this.turningOnSyncContext.get()}set turningOnSync(e){this.turningOnSyncContext.set(e),this.updateGlobalActivityBadge()}toKey({syncResource:e,profile:t}){return`${t.id}:${e}`}conflictsDisposables=new Map;onDidChangeConflicts(e){if(this.updateGlobalActivityBadge(),this.registerShowConflictsAction(),!!this.userDataSyncEnablementService.isEnabled())if(e.length){for(const[t,r]of this.conflictsDisposables.entries())e.some(i=>this.toKey(i)===t)||(r.dispose(),this.conflictsDisposables.delete(t));for(const t of this.userDataSyncService.conflicts){const r=this.toKey(t);if(!this.conflictsDisposables.has(r)){const i=m(t.syncResource),s=this.notificationService.prompt(p.Warning,n("conflicts detected","Unable to sync due to conflicts in {0}. Please resolve them to continue.",i.toLowerCase()),[{label:n("replace remote","Replace Remote"),run:()=>{this.telemetryService.publicLog2("sync/handleConflicts",{source:t.syncResource,action:"acceptLocal"}),this.acceptLocal(t,t.conflicts[0])}},{label:n("replace local","Replace Local"),run:()=>{this.telemetryService.publicLog2("sync/handleConflicts",{source:t.syncResource,action:"acceptRemote"}),this.acceptRemote(t,t.conflicts[0])}},{label:n("show conflicts","Show Conflicts"),run:()=>{this.telemetryService.publicLog2("sync/showConflicts",{source:t.syncResource}),this.userDataSyncWorkbenchService.showConflicts(t.conflicts[0])}}],{sticky:!0});this.conflictsDisposables.set(r,J(()=>{s.close(),this.conflictsDisposables.delete(r)}))}}}else this.conflictsDisposables.forEach(t=>t.dispose()),this.conflictsDisposables.clear()}async acceptRemote(e,t){try{await this.userDataSyncService.accept(e,t.remoteResource,void 0,this.userDataSyncEnablementService.isEnabled())}catch{this.notificationService.error(n("accept failed","Error while accepting changes. Please check [logs]({0}) for more details.",`command:${P}`))}}async acceptLocal(e,t){try{await this.userDataSyncService.accept(e,t.localResource,void 0,this.userDataSyncEnablementService.isEnabled())}catch{this.notificationService.error(n("accept failed","Error while accepting changes. Please check [logs]({0}) for more details.",`command:${P}`))}}onAutoSyncError(e){switch(e.code){case S.SessionExpired:this.notificationService.notify({severity:p.Info,message:n("session expired","Settings sync was turned off because current session is expired, please sign in again to turn on sync."),actions:{primary:[new b("turn on sync",n("turn on sync","Turn on Settings Sync..."),void 0,!0,()=>this.turnOn())]}});break;case S.TurnedOff:this.notificationService.notify({severity:p.Info,message:n("turned off","Settings sync was turned off from another device, please turn on sync again."),actions:{primary:[new b("turn on sync",n("turn on sync","Turn on Settings Sync..."),void 0,!0,()=>this.turnOn())]}});break;case S.TooLarge:if(e.resource===o.Keybindings||e.resource===o.Settings||e.resource===o.Tasks){this.disableSync(e.resource);const t=m(e.resource);this.handleTooLargeError(e.resource,n("too large","Disabled syncing {0} because size of the {1} file to sync is larger than {2}. Please open the file and reduce the size and enable sync",t.toLowerCase(),t.toLowerCase(),"100kb"),e)}break;case S.LocalTooManyProfiles:this.disableSync(o.Profiles),this.notificationService.error(n("too many profiles","Disabled syncing profiles because there are too many profiles to sync. Settings Sync supports syncing maximum 20 profiles. Please reduce the number of profiles and enable sync"));break;case S.IncompatibleLocalContent:case S.Gone:case S.UpgradeRequired:{const t=n("error upgrade required","Settings sync is disabled because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.",this.productService.version,this.productService.commit),r=e.operationId?n("operationId","Operation Id: {0}",e.operationId):void 0;this.notificationService.notify({severity:p.Error,message:r?`${t} ${r}`:t});break}case S.MethodNotFound:{const t=n("method not found","Settings sync is disabled because the client is making invalid requests. Please report an issue with the logs."),r=e.operationId?n("operationId","Operation Id: {0}",e.operationId):void 0;this.notificationService.notify({severity:p.Error,message:r?`${t} ${r}`:t,actions:{primary:[new b("Show Sync Logs",n("show sync logs","Show Log"),void 0,!0,()=>this.commandService.executeCommand(P)),new b("Report Issue",n("report issue","Report Issue"),void 0,!0,()=>this.workbenchIssueService.openReporter())]}});break}case S.IncompatibleRemoteContent:this.notificationService.notify({severity:p.Error,message:n("error reset required","Settings sync is disabled because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync."),actions:{primary:[new b("reset",n("reset","Clear Data in Cloud..."),void 0,!0,()=>this.userDataSyncWorkbenchService.resetSyncedData()),new b("show synced data",n("show synced data action","Show Synced Data"),void 0,!0,()=>this.userDataSyncWorkbenchService.showSyncActivity())]}});return;case S.ServiceChanged:this.notificationService.notify({severity:p.Info,message:this.userDataSyncStoreManagementService.userDataSyncStore?.type==="insiders"?n("service switched to insiders","Settings Sync has been switched to insiders service"):n("service switched to stable","Settings Sync has been switched to stable service")});return;case S.DefaultServiceChanged:this.userDataSyncEnablementService.isEnabled()?this.notificationService.notify({severity:p.Info,message:n("using separate service","Settings sync now uses a separate service, more information is available in the [Settings Sync Documentation](https://aka.ms/vscode-settings-sync-help#_syncing-stable-versus-insiders).")}):this.notificationService.notify({severity:p.Info,message:n("service changed and turned off","Settings sync was turned off because {0} now uses a separate service. Please turn on sync again.",this.productService.nameLong),actions:{primary:[new b("turn on sync",n("turn on sync","Turn on Settings Sync..."),void 0,!0,()=>this.turnOn())]}});return}}handleTooLargeError(e,t,r){const i=r.operationId?n("operationId","Operation Id: {0}",r.operationId):void 0;this.notificationService.notify({severity:p.Error,message:i?`${t} ${i}`:t,actions:{primary:[new b("open sync file",n("open file","Open {0} File",m(e)),void 0,!0,()=>e===o.Settings?this.preferencesService.openUserSettings({jsonEditor:!0}):this.preferencesService.openGlobalKeybindingSettings(!0))]}})}invalidContentErrorDisposables=new Map;onSynchronizerErrors(e){if(e.length)for(const{profile:t,syncResource:r,error:i}of e)switch(i.code){case S.LocalInvalidContent:this.handleInvalidContentError({profile:t,syncResource:r});break;default:{const s=`${t.id}:${r}`,l=this.invalidContentErrorDisposables.get(s);l&&(l.dispose(),this.invalidContentErrorDisposables.delete(s))}}else this.invalidContentErrorDisposables.forEach(t=>t.dispose()),this.invalidContentErrorDisposables.clear()}handleInvalidContentError({profile:e,syncResource:t}){if(this.userDataProfileService.currentProfile.id!==e.id)return;const r=`${e.id}:${t}`;if(this.invalidContentErrorDisposables.has(r)||t!==o.Settings&&t!==o.Keybindings&&t!==o.Tasks||!this.hostService.hasFocus)return;const i=t===o.Settings?this.userDataProfileService.currentProfile.settingsResource:t===o.Keybindings?this.userDataProfileService.currentProfile.keybindingsResource:this.userDataProfileService.currentProfile.tasksResource,s=$e.getCanonicalUri(this.editorService.activeEditor,{supportSideBySide:We.PRIMARY});if(H(i,s))return;const l=m(t),v=this.notificationService.notify({severity:p.Error,message:n("errorInvalidConfiguration","Unable to sync {0} because the content in the file is not valid. Please open the file and correct it.",l.toLowerCase()),actions:{primary:[new b("open sync file",n("open file","Open {0} File",l),void 0,!0,()=>t===o.Settings?this.preferencesService.openUserSettings({jsonEditor:!0}):this.preferencesService.openGlobalKeybindingSettings(!0))]}});this.invalidContentErrorDisposables.set(r,J(()=>{v.close(),this.invalidContentErrorDisposables.delete(r)}))}getConflictsCount(){return this.userDataSyncService.conflicts.reduce((e,{conflicts:t})=>e+t.length,0)}async updateGlobalActivityBadge(){this.globalActivityBadgeDisposable.clear();let e,t;this.userDataSyncService.conflicts.length&&this.userDataSyncEnablementService.isEnabled()?e=new se(this.getConflictsCount(),()=>n("has conflicts","{0}: Conflicts Detected",d.value)):this.turningOnSync&&(e=new He(()=>n("turning on syncing","Turning on Settings Sync...")),t=1),e&&(this.globalActivityBadgeDisposable.value=this.activityService.showGlobalActivity({badge:e,priority:t}))}async updateAccountBadge(){this.accountBadgeDisposable.clear();let e;this.userDataSyncService.status!==g.Uninitialized&&this.userDataSyncEnablementService.isEnabled()&&this.userDataSyncWorkbenchService.accountStatus===T.Unavailable&&(e=new se(1,()=>n("sign in to sync","Sign in to Sync Settings"))),e&&(this.accountBadgeDisposable.value=this.activityService.showAccountsActivity({badge:e,priority:void 0}))}async turnOn(){try{if(!this.userDataSyncWorkbenchService.authenticationProviders.length)throw new Error(n("no authentication providers","No authentication providers are available."));if(!await this.askToConfigure())return;this.userDataSyncStoreManagementService.userDataSyncStore?.canSwitch&&await this.selectSettingsSyncService(this.userDataSyncStoreManagementService.userDataSyncStore),await this.userDataSyncWorkbenchService.turnOn()}catch(e){if(j(e))return;if(e instanceof Le){switch(e.code){case S.TooLarge:if(e.resource===o.Keybindings||e.resource===o.Settings||e.resource===o.Tasks){this.handleTooLargeError(e.resource,n("too large while starting sync","Settings sync cannot be turned on because size of the {0} file to sync is larger than {1}. Please open the file and reduce the size and turn on sync",m(e.resource).toLowerCase(),"100kb"),e);return}break;case S.IncompatibleLocalContent:case S.Gone:case S.UpgradeRequired:{const t=n("error upgrade required while starting sync","Settings sync cannot be turned on because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.",this.productService.version,this.productService.commit),r=e.operationId?n("operationId","Operation Id: {0}",e.operationId):void 0;this.notificationService.notify({severity:p.Error,message:r?`${t} ${r}`:t});return}case S.IncompatibleRemoteContent:this.notificationService.notify({severity:p.Error,message:n("error reset required while starting sync","Settings sync cannot be turned on because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync."),actions:{primary:[new b("reset",n("reset","Clear Data in Cloud..."),void 0,!0,()=>this.userDataSyncWorkbenchService.resetSyncedData()),new b("show synced data",n("show synced data action","Show Synced Data"),void 0,!0,()=>this.userDataSyncWorkbenchService.showSyncActivity())]}});return;case S.Unauthorized:case S.Forbidden:this.notificationService.error(n("auth failed","Error while turning on Settings Sync: Authentication failed."));return}this.notificationService.error(n("turn on failed with user data sync error","Error while turning on Settings Sync. Please check [logs]({0}) for more details.",`command:${P}`))}else this.notificationService.error(n({key:"turn on failed",comment:["Substitution is for error reason"]},"Error while turning on Settings Sync. {0}",he(e)))}}async askToConfigure(){return new Promise((e,t)=>{const r=new M,i=this.quickInputService.createQuickPick();r.add(i),i.title=d.value,i.ok=!1,i.customButton=!0,i.customLabel=n("sign in and turn on","Sign in"),i.description=n("configure and turn on sync detail","Please sign in to backup and sync your data across devices."),i.canSelectMany=!0,i.ignoreFocusOut=!0,i.hideInput=!0,i.hideCheckAll=!0;const s=this.getConfigureSyncQuickPickItems();i.items=s,i.selectedItems=s.filter(v=>this.userDataSyncEnablementService.isResourceEnabled(v.id));let l=!1;r.add(x.any(i.onDidAccept,i.onDidCustom)(()=>{l=!0,i.hide()})),r.add(i.onDidHide(()=>{try{l&&this.updateConfiguration(s,i.selectedItems),e(l)}catch(v){t(v)}finally{r.dispose()}})),i.show()})}getConfigureSyncQuickPickItems(){const e=[{id:o.Settings,label:m(o.Settings)},{id:o.Keybindings,label:m(o.Keybindings)},{id:o.Snippets,label:m(o.Snippets)},{id:o.Tasks,label:m(o.Tasks)},{id:o.GlobalState,label:m(o.GlobalState)},{id:o.Extensions,label:m(o.Extensions)}];return this.userDataProfilesService.isEnabled()&&e.push({id:o.Profiles,label:m(o.Profiles)}),e}updateConfiguration(e,t){for(const r of e){const i=this.userDataSyncEnablementService.isResourceEnabled(r.id),s=!!t.filter(l=>l.id===r.id)[0];i!==s&&this.userDataSyncEnablementService.setResourceEnablement(r.id,s)}}async configureSyncOptions(){return new Promise((e,t)=>{const r=new M,i=this.quickInputService.createQuickPick();r.add(i),i.title=n("configure sync title","{0}: Configure...",d.value),i.placeholder=n("configure sync placeholder","Choose what to sync"),i.canSelectMany=!0,i.ignoreFocusOut=!0,i.ok=!0;const s=this.getConfigureSyncQuickPickItems();i.items=s,i.selectedItems=s.filter(l=>this.userDataSyncEnablementService.isResourceEnabled(l.id)),r.add(i.onDidAccept(async()=>{i.selectedItems.length&&(this.updateConfiguration(s,i.selectedItems),i.hide())})),r.add(i.onDidHide(()=>{r.dispose(),e()})),i.show()})}async turnOff(){const e=await this.dialogService.confirm({message:n("turn off sync confirmation","Do you want to turn off sync?"),detail:n("turn off sync detail","Your settings, keybindings, extensions, snippets and UI State will no longer be synced."),primaryButton:n({key:"turn off",comment:["&& denotes a mnemonic"]},"&&Turn off"),checkbox:this.userDataSyncWorkbenchService.accountStatus===T.Available?{label:n("turn off sync everywhere","Turn off sync on all your devices and clear the data from the cloud.")}:void 0});if(e.confirmed)return this.userDataSyncWorkbenchService.turnoff(!!e.checkboxChecked)}disableSync(e){switch(e){case o.Settings:return this.userDataSyncEnablementService.setResourceEnablement(o.Settings,!1);case o.Keybindings:return this.userDataSyncEnablementService.setResourceEnablement(o.Keybindings,!1);case o.Snippets:return this.userDataSyncEnablementService.setResourceEnablement(o.Snippets,!1);case o.Tasks:return this.userDataSyncEnablementService.setResourceEnablement(o.Tasks,!1);case o.Extensions:return this.userDataSyncEnablementService.setResourceEnablement(o.Extensions,!1);case o.GlobalState:return this.userDataSyncEnablementService.setResourceEnablement(o.GlobalState,!1);case o.Profiles:return this.userDataSyncEnablementService.setResourceEnablement(o.Profiles,!1)}}showSyncActivity(){return this.outputService.showChannel(Ne)}async selectSettingsSyncService(e){return new Promise((t,r)=>{const i=new M,s=i.add(this.quickInputService.createQuickPick());s.title=n("switchSyncService.title","{0}: Select Service",d.value),s.description=n("switchSyncService.description","Ensure you are using the same settings sync service when syncing with multiple environments"),s.hideInput=!0,s.ignoreFocusOut=!0;const l=v=>{if(H(v,e.defaultUrl))return n("default","Default")};s.items=[{id:"insiders",label:n("insiders","Insiders"),description:l(e.insidersUrl)},{id:"stable",label:n("stable","Stable"),description:l(e.stableUrl)}],i.add(s.onDidAccept(async()=>{try{await this.userDataSyncStoreManagementService.switch(s.selectedItems[0].id),t()}catch(v){r(v)}finally{s.hide()}})),i.add(s.onDidHide(()=>i.dispose())),s.show()})}registerActions(){this.userDataSyncEnablementService.canToggleEnablement()&&(this.registerTurnOnSyncAction(),this.registerTurnOffSyncAction()),this.registerTurningOnSyncAction(),this.registerCancelTurnOnSyncAction(),this.registerSignInAction(),this.registerShowConflictsAction(),this.registerEnableSyncViewsAction(),this.registerManageSyncAction(),this.registerSyncNowAction(),this.registerConfigureSyncAction(),this.registerShowSettingsAction(),this.registerHelpAction(),this.registerShowLogAction(),this.registerResetSyncDataAction(),this.registerAcceptMergesAction(),pe&&this.registerDownloadSyncActivityAction()}registerTurnOnSyncAction(){const e=this,t=u.and(w.notEqualsTo(g.Uninitialized),E.toNegated(),V.negate());this._register(h(class extends y{constructor(){super({id:"workbench.userDataSync.actions.turnOn",title:A("global activity turn on sync","Backup and Sync Settings..."),category:d,f1:!0,precondition:t,menu:[{group:"3_configuration",id:a.GlobalActivity,when:t,order:2},{group:"3_configuration",id:a.MenubarPreferencesMenu,when:t,order:2},{group:"1_settings",id:a.AccountsContext,when:t,order:2}]})}async run(){return e.turnOn()}}))}registerTurningOnSyncAction(){const e=u.and(w.notEqualsTo(g.Uninitialized),E.toNegated(),V);this._register(h(class extends y{constructor(){super({id:"workbench.userData.actions.turningOn",title:n("turnin on sync","Turning on Settings Sync..."),precondition:u.false(),menu:[{group:"3_configuration",id:a.GlobalActivity,when:e,order:2},{group:"1_settings",id:a.AccountsContext,when:e}]})}async run(){}}))}registerCancelTurnOnSyncAction(){const e=this;this._register(h(class extends y{constructor(){super({id:"workbench.userData.actions.cancelTurnOn",title:n("cancel turning on sync","Cancel"),icon:Q.stopCircle,menu:{id:a.ViewContainerTitle,when:u.and(V,u.equals("viewContainer",k)),group:"navigation",order:1}})}async run(){return e.userDataSyncWorkbenchService.turnoff(!1)}}))}registerSignInAction(){const e=this,t="workbench.userData.actions.signin",r=u.and(w.notEqualsTo(g.Uninitialized),E,N.isEqualTo(T.Unavailable));this._register(h(class extends y{constructor(){super({id:"workbench.userData.actions.signin",title:n("sign in global","Sign in to Sync Settings"),menu:{group:"3_configuration",id:a.GlobalActivity,when:r,order:2}})}async run(){try{await e.userDataSyncWorkbenchService.signIn()}catch(s){e.notificationService.error(s)}}})),this._register(ee.appendMenuItem(a.AccountsContext,{group:"1_settings",command:{id:t,title:n("sign in accounts","Sign in to Sync Settings (1)")},when:r}))}getShowConflictsTitle(){return A("resolveConflicts_global","Show Conflicts ({0})",this.getConflictsCount())}conflictsActionDisposable=this._register(new F);registerShowConflictsAction(){this.conflictsActionDisposable.value=void 0;const e=this;this.conflictsActionDisposable.value=h(class extends y{constructor(){super({id:ae,get title(){return e.getShowConflictsTitle()},category:d,f1:!0,precondition:X,menu:[{group:"3_configuration",id:a.GlobalActivity,when:X,order:2},{group:"3_configuration",id:a.MenubarPreferencesMenu,when:X,order:2}]})}async run(){return e.userDataSyncWorkbenchService.showConflicts()}})}registerManageSyncAction(){const e=this,t=u.and(E,N.isEqualTo(T.Available),w.notEqualsTo(g.Uninitialized));this._register(h(class extends y{constructor(){super({id:"workbench.userDataSync.actions.manage",title:n("sync is on","Settings Sync is On"),toggled:we.INSTANCE,menu:[{id:a.GlobalActivity,group:"3_configuration",when:t,order:2},{id:a.MenubarPreferencesMenu,group:"3_configuration",when:t,order:2},{id:a.AccountsContext,group:"1_settings",when:t}]})}run(i){return new Promise((s,l)=>{const v=i.get(ne),G=i.get(te),R=new M,I=v.createQuickPick({useSeparators:!0});R.add(I);const C=[];if(e.userDataSyncService.conflicts.length&&(C.push({id:ae,label:`${d.value}: ${e.getShowConflictsTitle().original}`}),C.push({type:"separator"})),C.push({id:q.id,label:`${d.value}: ${q.title.original}`}),C.push({id:$.id,label:`${d.value}: ${$.title.original}`}),C.push({id:W.id,label:`${d.value}: ${W.title.original}`}),C.push({type:"separator"}),C.push({id:O.id,label:`${d.value}: ${O.title.original}`,description:O.description(e.userDataSyncService)}),e.userDataSyncEnablementService.canToggleEnablement()){const _=e.userDataSyncWorkbenchService.current;C.push({id:L.id,label:`${d.value}: ${L.title.original}`,description:_?`${_.accountName} (${e.authenticationService.getProvider(_.authenticationProviderId).label})`:void 0})}I.items=C,R.add(I.onDidAccept(()=>{I.selectedItems[0]&&I.selectedItems[0].id&&G.executeCommand(I.selectedItems[0].id),I.hide()})),R.add(I.onDidHide(()=>{R.dispose(),s()})),I.show()})}}))}registerEnableSyncViewsAction(){const e=this,t=u.and(N.isEqualTo(T.Available),w.notEqualsTo(g.Uninitialized));this._register(h(class extends y{constructor(){super({id:W.id,title:W.title,category:d,precondition:t,menu:{id:a.CommandPalette,when:t}})}run(i){return e.userDataSyncWorkbenchService.showSyncActivity()}}))}registerSyncNowAction(){const e=this;this._register(h(class extends y{constructor(){super({id:O.id,title:O.title,category:d,menu:{id:a.CommandPalette,when:u.and(E,N.isEqualTo(T.Available),w.notEqualsTo(g.Uninitialized))}})}run(r){return e.userDataSyncWorkbenchService.syncNow()}}))}registerTurnOffSyncAction(){const e=this;this._register(h(class extends y{constructor(){super({id:L.id,title:L.title,category:d,menu:{id:a.CommandPalette,when:u.and(w.notEqualsTo(g.Uninitialized),E)}})}async run(){try{await e.turnOff()}catch(r){j(r)||e.notificationService.error(n("turn off failed","Error while turning off Settings Sync. Please check [logs]({0}) for more details.",`command:${P}`))}}}))}registerConfigureSyncAction(){const e=this,t=u.and(w.notEqualsTo(g.Uninitialized),E);this._register(h(class extends y{constructor(){super({id:q.id,title:q.title,category:d,icon:Q.settingsGear,tooltip:n("configure","Configure..."),menu:[{id:a.CommandPalette,when:t},{id:a.ViewContainerTitle,when:u.and(E,u.equals("viewContainer",k)),group:"navigation",order:2}]})}run(){return e.configureSyncOptions()}}))}registerShowLogAction(){const e=this;this._register(h(class extends y{constructor(){super({id:P,title:n("show sync log title","{0}: Show Log",d.value),tooltip:n("show sync log toolrip","Show Log"),icon:Q.output,menu:[{id:a.CommandPalette,when:u.and(w.notEqualsTo(g.Uninitialized))},{id:a.ViewContainerTitle,when:u.equals("viewContainer",k),group:"navigation",order:1}]})}run(){return e.showSyncActivity()}}))}registerShowSettingsAction(){this._register(h(class extends y{constructor(){super({id:$.id,title:$.title,category:d,menu:{id:a.CommandPalette,when:u.and(w.notEqualsTo(g.Uninitialized))}})}run(t){t.get(oe).openUserSettings({jsonEditor:!1,query:"@tag:sync"})}}))}registerHelpAction(){const e=this;this._register(h(class extends y{constructor(){super({id:"workbench.userDataSync.actions.help",title:d,category:Z.Help,menu:[{id:a.CommandPalette,when:u.and(w.notEqualsTo(g.Uninitialized))}]})}run(){return e.openerService.open(fe.parse("https://aka.ms/vscode-settings-sync-help"))}})),ee.appendMenuItem(a.ViewContainerTitle,{command:{id:"workbench.userDataSync.actions.help",title:Z.Help.value},when:u.equals("viewContainer",k),group:"1_help"})}registerAcceptMergesAction(){const e=this;this._register(h(class extends y{constructor(){super({id:"workbench.userDataSync.actions.acceptMerges",title:n("complete merges title","Complete Merge"),menu:[{id:a.EditorContent,when:u.and(ze,u.regex(Ke.key,new RegExp(`^${Y}:`)))}]})}async run(r,i){const s=r.get(Ze);await s.save(i);const l=await s.read(i);await e.userDataSyncService.accept(this.getSyncResource(i),i,l.value,!0)}getSyncResource(r){const i=e.userDataSyncService.conflicts.find(({conflicts:s})=>s.some(l=>H(l.previewResource,r)));if(i)return i;throw new Error(`Unknown resource: ${r.toString()}`)}}))}registerDownloadSyncActivityAction(){this._register(h(class extends y{constructor(){super(it)}async run(t){const r=t.get(ce),i=t.get(ie);await r.downloadSyncActivity()&&i.info(n("download sync activity complete","Successfully downloaded Settings Sync activity."))}}))}registerViews(){const e=this.registerViewContainer();this.registerDataViews(e)}registerViewContainer(){return Pe.as(Ve.ViewContainersRegistry).registerViewContainer({id:k,title:d,ctorDescriptor:new Ee(qe,[k,{mergeViewWithContainerWhenSingleView:!0}]),icon:nt,hideIfEmpty:!0},Be.Sidebar)}registerResetSyncDataAction(){const e=this;this._register(h(class extends y{constructor(){super({id:"workbench.actions.syncData.reset",title:n("workbench.actions.syncData.reset","Clear Data in Cloud..."),menu:[{id:a.ViewContainerTitle,when:u.equals("viewContainer",k),group:"0_configure"}]})}run(){return e.userDataSyncWorkbenchService.resetSyncedData()}}))}registerDataViews(e){this._register(this.instantiationService.createInstance(Qe,e))}};B=K([c(0,Ue),c(1,re),c(2,ce),c(3,De),c(4,Fe),c(5,ie),c(6,Xe),c(7,_e),c(8,et),c(9,Ce),c(10,ne),c(11,Ae),c(12,Je),c(13,Oe),c(14,be),c(15,oe),c(16,Re),c(17,Te),c(18,ke),c(19,Ye),c(20,xe),c(21,je),c(22,te),c(23,Ge)],B);let U=class{constructor(f,e,t){this.userDataSyncService=f;this.modelService=e;this.languageService=t}provideTextContent(f){return f.scheme===Y?this.userDataSyncService.resolveContent(f).then(e=>this.modelService.createModel(e||"",this.languageService.createById("jsonc"),f)):null}};U=K([c(0,re),c(1,me),c(2,ve)],U);export{B as UserDataSyncWorkbenchContribution};
