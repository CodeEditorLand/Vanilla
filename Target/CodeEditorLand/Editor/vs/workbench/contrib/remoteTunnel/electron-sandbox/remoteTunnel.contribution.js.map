{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from '../../../../base/common/actions.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ITunnelApplicationConfig } from '../../../../base/common/product.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { isNumber, isObject, isString } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { Extensions as ConfigurationExtensions, ConfigurationScope, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { INativeEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogger, ILoggerService } from '../../../../platform/log/common/log.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IProgress, IProgressService, IProgressStep, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator, QuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { CONFIGURATION_KEY_HOST_NAME, CONFIGURATION_KEY_PREFIX, CONFIGURATION_KEY_PREVENT_SLEEP, ConnectionInfo, INACTIVE_TUNNEL_MODE, IRemoteTunnelService, IRemoteTunnelSession, LOGGER_NAME, LOG_ID, TunnelStatus } from '../../../../platform/remoteTunnel/common/remoteTunnel.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IWorkspaceContextService, isUntitledWorkspace } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { AuthenticationSession, IAuthenticationService } from '../../../services/authentication/common/authentication.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IOutputService } from '../../../services/output/common/output.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\n\nexport const REMOTE_TUNNEL_CATEGORY = localize2('remoteTunnel.category', 'Remote Tunnels');\n\ntype CONTEXT_KEY_STATES = 'connected' | 'connecting' | 'disconnected';\n\nexport const REMOTE_TUNNEL_CONNECTION_STATE_KEY = 'remoteTunnelConnection';\nexport const REMOTE_TUNNEL_CONNECTION_STATE = new RawContextKey<CONTEXT_KEY_STATES>(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected');\n\nconst REMOTE_TUNNEL_USED_STORAGE_KEY = 'remoteTunnelServiceUsed';\nconst REMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY = 'remoteTunnelServicePromptedPreview';\nconst REMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY = 'remoteTunnelExtensionRecommended';\nconst REMOTE_TUNNEL_HAS_USED_BEFORE = 'remoteTunnelHasUsed';\nconst REMOTE_TUNNEL_EXTENSION_TIMEOUT = 4 * 60 * 1000; // show the recommendation that a machine started using tunnels if it joined less than 4 minutes ago\n\nconst INVALID_TOKEN_RETRIES = 2;\n\ninterface UsedOnHostMessage { hostName: string; timeStamp: number }\n\ntype ExistingSessionItem = { session: AuthenticationSession; providerId: string; label: string; description: string };\ntype IAuthenticationProvider = { id: string; scopes: string[] };\ntype AuthenticationProviderOption = IQuickPickItem & { provider: IAuthenticationProvider };\n\nenum RemoteTunnelCommandIds {\n\tturnOn = 'workbench.remoteTunnel.actions.turnOn',\n\tturnOff = 'workbench.remoteTunnel.actions.turnOff',\n\tconnecting = 'workbench.remoteTunnel.actions.connecting',\n\tmanage = 'workbench.remoteTunnel.actions.manage',\n\tshowLog = 'workbench.remoteTunnel.actions.showLog',\n\tconfigure = 'workbench.remoteTunnel.actions.configure',\n\tcopyToClipboard = 'workbench.remoteTunnel.actions.copyToClipboard',\n\tlearnMore = 'workbench.remoteTunnel.actions.learnMore',\n}\n\n// name shown in nofications\nnamespace RemoteTunnelCommandLabels {\n\texport const turnOn = localize('remoteTunnel.actions.turnOn', 'Turn on Remote Tunnel Access...');\n\texport const turnOff = localize('remoteTunnel.actions.turnOff', 'Turn off Remote Tunnel Access...');\n\texport const showLog = localize('remoteTunnel.actions.showLog', 'Show Remote Tunnel Service Log');\n\texport const configure = localize('remoteTunnel.actions.configure', 'Configure Tunnel Name...');\n\texport const copyToClipboard = localize('remoteTunnel.actions.copyToClipboard', 'Copy Browser URI to Clipboard');\n\texport const learnMore = localize('remoteTunnel.actions.learnMore', 'Get Started with Tunnels');\n}\n\n\nexport class RemoteTunnelWorkbenchContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly connectionStateContext: IContextKey<CONTEXT_KEY_STATES>;\n\n\tprivate readonly serverConfiguration: ITunnelApplicationConfig;\n\n\tprivate connectionInfo: ConnectionInfo | undefined;\n\n\tprivate readonly logger: ILogger;\n\n\tprivate expiredSessions: Set<string> = new Set();\n\n\tconstructor(\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IProductService productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@INativeEnvironmentService private environmentService: INativeEnvironmentService,\n\t\t@IRemoteTunnelService private remoteTunnelService: IRemoteTunnelService,\n\t\t@ICommandService private commandService: ICommandService,\n\t\t@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,\n\t\t@IProgressService private progressService: IProgressService,\n\t\t@INotificationService private notificationService: INotificationService\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = this._register(loggerService.createLogger(joinPath(environmentService.logsHome, `${LOG_ID}.log`), { id: LOG_ID, name: LOGGER_NAME }));\n\n\t\tthis.connectionStateContext = REMOTE_TUNNEL_CONNECTION_STATE.bindTo(this.contextKeyService);\n\n\t\tconst serverConfiguration = productService.tunnelApplicationConfig;\n\t\tif (!serverConfiguration || !productService.tunnelApplicationName) {\n\t\t\tthis.logger.error('Missing \\'tunnelApplicationConfig\\' or \\'tunnelApplicationName\\' in product.json. Remote tunneling is not available.');\n\t\t\tthis.serverConfiguration = { authenticationProviders: {}, editorWebUrl: '', extension: { extensionId: '', friendlyName: '' } };\n\t\t\treturn;\n\t\t}\n\t\tthis.serverConfiguration = serverConfiguration;\n\n\t\tthis._register(this.remoteTunnelService.onDidChangeTunnelStatus(s => this.handleTunnelStatusUpdate(s)));\n\n\t\tthis.registerCommands();\n\n\t\tthis.initialize();\n\n\t\tthis.recommendRemoteExtensionIfNeeded();\n\t}\n\n\tprivate handleTunnelStatusUpdate(status: TunnelStatus) {\n\t\tthis.connectionInfo = undefined;\n\t\tif (status.type === 'disconnected') {\n\t\t\tif (status.onTokenFailed) {\n\t\t\t\tthis.expiredSessions.add(status.onTokenFailed.sessionId);\n\t\t\t}\n\t\t\tthis.connectionStateContext.set('disconnected');\n\t\t} else if (status.type === 'connecting') {\n\t\t\tthis.connectionStateContext.set('connecting');\n\t\t} else if (status.type === 'connected') {\n\t\t\tthis.connectionInfo = status.info;\n\t\t\tthis.connectionStateContext.set('connected');\n\t\t}\n\t}\n\n\tprivate async recommendRemoteExtensionIfNeeded() {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tconst remoteExtension = this.serverConfiguration.extension;\n\t\tconst shouldRecommend = async () => {\n\t\t\tif (this.storageService.getBoolean(REMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY, StorageScope.APPLICATION)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (await this.extensionService.getExtension(remoteExtension.extensionId)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst usedOnHostMessage = this.storageService.get(REMOTE_TUNNEL_USED_STORAGE_KEY, StorageScope.APPLICATION);\n\t\t\tif (!usedOnHostMessage) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet usedTunnelName: string | undefined;\n\t\t\ttry {\n\t\t\t\tconst message = JSON.parse(usedOnHostMessage);\n\t\t\t\tif (!isObject(message)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst { hostName, timeStamp } = message as UsedOnHostMessage;\n\t\t\t\tif (!isString(hostName)! || !isNumber(timeStamp) || new Date().getTime() > timeStamp + REMOTE_TUNNEL_EXTENSION_TIMEOUT) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tusedTunnelName = hostName;\n\t\t\t} catch (_) {\n\t\t\t\t// problems parsing the message, likly the old message format\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst currentTunnelName = await this.remoteTunnelService.getTunnelName();\n\t\t\tif (!currentTunnelName || currentTunnelName === usedTunnelName) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn usedTunnelName;\n\t\t};\n\t\tconst recommed = async () => {\n\t\t\tconst usedOnHost = await shouldRecommend();\n\t\t\tif (!usedOnHost) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage:\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: 'recommend.remoteExtension',\n\t\t\t\t\t\t\tcomment: ['{0} will be a tunnel name, {1} will the link address to the web UI, {6} an extension name. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Tunnel '{0}' is avaiable for remote access. The {1} extension can be used to connect to it.\",\n\t\t\t\t\t\tusedOnHost, remoteExtension.friendlyName\n\t\t\t\t\t),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [\n\t\t\t\t\t\tnew Action('showExtension', localize('action.showExtension', \"Show Extension\"), undefined, true, () => {\n\t\t\t\t\t\t\treturn this.commandService.executeCommand('workbench.extensions.action.showExtensionsWithIds', [remoteExtension.extensionId]);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew Action('doNotShowAgain', localize('action.doNotShowAgain', \"Do not show again\"), undefined, true, () => {\n\t\t\t\t\t\t\tthis.storageService.store(REMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY, true, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\t\t}),\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t};\n\t\tif (await shouldRecommend()) {\n\t\t\tconst disposables = this._register(new DisposableStore());\n\t\t\tdisposables.add(this.storageService.onDidChangeValue(StorageScope.APPLICATION, REMOTE_TUNNEL_USED_STORAGE_KEY, disposables)(async () => {\n\t\t\t\tconst success = await recommed();\n\t\t\t\tif (success) {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tconst [mode, status] = await Promise.all([\n\t\t\tthis.remoteTunnelService.getMode(),\n\t\t\tthis.remoteTunnelService.getTunnelStatus(),\n\t\t]);\n\n\t\tthis.handleTunnelStatusUpdate(status);\n\n\t\tif (mode.active && mode.session.token) {\n\t\t\treturn; // already initialized, token available\n\t\t}\n\n\t\tconst doInitialStateDiscovery = async (progress?: IProgress<IProgressStep>) => {\n\t\t\tconst listener = progress && this.remoteTunnelService.onDidChangeTunnelStatus(status => {\n\t\t\t\tswitch (status.type) {\n\t\t\t\t\tcase 'connecting':\n\t\t\t\t\t\tif (status.progress) {\n\t\t\t\t\t\t\tprogress.report({ message: status.progress });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet newSession: IRemoteTunnelSession | undefined;\n\t\t\tif (mode.active) {\n\t\t\t\tconst token = await this.getSessionToken(mode.session);\n\t\t\t\tif (token) {\n\t\t\t\t\tnewSession = { ...mode.session, token };\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst status = await this.remoteTunnelService.initialize(mode.active && newSession ? { ...mode, session: newSession } : INACTIVE_TUNNEL_MODE);\n\t\t\tlistener?.dispose();\n\n\t\t\tif (status.type === 'connected') {\n\t\t\t\tthis.connectionInfo = status.info;\n\t\t\t\tthis.connectionStateContext.set('connected');\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\n\t\tconst hasUsed = this.storageService.getBoolean(REMOTE_TUNNEL_HAS_USED_BEFORE, StorageScope.APPLICATION, false);\n\n\t\tif (hasUsed) {\n\t\t\tawait this.progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\t\ttitle: localize({ key: 'initialize.progress.title', comment: ['Only translate \\'Looking for remote tunnel\\', do not change the format of the rest (markdown link format)'] }, \"[Looking for remote tunnel](command:{0})\", RemoteTunnelCommandIds.showLog),\n\t\t\t\t},\n\t\t\t\tdoInitialStateDiscovery\n\t\t\t);\n\t\t} else {\n\t\t\tdoInitialStateDiscovery(undefined);\n\t\t}\n\t}\n\n\tprivate getPreferredTokenFromSession(session: ExistingSessionItem) {\n\t\treturn session.session.accessToken || session.session.idToken;\n\t}\n\n\tprivate async startTunnel(asService: boolean): Promise<ConnectionInfo | undefined> {\n\t\tif (this.connectionInfo) {\n\t\t\treturn this.connectionInfo;\n\t\t}\n\n\t\tthis.storageService.store(REMOTE_TUNNEL_HAS_USED_BEFORE, true, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\n\t\tlet tokenProblems = false;\n\t\tfor (let i = 0; i < INVALID_TOKEN_RETRIES; i++) {\n\t\t\ttokenProblems = false;\n\n\t\t\tconst authenticationSession = await this.getAuthenticationSession();\n\t\t\tif (authenticationSession === undefined) {\n\t\t\t\tthis.logger.info('No authentication session available, not starting tunnel');\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = await this.progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle: localize({ key: 'startTunnel.progress.title', comment: ['Only translate \\'Starting remote tunnel\\', do not change the format of the rest (markdown link format)'] }, \"[Starting remote tunnel](command:{0})\", RemoteTunnelCommandIds.showLog),\n\t\t\t\t},\n\t\t\t\t(progress: IProgress<IProgressStep>) => {\n\t\t\t\t\treturn new Promise<ConnectionInfo | undefined>((s, e) => {\n\t\t\t\t\t\tlet completed = false;\n\t\t\t\t\t\tconst listener = this.remoteTunnelService.onDidChangeTunnelStatus(status => {\n\t\t\t\t\t\t\tswitch (status.type) {\n\t\t\t\t\t\t\t\tcase 'connecting':\n\t\t\t\t\t\t\t\t\tif (status.progress) {\n\t\t\t\t\t\t\t\t\t\tprogress.report({ message: status.progress });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'connected':\n\t\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t\ts(status.info);\n\t\t\t\t\t\t\t\t\tif (status.serviceInstallFailed) {\n\t\t\t\t\t\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\t\t\t\t\t\tseverity: Severity.Warning,\n\t\t\t\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey: 'remoteTunnel.serviceInstallFailed',\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: ['{Locked=\"](command:{0})\"}']\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"Installation as a service failed, and we fell back to running the tunnel for this session. See the [error log](command:{0}) for details.\",\n\t\t\t\t\t\t\t\t\t\t\t\tRemoteTunnelCommandIds.showLog,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'disconnected':\n\t\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t\ttokenProblems = !!status.onTokenFailed;\n\t\t\t\t\t\t\t\t\ts(undefined);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst token = this.getPreferredTokenFromSession(authenticationSession);\n\t\t\t\t\t\tconst account: IRemoteTunnelSession = { sessionId: authenticationSession.session.id, token, providerId: authenticationSession.providerId, accountLabel: authenticationSession.session.account.label };\n\t\t\t\t\t\tthis.remoteTunnelService.startTunnel({ active: true, asService, session: account }).then(status => {\n\t\t\t\t\t\t\tif (!completed && (status.type === 'connected' || status.type === 'disconnected')) {\n\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\tif (status.type === 'connected') {\n\t\t\t\t\t\t\t\t\ts(status.info);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttokenProblems = !!status.onTokenFailed;\n\t\t\t\t\t\t\t\t\ts(undefined);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (result || !tokenProblems) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async getAuthenticationSession(): Promise<ExistingSessionItem | undefined> {\n\t\tconst sessions = await this.getAllSessions();\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickpick = disposables.add(this.quickInputService.createQuickPick<ExistingSessionItem | AuthenticationProviderOption | IQuickPickItem>({ useSeparators: true }));\n\t\tquickpick.ok = false;\n\t\tquickpick.placeholder = localize('accountPreference.placeholder', \"Sign in to an account to enable remote access\");\n\t\tquickpick.ignoreFocusOut = true;\n\t\tquickpick.items = await this.createQuickpickItems(sessions);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdisposables.add(quickpick.onDidHide((e) => {\n\t\t\t\tresolve(undefined);\n\t\t\t\tdisposables.dispose();\n\t\t\t}));\n\n\t\t\tdisposables.add(quickpick.onDidAccept(async (e) => {\n\t\t\t\tconst selection = quickpick.selectedItems[0];\n\t\t\t\tif ('provider' in selection) {\n\t\t\t\t\tconst session = await this.authenticationService.createSession(selection.provider.id, selection.provider.scopes);\n\t\t\t\t\tresolve(this.createExistingSessionItem(session, selection.provider.id));\n\t\t\t\t} else if ('session' in selection) {\n\t\t\t\t\tresolve(selection);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t\tquickpick.hide();\n\t\t\t}));\n\n\t\t\tquickpick.show();\n\t\t});\n\t}\n\n\tprivate createExistingSessionItem(session: AuthenticationSession, providerId: string): ExistingSessionItem {\n\t\treturn {\n\t\t\tlabel: session.account.label,\n\t\t\tdescription: this.authenticationService.getProvider(providerId).label,\n\t\t\tsession,\n\t\t\tproviderId\n\t\t};\n\t}\n\n\tprivate async createQuickpickItems(sessions: ExistingSessionItem[]): Promise<(ExistingSessionItem | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[]> {\n\t\tconst options: (ExistingSessionItem | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[] = [];\n\n\t\tif (sessions.length) {\n\t\t\toptions.push({ type: 'separator', label: localize('signed in', \"Signed In\") });\n\t\t\toptions.push(...sessions);\n\t\t\toptions.push({ type: 'separator', label: localize('others', \"Others\") });\n\t\t}\n\n\t\tfor (const authenticationProvider of (await this.getAuthenticationProviders())) {\n\t\t\tconst signedInForProvider = sessions.some(account => account.providerId === authenticationProvider.id);\n\t\t\tconst provider = this.authenticationService.getProvider(authenticationProvider.id);\n\t\t\tif (!signedInForProvider || provider.supportsMultipleAccounts) {\n\t\t\t\toptions.push({ label: localize({ key: 'sign in using account', comment: ['{0} will be a auth provider (e.g. Github)'] }, \"Sign in with {0}\", provider.label), provider: authenticationProvider });\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Returns all authentication sessions available from {@link getAuthenticationProviders}.\n\t */\n\tprivate async getAllSessions(): Promise<ExistingSessionItem[]> {\n\t\tconst authenticationProviders = await this.getAuthenticationProviders();\n\t\tconst accounts = new Map<string, ExistingSessionItem>();\n\t\tconst currentAccount = await this.remoteTunnelService.getMode();\n\t\tlet currentSession: ExistingSessionItem | undefined;\n\n\t\tfor (const provider of authenticationProviders) {\n\t\t\tconst sessions = await this.authenticationService.getSessions(provider.id, provider.scopes);\n\n\t\t\tfor (const session of sessions) {\n\t\t\t\tif (!this.expiredSessions.has(session.id)) {\n\t\t\t\t\tconst item = this.createExistingSessionItem(session, provider.id);\n\t\t\t\t\taccounts.set(item.session.account.id, item);\n\t\t\t\t\tif (currentAccount.active && currentAccount.session.sessionId === session.id) {\n\t\t\t\t\t\tcurrentSession = item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentSession !== undefined) {\n\t\t\taccounts.set(currentSession.session.account.id, currentSession);\n\t\t}\n\n\t\treturn [...accounts.values()];\n\t}\n\n\tprivate async getSessionToken(session: IRemoteTunnelSession | undefined): Promise<string | undefined> {\n\t\tif (session) {\n\t\t\tconst sessionItem = (await this.getAllSessions()).find(s => s.session.id === session.sessionId);\n\t\t\tif (sessionItem) {\n\t\t\t\treturn this.getPreferredTokenFromSession(sessionItem);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Returns all authentication providers which can be used to authenticate\n\t * to the remote storage service, based on product.json configuration\n\t * and registered authentication providers.\n\t */\n\tprivate async getAuthenticationProviders(): Promise<IAuthenticationProvider[]> {\n\t\t// Get the list of authentication providers configured in product.json\n\t\tconst authenticationProviders = this.serverConfiguration.authenticationProviders;\n\t\tconst configuredAuthenticationProviders = Object.keys(authenticationProviders).reduce<IAuthenticationProvider[]>((result, id) => {\n\t\t\tresult.push({ id, scopes: authenticationProviders[id].scopes });\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t// Filter out anything that isn't currently available through the authenticationService\n\t\tconst availableAuthenticationProviders = this.authenticationService.declaredProviders;\n\n\t\treturn configuredAuthenticationProviders.filter(({ id }) => availableAuthenticationProviders.some(provider => provider.id === id));\n\t}\n\n\tprivate registerCommands() {\n\t\tconst that = this;\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.turnOn,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.turnOn,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected'),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_remoteTunnel',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\t\tconst productService = accessor.get(IProductService);\n\n\t\t\t\tconst didNotifyPreview = storageService.getBoolean(REMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY, StorageScope.APPLICATION, false);\n\t\t\t\tif (!didNotifyPreview) {\n\t\t\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\t\t\tmessage: localize('tunnel.preview', 'Remote Tunnels is currently in preview. Please report any problems using the \"Help: Report Issue\" command.'),\n\t\t\t\t\t\tprimaryButton: localize({ key: 'enable', comment: ['&& denotes a mnemonic'] }, '&&Enable')\n\t\t\t\t\t});\n\t\t\t\t\tif (!confirmed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstorageService.store(REMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY, true, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst quickPick = quickInputService.createQuickPick<IQuickPickItem & { service: boolean }>();\n\t\t\t\tquickPick.placeholder = localize('tunnel.enable.placeholder', 'Select how you want to enable access');\n\t\t\t\tquickPick.items = [\n\t\t\t\t\t{ service: false, label: localize('tunnel.enable.session', 'Turn on for this session'), description: localize('tunnel.enable.session.description', 'Run whenever {0} is open', productService.nameShort) },\n\t\t\t\t\t{ service: true, label: localize('tunnel.enable.service', 'Install as a service'), description: localize('tunnel.enable.service.description', 'Run whenever you\\'re logged in') }\n\t\t\t\t];\n\n\t\t\t\tconst asService = await new Promise<boolean | undefined>(resolve => {\n\t\t\t\t\tdisposables.add(quickPick.onDidAccept(() => resolve(quickPick.selectedItems[0]?.service)));\n\t\t\t\t\tdisposables.add(quickPick.onDidHide(() => resolve(undefined)));\n\t\t\t\t\tquickPick.show();\n\t\t\t\t});\n\n\t\t\t\tquickPick.dispose();\n\n\t\t\t\tif (asService === undefined) {\n\t\t\t\t\treturn; // no-op\n\t\t\t\t}\n\n\t\t\t\tconst connectionInfo = await that.startTunnel(/* installAsService= */ asService);\n\n\t\t\t\tif (connectionInfo) {\n\t\t\t\t\tconst linkToOpen = that.getLinkToOpen(connectionInfo);\n\t\t\t\t\tconst remoteExtension = that.serverConfiguration.extension;\n\t\t\t\t\tconst linkToOpenForMarkdown = linkToOpen.toString(false).replace(/\\)/g, '%29');\n\t\t\t\t\tnotificationService.notify({\n\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: 'progress.turnOn.final',\n\t\t\t\t\t\t\t\t\tcomment: ['{0} will be the tunnel name, {1} will the link address to the web UI, {6} an extension name, {7} a link to the extension documentation. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format']\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"You can now access this machine anywhere via the secure tunnel [{0}](command:{4}). To connect via a different machine, use the generated [{1}]({2}) link or use the [{6}]({7}) extension in the desktop or web. You can [configure](command:{3}) or [turn off](command:{5}) this access via the VS Code Accounts menu.\",\n\t\t\t\t\t\t\t\tconnectionInfo.tunnelName, connectionInfo.domain, linkToOpenForMarkdown, RemoteTunnelCommandIds.manage, RemoteTunnelCommandIds.configure, RemoteTunnelCommandIds.turnOff, remoteExtension.friendlyName, 'https://code.visualstudio.com/docs/remote/tunnels'\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\tnew Action('copyToClipboard', localize('action.copyToClipboard', \"Copy Browser Link to Clipboard\"), undefined, true, () => clipboardService.writeText(linkToOpen.toString(true))),\n\t\t\t\t\t\t\t\tnew Action('showExtension', localize('action.showExtension', \"Show Extension\"), undefined, true, () => {\n\t\t\t\t\t\t\t\t\treturn commandService.executeCommand('workbench.extensions.action.showExtensionsWithIds', [remoteExtension.extensionId]);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tconst usedOnHostMessage: UsedOnHostMessage = { hostName: connectionInfo.tunnelName, timeStamp: new Date().getTime() };\n\t\t\t\t\tstorageService.store(REMOTE_TUNNEL_USED_STORAGE_KEY, JSON.stringify(usedOnHostMessage), StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t} else {\n\t\t\t\t\tnotificationService.notify({\n\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\tmessage: localize('progress.turnOn.failed',\n\t\t\t\t\t\t\t\"Unable to turn on the remote tunnel access. Check the Remote Tunnel Service log for details.\"),\n\t\t\t\t\t});\n\t\t\t\t\tawait commandService.executeCommand(RemoteTunnelCommandIds.showLog);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.manage,\n\t\t\t\t\ttitle: localize('remoteTunnel.actions.manage.on.v2', 'Remote Tunnel Access is On'),\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_remoteTunnel',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connected'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tthat.showManageOptions();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.connecting,\n\t\t\t\t\ttitle: localize('remoteTunnel.actions.manage.connecting', 'Remote Tunnel Access is Connecting'),\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_remoteTunnel',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connecting'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tthat.showManageOptions();\n\t\t\t}\n\t\t}));\n\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.turnOff,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.turnOff,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected'),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, ''),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tconst message =\n\t\t\t\t\tthat.connectionInfo?.isAttached ?\n\t\t\t\t\t\tlocalize('remoteTunnel.turnOffAttached.confirm', 'Do you want to turn off Remote Tunnel Access? This will also stop the service that was started externally.') :\n\t\t\t\t\t\tlocalize('remoteTunnel.turnOff.confirm', 'Do you want to turn off Remote Tunnel Access?');\n\n\t\t\t\tconst { confirmed } = await that.dialogService.confirm({ message });\n\t\t\t\tif (confirmed) {\n\t\t\t\t\tthat.remoteTunnelService.stopTunnel();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.showLog,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.showLog,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, ''),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst outputService = accessor.get(IOutputService);\n\t\t\t\toutputService.showChannel(LOG_ID);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.configure,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.configure,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, ''),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst preferencesService = accessor.get(IPreferencesService);\n\t\t\t\tpreferencesService.openSettings({ query: CONFIGURATION_KEY_PREFIX });\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.copyToClipboard,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.copyToClipboard,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connected'),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connected'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\t\tif (that.connectionInfo) {\n\t\t\t\t\tconst linkToOpen = that.getLinkToOpen(that.connectionInfo);\n\t\t\t\t\tclipboardService.writeText(linkToOpen.toString(true));\n\t\t\t\t}\n\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.learnMore,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.learnMore,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: []\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\tawait openerService.open('https://aka.ms/vscode-server-doc');\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate getLinkToOpen(connectionInfo: ConnectionInfo): URI {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst folders = workspace.folders;\n\t\tlet resource;\n\t\tif (folders.length === 1) {\n\t\t\tresource = folders[0].uri;\n\t\t} else if (workspace.configuration && !isUntitledWorkspace(workspace.configuration, this.environmentService)) {\n\t\t\tresource = workspace.configuration;\n\t\t}\n\t\tconst link = URI.parse(connectionInfo.link);\n\t\tif (resource?.scheme === Schemas.file) {\n\t\t\treturn joinPath(link, resource.path);\n\t\t}\n\t\treturn joinPath(link, this.environmentService.userHome.path);\n\t}\n\n\n\tprivate async showManageOptions() {\n\t\tconst account = await this.remoteTunnelService.getMode();\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst quickPick = this.quickInputService.createQuickPick({ useSeparators: true });\n\t\t\tquickPick.placeholder = localize('manage.placeholder', 'Select a command to invoke');\n\t\t\tdisposables.add(quickPick);\n\t\t\tconst items: Array<QuickPickItem> = [];\n\t\t\titems.push({ id: RemoteTunnelCommandIds.learnMore, label: RemoteTunnelCommandLabels.learnMore });\n\t\t\tif (this.connectionInfo) {\n\t\t\t\tquickPick.title =\n\t\t\t\t\tthis.connectionInfo.isAttached ?\n\t\t\t\t\t\tlocalize({ key: 'manage.title.attached', comment: ['{0} is the tunnel name'] }, 'Remote Tunnel Access enabled for {0} (launched externally)', this.connectionInfo.tunnelName) :\n\t\t\t\t\t\tlocalize({ key: 'manage.title.orunning', comment: ['{0} is the tunnel name'] }, 'Remote Tunnel Access enabled for {0}', this.connectionInfo.tunnelName);\n\n\t\t\t\titems.push({ id: RemoteTunnelCommandIds.copyToClipboard, label: RemoteTunnelCommandLabels.copyToClipboard, description: this.connectionInfo.domain });\n\t\t\t} else {\n\t\t\t\tquickPick.title = localize('manage.title.off', 'Remote Tunnel Access not enabled');\n\t\t\t}\n\t\t\titems.push({ id: RemoteTunnelCommandIds.showLog, label: localize('manage.showLog', 'Show Log') });\n\t\t\titems.push({ type: 'separator' });\n\t\t\titems.push({ id: RemoteTunnelCommandIds.configure, label: localize('manage.tunnelName', 'Change Tunnel Name'), description: this.connectionInfo?.tunnelName });\n\t\t\titems.push({ id: RemoteTunnelCommandIds.turnOff, label: RemoteTunnelCommandLabels.turnOff, description: account.active ? `${account.session.accountLabel} (${account.session.providerId})` : undefined });\n\n\t\t\tquickPick.items = items;\n\t\t\tdisposables.add(quickPick.onDidAccept(() => {\n\t\t\t\tif (quickPick.selectedItems[0] && quickPick.selectedItems[0].id) {\n\t\t\t\t\tthis.commandService.executeCommand(quickPick.selectedItems[0].id);\n\t\t\t\t}\n\t\t\t\tquickPick.hide();\n\t\t\t}));\n\t\t\tdisposables.add(quickPick.onDidHide(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tc();\n\t\t\t}));\n\t\t\tquickPick.show();\n\t\t});\n\t}\n}\n\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RemoteTunnelWorkbenchContribution, LifecyclePhase.Restored);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\ttype: 'object',\n\tproperties: {\n\t\t[CONFIGURATION_KEY_HOST_NAME]: {\n\t\t\tdescription: localize('remoteTunnelAccess.machineName', \"The name under which the remote tunnel access is registered. If not set, the host name is used.\"),\n\t\t\ttype: 'string',\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\tignoreSync: true,\n\t\t\tpattern: '^(\\\\w[\\\\w-]*)?$',\n\t\t\tpatternErrorMessage: localize('remoteTunnelAccess.machineNameRegex', \"The name must only consist of letters, numbers, underscore and dash. It must not start with a dash.\"),\n\t\t\tmaxLength: 20,\n\t\t\tdefault: ''\n\t\t},\n\t\t[CONFIGURATION_KEY_PREVENT_SLEEP]: {\n\t\t\tdescription: localize('remoteTunnelAccess.preventSleep', \"Prevent this computer from sleeping when remote tunnel access is turned on.\"),\n\t\t\ttype: 'boolean',\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\tdefault: false,\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": ["RemoteTunnelCommandIds", "RemoteTunnelCommandLabels", "status"]
}
