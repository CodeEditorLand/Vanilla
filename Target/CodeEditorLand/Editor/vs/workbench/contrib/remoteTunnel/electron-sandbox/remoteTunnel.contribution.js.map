{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../../base/common/actions.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type { ITunnelApplicationConfig } from \"../../../../base/common/product.js\";\nimport { joinPath } from \"../../../../base/common/resources.js\";\nimport { isNumber, isObject, isString } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\tConfigurationScope,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { INativeEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype ILogger,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\ttype IProgress,\n\tIProgressService,\n\ttype IProgressStep,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickSeparator,\n\ttype QuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tCONFIGURATION_KEY_HOST_NAME,\n\tCONFIGURATION_KEY_PREFIX,\n\tCONFIGURATION_KEY_PREVENT_SLEEP,\n\ttype ConnectionInfo,\n\tINACTIVE_TUNNEL_MODE,\n\tIRemoteTunnelService,\n\ttype IRemoteTunnelSession,\n\tLOGGER_NAME,\n\tLOG_ID,\n\ttype TunnelStatus,\n} from \"../../../../platform/remoteTunnel/common/remoteTunnel.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tIWorkspaceContextService,\n\tisUntitledWorkspace,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../common/contributions.js\";\nimport {\n\ttype AuthenticationSession,\n\tIAuthenticationService,\n} from \"../../../services/authentication/common/authentication.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IOutputService } from \"../../../services/output/common/output.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\n\nexport const REMOTE_TUNNEL_CATEGORY = localize2(\n\t\"remoteTunnel.category\",\n\t\"Remote Tunnels\",\n);\n\ntype CONTEXT_KEY_STATES = \"connected\" | \"connecting\" | \"disconnected\";\n\nexport const REMOTE_TUNNEL_CONNECTION_STATE_KEY = \"remoteTunnelConnection\";\nexport const REMOTE_TUNNEL_CONNECTION_STATE =\n\tnew RawContextKey<CONTEXT_KEY_STATES>(\n\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\"disconnected\",\n\t);\n\nconst REMOTE_TUNNEL_USED_STORAGE_KEY = \"remoteTunnelServiceUsed\";\nconst REMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY =\n\t\"remoteTunnelServicePromptedPreview\";\nconst REMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY =\n\t\"remoteTunnelExtensionRecommended\";\nconst REMOTE_TUNNEL_HAS_USED_BEFORE = \"remoteTunnelHasUsed\";\nconst REMOTE_TUNNEL_EXTENSION_TIMEOUT = 4 * 60 * 1000; // show the recommendation that a machine started using tunnels if it joined less than 4 minutes ago\n\nconst INVALID_TOKEN_RETRIES = 2;\n\ninterface UsedOnHostMessage {\n\thostName: string;\n\ttimeStamp: number;\n}\n\ntype ExistingSessionItem = {\n\tsession: AuthenticationSession;\n\tproviderId: string;\n\tlabel: string;\n\tdescription: string;\n};\ntype IAuthenticationProvider = { id: string; scopes: string[] };\ntype AuthenticationProviderOption = IQuickPickItem & {\n\tprovider: IAuthenticationProvider;\n};\n\nenum RemoteTunnelCommandIds {\n\tturnOn = \"workbench.remoteTunnel.actions.turnOn\",\n\tturnOff = \"workbench.remoteTunnel.actions.turnOff\",\n\tconnecting = \"workbench.remoteTunnel.actions.connecting\",\n\tmanage = \"workbench.remoteTunnel.actions.manage\",\n\tshowLog = \"workbench.remoteTunnel.actions.showLog\",\n\tconfigure = \"workbench.remoteTunnel.actions.configure\",\n\tcopyToClipboard = \"workbench.remoteTunnel.actions.copyToClipboard\",\n\tlearnMore = \"workbench.remoteTunnel.actions.learnMore\",\n}\n\n// name shown in nofications\nnamespace RemoteTunnelCommandLabels {\n\texport const turnOn = localize(\n\t\t\"remoteTunnel.actions.turnOn\",\n\t\t\"Turn on Remote Tunnel Access...\",\n\t);\n\texport const turnOff = localize(\n\t\t\"remoteTunnel.actions.turnOff\",\n\t\t\"Turn off Remote Tunnel Access...\",\n\t);\n\texport const showLog = localize(\n\t\t\"remoteTunnel.actions.showLog\",\n\t\t\"Show Remote Tunnel Service Log\",\n\t);\n\texport const configure = localize(\n\t\t\"remoteTunnel.actions.configure\",\n\t\t\"Configure Tunnel Name...\",\n\t);\n\texport const copyToClipboard = localize(\n\t\t\"remoteTunnel.actions.copyToClipboard\",\n\t\t\"Copy Browser URI to Clipboard\",\n\t);\n\texport const learnMore = localize(\n\t\t\"remoteTunnel.actions.learnMore\",\n\t\t\"Get Started with Tunnels\",\n\t);\n}\n\nexport class RemoteTunnelWorkbenchContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate readonly connectionStateContext: IContextKey<CONTEXT_KEY_STATES>;\n\n\tprivate readonly serverConfiguration: ITunnelApplicationConfig;\n\n\tprivate connectionInfo: ConnectionInfo | undefined;\n\n\tprivate readonly logger: ILogger;\n\n\tprivate expiredSessions: Set<string> = new Set();\n\n\tconstructor(\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IProductService productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@INativeEnvironmentService private environmentService: INativeEnvironmentService,\n\t\t@IRemoteTunnelService private remoteTunnelService: IRemoteTunnelService,\n\t\t@ICommandService private commandService: ICommandService,\n\t\t@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,\n\t\t@IProgressService private progressService: IProgressService,\n\t\t@INotificationService private notificationService: INotificationService\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = this._register(loggerService.createLogger(joinPath(environmentService.logsHome, `${LOG_ID}.log`), { id: LOG_ID, name: LOGGER_NAME }));\n\n\t\tthis.connectionStateContext = REMOTE_TUNNEL_CONNECTION_STATE.bindTo(this.contextKeyService);\n\n\t\tconst serverConfiguration = productService.tunnelApplicationConfig;\n\t\tif (!serverConfiguration || !productService.tunnelApplicationName) {\n\t\t\tthis.logger.error('Missing \\'tunnelApplicationConfig\\' or \\'tunnelApplicationName\\' in product.json. Remote tunneling is not available.');\n\t\t\tthis.serverConfiguration = { authenticationProviders: {}, editorWebUrl: '', extension: { extensionId: '', friendlyName: '' } };\n\t\t\treturn;\n\t\t}\n\t\tthis.serverConfiguration = serverConfiguration;\n\n\t\tthis._register(this.remoteTunnelService.onDidChangeTunnelStatus(s => this.handleTunnelStatusUpdate(s)));\n\n\t\tthis.registerCommands();\n\n\t\tthis.initialize();\n\n\t\tthis.recommendRemoteExtensionIfNeeded();\n\t}\n\n\tprivate handleTunnelStatusUpdate(status: TunnelStatus) {\n\t\tthis.connectionInfo = undefined;\n\t\tif (status.type === \"disconnected\") {\n\t\t\tif (status.onTokenFailed) {\n\t\t\t\tthis.expiredSessions.add(status.onTokenFailed.sessionId);\n\t\t\t}\n\t\t\tthis.connectionStateContext.set(\"disconnected\");\n\t\t} else if (status.type === \"connecting\") {\n\t\t\tthis.connectionStateContext.set(\"connecting\");\n\t\t} else if (status.type === \"connected\") {\n\t\t\tthis.connectionInfo = status.info;\n\t\t\tthis.connectionStateContext.set(\"connected\");\n\t\t}\n\t}\n\n\tprivate async recommendRemoteExtensionIfNeeded() {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tconst remoteExtension = this.serverConfiguration.extension;\n\t\tconst shouldRecommend = async () => {\n\t\t\tif (\n\t\t\t\tthis.storageService.getBoolean(\n\t\t\t\t\tREMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY,\n\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tawait this.extensionService.getExtension(\n\t\t\t\t\tremoteExtension.extensionId,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst usedOnHostMessage = this.storageService.get(\n\t\t\t\tREMOTE_TUNNEL_USED_STORAGE_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t\tif (!usedOnHostMessage) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet usedTunnelName: string | undefined;\n\t\t\ttry {\n\t\t\t\tconst message = JSON.parse(usedOnHostMessage);\n\t\t\t\tif (!isObject(message)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst { hostName, timeStamp } = message as UsedOnHostMessage;\n\t\t\t\tif (\n\t\t\t\t\t!isString(hostName)! ||\n\t\t\t\t\t!isNumber(timeStamp) ||\n\t\t\t\t\tnew Date().getTime() >\n\t\t\t\t\t\ttimeStamp + REMOTE_TUNNEL_EXTENSION_TIMEOUT\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tusedTunnelName = hostName;\n\t\t\t} catch (_) {\n\t\t\t\t// problems parsing the message, likly the old message format\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst currentTunnelName =\n\t\t\t\tawait this.remoteTunnelService.getTunnelName();\n\t\t\tif (!currentTunnelName || currentTunnelName === usedTunnelName) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn usedTunnelName;\n\t\t};\n\t\tconst recommed = async () => {\n\t\t\tconst usedOnHost = await shouldRecommend();\n\t\t\tif (!usedOnHost) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"recommend.remoteExtension\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} will be a tunnel name, {1} will the link address to the web UI, {6} an extension name. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Tunnel '{0}' is avaiable for remote access. The {1} extension can be used to connect to it.\",\n\t\t\t\t\tusedOnHost,\n\t\t\t\t\tremoteExtension.friendlyName,\n\t\t\t\t),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [\n\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\"showExtension\",\n\t\t\t\t\t\t\tlocalize(\"action.showExtension\", \"Show Extension\"),\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\treturn this.commandService.executeCommand(\n\t\t\t\t\t\t\t\t\t\"workbench.extensions.action.showExtensionsWithIds\",\n\t\t\t\t\t\t\t\t\t[remoteExtension.extensionId],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\"doNotShowAgain\",\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"action.doNotShowAgain\",\n\t\t\t\t\t\t\t\t\"Do not show again\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY,\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t};\n\t\tif (await shouldRecommend()) {\n\t\t\tconst disposables = this._register(new DisposableStore());\n\t\t\tdisposables.add(\n\t\t\t\tthis.storageService.onDidChangeValue(\n\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\tREMOTE_TUNNEL_USED_STORAGE_KEY,\n\t\t\t\t\tdisposables,\n\t\t\t\t)(async () => {\n\t\t\t\t\tconst success = await recommed();\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tconst [mode, status] = await Promise.all([\n\t\t\tthis.remoteTunnelService.getMode(),\n\t\t\tthis.remoteTunnelService.getTunnelStatus(),\n\t\t]);\n\n\t\tthis.handleTunnelStatusUpdate(status);\n\n\t\tif (mode.active && mode.session.token) {\n\t\t\treturn; // already initialized, token available\n\t\t}\n\n\t\tconst doInitialStateDiscovery = async (\n\t\t\tprogress?: IProgress<IProgressStep>,\n\t\t) => {\n\t\t\tconst listener =\n\t\t\t\tprogress &&\n\t\t\t\tthis.remoteTunnelService.onDidChangeTunnelStatus((status) => {\n\t\t\t\t\tswitch (status.type) {\n\t\t\t\t\t\tcase \"connecting\":\n\t\t\t\t\t\t\tif (status.progress) {\n\t\t\t\t\t\t\t\tprogress.report({ message: status.progress });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tlet newSession: IRemoteTunnelSession | undefined;\n\t\t\tif (mode.active) {\n\t\t\t\tconst token = await this.getSessionToken(mode.session);\n\t\t\t\tif (token) {\n\t\t\t\t\tnewSession = { ...mode.session, token };\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst status = await this.remoteTunnelService.initialize(\n\t\t\t\tmode.active && newSession\n\t\t\t\t\t? { ...mode, session: newSession }\n\t\t\t\t\t: INACTIVE_TUNNEL_MODE,\n\t\t\t);\n\t\t\tlistener?.dispose();\n\n\t\t\tif (status.type === \"connected\") {\n\t\t\t\tthis.connectionInfo = status.info;\n\t\t\t\tthis.connectionStateContext.set(\"connected\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\tconst hasUsed = this.storageService.getBoolean(\n\t\t\tREMOTE_TUNNEL_HAS_USED_BEFORE,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tfalse,\n\t\t);\n\n\t\tif (hasUsed) {\n\t\t\tawait this.progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"initialize.progress.title\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"Only translate 'Looking for remote tunnel', do not change the format of the rest (markdown link format)\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"[Looking for remote tunnel](command:{0})\",\n\t\t\t\t\t\tRemoteTunnelCommandIds.showLog,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tdoInitialStateDiscovery,\n\t\t\t);\n\t\t} else {\n\t\t\tdoInitialStateDiscovery(undefined);\n\t\t}\n\t}\n\n\tprivate getPreferredTokenFromSession(session: ExistingSessionItem) {\n\t\treturn session.session.accessToken || session.session.idToken;\n\t}\n\n\tprivate async startTunnel(\n\t\tasService: boolean,\n\t): Promise<ConnectionInfo | undefined> {\n\t\tif (this.connectionInfo) {\n\t\t\treturn this.connectionInfo;\n\t\t}\n\n\t\tthis.storageService.store(\n\t\t\tREMOTE_TUNNEL_HAS_USED_BEFORE,\n\t\t\ttrue,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\n\t\tlet tokenProblems = false;\n\t\tfor (let i = 0; i < INVALID_TOKEN_RETRIES; i++) {\n\t\t\ttokenProblems = false;\n\n\t\t\tconst authenticationSession = await this.getAuthenticationSession();\n\t\t\tif (authenticationSession === undefined) {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\t\"No authentication session available, not starting tunnel\",\n\t\t\t\t);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = await this.progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"startTunnel.progress.title\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"Only translate 'Starting remote tunnel', do not change the format of the rest (markdown link format)\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"[Starting remote tunnel](command:{0})\",\n\t\t\t\t\t\tRemoteTunnelCommandIds.showLog,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t(progress: IProgress<IProgressStep>) => {\n\t\t\t\t\treturn new Promise<ConnectionInfo | undefined>((s, e) => {\n\t\t\t\t\t\tlet completed = false;\n\t\t\t\t\t\tconst listener =\n\t\t\t\t\t\t\tthis.remoteTunnelService.onDidChangeTunnelStatus(\n\t\t\t\t\t\t\t\t(status) => {\n\t\t\t\t\t\t\t\t\tswitch (status.type) {\n\t\t\t\t\t\t\t\t\t\tcase \"connecting\":\n\t\t\t\t\t\t\t\t\t\t\tif (status.progress) {\n\t\t\t\t\t\t\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: status.progress,\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"connected\":\n\t\t\t\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t\t\t\ts(status.info);\n\t\t\t\t\t\t\t\t\t\t\tif (status.serviceInstallFailed) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.notificationService.notify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tseverity:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey: \"remoteTunnel.serviceInstallFailed\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'{Locked=\"](command:{0})\"}',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Installation as a service failed, and we fell back to running the tunnel for this session. See the [error log](command:{0}) for details.\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRemoteTunnelCommandIds.showLog,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"disconnected\":\n\t\t\t\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t\t\t\ttokenProblems =\n\t\t\t\t\t\t\t\t\t\t\t\t!!status.onTokenFailed;\n\t\t\t\t\t\t\t\t\t\t\ts(undefined);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst token = this.getPreferredTokenFromSession(\n\t\t\t\t\t\t\tauthenticationSession,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst account: IRemoteTunnelSession = {\n\t\t\t\t\t\t\tsessionId: authenticationSession.session.id,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\tproviderId: authenticationSession.providerId,\n\t\t\t\t\t\t\taccountLabel:\n\t\t\t\t\t\t\t\tauthenticationSession.session.account.label,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.remoteTunnelService\n\t\t\t\t\t\t\t.startTunnel({\n\t\t\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\t\t\tasService,\n\t\t\t\t\t\t\t\tsession: account,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then((status) => {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t!completed &&\n\t\t\t\t\t\t\t\t\t(status.type === \"connected\" ||\n\t\t\t\t\t\t\t\t\t\tstatus.type === \"disconnected\")\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\t\tif (status.type === \"connected\") {\n\t\t\t\t\t\t\t\t\t\ts(status.info);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ttokenProblems = !!status.onTokenFailed;\n\t\t\t\t\t\t\t\t\t\ts(undefined);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (result || !tokenProblems) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async getAuthenticationSession(): Promise<\n\t\tExistingSessionItem | undefined\n\t> {\n\t\tconst sessions = await this.getAllSessions();\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickpick = disposables.add(\n\t\t\tthis.quickInputService.createQuickPick<\n\t\t\t\t| ExistingSessionItem\n\t\t\t\t| AuthenticationProviderOption\n\t\t\t\t| IQuickPickItem\n\t\t\t>({ useSeparators: true }),\n\t\t);\n\t\tquickpick.ok = false;\n\t\tquickpick.placeholder = localize(\n\t\t\t\"accountPreference.placeholder\",\n\t\t\t\"Sign in to an account to enable remote access\",\n\t\t);\n\t\tquickpick.ignoreFocusOut = true;\n\t\tquickpick.items = await this.createQuickpickItems(sessions);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdisposables.add(\n\t\t\t\tquickpick.onDidHide((e) => {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposables.add(\n\t\t\t\tquickpick.onDidAccept(async (e) => {\n\t\t\t\t\tconst selection = quickpick.selectedItems[0];\n\t\t\t\t\tif (\"provider\" in selection) {\n\t\t\t\t\t\tconst session =\n\t\t\t\t\t\t\tawait this.authenticationService.createSession(\n\t\t\t\t\t\t\t\tselection.provider.id,\n\t\t\t\t\t\t\t\tselection.provider.scopes,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tthis.createExistingSessionItem(\n\t\t\t\t\t\t\t\tsession,\n\t\t\t\t\t\t\t\tselection.provider.id,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (\"session\" in selection) {\n\t\t\t\t\t\tresolve(selection);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t\tquickpick.hide();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tquickpick.show();\n\t\t});\n\t}\n\n\tprivate createExistingSessionItem(\n\t\tsession: AuthenticationSession,\n\t\tproviderId: string,\n\t): ExistingSessionItem {\n\t\treturn {\n\t\t\tlabel: session.account.label,\n\t\t\tdescription:\n\t\t\t\tthis.authenticationService.getProvider(providerId).label,\n\t\t\tsession,\n\t\t\tproviderId,\n\t\t};\n\t}\n\n\tprivate async createQuickpickItems(\n\t\tsessions: ExistingSessionItem[],\n\t): Promise<\n\t\t(\n\t\t\t| ExistingSessionItem\n\t\t\t| AuthenticationProviderOption\n\t\t\t| IQuickPickSeparator\n\t\t\t| (IQuickPickItem & { canceledAuthentication: boolean })\n\t\t)[]\n\t> {\n\t\tconst options: (\n\t\t\t| ExistingSessionItem\n\t\t\t| AuthenticationProviderOption\n\t\t\t| IQuickPickSeparator\n\t\t\t| (IQuickPickItem & { canceledAuthentication: boolean })\n\t\t)[] = [];\n\n\t\tif (sessions.length) {\n\t\t\toptions.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: localize(\"signed in\", \"Signed In\"),\n\t\t\t});\n\t\t\toptions.push(...sessions);\n\t\t\toptions.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: localize(\"others\", \"Others\"),\n\t\t\t});\n\t\t}\n\n\t\tfor (const authenticationProvider of await this.getAuthenticationProviders()) {\n\t\t\tconst signedInForProvider = sessions.some(\n\t\t\t\t(account) => account.providerId === authenticationProvider.id,\n\t\t\t);\n\t\t\tconst provider = this.authenticationService.getProvider(\n\t\t\t\tauthenticationProvider.id,\n\t\t\t);\n\t\t\tif (!signedInForProvider || provider.supportsMultipleAccounts) {\n\t\t\t\toptions.push({\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"sign in using account\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"{0} will be a auth provider (e.g. Github)\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Sign in with {0}\",\n\t\t\t\t\t\tprovider.label,\n\t\t\t\t\t),\n\t\t\t\t\tprovider: authenticationProvider,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Returns all authentication sessions available from {@link getAuthenticationProviders}.\n\t */\n\tprivate async getAllSessions(): Promise<ExistingSessionItem[]> {\n\t\tconst authenticationProviders = await this.getAuthenticationProviders();\n\t\tconst accounts = new Map<string, ExistingSessionItem>();\n\t\tconst currentAccount = await this.remoteTunnelService.getMode();\n\t\tlet currentSession: ExistingSessionItem | undefined;\n\n\t\tfor (const provider of authenticationProviders) {\n\t\t\tconst sessions = await this.authenticationService.getSessions(\n\t\t\t\tprovider.id,\n\t\t\t\tprovider.scopes,\n\t\t\t);\n\n\t\t\tfor (const session of sessions) {\n\t\t\t\tif (!this.expiredSessions.has(session.id)) {\n\t\t\t\t\tconst item = this.createExistingSessionItem(\n\t\t\t\t\t\tsession,\n\t\t\t\t\t\tprovider.id,\n\t\t\t\t\t);\n\t\t\t\t\taccounts.set(item.session.account.id, item);\n\t\t\t\t\tif (\n\t\t\t\t\t\tcurrentAccount.active &&\n\t\t\t\t\t\tcurrentAccount.session.sessionId === session.id\n\t\t\t\t\t) {\n\t\t\t\t\t\tcurrentSession = item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentSession !== undefined) {\n\t\t\taccounts.set(currentSession.session.account.id, currentSession);\n\t\t}\n\n\t\treturn [...accounts.values()];\n\t}\n\n\tprivate async getSessionToken(\n\t\tsession: IRemoteTunnelSession | undefined,\n\t): Promise<string | undefined> {\n\t\tif (session) {\n\t\t\tconst sessionItem = (await this.getAllSessions()).find(\n\t\t\t\t(s) => s.session.id === session.sessionId,\n\t\t\t);\n\t\t\tif (sessionItem) {\n\t\t\t\treturn this.getPreferredTokenFromSession(sessionItem);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Returns all authentication providers which can be used to authenticate\n\t * to the remote storage service, based on product.json configuration\n\t * and registered authentication providers.\n\t */\n\tprivate async getAuthenticationProviders(): Promise<\n\t\tIAuthenticationProvider[]\n\t> {\n\t\t// Get the list of authentication providers configured in product.json\n\t\tconst authenticationProviders =\n\t\t\tthis.serverConfiguration.authenticationProviders;\n\t\tconst configuredAuthenticationProviders = Object.keys(\n\t\t\tauthenticationProviders,\n\t\t).reduce<IAuthenticationProvider[]>((result, id) => {\n\t\t\tresult.push({ id, scopes: authenticationProviders[id].scopes });\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t// Filter out anything that isn't currently available through the authenticationService\n\t\tconst availableAuthenticationProviders =\n\t\t\tthis.authenticationService.declaredProviders;\n\n\t\treturn configuredAuthenticationProviders.filter(({ id }) =>\n\t\t\tavailableAuthenticationProviders.some(\n\t\t\t\t(provider) => provider.id === id,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate registerCommands() {\n\t\tconst that = this;\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.turnOn,\n\t\t\t\t\t\t\ttitle: RemoteTunnelCommandLabels.turnOn,\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tprecondition: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\"disconnected\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\t\t\t\tgroup: \"2_remoteTunnel\",\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\t\t\"disconnected\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\t\t\tconst notificationService =\n\t\t\t\t\t\t\taccessor.get(INotificationService);\n\t\t\t\t\t\tconst clipboardService =\n\t\t\t\t\t\t\taccessor.get(IClipboardService);\n\t\t\t\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\t\t\tconst quickInputService =\n\t\t\t\t\t\t\taccessor.get(IQuickInputService);\n\t\t\t\t\t\tconst productService = accessor.get(IProductService);\n\n\t\t\t\t\t\tconst didNotifyPreview = storageService.getBoolean(\n\t\t\t\t\t\t\tREMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!didNotifyPreview) {\n\t\t\t\t\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t\"tunnel.preview\",\n\t\t\t\t\t\t\t\t\t'Remote Tunnels is currently in preview. Please report any problems using the \"Help: Report Issue\" command.',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tprimaryButton: localize(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tkey: \"enable\",\n\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"&&Enable\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (!confirmed) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\t\tREMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\t\tconst quickPick = quickInputService.createQuickPick<\n\t\t\t\t\t\t\tIQuickPickItem & { service: boolean }\n\t\t\t\t\t\t>();\n\t\t\t\t\t\tquickPick.placeholder = localize(\n\t\t\t\t\t\t\t\"tunnel.enable.placeholder\",\n\t\t\t\t\t\t\t\"Select how you want to enable access\",\n\t\t\t\t\t\t);\n\t\t\t\t\t\tquickPick.items = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tservice: false,\n\t\t\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\t\t\"tunnel.enable.session\",\n\t\t\t\t\t\t\t\t\t\"Turn on for this session\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\"tunnel.enable.session.description\",\n\t\t\t\t\t\t\t\t\t\"Run whenever {0} is open\",\n\t\t\t\t\t\t\t\t\tproductService.nameShort,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tservice: true,\n\t\t\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\t\t\"tunnel.enable.service\",\n\t\t\t\t\t\t\t\t\t\"Install as a service\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\"tunnel.enable.service.description\",\n\t\t\t\t\t\t\t\t\t\"Run whenever you're logged in\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tconst asService = await new Promise<\n\t\t\t\t\t\t\tboolean | undefined\n\t\t\t\t\t\t>((resolve) => {\n\t\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\t\tquickPick.onDidAccept(() =>\n\t\t\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t\t\tquickPick.selectedItems[0]?.service,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\t\tquickPick.onDidHide(() => resolve(undefined)),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tquickPick.show();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tquickPick.dispose();\n\n\t\t\t\t\t\tif (asService === undefined) {\n\t\t\t\t\t\t\treturn; // no-op\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst connectionInfo = await that.startTunnel(\n\t\t\t\t\t\t\t/* installAsService= */ asService,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (connectionInfo) {\n\t\t\t\t\t\t\tconst linkToOpen =\n\t\t\t\t\t\t\t\tthat.getLinkToOpen(connectionInfo);\n\t\t\t\t\t\t\tconst remoteExtension =\n\t\t\t\t\t\t\t\tthat.serverConfiguration.extension;\n\t\t\t\t\t\t\tconst linkToOpenForMarkdown = linkToOpen\n\t\t\t\t\t\t\t\t.toString(false)\n\t\t\t\t\t\t\t\t.replace(/\\)/g, \"%29\");\n\t\t\t\t\t\t\tnotificationService.notify({\n\t\t\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tkey: \"progress.turnOn.final\",\n\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\"{0} will be the tunnel name, {1} will the link address to the web UI, {6} an extension name, {7} a link to the extension documentation. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format\",\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"You can now access this machine anywhere via the secure tunnel [{0}](command:{4}). To connect via a different machine, use the generated [{1}]({2}) link or use the [{6}]({7}) extension in the desktop or web. You can [configure](command:{3}) or [turn off](command:{5}) this access via the VS Code Accounts menu.\",\n\t\t\t\t\t\t\t\t\tconnectionInfo.tunnelName,\n\t\t\t\t\t\t\t\t\tconnectionInfo.domain,\n\t\t\t\t\t\t\t\t\tlinkToOpenForMarkdown,\n\t\t\t\t\t\t\t\t\tRemoteTunnelCommandIds.manage,\n\t\t\t\t\t\t\t\t\tRemoteTunnelCommandIds.configure,\n\t\t\t\t\t\t\t\t\tRemoteTunnelCommandIds.turnOff,\n\t\t\t\t\t\t\t\t\tremoteExtension.friendlyName,\n\t\t\t\t\t\t\t\t\t\"https://code.visualstudio.com/docs/remote/tunnels\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\t\t\t\t\"copyToClipboard\",\n\t\t\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"action.copyToClipboard\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Copy Browser Link to Clipboard\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\t\t\tclipboardService.writeText(\n\t\t\t\t\t\t\t\t\t\t\t\t\tlinkToOpen.toString(true),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\t\t\t\t\"showExtension\",\n\t\t\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"action.showExtension\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Show Extension\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn commandService.executeCommand(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"workbench.extensions.action.showExtensionsWithIds\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteExtension.extensionId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst usedOnHostMessage: UsedOnHostMessage = {\n\t\t\t\t\t\t\t\thostName: connectionInfo.tunnelName,\n\t\t\t\t\t\t\t\ttimeStamp: new Date().getTime(),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\t\tREMOTE_TUNNEL_USED_STORAGE_KEY,\n\t\t\t\t\t\t\t\tJSON.stringify(usedOnHostMessage),\n\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnotificationService.notify({\n\t\t\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t\"progress.turnOn.failed\",\n\t\t\t\t\t\t\t\t\t\"Unable to turn on the remote tunnel access. Check the Remote Tunnel Service log for details.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait commandService.executeCommand(\n\t\t\t\t\t\t\t\tRemoteTunnelCommandIds.showLog,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.manage,\n\t\t\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\t\t\"remoteTunnel.actions.manage.on.v2\",\n\t\t\t\t\t\t\t\t\"Remote Tunnel Access is On\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\t\t\t\tgroup: \"2_remoteTunnel\",\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\t\t\"connected\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run() {\n\t\t\t\t\t\tthat.showManageOptions();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.connecting,\n\t\t\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\t\t\"remoteTunnel.actions.manage.connecting\",\n\t\t\t\t\t\t\t\t\"Remote Tunnel Access is Connecting\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\t\t\t\tgroup: \"2_remoteTunnel\",\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\t\t\"connecting\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run() {\n\t\t\t\t\t\tthat.showManageOptions();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.turnOff,\n\t\t\t\t\t\t\ttitle: RemoteTunnelCommandLabels.turnOff,\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tprecondition: ContextKeyExpr.notEquals(\n\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\"disconnected\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(\n\t\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run() {\n\t\t\t\t\t\tconst message = that.connectionInfo?.isAttached\n\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\"remoteTunnel.turnOffAttached.confirm\",\n\t\t\t\t\t\t\t\t\t\"Do you want to turn off Remote Tunnel Access? This will also stop the service that was started externally.\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\"remoteTunnel.turnOff.confirm\",\n\t\t\t\t\t\t\t\t\t\"Do you want to turn off Remote Tunnel Access?\",\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst { confirmed } = await that.dialogService.confirm({\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\t\tthat.remoteTunnelService.stopTunnel();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.showLog,\n\t\t\t\t\t\t\ttitle: RemoteTunnelCommandLabels.showLog,\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(\n\t\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\t\t\tconst outputService = accessor.get(IOutputService);\n\t\t\t\t\t\toutputService.showChannel(LOG_ID);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.configure,\n\t\t\t\t\t\t\ttitle: RemoteTunnelCommandLabels.configure,\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(\n\t\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\t\t\tconst preferencesService =\n\t\t\t\t\t\t\taccessor.get(IPreferencesService);\n\t\t\t\t\t\tpreferencesService.openSettings({\n\t\t\t\t\t\t\tquery: CONFIGURATION_KEY_PREFIX,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.copyToClipboard,\n\t\t\t\t\t\t\ttitle: RemoteTunnelCommandLabels.copyToClipboard,\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tprecondition: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\"connected\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\tREMOTE_TUNNEL_CONNECTION_STATE_KEY,\n\t\t\t\t\t\t\t\t\t\t\"connected\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\t\t\tconst clipboardService =\n\t\t\t\t\t\t\taccessor.get(IClipboardService);\n\t\t\t\t\t\tif (that.connectionInfo) {\n\t\t\t\t\t\t\tconst linkToOpen = that.getLinkToOpen(\n\t\t\t\t\t\t\t\tthat.connectionInfo,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tclipboardService.writeText(\n\t\t\t\t\t\t\t\tlinkToOpen.toString(true),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: RemoteTunnelCommandIds.learnMore,\n\t\t\t\t\t\t\ttitle: RemoteTunnelCommandLabels.learnMore,\n\t\t\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\t\t\tmenu: [],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\t\t\tawait openerService.open(\n\t\t\t\t\t\t\t\"https://aka.ms/vscode-server-doc\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate getLinkToOpen(connectionInfo: ConnectionInfo): URI {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst folders = workspace.folders;\n\t\tlet resource;\n\t\tif (folders.length === 1) {\n\t\t\tresource = folders[0].uri;\n\t\t} else if (\n\t\t\tworkspace.configuration &&\n\t\t\t!isUntitledWorkspace(\n\t\t\t\tworkspace.configuration,\n\t\t\t\tthis.environmentService,\n\t\t\t)\n\t\t) {\n\t\t\tresource = workspace.configuration;\n\t\t}\n\t\tconst link = URI.parse(connectionInfo.link);\n\t\tif (resource?.scheme === Schemas.file) {\n\t\t\treturn joinPath(link, resource.path);\n\t\t}\n\t\treturn joinPath(link, this.environmentService.userHome.path);\n\t}\n\n\tprivate async showManageOptions() {\n\t\tconst account = await this.remoteTunnelService.getMode();\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst quickPick = this.quickInputService.createQuickPick({\n\t\t\t\tuseSeparators: true,\n\t\t\t});\n\t\t\tquickPick.placeholder = localize(\n\t\t\t\t\"manage.placeholder\",\n\t\t\t\t\"Select a command to invoke\",\n\t\t\t);\n\t\t\tdisposables.add(quickPick);\n\t\t\tconst items: Array<QuickPickItem> = [];\n\t\t\titems.push({\n\t\t\t\tid: RemoteTunnelCommandIds.learnMore,\n\t\t\t\tlabel: RemoteTunnelCommandLabels.learnMore,\n\t\t\t});\n\t\t\tif (this.connectionInfo) {\n\t\t\t\tquickPick.title = this.connectionInfo.isAttached\n\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"manage.title.attached\",\n\t\t\t\t\t\t\t\tcomment: [\"{0} is the tunnel name\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Remote Tunnel Access enabled for {0} (launched externally)\",\n\t\t\t\t\t\t\tthis.connectionInfo.tunnelName,\n\t\t\t\t\t\t)\n\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"manage.title.orunning\",\n\t\t\t\t\t\t\t\tcomment: [\"{0} is the tunnel name\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Remote Tunnel Access enabled for {0}\",\n\t\t\t\t\t\t\tthis.connectionInfo.tunnelName,\n\t\t\t\t\t\t);\n\n\t\t\t\titems.push({\n\t\t\t\t\tid: RemoteTunnelCommandIds.copyToClipboard,\n\t\t\t\t\tlabel: RemoteTunnelCommandLabels.copyToClipboard,\n\t\t\t\t\tdescription: this.connectionInfo.domain,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tquickPick.title = localize(\n\t\t\t\t\t\"manage.title.off\",\n\t\t\t\t\t\"Remote Tunnel Access not enabled\",\n\t\t\t\t);\n\t\t\t}\n\t\t\titems.push({\n\t\t\t\tid: RemoteTunnelCommandIds.showLog,\n\t\t\t\tlabel: localize(\"manage.showLog\", \"Show Log\"),\n\t\t\t});\n\t\t\titems.push({ type: \"separator\" });\n\t\t\titems.push({\n\t\t\t\tid: RemoteTunnelCommandIds.configure,\n\t\t\t\tlabel: localize(\"manage.tunnelName\", \"Change Tunnel Name\"),\n\t\t\t\tdescription: this.connectionInfo?.tunnelName,\n\t\t\t});\n\t\t\titems.push({\n\t\t\t\tid: RemoteTunnelCommandIds.turnOff,\n\t\t\t\tlabel: RemoteTunnelCommandLabels.turnOff,\n\t\t\t\tdescription: account.active\n\t\t\t\t\t? `${account.session.accountLabel} (${account.session.providerId})`\n\t\t\t\t\t: undefined,\n\t\t\t});\n\n\t\t\tquickPick.items = items;\n\t\t\tdisposables.add(\n\t\t\t\tquickPick.onDidAccept(() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tquickPick.selectedItems[0] &&\n\t\t\t\t\t\tquickPick.selectedItems[0].id\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\tquickPick.selectedItems[0].id,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tquickPick.hide();\n\t\t\t\t}),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tquickPick.onDidHide(() => {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\tc();\n\t\t\t\t}),\n\t\t\t);\n\t\t\tquickPick.show();\n\t\t});\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n);\nworkbenchRegistry.registerWorkbenchContribution(\n\tRemoteTunnelWorkbenchContribution,\n\tLifecyclePhase.Restored,\n);\n\nRegistry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n).registerConfiguration({\n\ttype: \"object\",\n\tproperties: {\n\t\t[CONFIGURATION_KEY_HOST_NAME]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"remoteTunnelAccess.machineName\",\n\t\t\t\t\"The name under which the remote tunnel access is registered. If not set, the host name is used.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\tignoreSync: true,\n\t\t\tpattern: \"^(\\\\w[\\\\w-]*)?$\",\n\t\t\tpatternErrorMessage: localize(\n\t\t\t\t\"remoteTunnelAccess.machineNameRegex\",\n\t\t\t\t\"The name must only consist of letters, numbers, underscore and dash. It must not start with a dash.\",\n\t\t\t),\n\t\t\tmaxLength: 20,\n\t\t\tdefault: \"\",\n\t\t},\n\t\t[CONFIGURATION_KEY_PREVENT_SLEEP]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"remoteTunnelAccess.preventSleep\",\n\t\t\t\t\"Prevent this computer from sleeping when remote tunnel access is turned on.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\tdefault: false,\n\t\t},\n\t},\n});\n"],
  "mappings": "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",
  "names": ["RemoteTunnelCommandIds", "RemoteTunnelCommandLabels", "status"]
}
