{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/common/commentContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\n\nexport namespace CommentContextKeys {\n\t/**\n\t * A context key that is set when the active cursor is in a commenting range.\n\t */\n\texport const activeCursorHasCommentingRange = new RawContextKey<boolean>(\n\t\t\"activeCursorHasCommentingRange\",\n\t\tfalse,\n\t\t{\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"hasCommentingRange\",\n\t\t\t\t\"Whether the position at the active cursor has a commenting range\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t},\n\t);\n\n\t/**\n\t * A context key that is set when the active editor has commenting ranges.\n\t */\n\texport const activeEditorHasCommentingRange = new RawContextKey<boolean>(\n\t\t\"activeEditorHasCommentingRange\",\n\t\tfalse,\n\t\t{\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"editorHasCommentingRange\",\n\t\t\t\t\"Whether the active editor has a commenting range\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t},\n\t);\n\n\t/**\n\t * A context key that is set when the workspace has either comments or commenting ranges.\n\t */\n\texport const WorkspaceHasCommenting = new RawContextKey<boolean>(\n\t\t\"workspaceHasCommenting\",\n\t\tfalse,\n\t\t{\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"hasCommentingProvider\",\n\t\t\t\t\"Whether the open workspace has either comments or commenting ranges.\",\n\t\t\t),\n\t\t\ttype: \"boolean\",\n\t\t},\n\t);\n\n\t/**\n\t * A context key that is set when the comment thread has no comments.\n\t */\n\texport const commentThreadIsEmpty = new RawContextKey<boolean>(\n\t\t\"commentThreadIsEmpty\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"commentThreadIsEmpty\",\n\t\t\t\t\"Set when the comment thread has no comments\",\n\t\t\t),\n\t\t},\n\t);\n\t/**\n\t * A context key that is set when the comment has no input.\n\t */\n\texport const commentIsEmpty = new RawContextKey<boolean>(\n\t\t\"commentIsEmpty\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"commentIsEmpty\",\n\t\t\t\t\"Set when the comment has no input\",\n\t\t\t),\n\t\t},\n\t);\n\t/**\n\t * The context value of the comment.\n\t */\n\texport const commentContext = new RawContextKey<string>(\n\t\t\"comment\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"comment\",\n\t\t\t\t\"The context value of the comment\",\n\t\t\t),\n\t\t},\n\t);\n\t/**\n\t * The context value of the comment thread.\n\t */\n\texport const commentThreadContext = new RawContextKey<string>(\n\t\t\"commentThread\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"commentThread\",\n\t\t\t\t\"The context value of the comment thread\",\n\t\t\t),\n\t\t},\n\t);\n\t/**\n\t * The comment controller id associated with a comment thread.\n\t */\n\texport const commentControllerContext = new RawContextKey<string>(\n\t\t\"commentController\",\n\t\tundefined,\n\t\t{\n\t\t\ttype: \"string\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"commentController\",\n\t\t\t\t\"The comment controller id associated with a comment thread\",\n\t\t\t),\n\t\t},\n\t);\n\n\t/**\n\t * The comment widget is focused.\n\t */\n\texport const commentFocused = new RawContextKey<boolean>(\n\t\t\"commentFocused\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"commentFocused\",\n\t\t\t\t\"Set when the comment is focused\",\n\t\t\t),\n\t\t},\n\t);\n}\n"],
  "mappings": "AAKA,YAAY,SAAS;AACrB,SAAS,qBAAqB;AAEvB,IAAU;AAAA,CAAV,CAAUA,wBAAV;AAIC,EAAMA,oBAAA,iCAAiC,IAAI;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,MACC,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,MACA,MAAM;AAAA,IACP;AAAA,EACD;AAKO,EAAMA,oBAAA,iCAAiC,IAAI;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,MACC,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,MACA,MAAM;AAAA,IACP;AAAA,EACD;AAKO,EAAMA,oBAAA,yBAAyB,IAAI;AAAA,IACzC;AAAA,IACA;AAAA,IACA;AAAA,MACC,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,MACA,MAAM;AAAA,IACP;AAAA,EACD;AAKO,EAAMA,oBAAA,uBAAuB,IAAI;AAAA,IACvC;AAAA,IACA;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAIO,EAAMA,oBAAA,iBAAiB,IAAI;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAIO,EAAMA,oBAAA,iBAAiB,IAAI;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAIO,EAAMA,oBAAA,uBAAuB,IAAI;AAAA,IACvC;AAAA,IACA;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAIO,EAAMA,oBAAA,2BAA2B,IAAI;AAAA,IAC3C;AAAA,IACA;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAKO,EAAMA,oBAAA,iBAAiB,IAAI;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,aAAa,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,GAlIgB;",
  "names": ["CommentContextKeys"]
}
