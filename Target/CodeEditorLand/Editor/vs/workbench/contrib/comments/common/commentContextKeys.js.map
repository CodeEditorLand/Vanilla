{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/common/commentContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\n\n\nexport namespace CommentContextKeys {\n\n\t/**\n\t * A context key that is set when the active cursor is in a commenting range.\n\t */\n\texport const activeCursorHasCommentingRange = new RawContextKey<boolean>('activeCursorHasCommentingRange', false, {\n\t\tdescription: nls.localize('hasCommentingRange', \"Whether the position at the active cursor has a commenting range\"),\n\t\ttype: 'boolean'\n\t});\n\n\t/**\n\t * A context key that is set when the active editor has commenting ranges.\n\t */\n\texport const activeEditorHasCommentingRange = new RawContextKey<boolean>('activeEditorHasCommentingRange', false, {\n\t\tdescription: nls.localize('editorHasCommentingRange', \"Whether the active editor has a commenting range\"),\n\t\ttype: 'boolean'\n\t});\n\n\t/**\n\t * A context key that is set when the workspace has either comments or commenting ranges.\n\t */\n\texport const WorkspaceHasCommenting = new RawContextKey<boolean>('workspaceHasCommenting', false, {\n\t\tdescription: nls.localize('hasCommentingProvider', \"Whether the open workspace has either comments or commenting ranges.\"),\n\t\ttype: 'boolean'\n\t});\n\n\t/**\n\t * A context key that is set when the comment thread has no comments.\n\t */\n\texport const commentThreadIsEmpty = new RawContextKey<boolean>('commentThreadIsEmpty', false, { type: 'boolean', description: nls.localize('commentThreadIsEmpty', \"Set when the comment thread has no comments\") });\n\t/**\n\t * A context key that is set when the comment has no input.\n\t */\n\texport const commentIsEmpty = new RawContextKey<boolean>('commentIsEmpty', false, { type: 'boolean', description: nls.localize('commentIsEmpty', \"Set when the comment has no input\") });\n\t/**\n\t * The context value of the comment.\n\t */\n\texport const commentContext = new RawContextKey<string>('comment', undefined, { type: 'string', description: nls.localize('comment', \"The context value of the comment\") });\n\t/**\n\t * The context value of the comment thread.\n\t */\n\texport const commentThreadContext = new RawContextKey<string>('commentThread', undefined, { type: 'string', description: nls.localize('commentThread', \"The context value of the comment thread\") });\n\t/**\n\t * The comment controller id associated with a comment thread.\n\t */\n\texport const commentControllerContext = new RawContextKey<string>('commentController', undefined, { type: 'string', description: nls.localize('commentController', \"The comment controller id associated with a comment thread\") });\n\n\t/**\n\t * The comment widget is focused.\n\t */\n\texport const commentFocused = new RawContextKey<boolean>('commentFocused', false, { type: 'boolean', description: nls.localize('commentFocused', \"Set when the comment is focused\") });\n}\n"],
  "mappings": "AAKA,YAAY,SAAS;AACrB,SAAS,qBAAqB;AAGvB,IAAU;AAAA,CAAV,CAAUA,wBAAV;AAKC,EAAMA,oBAAA,iCAAiC,IAAI,cAAuB,kCAAkC,OAAO;AAAA,IACjH,aAAa,IAAI,SAAS,sBAAsB,kEAAkE;AAAA,IAClH,MAAM;AAAA,EACP,CAAC;AAKM,EAAMA,oBAAA,iCAAiC,IAAI,cAAuB,kCAAkC,OAAO;AAAA,IACjH,aAAa,IAAI,SAAS,4BAA4B,kDAAkD;AAAA,IACxG,MAAM;AAAA,EACP,CAAC;AAKM,EAAMA,oBAAA,yBAAyB,IAAI,cAAuB,0BAA0B,OAAO;AAAA,IACjG,aAAa,IAAI,SAAS,yBAAyB,sEAAsE;AAAA,IACzH,MAAM;AAAA,EACP,CAAC;AAKM,EAAMA,oBAAA,uBAAuB,IAAI,cAAuB,wBAAwB,OAAO,EAAE,MAAM,WAAW,aAAa,IAAI,SAAS,wBAAwB,6CAA6C,EAAE,CAAC;AAI5M,EAAMA,oBAAA,iBAAiB,IAAI,cAAuB,kBAAkB,OAAO,EAAE,MAAM,WAAW,aAAa,IAAI,SAAS,kBAAkB,mCAAmC,EAAE,CAAC;AAIhL,EAAMA,oBAAA,iBAAiB,IAAI,cAAsB,WAAW,QAAW,EAAE,MAAM,UAAU,aAAa,IAAI,SAAS,WAAW,kCAAkC,EAAE,CAAC;AAInK,EAAMA,oBAAA,uBAAuB,IAAI,cAAsB,iBAAiB,QAAW,EAAE,MAAM,UAAU,aAAa,IAAI,SAAS,iBAAiB,yCAAyC,EAAE,CAAC;AAI5L,EAAMA,oBAAA,2BAA2B,IAAI,cAAsB,qBAAqB,QAAW,EAAE,MAAM,UAAU,aAAa,IAAI,SAAS,qBAAqB,4DAA4D,EAAE,CAAC;AAK3N,EAAMA,oBAAA,iBAAiB,IAAI,cAAuB,kBAAkB,OAAO,EAAE,MAAM,WAAW,aAAa,IAAI,SAAS,kBAAkB,iCAAiC,EAAE,CAAC;AAAA,GAlDrK;",
  "names": ["CommentContextKeys"]
}
