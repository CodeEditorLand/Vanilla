{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/common/commentModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { Comment, CommentThread, CommentThreadChangedEvent, CommentThreadApplicability, CommentThreadState } from '../../../../editor/common/languages.js';\n\nexport interface ICommentThreadChangedEvent extends CommentThreadChangedEvent<IRange> {\n\tuniqueOwner: string;\n\towner: string;\n\townerLabel: string;\n}\n\nexport class CommentNode {\n\tisRoot: boolean = false;\n\treplies: CommentNode[] = [];\n\tpublic readonly threadId: string;\n\tpublic readonly range: IRange | undefined;\n\tpublic readonly threadState: CommentThreadState | undefined;\n\tpublic readonly threadRelevance: CommentThreadApplicability | undefined;\n\tpublic readonly contextValue: string | undefined;\n\tpublic readonly controllerHandle: number;\n\tpublic readonly threadHandle: number;\n\n\tconstructor(\n\t\tpublic readonly uniqueOwner: string,\n\t\tpublic readonly owner: string,\n\t\tpublic readonly resource: URI,\n\t\tpublic readonly comment: Comment,\n\t\tpublic readonly thread: CommentThread) {\n\t\tthis.threadId = thread.threadId;\n\t\tthis.range = thread.range;\n\t\tthis.threadState = thread.state;\n\t\tthis.threadRelevance = thread.applicability;\n\t\tthis.contextValue = thread.contextValue;\n\t\tthis.controllerHandle = thread.controllerHandle;\n\t\tthis.threadHandle = thread.commentThreadHandle;\n\t}\n\n\thasReply(): boolean {\n\t\treturn this.replies && this.replies.length !== 0;\n\t}\n\n\tprivate _lastUpdatedAt: string | undefined;\n\n\tget lastUpdatedAt(): string {\n\t\tif (this._lastUpdatedAt === undefined) {\n\t\t\tlet updatedAt = this.comment.timestamp || '';\n\t\t\tif (this.replies.length) {\n\t\t\t\tconst reply = this.replies[this.replies.length - 1];\n\t\t\t\tconst replyUpdatedAt = reply.lastUpdatedAt;\n\t\t\t\tif (replyUpdatedAt > updatedAt) {\n\t\t\t\t\tupdatedAt = replyUpdatedAt;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._lastUpdatedAt = updatedAt;\n\t\t}\n\t\treturn this._lastUpdatedAt;\n\t}\n}\n\nexport class ResourceWithCommentThreads {\n\tid: string;\n\tuniqueOwner: string;\n\towner: string;\n\townerLabel: string | undefined;\n\tcommentThreads: CommentNode[]; // The top level comments on the file. Replys are nested under each node.\n\tresource: URI;\n\n\tconstructor(uniqueOwner: string, owner: string, resource: URI, commentThreads: CommentThread[]) {\n\t\tthis.uniqueOwner = uniqueOwner;\n\t\tthis.owner = owner;\n\t\tthis.id = resource.toString();\n\t\tthis.resource = resource;\n\t\tthis.commentThreads = commentThreads.filter(thread => thread.comments && thread.comments.length).map(thread => ResourceWithCommentThreads.createCommentNode(uniqueOwner, owner, resource, thread));\n\t}\n\n\tpublic static createCommentNode(uniqueOwner: string, owner: string, resource: URI, commentThread: CommentThread): CommentNode {\n\t\tconst { comments } = commentThread;\n\t\tconst commentNodes: CommentNode[] = comments!.map(comment => new CommentNode(uniqueOwner, owner, resource, comment, commentThread));\n\t\tif (commentNodes.length > 1) {\n\t\t\tcommentNodes[0].replies = commentNodes.slice(1, commentNodes.length);\n\t\t}\n\n\t\tcommentNodes[0].isRoot = true;\n\n\t\treturn commentNodes[0];\n\t}\n\n\tprivate _lastUpdatedAt: string | undefined;\n\n\tget lastUpdatedAt() {\n\t\tif (this._lastUpdatedAt === undefined) {\n\t\t\tlet updatedAt = '';\n\t\t\t// Return result without cahcing as we expect data to arrive later\n\t\t\tif (!this.commentThreads.length) {\n\t\t\t\treturn updatedAt;\n\t\t\t}\n\t\t\tfor (const thread of this.commentThreads) {\n\t\t\t\tconst threadUpdatedAt = thread.lastUpdatedAt;\n\t\t\t\tif (threadUpdatedAt && threadUpdatedAt > updatedAt) {\n\t\t\t\t\tupdatedAt = threadUpdatedAt;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._lastUpdatedAt = updatedAt;\n\t\t}\n\t\treturn this._lastUpdatedAt;\n\t}\n}\n\n"],
  "mappings": ";;AAKA,SAAS,WAAW;AACpB,SAAS,cAAc;AACvB,SAAS,SAAS,eAAe,2BAA2B,4BAA4B,0BAA0B;AAQ3G,MAAM,YAAY;AAAA,EAWxB,YACiB,aACA,OACA,UACA,SACA,QAAuB;AAJvB;AACA;AACA;AACA;AACA;AAChB,SAAK,WAAW,OAAO;AACvB,SAAK,QAAQ,OAAO;AACpB,SAAK,cAAc,OAAO;AAC1B,SAAK,kBAAkB,OAAO;AAC9B,SAAK,eAAe,OAAO;AAC3B,SAAK,mBAAmB,OAAO;AAC/B,SAAK,eAAe,OAAO;AAAA,EAC5B;AAAA,EAvCD,OAeyB;AAAA;AAAA;AAAA,EACxB,SAAkB;AAAA,EAClB,UAAyB,CAAC;AAAA,EACV;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAiBhB,WAAoB;AACnB,WAAO,KAAK,WAAW,KAAK,QAAQ,WAAW;AAAA,EAChD;AAAA,EAEQ;AAAA,EAER,IAAI,gBAAwB;AAC3B,QAAI,KAAK,mBAAmB,QAAW;AACtC,UAAI,YAAY,KAAK,QAAQ,aAAa;AAC1C,UAAI,KAAK,QAAQ,QAAQ;AACxB,cAAM,QAAQ,KAAK,QAAQ,KAAK,QAAQ,SAAS,CAAC;AAClD,cAAM,iBAAiB,MAAM;AAC7B,YAAI,iBAAiB,WAAW;AAC/B,sBAAY;AAAA,QACb;AAAA,MACD;AACA,WAAK,iBAAiB;AAAA,IACvB;AACA,WAAO,KAAK;AAAA,EACb;AACD;AAEO,MAAM,2BAA2B;AAAA,EA/DxC,OA+DwC;AAAA;AAAA;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EAEA,YAAY,aAAqB,OAAe,UAAe,gBAAiC;AAC/F,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,SAAK,KAAK,SAAS,SAAS;AAC5B,SAAK,WAAW;AAChB,SAAK,iBAAiB,eAAe,OAAO,YAAU,OAAO,YAAY,OAAO,SAAS,MAAM,EAAE,IAAI,YAAU,2BAA2B,kBAAkB,aAAa,OAAO,UAAU,MAAM,CAAC;AAAA,EAClM;AAAA,EAEA,OAAc,kBAAkB,aAAqB,OAAe,UAAe,eAA2C;AAC7H,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,eAA8B,SAAU,IAAI,aAAW,IAAI,YAAY,aAAa,OAAO,UAAU,SAAS,aAAa,CAAC;AAClI,QAAI,aAAa,SAAS,GAAG;AAC5B,mBAAa,CAAC,EAAE,UAAU,aAAa,MAAM,GAAG,aAAa,MAAM;AAAA,IACpE;AAEA,iBAAa,CAAC,EAAE,SAAS;AAEzB,WAAO,aAAa,CAAC;AAAA,EACtB;AAAA,EAEQ;AAAA,EAER,IAAI,gBAAgB;AACnB,QAAI,KAAK,mBAAmB,QAAW;AACtC,UAAI,YAAY;AAEhB,UAAI,CAAC,KAAK,eAAe,QAAQ;AAChC,eAAO;AAAA,MACR;AACA,iBAAW,UAAU,KAAK,gBAAgB;AACzC,cAAM,kBAAkB,OAAO;AAC/B,YAAI,mBAAmB,kBAAkB,WAAW;AACnD,sBAAY;AAAA,QACb;AAAA,MACD;AACA,WAAK,iBAAiB;AAAA,IACvB;AACA,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": []
}
