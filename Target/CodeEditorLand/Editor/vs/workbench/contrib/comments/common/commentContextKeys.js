import*as o from"../../../../nls.js";import{RawContextKey as n}from"../../../../platform/contextkey/common/contextkey.js";var t;(e=>(e.activeCursorHasCommentingRange=new n("activeCursorHasCommentingRange",!1,{description:o.localize("hasCommentingRange","Whether the position at the active cursor has a commenting range"),type:"boolean"}),e.activeEditorHasCommentingRange=new n("activeEditorHasCommentingRange",!1,{description:o.localize("editorHasCommentingRange","Whether the active editor has a commenting range"),type:"boolean"}),e.WorkspaceHasCommenting=new n("workspaceHasCommenting",!1,{description:o.localize("hasCommentingProvider","Whether the open workspace has either comments or commenting ranges."),type:"boolean"}),e.commentThreadIsEmpty=new n("commentThreadIsEmpty",!1,{type:"boolean",description:o.localize("commentThreadIsEmpty","Set when the comment thread has no comments")}),e.commentIsEmpty=new n("commentIsEmpty",!1,{type:"boolean",description:o.localize("commentIsEmpty","Set when the comment has no input")}),e.commentContext=new n("comment",void 0,{type:"string",description:o.localize("comment","The context value of the comment")}),e.commentThreadContext=new n("commentThread",void 0,{type:"string",description:o.localize("commentThread","The context value of the comment thread")}),e.commentControllerContext=new n("commentController",void 0,{type:"string",description:o.localize("commentController","The comment controller id associated with a comment thread")}),e.commentFocused=new n("commentFocused",!1,{type:"boolean",description:o.localize("commentFocused","Set when the comment is focused")})))(t||={});export{t as CommentContextKeys};
