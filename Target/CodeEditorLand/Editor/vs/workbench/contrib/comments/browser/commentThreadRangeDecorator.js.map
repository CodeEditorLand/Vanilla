{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentThreadRangeDecorator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport type { IRange } from \"../../../../editor/common/core/range.js\";\nimport {\n\ttype CommentThread,\n\tCommentThreadCollapsibleState,\n} from \"../../../../editor/common/languages.js\";\nimport type {\n\tIModelDecorationOptions,\n\tIModelDeltaDecoration,\n} from \"../../../../editor/common/model.js\";\nimport { ModelDecorationOptions } from \"../../../../editor/common/model/textModel.js\";\nimport type { ICommentInfo, ICommentService } from \"./commentService.js\";\n\nclass CommentThreadRangeDecoration implements IModelDeltaDecoration {\n\tprivate _decorationId: string | undefined;\n\n\tpublic get id(): string | undefined {\n\t\treturn this._decorationId;\n\t}\n\n\tpublic set id(id: string | undefined) {\n\t\tthis._decorationId = id;\n\t}\n\n\tconstructor(\n\t\tpublic readonly range: IRange,\n\t\tpublic readonly options: ModelDecorationOptions,\n\t) {}\n}\n\nexport class CommentThreadRangeDecorator extends Disposable {\n\tprivate static description = \"comment-thread-range-decorator\";\n\tprivate decorationOptions: ModelDecorationOptions;\n\tprivate activeDecorationOptions: ModelDecorationOptions;\n\tprivate decorationIds: string[] = [];\n\tprivate activeDecorationIds: string[] = [];\n\tprivate editor: ICodeEditor | undefined;\n\tprivate threadCollapseStateListeners: IDisposable[] = [];\n\tprivate currentThreadCollapseStateListener: IDisposable | undefined;\n\n\tconstructor(commentService: ICommentService) {\n\t\tsuper();\n\t\tconst decorationOptions: IModelDecorationOptions = {\n\t\t\tdescription: CommentThreadRangeDecorator.description,\n\t\t\tisWholeLine: false,\n\t\t\tzIndex: 20,\n\t\t\tclassName: \"comment-thread-range\",\n\t\t\tshouldFillLineOnLineBreak: true,\n\t\t};\n\n\t\tthis.decorationOptions =\n\t\t\tModelDecorationOptions.createDynamic(decorationOptions);\n\n\t\tconst activeDecorationOptions: IModelDecorationOptions = {\n\t\t\tdescription: CommentThreadRangeDecorator.description,\n\t\t\tisWholeLine: false,\n\t\t\tzIndex: 20,\n\t\t\tclassName: \"comment-thread-range-current\",\n\t\t\tshouldFillLineOnLineBreak: true,\n\t\t};\n\n\t\tthis.activeDecorationOptions = ModelDecorationOptions.createDynamic(\n\t\t\tactiveDecorationOptions,\n\t\t);\n\t\tthis._register(\n\t\t\tcommentService.onDidChangeCurrentCommentThread((thread) => {\n\t\t\t\tthis.updateCurrent(thread);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tcommentService.onDidUpdateCommentThreads(() => {\n\t\t\t\tthis.updateCurrent(undefined);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateCurrent(thread: CommentThread<IRange> | undefined) {\n\t\tif (\n\t\t\t!this.editor ||\n\t\t\t(thread?.resource &&\n\t\t\t\tthread.resource?.toString() !==\n\t\t\t\t\tthis.editor.getModel()?.uri.toString())\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis.currentThreadCollapseStateListener?.dispose();\n\t\tconst newDecoration: CommentThreadRangeDecoration[] = [];\n\t\tif (thread) {\n\t\t\tconst range = thread.range;\n\t\t\tif (\n\t\t\t\trange &&\n\t\t\t\t!(\n\t\t\t\t\trange.startLineNumber === range.endLineNumber &&\n\t\t\t\t\trange.startColumn === range.endColumn\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tthread.collapsibleState ===\n\t\t\t\t\tCommentThreadCollapsibleState.Expanded\n\t\t\t\t) {\n\t\t\t\t\tthis.currentThreadCollapseStateListener =\n\t\t\t\t\t\tthread.onDidChangeCollapsibleState((state) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tstate ===\n\t\t\t\t\t\t\t\tCommentThreadCollapsibleState.Collapsed\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.updateCurrent(undefined);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\tnewDecoration.push(\n\t\t\t\t\t\tnew CommentThreadRangeDecoration(\n\t\t\t\t\t\t\trange,\n\t\t\t\t\t\t\tthis.activeDecorationOptions,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.editor.changeDecorations((changeAccessor) => {\n\t\t\tthis.activeDecorationIds = changeAccessor.deltaDecorations(\n\t\t\t\tthis.activeDecorationIds,\n\t\t\t\tnewDecoration,\n\t\t\t);\n\t\t\tnewDecoration.forEach(\n\t\t\t\t(decoration, index) =>\n\t\t\t\t\t(decoration.id = this.decorationIds[index]),\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic update(\n\t\teditor: ICodeEditor | undefined,\n\t\tcommentInfos: ICommentInfo[],\n\t) {\n\t\tconst model = editor?.getModel();\n\t\tif (!editor || !model) {\n\t\t\treturn;\n\t\t}\n\t\tdispose(this.threadCollapseStateListeners);\n\t\tthis.editor = editor;\n\n\t\tconst commentThreadRangeDecorations: CommentThreadRangeDecoration[] =\n\t\t\t[];\n\t\tfor (const info of commentInfos) {\n\t\t\tinfo.threads.forEach((thread) => {\n\t\t\t\tif (thread.isDisposed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst range = thread.range;\n\t\t\t\t// We only want to show a range decoration when there's the range spans either multiple lines\n\t\t\t\t// or, when is spans multiple characters on the sample line\n\t\t\t\tif (\n\t\t\t\t\t!range ||\n\t\t\t\t\t(range.startLineNumber === range.endLineNumber &&\n\t\t\t\t\t\trange.startColumn === range.endColumn)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.threadCollapseStateListeners.push(\n\t\t\t\t\tthread.onDidChangeCollapsibleState(() => {\n\t\t\t\t\t\tthis.update(editor, commentInfos);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tthread.collapsibleState ===\n\t\t\t\t\tCommentThreadCollapsibleState.Collapsed\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcommentThreadRangeDecorations.push(\n\t\t\t\t\tnew CommentThreadRangeDecoration(\n\t\t\t\t\t\trange,\n\t\t\t\t\t\tthis.decorationOptions,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\teditor.changeDecorations((changeAccessor) => {\n\t\t\tthis.decorationIds = changeAccessor.deltaDecorations(\n\t\t\t\tthis.decorationIds,\n\t\t\t\tcommentThreadRangeDecorations,\n\t\t\t);\n\t\t\tcommentThreadRangeDecorations.forEach(\n\t\t\t\t(decoration, index) =>\n\t\t\t\t\t(decoration.id = this.decorationIds[index]),\n\t\t\t);\n\t\t});\n\t}\n\n\toverride dispose() {\n\t\tdispose(this.threadCollapseStateListeners);\n\t\tthis.currentThreadCollapseStateListener?.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
