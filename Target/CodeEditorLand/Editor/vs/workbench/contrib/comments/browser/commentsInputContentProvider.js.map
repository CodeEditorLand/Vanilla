{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentsInputContentProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { IEditorContribution, ScrollType } from '../../../../editor/common/editorCommon.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ITextModelContentProvider, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { ITextResourceEditorInput } from '../../../../platform/editor/common/editor.js';\nimport { applyTextEditorOptions } from '../../../common/editor/editorOptions.js';\nimport { SimpleCommentEditor } from './simpleCommentEditor.js';\n\nexport class CommentsInputContentProvider extends Disposable implements ITextModelContentProvider, IEditorContribution {\n\n\tpublic static readonly ID = 'comments.input.contentProvider';\n\n\tconstructor(\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\t\tthis._register(textModelService.registerTextModelContentProvider(Schemas.commentsInput, this));\n\n\t\tthis._register(codeEditorService.registerCodeEditorOpenHandler(async (input: ITextResourceEditorInput, editor: ICodeEditor | null, _sideBySide?: boolean): Promise<ICodeEditor | null> => {\n\t\t\tif (!(editor instanceof SimpleCommentEditor)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (editor.getModel()?.uri.toString() !== input.resource.toString()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (input.options) {\n\t\t\t\tapplyTextEditorOptions(input.options, editor, ScrollType.Immediate);\n\t\t\t}\n\t\t\treturn editor;\n\t\t}));\n\t}\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this._modelService.getModel(resource);\n\t\treturn existing ?? this._modelService.createModel('', this._languageService.createById('markdown'), resource);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,qBAAqB,kBAAkB;AAChD,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,qBAAqB;AAC9B,SAAS,2BAA2B,yBAAyB;AAC7D,SAAS,gCAAgC;AACzC,SAAS,8BAA8B;AACvC,SAAS,2BAA2B;AAE7B,IAAM,+BAAN,cAA2C,WAAqE;AAAA,EAItH,YACoB,kBACC,mBACY,eACG,kBAClC;AACD,UAAM;AAH0B;AACG;AAGnC,SAAK,UAAU,iBAAiB,iCAAiC,QAAQ,eAAe,IAAI,CAAC;AAE7F,SAAK,UAAU,kBAAkB,8BAA8B,OAAO,OAAiC,QAA4B,gBAAuD;AACzL,UAAI,EAAE,kBAAkB,sBAAsB;AAC7C,eAAO;AAAA,MACR;AAEA,UAAI,OAAO,SAAS,GAAG,IAAI,SAAS,MAAM,MAAM,SAAS,SAAS,GAAG;AACpE,eAAO;AAAA,MACR;AAEA,UAAI,MAAM,SAAS;AAClB,+BAAuB,MAAM,SAAS,QAAQ,WAAW,SAAS;AAAA,MACnE;AACA,aAAO;AAAA,IACR,CAAC,CAAC;AAAA,EACH;AAAA,EA9CD,OAmBuH;AAAA;AAAA;AAAA,EAEtH,OAAuB,KAAK;AAAA,EA2B5B,MAAM,mBAAmB,UAA2C;AACnE,UAAM,WAAW,KAAK,cAAc,SAAS,QAAQ;AACrD,WAAO,YAAY,KAAK,cAAc,YAAY,IAAI,KAAK,iBAAiB,WAAW,UAAU,GAAG,QAAQ;AAAA,EAC7G;AACD;AAjCa,+BAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GARU;",
  "names": []
}
