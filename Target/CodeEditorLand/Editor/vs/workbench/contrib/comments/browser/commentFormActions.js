import{Button as m}from"../../../../../vs/base/browser/ui/button/button.js";import"../../../../../vs/base/common/actions.js";import{DisposableStore as d}from"../../../../../vs/base/common/lifecycle.js";import"../../../../../vs/platform/actions/common/actions.js";import"../../../../../vs/platform/contextkey/common/contextkey.js";import"../../../../../vs/platform/keybinding/common/keybinding.js";import{defaultButtonStyles as b}from"../../../../../vs/platform/theme/browser/defaultStyles.js";import{CommentCommandId as p}from"../../../../../vs/workbench/contrib/comments/common/commentCommandIds.js";class k{constructor(t,r,a,i,n){this.keybindingService=t;this.contextKeyService=r;this.container=a;this.actionHandler=i;this.maxActions=n}_buttonElements=[];_toDispose=new d;_actions=[];setActions(t,r=!1){this._toDispose.clear(),this._buttonElements.forEach(n=>n.remove()),this._buttonElements=[];const a=t.getActions({shouldForwardArgs:!0});let i=!r;for(const n of a){const[,l]=n;this._actions=l;for(const e of l){let s=this.keybindingService.lookupKeybinding(e.id,this.contextKeyService)?.getLabel();!s&&i&&(s=this.keybindingService.lookupKeybinding(p.Submit,this.contextKeyService)?.getLabel());const c=s?`${e.label} (${s})`:e.label,o=new m(this.container,{secondary:!i,title:c,...b});if(i=!1,this._buttonElements.push(o.element),this._toDispose.add(o),this._toDispose.add(o.onDidClick(()=>this.actionHandler(e))),o.enabled=e.enabled,o.label=e.label,this.maxActions!==void 0&&this._buttonElements.length>=this.maxActions){console.warn("An extension has contributed more than the allowable number of actions to a comments menu.");return}}}}triggerDefaultAction(){if(this._actions.length){const t=this._actions[0];if(t.enabled)return this.actionHandler(t)}}dispose(){this._toDispose.dispose()}}export{k as CommentFormActions};
