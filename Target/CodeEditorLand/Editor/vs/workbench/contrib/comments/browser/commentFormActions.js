import{Button as h,ButtonWithDropdown as v}from"../../../../base/browser/ui/button/button.js";import{ActionRunner as f}from"../../../../base/common/actions.js";import{DisposableStore as y}from"../../../../base/common/lifecycle.js";import{SubmenuItemAction as g}from"../../../../platform/actions/common/actions.js";import"../../../../platform/contextkey/common/contextkey.js";import"../../../../platform/contextview/browser/contextView.js";import"../../../../platform/keybinding/common/keybinding.js";import{defaultButtonStyles as p}from"../../../../platform/theme/browser/defaultStyles.js";import{CommentCommandId as A}from"../common/commentCommandIds.js";class R{constructor(t,l,d,n,i,c,r){this.keybindingService=t;this.contextKeyService=l;this.contextMenuService=d;this.container=n;this.actionHandler=i;this.maxActions=c;this.supportDropdowns=r}_buttonElements=[];_toDispose=new y;_actions=[];setActions(t,l=!1){this._toDispose.clear(),this._buttonElements.forEach(i=>i.remove()),this._buttonElements=[];const d=t.getActions({shouldForwardArgs:!0});let n=!l;for(const i of d){const[,c]=i;this._actions=c;for(const r of c){const s=this.supportDropdowns&&r instanceof g?r.actions:[],e=s.length?s[0]:r;let a=this.keybindingService.lookupKeybinding(e.id,this.contextKeyService)?.getLabel();!a&&n&&(a=this.keybindingService.lookupKeybinding(A.Submit,this.contextKeyService)?.getLabel());const m=a?`${e.label} (${a})`:e.label,u=this.actionHandler,o=s.length?new v(this.container,{contextMenuProvider:this.contextMenuService,actions:s,actionRunner:new class extends f{async runAction(b,x){return u(b)}},secondary:!n,title:m,addPrimaryActionToDropdown:!1,...p}):new h(this.container,{secondary:!n,title:m,...p});if(n=!1,this._buttonElements.push(o.element),this._toDispose.add(o),this._toDispose.add(o.onDidClick(()=>this.actionHandler(e))),o.enabled=e.enabled,o.label=e.label,this.maxActions!==void 0&&this._buttonElements.length>=this.maxActions)return}}}triggerDefaultAction(){if(this._actions.length){const t=this._actions[0];if(t.enabled)return this.actionHandler(t)}}dispose(){this._toDispose.dispose()}}export{R as CommentFormActions};
