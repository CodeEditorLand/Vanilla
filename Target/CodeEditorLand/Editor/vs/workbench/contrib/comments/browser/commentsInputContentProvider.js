var c=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var p=(d,t,e,o)=>{for(var r=o>1?void 0:o?a(t,e):t,n=d.length-1,i;n>=0;n--)(i=d[n])&&(r=(o?i(t,e,r):i(r))||r);return o&&r&&c(t,e,r),r},m=(d,t)=>(e,o)=>t(e,o,d);import{Disposable as I}from"../../../../base/common/lifecycle.js";import{Schemas as u}from"../../../../base/common/network.js";import{ICodeEditorService as S}from"../../../../editor/browser/services/codeEditorService.js";import{ScrollType as f}from"../../../../editor/common/editorCommon.js";import{ILanguageService as g}from"../../../../editor/common/languages/language.js";import{IModelService as v}from"../../../../editor/common/services/model.js";import{ITextModelService as x}from"../../../../editor/common/services/resolverService.js";import{applyTextEditorOptions as y}from"../../../common/editor/editorOptions.js";import{SimpleCommentEditor as E}from"./simpleCommentEditor.js";let s=class extends I{constructor(e,o,r,n){super();this._modelService=r;this._languageService=n;this._register(e.registerTextModelContentProvider(u.commentsInput,this)),this._register(o.registerCodeEditorOpenHandler(async(i,l,M)=>!(l instanceof E)||l.getModel()?.uri.toString()!==i.resource.toString()?null:(i.options&&y(i.options,l,f.Immediate),l)))}static ID="comments.input.contentProvider";async provideTextContent(e){return this._modelService.getModel(e)??this._modelService.createModel("",this._languageService.createById("markdown"),e)}};s=p([m(0,x),m(1,S),m(2,v),m(3,g)],s);export{s as CommentsInputContentProvider};
