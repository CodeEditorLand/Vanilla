{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI, UriComponents } from \"../../../../base/common/uri.js\";\nimport { type IRange, Range } from \"../../../../editor/common/core/range.js\";\nimport type {\n\tComment,\n\tCommentInfo,\n\tCommentOptions,\n\tCommentReaction,\n\tCommentThread,\n\tCommentThreadChangedEvent,\n\tCommentingRangeResourceHint,\n\tCommentingRanges,\n\tPendingCommentThread,\n} from \"../../../../editor/common/languages.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IWorkbenchLayoutService } from \"../../../services/layout/browser/layoutService.js\";\nimport type { ICellRange } from \"../../notebook/common/notebookRange.js\";\nimport { CommentContextKeys } from \"../common/commentContextKeys.js\";\nimport type { ICommentThreadChangedEvent } from \"../common/commentModel.js\";\nimport {\n\tCOMMENTS_SECTION,\n\ttype ICommentsConfiguration,\n} from \"../common/commentsConfiguration.js\";\nimport { CommentMenus } from \"./commentMenus.js\";\nimport { CommentsModel, type ICommentsModel } from \"./commentsModel.js\";\n\nexport const ICommentService =\n\tcreateDecorator<ICommentService>(\"commentService\");\n\ninterface IResourceCommentThreadEvent {\n\tresource: URI;\n\tcommentInfos: ICommentInfo[];\n}\n\nexport interface ICommentInfo<T = IRange> extends CommentInfo<T> {\n\tuniqueOwner: string;\n\tlabel?: string;\n}\n\nexport interface INotebookCommentInfo {\n\textensionId?: string;\n\tthreads: CommentThread<ICellRange>[];\n\tuniqueOwner: string;\n\tlabel?: string;\n}\n\nexport interface IWorkspaceCommentThreadsEvent {\n\townerId: string;\n\townerLabel: string;\n\tcommentThreads: CommentThread[];\n}\n\nexport interface INotebookCommentThreadChangedEvent\n\textends CommentThreadChangedEvent<ICellRange> {\n\tuniqueOwner: string;\n}\n\nexport interface ICommentController {\n\tid: string;\n\tlabel: string;\n\tfeatures: {\n\t\treactionGroup?: CommentReaction[];\n\t\treactionHandler?: boolean;\n\t\toptions?: CommentOptions;\n\t};\n\toptions?: CommentOptions;\n\tcontextValue?: string;\n\towner: string;\n\tcreateCommentThreadTemplate(\n\t\tresource: UriComponents,\n\t\trange: IRange | undefined,\n\t\teditorId?: string,\n\t): Promise<void>;\n\tupdateCommentThreadTemplate(\n\t\tthreadHandle: number,\n\t\trange: IRange,\n\t): Promise<void>;\n\tdeleteCommentThreadMain(commentThreadId: string): void;\n\ttoggleReaction(\n\t\turi: URI,\n\t\tthread: CommentThread,\n\t\tcomment: Comment,\n\t\treaction: CommentReaction,\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n\tgetDocumentComments(\n\t\tresource: URI,\n\t\ttoken: CancellationToken,\n\t): Promise<ICommentInfo<IRange>>;\n\tgetNotebookComments(\n\t\tresource: URI,\n\t\ttoken: CancellationToken,\n\t): Promise<INotebookCommentInfo>;\n\tsetActiveCommentAndThread(\n\t\tcommentInfo: { thread: CommentThread; comment?: Comment } | undefined,\n\t): Promise<void>;\n}\n\nexport interface IContinueOnCommentProvider {\n\tprovideContinueOnComments(): PendingCommentThread[];\n}\n\nexport interface ICommentService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidSetResourceCommentInfos: Event<IResourceCommentThreadEvent>;\n\treadonly onDidSetAllCommentThreads: Event<IWorkspaceCommentThreadsEvent>;\n\treadonly onDidUpdateCommentThreads: Event<ICommentThreadChangedEvent>;\n\treadonly onDidUpdateNotebookCommentThreads: Event<INotebookCommentThreadChangedEvent>;\n\treadonly onDidChangeActiveEditingCommentThread: Event<CommentThread | null>;\n\treadonly onDidChangeCurrentCommentThread: Event<CommentThread | undefined>;\n\treadonly onDidUpdateCommentingRanges: Event<{ uniqueOwner: string }>;\n\treadonly onDidChangeActiveCommentingRange: Event<{\n\t\trange: Range;\n\t\tcommentingRangesInfo: CommentingRanges;\n\t}>;\n\treadonly onDidSetDataProvider: Event<void>;\n\treadonly onDidDeleteDataProvider: Event<string | undefined>;\n\treadonly onDidChangeCommentingEnabled: Event<boolean>;\n\treadonly isCommentingEnabled: boolean;\n\treadonly commentsModel: ICommentsModel;\n\tsetDocumentComments(resource: URI, commentInfos: ICommentInfo[]): void;\n\tsetWorkspaceComments(\n\t\tuniqueOwner: string,\n\t\tcommentsByResource: CommentThread<IRange | ICellRange>[],\n\t): void;\n\tremoveWorkspaceComments(uniqueOwner: string): void;\n\tregisterCommentController(\n\t\tuniqueOwner: string,\n\t\tcommentControl: ICommentController,\n\t): void;\n\tunregisterCommentController(uniqueOwner?: string): void;\n\tgetCommentController(uniqueOwner: string): ICommentController | undefined;\n\tcreateCommentThreadTemplate(\n\t\tuniqueOwner: string,\n\t\tresource: URI,\n\t\trange: Range | undefined,\n\t\teditorId?: string,\n\t): Promise<void>;\n\tupdateCommentThreadTemplate(\n\t\tuniqueOwner: string,\n\t\tthreadHandle: number,\n\t\trange: Range,\n\t): Promise<void>;\n\tgetCommentMenus(uniqueOwner: string): CommentMenus;\n\tupdateComments(\n\t\townerId: string,\n\t\tevent: CommentThreadChangedEvent<IRange>,\n\t): void;\n\tupdateNotebookComments(\n\t\townerId: string,\n\t\tevent: CommentThreadChangedEvent<ICellRange>,\n\t): void;\n\tdisposeCommentThread(ownerId: string, threadId: string): void;\n\tgetDocumentComments(resource: URI): Promise<(ICommentInfo | null)[]>;\n\tgetNotebookComments(\n\t\tresource: URI,\n\t): Promise<(INotebookCommentInfo | null)[]>;\n\tupdateCommentingRanges(\n\t\townerId: string,\n\t\tresourceHints?: CommentingRangeResourceHint,\n\t): void;\n\thasReactionHandler(uniqueOwner: string): boolean;\n\ttoggleReaction(\n\t\tuniqueOwner: string,\n\t\tresource: URI,\n\t\tthread: CommentThread<IRange | ICellRange>,\n\t\tcomment: Comment,\n\t\treaction: CommentReaction,\n\t): Promise<void>;\n\tsetActiveEditingCommentThread(\n\t\tcommentThread: CommentThread<IRange | ICellRange> | null,\n\t): void;\n\tsetCurrentCommentThread(\n\t\tcommentThread: CommentThread<IRange | ICellRange> | undefined,\n\t): void;\n\tsetActiveCommentAndThread(\n\t\tuniqueOwner: string,\n\t\tcommentInfo:\n\t\t\t| { thread: CommentThread<IRange | ICellRange>; comment?: Comment }\n\t\t\t| undefined,\n\t): Promise<void>;\n\tenableCommenting(enable: boolean): void;\n\tregisterContinueOnCommentProvider(\n\t\tprovider: IContinueOnCommentProvider,\n\t): IDisposable;\n\tremoveContinueOnComment(pendingComment: {\n\t\trange: IRange | undefined;\n\t\turi: URI;\n\t\tuniqueOwner: string;\n\t\tisReply?: boolean;\n\t}): PendingCommentThread | undefined;\n\tresourceHasCommentingRanges(resource: URI): boolean;\n}\n\nconst CONTINUE_ON_COMMENTS = \"comments.continueOnComments\";\n\nexport class CommentService extends Disposable implements ICommentService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidSetDataProvider: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidSetDataProvider: Event<void> =\n\t\tthis._onDidSetDataProvider.event;\n\n\tprivate readonly _onDidDeleteDataProvider: Emitter<string | undefined> =\n\t\tthis._register(new Emitter<string | undefined>());\n\treadonly onDidDeleteDataProvider: Event<string | undefined> =\n\t\tthis._onDidDeleteDataProvider.event;\n\n\tprivate readonly _onDidSetResourceCommentInfos: Emitter<IResourceCommentThreadEvent> =\n\t\tthis._register(new Emitter<IResourceCommentThreadEvent>());\n\treadonly onDidSetResourceCommentInfos: Event<IResourceCommentThreadEvent> =\n\t\tthis._onDidSetResourceCommentInfos.event;\n\n\tprivate readonly _onDidSetAllCommentThreads: Emitter<IWorkspaceCommentThreadsEvent> =\n\t\tthis._register(new Emitter<IWorkspaceCommentThreadsEvent>());\n\treadonly onDidSetAllCommentThreads: Event<IWorkspaceCommentThreadsEvent> =\n\t\tthis._onDidSetAllCommentThreads.event;\n\n\tprivate readonly _onDidUpdateCommentThreads: Emitter<ICommentThreadChangedEvent> =\n\t\tthis._register(new Emitter<ICommentThreadChangedEvent>());\n\treadonly onDidUpdateCommentThreads: Event<ICommentThreadChangedEvent> =\n\t\tthis._onDidUpdateCommentThreads.event;\n\n\tprivate readonly _onDidUpdateNotebookCommentThreads: Emitter<INotebookCommentThreadChangedEvent> =\n\t\tthis._register(new Emitter<INotebookCommentThreadChangedEvent>());\n\treadonly onDidUpdateNotebookCommentThreads: Event<INotebookCommentThreadChangedEvent> =\n\t\tthis._onDidUpdateNotebookCommentThreads.event;\n\n\tprivate readonly _onDidUpdateCommentingRanges: Emitter<{\n\t\tuniqueOwner: string;\n\t}> = this._register(new Emitter<{ uniqueOwner: string }>());\n\treadonly onDidUpdateCommentingRanges: Event<{ uniqueOwner: string }> =\n\t\tthis._onDidUpdateCommentingRanges.event;\n\n\tprivate readonly _onDidChangeActiveEditingCommentThread = this._register(\n\t\tnew Emitter<CommentThread | null>(),\n\t);\n\treadonly onDidChangeActiveEditingCommentThread =\n\t\tthis._onDidChangeActiveEditingCommentThread.event;\n\n\tprivate readonly _onDidChangeCurrentCommentThread = this._register(\n\t\tnew Emitter<CommentThread | undefined>(),\n\t);\n\treadonly onDidChangeCurrentCommentThread =\n\t\tthis._onDidChangeCurrentCommentThread.event;\n\n\tprivate readonly _onDidChangeCommentingEnabled = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\treadonly onDidChangeCommentingEnabled =\n\t\tthis._onDidChangeCommentingEnabled.event;\n\n\tprivate readonly _onDidChangeActiveCommentingRange: Emitter<{\n\t\trange: Range;\n\t\tcommentingRangesInfo: CommentingRanges;\n\t}> = this._register(\n\t\tnew Emitter<{\n\t\t\trange: Range;\n\t\t\tcommentingRangesInfo: CommentingRanges;\n\t\t}>(),\n\t);\n\treadonly onDidChangeActiveCommentingRange: Event<{\n\t\trange: Range;\n\t\tcommentingRangesInfo: CommentingRanges;\n\t}> = this._onDidChangeActiveCommentingRange.event;\n\n\tprivate _commentControls = new Map<string, ICommentController>();\n\tprivate _commentMenus = new Map<string, CommentMenus>();\n\tprivate _isCommentingEnabled = true;\n\tprivate _workspaceHasCommenting: IContextKey<boolean>;\n\n\tprivate _continueOnComments = new Map<string, PendingCommentThread[]>(); // uniqueOwner -> PendingCommentThread[]\n\tprivate _continueOnCommentProviders = new Set<IContinueOnCommentProvider>();\n\n\tprivate readonly _commentsModel: CommentsModel = this._register(\n\t\tnew CommentsModel(),\n\t);\n\tpublic readonly commentsModel: ICommentsModel = this._commentsModel;\n\n\tprivate _commentingRangeResources = new Set<string>(); // URIs\n\tprivate _commentingRangeResourceHintSchemes = new Set<string>(); // schemes\n\n\tconstructor(\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tsuper();\n\t\tthis._handleConfiguration();\n\t\tthis._handleZenMode();\n\t\tthis._workspaceHasCommenting = CommentContextKeys.WorkspaceHasCommenting.bindTo(contextKeyService);\n\t\tconst storageListener = this._register(new DisposableStore());\n\n\t\tconst storageEvent = Event.debounce(this.storageService.onDidChangeValue(StorageScope.WORKSPACE, CONTINUE_ON_COMMENTS, storageListener), (last, event) => last?.external ? last : event, 500);\n\t\tstorageListener.add(storageEvent(v => {\n\t\t\tif (!v.external) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst commentsToRestore: PendingCommentThread[] | undefined = this.storageService.getObject(CONTINUE_ON_COMMENTS, StorageScope.WORKSPACE);\n\t\t\tif (!commentsToRestore) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.logService.debug(`Comments: URIs of continue on comments from storage ${commentsToRestore.map(thread => thread.uri.toString()).join(', ')}.`);\n\t\t\tconst changedOwners = this._addContinueOnComments(commentsToRestore, this._continueOnComments);\n\t\t\tfor (const uniqueOwner of changedOwners) {\n\t\t\t\tconst control = this._commentControls.get(uniqueOwner);\n\t\t\t\tif (!control) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst evt: ICommentThreadChangedEvent = {\n\t\t\t\t\tuniqueOwner: uniqueOwner,\n\t\t\t\t\towner: control.owner,\n\t\t\t\t\townerLabel: control.label,\n\t\t\t\t\tpending: this._continueOnComments.get(uniqueOwner) || [],\n\t\t\t\t\tadded: [],\n\t\t\t\t\tremoved: [],\n\t\t\t\t\tchanged: []\n\t\t\t\t};\n\t\t\t\tthis.updateModelThreads(evt);\n\t\t\t}\n\t\t}));\n\t\tthis._register(storageService.onWillSaveState(() => {\n\t\t\tconst map: Map<string, PendingCommentThread[]> = new Map();\n\t\t\tfor (const provider of this._continueOnCommentProviders) {\n\t\t\t\tconst pendingComments = provider.provideContinueOnComments();\n\t\t\t\tthis._addContinueOnComments(pendingComments, map);\n\t\t\t}\n\t\t\tthis._saveContinueOnComments(map);\n\t\t}));\n\n\t\tthis._register(this.modelService.onModelAdded(model => {\n\t\t\t// Allows comment providers to cause their commenting ranges to be prefetched by opening text documents in the background.\n\t\t\tif (!this._commentingRangeResources.has(model.uri.toString())) {\n\t\t\t\tthis.getDocumentComments(model.uri);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _updateResourcesWithCommentingRanges(\n\t\tresource: URI,\n\t\tcommentInfos: (ICommentInfo | null)[],\n\t) {\n\t\tfor (const comments of commentInfos) {\n\t\t\tif (\n\t\t\t\tcomments &&\n\t\t\t\t(comments.commentingRanges.ranges.length > 0 ||\n\t\t\t\t\tcomments.threads.length > 0)\n\t\t\t) {\n\t\t\t\tthis._commentingRangeResources.add(resource.toString());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handleConfiguration() {\n\t\tthis._isCommentingEnabled = this._defaultCommentingEnablement;\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"comments.visible\")) {\n\t\t\t\t\tthis.enableCommenting(this._defaultCommentingEnablement);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _handleZenMode() {\n\t\tlet preZenModeValue: boolean = this._isCommentingEnabled;\n\t\tthis._register(\n\t\t\tthis.layoutService.onDidChangeZenMode((e) => {\n\t\t\t\tif (e) {\n\t\t\t\t\tpreZenModeValue = this._isCommentingEnabled;\n\t\t\t\t\tthis.enableCommenting(false);\n\t\t\t\t} else {\n\t\t\t\t\tthis.enableCommenting(preZenModeValue);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate get _defaultCommentingEnablement(): boolean {\n\t\treturn !!this.configurationService.getValue<\n\t\t\tICommentsConfiguration | undefined\n\t\t>(COMMENTS_SECTION)?.visible;\n\t}\n\n\tget isCommentingEnabled(): boolean {\n\t\treturn this._isCommentingEnabled;\n\t}\n\n\tenableCommenting(enable: boolean): void {\n\t\tif (enable !== this._isCommentingEnabled) {\n\t\t\tthis._isCommentingEnabled = enable;\n\t\t\tthis._onDidChangeCommentingEnabled.fire(enable);\n\t\t}\n\t}\n\n\t/**\n\t * The current comment thread is the thread that has focus or is being hovered.\n\t * @param commentThread\n\t */\n\tsetCurrentCommentThread(commentThread: CommentThread | undefined) {\n\t\tthis._onDidChangeCurrentCommentThread.fire(commentThread);\n\t}\n\n\t/**\n\t * The active comment thread is the the thread that is currently being edited.\n\t * @param commentThread\n\t */\n\tsetActiveEditingCommentThread(commentThread: CommentThread | null) {\n\t\tthis._onDidChangeActiveEditingCommentThread.fire(commentThread);\n\t}\n\n\tprivate _lastActiveCommentController: ICommentController | undefined;\n\tasync setActiveCommentAndThread(\n\t\tuniqueOwner: string,\n\t\tcommentInfo:\n\t\t\t| { thread: CommentThread<IRange>; comment?: Comment }\n\t\t\t| undefined,\n\t) {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (commentController !== this._lastActiveCommentController) {\n\t\t\tawait this._lastActiveCommentController?.setActiveCommentAndThread(\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\t\tthis._lastActiveCommentController = commentController;\n\t\treturn commentController.setActiveCommentAndThread(commentInfo);\n\t}\n\n\tsetDocumentComments(resource: URI, commentInfos: ICommentInfo[]): void {\n\t\tthis._onDidSetResourceCommentInfos.fire({ resource, commentInfos });\n\t}\n\n\tprivate setModelThreads(\n\t\townerId: string,\n\t\towner: string,\n\t\townerLabel: string,\n\t\tcommentThreads: CommentThread<IRange>[],\n\t) {\n\t\tthis._commentsModel.setCommentThreads(\n\t\t\townerId,\n\t\t\towner,\n\t\t\townerLabel,\n\t\t\tcommentThreads,\n\t\t);\n\t\tthis._onDidSetAllCommentThreads.fire({\n\t\t\townerId,\n\t\t\townerLabel,\n\t\t\tcommentThreads,\n\t\t});\n\t}\n\n\tprivate updateModelThreads(event: ICommentThreadChangedEvent) {\n\t\tthis._commentsModel.updateCommentThreads(event);\n\t\tthis._onDidUpdateCommentThreads.fire(event);\n\t}\n\n\tsetWorkspaceComments(\n\t\tuniqueOwner: string,\n\t\tcommentsByResource: CommentThread[],\n\t): void {\n\t\tif (commentsByResource.length) {\n\t\t\tthis._workspaceHasCommenting.set(true);\n\t\t}\n\t\tconst control = this._commentControls.get(uniqueOwner);\n\t\tif (control) {\n\t\t\tthis.setModelThreads(\n\t\t\t\tuniqueOwner,\n\t\t\t\tcontrol.owner,\n\t\t\t\tcontrol.label,\n\t\t\t\tcommentsByResource,\n\t\t\t);\n\t\t}\n\t}\n\n\tremoveWorkspaceComments(uniqueOwner: string): void {\n\t\tconst control = this._commentControls.get(uniqueOwner);\n\t\tif (control) {\n\t\t\tthis.setModelThreads(uniqueOwner, control.owner, control.label, []);\n\t\t}\n\t}\n\n\tregisterCommentController(\n\t\tuniqueOwner: string,\n\t\tcommentControl: ICommentController,\n\t): void {\n\t\tthis._commentControls.set(uniqueOwner, commentControl);\n\t\tthis._onDidSetDataProvider.fire();\n\t}\n\n\tunregisterCommentController(uniqueOwner?: string): void {\n\t\tif (uniqueOwner) {\n\t\t\tthis._commentControls.delete(uniqueOwner);\n\t\t} else {\n\t\t\tthis._commentControls.clear();\n\t\t}\n\t\tthis._commentsModel.deleteCommentsByOwner(uniqueOwner);\n\t\tthis._onDidDeleteDataProvider.fire(uniqueOwner);\n\t}\n\n\tgetCommentController(uniqueOwner: string): ICommentController | undefined {\n\t\treturn this._commentControls.get(uniqueOwner);\n\t}\n\n\tasync createCommentThreadTemplate(\n\t\tuniqueOwner: string,\n\t\tresource: URI,\n\t\trange: Range | undefined,\n\t\teditorId?: string,\n\t): Promise<void> {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn commentController.createCommentThreadTemplate(\n\t\t\tresource,\n\t\t\trange,\n\t\t\teditorId,\n\t\t);\n\t}\n\n\tasync updateCommentThreadTemplate(\n\t\tuniqueOwner: string,\n\t\tthreadHandle: number,\n\t\trange: Range,\n\t) {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait commentController.updateCommentThreadTemplate(\n\t\t\tthreadHandle,\n\t\t\trange,\n\t\t);\n\t}\n\n\tdisposeCommentThread(uniqueOwner: string, threadId: string) {\n\t\tconst controller = this.getCommentController(uniqueOwner);\n\t\tcontroller?.deleteCommentThreadMain(threadId);\n\t}\n\n\tgetCommentMenus(uniqueOwner: string): CommentMenus {\n\t\tif (this._commentMenus.get(uniqueOwner)) {\n\t\t\treturn this._commentMenus.get(uniqueOwner)!;\n\t\t}\n\n\t\tconst menu = this.instantiationService.createInstance(CommentMenus);\n\t\tthis._commentMenus.set(uniqueOwner, menu);\n\t\treturn menu;\n\t}\n\n\tupdateComments(\n\t\townerId: string,\n\t\tevent: CommentThreadChangedEvent<IRange>,\n\t): void {\n\t\tconst control = this._commentControls.get(ownerId);\n\t\tif (control) {\n\t\t\tconst evt: ICommentThreadChangedEvent = Object.assign({}, event, {\n\t\t\t\tuniqueOwner: ownerId,\n\t\t\t\townerLabel: control.label,\n\t\t\t\towner: control.owner,\n\t\t\t});\n\t\t\tthis.updateModelThreads(evt);\n\t\t}\n\t}\n\n\tupdateNotebookComments(\n\t\townerId: string,\n\t\tevent: CommentThreadChangedEvent<ICellRange>,\n\t): void {\n\t\tconst evt: INotebookCommentThreadChangedEvent = Object.assign(\n\t\t\t{},\n\t\t\tevent,\n\t\t\t{ uniqueOwner: ownerId },\n\t\t);\n\t\tthis._onDidUpdateNotebookCommentThreads.fire(evt);\n\t}\n\n\tupdateCommentingRanges(\n\t\townerId: string,\n\t\tresourceHints?: CommentingRangeResourceHint,\n\t) {\n\t\tif (resourceHints?.schemes && resourceHints.schemes.length > 0) {\n\t\t\tfor (const scheme of resourceHints.schemes) {\n\t\t\t\tthis._commentingRangeResourceHintSchemes.add(scheme);\n\t\t\t}\n\t\t}\n\t\tthis._workspaceHasCommenting.set(true);\n\t\tthis._onDidUpdateCommentingRanges.fire({ uniqueOwner: ownerId });\n\t}\n\n\tasync toggleReaction(\n\t\tuniqueOwner: string,\n\t\tresource: URI,\n\t\tthread: CommentThread,\n\t\tcomment: Comment,\n\t\treaction: CommentReaction,\n\t): Promise<void> {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (commentController) {\n\t\t\treturn commentController.toggleReaction(\n\t\t\t\tresource,\n\t\t\t\tthread,\n\t\t\t\tcomment,\n\t\t\t\treaction,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error(\"Not supported\");\n\t\t}\n\t}\n\n\thasReactionHandler(uniqueOwner: string): boolean {\n\t\tconst commentProvider = this._commentControls.get(uniqueOwner);\n\n\t\tif (commentProvider) {\n\t\t\treturn !!commentProvider.features.reactionHandler;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync getDocumentComments(resource: URI): Promise<(ICommentInfo | null)[]> {\n\t\tconst commentControlResult: Promise<ICommentInfo | null>[] = [];\n\n\t\tfor (const control of this._commentControls.values()) {\n\t\t\tcommentControlResult.push(\n\t\t\t\tcontrol\n\t\t\t\t\t.getDocumentComments(resource, CancellationToken.None)\n\t\t\t\t\t.then((documentComments) => {\n\t\t\t\t\t\t// Check that there aren't any continue on comments in the provided comments\n\t\t\t\t\t\t// This can happen because continue on comments are stored separately from local un-submitted comments.\n\t\t\t\t\t\tfor (const documentCommentThread of documentComments.threads) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tdocumentCommentThread.comments?.length === 0 &&\n\t\t\t\t\t\t\t\tdocumentCommentThread.range\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.removeContinueOnComment({\n\t\t\t\t\t\t\t\t\trange: documentCommentThread.range,\n\t\t\t\t\t\t\t\t\turi: resource,\n\t\t\t\t\t\t\t\t\tuniqueOwner: documentComments.uniqueOwner,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst pendingComments = this._continueOnComments.get(\n\t\t\t\t\t\t\tdocumentComments.uniqueOwner,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdocumentComments.pendingCommentThreads =\n\t\t\t\t\t\t\tpendingComments?.filter(\n\t\t\t\t\t\t\t\t(pendingComment) =>\n\t\t\t\t\t\t\t\t\tpendingComment.uri.toString() ===\n\t\t\t\t\t\t\t\t\tresource.toString(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\treturn documentComments;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((_) => {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tconst commentInfos = await Promise.all(commentControlResult);\n\t\tthis._updateResourcesWithCommentingRanges(resource, commentInfos);\n\t\treturn commentInfos;\n\t}\n\n\tasync getNotebookComments(\n\t\tresource: URI,\n\t): Promise<(INotebookCommentInfo | null)[]> {\n\t\tconst commentControlResult: Promise<INotebookCommentInfo | null>[] = [];\n\n\t\tthis._commentControls.forEach((control) => {\n\t\t\tcommentControlResult.push(\n\t\t\t\tcontrol\n\t\t\t\t\t.getNotebookComments(resource, CancellationToken.None)\n\t\t\t\t\t.catch((_) => {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}),\n\t\t\t);\n\t\t});\n\n\t\treturn Promise.all(commentControlResult);\n\t}\n\n\tregisterContinueOnCommentProvider(\n\t\tprovider: IContinueOnCommentProvider,\n\t): IDisposable {\n\t\tthis._continueOnCommentProviders.add(provider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._continueOnCommentProviders.delete(provider);\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate _saveContinueOnComments(map: Map<string, PendingCommentThread[]>) {\n\t\tconst commentsToSave: PendingCommentThread[] = [];\n\t\tfor (const pendingComments of map.values()) {\n\t\t\tcommentsToSave.push(...pendingComments);\n\t\t}\n\t\tthis.logService.debug(\n\t\t\t`Comments: URIs of continue on comments to add to storage ${commentsToSave.map((thread) => thread.uri.toString()).join(\", \")}.`,\n\t\t);\n\t\tthis.storageService.store(\n\t\t\tCONTINUE_ON_COMMENTS,\n\t\t\tcommentsToSave,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n\n\tremoveContinueOnComment(pendingComment: {\n\t\trange: IRange;\n\t\turi: URI;\n\t\tuniqueOwner: string;\n\t\tisReply?: boolean;\n\t}): PendingCommentThread | undefined {\n\t\tconst pendingComments = this._continueOnComments.get(\n\t\t\tpendingComment.uniqueOwner,\n\t\t);\n\t\tif (pendingComments) {\n\t\t\tconst commentIndex = pendingComments.findIndex(\n\t\t\t\t(comment) =>\n\t\t\t\t\tcomment.uri.toString() === pendingComment.uri.toString() &&\n\t\t\t\t\tRange.equalsRange(comment.range, pendingComment.range) &&\n\t\t\t\t\t(pendingComment.isReply === undefined ||\n\t\t\t\t\t\tcomment.isReply === pendingComment.isReply),\n\t\t\t);\n\t\t\tif (commentIndex > -1) {\n\t\t\t\treturn pendingComments.splice(commentIndex, 1)[0];\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _addContinueOnComments(\n\t\tpendingComments: PendingCommentThread[],\n\t\tmap: Map<string, PendingCommentThread[]>,\n\t): Set<string> {\n\t\tconst changedOwners = new Set<string>();\n\t\tfor (const pendingComment of pendingComments) {\n\t\t\tif (map.has(pendingComment.uniqueOwner)) {\n\t\t\t\tconst commentsForOwner = map.get(pendingComment.uniqueOwner)!;\n\t\t\t\tif (\n\t\t\t\t\tcommentsForOwner.every(\n\t\t\t\t\t\t(comment) =>\n\t\t\t\t\t\t\tcomment.uri.toString() !==\n\t\t\t\t\t\t\t\tpendingComment.uri.toString() ||\n\t\t\t\t\t\t\t!Range.equalsRange(\n\t\t\t\t\t\t\t\tcomment.range,\n\t\t\t\t\t\t\t\tpendingComment.range,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcommentsForOwner.push(pendingComment);\n\t\t\t\t\tchangedOwners.add(pendingComment.uniqueOwner);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmap.set(pendingComment.uniqueOwner, [pendingComment]);\n\t\t\t\tchangedOwners.add(pendingComment.uniqueOwner);\n\t\t\t}\n\t\t}\n\t\treturn changedOwners;\n\t}\n\n\tresourceHasCommentingRanges(resource: URI): boolean {\n\t\treturn (\n\t\t\tthis._commentingRangeResourceHintSchemes.has(resource.scheme) ||\n\t\t\tthis._commentingRangeResources.has(resource.toString())\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
