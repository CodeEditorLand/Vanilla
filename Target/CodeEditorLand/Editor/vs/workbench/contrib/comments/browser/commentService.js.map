{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommentThreadChangedEvent, CommentInfo, Comment, CommentReaction, CommentingRanges, CommentThread, CommentOptions, PendingCommentThread, CommentingRangeResourceHint } from '../../../../editor/common/languages.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { Range, IRange } from '../../../../editor/common/core/range.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ICommentThreadChangedEvent } from '../common/commentModel.js';\nimport { CommentMenus } from './commentMenus.js';\nimport { ICellRange } from '../../notebook/common/notebookRange.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { COMMENTS_SECTION, ICommentsConfiguration } from '../common/commentsConfiguration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { CommentContextKeys } from '../common/commentContextKeys.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { CommentsModel, ICommentsModel } from './commentsModel.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\n\nexport const ICommentService = createDecorator<ICommentService>('commentService');\n\ninterface IResourceCommentThreadEvent {\n\tresource: URI;\n\tcommentInfos: ICommentInfo[];\n}\n\nexport interface ICommentInfo<T = IRange> extends CommentInfo<T> {\n\tuniqueOwner: string;\n\tlabel?: string;\n}\n\nexport interface INotebookCommentInfo {\n\textensionId?: string;\n\tthreads: CommentThread<ICellRange>[];\n\tuniqueOwner: string;\n\tlabel?: string;\n}\n\nexport interface IWorkspaceCommentThreadsEvent {\n\townerId: string;\n\townerLabel: string;\n\tcommentThreads: CommentThread[];\n}\n\nexport interface INotebookCommentThreadChangedEvent extends CommentThreadChangedEvent<ICellRange> {\n\tuniqueOwner: string;\n}\n\nexport interface ICommentController {\n\tid: string;\n\tlabel: string;\n\tfeatures: {\n\t\treactionGroup?: CommentReaction[];\n\t\treactionHandler?: boolean;\n\t\toptions?: CommentOptions;\n\t};\n\toptions?: CommentOptions;\n\tcontextValue?: string;\n\towner: string;\n\tcreateCommentThreadTemplate(resource: UriComponents, range: IRange | undefined, editorId?: string): Promise<void>;\n\tupdateCommentThreadTemplate(threadHandle: number, range: IRange): Promise<void>;\n\tdeleteCommentThreadMain(commentThreadId: string): void;\n\ttoggleReaction(uri: URI, thread: CommentThread, comment: Comment, reaction: CommentReaction, token: CancellationToken): Promise<void>;\n\tgetDocumentComments(resource: URI, token: CancellationToken): Promise<ICommentInfo<IRange>>;\n\tgetNotebookComments(resource: URI, token: CancellationToken): Promise<INotebookCommentInfo>;\n\tsetActiveCommentAndThread(commentInfo: { thread: CommentThread; comment?: Comment } | undefined): Promise<void>;\n}\n\nexport interface IContinueOnCommentProvider {\n\tprovideContinueOnComments(): PendingCommentThread[];\n}\n\nexport interface ICommentService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidSetResourceCommentInfos: Event<IResourceCommentThreadEvent>;\n\treadonly onDidSetAllCommentThreads: Event<IWorkspaceCommentThreadsEvent>;\n\treadonly onDidUpdateCommentThreads: Event<ICommentThreadChangedEvent>;\n\treadonly onDidUpdateNotebookCommentThreads: Event<INotebookCommentThreadChangedEvent>;\n\treadonly onDidChangeActiveEditingCommentThread: Event<CommentThread | null>;\n\treadonly onDidChangeCurrentCommentThread: Event<CommentThread | undefined>;\n\treadonly onDidUpdateCommentingRanges: Event<{ uniqueOwner: string }>;\n\treadonly onDidChangeActiveCommentingRange: Event<{ range: Range; commentingRangesInfo: CommentingRanges }>;\n\treadonly onDidSetDataProvider: Event<void>;\n\treadonly onDidDeleteDataProvider: Event<string | undefined>;\n\treadonly onDidChangeCommentingEnabled: Event<boolean>;\n\treadonly isCommentingEnabled: boolean;\n\treadonly commentsModel: ICommentsModel;\n\tsetDocumentComments(resource: URI, commentInfos: ICommentInfo[]): void;\n\tsetWorkspaceComments(uniqueOwner: string, commentsByResource: CommentThread<IRange | ICellRange>[]): void;\n\tremoveWorkspaceComments(uniqueOwner: string): void;\n\tregisterCommentController(uniqueOwner: string, commentControl: ICommentController): void;\n\tunregisterCommentController(uniqueOwner?: string): void;\n\tgetCommentController(uniqueOwner: string): ICommentController | undefined;\n\tcreateCommentThreadTemplate(uniqueOwner: string, resource: URI, range: Range | undefined, editorId?: string): Promise<void>;\n\tupdateCommentThreadTemplate(uniqueOwner: string, threadHandle: number, range: Range): Promise<void>;\n\tgetCommentMenus(uniqueOwner: string): CommentMenus;\n\tupdateComments(ownerId: string, event: CommentThreadChangedEvent<IRange>): void;\n\tupdateNotebookComments(ownerId: string, event: CommentThreadChangedEvent<ICellRange>): void;\n\tdisposeCommentThread(ownerId: string, threadId: string): void;\n\tgetDocumentComments(resource: URI): Promise<(ICommentInfo | null)[]>;\n\tgetNotebookComments(resource: URI): Promise<(INotebookCommentInfo | null)[]>;\n\tupdateCommentingRanges(ownerId: string, resourceHints?: CommentingRangeResourceHint): void;\n\thasReactionHandler(uniqueOwner: string): boolean;\n\ttoggleReaction(uniqueOwner: string, resource: URI, thread: CommentThread<IRange | ICellRange>, comment: Comment, reaction: CommentReaction): Promise<void>;\n\tsetActiveEditingCommentThread(commentThread: CommentThread<IRange | ICellRange> | null): void;\n\tsetCurrentCommentThread(commentThread: CommentThread<IRange | ICellRange> | undefined): void;\n\tsetActiveCommentAndThread(uniqueOwner: string, commentInfo: { thread: CommentThread<IRange | ICellRange>; comment?: Comment } | undefined): Promise<void>;\n\tenableCommenting(enable: boolean): void;\n\tregisterContinueOnCommentProvider(provider: IContinueOnCommentProvider): IDisposable;\n\tremoveContinueOnComment(pendingComment: { range: IRange | undefined; uri: URI; uniqueOwner: string; isReply?: boolean }): PendingCommentThread | undefined;\n\tresourceHasCommentingRanges(resource: URI): boolean;\n}\n\nconst CONTINUE_ON_COMMENTS = 'comments.continueOnComments';\n\nexport class CommentService extends Disposable implements ICommentService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidSetDataProvider: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidSetDataProvider: Event<void> = this._onDidSetDataProvider.event;\n\n\tprivate readonly _onDidDeleteDataProvider: Emitter<string | undefined> = this._register(new Emitter<string | undefined>());\n\treadonly onDidDeleteDataProvider: Event<string | undefined> = this._onDidDeleteDataProvider.event;\n\n\tprivate readonly _onDidSetResourceCommentInfos: Emitter<IResourceCommentThreadEvent> = this._register(new Emitter<IResourceCommentThreadEvent>());\n\treadonly onDidSetResourceCommentInfos: Event<IResourceCommentThreadEvent> = this._onDidSetResourceCommentInfos.event;\n\n\tprivate readonly _onDidSetAllCommentThreads: Emitter<IWorkspaceCommentThreadsEvent> = this._register(new Emitter<IWorkspaceCommentThreadsEvent>());\n\treadonly onDidSetAllCommentThreads: Event<IWorkspaceCommentThreadsEvent> = this._onDidSetAllCommentThreads.event;\n\n\tprivate readonly _onDidUpdateCommentThreads: Emitter<ICommentThreadChangedEvent> = this._register(new Emitter<ICommentThreadChangedEvent>());\n\treadonly onDidUpdateCommentThreads: Event<ICommentThreadChangedEvent> = this._onDidUpdateCommentThreads.event;\n\n\tprivate readonly _onDidUpdateNotebookCommentThreads: Emitter<INotebookCommentThreadChangedEvent> = this._register(new Emitter<INotebookCommentThreadChangedEvent>());\n\treadonly onDidUpdateNotebookCommentThreads: Event<INotebookCommentThreadChangedEvent> = this._onDidUpdateNotebookCommentThreads.event;\n\n\tprivate readonly _onDidUpdateCommentingRanges: Emitter<{ uniqueOwner: string }> = this._register(new Emitter<{ uniqueOwner: string }>());\n\treadonly onDidUpdateCommentingRanges: Event<{ uniqueOwner: string }> = this._onDidUpdateCommentingRanges.event;\n\n\tprivate readonly _onDidChangeActiveEditingCommentThread = this._register(new Emitter<CommentThread | null>());\n\treadonly onDidChangeActiveEditingCommentThread = this._onDidChangeActiveEditingCommentThread.event;\n\n\tprivate readonly _onDidChangeCurrentCommentThread = this._register(new Emitter<CommentThread | undefined>());\n\treadonly onDidChangeCurrentCommentThread = this._onDidChangeCurrentCommentThread.event;\n\n\tprivate readonly _onDidChangeCommentingEnabled = this._register(new Emitter<boolean>());\n\treadonly onDidChangeCommentingEnabled = this._onDidChangeCommentingEnabled.event;\n\n\tprivate readonly _onDidChangeActiveCommentingRange: Emitter<{\n\t\trange: Range; commentingRangesInfo:\n\t\tCommentingRanges;\n\t}> = this._register(new Emitter<{\n\t\trange: Range; commentingRangesInfo:\n\t\tCommentingRanges;\n\t}>());\n\treadonly onDidChangeActiveCommentingRange: Event<{ range: Range; commentingRangesInfo: CommentingRanges }> = this._onDidChangeActiveCommentingRange.event;\n\n\tprivate _commentControls = new Map<string, ICommentController>();\n\tprivate _commentMenus = new Map<string, CommentMenus>();\n\tprivate _isCommentingEnabled: boolean = true;\n\tprivate _workspaceHasCommenting: IContextKey<boolean>;\n\n\tprivate _continueOnComments = new Map<string, PendingCommentThread[]>(); // uniqueOwner -> PendingCommentThread[]\n\tprivate _continueOnCommentProviders = new Set<IContinueOnCommentProvider>();\n\n\tprivate readonly _commentsModel: CommentsModel = this._register(new CommentsModel());\n\tpublic readonly commentsModel: ICommentsModel = this._commentsModel;\n\n\tprivate _commentingRangeResources = new Set<string>(); // URIs\n\tprivate _commentingRangeResourceHintSchemes = new Set<string>(); // schemes\n\n\tconstructor(\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tsuper();\n\t\tthis._handleConfiguration();\n\t\tthis._handleZenMode();\n\t\tthis._workspaceHasCommenting = CommentContextKeys.WorkspaceHasCommenting.bindTo(contextKeyService);\n\t\tconst storageListener = this._register(new DisposableStore());\n\n\t\tconst storageEvent = Event.debounce(this.storageService.onDidChangeValue(StorageScope.WORKSPACE, CONTINUE_ON_COMMENTS, storageListener), (last, event) => last?.external ? last : event, 500);\n\t\tstorageListener.add(storageEvent(v => {\n\t\t\tif (!v.external) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst commentsToRestore: PendingCommentThread[] | undefined = this.storageService.getObject(CONTINUE_ON_COMMENTS, StorageScope.WORKSPACE);\n\t\t\tif (!commentsToRestore) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.logService.debug(`Comments: URIs of continue on comments from storage ${commentsToRestore.map(thread => thread.uri.toString()).join(', ')}.`);\n\t\t\tconst changedOwners = this._addContinueOnComments(commentsToRestore, this._continueOnComments);\n\t\t\tfor (const uniqueOwner of changedOwners) {\n\t\t\t\tconst control = this._commentControls.get(uniqueOwner);\n\t\t\t\tif (!control) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst evt: ICommentThreadChangedEvent = {\n\t\t\t\t\tuniqueOwner: uniqueOwner,\n\t\t\t\t\towner: control.owner,\n\t\t\t\t\townerLabel: control.label,\n\t\t\t\t\tpending: this._continueOnComments.get(uniqueOwner) || [],\n\t\t\t\t\tadded: [],\n\t\t\t\t\tremoved: [],\n\t\t\t\t\tchanged: []\n\t\t\t\t};\n\t\t\t\tthis.updateModelThreads(evt);\n\t\t\t}\n\t\t}));\n\t\tthis._register(storageService.onWillSaveState(() => {\n\t\t\tconst map: Map<string, PendingCommentThread[]> = new Map();\n\t\t\tfor (const provider of this._continueOnCommentProviders) {\n\t\t\t\tconst pendingComments = provider.provideContinueOnComments();\n\t\t\t\tthis._addContinueOnComments(pendingComments, map);\n\t\t\t}\n\t\t\tthis._saveContinueOnComments(map);\n\t\t}));\n\n\t\tthis._register(this.modelService.onModelAdded(model => {\n\t\t\t// Allows comment providers to cause their commenting ranges to be prefetched by opening text documents in the background.\n\t\t\tif (!this._commentingRangeResources.has(model.uri.toString())) {\n\t\t\t\tthis.getDocumentComments(model.uri);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _updateResourcesWithCommentingRanges(resource: URI, commentInfos: (ICommentInfo | null)[]) {\n\t\tfor (const comments of commentInfos) {\n\t\t\tif (comments && (comments.commentingRanges.ranges.length > 0 || comments.threads.length > 0)) {\n\t\t\t\tthis._commentingRangeResources.add(resource.toString());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handleConfiguration() {\n\t\tthis._isCommentingEnabled = this._defaultCommentingEnablement;\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('comments.visible')) {\n\t\t\t\tthis.enableCommenting(this._defaultCommentingEnablement);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _handleZenMode() {\n\t\tlet preZenModeValue: boolean = this._isCommentingEnabled;\n\t\tthis._register(this.layoutService.onDidChangeZenMode(e => {\n\t\t\tif (e) {\n\t\t\t\tpreZenModeValue = this._isCommentingEnabled;\n\t\t\t\tthis.enableCommenting(false);\n\t\t\t} else {\n\t\t\t\tthis.enableCommenting(preZenModeValue);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate get _defaultCommentingEnablement(): boolean {\n\t\treturn !!this.configurationService.getValue<ICommentsConfiguration | undefined>(COMMENTS_SECTION)?.visible;\n\t}\n\n\tget isCommentingEnabled(): boolean {\n\t\treturn this._isCommentingEnabled;\n\t}\n\n\tenableCommenting(enable: boolean): void {\n\t\tif (enable !== this._isCommentingEnabled) {\n\t\t\tthis._isCommentingEnabled = enable;\n\t\t\tthis._onDidChangeCommentingEnabled.fire(enable);\n\t\t}\n\t}\n\n\t/**\n\t * The current comment thread is the thread that has focus or is being hovered.\n\t * @param commentThread\n\t */\n\tsetCurrentCommentThread(commentThread: CommentThread | undefined) {\n\t\tthis._onDidChangeCurrentCommentThread.fire(commentThread);\n\t}\n\n\t/**\n\t * The active comment thread is the the thread that is currently being edited.\n\t * @param commentThread\n\t */\n\tsetActiveEditingCommentThread(commentThread: CommentThread | null) {\n\t\tthis._onDidChangeActiveEditingCommentThread.fire(commentThread);\n\t}\n\n\tprivate _lastActiveCommentController: ICommentController | undefined;\n\tasync setActiveCommentAndThread(uniqueOwner: string, commentInfo: { thread: CommentThread<IRange>; comment?: Comment } | undefined) {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (commentController !== this._lastActiveCommentController) {\n\t\t\tawait this._lastActiveCommentController?.setActiveCommentAndThread(undefined);\n\t\t}\n\t\tthis._lastActiveCommentController = commentController;\n\t\treturn commentController.setActiveCommentAndThread(commentInfo);\n\t}\n\n\tsetDocumentComments(resource: URI, commentInfos: ICommentInfo[]): void {\n\t\tthis._onDidSetResourceCommentInfos.fire({ resource, commentInfos });\n\t}\n\n\tprivate setModelThreads(ownerId: string, owner: string, ownerLabel: string, commentThreads: CommentThread<IRange>[]) {\n\t\tthis._commentsModel.setCommentThreads(ownerId, owner, ownerLabel, commentThreads);\n\t\tthis._onDidSetAllCommentThreads.fire({ ownerId, ownerLabel, commentThreads });\n\t}\n\n\tprivate updateModelThreads(event: ICommentThreadChangedEvent) {\n\t\tthis._commentsModel.updateCommentThreads(event);\n\t\tthis._onDidUpdateCommentThreads.fire(event);\n\t}\n\n\tsetWorkspaceComments(uniqueOwner: string, commentsByResource: CommentThread[]): void {\n\n\t\tif (commentsByResource.length) {\n\t\t\tthis._workspaceHasCommenting.set(true);\n\t\t}\n\t\tconst control = this._commentControls.get(uniqueOwner);\n\t\tif (control) {\n\t\t\tthis.setModelThreads(uniqueOwner, control.owner, control.label, commentsByResource);\n\t\t}\n\t}\n\n\tremoveWorkspaceComments(uniqueOwner: string): void {\n\t\tconst control = this._commentControls.get(uniqueOwner);\n\t\tif (control) {\n\t\t\tthis.setModelThreads(uniqueOwner, control.owner, control.label, []);\n\t\t}\n\t}\n\n\tregisterCommentController(uniqueOwner: string, commentControl: ICommentController): void {\n\t\tthis._commentControls.set(uniqueOwner, commentControl);\n\t\tthis._onDidSetDataProvider.fire();\n\t}\n\n\tunregisterCommentController(uniqueOwner?: string): void {\n\t\tif (uniqueOwner) {\n\t\t\tthis._commentControls.delete(uniqueOwner);\n\t\t} else {\n\t\t\tthis._commentControls.clear();\n\t\t}\n\t\tthis._commentsModel.deleteCommentsByOwner(uniqueOwner);\n\t\tthis._onDidDeleteDataProvider.fire(uniqueOwner);\n\t}\n\n\tgetCommentController(uniqueOwner: string): ICommentController | undefined {\n\t\treturn this._commentControls.get(uniqueOwner);\n\t}\n\n\tasync createCommentThreadTemplate(uniqueOwner: string, resource: URI, range: Range | undefined, editorId?: string): Promise<void> {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn commentController.createCommentThreadTemplate(resource, range, editorId);\n\t}\n\n\tasync updateCommentThreadTemplate(uniqueOwner: string, threadHandle: number, range: Range) {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (!commentController) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait commentController.updateCommentThreadTemplate(threadHandle, range);\n\t}\n\n\tdisposeCommentThread(uniqueOwner: string, threadId: string) {\n\t\tconst controller = this.getCommentController(uniqueOwner);\n\t\tcontroller?.deleteCommentThreadMain(threadId);\n\t}\n\n\tgetCommentMenus(uniqueOwner: string): CommentMenus {\n\t\tif (this._commentMenus.get(uniqueOwner)) {\n\t\t\treturn this._commentMenus.get(uniqueOwner)!;\n\t\t}\n\n\t\tconst menu = this.instantiationService.createInstance(CommentMenus);\n\t\tthis._commentMenus.set(uniqueOwner, menu);\n\t\treturn menu;\n\t}\n\n\tupdateComments(ownerId: string, event: CommentThreadChangedEvent<IRange>): void {\n\t\tconst control = this._commentControls.get(ownerId);\n\t\tif (control) {\n\t\t\tconst evt: ICommentThreadChangedEvent = Object.assign({}, event, { uniqueOwner: ownerId, ownerLabel: control.label, owner: control.owner });\n\t\t\tthis.updateModelThreads(evt);\n\t\t}\n\t}\n\n\tupdateNotebookComments(ownerId: string, event: CommentThreadChangedEvent<ICellRange>): void {\n\t\tconst evt: INotebookCommentThreadChangedEvent = Object.assign({}, event, { uniqueOwner: ownerId });\n\t\tthis._onDidUpdateNotebookCommentThreads.fire(evt);\n\t}\n\n\tupdateCommentingRanges(ownerId: string, resourceHints?: CommentingRangeResourceHint) {\n\t\tif (resourceHints?.schemes && resourceHints.schemes.length > 0) {\n\t\t\tfor (const scheme of resourceHints.schemes) {\n\t\t\t\tthis._commentingRangeResourceHintSchemes.add(scheme);\n\t\t\t}\n\t\t}\n\t\tthis._workspaceHasCommenting.set(true);\n\t\tthis._onDidUpdateCommentingRanges.fire({ uniqueOwner: ownerId });\n\t}\n\n\tasync toggleReaction(uniqueOwner: string, resource: URI, thread: CommentThread, comment: Comment, reaction: CommentReaction): Promise<void> {\n\t\tconst commentController = this._commentControls.get(uniqueOwner);\n\n\t\tif (commentController) {\n\t\t\treturn commentController.toggleReaction(resource, thread, comment, reaction, CancellationToken.None);\n\t\t} else {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t}\n\n\thasReactionHandler(uniqueOwner: string): boolean {\n\t\tconst commentProvider = this._commentControls.get(uniqueOwner);\n\n\t\tif (commentProvider) {\n\t\t\treturn !!commentProvider.features.reactionHandler;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync getDocumentComments(resource: URI): Promise<(ICommentInfo | null)[]> {\n\t\tconst commentControlResult: Promise<ICommentInfo | null>[] = [];\n\n\t\tfor (const control of this._commentControls.values()) {\n\t\t\tcommentControlResult.push(control.getDocumentComments(resource, CancellationToken.None)\n\t\t\t\t.then(documentComments => {\n\t\t\t\t\t// Check that there aren't any continue on comments in the provided comments\n\t\t\t\t\t// This can happen because continue on comments are stored separately from local un-submitted comments.\n\t\t\t\t\tfor (const documentCommentThread of documentComments.threads) {\n\t\t\t\t\t\tif (documentCommentThread.comments?.length === 0 && documentCommentThread.range) {\n\t\t\t\t\t\t\tthis.removeContinueOnComment({ range: documentCommentThread.range, uri: resource, uniqueOwner: documentComments.uniqueOwner });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst pendingComments = this._continueOnComments.get(documentComments.uniqueOwner);\n\t\t\t\t\tdocumentComments.pendingCommentThreads = pendingComments?.filter(pendingComment => pendingComment.uri.toString() === resource.toString());\n\t\t\t\t\treturn documentComments;\n\t\t\t\t})\n\t\t\t\t.catch(_ => {\n\t\t\t\t\treturn null;\n\t\t\t\t}));\n\t\t}\n\n\t\tconst commentInfos = await Promise.all(commentControlResult);\n\t\tthis._updateResourcesWithCommentingRanges(resource, commentInfos);\n\t\treturn commentInfos;\n\t}\n\n\tasync getNotebookComments(resource: URI): Promise<(INotebookCommentInfo | null)[]> {\n\t\tconst commentControlResult: Promise<INotebookCommentInfo | null>[] = [];\n\n\t\tthis._commentControls.forEach(control => {\n\t\t\tcommentControlResult.push(control.getNotebookComments(resource, CancellationToken.None)\n\t\t\t\t.catch(_ => {\n\t\t\t\t\treturn null;\n\t\t\t\t}));\n\t\t});\n\n\t\treturn Promise.all(commentControlResult);\n\t}\n\n\tregisterContinueOnCommentProvider(provider: IContinueOnCommentProvider): IDisposable {\n\t\tthis._continueOnCommentProviders.add(provider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._continueOnCommentProviders.delete(provider);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _saveContinueOnComments(map: Map<string, PendingCommentThread[]>) {\n\t\tconst commentsToSave: PendingCommentThread[] = [];\n\t\tfor (const pendingComments of map.values()) {\n\t\t\tcommentsToSave.push(...pendingComments);\n\t\t}\n\t\tthis.logService.debug(`Comments: URIs of continue on comments to add to storage ${commentsToSave.map(thread => thread.uri.toString()).join(', ')}.`);\n\t\tthis.storageService.store(CONTINUE_ON_COMMENTS, commentsToSave, StorageScope.WORKSPACE, StorageTarget.USER);\n\t}\n\n\tremoveContinueOnComment(pendingComment: { range: IRange; uri: URI; uniqueOwner: string; isReply?: boolean }): PendingCommentThread | undefined {\n\t\tconst pendingComments = this._continueOnComments.get(pendingComment.uniqueOwner);\n\t\tif (pendingComments) {\n\t\t\tconst commentIndex = pendingComments.findIndex(comment => comment.uri.toString() === pendingComment.uri.toString() && Range.equalsRange(comment.range, pendingComment.range) && (pendingComment.isReply === undefined || comment.isReply === pendingComment.isReply));\n\t\t\tif (commentIndex > -1) {\n\t\t\t\treturn pendingComments.splice(commentIndex, 1)[0];\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _addContinueOnComments(pendingComments: PendingCommentThread[], map: Map<string, PendingCommentThread[]>): Set<string> {\n\t\tconst changedOwners = new Set<string>();\n\t\tfor (const pendingComment of pendingComments) {\n\t\t\tif (!map.has(pendingComment.uniqueOwner)) {\n\t\t\t\tmap.set(pendingComment.uniqueOwner, [pendingComment]);\n\t\t\t\tchangedOwners.add(pendingComment.uniqueOwner);\n\t\t\t} else {\n\t\t\t\tconst commentsForOwner = map.get(pendingComment.uniqueOwner)!;\n\t\t\t\tif (commentsForOwner.every(comment => (comment.uri.toString() !== pendingComment.uri.toString()) || !Range.equalsRange(comment.range, pendingComment.range))) {\n\t\t\t\t\tcommentsForOwner.push(pendingComment);\n\t\t\t\t\tchangedOwners.add(pendingComment.uniqueOwner);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn changedOwners;\n\t}\n\n\tresourceHasCommentingRanges(resource: URI): boolean {\n\t\treturn this._commentingRangeResourceHintSchemes.has(resource.scheme) || this._commentingRangeResources.has(resource.toString());\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
