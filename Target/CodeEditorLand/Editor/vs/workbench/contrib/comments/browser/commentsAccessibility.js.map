{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentsAccessibility.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ctxCommentEditorFocused } from './simpleCommentEditor.js';\nimport { CommentContextKeys } from '../common/commentContextKeys.js';\nimport * as nls from '../../../../nls.js';\nimport { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { CommentCommandId } from '../common/commentCommandIds.js';\nimport { ToggleTabFocusModeAction } from '../../../../editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js';\nimport { IAccessibleViewContentProvider, AccessibleViewProviderId, IAccessibleViewOptions, AccessibleViewType } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { IAccessibleViewImplentation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\n\n\nexport namespace CommentAccessibilityHelpNLS {\n\texport const intro = nls.localize('intro', \"The editor contains commentable range(s). Some useful commands include:\");\n\texport const tabFocus = nls.localize('introWidget', \"This widget contains a text area, for composition of new comments, and actions, that can be tabbed to once tab moves focus mode has been enabled with the command Toggle Tab Key Moves Focus{0}.\", `<keybinding:${ToggleTabFocusModeAction.ID}>`);\n\texport const commentCommands = nls.localize('commentCommands', \"Some useful comment commands include:\");\n\texport const escape = nls.localize('escape', \"- Dismiss Comment (Escape)\");\n\texport const nextRange = nls.localize('next', \"- Go to Next Commenting Range{0}.\", `<keybinding:${CommentCommandId.NextRange}>`);\n\texport const previousRange = nls.localize('previous', \"- Go to Previous Commenting Range{0}.\", `<keybinding:${CommentCommandId.PreviousRange}>`);\n\texport const nextCommentThread = nls.localize('nextCommentThreadKb', \"- Go to Next Comment Thread{0}.\", `<keybinding:${CommentCommandId.NextThread}>`);\n\texport const previousCommentThread = nls.localize('previousCommentThreadKb', \"- Go to Previous Comment Thread{0}.\", `<keybinding:${CommentCommandId.PreviousThread}>`);\n\texport const addComment = nls.localize('addCommentNoKb', \"- Add Comment on Current Selection{0}.\", `<keybinding:${CommentCommandId.Add}>`);\n\texport const submitComment = nls.localize('submitComment', \"- Submit Comment{0}.\", `<keybinding:${CommentCommandId.Submit}>`);\n}\n\nexport class CommentsAccessibilityHelpProvider extends Disposable implements IAccessibleViewContentProvider {\n\tid = AccessibleViewProviderId.Comments;\n\tverbositySettingKey: AccessibilityVerbositySettingId = AccessibilityVerbositySettingId.Comments;\n\toptions: IAccessibleViewOptions = { type: AccessibleViewType.Help };\n\tprivate _element: HTMLElement | undefined;\n\tprovideContent(): string {\n\t\treturn [CommentAccessibilityHelpNLS.tabFocus, CommentAccessibilityHelpNLS.commentCommands, CommentAccessibilityHelpNLS.escape, CommentAccessibilityHelpNLS.addComment, CommentAccessibilityHelpNLS.submitComment, CommentAccessibilityHelpNLS.nextRange, CommentAccessibilityHelpNLS.previousRange].join('\\n');\n\t}\n\tonClose(): void {\n\t\tthis._element?.focus();\n\t}\n}\n\nexport class CommentsAccessibilityHelp implements IAccessibleViewImplentation {\n\treadonly priority = 110;\n\treadonly name = 'comments';\n\treadonly type = AccessibleViewType.Help;\n\treadonly when = ContextKeyExpr.or(ctxCommentEditorFocused, CommentContextKeys.commentFocused);\n\tgetProvider(accessor: ServicesAccessor) {\n\t\treturn accessor.get(IInstantiationService).createInstance(CommentsAccessibilityHelpProvider);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB,wBAAwB;AACxD,SAAS,+BAA+B;AACxC,SAAS,0BAA0B;AACnC,YAAY,SAAS;AACrB,SAAS,uCAAuC;AAChD,SAAS,wBAAwB;AACjC,SAAS,gCAAgC;AACzC,SAAS,gCAAgC,0BAA0B,wBAAwB,0BAA0B;AACrH,SAAS,mCAAmC;AAC5C,SAAS,kBAAkB;AAGpB,IAAU;AAAA,CAAV,CAAUA,iCAAV;AACC,EAAMA,6BAAA,QAAQ,IAAI,SAAS,SAAS,yEAAyE;AAC7G,EAAMA,6BAAA,WAAW,IAAI,SAAS,eAAe,oMAAoM,eAAe,yBAAyB,EAAE,GAAG;AAC9R,EAAMA,6BAAA,kBAAkB,IAAI,SAAS,mBAAmB,uCAAuC;AAC/F,EAAMA,6BAAA,SAAS,IAAI,SAAS,UAAU,4BAA4B;AAClE,EAAMA,6BAAA,YAAY,IAAI,SAAS,QAAQ,qCAAqC,eAAe,iBAAiB,SAAS,GAAG;AACxH,EAAMA,6BAAA,gBAAgB,IAAI,SAAS,YAAY,yCAAyC,eAAe,iBAAiB,aAAa,GAAG;AACxI,EAAMA,6BAAA,oBAAoB,IAAI,SAAS,uBAAuB,mCAAmC,eAAe,iBAAiB,UAAU,GAAG;AAC9I,EAAMA,6BAAA,wBAAwB,IAAI,SAAS,2BAA2B,uCAAuC,eAAe,iBAAiB,cAAc,GAAG;AAC9J,EAAMA,6BAAA,aAAa,IAAI,SAAS,kBAAkB,0CAA0C,eAAe,iBAAiB,GAAG,GAAG;AAClI,EAAMA,6BAAA,gBAAgB,IAAI,SAAS,iBAAiB,wBAAwB,eAAe,iBAAiB,MAAM,GAAG;AAAA,GAV5G;AAaV,MAAM,0CAA0C,WAAqD;AAAA,EA/B5G,OA+B4G;AAAA;AAAA;AAAA,EAC3G,KAAK,yBAAyB;AAAA,EAC9B,sBAAuD,gCAAgC;AAAA,EACvF,UAAkC,EAAE,MAAM,mBAAmB,KAAK;AAAA,EAC1D;AAAA,EACR,iBAAyB;AACxB,WAAO,CAAC,4BAA4B,UAAU,4BAA4B,iBAAiB,4BAA4B,QAAQ,4BAA4B,YAAY,4BAA4B,eAAe,4BAA4B,WAAW,4BAA4B,aAAa,EAAE,KAAK,IAAI;AAAA,EAC9S;AAAA,EACA,UAAgB;AACf,SAAK,UAAU,MAAM;AAAA,EACtB;AACD;AAEO,MAAM,0BAAiE;AAAA,EA5C9E,OA4C8E;AAAA;AAAA;AAAA,EACpE,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,mBAAmB;AAAA,EAC1B,OAAO,eAAe,GAAG,yBAAyB,mBAAmB,cAAc;AAAA,EAC5F,YAAY,UAA4B;AACvC,WAAO,SAAS,IAAI,qBAAqB,EAAE,eAAe,iCAAiC;AAAA,EAC5F;AACD;",
  "names": ["CommentAccessibilityHelpNLS"]
}
