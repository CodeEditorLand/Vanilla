{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentsAccessibleView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { MarshalledId } from \"../../../../base/common/marshallingIds.js\";\nimport type { ServicesAccessor } from \"../../../../editor/browser/editorExtensions.js\";\nimport {\n\tAccessibleViewProviderId,\n\tAccessibleViewType,\n\ttype IAccessibleViewContentProvider,\n} from \"../../../../platform/accessibility/browser/accessibleView.js\";\nimport type { IAccessibleViewImplentation } from \"../../../../platform/accessibility/browser/accessibleViewRegistry.js\";\nimport { IMenuService } from \"../../../../platform/actions/common/actions.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { AccessibilityVerbositySettingId } from \"../../accessibility/browser/accessibilityConfiguration.js\";\nimport { COMMENTS_VIEW_ID, CommentsMenus } from \"./commentsTreeViewer.js\";\nimport {\n\tCONTEXT_KEY_COMMENT_FOCUSED,\n\ttype CommentsPanel,\n} from \"./commentsView.js\";\n\nexport class CommentsAccessibleView\n\textends Disposable\n\timplements IAccessibleViewImplentation\n{\n\treadonly priority = 90;\n\treadonly name = \"comment\";\n\treadonly when = CONTEXT_KEY_COMMENT_FOCUSED;\n\treadonly type = AccessibleViewType.View;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst menuService = accessor.get(IMenuService);\n\t\tconst commentsView =\n\t\t\tviewsService.getActiveViewWithId<CommentsPanel>(COMMENTS_VIEW_ID);\n\t\tconst focusedCommentNode = commentsView?.focusedCommentNode;\n\t\tif (!commentsView || !focusedCommentNode) {\n\t\t\treturn;\n\t\t}\n\t\tconst menus = this._register(new CommentsMenus(menuService));\n\t\tmenus.setContextKeyService(contextKeyService);\n\n\t\treturn new CommentsAccessibleContentProvider(\n\t\t\tcommentsView,\n\t\t\tfocusedCommentNode,\n\t\t\tmenus,\n\t\t);\n\t}\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass CommentsAccessibleContentProvider\n\textends Disposable\n\timplements IAccessibleViewContentProvider\n{\n\tconstructor(\n\t\tprivate readonly _commentsView: CommentsPanel,\n\t\tprivate readonly _focusedCommentNode: any,\n\t\tprivate readonly _menus: CommentsMenus,\n\t) {\n\t\tsuper();\n\t}\n\treadonly id = AccessibleViewProviderId.Comments;\n\treadonly verbositySettingKey = AccessibilityVerbositySettingId.Comments;\n\treadonly options = { type: AccessibleViewType.View };\n\tpublic actions = [\n\t\t...this._menus.getResourceContextActions(this._focusedCommentNode),\n\t]\n\t\t.filter((i) => i.enabled)\n\t\t.map((action) => {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._commentsView.focus();\n\t\t\t\t\taction.run({\n\t\t\t\t\t\tthread: this._focusedCommentNode.thread,\n\t\t\t\t\t\t$mid: MarshalledId.CommentThread,\n\t\t\t\t\t\tcommentControlHandle:\n\t\t\t\t\t\t\tthis._focusedCommentNode.controllerHandle,\n\t\t\t\t\t\tcommentThreadHandle:\n\t\t\t\t\t\t\tthis._focusedCommentNode.threadHandle,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\tprovideContent(): string {\n\t\tconst commentNode = this._commentsView.focusedCommentNode;\n\t\tconst content = this._commentsView.focusedCommentInfo?.toString();\n\t\tif (!commentNode || !content) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Comment tree is focused but no comment is selected\",\n\t\t\t);\n\t\t}\n\t\treturn content;\n\t}\n\tonClose(): void {\n\t\tthis._commentsView.focus();\n\t}\n\tprovideNextContent(): string | undefined {\n\t\tthis._commentsView.focusNextNode();\n\t\treturn this.provideContent();\n\t}\n\tprovidePreviousContent(): string | undefined {\n\t\tthis._commentsView.focusPreviousNode();\n\t\treturn this.provideContent();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;AAE7B;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAEP,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AACnC,SAAS,qBAAqB;AAC9B,SAAS,uCAAuC;AAChD,SAAS,kBAAkB,qBAAqB;AAChD;AAAA,EACC;AAAA,OAEM;AAEA,MAAM,+BACJ,WAET;AAAA,EA3BA,OA2BA;AAAA;AAAA;AAAA,EACU,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO,mBAAmB;AAAA,EACnC,YAAY,UAA4B;AACvC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,UAAM,cAAc,SAAS,IAAI,YAAY;AAC7C,UAAM,eACL,aAAa,oBAAmC,gBAAgB;AACjE,UAAM,qBAAqB,cAAc;AACzC,QAAI,CAAC,gBAAgB,CAAC,oBAAoB;AACzC;AAAA,IACD;AACA,UAAM,QAAQ,KAAK,UAAU,IAAI,cAAc,WAAW,CAAC;AAC3D,UAAM,qBAAqB,iBAAiB;AAE5C,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EACA,cAAc;AACb,UAAM;AAAA,EACP;AACD;AAEA,MAAM,0CACG,WAET;AAAA,EACC,YACkB,eACA,qBACA,QAChB;AACD,UAAM;AAJW;AACA;AACA;AAAA,EAGlB;AAAA,EAlED,OA2DA;AAAA;AAAA;AAAA,EAQU,KAAK,yBAAyB;AAAA,EAC9B,sBAAsB,gCAAgC;AAAA,EACtD,UAAU,EAAE,MAAM,mBAAmB,KAAK;AAAA,EAC5C,UAAU;AAAA,IAChB,GAAG,KAAK,OAAO,0BAA0B,KAAK,mBAAmB;AAAA,EAClE,EACE,OAAO,CAAC,MAAM,EAAE,OAAO,EACvB,IAAI,CAAC,WAAW;AAChB,WAAO;AAAA,MACN,GAAG;AAAA,MACH,KAAK,6BAAM;AACV,aAAK,cAAc,MAAM;AACzB,eAAO,IAAI;AAAA,UACV,QAAQ,KAAK,oBAAoB;AAAA,UACjC,MAAM,aAAa;AAAA,UACnB,sBACC,KAAK,oBAAoB;AAAA,UAC1B,qBACC,KAAK,oBAAoB;AAAA,QAC3B,CAAC;AAAA,MACF,GAVK;AAAA,IAWN;AAAA,EACD,CAAC;AAAA,EACF,iBAAyB;AACxB,UAAM,cAAc,KAAK,cAAc;AACvC,UAAM,UAAU,KAAK,cAAc,oBAAoB,SAAS;AAChE,QAAI,CAAC,eAAe,CAAC,SAAS;AAC7B,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,UAAgB;AACf,SAAK,cAAc,MAAM;AAAA,EAC1B;AAAA,EACA,qBAAyC;AACxC,SAAK,cAAc,cAAc;AACjC,WAAO,KAAK,eAAe;AAAA,EAC5B;AAAA,EACA,yBAA6C;AAC5C,SAAK,cAAc,kBAAkB;AACrC,WAAO,KAAK,eAAe;AAAA,EAC5B;AACD;",
  "names": []
}
