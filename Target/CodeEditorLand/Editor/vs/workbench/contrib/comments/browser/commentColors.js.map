{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from '../../../../base/common/color.js';\nimport * as languages from '../../../../editor/common/languages.js';\nimport { peekViewTitleBackground } from '../../../../editor/contrib/peekView/browser/peekView.js';\nimport * as nls from '../../../../nls.js';\nimport { contrastBorder, disabledForeground, listFocusOutline, registerColor, transparent } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IColorTheme } from '../../../../platform/theme/common/themeService.js';\n\nconst resolvedCommentViewIcon = registerColor('commentsView.resolvedIcon', { dark: disabledForeground, light: disabledForeground, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('resolvedCommentIcon', 'Icon color for resolved comments.'));\nconst unresolvedCommentViewIcon = registerColor('commentsView.unresolvedIcon', { dark: listFocusOutline, light: listFocusOutline, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('unresolvedCommentIcon', 'Icon color for unresolved comments.'));\n\nregisterColor('editorCommentsWidget.replyInputBackground', peekViewTitleBackground, nls.localize('commentReplyInputBackground', 'Background color for comment reply input box.'));\nconst resolvedCommentBorder = registerColor('editorCommentsWidget.resolvedBorder', { dark: resolvedCommentViewIcon, light: resolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('resolvedCommentBorder', 'Color of borders and arrow for resolved comments.'));\nconst unresolvedCommentBorder = registerColor('editorCommentsWidget.unresolvedBorder', { dark: unresolvedCommentViewIcon, light: unresolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('unresolvedCommentBorder', 'Color of borders and arrow for unresolved comments.'));\nexport const commentThreadRangeBackground = registerColor('editorCommentsWidget.rangeBackground', transparent(unresolvedCommentBorder, .1), nls.localize('commentThreadRangeBackground', 'Color of background for comment ranges.'));\nexport const commentThreadRangeActiveBackground = registerColor('editorCommentsWidget.rangeActiveBackground', transparent(unresolvedCommentBorder, .1), nls.localize('commentThreadActiveRangeBackground', 'Color of background for currently selected or hovered comment range.'));\n\nconst commentThreadStateBorderColors = new Map([\n\t[languages.CommentThreadState.Unresolved, unresolvedCommentBorder],\n\t[languages.CommentThreadState.Resolved, resolvedCommentBorder],\n]);\n\nconst commentThreadStateIconColors = new Map([\n\t[languages.CommentThreadState.Unresolved, unresolvedCommentViewIcon],\n\t[languages.CommentThreadState.Resolved, resolvedCommentViewIcon],\n]);\n\nexport const commentThreadStateColorVar = '--comment-thread-state-color';\nexport const commentViewThreadStateColorVar = '--comment-view-thread-state-color';\nexport const commentThreadStateBackgroundColorVar = '--comment-thread-state-background-color';\n\nfunction getCommentThreadStateColor(state: languages.CommentThreadState | undefined, theme: IColorTheme, map: Map<languages.CommentThreadState, string>): Color | undefined {\n\tconst colorId = (state !== undefined) ? map.get(state) : undefined;\n\treturn (colorId !== undefined) ? theme.getColor(colorId) : undefined;\n}\n\nexport function getCommentThreadStateBorderColor(state: languages.CommentThreadState | undefined, theme: IColorTheme): Color | undefined {\n\treturn getCommentThreadStateColor(state, theme, commentThreadStateBorderColors);\n}\n\nexport function getCommentThreadStateIconColor(state: languages.CommentThreadState | undefined, theme: IColorTheme): Color | undefined {\n\treturn getCommentThreadStateColor(state, theme, commentThreadStateIconColors);\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,YAAY,eAAe;AAC3B,SAAS,+BAA+B;AACxC,YAAY,SAAS;AACrB,SAAS,gBAAgB,oBAAoB,kBAAkB,eAAe,mBAAmB;AACjG,SAAS,mBAAmB;AAE5B,MAAM,0BAA0B,cAAc,6BAA6B,EAAE,MAAM,oBAAoB,OAAO,oBAAoB,QAAQ,gBAAgB,SAAS,eAAe,GAAG,IAAI,SAAS,uBAAuB,mCAAmC,CAAC;AAC7P,MAAM,4BAA4B,cAAc,+BAA+B,EAAE,MAAM,kBAAkB,OAAO,kBAAkB,QAAQ,gBAAgB,SAAS,eAAe,GAAG,IAAI,SAAS,yBAAyB,qCAAqC,CAAC;AAEjQ,cAAc,6CAA6C,yBAAyB,IAAI,SAAS,+BAA+B,+CAA+C,CAAC;AAChL,MAAM,wBAAwB,cAAc,uCAAuC,EAAE,MAAM,yBAAyB,OAAO,yBAAyB,QAAQ,gBAAgB,SAAS,eAAe,GAAG,IAAI,SAAS,yBAAyB,mDAAmD,CAAC;AACjS,MAAM,0BAA0B,cAAc,yCAAyC,EAAE,MAAM,2BAA2B,OAAO,2BAA2B,QAAQ,gBAAgB,SAAS,eAAe,GAAG,IAAI,SAAS,2BAA2B,qDAAqD,CAAC;AACtS,MAAM,+BAA+B,cAAc,wCAAwC,YAAY,yBAAyB,GAAE,GAAG,IAAI,SAAS,gCAAgC,yCAAyC,CAAC;AAC5N,MAAM,qCAAqC,cAAc,8CAA8C,YAAY,yBAAyB,GAAE,GAAG,IAAI,SAAS,sCAAsC,sEAAsE,CAAC;AAElR,MAAM,iCAAiC,oBAAI,IAAI;AAAA,EAC9C,CAAC,UAAU,mBAAmB,YAAY,uBAAuB;AAAA,EACjE,CAAC,UAAU,mBAAmB,UAAU,qBAAqB;AAC9D,CAAC;AAED,MAAM,+BAA+B,oBAAI,IAAI;AAAA,EAC5C,CAAC,UAAU,mBAAmB,YAAY,yBAAyB;AAAA,EACnE,CAAC,UAAU,mBAAmB,UAAU,uBAAuB;AAChE,CAAC;AAEM,MAAM,6BAA6B;AACnC,MAAM,iCAAiC;AACvC,MAAM,uCAAuC;AAEpD,SAAS,2BAA2B,OAAiD,OAAoB,KAAmE;AAC3K,QAAM,UAAW,UAAU,SAAa,IAAI,IAAI,KAAK,IAAI;AACzD,SAAQ,YAAY,SAAa,MAAM,SAAS,OAAO,IAAI;AAC5D;AAHS;AAKF,SAAS,iCAAiC,OAAiD,OAAuC;AACxI,SAAO,2BAA2B,OAAO,OAAO,8BAA8B;AAC/E;AAFgB;AAIT,SAAS,+BAA+B,OAAiD,OAAuC;AACtI,SAAO,2BAA2B,OAAO,OAAO,4BAA4B;AAC7E;AAFgB;",
  "names": []
}
