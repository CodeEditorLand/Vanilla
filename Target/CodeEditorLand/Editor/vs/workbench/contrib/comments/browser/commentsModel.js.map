{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentsModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { CommentThread } from '../../../../editor/common/languages.js';\nimport { localize } from '../../../../nls.js';\nimport { ResourceWithCommentThreads, ICommentThreadChangedEvent } from '../common/commentModel.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isMarkdownString } from '../../../../base/common/htmlContent.js';\n\nexport function threadHasMeaningfulComments(thread: CommentThread): boolean {\n\treturn !!thread.comments && !!thread.comments.length && thread.comments.some(comment => isMarkdownString(comment.body) ? comment.body.value.length > 0 : comment.body.length > 0);\n\n}\n\nexport interface ICommentsModel {\n\thasCommentThreads(): boolean;\n\tgetMessage(): string;\n\treadonly resourceCommentThreads: ResourceWithCommentThreads[];\n\treadonly commentThreadsMap: Map<string, { resourceWithCommentThreads: ResourceWithCommentThreads[]; ownerLabel?: string }>;\n}\n\nexport class CommentsModel extends Disposable implements ICommentsModel {\n\treadonly _serviceBrand: undefined;\n\tprivate _resourceCommentThreads: ResourceWithCommentThreads[];\n\tget resourceCommentThreads(): ResourceWithCommentThreads[] { return this._resourceCommentThreads; }\n\treadonly commentThreadsMap: Map<string, { resourceWithCommentThreads: ResourceWithCommentThreads[]; ownerLabel?: string }>;\n\n\tconstructor(\n\t) {\n\t\tsuper();\n\t\tthis._resourceCommentThreads = [];\n\t\tthis.commentThreadsMap = new Map<string, { resourceWithCommentThreads: ResourceWithCommentThreads[]; ownerLabel: string }>();\n\t}\n\n\tprivate updateResourceCommentThreads() {\n\t\tconst includeLabel = this.commentThreadsMap.size > 1;\n\t\tthis._resourceCommentThreads = [...this.commentThreadsMap.values()].map(value => {\n\t\t\treturn value.resourceWithCommentThreads.map(resource => {\n\t\t\t\tresource.ownerLabel = includeLabel ? value.ownerLabel : undefined;\n\t\t\t\treturn resource;\n\t\t\t}).flat();\n\t\t}).flat();\n\t}\n\n\tpublic setCommentThreads(uniqueOwner: string, owner: string, ownerLabel: string, commentThreads: CommentThread[]): void {\n\t\tthis.commentThreadsMap.set(uniqueOwner, { ownerLabel, resourceWithCommentThreads: this.groupByResource(uniqueOwner, owner, commentThreads) });\n\t\tthis.updateResourceCommentThreads();\n\t}\n\n\tpublic deleteCommentsByOwner(uniqueOwner?: string): void {\n\t\tif (uniqueOwner) {\n\t\t\tconst existingOwner = this.commentThreadsMap.get(uniqueOwner);\n\t\t\tthis.commentThreadsMap.set(uniqueOwner, { ownerLabel: existingOwner?.ownerLabel, resourceWithCommentThreads: [] });\n\t\t} else {\n\t\t\tthis.commentThreadsMap.clear();\n\t\t}\n\t\tthis.updateResourceCommentThreads();\n\t}\n\n\tpublic updateCommentThreads(event: ICommentThreadChangedEvent): boolean {\n\t\tconst { uniqueOwner, owner, ownerLabel, removed, changed, added } = event;\n\n\t\tconst threadsForOwner = this.commentThreadsMap.get(uniqueOwner)?.resourceWithCommentThreads || [];\n\n\t\tremoved.forEach(thread => {\n\t\t\t// Find resource that has the comment thread\n\t\t\tconst matchingResourceIndex = threadsForOwner.findIndex((resourceData) => resourceData.id === thread.resource);\n\t\t\tconst matchingResourceData = matchingResourceIndex >= 0 ? threadsForOwner[matchingResourceIndex] : undefined;\n\n\t\t\t// Find comment node on resource that is that thread and remove it\n\t\t\tconst index = matchingResourceData?.commentThreads.findIndex((commentThread) => commentThread.threadId === thread.threadId) ?? 0;\n\t\t\tif (index >= 0) {\n\t\t\t\tmatchingResourceData?.commentThreads.splice(index, 1);\n\t\t\t}\n\n\t\t\t// If the comment thread was the last thread for a resource, remove that resource from the list\n\t\t\tif (matchingResourceData?.commentThreads.length === 0) {\n\t\t\t\tthreadsForOwner.splice(matchingResourceIndex, 1);\n\t\t\t}\n\t\t});\n\n\t\tchanged.forEach(thread => {\n\t\t\t// Find resource that has the comment thread\n\t\t\tconst matchingResourceIndex = threadsForOwner.findIndex((resourceData) => resourceData.id === thread.resource);\n\t\t\tconst matchingResourceData = matchingResourceIndex >= 0 ? threadsForOwner[matchingResourceIndex] : undefined;\n\t\t\tif (!matchingResourceData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find comment node on resource that is that thread and replace it\n\t\t\tconst index = matchingResourceData.commentThreads.findIndex((commentThread) => commentThread.threadId === thread.threadId);\n\t\t\tif (index >= 0) {\n\t\t\t\tmatchingResourceData.commentThreads[index] = ResourceWithCommentThreads.createCommentNode(uniqueOwner, owner, URI.parse(matchingResourceData.id), thread);\n\t\t\t} else if (thread.comments && thread.comments.length) {\n\t\t\t\tmatchingResourceData.commentThreads.push(ResourceWithCommentThreads.createCommentNode(uniqueOwner, owner, URI.parse(matchingResourceData.id), thread));\n\t\t\t}\n\t\t});\n\n\t\tadded.forEach(thread => {\n\t\t\tconst existingResource = threadsForOwner.filter(resourceWithThreads => resourceWithThreads.resource.toString() === thread.resource);\n\t\t\tif (existingResource.length) {\n\t\t\t\tconst resource = existingResource[0];\n\t\t\t\tif (thread.comments && thread.comments.length) {\n\t\t\t\t\tresource.commentThreads.push(ResourceWithCommentThreads.createCommentNode(uniqueOwner, owner, resource.resource, thread));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthreadsForOwner.push(new ResourceWithCommentThreads(uniqueOwner, owner, URI.parse(thread.resource!), [thread]));\n\t\t\t}\n\t\t});\n\n\t\tthis.commentThreadsMap.set(uniqueOwner, { ownerLabel, resourceWithCommentThreads: threadsForOwner });\n\t\tthis.updateResourceCommentThreads();\n\n\t\treturn removed.length > 0 || changed.length > 0 || added.length > 0;\n\t}\n\n\tpublic hasCommentThreads(): boolean {\n\t\t// There's a resource with at least one thread\n\t\treturn !!this._resourceCommentThreads.length && this._resourceCommentThreads.some(resource => {\n\t\t\t// At least one of the threads in the the resource has comments\n\t\t\treturn (resource.commentThreads.length > 0) && resource.commentThreads.some(thread => {\n\t\t\t\t// At least one of the comments in the thread is not empty\n\t\t\t\treturn threadHasMeaningfulComments(thread.thread);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getMessage(): string {\n\t\tif (!this._resourceCommentThreads.length) {\n\t\t\treturn localize('noComments', \"There are no comments in this workspace yet.\");\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate groupByResource(uniqueOwner: string, owner: string, commentThreads: CommentThread[]): ResourceWithCommentThreads[] {\n\t\tconst resourceCommentThreads: ResourceWithCommentThreads[] = [];\n\t\tconst commentThreadsByResource = new Map<string, ResourceWithCommentThreads>();\n\t\tfor (const group of groupBy(commentThreads, CommentsModel._compareURIs)) {\n\t\t\tcommentThreadsByResource.set(group[0].resource!, new ResourceWithCommentThreads(uniqueOwner, owner, URI.parse(group[0].resource!), group));\n\t\t}\n\n\t\tcommentThreadsByResource.forEach((v, i, m) => {\n\t\t\tresourceCommentThreads.push(v);\n\t\t});\n\n\t\treturn resourceCommentThreads;\n\t}\n\n\tprivate static _compareURIs(a: CommentThread, b: CommentThread) {\n\t\tconst resourceA = a.resource!.toString();\n\t\tconst resourceB = b.resource!.toString();\n\t\tif (resourceA < resourceB) {\n\t\t\treturn -1;\n\t\t} else if (resourceA > resourceB) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
