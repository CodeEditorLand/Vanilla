{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/browser/commentsModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from \"../../../../base/common/arrays.js\";\nimport { isMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type { CommentThread } from \"../../../../editor/common/languages.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\ttype ICommentThreadChangedEvent,\n\tResourceWithCommentThreads,\n} from \"../common/commentModel.js\";\n\nexport function threadHasMeaningfulComments(thread: CommentThread): boolean {\n\treturn (\n\t\t!!thread.comments &&\n\t\t!!thread.comments.length &&\n\t\tthread.comments.some((comment) =>\n\t\t\tisMarkdownString(comment.body)\n\t\t\t\t? comment.body.value.length > 0\n\t\t\t\t: comment.body.length > 0,\n\t\t)\n\t);\n}\n\nexport interface ICommentsModel {\n\thasCommentThreads(): boolean;\n\tgetMessage(): string;\n\treadonly resourceCommentThreads: ResourceWithCommentThreads[];\n\treadonly commentThreadsMap: Map<\n\t\tstring,\n\t\t{\n\t\t\tresourceWithCommentThreads: ResourceWithCommentThreads[];\n\t\t\townerLabel?: string;\n\t\t}\n\t>;\n}\n\nexport class CommentsModel extends Disposable implements ICommentsModel {\n\treadonly _serviceBrand: undefined;\n\tprivate _resourceCommentThreads: ResourceWithCommentThreads[];\n\tget resourceCommentThreads(): ResourceWithCommentThreads[] {\n\t\treturn this._resourceCommentThreads;\n\t}\n\treadonly commentThreadsMap: Map<\n\t\tstring,\n\t\t{\n\t\t\tresourceWithCommentThreads: ResourceWithCommentThreads[];\n\t\t\townerLabel?: string;\n\t\t}\n\t>;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._resourceCommentThreads = [];\n\t\tthis.commentThreadsMap = new Map<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tresourceWithCommentThreads: ResourceWithCommentThreads[];\n\t\t\t\townerLabel: string;\n\t\t\t}\n\t\t>();\n\t}\n\n\tprivate updateResourceCommentThreads() {\n\t\tconst includeLabel = this.commentThreadsMap.size > 1;\n\t\tthis._resourceCommentThreads = [\n\t\t\t...this.commentThreadsMap.values(),\n\t\t].flatMap((value) => {\n\t\t\treturn value.resourceWithCommentThreads.flatMap((resource) => {\n\t\t\t\tresource.ownerLabel = includeLabel\n\t\t\t\t\t? value.ownerLabel\n\t\t\t\t\t: undefined;\n\t\t\t\treturn resource;\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic setCommentThreads(\n\t\tuniqueOwner: string,\n\t\towner: string,\n\t\townerLabel: string,\n\t\tcommentThreads: CommentThread[],\n\t): void {\n\t\tthis.commentThreadsMap.set(uniqueOwner, {\n\t\t\townerLabel,\n\t\t\tresourceWithCommentThreads: this.groupByResource(\n\t\t\t\tuniqueOwner,\n\t\t\t\towner,\n\t\t\t\tcommentThreads,\n\t\t\t),\n\t\t});\n\t\tthis.updateResourceCommentThreads();\n\t}\n\n\tpublic deleteCommentsByOwner(uniqueOwner?: string): void {\n\t\tif (uniqueOwner) {\n\t\t\tconst existingOwner = this.commentThreadsMap.get(uniqueOwner);\n\t\t\tthis.commentThreadsMap.set(uniqueOwner, {\n\t\t\t\townerLabel: existingOwner?.ownerLabel,\n\t\t\t\tresourceWithCommentThreads: [],\n\t\t\t});\n\t\t} else {\n\t\t\tthis.commentThreadsMap.clear();\n\t\t}\n\t\tthis.updateResourceCommentThreads();\n\t}\n\n\tpublic updateCommentThreads(event: ICommentThreadChangedEvent): boolean {\n\t\tconst { uniqueOwner, owner, ownerLabel, removed, changed, added } =\n\t\t\tevent;\n\n\t\tconst threadsForOwner =\n\t\t\tthis.commentThreadsMap.get(uniqueOwner)\n\t\t\t\t?.resourceWithCommentThreads || [];\n\n\t\tremoved.forEach((thread) => {\n\t\t\t// Find resource that has the comment thread\n\t\t\tconst matchingResourceIndex = threadsForOwner.findIndex(\n\t\t\t\t(resourceData) => resourceData.id === thread.resource,\n\t\t\t);\n\t\t\tconst matchingResourceData =\n\t\t\t\tmatchingResourceIndex >= 0\n\t\t\t\t\t? threadsForOwner[matchingResourceIndex]\n\t\t\t\t\t: undefined;\n\n\t\t\t// Find comment node on resource that is that thread and remove it\n\t\t\tconst index =\n\t\t\t\tmatchingResourceData?.commentThreads.findIndex(\n\t\t\t\t\t(commentThread) =>\n\t\t\t\t\t\tcommentThread.threadId === thread.threadId,\n\t\t\t\t) ?? 0;\n\t\t\tif (index >= 0) {\n\t\t\t\tmatchingResourceData?.commentThreads.splice(index, 1);\n\t\t\t}\n\n\t\t\t// If the comment thread was the last thread for a resource, remove that resource from the list\n\t\t\tif (matchingResourceData?.commentThreads.length === 0) {\n\t\t\t\tthreadsForOwner.splice(matchingResourceIndex, 1);\n\t\t\t}\n\t\t});\n\n\t\tchanged.forEach((thread) => {\n\t\t\t// Find resource that has the comment thread\n\t\t\tconst matchingResourceIndex = threadsForOwner.findIndex(\n\t\t\t\t(resourceData) => resourceData.id === thread.resource,\n\t\t\t);\n\t\t\tconst matchingResourceData =\n\t\t\t\tmatchingResourceIndex >= 0\n\t\t\t\t\t? threadsForOwner[matchingResourceIndex]\n\t\t\t\t\t: undefined;\n\t\t\tif (!matchingResourceData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find comment node on resource that is that thread and replace it\n\t\t\tconst index = matchingResourceData.commentThreads.findIndex(\n\t\t\t\t(commentThread) => commentThread.threadId === thread.threadId,\n\t\t\t);\n\t\t\tif (index >= 0) {\n\t\t\t\tmatchingResourceData.commentThreads[index] =\n\t\t\t\t\tResourceWithCommentThreads.createCommentNode(\n\t\t\t\t\t\tuniqueOwner,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\tURI.parse(matchingResourceData.id),\n\t\t\t\t\t\tthread,\n\t\t\t\t\t);\n\t\t\t} else if (thread.comments && thread.comments.length) {\n\t\t\t\tmatchingResourceData.commentThreads.push(\n\t\t\t\t\tResourceWithCommentThreads.createCommentNode(\n\t\t\t\t\t\tuniqueOwner,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\tURI.parse(matchingResourceData.id),\n\t\t\t\t\t\tthread,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tadded.forEach((thread) => {\n\t\t\tconst existingResource = threadsForOwner.filter(\n\t\t\t\t(resourceWithThreads) =>\n\t\t\t\t\tresourceWithThreads.resource.toString() === thread.resource,\n\t\t\t);\n\t\t\tif (existingResource.length) {\n\t\t\t\tconst resource = existingResource[0];\n\t\t\t\tif (thread.comments && thread.comments.length) {\n\t\t\t\t\tresource.commentThreads.push(\n\t\t\t\t\t\tResourceWithCommentThreads.createCommentNode(\n\t\t\t\t\t\t\tuniqueOwner,\n\t\t\t\t\t\t\towner,\n\t\t\t\t\t\t\tresource.resource,\n\t\t\t\t\t\t\tthread,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthreadsForOwner.push(\n\t\t\t\t\tnew ResourceWithCommentThreads(\n\t\t\t\t\t\tuniqueOwner,\n\t\t\t\t\t\towner,\n\t\t\t\t\t\tURI.parse(thread.resource!),\n\t\t\t\t\t\t[thread],\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis.commentThreadsMap.set(uniqueOwner, {\n\t\t\townerLabel,\n\t\t\tresourceWithCommentThreads: threadsForOwner,\n\t\t});\n\t\tthis.updateResourceCommentThreads();\n\n\t\treturn removed.length > 0 || changed.length > 0 || added.length > 0;\n\t}\n\n\tpublic hasCommentThreads(): boolean {\n\t\t// There's a resource with at least one thread\n\t\treturn (\n\t\t\t!!this._resourceCommentThreads.length &&\n\t\t\tthis._resourceCommentThreads.some((resource) => {\n\t\t\t\t// At least one of the threads in the the resource has comments\n\t\t\t\treturn (\n\t\t\t\t\tresource.commentThreads.length > 0 &&\n\t\t\t\t\tresource.commentThreads.some((thread) => {\n\t\t\t\t\t\t// At least one of the comments in the thread is not empty\n\t\t\t\t\t\treturn threadHasMeaningfulComments(thread.thread);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic getMessage(): string {\n\t\tif (this._resourceCommentThreads.length) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn localize(\n\t\t\t\t\"noComments\",\n\t\t\t\t\"There are no comments in this workspace yet.\",\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate groupByResource(\n\t\tuniqueOwner: string,\n\t\towner: string,\n\t\tcommentThreads: CommentThread[],\n\t): ResourceWithCommentThreads[] {\n\t\tconst resourceCommentThreads: ResourceWithCommentThreads[] = [];\n\t\tconst commentThreadsByResource = new Map<\n\t\t\tstring,\n\t\t\tResourceWithCommentThreads\n\t\t>();\n\t\tfor (const group of groupBy(\n\t\t\tcommentThreads,\n\t\t\tCommentsModel._compareURIs,\n\t\t)) {\n\t\t\tcommentThreadsByResource.set(\n\t\t\t\tgroup[0].resource!,\n\t\t\t\tnew ResourceWithCommentThreads(\n\t\t\t\t\tuniqueOwner,\n\t\t\t\t\towner,\n\t\t\t\t\tURI.parse(group[0].resource!),\n\t\t\t\t\tgroup,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tcommentThreadsByResource.forEach((v, i, m) => {\n\t\t\tresourceCommentThreads.push(v);\n\t\t});\n\n\t\treturn resourceCommentThreads;\n\t}\n\n\tprivate static _compareURIs(a: CommentThread, b: CommentThread) {\n\t\tconst resourceA = a.resource!.toString();\n\t\tconst resourceB = b.resource!.toString();\n\t\tif (resourceA < resourceB) {\n\t\t\treturn -1;\n\t\t} else if (resourceA > resourceB) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AAEpB,SAAS,gBAAgB;AACzB;AAAA,EAEC;AAAA,OACM;AAEA,SAAS,4BAA4B,QAAgC;AAC3E,SACC,CAAC,CAAC,OAAO,YACT,CAAC,CAAC,OAAO,SAAS,UAClB,OAAO,SAAS;AAAA,IAAK,CAAC,YACrB,iBAAiB,QAAQ,IAAI,IAC1B,QAAQ,KAAK,MAAM,SAAS,IAC5B,QAAQ,KAAK,SAAS;AAAA,EAC1B;AAEF;AAVgB;AAyBT,MAAM,sBAAsB,WAAqC;AAAA,EAzCxE,OAyCwE;AAAA;AAAA;AAAA,EAC9D;AAAA,EACD;AAAA,EACR,IAAI,yBAAuD;AAC1D,WAAO,KAAK;AAAA,EACb;AAAA,EACS;AAAA,EAQT,cAAc;AACb,UAAM;AACN,SAAK,0BAA0B,CAAC;AAChC,SAAK,oBAAoB,oBAAI,IAM3B;AAAA,EACH;AAAA,EAEQ,+BAA+B;AACtC,UAAM,eAAe,KAAK,kBAAkB,OAAO;AACnD,SAAK,0BAA0B;AAAA,MAC9B,GAAG,KAAK,kBAAkB,OAAO;AAAA,IAClC,EAAE,QAAQ,CAAC,UAAU;AACpB,aAAO,MAAM,2BAA2B,QAAQ,CAAC,aAAa;AAC7D,iBAAS,aAAa,eACnB,MAAM,aACN;AACH,eAAO;AAAA,MACR,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEO,kBACN,aACA,OACA,YACA,gBACO;AACP,SAAK,kBAAkB,IAAI,aAAa;AAAA,MACvC;AAAA,MACA,4BAA4B,KAAK;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AACD,SAAK,6BAA6B;AAAA,EACnC;AAAA,EAEO,sBAAsB,aAA4B;AACxD,QAAI,aAAa;AAChB,YAAM,gBAAgB,KAAK,kBAAkB,IAAI,WAAW;AAC5D,WAAK,kBAAkB,IAAI,aAAa;AAAA,QACvC,YAAY,eAAe;AAAA,QAC3B,4BAA4B,CAAC;AAAA,MAC9B,CAAC;AAAA,IACF,OAAO;AACN,WAAK,kBAAkB,MAAM;AAAA,IAC9B;AACA,SAAK,6BAA6B;AAAA,EACnC;AAAA,EAEO,qBAAqB,OAA4C;AACvE,UAAM,EAAE,aAAa,OAAO,YAAY,SAAS,SAAS,MAAM,IAC/D;AAED,UAAM,kBACL,KAAK,kBAAkB,IAAI,WAAW,GACnC,8BAA8B,CAAC;AAEnC,YAAQ,QAAQ,CAAC,WAAW;AAE3B,YAAM,wBAAwB,gBAAgB;AAAA,QAC7C,CAAC,iBAAiB,aAAa,OAAO,OAAO;AAAA,MAC9C;AACA,YAAM,uBACL,yBAAyB,IACtB,gBAAgB,qBAAqB,IACrC;AAGJ,YAAM,QACL,sBAAsB,eAAe;AAAA,QACpC,CAAC,kBACA,cAAc,aAAa,OAAO;AAAA,MACpC,KAAK;AACN,UAAI,SAAS,GAAG;AACf,8BAAsB,eAAe,OAAO,OAAO,CAAC;AAAA,MACrD;AAGA,UAAI,sBAAsB,eAAe,WAAW,GAAG;AACtD,wBAAgB,OAAO,uBAAuB,CAAC;AAAA,MAChD;AAAA,IACD,CAAC;AAED,YAAQ,QAAQ,CAAC,WAAW;AAE3B,YAAM,wBAAwB,gBAAgB;AAAA,QAC7C,CAAC,iBAAiB,aAAa,OAAO,OAAO;AAAA,MAC9C;AACA,YAAM,uBACL,yBAAyB,IACtB,gBAAgB,qBAAqB,IACrC;AACJ,UAAI,CAAC,sBAAsB;AAC1B;AAAA,MACD;AAGA,YAAM,QAAQ,qBAAqB,eAAe;AAAA,QACjD,CAAC,kBAAkB,cAAc,aAAa,OAAO;AAAA,MACtD;AACA,UAAI,SAAS,GAAG;AACf,6BAAqB,eAAe,KAAK,IACxC,2BAA2B;AAAA,UAC1B;AAAA,UACA;AAAA,UACA,IAAI,MAAM,qBAAqB,EAAE;AAAA,UACjC;AAAA,QACD;AAAA,MACF,WAAW,OAAO,YAAY,OAAO,SAAS,QAAQ;AACrD,6BAAqB,eAAe;AAAA,UACnC,2BAA2B;AAAA,YAC1B;AAAA,YACA;AAAA,YACA,IAAI,MAAM,qBAAqB,EAAE;AAAA,YACjC;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAED,UAAM,QAAQ,CAAC,WAAW;AACzB,YAAM,mBAAmB,gBAAgB;AAAA,QACxC,CAAC,wBACA,oBAAoB,SAAS,SAAS,MAAM,OAAO;AAAA,MACrD;AACA,UAAI,iBAAiB,QAAQ;AAC5B,cAAM,WAAW,iBAAiB,CAAC;AACnC,YAAI,OAAO,YAAY,OAAO,SAAS,QAAQ;AAC9C,mBAAS,eAAe;AAAA,YACvB,2BAA2B;AAAA,cAC1B;AAAA,cACA;AAAA,cACA,SAAS;AAAA,cACT;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD,OAAO;AACN,wBAAgB;AAAA,UACf,IAAI;AAAA,YACH;AAAA,YACA;AAAA,YACA,IAAI,MAAM,OAAO,QAAS;AAAA,YAC1B,CAAC,MAAM;AAAA,UACR;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAED,SAAK,kBAAkB,IAAI,aAAa;AAAA,MACvC;AAAA,MACA,4BAA4B;AAAA,IAC7B,CAAC;AACD,SAAK,6BAA6B;AAElC,WAAO,QAAQ,SAAS,KAAK,QAAQ,SAAS,KAAK,MAAM,SAAS;AAAA,EACnE;AAAA,EAEO,oBAA6B;AAEnC,WACC,CAAC,CAAC,KAAK,wBAAwB,UAC/B,KAAK,wBAAwB,KAAK,CAAC,aAAa;AAE/C,aACC,SAAS,eAAe,SAAS,KACjC,SAAS,eAAe,KAAK,CAAC,WAAW;AAExC,eAAO,4BAA4B,OAAO,MAAM;AAAA,MACjD,CAAC;AAAA,IAEH,CAAC;AAAA,EAEH;AAAA,EAEO,aAAqB;AAC3B,QAAI,KAAK,wBAAwB,QAAQ;AACxC,aAAO;AAAA,IACR,OAAO;AACN,aAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,gBACP,aACA,OACA,gBAC+B;AAC/B,UAAM,yBAAuD,CAAC;AAC9D,UAAM,2BAA2B,oBAAI,IAGnC;AACF,eAAW,SAAS;AAAA,MACnB;AAAA,MACA,cAAc;AAAA,IACf,GAAG;AACF,+BAAyB;AAAA,QACxB,MAAM,CAAC,EAAE;AAAA,QACT,IAAI;AAAA,UACH;AAAA,UACA;AAAA,UACA,IAAI,MAAM,MAAM,CAAC,EAAE,QAAS;AAAA,UAC5B;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,6BAAyB,QAAQ,CAAC,GAAG,GAAG,MAAM;AAC7C,6BAAuB,KAAK,CAAC;AAAA,IAC9B,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEA,OAAe,aAAa,GAAkB,GAAkB;AAC/D,UAAM,YAAY,EAAE,SAAU,SAAS;AACvC,UAAM,YAAY,EAAE,SAAU,SAAS;AACvC,QAAI,YAAY,WAAW;AAC1B,aAAO;AAAA,IACR,WAAW,YAAY,WAAW;AACjC,aAAO;AAAA,IACR,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AACD;",
  "names": []
}
