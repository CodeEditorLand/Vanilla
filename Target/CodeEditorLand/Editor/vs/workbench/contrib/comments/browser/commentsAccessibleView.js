var w=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var l=(m,o,e,t)=>{for(var n=t>1?void 0:t?S(o,e):o,i=m.length-1,r;i>=0;i--)(r=m[i])&&(n=(t?r(o,e,n):r(n))||n);return t&&n&&w(o,e,n),n},d=(m,o)=>(e,t)=>o(e,t,m);import{Disposable as a}from"../../../../base/common/lifecycle.js";import{MarshalledId as g}from"../../../../base/common/marshallingIds.js";import"../../../../editor/browser/editorExtensions.js";import{AccessibleViewProviderId as u,AccessibleViewType as v}from"../../../../platform/accessibility/browser/accessibleView.js";import"../../../../platform/accessibility/browser/accessibleViewRegistry.js";import{IMenuService as V}from"../../../../platform/actions/common/actions.js";import{IContextKeyService as N}from"../../../../platform/contextkey/common/contextkey.js";import{AccessibilityVerbositySettingId as p}from"../../accessibility/browser/accessibilityConfiguration.js";import{COMMENTS_VIEW_ID as b,CommentsMenus as x}from"./commentsTreeViewer.js";import{CONTEXT_KEY_COMMENT_FOCUSED as A}from"./commentsView.js";import{IViewsService as T}from"../../../services/views/common/viewsService.js";import{ICommentService as h}from"./commentService.js";import{CommentContextKeys as E}from"../common/commentContextKeys.js";import{moveToNextCommentInThread as I,revealCommentThread as P}from"./commentsController.js";import{IEditorService as y}from"../../../services/editor/common/editorService.js";import{IUriIdentityService as _}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{isCodeEditor as M}from"../../../../editor/browser/editorBrowser.js";import{URI as K}from"../../../../base/common/uri.js";import"../../../../editor/common/languages.js";import"../../../../editor/common/core/range.js";class de extends a{priority=90;name="comment";when=A;type=v.View;getProvider(o){const e=o.get(N),t=o.get(T),n=o.get(V),i=t.getActiveViewWithId(b),r=i?.focusedCommentNode;if(!i||!r)return;const c=this._register(new x(n));return c.setContextKeyService(e),new R(i,r,c)}constructor(){super()}}class ae extends a{priority=85;name="commentThread";when=E.commentFocused;type=v.View;getProvider(o){const e=o.get(h),t=o.get(y),n=o.get(_);if(e.commentsModel.hasCommentThreads())return new s(e,t,n)}constructor(){super()}}class R extends a{constructor(e,t,n){super();this._commentsView=e;this._focusedCommentNode=t;this._menus=n}id=u.Comments;verbositySettingKey=p.Comments;options={type:v.View};actions=[...this._menus.getResourceContextActions(this._focusedCommentNode)].filter(e=>e.enabled).map(e=>({...e,run:()=>{this._commentsView.focus(),e.run({thread:this._focusedCommentNode.thread,$mid:g.CommentThread,commentControlHandle:this._focusedCommentNode.controllerHandle,commentThreadHandle:this._focusedCommentNode.threadHandle})}}));provideContent(){const e=this._commentsView.focusedCommentNode,t=this._commentsView.focusedCommentInfo?.toString();if(!e||!t)throw new Error("Comment tree is focused but no comment is selected");return t}onClose(){this._commentsView.focus()}provideNextContent(){return this._commentsView.focusNextNode(),this.provideContent()}providePreviousContent(){return this._commentsView.focusPreviousNode(),this.provideContent()}}let s=class extends a{constructor(e,t,n){super();this._commentService=e;this._editorService=t;this._uriIdentityService=n}id=u.CommentThread;verbositySettingKey=p.Comments;options={type:v.View};_activeCommentInfo;get activeCommentInfo(){return!this._activeCommentInfo&&this._commentService.lastActiveCommentcontroller&&(this._activeCommentInfo=this._commentService.lastActiveCommentcontroller.activeComment),this._activeCommentInfo}provideContent(){if(!this.activeCommentInfo)throw new Error("No current comment thread");const e=this.activeCommentInfo.comment?.body,t=typeof e=="string"?e:e?.value??"",n=this.activeCommentInfo.thread.resource,i=this.activeCommentInfo.thread.range;let r="";if(n&&i){const c=this._editorService.findEditors(K.parse(n))||[],C=this._editorService.activeEditorPane?.getControl();if(c?.length&&M(C)){const f=C.getModel()?.getValueInRange(i);f&&(r=`
Corresponding code: 
`+f)}}return t+r}onClose(){const e=this._activeCommentInfo;this._activeCommentInfo=void 0,e&&P(this._commentService,this._editorService,this._uriIdentityService,e.thread,e.comment)}provideNextContent(){const e=I(this._activeCommentInfo,"next");if(e)return this._activeCommentInfo=e,this.provideContent()}providePreviousContent(){const e=I(this._activeCommentInfo,"previous");if(e)return this._activeCommentInfo=e,this.provideContent()}};s=l([d(0,h),d(1,y),d(2,_)],s);export{ae as CommentThreadAccessibleView,de as CommentsAccessibleView};
