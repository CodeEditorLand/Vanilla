import{Disposable as m}from"../../../../base/common/lifecycle.js";import{MarshalledId as l}from"../../../../base/common/marshallingIds.js";import"../../../../editor/browser/editorExtensions.js";import{AccessibleViewProviderId as u,AccessibleViewType as c}from"../../../../platform/accessibility/browser/accessibleView.js";import"../../../../platform/accessibility/browser/accessibleViewRegistry.js";import{IMenuService as C}from"../../../../platform/actions/common/actions.js";import{IContextKeyService as a}from"../../../../platform/contextkey/common/contextkey.js";import{AccessibilityVerbositySettingId as p}from"../../accessibility/browser/accessibilityConfiguration.js";import{COMMENTS_VIEW_ID as f,CommentsMenus as v}from"./commentsTreeViewer.js";import{CONTEXT_KEY_COMMENT_FOCUSED as w}from"./commentsView.js";import{IViewsService as h}from"../../../services/views/common/viewsService.js";class O extends m{priority=90;name="comment";when=w;type=c.View;getProvider(o){const e=o.get(a),t=o.get(h),s=o.get(C),n=t.getActiveViewWithId(f),i=n?.focusedCommentNode;if(!n||!i)return;const r=this._register(new v(s));return r.setContextKeyService(e),new y(n,i,r)}constructor(){super()}}class y extends m{constructor(e,t,s){super();this._commentsView=e;this._focusedCommentNode=t;this._menus=s}id=u.Comments;verbositySettingKey=p.Comments;options={type:c.View};actions=[...this._menus.getResourceContextActions(this._focusedCommentNode)].filter(e=>e.enabled).map(e=>({...e,run:()=>{this._commentsView.focus(),e.run({thread:this._focusedCommentNode.thread,$mid:l.CommentThread,commentControlHandle:this._focusedCommentNode.controllerHandle,commentThreadHandle:this._focusedCommentNode.threadHandle})}}));provideContent(){const e=this._commentsView.focusedCommentNode,t=this._commentsView.focusedCommentInfo?.toString();if(!e||!t)throw new Error("Comment tree is focused but no comment is selected");return t}onClose(){this._commentsView.focus()}provideNextContent(){return this._commentsView.focusNextNode(),this.provideContent()}providePreviousContent(){return this._commentsView.focusPreviousNode(),this.provideContent()}}export{O as CommentsAccessibleView};
