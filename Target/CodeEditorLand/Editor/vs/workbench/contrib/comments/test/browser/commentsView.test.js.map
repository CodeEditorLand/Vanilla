{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/comments/test/browser/commentsView.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { IRange, Range } from '../../../../../editor/common/core/range.js';\nimport { CommentsPanel } from '../../browser/commentsView.js';\nimport { CommentService, ICommentController, ICommentInfo, ICommentService, INotebookCommentInfo } from '../../browser/commentService.js';\nimport { Comment, CommentInput, CommentReaction, CommentThread, CommentThreadCollapsibleState, CommentThreadState } from '../../../../../editor/common/languages.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IViewContainerModel, IViewDescriptor, IViewDescriptorService, ViewContainer, ViewContainerLocation } from '../../../../common/views.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IContextViewService } from '../../../../../platform/contextview/browser/contextView.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { URI, UriComponents } from '../../../../../base/common/uri.js';\nimport { IHoverService } from '../../../../../platform/hover/browser/hover.js';\nimport { NullHoverService } from '../../../../../platform/hover/test/browser/nullHoverService.js';\n\nclass TestCommentThread implements CommentThread<IRange> {\n\tisDocumentCommentThread(): this is CommentThread<IRange> {\n\t\treturn true;\n\t}\n\tconstructor(public readonly commentThreadHandle: number,\n\t\tpublic readonly controllerHandle: number,\n\t\tpublic readonly threadId: string,\n\t\tpublic readonly resource: string,\n\t\tpublic readonly range: IRange,\n\t\tpublic readonly comments: Comment[]) { }\n\n\tonDidChangeComments: Event<readonly Comment[] | undefined> = new Emitter<readonly Comment[] | undefined>().event;\n\tonDidChangeInitialCollapsibleState: Event<CommentThreadCollapsibleState | undefined> = new Emitter<CommentThreadCollapsibleState | undefined>().event;\n\tcanReply: boolean = false;\n\tonDidChangeInput: Event<CommentInput | undefined> = new Emitter<CommentInput | undefined>().event;\n\tonDidChangeRange: Event<IRange> = new Emitter<IRange>().event;\n\tonDidChangeLabel: Event<string | undefined> = new Emitter<string | undefined>().event;\n\tonDidChangeCollapsibleState: Event<CommentThreadCollapsibleState | undefined> = new Emitter<CommentThreadCollapsibleState | undefined>().event;\n\tonDidChangeState: Event<CommentThreadState | undefined> = new Emitter<CommentThreadState | undefined>().event;\n\tonDidChangeCanReply: Event<boolean> = new Emitter<boolean>().event;\n\tisDisposed: boolean = false;\n\tisTemplate: boolean = false;\n\tlabel: string | undefined = undefined;\n\tcontextValue: string | undefined = undefined;\n}\n\nclass TestCommentController implements ICommentController {\n\tid: string = 'test';\n\tlabel: string = 'Test Comments';\n\towner: string = 'test';\n\tfeatures = {};\n\tcreateCommentThreadTemplate(resource: UriComponents, range: IRange | undefined): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tupdateCommentThreadTemplate(threadHandle: number, range: IRange): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdeleteCommentThreadMain(commentThreadId: string): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\ttoggleReaction(uri: URI, thread: CommentThread<IRange>, comment: Comment, reaction: CommentReaction, token: CancellationToken): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetDocumentComments(resource: URI, token: CancellationToken): Promise<ICommentInfo> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetNotebookComments(resource: URI, token: CancellationToken): Promise<INotebookCommentInfo> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsetActiveCommentAndThread(commentInfo: { thread: CommentThread; comment: Comment } | undefined): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n}\n\nexport class TestViewDescriptorService implements Partial<IViewDescriptorService> {\n\tgetViewLocationById(id: string): ViewContainerLocation | null {\n\t\treturn ViewContainerLocation.Panel;\n\t}\n\treadonly onDidChangeLocation: Event<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }> = new Emitter<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }>().event;\n\tgetViewDescriptorById(id: string): IViewDescriptor | null {\n\t\treturn null;\n\t}\n\tgetViewContainerByViewId(id: string): ViewContainer | null {\n\t\treturn {\n\t\t\tid: 'comments',\n\t\t\ttitle: { value: 'Comments', original: 'Comments' },\n\t\t\tctorDescriptor: {} as any\n\t\t};\n\t}\n\tgetViewContainerModel(viewContainer: ViewContainer): IViewContainerModel {\n\t\tconst partialViewContainerModel: Partial<IViewContainerModel> = {\n\t\t\tonDidChangeContainerInfo: new Emitter<{ title?: boolean; icon?: boolean; keybindingId?: boolean }>().event\n\t\t};\n\t\treturn partialViewContainerModel as IViewContainerModel;\n\t}\n\tgetDefaultContainerById(id: string): ViewContainer | null {\n\t\treturn null;\n\t}\n}\n\nsuite('Comments View', function () {\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t\tcommentService.dispose();\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet commentService: CommentService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = workbenchInstantiationService({}, disposables);\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(IHoverService, NullHoverService);\n\t\tinstantiationService.stub(IContextViewService, {});\n\t\tinstantiationService.stub(IViewDescriptorService, new TestViewDescriptorService());\n\t\tcommentService = instantiationService.createInstance(CommentService);\n\t\tinstantiationService.stub(ICommentService, commentService);\n\t\tcommentService.registerCommentController('test', new TestCommentController());\n\t});\n\n\n\n\ttest('collapse all', async function () {\n\t\tconst view = instantiationService.createInstance(CommentsPanel, { id: 'comments', title: 'Comments' });\n\t\tview.render();\n\t\tcommentService.setWorkspaceComments('test', [\n\t\t\tnew TestCommentThread(1, 1, '1', 'test1', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t\tnew TestCommentThread(2, 1, '1', 'test2', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t]);\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.areAllCommentsExpanded(), true);\n\t\tview.collapseAll();\n\t\tassert.strictEqual(view.isSomeCommentsExpanded(), false);\n\t\tview.dispose();\n\t});\n\n\ttest('expand all', async function () {\n\t\tconst view = instantiationService.createInstance(CommentsPanel, { id: 'comments', title: 'Comments' });\n\t\tview.render();\n\t\tcommentService.setWorkspaceComments('test', [\n\t\t\tnew TestCommentThread(1, 1, '1', 'test1', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t\tnew TestCommentThread(2, 1, '1', 'test2', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t]);\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tview.collapseAll();\n\t\tassert.strictEqual(view.isSomeCommentsExpanded(), false);\n\t\tview.expandAll();\n\t\tassert.strictEqual(view.areAllCommentsExpanded(), true);\n\t\tview.dispose();\n\t});\n\n\ttest('filter by text', async function () {\n\t\tconst view = instantiationService.createInstance(CommentsPanel, { id: 'comments', title: 'Comments' });\n\t\tview.setVisible(true);\n\t\tview.render();\n\t\tcommentService.setWorkspaceComments('test', [\n\t\t\tnew TestCommentThread(1, 1, '1', 'test1', new Range(1, 1, 1, 1), [{ body: 'This comment is a cat.', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t\tnew TestCommentThread(2, 1, '1', 'test2', new Range(1, 1, 1, 1), [{ body: 'This comment is a dog.', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t]);\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.getFilterStats().filtered, 2);\n\t\tview.getFilterWidget().setFilterText('cat');\n\t\t// Setting showResolved causes the filter to trigger for the purposes of this test.\n\t\tview.filters.showResolved = false;\n\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.getFilterStats().filtered, 1);\n\t\tview.clearFilterText();\n\t\t// Setting showResolved causes the filter to trigger for the purposes of this test.\n\t\tview.filters.showResolved = true;\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.getFilterStats().filtered, 2);\n\t\tview.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
