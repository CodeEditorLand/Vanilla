{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/workspace/browser/workspace.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/workspaceTrustEditor.css';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ConfigurationScope, Extensions as ConfigurationExtensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Severity } from '../../../../platform/notification/common/notification.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkspaceTrustEnablementService, IWorkspaceTrustManagementService, IWorkspaceTrustRequestService, WorkspaceTrustUriResponse } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from '../../../services/statusbar/browser/statusbar.js';\nimport { IEditorPaneRegistry, EditorPaneDescriptor } from '../../../browser/editor.js';\nimport { shieldIcon, WorkspaceTrustEditor } from './workspaceTrustEditor.js';\nimport { WorkspaceTrustEditorInput } from '../../../services/workspaces/browser/workspaceTrustEditorInput.js';\nimport { WORKSPACE_TRUST_BANNER, WORKSPACE_TRUST_EMPTY_WINDOW, WORKSPACE_TRUST_ENABLED, WORKSPACE_TRUST_STARTUP_PROMPT, WORKSPACE_TRUST_UNTRUSTED_FILES } from '../../../services/workspaces/common/workspaceTrust.js';\nimport { IEditorSerializer, IEditorFactoryRegistry, EditorExtensions } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { isEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, IWorkspaceContextService, IWorkspaceFoldersWillChangeEvent, toWorkspaceIdentifier, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { dirname, resolve } from '../../../../base/common/path.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IBannerItem, IBannerService } from '../../../services/banner/browser/bannerService.js';\nimport { isVirtualWorkspace } from '../../../../platform/workspace/common/virtualWorkspace.js';\nimport { LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID } from '../../extensions/common/extensions.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { WORKSPACE_TRUST_SETTING_TAG } from '../../preferences/common/preferences.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { ILabelService, Verbosity } from '../../../../platform/label/common/label.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { MANAGE_TRUST_COMMAND_ID, WorkspaceTrustContext } from '../common/workspace.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { securityConfigurationNodeBase } from '../../../common/configuration.js';\nimport { basename, dirname as uriDirname } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\n\nconst BANNER_RESTRICTED_MODE = 'workbench.banner.restrictedMode';\nconst STARTUP_PROMPT_SHOWN_KEY = 'workspace.trust.startupPrompt.shown';\nconst BANNER_RESTRICTED_MODE_DISMISSED_KEY = 'workbench.banner.restrictedMode.dismissed';\n\nexport class WorkspaceTrustContextKeys extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly _ctxWorkspaceTrustEnabled: IContextKey<boolean>;\n\tprivate readonly _ctxWorkspaceTrustState: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IWorkspaceTrustEnablementService workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService\n\t) {\n\t\tsuper();\n\n\t\tthis._ctxWorkspaceTrustEnabled = WorkspaceTrustContext.IsEnabled.bindTo(contextKeyService);\n\t\tthis._ctxWorkspaceTrustEnabled.set(workspaceTrustEnablementService.isWorkspaceTrustEnabled());\n\n\t\tthis._ctxWorkspaceTrustState = WorkspaceTrustContext.IsTrusted.bindTo(contextKeyService);\n\t\tthis._ctxWorkspaceTrustState.set(workspaceTrustManagementService.isWorkspaceTrusted());\n\n\t\tthis._register(workspaceTrustManagementService.onDidChangeTrust(trusted => this._ctxWorkspaceTrustState.set(trusted)));\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(WorkspaceTrustContextKeys, LifecyclePhase.Restored);\n\n\n/*\n * Trust Request via Service UX handler\n */\n\nexport class WorkspaceTrustRequestHandler extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.workspaceTrustRequestHandler';\n\n\tconstructor(\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate get useWorkspaceLanguage(): boolean {\n\t\treturn !isSingleFolderWorkspaceIdentifier(toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()));\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Open files trust request\n\t\tthis._register(this.workspaceTrustRequestService.onDidInitiateOpenFilesTrustRequest(async () => {\n\t\t\tawait this.workspaceTrustManagementService.workspaceResolved;\n\n\t\t\t// Details\n\t\t\tconst markdownDetails = [\n\t\t\t\tthis.workspaceContextService.getWorkbenchState() !== WorkbenchState.EMPTY ?\n\t\t\t\t\tlocalize('openLooseFileWorkspaceDetails', \"You are trying to open untrusted files in a workspace which is trusted.\") :\n\t\t\t\t\tlocalize('openLooseFileWindowDetails', \"You are trying to open untrusted files in a window which is trusted.\"),\n\t\t\t\tlocalize('openLooseFileLearnMore', \"If you don't want to open untrusted files, we recommend to open them in Restricted Mode in a new window as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.\")\n\t\t\t];\n\n\t\t\t// Dialog\n\t\t\tawait this.dialogService.prompt<void>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: this.workspaceContextService.getWorkbenchState() !== WorkbenchState.EMPTY ?\n\t\t\t\t\tlocalize('openLooseFileWorkspaceMesssage', \"Do you want to allow untrusted files in this workspace?\") :\n\t\t\t\t\tlocalize('openLooseFileWindowMesssage', \"Do you want to allow untrusted files in this window?\"),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize({ key: 'open', comment: ['&& denotes a mnemonic'] }, \"&&Open\"),\n\t\t\t\t\t\trun: ({ checkboxChecked }) => this.workspaceTrustRequestService.completeOpenFilesTrustRequest(WorkspaceTrustUriResponse.Open, !!checkboxChecked)\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize({ key: 'newWindow', comment: ['&& denotes a mnemonic'] }, \"Open in &&Restricted Mode\"),\n\t\t\t\t\t\trun: ({ checkboxChecked }) => this.workspaceTrustRequestService.completeOpenFilesTrustRequest(WorkspaceTrustUriResponse.OpenInNewWindow, !!checkboxChecked)\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => this.workspaceTrustRequestService.completeOpenFilesTrustRequest(WorkspaceTrustUriResponse.Cancel)\n\t\t\t\t},\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize('openLooseFileWorkspaceCheckbox', \"Remember my decision for all workspaces\"),\n\t\t\t\t\tchecked: false\n\t\t\t\t},\n\t\t\t\tcustom: {\n\t\t\t\t\ticon: Codicon.shield,\n\t\t\t\t\tmarkdownDetails: markdownDetails.map(md => { return { markdown: new MarkdownString(md) }; })\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\t// Workspace trust request\n\t\tthis._register(this.workspaceTrustRequestService.onDidInitiateWorkspaceTrustRequest(async requestOptions => {\n\t\t\tawait this.workspaceTrustManagementService.workspaceResolved;\n\n\t\t\t// Title\n\t\t\tconst message = this.useWorkspaceLanguage ?\n\t\t\t\tlocalize('workspaceTrust', \"Do you trust the authors of the files in this workspace?\") :\n\t\t\t\tlocalize('folderTrust', \"Do you trust the authors of the files in this folder?\");\n\n\t\t\t// Message\n\t\t\tconst defaultDetails = localize('immediateTrustRequestMessage', \"A feature you are trying to use may be a security risk if you do not trust the source of the files or folders you currently have open.\");\n\t\t\tconst details = requestOptions?.message ?? defaultDetails;\n\n\t\t\t// Buttons\n\t\t\tconst buttons = requestOptions?.buttons ?? [\n\t\t\t\t{ label: this.useWorkspaceLanguage ? localize({ key: 'grantWorkspaceTrustButton', comment: ['&& denotes a mnemonic'] }, \"&&Trust Workspace & Continue\") : localize({ key: 'grantFolderTrustButton', comment: ['&& denotes a mnemonic'] }, \"&&Trust Folder & Continue\"), type: 'ContinueWithTrust' },\n\t\t\t\t{ label: localize({ key: 'manageWorkspaceTrustButton', comment: ['&& denotes a mnemonic'] }, \"&&Manage\"), type: 'Manage' }\n\t\t\t];\n\n\t\t\t// Add Cancel button if not provided\n\t\t\tif (!buttons.some(b => b.type === 'Cancel')) {\n\t\t\t\tbuttons.push({ label: localize('cancelWorkspaceTrustButton', \"Cancel\"), type: 'Cancel' });\n\t\t\t}\n\n\t\t\t// Dialog\n\t\t\tconst { result } = await this.dialogService.prompt({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tcustom: {\n\t\t\t\t\ticon: Codicon.shield,\n\t\t\t\t\tmarkdownDetails: [\n\t\t\t\t\t\t{ markdown: new MarkdownString(details) },\n\t\t\t\t\t\t{ markdown: new MarkdownString(localize('immediateTrustRequestLearnMore', \"If you don't trust the authors of these files, we do not recommend continuing as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.\")) }\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tbuttons: buttons.filter(b => b.type !== 'Cancel').map(button => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: button.label,\n\t\t\t\t\t\trun: () => button.type\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tcancelButton: (() => {\n\t\t\t\t\tconst cancelButton = buttons.find(b => b.type === 'Cancel');\n\t\t\t\t\tif (!cancelButton) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: cancelButton.label,\n\t\t\t\t\t\trun: () => cancelButton.type\n\t\t\t\t\t};\n\t\t\t\t})()\n\t\t\t});\n\n\n\t\t\t// Dialog result\n\t\t\tswitch (result) {\n\t\t\t\tcase 'ContinueWithTrust':\n\t\t\t\t\tawait this.workspaceTrustRequestService.completeWorkspaceTrustRequest(true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ContinueWithoutTrust':\n\t\t\t\t\tawait this.workspaceTrustRequestService.completeWorkspaceTrustRequest(undefined);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Manage':\n\t\t\t\t\tthis.workspaceTrustRequestService.cancelWorkspaceTrustRequest();\n\t\t\t\t\tawait this.commandService.executeCommand(MANAGE_TRUST_COMMAND_ID);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Cancel':\n\t\t\t\t\tthis.workspaceTrustRequestService.cancelWorkspaceTrustRequest();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\t}\n}\n\n\n/*\n * Trust UX and Startup Handler\n */\nexport class WorkspaceTrustUXHandler extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly entryId = `status.workspaceTrust`;\n\n\tprivate readonly statusbarEntryAccessor: MutableDisposable<IStatusbarEntryAccessor>;\n\n\tconstructor(\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustEnablementService private readonly workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IBannerService private readonly bannerService: IBannerService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\n\t\tthis.statusbarEntryAccessor = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\t\t(async () => {\n\n\t\t\tawait this.workspaceTrustManagementService.workspaceTrustInitialized;\n\n\t\t\tif (this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\t\tthis.registerListeners();\n\t\t\t\tthis.updateStatusbarEntry(this.workspaceTrustManagementService.isWorkspaceTrusted());\n\n\t\t\t\t// Show modal dialog\n\t\t\t\tif (this.hostService.hasFocus) {\n\t\t\t\t\tthis.showModalOnStart();\n\t\t\t\t} else {\n\t\t\t\t\tconst focusDisposable = this.hostService.onDidChangeFocus(focused => {\n\t\t\t\t\t\tif (focused) {\n\t\t\t\t\t\t\tfocusDisposable.dispose();\n\t\t\t\t\t\t\tthis.showModalOnStart();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.workspaceContextService.onWillChangeWorkspaceFolders(e => {\n\t\t\tif (e.fromCache) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst addWorkspaceFolder = async (e: IWorkspaceFoldersWillChangeEvent): Promise<void> => {\n\t\t\t\tconst trusted = this.workspaceTrustManagementService.isWorkspaceTrusted();\n\n\t\t\t\t// Workspace is trusted and there are added/changed folders\n\t\t\t\tif (trusted && (e.changes.added.length || e.changes.changed.length)) {\n\t\t\t\t\tconst addedFoldersTrustInfo = await Promise.all(e.changes.added.map(folder => this.workspaceTrustManagementService.getUriTrustInfo(folder.uri)));\n\n\t\t\t\t\tif (!addedFoldersTrustInfo.map(info => info.trusted).every(trusted => trusted)) {\n\t\t\t\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\t\t\t\ttype: Severity.Info,\n\t\t\t\t\t\t\tmessage: localize('addWorkspaceFolderMessage', \"Do you trust the authors of the files in this folder?\"),\n\t\t\t\t\t\t\tdetail: localize('addWorkspaceFolderDetail', \"You are adding files that are not currently trusted to a trusted workspace. Do you trust the authors of these new files?\"),\n\t\t\t\t\t\t\tcancelButton: localize('no', 'No'),\n\t\t\t\t\t\t\tcustom: { icon: Codicon.shield }\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Mark added/changed folders as trusted\n\t\t\t\t\t\tawait this.workspaceTrustManagementService.setUrisTrust(addedFoldersTrustInfo.map(i => i.uri), confirmed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn e.join(addWorkspaceFolder(e));\n\t\t}));\n\n\t\tthis._register(this.workspaceTrustManagementService.onDidChangeTrust(trusted => {\n\t\t\tthis.updateWorkbenchIndicators(trusted);\n\t\t}));\n\n\t\tthis._register(this.workspaceTrustRequestService.onDidInitiateWorkspaceTrustRequestOnStartup(async () => {\n\n\t\t\tlet titleString: string | undefined;\n\t\t\tlet learnMoreString: string | undefined;\n\t\t\tlet trustOption: string | undefined;\n\t\t\tlet dontTrustOption: string | undefined;\n\t\t\tconst isAiGeneratedWorkspace = await this.isAiGeneratedWorkspace();\n\t\t\tif (isAiGeneratedWorkspace && this.productService.aiGeneratedWorkspaceTrust) {\n\t\t\t\ttitleString = this.productService.aiGeneratedWorkspaceTrust.title;\n\t\t\t\tlearnMoreString = this.productService.aiGeneratedWorkspaceTrust.startupTrustRequestLearnMore;\n\t\t\t\ttrustOption = this.productService.aiGeneratedWorkspaceTrust.trustOption;\n\t\t\t\tdontTrustOption = this.productService.aiGeneratedWorkspaceTrust.dontTrustOption;\n\t\t\t} else {\n\t\t\t\tconsole.warn('AI generated workspace trust dialog contents not available.');\n\t\t\t}\n\n\t\t\tconst title = titleString ?? (this.useWorkspaceLanguage ?\n\t\t\t\tlocalize('workspaceTrust', \"Do you trust the authors of the files in this workspace?\") :\n\t\t\t\tlocalize('folderTrust', \"Do you trust the authors of the files in this folder?\"));\n\n\t\t\tlet checkboxText: string | undefined;\n\t\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this.workspaceContextService.getWorkspace());\n\t\t\tconst isSingleFolderWorkspace = isSingleFolderWorkspaceIdentifier(workspaceIdentifier);\n\t\t\tconst isEmptyWindow = isEmptyWorkspaceIdentifier(workspaceIdentifier);\n\t\t\tif (!isAiGeneratedWorkspace && this.workspaceTrustManagementService.canSetParentFolderTrust()) {\n\t\t\t\tconst name = basename(uriDirname((workspaceIdentifier as ISingleFolderWorkspaceIdentifier).uri));\n\t\t\t\tcheckboxText = localize('checkboxString', \"Trust the authors of all files in the parent folder '{0}'\", name);\n\t\t\t}\n\n\t\t\t// Show Workspace Trust Start Dialog\n\t\t\tthis.doShowModal(\n\t\t\t\ttitle,\n\t\t\t\t{ label: trustOption ?? localize({ key: 'trustOption', comment: ['&& denotes a mnemonic'] }, \"&&Yes, I trust the authors\"), sublabel: isSingleFolderWorkspace ? localize('trustFolderOptionDescription', \"Trust folder and enable all features\") : localize('trustWorkspaceOptionDescription', \"Trust workspace and enable all features\") },\n\t\t\t\t{ label: dontTrustOption ?? localize({ key: 'dontTrustOption', comment: ['&& denotes a mnemonic'] }, \"&&No, I don't trust the authors\"), sublabel: isSingleFolderWorkspace ? localize('dontTrustFolderOptionDescription', \"Browse folder in restricted mode\") : localize('dontTrustWorkspaceOptionDescription', \"Browse workspace in restricted mode\") },\n\t\t\t\t[\n\t\t\t\t\t!isSingleFolderWorkspace ?\n\t\t\t\t\t\tlocalize('workspaceStartupTrustDetails', \"{0} provides features that may automatically execute files in this workspace.\", this.productService.nameShort) :\n\t\t\t\t\t\tlocalize('folderStartupTrustDetails', \"{0} provides features that may automatically execute files in this folder.\", this.productService.nameShort),\n\t\t\t\t\tlearnMoreString ?? localize('startupTrustRequestLearnMore', \"If you don't trust the authors of these files, we recommend to continue in restricted mode as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.\"),\n\t\t\t\t\t!isEmptyWindow ?\n\t\t\t\t\t\t`\\`${this.labelService.getWorkspaceLabel(workspaceIdentifier, { verbose: Verbosity.LONG })}\\`` : '',\n\t\t\t\t],\n\t\t\t\tcheckboxText\n\t\t\t);\n\t\t}));\n\t}\n\n\tprivate updateWorkbenchIndicators(trusted: boolean): void {\n\t\tconst bannerItem = this.getBannerItem(!trusted);\n\n\t\tthis.updateStatusbarEntry(trusted);\n\n\t\tif (bannerItem) {\n\t\t\tif (!trusted) {\n\t\t\t\tthis.bannerService.show(bannerItem);\n\t\t\t} else {\n\t\t\t\tthis.bannerService.hide(BANNER_RESTRICTED_MODE);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#region Dialog\n\n\tprivate async doShowModal(question: string, trustedOption: { label: string; sublabel: string }, untrustedOption: { label: string; sublabel: string }, markdownStrings: string[], trustParentString?: string): Promise<void> {\n\t\tawait this.dialogService.prompt({\n\t\t\ttype: Severity.Info,\n\t\t\tmessage: question,\n\t\t\tcheckbox: trustParentString ? {\n\t\t\t\tlabel: trustParentString\n\t\t\t} : undefined,\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: trustedOption.label,\n\t\t\t\t\trun: async ({ checkboxChecked }) => {\n\t\t\t\t\t\tif (checkboxChecked) {\n\t\t\t\t\t\t\tawait this.workspaceTrustManagementService.setParentFolderTrust(true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait this.workspaceTrustRequestService.completeWorkspaceTrustRequest(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: untrustedOption.label,\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.updateWorkbenchIndicators(false);\n\t\t\t\t\t\tthis.workspaceTrustRequestService.cancelWorkspaceTrustRequest();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tcustom: {\n\t\t\t\tbuttonDetails: [\n\t\t\t\t\ttrustedOption.sublabel,\n\t\t\t\t\tuntrustedOption.sublabel\n\t\t\t\t],\n\t\t\t\tdisableCloseAction: true,\n\t\t\t\ticon: Codicon.shield,\n\t\t\t\tmarkdownDetails: markdownStrings.map(md => { return { markdown: new MarkdownString(md) }; })\n\t\t\t}\n\t\t});\n\n\t\tthis.storageService.store(STARTUP_PROMPT_SHOWN_KEY, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate async showModalOnStart(): Promise<void> {\n\t\tif (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\tthis.updateWorkbenchIndicators(true);\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't show modal prompt if workspace trust cannot be changed\n\t\tif (!(this.workspaceTrustManagementService.canSetWorkspaceTrust())) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't show modal prompt for virtual workspaces by default\n\t\tif (isVirtualWorkspace(this.workspaceContextService.getWorkspace())) {\n\t\t\tthis.updateWorkbenchIndicators(false);\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't show modal prompt for empty workspaces by default\n\t\tif (this.workspaceContextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\tthis.updateWorkbenchIndicators(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.startupPromptSetting === 'never') {\n\t\t\tthis.updateWorkbenchIndicators(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.startupPromptSetting === 'once' && this.storageService.getBoolean(STARTUP_PROMPT_SHOWN_KEY, StorageScope.WORKSPACE, false)) {\n\t\t\tthis.updateWorkbenchIndicators(false);\n\t\t\treturn;\n\t\t}\n\n\t\t// Use the workspace trust request service to show modal dialog\n\t\tthis.workspaceTrustRequestService.requestWorkspaceTrustOnStartup();\n\t}\n\n\tprivate get startupPromptSetting(): 'always' | 'once' | 'never' {\n\t\treturn this.configurationService.getValue(WORKSPACE_TRUST_STARTUP_PROMPT);\n\t}\n\n\tprivate get useWorkspaceLanguage(): boolean {\n\t\treturn !isSingleFolderWorkspaceIdentifier(toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()));\n\t}\n\n\tprivate async isAiGeneratedWorkspace(): Promise<boolean> {\n\t\tconst aiGeneratedWorkspaces = URI.joinPath(this.environmentService.workspaceStorageHome, 'aiGeneratedWorkspaces.json');\n\t\treturn await this.fileService.exists(aiGeneratedWorkspaces).then(async result => {\n\t\t\tif (result) {\n\t\t\t\ttry {\n\t\t\t\t\tconst content = await this.fileService.readFile(aiGeneratedWorkspaces);\n\t\t\t\t\tconst workspaces = JSON.parse(content.value.toString()) as string[];\n\t\t\t\t\tif (workspaces.indexOf(this.workspaceContextService.getWorkspace().folders[0].uri.toString()) > -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Ignore errors when resolving file contents\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Banner\n\n\tprivate getBannerItem(restrictedMode: boolean): IBannerItem | undefined {\n\t\tconst dismissedRestricted = this.storageService.getBoolean(BANNER_RESTRICTED_MODE_DISMISSED_KEY, StorageScope.WORKSPACE, false);\n\n\t\t// never show the banner\n\t\tif (this.bannerSetting === 'never') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// info has been dismissed\n\t\tif (this.bannerSetting === 'untilDismissed' && dismissedRestricted) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst actions =\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('restrictedModeBannerManage', \"Manage\"),\n\t\t\t\t\thref: 'command:' + MANAGE_TRUST_COMMAND_ID\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('restrictedModeBannerLearnMore', \"Learn More\"),\n\t\t\t\t\thref: 'https://aka.ms/vscode-workspace-trust'\n\t\t\t\t}\n\t\t\t];\n\n\t\treturn {\n\t\t\tid: BANNER_RESTRICTED_MODE,\n\t\t\ticon: shieldIcon,\n\t\t\tariaLabel: this.getBannerItemAriaLabels(),\n\t\t\tmessage: this.getBannerItemMessages(),\n\t\t\tactions,\n\t\t\tonClose: () => {\n\t\t\t\tif (restrictedMode) {\n\t\t\t\t\tthis.storageService.store(BANNER_RESTRICTED_MODE_DISMISSED_KEY, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate getBannerItemAriaLabels(): string {\n\t\tswitch (this.workspaceContextService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.EMPTY:\n\t\t\t\treturn localize('restrictedModeBannerAriaLabelWindow', \"Restricted Mode is intended for safe code browsing. Trust this window to enable all features. Use navigation keys to access banner actions.\");\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\treturn localize('restrictedModeBannerAriaLabelFolder', \"Restricted Mode is intended for safe code browsing. Trust this folder to enable all features. Use navigation keys to access banner actions.\");\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn localize('restrictedModeBannerAriaLabelWorkspace', \"Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features. Use navigation keys to access banner actions.\");\n\t\t}\n\t}\n\n\tprivate getBannerItemMessages(): string {\n\t\tswitch (this.workspaceContextService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.EMPTY:\n\t\t\t\treturn localize('restrictedModeBannerMessageWindow', \"Restricted Mode is intended for safe code browsing. Trust this window to enable all features.\");\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\treturn localize('restrictedModeBannerMessageFolder', \"Restricted Mode is intended for safe code browsing. Trust this folder to enable all features.\");\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn localize('restrictedModeBannerMessageWorkspace', \"Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features.\");\n\t\t}\n\t}\n\n\n\tprivate get bannerSetting(): 'always' | 'untilDismissed' | 'never' {\n\t\tconst result = this.configurationService.getValue<'always' | 'untilDismissed' | 'never'>(WORKSPACE_TRUST_BANNER);\n\n\t\t// In serverless environments, we don't need to aggressively show the banner\n\t\tif (result !== 'always' && isWeb && !this.remoteAgentService.getConnection()?.remoteAuthority) {\n\t\t\treturn 'never';\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t//#endregion\n\n\t//#region Statusbar\n\n\tprivate getRestrictedModeStatusbarEntry(): IStatusbarEntry {\n\t\tlet ariaLabel = '';\n\t\tlet toolTip: IMarkdownString | string | undefined;\n\t\tswitch (this.workspaceContextService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.EMPTY: {\n\t\t\t\tariaLabel = localize('status.ariaUntrustedWindow', \"Restricted Mode: Some features are disabled because this window is not trusted.\");\n\t\t\t\ttoolTip = {\n\t\t\t\t\tvalue: localize(\n\t\t\t\t\t\t{ key: 'status.tooltipUntrustedWindow2', comment: ['[abc]({n}) are links.  Only translate `features are disabled` and `window is not trusted`. Do not change brackets and parentheses or {n}'] },\n\t\t\t\t\t\t\"Running in Restricted Mode\\n\\nSome [features are disabled]({0}) because this [window is not trusted]({1}).\",\n\t\t\t\t\t\t`command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`,\n\t\t\t\t\t\t`command:${MANAGE_TRUST_COMMAND_ID}`\n\t\t\t\t\t),\n\t\t\t\t\tisTrusted: true,\n\t\t\t\t\tsupportThemeIcons: true\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase WorkbenchState.FOLDER: {\n\t\t\t\tariaLabel = localize('status.ariaUntrustedFolder', \"Restricted Mode: Some features are disabled because this folder is not trusted.\");\n\t\t\t\ttoolTip = {\n\t\t\t\t\tvalue: localize(\n\t\t\t\t\t\t{ key: 'status.tooltipUntrustedFolder2', comment: ['[abc]({n}) are links.  Only translate `features are disabled` and `folder is not trusted`. Do not change brackets and parentheses or {n}'] },\n\t\t\t\t\t\t\"Running in Restricted Mode\\n\\nSome [features are disabled]({0}) because this [folder is not trusted]({1}).\",\n\t\t\t\t\t\t`command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`,\n\t\t\t\t\t\t`command:${MANAGE_TRUST_COMMAND_ID}`\n\t\t\t\t\t),\n\t\t\t\t\tisTrusted: true,\n\t\t\t\t\tsupportThemeIcons: true\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase WorkbenchState.WORKSPACE: {\n\t\t\t\tariaLabel = localize('status.ariaUntrustedWorkspace', \"Restricted Mode: Some features are disabled because this workspace is not trusted.\");\n\t\t\t\ttoolTip = {\n\t\t\t\t\tvalue: localize(\n\t\t\t\t\t\t{ key: 'status.tooltipUntrustedWorkspace2', comment: ['[abc]({n}) are links. Only translate `features are disabled` and `workspace is not trusted`. Do not change brackets and parentheses or {n}'] },\n\t\t\t\t\t\t\"Running in Restricted Mode\\n\\nSome [features are disabled]({0}) because this [workspace is not trusted]({1}).\",\n\t\t\t\t\t\t`command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`,\n\t\t\t\t\t\t`command:${MANAGE_TRUST_COMMAND_ID}`\n\t\t\t\t\t),\n\t\t\t\t\tisTrusted: true,\n\t\t\t\t\tsupportThemeIcons: true\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tname: localize('status.WorkspaceTrust', \"Workspace Trust\"),\n\t\t\ttext: `$(shield) ${localize('untrusted', \"Restricted Mode\")}`,\n\t\t\tariaLabel: ariaLabel,\n\t\t\ttooltip: toolTip,\n\t\t\tcommand: MANAGE_TRUST_COMMAND_ID,\n\t\t\tkind: 'prominent'\n\t\t};\n\t}\n\n\tprivate updateStatusbarEntry(trusted: boolean): void {\n\t\tif (trusted && this.statusbarEntryAccessor.value) {\n\t\t\tthis.statusbarEntryAccessor.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!trusted && !this.statusbarEntryAccessor.value) {\n\t\t\tconst entry = this.getRestrictedModeStatusbarEntry();\n\t\t\tthis.statusbarEntryAccessor.value = this.statusbarService.addEntry(entry, this.entryId, StatusbarAlignment.LEFT, 0.99 * Number.MAX_VALUE /* Right of remote indicator */);\n\t\t}\n\t}\n\n\t//#endregion\n}\n\nregisterWorkbenchContribution2(WorkspaceTrustRequestHandler.ID, WorkspaceTrustRequestHandler, WorkbenchPhase.BlockRestore);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(WorkspaceTrustUXHandler, LifecyclePhase.Restored);\n\n\n/**\n * Trusted Workspace GUI Editor\n */\nclass WorkspaceTrustEditorInputSerializer implements IEditorSerializer {\n\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tserialize(input: WorkspaceTrustEditorInput): string {\n\t\treturn '';\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService): WorkspaceTrustEditorInput {\n\t\treturn instantiationService.createInstance(WorkspaceTrustEditorInput);\n\t}\n}\n\nRegistry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory)\n\t.registerEditorSerializer(WorkspaceTrustEditorInput.ID, WorkspaceTrustEditorInputSerializer);\n\nRegistry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(\n\tEditorPaneDescriptor.create(\n\t\tWorkspaceTrustEditor,\n\t\tWorkspaceTrustEditor.ID,\n\t\tlocalize('workspaceTrustEditor', \"Workspace Trust Editor\")\n\t),\n\t[\n\t\tnew SyncDescriptor(WorkspaceTrustEditorInput)\n\t]\n);\n\n\n/*\n * Actions\n */\n\n// Configure Workspace Trust Settings\n\nconst CONFIGURE_TRUST_COMMAND_ID = 'workbench.trust.configure';\nconst WORKSPACES_CATEGORY = localize2('workspacesCategory', 'Workspaces');\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: CONFIGURE_TRUST_COMMAND_ID,\n\t\t\ttitle: localize2('configureWorkspaceTrustSettings', \"Configure Workspace Trust Settings\"),\n\t\t\tprecondition: ContextKeyExpr.and(WorkspaceTrustContext.IsEnabled, ContextKeyExpr.equals(`config.${WORKSPACE_TRUST_ENABLED}`, true)),\n\t\t\tcategory: WORKSPACES_CATEGORY,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\taccessor.get(IPreferencesService).openUserSettings({ jsonEditor: false, query: `@tag:${WORKSPACE_TRUST_SETTING_TAG}` });\n\t}\n});\n\n// Manage Workspace Trust\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: MANAGE_TRUST_COMMAND_ID,\n\t\t\ttitle: localize2('manageWorkspaceTrust', \"Manage Workspace Trust\"),\n\t\t\tprecondition: ContextKeyExpr.and(WorkspaceTrustContext.IsEnabled, ContextKeyExpr.equals(`config.${WORKSPACE_TRUST_ENABLED}`, true)),\n\t\t\tcategory: WORKSPACES_CATEGORY,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\n\t\tconst input = instantiationService.createInstance(WorkspaceTrustEditorInput);\n\n\t\teditorService.openEditor(input, { pinned: true });\n\t\treturn;\n\t}\n});\n\n\n/*\n * Configuration\n */\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t.registerConfiguration({\n\t\t...securityConfigurationNodeBase,\n\t\tproperties: {\n\t\t\t[WORKSPACE_TRUST_ENABLED]: {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize('workspace.trust.description', \"Controls whether or not Workspace Trust is enabled within VS Code.\"),\n\t\t\t\ttags: [WORKSPACE_TRUST_SETTING_TAG],\n\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t},\n\t\t\t[WORKSPACE_TRUST_STARTUP_PROMPT]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'once',\n\t\t\t\tdescription: localize('workspace.trust.startupPrompt.description', \"Controls when the startup prompt to trust a workspace is shown.\"),\n\t\t\t\ttags: [WORKSPACE_TRUST_SETTING_TAG],\n\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\tenum: ['always', 'once', 'never'],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize('workspace.trust.startupPrompt.always', \"Ask for trust every time an untrusted workspace is opened.\"),\n\t\t\t\t\tlocalize('workspace.trust.startupPrompt.once', \"Ask for trust the first time an untrusted workspace is opened.\"),\n\t\t\t\t\tlocalize('workspace.trust.startupPrompt.never', \"Do not ask for trust when an untrusted workspace is opened.\"),\n\t\t\t\t]\n\t\t\t},\n\t\t\t[WORKSPACE_TRUST_BANNER]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'untilDismissed',\n\t\t\t\tdescription: localize('workspace.trust.banner.description', \"Controls when the restricted mode banner is shown.\"),\n\t\t\t\ttags: [WORKSPACE_TRUST_SETTING_TAG],\n\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\tenum: ['always', 'untilDismissed', 'never'],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize('workspace.trust.banner.always', \"Show the banner every time an untrusted workspace is open.\"),\n\t\t\t\t\tlocalize('workspace.trust.banner.untilDismissed', \"Show the banner when an untrusted workspace is opened until dismissed.\"),\n\t\t\t\t\tlocalize('workspace.trust.banner.never', \"Do not show the banner when an untrusted workspace is open.\"),\n\t\t\t\t]\n\t\t\t},\n\t\t\t[WORKSPACE_TRUST_UNTRUSTED_FILES]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'prompt',\n\t\t\t\tmarkdownDescription: localize('workspace.trust.untrustedFiles.description', \"Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `#{0}#`.\", WORKSPACE_TRUST_EMPTY_WINDOW),\n\t\t\t\ttags: [WORKSPACE_TRUST_SETTING_TAG],\n\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\tenum: ['prompt', 'open', 'newWindow'],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize('workspace.trust.untrustedFiles.prompt', \"Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.\"),\n\t\t\t\t\tlocalize('workspace.trust.untrustedFiles.open', \"Always allow untrusted files to be introduced to a trusted workspace without prompting.\"),\n\t\t\t\t\tlocalize('workspace.trust.untrustedFiles.newWindow', \"Always open untrusted files in a separate window in restricted mode without prompting.\"),\n\t\t\t\t]\n\t\t\t},\n\t\t\t[WORKSPACE_TRUST_EMPTY_WINDOW]: {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tmarkdownDescription: localize('workspace.trust.emptyWindow.description', \"Controls whether or not the empty window is trusted by default within VS Code. When used with `#{0}#`, you can enable the full functionality of VS Code without prompting in an empty window.\", WORKSPACE_TRUST_UNTRUSTED_FILES),\n\t\t\t\ttags: [WORKSPACE_TRUST_SETTING_TAG],\n\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t}\n\t\t}\n\t});\n\nclass WorkspaceTrustTelemetryContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustEnablementService private readonly workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t) {\n\t\tsuper();\n\n\t\tthis.workspaceTrustManagementService.workspaceTrustInitialized\n\t\t\t.then(() => {\n\t\t\t\tthis.logInitialWorkspaceTrustInfo();\n\t\t\t\tthis.logWorkspaceTrust(this.workspaceTrustManagementService.isWorkspaceTrusted());\n\n\t\t\t\tthis._register(this.workspaceTrustManagementService.onDidChangeTrust(isTrusted => this.logWorkspaceTrust(isTrusted)));\n\t\t\t});\n\t}\n\n\tprivate logInitialWorkspaceTrustInfo(): void {\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\tconst disabledByCliFlag = this.environmentService.disableWorkspaceTrust;\n\n\t\t\ttype WorkspaceTrustDisabledEventClassification = {\n\t\t\t\towner: 'sbatten';\n\t\t\t\tcomment: 'Logged when workspace trust is disabled';\n\t\t\t\treason: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The reason workspace trust is disabled. e.g. cli or setting' };\n\t\t\t};\n\n\t\t\ttype WorkspaceTrustDisabledEvent = {\n\t\t\t\treason: 'setting' | 'cli';\n\t\t\t};\n\n\t\t\tthis.telemetryService.publicLog2<WorkspaceTrustDisabledEvent, WorkspaceTrustDisabledEventClassification>('workspaceTrustDisabled', {\n\t\t\t\treason: disabledByCliFlag ? 'cli' : 'setting'\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttype WorkspaceTrustInfoEventClassification = {\n\t\t\towner: 'sbatten';\n\t\t\tcomment: 'Information about the workspaces trusted on the machine';\n\t\t\ttrustedFoldersCount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of trusted folders on the machine' };\n\t\t};\n\n\t\ttype WorkspaceTrustInfoEvent = {\n\t\t\ttrustedFoldersCount: number;\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<WorkspaceTrustInfoEvent, WorkspaceTrustInfoEventClassification>('workspaceTrustFolderCounts', {\n\t\t\ttrustedFoldersCount: this.workspaceTrustManagementService.getTrustedUris().length,\n\t\t});\n\t}\n\n\tprivate async logWorkspaceTrust(isTrusted: boolean): Promise<void> {\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype WorkspaceTrustStateChangedEvent = {\n\t\t\tworkspaceId: string;\n\t\t\tisTrusted: boolean;\n\t\t};\n\n\t\ttype WorkspaceTrustStateChangedEventClassification = {\n\t\t\towner: 'sbatten';\n\t\t\tcomment: 'Logged when the workspace transitions between trusted and restricted modes';\n\t\t\tworkspaceId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'An id of the workspace' };\n\t\t\tisTrusted: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'true if the workspace is trusted' };\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<WorkspaceTrustStateChangedEvent, WorkspaceTrustStateChangedEventClassification>('workspaceTrustStateChanged', {\n\t\t\tworkspaceId: this.workspaceContextService.getWorkspace().id,\n\t\t\tisTrusted: isTrusted\n\t\t});\n\n\t\tif (isTrusted) {\n\t\t\ttype WorkspaceTrustFolderInfoEventClassification = {\n\t\t\t\towner: 'sbatten';\n\t\t\t\tcomment: 'Some metrics on the trusted workspaces folder structure';\n\t\t\t\ttrustedFolderDepth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of directories deep of the trusted path' };\n\t\t\t\tworkspaceFolderDepth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of directories deep of the workspace path' };\n\t\t\t\tdelta: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The difference between the trusted path and the workspace path directories depth' };\n\t\t\t};\n\n\t\t\ttype WorkspaceTrustFolderInfoEvent = {\n\t\t\t\ttrustedFolderDepth: number;\n\t\t\t\tworkspaceFolderDepth: number;\n\t\t\t\tdelta: number;\n\t\t\t};\n\n\t\t\tconst getDepth = (folder: string): number => {\n\t\t\t\tlet resolvedPath = resolve(folder);\n\n\t\t\t\tlet depth = 0;\n\t\t\t\twhile (dirname(resolvedPath) !== resolvedPath && depth < 100) {\n\t\t\t\t\tresolvedPath = dirname(resolvedPath);\n\t\t\t\t\tdepth++;\n\t\t\t\t}\n\n\t\t\t\treturn depth;\n\t\t\t};\n\n\t\t\tfor (const folder of this.workspaceContextService.getWorkspace().folders) {\n\t\t\t\tconst { trusted, uri } = await this.workspaceTrustManagementService.getUriTrustInfo(folder.uri);\n\t\t\t\tif (!trusted) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst workspaceFolderDepth = getDepth(folder.uri.fsPath);\n\t\t\t\tconst trustedFolderDepth = getDepth(uri.fsPath);\n\t\t\t\tconst delta = workspaceFolderDepth - trustedFolderDepth;\n\n\t\t\t\tthis.telemetryService.publicLog2<WorkspaceTrustFolderInfoEvent, WorkspaceTrustFolderInfoEventClassification>('workspaceFolderDepthBelowTrustedFolder', { workspaceFolderDepth, trustedFolderDepth, delta });\n\t\t\t}\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(WorkspaceTrustTelemetryContribution, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": ["e", "trusted"]
}
