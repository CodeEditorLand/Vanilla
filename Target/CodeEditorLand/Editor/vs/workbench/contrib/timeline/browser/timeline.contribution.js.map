{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/timeline/browser/timeline.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { ILocalizedString } from \"../../../../platform/action/common/action.js\";\nimport {\n\ttype ISubmenuItem,\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tCommandsRegistry,\n\ttype ICommandHandler,\n} from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport { ResourceContextKey } from \"../../../common/contextkeys.js\";\nimport {\n\ttype IViewDescriptor,\n\ttype IViewsRegistry,\n\tExtensions as ViewExtensions,\n} from \"../../../common/views.js\";\nimport { VIEW_CONTAINER } from \"../../files/browser/explorerViewlet.js\";\nimport { ExplorerFolderContext } from \"../../files/common/files.js\";\nimport { ITimelineService, TimelinePaneId } from \"../common/timeline.js\";\nimport {\n\tTimelineHasProviderContext,\n\tTimelineService,\n} from \"../common/timelineService.js\";\nimport { TimelinePane } from \"./timelinePane.js\";\n\nconst timelineViewIcon = registerIcon(\n\t\"timeline-view-icon\",\n\tCodicon.history,\n\tlocalize(\"timelineViewIcon\", \"View icon of the timeline view.\"),\n);\nconst timelineOpenIcon = registerIcon(\n\t\"timeline-open\",\n\tCodicon.history,\n\tlocalize(\"timelineOpenIcon\", \"Icon for the open timeline action.\"),\n);\n\nexport class TimelinePaneDescriptor implements IViewDescriptor {\n\treadonly id = TimelinePaneId;\n\treadonly name: ILocalizedString = TimelinePane.TITLE;\n\treadonly containerIcon = timelineViewIcon;\n\treadonly ctorDescriptor = new SyncDescriptor(TimelinePane);\n\treadonly order = 2;\n\treadonly weight = 30;\n\treadonly collapsed = true;\n\treadonly canToggleVisibility = true;\n\treadonly hideByDefault = false;\n\treadonly canMoveView = true;\n\treadonly when = TimelineHasProviderContext;\n\n\tfocusCommand = { id: \"timeline.focus\" };\n}\n\n// Configuration\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n);\nconfigurationRegistry.registerConfiguration({\n\tid: \"timeline\",\n\torder: 1001,\n\ttitle: localize(\"timelineConfigurationTitle\", \"Timeline\"),\n\ttype: \"object\",\n\tproperties: {\n\t\t\"timeline.pageSize\": {\n\t\t\ttype: [\"number\", \"null\"],\n\t\t\tdefault: null,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"timeline.pageSize\",\n\t\t\t\t\"The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.\",\n\t\t\t),\n\t\t},\n\t\t\"timeline.pageOnScroll\": {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\tdescription: localize(\n\t\t\t\t\"timeline.pageOnScroll\",\n\t\t\t\t\"Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.\",\n\t\t\t),\n\t\t},\n\t},\n});\n\nRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).registerViews(\n\t[new TimelinePaneDescriptor()],\n\tVIEW_CONTAINER,\n);\n\nnamespace OpenTimelineAction {\n\texport const ID = \"files.openTimeline\";\n\texport const LABEL = localize(\"files.openTimeline\", \"Open Timeline\");\n\n\texport function handler(): ICommandHandler {\n\t\treturn (accessor, arg) => {\n\t\t\tconst service = accessor.get(ITimelineService);\n\t\t\treturn service.setUri(arg);\n\t\t};\n\t}\n}\n\nCommandsRegistry.registerCommand(\n\tOpenTimelineAction.ID,\n\tOpenTimelineAction.handler(),\n);\n\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, {\n\tgroup: \"4_timeline\",\n\torder: 1,\n\tcommand: {\n\t\tid: OpenTimelineAction.ID,\n\t\ttitle: OpenTimelineAction.LABEL,\n\t\ticon: timelineOpenIcon,\n\t},\n\twhen: ContextKeyExpr.and(\n\t\tExplorerFolderContext.toNegated(),\n\t\tResourceContextKey.HasResource,\n\t\tTimelineHasProviderContext,\n\t),\n});\n\nconst timelineFilter = registerIcon(\n\t\"timeline-filter\",\n\tCodicon.filter,\n\tlocalize(\"timelineFilter\", \"Icon for the filter timeline action.\"),\n);\n\nMenuRegistry.appendMenuItem(MenuId.TimelineTitle, {\n\tsubmenu: MenuId.TimelineFilterSubMenu,\n\ttitle: localize(\"filterTimeline\", \"Filter Timeline\"),\n\tgroup: \"navigation\",\n\torder: 100,\n\ticon: timelineFilter,\n} satisfies ISubmenuItem);\n\nregisterSingleton(ITimelineService, TimelineService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["OpenTimelineAction"]
}
