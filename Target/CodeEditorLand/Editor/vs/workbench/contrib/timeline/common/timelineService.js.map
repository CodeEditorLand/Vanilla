{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/timeline/common/timelineService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITimelineService, TimelineChangeEvent, TimelineOptions, TimelineProvidersChangeEvent, TimelineProvider, TimelinePaneId } from './timeline.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\n\nexport const TimelineHasProviderContext = new RawContextKey<boolean>('timelineHasProvider', false);\n\nexport class TimelineService implements ITimelineService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeProviders = new Emitter<TimelineProvidersChangeEvent>();\n\treadonly onDidChangeProviders: Event<TimelineProvidersChangeEvent> = this._onDidChangeProviders.event;\n\n\tprivate readonly _onDidChangeTimeline = new Emitter<TimelineChangeEvent>();\n\treadonly onDidChangeTimeline: Event<TimelineChangeEvent> = this._onDidChangeTimeline.event;\n\tprivate readonly _onDidChangeUri = new Emitter<URI>();\n\treadonly onDidChangeUri: Event<URI> = this._onDidChangeUri.event;\n\n\tprivate readonly hasProviderContext: IContextKey<boolean>;\n\tprivate readonly providers = new Map<string, TimelineProvider>();\n\tprivate readonly providerSubscriptions = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IViewsService protected viewsService: IViewsService,\n\t\t@IConfigurationService protected configurationService: IConfigurationService,\n\t\t@IContextKeyService protected contextKeyService: IContextKeyService,\n\t) {\n\t\tthis.hasProviderContext = TimelineHasProviderContext.bindTo(this.contextKeyService);\n\t\tthis.updateHasProviderContext();\n\t}\n\n\tgetSources() {\n\t\treturn [...this.providers.values()].map(p => ({ id: p.id, label: p.label }));\n\t}\n\n\tgetTimeline(id: string, uri: URI, options: TimelineOptions, tokenSource: CancellationTokenSource) {\n\t\tthis.logService.trace(`TimelineService#getTimeline(${id}): uri=${uri.toString()}`);\n\n\t\tconst provider = this.providers.get(id);\n\t\tif (provider === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (typeof provider.scheme === 'string') {\n\t\t\tif (provider.scheme !== '*' && provider.scheme !== uri.scheme) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} else if (!provider.scheme.includes(uri.scheme)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tresult: provider.provideTimeline(uri, options, tokenSource.token)\n\t\t\t\t.then(result => {\n\t\t\t\t\tif (result === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.items = result.items.map(item => ({ ...item, source: provider.id }));\n\t\t\t\t\tresult.items.sort((a, b) => (b.timestamp - a.timestamp) || b.source.localeCompare(a.source, undefined, { numeric: true, sensitivity: 'base' }));\n\n\t\t\t\t\treturn result;\n\t\t\t\t}),\n\t\t\toptions: options,\n\t\t\tsource: provider.id,\n\t\t\ttokenSource: tokenSource,\n\t\t\turi: uri\n\t\t};\n\t}\n\n\tregisterTimelineProvider(provider: TimelineProvider): IDisposable {\n\t\tthis.logService.trace(`TimelineService#registerTimelineProvider: id=${provider.id}`);\n\n\t\tconst id = provider.id;\n\n\t\tconst existing = this.providers.get(id);\n\t\tif (existing) {\n\t\t\t// For now to deal with https://github.com/microsoft/vscode/issues/89553 allow any overwritting here (still will be blocked in the Extension Host)\n\t\t\t// TODO@eamodio: Ultimately will need to figure out a way to unregister providers when the Extension Host restarts/crashes\n\t\t\t// throw new Error(`Timeline Provider ${id} already exists.`);\n\t\t\ttry {\n\t\t\t\texisting?.dispose();\n\t\t\t}\n\t\t\tcatch { }\n\t\t}\n\n\t\tthis.providers.set(id, provider);\n\n\t\tthis.updateHasProviderContext();\n\n\t\tif (provider.onDidChange) {\n\t\t\tthis.providerSubscriptions.set(id, provider.onDidChange(e => this._onDidChangeTimeline.fire(e)));\n\t\t}\n\t\tthis._onDidChangeProviders.fire({ added: [id] });\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.providers.delete(id);\n\t\t\t\tthis._onDidChangeProviders.fire({ removed: [id] });\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterTimelineProvider(id: string): void {\n\t\tthis.logService.trace(`TimelineService#unregisterTimelineProvider: id=${id}`);\n\n\t\tif (!this.providers.has(id)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.providers.delete(id);\n\t\tthis.providerSubscriptions.delete(id);\n\n\t\tthis.updateHasProviderContext();\n\n\t\tthis._onDidChangeProviders.fire({ removed: [id] });\n\t}\n\n\tsetUri(uri: URI) {\n\t\tthis.viewsService.openView(TimelinePaneId, true);\n\t\tthis._onDidChangeUri.fire(uri);\n\t}\n\n\tprivate updateHasProviderContext() {\n\t\tthis.hasProviderContext.set(this.providers.size !== 0);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
