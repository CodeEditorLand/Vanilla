{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/timeline/common/timeline.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { Command } from \"../../../../editor/common/languages.js\";\nimport type { IAccessibilityInformation } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport function toKey(extension: ExtensionIdentifier | string, source: string) {\n\treturn `${typeof extension === \"string\" ? extension : ExtensionIdentifier.toKey(extension)}|${source}`;\n}\n\nexport const TimelinePaneId = \"timeline\";\n\nexport interface TimelineItem {\n\t/**\n\t * The handle of the item must be unique across all the\n\t * timeline items provided by this source.\n\t */\n\thandle: string;\n\n\t/**\n\t * The identifier of the timeline provider this timeline item is from.\n\t */\n\tsource: string;\n\n\tid?: string;\n\n\tlabel: string;\n\tdescription?: string;\n\ttooltip?: string | IMarkdownString | undefined;\n\n\ttimestamp: number;\n\n\taccessibilityInformation?: IAccessibilityInformation;\n\n\ticon?: URI;\n\ticonDark?: URI;\n\tthemeIcon?: ThemeIcon;\n\n\tcommand?: Command;\n\tcontextValue?: string;\n\n\trelativeTime?: string;\n\trelativeTimeFullWord?: string;\n\thideRelativeTime?: boolean;\n}\n\nexport interface TimelineChangeEvent {\n\t/**\n\t * The identifier of the timeline provider this event is from.\n\t */\n\tid: string;\n\n\t/**\n\t * The resource that has timeline entries changed or `undefined`\n\t * if not known.\n\t */\n\turi: URI | undefined;\n\n\t/**\n\t * Whether to drop all timeline entries and refresh them again.\n\t */\n\treset: boolean;\n}\n\nexport interface TimelineOptions {\n\tcursor?: string;\n\tlimit?: number | { timestamp: number; id?: string };\n\tresetCache?: boolean;\n\tcacheResults?: boolean;\n}\n\nexport interface Timeline {\n\t/**\n\t * The identifier of the timeline provider this timeline is from.\n\t */\n\tsource: string;\n\n\titems: TimelineItem[];\n\n\tpaging?: {\n\t\tcursor: string | undefined;\n\t};\n}\n\nexport interface TimelineProvider\n\textends TimelineProviderDescriptor,\n\t\tIDisposable {\n\tonDidChange?: Event<TimelineChangeEvent>;\n\n\tprovideTimeline(\n\t\turi: URI,\n\t\toptions: TimelineOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<Timeline | undefined>;\n}\n\nexport interface TimelineSource {\n\tid: string;\n\tlabel: string;\n}\n\nexport interface TimelineProviderDescriptor {\n\t/**\n\t * An identifier of the source of the timeline items. This can be used to filter sources.\n\t */\n\tid: string;\n\n\t/**\n\t * A human-readable string describing the source of the timeline items. This can be used as the display label when filtering sources.\n\t */\n\tlabel: string;\n\n\t/**\n\t * The resource scheme(s) this timeline provider is providing entries for.\n\t */\n\tscheme: string | string[];\n}\n\nexport interface TimelineProvidersChangeEvent {\n\treadonly added?: string[];\n\treadonly removed?: string[];\n}\n\nexport interface TimelineRequest {\n\treadonly result: Promise<Timeline | undefined>;\n\treadonly options: TimelineOptions;\n\treadonly source: string;\n\treadonly tokenSource: CancellationTokenSource;\n\treadonly uri: URI;\n}\n\nexport interface ITimelineService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeProviders: Event<TimelineProvidersChangeEvent>;\n\tonDidChangeTimeline: Event<TimelineChangeEvent>;\n\tonDidChangeUri: Event<URI>;\n\n\tregisterTimelineProvider(provider: TimelineProvider): IDisposable;\n\tunregisterTimelineProvider(id: string): void;\n\n\tgetSources(): TimelineSource[];\n\n\tgetTimeline(\n\t\tid: string,\n\t\turi: URI,\n\t\toptions: TimelineOptions,\n\t\ttokenSource: CancellationTokenSource,\n\t): TimelineRequest | undefined;\n\n\tsetUri(uri: URI): void;\n}\n\nconst TIMELINE_SERVICE_ID = \"timeline\";\nexport const ITimelineService =\n\tcreateDecorator<ITimelineService>(TIMELINE_SERVICE_ID);\n"],
  "mappings": ";;AAgBA,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAEzB,SAAS,MAAM,WAAyC,QAAgB;AAC9E,SAAO,GAAG,OAAO,cAAc,WAAW,YAAY,oBAAoB,MAAM,SAAS,CAAC,IAAI,MAAM;AACrG;AAFgB;AAIT,MAAM,iBAAiB;AA+I9B,MAAM,sBAAsB;AACrB,MAAM,mBACZ,gBAAkC,mBAAmB;",
  "names": []
}
