var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=(s,e,i,r)=>{for(var n=r>1?void 0:r?p(e,i):e,t=s.length-1,o;t>=0;t--)(o=s[t])&&(n=(r?o(e,i,n):o(n))||n);return r&&n&&c(e,i,n),n},d=(s,e)=>(i,r)=>e(i,r,s);import"../../../../base/common/cancellation.js";import{Emitter as m}from"../../../../base/common/event.js";import"../../../../base/common/lifecycle.js";import"../../../../base/common/uri.js";import{ILogService as g}from"../../../../platform/log/common/log.js";import{TimelinePaneId as C}from"./timeline.js";import{IViewsService as u}from"../../../services/views/common/viewsService.js";import{IConfigurationService as f}from"../../../../platform/configuration/common/configuration.js";import{IContextKeyService as T,RawContextKey as P}from"../../../../platform/contextkey/common/contextkey.js";const S=new P("timelineHasProvider",!1);let v=class{constructor(e,i,r,n){this.logService=e;this.viewsService=i;this.configurationService=r;this.contextKeyService=n;this.hasProviderContext=S.bindTo(this.contextKeyService),this.updateHasProviderContext()}_onDidChangeProviders=new m;onDidChangeProviders=this._onDidChangeProviders.event;_onDidChangeTimeline=new m;onDidChangeTimeline=this._onDidChangeTimeline.event;_onDidChangeUri=new m;onDidChangeUri=this._onDidChangeUri.event;hasProviderContext;providers=new Map;providerSubscriptions=new Map;getSources(){return[...this.providers.values()].map(e=>({id:e.id,label:e.label}))}getTimeline(e,i,r,n){this.logService.trace(`TimelineService#getTimeline(${e}): uri=${i.toString()}`);const t=this.providers.get(e);if(t!==void 0){if(typeof t.scheme=="string"){if(t.scheme!=="*"&&t.scheme!==i.scheme)return}else if(!t.scheme.includes(i.scheme))return;return{result:t.provideTimeline(i,r,n.token).then(o=>{if(o!==void 0)return o.items=o.items.map(a=>({...a,source:t.id})),o.items.sort((a,l)=>l.timestamp-a.timestamp||l.source.localeCompare(a.source,void 0,{numeric:!0,sensitivity:"base"})),o}),options:r,source:t.id,tokenSource:n,uri:i}}}registerTimelineProvider(e){this.logService.trace(`TimelineService#registerTimelineProvider: id=${e.id}`);const i=e.id,r=this.providers.get(i);if(r)try{r?.dispose()}catch{}return this.providers.set(i,e),this.updateHasProviderContext(),e.onDidChange&&this.providerSubscriptions.set(i,e.onDidChange(n=>this._onDidChangeTimeline.fire(n))),this._onDidChangeProviders.fire({added:[i]}),{dispose:()=>{this.providers.delete(i),this._onDidChangeProviders.fire({removed:[i]})}}}unregisterTimelineProvider(e){this.logService.trace(`TimelineService#unregisterTimelineProvider: id=${e}`),this.providers.has(e)&&(this.providers.delete(e),this.providerSubscriptions.delete(e),this.updateHasProviderContext(),this._onDidChangeProviders.fire({removed:[e]}))}setUri(e){this.viewsService.openView(C,!0),this._onDidChangeUri.fire(e)}updateHasProviderContext(){this.hasProviderContext.set(this.providers.size!==0)}};v=h([d(0,g),d(1,u),d(2,f),d(3,T)],v);export{S as TimelineHasProviderContext,v as TimelineService};
