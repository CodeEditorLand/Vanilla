{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/telemetry/browser/telemetry.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from '../../../common/contributions.js';\nimport { LifecyclePhase, ILifecycleService, StartupKind } from '../../../services/lifecycle/common/lifecycle.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { IWorkbenchThemeService } from '../../../services/themes/common/workbenchThemeService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { language } from '../../../../base/common/platform.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport ErrorTelemetry from '../../../../platform/telemetry/browser/errorTelemetry.js';\nimport { TelemetryTrustedValue } from '../../../../platform/telemetry/common/telemetryUtils.js';\nimport { ConfigurationTarget, ConfigurationTargetToString, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ITextFileService, ITextFileSaveEvent, ITextFileResolveEvent } from '../../../services/textfile/common/textfiles.js';\nimport { extname, basename, isEqual, isEqualOrParent } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { getMimeTypes } from '../../../../editor/common/services/languagesAssociations.js';\nimport { hash } from '../../../../base/common/hash.js';\nimport { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';\nimport { ViewContainerLocation } from '../../../common/views.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { isBoolean, isNumber, isString } from '../../../../base/common/types.js';\nimport { LayoutSettings } from '../../../services/layout/browser/layoutService.js';\nimport { AutoRestartConfigurationKey, AutoUpdateConfigurationKey } from '../../extensions/common/extensions.js';\nimport { KEYWORD_ACTIVIATION_SETTING_ID } from '../../chat/common/chatService.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\n\ntype TelemetryData = {\n\tmimeType: TelemetryTrustedValue<string>;\n\text: string;\n\tpath: number;\n\treason?: number;\n\tallowlistedjson?: string;\n};\n\ntype FileTelemetryDataFragment = {\n\tmimeType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The language type of the file (for example XML).' };\n\text: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The file extension of the file (for example xml).' };\n\tpath: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The path of the file as a hash.' };\n\treason?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The reason why a file is read or written. Allows to e.g. distinguish auto save from normal save.' };\n\tallowlistedjson?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the file but only if it matches some well known file names such as package.json or tsconfig.json.' };\n};\n\nexport class TelemetryContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate static ALLOWLIST_JSON = ['package.json', 'package-lock.json', 'tsconfig.json', 'jsconfig.json', 'bower.json', '.eslintrc.json', 'tslint.json', 'composer.json'];\n\tprivate static ALLOWLIST_WORKSPACE_JSON = ['settings.json', 'extensions.json', 'tasks.json', 'launch.json'];\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IKeybindingService keybindingsService: IKeybindingService,\n\t\t@IWorkbenchThemeService themeService: IWorkbenchThemeService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IPaneCompositePartService paneCompositeService: IPaneCompositePartService,\n\t\t@ITextFileService textFileService: ITextFileService\n\t) {\n\t\tsuper();\n\n\t\tconst { filesToOpenOrCreate, filesToDiff, filesToMerge } = environmentService;\n\t\tconst activeViewlet = paneCompositeService.getActivePaneComposite(ViewContainerLocation.Sidebar);\n\n\t\ttype WindowSizeFragment = {\n\t\t\tinnerHeight: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The height of the current window.' };\n\t\t\tinnerWidth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The width of the current window.' };\n\t\t\touterHeight: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The height of the current window with all decoration removed.' };\n\t\t\touterWidth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The width of the current window with all decoration removed.' };\n\t\t\towner: 'bpasero';\n\t\t\tcomment: 'The size of the window.';\n\t\t};\n\n\t\ttype WorkspaceLoadClassification = {\n\t\t\towner: 'bpasero';\n\t\t\temptyWorkbench: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether a folder or workspace is opened or not.' };\n\t\t\twindowSize: WindowSizeFragment;\n\t\t\t'workbench.filesToOpenOrCreate': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of files that should open or be created.' };\n\t\t\t'workbench.filesToDiff': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of files that should be compared.' };\n\t\t\t'workbench.filesToMerge': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of files that should be merged.' };\n\t\t\tcustomKeybindingsCount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of custom keybindings' };\n\t\t\ttheme: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The current theme of the window.' };\n\t\t\tlanguage: { classification: 'SystemMetaData'; purpose: 'BusinessInsight'; comment: 'The display language of the window.' };\n\t\t\tpinnedViewlets: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifiers of views that are pinned.' };\n\t\t\trestoredViewlet?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the view that is restored.' };\n\t\t\trestoredEditors: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of editors that restored.' };\n\t\t\tstartupKind: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'How the window was opened, e.g via reload or not.' };\n\t\t\tcomment: 'Metadata around the workspace that is being loaded into a window.';\n\t\t};\n\n\t\ttype WorkspaceLoadEvent = {\n\t\t\twindowSize: { innerHeight: number; innerWidth: number; outerHeight: number; outerWidth: number };\n\t\t\temptyWorkbench: boolean;\n\t\t\t'workbench.filesToOpenOrCreate': number;\n\t\t\t'workbench.filesToDiff': number;\n\t\t\t'workbench.filesToMerge': number;\n\t\t\tcustomKeybindingsCount: number;\n\t\t\ttheme: string;\n\t\t\tlanguage: string;\n\t\t\tpinnedViewlets: string[];\n\t\t\trestoredViewlet?: string;\n\t\t\trestoredEditors: number;\n\t\t\tstartupKind: StartupKind;\n\t\t};\n\n\t\ttelemetryService.publicLog2<WorkspaceLoadEvent, WorkspaceLoadClassification>('workspaceLoad', {\n\t\t\twindowSize: { innerHeight: mainWindow.innerHeight, innerWidth: mainWindow.innerWidth, outerHeight: mainWindow.outerHeight, outerWidth: mainWindow.outerWidth },\n\t\t\temptyWorkbench: contextService.getWorkbenchState() === WorkbenchState.EMPTY,\n\t\t\t'workbench.filesToOpenOrCreate': filesToOpenOrCreate && filesToOpenOrCreate.length || 0,\n\t\t\t'workbench.filesToDiff': filesToDiff && filesToDiff.length || 0,\n\t\t\t'workbench.filesToMerge': filesToMerge && filesToMerge.length || 0,\n\t\t\tcustomKeybindingsCount: keybindingsService.customKeybindingsCount(),\n\t\t\ttheme: themeService.getColorTheme().id,\n\t\t\tlanguage,\n\t\t\tpinnedViewlets: paneCompositeService.getPinnedPaneCompositeIds(ViewContainerLocation.Sidebar),\n\t\t\trestoredViewlet: activeViewlet ? activeViewlet.getId() : undefined,\n\t\t\trestoredEditors: editorService.visibleEditors.length,\n\t\t\tstartupKind: lifecycleService.startupKind\n\t\t});\n\n\t\t// Error Telemetry\n\t\tthis._register(new ErrorTelemetry(telemetryService));\n\n\t\t//  Files Telemetry\n\t\tthis._register(textFileService.files.onDidResolve(e => this.onTextFileModelResolved(e)));\n\t\tthis._register(textFileService.files.onDidSave(e => this.onTextFileModelSaved(e)));\n\n\t\t// Lifecycle\n\t\tthis._register(lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate onTextFileModelResolved(e: ITextFileResolveEvent): void {\n\t\tconst settingsType = this.getTypeIfSettings(e.model.resource);\n\t\tif (settingsType) {\n\t\t\ttype SettingsReadClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tsettingsType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of the settings file that was read.' };\n\t\t\t\tcomment: 'Track when a settings file was read, for example from an editor.';\n\t\t\t};\n\n\t\t\tthis.telemetryService.publicLog2<{ settingsType: string }, SettingsReadClassification>('settingsRead', { settingsType }); // Do not log read to user settings.json and .vscode folder as a fileGet event as it ruins our JSON usage data\n\t\t} else {\n\t\t\ttype FileGetClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tcomment: 'Track when a file was read, for example from an editor.';\n\t\t\t} & FileTelemetryDataFragment;\n\n\t\t\tthis.telemetryService.publicLog2<TelemetryData, FileGetClassification>('fileGet', this.getTelemetryData(e.model.resource, e.reason));\n\t\t}\n\t}\n\n\tprivate onTextFileModelSaved(e: ITextFileSaveEvent): void {\n\t\tconst settingsType = this.getTypeIfSettings(e.model.resource);\n\t\tif (settingsType) {\n\t\t\ttype SettingsWrittenClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tsettingsType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of the settings file that was written to.' };\n\t\t\t\tcomment: 'Track when a settings file was written to, for example from an editor.';\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<{ settingsType: string }, SettingsWrittenClassification>('settingsWritten', { settingsType }); // Do not log write to user settings.json and .vscode folder as a filePUT event as it ruins our JSON usage data\n\t\t} else {\n\t\t\ttype FilePutClassfication = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tcomment: 'Track when a file was written to, for example from an editor.';\n\t\t\t} & FileTelemetryDataFragment;\n\t\t\tthis.telemetryService.publicLog2<TelemetryData, FilePutClassfication>('filePUT', this.getTelemetryData(e.model.resource, e.reason));\n\t\t}\n\t}\n\n\tprivate getTypeIfSettings(resource: URI): string {\n\t\tif (extname(resource) !== '.json') {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Check for global settings file\n\t\tif (isEqual(resource, this.userDataProfileService.currentProfile.settingsResource)) {\n\t\t\treturn 'global-settings';\n\t\t}\n\n\t\t// Check for keybindings file\n\t\tif (isEqual(resource, this.userDataProfileService.currentProfile.keybindingsResource)) {\n\t\t\treturn 'keybindings';\n\t\t}\n\n\t\t// Check for snippets\n\t\tif (isEqualOrParent(resource, this.userDataProfileService.currentProfile.snippetsHome)) {\n\t\t\treturn 'snippets';\n\t\t}\n\n\t\t// Check for workspace settings file\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tfor (const folder of folders) {\n\t\t\tif (isEqualOrParent(resource, folder.toResource('.vscode'))) {\n\t\t\t\tconst filename = basename(resource);\n\t\t\t\tif (TelemetryContribution.ALLOWLIST_WORKSPACE_JSON.indexOf(filename) > -1) {\n\t\t\t\t\treturn `.vscode/${filename}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tprivate getTelemetryData(resource: URI, reason?: number): TelemetryData {\n\t\tlet ext = extname(resource);\n\t\t// Remove query parameters from the resource extension\n\t\tconst queryStringLocation = ext.indexOf('?');\n\t\text = queryStringLocation !== -1 ? ext.substr(0, queryStringLocation) : ext;\n\t\tconst fileName = basename(resource);\n\t\tconst path = resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n\t\tconst telemetryData = {\n\t\t\tmimeType: new TelemetryTrustedValue(getMimeTypes(resource).join(', ')),\n\t\t\text,\n\t\t\tpath: hash(path),\n\t\t\treason,\n\t\t\tallowlistedjson: undefined as string | undefined\n\t\t};\n\n\t\tif (ext === '.json' && TelemetryContribution.ALLOWLIST_JSON.indexOf(fileName) > -1) {\n\t\t\ttelemetryData['allowlistedjson'] = fileName;\n\t\t}\n\n\t\treturn telemetryData;\n\t}\n}\n\nclass ConfigurationTelemetryContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\t// Debounce the event by 1000 ms and merge all affected keys into one event\n\t\tconst debouncedConfigService = Event.debounce(configurationService.onDidChangeConfiguration, (last, cur) => {\n\t\t\tconst newAffectedKeys: ReadonlySet<string> = last ? new Set([...last.affectedKeys, ...cur.affectedKeys]) : cur.affectedKeys;\n\t\t\treturn { ...cur, affectedKeys: newAffectedKeys };\n\t\t}, 1000, true);\n\n\t\tthis._register(debouncedConfigService(event => {\n\t\t\tif (event.source !== ConfigurationTarget.DEFAULT) {\n\t\t\t\ttype UpdateConfigurationClassification = {\n\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\tcomment: 'Event which fires when user updates settings';\n\t\t\t\t\tconfigurationSource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'What configuration file was updated i.e user or workspace' };\n\t\t\t\t\tconfigurationKeys: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'What configuration keys were updated' };\n\t\t\t\t};\n\t\t\t\ttype UpdateConfigurationEvent = {\n\t\t\t\t\tconfigurationSource: string;\n\t\t\t\t\tconfigurationKeys: string[];\n\t\t\t\t};\n\t\t\t\ttelemetryService.publicLog2<UpdateConfigurationEvent, UpdateConfigurationClassification>('updateConfiguration', {\n\t\t\t\t\tconfigurationSource: ConfigurationTargetToString(event.source),\n\t\t\t\t\tconfigurationKeys: Array.from(event.affectedKeys)\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tconst { user, workspace } = configurationService.keys();\n\t\tfor (const setting of user) {\n\t\t\tthis.reportTelemetry(setting, ConfigurationTarget.USER_LOCAL);\n\t\t}\n\t\tfor (const setting of workspace) {\n\t\t\tthis.reportTelemetry(setting, ConfigurationTarget.WORKSPACE);\n\t\t}\n\t}\n\n\t/**\n\t * Report value of a setting only if it is an enum, boolean, or number or an array of those.\n\t */\n\tprivate getValueToReport(key: string, target: ConfigurationTarget.USER_LOCAL | ConfigurationTarget.WORKSPACE): string | undefined {\n\t\tconst inpsectData = this.configurationService.inspect(key);\n\t\tconst value = target === ConfigurationTarget.USER_LOCAL ? inpsectData.user?.value : inpsectData.workspace?.value;\n\t\tif (isNumber(value) || isBoolean(value)) {\n\t\t\treturn value.toString();\n\t\t}\n\n\t\tconst schema = this.configurationRegistry.getConfigurationProperties()[key];\n\t\tif (isString(value)) {\n\t\t\tif (schema?.enum?.includes(value)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.every(v => isNumber(v) || isBoolean(v) || (isString(v) && schema?.enum?.includes(v)))) {\n\t\t\t\treturn JSON.stringify(value);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate reportTelemetry(key: string, target: ConfigurationTarget.USER_LOCAL | ConfigurationTarget.WORKSPACE): void {\n\t\ttype UpdatedSettingEvent = {\n\t\t\tsettingValue: string | undefined;\n\t\t\tsource: string;\n\t\t};\n\t\tconst source = ConfigurationTargetToString(target);\n\n\t\tswitch (key) {\n\n\t\t\tcase LayoutSettings.ACTIVITY_BAR_LOCATION:\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\tcomment: 'This is used to know where activity bar is shown in the workbench.';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('workbench.activityBar.location', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase AutoUpdateConfigurationKey:\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\tcomment: 'This is used to know if extensions are getting auto updated or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('extensions.autoUpdate', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'files.autoSave':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'isidorn';\n\t\t\t\t\tcomment: 'This is used to know if auto save is enabled or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('files.autoSave', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'editor.stickyScroll.enabled':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'aiday-mar';\n\t\t\t\t\tcomment: 'This is used to know if editor sticky scroll is enabled or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('editor.stickyScroll.enabled', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase KEYWORD_ACTIVIATION_SETTING_ID:\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'bpasero';\n\t\t\t\t\tcomment: 'This is used to know if voice keyword activation is enabled or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('accessibility.voice.keywordActivation', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'window.zoomLevel':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'bpasero';\n\t\t\t\t\tcomment: 'This is used to know if window zoom level is configured or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('window.zoomLevel', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'window.zoomPerWindow':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'bpasero';\n\t\t\t\t\tcomment: 'This is used to know if window zoom per window is configured or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('window.zoomPerWindow', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'window.titleBarStyle':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'benibenj';\n\t\t\t\t\tcomment: 'This is used to know if window title bar style is set to custom or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('window.titleBarStyle', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'window.customTitleBarVisibility':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'benibenj';\n\t\t\t\t\tcomment: 'This is used to know if window custom title bar visibility is configured or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('window.customTitleBarVisibility', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'window.nativeTabs':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'benibenj';\n\t\t\t\t\tcomment: 'This is used to know if window native tabs are enabled or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('window.nativeTabs', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'extensions.verifySignature':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\tcomment: 'This is used to know if extensions signature verification is enabled or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('extensions.verifySignature', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'window.systemColorTheme':\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'bpasero';\n\t\t\t\t\tcomment: 'This is used to know how system color theme is enforced';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('window.systemColorTheme', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\n\t\t\tcase 'window.newWindowProfile':\n\t\t\t\t{\n\t\t\t\t\tconst valueToReport = this.getValueToReport(key, target);\n\t\t\t\t\tconst settingValue =\n\t\t\t\t\t\tvalueToReport === null ? 'null'\n\t\t\t\t\t\t\t: valueToReport === this.userDataProfilesService.defaultProfile.name\n\t\t\t\t\t\t\t\t? 'default'\n\t\t\t\t\t\t\t\t: 'custom';\n\t\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\t\tcomment: 'This is used to know the new window profile that is being used';\n\t\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'if the profile is default or not' };\n\t\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t\t}>('window.newWindowProfile', { settingValue, source });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\tcase AutoRestartConfigurationKey:\n\t\t\t\tthis.telemetryService.publicLog2<UpdatedSettingEvent, {\n\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\tcomment: 'This is used to know if extensions are getting auto restarted or not';\n\t\t\t\t\tsettingValue: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'value of the setting' };\n\t\t\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source of the setting' };\n\t\t\t\t}>('extensions.autoRestart', { settingValue: this.getValueToReport(key, target), source });\n\t\t\t\treturn;\n\t\t}\n\t}\n\n}\n\nconst workbenchContributionRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionRegistry.registerWorkbenchContribution(TelemetryContribution, LifecyclePhase.Restored);\nworkbenchContributionRegistry.registerWorkbenchContribution(ConfigurationTelemetryContribution, LifecyclePhase.Eventually);\n"],
  "mappings": "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",
  "names": []
}
