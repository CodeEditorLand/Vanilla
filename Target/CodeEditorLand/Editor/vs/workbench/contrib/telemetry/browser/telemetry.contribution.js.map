{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/telemetry/browser/telemetry.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { hash } from \"../../../../base/common/hash.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { language } from \"../../../../base/common/platform.js\";\nimport {\n\tbasename,\n\textname,\n\tisEqual,\n\tisEqualOrParent,\n} from \"../../../../base/common/resources.js\";\nimport {\n\tisBoolean,\n\tisNumber,\n\tisString,\n} from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { getMimeTypes } from \"../../../../editor/common/services/languagesAssociations.js\";\nimport {\n\tConfigurationTarget,\n\tConfigurationTargetToString,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport ErrorTelemetry from \"../../../../platform/telemetry/browser/errorTelemetry.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryTrustedValue } from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport { IUserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../common/contributions.js\";\nimport { ViewContainerLocation } from \"../../../common/views.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { LayoutSettings } from \"../../../services/layout/browser/layoutService.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n\ttype StartupKind,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport {\n\ttype ITextFileResolveEvent,\n\ttype ITextFileSaveEvent,\n\tITextFileService,\n} from \"../../../services/textfile/common/textfiles.js\";\nimport { IWorkbenchThemeService } from \"../../../services/themes/common/workbenchThemeService.js\";\nimport { IUserDataProfileService } from \"../../../services/userDataProfile/common/userDataProfile.js\";\nimport { KEYWORD_ACTIVIATION_SETTING_ID } from \"../../chat/common/chatService.js\";\nimport {\n\tAutoRestartConfigurationKey,\n\tAutoUpdateConfigurationKey,\n} from \"../../extensions/common/extensions.js\";\n\ntype TelemetryData = {\n\tmimeType: TelemetryTrustedValue<string>;\n\text: string;\n\tpath: number;\n\treason?: number;\n\tallowlistedjson?: string;\n};\n\ntype FileTelemetryDataFragment = {\n\tmimeType: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The language type of the file (for example XML).\";\n\t};\n\text: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The file extension of the file (for example xml).\";\n\t};\n\tpath: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The path of the file as a hash.\";\n\t};\n\treason?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The reason why a file is read or written. Allows to e.g. distinguish auto save from normal save.\";\n\t};\n\tallowlistedjson?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The name of the file but only if it matches some well known file names such as package.json or tsconfig.json.\";\n\t};\n};\n\nexport class TelemetryContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate static ALLOWLIST_JSON = [\n\t\t\"package.json\",\n\t\t\"package-lock.json\",\n\t\t\"tsconfig.json\",\n\t\t\"jsconfig.json\",\n\t\t\"bower.json\",\n\t\t\".eslintrc.json\",\n\t\t\"tslint.json\",\n\t\t\"composer.json\",\n\t];\n\tprivate static ALLOWLIST_WORKSPACE_JSON = [\n\t\t\"settings.json\",\n\t\t\"extensions.json\",\n\t\t\"tasks.json\",\n\t\t\"launch.json\",\n\t];\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IKeybindingService keybindingsService: IKeybindingService,\n\t\t@IWorkbenchThemeService themeService: IWorkbenchThemeService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IPaneCompositePartService paneCompositeService: IPaneCompositePartService,\n\t\t@ITextFileService textFileService: ITextFileService\n\t) {\n\t\tsuper();\n\n\t\tconst { filesToOpenOrCreate, filesToDiff, filesToMerge } = environmentService;\n\t\tconst activeViewlet = paneCompositeService.getActivePaneComposite(ViewContainerLocation.Sidebar);\n\n\t\ttype WindowSizeFragment = {\n\t\t\tinnerHeight: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The height of the current window.' };\n\t\t\tinnerWidth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The width of the current window.' };\n\t\t\touterHeight: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The height of the current window with all decoration removed.' };\n\t\t\touterWidth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The width of the current window with all decoration removed.' };\n\t\t\towner: 'bpasero';\n\t\t\tcomment: 'The size of the window.';\n\t\t};\n\n\t\ttype WorkspaceLoadClassification = {\n\t\t\towner: 'bpasero';\n\t\t\temptyWorkbench: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether a folder or workspace is opened or not.' };\n\t\t\twindowSize: WindowSizeFragment;\n\t\t\t'workbench.filesToOpenOrCreate': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of files that should open or be created.' };\n\t\t\t'workbench.filesToDiff': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of files that should be compared.' };\n\t\t\t'workbench.filesToMerge': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of files that should be merged.' };\n\t\t\tcustomKeybindingsCount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of custom keybindings' };\n\t\t\ttheme: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The current theme of the window.' };\n\t\t\tlanguage: { classification: 'SystemMetaData'; purpose: 'BusinessInsight'; comment: 'The display language of the window.' };\n\t\t\tpinnedViewlets: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifiers of views that are pinned.' };\n\t\t\trestoredViewlet?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the view that is restored.' };\n\t\t\trestoredEditors: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of editors that restored.' };\n\t\t\tstartupKind: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'How the window was opened, e.g via reload or not.' };\n\t\t\tcomment: 'Metadata around the workspace that is being loaded into a window.';\n\t\t};\n\n\t\ttype WorkspaceLoadEvent = {\n\t\t\twindowSize: { innerHeight: number; innerWidth: number; outerHeight: number; outerWidth: number };\n\t\t\temptyWorkbench: boolean;\n\t\t\t'workbench.filesToOpenOrCreate': number;\n\t\t\t'workbench.filesToDiff': number;\n\t\t\t'workbench.filesToMerge': number;\n\t\t\tcustomKeybindingsCount: number;\n\t\t\ttheme: string;\n\t\t\tlanguage: string;\n\t\t\tpinnedViewlets: string[];\n\t\t\trestoredViewlet?: string;\n\t\t\trestoredEditors: number;\n\t\t\tstartupKind: StartupKind;\n\t\t};\n\n\t\ttelemetryService.publicLog2<WorkspaceLoadEvent, WorkspaceLoadClassification>('workspaceLoad', {\n\t\t\twindowSize: { innerHeight: mainWindow.innerHeight, innerWidth: mainWindow.innerWidth, outerHeight: mainWindow.outerHeight, outerWidth: mainWindow.outerWidth },\n\t\t\temptyWorkbench: contextService.getWorkbenchState() === WorkbenchState.EMPTY,\n\t\t\t'workbench.filesToOpenOrCreate': filesToOpenOrCreate && filesToOpenOrCreate.length || 0,\n\t\t\t'workbench.filesToDiff': filesToDiff && filesToDiff.length || 0,\n\t\t\t'workbench.filesToMerge': filesToMerge && filesToMerge.length || 0,\n\t\t\tcustomKeybindingsCount: keybindingsService.customKeybindingsCount(),\n\t\t\ttheme: themeService.getColorTheme().id,\n\t\t\tlanguage,\n\t\t\tpinnedViewlets: paneCompositeService.getPinnedPaneCompositeIds(ViewContainerLocation.Sidebar),\n\t\t\trestoredViewlet: activeViewlet ? activeViewlet.getId() : undefined,\n\t\t\trestoredEditors: editorService.visibleEditors.length,\n\t\t\tstartupKind: lifecycleService.startupKind\n\t\t});\n\n\t\t// Error Telemetry\n\t\tthis._register(new ErrorTelemetry(telemetryService));\n\n\t\t//  Files Telemetry\n\t\tthis._register(textFileService.files.onDidResolve(e => this.onTextFileModelResolved(e)));\n\t\tthis._register(textFileService.files.onDidSave(e => this.onTextFileModelSaved(e)));\n\n\t\t// Lifecycle\n\t\tthis._register(lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate onTextFileModelResolved(e: ITextFileResolveEvent): void {\n\t\tconst settingsType = this.getTypeIfSettings(e.model.resource);\n\t\tif (settingsType) {\n\t\t\ttype SettingsReadClassification = {\n\t\t\t\towner: \"bpasero\";\n\t\t\t\tsettingsType: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"The type of the settings file that was read.\";\n\t\t\t\t};\n\t\t\t\tcomment: \"Track when a settings file was read, for example from an editor.\";\n\t\t\t};\n\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t{ settingsType: string },\n\t\t\t\tSettingsReadClassification\n\t\t\t>(\"settingsRead\", { settingsType }); // Do not log read to user settings.json and .vscode folder as a fileGet event as it ruins our JSON usage data\n\t\t} else {\n\t\t\ttype FileGetClassification = {\n\t\t\t\towner: \"bpasero\";\n\t\t\t\tcomment: \"Track when a file was read, for example from an editor.\";\n\t\t\t} & FileTelemetryDataFragment;\n\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tTelemetryData,\n\t\t\t\tFileGetClassification\n\t\t\t>(\"fileGet\", this.getTelemetryData(e.model.resource, e.reason));\n\t\t}\n\t}\n\n\tprivate onTextFileModelSaved(e: ITextFileSaveEvent): void {\n\t\tconst settingsType = this.getTypeIfSettings(e.model.resource);\n\t\tif (settingsType) {\n\t\t\ttype SettingsWrittenClassification = {\n\t\t\t\towner: \"bpasero\";\n\t\t\t\tsettingsType: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"The type of the settings file that was written to.\";\n\t\t\t\t};\n\t\t\t\tcomment: \"Track when a settings file was written to, for example from an editor.\";\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t{ settingsType: string },\n\t\t\t\tSettingsWrittenClassification\n\t\t\t>(\"settingsWritten\", { settingsType }); // Do not log write to user settings.json and .vscode folder as a filePUT event as it ruins our JSON usage data\n\t\t} else {\n\t\t\ttype FilePutClassfication = {\n\t\t\t\towner: \"bpasero\";\n\t\t\t\tcomment: \"Track when a file was written to, for example from an editor.\";\n\t\t\t} & FileTelemetryDataFragment;\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tTelemetryData,\n\t\t\t\tFilePutClassfication\n\t\t\t>(\"filePUT\", this.getTelemetryData(e.model.resource, e.reason));\n\t\t}\n\t}\n\n\tprivate getTypeIfSettings(resource: URI): string {\n\t\tif (extname(resource) !== \".json\") {\n\t\t\treturn \"\";\n\t\t}\n\n\t\t// Check for global settings file\n\t\tif (\n\t\t\tisEqual(\n\t\t\t\tresource,\n\t\t\t\tthis.userDataProfileService.currentProfile.settingsResource,\n\t\t\t)\n\t\t) {\n\t\t\treturn \"global-settings\";\n\t\t}\n\n\t\t// Check for keybindings file\n\t\tif (\n\t\t\tisEqual(\n\t\t\t\tresource,\n\t\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t\t)\n\t\t) {\n\t\t\treturn \"keybindings\";\n\t\t}\n\n\t\t// Check for snippets\n\t\tif (\n\t\t\tisEqualOrParent(\n\t\t\t\tresource,\n\t\t\t\tthis.userDataProfileService.currentProfile.snippetsHome,\n\t\t\t)\n\t\t) {\n\t\t\treturn \"snippets\";\n\t\t}\n\n\t\t// Check for workspace settings file\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tfor (const folder of folders) {\n\t\t\tif (isEqualOrParent(resource, folder.toResource(\".vscode\"))) {\n\t\t\t\tconst filename = basename(resource);\n\t\t\t\tif (\n\t\t\t\t\tTelemetryContribution.ALLOWLIST_WORKSPACE_JSON.indexOf(\n\t\t\t\t\t\tfilename,\n\t\t\t\t\t) > -1\n\t\t\t\t) {\n\t\t\t\t\treturn `.vscode/${filename}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tprivate getTelemetryData(resource: URI, reason?: number): TelemetryData {\n\t\tlet ext = extname(resource);\n\t\t// Remove query parameters from the resource extension\n\t\tconst queryStringLocation = ext.indexOf(\"?\");\n\t\text =\n\t\t\tqueryStringLocation !== -1\n\t\t\t\t? ext.substr(0, queryStringLocation)\n\t\t\t\t: ext;\n\t\tconst fileName = basename(resource);\n\t\tconst path =\n\t\t\tresource.scheme === Schemas.file ? resource.fsPath : resource.path;\n\t\tconst telemetryData = {\n\t\t\tmimeType: new TelemetryTrustedValue(\n\t\t\t\tgetMimeTypes(resource).join(\", \"),\n\t\t\t),\n\t\t\text,\n\t\t\tpath: hash(path),\n\t\t\treason,\n\t\t\tallowlistedjson: undefined as string | undefined,\n\t\t};\n\n\t\tif (\n\t\t\text === \".json\" &&\n\t\t\tTelemetryContribution.ALLOWLIST_JSON.indexOf(fileName) > -1\n\t\t) {\n\t\t\ttelemetryData[\"allowlistedjson\"] = fileName;\n\t\t}\n\n\t\treturn telemetryData;\n\t}\n}\n\nclass ConfigurationTelemetryContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate readonly configurationRegistry =\n\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\tConfigurationExtensions.Configuration,\n\t\t);\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\t// Debounce the event by 1000 ms and merge all affected keys into one event\n\t\tconst debouncedConfigService = Event.debounce(configurationService.onDidChangeConfiguration, (last, cur) => {\n\t\t\tconst newAffectedKeys: ReadonlySet<string> = last ? new Set([...last.affectedKeys, ...cur.affectedKeys]) : cur.affectedKeys;\n\t\t\treturn { ...cur, affectedKeys: newAffectedKeys };\n\t\t}, 1000, true);\n\n\t\tthis._register(debouncedConfigService(event => {\n\t\t\tif (event.source !== ConfigurationTarget.DEFAULT) {\n\t\t\t\ttype UpdateConfigurationClassification = {\n\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\tcomment: 'Event which fires when user updates settings';\n\t\t\t\t\tconfigurationSource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'What configuration file was updated i.e user or workspace' };\n\t\t\t\t\tconfigurationKeys: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'What configuration keys were updated' };\n\t\t\t\t};\n\t\t\t\ttype UpdateConfigurationEvent = {\n\t\t\t\t\tconfigurationSource: string;\n\t\t\t\t\tconfigurationKeys: string[];\n\t\t\t\t};\n\t\t\t\ttelemetryService.publicLog2<UpdateConfigurationEvent, UpdateConfigurationClassification>('updateConfiguration', {\n\t\t\t\t\tconfigurationSource: ConfigurationTargetToString(event.source),\n\t\t\t\t\tconfigurationKeys: Array.from(event.affectedKeys)\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tconst { user, workspace } = configurationService.keys();\n\t\tfor (const setting of user) {\n\t\t\tthis.reportTelemetry(setting, ConfigurationTarget.USER_LOCAL);\n\t\t}\n\t\tfor (const setting of workspace) {\n\t\t\tthis.reportTelemetry(setting, ConfigurationTarget.WORKSPACE);\n\t\t}\n\t}\n\n\t/**\n\t * Report value of a setting only if it is an enum, boolean, or number or an array of those.\n\t */\n\tprivate getValueToReport(\n\t\tkey: string,\n\t\ttarget: ConfigurationTarget.USER_LOCAL | ConfigurationTarget.WORKSPACE,\n\t): string | undefined {\n\t\tconst inpsectData = this.configurationService.inspect(key);\n\t\tconst value =\n\t\t\ttarget === ConfigurationTarget.USER_LOCAL\n\t\t\t\t? inpsectData.user?.value\n\t\t\t\t: inpsectData.workspace?.value;\n\t\tif (isNumber(value) || isBoolean(value)) {\n\t\t\treturn value.toString();\n\t\t}\n\n\t\tconst schema =\n\t\t\tthis.configurationRegistry.getConfigurationProperties()[key];\n\t\tif (isString(value)) {\n\t\t\tif (schema?.enum?.includes(value)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t\tif (Array.isArray(value)) {\n\t\t\tif (\n\t\t\t\tvalue.every(\n\t\t\t\t\t(v) =>\n\t\t\t\t\t\tisNumber(v) ||\n\t\t\t\t\t\tisBoolean(v) ||\n\t\t\t\t\t\t(isString(v) && schema?.enum?.includes(v)),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn JSON.stringify(value);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate reportTelemetry(\n\t\tkey: string,\n\t\ttarget: ConfigurationTarget.USER_LOCAL | ConfigurationTarget.WORKSPACE,\n\t): void {\n\t\ttype UpdatedSettingEvent = {\n\t\t\tsettingValue: string | undefined;\n\t\t\tsource: string;\n\t\t};\n\t\tconst source = ConfigurationTargetToString(target);\n\n\t\tswitch (key) {\n\t\t\tcase LayoutSettings.ACTIVITY_BAR_LOCATION:\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"sandy081\";\n\t\t\t\t\t\tcomment: \"This is used to know where activity bar is shown in the workbench.\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"workbench.activityBar.location\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase AutoUpdateConfigurationKey:\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"sandy081\";\n\t\t\t\t\t\tcomment: \"This is used to know if extensions are getting auto updated or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"extensions.autoUpdate\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"files.autoSave\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"isidorn\";\n\t\t\t\t\t\tcomment: \"This is used to know if auto save is enabled or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"files.autoSave\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"editor.stickyScroll.enabled\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"aiday-mar\";\n\t\t\t\t\t\tcomment: \"This is used to know if editor sticky scroll is enabled or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"editor.stickyScroll.enabled\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase KEYWORD_ACTIVIATION_SETTING_ID:\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"bpasero\";\n\t\t\t\t\t\tcomment: \"This is used to know if voice keyword activation is enabled or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"accessibility.voice.keywordActivation\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"window.zoomLevel\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"bpasero\";\n\t\t\t\t\t\tcomment: \"This is used to know if window zoom level is configured or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"window.zoomLevel\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"window.zoomPerWindow\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"bpasero\";\n\t\t\t\t\t\tcomment: \"This is used to know if window zoom per window is configured or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"window.zoomPerWindow\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"window.titleBarStyle\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"benibenj\";\n\t\t\t\t\t\tcomment: \"This is used to know if window title bar style is set to custom or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"window.titleBarStyle\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"window.customTitleBarVisibility\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"benibenj\";\n\t\t\t\t\t\tcomment: \"This is used to know if window custom title bar visibility is configured or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"window.customTitleBarVisibility\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"window.nativeTabs\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"benibenj\";\n\t\t\t\t\t\tcomment: \"This is used to know if window native tabs are enabled or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"window.nativeTabs\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"extensions.verifySignature\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"sandy081\";\n\t\t\t\t\t\tcomment: \"This is used to know if extensions signature verification is enabled or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"extensions.verifySignature\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"window.systemColorTheme\":\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"bpasero\";\n\t\t\t\t\t\tcomment: \"This is used to know how system color theme is enforced\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"window.systemColorTheme\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\n\t\t\tcase \"window.newWindowProfile\": {\n\t\t\t\tconst valueToReport = this.getValueToReport(key, target);\n\t\t\t\tconst settingValue =\n\t\t\t\t\tvalueToReport === null\n\t\t\t\t\t\t? \"null\"\n\t\t\t\t\t\t: valueToReport ===\n\t\t\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile.name\n\t\t\t\t\t\t\t? \"default\"\n\t\t\t\t\t\t\t: \"custom\";\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"sandy081\";\n\t\t\t\t\t\tcomment: \"This is used to know the new window profile that is being used\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"if the profile is default or not\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"window.newWindowProfile\", { settingValue, source });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcase AutoRestartConfigurationKey:\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdatedSettingEvent,\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"sandy081\";\n\t\t\t\t\t\tcomment: \"This is used to know if extensions are getting auto restarted or not\";\n\t\t\t\t\t\tsettingValue: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"value of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\t\tcomment: \"source of the setting\";\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t>(\"extensions.autoRestart\", {\n\t\t\t\t\tsettingValue: this.getValueToReport(key, target),\n\t\t\t\t\tsource,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t}\n\t}\n}\n\nconst workbenchContributionRegistry =\n\tRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionRegistry.registerWorkbenchContribution(\n\tTelemetryContribution,\n\tLifecyclePhase.Restored,\n);\nworkbenchContributionRegistry.registerWorkbenchContribution(\n\tConfigurationTelemetryContribution,\n\tLifecyclePhase.Eventually,\n);\n"],
  "mappings": "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",
  "names": []
}
