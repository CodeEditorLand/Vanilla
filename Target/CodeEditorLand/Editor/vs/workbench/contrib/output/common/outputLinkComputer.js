import*as k from"../../../../base/common/extpath.js";import{Schemas as f}from"../../../../base/common/network.js";import{isWindows as I}from"../../../../base/common/platform.js";import*as P from"../../../../base/common/resources.js";import*as c from"../../../../base/common/strings.js";import{URI as S}from"../../../../base/common/uri.js";import"../../../../base/common/worker/simpleWorker.js";import{Range as v}from"../../../../editor/common/core/range.js";import"../../../../editor/common/languages.js";import{WorkerTextModelSyncServer as C}from"../../../../editor/common/services/textModelSync/textModelSync.impl.js";class m{_requestHandlerBrand;workerTextModelSyncServer=new C;patterns=new Map;constructor(e){this.workerTextModelSyncServer.bindToServer(e)}$setWorkspaceFolders(e){this.computePatterns(e)}computePatterns(e){const n=e.sort((r,o)=>o.length-r.length).map(r=>S.parse(r));for(const r of n){const o=m.createPatterns(r);this.patterns.set(r,o)}}getModel(e){return this.workerTextModelSyncServer.getModel(e)}$computeLinks(e){const n=this.getModel(e);if(!n)return[];const r=[],o=c.splitLines(n.getValue());for(const[s,i]of this.patterns){const a={toResource:t=>typeof t=="string"?P.joinPath(s,t):null};for(let t=0,u=o.length;t<u;t++)r.push(...m.detectLinks(o[t],t+1,i,a))}return r}static createPatterns(e){const n=[],r=e.scheme===f.file?e.fsPath:e.path,o=[r];I&&e.scheme===f.file&&o.push(k.toSlashes(r));for(const s of o){const i=`[^\\s\\(\\):<>'"]`,t=`${`(?:${i}| ${i})`}+\\.${i}+`,u=`${i}+`;n.push(new RegExp(c.escapeRegExpCharacters(s)+`(${t}) on line ((\\d+)(, column (\\d+))?)`,"gi")),n.push(new RegExp(c.escapeRegExpCharacters(s)+`(${t}):line ((\\d+)(, column (\\d+))?)`,"gi")),n.push(new RegExp(c.escapeRegExpCharacters(s)+`(${t})(\\s?\\((\\d+)(,(\\d+))?)\\)`,"gi")),n.push(new RegExp(c.escapeRegExpCharacters(s)+`(${u})(:(\\d+))?(:(\\d+))?`,"gi"))}return n}static detectLinks(e,n,r,o){const s=[];return r.forEach(i=>{i.lastIndex=0;let a,t=0;for(;(a=i.exec(e))!==null;){const u=c.rtrim(a[1],".").replace(/\\/g,"/");let p;try{const l=o.toResource(u);l&&(p=l.toString())}catch{continue}if(a[3]){const l=a[3];if(a[5]){const x=a[5];p=c.format("{0}#{1},{2}",p,l,x)}else p=c.format("{0}#{1}",p,l)}const h=c.rtrim(a[0],"."),d=e.indexOf(h,t);t=d+h.length;const g={startColumn:d+1,startLineNumber:n,endColumn:d+1+h.length,endLineNumber:n};if(s.some(l=>v.areIntersectingOrTouching(l.range,g)))return;s.push({range:g,url:p})}}),s}}function O(R){return new m(R)}export{m as OutputLinkComputer,O as create};
