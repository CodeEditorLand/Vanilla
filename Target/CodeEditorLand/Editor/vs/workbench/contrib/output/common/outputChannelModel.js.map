{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/output/common/outputChannelModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises, ThrottledDelayer } from \"../../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { isCancellationError } from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport { isNumber } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tEditOperation,\n\ttype ISingleEditOperation,\n} from \"../../../../editor/common/core/editOperation.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { ILanguageSelection } from \"../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { IEditorWorkerService } from \"../../../../editor/common/services/editorWorker.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tILogService,\n\ttype ILogger,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport { OutputChannelUpdateMode } from \"../../../services/output/common/output.js\";\n\nexport interface IOutputChannelModel extends IDisposable {\n\treadonly onDispose: Event<void>;\n\tappend(output: string): void;\n\tupdate(\n\t\tmode: OutputChannelUpdateMode,\n\t\ttill: number | undefined,\n\t\timmediate: boolean,\n\t): void;\n\tloadModel(): Promise<ITextModel>;\n\tclear(): void;\n\treplace(value: string): void;\n}\n\nclass OutputFileListener extends Disposable {\n\tprivate readonly _onDidContentChange = new Emitter<number | undefined>();\n\treadonly onDidContentChange: Event<number | undefined> =\n\t\tthis._onDidContentChange.event;\n\n\tprivate watching = false;\n\tprivate syncDelayer: ThrottledDelayer<void>;\n\tprivate etag: string | undefined;\n\n\tconstructor(\n\t\tprivate readonly file: URI,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.syncDelayer = new ThrottledDelayer<void>(500);\n\t}\n\n\twatch(eTag: string | undefined): void {\n\t\tif (!this.watching) {\n\t\t\tthis.etag = eTag;\n\t\t\tthis.poll();\n\t\t\tthis.logService.trace(\"Started polling\", this.file.toString());\n\t\t\tthis.watching = true;\n\t\t}\n\t}\n\n\tprivate poll(): void {\n\t\tconst loop = () => this.doWatch().then(() => this.poll());\n\t\tthis.syncDelayer.trigger(loop).catch((error) => {\n\t\t\tif (!isCancellationError(error)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async doWatch(): Promise<void> {\n\t\tconst stat = await this.fileService.stat(this.file);\n\t\tif (stat.etag !== this.etag) {\n\t\t\tthis.etag = stat.etag;\n\t\t\tthis._onDidContentChange.fire(stat.size);\n\t\t}\n\t}\n\n\tunwatch(): void {\n\t\tif (this.watching) {\n\t\t\tthis.syncDelayer.cancel();\n\t\t\tthis.watching = false;\n\t\t\tthis.logService.trace(\"Stopped polling\", this.file.toString());\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.unwatch();\n\t\tsuper.dispose();\n\t}\n}\n\nexport class FileOutputChannelModel\n\textends Disposable\n\timplements IOutputChannelModel\n{\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\treadonly onDispose: Event<void> = this._onDispose.event;\n\n\tprivate readonly fileHandler: OutputFileListener;\n\tprivate etag: string | undefined = \"\";\n\n\tprivate loadModelPromise: Promise<ITextModel> | null = null;\n\tprivate model: ITextModel | null = null;\n\tprivate modelUpdateInProgress = false;\n\tprivate readonly modelUpdateCancellationSource = this._register(\n\t\tnew MutableDisposable<CancellationTokenSource>(),\n\t);\n\tprivate readonly appendThrottler = this._register(\n\t\tnew ThrottledDelayer(300),\n\t);\n\tprivate replacePromise: Promise<void> | undefined;\n\n\tprivate startOffset = 0;\n\tprivate endOffset = 0;\n\n\tconstructor(\n\t\tprivate readonly modelUri: URI,\n\t\tprivate readonly language: ILanguageSelection,\n\t\tprivate readonly file: URI,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.fileHandler = this._register(new OutputFileListener(this.file, this.fileService, logService));\n\t\tthis._register(this.fileHandler.onDidContentChange(size => this.onDidContentChange(size)));\n\t\tthis._register(toDisposable(() => this.fileHandler.unwatch()));\n\t}\n\n\tappend(message: string): void {\n\t\tthrow new Error(\"Not supported\");\n\t}\n\n\treplace(message: string): void {\n\t\tthrow new Error(\"Not supported\");\n\t}\n\n\tclear(): void {\n\t\tthis.update(OutputChannelUpdateMode.Clear, this.endOffset, true);\n\t}\n\n\tupdate(\n\t\tmode: OutputChannelUpdateMode,\n\t\ttill: number | undefined,\n\t\timmediate: boolean,\n\t): void {\n\t\tconst loadModelPromise: Promise<any> = this.loadModelPromise\n\t\t\t? this.loadModelPromise\n\t\t\t: Promise.resolve();\n\t\tloadModelPromise.then(() => this.doUpdate(mode, till, immediate));\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\tthis.loadModelPromise = Promises.withAsyncBody<ITextModel>(\n\t\t\tasync (c, e) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet content = \"\";\n\t\t\t\t\tif (await this.fileService.exists(this.file)) {\n\t\t\t\t\t\tconst fileContent = await this.fileService.readFile(\n\t\t\t\t\t\t\tthis.file,\n\t\t\t\t\t\t\t{ position: this.startOffset },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.endOffset =\n\t\t\t\t\t\t\tthis.startOffset + fileContent.value.byteLength;\n\t\t\t\t\t\tthis.etag = fileContent.etag;\n\t\t\t\t\t\tcontent = fileContent.value.toString();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.startOffset = 0;\n\t\t\t\t\t\tthis.endOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t\tc(this.createModel(content));\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\treturn this.loadModelPromise;\n\t}\n\n\tprivate createModel(content: string): ITextModel {\n\t\tif (this.model) {\n\t\t\tthis.model.setValue(content);\n\t\t} else {\n\t\t\tthis.model = this.modelService.createModel(\n\t\t\t\tcontent,\n\t\t\t\tthis.language,\n\t\t\t\tthis.modelUri,\n\t\t\t);\n\t\t\tthis.fileHandler.watch(this.etag);\n\t\t\tconst disposable = this.model.onWillDispose(() => {\n\t\t\t\tthis.cancelModelUpdate();\n\t\t\t\tthis.fileHandler.unwatch();\n\t\t\t\tthis.model = null;\n\t\t\t\tdispose(disposable);\n\t\t\t});\n\t\t}\n\t\treturn this.model;\n\t}\n\n\tprivate doUpdate(\n\t\tmode: OutputChannelUpdateMode,\n\t\ttill: number | undefined,\n\t\timmediate: boolean,\n\t): void {\n\t\tif (\n\t\t\tmode === OutputChannelUpdateMode.Clear ||\n\t\t\tmode === OutputChannelUpdateMode.Replace\n\t\t) {\n\t\t\tthis.startOffset = this.endOffset = isNumber(till)\n\t\t\t\t? till\n\t\t\t\t: this.endOffset;\n\t\t\tthis.cancelModelUpdate();\n\t\t}\n\t\tif (!this.model) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.modelUpdateInProgress = true;\n\t\tif (!this.modelUpdateCancellationSource.value) {\n\t\t\tthis.modelUpdateCancellationSource.value =\n\t\t\t\tnew CancellationTokenSource();\n\t\t}\n\t\tconst token = this.modelUpdateCancellationSource.value.token;\n\n\t\tif (mode === OutputChannelUpdateMode.Clear) {\n\t\t\tthis.clearContent(this.model);\n\t\t} else if (mode === OutputChannelUpdateMode.Replace) {\n\t\t\tthis.replacePromise = this.replaceContent(\n\t\t\t\tthis.model,\n\t\t\t\ttoken,\n\t\t\t).finally(() => (this.replacePromise = undefined));\n\t\t} else {\n\t\t\tthis.appendContent(this.model, immediate, token);\n\t\t}\n\t}\n\n\tprivate clearContent(model: ITextModel): void {\n\t\tthis.doUpdateModel(\n\t\t\tmodel,\n\t\t\t[EditOperation.delete(model.getFullModelRange())],\n\t\t\tVSBuffer.fromString(\"\"),\n\t\t);\n\t}\n\n\tprivate appendContent(\n\t\tmodel: ITextModel,\n\t\timmediate: boolean,\n\t\ttoken: CancellationToken,\n\t): void {\n\t\tthis.appendThrottler\n\t\t\t.trigger(\n\t\t\t\tasync () => {\n\t\t\t\t\t/* Abort if operation is cancelled */\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Wait for replace to finish */\n\t\t\t\t\tif (this.replacePromise) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.replacePromise;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t/* Ignore */\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/* Abort if operation is cancelled */\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Get content to append */\n\t\t\t\t\tconst contentToAppend = await this.getContentToUpdate();\n\t\t\t\t\t/* Abort if operation is cancelled */\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Appned Content */\n\t\t\t\t\tconst lastLine = model.getLineCount();\n\t\t\t\t\tconst lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\t\t\t\tconst edits = [\n\t\t\t\t\t\tEditOperation.insert(\n\t\t\t\t\t\t\tnew Position(lastLine, lastLineMaxColumn),\n\t\t\t\t\t\t\tcontentToAppend.toString(),\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t\tthis.doUpdateModel(model, edits, contentToAppend);\n\t\t\t\t},\n\t\t\t\timmediate ? 0 : undefined,\n\t\t\t)\n\t\t\t.catch((error) => {\n\t\t\t\tif (!isCancellationError(error)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate async replaceContent(\n\t\tmodel: ITextModel,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\t/* Get content to replace */\n\t\tconst contentToReplace = await this.getContentToUpdate();\n\t\t/* Abort if operation is cancelled */\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* Compute Edits */\n\t\tconst edits = await this.getReplaceEdits(\n\t\t\tmodel,\n\t\t\tcontentToReplace.toString(),\n\t\t);\n\t\t/* Abort if operation is cancelled */\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* Apply Edits */\n\t\tthis.doUpdateModel(model, edits, contentToReplace);\n\t}\n\n\tprivate async getReplaceEdits(\n\t\tmodel: ITextModel,\n\t\tcontentToReplace: string,\n\t): Promise<ISingleEditOperation[]> {\n\t\tif (!contentToReplace) {\n\t\t\treturn [EditOperation.delete(model.getFullModelRange())];\n\t\t}\n\t\tif (contentToReplace !== model.getValue()) {\n\t\t\tconst edits =\n\t\t\t\tawait this.editorWorkerService.computeMoreMinimalEdits(\n\t\t\t\t\tmodel.uri,\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: contentToReplace.toString(),\n\t\t\t\t\t\t\trange: model.getFullModelRange(),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t);\n\t\t\tif (edits?.length) {\n\t\t\t\treturn edits.map((edit) =>\n\t\t\t\t\tEditOperation.replace(Range.lift(edit.range), edit.text),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate doUpdateModel(\n\t\tmodel: ITextModel,\n\t\tedits: ISingleEditOperation[],\n\t\tcontent: VSBuffer,\n\t): void {\n\t\tif (edits.length) {\n\t\t\tmodel.applyEdits(edits);\n\t\t}\n\t\tthis.endOffset = this.endOffset + content.byteLength;\n\t\tthis.modelUpdateInProgress = false;\n\t}\n\n\tprotected cancelModelUpdate(): void {\n\t\tthis.modelUpdateCancellationSource.value?.cancel();\n\t\tthis.modelUpdateCancellationSource.value = undefined;\n\t\tthis.appendThrottler.cancel();\n\t\tthis.replacePromise = undefined;\n\t\tthis.modelUpdateInProgress = false;\n\t}\n\n\tprivate async getContentToUpdate(): Promise<VSBuffer> {\n\t\tconst content = await this.fileService.readFile(this.file, {\n\t\t\tposition: this.endOffset,\n\t\t});\n\t\tthis.etag = content.etag;\n\t\treturn content.value;\n\t}\n\n\tprivate onDidContentChange(size: number | undefined): void {\n\t\tif (this.model) {\n\t\t\tif (!this.modelUpdateInProgress) {\n\t\t\t\tif (isNumber(size) && this.endOffset > size) {\n\t\t\t\t\t// Reset - Content is removed\n\t\t\t\t\tthis.update(OutputChannelUpdateMode.Clear, 0, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.update(\n\t\t\t\tOutputChannelUpdateMode.Append,\n\t\t\t\tundefined,\n\t\t\t\tfalse /* Not needed to update immediately. Wait to collect more changes and update. */,\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected isVisible(): boolean {\n\t\treturn !!this.model;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nclass OutputChannelBackedByFile\n\textends FileOutputChannelModel\n\timplements IOutputChannelModel\n{\n\tprivate logger: ILogger;\n\tprivate _offset: number;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tlanguage: ILanguageSelection,\n\t\tfile: URI,\n\t\t@IFileService fileService: IFileService,\n\t\t@IModelService modelService: IModelService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService,\n\t) {\n\t\tsuper(\n\t\t\tmodelUri,\n\t\t\tlanguage,\n\t\t\tfile,\n\t\t\tfileService,\n\t\t\tmodelService,\n\t\t\tlogService,\n\t\t\teditorWorkerService,\n\t\t);\n\n\t\t// Donot rotate to check for the file reset\n\t\tthis.logger = loggerService.createLogger(file, {\n\t\t\tlogLevel: \"always\",\n\t\t\tdonotRotate: true,\n\t\t\tdonotUseFormatters: true,\n\t\t\thidden: true,\n\t\t});\n\t\tthis._offset = 0;\n\t}\n\n\toverride append(message: string): void {\n\t\tthis.write(message);\n\t\tthis.update(\n\t\t\tOutputChannelUpdateMode.Append,\n\t\t\tundefined,\n\t\t\tthis.isVisible(),\n\t\t);\n\t}\n\n\toverride replace(message: string): void {\n\t\tconst till = this._offset;\n\t\tthis.write(message);\n\t\tthis.update(OutputChannelUpdateMode.Replace, till, true);\n\t}\n\n\tprivate write(content: string): void {\n\t\tthis._offset += VSBuffer.fromString(content).byteLength;\n\t\tthis.logger.info(content);\n\t\tif (this.isVisible()) {\n\t\t\tthis.logger.flush();\n\t\t}\n\t}\n}\n\nexport class DelegatedOutputChannelModel\n\textends Disposable\n\timplements IOutputChannelModel\n{\n\tprivate readonly _onDispose: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDispose: Event<void> = this._onDispose.event;\n\n\tprivate readonly outputChannelModel: Promise<IOutputChannelModel>;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tlanguage: ILanguageSelection,\n\t\toutputDir: Promise<URI>,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\t\tthis.outputChannelModel = this.createOutputChannelModel(id, modelUri, language, outputDir);\n\t}\n\n\tprivate async createOutputChannelModel(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tlanguage: ILanguageSelection,\n\t\toutputDirPromise: Promise<URI>,\n\t): Promise<IOutputChannelModel> {\n\t\tconst outputDir = await outputDirPromise;\n\t\tconst file = resources.joinPath(\n\t\t\toutputDir,\n\t\t\t`${id.replace(/[\\\\/:*?\"<>|]/g, \"\")}.log`,\n\t\t);\n\t\tawait this.fileService.createFile(file);\n\t\tconst outputChannelModel = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tOutputChannelBackedByFile,\n\t\t\t\tid,\n\t\t\t\tmodelUri,\n\t\t\t\tlanguage,\n\t\t\t\tfile,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\toutputChannelModel.onDispose(() => this._onDispose.fire()),\n\t\t);\n\t\treturn outputChannelModel;\n\t}\n\n\tappend(output: string): void {\n\t\tthis.outputChannelModel.then((outputChannelModel) =>\n\t\t\toutputChannelModel.append(output),\n\t\t);\n\t}\n\n\tupdate(\n\t\tmode: OutputChannelUpdateMode,\n\t\ttill: number | undefined,\n\t\timmediate: boolean,\n\t): void {\n\t\tthis.outputChannelModel.then((outputChannelModel) =>\n\t\t\toutputChannelModel.update(mode, till, immediate),\n\t\t);\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\treturn this.outputChannelModel.then((outputChannelModel) =>\n\t\t\toutputChannelModel.loadModel(),\n\t\t);\n\t}\n\n\tclear(): void {\n\t\tthis.outputChannelModel.then((outputChannelModel) =>\n\t\t\toutputChannelModel.clear(),\n\t\t);\n\t}\n\n\treplace(value: string): void {\n\t\tthis.outputChannelModel.then((outputChannelModel) =>\n\t\t\toutputChannelModel.replace(value),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
