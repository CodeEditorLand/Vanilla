{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/output/common/outputChannelModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Promises, ThrottledDelayer } from '../../../../base/common/async.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageSelection } from '../../../../editor/common/languages/language.js';\nimport { Disposable, toDisposable, IDisposable, dispose, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isNumber } from '../../../../base/common/types.js';\nimport { EditOperation, ISingleEditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { ILogger, ILoggerService, ILogService } from '../../../../platform/log/common/log.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { OutputChannelUpdateMode } from '../../../services/output/common/output.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\n\nexport interface IOutputChannelModel extends IDisposable {\n\treadonly onDispose: Event<void>;\n\tappend(output: string): void;\n\tupdate(mode: OutputChannelUpdateMode, till: number | undefined, immediate: boolean): void;\n\tloadModel(): Promise<ITextModel>;\n\tclear(): void;\n\treplace(value: string): void;\n}\n\nclass OutputFileListener extends Disposable {\n\n\tprivate readonly _onDidContentChange = new Emitter<number | undefined>();\n\treadonly onDidContentChange: Event<number | undefined> = this._onDidContentChange.event;\n\n\tprivate watching: boolean = false;\n\tprivate syncDelayer: ThrottledDelayer<void>;\n\tprivate etag: string | undefined;\n\n\tconstructor(\n\t\tprivate readonly file: URI,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.syncDelayer = new ThrottledDelayer<void>(500);\n\t}\n\n\twatch(eTag: string | undefined): void {\n\t\tif (!this.watching) {\n\t\t\tthis.etag = eTag;\n\t\t\tthis.poll();\n\t\t\tthis.logService.trace('Started polling', this.file.toString());\n\t\t\tthis.watching = true;\n\t\t}\n\t}\n\n\tprivate poll(): void {\n\t\tconst loop = () => this.doWatch().then(() => this.poll());\n\t\tthis.syncDelayer.trigger(loop).catch(error => {\n\t\t\tif (!isCancellationError(error)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async doWatch(): Promise<void> {\n\t\tconst stat = await this.fileService.stat(this.file);\n\t\tif (stat.etag !== this.etag) {\n\t\t\tthis.etag = stat.etag;\n\t\t\tthis._onDidContentChange.fire(stat.size);\n\t\t}\n\t}\n\n\tunwatch(): void {\n\t\tif (this.watching) {\n\t\t\tthis.syncDelayer.cancel();\n\t\t\tthis.watching = false;\n\t\t\tthis.logService.trace('Stopped polling', this.file.toString());\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.unwatch();\n\t\tsuper.dispose();\n\t}\n}\n\nexport class FileOutputChannelModel extends Disposable implements IOutputChannelModel {\n\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\treadonly onDispose: Event<void> = this._onDispose.event;\n\n\tprivate readonly fileHandler: OutputFileListener;\n\tprivate etag: string | undefined = '';\n\n\tprivate loadModelPromise: Promise<ITextModel> | null = null;\n\tprivate model: ITextModel | null = null;\n\tprivate modelUpdateInProgress: boolean = false;\n\tprivate readonly modelUpdateCancellationSource = this._register(new MutableDisposable<CancellationTokenSource>());\n\tprivate readonly appendThrottler = this._register(new ThrottledDelayer(300));\n\tprivate replacePromise: Promise<void> | undefined;\n\n\tprivate startOffset: number = 0;\n\tprivate endOffset: number = 0;\n\n\tconstructor(\n\t\tprivate readonly modelUri: URI,\n\t\tprivate readonly language: ILanguageSelection,\n\t\tprivate readonly file: URI,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.fileHandler = this._register(new OutputFileListener(this.file, this.fileService, logService));\n\t\tthis._register(this.fileHandler.onDidContentChange(size => this.onDidContentChange(size)));\n\t\tthis._register(toDisposable(() => this.fileHandler.unwatch()));\n\t}\n\n\tappend(message: string): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\treplace(message: string): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tclear(): void {\n\t\tthis.update(OutputChannelUpdateMode.Clear, this.endOffset, true);\n\t}\n\n\tupdate(mode: OutputChannelUpdateMode, till: number | undefined, immediate: boolean): void {\n\t\tconst loadModelPromise: Promise<any> = this.loadModelPromise ? this.loadModelPromise : Promise.resolve();\n\t\tloadModelPromise.then(() => this.doUpdate(mode, till, immediate));\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\tthis.loadModelPromise = Promises.withAsyncBody<ITextModel>(async (c, e) => {\n\t\t\ttry {\n\t\t\t\tlet content = '';\n\t\t\t\tif (await this.fileService.exists(this.file)) {\n\t\t\t\t\tconst fileContent = await this.fileService.readFile(this.file, { position: this.startOffset });\n\t\t\t\t\tthis.endOffset = this.startOffset + fileContent.value.byteLength;\n\t\t\t\t\tthis.etag = fileContent.etag;\n\t\t\t\t\tcontent = fileContent.value.toString();\n\t\t\t\t} else {\n\t\t\t\t\tthis.startOffset = 0;\n\t\t\t\t\tthis.endOffset = 0;\n\t\t\t\t}\n\t\t\t\tc(this.createModel(content));\n\t\t\t} catch (error) {\n\t\t\t\te(error);\n\t\t\t}\n\t\t});\n\t\treturn this.loadModelPromise;\n\t}\n\n\tprivate createModel(content: string): ITextModel {\n\t\tif (this.model) {\n\t\t\tthis.model.setValue(content);\n\t\t} else {\n\t\t\tthis.model = this.modelService.createModel(content, this.language, this.modelUri);\n\t\t\tthis.fileHandler.watch(this.etag);\n\t\t\tconst disposable = this.model.onWillDispose(() => {\n\t\t\t\tthis.cancelModelUpdate();\n\t\t\t\tthis.fileHandler.unwatch();\n\t\t\t\tthis.model = null;\n\t\t\t\tdispose(disposable);\n\t\t\t});\n\t\t}\n\t\treturn this.model;\n\t}\n\n\tprivate doUpdate(mode: OutputChannelUpdateMode, till: number | undefined, immediate: boolean): void {\n\t\tif (mode === OutputChannelUpdateMode.Clear || mode === OutputChannelUpdateMode.Replace) {\n\t\t\tthis.startOffset = this.endOffset = isNumber(till) ? till : this.endOffset;\n\t\t\tthis.cancelModelUpdate();\n\t\t}\n\t\tif (!this.model) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.modelUpdateInProgress = true;\n\t\tif (!this.modelUpdateCancellationSource.value) {\n\t\t\tthis.modelUpdateCancellationSource.value = new CancellationTokenSource();\n\t\t}\n\t\tconst token = this.modelUpdateCancellationSource.value.token;\n\n\t\tif (mode === OutputChannelUpdateMode.Clear) {\n\t\t\tthis.clearContent(this.model);\n\t\t}\n\n\t\telse if (mode === OutputChannelUpdateMode.Replace) {\n\t\t\tthis.replacePromise = this.replaceContent(this.model, token).finally(() => this.replacePromise = undefined);\n\t\t}\n\n\t\telse {\n\t\t\tthis.appendContent(this.model, immediate, token);\n\t\t}\n\t}\n\n\tprivate clearContent(model: ITextModel): void {\n\t\tthis.doUpdateModel(model, [EditOperation.delete(model.getFullModelRange())], VSBuffer.fromString(''));\n\t}\n\n\tprivate appendContent(model: ITextModel, immediate: boolean, token: CancellationToken): void {\n\t\tthis.appendThrottler.trigger(async () => {\n\t\t\t/* Abort if operation is cancelled */\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Wait for replace to finish */\n\t\t\tif (this.replacePromise) {\n\t\t\t\ttry { await this.replacePromise; } catch (e) { /* Ignore */ }\n\t\t\t\t/* Abort if operation is cancelled */\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Get content to append */\n\t\t\tconst contentToAppend = await this.getContentToUpdate();\n\t\t\t/* Abort if operation is cancelled */\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Appned Content */\n\t\t\tconst lastLine = model.getLineCount();\n\t\t\tconst lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\t\tconst edits = [EditOperation.insert(new Position(lastLine, lastLineMaxColumn), contentToAppend.toString())];\n\t\t\tthis.doUpdateModel(model, edits, contentToAppend);\n\t\t}, immediate ? 0 : undefined).catch(error => {\n\t\t\tif (!isCancellationError(error)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async replaceContent(model: ITextModel, token: CancellationToken): Promise<void> {\n\t\t/* Get content to replace */\n\t\tconst contentToReplace = await this.getContentToUpdate();\n\t\t/* Abort if operation is cancelled */\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* Compute Edits */\n\t\tconst edits = await this.getReplaceEdits(model, contentToReplace.toString());\n\t\t/* Abort if operation is cancelled */\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* Apply Edits */\n\t\tthis.doUpdateModel(model, edits, contentToReplace);\n\t}\n\n\tprivate async getReplaceEdits(model: ITextModel, contentToReplace: string): Promise<ISingleEditOperation[]> {\n\t\tif (!contentToReplace) {\n\t\t\treturn [EditOperation.delete(model.getFullModelRange())];\n\t\t}\n\t\tif (contentToReplace !== model.getValue()) {\n\t\t\tconst edits = await this.editorWorkerService.computeMoreMinimalEdits(model.uri, [{ text: contentToReplace.toString(), range: model.getFullModelRange() }]);\n\t\t\tif (edits?.length) {\n\t\t\t\treturn edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate doUpdateModel(model: ITextModel, edits: ISingleEditOperation[], content: VSBuffer): void {\n\t\tif (edits.length) {\n\t\t\tmodel.applyEdits(edits);\n\t\t}\n\t\tthis.endOffset = this.endOffset + content.byteLength;\n\t\tthis.modelUpdateInProgress = false;\n\t}\n\n\tprotected cancelModelUpdate(): void {\n\t\tthis.modelUpdateCancellationSource.value?.cancel();\n\t\tthis.modelUpdateCancellationSource.value = undefined;\n\t\tthis.appendThrottler.cancel();\n\t\tthis.replacePromise = undefined;\n\t\tthis.modelUpdateInProgress = false;\n\t}\n\n\tprivate async getContentToUpdate(): Promise<VSBuffer> {\n\t\tconst content = await this.fileService.readFile(this.file, { position: this.endOffset });\n\t\tthis.etag = content.etag;\n\t\treturn content.value;\n\t}\n\n\tprivate onDidContentChange(size: number | undefined): void {\n\t\tif (this.model) {\n\t\t\tif (!this.modelUpdateInProgress) {\n\t\t\t\tif (isNumber(size) && this.endOffset > size) {\n\t\t\t\t\t// Reset - Content is removed\n\t\t\t\t\tthis.update(OutputChannelUpdateMode.Clear, 0, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.update(OutputChannelUpdateMode.Append, undefined, false /* Not needed to update immediately. Wait to collect more changes and update. */);\n\t\t}\n\t}\n\n\tprotected isVisible(): boolean {\n\t\treturn !!this.model;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nclass OutputChannelBackedByFile extends FileOutputChannelModel implements IOutputChannelModel {\n\n\tprivate logger: ILogger;\n\tprivate _offset: number;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tlanguage: ILanguageSelection,\n\t\tfile: URI,\n\t\t@IFileService fileService: IFileService,\n\t\t@IModelService modelService: IModelService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService\n\t) {\n\t\tsuper(modelUri, language, file, fileService, modelService, logService, editorWorkerService);\n\n\t\t// Donot rotate to check for the file reset\n\t\tthis.logger = loggerService.createLogger(file, { logLevel: 'always', donotRotate: true, donotUseFormatters: true, hidden: true });\n\t\tthis._offset = 0;\n\t}\n\n\toverride append(message: string): void {\n\t\tthis.write(message);\n\t\tthis.update(OutputChannelUpdateMode.Append, undefined, this.isVisible());\n\t}\n\n\toverride replace(message: string): void {\n\t\tconst till = this._offset;\n\t\tthis.write(message);\n\t\tthis.update(OutputChannelUpdateMode.Replace, till, true);\n\t}\n\n\tprivate write(content: string): void {\n\t\tthis._offset += VSBuffer.fromString(content).byteLength;\n\t\tthis.logger.info(content);\n\t\tif (this.isVisible()) {\n\t\t\tthis.logger.flush();\n\t\t}\n\t}\n\n}\n\nexport class DelegatedOutputChannelModel extends Disposable implements IOutputChannelModel {\n\n\tprivate readonly _onDispose: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDispose: Event<void> = this._onDispose.event;\n\n\tprivate readonly outputChannelModel: Promise<IOutputChannelModel>;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tlanguage: ILanguageSelection,\n\t\toutputDir: Promise<URI>,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\t\tthis.outputChannelModel = this.createOutputChannelModel(id, modelUri, language, outputDir);\n\t}\n\n\tprivate async createOutputChannelModel(id: string, modelUri: URI, language: ILanguageSelection, outputDirPromise: Promise<URI>): Promise<IOutputChannelModel> {\n\t\tconst outputDir = await outputDirPromise;\n\t\tconst file = resources.joinPath(outputDir, `${id.replace(/[\\\\/:\\*\\?\"<>\\|]/g, '')}.log`);\n\t\tawait this.fileService.createFile(file);\n\t\tconst outputChannelModel = this._register(this.instantiationService.createInstance(OutputChannelBackedByFile, id, modelUri, language, file));\n\t\tthis._register(outputChannelModel.onDispose(() => this._onDispose.fire()));\n\t\treturn outputChannelModel;\n\t}\n\n\tappend(output: string): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.append(output));\n\t}\n\n\tupdate(mode: OutputChannelUpdateMode, till: number | undefined, immediate: boolean): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.update(mode, till, immediate));\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\treturn this.outputChannelModel.then(outputChannelModel => outputChannelModel.loadModel());\n\t}\n\n\tclear(): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.clear());\n\t}\n\n\treplace(value: string): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.replace(value));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
