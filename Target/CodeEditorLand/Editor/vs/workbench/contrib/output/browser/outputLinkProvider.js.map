{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/output/browser/outputLinkProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createWebWorker } from \"../../../../base/browser/defaultWorkerFactory.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IWorkerClient } from \"../../../../base/common/worker/simpleWorker.js\";\nimport type { ILink } from \"../../../../editor/common/languages.js\";\nimport { ILanguageFeaturesService } from \"../../../../editor/common/services/languageFeatures.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { WorkerTextModelSyncClient } from \"../../../../editor/common/services/textModelSync/textModelSync.impl.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tLOG_MODE_ID,\n\tOUTPUT_MODE_ID,\n} from \"../../../services/output/common/output.js\";\nimport type { OutputLinkComputer } from \"../common/outputLinkComputer.js\";\n\nexport class OutputLinkProvider extends Disposable {\n\tprivate static readonly DISPOSE_WORKER_TIME = 3 * 60 * 1000; // dispose worker after 3 minutes of inactivity\n\n\tprivate worker?: OutputLinkWorkerClient;\n\tprivate disposeWorkerScheduler: RunOnceScheduler;\n\tprivate linkProviderRegistration: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageFeaturesService\n\t\tprivate readonly languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper();\n\n\t\tthis.disposeWorkerScheduler = new RunOnceScheduler(\n\t\t\t() => this.disposeWorker(),\n\t\t\tOutputLinkProvider.DISPOSE_WORKER_TIME,\n\t\t);\n\n\t\tthis.registerListeners();\n\t\tthis.updateLinkProviderWorker();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkspaceFolders(() =>\n\t\t\t\tthis.updateLinkProviderWorker(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate updateLinkProviderWorker(): void {\n\t\t// Setup link provider depending on folders being opened or not\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tif (folders.length > 0) {\n\t\t\tif (!this.linkProviderRegistration) {\n\t\t\t\tthis.linkProviderRegistration =\n\t\t\t\t\tthis.languageFeaturesService.linkProvider.register(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{ language: OUTPUT_MODE_ID, scheme: \"*\" },\n\t\t\t\t\t\t\t{ language: LOG_MODE_ID, scheme: \"*\" },\n\t\t\t\t\t\t],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprovideLinks: async (model) => {\n\t\t\t\t\t\t\t\tconst links = await this.provideLinks(\n\t\t\t\t\t\t\t\t\tmodel.uri,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn links && { links };\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tdispose(this.linkProviderRegistration);\n\t\t\tthis.linkProviderRegistration = undefined;\n\t\t}\n\n\t\t// Dispose worker to recreate with folders on next provideLinks request\n\t\tthis.disposeWorker();\n\t\tthis.disposeWorkerScheduler.cancel();\n\t}\n\n\tprivate getOrCreateWorker(): OutputLinkWorkerClient {\n\t\tthis.disposeWorkerScheduler.schedule();\n\n\t\tif (!this.worker) {\n\t\t\tthis.worker = new OutputLinkWorkerClient(\n\t\t\t\tthis.contextService,\n\t\t\t\tthis.modelService,\n\t\t\t);\n\t\t}\n\n\t\treturn this.worker;\n\t}\n\n\tprivate async provideLinks(modelUri: URI): Promise<ILink[]> {\n\t\treturn this.getOrCreateWorker().provideLinks(modelUri);\n\t}\n\n\tprivate disposeWorker(): void {\n\t\tif (this.worker) {\n\t\t\tthis.worker.dispose();\n\t\t\tthis.worker = undefined;\n\t\t}\n\t}\n}\n\nclass OutputLinkWorkerClient extends Disposable {\n\tprivate readonly _workerClient: IWorkerClient<OutputLinkComputer>;\n\tprivate readonly _workerTextModelSyncClient: WorkerTextModelSyncClient;\n\tprivate readonly _initializeBarrier: Promise<void>;\n\n\tconstructor(\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IModelService modelService: IModelService,\n\t) {\n\t\tsuper();\n\t\tthis._workerClient = this._register(\n\t\t\tcreateWebWorker<OutputLinkComputer>(\n\t\t\t\t\"vs/workbench/contrib/output/common/outputLinkComputer\",\n\t\t\t\t\"OutputLinkDetectionWorker\",\n\t\t\t),\n\t\t);\n\t\tthis._workerTextModelSyncClient = WorkerTextModelSyncClient.create(\n\t\t\tthis._workerClient,\n\t\t\tmodelService,\n\t\t);\n\t\tthis._initializeBarrier = this._ensureWorkspaceFolders();\n\t}\n\n\tprivate async _ensureWorkspaceFolders(): Promise<void> {\n\t\tawait this._workerClient.proxy.$setWorkspaceFolders(\n\t\t\tthis.contextService\n\t\t\t\t.getWorkspace()\n\t\t\t\t.folders.map((folder) => folder.uri.toString()),\n\t\t);\n\t}\n\n\tpublic async provideLinks(modelUri: URI): Promise<ILink[]> {\n\t\tawait this._initializeBarrier;\n\t\tawait this._workerTextModelSyncClient.ensureSyncedResources([modelUri]);\n\t\treturn this._workerClient.proxy.$computeLinks(modelUri.toString());\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
