{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/output/browser/outputLinkProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILink } from '../../../../editor/common/languages.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { OUTPUT_MODE_ID, LOG_MODE_ID } from '../../../services/output/common/output.js';\nimport { OutputLinkComputer } from '../common/outputLinkComputer.js';\nimport { IDisposable, dispose, Disposable } from '../../../../base/common/lifecycle.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { createWebWorker } from '../../../../base/browser/defaultWorkerFactory.js';\nimport { IWorkerClient } from '../../../../base/common/worker/simpleWorker.js';\nimport { WorkerTextModelSyncClient } from '../../../../editor/common/services/textModelSync/textModelSync.impl.js';\n\nexport class OutputLinkProvider extends Disposable {\n\n\tprivate static readonly DISPOSE_WORKER_TIME = 3 * 60 * 1000; // dispose worker after 3 minutes of inactivity\n\n\tprivate worker?: OutputLinkWorkerClient;\n\tprivate disposeWorkerScheduler: RunOnceScheduler;\n\tprivate linkProviderRegistration: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper();\n\n\t\tthis.disposeWorkerScheduler = new RunOnceScheduler(() => this.disposeWorker(), OutputLinkProvider.DISPOSE_WORKER_TIME);\n\n\t\tthis.registerListeners();\n\t\tthis.updateLinkProviderWorker();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.updateLinkProviderWorker()));\n\t}\n\n\tprivate updateLinkProviderWorker(): void {\n\n\t\t// Setup link provider depending on folders being opened or not\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tif (folders.length > 0) {\n\t\t\tif (!this.linkProviderRegistration) {\n\t\t\t\tthis.linkProviderRegistration = this.languageFeaturesService.linkProvider.register([{ language: OUTPUT_MODE_ID, scheme: '*' }, { language: LOG_MODE_ID, scheme: '*' }], {\n\t\t\t\t\tprovideLinks: async model => {\n\t\t\t\t\t\tconst links = await this.provideLinks(model.uri);\n\n\t\t\t\t\t\treturn links && { links };\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tdispose(this.linkProviderRegistration);\n\t\t\tthis.linkProviderRegistration = undefined;\n\t\t}\n\n\t\t// Dispose worker to recreate with folders on next provideLinks request\n\t\tthis.disposeWorker();\n\t\tthis.disposeWorkerScheduler.cancel();\n\t}\n\n\tprivate getOrCreateWorker(): OutputLinkWorkerClient {\n\t\tthis.disposeWorkerScheduler.schedule();\n\n\t\tif (!this.worker) {\n\t\t\tthis.worker = new OutputLinkWorkerClient(this.contextService, this.modelService);\n\t\t}\n\n\t\treturn this.worker;\n\t}\n\n\tprivate async provideLinks(modelUri: URI): Promise<ILink[]> {\n\t\treturn this.getOrCreateWorker().provideLinks(modelUri);\n\t}\n\n\tprivate disposeWorker(): void {\n\t\tif (this.worker) {\n\t\t\tthis.worker.dispose();\n\t\t\tthis.worker = undefined;\n\t\t}\n\t}\n}\n\nclass OutputLinkWorkerClient extends Disposable {\n\tprivate readonly _workerClient: IWorkerClient<OutputLinkComputer>;\n\tprivate readonly _workerTextModelSyncClient: WorkerTextModelSyncClient;\n\tprivate readonly _initializeBarrier: Promise<void>;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IModelService modelService: IModelService,\n\t) {\n\t\tsuper();\n\t\tthis._workerClient = this._register(createWebWorker<OutputLinkComputer>(\n\t\t\t'vs/workbench/contrib/output/common/outputLinkComputer',\n\t\t\t'OutputLinkDetectionWorker'\n\t\t));\n\t\tthis._workerTextModelSyncClient = WorkerTextModelSyncClient.create(this._workerClient, modelService);\n\t\tthis._initializeBarrier = this._ensureWorkspaceFolders();\n\t}\n\n\tprivate async _ensureWorkspaceFolders(): Promise<void> {\n\t\tawait this._workerClient.proxy.$setWorkspaceFolders(this.contextService.getWorkspace().folders.map(folder => folder.uri.toString()));\n\t}\n\n\tpublic async provideLinks(modelUri: URI): Promise<ILink[]> {\n\t\tawait this._initializeBarrier;\n\t\tawait this._workerTextModelSyncClient.ensureSyncedResources([modelUri]);\n\t\treturn this._workerClient.proxy.$computeLinks(modelUri.toString());\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
