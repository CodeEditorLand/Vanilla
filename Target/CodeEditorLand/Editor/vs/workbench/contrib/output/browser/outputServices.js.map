{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/output/browser/outputServices.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IOutputChannel, IOutputService, OUTPUT_VIEW_ID, LOG_MIME, OUTPUT_MIME, OutputChannelUpdateMode, IOutputChannelDescriptor, Extensions, IOutputChannelRegistry, ACTIVE_OUTPUT_CHANNEL_CONTEXT, CONTEXT_ACTIVE_FILE_OUTPUT, CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE, CONTEXT_ACTIVE_OUTPUT_LEVEL, CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT } from '../../../services/output/common/output.js';\nimport { OutputLinkProvider } from './outputLinkProvider.js';\nimport { ITextModelService, ITextModelContentProvider } from '../../../../editor/common/services/resolverService.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { ILogService, ILoggerService, LogLevelToString } from '../../../../platform/log/common/log.js';\nimport { ILifecycleService } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IOutputChannelModel } from '../common/outputChannelModel.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { OutputViewPane } from './outputView.js';\nimport { IOutputChannelModelService } from '../common/outputChannelModelService.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { SetLogLevelAction } from '../../logs/common/logsActions.js';\nimport { IDefaultLogLevelsService } from '../../logs/common/defaultLogLevels.js';\n\nconst OUTPUT_ACTIVE_CHANNEL_KEY = 'output.activechannel';\n\nclass OutputChannel extends Disposable implements IOutputChannel {\n\n\tscrollLock: boolean = false;\n\treadonly model: IOutputChannelModel;\n\treadonly id: string;\n\treadonly label: string;\n\treadonly uri: URI;\n\n\tconstructor(\n\t\treadonly outputChannelDescriptor: IOutputChannelDescriptor,\n\t\t@IOutputChannelModelService outputChannelModelService: IOutputChannelModelService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\t\tthis.id = outputChannelDescriptor.id;\n\t\tthis.label = outputChannelDescriptor.label;\n\t\tthis.uri = URI.from({ scheme: Schemas.outputChannel, path: this.id });\n\t\tthis.model = this._register(outputChannelModelService.createOutputChannelModel(this.id, this.uri, outputChannelDescriptor.languageId ? languageService.createById(outputChannelDescriptor.languageId) : languageService.createByMimeType(outputChannelDescriptor.log ? LOG_MIME : OUTPUT_MIME), outputChannelDescriptor.file));\n\t}\n\n\tappend(output: string): void {\n\t\tthis.model.append(output);\n\t}\n\n\tupdate(mode: OutputChannelUpdateMode, till?: number): void {\n\t\tthis.model.update(mode, till, true);\n\t}\n\n\tclear(): void {\n\t\tthis.model.clear();\n\t}\n\n\treplace(value: string): void {\n\t\tthis.model.replace(value);\n\t}\n}\n\nexport class OutputService extends Disposable implements IOutputService, ITextModelContentProvider {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate channels: Map<string, OutputChannel> = new Map<string, OutputChannel>();\n\tprivate activeChannelIdInStorage: string;\n\tprivate activeChannel?: OutputChannel;\n\n\tprivate readonly _onActiveOutputChannel = this._register(new Emitter<string>());\n\treadonly onActiveOutputChannel: Event<string> = this._onActiveOutputChannel.event;\n\n\tprivate readonly activeOutputChannelContext: IContextKey<string>;\n\tprivate readonly activeFileOutputChannelContext: IContextKey<boolean>;\n\tprivate readonly activeOutputChannelLevelSettableContext: IContextKey<boolean>;\n\tprivate readonly activeOutputChannelLevelContext: IContextKey<string>;\n\tprivate readonly activeOutputChannelLevelIsDefaultContext: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IDefaultLogLevelsService private readonly defaultLogLevelsService: IDefaultLogLevelsService\n\t) {\n\t\tsuper();\n\t\tthis.activeChannelIdInStorage = this.storageService.get(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE, '');\n\t\tthis.activeOutputChannelContext = ACTIVE_OUTPUT_CHANNEL_CONTEXT.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelContext.set(this.activeChannelIdInStorage);\n\t\tthis._register(this.onActiveOutputChannel(channel => this.activeOutputChannelContext.set(channel)));\n\n\t\tthis.activeFileOutputChannelContext = CONTEXT_ACTIVE_FILE_OUTPUT.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelLevelSettableContext = CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelLevelContext = CONTEXT_ACTIVE_OUTPUT_LEVEL.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelLevelIsDefaultContext = CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT.bindTo(contextKeyService);\n\n\t\t// Register as text model content provider for output\n\t\tthis._register(textModelResolverService.registerTextModelContentProvider(Schemas.outputChannel, this));\n\t\tthis._register(instantiationService.createInstance(OutputLinkProvider));\n\n\t\t// Create output channels for already registered channels\n\t\tconst registry = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels);\n\t\tfor (const channelIdentifier of registry.getChannels()) {\n\t\t\tthis.onDidRegisterChannel(channelIdentifier.id);\n\t\t}\n\t\tthis._register(registry.onDidRegisterChannel(this.onDidRegisterChannel, this));\n\n\t\t// Set active channel to first channel if not set\n\t\tif (!this.activeChannel) {\n\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\tthis.setActiveChannel(channels && channels.length > 0 ? this.getChannel(channels[0].id) : undefined);\n\t\t}\n\n\t\tthis._register(Event.filter(this.viewsService.onDidChangeViewVisibility, e => e.id === OUTPUT_VIEW_ID && e.visible)(() => {\n\t\t\tif (this.activeChannel) {\n\t\t\t\tthis.viewsService.getActiveViewWithId<OutputViewPane>(OUTPUT_VIEW_ID)?.showChannel(this.activeChannel, true);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.loggerService.onDidChangeLogLevel(_level => {\n\t\t\tthis.setLevelContext();\n\t\t\tthis.setLevelIsDefaultContext();\n\t\t}));\n\t\tthis._register(this.defaultLogLevelsService.onDidChangeDefaultLogLevels(() => {\n\t\t\tthis.setLevelIsDefaultContext();\n\t\t}));\n\n\t\tthis._register(this.lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tconst channel = <OutputChannel>this.getChannel(resource.path);\n\t\tif (channel) {\n\t\t\treturn channel.model.loadModel();\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync showChannel(id: string, preserveFocus?: boolean): Promise<void> {\n\t\tconst channel = this.getChannel(id);\n\t\tif (this.activeChannel?.id !== channel?.id) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(id);\n\t\t}\n\t\tconst outputView = await this.viewsService.openView<OutputViewPane>(OUTPUT_VIEW_ID, !preserveFocus);\n\t\tif (outputView && channel) {\n\t\t\toutputView.showChannel(channel, !!preserveFocus);\n\t\t}\n\t}\n\n\tgetChannel(id: string): OutputChannel | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tgetChannelDescriptor(id: string): IOutputChannelDescriptor | undefined {\n\t\treturn Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannel(id);\n\t}\n\n\tgetChannelDescriptors(): IOutputChannelDescriptor[] {\n\t\treturn Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannels();\n\t}\n\n\tgetActiveChannel(): IOutputChannel | undefined {\n\t\treturn this.activeChannel;\n\t}\n\n\tprivate async onDidRegisterChannel(channelId: string): Promise<void> {\n\t\tconst channel = this.createChannel(channelId);\n\t\tthis.channels.set(channelId, channel);\n\t\tif (!this.activeChannel || this.activeChannelIdInStorage === channelId) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(channelId);\n\t\t\tconst outputView = this.viewsService.getActiveViewWithId<OutputViewPane>(OUTPUT_VIEW_ID);\n\t\t\toutputView?.showChannel(channel, true);\n\t\t}\n\t}\n\n\tprivate createChannel(id: string): OutputChannel {\n\t\tconst channel = this.instantiateChannel(id);\n\t\tthis._register(Event.once(channel.model.onDispose)(() => {\n\t\t\tif (this.activeChannel === channel) {\n\t\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\t\tconst channel = channels.length ? this.getChannel(channels[0].id) : undefined;\n\t\t\t\tif (channel && this.viewsService.isViewVisible(OUTPUT_VIEW_ID)) {\n\t\t\t\t\tthis.showChannel(channel.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setActiveChannel(undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).removeChannel(id);\n\t\t}));\n\n\t\treturn channel;\n\t}\n\n\tprivate instantiateChannel(id: string): OutputChannel {\n\t\tconst channelData = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannel(id);\n\t\tif (!channelData) {\n\t\t\tthis.logService.error(`Channel '${id}' is not registered yet`);\n\t\t\tthrow new Error(`Channel '${id}' is not registered yet`);\n\t\t}\n\t\treturn this.instantiationService.createInstance(OutputChannel, channelData);\n\t}\n\n\tprivate setLevelContext(): void {\n\t\tconst descriptor = this.activeChannel?.outputChannelDescriptor;\n\t\tconst channelLogLevel = descriptor?.log ? this.loggerService.getLogLevel(descriptor.file) : undefined;\n\t\tthis.activeOutputChannelLevelContext.set(channelLogLevel !== undefined ? LogLevelToString(channelLogLevel) : '');\n\t}\n\n\tprivate async setLevelIsDefaultContext(): Promise<void> {\n\t\tconst descriptor = this.activeChannel?.outputChannelDescriptor;\n\t\tif (descriptor?.log) {\n\t\t\tconst channelLogLevel = this.loggerService.getLogLevel(descriptor.file);\n\t\t\tconst channelDefaultLogLevel = await this.defaultLogLevelsService.getDefaultLogLevel(descriptor.extensionId);\n\t\t\tthis.activeOutputChannelLevelIsDefaultContext.set(channelDefaultLogLevel === channelLogLevel);\n\t\t} else {\n\t\t\tthis.activeOutputChannelLevelIsDefaultContext.set(false);\n\t\t}\n\t}\n\n\tprivate setActiveChannel(channel: OutputChannel | undefined): void {\n\t\tthis.activeChannel = channel;\n\t\tconst descriptor = channel?.outputChannelDescriptor;\n\t\tthis.activeFileOutputChannelContext.set(!!descriptor?.file);\n\t\tthis.activeOutputChannelLevelSettableContext.set(descriptor !== undefined && SetLogLevelAction.isLevelSettable(descriptor));\n\t\tthis.setLevelIsDefaultContext();\n\t\tthis.setLevelContext();\n\n\t\tif (this.activeChannel) {\n\t\t\tthis.storageService.store(OUTPUT_ACTIVE_CHANNEL_KEY, this.activeChannel.id, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["channel"]
}
