{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/output/browser/outputServices.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport {\n\ttype ITextModelContentProvider,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tILogService,\n\tILoggerService,\n\tLogLevelToString,\n} from \"../../../../platform/log/common/log.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ILifecycleService } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport {\n\tACTIVE_OUTPUT_CHANNEL_CONTEXT,\n\tCONTEXT_ACTIVE_FILE_OUTPUT,\n\tCONTEXT_ACTIVE_OUTPUT_LEVEL,\n\tCONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT,\n\tCONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE,\n\tExtensions,\n\ttype IOutputChannel,\n\ttype IOutputChannelDescriptor,\n\ttype IOutputChannelRegistry,\n\ttype IOutputService,\n\tLOG_MIME,\n\tOUTPUT_MIME,\n\tOUTPUT_VIEW_ID,\n\ttype OutputChannelUpdateMode,\n} from \"../../../services/output/common/output.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { IDefaultLogLevelsService } from \"../../logs/common/defaultLogLevels.js\";\nimport { SetLogLevelAction } from \"../../logs/common/logsActions.js\";\nimport type { IOutputChannelModel } from \"../common/outputChannelModel.js\";\nimport { IOutputChannelModelService } from \"../common/outputChannelModelService.js\";\nimport { OutputLinkProvider } from \"./outputLinkProvider.js\";\nimport type { OutputViewPane } from \"./outputView.js\";\n\nconst OUTPUT_ACTIVE_CHANNEL_KEY = \"output.activechannel\";\n\nclass OutputChannel extends Disposable implements IOutputChannel {\n\tscrollLock = false;\n\treadonly model: IOutputChannelModel;\n\treadonly id: string;\n\treadonly label: string;\n\treadonly uri: URI;\n\n\tconstructor(\n\t\treadonly outputChannelDescriptor: IOutputChannelDescriptor,\n\t\t@IOutputChannelModelService outputChannelModelService: IOutputChannelModelService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\t\tthis.id = outputChannelDescriptor.id;\n\t\tthis.label = outputChannelDescriptor.label;\n\t\tthis.uri = URI.from({ scheme: Schemas.outputChannel, path: this.id });\n\t\tthis.model = this._register(\n\t\t\toutputChannelModelService.createOutputChannelModel(\n\t\t\t\tthis.id,\n\t\t\t\tthis.uri,\n\t\t\t\toutputChannelDescriptor.languageId\n\t\t\t\t\t? languageService.createById(\n\t\t\t\t\t\t\toutputChannelDescriptor.languageId,\n\t\t\t\t\t\t)\n\t\t\t\t\t: languageService.createByMimeType(\n\t\t\t\t\t\t\toutputChannelDescriptor.log\n\t\t\t\t\t\t\t\t? LOG_MIME\n\t\t\t\t\t\t\t\t: OUTPUT_MIME,\n\t\t\t\t\t\t),\n\t\t\t\toutputChannelDescriptor.file,\n\t\t\t),\n\t\t);\n\t}\n\n\tappend(output: string): void {\n\t\tthis.model.append(output);\n\t}\n\n\tupdate(mode: OutputChannelUpdateMode, till?: number): void {\n\t\tthis.model.update(mode, till, true);\n\t}\n\n\tclear(): void {\n\t\tthis.model.clear();\n\t}\n\n\treplace(value: string): void {\n\t\tthis.model.replace(value);\n\t}\n}\n\nexport class OutputService\n\textends Disposable\n\timplements IOutputService, ITextModelContentProvider\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate channels: Map<string, OutputChannel> = new Map<\n\t\tstring,\n\t\tOutputChannel\n\t>();\n\tprivate activeChannelIdInStorage: string;\n\tprivate activeChannel?: OutputChannel;\n\n\tprivate readonly _onActiveOutputChannel = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\treadonly onActiveOutputChannel: Event<string> =\n\t\tthis._onActiveOutputChannel.event;\n\n\tprivate readonly activeOutputChannelContext: IContextKey<string>;\n\tprivate readonly activeFileOutputChannelContext: IContextKey<boolean>;\n\tprivate readonly activeOutputChannelLevelSettableContext: IContextKey<boolean>;\n\tprivate readonly activeOutputChannelLevelContext: IContextKey<string>;\n\tprivate readonly activeOutputChannelLevelIsDefaultContext: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IDefaultLogLevelsService private readonly defaultLogLevelsService: IDefaultLogLevelsService\n\t) {\n\t\tsuper();\n\t\tthis.activeChannelIdInStorage = this.storageService.get(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE, '');\n\t\tthis.activeOutputChannelContext = ACTIVE_OUTPUT_CHANNEL_CONTEXT.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelContext.set(this.activeChannelIdInStorage);\n\t\tthis._register(this.onActiveOutputChannel(channel => this.activeOutputChannelContext.set(channel)));\n\n\t\tthis.activeFileOutputChannelContext = CONTEXT_ACTIVE_FILE_OUTPUT.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelLevelSettableContext = CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelLevelContext = CONTEXT_ACTIVE_OUTPUT_LEVEL.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelLevelIsDefaultContext = CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT.bindTo(contextKeyService);\n\n\t\t// Register as text model content provider for output\n\t\tthis._register(textModelResolverService.registerTextModelContentProvider(Schemas.outputChannel, this));\n\t\tthis._register(instantiationService.createInstance(OutputLinkProvider));\n\n\t\t// Create output channels for already registered channels\n\t\tconst registry = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels);\n\t\tfor (const channelIdentifier of registry.getChannels()) {\n\t\t\tthis.onDidRegisterChannel(channelIdentifier.id);\n\t\t}\n\t\tthis._register(registry.onDidRegisterChannel(this.onDidRegisterChannel, this));\n\n\t\t// Set active channel to first channel if not set\n\t\tif (!this.activeChannel) {\n\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\tthis.setActiveChannel(channels && channels.length > 0 ? this.getChannel(channels[0].id) : undefined);\n\t\t}\n\n\t\tthis._register(Event.filter(this.viewsService.onDidChangeViewVisibility, e => e.id === OUTPUT_VIEW_ID && e.visible)(() => {\n\t\t\tif (this.activeChannel) {\n\t\t\t\tthis.viewsService.getActiveViewWithId<OutputViewPane>(OUTPUT_VIEW_ID)?.showChannel(this.activeChannel, true);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.loggerService.onDidChangeLogLevel(_level => {\n\t\t\tthis.setLevelContext();\n\t\t\tthis.setLevelIsDefaultContext();\n\t\t}));\n\t\tthis._register(this.defaultLogLevelsService.onDidChangeDefaultLogLevels(() => {\n\t\t\tthis.setLevelIsDefaultContext();\n\t\t}));\n\n\t\tthis._register(this.lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tconst channel = <OutputChannel>this.getChannel(resource.path);\n\t\tif (channel) {\n\t\t\treturn channel.model.loadModel();\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync showChannel(id: string, preserveFocus?: boolean): Promise<void> {\n\t\tconst channel = this.getChannel(id);\n\t\tif (this.activeChannel?.id !== channel?.id) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(id);\n\t\t}\n\t\tconst outputView = await this.viewsService.openView<OutputViewPane>(\n\t\t\tOUTPUT_VIEW_ID,\n\t\t\t!preserveFocus,\n\t\t);\n\t\tif (outputView && channel) {\n\t\t\toutputView.showChannel(channel, !!preserveFocus);\n\t\t}\n\t}\n\n\tgetChannel(id: string): OutputChannel | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tgetChannelDescriptor(id: string): IOutputChannelDescriptor | undefined {\n\t\treturn Registry.as<IOutputChannelRegistry>(\n\t\t\tExtensions.OutputChannels,\n\t\t).getChannel(id);\n\t}\n\n\tgetChannelDescriptors(): IOutputChannelDescriptor[] {\n\t\treturn Registry.as<IOutputChannelRegistry>(\n\t\t\tExtensions.OutputChannels,\n\t\t).getChannels();\n\t}\n\n\tgetActiveChannel(): IOutputChannel | undefined {\n\t\treturn this.activeChannel;\n\t}\n\n\tprivate async onDidRegisterChannel(channelId: string): Promise<void> {\n\t\tconst channel = this.createChannel(channelId);\n\t\tthis.channels.set(channelId, channel);\n\t\tif (\n\t\t\t!this.activeChannel ||\n\t\t\tthis.activeChannelIdInStorage === channelId\n\t\t) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(channelId);\n\t\t\tconst outputView =\n\t\t\t\tthis.viewsService.getActiveViewWithId<OutputViewPane>(\n\t\t\t\t\tOUTPUT_VIEW_ID,\n\t\t\t\t);\n\t\t\toutputView?.showChannel(channel, true);\n\t\t}\n\t}\n\n\tprivate createChannel(id: string): OutputChannel {\n\t\tconst channel = this.instantiateChannel(id);\n\t\tthis._register(\n\t\t\tEvent.once(channel.model.onDispose)(() => {\n\t\t\t\tif (this.activeChannel === channel) {\n\t\t\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\t\t\tconst channel = channels.length\n\t\t\t\t\t\t? this.getChannel(channels[0].id)\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\tif (\n\t\t\t\t\t\tchannel &&\n\t\t\t\t\t\tthis.viewsService.isViewVisible(OUTPUT_VIEW_ID)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.showChannel(channel.id);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setActiveChannel(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tRegistry.as<IOutputChannelRegistry>(\n\t\t\t\t\tExtensions.OutputChannels,\n\t\t\t\t).removeChannel(id);\n\t\t\t}),\n\t\t);\n\n\t\treturn channel;\n\t}\n\n\tprivate instantiateChannel(id: string): OutputChannel {\n\t\tconst channelData = Registry.as<IOutputChannelRegistry>(\n\t\t\tExtensions.OutputChannels,\n\t\t).getChannel(id);\n\t\tif (!channelData) {\n\t\t\tthis.logService.error(`Channel '${id}' is not registered yet`);\n\t\t\tthrow new Error(`Channel '${id}' is not registered yet`);\n\t\t}\n\t\treturn this.instantiationService.createInstance(\n\t\t\tOutputChannel,\n\t\t\tchannelData,\n\t\t);\n\t}\n\n\tprivate setLevelContext(): void {\n\t\tconst descriptor = this.activeChannel?.outputChannelDescriptor;\n\t\tconst channelLogLevel = descriptor?.log\n\t\t\t? this.loggerService.getLogLevel(descriptor.file)\n\t\t\t: undefined;\n\t\tthis.activeOutputChannelLevelContext.set(\n\t\t\tchannelLogLevel !== undefined\n\t\t\t\t? LogLevelToString(channelLogLevel)\n\t\t\t\t: \"\",\n\t\t);\n\t}\n\n\tprivate async setLevelIsDefaultContext(): Promise<void> {\n\t\tconst descriptor = this.activeChannel?.outputChannelDescriptor;\n\t\tif (descriptor?.log) {\n\t\t\tconst channelLogLevel = this.loggerService.getLogLevel(\n\t\t\t\tdescriptor.file,\n\t\t\t);\n\t\t\tconst channelDefaultLogLevel =\n\t\t\t\tawait this.defaultLogLevelsService.getDefaultLogLevel(\n\t\t\t\t\tdescriptor.extensionId,\n\t\t\t\t);\n\t\t\tthis.activeOutputChannelLevelIsDefaultContext.set(\n\t\t\t\tchannelDefaultLogLevel === channelLogLevel,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.activeOutputChannelLevelIsDefaultContext.set(false);\n\t\t}\n\t}\n\n\tprivate setActiveChannel(channel: OutputChannel | undefined): void {\n\t\tthis.activeChannel = channel;\n\t\tconst descriptor = channel?.outputChannelDescriptor;\n\t\tthis.activeFileOutputChannelContext.set(!!descriptor?.file);\n\t\tthis.activeOutputChannelLevelSettableContext.set(\n\t\t\tdescriptor !== undefined &&\n\t\t\t\tSetLogLevelAction.isLevelSettable(descriptor),\n\t\t);\n\t\tthis.setLevelIsDefaultContext();\n\t\tthis.setLevelContext();\n\n\t\tif (this.activeChannel) {\n\t\t\tthis.storageService.store(\n\t\t\t\tOUTPUT_ACTIVE_CHANNEL_KEY,\n\t\t\t\tthis.activeChannel.id,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(\n\t\t\t\tOUTPUT_ACTIVE_CHANNEL_KEY,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["channel"]
}
