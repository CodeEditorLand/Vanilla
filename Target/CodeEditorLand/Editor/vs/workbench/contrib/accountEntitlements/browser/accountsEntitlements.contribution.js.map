{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/accountEntitlements/browser/accountsEntitlements.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\tConfigurationScope,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport {\n\tContextKeyExpr,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IExtensionManagementService } from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIRequestService,\n\tasText,\n} from \"../../../../platform/request/common/request.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { applicationConfigurationNodeBase } from \"../../../common/configuration.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport {\n\tIActivityService,\n\tNumberBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport {\n\ttype AuthenticationSession,\n\tIAuthenticationService,\n} from \"../../../services/authentication/common/authentication.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\n\nconst accountsBadgeConfigKey =\n\t\"workbench.accounts.experimental.showEntitlements\";\n\ntype EntitlementEnablementClassification = {\n\tenabled: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Flag indicating if the entitlement is enabled\";\n\t};\n\towner: \"bhavyaus\";\n\tcomment: \"Reporting when the entitlement is shown\";\n};\n\ntype EntitlementActionClassification = {\n\tcommand: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The command being executed by the entitlement action\";\n\t};\n\towner: \"bhavyaus\";\n\tcomment: \"Reporting the entitlement action\";\n};\n\nclass EntitlementsContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate isInitialized = false;\n\tprivate showAccountsBadgeContextKey = new RawContextKey<boolean>(\n\t\taccountsBadgeConfigKey,\n\t\tfalse,\n\t).bindTo(this.contextService);\n\tprivate readonly accountsMenuBadgeDisposable = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextService: IContextKeyService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IAuthenticationService\n\t\tprivate readonly authenticationService: IAuthenticationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionManagementService\n\t\tprivate readonly extensionManagementService: IExtensionManagementService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t) {\n\t\tsuper();\n\n\t\tif (!this.productService.gitHubEntitlement || isWeb) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.extensionManagementService.getInstalled().then(async (exts) => {\n\t\t\tconst installed = exts.find((value) =>\n\t\t\t\tExtensionIdentifier.equals(\n\t\t\t\t\tvalue.identifier.id,\n\t\t\t\t\tthis.productService.gitHubEntitlement!.extensionId,\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (installed) {\n\t\t\t\tthis.disableEntitlements();\n\t\t\t} else {\n\t\t\t\tthis.registerListeners();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerListeners() {\n\t\tif (\n\t\t\tthis.storageService.getBoolean(\n\t\t\t\taccountsBadgeConfigKey,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t) === false\n\t\t) {\n\t\t\t// we have already shown the entitlements. Do not show again\n\t\t\treturn;\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis.extensionService.onDidChangeExtensions(async (result) => {\n\t\t\t\tfor (const ext of result.added) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tExtensionIdentifier.equals(\n\t\t\t\t\t\t\tthis.productService.gitHubEntitlement!.extensionId,\n\t\t\t\t\t\t\text.identifier,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.disableEntitlements();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.authenticationService.onDidChangeSessions(async (e) => {\n\t\t\t\tif (\n\t\t\t\t\te.providerId ===\n\t\t\t\t\t\tthis.productService.gitHubEntitlement!.providerId &&\n\t\t\t\t\te.event.added?.length\n\t\t\t\t) {\n\t\t\t\t\tawait this.enableEntitlements(e.event.added[0]);\n\t\t\t\t} else if (\n\t\t\t\t\te.providerId ===\n\t\t\t\t\t\tthis.productService.gitHubEntitlement!.providerId &&\n\t\t\t\t\te.event.removed?.length\n\t\t\t\t) {\n\t\t\t\t\tthis.showAccountsBadgeContextKey.set(false);\n\t\t\t\t\tthis.accountsMenuBadgeDisposable.clear();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.authenticationService.onDidRegisterAuthenticationProvider(\n\t\t\t\tasync (e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\te.id ===\n\t\t\t\t\t\tthis.productService.gitHubEntitlement!.providerId\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait this.enableEntitlements(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tawait this.authenticationService.getSessions(\n\t\t\t\t\t\t\t\t\te.id,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)[0],\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async getEntitlementsInfo(\n\t\tsession: AuthenticationSession,\n\t): Promise<[enabled: boolean, org: string | undefined]> {\n\t\tif (this.isInitialized) {\n\t\t\treturn [false, \"\"];\n\t\t}\n\n\t\tconst context = await this.requestService.request(\n\t\t\t{\n\t\t\t\ttype: \"GET\",\n\t\t\t\turl: this.productService.gitHubEntitlement!.entitlementUrl,\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${session.accessToken}`,\n\t\t\t\t},\n\t\t\t},\n\t\t\tCancellationToken.None,\n\t\t);\n\n\t\tif (context.res.statusCode && context.res.statusCode !== 200) {\n\t\t\treturn [false, \"\"];\n\t\t}\n\t\tconst result = await asText(context);\n\t\tif (!result) {\n\t\t\treturn [false, \"\"];\n\t\t}\n\n\t\tlet parsedResult: any;\n\t\ttry {\n\t\t\tparsedResult = JSON.parse(result);\n\t\t} catch (err) {\n\t\t\t//ignore\n\t\t\treturn [false, \"\"];\n\t\t}\n\n\t\tif (\n\t\t\t!(\n\t\t\t\tthis.productService.gitHubEntitlement!.enablementKey in\n\t\t\t\tparsedResult\n\t\t\t) ||\n\t\t\t!parsedResult[this.productService.gitHubEntitlement!.enablementKey]\n\t\t) {\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t{ enabled: boolean },\n\t\t\t\tEntitlementEnablementClassification\n\t\t\t>(\"entitlements.enabled\", { enabled: false });\n\t\t\treturn [false, \"\"];\n\t\t}\n\t\tthis.telemetryService.publicLog2<\n\t\t\t{ enabled: boolean },\n\t\t\tEntitlementEnablementClassification\n\t\t>(\"entitlements.enabled\", { enabled: true });\n\t\tthis.isInitialized = true;\n\t\tconst orgs: { login: string; name: string }[] = parsedResult[\n\t\t\t\"organization_list\"\n\t\t] as { login: string; name: string }[];\n\t\treturn [\n\t\t\ttrue,\n\t\t\torgs && orgs.length > 0\n\t\t\t\t? orgs[0].name\n\t\t\t\t\t? orgs[0].name\n\t\t\t\t\t: orgs[0].login\n\t\t\t\t: undefined,\n\t\t];\n\t}\n\n\tprivate async enableEntitlements(\n\t\tsession: AuthenticationSession | undefined,\n\t) {\n\t\tif (!session) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst showAccountsBadge =\n\t\t\tthis.configurationService.inspect<boolean>(accountsBadgeConfigKey)\n\t\t\t\t.value ?? false;\n\n\t\tconst [enabled, org] = await this.getEntitlementsInfo(session);\n\t\tif (enabled && showAccountsBadge) {\n\t\t\tthis.createAccountsBadge(org);\n\t\t\tthis.showAccountsBadgeContextKey.set(showAccountsBadge);\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t{ enabled: boolean },\n\t\t\t\tEntitlementEnablementClassification\n\t\t\t>(accountsBadgeConfigKey, { enabled: true });\n\t\t}\n\t}\n\n\tprivate disableEntitlements() {\n\t\tthis.storageService.store(\n\t\t\taccountsBadgeConfigKey,\n\t\t\tfalse,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tthis.showAccountsBadgeContextKey.set(false);\n\t\tthis.accountsMenuBadgeDisposable.clear();\n\t}\n\n\tprivate async createAccountsBadge(org: string | undefined) {\n\t\tconst menuTitle = org\n\t\t\t? this.productService.gitHubEntitlement!.command.title.replace(\n\t\t\t\t\t\"{{org}}\",\n\t\t\t\t\torg,\n\t\t\t\t)\n\t\t\t: this.productService.gitHubEntitlement!.command\n\t\t\t\t\t.titleWithoutPlaceHolder;\n\n\t\tconst badge = new NumberBadge(1, () => menuTitle);\n\t\tthis.accountsMenuBadgeDisposable.value =\n\t\t\tthis.activityService.showAccountsActivity({ badge });\n\n\t\tthis.contextService.onDidChangeContext((e) => {\n\t\t\tif (e.affectsSome(new Set([accountsBadgeConfigKey]))) {\n\t\t\t\tif (\n\t\t\t\t\t!this.contextService.getContextKeyValue<boolean>(\n\t\t\t\t\t\taccountsBadgeConfigKey,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.accountsMenuBadgeDisposable.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: \"workbench.action.entitlementAction\",\n\t\t\t\t\t\t\ttitle: menuTitle,\n\t\t\t\t\t\t\tf1: false,\n\t\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\t\t\tgroup: \"5_AccountsEntitlements\",\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\taccountsBadgeConfigKey,\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic async run(accessor: ServicesAccessor) {\n\t\t\t\t\t\tconst productService = accessor.get(IProductService);\n\t\t\t\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\t\t\t\tconst contextKeyService =\n\t\t\t\t\t\t\taccessor.get(IContextKeyService);\n\t\t\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\t\t\tconst telemetryService =\n\t\t\t\t\t\t\taccessor.get(ITelemetryService);\n\n\t\t\t\t\t\tconst confirmation = await dialogService.confirm({\n\t\t\t\t\t\t\ttype: \"question\",\n\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\tproductService.gitHubEntitlement!\n\t\t\t\t\t\t\t\t\t.confirmationMessage,\n\t\t\t\t\t\t\tprimaryButton:\n\t\t\t\t\t\t\t\tproductService.gitHubEntitlement!\n\t\t\t\t\t\t\t\t\t.confirmationAction,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (confirmation.confirmed) {\n\t\t\t\t\t\t\tcommandService.executeCommand(\n\t\t\t\t\t\t\t\tproductService.gitHubEntitlement!.command\n\t\t\t\t\t\t\t\t\t.action,\n\t\t\t\t\t\t\t\tproductService.gitHubEntitlement!.extensionId!,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\ttelemetryService.publicLog2<\n\t\t\t\t\t\t\t\t{ command: string },\n\t\t\t\t\t\t\t\tEntitlementActionClassification\n\t\t\t\t\t\t\t>(\"accountsEntitlements.action\", {\n\t\t\t\t\t\t\t\tcommand:\n\t\t\t\t\t\t\t\t\tproductService.gitHubEntitlement!.command\n\t\t\t\t\t\t\t\t\t\t.action,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttelemetryService.publicLog2<\n\t\t\t\t\t\t\t\t{ command: string },\n\t\t\t\t\t\t\t\tEntitlementActionClassification\n\t\t\t\t\t\t\t>(\"accountsEntitlements.action\", {\n\t\t\t\t\t\t\t\tcommand:\n\t\t\t\t\t\t\t\t\tproductService.gitHubEntitlement!.command\n\t\t\t\t\t\t\t\t\t\t.action + \"-dismissed\",\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst contextKey = new RawContextKey<boolean>(\n\t\t\t\t\t\t\taccountsBadgeConfigKey,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t).bindTo(contextKeyService);\n\t\t\t\t\t\tcontextKey.set(false);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\taccountsBadgeConfigKey,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n);\nconfigurationRegistry.registerConfiguration({\n\t...applicationConfigurationNodeBase,\n\tproperties: {\n\t\t\"workbench.accounts.experimental.showEntitlements\": {\n\t\t\tscope: ConfigurationScope.MACHINE,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\ttags: [\"experimental\"],\n\t\t\tdescription: localize(\n\t\t\t\t\"workbench.accounts.showEntitlements\",\n\t\t\t\t\"When enabled, available entitlements for the account will be show in the accounts menu.\",\n\t\t\t),\n\t\t},\n\t},\n});\n\nregisterWorkbenchContribution2(\n\t\"workbench.contrib.entitlements\",\n\tEntitlementsContribution,\n\tWorkbenchPhase.BlockRestore,\n);\n"],
  "mappings": "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",
  "names": []
}
