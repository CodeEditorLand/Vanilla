{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/accountEntitlements/browser/accountsEntitlements.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContribution, registerWorkbenchContribution2, WorkbenchPhase } from '../../../common/contributions.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { AuthenticationSession, IAuthenticationService } from '../../../services/authentication/common/authentication.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IActivityService, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope, } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { applicationConfigurationNodeBase } from '../../../common/configuration.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IRequestService, asText } from '../../../../platform/request/common/request.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { isWeb } from '../../../../base/common/platform.js';\n\nconst accountsBadgeConfigKey = 'workbench.accounts.experimental.showEntitlements';\n\ntype EntitlementEnablementClassification = {\n\tenabled: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Flag indicating if the entitlement is enabled' };\n\towner: 'bhavyaus';\n\tcomment: 'Reporting when the entitlement is shown';\n};\n\ntype EntitlementActionClassification = {\n\tcommand: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The command being executed by the entitlement action' };\n\towner: 'bhavyaus';\n\tcomment: 'Reporting the entitlement action';\n};\n\nclass EntitlementsContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate isInitialized = false;\n\tprivate showAccountsBadgeContextKey = new RawContextKey<boolean>(accountsBadgeConfigKey, false).bindTo(this.contextService);\n\tprivate readonly accountsMenuBadgeDisposable = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextService: IContextKeyService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRequestService private readonly requestService: IRequestService) {\n\t\tsuper();\n\n\t\tif (!this.productService.gitHubEntitlement || isWeb) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.extensionManagementService.getInstalled().then(async exts => {\n\t\t\tconst installed = exts.find(value => ExtensionIdentifier.equals(value.identifier.id, this.productService.gitHubEntitlement!.extensionId));\n\t\t\tif (installed) {\n\t\t\t\tthis.disableEntitlements();\n\t\t\t} else {\n\t\t\t\tthis.registerListeners();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerListeners() {\n\n\t\tif (this.storageService.getBoolean(accountsBadgeConfigKey, StorageScope.APPLICATION) === false) {\n\t\t\t// we have already shown the entitlements. Do not show again\n\t\t\treturn;\n\t\t}\n\n\t\tthis._register(this.extensionService.onDidChangeExtensions(async (result) => {\n\t\t\tfor (const ext of result.added) {\n\t\t\t\tif (ExtensionIdentifier.equals(this.productService.gitHubEntitlement!.extensionId, ext.identifier)) {\n\t\t\t\t\tthis.disableEntitlements();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.authenticationService.onDidChangeSessions(async (e) => {\n\t\t\tif (e.providerId === this.productService.gitHubEntitlement!.providerId && e.event.added?.length) {\n\t\t\t\tawait this.enableEntitlements(e.event.added[0]);\n\t\t\t} else if (e.providerId === this.productService.gitHubEntitlement!.providerId && e.event.removed?.length) {\n\t\t\t\tthis.showAccountsBadgeContextKey.set(false);\n\t\t\t\tthis.accountsMenuBadgeDisposable.clear();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.authenticationService.onDidRegisterAuthenticationProvider(async e => {\n\t\t\tif (e.id === this.productService.gitHubEntitlement!.providerId) {\n\t\t\t\tawait this.enableEntitlements((await this.authenticationService.getSessions(e.id))[0]);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async getEntitlementsInfo(session: AuthenticationSession): Promise<[enabled: boolean, org: string | undefined]> {\n\n\t\tif (this.isInitialized) {\n\t\t\treturn [false, ''];\n\t\t}\n\n\t\tconst context = await this.requestService.request({\n\t\t\ttype: 'GET',\n\t\t\turl: this.productService.gitHubEntitlement!.entitlementUrl,\n\t\t\theaders: {\n\t\t\t\t'Authorization': `Bearer ${session.accessToken}`\n\t\t\t}\n\t\t}, CancellationToken.None);\n\n\t\tif (context.res.statusCode && context.res.statusCode !== 200) {\n\t\t\treturn [false, ''];\n\t\t}\n\t\tconst result = await asText(context);\n\t\tif (!result) {\n\t\t\treturn [false, ''];\n\t\t}\n\n\t\tlet parsedResult: any;\n\t\ttry {\n\t\t\tparsedResult = JSON.parse(result);\n\t\t}\n\t\tcatch (err) {\n\t\t\t//ignore\n\t\t\treturn [false, ''];\n\t\t}\n\n\t\tif (!(this.productService.gitHubEntitlement!.enablementKey in parsedResult) || !parsedResult[this.productService.gitHubEntitlement!.enablementKey]) {\n\t\t\tthis.telemetryService.publicLog2<{ enabled: boolean }, EntitlementEnablementClassification>('entitlements.enabled', { enabled: false });\n\t\t\treturn [false, ''];\n\t\t}\n\t\tthis.telemetryService.publicLog2<{ enabled: boolean }, EntitlementEnablementClassification>('entitlements.enabled', { enabled: true });\n\t\tthis.isInitialized = true;\n\t\tconst orgs: { login: string; name: string }[] = parsedResult['organization_list'] as { login: string; name: string }[];\n\t\treturn [true, orgs && orgs.length > 0 ? (orgs[0].name ? orgs[0].name : orgs[0].login) : undefined];\n\t}\n\n\tprivate async enableEntitlements(session: AuthenticationSession | undefined) {\n\t\tif (!session) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst showAccountsBadge = this.configurationService.inspect<boolean>(accountsBadgeConfigKey).value ?? false;\n\n\t\tconst [enabled, org] = await this.getEntitlementsInfo(session);\n\t\tif (enabled && showAccountsBadge) {\n\t\t\tthis.createAccountsBadge(org);\n\t\t\tthis.showAccountsBadgeContextKey.set(showAccountsBadge);\n\t\t\tthis.telemetryService.publicLog2<{ enabled: boolean }, EntitlementEnablementClassification>(accountsBadgeConfigKey, { enabled: true });\n\t\t}\n\t}\n\n\tprivate disableEntitlements() {\n\t\tthis.storageService.store(accountsBadgeConfigKey, false, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tthis.showAccountsBadgeContextKey.set(false);\n\t\tthis.accountsMenuBadgeDisposable.clear();\n\t}\n\n\tprivate async createAccountsBadge(org: string | undefined) {\n\n\t\tconst menuTitle = org ? this.productService.gitHubEntitlement!.command.title.replace('{{org}}', org) : this.productService.gitHubEntitlement!.command.titleWithoutPlaceHolder;\n\n\t\tconst badge = new NumberBadge(1, () => menuTitle);\n\t\tthis.accountsMenuBadgeDisposable.value = this.activityService.showAccountsActivity({ badge });\n\n\t\tthis.contextService.onDidChangeContext(e => {\n\t\t\tif (e.affectsSome(new Set([accountsBadgeConfigKey]))) {\n\t\t\t\tif (!this.contextService.getContextKeyValue<boolean>(accountsBadgeConfigKey)) {\n\t\t\t\t\tthis.accountsMenuBadgeDisposable.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.action.entitlementAction',\n\t\t\t\t\ttitle: menuTitle,\n\t\t\t\t\tf1: false,\n\t\t\t\t\tmenu: {\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '5_AccountsEntitlements',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(accountsBadgeConfigKey, true),\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpublic async run(\n\t\t\t\taccessor: ServicesAccessor\n\t\t\t) {\n\t\t\t\tconst productService = accessor.get(IProductService);\n\t\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\t\t\tconst confirmation = await dialogService.confirm({\n\t\t\t\t\ttype: 'question',\n\t\t\t\t\tmessage: productService.gitHubEntitlement!.confirmationMessage,\n\t\t\t\t\tprimaryButton: productService.gitHubEntitlement!.confirmationAction,\n\t\t\t\t});\n\n\t\t\t\tif (confirmation.confirmed) {\n\t\t\t\t\tcommandService.executeCommand(productService.gitHubEntitlement!.command.action, productService.gitHubEntitlement!.extensionId!);\n\t\t\t\t\ttelemetryService.publicLog2<{ command: string }, EntitlementActionClassification>('accountsEntitlements.action', {\n\t\t\t\t\t\tcommand: productService.gitHubEntitlement!.command.action,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\ttelemetryService.publicLog2<{ command: string }, EntitlementActionClassification>('accountsEntitlements.action', {\n\t\t\t\t\t\tcommand: productService.gitHubEntitlement!.command.action + '-dismissed',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst contextKey = new RawContextKey<boolean>(accountsBadgeConfigKey, false).bindTo(contextKeyService);\n\t\t\t\tcontextKey.set(false);\n\t\t\t\tstorageService.store(accountsBadgeConfigKey, false, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}));\n\t}\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\t...applicationConfigurationNodeBase,\n\tproperties: {\n\t\t'workbench.accounts.experimental.showEntitlements': {\n\t\t\tscope: ConfigurationScope.MACHINE,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\ttags: ['experimental'],\n\t\t\tdescription: localize('workbench.accounts.showEntitlements', \"When enabled, available entitlements for the account will be show in the accounts menu.\")\n\t\t}\n\t}\n});\n\nregisterWorkbenchContribution2('workbench.contrib.entitlements', EntitlementsContribution, WorkbenchPhase.BlockRestore);\n"],
  "mappings": "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",
  "names": []
}
