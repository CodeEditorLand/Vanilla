var H=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var f=(c,a,e,i)=>{for(var o=i>1?void 0:i?B(a,e):a,t=c.length-1,n;t>=0;t--)(n=c[t])&&(o=(i?n(a,e,o):n(o))||o);return i&&o&&H(a,e,o),o},r=(c,a)=>(e,i)=>a(e,i,c);import{CancellationToken as M}from"../../../../../vs/base/common/cancellation.js";import{Disposable as K,MutableDisposable as D}from"../../../../../vs/base/common/lifecycle.js";import{isWeb as P}from"../../../../../vs/base/common/platform.js";import{localize as T}from"../../../../../vs/nls.js";import{Action2 as k,MenuId as R,registerAction2 as N}from"../../../../../vs/platform/actions/common/actions.js";import{ICommandService as L}from"../../../../../vs/platform/commands/common/commands.js";import{IConfigurationService as q}from"../../../../../vs/platform/configuration/common/configuration.js";import{Extensions as W,ConfigurationScope as _}from"../../../../../vs/platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as z,IContextKeyService as b,RawContextKey as S}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IDialogService as O}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{IExtensionManagementService as F}from"../../../../../vs/platform/extensionManagement/common/extensionManagement.js";import{ExtensionIdentifier as y}from"../../../../../vs/platform/extensions/common/extensions.js";import"../../../../../vs/platform/instantiation/common/instantiation.js";import{IProductService as I}from"../../../../../vs/platform/product/common/productService.js";import{Registry as G}from"../../../../../vs/platform/registry/common/platform.js";import{asText as J,IRequestService as U}from"../../../../../vs/platform/request/common/request.js";import{IStorageService as E,StorageScope as d,StorageTarget as x}from"../../../../../vs/platform/storage/common/storage.js";import{ITelemetryService as C}from"../../../../../vs/platform/telemetry/common/telemetry.js";import{applicationConfigurationNodeBase as V}from"../../../../../vs/workbench/common/configuration.js";import{registerWorkbenchContribution2 as $,WorkbenchPhase as j}from"../../../../../vs/workbench/common/contributions.js";import{IActivityService as Q,NumberBadge as X}from"../../../../../vs/workbench/services/activity/common/activity.js";import{IAuthenticationService as Y}from"../../../../../vs/workbench/services/authentication/common/authentication.js";import{IExtensionService as Z}from"../../../../../vs/workbench/services/extensions/common/extensions.js";const s="workbench.accounts.experimental.showEntitlements";let l=class extends K{constructor(e,i,o,t,n,m,g,v,h,u){super();this.contextService=e;this.telemetryService=i;this.authenticationService=o;this.productService=t;this.storageService=n;this.extensionManagementService=m;this.activityService=g;this.extensionService=v;this.configurationService=h;this.requestService=u;!(!this.productService.gitHubEntitlement||P)&&this.extensionManagementService.getInstalled().then(async p=>{p.find(w=>y.equals(w.identifier.id,this.productService.gitHubEntitlement.extensionId))?this.disableEntitlements():this.registerListeners()})}isInitialized=!1;showAccountsBadgeContextKey=new S(s,!1).bindTo(this.contextService);accountsMenuBadgeDisposable=this._register(new D);registerListeners(){this.storageService.getBoolean(s,d.APPLICATION)!==!1&&(this._register(this.extensionService.onDidChangeExtensions(async e=>{for(const i of e.added)if(y.equals(this.productService.gitHubEntitlement.extensionId,i.identifier)){this.disableEntitlements();return}})),this._register(this.authenticationService.onDidChangeSessions(async e=>{e.providerId===this.productService.gitHubEntitlement.providerId&&e.event.added?.length?await this.enableEntitlements(e.event.added[0]):e.providerId===this.productService.gitHubEntitlement.providerId&&e.event.removed?.length&&(this.showAccountsBadgeContextKey.set(!1),this.accountsMenuBadgeDisposable.clear())})),this._register(this.authenticationService.onDidRegisterAuthenticationProvider(async e=>{e.id===this.productService.gitHubEntitlement.providerId&&await this.enableEntitlements((await this.authenticationService.getSessions(e.id))[0])})))}async getEntitlementsInfo(e){if(this.isInitialized)return[!1,""];const i=await this.requestService.request({type:"GET",url:this.productService.gitHubEntitlement.entitlementUrl,headers:{Authorization:`Bearer ${e.accessToken}`}},M.None);if(i.res.statusCode&&i.res.statusCode!==200)return[!1,""];const o=await J(i);if(!o)return[!1,""];let t;try{t=JSON.parse(o)}catch{return[!1,""]}if(!(this.productService.gitHubEntitlement.enablementKey in t)||!t[this.productService.gitHubEntitlement.enablementKey])return this.telemetryService.publicLog2("entitlements.enabled",{enabled:!1}),[!1,""];this.telemetryService.publicLog2("entitlements.enabled",{enabled:!0}),this.isInitialized=!0;const n=t.organization_list;return[!0,n&&n.length>0?n[0].name?n[0].name:n[0].login:void 0]}async enableEntitlements(e){if(!e)return;const i=this.configurationService.inspect(s).value??!1,[o,t]=await this.getEntitlementsInfo(e);o&&i&&(this.createAccountsBadge(t),this.showAccountsBadgeContextKey.set(i),this.telemetryService.publicLog2(s,{enabled:!0}))}disableEntitlements(){this.storageService.store(s,!1,d.APPLICATION,x.MACHINE),this.showAccountsBadgeContextKey.set(!1),this.accountsMenuBadgeDisposable.clear()}async createAccountsBadge(e){const i=e?this.productService.gitHubEntitlement.command.title.replace("{{org}}",e):this.productService.gitHubEntitlement.command.titleWithoutPlaceHolder,o=new X(1,()=>i);this.accountsMenuBadgeDisposable.value=this.activityService.showAccountsActivity({badge:o}),this.contextService.onDidChangeContext(t=>{t.affectsSome(new Set([s]))&&(this.contextService.getContextKeyValue(s)||this.accountsMenuBadgeDisposable.clear())}),this._register(N(class extends k{constructor(){super({id:"workbench.action.entitlementAction",title:i,f1:!1,menu:{id:R.AccountsContext,group:"5_AccountsEntitlements",when:z.equals(s,!0)}})}async run(t){const n=t.get(I),m=t.get(L),g=t.get(b),v=t.get(E),h=t.get(O),u=t.get(C);(await h.confirm({type:"question",message:n.gitHubEntitlement.confirmationMessage,primaryButton:n.gitHubEntitlement.confirmationAction})).confirmed?(m.executeCommand(n.gitHubEntitlement.command.action,n.gitHubEntitlement.extensionId),u.publicLog2("accountsEntitlements.action",{command:n.gitHubEntitlement.command.action})):u.publicLog2("accountsEntitlements.action",{command:n.gitHubEntitlement.command.action+"-dismissed"}),new S(s,!1).bindTo(g).set(!1),v.store(s,!1,d.APPLICATION,x.MACHINE)}}))}};l=f([r(0,b),r(1,C),r(2,Y),r(3,I),r(4,E),r(5,F),r(6,Q),r(7,Z),r(8,q),r(9,U)],l);const ee=G.as(W.Configuration);ee.registerConfiguration({...V,properties:{"workbench.accounts.experimental.showEntitlements":{scope:_.MACHINE,type:"boolean",default:!1,tags:["experimental"],description:T("workbench.accounts.showEntitlements","When enabled, available entitlements for the account will be show in the accounts menu.")}}}),$("workbench.contrib.entitlements",l,j.BlockRestore);
