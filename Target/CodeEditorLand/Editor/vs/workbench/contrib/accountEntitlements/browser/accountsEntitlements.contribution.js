var H=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var f=(c,a,e,i)=>{for(var o=i>1?void 0:i?B(a,e):a,t=c.length-1,n;t>=0;t--)(n=c[t])&&(o=(i?n(a,e,o):n(o))||o);return i&&o&&H(a,e,o),o},r=(c,a)=>(e,i)=>a(e,i,c);import{Registry as M}from"../../../../platform/registry/common/platform.js";import{registerWorkbenchContribution2 as K,WorkbenchPhase as D}from"../../../common/contributions.js";import{Disposable as P,MutableDisposable as T}from"../../../../base/common/lifecycle.js";import{ContextKeyExpr as k,IContextKeyService as b,RawContextKey as S}from"../../../../platform/contextkey/common/contextkey.js";import{ICommandService as R}from"../../../../platform/commands/common/commands.js";import{ITelemetryService as y}from"../../../../platform/telemetry/common/telemetry.js";import{IAuthenticationService as N}from"../../../services/authentication/common/authentication.js";import{Action2 as L,MenuId as q,registerAction2 as W}from"../../../../platform/actions/common/actions.js";import{IActivityService as _,NumberBadge as z}from"../../../services/activity/common/activity.js";import{IProductService as I}from"../../../../platform/product/common/productService.js";import{IExtensionManagementService as O}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionIdentifier as E}from"../../../../platform/extensions/common/extensions.js";import{IStorageService as x,StorageScope as d,StorageTarget as C}from"../../../../platform/storage/common/storage.js";import{IExtensionService as F}from"../../../services/extensions/common/extensions.js";import{Extensions as G,ConfigurationScope as J}from"../../../../platform/configuration/common/configurationRegistry.js";import{applicationConfigurationNodeBase as U}from"../../../common/configuration.js";import{localize as V}from"../../../../nls.js";import{IConfigurationService as $}from"../../../../platform/configuration/common/configuration.js";import{IRequestService as j,asText as Q}from"../../../../platform/request/common/request.js";import{CancellationToken as X}from"../../../../base/common/cancellation.js";import{IDialogService as Y}from"../../../../platform/dialogs/common/dialogs.js";import{isWeb as Z}from"../../../../base/common/platform.js";const s="workbench.accounts.experimental.showEntitlements";let l=class extends P{constructor(e,i,o,t,n,m,g,v,h,u){super();this.contextService=e;this.telemetryService=i;this.authenticationService=o;this.productService=t;this.storageService=n;this.extensionManagementService=m;this.activityService=g;this.extensionService=v;this.configurationService=h;this.requestService=u;!(!this.productService.gitHubEntitlement||Z)&&this.extensionManagementService.getInstalled().then(async p=>{p.find(w=>E.equals(w.identifier.id,this.productService.gitHubEntitlement.extensionId))?this.disableEntitlements():this.registerListeners()})}isInitialized=!1;showAccountsBadgeContextKey=new S(s,!1).bindTo(this.contextService);accountsMenuBadgeDisposable=this._register(new T);registerListeners(){this.storageService.getBoolean(s,d.APPLICATION)!==!1&&(this._register(this.extensionService.onDidChangeExtensions(async e=>{for(const i of e.added)if(E.equals(this.productService.gitHubEntitlement.extensionId,i.identifier)){this.disableEntitlements();return}})),this._register(this.authenticationService.onDidChangeSessions(async e=>{e.providerId===this.productService.gitHubEntitlement.providerId&&e.event.added?.length?await this.enableEntitlements(e.event.added[0]):e.providerId===this.productService.gitHubEntitlement.providerId&&e.event.removed?.length&&(this.showAccountsBadgeContextKey.set(!1),this.accountsMenuBadgeDisposable.clear())})),this._register(this.authenticationService.onDidRegisterAuthenticationProvider(async e=>{e.id===this.productService.gitHubEntitlement.providerId&&await this.enableEntitlements((await this.authenticationService.getSessions(e.id))[0])})))}async getEntitlementsInfo(e){if(this.isInitialized)return[!1,""];const i=await this.requestService.request({type:"GET",url:this.productService.gitHubEntitlement.entitlementUrl,headers:{Authorization:`Bearer ${e.accessToken}`}},X.None);if(i.res.statusCode&&i.res.statusCode!==200)return[!1,""];const o=await Q(i);if(!o)return[!1,""];let t;try{t=JSON.parse(o)}catch{return[!1,""]}if(!(this.productService.gitHubEntitlement.enablementKey in t)||!t[this.productService.gitHubEntitlement.enablementKey])return this.telemetryService.publicLog2("entitlements.enabled",{enabled:!1}),[!1,""];this.telemetryService.publicLog2("entitlements.enabled",{enabled:!0}),this.isInitialized=!0;const n=t.organization_list;return[!0,n&&n.length>0?n[0].name?n[0].name:n[0].login:void 0]}async enableEntitlements(e){if(!e)return;const i=this.configurationService.inspect(s).value??!1,[o,t]=await this.getEntitlementsInfo(e);o&&i&&(this.createAccountsBadge(t),this.showAccountsBadgeContextKey.set(i),this.telemetryService.publicLog2(s,{enabled:!0}))}disableEntitlements(){this.storageService.store(s,!1,d.APPLICATION,C.MACHINE),this.showAccountsBadgeContextKey.set(!1),this.accountsMenuBadgeDisposable.clear()}async createAccountsBadge(e){const i=e?this.productService.gitHubEntitlement.command.title.replace("{{org}}",e):this.productService.gitHubEntitlement.command.titleWithoutPlaceHolder,o=new z(1,()=>i);this.accountsMenuBadgeDisposable.value=this.activityService.showAccountsActivity({badge:o}),this.contextService.onDidChangeContext(t=>{t.affectsSome(new Set([s]))&&(this.contextService.getContextKeyValue(s)||this.accountsMenuBadgeDisposable.clear())}),this._register(W(class extends L{constructor(){super({id:"workbench.action.entitlementAction",title:i,f1:!1,menu:{id:q.AccountsContext,group:"5_AccountsEntitlements",when:k.equals(s,!0)}})}async run(t){const n=t.get(I),m=t.get(R),g=t.get(b),v=t.get(x),h=t.get(Y),u=t.get(y);(await h.confirm({type:"question",message:n.gitHubEntitlement.confirmationMessage,primaryButton:n.gitHubEntitlement.confirmationAction})).confirmed?(m.executeCommand(n.gitHubEntitlement.command.action,n.gitHubEntitlement.extensionId),u.publicLog2("accountsEntitlements.action",{command:n.gitHubEntitlement.command.action})):u.publicLog2("accountsEntitlements.action",{command:n.gitHubEntitlement.command.action+"-dismissed"}),new S(s,!1).bindTo(g).set(!1),v.store(s,!1,d.APPLICATION,C.MACHINE)}}))}};l=f([r(0,b),r(1,y),r(2,N),r(3,I),r(4,x),r(5,O),r(6,_),r(7,F),r(8,$),r(9,j)],l);const ee=M.as(G.Configuration);ee.registerConfiguration({...U,properties:{"workbench.accounts.experimental.showEntitlements":{scope:J.MACHINE,type:"boolean",default:!1,tags:["experimental"],description:V("workbench.accounts.showEntitlements","When enabled, available entitlements for the account will be show in the accounts menu.")}}}),K("workbench.contrib.entitlements",l,D.BlockRestore);
