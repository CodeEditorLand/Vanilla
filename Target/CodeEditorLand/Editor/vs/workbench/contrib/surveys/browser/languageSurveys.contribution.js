var b=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var C=(I,e,r,n)=>{for(var i=n>1?void 0:n?R(e,r):e,c=I.length-1,u;c>=0;c--)(u=I[c])&&(i=(n?u(e,r,i):u(i))||i);return n&&i&&b(e,r,i),i},s=(I,e)=>(r,n)=>e(r,n,I);import{localize as d}from"../../../../nls.js";import{language as U}from"../../../../base/common/platform.js";import{ILanguageService as k}from"../../../../editor/common/languages/language.js";import{Extensions as _}from"../../../common/contributions.js";import{Registry as D}from"../../../../platform/registry/common/platform.js";import{ITelemetryService as x}from"../../../../platform/telemetry/common/telemetry.js";import{IStorageService as $,StorageScope as o,StorageTarget as t}from"../../../../platform/storage/common/storage.js";import{IProductService as w}from"../../../../platform/product/common/productService.js";import{LifecyclePhase as W}from"../../../services/lifecycle/common/lifecycle.js";import{Severity as F,INotificationService as K}from"../../../../platform/notification/common/notification.js";import{ITextFileService as M}from"../../../services/textfile/common/textfiles.js";import{IOpenerService as Y}from"../../../../platform/opener/common/opener.js";import{URI as G}from"../../../../base/common/uri.js";import{platform as V}from"../../../../base/common/process.js";import{RunOnceWorker as z}from"../../../../base/common/async.js";import{Disposable as B}from"../../../../base/common/lifecycle.js";import{IExtensionService as H}from"../../../services/extensions/common/extensions.js";class j extends B{constructor(e,r,n,i,c,u,y,l){super();const A=`${e.surveyId}.sessionCount`,g=`${e.surveyId}.lastSessionDate`,m=`${e.surveyId}.skipVersion`,p=`${e.surveyId}.isCandidate`,a=`${e.surveyId}.editedCount`,E=`${e.surveyId}.editedDate`;if(r.get(m,o.APPLICATION,""))return;const v=new Date().toDateString();if(r.getNumber(a,o.APPLICATION,0)<e.editCount){const N=this._register(new z(f=>{f.forEach(L=>{if(L.getLanguageId()===e.languageId&&v!==r.get(E,o.APPLICATION)){const O=r.getNumber(a,o.APPLICATION,0)+1;r.store(a,O,o.APPLICATION,t.USER),r.store(E,v,o.APPLICATION,t.USER)}})},250));this._register(u.files.onDidSave(f=>N.work(f.model)))}const h=r.get(g,o.APPLICATION,new Date(0).toDateString());if(v===h)return;const P=r.getNumber(A,o.APPLICATION,0)+1;if(r.store(g,v,o.APPLICATION,t.USER),r.store(A,P,o.APPLICATION,t.USER),P<9||r.getNumber(a,o.APPLICATION,0)<e.editCount)return;const T=r.getBoolean(p,o.APPLICATION,!1)||Math.random()<e.userProbability;if(r.store(p,T,o.APPLICATION,t.USER),!T){r.store(m,l.version,o.APPLICATION,t.USER);return}n.prompt(F.Info,d("helpUs","Help us improve our support for {0}",c.getLanguageName(e.languageId)??e.languageId),[{label:d("takeShortSurvey","Take Short Survey"),run:()=>{i.publicLog(`${e.surveyId}.survey/takeShortSurvey`),y.open(G.parse(`${e.surveyUrl}?o=${encodeURIComponent(V)}&v=${encodeURIComponent(l.version)}&m=${encodeURIComponent(i.machineId)}`)),r.store(p,!1,o.APPLICATION,t.USER),r.store(m,l.version,o.APPLICATION,t.USER)}},{label:d("remindLater","Remind Me Later"),run:()=>{i.publicLog(`${e.surveyId}.survey/remindMeLater`),r.store(A,P-3,o.APPLICATION,t.USER)}},{label:d("neverAgain","Don't Show Again"),isSecondary:!0,run:()=>{i.publicLog(`${e.surveyId}.survey/dontShowAgain`),r.store(p,!1,o.APPLICATION,t.USER),r.store(m,l.version,o.APPLICATION,t.USER)}}],{sticky:!0})}}let S=class{constructor(e,r,n,i,c,u,y,l){this.storageService=e;this.notificationService=r;this.telemetryService=n;this.textFileService=i;this.openerService=c;this.productService=u;this.languageService=y;this.extensionService=l;this.handleSurveys()}async handleSurveys(){this.productService.surveys&&(await this.extensionService.whenInstalledExtensionsRegistered(),this.productService.surveys.filter(e=>e.surveyId&&e.editCount&&e.languageId&&e.surveyUrl&&e.userProbability).map(e=>new j(e,this.storageService,this.notificationService,this.telemetryService,this.languageService,this.textFileService,this.openerService,this.productService)))}};S=C([s(0,$),s(1,K),s(2,x),s(3,M),s(4,Y),s(5,w),s(6,k),s(7,H)],S),U==="en"&&D.as(_.Workbench).registerWorkbenchContribution(S,W.Restored);
