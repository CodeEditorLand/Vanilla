{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceWorker } from \"../../../../base/common/async.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { language } from \"../../../../base/common/platform.js\";\nimport { platform } from \"../../../../base/common/process.js\";\nimport type { ISurveyData } from \"../../../../base/common/product.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../common/contributions.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport {\n\ttype ITextFileEditorModel,\n\tITextFileService,\n} from \"../../../services/textfile/common/textfiles.js\";\n\nclass LanguageSurvey extends Disposable {\n\tconstructor(\n\t\tdata: ISurveyData,\n\t\tstorageService: IStorageService,\n\t\tnotificationService: INotificationService,\n\t\ttelemetryService: ITelemetryService,\n\t\tlanguageService: ILanguageService,\n\t\ttextFileService: ITextFileService,\n\t\topenerService: IOpenerService,\n\t\tproductService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tconst SESSION_COUNT_KEY = `${data.surveyId}.sessionCount`;\n\t\tconst LAST_SESSION_DATE_KEY = `${data.surveyId}.lastSessionDate`;\n\t\tconst SKIP_VERSION_KEY = `${data.surveyId}.skipVersion`;\n\t\tconst IS_CANDIDATE_KEY = `${data.surveyId}.isCandidate`;\n\t\tconst EDITED_LANGUAGE_COUNT_KEY = `${data.surveyId}.editedCount`;\n\t\tconst EDITED_LANGUAGE_DATE_KEY = `${data.surveyId}.editedDate`;\n\n\t\tconst skipVersion = storageService.get(\n\t\t\tSKIP_VERSION_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t\t\"\",\n\t\t);\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\n\t\tif (\n\t\t\tstorageService.getNumber(\n\t\t\t\tEDITED_LANGUAGE_COUNT_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t0,\n\t\t\t) < data.editCount\n\t\t) {\n\t\t\t// Process model-save event every 250ms to reduce load\n\t\t\tconst onModelsSavedWorker = this._register(\n\t\t\t\tnew RunOnceWorker<ITextFileEditorModel>((models) => {\n\t\t\t\t\tmodels.forEach((m) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tm.getLanguageId() === data.languageId &&\n\t\t\t\t\t\t\tdate !==\n\t\t\t\t\t\t\t\tstorageService.get(\n\t\t\t\t\t\t\t\t\tEDITED_LANGUAGE_DATE_KEY,\n\t\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst editedCount =\n\t\t\t\t\t\t\t\tstorageService.getNumber(\n\t\t\t\t\t\t\t\t\tEDITED_LANGUAGE_COUNT_KEY,\n\t\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t) + 1;\n\t\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\t\tEDITED_LANGUAGE_COUNT_KEY,\n\t\t\t\t\t\t\t\teditedCount,\n\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\t\tEDITED_LANGUAGE_DATE_KEY,\n\t\t\t\t\t\t\t\tdate,\n\t\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, 250),\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\ttextFileService.files.onDidSave((e) =>\n\t\t\t\t\tonModelsSavedWorker.work(e.model),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst lastSessionDate = storageService.get(\n\t\t\tLAST_SESSION_DATE_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tnew Date(0).toDateString(),\n\t\t);\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount =\n\t\t\tstorageService.getNumber(\n\t\t\t\tSESSION_COUNT_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t0,\n\t\t\t) + 1;\n\t\tstorageService.store(\n\t\t\tLAST_SESSION_DATE_KEY,\n\t\t\tdate,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t\tstorageService.store(\n\t\t\tSESSION_COUNT_KEY,\n\t\t\tsessionCount,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tstorageService.getNumber(\n\t\t\t\tEDITED_LANGUAGE_COUNT_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t0,\n\t\t\t) < data.editCount\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate =\n\t\t\tstorageService.getBoolean(\n\t\t\t\tIS_CANDIDATE_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tfalse,\n\t\t\t) || Math.random() < data.userProbability;\n\n\t\tstorageService.store(\n\t\t\tIS_CANDIDATE_KEY,\n\t\t\tisCandidate,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(\n\t\t\t\tSKIP_VERSION_KEY,\n\t\t\t\tproductService.version,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize(\n\t\t\t\t\"helpUs\",\n\t\t\t\t\"Help us improve our support for {0}\",\n\t\t\t\tlanguageService.getLanguageName(data.languageId) ??\n\t\t\t\t\tdata.languageId,\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\"takeShortSurvey\", \"Take Short Survey\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\ttelemetryService.publicLog(\n\t\t\t\t\t\t\t`${data.surveyId}.survey/takeShortSurvey`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\topenerService.open(\n\t\t\t\t\t\t\tURI.parse(\n\t\t\t\t\t\t\t\t`${data.surveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(productService.version)}&m=${encodeURIComponent(telemetryService.machineId)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tIS_CANDIDATE_KEY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tSKIP_VERSION_KEY,\n\t\t\t\t\t\t\tproductService.version,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\"remindLater\", \"Remind Me Later\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\ttelemetryService.publicLog(\n\t\t\t\t\t\t\t`${data.surveyId}.survey/remindMeLater`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tSESSION_COUNT_KEY,\n\t\t\t\t\t\t\tsessionCount - 3,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\"neverAgain\", \"Don't Show Again\"),\n\t\t\t\t\tisSecondary: true,\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\ttelemetryService.publicLog(\n\t\t\t\t\t\t\t`${data.surveyId}.survey/dontShowAgain`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tIS_CANDIDATE_KEY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tSKIP_VERSION_KEY,\n\t\t\t\t\t\t\tproductService.version,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ sticky: true },\n\t\t);\n\t}\n}\n\nclass LanguageSurveysContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t) {\n\t\tthis.handleSurveys();\n\t}\n\n\tprivate async handleSurveys() {\n\t\tif (!this.productService.surveys) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure to wait for installed extensions\n\t\t// being registered to show notifications\n\t\t// properly (https://github.com/microsoft/vscode/issues/121216)\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t// Handle surveys\n\t\tthis.productService.surveys\n\t\t\t.filter(\n\t\t\t\t(surveyData) =>\n\t\t\t\t\tsurveyData.surveyId &&\n\t\t\t\t\tsurveyData.editCount &&\n\t\t\t\t\tsurveyData.languageId &&\n\t\t\t\t\tsurveyData.surveyUrl &&\n\t\t\t\t\tsurveyData.userProbability,\n\t\t\t)\n\t\t\t.map(\n\t\t\t\t(surveyData) =>\n\t\t\t\t\tnew LanguageSurvey(\n\t\t\t\t\t\tsurveyData,\n\t\t\t\t\t\tthis.storageService,\n\t\t\t\t\t\tthis.notificationService,\n\t\t\t\t\t\tthis.telemetryService,\n\t\t\t\t\t\tthis.languageService,\n\t\t\t\t\t\tthis.textFileService,\n\t\t\t\t\t\tthis.openerService,\n\t\t\t\t\t\tthis.productService,\n\t\t\t\t\t),\n\t\t\t);\n\t}\n}\n\nif (language === \"en\") {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(\n\t\tWorkbenchExtensions.Workbench,\n\t);\n\tworkbenchRegistry.registerWorkbenchContribution(\n\t\tLanguageSurveysContribution,\n\t\tLifecyclePhase.Restored,\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
