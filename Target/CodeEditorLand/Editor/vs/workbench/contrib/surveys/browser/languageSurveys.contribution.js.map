{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { language } from '../../../../base/common/platform.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { ISurveyData } from '../../../../base/common/product.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { Severity, INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ITextFileService, ITextFileEditorModel } from '../../../services/textfile/common/textfiles.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { platform } from '../../../../base/common/process.js';\nimport { RunOnceWorker } from '../../../../base/common/async.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\n\nclass LanguageSurvey extends Disposable {\n\n\tconstructor(\n\t\tdata: ISurveyData,\n\t\tstorageService: IStorageService,\n\t\tnotificationService: INotificationService,\n\t\ttelemetryService: ITelemetryService,\n\t\tlanguageService: ILanguageService,\n\t\ttextFileService: ITextFileService,\n\t\topenerService: IOpenerService,\n\t\tproductService: IProductService\n\t) {\n\t\tsuper();\n\n\t\tconst SESSION_COUNT_KEY = `${data.surveyId}.sessionCount`;\n\t\tconst LAST_SESSION_DATE_KEY = `${data.surveyId}.lastSessionDate`;\n\t\tconst SKIP_VERSION_KEY = `${data.surveyId}.skipVersion`;\n\t\tconst IS_CANDIDATE_KEY = `${data.surveyId}.isCandidate`;\n\t\tconst EDITED_LANGUAGE_COUNT_KEY = `${data.surveyId}.editedCount`;\n\t\tconst EDITED_LANGUAGE_DATE_KEY = `${data.surveyId}.editedDate`;\n\n\t\tconst skipVersion = storageService.get(SKIP_VERSION_KEY, StorageScope.APPLICATION, '');\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.APPLICATION, 0) < data.editCount) {\n\n\t\t\t// Process model-save event every 250ms to reduce load\n\t\t\tconst onModelsSavedWorker = this._register(new RunOnceWorker<ITextFileEditorModel>(models => {\n\t\t\t\tmodels.forEach(m => {\n\t\t\t\t\tif (m.getLanguageId() === data.languageId && date !== storageService.get(EDITED_LANGUAGE_DATE_KEY, StorageScope.APPLICATION)) {\n\t\t\t\t\t\tconst editedCount = storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.APPLICATION, 0) + 1;\n\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_COUNT_KEY, editedCount, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_DATE_KEY, date, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 250));\n\n\t\t\tthis._register(textFileService.files.onDidSave(e => onModelsSavedWorker.work(e.model)));\n\t\t}\n\n\t\tconst lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, StorageScope.APPLICATION, new Date(0).toDateString());\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount = storageService.getNumber(SESSION_COUNT_KEY, StorageScope.APPLICATION, 0) + 1;\n\t\tstorageService.store(LAST_SESSION_DATE_KEY, date, StorageScope.APPLICATION, StorageTarget.USER);\n\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount, StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.APPLICATION, 0) < data.editCount) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, StorageScope.APPLICATION, false)\n\t\t\t|| Math.random() < data.userProbability;\n\n\t\tstorageService.store(IS_CANDIDATE_KEY, isCandidate, StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\treturn;\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize('helpUs', \"Help us improve our support for {0}\", languageService.getLanguageName(data.languageId) ?? data.languageId),\n\t\t\t[{\n\t\t\t\tlabel: localize('takeShortSurvey', \"Take Short Survey\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/takeShortSurvey`);\n\t\t\t\t\topenerService.open(URI.parse(`${data.surveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(productService.version)}&m=${encodeURIComponent(telemetryService.machineId)}`));\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('remindLater', \"Remind Me Later\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/remindMeLater`);\n\t\t\t\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount - 3, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/dontShowAgain`);\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nclass LanguageSurveysContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService\n\t) {\n\t\tthis.handleSurveys();\n\t}\n\n\tprivate async handleSurveys() {\n\t\tif (!this.productService.surveys) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure to wait for installed extensions\n\t\t// being registered to show notifications\n\t\t// properly (https://github.com/microsoft/vscode/issues/121216)\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t// Handle surveys\n\t\tthis.productService.surveys\n\t\t\t.filter(surveyData => surveyData.surveyId && surveyData.editCount && surveyData.languageId && surveyData.surveyUrl && surveyData.userProbability)\n\t\t\t.map(surveyData => new LanguageSurvey(surveyData, this.storageService, this.notificationService, this.telemetryService, this.languageService, this.textFileService, this.openerService, this.productService));\n\t}\n}\n\nif (language === 'en') {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(LanguageSurveysContribution, LifecyclePhase.Restored);\n}\n"],
  "mappings": "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",
  "names": []
}
