{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/surveys/browser/nps.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { language } from '../../../../base/common/platform.js';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { Severity, INotificationService, NotificationPriority } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { platform } from '../../../../base/common/process.js';\n\nconst PROBABILITY = 0.15;\nconst SESSION_COUNT_KEY = 'nps/sessionCount';\nconst LAST_SESSION_DATE_KEY = 'nps/lastSessionDate';\nconst SKIP_VERSION_KEY = 'nps/skipVersion';\nconst IS_CANDIDATE_KEY = 'nps/isCandidate';\n\nclass NPSContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tif (!productService.npsSurveyUrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst skipVersion = storageService.get(SKIP_VERSION_KEY, StorageScope.APPLICATION, '');\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\t\tconst lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, StorageScope.APPLICATION, new Date(0).toDateString());\n\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount = (storageService.getNumber(SESSION_COUNT_KEY, StorageScope.APPLICATION, 0) || 0) + 1;\n\t\tstorageService.store(LAST_SESSION_DATE_KEY, date, StorageScope.APPLICATION, StorageTarget.USER);\n\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount, StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, StorageScope.APPLICATION, false)\n\t\t\t|| Math.random() < PROBABILITY;\n\n\t\tstorageService.store(IS_CANDIDATE_KEY, isCandidate, StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\treturn;\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('surveyQuestion', \"Do you mind taking a quick feedback survey?\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('takeSurvey', \"Take Survey\"),\n\t\t\t\trun: () => {\n\t\t\t\t\topenerService.open(URI.parse(`${productService.npsSurveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(productService.version)}&m=${encodeURIComponent(telemetryService.machineId)}`));\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('remindLater', \"Remind Me Later\"),\n\t\t\t\trun: () => storageService.store(SESSION_COUNT_KEY, sessionCount - 3, StorageScope.APPLICATION, StorageTarget.USER)\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true, priority: NotificationPriority.URGENT }\n\t\t);\n\t}\n}\n\nif (language === 'en') {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(NPSContribution, LifecyclePhase.Restored);\n}\n"],
  "mappings": "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",
  "names": []
}
