{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/surveys/browser/nps.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { language } from \"../../../../base/common/platform.js\";\nimport { platform } from \"../../../../base/common/process.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tINotificationService,\n\tNotificationPriority,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../common/contributions.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\n\nconst PROBABILITY = 0.15;\nconst SESSION_COUNT_KEY = \"nps/sessionCount\";\nconst LAST_SESSION_DATE_KEY = \"nps/lastSessionDate\";\nconst SKIP_VERSION_KEY = \"nps/skipVersion\";\nconst IS_CANDIDATE_KEY = \"nps/isCandidate\";\n\nclass NPSContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IProductService productService: IProductService,\n\t) {\n\t\tif (!productService.npsSurveyUrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst skipVersion = storageService.get(\n\t\t\tSKIP_VERSION_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t\t\"\",\n\t\t);\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\t\tconst lastSessionDate = storageService.get(\n\t\t\tLAST_SESSION_DATE_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tnew Date(0).toDateString(),\n\t\t);\n\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount =\n\t\t\t(storageService.getNumber(\n\t\t\t\tSESSION_COUNT_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t0,\n\t\t\t) || 0) + 1;\n\t\tstorageService.store(\n\t\t\tLAST_SESSION_DATE_KEY,\n\t\t\tdate,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t\tstorageService.store(\n\t\t\tSESSION_COUNT_KEY,\n\t\t\tsessionCount,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate =\n\t\t\tstorageService.getBoolean(\n\t\t\t\tIS_CANDIDATE_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tfalse,\n\t\t\t) || Math.random() < PROBABILITY;\n\n\t\tstorageService.store(\n\t\t\tIS_CANDIDATE_KEY,\n\t\t\tisCandidate,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(\n\t\t\t\tSKIP_VERSION_KEY,\n\t\t\t\tproductService.version,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize(\n\t\t\t\t\"surveyQuestion\",\n\t\t\t\t\"Do you mind taking a quick feedback survey?\",\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"takeSurvey\", \"Take Survey\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\topenerService.open(\n\t\t\t\t\t\t\tURI.parse(\n\t\t\t\t\t\t\t\t`${productService.npsSurveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(productService.version)}&m=${encodeURIComponent(telemetryService.machineId)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tIS_CANDIDATE_KEY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tSKIP_VERSION_KEY,\n\t\t\t\t\t\t\tproductService.version,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"remindLater\", \"Remind Me Later\"),\n\t\t\t\t\trun: () =>\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tSESSION_COUNT_KEY,\n\t\t\t\t\t\t\tsessionCount - 3,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"neverAgain\", \"Don't Show Again\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tIS_CANDIDATE_KEY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\t\tSKIP_VERSION_KEY,\n\t\t\t\t\t\t\tproductService.version,\n\t\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ sticky: true, priority: NotificationPriority.URGENT },\n\t\t);\n\t}\n}\n\nif (language === \"en\") {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(\n\t\tWorkbenchExtensions.Workbench,\n\t);\n\tworkbenchRegistry.registerWorkbenchContribution(\n\t\tNPSContribution,\n\t\tLifecyclePhase.Restored,\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
