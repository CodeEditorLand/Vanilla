{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/speech/browser/speechService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { DeferredPromise } from '../../../../base/common/async.js';\nimport { ISpeechService, ISpeechProvider, HasSpeechProvider, ISpeechToTextSession, SpeechToTextInProgress, KeywordRecognitionStatus, SpeechToTextStatus, speechLanguageConfigToLanguage, SPEECH_LANGUAGE_CONFIG, ITextToSpeechSession, TextToSpeechInProgress, TextToSpeechStatus } from '../common/speechService.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ExtensionsRegistry } from '../../../services/extensions/common/extensionsRegistry.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\n\nexport interface ISpeechProviderDescriptor {\n\treadonly name: string;\n\treadonly description?: string;\n}\n\nconst speechProvidersExtensionPoint = ExtensionsRegistry.registerExtensionPoint<ISpeechProviderDescriptor[]>({\n\textensionPoint: 'speechProviders',\n\tjsonSchema: {\n\t\tdescription: localize('vscode.extension.contributes.speechProvider', 'Contributes a Speech Provider'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\tadditionalProperties: false,\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { name: '', description: '' } }],\n\t\t\trequired: ['name'],\n\t\t\tproperties: {\n\t\t\t\tname: {\n\t\t\t\t\tdescription: localize('speechProviderName', \"Unique name for this Speech Provider.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\tdescription: localize('speechProviderDescription', \"A description of this Speech Provider, shown in the UI.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class SpeechService extends Disposable implements ISpeechService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeHasSpeechProvider = this._register(new Emitter<void>());\n\treadonly onDidChangeHasSpeechProvider = this._onDidChangeHasSpeechProvider.event;\n\n\tget hasSpeechProvider() { return this.providerDescriptors.size > 0 || this.providers.size > 0; }\n\n\tprivate readonly providers = new Map<string, ISpeechProvider>();\n\tprivate readonly providerDescriptors = new Map<string, ISpeechProviderDescriptor>();\n\n\tprivate readonly hasSpeechProviderContext = HasSpeechProvider.bindTo(this.contextKeyService);\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService\n\t) {\n\t\tsuper();\n\n\t\tthis.handleAndRegisterSpeechExtensions();\n\t}\n\n\tprivate handleAndRegisterSpeechExtensions(): void {\n\t\tspeechProvidersExtensionPoint.setHandler((extensions, delta) => {\n\t\t\tconst oldHasSpeechProvider = this.hasSpeechProvider;\n\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tfor (const descriptor of extension.value) {\n\t\t\t\t\tthis.providerDescriptors.delete(descriptor.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tfor (const descriptor of extension.value) {\n\t\t\t\t\tthis.providerDescriptors.set(descriptor.name, descriptor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (oldHasSpeechProvider !== this.hasSpeechProvider) {\n\t\t\t\tthis.handleHasSpeechProviderChange();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterSpeechProvider(identifier: string, provider: ISpeechProvider): IDisposable {\n\t\tif (this.providers.has(identifier)) {\n\t\t\tthrow new Error(`Speech provider with identifier ${identifier} is already registered.`);\n\t\t}\n\n\t\tconst oldHasSpeechProvider = this.hasSpeechProvider;\n\n\t\tthis.providers.set(identifier, provider);\n\n\t\tif (oldHasSpeechProvider !== this.hasSpeechProvider) {\n\t\t\tthis.handleHasSpeechProviderChange();\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tconst oldHasSpeechProvider = this.hasSpeechProvider;\n\n\t\t\tthis.providers.delete(identifier);\n\n\t\t\tif (oldHasSpeechProvider !== this.hasSpeechProvider) {\n\t\t\t\tthis.handleHasSpeechProviderChange();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handleHasSpeechProviderChange(): void {\n\t\tthis.hasSpeechProviderContext.set(this.hasSpeechProvider);\n\n\t\tthis._onDidChangeHasSpeechProvider.fire();\n\t}\n\n\t//#region Speech to Text\n\n\tprivate readonly _onDidStartSpeechToTextSession = this._register(new Emitter<void>());\n\treadonly onDidStartSpeechToTextSession = this._onDidStartSpeechToTextSession.event;\n\n\tprivate readonly _onDidEndSpeechToTextSession = this._register(new Emitter<void>());\n\treadonly onDidEndSpeechToTextSession = this._onDidEndSpeechToTextSession.event;\n\n\tprivate activeSpeechToTextSessions = 0;\n\tget hasActiveSpeechToTextSession() { return this.activeSpeechToTextSessions > 0; }\n\n\tprivate readonly speechToTextInProgress = SpeechToTextInProgress.bindTo(this.contextKeyService);\n\n\tasync createSpeechToTextSession(token: CancellationToken, context: string = 'speech'): Promise<ISpeechToTextSession> {\n\t\tconst provider = await this.getProvider();\n\n\t\tconst language = speechLanguageConfigToLanguage(this.configurationService.getValue<unknown>(SPEECH_LANGUAGE_CONFIG));\n\t\tconst session = provider.createSpeechToTextSession(token, typeof language === 'string' ? { language } : undefined);\n\n\t\tconst sessionStart = Date.now();\n\t\tlet sessionRecognized = false;\n\t\tlet sessionError = false;\n\t\tlet sessionContentLength = 0;\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = () => {\n\t\t\tthis.activeSpeechToTextSessions = Math.max(0, this.activeSpeechToTextSessions - 1);\n\t\t\tif (!this.hasActiveSpeechToTextSession) {\n\t\t\t\tthis.speechToTextInProgress.reset();\n\t\t\t}\n\t\t\tthis._onDidEndSpeechToTextSession.fire();\n\n\t\t\ttype SpeechToTextSessionClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tcomment: 'An event that fires when a speech to text session is created';\n\t\t\t\tcontext: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Context of the session.' };\n\t\t\t\tsessionDuration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Duration of the session.' };\n\t\t\t\tsessionRecognized: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'If speech was recognized.' };\n\t\t\t\tsessionError: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'If speech resulted in error.' };\n\t\t\t\tsessionContentLength: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Length of the recognized text.' };\n\t\t\t\tsessionLanguage: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Configured language for the session.' };\n\t\t\t};\n\t\t\ttype SpeechToTextSessionEvent = {\n\t\t\t\tcontext: string;\n\t\t\t\tsessionDuration: number;\n\t\t\t\tsessionRecognized: boolean;\n\t\t\t\tsessionError: boolean;\n\t\t\t\tsessionContentLength: number;\n\t\t\t\tsessionLanguage: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<SpeechToTextSessionEvent, SpeechToTextSessionClassification>('speechToTextSession', {\n\t\t\t\tcontext,\n\t\t\t\tsessionDuration: Date.now() - sessionStart,\n\t\t\t\tsessionRecognized,\n\t\t\t\tsessionError,\n\t\t\t\tsessionContentLength,\n\t\t\t\tsessionLanguage: language\n\t\t\t});\n\n\t\t\tdisposables.dispose();\n\t\t};\n\n\t\tdisposables.add(token.onCancellationRequested(() => onSessionStoppedOrCanceled()));\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled();\n\t\t}\n\n\t\tdisposables.add(session.onDidChange(e => {\n\t\t\tswitch (e.status) {\n\t\t\t\tcase SpeechToTextStatus.Started:\n\t\t\t\t\tthis.activeSpeechToTextSessions++;\n\t\t\t\t\tthis.speechToTextInProgress.set(true);\n\t\t\t\t\tthis._onDidStartSpeechToTextSession.fire();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Recognizing:\n\t\t\t\t\tsessionRecognized = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Recognized:\n\t\t\t\t\tif (typeof e.text === 'string') {\n\t\t\t\t\t\tsessionContentLength += e.text.length;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Stopped:\n\t\t\t\t\tonSessionStoppedOrCanceled();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Error:\n\t\t\t\t\tthis.logService.error(`Speech provider error in speech to text session: ${e.text}`);\n\t\t\t\t\tsessionError = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\treturn session;\n\t}\n\n\tprivate async getProvider(): Promise<ISpeechProvider> {\n\n\t\t// Send out extension activation to ensure providers can register\n\t\tawait this.extensionService.activateByEvent('onSpeech');\n\n\t\tconst provider = Array.from(this.providers.values()).at(0);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`No Speech provider is registered.`);\n\t\t} else if (this.providers.size > 1) {\n\t\t\tthis.logService.warn(`Multiple speech providers registered. Picking first one: ${provider.metadata.displayName}`);\n\t\t}\n\n\t\treturn provider;\n\t}\n\n\t//#endregion\n\n\t//#region Text to Speech\n\n\tprivate readonly _onDidStartTextToSpeechSession = this._register(new Emitter<void>());\n\treadonly onDidStartTextToSpeechSession = this._onDidStartTextToSpeechSession.event;\n\n\tprivate readonly _onDidEndTextToSpeechSession = this._register(new Emitter<void>());\n\treadonly onDidEndTextToSpeechSession = this._onDidEndTextToSpeechSession.event;\n\n\tprivate activeTextToSpeechSessions = 0;\n\tget hasActiveTextToSpeechSession() { return this.activeTextToSpeechSessions > 0; }\n\n\tprivate readonly textToSpeechInProgress = TextToSpeechInProgress.bindTo(this.contextKeyService);\n\n\tasync createTextToSpeechSession(token: CancellationToken, context: string = 'speech'): Promise<ITextToSpeechSession> {\n\t\tconst provider = await this.getProvider();\n\n\t\tconst language = speechLanguageConfigToLanguage(this.configurationService.getValue<unknown>(SPEECH_LANGUAGE_CONFIG));\n\t\tconst session = provider.createTextToSpeechSession(token, typeof language === 'string' ? { language } : undefined);\n\n\t\tconst sessionStart = Date.now();\n\t\tlet sessionError = false;\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = (dispose: boolean) => {\n\t\t\tthis.activeTextToSpeechSessions = Math.max(0, this.activeTextToSpeechSessions - 1);\n\t\t\tif (!this.hasActiveTextToSpeechSession) {\n\t\t\t\tthis.textToSpeechInProgress.reset();\n\t\t\t}\n\t\t\tthis._onDidEndTextToSpeechSession.fire();\n\n\t\t\ttype TextToSpeechSessionClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tcomment: 'An event that fires when a text to speech session is created';\n\t\t\t\tcontext: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Context of the session.' };\n\t\t\t\tsessionDuration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Duration of the session.' };\n\t\t\t\tsessionError: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'If speech resulted in error.' };\n\t\t\t\tsessionLanguage: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Configured language for the session.' };\n\t\t\t};\n\t\t\ttype TextToSpeechSessionEvent = {\n\t\t\t\tcontext: string;\n\t\t\t\tsessionDuration: number;\n\t\t\t\tsessionError: boolean;\n\t\t\t\tsessionLanguage: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<TextToSpeechSessionEvent, TextToSpeechSessionClassification>('textToSpeechSession', {\n\t\t\t\tcontext,\n\t\t\t\tsessionDuration: Date.now() - sessionStart,\n\t\t\t\tsessionError,\n\t\t\t\tsessionLanguage: language\n\t\t\t});\n\n\t\t\tif (dispose) {\n\t\t\t\tdisposables.dispose();\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(token.onCancellationRequested(() => onSessionStoppedOrCanceled(true)));\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled(true);\n\t\t}\n\n\t\tdisposables.add(session.onDidChange(e => {\n\t\t\tswitch (e.status) {\n\t\t\t\tcase TextToSpeechStatus.Started:\n\t\t\t\t\tthis.activeTextToSpeechSessions++;\n\t\t\t\t\tthis.textToSpeechInProgress.set(true);\n\t\t\t\t\tthis._onDidStartTextToSpeechSession.fire();\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextToSpeechStatus.Stopped:\n\t\t\t\t\tonSessionStoppedOrCanceled(false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextToSpeechStatus.Error:\n\t\t\t\t\tthis.logService.error(`Speech provider error in text to speech session: ${e.text}`);\n\t\t\t\t\tsessionError = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\treturn session;\n\t}\n\n\t//#endregion\n\n\t//#region Keyword Recognition\n\n\tprivate readonly _onDidStartKeywordRecognition = this._register(new Emitter<void>());\n\treadonly onDidStartKeywordRecognition = this._onDidStartKeywordRecognition.event;\n\n\tprivate readonly _onDidEndKeywordRecognition = this._register(new Emitter<void>());\n\treadonly onDidEndKeywordRecognition = this._onDidEndKeywordRecognition.event;\n\n\tprivate activeKeywordRecognitionSessions = 0;\n\tget hasActiveKeywordRecognition() { return this.activeKeywordRecognitionSessions > 0; }\n\n\tasync recognizeKeyword(token: CancellationToken): Promise<KeywordRecognitionStatus> {\n\t\tconst result = new DeferredPromise<KeywordRecognitionStatus>();\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(token.onCancellationRequested(() => {\n\t\t\tdisposables.dispose();\n\t\t\tresult.complete(KeywordRecognitionStatus.Canceled);\n\t\t}));\n\n\t\tconst recognizeKeywordDisposables = disposables.add(new DisposableStore());\n\t\tlet activeRecognizeKeywordSession: Promise<void> | undefined = undefined;\n\t\tconst recognizeKeyword = () => {\n\t\t\trecognizeKeywordDisposables.clear();\n\n\t\t\tconst cts = new CancellationTokenSource(token);\n\t\t\trecognizeKeywordDisposables.add(toDisposable(() => cts.dispose(true)));\n\t\t\tconst currentRecognizeKeywordSession = activeRecognizeKeywordSession = this.doRecognizeKeyword(cts.token).then(status => {\n\t\t\t\tif (currentRecognizeKeywordSession === activeRecognizeKeywordSession) {\n\t\t\t\t\tresult.complete(status);\n\t\t\t\t}\n\t\t\t}, error => {\n\t\t\t\tif (currentRecognizeKeywordSession === activeRecognizeKeywordSession) {\n\t\t\t\t\tresult.error(error);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tdisposables.add(this.hostService.onDidChangeFocus(focused => {\n\t\t\tif (!focused && activeRecognizeKeywordSession) {\n\t\t\t\trecognizeKeywordDisposables.clear();\n\t\t\t\tactiveRecognizeKeywordSession = undefined;\n\t\t\t} else if (!activeRecognizeKeywordSession) {\n\t\t\t\trecognizeKeyword();\n\t\t\t}\n\t\t}));\n\n\t\tif (this.hostService.hasFocus) {\n\t\t\trecognizeKeyword();\n\t\t}\n\n\t\tlet status: KeywordRecognitionStatus;\n\t\ttry {\n\t\t\tstatus = await result.p;\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\n\t\ttype KeywordRecognitionClassification = {\n\t\t\towner: 'bpasero';\n\t\t\tcomment: 'An event that fires when a speech keyword detection is started';\n\t\t\tkeywordRecognized: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'If the keyword was recognized.' };\n\t\t};\n\t\ttype KeywordRecognitionEvent = {\n\t\t\tkeywordRecognized: boolean;\n\t\t};\n\t\tthis.telemetryService.publicLog2<KeywordRecognitionEvent, KeywordRecognitionClassification>('keywordRecognition', {\n\t\t\tkeywordRecognized: status === KeywordRecognitionStatus.Recognized\n\t\t});\n\n\t\treturn status;\n\t}\n\n\tprivate async doRecognizeKeyword(token: CancellationToken): Promise<KeywordRecognitionStatus> {\n\t\tconst provider = await this.getProvider();\n\n\t\tconst session = provider.createKeywordRecognitionSession(token);\n\t\tthis.activeKeywordRecognitionSessions++;\n\t\tthis._onDidStartKeywordRecognition.fire();\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = () => {\n\t\t\tthis.activeKeywordRecognitionSessions = Math.max(0, this.activeKeywordRecognitionSessions - 1);\n\t\t\tthis._onDidEndKeywordRecognition.fire();\n\n\t\t\tdisposables.dispose();\n\t\t};\n\n\t\tdisposables.add(token.onCancellationRequested(() => onSessionStoppedOrCanceled()));\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled();\n\t\t}\n\n\t\tdisposables.add(session.onDidChange(e => {\n\t\t\tif (e.status === KeywordRecognitionStatus.Stopped) {\n\t\t\t\tonSessionStoppedOrCanceled();\n\t\t\t}\n\t\t}));\n\n\t\ttry {\n\t\t\treturn (await Event.toPromise(session.onDidChange)).status;\n\t\t} finally {\n\t\t\tonSessionStoppedOrCanceled();\n\t\t}\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,mBAAmB,+BAA+B;AAC3D,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,iBAAiB,aAAa,oBAAoB;AACvE,SAAS,0BAA0B;AACnC,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB;AAC7B,SAAS,uBAAuB;AAChC,SAAS,gBAAgB,iBAAiB,mBAAmB,sBAAsB,wBAAwB,0BAA0B,oBAAoB,gCAAgC,wBAAwB,sBAAsB,wBAAwB,0BAA0B;AACzR,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AACnC,SAAS,yBAAyB;AAOlC,MAAM,gCAAgC,mBAAmB,uBAAoD;AAAA,EAC5G,gBAAgB;AAAA,EAChB,YAAY;AAAA,IACX,aAAa,SAAS,+CAA+C,+BAA+B;AAAA,IACpG,MAAM;AAAA,IACN,OAAO;AAAA,MACN,sBAAsB;AAAA,MACtB,MAAM;AAAA,MACN,iBAAiB,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,aAAa,GAAG,EAAE,CAAC;AAAA,MACzD,UAAU,CAAC,MAAM;AAAA,MACjB,YAAY;AAAA,QACX,MAAM;AAAA,UACL,aAAa,SAAS,sBAAsB,uCAAuC;AAAA,UACnF,MAAM;AAAA,QACP;AAAA,QACA,aAAa;AAAA,UACZ,aAAa,SAAS,6BAA6B,yDAAyD;AAAA,UAC5G,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,CAAC;AAEM,IAAM,gBAAN,cAA4B,WAAqC;AAAA,EAcvE,YAC+B,YACO,mBACN,aACK,kBACI,sBACJ,kBACnC;AACD,UAAM;AAPwB;AACO;AACN;AACK;AACI;AACJ;AAIpC,SAAK,kCAAkC;AAAA,EACxC;AAAA,EAzED,OAgDwE;AAAA;AAAA;AAAA,EAE9D;AAAA,EAEQ,gCAAgC,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC1E,+BAA+B,KAAK,8BAA8B;AAAA,EAE3E,IAAI,oBAAoB;AAAE,WAAO,KAAK,oBAAoB,OAAO,KAAK,KAAK,UAAU,OAAO;AAAA,EAAG;AAAA,EAE9E,YAAY,oBAAI,IAA6B;AAAA,EAC7C,sBAAsB,oBAAI,IAAuC;AAAA,EAEjE,2BAA2B,kBAAkB,OAAO,KAAK,iBAAiB;AAAA,EAenF,oCAA0C;AACjD,kCAA8B,WAAW,CAAC,YAAY,UAAU;AAC/D,YAAM,uBAAuB,KAAK;AAElC,iBAAW,aAAa,MAAM,SAAS;AACtC,mBAAW,cAAc,UAAU,OAAO;AACzC,eAAK,oBAAoB,OAAO,WAAW,IAAI;AAAA,QAChD;AAAA,MACD;AAEA,iBAAW,aAAa,MAAM,OAAO;AACpC,mBAAW,cAAc,UAAU,OAAO;AACzC,eAAK,oBAAoB,IAAI,WAAW,MAAM,UAAU;AAAA,QACzD;AAAA,MACD;AAEA,UAAI,yBAAyB,KAAK,mBAAmB;AACpD,aAAK,8BAA8B;AAAA,MACpC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,uBAAuB,YAAoB,UAAwC;AAClF,QAAI,KAAK,UAAU,IAAI,UAAU,GAAG;AACnC,YAAM,IAAI,MAAM,mCAAmC,UAAU,yBAAyB;AAAA,IACvF;AAEA,UAAM,uBAAuB,KAAK;AAElC,SAAK,UAAU,IAAI,YAAY,QAAQ;AAEvC,QAAI,yBAAyB,KAAK,mBAAmB;AACpD,WAAK,8BAA8B;AAAA,IACpC;AAEA,WAAO,aAAa,MAAM;AACzB,YAAMA,wBAAuB,KAAK;AAElC,WAAK,UAAU,OAAO,UAAU;AAEhC,UAAIA,0BAAyB,KAAK,mBAAmB;AACpD,aAAK,8BAA8B;AAAA,MACpC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEQ,gCAAsC;AAC7C,SAAK,yBAAyB,IAAI,KAAK,iBAAiB;AAExD,SAAK,8BAA8B,KAAK;AAAA,EACzC;AAAA;AAAA,EAIiB,iCAAiC,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC3E,gCAAgC,KAAK,+BAA+B;AAAA,EAE5D,+BAA+B,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACzE,8BAA8B,KAAK,6BAA6B;AAAA,EAEjE,6BAA6B;AAAA,EACrC,IAAI,+BAA+B;AAAE,WAAO,KAAK,6BAA6B;AAAA,EAAG;AAAA,EAEhE,yBAAyB,uBAAuB,OAAO,KAAK,iBAAiB;AAAA,EAE9F,MAAM,0BAA0B,OAA0B,UAAkB,UAAyC;AACpH,UAAM,WAAW,MAAM,KAAK,YAAY;AAExC,UAAM,WAAW,+BAA+B,KAAK,qBAAqB,SAAkB,sBAAsB,CAAC;AACnH,UAAM,UAAU,SAAS,0BAA0B,OAAO,OAAO,aAAa,WAAW,EAAE,SAAS,IAAI,MAAS;AAEjH,UAAM,eAAe,KAAK,IAAI;AAC9B,QAAI,oBAAoB;AACxB,QAAI,eAAe;AACnB,QAAI,uBAAuB;AAE3B,UAAM,cAAc,IAAI,gBAAgB;AAExC,UAAM,6BAA6B,6BAAM;AACxC,WAAK,6BAA6B,KAAK,IAAI,GAAG,KAAK,6BAA6B,CAAC;AACjF,UAAI,CAAC,KAAK,8BAA8B;AACvC,aAAK,uBAAuB,MAAM;AAAA,MACnC;AACA,WAAK,6BAA6B,KAAK;AAoBvC,WAAK,iBAAiB,WAAwE,uBAAuB;AAAA,QACpH;AAAA,QACA,iBAAiB,KAAK,IAAI,IAAI;AAAA,QAC9B;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB;AAAA,MAClB,CAAC;AAED,kBAAY,QAAQ;AAAA,IACrB,GAnCmC;AAqCnC,gBAAY,IAAI,MAAM,wBAAwB,MAAM,2BAA2B,CAAC,CAAC;AACjF,QAAI,MAAM,yBAAyB;AAClC,iCAA2B;AAAA,IAC5B;AAEA,gBAAY,IAAI,QAAQ,YAAY,OAAK;AACxC,cAAQ,EAAE,QAAQ;AAAA,QACjB,KAAK,mBAAmB;AACvB,eAAK;AACL,eAAK,uBAAuB,IAAI,IAAI;AACpC,eAAK,+BAA+B,KAAK;AACzC;AAAA,QACD,KAAK,mBAAmB;AACvB,8BAAoB;AACpB;AAAA,QACD,KAAK,mBAAmB;AACvB,cAAI,OAAO,EAAE,SAAS,UAAU;AAC/B,oCAAwB,EAAE,KAAK;AAAA,UAChC;AACA;AAAA,QACD,KAAK,mBAAmB;AACvB,qCAA2B;AAC3B;AAAA,QACD,KAAK,mBAAmB;AACvB,eAAK,WAAW,MAAM,oDAAoD,EAAE,IAAI,EAAE;AAClF,yBAAe;AACf;AAAA,MACF;AAAA,IACD,CAAC,CAAC;AAEF,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,cAAwC;AAGrD,UAAM,KAAK,iBAAiB,gBAAgB,UAAU;AAEtD,UAAM,WAAW,MAAM,KAAK,KAAK,UAAU,OAAO,CAAC,EAAE,GAAG,CAAC;AACzD,QAAI,CAAC,UAAU;AACd,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACpD,WAAW,KAAK,UAAU,OAAO,GAAG;AACnC,WAAK,WAAW,KAAK,4DAA4D,SAAS,SAAS,WAAW,EAAE;AAAA,IACjH;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA,EAMiB,iCAAiC,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC3E,gCAAgC,KAAK,+BAA+B;AAAA,EAE5D,+BAA+B,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACzE,8BAA8B,KAAK,6BAA6B;AAAA,EAEjE,6BAA6B;AAAA,EACrC,IAAI,+BAA+B;AAAE,WAAO,KAAK,6BAA6B;AAAA,EAAG;AAAA,EAEhE,yBAAyB,uBAAuB,OAAO,KAAK,iBAAiB;AAAA,EAE9F,MAAM,0BAA0B,OAA0B,UAAkB,UAAyC;AACpH,UAAM,WAAW,MAAM,KAAK,YAAY;AAExC,UAAM,WAAW,+BAA+B,KAAK,qBAAqB,SAAkB,sBAAsB,CAAC;AACnH,UAAM,UAAU,SAAS,0BAA0B,OAAO,OAAO,aAAa,WAAW,EAAE,SAAS,IAAI,MAAS;AAEjH,UAAM,eAAe,KAAK,IAAI;AAC9B,QAAI,eAAe;AAEnB,UAAM,cAAc,IAAI,gBAAgB;AAExC,UAAM,6BAA6B,wBAAC,YAAqB;AACxD,WAAK,6BAA6B,KAAK,IAAI,GAAG,KAAK,6BAA6B,CAAC;AACjF,UAAI,CAAC,KAAK,8BAA8B;AACvC,aAAK,uBAAuB,MAAM;AAAA,MACnC;AACA,WAAK,6BAA6B,KAAK;AAgBvC,WAAK,iBAAiB,WAAwE,uBAAuB;AAAA,QACpH;AAAA,QACA,iBAAiB,KAAK,IAAI,IAAI;AAAA,QAC9B;AAAA,QACA,iBAAiB;AAAA,MAClB,CAAC;AAED,UAAI,SAAS;AACZ,oBAAY,QAAQ;AAAA,MACrB;AAAA,IACD,GA/BmC;AAiCnC,gBAAY,IAAI,MAAM,wBAAwB,MAAM,2BAA2B,IAAI,CAAC,CAAC;AACrF,QAAI,MAAM,yBAAyB;AAClC,iCAA2B,IAAI;AAAA,IAChC;AAEA,gBAAY,IAAI,QAAQ,YAAY,OAAK;AACxC,cAAQ,EAAE,QAAQ;AAAA,QACjB,KAAK,mBAAmB;AACvB,eAAK;AACL,eAAK,uBAAuB,IAAI,IAAI;AACpC,eAAK,+BAA+B,KAAK;AACzC;AAAA,QACD,KAAK,mBAAmB;AACvB,qCAA2B,KAAK;AAChC;AAAA,QACD,KAAK,mBAAmB;AACvB,eAAK,WAAW,MAAM,oDAAoD,EAAE,IAAI,EAAE;AAClF,yBAAe;AACf;AAAA,MACF;AAAA,IACD,CAAC,CAAC;AAEF,WAAO;AAAA,EACR;AAAA;AAAA;AAAA,EAMiB,gCAAgC,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC1E,+BAA+B,KAAK,8BAA8B;AAAA,EAE1D,8BAA8B,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACxE,6BAA6B,KAAK,4BAA4B;AAAA,EAE/D,mCAAmC;AAAA,EAC3C,IAAI,8BAA8B;AAAE,WAAO,KAAK,mCAAmC;AAAA,EAAG;AAAA,EAEtF,MAAM,iBAAiB,OAA6D;AACnF,UAAM,SAAS,IAAI,gBAA0C;AAE7D,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,IAAI,MAAM,wBAAwB,MAAM;AACnD,kBAAY,QAAQ;AACpB,aAAO,SAAS,yBAAyB,QAAQ;AAAA,IAClD,CAAC,CAAC;AAEF,UAAM,8BAA8B,YAAY,IAAI,IAAI,gBAAgB,CAAC;AACzE,QAAI,gCAA2D;AAC/D,UAAM,mBAAmB,6BAAM;AAC9B,kCAA4B,MAAM;AAElC,YAAM,MAAM,IAAI,wBAAwB,KAAK;AAC7C,kCAA4B,IAAI,aAAa,MAAM,IAAI,QAAQ,IAAI,CAAC,CAAC;AACrE,YAAM,iCAAiC,gCAAgC,KAAK,mBAAmB,IAAI,KAAK,EAAE,KAAK,CAAAC,YAAU;AACxH,YAAI,mCAAmC,+BAA+B;AACrE,iBAAO,SAASA,OAAM;AAAA,QACvB;AAAA,MACD,GAAG,WAAS;AACX,YAAI,mCAAmC,+BAA+B;AACrE,iBAAO,MAAM,KAAK;AAAA,QACnB;AAAA,MACD,CAAC;AAAA,IACF,GAdyB;AAgBzB,gBAAY,IAAI,KAAK,YAAY,iBAAiB,aAAW;AAC5D,UAAI,CAAC,WAAW,+BAA+B;AAC9C,oCAA4B,MAAM;AAClC,wCAAgC;AAAA,MACjC,WAAW,CAAC,+BAA+B;AAC1C,yBAAiB;AAAA,MAClB;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,KAAK,YAAY,UAAU;AAC9B,uBAAiB;AAAA,IAClB;AAEA,QAAI;AACJ,QAAI;AACH,eAAS,MAAM,OAAO;AAAA,IACvB,UAAE;AACD,kBAAY,QAAQ;AAAA,IACrB;AAUA,SAAK,iBAAiB,WAAsE,sBAAsB;AAAA,MACjH,mBAAmB,WAAW,yBAAyB;AAAA,IACxD,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,mBAAmB,OAA6D;AAC7F,UAAM,WAAW,MAAM,KAAK,YAAY;AAExC,UAAM,UAAU,SAAS,gCAAgC,KAAK;AAC9D,SAAK;AACL,SAAK,8BAA8B,KAAK;AAExC,UAAM,cAAc,IAAI,gBAAgB;AAExC,UAAM,6BAA6B,6BAAM;AACxC,WAAK,mCAAmC,KAAK,IAAI,GAAG,KAAK,mCAAmC,CAAC;AAC7F,WAAK,4BAA4B,KAAK;AAEtC,kBAAY,QAAQ;AAAA,IACrB,GALmC;AAOnC,gBAAY,IAAI,MAAM,wBAAwB,MAAM,2BAA2B,CAAC,CAAC;AACjF,QAAI,MAAM,yBAAyB;AAClC,iCAA2B;AAAA,IAC5B;AAEA,gBAAY,IAAI,QAAQ,YAAY,OAAK;AACxC,UAAI,EAAE,WAAW,yBAAyB,SAAS;AAClD,mCAA2B;AAAA,MAC5B;AAAA,IACD,CAAC,CAAC;AAEF,QAAI;AACH,cAAQ,MAAM,MAAM,UAAU,QAAQ,WAAW,GAAG;AAAA,IACrD,UAAE;AACD,iCAA2B;AAAA,IAC5B;AAAA,EACD;AAAA;AAGD;AAhYa,gBAAN;AAAA,EAeJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GApBU;",
  "names": ["oldHasSpeechProvider", "status"]
}
