{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/speech/browser/speechService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from \"../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { ExtensionsRegistry } from \"../../../services/extensions/common/extensionsRegistry.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport {\n\tHasSpeechProvider,\n\ttype ISpeechProvider,\n\ttype ISpeechService,\n\ttype ISpeechToTextSession,\n\ttype ITextToSpeechSession,\n\tKeywordRecognitionStatus,\n\tSPEECH_LANGUAGE_CONFIG,\n\tSpeechToTextInProgress,\n\tSpeechToTextStatus,\n\tTextToSpeechInProgress,\n\tTextToSpeechStatus,\n\tspeechLanguageConfigToLanguage,\n} from \"../common/speechService.js\";\n\nexport interface ISpeechProviderDescriptor {\n\treadonly name: string;\n\treadonly description?: string;\n}\n\nconst speechProvidersExtensionPoint = ExtensionsRegistry.registerExtensionPoint<\n\tISpeechProviderDescriptor[]\n>({\n\textensionPoint: \"speechProviders\",\n\tjsonSchema: {\n\t\tdescription: localize(\n\t\t\t\"vscode.extension.contributes.speechProvider\",\n\t\t\t\"Contributes a Speech Provider\",\n\t\t),\n\t\ttype: \"array\",\n\t\titems: {\n\t\t\tadditionalProperties: false,\n\t\t\ttype: \"object\",\n\t\t\tdefaultSnippets: [{ body: { name: \"\", description: \"\" } }],\n\t\t\trequired: [\"name\"],\n\t\t\tproperties: {\n\t\t\t\tname: {\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"speechProviderName\",\n\t\t\t\t\t\t\"Unique name for this Speech Provider.\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"speechProviderDescription\",\n\t\t\t\t\t\t\"A description of this Speech Provider, shown in the UI.\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n\nexport class SpeechService extends Disposable implements ISpeechService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeHasSpeechProvider = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeHasSpeechProvider =\n\t\tthis._onDidChangeHasSpeechProvider.event;\n\n\tget hasSpeechProvider() {\n\t\treturn this.providerDescriptors.size > 0 || this.providers.size > 0;\n\t}\n\n\tprivate readonly providers = new Map<string, ISpeechProvider>();\n\tprivate readonly providerDescriptors = new Map<\n\t\tstring,\n\t\tISpeechProviderDescriptor\n\t>();\n\n\tprivate readonly hasSpeechProviderContext = HasSpeechProvider.bindTo(\n\t\tthis.contextKeyService,\n\t);\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\n\t\tthis.handleAndRegisterSpeechExtensions();\n\t}\n\n\tprivate handleAndRegisterSpeechExtensions(): void {\n\t\tspeechProvidersExtensionPoint.setHandler((extensions, delta) => {\n\t\t\tconst oldHasSpeechProvider = this.hasSpeechProvider;\n\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tfor (const descriptor of extension.value) {\n\t\t\t\t\tthis.providerDescriptors.delete(descriptor.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tfor (const descriptor of extension.value) {\n\t\t\t\t\tthis.providerDescriptors.set(descriptor.name, descriptor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (oldHasSpeechProvider !== this.hasSpeechProvider) {\n\t\t\t\tthis.handleHasSpeechProviderChange();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterSpeechProvider(\n\t\tidentifier: string,\n\t\tprovider: ISpeechProvider,\n\t): IDisposable {\n\t\tif (this.providers.has(identifier)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Speech provider with identifier ${identifier} is already registered.`,\n\t\t\t);\n\t\t}\n\n\t\tconst oldHasSpeechProvider = this.hasSpeechProvider;\n\n\t\tthis.providers.set(identifier, provider);\n\n\t\tif (oldHasSpeechProvider !== this.hasSpeechProvider) {\n\t\t\tthis.handleHasSpeechProviderChange();\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tconst oldHasSpeechProvider = this.hasSpeechProvider;\n\n\t\t\tthis.providers.delete(identifier);\n\n\t\t\tif (oldHasSpeechProvider !== this.hasSpeechProvider) {\n\t\t\t\tthis.handleHasSpeechProviderChange();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handleHasSpeechProviderChange(): void {\n\t\tthis.hasSpeechProviderContext.set(this.hasSpeechProvider);\n\n\t\tthis._onDidChangeHasSpeechProvider.fire();\n\t}\n\n\t//#region Speech to Text\n\n\tprivate readonly _onDidStartSpeechToTextSession = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidStartSpeechToTextSession =\n\t\tthis._onDidStartSpeechToTextSession.event;\n\n\tprivate readonly _onDidEndSpeechToTextSession = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidEndSpeechToTextSession =\n\t\tthis._onDidEndSpeechToTextSession.event;\n\n\tprivate activeSpeechToTextSessions = 0;\n\tget hasActiveSpeechToTextSession() {\n\t\treturn this.activeSpeechToTextSessions > 0;\n\t}\n\n\tprivate readonly speechToTextInProgress = SpeechToTextInProgress.bindTo(\n\t\tthis.contextKeyService,\n\t);\n\n\tasync createSpeechToTextSession(\n\t\ttoken: CancellationToken,\n\t\tcontext = \"speech\",\n\t): Promise<ISpeechToTextSession> {\n\t\tconst provider = await this.getProvider();\n\n\t\tconst language = speechLanguageConfigToLanguage(\n\t\t\tthis.configurationService.getValue<unknown>(SPEECH_LANGUAGE_CONFIG),\n\t\t);\n\t\tconst session = provider.createSpeechToTextSession(\n\t\t\ttoken,\n\t\t\ttypeof language === \"string\" ? { language } : undefined,\n\t\t);\n\n\t\tconst sessionStart = Date.now();\n\t\tlet sessionRecognized = false;\n\t\tlet sessionError = false;\n\t\tlet sessionContentLength = 0;\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = () => {\n\t\t\tthis.activeSpeechToTextSessions = Math.max(\n\t\t\t\t0,\n\t\t\t\tthis.activeSpeechToTextSessions - 1,\n\t\t\t);\n\t\t\tif (!this.hasActiveSpeechToTextSession) {\n\t\t\t\tthis.speechToTextInProgress.reset();\n\t\t\t}\n\t\t\tthis._onDidEndSpeechToTextSession.fire();\n\n\t\t\ttype SpeechToTextSessionClassification = {\n\t\t\t\towner: \"bpasero\";\n\t\t\t\tcomment: \"An event that fires when a speech to text session is created\";\n\t\t\t\tcontext: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Context of the session.\";\n\t\t\t\t};\n\t\t\t\tsessionDuration: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Duration of the session.\";\n\t\t\t\t};\n\t\t\t\tsessionRecognized: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"If speech was recognized.\";\n\t\t\t\t};\n\t\t\t\tsessionError: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"If speech resulted in error.\";\n\t\t\t\t};\n\t\t\t\tsessionContentLength: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Length of the recognized text.\";\n\t\t\t\t};\n\t\t\t\tsessionLanguage: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Configured language for the session.\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype SpeechToTextSessionEvent = {\n\t\t\t\tcontext: string;\n\t\t\t\tsessionDuration: number;\n\t\t\t\tsessionRecognized: boolean;\n\t\t\t\tsessionError: boolean;\n\t\t\t\tsessionContentLength: number;\n\t\t\t\tsessionLanguage: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tSpeechToTextSessionEvent,\n\t\t\t\tSpeechToTextSessionClassification\n\t\t\t>(\"speechToTextSession\", {\n\t\t\t\tcontext,\n\t\t\t\tsessionDuration: Date.now() - sessionStart,\n\t\t\t\tsessionRecognized,\n\t\t\t\tsessionError,\n\t\t\t\tsessionContentLength,\n\t\t\t\tsessionLanguage: language,\n\t\t\t});\n\n\t\t\tdisposables.dispose();\n\t\t};\n\n\t\tdisposables.add(\n\t\t\ttoken.onCancellationRequested(() => onSessionStoppedOrCanceled()),\n\t\t);\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled();\n\t\t}\n\n\t\tdisposables.add(\n\t\t\tsession.onDidChange((e) => {\n\t\t\t\tswitch (e.status) {\n\t\t\t\t\tcase SpeechToTextStatus.Started:\n\t\t\t\t\t\tthis.activeSpeechToTextSessions++;\n\t\t\t\t\t\tthis.speechToTextInProgress.set(true);\n\t\t\t\t\t\tthis._onDidStartSpeechToTextSession.fire();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SpeechToTextStatus.Recognizing:\n\t\t\t\t\t\tsessionRecognized = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SpeechToTextStatus.Recognized:\n\t\t\t\t\t\tif (typeof e.text === \"string\") {\n\t\t\t\t\t\t\tsessionContentLength += e.text.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SpeechToTextStatus.Stopped:\n\t\t\t\t\t\tonSessionStoppedOrCanceled();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SpeechToTextStatus.Error:\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Speech provider error in speech to text session: ${e.text}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsessionError = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn session;\n\t}\n\n\tprivate async getProvider(): Promise<ISpeechProvider> {\n\t\t// Send out extension activation to ensure providers can register\n\t\tawait this.extensionService.activateByEvent(\"onSpeech\");\n\n\t\tconst provider = Array.from(this.providers.values()).at(0);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`No Speech provider is registered.`);\n\t\t} else if (this.providers.size > 1) {\n\t\t\tthis.logService.warn(\n\t\t\t\t`Multiple speech providers registered. Picking first one: ${provider.metadata.displayName}`,\n\t\t\t);\n\t\t}\n\n\t\treturn provider;\n\t}\n\n\t//#endregion\n\n\t//#region Text to Speech\n\n\tprivate readonly _onDidStartTextToSpeechSession = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidStartTextToSpeechSession =\n\t\tthis._onDidStartTextToSpeechSession.event;\n\n\tprivate readonly _onDidEndTextToSpeechSession = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidEndTextToSpeechSession =\n\t\tthis._onDidEndTextToSpeechSession.event;\n\n\tprivate activeTextToSpeechSessions = 0;\n\tget hasActiveTextToSpeechSession() {\n\t\treturn this.activeTextToSpeechSessions > 0;\n\t}\n\n\tprivate readonly textToSpeechInProgress = TextToSpeechInProgress.bindTo(\n\t\tthis.contextKeyService,\n\t);\n\n\tasync createTextToSpeechSession(\n\t\ttoken: CancellationToken,\n\t\tcontext = \"speech\",\n\t): Promise<ITextToSpeechSession> {\n\t\tconst provider = await this.getProvider();\n\n\t\tconst language = speechLanguageConfigToLanguage(\n\t\t\tthis.configurationService.getValue<unknown>(SPEECH_LANGUAGE_CONFIG),\n\t\t);\n\t\tconst session = provider.createTextToSpeechSession(\n\t\t\ttoken,\n\t\t\ttypeof language === \"string\" ? { language } : undefined,\n\t\t);\n\n\t\tconst sessionStart = Date.now();\n\t\tlet sessionError = false;\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = (dispose: boolean) => {\n\t\t\tthis.activeTextToSpeechSessions = Math.max(\n\t\t\t\t0,\n\t\t\t\tthis.activeTextToSpeechSessions - 1,\n\t\t\t);\n\t\t\tif (!this.hasActiveTextToSpeechSession) {\n\t\t\t\tthis.textToSpeechInProgress.reset();\n\t\t\t}\n\t\t\tthis._onDidEndTextToSpeechSession.fire();\n\n\t\t\ttype TextToSpeechSessionClassification = {\n\t\t\t\towner: \"bpasero\";\n\t\t\t\tcomment: \"An event that fires when a text to speech session is created\";\n\t\t\t\tcontext: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Context of the session.\";\n\t\t\t\t};\n\t\t\t\tsessionDuration: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Duration of the session.\";\n\t\t\t\t};\n\t\t\t\tsessionError: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"If speech resulted in error.\";\n\t\t\t\t};\n\t\t\t\tsessionLanguage: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Configured language for the session.\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype TextToSpeechSessionEvent = {\n\t\t\t\tcontext: string;\n\t\t\t\tsessionDuration: number;\n\t\t\t\tsessionError: boolean;\n\t\t\t\tsessionLanguage: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tTextToSpeechSessionEvent,\n\t\t\t\tTextToSpeechSessionClassification\n\t\t\t>(\"textToSpeechSession\", {\n\t\t\t\tcontext,\n\t\t\t\tsessionDuration: Date.now() - sessionStart,\n\t\t\t\tsessionError,\n\t\t\t\tsessionLanguage: language,\n\t\t\t});\n\n\t\t\tif (dispose) {\n\t\t\t\tdisposables.dispose();\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(\n\t\t\ttoken.onCancellationRequested(() =>\n\t\t\t\tonSessionStoppedOrCanceled(true),\n\t\t\t),\n\t\t);\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled(true);\n\t\t}\n\n\t\tdisposables.add(\n\t\t\tsession.onDidChange((e) => {\n\t\t\t\tswitch (e.status) {\n\t\t\t\t\tcase TextToSpeechStatus.Started:\n\t\t\t\t\t\tthis.activeTextToSpeechSessions++;\n\t\t\t\t\t\tthis.textToSpeechInProgress.set(true);\n\t\t\t\t\t\tthis._onDidStartTextToSpeechSession.fire();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TextToSpeechStatus.Stopped:\n\t\t\t\t\t\tonSessionStoppedOrCanceled(false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TextToSpeechStatus.Error:\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Speech provider error in text to speech session: ${e.text}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsessionError = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn session;\n\t}\n\n\t//#endregion\n\n\t//#region Keyword Recognition\n\n\tprivate readonly _onDidStartKeywordRecognition = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidStartKeywordRecognition =\n\t\tthis._onDidStartKeywordRecognition.event;\n\n\tprivate readonly _onDidEndKeywordRecognition = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidEndKeywordRecognition =\n\t\tthis._onDidEndKeywordRecognition.event;\n\n\tprivate activeKeywordRecognitionSessions = 0;\n\tget hasActiveKeywordRecognition() {\n\t\treturn this.activeKeywordRecognitionSessions > 0;\n\t}\n\n\tasync recognizeKeyword(\n\t\ttoken: CancellationToken,\n\t): Promise<KeywordRecognitionStatus> {\n\t\tconst result = new DeferredPromise<KeywordRecognitionStatus>();\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(\n\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tresult.complete(KeywordRecognitionStatus.Canceled);\n\t\t\t}),\n\t\t);\n\n\t\tconst recognizeKeywordDisposables = disposables.add(\n\t\t\tnew DisposableStore(),\n\t\t);\n\t\tlet activeRecognizeKeywordSession: Promise<void> | undefined;\n\t\tconst recognizeKeyword = () => {\n\t\t\trecognizeKeywordDisposables.clear();\n\n\t\t\tconst cts = new CancellationTokenSource(token);\n\t\t\trecognizeKeywordDisposables.add(\n\t\t\t\ttoDisposable(() => cts.dispose(true)),\n\t\t\t);\n\t\t\tconst currentRecognizeKeywordSession =\n\t\t\t\t(activeRecognizeKeywordSession = this.doRecognizeKeyword(\n\t\t\t\t\tcts.token,\n\t\t\t\t).then(\n\t\t\t\t\t(status) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcurrentRecognizeKeywordSession ===\n\t\t\t\t\t\t\tactiveRecognizeKeywordSession\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tresult.complete(status);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(error) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcurrentRecognizeKeywordSession ===\n\t\t\t\t\t\t\tactiveRecognizeKeywordSession\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tresult.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t));\n\t\t};\n\n\t\tdisposables.add(\n\t\t\tthis.hostService.onDidChangeFocus((focused) => {\n\t\t\t\tif (!focused && activeRecognizeKeywordSession) {\n\t\t\t\t\trecognizeKeywordDisposables.clear();\n\t\t\t\t\tactiveRecognizeKeywordSession = undefined;\n\t\t\t\t} else if (!activeRecognizeKeywordSession) {\n\t\t\t\t\trecognizeKeyword();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (this.hostService.hasFocus) {\n\t\t\trecognizeKeyword();\n\t\t}\n\n\t\tlet status: KeywordRecognitionStatus;\n\t\ttry {\n\t\t\tstatus = await result.p;\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\n\t\ttype KeywordRecognitionClassification = {\n\t\t\towner: \"bpasero\";\n\t\t\tcomment: \"An event that fires when a speech keyword detection is started\";\n\t\t\tkeywordRecognized: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"If the keyword was recognized.\";\n\t\t\t};\n\t\t};\n\t\ttype KeywordRecognitionEvent = {\n\t\t\tkeywordRecognized: boolean;\n\t\t};\n\t\tthis.telemetryService.publicLog2<\n\t\t\tKeywordRecognitionEvent,\n\t\t\tKeywordRecognitionClassification\n\t\t>(\"keywordRecognition\", {\n\t\t\tkeywordRecognized: status === KeywordRecognitionStatus.Recognized,\n\t\t});\n\n\t\treturn status;\n\t}\n\n\tprivate async doRecognizeKeyword(\n\t\ttoken: CancellationToken,\n\t): Promise<KeywordRecognitionStatus> {\n\t\tconst provider = await this.getProvider();\n\n\t\tconst session = provider.createKeywordRecognitionSession(token);\n\t\tthis.activeKeywordRecognitionSessions++;\n\t\tthis._onDidStartKeywordRecognition.fire();\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = () => {\n\t\t\tthis.activeKeywordRecognitionSessions = Math.max(\n\t\t\t\t0,\n\t\t\t\tthis.activeKeywordRecognitionSessions - 1,\n\t\t\t);\n\t\t\tthis._onDidEndKeywordRecognition.fire();\n\n\t\t\tdisposables.dispose();\n\t\t};\n\n\t\tdisposables.add(\n\t\t\ttoken.onCancellationRequested(() => onSessionStoppedOrCanceled()),\n\t\t);\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled();\n\t\t}\n\n\t\tdisposables.add(\n\t\t\tsession.onDidChange((e) => {\n\t\t\t\tif (e.status === KeywordRecognitionStatus.Stopped) {\n\t\t\t\t\tonSessionStoppedOrCanceled();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\ttry {\n\t\t\treturn (await Event.toPromise(session.onDidChange)).status;\n\t\t} finally {\n\t\t\tonSessionStoppedOrCanceled();\n\t\t}\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": ["oldHasSpeechProvider", "status"]
}
