{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/speech/common/speechService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { language } from '../../../../base/common/platform.js';\n\nexport const ISpeechService = createDecorator<ISpeechService>('speechService');\n\nexport const HasSpeechProvider = new RawContextKey<boolean>('hasSpeechProvider', false, { type: 'boolean', description: localize('hasSpeechProvider', \"A speech provider is registered to the speech service.\") });\nexport const SpeechToTextInProgress = new RawContextKey<boolean>('speechToTextInProgress', false, { type: 'boolean', description: localize('speechToTextInProgress', \"A speech-to-text session is in progress.\") });\nexport const TextToSpeechInProgress = new RawContextKey<boolean>('textToSpeechInProgress', false, { type: 'boolean', description: localize('textToSpeechInProgress', \"A text-to-speech session is in progress.\") });\n\nexport interface ISpeechProviderMetadata {\n\treadonly extension: ExtensionIdentifier;\n\treadonly displayName: string;\n}\n\nexport enum SpeechToTextStatus {\n\tStarted = 1,\n\tRecognizing = 2,\n\tRecognized = 3,\n\tStopped = 4,\n\tError = 5\n}\n\nexport interface ISpeechToTextEvent {\n\treadonly status: SpeechToTextStatus;\n\treadonly text?: string;\n}\n\nexport interface ISpeechToTextSession {\n\treadonly onDidChange: Event<ISpeechToTextEvent>;\n}\n\nexport enum TextToSpeechStatus {\n\tStarted = 1,\n\tStopped = 2,\n\tError = 3\n}\n\nexport interface ITextToSpeechEvent {\n\treadonly status: TextToSpeechStatus;\n\treadonly text?: string;\n}\n\nexport interface ITextToSpeechSession {\n\treadonly onDidChange: Event<ITextToSpeechEvent>;\n\n\tsynthesize(text: string): Promise<void>;\n}\n\nexport enum KeywordRecognitionStatus {\n\tRecognized = 1,\n\tStopped = 2,\n\tCanceled = 3\n}\n\nexport interface IKeywordRecognitionEvent {\n\treadonly status: KeywordRecognitionStatus;\n\treadonly text?: string;\n}\n\nexport interface IKeywordRecognitionSession {\n\treadonly onDidChange: Event<IKeywordRecognitionEvent>;\n}\n\nexport interface ISpeechToTextSessionOptions {\n\treadonly language?: string;\n}\n\nexport interface ITextToSpeechSessionOptions {\n\treadonly language?: string;\n}\n\nexport interface ISpeechProvider {\n\treadonly metadata: ISpeechProviderMetadata;\n\n\tcreateSpeechToTextSession(token: CancellationToken, options?: ISpeechToTextSessionOptions): ISpeechToTextSession;\n\tcreateTextToSpeechSession(token: CancellationToken, options?: ITextToSpeechSessionOptions): ITextToSpeechSession;\n\tcreateKeywordRecognitionSession(token: CancellationToken): IKeywordRecognitionSession;\n}\n\nexport interface ISpeechService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeHasSpeechProvider: Event<void>;\n\n\treadonly hasSpeechProvider: boolean;\n\n\tregisterSpeechProvider(identifier: string, provider: ISpeechProvider): IDisposable;\n\n\treadonly onDidStartSpeechToTextSession: Event<void>;\n\treadonly onDidEndSpeechToTextSession: Event<void>;\n\n\treadonly hasActiveSpeechToTextSession: boolean;\n\n\t/**\n\t * Starts to transcribe speech from the default microphone. The returned\n\t * session object provides an event to subscribe for transcribed text.\n\t */\n\tcreateSpeechToTextSession(token: CancellationToken, context?: string): Promise<ISpeechToTextSession>;\n\n\treadonly onDidStartTextToSpeechSession: Event<void>;\n\treadonly onDidEndTextToSpeechSession: Event<void>;\n\n\treadonly hasActiveTextToSpeechSession: boolean;\n\n\t/**\n\t * Creates a synthesizer to synthesize speech from text. The returned\n\t * session object provides a method to synthesize text and listen for\n\t * events.\n\t */\n\tcreateTextToSpeechSession(token: CancellationToken, context?: string): Promise<ITextToSpeechSession>;\n\n\treadonly onDidStartKeywordRecognition: Event<void>;\n\treadonly onDidEndKeywordRecognition: Event<void>;\n\n\treadonly hasActiveKeywordRecognition: boolean;\n\n\t/**\n\t * Starts to recognize a keyword from the default microphone. The returned\n\t * status indicates if the keyword was recognized or if the session was\n\t * stopped.\n\t */\n\trecognizeKeyword(token: CancellationToken): Promise<KeywordRecognitionStatus>;\n}\n\nexport const enum AccessibilityVoiceSettingId {\n\tSpeechTimeout = 'accessibility.voice.speechTimeout',\n\tAutoSynthesize = 'accessibility.voice.autoSynthesize',\n\tSpeechLanguage = 'accessibility.voice.speechLanguage',\n}\n\nexport const SPEECH_LANGUAGE_CONFIG = AccessibilityVoiceSettingId.SpeechLanguage;\n\nexport const SPEECH_LANGUAGES = {\n\t['da-DK']: {\n\t\tname: localize('speechLanguage.da-DK', \"Danish (Denmark)\")\n\t},\n\t['de-DE']: {\n\t\tname: localize('speechLanguage.de-DE', \"German (Germany)\")\n\t},\n\t['en-AU']: {\n\t\tname: localize('speechLanguage.en-AU', \"English (Australia)\")\n\t},\n\t['en-CA']: {\n\t\tname: localize('speechLanguage.en-CA', \"English (Canada)\")\n\t},\n\t['en-GB']: {\n\t\tname: localize('speechLanguage.en-GB', \"English (United Kingdom)\")\n\t},\n\t['en-IE']: {\n\t\tname: localize('speechLanguage.en-IE', \"English (Ireland)\")\n\t},\n\t['en-IN']: {\n\t\tname: localize('speechLanguage.en-IN', \"English (India)\")\n\t},\n\t['en-NZ']: {\n\t\tname: localize('speechLanguage.en-NZ', \"English (New Zealand)\")\n\t},\n\t['en-US']: {\n\t\tname: localize('speechLanguage.en-US', \"English (United States)\")\n\t},\n\t['es-ES']: {\n\t\tname: localize('speechLanguage.es-ES', \"Spanish (Spain)\")\n\t},\n\t['es-MX']: {\n\t\tname: localize('speechLanguage.es-MX', \"Spanish (Mexico)\")\n\t},\n\t['fr-CA']: {\n\t\tname: localize('speechLanguage.fr-CA', \"French (Canada)\")\n\t},\n\t['fr-FR']: {\n\t\tname: localize('speechLanguage.fr-FR', \"French (France)\")\n\t},\n\t['hi-IN']: {\n\t\tname: localize('speechLanguage.hi-IN', \"Hindi (India)\")\n\t},\n\t['it-IT']: {\n\t\tname: localize('speechLanguage.it-IT', \"Italian (Italy)\")\n\t},\n\t['ja-JP']: {\n\t\tname: localize('speechLanguage.ja-JP', \"Japanese (Japan)\")\n\t},\n\t['ko-KR']: {\n\t\tname: localize('speechLanguage.ko-KR', \"Korean (South Korea)\")\n\t},\n\t['nl-NL']: {\n\t\tname: localize('speechLanguage.nl-NL', \"Dutch (Netherlands)\")\n\t},\n\t['pt-PT']: {\n\t\tname: localize('speechLanguage.pt-PT', \"Portuguese (Portugal)\")\n\t},\n\t['pt-BR']: {\n\t\tname: localize('speechLanguage.pt-BR', \"Portuguese (Brazil)\")\n\t},\n\t['ru-RU']: {\n\t\tname: localize('speechLanguage.ru-RU', \"Russian (Russia)\")\n\t},\n\t['sv-SE']: {\n\t\tname: localize('speechLanguage.sv-SE', \"Swedish (Sweden)\")\n\t},\n\t['tr-TR']: {\n\t\t// allow-any-unicode-next-line\n\t\tname: localize('speechLanguage.tr-TR', \"Turkish (T\u00FCrkiye)\")\n\t},\n\t['zh-CN']: {\n\t\tname: localize('speechLanguage.zh-CN', \"Chinese (Simplified, China)\")\n\t},\n\t['zh-HK']: {\n\t\tname: localize('speechLanguage.zh-HK', \"Chinese (Traditional, Hong Kong)\")\n\t},\n\t['zh-TW']: {\n\t\tname: localize('speechLanguage.zh-TW', \"Chinese (Traditional, Taiwan)\")\n\t}\n};\n\nexport function speechLanguageConfigToLanguage(config: unknown, lang = language): string {\n\tif (typeof config === 'string') {\n\t\tif (config === 'auto') {\n\t\t\tif (lang !== 'en') {\n\t\t\t\tconst langParts = lang.split('-');\n\n\t\t\t\treturn speechLanguageConfigToLanguage(`${langParts[0]}-${(langParts[1] ?? langParts[0]).toUpperCase()}`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (SPEECH_LANGUAGES[config as keyof typeof SPEECH_LANGUAGES]) {\n\t\t\t\treturn config;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 'en-US';\n}\n"],
  "mappings": "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",
  "names": ["SpeechToTextStatus", "TextToSpeechStatus", "KeywordRecognitionStatus", "AccessibilityVoiceSettingId"]
}
