{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/electron-sandbox/actions/voiceChatActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/voiceChatActions.css\";\nimport { renderStringAsPlaintext } from \"../../../../../base/browser/markdownRenderer.js\";\nimport {\n\tRunOnceScheduler,\n\tdisposableTimeout,\n\traceCancellation,\n} from \"../../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../../base/common/codicons.js\";\nimport type { Color } from \"../../../../../base/common/color.js\";\nimport { Event } from \"../../../../../base/common/event.js\";\nimport { KeyCode, KeyMod } from \"../../../../../base/common/keyCodes.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { isNumber } from \"../../../../../base/common/types.js\";\nimport { getCodeEditor } from \"../../../../../editor/browser/editorBrowser.js\";\nimport { EditorContextKeys } from \"../../../../../editor/common/editorContextKeys.js\";\nimport { localize, localize2 } from \"../../../../../nls.js\";\nimport { IAccessibilityService } from \"../../../../../platform/accessibility/common/accessibility.js\";\nimport {\n\tAction2,\n\ttype IAction2Options,\n\tMenuId,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport {\n\tCommandsRegistry,\n\tICommandService,\n} from \"../../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../../platform/configuration/common/configurationRegistry.js\";\nimport {\n\tContextKeyExpr,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../../platform/keybinding/common/keybinding.js\";\nimport { KeybindingWeight } from \"../../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { ProgressLocation } from \"../../../../../platform/progress/common/progress.js\";\nimport { Registry } from \"../../../../../platform/registry/common/platform.js\";\nimport {\n\tcontrastBorder,\n\tfocusBorder,\n} from \"../../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\tspinningLoading,\n\tsyncing,\n} from \"../../../../../platform/theme/common/iconRegistry.js\";\nimport { ColorScheme } from \"../../../../../platform/theme/common/theme.js\";\nimport { registerThemingParticipant } from \"../../../../../platform/theme/common/themeService.js\";\nimport { ActiveEditorContext } from \"../../../../common/contextkeys.js\";\nimport type { IWorkbenchContribution } from \"../../../../common/contributions.js\";\nimport { ACTIVITY_BAR_BADGE_BACKGROUND } from \"../../../../common/theme.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport { IHostService } from \"../../../../services/host/browser/host.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tParts,\n} from \"../../../../services/layout/browser/layoutService.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../../services/statusbar/browser/statusbar.js\";\nimport { IViewsService } from \"../../../../services/views/common/viewsService.js\";\nimport {\n\tAccessibilityVoiceSettingId,\n\tSpeechTimeoutDefault,\n\taccessibilityConfigurationNodeBase,\n} from \"../../../accessibility/browser/accessibilityConfiguration.js\";\nimport { IExtensionsWorkbenchService } from \"../../../extensions/common/extensions.js\";\nimport { InlineChatController } from \"../../../inlineChat/browser/inlineChatController.js\";\nimport {\n\tCTX_INLINE_CHAT_FOCUSED,\n\tMENU_INLINE_CHAT_WIDGET_SECONDARY,\n} from \"../../../inlineChat/common/inlineChat.js\";\nimport { NOTEBOOK_EDITOR_FOCUSED } from \"../../../notebook/common/notebookContextKeys.js\";\nimport {\n\tTextToSpeechInProgress as GlobalTextToSpeechInProgress,\n\tHasSpeechProvider,\n\tISpeechService,\n\tKeywordRecognitionStatus,\n\tSpeechToTextInProgress,\n\tSpeechToTextStatus,\n\tTextToSpeechStatus,\n} from \"../../../speech/common/speechService.js\";\nimport { ITerminalService } from \"../../../terminal/browser/terminal.js\";\nimport {\n\tTerminalChatContextKeys,\n\tTerminalChatController,\n} from \"../../../terminal/terminalContribExports.js\";\nimport { CHAT_CATEGORY } from \"../../browser/actions/chatActions.js\";\nimport type { IChatExecuteActionContext } from \"../../browser/actions/chatExecuteActions.js\";\nimport {\n\ttype IChatWidget,\n\tIChatWidgetService,\n\tIQuickChatService,\n\tshowChatView,\n} from \"../../browser/chat.js\";\nimport {\n\tChatAgentLocation,\n\tIChatAgentService,\n} from \"../../common/chatAgents.js\";\nimport {\n\tCONTEXT_CHAT_ENABLED,\n\tCONTEXT_CHAT_REQUEST_IN_PROGRESS,\n\tCONTEXT_IN_CHAT_INPUT,\n\tCONTEXT_RESPONSE,\n\tCONTEXT_RESPONSE_FILTERED,\n} from \"../../common/chatContextKeys.js\";\nimport type { IChatResponseModel } from \"../../common/chatModel.js\";\nimport { KEYWORD_ACTIVIATION_SETTING_ID } from \"../../common/chatService.js\";\nimport { isResponseVM } from \"../../common/chatViewModel.js\";\nimport {\n\tVoiceChatInProgress as GlobalVoiceChatInProgress,\n\tIVoiceChatService,\n} from \"../../common/voiceChatService.js\";\n\n//#region Speech to Text\n\ntype VoiceChatSessionContext =\n\t| \"view\"\n\t| \"inline\"\n\t| \"terminal\"\n\t| \"quick\"\n\t| \"editor\";\nconst VoiceChatSessionContexts: VoiceChatSessionContext[] = [\n\t\"view\",\n\t\"inline\",\n\t\"terminal\",\n\t\"quick\",\n\t\"editor\",\n];\n\nconst TerminalChatExecute = MenuId.for(\"terminalChatInput\"); // unfortunately, terminal decided to go with their own menu (https://github.com/microsoft/vscode/issues/208789)\n\n// Global Context Keys (set on global context key service)\nconst CanVoiceChat = ContextKeyExpr.and(\n\tCONTEXT_CHAT_ENABLED,\n\tHasSpeechProvider,\n);\nconst FocusInChatInput = ContextKeyExpr.or(\n\tCTX_INLINE_CHAT_FOCUSED,\n\tCONTEXT_IN_CHAT_INPUT,\n);\nconst AnyChatRequestInProgress = ContextKeyExpr.or(\n\tCONTEXT_CHAT_REQUEST_IN_PROGRESS,\n\tTerminalChatContextKeys.requestActive,\n);\n\n// Scoped Context Keys (set on per-chat-context scoped context key service)\nconst ScopedVoiceChatGettingReady = new RawContextKey<boolean>(\n\t\"scopedVoiceChatGettingReady\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"scopedVoiceChatGettingReady\",\n\t\t\t\"True when getting ready for receiving voice input from the microphone for voice chat. This key is only defined scoped, per chat context.\",\n\t\t),\n\t},\n);\nconst ScopedVoiceChatInProgress = new RawContextKey<\n\tVoiceChatSessionContext | undefined\n>(\"scopedVoiceChatInProgress\", undefined, {\n\ttype: \"string\",\n\tdescription: localize(\n\t\t\"scopedVoiceChatInProgress\",\n\t\t\"Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.\",\n\t),\n});\nconst AnyScopedVoiceChatInProgress = ContextKeyExpr.or(\n\t...VoiceChatSessionContexts.map((context) =>\n\t\tScopedVoiceChatInProgress.isEqualTo(context),\n\t),\n);\n\nenum VoiceChatSessionState {\n\tStopped = 1,\n\tGettingReady = 2,\n\tStarted = 3,\n}\n\ninterface IVoiceChatSessionController {\n\treadonly onDidAcceptInput: Event<unknown>;\n\treadonly onDidHideInput: Event<unknown>;\n\n\treadonly context: VoiceChatSessionContext;\n\treadonly scopedContextKeyService: IContextKeyService;\n\n\tupdateState(state: VoiceChatSessionState): void;\n\n\tfocusInput(): void;\n\tacceptInput(): Promise<IChatResponseModel | undefined>;\n\tupdateInput(text: string): void;\n\tgetInput(): string;\n\n\tsetInputPlaceholder(text: string): void;\n\tclearInputPlaceholder(): void;\n}\n\nclass VoiceChatSessionControllerFactory {\n\tstatic async create(\n\t\taccessor: ServicesAccessor,\n\t\tcontext: \"view\" | \"inline\" | \"quick\" | \"focused\",\n\t): Promise<IVoiceChatSessionController | undefined> {\n\t\tconst chatWidgetService = accessor.get(IChatWidgetService);\n\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst terminalService = accessor.get(ITerminalService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\n\t\tswitch (context) {\n\t\t\tcase \"focused\": {\n\t\t\t\tconst controller =\n\t\t\t\t\tVoiceChatSessionControllerFactory.doCreateForFocusedChat(\n\t\t\t\t\t\tterminalService,\n\t\t\t\t\t\tchatWidgetService,\n\t\t\t\t\t\tlayoutService,\n\t\t\t\t\t);\n\t\t\t\treturn (\n\t\t\t\t\tcontroller ??\n\t\t\t\t\tVoiceChatSessionControllerFactory.create(accessor, \"view\")\n\t\t\t\t); // fallback to 'view'\n\t\t\t}\n\t\t\tcase \"view\": {\n\t\t\t\tconst chatWidget = await showChatView(viewsService);\n\t\t\t\tif (chatWidget) {\n\t\t\t\t\treturn VoiceChatSessionControllerFactory.doCreateForChatWidget(\n\t\t\t\t\t\t\"view\",\n\t\t\t\t\t\tchatWidget,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"inline\": {\n\t\t\t\tconst activeCodeEditor = getCodeEditor(\n\t\t\t\t\teditorService.activeTextEditorControl,\n\t\t\t\t);\n\t\t\t\tif (activeCodeEditor) {\n\t\t\t\t\tconst inlineChat =\n\t\t\t\t\t\tInlineChatController.get(activeCodeEditor);\n\t\t\t\t\tif (inlineChat) {\n\t\t\t\t\t\tif (!inlineChat.joinCurrentRun()) {\n\t\t\t\t\t\t\tinlineChat.run();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn VoiceChatSessionControllerFactory.doCreateForChatWidget(\n\t\t\t\t\t\t\t\"inline\",\n\t\t\t\t\t\t\tinlineChat.chatWidget,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"quick\": {\n\t\t\t\tquickChatService.open(); // this will populate focused chat widget in the chat widget service\n\t\t\t\treturn VoiceChatSessionControllerFactory.create(\n\t\t\t\t\taccessor,\n\t\t\t\t\t\"focused\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate static doCreateForFocusedChat(\n\t\tterminalService: ITerminalService,\n\t\tchatWidgetService: IChatWidgetService,\n\t\tlayoutService: IWorkbenchLayoutService,\n\t): IVoiceChatSessionController | undefined {\n\t\t// 1.) probe terminal chat which is not part of chat widget service\n\t\tconst activeInstance = terminalService.activeInstance;\n\t\tif (activeInstance) {\n\t\t\tconst terminalChat =\n\t\t\t\tTerminalChatController.activeChatWidget ||\n\t\t\t\tTerminalChatController.get(activeInstance);\n\t\t\tif (terminalChat?.hasFocus()) {\n\t\t\t\treturn VoiceChatSessionControllerFactory.doCreateForTerminalChat(\n\t\t\t\t\tterminalChat,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// 2.) otherwise go via chat widget service\n\t\tconst chatWidget = chatWidgetService.lastFocusedWidget;\n\t\tif (chatWidget?.hasInputFocus()) {\n\t\t\t// Figure out the context of the chat widget by asking\n\t\t\t// layout service for the part that has focus. Unfortunately\n\t\t\t// there is no better way because the widget does not know\n\t\t\t// its location.\n\n\t\t\tlet context: VoiceChatSessionContext;\n\t\t\tif (layoutService.hasFocus(Parts.EDITOR_PART)) {\n\t\t\t\tcontext =\n\t\t\t\t\tchatWidget.location === ChatAgentLocation.Panel\n\t\t\t\t\t\t? \"editor\"\n\t\t\t\t\t\t: \"inline\";\n\t\t\t} else if (\n\t\t\t\t[\n\t\t\t\t\tParts.SIDEBAR_PART,\n\t\t\t\t\tParts.PANEL_PART,\n\t\t\t\t\tParts.AUXILIARYBAR_PART,\n\t\t\t\t\tParts.TITLEBAR_PART,\n\t\t\t\t\tParts.STATUSBAR_PART,\n\t\t\t\t\tParts.BANNER_PART,\n\t\t\t\t\tParts.ACTIVITYBAR_PART,\n\t\t\t\t].some((part) => layoutService.hasFocus(part))\n\t\t\t) {\n\t\t\t\tcontext = \"view\";\n\t\t\t} else {\n\t\t\t\tcontext = \"quick\";\n\t\t\t}\n\n\t\t\treturn VoiceChatSessionControllerFactory.doCreateForChatWidget(\n\t\t\t\tcontext,\n\t\t\t\tchatWidget,\n\t\t\t);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate static createChatContextKeyController(\n\t\tcontextKeyService: IContextKeyService,\n\t\tcontext: VoiceChatSessionContext,\n\t): (state: VoiceChatSessionState) => void {\n\t\tconst contextVoiceChatGettingReady =\n\t\t\tScopedVoiceChatGettingReady.bindTo(contextKeyService);\n\t\tconst contextVoiceChatInProgress =\n\t\t\tScopedVoiceChatInProgress.bindTo(contextKeyService);\n\n\t\treturn (state: VoiceChatSessionState) => {\n\t\t\tswitch (state) {\n\t\t\t\tcase VoiceChatSessionState.GettingReady:\n\t\t\t\t\tcontextVoiceChatGettingReady.set(true);\n\t\t\t\t\tcontextVoiceChatInProgress.reset();\n\t\t\t\t\tbreak;\n\t\t\t\tcase VoiceChatSessionState.Started:\n\t\t\t\t\tcontextVoiceChatGettingReady.reset();\n\t\t\t\t\tcontextVoiceChatInProgress.set(context);\n\t\t\t\t\tbreak;\n\t\t\t\tcase VoiceChatSessionState.Stopped:\n\t\t\t\t\tcontextVoiceChatGettingReady.reset();\n\t\t\t\t\tcontextVoiceChatInProgress.reset();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate static doCreateForChatWidget(\n\t\tcontext: VoiceChatSessionContext,\n\t\tchatWidget: IChatWidget,\n\t): IVoiceChatSessionController {\n\t\treturn {\n\t\t\tcontext,\n\t\t\tscopedContextKeyService: chatWidget.scopedContextKeyService,\n\t\t\tonDidAcceptInput: chatWidget.onDidAcceptInput,\n\t\t\tonDidHideInput: chatWidget.onDidHide,\n\t\t\tfocusInput: () => chatWidget.focusInput(),\n\t\t\tacceptInput: () => chatWidget.acceptInput(undefined, true),\n\t\t\tupdateInput: (text) => chatWidget.setInput(text),\n\t\t\tgetInput: () => chatWidget.getInput(),\n\t\t\tsetInputPlaceholder: (text) => chatWidget.setInputPlaceholder(text),\n\t\t\tclearInputPlaceholder: () => chatWidget.resetInputPlaceholder(),\n\t\t\tupdateState:\n\t\t\t\tVoiceChatSessionControllerFactory.createChatContextKeyController(\n\t\t\t\t\tchatWidget.scopedContextKeyService,\n\t\t\t\t\tcontext,\n\t\t\t\t),\n\t\t};\n\t}\n\n\tprivate static doCreateForTerminalChat(\n\t\tterminalChat: TerminalChatController,\n\t): IVoiceChatSessionController {\n\t\tconst context = \"terminal\";\n\t\treturn {\n\t\t\tcontext,\n\t\t\tscopedContextKeyService: terminalChat.scopedContextKeyService,\n\t\t\tonDidAcceptInput: terminalChat.onDidAcceptInput,\n\t\t\tonDidHideInput: terminalChat.onDidHide,\n\t\t\tfocusInput: () => terminalChat.focus(),\n\t\t\tacceptInput: () => terminalChat.acceptInput(true),\n\t\t\tupdateInput: (text) => terminalChat.updateInput(text, false),\n\t\t\tgetInput: () => terminalChat.getInput(),\n\t\t\tsetInputPlaceholder: (text) => terminalChat.setPlaceholder(text),\n\t\t\tclearInputPlaceholder: () => terminalChat.resetPlaceholder(),\n\t\t\tupdateState:\n\t\t\t\tVoiceChatSessionControllerFactory.createChatContextKeyController(\n\t\t\t\t\tterminalChat.scopedContextKeyService,\n\t\t\t\t\tcontext,\n\t\t\t\t),\n\t\t};\n\t}\n}\n\ninterface IVoiceChatSession {\n\tsetTimeoutDisabled(disabled: boolean): void;\n\n\taccept(): void;\n\tstop(): void;\n}\n\ninterface IActiveVoiceChatSession extends IVoiceChatSession {\n\treadonly id: number;\n\treadonly controller: IVoiceChatSessionController;\n\treadonly disposables: DisposableStore;\n}\n\nclass VoiceChatSessions {\n\tprivate static instance: VoiceChatSessions | undefined = undefined;\n\tstatic getInstance(\n\t\tinstantiationService: IInstantiationService,\n\t): VoiceChatSessions {\n\t\tif (!VoiceChatSessions.instance) {\n\t\t\tVoiceChatSessions.instance =\n\t\t\t\tinstantiationService.createInstance(VoiceChatSessions);\n\t\t}\n\n\t\treturn VoiceChatSessions.instance;\n\t}\n\n\tprivate currentVoiceChatSession: IActiveVoiceChatSession | undefined =\n\t\tundefined;\n\tprivate voiceChatSessionIds = 0;\n\n\tconstructor(\n\t\t@IVoiceChatService private readonly voiceChatService: IVoiceChatService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService\n\t) { }\n\n\tasync start(\n\t\tcontroller: IVoiceChatSessionController,\n\t\tcontext?: IChatExecuteActionContext,\n\t): Promise<IVoiceChatSession> {\n\t\t// Stop running text-to-speech or speech-to-text sessions in chats\n\t\tthis.stop();\n\t\tChatSynthesizerSessions.getInstance(this.instantiationService).stop();\n\n\t\tlet disableTimeout = false;\n\n\t\tconst sessionId = ++this.voiceChatSessionIds;\n\t\tconst session: IActiveVoiceChatSession = (this.currentVoiceChatSession =\n\t\t\t{\n\t\t\t\tid: sessionId,\n\t\t\t\tcontroller,\n\t\t\t\tdisposables: new DisposableStore(),\n\t\t\t\tsetTimeoutDisabled: (disabled: boolean) => {\n\t\t\t\t\tdisableTimeout = disabled;\n\t\t\t\t},\n\t\t\t\taccept: () => this.accept(sessionId),\n\t\t\t\tstop: () => this.stop(sessionId, controller.context),\n\t\t\t});\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tsession.disposables.add(toDisposable(() => cts.dispose(true)));\n\n\t\tsession.disposables.add(\n\t\t\tcontroller.onDidAcceptInput(() =>\n\t\t\t\tthis.stop(sessionId, controller.context),\n\t\t\t),\n\t\t);\n\t\tsession.disposables.add(\n\t\t\tcontroller.onDidHideInput(() =>\n\t\t\t\tthis.stop(sessionId, controller.context),\n\t\t\t),\n\t\t);\n\n\t\tcontroller.focusInput();\n\n\t\tcontroller.updateState(VoiceChatSessionState.GettingReady);\n\n\t\tconst voiceChatSession =\n\t\t\tawait this.voiceChatService.createVoiceChatSession(cts.token, {\n\t\t\t\tusesAgents: controller.context !== \"inline\",\n\t\t\t\tmodel: context?.widget?.viewModel?.model,\n\t\t\t});\n\n\t\tlet inputValue = controller.getInput();\n\n\t\tlet voiceChatTimeout = this.configurationService.getValue<number>(\n\t\t\tAccessibilityVoiceSettingId.SpeechTimeout,\n\t\t);\n\t\tif (!isNumber(voiceChatTimeout) || voiceChatTimeout < 0) {\n\t\t\tvoiceChatTimeout = SpeechTimeoutDefault;\n\t\t}\n\n\t\tconst acceptTranscriptionScheduler = session.disposables.add(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() => this.accept(sessionId),\n\t\t\t\tvoiceChatTimeout,\n\t\t\t),\n\t\t);\n\t\tsession.disposables.add(\n\t\t\tvoiceChatSession.onDidChange(\n\t\t\t\t({ status, text, waitingForInput }) => {\n\t\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (status) {\n\t\t\t\t\t\tcase SpeechToTextStatus.Started:\n\t\t\t\t\t\t\tthis.onDidSpeechToTextSessionStart(\n\t\t\t\t\t\t\t\tcontroller,\n\t\t\t\t\t\t\t\tsession.disposables,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SpeechToTextStatus.Recognizing:\n\t\t\t\t\t\t\tif (text) {\n\t\t\t\t\t\t\t\tsession.controller.updateInput(\n\t\t\t\t\t\t\t\t\tinputValue\n\t\t\t\t\t\t\t\t\t\t? [inputValue, text].join(\" \")\n\t\t\t\t\t\t\t\t\t\t: text,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tvoiceChatTimeout > 0 &&\n\t\t\t\t\t\t\t\t\tcontext?.voice?.disableTimeout !== true &&\n\t\t\t\t\t\t\t\t\t!disableTimeout\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tacceptTranscriptionScheduler.cancel();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SpeechToTextStatus.Recognized:\n\t\t\t\t\t\t\tif (text) {\n\t\t\t\t\t\t\t\tinputValue = inputValue\n\t\t\t\t\t\t\t\t\t? [inputValue, text].join(\" \")\n\t\t\t\t\t\t\t\t\t: text;\n\t\t\t\t\t\t\t\tsession.controller.updateInput(inputValue);\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tvoiceChatTimeout > 0 &&\n\t\t\t\t\t\t\t\t\tcontext?.voice?.disableTimeout !== true &&\n\t\t\t\t\t\t\t\t\t!waitingForInput &&\n\t\t\t\t\t\t\t\t\t!disableTimeout\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tacceptTranscriptionScheduler.schedule();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SpeechToTextStatus.Stopped:\n\t\t\t\t\t\t\tthis.stop(session.id, controller.context);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\treturn session;\n\t}\n\n\tprivate onDidSpeechToTextSessionStart(\n\t\tcontroller: IVoiceChatSessionController,\n\t\tdisposables: DisposableStore,\n\t): void {\n\t\tcontroller.updateState(VoiceChatSessionState.Started);\n\n\t\tlet dotCount = 0;\n\n\t\tconst updatePlaceholder = () => {\n\t\t\tdotCount = (dotCount + 1) % 4;\n\t\t\tcontroller.setInputPlaceholder(\n\t\t\t\t`${localize(\"listening\", \"I'm listening\")}${\".\".repeat(dotCount)}`,\n\t\t\t);\n\t\t\tplaceholderScheduler.schedule();\n\t\t};\n\n\t\tconst placeholderScheduler = disposables.add(\n\t\t\tnew RunOnceScheduler(updatePlaceholder, 500),\n\t\t);\n\t\tupdatePlaceholder();\n\t}\n\n\tstop(\n\t\tvoiceChatSessionId = this.voiceChatSessionIds,\n\t\tcontext?: VoiceChatSessionContext,\n\t): void {\n\t\tif (\n\t\t\t!this.currentVoiceChatSession ||\n\t\t\tthis.voiceChatSessionIds !== voiceChatSessionId ||\n\t\t\t(context &&\n\t\t\t\tthis.currentVoiceChatSession.controller.context !== context)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentVoiceChatSession.controller.clearInputPlaceholder();\n\n\t\tthis.currentVoiceChatSession.controller.updateState(\n\t\t\tVoiceChatSessionState.Stopped,\n\t\t);\n\n\t\tthis.currentVoiceChatSession.disposables.dispose();\n\t\tthis.currentVoiceChatSession = undefined;\n\t}\n\n\tasync accept(voiceChatSessionId = this.voiceChatSessionIds): Promise<void> {\n\t\tif (\n\t\t\t!this.currentVoiceChatSession ||\n\t\t\tthis.voiceChatSessionIds !== voiceChatSessionId\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = this.currentVoiceChatSession.controller;\n\t\tconst response = await controller.acceptInput();\n\t\tif (!response) {\n\t\t\treturn;\n\t\t}\n\t\tconst autoSynthesize = this.configurationService.getValue<\n\t\t\t\"on\" | \"off\" | \"auto\"\n\t\t>(AccessibilityVoiceSettingId.AutoSynthesize);\n\t\tif (\n\t\t\tautoSynthesize === \"on\" ||\n\t\t\t(autoSynthesize === \"auto\" &&\n\t\t\t\t!this.accessibilityService.isScreenReaderOptimized())\n\t\t) {\n\t\t\tlet context: IVoiceChatSessionController | \"focused\";\n\t\t\tif (controller.context === \"inline\") {\n\t\t\t\t// TODO@bpasero this is ugly, but the lightweight inline chat turns into\n\t\t\t\t// a different widget as soon as a response comes in, so we fallback to\n\t\t\t\t// picking up from the focused chat widget\n\t\t\t\tcontext = \"focused\";\n\t\t\t} else {\n\t\t\t\tcontext = controller;\n\t\t\t}\n\t\t\tChatSynthesizerSessions.getInstance(\n\t\t\t\tthis.instantiationService,\n\t\t\t).start(\n\t\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\tChatSynthesizerSessionController.create(\n\t\t\t\t\t\taccessor,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\tresponse,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport const VOICE_KEY_HOLD_THRESHOLD = 500;\n\nasync function startVoiceChatWithHoldMode(\n\tid: string,\n\taccessor: ServicesAccessor,\n\ttarget: \"view\" | \"inline\" | \"quick\" | \"focused\",\n\tcontext?: IChatExecuteActionContext,\n): Promise<void> {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst keybindingService = accessor.get(IKeybindingService);\n\n\tconst holdMode = keybindingService.enableKeybindingHoldMode(id);\n\n\tconst controller = await VoiceChatSessionControllerFactory.create(\n\t\taccessor,\n\t\ttarget,\n\t);\n\tif (!controller) {\n\t\treturn;\n\t}\n\n\tconst session = await VoiceChatSessions.getInstance(\n\t\tinstantiationService,\n\t).start(controller, context);\n\n\tlet acceptVoice = false;\n\tconst handle = disposableTimeout(() => {\n\t\tacceptVoice = true;\n\t\tsession?.setTimeoutDisabled(true); // disable accept on timeout when hold mode runs for VOICE_KEY_HOLD_THRESHOLD\n\t}, VOICE_KEY_HOLD_THRESHOLD);\n\tawait holdMode;\n\thandle.dispose();\n\n\tif (acceptVoice) {\n\t\tsession.accept();\n\t}\n}\n\nclass VoiceChatWithHoldModeAction extends Action2 {\n\tconstructor(\n\t\tdesc: Readonly<IAction2Options>,\n\t\tprivate readonly target: \"view\" | \"inline\" | \"quick\",\n\t) {\n\t\tsuper(desc);\n\t}\n\n\trun(\n\t\taccessor: ServicesAccessor,\n\t\tcontext?: IChatExecuteActionContext,\n\t): Promise<void> {\n\t\treturn startVoiceChatWithHoldMode(\n\t\t\tthis.desc.id,\n\t\t\taccessor,\n\t\t\tthis.target,\n\t\t\tcontext,\n\t\t);\n\t}\n}\n\nexport class VoiceChatInChatViewAction extends VoiceChatWithHoldModeAction {\n\tstatic readonly ID = \"workbench.action.chat.voiceChatInChatView\";\n\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: VoiceChatInChatViewAction.ID,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"workbench.action.chat.voiceChatInView.label\",\n\t\t\t\t\t\"Voice Chat in Chat View\",\n\t\t\t\t),\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate(), // disable when a chat request is in progress\n\t\t\t\t),\n\t\t\t\tf1: true,\n\t\t\t},\n\t\t\t\"view\",\n\t\t);\n\t}\n}\n\nexport class HoldToVoiceChatInChatViewAction extends Action2 {\n\tstatic readonly ID = \"workbench.action.chat.holdToVoiceChatInChatView\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: HoldToVoiceChatInChatViewAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.holdToVoiceChatInChatView.label\",\n\t\t\t\t\"Hold to Voice Chat in Chat View\",\n\t\t\t),\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate(), // disable when a chat request is in progress\n\t\t\t\t\tFocusInChatInput?.negate(), // when already in chat input, disable this action and prefer to start voice chat directly\n\t\t\t\t\tEditorContextKeys.focus.negate(), // do not steal the inline-chat keybinding\n\t\t\t\t\tNOTEBOOK_EDITOR_FOCUSED.negate(), // do not steal the notebook keybinding\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyI,\n\t\t\t},\n\t\t});\n\t}\n\n\toverride async run(\n\t\taccessor: ServicesAccessor,\n\t\tcontext?: IChatExecuteActionContext,\n\t): Promise<void> {\n\t\t// The intent of this action is to provide 2 modes to align with what `Ctrlcmd+I` in inline chat:\n\t\t// - if the user press and holds, we start voice chat in the chat view\n\t\t// - if the user press and releases quickly enough, we just open the chat view without voice chat\n\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\n\t\tconst holdMode = keybindingService.enableKeybindingHoldMode(\n\t\t\tHoldToVoiceChatInChatViewAction.ID,\n\t\t);\n\n\t\tlet session: IVoiceChatSession | undefined;\n\t\tconst handle = disposableTimeout(async () => {\n\t\t\tconst controller = await VoiceChatSessionControllerFactory.create(\n\t\t\t\taccessor,\n\t\t\t\t\"view\",\n\t\t\t);\n\t\t\tif (controller) {\n\t\t\t\tsession = await VoiceChatSessions.getInstance(\n\t\t\t\t\tinstantiationService,\n\t\t\t\t).start(controller, context);\n\t\t\t\tsession.setTimeoutDisabled(true);\n\t\t\t}\n\t\t}, VOICE_KEY_HOLD_THRESHOLD);\n\n\t\t(await showChatView(viewsService))?.focusInput();\n\n\t\tawait holdMode;\n\t\thandle.dispose();\n\n\t\tif (session) {\n\t\t\tsession.accept();\n\t\t}\n\t}\n}\n\nexport class InlineVoiceChatAction extends VoiceChatWithHoldModeAction {\n\tstatic readonly ID = \"workbench.action.chat.inlineVoiceChat\";\n\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: InlineVoiceChatAction.ID,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"workbench.action.chat.inlineVoiceChat\",\n\t\t\t\t\t\"Inline Voice Chat\",\n\t\t\t\t),\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\tActiveEditorContext,\n\t\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate(), // disable when a chat request is in progress\n\t\t\t\t),\n\t\t\t\tf1: true,\n\t\t\t},\n\t\t\t\"inline\",\n\t\t);\n\t}\n}\n\nexport class QuickVoiceChatAction extends VoiceChatWithHoldModeAction {\n\tstatic readonly ID = \"workbench.action.chat.quickVoiceChat\";\n\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: QuickVoiceChatAction.ID,\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"workbench.action.chat.quickVoiceChat.label\",\n\t\t\t\t\t\"Quick Voice Chat\",\n\t\t\t\t),\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate(), // disable when a chat request is in progress\n\t\t\t\t),\n\t\t\t\tf1: true,\n\t\t\t},\n\t\t\t\"quick\",\n\t\t);\n\t}\n}\n\nexport class StartVoiceChatAction extends Action2 {\n\tstatic readonly ID = \"workbench.action.chat.startVoiceChat\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StartVoiceChatAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.startVoiceChat.label\",\n\t\t\t\t\"Start Voice Chat\",\n\t\t\t),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tFocusInChatInput, // scope this action to chat input fields only\n\t\t\t\t\tEditorContextKeys.focus.negate(), // do not steal the editor inline-chat keybinding\n\t\t\t\t\tNOTEBOOK_EDITOR_FOCUSED.negate(), // do not steal the notebook inline-chat keybinding\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyI,\n\t\t\t},\n\t\t\ticon: Codicon.mic,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCanVoiceChat,\n\t\t\t\tScopedVoiceChatGettingReady.negate(), // disable when voice chat is getting ready\n\t\t\t\tAnyChatRequestInProgress?.negate(), // disable when any chat request is in progress\n\t\t\t\tSpeechToTextInProgress.negate(), // disable when speech to text is in progress\n\t\t\t),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tHasSpeechProvider,\n\t\t\t\t\t\tScopedChatSynthesisInProgress.negate(), // hide when text to speech is in progress\n\t\t\t\t\t\tAnyScopedVoiceChatInProgress?.negate(), // hide when voice chat is in progress\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: TerminalChatExecute,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tHasSpeechProvider,\n\t\t\t\t\t\tScopedChatSynthesisInProgress.negate(), // hide when text to speech is in progress\n\t\t\t\t\t\tAnyScopedVoiceChatInProgress?.negate(), // hide when voice chat is in progress\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(\n\t\taccessor: ServicesAccessor,\n\t\tcontext?: IChatExecuteActionContext,\n\t): Promise<void> {\n\t\tconst widget = context?.widget;\n\t\tif (widget) {\n\t\t\t// if we already get a context when the action is executed\n\t\t\t// from a toolbar within the chat widget, then make sure\n\t\t\t// to move focus into the input field so that the controller\n\t\t\t// is properly retrieved\n\t\t\twidget.focusInput();\n\t\t}\n\n\t\treturn startVoiceChatWithHoldMode(\n\t\t\tthis.desc.id,\n\t\t\taccessor,\n\t\t\t\"focused\",\n\t\t\tcontext,\n\t\t);\n\t}\n}\n\nexport class StopListeningAction extends Action2 {\n\tstatic readonly ID = \"workbench.action.chat.stopListening\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopListeningAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.stopListening.label\",\n\t\t\t\t\"Stop Listening\",\n\t\t\t),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 100,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\twhen: AnyScopedVoiceChatInProgress,\n\t\t\t},\n\t\t\ticon: spinningLoading,\n\t\t\tprecondition: GlobalVoiceChatInProgress, // need global context here because of `f1: true`\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\t\twhen: AnyScopedVoiceChatInProgress,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: TerminalChatExecute,\n\t\t\t\t\twhen: AnyScopedVoiceChatInProgress,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tVoiceChatSessions.getInstance(\n\t\t\taccessor.get(IInstantiationService),\n\t\t).stop();\n\t}\n}\n\nexport class StopListeningAndSubmitAction extends Action2 {\n\tstatic readonly ID = \"workbench.action.chat.stopListeningAndSubmit\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopListeningAndSubmitAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.stopListeningAndSubmit.label\",\n\t\t\t\t\"Stop Listening and Submit\",\n\t\t\t),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tFocusInChatInput,\n\t\t\t\t\tAnyScopedVoiceChatInProgress,\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyI,\n\t\t\t},\n\t\t\tprecondition: GlobalVoiceChatInProgress, // need global context here because of `f1: true`\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tVoiceChatSessions.getInstance(\n\t\t\taccessor.get(IInstantiationService),\n\t\t).accept();\n\t}\n}\n\n//#endregion\n\n//#region Text to Speech\n\nconst ScopedChatSynthesisInProgress = new RawContextKey<boolean>(\n\t\"scopedChatSynthesisInProgress\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"scopedChatSynthesisInProgress\",\n\t\t\t\"Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.\",\n\t\t),\n\t},\n);\n\ninterface IChatSynthesizerSessionController {\n\treadonly onDidHideChat: Event<unknown>;\n\n\treadonly contextKeyService: IContextKeyService;\n\treadonly response: IChatResponseModel;\n}\n\nclass ChatSynthesizerSessionController {\n\tstatic create(\n\t\taccessor: ServicesAccessor,\n\t\tcontext: IVoiceChatSessionController | \"focused\",\n\t\tresponse: IChatResponseModel,\n\t): IChatSynthesizerSessionController {\n\t\tif (context === \"focused\") {\n\t\t\treturn ChatSynthesizerSessionController.doCreateForFocusedChat(\n\t\t\t\taccessor,\n\t\t\t\tresponse,\n\t\t\t);\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tonDidHideChat: context.onDidHideInput,\n\t\t\t\tcontextKeyService: context.scopedContextKeyService,\n\t\t\t\tresponse,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate static doCreateForFocusedChat(\n\t\taccessor: ServicesAccessor,\n\t\tresponse: IChatResponseModel,\n\t): IChatSynthesizerSessionController {\n\t\tconst chatWidgetService = accessor.get(IChatWidgetService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tconst terminalService = accessor.get(ITerminalService);\n\n\t\t// 1.) probe terminal chat which is not part of chat widget service\n\t\tconst activeInstance = terminalService.activeInstance;\n\t\tif (activeInstance) {\n\t\t\tconst terminalChat =\n\t\t\t\tTerminalChatController.activeChatWidget ||\n\t\t\t\tTerminalChatController.get(activeInstance);\n\t\t\tif (terminalChat?.hasFocus()) {\n\t\t\t\treturn {\n\t\t\t\t\tonDidHideChat: terminalChat.onDidHide,\n\t\t\t\t\tcontextKeyService: terminalChat.scopedContextKeyService,\n\t\t\t\t\tresponse,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// 2.) otherwise go via chat widget service\n\t\tlet chatWidget = chatWidgetService.getWidgetBySessionId(\n\t\t\tresponse.session.sessionId,\n\t\t);\n\t\tif (chatWidget?.location === ChatAgentLocation.Editor) {\n\t\t\t// TODO@bpasero workaround for https://github.com/microsoft/vscode/issues/212785\n\t\t\tchatWidget = chatWidgetService.lastFocusedWidget;\n\t\t}\n\n\t\treturn {\n\t\t\tonDidHideChat: chatWidget?.onDidHide ?? Event.None,\n\t\t\tcontextKeyService:\n\t\t\t\tchatWidget?.scopedContextKeyService ?? contextKeyService,\n\t\t\tresponse,\n\t\t};\n\t}\n}\n\nclass ChatSynthesizerSessions {\n\tprivate static instance: ChatSynthesizerSessions | undefined = undefined;\n\tstatic getInstance(\n\t\tinstantiationService: IInstantiationService,\n\t): ChatSynthesizerSessions {\n\t\tif (!ChatSynthesizerSessions.instance) {\n\t\t\tChatSynthesizerSessions.instance =\n\t\t\t\tinstantiationService.createInstance(ChatSynthesizerSessions);\n\t\t}\n\n\t\treturn ChatSynthesizerSessions.instance;\n\t}\n\n\tprivate activeSession: CancellationTokenSource | undefined = undefined;\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) { }\n\n\tasync start(controller: IChatSynthesizerSessionController): Promise<void> {\n\t\t// Stop running text-to-speech or speech-to-text sessions in chats\n\t\tthis.stop();\n\t\tVoiceChatSessions.getInstance(this.instantiationService).stop();\n\n\t\tconst activeSession = (this.activeSession =\n\t\t\tnew CancellationTokenSource());\n\n\t\tconst disposables = new DisposableStore();\n\t\tactiveSession.token.onCancellationRequested(() =>\n\t\t\tdisposables.dispose(),\n\t\t);\n\n\t\tconst session = await this.speechService.createTextToSpeechSession(\n\t\t\tactiveSession.token,\n\t\t\t\"chat\",\n\t\t);\n\n\t\tif (activeSession.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tdisposables.add(controller.onDidHideChat(() => this.stop()));\n\n\t\tconst scopedChatToSpeechInProgress =\n\t\t\tScopedChatSynthesisInProgress.bindTo(controller.contextKeyService);\n\t\tdisposables.add(\n\t\t\ttoDisposable(() => scopedChatToSpeechInProgress.reset()),\n\t\t);\n\n\t\tdisposables.add(\n\t\t\tsession.onDidChange((e) => {\n\t\t\t\tswitch (e.status) {\n\t\t\t\t\tcase TextToSpeechStatus.Started:\n\t\t\t\t\t\tscopedChatToSpeechInProgress.set(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TextToSpeechStatus.Stopped:\n\t\t\t\t\t\tscopedChatToSpeechInProgress.reset();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tfor await (const chunk of this.nextChatResponseChunk(\n\t\t\tcontroller.response,\n\t\t\tactiveSession.token,\n\t\t)) {\n\t\t\tif (activeSession.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait raceCancellation(\n\t\t\t\tsession.synthesize(chunk),\n\t\t\t\tactiveSession.token,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async *nextChatResponseChunk(\n\t\tresponse: IChatResponseModel,\n\t\ttoken: CancellationToken,\n\t): AsyncIterable<string> {\n\t\tlet totalOffset = 0;\n\t\tlet complete = false;\n\t\tdo {\n\t\t\tconst responseLength = response.response.toString().length;\n\t\t\tconst { chunk, offset } = this.parseNextChatResponseChunk(\n\t\t\t\tresponse,\n\t\t\t\ttotalOffset,\n\t\t\t);\n\t\t\ttotalOffset = offset;\n\t\t\tcomplete = response.isComplete;\n\n\t\t\tif (chunk) {\n\t\t\t\tyield chunk;\n\t\t\t}\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!complete &&\n\t\t\t\tresponseLength === response.response.toString().length\n\t\t\t) {\n\t\t\t\tawait raceCancellation(\n\t\t\t\t\tEvent.toPromise(response.onDidChange),\n\t\t\t\t\ttoken,\n\t\t\t\t); // wait for the response to change\n\t\t\t}\n\t\t} while (!token.isCancellationRequested && !complete);\n\t}\n\n\tprivate parseNextChatResponseChunk(\n\t\tresponse: IChatResponseModel,\n\t\toffset: number,\n\t): { readonly chunk: string | undefined; readonly offset: number } {\n\t\tlet chunk: string | undefined;\n\n\t\tconst text = response.response.toString();\n\n\t\tif (response.isComplete) {\n\t\t\tchunk = text.substring(offset);\n\t\t\toffset = text.length + 1;\n\t\t} else {\n\t\t\tconst res = parseNextChatResponseChunk(text, offset);\n\t\t\tchunk = res.chunk;\n\t\t\toffset = res.offset;\n\t\t}\n\n\t\treturn {\n\t\t\tchunk: chunk ? renderStringAsPlaintext({ value: chunk }) : chunk, // convert markdown to plain text\n\t\t\toffset,\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.activeSession?.dispose(true);\n\t\tthis.activeSession = undefined;\n\t}\n}\n\nconst sentenceDelimiter = [\".\", \"!\", \"?\", \":\"];\nconst lineDelimiter = \"\\n\";\nconst wordDelimiter = \" \";\n\nexport function parseNextChatResponseChunk(\n\ttext: string,\n\toffset: number,\n): { readonly chunk: string | undefined; readonly offset: number } {\n\tlet chunk: string | undefined;\n\n\tfor (let i = text.length - 1; i >= offset; i--) {\n\t\t// going from end to start to produce largest chunks\n\t\tconst cur = text[i];\n\t\tconst next = text[i + 1];\n\t\tif (\n\t\t\t(sentenceDelimiter.includes(cur) && next === wordDelimiter) || // end of sentence\n\t\t\tlineDelimiter === cur // end of line\n\t\t) {\n\t\t\tchunk = text.substring(offset, i + 1).trim();\n\t\t\toffset = i + 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn { chunk, offset };\n}\n\nexport class ReadChatResponseAloud extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"workbench.action.chat.readChatResponseAloud\",\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.readChatResponseAloud\",\n\t\t\t\t\"Read Aloud\",\n\t\t\t),\n\t\t\ticon: Codicon.unmute,\n\t\t\tprecondition: CanVoiceChat,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatMessageTitle,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\t\tCONTEXT_RESPONSE, // only for responses\n\t\t\t\t\t\tScopedChatSynthesisInProgress.negate(), // but not when already in progress\n\t\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate(), // and not when response is filtered\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MENU_INLINE_CHAT_WIDGET_SECONDARY,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\t\tCONTEXT_RESPONSE, // only for responses\n\t\t\t\t\t\tScopedChatSynthesisInProgress.negate(), // but not when already in progress\n\t\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate(), // and not when response is filtered\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, ...args: any[]) {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\n\t\tconst response = args[0];\n\t\tif (!isResponseVM(response)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = ChatSynthesizerSessionController.create(\n\t\t\taccessor,\n\t\t\t\"focused\",\n\t\t\tresponse.model,\n\t\t);\n\t\tChatSynthesizerSessions.getInstance(instantiationService).start(\n\t\t\tcontroller,\n\t\t);\n\t}\n}\n\nexport class StopReadAloud extends Action2 {\n\tstatic readonly ID = \"workbench.action.speech.stopReadAloud\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopReadAloud.ID,\n\t\t\ticon: syncing,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.speech.stopReadAloud\",\n\t\t\t\t\"Stop Reading Aloud\",\n\t\t\t),\n\t\t\tf1: true,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tprecondition: GlobalTextToSpeechInProgress, // need global context here because of `f1: true`\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 100,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\twhen: ScopedChatSynthesisInProgress,\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\t\twhen: ScopedChatSynthesisInProgress,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: TerminalChatExecute,\n\t\t\t\t\twhen: ScopedChatSynthesisInProgress,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tChatSynthesizerSessions.getInstance(\n\t\t\taccessor.get(IInstantiationService),\n\t\t).stop();\n\t}\n}\n\nexport class StopReadChatItemAloud extends Action2 {\n\tstatic readonly ID = \"workbench.action.chat.stopReadChatItemAloud\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopReadChatItemAloud.ID,\n\t\t\ticon: Codicon.mute,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.stopReadChatItemAloud\",\n\t\t\t\t\"Stop Reading Aloud\",\n\t\t\t),\n\t\t\tprecondition: ScopedChatSynthesisInProgress,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 100,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatMessageTitle,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tScopedChatSynthesisInProgress, // only when in progress\n\t\t\t\t\t\tCONTEXT_RESPONSE, // only for responses\n\t\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate(), // but not when response is filtered\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MENU_INLINE_CHAT_WIDGET_SECONDARY,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tScopedChatSynthesisInProgress, // only when in progress\n\t\t\t\t\t\tCONTEXT_RESPONSE, // only for responses\n\t\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate(), // but not when response is filtered\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, ...args: any[]) {\n\t\tChatSynthesizerSessions.getInstance(\n\t\t\taccessor.get(IInstantiationService),\n\t\t).stop();\n\t}\n}\n\n//#endregion\n\n//#region Keyword Recognition\n\nfunction supportsKeywordActivation(\n\tconfigurationService: IConfigurationService,\n\tspeechService: ISpeechService,\n\tchatAgentService: IChatAgentService,\n): boolean {\n\tif (\n\t\t!speechService.hasSpeechProvider ||\n\t\t!chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)\n\t) {\n\t\treturn false;\n\t}\n\n\tconst value = configurationService.getValue(KEYWORD_ACTIVIATION_SETTING_ID);\n\n\treturn (\n\t\ttypeof value === \"string\" &&\n\t\tvalue !== KeywordActivationContribution.SETTINGS_VALUE.OFF\n\t);\n}\n\nexport class KeywordActivationContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.keywordActivation\";\n\n\tstatic SETTINGS_VALUE = {\n\t\tOFF: \"off\",\n\t\tINLINE_CHAT: \"inlineChat\",\n\t\tQUICK_CHAT: \"quickChat\",\n\t\tVIEW_CHAT: \"chatInView\",\n\t\tCHAT_IN_CONTEXT: \"chatInContext\",\n\t};\n\n\tprivate activeSession: CancellationTokenSource | undefined = undefined;\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(instantiationService.createInstance(KeywordActivationStatusEntry));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tEvent.runAndSubscribe(\n\t\t\t\tthis.speechService.onDidChangeHasSpeechProvider,\n\t\t\t\t() => {\n\t\t\t\t\tthis.updateConfiguration();\n\t\t\t\t\tthis.handleKeywordActivation();\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tconst onDidAddDefaultAgent = this._register(\n\t\t\tthis.chatAgentService.onDidChangeAgents(() => {\n\t\t\t\tif (\n\t\t\t\t\tthis.chatAgentService.getDefaultAgent(\n\t\t\t\t\t\tChatAgentLocation.Panel,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.updateConfiguration();\n\t\t\t\t\tthis.handleKeywordActivation();\n\n\t\t\t\t\tonDidAddDefaultAgent.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.speechService.onDidStartSpeechToTextSession(() =>\n\t\t\t\tthis.handleKeywordActivation(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.speechService.onDidEndSpeechToTextSession(() =>\n\t\t\t\tthis.handleKeywordActivation(),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(KEYWORD_ACTIVIATION_SETTING_ID)) {\n\t\t\t\t\tthis.handleKeywordActivation();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateConfiguration(): void {\n\t\tif (\n\t\t\t!this.speechService.hasSpeechProvider ||\n\t\t\t!this.chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)\n\t\t) {\n\t\t\treturn; // these settings require a speech and chat provider\n\t\t}\n\n\t\tconst registry = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t);\n\t\tregistry.registerConfiguration({\n\t\t\t...accessibilityConfigurationNodeBase,\n\t\t\tproperties: {\n\t\t\t\t[KEYWORD_ACTIVIATION_SETTING_ID]: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tenum: [\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.OFF,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.VIEW_CHAT,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.QUICK_CHAT,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE\n\t\t\t\t\t\t\t.INLINE_CHAT,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE\n\t\t\t\t\t\t\t.CHAT_IN_CONTEXT,\n\t\t\t\t\t],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"voice.keywordActivation.off\",\n\t\t\t\t\t\t\t\"Keyword activation is disabled.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"voice.keywordActivation.chatInView\",\n\t\t\t\t\t\t\t\"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the chat view.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"voice.keywordActivation.quickChat\",\n\t\t\t\t\t\t\t\"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the quick chat.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"voice.keywordActivation.inlineChat\",\n\t\t\t\t\t\t\t\"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor if possible.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"voice.keywordActivation.chatInContext\",\n\t\t\t\t\t\t\t\"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor or view depending on keyboard focus.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t],\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"voice.keywordActivation\",\n\t\t\t\t\t\t\"Controls whether the keyword phrase 'Hey Code' is recognized to start a voice chat session. Enabling this will start recording from the microphone but the audio is processed locally and never sent to a server.\",\n\t\t\t\t\t),\n\t\t\t\t\tdefault: \"off\",\n\t\t\t\t\ttags: [\"accessibility\"],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate handleKeywordActivation(): void {\n\t\tconst enabled =\n\t\t\tsupportsKeywordActivation(\n\t\t\t\tthis.configurationService,\n\t\t\t\tthis.speechService,\n\t\t\t\tthis.chatAgentService,\n\t\t\t) && !this.speechService.hasActiveSpeechToTextSession;\n\t\tif (\n\t\t\t(enabled && this.activeSession) ||\n\t\t\t(!enabled && !this.activeSession)\n\t\t) {\n\t\t\treturn; // already running or stopped\n\t\t}\n\n\t\t// Start keyword activation\n\t\tif (enabled) {\n\t\t\tthis.enableKeywordActivation();\n\t\t}\n\n\t\t// Stop keyword activation\n\t\telse {\n\t\t\tthis.disableKeywordActivation();\n\t\t}\n\t}\n\n\tprivate async enableKeywordActivation(): Promise<void> {\n\t\tconst session = (this.activeSession = new CancellationTokenSource());\n\t\tconst result = await this.speechService.recognizeKeyword(session.token);\n\t\tif (\n\t\t\tsession.token.isCancellationRequested ||\n\t\t\tsession !== this.activeSession\n\t\t) {\n\t\t\treturn; // cancelled\n\t\t}\n\n\t\tthis.activeSession = undefined;\n\n\t\tif (result === KeywordRecognitionStatus.Recognized) {\n\t\t\tif (this.hostService.hasFocus) {\n\t\t\t\tthis.commandService.executeCommand(this.getKeywordCommand());\n\t\t\t}\n\n\t\t\t// Immediately start another keyboard activation session\n\t\t\t// because we cannot assume that the command we execute\n\t\t\t// will trigger a speech recognition session.\n\n\t\t\tthis.handleKeywordActivation();\n\t\t}\n\t}\n\n\tprivate getKeywordCommand(): string {\n\t\tconst setting = this.configurationService.getValue(\n\t\t\tKEYWORD_ACTIVIATION_SETTING_ID,\n\t\t);\n\t\tswitch (setting) {\n\t\t\tcase KeywordActivationContribution.SETTINGS_VALUE.INLINE_CHAT:\n\t\t\t\treturn InlineVoiceChatAction.ID;\n\t\t\tcase KeywordActivationContribution.SETTINGS_VALUE.QUICK_CHAT:\n\t\t\t\treturn QuickVoiceChatAction.ID;\n\t\t\tcase KeywordActivationContribution.SETTINGS_VALUE.CHAT_IN_CONTEXT: {\n\t\t\t\tconst activeCodeEditor = getCodeEditor(\n\t\t\t\t\tthis.editorService.activeTextEditorControl,\n\t\t\t\t);\n\t\t\t\tif (activeCodeEditor?.hasWidgetFocus()) {\n\t\t\t\t\treturn InlineVoiceChatAction.ID;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn VoiceChatInChatViewAction.ID;\n\t\t}\n\t}\n\n\tprivate disableKeywordActivation(): void {\n\t\tthis.activeSession?.dispose(true);\n\t\tthis.activeSession = undefined;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.activeSession?.dispose();\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass KeywordActivationStatusEntry extends Disposable {\n\tprivate readonly entry = this._register(\n\t\tnew MutableDisposable<IStatusbarEntryAccessor>(),\n\t);\n\n\tprivate static STATUS_NAME = localize(\n\t\t\"keywordActivation.status.name\",\n\t\t\"Voice Keyword Activation\",\n\t);\n\tprivate static STATUS_COMMAND = \"keywordActivation.status.command\";\n\tprivate static STATUS_ACTIVE = localize(\n\t\t\"keywordActivation.status.active\",\n\t\t\"Listening to 'Hey Code'...\",\n\t);\n\tprivate static STATUS_INACTIVE = localize(\n\t\t\"keywordActivation.status.inactive\",\n\t\t\"Waiting for voice chat to end...\",\n\t);\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(CommandsRegistry.registerCommand(KeywordActivationStatusEntry.STATUS_COMMAND, () => this.commandService.executeCommand('workbench.action.openSettings', KEYWORD_ACTIVIATION_SETTING_ID)));\n\n\t\tthis.registerListeners();\n\t\tthis.updateStatusEntry();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.speechService.onDidStartKeywordRecognition(() =>\n\t\t\t\tthis.updateStatusEntry(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.speechService.onDidEndKeywordRecognition(() =>\n\t\t\t\tthis.updateStatusEntry(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(KEYWORD_ACTIVIATION_SETTING_ID)) {\n\t\t\t\t\tthis.updateStatusEntry();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateStatusEntry(): void {\n\t\tconst visible = supportsKeywordActivation(\n\t\t\tthis.configurationService,\n\t\t\tthis.speechService,\n\t\t\tthis.chatAgentService,\n\t\t);\n\t\tif (visible) {\n\t\t\tif (!this.entry.value) {\n\t\t\t\tthis.createStatusEntry();\n\t\t\t}\n\n\t\t\tthis.updateStatusLabel();\n\t\t} else {\n\t\t\tthis.entry.clear();\n\t\t}\n\t}\n\n\tprivate createStatusEntry() {\n\t\tthis.entry.value = this.statusbarService.addEntry(\n\t\t\tthis.getStatusEntryProperties(),\n\t\t\t\"status.voiceKeywordActivation\",\n\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t103,\n\t\t);\n\t}\n\n\tprivate getStatusEntryProperties(): IStatusbarEntry {\n\t\treturn {\n\t\t\tname: KeywordActivationStatusEntry.STATUS_NAME,\n\t\t\ttext: this.speechService.hasActiveKeywordRecognition\n\t\t\t\t? \"$(mic-filled)\"\n\t\t\t\t: \"$(mic)\",\n\t\t\ttooltip: this.speechService.hasActiveKeywordRecognition\n\t\t\t\t? KeywordActivationStatusEntry.STATUS_ACTIVE\n\t\t\t\t: KeywordActivationStatusEntry.STATUS_INACTIVE,\n\t\t\tariaLabel: this.speechService.hasActiveKeywordRecognition\n\t\t\t\t? KeywordActivationStatusEntry.STATUS_ACTIVE\n\t\t\t\t: KeywordActivationStatusEntry.STATUS_INACTIVE,\n\t\t\tcommand: KeywordActivationStatusEntry.STATUS_COMMAND,\n\t\t\tkind: \"prominent\",\n\t\t\tshowInAllWindows: true,\n\t\t};\n\t}\n\n\tprivate updateStatusLabel(): void {\n\t\tthis.entry.value?.update(this.getStatusEntryProperties());\n\t}\n}\n\n//#endregion\n\n//#region Install Provider Actions\n\nconst InstallingSpeechProvider = new RawContextKey<boolean>(\n\t\"installingSpeechProvider\",\n\tfalse,\n\ttrue,\n);\n\nabstract class BaseInstallSpeechProviderAction extends Action2 {\n\tprivate static readonly SPEECH_EXTENSION_ID = \"ms-vscode.vscode-speech\";\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tconst extensionsWorkbenchService = accessor.get(\n\t\t\tIExtensionsWorkbenchService,\n\t\t);\n\t\ttry {\n\t\t\tInstallingSpeechProvider.bindTo(contextKeyService).set(true);\n\t\t\tawait extensionsWorkbenchService.install(\n\t\t\t\tBaseInstallSpeechProviderAction.SPEECH_EXTENSION_ID,\n\t\t\t\t{\n\t\t\t\t\tjustification: this.getJustification(),\n\t\t\t\t\tenable: true,\n\t\t\t\t},\n\t\t\t\tProgressLocation.Notification,\n\t\t\t);\n\t\t} finally {\n\t\t\tInstallingSpeechProvider.bindTo(contextKeyService).reset();\n\t\t}\n\t}\n\n\tprotected abstract getJustification(): string;\n}\n\nexport class InstallSpeechProviderForVoiceChatAction extends BaseInstallSpeechProviderAction {\n\tstatic readonly ID = \"workbench.action.chat.installProviderForVoiceChat\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: InstallSpeechProviderForVoiceChatAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.installProviderForVoiceChat.label\",\n\t\t\t\t\"Start Voice Chat\",\n\t\t\t),\n\t\t\ticon: Codicon.mic,\n\t\t\tprecondition: InstallingSpeechProvider.negate(),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\t\twhen: HasSpeechProvider.negate(),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: TerminalChatExecute,\n\t\t\t\t\twhen: HasSpeechProvider.negate(),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\torder: -1,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tprotected getJustification(): string {\n\t\treturn localize(\n\t\t\t\"installProviderForVoiceChat.justification\",\n\t\t\t\"Microphone support requires this extension.\",\n\t\t);\n\t}\n}\n\nexport class InstallSpeechProviderForSynthesizeChatAction extends BaseInstallSpeechProviderAction {\n\tstatic readonly ID = \"workbench.action.chat.installProviderForSynthesis\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: InstallSpeechProviderForSynthesizeChatAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"workbench.action.chat.installProviderForSynthesis.label\",\n\t\t\t\t\"Read Aloud\",\n\t\t\t),\n\t\t\ticon: Codicon.unmute,\n\t\t\tprecondition: InstallingSpeechProvider.negate(),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatMessageTitle,\n\t\t\t\t\twhen: HasSpeechProvider.negate(),\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tprotected getJustification(): string {\n\t\treturn localize(\n\t\t\t\"installProviderForSynthesis.justification\",\n\t\t\t\"Speaker support requires this extension.\",\n\t\t);\n\t}\n}\n\n//#endregion\n\nregisterThemingParticipant((theme, collector) => {\n\tlet activeRecordingColor: Color | undefined;\n\tlet activeRecordingDimmedColor: Color | undefined;\n\tif (theme.type === ColorScheme.LIGHT || theme.type === ColorScheme.DARK) {\n\t\tactiveRecordingColor =\n\t\t\ttheme.getColor(ACTIVITY_BAR_BADGE_BACKGROUND) ??\n\t\t\ttheme.getColor(focusBorder);\n\t\tactiveRecordingDimmedColor = activeRecordingColor?.transparent(0.38);\n\t} else {\n\t\tactiveRecordingColor = theme.getColor(contrastBorder);\n\t\tactiveRecordingDimmedColor = theme.getColor(contrastBorder);\n\t}\n\n\t// Show a \"microphone\" or \"pulse\" icon when speech-to-text or text-to-speech is in progress that glows via outline.\n\tcollector.addRule(`\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled),\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled) {\n\t\t\tcolor: ${activeRecordingColor};\n\t\t\toutline: 1px solid ${activeRecordingColor};\n\t\t\toutline-offset: -1px;\n\t\t\tanimation: pulseAnimation 1s infinite;\n\t\t\tborder-radius: 50%;\n\t\t}\n\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {\n\t\t\tposition: absolute;\n\t\t\toutline: 1px solid ${activeRecordingColor};\n\t\t\toutline-offset: 2px;\n\t\t\tborder-radius: 50%;\n\t\t\twidth: 16px;\n\t\t\theight: 16px;\n\t\t}\n\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::after,\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::after {\n\t\t\toutline: 2px solid ${activeRecordingColor};\n\t\t\toutline-offset: -1px;\n\t\t\tanimation: pulseAnimation 1500ms cubic-bezier(0.75, 0, 0.25, 1) infinite;\n\t\t}\n\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {\n\t\t\tposition: absolute;\n\t\t\toutline: 1px solid ${activeRecordingColor};\n\t\t\toutline-offset: 2px;\n\t\t\tborder-radius: 50%;\n\t\t\twidth: 16px;\n\t\t\theight: 16px;\n\t\t}\n\n\t\t@keyframes pulseAnimation {\n\t\t\t0% {\n\t\t\t\toutline-width: 2px;\n\t\t\t}\n\t\t\t62% {\n\t\t\t\toutline-width: 5px;\n\t\t\t\toutline-color: ${activeRecordingDimmedColor};\n\t\t\t}\n\t\t\t100% {\n\t\t\t\toutline-width: 2px;\n\t\t\t}\n\t\t}\n\t`);\n});\n"],
  "mappings": "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",
  "names": ["VoiceChatSessionState"]
}
