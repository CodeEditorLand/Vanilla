{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/electron-sandbox/actions/voiceChatActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/voiceChatActions.css';\nimport { RunOnceScheduler, disposableTimeout, raceCancellation } from '../../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { Color } from '../../../../../base/common/color.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { KeyCode, KeyMod } from '../../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore, MutableDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { isNumber } from '../../../../../base/common/types.js';\nimport { getCodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { EditorContextKeys } from '../../../../../editor/common/editorContextKeys.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { Action2, IAction2Options, MenuId } from '../../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { Extensions, IConfigurationRegistry } from '../../../../../platform/configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../../platform/keybinding/common/keybinding.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ProgressLocation } from '../../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { contrastBorder, focusBorder } from '../../../../../platform/theme/common/colorRegistry.js';\nimport { spinningLoading, syncing } from '../../../../../platform/theme/common/iconRegistry.js';\nimport { ColorScheme } from '../../../../../platform/theme/common/theme.js';\nimport { registerThemingParticipant } from '../../../../../platform/theme/common/themeService.js';\nimport { ActiveEditorContext } from '../../../../common/contextkeys.js';\nimport { IWorkbenchContribution } from '../../../../common/contributions.js';\nimport { ACTIVITY_BAR_BADGE_BACKGROUND } from '../../../../common/theme.js';\nimport { AccessibilityVoiceSettingId, SpeechTimeoutDefault, accessibilityConfigurationNodeBase } from '../../../accessibility/browser/accessibilityConfiguration.js';\nimport { CHAT_CATEGORY } from '../../browser/actions/chatActions.js';\nimport { IChatExecuteActionContext } from '../../browser/actions/chatExecuteActions.js';\nimport { IChatWidget, IChatWidgetService, IQuickChatService, showChatView } from '../../browser/chat.js';\nimport { ChatAgentLocation, IChatAgentService } from '../../common/chatAgents.js';\nimport { CONTEXT_CHAT_REQUEST_IN_PROGRESS, CONTEXT_IN_CHAT_INPUT, CONTEXT_CHAT_ENABLED, CONTEXT_RESPONSE, CONTEXT_RESPONSE_FILTERED } from '../../common/chatContextKeys.js';\nimport { KEYWORD_ACTIVIATION_SETTING_ID } from '../../common/chatService.js';\nimport { isResponseVM } from '../../common/chatViewModel.js';\nimport { IVoiceChatService, VoiceChatInProgress as GlobalVoiceChatInProgress } from '../../common/voiceChatService.js';\nimport { IExtensionsWorkbenchService } from '../../../extensions/common/extensions.js';\nimport { InlineChatController } from '../../../inlineChat/browser/inlineChatController.js';\nimport { CTX_INLINE_CHAT_FOCUSED, MENU_INLINE_CHAT_WIDGET_SECONDARY } from '../../../inlineChat/common/inlineChat.js';\nimport { NOTEBOOK_EDITOR_FOCUSED } from '../../../notebook/common/notebookContextKeys.js';\nimport { HasSpeechProvider, ISpeechService, KeywordRecognitionStatus, SpeechToTextInProgress, SpeechToTextStatus, TextToSpeechStatus, TextToSpeechInProgress as GlobalTextToSpeechInProgress } from '../../../speech/common/speechService.js';\nimport { ITerminalService } from '../../../terminal/browser/terminal.js';\nimport { TerminalChatContextKeys, TerminalChatController } from '../../../terminal/terminalContribExports.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { IHostService } from '../../../../services/host/browser/host.js';\nimport { IWorkbenchLayoutService, Parts } from '../../../../services/layout/browser/layoutService.js';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from '../../../../services/statusbar/browser/statusbar.js';\nimport { IViewsService } from '../../../../services/views/common/viewsService.js';\nimport { IChatResponseModel } from '../../common/chatModel.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { renderStringAsPlaintext } from '../../../../../base/browser/markdownRenderer.js';\n\n//#region Speech to Text\n\ntype VoiceChatSessionContext = 'view' | 'inline' | 'terminal' | 'quick' | 'editor';\nconst VoiceChatSessionContexts: VoiceChatSessionContext[] = ['view', 'inline', 'terminal', 'quick', 'editor'];\n\nconst TerminalChatExecute = MenuId.for('terminalChatInput'); // unfortunately, terminal decided to go with their own menu (https://github.com/microsoft/vscode/issues/208789)\n\n// Global Context Keys (set on global context key service)\nconst CanVoiceChat = ContextKeyExpr.and(CONTEXT_CHAT_ENABLED, HasSpeechProvider);\nconst FocusInChatInput = ContextKeyExpr.or(CTX_INLINE_CHAT_FOCUSED, CONTEXT_IN_CHAT_INPUT);\nconst AnyChatRequestInProgress = ContextKeyExpr.or(CONTEXT_CHAT_REQUEST_IN_PROGRESS, TerminalChatContextKeys.requestActive);\n\n// Scoped Context Keys (set on per-chat-context scoped context key service)\nconst ScopedVoiceChatGettingReady = new RawContextKey<boolean>('scopedVoiceChatGettingReady', false, { type: 'boolean', description: localize('scopedVoiceChatGettingReady', \"True when getting ready for receiving voice input from the microphone for voice chat. This key is only defined scoped, per chat context.\") });\nconst ScopedVoiceChatInProgress = new RawContextKey<VoiceChatSessionContext | undefined>('scopedVoiceChatInProgress', undefined, { type: 'string', description: localize('scopedVoiceChatInProgress', \"Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.\") });\nconst AnyScopedVoiceChatInProgress = ContextKeyExpr.or(...VoiceChatSessionContexts.map(context => ScopedVoiceChatInProgress.isEqualTo(context)));\n\nenum VoiceChatSessionState {\n\tStopped = 1,\n\tGettingReady,\n\tStarted\n}\n\ninterface IVoiceChatSessionController {\n\n\treadonly onDidAcceptInput: Event<unknown>;\n\treadonly onDidHideInput: Event<unknown>;\n\n\treadonly context: VoiceChatSessionContext;\n\treadonly scopedContextKeyService: IContextKeyService;\n\n\tupdateState(state: VoiceChatSessionState): void;\n\n\tfocusInput(): void;\n\tacceptInput(): Promise<IChatResponseModel | undefined>;\n\tupdateInput(text: string): void;\n\tgetInput(): string;\n\n\tsetInputPlaceholder(text: string): void;\n\tclearInputPlaceholder(): void;\n}\n\nclass VoiceChatSessionControllerFactory {\n\n\tstatic async create(accessor: ServicesAccessor, context: 'view' | 'inline' | 'quick' | 'focused'): Promise<IVoiceChatSessionController | undefined> {\n\t\tconst chatWidgetService = accessor.get(IChatWidgetService);\n\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst terminalService = accessor.get(ITerminalService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\n\t\tswitch (context) {\n\t\t\tcase 'focused': {\n\t\t\t\tconst controller = VoiceChatSessionControllerFactory.doCreateForFocusedChat(terminalService, chatWidgetService, layoutService);\n\t\t\t\treturn controller ?? VoiceChatSessionControllerFactory.create(accessor, 'view'); // fallback to 'view'\n\t\t\t}\n\t\t\tcase 'view': {\n\t\t\t\tconst chatWidget = await showChatView(viewsService);\n\t\t\t\tif (chatWidget) {\n\t\t\t\t\treturn VoiceChatSessionControllerFactory.doCreateForChatWidget('view', chatWidget);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'inline': {\n\t\t\t\tconst activeCodeEditor = getCodeEditor(editorService.activeTextEditorControl);\n\t\t\t\tif (activeCodeEditor) {\n\t\t\t\t\tconst inlineChat = InlineChatController.get(activeCodeEditor);\n\t\t\t\t\tif (inlineChat) {\n\t\t\t\t\t\tif (!inlineChat.joinCurrentRun()) {\n\t\t\t\t\t\t\tinlineChat.run();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn VoiceChatSessionControllerFactory.doCreateForChatWidget('inline', inlineChat.chatWidget);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'quick': {\n\t\t\t\tquickChatService.open(); // this will populate focused chat widget in the chat widget service\n\t\t\t\treturn VoiceChatSessionControllerFactory.create(accessor, 'focused');\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate static doCreateForFocusedChat(terminalService: ITerminalService, chatWidgetService: IChatWidgetService, layoutService: IWorkbenchLayoutService): IVoiceChatSessionController | undefined {\n\n\t\t// 1.) probe terminal chat which is not part of chat widget service\n\t\tconst activeInstance = terminalService.activeInstance;\n\t\tif (activeInstance) {\n\t\t\tconst terminalChat = TerminalChatController.activeChatWidget || TerminalChatController.get(activeInstance);\n\t\t\tif (terminalChat?.hasFocus()) {\n\t\t\t\treturn VoiceChatSessionControllerFactory.doCreateForTerminalChat(terminalChat);\n\t\t\t}\n\t\t}\n\n\t\t// 2.) otherwise go via chat widget service\n\t\tconst chatWidget = chatWidgetService.lastFocusedWidget;\n\t\tif (chatWidget?.hasInputFocus()) {\n\n\t\t\t// Figure out the context of the chat widget by asking\n\t\t\t// layout service for the part that has focus. Unfortunately\n\t\t\t// there is no better way because the widget does not know\n\t\t\t// its location.\n\n\t\t\tlet context: VoiceChatSessionContext;\n\t\t\tif (layoutService.hasFocus(Parts.EDITOR_PART)) {\n\t\t\t\tcontext = chatWidget.location === ChatAgentLocation.Panel ? 'editor' : 'inline';\n\t\t\t} else if (\n\t\t\t\t[Parts.SIDEBAR_PART, Parts.PANEL_PART, Parts.AUXILIARYBAR_PART, Parts.TITLEBAR_PART, Parts.STATUSBAR_PART, Parts.BANNER_PART, Parts.ACTIVITYBAR_PART].some(part => layoutService.hasFocus(part))\n\t\t\t) {\n\t\t\t\tcontext = 'view';\n\t\t\t} else {\n\t\t\t\tcontext = 'quick';\n\t\t\t}\n\n\t\t\treturn VoiceChatSessionControllerFactory.doCreateForChatWidget(context, chatWidget);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate static createChatContextKeyController(contextKeyService: IContextKeyService, context: VoiceChatSessionContext): (state: VoiceChatSessionState) => void {\n\t\tconst contextVoiceChatGettingReady = ScopedVoiceChatGettingReady.bindTo(contextKeyService);\n\t\tconst contextVoiceChatInProgress = ScopedVoiceChatInProgress.bindTo(contextKeyService);\n\n\t\treturn (state: VoiceChatSessionState) => {\n\t\t\tswitch (state) {\n\t\t\t\tcase VoiceChatSessionState.GettingReady:\n\t\t\t\t\tcontextVoiceChatGettingReady.set(true);\n\t\t\t\t\tcontextVoiceChatInProgress.reset();\n\t\t\t\t\tbreak;\n\t\t\t\tcase VoiceChatSessionState.Started:\n\t\t\t\t\tcontextVoiceChatGettingReady.reset();\n\t\t\t\t\tcontextVoiceChatInProgress.set(context);\n\t\t\t\t\tbreak;\n\t\t\t\tcase VoiceChatSessionState.Stopped:\n\t\t\t\t\tcontextVoiceChatGettingReady.reset();\n\t\t\t\t\tcontextVoiceChatInProgress.reset();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate static doCreateForChatWidget(context: VoiceChatSessionContext, chatWidget: IChatWidget): IVoiceChatSessionController {\n\t\treturn {\n\t\t\tcontext,\n\t\t\tscopedContextKeyService: chatWidget.scopedContextKeyService,\n\t\t\tonDidAcceptInput: chatWidget.onDidAcceptInput,\n\t\t\tonDidHideInput: chatWidget.onDidHide,\n\t\t\tfocusInput: () => chatWidget.focusInput(),\n\t\t\tacceptInput: () => chatWidget.acceptInput(undefined, true),\n\t\t\tupdateInput: text => chatWidget.setInput(text),\n\t\t\tgetInput: () => chatWidget.getInput(),\n\t\t\tsetInputPlaceholder: text => chatWidget.setInputPlaceholder(text),\n\t\t\tclearInputPlaceholder: () => chatWidget.resetInputPlaceholder(),\n\t\t\tupdateState: VoiceChatSessionControllerFactory.createChatContextKeyController(chatWidget.scopedContextKeyService, context)\n\t\t};\n\t}\n\n\tprivate static doCreateForTerminalChat(terminalChat: TerminalChatController): IVoiceChatSessionController {\n\t\tconst context = 'terminal';\n\t\treturn {\n\t\t\tcontext,\n\t\t\tscopedContextKeyService: terminalChat.scopedContextKeyService,\n\t\t\tonDidAcceptInput: terminalChat.onDidAcceptInput,\n\t\t\tonDidHideInput: terminalChat.onDidHide,\n\t\t\tfocusInput: () => terminalChat.focus(),\n\t\t\tacceptInput: () => terminalChat.acceptInput(true),\n\t\t\tupdateInput: text => terminalChat.updateInput(text, false),\n\t\t\tgetInput: () => terminalChat.getInput(),\n\t\t\tsetInputPlaceholder: text => terminalChat.setPlaceholder(text),\n\t\t\tclearInputPlaceholder: () => terminalChat.resetPlaceholder(),\n\t\t\tupdateState: VoiceChatSessionControllerFactory.createChatContextKeyController(terminalChat.scopedContextKeyService, context)\n\t\t};\n\t}\n}\n\ninterface IVoiceChatSession {\n\tsetTimeoutDisabled(disabled: boolean): void;\n\n\taccept(): void;\n\tstop(): void;\n}\n\ninterface IActiveVoiceChatSession extends IVoiceChatSession {\n\treadonly id: number;\n\treadonly controller: IVoiceChatSessionController;\n\treadonly disposables: DisposableStore;\n}\n\nclass VoiceChatSessions {\n\n\tprivate static instance: VoiceChatSessions | undefined = undefined;\n\tstatic getInstance(instantiationService: IInstantiationService): VoiceChatSessions {\n\t\tif (!VoiceChatSessions.instance) {\n\t\t\tVoiceChatSessions.instance = instantiationService.createInstance(VoiceChatSessions);\n\t\t}\n\n\t\treturn VoiceChatSessions.instance;\n\t}\n\n\tprivate currentVoiceChatSession: IActiveVoiceChatSession | undefined = undefined;\n\tprivate voiceChatSessionIds = 0;\n\n\tconstructor(\n\t\t@IVoiceChatService private readonly voiceChatService: IVoiceChatService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService\n\t) { }\n\n\tasync start(controller: IVoiceChatSessionController, context?: IChatExecuteActionContext): Promise<IVoiceChatSession> {\n\n\t\t// Stop running text-to-speech or speech-to-text sessions in chats\n\t\tthis.stop();\n\t\tChatSynthesizerSessions.getInstance(this.instantiationService).stop();\n\n\t\tlet disableTimeout = false;\n\n\t\tconst sessionId = ++this.voiceChatSessionIds;\n\t\tconst session: IActiveVoiceChatSession = this.currentVoiceChatSession = {\n\t\t\tid: sessionId,\n\t\t\tcontroller,\n\t\t\tdisposables: new DisposableStore(),\n\t\t\tsetTimeoutDisabled: (disabled: boolean) => { disableTimeout = disabled; },\n\t\t\taccept: () => this.accept(sessionId),\n\t\t\tstop: () => this.stop(sessionId, controller.context)\n\t\t};\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tsession.disposables.add(toDisposable(() => cts.dispose(true)));\n\n\t\tsession.disposables.add(controller.onDidAcceptInput(() => this.stop(sessionId, controller.context)));\n\t\tsession.disposables.add(controller.onDidHideInput(() => this.stop(sessionId, controller.context)));\n\n\t\tcontroller.focusInput();\n\n\t\tcontroller.updateState(VoiceChatSessionState.GettingReady);\n\n\t\tconst voiceChatSession = await this.voiceChatService.createVoiceChatSession(cts.token, { usesAgents: controller.context !== 'inline', model: context?.widget?.viewModel?.model });\n\n\t\tlet inputValue = controller.getInput();\n\n\t\tlet voiceChatTimeout = this.configurationService.getValue<number>(AccessibilityVoiceSettingId.SpeechTimeout);\n\t\tif (!isNumber(voiceChatTimeout) || voiceChatTimeout < 0) {\n\t\t\tvoiceChatTimeout = SpeechTimeoutDefault;\n\t\t}\n\n\t\tconst acceptTranscriptionScheduler = session.disposables.add(new RunOnceScheduler(() => this.accept(sessionId), voiceChatTimeout));\n\t\tsession.disposables.add(voiceChatSession.onDidChange(({ status, text, waitingForInput }) => {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (status) {\n\t\t\t\tcase SpeechToTextStatus.Started:\n\t\t\t\t\tthis.onDidSpeechToTextSessionStart(controller, session.disposables);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Recognizing:\n\t\t\t\t\tif (text) {\n\t\t\t\t\t\tsession.controller.updateInput(inputValue ? [inputValue, text].join(' ') : text);\n\t\t\t\t\t\tif (voiceChatTimeout > 0 && context?.voice?.disableTimeout !== true && !disableTimeout) {\n\t\t\t\t\t\t\tacceptTranscriptionScheduler.cancel();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Recognized:\n\t\t\t\t\tif (text) {\n\t\t\t\t\t\tinputValue = inputValue ? [inputValue, text].join(' ') : text;\n\t\t\t\t\t\tsession.controller.updateInput(inputValue);\n\t\t\t\t\t\tif (voiceChatTimeout > 0 && context?.voice?.disableTimeout !== true && !waitingForInput && !disableTimeout) {\n\t\t\t\t\t\t\tacceptTranscriptionScheduler.schedule();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Stopped:\n\t\t\t\t\tthis.stop(session.id, controller.context);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\treturn session;\n\t}\n\n\tprivate onDidSpeechToTextSessionStart(controller: IVoiceChatSessionController, disposables: DisposableStore): void {\n\t\tcontroller.updateState(VoiceChatSessionState.Started);\n\n\t\tlet dotCount = 0;\n\n\t\tconst updatePlaceholder = () => {\n\t\t\tdotCount = (dotCount + 1) % 4;\n\t\t\tcontroller.setInputPlaceholder(`${localize('listening', \"I'm listening\")}${'.'.repeat(dotCount)}`);\n\t\t\tplaceholderScheduler.schedule();\n\t\t};\n\n\t\tconst placeholderScheduler = disposables.add(new RunOnceScheduler(updatePlaceholder, 500));\n\t\tupdatePlaceholder();\n\t}\n\n\tstop(voiceChatSessionId = this.voiceChatSessionIds, context?: VoiceChatSessionContext): void {\n\t\tif (\n\t\t\t!this.currentVoiceChatSession ||\n\t\t\tthis.voiceChatSessionIds !== voiceChatSessionId ||\n\t\t\t(context && this.currentVoiceChatSession.controller.context !== context)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentVoiceChatSession.controller.clearInputPlaceholder();\n\n\t\tthis.currentVoiceChatSession.controller.updateState(VoiceChatSessionState.Stopped);\n\n\t\tthis.currentVoiceChatSession.disposables.dispose();\n\t\tthis.currentVoiceChatSession = undefined;\n\t}\n\n\tasync accept(voiceChatSessionId = this.voiceChatSessionIds): Promise<void> {\n\t\tif (\n\t\t\t!this.currentVoiceChatSession ||\n\t\t\tthis.voiceChatSessionIds !== voiceChatSessionId\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = this.currentVoiceChatSession.controller;\n\t\tconst response = await controller.acceptInput();\n\t\tif (!response) {\n\t\t\treturn;\n\t\t}\n\t\tconst autoSynthesize = this.configurationService.getValue<'on' | 'off' | 'auto'>(AccessibilityVoiceSettingId.AutoSynthesize);\n\t\tif (autoSynthesize === 'on' || autoSynthesize === 'auto' && !this.accessibilityService.isScreenReaderOptimized()) {\n\t\t\tlet context: IVoiceChatSessionController | 'focused';\n\t\t\tif (controller.context === 'inline') {\n\t\t\t\t// TODO@bpasero this is ugly, but the lightweight inline chat turns into\n\t\t\t\t// a different widget as soon as a response comes in, so we fallback to\n\t\t\t\t// picking up from the focused chat widget\n\t\t\t\tcontext = 'focused';\n\t\t\t} else {\n\t\t\t\tcontext = controller;\n\t\t\t}\n\t\t\tChatSynthesizerSessions.getInstance(this.instantiationService).start(this.instantiationService.invokeFunction(accessor => ChatSynthesizerSessionController.create(accessor, context, response)));\n\t\t}\n\t}\n}\n\nexport const VOICE_KEY_HOLD_THRESHOLD = 500;\n\nasync function startVoiceChatWithHoldMode(id: string, accessor: ServicesAccessor, target: 'view' | 'inline' | 'quick' | 'focused', context?: IChatExecuteActionContext): Promise<void> {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst keybindingService = accessor.get(IKeybindingService);\n\n\tconst holdMode = keybindingService.enableKeybindingHoldMode(id);\n\n\tconst controller = await VoiceChatSessionControllerFactory.create(accessor, target);\n\tif (!controller) {\n\t\treturn;\n\t}\n\n\tconst session = await VoiceChatSessions.getInstance(instantiationService).start(controller, context);\n\n\tlet acceptVoice = false;\n\tconst handle = disposableTimeout(() => {\n\t\tacceptVoice = true;\n\t\tsession?.setTimeoutDisabled(true); // disable accept on timeout when hold mode runs for VOICE_KEY_HOLD_THRESHOLD\n\t}, VOICE_KEY_HOLD_THRESHOLD);\n\tawait holdMode;\n\thandle.dispose();\n\n\tif (acceptVoice) {\n\t\tsession.accept();\n\t}\n}\n\nclass VoiceChatWithHoldModeAction extends Action2 {\n\n\tconstructor(desc: Readonly<IAction2Options>, private readonly target: 'view' | 'inline' | 'quick') {\n\t\tsuper(desc);\n\t}\n\n\trun(accessor: ServicesAccessor, context?: IChatExecuteActionContext): Promise<void> {\n\t\treturn startVoiceChatWithHoldMode(this.desc.id, accessor, this.target, context);\n\t}\n}\n\nexport class VoiceChatInChatViewAction extends VoiceChatWithHoldModeAction {\n\n\tstatic readonly ID = 'workbench.action.chat.voiceChatInChatView';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: VoiceChatInChatViewAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.voiceChatInView.label', \"Voice Chat in Chat View\"),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCanVoiceChat,\n\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate() // disable when a chat request is in progress\n\t\t\t),\n\t\t\tf1: true\n\t\t}, 'view');\n\t}\n}\n\nexport class HoldToVoiceChatInChatViewAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.chat.holdToVoiceChatInChatView';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: HoldToVoiceChatInChatViewAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.holdToVoiceChatInChatView.label', \"Hold to Voice Chat in Chat View\"),\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate(), \t// disable when a chat request is in progress\n\t\t\t\t\tFocusInChatInput?.negate(),\t\t\t\t\t// when already in chat input, disable this action and prefer to start voice chat directly\n\t\t\t\t\tEditorContextKeys.focus.negate(), \t\t\t// do not steal the inline-chat keybinding\n\t\t\t\t\tNOTEBOOK_EDITOR_FOCUSED.negate()\t\t\t// do not steal the notebook keybinding\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyI\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor, context?: IChatExecuteActionContext): Promise<void> {\n\n\t\t// The intent of this action is to provide 2 modes to align with what `Ctrlcmd+I` in inline chat:\n\t\t// - if the user press and holds, we start voice chat in the chat view\n\t\t// - if the user press and releases quickly enough, we just open the chat view without voice chat\n\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\n\t\tconst holdMode = keybindingService.enableKeybindingHoldMode(HoldToVoiceChatInChatViewAction.ID);\n\n\t\tlet session: IVoiceChatSession | undefined;\n\t\tconst handle = disposableTimeout(async () => {\n\t\t\tconst controller = await VoiceChatSessionControllerFactory.create(accessor, 'view');\n\t\t\tif (controller) {\n\t\t\t\tsession = await VoiceChatSessions.getInstance(instantiationService).start(controller, context);\n\t\t\t\tsession.setTimeoutDisabled(true);\n\t\t\t}\n\t\t}, VOICE_KEY_HOLD_THRESHOLD);\n\n\t\t(await showChatView(viewsService))?.focusInput();\n\n\t\tawait holdMode;\n\t\thandle.dispose();\n\n\t\tif (session) {\n\t\t\tsession.accept();\n\t\t}\n\t}\n}\n\nexport class InlineVoiceChatAction extends VoiceChatWithHoldModeAction {\n\n\tstatic readonly ID = 'workbench.action.chat.inlineVoiceChat';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: InlineVoiceChatAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.inlineVoiceChat', \"Inline Voice Chat\"),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCanVoiceChat,\n\t\t\t\tActiveEditorContext,\n\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate() // disable when a chat request is in progress\n\t\t\t),\n\t\t\tf1: true\n\t\t}, 'inline');\n\t}\n}\n\nexport class QuickVoiceChatAction extends VoiceChatWithHoldModeAction {\n\n\tstatic readonly ID = 'workbench.action.chat.quickVoiceChat';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: QuickVoiceChatAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.quickVoiceChat.label', \"Quick Voice Chat\"),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCanVoiceChat,\n\t\t\t\tCONTEXT_CHAT_REQUEST_IN_PROGRESS.negate() // disable when a chat request is in progress\n\t\t\t),\n\t\t\tf1: true\n\t\t}, 'quick');\n\t}\n}\n\nexport class StartVoiceChatAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.chat.startVoiceChat';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StartVoiceChatAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.startVoiceChat.label', \"Start Voice Chat\"),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tFocusInChatInput,\t\t\t\t\t// scope this action to chat input fields only\n\t\t\t\t\tEditorContextKeys.focus.negate(), \t// do not steal the editor inline-chat keybinding\n\t\t\t\t\tNOTEBOOK_EDITOR_FOCUSED.negate()\t// do not steal the notebook inline-chat keybinding\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyI\n\t\t\t},\n\t\t\ticon: Codicon.mic,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCanVoiceChat,\n\t\t\t\tScopedVoiceChatGettingReady.negate(),\t// disable when voice chat is getting ready\n\t\t\t\tAnyChatRequestInProgress?.negate(),\t\t// disable when any chat request is in progress\n\t\t\t\tSpeechToTextInProgress.negate()\t\t\t// disable when speech to text is in progress\n\t\t\t),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tHasSpeechProvider,\n\t\t\t\t\tScopedChatSynthesisInProgress.negate(),\t// hide when text to speech is in progress\n\t\t\t\t\tAnyScopedVoiceChatInProgress?.negate(),\t// hide when voice chat is in progress\n\t\t\t\t),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: -1\n\t\t\t}, {\n\t\t\t\tid: TerminalChatExecute,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tHasSpeechProvider,\n\t\t\t\t\tScopedChatSynthesisInProgress.negate(),\t// hide when text to speech is in progress\n\t\t\t\t\tAnyScopedVoiceChatInProgress?.negate(),\t// hide when voice chat is in progress\n\t\t\t\t),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: -1\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, context?: IChatExecuteActionContext): Promise<void> {\n\t\tconst widget = context?.widget;\n\t\tif (widget) {\n\t\t\t// if we already get a context when the action is executed\n\t\t\t// from a toolbar within the chat widget, then make sure\n\t\t\t// to move focus into the input field so that the controller\n\t\t\t// is properly retrieved\n\t\t\twidget.focusInput();\n\t\t}\n\n\t\treturn startVoiceChatWithHoldMode(this.desc.id, accessor, 'focused', context);\n\t}\n}\n\nexport class StopListeningAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.chat.stopListening';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopListeningAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.stopListening.label', \"Stop Listening\"),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 100,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\twhen: AnyScopedVoiceChatInProgress\n\t\t\t},\n\t\t\ticon: spinningLoading,\n\t\t\tprecondition: GlobalVoiceChatInProgress, // need global context here because of `f1: true`\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\twhen: AnyScopedVoiceChatInProgress,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: -1\n\t\t\t}, {\n\t\t\t\tid: TerminalChatExecute,\n\t\t\t\twhen: AnyScopedVoiceChatInProgress,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: -1\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tVoiceChatSessions.getInstance(accessor.get(IInstantiationService)).stop();\n\t}\n}\n\nexport class StopListeningAndSubmitAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.chat.stopListeningAndSubmit';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopListeningAndSubmitAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.stopListeningAndSubmit.label', \"Stop Listening and Submit\"),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tFocusInChatInput,\n\t\t\t\t\tAnyScopedVoiceChatInProgress\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyI\n\t\t\t},\n\t\t\tprecondition: GlobalVoiceChatInProgress // need global context here because of `f1: true`\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tVoiceChatSessions.getInstance(accessor.get(IInstantiationService)).accept();\n\t}\n}\n\n//#endregion\n\n//#region Text to Speech\n\nconst ScopedChatSynthesisInProgress = new RawContextKey<boolean>('scopedChatSynthesisInProgress', false, { type: 'boolean', description: localize('scopedChatSynthesisInProgress', \"Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.\") });\n\ninterface IChatSynthesizerSessionController {\n\n\treadonly onDidHideChat: Event<unknown>;\n\n\treadonly contextKeyService: IContextKeyService;\n\treadonly response: IChatResponseModel;\n}\n\nclass ChatSynthesizerSessionController {\n\n\tstatic create(accessor: ServicesAccessor, context: IVoiceChatSessionController | 'focused', response: IChatResponseModel): IChatSynthesizerSessionController {\n\t\tif (context === 'focused') {\n\t\t\treturn ChatSynthesizerSessionController.doCreateForFocusedChat(accessor, response);\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tonDidHideChat: context.onDidHideInput,\n\t\t\t\tcontextKeyService: context.scopedContextKeyService,\n\t\t\t\tresponse\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate static doCreateForFocusedChat(accessor: ServicesAccessor, response: IChatResponseModel): IChatSynthesizerSessionController {\n\t\tconst chatWidgetService = accessor.get(IChatWidgetService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tconst terminalService = accessor.get(ITerminalService);\n\n\t\t// 1.) probe terminal chat which is not part of chat widget service\n\t\tconst activeInstance = terminalService.activeInstance;\n\t\tif (activeInstance) {\n\t\t\tconst terminalChat = TerminalChatController.activeChatWidget || TerminalChatController.get(activeInstance);\n\t\t\tif (terminalChat?.hasFocus()) {\n\t\t\t\treturn {\n\t\t\t\t\tonDidHideChat: terminalChat.onDidHide,\n\t\t\t\t\tcontextKeyService: terminalChat.scopedContextKeyService,\n\t\t\t\t\tresponse\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// 2.) otherwise go via chat widget service\n\t\tlet chatWidget = chatWidgetService.getWidgetBySessionId(response.session.sessionId);\n\t\tif (chatWidget?.location === ChatAgentLocation.Editor) {\n\t\t\t// TODO@bpasero workaround for https://github.com/microsoft/vscode/issues/212785\n\t\t\tchatWidget = chatWidgetService.lastFocusedWidget;\n\t\t}\n\n\t\treturn {\n\t\t\tonDidHideChat: chatWidget?.onDidHide ?? Event.None,\n\t\t\tcontextKeyService: chatWidget?.scopedContextKeyService ?? contextKeyService,\n\t\t\tresponse\n\t\t};\n\t}\n}\n\nclass ChatSynthesizerSessions {\n\n\tprivate static instance: ChatSynthesizerSessions | undefined = undefined;\n\tstatic getInstance(instantiationService: IInstantiationService): ChatSynthesizerSessions {\n\t\tif (!ChatSynthesizerSessions.instance) {\n\t\t\tChatSynthesizerSessions.instance = instantiationService.createInstance(ChatSynthesizerSessions);\n\t\t}\n\n\t\treturn ChatSynthesizerSessions.instance;\n\t}\n\n\tprivate activeSession: CancellationTokenSource | undefined = undefined;\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) { }\n\n\tasync start(controller: IChatSynthesizerSessionController): Promise<void> {\n\n\t\t// Stop running text-to-speech or speech-to-text sessions in chats\n\t\tthis.stop();\n\t\tVoiceChatSessions.getInstance(this.instantiationService).stop();\n\n\t\tconst activeSession = this.activeSession = new CancellationTokenSource();\n\n\t\tconst disposables = new DisposableStore();\n\t\tactiveSession.token.onCancellationRequested(() => disposables.dispose());\n\n\t\tconst session = await this.speechService.createTextToSpeechSession(activeSession.token, 'chat');\n\n\t\tif (activeSession.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tdisposables.add(controller.onDidHideChat(() => this.stop()));\n\n\t\tconst scopedChatToSpeechInProgress = ScopedChatSynthesisInProgress.bindTo(controller.contextKeyService);\n\t\tdisposables.add(toDisposable(() => scopedChatToSpeechInProgress.reset()));\n\n\t\tdisposables.add(session.onDidChange(e => {\n\t\t\tswitch (e.status) {\n\t\t\t\tcase TextToSpeechStatus.Started:\n\t\t\t\t\tscopedChatToSpeechInProgress.set(true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextToSpeechStatus.Stopped:\n\t\t\t\t\tscopedChatToSpeechInProgress.reset();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\tfor await (const chunk of this.nextChatResponseChunk(controller.response, activeSession.token)) {\n\t\t\tif (activeSession.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait raceCancellation(session.synthesize(chunk), activeSession.token);\n\t\t}\n\t}\n\n\tprivate async *nextChatResponseChunk(response: IChatResponseModel, token: CancellationToken): AsyncIterable<string> {\n\t\tlet totalOffset = 0;\n\t\tlet complete = false;\n\t\tdo {\n\t\t\tconst responseLength = response.response.toString().length;\n\t\t\tconst { chunk, offset } = this.parseNextChatResponseChunk(response, totalOffset);\n\t\t\ttotalOffset = offset;\n\t\t\tcomplete = response.isComplete;\n\n\t\t\tif (chunk) {\n\t\t\t\tyield chunk;\n\t\t\t}\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!complete && responseLength === response.response.toString().length) {\n\t\t\t\tawait raceCancellation(Event.toPromise(response.onDidChange), token); // wait for the response to change\n\t\t\t}\n\t\t} while (!token.isCancellationRequested && !complete);\n\t}\n\n\tprivate parseNextChatResponseChunk(response: IChatResponseModel, offset: number): { readonly chunk: string | undefined; readonly offset: number } {\n\t\tlet chunk: string | undefined = undefined;\n\n\t\tconst text = response.response.toString();\n\n\t\tif (response.isComplete) {\n\t\t\tchunk = text.substring(offset);\n\t\t\toffset = text.length + 1;\n\t\t} else {\n\t\t\tconst res = parseNextChatResponseChunk(text, offset);\n\t\t\tchunk = res.chunk;\n\t\t\toffset = res.offset;\n\t\t}\n\n\t\treturn {\n\t\t\tchunk: chunk ? renderStringAsPlaintext({ value: chunk }) : chunk, // convert markdown to plain text\n\t\t\toffset\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.activeSession?.dispose(true);\n\t\tthis.activeSession = undefined;\n\t}\n}\n\nconst sentenceDelimiter = ['.', '!', '?', ':'];\nconst lineDelimiter = '\\n';\nconst wordDelimiter = ' ';\n\nexport function parseNextChatResponseChunk(text: string, offset: number): { readonly chunk: string | undefined; readonly offset: number } {\n\tlet chunk: string | undefined = undefined;\n\n\tfor (let i = text.length - 1; i >= offset; i--) { // going from end to start to produce largest chunks\n\t\tconst cur = text[i];\n\t\tconst next = text[i + 1];\n\t\tif (\n\t\t\tsentenceDelimiter.includes(cur) && next === wordDelimiter ||\t// end of sentence\n\t\t\tlineDelimiter === cur\t\t\t\t\t\t\t\t\t\t\t// end of line\n\t\t) {\n\t\t\tchunk = text.substring(offset, i + 1).trim();\n\t\t\toffset = i + 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn { chunk, offset };\n}\n\nexport class ReadChatResponseAloud extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.chat.readChatResponseAloud',\n\t\t\ttitle: localize2('workbench.action.chat.readChatResponseAloud', \"Read Aloud\"),\n\t\t\ticon: Codicon.unmute,\n\t\t\tprecondition: CanVoiceChat,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ChatMessageTitle,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\tCONTEXT_RESPONSE,\t\t\t\t\t\t// only for responses\n\t\t\t\t\tScopedChatSynthesisInProgress.negate(),\t// but not when already in progress\n\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate()\t\t// and not when response is filtered\n\t\t\t\t),\n\t\t\t\tgroup: 'navigation'\n\t\t\t}, {\n\t\t\t\tid: MENU_INLINE_CHAT_WIDGET_SECONDARY,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tCanVoiceChat,\n\t\t\t\t\tCONTEXT_RESPONSE,\t\t\t\t\t\t// only for responses\n\t\t\t\t\tScopedChatSynthesisInProgress.negate(),\t// but not when already in progress\n\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate()\t\t// and not when response is filtered\n\t\t\t\t),\n\t\t\t\tgroup: 'navigation'\n\t\t\t}]\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, ...args: any[]) {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\n\t\tconst response = args[0];\n\t\tif (!isResponseVM(response)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = ChatSynthesizerSessionController.create(accessor, 'focused', response.model);\n\t\tChatSynthesizerSessions.getInstance(instantiationService).start(controller);\n\t}\n}\n\nexport class StopReadAloud extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.speech.stopReadAloud';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopReadAloud.ID,\n\t\t\ticon: syncing,\n\t\t\ttitle: localize2('workbench.action.speech.stopReadAloud', \"Stop Reading Aloud\"),\n\t\t\tf1: true,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tprecondition: GlobalTextToSpeechInProgress, // need global context here because of `f1: true`\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 100,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\twhen: ScopedChatSynthesisInProgress\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\t\twhen: ScopedChatSynthesisInProgress,\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\torder: -1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: TerminalChatExecute,\n\t\t\t\t\twhen: ScopedChatSynthesisInProgress,\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\torder: -1\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tChatSynthesizerSessions.getInstance(accessor.get(IInstantiationService)).stop();\n\t}\n}\n\nexport class StopReadChatItemAloud extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.chat.stopReadChatItemAloud';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopReadChatItemAloud.ID,\n\t\t\ticon: Codicon.mute,\n\t\t\ttitle: localize2('workbench.action.chat.stopReadChatItemAloud', \"Stop Reading Aloud\"),\n\t\t\tprecondition: ScopedChatSynthesisInProgress,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 100,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ChatMessageTitle,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tScopedChatSynthesisInProgress,\t\t// only when in progress\n\t\t\t\t\t\tCONTEXT_RESPONSE,\t\t\t\t\t// only for responses\n\t\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate()\t// but not when response is filtered\n\t\t\t\t\t),\n\t\t\t\t\tgroup: 'navigation'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MENU_INLINE_CHAT_WIDGET_SECONDARY,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tScopedChatSynthesisInProgress,\t\t// only when in progress\n\t\t\t\t\t\tCONTEXT_RESPONSE,\t\t\t\t\t// only for responses\n\t\t\t\t\t\tCONTEXT_RESPONSE_FILTERED.negate()\t// but not when response is filtered\n\t\t\t\t\t),\n\t\t\t\t\tgroup: 'navigation'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, ...args: any[]) {\n\t\tChatSynthesizerSessions.getInstance(accessor.get(IInstantiationService)).stop();\n\t}\n}\n\n//#endregion\n\n//#region Keyword Recognition\n\nfunction supportsKeywordActivation(configurationService: IConfigurationService, speechService: ISpeechService, chatAgentService: IChatAgentService): boolean {\n\tif (!speechService.hasSpeechProvider || !chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)) {\n\t\treturn false;\n\t}\n\n\tconst value = configurationService.getValue(KEYWORD_ACTIVIATION_SETTING_ID);\n\n\treturn typeof value === 'string' && value !== KeywordActivationContribution.SETTINGS_VALUE.OFF;\n}\n\nexport class KeywordActivationContribution extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.keywordActivation';\n\n\tstatic SETTINGS_VALUE = {\n\t\tOFF: 'off',\n\t\tINLINE_CHAT: 'inlineChat',\n\t\tQUICK_CHAT: 'quickChat',\n\t\tVIEW_CHAT: 'chatInView',\n\t\tCHAT_IN_CONTEXT: 'chatInContext'\n\t};\n\n\tprivate activeSession: CancellationTokenSource | undefined = undefined;\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(instantiationService.createInstance(KeywordActivationStatusEntry));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(Event.runAndSubscribe(this.speechService.onDidChangeHasSpeechProvider, () => {\n\t\t\tthis.updateConfiguration();\n\t\t\tthis.handleKeywordActivation();\n\t\t}));\n\n\t\tconst onDidAddDefaultAgent = this._register(this.chatAgentService.onDidChangeAgents(() => {\n\t\t\tif (this.chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)) {\n\t\t\t\tthis.updateConfiguration();\n\t\t\t\tthis.handleKeywordActivation();\n\n\t\t\t\tonDidAddDefaultAgent.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.speechService.onDidStartSpeechToTextSession(() => this.handleKeywordActivation()));\n\t\tthis._register(this.speechService.onDidEndSpeechToTextSession(() => this.handleKeywordActivation()));\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(KEYWORD_ACTIVIATION_SETTING_ID)) {\n\t\t\t\tthis.handleKeywordActivation();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateConfiguration(): void {\n\t\tif (!this.speechService.hasSpeechProvider || !this.chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)) {\n\t\t\treturn; // these settings require a speech and chat provider\n\t\t}\n\n\t\tconst registry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\tregistry.registerConfiguration({\n\t\t\t...accessibilityConfigurationNodeBase,\n\t\t\tproperties: {\n\t\t\t\t[KEYWORD_ACTIVIATION_SETTING_ID]: {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'enum': [\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.OFF,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.VIEW_CHAT,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.QUICK_CHAT,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.INLINE_CHAT,\n\t\t\t\t\t\tKeywordActivationContribution.SETTINGS_VALUE.CHAT_IN_CONTEXT\n\t\t\t\t\t],\n\t\t\t\t\t'enumDescriptions': [\n\t\t\t\t\t\tlocalize('voice.keywordActivation.off', \"Keyword activation is disabled.\"),\n\t\t\t\t\t\tlocalize('voice.keywordActivation.chatInView', \"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the chat view.\"),\n\t\t\t\t\t\tlocalize('voice.keywordActivation.quickChat', \"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the quick chat.\"),\n\t\t\t\t\t\tlocalize('voice.keywordActivation.inlineChat', \"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor if possible.\"),\n\t\t\t\t\t\tlocalize('voice.keywordActivation.chatInContext', \"Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor or view depending on keyboard focus.\")\n\t\t\t\t\t],\n\t\t\t\t\t'description': localize('voice.keywordActivation', \"Controls whether the keyword phrase 'Hey Code' is recognized to start a voice chat session. Enabling this will start recording from the microphone but the audio is processed locally and never sent to a server.\"),\n\t\t\t\t\t'default': 'off',\n\t\t\t\t\t'tags': ['accessibility']\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handleKeywordActivation(): void {\n\t\tconst enabled =\n\t\t\tsupportsKeywordActivation(this.configurationService, this.speechService, this.chatAgentService) &&\n\t\t\t!this.speechService.hasActiveSpeechToTextSession;\n\t\tif (\n\t\t\t(enabled && this.activeSession) ||\n\t\t\t(!enabled && !this.activeSession)\n\t\t) {\n\t\t\treturn; // already running or stopped\n\t\t}\n\n\t\t// Start keyword activation\n\t\tif (enabled) {\n\t\t\tthis.enableKeywordActivation();\n\t\t}\n\n\t\t// Stop keyword activation\n\t\telse {\n\t\t\tthis.disableKeywordActivation();\n\t\t}\n\t}\n\n\tprivate async enableKeywordActivation(): Promise<void> {\n\t\tconst session = this.activeSession = new CancellationTokenSource();\n\t\tconst result = await this.speechService.recognizeKeyword(session.token);\n\t\tif (session.token.isCancellationRequested || session !== this.activeSession) {\n\t\t\treturn; // cancelled\n\t\t}\n\n\t\tthis.activeSession = undefined;\n\n\t\tif (result === KeywordRecognitionStatus.Recognized) {\n\t\t\tif (this.hostService.hasFocus) {\n\t\t\t\tthis.commandService.executeCommand(this.getKeywordCommand());\n\t\t\t}\n\n\t\t\t// Immediately start another keyboard activation session\n\t\t\t// because we cannot assume that the command we execute\n\t\t\t// will trigger a speech recognition session.\n\n\t\t\tthis.handleKeywordActivation();\n\t\t}\n\t}\n\n\tprivate getKeywordCommand(): string {\n\t\tconst setting = this.configurationService.getValue(KEYWORD_ACTIVIATION_SETTING_ID);\n\t\tswitch (setting) {\n\t\t\tcase KeywordActivationContribution.SETTINGS_VALUE.INLINE_CHAT:\n\t\t\t\treturn InlineVoiceChatAction.ID;\n\t\t\tcase KeywordActivationContribution.SETTINGS_VALUE.QUICK_CHAT:\n\t\t\t\treturn QuickVoiceChatAction.ID;\n\t\t\tcase KeywordActivationContribution.SETTINGS_VALUE.CHAT_IN_CONTEXT: {\n\t\t\t\tconst activeCodeEditor = getCodeEditor(this.editorService.activeTextEditorControl);\n\t\t\t\tif (activeCodeEditor?.hasWidgetFocus()) {\n\t\t\t\t\treturn InlineVoiceChatAction.ID;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn VoiceChatInChatViewAction.ID;\n\t\t}\n\t}\n\n\tprivate disableKeywordActivation(): void {\n\t\tthis.activeSession?.dispose(true);\n\t\tthis.activeSession = undefined;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.activeSession?.dispose();\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass KeywordActivationStatusEntry extends Disposable {\n\n\tprivate readonly entry = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tprivate static STATUS_NAME = localize('keywordActivation.status.name', \"Voice Keyword Activation\");\n\tprivate static STATUS_COMMAND = 'keywordActivation.status.command';\n\tprivate static STATUS_ACTIVE = localize('keywordActivation.status.active', \"Listening to 'Hey Code'...\");\n\tprivate static STATUS_INACTIVE = localize('keywordActivation.status.inactive', \"Waiting for voice chat to end...\");\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(CommandsRegistry.registerCommand(KeywordActivationStatusEntry.STATUS_COMMAND, () => this.commandService.executeCommand('workbench.action.openSettings', KEYWORD_ACTIVIATION_SETTING_ID)));\n\n\t\tthis.registerListeners();\n\t\tthis.updateStatusEntry();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.speechService.onDidStartKeywordRecognition(() => this.updateStatusEntry()));\n\t\tthis._register(this.speechService.onDidEndKeywordRecognition(() => this.updateStatusEntry()));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(KEYWORD_ACTIVIATION_SETTING_ID)) {\n\t\t\t\tthis.updateStatusEntry();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateStatusEntry(): void {\n\t\tconst visible = supportsKeywordActivation(this.configurationService, this.speechService, this.chatAgentService);\n\t\tif (visible) {\n\t\t\tif (!this.entry.value) {\n\t\t\t\tthis.createStatusEntry();\n\t\t\t}\n\n\t\t\tthis.updateStatusLabel();\n\t\t} else {\n\t\t\tthis.entry.clear();\n\t\t}\n\t}\n\n\tprivate createStatusEntry() {\n\t\tthis.entry.value = this.statusbarService.addEntry(this.getStatusEntryProperties(), 'status.voiceKeywordActivation', StatusbarAlignment.RIGHT, 103);\n\t}\n\n\tprivate getStatusEntryProperties(): IStatusbarEntry {\n\t\treturn {\n\t\t\tname: KeywordActivationStatusEntry.STATUS_NAME,\n\t\t\ttext: this.speechService.hasActiveKeywordRecognition ? '$(mic-filled)' : '$(mic)',\n\t\t\ttooltip: this.speechService.hasActiveKeywordRecognition ? KeywordActivationStatusEntry.STATUS_ACTIVE : KeywordActivationStatusEntry.STATUS_INACTIVE,\n\t\t\tariaLabel: this.speechService.hasActiveKeywordRecognition ? KeywordActivationStatusEntry.STATUS_ACTIVE : KeywordActivationStatusEntry.STATUS_INACTIVE,\n\t\t\tcommand: KeywordActivationStatusEntry.STATUS_COMMAND,\n\t\t\tkind: 'prominent',\n\t\t\tshowInAllWindows: true\n\t\t};\n\t}\n\n\tprivate updateStatusLabel(): void {\n\t\tthis.entry.value?.update(this.getStatusEntryProperties());\n\t}\n}\n\n//#endregion\n\n//#region Install Provider Actions\n\nconst InstallingSpeechProvider = new RawContextKey<boolean>('installingSpeechProvider', false, true);\n\nabstract class BaseInstallSpeechProviderAction extends Action2 {\n\n\tprivate static readonly SPEECH_EXTENSION_ID = 'ms-vscode.vscode-speech';\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tconst extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);\n\t\ttry {\n\t\t\tInstallingSpeechProvider.bindTo(contextKeyService).set(true);\n\t\t\tawait extensionsWorkbenchService.install(BaseInstallSpeechProviderAction.SPEECH_EXTENSION_ID, {\n\t\t\t\tjustification: this.getJustification(),\n\t\t\t\tenable: true\n\t\t\t}, ProgressLocation.Notification);\n\t\t} finally {\n\t\t\tInstallingSpeechProvider.bindTo(contextKeyService).reset();\n\t\t}\n\t}\n\n\tprotected abstract getJustification(): string;\n}\n\nexport class InstallSpeechProviderForVoiceChatAction extends BaseInstallSpeechProviderAction {\n\n\tstatic readonly ID = 'workbench.action.chat.installProviderForVoiceChat';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: InstallSpeechProviderForVoiceChatAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.installProviderForVoiceChat.label', \"Start Voice Chat\"),\n\t\t\ticon: Codicon.mic,\n\t\t\tprecondition: InstallingSpeechProvider.negate(),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ChatExecute,\n\t\t\t\twhen: HasSpeechProvider.negate(),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: -1\n\t\t\t}, {\n\t\t\t\tid: TerminalChatExecute,\n\t\t\t\twhen: HasSpeechProvider.negate(),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: -1\n\t\t\t}]\n\t\t});\n\t}\n\n\tprotected getJustification(): string {\n\t\treturn localize('installProviderForVoiceChat.justification', \"Microphone support requires this extension.\");\n\t}\n}\n\nexport class InstallSpeechProviderForSynthesizeChatAction extends BaseInstallSpeechProviderAction {\n\n\tstatic readonly ID = 'workbench.action.chat.installProviderForSynthesis';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: InstallSpeechProviderForSynthesizeChatAction.ID,\n\t\t\ttitle: localize2('workbench.action.chat.installProviderForSynthesis.label', \"Read Aloud\"),\n\t\t\ticon: Codicon.unmute,\n\t\t\tprecondition: InstallingSpeechProvider.negate(),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ChatMessageTitle,\n\t\t\t\twhen: HasSpeechProvider.negate(),\n\t\t\t\tgroup: 'navigation'\n\t\t\t}]\n\t\t});\n\t}\n\n\tprotected getJustification(): string {\n\t\treturn localize('installProviderForSynthesis.justification', \"Speaker support requires this extension.\");\n\t}\n}\n\n//#endregion\n\nregisterThemingParticipant((theme, collector) => {\n\tlet activeRecordingColor: Color | undefined;\n\tlet activeRecordingDimmedColor: Color | undefined;\n\tif (theme.type === ColorScheme.LIGHT || theme.type === ColorScheme.DARK) {\n\t\tactiveRecordingColor = theme.getColor(ACTIVITY_BAR_BADGE_BACKGROUND) ?? theme.getColor(focusBorder);\n\t\tactiveRecordingDimmedColor = activeRecordingColor?.transparent(0.38);\n\t} else {\n\t\tactiveRecordingColor = theme.getColor(contrastBorder);\n\t\tactiveRecordingDimmedColor = theme.getColor(contrastBorder);\n\t}\n\n\t// Show a \"microphone\" or \"pulse\" icon when speech-to-text or text-to-speech is in progress that glows via outline.\n\tcollector.addRule(`\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled),\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled) {\n\t\t\tcolor: ${activeRecordingColor};\n\t\t\toutline: 1px solid ${activeRecordingColor};\n\t\t\toutline-offset: -1px;\n\t\t\tanimation: pulseAnimation 1s infinite;\n\t\t\tborder-radius: 50%;\n\t\t}\n\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {\n\t\t\tposition: absolute;\n\t\t\toutline: 1px solid ${activeRecordingColor};\n\t\t\toutline-offset: 2px;\n\t\t\tborder-radius: 50%;\n\t\t\twidth: 16px;\n\t\t\theight: 16px;\n\t\t}\n\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::after,\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::after {\n\t\t\toutline: 2px solid ${activeRecordingColor};\n\t\t\toutline-offset: -1px;\n\t\t\tanimation: pulseAnimation 1500ms cubic-bezier(0.75, 0, 0.25, 1) infinite;\n\t\t}\n\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,\n\t\t.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {\n\t\t\tposition: absolute;\n\t\t\toutline: 1px solid ${activeRecordingColor};\n\t\t\toutline-offset: 2px;\n\t\t\tborder-radius: 50%;\n\t\t\twidth: 16px;\n\t\t\theight: 16px;\n\t\t}\n\n\t\t@keyframes pulseAnimation {\n\t\t\t0% {\n\t\t\t\toutline-width: 2px;\n\t\t\t}\n\t\t\t62% {\n\t\t\t\toutline-width: 5px;\n\t\t\t\toutline-color: ${activeRecordingDimmedColor};\n\t\t\t}\n\t\t\t100% {\n\t\t\t\toutline-width: 2px;\n\t\t\t}\n\t\t}\n\t`);\n});\n"],
  "mappings": "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",
  "names": ["VoiceChatSessionState"]
}
