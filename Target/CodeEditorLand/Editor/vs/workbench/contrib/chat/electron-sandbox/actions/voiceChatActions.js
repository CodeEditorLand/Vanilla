var We=Object.defineProperty;var Me=Object.getOwnPropertyDescriptor;var N=(s,e,t,i)=>{for(var o=i>1?void 0:i?Me(e,t):e,n=s.length-1,r;n>=0;n--)(r=s[n])&&(o=(i?r(e,t,o):r(o))||o);return i&&o&&We(e,t,o),o},d=(s,e)=>(t,i)=>e(t,i,s);import"./media/voiceChatActions.css";import{RunOnceScheduler as ne,disposableTimeout as re,raceCancellation as se}from"../../../../../base/common/async.js";import{CancellationTokenSource as $}from"../../../../../base/common/cancellation.js";import{Codicon as H}from"../../../../../base/common/codicons.js";import"../../../../../base/common/color.js";import{Event as Y}from"../../../../../base/common/event.js";import{KeyCode as E,KeyMod as j}from"../../../../../base/common/keyCodes.js";import{Disposable as ae,DisposableStore as ce,MutableDisposable as Ge,toDisposable as de}from"../../../../../base/common/lifecycle.js";import{isNumber as qe}from"../../../../../base/common/types.js";import{getCodeEditor as he}from"../../../../../editor/browser/editorBrowser.js";import{EditorContextKeys as pe}from"../../../../../editor/common/editorContextKeys.js";import{localize as u,localize2 as C}from"../../../../../nls.js";import{Action2 as y,MenuId as T}from"../../../../../platform/actions/common/actions.js";import{CommandsRegistry as Be,ICommandService as ue}from"../../../../../platform/commands/common/commands.js";import{IConfigurationService as Q}from"../../../../../platform/configuration/common/configuration.js";import{Extensions as Xe}from"../../../../../platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as p,IContextKeyService as le,RawContextKey as _}from"../../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as m}from"../../../../../platform/instantiation/common/instantiation.js";import{IKeybindingService as ve}from"../../../../../platform/keybinding/common/keybinding.js";import{KeybindingWeight as D}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{ProgressLocation as ze}from"../../../../../platform/progress/common/progress.js";import{Registry as $e}from"../../../../../platform/registry/common/platform.js";import{contrastBorder as Se,focusBorder as Ye}from"../../../../../platform/theme/common/colorRegistry.js";import{spinningLoading as je,syncing as Qe}from"../../../../../platform/theme/common/iconRegistry.js";import{ColorScheme as ge}from"../../../../../platform/theme/common/theme.js";import{registerThemingParticipant as Je}from"../../../../../platform/theme/common/themeService.js";import{ActiveEditorContext as Ze}from"../../../../common/contextkeys.js";import"../../../../common/contributions.js";import{ACTIVITY_BAR_BADGE_BACKGROUND as et}from"../../../../common/theme.js";import{AccessibilityVoiceSettingId as Ce,SpeechTimeoutDefault as tt,accessibilityConfigurationNodeBase as it}from"../../../accessibility/browser/accessibilityConfiguration.js";import{CHAT_CATEGORY as x}from"../../browser/actions/chatActions.js";import"../../browser/actions/chatExecuteActions.js";import{IChatWidgetService as Ie,IQuickChatService as ot,showChatView as fe}from"../../browser/chat.js";import{ChatAgentLocation as K,IChatAgentService as me}from"../../common/chatAgents.js";import{CONTEXT_CHAT_REQUEST_IN_PROGRESS as L,CONTEXT_IN_CHAT_INPUT as nt,CONTEXT_CHAT_ENABLED as rt,CONTEXT_RESPONSE as O,CONTEXT_RESPONSE_FILTERED as F}from"../../common/chatContextKeys.js";import{KEYWORD_ACTIVIATION_SETTING_ID as V}from"../../common/chatService.js";import{isResponseVM as st}from"../../common/chatViewModel.js";import{IVoiceChatService as at,VoiceChatInProgress as be}from"../../common/voiceChatService.js";import{IExtensionsWorkbenchService as ct}from"../../../extensions/common/extensions.js";import{InlineChatController as dt}from"../../../inlineChat/browser/inlineChatController.js";import{CTX_INLINE_CHAT_FOCUSED as ht,MENU_INLINE_CHAT_WIDGET_SECONDARY as ye}from"../../../inlineChat/common/inlineChat.js";import{NOTEBOOK_EDITOR_FOCUSED as Te}from"../../../notebook/common/notebookContextKeys.js";import{HasSpeechProvider as R,ISpeechService as J,KeywordRecognitionStatus as pt,SpeechToTextInProgress as ut,SpeechToTextStatus as U,TextToSpeechStatus as Ae,TextToSpeechInProgress as lt}from"../../../speech/common/speechService.js";import{ITerminalService as we}from"../../../terminal/browser/terminal.js";import{TerminalChatContextKeys as vt,TerminalChatController as W}from"../../../terminal/terminalContribExports.js";import{IEditorService as xe}from"../../../../services/editor/common/editorService.js";import{IHostService as St}from"../../../../services/host/browser/host.js";import{IWorkbenchLayoutService as gt,Parts as A}from"../../../../services/layout/browser/layoutService.js";import{IStatusbarService as Ct,StatusbarAlignment as It}from"../../../../services/statusbar/browser/statusbar.js";import{IViewsService as ke}from"../../../../services/views/common/viewsService.js";import"../../common/chatModel.js";import{IAccessibilityService as ft}from"../../../../../platform/accessibility/common/accessibility.js";import{renderStringAsPlaintext as mt}from"../../../../../base/browser/markdownRenderer.js";const bt=["view","inline","terminal","quick","editor"],M=T.for("terminalChatInput"),w=p.and(rt,R),Z=p.or(ht,nt),yt=p.or(L,vt.requestActive),Ee=new _("scopedVoiceChatGettingReady",!1,{type:"boolean",description:u("scopedVoiceChatGettingReady","True when getting ready for receiving voice input from the microphone for voice chat. This key is only defined scoped, per chat context.")}),De=new _("scopedVoiceChatInProgress",void 0,{type:"string",description:u("scopedVoiceChatInProgress","Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.")}),P=p.or(...bt.map(s=>De.isEqualTo(s)));var Tt=(i=>(i[i.Stopped=1]="Stopped",i[i.GettingReady=2]="GettingReady",i[i.Started=3]="Started",i))(Tt||{});class I{static async create(e,t){const i=e.get(Ie),o=e.get(ot),n=e.get(gt),r=e.get(xe),a=e.get(we),h=e.get(ke);switch(t){case"focused":return I.doCreateForFocusedChat(a,i,n)??I.create(e,"view");case"view":{const c=await fe(h);if(c)return I.doCreateForChatWidget("view",c);break}case"inline":{const c=he(r.activeTextEditorControl);if(c){const b=dt.get(c);if(b)return b.joinCurrentRun()||b.run(),I.doCreateForChatWidget("inline",b.chatWidget)}break}case"quick":return o.open(),I.create(e,"focused")}}static doCreateForFocusedChat(e,t,i){const o=e.activeInstance;if(o){const r=W.activeChatWidget||W.get(o);if(r?.hasFocus())return I.doCreateForTerminalChat(r)}const n=t.lastFocusedWidget;if(n?.hasInputFocus()){let r;return i.hasFocus(A.EDITOR_PART)?r=n.location===K.Panel?"editor":"inline":[A.SIDEBAR_PART,A.PANEL_PART,A.AUXILIARYBAR_PART,A.TITLEBAR_PART,A.STATUSBAR_PART,A.BANNER_PART,A.ACTIVITYBAR_PART].some(a=>i.hasFocus(a))?r="view":r="quick",I.doCreateForChatWidget(r,n)}}static createChatContextKeyController(e,t){const i=Ee.bindTo(e),o=De.bindTo(e);return n=>{switch(n){case 2:i.set(!0),o.reset();break;case 3:i.reset(),o.set(t);break;case 1:i.reset(),o.reset();break}}}static doCreateForChatWidget(e,t){return{context:e,scopedContextKeyService:t.scopedContextKeyService,onDidAcceptInput:t.onDidAcceptInput,onDidHideInput:t.onDidHide,focusInput:()=>t.focusInput(),acceptInput:()=>t.acceptInput(void 0,!0),updateInput:i=>t.setInput(i),getInput:()=>t.getInput(),setInputPlaceholder:i=>t.setInputPlaceholder(i),clearInputPlaceholder:()=>t.resetInputPlaceholder(),updateState:I.createChatContextKeyController(t.scopedContextKeyService,e)}}static doCreateForTerminalChat(e){const t="terminal";return{context:t,scopedContextKeyService:e.scopedContextKeyService,onDidAcceptInput:e.onDidAcceptInput,onDidHideInput:e.onDidHide,focusInput:()=>e.focus(),acceptInput:()=>e.acceptInput(!0),updateInput:i=>e.updateInput(i,!1),getInput:()=>e.getInput(),setInputPlaceholder:i=>e.setPlaceholder(i),clearInputPlaceholder:()=>e.resetPlaceholder(),updateState:I.createChatContextKeyController(e.scopedContextKeyService,t)}}}let l=class{constructor(e,t,i,o){this.voiceChatService=e;this.configurationService=t;this.instantiationService=i;this.accessibilityService=o}static instance=void 0;static getInstance(e){return l.instance||(l.instance=e.createInstance(l)),l.instance}currentVoiceChatSession=void 0;voiceChatSessionIds=0;async start(e,t){this.stop(),v.getInstance(this.instantiationService).stop();let i=!1;const o=++this.voiceChatSessionIds,n=this.currentVoiceChatSession={id:o,controller:e,disposables:new ce,setTimeoutDisabled:z=>{i=z},accept:()=>this.accept(o),stop:()=>this.stop(o,e.context)},r=new $;n.disposables.add(de(()=>r.dispose(!0))),n.disposables.add(e.onDidAcceptInput(()=>this.stop(o,e.context))),n.disposables.add(e.onDidHideInput(()=>this.stop(o,e.context))),e.focusInput(),e.updateState(2);const a=await this.voiceChatService.createVoiceChatSession(r.token,{usesAgents:e.context!=="inline",model:t?.widget?.viewModel?.model});let h=e.getInput(),c=this.configurationService.getValue(Ce.SpeechTimeout);(!qe(c)||c<0)&&(c=tt);const b=n.disposables.add(new ne(()=>this.accept(o),c));return n.disposables.add(a.onDidChange(({status:z,text:k,waitingForInput:Ue})=>{if(!r.token.isCancellationRequested)switch(z){case U.Started:this.onDidSpeechToTextSessionStart(e,n.disposables);break;case U.Recognizing:k&&(n.controller.updateInput(h?[h,k].join(" "):k),c>0&&t?.voice?.disableTimeout!==!0&&!i&&b.cancel());break;case U.Recognized:k&&(h=h?[h,k].join(" "):k,n.controller.updateInput(h),c>0&&t?.voice?.disableTimeout!==!0&&!Ue&&!i&&b.schedule());break;case U.Stopped:this.stop(n.id,e.context);break}})),n}onDidSpeechToTextSessionStart(e,t){e.updateState(3);let i=0;const o=()=>{i=(i+1)%4,e.setInputPlaceholder(`${u("listening","I'm listening")}${".".repeat(i)}`),n.schedule()},n=t.add(new ne(o,500));o()}stop(e=this.voiceChatSessionIds,t){!this.currentVoiceChatSession||this.voiceChatSessionIds!==e||t&&this.currentVoiceChatSession.controller.context!==t||(this.currentVoiceChatSession.controller.clearInputPlaceholder(),this.currentVoiceChatSession.controller.updateState(1),this.currentVoiceChatSession.disposables.dispose(),this.currentVoiceChatSession=void 0)}async accept(e=this.voiceChatSessionIds){if(!this.currentVoiceChatSession||this.voiceChatSessionIds!==e)return;const t=this.currentVoiceChatSession.controller,i=await t.acceptInput();if(!i)return;const o=this.configurationService.getValue(Ce.AutoSynthesize);if(o==="on"||o==="auto"&&!this.accessibilityService.isScreenReaderOptimized()){let n;t.context==="inline"?n="focused":n=t,v.getInstance(this.instantiationService).start(this.instantiationService.invokeFunction(r=>B.create(r,n,i)))}}};l=N([d(0,at),d(1,Q),d(2,m),d(3,ft)],l);const Ve=500;async function Re(s,e,t,i){const o=e.get(m),r=e.get(ve).enableKeybindingHoldMode(s),a=await I.create(e,t);if(!a)return;const h=await l.getInstance(o).start(a,i);let c=!1;const b=re(()=>{c=!0,h?.setTimeoutDisabled(!0)},Ve);await r,b.dispose(),c&&h.accept()}class ee extends y{constructor(t,i){super(t);this.target=i}run(t,i){return Re(this.desc.id,t,this.target,i)}}class ie extends ee{static ID="workbench.action.chat.voiceChatInChatView";constructor(){super({id:ie.ID,title:C("workbench.action.chat.voiceChatInView.label","Voice Chat in Chat View"),category:x,precondition:p.and(w,L.negate()),f1:!0},"view")}}class te extends y{static ID="workbench.action.chat.holdToVoiceChatInChatView";constructor(){super({id:te.ID,title:C("workbench.action.chat.holdToVoiceChatInChatView.label","Hold to Voice Chat in Chat View"),keybinding:{weight:D.WorkbenchContrib,when:p.and(w,L.negate(),Z?.negate(),pe.focus.negate(),Te.negate()),primary:j.CtrlCmd|E.KeyI}})}async run(e,t){const i=e.get(m),o=e.get(ve),n=e.get(ke),r=o.enableKeybindingHoldMode(te.ID);let a;const h=re(async()=>{const c=await I.create(e,"view");c&&(a=await l.getInstance(i).start(c,t),a.setTimeoutDisabled(!0))},Ve);(await fe(n))?.focusInput(),await r,h.dispose(),a&&a.accept()}}class q extends ee{static ID="workbench.action.chat.inlineVoiceChat";constructor(){super({id:q.ID,title:C("workbench.action.chat.inlineVoiceChat","Inline Voice Chat"),category:x,precondition:p.and(w,Ze,L.negate()),f1:!0},"inline")}}class oe extends ee{static ID="workbench.action.chat.quickVoiceChat";constructor(){super({id:oe.ID,title:C("workbench.action.chat.quickVoiceChat.label","Quick Voice Chat"),category:x,precondition:p.and(w,L.negate()),f1:!0},"quick")}}class Ne extends y{static ID="workbench.action.chat.startVoiceChat";constructor(){super({id:Ne.ID,title:C("workbench.action.chat.startVoiceChat.label","Start Voice Chat"),category:x,f1:!0,keybinding:{weight:D.WorkbenchContrib,when:p.and(Z,pe.focus.negate(),Te.negate()),primary:j.CtrlCmd|E.KeyI},icon:H.mic,precondition:p.and(w,Ee.negate(),yt?.negate(),ut.negate()),menu:[{id:T.ChatExecute,when:p.and(R,f.negate(),P?.negate()),group:"navigation",order:-1},{id:M,when:p.and(R,f.negate(),P?.negate()),group:"navigation",order:-1}]})}async run(e,t){const i=t?.widget;return i&&i.focusInput(),Re(this.desc.id,e,"focused",t)}}class He extends y{static ID="workbench.action.chat.stopListening";constructor(){super({id:He.ID,title:C("workbench.action.chat.stopListening.label","Stop Listening"),category:x,f1:!0,keybinding:{weight:D.WorkbenchContrib+100,primary:E.Escape,when:P},icon:je,precondition:be,menu:[{id:T.ChatExecute,when:P,group:"navigation",order:-1},{id:M,when:P,group:"navigation",order:-1}]})}async run(e){l.getInstance(e.get(m)).stop()}}class Ke extends y{static ID="workbench.action.chat.stopListeningAndSubmit";constructor(){super({id:Ke.ID,title:C("workbench.action.chat.stopListeningAndSubmit.label","Stop Listening and Submit"),category:x,f1:!0,keybinding:{weight:D.WorkbenchContrib,when:p.and(Z,P),primary:j.CtrlCmd|E.KeyI},precondition:be})}run(e){l.getInstance(e.get(m)).accept()}}const f=new _("scopedChatSynthesisInProgress",!1,{type:"boolean",description:u("scopedChatSynthesisInProgress","Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.")});class B{static create(e,t,i){return t==="focused"?B.doCreateForFocusedChat(e,i):{onDidHideChat:t.onDidHideInput,contextKeyService:t.scopedContextKeyService,response:i}}static doCreateForFocusedChat(e,t){const i=e.get(Ie),o=e.get(le),r=e.get(we).activeInstance;if(r){const h=W.activeChatWidget||W.get(r);if(h?.hasFocus())return{onDidHideChat:h.onDidHide,contextKeyService:h.scopedContextKeyService,response:t}}let a=i.getWidgetBySessionId(t.session.sessionId);return a?.location===K.Editor&&(a=i.lastFocusedWidget),{onDidHideChat:a?.onDidHide??Y.None,contextKeyService:a?.scopedContextKeyService??o,response:t}}}let v=class{constructor(e,t){this.speechService=e;this.instantiationService=t}static instance=void 0;static getInstance(e){return v.instance||(v.instance=e.createInstance(v)),v.instance}activeSession=void 0;async start(e){this.stop(),l.getInstance(this.instantiationService).stop();const t=this.activeSession=new $,i=new ce;t.token.onCancellationRequested(()=>i.dispose());const o=await this.speechService.createTextToSpeechSession(t.token,"chat");if(t.token.isCancellationRequested)return;i.add(e.onDidHideChat(()=>this.stop()));const n=f.bindTo(e.contextKeyService);i.add(de(()=>n.reset())),i.add(o.onDidChange(r=>{switch(r.status){case Ae.Started:n.set(!0);break;case Ae.Stopped:n.reset();break}}));for await(const r of this.nextChatResponseChunk(e.response,t.token)){if(t.token.isCancellationRequested)return;await se(o.synthesize(r),t.token)}}async*nextChatResponseChunk(e,t){let i=0,o=!1;do{const n=e.response.toString().length,{chunk:r,offset:a}=this.parseNextChatResponseChunk(e,i);if(i=a,o=e.isComplete,r&&(yield r),t.isCancellationRequested)return;!o&&n===e.response.toString().length&&await se(Y.toPromise(e.onDidChange),t)}while(!t.isCancellationRequested&&!o)}parseNextChatResponseChunk(e,t){let i;const o=e.response.toString();if(e.isComplete)i=o.substring(t),t=o.length+1;else{const n=kt(o,t);i=n.chunk,t=n.offset}return{chunk:i&&mt({value:i}),offset:t}}stop(){this.activeSession?.dispose(!0),this.activeSession=void 0}};v=N([d(0,J),d(1,m)],v);const At=[".","!","?",":"],wt=`
`,xt=" ";function kt(s,e){let t;for(let i=s.length-1;i>=e;i--){const o=s[i],n=s[i+1];if(At.includes(o)&&n===xt||wt===o){t=s.substring(e,i+1).trim(),e=i+1;break}}return{chunk:t,offset:e}}class Fi extends y{constructor(){super({id:"workbench.action.chat.readChatResponseAloud",title:C("workbench.action.chat.readChatResponseAloud","Read Aloud"),icon:H.unmute,precondition:w,menu:[{id:T.ChatMessageTitle,when:p.and(w,O,f.negate(),F.negate()),group:"navigation"},{id:ye,when:p.and(w,O,f.negate(),F.negate()),group:"navigation"}]})}run(e,...t){const i=e.get(m),o=t[0];if(!st(o))return;const n=B.create(e,"focused",o.model);v.getInstance(i).start(n)}}class Le extends y{static ID="workbench.action.speech.stopReadAloud";constructor(){super({id:Le.ID,icon:Qe,title:C("workbench.action.speech.stopReadAloud","Stop Reading Aloud"),f1:!0,category:x,precondition:lt,keybinding:{weight:D.WorkbenchContrib+100,primary:E.Escape,when:f},menu:[{id:T.ChatExecute,when:f,group:"navigation",order:-1},{id:M,when:f,group:"navigation",order:-1}]})}async run(e){v.getInstance(e.get(m)).stop()}}class _e extends y{static ID="workbench.action.chat.stopReadChatItemAloud";constructor(){super({id:_e.ID,icon:H.mute,title:C("workbench.action.chat.stopReadChatItemAloud","Stop Reading Aloud"),precondition:f,keybinding:{weight:D.WorkbenchContrib+100,primary:E.Escape},menu:[{id:T.ChatMessageTitle,when:p.and(f,O,F.negate()),group:"navigation"},{id:ye,when:p.and(f,O,F.negate()),group:"navigation"}]})}async run(e,...t){v.getInstance(e.get(m)).stop()}}function Pe(s,e,t){if(!e.hasSpeechProvider||!t.getDefaultAgent(K.Panel))return!1;const i=s.getValue(V);return typeof i=="string"&&i!==S.SETTINGS_VALUE.OFF}let S=class extends ae{constructor(t,i,o,n,r,a,h){super();this.speechService=t;this.configurationService=i;this.commandService=o;this.editorService=r;this.hostService=a;this.chatAgentService=h;this._register(n.createInstance(g)),this.registerListeners()}static ID="workbench.contrib.keywordActivation";static SETTINGS_VALUE={OFF:"off",INLINE_CHAT:"inlineChat",QUICK_CHAT:"quickChat",VIEW_CHAT:"chatInView",CHAT_IN_CONTEXT:"chatInContext"};activeSession=void 0;registerListeners(){this._register(Y.runAndSubscribe(this.speechService.onDidChangeHasSpeechProvider,()=>{this.updateConfiguration(),this.handleKeywordActivation()}));const t=this._register(this.chatAgentService.onDidChangeAgents(()=>{this.chatAgentService.getDefaultAgent(K.Panel)&&(this.updateConfiguration(),this.handleKeywordActivation(),t.dispose())}));this._register(this.speechService.onDidStartSpeechToTextSession(()=>this.handleKeywordActivation())),this._register(this.speechService.onDidEndSpeechToTextSession(()=>this.handleKeywordActivation())),this._register(this.configurationService.onDidChangeConfiguration(i=>{i.affectsConfiguration(V)&&this.handleKeywordActivation()}))}updateConfiguration(){if(!this.speechService.hasSpeechProvider||!this.chatAgentService.getDefaultAgent(K.Panel))return;$e.as(Xe.Configuration).registerConfiguration({...it,properties:{[V]:{type:"string",enum:[S.SETTINGS_VALUE.OFF,S.SETTINGS_VALUE.VIEW_CHAT,S.SETTINGS_VALUE.QUICK_CHAT,S.SETTINGS_VALUE.INLINE_CHAT,S.SETTINGS_VALUE.CHAT_IN_CONTEXT],enumDescriptions:[u("voice.keywordActivation.off","Keyword activation is disabled."),u("voice.keywordActivation.chatInView","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the chat view."),u("voice.keywordActivation.quickChat","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the quick chat."),u("voice.keywordActivation.inlineChat","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor if possible."),u("voice.keywordActivation.chatInContext","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor or view depending on keyboard focus.")],description:u("voice.keywordActivation","Controls whether the keyword phrase 'Hey Code' is recognized to start a voice chat session. Enabling this will start recording from the microphone but the audio is processed locally and never sent to a server."),default:"off",tags:["accessibility"]}}})}handleKeywordActivation(){const t=Pe(this.configurationService,this.speechService,this.chatAgentService)&&!this.speechService.hasActiveSpeechToTextSession;t&&this.activeSession||!t&&!this.activeSession||(t?this.enableKeywordActivation():this.disableKeywordActivation())}async enableKeywordActivation(){const t=this.activeSession=new $,i=await this.speechService.recognizeKeyword(t.token);t.token.isCancellationRequested||t!==this.activeSession||(this.activeSession=void 0,i===pt.Recognized&&(this.hostService.hasFocus&&this.commandService.executeCommand(this.getKeywordCommand()),this.handleKeywordActivation()))}getKeywordCommand(){switch(this.configurationService.getValue(V)){case S.SETTINGS_VALUE.INLINE_CHAT:return q.ID;case S.SETTINGS_VALUE.QUICK_CHAT:return oe.ID;case S.SETTINGS_VALUE.CHAT_IN_CONTEXT:if(he(this.editorService.activeTextEditorControl)?.hasWidgetFocus())return q.ID;default:return ie.ID}}disableKeywordActivation(){this.activeSession?.dispose(!0),this.activeSession=void 0}dispose(){this.activeSession?.dispose(),super.dispose()}};S=N([d(0,J),d(1,Q),d(2,ue),d(3,m),d(4,xe),d(5,St),d(6,me)],S);let g=class extends ae{constructor(t,i,o,n,r){super();this.speechService=t;this.statusbarService=i;this.commandService=o;this.configurationService=n;this.chatAgentService=r;this._register(Be.registerCommand(g.STATUS_COMMAND,()=>this.commandService.executeCommand("workbench.action.openSettings",V))),this.registerListeners(),this.updateStatusEntry()}entry=this._register(new Ge);static STATUS_NAME=u("keywordActivation.status.name","Voice Keyword Activation");static STATUS_COMMAND="keywordActivation.status.command";static STATUS_ACTIVE=u("keywordActivation.status.active","Listening to 'Hey Code'...");static STATUS_INACTIVE=u("keywordActivation.status.inactive","Waiting for voice chat to end...");registerListeners(){this._register(this.speechService.onDidStartKeywordRecognition(()=>this.updateStatusEntry())),this._register(this.speechService.onDidEndKeywordRecognition(()=>this.updateStatusEntry())),this._register(this.configurationService.onDidChangeConfiguration(t=>{t.affectsConfiguration(V)&&this.updateStatusEntry()}))}updateStatusEntry(){Pe(this.configurationService,this.speechService,this.chatAgentService)?(this.entry.value||this.createStatusEntry(),this.updateStatusLabel()):this.entry.clear()}createStatusEntry(){this.entry.value=this.statusbarService.addEntry(this.getStatusEntryProperties(),"status.voiceKeywordActivation",It.RIGHT,103)}getStatusEntryProperties(){return{name:g.STATUS_NAME,text:this.speechService.hasActiveKeywordRecognition?"$(mic-filled)":"$(mic)",tooltip:this.speechService.hasActiveKeywordRecognition?g.STATUS_ACTIVE:g.STATUS_INACTIVE,ariaLabel:this.speechService.hasActiveKeywordRecognition?g.STATUS_ACTIVE:g.STATUS_INACTIVE,command:g.STATUS_COMMAND,kind:"prominent",showInAllWindows:!0}}updateStatusLabel(){this.entry.value?.update(this.getStatusEntryProperties())}};g=N([d(0,J),d(1,Ct),d(2,ue),d(3,Q),d(4,me)],g);const G=new _("installingSpeechProvider",!1,!0);class X extends y{static SPEECH_EXTENSION_ID="ms-vscode.vscode-speech";async run(e){const t=e.get(le),i=e.get(ct);try{G.bindTo(t).set(!0),await i.install(X.SPEECH_EXTENSION_ID,{justification:this.getJustification(),enable:!0},ze.Notification)}finally{G.bindTo(t).reset()}}}class Oe extends X{static ID="workbench.action.chat.installProviderForVoiceChat";constructor(){super({id:Oe.ID,title:C("workbench.action.chat.installProviderForVoiceChat.label","Start Voice Chat"),icon:H.mic,precondition:G.negate(),menu:[{id:T.ChatExecute,when:R.negate(),group:"navigation",order:-1},{id:M,when:R.negate(),group:"navigation",order:-1}]})}getJustification(){return u("installProviderForVoiceChat.justification","Microphone support requires this extension.")}}class Fe extends X{static ID="workbench.action.chat.installProviderForSynthesis";constructor(){super({id:Fe.ID,title:C("workbench.action.chat.installProviderForSynthesis.label","Read Aloud"),icon:H.unmute,precondition:G.negate(),menu:[{id:T.ChatMessageTitle,when:R.negate(),group:"navigation"}]})}getJustification(){return u("installProviderForSynthesis.justification","Speaker support requires this extension.")}}Je((s,e)=>{let t,i;s.type===ge.LIGHT||s.type===ge.DARK?(t=s.getColor(et)??s.getColor(Ye),i=t?.transparent(.38)):(t=s.getColor(Se),i=s.getColor(Se)),e.addRule(`
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled),
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled) {
			color: ${t};
			outline: 1px solid ${t};
			outline-offset: -1px;
			animation: pulseAnimation 1s infinite;
			border-radius: 50%;
		}

		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {
			position: absolute;
			outline: 1px solid ${t};
			outline-offset: 2px;
			border-radius: 50%;
			width: 16px;
			height: 16px;
		}

		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::after,
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::after {
			outline: 2px solid ${t};
			outline-offset: -1px;
			animation: pulseAnimation 1500ms cubic-bezier(0.75, 0, 0.25, 1) infinite;
		}

		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {
			position: absolute;
			outline: 1px solid ${t};
			outline-offset: 2px;
			border-radius: 50%;
			width: 16px;
			height: 16px;
		}

		@keyframes pulseAnimation {
			0% {
				outline-width: 2px;
			}
			62% {
				outline-width: 5px;
				outline-color: ${i};
			}
			100% {
				outline-width: 2px;
			}
		}
	`)});export{te as HoldToVoiceChatInChatViewAction,q as InlineVoiceChatAction,Fe as InstallSpeechProviderForSynthesizeChatAction,Oe as InstallSpeechProviderForVoiceChatAction,S as KeywordActivationContribution,oe as QuickVoiceChatAction,Fi as ReadChatResponseAloud,Ne as StartVoiceChatAction,He as StopListeningAction,Ke as StopListeningAndSubmitAction,Le as StopReadAloud,_e as StopReadChatItemAloud,Ve as VOICE_KEY_HOLD_THRESHOLD,ie as VoiceChatInChatViewAction,kt as parseNextChatResponseChunk};
