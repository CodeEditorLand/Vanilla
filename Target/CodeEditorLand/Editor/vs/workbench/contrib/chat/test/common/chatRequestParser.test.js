import{mockObject as o}from"../../../../../base/test/common/mock.js";import{assertSnapshot as n}from"../../../../../base/test/common/snapshot.js";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../../base/test/common/utils.js";import{IContextKeyService as h}from"../../../../../platform/contextkey/common/contextkey.js";import{TestInstantiationService as C}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MockContextKeyService as b}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{ILogService as p,NullLogService as S}from"../../../../../platform/log/common/log.js";import{IStorageService as v}from"../../../../../platform/storage/common/storage.js";import{ChatAgentLocation as I,ChatAgentService as y,IChatAgentService as c}from"../../common/chatAgents.js";import{ChatRequestParser as r}from"../../common/chatRequestParser.js";import{IChatService as w}from"../../common/chatService.js";import{IChatSlashCommandService as l}from"../../common/chatSlashCommands.js";import{IChatVariablesService as x}from"../../common/chatVariables.js";import{ILanguageModelToolsService as f}from"../../common/languageModelToolsService.js";import{MockChatService as A}from"./mockChatService.js";import{MockLanguageModelToolsService as q}from"./mockLanguageModelToolsService.js";import{IExtensionService as R,nullExtensionDescription as V}from"../../../../services/extensions/common/extensions.js";import{TestExtensionService as k,TestStorageService as N}from"../../../../test/common/workbenchTestServices.js";suite("ChatRequestParser",()=>{const d=g();let t,a,i;setup(async()=>{t=d.add(new C),t.stub(v,d.add(new N)),t.stub(p,new S),t.stub(R,new k),t.stub(w,new A),t.stub(h,new b),t.stub(f,new q),t.stub(c,t.createInstance(y)),i=o()({}),i.getDynamicVariables.returns([]),t.stub(x,i)}),test("plain text",async()=>{a=t.createInstance(r);const e=a.parseChatRequest("1","test");await n(e)}),test("plain text with newlines",async()=>{a=t.createInstance(r);const s=a.parseChatRequest("1",`line 1
line 2\r
line 3`);await n(s)}),test("slash command",async()=>{const e=o()({});e.getCommands.returns([{command:"fix"}]),t.stub(l,e),a=t.createInstance(r);const u=a.parseChatRequest("1","/fix this");await n(u)}),test("invalid slash command",async()=>{const e=o()({});e.getCommands.returns([{command:"fix"}]),t.stub(l,e),a=t.createInstance(r);const u=a.parseChatRequest("1","/explain this");await n(u)}),test("multiple slash commands",async()=>{const e=o()({});e.getCommands.returns([{command:"fix"}]),t.stub(l,e),a=t.createInstance(r);const u=a.parseChatRequest("1","/fix /fix");await n(u)}),test("variables",async()=>{i.hasVariable.returns(!0),i.getVariable.returns({id:"copilot.selection"}),a=t.createInstance(r);const s=a.parseChatRequest("1","What does #selection mean?");await n(s)}),test("variable with question mark",async()=>{i.hasVariable.returns(!0),i.getVariable.returns({id:"copilot.selection"}),a=t.createInstance(r);const s=a.parseChatRequest("1","What is #selection?");await n(s)}),test("invalid variables",async()=>{i.hasVariable.returns(!1),a=t.createInstance(r);const s=a.parseChatRequest("1","What does #selection mean?");await n(s)});const m=e=>({id:"agent",name:"agent",extensionId:V.identifier,publisherDisplayName:"",extensionDisplayName:"",extensionPublisherId:"",locations:[I.Panel],metadata:{},slashCommands:e,disambiguation:[]});test("agent with subcommand after text",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),a=t.createInstance(r);const s=a.parseChatRequest("1","@agent Please do /subCommand thanks");await n(s)}),test("agents, subCommand",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),a=t.createInstance(r);const s=a.parseChatRequest("1","@agent /subCommand Please do thanks");await n(s)}),test("agent with question mark",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),a=t.createInstance(r);const s=a.parseChatRequest("1","@agent? Are you there");await n(s)}),test("agent and subcommand with leading whitespace",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),a=t.createInstance(r);const s=a.parseChatRequest("1",`    \r
	   @agent \r
	   /subCommand Thanks`);await n(s)}),test("agent and subcommand after newline",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),a=t.createInstance(r);const s=a.parseChatRequest("1",`    
@agent
/subCommand Thanks`);await n(s)}),test("agent not first",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),a=t.createInstance(r);const s=a.parseChatRequest("1","Hello Mr. @agent");await n(s)}),test("agents and variables and multiline",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),i.hasVariable.returns(!0),i.getVariable.onCall(0).returns({id:"copilot.selection"}),i.getVariable.onCall(1).returns({id:"copilot.debugConsole"}),a=t.createInstance(r);const s=a.parseChatRequest("1",`@agent /subCommand 
Please do with #selection
and #debugConsole`);await n(s)}),test("agents and variables and multiline, part2",async()=>{const e=o()({});e.getAgentsByName.returns([m([{name:"subCommand",description:""}])]),t.stub(c,e),i.hasVariable.returns(!0),i.getVariable.onCall(0).returns({id:"copilot.selection"}),i.getVariable.onCall(1).returns({id:"copilot.debugConsole"}),a=t.createInstance(r);const s=a.parseChatRequest("1",`@agent Please 
do /subCommand with #selection
and #debugConsole`);await n(s)})});
