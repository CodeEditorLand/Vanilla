{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/test/common/chatRequestParser.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MockObject, mockObject } from '../../../../../base/test/common/mock.js';\nimport { assertSnapshot } from '../../../../../base/test/common/snapshot.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { ILogService, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { ChatAgentLocation, ChatAgentService, IChatAgentCommand, IChatAgentData, IChatAgentService } from '../../common/chatAgents.js';\nimport { ChatRequestParser } from '../../common/chatRequestParser.js';\nimport { IChatService } from '../../common/chatService.js';\nimport { IChatSlashCommandService } from '../../common/chatSlashCommands.js';\nimport { IChatVariablesService } from '../../common/chatVariables.js';\nimport { ILanguageModelToolsService } from '../../common/languageModelToolsService.js';\nimport { MockChatService } from './mockChatService.js';\nimport { MockLanguageModelToolsService } from './mockLanguageModelToolsService.js';\nimport { IExtensionService, nullExtensionDescription } from '../../../../services/extensions/common/extensions.js';\nimport { TestExtensionService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('ChatRequestParser', () => {\n\tconst testDisposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\tlet parser: ChatRequestParser;\n\n\tlet varService: MockObject<IChatVariablesService>;\n\tsetup(async () => {\n\t\tinstantiationService = testDisposables.add(new TestInstantiationService());\n\t\tinstantiationService.stub(IStorageService, testDisposables.add(new TestStorageService()));\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tinstantiationService.stub(IExtensionService, new TestExtensionService());\n\t\tinstantiationService.stub(IChatService, new MockChatService());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(ILanguageModelToolsService, new MockLanguageModelToolsService());\n\t\tinstantiationService.stub(IChatAgentService, instantiationService.createInstance(ChatAgentService));\n\n\t\tvarService = mockObject<IChatVariablesService>()({});\n\t\tvarService.getDynamicVariables.returns([]);\n\t\tinstantiationService.stub(IChatVariablesService, varService as any);\n\t});\n\n\ttest('plain text', async () => {\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', 'test');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('plain text with newlines', async () => {\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst text = 'line 1\\nline 2\\r\\nline 3';\n\t\tconst result = parser.parseChatRequest('1', text);\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('slash command', async () => {\n\t\tconst slashCommandService = mockObject<IChatSlashCommandService>()({});\n\t\tslashCommandService.getCommands.returns([{ command: 'fix' }]);\n\t\tinstantiationService.stub(IChatSlashCommandService, slashCommandService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst text = '/fix this';\n\t\tconst result = parser.parseChatRequest('1', text);\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('invalid slash command', async () => {\n\t\tconst slashCommandService = mockObject<IChatSlashCommandService>()({});\n\t\tslashCommandService.getCommands.returns([{ command: 'fix' }]);\n\t\tinstantiationService.stub(IChatSlashCommandService, slashCommandService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst text = '/explain this';\n\t\tconst result = parser.parseChatRequest('1', text);\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('multiple slash commands', async () => {\n\t\tconst slashCommandService = mockObject<IChatSlashCommandService>()({});\n\t\tslashCommandService.getCommands.returns([{ command: 'fix' }]);\n\t\tinstantiationService.stub(IChatSlashCommandService, slashCommandService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst text = '/fix /fix';\n\t\tconst result = parser.parseChatRequest('1', text);\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('variables', async () => {\n\t\tvarService.hasVariable.returns(true);\n\t\tvarService.getVariable.returns({ id: 'copilot.selection' });\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst text = 'What does #selection mean?';\n\t\tconst result = parser.parseChatRequest('1', text);\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('variable with question mark', async () => {\n\t\tvarService.hasVariable.returns(true);\n\t\tvarService.getVariable.returns({ id: 'copilot.selection' });\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst text = 'What is #selection?';\n\t\tconst result = parser.parseChatRequest('1', text);\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('invalid variables', async () => {\n\t\tvarService.hasVariable.returns(false);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst text = 'What does #selection mean?';\n\t\tconst result = parser.parseChatRequest('1', text);\n\t\tawait assertSnapshot(result);\n\t});\n\n\tconst getAgentWithSlashCommands = (slashCommands: IChatAgentCommand[]) => {\n\t\treturn { id: 'agent', name: 'agent', extensionId: nullExtensionDescription.identifier, publisherDisplayName: '', extensionDisplayName: '', extensionPublisherId: '', locations: [ChatAgentLocation.Panel], metadata: {}, slashCommands, disambiguation: [], } satisfies IChatAgentData;\n\t};\n\n\ttest('agent with subcommand after text', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', '@agent Please do /subCommand thanks');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('agents, subCommand', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', '@agent /subCommand Please do thanks');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('agent with question mark', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', '@agent? Are you there');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('agent and subcommand with leading whitespace', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', '    \\r\\n\\t   @agent \\r\\n\\t   /subCommand Thanks');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('agent and subcommand after newline', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', '    \\n@agent\\n/subCommand Thanks');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('agent not first', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', 'Hello Mr. @agent');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('agents and variables and multiline', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tvarService.hasVariable.returns(true);\n\t\tvarService.getVariable.onCall(0).returns({ id: 'copilot.selection' });\n\t\tvarService.getVariable.onCall(1).returns({ id: 'copilot.debugConsole' });\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', '@agent /subCommand \\nPlease do with #selection\\nand #debugConsole');\n\t\tawait assertSnapshot(result);\n\t});\n\n\ttest('agents and variables and multiline, part2', async () => {\n\t\tconst agentsService = mockObject<IChatAgentService>()({});\n\t\tagentsService.getAgentsByName.returns([getAgentWithSlashCommands([{ name: 'subCommand', description: '' }])]);\n\t\tinstantiationService.stub(IChatAgentService, agentsService as any);\n\n\t\tvarService.hasVariable.returns(true);\n\t\tvarService.getVariable.onCall(0).returns({ id: 'copilot.selection' });\n\t\tvarService.getVariable.onCall(1).returns({ id: 'copilot.debugConsole' });\n\n\t\tparser = instantiationService.createInstance(ChatRequestParser);\n\t\tconst result = parser.parseChatRequest('1', '@agent Please \\ndo /subCommand with #selection\\nand #debugConsole');\n\t\tawait assertSnapshot(result);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
