{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/test/common/chatModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { MarkdownString } from '../../../../../base/common/htmlContent.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { assertSnapshot } from '../../../../../base/test/common/snapshot.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { OffsetRange } from '../../../../../editor/common/core/offsetRange.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { ILogService, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { ChatAgentLocation, ChatAgentService, IChatAgentService } from '../../common/chatAgents.js';\nimport { ChatModel, ISerializableChatData1, ISerializableChatData2, ISerializableChatData3, normalizeSerializableChatData, Response } from '../../common/chatModel.js';\nimport { ChatRequestTextPart } from '../../common/chatParserTypes.js';\nimport { IExtensionService } from '../../../../services/extensions/common/extensions.js';\nimport { TestExtensionService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('ChatModel', () => {\n\tconst testDisposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\tinstantiationService = testDisposables.add(new TestInstantiationService());\n\t\tinstantiationService.stub(IStorageService, testDisposables.add(new TestStorageService()));\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tinstantiationService.stub(IExtensionService, new TestExtensionService());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(IChatAgentService, instantiationService.createInstance(ChatAgentService));\n\t});\n\n\ttest('Waits for initialization', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Panel));\n\n\t\tlet hasInitialized = false;\n\t\tmodel.waitForInitialization().then(() => {\n\t\t\thasInitialized = true;\n\t\t});\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(hasInitialized, false);\n\n\t\tmodel.startInitialize();\n\t\tmodel.initialize(undefined);\n\t\tawait timeout(0);\n\t\tassert.strictEqual(hasInitialized, true);\n\t});\n\n\ttest('must call startInitialize before initialize', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Panel));\n\n\t\tlet hasInitialized = false;\n\t\tmodel.waitForInitialization().then(() => {\n\t\t\thasInitialized = true;\n\t\t});\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(hasInitialized, false);\n\n\t\tassert.throws(() => model.initialize(undefined));\n\t\tassert.strictEqual(hasInitialized, false);\n\t});\n\n\ttest('deinitialize/reinitialize', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Panel));\n\n\t\tlet hasInitialized = false;\n\t\tmodel.waitForInitialization().then(() => {\n\t\t\thasInitialized = true;\n\t\t});\n\n\t\tmodel.startInitialize();\n\t\tmodel.initialize(undefined);\n\t\tawait timeout(0);\n\t\tassert.strictEqual(hasInitialized, true);\n\n\t\tmodel.deinitialize();\n\t\tlet hasInitialized2 = false;\n\t\tmodel.waitForInitialization().then(() => {\n\t\t\thasInitialized2 = true;\n\t\t});\n\n\t\tmodel.startInitialize();\n\t\tmodel.initialize(undefined);\n\t\tawait timeout(0);\n\t\tassert.strictEqual(hasInitialized2, true);\n\t});\n\n\ttest('cannot initialize twice', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Panel));\n\n\t\tmodel.startInitialize();\n\t\tmodel.initialize(undefined);\n\t\tassert.throws(() => model.initialize(undefined));\n\t});\n\n\ttest('Initialization fails when model is disposed', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Panel));\n\t\tmodel.dispose();\n\n\t\tassert.throws(() => model.initialize(undefined));\n\t});\n\n\ttest('removeRequest', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Panel));\n\n\t\tmodel.startInitialize();\n\t\tmodel.initialize(undefined);\n\t\tconst text = 'hello';\n\t\tmodel.addRequest({ text, parts: [new ChatRequestTextPart(new OffsetRange(0, text.length), new Range(1, text.length, 1, text.length), text)] }, { variables: [] }, 0);\n\t\tconst requests = model.getRequests();\n\t\tassert.strictEqual(requests.length, 1);\n\n\t\tmodel.removeRequest(requests[0].id);\n\t\tassert.strictEqual(model.getRequests().length, 0);\n\t});\n\n\ttest('adoptRequest', async function () {\n\t\tconst model1 = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Editor));\n\t\tconst model2 = testDisposables.add(instantiationService.createInstance(ChatModel, undefined, ChatAgentLocation.Panel));\n\n\t\tmodel1.startInitialize();\n\t\tmodel1.initialize(undefined);\n\n\t\tmodel2.startInitialize();\n\t\tmodel2.initialize(undefined);\n\n\t\tconst text = 'hello';\n\t\tconst request1 = model1.addRequest({ text, parts: [new ChatRequestTextPart(new OffsetRange(0, text.length), new Range(1, text.length, 1, text.length), text)] }, { variables: [] }, 0);\n\n\t\tassert.strictEqual(model1.getRequests().length, 1);\n\t\tassert.strictEqual(model2.getRequests().length, 0);\n\t\tassert.ok(request1.session === model1);\n\t\tassert.ok(request1.response?.session === model1);\n\n\t\tmodel2.adoptRequest(request1);\n\n\t\tassert.strictEqual(model1.getRequests().length, 0);\n\t\tassert.strictEqual(model2.getRequests().length, 1);\n\t\tassert.ok(request1.session === model2);\n\t\tassert.ok(request1.response?.session === model2);\n\n\t\tmodel2.acceptResponseProgress(request1, { content: new MarkdownString('Hello'), kind: 'markdownContent' });\n\n\t\tassert.strictEqual(request1.response.response.toString(), 'Hello');\n\t});\n});\n\nsuite('Response', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('mergeable markdown', async () => {\n\t\tconst response = store.add(new Response([]));\n\t\tresponse.updateContent({ content: new MarkdownString('markdown1'), kind: 'markdownContent' });\n\t\tresponse.updateContent({ content: new MarkdownString('markdown2'), kind: 'markdownContent' });\n\t\tawait assertSnapshot(response.value);\n\n\t\tassert.strictEqual(response.toString(), 'markdown1markdown2');\n\t});\n\n\ttest('not mergeable markdown', async () => {\n\t\tconst response = store.add(new Response([]));\n\t\tconst md1 = new MarkdownString('markdown1');\n\t\tmd1.supportHtml = true;\n\t\tresponse.updateContent({ content: md1, kind: 'markdownContent' });\n\t\tresponse.updateContent({ content: new MarkdownString('markdown2'), kind: 'markdownContent' });\n\t\tawait assertSnapshot(response.value);\n\t});\n\n\ttest('inline reference', async () => {\n\t\tconst response = store.add(new Response([]));\n\t\tresponse.updateContent({ content: new MarkdownString('text before'), kind: 'markdownContent' });\n\t\tresponse.updateContent({ inlineReference: URI.parse('https://microsoft.com'), kind: 'inlineReference' });\n\t\tresponse.updateContent({ content: new MarkdownString('text after'), kind: 'markdownContent' });\n\t\tawait assertSnapshot(response.value);\n\t});\n});\n\nsuite('normalizeSerializableChatData', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('v1', () => {\n\t\tconst v1Data: ISerializableChatData1 = {\n\t\t\tcreationDate: Date.now(),\n\t\t\tinitialLocation: undefined,\n\t\t\tisImported: false,\n\t\t\trequesterAvatarIconUri: undefined,\n\t\t\trequesterUsername: 'me',\n\t\t\trequests: [],\n\t\t\tresponderAvatarIconUri: undefined,\n\t\t\tresponderUsername: 'bot',\n\t\t\tsessionId: 'session1',\n\t\t\twelcomeMessage: []\n\t\t};\n\n\t\tconst newData = normalizeSerializableChatData(v1Data);\n\t\tassert.strictEqual(newData.creationDate, v1Data.creationDate);\n\t\tassert.strictEqual(newData.lastMessageDate, v1Data.creationDate);\n\t\tassert.strictEqual(newData.version, 3);\n\t\tassert.ok('customTitle' in newData);\n\t});\n\n\ttest('v2', () => {\n\t\tconst v2Data: ISerializableChatData2 = {\n\t\t\tversion: 2,\n\t\t\tcreationDate: 100,\n\t\t\tlastMessageDate: Date.now(),\n\t\t\tinitialLocation: undefined,\n\t\t\tisImported: false,\n\t\t\trequesterAvatarIconUri: undefined,\n\t\t\trequesterUsername: 'me',\n\t\t\trequests: [],\n\t\t\tresponderAvatarIconUri: undefined,\n\t\t\tresponderUsername: 'bot',\n\t\t\tsessionId: 'session1',\n\t\t\twelcomeMessage: [],\n\t\t\tcomputedTitle: 'computed title'\n\t\t};\n\n\t\tconst newData = normalizeSerializableChatData(v2Data);\n\t\tassert.strictEqual(newData.version, 3);\n\t\tassert.strictEqual(newData.creationDate, v2Data.creationDate);\n\t\tassert.strictEqual(newData.lastMessageDate, v2Data.lastMessageDate);\n\t\tassert.strictEqual(newData.customTitle, v2Data.computedTitle);\n\t});\n\n\ttest('old bad data', () => {\n\t\tconst v1Data: ISerializableChatData1 = {\n\t\t\t// Testing the scenario where these are missing\n\t\t\tsessionId: undefined!,\n\t\t\tcreationDate: undefined!,\n\n\t\t\tinitialLocation: undefined,\n\t\t\tisImported: false,\n\t\t\trequesterAvatarIconUri: undefined,\n\t\t\trequesterUsername: 'me',\n\t\t\trequests: [],\n\t\t\tresponderAvatarIconUri: undefined,\n\t\t\tresponderUsername: 'bot',\n\t\t\twelcomeMessage: []\n\t\t};\n\n\t\tconst newData = normalizeSerializableChatData(v1Data);\n\t\tassert.strictEqual(newData.version, 3);\n\t\tassert.ok(newData.creationDate > 0);\n\t\tassert.ok(newData.lastMessageDate > 0);\n\t\tassert.ok(newData.sessionId);\n\t});\n\n\ttest('v3 with bug', () => {\n\t\tconst v3Data: ISerializableChatData3 = {\n\t\t\t// Test case where old data was wrongly normalized and these fields were missing\n\t\t\tcreationDate: undefined!,\n\t\t\tlastMessageDate: undefined!,\n\n\t\t\tversion: 3,\n\t\t\tinitialLocation: undefined,\n\t\t\tisImported: false,\n\t\t\trequesterAvatarIconUri: undefined,\n\t\t\trequesterUsername: 'me',\n\t\t\trequests: [],\n\t\t\tresponderAvatarIconUri: undefined,\n\t\t\tresponderUsername: 'bot',\n\t\t\tsessionId: 'session1',\n\t\t\twelcomeMessage: [],\n\t\t\tcustomTitle: 'computed title'\n\t\t};\n\n\t\tconst newData = normalizeSerializableChatData(v3Data);\n\t\tassert.strictEqual(newData.version, 3);\n\t\tassert.ok(newData.creationDate > 0);\n\t\tassert.ok(newData.lastMessageDate > 0);\n\t\tassert.ok(newData.sessionId);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
