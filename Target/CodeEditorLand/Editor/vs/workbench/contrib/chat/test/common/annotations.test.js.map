{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/test/common/annotations.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from '../../../../../base/common/htmlContent.js';\nimport { assertSnapshot } from '../../../../../base/test/common/snapshot.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IChatMarkdownContent } from '../../common/chatService.js';\nimport { annotateSpecialMarkdownContent, extractVulnerabilitiesFromText } from '../../common/annotations.js';\n\nfunction content(str: string): IChatMarkdownContent {\n\treturn { kind: 'markdownContent', content: new MarkdownString(str) };\n}\n\nsuite('Annotations', function () {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('extractVulnerabilitiesFromText', () => {\n\t\ttest('single line', async () => {\n\t\t\tconst before = 'some code ';\n\t\t\tconst vulnContent = 'content with vuln';\n\t\t\tconst after = ' after';\n\t\t\tconst annotatedResult = annotateSpecialMarkdownContent([content(before), { kind: 'markdownVuln', content: new MarkdownString(vulnContent), vulnerabilities: [{ title: 'title', description: 'vuln' }] }, content(after)]);\n\t\t\tawait assertSnapshot(annotatedResult);\n\n\t\t\tconst markdown = annotatedResult[0] as IChatMarkdownContent;\n\t\t\tconst result = extractVulnerabilitiesFromText(markdown.content.value);\n\t\t\tawait assertSnapshot(result);\n\t\t});\n\n\t\ttest('multiline', async () => {\n\t\t\tconst before = 'some code\\nover\\nmultiple lines ';\n\t\t\tconst vulnContent = 'content with vuln\\nand\\nnewlines';\n\t\t\tconst after = 'more code\\nwith newline';\n\t\t\tconst annotatedResult = annotateSpecialMarkdownContent([content(before), { kind: 'markdownVuln', content: new MarkdownString(vulnContent), vulnerabilities: [{ title: 'title', description: 'vuln' }] }, content(after)]);\n\t\t\tawait assertSnapshot(annotatedResult);\n\n\t\t\tconst markdown = annotatedResult[0] as IChatMarkdownContent;\n\t\t\tconst result = extractVulnerabilitiesFromText(markdown.content.value);\n\t\t\tawait assertSnapshot(result);\n\t\t});\n\n\t\ttest('multiple vulns', async () => {\n\t\t\tconst before = 'some code\\nover\\nmultiple lines ';\n\t\t\tconst vulnContent = 'content with vuln\\nand\\nnewlines';\n\t\t\tconst after = 'more code\\nwith newline';\n\t\t\tconst annotatedResult = annotateSpecialMarkdownContent([\n\t\t\t\tcontent(before),\n\t\t\t\t{ kind: 'markdownVuln', content: new MarkdownString(vulnContent), vulnerabilities: [{ title: 'title', description: 'vuln' }] },\n\t\t\t\tcontent(after),\n\t\t\t\t{ kind: 'markdownVuln', content: new MarkdownString(vulnContent), vulnerabilities: [{ title: 'title', description: 'vuln' }] },\n\t\t\t]);\n\t\t\tawait assertSnapshot(annotatedResult);\n\n\t\t\tconst markdown = annotatedResult[0] as IChatMarkdownContent;\n\t\t\tconst result = extractVulnerabilitiesFromText(markdown.content.value);\n\t\t\tawait assertSnapshot(result);\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,+CAA+C;AACxD,SAAS,4BAA4B;AACrC,SAAS,gCAAgC,sCAAsC;AAE/E,SAAS,QAAQ,KAAmC;AACnD,SAAO,EAAE,MAAM,mBAAmB,SAAS,IAAI,eAAe,GAAG,EAAE;AACpE;AAFS;AAIT,MAAM,eAAe,WAAY;AAChC,0CAAwC;AAExC,QAAM,kCAAkC,MAAM;AAC7C,SAAK,eAAe,YAAY;AAC/B,YAAM,SAAS;AACf,YAAM,cAAc;AACpB,YAAM,QAAQ;AACd,YAAM,kBAAkB,+BAA+B,CAAC,QAAQ,MAAM,GAAG,EAAE,MAAM,gBAAgB,SAAS,IAAI,eAAe,WAAW,GAAG,iBAAiB,CAAC,EAAE,OAAO,SAAS,aAAa,OAAO,CAAC,EAAE,GAAG,QAAQ,KAAK,CAAC,CAAC;AACxN,YAAM,eAAe,eAAe;AAEpC,YAAM,WAAW,gBAAgB,CAAC;AAClC,YAAM,SAAS,+BAA+B,SAAS,QAAQ,KAAK;AACpE,YAAM,eAAe,MAAM;AAAA,IAC5B,CAAC;AAED,SAAK,aAAa,YAAY;AAC7B,YAAM,SAAS;AACf,YAAM,cAAc;AACpB,YAAM,QAAQ;AACd,YAAM,kBAAkB,+BAA+B,CAAC,QAAQ,MAAM,GAAG,EAAE,MAAM,gBAAgB,SAAS,IAAI,eAAe,WAAW,GAAG,iBAAiB,CAAC,EAAE,OAAO,SAAS,aAAa,OAAO,CAAC,EAAE,GAAG,QAAQ,KAAK,CAAC,CAAC;AACxN,YAAM,eAAe,eAAe;AAEpC,YAAM,WAAW,gBAAgB,CAAC;AAClC,YAAM,SAAS,+BAA+B,SAAS,QAAQ,KAAK;AACpE,YAAM,eAAe,MAAM;AAAA,IAC5B,CAAC;AAED,SAAK,kBAAkB,YAAY;AAClC,YAAM,SAAS;AACf,YAAM,cAAc;AACpB,YAAM,QAAQ;AACd,YAAM,kBAAkB,+BAA+B;AAAA,QACtD,QAAQ,MAAM;AAAA,QACd,EAAE,MAAM,gBAAgB,SAAS,IAAI,eAAe,WAAW,GAAG,iBAAiB,CAAC,EAAE,OAAO,SAAS,aAAa,OAAO,CAAC,EAAE;AAAA,QAC7H,QAAQ,KAAK;AAAA,QACb,EAAE,MAAM,gBAAgB,SAAS,IAAI,eAAe,WAAW,GAAG,iBAAiB,CAAC,EAAE,OAAO,SAAS,aAAa,OAAO,CAAC,EAAE;AAAA,MAC9H,CAAC;AACD,YAAM,eAAe,eAAe;AAEpC,YAAM,WAAW,gBAAgB,CAAC;AAClC,YAAM,SAAS,+BAA+B,SAAS,QAAQ,KAAK;AACpE,YAAM,eAAe,MAAM;AAAA,IAC5B,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
