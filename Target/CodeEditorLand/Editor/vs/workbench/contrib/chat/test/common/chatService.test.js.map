{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/test/common/chatService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { assertSnapshot } from '../../../../../base/test/common/snapshot.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { ILogService, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { ChatAgentLocation, ChatAgentService, IChatAgent, IChatAgentImplementation, IChatAgentService } from '../../common/chatAgents.js';\nimport { ISerializableChatData } from '../../common/chatModel.js';\nimport { IChatFollowup, IChatService } from '../../common/chatService.js';\nimport { ChatService } from '../../common/chatServiceImpl.js';\nimport { ChatSlashCommandService, IChatSlashCommandService } from '../../common/chatSlashCommands.js';\nimport { IChatVariablesService } from '../../common/chatVariables.js';\nimport { MockChatService } from './mockChatService.js';\nimport { MockChatVariablesService } from './mockChatVariables.js';\nimport { IWorkbenchAssignmentService } from '../../../../services/assignment/common/assignmentService.js';\nimport { NullWorkbenchAssignmentService } from '../../../../services/assignment/test/common/nullAssignmentService.js';\nimport { IExtensionService, nullExtensionDescription } from '../../../../services/extensions/common/extensions.js';\nimport { IViewsService } from '../../../../services/views/common/viewsService.js';\nimport { TestContextService, TestExtensionService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nconst chatAgentWithUsedContextId = 'ChatProviderWithUsedContext';\nconst chatAgentWithUsedContext: IChatAgent = {\n\tid: chatAgentWithUsedContextId,\n\tname: chatAgentWithUsedContextId,\n\textensionId: nullExtensionDescription.identifier,\n\tpublisherDisplayName: '',\n\textensionPublisherId: '',\n\textensionDisplayName: '',\n\tlocations: [ChatAgentLocation.Panel],\n\tmetadata: {},\n\tslashCommands: [],\n\tdisambiguation: [],\n\tasync invoke(request, progress, history, token) {\n\t\tprogress({\n\t\t\tdocuments: [\n\t\t\t\t{\n\t\t\t\t\turi: URI.file('/test/path/to/file'),\n\t\t\t\t\tversion: 3,\n\t\t\t\t\tranges: [\n\t\t\t\t\t\tnew Range(1, 1, 2, 2)\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\tkind: 'usedContext'\n\t\t});\n\n\t\treturn { metadata: { metadataKey: 'value' } };\n\t},\n\tasync provideFollowups(sessionId, token) {\n\t\treturn [{ kind: 'reply', message: 'Something else', agentId: '', tooltip: 'a tooltip' } satisfies IChatFollowup];\n\t},\n};\n\nfunction getAgentData(id: string) {\n\treturn {\n\t\tname: id,\n\t\tid: id,\n\t\textensionId: nullExtensionDescription.identifier,\n\t\textensionPublisherId: '',\n\t\tpublisherDisplayName: '',\n\t\textensionDisplayName: '',\n\t\tlocations: [ChatAgentLocation.Panel],\n\t\tmetadata: {},\n\t\tslashCommands: [],\n\t\tdisambiguation: [],\n\t};\n}\n\nsuite('ChatService', () => {\n\tconst testDisposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet storageService: IStorageService;\n\tlet instantiationService: TestInstantiationService;\n\n\tlet chatAgentService: IChatAgentService;\n\n\tsetup(async () => {\n\t\tinstantiationService = testDisposables.add(new TestInstantiationService(new ServiceCollection(\n\t\t\t[IChatVariablesService, new MockChatVariablesService()],\n\t\t\t[IWorkbenchAssignmentService, new NullWorkbenchAssignmentService()]\n\t\t)));\n\t\tinstantiationService.stub(IStorageService, storageService = testDisposables.add(new TestStorageService()));\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(IExtensionService, new TestExtensionService());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(IViewsService, new TestExtensionService());\n\t\tinstantiationService.stub(IWorkspaceContextService, new TestContextService());\n\t\tinstantiationService.stub(IChatSlashCommandService, testDisposables.add(instantiationService.createInstance(ChatSlashCommandService)));\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(IChatService, new MockChatService());\n\n\t\tchatAgentService = instantiationService.createInstance(ChatAgentService);\n\t\tinstantiationService.stub(IChatAgentService, chatAgentService);\n\n\t\tconst agent: IChatAgentImplementation = {\n\t\t\tasync invoke(request, progress, history, token) {\n\t\t\t\treturn {};\n\t\t\t},\n\t\t};\n\t\ttestDisposables.add(chatAgentService.registerAgent('testAgent', { ...getAgentData('testAgent'), isDefault: true }));\n\t\ttestDisposables.add(chatAgentService.registerAgent(chatAgentWithUsedContextId, getAgentData(chatAgentWithUsedContextId)));\n\t\ttestDisposables.add(chatAgentService.registerAgentImplementation('testAgent', agent));\n\t\tchatAgentService.updateAgent('testAgent', { requester: { name: 'test' } });\n\t});\n\n\ttest('retrieveSession', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\tconst session1 = testDisposables.add(testService.startSession(ChatAgentLocation.Panel, CancellationToken.None));\n\t\tawait session1.waitForInitialization();\n\t\tsession1.addRequest({ parts: [], text: 'request 1' }, { variables: [] }, 0);\n\n\t\tconst session2 = testDisposables.add(testService.startSession(ChatAgentLocation.Panel, CancellationToken.None));\n\t\tawait session2.waitForInitialization();\n\t\tsession2.addRequest({ parts: [], text: 'request 2' }, { variables: [] }, 0);\n\n\t\tstorageService.flush();\n\t\tconst testService2 = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\tconst retrieved1 = testDisposables.add(testService2.getOrRestoreSession(session1.sessionId)!);\n\t\tawait retrieved1.waitForInitialization();\n\t\tconst retrieved2 = testDisposables.add(testService2.getOrRestoreSession(session2.sessionId)!);\n\t\tawait retrieved2.waitForInitialization();\n\t\tassert.deepStrictEqual(retrieved1.getRequests()[0]?.message.text, 'request 1');\n\t\tassert.deepStrictEqual(retrieved2.getRequests()[0]?.message.text, 'request 2');\n\t});\n\n\ttest('addCompleteRequest', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\n\t\tconst model = testDisposables.add(testService.startSession(ChatAgentLocation.Panel, CancellationToken.None));\n\t\tassert.strictEqual(model.getRequests().length, 0);\n\n\t\tawait testService.addCompleteRequest(model.sessionId, 'test request', undefined, 0, { message: 'test response' });\n\t\tassert.strictEqual(model.getRequests().length, 1);\n\t\tassert.ok(model.getRequests()[0].response);\n\t\tassert.strictEqual(model.getRequests()[0].response?.response.toString(), 'test response');\n\t});\n\n\ttest('sendRequest fails', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\n\t\tconst model = testDisposables.add(testService.startSession(ChatAgentLocation.Panel, CancellationToken.None));\n\t\tconst response = await testService.sendRequest(model.sessionId, `@${chatAgentWithUsedContextId} test request`);\n\t\tassert(response);\n\t\tawait response.responseCompletePromise;\n\n\t\tawait assertSnapshot(model.toExport());\n\t});\n\n\ttest('history', async () => {\n\t\tconst historyLengthAgent: IChatAgentImplementation = {\n\t\t\tasync invoke(request, progress, history, token) {\n\t\t\t\treturn {\n\t\t\t\t\tmetadata: { historyLength: history.length }\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\n\t\ttestDisposables.add(chatAgentService.registerAgent('defaultAgent', { ...getAgentData('defaultAgent'), isDefault: true }));\n\t\ttestDisposables.add(chatAgentService.registerAgent('agent2', getAgentData('agent2')));\n\t\ttestDisposables.add(chatAgentService.registerAgentImplementation('defaultAgent', historyLengthAgent));\n\t\ttestDisposables.add(chatAgentService.registerAgentImplementation('agent2', historyLengthAgent));\n\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\tconst model = testDisposables.add(testService.startSession(ChatAgentLocation.Panel, CancellationToken.None));\n\n\t\t// Send a request to default agent\n\t\tconst response = await testService.sendRequest(model.sessionId, `test request`, { agentId: 'defaultAgent' });\n\t\tassert(response);\n\t\tawait response.responseCompletePromise;\n\t\tassert.strictEqual(model.getRequests().length, 1);\n\t\tassert.strictEqual(model.getRequests()[0].response?.result?.metadata?.historyLength, 0);\n\n\t\t// Send a request to agent2- it can't see the default agent's message\n\t\tconst response2 = await testService.sendRequest(model.sessionId, `test request`, { agentId: 'agent2' });\n\t\tassert(response2);\n\t\tawait response2.responseCompletePromise;\n\t\tassert.strictEqual(model.getRequests().length, 2);\n\t\tassert.strictEqual(model.getRequests()[1].response?.result?.metadata?.historyLength, 0);\n\n\t\t// Send a request to defaultAgent - the default agent can see agent2's message\n\t\tconst response3 = await testService.sendRequest(model.sessionId, `test request`, { agentId: 'defaultAgent' });\n\t\tassert(response3);\n\t\tawait response3.responseCompletePromise;\n\t\tassert.strictEqual(model.getRequests().length, 3);\n\t\tassert.strictEqual(model.getRequests()[2].response?.result?.metadata?.historyLength, 2);\n\t});\n\n\ttest('can serialize', async () => {\n\t\ttestDisposables.add(chatAgentService.registerAgentImplementation(chatAgentWithUsedContextId, chatAgentWithUsedContext));\n\t\tchatAgentService.updateAgent(chatAgentWithUsedContextId, { requester: { name: 'test' } });\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\n\t\tconst model = testDisposables.add(testService.startSession(ChatAgentLocation.Panel, CancellationToken.None));\n\t\tassert.strictEqual(model.getRequests().length, 0);\n\n\t\tawait assertSnapshot(model.toExport());\n\n\t\tconst response = await testService.sendRequest(model.sessionId, `@${chatAgentWithUsedContextId} test request`);\n\t\tassert(response);\n\t\tawait response.responseCompletePromise;\n\t\tassert.strictEqual(model.getRequests().length, 1);\n\n\t\tconst response2 = await testService.sendRequest(model.sessionId, `test request 2`);\n\t\tassert(response2);\n\t\tawait response2.responseCompletePromise;\n\t\tassert.strictEqual(model.getRequests().length, 2);\n\n\t\tawait assertSnapshot(model.toExport());\n\t});\n\n\ttest('can deserialize', async () => {\n\t\tlet serializedChatData: ISerializableChatData;\n\t\ttestDisposables.add(chatAgentService.registerAgentImplementation(chatAgentWithUsedContextId, chatAgentWithUsedContext));\n\n\t\t// create the first service, send request, get response, and serialize the state\n\t\t{  // serapate block to not leak variables in outer scope\n\t\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\n\t\t\tconst chatModel1 = testDisposables.add(testService.startSession(ChatAgentLocation.Panel, CancellationToken.None));\n\t\t\tassert.strictEqual(chatModel1.getRequests().length, 0);\n\n\t\t\tconst response = await testService.sendRequest(chatModel1.sessionId, `@${chatAgentWithUsedContextId} test request`);\n\t\t\tassert(response);\n\n\t\t\tawait response.responseCompletePromise;\n\n\t\t\tserializedChatData = JSON.parse(JSON.stringify(chatModel1));\n\t\t}\n\n\t\t// try deserializing the state into a new service\n\n\t\tconst testService2 = testDisposables.add(instantiationService.createInstance(ChatService));\n\n\t\tconst chatModel2 = testService2.loadSessionFromContent(serializedChatData);\n\t\tassert(chatModel2);\n\n\t\tawait assertSnapshot(chatModel2.toExport());\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
