import{mockObject as c}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as l}from"../../../../../base/test/common/utils.js";import"../../../../../platform/contextkey/common/contextkey.js";import{ExtensionIdentifier as m}from"../../../../../platform/extensions/common/extensions.js";import{ChatAgentService as A}from"../../common/chatAgents.js";import e from"assert";const n="testAgent",r={id:n,name:"Test Agent",extensionDisplayName:"",extensionId:new m(""),extensionPublisherId:"",locations:[],metadata:{},slashCommands:[],disambiguation:[]};suite("ChatAgents",function(){const i=l();let t,a;setup(()=>{a=c()(),t=new A(a)}),test("registerAgent",async()=>{e.strictEqual(t.getAgents().length,0);const s=t.registerAgent(n,r);e.strictEqual(t.getAgents().length,1),e.strictEqual(t.getAgents()[0].id,n),e.throws(()=>t.registerAgent(n,r)),s.dispose(),e.strictEqual(t.getAgents().length,0)}),test("agent when clause",async()=>{e.strictEqual(t.getAgents().length,0),i.add(t.registerAgent(n,{...r,when:"myKey"})),e.strictEqual(t.getAgents().length,0),a.contextMatchesRules.returns(!0),e.strictEqual(t.getAgents().length,1)}),suite("registerAgentImplementation",function(){const s={invoke:async()=>({}),provideFollowups:async()=>[]};test("should register an agent implementation",()=>{i.add(t.registerAgent(n,r)),i.add(t.registerAgentImplementation(n,s));const g=t.getActivatedAgents();e.strictEqual(g.length,1),e.strictEqual(g[0].id,n)}),test("can dispose an agent implementation",()=>{i.add(t.registerAgent(n,r)),t.registerAgentImplementation(n,s).dispose();const o=t.getActivatedAgents();e.strictEqual(o.length,0)}),test("should throw error if agent does not exist",()=>{e.throws(()=>t.registerAgentImplementation("nonexistentAgent",s))}),test("should throw error if agent already has an implementation",()=>{i.add(t.registerAgent(n,r)),i.add(t.registerAgentImplementation(n,s)),e.throws(()=>t.registerAgentImplementation(n,s))})})});
