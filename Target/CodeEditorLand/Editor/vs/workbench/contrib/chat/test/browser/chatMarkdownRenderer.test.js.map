{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/test/browser/chatMarkdownRenderer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from '../../../../../base/common/htmlContent.js';\nimport { assertSnapshot } from '../../../../../base/test/common/snapshot.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ChatMarkdownRenderer } from '../../browser/chatMarkdownRenderer.js';\nimport { ITrustedDomainService } from '../../../url/browser/trustedDomainService.js';\nimport { MockTrustedDomainService } from '../../../url/test/browser/mockTrustedDomainService.js';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nsuite('ChatMarkdownRenderer', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet testRenderer: ChatMarkdownRenderer;\n\tsetup(() => {\n\t\tconst instantiationService = store.add(workbenchInstantiationService(undefined, store));\n\t\tinstantiationService.stub(ITrustedDomainService, new MockTrustedDomainService(['http://allowed.com']));\n\t\ttestRenderer = instantiationService.createInstance(ChatMarkdownRenderer, {});\n\t});\n\n\ttest('simple', async () => {\n\t\tconst md = new MarkdownString('a');\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.textContent);\n\t});\n\n\ttest('supportHtml with one-line markdown', async () => {\n\t\tconst md = new MarkdownString('**hello**');\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\n\t\tconst md2 = new MarkdownString('1. [_hello_](https://example.com) test **text**');\n\t\tmd2.supportHtml = true;\n\t\tconst result2 = store.add(testRenderer.render(md2));\n\t\tawait assertSnapshot(result2.element.outerHTML);\n\t});\n\n\ttest('invalid HTML', async () => {\n\t\tconst md = new MarkdownString('1<canvas>2<details>3</details></canvas>4');\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n\n\ttest('invalid HTML with attributes', async () => {\n\t\tconst md = new MarkdownString('1<details id=\"id1\" style=\"display: none\">2<details id=\"my id 2\">3</details></details>4');\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n\n\ttest('valid HTML', async () => {\n\t\tconst md = new MarkdownString(`\n<h1>heading</h1>\n<ul>\n\t<li>1</li>\n\t<li><b>hi</b></li>\n</ul>\n<pre><code>code here</code></pre>`);\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n\n\ttest('mixed valid and invalid HTML', async () => {\n\t\tconst md = new MarkdownString(`\n<h1>heading</h1>\n<details>\n<ul>\n\t<li><span><details><i>1</i></details></span></li>\n\t<li><b>hi</b></li>\n</ul>\n</details>\n<pre><canvas>canvas here</canvas></pre><details></details>`);\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n\n\ttest('self-closing elements', async () => {\n\t\tconst md = new MarkdownString('<area><hr><br><input type=\"text\" value=\"test\">');\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n\n\ttest('html comments', async () => {\n\t\tconst md = new MarkdownString('<!-- comment1 <div></div> --><div>content</div><!-- comment2 -->');\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n\n\ttest('CDATA', async () => {\n\t\tconst md = new MarkdownString('<![CDATA[<div>content</div>]]>');\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n\n\ttest('remote images', async () => {\n\t\tconst md = new MarkdownString('<img src=\"http://allowed.com/image.jpg\"> <img src=\"http://disallowed.com/image.jpg\">');\n\t\tmd.supportHtml = true;\n\t\tconst result = store.add(testRenderer.render(md));\n\t\tawait assertSnapshot(result.element.outerHTML);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
