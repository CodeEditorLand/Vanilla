import o from"assert";import{AsyncIterableSource as m,DeferredPromise as p,timeout as g}from"../../../../../base/common/async.js";import{CancellationTokenSource as v}from"../../../../../base/common/cancellation.js";import{DisposableStore as f}from"../../../../../base/common/lifecycle.js";import{mock as w}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as y}from"../../../../../base/test/common/utils.js";import{NullLogService as h}from"../../../../../platform/log/common/log.js";import{ChatMessageRole as x,languageModelExtensionPoint as E,LanguageModelsService as C}from"../../common/languageModels.js";import{nullExtensionDescription as a}from"../../../../services/extensions/common/extensions.js";import{ExtensionsRegistry as S}from"../../../../services/extensions/common/extensionsRegistry.js";suite("LanguageModels",function(){let e;const s=new f,r=new Set;setup(function(){e=new C(new class extends w(){activateByEvent(n){return r.add(n),Promise.resolve()}},new h),S.getExtensionPoints().find(n=>n.name===E.name).acceptUsers([{description:{...a,enabledApiProposals:["chatProvider"]},value:{vendor:"test-vendor"},collector:null}]),s.add(e.registerLanguageModelChat("1",{metadata:{extension:a.identifier,name:"Pretty Name",vendor:"test-vendor",family:"test-family",version:"test-version",id:"test-id",maxInputTokens:100,maxOutputTokens:100},sendChatRequest:async()=>{throw new Error},provideTokenCount:async()=>{throw new Error}})),s.add(e.registerLanguageModelChat("12",{metadata:{extension:a.identifier,name:"Pretty Name",vendor:"test-vendor",family:"test2-family",version:"test2-version",id:"test-id",maxInputTokens:100,maxOutputTokens:100},sendChatRequest:async()=>{throw new Error},provideTokenCount:async()=>{throw new Error}}))}),teardown(function(){e.dispose(),r.clear(),s.clear()}),y(),test("empty selector returns all",async function(){const t=await e.selectLanguageModels({});o.deepStrictEqual(t.length,2),o.deepStrictEqual(t[0],"1"),o.deepStrictEqual(t[1],"12")}),test("no warning that a matching model was not found #213716",async function(){const t=await e.selectLanguageModels({vendor:"test-vendor"});o.deepStrictEqual(t.length,2);const n=await e.selectLanguageModels({vendor:"test-vendor",family:"FAKE"});o.deepStrictEqual(n.length,0)}),test("sendChatRequest returns a response-stream",async function(){s.add(e.registerLanguageModelChat("actual",{metadata:{extension:a.identifier,name:"Pretty Name",vendor:"test-vendor",family:"actual-family",version:"actual-version",id:"actual-lm",maxInputTokens:100,maxOutputTokens:100},sendChatRequest:async(k,M,q,c)=>{const d=new p,u=new m;return(async()=>{for(;!c.isCancellationRequested;)u.emitOne({index:0,part:{type:"text",value:Date.now().toString()}}),await g(10);d.complete(void 0)})(),{stream:u.asyncIterable,result:d.p}},provideTokenCount:async()=>{throw new Error}}));const t=await e.selectLanguageModels({identifier:"actual-lm"});o.ok(t.length===1);const n=t[0],i=new v,l=await e.sendChatRequest(n,a.identifier,[{role:x.User,content:[{type:"text",value:"hello"}]}],{},i.token);o.ok(l),i.dispose(!0),await l.result})});
