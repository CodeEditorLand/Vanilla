{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/test/common/mockChatVariables.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { ChatAgentLocation } from '../../common/chatAgents.js';\nimport { IChatModel, IChatRequestVariableData, IChatRequestVariableEntry } from '../../common/chatModel.js';\nimport { IParsedChatRequest } from '../../common/chatParserTypes.js';\nimport { IChatRequestVariableValue, IChatVariableData, IChatVariableResolver, IChatVariableResolverProgress, IChatVariablesService, IDynamicVariable } from '../../common/chatVariables.js';\n\nexport class MockChatVariablesService implements IChatVariablesService {\n\t_serviceBrand: undefined;\n\tregisterVariable(data: IChatVariableData, resolver: IChatVariableResolver): IDisposable {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetVariable(name: string): IChatVariableData | undefined {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\thasVariable(name: string): boolean {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetVariables(): Iterable<Readonly<IChatVariableData>> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetDynamicVariables(sessionId: string): readonly IDynamicVariable[] {\n\t\treturn [];\n\t}\n\n\tasync resolveVariables(prompt: IParsedChatRequest, attachedContextVariables: IChatRequestVariableEntry[] | undefined, model: IChatModel, progress: (part: IChatVariableResolverProgress) => void, token: CancellationToken): Promise<IChatRequestVariableData> {\n\t\treturn {\n\t\t\tvariables: []\n\t\t};\n\t}\n\n\tattachContext(name: string, value: unknown, location: ChatAgentLocation): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tresolveVariable(variableName: string, promptText: string, model: IChatModel, progress: (part: IChatVariableResolverProgress) => void, token: CancellationToken): Promise<IChatRequestVariableValue> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,YAAY,0BAA0B,iCAAiC;AAChF,SAAS,0BAA0B;AACnC,SAAS,2BAA2B,mBAAmB,uBAAuB,+BAA+B,uBAAuB,wBAAwB;AAErJ,MAAM,yBAA0D;AAAA,EAZvE,OAYuE;AAAA;AAAA;AAAA,EACtE;AAAA,EACA,iBAAiB,MAAyB,UAA8C;AACvF,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EAEA,YAAY,MAA6C;AACxD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EAEA,YAAY,MAAuB;AAClC,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EAEA,eAAsD;AACrD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EAEA,oBAAoB,WAAgD;AACnE,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,iBAAiB,QAA4B,0BAAmE,OAAmB,UAAyD,OAA6D;AAC9P,WAAO;AAAA,MACN,WAAW,CAAC;AAAA,IACb;AAAA,EACD;AAAA,EAEA,cAAc,MAAc,OAAgB,UAAmC;AAC9E,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EAEA,gBAAgB,cAAsB,YAAoB,OAAmB,UAAyD,OAA8D;AACnM,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AACD;",
  "names": []
}
