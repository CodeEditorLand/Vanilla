{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatOptions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Color } from \"../../../../base/common/color.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport type {\n\tIBracketPairColorizationOptions,\n\tIEditorOptions,\n} from \"../../../../editor/common/config/editorOptions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport { IViewDescriptorService } from \"../../../common/views.js\";\n\nexport interface IChatConfiguration {\n\teditor: {\n\t\treadonly fontSize: number;\n\t\treadonly fontFamily: string;\n\t\treadonly lineHeight: number;\n\t\treadonly fontWeight: string;\n\t\treadonly wordWrap: \"off\" | \"on\";\n\t};\n}\n\nexport interface IChatEditorConfiguration {\n\treadonly foreground: Color | undefined;\n\treadonly inputEditor: IChatInputEditorOptions;\n\treadonly resultEditor: IChatResultEditorOptions;\n}\n\nexport interface IChatInputEditorOptions {\n\treadonly backgroundColor: Color | undefined;\n\treadonly accessibilitySupport: string;\n}\n\nexport interface IChatResultEditorOptions {\n\treadonly fontSize: number;\n\treadonly fontFamily: string | undefined;\n\treadonly lineHeight: number;\n\treadonly fontWeight: string;\n\treadonly backgroundColor: Color | undefined;\n\treadonly bracketPairColorization: IBracketPairColorizationOptions;\n\treadonly fontLigatures: boolean | string | undefined;\n\treadonly wordWrap: \"off\" | \"on\";\n\n\t// Bring these back if we make the editors editable\n\t// readonly cursorBlinking: string;\n\t// readonly accessibilitySupport: string;\n}\n\nexport class ChatEditorOptions extends Disposable {\n\tprivate static readonly lineHeightEm = 1.4;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _config!: IChatEditorConfiguration;\n\tpublic get configuration(): IChatEditorConfiguration {\n\t\treturn this._config;\n\t}\n\n\tprivate static readonly relevantSettingIds = [\n\t\t\"chat.editor.lineHeight\",\n\t\t\"chat.editor.fontSize\",\n\t\t\"chat.editor.fontFamily\",\n\t\t\"chat.editor.fontWeight\",\n\t\t\"chat.editor.wordWrap\",\n\t\t\"editor.cursorBlinking\",\n\t\t\"editor.fontLigatures\",\n\t\t\"editor.accessibilitySupport\",\n\t\t\"editor.bracketPairColorization.enabled\",\n\t\t\"editor.bracketPairColorization.independentColorPoolPerBracketType\",\n\t];\n\n\tconstructor(\n\t\tviewId: string | undefined,\n\t\tprivate readonly foreground: string,\n\t\tprivate readonly inputEditorBackgroundColor: string,\n\t\tprivate readonly resultEditorBackgroundColor: string,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly viewDescriptorService: IViewDescriptorService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tthis.themeService.onDidColorThemeChange((e) => this.update()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.viewDescriptorService.onDidChangeLocation((e) => {\n\t\t\t\tif (e.views.some((v) => v.id === viewId)) {\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\tChatEditorOptions.relevantSettingIds.some((id) =>\n\t\t\t\t\t\te.affectsConfiguration(id),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tconst editorConfig =\n\t\t\tthis.configurationService.getValue<IEditorOptions>(\"editor\");\n\n\t\t// TODO shouldn't the setting keys be more specific?\n\t\tconst chatEditorConfig =\n\t\t\tthis.configurationService.getValue<IChatConfiguration>(\n\t\t\t\t\"chat\",\n\t\t\t)?.editor;\n\t\tconst accessibilitySupport = this.configurationService.getValue<\n\t\t\t\"auto\" | \"off\" | \"on\"\n\t\t>(\"editor.accessibilitySupport\");\n\t\tthis._config = {\n\t\t\tforeground: this.themeService\n\t\t\t\t.getColorTheme()\n\t\t\t\t.getColor(this.foreground),\n\t\t\tinputEditor: {\n\t\t\t\tbackgroundColor: this.themeService\n\t\t\t\t\t.getColorTheme()\n\t\t\t\t\t.getColor(this.inputEditorBackgroundColor),\n\t\t\t\taccessibilitySupport,\n\t\t\t},\n\t\t\tresultEditor: {\n\t\t\t\tbackgroundColor: this.themeService\n\t\t\t\t\t.getColorTheme()\n\t\t\t\t\t.getColor(this.resultEditorBackgroundColor),\n\t\t\t\tfontSize: chatEditorConfig.fontSize,\n\t\t\t\tfontFamily:\n\t\t\t\t\tchatEditorConfig.fontFamily === \"default\"\n\t\t\t\t\t\t? editorConfig.fontFamily\n\t\t\t\t\t\t: chatEditorConfig.fontFamily,\n\t\t\t\tfontWeight: chatEditorConfig.fontWeight,\n\t\t\t\tlineHeight: chatEditorConfig.lineHeight\n\t\t\t\t\t? chatEditorConfig.lineHeight\n\t\t\t\t\t: ChatEditorOptions.lineHeightEm *\n\t\t\t\t\t\tchatEditorConfig.fontSize,\n\t\t\t\tbracketPairColorization: {\n\t\t\t\t\tenabled: this.configurationService.getValue<boolean>(\n\t\t\t\t\t\t\"editor.bracketPairColorization.enabled\",\n\t\t\t\t\t),\n\t\t\t\t\tindependentColorPoolPerBracketType:\n\t\t\t\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\t\t\t\"editor.bracketPairColorization.independentColorPoolPerBracketType\",\n\t\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\twordWrap: chatEditorConfig.wordWrap,\n\t\t\t\tfontLigatures: editorConfig.fontLigatures,\n\t\t\t},\n\t\t};\n\t\tthis._onDidChange.fire();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAK3B,SAAS,6BAA6B;AACtC,SAAS,qBAAqB;AAC9B,SAAS,8BAA8B;AAsChC,IAAM,oBAAN,cAAgC,WAAW;AAAA,EAwBjD,YACC,QACiB,YACA,4BACA,6BAEA,sBACe,cAEf,uBAChB;AACD,UAAM;AATW;AACA;AACA;AAEA;AACe;AAEf;AAIjB,SAAK;AAAA,MACJ,KAAK,aAAa,sBAAsB,CAAC,MAAM,KAAK,OAAO,CAAC;AAAA,IAC7D;AACA,SAAK;AAAA,MACJ,KAAK,sBAAsB,oBAAoB,CAAC,MAAM;AACrD,YAAI,EAAE,MAAM,KAAK,CAAC,MAAM,EAAE,OAAO,MAAM,GAAG;AACzC,eAAK,OAAO;AAAA,QACb;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK;AAAA,MACJ,KAAK,qBAAqB,yBAAyB,CAAC,MAAM;AACzD,YACC,kBAAkB,mBAAmB;AAAA,UAAK,CAAC,OAC1C,EAAE,qBAAqB,EAAE;AAAA,QAC1B,GACC;AACD,eAAK,OAAO;AAAA,QACb;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK,OAAO;AAAA,EACb;AAAA,EA/GD,OAoDkD;AAAA;AAAA;AAAA,EACjD,OAAwB,eAAe;AAAA,EAEtB,eAAe,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACzD,cAAc,KAAK,aAAa;AAAA,EAEjC;AAAA,EACR,IAAW,gBAA0C;AACpD,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,OAAwB,qBAAqB;AAAA,IAC5C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EAuCQ,SAAS;AAChB,UAAM,eACL,KAAK,qBAAqB,SAAyB,QAAQ;AAG5D,UAAM,mBACL,KAAK,qBAAqB;AAAA,MACzB;AAAA,IACD,GAAG;AACJ,UAAM,uBAAuB,KAAK,qBAAqB,SAErD,6BAA6B;AAC/B,SAAK,UAAU;AAAA,MACd,YAAY,KAAK,aACf,cAAc,EACd,SAAS,KAAK,UAAU;AAAA,MAC1B,aAAa;AAAA,QACZ,iBAAiB,KAAK,aACpB,cAAc,EACd,SAAS,KAAK,0BAA0B;AAAA,QAC1C;AAAA,MACD;AAAA,MACA,cAAc;AAAA,QACb,iBAAiB,KAAK,aACpB,cAAc,EACd,SAAS,KAAK,2BAA2B;AAAA,QAC3C,UAAU,iBAAiB;AAAA,QAC3B,YACC,iBAAiB,eAAe,YAC7B,aAAa,aACb,iBAAiB;AAAA,QACrB,YAAY,iBAAiB;AAAA,QAC7B,YAAY,iBAAiB,aAC1B,iBAAiB,aACjB,kBAAkB,eACnB,iBAAiB;AAAA,QACnB,yBAAyB;AAAA,UACxB,SAAS,KAAK,qBAAqB;AAAA,YAClC;AAAA,UACD;AAAA,UACA,oCACC,KAAK,qBAAqB;AAAA,YACzB;AAAA,UACD;AAAA,QACF;AAAA,QACA,UAAU,iBAAiB;AAAA,QAC3B,eAAe,aAAa;AAAA,MAC7B;AAAA,IACD;AACA,SAAK,aAAa,KAAK;AAAA,EACxB;AACD;AAhHa,oBAAN;AAAA,EA6BJ;AAAA,EAEA;AAAA,EACA;AAAA,GAhCU;",
  "names": []
}
