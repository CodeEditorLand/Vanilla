{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatTextEditContentPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { CancellationTokenSource } from \"../../../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttype IReference,\n\tRefCountedDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../../base/common/network.js\";\nimport { isEqual } from \"../../../../../base/common/resources.js\";\nimport { assertType } from \"../../../../../base/common/types.js\";\nimport { URI } from \"../../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../../base/common/uuid.js\";\nimport type { ISingleEditOperation } from \"../../../../../editor/common/core/editOperation.js\";\nimport { TextEdit } from \"../../../../../editor/common/languages.js\";\nimport { createTextBufferFactoryFromSnapshot } from \"../../../../../editor/common/model/textModel.js\";\nimport { IModelService } from \"../../../../../editor/common/services/model.js\";\nimport { DefaultModelSHA1Computer } from \"../../../../../editor/common/services/modelService.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { MenuId } from \"../../../../../platform/actions/common/actions.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tIChatProgressRenderableResponseContent,\n\tIChatTextEditGroup,\n} from \"../../common/chatModel.js\";\nimport { IChatService } from \"../../common/chatService.js\";\nimport {\n\ttype IChatResponseViewModel,\n\tisResponseVM,\n} from \"../../common/chatViewModel.js\";\nimport type { IChatListItemRendererOptions } from \"../chat.js\";\nimport type { IChatRendererDelegate } from \"../chatListRenderer.js\";\nimport type { ChatEditorOptions } from \"../chatOptions.js\";\nimport {\n\tCodeCompareBlockPart,\n\ttype ICodeCompareBlockData,\n\ttype ICodeCompareBlockDiffData,\n} from \"../codeBlockPart.js\";\nimport { type IDisposableReference, ResourcePool } from \"./chatCollections.js\";\nimport type {\n\tIChatContentPart,\n\tIChatContentPartRenderContext,\n} from \"./chatContentParts.js\";\n\nconst $ = dom.$;\n\nconst ICodeCompareModelService = createDecorator<ICodeCompareModelService>(\n\t\"ICodeCompareModelService\",\n);\n\ninterface ICodeCompareModelService {\n\t_serviceBrand: undefined;\n\tcreateModel(\n\t\tresponse: IChatResponseViewModel,\n\t\tchatTextEdit: IChatTextEditGroup,\n\t): Promise<\n\t\tIReference<{\n\t\t\toriginalSha1: string;\n\t\t\toriginal: IResolvedTextEditorModel;\n\t\t\tmodified: IResolvedTextEditorModel;\n\t\t}>\n\t>;\n}\n\nexport class ChatTextEditContentPart\n\textends Disposable\n\timplements IChatContentPart\n{\n\tpublic readonly domNode: HTMLElement;\n\tprivate readonly comparePart:\n\t\t| IDisposableReference<CodeCompareBlockPart>\n\t\t| undefined;\n\n\tprivate readonly _onDidChangeHeight = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeHeight = this._onDidChangeHeight.event;\n\n\tconstructor(\n\t\tchatTextEdit: IChatTextEditGroup,\n\t\tcontext: IChatContentPartRenderContext,\n\t\trendererOptions: IChatListItemRendererOptions,\n\t\tdiffEditorPool: DiffEditorPool,\n\t\tcurrentWidth: number,\n\t\t@ICodeCompareModelService private readonly codeCompareModelService: ICodeCompareModelService\n\t) {\n\t\tsuper();\n\t\tconst element = context.element;\n\n\t\tassertType(isResponseVM(element));\n\n\t\t// TODO@jrieken move this into the CompareCodeBlock and properly say what kind of changes happen\n\t\tif (rendererOptions.renderTextEditsAsSummary?.(chatTextEdit.uri)) {\n\t\t\tif (element.response.value.every(item => item.kind === 'textEditGroup')) {\n\t\t\t\tthis.domNode = $('.interactive-edits-summary', undefined, element.isComplete\n\t\t\t\t\t? element.isCanceled\n\t\t\t\t\t\t? localize('edits0', \"Making changes was aborted.\")\n\t\t\t\t\t\t: localize('editsSummary', \"Made changes.\") : '');\n\t\t\t} else {\n\t\t\t\tthis.domNode = $('div');\n\t\t\t}\n\n\t\t\t// TODO@roblourens this case is now handled outside this Part in ChatListRenderer, but can it be cleaned up?\n\t\t\t// return;\n\t\t} else {\n\n\n\t\t\tconst cts = new CancellationTokenSource();\n\n\t\t\tlet isDisposed = false;\n\t\t\tthis._register(toDisposable(() => {\n\t\t\t\tisDisposed = true;\n\t\t\t\tcts.dispose(true);\n\t\t\t}));\n\n\t\t\tthis.comparePart = this._register(diffEditorPool.get());\n\n\t\t\t// Attach this after updating text/layout of the editor, so it should only be fired when the size updates later (horizontal scrollbar, wrapping)\n\t\t\t// not during a renderElement OR a progressive render (when we will be firing this event anyway at the end of the render)\n\t\t\tthis._register(this.comparePart.object.onDidChangeContentHeight(() => {\n\t\t\t\tthis._onDidChangeHeight.fire();\n\t\t\t}));\n\n\t\t\tconst data: ICodeCompareBlockData = {\n\t\t\t\telement,\n\t\t\t\tedit: chatTextEdit,\n\t\t\t\tdiffData: (async () => {\n\n\t\t\t\t\tconst ref = await this.codeCompareModelService.createModel(element, chatTextEdit);\n\n\t\t\t\t\tif (isDisposed) {\n\t\t\t\t\t\tref.dispose();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._register(ref);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmodified: ref.object.modified.textEditorModel,\n\t\t\t\t\t\toriginal: ref.object.original.textEditorModel,\n\t\t\t\t\t\toriginalSha1: ref.object.originalSha1\n\t\t\t\t\t} satisfies ICodeCompareBlockDiffData;\n\t\t\t\t})()\n\t\t\t};\n\t\t\tthis.comparePart.object.render(data, currentWidth, cts.token);\n\n\t\t\tthis.domNode = this.comparePart.object.element;\n\t\t}\n\t}\n\n\tlayout(width: number): void {\n\t\tthis.comparePart?.object.layout(width);\n\t}\n\n\thasSameContent(other: IChatProgressRenderableResponseContent): boolean {\n\t\t// No other change allowed for this content type\n\t\treturn other.kind === \"textEditGroup\";\n\t}\n\n\taddDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n}\n\nexport class DiffEditorPool extends Disposable {\n\tprivate readonly _pool: ResourcePool<CodeCompareBlockPart>;\n\n\tpublic inUse(): Iterable<CodeCompareBlockPart> {\n\t\treturn this._pool.inUse;\n\t}\n\n\tconstructor(\n\t\toptions: ChatEditorOptions,\n\t\tdelegate: IChatRendererDelegate,\n\t\toverflowWidgetsDomNode: HTMLElement | undefined,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._pool = this._register(\n\t\t\tnew ResourcePool(() => {\n\t\t\t\treturn instantiationService.createInstance(\n\t\t\t\t\tCodeCompareBlockPart,\n\t\t\t\t\toptions,\n\t\t\t\t\tMenuId.ChatCompareBlock,\n\t\t\t\t\tdelegate,\n\t\t\t\t\toverflowWidgetsDomNode,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tget(): IDisposableReference<CodeCompareBlockPart> {\n\t\tconst codeBlock = this._pool.get();\n\t\tlet stale = false;\n\t\treturn {\n\t\t\tobject: codeBlock,\n\t\t\tisStale: () => stale,\n\t\t\tdispose: () => {\n\t\t\t\tcodeBlock.reset();\n\t\t\t\tstale = true;\n\t\t\t\tthis._pool.release(codeBlock);\n\t\t\t},\n\t\t};\n\t}\n}\n\nclass CodeCompareModelService implements ICodeCompareModelService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t) { }\n\n\tasync createModel(\n\t\telement: IChatResponseViewModel,\n\t\tchatTextEdit: IChatTextEditGroup,\n\t): Promise<\n\t\tIReference<{\n\t\t\toriginalSha1: string;\n\t\t\toriginal: IResolvedTextEditorModel;\n\t\t\tmodified: IResolvedTextEditorModel;\n\t\t}>\n\t> {\n\t\tconst original = await this.textModelService.createModelReference(\n\t\t\tchatTextEdit.uri,\n\t\t);\n\n\t\tconst modified = await this.textModelService.createModelReference(\n\t\t\tthis.modelService.createModel(\n\t\t\t\tcreateTextBufferFactoryFromSnapshot(\n\t\t\t\t\toriginal.object.textEditorModel.createSnapshot(),\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tlanguageId: original.object.textEditorModel.getLanguageId(),\n\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t},\n\t\t\t\tURI.from({\n\t\t\t\t\tscheme: Schemas.vscodeChatCodeBlock,\n\t\t\t\t\tpath: chatTextEdit.uri.path,\n\t\t\t\t\tquery: generateUuid(),\n\t\t\t\t}),\n\t\t\t\tfalse,\n\t\t\t).uri,\n\t\t);\n\n\t\tconst d = new RefCountedDisposable(\n\t\t\ttoDisposable(() => {\n\t\t\t\toriginal.dispose();\n\t\t\t\tmodified.dispose();\n\t\t\t}),\n\t\t);\n\n\t\t// compute the sha1 of the original model\n\t\tlet originalSha1 = \"\";\n\t\tif (chatTextEdit.state) {\n\t\t\toriginalSha1 = chatTextEdit.state.sha1;\n\t\t} else {\n\t\t\tconst sha1 = new DefaultModelSHA1Computer();\n\t\t\tif (sha1.canComputeSHA1(original.object.textEditorModel)) {\n\t\t\t\toriginalSha1 = sha1.computeSHA1(\n\t\t\t\t\toriginal.object.textEditorModel,\n\t\t\t\t);\n\t\t\t\tchatTextEdit.state = { sha1: originalSha1, applied: 0 };\n\t\t\t}\n\t\t}\n\n\t\t// apply edits to the \"modified\" model\n\t\tconst chatModel = this.chatService.getSession(element.sessionId)!;\n\t\tconst editGroups: ISingleEditOperation[][] = [];\n\t\tfor (const request of chatModel.getRequests()) {\n\t\t\tif (!request.response) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const item of request.response.response.value) {\n\t\t\t\tif (\n\t\t\t\t\titem.kind !== \"textEditGroup\" ||\n\t\t\t\t\titem.state?.applied ||\n\t\t\t\t\t!isEqual(item.uri, chatTextEdit.uri)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (const group of item.edits) {\n\t\t\t\t\tconst edits = group.map(TextEdit.asEditOperation);\n\t\t\t\t\teditGroups.push(edits);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (request.response === element.model) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (const edits of editGroups) {\n\t\t\tmodified.object.textEditorModel.pushEditOperations(\n\t\t\t\tnull,\n\t\t\t\tedits,\n\t\t\t\t() => null,\n\t\t\t);\n\t\t}\n\n\t\t// self-acquire a reference to diff models for a short while\n\t\t// because streaming usually means we will be using the original-model\n\t\t// repeatedly and thereby also should reuse the modified-model and just\n\t\t// update it with more edits\n\t\td.acquire();\n\t\tsetTimeout(() => d.release(), 5000);\n\n\t\treturn {\n\t\t\tobject: {\n\t\t\t\toriginalSha1,\n\t\t\t\toriginal: original.object,\n\t\t\t\tmodified: modified.object,\n\t\t\t},\n\t\t\tdispose() {\n\t\t\t\td.release();\n\t\t\t},\n\t\t};\n\t}\n}\n\nregisterSingleton(\n\tICodeCompareModelService,\n\tCodeCompareModelService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
