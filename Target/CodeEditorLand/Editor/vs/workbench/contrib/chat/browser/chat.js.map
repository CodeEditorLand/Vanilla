{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chat.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { localize } from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ChatViewPane } from './chatViewPane.js';\nimport { IChatViewState, IChatWidgetContrib } from './chatWidget.js';\nimport { ICodeBlockActionContext } from './codeBlockPart.js';\nimport { ChatAgentLocation, IChatAgentCommand, IChatAgentData } from '../common/chatAgents.js';\nimport { IChatRequestVariableEntry, IChatResponseModel } from '../common/chatModel.js';\nimport { IParsedChatRequest } from '../common/chatParserTypes.js';\nimport { CHAT_PROVIDER_ID } from '../common/chatParticipantContribTypes.js';\nimport { IChatRequestViewModel, IChatResponseViewModel, IChatViewModel, IChatWelcomeMessageViewModel } from '../common/chatViewModel.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\n\nexport const IChatWidgetService = createDecorator<IChatWidgetService>('chatWidgetService');\n\nexport interface IChatWidgetService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the most recently focused widget if any.\n\t */\n\treadonly lastFocusedWidget: IChatWidget | undefined;\n\n\tgetWidgetByInputUri(uri: URI): IChatWidget | undefined;\n\tgetWidgetBySessionId(sessionId: string): IChatWidget | undefined;\n}\n\nexport async function showChatView(viewsService: IViewsService): Promise<IChatWidget | undefined> {\n\treturn (await viewsService.openView<ChatViewPane>(CHAT_VIEW_ID))?.widget;\n}\n\nexport const IQuickChatService = createDecorator<IQuickChatService>('quickChatService');\nexport interface IQuickChatService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidClose: Event<void>;\n\treadonly enabled: boolean;\n\treadonly focused: boolean;\n\ttoggle(options?: IQuickChatOpenOptions): void;\n\tfocus(): void;\n\topen(options?: IQuickChatOpenOptions): void;\n\tclose(): void;\n\topenInChatView(): void;\n}\n\nexport interface IQuickChatOpenOptions {\n\t/**\n\t * The query for quick chat.\n\t */\n\tquery: string;\n\t/**\n\t * Whether the query is partial and will await more input from the user.\n\t */\n\tisPartialQuery?: boolean;\n\t/**\n\t * An optional selection range to apply to the query text box.\n\t */\n\tselection?: Selection;\n}\n\nexport const IChatAccessibilityService = createDecorator<IChatAccessibilityService>('chatAccessibilityService');\nexport interface IChatAccessibilityService {\n\treadonly _serviceBrand: undefined;\n\tacceptRequest(): number;\n\tacceptResponse(response: IChatResponseViewModel | string | undefined, requestId: number, isVoiceInput?: boolean): void;\n}\n\nexport interface IChatCodeBlockInfo {\n\tcodeBlockIndex: number;\n\telement: ChatTreeItem;\n\turi: URI | undefined;\n\tcodemapperUri: URI | undefined;\n\tfocus(): void;\n}\n\nexport interface IChatFileTreeInfo {\n\ttreeDataId: string;\n\ttreeIndex: number;\n\tfocus(): void;\n}\n\nexport type ChatTreeItem = IChatRequestViewModel | IChatResponseViewModel | IChatWelcomeMessageViewModel;\n\nexport interface IChatListItemRendererOptions {\n\treadonly renderStyle?: 'default' | 'compact' | 'minimal';\n\treadonly noHeader?: boolean;\n\treadonly noPadding?: boolean;\n\treadonly editableCodeBlock?: boolean;\n\treadonly renderTextEditsAsSummary?: (uri: URI) => boolean;\n}\n\nexport interface IChatWidgetViewOptions {\n\trenderInputOnTop?: boolean;\n\trenderFollowups?: boolean;\n\trenderStyle?: 'default' | 'compact' | 'minimal';\n\tsupportsFileReferences?: boolean;\n\tfilter?: (item: ChatTreeItem) => boolean;\n\trendererOptions?: IChatListItemRendererOptions;\n\tmenus?: {\n\t\t/**\n\t\t * The menu that is inside the input editor, use for send, dictation\n\t\t */\n\t\texecuteToolbar?: MenuId;\n\t\t/**\n\t\t * The menu that next to the input editor, use for close, config etc\n\t\t */\n\t\tinputSideToolbar?: MenuId;\n\t\t/**\n\t\t * The telemetry source for all commands of this widget\n\t\t */\n\t\ttelemetrySource?: string;\n\t};\n\tdefaultElementHeight?: number;\n\teditorOverflowWidgetsDomNode?: HTMLElement;\n}\n\nexport interface IChatViewViewContext {\n\tviewId: string;\n}\n\nexport interface IChatResourceViewContext {\n\tisQuickChat?: boolean;\n}\n\nexport type IChatWidgetViewContext = IChatViewViewContext | IChatResourceViewContext | {};\n\nexport interface IChatWidget {\n\treadonly onDidChangeViewModel: Event<void>;\n\treadonly onDidAcceptInput: Event<void>;\n\treadonly onDidHide: Event<void>;\n\treadonly onDidSubmitAgent: Event<{ agent: IChatAgentData; slashCommand?: IChatAgentCommand }>;\n\treadonly onDidChangeAgent: Event<{ agent: IChatAgentData; slashCommand?: IChatAgentCommand }>;\n\treadonly onDidChangeParsedInput: Event<void>;\n\treadonly onDidChangeContext: Event<{ removed?: IChatRequestVariableEntry[]; added?: IChatRequestVariableEntry[] }>;\n\treadonly location: ChatAgentLocation;\n\treadonly viewContext: IChatWidgetViewContext;\n\treadonly viewModel: IChatViewModel | undefined;\n\treadonly inputEditor: ICodeEditor;\n\treadonly supportsFileReferences: boolean;\n\treadonly parsedInput: IParsedChatRequest;\n\tlastSelectedAgent: IChatAgentData | undefined;\n\treadonly scopedContextKeyService: IContextKeyService;\n\n\tgetContrib<T extends IChatWidgetContrib>(id: string): T | undefined;\n\treveal(item: ChatTreeItem): void;\n\tfocus(item: ChatTreeItem): void;\n\tgetSibling(item: ChatTreeItem, type: 'next' | 'previous'): ChatTreeItem | undefined;\n\tgetFocus(): ChatTreeItem | undefined;\n\tsetInput(query?: string): void;\n\tgetInput(): string;\n\tlogInputHistory(): void;\n\tacceptInput(query?: string, isVoiceInput?: boolean): Promise<IChatResponseModel | undefined>;\n\tacceptInputWithPrefix(prefix: string): void;\n\tsetInputPlaceholder(placeholder: string): void;\n\tresetInputPlaceholder(): void;\n\tfocusLastMessage(): void;\n\tfocusInput(): void;\n\thasInputFocus(): boolean;\n\tgetCodeBlockInfoForEditor(uri: URI): IChatCodeBlockInfo | undefined;\n\tgetCodeBlockInfosForResponse(response: IChatResponseViewModel): IChatCodeBlockInfo[];\n\tgetFileTreeInfosForResponse(response: IChatResponseViewModel): IChatFileTreeInfo[];\n\tgetLastFocusedFileTreeForResponse(response: IChatResponseViewModel): IChatFileTreeInfo | undefined;\n\tsetContext(overwrite: boolean, ...context: IChatRequestVariableEntry[]): void;\n\tclear(): void;\n\tgetViewState(): IChatViewState;\n}\n\n\nexport interface ICodeBlockActionContextProvider {\n\tgetCodeBlockContext(editor?: ICodeEditor): ICodeBlockActionContext | undefined;\n}\n\nexport const IChatCodeBlockContextProviderService = createDecorator<IChatCodeBlockContextProviderService>('chatCodeBlockContextProviderService');\nexport interface IChatCodeBlockContextProviderService {\n\treadonly _serviceBrand: undefined;\n\treadonly providers: ICodeBlockActionContextProvider[];\n\tregisterProvider(provider: ICodeBlockActionContextProvider, id: string): IDisposable;\n}\n\nexport const GeneratingPhrase = localize('generating', \"Generating\");\n\nexport const CHAT_VIEW_ID = `workbench.panel.chat.view.${CHAT_PROVIDER_ID}`;\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AACpB,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB;AAC1B,SAAS,gBAAgB;AACzB,SAAS,cAAc;AACvB,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB,0BAA0B;AACnD,SAAS,+BAA+B;AACxC,SAAS,mBAAmB,mBAAmB,sBAAsB;AACrE,SAAS,2BAA2B,0BAA0B;AAC9D,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AACjC,SAAS,uBAAuB,wBAAwB,gBAAgB,oCAAoC;AAC5G,SAAS,qBAAqB;AAEvB,MAAM,qBAAqB,gBAAoC,mBAAmB;AAezF,eAAsB,aAAa,cAA+D;AACjG,UAAQ,MAAM,aAAa,SAAuB,YAAY,IAAI;AACnE;AAFsB;AAIf,MAAM,oBAAoB,gBAAmC,kBAAkB;AA4B/E,MAAM,4BAA4B,gBAA2C,0BAA0B;AAgHvG,MAAM,uCAAuC,gBAAsD,qCAAqC;AAOxI,MAAM,mBAAmB,SAAS,cAAc,YAAY;AAE5D,MAAM,eAAe,6BAA6B,gBAAgB;",
  "names": []
}
