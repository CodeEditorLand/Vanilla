{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chat.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport type { Selection } from \"../../../../editor/common/core/selection.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { MenuId } from \"../../../../platform/actions/common/actions.js\";\nimport type { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport type {\n\tChatAgentLocation,\n\tIChatAgentCommand,\n\tIChatAgentData,\n} from \"../common/chatAgents.js\";\nimport type {\n\tIChatRequestVariableEntry,\n\tIChatResponseModel,\n} from \"../common/chatModel.js\";\nimport type { IParsedChatRequest } from \"../common/chatParserTypes.js\";\nimport { CHAT_PROVIDER_ID } from \"../common/chatParticipantContribTypes.js\";\nimport type {\n\tIChatRequestViewModel,\n\tIChatResponseViewModel,\n\tIChatViewModel,\n\tIChatWelcomeMessageViewModel,\n} from \"../common/chatViewModel.js\";\nimport type { ChatViewPane } from \"./chatViewPane.js\";\nimport type { IChatViewState, IChatWidgetContrib } from \"./chatWidget.js\";\nimport type { ICodeBlockActionContext } from \"./codeBlockPart.js\";\n\nexport const IChatWidgetService =\n\tcreateDecorator<IChatWidgetService>(\"chatWidgetService\");\n\nexport interface IChatWidgetService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the most recently focused widget if any.\n\t */\n\treadonly lastFocusedWidget: IChatWidget | undefined;\n\n\tgetWidgetByInputUri(uri: URI): IChatWidget | undefined;\n\tgetWidgetBySessionId(sessionId: string): IChatWidget | undefined;\n}\n\nexport async function showChatView(\n\tviewsService: IViewsService,\n): Promise<IChatWidget | undefined> {\n\treturn (await viewsService.openView<ChatViewPane>(CHAT_VIEW_ID))?.widget;\n}\n\nexport const IQuickChatService =\n\tcreateDecorator<IQuickChatService>(\"quickChatService\");\nexport interface IQuickChatService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidClose: Event<void>;\n\treadonly enabled: boolean;\n\treadonly focused: boolean;\n\ttoggle(options?: IQuickChatOpenOptions): void;\n\tfocus(): void;\n\topen(options?: IQuickChatOpenOptions): void;\n\tclose(): void;\n\topenInChatView(): void;\n}\n\nexport interface IQuickChatOpenOptions {\n\t/**\n\t * The query for quick chat.\n\t */\n\tquery: string;\n\t/**\n\t * Whether the query is partial and will await more input from the user.\n\t */\n\tisPartialQuery?: boolean;\n\t/**\n\t * An optional selection range to apply to the query text box.\n\t */\n\tselection?: Selection;\n}\n\nexport const IChatAccessibilityService =\n\tcreateDecorator<IChatAccessibilityService>(\"chatAccessibilityService\");\nexport interface IChatAccessibilityService {\n\treadonly _serviceBrand: undefined;\n\tacceptRequest(): number;\n\tacceptResponse(\n\t\tresponse: IChatResponseViewModel | string | undefined,\n\t\trequestId: number,\n\t\tisVoiceInput?: boolean,\n\t): void;\n}\n\nexport interface IChatCodeBlockInfo {\n\tcodeBlockIndex: number;\n\telement: ChatTreeItem;\n\turi: URI | undefined;\n\tcodemapperUri: URI | undefined;\n\tfocus(): void;\n}\n\nexport interface IChatFileTreeInfo {\n\ttreeDataId: string;\n\ttreeIndex: number;\n\tfocus(): void;\n}\n\nexport type ChatTreeItem =\n\t| IChatRequestViewModel\n\t| IChatResponseViewModel\n\t| IChatWelcomeMessageViewModel;\n\nexport interface IChatListItemRendererOptions {\n\treadonly renderStyle?: \"default\" | \"compact\" | \"minimal\";\n\treadonly noHeader?: boolean;\n\treadonly noPadding?: boolean;\n\treadonly editableCodeBlock?: boolean;\n\treadonly renderTextEditsAsSummary?: (uri: URI) => boolean;\n}\n\nexport interface IChatWidgetViewOptions {\n\trenderInputOnTop?: boolean;\n\trenderFollowups?: boolean;\n\trenderStyle?: \"default\" | \"compact\" | \"minimal\";\n\tsupportsFileReferences?: boolean;\n\tfilter?: (item: ChatTreeItem) => boolean;\n\trendererOptions?: IChatListItemRendererOptions;\n\tmenus?: {\n\t\t/**\n\t\t * The menu that is inside the input editor, use for send, dictation\n\t\t */\n\t\texecuteToolbar?: MenuId;\n\t\t/**\n\t\t * The menu that next to the input editor, use for close, config etc\n\t\t */\n\t\tinputSideToolbar?: MenuId;\n\t\t/**\n\t\t * The telemetry source for all commands of this widget\n\t\t */\n\t\ttelemetrySource?: string;\n\t};\n\tdefaultElementHeight?: number;\n\teditorOverflowWidgetsDomNode?: HTMLElement;\n}\n\nexport interface IChatViewViewContext {\n\tviewId: string;\n}\n\nexport interface IChatResourceViewContext {\n\tisQuickChat?: boolean;\n}\n\nexport type IChatWidgetViewContext =\n\t| IChatViewViewContext\n\t| IChatResourceViewContext\n\t| {};\n\nexport interface IChatWidget {\n\treadonly onDidChangeViewModel: Event<void>;\n\treadonly onDidAcceptInput: Event<void>;\n\treadonly onDidHide: Event<void>;\n\treadonly onDidSubmitAgent: Event<{\n\t\tagent: IChatAgentData;\n\t\tslashCommand?: IChatAgentCommand;\n\t}>;\n\treadonly onDidChangeAgent: Event<{\n\t\tagent: IChatAgentData;\n\t\tslashCommand?: IChatAgentCommand;\n\t}>;\n\treadonly onDidChangeParsedInput: Event<void>;\n\treadonly onDidChangeContext: Event<{\n\t\tremoved?: IChatRequestVariableEntry[];\n\t\tadded?: IChatRequestVariableEntry[];\n\t}>;\n\treadonly location: ChatAgentLocation;\n\treadonly viewContext: IChatWidgetViewContext;\n\treadonly viewModel: IChatViewModel | undefined;\n\treadonly inputEditor: ICodeEditor;\n\treadonly supportsFileReferences: boolean;\n\treadonly parsedInput: IParsedChatRequest;\n\tlastSelectedAgent: IChatAgentData | undefined;\n\treadonly scopedContextKeyService: IContextKeyService;\n\n\tgetContrib<T extends IChatWidgetContrib>(id: string): T | undefined;\n\treveal(item: ChatTreeItem): void;\n\tfocus(item: ChatTreeItem): void;\n\tgetSibling(\n\t\titem: ChatTreeItem,\n\t\ttype: \"next\" | \"previous\",\n\t): ChatTreeItem | undefined;\n\tgetFocus(): ChatTreeItem | undefined;\n\tsetInput(query?: string): void;\n\tgetInput(): string;\n\tlogInputHistory(): void;\n\tacceptInput(\n\t\tquery?: string,\n\t\tisVoiceInput?: boolean,\n\t): Promise<IChatResponseModel | undefined>;\n\tacceptInputWithPrefix(prefix: string): void;\n\tsetInputPlaceholder(placeholder: string): void;\n\tresetInputPlaceholder(): void;\n\tfocusLastMessage(): void;\n\tfocusInput(): void;\n\thasInputFocus(): boolean;\n\tgetCodeBlockInfoForEditor(uri: URI): IChatCodeBlockInfo | undefined;\n\tgetCodeBlockInfosForResponse(\n\t\tresponse: IChatResponseViewModel,\n\t): IChatCodeBlockInfo[];\n\tgetFileTreeInfosForResponse(\n\t\tresponse: IChatResponseViewModel,\n\t): IChatFileTreeInfo[];\n\tgetLastFocusedFileTreeForResponse(\n\t\tresponse: IChatResponseViewModel,\n\t): IChatFileTreeInfo | undefined;\n\tsetContext(\n\t\toverwrite: boolean,\n\t\t...context: IChatRequestVariableEntry[]\n\t): void;\n\tclear(): void;\n\tgetViewState(): IChatViewState;\n}\n\nexport interface ICodeBlockActionContextProvider {\n\tgetCodeBlockContext(\n\t\teditor?: ICodeEditor,\n\t): ICodeBlockActionContext | undefined;\n}\n\nexport const IChatCodeBlockContextProviderService =\n\tcreateDecorator<IChatCodeBlockContextProviderService>(\n\t\t\"chatCodeBlockContextProviderService\",\n\t);\nexport interface IChatCodeBlockContextProviderService {\n\treadonly _serviceBrand: undefined;\n\treadonly providers: ICodeBlockActionContextProvider[];\n\tregisterProvider(\n\t\tprovider: ICodeBlockActionContextProvider,\n\t\tid: string,\n\t): IDisposable;\n}\n\nexport const GeneratingPhrase = localize(\"generating\", \"Generating\");\n\nexport const CHAT_VIEW_ID = `workbench.panel.chat.view.${CHAT_PROVIDER_ID}`;\n"],
  "mappings": ";;AAUA,SAAS,gBAAgB;AAGzB,SAAS,uBAAuB;AAYhC,SAAS,wBAAwB;AAW1B,MAAM,qBACZ,gBAAoC,mBAAmB;AAcxD,eAAsB,aACrB,cACmC;AACnC,UAAQ,MAAM,aAAa,SAAuB,YAAY,IAAI;AACnE;AAJsB;AAMf,MAAM,oBACZ,gBAAmC,kBAAkB;AA4B/C,MAAM,4BACZ,gBAA2C,0BAA0B;AAmJ/D,MAAM,uCACZ;AAAA,EACC;AACD;AAUM,MAAM,mBAAmB,SAAS,cAAc,YAAY;AAE5D,MAAM,eAAe,6BAA6B,gBAAgB;",
  "names": []
}
