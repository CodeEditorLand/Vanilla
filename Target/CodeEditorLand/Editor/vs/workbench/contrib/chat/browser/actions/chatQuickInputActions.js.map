{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/actions/chatQuickInputActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { KeyCode, KeyMod } from '../../../../../base/common/keyCodes.js';\nimport { ICodeEditorService } from '../../../../../editor/browser/services/codeEditorService.js';\nimport { Selection } from '../../../../../editor/common/core/selection.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { CHAT_CATEGORY } from './chatActions.js';\nimport { IQuickChatOpenOptions, IQuickChatService } from '../chat.js';\nimport { CONTEXT_CHAT_ENABLED } from '../../common/chatContextKeys.js';\nimport { InlineChatController } from '../../../inlineChat/browser/inlineChatController.js';\n\nexport const ASK_QUICK_QUESTION_ACTION_ID = 'workbench.action.quickchat.toggle';\nexport function registerQuickChatActions() {\n\tregisterAction2(QuickChatGlobalAction);\n\tregisterAction2(AskQuickChatAction);\n\n\tregisterAction2(class OpenInChatViewAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.quickchat.openInChatView',\n\t\t\t\ttitle: localize2('chat.openInChatView.label', \"Open in Chat View\"),\n\t\t\t\tf1: false,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\ticon: Codicon.commentDiscussion,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.ChatInputSide,\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\torder: 10\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\t\tquickChatService.openInChatView();\n\t\t}\n\t});\n\n\tregisterAction2(class CloseQuickChatAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.quickchat.close',\n\t\t\t\ttitle: localize2('chat.closeQuickChat.label', \"Close Quick Chat\"),\n\t\t\t\tf1: false,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\ticon: Codicon.close,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.ChatInputSide,\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\torder: 20\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\t\tquickChatService.close();\n\t\t}\n\t});\n\n\tregisterAction2(class LaunchInlineChatFromQuickChatAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.quickchat.launchInlineChat',\n\t\t\t\ttitle: localize2('chat.launchInlineChat.label', \"Launch Inline Chat\"),\n\t\t\t\tf1: false,\n\t\t\t\tcategory: CHAT_CATEGORY\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor) {\n\t\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\t\tif (quickChatService.focused) {\n\t\t\t\tquickChatService.close();\n\t\t\t}\n\t\t\tconst codeEditor = codeEditorService.getActiveCodeEditor();\n\t\t\tif (!codeEditor) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst controller = InlineChatController.get(codeEditor);\n\t\t\tif (!controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait controller.run();\n\t\t\tcontroller.focus();\n\t\t}\n\t});\n\n}\n\nclass QuickChatGlobalAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ASK_QUICK_QUESTION_ACTION_ID,\n\t\t\ttitle: localize2('quickChat', 'Quick Chat'),\n\t\t\tprecondition: CONTEXT_CHAT_ENABLED,\n\t\t\ticon: Codicon.commentDiscussion,\n\t\t\tf1: false,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI,\n\t\t\t\tlinux: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyI\n\t\t\t\t}\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize('toggle.desc', 'Toggle the quick chat'),\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\trequired: ['query'],\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tquery: {\n\t\t\t\t\t\t\t\t\t\tdescription: localize('toggle.query', \"The query to open the quick chat with\"),\n\t\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tisPartialQuery: {\n\t\t\t\t\t\t\t\t\t\tdescription: localize('toggle.isPartialQuery', \"Whether the query is partial; it will wait for more user input\"),\n\t\t\t\t\t\t\t\t\t\ttype: 'boolean'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: localize('toggle.query', \"The query to open the quick chat with\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, query?: string | Omit<IQuickChatOpenOptions, 'selection'>): void {\n\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\tlet options: IQuickChatOpenOptions | undefined;\n\t\tswitch (typeof query) {\n\t\t\tcase 'string': options = { query }; break;\n\t\t\tcase 'object': options = query; break;\n\t\t}\n\t\tif (options?.query) {\n\t\t\toptions.selection = new Selection(1, options.query.length + 1, 1, options.query.length + 1);\n\t\t}\n\t\tquickChatService.toggle(options);\n\t}\n}\n\nclass AskQuickChatAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: `workbench.action.openQuickChat`,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\ttitle: localize2('interactiveSession.open', \"Open Quick Chat\"),\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, query?: string): void {\n\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\tquickChatService.toggle(query ? {\n\t\t\tquery,\n\t\t\tselection: new Selection(1, query.length + 1, 1, query.length + 1)\n\t\t} : undefined);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
