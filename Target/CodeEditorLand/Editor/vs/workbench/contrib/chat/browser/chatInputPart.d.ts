import { IHistoryNavigationWidget } from "vs/base/browser/history";
import { Disposable } from "vs/base/common/lifecycle";
import { IModelService } from "vs/editor/common/services/model";
import { IAccessibilityService } from "vs/platform/accessibility/common/accessibility";
import { MenuId } from "vs/platform/actions/common/actions";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "vs/platform/keybinding/common/keybinding";
import { ILogService } from "vs/platform/log/common/log";
import { IChatWidget } from "vs/workbench/contrib/chat/browser/chat";
import { ChatAgentLocation } from "vs/workbench/contrib/chat/common/chatAgents";
import { IChatRequestVariableEntry } from "vs/workbench/contrib/chat/common/chatModel";
import { IChatFollowup } from "vs/workbench/contrib/chat/common/chatService";
import { IChatResponseViewModel } from "vs/workbench/contrib/chat/common/chatViewModel";
import { IChatWidgetHistoryService } from "vs/workbench/contrib/chat/common/chatWidgetHistoryService";
interface IChatInputPartOptions {
    renderFollowups: boolean;
    renderStyle?: "default" | "compact";
    menus: {
        executeToolbar: MenuId;
        inputSideToolbar?: MenuId;
        telemetrySource?: string;
    };
    editorOverflowWidgetsDomNode?: HTMLElement;
}
export declare class ChatInputPart extends Disposable implements IHistoryNavigationWidget {
    private readonly location;
    private readonly options;
    private readonly getInputState;
    private readonly historyService;
    private readonly modelService;
    private readonly instantiationService;
    private readonly contextKeyService;
    private readonly configurationService;
    private readonly keybindingService;
    private readonly accessibilityService;
    private readonly logService;
    static readonly INPUT_SCHEME = "chatSessionInput";
    private static _counter;
    private _onDidLoadInputState;
    readonly onDidLoadInputState: any;
    private _onDidChangeHeight;
    readonly onDidChangeHeight: any;
    private _onDidFocus;
    readonly onDidFocus: any;
    private _onDidBlur;
    readonly onDidBlur: any;
    private _onDidChangeContext;
    readonly onDidChangeContext: any;
    private _onDidAcceptFollowup;
    readonly onDidAcceptFollowup: any;
    get attachedContext(): ReadonlySet<IChatRequestVariableEntry>;
    private _indexOfLastAttachedContextDeletedWithKeyboard;
    private readonly _attachedContext;
    private readonly _onDidChangeVisibility;
    private readonly _contextResourceLabels;
    private readonly inputEditorMaxHeight;
    private inputEditorHeight;
    private container;
    private inputSideToolbarContainer?;
    private followupsContainer;
    private readonly followupsDisposables;
    private attachedContextContainer;
    private readonly attachedContextDisposables;
    private _inputPartHeight;
    get inputPartHeight(): number;
    private _inputEditor;
    private _inputEditorElement;
    private toolbar;
    get inputEditor(): CodeEditorWidget;
    private history;
    private historyNavigationBackwardsEnablement;
    private historyNavigationForewardsEnablement;
    private inHistoryNavigation;
    private inputModel;
    private inputEditorHasText;
    private chatCursorAtTop;
    private inputEditorHasFocus;
    private cachedDimensions;
    private cachedToolbarWidth;
    readonly inputUri: any;
    constructor(location: ChatAgentLocation, options: IChatInputPartOptions, getInputState: () => any, historyService: IChatWidgetHistoryService, modelService: IModelService, instantiationService: IInstantiationService, contextKeyService: IContextKeyService, configurationService: IConfigurationService, keybindingService: IKeybindingService, accessibilityService: IAccessibilityService, logService: ILogService);
    private loadHistory;
    private _getAriaLabel;
    updateState(inputState: Object): void;
    initForNewChatModel(inputValue: string | undefined, inputState: Object): void;
    logInputHistory(): void;
    setVisible(visible: boolean): void;
    get element(): HTMLElement;
    showPreviousValue(): void;
    showNextValue(): void;
    private navigateHistory;
    setValue(value: string, transient: boolean): void;
    private saveCurrentValue;
    focus(): void;
    hasFocus(): boolean;
    /**
     * Reset the input and update history.
     * @param userQuery If provided, this will be added to the history. Followups and programmatic queries should not be passed.
     */
    acceptInput(isUserQuery?: boolean): Promise<void>;
    private _acceptInputForVoiceover;
    attachContext(overwrite: boolean, ...contentReferences: IChatRequestVariableEntry[]): void;
    render(container: HTMLElement, initialValue: string, widget: IChatWidget): void;
    private initAttachedContext;
    renderFollowups(items: IChatFollowup[] | undefined, response: IChatResponseViewModel | undefined): Promise<void>;
    get contentHeight(): number;
    layout(height: number, width: number): void;
    private previousInputEditorDimension;
    private _layout;
    private getLayoutData;
    saveState(): void;
}
export {};
