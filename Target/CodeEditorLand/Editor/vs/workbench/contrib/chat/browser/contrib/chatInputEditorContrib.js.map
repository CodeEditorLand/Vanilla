{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/contrib/chatInputEditorContrib.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from \"../../../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { ICodeEditorService } from \"../../../../../editor/browser/services/codeEditorService.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type { IDecorationOptions } from \"../../../../../editor/common/editorCommon.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { inputPlaceholderForeground } from \"../../../../../platform/theme/common/colorRegistry.js\";\nimport { IThemeService } from \"../../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype IChatAgentCommand,\n\ttype IChatAgentData,\n\tIChatAgentService,\n} from \"../../common/chatAgents.js\";\nimport {\n\tchatSlashCommandBackground,\n\tchatSlashCommandForeground,\n} from \"../../common/chatColors.js\";\nimport {\n\tChatRequestAgentPart,\n\tChatRequestAgentSubcommandPart,\n\tChatRequestSlashCommandPart,\n\tChatRequestTextPart,\n\tChatRequestToolPart,\n\tChatRequestVariablePart,\n\ttype IParsedChatRequestPart,\n\tchatAgentLeader,\n\tchatSubcommandLeader,\n} from \"../../common/chatParserTypes.js\";\nimport { ChatRequestParser } from \"../../common/chatRequestParser.js\";\nimport type { IChatWidget } from \"../chat.js\";\nimport { ChatWidget } from \"../chatWidget.js\";\nimport { dynamicVariableDecorationType } from \"./chatDynamicVariables.js\";\n\nconst decorationDescription = \"chat\";\nconst placeholderDecorationType = \"chat-session-detail\";\nconst slashCommandTextDecorationType = \"chat-session-text\";\nconst variableTextDecorationType = \"chat-variable-text\";\n\nfunction agentAndCommandToKey(\n\tagent: IChatAgentData,\n\tsubcommand: string | undefined,\n): string {\n\treturn subcommand ? `${agent.id}__${subcommand}` : agent.id;\n}\n\nclass InputEditorDecorations extends Disposable {\n\tpublic readonly id = \"inputEditorDecorations\";\n\n\tprivate readonly previouslyUsedAgents = new Set<string>();\n\n\tprivate readonly viewModelDisposables = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly widget: IChatWidget,\n\t\t@ICodeEditorService\n\t\tprivate readonly codeEditorService: ICodeEditorService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t) {\n\t\tsuper();\n\n\t\tthis.codeEditorService.registerDecorationType(\n\t\t\tdecorationDescription,\n\t\t\tplaceholderDecorationType,\n\t\t\t{},\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.themeService.onDidColorThemeChange(() =>\n\t\t\t\tthis.updateRegisteredDecorationTypes(),\n\t\t\t),\n\t\t);\n\t\tthis.updateRegisteredDecorationTypes();\n\n\t\tthis.updateInputEditorDecorations();\n\t\tthis._register(\n\t\t\tthis.widget.inputEditor.onDidChangeModelContent(() =>\n\t\t\t\tthis.updateInputEditorDecorations(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.widget.onDidChangeParsedInput(() =>\n\t\t\t\tthis.updateInputEditorDecorations(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.widget.onDidChangeViewModel(() => {\n\t\t\t\tthis.registerViewModelListeners();\n\t\t\t\tthis.previouslyUsedAgents.clear();\n\t\t\t\tthis.updateInputEditorDecorations();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.widget.onDidSubmitAgent((e) => {\n\t\t\t\tthis.previouslyUsedAgents.add(\n\t\t\t\t\tagentAndCommandToKey(e.agent, e.slashCommand?.name),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.chatAgentService.onDidChangeAgents(() =>\n\t\t\t\tthis.updateInputEditorDecorations(),\n\t\t\t),\n\t\t);\n\n\t\tthis.registerViewModelListeners();\n\t}\n\n\tprivate registerViewModelListeners(): void {\n\t\tthis.viewModelDisposables.value = this.widget.viewModel?.onDidChange(\n\t\t\t(e) => {\n\t\t\t\tif (\n\t\t\t\t\te?.kind === \"changePlaceholder\" ||\n\t\t\t\t\te?.kind === \"initialize\"\n\t\t\t\t) {\n\t\t\t\t\tthis.updateInputEditorDecorations();\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate updateRegisteredDecorationTypes() {\n\t\tthis.codeEditorService.removeDecorationType(variableTextDecorationType);\n\t\tthis.codeEditorService.removeDecorationType(\n\t\t\tdynamicVariableDecorationType,\n\t\t);\n\t\tthis.codeEditorService.removeDecorationType(\n\t\t\tslashCommandTextDecorationType,\n\t\t);\n\n\t\tconst theme = this.themeService.getColorTheme();\n\t\tthis.codeEditorService.registerDecorationType(\n\t\t\tdecorationDescription,\n\t\t\tslashCommandTextDecorationType,\n\t\t\t{\n\t\t\t\tcolor: theme.getColor(chatSlashCommandForeground)?.toString(),\n\t\t\t\tbackgroundColor: theme\n\t\t\t\t\t.getColor(chatSlashCommandBackground)\n\t\t\t\t\t?.toString(),\n\t\t\t\tborderRadius: \"3px\",\n\t\t\t},\n\t\t);\n\t\tthis.codeEditorService.registerDecorationType(\n\t\t\tdecorationDescription,\n\t\t\tvariableTextDecorationType,\n\t\t\t{\n\t\t\t\tcolor: theme.getColor(chatSlashCommandForeground)?.toString(),\n\t\t\t\tbackgroundColor: theme\n\t\t\t\t\t.getColor(chatSlashCommandBackground)\n\t\t\t\t\t?.toString(),\n\t\t\t\tborderRadius: \"3px\",\n\t\t\t},\n\t\t);\n\t\tthis.codeEditorService.registerDecorationType(\n\t\t\tdecorationDescription,\n\t\t\tdynamicVariableDecorationType,\n\t\t\t{\n\t\t\t\tcolor: theme.getColor(chatSlashCommandForeground)?.toString(),\n\t\t\t\tbackgroundColor: theme\n\t\t\t\t\t.getColor(chatSlashCommandBackground)\n\t\t\t\t\t?.toString(),\n\t\t\t\tborderRadius: \"3px\",\n\t\t\t},\n\t\t);\n\t\tthis.updateInputEditorDecorations();\n\t}\n\n\tprivate getPlaceholderColor(): string | undefined {\n\t\tconst theme = this.themeService.getColorTheme();\n\t\tconst transparentForeground = theme.getColor(\n\t\t\tinputPlaceholderForeground,\n\t\t);\n\t\treturn transparentForeground?.toString();\n\t}\n\n\tprivate async updateInputEditorDecorations() {\n\t\tconst inputValue = this.widget.inputEditor.getValue();\n\n\t\tconst viewModel = this.widget.viewModel;\n\t\tif (!viewModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!inputValue) {\n\t\t\tconst defaultAgent = this.chatAgentService.getDefaultAgent(\n\t\t\t\tthis.widget.location,\n\t\t\t);\n\t\t\tconst decoration: IDecorationOptions[] = [\n\t\t\t\t{\n\t\t\t\t\trange: {\n\t\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\t\tendLineNumber: 1,\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tendColumn: 1000,\n\t\t\t\t\t},\n\t\t\t\t\trenderOptions: {\n\t\t\t\t\t\tafter: {\n\t\t\t\t\t\t\tcontentText:\n\t\t\t\t\t\t\t\tviewModel.inputPlaceholder ||\n\t\t\t\t\t\t\t\t(defaultAgent?.description ?? \"\"),\n\t\t\t\t\t\t\tcolor: this.getPlaceholderColor(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t];\n\t\t\tthis.widget.inputEditor.setDecorationsByType(\n\t\t\t\tdecorationDescription,\n\t\t\t\tplaceholderDecorationType,\n\t\t\t\tdecoration,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst parsedRequest = this.widget.parsedInput.parts;\n\n\t\tlet placeholderDecoration: IDecorationOptions[] | undefined;\n\t\tconst agentPart = parsedRequest.find(\n\t\t\t(p): p is ChatRequestAgentPart => p instanceof ChatRequestAgentPart,\n\t\t);\n\t\tconst agentSubcommandPart = parsedRequest.find(\n\t\t\t(p): p is ChatRequestAgentSubcommandPart =>\n\t\t\t\tp instanceof ChatRequestAgentSubcommandPart,\n\t\t);\n\t\tconst slashCommandPart = parsedRequest.find(\n\t\t\t(p): p is ChatRequestSlashCommandPart =>\n\t\t\t\tp instanceof ChatRequestSlashCommandPart,\n\t\t);\n\n\t\tconst exactlyOneSpaceAfterPart = (\n\t\t\tpart: IParsedChatRequestPart,\n\t\t): boolean => {\n\t\t\tconst partIdx = parsedRequest.indexOf(part);\n\t\t\tif (parsedRequest.length > partIdx + 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst nextPart = parsedRequest[partIdx + 1];\n\t\t\treturn (\n\t\t\t\tnextPart &&\n\t\t\t\tnextPart instanceof ChatRequestTextPart &&\n\t\t\t\tnextPart.text === \" \"\n\t\t\t);\n\t\t};\n\n\t\tconst getRangeForPlaceholder = (part: IParsedChatRequestPart) => ({\n\t\t\tstartLineNumber: part.editorRange.startLineNumber,\n\t\t\tendLineNumber: part.editorRange.endLineNumber,\n\t\t\tstartColumn: part.editorRange.endColumn + 1,\n\t\t\tendColumn: 1000,\n\t\t});\n\n\t\tconst onlyAgentAndWhitespace =\n\t\t\tagentPart &&\n\t\t\tparsedRequest.every(\n\t\t\t\t(p) =>\n\t\t\t\t\t(p instanceof ChatRequestTextPart &&\n\t\t\t\t\t\t!p.text.trim().length) ||\n\t\t\t\t\tp instanceof ChatRequestAgentPart,\n\t\t\t);\n\t\tif (onlyAgentAndWhitespace) {\n\t\t\t// Agent reference with no other text - show the placeholder\n\t\t\tconst isFollowupSlashCommand = this.previouslyUsedAgents.has(\n\t\t\t\tagentAndCommandToKey(agentPart.agent, undefined),\n\t\t\t);\n\t\t\tconst shouldRenderFollowupPlaceholder =\n\t\t\t\tisFollowupSlashCommand &&\n\t\t\t\tagentPart.agent.metadata.followupPlaceholder;\n\t\t\tif (\n\t\t\t\tagentPart.agent.description &&\n\t\t\t\texactlyOneSpaceAfterPart(agentPart)\n\t\t\t) {\n\t\t\t\tplaceholderDecoration = [\n\t\t\t\t\t{\n\t\t\t\t\t\trange: getRangeForPlaceholder(agentPart),\n\t\t\t\t\t\trenderOptions: {\n\t\t\t\t\t\t\tafter: {\n\t\t\t\t\t\t\t\tcontentText: shouldRenderFollowupPlaceholder\n\t\t\t\t\t\t\t\t\t? agentPart.agent.metadata\n\t\t\t\t\t\t\t\t\t\t\t.followupPlaceholder\n\t\t\t\t\t\t\t\t\t: agentPart.agent.description,\n\t\t\t\t\t\t\t\tcolor: this.getPlaceholderColor(),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\tconst onlyAgentAndAgentCommandAndWhitespace =\n\t\t\tagentPart &&\n\t\t\tagentSubcommandPart &&\n\t\t\tparsedRequest.every(\n\t\t\t\t(p) =>\n\t\t\t\t\t(p instanceof ChatRequestTextPart &&\n\t\t\t\t\t\t!p.text.trim().length) ||\n\t\t\t\t\tp instanceof ChatRequestAgentPart ||\n\t\t\t\t\tp instanceof ChatRequestAgentSubcommandPart,\n\t\t\t);\n\t\tif (onlyAgentAndAgentCommandAndWhitespace) {\n\t\t\t// Agent reference and subcommand with no other text - show the placeholder\n\t\t\tconst isFollowupSlashCommand = this.previouslyUsedAgents.has(\n\t\t\t\tagentAndCommandToKey(\n\t\t\t\t\tagentPart.agent,\n\t\t\t\t\tagentSubcommandPart.command.name,\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst shouldRenderFollowupPlaceholder =\n\t\t\t\tisFollowupSlashCommand &&\n\t\t\t\tagentSubcommandPart.command.followupPlaceholder;\n\t\t\tif (\n\t\t\t\tagentSubcommandPart?.command.description &&\n\t\t\t\texactlyOneSpaceAfterPart(agentSubcommandPart)\n\t\t\t) {\n\t\t\t\tplaceholderDecoration = [\n\t\t\t\t\t{\n\t\t\t\t\t\trange: getRangeForPlaceholder(agentSubcommandPart),\n\t\t\t\t\t\trenderOptions: {\n\t\t\t\t\t\t\tafter: {\n\t\t\t\t\t\t\t\tcontentText: shouldRenderFollowupPlaceholder\n\t\t\t\t\t\t\t\t\t? agentSubcommandPart.command\n\t\t\t\t\t\t\t\t\t\t\t.followupPlaceholder\n\t\t\t\t\t\t\t\t\t: agentSubcommandPart.command.description,\n\t\t\t\t\t\t\t\tcolor: this.getPlaceholderColor(),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\tconst onlyAgentCommandAndWhitespace =\n\t\t\tagentSubcommandPart &&\n\t\t\tparsedRequest.every(\n\t\t\t\t(p) =>\n\t\t\t\t\t(p instanceof ChatRequestTextPart &&\n\t\t\t\t\t\t!p.text.trim().length) ||\n\t\t\t\t\tp instanceof ChatRequestAgentSubcommandPart,\n\t\t\t);\n\t\tif (onlyAgentCommandAndWhitespace) {\n\t\t\t// Agent subcommand with no other text - show the placeholder\n\t\t\tif (\n\t\t\t\tagentSubcommandPart?.command.description &&\n\t\t\t\texactlyOneSpaceAfterPart(agentSubcommandPart)\n\t\t\t) {\n\t\t\t\tplaceholderDecoration = [\n\t\t\t\t\t{\n\t\t\t\t\t\trange: getRangeForPlaceholder(agentSubcommandPart),\n\t\t\t\t\t\trenderOptions: {\n\t\t\t\t\t\t\tafter: {\n\t\t\t\t\t\t\t\tcontentText:\n\t\t\t\t\t\t\t\t\tagentSubcommandPart.command.description,\n\t\t\t\t\t\t\t\tcolor: this.getPlaceholderColor(),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\tthis.widget.inputEditor.setDecorationsByType(\n\t\t\tdecorationDescription,\n\t\t\tplaceholderDecorationType,\n\t\t\tplaceholderDecoration ?? [],\n\t\t);\n\n\t\tconst textDecorations: IDecorationOptions[] | undefined = [];\n\t\tif (agentPart) {\n\t\t\ttextDecorations.push({ range: agentPart.editorRange });\n\t\t}\n\t\tif (agentSubcommandPart) {\n\t\t\ttextDecorations.push({\n\t\t\t\trange: agentSubcommandPart.editorRange,\n\t\t\t\thoverMessage: new MarkdownString(\n\t\t\t\t\tagentSubcommandPart.command.description,\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\tif (slashCommandPart) {\n\t\t\ttextDecorations.push({ range: slashCommandPart.editorRange });\n\t\t}\n\n\t\tthis.widget.inputEditor.setDecorationsByType(\n\t\t\tdecorationDescription,\n\t\t\tslashCommandTextDecorationType,\n\t\t\ttextDecorations,\n\t\t);\n\n\t\tconst varDecorations: IDecorationOptions[] = [];\n\t\tconst variableParts = parsedRequest.filter(\n\t\t\t(p): p is ChatRequestVariablePart =>\n\t\t\t\tp instanceof ChatRequestVariablePart,\n\t\t);\n\t\tfor (const variable of variableParts) {\n\t\t\tvarDecorations.push({ range: variable.editorRange });\n\t\t}\n\n\t\tconst toolParts = parsedRequest.filter(\n\t\t\t(p): p is ChatRequestToolPart => p instanceof ChatRequestToolPart,\n\t\t);\n\t\tfor (const tool of toolParts) {\n\t\t\tvarDecorations.push({ range: tool.editorRange });\n\t\t}\n\n\t\tthis.widget.inputEditor.setDecorationsByType(\n\t\t\tdecorationDescription,\n\t\t\tvariableTextDecorationType,\n\t\t\tvarDecorations,\n\t\t);\n\t}\n}\n\nclass InputEditorSlashCommandMode extends Disposable {\n\tpublic readonly id = \"InputEditorSlashCommandMode\";\n\n\tconstructor(private readonly widget: IChatWidget) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tthis.widget.onDidChangeAgent((e) => {\n\t\t\t\tif (\n\t\t\t\t\t(e.slashCommand && e.slashCommand.isSticky) ||\n\t\t\t\t\t(!e.slashCommand && e.agent.metadata.isSticky)\n\t\t\t\t) {\n\t\t\t\t\tthis.repopulateAgentCommand(e.agent, e.slashCommand);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.widget.onDidSubmitAgent((e) => {\n\t\t\t\tthis.repopulateAgentCommand(e.agent, e.slashCommand);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async repopulateAgentCommand(\n\t\tagent: IChatAgentData,\n\t\tslashCommand: IChatAgentCommand | undefined,\n\t) {\n\t\t// Make sure we don't repopulate if the user already has something in the input\n\t\tif (this.widget.inputEditor.getValue().trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet value: string | undefined;\n\t\tif (slashCommand && slashCommand.isSticky) {\n\t\t\tvalue = `${chatAgentLeader}${agent.name} ${chatSubcommandLeader}${slashCommand.name} `;\n\t\t} else if (agent.metadata.isSticky) {\n\t\t\tvalue = `${chatAgentLeader}${agent.name} `;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis.widget.inputEditor.setValue(value);\n\t\t\tthis.widget.inputEditor.setPosition({\n\t\t\t\tlineNumber: 1,\n\t\t\t\tcolumn: value.length + 1,\n\t\t\t});\n\t\t}\n\t}\n}\n\nChatWidget.CONTRIBS.push(InputEditorDecorations, InputEditorSlashCommandMode);\n\nclass ChatTokenDeleter extends Disposable {\n\tpublic readonly id = \"chatTokenDeleter\";\n\n\tconstructor(\n\t\tprivate readonly widget: IChatWidget,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tconst parser =\n\t\t\tthis.instantiationService.createInstance(ChatRequestParser);\n\t\tconst inputValue = this.widget.inputEditor.getValue();\n\t\tlet previousInputValue: string | undefined;\n\t\tlet previousSelectedAgent: IChatAgentData | undefined;\n\n\t\t// A simple heuristic to delete the previous token when the user presses backspace.\n\t\t// The sophisticated way to do this would be to have a parse tree that can be updated incrementally.\n\t\tthis._register(\n\t\t\tthis.widget.inputEditor.onDidChangeModelContent((e) => {\n\t\t\t\tif (!previousInputValue) {\n\t\t\t\t\tpreviousInputValue = inputValue;\n\t\t\t\t\tpreviousSelectedAgent = this.widget.lastSelectedAgent;\n\t\t\t\t}\n\n\t\t\t\t// Don't try to handle multicursor edits right now\n\t\t\t\tconst change = e.changes[0];\n\n\t\t\t\t// If this was a simple delete, try to find out whether it was inside a token\n\t\t\t\tif (!change.text && this.widget.viewModel) {\n\t\t\t\t\tconst previousParsedValue = parser.parseChatRequest(\n\t\t\t\t\t\tthis.widget.viewModel.sessionId,\n\t\t\t\t\t\tpreviousInputValue,\n\t\t\t\t\t\twidget.location,\n\t\t\t\t\t\t{ selectedAgent: previousSelectedAgent },\n\t\t\t\t\t);\n\n\t\t\t\t\t// For dynamic variables, this has to happen in ChatDynamicVariableModel with the other bookkeeping\n\t\t\t\t\tconst deletableTokens = previousParsedValue.parts.filter(\n\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\tp instanceof ChatRequestAgentPart ||\n\t\t\t\t\t\t\tp instanceof ChatRequestAgentSubcommandPart ||\n\t\t\t\t\t\t\tp instanceof ChatRequestSlashCommandPart ||\n\t\t\t\t\t\t\tp instanceof ChatRequestVariablePart ||\n\t\t\t\t\t\t\tp instanceof ChatRequestToolPart,\n\t\t\t\t\t);\n\t\t\t\t\tdeletableTokens.forEach((token) => {\n\t\t\t\t\t\tconst deletedRangeOfToken = Range.intersectRanges(\n\t\t\t\t\t\t\ttoken.editorRange,\n\t\t\t\t\t\t\tchange.range,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// Part of this token was deleted, or the space after it was deleted, and the deletion range doesn't go off the front of the token, for simpler math\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tdeletedRangeOfToken &&\n\t\t\t\t\t\t\tRange.compareRangesUsingStarts(\n\t\t\t\t\t\t\t\ttoken.editorRange,\n\t\t\t\t\t\t\t\tchange.range,\n\t\t\t\t\t\t\t) < 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Assume single line tokens\n\t\t\t\t\t\t\tconst length =\n\t\t\t\t\t\t\t\tdeletedRangeOfToken.endColumn -\n\t\t\t\t\t\t\t\tdeletedRangeOfToken.startColumn;\n\t\t\t\t\t\t\tconst rangeToDelete = new Range(\n\t\t\t\t\t\t\t\ttoken.editorRange.startLineNumber,\n\t\t\t\t\t\t\t\ttoken.editorRange.startColumn,\n\t\t\t\t\t\t\t\ttoken.editorRange.endLineNumber,\n\t\t\t\t\t\t\t\ttoken.editorRange.endColumn - length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.widget.inputEditor.executeEdits(this.id, [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trange: rangeToDelete,\n\t\t\t\t\t\t\t\t\ttext: \"\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpreviousInputValue = this.widget.inputEditor.getValue();\n\t\t\t\tpreviousSelectedAgent = this.widget.lastSelectedAgent;\n\t\t\t}),\n\t\t);\n\t}\n}\nChatWidget.CONTRIBS.push(ChatTokenDeleter);\n"],
  "mappings": "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",
  "names": []
}
