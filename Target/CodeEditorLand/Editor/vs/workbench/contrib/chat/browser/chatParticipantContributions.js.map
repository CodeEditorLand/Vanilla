{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatParticipantContributions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, isNonEmptyArray } from \"../../../../base/common/arrays.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport {\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tContextKeyExpr,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { Severity } from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { ViewPaneContainer } from \"../../../browser/parts/views/viewPaneContainer.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\ttype IViewContainersRegistry,\n\ttype IViewDescriptor,\n\ttype IViewsRegistry,\n\ttype ViewContainer,\n\tViewContainerLocation,\n\tExtensions as ViewExtensions,\n} from \"../../../common/views.js\";\nimport { isProposedApiEnabled } from \"../../../services/extensions/common/extensions.js\";\nimport * as extensionsRegistry from \"../../../services/extensions/common/extensionsRegistry.js\";\nimport { showExtensionsWithIdsCommandId } from \"../../extensions/browser/extensionsActions.js\";\nimport { IExtensionsWorkbenchService } from \"../../extensions/common/extensions.js\";\nimport {\n\tChatAgentLocation,\n\ttype IChatAgentData,\n\tIChatAgentService,\n} from \"../common/chatAgents.js\";\nimport {\n\tCONTEXT_CHAT_EXTENSION_INVALID,\n\tCONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED,\n} from \"../common/chatContextKeys.js\";\nimport type { IRawChatParticipantContribution } from \"../common/chatParticipantContribTypes.js\";\nimport { CHAT_VIEW_ID } from \"./chat.js\";\nimport { CHAT_SIDEBAR_PANEL_ID, ChatViewPane } from \"./chatViewPane.js\";\n\nconst chatParticipantExtensionPoint =\n\textensionsRegistry.ExtensionsRegistry.registerExtensionPoint<\n\t\tIRawChatParticipantContribution[]\n\t>({\n\t\textensionPoint: \"chatParticipants\",\n\t\tjsonSchema: {\n\t\t\tdescription: localize(\n\t\t\t\t\"vscode.extension.contributes.chatParticipant\",\n\t\t\t\t\"Contributes a chat participant\",\n\t\t\t),\n\t\t\ttype: \"array\",\n\t\t\titems: {\n\t\t\t\tadditionalProperties: false,\n\t\t\t\ttype: \"object\",\n\t\t\t\tdefaultSnippets: [{ body: { name: \"\", description: \"\" } }],\n\t\t\t\trequired: [\"name\", \"id\"],\n\t\t\t\tproperties: {\n\t\t\t\t\tid: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatParticipantId\",\n\t\t\t\t\t\t\t\"A unique id for this chat participant.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatParticipantName\",\n\t\t\t\t\t\t\t\"User-facing name for this chat participant. The user will use '@' with this name to invoke the participant. Name must not contain whitespace.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tpattern: \"^[\\\\w-]+$\",\n\t\t\t\t\t},\n\t\t\t\t\tfullName: {\n\t\t\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\t\t\"chatParticipantFullName\",\n\t\t\t\t\t\t\t\"The full name of this chat participant, which is shown as the label for responses coming from this participant. If not provided, {0} is used.\",\n\t\t\t\t\t\t\t\"`name`\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatParticipantDescription\",\n\t\t\t\t\t\t\t\"A description of this chat participant, shown in the UI.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tisSticky: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatCommandSticky\",\n\t\t\t\t\t\t\t\"Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t},\n\t\t\t\t\tsampleRequest: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatSampleRequest\",\n\t\t\t\t\t\t\t\"When the user clicks this participant in `/help`, this text will be submitted to the participant.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\twhen: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatParticipantWhen\",\n\t\t\t\t\t\t\t\"A condition which must be true to enable this participant.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tdisambiguation: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatParticipantDisambiguation\",\n\t\t\t\t\t\t\t\"Metadata to help with automatically routing user questions to this chat participant.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\t\t\t\tcategory: \"\",\n\t\t\t\t\t\t\t\t\t\tdescription: \"\",\n\t\t\t\t\t\t\t\t\t\texamples: [],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\trequired: [\"category\", \"description\", \"examples\"],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tcategory: {\n\t\t\t\t\t\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatParticipantDisambiguationCategory\",\n\t\t\t\t\t\t\t\t\t\t\"A detailed name for this category, e.g. `workspace_questions` or `web_questions`.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdescription: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatParticipantDisambiguationDescription\",\n\t\t\t\t\t\t\t\t\t\t\"A detailed description of the kinds of questions that are suitable for this chat participant.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\texamples: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatParticipantDisambiguationExamples\",\n\t\t\t\t\t\t\t\t\t\t\"A list of representative example questions that are suitable for this chat participant.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tcommands: {\n\t\t\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\t\t\"chatCommandsDescription\",\n\t\t\t\t\t\t\t\"Commands available for this chat participant, which the user can invoke with a `/`.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t\t\t\t{ body: { name: \"\", description: \"\" } },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\trequired: [\"name\"],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatCommand\",\n\t\t\t\t\t\t\t\t\t\t\"A short name by which this command is referred to in the UI, e.g. `fix` or * `explain` for commands that fix an issue or explain code. The name should be unique among the commands provided by this participant.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdescription: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatCommandDescription\",\n\t\t\t\t\t\t\t\t\t\t\"A description of this command.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twhen: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatCommandWhen\",\n\t\t\t\t\t\t\t\t\t\t\"A condition which must be true to enable this command.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsampleRequest: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatCommandSampleRequest\",\n\t\t\t\t\t\t\t\t\t\t\"When the user clicks this command in `/help`, this text will be submitted to the participant.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tisSticky: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatCommandSticky\",\n\t\t\t\t\t\t\t\t\t\t\"Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdisambiguation: {\n\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\"chatCommandDisambiguation\",\n\t\t\t\t\t\t\t\t\t\t\"Metadata to help with automatically routing user questions to this chat command.\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcategory: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\texamples: [],\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\trequired: [\n\t\t\t\t\t\t\t\t\t\t\t\"category\",\n\t\t\t\t\t\t\t\t\t\t\t\"description\",\n\t\t\t\t\t\t\t\t\t\t\t\"examples\",\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t\tcategory: {\n\t\t\t\t\t\t\t\t\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"chatCommandDisambiguationCategory\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"A detailed name for this category, e.g. `workspace_questions` or `web_questions`.\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tdescription: {\n\t\t\t\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"chatCommandDisambiguationDescription\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"A detailed description of the kinds of questions that are suitable for this chat command.\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\texamples: {\n\t\t\t\t\t\t\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"chatCommandDisambiguationExamples\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"A list of representative example questions that are suitable for this chat command.\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tsupportsToolReferences: {\n\t\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\t\"chatParticipantSupportsToolReferences\",\n\t\t\t\t\t\t\t\"Whether this participant supports {0}.\",\n\t\t\t\t\t\t\t\"ChatRequest#toolReferences\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tactivationEventsGenerator: (\n\t\t\tcontributions: IRawChatParticipantContribution[],\n\t\t\tresult: { push(item: string): void },\n\t\t) => {\n\t\t\tfor (const contrib of contributions) {\n\t\t\t\tresult.push(`onChatParticipant:${contrib.id}`);\n\t\t\t}\n\t\t},\n\t});\n\nexport class ChatExtensionPointHandler implements IWorkbenchContribution {\n\tstatic readonly ID = \"workbench.contrib.chatExtensionPointHandler\";\n\n\tprivate _viewContainer: ViewContainer;\n\tprivate _participantRegistrationDisposables = new DisposableMap<string>();\n\n\tconstructor(\n\t\t@IChatAgentService\n\t\tprivate readonly _chatAgentService: IChatAgentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tthis._viewContainer = this.registerViewContainer();\n\t\tthis.registerDefaultParticipantView();\n\t\tthis.handleAndRegisterChatExtensions();\n\t}\n\n\tprivate handleAndRegisterChatExtensions(): void {\n\t\tchatParticipantExtensionPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tfor (const providerDescriptor of extension.value) {\n\t\t\t\t\tif (!providerDescriptor.name?.match(/^[\\w-]+$/)) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Extension '${extension.description.identifier.value}' CANNOT register participant with invalid name: ${providerDescriptor.name}. Name must match /^[\\\\w-]+$/.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tproviderDescriptor.fullName &&\n\t\t\t\t\t\tstrings.AmbiguousCharacters.getInstance(\n\t\t\t\t\t\t\tnew Set(),\n\t\t\t\t\t\t).containsAmbiguousCharacter(\n\t\t\t\t\t\t\tproviderDescriptor.fullName,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Extension '${extension.description.identifier.value}' CANNOT register participant with fullName that contains ambiguous characters: ${providerDescriptor.fullName}.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Spaces are allowed but considered \"invisible\"\n\t\t\t\t\tif (\n\t\t\t\t\t\tproviderDescriptor.fullName &&\n\t\t\t\t\t\tstrings.InvisibleCharacters.containsInvisibleCharacter(\n\t\t\t\t\t\t\tproviderDescriptor.fullName.replace(/ /g, \"\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Extension '${extension.description.identifier.value}' CANNOT register participant with fullName that contains invisible characters: ${providerDescriptor.fullName}.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tproviderDescriptor.isDefault &&\n\t\t\t\t\t\t!isProposedApiEnabled(\n\t\t\t\t\t\t\textension.description,\n\t\t\t\t\t\t\t\"defaultChatParticipant\",\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Extension '${extension.description.identifier.value}' CANNOT use API proposal: defaultChatParticipant.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(providerDescriptor.defaultImplicitVariables ||\n\t\t\t\t\t\t\tproviderDescriptor.locations) &&\n\t\t\t\t\t\t!isProposedApiEnabled(\n\t\t\t\t\t\t\textension.description,\n\t\t\t\t\t\t\t\"chatParticipantAdditions\",\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Extension '${extension.description.identifier.value}' CANNOT use API proposal: chatParticipantAdditions.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!providerDescriptor.id || !providerDescriptor.name) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Extension '${extension.description.identifier.value}' CANNOT register participant without both id and name.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst participantsAndCommandsDisambiguation: {\n\t\t\t\t\t\tcategory: string;\n\t\t\t\t\t\tdescription: string;\n\t\t\t\t\t\texamples: string[];\n\t\t\t\t\t}[] = [];\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tisProposedApiEnabled(\n\t\t\t\t\t\t\textension.description,\n\t\t\t\t\t\t\t\"contribChatParticipantDetection\",\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (providerDescriptor.disambiguation?.length) {\n\t\t\t\t\t\t\tparticipantsAndCommandsDisambiguation.push(\n\t\t\t\t\t\t\t\t...providerDescriptor.disambiguation.map(\n\t\t\t\t\t\t\t\t\t(d) => ({\n\t\t\t\t\t\t\t\t\t\t...d,\n\t\t\t\t\t\t\t\t\t\tcategory: d.category ?? d.categoryName,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (providerDescriptor.commands) {\n\t\t\t\t\t\t\tfor (const command of providerDescriptor.commands) {\n\t\t\t\t\t\t\t\tif (command.disambiguation?.length) {\n\t\t\t\t\t\t\t\t\tparticipantsAndCommandsDisambiguation.push(\n\t\t\t\t\t\t\t\t\t\t...command.disambiguation.map((d) => ({\n\t\t\t\t\t\t\t\t\t\t\t...d,\n\t\t\t\t\t\t\t\t\t\t\tcategory:\n\t\t\t\t\t\t\t\t\t\t\t\td.category ?? d.categoryName,\n\t\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst store = new DisposableStore();\n\t\t\t\t\tstore.add(\n\t\t\t\t\t\tthis._chatAgentService.registerAgent(\n\t\t\t\t\t\t\tproviderDescriptor.id,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\textensionId: extension.description.identifier,\n\t\t\t\t\t\t\t\tpublisherDisplayName:\n\t\t\t\t\t\t\t\t\textension.description\n\t\t\t\t\t\t\t\t\t\t.publisherDisplayName ??\n\t\t\t\t\t\t\t\t\textension.description.publisher, // May not be present in OSS\n\t\t\t\t\t\t\t\textensionPublisherId:\n\t\t\t\t\t\t\t\t\textension.description.publisher,\n\t\t\t\t\t\t\t\textensionDisplayName:\n\t\t\t\t\t\t\t\t\textension.description.displayName ??\n\t\t\t\t\t\t\t\t\textension.description.name,\n\t\t\t\t\t\t\t\tid: providerDescriptor.id,\n\t\t\t\t\t\t\t\tdescription: providerDescriptor.description,\n\t\t\t\t\t\t\t\twhen: providerDescriptor.when,\n\t\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\t\tisSticky: providerDescriptor.isSticky,\n\t\t\t\t\t\t\t\t\tsampleRequest:\n\t\t\t\t\t\t\t\t\t\tproviderDescriptor.sampleRequest,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tname: providerDescriptor.name,\n\t\t\t\t\t\t\t\tfullName: providerDescriptor.fullName,\n\t\t\t\t\t\t\t\tisDefault: providerDescriptor.isDefault,\n\t\t\t\t\t\t\t\tlocations: isNonEmptyArray(\n\t\t\t\t\t\t\t\t\tproviderDescriptor.locations,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t? providerDescriptor.locations.map(\n\t\t\t\t\t\t\t\t\t\t\tChatAgentLocation.fromRaw,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: [ChatAgentLocation.Panel],\n\t\t\t\t\t\t\t\tslashCommands:\n\t\t\t\t\t\t\t\t\tproviderDescriptor.commands ?? [],\n\t\t\t\t\t\t\t\tdisambiguation: coalesce(\n\t\t\t\t\t\t\t\t\tparticipantsAndCommandsDisambiguation.flat(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tsupportsToolReferences:\n\t\t\t\t\t\t\t\t\tproviderDescriptor.supportsToolReferences,\n\t\t\t\t\t\t\t} satisfies IChatAgentData,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tthis._participantRegistrationDisposables.set(\n\t\t\t\t\t\tgetParticipantKey(\n\t\t\t\t\t\t\textension.description.identifier,\n\t\t\t\t\t\t\tproviderDescriptor.id,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tstore,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tfor (const providerDescriptor of extension.value) {\n\t\t\t\t\tthis._participantRegistrationDisposables.deleteAndDispose(\n\t\t\t\t\t\tgetParticipantKey(\n\t\t\t\t\t\t\textension.description.identifier,\n\t\t\t\t\t\t\tproviderDescriptor.id,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerViewContainer(): ViewContainer {\n\t\t// Register View Container\n\t\tconst title = localize2(\"chat.viewContainer.label\", \"Chat\");\n\t\tconst icon = Codicon.commentDiscussion;\n\t\tconst viewContainerId = CHAT_SIDEBAR_PANEL_ID;\n\t\tconst viewContainer: ViewContainer =\n\t\t\tRegistry.as<IViewContainersRegistry>(\n\t\t\t\tViewExtensions.ViewContainersRegistry,\n\t\t\t).registerViewContainer(\n\t\t\t\t{\n\t\t\t\t\tid: viewContainerId,\n\t\t\t\t\ttitle,\n\t\t\t\t\ticon,\n\t\t\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [\n\t\t\t\t\t\tviewContainerId,\n\t\t\t\t\t\t{ mergeViewWithContainerWhenSingleView: true },\n\t\t\t\t\t]),\n\t\t\t\t\tstorageId: viewContainerId,\n\t\t\t\t\thideIfEmpty: true,\n\t\t\t\t\torder: 100,\n\t\t\t\t},\n\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t);\n\n\t\treturn viewContainer;\n\t}\n\n\tprivate registerDefaultParticipantView(): IDisposable {\n\t\t// Register View. Name must be hardcoded because we want to show it even when the extension fails to load due to an API version incompatibility.\n\t\tconst name = \"GitHub Copilot\";\n\t\tconst viewDescriptor: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: CHAT_VIEW_ID,\n\t\t\t\tcontainerIcon: this._viewContainer.icon,\n\t\t\t\tcontainerTitle: this._viewContainer.title.value,\n\t\t\t\tsingleViewPaneContainerTitle: this._viewContainer.title.value,\n\t\t\t\tname: { value: name, original: name },\n\t\t\t\tcanToggleVisibility: false,\n\t\t\t\tcanMoveView: true,\n\t\t\t\tctorDescriptor: new SyncDescriptor(ChatViewPane),\n\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\tCONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED,\n\t\t\t\t\tCONTEXT_CHAT_EXTENSION_INVALID,\n\t\t\t\t),\n\t\t\t},\n\t\t];\n\t\tRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).registerViews(\n\t\t\tviewDescriptor,\n\t\t\tthis._viewContainer,\n\t\t);\n\n\t\treturn toDisposable(() => {\n\t\t\tRegistry.as<IViewsRegistry>(\n\t\t\t\tViewExtensions.ViewsRegistry,\n\t\t\t).deregisterViews(viewDescriptor, this._viewContainer);\n\t\t});\n\t}\n}\n\nfunction getParticipantKey(\n\textensionId: ExtensionIdentifier,\n\tparticipantName: string,\n): string {\n\treturn `${extensionId.value}_${participantName}`;\n}\n\nexport class ChatCompatibilityNotifier implements IWorkbenchContribution {\n\tstatic readonly ID = \"workbench.contrib.chatCompatNotifier\";\n\n\tconstructor(\n\t\t@IExtensionsWorkbenchService\n\t\textensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService,\n\t\t@IProductService productService: IProductService,\n\t) {\n\t\t// It may be better to have some generic UI for this, for any extension that is incompatible,\n\t\t// but this is only enabled for Copilot Chat now and it needs to be obvious.\n\t\tconst isInvalid =\n\t\t\tCONTEXT_CHAT_EXTENSION_INVALID.bindTo(contextKeyService);\n\t\textensionsWorkbenchService.queryLocal().then((exts) => {\n\t\t\tconst chat = exts.find(\n\t\t\t\t(ext) => ext.identifier.id === \"github.copilot-chat\",\n\t\t\t);\n\t\t\tif (chat?.local?.validations.some((v) => v[0] === Severity.Error)) {\n\t\t\t\tconst showExtensionLabel = localize(\n\t\t\t\t\t\"showExtension\",\n\t\t\t\t\t\"Show Extension\",\n\t\t\t\t);\n\t\t\t\tconst mainMessage = localize(\n\t\t\t\t\t\"chatFailErrorMessage\",\n\t\t\t\t\t\"Chat failed to load because the installed version of the {0} extension is not compatible with this version of {1}. Please ensure that the GitHub Copilot Chat extension is up to date.\",\n\t\t\t\t\t\"GitHub Copilot Chat\",\n\t\t\t\t\tproductService.nameLong,\n\t\t\t\t);\n\t\t\t\tconst commandButton = `[${showExtensionLabel}](command:${showExtensionsWithIdsCommandId}?${encodeURIComponent(JSON.stringify([[\"GitHub.copilot-chat\"]]))})`;\n\t\t\t\tconst versionMessage = `GitHub Copilot Chat version: ${chat.version}`;\n\t\t\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(\n\t\t\t\t\tViewExtensions.ViewsRegistry,\n\t\t\t\t);\n\t\t\t\tviewsRegistry.registerViewWelcomeContent(CHAT_VIEW_ID, {\n\t\t\t\t\tcontent: [mainMessage, commandButton, versionMessage].join(\n\t\t\t\t\t\t\"\\n\\n\",\n\t\t\t\t\t),\n\t\t\t\t\twhen: CONTEXT_CHAT_EXTENSION_INVALID,\n\t\t\t\t});\n\n\t\t\t\t// This catches vscode starting up with the invalid extension, but the extension may still get updated by vscode after this.\n\t\t\t\tisInvalid.set(true);\n\t\t\t}\n\t\t});\n\n\t\tconst listener = chatAgentService.onDidChangeAgents(() => {\n\t\t\tif (chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)) {\n\t\t\t\tisInvalid.set(false);\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
