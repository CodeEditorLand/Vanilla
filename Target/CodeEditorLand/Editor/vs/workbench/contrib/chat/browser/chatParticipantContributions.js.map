{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatParticipantContributions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { DisposableMap, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { Severity } from '../../../../platform/notification/common/notification.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IViewContainersRegistry, IViewDescriptor, IViewsRegistry, ViewContainer, ViewContainerLocation, Extensions as ViewExtensions } from '../../../common/views.js';\nimport { isProposedApiEnabled } from '../../../services/extensions/common/extensions.js';\nimport * as extensionsRegistry from '../../../services/extensions/common/extensionsRegistry.js';\nimport { showExtensionsWithIdsCommandId } from '../../extensions/browser/extensionsActions.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { ChatAgentLocation, IChatAgentData, IChatAgentService } from '../common/chatAgents.js';\nimport { CONTEXT_CHAT_EXTENSION_INVALID, CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED } from '../common/chatContextKeys.js';\nimport { IRawChatParticipantContribution } from '../common/chatParticipantContribTypes.js';\nimport { CHAT_VIEW_ID } from './chat.js';\nimport { CHAT_SIDEBAR_PANEL_ID, ChatViewPane } from './chatViewPane.js';\n\nconst chatParticipantExtensionPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<IRawChatParticipantContribution[]>({\n\textensionPoint: 'chatParticipants',\n\tjsonSchema: {\n\t\tdescription: localize('vscode.extension.contributes.chatParticipant', 'Contributes a chat participant'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\tadditionalProperties: false,\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { name: '', description: '' } }],\n\t\t\trequired: ['name', 'id'],\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\tdescription: localize('chatParticipantId', \"A unique id for this chat participant.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tname: {\n\t\t\t\t\tdescription: localize('chatParticipantName', \"User-facing name for this chat participant. The user will use '@' with this name to invoke the participant. Name must not contain whitespace.\"),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tpattern: '^[\\\\w-]+$'\n\t\t\t\t},\n\t\t\t\tfullName: {\n\t\t\t\t\tmarkdownDescription: localize('chatParticipantFullName', \"The full name of this chat participant, which is shown as the label for responses coming from this participant. If not provided, {0} is used.\", '`name`'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\tdescription: localize('chatParticipantDescription', \"A description of this chat participant, shown in the UI.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tisSticky: {\n\t\t\t\t\tdescription: localize('chatCommandSticky', \"Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message.\"),\n\t\t\t\t\ttype: 'boolean'\n\t\t\t\t},\n\t\t\t\tsampleRequest: {\n\t\t\t\t\tdescription: localize('chatSampleRequest', \"When the user clicks this participant in `/help`, this text will be submitted to the participant.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\tdescription: localize('chatParticipantWhen', \"A condition which must be true to enable this participant.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tdisambiguation: {\n\t\t\t\t\tdescription: localize('chatParticipantDisambiguation', \"Metadata to help with automatically routing user questions to this chat participant.\"),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tdefaultSnippets: [{ body: { category: '', description: '', examples: [] } }],\n\t\t\t\t\t\trequired: ['category', 'description', 'examples'],\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tcategory: {\n\t\t\t\t\t\t\t\tmarkdownDescription: localize('chatParticipantDisambiguationCategory', \"A detailed name for this category, e.g. `workspace_questions` or `web_questions`.\"),\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdescription: {\n\t\t\t\t\t\t\t\tdescription: localize('chatParticipantDisambiguationDescription', \"A detailed description of the kinds of questions that are suitable for this chat participant.\"),\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\texamples: {\n\t\t\t\t\t\t\t\tdescription: localize('chatParticipantDisambiguationExamples', \"A list of representative example questions that are suitable for this chat participant.\"),\n\t\t\t\t\t\t\t\ttype: 'array'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcommands: {\n\t\t\t\t\tmarkdownDescription: localize('chatCommandsDescription', \"Commands available for this chat participant, which the user can invoke with a `/`.\"),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tdefaultSnippets: [{ body: { name: '', description: '' } }],\n\t\t\t\t\t\trequired: ['name'],\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\tdescription: localize('chatCommand', \"A short name by which this command is referred to in the UI, e.g. `fix` or * `explain` for commands that fix an issue or explain code. The name should be unique among the commands provided by this participant.\"),\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdescription: {\n\t\t\t\t\t\t\t\tdescription: localize('chatCommandDescription', \"A description of this command.\"),\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\twhen: {\n\t\t\t\t\t\t\t\tdescription: localize('chatCommandWhen', \"A condition which must be true to enable this command.\"),\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsampleRequest: {\n\t\t\t\t\t\t\t\tdescription: localize('chatCommandSampleRequest', \"When the user clicks this command in `/help`, this text will be submitted to the participant.\"),\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tisSticky: {\n\t\t\t\t\t\t\t\tdescription: localize('chatCommandSticky', \"Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message.\"),\n\t\t\t\t\t\t\t\ttype: 'boolean'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdisambiguation: {\n\t\t\t\t\t\t\t\tdescription: localize('chatCommandDisambiguation', \"Metadata to help with automatically routing user questions to this chat command.\"),\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\t\tdefaultSnippets: [{ body: { category: '', description: '', examples: [] } }],\n\t\t\t\t\t\t\t\t\trequired: ['category', 'description', 'examples'],\n\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\tcategory: {\n\t\t\t\t\t\t\t\t\t\t\tmarkdownDescription: localize('chatCommandDisambiguationCategory', \"A detailed name for this category, e.g. `workspace_questions` or `web_questions`.\"),\n\t\t\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tdescription: {\n\t\t\t\t\t\t\t\t\t\t\tdescription: localize('chatCommandDisambiguationDescription', \"A detailed description of the kinds of questions that are suitable for this chat command.\"),\n\t\t\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\texamples: {\n\t\t\t\t\t\t\t\t\t\t\tdescription: localize('chatCommandDisambiguationExamples', \"A list of representative example questions that are suitable for this chat command.\"),\n\t\t\t\t\t\t\t\t\t\t\ttype: 'array'\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsupportsToolReferences: {\n\t\t\t\t\tdescription: localize('chatParticipantSupportsToolReferences', \"Whether this participant supports {0}.\", 'ChatRequest#toolReferences'),\n\t\t\t\t\ttype: 'boolean'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tactivationEventsGenerator: (contributions: IRawChatParticipantContribution[], result: { push(item: string): void }) => {\n\t\tfor (const contrib of contributions) {\n\t\t\tresult.push(`onChatParticipant:${contrib.id}`);\n\t\t}\n\t},\n});\n\nexport class ChatExtensionPointHandler implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.chatExtensionPointHandler';\n\n\tprivate _viewContainer: ViewContainer;\n\tprivate _participantRegistrationDisposables = new DisposableMap<string>();\n\n\tconstructor(\n\t\t@IChatAgentService private readonly _chatAgentService: IChatAgentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis._viewContainer = this.registerViewContainer();\n\t\tthis.registerDefaultParticipantView();\n\t\tthis.handleAndRegisterChatExtensions();\n\t}\n\n\tprivate handleAndRegisterChatExtensions(): void {\n\t\tchatParticipantExtensionPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tfor (const providerDescriptor of extension.value) {\n\t\t\t\t\tif (!providerDescriptor.name?.match(/^[\\w-]+$/)) {\n\t\t\t\t\t\tthis.logService.error(`Extension '${extension.description.identifier.value}' CANNOT register participant with invalid name: ${providerDescriptor.name}. Name must match /^[\\\\w-]+$/.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (providerDescriptor.fullName && strings.AmbiguousCharacters.getInstance(new Set()).containsAmbiguousCharacter(providerDescriptor.fullName)) {\n\t\t\t\t\t\tthis.logService.error(`Extension '${extension.description.identifier.value}' CANNOT register participant with fullName that contains ambiguous characters: ${providerDescriptor.fullName}.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Spaces are allowed but considered \"invisible\"\n\t\t\t\t\tif (providerDescriptor.fullName && strings.InvisibleCharacters.containsInvisibleCharacter(providerDescriptor.fullName.replace(/ /g, ''))) {\n\t\t\t\t\t\tthis.logService.error(`Extension '${extension.description.identifier.value}' CANNOT register participant with fullName that contains invisible characters: ${providerDescriptor.fullName}.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (providerDescriptor.isDefault && !isProposedApiEnabled(extension.description, 'defaultChatParticipant')) {\n\t\t\t\t\t\tthis.logService.error(`Extension '${extension.description.identifier.value}' CANNOT use API proposal: defaultChatParticipant.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((providerDescriptor.defaultImplicitVariables || providerDescriptor.locations) && !isProposedApiEnabled(extension.description, 'chatParticipantAdditions')) {\n\t\t\t\t\t\tthis.logService.error(`Extension '${extension.description.identifier.value}' CANNOT use API proposal: chatParticipantAdditions.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!providerDescriptor.id || !providerDescriptor.name) {\n\t\t\t\t\t\tthis.logService.error(`Extension '${extension.description.identifier.value}' CANNOT register participant without both id and name.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst participantsAndCommandsDisambiguation: {\n\t\t\t\t\t\tcategory: string;\n\t\t\t\t\t\tdescription: string;\n\t\t\t\t\t\texamples: string[];\n\t\t\t\t\t}[] = [];\n\n\t\t\t\t\tif (isProposedApiEnabled(extension.description, 'contribChatParticipantDetection')) {\n\t\t\t\t\t\tif (providerDescriptor.disambiguation?.length) {\n\t\t\t\t\t\t\tparticipantsAndCommandsDisambiguation.push(...providerDescriptor.disambiguation.map((d) => ({\n\t\t\t\t\t\t\t\t...d, category: d.category ?? d.categoryName\n\t\t\t\t\t\t\t})));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (providerDescriptor.commands) {\n\t\t\t\t\t\t\tfor (const command of providerDescriptor.commands) {\n\t\t\t\t\t\t\t\tif (command.disambiguation?.length) {\n\t\t\t\t\t\t\t\t\tparticipantsAndCommandsDisambiguation.push(...command.disambiguation.map((d) => ({\n\t\t\t\t\t\t\t\t\t\t...d, category: d.category ?? d.categoryName\n\t\t\t\t\t\t\t\t\t})));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst store = new DisposableStore();\n\t\t\t\t\tstore.add(this._chatAgentService.registerAgent(\n\t\t\t\t\t\tproviderDescriptor.id,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\textensionId: extension.description.identifier,\n\t\t\t\t\t\t\tpublisherDisplayName: extension.description.publisherDisplayName ?? extension.description.publisher, // May not be present in OSS\n\t\t\t\t\t\t\textensionPublisherId: extension.description.publisher,\n\t\t\t\t\t\t\textensionDisplayName: extension.description.displayName ?? extension.description.name,\n\t\t\t\t\t\t\tid: providerDescriptor.id,\n\t\t\t\t\t\t\tdescription: providerDescriptor.description,\n\t\t\t\t\t\t\twhen: providerDescriptor.when,\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\tisSticky: providerDescriptor.isSticky,\n\t\t\t\t\t\t\t\tsampleRequest: providerDescriptor.sampleRequest,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tname: providerDescriptor.name,\n\t\t\t\t\t\t\tfullName: providerDescriptor.fullName,\n\t\t\t\t\t\t\tisDefault: providerDescriptor.isDefault,\n\t\t\t\t\t\t\tlocations: isNonEmptyArray(providerDescriptor.locations) ?\n\t\t\t\t\t\t\t\tproviderDescriptor.locations.map(ChatAgentLocation.fromRaw) :\n\t\t\t\t\t\t\t\t[ChatAgentLocation.Panel],\n\t\t\t\t\t\t\tslashCommands: providerDescriptor.commands ?? [],\n\t\t\t\t\t\t\tdisambiguation: coalesce(participantsAndCommandsDisambiguation.flat()),\n\t\t\t\t\t\t\tsupportsToolReferences: providerDescriptor.supportsToolReferences,\n\t\t\t\t\t\t} satisfies IChatAgentData));\n\n\t\t\t\t\tthis._participantRegistrationDisposables.set(\n\t\t\t\t\t\tgetParticipantKey(extension.description.identifier, providerDescriptor.id),\n\t\t\t\t\t\tstore\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tfor (const providerDescriptor of extension.value) {\n\t\t\t\t\tthis._participantRegistrationDisposables.deleteAndDispose(getParticipantKey(extension.description.identifier, providerDescriptor.id));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerViewContainer(): ViewContainer {\n\t\t// Register View Container\n\t\tconst title = localize2('chat.viewContainer.label', \"Chat\");\n\t\tconst icon = Codicon.commentDiscussion;\n\t\tconst viewContainerId = CHAT_SIDEBAR_PANEL_ID;\n\t\tconst viewContainer: ViewContainer = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).registerViewContainer({\n\t\t\tid: viewContainerId,\n\t\t\ttitle,\n\t\t\ticon,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [viewContainerId, { mergeViewWithContainerWhenSingleView: true }]),\n\t\t\tstorageId: viewContainerId,\n\t\t\thideIfEmpty: true,\n\t\t\torder: 100,\n\t\t}, ViewContainerLocation.Sidebar);\n\n\t\treturn viewContainer;\n\t}\n\n\tprivate registerDefaultParticipantView(): IDisposable {\n\t\t// Register View. Name must be hardcoded because we want to show it even when the extension fails to load due to an API version incompatibility.\n\t\tconst name = 'GitHub Copilot';\n\t\tconst viewDescriptor: IViewDescriptor[] = [{\n\t\t\tid: CHAT_VIEW_ID,\n\t\t\tcontainerIcon: this._viewContainer.icon,\n\t\t\tcontainerTitle: this._viewContainer.title.value,\n\t\t\tsingleViewPaneContainerTitle: this._viewContainer.title.value,\n\t\t\tname: { value: name, original: name },\n\t\t\tcanToggleVisibility: false,\n\t\t\tcanMoveView: true,\n\t\t\tctorDescriptor: new SyncDescriptor(ChatViewPane),\n\t\t\twhen: ContextKeyExpr.or(CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED, CONTEXT_CHAT_EXTENSION_INVALID)\n\t\t}];\n\t\tRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).registerViews(viewDescriptor, this._viewContainer);\n\n\t\treturn toDisposable(() => {\n\t\t\tRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).deregisterViews(viewDescriptor, this._viewContainer);\n\t\t});\n\t}\n}\n\nfunction getParticipantKey(extensionId: ExtensionIdentifier, participantName: string): string {\n\treturn `${extensionId.value}_${participantName}`;\n}\n\nexport class ChatCompatibilityNotifier implements IWorkbenchContribution {\n\tstatic readonly ID = 'workbench.contrib.chatCompatNotifier';\n\n\tconstructor(\n\t\t@IExtensionsWorkbenchService extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService,\n\t\t@IProductService productService: IProductService,\n\t) {\n\t\t// It may be better to have some generic UI for this, for any extension that is incompatible,\n\t\t// but this is only enabled for Copilot Chat now and it needs to be obvious.\n\t\tconst isInvalid = CONTEXT_CHAT_EXTENSION_INVALID.bindTo(contextKeyService);\n\t\textensionsWorkbenchService.queryLocal().then(exts => {\n\t\t\tconst chat = exts.find(ext => ext.identifier.id === 'github.copilot-chat');\n\t\t\tif (chat?.local?.validations.some(v => v[0] === Severity.Error)) {\n\t\t\t\tconst showExtensionLabel = localize('showExtension', \"Show Extension\");\n\t\t\t\tconst mainMessage = localize('chatFailErrorMessage', \"Chat failed to load because the installed version of the {0} extension is not compatible with this version of {1}. Please ensure that the GitHub Copilot Chat extension is up to date.\", 'GitHub Copilot Chat', productService.nameLong);\n\t\t\t\tconst commandButton = `[${showExtensionLabel}](command:${showExtensionsWithIdsCommandId}?${encodeURIComponent(JSON.stringify([['GitHub.copilot-chat']]))})`;\n\t\t\t\tconst versionMessage = `GitHub Copilot Chat version: ${chat.version}`;\n\t\t\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);\n\t\t\t\tviewsRegistry.registerViewWelcomeContent(CHAT_VIEW_ID, {\n\t\t\t\t\tcontent: [mainMessage, commandButton, versionMessage].join('\\n\\n'),\n\t\t\t\t\twhen: CONTEXT_CHAT_EXTENSION_INVALID,\n\t\t\t\t});\n\n\t\t\t\t// This catches vscode starting up with the invalid extension, but the extension may still get updated by vscode after this.\n\t\t\t\tisInvalid.set(true);\n\t\t\t}\n\t\t});\n\n\t\tconst listener = chatAgentService.onDidChangeAgents(() => {\n\t\t\tif (chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)) {\n\t\t\t\tisInvalid.set(false);\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
