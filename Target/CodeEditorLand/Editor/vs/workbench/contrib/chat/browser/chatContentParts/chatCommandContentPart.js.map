{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatCommandContentPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { Button } from '../../../../../base/browser/ui/button/button.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../../nls.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { defaultButtonStyles } from '../../../../../platform/theme/browser/defaultStyles.js';\nimport { IChatContentPart, IChatContentPartRenderContext } from './chatContentParts.js';\nimport { IChatProgressRenderableResponseContent } from '../../common/chatModel.js';\nimport { IChatCommandButton } from '../../common/chatService.js';\nimport { isResponseVM } from '../../common/chatViewModel.js';\n\nconst $ = dom.$;\n\nexport class ChatCommandButtonContentPart extends Disposable implements IChatContentPart {\n\tpublic readonly domNode: HTMLElement;\n\n\tconstructor(\n\t\tcommandButton: IChatCommandButton,\n\t\tcontext: IChatContentPartRenderContext,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper();\n\n\t\tthis.domNode = $('.chat-command-button');\n\t\tconst enabled = !isResponseVM(context.element) || !context.element.isStale;\n\t\tconst tooltip = enabled ?\n\t\t\tcommandButton.command.tooltip :\n\t\t\tlocalize('commandButtonDisabled', \"Button not available in restored chat\");\n\t\tconst button = this._register(new Button(this.domNode, { ...defaultButtonStyles, supportIcons: true, title: tooltip }));\n\t\tbutton.label = commandButton.command.title;\n\t\tbutton.enabled = enabled;\n\n\t\t// TODO still need telemetry for command buttons\n\t\tthis._register(button.onDidClick(() => this.commandService.executeCommand(commandButton.command.id, ...(commandButton.command.arguments ?? []))));\n\t}\n\n\thasSameContent(other: IChatProgressRenderableResponseContent): boolean {\n\t\t// No other change allowed for this content type\n\t\treturn other.kind === 'command';\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,SAAS,kBAAkB,qCAAqC;AAChE,SAAS,8CAA8C;AACvD,SAAS,0BAA0B;AACnC,SAAS,oBAAoB;AAE7B,MAAM,IAAI,IAAI;AAEP,IAAM,+BAAN,cAA2C,WAAuC;AAAA,EAGxF,YACC,eACA,SACkC,gBACjC;AACD,UAAM;AAF4B;AAIlC,SAAK,UAAU,EAAE,sBAAsB;AACvC,UAAM,UAAU,CAAC,aAAa,QAAQ,OAAO,KAAK,CAAC,QAAQ,QAAQ;AACnE,UAAM,UAAU,UACf,cAAc,QAAQ,UACtB,SAAS,yBAAyB,uCAAuC;AAC1E,UAAM,SAAS,KAAK,UAAU,IAAI,OAAO,KAAK,SAAS,EAAE,GAAG,qBAAqB,cAAc,MAAM,OAAO,QAAQ,CAAC,CAAC;AACtH,WAAO,QAAQ,cAAc,QAAQ;AACrC,WAAO,UAAU;AAGjB,SAAK,UAAU,OAAO,WAAW,MAAM,KAAK,eAAe,eAAe,cAAc,QAAQ,IAAI,GAAI,cAAc,QAAQ,aAAa,CAAC,CAAE,CAAC,CAAC;AAAA,EACjJ;AAAA,EAvCD,OAkByF;AAAA;AAAA;AAAA,EACxE;AAAA,EAsBhB,eAAe,OAAwD;AAEtE,WAAO,MAAM,SAAS;AAAA,EACvB;AACD;AA3Ba,+BAAN;AAAA,EAMJ;AAAA,GANU;",
  "names": []
}
