{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatCommandContentPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { Button } from \"../../../../../base/browser/ui/button/button.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { ICommandService } from \"../../../../../platform/commands/common/commands.js\";\nimport { defaultButtonStyles } from \"../../../../../platform/theme/browser/defaultStyles.js\";\nimport type { IChatProgressRenderableResponseContent } from \"../../common/chatModel.js\";\nimport type { IChatCommandButton } from \"../../common/chatService.js\";\nimport { isResponseVM } from \"../../common/chatViewModel.js\";\nimport type {\n\tIChatContentPart,\n\tIChatContentPartRenderContext,\n} from \"./chatContentParts.js\";\n\nconst $ = dom.$;\n\nexport class ChatCommandButtonContentPart\n\textends Disposable\n\timplements IChatContentPart\n{\n\tpublic readonly domNode: HTMLElement;\n\n\tconstructor(\n\t\tcommandButton: IChatCommandButton,\n\t\tcontext: IChatContentPartRenderContext,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t) {\n\t\tsuper();\n\n\t\tthis.domNode = $(\".chat-command-button\");\n\t\tconst enabled =\n\t\t\t!isResponseVM(context.element) || !context.element.isStale;\n\t\tconst tooltip = enabled\n\t\t\t? commandButton.command.tooltip\n\t\t\t: localize(\n\t\t\t\t\t\"commandButtonDisabled\",\n\t\t\t\t\t\"Button not available in restored chat\",\n\t\t\t\t);\n\t\tconst button = this._register(\n\t\t\tnew Button(this.domNode, {\n\t\t\t\t...defaultButtonStyles,\n\t\t\t\tsupportIcons: true,\n\t\t\t\ttitle: tooltip,\n\t\t\t}),\n\t\t);\n\t\tbutton.label = commandButton.command.title;\n\t\tbutton.enabled = enabled;\n\n\t\t// TODO still need telemetry for command buttons\n\t\tthis._register(\n\t\t\tbutton.onDidClick(() =>\n\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\tcommandButton.command.id,\n\t\t\t\t\t...(commandButton.command.arguments ?? []),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\thasSameContent(other: IChatProgressRenderableResponseContent): boolean {\n\t\t// No other change allowed for this content type\n\t\treturn other.kind === \"command\";\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AAGpC,SAAS,oBAAoB;AAM7B,MAAM,IAAI,IAAI;AAEP,IAAM,+BAAN,cACE,WAET;AAAA,EAGC,YACC,eACA,SACkC,gBACjC;AACD,UAAM;AAF4B;AAIlC,SAAK,UAAU,EAAE,sBAAsB;AACvC,UAAM,UACL,CAAC,aAAa,QAAQ,OAAO,KAAK,CAAC,QAAQ,QAAQ;AACpD,UAAM,UAAU,UACb,cAAc,QAAQ,UACtB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACF,UAAM,SAAS,KAAK;AAAA,MACnB,IAAI,OAAO,KAAK,SAAS;AAAA,QACxB,GAAG;AAAA,QACH,cAAc;AAAA,QACd,OAAO;AAAA,MACR,CAAC;AAAA,IACF;AACA,WAAO,QAAQ,cAAc,QAAQ;AACrC,WAAO,UAAU;AAGjB,SAAK;AAAA,MACJ,OAAO;AAAA,QAAW,MACjB,KAAK,eAAe;AAAA,UACnB,cAAc,QAAQ;AAAA,UACtB,GAAI,cAAc,QAAQ,aAAa,CAAC;AAAA,QACzC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EA9DD,OAwBA;AAAA;AAAA;AAAA,EACiB;AAAA,EAuChB,eAAe,OAAwD;AAEtE,WAAO,MAAM,SAAS;AAAA,EACvB;AACD;AA/Ca,+BAAN;AAAA,EASJ;AAAA,GATU;",
  "names": []
}
