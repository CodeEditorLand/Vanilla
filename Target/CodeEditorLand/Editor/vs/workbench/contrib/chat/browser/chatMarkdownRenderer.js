var c=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var p=(d,i,e,t)=>{for(var r=t>1?void 0:t?l(i,e):i,o=d.length-1,a;o>=0;o--)(a=d[o])&&(r=(t?a(i,e,r):a(r))||r);return t&&r&&c(i,e,r),r},n=(d,i)=>(e,t)=>i(e,t,d);import{getDefaultHoverDelegate as v}from"../../../../base/browser/ui/hover/hoverDelegateFactory.js";import{DisposableStore as u}from"../../../../base/common/lifecycle.js";import{URI as I}from"../../../../base/common/uri.js";import{MarkdownRenderer as S}from"../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js";import{ILanguageService as f}from"../../../../editor/common/languages/language.js";import{ICommandService as h}from"../../../../platform/commands/common/commands.js";import{IFileService as g}from"../../../../platform/files/common/files.js";import{IHoverService as M}from"../../../../platform/hover/browser/hover.js";import{IOpenerService as R}from"../../../../platform/opener/common/opener.js";import{REVEAL_IN_EXPLORER_COMMAND_ID as w}from"../../files/browser/fileConstants.js";import{ITrustedDomainService as k}from"../../url/browser/trustedDomainService.js";const y=["b","blockquote","br","code","em","h1","h2","h3","h4","h5","h6","hr","i","li","ol","p","pre","strong","sub","sup","table","tbody","td","th","thead","tr","ul","a","img","span","div"];let s=class extends S{constructor(e,t,r,o,a,m,O){super(e??{},t,r);this.trustedDomainService=o;this.hoverService=a;this.fileService=m;this.commandService=O}render(e,t,r){t={...t,remoteImageIsAllowed:m=>this.trustedDomainService.isValid(m),sanitizerOptions:{replaceWithPlaintext:!0,allowedTags:y}};const o=e&&e.supportHtml?{...e,value:`<body>

${e.value}</body>`}:e,a=super.render(o,t,r);return this.attachCustomHover(a)}attachCustomHover(e){const t=new u;return e.element.querySelectorAll("a").forEach(r=>{if(r.title){const o=r.title;r.title="",t.add(this.hoverService.setupManagedHover(v("element"),r,o))}}),{element:e.element,dispose:()=>{e.dispose(),t.dispose()}}}async openMarkdownLink(e,t){try{const r=I.parse(e);if((await this.fileService.stat(r)).isDirectory)return this.commandService.executeCommand(w,r)}catch{}return super.openMarkdownLink(e,t)}};s=p([n(1,f),n(2,R),n(3,k),n(4,M),n(5,g),n(6,h)],s);export{s as ChatMarkdownRenderer};
