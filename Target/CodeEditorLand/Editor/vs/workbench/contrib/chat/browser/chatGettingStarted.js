var u=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var l=(a,o,e,t)=>{for(var i=t>1?void 0:t?I(o,e):o,c=a.length-1,v;c>=0;c--)(v=a[c])&&(i=(t?v(o,e,i):v(i))||i);return t&&i&&u(o,e,i),i},r=(a,o)=>(e,t)=>o(e,t,a);import{Registry as x}from"../../../../platform/registry/common/platform.js";import"../../../common/contributions.js";import{Disposable as C,MutableDisposable as y}from"../../../../base/common/lifecycle.js";import{ContextKeyExpr as w,IContextKeyService as A}from"../../../../platform/contextkey/common/contextkey.js";import{IActivityService as E,NumberBadge as b}from"../../../services/activity/common/activity.js";import{IProductService as P}from"../../../../platform/product/common/productService.js";import{ExtensionIdentifier as p}from"../../../../platform/extensions/common/extensions.js";import{IStorageService as N,StorageScope as s,StorageTarget as h}from"../../../../platform/storage/common/storage.js";import{IExtensionService as D}from"../../../services/extensions/common/extensions.js";import{Extensions as M,ConfigurationScope as T}from"../../../../platform/configuration/common/configurationRegistry.js";import{applicationConfigurationNodeBase as H}from"../../../common/configuration.js";import{localize as S}from"../../../../nls.js";import{IConfigurationService as L}from"../../../../platform/configuration/common/configuration.js";import{CHAT_VIEW_ID as g}from"./chat.js";import{ICommandService as O}from"../../../../platform/commands/common/commands.js";import{IExtensionManagementService as G}from"../../../../platform/extensionManagement/common/extensionManagement.js";const n="workbench.panel.chat.view.experimental.showGettingStarted";let d=class extends C{constructor(e,t,i,c,v,B,R,_){super();this.contextService=e;this.productService=t;this.storageService=i;this.activityService=c;this.extensionService=v;this.commandService=B;this.configurationService=R;this.extensionManagementService=_;this.productService.gitHubEntitlement&&this.storageService.get(n,s.APPLICATION)===void 0&&this.extensionManagementService.getInstalled().then(async f=>{if(!f.find(m=>p.equals(m.identifier.id,this.productService.gitHubEntitlement.extensionId))){this.registerListeners();return}this.storageService.store(n,"installed",s.APPLICATION,h.MACHINE)})}static ID="workbench.contrib.chatGettingStarted";showChatGettingStartedDisposable=this._register(new y);registerListeners(){this._register(this.extensionService.onDidChangeExtensions(async e=>{if(this.storageService.get(n,s.APPLICATION)===void 0){for(const t of e.added)if(p.equals(this.productService.gitHubEntitlement.extensionId,t.identifier)){this.displayBadge();return}}})),this.extensionService.onDidChangeExtensionsStatus(async e=>{if(this.storageService.get(n,s.APPLICATION)===void 0){for(const t of e)if(p.equals(this.productService.gitHubEntitlement.extensionId,t.value)&&this.extensionService.getExtensionsStatus()[t.value].activationTimes){this.displayChatPanel();return}}}),this._register(this.contextService.onDidChangeContext(e=>{this.storageService.get(n,s.APPLICATION)!==void 0&&e.affectsSome(new Set([`view.${g}.visible`]))&&this.contextService.contextMatchesRules(w.deserialize(`${g}.visible`))&&this.showChatGettingStartedDisposable.clear()}))}async displayBadge(){const e=this.configurationService.inspect(n).value??"";if(!e||e!=="showBadge")return;const t=new b(1,()=>S("chat.openPanel","Open Chat Panel"));this.showChatGettingStartedDisposable.value=this.activityService.showViewActivity(g,{badge:t}),this.storageService.store(n,e,s.APPLICATION,h.MACHINE)}async displayChatPanel(){const e=this.configurationService.inspect(n).value??"";!e||e!=="showChatPanel"||(this.commandService.executeCommand(`${g}.focus`),this.storageService.store(n,e,s.APPLICATION,h.MACHINE))}};d=l([r(0,A),r(1,P),r(2,N),r(3,E),r(4,D),r(5,O),r(6,L),r(7,G)],d);const k=x.as(M.Configuration);k.registerConfiguration({...H,properties:{"workbench.panel.chat.view.experimental.showGettingStarted":{scope:T.MACHINE,type:"string",default:"",tags:["experimental"],description:S("workbench.panel.chat.view.showGettingStarted","When enabled, shows a getting started experiments in the chat panel.")}}});export{d as ChatGettingStartedContribution};
