var h=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var p=(i,r,e,o)=>{for(var t=o>1?void 0:o?C(r,e):r,s=i.length-1,n;s>=0;s--)(n=i[s])&&(t=(o?n(r,e,t):n(t))||t);return o&&t&&h(r,e,t),t},m=(i,r)=>(e,o)=>r(e,o,i);import*as g from"../../../../../base/browser/dom.js";import{Event as c}from"../../../../../base/common/event.js";import{Disposable as I}from"../../../../../base/common/lifecycle.js";import{IInstantiationService as b}from"../../../../../platform/instantiation/common/instantiation.js";import{ChatProgressContentPart as f}from"./chatProgressContentPart.js";import{ChatCollapsibleListContentPart as R}from"./chatReferencesContentPart.js";let d=class extends I{constructor(e,o,t,s,n){super();this.task=e;if(e.progress.length){const a=this._register(n.createInstance(R,e.progress,e.content.value,s.element,o));this.domNode=g.$(".chat-progress-task"),this.domNode.appendChild(a.domNode),this.onDidChangeHeight=a.onDidChangeHeight}else{const a=e.isSettled?.()??!0,l=this._register(n.createInstance(f,e,t,s,!a,!0));this.domNode=l.domNode,this.onDidChangeHeight=c.None}}domNode;onDidChangeHeight;hasSameContent(e){return e.kind==="progressTask"&&e.progress.length===this.task.progress.length&&e.isSettled()===this.task.isSettled()}addDisposable(e){this._register(e)}};d=p([m(4,b)],d);export{d as ChatTaskContentPart};
