var R=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var u=(h,a,e,r)=>{for(var i=r>1?void 0:r?D(a,e):a,l=h.length-1,o;l>=0;l--)(o=h[l])&&(i=(r?o(a,e,i):o(i))||i);return r&&i&&R(a,e,i),i},C=(h,a)=>(e,r)=>a(e,r,h);import{coalesce as I}from"../../../../base/common/arrays.js";import{onUnexpectedExternalError as v}from"../../../../base/common/errors.js";import{Iterable as V}from"../../../../base/common/iterator.js";import{toDisposable as w}from"../../../../base/common/lifecycle.js";import{basename as S}from"../../../../base/common/path.js";import{ThemeIcon as P}from"../../../../base/common/themables.js";import{URI as q}from"../../../../base/common/uri.js";import{IViewsService as x}from"../../../services/views/common/viewsService.js";import{ChatAgentLocation as p}from"../common/chatAgents.js";import{ChatRequestDynamicVariablePart as L,ChatRequestToolPart as T,ChatRequestVariablePart as _}from"../common/chatParserTypes.js";import{ILanguageModelToolsService as E}from"../common/languageModelToolsService.js";import{IChatWidgetService as M,showChatView as A}from"./chat.js";import{ChatContextAttachments as y}from"./contrib/chatContextAttachments.js";import{ChatDynamicVariableModel as N}from"./contrib/chatDynamicVariables.js";let g=class{constructor(a,e,r){this.chatWidgetService=a;this.viewsService=e;this.toolsService=r}_resolver=new Map;async resolveVariables(a,e,r,i,l){let o=[];const d=[];a.parts.forEach((t,c)=>{if(t instanceof _){const s=this._resolver.get(t.variableName.toLowerCase());if(s){const f=[],b=n=>{if(n.kind==="reference"){f.push(n);return}i(n)};d.push(s.resolver(a.text,t.variableArg,r,b,l).then(n=>{n&&(o[c]={id:s.data.id,modelDescription:s.data.modelDescription,name:t.variableName,range:t.range,value:n,references:f,fullName:s.data.fullName,icon:s.data.icon})}).catch(v))}}else if(t instanceof L)o[c]={id:t.id,name:t.referenceText,range:t.range,value:t.data};else if(t instanceof T){const s=this.toolsService.getTool(t.toolId);s&&(o[c]={id:t.toolId,name:t.toolName,range:t.range,value:void 0,isTool:!0,icon:P.isThemeIcon(s.icon)?s.icon:void 0,fullName:s.displayName})}});const m=[];return e?.forEach((t,c)=>{const s=this._resolver.get(t.name?.toLowerCase());if(s){const f=[],b=n=>{if(n.kind==="reference"){f.push(n);return}i(n)};d.push(s.resolver(a.text,"",r,b,l).then(n=>{n&&(m[c]={id:s.data.id,modelDescription:s.data.modelDescription,name:t.name,fullName:t.fullName,range:t.range,value:n,references:f,icon:t.icon})}).catch(v))}else(t.isDynamic||t.isTool)&&(m[c]={...t})}),await Promise.allSettled(d),o=I(o),o.sort((t,c)=>c.range.start-t.range.start),o.push(...I(m)),{variables:o}}async resolveVariable(a,e,r,i,l){const o=this._resolver.get(a.toLowerCase());if(o)return await o.resolver(e,void 0,r,i,l)}hasVariable(a){return this._resolver.has(a.toLowerCase())}getVariable(a){return this._resolver.get(a.toLowerCase())?.data}getVariables(a){const e=V.map(this._resolver.values(),r=>r.data);return V.filter(e,r=>a!==p.Editor||!new Set(["selection","editor"]).has(r.name))}getDynamicVariables(a){const e=this.chatWidgetService.getWidgetBySessionId(a);if(!e||!e.viewModel||!e.supportsFileReferences)return[];const r=e.getContrib(N.ID);return r?r.variables:[]}registerVariable(a,e){const r=a.name.toLowerCase();if(this._resolver.has(r))throw new Error(`A chat variable with the name '${a.name}' already exists.`);return this._resolver.set(r,{data:a,resolver:e}),w(()=>{this._resolver.delete(r)})}async attachContext(a,e,r){if(r!==p.Panel)return;const i=this.chatWidgetService.lastFocusedWidget??await A(this.viewsService);if(!i||!i.viewModel)return;const l=a.toLowerCase();if(l==="file"&&typeof e!="string"){const d=q.isUri(e)?e:e.uri,m="range"in e?e.range:void 0;i.getContrib(y.ID)?.setContext(!1,{value:e,id:d.toString()+(m?.toString()??""),name:S(d.path),isFile:!0,isDynamic:!0});return}const o=this._resolver.get(l);o&&i.getContrib(y.ID)?.setContext(!1,{...o.data,value:e})}};g=u([C(0,M),C(1,x),C(2,E)],g);export{g as ChatVariablesService};
