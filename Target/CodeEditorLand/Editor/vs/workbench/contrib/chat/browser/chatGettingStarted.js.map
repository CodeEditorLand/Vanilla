{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatGettingStarted.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IActivityService, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope, } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { applicationConfigurationNodeBase } from '../../../common/configuration.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { CHAT_VIEW_ID } from './chat.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\n\nconst showChatGettingStartedConfigKey = 'workbench.panel.chat.view.experimental.showGettingStarted';\n\nexport class ChatGettingStartedContribution extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.chatGettingStarted';\n\tprivate readonly showChatGettingStartedDisposable = this._register(new MutableDisposable());\n\tconstructor(\n\t\t@IContextKeyService private readonly contextService: IContextKeyService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t) {\n\t\tsuper();\n\n\t\tif (!this.productService.gitHubEntitlement) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.storageService.get(showChatGettingStartedConfigKey, StorageScope.APPLICATION) !== undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.extensionManagementService.getInstalled().then(async exts => {\n\t\t\tconst installed = exts.find(value => ExtensionIdentifier.equals(value.identifier.id, this.productService.gitHubEntitlement!.extensionId));\n\t\t\tif (!installed) {\n\t\t\t\tthis.registerListeners();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.storageService.store(showChatGettingStartedConfigKey, 'installed', StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t});\n\t}\n\n\tprivate registerListeners() {\n\n\t\tthis._register(this.extensionService.onDidChangeExtensions(async (result) => {\n\n\t\t\tif (this.storageService.get(showChatGettingStartedConfigKey, StorageScope.APPLICATION) !== undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const ext of result.added) {\n\t\t\t\tif (ExtensionIdentifier.equals(this.productService.gitHubEntitlement!.extensionId, ext.identifier)) {\n\t\t\t\t\tthis.displayBadge();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.extensionService.onDidChangeExtensionsStatus(async (event) => {\n\n\t\t\tif (this.storageService.get(showChatGettingStartedConfigKey, StorageScope.APPLICATION) !== undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const ext of event) {\n\t\t\t\tif (ExtensionIdentifier.equals(this.productService.gitHubEntitlement!.extensionId, ext.value)) {\n\t\t\t\t\tconst extensionStatus = this.extensionService.getExtensionsStatus();\n\t\t\t\t\tif (extensionStatus[ext.value].activationTimes) {\n\t\t\t\t\t\tthis.displayChatPanel();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.contextService.onDidChangeContext(event => {\n\t\t\tif (this.storageService.get(showChatGettingStartedConfigKey, StorageScope.APPLICATION) === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.affectsSome(new Set([`view.${CHAT_VIEW_ID}.visible`]))) {\n\t\t\t\tif (this.contextService.contextMatchesRules(ContextKeyExpr.deserialize(`${CHAT_VIEW_ID}.visible`))) {\n\t\t\t\t\tthis.showChatGettingStartedDisposable.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async displayBadge() {\n\t\tconst showGettingStartedExp = this.configurationService.inspect<string>(showChatGettingStartedConfigKey).value ?? '';\n\t\tif (!showGettingStartedExp || showGettingStartedExp !== 'showBadge') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst badge = new NumberBadge(1, () => localize('chat.openPanel', 'Open Chat Panel'));\n\t\tthis.showChatGettingStartedDisposable.value = this.activityService.showViewActivity(CHAT_VIEW_ID, { badge });\n\t\tthis.storageService.store(showChatGettingStartedConfigKey, showGettingStartedExp, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tprivate async displayChatPanel() {\n\t\tconst showGettingStartedExp = this.configurationService.inspect<string>(showChatGettingStartedConfigKey).value ?? '';\n\t\tif (!showGettingStartedExp || showGettingStartedExp !== 'showChatPanel') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.commandService.executeCommand(`${CHAT_VIEW_ID}.focus`);\n\t\tthis.storageService.store(showChatGettingStartedConfigKey, showGettingStartedExp, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\t...applicationConfigurationNodeBase,\n\tproperties: {\n\t\t'workbench.panel.chat.view.experimental.showGettingStarted': {\n\t\t\tscope: ConfigurationScope.MACHINE,\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\ttags: ['experimental'],\n\t\t\tdescription: localize('workbench.panel.chat.view.showGettingStarted', \"When enabled, shows a getting started experiments in the chat panel.\")\n\t\t}\n\t}\n});\n\n"],
  "mappings": "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",
  "names": []
}
