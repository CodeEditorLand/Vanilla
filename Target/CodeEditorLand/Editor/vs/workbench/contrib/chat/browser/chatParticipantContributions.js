var N=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var f=(a,n,o,e)=>{for(var t=e>1?void 0:e?R(n,o):n,r=a.length-1,s;r>=0;r--)(s=a[r])&&(t=(e?s(n,o,t):s(t))||t);return e&&t&&N(n,o,t),t},p=(a,n)=>(o,e)=>n(o,e,a);import{coalesce as E,isNonEmptyArray as V}from"../../../../base/common/arrays.js";import{Codicon as T}from"../../../../base/common/codicons.js";import{DisposableMap as _,DisposableStore as k,toDisposable as q}from"../../../../base/common/lifecycle.js";import*as C from"../../../../base/common/strings.js";import{localize as i,localize2 as $}from"../../../../nls.js";import{ContextKeyExpr as W,IContextKeyService as L}from"../../../../platform/contextkey/common/contextkey.js";import{SyncDescriptor as v}from"../../../../platform/instantiation/common/descriptors.js";import{ILogService as O}from"../../../../platform/log/common/log.js";import{Severity as j}from"../../../../platform/notification/common/notification.js";import{IProductService as H}from"../../../../platform/product/common/productService.js";import{Registry as d}from"../../../../platform/registry/common/platform.js";import{ViewPaneContainer as G}from"../../../browser/parts/views/viewPaneContainer.js";import{ViewContainerLocation as M,Extensions as l}from"../../../common/views.js";import{isProposedApiEnabled as y}from"../../../services/extensions/common/extensions.js";import*as K from"../../../services/extensions/common/extensionsRegistry.js";import{showExtensionsWithIdsCommandId as U}from"../../extensions/browser/extensionsActions.js";import{IExtensionsWorkbenchService as X}from"../../extensions/common/extensions.js";import{ChatAgentLocation as w,IChatAgentService as I}from"../common/chatAgents.js";import{CONTEXT_CHAT_EXTENSION_INVALID as b,CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED as z}from"../common/chatContextKeys.js";import{CHAT_VIEW_ID as x}from"./chat.js";import{CHAT_SIDEBAR_PANEL_ID as B,ChatViewPane as F}from"./chatViewPane.js";const J=K.ExtensionsRegistry.registerExtensionPoint({extensionPoint:"chatParticipants",jsonSchema:{description:i("vscode.extension.contributes.chatParticipant","Contributes a chat participant"),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name","id"],properties:{id:{description:i("chatParticipantId","A unique id for this chat participant."),type:"string"},name:{description:i("chatParticipantName","User-facing name for this chat participant. The user will use '@' with this name to invoke the participant. Name must not contain whitespace."),type:"string",pattern:"^[\\w-]+$"},fullName:{markdownDescription:i("chatParticipantFullName","The full name of this chat participant, which is shown as the label for responses coming from this participant. If not provided, {0} is used.","`name`"),type:"string"},description:{description:i("chatParticipantDescription","A description of this chat participant, shown in the UI."),type:"string"},isSticky:{description:i("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},sampleRequest:{description:i("chatSampleRequest","When the user clicks this participant in `/help`, this text will be submitted to the participant."),type:"string"},when:{description:i("chatParticipantWhen","A condition which must be true to enable this participant."),type:"string"},disambiguation:{description:i("chatParticipantDisambiguation","Metadata to help with automatically routing user questions to this chat participant."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{category:"",description:"",examples:[]}}],required:["category","description","examples"],properties:{category:{markdownDescription:i("chatParticipantDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:i("chatParticipantDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat participant."),type:"string"},examples:{description:i("chatParticipantDisambiguationExamples","A list of representative example questions that are suitable for this chat participant."),type:"array"}}}},commands:{markdownDescription:i("chatCommandsDescription","Commands available for this chat participant, which the user can invoke with a `/`."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name"],properties:{name:{description:i("chatCommand","A short name by which this command is referred to in the UI, e.g. `fix` or * `explain` for commands that fix an issue or explain code. The name should be unique among the commands provided by this participant."),type:"string"},description:{description:i("chatCommandDescription","A description of this command."),type:"string"},when:{description:i("chatCommandWhen","A condition which must be true to enable this command."),type:"string"},sampleRequest:{description:i("chatCommandSampleRequest","When the user clicks this command in `/help`, this text will be submitted to the participant."),type:"string"},isSticky:{description:i("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},disambiguation:{description:i("chatCommandDisambiguation","Metadata to help with automatically routing user questions to this chat command."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{category:"",description:"",examples:[]}}],required:["category","description","examples"],properties:{category:{markdownDescription:i("chatCommandDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:i("chatCommandDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat command."),type:"string"},examples:{description:i("chatCommandDisambiguationExamples","A list of representative example questions that are suitable for this chat command."),type:"array"}}}}}}},supportsToolReferences:{description:i("chatParticipantSupportsToolReferences","Whether this participant supports {0}.","ChatRequest#toolReferences"),type:"boolean"}}}},activationEventsGenerator:(a,n)=>{for(const o of a)n.push(`onChatParticipant:${o.id}`)}});let u=class{constructor(n,o){this._chatAgentService=n;this.logService=o;this._viewContainer=this.registerViewContainer(),this.registerDefaultParticipantView(),this.handleAndRegisterChatExtensions()}static ID="workbench.contrib.chatExtensionPointHandler";_viewContainer;_participantRegistrationDisposables=new _;handleAndRegisterChatExtensions(){J.setHandler((n,o)=>{for(const e of o.added)for(const t of e.value){if(!t.name?.match(/^[\w-]+$/)){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with invalid name: ${t.name}. Name must match /^[\\w-]+$/.`);continue}if(t.fullName&&C.AmbiguousCharacters.getInstance(new Set).containsAmbiguousCharacter(t.fullName)){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with fullName that contains ambiguous characters: ${t.fullName}.`);continue}if(t.fullName&&C.InvisibleCharacters.containsInvisibleCharacter(t.fullName.replace(/ /g,""))){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with fullName that contains invisible characters: ${t.fullName}.`);continue}if(t.isDefault&&!y(e.description,"defaultChatParticipant")){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT use API proposal: defaultChatParticipant.`);continue}if((t.defaultImplicitVariables||t.locations)&&!y(e.description,"chatParticipantAdditions")){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT use API proposal: chatParticipantAdditions.`);continue}if(!t.id||!t.name){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant without both id and name.`);continue}const r=[];if(y(e.description,"contribChatParticipantDetection")&&(t.disambiguation?.length&&r.push(...t.disambiguation.map(c=>({...c,category:c.category??c.categoryName}))),t.commands))for(const c of t.commands)c.disambiguation?.length&&r.push(...c.disambiguation.map(m=>({...m,category:m.category??m.categoryName})));const s=new k;s.add(this._chatAgentService.registerAgent(t.id,{extensionId:e.description.identifier,publisherDisplayName:e.description.publisherDisplayName??e.description.publisher,extensionPublisherId:e.description.publisher,extensionDisplayName:e.description.displayName??e.description.name,id:t.id,description:t.description,when:t.when,metadata:{isSticky:t.isSticky,sampleRequest:t.sampleRequest},name:t.name,fullName:t.fullName,isDefault:t.isDefault,locations:V(t.locations)?t.locations.map(w.fromRaw):[w.Panel],slashCommands:t.commands??[],disambiguation:E(r.flat()),supportsToolReferences:t.supportsToolReferences})),this._participantRegistrationDisposables.set(D(e.description.identifier,t.id),s)}for(const e of o.removed)for(const t of e.value)this._participantRegistrationDisposables.deleteAndDispose(D(e.description.identifier,t.id))})}registerViewContainer(){const n=$("chat.viewContainer.label","Chat"),o=T.commentDiscussion,e=B;return d.as(l.ViewContainersRegistry).registerViewContainer({id:e,title:n,icon:o,ctorDescriptor:new v(G,[e,{mergeViewWithContainerWhenSingleView:!0}]),storageId:e,hideIfEmpty:!0,order:100},M.Sidebar)}registerDefaultParticipantView(){const n="GitHub Copilot",o=[{id:x,containerIcon:this._viewContainer.icon,containerTitle:this._viewContainer.title.value,singleViewPaneContainerTitle:this._viewContainer.title.value,name:{value:n,original:n},canToggleVisibility:!1,canMoveView:!0,ctorDescriptor:new v(F),when:W.or(z,b)}];return d.as(l.ViewsRegistry).registerViews(o,this._viewContainer),q(()=>{d.as(l.ViewsRegistry).deregisterViews(o,this._viewContainer)})}};u=f([p(0,I),p(1,O)],u);function D(a,n){return`${a.value}_${n}`}let g=class{static ID="workbench.contrib.chatCompatNotifier";constructor(n,o,e,t){const r=b.bindTo(o);n.queryLocal().then(c=>{const m=c.find(h=>h.identifier.id==="github.copilot-chat");if(m?.local?.validations.some(h=>h[0]===j.Error)){const h=i("showExtension","Show Extension"),A=i("chatFailErrorMessage","Chat failed to load because the installed version of the {0} extension is not compatible with this version of {1}. Please ensure that the GitHub Copilot Chat extension is up to date.","GitHub Copilot Chat",t.nameLong),P=`[${h}](command:${U}?${encodeURIComponent(JSON.stringify([["GitHub.copilot-chat"]]))})`,S=`GitHub Copilot Chat version: ${m.version}`;d.as(l.ViewsRegistry).registerViewWelcomeContent(x,{content:[A,P,S].join(`

`),when:b}),r.set(!0)}});const s=e.onDidChangeAgents(()=>{e.getDefaultAgent(w.Panel)&&(r.set(!1),s.dispose())})}};g=f([p(0,X),p(1,L),p(2,I),p(3,H)],g);export{g as ChatCompatibilityNotifier,u as ChatExtensionPointHandler};
