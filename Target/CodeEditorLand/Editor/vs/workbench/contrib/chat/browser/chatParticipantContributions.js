var C=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var h=(r,a,n,e)=>{for(var i=e>1?void 0:e?D(a,n):a,s=r.length-1,o;s>=0;s--)(o=r[s])&&(i=(e?o(a,n,i):o(i))||i);return e&&i&&C(a,n,i),i},c=(r,a)=>(n,e)=>a(n,e,r);import{Action as I}from"../../../../../vs/base/common/actions.js";import{coalesce as x,isNonEmptyArray as A}from"../../../../../vs/base/common/arrays.js";import{Codicon as P}from"../../../../../vs/base/common/codicons.js";import{Disposable as N,DisposableMap as S,DisposableStore as R,toDisposable as V}from"../../../../../vs/base/common/lifecycle.js";import*as g from"../../../../../vs/base/common/strings.js";import{localize as t,localize2 as E}from"../../../../../vs/nls.js";import{ICommandService as k}from"../../../../../vs/platform/commands/common/commands.js";import"../../../../../vs/platform/extensions/common/extensions.js";import{SyncDescriptor as w}from"../../../../../vs/platform/instantiation/common/descriptors.js";import{ILogService as q}from"../../../../../vs/platform/log/common/log.js";import{INotificationService as _,Severity as b}from"../../../../../vs/platform/notification/common/notification.js";import{Registry as d}from"../../../../../vs/platform/registry/common/platform.js";import{ViewPaneContainer as T}from"../../../../../vs/workbench/browser/parts/views/viewPaneContainer.js";import"../../../../../vs/workbench/common/contributions.js";import{ViewContainerLocation as W,Extensions as l}from"../../../../../vs/workbench/common/views.js";import{CHAT_VIEW_ID as $}from"../../../../../vs/workbench/contrib/chat/browser/chat.js";import{CHAT_SIDEBAR_PANEL_ID as L,ChatViewPane as O}from"../../../../../vs/workbench/contrib/chat/browser/chatViewPane.js";import{ChatAgentLocation as u,IChatAgentService as j}from"../../../../../vs/workbench/contrib/chat/common/chatAgents.js";import"../../../../../vs/workbench/contrib/chat/common/chatParticipantContribTypes.js";import{IExtensionsWorkbenchService as M}from"../../../../../vs/workbench/contrib/extensions/common/extensions.js";import{isProposedApiEnabled as y}from"../../../../../vs/workbench/services/extensions/common/extensions.js";import*as G from"../../../../../vs/workbench/services/extensions/common/extensionsRegistry.js";const H=G.ExtensionsRegistry.registerExtensionPoint({extensionPoint:"chatParticipants",jsonSchema:{description:t("vscode.extension.contributes.chatParticipant","Contributes a chat participant"),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name","id"],properties:{id:{description:t("chatParticipantId","A unique id for this chat participant."),type:"string"},name:{description:t("chatParticipantName","User-facing name for this chat participant. The user will use '@' with this name to invoke the participant. Name must not contain whitespace."),type:"string",pattern:"^[\\w-]+$"},fullName:{markdownDescription:t("chatParticipantFullName","The full name of this chat participant, which is shown as the label for responses coming from this participant. If not provided, {0} is used.","`name`"),type:"string"},description:{description:t("chatParticipantDescription","A description of this chat participant, shown in the UI."),type:"string"},isSticky:{description:t("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},sampleRequest:{description:t("chatSampleRequest","When the user clicks this participant in `/help`, this text will be submitted to the participant."),type:"string"},when:{description:t("chatParticipantWhen","A condition which must be true to enable this participant."),type:"string"},disambiguation:{description:t("chatParticipantDisambiguation","Metadata to help with automatically routing user questions to this chat participant."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{categoryName:"",description:"",examples:[]}}],required:["categoryName","description","examples"],properties:{categoryName:{markdownDescription:t("chatParticipantDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:t("chatParticipantDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat participant."),type:"string"},examples:{description:t("chatParticipantDisambiguationExamples","A list of representative example questions that are suitable for this chat participant."),type:"array"}}}},commands:{markdownDescription:t("chatCommandsDescription","Commands available for this chat participant, which the user can invoke with a `/`."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name"],properties:{name:{description:t("chatCommand","A short name by which this command is referred to in the UI, e.g. `fix` or * `explain` for commands that fix an issue or explain code. The name should be unique among the commands provided by this participant."),type:"string"},description:{description:t("chatCommandDescription","A description of this command."),type:"string"},when:{description:t("chatCommandWhen","A condition which must be true to enable this command."),type:"string"},sampleRequest:{description:t("chatCommandSampleRequest","When the user clicks this command in `/help`, this text will be submitted to the participant."),type:"string"},isSticky:{description:t("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},disambiguation:{description:t("chatCommandDisambiguation","Metadata to help with automatically routing user questions to this chat command."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{categoryName:"",description:"",examples:[]}}],required:["categoryName","description","examples"],properties:{categoryName:{markdownDescription:t("chatCommandDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:t("chatCommandDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat command."),type:"string"},examples:{description:t("chatCommandDisambiguationExamples","A list of representative example questions that are suitable for this chat command."),type:"array"}}}}}}},supportsToolReferences:{description:t("chatParticipantSupportsToolReferences","Whether this participant supports {0}.","ChatRequest#toolReferences"),type:"boolean"}}}},activationEventsGenerator:(r,a)=>{for(const n of r)a.push(`onChatParticipant:${n.id}`)}});let p=class{static ID="workbench.contrib.chatCompatNotifier";constructor(a,n,e){a.queryLocal().then(i=>{i.find(o=>o.identifier.id==="github.copilot-chat")?.local?.validations.some(o=>o[0]===b.Error)&&n.notify({severity:b.Error,message:t("chatFailErrorMessage","Chat failed to load. Please ensure that the GitHub Copilot Chat extension is up to date."),actions:{primary:[new I("showExtension",t("action.showExtension","Show Extension"),void 0,!0,()=>e.executeCommand("workbench.extensions.action.showExtensionsWithIds",["GitHub.copilot-chat"]))]}})})}};p=h([c(0,M),c(1,_),c(2,k)],p);let m=class{constructor(a,n){this._chatAgentService=a;this.logService=n;this._viewContainer=this.registerViewContainer(),this.handleAndRegisterChatExtensions()}static ID="workbench.contrib.chatExtensionPointHandler";_viewContainer;_participantRegistrationDisposables=new S;handleAndRegisterChatExtensions(){H.setHandler((a,n)=>{for(const e of n.added)for(const i of e.value){if(!i.name?.match(/^[\w-]+$/)){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with invalid name: ${i.name}. Name must match /^[\\w-]+$/.`);continue}if(i.fullName&&g.AmbiguousCharacters.getInstance(new Set).containsAmbiguousCharacter(i.fullName)){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with fullName that contains ambiguous characters: ${i.fullName}.`);continue}if(i.fullName&&g.InvisibleCharacters.containsInvisibleCharacter(i.fullName.replace(/ /g,""))){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with fullName that contains invisible characters: ${i.fullName}.`);continue}if(i.isDefault&&!y(e.description,"defaultChatParticipant")){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT use API proposal: defaultChatParticipant.`);continue}if((i.defaultImplicitVariables||i.locations)&&!y(e.description,"chatParticipantAdditions")){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT use API proposal: chatParticipantAdditions.`);continue}if(!i.id||!i.name){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant without both id and name.`);continue}const s=new R;i.isDefault&&(!i.locations||i.locations?.includes(u.Panel))&&s.add(this.registerDefaultParticipantView(i));const o=[];if(i.disambiguation?.length&&o.push(...i.disambiguation),i.commands)for(const f of i.commands)f.disambiguation?.length&&o.push(...f.disambiguation);s.add(this._chatAgentService.registerAgent(i.id,{extensionId:e.description.identifier,publisherDisplayName:e.description.publisherDisplayName??e.description.publisher,extensionPublisherId:e.description.publisher,extensionDisplayName:e.description.displayName??e.description.name,id:i.id,description:i.description,when:i.when,metadata:{isSticky:i.isSticky,sampleRequest:i.sampleRequest},name:i.name,fullName:i.fullName,isDefault:i.isDefault,locations:A(i.locations)?i.locations.map(u.fromRaw):[u.Panel],slashCommands:i.commands??[],disambiguation:x(o.flat()),supportsToolReferences:i.supportsToolReferences})),this._participantRegistrationDisposables.set(v(e.description.identifier,i.id),s)}for(const e of n.removed)for(const i of e.value)this._participantRegistrationDisposables.deleteAndDispose(v(e.description.identifier,i.id))})}registerViewContainer(){const a=E("chat.viewContainer.label","Chat"),n=P.commentDiscussion,e=L;return d.as(l.ViewContainersRegistry).registerViewContainer({id:e,title:a,icon:n,ctorDescriptor:new w(T,[e,{mergeViewWithContainerWhenSingleView:!0}]),storageId:e,hideIfEmpty:!0,order:100},W.Sidebar)}hasRegisteredDefaultParticipantView=!1;registerDefaultParticipantView(a){if(this.hasRegisteredDefaultParticipantView)return this.logService.warn(`Tried to register a second default chat participant view for "${a.id}"`),N.None;const n=a.fullName??a.name,e=[{id:$,containerIcon:this._viewContainer.icon,containerTitle:this._viewContainer.title.value,singleViewPaneContainerTitle:this._viewContainer.title.value,name:{value:n,original:n},canToggleVisibility:!1,canMoveView:!0,ctorDescriptor:new w(O)}];return this.hasRegisteredDefaultParticipantView=!0,d.as(l.ViewsRegistry).registerViews(e,this._viewContainer),V(()=>{this.hasRegisteredDefaultParticipantView=!1,d.as(l.ViewsRegistry).deregisterViews(e,this._viewContainer)})}};m=h([c(0,j),c(1,q)],m);function v(r,a){return`${r.value}_${a}`}export{p as ChatCompatibilityNotifier,m as ChatExtensionPointHandler};
