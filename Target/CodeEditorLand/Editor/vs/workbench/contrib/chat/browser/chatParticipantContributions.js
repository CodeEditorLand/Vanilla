var x=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var g=(s,o,n,i)=>{for(var e=i>1?void 0:i?D(o,n):o,a=s.length-1,c;a>=0;a--)(c=s[a])&&(e=(i?c(o,n,e):c(e))||e);return i&&e&&x(o,n,e),e},p=(s,o)=>(n,i)=>o(n,i,s);import{coalesce as A,isNonEmptyArray as P}from"../../../../base/common/arrays.js";import{Codicon as S}from"../../../../base/common/codicons.js";import{Event as E}from"../../../../base/common/event.js";import{Disposable as N,DisposableMap as V,DisposableStore as R,toDisposable as _}from"../../../../base/common/lifecycle.js";import*as b from"../../../../base/common/strings.js";import{localize as t,localize2 as k}from"../../../../nls.js";import{ContextKeyExpr as T,IContextKeyService as q}from"../../../../platform/contextkey/common/contextkey.js";import"../../../../platform/extensions/common/extensions.js";import{SyncDescriptor as y}from"../../../../platform/instantiation/common/descriptors.js";import{ILogService as W}from"../../../../platform/log/common/log.js";import{IProductService as $}from"../../../../platform/product/common/productService.js";import{Registry as d}from"../../../../platform/registry/common/platform.js";import{ViewPaneContainer as M}from"../../../browser/parts/views/viewPaneContainer.js";import"../../../common/contributions.js";import{ViewContainerLocation as O,Extensions as h}from"../../../common/views.js";import{isProposedApiEnabled as f}from"../../../services/extensions/common/extensions.js";import*as L from"../../../services/extensions/common/extensionsRegistry.js";import{showExtensionsWithIdsCommandId as H}from"../../extensions/browser/extensionsActions.js";import{IExtensionsWorkbenchService as G}from"../../extensions/common/extensions.js";import{ChatAgentLocation as C,IChatAgentService as j}from"../common/chatAgents.js";import{CONTEXT_CHAT_EXTENSION_INVALID as w,CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED as K}from"../common/chatContextKeys.js";import"../common/chatParticipantContribTypes.js";import{CHAT_VIEW_ID as v}from"./chat.js";import{CHAT_SIDEBAR_PANEL_ID as U,ChatViewPane as X}from"./chatViewPane.js";const z=L.ExtensionsRegistry.registerExtensionPoint({extensionPoint:"chatParticipants",jsonSchema:{description:t("vscode.extension.contributes.chatParticipant","Contributes a chat participant"),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name","id"],properties:{id:{description:t("chatParticipantId","A unique id for this chat participant."),type:"string"},name:{description:t("chatParticipantName","User-facing name for this chat participant. The user will use '@' with this name to invoke the participant. Name must not contain whitespace."),type:"string",pattern:"^[\\w-]+$"},fullName:{markdownDescription:t("chatParticipantFullName","The full name of this chat participant, which is shown as the label for responses coming from this participant. If not provided, {0} is used.","`name`"),type:"string"},description:{description:t("chatParticipantDescription","A description of this chat participant, shown in the UI."),type:"string"},isSticky:{description:t("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},sampleRequest:{description:t("chatSampleRequest","When the user clicks this participant in `/help`, this text will be submitted to the participant."),type:"string"},when:{description:t("chatParticipantWhen","A condition which must be true to enable this participant."),type:"string"},disambiguation:{description:t("chatParticipantDisambiguation","Metadata to help with automatically routing user questions to this chat participant."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{category:"",description:"",examples:[]}}],required:["category","description","examples"],properties:{category:{markdownDescription:t("chatParticipantDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:t("chatParticipantDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat participant."),type:"string"},examples:{description:t("chatParticipantDisambiguationExamples","A list of representative example questions that are suitable for this chat participant."),type:"array"}}}},commands:{markdownDescription:t("chatCommandsDescription","Commands available for this chat participant, which the user can invoke with a `/`."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name"],properties:{name:{description:t("chatCommand","A short name by which this command is referred to in the UI, e.g. `fix` or * `explain` for commands that fix an issue or explain code. The name should be unique among the commands provided by this participant."),type:"string"},description:{description:t("chatCommandDescription","A description of this command."),type:"string"},when:{description:t("chatCommandWhen","A condition which must be true to enable this command."),type:"string"},sampleRequest:{description:t("chatCommandSampleRequest","When the user clicks this command in `/help`, this text will be submitted to the participant."),type:"string"},isSticky:{description:t("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},disambiguation:{description:t("chatCommandDisambiguation","Metadata to help with automatically routing user questions to this chat command."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{category:"",description:"",examples:[]}}],required:["category","description","examples"],properties:{category:{markdownDescription:t("chatCommandDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:t("chatCommandDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat command."),type:"string"},examples:{description:t("chatCommandDisambiguationExamples","A list of representative example questions that are suitable for this chat command."),type:"array"}}}}}}},supportsToolReferences:{description:t("chatParticipantSupportsToolReferences","Whether this participant supports {0}.","ChatRequest#toolReferences"),type:"boolean"}}}},activationEventsGenerator:(s,o)=>{for(const n of s)o.push(`onChatParticipant:${n.id}`)}});let l=class{constructor(o,n){this._chatAgentService=o;this.logService=n;this._viewContainer=this.registerViewContainer(),this.registerDefaultParticipantView(),this.handleAndRegisterChatExtensions()}static ID="workbench.contrib.chatExtensionPointHandler";_viewContainer;_participantRegistrationDisposables=new V;handleAndRegisterChatExtensions(){z.setHandler((o,n)=>{for(const i of n.added)for(const e of i.value){if(!e.name?.match(/^[\w-]+$/)){this.logService.error(`Extension '${i.description.identifier.value}' CANNOT register participant with invalid name: ${e.name}. Name must match /^[\\w-]+$/.`);continue}if(e.fullName&&b.AmbiguousCharacters.getInstance(new Set).containsAmbiguousCharacter(e.fullName)){this.logService.error(`Extension '${i.description.identifier.value}' CANNOT register participant with fullName that contains ambiguous characters: ${e.fullName}.`);continue}if(e.fullName&&b.InvisibleCharacters.containsInvisibleCharacter(e.fullName.replace(/ /g,""))){this.logService.error(`Extension '${i.description.identifier.value}' CANNOT register participant with fullName that contains invisible characters: ${e.fullName}.`);continue}if(e.isDefault&&!f(i.description,"defaultChatParticipant")){this.logService.error(`Extension '${i.description.identifier.value}' CANNOT use API proposal: defaultChatParticipant.`);continue}if((e.defaultImplicitVariables||e.locations||e.supportsModelPicker)&&!f(i.description,"chatParticipantAdditions")){this.logService.error(`Extension '${i.description.identifier.value}' CANNOT use API proposal: chatParticipantAdditions.`);continue}if(!e.id||!e.name){this.logService.error(`Extension '${i.description.identifier.value}' CANNOT register participant without both id and name.`);continue}const a=[];if(f(i.description,"contribChatParticipantDetection")&&(e.disambiguation?.length&&a.push(...e.disambiguation.map(r=>({...r,category:r.category??r.categoryName}))),e.commands))for(const r of e.commands)r.disambiguation?.length&&a.push(...r.disambiguation.map(m=>({...m,category:m.category??m.categoryName})));const c=new R;c.add(this._chatAgentService.registerAgent(e.id,{extensionId:i.description.identifier,publisherDisplayName:i.description.publisherDisplayName??i.description.publisher,extensionPublisherId:i.description.publisher,extensionDisplayName:i.description.displayName??i.description.name,id:e.id,description:e.description,supportsModelPicker:e.supportsModelPicker,when:e.when,metadata:{isSticky:e.isSticky,sampleRequest:e.sampleRequest},name:e.name,fullName:e.fullName,isDefault:e.isDefault,locations:P(e.locations)?e.locations.map(C.fromRaw):[C.Panel],slashCommands:e.commands??[],disambiguation:A(a.flat()),supportsToolReferences:e.supportsToolReferences})),this._participantRegistrationDisposables.set(I(i.description.identifier,e.id),c)}for(const i of n.removed)for(const e of i.value)this._participantRegistrationDisposables.deleteAndDispose(I(i.description.identifier,e.id))})}registerViewContainer(){const o=k("chat.viewContainer.label","Chat"),n=S.commentDiscussion,i=U;return d.as(h.ViewContainersRegistry).registerViewContainer({id:i,title:o,icon:n,ctorDescriptor:new y(M,[i,{mergeViewWithContainerWhenSingleView:!0}]),storageId:i,hideIfEmpty:!0,order:100},O.Sidebar)}registerDefaultParticipantView(){const o="GitHub Copilot",n=[{id:v,containerIcon:this._viewContainer.icon,containerTitle:this._viewContainer.title.value,singleViewPaneContainerTitle:this._viewContainer.title.value,name:{value:o,original:o},canToggleVisibility:!1,canMoveView:!0,ctorDescriptor:new y(X),when:T.or(K,w)}];return d.as(h.ViewsRegistry).registerViews(n,this._viewContainer),_(()=>{d.as(h.ViewsRegistry).deregisterViews(n,this._viewContainer)})}};l=g([p(0,j),p(1,W)],l);function I(s,o){return`${s.value}_${o}`}let u=class extends N{constructor(n,i,e){super();this.productService=e;const a=w.bindTo(i);this._register(E.runAndSubscribe(n.onDidChangeExtensionsNotification,()=>{const r=n.getExtensionsNotification()?.extensions.find(m=>m.identifier.id==="github.copilot-chat");r?(a.set(!0),this.registerWelcomeView(r)):a.set(!1)}))}static ID="workbench.contrib.chatCompatNotifier";registeredWelcomeView=!1;registerWelcomeView(n){if(this.registeredWelcomeView)return;this.registeredWelcomeView=!0;const i=t("showExtension","Show Extension"),e=t("chatFailErrorMessage","Chat failed to load because the installed version of the {0} extension is not compatible with this version of {1}. Please ensure that the GitHub Copilot Chat extension is up to date.","GitHub Copilot Chat",this.productService.nameLong),a=`[${i}](command:${H}?${encodeURIComponent(JSON.stringify([["GitHub.copilot-chat"]]))})`,c=`GitHub Copilot Chat version: ${n.version}`,r=d.as(h.ViewsRegistry);this._register(r.registerViewWelcomeContent(v,{content:[e,a,c].join(`

`),when:w}))}};u=g([p(0,G),p(1,q),p(2,$)],u);export{u as ChatCompatibilityNotifier,l as ChatExtensionPointHandler};
