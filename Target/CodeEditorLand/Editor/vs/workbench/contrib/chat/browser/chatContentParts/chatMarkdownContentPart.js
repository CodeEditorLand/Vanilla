var O=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var b=(l,t,e,o)=>{for(var r=o>1?void 0:o?V(t,e):t,s=l.length-1,i;s>=0;s--)(i=l[s])&&(r=(o?i(t,e,r):i(r))||r);return o&&r&&O(t,e,r),r},m=(l,t)=>(e,o)=>t(e,o,l);import*as F from"../../../../../base/browser/dom.js";import{Emitter as K}from"../../../../../base/common/event.js";import"../../../../../base/common/htmlContent.js";import{Disposable as M}from"../../../../../base/common/lifecycle.js";import{equalsIgnoreCase as q}from"../../../../../base/common/strings.js";import"../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js";import{Range as A}from"../../../../../editor/common/core/range.js";import{ITextModelService as N}from"../../../../../editor/common/services/resolverService.js";import{MenuId as $}from"../../../../../platform/actions/common/actions.js";import{IContextKeyService as z}from"../../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as _}from"../../../../../platform/instantiation/common/instantiation.js";import"../chat.js";import{ResourcePool as G}from"./chatCollections.js";import"./chatContentParts.js";import"../chatListRenderer.js";import{ChatMarkdownDecorationsRenderer as J}from"../chatMarkdownDecorationsRenderer.js";import"../chatOptions.js";import{CodeBlockPart as Q,localFileLanguageId as W,parseLocalFileData as X}from"../codeBlockPart.js";import"../../common/annotations.js";import"../../common/chatModel.js";import{isRequestVM as S,isResponseVM as I}from"../../common/chatViewModel.js";import"../../common/codeBlockModelCollection.js";import"../../../../../base/common/uri.js";const P=F.$;let h=class extends M{constructor(e,o,r,s=!1,i=0,C,u,Y,w,T,Z,U){super();this.markdown=e;this.editorPool=r;this.codeBlockModelCollection=Y;this.textModelService=Z;const n=o.element,j=U.createInstance(J),R=[];let E=i;const v=this._register(C.render(e,{fillInIncompleteTokens:s,codeBlockRendererSync:(p,B)=>{const k=E++;let g,y,D,x;if(q(p,W))try{const c=X(B);y=c.range&&A.lift(c.range),g=this.textModelService.createModelReference(c.uri).then(a=>a.object)}catch{return P("div")}else{if(!S(n)&&!I(n))return P("div");const c=I(n)||S(n)?n.sessionId:"",a=this.codeBlockModelCollection.getOrCreate(c,n,k);D=a.vulns,x=a.codemapperUri,g=a.model}const H=I(n)&&n.errorDetails?.responseIsFiltered,d=this.renderCodeBlock({languageId:p,textModel:g,codeBlockIndex:k,element:n,range:y,hideToolbar:H,parentContextKeyService:T,vulns:D,codemapperUri:x},B,u,w.editableCodeBlock);this.allRefs.push(d),this._register(d.object.onDidChangeContentHeight(()=>this._onDidChangeHeight.fire()));const L={codeBlockIndex:k,element:n,focus(){d.object.focus()},uri:d.object.uri,codemapperUri:void 0};return this.codeblocks.push(L),R.push(d),d.object.element},asyncRenderCallback:()=>this._onDidChangeHeight.fire()}));this._register(j.walkTreeAndAnnotateReferenceLinks(v.element)),R.reverse().forEach(p=>this._register(p)),this.domNode=v.element}domNode;allRefs=[];_onDidChangeHeight=this._register(new K);onDidChangeHeight=this._onDidChangeHeight.event;codeblocks=[];renderCodeBlock(e,o,r,s){const i=this.editorPool.get(),C=i.object;return I(e.element)&&this.codeBlockModelCollection.update(e.element.sessionId,e.element,e.codeBlockIndex,{text:o,languageId:e.languageId}).then(u=>{this.codeblocks[e.codeBlockIndex]={...this.codeblocks[e.codeBlockIndex],codemapperUri:u.codemapperUri}}),C.render(e,r,s),i}hasSameContent(e){return e.kind==="markdownContent"&&e.content.value===this.markdown.value}layout(e){this.allRefs.forEach(o=>o.object.layout(e))}addDisposable(e){this._register(e)}};h=b([m(9,z),m(10,N),m(11,_)],h);let f=class extends M{_pool;inUse(){return this._pool.inUse}constructor(t,e,o,r){super(),this._pool=this._register(new G(()=>r.createInstance(Q,t,$.ChatCodeBlock,e,o)))}get(){const t=this._pool.get();let e=!1;return{object:t,isStale:()=>e,dispose:()=>{t.reset(),e=!0,this._pool.release(t)}}}};f=b([m(3,_)],f);export{h as ChatMarkdownContentPart,f as EditorPool};
