{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownContentPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../../base/browser/dom.js\";\nimport { Emitter } from \"../../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { equalsIgnoreCase } from \"../../../../../base/common/strings.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport type { MarkdownRenderer } from \"../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../../editor/common/services/resolverService.js\";\nimport { MenuId } from \"../../../../../platform/actions/common/actions.js\";\nimport { IContextKeyService } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport type { IMarkdownVulnerability } from \"../../common/annotations.js\";\nimport type { IChatProgressRenderableResponseContent } from \"../../common/chatModel.js\";\nimport { isRequestVM, isResponseVM } from \"../../common/chatViewModel.js\";\nimport type { CodeBlockModelCollection } from \"../../common/codeBlockModelCollection.js\";\nimport type {\n\tIChatCodeBlockInfo,\n\tIChatListItemRendererOptions,\n} from \"../chat.js\";\nimport type { IChatRendererDelegate } from \"../chatListRenderer.js\";\nimport { ChatMarkdownDecorationsRenderer } from \"../chatMarkdownDecorationsRenderer.js\";\nimport type { ChatEditorOptions } from \"../chatOptions.js\";\nimport {\n\tCodeBlockPart,\n\ttype ICodeBlockData,\n\tlocalFileLanguageId,\n\tparseLocalFileData,\n} from \"../codeBlockPart.js\";\nimport { type IDisposableReference, ResourcePool } from \"./chatCollections.js\";\nimport type {\n\tIChatContentPart,\n\tIChatContentPartRenderContext,\n} from \"./chatContentParts.js\";\n\nconst $ = dom.$;\n\nexport class ChatMarkdownContentPart\n\textends Disposable\n\timplements IChatContentPart\n{\n\tpublic readonly domNode: HTMLElement;\n\tprivate readonly allRefs: IDisposableReference<CodeBlockPart>[] = [];\n\n\tprivate readonly _onDidChangeHeight = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeHeight = this._onDidChangeHeight.event;\n\n\tpublic readonly codeblocks: IChatCodeBlockInfo[] = [];\n\n\tconstructor(\n\t\tprivate readonly markdown: IMarkdownString,\n\t\tcontext: IChatContentPartRenderContext,\n\t\tprivate readonly editorPool: EditorPool,\n\t\tfillInIncompleteTokens = false,\n\t\tcodeBlockStartIndex = 0,\n\t\trenderer: MarkdownRenderer,\n\t\tcurrentWidth: number,\n\t\tprivate readonly codeBlockModelCollection: CodeBlockModelCollection,\n\t\trendererOptions: IChatListItemRendererOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tconst element = context.element;\n\t\tconst markdownDecorationsRenderer = instantiationService.createInstance(\n\t\t\tChatMarkdownDecorationsRenderer,\n\t\t);\n\n\t\t// We release editors in order so that it's more likely that the same editor will be assigned if this element is re-rendered right away, like it often is during progressive rendering\n\t\tconst orderedDisposablesList: IDisposable[] = [];\n\t\tlet codeBlockIndex = codeBlockStartIndex;\n\t\tconst result = this._register(\n\t\t\trenderer.render(markdown, {\n\t\t\t\tfillInIncompleteTokens,\n\t\t\t\tcodeBlockRendererSync: (languageId, text) => {\n\t\t\t\t\tconst index = codeBlockIndex++;\n\t\t\t\t\tlet textModel: Promise<IResolvedTextEditorModel>;\n\t\t\t\t\tlet range: Range | undefined;\n\t\t\t\t\tlet vulns: readonly IMarkdownVulnerability[] | undefined;\n\t\t\t\t\tlet codemapperUri: URI | undefined;\n\t\t\t\t\tif (equalsIgnoreCase(languageId, localFileLanguageId)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst parsedBody = parseLocalFileData(text);\n\t\t\t\t\t\t\trange =\n\t\t\t\t\t\t\t\tparsedBody.range &&\n\t\t\t\t\t\t\t\tRange.lift(parsedBody.range);\n\t\t\t\t\t\t\ttextModel = this.textModelService\n\t\t\t\t\t\t\t\t.createModelReference(parsedBody.uri)\n\t\t\t\t\t\t\t\t.then((ref) => ref.object);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treturn $(\"div\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!isRequestVM(element) && !isResponseVM(element)) {\n\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\"Trying to render code block in welcome\",\n\t\t\t\t\t\t\t\telement.id,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn $(\"div\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst sessionId =\n\t\t\t\t\t\t\tisResponseVM(element) || isRequestVM(element)\n\t\t\t\t\t\t\t\t? element.sessionId\n\t\t\t\t\t\t\t\t: \"\";\n\t\t\t\t\t\tconst modelEntry =\n\t\t\t\t\t\t\tthis.codeBlockModelCollection.getOrCreate(\n\t\t\t\t\t\t\t\tsessionId,\n\t\t\t\t\t\t\t\telement,\n\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tvulns = modelEntry.vulns;\n\t\t\t\t\t\tcodemapperUri = modelEntry.codemapperUri;\n\t\t\t\t\t\ttextModel = modelEntry.model;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst hideToolbar =\n\t\t\t\t\t\tisResponseVM(element) &&\n\t\t\t\t\t\telement.errorDetails?.responseIsFiltered;\n\t\t\t\t\tconst ref = this.renderCodeBlock(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t\ttextModel,\n\t\t\t\t\t\t\tcodeBlockIndex: index,\n\t\t\t\t\t\t\telement,\n\t\t\t\t\t\t\trange,\n\t\t\t\t\t\t\thideToolbar,\n\t\t\t\t\t\t\tparentContextKeyService: contextKeyService,\n\t\t\t\t\t\t\tvulns,\n\t\t\t\t\t\t\tcodemapperUri,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tcurrentWidth,\n\t\t\t\t\t\trendererOptions.editableCodeBlock,\n\t\t\t\t\t);\n\t\t\t\t\tthis.allRefs.push(ref);\n\n\t\t\t\t\t// Attach this after updating text/layout of the editor, so it should only be fired when the size updates later (horizontal scrollbar, wrapping)\n\t\t\t\t\t// not during a renderElement OR a progressive render (when we will be firing this event anyway at the end of the render)\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tref.object.onDidChangeContentHeight(() =>\n\t\t\t\t\t\t\tthis._onDidChangeHeight.fire(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst info: IChatCodeBlockInfo = {\n\t\t\t\t\t\tcodeBlockIndex: index,\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tfocus() {\n\t\t\t\t\t\t\tref.object.focus();\n\t\t\t\t\t\t},\n\t\t\t\t\t\turi: ref.object.uri,\n\t\t\t\t\t\tcodemapperUri: undefined,\n\t\t\t\t\t};\n\t\t\t\t\tthis.codeblocks.push(info);\n\t\t\t\t\torderedDisposablesList.push(ref);\n\t\t\t\t\treturn ref.object.element;\n\t\t\t\t},\n\t\t\t\tasyncRenderCallback: () => this._onDidChangeHeight.fire(),\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tmarkdownDecorationsRenderer.walkTreeAndAnnotateReferenceLinks(\n\t\t\t\tresult.element,\n\t\t\t),\n\t\t);\n\n\t\torderedDisposablesList.reverse().forEach((d) => this._register(d));\n\t\tthis.domNode = result.element;\n\t}\n\n\tprivate renderCodeBlock(\n\t\tdata: ICodeBlockData,\n\t\ttext: string,\n\t\tcurrentWidth: number,\n\t\teditableCodeBlock: boolean | undefined,\n\t): IDisposableReference<CodeBlockPart> {\n\t\tconst ref = this.editorPool.get();\n\t\tconst editorInfo = ref.object;\n\t\tif (isResponseVM(data.element)) {\n\t\t\tthis.codeBlockModelCollection\n\t\t\t\t.update(\n\t\t\t\t\tdata.element.sessionId,\n\t\t\t\t\tdata.element,\n\t\t\t\t\tdata.codeBlockIndex,\n\t\t\t\t\t{ text, languageId: data.languageId },\n\t\t\t\t)\n\t\t\t\t.then((e) => {\n\t\t\t\t\tthis.codeblocks[data.codeBlockIndex] = {\n\t\t\t\t\t\t...this.codeblocks[data.codeBlockIndex]!,\n\t\t\t\t\t\tcodemapperUri: e.codemapperUri,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t}\n\n\t\teditorInfo.render(data, currentWidth, editableCodeBlock);\n\n\t\treturn ref;\n\t}\n\n\thasSameContent(other: IChatProgressRenderableResponseContent): boolean {\n\t\treturn (\n\t\t\tother.kind === \"markdownContent\" &&\n\t\t\tother.content.value === this.markdown.value\n\t\t);\n\t}\n\n\tlayout(width: number): void {\n\t\tthis.allRefs.forEach((ref) => ref.object.layout(width));\n\t}\n\n\taddDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n}\n\nexport class EditorPool extends Disposable {\n\tprivate readonly _pool: ResourcePool<CodeBlockPart>;\n\n\tpublic inUse(): Iterable<CodeBlockPart> {\n\t\treturn this._pool.inUse;\n\t}\n\n\tconstructor(\n\t\toptions: ChatEditorOptions,\n\t\tdelegate: IChatRendererDelegate,\n\t\toverflowWidgetsDomNode: HTMLElement | undefined,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._pool = this._register(\n\t\t\tnew ResourcePool(() => {\n\t\t\t\treturn instantiationService.createInstance(\n\t\t\t\t\tCodeBlockPart,\n\t\t\t\t\toptions,\n\t\t\t\t\tMenuId.ChatCodeBlock,\n\t\t\t\t\tdelegate,\n\t\t\t\t\toverflowWidgetsDomNode,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tget(): IDisposableReference<CodeBlockPart> {\n\t\tconst codeBlock = this._pool.get();\n\t\tlet stale = false;\n\t\treturn {\n\t\t\tobject: codeBlock,\n\t\t\tisStale: () => stale,\n\t\t\tdispose: () => {\n\t\t\t\tcodeBlock.reset();\n\t\t\t\tstale = true;\n\t\t\t\tthis._pool.release(codeBlock);\n\t\t\t},\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ref"]
}
