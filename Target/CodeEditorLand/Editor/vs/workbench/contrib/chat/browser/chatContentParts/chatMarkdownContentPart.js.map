{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownContentPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../../base/common/htmlContent.js';\nimport { Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { equalsIgnoreCase } from '../../../../../base/common/strings.js';\nimport { MarkdownRenderer } from '../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { MenuId } from '../../../../../platform/actions/common/actions.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IChatCodeBlockInfo, IChatListItemRendererOptions } from '../chat.js';\nimport { IDisposableReference, ResourcePool } from './chatCollections.js';\nimport { IChatContentPart, IChatContentPartRenderContext } from './chatContentParts.js';\nimport { IChatRendererDelegate } from '../chatListRenderer.js';\nimport { ChatMarkdownDecorationsRenderer } from '../chatMarkdownDecorationsRenderer.js';\nimport { ChatEditorOptions } from '../chatOptions.js';\nimport { CodeBlockPart, ICodeBlockData, localFileLanguageId, parseLocalFileData } from '../codeBlockPart.js';\nimport { IMarkdownVulnerability } from '../../common/annotations.js';\nimport { IChatProgressRenderableResponseContent } from '../../common/chatModel.js';\nimport { isRequestVM, isResponseVM } from '../../common/chatViewModel.js';\nimport { CodeBlockModelCollection } from '../../common/codeBlockModelCollection.js';\n\nconst $ = dom.$;\n\nexport class ChatMarkdownContentPart extends Disposable implements IChatContentPart {\n\tpublic readonly domNode: HTMLElement;\n\tprivate readonly allRefs: IDisposableReference<CodeBlockPart>[] = [];\n\n\tprivate readonly _onDidChangeHeight = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeHeight = this._onDidChangeHeight.event;\n\n\tpublic readonly codeblocks: IChatCodeBlockInfo[] = [];\n\n\tconstructor(\n\t\tprivate readonly markdown: IMarkdownString,\n\t\tcontext: IChatContentPartRenderContext,\n\t\tprivate readonly editorPool: EditorPool,\n\t\tfillInIncompleteTokens = false,\n\t\tcodeBlockStartIndex = 0,\n\t\trenderer: MarkdownRenderer,\n\t\tcurrentWidth: number,\n\t\tprivate readonly codeBlockModelCollection: CodeBlockModelCollection,\n\t\trendererOptions: IChatListItemRendererOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tconst element = context.element;\n\t\tconst markdownDecorationsRenderer = instantiationService.createInstance(ChatMarkdownDecorationsRenderer);\n\n\t\t// We release editors in order so that it's more likely that the same editor will be assigned if this element is re-rendered right away, like it often is during progressive rendering\n\t\tconst orderedDisposablesList: IDisposable[] = [];\n\t\tlet codeBlockIndex = codeBlockStartIndex;\n\t\tconst result = this._register(renderer.render(markdown, {\n\t\t\tfillInIncompleteTokens,\n\t\t\tcodeBlockRendererSync: (languageId, text) => {\n\t\t\t\tconst index = codeBlockIndex++;\n\t\t\t\tlet textModel: Promise<IResolvedTextEditorModel>;\n\t\t\t\tlet range: Range | undefined;\n\t\t\t\tlet vulns: readonly IMarkdownVulnerability[] | undefined;\n\t\t\t\tif (equalsIgnoreCase(languageId, localFileLanguageId)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst parsedBody = parseLocalFileData(text);\n\t\t\t\t\t\trange = parsedBody.range && Range.lift(parsedBody.range);\n\t\t\t\t\t\ttextModel = this.textModelService.createModelReference(parsedBody.uri).then(ref => ref.object);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn $('div');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!isRequestVM(element) && !isResponseVM(element)) {\n\t\t\t\t\t\tconsole.error('Trying to render code block in welcome', element.id, index);\n\t\t\t\t\t\treturn $('div');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sessionId = isResponseVM(element) || isRequestVM(element) ? element.sessionId : '';\n\t\t\t\t\tconst modelEntry = this.codeBlockModelCollection.getOrCreate(sessionId, element, index);\n\t\t\t\t\tvulns = modelEntry.vulns;\n\t\t\t\t\ttextModel = modelEntry.model;\n\t\t\t\t}\n\n\t\t\t\tconst hideToolbar = isResponseVM(element) && element.errorDetails?.responseIsFiltered;\n\t\t\t\tconst ref = this.renderCodeBlock({ languageId, textModel, codeBlockIndex: index, element, range, hideToolbar, parentContextKeyService: contextKeyService, vulns }, text, currentWidth, rendererOptions.editableCodeBlock);\n\t\t\t\tthis.allRefs.push(ref);\n\n\t\t\t\t// Attach this after updating text/layout of the editor, so it should only be fired when the size updates later (horizontal scrollbar, wrapping)\n\t\t\t\t// not during a renderElement OR a progressive render (when we will be firing this event anyway at the end of the render)\n\t\t\t\tthis._register(ref.object.onDidChangeContentHeight(() => this._onDidChangeHeight.fire()));\n\n\t\t\t\tconst info: IChatCodeBlockInfo = {\n\t\t\t\t\tcodeBlockIndex: index,\n\t\t\t\t\telement,\n\t\t\t\t\tfocus() {\n\t\t\t\t\t\tref.object.focus();\n\t\t\t\t\t},\n\t\t\t\t\turi: ref.object.uri\n\t\t\t\t};\n\t\t\t\tthis.codeblocks.push(info);\n\t\t\t\torderedDisposablesList.push(ref);\n\t\t\t\treturn ref.object.element;\n\t\t\t},\n\t\t\tasyncRenderCallback: () => this._onDidChangeHeight.fire(),\n\t\t}));\n\n\t\tthis._register(markdownDecorationsRenderer.walkTreeAndAnnotateReferenceLinks(result.element));\n\n\t\torderedDisposablesList.reverse().forEach(d => this._register(d));\n\t\tthis.domNode = result.element;\n\t}\n\n\tprivate renderCodeBlock(data: ICodeBlockData, text: string, currentWidth: number, editableCodeBlock: boolean | undefined): IDisposableReference<CodeBlockPart> {\n\t\tconst ref = this.editorPool.get();\n\t\tconst editorInfo = ref.object;\n\t\tif (isResponseVM(data.element)) {\n\t\t\tthis.codeBlockModelCollection.update(data.element.sessionId, data.element, data.codeBlockIndex, { text, languageId: data.languageId });\n\t\t}\n\n\t\teditorInfo.render(data, currentWidth, editableCodeBlock);\n\n\t\treturn ref;\n\t}\n\n\thasSameContent(other: IChatProgressRenderableResponseContent): boolean {\n\t\treturn other.kind === 'markdownContent' && other.content.value === this.markdown.value;\n\t}\n\n\tlayout(width: number): void {\n\t\tthis.allRefs.forEach(ref => ref.object.layout(width));\n\t}\n\n\taddDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n}\n\nexport class EditorPool extends Disposable {\n\n\tprivate readonly _pool: ResourcePool<CodeBlockPart>;\n\n\tpublic inUse(): Iterable<CodeBlockPart> {\n\t\treturn this._pool.inUse;\n\t}\n\n\tconstructor(\n\t\toptions: ChatEditorOptions,\n\t\tdelegate: IChatRendererDelegate,\n\t\toverflowWidgetsDomNode: HTMLElement | undefined,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._pool = this._register(new ResourcePool(() => {\n\t\t\treturn instantiationService.createInstance(CodeBlockPart, options, MenuId.ChatCodeBlock, delegate, overflowWidgetsDomNode);\n\t\t}));\n\t}\n\n\tget(): IDisposableReference<CodeBlockPart> {\n\t\tconst codeBlock = this._pool.get();\n\t\tlet stale = false;\n\t\treturn {\n\t\t\tobject: codeBlock,\n\t\t\tisStale: () => stale,\n\t\t\tdispose: () => {\n\t\t\t\tcodeBlock.reset();\n\t\t\t\tstale = true;\n\t\t\t\tthis._pool.release(codeBlock);\n\t\t\t}\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ref"]
}
