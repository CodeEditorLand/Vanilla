{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatTaskContentPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IChatContentPart, IChatContentPartRenderContext } from './chatContentParts.js';\nimport { ChatProgressContentPart } from './chatProgressContentPart.js';\nimport { ChatCollapsibleListContentPart, CollapsibleListPool } from './chatReferencesContentPart.js';\nimport { IChatProgressRenderableResponseContent } from '../../common/chatModel.js';\nimport { IChatTask } from '../../common/chatService.js';\nimport { IChatResponseViewModel } from '../../common/chatViewModel.js';\n\nexport class ChatTaskContentPart extends Disposable implements IChatContentPart {\n\tpublic readonly domNode: HTMLElement;\n\tpublic readonly onDidChangeHeight: Event<void>;\n\n\tconstructor(\n\t\tprivate readonly task: IChatTask,\n\t\tcontentReferencesListPool: CollapsibleListPool,\n\t\trenderer: MarkdownRenderer,\n\t\tcontext: IChatContentPartRenderContext,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tif (task.progress.length) {\n\t\t\tconst refsPart = this._register(instantiationService.createInstance(ChatCollapsibleListContentPart, task.progress, task.content.value, context.element as IChatResponseViewModel, contentReferencesListPool));\n\t\t\tthis.domNode = dom.$('.chat-progress-task');\n\t\t\tthis.domNode.appendChild(refsPart.domNode);\n\t\t\tthis.onDidChangeHeight = refsPart.onDidChangeHeight;\n\t\t} else {\n\t\t\t// #217645\n\t\t\tconst isSettled = task.isSettled?.() ?? true;\n\t\t\tconst progressPart = this._register(instantiationService.createInstance(ChatProgressContentPart, task, renderer, context, !isSettled, true));\n\t\t\tthis.domNode = progressPart.domNode;\n\t\t\tthis.onDidChangeHeight = Event.None;\n\t\t}\n\t}\n\n\thasSameContent(other: IChatProgressRenderableResponseContent): boolean {\n\t\treturn other.kind === 'progressTask'\n\t\t\t&& other.progress.length === this.task.progress.length\n\t\t\t&& other.isSettled() === this.task.isSettled();\n\t}\n\n\taddDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,aAAa;AACtB,SAAS,YAAY,mBAAmB;AACxC,SAAS,wBAAwB;AACjC,SAAS,6BAA6B;AACtC,SAAS,kBAAkB,qCAAqC;AAChE,SAAS,+BAA+B;AACxC,SAAS,gCAAgC,2BAA2B;AACpE,SAAS,8CAA8C;AACvD,SAAS,iBAAiB;AAC1B,SAAS,8BAA8B;AAEhC,IAAM,sBAAN,cAAkC,WAAuC;AAAA,EAI/E,YACkB,MACjB,2BACA,UACA,SACuB,sBACtB;AACD,UAAM;AANW;AAQjB,QAAI,KAAK,SAAS,QAAQ;AACzB,YAAM,WAAW,KAAK,UAAU,qBAAqB,eAAe,gCAAgC,KAAK,UAAU,KAAK,QAAQ,OAAO,QAAQ,SAAmC,yBAAyB,CAAC;AAC5M,WAAK,UAAU,IAAI,EAAE,qBAAqB;AAC1C,WAAK,QAAQ,YAAY,SAAS,OAAO;AACzC,WAAK,oBAAoB,SAAS;AAAA,IACnC,OAAO;AAEN,YAAM,YAAY,KAAK,YAAY,KAAK;AACxC,YAAM,eAAe,KAAK,UAAU,qBAAqB,eAAe,yBAAyB,MAAM,UAAU,SAAS,CAAC,WAAW,IAAI,CAAC;AAC3I,WAAK,UAAU,aAAa;AAC5B,WAAK,oBAAoB,MAAM;AAAA,IAChC;AAAA,EACD;AAAA,EA1CD,OAiBgF;AAAA;AAAA;AAAA,EAC/D;AAAA,EACA;AAAA,EAyBhB,eAAe,OAAwD;AACtE,WAAO,MAAM,SAAS,kBAClB,MAAM,SAAS,WAAW,KAAK,KAAK,SAAS,UAC7C,MAAM,UAAU,MAAM,KAAK,KAAK,UAAU;AAAA,EAC/C;AAAA,EAEA,cAAc,YAA+B;AAC5C,SAAK,UAAU,UAAU;AAAA,EAC1B;AACD;AApCa,sBAAN;AAAA,EASJ;AAAA,GATU;",
  "names": []
}
