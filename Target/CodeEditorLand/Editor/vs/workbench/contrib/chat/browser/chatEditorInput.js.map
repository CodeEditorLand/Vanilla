{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable, toDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport {\n\tEditorInputCapabilities,\n\ttype IEditorSerializer,\n\ttype IUntypedEditorInput,\n} from \"../../../common/editor.js\";\nimport { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { ChatAgentLocation } from \"../common/chatAgents.js\";\nimport type { IChatModel } from \"../common/chatModel.js\";\nimport { IChatService } from \"../common/chatService.js\";\nimport type { IChatEditorOptions } from \"./chatEditor.js\";\n\nconst ChatEditorIcon = registerIcon(\n\t\"chat-editor-label-icon\",\n\tCodicon.commentDiscussion,\n\tnls.localize(\"chatEditorLabelIcon\", \"Icon of the chat editor label.\"),\n);\n\nexport class ChatEditorInput extends EditorInput {\n\tstatic readonly countsInUse = new Set<number>();\n\n\tstatic readonly TypeID: string = \"workbench.input.chatSession\";\n\tstatic readonly EditorID: string = \"workbench.editor.chatSession\";\n\n\tprivate readonly inputCount: number;\n\tpublic sessionId: string | undefined;\n\n\tprivate model: IChatModel | undefined;\n\n\tstatic getNewEditorUri(): URI {\n\t\tconst handle = Math.floor(Math.random() * 1e9);\n\t\treturn ChatUri.generate(handle);\n\t}\n\n\tstatic getNextCount(): number {\n\t\tlet count = 0;\n\t\twhile (ChatEditorInput.countsInUse.has(count)) {\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\treadonly options: IChatEditorOptions,\n\t\t@IChatService private readonly chatService: IChatService\n\t) {\n\t\tsuper();\n\n\t\tconst parsed = ChatUri.parse(resource);\n\t\tif (typeof parsed?.handle !== 'number') {\n\t\t\tthrow new Error('Invalid chat URI');\n\t\t}\n\n\t\tthis.sessionId = (options.target && 'sessionId' in options.target) ?\n\t\t\toptions.target.sessionId :\n\t\t\tundefined;\n\t\tthis.inputCount = ChatEditorInput.getNextCount();\n\t\tChatEditorInput.countsInUse.add(this.inputCount);\n\t\tthis._register(toDisposable(() => ChatEditorInput.countsInUse.delete(this.inputCount)));\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn ChatEditorInput.EditorID;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn super.capabilities | EditorInputCapabilities.Singleton;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn (\n\t\t\totherInput instanceof ChatEditorInput &&\n\t\t\totherInput.resource.toString() === this.resource.toString()\n\t\t);\n\t}\n\n\toverride get typeId(): string {\n\t\treturn ChatEditorInput.TypeID;\n\t}\n\n\toverride getName(): string {\n\t\treturn (\n\t\t\tthis.model?.title ||\n\t\t\tnls.localize(\"chatEditorName\", \"Chat\") +\n\t\t\t\t(this.inputCount > 0 ? ` ${this.inputCount + 1}` : \"\")\n\t\t);\n\t}\n\n\toverride getIcon(): ThemeIcon {\n\t\treturn ChatEditorIcon;\n\t}\n\n\toverride async resolve(): Promise<ChatEditorModel | null> {\n\t\tif (typeof this.sessionId === \"string\") {\n\t\t\tthis.model = this.chatService.getOrRestoreSession(this.sessionId);\n\t\t} else if (!this.options.target) {\n\t\t\tthis.model = this.chatService.startSession(\n\t\t\t\tChatAgentLocation.Panel,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t} else if (\"data\" in this.options.target) {\n\t\t\tthis.model = this.chatService.loadSessionFromContent(\n\t\t\t\tthis.options.target.data,\n\t\t\t);\n\t\t}\n\n\t\tif (!this.model) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.sessionId = this.model.sessionId;\n\t\tthis._register(\n\t\t\tthis.model.onDidChange(() => this._onDidChangeLabel.fire()),\n\t\t);\n\n\t\treturn this._register(new ChatEditorModel(this.model));\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tif (this.sessionId) {\n\t\t\tthis.chatService.clearSession(this.sessionId);\n\t\t}\n\t}\n}\n\nexport class ChatEditorModel extends Disposable {\n\tprivate _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate _isDisposed = false;\n\tprivate _isResolved = false;\n\n\tconstructor(readonly model: IChatModel) {\n\t\tsuper();\n\t}\n\n\tasync resolve(): Promise<void> {\n\t\tthis._isResolved = true;\n\t}\n\n\tisResolved(): boolean {\n\t\treturn this._isResolved;\n\t}\n\n\tisDisposed(): boolean {\n\t\treturn this._isDisposed;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._isDisposed = true;\n\t}\n}\n\nexport namespace ChatUri {\n\texport const scheme = Schemas.vscodeChatSesssion;\n\n\texport function generate(handle: number): URI {\n\t\treturn URI.from({ scheme, path: `chat-${handle}` });\n\t}\n\n\texport function parse(resource: URI): { handle: number } | undefined {\n\t\tif (resource.scheme !== scheme) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst match = resource.path.match(/chat-(\\d+)/);\n\t\tconst handleStr = match?.[1];\n\t\tif (typeof handleStr !== \"string\") {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst handle = Number.parseInt(handleStr);\n\t\tif (isNaN(handle)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn { handle };\n\t}\n}\n\ninterface ISerializedChatEditorInput {\n\toptions: IChatEditorOptions;\n\tsessionId: string;\n\tresource: URI;\n}\n\nexport class ChatEditorInputSerializer implements IEditorSerializer {\n\tcanSerialize(\n\t\tinput: EditorInput,\n\t): input is ChatEditorInput & { readonly sessionId: string } {\n\t\treturn (\n\t\t\tinput instanceof ChatEditorInput &&\n\t\t\ttypeof input.sessionId === \"string\"\n\t\t);\n\t}\n\n\tserialize(input: EditorInput): string | undefined {\n\t\tif (!this.canSerialize(input)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst obj: ISerializedChatEditorInput = {\n\t\t\toptions: input.options,\n\t\t\tsessionId: input.sessionId,\n\t\t\tresource: input.resource,\n\t\t};\n\t\treturn JSON.stringify(obj);\n\t}\n\n\tdeserialize(\n\t\tinstantiationService: IInstantiationService,\n\t\tserializedEditor: string,\n\t): EditorInput | undefined {\n\t\ttry {\n\t\t\tconst parsed: ISerializedChatEditorInput =\n\t\t\t\tJSON.parse(serializedEditor);\n\t\t\tconst resource = URI.revive(parsed.resource);\n\t\t\treturn instantiationService.createInstance(\n\t\t\t\tChatEditorInput,\n\t\t\t\tresource,\n\t\t\t\t{ ...parsed.options, target: { sessionId: parsed.sessionId } },\n\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ChatUri"]
}
