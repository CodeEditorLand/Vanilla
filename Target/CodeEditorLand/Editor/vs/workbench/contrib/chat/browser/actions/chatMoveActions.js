import{localize2 as a}from"../../../../../nls.js";import{Action2 as d,MenuId as w,registerAction2 as p}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as m}from"../../../../../platform/contextkey/common/contextkey.js";import"../../../../../platform/instantiation/common/instantiation.js";import{ActiveEditorContext as T}from"../../../../common/contextkeys.js";import{CHAT_CATEGORY as u,isChatViewTitleActionContext as E}from"./chatActions.js";import{CHAT_VIEW_ID as c,IChatWidgetService as V}from"../chat.js";import"../chatEditor.js";import{ChatEditorInput as s}from"../chatEditorInput.js";import"../chatViewPane.js";import{CONTEXT_CHAT_ENABLED as v}from"../../common/chatContextKeys.js";import{IEditorGroupsService as W}from"../../../../services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as f,AUX_WINDOW_GROUP as h,IEditorService as I}from"../../../../services/editor/common/editorService.js";import{IViewsService as b}from"../../../../services/views/common/viewsService.js";var x=(e=>(e.Editor="Editor",e.Window="Window",e))(x||{});function J(){p(class extends d{constructor(){super({id:"workbench.action.chat.openInEditor",title:a("chat.openInEditor.label","Open Chat in Editor"),category:u,precondition:v,f1:!0,menu:{id:w.ViewTitle,when:m.equals("view",c),order:0}})}async run(o,...e){const n=e[0];S(o,"Editor",E(n)?n.chatView:void 0)}}),p(class extends d{constructor(){super({id:"workbench.action.chat.openInNewWindow",title:a("chat.openInNewWindow.label","Open Chat in New Window"),category:u,precondition:v,f1:!0,menu:{id:w.ViewTitle,when:m.equals("view",c),order:0}})}async run(o,...e){const n=e[0];S(o,"Window",E(n)?n.chatView:void 0)}}),p(class extends d{constructor(){super({id:"workbench.action.chat.openInSidebar",title:a("interactiveSession.openInSidebar.label","Open Chat in Side Bar"),category:u,precondition:v,f1:!0,menu:[{id:w.EditorTitle,order:0,when:T.isEqualTo(s.EditorID)}]})}async run(o,...e){return y(o)}})}async function S(i,o,e){const n=i.get(V),r=i.get(I),t=e?.widget??n.lastFocusedWidget;if(!t||!("viewId"in t.viewContext)){await r.openEditor({resource:s.getNewEditorUri(),options:{pinned:!0}},o==="Window"?h:f);return}const l=t.viewModel;if(!l)return;const C=l.sessionId,A=t.getViewState();t.clear();const g={target:{sessionId:C},pinned:!0,viewState:A};await r.openEditor({resource:s.getNewEditorUri(),options:g},o==="Window"?h:f)}async function y(i){const o=i.get(b),e=i.get(I),n=i.get(W),r=e.activeEditor;let t;r instanceof s&&r.sessionId?(await e.closeEditor({editor:r,groupId:n.activeGroup.id}),t=await o.openView(c),t.loadSession(r.sessionId)):t=await o.openView(c),t.focus()}export{J as registerMoveActions};
