import{localize2 as d}from"../../../../../nls.js";import{Action2 as w,MenuId as p,registerAction2 as u}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as m}from"../../../../../platform/contextkey/common/contextkey.js";import"../../../../../platform/instantiation/common/instantiation.js";import{ActiveEditorContext as T}from"../../../../common/contextkeys.js";import{CHAT_CATEGORY as v,isChatViewTitleActionContext as E}from"./chatActions.js";import{CHAT_VIEW_ID as s,IChatWidgetService as V}from"../chat.js";import{ChatEditor as W}from"../chatEditor.js";import{ChatEditorInput as a}from"../chatEditorInput.js";import"../chatViewPane.js";import{CONTEXT_CHAT_ENABLED as l}from"../../common/chatContextKeys.js";import{IEditorGroupsService as b}from"../../../../services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as h,AUX_WINDOW_GROUP as f,IEditorService as I}from"../../../../services/editor/common/editorService.js";import{IViewsService as x}from"../../../../services/views/common/viewsService.js";var y=(e=>(e.Editor="Editor",e.Window="Window",e))(y||{});function Q(){u(class extends w{constructor(){super({id:"workbench.action.chat.openInEditor",title:d("chat.openInEditor.label","Open Chat in Editor"),category:v,precondition:l,f1:!0,menu:{id:p.ViewTitle,when:m.equals("view",s),order:0}})}async run(t,...e){const i=e[0];S(t,"Editor",E(i)?i.chatView:void 0)}}),u(class extends w{constructor(){super({id:"workbench.action.chat.openInNewWindow",title:d("chat.openInNewWindow.label","Open Chat in New Window"),category:v,precondition:l,f1:!0,menu:{id:p.ViewTitle,when:m.equals("view",s),order:0}})}async run(t,...e){const i=e[0];S(t,"Window",E(i)?i.chatView:void 0)}}),u(class extends w{constructor(){super({id:"workbench.action.chat.openInSidebar",title:d("interactiveSession.openInSidebar.label","Open Chat in Side Bar"),category:v,precondition:l,f1:!0,menu:[{id:p.EditorTitle,order:0,when:T.isEqualTo(a.EditorID)}]})}async run(t,...e){return N(t)}})}async function S(o,t,e){const i=o.get(V),r=o.get(I),n=e?.widget??i.lastFocusedWidget;if(!n||!("viewId"in n.viewContext)){await r.openEditor({resource:a.getNewEditorUri(),options:{pinned:!0}},t==="Window"?f:h);return}const c=n.viewModel;if(!c)return;const C=c.sessionId,g=n.getViewState();n.clear();const A={target:{sessionId:C},pinned:!0,viewState:g};await r.openEditor({resource:a.getNewEditorUri(),options:A},t==="Window"?f:h)}async function N(o){const t=o.get(x),e=o.get(I),i=o.get(b),r=e.activeEditorPane,n=r?.input;let c;r instanceof W&&n instanceof a&&n.sessionId?(await e.closeEditor({editor:r.input,groupId:i.activeGroup.id}),c=await t.openView(s),c.loadSession(n.sessionId,r.getViewState())):c=await t.openView(s),c.focus()}export{Q as registerMoveActions};
