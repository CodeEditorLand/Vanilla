import{localize2 as a}from"../../../../../nls.js";import{Action2 as d,MenuId as w,registerAction2 as p}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as m}from"../../../../../platform/contextkey/common/contextkey.js";import{ActiveEditorContext as T}from"../../../../common/contextkeys.js";import{IEditorGroupsService as V}from"../../../../services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as E,AUX_WINDOW_GROUP as h,IEditorService as f}from"../../../../services/editor/common/editorService.js";import{IViewsService as y}from"../../../../services/views/common/viewsService.js";import{CONTEXT_CHAT_ENABLED as u}from"../../common/chatContextKeys.js";import{CHAT_VIEW_ID as c,IChatWidgetService as W}from"../chat.js";import{ChatEditorInput as s}from"../chatEditorInput.js";import{CHAT_CATEGORY as v,isChatViewTitleActionContext as I}from"./chatActions.js";var b=(e=>(e.Editor="Editor",e.Window="Window",e))(b||{});function B(){p(class extends d{constructor(){super({id:"workbench.action.chat.openInEditor",title:a("chat.openInEditor.label","Open Chat in Editor"),category:v,precondition:u,f1:!0,menu:{id:w.ViewTitle,when:m.equals("view",c),order:0}})}async run(t,...e){const n=e[0];S(t,"Editor",I(n)?n.chatView:void 0)}}),p(class extends d{constructor(){super({id:"workbench.action.chat.openInNewWindow",title:a("chat.openInNewWindow.label","Open Chat in New Window"),category:v,precondition:u,f1:!0,menu:{id:w.ViewTitle,when:m.equals("view",c),order:0}})}async run(t,...e){const n=e[0];S(t,"Window",I(n)?n.chatView:void 0)}}),p(class extends d{constructor(){super({id:"workbench.action.chat.openInSidebar",title:a("interactiveSession.openInSidebar.label","Open Chat in Side Bar"),category:v,precondition:u,f1:!0,menu:[{id:w.EditorTitle,order:0,when:T.isEqualTo(s.EditorID)}]})}async run(t,...e){return x(t)}})}async function S(i,t,e){const n=i.get(W),r=i.get(f),o=e?.widget??n.lastFocusedWidget;if(!o||!("viewId"in o.viewContext)){await r.openEditor({resource:s.getNewEditorUri(),options:{pinned:!0}},t==="Window"?h:E);return}const l=o.viewModel;if(!l)return;const C=l.sessionId,A=o.getViewState();o.clear();const g={target:{sessionId:C},pinned:!0,viewState:A};await r.openEditor({resource:s.getNewEditorUri(),options:g},t==="Window"?h:E)}async function x(i){const t=i.get(y),e=i.get(f),n=i.get(V),r=e.activeEditor;let o;r instanceof s&&r.sessionId?(await e.closeEditor({editor:r,groupId:n.activeGroup.id}),o=await t.openView(c),o.loadSession(r.sessionId)):o=await t.openView(c),o.focus()}export{B as registerMoveActions};
