import{coalesce as U}from"../../../../../base/common/arrays.js";import{Codicon as S}from"../../../../../base/common/codicons.js";import{fromNowByDay as B}from"../../../../../base/common/date.js";import{KeyCode as h,KeyMod as a}from"../../../../../base/common/keyCodes.js";import{DisposableStore as K}from"../../../../../base/common/lifecycle.js";import{ThemeIcon as T}from"../../../../../base/common/themables.js";import"../../../../../editor/browser/editorBrowser.js";import{EditorAction2 as F}from"../../../../../editor/browser/editorExtensions.js";import{localize as C,localize2 as u}from"../../../../../nls.js";import{Action2 as m,MenuId as G,registerAction2 as l}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as I}from"../../../../../platform/contextkey/common/contextkey.js";import{IsLinuxContext as L,IsWindowsContext as X}from"../../../../../platform/contextkey/common/contextkeys.js";import{KeybindingWeight as f}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{IQuickInputService as $}from"../../../../../platform/quickinput/common/quickInput.js";import{clearChatEditor as z}from"./chatClear.js";import{CHAT_VIEW_ID as O,IChatWidgetService as R,showChatView as j}from"../chat.js";import"../chatEditor.js";import{ChatEditorInput as V}from"../chatEditorInput.js";import"../chatViewPane.js";import{CONTEXT_CHAT_ENABLED as E,CONTEXT_CHAT_INPUT_CURSOR_AT_TOP as Y,CONTEXT_IN_CHAT_INPUT as P,CONTEXT_IN_CHAT_SESSION as _,CONTEXT_IN_QUICK_CHAT as H}from"../../common/chatContextKeys.js";import{IChatService as x}from"../../common/chatService.js";import{isRequestVM as J}from"../../common/chatViewModel.js";import{IChatWidgetHistoryService as Z}from"../../common/chatWidgetHistoryService.js";import{IEditorGroupsService as ee}from"../../../../services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as te,IEditorService as M}from"../../../../services/editor/common/editorService.js";import{IViewsService as N}from"../../../../services/views/common/viewsService.js";function Be(i){return i instanceof Object&&"chatView"in i}const g=u("chat.category","Chat"),ie="workbench.action.chat.open";class re extends m{constructor(){super({id:ie,title:u("openChat","Open Chat"),icon:S.commentDiscussion,f1:!1,category:g,keybinding:{weight:f.WorkbenchContrib,primary:a.CtrlCmd|a.Alt|h.KeyI,mac:{primary:a.CtrlCmd|a.WinCtrl|h.KeyI}}})}async run(e,t){t=typeof t=="string"?{query:t}:t;const r=e.get(x),o=await j(e.get(N));if(o){if(t?.previousRequests?.length&&o.viewModel)for(const{request:A,response:d}of t.previousRequests)r.addCompleteRequest(o.viewModel.sessionId,A,void 0,0,{message:d});t?.query&&(t.isPartialQuery?o.setInput(t.query):o.acceptInput(t.query)),o.focusInput()}}}class oe extends m{constructor(){super({id:"workbench.action.chat.history",title:u("chat.history.label","Show Chats..."),menu:{id:G.ViewTitle,when:I.equals("view",O),group:"navigation",order:-1},category:g,icon:S.history,f1:!0,precondition:E})}async run(e){const t=e.get(x),r=e.get($),o=e.get(N),A=e.get(M),d=()=>{const k={iconClass:T.asClassName(S.file),tooltip:C("interactiveSession.history.editor","Open in Editor")},w={iconClass:T.asClassName(S.x),tooltip:C("interactiveSession.history.delete","Delete")},b={iconClass:T.asClassName(S.pencil),tooltip:C("chat.history.rename","Rename")},q=()=>{const n=t.getHistory();n.sort((p,v)=>(v.lastMessageDate??0)-(p.lastMessageDate??0));let c;const D=n.flatMap(p=>{const v=B(p.lastMessageDate,!0,!0),Q=v!==c?{type:"separator",label:v}:void 0;return c=v,[Q,{label:p.title,description:p.isActive?`(${C("currentChatLabel","current")})`:"",chat:p,buttons:p.isActive?[b]:[b,k,w]}]});return U(D)},y=new K,s=y.add(r.createQuickPick({useSeparators:!0}));s.placeholder=C("interactiveSession.history.pick","Switch to chat");const W=q();s.items=W,y.add(s.onDidTriggerItemButton(async n=>{if(n.button===k){const c={target:{sessionId:n.item.chat.sessionId},pinned:!0};A.openEditor({resource:V.getNewEditorUri(),options:c},te),s.hide()}else if(n.button===w)t.removeHistoryEntry(n.item.chat.sessionId),s.items=q();else if(n.button===b){const c=await r.input({title:C("newChatTitle","New chat title"),value:n.item.chat.title});c&&t.setChatSessionTitle(n.item.chat.sessionId,c),d()}})),y.add(s.onDidAccept(async()=>{try{const c=s.selectedItems[0].chat.sessionId;(await o.openView(O)).loadSession(c)}finally{s.hide()}})),y.add(s.onDidHide(()=>y.dispose())),s.show()};d()}}class ne extends m{constructor(){super({id:"workbench.action.openChat",title:u("interactiveSession.open","Open Editor"),f1:!0,category:g,precondition:E})}async run(e){await e.get(M).openEditor({resource:V.getNewEditorUri(),options:{pinned:!0}})}}function Xe(){l(re),l(oe),l(ne),l(class extends m{constructor(){super({id:"workbench.action.chat.clearInputHistory",title:u("interactiveSession.clearHistory.label","Clear Input History"),precondition:E,category:g,f1:!0})}async run(e,...t){e.get(Z).clearHistory()}}),l(class extends m{constructor(){super({id:"workbench.action.chat.clearHistory",title:u("chat.clear.label","Clear All Workspace Chats"),precondition:E,category:g,f1:!0})}async run(e,...t){const r=e.get(ee),o=e.get(N);e.get(x).clearAllHistoryEntries();const d=o.getViewWithId(O);d&&d.widget.clear(),r.groups.forEach(k=>{k.editors.forEach(w=>{w instanceof V&&z(e,w)})})}}),l(class extends F{constructor(){super({id:"chat.action.focus",title:u("actions.interactiveSession.focus","Focus Chat List"),precondition:I.and(P),category:g,keybinding:[{when:Y,primary:a.CtrlCmd|h.UpArrow,weight:f.EditorContrib},{when:I.or(X,L),primary:a.CtrlCmd|h.UpArrow,weight:f.EditorContrib},{when:I.and(_,H),primary:a.CtrlCmd|h.DownArrow,weight:f.WorkbenchContrib}]})}runEditorCommand(e,t){const r=t.getModel()?.uri;r&&e.get(R).getWidgetByInputUri(r)?.focusLastMessage()}}),l(class extends m{constructor(){super({id:"workbench.action.chat.focusInput",title:u("interactiveSession.focusInput.label","Focus Chat Input"),f1:!1,keybinding:[{primary:a.CtrlCmd|h.DownArrow,weight:f.WorkbenchContrib,when:I.and(_,P.negate(),H.negate())},{when:I.and(_,P.negate(),H),primary:a.CtrlCmd|h.UpArrow,weight:f.WorkbenchContrib}]})}run(e,...t){e.get(R).lastFocusedWidget?.focusInput()}})}function $e(i,e=!0){return J(i)?(e?`${i.username}: `:"")+i.messageText:(e?`${i.username}: `:"")+i.response.toString()}export{g as CHAT_CATEGORY,ie as CHAT_OPEN_ACTION_ID,Be as isChatViewTitleActionContext,Xe as registerChatActions,$e as stringifyItem};
