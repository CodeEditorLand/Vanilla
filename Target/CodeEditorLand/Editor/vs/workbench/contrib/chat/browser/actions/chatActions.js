import{coalesce as Q}from"../../../../../base/common/arrays.js";import{Codicon as w}from"../../../../../base/common/codicons.js";import{fromNowByDay as W}from"../../../../../base/common/date.js";import{KeyCode as y,KeyMod as p}from"../../../../../base/common/keyCodes.js";import{DisposableStore as B}from"../../../../../base/common/lifecycle.js";import{ThemeIcon as T}from"../../../../../base/common/themables.js";import"../../../../../editor/browser/editorBrowser.js";import{EditorAction2 as U}from"../../../../../editor/browser/editorExtensions.js";import{localize as h,localize2 as a}from"../../../../../nls.js";import{Action2 as C,MenuId as K,registerAction2 as l}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as A}from"../../../../../platform/contextkey/common/contextkey.js";import{IsLinuxContext as F,IsWindowsContext as G}from"../../../../../platform/contextkey/common/contextkeys.js";import{KeybindingWeight as k}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{IQuickInputService as L}from"../../../../../platform/quickinput/common/quickInput.js";import{clearChatEditor as X}from"./chatClear.js";import{CHAT_VIEW_ID as O,IChatWidgetService as q,showChatView as $}from"../chat.js";import"../chatEditor.js";import{ChatEditorInput as V}from"../chatEditorInput.js";import"../chatViewPane.js";import{CONTEXT_CHAT_ENABLED as E,CONTEXT_CHAT_INPUT_CURSOR_AT_TOP as z,CONTEXT_IN_CHAT_INPUT as N,CONTEXT_IN_CHAT_SESSION as j}from"../../common/chatContextKeys.js";import{IChatService as P}from"../../common/chatService.js";import{isRequestVM as Y}from"../../common/chatViewModel.js";import{IChatWidgetHistoryService as J}from"../../common/chatWidgetHistoryService.js";import{IEditorGroupsService as Z}from"../../../../services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as ee,IEditorService as D}from"../../../../services/editor/common/editorService.js";import{IViewsService as x}from"../../../../services/views/common/viewsService.js";function Be(i){return i instanceof Object&&"chatView"in i}const m=a("chat.category","Chat"),te="workbench.action.chat.open";class ie extends C{constructor(){super({id:te,title:a("openChat","Open Chat"),icon:w.commentDiscussion,f1:!1,category:m,keybinding:{weight:k.WorkbenchContrib,primary:p.CtrlCmd|p.Alt|y.KeyI,mac:{primary:p.CtrlCmd|p.WinCtrl|y.KeyI}}})}async run(e,t){t=typeof t=="string"?{query:t}:t;const r=e.get(P),o=await $(e.get(x));if(o){if(t?.previousRequests?.length&&o.viewModel)for(const{request:v,response:u}of t.previousRequests)r.addCompleteRequest(o.viewModel.sessionId,v,void 0,0,{message:u});t?.query&&(t.isPartialQuery?o.setInput(t.query):o.acceptInput(t.query)),o.focusInput()}}}class re extends C{constructor(){super({id:"workbench.action.chat.history",title:a("chat.history.label","Show Chats..."),menu:{id:K.ViewTitle,when:A.equals("view",O),group:"navigation",order:-1},category:m,icon:w.history,f1:!0,precondition:E})}async run(e){const t=e.get(P),r=e.get(L),o=e.get(x),v=e.get(D),u=()=>{const S={iconClass:T.asClassName(w.file),tooltip:h("interactiveSession.history.editor","Open in Editor")},I={iconClass:T.asClassName(w.x),tooltip:h("interactiveSession.history.delete","Delete")},b={iconClass:T.asClassName(w.pencil),tooltip:h("chat.history.rename","Rename")},H=()=>{const n=t.getHistory();n.sort((d,g)=>(g.lastMessageDate??0)-(d.lastMessageDate??0));let c;const _=n.flatMap(d=>{const g=W(d.lastMessageDate,!0,!0),M=g!==c?{type:"separator",label:g}:void 0;return c=g,[M,{label:d.title,description:d.isActive?`(${h("currentChatLabel","current")})`:"",chat:d,buttons:d.isActive?[b]:[b,S,I]}]});return Q(_)},f=new B,s=f.add(r.createQuickPick({useSeparators:!0}));s.placeholder=h("interactiveSession.history.pick","Switch to chat");const R=H();s.items=R,f.add(s.onDidTriggerItemButton(async n=>{if(n.button===S){const c={target:{sessionId:n.item.chat.sessionId},pinned:!0};v.openEditor({resource:V.getNewEditorUri(),options:c},ee),s.hide()}else if(n.button===I)t.removeHistoryEntry(n.item.chat.sessionId),s.items=H();else if(n.button===b){const c=await r.input({title:h("newChatTitle","New chat title"),value:n.item.chat.title});c&&t.setChatSessionTitle(n.item.chat.sessionId,c),u()}})),f.add(s.onDidAccept(async()=>{try{const c=s.selectedItems[0].chat.sessionId;(await o.openView(O)).loadSession(c)}finally{s.hide()}})),f.add(s.onDidHide(()=>f.dispose())),s.show()};u()}}class oe extends C{constructor(){super({id:"workbench.action.openChat",title:a("interactiveSession.open","Open Editor"),f1:!0,category:m,precondition:E})}async run(e){await e.get(D).openEditor({resource:V.getNewEditorUri(),options:{pinned:!0}})}}function Le(){l(ie),l(re),l(oe),l(class extends C{constructor(){super({id:"workbench.action.chat.clearInputHistory",title:a("interactiveSession.clearHistory.label","Clear Input History"),precondition:E,category:m,f1:!0})}async run(e,...t){e.get(J).clearHistory()}}),l(class extends C{constructor(){super({id:"workbench.action.chat.clearHistory",title:a("chat.clear.label","Clear All Workspace Chats"),precondition:E,category:m,f1:!0})}async run(e,...t){const r=e.get(Z),o=e.get(x);e.get(P).clearAllHistoryEntries();const u=o.getViewWithId(O);u&&u.widget.clear(),r.groups.forEach(S=>{S.editors.forEach(I=>{I instanceof V&&X(e,I)})})}}),l(class extends U{constructor(){super({id:"chat.action.focus",title:a("actions.interactiveSession.focus","Focus Chat List"),precondition:A.and(N),category:m,keybinding:[{when:z,primary:p.CtrlCmd|y.UpArrow,weight:k.EditorContrib},{when:A.or(G,F),primary:p.CtrlCmd|y.UpArrow,weight:k.EditorContrib}]})}runEditorCommand(e,t){const r=t.getModel()?.uri;r&&e.get(q).getWidgetByInputUri(r)?.focusLastMessage()}}),l(class extends C{constructor(){super({id:"workbench.action.chat.focusInput",title:a("interactiveSession.focusInput.label","Focus Chat Input"),f1:!1,keybinding:{primary:p.CtrlCmd|y.DownArrow,weight:k.WorkbenchContrib,when:A.and(j,N.negate())}})}run(e,...t){e.get(q).lastFocusedWidget?.focusInput()}})}function Xe(i,e=!0){return Y(i)?(e?`${i.username}: `:"")+i.messageText:(e?`${i.username}: `:"")+i.response.toString()}export{m as CHAT_CATEGORY,te as CHAT_OPEN_ACTION_ID,Be as isChatViewTitleActionContext,Le as registerChatActions,Xe as stringifyItem};
