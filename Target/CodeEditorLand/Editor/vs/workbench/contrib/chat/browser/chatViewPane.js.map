{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatViewPane.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IHoverService } from \"../../../../platform/hover/browser/hover.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../../../platform/instantiation/common/serviceCollection.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { editorBackground } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype IViewPaneOptions,\n\tViewPane,\n} from \"../../../browser/parts/views/viewPane.js\";\nimport { Memento } from \"../../../common/memento.js\";\nimport { SIDE_BAR_FOREGROUND } from \"../../../common/theme.js\";\nimport { IViewDescriptorService } from \"../../../common/views.js\";\nimport { ChatAgentLocation, IChatAgentService } from \"../common/chatAgents.js\";\nimport { ChatModelInitState, type IChatModel } from \"../common/chatModel.js\";\nimport { CHAT_PROVIDER_ID } from \"../common/chatParticipantContribTypes.js\";\nimport { IChatService } from \"../common/chatService.js\";\nimport type { IChatViewTitleActionContext } from \"./actions/chatActions.js\";\nimport { ChatWidget, type IChatViewState } from \"./chatWidget.js\";\n\ninterface IViewPaneState extends IChatViewState {\n\tsessionId?: string;\n}\n\nexport const CHAT_SIDEBAR_PANEL_ID = \"workbench.panel.chatSidebar\";\nexport class ChatViewPane extends ViewPane {\n\tprivate _widget!: ChatWidget;\n\tget widget(): ChatWidget {\n\t\treturn this._widget;\n\t}\n\n\tprivate readonly modelDisposables = this._register(new DisposableStore());\n\tprivate memento: Memento;\n\tprivate readonly viewState: IViewPaneState;\n\tprivate didProviderRegistrationFail = false;\n\tprivate didUnregisterProvider = false;\n\n\tconstructor(\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\n\t\t// View state for the ViewPane is currently global per-provider basically, but some other strictly per-model state will require a separate memento.\n\t\tthis.memento = new Memento('interactive-session-view-' + CHAT_PROVIDER_ID, this.storageService);\n\t\tthis.viewState = this.memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE) as IViewPaneState;\n\t\tthis._register(this.chatAgentService.onDidChangeAgents(() => {\n\t\t\tif (this.chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)) {\n\t\t\t\tif (!this._widget?.viewModel) {\n\t\t\t\t\tconst sessionId = this.getSessionId();\n\t\t\t\t\tconst model = sessionId ? this.chatService.getOrRestoreSession(sessionId) : undefined;\n\n\t\t\t\t\t// The widget may be hidden at this point, because welcome views were allowed. Use setVisible to\n\t\t\t\t\t// avoid doing a render while the widget is hidden. This is changing the condition in `shouldShowWelcome`\n\t\t\t\t\t// so it should fire onDidChangeViewWelcomeState.\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis._widget.setVisible(false);\n\t\t\t\t\t\tthis.updateModel(model);\n\t\t\t\t\t\tthis.didProviderRegistrationFail = false;\n\t\t\t\t\t\tthis.didUnregisterProvider = false;\n\t\t\t\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis.widget.setVisible(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this._widget?.viewModel?.initState === ChatModelInitState.Initialized) {\n\t\t\t\t// Model is initialized, and the default agent disappeared, so show welcome view\n\t\t\t\tthis.didUnregisterProvider = true;\n\t\t\t}\n\n\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t}));\n\t}\n\n\toverride getActionsContext(): IChatViewTitleActionContext {\n\t\treturn {\n\t\t\tchatView: this,\n\t\t};\n\t}\n\n\tprivate updateModel(model?: IChatModel | undefined): void {\n\t\tthis.modelDisposables.clear();\n\n\t\tmodel =\n\t\t\tmodel ??\n\t\t\t(this.chatService.transferredSessionData?.sessionId\n\t\t\t\t? this.chatService.getOrRestoreSession(\n\t\t\t\t\t\tthis.chatService.transferredSessionData.sessionId,\n\t\t\t\t\t)\n\t\t\t\t: this.chatService.startSession(\n\t\t\t\t\t\tChatAgentLocation.Panel,\n\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t));\n\t\tif (!model) {\n\t\t\tthrow new Error(\"Could not start chat session\");\n\t\t}\n\n\t\tthis._widget.setModel(model, { ...this.viewState });\n\t\tthis.viewState.sessionId = model.sessionId;\n\t}\n\n\toverride shouldShowWelcome(): boolean {\n\t\tif (\n\t\t\t!this.chatAgentService.getContributedDefaultAgent(\n\t\t\t\tChatAgentLocation.Panel,\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst noPersistedSessions = !this.chatService.hasSessions();\n\t\treturn (\n\t\t\tthis.didUnregisterProvider ||\n\t\t\t(!this._widget?.viewModel &&\n\t\t\t\t(noPersistedSessions || this.didProviderRegistrationFail))\n\t\t);\n\t}\n\n\tprivate getSessionId() {\n\t\tlet sessionId: string | undefined;\n\t\tif (this.chatService.transferredSessionData) {\n\t\t\tsessionId = this.chatService.transferredSessionData.sessionId;\n\t\t\tthis.viewState.inputValue =\n\t\t\t\tthis.chatService.transferredSessionData.inputValue;\n\t\t} else {\n\t\t\tsessionId = this.viewState.sessionId;\n\t\t}\n\t\treturn sessionId;\n\t}\n\n\tprotected override renderBody(parent: HTMLElement): void {\n\t\ttry {\n\t\t\tsuper.renderBody(parent);\n\n\t\t\tconst scopedInstantiationService = this._register(\n\t\t\t\tthis.instantiationService.createChild(\n\t\t\t\t\tnew ServiceCollection([\n\t\t\t\t\t\tIContextKeyService,\n\t\t\t\t\t\tthis.scopedContextKeyService,\n\t\t\t\t\t]),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst locationBasedColors = this.getLocationBasedColors();\n\t\t\tthis._widget = this._register(\n\t\t\t\tscopedInstantiationService.createInstance(\n\t\t\t\t\tChatWidget,\n\t\t\t\t\tChatAgentLocation.Panel,\n\t\t\t\t\t{ viewId: this.id },\n\t\t\t\t\t{ supportsFileReferences: true },\n\t\t\t\t\t{\n\t\t\t\t\t\tlistForeground: SIDE_BAR_FOREGROUND,\n\t\t\t\t\t\tlistBackground: locationBasedColors.background,\n\t\t\t\t\t\tinputEditorBackground: locationBasedColors.background,\n\t\t\t\t\t\tresultEditorBackground: editorBackground,\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis.onDidChangeBodyVisibility((visible) => {\n\t\t\t\t\tthis._widget.setVisible(visible);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis._register(this._widget.onDidClear(() => this.clear()));\n\t\t\tthis._widget.render(parent);\n\n\t\t\tconst sessionId = this.getSessionId();\n\t\t\t// Render the welcome view if this session gets disposed at any point,\n\t\t\t// including if the provider registration fails\n\t\t\tconst disposeListener = sessionId\n\t\t\t\t? this._register(\n\t\t\t\t\t\tthis.chatService.onDidDisposeSession((e) => {\n\t\t\t\t\t\t\tif (e.reason === \"initializationFailed\") {\n\t\t\t\t\t\t\t\tthis.didProviderRegistrationFail = true;\n\t\t\t\t\t\t\t\tdisposeListener?.dispose();\n\t\t\t\t\t\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t: undefined;\n\t\t\tconst model = sessionId\n\t\t\t\t? this.chatService.getOrRestoreSession(sessionId)\n\t\t\t\t: undefined;\n\n\t\t\tthis.updateModel(model);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tacceptInput(query?: string): void {\n\t\tthis._widget.acceptInput(query);\n\t}\n\n\tprivate clear(): void {\n\t\tif (this.widget.viewModel) {\n\t\t\tthis.chatService.clearSession(this.widget.viewModel.sessionId);\n\t\t}\n\n\t\t// Grab the widget's latest view state because it will be loaded back into the widget\n\t\tthis.updateViewState();\n\t\tthis.updateModel(undefined);\n\t}\n\n\tloadSession(sessionId: string): void {\n\t\tif (this.widget.viewModel) {\n\t\t\tthis.chatService.clearSession(this.widget.viewModel.sessionId);\n\t\t}\n\n\t\tconst newModel = this.chatService.getOrRestoreSession(sessionId);\n\t\tthis.updateModel(newModel);\n\t}\n\n\tfocusInput(): void {\n\t\tthis._widget.focusInput();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis._widget.focusInput();\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis._widget.layout(height, width);\n\t}\n\n\toverride saveState(): void {\n\t\tif (this._widget) {\n\t\t\t// Since input history is per-provider, this is handled by a separate service and not the memento here.\n\t\t\t// TODO multiple chat views will overwrite each other\n\t\t\tthis._widget.saveState();\n\n\t\t\tthis.updateViewState();\n\t\t\tthis.memento.saveMemento();\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate updateViewState(): void {\n\t\tconst widgetViewState = this._widget.getViewState();\n\t\tthis.viewState.inputValue = widgetViewState.inputValue;\n\t\tthis.viewState.inputState = widgetViewState.inputState;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
