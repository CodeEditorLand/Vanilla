var v=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var c=(s,r,e,t)=>{for(var i=t>1?void 0:t?h(r,e):r,a=s.length-1,o;a>=0;a--)(o=s[a])&&(i=(t?o(r,e,i):o(i))||i);return t&&i&&v(r,e,i),i},n=(s,r)=>(e,t)=>r(e,t,s);import"../../../../../vs/base/browser/dom.js";import"../../../../../vs/base/common/cancellation.js";import{IContextKeyService as p}from"../../../../../vs/platform/contextkey/common/contextkey.js";import"../../../../../vs/platform/editor/common/editor.js";import{IInstantiationService as l}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{ServiceCollection as S}from"../../../../../vs/platform/instantiation/common/serviceCollection.js";import{IStorageService as u,StorageScope as I,StorageTarget as g}from"../../../../../vs/platform/storage/common/storage.js";import{ITelemetryService as f}from"../../../../../vs/platform/telemetry/common/telemetry.js";import{editorBackground as m,editorForeground as w,inputBackground as C}from"../../../../../vs/platform/theme/common/colorRegistry.js";import{IThemeService as E}from"../../../../../vs/platform/theme/common/themeService.js";import{EditorPane as y}from"../../../../../vs/workbench/browser/parts/editor/editorPane.js";import"../../../../../vs/workbench/common/editor.js";import{Memento as x}from"../../../../../vs/workbench/common/memento.js";import{clearChatEditor as _}from"../../../../../vs/workbench/contrib/chat/browser/actions/chatClear.js";import{ChatEditorInput as V}from"../../../../../vs/workbench/contrib/chat/browser/chatEditorInput.js";import{ChatWidget as K}from"../../../../../vs/workbench/contrib/chat/browser/chatWidget.js";import{ChatAgentLocation as M}from"../../../../../vs/workbench/contrib/chat/common/chatAgents.js";import"../../../../../vs/workbench/contrib/chat/common/chatModel.js";import{CHAT_PROVIDER_ID as D}from"../../../../../vs/workbench/contrib/chat/common/chatParticipantContribTypes.js";import"../../../../../vs/workbench/services/editor/common/editorGroupsService.js";let d=class extends y{constructor(e,t,i,a,o,b){super(V.EditorID,e,t,i,o);this.instantiationService=a;this.storageService=o;this.contextKeyService=b}widget;_scopedContextKeyService;get scopedContextKeyService(){return this._scopedContextKeyService}_memento;_viewState;async clear(){if(this.input)return this.instantiationService.invokeFunction(_,this.input)}createEditor(e){this._scopedContextKeyService=this._register(this.contextKeyService.createScoped(e));const t=this._register(this.instantiationService.createChild(new S([p,this.scopedContextKeyService])));this.widget=this._register(t.createInstance(K,M.Panel,void 0,{supportsFileReferences:!0},{listForeground:w,listBackground:m,inputEditorBackground:C,resultEditorBackground:m})),this._register(this.widget.onDidClear(()=>this.clear())),this.widget.render(e),this.widget.setVisible(!0)}setEditorVisible(e){super.setEditorVisible(e),this.widget?.setVisible(e)}focus(){super.focus(),this.widget?.focusInput()}clearInput(){this.saveState(),super.clearInput()}async setInput(e,t,i,a){super.setInput(e,t,i,a);const o=await e.resolve();if(!o)throw new Error(`Failed to get model for chat editor. id: ${e.sessionId}`);if(!this.widget)throw new Error("ChatEditor lifecycle issue: no editor widget");this.updateModel(o.model,t?.viewState??e.options.viewState)}updateModel(e,t){this._memento=new x("interactive-session-editor-"+D,this.storageService),this._viewState=t??this._memento.getMemento(I.WORKSPACE,g.MACHINE),this.widget.setModel(e,{...this._viewState})}saveState(){if(this.widget?.saveState(),this._memento&&this._viewState){const e=this.widget.getViewState();this._viewState.inputValue=e.inputValue,this._memento.saveMemento()}}layout(e,t){this.widget&&this.widget.layout(e.height,e.width)}};d=c([n(1,f),n(2,E),n(3,l),n(4,u),n(5,p)],d);export{d as ChatEditor};
