{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/browser/chatQuick.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { Orientation, Sash } from '../../../../base/browser/ui/sash/sash.js';\nimport { disposableTimeout } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { ILayoutService } from '../../../../platform/layout/browser/layoutService.js';\nimport { IQuickInputService, IQuickWidget } from '../../../../platform/quickinput/common/quickInput.js';\nimport { editorBackground, inputBackground, quickInputBackground, quickInputForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IQuickChatOpenOptions, IQuickChatService, showChatView } from './chat.js';\nimport { ChatWidget } from './chatWidget.js';\nimport { ChatAgentLocation } from '../common/chatAgents.js';\nimport { ChatModel } from '../common/chatModel.js';\nimport { IParsedChatRequest } from '../common/chatParserTypes.js';\nimport { IChatProgress, IChatService } from '../common/chatService.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\n\nexport class QuickChatService extends Disposable implements IQuickChatService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate _input: IQuickWidget | undefined;\n\t// TODO@TylerLeonhardt: support multiple chat providers eventually\n\tprivate _currentChat: QuickChat | undefined;\n\tprivate _container: HTMLElement | undefined;\n\n\tconstructor(\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tget enabled(): boolean {\n\t\treturn !!this.chatService.isEnabled(ChatAgentLocation.Panel);\n\t}\n\n\tget focused(): boolean {\n\t\tconst widget = this._input?.widget as HTMLElement | undefined;\n\t\tif (!widget) {\n\t\t\treturn false;\n\t\t}\n\t\treturn dom.isAncestorOfActiveElement(widget);\n\t}\n\n\ttoggle(options?: IQuickChatOpenOptions): void {\n\t\t// If the input is already shown, hide it. This provides a toggle behavior of the quick\n\t\t// pick. This should not happen when there is a query.\n\t\tif (this.focused && !options?.query) {\n\t\t\tthis.close();\n\t\t} else {\n\t\t\tthis.open(options);\n\t\t\t// If this is a partial query, the value should be cleared when closed as otherwise it\n\t\t\t// would remain for the next time the quick chat is opened in any context.\n\t\t\tif (options?.isPartialQuery) {\n\t\t\t\tconst disposable = this._store.add(Event.once(this.onDidClose)(() => {\n\t\t\t\t\tthis._currentChat?.clearValue();\n\t\t\t\t\tthis._store.delete(disposable);\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\topen(options?: IQuickChatOpenOptions): void {\n\t\tif (this._input) {\n\t\t\tif (this._currentChat && options?.query) {\n\t\t\t\tthis._currentChat.focus();\n\t\t\t\tthis._currentChat.setValue(options.query, options.selection);\n\t\t\t\tif (!options.isPartialQuery) {\n\t\t\t\t\tthis._currentChat.acceptInput();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.focus();\n\t\t}\n\n\t\tconst disposableStore = new DisposableStore();\n\n\t\tthis._input = this.quickInputService.createQuickWidget();\n\t\tthis._input.contextKey = 'chatInputVisible';\n\t\tthis._input.ignoreFocusOut = true;\n\t\tdisposableStore.add(this._input);\n\n\t\tthis._container ??= dom.$('.interactive-session');\n\t\tthis._input.widget = this._container;\n\n\t\tthis._input.show();\n\t\tif (!this._currentChat) {\n\t\t\tthis._currentChat = this.instantiationService.createInstance(QuickChat);\n\n\t\t\t// show needs to come after the quickpick is shown\n\t\t\tthis._currentChat.render(this._container);\n\t\t} else {\n\t\t\tthis._currentChat.show();\n\t\t}\n\n\t\tdisposableStore.add(this._input.onDidHide(() => {\n\t\t\tdisposableStore.dispose();\n\t\t\tthis._currentChat!.hide();\n\t\t\tthis._input = undefined;\n\t\t\tthis._onDidClose.fire();\n\t\t}));\n\n\t\tthis._currentChat.focus();\n\n\t\tif (options?.query) {\n\t\t\tthis._currentChat.setValue(options.query, options.selection);\n\t\t\tif (!options.isPartialQuery) {\n\t\t\t\tthis._currentChat.acceptInput();\n\t\t\t}\n\t\t}\n\t}\n\tfocus(): void {\n\t\tthis._currentChat?.focus();\n\t}\n\tclose(): void {\n\t\tthis._input?.dispose();\n\t\tthis._input = undefined;\n\t}\n\tasync openInChatView(): Promise<void> {\n\t\tawait this._currentChat?.openChatView();\n\t\tthis.close();\n\t}\n}\n\nclass QuickChat extends Disposable {\n\t// TODO@TylerLeonhardt: be responsive to window size\n\tstatic DEFAULT_MIN_HEIGHT = 200;\n\tprivate static readonly DEFAULT_HEIGHT_OFFSET = 100;\n\n\tprivate widget!: ChatWidget;\n\tprivate sash!: Sash;\n\tprivate model: ChatModel | undefined;\n\tprivate _currentQuery: string | undefined;\n\tprivate readonly maintainScrollTimer: MutableDisposable<IDisposable> = this._register(new MutableDisposable<IDisposable>());\n\tprivate _deferUpdatingDynamicLayout: boolean = false;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t) {\n\t\tsuper();\n\t}\n\n\tclear() {\n\t\tthis.model?.dispose();\n\t\tthis.model = undefined;\n\t\tthis.updateModel();\n\t\tthis.widget.inputEditor.setValue('');\n\t}\n\n\tfocus(selection?: Selection): void {\n\t\tif (this.widget) {\n\t\t\tthis.widget.focusInput();\n\t\t\tconst value = this.widget.inputEditor.getValue();\n\t\t\tif (value) {\n\t\t\t\tthis.widget.inputEditor.setSelection(selection ?? {\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: 1,\n\t\t\t\t\tendColumn: value.length + 1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thide(): void {\n\t\tthis.widget.setVisible(false);\n\t\t// Maintain scroll position for a short time so that if the user re-shows the chat\n\t\t// the same scroll position will be used.\n\t\tthis.maintainScrollTimer.value = disposableTimeout(() => {\n\t\t\t// At this point, clear this mutable disposable which will be our signal that\n\t\t\t// the timer has expired and we should stop maintaining scroll position\n\t\t\tthis.maintainScrollTimer.clear();\n\t\t}, 30 * 1000); // 30 seconds\n\t}\n\n\tshow(): void {\n\t\tthis.widget.setVisible(true);\n\t\t// If the mutable disposable is set, then we are keeping the existing scroll position\n\t\t// so we should not update the layout.\n\t\tif (this._deferUpdatingDynamicLayout) {\n\t\t\tthis._deferUpdatingDynamicLayout = false;\n\t\t\tthis.widget.updateDynamicChatTreeItemLayout(2, this.maxHeight);\n\t\t}\n\t\tif (!this.maintainScrollTimer.value) {\n\t\t\tthis.widget.layoutDynamicChatTreeItemMode();\n\t\t}\n\t}\n\n\trender(parent: HTMLElement): void {\n\t\tif (this.widget) {\n\t\t\t// NOTE: if this changes, we need to make sure disposables in this function are tracked differently.\n\t\t\tthrow new Error('Cannot render quick chat twice');\n\t\t}\n\t\tconst scopedInstantiationService = this._register(this.instantiationService.createChild(\n\t\t\tnew ServiceCollection([\n\t\t\t\tIContextKeyService,\n\t\t\t\tthis._register(this.contextKeyService.createScoped(parent))\n\t\t\t])\n\t\t));\n\t\tthis.widget = this._register(\n\t\t\tscopedInstantiationService.createInstance(\n\t\t\t\tChatWidget,\n\t\t\t\tChatAgentLocation.Panel,\n\t\t\t\t{ isQuickChat: true },\n\t\t\t\t{ renderInputOnTop: true, renderStyle: 'compact', menus: { inputSideToolbar: MenuId.ChatInputSide } },\n\t\t\t\t{\n\t\t\t\t\tlistForeground: quickInputForeground,\n\t\t\t\t\tlistBackground: quickInputBackground,\n\t\t\t\t\tinputEditorBackground: inputBackground,\n\t\t\t\t\tresultEditorBackground: editorBackground\n\t\t\t\t}));\n\t\tthis.widget.render(parent);\n\t\tthis.widget.setVisible(true);\n\t\tthis.widget.setDynamicChatTreeItemLayout(2, this.maxHeight);\n\t\tthis.updateModel();\n\t\tthis.sash = this._register(new Sash(parent, { getHorizontalSashTop: () => parent.offsetHeight }, { orientation: Orientation.HORIZONTAL }));\n\t\tthis.registerListeners(parent);\n\t}\n\n\tprivate get maxHeight(): number {\n\t\treturn this.layoutService.mainContainerDimension.height - QuickChat.DEFAULT_HEIGHT_OFFSET;\n\t}\n\n\tprivate registerListeners(parent: HTMLElement): void {\n\t\tthis._register(this.layoutService.onDidLayoutMainContainer(() => {\n\t\t\tif (this.widget.visible) {\n\t\t\t\tthis.widget.updateDynamicChatTreeItemLayout(2, this.maxHeight);\n\t\t\t} else {\n\t\t\t\t// If the chat is not visible, then we should defer updating the layout\n\t\t\t\t// because it relies on offsetHeight which only works correctly\n\t\t\t\t// when the chat is visible.\n\t\t\t\tthis._deferUpdatingDynamicLayout = true;\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.widget.inputEditor.onDidChangeModelContent((e) => {\n\t\t\tthis._currentQuery = this.widget.inputEditor.getValue();\n\t\t}));\n\t\tthis._register(this.widget.onDidClear(() => this.clear()));\n\t\tthis._register(this.widget.onDidChangeHeight((e) => this.sash.layout()));\n\t\tconst width = parent.offsetWidth;\n\t\tthis._register(this.sash.onDidStart(() => {\n\t\t\tthis.widget.isDynamicChatTreeItemLayoutEnabled = false;\n\t\t}));\n\t\tthis._register(this.sash.onDidChange((e) => {\n\t\t\tif (e.currentY < QuickChat.DEFAULT_MIN_HEIGHT || e.currentY > this.maxHeight) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.widget.layout(e.currentY, width);\n\t\t\tthis.sash.layout();\n\t\t}));\n\t\tthis._register(this.sash.onDidReset(() => {\n\t\t\tthis.widget.isDynamicChatTreeItemLayoutEnabled = true;\n\t\t\tthis.widget.layoutDynamicChatTreeItemMode();\n\t\t}));\n\t}\n\n\tasync acceptInput() {\n\t\treturn this.widget.acceptInput();\n\t}\n\n\tasync openChatView(): Promise<void> {\n\t\tconst widget = await showChatView(this.viewsService);\n\t\tif (!widget?.viewModel || !this.model) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const request of this.model.getRequests()) {\n\t\t\tif (request.response?.response.value || request.response?.result) {\n\n\n\t\t\t\tconst message: IChatProgress[] = [];\n\t\t\t\tfor (const item of request.response.response.value) {\n\t\t\t\t\tif (item.kind === 'textEditGroup') {\n\t\t\t\t\t\tfor (const group of item.edits) {\n\t\t\t\t\t\t\tmessage.push({\n\t\t\t\t\t\t\t\tkind: 'textEdit',\n\t\t\t\t\t\t\t\tedits: group,\n\t\t\t\t\t\t\t\turi: item.uri\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.chatService.addCompleteRequest(widget.viewModel.sessionId,\n\t\t\t\t\trequest.message as IParsedChatRequest,\n\t\t\t\t\trequest.variableData,\n\t\t\t\t\trequest.attempt,\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tresult: request.response.result,\n\t\t\t\t\t\tfollowups: request.response.followups\n\t\t\t\t\t});\n\t\t\t} else if (request.message) {\n\n\t\t\t}\n\t\t}\n\n\t\tconst value = this.widget.inputEditor.getValue();\n\t\tif (value) {\n\t\t\twidget.inputEditor.setValue(value);\n\t\t}\n\t\twidget.focusInput();\n\t}\n\n\tsetValue(value: string, selection?: Selection): void {\n\t\tthis.widget.inputEditor.setValue(value);\n\t\tthis.focus(selection);\n\t}\n\n\tclearValue(): void {\n\t\tthis.widget.inputEditor.setValue('');\n\t}\n\n\tprivate updateModel(): void {\n\t\tthis.model ??= this.chatService.startSession(ChatAgentLocation.Panel, CancellationToken.None);\n\t\tif (!this.model) {\n\t\t\tthrow new Error('Could not start chat session');\n\t\t}\n\n\t\tthis.widget.setModel(this.model, { inputValue: this._currentQuery });\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
