var y=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var h=(d,t,e,o)=>{for(var r=o>1?void 0:o?R(t,e):t,a=d.length-1,s;a>=0;a--)(s=d[a])&&(r=(o?s(t,e,r):s(r))||r);return o&&r&&y(t,e,r),r},c=(d,t)=>(e,o)=>t(e,o,d);import*as D from"../../../../../base/browser/dom.js";import{CancellationTokenSource as x}from"../../../../../base/common/cancellation.js";import{Emitter as j,Event as E}from"../../../../../base/common/event.js";import{Disposable as g,RefCountedDisposable as k,toDisposable as v}from"../../../../../base/common/lifecycle.js";import{Schemas as P}from"../../../../../base/common/network.js";import{isEqual as _}from"../../../../../base/common/resources.js";import{assertType as B}from"../../../../../base/common/types.js";import{URI as w}from"../../../../../base/common/uri.js";import{generateUuid as T}from"../../../../../base/common/uuid.js";import{TextEdit as H}from"../../../../../editor/common/languages.js";import{createTextBufferFactoryFromSnapshot as O}from"../../../../../editor/common/model/textModel.js";import{IModelService as G}from"../../../../../editor/common/services/model.js";import{DefaultModelSHA1Computer as L}from"../../../../../editor/common/services/modelService.js";import{ITextModelService as q}from"../../../../../editor/common/services/resolverService.js";import{localize as M}from"../../../../../nls.js";import{MenuId as N}from"../../../../../platform/actions/common/actions.js";import{InstantiationType as A,registerSingleton as U}from"../../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as V,createDecorator as F}from"../../../../../platform/instantiation/common/instantiation.js";import{IChatService as $}from"../../common/chatService.js";import{isResponseVM as z}from"../../common/chatViewModel.js";import{CodeCompareBlockPart as J}from"../codeBlockPart.js";import{ResourcePool as K}from"./chatCollections.js";const S=D.$,b=F("ICodeCompareModelService");let f=class extends g{constructor(e,o,r,a,s,I){super();this.codeCompareModelService=I;const n=o.element;if(B(z(n)),r.renderTextEditsAsSummary?.(e.uri))n.response.value.every(i=>i.kind==="textEditGroup")?this.domNode=S(".interactive-edits-summary",void 0,n.isComplete?n.isCanceled?M("edits0","Making changes was aborted."):M("editsSummary","Made changes."):""):this.domNode=S("div");else{const i=new x;let l=!1;this._register(v(()=>{l=!0,i.dispose(!0)})),this.comparePart=this._register(a.get()),this._register(this.comparePart.object.onDidChangeContentHeight(()=>{this._onDidChangeHeight.fire()}));const C={element:n,edit:e,diffData:(async()=>{const p=await this.codeCompareModelService.createModel(n,e);if(l){p.dispose();return}return this._register(p),{modified:p.object.modified.textEditorModel,original:p.object.original.textEditorModel,originalSha1:p.object.originalSha1}})()};this.comparePart.object.render(C,s,i.token),this.domNode=this.comparePart.object.element}}domNode;comparePart;_onDidChangeHeight=this._register(new j);onDidChangeHeight=this._onDidChangeHeight.event;layout(e){this.comparePart?.object.layout(e)}hasSameContent(e){return e.kind==="textEditGroup"}addDisposable(e){this._register(e)}};f=h([c(5,b)],f);let u=class extends g{_pool;inUse(){return this._pool.inUse}constructor(t,e,o,r){super(),this._pool=this._register(new K(()=>r.createInstance(J,t,N.ChatCompareBlock,e,o)))}get(){const t=this._pool.get();let e=!1;return{object:t,isStale:()=>e,dispose:()=>{t.reset(),e=!0,this._pool.release(t)}}}};u=h([c(3,V)],u);let m=class{constructor(t,e,o){this.textModelService=t;this.modelService=e;this.chatService=o}async createModel(t,e){const o=await this.textModelService.createModelReference(e.uri),r=await this.textModelService.createModelReference(this.modelService.createModel(O(o.object.textEditorModel.createSnapshot()),{languageId:o.object.textEditorModel.getLanguageId(),onDidChange:E.None},w.from({scheme:P.vscodeChatCodeBlock,path:e.uri.path,query:T()}),!1).uri),a=new k(v(()=>{o.dispose(),r.dispose()}));let s="";if(e.state)s=e.state.sha1;else{const i=new L;i.canComputeSHA1(o.object.textEditorModel)&&(s=i.computeSHA1(o.object.textEditorModel),e.state={sha1:s,applied:0})}const I=this.chatService.getSession(t.sessionId),n=[];for(const i of I.getRequests())if(i.response){for(const l of i.response.response.value)if(!(l.kind!=="textEditGroup"||l.state?.applied||!_(l.uri,e.uri)))for(const C of l.edits){const p=C.map(H.asEditOperation);n.push(p)}if(i.response===t.model)break}for(const i of n)r.object.textEditorModel.pushEditOperations(null,i,()=>null);return a.acquire(),setTimeout(()=>a.release(),5e3),{object:{originalSha1:s,original:o.object,modified:r.object},dispose(){a.release()}}}};m=h([c(0,q),c(1,G),c(2,$)],m),U(b,m,A.Delayed);export{f as ChatTextEditContentPart,u as DiffEditorPool};
