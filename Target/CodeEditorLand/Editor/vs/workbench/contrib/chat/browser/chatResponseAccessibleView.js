import{renderMarkdownAsPlaintext as d}from"../../../../base/browser/markdownRenderer.js";import{MarkdownString as p}from"../../../../base/common/htmlContent.js";import{Disposable as l}from"../../../../base/common/lifecycle.js";import{AccessibleViewProviderId as m,AccessibleViewType as n}from"../../../../platform/accessibility/browser/accessibleView.js";import{AccessibilityVerbositySettingId as u}from"../../accessibility/browser/accessibilityConfiguration.js";import{CONTEXT_IN_CHAT_SESSION as f}from"../common/chatContextKeys.js";import{ChatWelcomeMessageModel as g}from"../common/chatModel.js";import{isResponseVM as h}from"../common/chatViewModel.js";import{IChatWidgetService as I}from"./chat.js";class T{priority=100;name="panelChat";type=n.View;when=f;getProvider(r){const t=r.get(I).lastFocusedWidget;if(!t)return;const i=t.hasInputFocus();i&&t.focusLastMessage();const s=t,o=s.getFocus();if(o)return new w(s,o,i)}}class w extends l{constructor(e,t,i){super();this._widget=e;this._chatInputFocused=i;this._focusedItem=t}_focusedItem;id=m.Chat;verbositySettingKey=u.Chat;options={type:n.View};provideContent(){return this._getContent(this._focusedItem)}_getContent(e){const t=e instanceof g;let i=h(e)?e.response.toString():"";if(t){const s=[];for(const o of e.content)Array.isArray(o)?s.push(...o.map(a=>a.message)):s.push(o.value);i=s.join(`
`)}return!i&&"errorDetails"in e&&e.errorDetails&&(i=e.errorDetails.message),d(new p(i),!0)}onClose(){this._widget.reveal(this._focusedItem),this._chatInputFocused?this._widget.focusInput():this._widget.focus(this._focusedItem)}provideNextContent(){const e=this._widget.getSibling(this._focusedItem,"next");if(e)return this._focusedItem=e,this._getContent(e)}providePreviousContent(){const e=this._widget.getSibling(this._focusedItem,"previous");if(e)return this._focusedItem=e,this._getContent(e)}}export{T as ChatResponseAccessibleView};
