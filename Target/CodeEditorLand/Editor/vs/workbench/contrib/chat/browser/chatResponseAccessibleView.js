import{renderMarkdownAsPlaintext as a}from"../../../../../vs/base/browser/markdownRenderer.js";import{MarkdownString as p}from"../../../../../vs/base/common/htmlContent.js";import{Disposable as l}from"../../../../../vs/base/common/lifecycle.js";import{AccessibleViewProviderId as u,AccessibleViewType as n}from"../../../../../vs/platform/accessibility/browser/accessibleView.js";import"../../../../../vs/platform/accessibility/browser/accessibleViewRegistry.js";import"../../../../../vs/platform/instantiation/common/instantiation.js";import{AccessibilityVerbositySettingId as m}from"../../../../../vs/workbench/contrib/accessibility/browser/accessibilityConfiguration.js";import{IChatWidgetService as g}from"../../../../../vs/workbench/contrib/chat/browser/chat.js";import{CONTEXT_IN_CHAT_SESSION as f}from"../../../../../vs/workbench/contrib/chat/common/chatContextKeys.js";import{ChatWelcomeMessageModel as h}from"../../../../../vs/workbench/contrib/chat/common/chatModel.js";import{isResponseVM as I}from"../../../../../vs/workbench/contrib/chat/common/chatViewModel.js";class R{priority=100;name="panelChat";type=n.View;when=f;getProvider(r){const t=r.get(g).lastFocusedWidget;if(!t)return;const s=t.hasInputFocus();s&&t.focusLastMessage();const i=t,o=i.getFocus();if(o)return new C(i,o,s)}}class C extends l{constructor(e,t,s){super();this._widget=e;this._chatInputFocused=s;this._focusedItem=t}_focusedItem;id=u.Chat;verbositySettingKey=m.Chat;options={type:n.View};provideContent(){return this._getContent(this._focusedItem)}_getContent(e){const t=e instanceof h;let s=I(e)?e.response.toString():"";if(t){const i=[];for(const o of e.content)Array.isArray(o)?i.push(...o.map(d=>d.message)):i.push(o.value);s=i.join(`
`)}return!s&&"errorDetails"in e&&e.errorDetails&&(s=e.errorDetails.message),a(new p(s),!0)}onClose(){this._widget.reveal(this._focusedItem),this._chatInputFocused?this._widget.focusInput():this._widget.focus(this._focusedItem)}provideNextContent(){const e=this._widget.getSibling(this._focusedItem,"next");if(e)return this._focusedItem=e,this._getContent(e)}providePreviousContent(){const e=this._widget.getSibling(this._focusedItem,"previous");if(e)return this._focusedItem=e,this._getContent(e)}}export{R as ChatResponseAccessibleView};
