var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=(m,n,e,t)=>{for(var o=t>1?void 0:t?p(n,e):n,r=m.length-1,s;r>=0;r--)(s=m[r])&&(o=(t?s(n,e,o):s(o))||o);return t&&o&&c(n,e,o),o},l=(m,n)=>(e,t)=>n(e,t,m);import*as h from"../../../../../base/browser/dom.js";import{Button as C}from"../../../../../base/browser/ui/button/button.js";import{Disposable as b}from"../../../../../base/common/lifecycle.js";import{localize as f}from"../../../../../nls.js";import{ICommandService as u}from"../../../../../platform/commands/common/commands.js";import{defaultButtonStyles as I}from"../../../../../platform/theme/browser/defaultStyles.js";import{isResponseVM as S}from"../../common/chatViewModel.js";const v=h.$;let a=class extends b{constructor(e,t,o){super();this.commandService=o;this.domNode=v(".chat-command-button");const r=!S(t.element)||!t.element.isStale,s=r?e.command.tooltip:f("commandButtonDisabled","Button not available in restored chat"),i=this._register(new C(this.domNode,{...I,supportIcons:!0,title:s}));i.label=e.command.title,i.enabled=r,this._register(i.onDidClick(()=>this.commandService.executeCommand(e.command.id,...e.command.arguments??[])))}domNode;hasSameContent(e){return e.kind==="command"}};a=d([l(2,u)],a);export{a as ChatCommandButtonContentPart};
