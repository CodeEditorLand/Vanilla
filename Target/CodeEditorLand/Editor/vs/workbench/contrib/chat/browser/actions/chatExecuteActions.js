import{Codicon as I}from"../../../../../base/common/codicons.js";import{KeyCode as a,KeyMod as d}from"../../../../../base/common/keyCodes.js";import"../../../../../editor/browser/editorExtensions.js";import{localize2 as s}from"../../../../../nls.js";import{Action2 as C,MenuId as c,MenuRegistry as T,registerAction2 as p}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as u}from"../../../../../platform/contextkey/common/contextkey.js";import{KeybindingWeight as h}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{IChatAgentService as f}from"../../common/chatAgents.js";import{CONTEXT_CHAT_INPUT_HAS_AGENT as b,CONTEXT_CHAT_INPUT_HAS_TEXT as A,CONTEXT_CHAT_LOCATION as _,CONTEXT_CHAT_REQUEST_IN_PROGRESS as g,CONTEXT_LANGUAGE_MODELS_ARE_USER_SELECTABLE as v,CONTEXT_IN_CHAT_INPUT as E,CONTEXT_PARTICIPANT_SUPPORTS_MODEL_PICKER as N}from"../../common/chatContextKeys.js";import{chatAgentLeader as k,extractAgentAndCommand as O}from"../../common/chatParserTypes.js";import{IChatService as P}from"../../common/chatService.js";import{IChatWidgetService as l}from"../chat.js";import{CHAT_CATEGORY as x}from"./chatActions.js";class S extends C{static ID="workbench.action.chat.submit";constructor(){super({id:S.ID,title:s("interactive.submit.label","Send"),f1:!1,category:x,icon:I.send,precondition:u.and(A,g.negate()),keybinding:{when:E,primary:a.Enter,weight:h.EditorContrib},menu:[{id:c.ChatExecuteSecondary,group:"group_1"},{id:c.ChatExecute,order:4,when:g.negate(),group:"navigation"}]})}run(t,...o){const n=o[0],i=t.get(l);(n?.widget??i.lastFocusedWidget)?.acceptInput(n?.inputValue)}}const M="workbench.action.chat.pickModel";T.appendMenuItem(c.ChatExecute,{command:{id:M,title:s("chat.pickModel.label","Pick Model")},order:3,group:"navigation",when:u.and(v,N,u.equals(_.key,"panel"))});class y extends C{static ID="workbench.action.chat.submitSecondaryAgent";constructor(){super({id:y.ID,title:s({key:"actions.chat.submitSecondaryAgent",comment:["Send input from the chat input box to the secondary agent"]},"Submit to Secondary Agent"),precondition:u.and(A,b.negate(),g.negate()),keybinding:{when:E,primary:d.CtrlCmd|a.Enter,weight:h.EditorContrib},menu:{id:c.ChatExecuteSecondary,group:"group_1"}})}run(t,...o){const n=o[0],e=t.get(f).getSecondaryAgent();if(!e)return;const m=t.get(l),r=n?.widget??m.lastFocusedWidget;r&&(O(r.parsedInput).agentPart?r.acceptInput():(r.lastSelectedAgent=e,r.acceptInputWithPrefix(`${k}${e.name}`)))}}class R extends C{constructor(){super({id:"workbench.action.chat.sendToNewChat",title:s("chat.newChat.label","Send to New Chat"),precondition:u.and(g.negate(),A),category:x,f1:!1,menu:{id:c.ChatExecuteSecondary,group:"group_2"},keybinding:{weight:h.WorkbenchContrib,primary:d.CtrlCmd|d.Shift|a.Enter,when:E}})}async run(t,...o){const n=o[0],i=t.get(l),e=n?.widget??i.lastFocusedWidget;e&&(e.clear(),e.acceptInput(n?.inputValue))}}class w extends C{static ID="workbench.action.chat.cancel";constructor(){super({id:w.ID,title:s("interactive.cancel.label","Cancel"),f1:!1,category:x,icon:I.stopCircle,menu:{id:c.ChatExecute,when:g,order:2,group:"navigation"},keybinding:{weight:h.WorkbenchContrib,primary:d.CtrlCmd|a.Escape,win:{primary:d.Alt|a.Backspace}}})}run(t,...o){const n=o[0],i=t.get(l),e=n?.widget??i.lastFocusedWidget;if(!e)return;const m=t.get(P);e.viewModel&&m.cancelCurrentRequestForSession(e.viewModel.sessionId)}}function j(){p(S),p(w),p(R),p(y)}export{w as CancelAction,M as ChatModelPickerActionId,y as ChatSubmitSecondaryAgentAction,S as SubmitAction,j as registerChatExecuteActions};
