{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatAgents.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLast } from '../../../../base/common/arraysFind.js';\nimport { timeout } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { revive } from '../../../../base/common/marshalling.js';\nimport { IObservable, observableValue } from '../../../../base/common/observable.js';\nimport { equalsIgnoreCase } from '../../../../base/common/strings.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Command, ProviderResult } from '../../../../editor/common/languages.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { asJson, IRequestService } from '../../../../platform/request/common/request.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { CONTEXT_CHAT_ENABLED, CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED } from './chatContextKeys.js';\nimport { IChatProgressResponseContent, IChatRequestVariableData, ISerializableChatAgentData } from './chatModel.js';\nimport { IRawChatCommandContribution, RawChatParticipantLocation } from './chatParticipantContribTypes.js';\nimport { IChatFollowup, IChatLocationData, IChatProgress, IChatResponseErrorDetails, IChatTaskDto } from './chatService.js';\n\n//#region agent service, commands etc\n\nexport interface IChatAgentHistoryEntry {\n\trequest: IChatAgentRequest;\n\tresponse: ReadonlyArray<IChatProgressResponseContent | IChatTaskDto>;\n\tresult: IChatAgentResult;\n}\n\nexport enum ChatAgentLocation {\n\tPanel = 'panel',\n\tTerminal = 'terminal',\n\tNotebook = 'notebook',\n\tEditor = 'editor'\n}\n\nexport namespace ChatAgentLocation {\n\texport function fromRaw(value: RawChatParticipantLocation | string): ChatAgentLocation {\n\t\tswitch (value) {\n\t\t\tcase 'panel': return ChatAgentLocation.Panel;\n\t\t\tcase 'terminal': return ChatAgentLocation.Terminal;\n\t\t\tcase 'notebook': return ChatAgentLocation.Notebook;\n\t\t\tcase 'editor': return ChatAgentLocation.Editor;\n\t\t}\n\t\treturn ChatAgentLocation.Panel;\n\t}\n}\n\nexport interface IChatAgentData {\n\tid: string;\n\tname: string;\n\tfullName?: string;\n\tdescription?: string;\n\twhen?: string;\n\textensionId: ExtensionIdentifier;\n\textensionPublisherId: string;\n\t/** This is the extension publisher id, or, in the case of a dynamically registered participant (remote agent), whatever publisher name we have for it */\n\tpublisherDisplayName?: string;\n\textensionDisplayName: string;\n\t/** The agent invoked when no agent is specified */\n\tisDefault?: boolean;\n\t/** This agent is not contributed in package.json, but is registered dynamically */\n\tisDynamic?: boolean;\n\tmetadata: IChatAgentMetadata;\n\tslashCommands: IChatAgentCommand[];\n\tlocations: ChatAgentLocation[];\n\tdisambiguation: { category: string; description: string; examples: string[] }[];\n\tsupportsToolReferences?: boolean;\n}\n\nexport interface IChatAgentImplementation {\n\tinvoke(request: IChatAgentRequest, progress: (part: IChatProgress) => void, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatAgentResult>;\n\tprovideFollowups?(request: IChatAgentRequest, result: IChatAgentResult, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatFollowup[]>;\n\tprovideWelcomeMessage?(location: ChatAgentLocation, token: CancellationToken): ProviderResult<(string | IMarkdownString)[] | undefined>;\n\tprovideChatTitle?: (history: IChatAgentHistoryEntry[], token: CancellationToken) => Promise<string | undefined>;\n\tprovideSampleQuestions?(location: ChatAgentLocation, token: CancellationToken): ProviderResult<IChatFollowup[] | undefined>;\n}\n\nexport interface IChatParticipantDetectionResult {\n\tparticipant: string;\n\tcommand?: string;\n}\n\nexport interface IChatParticipantMetadata {\n\tparticipant: string;\n\tcommand?: string;\n\tdisambiguation: { category: string; description: string; examples: string[] }[];\n}\n\nexport interface IChatParticipantDetectionProvider {\n\tprovideParticipantDetection(request: IChatAgentRequest, history: IChatAgentHistoryEntry[], options: { location: ChatAgentLocation; participants: IChatParticipantMetadata[] }, token: CancellationToken): Promise<IChatParticipantDetectionResult | null | undefined>;\n}\n\nexport type IChatAgent = IChatAgentData & IChatAgentImplementation;\n\nexport interface IChatAgentCommand extends IRawChatCommandContribution {\n\tfollowupPlaceholder?: string;\n}\n\nexport interface IChatRequesterInformation {\n\tname: string;\n\n\t/**\n\t * A full URI for the icon of the requester.\n\t */\n\ticon?: URI;\n}\n\nexport interface IChatAgentMetadata {\n\thelpTextPrefix?: string | IMarkdownString;\n\thelpTextVariablesPrefix?: string | IMarkdownString;\n\thelpTextPostfix?: string | IMarkdownString;\n\tisSecondary?: boolean; // Invoked by ctrl/cmd+enter\n\ticon?: URI;\n\ticonDark?: URI;\n\tthemeIcon?: ThemeIcon;\n\tsampleRequest?: string;\n\tsupportIssueReporting?: boolean;\n\tfollowupPlaceholder?: string;\n\tisSticky?: boolean;\n\trequester?: IChatRequesterInformation;\n\tsupportsSlowVariables?: boolean;\n}\n\n\nexport interface IChatAgentRequest {\n\tsessionId: string;\n\trequestId: string;\n\tagentId: string;\n\tcommand?: string;\n\tmessage: string;\n\tattempt?: number;\n\tenableCommandDetection?: boolean;\n\tisParticipantDetected?: boolean;\n\tvariables: IChatRequestVariableData;\n\tlocation: ChatAgentLocation;\n\tlocationData?: IChatLocationData;\n\tacceptedConfirmationData?: any[];\n\trejectedConfirmationData?: any[];\n}\n\nexport interface IChatQuestion {\n\treadonly prompt: string;\n\treadonly participant?: string;\n\treadonly command?: string;\n}\n\nexport interface IChatAgentResultTimings {\n\tfirstProgress?: number;\n\ttotalElapsed: number;\n}\n\nexport interface IChatAgentResult {\n\terrorDetails?: IChatResponseErrorDetails;\n\ttimings?: IChatAgentResultTimings;\n\t/** Extra properties that the agent can use to identify a result */\n\treadonly metadata?: { readonly [key: string]: any };\n\tnextQuestion?: IChatQuestion;\n}\n\nexport const IChatAgentService = createDecorator<IChatAgentService>('chatAgentService');\n\ninterface IChatAgentEntry {\n\tdata: IChatAgentData;\n\timpl?: IChatAgentImplementation;\n}\n\nexport interface IChatAgentCompletionItem {\n\tid: string;\n\tname?: string;\n\tfullName?: string;\n\ticon?: ThemeIcon;\n\tvalue: unknown;\n\tcommand?: Command;\n}\n\nexport interface IChatAgentService {\n\t_serviceBrand: undefined;\n\t/**\n\t * undefined when an agent was removed IChatAgent\n\t */\n\treadonly onDidChangeAgents: Event<IChatAgent | undefined>;\n\tregisterAgent(id: string, data: IChatAgentData): IDisposable;\n\tregisterAgentImplementation(id: string, agent: IChatAgentImplementation): IDisposable;\n\tregisterDynamicAgent(data: IChatAgentData, agentImpl: IChatAgentImplementation): IDisposable;\n\tregisterAgentCompletionProvider(id: string, provider: (query: string, token: CancellationToken) => Promise<IChatAgentCompletionItem[]>): IDisposable;\n\tgetAgentCompletionItems(id: string, query: string, token: CancellationToken): Promise<IChatAgentCompletionItem[]>;\n\tregisterChatParticipantDetectionProvider(handle: number, provider: IChatParticipantDetectionProvider): IDisposable;\n\tdetectAgentOrCommand(request: IChatAgentRequest, history: IChatAgentHistoryEntry[], options: { location: ChatAgentLocation }, token: CancellationToken): Promise<{ agent: IChatAgentData; command?: IChatAgentCommand } | undefined>;\n\thasChatParticipantDetectionProviders(): boolean;\n\tinvokeAgent(agent: string, request: IChatAgentRequest, progress: (part: IChatProgress) => void, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatAgentResult>;\n\tgetFollowups(id: string, request: IChatAgentRequest, result: IChatAgentResult, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatFollowup[]>;\n\tgetChatTitle(id: string, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<string | undefined>;\n\tgetAgent(id: string): IChatAgentData | undefined;\n\tgetAgentByFullyQualifiedId(id: string): IChatAgentData | undefined;\n\tgetAgents(): IChatAgentData[];\n\tgetActivatedAgents(): Array<IChatAgent>;\n\tgetAgentsByName(name: string): IChatAgentData[];\n\tagentHasDupeName(id: string): boolean;\n\n\t/**\n\t * Get the default agent (only if activated)\n\t */\n\tgetDefaultAgent(location: ChatAgentLocation): IChatAgent | undefined;\n\n\t/**\n\t * Get the default agent data that has been contributed (may not be activated yet)\n\t */\n\tgetContributedDefaultAgent(location: ChatAgentLocation): IChatAgentData | undefined;\n\tgetSecondaryAgent(): IChatAgentData | undefined;\n\tupdateAgent(id: string, updateMetadata: IChatAgentMetadata): void;\n}\n\nexport class ChatAgentService implements IChatAgentService {\n\n\tpublic static readonly AGENT_LEADER = '@';\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _agents = new Map<string, IChatAgentEntry>();\n\n\tprivate readonly _onDidChangeAgents = new Emitter<IChatAgent | undefined>();\n\treadonly onDidChangeAgents: Event<IChatAgent | undefined> = this._onDidChangeAgents.event;\n\n\tprivate readonly _hasDefaultAgent: IContextKey<boolean>;\n\tprivate readonly _defaultAgentRegistered: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._hasDefaultAgent = CONTEXT_CHAT_ENABLED.bindTo(this.contextKeyService);\n\t\tthis._defaultAgentRegistered = CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED.bindTo(this.contextKeyService);\n\t}\n\n\tregisterAgent(id: string, data: IChatAgentData): IDisposable {\n\t\tconst existingAgent = this.getAgent(id);\n\t\tif (existingAgent) {\n\t\t\tthrow new Error(`Agent already registered: ${JSON.stringify(id)}`);\n\t\t}\n\n\t\tif (data.isDefault) {\n\t\t\tthis._defaultAgentRegistered.set(true);\n\t\t}\n\n\t\tconst that = this;\n\t\tconst commands = data.slashCommands;\n\t\tdata = {\n\t\t\t...data,\n\t\t\tget slashCommands() {\n\t\t\t\treturn commands.filter(c => !c.when || that.contextKeyService.contextMatchesRules(ContextKeyExpr.deserialize(c.when)));\n\t\t\t}\n\t\t};\n\t\tconst entry = { data };\n\t\tthis._agents.set(id, entry);\n\t\tthis._onDidChangeAgents.fire(undefined);\n\t\treturn toDisposable(() => {\n\t\t\tthis._agents.delete(id);\n\t\t\tif (data.isDefault) {\n\t\t\t\tthis._defaultAgentRegistered.set(false);\n\t\t\t}\n\n\t\t\tthis._onDidChangeAgents.fire(undefined);\n\t\t});\n\t}\n\n\tregisterAgentImplementation(id: string, agentImpl: IChatAgentImplementation): IDisposable {\n\t\tconst entry = this._agents.get(id);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`Unknown agent: ${JSON.stringify(id)}`);\n\t\t}\n\n\t\tif (entry.impl) {\n\t\t\tthrow new Error(`Agent already has implementation: ${JSON.stringify(id)}`);\n\t\t}\n\n\t\tif (entry.data.isDefault) {\n\t\t\tthis._hasDefaultAgent.set(true);\n\t\t}\n\n\t\tentry.impl = agentImpl;\n\t\tthis._onDidChangeAgents.fire(new MergedChatAgent(entry.data, agentImpl));\n\n\t\treturn toDisposable(() => {\n\t\t\tentry.impl = undefined;\n\t\t\tthis._onDidChangeAgents.fire(undefined);\n\n\t\t\tif (entry.data.isDefault) {\n\t\t\t\tthis._hasDefaultAgent.set(false);\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterDynamicAgent(data: IChatAgentData, agentImpl: IChatAgentImplementation): IDisposable {\n\t\tdata.isDynamic = true;\n\t\tconst agent = { data, impl: agentImpl };\n\t\tthis._agents.set(data.id, agent);\n\t\tthis._onDidChangeAgents.fire(new MergedChatAgent(data, agentImpl));\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._agents.delete(data.id);\n\t\t\tthis._onDidChangeAgents.fire(undefined);\n\t\t});\n\t}\n\n\tprivate _agentCompletionProviders = new Map<string, (query: string, token: CancellationToken) => Promise<IChatAgentCompletionItem[]>>();\n\n\tregisterAgentCompletionProvider(id: string, provider: (query: string, token: CancellationToken) => Promise<IChatAgentCompletionItem[]>) {\n\t\tthis._agentCompletionProviders.set(id, provider);\n\t\treturn {\n\t\t\tdispose: () => { this._agentCompletionProviders.delete(id); }\n\t\t};\n\t}\n\n\tasync getAgentCompletionItems(id: string, query: string, token: CancellationToken) {\n\t\treturn await this._agentCompletionProviders.get(id)?.(query, token) ?? [];\n\t}\n\n\tupdateAgent(id: string, updateMetadata: IChatAgentMetadata): void {\n\t\tconst agent = this._agents.get(id);\n\t\tif (!agent?.impl) {\n\t\t\tthrow new Error(`No activated agent with id ${JSON.stringify(id)} registered`);\n\t\t}\n\t\tagent.data.metadata = { ...agent.data.metadata, ...updateMetadata };\n\t\tthis._onDidChangeAgents.fire(new MergedChatAgent(agent.data, agent.impl));\n\t}\n\n\tgetDefaultAgent(location: ChatAgentLocation): IChatAgent | undefined {\n\t\treturn findLast(this.getActivatedAgents(), a => !!a.isDefault && a.locations.includes(location));\n\t}\n\n\tgetContributedDefaultAgent(location: ChatAgentLocation): IChatAgentData | undefined {\n\t\treturn this.getAgents().find(a => !!a.isDefault && a.locations.includes(location));\n\t}\n\n\tgetSecondaryAgent(): IChatAgentData | undefined {\n\t\t// TODO also static\n\t\treturn Iterable.find(this._agents.values(), a => !!a.data.metadata.isSecondary)?.data;\n\t}\n\n\tgetAgent(id: string): IChatAgentData | undefined {\n\t\tif (!this._agentIsEnabled(id)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._agents.get(id)?.data;\n\t}\n\n\tprivate _agentIsEnabled(id: string): boolean {\n\t\tconst entry = this._agents.get(id);\n\t\treturn !entry?.data.when || this.contextKeyService.contextMatchesRules(ContextKeyExpr.deserialize(entry.data.when));\n\t}\n\n\tgetAgentByFullyQualifiedId(id: string): IChatAgentData | undefined {\n\t\tconst agent = Iterable.find(this._agents.values(), a => getFullyQualifiedId(a.data) === id)?.data;\n\t\tif (agent && !this._agentIsEnabled(agent.id)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\t/**\n\t * Returns all agent datas that exist- static registered and dynamic ones.\n\t */\n\tgetAgents(): IChatAgentData[] {\n\t\treturn Array.from(this._agents.values())\n\t\t\t.map(entry => entry.data)\n\t\t\t.filter(a => this._agentIsEnabled(a.id));\n\t}\n\n\tgetActivatedAgents(): IChatAgent[] {\n\t\treturn Array.from(this._agents.values())\n\t\t\t.filter(a => !!a.impl)\n\t\t\t.filter(a => this._agentIsEnabled(a.data.id))\n\t\t\t.map(a => new MergedChatAgent(a.data, a.impl!));\n\t}\n\n\tgetAgentsByName(name: string): IChatAgentData[] {\n\t\treturn this.getAgents().filter(a => a.name === name);\n\t}\n\n\tagentHasDupeName(id: string): boolean {\n\t\tconst agent = this.getAgent(id);\n\t\tif (!agent) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getAgentsByName(agent.name)\n\t\t\t.filter(a => a.extensionId.value !== agent.extensionId.value).length > 0;\n\t}\n\n\tasync invokeAgent(id: string, request: IChatAgentRequest, progress: (part: IChatProgress) => void, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatAgentResult> {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data?.impl) {\n\t\t\tthrow new Error(`No activated agent with id \"${id}\"`);\n\t\t}\n\n\t\treturn await data.impl.invoke(request, progress, history, token);\n\t}\n\n\tasync getFollowups(id: string, request: IChatAgentRequest, result: IChatAgentResult, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatFollowup[]> {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data?.impl) {\n\t\t\tthrow new Error(`No activated agent with id \"${id}\"`);\n\t\t}\n\n\t\tif (!data.impl?.provideFollowups) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn data.impl.provideFollowups(request, result, history, token);\n\t}\n\n\tasync getChatTitle(id: string, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<string | undefined> {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data?.impl) {\n\t\t\tthrow new Error(`No activated agent with id \"${id}\"`);\n\t\t}\n\n\t\tif (!data.impl?.provideChatTitle) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn data.impl.provideChatTitle(history, token);\n\t}\n\n\tprivate _chatParticipantDetectionProviders = new Map<number, IChatParticipantDetectionProvider>();\n\tregisterChatParticipantDetectionProvider(handle: number, provider: IChatParticipantDetectionProvider) {\n\t\tthis._chatParticipantDetectionProviders.set(handle, provider);\n\t\treturn toDisposable(() => {\n\t\t\tthis._chatParticipantDetectionProviders.delete(handle);\n\t\t});\n\t}\n\n\thasChatParticipantDetectionProviders() {\n\t\treturn this._chatParticipantDetectionProviders.size > 0;\n\t}\n\n\tasync detectAgentOrCommand(request: IChatAgentRequest, history: IChatAgentHistoryEntry[], options: { location: ChatAgentLocation }, token: CancellationToken): Promise<{ agent: IChatAgentData; command?: IChatAgentCommand } | undefined> {\n\t\t// TODO@joyceerhl should we have a selector to be able to narrow down which provider to use\n\t\tconst provider = Iterable.first(this._chatParticipantDetectionProviders.values());\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst participants = this.getAgents().reduce<IChatParticipantMetadata[]>((acc, a) => {\n\t\t\tacc.push({ participant: a.id, disambiguation: a.disambiguation ?? [] });\n\t\t\tfor (const command of a.slashCommands) {\n\t\t\t\tacc.push({ participant: a.id, command: command.name, disambiguation: command.disambiguation ?? [] });\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst result = await provider.provideParticipantDetection(request, history, { ...options, participants }, token);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst agent = this.getAgent(result.participant);\n\t\tif (!agent) {\n\t\t\t// Couldn't find a participant matching the participant detection result\n\t\t\treturn;\n\t\t}\n\n\t\tif (!result.command) {\n\t\t\treturn { agent };\n\t\t}\n\n\t\tconst command = agent?.slashCommands.find(c => c.name === result.command);\n\t\tif (!command) {\n\t\t\t// Couldn't find a slash command matching the participant detection result\n\t\t\treturn;\n\t\t}\n\n\t\treturn { agent, command };\n\t}\n}\n\nexport class MergedChatAgent implements IChatAgent {\n\tconstructor(\n\t\tprivate readonly data: IChatAgentData,\n\t\tprivate readonly impl: IChatAgentImplementation\n\t) { }\n\twhen?: string | undefined;\n\tpublisherDisplayName?: string | undefined;\n\tisDynamic?: boolean | undefined;\n\n\tget id(): string { return this.data.id; }\n\tget name(): string { return this.data.name ?? ''; }\n\tget fullName(): string { return this.data.fullName ?? ''; }\n\tget description(): string { return this.data.description ?? ''; }\n\tget extensionId(): ExtensionIdentifier { return this.data.extensionId; }\n\tget extensionPublisherId(): string { return this.data.extensionPublisherId; }\n\tget extensionPublisherDisplayName() { return this.data.publisherDisplayName; }\n\tget extensionDisplayName(): string { return this.data.extensionDisplayName; }\n\tget isDefault(): boolean | undefined { return this.data.isDefault; }\n\tget metadata(): IChatAgentMetadata { return this.data.metadata; }\n\tget slashCommands(): IChatAgentCommand[] { return this.data.slashCommands; }\n\tget locations(): ChatAgentLocation[] { return this.data.locations; }\n\tget disambiguation(): { category: string; description: string; examples: string[] }[] { return this.data.disambiguation; }\n\n\tasync invoke(request: IChatAgentRequest, progress: (part: IChatProgress) => void, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatAgentResult> {\n\t\treturn this.impl.invoke(request, progress, history, token);\n\t}\n\n\tasync provideFollowups(request: IChatAgentRequest, result: IChatAgentResult, history: IChatAgentHistoryEntry[], token: CancellationToken): Promise<IChatFollowup[]> {\n\t\tif (this.impl.provideFollowups) {\n\t\t\treturn this.impl.provideFollowups(request, result, history, token);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprovideWelcomeMessage(location: ChatAgentLocation, token: CancellationToken): ProviderResult<(string | IMarkdownString)[] | undefined> {\n\t\tif (this.impl.provideWelcomeMessage) {\n\t\t\treturn this.impl.provideWelcomeMessage(location, token);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprovideSampleQuestions(location: ChatAgentLocation, token: CancellationToken): ProviderResult<IChatFollowup[] | undefined> {\n\t\tif (this.impl.provideSampleQuestions) {\n\t\t\treturn this.impl.provideSampleQuestions(location, token);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\ttoJSON(): IChatAgentData {\n\t\treturn this.data;\n\t}\n}\n\nexport const IChatAgentNameService = createDecorator<IChatAgentNameService>('chatAgentNameService');\n\ntype IChatParticipantRegistry = { [name: string]: string[] };\n\ninterface IChatParticipantRegistryResponse {\n\treadonly version: number;\n\treadonly restrictedChatParticipants: IChatParticipantRegistry;\n}\n\nexport interface IChatAgentNameService {\n\t_serviceBrand: undefined;\n\tgetAgentNameRestriction(chatAgentData: IChatAgentData): boolean;\n}\n\nexport class ChatAgentNameService implements IChatAgentNameService {\n\n\tprivate static readonly StorageKey = 'chat.participantNameRegistry';\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly url!: string;\n\tprivate registry = observableValue<IChatParticipantRegistry>(this, Object.create(null));\n\tprivate disposed = false;\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tif (!productService.chatParticipantRegistry) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.url = productService.chatParticipantRegistry;\n\n\t\tconst raw = storageService.get(ChatAgentNameService.StorageKey, StorageScope.APPLICATION);\n\n\t\ttry {\n\t\t\tthis.registry.set(JSON.parse(raw ?? '{}'), undefined);\n\t\t} catch (err) {\n\t\t\tstorageService.remove(ChatAgentNameService.StorageKey, StorageScope.APPLICATION);\n\t\t}\n\n\t\tthis.refresh();\n\t}\n\n\tprivate refresh(): void {\n\t\tif (this.disposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update()\n\t\t\t.catch(err => this.logService.warn('Failed to fetch chat participant registry', err))\n\t\t\t.then(() => timeout(5 * 60 * 1000)) // every 5 minutes\n\t\t\t.then(() => this.refresh());\n\t}\n\n\tprivate async update(): Promise<void> {\n\t\tconst context = await this.requestService.request({ type: 'GET', url: this.url }, CancellationToken.None);\n\n\t\tif (context.res.statusCode !== 200) {\n\t\t\tthrow new Error('Could not get extensions report.');\n\t\t}\n\n\t\tconst result = await asJson<IChatParticipantRegistryResponse>(context);\n\n\t\tif (!result || result.version !== 1) {\n\t\t\tthrow new Error('Unexpected chat participant registry response.');\n\t\t}\n\n\t\tconst registry = result.restrictedChatParticipants;\n\t\tthis.registry.set(registry, undefined);\n\t\tthis.storageService.store(ChatAgentNameService.StorageKey, JSON.stringify(registry), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\t/**\n\t * Returns true if the agent is allowed to use this name\n\t */\n\tgetAgentNameRestriction(chatAgentData: IChatAgentData): boolean {\n\t\t// TODO would like to use observables here but nothing uses it downstream and I'm not sure how to combine these two\n\t\tconst nameAllowed = this.checkAgentNameRestriction(chatAgentData.name, chatAgentData).get();\n\t\tconst fullNameAllowed = !chatAgentData.fullName || this.checkAgentNameRestriction(chatAgentData.fullName.replace(/\\s/g, ''), chatAgentData).get();\n\t\treturn nameAllowed && fullNameAllowed;\n\t}\n\n\tprivate checkAgentNameRestriction(name: string, chatAgentData: IChatAgentData): IObservable<boolean> {\n\t\t// Registry is a map of name to an array of extension publisher IDs or extension IDs that are allowed to use it.\n\t\t// Look up the list of extensions that are allowed to use this name\n\t\tconst allowList = this.registry.map<string[] | undefined>(registry => registry[name.toLowerCase()]);\n\t\treturn allowList.map(allowList => {\n\t\t\tif (!allowList) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn allowList.some(id => equalsIgnoreCase(id, id.includes('.') ? chatAgentData.extensionId.value : chatAgentData.extensionPublisherId));\n\t\t});\n\t}\n\n\tdispose() {\n\t\tthis.disposed = true;\n\t}\n}\n\nexport function getFullyQualifiedId(chatAgentData: IChatAgentData): string {\n\treturn `${chatAgentData.extensionId.value}.${chatAgentData.id}`;\n}\n\nexport function reviveSerializedAgent(raw: ISerializableChatAgentData): IChatAgentData {\n\tconst agent = 'name' in raw ?\n\t\traw :\n\t\t{\n\t\t\t...(raw as any),\n\t\t\tname: (raw as any).id,\n\t\t};\n\n\t// Fill in required fields that may be missing from old data\n\tif (!('extensionPublisherId' in agent)) {\n\t\tagent.extensionPublisherId = agent.extensionPublisher ?? '';\n\t}\n\n\tif (!('extensionDisplayName' in agent)) {\n\t\tagent.extensionDisplayName = '';\n\t}\n\n\tif (!('extensionId' in agent)) {\n\t\tagent.extensionId = new ExtensionIdentifier('');\n\t}\n\n\treturn revive(agent);\n}\n"],
  "mappings": "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",
  "names": ["ChatAgentLocation", "command", "allowList"]
}
