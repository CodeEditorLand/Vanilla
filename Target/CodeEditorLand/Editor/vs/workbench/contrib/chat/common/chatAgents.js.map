{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatAgents.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLast } from \"../../../../base/common/arraysFind.js\";\nimport { timeout } from \"../../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../../base/common/marshalling.js\";\nimport {\n\ttype IObservable,\n\tobservableValue,\n} from \"../../../../base/common/observable.js\";\nimport { equalsIgnoreCase } from \"../../../../base/common/strings.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tCommand,\n\tProviderResult,\n} from \"../../../../editor/common/languages.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIRequestService,\n\tasJson,\n} from \"../../../../platform/request/common/request.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tCONTEXT_CHAT_ENABLED,\n\tCONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED,\n} from \"./chatContextKeys.js\";\nimport type {\n\tIChatProgressResponseContent,\n\tIChatRequestVariableData,\n\tISerializableChatAgentData,\n} from \"./chatModel.js\";\nimport type {\n\tIRawChatCommandContribution,\n\tRawChatParticipantLocation,\n} from \"./chatParticipantContribTypes.js\";\nimport type {\n\tIChatFollowup,\n\tIChatLocationData,\n\tIChatProgress,\n\tIChatResponseErrorDetails,\n\tIChatTaskDto,\n} from \"./chatService.js\";\n\n//#region agent service, commands etc\n\nexport interface IChatAgentHistoryEntry {\n\trequest: IChatAgentRequest;\n\tresponse: ReadonlyArray<IChatProgressResponseContent | IChatTaskDto>;\n\tresult: IChatAgentResult;\n}\n\nexport enum ChatAgentLocation {\n\tPanel = \"panel\",\n\tTerminal = \"terminal\",\n\tNotebook = \"notebook\",\n\tEditor = \"editor\",\n}\n\nexport namespace ChatAgentLocation {\n\texport function fromRaw(\n\t\tvalue: RawChatParticipantLocation | string,\n\t): ChatAgentLocation {\n\t\tswitch (value) {\n\t\t\tcase \"panel\":\n\t\t\t\treturn ChatAgentLocation.Panel;\n\t\t\tcase \"terminal\":\n\t\t\t\treturn ChatAgentLocation.Terminal;\n\t\t\tcase \"notebook\":\n\t\t\t\treturn ChatAgentLocation.Notebook;\n\t\t\tcase \"editor\":\n\t\t\t\treturn ChatAgentLocation.Editor;\n\t\t}\n\t\treturn ChatAgentLocation.Panel;\n\t}\n}\n\nexport interface IChatAgentData {\n\tid: string;\n\tname: string;\n\tfullName?: string;\n\tdescription?: string;\n\twhen?: string;\n\textensionId: ExtensionIdentifier;\n\textensionPublisherId: string;\n\t/** This is the extension publisher id, or, in the case of a dynamically registered participant (remote agent), whatever publisher name we have for it */\n\tpublisherDisplayName?: string;\n\textensionDisplayName: string;\n\t/** The agent invoked when no agent is specified */\n\tisDefault?: boolean;\n\t/** This agent is not contributed in package.json, but is registered dynamically */\n\tisDynamic?: boolean;\n\tmetadata: IChatAgentMetadata;\n\tslashCommands: IChatAgentCommand[];\n\tlocations: ChatAgentLocation[];\n\tdisambiguation: {\n\t\tcategory: string;\n\t\tdescription: string;\n\t\texamples: string[];\n\t}[];\n\tsupportsToolReferences?: boolean;\n}\n\nexport interface IChatAgentImplementation {\n\tinvoke(\n\t\trequest: IChatAgentRequest,\n\t\tprogress: (part: IChatProgress) => void,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatAgentResult>;\n\tprovideFollowups?(\n\t\trequest: IChatAgentRequest,\n\t\tresult: IChatAgentResult,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatFollowup[]>;\n\tprovideWelcomeMessage?(\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<(string | IMarkdownString)[] | undefined>;\n\tprovideChatTitle?: (\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t) => Promise<string | undefined>;\n\tprovideSampleQuestions?(\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<IChatFollowup[] | undefined>;\n}\n\nexport interface IChatParticipantDetectionResult {\n\tparticipant: string;\n\tcommand?: string;\n}\n\nexport interface IChatParticipantMetadata {\n\tparticipant: string;\n\tcommand?: string;\n\tdisambiguation: {\n\t\tcategory: string;\n\t\tdescription: string;\n\t\texamples: string[];\n\t}[];\n}\n\nexport interface IChatParticipantDetectionProvider {\n\tprovideParticipantDetection(\n\t\trequest: IChatAgentRequest,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\toptions: {\n\t\t\tlocation: ChatAgentLocation;\n\t\t\tparticipants: IChatParticipantMetadata[];\n\t\t},\n\t\ttoken: CancellationToken,\n\t): Promise<IChatParticipantDetectionResult | null | undefined>;\n}\n\nexport type IChatAgent = IChatAgentData & IChatAgentImplementation;\n\nexport interface IChatAgentCommand extends IRawChatCommandContribution {\n\tfollowupPlaceholder?: string;\n}\n\nexport interface IChatRequesterInformation {\n\tname: string;\n\n\t/**\n\t * A full URI for the icon of the requester.\n\t */\n\ticon?: URI;\n}\n\nexport interface IChatAgentMetadata {\n\thelpTextPrefix?: string | IMarkdownString;\n\thelpTextVariablesPrefix?: string | IMarkdownString;\n\thelpTextPostfix?: string | IMarkdownString;\n\tisSecondary?: boolean; // Invoked by ctrl/cmd+enter\n\ticon?: URI;\n\ticonDark?: URI;\n\tthemeIcon?: ThemeIcon;\n\tsampleRequest?: string;\n\tsupportIssueReporting?: boolean;\n\tfollowupPlaceholder?: string;\n\tisSticky?: boolean;\n\trequester?: IChatRequesterInformation;\n\tsupportsSlowVariables?: boolean;\n}\n\nexport interface IChatAgentRequest {\n\tsessionId: string;\n\trequestId: string;\n\tagentId: string;\n\tcommand?: string;\n\tmessage: string;\n\tattempt?: number;\n\tenableCommandDetection?: boolean;\n\tisParticipantDetected?: boolean;\n\tvariables: IChatRequestVariableData;\n\tlocation: ChatAgentLocation;\n\tlocationData?: IChatLocationData;\n\tacceptedConfirmationData?: any[];\n\trejectedConfirmationData?: any[];\n}\n\nexport interface IChatQuestion {\n\treadonly prompt: string;\n\treadonly participant?: string;\n\treadonly command?: string;\n}\n\nexport interface IChatAgentResultTimings {\n\tfirstProgress?: number;\n\ttotalElapsed: number;\n}\n\nexport interface IChatAgentResult {\n\terrorDetails?: IChatResponseErrorDetails;\n\ttimings?: IChatAgentResultTimings;\n\t/** Extra properties that the agent can use to identify a result */\n\treadonly metadata?: { readonly [key: string]: any };\n\tnextQuestion?: IChatQuestion;\n}\n\nexport const IChatAgentService =\n\tcreateDecorator<IChatAgentService>(\"chatAgentService\");\n\ninterface IChatAgentEntry {\n\tdata: IChatAgentData;\n\timpl?: IChatAgentImplementation;\n}\n\nexport interface IChatAgentCompletionItem {\n\tid: string;\n\tname?: string;\n\tfullName?: string;\n\ticon?: ThemeIcon;\n\tvalue: unknown;\n\tcommand?: Command;\n}\n\nexport interface IChatAgentService {\n\t_serviceBrand: undefined;\n\t/**\n\t * undefined when an agent was removed IChatAgent\n\t */\n\treadonly onDidChangeAgents: Event<IChatAgent | undefined>;\n\tregisterAgent(id: string, data: IChatAgentData): IDisposable;\n\tregisterAgentImplementation(\n\t\tid: string,\n\t\tagent: IChatAgentImplementation,\n\t): IDisposable;\n\tregisterDynamicAgent(\n\t\tdata: IChatAgentData,\n\t\tagentImpl: IChatAgentImplementation,\n\t): IDisposable;\n\tregisterAgentCompletionProvider(\n\t\tid: string,\n\t\tprovider: (\n\t\t\tquery: string,\n\t\t\ttoken: CancellationToken,\n\t\t) => Promise<IChatAgentCompletionItem[]>,\n\t): IDisposable;\n\tgetAgentCompletionItems(\n\t\tid: string,\n\t\tquery: string,\n\t\ttoken: CancellationToken,\n\t): Promise<IChatAgentCompletionItem[]>;\n\tregisterChatParticipantDetectionProvider(\n\t\thandle: number,\n\t\tprovider: IChatParticipantDetectionProvider,\n\t): IDisposable;\n\tdetectAgentOrCommand(\n\t\trequest: IChatAgentRequest,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\toptions: { location: ChatAgentLocation },\n\t\ttoken: CancellationToken,\n\t): Promise<\n\t\t{ agent: IChatAgentData; command?: IChatAgentCommand } | undefined\n\t>;\n\thasChatParticipantDetectionProviders(): boolean;\n\tinvokeAgent(\n\t\tagent: string,\n\t\trequest: IChatAgentRequest,\n\t\tprogress: (part: IChatProgress) => void,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatAgentResult>;\n\tgetFollowups(\n\t\tid: string,\n\t\trequest: IChatAgentRequest,\n\t\tresult: IChatAgentResult,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatFollowup[]>;\n\tgetChatTitle(\n\t\tid: string,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<string | undefined>;\n\tgetAgent(id: string): IChatAgentData | undefined;\n\tgetAgentByFullyQualifiedId(id: string): IChatAgentData | undefined;\n\tgetAgents(): IChatAgentData[];\n\tgetActivatedAgents(): Array<IChatAgent>;\n\tgetAgentsByName(name: string): IChatAgentData[];\n\tagentHasDupeName(id: string): boolean;\n\n\t/**\n\t * Get the default agent (only if activated)\n\t */\n\tgetDefaultAgent(location: ChatAgentLocation): IChatAgent | undefined;\n\n\t/**\n\t * Get the default agent data that has been contributed (may not be activated yet)\n\t */\n\tgetContributedDefaultAgent(\n\t\tlocation: ChatAgentLocation,\n\t): IChatAgentData | undefined;\n\tgetSecondaryAgent(): IChatAgentData | undefined;\n\tupdateAgent(id: string, updateMetadata: IChatAgentMetadata): void;\n}\n\nexport class ChatAgentService implements IChatAgentService {\n\tpublic static readonly AGENT_LEADER = \"@\";\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _agents = new Map<string, IChatAgentEntry>();\n\n\tprivate readonly _onDidChangeAgents = new Emitter<IChatAgent | undefined>();\n\treadonly onDidChangeAgents: Event<IChatAgent | undefined> =\n\t\tthis._onDidChangeAgents.event;\n\n\tprivate readonly _hasDefaultAgent: IContextKey<boolean>;\n\tprivate readonly _defaultAgentRegistered: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._hasDefaultAgent = CONTEXT_CHAT_ENABLED.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis._defaultAgentRegistered =\n\t\t\tCONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t}\n\n\tregisterAgent(id: string, data: IChatAgentData): IDisposable {\n\t\tconst existingAgent = this.getAgent(id);\n\t\tif (existingAgent) {\n\t\t\tthrow new Error(`Agent already registered: ${JSON.stringify(id)}`);\n\t\t}\n\n\t\tif (data.isDefault) {\n\t\t\tthis._defaultAgentRegistered.set(true);\n\t\t}\n\n\t\tconst that = this;\n\t\tconst commands = data.slashCommands;\n\t\tdata = {\n\t\t\t...data,\n\t\t\tget slashCommands() {\n\t\t\t\treturn commands.filter(\n\t\t\t\t\t(c) =>\n\t\t\t\t\t\t!c.when ||\n\t\t\t\t\t\tthat.contextKeyService.contextMatchesRules(\n\t\t\t\t\t\t\tContextKeyExpr.deserialize(c.when),\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tconst entry = { data };\n\t\tthis._agents.set(id, entry);\n\t\tthis._onDidChangeAgents.fire(undefined);\n\t\treturn toDisposable(() => {\n\t\t\tthis._agents.delete(id);\n\t\t\tif (data.isDefault) {\n\t\t\t\tthis._defaultAgentRegistered.set(false);\n\t\t\t}\n\n\t\t\tthis._onDidChangeAgents.fire(undefined);\n\t\t});\n\t}\n\n\tregisterAgentImplementation(\n\t\tid: string,\n\t\tagentImpl: IChatAgentImplementation,\n\t): IDisposable {\n\t\tconst entry = this._agents.get(id);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`Unknown agent: ${JSON.stringify(id)}`);\n\t\t}\n\n\t\tif (entry.impl) {\n\t\t\tthrow new Error(\n\t\t\t\t`Agent already has implementation: ${JSON.stringify(id)}`,\n\t\t\t);\n\t\t}\n\n\t\tif (entry.data.isDefault) {\n\t\t\tthis._hasDefaultAgent.set(true);\n\t\t}\n\n\t\tentry.impl = agentImpl;\n\t\tthis._onDidChangeAgents.fire(\n\t\t\tnew MergedChatAgent(entry.data, agentImpl),\n\t\t);\n\n\t\treturn toDisposable(() => {\n\t\t\tentry.impl = undefined;\n\t\t\tthis._onDidChangeAgents.fire(undefined);\n\n\t\t\tif (entry.data.isDefault) {\n\t\t\t\tthis._hasDefaultAgent.set(false);\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterDynamicAgent(\n\t\tdata: IChatAgentData,\n\t\tagentImpl: IChatAgentImplementation,\n\t): IDisposable {\n\t\tdata.isDynamic = true;\n\t\tconst agent = { data, impl: agentImpl };\n\t\tthis._agents.set(data.id, agent);\n\t\tthis._onDidChangeAgents.fire(new MergedChatAgent(data, agentImpl));\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._agents.delete(data.id);\n\t\t\tthis._onDidChangeAgents.fire(undefined);\n\t\t});\n\t}\n\n\tprivate _agentCompletionProviders = new Map<\n\t\tstring,\n\t\t(\n\t\t\tquery: string,\n\t\t\ttoken: CancellationToken,\n\t\t) => Promise<IChatAgentCompletionItem[]>\n\t>();\n\n\tregisterAgentCompletionProvider(\n\t\tid: string,\n\t\tprovider: (\n\t\t\tquery: string,\n\t\t\ttoken: CancellationToken,\n\t\t) => Promise<IChatAgentCompletionItem[]>,\n\t) {\n\t\tthis._agentCompletionProviders.set(id, provider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._agentCompletionProviders.delete(id);\n\t\t\t},\n\t\t};\n\t}\n\n\tasync getAgentCompletionItems(\n\t\tid: string,\n\t\tquery: string,\n\t\ttoken: CancellationToken,\n\t) {\n\t\treturn (\n\t\t\t(await this._agentCompletionProviders.get(id)?.(query, token)) ?? []\n\t\t);\n\t}\n\n\tupdateAgent(id: string, updateMetadata: IChatAgentMetadata): void {\n\t\tconst agent = this._agents.get(id);\n\t\tif (!agent?.impl) {\n\t\t\tthrow new Error(\n\t\t\t\t`No activated agent with id ${JSON.stringify(id)} registered`,\n\t\t\t);\n\t\t}\n\t\tagent.data.metadata = { ...agent.data.metadata, ...updateMetadata };\n\t\tthis._onDidChangeAgents.fire(\n\t\t\tnew MergedChatAgent(agent.data, agent.impl),\n\t\t);\n\t}\n\n\tgetDefaultAgent(location: ChatAgentLocation): IChatAgent | undefined {\n\t\treturn findLast(\n\t\t\tthis.getActivatedAgents(),\n\t\t\t(a) => !!a.isDefault && a.locations.includes(location),\n\t\t);\n\t}\n\n\tgetContributedDefaultAgent(\n\t\tlocation: ChatAgentLocation,\n\t): IChatAgentData | undefined {\n\t\treturn this.getAgents().find(\n\t\t\t(a) => !!a.isDefault && a.locations.includes(location),\n\t\t);\n\t}\n\n\tgetSecondaryAgent(): IChatAgentData | undefined {\n\t\t// TODO also static\n\t\treturn Iterable.find(\n\t\t\tthis._agents.values(),\n\t\t\t(a) => !!a.data.metadata.isSecondary,\n\t\t)?.data;\n\t}\n\n\tgetAgent(id: string): IChatAgentData | undefined {\n\t\tif (!this._agentIsEnabled(id)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._agents.get(id)?.data;\n\t}\n\n\tprivate _agentIsEnabled(id: string): boolean {\n\t\tconst entry = this._agents.get(id);\n\t\treturn (\n\t\t\t!entry?.data.when ||\n\t\t\tthis.contextKeyService.contextMatchesRules(\n\t\t\t\tContextKeyExpr.deserialize(entry.data.when),\n\t\t\t)\n\t\t);\n\t}\n\n\tgetAgentByFullyQualifiedId(id: string): IChatAgentData | undefined {\n\t\tconst agent = Iterable.find(\n\t\t\tthis._agents.values(),\n\t\t\t(a) => getFullyQualifiedId(a.data) === id,\n\t\t)?.data;\n\t\tif (agent && !this._agentIsEnabled(agent.id)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\t/**\n\t * Returns all agent datas that exist- static registered and dynamic ones.\n\t */\n\tgetAgents(): IChatAgentData[] {\n\t\treturn Array.from(this._agents.values())\n\t\t\t.map((entry) => entry.data)\n\t\t\t.filter((a) => this._agentIsEnabled(a.id));\n\t}\n\n\tgetActivatedAgents(): IChatAgent[] {\n\t\treturn Array.from(this._agents.values())\n\t\t\t.filter((a) => !!a.impl)\n\t\t\t.filter((a) => this._agentIsEnabled(a.data.id))\n\t\t\t.map((a) => new MergedChatAgent(a.data, a.impl!));\n\t}\n\n\tgetAgentsByName(name: string): IChatAgentData[] {\n\t\treturn this.getAgents().filter((a) => a.name === name);\n\t}\n\n\tagentHasDupeName(id: string): boolean {\n\t\tconst agent = this.getAgent(id);\n\t\tif (!agent) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (\n\t\t\tthis.getAgentsByName(agent.name).filter(\n\t\t\t\t(a) => a.extensionId.value !== agent.extensionId.value,\n\t\t\t).length > 0\n\t\t);\n\t}\n\n\tasync invokeAgent(\n\t\tid: string,\n\t\trequest: IChatAgentRequest,\n\t\tprogress: (part: IChatProgress) => void,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatAgentResult> {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data?.impl) {\n\t\t\tthrow new Error(`No activated agent with id \"${id}\"`);\n\t\t}\n\n\t\treturn await data.impl.invoke(request, progress, history, token);\n\t}\n\n\tasync getFollowups(\n\t\tid: string,\n\t\trequest: IChatAgentRequest,\n\t\tresult: IChatAgentResult,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatFollowup[]> {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data?.impl) {\n\t\t\tthrow new Error(`No activated agent with id \"${id}\"`);\n\t\t}\n\n\t\tif (!data.impl?.provideFollowups) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn data.impl.provideFollowups(request, result, history, token);\n\t}\n\n\tasync getChatTitle(\n\t\tid: string,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<string | undefined> {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data?.impl) {\n\t\t\tthrow new Error(`No activated agent with id \"${id}\"`);\n\t\t}\n\n\t\tif (!data.impl?.provideChatTitle) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn data.impl.provideChatTitle(history, token);\n\t}\n\n\tprivate _chatParticipantDetectionProviders = new Map<\n\t\tnumber,\n\t\tIChatParticipantDetectionProvider\n\t>();\n\tregisterChatParticipantDetectionProvider(\n\t\thandle: number,\n\t\tprovider: IChatParticipantDetectionProvider,\n\t) {\n\t\tthis._chatParticipantDetectionProviders.set(handle, provider);\n\t\treturn toDisposable(() => {\n\t\t\tthis._chatParticipantDetectionProviders.delete(handle);\n\t\t});\n\t}\n\n\thasChatParticipantDetectionProviders() {\n\t\treturn this._chatParticipantDetectionProviders.size > 0;\n\t}\n\n\tasync detectAgentOrCommand(\n\t\trequest: IChatAgentRequest,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\toptions: { location: ChatAgentLocation },\n\t\ttoken: CancellationToken,\n\t): Promise<\n\t\t{ agent: IChatAgentData; command?: IChatAgentCommand } | undefined\n\t> {\n\t\t// TODO@joyceerhl should we have a selector to be able to narrow down which provider to use\n\t\tconst provider = Iterable.first(\n\t\t\tthis._chatParticipantDetectionProviders.values(),\n\t\t);\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst participants = this.getAgents().reduce<\n\t\t\tIChatParticipantMetadata[]\n\t\t>((acc, a) => {\n\t\t\tacc.push({\n\t\t\t\tparticipant: a.id,\n\t\t\t\tdisambiguation: a.disambiguation ?? [],\n\t\t\t});\n\t\t\tfor (const command of a.slashCommands) {\n\t\t\t\tacc.push({\n\t\t\t\t\tparticipant: a.id,\n\t\t\t\t\tcommand: command.name,\n\t\t\t\t\tdisambiguation: command.disambiguation ?? [],\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst result = await provider.provideParticipantDetection(\n\t\t\trequest,\n\t\t\thistory,\n\t\t\t{ ...options, participants },\n\t\t\ttoken,\n\t\t);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst agent = this.getAgent(result.participant);\n\t\tif (!agent) {\n\t\t\t// Couldn't find a participant matching the participant detection result\n\t\t\treturn;\n\t\t}\n\n\t\tif (!result.command) {\n\t\t\treturn { agent };\n\t\t}\n\n\t\tconst command = agent?.slashCommands.find(\n\t\t\t(c) => c.name === result.command,\n\t\t);\n\t\tif (!command) {\n\t\t\t// Couldn't find a slash command matching the participant detection result\n\t\t\treturn;\n\t\t}\n\n\t\treturn { agent, command };\n\t}\n}\n\nexport class MergedChatAgent implements IChatAgent {\n\tconstructor(\n\t\tprivate readonly data: IChatAgentData,\n\t\tprivate readonly impl: IChatAgentImplementation,\n\t) {}\n\twhen?: string | undefined;\n\tpublisherDisplayName?: string | undefined;\n\tisDynamic?: boolean | undefined;\n\n\tget id(): string {\n\t\treturn this.data.id;\n\t}\n\tget name(): string {\n\t\treturn this.data.name ?? \"\";\n\t}\n\tget fullName(): string {\n\t\treturn this.data.fullName ?? \"\";\n\t}\n\tget description(): string {\n\t\treturn this.data.description ?? \"\";\n\t}\n\tget extensionId(): ExtensionIdentifier {\n\t\treturn this.data.extensionId;\n\t}\n\tget extensionPublisherId(): string {\n\t\treturn this.data.extensionPublisherId;\n\t}\n\tget extensionPublisherDisplayName() {\n\t\treturn this.data.publisherDisplayName;\n\t}\n\tget extensionDisplayName(): string {\n\t\treturn this.data.extensionDisplayName;\n\t}\n\tget isDefault(): boolean | undefined {\n\t\treturn this.data.isDefault;\n\t}\n\tget metadata(): IChatAgentMetadata {\n\t\treturn this.data.metadata;\n\t}\n\tget slashCommands(): IChatAgentCommand[] {\n\t\treturn this.data.slashCommands;\n\t}\n\tget locations(): ChatAgentLocation[] {\n\t\treturn this.data.locations;\n\t}\n\tget disambiguation(): {\n\t\tcategory: string;\n\t\tdescription: string;\n\t\texamples: string[];\n\t}[] {\n\t\treturn this.data.disambiguation;\n\t}\n\n\tasync invoke(\n\t\trequest: IChatAgentRequest,\n\t\tprogress: (part: IChatProgress) => void,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatAgentResult> {\n\t\treturn this.impl.invoke(request, progress, history, token);\n\t}\n\n\tasync provideFollowups(\n\t\trequest: IChatAgentRequest,\n\t\tresult: IChatAgentResult,\n\t\thistory: IChatAgentHistoryEntry[],\n\t\ttoken: CancellationToken,\n\t): Promise<IChatFollowup[]> {\n\t\tif (this.impl.provideFollowups) {\n\t\t\treturn this.impl.provideFollowups(request, result, history, token);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprovideWelcomeMessage(\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<(string | IMarkdownString)[] | undefined> {\n\t\tif (this.impl.provideWelcomeMessage) {\n\t\t\treturn this.impl.provideWelcomeMessage(location, token);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprovideSampleQuestions(\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<IChatFollowup[] | undefined> {\n\t\tif (this.impl.provideSampleQuestions) {\n\t\t\treturn this.impl.provideSampleQuestions(location, token);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\ttoJSON(): IChatAgentData {\n\t\treturn this.data;\n\t}\n}\n\nexport const IChatAgentNameService = createDecorator<IChatAgentNameService>(\n\t\"chatAgentNameService\",\n);\n\ntype IChatParticipantRegistry = { [name: string]: string[] };\n\ninterface IChatParticipantRegistryResponse {\n\treadonly version: number;\n\treadonly restrictedChatParticipants: IChatParticipantRegistry;\n}\n\nexport interface IChatAgentNameService {\n\t_serviceBrand: undefined;\n\tgetAgentNameRestriction(chatAgentData: IChatAgentData): boolean;\n}\n\nexport class ChatAgentNameService implements IChatAgentNameService {\n\tprivate static readonly StorageKey = \"chat.participantNameRegistry\";\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly url!: string;\n\tprivate registry = observableValue<IChatParticipantRegistry>(\n\t\tthis,\n\t\tObject.create(null),\n\t);\n\tprivate disposed = false;\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tif (!productService.chatParticipantRegistry) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.url = productService.chatParticipantRegistry;\n\n\t\tconst raw = storageService.get(\n\t\t\tChatAgentNameService.StorageKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\n\t\ttry {\n\t\t\tthis.registry.set(JSON.parse(raw ?? \"{}\"), undefined);\n\t\t} catch (err) {\n\t\t\tstorageService.remove(\n\t\t\t\tChatAgentNameService.StorageKey,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t}\n\n\t\tthis.refresh();\n\t}\n\n\tprivate refresh(): void {\n\t\tif (this.disposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update()\n\t\t\t.catch((err) =>\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\"Failed to fetch chat participant registry\",\n\t\t\t\t\terr,\n\t\t\t\t),\n\t\t\t)\n\t\t\t.then(() => timeout(5 * 60 * 1000)) // every 5 minutes\n\t\t\t.then(() => this.refresh());\n\t}\n\n\tprivate async update(): Promise<void> {\n\t\tconst context = await this.requestService.request(\n\t\t\t{ type: \"GET\", url: this.url },\n\t\t\tCancellationToken.None,\n\t\t);\n\n\t\tif (context.res.statusCode !== 200) {\n\t\t\tthrow new Error(\"Could not get extensions report.\");\n\t\t}\n\n\t\tconst result = await asJson<IChatParticipantRegistryResponse>(context);\n\n\t\tif (!result || result.version !== 1) {\n\t\t\tthrow new Error(\"Unexpected chat participant registry response.\");\n\t\t}\n\n\t\tconst registry = result.restrictedChatParticipants;\n\t\tthis.registry.set(registry, undefined);\n\t\tthis.storageService.store(\n\t\t\tChatAgentNameService.StorageKey,\n\t\t\tJSON.stringify(registry),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\t/**\n\t * Returns true if the agent is allowed to use this name\n\t */\n\tgetAgentNameRestriction(chatAgentData: IChatAgentData): boolean {\n\t\t// TODO would like to use observables here but nothing uses it downstream and I'm not sure how to combine these two\n\t\tconst nameAllowed = this.checkAgentNameRestriction(\n\t\t\tchatAgentData.name,\n\t\t\tchatAgentData,\n\t\t).get();\n\t\tconst fullNameAllowed =\n\t\t\t!chatAgentData.fullName ||\n\t\t\tthis.checkAgentNameRestriction(\n\t\t\t\tchatAgentData.fullName.replace(/\\s/g, \"\"),\n\t\t\t\tchatAgentData,\n\t\t\t).get();\n\t\treturn nameAllowed && fullNameAllowed;\n\t}\n\n\tprivate checkAgentNameRestriction(\n\t\tname: string,\n\t\tchatAgentData: IChatAgentData,\n\t): IObservable<boolean> {\n\t\t// Registry is a map of name to an array of extension publisher IDs or extension IDs that are allowed to use it.\n\t\t// Look up the list of extensions that are allowed to use this name\n\t\tconst allowList = this.registry.map<string[] | undefined>(\n\t\t\t(registry) => registry[name.toLowerCase()],\n\t\t);\n\t\treturn allowList.map((allowList) => {\n\t\t\tif (!allowList) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn allowList.some((id) =>\n\t\t\t\tequalsIgnoreCase(\n\t\t\t\t\tid,\n\t\t\t\t\tid.includes(\".\")\n\t\t\t\t\t\t? chatAgentData.extensionId.value\n\t\t\t\t\t\t: chatAgentData.extensionPublisherId,\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tdispose() {\n\t\tthis.disposed = true;\n\t}\n}\n\nexport function getFullyQualifiedId(chatAgentData: IChatAgentData): string {\n\treturn `${chatAgentData.extensionId.value}.${chatAgentData.id}`;\n}\n\nexport function reviveSerializedAgent(\n\traw: ISerializableChatAgentData,\n): IChatAgentData {\n\tconst agent =\n\t\t\"name\" in raw\n\t\t\t? raw\n\t\t\t: {\n\t\t\t\t\t...(raw as any),\n\t\t\t\t\tname: (raw as any).id,\n\t\t\t\t};\n\n\t// Fill in required fields that may be missing from old data\n\tif (!(\"extensionPublisherId\" in agent)) {\n\t\tagent.extensionPublisherId = agent.extensionPublisher ?? \"\";\n\t}\n\n\tif (!(\"extensionDisplayName\" in agent)) {\n\t\tagent.extensionDisplayName = \"\";\n\t}\n\n\tif (!(\"extensionId\" in agent)) {\n\t\tagent.extensionId = new ExtensionIdentifier(\"\");\n\t}\n\n\treturn revive(agent);\n}\n"],
  "mappings": "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",
  "names": ["ChatAgentLocation", "command", "allowList"]
}
