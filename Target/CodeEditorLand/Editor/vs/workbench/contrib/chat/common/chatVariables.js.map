{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatVariables.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { Location } from '../../../../editor/common/languages.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ChatAgentLocation } from './chatAgents.js';\nimport { IChatModel, IChatRequestVariableData, IChatRequestVariableEntry } from './chatModel.js';\nimport { IParsedChatRequest } from './chatParserTypes.js';\nimport { IChatContentReference, IChatProgressMessage } from './chatService.js';\n\nexport interface IChatVariableData {\n\tid: string;\n\tname: string;\n\ticon?: ThemeIcon;\n\tfullName?: string;\n\tdescription: string;\n\tmodelDescription?: string;\n\tisSlow?: boolean;\n\tcanTakeArgument?: boolean;\n}\n\nexport type IChatRequestVariableValue = string | URI | Location | unknown;\n\nexport type IChatVariableResolverProgress =\n\t| IChatContentReference\n\t| IChatProgressMessage;\n\nexport interface IChatVariableResolver {\n\t(messageText: string, arg: string | undefined, model: IChatModel, progress: (part: IChatVariableResolverProgress) => void, token: CancellationToken): Promise<IChatRequestVariableValue | undefined>;\n}\n\nexport const IChatVariablesService = createDecorator<IChatVariablesService>('IChatVariablesService');\n\nexport interface IChatVariablesService {\n\t_serviceBrand: undefined;\n\tregisterVariable(data: IChatVariableData, resolver: IChatVariableResolver): IDisposable;\n\thasVariable(name: string): boolean;\n\tgetVariable(name: string): IChatVariableData | undefined;\n\tgetVariables(location: ChatAgentLocation): Iterable<Readonly<IChatVariableData>>;\n\tgetDynamicVariables(sessionId: string): ReadonlyArray<IDynamicVariable>; // should be its own service?\n\tattachContext(name: string, value: string | URI | Location | unknown, location: ChatAgentLocation): void;\n\n\t/**\n\t * Resolves all variables that occur in `prompt`\n\t */\n\tresolveVariables(prompt: IParsedChatRequest, attachedContextVariables: IChatRequestVariableEntry[] | undefined, model: IChatModel, progress: (part: IChatVariableResolverProgress) => void, token: CancellationToken): Promise<IChatRequestVariableData>;\n\tresolveVariable(variableName: string, promptText: string, model: IChatModel, progress: (part: IChatVariableResolverProgress) => void, token: CancellationToken): Promise<IChatRequestVariableValue | undefined>;\n}\n\nexport interface IDynamicVariable {\n\trange: IRange;\n\tid: string;\n\tfullName?: string;\n\ticon?: ThemeIcon;\n\tprefix?: string;\n\tmodelDescription?: string;\n\tdata: IChatRequestVariableValue;\n}\n"],
  "mappings": "AAKA,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AACpB,SAAS,cAAc;AACvB,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,YAAY,0BAA0B,iCAAiC;AAChF,SAAS,0BAA0B;AACnC,SAAS,uBAAuB,4BAA4B;AAuBrD,MAAM,wBAAwB,gBAAuC,uBAAuB;",
  "names": []
}
