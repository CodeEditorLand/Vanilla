{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from \"../../../../base/common/arrays.js\";\nimport { DeferredPromise } from \"../../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\ttype IMarkdownString,\n\tMarkdownString,\n\tisMarkdownString,\n} from \"../../../../base/common/htmlContent.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../../base/common/marshalling.js\";\nimport { equals } from \"../../../../base/common/objects.js\";\nimport { basename, isEqual } from \"../../../../base/common/resources.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport {\n\tURI,\n\ttype UriComponents,\n\ttype UriDto,\n\tisUriComponents,\n} from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport {\n\ttype IOffsetRange,\n\tOffsetRange,\n} from \"../../../../editor/common/core/offsetRange.js\";\nimport type { IRange } from \"../../../../editor/common/core/range.js\";\nimport type { TextEdit } from \"../../../../editor/common/languages.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tChatAgentLocation,\n\ttype IChatAgentCommand,\n\ttype IChatAgentData,\n\ttype IChatAgentResult,\n\tIChatAgentService,\n\treviveSerializedAgent,\n} from \"./chatAgents.js\";\nimport {\n\tChatRequestTextPart,\n\ttype IParsedChatRequest,\n\treviveParsedChatRequest,\n} from \"./chatParserTypes.js\";\nimport {\n\ttype ChatAgentVoteDirection,\n\ttype ChatAgentVoteDownReason,\n\ttype IChatAgentMarkdownContentWithVulnerability,\n\ttype IChatCodeCitation,\n\ttype IChatCommandButton,\n\ttype IChatConfirmation,\n\ttype IChatContentInlineReference,\n\ttype IChatContentReference,\n\ttype IChatFollowup,\n\ttype IChatLocationData,\n\ttype IChatMarkdownContent,\n\ttype IChatProgress,\n\ttype IChatProgressMessage,\n\ttype IChatResponseCodeblockUriPart,\n\ttype IChatResponseProgressFileTreeData,\n\ttype IChatTask,\n\ttype IChatTextEdit,\n\ttype IChatTreeData,\n\ttype IChatUsedContext,\n\ttype IChatWarningMessage,\n\tisIUsedContext,\n} from \"./chatService.js\";\nimport type { IChatRequestVariableValue } from \"./chatVariables.js\";\n\nexport interface IChatRequestVariableEntry {\n\tid: string;\n\tfullName?: string;\n\ticon?: ThemeIcon;\n\tname: string;\n\tmodelDescription?: string;\n\trange?: IOffsetRange;\n\tvalue: IChatRequestVariableValue;\n\treferences?: IChatContentReference[];\n\n\t// TODO are these just a 'kind'?\n\tisDynamic?: boolean;\n\tisFile?: boolean;\n\tisTool?: boolean;\n}\n\nexport interface IChatRequestVariableData {\n\tvariables: IChatRequestVariableEntry[];\n}\n\nexport interface IChatRequestModel {\n\treadonly id: string;\n\treadonly username: string;\n\treadonly avatarIconUri?: URI;\n\treadonly session: IChatModel;\n\treadonly message: IParsedChatRequest;\n\treadonly attempt: number;\n\treadonly variableData: IChatRequestVariableData;\n\treadonly confirmation?: string;\n\treadonly locationData?: IChatLocationData;\n\treadonly attachedContext?: IChatRequestVariableEntry[];\n\treadonly response?: IChatResponseModel;\n}\n\nexport interface IChatTextEditGroupState {\n\tsha1: string;\n\tapplied: number;\n}\n\nexport interface IChatTextEditGroup {\n\turi: URI;\n\tedits: TextEdit[][];\n\tstate?: IChatTextEditGroupState;\n\tkind: \"textEditGroup\";\n}\n\nexport type IChatProgressResponseContent =\n\t| IChatMarkdownContent\n\t| IChatAgentMarkdownContentWithVulnerability\n\t| IChatResponseCodeblockUriPart\n\t| IChatTreeData\n\t| IChatContentInlineReference\n\t| IChatProgressMessage\n\t| IChatCommandButton\n\t| IChatWarningMessage\n\t| IChatTask\n\t| IChatTextEditGroup\n\t| IChatConfirmation;\n\nexport type IChatProgressRenderableResponseContent = Exclude<\n\tIChatProgressResponseContent,\n\t| IChatContentInlineReference\n\t| IChatAgentMarkdownContentWithVulnerability\n\t| IChatResponseCodeblockUriPart\n>;\n\nexport interface IResponse {\n\treadonly value: ReadonlyArray<IChatProgressResponseContent>;\n\ttoMarkdown(): string;\n\ttoString(): string;\n}\n\nexport interface IChatResponseModel {\n\treadonly onDidChange: Event<void>;\n\treadonly id: string;\n\treadonly requestId: string;\n\treadonly username: string;\n\treadonly avatarIcon?: ThemeIcon | URI;\n\treadonly session: IChatModel;\n\treadonly agent?: IChatAgentData;\n\treadonly usedContext: IChatUsedContext | undefined;\n\treadonly contentReferences: ReadonlyArray<IChatContentReference>;\n\treadonly codeCitations: ReadonlyArray<IChatCodeCitation>;\n\treadonly progressMessages: ReadonlyArray<IChatProgressMessage>;\n\treadonly slashCommand?: IChatAgentCommand;\n\treadonly agentOrSlashCommandDetected: boolean;\n\treadonly response: IResponse;\n\treadonly isComplete: boolean;\n\treadonly isCanceled: boolean;\n\t/** A stale response is one that has been persisted and rehydrated, so e.g. Commands that have their arguments stored in the EH are gone. */\n\treadonly isStale: boolean;\n\treadonly vote: ChatAgentVoteDirection | undefined;\n\treadonly voteDownReason: ChatAgentVoteDownReason | undefined;\n\treadonly followups?: IChatFollowup[] | undefined;\n\treadonly result?: IChatAgentResult;\n\tsetVote(vote: ChatAgentVoteDirection): void;\n\tsetVoteDownReason(reason: ChatAgentVoteDownReason | undefined): void;\n\tsetEditApplied(edit: IChatTextEditGroup, editCount: number): boolean;\n}\n\nexport class ChatRequestModel implements IChatRequestModel {\n\tprivate static nextId = 0;\n\n\tpublic response: ChatResponseModel | undefined;\n\n\tpublic readonly id: string;\n\n\tpublic get session() {\n\t\treturn this._session;\n\t}\n\n\tpublic get username(): string {\n\t\treturn this.session.requesterUsername;\n\t}\n\n\tpublic get avatarIconUri(): URI | undefined {\n\t\treturn this.session.requesterAvatarIconUri;\n\t}\n\n\tpublic get attempt(): number {\n\t\treturn this._attempt;\n\t}\n\n\tpublic get variableData(): IChatRequestVariableData {\n\t\treturn this._variableData;\n\t}\n\n\tpublic set variableData(v: IChatRequestVariableData) {\n\t\tthis._variableData = v;\n\t}\n\n\tpublic get confirmation(): string | undefined {\n\t\treturn this._confirmation;\n\t}\n\n\tpublic get locationData(): IChatLocationData | undefined {\n\t\treturn this._locationData;\n\t}\n\n\tpublic get attachedContext(): IChatRequestVariableEntry[] | undefined {\n\t\treturn this._attachedContext;\n\t}\n\n\tconstructor(\n\t\tprivate _session: ChatModel,\n\t\tpublic readonly message: IParsedChatRequest,\n\t\tprivate _variableData: IChatRequestVariableData,\n\t\tprivate _attempt = 0,\n\t\tprivate _confirmation?: string,\n\t\tprivate _locationData?: IChatLocationData,\n\t\tprivate _attachedContext?: IChatRequestVariableEntry[],\n\t) {\n\t\tthis.id = \"request_\" + ChatRequestModel.nextId++;\n\t}\n\n\tadoptTo(session: ChatModel) {\n\t\tthis._session = session;\n\t}\n}\n\nexport class Response extends Disposable implements IResponse {\n\tprivate _onDidChangeValue = this._register(new Emitter<void>());\n\tpublic get onDidChangeValue() {\n\t\treturn this._onDidChangeValue.event;\n\t}\n\n\tprivate _responseParts: IChatProgressResponseContent[];\n\n\t/**\n\t * A stringified representation of response data which might be presented to a screenreader or used when copying a response.\n\t */\n\tprivate _responseRepr = \"\";\n\n\t/**\n\t * Just the markdown content of the response, used for determining the rendering rate of markdown\n\t */\n\tprivate _markdownContent = \"\";\n\n\tprivate _citations: IChatCodeCitation[] = [];\n\n\tget value(): IChatProgressResponseContent[] {\n\t\treturn this._responseParts;\n\t}\n\n\tconstructor(\n\t\tvalue:\n\t\t\t| IMarkdownString\n\t\t\t| ReadonlyArray<\n\t\t\t\t\t| IMarkdownString\n\t\t\t\t\t| IChatResponseProgressFileTreeData\n\t\t\t\t\t| IChatContentInlineReference\n\t\t\t\t\t| IChatAgentMarkdownContentWithVulnerability\n\t\t\t\t\t| IChatResponseCodeblockUriPart\n\t\t\t  >,\n\t) {\n\t\tsuper();\n\t\tthis._responseParts = asArray(value).map((v) =>\n\t\t\tisMarkdownString(v)\n\t\t\t\t? ({\n\t\t\t\t\t\tcontent: v,\n\t\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t\t} satisfies IChatMarkdownContent)\n\t\t\t\t: \"kind\" in v\n\t\t\t\t\t? v\n\t\t\t\t\t: { kind: \"treeData\", treeData: v },\n\t\t);\n\n\t\tthis._updateRepr(true);\n\t}\n\n\toverride toString(): string {\n\t\treturn this._responseRepr;\n\t}\n\n\ttoMarkdown(): string {\n\t\treturn this._markdownContent;\n\t}\n\n\tclear(): void {\n\t\tthis._responseParts = [];\n\t\tthis._updateRepr(true);\n\t}\n\n\tupdateContent(\n\t\tprogress: IChatProgressResponseContent | IChatTextEdit | IChatTask,\n\t\tquiet?: boolean,\n\t): void {\n\t\tif (progress.kind === \"markdownContent\") {\n\t\t\tconst responsePartLength = this._responseParts.length - 1;\n\t\t\tconst lastResponsePart = this._responseParts[responsePartLength];\n\n\t\t\tif (\n\t\t\t\t!lastResponsePart ||\n\t\t\t\tlastResponsePart.kind !== \"markdownContent\" ||\n\t\t\t\t!canMergeMarkdownStrings(\n\t\t\t\t\tlastResponsePart.content,\n\t\t\t\t\tprogress.content,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// The last part can't be merged with- not markdown, or markdown with different permissions\n\t\t\t\tthis._responseParts.push(progress);\n\t\t\t} else {\n\t\t\t\tlastResponsePart.content = appendMarkdownString(\n\t\t\t\t\tlastResponsePart.content,\n\t\t\t\t\tprogress.content,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._updateRepr(quiet);\n\t\t} else if (progress.kind === \"textEdit\") {\n\t\t\tif (progress.edits.length > 0) {\n\t\t\t\t// merge text edits for the same file no matter when they come in\n\t\t\t\tlet found = false;\n\t\t\t\tfor (let i = 0; !found && i < this._responseParts.length; i++) {\n\t\t\t\t\tconst candidate = this._responseParts[i];\n\t\t\t\t\tif (\n\t\t\t\t\t\tcandidate.kind === \"textEditGroup\" &&\n\t\t\t\t\t\tisEqual(candidate.uri, progress.uri)\n\t\t\t\t\t) {\n\t\t\t\t\t\tcandidate.edits.push(progress.edits);\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!found) {\n\t\t\t\t\tthis._responseParts.push({\n\t\t\t\t\t\tkind: \"textEditGroup\",\n\t\t\t\t\t\turi: progress.uri,\n\t\t\t\t\t\tedits: [progress.edits],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis._updateRepr(quiet);\n\t\t\t}\n\t\t} else if (progress.kind === \"progressTask\") {\n\t\t\t// Add a new resolving part\n\t\t\tconst responsePosition = this._responseParts.push(progress) - 1;\n\t\t\tthis._updateRepr(quiet);\n\n\t\t\tconst disp = progress.onDidAddProgress(() => {\n\t\t\t\tthis._updateRepr(false);\n\t\t\t});\n\n\t\t\tprogress.task?.().then((content) => {\n\t\t\t\t// Stop listening for progress updates once the task settles\n\t\t\t\tdisp.dispose();\n\n\t\t\t\t// Replace the resolving part's content with the resolved response\n\t\t\t\tif (typeof content === \"string\") {\n\t\t\t\t\t(\n\t\t\t\t\t\tthis._responseParts[responsePosition] as IChatTask\n\t\t\t\t\t).content = new MarkdownString(content);\n\t\t\t\t}\n\t\t\t\tthis._updateRepr(false);\n\t\t\t});\n\t\t} else {\n\t\t\tthis._responseParts.push(progress);\n\t\t\tthis._updateRepr(quiet);\n\t\t}\n\t}\n\n\tpublic addCitation(citation: IChatCodeCitation) {\n\t\tthis._citations.push(citation);\n\t\tthis._updateRepr();\n\t}\n\n\tprivate _updateRepr(quiet?: boolean) {\n\t\tconst inlineRefToRepr = (part: IChatContentInlineReference) =>\n\t\t\t\"uri\" in part.inlineReference\n\t\t\t\t? basename(part.inlineReference.uri)\n\t\t\t\t: \"name\" in part.inlineReference\n\t\t\t\t\t? part.inlineReference.name\n\t\t\t\t\t: basename(part.inlineReference);\n\n\t\tthis._responseRepr = this._responseParts\n\t\t\t.map((part) => {\n\t\t\t\tif (part.kind === \"treeData\") {\n\t\t\t\t\treturn \"\";\n\t\t\t\t} else if (part.kind === \"inlineReference\") {\n\t\t\t\t\treturn inlineRefToRepr(part);\n\t\t\t\t} else if (part.kind === \"command\") {\n\t\t\t\t\treturn part.command.title;\n\t\t\t\t} else if (part.kind === \"textEditGroup\") {\n\t\t\t\t\treturn localize(\"editsSummary\", \"Made changes.\");\n\t\t\t\t} else if (\n\t\t\t\t\tpart.kind === \"progressMessage\" ||\n\t\t\t\t\tpart.kind === \"codeblockUri\"\n\t\t\t\t) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t} else if (part.kind === \"confirmation\") {\n\t\t\t\t\treturn `${part.title}\\n${part.message}`;\n\t\t\t\t} else {\n\t\t\t\t\treturn part.content.value;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter((s) => s.length > 0)\n\t\t\t.join(\"\\n\\n\");\n\n\t\tthis._responseRepr += this._citations.length\n\t\t\t? \"\\n\\n\" + getCodeCitationsMessage(this._citations)\n\t\t\t: \"\";\n\n\t\tthis._markdownContent = this._responseParts\n\t\t\t.map((part) => {\n\t\t\t\tif (part.kind === \"inlineReference\") {\n\t\t\t\t\treturn inlineRefToRepr(part);\n\t\t\t\t} else if (\n\t\t\t\t\tpart.kind === \"markdownContent\" ||\n\t\t\t\t\tpart.kind === \"markdownVuln\"\n\t\t\t\t) {\n\t\t\t\t\treturn part.content.value;\n\t\t\t\t} else {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter((s) => s.length > 0)\n\t\t\t.join(\"\\n\\n\");\n\n\t\tif (!quiet) {\n\t\t\tthis._onDidChangeValue.fire();\n\t\t}\n\t}\n}\n\nexport class ChatResponseModel\n\textends Disposable\n\timplements IChatResponseModel\n{\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate static nextId = 0;\n\n\tpublic readonly id: string;\n\n\tpublic get session() {\n\t\treturn this._session;\n\t}\n\n\tpublic get isComplete(): boolean {\n\t\treturn this._isComplete;\n\t}\n\n\tpublic get isCanceled(): boolean {\n\t\treturn this._isCanceled;\n\t}\n\n\tpublic get vote(): ChatAgentVoteDirection | undefined {\n\t\treturn this._vote;\n\t}\n\n\tpublic get voteDownReason(): ChatAgentVoteDownReason | undefined {\n\t\treturn this._voteDownReason;\n\t}\n\n\tpublic get followups(): IChatFollowup[] | undefined {\n\t\treturn this._followups;\n\t}\n\n\tprivate _response: Response;\n\tpublic get response(): IResponse {\n\t\treturn this._response;\n\t}\n\n\tpublic get result(): IChatAgentResult | undefined {\n\t\treturn this._result;\n\t}\n\n\tpublic get username(): string {\n\t\treturn this.session.responderUsername;\n\t}\n\n\tpublic get avatarIcon(): ThemeIcon | URI | undefined {\n\t\treturn this.session.responderAvatarIcon;\n\t}\n\n\tprivate _followups?: IChatFollowup[];\n\n\tpublic get agent(): IChatAgentData | undefined {\n\t\treturn this._agent;\n\t}\n\n\tpublic get slashCommand(): IChatAgentCommand | undefined {\n\t\treturn this._slashCommand;\n\t}\n\n\tprivate _agentOrSlashCommandDetected: boolean | undefined;\n\tpublic get agentOrSlashCommandDetected(): boolean {\n\t\treturn this._agentOrSlashCommandDetected ?? false;\n\t}\n\n\tprivate _usedContext: IChatUsedContext | undefined;\n\tpublic get usedContext(): IChatUsedContext | undefined {\n\t\treturn this._usedContext;\n\t}\n\n\tprivate readonly _contentReferences: IChatContentReference[] = [];\n\tpublic get contentReferences(): ReadonlyArray<IChatContentReference> {\n\t\treturn this._contentReferences;\n\t}\n\n\tprivate readonly _codeCitations: IChatCodeCitation[] = [];\n\tpublic get codeCitations(): ReadonlyArray<IChatCodeCitation> {\n\t\treturn this._codeCitations;\n\t}\n\n\tprivate readonly _progressMessages: IChatProgressMessage[] = [];\n\tpublic get progressMessages(): ReadonlyArray<IChatProgressMessage> {\n\t\treturn this._progressMessages;\n\t}\n\n\tprivate _isStale = false;\n\tpublic get isStale(): boolean {\n\t\treturn this._isStale;\n\t}\n\n\tconstructor(\n\t\t_response:\n\t\t\t| IMarkdownString\n\t\t\t| ReadonlyArray<\n\t\t\t\t\t| IMarkdownString\n\t\t\t\t\t| IChatResponseProgressFileTreeData\n\t\t\t\t\t| IChatContentInlineReference\n\t\t\t\t\t| IChatAgentMarkdownContentWithVulnerability\n\t\t\t\t\t| IChatResponseCodeblockUriPart\n\t\t\t  >,\n\t\tprivate _session: ChatModel,\n\t\tprivate _agent: IChatAgentData | undefined,\n\t\tprivate _slashCommand: IChatAgentCommand | undefined,\n\t\tpublic readonly requestId: string,\n\t\tprivate _isComplete = false,\n\t\tprivate _isCanceled = false,\n\t\tprivate _vote?: ChatAgentVoteDirection,\n\t\tprivate _voteDownReason?: ChatAgentVoteDownReason,\n\t\tprivate _result?: IChatAgentResult,\n\t\tfollowups?: ReadonlyArray<IChatFollowup>,\n\t) {\n\t\tsuper();\n\n\t\t// If we are creating a response with some existing content, consider it stale\n\t\tthis._isStale =\n\t\t\tArray.isArray(_response) &&\n\t\t\t(_response.length !== 0 ||\n\t\t\t\t(isMarkdownString(_response) && _response.value.length !== 0));\n\n\t\tthis._followups = followups ? [...followups] : undefined;\n\t\tthis._response = this._register(new Response(_response));\n\t\tthis._register(\n\t\t\tthis._response.onDidChangeValue(() => this._onDidChange.fire()),\n\t\t);\n\t\tthis.id = \"response_\" + ChatResponseModel.nextId++;\n\t}\n\n\t/**\n\t * Apply a progress update to the actual response content.\n\t */\n\tupdateContent(\n\t\tresponsePart: IChatProgressResponseContent | IChatTextEdit,\n\t\tquiet?: boolean,\n\t) {\n\t\tthis._response.updateContent(responsePart, quiet);\n\t}\n\n\t/**\n\t * Apply one of the progress updates that are not part of the actual response content.\n\t */\n\tapplyReference(progress: IChatUsedContext | IChatContentReference) {\n\t\tif (progress.kind === \"usedContext\") {\n\t\t\tthis._usedContext = progress;\n\t\t} else if (progress.kind === \"reference\") {\n\t\t\tthis._contentReferences.push(progress);\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n\n\tapplyCodeCitation(progress: IChatCodeCitation) {\n\t\tthis._codeCitations.push(progress);\n\t\tthis._response.addCitation(progress);\n\t\tthis._onDidChange.fire();\n\t}\n\n\tsetAgent(agent: IChatAgentData, slashCommand?: IChatAgentCommand) {\n\t\tthis._agent = agent;\n\t\tthis._slashCommand = slashCommand;\n\t\tthis._agentOrSlashCommandDetected = true;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tsetResult(result: IChatAgentResult): void {\n\t\tthis._result = result;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tcomplete(): void {\n\t\tif (this._result?.errorDetails?.responseIsRedacted) {\n\t\t\tthis._response.clear();\n\t\t}\n\n\t\tthis._isComplete = true;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tcancel(): void {\n\t\tthis._isComplete = true;\n\t\tthis._isCanceled = true;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tsetFollowups(followups: IChatFollowup[] | undefined): void {\n\t\tthis._followups = followups;\n\t\tthis._onDidChange.fire(); // Fire so that command followups get rendered on the row\n\t}\n\n\tsetVote(vote: ChatAgentVoteDirection): void {\n\t\tthis._vote = vote;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tsetVoteDownReason(reason: ChatAgentVoteDownReason | undefined): void {\n\t\tthis._voteDownReason = reason;\n\t\tthis._onDidChange.fire();\n\t}\n\n\tsetEditApplied(edit: IChatTextEditGroup, editCount: number): boolean {\n\t\tif (!this.response.value.includes(edit)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!edit.state) {\n\t\t\treturn false;\n\t\t}\n\t\tedit.state.applied = editCount; // must not be edit.edits.length\n\t\tthis._onDidChange.fire();\n\t\treturn true;\n\t}\n\n\tadoptTo(session: ChatModel) {\n\t\tthis._session = session;\n\t\tthis._onDidChange.fire();\n\t}\n}\n\nexport interface IChatModel {\n\treadonly onDidDispose: Event<void>;\n\treadonly onDidChange: Event<IChatChangeEvent>;\n\treadonly sessionId: string;\n\treadonly initState: ChatModelInitState;\n\treadonly initialLocation: ChatAgentLocation;\n\treadonly title: string;\n\treadonly welcomeMessage: IChatWelcomeMessageModel | undefined;\n\treadonly requestInProgress: boolean;\n\treadonly inputPlaceholder?: string;\n\tgetRequests(): IChatRequestModel[];\n\ttoExport(): IExportableChatData;\n\ttoJSON(): ISerializableChatData;\n}\n\nexport interface ISerializableChatsData {\n\t[sessionId: string]: ISerializableChatData;\n}\n\nexport type ISerializableChatAgentData = UriDto<IChatAgentData>;\n\nexport interface ISerializableChatRequestData {\n\tmessage: string | IParsedChatRequest; // string => old format\n\t/** Is really like \"prompt data\". This is the message in the format in which the agent gets it + variable values. */\n\tvariableData: IChatRequestVariableData;\n\tresponse:\n\t\t| ReadonlyArray<\n\t\t\t\t| IMarkdownString\n\t\t\t\t| IChatResponseProgressFileTreeData\n\t\t\t\t| IChatContentInlineReference\n\t\t\t\t| IChatAgentMarkdownContentWithVulnerability\n\t\t  >\n\t\t| undefined;\n\tagent?: ISerializableChatAgentData;\n\tslashCommand?: IChatAgentCommand;\n\t// responseErrorDetails: IChatResponseErrorDetails | undefined;\n\tresult?: IChatAgentResult; // Optional for backcompat\n\tfollowups: ReadonlyArray<IChatFollowup> | undefined;\n\tisCanceled: boolean | undefined;\n\tvote: ChatAgentVoteDirection | undefined;\n\tvoteDownReason?: ChatAgentVoteDownReason;\n\t/** For backward compat: should be optional */\n\tusedContext?: IChatUsedContext;\n\tcontentReferences?: ReadonlyArray<IChatContentReference>;\n\tcodeCitations?: ReadonlyArray<IChatCodeCitation>;\n}\n\nexport interface IExportableChatData {\n\tinitialLocation: ChatAgentLocation | undefined;\n\twelcomeMessage: (string | IChatFollowup[])[] | undefined;\n\trequests: ISerializableChatRequestData[];\n\trequesterUsername: string;\n\tresponderUsername: string;\n\trequesterAvatarIconUri: UriComponents | undefined;\n\tresponderAvatarIconUri: ThemeIcon | UriComponents | undefined; // Keeping Uri name for backcompat\n}\n\n/*\n\tNOTE: every time the serialized data format is updated, we need to create a new interface, because we may need to handle any old data format when parsing.\n*/\n\nexport interface ISerializableChatData1 extends IExportableChatData {\n\tsessionId: string;\n\tcreationDate: number;\n\tisImported: boolean;\n\n\t/** Indicates that this session was created in this window. Is cleared after the chat has been written to storage once. Needed to sync chat creations/deletions between empty windows. */\n\tisNew?: boolean;\n}\n\nexport interface ISerializableChatData2 extends ISerializableChatData1 {\n\tversion: 2;\n\tlastMessageDate: number;\n\tcomputedTitle: string | undefined;\n}\n\nexport interface ISerializableChatData3\n\textends Omit<ISerializableChatData2, \"version\" | \"computedTitle\"> {\n\tversion: 3;\n\tcustomTitle: string | undefined;\n}\n\n/**\n * Chat data that has been parsed and normalized to the current format.\n */\nexport type ISerializableChatData = ISerializableChatData3;\n\n/**\n * Chat data that has been loaded but not normalized, and could be any format\n */\nexport type ISerializableChatDataIn =\n\t| ISerializableChatData1\n\t| ISerializableChatData2\n\t| ISerializableChatData3;\n\n/**\n * Normalize chat data from storage to the current format.\n * TODO- ChatModel#_deserialize and reviveSerializedAgent also still do some normalization and maybe that should be done in here too.\n */\nexport function normalizeSerializableChatData(\n\traw: ISerializableChatDataIn,\n): ISerializableChatData {\n\tnormalizeOldFields(raw);\n\n\tif (!(\"version\" in raw)) {\n\t\treturn {\n\t\t\tversion: 3,\n\t\t\t...raw,\n\t\t\tlastMessageDate: raw.creationDate,\n\t\t\tcustomTitle: undefined,\n\t\t};\n\t}\n\n\tif (raw.version === 2) {\n\t\treturn {\n\t\t\t...raw,\n\t\t\tversion: 3,\n\t\t\tcustomTitle: raw.computedTitle,\n\t\t};\n\t}\n\n\treturn raw;\n}\n\nfunction normalizeOldFields(raw: ISerializableChatDataIn): void {\n\t// Fill in fields that very old chat data may be missing\n\tif (!raw.sessionId) {\n\t\traw.sessionId = generateUuid();\n\t}\n\n\tif (!raw.creationDate) {\n\t\traw.creationDate = getLastYearDate();\n\t}\n\n\tif (\"version\" in raw && (raw.version === 2 || raw.version === 3)) {\n\t\tif (!raw.lastMessageDate) {\n\t\t\t// A bug led to not porting creationDate properly, and that was copied to lastMessageDate, so fix that up if missing.\n\t\t\traw.lastMessageDate = getLastYearDate();\n\t\t}\n\t}\n}\n\nfunction getLastYearDate(): number {\n\tconst lastYearDate = new Date();\n\tlastYearDate.setFullYear(lastYearDate.getFullYear() - 1);\n\treturn lastYearDate.getTime();\n}\n\nexport function isExportableSessionData(\n\tobj: unknown,\n): obj is IExportableChatData {\n\tconst data = obj as IExportableChatData;\n\treturn (\n\t\ttypeof data === \"object\" && typeof data.requesterUsername === \"string\"\n\t);\n}\n\nexport function isSerializableSessionData(\n\tobj: unknown,\n): obj is ISerializableChatData {\n\tconst data = obj as ISerializableChatData;\n\treturn (\n\t\tisExportableSessionData(obj) &&\n\t\ttypeof data.creationDate === \"number\" &&\n\t\ttypeof data.sessionId === \"string\" &&\n\t\tobj.requests.every(\n\t\t\t(request: ISerializableChatRequestData) =>\n\t\t\t\t!request.usedContext /* for backward compat allow missing usedContext */ ||\n\t\t\t\tisIUsedContext(request.usedContext),\n\t\t)\n\t);\n}\n\nexport type IChatChangeEvent =\n\t| IChatInitEvent\n\t| IChatAddRequestEvent\n\t| IChatChangedRequestEvent\n\t| IChatRemoveRequestEvent\n\t| IChatAddResponseEvent\n\t| IChatSetAgentEvent\n\t| IChatMoveEvent;\n\nexport interface IChatAddRequestEvent {\n\tkind: \"addRequest\";\n\trequest: IChatRequestModel;\n}\n\nexport interface IChatChangedRequestEvent {\n\tkind: \"changedRequest\";\n\trequest: IChatRequestModel;\n}\n\nexport interface IChatAddResponseEvent {\n\tkind: \"addResponse\";\n\tresponse: IChatResponseModel;\n}\n\nexport enum ChatRequestRemovalReason {\n\t/**\n\t * \"Normal\" remove\n\t */\n\tRemoval = 0,\n\n\t/**\n\t * Removed because the request will be resent\n\t */\n\tResend = 1,\n\n\t/**\n\t * Remove because the request is moving to another model\n\t */\n\tAdoption = 2,\n}\n\nexport interface IChatRemoveRequestEvent {\n\tkind: \"removeRequest\";\n\trequestId: string;\n\tresponseId?: string;\n\treason: ChatRequestRemovalReason;\n}\n\nexport interface IChatMoveEvent {\n\tkind: \"move\";\n\ttarget: URI;\n\trange: IRange;\n}\n\nexport interface IChatSetAgentEvent {\n\tkind: \"setAgent\";\n\tagent: IChatAgentData;\n\tcommand?: IChatAgentCommand;\n}\n\nexport interface IChatInitEvent {\n\tkind: \"initialize\";\n}\n\nexport enum ChatModelInitState {\n\tCreated = 0,\n\tInitializing = 1,\n\tInitialized = 2,\n}\n\nexport class ChatModel extends Disposable implements IChatModel {\n\tstatic getDefaultTitle(\n\t\trequests: (ISerializableChatRequestData | IChatRequestModel)[],\n\t): string {\n\t\tconst firstRequestMessage = requests.at(0)?.message ?? \"\";\n\t\tconst message =\n\t\t\ttypeof firstRequestMessage === \"string\"\n\t\t\t\t? firstRequestMessage\n\t\t\t\t: firstRequestMessage.text;\n\t\treturn message.split(\"\\n\")[0].substring(0, 50);\n\t}\n\n\tprivate readonly _onDidDispose = this._register(new Emitter<void>());\n\treadonly onDidDispose = this._onDidDispose.event;\n\n\tprivate readonly _onDidChange = this._register(\n\t\tnew Emitter<IChatChangeEvent>(),\n\t);\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _requests: ChatRequestModel[];\n\tprivate _initState: ChatModelInitState = ChatModelInitState.Created;\n\tprivate _isInitializedDeferred = new DeferredPromise<void>();\n\n\tprivate _welcomeMessage: ChatWelcomeMessageModel | undefined;\n\tget welcomeMessage(): ChatWelcomeMessageModel | undefined {\n\t\treturn this._welcomeMessage;\n\t}\n\n\t// TODO to be clear, this is not the same as the id from the session object, which belongs to the provider.\n\t// It's easier to be able to identify this model before its async initialization is complete\n\tprivate _sessionId: string;\n\tget sessionId(): string {\n\t\treturn this._sessionId;\n\t}\n\n\tget requestInProgress(): boolean {\n\t\tconst lastRequest = this.lastRequest;\n\t\treturn !!lastRequest?.response && !lastRequest.response.isComplete;\n\t}\n\n\tget hasRequests(): boolean {\n\t\treturn this._requests.length > 0;\n\t}\n\n\tget lastRequest(): ChatRequestModel | undefined {\n\t\treturn this._requests.at(-1);\n\t}\n\n\tprivate _creationDate: number;\n\tget creationDate(): number {\n\t\treturn this._creationDate;\n\t}\n\n\tprivate _lastMessageDate: number;\n\tget lastMessageDate(): number {\n\t\treturn this._lastMessageDate;\n\t}\n\n\tprivate get _defaultAgent() {\n\t\treturn this.chatAgentService.getDefaultAgent(ChatAgentLocation.Panel);\n\t}\n\n\tget requesterUsername(): string {\n\t\treturn (\n\t\t\tthis._defaultAgent?.metadata.requester?.name ??\n\t\t\tthis.initialData?.requesterUsername ??\n\t\t\t\"\"\n\t\t);\n\t}\n\n\tget responderUsername(): string {\n\t\treturn (\n\t\t\tthis._defaultAgent?.fullName ??\n\t\t\tthis.initialData?.responderUsername ??\n\t\t\t\"\"\n\t\t);\n\t}\n\n\tprivate readonly _initialRequesterAvatarIconUri: URI | undefined;\n\tget requesterAvatarIconUri(): URI | undefined {\n\t\treturn (\n\t\t\tthis._defaultAgent?.metadata.requester?.icon ??\n\t\t\tthis._initialRequesterAvatarIconUri\n\t\t);\n\t}\n\n\tprivate readonly _initialResponderAvatarIconUri:\n\t\t| ThemeIcon\n\t\t| URI\n\t\t| undefined;\n\tget responderAvatarIcon(): ThemeIcon | URI | undefined {\n\t\treturn (\n\t\t\tthis._defaultAgent?.metadata.themeIcon ??\n\t\t\tthis._initialResponderAvatarIconUri\n\t\t);\n\t}\n\n\tget initState(): ChatModelInitState {\n\t\treturn this._initState;\n\t}\n\n\tprivate _isImported = false;\n\tget isImported(): boolean {\n\t\treturn this._isImported;\n\t}\n\n\tprivate _customTitle: string | undefined;\n\tget customTitle(): string | undefined {\n\t\treturn this._customTitle;\n\t}\n\n\tget title(): string {\n\t\treturn this._customTitle || ChatModel.getDefaultTitle(this._requests);\n\t}\n\n\tget initialLocation() {\n\t\treturn this._initialLocation;\n\t}\n\n\tconstructor(\n\t\tprivate readonly initialData: ISerializableChatData | IExportableChatData | undefined,\n\t\tprivate readonly _initialLocation: ChatAgentLocation,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._isImported = (!!initialData && !isSerializableSessionData(initialData)) || (initialData?.isImported ?? false);\n\t\tthis._sessionId = (isSerializableSessionData(initialData) && initialData.sessionId) || generateUuid();\n\t\tthis._requests = initialData ? this._deserialize(initialData) : [];\n\t\tthis._creationDate = (isSerializableSessionData(initialData) && initialData.creationDate) || Date.now();\n\t\tthis._lastMessageDate = (isSerializableSessionData(initialData) && initialData.lastMessageDate) || this._creationDate;\n\t\tthis._customTitle = isSerializableSessionData(initialData) ? initialData.customTitle : undefined;\n\n\t\tthis._initialRequesterAvatarIconUri = initialData?.requesterAvatarIconUri && URI.revive(initialData.requesterAvatarIconUri);\n\t\tthis._initialResponderAvatarIconUri = isUriComponents(initialData?.responderAvatarIconUri) ? URI.revive(initialData.responderAvatarIconUri) : initialData?.responderAvatarIconUri;\n\t}\n\n\tprivate _deserialize(obj: IExportableChatData): ChatRequestModel[] {\n\t\tconst requests = obj.requests;\n\t\tif (!Array.isArray(requests)) {\n\t\t\tthis.logService.error(\n\t\t\t\t`Ignoring malformed session data: ${JSON.stringify(obj)}`,\n\t\t\t);\n\t\t\treturn [];\n\t\t}\n\n\t\tif (obj.welcomeMessage) {\n\t\t\tconst content = obj.welcomeMessage.map((item) =>\n\t\t\t\ttypeof item === \"string\" ? new MarkdownString(item) : item,\n\t\t\t);\n\t\t\tthis._welcomeMessage = this.instantiationService.createInstance(\n\t\t\t\tChatWelcomeMessageModel,\n\t\t\t\tcontent,\n\t\t\t\t[],\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\treturn requests.map((raw: ISerializableChatRequestData) => {\n\t\t\t\tconst parsedRequest =\n\t\t\t\t\ttypeof raw.message === \"string\"\n\t\t\t\t\t\t? this.getParsedRequestFromString(raw.message)\n\t\t\t\t\t\t: reviveParsedChatRequest(raw.message);\n\n\t\t\t\t// Old messages don't have variableData, or have it in the wrong (non-array) shape\n\t\t\t\tconst variableData: IChatRequestVariableData =\n\t\t\t\t\tthis.reviveVariableData(raw.variableData);\n\t\t\t\tconst request = new ChatRequestModel(\n\t\t\t\t\tthis,\n\t\t\t\t\tparsedRequest,\n\t\t\t\t\tvariableData,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\traw.response ||\n\t\t\t\t\traw.result ||\n\t\t\t\t\t(raw as any).responseErrorDetails\n\t\t\t\t) {\n\t\t\t\t\tconst agent =\n\t\t\t\t\t\traw.agent && \"metadata\" in raw.agent\n\t\t\t\t\t\t\t? // Check for the new format, ignore entries in the old format\n\t\t\t\t\t\t\t\treviveSerializedAgent(raw.agent)\n\t\t\t\t\t\t\t: undefined;\n\n\t\t\t\t\t// Port entries from old format\n\t\t\t\t\tconst result =\n\t\t\t\t\t\t\"responseErrorDetails\" in raw\n\t\t\t\t\t\t\t? // eslint-disable-next-line local/code-no-dangerous-type-assertions\n\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\terrorDetails: raw.responseErrorDetails,\n\t\t\t\t\t\t\t\t} as IChatAgentResult)\n\t\t\t\t\t\t\t: raw.result;\n\t\t\t\t\trequest.response = new ChatResponseModel(\n\t\t\t\t\t\traw.response ?? [new MarkdownString(raw.response)],\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tagent,\n\t\t\t\t\t\traw.slashCommand,\n\t\t\t\t\t\trequest.id,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\traw.isCanceled,\n\t\t\t\t\t\traw.vote,\n\t\t\t\t\t\traw.voteDownReason,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\traw.followups,\n\t\t\t\t\t);\n\t\t\t\t\tif (raw.usedContext) {\n\t\t\t\t\t\t// @ulugbekna: if this's a new vscode sessions, doc versions are incorrect anyway?\n\t\t\t\t\t\trequest.response.applyReference(\n\t\t\t\t\t\t\trevive(raw.usedContext),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\traw.contentReferences?.forEach((r) =>\n\t\t\t\t\t\trequest.response!.applyReference(revive(r)),\n\t\t\t\t\t);\n\t\t\t\t\traw.codeCitations?.forEach((c) =>\n\t\t\t\t\t\trequest.response!.applyCodeCitation(revive(c)),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn request;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\"Failed to parse chat data\", error);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tprivate reviveVariableData(\n\t\traw: IChatRequestVariableData,\n\t): IChatRequestVariableData {\n\t\tconst variableData =\n\t\t\traw && Array.isArray(raw.variables) ? raw : { variables: [] };\n\n\t\tvariableData.variables =\n\t\t\tvariableData.variables.map<IChatRequestVariableEntry>(\n\t\t\t\t(v): IChatRequestVariableEntry => {\n\t\t\t\t\t// Old variables format\n\t\t\t\t\tif (v && \"values\" in v && Array.isArray(v.values)) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: v.id ?? \"\",\n\t\t\t\t\t\t\tname: v.name,\n\t\t\t\t\t\t\tvalue: v.values[0]?.value,\n\t\t\t\t\t\t\trange: v.range,\n\t\t\t\t\t\t\tmodelDescription: v.modelDescription,\n\t\t\t\t\t\t\treferences: v.references,\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn variableData;\n\t}\n\n\tprivate getParsedRequestFromString(message: string): IParsedChatRequest {\n\t\t// TODO These offsets won't be used, but chat replies need to go through the parser as well\n\t\tconst parts = [\n\t\t\tnew ChatRequestTextPart(\n\t\t\t\tnew OffsetRange(0, message.length),\n\t\t\t\t{\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tendColumn: 1,\n\t\t\t\t\tendLineNumber: 1,\n\t\t\t\t},\n\t\t\t\tmessage,\n\t\t\t),\n\t\t];\n\t\treturn {\n\t\t\ttext: message,\n\t\t\tparts,\n\t\t};\n\t}\n\n\tstartInitialize(): void {\n\t\tif (this.initState !== ChatModelInitState.Created) {\n\t\t\tthrow new Error(\n\t\t\t\t`ChatModel is in the wrong state for startInitialize: ${ChatModelInitState[this.initState]}`,\n\t\t\t);\n\t\t}\n\t\tthis._initState = ChatModelInitState.Initializing;\n\t}\n\n\tdeinitialize(): void {\n\t\tthis._initState = ChatModelInitState.Created;\n\t\tthis._isInitializedDeferred = new DeferredPromise<void>();\n\t}\n\n\tinitialize(welcomeMessage: ChatWelcomeMessageModel | undefined): void {\n\t\tif (this.initState !== ChatModelInitState.Initializing) {\n\t\t\t// Must call startInitialize before initialize, and only call it once\n\t\t\tthrow new Error(\n\t\t\t\t`ChatModel is in the wrong state for initialize: ${ChatModelInitState[this.initState]}`,\n\t\t\t);\n\t\t}\n\n\t\tthis._initState = ChatModelInitState.Initialized;\n\t\tif (!this._welcomeMessage) {\n\t\t\t// Could also have loaded the welcome message from persisted data\n\t\t\tthis._welcomeMessage = welcomeMessage;\n\t\t}\n\n\t\tthis._isInitializedDeferred.complete();\n\t\tthis._onDidChange.fire({ kind: \"initialize\" });\n\t}\n\n\tsetInitializationError(error: Error): void {\n\t\tif (this.initState !== ChatModelInitState.Initializing) {\n\t\t\tthrow new Error(\n\t\t\t\t`ChatModel is in the wrong state for setInitializationError: ${ChatModelInitState[this.initState]}`,\n\t\t\t);\n\t\t}\n\n\t\tif (!this._isInitializedDeferred.isSettled) {\n\t\t\tthis._isInitializedDeferred.error(error);\n\t\t}\n\t}\n\n\twaitForInitialization(): Promise<void> {\n\t\treturn this._isInitializedDeferred.p;\n\t}\n\n\tgetRequests(): ChatRequestModel[] {\n\t\treturn this._requests;\n\t}\n\n\taddRequest(\n\t\tmessage: IParsedChatRequest,\n\t\tvariableData: IChatRequestVariableData,\n\t\tattempt: number,\n\t\tchatAgent?: IChatAgentData,\n\t\tslashCommand?: IChatAgentCommand,\n\t\tconfirmation?: string,\n\t\tlocationData?: IChatLocationData,\n\t\tattachments?: IChatRequestVariableEntry[],\n\t): ChatRequestModel {\n\t\tconst request = new ChatRequestModel(\n\t\t\tthis,\n\t\t\tmessage,\n\t\t\tvariableData,\n\t\t\tattempt,\n\t\t\tconfirmation,\n\t\t\tlocationData,\n\t\t\tattachments,\n\t\t);\n\t\trequest.response = new ChatResponseModel(\n\t\t\t[],\n\t\t\tthis,\n\t\t\tchatAgent,\n\t\t\tslashCommand,\n\t\t\trequest.id,\n\t\t);\n\n\t\tthis._requests.push(request);\n\t\tthis._lastMessageDate = Date.now();\n\t\tthis._onDidChange.fire({ kind: \"addRequest\", request });\n\t\treturn request;\n\t}\n\n\tsetCustomTitle(title: string): void {\n\t\tthis._customTitle = title;\n\t}\n\n\tupdateRequest(\n\t\trequest: ChatRequestModel,\n\t\tvariableData: IChatRequestVariableData,\n\t) {\n\t\trequest.variableData = variableData;\n\t\tthis._onDidChange.fire({ kind: \"changedRequest\", request });\n\t}\n\n\tadoptRequest(request: ChatRequestModel): void {\n\t\t// this doesn't use `removeRequest` because it must not dispose the request object\n\t\tconst oldOwner = request.session;\n\t\tconst index = oldOwner._requests.findIndex(\n\t\t\t(candidate) => candidate.id === request.id,\n\t\t);\n\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\toldOwner._requests.splice(index, 1);\n\n\t\trequest.adoptTo(this);\n\t\trequest.response?.adoptTo(this);\n\t\tthis._requests.push(request);\n\n\t\toldOwner._onDidChange.fire({\n\t\t\tkind: \"removeRequest\",\n\t\t\trequestId: request.id,\n\t\t\tresponseId: request.response?.id,\n\t\t\treason: ChatRequestRemovalReason.Adoption,\n\t\t});\n\t\tthis._onDidChange.fire({ kind: \"addRequest\", request });\n\t}\n\n\tacceptResponseProgress(\n\t\trequest: ChatRequestModel,\n\t\tprogress: IChatProgress,\n\t\tquiet?: boolean,\n\t): void {\n\t\tif (!request.response) {\n\t\t\trequest.response = new ChatResponseModel(\n\t\t\t\t[],\n\t\t\t\tthis,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\trequest.id,\n\t\t\t);\n\t\t}\n\n\t\tif (request.response.isComplete) {\n\t\t\tthrow new Error(\n\t\t\t\t\"acceptResponseProgress: Adding progress to a completed response\",\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tprogress.kind === \"markdownContent\" ||\n\t\t\tprogress.kind === \"treeData\" ||\n\t\t\tprogress.kind === \"inlineReference\" ||\n\t\t\tprogress.kind === \"codeblockUri\" ||\n\t\t\tprogress.kind === \"markdownVuln\" ||\n\t\t\tprogress.kind === \"progressMessage\" ||\n\t\t\tprogress.kind === \"command\" ||\n\t\t\tprogress.kind === \"textEdit\" ||\n\t\t\tprogress.kind === \"warning\" ||\n\t\t\tprogress.kind === \"progressTask\" ||\n\t\t\tprogress.kind === \"confirmation\"\n\t\t) {\n\t\t\trequest.response.updateContent(progress, quiet);\n\t\t} else if (\n\t\t\tprogress.kind === \"usedContext\" ||\n\t\t\tprogress.kind === \"reference\"\n\t\t) {\n\t\t\trequest.response.applyReference(progress);\n\t\t} else if (progress.kind === \"agentDetection\") {\n\t\t\tconst agent = this.chatAgentService.getAgent(progress.agentId);\n\t\t\tif (agent) {\n\t\t\t\trequest.response.setAgent(agent, progress.command);\n\t\t\t\tthis._onDidChange.fire({\n\t\t\t\t\tkind: \"setAgent\",\n\t\t\t\t\tagent,\n\t\t\t\t\tcommand: progress.command,\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (progress.kind === \"codeCitation\") {\n\t\t\trequest.response.applyCodeCitation(progress);\n\t\t} else if (progress.kind === \"move\") {\n\t\t\tthis._onDidChange.fire({\n\t\t\t\tkind: \"move\",\n\t\t\t\ttarget: progress.uri,\n\t\t\t\trange: progress.range,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.logService.error(\n\t\t\t\t`Couldn't handle progress: ${JSON.stringify(progress)}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tremoveRequest(\n\t\tid: string,\n\t\treason: ChatRequestRemovalReason = ChatRequestRemovalReason.Removal,\n\t): void {\n\t\tconst index = this._requests.findIndex((request) => request.id === id);\n\t\tconst request = this._requests[index];\n\n\t\tif (index !== -1) {\n\t\t\tthis._onDidChange.fire({\n\t\t\t\tkind: \"removeRequest\",\n\t\t\t\trequestId: request.id,\n\t\t\t\tresponseId: request.response?.id,\n\t\t\t\treason,\n\t\t\t});\n\t\t\tthis._requests.splice(index, 1);\n\t\t\trequest.response?.dispose();\n\t\t}\n\t}\n\n\tcancelRequest(request: ChatRequestModel): void {\n\t\tif (request.response) {\n\t\t\trequest.response.cancel();\n\t\t}\n\t}\n\n\tsetResponse(request: ChatRequestModel, result: IChatAgentResult): void {\n\t\tif (!request.response) {\n\t\t\trequest.response = new ChatResponseModel(\n\t\t\t\t[],\n\t\t\t\tthis,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\trequest.id,\n\t\t\t);\n\t\t}\n\n\t\trequest.response.setResult(result);\n\t}\n\n\tcompleteResponse(request: ChatRequestModel): void {\n\t\tif (!request.response) {\n\t\t\tthrow new Error(\"Call setResponse before completeResponse\");\n\t\t}\n\n\t\trequest.response.complete();\n\t}\n\n\tsetFollowups(\n\t\trequest: ChatRequestModel,\n\t\tfollowups: IChatFollowup[] | undefined,\n\t): void {\n\t\tif (!request.response) {\n\t\t\t// Maybe something went wrong?\n\t\t\treturn;\n\t\t}\n\n\t\trequest.response.setFollowups(followups);\n\t}\n\n\tsetResponseModel(\n\t\trequest: ChatRequestModel,\n\t\tresponse: ChatResponseModel,\n\t): void {\n\t\trequest.response = response;\n\t\tthis._onDidChange.fire({ kind: \"addResponse\", response });\n\t}\n\n\ttoExport(): IExportableChatData {\n\t\treturn {\n\t\t\trequesterUsername: this.requesterUsername,\n\t\t\trequesterAvatarIconUri: this.requesterAvatarIconUri,\n\t\t\tresponderUsername: this.responderUsername,\n\t\t\tresponderAvatarIconUri: this.responderAvatarIcon,\n\t\t\tinitialLocation: this.initialLocation,\n\t\t\twelcomeMessage: this._welcomeMessage?.content.map((c) => {\n\t\t\t\tif (Array.isArray(c)) {\n\t\t\t\t\treturn c;\n\t\t\t\t} else {\n\t\t\t\t\treturn c.value;\n\t\t\t\t}\n\t\t\t}),\n\t\t\trequests: this._requests.map((r): ISerializableChatRequestData => {\n\t\t\t\tconst message = {\n\t\t\t\t\t...r.message,\n\t\t\t\t\tparts: r.message.parts.map((p) =>\n\t\t\t\t\t\tp && \"toJSON\" in p ? (p.toJSON as Function)() : p,\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t\tconst agent = r.response?.agent;\n\t\t\t\tconst agentJson =\n\t\t\t\t\tagent && \"toJSON\" in agent\n\t\t\t\t\t\t? (agent.toJSON as Function)()\n\t\t\t\t\t\t: agent\n\t\t\t\t\t\t\t? { ...agent }\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\treturn {\n\t\t\t\t\tmessage,\n\t\t\t\t\tvariableData: r.variableData,\n\t\t\t\t\tresponse: r.response\n\t\t\t\t\t\t? r.response.response.value.map((item) => {\n\t\t\t\t\t\t\t\t// Keeping the shape of the persisted data the same for back compat\n\t\t\t\t\t\t\t\tif (item.kind === \"treeData\") {\n\t\t\t\t\t\t\t\t\treturn item.treeData;\n\t\t\t\t\t\t\t\t} else if (item.kind === \"markdownContent\") {\n\t\t\t\t\t\t\t\t\treturn item.content;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn item as any; // TODO\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tresult: r.response?.result,\n\t\t\t\t\tfollowups: r.response?.followups,\n\t\t\t\t\tisCanceled: r.response?.isCanceled,\n\t\t\t\t\tvote: r.response?.vote,\n\t\t\t\t\tvoteDownReason: r.response?.voteDownReason,\n\t\t\t\t\tagent: agentJson,\n\t\t\t\t\tslashCommand: r.response?.slashCommand,\n\t\t\t\t\tusedContext: r.response?.usedContext,\n\t\t\t\t\tcontentReferences: r.response?.contentReferences,\n\t\t\t\t\tcodeCitations: r.response?.codeCitations,\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\ttoJSON(): ISerializableChatData {\n\t\treturn {\n\t\t\tversion: 3,\n\t\t\t...this.toExport(),\n\t\t\tsessionId: this.sessionId,\n\t\t\tcreationDate: this._creationDate,\n\t\t\tisImported: this._isImported,\n\t\t\tlastMessageDate: this._lastMessageDate,\n\t\t\tcustomTitle: this._customTitle,\n\t\t};\n\t}\n\n\toverride dispose() {\n\t\tthis._requests.forEach((r) => r.response?.dispose());\n\t\tthis._onDidDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport type IChatWelcomeMessageContent = IMarkdownString | IChatFollowup[];\n\nexport interface IChatWelcomeMessageModel {\n\treadonly id: string;\n\treadonly content: IChatWelcomeMessageContent[];\n\treadonly sampleQuestions: IChatFollowup[];\n\treadonly username: string;\n\treadonly avatarIcon?: ThemeIcon;\n}\n\nexport class ChatWelcomeMessageModel implements IChatWelcomeMessageModel {\n\tprivate static nextId = 0;\n\n\tprivate _id: string;\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tconstructor(\n\t\tpublic readonly content: IChatWelcomeMessageContent[],\n\t\tpublic readonly sampleQuestions: IChatFollowup[],\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t) {\n\t\tthis._id = 'welcome_' + ChatWelcomeMessageModel.nextId++;\n\t}\n\n\tpublic get username(): string {\n\t\treturn (\n\t\t\tthis.chatAgentService.getContributedDefaultAgent(\n\t\t\t\tChatAgentLocation.Panel,\n\t\t\t)?.fullName ?? \"\"\n\t\t);\n\t}\n\n\tpublic get avatarIcon(): ThemeIcon | undefined {\n\t\treturn this.chatAgentService.getDefaultAgent(ChatAgentLocation.Panel)\n\t\t\t?.metadata.themeIcon;\n\t}\n}\n\nexport function updateRanges(\n\tvariableData: IChatRequestVariableData,\n\tdiff: number,\n): IChatRequestVariableData {\n\treturn {\n\t\tvariables: variableData.variables.map((v) => ({\n\t\t\t...v,\n\t\t\trange: v.range && {\n\t\t\t\tstart: v.range.start - diff,\n\t\t\t\tendExclusive: v.range.endExclusive - diff,\n\t\t\t},\n\t\t})),\n\t};\n}\n\nexport function canMergeMarkdownStrings(\n\tmd1: IMarkdownString,\n\tmd2: IMarkdownString,\n): boolean {\n\tif (md1.baseUri && md2.baseUri) {\n\t\tconst baseUriEquals =\n\t\t\tmd1.baseUri.scheme === md2.baseUri.scheme &&\n\t\t\tmd1.baseUri.authority === md2.baseUri.authority &&\n\t\t\tmd1.baseUri.path === md2.baseUri.path &&\n\t\t\tmd1.baseUri.query === md2.baseUri.query &&\n\t\t\tmd1.baseUri.fragment === md2.baseUri.fragment;\n\t\tif (!baseUriEquals) {\n\t\t\treturn false;\n\t\t}\n\t} else if (md1.baseUri || md2.baseUri) {\n\t\treturn false;\n\t}\n\n\treturn (\n\t\tequals(md1.isTrusted, md2.isTrusted) &&\n\t\tmd1.supportHtml === md2.supportHtml &&\n\t\tmd1.supportThemeIcons === md2.supportThemeIcons\n\t);\n}\n\nexport function appendMarkdownString(\n\tmd1: IMarkdownString,\n\tmd2: IMarkdownString | string,\n): IMarkdownString {\n\tconst appendedValue = typeof md2 === \"string\" ? md2 : md2.value;\n\treturn {\n\t\tvalue: md1.value + appendedValue,\n\t\tisTrusted: md1.isTrusted,\n\t\tsupportThemeIcons: md1.supportThemeIcons,\n\t\tsupportHtml: md1.supportHtml,\n\t\tbaseUri: md1.baseUri,\n\t};\n}\n\nexport function getCodeCitationsMessage(\n\tcitations: ReadonlyArray<IChatCodeCitation>,\n): string {\n\tif (citations.length === 0) {\n\t\treturn \"\";\n\t}\n\n\tconst licenseTypes = citations.reduce(\n\t\t(set, c) => set.add(c.license),\n\t\tnew Set<string>(),\n\t);\n\tconst label =\n\t\tlicenseTypes.size === 1\n\t\t\t? localize(\n\t\t\t\t\t\"codeCitation\",\n\t\t\t\t\t\"Similar code found with 1 license type\",\n\t\t\t\t\tlicenseTypes.size,\n\t\t\t\t)\n\t\t\t: localize(\n\t\t\t\t\t\"codeCitations\",\n\t\t\t\t\t\"Similar code found with {0} license types\",\n\t\t\t\t\tlicenseTypes.size,\n\t\t\t\t);\n\treturn label;\n}\n"],
  "mappings": "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",
  "names": ["ChatRequestRemovalReason", "ChatModelInitState", "request"]
}
