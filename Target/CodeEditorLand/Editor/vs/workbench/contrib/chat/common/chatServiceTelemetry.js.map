{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatServiceTelemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IChatUserActionEvent, ChatAgentVoteDirection, ChatCopyKind } from './chatService.js';\n\ntype ChatVoteEvent = {\n\tdirection: 'up' | 'down';\n\tagentId: string;\n\tcommand: string | undefined;\n\treason: string | undefined;\n};\n\ntype ChatVoteClassification = {\n\tdirection: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the user voted up or down.' };\n\tagentId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the chat agent that this vote is for.' };\n\tcommand: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the slash command that this vote is for.' };\n\treason: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The reason selected by the user for voting down.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the performance of Chat agents.';\n};\n\ntype ChatCopyEvent = {\n\tcopyKind: 'action' | 'toolbar';\n\tagentId: string;\n\tcommand: string | undefined;\n};\n\ntype ChatCopyClassification = {\n\tcopyKind: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'How the copy was initiated.' };\n\tagentId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the chat agent that the copy acted on.' };\n\tcommand: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the slash command the copy acted on.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatInsertEvent = {\n\tnewFile: boolean;\n\tagentId: string;\n\tcommand: string | undefined;\n\tuserAction: string | undefined;\n\tcodeMapper: string | undefined;\n};\n\ntype ChatInsertClassification = {\n\tnewFile: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the code was inserted into a new untitled file.' };\n\tagentId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the chat agent that this insertion is for.' };\n\tcommand: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the slash command that this insertion is for.' };\n\tuserAction: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the UI command that was used to do the insert.' };\n\tcodeMapper: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The code mapper that wa used to compute the edit.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatCommandEvent = {\n\tcommandId: string;\n\tagentId: string;\n\tcommand: string | undefined;\n};\n\ntype ChatCommandClassification = {\n\tcommandId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the command that was executed.' };\n\tagentId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the related chat agent.' };\n\tcommand: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the related slash command.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatFollowupEvent = {\n\tagentId: string;\n\tcommand: string | undefined;\n};\n\ntype ChatFollowupClassification = {\n\tagentId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the related chat agent.' };\n\tcommand: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the related slash command.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatTerminalEvent = {\n\tlanguageId: string;\n\tagentId: string;\n\tcommand: string | undefined;\n};\n\ntype ChatTerminalClassification = {\n\tlanguageId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The language of the code that was run in the terminal.' };\n\tagentId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the related chat agent.' };\n\tcommand: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the related slash command.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatFollowupsRetrievedEvent = {\n\tagentId: string;\n\tcommand: string | undefined;\n\tnumFollowups: number;\n};\n\ntype ChatFollowupsRetrievedClassification = {\n\tagentId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the related chat agent.' };\n\tcommand: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the related slash command.' };\n\tnumFollowups: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of followup prompts returned by the agent.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\nexport class ChatServiceTelemetry {\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) { }\n\n\tnotifyUserAction(action: IChatUserActionEvent): void {\n\t\tif (action.action.kind === 'vote') {\n\t\t\tthis.telemetryService.publicLog2<ChatVoteEvent, ChatVoteClassification>('interactiveSessionVote', {\n\t\t\t\tdirection: action.action.direction === ChatAgentVoteDirection.Up ? 'up' : 'down',\n\t\t\t\tagentId: action.agentId ?? '',\n\t\t\t\tcommand: action.command,\n\t\t\t\treason: action.action.reason,\n\t\t\t});\n\t\t} else if (action.action.kind === 'copy') {\n\t\t\tthis.telemetryService.publicLog2<ChatCopyEvent, ChatCopyClassification>('interactiveSessionCopy', {\n\t\t\t\tcopyKind: action.action.copyKind === ChatCopyKind.Action ? 'action' : 'toolbar',\n\t\t\t\tagentId: action.agentId ?? '',\n\t\t\t\tcommand: action.command,\n\t\t\t});\n\t\t} else if (action.action.kind === 'insert') {\n\t\t\tthis.telemetryService.publicLog2<ChatInsertEvent, ChatInsertClassification>('interactiveSessionInsert', {\n\t\t\t\tnewFile: !!action.action.newFile,\n\t\t\t\tuserAction: action.action.userAction,\n\t\t\t\tcodeMapper: action.action.codeMapper,\n\t\t\t\tagentId: action.agentId ?? '',\n\t\t\t\tcommand: action.command,\n\t\t\t});\n\t\t} else if (action.action.kind === 'command') {\n\t\t\t// TODO not currently called\n\t\t\tconst command = CommandsRegistry.getCommand(action.action.commandButton.command.id);\n\t\t\tconst commandId = command ? action.action.commandButton.command.id : 'INVALID';\n\t\t\tthis.telemetryService.publicLog2<ChatCommandEvent, ChatCommandClassification>('interactiveSessionCommand', {\n\t\t\t\tcommandId,\n\t\t\t\tagentId: action.agentId ?? '',\n\t\t\t\tcommand: action.command,\n\t\t\t});\n\t\t} else if (action.action.kind === 'runInTerminal') {\n\t\t\tthis.telemetryService.publicLog2<ChatTerminalEvent, ChatTerminalClassification>('interactiveSessionRunInTerminal', {\n\t\t\t\tlanguageId: action.action.languageId ?? '',\n\t\t\t\tagentId: action.agentId ?? '',\n\t\t\t\tcommand: action.command,\n\t\t\t});\n\t\t} else if (action.action.kind === 'followUp') {\n\t\t\tthis.telemetryService.publicLog2<ChatFollowupEvent, ChatFollowupClassification>('chatFollowupClicked', {\n\t\t\t\tagentId: action.agentId ?? '',\n\t\t\t\tcommand: action.command,\n\t\t\t});\n\t\t}\n\t}\n\n\tretrievedFollowups(agentId: string, command: string | undefined, numFollowups: number): void {\n\t\tthis.telemetryService.publicLog2<ChatFollowupsRetrievedEvent, ChatFollowupsRetrievedClassification>('chatFollowupsRetrieved', {\n\t\t\tagentId,\n\t\t\tcommand,\n\t\t\tnumFollowups,\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,sBAAsB,wBAAwB,oBAAoB;AAwGpE,IAAM,uBAAN,MAA2B;AAAA,EACjC,YACqC,kBACnC;AADmC;AAAA,EACjC;AAAA,EAlHL,OA+GkC;AAAA;AAAA;AAAA,EAKjC,iBAAiB,QAAoC;AACpD,QAAI,OAAO,OAAO,SAAS,QAAQ;AAClC,WAAK,iBAAiB,WAAkD,0BAA0B;AAAA,QACjG,WAAW,OAAO,OAAO,cAAc,uBAAuB,KAAK,OAAO;AAAA,QAC1E,SAAS,OAAO,WAAW;AAAA,QAC3B,SAAS,OAAO;AAAA,QAChB,QAAQ,OAAO,OAAO;AAAA,MACvB,CAAC;AAAA,IACF,WAAW,OAAO,OAAO,SAAS,QAAQ;AACzC,WAAK,iBAAiB,WAAkD,0BAA0B;AAAA,QACjG,UAAU,OAAO,OAAO,aAAa,aAAa,SAAS,WAAW;AAAA,QACtE,SAAS,OAAO,WAAW;AAAA,QAC3B,SAAS,OAAO;AAAA,MACjB,CAAC;AAAA,IACF,WAAW,OAAO,OAAO,SAAS,UAAU;AAC3C,WAAK,iBAAiB,WAAsD,4BAA4B;AAAA,QACvG,SAAS,CAAC,CAAC,OAAO,OAAO;AAAA,QACzB,YAAY,OAAO,OAAO;AAAA,QAC1B,YAAY,OAAO,OAAO;AAAA,QAC1B,SAAS,OAAO,WAAW;AAAA,QAC3B,SAAS,OAAO;AAAA,MACjB,CAAC;AAAA,IACF,WAAW,OAAO,OAAO,SAAS,WAAW;AAE5C,YAAM,UAAU,iBAAiB,WAAW,OAAO,OAAO,cAAc,QAAQ,EAAE;AAClF,YAAM,YAAY,UAAU,OAAO,OAAO,cAAc,QAAQ,KAAK;AACrE,WAAK,iBAAiB,WAAwD,6BAA6B;AAAA,QAC1G;AAAA,QACA,SAAS,OAAO,WAAW;AAAA,QAC3B,SAAS,OAAO;AAAA,MACjB,CAAC;AAAA,IACF,WAAW,OAAO,OAAO,SAAS,iBAAiB;AAClD,WAAK,iBAAiB,WAA0D,mCAAmC;AAAA,QAClH,YAAY,OAAO,OAAO,cAAc;AAAA,QACxC,SAAS,OAAO,WAAW;AAAA,QAC3B,SAAS,OAAO;AAAA,MACjB,CAAC;AAAA,IACF,WAAW,OAAO,OAAO,SAAS,YAAY;AAC7C,WAAK,iBAAiB,WAA0D,uBAAuB;AAAA,QACtG,SAAS,OAAO,WAAW;AAAA,QAC3B,SAAS,OAAO;AAAA,MACjB,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,mBAAmB,SAAiB,SAA6B,cAA4B;AAC5F,SAAK,iBAAiB,WAA8E,0BAA0B;AAAA,MAC7H;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAzDa,uBAAN;AAAA,EAEJ;AAAA,GAFU;",
  "names": []
}
