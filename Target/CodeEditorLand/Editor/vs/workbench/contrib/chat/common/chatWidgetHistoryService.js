var v=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var y=(r,t,e,i)=>{for(var o=i>1?void 0:i?m(t,e):t,s=r.length-1,n;s>=0;s--)(n=r[s])&&(o=(i?n(t,e,o):n(o))||o);return i&&o&&v(t,e,o),o},h=(r,t)=>(e,i)=>t(e,i,r);import{Emitter as c}from"../../../../../vs/base/common/event.js";import{createDecorator as d}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{IStorageService as C,StorageScope as H,StorageTarget as g}from"../../../../../vs/platform/storage/common/storage.js";import{Memento as p}from"../../../../../vs/workbench/common/memento.js";import{ChatAgentLocation as I}from"../../../../../vs/workbench/contrib/chat/common/chatAgents.js";import{CHAT_PROVIDER_ID as S}from"../../../../../vs/workbench/contrib/chat/common/chatParticipantContribTypes.js";const L=d("IChatWidgetHistoryService");let a=class{_serviceBrand;memento;viewState;_onDidClearHistory=new c;onDidClearHistory=this._onDidClearHistory.event;constructor(t){this.memento=new p("interactive-session",t);const e=this.memento.getMemento(H.WORKSPACE,g.MACHINE);for(const i in e.history)e.history[i]=e.history[i].map(o=>typeof o=="string"?{text:o}:o);this.viewState=e}getHistory(t){const e=this.getKey(t);return this.viewState.history?.[e]??[]}getKey(t){return t===I.Panel?S:t}saveHistory(t,e){this.viewState.history||(this.viewState.history={});const i=this.getKey(t);this.viewState.history[i]=e,this.memento.saveMemento()}clearHistory(){this.viewState.history={},this.memento.saveMemento(),this._onDidClearHistory.fire()}};a=y([h(0,C)],a);export{a as ChatWidgetHistoryService,L as IChatWidgetHistoryService};
