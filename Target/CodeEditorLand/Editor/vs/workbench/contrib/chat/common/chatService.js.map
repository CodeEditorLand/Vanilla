{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IRange, Range } from '../../../../editor/common/core/range.js';\nimport { ISelection } from '../../../../editor/common/core/selection.js';\nimport { Command, Location, TextEdit } from '../../../../editor/common/languages.js';\nimport { FileType } from '../../../../platform/files/common/files.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkspaceSymbol } from '../../search/common/search.js';\nimport { ChatAgentLocation, IChatAgentCommand, IChatAgentData, IChatAgentResult } from './chatAgents.js';\nimport { ChatModel, IChatModel, IChatRequestModel, IChatRequestVariableData, IChatRequestVariableEntry, IChatResponseModel, IExportableChatData, ISerializableChatData } from './chatModel.js';\nimport { IParsedChatRequest } from './chatParserTypes.js';\nimport { IChatParserContext } from './chatRequestParser.js';\nimport { IChatRequestVariableValue } from './chatVariables.js';\n\nexport interface IChatRequest {\n\tmessage: string;\n\tvariables: Record<string, IChatRequestVariableValue[]>;\n}\n\nexport interface IChatResponseErrorDetails {\n\tmessage: string;\n\tresponseIsIncomplete?: boolean;\n\tresponseIsFiltered?: boolean;\n\tresponseIsRedacted?: boolean;\n}\n\nexport interface IChatResponseProgressFileTreeData {\n\tlabel: string;\n\turi: URI;\n\ttype?: FileType;\n\tchildren?: IChatResponseProgressFileTreeData[];\n}\n\nexport type IDocumentContext = {\n\turi: URI;\n\tversion: number;\n\tranges: IRange[];\n};\n\nexport function isIDocumentContext(obj: unknown): obj is IDocumentContext {\n\treturn (\n\t\t!!obj &&\n\t\ttypeof obj === 'object' &&\n\t\t'uri' in obj && obj.uri instanceof URI &&\n\t\t'version' in obj && typeof obj.version === 'number' &&\n\t\t'ranges' in obj && Array.isArray(obj.ranges) && obj.ranges.every(Range.isIRange)\n\t);\n}\n\nexport interface IChatUsedContext {\n\tdocuments: IDocumentContext[];\n\tkind: 'usedContext';\n}\n\nexport function isIUsedContext(obj: unknown): obj is IChatUsedContext {\n\treturn (\n\t\t!!obj &&\n\t\ttypeof obj === 'object' &&\n\t\t'documents' in obj &&\n\t\tArray.isArray(obj.documents) &&\n\t\tobj.documents.every(isIDocumentContext)\n\t);\n}\n\nexport interface IChatContentVariableReference {\n\tvariableName: string;\n\tvalue?: URI | Location;\n}\n\nexport enum ChatResponseReferencePartStatusKind {\n\tComplete = 1,\n\tPartial = 2,\n\tOmitted = 3\n}\n\nexport interface IChatContentReference {\n\treference: URI | Location | IChatContentVariableReference | string;\n\ticonPath?: ThemeIcon | { light: URI; dark?: URI };\n\toptions?: { status?: { description: string; kind: ChatResponseReferencePartStatusKind } };\n\tkind: 'reference';\n}\n\nexport interface IChatCodeCitation {\n\tvalue: URI;\n\tlicense: string;\n\tsnippet: string;\n\tkind: 'codeCitation';\n}\n\nexport interface IChatContentInlineReference {\n\tinlineReference: URI | Location | IWorkspaceSymbol;\n\tname?: string;\n\tkind: 'inlineReference';\n}\n\nexport interface IChatAgentDetection {\n\tagentId: string;\n\tcommand?: IChatAgentCommand;\n\tkind: 'agentDetection';\n}\n\nexport interface IChatMarkdownContent {\n\tcontent: IMarkdownString;\n\tkind: 'markdownContent';\n}\n\nexport interface IChatTreeData {\n\ttreeData: IChatResponseProgressFileTreeData;\n\tkind: 'treeData';\n}\n\nexport interface IChatProgressMessage {\n\tcontent: IMarkdownString;\n\tkind: 'progressMessage';\n}\n\nexport interface IChatTask extends IChatTaskDto {\n\tdeferred: DeferredPromise<string | void>;\n\tprogress: (IChatWarningMessage | IChatContentReference)[];\n\tonDidAddProgress: Event<IChatWarningMessage | IChatContentReference>;\n\tadd(progress: IChatWarningMessage | IChatContentReference): void;\n\n\tcomplete: (result: string | void) => void;\n\ttask: () => Promise<string | void>;\n\tisSettled: () => boolean;\n}\n\nexport interface IChatTaskDto {\n\tcontent: IMarkdownString;\n\tkind: 'progressTask';\n}\n\nexport interface IChatTaskResult {\n\tcontent: IMarkdownString | void;\n\tkind: 'progressTaskResult';\n}\n\nexport interface IChatWarningMessage {\n\tcontent: IMarkdownString;\n\tkind: 'warning';\n}\n\nexport interface IChatAgentVulnerabilityDetails {\n\ttitle: string;\n\tdescription: string;\n}\n\nexport interface IChatAgentMarkdownContentWithVulnerability {\n\tcontent: IMarkdownString;\n\tvulnerabilities: IChatAgentVulnerabilityDetails[];\n\tkind: 'markdownVuln';\n}\n\nexport interface IChatCommandButton {\n\tcommand: Command;\n\tkind: 'command';\n}\n\nexport interface IChatMoveMessage {\n\turi: URI;\n\trange: IRange;\n\tkind: 'move';\n}\n\nexport interface IChatTextEdit {\n\turi: URI;\n\tedits: TextEdit[];\n\tkind: 'textEdit';\n}\n\nexport interface IChatConfirmation {\n\ttitle: string;\n\tmessage: string;\n\tdata: any;\n\tbuttons?: string[];\n\tisUsed?: boolean;\n\tkind: 'confirmation';\n}\n\nexport type IChatProgress =\n\t| IChatMarkdownContent\n\t| IChatAgentMarkdownContentWithVulnerability\n\t| IChatTreeData\n\t| IChatUsedContext\n\t| IChatContentReference\n\t| IChatContentInlineReference\n\t| IChatCodeCitation\n\t| IChatAgentDetection\n\t| IChatProgressMessage\n\t| IChatTask\n\t| IChatTaskResult\n\t| IChatCommandButton\n\t| IChatWarningMessage\n\t| IChatTextEdit\n\t| IChatMoveMessage\n\t| IChatConfirmation;\n\nexport interface IChatFollowup {\n\tkind: 'reply';\n\tmessage: string;\n\tagentId: string;\n\tsubCommand?: string;\n\ttitle?: string;\n\ttooltip?: string;\n}\n\nexport enum ChatAgentVoteDirection {\n\tDown = 0,\n\tUp = 1\n}\n\nexport enum ChatAgentVoteDownReason {\n\tIncorrectCode = 'incorrectCode',\n\tDidNotFollowInstructions = 'didNotFollowInstructions',\n\tIncompleteCode = 'incompleteCode',\n\tMissingContext = 'missingContext',\n\tPoorlyWrittenOrFormatted = 'poorlyWrittenOrFormatted',\n\tRefusedAValidRequest = 'refusedAValidRequest',\n\tOffensiveOrUnsafe = 'offensiveOrUnsafe',\n\tOther = 'other',\n\tWillReportIssue = 'willReportIssue'\n}\n\nexport interface IChatVoteAction {\n\tkind: 'vote';\n\tdirection: ChatAgentVoteDirection;\n\treason: ChatAgentVoteDownReason | undefined;\n}\n\nexport enum ChatCopyKind {\n\t// Keyboard shortcut or context menu\n\tAction = 1,\n\tToolbar = 2\n}\n\nexport interface IChatCopyAction {\n\tkind: 'copy';\n\tcodeBlockIndex: number;\n\tcopyKind: ChatCopyKind;\n\tcopiedCharacters: number;\n\ttotalCharacters: number;\n\tcopiedText: string;\n}\n\nexport interface IChatInsertAction {\n\tkind: 'insert';\n\tcodeBlockIndex: number;\n\ttotalCharacters: number;\n\tnewFile?: boolean;\n\tuserAction?: string;\n\tcodeMapper?: string;\n}\n\nexport interface IChatTerminalAction {\n\tkind: 'runInTerminal';\n\tcodeBlockIndex: number;\n\tlanguageId?: string;\n}\n\nexport interface IChatCommandAction {\n\tkind: 'command';\n\tcommandButton: IChatCommandButton;\n}\n\nexport interface IChatFollowupAction {\n\tkind: 'followUp';\n\tfollowup: IChatFollowup;\n}\n\nexport interface IChatBugReportAction {\n\tkind: 'bug';\n}\n\nexport interface IChatInlineChatCodeAction {\n\tkind: 'inlineChat';\n\taction: 'accepted' | 'discarded';\n}\n\nexport type ChatUserAction = IChatVoteAction | IChatCopyAction | IChatInsertAction | IChatTerminalAction | IChatCommandAction | IChatFollowupAction | IChatBugReportAction | IChatInlineChatCodeAction;\n\nexport interface IChatUserActionEvent {\n\taction: ChatUserAction;\n\tagentId: string | undefined;\n\tcommand: string | undefined;\n\tsessionId: string;\n\trequestId: string;\n\tresult: IChatAgentResult | undefined;\n}\n\nexport interface IChatDynamicRequest {\n\t/**\n\t * The message that will be displayed in the UI\n\t */\n\tmessage: string;\n\n\t/**\n\t * Any extra metadata/context that will go to the provider.\n\t */\n\tmetadata?: any;\n}\n\nexport interface IChatCompleteResponse {\n\tmessage: string | ReadonlyArray<IChatProgress>;\n\tresult?: IChatAgentResult;\n\tfollowups?: IChatFollowup[];\n}\n\nexport interface IChatDetail {\n\tsessionId: string;\n\ttitle: string;\n\tlastMessageDate: number;\n\tisActive: boolean;\n}\n\nexport interface IChatProviderInfo {\n\tid: string;\n}\n\nexport interface IChatTransferredSessionData {\n\tsessionId: string;\n\tinputValue: string;\n}\n\nexport interface IChatSendRequestResponseState {\n\tresponseCreatedPromise: Promise<IChatResponseModel>;\n\tresponseCompletePromise: Promise<void>;\n}\n\nexport interface IChatSendRequestData extends IChatSendRequestResponseState {\n\tagent: IChatAgentData;\n\tslashCommand?: IChatAgentCommand;\n}\n\nexport interface IChatEditorLocationData {\n\ttype: ChatAgentLocation.Editor;\n\tdocument: URI;\n\tselection: ISelection;\n\twholeRange: IRange;\n}\n\nexport interface IChatNotebookLocationData {\n\ttype: ChatAgentLocation.Notebook;\n\tsessionInputUri: URI;\n}\n\nexport interface IChatTerminalLocationData {\n\ttype: ChatAgentLocation.Terminal;\n\t// TBD\n}\n\nexport type IChatLocationData = IChatEditorLocationData | IChatNotebookLocationData | IChatTerminalLocationData;\n\nexport interface IChatSendRequestOptions {\n\tlocation?: ChatAgentLocation;\n\tlocationData?: IChatLocationData;\n\tparserContext?: IChatParserContext;\n\tattempt?: number;\n\tnoCommandDetection?: boolean;\n\tacceptedConfirmationData?: any[];\n\trejectedConfirmationData?: any[];\n\tattachedContext?: IChatRequestVariableEntry[];\n\n\t/** The target agent ID can be specified with this property instead of using @ in 'message' */\n\tagentId?: string;\n\tslashCommand?: string;\n\n\t/**\n\t * The label of the confirmation action that was selected.\n\t */\n\tconfirmation?: string;\n}\n\nexport const IChatService = createDecorator<IChatService>('IChatService');\n\nexport interface IChatService {\n\t_serviceBrand: undefined;\n\ttransferredSessionData: IChatTransferredSessionData | undefined;\n\n\tisEnabled(location: ChatAgentLocation): boolean;\n\thasSessions(): boolean;\n\tstartSession(location: ChatAgentLocation, token: CancellationToken): ChatModel | undefined;\n\tgetSession(sessionId: string): IChatModel | undefined;\n\tgetOrRestoreSession(sessionId: string): IChatModel | undefined;\n\tloadSessionFromContent(data: IExportableChatData | ISerializableChatData): IChatModel | undefined;\n\n\t/**\n\t * Returns whether the request was accepted.\n\t */\n\tsendRequest(sessionId: string, message: string, options?: IChatSendRequestOptions): Promise<IChatSendRequestData | undefined>;\n\n\tresendRequest(request: IChatRequestModel, options?: IChatSendRequestOptions): Promise<void>;\n\tadoptRequest(sessionId: string, request: IChatRequestModel): Promise<void>;\n\tremoveRequest(sessionid: string, requestId: string): Promise<void>;\n\tcancelCurrentRequestForSession(sessionId: string): void;\n\tclearSession(sessionId: string): void;\n\taddCompleteRequest(sessionId: string, message: IParsedChatRequest | string, variableData: IChatRequestVariableData | undefined, attempt: number | undefined, response: IChatCompleteResponse): void;\n\tgetHistory(): IChatDetail[];\n\tsetChatSessionTitle(sessionId: string, title: string): void;\n\tclearAllHistoryEntries(): void;\n\tremoveHistoryEntry(sessionId: string): void;\n\n\tonDidPerformUserAction: Event<IChatUserActionEvent>;\n\tnotifyUserAction(event: IChatUserActionEvent): void;\n\tonDidDisposeSession: Event<{ sessionId: string; reason: 'initializationFailed' | 'cleared' }>;\n\n\ttransferChatSession(transferredSessionData: IChatTransferredSessionData, toWorkspace: URI): void;\n}\n\nexport const KEYWORD_ACTIVIATION_SETTING_ID = 'accessibility.voice.keywordActivation';\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AACpB,SAAS,QAAQ,aAAa;AAC9B,SAAS,kBAAkB;AAC3B,SAAS,SAAS,UAAU,gBAAgB;AAC5C,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,wBAAwB;AACjC,SAAS,mBAAmB,mBAAmB,gBAAgB,wBAAwB;AACvF,SAAS,WAAW,YAAY,mBAAmB,0BAA0B,2BAA2B,oBAAoB,qBAAqB,6BAA6B;AAC9K,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AACnC,SAAS,iCAAiC;AA2BnC,SAAS,mBAAmB,KAAuC;AACzE,SACC,CAAC,CAAC,OACF,OAAO,QAAQ,YACf,SAAS,OAAO,IAAI,eAAe,OACnC,aAAa,OAAO,OAAO,IAAI,YAAY,YAC3C,YAAY,OAAO,MAAM,QAAQ,IAAI,MAAM,KAAK,IAAI,OAAO,MAAM,MAAM,QAAQ;AAEjF;AARgB;AAeT,SAAS,eAAe,KAAuC;AACrE,SACC,CAAC,CAAC,OACF,OAAO,QAAQ,YACf,eAAe,OACf,MAAM,QAAQ,IAAI,SAAS,KAC3B,IAAI,UAAU,MAAM,kBAAkB;AAExC;AARgB;AAeT,IAAK,sCAAL,kBAAKA,yCAAL;AACN,EAAAA,0EAAA,cAAW,KAAX;AACA,EAAAA,0EAAA,aAAU,KAAV;AACA,EAAAA,0EAAA,aAAU,KAAV;AAHW,SAAAA;AAAA,GAAA;AAyIL,IAAK,yBAAL,kBAAKC,4BAAL;AACN,EAAAA,gDAAA,UAAO,KAAP;AACA,EAAAA,gDAAA,QAAK,KAAL;AAFW,SAAAA;AAAA,GAAA;AAKL,IAAK,0BAAL,kBAAKC,6BAAL;AACN,EAAAA,yBAAA,mBAAgB;AAChB,EAAAA,yBAAA,8BAA2B;AAC3B,EAAAA,yBAAA,oBAAiB;AACjB,EAAAA,yBAAA,oBAAiB;AACjB,EAAAA,yBAAA,8BAA2B;AAC3B,EAAAA,yBAAA,0BAAuB;AACvB,EAAAA,yBAAA,uBAAoB;AACpB,EAAAA,yBAAA,WAAQ;AACR,EAAAA,yBAAA,qBAAkB;AATP,SAAAA;AAAA,GAAA;AAkBL,IAAK,eAAL,kBAAKC,kBAAL;AAEN,EAAAA,4BAAA,YAAS,KAAT;AACA,EAAAA,4BAAA,aAAU,KAAV;AAHW,SAAAA;AAAA,GAAA;AA+IL,MAAM,eAAe,gBAA8B,cAAc;AAoCjE,MAAM,iCAAiC;",
  "names": ["ChatResponseReferencePartStatusKind", "ChatAgentVoteDirection", "ChatAgentVoteDownReason", "ChatCopyKind"]
}
