{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/codeBlockModelCollection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IReference,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { EndOfLinePreference } from \"../../../../editor/common/model.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport {\n\ttype IMarkdownVulnerability,\n\textractCodeblockUrisFromText,\n\textractVulnerabilitiesFromText,\n} from \"./annotations.js\";\nimport {\n\ttype IChatRequestViewModel,\n\ttype IChatResponseViewModel,\n\tisResponseVM,\n} from \"./chatViewModel.js\";\n\nexport class CodeBlockModelCollection extends Disposable {\n\tprivate readonly _models = new ResourceMap<{\n\t\treadonly model: Promise<IReference<IResolvedTextEditorModel>>;\n\t\tvulns: readonly IMarkdownVulnerability[];\n\t\tcodemapperUri?: URI;\n\t}>();\n\n\t/**\n\t * Max number of models to keep in memory.\n\t *\n\t * Currently always maintains the most recently created models.\n\t */\n\tprivate readonly maxModelCount = 100;\n\n\tconstructor(\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t}\n\n\tget(\n\t\tsessionId: string,\n\t\tchat: IChatRequestViewModel | IChatResponseViewModel,\n\t\tcodeBlockIndex: number,\n\t):\n\t\t| {\n\t\t\t\tmodel: Promise<IResolvedTextEditorModel>;\n\t\t\t\treadonly vulns: readonly IMarkdownVulnerability[];\n\t\t\t\treadonly codemapperUri?: URI;\n\t\t  }\n\t\t| undefined {\n\t\tconst uri = this.getUri(sessionId, chat, codeBlockIndex);\n\t\tconst entry = this._models.get(uri);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\tmodel: entry.model.then((ref) => ref.object),\n\t\t\tvulns: entry.vulns,\n\t\t\tcodemapperUri: entry.codemapperUri,\n\t\t};\n\t}\n\n\tgetOrCreate(\n\t\tsessionId: string,\n\t\tchat: IChatRequestViewModel | IChatResponseViewModel,\n\t\tcodeBlockIndex: number,\n\t): {\n\t\tmodel: Promise<IResolvedTextEditorModel>;\n\t\treadonly vulns: readonly IMarkdownVulnerability[];\n\t\treadonly codemapperUri?: URI;\n\t} {\n\t\tconst existing = this.get(sessionId, chat, codeBlockIndex);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst uri = this.getUri(sessionId, chat, codeBlockIndex);\n\t\tconst ref = this.textModelService.createModelReference(uri);\n\t\tthis._models.set(uri, {\n\t\t\tmodel: ref,\n\t\t\tvulns: [],\n\t\t\tcodemapperUri: undefined,\n\t\t});\n\n\t\twhile (this._models.size > this.maxModelCount) {\n\t\t\tconst first = Array.from(this._models.keys()).at(0);\n\t\t\tif (!first) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.delete(first);\n\t\t}\n\n\t\treturn {\n\t\t\tmodel: ref.then((ref) => ref.object),\n\t\t\tvulns: [],\n\t\t\tcodemapperUri: undefined,\n\t\t};\n\t}\n\n\tprivate delete(codeBlockUri: URI) {\n\t\tconst entry = this._models.get(codeBlockUri);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\n\t\tentry.model.then((ref) => ref.dispose());\n\t\tthis._models.delete(codeBlockUri);\n\t}\n\n\tclear(): void {\n\t\tthis._models.forEach(async (entry) => (await entry.model).dispose());\n\t\tthis._models.clear();\n\t}\n\n\tasync update(\n\t\tsessionId: string,\n\t\tchat: IChatRequestViewModel | IChatResponseViewModel,\n\t\tcodeBlockIndex: number,\n\t\tcontent: { text: string; languageId?: string },\n\t) {\n\t\tconst entry = this.getOrCreate(sessionId, chat, codeBlockIndex);\n\n\t\tconst extractedVulns = extractVulnerabilitiesFromText(content.text);\n\t\tlet newText = fixCodeText(extractedVulns.newText, content.languageId);\n\t\tthis.setVulns(\n\t\t\tsessionId,\n\t\t\tchat,\n\t\t\tcodeBlockIndex,\n\t\t\textractedVulns.vulnerabilities,\n\t\t);\n\n\t\tconst codeblockUri = extractCodeblockUrisFromText(newText);\n\t\tif (codeblockUri) {\n\t\t\tthis.setCodemapperUri(\n\t\t\t\tsessionId,\n\t\t\t\tchat,\n\t\t\t\tcodeBlockIndex,\n\t\t\t\tcodeblockUri.uri,\n\t\t\t);\n\t\t\tnewText = codeblockUri.textWithoutResult;\n\t\t}\n\n\t\tconst textModel = (await entry.model).textEditorModel;\n\t\tif (content.languageId) {\n\t\t\tconst vscodeLanguageId =\n\t\t\t\tthis.languageService.getLanguageIdByLanguageName(\n\t\t\t\t\tcontent.languageId,\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\tvscodeLanguageId &&\n\t\t\t\tvscodeLanguageId !== textModel.getLanguageId()\n\t\t\t) {\n\t\t\t\ttextModel.setLanguage(vscodeLanguageId);\n\t\t\t}\n\t\t}\n\n\t\tconst currentText = textModel.getValue(EndOfLinePreference.LF);\n\t\tif (newText === currentText) {\n\t\t\treturn entry;\n\t\t}\n\n\t\tif (newText.startsWith(currentText)) {\n\t\t\tconst text = newText.slice(currentText.length);\n\t\t\tconst lastLine = textModel.getLineCount();\n\t\t\tconst lastCol = textModel.getLineMaxColumn(lastLine);\n\t\t\ttextModel.applyEdits([\n\t\t\t\t{\n\t\t\t\t\trange: new Range(lastLine, lastCol, lastLine, lastCol),\n\t\t\t\t\ttext,\n\t\t\t\t},\n\t\t\t]);\n\t\t} else {\n\t\t\t// console.log(`Failed to optimize setText`);\n\t\t\ttextModel.setValue(newText);\n\t\t}\n\n\t\treturn entry;\n\t}\n\n\tprivate setCodemapperUri(\n\t\tsessionId: string,\n\t\tchat: IChatRequestViewModel | IChatResponseViewModel,\n\t\tcodeBlockIndex: number,\n\t\tcodemapperUri: URI,\n\t) {\n\t\tconst uri = this.getUri(sessionId, chat, codeBlockIndex);\n\t\tconst entry = this._models.get(uri);\n\t\tif (entry) {\n\t\t\tentry.codemapperUri = codemapperUri;\n\t\t}\n\t}\n\n\tprivate setVulns(\n\t\tsessionId: string,\n\t\tchat: IChatRequestViewModel | IChatResponseViewModel,\n\t\tcodeBlockIndex: number,\n\t\tvulnerabilities: IMarkdownVulnerability[],\n\t) {\n\t\tconst uri = this.getUri(sessionId, chat, codeBlockIndex);\n\t\tconst entry = this._models.get(uri);\n\t\tif (entry) {\n\t\t\tentry.vulns = vulnerabilities;\n\t\t}\n\t}\n\n\tprivate getUri(\n\t\tsessionId: string,\n\t\tchat: IChatRequestViewModel | IChatResponseViewModel,\n\t\tindex: number,\n\t): URI {\n\t\tconst metadata = this.getUriMetaData(chat);\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.vscodeChatCodeBlock,\n\t\t\tauthority: sessionId,\n\t\t\tpath: `/${chat.id}/${index}`,\n\t\t\tfragment: metadata ? JSON.stringify(metadata) : undefined,\n\t\t});\n\t}\n\n\tprivate getUriMetaData(\n\t\tchat: IChatRequestViewModel | IChatResponseViewModel,\n\t) {\n\t\tif (!isResponseVM(chat)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\treferences: chat.contentReferences.map((ref) => {\n\t\t\t\tif (typeof ref.reference === \"string\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst uriOrLocation =\n\t\t\t\t\t\"variableName\" in ref.reference\n\t\t\t\t\t\t? ref.reference.value\n\t\t\t\t\t\t: ref.reference;\n\t\t\t\tif (!uriOrLocation) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (URI.isUri(uriOrLocation)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\turi: uriOrLocation.toJSON(),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\turi: uriOrLocation.uri.toJSON(),\n\t\t\t\t\trange: uriOrLocation.range,\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n}\n\nfunction fixCodeText(text: string, languageId: string | undefined): string {\n\tif (languageId === \"php\") {\n\t\tif (!text.trim().startsWith(\"<\")) {\n\t\t\treturn `<?php\\n${text}`;\n\t\t}\n\t}\n\n\treturn text;\n}\n"],
  "mappings": "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",
  "names": ["ref"]
}
