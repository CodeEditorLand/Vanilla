{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/codeBlockModelCollection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IReference } from '../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { EndOfLinePreference } from '../../../../editor/common/model.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { IChatRequestViewModel, IChatResponseViewModel, isResponseVM } from './chatViewModel.js';\nimport { extractVulnerabilitiesFromText, IMarkdownVulnerability } from './annotations.js';\n\n\nexport class CodeBlockModelCollection extends Disposable {\n\n\tprivate readonly _models = new ResourceMap<{\n\t\treadonly model: Promise<IReference<IResolvedTextEditorModel>>;\n\t\tvulns: readonly IMarkdownVulnerability[];\n\t}>();\n\n\t/**\n\t * Max number of models to keep in memory.\n\t *\n\t * Currently always maintains the most recently created models.\n\t */\n\tprivate readonly maxModelCount = 100;\n\n\tconstructor(\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t}\n\n\tget(sessionId: string, chat: IChatRequestViewModel | IChatResponseViewModel, codeBlockIndex: number): { model: Promise<IResolvedTextEditorModel>; readonly vulns: readonly IMarkdownVulnerability[] } | undefined {\n\t\tconst uri = this.getUri(sessionId, chat, codeBlockIndex);\n\t\tconst entry = this._models.get(uri);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\t\treturn { model: entry.model.then(ref => ref.object), vulns: entry.vulns };\n\t}\n\n\tgetOrCreate(sessionId: string, chat: IChatRequestViewModel | IChatResponseViewModel, codeBlockIndex: number): { model: Promise<IResolvedTextEditorModel>; readonly vulns: readonly IMarkdownVulnerability[] } {\n\t\tconst existing = this.get(sessionId, chat, codeBlockIndex);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst uri = this.getUri(sessionId, chat, codeBlockIndex);\n\t\tconst ref = this.textModelService.createModelReference(uri);\n\t\tthis._models.set(uri, { model: ref, vulns: [] });\n\n\t\twhile (this._models.size > this.maxModelCount) {\n\t\t\tconst first = Array.from(this._models.keys()).at(0);\n\t\t\tif (!first) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.delete(first);\n\t\t}\n\n\t\treturn { model: ref.then(ref => ref.object), vulns: [] };\n\t}\n\n\tprivate delete(codeBlockUri: URI) {\n\t\tconst entry = this._models.get(codeBlockUri);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\n\t\tentry.model.then(ref => ref.dispose());\n\t\tthis._models.delete(codeBlockUri);\n\t}\n\n\tclear(): void {\n\t\tthis._models.forEach(async entry => (await entry.model).dispose());\n\t\tthis._models.clear();\n\t}\n\n\tasync update(sessionId: string, chat: IChatRequestViewModel | IChatResponseViewModel, codeBlockIndex: number, content: { text: string; languageId?: string }) {\n\t\tconst entry = this.getOrCreate(sessionId, chat, codeBlockIndex);\n\n\t\tconst extractedVulns = extractVulnerabilitiesFromText(content.text);\n\t\tconst newText = fixCodeText(extractedVulns.newText, content.languageId);\n\t\tthis.setVulns(sessionId, chat, codeBlockIndex, extractedVulns.vulnerabilities);\n\n\t\tconst textModel = (await entry.model).textEditorModel;\n\t\tif (content.languageId) {\n\t\t\tconst vscodeLanguageId = this.languageService.getLanguageIdByLanguageName(content.languageId);\n\t\t\tif (vscodeLanguageId && vscodeLanguageId !== textModel.getLanguageId()) {\n\t\t\t\ttextModel.setLanguage(vscodeLanguageId);\n\t\t\t}\n\t\t}\n\n\t\tconst currentText = textModel.getValue(EndOfLinePreference.LF);\n\t\tif (newText === currentText) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (newText.startsWith(currentText)) {\n\t\t\tconst text = newText.slice(currentText.length);\n\t\t\tconst lastLine = textModel.getLineCount();\n\t\t\tconst lastCol = textModel.getLineMaxColumn(lastLine);\n\t\t\ttextModel.applyEdits([{ range: new Range(lastLine, lastCol, lastLine, lastCol), text }]);\n\t\t} else {\n\t\t\t// console.log(`Failed to optimize setText`);\n\t\t\ttextModel.setValue(newText);\n\t\t}\n\t}\n\n\tprivate setVulns(sessionId: string, chat: IChatRequestViewModel | IChatResponseViewModel, codeBlockIndex: number, vulnerabilities: IMarkdownVulnerability[]) {\n\t\tconst uri = this.getUri(sessionId, chat, codeBlockIndex);\n\t\tconst entry = this._models.get(uri);\n\t\tif (entry) {\n\t\t\tentry.vulns = vulnerabilities;\n\t\t}\n\t}\n\n\tprivate getUri(sessionId: string, chat: IChatRequestViewModel | IChatResponseViewModel, index: number): URI {\n\t\tconst metadata = this.getUriMetaData(chat);\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.vscodeChatCodeBlock,\n\t\t\tauthority: sessionId,\n\t\t\tpath: `/${chat.id}/${index}`,\n\t\t\tfragment: metadata ? JSON.stringify(metadata) : undefined,\n\t\t});\n\t}\n\n\tprivate getUriMetaData(chat: IChatRequestViewModel | IChatResponseViewModel) {\n\t\tif (!isResponseVM(chat)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\treferences: chat.contentReferences.map(ref => {\n\t\t\t\tif (typeof ref.reference === 'string') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst uriOrLocation = 'variableName' in ref.reference ?\n\t\t\t\t\tref.reference.value :\n\t\t\t\t\tref.reference;\n\t\t\t\tif (!uriOrLocation) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (URI.isUri(uriOrLocation)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\turi: uriOrLocation.toJSON()\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\turi: uriOrLocation.uri.toJSON(),\n\t\t\t\t\trange: uriOrLocation.range,\n\t\t\t\t};\n\t\t\t})\n\t\t};\n\t}\n}\n\nfunction fixCodeText(text: string, languageId: string | undefined): string {\n\tif (languageId === 'php') {\n\t\tif (!text.trim().startsWith('<')) {\n\t\t\treturn `<?php\\n${text}`;\n\t\t}\n\t}\n\n\treturn text;\n}\n"],
  "mappings": "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",
  "names": ["ref"]
}
