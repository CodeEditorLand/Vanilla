{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../nls.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ChatAgentLocation } from \"./chatAgents.js\";\n\nexport const CONTEXT_RESPONSE_VOTE = new RawContextKey<string>(\n\t\"chatSessionResponseVote\",\n\t\"\",\n\t{\n\t\ttype: \"string\",\n\t\tdescription: localize(\n\t\t\t\"interactiveSessionResponseVote\",\n\t\t\t\"When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_VOTE_UP_ENABLED = new RawContextKey<boolean>(\n\t\"chatVoteUpEnabled\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatVoteUpEnabled\",\n\t\t\t\"True when the chat vote up action is enabled.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND =\n\tnew RawContextKey<boolean>(\n\t\t\"chatSessionResponseDetectedAgentOrCommand\",\n\t\tfalse,\n\t\t{\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"chatSessionResponseDetectedAgentOrCommand\",\n\t\t\t\t\"When the agent or command was automatically detected\",\n\t\t\t),\n\t\t},\n\t);\nexport const CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING =\n\tnew RawContextKey<boolean>(\"chatResponseSupportsIssueReporting\", false, {\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatResponseSupportsIssueReporting\",\n\t\t\t\"True when the current chat response supports issue reporting.\",\n\t\t),\n\t});\nexport const CONTEXT_RESPONSE_FILTERED = new RawContextKey<boolean>(\n\t\"chatSessionResponseFiltered\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatResponseFiltered\",\n\t\t\t\"True when the chat response was filtered out by the server.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_RESPONSE_ERROR = new RawContextKey<boolean>(\n\t\"chatSessionResponseError\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatResponseErrored\",\n\t\t\t\"True when the chat response resulted in an error.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_CHAT_REQUEST_IN_PROGRESS = new RawContextKey<boolean>(\n\t\"chatSessionRequestInProgress\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"interactiveSessionRequestInProgress\",\n\t\t\t\"True when the current request is still in progress.\",\n\t\t),\n\t},\n);\n\nexport const CONTEXT_RESPONSE = new RawContextKey<boolean>(\n\t\"chatResponse\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\"chatResponse\", \"The chat item is a response.\"),\n\t},\n);\nexport const CONTEXT_REQUEST = new RawContextKey<boolean>(\n\t\"chatRequest\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\"chatRequest\", \"The chat item is a request\"),\n\t},\n);\n\nexport const CONTEXT_CHAT_EDIT_APPLIED = new RawContextKey<boolean>(\n\t\"chatEditApplied\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatEditApplied\",\n\t\t\t\"True when the chat text edits have been applied.\",\n\t\t),\n\t},\n);\n\nexport const CONTEXT_CHAT_INPUT_HAS_TEXT = new RawContextKey<boolean>(\n\t\"chatInputHasText\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"interactiveInputHasText\",\n\t\t\t\"True when the chat input has text.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_CHAT_INPUT_HAS_FOCUS = new RawContextKey<boolean>(\n\t\"chatInputHasFocus\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"interactiveInputHasFocus\",\n\t\t\t\"True when the chat input has focus.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_IN_CHAT_INPUT = new RawContextKey<boolean>(\n\t\"inChatInput\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"inInteractiveInput\",\n\t\t\t\"True when focus is in the chat input, false otherwise.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_IN_CHAT_SESSION = new RawContextKey<boolean>(\n\t\"inChat\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"inChat\",\n\t\t\t\"True when focus is in the chat widget, false otherwise.\",\n\t\t),\n\t},\n);\n\nexport const CONTEXT_CHAT_ENABLED = new RawContextKey<boolean>(\n\t\"chatIsEnabled\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatIsEnabled\",\n\t\t\t\"True when chat is enabled because a default chat participant is activated with an implementation.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED =\n\tnew RawContextKey<boolean>(\"chatPanelParticipantRegistered\", false, {\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatParticipantRegistered\",\n\t\t\t\"True when a default chat participant is registered for the panel.\",\n\t\t),\n\t});\nexport const CONTEXT_CHAT_EXTENSION_INVALID = new RawContextKey<boolean>(\n\t\"chatExtensionInvalid\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"chatExtensionInvalid\",\n\t\t\t\"True when the installed chat extension is invalid and needs to be updated.\",\n\t\t),\n\t},\n);\nexport const CONTEXT_CHAT_INPUT_CURSOR_AT_TOP = new RawContextKey<boolean>(\n\t\"chatCursorAtTop\",\n\tfalse,\n);\nexport const CONTEXT_CHAT_INPUT_HAS_AGENT = new RawContextKey<boolean>(\n\t\"chatInputHasAgent\",\n\tfalse,\n);\nexport const CONTEXT_CHAT_LOCATION = new RawContextKey<ChatAgentLocation>(\n\t\"chatLocation\",\n\tundefined,\n);\nexport const CONTEXT_IN_QUICK_CHAT = new RawContextKey<boolean>(\n\t\"quickChatHasFocus\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"inQuickChat\",\n\t\t\t\"True when the quick chat UI has focus, false otherwise.\",\n\t\t),\n\t},\n);\n"],
  "mappings": "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",
  "names": []
}
