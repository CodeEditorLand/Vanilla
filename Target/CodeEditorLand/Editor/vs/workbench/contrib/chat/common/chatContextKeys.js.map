{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatContextKeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ChatAgentLocation } from './chatAgents.js';\n\nexport const CONTEXT_RESPONSE_VOTE = new RawContextKey<string>('chatSessionResponseVote', '', { type: 'string', description: localize('interactiveSessionResponseVote', \"When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string.\") });\nexport const CONTEXT_VOTE_UP_ENABLED = new RawContextKey<boolean>('chatVoteUpEnabled', false, { type: 'boolean', description: localize('chatVoteUpEnabled', \"True when the chat vote up action is enabled.\") });\nexport const CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND = new RawContextKey<boolean>('chatSessionResponseDetectedAgentOrCommand', false, { type: 'boolean', description: localize('chatSessionResponseDetectedAgentOrCommand', \"When the agent or command was automatically detected\") });\nexport const CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING = new RawContextKey<boolean>('chatResponseSupportsIssueReporting', false, { type: 'boolean', description: localize('chatResponseSupportsIssueReporting', \"True when the current chat response supports issue reporting.\") });\nexport const CONTEXT_RESPONSE_FILTERED = new RawContextKey<boolean>('chatSessionResponseFiltered', false, { type: 'boolean', description: localize('chatResponseFiltered', \"True when the chat response was filtered out by the server.\") });\nexport const CONTEXT_RESPONSE_ERROR = new RawContextKey<boolean>('chatSessionResponseError', false, { type: 'boolean', description: localize('chatResponseErrored', \"True when the chat response resulted in an error.\") });\nexport const CONTEXT_CHAT_REQUEST_IN_PROGRESS = new RawContextKey<boolean>('chatSessionRequestInProgress', false, { type: 'boolean', description: localize('interactiveSessionRequestInProgress', \"True when the current request is still in progress.\") });\n\nexport const CONTEXT_RESPONSE = new RawContextKey<boolean>('chatResponse', false, { type: 'boolean', description: localize('chatResponse', \"The chat item is a response.\") });\nexport const CONTEXT_REQUEST = new RawContextKey<boolean>('chatRequest', false, { type: 'boolean', description: localize('chatRequest', \"The chat item is a request\") });\n\nexport const CONTEXT_CHAT_EDIT_APPLIED = new RawContextKey<boolean>('chatEditApplied', false, { type: 'boolean', description: localize('chatEditApplied', \"True when the chat text edits have been applied.\") });\n\nexport const CONTEXT_CHAT_INPUT_HAS_TEXT = new RawContextKey<boolean>('chatInputHasText', false, { type: 'boolean', description: localize('interactiveInputHasText', \"True when the chat input has text.\") });\nexport const CONTEXT_CHAT_INPUT_HAS_FOCUS = new RawContextKey<boolean>('chatInputHasFocus', false, { type: 'boolean', description: localize('interactiveInputHasFocus', \"True when the chat input has focus.\") });\nexport const CONTEXT_IN_CHAT_INPUT = new RawContextKey<boolean>('inChatInput', false, { type: 'boolean', description: localize('inInteractiveInput', \"True when focus is in the chat input, false otherwise.\") });\nexport const CONTEXT_IN_CHAT_SESSION = new RawContextKey<boolean>('inChat', false, { type: 'boolean', description: localize('inChat', \"True when focus is in the chat widget, false otherwise.\") });\n\nexport const CONTEXT_CHAT_ENABLED = new RawContextKey<boolean>('chatIsEnabled', false, { type: 'boolean', description: localize('chatIsEnabled', \"True when chat is enabled because a default chat participant is activated with an implementation.\") });\nexport const CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED = new RawContextKey<boolean>('chatPanelParticipantRegistered', false, { type: 'boolean', description: localize('chatParticipantRegistered', \"True when a default chat participant is registered for the panel.\") });\nexport const CONTEXT_CHAT_EXTENSION_INVALID = new RawContextKey<boolean>('chatExtensionInvalid', false, { type: 'boolean', description: localize('chatExtensionInvalid', \"True when the installed chat extension is invalid and needs to be updated.\") });\nexport const CONTEXT_CHAT_INPUT_CURSOR_AT_TOP = new RawContextKey<boolean>('chatCursorAtTop', false);\nexport const CONTEXT_CHAT_INPUT_HAS_AGENT = new RawContextKey<boolean>('chatInputHasAgent', false);\nexport const CONTEXT_CHAT_LOCATION = new RawContextKey<ChatAgentLocation>('chatLocation', undefined);\nexport const CONTEXT_IN_QUICK_CHAT = new RawContextKey<boolean>('quickChatHasFocus', false, { type: 'boolean', description: localize('inQuickChat', \"True when the quick chat UI has focus, false otherwise.\") });\n"],
  "mappings": "AAKA,SAAS,gBAAgB;AACzB,SAAS,qBAAqB;AAC9B,SAAS,yBAAyB;AAE3B,MAAM,wBAAwB,IAAI,cAAsB,2BAA2B,IAAI,EAAE,MAAM,UAAU,aAAa,SAAS,kCAAkC,oHAAoH,EAAE,CAAC;AACxR,MAAM,0BAA0B,IAAI,cAAuB,qBAAqB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,qBAAqB,+CAA+C,EAAE,CAAC;AACvM,MAAM,0CAA0C,IAAI,cAAuB,6CAA6C,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,6CAA6C,sDAAsD,EAAE,CAAC;AAC9Q,MAAM,gDAAgD,IAAI,cAAuB,sCAAsC,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,sCAAsC,+DAA+D,EAAE,CAAC;AAC/Q,MAAM,4BAA4B,IAAI,cAAuB,+BAA+B,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,wBAAwB,6DAA6D,EAAE,CAAC;AACpO,MAAM,yBAAyB,IAAI,cAAuB,4BAA4B,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,uBAAuB,mDAAmD,EAAE,CAAC;AACnN,MAAM,mCAAmC,IAAI,cAAuB,gCAAgC,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,uCAAuC,qDAAqD,EAAE,CAAC;AAEnP,MAAM,mBAAmB,IAAI,cAAuB,gBAAgB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,gBAAgB,8BAA8B,EAAE,CAAC;AACrK,MAAM,kBAAkB,IAAI,cAAuB,eAAe,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,eAAe,4BAA4B,EAAE,CAAC;AAEhK,MAAM,4BAA4B,IAAI,cAAuB,mBAAmB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,mBAAmB,kDAAkD,EAAE,CAAC;AAExM,MAAM,8BAA8B,IAAI,cAAuB,oBAAoB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,2BAA2B,oCAAoC,EAAE,CAAC;AACrM,MAAM,+BAA+B,IAAI,cAAuB,qBAAqB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,4BAA4B,qCAAqC,EAAE,CAAC;AACzM,MAAM,wBAAwB,IAAI,cAAuB,eAAe,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,sBAAsB,wDAAwD,EAAE,CAAC;AACzM,MAAM,0BAA0B,IAAI,cAAuB,UAAU,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,UAAU,yDAAyD,EAAE,CAAC;AAE3L,MAAM,uBAAuB,IAAI,cAAuB,iBAAiB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,iBAAiB,mGAAmG,EAAE,CAAC;AAChP,MAAM,4CAA4C,IAAI,cAAuB,kCAAkC,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,6BAA6B,mEAAmE,EAAE,CAAC;AAClQ,MAAM,iCAAiC,IAAI,cAAuB,wBAAwB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,wBAAwB,4EAA4E,EAAE,CAAC;AACjP,MAAM,mCAAmC,IAAI,cAAuB,mBAAmB,KAAK;AAC5F,MAAM,+BAA+B,IAAI,cAAuB,qBAAqB,KAAK;AAC1F,MAAM,wBAAwB,IAAI,cAAiC,gBAAgB,MAAS;AAC5F,MAAM,wBAAwB,IAAI,cAAuB,qBAAqB,OAAO,EAAE,MAAM,WAAW,aAAa,SAAS,eAAe,yDAAyD,EAAE,CAAC;",
  "names": []
}
