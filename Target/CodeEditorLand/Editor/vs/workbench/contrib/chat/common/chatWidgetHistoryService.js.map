{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatWidgetHistoryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { Memento } from \"../../../common/memento.js\";\nimport { ChatAgentLocation } from \"./chatAgents.js\";\nimport { CHAT_PROVIDER_ID } from \"./chatParticipantContribTypes.js\";\n\nexport interface IChatHistoryEntry {\n\ttext: string;\n\tstate?: any;\n}\n\nexport const IChatWidgetHistoryService =\n\tcreateDecorator<IChatWidgetHistoryService>(\"IChatWidgetHistoryService\");\nexport interface IChatWidgetHistoryService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidClearHistory: Event<void>;\n\n\tclearHistory(): void;\n\tgetHistory(location: ChatAgentLocation): IChatHistoryEntry[];\n\tsaveHistory(\n\t\tlocation: ChatAgentLocation,\n\t\thistory: IChatHistoryEntry[],\n\t): void;\n}\n\ninterface IChatHistory {\n\thistory: { [providerId: string]: IChatHistoryEntry[] };\n}\n\nexport class ChatWidgetHistoryService implements IChatWidgetHistoryService {\n\t_serviceBrand: undefined;\n\n\tprivate memento: Memento;\n\tprivate viewState: IChatHistory;\n\n\tprivate readonly _onDidClearHistory = new Emitter<void>();\n\treadonly onDidClearHistory: Event<void> = this._onDidClearHistory.event;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tthis.memento = new Memento('interactive-session', storageService);\n\t\tconst loadedState = this.memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE) as IChatHistory;\n\t\tfor (const provider in loadedState.history) {\n\t\t\t// Migration from old format\n\t\t\tloadedState.history[provider] = loadedState.history[provider].map(entry => typeof entry === 'string' ? { text: entry } : entry);\n\t\t}\n\n\t\tthis.viewState = loadedState;\n\t}\n\n\tgetHistory(location: ChatAgentLocation): IChatHistoryEntry[] {\n\t\tconst key = this.getKey(location);\n\t\treturn this.viewState.history?.[key] ?? [];\n\t}\n\n\tprivate getKey(location: ChatAgentLocation): string {\n\t\t// Preserve history for panel by continuing to use the same old provider id. Use the location as a key for other chat locations.\n\t\treturn location === ChatAgentLocation.Panel\n\t\t\t? CHAT_PROVIDER_ID\n\t\t\t: location;\n\t}\n\n\tsaveHistory(\n\t\tlocation: ChatAgentLocation,\n\t\thistory: IChatHistoryEntry[],\n\t): void {\n\t\tif (!this.viewState.history) {\n\t\t\tthis.viewState.history = {};\n\t\t}\n\n\t\tconst key = this.getKey(location);\n\t\tthis.viewState.history[key] = history;\n\t\tthis.memento.saveMemento();\n\t}\n\n\tclearHistory(): void {\n\t\tthis.viewState.history = {};\n\t\tthis.memento.saveMemento();\n\t\tthis._onDidClearHistory.fire();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAA2B;AACpC,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,eAAe;AACxB,SAAS,yBAAyB;AAClC,SAAS,wBAAwB;AAO1B,MAAM,4BACZ,gBAA2C,2BAA2B;AAkBhE,IAAM,2BAAN,MAAoE;AAAA,EAxC3E,OAwC2E;AAAA;AAAA;AAAA,EAC1E;AAAA,EAEQ;AAAA,EACA;AAAA,EAES,qBAAqB,IAAI,QAAc;AAAA,EAC/C,oBAAiC,KAAK,mBAAmB;AAAA,EAElE,YACkB,gBAChB;AACD,SAAK,UAAU,IAAI,QAAQ,uBAAuB,cAAc;AAChE,UAAM,cAAc,KAAK,QAAQ,WAAW,aAAa,WAAW,cAAc,OAAO;AACzF,eAAW,YAAY,YAAY,SAAS;AAE3C,kBAAY,QAAQ,QAAQ,IAAI,YAAY,QAAQ,QAAQ,EAAE,IAAI,WAAS,OAAO,UAAU,WAAW,EAAE,MAAM,MAAM,IAAI,KAAK;AAAA,IAC/H;AAEA,SAAK,YAAY;AAAA,EAClB;AAAA,EAEA,WAAW,UAAkD;AAC5D,UAAM,MAAM,KAAK,OAAO,QAAQ;AAChC,WAAO,KAAK,UAAU,UAAU,GAAG,KAAK,CAAC;AAAA,EAC1C;AAAA,EAEQ,OAAO,UAAqC;AAEnD,WAAO,aAAa,kBAAkB,QACnC,mBACA;AAAA,EACJ;AAAA,EAEA,YACC,UACA,SACO;AACP,QAAI,CAAC,KAAK,UAAU,SAAS;AAC5B,WAAK,UAAU,UAAU,CAAC;AAAA,IAC3B;AAEA,UAAM,MAAM,KAAK,OAAO,QAAQ;AAChC,SAAK,UAAU,QAAQ,GAAG,IAAI;AAC9B,SAAK,QAAQ,YAAY;AAAA,EAC1B;AAAA,EAEA,eAAqB;AACpB,SAAK,UAAU,UAAU,CAAC;AAC1B,SAAK,QAAQ,YAAY;AACzB,SAAK,mBAAmB,KAAK;AAAA,EAC9B;AACD;AApDa,2BAAN;AAAA,EAUJ;AAAA,GAVU;",
  "names": []
}
