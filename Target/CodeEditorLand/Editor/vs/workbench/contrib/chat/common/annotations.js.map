{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/annotations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type { IRange } from \"../../../../editor/common/core/range.js\";\nimport type { IWorkspaceSymbol } from \"../../search/common/search.js\";\nimport {\n\ttype IChatProgressRenderableResponseContent,\n\ttype IChatProgressResponseContent,\n\tappendMarkdownString,\n\tcanMergeMarkdownStrings,\n} from \"./chatModel.js\";\nimport type {\n\tIChatAgentVulnerabilityDetails,\n\tIChatMarkdownContent,\n} from \"./chatService.js\";\n\nexport const contentRefUrl = \"http://_vscodecontentref_\"; // must be lowercase for URI\n\nexport type ContentRefData =\n\t| { readonly kind: \"symbol\"; readonly symbol: IWorkspaceSymbol }\n\t| {\n\t\t\treadonly kind?: undefined;\n\t\t\treadonly uri: URI;\n\t\t\treadonly range?: IRange;\n\t  };\n\nexport function annotateSpecialMarkdownContent(\n\tresponse: ReadonlyArray<IChatProgressResponseContent>,\n): IChatProgressRenderableResponseContent[] {\n\tconst result: IChatProgressRenderableResponseContent[] = [];\n\tfor (const item of response) {\n\t\tconst previousItem = result[result.length - 1];\n\t\tif (item.kind === \"inlineReference\") {\n\t\t\tconst location: ContentRefData =\n\t\t\t\t\"uri\" in item.inlineReference\n\t\t\t\t\t? item.inlineReference\n\t\t\t\t\t: \"name\" in item.inlineReference\n\t\t\t\t\t\t? { kind: \"symbol\", symbol: item.inlineReference }\n\t\t\t\t\t\t: { uri: item.inlineReference };\n\n\t\t\tconst printUri = URI.parse(contentRefUrl).with({\n\t\t\t\tfragment: JSON.stringify(location),\n\t\t\t});\n\t\t\tlet label: string | undefined = item.name;\n\t\t\tif (!label) {\n\t\t\t\tif (location.kind === \"symbol\") {\n\t\t\t\t\tlabel = location.symbol.name;\n\t\t\t\t} else {\n\t\t\t\t\tlabel = basename(location.uri);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst markdownText = `[${label}](${printUri.toString()})`;\n\t\t\tif (previousItem?.kind === \"markdownContent\") {\n\t\t\t\tconst merged = appendMarkdownString(\n\t\t\t\t\tpreviousItem.content,\n\t\t\t\t\tnew MarkdownString(markdownText),\n\t\t\t\t);\n\t\t\t\tresult[result.length - 1] = {\n\t\t\t\t\tcontent: merged,\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tcontent: new MarkdownString(markdownText),\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (\n\t\t\titem.kind === \"markdownContent\" &&\n\t\t\tpreviousItem?.kind === \"markdownContent\" &&\n\t\t\tcanMergeMarkdownStrings(previousItem.content, item.content)\n\t\t) {\n\t\t\tconst merged = appendMarkdownString(\n\t\t\t\tpreviousItem.content,\n\t\t\t\titem.content,\n\t\t\t);\n\t\t\tresult[result.length - 1] = {\n\t\t\t\tcontent: merged,\n\t\t\t\tkind: \"markdownContent\",\n\t\t\t};\n\t\t} else if (item.kind === \"markdownVuln\") {\n\t\t\tconst vulnText = encodeURIComponent(\n\t\t\t\tJSON.stringify(item.vulnerabilities),\n\t\t\t);\n\t\t\tconst markdownText = `<vscode_annotation details='${vulnText}'>${item.content.value}</vscode_annotation>`;\n\t\t\tif (previousItem?.kind === \"markdownContent\") {\n\t\t\t\t// Since this is inside a codeblock, it needs to be merged into the previous markdown content.\n\t\t\t\tconst merged = appendMarkdownString(\n\t\t\t\t\tpreviousItem.content,\n\t\t\t\t\tnew MarkdownString(markdownText),\n\t\t\t\t);\n\t\t\t\tresult[result.length - 1] = {\n\t\t\t\t\tcontent: merged,\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tcontent: new MarkdownString(markdownText),\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (item.kind === \"codeblockUri\") {\n\t\t\tif (previousItem?.kind === \"markdownContent\") {\n\t\t\t\tconst markdownText = `<vscode_codeblock_uri>${item.uri.toString()}</vscode_codeblock_uri>`;\n\t\t\t\tconst merged = appendMarkdownString(\n\t\t\t\t\tpreviousItem.content,\n\t\t\t\t\tnew MarkdownString(markdownText),\n\t\t\t\t);\n\t\t\t\tresult[result.length - 1] = {\n\t\t\t\t\tcontent: merged,\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(item);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport interface IMarkdownVulnerability {\n\treadonly title: string;\n\treadonly description: string;\n\treadonly range: IRange;\n}\n\nexport function annotateVulnerabilitiesInText(\n\tresponse: ReadonlyArray<IChatProgressResponseContent>,\n): readonly IChatMarkdownContent[] {\n\tconst result: IChatMarkdownContent[] = [];\n\tfor (const item of response) {\n\t\tconst previousItem = result[result.length - 1];\n\t\tif (item.kind === \"markdownContent\") {\n\t\t\tif (previousItem?.kind === \"markdownContent\") {\n\t\t\t\tresult[result.length - 1] = {\n\t\t\t\t\tcontent: new MarkdownString(\n\t\t\t\t\t\tpreviousItem.content.value + item.content.value,\n\t\t\t\t\t\t{ isTrusted: previousItem.content.isTrusted },\n\t\t\t\t\t),\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresult.push(item);\n\t\t\t}\n\t\t} else if (item.kind === \"markdownVuln\") {\n\t\t\tconst vulnText = encodeURIComponent(\n\t\t\t\tJSON.stringify(item.vulnerabilities),\n\t\t\t);\n\t\t\tconst markdownText = `<vscode_annotation details='${vulnText}'>${item.content.value}</vscode_annotation>`;\n\t\t\tif (previousItem?.kind === \"markdownContent\") {\n\t\t\t\tresult[result.length - 1] = {\n\t\t\t\t\tcontent: new MarkdownString(\n\t\t\t\t\t\tpreviousItem.content.value + markdownText,\n\t\t\t\t\t\t{ isTrusted: previousItem.content.isTrusted },\n\t\t\t\t\t),\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresult.push({\n\t\t\t\t\tcontent: new MarkdownString(markdownText),\n\t\t\t\t\tkind: \"markdownContent\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function extractCodeblockUrisFromText(\n\ttext: string,\n): { uri: URI; textWithoutResult: string } | undefined {\n\tconst match = /<vscode_codeblock_uri>(.*?)<\\/vscode_codeblock_uri>/ms.exec(\n\t\ttext,\n\t);\n\tif (match && match[1]) {\n\t\tconst result = URI.parse(match[1]);\n\t\tconst textWithoutResult =\n\t\t\ttext.substring(0, match.index) +\n\t\t\ttext.substring(match.index + match[0].length);\n\t\treturn { uri: result, textWithoutResult };\n\t}\n\treturn undefined;\n}\n\nexport function extractVulnerabilitiesFromText(text: string): {\n\tnewText: string;\n\tvulnerabilities: IMarkdownVulnerability[];\n} {\n\tconst vulnerabilities: IMarkdownVulnerability[] = [];\n\tlet newText = text;\n\tlet match: RegExpExecArray | null;\n\twhile (\n\t\t(match =\n\t\t\t/<vscode_annotation details='(.*?)'>(.*?)<\\/vscode_annotation>/ms.exec(\n\t\t\t\tnewText,\n\t\t\t)) !== null\n\t) {\n\t\tconst [full, details, content] = match;\n\t\tconst start = match.index;\n\t\tconst textBefore = newText.substring(0, start);\n\t\tconst linesBefore = textBefore.split(\"\\n\").length - 1;\n\t\tconst linesInside = content.split(\"\\n\").length - 1;\n\n\t\tconst previousNewlineIdx = textBefore.lastIndexOf(\"\\n\");\n\t\tconst startColumn = start - (previousNewlineIdx + 1) + 1;\n\t\tconst endPreviousNewlineIdx = (textBefore + content).lastIndexOf(\"\\n\");\n\t\tconst endColumn =\n\t\t\tstart + content.length - (endPreviousNewlineIdx + 1) + 1;\n\n\t\ttry {\n\t\t\tconst vulnDetails: IChatAgentVulnerabilityDetails[] = JSON.parse(\n\t\t\t\tdecodeURIComponent(details),\n\t\t\t);\n\t\t\tvulnDetails.forEach(({ title, description }) =>\n\t\t\t\tvulnerabilities.push({\n\t\t\t\t\ttitle,\n\t\t\t\t\tdescription,\n\t\t\t\t\trange: {\n\t\t\t\t\t\tstartLineNumber: linesBefore + 1,\n\t\t\t\t\t\tstartColumn,\n\t\t\t\t\t\tendLineNumber: linesBefore + linesInside + 1,\n\t\t\t\t\t\tendColumn,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t} catch (err) {\n\t\t\t// Something went wrong with encoding this text, just ignore it\n\t\t}\n\t\tnewText =\n\t\t\tnewText.substring(0, start) +\n\t\t\tcontent +\n\t\t\tnewText.substring(start + full.length);\n\t}\n\n\treturn { newText, vulnerabilities };\n}\n"],
  "mappings": "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",
  "names": []
}
