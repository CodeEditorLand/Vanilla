{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/annotations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { basename } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { IWorkspaceSymbol } from '../../search/common/search.js';\nimport { IChatProgressRenderableResponseContent, IChatProgressResponseContent, appendMarkdownString, canMergeMarkdownStrings } from './chatModel.js';\nimport { IChatAgentVulnerabilityDetails, IChatMarkdownContent } from './chatService.js';\n\nexport const contentRefUrl = 'http://_vscodecontentref_'; // must be lowercase for URI\n\nexport type ContentRefData =\n\t| { readonly kind: 'symbol'; readonly symbol: IWorkspaceSymbol }\n\t| {\n\t\treadonly kind?: undefined;\n\t\treadonly uri: URI;\n\t\treadonly range?: IRange;\n\t};\n\nexport function annotateSpecialMarkdownContent(response: ReadonlyArray<IChatProgressResponseContent>): IChatProgressRenderableResponseContent[] {\n\tconst result: IChatProgressRenderableResponseContent[] = [];\n\tfor (const item of response) {\n\t\tconst previousItem = result[result.length - 1];\n\t\tif (item.kind === 'inlineReference') {\n\t\t\tconst location: ContentRefData = 'uri' in item.inlineReference\n\t\t\t\t? item.inlineReference\n\t\t\t\t: 'name' in item.inlineReference\n\t\t\t\t\t? { kind: 'symbol', symbol: item.inlineReference }\n\t\t\t\t\t: { uri: item.inlineReference };\n\n\t\t\tconst printUri = URI.parse(contentRefUrl).with({ fragment: JSON.stringify(location) });\n\t\t\tlet label: string | undefined = item.name;\n\t\t\tif (!label) {\n\t\t\t\tif (location.kind === 'symbol') {\n\t\t\t\t\tlabel = location.symbol.name;\n\t\t\t\t} else {\n\t\t\t\t\tlabel = basename(location.uri);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst markdownText = `[${label}](${printUri.toString()})`;\n\t\t\tif (previousItem?.kind === 'markdownContent') {\n\t\t\t\tconst merged = appendMarkdownString(previousItem.content, new MarkdownString(markdownText));\n\t\t\t\tresult[result.length - 1] = { content: merged, kind: 'markdownContent' };\n\t\t\t} else {\n\t\t\t\tresult.push({ content: new MarkdownString(markdownText), kind: 'markdownContent' });\n\t\t\t}\n\t\t} else if (item.kind === 'markdownContent' && previousItem?.kind === 'markdownContent' && canMergeMarkdownStrings(previousItem.content, item.content)) {\n\t\t\tconst merged = appendMarkdownString(previousItem.content, item.content);\n\t\t\tresult[result.length - 1] = { content: merged, kind: 'markdownContent' };\n\t\t} else if (item.kind === 'markdownVuln') {\n\t\t\tconst vulnText = encodeURIComponent(JSON.stringify(item.vulnerabilities));\n\t\t\tconst markdownText = `<vscode_annotation details='${vulnText}'>${item.content.value}</vscode_annotation>`;\n\t\t\tif (previousItem?.kind === 'markdownContent') {\n\t\t\t\t// Since this is inside a codeblock, it needs to be merged into the previous markdown content.\n\t\t\t\tconst merged = appendMarkdownString(previousItem.content, new MarkdownString(markdownText));\n\t\t\t\tresult[result.length - 1] = { content: merged, kind: 'markdownContent' };\n\t\t\t} else {\n\t\t\t\tresult.push({ content: new MarkdownString(markdownText), kind: 'markdownContent' });\n\t\t\t}\n\t\t} else if (item.kind === 'codeblockUri') {\n\t\t\tif (previousItem?.kind === 'markdownContent') {\n\t\t\t\tconst markdownText = `<vscode_codeblock_uri>${item.uri.toString()}</vscode_codeblock_uri>`;\n\t\t\t\tconst merged = appendMarkdownString(previousItem.content, new MarkdownString(markdownText));\n\t\t\t\tresult[result.length - 1] = { content: merged, kind: 'markdownContent' };\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(item);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport interface IMarkdownVulnerability {\n\treadonly title: string;\n\treadonly description: string;\n\treadonly range: IRange;\n}\n\nexport function annotateVulnerabilitiesInText(response: ReadonlyArray<IChatProgressResponseContent>): readonly IChatMarkdownContent[] {\n\tconst result: IChatMarkdownContent[] = [];\n\tfor (const item of response) {\n\t\tconst previousItem = result[result.length - 1];\n\t\tif (item.kind === 'markdownContent') {\n\t\t\tif (previousItem?.kind === 'markdownContent') {\n\t\t\t\tresult[result.length - 1] = { content: new MarkdownString(previousItem.content.value + item.content.value, { isTrusted: previousItem.content.isTrusted }), kind: 'markdownContent' };\n\t\t\t} else {\n\t\t\t\tresult.push(item);\n\t\t\t}\n\t\t} else if (item.kind === 'markdownVuln') {\n\t\t\tconst vulnText = encodeURIComponent(JSON.stringify(item.vulnerabilities));\n\t\t\tconst markdownText = `<vscode_annotation details='${vulnText}'>${item.content.value}</vscode_annotation>`;\n\t\t\tif (previousItem?.kind === 'markdownContent') {\n\t\t\t\tresult[result.length - 1] = { content: new MarkdownString(previousItem.content.value + markdownText, { isTrusted: previousItem.content.isTrusted }), kind: 'markdownContent' };\n\t\t\t} else {\n\t\t\t\tresult.push({ content: new MarkdownString(markdownText), kind: 'markdownContent' });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function extractCodeblockUrisFromText(text: string): { uri: URI; textWithoutResult: string } | undefined {\n\tconst match = /<vscode_codeblock_uri>(.*?)<\\/vscode_codeblock_uri>/ms.exec(text);\n\tif (match && match[1]) {\n\t\tconst result = URI.parse(match[1]);\n\t\tconst textWithoutResult = text.substring(0, match.index) + text.substring(match.index + match[0].length);\n\t\treturn { uri: result, textWithoutResult };\n\t}\n\treturn undefined;\n}\n\nexport function extractVulnerabilitiesFromText(text: string): { newText: string; vulnerabilities: IMarkdownVulnerability[] } {\n\tconst vulnerabilities: IMarkdownVulnerability[] = [];\n\tlet newText = text;\n\tlet match: RegExpExecArray | null;\n\twhile ((match = /<vscode_annotation details='(.*?)'>(.*?)<\\/vscode_annotation>/ms.exec(newText)) !== null) {\n\t\tconst [full, details, content] = match;\n\t\tconst start = match.index;\n\t\tconst textBefore = newText.substring(0, start);\n\t\tconst linesBefore = textBefore.split('\\n').length - 1;\n\t\tconst linesInside = content.split('\\n').length - 1;\n\n\t\tconst previousNewlineIdx = textBefore.lastIndexOf('\\n');\n\t\tconst startColumn = start - (previousNewlineIdx + 1) + 1;\n\t\tconst endPreviousNewlineIdx = (textBefore + content).lastIndexOf('\\n');\n\t\tconst endColumn = start + content.length - (endPreviousNewlineIdx + 1) + 1;\n\n\t\ttry {\n\t\t\tconst vulnDetails: IChatAgentVulnerabilityDetails[] = JSON.parse(decodeURIComponent(details));\n\t\t\tvulnDetails.forEach(({ title, description }) => vulnerabilities.push({\n\t\t\t\ttitle, description, range: { startLineNumber: linesBefore + 1, startColumn, endLineNumber: linesBefore + linesInside + 1, endColumn }\n\t\t\t}));\n\t\t} catch (err) {\n\t\t\t// Something went wrong with encoding this text, just ignore it\n\t\t}\n\t\tnewText = newText.substring(0, start) + content + newText.substring(start + full.length);\n\t}\n\n\treturn { newText, vulnerabilities };\n}\n"],
  "mappings": ";;AAIA,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB,SAAS,WAAW;AACpB,SAAS,cAAc;AACvB,SAAS,wBAAwB;AACjC,SAAS,wCAAwC,8BAA8B,sBAAsB,+BAA+B;AACpI,SAAS,gCAAgC,4BAA4B;AAE9D,MAAM,gBAAgB;AAUtB,SAAS,+BAA+B,UAAiG;AAC/I,QAAM,SAAmD,CAAC;AAC1D,aAAW,QAAQ,UAAU;AAC5B,UAAM,eAAe,OAAO,OAAO,SAAS,CAAC;AAC7C,QAAI,KAAK,SAAS,mBAAmB;AACpC,YAAM,WAA2B,SAAS,KAAK,kBAC5C,KAAK,kBACL,UAAU,KAAK,kBACd,EAAE,MAAM,UAAU,QAAQ,KAAK,gBAAgB,IAC/C,EAAE,KAAK,KAAK,gBAAgB;AAEhC,YAAM,WAAW,IAAI,MAAM,aAAa,EAAE,KAAK,EAAE,UAAU,KAAK,UAAU,QAAQ,EAAE,CAAC;AACrF,UAAI,QAA4B,KAAK;AACrC,UAAI,CAAC,OAAO;AACX,YAAI,SAAS,SAAS,UAAU;AAC/B,kBAAQ,SAAS,OAAO;AAAA,QACzB,OAAO;AACN,kBAAQ,SAAS,SAAS,GAAG;AAAA,QAC9B;AAAA,MACD;AAEA,YAAM,eAAe,IAAI,KAAK,KAAK,SAAS,SAAS,CAAC;AACtD,UAAI,cAAc,SAAS,mBAAmB;AAC7C,cAAM,SAAS,qBAAqB,aAAa,SAAS,IAAI,eAAe,YAAY,CAAC;AAC1F,eAAO,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,QAAQ,MAAM,kBAAkB;AAAA,MACxE,OAAO;AACN,eAAO,KAAK,EAAE,SAAS,IAAI,eAAe,YAAY,GAAG,MAAM,kBAAkB,CAAC;AAAA,MACnF;AAAA,IACD,WAAW,KAAK,SAAS,qBAAqB,cAAc,SAAS,qBAAqB,wBAAwB,aAAa,SAAS,KAAK,OAAO,GAAG;AACtJ,YAAM,SAAS,qBAAqB,aAAa,SAAS,KAAK,OAAO;AACtE,aAAO,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,QAAQ,MAAM,kBAAkB;AAAA,IACxE,WAAW,KAAK,SAAS,gBAAgB;AACxC,YAAM,WAAW,mBAAmB,KAAK,UAAU,KAAK,eAAe,CAAC;AACxE,YAAM,eAAe,+BAA+B,QAAQ,KAAK,KAAK,QAAQ,KAAK;AACnF,UAAI,cAAc,SAAS,mBAAmB;AAE7C,cAAM,SAAS,qBAAqB,aAAa,SAAS,IAAI,eAAe,YAAY,CAAC;AAC1F,eAAO,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,QAAQ,MAAM,kBAAkB;AAAA,MACxE,OAAO;AACN,eAAO,KAAK,EAAE,SAAS,IAAI,eAAe,YAAY,GAAG,MAAM,kBAAkB,CAAC;AAAA,MACnF;AAAA,IACD,WAAW,KAAK,SAAS,gBAAgB;AACxC,UAAI,cAAc,SAAS,mBAAmB;AAC7C,cAAM,eAAe,yBAAyB,KAAK,IAAI,SAAS,CAAC;AACjE,cAAM,SAAS,qBAAqB,aAAa,SAAS,IAAI,eAAe,YAAY,CAAC;AAC1F,eAAO,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,QAAQ,MAAM,kBAAkB;AAAA,MACxE;AAAA,IACD,OAAO;AACN,aAAO,KAAK,IAAI;AAAA,IACjB;AAAA,EACD;AAEA,SAAO;AACR;AArDgB;AA6DT,SAAS,8BAA8B,UAAwF;AACrI,QAAM,SAAiC,CAAC;AACxC,aAAW,QAAQ,UAAU;AAC5B,UAAM,eAAe,OAAO,OAAO,SAAS,CAAC;AAC7C,QAAI,KAAK,SAAS,mBAAmB;AACpC,UAAI,cAAc,SAAS,mBAAmB;AAC7C,eAAO,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,IAAI,eAAe,aAAa,QAAQ,QAAQ,KAAK,QAAQ,OAAO,EAAE,WAAW,aAAa,QAAQ,UAAU,CAAC,GAAG,MAAM,kBAAkB;AAAA,MACpL,OAAO;AACN,eAAO,KAAK,IAAI;AAAA,MACjB;AAAA,IACD,WAAW,KAAK,SAAS,gBAAgB;AACxC,YAAM,WAAW,mBAAmB,KAAK,UAAU,KAAK,eAAe,CAAC;AACxE,YAAM,eAAe,+BAA+B,QAAQ,KAAK,KAAK,QAAQ,KAAK;AACnF,UAAI,cAAc,SAAS,mBAAmB;AAC7C,eAAO,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,IAAI,eAAe,aAAa,QAAQ,QAAQ,cAAc,EAAE,WAAW,aAAa,QAAQ,UAAU,CAAC,GAAG,MAAM,kBAAkB;AAAA,MAC9K,OAAO;AACN,eAAO,KAAK,EAAE,SAAS,IAAI,eAAe,YAAY,GAAG,MAAM,kBAAkB,CAAC;AAAA,MACnF;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAtBgB;AAwBT,SAAS,6BAA6B,MAAmE;AAC/G,QAAM,QAAQ,wDAAwD,KAAK,IAAI;AAC/E,MAAI,SAAS,MAAM,CAAC,GAAG;AACtB,UAAM,SAAS,IAAI,MAAM,MAAM,CAAC,CAAC;AACjC,UAAM,oBAAoB,KAAK,UAAU,GAAG,MAAM,KAAK,IAAI,KAAK,UAAU,MAAM,QAAQ,MAAM,CAAC,EAAE,MAAM;AACvG,WAAO,EAAE,KAAK,QAAQ,kBAAkB;AAAA,EACzC;AACA,SAAO;AACR;AARgB;AAUT,SAAS,+BAA+B,MAA8E;AAC5H,QAAM,kBAA4C,CAAC;AACnD,MAAI,UAAU;AACd,MAAI;AACJ,UAAQ,QAAQ,kEAAkE,KAAK,OAAO,OAAO,MAAM;AAC1G,UAAM,CAAC,MAAM,SAAS,OAAO,IAAI;AACjC,UAAM,QAAQ,MAAM;AACpB,UAAM,aAAa,QAAQ,UAAU,GAAG,KAAK;AAC7C,UAAM,cAAc,WAAW,MAAM,IAAI,EAAE,SAAS;AACpD,UAAM,cAAc,QAAQ,MAAM,IAAI,EAAE,SAAS;AAEjD,UAAM,qBAAqB,WAAW,YAAY,IAAI;AACtD,UAAM,cAAc,SAAS,qBAAqB,KAAK;AACvD,UAAM,yBAAyB,aAAa,SAAS,YAAY,IAAI;AACrE,UAAM,YAAY,QAAQ,QAAQ,UAAU,wBAAwB,KAAK;AAEzE,QAAI;AACH,YAAM,cAAgD,KAAK,MAAM,mBAAmB,OAAO,CAAC;AAC5F,kBAAY,QAAQ,CAAC,EAAE,OAAO,YAAY,MAAM,gBAAgB,KAAK;AAAA,QACpE;AAAA,QAAO;AAAA,QAAa,OAAO,EAAE,iBAAiB,cAAc,GAAG,aAAa,eAAe,cAAc,cAAc,GAAG,UAAU;AAAA,MACrI,CAAC,CAAC;AAAA,IACH,SAAS,KAAK;AAAA,IAEd;AACA,cAAU,QAAQ,UAAU,GAAG,KAAK,IAAI,UAAU,QAAQ,UAAU,QAAQ,KAAK,MAAM;AAAA,EACxF;AAEA,SAAO,EAAE,SAAS,gBAAgB;AACnC;AA5BgB;",
  "names": []
}
