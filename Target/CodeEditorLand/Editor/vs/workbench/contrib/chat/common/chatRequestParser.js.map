{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatRequestParser.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OffsetRange } from \"../../../../editor/common/core/offsetRange.js\";\nimport {\n\ttype IPosition,\n\tPosition,\n} from \"../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport {\n\tChatAgentLocation,\n\ttype IChatAgentData,\n\tIChatAgentService,\n} from \"./chatAgents.js\";\nimport {\n\tChatRequestAgentPart,\n\tChatRequestAgentSubcommandPart,\n\tChatRequestDynamicVariablePart,\n\tChatRequestSlashCommandPart,\n\tChatRequestTextPart,\n\tChatRequestToolPart,\n\tChatRequestVariablePart,\n\ttype IParsedChatRequest,\n\ttype IParsedChatRequestPart,\n\tchatAgentLeader,\n\tchatSubcommandLeader,\n\tchatVariableLeader,\n} from \"./chatParserTypes.js\";\nimport { IChatSlashCommandService } from \"./chatSlashCommands.js\";\nimport {\n\tIChatVariablesService,\n\ttype IDynamicVariable,\n} from \"./chatVariables.js\";\nimport { ILanguageModelToolsService } from \"./languageModelToolsService.js\";\n\nconst agentReg = /^@([\\w_\\-.]+)(?=(\\s|$|\\b))/i; // An @-agent\nconst variableReg = /^#([\\w_-]+)(:\\d+)?(?=(\\s|$|\\b))/i; // A #-variable with an optional numeric : arg (@response:2)\nconst slashReg = /\\/([\\w_-]+)(?=(\\s|$|\\b))/i; // A / command\n\nexport interface IChatParserContext {\n\t/** Used only as a disambiguator, when the query references an agent that has a duplicate with the same name. */\n\tselectedAgent?: IChatAgentData;\n}\n\nexport class ChatRequestParser {\n\tconstructor(\n\t\t@IChatAgentService private readonly agentService: IChatAgentService,\n\t\t@IChatVariablesService\n\t\tprivate readonly variableService: IChatVariablesService,\n\t\t@IChatSlashCommandService\n\t\tprivate readonly slashCommandService: IChatSlashCommandService,\n\t\t@ILanguageModelToolsService\n\t\tprivate readonly toolsService: ILanguageModelToolsService,\n\t) {}\n\n\tparseChatRequest(\n\t\tsessionId: string,\n\t\tmessage: string,\n\t\tlocation: ChatAgentLocation = ChatAgentLocation.Panel,\n\t\tcontext?: IChatParserContext,\n\t): IParsedChatRequest {\n\t\tconst parts: IParsedChatRequestPart[] = [];\n\t\tconst references = this.variableService.getDynamicVariables(sessionId); // must access this list before any async calls\n\n\t\tlet lineNumber = 1;\n\t\tlet column = 1;\n\t\tfor (let i = 0; i < message.length; i++) {\n\t\t\tconst previousChar = message.charAt(i - 1);\n\t\t\tconst char = message.charAt(i);\n\t\t\tlet newPart: IParsedChatRequestPart | undefined;\n\t\t\tif (previousChar.match(/\\s/) || i === 0) {\n\t\t\t\tif (char === chatVariableLeader) {\n\t\t\t\t\tnewPart = this.tryToParseVariable(\n\t\t\t\t\t\tmessage.slice(i),\n\t\t\t\t\t\ti,\n\t\t\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\t\t\tparts,\n\t\t\t\t\t);\n\t\t\t\t} else if (char === chatAgentLeader) {\n\t\t\t\t\tnewPart = this.tryToParseAgent(\n\t\t\t\t\t\tmessage.slice(i),\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\t\t\tparts,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t);\n\t\t\t\t} else if (char === chatSubcommandLeader) {\n\t\t\t\t\tnewPart = this.tryToParseSlashCommand(\n\t\t\t\t\t\tmessage.slice(i),\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\t\t\tparts,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!newPart) {\n\t\t\t\t\tnewPart = this.tryToParseDynamicVariable(\n\t\t\t\t\t\tmessage.slice(i),\n\t\t\t\t\t\ti,\n\t\t\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\t\t\treferences,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newPart) {\n\t\t\t\tif (i !== 0) {\n\t\t\t\t\t// Insert a part for all the text we passed over, then insert the new parsed part\n\t\t\t\t\tconst previousPart = parts.at(-1);\n\t\t\t\t\tconst previousPartEnd =\n\t\t\t\t\t\tpreviousPart?.range.endExclusive ?? 0;\n\t\t\t\t\tconst previousPartEditorRangeEndLine =\n\t\t\t\t\t\tpreviousPart?.editorRange.endLineNumber ?? 1;\n\t\t\t\t\tconst previousPartEditorRangeEndCol =\n\t\t\t\t\t\tpreviousPart?.editorRange.endColumn ?? 1;\n\t\t\t\t\tparts.push(\n\t\t\t\t\t\tnew ChatRequestTextPart(\n\t\t\t\t\t\t\tnew OffsetRange(previousPartEnd, i),\n\t\t\t\t\t\t\tnew Range(\n\t\t\t\t\t\t\t\tpreviousPartEditorRangeEndLine,\n\t\t\t\t\t\t\t\tpreviousPartEditorRangeEndCol,\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmessage.slice(previousPartEnd, i),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tparts.push(newPart);\n\t\t\t}\n\n\t\t\tif (char === \"\\n\") {\n\t\t\t\tlineNumber++;\n\t\t\t\tcolumn = 1;\n\t\t\t} else {\n\t\t\t\tcolumn++;\n\t\t\t}\n\t\t}\n\n\t\tconst lastPart = parts.at(-1);\n\t\tconst lastPartEnd = lastPart?.range.endExclusive ?? 0;\n\t\tif (lastPartEnd < message.length) {\n\t\t\tparts.push(\n\t\t\t\tnew ChatRequestTextPart(\n\t\t\t\t\tnew OffsetRange(lastPartEnd, message.length),\n\t\t\t\t\tnew Range(\n\t\t\t\t\t\tlastPart?.editorRange.endLineNumber ?? 1,\n\t\t\t\t\t\tlastPart?.editorRange.endColumn ?? 1,\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\tcolumn,\n\t\t\t\t\t),\n\t\t\t\t\tmessage.slice(lastPartEnd, message.length),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tparts,\n\t\t\ttext: message,\n\t\t};\n\t}\n\n\tprivate tryToParseAgent(\n\t\tmessage: string,\n\t\tfullMessage: string,\n\t\toffset: number,\n\t\tposition: IPosition,\n\t\tparts: Array<IParsedChatRequestPart>,\n\t\tlocation: ChatAgentLocation,\n\t\tcontext: IChatParserContext | undefined,\n\t): ChatRequestAgentPart | ChatRequestVariablePart | undefined {\n\t\tconst nextAgentMatch = message.match(agentReg);\n\t\tif (!nextAgentMatch) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [full, name] = nextAgentMatch;\n\t\tconst agentRange = new OffsetRange(offset, offset + full.length);\n\t\tconst agentEditorRange = new Range(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t\tposition.lineNumber,\n\t\t\tposition.column + full.length,\n\t\t);\n\n\t\tlet agents = this.agentService.getAgentsByName(name);\n\t\tif (!agents.length) {\n\t\t\tconst fqAgent = this.agentService.getAgentByFullyQualifiedId(name);\n\t\t\tif (fqAgent) {\n\t\t\t\tagents = [fqAgent];\n\t\t\t}\n\t\t}\n\n\t\t// If there is more than one agent with this name, and the user picked it from the suggest widget, then the selected agent should be in the\n\t\t// context and we use that one.\n\t\tconst agent =\n\t\t\tagents.length > 1 && context?.selectedAgent\n\t\t\t\t? context.selectedAgent\n\t\t\t\t: agents.find((a) => a.locations.includes(location));\n\t\tif (!agent) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (parts.some((p) => p instanceof ChatRequestAgentPart)) {\n\t\t\t// Only one agent allowed\n\t\t\treturn;\n\t\t}\n\n\t\t// The agent must come first\n\t\tif (\n\t\t\tparts.some(\n\t\t\t\t(p) =>\n\t\t\t\t\t(p instanceof ChatRequestTextPart &&\n\t\t\t\t\t\tp.text.trim() !== \"\") ||\n\t\t\t\t\t!(p instanceof ChatRequestAgentPart),\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst previousPart = parts.at(-1);\n\t\tconst previousPartEnd = previousPart?.range.endExclusive ?? 0;\n\t\tconst textSincePreviousPart = fullMessage.slice(\n\t\t\tpreviousPartEnd,\n\t\t\toffset,\n\t\t);\n\t\tif (textSincePreviousPart.trim() !== \"\") {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new ChatRequestAgentPart(agentRange, agentEditorRange, agent);\n\t}\n\n\tprivate tryToParseVariable(\n\t\tmessage: string,\n\t\toffset: number,\n\t\tposition: IPosition,\n\t\tparts: ReadonlyArray<IParsedChatRequestPart>,\n\t):\n\t\t| ChatRequestAgentPart\n\t\t| ChatRequestVariablePart\n\t\t| ChatRequestToolPart\n\t\t| undefined {\n\t\tconst nextVariableMatch = message.match(variableReg);\n\t\tif (!nextVariableMatch) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [full, name] = nextVariableMatch;\n\t\tconst variableArg = nextVariableMatch[2] ?? \"\";\n\t\tconst varRange = new OffsetRange(offset, offset + full.length);\n\t\tconst varEditorRange = new Range(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t\tposition.lineNumber,\n\t\t\tposition.column + full.length,\n\t\t);\n\t\tconst usedAgent = parts.find(\n\t\t\t(p): p is ChatRequestAgentPart => p instanceof ChatRequestAgentPart,\n\t\t);\n\t\tconst allowSlow =\n\t\t\t!usedAgent || usedAgent.agent.metadata.supportsSlowVariables;\n\n\t\t// TODO - not really handling duplicate variables names yet\n\t\tconst variable = this.variableService.getVariable(name);\n\t\tif (variable && (!variable.isSlow || allowSlow)) {\n\t\t\treturn new ChatRequestVariablePart(\n\t\t\t\tvarRange,\n\t\t\t\tvarEditorRange,\n\t\t\t\tname,\n\t\t\t\tvariableArg,\n\t\t\t\tvariable.id,\n\t\t\t);\n\t\t}\n\n\t\tconst tool = this.toolsService.getToolByName(name);\n\t\tif (\n\t\t\ttool &&\n\t\t\ttool.canBeInvokedManually &&\n\t\t\t(!usedAgent || usedAgent.agent.supportsToolReferences)\n\t\t) {\n\t\t\treturn new ChatRequestToolPart(\n\t\t\t\tvarRange,\n\t\t\t\tvarEditorRange,\n\t\t\t\tname,\n\t\t\t\ttool.id,\n\t\t\t);\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate tryToParseSlashCommand(\n\t\tremainingMessage: string,\n\t\tfullMessage: string,\n\t\toffset: number,\n\t\tposition: IPosition,\n\t\tparts: ReadonlyArray<IParsedChatRequestPart>,\n\t\tlocation: ChatAgentLocation,\n\t):\n\t\t| ChatRequestSlashCommandPart\n\t\t| ChatRequestAgentSubcommandPart\n\t\t| undefined {\n\t\tconst nextSlashMatch = remainingMessage.match(slashReg);\n\t\tif (!nextSlashMatch) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (parts.some((p) => p instanceof ChatRequestSlashCommandPart)) {\n\t\t\t// Only one slash command allowed\n\t\t\treturn;\n\t\t}\n\n\t\tconst [full, command] = nextSlashMatch;\n\t\tconst slashRange = new OffsetRange(offset, offset + full.length);\n\t\tconst slashEditorRange = new Range(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t\tposition.lineNumber,\n\t\t\tposition.column + full.length,\n\t\t);\n\n\t\tconst usedAgent = parts.find(\n\t\t\t(p): p is ChatRequestAgentPart => p instanceof ChatRequestAgentPart,\n\t\t);\n\t\tif (usedAgent) {\n\t\t\t// The slash command must come immediately after the agent\n\t\t\tif (\n\t\t\t\tparts.some(\n\t\t\t\t\t(p) =>\n\t\t\t\t\t\t(p instanceof ChatRequestTextPart &&\n\t\t\t\t\t\t\tp.text.trim() !== \"\") ||\n\t\t\t\t\t\t(!(p instanceof ChatRequestAgentPart) &&\n\t\t\t\t\t\t\t!(p instanceof ChatRequestTextPart)),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousPart = parts.at(-1);\n\t\t\tconst previousPartEnd = previousPart?.range.endExclusive ?? 0;\n\t\t\tconst textSincePreviousPart = fullMessage.slice(\n\t\t\t\tpreviousPartEnd,\n\t\t\t\toffset,\n\t\t\t);\n\t\t\tif (textSincePreviousPart.trim() !== \"\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst subCommand = usedAgent.agent.slashCommands.find(\n\t\t\t\t(c) => c.name === command,\n\t\t\t);\n\t\t\tif (subCommand) {\n\t\t\t\t// Valid agent subcommand\n\t\t\t\treturn new ChatRequestAgentSubcommandPart(\n\t\t\t\t\tslashRange,\n\t\t\t\t\tslashEditorRange,\n\t\t\t\t\tsubCommand,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst slashCommands =\n\t\t\t\tthis.slashCommandService.getCommands(location);\n\t\t\tconst slashCommand = slashCommands.find(\n\t\t\t\t(c) => c.command === command,\n\t\t\t);\n\t\t\tif (slashCommand) {\n\t\t\t\t// Valid standalone slash command\n\t\t\t\treturn new ChatRequestSlashCommandPart(\n\t\t\t\t\tslashRange,\n\t\t\t\t\tslashEditorRange,\n\t\t\t\t\tslashCommand,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// check for with default agent for this location\n\t\t\t\tconst defaultAgent =\n\t\t\t\t\tthis.agentService.getDefaultAgent(location);\n\t\t\t\tconst subCommand = defaultAgent?.slashCommands.find(\n\t\t\t\t\t(c) => c.name === command,\n\t\t\t\t);\n\t\t\t\tif (subCommand) {\n\t\t\t\t\t// Valid default agent subcommand\n\t\t\t\t\treturn new ChatRequestAgentSubcommandPart(\n\t\t\t\t\t\tslashRange,\n\t\t\t\t\t\tslashEditorRange,\n\t\t\t\t\t\tsubCommand,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate tryToParseDynamicVariable(\n\t\tmessage: string,\n\t\toffset: number,\n\t\tposition: IPosition,\n\t\treferences: ReadonlyArray<IDynamicVariable>,\n\t): ChatRequestDynamicVariablePart | undefined {\n\t\tconst refAtThisPosition = references.find(\n\t\t\t(r) =>\n\t\t\t\tr.range.startLineNumber === position.lineNumber &&\n\t\t\t\tr.range.startColumn === position.column,\n\t\t);\n\t\tif (refAtThisPosition) {\n\t\t\tconst length =\n\t\t\t\trefAtThisPosition.range.endColumn -\n\t\t\t\trefAtThisPosition.range.startColumn;\n\t\t\tconst text = message.substring(0, length);\n\t\t\tconst range = new OffsetRange(offset, offset + length);\n\t\t\treturn new ChatRequestDynamicVariablePart(\n\t\t\t\trange,\n\t\t\t\trefAtThisPosition.range,\n\t\t\t\ttext,\n\t\t\t\trefAtThisPosition.id,\n\t\t\t\trefAtThisPosition.modelDescription,\n\t\t\t\trefAtThisPosition.data,\n\t\t\t);\n\t\t}\n\n\t\treturn;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
