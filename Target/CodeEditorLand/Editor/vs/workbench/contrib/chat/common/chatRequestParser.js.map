{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatRequestParser.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OffsetRange } from '../../../../editor/common/core/offsetRange.js';\nimport { IPosition, Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { ChatAgentLocation, IChatAgentData, IChatAgentService } from './chatAgents.js';\nimport { ChatRequestAgentPart, ChatRequestAgentSubcommandPart, ChatRequestDynamicVariablePart, ChatRequestSlashCommandPart, ChatRequestTextPart, ChatRequestToolPart, ChatRequestVariablePart, IParsedChatRequest, IParsedChatRequestPart, chatAgentLeader, chatSubcommandLeader, chatVariableLeader } from './chatParserTypes.js';\nimport { IChatSlashCommandService } from './chatSlashCommands.js';\nimport { IChatVariablesService, IDynamicVariable } from './chatVariables.js';\nimport { ILanguageModelToolsService } from './languageModelToolsService.js';\n\nconst agentReg = /^@([\\w_\\-\\.]+)(?=(\\s|$|\\b))/i; // An @-agent\nconst variableReg = /^#([\\w_\\-]+)(:\\d+)?(?=(\\s|$|\\b))/i; // A #-variable with an optional numeric : arg (@response:2)\nconst slashReg = /\\/([\\w_\\-]+)(?=(\\s|$|\\b))/i; // A / command\n\nexport interface IChatParserContext {\n\t/** Used only as a disambiguator, when the query references an agent that has a duplicate with the same name. */\n\tselectedAgent?: IChatAgentData;\n}\n\nexport class ChatRequestParser {\n\tconstructor(\n\t\t@IChatAgentService private readonly agentService: IChatAgentService,\n\t\t@IChatVariablesService private readonly variableService: IChatVariablesService,\n\t\t@IChatSlashCommandService private readonly slashCommandService: IChatSlashCommandService,\n\t\t@ILanguageModelToolsService private readonly toolsService: ILanguageModelToolsService,\n\t) { }\n\n\tparseChatRequest(sessionId: string, message: string, location: ChatAgentLocation = ChatAgentLocation.Panel, context?: IChatParserContext): IParsedChatRequest {\n\t\tconst parts: IParsedChatRequestPart[] = [];\n\t\tconst references = this.variableService.getDynamicVariables(sessionId); // must access this list before any async calls\n\n\t\tlet lineNumber = 1;\n\t\tlet column = 1;\n\t\tfor (let i = 0; i < message.length; i++) {\n\t\t\tconst previousChar = message.charAt(i - 1);\n\t\t\tconst char = message.charAt(i);\n\t\t\tlet newPart: IParsedChatRequestPart | undefined;\n\t\t\tif (previousChar.match(/\\s/) || i === 0) {\n\t\t\t\tif (char === chatVariableLeader) {\n\t\t\t\t\tnewPart = this.tryToParseVariable(message.slice(i), i, new Position(lineNumber, column), parts);\n\t\t\t\t} else if (char === chatAgentLeader) {\n\t\t\t\t\tnewPart = this.tryToParseAgent(message.slice(i), message, i, new Position(lineNumber, column), parts, location, context);\n\t\t\t\t} else if (char === chatSubcommandLeader) {\n\t\t\t\t\tnewPart = this.tryToParseSlashCommand(message.slice(i), message, i, new Position(lineNumber, column), parts, location);\n\t\t\t\t}\n\n\t\t\t\tif (!newPart) {\n\t\t\t\t\tnewPart = this.tryToParseDynamicVariable(message.slice(i), i, new Position(lineNumber, column), references);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newPart) {\n\t\t\t\tif (i !== 0) {\n\t\t\t\t\t// Insert a part for all the text we passed over, then insert the new parsed part\n\t\t\t\t\tconst previousPart = parts.at(-1);\n\t\t\t\t\tconst previousPartEnd = previousPart?.range.endExclusive ?? 0;\n\t\t\t\t\tconst previousPartEditorRangeEndLine = previousPart?.editorRange.endLineNumber ?? 1;\n\t\t\t\t\tconst previousPartEditorRangeEndCol = previousPart?.editorRange.endColumn ?? 1;\n\t\t\t\t\tparts.push(new ChatRequestTextPart(\n\t\t\t\t\t\tnew OffsetRange(previousPartEnd, i),\n\t\t\t\t\t\tnew Range(previousPartEditorRangeEndLine, previousPartEditorRangeEndCol, lineNumber, column),\n\t\t\t\t\t\tmessage.slice(previousPartEnd, i)));\n\t\t\t\t}\n\n\t\t\t\tparts.push(newPart);\n\t\t\t}\n\n\t\t\tif (char === '\\n') {\n\t\t\t\tlineNumber++;\n\t\t\t\tcolumn = 1;\n\t\t\t} else {\n\t\t\t\tcolumn++;\n\t\t\t}\n\t\t}\n\n\t\tconst lastPart = parts.at(-1);\n\t\tconst lastPartEnd = lastPart?.range.endExclusive ?? 0;\n\t\tif (lastPartEnd < message.length) {\n\t\t\tparts.push(new ChatRequestTextPart(\n\t\t\t\tnew OffsetRange(lastPartEnd, message.length),\n\t\t\t\tnew Range(lastPart?.editorRange.endLineNumber ?? 1, lastPart?.editorRange.endColumn ?? 1, lineNumber, column),\n\t\t\t\tmessage.slice(lastPartEnd, message.length)));\n\t\t}\n\n\t\treturn {\n\t\t\tparts,\n\t\t\ttext: message,\n\t\t};\n\t}\n\n\tprivate tryToParseAgent(message: string, fullMessage: string, offset: number, position: IPosition, parts: Array<IParsedChatRequestPart>, location: ChatAgentLocation, context: IChatParserContext | undefined): ChatRequestAgentPart | ChatRequestVariablePart | undefined {\n\t\tconst nextAgentMatch = message.match(agentReg);\n\t\tif (!nextAgentMatch) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [full, name] = nextAgentMatch;\n\t\tconst agentRange = new OffsetRange(offset, offset + full.length);\n\t\tconst agentEditorRange = new Range(position.lineNumber, position.column, position.lineNumber, position.column + full.length);\n\n\t\tlet agents = this.agentService.getAgentsByName(name);\n\t\tif (!agents.length) {\n\t\t\tconst fqAgent = this.agentService.getAgentByFullyQualifiedId(name);\n\t\t\tif (fqAgent) {\n\t\t\t\tagents = [fqAgent];\n\t\t\t}\n\t\t}\n\n\t\t// If there is more than one agent with this name, and the user picked it from the suggest widget, then the selected agent should be in the\n\t\t// context and we use that one.\n\t\tconst agent = agents.length > 1 && context?.selectedAgent ?\n\t\t\tcontext.selectedAgent :\n\t\t\tagents.find((a) => a.locations.includes(location));\n\t\tif (!agent) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (parts.some(p => p instanceof ChatRequestAgentPart)) {\n\t\t\t// Only one agent allowed\n\t\t\treturn;\n\t\t}\n\n\t\t// The agent must come first\n\t\tif (parts.some(p => (p instanceof ChatRequestTextPart && p.text.trim() !== '') || !(p instanceof ChatRequestAgentPart))) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst previousPart = parts.at(-1);\n\t\tconst previousPartEnd = previousPart?.range.endExclusive ?? 0;\n\t\tconst textSincePreviousPart = fullMessage.slice(previousPartEnd, offset);\n\t\tif (textSincePreviousPart.trim() !== '') {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new ChatRequestAgentPart(agentRange, agentEditorRange, agent);\n\t}\n\n\tprivate tryToParseVariable(message: string, offset: number, position: IPosition, parts: ReadonlyArray<IParsedChatRequestPart>): ChatRequestAgentPart | ChatRequestVariablePart | ChatRequestToolPart | undefined {\n\t\tconst nextVariableMatch = message.match(variableReg);\n\t\tif (!nextVariableMatch) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [full, name] = nextVariableMatch;\n\t\tconst variableArg = nextVariableMatch[2] ?? '';\n\t\tconst varRange = new OffsetRange(offset, offset + full.length);\n\t\tconst varEditorRange = new Range(position.lineNumber, position.column, position.lineNumber, position.column + full.length);\n\t\tconst usedAgent = parts.find((p): p is ChatRequestAgentPart => p instanceof ChatRequestAgentPart);\n\t\tconst allowSlow = !usedAgent || usedAgent.agent.metadata.supportsSlowVariables;\n\n\t\t// TODO - not really handling duplicate variables names yet\n\t\tconst variable = this.variableService.getVariable(name);\n\t\tif (variable && (!variable.isSlow || allowSlow)) {\n\t\t\treturn new ChatRequestVariablePart(varRange, varEditorRange, name, variableArg, variable.id);\n\t\t}\n\n\t\tconst tool = this.toolsService.getToolByName(name);\n\t\tif (tool && tool.canBeInvokedManually && (!usedAgent || usedAgent.agent.supportsToolReferences)) {\n\t\t\treturn new ChatRequestToolPart(varRange, varEditorRange, name, tool.id);\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate tryToParseSlashCommand(remainingMessage: string, fullMessage: string, offset: number, position: IPosition, parts: ReadonlyArray<IParsedChatRequestPart>, location: ChatAgentLocation): ChatRequestSlashCommandPart | ChatRequestAgentSubcommandPart | undefined {\n\t\tconst nextSlashMatch = remainingMessage.match(slashReg);\n\t\tif (!nextSlashMatch) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (parts.some(p => p instanceof ChatRequestSlashCommandPart)) {\n\t\t\t// Only one slash command allowed\n\t\t\treturn;\n\t\t}\n\n\t\tconst [full, command] = nextSlashMatch;\n\t\tconst slashRange = new OffsetRange(offset, offset + full.length);\n\t\tconst slashEditorRange = new Range(position.lineNumber, position.column, position.lineNumber, position.column + full.length);\n\n\t\tconst usedAgent = parts.find((p): p is ChatRequestAgentPart => p instanceof ChatRequestAgentPart);\n\t\tif (usedAgent) {\n\t\t\t// The slash command must come immediately after the agent\n\t\t\tif (parts.some(p => (p instanceof ChatRequestTextPart && p.text.trim() !== '') || !(p instanceof ChatRequestAgentPart) && !(p instanceof ChatRequestTextPart))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousPart = parts.at(-1);\n\t\t\tconst previousPartEnd = previousPart?.range.endExclusive ?? 0;\n\t\t\tconst textSincePreviousPart = fullMessage.slice(previousPartEnd, offset);\n\t\t\tif (textSincePreviousPart.trim() !== '') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst subCommand = usedAgent.agent.slashCommands.find(c => c.name === command);\n\t\t\tif (subCommand) {\n\t\t\t\t// Valid agent subcommand\n\t\t\t\treturn new ChatRequestAgentSubcommandPart(slashRange, slashEditorRange, subCommand);\n\t\t\t}\n\t\t} else {\n\t\t\tconst slashCommands = this.slashCommandService.getCommands(location);\n\t\t\tconst slashCommand = slashCommands.find(c => c.command === command);\n\t\t\tif (slashCommand) {\n\t\t\t\t// Valid standalone slash command\n\t\t\t\treturn new ChatRequestSlashCommandPart(slashRange, slashEditorRange, slashCommand);\n\t\t\t} else {\n\t\t\t\t// check for with default agent for this location\n\t\t\t\tconst defaultAgent = this.agentService.getDefaultAgent(location);\n\t\t\t\tconst subCommand = defaultAgent?.slashCommands.find(c => c.name === command);\n\t\t\t\tif (subCommand) {\n\t\t\t\t\t// Valid default agent subcommand\n\t\t\t\t\treturn new ChatRequestAgentSubcommandPart(slashRange, slashEditorRange, subCommand);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate tryToParseDynamicVariable(message: string, offset: number, position: IPosition, references: ReadonlyArray<IDynamicVariable>): ChatRequestDynamicVariablePart | undefined {\n\t\tconst refAtThisPosition = references.find(r =>\n\t\t\tr.range.startLineNumber === position.lineNumber &&\n\t\t\tr.range.startColumn === position.column);\n\t\tif (refAtThisPosition) {\n\t\t\tconst length = refAtThisPosition.range.endColumn - refAtThisPosition.range.startColumn;\n\t\t\tconst text = message.substring(0, length);\n\t\t\tconst range = new OffsetRange(offset, offset + length);\n\t\t\treturn new ChatRequestDynamicVariablePart(range, refAtThisPosition.range, text, refAtThisPosition.id, refAtThisPosition.modelDescription, refAtThisPosition.data);\n\t\t}\n\n\t\treturn;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
