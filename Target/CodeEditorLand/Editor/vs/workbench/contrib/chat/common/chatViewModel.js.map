{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatViewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as marked from '../../../../base/common/marked/marked.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { annotateVulnerabilitiesInText } from './annotations.js';\nimport { getFullyQualifiedId, IChatAgentCommand, IChatAgentData, IChatAgentNameService, IChatAgentResult } from './chatAgents.js';\nimport { ChatModelInitState, IChatModel, IChatProgressRenderableResponseContent, IChatRequestModel, IChatRequestVariableEntry, IChatResponseModel, IChatTextEditGroup, IChatWelcomeMessageContent, IResponse } from './chatModel.js';\nimport { IParsedChatRequest } from './chatParserTypes.js';\nimport { ChatAgentVoteDirection, ChatAgentVoteDownReason, IChatCodeCitation, IChatContentReference, IChatFollowup, IChatProgressMessage, IChatResponseErrorDetails, IChatTask, IChatUsedContext } from './chatService.js';\nimport { countWords } from './chatWordCounter.js';\nimport { CodeBlockModelCollection } from './codeBlockModelCollection.js';\nimport { hash } from '../../../../base/common/hash.js';\n\nexport function isRequestVM(item: unknown): item is IChatRequestViewModel {\n\treturn !!item && typeof item === 'object' && 'message' in item;\n}\n\nexport function isResponseVM(item: unknown): item is IChatResponseViewModel {\n\treturn !!item && typeof (item as IChatResponseViewModel).setVote !== 'undefined';\n}\n\nexport function isWelcomeVM(item: unknown): item is IChatWelcomeMessageViewModel {\n\treturn !!item && typeof item === 'object' && 'content' in item;\n}\n\nexport type IChatViewModelChangeEvent = IChatAddRequestEvent | IChangePlaceholderEvent | IChatSessionInitEvent | null;\n\nexport interface IChatAddRequestEvent {\n\tkind: 'addRequest';\n}\n\nexport interface IChangePlaceholderEvent {\n\tkind: 'changePlaceholder';\n}\n\nexport interface IChatSessionInitEvent {\n\tkind: 'initialize';\n}\n\nexport interface IChatViewModel {\n\treadonly model: IChatModel;\n\treadonly initState: ChatModelInitState;\n\treadonly sessionId: string;\n\treadonly onDidDisposeModel: Event<void>;\n\treadonly onDidChange: Event<IChatViewModelChangeEvent>;\n\treadonly requestInProgress: boolean;\n\treadonly inputPlaceholder?: string;\n\tgetItems(): (IChatRequestViewModel | IChatResponseViewModel | IChatWelcomeMessageViewModel)[];\n\tsetInputPlaceholder(text: string): void;\n\tresetInputPlaceholder(): void;\n}\n\nexport interface IChatRequestViewModel {\n\treadonly id: string;\n\treadonly sessionId: string;\n\t/** This ID updates every time the underlying data changes */\n\treadonly dataId: string;\n\treadonly username: string;\n\treadonly avatarIcon?: URI | ThemeIcon;\n\treadonly message: IParsedChatRequest | IChatFollowup;\n\treadonly messageText: string;\n\treadonly attempt: number;\n\treadonly variables: IChatRequestVariableEntry[];\n\tcurrentRenderedHeight: number | undefined;\n\treadonly contentReferences?: ReadonlyArray<IChatContentReference>;\n\treadonly confirmation?: string;\n}\n\nexport interface IChatResponseMarkdownRenderData {\n\trenderedWordCount: number;\n\tlastRenderTime: number;\n\tisFullyRendered: boolean;\n\toriginalMarkdown: IMarkdownString;\n}\n\nexport interface IChatResponseMarkdownRenderData2 {\n\trenderedWordCount: number;\n\tlastRenderTime: number;\n\tisFullyRendered: boolean;\n\toriginalMarkdown: IMarkdownString;\n}\n\nexport interface IChatProgressMessageRenderData {\n\tprogressMessage: IChatProgressMessage;\n\n\t/**\n\t * Indicates whether this is part of a group of progress messages that are at the end of the response.\n\t * (Not whether this particular item is the very last one in the response).\n\t * Need to re-render and add to partsToRender when this changes.\n\t */\n\tisAtEndOfResponse: boolean;\n\n\t/**\n\t * Whether this progress message the very last item in the response.\n\t * Need to re-render to update spinner vs check when this changes.\n\t */\n\tisLast: boolean;\n}\n\nexport interface IChatTaskRenderData {\n\ttask: IChatTask;\n\tisSettled: boolean;\n\tprogressLength: number;\n}\n\nexport interface IChatResponseRenderData {\n\trenderedParts: IChatRendererContent[];\n\n\trenderedWordCount: number;\n\tlastRenderTime: number;\n}\n\n/**\n * Content type for references used during rendering, not in the model\n */\nexport interface IChatReferences {\n\treferences: ReadonlyArray<IChatContentReference>;\n\tkind: 'references';\n}\n\n/**\n * Content type for citations used during rendering, not in the model\n */\nexport interface IChatCodeCitations {\n\tcitations: ReadonlyArray<IChatCodeCitation>;\n\tkind: 'codeCitations';\n}\n\n/**\n * Type for content parts rendered by IChatListRenderer\n */\nexport type IChatRendererContent = IChatProgressRenderableResponseContent | IChatReferences | IChatCodeCitations;\n\nexport interface IChatLiveUpdateData {\n\tfirstWordTime: number;\n\tlastUpdateTime: number;\n\timpliedWordLoadRate: number;\n\tlastWordCount: number;\n}\n\nexport interface IChatResponseViewModel {\n\treadonly model: IChatResponseModel;\n\treadonly id: string;\n\treadonly sessionId: string;\n\t/** This ID updates every time the underlying data changes */\n\treadonly dataId: string;\n\t/** The ID of the associated IChatRequestViewModel */\n\treadonly requestId: string;\n\treadonly username: string;\n\treadonly avatarIcon?: URI | ThemeIcon;\n\treadonly agent?: IChatAgentData;\n\treadonly slashCommand?: IChatAgentCommand;\n\treadonly agentOrSlashCommandDetected: boolean;\n\treadonly response: IResponse;\n\treadonly usedContext: IChatUsedContext | undefined;\n\treadonly contentReferences: ReadonlyArray<IChatContentReference>;\n\treadonly codeCitations: ReadonlyArray<IChatCodeCitation>;\n\treadonly progressMessages: ReadonlyArray<IChatProgressMessage>;\n\treadonly isComplete: boolean;\n\treadonly isCanceled: boolean;\n\treadonly isStale: boolean;\n\treadonly vote: ChatAgentVoteDirection | undefined;\n\treadonly voteDownReason: ChatAgentVoteDownReason | undefined;\n\treadonly replyFollowups?: IChatFollowup[];\n\treadonly errorDetails?: IChatResponseErrorDetails;\n\treadonly result?: IChatAgentResult;\n\treadonly contentUpdateTimings?: IChatLiveUpdateData;\n\trenderData?: IChatResponseRenderData;\n\tcurrentRenderedHeight: number | undefined;\n\tsetVote(vote: ChatAgentVoteDirection): void;\n\tsetVoteDownReason(reason: ChatAgentVoteDownReason | undefined): void;\n\tusedReferencesExpanded?: boolean;\n\tvulnerabilitiesListExpanded: boolean;\n\tsetEditApplied(edit: IChatTextEditGroup, editCount: number): void;\n}\n\nexport class ChatViewModel extends Disposable implements IChatViewModel {\n\n\tprivate readonly _onDidDisposeModel = this._register(new Emitter<void>());\n\treadonly onDidDisposeModel = this._onDidDisposeModel.event;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<IChatViewModelChangeEvent>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly _items: (ChatRequestViewModel | ChatResponseViewModel)[] = [];\n\n\tprivate _inputPlaceholder: string | undefined = undefined;\n\tget inputPlaceholder(): string | undefined {\n\t\treturn this._inputPlaceholder;\n\t}\n\n\tget model(): IChatModel {\n\t\treturn this._model;\n\t}\n\n\tsetInputPlaceholder(text: string): void {\n\t\tthis._inputPlaceholder = text;\n\t\tthis._onDidChange.fire({ kind: 'changePlaceholder' });\n\t}\n\n\tresetInputPlaceholder(): void {\n\t\tthis._inputPlaceholder = undefined;\n\t\tthis._onDidChange.fire({ kind: 'changePlaceholder' });\n\t}\n\n\tget sessionId() {\n\t\treturn this._model.sessionId;\n\t}\n\n\tget requestInProgress(): boolean {\n\t\treturn this._model.requestInProgress;\n\t}\n\n\tget initState() {\n\t\treturn this._model.initState;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _model: IChatModel,\n\t\tpublic readonly codeBlockModelCollection: CodeBlockModelCollection,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\t_model.getRequests().forEach((request, i) => {\n\t\t\tconst requestModel = this.instantiationService.createInstance(ChatRequestViewModel, request);\n\t\t\tthis._items.push(requestModel);\n\t\t\tthis.updateCodeBlockTextModels(requestModel);\n\n\t\t\tif (request.response) {\n\t\t\t\tthis.onAddResponse(request.response);\n\t\t\t}\n\t\t});\n\n\t\tthis._register(_model.onDidDispose(() => this._onDidDisposeModel.fire()));\n\t\tthis._register(_model.onDidChange(e => {\n\t\t\tif (e.kind === 'addRequest') {\n\t\t\t\tconst requestModel = this.instantiationService.createInstance(ChatRequestViewModel, e.request);\n\t\t\t\tthis._items.push(requestModel);\n\t\t\t\tthis.updateCodeBlockTextModels(requestModel);\n\n\t\t\t\tif (e.request.response) {\n\t\t\t\t\tthis.onAddResponse(e.request.response);\n\t\t\t\t}\n\t\t\t} else if (e.kind === 'addResponse') {\n\t\t\t\tthis.onAddResponse(e.response);\n\t\t\t} else if (e.kind === 'removeRequest') {\n\t\t\t\tconst requestIdx = this._items.findIndex(item => isRequestVM(item) && item.id === e.requestId);\n\t\t\t\tif (requestIdx >= 0) {\n\t\t\t\t\tthis._items.splice(requestIdx, 1);\n\t\t\t\t}\n\n\t\t\t\tconst responseIdx = e.responseId && this._items.findIndex(item => isResponseVM(item) && item.id === e.responseId);\n\t\t\t\tif (typeof responseIdx === 'number' && responseIdx >= 0) {\n\t\t\t\t\tconst items = this._items.splice(responseIdx, 1);\n\t\t\t\t\tconst item = items[0];\n\t\t\t\t\tif (item instanceof ChatResponseViewModel) {\n\t\t\t\t\t\titem.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst modelEventToVmEvent: IChatViewModelChangeEvent = e.kind === 'addRequest' ? { kind: 'addRequest' } :\n\t\t\t\te.kind === 'initialize' ? { kind: 'initialize' } :\n\t\t\t\t\tnull;\n\t\t\tthis._onDidChange.fire(modelEventToVmEvent);\n\t\t}));\n\t}\n\n\tprivate onAddResponse(responseModel: IChatResponseModel) {\n\t\tconst response = this.instantiationService.createInstance(ChatResponseViewModel, responseModel);\n\t\tthis._register(response.onDidChange(() => {\n\t\t\tif (response.isComplete) {\n\t\t\t\tthis.updateCodeBlockTextModels(response);\n\t\t\t}\n\t\t\treturn this._onDidChange.fire(null);\n\t\t}));\n\t\tthis._items.push(response);\n\t\tthis.updateCodeBlockTextModels(response);\n\t}\n\n\tgetItems(): (IChatRequestViewModel | IChatResponseViewModel | IChatWelcomeMessageViewModel)[] {\n\t\treturn [...(this._model.welcomeMessage ? [this._model.welcomeMessage] : []), ...this._items];\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._items\n\t\t\t.filter((item): item is ChatResponseViewModel => item instanceof ChatResponseViewModel)\n\t\t\t.forEach((item: ChatResponseViewModel) => item.dispose());\n\t}\n\n\tupdateCodeBlockTextModels(model: IChatRequestViewModel | IChatResponseViewModel) {\n\t\tlet content: string;\n\t\tif (isRequestVM(model)) {\n\t\t\tcontent = model.messageText;\n\t\t} else {\n\t\t\tcontent = annotateVulnerabilitiesInText(model.response.value).map(x => x.content.value).join('');\n\t\t}\n\n\t\tlet codeBlockIndex = 0;\n\t\tmarked.walkTokens(marked.lexer(content), token => {\n\t\t\tif (token.type === 'code') {\n\t\t\t\tconst lang = token.lang || '';\n\t\t\t\tconst text = token.text;\n\t\t\t\tthis.codeBlockModelCollection.update(this._model.sessionId, model, codeBlockIndex++, { text, languageId: lang });\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class ChatRequestViewModel implements IChatRequestViewModel {\n\tget id() {\n\t\treturn this._model.id;\n\t}\n\n\tget dataId() {\n\t\treturn this.id + `_${ChatModelInitState[this._model.session.initState]}_${hash(this.variables)}`;\n\t}\n\n\tget sessionId() {\n\t\treturn this._model.session.sessionId;\n\t}\n\n\tget username() {\n\t\treturn this._model.username;\n\t}\n\n\tget avatarIcon() {\n\t\treturn this._model.avatarIconUri;\n\t}\n\n\tget message() {\n\t\treturn this._model.message;\n\t}\n\n\tget messageText() {\n\t\treturn this.message.text;\n\t}\n\n\tget attempt() {\n\t\treturn this._model.attempt;\n\t}\n\n\tget variables() {\n\t\treturn this._model.variableData.variables;\n\t}\n\n\tget contentReferences() {\n\t\treturn this._model.response?.contentReferences;\n\t}\n\n\tget confirmation() {\n\t\treturn this._model.confirmation;\n\t}\n\n\tcurrentRenderedHeight: number | undefined;\n\n\tconstructor(\n\t\tprivate readonly _model: IChatRequestModel,\n\t) { }\n}\n\nexport class ChatResponseViewModel extends Disposable implements IChatResponseViewModel {\n\tprivate _modelChangeCount = 0;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tget model() {\n\t\treturn this._model;\n\t}\n\n\tget id() {\n\t\treturn this._model.id;\n\t}\n\n\tget dataId() {\n\t\treturn this._model.id + `_${this._modelChangeCount}` + `_${ChatModelInitState[this._model.session.initState]}`;\n\t}\n\n\tget sessionId() {\n\t\treturn this._model.session.sessionId;\n\t}\n\n\tget username() {\n\t\tif (this.agent) {\n\t\t\tconst isAllowed = this.chatAgentNameService.getAgentNameRestriction(this.agent);\n\t\t\tif (isAllowed) {\n\t\t\t\treturn this.agent.fullName || this.agent.name;\n\t\t\t} else {\n\t\t\t\treturn getFullyQualifiedId(this.agent);\n\t\t\t}\n\t\t}\n\n\t\treturn this._model.username;\n\t}\n\n\tget avatarIcon() {\n\t\treturn this._model.avatarIcon;\n\t}\n\n\tget agent() {\n\t\treturn this._model.agent;\n\t}\n\n\tget slashCommand() {\n\t\treturn this._model.slashCommand;\n\t}\n\n\tget agentOrSlashCommandDetected() {\n\t\treturn this._model.agentOrSlashCommandDetected;\n\t}\n\n\tget response(): IResponse {\n\t\treturn this._model.response;\n\t}\n\n\tget usedContext(): IChatUsedContext | undefined {\n\t\treturn this._model.usedContext;\n\t}\n\n\tget contentReferences(): ReadonlyArray<IChatContentReference> {\n\t\treturn this._model.contentReferences;\n\t}\n\n\tget codeCitations(): ReadonlyArray<IChatCodeCitation> {\n\t\treturn this._model.codeCitations;\n\t}\n\n\tget progressMessages(): ReadonlyArray<IChatProgressMessage> {\n\t\treturn this._model.progressMessages;\n\t}\n\n\tget isComplete() {\n\t\treturn this._model.isComplete;\n\t}\n\n\tget isCanceled() {\n\t\treturn this._model.isCanceled;\n\t}\n\n\tget replyFollowups() {\n\t\treturn this._model.followups?.filter((f): f is IChatFollowup => f.kind === 'reply');\n\t}\n\n\tget result() {\n\t\treturn this._model.result;\n\t}\n\n\tget errorDetails(): IChatResponseErrorDetails | undefined {\n\t\treturn this.result?.errorDetails;\n\t}\n\n\tget vote() {\n\t\treturn this._model.vote;\n\t}\n\n\tget voteDownReason() {\n\t\treturn this._model.voteDownReason;\n\t}\n\n\tget requestId() {\n\t\treturn this._model.requestId;\n\t}\n\n\tget isStale() {\n\t\treturn this._model.isStale;\n\t}\n\n\trenderData: IChatResponseRenderData | undefined = undefined;\n\tcurrentRenderedHeight: number | undefined;\n\n\tprivate _usedReferencesExpanded: boolean | undefined;\n\tget usedReferencesExpanded(): boolean | undefined {\n\t\tif (typeof this._usedReferencesExpanded === 'boolean') {\n\t\t\treturn this._usedReferencesExpanded;\n\t\t}\n\n\t\treturn this.response.value.length === 0;\n\t}\n\n\tset usedReferencesExpanded(v: boolean) {\n\t\tthis._usedReferencesExpanded = v;\n\t}\n\n\tprivate _vulnerabilitiesListExpanded: boolean = false;\n\tget vulnerabilitiesListExpanded(): boolean {\n\t\treturn this._vulnerabilitiesListExpanded;\n\t}\n\n\tset vulnerabilitiesListExpanded(v: boolean) {\n\t\tthis._vulnerabilitiesListExpanded = v;\n\t}\n\n\tprivate _contentUpdateTimings: IChatLiveUpdateData | undefined = undefined;\n\tget contentUpdateTimings(): IChatLiveUpdateData | undefined {\n\t\treturn this._contentUpdateTimings;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _model: IChatResponseModel,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IChatAgentNameService private readonly chatAgentNameService: IChatAgentNameService,\n\t) {\n\t\tsuper();\n\n\t\tif (!_model.isComplete) {\n\t\t\tthis._contentUpdateTimings = {\n\t\t\t\tfirstWordTime: 0,\n\t\t\t\tlastUpdateTime: Date.now(),\n\t\t\t\timpliedWordLoadRate: 0,\n\t\t\t\tlastWordCount: 0\n\t\t\t};\n\t\t}\n\n\t\tthis._register(_model.onDidChange(() => {\n\t\t\t// This should be true, if the model is changing\n\t\t\tif (this._contentUpdateTimings) {\n\t\t\t\tconst now = Date.now();\n\t\t\t\tconst wordCount = countWords(_model.response.toString());\n\n\t\t\t\t// Apply a min time difference, or the rate is typically too high for first few words\n\t\t\t\tconst timeDiff = Math.max(now - this._contentUpdateTimings.firstWordTime, 250);\n\t\t\t\tconst impliedWordLoadRate = this._contentUpdateTimings.lastWordCount / (timeDiff / 1000);\n\t\t\t\tthis.trace('onDidChange', `Update- got ${this._contentUpdateTimings.lastWordCount} words over last ${timeDiff}ms = ${impliedWordLoadRate} words/s. ${wordCount} words are now available.`);\n\t\t\t\tthis._contentUpdateTimings = {\n\t\t\t\t\tfirstWordTime: this._contentUpdateTimings.firstWordTime === 0 && this.response.value.some(v => v.kind === 'markdownContent') ? now : this._contentUpdateTimings.firstWordTime,\n\t\t\t\t\tlastUpdateTime: now,\n\t\t\t\t\timpliedWordLoadRate,\n\t\t\t\t\tlastWordCount: wordCount\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.logService.warn('ChatResponseViewModel#onDidChange: got model update but contentUpdateTimings is not initialized');\n\t\t\t}\n\n\t\t\t// new data -> new id, new content to render\n\t\t\tthis._modelChangeCount++;\n\n\t\t\tthis._onDidChange.fire();\n\t\t}));\n\t}\n\n\tprivate trace(tag: string, message: string) {\n\t\tthis.logService.trace(`ChatResponseViewModel#${tag}: ${message}`);\n\t}\n\n\tsetVote(vote: ChatAgentVoteDirection): void {\n\t\tthis._modelChangeCount++;\n\t\tthis._model.setVote(vote);\n\t}\n\n\tsetVoteDownReason(reason: ChatAgentVoteDownReason | undefined): void {\n\t\tthis._modelChangeCount++;\n\t\tthis._model.setVoteDownReason(reason);\n\t}\n\n\tsetEditApplied(edit: IChatTextEditGroup, editCount: number) {\n\t\tthis._modelChangeCount++;\n\t\tthis._model.setEditApplied(edit, editCount);\n\t}\n}\n\nexport interface IChatWelcomeMessageViewModel {\n\treadonly id: string;\n\treadonly username: string;\n\treadonly avatarIcon?: URI | ThemeIcon;\n\treadonly content: IChatWelcomeMessageContent[];\n\treadonly sampleQuestions: IChatFollowup[];\n\tcurrentRenderedHeight?: number;\n}\n"],
  "mappings": "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",
  "names": []
}
