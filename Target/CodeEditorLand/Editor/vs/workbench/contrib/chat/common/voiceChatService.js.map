{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/voiceChatService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { rtrim } from \"../../../../base/common/strings.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tISpeechService,\n\ttype ISpeechToTextEvent,\n\tSpeechToTextStatus,\n} from \"../../speech/common/speechService.js\";\nimport { IChatAgentService } from \"./chatAgents.js\";\nimport type { IChatModel } from \"./chatModel.js\";\nimport { chatAgentLeader, chatSubcommandLeader } from \"./chatParserTypes.js\";\n\nexport const IVoiceChatService =\n\tcreateDecorator<IVoiceChatService>(\"voiceChatService\");\n\nexport interface IVoiceChatSessionOptions {\n\treadonly usesAgents?: boolean;\n\treadonly model?: IChatModel;\n}\n\nexport interface IVoiceChatService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Similar to `ISpeechService.createSpeechToTextSession`, but with\n\t * support for agent prefixes and command prefixes. For example,\n\t * if the user says \"at workspace slash fix this problem\", the result\n\t * will be \"@workspace /fix this problem\".\n\t */\n\tcreateVoiceChatSession(\n\t\ttoken: CancellationToken,\n\t\toptions: IVoiceChatSessionOptions,\n\t): Promise<IVoiceChatSession>;\n}\n\nexport interface IVoiceChatTextEvent extends ISpeechToTextEvent {\n\t/**\n\t * This property will be `true` when the text recognized\n\t * so far only consists of agent prefixes (`@workspace`)\n\t * and/or command prefixes (`@workspace /fix`).\n\t */\n\treadonly waitingForInput?: boolean;\n}\n\nexport interface IVoiceChatSession {\n\treadonly onDidChange: Event<IVoiceChatTextEvent>;\n}\n\ninterface IPhraseValue {\n\treadonly agent: string;\n\treadonly command?: string;\n}\n\nenum PhraseTextType {\n\tAGENT = 1,\n\tCOMMAND = 2,\n\tAGENT_AND_COMMAND = 3,\n}\n\nexport const VoiceChatInProgress = new RawContextKey<boolean>(\n\t\"voiceChatInProgress\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"voiceChatInProgress\",\n\t\t\t\"A speech-to-text session is in progress for chat.\",\n\t\t),\n\t},\n);\n\nexport class VoiceChatService extends Disposable implements IVoiceChatService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate static readonly AGENT_PREFIX = chatAgentLeader;\n\tprivate static readonly COMMAND_PREFIX = chatSubcommandLeader;\n\n\tprivate static readonly PHRASES_LOWER = {\n\t\t[this.AGENT_PREFIX]: \"at\",\n\t\t[this.COMMAND_PREFIX]: \"slash\",\n\t};\n\n\tprivate static readonly PHRASES_UPPER = {\n\t\t[this.AGENT_PREFIX]: \"At\",\n\t\t[this.COMMAND_PREFIX]: \"Slash\",\n\t};\n\n\tprivate static readonly CHAT_AGENT_ALIAS = new Map<string, string>([\n\t\t[\"vscode\", \"code\"],\n\t]);\n\n\tprivate readonly voiceChatInProgress = VoiceChatInProgress.bindTo(\n\t\tthis.contextKeyService,\n\t);\n\tprivate activeVoiceChatSessions = 0;\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate createPhrases(model?: IChatModel): Map<string, IPhraseValue> {\n\t\tconst phrases = new Map<string, IPhraseValue>();\n\n\t\tfor (const agent of this.chatAgentService.getActivatedAgents()) {\n\t\t\tconst agentPhrase =\n\t\t\t\t`${VoiceChatService.PHRASES_LOWER[VoiceChatService.AGENT_PREFIX]} ${VoiceChatService.CHAT_AGENT_ALIAS.get(agent.name) ?? agent.name}`.toLowerCase();\n\t\t\tphrases.set(agentPhrase, { agent: agent.name });\n\n\t\t\tfor (const slashCommand of agent.slashCommands) {\n\t\t\t\tconst slashCommandPhrase =\n\t\t\t\t\t`${VoiceChatService.PHRASES_LOWER[VoiceChatService.COMMAND_PREFIX]} ${slashCommand.name}`.toLowerCase();\n\t\t\t\tphrases.set(slashCommandPhrase, {\n\t\t\t\t\tagent: agent.name,\n\t\t\t\t\tcommand: slashCommand.name,\n\t\t\t\t});\n\n\t\t\t\tconst agentSlashCommandPhrase =\n\t\t\t\t\t`${agentPhrase} ${slashCommandPhrase}`.toLowerCase();\n\t\t\t\tphrases.set(agentSlashCommandPhrase, {\n\t\t\t\t\tagent: agent.name,\n\t\t\t\t\tcommand: slashCommand.name,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn phrases;\n\t}\n\n\tprivate toText(value: IPhraseValue, type: PhraseTextType): string {\n\t\tswitch (type) {\n\t\t\tcase PhraseTextType.AGENT:\n\t\t\t\treturn `${VoiceChatService.AGENT_PREFIX}${value.agent}`;\n\t\t\tcase PhraseTextType.COMMAND:\n\t\t\t\treturn `${VoiceChatService.COMMAND_PREFIX}${value.command}`;\n\t\t\tcase PhraseTextType.AGENT_AND_COMMAND:\n\t\t\t\treturn `${VoiceChatService.AGENT_PREFIX}${value.agent} ${VoiceChatService.COMMAND_PREFIX}${value.command}`;\n\t\t}\n\t}\n\n\tasync createVoiceChatSession(\n\t\ttoken: CancellationToken,\n\t\toptions: IVoiceChatSessionOptions,\n\t): Promise<IVoiceChatSession> {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = (dispose: boolean) => {\n\t\t\tthis.activeVoiceChatSessions = Math.max(\n\t\t\t\t0,\n\t\t\t\tthis.activeVoiceChatSessions - 1,\n\t\t\t);\n\t\t\tif (this.activeVoiceChatSessions === 0) {\n\t\t\t\tthis.voiceChatInProgress.reset();\n\t\t\t}\n\n\t\t\tif (dispose) {\n\t\t\t\tdisposables.dispose();\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(\n\t\t\ttoken.onCancellationRequested(() =>\n\t\t\t\tonSessionStoppedOrCanceled(true),\n\t\t\t),\n\t\t);\n\n\t\tlet detectedAgent = false;\n\t\tlet detectedSlashCommand = false;\n\n\t\tconst emitter = disposables.add(new Emitter<IVoiceChatTextEvent>());\n\t\tconst session = await this.speechService.createSpeechToTextSession(\n\t\t\ttoken,\n\t\t\t\"chat\",\n\t\t);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled(true);\n\t\t}\n\n\t\tconst phrases = this.createPhrases(options.model);\n\t\tdisposables.add(\n\t\t\tsession.onDidChange((e) => {\n\t\t\t\tswitch (e.status) {\n\t\t\t\t\tcase SpeechToTextStatus.Recognizing:\n\t\t\t\t\tcase SpeechToTextStatus.Recognized: {\n\t\t\t\t\t\tlet massagedEvent: IVoiceChatTextEvent = e;\n\t\t\t\t\t\tif (e.text) {\n\t\t\t\t\t\t\tconst startsWithAgent =\n\t\t\t\t\t\t\t\te.text.startsWith(\n\t\t\t\t\t\t\t\t\tVoiceChatService.PHRASES_UPPER[\n\t\t\t\t\t\t\t\t\t\tVoiceChatService.AGENT_PREFIX\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\te.text.startsWith(\n\t\t\t\t\t\t\t\t\tVoiceChatService.PHRASES_LOWER[\n\t\t\t\t\t\t\t\t\t\tVoiceChatService.AGENT_PREFIX\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst startsWithSlashCommand =\n\t\t\t\t\t\t\t\te.text.startsWith(\n\t\t\t\t\t\t\t\t\tVoiceChatService.PHRASES_UPPER[\n\t\t\t\t\t\t\t\t\t\tVoiceChatService.COMMAND_PREFIX\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\te.text.startsWith(\n\t\t\t\t\t\t\t\t\tVoiceChatService.PHRASES_LOWER[\n\t\t\t\t\t\t\t\t\t\tVoiceChatService.COMMAND_PREFIX\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (startsWithAgent || startsWithSlashCommand) {\n\t\t\t\t\t\t\t\tconst originalWords = e.text.split(\" \");\n\t\t\t\t\t\t\t\tlet transformedWords: string[] | undefined;\n\n\t\t\t\t\t\t\t\tlet waitingForInput = false;\n\n\t\t\t\t\t\t\t\t// Check for agent + slash command\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\toptions.usesAgents &&\n\t\t\t\t\t\t\t\t\tstartsWithAgent &&\n\t\t\t\t\t\t\t\t\t!detectedAgent &&\n\t\t\t\t\t\t\t\t\t!detectedSlashCommand &&\n\t\t\t\t\t\t\t\t\toriginalWords.length >= 4\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tconst phrase = phrases.get(\n\t\t\t\t\t\t\t\t\t\toriginalWords\n\t\t\t\t\t\t\t\t\t\t\t.slice(0, 4)\n\t\t\t\t\t\t\t\t\t\t\t.map((word) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.normalizeWord(word),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.join(\" \"),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (phrase) {\n\t\t\t\t\t\t\t\t\t\ttransformedWords = [\n\t\t\t\t\t\t\t\t\t\t\tthis.toText(\n\t\t\t\t\t\t\t\t\t\t\t\tphrase,\n\t\t\t\t\t\t\t\t\t\t\t\tPhraseTextType.AGENT_AND_COMMAND,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t...originalWords.slice(4),\n\t\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\t\twaitingForInput =\n\t\t\t\t\t\t\t\t\t\t\toriginalWords.length === 4;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\te.status ===\n\t\t\t\t\t\t\t\t\t\t\tSpeechToTextStatus.Recognized\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tdetectedAgent = true;\n\t\t\t\t\t\t\t\t\t\t\tdetectedSlashCommand = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Check for agent (if not done already)\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\toptions.usesAgents &&\n\t\t\t\t\t\t\t\t\tstartsWithAgent &&\n\t\t\t\t\t\t\t\t\t!detectedAgent &&\n\t\t\t\t\t\t\t\t\t!transformedWords &&\n\t\t\t\t\t\t\t\t\toriginalWords.length >= 2\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tconst phrase = phrases.get(\n\t\t\t\t\t\t\t\t\t\toriginalWords\n\t\t\t\t\t\t\t\t\t\t\t.slice(0, 2)\n\t\t\t\t\t\t\t\t\t\t\t.map((word) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.normalizeWord(word),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.join(\" \"),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (phrase) {\n\t\t\t\t\t\t\t\t\t\ttransformedWords = [\n\t\t\t\t\t\t\t\t\t\t\tthis.toText(\n\t\t\t\t\t\t\t\t\t\t\t\tphrase,\n\t\t\t\t\t\t\t\t\t\t\t\tPhraseTextType.AGENT,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t...originalWords.slice(2),\n\t\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\t\twaitingForInput =\n\t\t\t\t\t\t\t\t\t\t\toriginalWords.length === 2;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\te.status ===\n\t\t\t\t\t\t\t\t\t\t\tSpeechToTextStatus.Recognized\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tdetectedAgent = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Check for slash command (if not done already)\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tstartsWithSlashCommand &&\n\t\t\t\t\t\t\t\t\t!detectedSlashCommand &&\n\t\t\t\t\t\t\t\t\t!transformedWords &&\n\t\t\t\t\t\t\t\t\toriginalWords.length >= 2\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tconst phrase = phrases.get(\n\t\t\t\t\t\t\t\t\t\toriginalWords\n\t\t\t\t\t\t\t\t\t\t\t.slice(0, 2)\n\t\t\t\t\t\t\t\t\t\t\t.map((word) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.normalizeWord(word),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.join(\" \"),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (phrase) {\n\t\t\t\t\t\t\t\t\t\ttransformedWords = [\n\t\t\t\t\t\t\t\t\t\t\tthis.toText(\n\t\t\t\t\t\t\t\t\t\t\t\tphrase,\n\t\t\t\t\t\t\t\t\t\t\t\toptions.usesAgents &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t!detectedAgent\n\t\t\t\t\t\t\t\t\t\t\t\t\t? PhraseTextType.AGENT_AND_COMMAND\n\t\t\t\t\t\t\t\t\t\t\t\t\t: // rewrite `/fix` to `@workspace /foo` in this case\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPhraseTextType.COMMAND, // when we have not yet detected an agent before\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t...originalWords.slice(2),\n\t\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\t\twaitingForInput =\n\t\t\t\t\t\t\t\t\t\t\toriginalWords.length === 2;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\te.status ===\n\t\t\t\t\t\t\t\t\t\t\tSpeechToTextStatus.Recognized\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tdetectedSlashCommand = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tmassagedEvent = {\n\t\t\t\t\t\t\t\t\tstatus: e.status,\n\t\t\t\t\t\t\t\t\ttext: (\n\t\t\t\t\t\t\t\t\t\ttransformedWords ?? originalWords\n\t\t\t\t\t\t\t\t\t).join(\" \"),\n\t\t\t\t\t\t\t\t\twaitingForInput,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\temitter.fire(massagedEvent);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SpeechToTextStatus.Started:\n\t\t\t\t\t\tthis.activeVoiceChatSessions++;\n\t\t\t\t\t\tthis.voiceChatInProgress.set(true);\n\t\t\t\t\t\temitter.fire(e);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SpeechToTextStatus.Stopped:\n\t\t\t\t\t\tonSessionStoppedOrCanceled(false);\n\t\t\t\t\t\temitter.fire(e);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SpeechToTextStatus.Error:\n\t\t\t\t\t\temitter.fire(e);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\tonDidChange: emitter.event,\n\t\t};\n\t}\n\n\tprivate normalizeWord(word: string): string {\n\t\tword = rtrim(word, \".\");\n\t\tword = rtrim(word, \",\");\n\t\tword = rtrim(word, \"?\");\n\n\t\treturn word.toLowerCase();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["PhraseTextType"]
}
