{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/voiceChatService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { rtrim } from '../../../../base/common/strings.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IChatAgentService } from './chatAgents.js';\nimport { IChatModel } from './chatModel.js';\nimport { chatAgentLeader, chatSubcommandLeader } from './chatParserTypes.js';\nimport { ISpeechService, ISpeechToTextEvent, SpeechToTextStatus } from '../../speech/common/speechService.js';\n\nexport const IVoiceChatService = createDecorator<IVoiceChatService>('voiceChatService');\n\nexport interface IVoiceChatSessionOptions {\n\treadonly usesAgents?: boolean;\n\treadonly model?: IChatModel;\n}\n\nexport interface IVoiceChatService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Similar to `ISpeechService.createSpeechToTextSession`, but with\n\t * support for agent prefixes and command prefixes. For example,\n\t * if the user says \"at workspace slash fix this problem\", the result\n\t * will be \"@workspace /fix this problem\".\n\t */\n\tcreateVoiceChatSession(token: CancellationToken, options: IVoiceChatSessionOptions): Promise<IVoiceChatSession>;\n}\n\nexport interface IVoiceChatTextEvent extends ISpeechToTextEvent {\n\n\t/**\n\t * This property will be `true` when the text recognized\n\t * so far only consists of agent prefixes (`@workspace`)\n\t * and/or command prefixes (`@workspace /fix`).\n\t */\n\treadonly waitingForInput?: boolean;\n}\n\nexport interface IVoiceChatSession {\n\treadonly onDidChange: Event<IVoiceChatTextEvent>;\n}\n\ninterface IPhraseValue {\n\treadonly agent: string;\n\treadonly command?: string;\n}\n\nenum PhraseTextType {\n\tAGENT = 1,\n\tCOMMAND = 2,\n\tAGENT_AND_COMMAND = 3\n}\n\nexport const VoiceChatInProgress = new RawContextKey<boolean>('voiceChatInProgress', false, { type: 'boolean', description: localize('voiceChatInProgress', \"A speech-to-text session is in progress for chat.\") });\n\nexport class VoiceChatService extends Disposable implements IVoiceChatService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate static readonly AGENT_PREFIX = chatAgentLeader;\n\tprivate static readonly COMMAND_PREFIX = chatSubcommandLeader;\n\n\tprivate static readonly PHRASES_LOWER = {\n\t\t[this.AGENT_PREFIX]: 'at',\n\t\t[this.COMMAND_PREFIX]: 'slash'\n\t};\n\n\tprivate static readonly PHRASES_UPPER = {\n\t\t[this.AGENT_PREFIX]: 'At',\n\t\t[this.COMMAND_PREFIX]: 'Slash'\n\t};\n\n\tprivate static readonly CHAT_AGENT_ALIAS = new Map<string, string>([['vscode', 'code']]);\n\n\tprivate readonly voiceChatInProgress = VoiceChatInProgress.bindTo(this.contextKeyService);\n\tprivate activeVoiceChatSessions = 0;\n\n\tconstructor(\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate createPhrases(model?: IChatModel): Map<string, IPhraseValue> {\n\t\tconst phrases = new Map<string, IPhraseValue>();\n\n\t\tfor (const agent of this.chatAgentService.getActivatedAgents()) {\n\t\t\tconst agentPhrase = `${VoiceChatService.PHRASES_LOWER[VoiceChatService.AGENT_PREFIX]} ${VoiceChatService.CHAT_AGENT_ALIAS.get(agent.name) ?? agent.name}`.toLowerCase();\n\t\t\tphrases.set(agentPhrase, { agent: agent.name });\n\n\t\t\tfor (const slashCommand of agent.slashCommands) {\n\t\t\t\tconst slashCommandPhrase = `${VoiceChatService.PHRASES_LOWER[VoiceChatService.COMMAND_PREFIX]} ${slashCommand.name}`.toLowerCase();\n\t\t\t\tphrases.set(slashCommandPhrase, { agent: agent.name, command: slashCommand.name });\n\n\t\t\t\tconst agentSlashCommandPhrase = `${agentPhrase} ${slashCommandPhrase}`.toLowerCase();\n\t\t\t\tphrases.set(agentSlashCommandPhrase, { agent: agent.name, command: slashCommand.name });\n\t\t\t}\n\t\t}\n\n\t\treturn phrases;\n\t}\n\n\tprivate toText(value: IPhraseValue, type: PhraseTextType): string {\n\t\tswitch (type) {\n\t\t\tcase PhraseTextType.AGENT:\n\t\t\t\treturn `${VoiceChatService.AGENT_PREFIX}${value.agent}`;\n\t\t\tcase PhraseTextType.COMMAND:\n\t\t\t\treturn `${VoiceChatService.COMMAND_PREFIX}${value.command}`;\n\t\t\tcase PhraseTextType.AGENT_AND_COMMAND:\n\t\t\t\treturn `${VoiceChatService.AGENT_PREFIX}${value.agent} ${VoiceChatService.COMMAND_PREFIX}${value.command}`;\n\t\t}\n\t}\n\n\tasync createVoiceChatSession(token: CancellationToken, options: IVoiceChatSessionOptions): Promise<IVoiceChatSession> {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst onSessionStoppedOrCanceled = (dispose: boolean) => {\n\t\t\tthis.activeVoiceChatSessions = Math.max(0, this.activeVoiceChatSessions - 1);\n\t\t\tif (this.activeVoiceChatSessions === 0) {\n\t\t\t\tthis.voiceChatInProgress.reset();\n\t\t\t}\n\n\t\t\tif (dispose) {\n\t\t\t\tdisposables.dispose();\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(token.onCancellationRequested(() => onSessionStoppedOrCanceled(true)));\n\n\t\tlet detectedAgent = false;\n\t\tlet detectedSlashCommand = false;\n\n\t\tconst emitter = disposables.add(new Emitter<IVoiceChatTextEvent>());\n\t\tconst session = await this.speechService.createSpeechToTextSession(token, 'chat');\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tonSessionStoppedOrCanceled(true);\n\t\t}\n\n\t\tconst phrases = this.createPhrases(options.model);\n\t\tdisposables.add(session.onDidChange(e => {\n\t\t\tswitch (e.status) {\n\t\t\t\tcase SpeechToTextStatus.Recognizing:\n\t\t\t\tcase SpeechToTextStatus.Recognized: {\n\t\t\t\t\tlet massagedEvent: IVoiceChatTextEvent = e;\n\t\t\t\t\tif (e.text) {\n\t\t\t\t\t\tconst startsWithAgent = e.text.startsWith(VoiceChatService.PHRASES_UPPER[VoiceChatService.AGENT_PREFIX]) || e.text.startsWith(VoiceChatService.PHRASES_LOWER[VoiceChatService.AGENT_PREFIX]);\n\t\t\t\t\t\tconst startsWithSlashCommand = e.text.startsWith(VoiceChatService.PHRASES_UPPER[VoiceChatService.COMMAND_PREFIX]) || e.text.startsWith(VoiceChatService.PHRASES_LOWER[VoiceChatService.COMMAND_PREFIX]);\n\t\t\t\t\t\tif (startsWithAgent || startsWithSlashCommand) {\n\t\t\t\t\t\t\tconst originalWords = e.text.split(' ');\n\t\t\t\t\t\t\tlet transformedWords: string[] | undefined;\n\n\t\t\t\t\t\t\tlet waitingForInput = false;\n\n\t\t\t\t\t\t\t// Check for agent + slash command\n\t\t\t\t\t\t\tif (options.usesAgents && startsWithAgent && !detectedAgent && !detectedSlashCommand && originalWords.length >= 4) {\n\t\t\t\t\t\t\t\tconst phrase = phrases.get(originalWords.slice(0, 4).map(word => this.normalizeWord(word)).join(' '));\n\t\t\t\t\t\t\t\tif (phrase) {\n\t\t\t\t\t\t\t\t\ttransformedWords = [this.toText(phrase, PhraseTextType.AGENT_AND_COMMAND), ...originalWords.slice(4)];\n\n\t\t\t\t\t\t\t\t\twaitingForInput = originalWords.length === 4;\n\n\t\t\t\t\t\t\t\t\tif (e.status === SpeechToTextStatus.Recognized) {\n\t\t\t\t\t\t\t\t\t\tdetectedAgent = true;\n\t\t\t\t\t\t\t\t\t\tdetectedSlashCommand = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Check for agent (if not done already)\n\t\t\t\t\t\t\tif (options.usesAgents && startsWithAgent && !detectedAgent && !transformedWords && originalWords.length >= 2) {\n\t\t\t\t\t\t\t\tconst phrase = phrases.get(originalWords.slice(0, 2).map(word => this.normalizeWord(word)).join(' '));\n\t\t\t\t\t\t\t\tif (phrase) {\n\t\t\t\t\t\t\t\t\ttransformedWords = [this.toText(phrase, PhraseTextType.AGENT), ...originalWords.slice(2)];\n\n\t\t\t\t\t\t\t\t\twaitingForInput = originalWords.length === 2;\n\n\t\t\t\t\t\t\t\t\tif (e.status === SpeechToTextStatus.Recognized) {\n\t\t\t\t\t\t\t\t\t\tdetectedAgent = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Check for slash command (if not done already)\n\t\t\t\t\t\t\tif (startsWithSlashCommand && !detectedSlashCommand && !transformedWords && originalWords.length >= 2) {\n\t\t\t\t\t\t\t\tconst phrase = phrases.get(originalWords.slice(0, 2).map(word => this.normalizeWord(word)).join(' '));\n\t\t\t\t\t\t\t\tif (phrase) {\n\t\t\t\t\t\t\t\t\ttransformedWords = [this.toText(phrase, options.usesAgents && !detectedAgent ?\n\t\t\t\t\t\t\t\t\t\tPhraseTextType.AGENT_AND_COMMAND : \t// rewrite `/fix` to `@workspace /foo` in this case\n\t\t\t\t\t\t\t\t\t\tPhraseTextType.COMMAND\t\t\t\t// when we have not yet detected an agent before\n\t\t\t\t\t\t\t\t\t), ...originalWords.slice(2)];\n\n\t\t\t\t\t\t\t\t\twaitingForInput = originalWords.length === 2;\n\n\t\t\t\t\t\t\t\t\tif (e.status === SpeechToTextStatus.Recognized) {\n\t\t\t\t\t\t\t\t\t\tdetectedSlashCommand = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmassagedEvent = {\n\t\t\t\t\t\t\t\tstatus: e.status,\n\t\t\t\t\t\t\t\ttext: (transformedWords ?? originalWords).join(' '),\n\t\t\t\t\t\t\t\twaitingForInput\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\temitter.fire(massagedEvent);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase SpeechToTextStatus.Started:\n\t\t\t\t\tthis.activeVoiceChatSessions++;\n\t\t\t\t\tthis.voiceChatInProgress.set(true);\n\t\t\t\t\temitter.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Stopped:\n\t\t\t\t\tonSessionStoppedOrCanceled(false);\n\t\t\t\t\temitter.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpeechToTextStatus.Error:\n\t\t\t\t\temitter.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\treturn {\n\t\t\tonDidChange: emitter.event\n\t\t};\n\t}\n\n\tprivate normalizeWord(word: string): string {\n\t\tword = rtrim(word, '.');\n\t\tword = rtrim(word, ',');\n\t\tword = rtrim(word, '?');\n\n\t\treturn word.toLowerCase();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["PhraseTextType"]
}
