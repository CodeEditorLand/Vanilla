{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatParserTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { revive } from '../../../../base/common/marshalling.js';\nimport { IOffsetRange, OffsetRange } from '../../../../editor/common/core/offsetRange.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { ChatAgentLocation, IChatAgentCommand, IChatAgentData, IChatAgentService, reviveSerializedAgent } from './chatAgents.js';\nimport { IChatSlashData } from './chatSlashCommands.js';\nimport { IChatRequestVariableValue } from './chatVariables.js';\n\n// These are in a separate file to avoid circular dependencies with the dependencies of the parser\n\nexport interface IParsedChatRequest {\n\treadonly parts: ReadonlyArray<IParsedChatRequestPart>;\n\treadonly text: string;\n}\n\nexport interface IParsedChatRequestPart {\n\treadonly kind: string; // for serialization\n\treadonly range: IOffsetRange;\n\treadonly editorRange: IRange;\n\treadonly text: string;\n\t/** How this part is represented in the prompt going to the agent */\n\treadonly promptText: string;\n}\n\nexport function getPromptText(request: IParsedChatRequest): { message: string; diff: number } {\n\tconst message = request.parts.map(r => r.promptText).join('').trimStart();\n\tconst diff = request.text.length - message.length;\n\n\treturn { message, diff };\n}\n\nexport class ChatRequestTextPart implements IParsedChatRequestPart {\n\tstatic readonly Kind = 'text';\n\treadonly kind = ChatRequestTextPart.Kind;\n\tconstructor(readonly range: OffsetRange, readonly editorRange: IRange, readonly text: string) { }\n\n\tget promptText(): string {\n\t\treturn this.text;\n\t}\n}\n\n// warning, these also show up in a regex in the parser\nexport const chatVariableLeader = '#';\nexport const chatAgentLeader = '@';\nexport const chatSubcommandLeader = '/';\n\n/**\n * An invocation of a static variable that can be resolved by the variable service\n */\nexport class ChatRequestVariablePart implements IParsedChatRequestPart {\n\tstatic readonly Kind = 'var';\n\treadonly kind = ChatRequestVariablePart.Kind;\n\tconstructor(readonly range: OffsetRange, readonly editorRange: IRange, readonly variableName: string, readonly variableArg: string, readonly variableId: string) { }\n\n\tget text(): string {\n\t\tconst argPart = this.variableArg ? `:${this.variableArg}` : '';\n\t\treturn `${chatVariableLeader}${this.variableName}${argPart}`;\n\t}\n\n\tget promptText(): string {\n\t\treturn this.text;\n\t}\n}\n\n/**\n * An invocation of a tool\n */\nexport class ChatRequestToolPart implements IParsedChatRequestPart {\n\tstatic readonly Kind = 'tool';\n\treadonly kind = ChatRequestToolPart.Kind;\n\tconstructor(readonly range: OffsetRange, readonly editorRange: IRange, readonly toolName: string, readonly toolId: string) { }\n\n\tget text(): string {\n\t\treturn `${chatVariableLeader}${this.toolName}`;\n\t}\n\n\tget promptText(): string {\n\t\treturn this.text;\n\t}\n}\n\n/**\n * An invocation of an agent that can be resolved by the agent service\n */\nexport class ChatRequestAgentPart implements IParsedChatRequestPart {\n\tstatic readonly Kind = 'agent';\n\treadonly kind = ChatRequestAgentPart.Kind;\n\tconstructor(readonly range: OffsetRange, readonly editorRange: IRange, readonly agent: IChatAgentData) { }\n\n\tget text(): string {\n\t\treturn `${chatAgentLeader}${this.agent.name}`;\n\t}\n\n\tget promptText(): string {\n\t\treturn '';\n\t}\n}\n\n/**\n * An invocation of an agent's subcommand\n */\nexport class ChatRequestAgentSubcommandPart implements IParsedChatRequestPart {\n\tstatic readonly Kind = 'subcommand';\n\treadonly kind = ChatRequestAgentSubcommandPart.Kind;\n\tconstructor(readonly range: OffsetRange, readonly editorRange: IRange, readonly command: IChatAgentCommand) { }\n\n\tget text(): string {\n\t\treturn `${chatSubcommandLeader}${this.command.name}`;\n\t}\n\n\tget promptText(): string {\n\t\treturn '';\n\t}\n}\n\n/**\n * An invocation of a standalone slash command\n */\nexport class ChatRequestSlashCommandPart implements IParsedChatRequestPart {\n\tstatic readonly Kind = 'slash';\n\treadonly kind = ChatRequestSlashCommandPart.Kind;\n\tconstructor(readonly range: OffsetRange, readonly editorRange: IRange, readonly slashCommand: IChatSlashData) { }\n\n\tget text(): string {\n\t\treturn `${chatSubcommandLeader}${this.slashCommand.command}`;\n\t}\n\n\tget promptText(): string {\n\t\treturn `${chatSubcommandLeader}${this.slashCommand.command}`;\n\t}\n}\n\n/**\n * An invocation of a dynamic reference like '#file:'\n */\nexport class ChatRequestDynamicVariablePart implements IParsedChatRequestPart {\n\tstatic readonly Kind = 'dynamic';\n\treadonly kind = ChatRequestDynamicVariablePart.Kind;\n\tconstructor(readonly range: OffsetRange, readonly editorRange: IRange, readonly text: string, readonly id: string, readonly modelDescription: string | undefined, readonly data: IChatRequestVariableValue) { }\n\n\tget referenceText(): string {\n\t\treturn this.text.replace(chatVariableLeader, '');\n\t}\n\n\tget promptText(): string {\n\t\treturn this.text;\n\t}\n}\n\nexport function reviveParsedChatRequest(serialized: IParsedChatRequest): IParsedChatRequest {\n\treturn {\n\t\ttext: serialized.text,\n\t\tparts: serialized.parts.map(part => {\n\t\t\tif (part.kind === ChatRequestTextPart.Kind) {\n\t\t\t\treturn new ChatRequestTextPart(\n\t\t\t\t\tnew OffsetRange(part.range.start, part.range.endExclusive),\n\t\t\t\t\tpart.editorRange,\n\t\t\t\t\tpart.text\n\t\t\t\t);\n\t\t\t} else if (part.kind === ChatRequestVariablePart.Kind) {\n\t\t\t\treturn new ChatRequestVariablePart(\n\t\t\t\t\tnew OffsetRange(part.range.start, part.range.endExclusive),\n\t\t\t\t\tpart.editorRange,\n\t\t\t\t\t(part as ChatRequestVariablePart).variableName,\n\t\t\t\t\t(part as ChatRequestVariablePart).variableArg,\n\t\t\t\t\t(part as ChatRequestVariablePart).variableId || '',\n\t\t\t\t);\n\t\t\t} else if (part.kind === ChatRequestToolPart.Kind) {\n\t\t\t\treturn new ChatRequestToolPart(\n\t\t\t\t\tnew OffsetRange(part.range.start, part.range.endExclusive),\n\t\t\t\t\tpart.editorRange,\n\t\t\t\t\t(part as ChatRequestToolPart).toolName,\n\t\t\t\t\t(part as ChatRequestToolPart).toolId\n\t\t\t\t);\n\t\t\t} else if (part.kind === ChatRequestAgentPart.Kind) {\n\t\t\t\tlet agent = (part as ChatRequestAgentPart).agent;\n\t\t\t\tagent = reviveSerializedAgent(agent);\n\n\t\t\t\treturn new ChatRequestAgentPart(\n\t\t\t\t\tnew OffsetRange(part.range.start, part.range.endExclusive),\n\t\t\t\t\tpart.editorRange,\n\t\t\t\t\tagent\n\t\t\t\t);\n\t\t\t} else if (part.kind === ChatRequestAgentSubcommandPart.Kind) {\n\t\t\t\treturn new ChatRequestAgentSubcommandPart(\n\t\t\t\t\tnew OffsetRange(part.range.start, part.range.endExclusive),\n\t\t\t\t\tpart.editorRange,\n\t\t\t\t\t(part as ChatRequestAgentSubcommandPart).command\n\t\t\t\t);\n\t\t\t} else if (part.kind === ChatRequestSlashCommandPart.Kind) {\n\t\t\t\treturn new ChatRequestSlashCommandPart(\n\t\t\t\t\tnew OffsetRange(part.range.start, part.range.endExclusive),\n\t\t\t\t\tpart.editorRange,\n\t\t\t\t\t(part as ChatRequestSlashCommandPart).slashCommand\n\t\t\t\t);\n\t\t\t} else if (part.kind === ChatRequestDynamicVariablePart.Kind) {\n\t\t\t\treturn new ChatRequestDynamicVariablePart(\n\t\t\t\t\tnew OffsetRange(part.range.start, part.range.endExclusive),\n\t\t\t\t\tpart.editorRange,\n\t\t\t\t\t(part as ChatRequestDynamicVariablePart).text,\n\t\t\t\t\t(part as ChatRequestDynamicVariablePart).id,\n\t\t\t\t\t(part as ChatRequestDynamicVariablePart).modelDescription,\n\t\t\t\t\trevive((part as ChatRequestDynamicVariablePart).data)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unknown chat request part: ${part.kind}`);\n\t\t\t}\n\t\t})\n\t};\n}\n\nexport function extractAgentAndCommand(parsed: IParsedChatRequest): { agentPart: ChatRequestAgentPart | undefined; commandPart: ChatRequestAgentSubcommandPart | undefined } {\n\tconst agentPart = parsed.parts.find((r): r is ChatRequestAgentPart => r instanceof ChatRequestAgentPart);\n\tconst commandPart = parsed.parts.find((r): r is ChatRequestAgentSubcommandPart => r instanceof ChatRequestAgentSubcommandPart);\n\treturn { agentPart, commandPart };\n}\n\nexport function formatChatQuestion(chatAgentService: IChatAgentService, location: ChatAgentLocation, prompt: string, participant: string | null = null, command: string | null = null): string | undefined {\n\tlet question = '';\n\tif (participant && participant !== chatAgentService.getDefaultAgent(location)?.id) {\n\t\tconst agent = chatAgentService.getAgent(participant);\n\t\tif (!agent) {\n\t\t\t// Refers to agent that doesn't exist\n\t\t\treturn undefined;\n\t\t}\n\n\t\tquestion += `${chatAgentLeader}${agent.name} `;\n\t\tif (command) {\n\t\t\tquestion += `${chatSubcommandLeader}${command} `;\n\t\t}\n\t}\n\treturn question + prompt;\n}\n"],
  "mappings": "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",
  "names": []
}
