{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from \"../../../../base/common/async.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { toErrorMessage } from \"../../../../base/common/errorMessage.js\";\nimport { ErrorNoTelemetry } from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { MarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../../base/common/marshalling.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { Progress } from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchAssignmentService } from \"../../../services/assignment/common/assignmentService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport {\n\tChatAgentLocation,\n\ttype IChatAgent,\n\ttype IChatAgentCommand,\n\ttype IChatAgentData,\n\ttype IChatAgentHistoryEntry,\n\ttype IChatAgentRequest,\n\ttype IChatAgentResult,\n\tIChatAgentService,\n} from \"./chatAgents.js\";\nimport { CONTEXT_VOTE_UP_ENABLED } from \"./chatContextKeys.js\";\nimport {\n\tChatModel,\n\tChatRequestModel,\n\tChatRequestRemovalReason,\n\tChatWelcomeMessageModel,\n\ttype IChatModel,\n\ttype IChatRequestModel,\n\ttype IChatRequestVariableData,\n\ttype IChatResponseModel,\n\ttype IExportableChatData,\n\ttype ISerializableChatData,\n\ttype ISerializableChatDataIn,\n\ttype ISerializableChatsData,\n\tnormalizeSerializableChatData,\n\tupdateRanges,\n} from \"./chatModel.js\";\nimport {\n\tChatRequestAgentPart,\n\tChatRequestAgentSubcommandPart,\n\tChatRequestSlashCommandPart,\n\ttype IParsedChatRequest,\n\tchatAgentLeader,\n\tchatSubcommandLeader,\n\tgetPromptText,\n} from \"./chatParserTypes.js\";\nimport { ChatRequestParser } from \"./chatRequestParser.js\";\nimport type {\n\tIChatCompleteResponse,\n\tIChatDetail,\n\tIChatFollowup,\n\tIChatProgress,\n\tIChatSendRequestData,\n\tIChatSendRequestOptions,\n\tIChatSendRequestResponseState,\n\tIChatService,\n\tIChatTransferredSessionData,\n\tIChatUserActionEvent,\n} from \"./chatService.js\";\nimport { ChatServiceTelemetry } from \"./chatServiceTelemetry.js\";\nimport { IChatSlashCommandService } from \"./chatSlashCommands.js\";\nimport { IChatVariablesService } from \"./chatVariables.js\";\nimport { ChatMessageRole, type IChatMessage } from \"./languageModels.js\";\n\nconst serializedChatKey = \"interactive.sessions\";\n\nconst globalChatKey = \"chat.workspaceTransfer\";\ninterface IChatTransfer {\n\ttoWorkspace: UriComponents;\n\ttimestampInMilliseconds: number;\n\tchat: ISerializableChatData;\n\tinputValue: string;\n}\nconst SESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS = 1000 * 60;\n\ntype ChatProviderInvokedEvent = {\n\ttimeToFirstProgress: number | undefined;\n\ttotalTime: number | undefined;\n\tresult: \"success\" | \"error\" | \"errorWithOutput\" | \"cancelled\" | \"filtered\";\n\trequestType: \"string\" | \"followup\" | \"slashCommand\";\n\tchatSessionId: string;\n\tagent: string;\n\tagentExtensionId: string | undefined;\n\tslashCommand: string | undefined;\n\tlocation: ChatAgentLocation;\n\tcitations: number;\n\tnumCodeBlocks: number;\n\tisParticipantDetected: boolean;\n};\n\ntype ChatProviderInvokedClassification = {\n\ttimeToFirstProgress: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"The time in milliseconds from invoking the provider to getting the first data.\";\n\t};\n\ttotalTime: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"The total time it took to run the provider's `provideResponseWithProgress`.\";\n\t};\n\tresult: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Whether invoking the ChatProvider resulted in an error.\";\n\t};\n\trequestType: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The type of request that the user made.\";\n\t};\n\tchatSessionId: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"A random ID for the session.\";\n\t};\n\tagent: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The type of agent used.\";\n\t};\n\tagentExtensionId: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The extension that contributed the agent.\";\n\t};\n\tslashCommand?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The type of slashCommand used.\";\n\t};\n\tlocation: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The location at which chat request was made.\";\n\t};\n\tcitations: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The number of public code citations that were returned with the response.\";\n\t};\n\tnumCodeBlocks: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The number of code blocks in the response.\";\n\t};\n\tisParticipantDetected: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Whether the participant was automatically detected.\";\n\t};\n\towner: \"roblourens\";\n\tcomment: \"Provides insight into the performance of Chat agents.\";\n};\n\nconst maxPersistedSessions = 25;\n\nclass CancellableRequest implements IDisposable {\n\tconstructor(\n\t\tpublic readonly cancellationTokenSource: CancellationTokenSource,\n\t\tpublic requestId?: string | undefined,\n\t) {}\n\n\tdispose() {\n\t\tthis.cancellationTokenSource.dispose();\n\t}\n\n\tcancel() {\n\t\tthis.cancellationTokenSource.cancel();\n\t}\n}\n\nexport class ChatService extends Disposable implements IChatService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _sessionModels = this._register(\n\t\tnew DisposableMap<string, ChatModel>(),\n\t);\n\tprivate readonly _pendingRequests = this._register(\n\t\tnew DisposableMap<string, CancellableRequest>(),\n\t);\n\tprivate _persistedSessions: ISerializableChatsData;\n\n\t/** Just for empty windows, need to enforce that a chat was deleted, even though other windows still have it */\n\tprivate _deletedChatIds = new Set<string>();\n\n\tprivate _transferredSessionData: IChatTransferredSessionData | undefined;\n\tpublic get transferredSessionData():\n\t\t| IChatTransferredSessionData\n\t\t| undefined {\n\t\treturn this._transferredSessionData;\n\t}\n\n\tprivate readonly _onDidPerformUserAction = this._register(\n\t\tnew Emitter<IChatUserActionEvent>(),\n\t);\n\tpublic readonly onDidPerformUserAction: Event<IChatUserActionEvent> =\n\t\tthis._onDidPerformUserAction.event;\n\n\tprivate readonly _onDidDisposeSession = this._register(\n\t\tnew Emitter<{\n\t\t\tsessionId: string;\n\t\t\treason: \"initializationFailed\" | \"cleared\";\n\t\t}>(),\n\t);\n\tpublic readonly onDidDisposeSession = this._onDidDisposeSession.event;\n\n\tprivate readonly _sessionFollowupCancelTokens = this._register(\n\t\tnew DisposableMap<string, CancellationTokenSource>(),\n\t);\n\tprivate readonly _chatServiceTelemetry: ChatServiceTelemetry;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IChatSlashCommandService private readonly chatSlashCommandService: IChatSlashCommandService,\n\t\t@IChatVariablesService private readonly chatVariablesService: IChatVariablesService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@IWorkbenchAssignmentService workbenchAssignmentService: IWorkbenchAssignmentService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._chatServiceTelemetry = this.instantiationService.createInstance(ChatServiceTelemetry);\n\t\tconst isEmptyWindow = !workspaceContextService.getWorkspace().folders.length;\n\t\tconst sessionData = storageService.get(serializedChatKey, isEmptyWindow ? StorageScope.APPLICATION : StorageScope.WORKSPACE, '');\n\t\tif (sessionData) {\n\t\t\tthis._persistedSessions = this.deserializeChats(sessionData);\n\t\t\tconst countsForLog = Object.keys(this._persistedSessions).length;\n\t\t\tif (countsForLog > 0) {\n\t\t\t\tthis.trace('constructor', `Restored ${countsForLog} persisted sessions`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._persistedSessions = {};\n\t\t}\n\n\t\tconst transferredData = this.getTransferredSessionData();\n\t\tconst transferredChat = transferredData?.chat;\n\t\tif (transferredChat) {\n\t\t\tthis.trace('constructor', `Transferred session ${transferredChat.sessionId}`);\n\t\t\tthis._persistedSessions[transferredChat.sessionId] = transferredChat;\n\t\t\tthis._transferredSessionData = { sessionId: transferredChat.sessionId, inputValue: transferredData.inputValue };\n\t\t}\n\n\t\tthis._register(storageService.onWillSaveState(() => this.saveState()));\n\n\t\tconst voteUpEnabled = CONTEXT_VOTE_UP_ENABLED.bindTo(contextKeyService);\n\t\tworkbenchAssignmentService.getTreatment('chatVoteUpEnabled')\n\t\t\t.then(value => voteUpEnabled.set(!!value));\n\t}\n\n\tisEnabled(location: ChatAgentLocation): boolean {\n\t\treturn (\n\t\t\tthis.chatAgentService.getContributedDefaultAgent(location) !==\n\t\t\tundefined\n\t\t);\n\t}\n\n\tprivate saveState(): void {\n\t\tconst liveChats = Array.from(this._sessionModels.values())\n\t\t\t.filter(\n\t\t\t\t(session) =>\n\t\t\t\t\tsession.initialLocation === ChatAgentLocation.Panel,\n\t\t\t)\n\t\t\t.filter((session) => session.getRequests().length > 0);\n\n\t\tconst isEmptyWindow =\n\t\t\t!this.workspaceContextService.getWorkspace().folders.length;\n\t\tif (isEmptyWindow) {\n\t\t\tthis.syncEmptyWindowChats(liveChats);\n\t\t} else {\n\t\t\tlet allSessions: (ChatModel | ISerializableChatData)[] = liveChats;\n\t\t\tallSessions = allSessions.concat(\n\t\t\t\tObject.values(this._persistedSessions)\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(session) =>\n\t\t\t\t\t\t\t!this._sessionModels.has(session.sessionId),\n\t\t\t\t\t)\n\t\t\t\t\t.filter((session) => session.requests.length),\n\t\t\t);\n\t\t\tallSessions.sort(\n\t\t\t\t(a, b) => (b.creationDate ?? 0) - (a.creationDate ?? 0),\n\t\t\t);\n\t\t\tallSessions = allSessions.slice(0, maxPersistedSessions);\n\t\t\tif (allSessions.length) {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"onWillSaveState\",\n\t\t\t\t\t`Persisting ${allSessions.length} sessions`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst serialized = JSON.stringify(allSessions);\n\n\t\t\tif (allSessions.length) {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"onWillSaveState\",\n\t\t\t\t\t`Persisting ${serialized.length} chars`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.storageService.store(\n\t\t\t\tserializedChatKey,\n\t\t\t\tserialized,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\n\t\tthis._deletedChatIds.clear();\n\t}\n\n\tprivate syncEmptyWindowChats(thisWindowChats: ChatModel[]): void {\n\t\t// Note- an unavoidable race condition exists here. If there are multiple empty windows open, and the user quits the application, then the focused\n\t\t// window may lose active chats, because all windows are reading and writing to storageService at the same time. This can't be fixed without some\n\t\t// kind of locking, but in reality, the focused window will likely have run `saveState` at some point, like on a window focus change, and it will\n\t\t// generally be fine.\n\t\tconst sessionData = this.storageService.get(\n\t\t\tserializedChatKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t\t\"\",\n\t\t);\n\n\t\tconst originalPersistedSessions = this._persistedSessions;\n\t\tlet persistedSessions: ISerializableChatsData;\n\t\tif (sessionData) {\n\t\t\tpersistedSessions = this.deserializeChats(sessionData);\n\t\t\tconst countsForLog = Object.keys(persistedSessions).length;\n\t\t\tif (countsForLog > 0) {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"constructor\",\n\t\t\t\t\t`Restored ${countsForLog} persisted sessions`,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tpersistedSessions = {};\n\t\t}\n\n\t\tthis._deletedChatIds.forEach((id) => delete persistedSessions[id]);\n\n\t\t// Has the chat in this window been updated, and then closed? Overwrite the old persisted chats.\n\t\tObject.values(originalPersistedSessions).forEach((session) => {\n\t\t\tconst persistedSession = persistedSessions[session.sessionId];\n\t\t\tif (\n\t\t\t\tpersistedSession &&\n\t\t\t\tsession.requests.length > persistedSession.requests.length\n\t\t\t) {\n\t\t\t\t// We will add a 'modified date' at some point, but comparing the number of requests is good enough\n\t\t\t\tpersistedSessions[session.sessionId] = session;\n\t\t\t} else if (!persistedSession && session.isNew) {\n\t\t\t\t// This session was created in this window, and hasn't been persisted yet\n\t\t\t\tsession.isNew = false;\n\t\t\t\tpersistedSessions[session.sessionId] = session;\n\t\t\t}\n\t\t});\n\n\t\tthis._persistedSessions = persistedSessions;\n\n\t\t// Add this window's active chat models to the set to persist.\n\t\t// Having the same session open in two empty windows at the same time can lead to data loss, this is acceptable\n\t\tconst allSessions: Record<string, ISerializableChatData | ChatModel> = {\n\t\t\t...this._persistedSessions,\n\t\t};\n\t\tfor (const chat of thisWindowChats) {\n\t\t\tallSessions[chat.sessionId] = chat;\n\t\t}\n\n\t\tlet sessionsList = Object.values(allSessions);\n\t\tsessionsList.sort(\n\t\t\t(a, b) => (b.creationDate ?? 0) - (a.creationDate ?? 0),\n\t\t);\n\t\tsessionsList = sessionsList.slice(0, maxPersistedSessions);\n\t\tconst data = JSON.stringify(sessionsList);\n\t\tthis.storageService.store(\n\t\t\tserializedChatKey,\n\t\t\tdata,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tnotifyUserAction(action: IChatUserActionEvent): void {\n\t\tthis._chatServiceTelemetry.notifyUserAction(action);\n\t\tthis._onDidPerformUserAction.fire(action);\n\t}\n\n\tsetChatSessionTitle(sessionId: string, title: string): void {\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (model) {\n\t\t\tmodel.setCustomTitle(title);\n\t\t\treturn;\n\t\t}\n\n\t\tconst session = this._persistedSessions[sessionId];\n\t\tif (session) {\n\t\t\tsession.customTitle = title;\n\t\t}\n\t}\n\n\tprivate trace(method: string, message?: string): void {\n\t\tif (message) {\n\t\t\tthis.logService.trace(`ChatService#${method}: ${message}`);\n\t\t} else {\n\t\t\tthis.logService.trace(`ChatService#${method}`);\n\t\t}\n\t}\n\n\tprivate error(method: string, message: string): void {\n\t\tthis.logService.error(`ChatService#${method} ${message}`);\n\t}\n\n\tprivate deserializeChats(sessionData: string): ISerializableChatsData {\n\t\ttry {\n\t\t\tconst arrayOfSessions: ISerializableChatDataIn[] = revive(\n\t\t\t\tJSON.parse(sessionData),\n\t\t\t); // Revive serialized URIs in session data\n\t\t\tif (!Array.isArray(arrayOfSessions)) {\n\t\t\t\tthrow new Error(\"Expected array\");\n\t\t\t}\n\n\t\t\tconst sessions = arrayOfSessions.reduce<ISerializableChatsData>(\n\t\t\t\t(acc, session) => {\n\t\t\t\t\t// Revive serialized markdown strings in response data\n\t\t\t\t\tfor (const request of session.requests) {\n\t\t\t\t\t\tif (Array.isArray(request.response)) {\n\t\t\t\t\t\t\trequest.response = request.response.map(\n\t\t\t\t\t\t\t\t(response) => {\n\t\t\t\t\t\t\t\t\tif (typeof response === \"string\") {\n\t\t\t\t\t\t\t\t\t\treturn new MarkdownString(response);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (typeof request.response === \"string\") {\n\t\t\t\t\t\t\trequest.response = [\n\t\t\t\t\t\t\t\tnew MarkdownString(request.response),\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tacc[session.sessionId] =\n\t\t\t\t\t\tnormalizeSerializableChatData(session);\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t);\n\t\t\treturn sessions;\n\t\t} catch (err) {\n\t\t\tthis.error(\n\t\t\t\t\"deserializeChats\",\n\t\t\t\t`Malformed session data: ${err}. [${sessionData.substring(0, 20)}${sessionData.length > 20 ? \"...\" : \"\"}]`,\n\t\t\t);\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate getTransferredSessionData(): IChatTransfer | undefined {\n\t\tconst data: IChatTransfer[] = this.storageService.getObject(\n\t\t\tglobalChatKey,\n\t\t\tStorageScope.PROFILE,\n\t\t\t[],\n\t\t);\n\t\tconst workspaceUri =\n\t\t\tthis.workspaceContextService.getWorkspace().folders[0]?.uri;\n\t\tif (!workspaceUri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst thisWorkspace = workspaceUri.toString();\n\t\tconst currentTime = Date.now();\n\t\t// Only use transferred data if it was created recently\n\t\tconst transferred = data.find(\n\t\t\t(item) =>\n\t\t\t\tURI.revive(item.toWorkspace).toString() === thisWorkspace &&\n\t\t\t\tcurrentTime - item.timestampInMilliseconds <\n\t\t\t\t\tSESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS,\n\t\t);\n\t\t// Keep data that isn't for the current workspace and that hasn't expired yet\n\t\tconst filtered = data.filter(\n\t\t\t(item) =>\n\t\t\t\tURI.revive(item.toWorkspace).toString() !== thisWorkspace &&\n\t\t\t\tcurrentTime - item.timestampInMilliseconds <\n\t\t\t\t\tSESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS,\n\t\t);\n\t\tthis.storageService.store(\n\t\t\tglobalChatKey,\n\t\t\tJSON.stringify(filtered),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\treturn transferred;\n\t}\n\n\t/**\n\t * Returns an array of chat details for all persisted chat sessions that have at least one request.\n\t * The array is sorted by creation date in descending order.\n\t * Chat sessions that have already been loaded into the chat view are excluded from the result.\n\t * Imported chat sessions are also excluded from the result.\n\t */\n\tgetHistory(): IChatDetail[] {\n\t\tconst persistedSessions = Object.values(this._persistedSessions)\n\t\t\t.filter((session) => session.requests.length > 0)\n\t\t\t.filter((session) => !this._sessionModels.has(session.sessionId));\n\n\t\tconst persistedSessionItems = persistedSessions\n\t\t\t.filter((session) => !session.isImported)\n\t\t\t.map((session) => {\n\t\t\t\tconst title =\n\t\t\t\t\tsession.customTitle ??\n\t\t\t\t\tChatModel.getDefaultTitle(session.requests);\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: session.sessionId,\n\t\t\t\t\ttitle,\n\t\t\t\t\tlastMessageDate: session.lastMessageDate,\n\t\t\t\t\tisActive: false,\n\t\t\t\t} satisfies IChatDetail;\n\t\t\t});\n\t\tconst liveSessionItems = Array.from(this._sessionModels.values())\n\t\t\t.filter((session) => !session.isImported)\n\t\t\t.map((session) => {\n\t\t\t\tconst title = session.title || localize(\"newChat\", \"New Chat\");\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: session.sessionId,\n\t\t\t\t\ttitle,\n\t\t\t\t\tlastMessageDate: session.lastMessageDate,\n\t\t\t\t\tisActive: true,\n\t\t\t\t} satisfies IChatDetail;\n\t\t\t});\n\t\treturn [...liveSessionItems, ...persistedSessionItems];\n\t}\n\n\tremoveHistoryEntry(sessionId: string): void {\n\t\tif (this._persistedSessions[sessionId]) {\n\t\t\tthis._deletedChatIds.add(sessionId);\n\t\t\tdelete this._persistedSessions[sessionId];\n\t\t\tthis.saveState();\n\t\t}\n\t}\n\n\tclearAllHistoryEntries(): void {\n\t\tObject.values(this._persistedSessions).forEach((session) =>\n\t\t\tthis._deletedChatIds.add(session.sessionId),\n\t\t);\n\t\tthis._persistedSessions = {};\n\t\tthis.saveState();\n\t}\n\n\tstartSession(\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): ChatModel {\n\t\tthis.trace(\"startSession\");\n\t\treturn this._startSession(undefined, location, token);\n\t}\n\n\tprivate _startSession(\n\t\tsomeSessionHistory:\n\t\t\t| IExportableChatData\n\t\t\t| ISerializableChatData\n\t\t\t| undefined,\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): ChatModel {\n\t\tconst model = this.instantiationService.createInstance(\n\t\t\tChatModel,\n\t\t\tsomeSessionHistory,\n\t\t\tlocation,\n\t\t);\n\t\tthis._sessionModels.set(model.sessionId, model);\n\t\tthis.initializeSession(model, token);\n\t\treturn model;\n\t}\n\n\tprivate async initializeSession(\n\t\tmodel: ChatModel,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tthis.trace(\n\t\t\t\t\"initializeSession\",\n\t\t\t\t`Initialize session ${model.sessionId}`,\n\t\t\t);\n\t\t\tmodel.startInitialize();\n\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\t\tconst defaultAgentData =\n\t\t\t\tthis.chatAgentService.getContributedDefaultAgent(\n\t\t\t\t\tmodel.initialLocation,\n\t\t\t\t) ??\n\t\t\t\tthis.chatAgentService.getContributedDefaultAgent(\n\t\t\t\t\tChatAgentLocation.Panel,\n\t\t\t\t);\n\t\t\tif (!defaultAgentData) {\n\t\t\t\tthrow new ErrorNoTelemetry(\"No default agent contributed\");\n\t\t\t}\n\n\t\t\tawait this.extensionService.activateByEvent(\n\t\t\t\t`onChatParticipant:${defaultAgentData.id}`,\n\t\t\t);\n\n\t\t\tconst defaultAgent = this.chatAgentService\n\t\t\t\t.getActivatedAgents()\n\t\t\t\t.find((agent) => agent.id === defaultAgentData.id);\n\t\t\tif (!defaultAgent) {\n\t\t\t\tthrow new ErrorNoTelemetry(\"No default agent registered\");\n\t\t\t}\n\t\t\tconst welcomeMessage = model.welcomeMessage\n\t\t\t\t? undefined\n\t\t\t\t: ((await defaultAgent.provideWelcomeMessage?.(\n\t\t\t\t\t\tmodel.initialLocation,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t)) ?? undefined);\n\t\t\tconst welcomeModel =\n\t\t\t\twelcomeMessage &&\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tChatWelcomeMessageModel,\n\t\t\t\t\twelcomeMessage.map((item) =>\n\t\t\t\t\t\ttypeof item === \"string\"\n\t\t\t\t\t\t\t? new MarkdownString(item)\n\t\t\t\t\t\t\t: item,\n\t\t\t\t\t),\n\t\t\t\t\t(await defaultAgent.provideSampleQuestions?.(\n\t\t\t\t\t\tmodel.initialLocation,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t)) ?? [],\n\t\t\t\t);\n\n\t\t\tmodel.initialize(welcomeModel);\n\t\t} catch (err) {\n\t\t\tthis.trace(\"startSession\", `initializeSession failed: ${err}`);\n\t\t\tmodel.setInitializationError(err);\n\t\t\tthis._sessionModels.deleteAndDispose(model.sessionId);\n\t\t\tthis._onDidDisposeSession.fire({\n\t\t\t\tsessionId: model.sessionId,\n\t\t\t\treason: \"initializationFailed\",\n\t\t\t});\n\t\t}\n\t}\n\n\tgetSession(sessionId: string): IChatModel | undefined {\n\t\treturn this._sessionModels.get(sessionId);\n\t}\n\n\tgetOrRestoreSession(sessionId: string): ChatModel | undefined {\n\t\tthis.trace(\"getOrRestoreSession\", `sessionId: ${sessionId}`);\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (model) {\n\t\t\treturn model;\n\t\t}\n\n\t\tconst sessionData = revive<ISerializableChatData>(\n\t\t\tthis._persistedSessions[sessionId],\n\t\t);\n\t\tif (!sessionData) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (sessionId === this.transferredSessionData?.sessionId) {\n\t\t\tthis._transferredSessionData = undefined;\n\t\t}\n\n\t\treturn this._startSession(\n\t\t\tsessionData,\n\t\t\tsessionData.initialLocation ?? ChatAgentLocation.Panel,\n\t\t\tCancellationToken.None,\n\t\t);\n\t}\n\n\tloadSessionFromContent(\n\t\tdata: IExportableChatData | ISerializableChatData,\n\t): IChatModel | undefined {\n\t\treturn this._startSession(\n\t\t\tdata,\n\t\t\tdata.initialLocation ?? ChatAgentLocation.Panel,\n\t\t\tCancellationToken.None,\n\t\t);\n\t}\n\n\tasync resendRequest(\n\t\trequest: IChatRequestModel,\n\t\toptions?: IChatSendRequestOptions,\n\t): Promise<void> {\n\t\tconst model = this._sessionModels.get(request.session.sessionId);\n\t\tif (!model && model !== request.session) {\n\t\t\tthrow new Error(`Unknown session: ${request.session.sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\n\t\tconst cts = this._pendingRequests.get(request.session.sessionId);\n\t\tif (cts) {\n\t\t\tthis.trace(\n\t\t\t\t\"resendRequest\",\n\t\t\t\t`Session ${request.session.sessionId} already has a pending request, cancelling...`,\n\t\t\t);\n\t\t\tcts.cancel();\n\t\t}\n\n\t\tconst location = options?.location ?? model.initialLocation;\n\t\tconst attempt = options?.attempt ?? 0;\n\t\tconst enableCommandDetection = !options?.noCommandDetection;\n\t\tconst defaultAgent = this.chatAgentService.getDefaultAgent(location)!;\n\n\t\tmodel.removeRequest(request.id, ChatRequestRemovalReason.Resend);\n\n\t\tconst resendOptions: IChatSendRequestOptions = {\n\t\t\t...options,\n\t\t\tlocationData: request.locationData,\n\t\t\tattachedContext: request.attachedContext,\n\t\t};\n\t\tawait this._sendRequestAsync(\n\t\t\tmodel,\n\t\t\tmodel.sessionId,\n\t\t\trequest.message,\n\t\t\tattempt,\n\t\t\tenableCommandDetection,\n\t\t\tdefaultAgent,\n\t\t\tlocation,\n\t\t\tresendOptions,\n\t\t).responseCompletePromise;\n\t}\n\n\tasync sendRequest(\n\t\tsessionId: string,\n\t\trequest: string,\n\t\toptions?: IChatSendRequestOptions,\n\t): Promise<IChatSendRequestData | undefined> {\n\t\tthis.trace(\n\t\t\t\"sendRequest\",\n\t\t\t`sessionId: ${sessionId}, message: ${request.substring(0, 20)}${request.length > 20 ? \"[...]\" : \"\"}}`,\n\t\t);\n\t\tif (!request.trim() && !options?.slashCommand && !options?.agentId) {\n\t\t\tthis.trace(\"sendRequest\", \"Rejected empty message\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\n\t\tif (this._pendingRequests.has(sessionId)) {\n\t\t\tthis.trace(\n\t\t\t\t\"sendRequest\",\n\t\t\t\t`Session ${sessionId} already has a pending request`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst location = options?.location ?? model.initialLocation;\n\t\tconst attempt = options?.attempt ?? 0;\n\t\tconst defaultAgent = this.chatAgentService.getDefaultAgent(location)!;\n\n\t\tconst parsedRequest = this.parseChatRequest(\n\t\t\tsessionId,\n\t\t\trequest,\n\t\t\tlocation,\n\t\t\toptions,\n\t\t);\n\t\tconst agent =\n\t\t\tparsedRequest.parts.find(\n\t\t\t\t(r): r is ChatRequestAgentPart =>\n\t\t\t\t\tr instanceof ChatRequestAgentPart,\n\t\t\t)?.agent ?? defaultAgent;\n\t\tconst agentSlashCommandPart = parsedRequest.parts.find(\n\t\t\t(r): r is ChatRequestAgentSubcommandPart =>\n\t\t\t\tr instanceof ChatRequestAgentSubcommandPart,\n\t\t);\n\n\t\t// This method is only returning whether the request was accepted - don't block on the actual request\n\t\treturn {\n\t\t\t...this._sendRequestAsync(\n\t\t\t\tmodel,\n\t\t\t\tsessionId,\n\t\t\t\tparsedRequest,\n\t\t\t\tattempt,\n\t\t\t\t!options?.noCommandDetection,\n\t\t\t\tdefaultAgent,\n\t\t\t\tlocation,\n\t\t\t\toptions,\n\t\t\t),\n\t\t\tagent,\n\t\t\tslashCommand: agentSlashCommandPart?.command,\n\t\t};\n\t}\n\n\tprivate parseChatRequest(\n\t\tsessionId: string,\n\t\trequest: string,\n\t\tlocation: ChatAgentLocation,\n\t\toptions: IChatSendRequestOptions | undefined,\n\t): IParsedChatRequest {\n\t\tlet parserContext = options?.parserContext;\n\t\tif (options?.agentId) {\n\t\t\tconst agent = this.chatAgentService.getAgent(options.agentId);\n\t\t\tif (!agent) {\n\t\t\t\tthrow new Error(`Unknown agent: ${options.agentId}`);\n\t\t\t}\n\t\t\tparserContext = { selectedAgent: agent };\n\t\t\tconst commandPart = options.slashCommand\n\t\t\t\t? ` ${chatSubcommandLeader}${options.slashCommand}`\n\t\t\t\t: \"\";\n\t\t\trequest = `${chatAgentLeader}${agent.name}${commandPart} ${request}`;\n\t\t}\n\n\t\tconst parsedRequest = this.instantiationService\n\t\t\t.createInstance(ChatRequestParser)\n\t\t\t.parseChatRequest(sessionId, request, location, parserContext);\n\t\treturn parsedRequest;\n\t}\n\n\tprivate refreshFollowupsCancellationToken(\n\t\tsessionId: string,\n\t): CancellationToken {\n\t\tthis._sessionFollowupCancelTokens.get(sessionId)?.cancel();\n\t\tconst newTokenSource = new CancellationTokenSource();\n\t\tthis._sessionFollowupCancelTokens.set(sessionId, newTokenSource);\n\n\t\treturn newTokenSource.token;\n\t}\n\n\tprivate _sendRequestAsync(\n\t\tmodel: ChatModel,\n\t\tsessionId: string,\n\t\tparsedRequest: IParsedChatRequest,\n\t\tattempt: number,\n\t\tenableCommandDetection: boolean,\n\t\tdefaultAgent: IChatAgent,\n\t\tlocation: ChatAgentLocation,\n\t\toptions?: IChatSendRequestOptions,\n\t): IChatSendRequestResponseState {\n\t\tconst followupsCancelToken =\n\t\t\tthis.refreshFollowupsCancellationToken(sessionId);\n\t\tlet request: ChatRequestModel;\n\t\tconst agentPart =\n\t\t\t\"kind\" in parsedRequest\n\t\t\t\t? undefined\n\t\t\t\t: parsedRequest.parts.find(\n\t\t\t\t\t\t(r): r is ChatRequestAgentPart =>\n\t\t\t\t\t\t\tr instanceof ChatRequestAgentPart,\n\t\t\t\t\t);\n\t\tconst agentSlashCommandPart =\n\t\t\t\"kind\" in parsedRequest\n\t\t\t\t? undefined\n\t\t\t\t: parsedRequest.parts.find(\n\t\t\t\t\t\t(r): r is ChatRequestAgentSubcommandPart =>\n\t\t\t\t\t\t\tr instanceof ChatRequestAgentSubcommandPart,\n\t\t\t\t\t);\n\t\tconst commandPart =\n\t\t\t\"kind\" in parsedRequest\n\t\t\t\t? undefined\n\t\t\t\t: parsedRequest.parts.find(\n\t\t\t\t\t\t(r): r is ChatRequestSlashCommandPart =>\n\t\t\t\t\t\t\tr instanceof ChatRequestSlashCommandPart,\n\t\t\t\t\t);\n\t\tconst requests = [...model.getRequests()];\n\n\t\tlet gotProgress = false;\n\t\tconst requestType = commandPart ? \"slashCommand\" : \"string\";\n\n\t\tconst responseCreated = new DeferredPromise<IChatResponseModel>();\n\t\tlet responseCreatedComplete = false;\n\t\tfunction completeResponseCreated(): void {\n\t\t\tif (!responseCreatedComplete && request?.response) {\n\t\t\t\tresponseCreated.complete(request.response);\n\t\t\t\tresponseCreatedComplete = true;\n\t\t\t}\n\t\t}\n\n\t\tconst source = new CancellationTokenSource();\n\t\tconst token = source.token;\n\t\tconst sendRequestInternal = async () => {\n\t\t\tconst progressCallback = (progress: IChatProgress) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tgotProgress = true;\n\n\t\t\t\tif (progress.kind === \"markdownContent\") {\n\t\t\t\t\tthis.trace(\n\t\t\t\t\t\t\"sendRequest\",\n\t\t\t\t\t\t`Provider returned progress for session ${model.sessionId}, ${progress.content.value.length} chars`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.trace(\n\t\t\t\t\t\t\"sendRequest\",\n\t\t\t\t\t\t`Provider returned progress: ${JSON.stringify(progress)}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tmodel.acceptResponseProgress(request, progress);\n\t\t\t\tcompleteResponseCreated();\n\t\t\t};\n\n\t\t\tlet detectedAgent: IChatAgentData | undefined;\n\t\t\tlet detectedCommand: IChatAgentCommand | undefined;\n\n\t\t\tconst stopWatch = new StopWatch(false);\n\t\t\tconst listener = token.onCancellationRequested(() => {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"sendRequest\",\n\t\t\t\t\t`Request for session ${model.sessionId} was cancelled`,\n\t\t\t\t);\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tChatProviderInvokedEvent,\n\t\t\t\t\tChatProviderInvokedClassification\n\t\t\t\t>(\"interactiveSessionProviderInvoked\", {\n\t\t\t\t\ttimeToFirstProgress: undefined,\n\t\t\t\t\t// Normally timings happen inside the EH around the actual provider. For cancellation we can measure how long the user waited before cancelling\n\t\t\t\t\ttotalTime: stopWatch.elapsed(),\n\t\t\t\t\tresult: \"cancelled\",\n\t\t\t\t\trequestType,\n\t\t\t\t\tagent: agentPart?.agent.id ?? \"\",\n\t\t\t\t\tagentExtensionId: agentPart?.agent.extensionId.value ?? \"\",\n\t\t\t\t\tslashCommand: agentSlashCommandPart\n\t\t\t\t\t\t? agentSlashCommandPart.command.name\n\t\t\t\t\t\t: commandPart?.slashCommand.command,\n\t\t\t\t\tchatSessionId: model.sessionId,\n\t\t\t\t\tlocation,\n\t\t\t\t\tcitations: request?.response?.codeCitations.length ?? 0,\n\t\t\t\t\tnumCodeBlocks: getCodeBlocks(\n\t\t\t\t\t\trequest.response?.response.toString() ?? \"\",\n\t\t\t\t\t).length,\n\t\t\t\t\tisParticipantDetected: !!detectedAgent,\n\t\t\t\t});\n\n\t\t\t\tmodel.cancelRequest(request);\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tlet rawResult: IChatAgentResult | null | undefined;\n\t\t\t\tlet agentOrCommandFollowups:\n\t\t\t\t\t| Promise<IChatFollowup[] | undefined>\n\t\t\t\t\t| undefined;\n\t\t\t\tlet chatTitlePromise: Promise<string | undefined> | undefined;\n\n\t\t\t\tif (agentPart || (defaultAgent && !commandPart)) {\n\t\t\t\t\tconst prepareChatAgentRequest = async (\n\t\t\t\t\t\tagent: IChatAgentData,\n\t\t\t\t\t\tcommand?: IChatAgentCommand,\n\t\t\t\t\t\tenableCommandDetection?: boolean,\n\t\t\t\t\t\tchatRequest?: ChatRequestModel,\n\t\t\t\t\t\tisParticipantDetected?: boolean,\n\t\t\t\t\t) => {\n\t\t\t\t\t\tconst initVariableData: IChatRequestVariableData = {\n\t\t\t\t\t\t\tvariables: [],\n\t\t\t\t\t\t};\n\t\t\t\t\t\trequest =\n\t\t\t\t\t\t\tchatRequest ??\n\t\t\t\t\t\t\tmodel.addRequest(\n\t\t\t\t\t\t\t\tparsedRequest,\n\t\t\t\t\t\t\t\tinitVariableData,\n\t\t\t\t\t\t\t\tattempt,\n\t\t\t\t\t\t\t\tagent,\n\t\t\t\t\t\t\t\tcommand,\n\t\t\t\t\t\t\t\toptions?.confirmation,\n\t\t\t\t\t\t\t\toptions?.locationData,\n\t\t\t\t\t\t\t\toptions?.attachedContext,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Variables may have changed if the agent and slash command changed, so resolve them again even if we already had a chatRequest\n\t\t\t\t\t\tconst variableData =\n\t\t\t\t\t\t\tawait this.chatVariablesService.resolveVariables(\n\t\t\t\t\t\t\t\tparsedRequest,\n\t\t\t\t\t\t\t\trequest.attachedContext,\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tprogressCallback,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tmodel.updateRequest(request, variableData);\n\t\t\t\t\t\tconst promptTextResult = getPromptText(request.message);\n\t\t\t\t\t\tconst updatedVariableData = updateRanges(\n\t\t\t\t\t\t\tvariableData,\n\t\t\t\t\t\t\tpromptTextResult.diff,\n\t\t\t\t\t\t); // TODO bit of a hack\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsessionId,\n\t\t\t\t\t\t\trequestId: request.id,\n\t\t\t\t\t\t\tagentId: agent.id,\n\t\t\t\t\t\t\tmessage: promptTextResult.message,\n\t\t\t\t\t\t\tcommand: command?.name,\n\t\t\t\t\t\t\tvariables: updatedVariableData,\n\t\t\t\t\t\t\tenableCommandDetection,\n\t\t\t\t\t\t\tisParticipantDetected,\n\t\t\t\t\t\t\tattempt,\n\t\t\t\t\t\t\tlocation,\n\t\t\t\t\t\t\tlocationData: request.locationData,\n\t\t\t\t\t\t\tacceptedConfirmationData:\n\t\t\t\t\t\t\t\toptions?.acceptedConfirmationData,\n\t\t\t\t\t\t\trejectedConfirmationData:\n\t\t\t\t\t\t\t\toptions?.rejectedConfirmationData,\n\t\t\t\t\t\t} satisfies IChatAgentRequest;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\t\t\t\"chat.experimental.detectParticipant.enabled\",\n\t\t\t\t\t\t) !== false &&\n\t\t\t\t\t\tthis.chatAgentService.hasChatParticipantDetectionProviders() &&\n\t\t\t\t\t\t!agentPart &&\n\t\t\t\t\t\t!commandPart &&\n\t\t\t\t\t\tenableCommandDetection\n\t\t\t\t\t) {\n\t\t\t\t\t\t// We have no agent or command to scope history with, pass the full history to the participant detection provider\n\t\t\t\t\t\tconst defaultAgentHistory =\n\t\t\t\t\t\t\tthis.getHistoryEntriesFromModel(\n\t\t\t\t\t\t\t\trequests,\n\t\t\t\t\t\t\t\tmodel.sessionId,\n\t\t\t\t\t\t\t\tlocation,\n\t\t\t\t\t\t\t\tdefaultAgent.id,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Prepare the request object that we will send to the participant detection provider\n\t\t\t\t\t\tconst chatAgentRequest = await prepareChatAgentRequest(\n\t\t\t\t\t\t\tdefaultAgent,\n\t\t\t\t\t\t\tagentSlashCommandPart?.command,\n\t\t\t\t\t\t\tenableCommandDetection,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tawait this.chatAgentService.detectAgentOrCommand(\n\t\t\t\t\t\t\t\tchatAgentRequest,\n\t\t\t\t\t\t\t\tdefaultAgentHistory,\n\t\t\t\t\t\t\t\t{ location },\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tresult &&\n\t\t\t\t\t\t\tthis.chatAgentService\n\t\t\t\t\t\t\t\t.getAgent(result.agent.id)\n\t\t\t\t\t\t\t\t?.locations?.includes(location)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Update the response in the ChatModel to reflect the detected agent and command\n\t\t\t\t\t\t\trequest.response?.setAgent(\n\t\t\t\t\t\t\t\tresult.agent,\n\t\t\t\t\t\t\t\tresult.command,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdetectedAgent = result.agent;\n\t\t\t\t\t\t\tdetectedCommand = result.command;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst agent = (detectedAgent ??\n\t\t\t\t\t\tagentPart?.agent ??\n\t\t\t\t\t\tdefaultAgent)!;\n\t\t\t\t\tconst command =\n\t\t\t\t\t\tdetectedCommand ?? agentSlashCommandPart?.command;\n\t\t\t\t\tawait this.extensionService.activateByEvent(\n\t\t\t\t\t\t`onChatParticipant:${agent.id}`,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Recompute history in case the agent or command changed\n\t\t\t\t\tconst history = this.getHistoryEntriesFromModel(\n\t\t\t\t\t\trequests,\n\t\t\t\t\t\tmodel.sessionId,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tagent.id,\n\t\t\t\t\t);\n\t\t\t\t\tconst requestProps = await prepareChatAgentRequest(\n\t\t\t\t\t\tagent,\n\t\t\t\t\t\tcommand,\n\t\t\t\t\t\tenableCommandDetection,\n\t\t\t\t\t\trequest /* Reuse the request object if we already created it for participant detection */,\n\t\t\t\t\t\t!!detectedAgent,\n\t\t\t\t\t);\n\t\t\t\t\tconst pendingRequest = this._pendingRequests.get(sessionId);\n\t\t\t\t\tif (pendingRequest && !pendingRequest.requestId) {\n\t\t\t\t\t\tpendingRequest.requestId = requestProps.requestId;\n\t\t\t\t\t}\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\tconst agentResult = await this.chatAgentService.invokeAgent(\n\t\t\t\t\t\tagent.id,\n\t\t\t\t\t\trequestProps,\n\t\t\t\t\t\tprogressCallback,\n\t\t\t\t\t\thistory,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t\trawResult = agentResult;\n\t\t\t\t\tagentOrCommandFollowups =\n\t\t\t\t\t\tthis.chatAgentService.getFollowups(\n\t\t\t\t\t\t\tagent.id,\n\t\t\t\t\t\t\trequestProps,\n\t\t\t\t\t\t\tagentResult,\n\t\t\t\t\t\t\thistory,\n\t\t\t\t\t\t\tfollowupsCancelToken,\n\t\t\t\t\t\t);\n\t\t\t\t\tchatTitlePromise =\n\t\t\t\t\t\tmodel.getRequests().length === 1 && !model.customTitle\n\t\t\t\t\t\t\t? this.chatAgentService.getChatTitle(\n\t\t\t\t\t\t\t\t\tdefaultAgent.id,\n\t\t\t\t\t\t\t\t\tthis.getHistoryEntriesFromModel(\n\t\t\t\t\t\t\t\t\t\tmodel.getRequests(),\n\t\t\t\t\t\t\t\t\t\tmodel.sessionId,\n\t\t\t\t\t\t\t\t\t\tlocation,\n\t\t\t\t\t\t\t\t\t\tagent.id,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t} else if (\n\t\t\t\t\tcommandPart &&\n\t\t\t\t\tthis.chatSlashCommandService.hasCommand(\n\t\t\t\t\t\tcommandPart.slashCommand.command,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\trequest = model.addRequest(\n\t\t\t\t\t\tparsedRequest,\n\t\t\t\t\t\t{ variables: [] },\n\t\t\t\t\t\tattempt,\n\t\t\t\t\t);\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\t// contributed slash commands\n\t\t\t\t\t// TODO: spell this out in the UI\n\t\t\t\t\tconst history: IChatMessage[] = [];\n\t\t\t\t\tfor (const request of model.getRequests()) {\n\t\t\t\t\t\tif (!request.response) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thistory.push({\n\t\t\t\t\t\t\trole: ChatMessageRole.User,\n\t\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t\t{ type: \"text\", value: request.message.text },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t\thistory.push({\n\t\t\t\t\t\t\trole: ChatMessageRole.Assistant,\n\t\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\t\t\tvalue: request.response.response.toString(),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tconst message = parsedRequest.text;\n\t\t\t\t\tconst commandResult =\n\t\t\t\t\t\tawait this.chatSlashCommandService.executeCommand(\n\t\t\t\t\t\t\tcommandPart.slashCommand.command,\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t\t\t.substring(\n\t\t\t\t\t\t\t\t\tcommandPart.slashCommand.command.length + 1,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.trimStart(),\n\t\t\t\t\t\t\tnew Progress<IChatProgress>((p) => {\n\t\t\t\t\t\t\t\tprogressCallback(p);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\thistory,\n\t\t\t\t\t\t\tlocation,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t);\n\t\t\t\t\tagentOrCommandFollowups = Promise.resolve(\n\t\t\t\t\t\tcommandResult?.followUp,\n\t\t\t\t\t);\n\t\t\t\t\trawResult = {};\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Cannot handle request`);\n\t\t\t\t}\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (!rawResult) {\n\t\t\t\t\t\tthis.trace(\n\t\t\t\t\t\t\t\"sendRequest\",\n\t\t\t\t\t\t\t`Provider returned no response for session ${model.sessionId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\trawResult = {\n\t\t\t\t\t\t\terrorDetails: {\n\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t\"emptyResponse\",\n\t\t\t\t\t\t\t\t\t\"Provider returned null response\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = rawResult.errorDetails?.responseIsFiltered\n\t\t\t\t\t\t? \"filtered\"\n\t\t\t\t\t\t: rawResult.errorDetails && gotProgress\n\t\t\t\t\t\t\t? \"errorWithOutput\"\n\t\t\t\t\t\t\t: rawResult.errorDetails\n\t\t\t\t\t\t\t\t? \"error\"\n\t\t\t\t\t\t\t\t: \"success\";\n\t\t\t\t\tconst commandForTelemetry = agentSlashCommandPart\n\t\t\t\t\t\t? agentSlashCommandPart.command.name\n\t\t\t\t\t\t: commandPart?.slashCommand.command;\n\t\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t\tChatProviderInvokedEvent,\n\t\t\t\t\t\tChatProviderInvokedClassification\n\t\t\t\t\t>(\"interactiveSessionProviderInvoked\", {\n\t\t\t\t\t\ttimeToFirstProgress: rawResult.timings?.firstProgress,\n\t\t\t\t\t\ttotalTime: rawResult.timings?.totalElapsed,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\trequestType,\n\t\t\t\t\t\tagent: agentPart?.agent.id ?? \"\",\n\t\t\t\t\t\tagentExtensionId:\n\t\t\t\t\t\t\tagentPart?.agent.extensionId.value ?? \"\",\n\t\t\t\t\t\tslashCommand: commandForTelemetry,\n\t\t\t\t\t\tchatSessionId: model.sessionId,\n\t\t\t\t\t\tisParticipantDetected: !!detectedAgent,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tcitations: request.response?.codeCitations.length ?? 0,\n\t\t\t\t\t\tnumCodeBlocks: getCodeBlocks(\n\t\t\t\t\t\t\trequest.response?.response.toString() ?? \"\",\n\t\t\t\t\t\t).length,\n\t\t\t\t\t});\n\t\t\t\t\tmodel.setResponse(request, rawResult);\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\tthis.trace(\n\t\t\t\t\t\t\"sendRequest\",\n\t\t\t\t\t\t`Provider returned response for session ${model.sessionId}`,\n\t\t\t\t\t);\n\n\t\t\t\t\tmodel.completeResponse(request);\n\t\t\t\t\tif (agentOrCommandFollowups) {\n\t\t\t\t\t\tagentOrCommandFollowups.then((followups) => {\n\t\t\t\t\t\t\tmodel.setFollowups(request, followups);\n\t\t\t\t\t\t\tthis._chatServiceTelemetry.retrievedFollowups(\n\t\t\t\t\t\t\t\tagentPart?.agent.id ?? \"\",\n\t\t\t\t\t\t\t\tcommandForTelemetry,\n\t\t\t\t\t\t\t\tfollowups?.length ?? 0,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tchatTitlePromise?.then((title) => {\n\t\t\t\t\t\tif (title) {\n\t\t\t\t\t\t\tmodel.setCustomTitle(title);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconst result = \"error\";\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tChatProviderInvokedEvent,\n\t\t\t\t\tChatProviderInvokedClassification\n\t\t\t\t>(\"interactiveSessionProviderInvoked\", {\n\t\t\t\t\ttimeToFirstProgress: undefined,\n\t\t\t\t\ttotalTime: undefined,\n\t\t\t\t\tresult,\n\t\t\t\t\trequestType,\n\t\t\t\t\tagent: agentPart?.agent.id ?? \"\",\n\t\t\t\t\tagentExtensionId: agentPart?.agent.extensionId.value ?? \"\",\n\t\t\t\t\tslashCommand: agentSlashCommandPart\n\t\t\t\t\t\t? agentSlashCommandPart.command.name\n\t\t\t\t\t\t: commandPart?.slashCommand.command,\n\t\t\t\t\tchatSessionId: model.sessionId,\n\t\t\t\t\tlocation,\n\t\t\t\t\tcitations: 0,\n\t\t\t\t\tnumCodeBlocks: 0,\n\t\t\t\t\tisParticipantDetected: !!detectedAgent,\n\t\t\t\t});\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`Error while handling chat request: ${toErrorMessage(err, true)}`,\n\t\t\t\t);\n\t\t\t\tif (request) {\n\t\t\t\t\tconst rawResult: IChatAgentResult = {\n\t\t\t\t\t\terrorDetails: { message: err.message },\n\t\t\t\t\t};\n\t\t\t\t\tmodel.setResponse(request, rawResult);\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\tmodel.completeResponse(request);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t};\n\t\tconst rawResponsePromise = sendRequestInternal();\n\t\tthis._pendingRequests.set(\n\t\t\tmodel.sessionId,\n\t\t\tnew CancellableRequest(source),\n\t\t);\n\t\trawResponsePromise.finally(() => {\n\t\t\tthis._pendingRequests.deleteAndDispose(model.sessionId);\n\t\t});\n\t\treturn {\n\t\t\tresponseCreatedPromise: responseCreated.p,\n\t\t\tresponseCompletePromise: rawResponsePromise,\n\t\t};\n\t}\n\n\tprivate getHistoryEntriesFromModel(\n\t\trequests: IChatRequestModel[],\n\t\tsessionId: string,\n\t\tlocation: ChatAgentLocation,\n\t\tforAgentId: string,\n\t): IChatAgentHistoryEntry[] {\n\t\tconst history: IChatAgentHistoryEntry[] = [];\n\t\tfor (const request of requests) {\n\t\t\tif (!request.response) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst defaultAgentId =\n\t\t\t\tthis.chatAgentService.getDefaultAgent(location)?.id;\n\t\t\tif (\n\t\t\t\tforAgentId !== request.response.agent?.id &&\n\t\t\t\tforAgentId !== defaultAgentId\n\t\t\t) {\n\t\t\t\t// An agent only gets to see requests that were sent to this agent.\n\t\t\t\t// The default agent (the undefined case) gets to see all of them.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promptTextResult = getPromptText(request.message);\n\t\t\tconst historyRequest: IChatAgentRequest = {\n\t\t\t\tsessionId: sessionId,\n\t\t\t\trequestId: request.id,\n\t\t\t\tagentId: request.response.agent?.id ?? \"\",\n\t\t\t\tmessage: promptTextResult.message,\n\t\t\t\tcommand: request.response.slashCommand?.name,\n\t\t\t\tvariables: updateRanges(\n\t\t\t\t\trequest.variableData,\n\t\t\t\t\tpromptTextResult.diff,\n\t\t\t\t), // TODO bit of a hack\n\t\t\t\tlocation: ChatAgentLocation.Panel,\n\t\t\t};\n\t\t\thistory.push({\n\t\t\t\trequest: historyRequest,\n\t\t\t\tresponse: request.response.response.value,\n\t\t\t\tresult: request.response.result ?? {},\n\t\t\t});\n\t\t}\n\n\t\treturn history;\n\t}\n\n\tasync removeRequest(sessionId: string, requestId: string): Promise<void> {\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\n\t\tconst pendingRequest = this._pendingRequests.get(sessionId);\n\t\tif (pendingRequest?.requestId === requestId) {\n\t\t\tpendingRequest.cancel();\n\t\t\tthis._pendingRequests.deleteAndDispose(sessionId);\n\t\t}\n\n\t\tmodel.removeRequest(requestId);\n\t}\n\n\tasync adoptRequest(sessionId: string, request: IChatRequestModel) {\n\t\tif (!(request instanceof ChatRequestModel)) {\n\t\t\tthrow new TypeError(\n\t\t\t\t\"Can only adopt requests of type ChatRequestModel\",\n\t\t\t);\n\t\t}\n\t\tconst target = this._sessionModels.get(sessionId);\n\t\tif (!target) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait target.waitForInitialization();\n\n\t\tconst oldOwner = request.session;\n\t\ttarget.adoptRequest(request);\n\n\t\tif (request.response && !request.response.isComplete) {\n\t\t\tconst cts = this._pendingRequests.deleteAndLeak(oldOwner.sessionId);\n\t\t\tif (cts) {\n\t\t\t\tcts.requestId = request.id;\n\t\t\t\tthis._pendingRequests.set(target.sessionId, cts);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync addCompleteRequest(\n\t\tsessionId: string,\n\t\tmessage: IParsedChatRequest | string,\n\t\tvariableData: IChatRequestVariableData | undefined,\n\t\tattempt: number | undefined,\n\t\tresponse: IChatCompleteResponse,\n\t): Promise<void> {\n\t\tthis.trace(\"addCompleteRequest\", `message: ${message}`);\n\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\t\tconst parsedRequest =\n\t\t\ttypeof message === \"string\"\n\t\t\t\t? this.instantiationService\n\t\t\t\t\t\t.createInstance(ChatRequestParser)\n\t\t\t\t\t\t.parseChatRequest(sessionId, message)\n\t\t\t\t: message;\n\t\tconst request = model.addRequest(\n\t\t\tparsedRequest,\n\t\t\tvariableData || { variables: [] },\n\t\t\tattempt ?? 0,\n\t\t);\n\t\tif (typeof response.message === \"string\") {\n\t\t\t// TODO is this possible?\n\t\t\tmodel.acceptResponseProgress(request, {\n\t\t\t\tcontent: new MarkdownString(response.message),\n\t\t\t\tkind: \"markdownContent\",\n\t\t\t});\n\t\t} else {\n\t\t\tfor (const part of response.message) {\n\t\t\t\tmodel.acceptResponseProgress(request, part, true);\n\t\t\t}\n\t\t}\n\t\tmodel.setResponse(request, response.result || {});\n\t\tif (response.followups !== undefined) {\n\t\t\tmodel.setFollowups(request, response.followups);\n\t\t}\n\t\tmodel.completeResponse(request);\n\t}\n\n\tcancelCurrentRequestForSession(sessionId: string): void {\n\t\tthis.trace(\"cancelCurrentRequestForSession\", `sessionId: ${sessionId}`);\n\t\tthis._pendingRequests.get(sessionId)?.cancel();\n\t\tthis._pendingRequests.deleteAndDispose(sessionId);\n\t}\n\n\tclearSession(sessionId: string): void {\n\t\tthis.trace(\"clearSession\", `sessionId: ${sessionId}`);\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tif (model.initialLocation === ChatAgentLocation.Panel) {\n\t\t\t// Turn all the real objects into actual JSON, otherwise, calling 'revive' may fail when it tries to\n\t\t\t// assign values to properties that are getters- microsoft/vscode-copilot-release#1233\n\t\t\tconst sessionData: ISerializableChatData = JSON.parse(\n\t\t\t\tJSON.stringify(model),\n\t\t\t);\n\t\t\tsessionData.isNew = true;\n\t\t\tthis._persistedSessions[sessionId] = sessionData;\n\t\t}\n\n\t\tthis._sessionModels.deleteAndDispose(sessionId);\n\t\tthis._pendingRequests.get(sessionId)?.cancel();\n\t\tthis._pendingRequests.deleteAndDispose(sessionId);\n\t\tthis._onDidDisposeSession.fire({ sessionId, reason: \"cleared\" });\n\t}\n\n\tpublic hasSessions(): boolean {\n\t\treturn !!Object.values(this._persistedSessions);\n\t}\n\n\ttransferChatSession(\n\t\ttransferredSessionData: IChatTransferredSessionData,\n\t\ttoWorkspace: URI,\n\t): void {\n\t\tconst model = Iterable.find(\n\t\t\tthis._sessionModels.values(),\n\t\t\t(model) => model.sessionId === transferredSessionData.sessionId,\n\t\t);\n\t\tif (!model) {\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to transfer session. Unknown session ID: ${transferredSessionData.sessionId}`,\n\t\t\t);\n\t\t}\n\n\t\tconst existingRaw: IChatTransfer[] = this.storageService.getObject(\n\t\t\tglobalChatKey,\n\t\t\tStorageScope.PROFILE,\n\t\t\t[],\n\t\t);\n\t\texistingRaw.push({\n\t\t\tchat: model.toJSON(),\n\t\t\ttimestampInMilliseconds: Date.now(),\n\t\t\ttoWorkspace: toWorkspace,\n\t\t\tinputValue: transferredSessionData.inputValue,\n\t\t});\n\n\t\tthis.storageService.store(\n\t\t\tglobalChatKey,\n\t\t\tJSON.stringify(existingRaw),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tthis.trace(\n\t\t\t\"transferChatSession\",\n\t\t\t`Transferred session ${model.sessionId} to workspace ${toWorkspace.toString()}`,\n\t\t);\n\t}\n}\n\nfunction getCodeBlocks(text: string): string[] {\n\tconst lines = text.split(\"\\n\");\n\tconst codeBlockLanguages: string[] = [];\n\n\tlet codeBlockState:\n\t\t| undefined\n\t\t| { readonly delimiter: string; readonly languageId: string };\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst line = lines[i];\n\n\t\tif (codeBlockState) {\n\t\t\tif (\n\t\t\t\tnew RegExp(`^\\\\s*${codeBlockState.delimiter}\\\\s*$`).test(line)\n\t\t\t) {\n\t\t\t\tcodeBlockLanguages.push(codeBlockState.languageId);\n\t\t\t\tcodeBlockState = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tconst match = line.match(/^(\\s*)(`{3,}|~{3,})(\\w*)/);\n\t\t\tif (match) {\n\t\t\t\tcodeBlockState = { delimiter: match[2], languageId: match[3] };\n\t\t\t}\n\t\t}\n\t}\n\treturn codeBlockLanguages;\n}\n"],
  "mappings": "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",
  "names": ["agent", "command", "enableCommandDetection", "request", "model"]
}
