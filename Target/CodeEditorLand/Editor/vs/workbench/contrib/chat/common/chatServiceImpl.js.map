{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { ErrorNoTelemetry } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, DisposableMap, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { revive } from '../../../../base/common/marshalling.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { ChatAgentLocation, IChatAgent, IChatAgentCommand, IChatAgentData, IChatAgentHistoryEntry, IChatAgentRequest, IChatAgentResult, IChatAgentService } from './chatAgents.js';\nimport { CONTEXT_VOTE_UP_ENABLED } from './chatContextKeys.js';\nimport { ChatModel, ChatRequestModel, ChatRequestRemovalReason, ChatWelcomeMessageModel, IChatModel, IChatRequestModel, IChatRequestVariableData, IChatResponseModel, IExportableChatData, ISerializableChatData, ISerializableChatDataIn, ISerializableChatsData, normalizeSerializableChatData, updateRanges } from './chatModel.js';\nimport { ChatRequestAgentPart, ChatRequestAgentSubcommandPart, ChatRequestSlashCommandPart, IParsedChatRequest, chatAgentLeader, chatSubcommandLeader, getPromptText } from './chatParserTypes.js';\nimport { ChatRequestParser } from './chatRequestParser.js';\nimport { IChatCompleteResponse, IChatDetail, IChatFollowup, IChatProgress, IChatSendRequestData, IChatSendRequestOptions, IChatSendRequestResponseState, IChatService, IChatTransferredSessionData, IChatUserActionEvent } from './chatService.js';\nimport { ChatServiceTelemetry } from './chatServiceTelemetry.js';\nimport { IChatSlashCommandService } from './chatSlashCommands.js';\nimport { IChatVariablesService } from './chatVariables.js';\nimport { ChatMessageRole, IChatMessage } from './languageModels.js';\nimport { IWorkbenchAssignmentService } from '../../../services/assignment/common/assignmentService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\n\nconst serializedChatKey = 'interactive.sessions';\n\nconst globalChatKey = 'chat.workspaceTransfer';\ninterface IChatTransfer {\n\ttoWorkspace: UriComponents;\n\ttimestampInMilliseconds: number;\n\tchat: ISerializableChatData;\n\tinputValue: string;\n}\nconst SESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS = 1000 * 60;\n\ntype ChatProviderInvokedEvent = {\n\ttimeToFirstProgress: number | undefined;\n\ttotalTime: number | undefined;\n\tresult: 'success' | 'error' | 'errorWithOutput' | 'cancelled' | 'filtered';\n\trequestType: 'string' | 'followup' | 'slashCommand';\n\tchatSessionId: string;\n\tagent: string;\n\tagentExtensionId: string | undefined;\n\tslashCommand: string | undefined;\n\tlocation: ChatAgentLocation;\n\tcitations: number;\n\tnumCodeBlocks: number;\n\tisParticipantDetected: boolean;\n};\n\ntype ChatProviderInvokedClassification = {\n\ttimeToFirstProgress: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The time in milliseconds from invoking the provider to getting the first data.' };\n\ttotalTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The total time it took to run the provider\\'s `provideResponseWithProgress`.' };\n\tresult: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether invoking the ChatProvider resulted in an error.' };\n\trequestType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of request that the user made.' };\n\tchatSessionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A random ID for the session.' };\n\tagent: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of agent used.' };\n\tagentExtensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension that contributed the agent.' };\n\tslashCommand?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of slashCommand used.' };\n\tlocation: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The location at which chat request was made.' };\n\tcitations: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of public code citations that were returned with the response.' };\n\tnumCodeBlocks: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of code blocks in the response.' };\n\tisParticipantDetected: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the participant was automatically detected.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the performance of Chat agents.';\n};\n\nconst maxPersistedSessions = 25;\n\nclass CancellableRequest implements IDisposable {\n\tconstructor(\n\t\tpublic readonly cancellationTokenSource: CancellationTokenSource,\n\t\tpublic requestId?: string | undefined\n\t) { }\n\n\tdispose() {\n\t\tthis.cancellationTokenSource.dispose();\n\t}\n\n\tcancel() {\n\t\tthis.cancellationTokenSource.cancel();\n\t}\n}\n\nexport class ChatService extends Disposable implements IChatService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _sessionModels = this._register(new DisposableMap<string, ChatModel>());\n\tprivate readonly _pendingRequests = this._register(new DisposableMap<string, CancellableRequest>());\n\tprivate _persistedSessions: ISerializableChatsData;\n\n\t/** Just for empty windows, need to enforce that a chat was deleted, even though other windows still have it */\n\tprivate _deletedChatIds = new Set<string>();\n\n\tprivate _transferredSessionData: IChatTransferredSessionData | undefined;\n\tpublic get transferredSessionData(): IChatTransferredSessionData | undefined {\n\t\treturn this._transferredSessionData;\n\t}\n\n\tprivate readonly _onDidPerformUserAction = this._register(new Emitter<IChatUserActionEvent>());\n\tpublic readonly onDidPerformUserAction: Event<IChatUserActionEvent> = this._onDidPerformUserAction.event;\n\n\tprivate readonly _onDidDisposeSession = this._register(new Emitter<{ sessionId: string; reason: 'initializationFailed' | 'cleared' }>());\n\tpublic readonly onDidDisposeSession = this._onDidDisposeSession.event;\n\n\tprivate readonly _sessionFollowupCancelTokens = this._register(new DisposableMap<string, CancellationTokenSource>());\n\tprivate readonly _chatServiceTelemetry: ChatServiceTelemetry;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IChatSlashCommandService private readonly chatSlashCommandService: IChatSlashCommandService,\n\t\t@IChatVariablesService private readonly chatVariablesService: IChatVariablesService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@IWorkbenchAssignmentService workbenchAssignmentService: IWorkbenchAssignmentService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._chatServiceTelemetry = this.instantiationService.createInstance(ChatServiceTelemetry);\n\t\tconst isEmptyWindow = !workspaceContextService.getWorkspace().folders.length;\n\t\tconst sessionData = storageService.get(serializedChatKey, isEmptyWindow ? StorageScope.APPLICATION : StorageScope.WORKSPACE, '');\n\t\tif (sessionData) {\n\t\t\tthis._persistedSessions = this.deserializeChats(sessionData);\n\t\t\tconst countsForLog = Object.keys(this._persistedSessions).length;\n\t\t\tif (countsForLog > 0) {\n\t\t\t\tthis.trace('constructor', `Restored ${countsForLog} persisted sessions`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._persistedSessions = {};\n\t\t}\n\n\t\tconst transferredData = this.getTransferredSessionData();\n\t\tconst transferredChat = transferredData?.chat;\n\t\tif (transferredChat) {\n\t\t\tthis.trace('constructor', `Transferred session ${transferredChat.sessionId}`);\n\t\t\tthis._persistedSessions[transferredChat.sessionId] = transferredChat;\n\t\t\tthis._transferredSessionData = { sessionId: transferredChat.sessionId, inputValue: transferredData.inputValue };\n\t\t}\n\n\t\tthis._register(storageService.onWillSaveState(() => this.saveState()));\n\n\t\tconst voteUpEnabled = CONTEXT_VOTE_UP_ENABLED.bindTo(contextKeyService);\n\t\tworkbenchAssignmentService.getTreatment('chatVoteUpEnabled')\n\t\t\t.then(value => voteUpEnabled.set(!!value));\n\t}\n\n\tisEnabled(location: ChatAgentLocation): boolean {\n\t\treturn this.chatAgentService.getContributedDefaultAgent(location) !== undefined;\n\t}\n\n\tprivate saveState(): void {\n\t\tconst liveChats = Array.from(this._sessionModels.values())\n\t\t\t.filter(session => session.initialLocation === ChatAgentLocation.Panel)\n\t\t\t.filter(session => session.getRequests().length > 0);\n\n\t\tconst isEmptyWindow = !this.workspaceContextService.getWorkspace().folders.length;\n\t\tif (isEmptyWindow) {\n\t\t\tthis.syncEmptyWindowChats(liveChats);\n\t\t} else {\n\t\t\tlet allSessions: (ChatModel | ISerializableChatData)[] = liveChats;\n\t\t\tallSessions = allSessions.concat(\n\t\t\t\tObject.values(this._persistedSessions)\n\t\t\t\t\t.filter(session => !this._sessionModels.has(session.sessionId))\n\t\t\t\t\t.filter(session => session.requests.length));\n\t\t\tallSessions.sort((a, b) => (b.creationDate ?? 0) - (a.creationDate ?? 0));\n\t\t\tallSessions = allSessions.slice(0, maxPersistedSessions);\n\t\t\tif (allSessions.length) {\n\t\t\t\tthis.trace('onWillSaveState', `Persisting ${allSessions.length} sessions`);\n\t\t\t}\n\n\t\t\tconst serialized = JSON.stringify(allSessions);\n\n\t\t\tif (allSessions.length) {\n\t\t\t\tthis.trace('onWillSaveState', `Persisting ${serialized.length} chars`);\n\t\t\t}\n\n\t\t\tthis.storageService.store(serializedChatKey, serialized, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t}\n\n\t\tthis._deletedChatIds.clear();\n\t}\n\n\tprivate syncEmptyWindowChats(thisWindowChats: ChatModel[]): void {\n\t\t// Note- an unavoidable race condition exists here. If there are multiple empty windows open, and the user quits the application, then the focused\n\t\t// window may lose active chats, because all windows are reading and writing to storageService at the same time. This can't be fixed without some\n\t\t// kind of locking, but in reality, the focused window will likely have run `saveState` at some point, like on a window focus change, and it will\n\t\t// generally be fine.\n\t\tconst sessionData = this.storageService.get(serializedChatKey, StorageScope.APPLICATION, '');\n\n\t\tconst originalPersistedSessions = this._persistedSessions;\n\t\tlet persistedSessions: ISerializableChatsData;\n\t\tif (sessionData) {\n\t\t\tpersistedSessions = this.deserializeChats(sessionData);\n\t\t\tconst countsForLog = Object.keys(persistedSessions).length;\n\t\t\tif (countsForLog > 0) {\n\t\t\t\tthis.trace('constructor', `Restored ${countsForLog} persisted sessions`);\n\t\t\t}\n\t\t} else {\n\t\t\tpersistedSessions = {};\n\t\t}\n\n\t\tthis._deletedChatIds.forEach(id => delete persistedSessions[id]);\n\n\t\t// Has the chat in this window been updated, and then closed? Overwrite the old persisted chats.\n\t\tObject.values(originalPersistedSessions).forEach(session => {\n\t\t\tconst persistedSession = persistedSessions[session.sessionId];\n\t\t\tif (persistedSession && session.requests.length > persistedSession.requests.length) {\n\t\t\t\t// We will add a 'modified date' at some point, but comparing the number of requests is good enough\n\t\t\t\tpersistedSessions[session.sessionId] = session;\n\t\t\t} else if (!persistedSession && session.isNew) {\n\t\t\t\t// This session was created in this window, and hasn't been persisted yet\n\t\t\t\tsession.isNew = false;\n\t\t\t\tpersistedSessions[session.sessionId] = session;\n\t\t\t}\n\t\t});\n\n\t\tthis._persistedSessions = persistedSessions;\n\n\t\t// Add this window's active chat models to the set to persist.\n\t\t// Having the same session open in two empty windows at the same time can lead to data loss, this is acceptable\n\t\tconst allSessions: Record<string, ISerializableChatData | ChatModel> = { ...this._persistedSessions };\n\t\tfor (const chat of thisWindowChats) {\n\t\t\tallSessions[chat.sessionId] = chat;\n\t\t}\n\n\t\tlet sessionsList = Object.values(allSessions);\n\t\tsessionsList.sort((a, b) => (b.creationDate ?? 0) - (a.creationDate ?? 0));\n\t\tsessionsList = sessionsList.slice(0, maxPersistedSessions);\n\t\tconst data = JSON.stringify(sessionsList);\n\t\tthis.storageService.store(serializedChatKey, data, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tnotifyUserAction(action: IChatUserActionEvent): void {\n\t\tthis._chatServiceTelemetry.notifyUserAction(action);\n\t\tthis._onDidPerformUserAction.fire(action);\n\t}\n\n\tsetChatSessionTitle(sessionId: string, title: string): void {\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (model) {\n\t\t\tmodel.setCustomTitle(title);\n\t\t\treturn;\n\t\t}\n\n\t\tconst session = this._persistedSessions[sessionId];\n\t\tif (session) {\n\t\t\tsession.customTitle = title;\n\t\t}\n\t}\n\n\tprivate trace(method: string, message?: string): void {\n\t\tif (message) {\n\t\t\tthis.logService.trace(`ChatService#${method}: ${message}`);\n\t\t} else {\n\t\t\tthis.logService.trace(`ChatService#${method}`);\n\t\t}\n\t}\n\n\tprivate error(method: string, message: string): void {\n\t\tthis.logService.error(`ChatService#${method} ${message}`);\n\t}\n\n\tprivate deserializeChats(sessionData: string): ISerializableChatsData {\n\t\ttry {\n\t\t\tconst arrayOfSessions: ISerializableChatDataIn[] = revive(JSON.parse(sessionData)); // Revive serialized URIs in session data\n\t\t\tif (!Array.isArray(arrayOfSessions)) {\n\t\t\t\tthrow new Error('Expected array');\n\t\t\t}\n\n\t\t\tconst sessions = arrayOfSessions.reduce<ISerializableChatsData>((acc, session) => {\n\t\t\t\t// Revive serialized markdown strings in response data\n\t\t\t\tfor (const request of session.requests) {\n\t\t\t\t\tif (Array.isArray(request.response)) {\n\t\t\t\t\t\trequest.response = request.response.map((response) => {\n\t\t\t\t\t\t\tif (typeof response === 'string') {\n\t\t\t\t\t\t\t\treturn new MarkdownString(response);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (typeof request.response === 'string') {\n\t\t\t\t\t\trequest.response = [new MarkdownString(request.response)];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tacc[session.sessionId] = normalizeSerializableChatData(session);\n\t\t\t\treturn acc;\n\t\t\t}, {});\n\t\t\treturn sessions;\n\t\t} catch (err) {\n\t\t\tthis.error('deserializeChats', `Malformed session data: ${err}. [${sessionData.substring(0, 20)}${sessionData.length > 20 ? '...' : ''}]`);\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate getTransferredSessionData(): IChatTransfer | undefined {\n\t\tconst data: IChatTransfer[] = this.storageService.getObject(globalChatKey, StorageScope.PROFILE, []);\n\t\tconst workspaceUri = this.workspaceContextService.getWorkspace().folders[0]?.uri;\n\t\tif (!workspaceUri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst thisWorkspace = workspaceUri.toString();\n\t\tconst currentTime = Date.now();\n\t\t// Only use transferred data if it was created recently\n\t\tconst transferred = data.find(item => URI.revive(item.toWorkspace).toString() === thisWorkspace && (currentTime - item.timestampInMilliseconds < SESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS));\n\t\t// Keep data that isn't for the current workspace and that hasn't expired yet\n\t\tconst filtered = data.filter(item => URI.revive(item.toWorkspace).toString() !== thisWorkspace && (currentTime - item.timestampInMilliseconds < SESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS));\n\t\tthis.storageService.store(globalChatKey, JSON.stringify(filtered), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\treturn transferred;\n\t}\n\n\t/**\n\t * Returns an array of chat details for all persisted chat sessions that have at least one request.\n\t * The array is sorted by creation date in descending order.\n\t * Chat sessions that have already been loaded into the chat view are excluded from the result.\n\t * Imported chat sessions are also excluded from the result.\n\t */\n\tgetHistory(): IChatDetail[] {\n\t\tconst persistedSessions = Object.values(this._persistedSessions)\n\t\t\t.filter(session => session.requests.length > 0)\n\t\t\t.filter(session => !this._sessionModels.has(session.sessionId));\n\n\t\tconst persistedSessionItems = persistedSessions\n\t\t\t.filter(session => !session.isImported)\n\t\t\t.map(session => {\n\t\t\t\tconst title = session.customTitle ?? ChatModel.getDefaultTitle(session.requests);\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: session.sessionId,\n\t\t\t\t\ttitle,\n\t\t\t\t\tlastMessageDate: session.lastMessageDate,\n\t\t\t\t\tisActive: false,\n\t\t\t\t} satisfies IChatDetail;\n\t\t\t});\n\t\tconst liveSessionItems = Array.from(this._sessionModels.values())\n\t\t\t.filter(session => !session.isImported)\n\t\t\t.map(session => {\n\t\t\t\tconst title = session.title || localize('newChat', \"New Chat\");\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: session.sessionId,\n\t\t\t\t\ttitle,\n\t\t\t\t\tlastMessageDate: session.lastMessageDate,\n\t\t\t\t\tisActive: true,\n\t\t\t\t} satisfies IChatDetail;\n\t\t\t});\n\t\treturn [...liveSessionItems, ...persistedSessionItems];\n\t}\n\n\tremoveHistoryEntry(sessionId: string): void {\n\t\tif (this._persistedSessions[sessionId]) {\n\t\t\tthis._deletedChatIds.add(sessionId);\n\t\t\tdelete this._persistedSessions[sessionId];\n\t\t\tthis.saveState();\n\t\t}\n\t}\n\n\tclearAllHistoryEntries(): void {\n\t\tObject.values(this._persistedSessions).forEach(session => this._deletedChatIds.add(session.sessionId));\n\t\tthis._persistedSessions = {};\n\t\tthis.saveState();\n\t}\n\n\tstartSession(location: ChatAgentLocation, token: CancellationToken): ChatModel {\n\t\tthis.trace('startSession');\n\t\treturn this._startSession(undefined, location, token);\n\t}\n\n\tprivate _startSession(someSessionHistory: IExportableChatData | ISerializableChatData | undefined, location: ChatAgentLocation, token: CancellationToken): ChatModel {\n\t\tconst model = this.instantiationService.createInstance(ChatModel, someSessionHistory, location);\n\t\tthis._sessionModels.set(model.sessionId, model);\n\t\tthis.initializeSession(model, token);\n\t\treturn model;\n\t}\n\n\tprivate async initializeSession(model: ChatModel, token: CancellationToken): Promise<void> {\n\t\ttry {\n\t\t\tthis.trace('initializeSession', `Initialize session ${model.sessionId}`);\n\t\t\tmodel.startInitialize();\n\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\t\tconst defaultAgentData = this.chatAgentService.getContributedDefaultAgent(model.initialLocation) ?? this.chatAgentService.getContributedDefaultAgent(ChatAgentLocation.Panel);\n\t\t\tif (!defaultAgentData) {\n\t\t\t\tthrow new ErrorNoTelemetry('No default agent contributed');\n\t\t\t}\n\n\t\t\tawait this.extensionService.activateByEvent(`onChatParticipant:${defaultAgentData.id}`);\n\n\t\t\tconst defaultAgent = this.chatAgentService.getActivatedAgents().find(agent => agent.id === defaultAgentData.id);\n\t\t\tif (!defaultAgent) {\n\t\t\t\tthrow new ErrorNoTelemetry('No default agent registered');\n\t\t\t}\n\t\t\tconst welcomeMessage = model.welcomeMessage ? undefined : await defaultAgent.provideWelcomeMessage?.(model.initialLocation, token) ?? undefined;\n\t\t\tconst welcomeModel = welcomeMessage && this.instantiationService.createInstance(\n\t\t\t\tChatWelcomeMessageModel,\n\t\t\t\twelcomeMessage.map(item => typeof item === 'string' ? new MarkdownString(item) : item),\n\t\t\t\tawait defaultAgent.provideSampleQuestions?.(model.initialLocation, token) ?? []\n\t\t\t);\n\n\t\t\tmodel.initialize(welcomeModel);\n\t\t} catch (err) {\n\t\t\tthis.trace('startSession', `initializeSession failed: ${err}`);\n\t\t\tmodel.setInitializationError(err);\n\t\t\tthis._sessionModels.deleteAndDispose(model.sessionId);\n\t\t\tthis._onDidDisposeSession.fire({ sessionId: model.sessionId, reason: 'initializationFailed' });\n\t\t}\n\t}\n\n\tgetSession(sessionId: string): IChatModel | undefined {\n\t\treturn this._sessionModels.get(sessionId);\n\t}\n\n\tgetOrRestoreSession(sessionId: string): ChatModel | undefined {\n\t\tthis.trace('getOrRestoreSession', `sessionId: ${sessionId}`);\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (model) {\n\t\t\treturn model;\n\t\t}\n\n\t\tconst sessionData = revive<ISerializableChatData>(this._persistedSessions[sessionId]);\n\t\tif (!sessionData) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (sessionId === this.transferredSessionData?.sessionId) {\n\t\t\tthis._transferredSessionData = undefined;\n\t\t}\n\n\t\treturn this._startSession(sessionData, sessionData.initialLocation ?? ChatAgentLocation.Panel, CancellationToken.None);\n\t}\n\n\tloadSessionFromContent(data: IExportableChatData | ISerializableChatData): IChatModel | undefined {\n\t\treturn this._startSession(data, data.initialLocation ?? ChatAgentLocation.Panel, CancellationToken.None);\n\t}\n\n\tasync resendRequest(request: IChatRequestModel, options?: IChatSendRequestOptions): Promise<void> {\n\t\tconst model = this._sessionModels.get(request.session.sessionId);\n\t\tif (!model && model !== request.session) {\n\t\t\tthrow new Error(`Unknown session: ${request.session.sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\n\t\tconst cts = this._pendingRequests.get(request.session.sessionId);\n\t\tif (cts) {\n\t\t\tthis.trace('resendRequest', `Session ${request.session.sessionId} already has a pending request, cancelling...`);\n\t\t\tcts.cancel();\n\t\t}\n\n\t\tconst location = options?.location ?? model.initialLocation;\n\t\tconst attempt = options?.attempt ?? 0;\n\t\tconst enableCommandDetection = !options?.noCommandDetection;\n\t\tconst defaultAgent = this.chatAgentService.getDefaultAgent(location)!;\n\n\t\tmodel.removeRequest(request.id, ChatRequestRemovalReason.Resend);\n\n\t\tconst resendOptions: IChatSendRequestOptions = {\n\t\t\t...options,\n\t\t\tlocationData: request.locationData,\n\t\t\tattachedContext: request.attachedContext,\n\t\t};\n\t\tawait this._sendRequestAsync(model, model.sessionId, request.message, attempt, enableCommandDetection, defaultAgent, location, resendOptions).responseCompletePromise;\n\t}\n\n\tasync sendRequest(sessionId: string, request: string, options?: IChatSendRequestOptions): Promise<IChatSendRequestData | undefined> {\n\t\tthis.trace('sendRequest', `sessionId: ${sessionId}, message: ${request.substring(0, 20)}${request.length > 20 ? '[...]' : ''}}`);\n\t\tif (!request.trim() && !options?.slashCommand && !options?.agentId) {\n\t\t\tthis.trace('sendRequest', 'Rejected empty message');\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\n\t\tif (this._pendingRequests.has(sessionId)) {\n\t\t\tthis.trace('sendRequest', `Session ${sessionId} already has a pending request`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst location = options?.location ?? model.initialLocation;\n\t\tconst attempt = options?.attempt ?? 0;\n\t\tconst defaultAgent = this.chatAgentService.getDefaultAgent(location)!;\n\n\t\tconst parsedRequest = this.parseChatRequest(sessionId, request, location, options);\n\t\tconst agent = parsedRequest.parts.find((r): r is ChatRequestAgentPart => r instanceof ChatRequestAgentPart)?.agent ?? defaultAgent;\n\t\tconst agentSlashCommandPart = parsedRequest.parts.find((r): r is ChatRequestAgentSubcommandPart => r instanceof ChatRequestAgentSubcommandPart);\n\n\t\t// This method is only returning whether the request was accepted - don't block on the actual request\n\t\treturn {\n\t\t\t...this._sendRequestAsync(model, sessionId, parsedRequest, attempt, !options?.noCommandDetection, defaultAgent, location, options),\n\t\t\tagent,\n\t\t\tslashCommand: agentSlashCommandPart?.command,\n\t\t};\n\t}\n\n\tprivate parseChatRequest(sessionId: string, request: string, location: ChatAgentLocation, options: IChatSendRequestOptions | undefined): IParsedChatRequest {\n\t\tlet parserContext = options?.parserContext;\n\t\tif (options?.agentId) {\n\t\t\tconst agent = this.chatAgentService.getAgent(options.agentId);\n\t\t\tif (!agent) {\n\t\t\t\tthrow new Error(`Unknown agent: ${options.agentId}`);\n\t\t\t}\n\t\t\tparserContext = { selectedAgent: agent };\n\t\t\tconst commandPart = options.slashCommand ? ` ${chatSubcommandLeader}${options.slashCommand}` : '';\n\t\t\trequest = `${chatAgentLeader}${agent.name}${commandPart} ${request}`;\n\t\t}\n\n\t\tconst parsedRequest = this.instantiationService.createInstance(ChatRequestParser).parseChatRequest(sessionId, request, location, parserContext);\n\t\treturn parsedRequest;\n\t}\n\n\tprivate refreshFollowupsCancellationToken(sessionId: string): CancellationToken {\n\t\tthis._sessionFollowupCancelTokens.get(sessionId)?.cancel();\n\t\tconst newTokenSource = new CancellationTokenSource();\n\t\tthis._sessionFollowupCancelTokens.set(sessionId, newTokenSource);\n\n\t\treturn newTokenSource.token;\n\t}\n\n\tprivate _sendRequestAsync(model: ChatModel, sessionId: string, parsedRequest: IParsedChatRequest, attempt: number, enableCommandDetection: boolean, defaultAgent: IChatAgent, location: ChatAgentLocation, options?: IChatSendRequestOptions): IChatSendRequestResponseState {\n\t\tconst followupsCancelToken = this.refreshFollowupsCancellationToken(sessionId);\n\t\tlet request: ChatRequestModel;\n\t\tconst agentPart = 'kind' in parsedRequest ? undefined : parsedRequest.parts.find((r): r is ChatRequestAgentPart => r instanceof ChatRequestAgentPart);\n\t\tconst agentSlashCommandPart = 'kind' in parsedRequest ? undefined : parsedRequest.parts.find((r): r is ChatRequestAgentSubcommandPart => r instanceof ChatRequestAgentSubcommandPart);\n\t\tconst commandPart = 'kind' in parsedRequest ? undefined : parsedRequest.parts.find((r): r is ChatRequestSlashCommandPart => r instanceof ChatRequestSlashCommandPart);\n\t\tconst requests = [...model.getRequests()];\n\n\t\tlet gotProgress = false;\n\t\tconst requestType = commandPart ? 'slashCommand' : 'string';\n\n\t\tconst responseCreated = new DeferredPromise<IChatResponseModel>();\n\t\tlet responseCreatedComplete = false;\n\t\tfunction completeResponseCreated(): void {\n\t\t\tif (!responseCreatedComplete && request?.response) {\n\t\t\t\tresponseCreated.complete(request.response);\n\t\t\t\tresponseCreatedComplete = true;\n\t\t\t}\n\t\t}\n\n\t\tconst source = new CancellationTokenSource();\n\t\tconst token = source.token;\n\t\tconst sendRequestInternal = async () => {\n\t\t\tconst progressCallback = (progress: IChatProgress) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tgotProgress = true;\n\n\t\t\t\tif (progress.kind === 'markdownContent') {\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned progress for session ${model.sessionId}, ${progress.content.value.length} chars`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned progress: ${JSON.stringify(progress)}`);\n\t\t\t\t}\n\n\t\t\t\tmodel.acceptResponseProgress(request, progress);\n\t\t\t\tcompleteResponseCreated();\n\t\t\t};\n\n\t\t\tlet detectedAgent: IChatAgentData | undefined;\n\t\t\tlet detectedCommand: IChatAgentCommand | undefined;\n\n\t\t\tconst stopWatch = new StopWatch(false);\n\t\t\tconst listener = token.onCancellationRequested(() => {\n\t\t\t\tthis.trace('sendRequest', `Request for session ${model.sessionId} was cancelled`);\n\t\t\t\tthis.telemetryService.publicLog2<ChatProviderInvokedEvent, ChatProviderInvokedClassification>('interactiveSessionProviderInvoked', {\n\t\t\t\t\ttimeToFirstProgress: undefined,\n\t\t\t\t\t// Normally timings happen inside the EH around the actual provider. For cancellation we can measure how long the user waited before cancelling\n\t\t\t\t\ttotalTime: stopWatch.elapsed(),\n\t\t\t\t\tresult: 'cancelled',\n\t\t\t\t\trequestType,\n\t\t\t\t\tagent: agentPart?.agent.id ?? '',\n\t\t\t\t\tagentExtensionId: agentPart?.agent.extensionId.value ?? '',\n\t\t\t\t\tslashCommand: agentSlashCommandPart ? agentSlashCommandPart.command.name : commandPart?.slashCommand.command,\n\t\t\t\t\tchatSessionId: model.sessionId,\n\t\t\t\t\tlocation,\n\t\t\t\t\tcitations: request?.response?.codeCitations.length ?? 0,\n\t\t\t\t\tnumCodeBlocks: getCodeBlocks(request.response?.response.toString() ?? '').length,\n\t\t\t\t\tisParticipantDetected: !!detectedAgent\n\t\t\t\t});\n\n\t\t\t\tmodel.cancelRequest(request);\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tlet rawResult: IChatAgentResult | null | undefined;\n\t\t\t\tlet agentOrCommandFollowups: Promise<IChatFollowup[] | undefined> | undefined = undefined;\n\t\t\t\tlet chatTitlePromise: Promise<string | undefined> | undefined;\n\n\t\t\t\tif (agentPart || (defaultAgent && !commandPart)) {\n\t\t\t\t\tconst prepareChatAgentRequest = async (agent: IChatAgentData, command?: IChatAgentCommand, enableCommandDetection?: boolean, chatRequest?: ChatRequestModel, isParticipantDetected?: boolean) => {\n\t\t\t\t\t\tconst initVariableData: IChatRequestVariableData = { variables: [] };\n\t\t\t\t\t\trequest = chatRequest ?? model.addRequest(parsedRequest, initVariableData, attempt, agent, command, options?.confirmation, options?.locationData, options?.attachedContext);\n\n\t\t\t\t\t\t// Variables may have changed if the agent and slash command changed, so resolve them again even if we already had a chatRequest\n\t\t\t\t\t\tconst variableData = await this.chatVariablesService.resolveVariables(parsedRequest, request.attachedContext, model, progressCallback, token);\n\t\t\t\t\t\tmodel.updateRequest(request, variableData);\n\t\t\t\t\t\tconst promptTextResult = getPromptText(request.message);\n\t\t\t\t\t\tconst updatedVariableData = updateRanges(variableData, promptTextResult.diff); // TODO bit of a hack\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsessionId,\n\t\t\t\t\t\t\trequestId: request.id,\n\t\t\t\t\t\t\tagentId: agent.id,\n\t\t\t\t\t\t\tmessage: promptTextResult.message,\n\t\t\t\t\t\t\tcommand: command?.name,\n\t\t\t\t\t\t\tvariables: updatedVariableData,\n\t\t\t\t\t\t\tenableCommandDetection,\n\t\t\t\t\t\t\tisParticipantDetected,\n\t\t\t\t\t\t\tattempt,\n\t\t\t\t\t\t\tlocation,\n\t\t\t\t\t\t\tlocationData: request.locationData,\n\t\t\t\t\t\t\tacceptedConfirmationData: options?.acceptedConfirmationData,\n\t\t\t\t\t\t\trejectedConfirmationData: options?.rejectedConfirmationData,\n\t\t\t\t\t\t} satisfies IChatAgentRequest;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (this.configurationService.getValue('chat.experimental.detectParticipant.enabled') !== false && this.chatAgentService.hasChatParticipantDetectionProviders() && !agentPart && !commandPart && enableCommandDetection) {\n\t\t\t\t\t\t// We have no agent or command to scope history with, pass the full history to the participant detection provider\n\t\t\t\t\t\tconst defaultAgentHistory = this.getHistoryEntriesFromModel(requests, model.sessionId, location, defaultAgent.id);\n\n\t\t\t\t\t\t// Prepare the request object that we will send to the participant detection provider\n\t\t\t\t\t\tconst chatAgentRequest = await prepareChatAgentRequest(defaultAgent, agentSlashCommandPart?.command, enableCommandDetection, undefined, false);\n\n\t\t\t\t\t\tconst result = await this.chatAgentService.detectAgentOrCommand(chatAgentRequest, defaultAgentHistory, { location }, token);\n\t\t\t\t\t\tif (result && this.chatAgentService.getAgent(result.agent.id)?.locations?.includes(location)) {\n\t\t\t\t\t\t\t// Update the response in the ChatModel to reflect the detected agent and command\n\t\t\t\t\t\t\trequest.response?.setAgent(result.agent, result.command);\n\t\t\t\t\t\t\tdetectedAgent = result.agent;\n\t\t\t\t\t\t\tdetectedCommand = result.command;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst agent = (detectedAgent ?? agentPart?.agent ?? defaultAgent)!;\n\t\t\t\t\tconst command = detectedCommand ?? agentSlashCommandPart?.command;\n\t\t\t\t\tawait this.extensionService.activateByEvent(`onChatParticipant:${agent.id}`);\n\n\t\t\t\t\t// Recompute history in case the agent or command changed\n\t\t\t\t\tconst history = this.getHistoryEntriesFromModel(requests, model.sessionId, location, agent.id);\n\t\t\t\t\tconst requestProps = await prepareChatAgentRequest(agent, command, enableCommandDetection, request /* Reuse the request object if we already created it for participant detection */, !!detectedAgent);\n\t\t\t\t\tconst pendingRequest = this._pendingRequests.get(sessionId);\n\t\t\t\t\tif (pendingRequest && !pendingRequest.requestId) {\n\t\t\t\t\t\tpendingRequest.requestId = requestProps.requestId;\n\t\t\t\t\t}\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\tconst agentResult = await this.chatAgentService.invokeAgent(agent.id, requestProps, progressCallback, history, token);\n\t\t\t\t\trawResult = agentResult;\n\t\t\t\t\tagentOrCommandFollowups = this.chatAgentService.getFollowups(agent.id, requestProps, agentResult, history, followupsCancelToken);\n\t\t\t\t\tchatTitlePromise = model.getRequests().length === 1 && !model.customTitle ? this.chatAgentService.getChatTitle(defaultAgent.id, this.getHistoryEntriesFromModel(model.getRequests(), model.sessionId, location, agent.id), CancellationToken.None) : undefined;\n\t\t\t\t} else if (commandPart && this.chatSlashCommandService.hasCommand(commandPart.slashCommand.command)) {\n\t\t\t\t\trequest = model.addRequest(parsedRequest, { variables: [] }, attempt);\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\t// contributed slash commands\n\t\t\t\t\t// TODO: spell this out in the UI\n\t\t\t\t\tconst history: IChatMessage[] = [];\n\t\t\t\t\tfor (const request of model.getRequests()) {\n\t\t\t\t\t\tif (!request.response) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thistory.push({ role: ChatMessageRole.User, content: [{ type: 'text', value: request.message.text }] });\n\t\t\t\t\t\thistory.push({ role: ChatMessageRole.Assistant, content: [{ type: 'text', value: request.response.response.toString() }] });\n\t\t\t\t\t}\n\t\t\t\t\tconst message = parsedRequest.text;\n\t\t\t\t\tconst commandResult = await this.chatSlashCommandService.executeCommand(commandPart.slashCommand.command, message.substring(commandPart.slashCommand.command.length + 1).trimStart(), new Progress<IChatProgress>(p => {\n\t\t\t\t\t\tprogressCallback(p);\n\t\t\t\t\t}), history, location, token);\n\t\t\t\t\tagentOrCommandFollowups = Promise.resolve(commandResult?.followUp);\n\t\t\t\t\trawResult = {};\n\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Cannot handle request`);\n\t\t\t\t}\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (!rawResult) {\n\t\t\t\t\t\tthis.trace('sendRequest', `Provider returned no response for session ${model.sessionId}`);\n\t\t\t\t\t\trawResult = { errorDetails: { message: localize('emptyResponse', \"Provider returned null response\") } };\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = rawResult.errorDetails?.responseIsFiltered ? 'filtered' :\n\t\t\t\t\t\trawResult.errorDetails && gotProgress ? 'errorWithOutput' :\n\t\t\t\t\t\t\trawResult.errorDetails ? 'error' :\n\t\t\t\t\t\t\t\t'success';\n\t\t\t\t\tconst commandForTelemetry = agentSlashCommandPart ? agentSlashCommandPart.command.name : commandPart?.slashCommand.command;\n\t\t\t\t\tthis.telemetryService.publicLog2<ChatProviderInvokedEvent, ChatProviderInvokedClassification>('interactiveSessionProviderInvoked', {\n\t\t\t\t\t\ttimeToFirstProgress: rawResult.timings?.firstProgress,\n\t\t\t\t\t\ttotalTime: rawResult.timings?.totalElapsed,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\trequestType,\n\t\t\t\t\t\tagent: agentPart?.agent.id ?? '',\n\t\t\t\t\t\tagentExtensionId: agentPart?.agent.extensionId.value ?? '',\n\t\t\t\t\t\tslashCommand: commandForTelemetry,\n\t\t\t\t\t\tchatSessionId: model.sessionId,\n\t\t\t\t\t\tisParticipantDetected: !!detectedAgent,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tcitations: request.response?.codeCitations.length ?? 0,\n\t\t\t\t\t\tnumCodeBlocks: getCodeBlocks(request.response?.response.toString() ?? '').length\n\t\t\t\t\t});\n\t\t\t\t\tmodel.setResponse(request, rawResult);\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned response for session ${model.sessionId}`);\n\n\t\t\t\t\tmodel.completeResponse(request);\n\t\t\t\t\tif (agentOrCommandFollowups) {\n\t\t\t\t\t\tagentOrCommandFollowups.then(followups => {\n\t\t\t\t\t\t\tmodel.setFollowups(request, followups);\n\t\t\t\t\t\t\tthis._chatServiceTelemetry.retrievedFollowups(agentPart?.agent.id ?? '', commandForTelemetry, followups?.length ?? 0);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tchatTitlePromise?.then(title => {\n\t\t\t\t\t\tif (title) {\n\t\t\t\t\t\t\tmodel.setCustomTitle(title);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconst result = 'error';\n\t\t\t\tthis.telemetryService.publicLog2<ChatProviderInvokedEvent, ChatProviderInvokedClassification>('interactiveSessionProviderInvoked', {\n\t\t\t\t\ttimeToFirstProgress: undefined,\n\t\t\t\t\ttotalTime: undefined,\n\t\t\t\t\tresult,\n\t\t\t\t\trequestType,\n\t\t\t\t\tagent: agentPart?.agent.id ?? '',\n\t\t\t\t\tagentExtensionId: agentPart?.agent.extensionId.value ?? '',\n\t\t\t\t\tslashCommand: agentSlashCommandPart ? agentSlashCommandPart.command.name : commandPart?.slashCommand.command,\n\t\t\t\t\tchatSessionId: model.sessionId,\n\t\t\t\t\tlocation,\n\t\t\t\t\tcitations: 0,\n\t\t\t\t\tnumCodeBlocks: 0,\n\t\t\t\t\tisParticipantDetected: !!detectedAgent\n\t\t\t\t});\n\t\t\t\tthis.logService.error(`Error while handling chat request: ${toErrorMessage(err, true)}`);\n\t\t\t\tif (request) {\n\t\t\t\t\tconst rawResult: IChatAgentResult = { errorDetails: { message: err.message } };\n\t\t\t\t\tmodel.setResponse(request, rawResult);\n\t\t\t\t\tcompleteResponseCreated();\n\t\t\t\t\tmodel.completeResponse(request);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t};\n\t\tconst rawResponsePromise = sendRequestInternal();\n\t\tthis._pendingRequests.set(model.sessionId, new CancellableRequest(source));\n\t\trawResponsePromise.finally(() => {\n\t\t\tthis._pendingRequests.deleteAndDispose(model.sessionId);\n\t\t});\n\t\treturn {\n\t\t\tresponseCreatedPromise: responseCreated.p,\n\t\t\tresponseCompletePromise: rawResponsePromise,\n\t\t};\n\t}\n\n\tprivate getHistoryEntriesFromModel(requests: IChatRequestModel[], sessionId: string, location: ChatAgentLocation, forAgentId: string): IChatAgentHistoryEntry[] {\n\t\tconst history: IChatAgentHistoryEntry[] = [];\n\t\tfor (const request of requests) {\n\t\t\tif (!request.response) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst defaultAgentId = this.chatAgentService.getDefaultAgent(location)?.id;\n\t\t\tif (forAgentId !== request.response.agent?.id && forAgentId !== defaultAgentId) {\n\t\t\t\t// An agent only gets to see requests that were sent to this agent.\n\t\t\t\t// The default agent (the undefined case) gets to see all of them.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promptTextResult = getPromptText(request.message);\n\t\t\tconst historyRequest: IChatAgentRequest = {\n\t\t\t\tsessionId: sessionId,\n\t\t\t\trequestId: request.id,\n\t\t\t\tagentId: request.response.agent?.id ?? '',\n\t\t\t\tmessage: promptTextResult.message,\n\t\t\t\tcommand: request.response.slashCommand?.name,\n\t\t\t\tvariables: updateRanges(request.variableData, promptTextResult.diff), // TODO bit of a hack\n\t\t\t\tlocation: ChatAgentLocation.Panel\n\t\t\t};\n\t\t\thistory.push({ request: historyRequest, response: request.response.response.value, result: request.response.result ?? {} });\n\t\t}\n\n\t\treturn history;\n\t}\n\n\tasync removeRequest(sessionId: string, requestId: string): Promise<void> {\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\n\t\tconst pendingRequest = this._pendingRequests.get(sessionId);\n\t\tif (pendingRequest?.requestId === requestId) {\n\t\t\tpendingRequest.cancel();\n\t\t\tthis._pendingRequests.deleteAndDispose(sessionId);\n\t\t}\n\n\t\tmodel.removeRequest(requestId);\n\t}\n\n\tasync adoptRequest(sessionId: string, request: IChatRequestModel) {\n\t\tif (!(request instanceof ChatRequestModel)) {\n\t\t\tthrow new TypeError('Can only adopt requests of type ChatRequestModel');\n\t\t}\n\t\tconst target = this._sessionModels.get(sessionId);\n\t\tif (!target) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait target.waitForInitialization();\n\n\t\tconst oldOwner = request.session;\n\t\ttarget.adoptRequest(request);\n\n\t\tif (request.response && !request.response.isComplete) {\n\t\t\tconst cts = this._pendingRequests.deleteAndLeak(oldOwner.sessionId);\n\t\t\tif (cts) {\n\t\t\t\tcts.requestId = request.id;\n\t\t\t\tthis._pendingRequests.set(target.sessionId, cts);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync addCompleteRequest(sessionId: string, message: IParsedChatRequest | string, variableData: IChatRequestVariableData | undefined, attempt: number | undefined, response: IChatCompleteResponse): Promise<void> {\n\t\tthis.trace('addCompleteRequest', `message: ${message}`);\n\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\t\tconst parsedRequest = typeof message === 'string' ?\n\t\t\tthis.instantiationService.createInstance(ChatRequestParser).parseChatRequest(sessionId, message) :\n\t\t\tmessage;\n\t\tconst request = model.addRequest(parsedRequest, variableData || { variables: [] }, attempt ?? 0);\n\t\tif (typeof response.message === 'string') {\n\t\t\t// TODO is this possible?\n\t\t\tmodel.acceptResponseProgress(request, { content: new MarkdownString(response.message), kind: 'markdownContent' });\n\t\t} else {\n\t\t\tfor (const part of response.message) {\n\t\t\t\tmodel.acceptResponseProgress(request, part, true);\n\t\t\t}\n\t\t}\n\t\tmodel.setResponse(request, response.result || {});\n\t\tif (response.followups !== undefined) {\n\t\t\tmodel.setFollowups(request, response.followups);\n\t\t}\n\t\tmodel.completeResponse(request);\n\t}\n\n\tcancelCurrentRequestForSession(sessionId: string): void {\n\t\tthis.trace('cancelCurrentRequestForSession', `sessionId: ${sessionId}`);\n\t\tthis._pendingRequests.get(sessionId)?.cancel();\n\t\tthis._pendingRequests.deleteAndDispose(sessionId);\n\t}\n\n\tclearSession(sessionId: string): void {\n\t\tthis.trace('clearSession', `sessionId: ${sessionId}`);\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tif (model.initialLocation === ChatAgentLocation.Panel) {\n\t\t\t// Turn all the real objects into actual JSON, otherwise, calling 'revive' may fail when it tries to\n\t\t\t// assign values to properties that are getters- microsoft/vscode-copilot-release#1233\n\t\t\tconst sessionData: ISerializableChatData = JSON.parse(JSON.stringify(model));\n\t\t\tsessionData.isNew = true;\n\t\t\tthis._persistedSessions[sessionId] = sessionData;\n\t\t}\n\n\t\tthis._sessionModels.deleteAndDispose(sessionId);\n\t\tthis._pendingRequests.get(sessionId)?.cancel();\n\t\tthis._pendingRequests.deleteAndDispose(sessionId);\n\t\tthis._onDidDisposeSession.fire({ sessionId, reason: 'cleared' });\n\t}\n\n\tpublic hasSessions(): boolean {\n\t\treturn !!Object.values(this._persistedSessions);\n\t}\n\n\ttransferChatSession(transferredSessionData: IChatTransferredSessionData, toWorkspace: URI): void {\n\t\tconst model = Iterable.find(this._sessionModels.values(), model => model.sessionId === transferredSessionData.sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Failed to transfer session. Unknown session ID: ${transferredSessionData.sessionId}`);\n\t\t}\n\n\t\tconst existingRaw: IChatTransfer[] = this.storageService.getObject(globalChatKey, StorageScope.PROFILE, []);\n\t\texistingRaw.push({\n\t\t\tchat: model.toJSON(),\n\t\t\ttimestampInMilliseconds: Date.now(),\n\t\t\ttoWorkspace: toWorkspace,\n\t\t\tinputValue: transferredSessionData.inputValue,\n\t\t});\n\n\t\tthis.storageService.store(globalChatKey, JSON.stringify(existingRaw), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tthis.trace('transferChatSession', `Transferred session ${model.sessionId} to workspace ${toWorkspace.toString()}`);\n\t}\n}\n\nfunction getCodeBlocks(text: string): string[] {\n\tconst lines = text.split('\\n');\n\tconst codeBlockLanguages: string[] = [];\n\n\tlet codeBlockState: undefined | { readonly delimiter: string; readonly languageId: string };\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst line = lines[i];\n\n\t\tif (codeBlockState) {\n\t\t\tif (new RegExp(`^\\\\s*${codeBlockState.delimiter}\\\\s*$`).test(line)) {\n\t\t\t\tcodeBlockLanguages.push(codeBlockState.languageId);\n\t\t\t\tcodeBlockState = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tconst match = line.match(/^(\\s*)(`{3,}|~{3,})(\\w*)/);\n\t\t\tif (match) {\n\t\t\t\tcodeBlockState = { delimiter: match[2], languageId: match[3] };\n\t\t\t}\n\t\t}\n\t}\n\treturn codeBlockLanguages;\n}\n"],
  "mappings": "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",
  "names": ["agent", "command", "enableCommandDetection", "request", "model"]
}
