var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=(i,e,n,t)=>{for(var a=t>1?void 0:t?p(e,n):e,o=i.length-1,r;o>=0;o--)(r=i[o])&&(a=(t?r(e,n,a):r(a))||a);return t&&a&&c(e,n,a),a},l=(i,e)=>(n,t)=>e(n,t,i);import"../../../../base/common/cancellation.js";import{Emitter as v}from"../../../../base/common/event.js";import{Iterable as m}from"../../../../base/common/iterator.js";import"../../../../base/common/jsonSchema.js";import{DisposableStore as f,toDisposable as y}from"../../../../base/common/lifecycle.js";import{isFalsyOrWhitespace as C}from"../../../../base/common/strings.js";import{localize as d}from"../../../../nls.js";import{IContextKeyService as I}from"../../../../platform/contextkey/common/contextkey.js";import{ExtensionIdentifier as M}from"../../../../platform/extensions/common/extensions.js";import{createDecorator as x}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as L}from"../../../../platform/log/common/log.js";import{IExtensionService as _,isProposedApiEnabled as b}from"../../../services/extensions/common/extensions.js";import{ExtensionsRegistry as S}from"../../../services/extensions/common/extensionsRegistry.js";import{CONTEXT_LANGUAGE_MODELS_ARE_USER_SELECTABLE as E}from"./chatContextKeys.js";var P=(t=>(t[t.System=0]="System",t[t.User=1]="User",t[t.Assistant=2]="Assistant",t))(P||{});const X=x("ILanguageModelsService"),u={type:"object",properties:{vendor:{type:"string",description:d("vscode.extension.contributes.languageModels.vendor","A globally unique vendor of language models.")}}},T=S.registerExtensionPoint({extensionPoint:"languageModels",jsonSchema:{description:d("vscode.extension.contributes.languageModels","Contribute language models of a specific vendor."),oneOf:[u,{type:"array",items:u}]},activationEventsGenerator:(i,e)=>{for(const n of i)e.push(`onLanguageModelChat:${n.vendor}`)}});let g=class{constructor(e,n,t){this._extensionService=e;this._logService=n;this._contextKeyService=t;this._hasUserSelectableModels=E.bindTo(this._contextKeyService),this._store.add(T.setHandler(a=>{this._vendors.clear();for(const r of a){if(!b(r.description,"chatProvider")){r.collector.error(d("vscode.extension.contributes.languageModels.chatProviderRequired","This contribution point requires the 'chatProvider' proposal."));continue}for(const s of m.wrap(r.value)){if(this._vendors.has(s.vendor)){r.collector.error(d("vscode.extension.contributes.languageModels.vendorAlreadyRegistered","The vendor '{0}' is already registered and cannot be registered twice",s.vendor));continue}if(C(s.vendor)){r.collector.error(d("vscode.extension.contributes.languageModels.emptyVendor","The vendor field cannot be empty."));continue}if(s.vendor.trim()!==s.vendor){r.collector.error(d("vscode.extension.contributes.languageModels.whitespaceVendor","The vendor field cannot start or end with whitespace."));continue}this._vendors.add(s.vendor)}}const o=[];for(const[r,s]of this._providers)this._vendors.has(s.metadata.vendor)||(this._providers.delete(r),o.push(r));o.length>0&&this._onDidChangeProviders.fire({removed:o})}))}_serviceBrand;_store=new f;_providers=new Map;_vendors=new Set;_onDidChangeProviders=this._store.add(new v);onDidChangeLanguageModels=this._onDidChangeProviders.event;_hasUserSelectableModels;dispose(){this._store.dispose(),this._providers.clear()}getLanguageModelIds(){return Array.from(this._providers.keys())}lookupLanguageModel(e){return this._providers.get(e)?.metadata}async selectLanguageModels(e){if(e.vendor)await this._extensionService.activateByEvent(`onLanguageModelChat:${e.vendor}}`);else{const t=Array.from(this._vendors).map(a=>this._extensionService.activateByEvent(`onLanguageModelChat:${a}`));await Promise.all(t)}const n=[];for(const[t,a]of this._providers)(e.vendor===void 0||a.metadata.vendor===e.vendor)&&(e.family===void 0||a.metadata.family===e.family)&&(e.version===void 0||a.metadata.version===e.version)&&(e.identifier===void 0||a.metadata.id===e.identifier)&&(!a.metadata.targetExtensions||a.metadata.targetExtensions.some(o=>M.equals(o,e.extension)))&&n.push(t);return this._logService.trace("[LM] selected language models",e,n),n}registerLanguageModelChat(e,n){if(this._logService.trace("[LM] registering language model chat",e,n.metadata),!this._vendors.has(n.metadata.vendor))throw new Error(`Chat response provider uses UNKNOWN vendor ${n.metadata.vendor}.`);if(this._providers.has(e))throw new Error(`Chat response provider with identifier ${e} is already registered.`);return this._providers.set(e,n),this._onDidChangeProviders.fire({added:[{identifier:e,metadata:n.metadata}]}),this.updateUserSelectableModelsContext(),y(()=>{this.updateUserSelectableModelsContext(),this._providers.delete(e)&&(this._onDidChangeProviders.fire({removed:[e]}),this._logService.trace("[LM] UNregistered language model chat",e,n.metadata))})}updateUserSelectableModelsContext(){const e=Array.from(this._providers.values()).some(t=>t.metadata.isUserSelectable&&!t.metadata.isDefault),n=Array.from(this._providers.values()).some(t=>t.metadata.isDefault);this._hasUserSelectableModels.set(e&&n)}async sendChatRequest(e,n,t,a,o){const r=this._providers.get(e);if(!r)throw new Error(`Chat response provider with identifier ${e} is not registered.`);return r.sendChatRequest(t,n,a,o)}computeTokenLength(e,n,t){const a=this._providers.get(e);if(!a)throw new Error(`Chat response provider with identifier ${e} is not registered.`);return a.provideTokenCount(n,t)}};g=h([l(0,_),l(1,L),l(2,I)],g);export{P as ChatMessageRole,X as ILanguageModelsService,g as LanguageModelsService,T as languageModelExtensionPoint};
