{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/languageModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { isFalsyOrWhitespace } from '../../../../base/common/strings.js';\nimport { localize } from '../../../../nls.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IExtensionService, isProposedApiEnabled } from '../../../services/extensions/common/extensions.js';\nimport { ExtensionsRegistry } from '../../../services/extensions/common/extensionsRegistry.js';\n\nexport const enum ChatMessageRole {\n\tSystem,\n\tUser,\n\tAssistant,\n}\n\nexport interface IChatMessageTextPart {\n\ttype: 'text';\n\tvalue: string;\n}\n\nexport interface IChatMessageToolResultPart {\n\ttype: 'tool_result';\n\ttoolCallId: string;\n\tvalue: any;\n\tisError?: boolean;\n}\n\nexport type IChatMessagePart = IChatMessageTextPart | IChatMessageToolResultPart | IChatResponseToolUsePart;\n\nexport interface IChatMessage {\n\treadonly name?: string | undefined;\n\treadonly role: ChatMessageRole;\n\treadonly content: IChatMessagePart[];\n}\n\nexport interface IChatResponseTextPart {\n\ttype: 'text';\n\tvalue: string;\n}\n\nexport interface IChatResponseToolUsePart {\n\ttype: 'tool_use';\n\tname: string;\n\ttoolCallId: string;\n\tparameters: any;\n}\n\nexport type IChatResponsePart = IChatResponseTextPart | IChatResponseToolUsePart;\n\nexport interface IChatResponseFragment {\n\tindex: number;\n\tpart: IChatResponsePart;\n}\n\nexport interface ILanguageModelChatMetadata {\n\treadonly extension: ExtensionIdentifier;\n\n\treadonly name: string;\n\treadonly id: string;\n\treadonly vendor: string;\n\treadonly version: string;\n\treadonly family: string;\n\treadonly maxInputTokens: number;\n\treadonly maxOutputTokens: number;\n\treadonly targetExtensions?: string[];\n\n\treadonly auth?: {\n\t\treadonly providerLabel: string;\n\t\treadonly accountLabel?: string;\n\t};\n}\n\nexport interface ILanguageModelChatResponse {\n\tstream: AsyncIterable<IChatResponseFragment>;\n\tresult: Promise<any>;\n}\n\nexport interface ILanguageModelChat {\n\tmetadata: ILanguageModelChatMetadata;\n\tsendChatRequest(messages: IChatMessage[], from: ExtensionIdentifier, options: { [name: string]: any }, token: CancellationToken): Promise<ILanguageModelChatResponse>;\n\tprovideTokenCount(message: string | IChatMessage, token: CancellationToken): Promise<number>;\n}\n\nexport interface ILanguageModelChatSelector {\n\treadonly name?: string;\n\treadonly identifier?: string;\n\treadonly vendor?: string;\n\treadonly version?: string;\n\treadonly family?: string;\n\treadonly tokens?: number;\n\treadonly extension?: ExtensionIdentifier;\n}\n\nexport const ILanguageModelsService = createDecorator<ILanguageModelsService>('ILanguageModelsService');\n\nexport interface ILanguageModelsChangeEvent {\n\tadded?: {\n\t\tidentifier: string;\n\t\tmetadata: ILanguageModelChatMetadata;\n\t}[];\n\tremoved?: string[];\n}\n\nexport interface ILanguageModelsService {\n\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeLanguageModels: Event<ILanguageModelsChangeEvent>;\n\n\tgetLanguageModelIds(): string[];\n\n\tlookupLanguageModel(identifier: string): ILanguageModelChatMetadata | undefined;\n\n\tselectLanguageModels(selector: ILanguageModelChatSelector): Promise<string[]>;\n\n\tregisterLanguageModelChat(identifier: string, provider: ILanguageModelChat): IDisposable;\n\n\tsendChatRequest(identifier: string, from: ExtensionIdentifier, messages: IChatMessage[], options: { [name: string]: any }, token: CancellationToken): Promise<ILanguageModelChatResponse>;\n\n\tcomputeTokenLength(identifier: string, message: string | IChatMessage, token: CancellationToken): Promise<number>;\n}\n\nconst languageModelType: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tvendor: {\n\t\t\ttype: 'string',\n\t\t\tdescription: localize('vscode.extension.contributes.languageModels.vendor', \"A globally unique vendor of language models.\")\n\t\t}\n\t}\n};\n\ninterface IUserFriendlyLanguageModel {\n\tvendor: string;\n}\n\nexport const languageModelExtensionPoint = ExtensionsRegistry.registerExtensionPoint<IUserFriendlyLanguageModel | IUserFriendlyLanguageModel[]>({\n\textensionPoint: 'languageModels',\n\tjsonSchema: {\n\t\tdescription: localize('vscode.extension.contributes.languageModels', \"Contribute language models of a specific vendor.\"),\n\t\toneOf: [\n\t\t\tlanguageModelType,\n\t\t\t{\n\t\t\t\ttype: 'array',\n\t\t\t\titems: languageModelType\n\t\t\t}\n\t\t]\n\t},\n\tactivationEventsGenerator: (contribs: IUserFriendlyLanguageModel[], result: { push(item: string): void }) => {\n\t\tfor (const contrib of contribs) {\n\t\t\tresult.push(`onLanguageModelChat:${contrib.vendor}`);\n\t\t}\n\t}\n});\n\nexport class LanguageModelsService implements ILanguageModelsService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _store = new DisposableStore();\n\n\tprivate readonly _providers = new Map<string, ILanguageModelChat>();\n\tprivate readonly _vendors = new Set<string>();\n\n\tprivate readonly _onDidChangeProviders = this._store.add(new Emitter<ILanguageModelsChangeEvent>());\n\treadonly onDidChangeLanguageModels: Event<ILanguageModelsChangeEvent> = this._onDidChangeProviders.event;\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\n\t\tthis._store.add(languageModelExtensionPoint.setHandler((extensions) => {\n\n\t\t\tthis._vendors.clear();\n\n\t\t\tfor (const extension of extensions) {\n\n\t\t\t\tif (!isProposedApiEnabled(extension.description, 'chatProvider')) {\n\t\t\t\t\textension.collector.error(localize('vscode.extension.contributes.languageModels.chatProviderRequired', \"This contribution point requires the 'chatProvider' proposal.\"));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (const item of Iterable.wrap(extension.value)) {\n\t\t\t\t\tif (this._vendors.has(item.vendor)) {\n\t\t\t\t\t\textension.collector.error(localize('vscode.extension.contributes.languageModels.vendorAlreadyRegistered', \"The vendor '{0}' is already registered and cannot be registered twice\", item.vendor));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (isFalsyOrWhitespace(item.vendor)) {\n\t\t\t\t\t\textension.collector.error(localize('vscode.extension.contributes.languageModels.emptyVendor', \"The vendor field cannot be empty.\"));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (item.vendor.trim() !== item.vendor) {\n\t\t\t\t\t\textension.collector.error(localize('vscode.extension.contributes.languageModels.whitespaceVendor', \"The vendor field cannot start or end with whitespace.\"));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._vendors.add(item.vendor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst removed: string[] = [];\n\t\t\tfor (const [identifier, value] of this._providers) {\n\t\t\t\tif (!this._vendors.has(value.metadata.vendor)) {\n\t\t\t\t\tthis._providers.delete(identifier);\n\t\t\t\t\tremoved.push(identifier);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (removed.length > 0) {\n\t\t\t\tthis._onDidChangeProviders.fire({ removed });\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose() {\n\t\tthis._store.dispose();\n\t\tthis._providers.clear();\n\t}\n\n\tgetLanguageModelIds(): string[] {\n\t\treturn Array.from(this._providers.keys());\n\t}\n\n\tlookupLanguageModel(identifier: string): ILanguageModelChatMetadata | undefined {\n\t\treturn this._providers.get(identifier)?.metadata;\n\t}\n\n\tasync selectLanguageModels(selector: ILanguageModelChatSelector): Promise<string[]> {\n\n\t\tif (selector.vendor) {\n\t\t\t// selective activation\n\t\t\tawait this._extensionService.activateByEvent(`onLanguageModelChat:${selector.vendor}}`);\n\t\t} else {\n\t\t\t// activate all extensions that do language models\n\t\t\tconst all = Array.from(this._vendors).map(vendor => this._extensionService.activateByEvent(`onLanguageModelChat:${vendor}`));\n\t\t\tawait Promise.all(all);\n\t\t}\n\n\t\tconst result: string[] = [];\n\n\t\tfor (const [identifier, model] of this._providers) {\n\n\t\t\tif ((selector.vendor === undefined || model.metadata.vendor === selector.vendor)\n\t\t\t\t&& (selector.family === undefined || model.metadata.family === selector.family)\n\t\t\t\t&& (selector.version === undefined || model.metadata.version === selector.version)\n\t\t\t\t&& (selector.identifier === undefined || model.metadata.id === selector.identifier)\n\t\t\t\t&& (!model.metadata.targetExtensions || model.metadata.targetExtensions.some(candidate => ExtensionIdentifier.equals(candidate, selector.extension)))\n\t\t\t) {\n\t\t\t\tresult.push(identifier);\n\t\t\t}\n\t\t}\n\n\t\tthis._logService.trace('[LM] selected language models', selector, result);\n\n\t\treturn result;\n\t}\n\n\tregisterLanguageModelChat(identifier: string, provider: ILanguageModelChat): IDisposable {\n\n\t\tthis._logService.trace('[LM] registering language model chat', identifier, provider.metadata);\n\n\t\tif (!this._vendors.has(provider.metadata.vendor)) {\n\t\t\tthrow new Error(`Chat response provider uses UNKNOWN vendor ${provider.metadata.vendor}.`);\n\t\t}\n\t\tif (this._providers.has(identifier)) {\n\t\t\tthrow new Error(`Chat response provider with identifier ${identifier} is already registered.`);\n\t\t}\n\t\tthis._providers.set(identifier, provider);\n\t\tthis._onDidChangeProviders.fire({ added: [{ identifier, metadata: provider.metadata }] });\n\t\treturn toDisposable(() => {\n\t\t\tif (this._providers.delete(identifier)) {\n\t\t\t\tthis._onDidChangeProviders.fire({ removed: [identifier] });\n\t\t\t\tthis._logService.trace('[LM] UNregistered language model chat', identifier, provider.metadata);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync sendChatRequest(identifier: string, from: ExtensionIdentifier, messages: IChatMessage[], options: { [name: string]: any }, token: CancellationToken): Promise<ILanguageModelChatResponse> {\n\t\tconst provider = this._providers.get(identifier);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Chat response provider with identifier ${identifier} is not registered.`);\n\t\t}\n\t\treturn provider.sendChatRequest(messages, from, options, token);\n\t}\n\n\tcomputeTokenLength(identifier: string, message: string | IChatMessage, token: CancellationToken): Promise<number> {\n\t\tconst provider = this._providers.get(identifier);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Chat response provider with identifier ${identifier} is not registered.`);\n\t\t}\n\t\treturn provider.provideTokenCount(message, token);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ChatMessageRole"]
}
