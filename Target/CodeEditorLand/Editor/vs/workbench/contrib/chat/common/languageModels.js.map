{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/languageModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport type { IJSONSchema } from \"../../../../base/common/jsonSchema.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isFalsyOrWhitespace } from \"../../../../base/common/strings.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIExtensionService,\n\tisProposedApiEnabled,\n} from \"../../../services/extensions/common/extensions.js\";\nimport { ExtensionsRegistry } from \"../../../services/extensions/common/extensionsRegistry.js\";\n\nexport enum ChatMessageRole {\n\tSystem = 0,\n\tUser = 1,\n\tAssistant = 2,\n}\n\nexport interface IChatMessageTextPart {\n\ttype: \"text\";\n\tvalue: string;\n}\n\nexport interface IChatMessageToolResultPart {\n\ttype: \"tool_result\";\n\ttoolCallId: string;\n\tvalue: any;\n\tisError?: boolean;\n}\n\nexport type IChatMessagePart =\n\t| IChatMessageTextPart\n\t| IChatMessageToolResultPart\n\t| IChatResponseToolUsePart;\n\nexport interface IChatMessage {\n\treadonly name?: string | undefined;\n\treadonly role: ChatMessageRole;\n\treadonly content: IChatMessagePart[];\n}\n\nexport interface IChatResponseTextPart {\n\ttype: \"text\";\n\tvalue: string;\n}\n\nexport interface IChatResponseToolUsePart {\n\ttype: \"tool_use\";\n\tname: string;\n\ttoolCallId: string;\n\tparameters: any;\n}\n\nexport type IChatResponsePart =\n\t| IChatResponseTextPart\n\t| IChatResponseToolUsePart;\n\nexport interface IChatResponseFragment {\n\tindex: number;\n\tpart: IChatResponsePart;\n}\n\nexport interface ILanguageModelChatMetadata {\n\treadonly extension: ExtensionIdentifier;\n\n\treadonly name: string;\n\treadonly id: string;\n\treadonly vendor: string;\n\treadonly version: string;\n\treadonly family: string;\n\treadonly maxInputTokens: number;\n\treadonly maxOutputTokens: number;\n\treadonly targetExtensions?: string[];\n\n\treadonly auth?: {\n\t\treadonly providerLabel: string;\n\t\treadonly accountLabel?: string;\n\t};\n}\n\nexport interface ILanguageModelChatResponse {\n\tstream: AsyncIterable<IChatResponseFragment>;\n\tresult: Promise<any>;\n}\n\nexport interface ILanguageModelChat {\n\tmetadata: ILanguageModelChatMetadata;\n\tsendChatRequest(\n\t\tmessages: IChatMessage[],\n\t\tfrom: ExtensionIdentifier,\n\t\toptions: { [name: string]: any },\n\t\ttoken: CancellationToken,\n\t): Promise<ILanguageModelChatResponse>;\n\tprovideTokenCount(\n\t\tmessage: string | IChatMessage,\n\t\ttoken: CancellationToken,\n\t): Promise<number>;\n}\n\nexport interface ILanguageModelChatSelector {\n\treadonly name?: string;\n\treadonly identifier?: string;\n\treadonly vendor?: string;\n\treadonly version?: string;\n\treadonly family?: string;\n\treadonly tokens?: number;\n\treadonly extension?: ExtensionIdentifier;\n}\n\nexport const ILanguageModelsService = createDecorator<ILanguageModelsService>(\n\t\"ILanguageModelsService\",\n);\n\nexport interface ILanguageModelsChangeEvent {\n\tadded?: {\n\t\tidentifier: string;\n\t\tmetadata: ILanguageModelChatMetadata;\n\t}[];\n\tremoved?: string[];\n}\n\nexport interface ILanguageModelsService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeLanguageModels: Event<ILanguageModelsChangeEvent>;\n\n\tgetLanguageModelIds(): string[];\n\n\tlookupLanguageModel(\n\t\tidentifier: string,\n\t): ILanguageModelChatMetadata | undefined;\n\n\tselectLanguageModels(\n\t\tselector: ILanguageModelChatSelector,\n\t): Promise<string[]>;\n\n\tregisterLanguageModelChat(\n\t\tidentifier: string,\n\t\tprovider: ILanguageModelChat,\n\t): IDisposable;\n\n\tsendChatRequest(\n\t\tidentifier: string,\n\t\tfrom: ExtensionIdentifier,\n\t\tmessages: IChatMessage[],\n\t\toptions: { [name: string]: any },\n\t\ttoken: CancellationToken,\n\t): Promise<ILanguageModelChatResponse>;\n\n\tcomputeTokenLength(\n\t\tidentifier: string,\n\t\tmessage: string | IChatMessage,\n\t\ttoken: CancellationToken,\n\t): Promise<number>;\n}\n\nconst languageModelType: IJSONSchema = {\n\ttype: \"object\",\n\tproperties: {\n\t\tvendor: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"vscode.extension.contributes.languageModels.vendor\",\n\t\t\t\t\"A globally unique vendor of language models.\",\n\t\t\t),\n\t\t},\n\t},\n};\n\ninterface IUserFriendlyLanguageModel {\n\tvendor: string;\n}\n\nexport const languageModelExtensionPoint =\n\tExtensionsRegistry.registerExtensionPoint<\n\t\tIUserFriendlyLanguageModel | IUserFriendlyLanguageModel[]\n\t>({\n\t\textensionPoint: \"languageModels\",\n\t\tjsonSchema: {\n\t\t\tdescription: localize(\n\t\t\t\t\"vscode.extension.contributes.languageModels\",\n\t\t\t\t\"Contribute language models of a specific vendor.\",\n\t\t\t),\n\t\t\toneOf: [\n\t\t\t\tlanguageModelType,\n\t\t\t\t{\n\t\t\t\t\ttype: \"array\",\n\t\t\t\t\titems: languageModelType,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\tactivationEventsGenerator: (\n\t\t\tcontribs: IUserFriendlyLanguageModel[],\n\t\t\tresult: { push(item: string): void },\n\t\t) => {\n\t\t\tfor (const contrib of contribs) {\n\t\t\t\tresult.push(`onLanguageModelChat:${contrib.vendor}`);\n\t\t\t}\n\t\t},\n\t});\n\nexport class LanguageModelsService implements ILanguageModelsService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _store = new DisposableStore();\n\n\tprivate readonly _providers = new Map<string, ILanguageModelChat>();\n\tprivate readonly _vendors = new Set<string>();\n\n\tprivate readonly _onDidChangeProviders = this._store.add(\n\t\tnew Emitter<ILanguageModelsChangeEvent>(),\n\t);\n\treadonly onDidChangeLanguageModels: Event<ILanguageModelsChangeEvent> =\n\t\tthis._onDidChangeProviders.event;\n\n\tconstructor(\n\t\t@IExtensionService\n\t\tprivate readonly _extensionService: IExtensionService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._store.add(\n\t\t\tlanguageModelExtensionPoint.setHandler((extensions) => {\n\t\t\t\tthis._vendors.clear();\n\n\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isProposedApiEnabled(\n\t\t\t\t\t\t\textension.description,\n\t\t\t\t\t\t\t\"chatProvider\",\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\textension.collector.error(\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"vscode.extension.contributes.languageModels.chatProviderRequired\",\n\t\t\t\t\t\t\t\t\"This contribution point requires the 'chatProvider' proposal.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const item of Iterable.wrap(extension.value)) {\n\t\t\t\t\t\tif (this._vendors.has(item.vendor)) {\n\t\t\t\t\t\t\textension.collector.error(\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"vscode.extension.contributes.languageModels.vendorAlreadyRegistered\",\n\t\t\t\t\t\t\t\t\t\"The vendor '{0}' is already registered and cannot be registered twice\",\n\t\t\t\t\t\t\t\t\titem.vendor,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isFalsyOrWhitespace(item.vendor)) {\n\t\t\t\t\t\t\textension.collector.error(\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"vscode.extension.contributes.languageModels.emptyVendor\",\n\t\t\t\t\t\t\t\t\t\"The vendor field cannot be empty.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (item.vendor.trim() !== item.vendor) {\n\t\t\t\t\t\t\textension.collector.error(\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"vscode.extension.contributes.languageModels.whitespaceVendor\",\n\t\t\t\t\t\t\t\t\t\"The vendor field cannot start or end with whitespace.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._vendors.add(item.vendor);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst removed: string[] = [];\n\t\t\t\tfor (const [identifier, value] of this._providers) {\n\t\t\t\t\tif (!this._vendors.has(value.metadata.vendor)) {\n\t\t\t\t\t\tthis._providers.delete(identifier);\n\t\t\t\t\t\tremoved.push(identifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (removed.length > 0) {\n\t\t\t\t\tthis._onDidChangeProviders.fire({ removed });\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose() {\n\t\tthis._store.dispose();\n\t\tthis._providers.clear();\n\t}\n\n\tgetLanguageModelIds(): string[] {\n\t\treturn Array.from(this._providers.keys());\n\t}\n\n\tlookupLanguageModel(\n\t\tidentifier: string,\n\t): ILanguageModelChatMetadata | undefined {\n\t\treturn this._providers.get(identifier)?.metadata;\n\t}\n\n\tasync selectLanguageModels(\n\t\tselector: ILanguageModelChatSelector,\n\t): Promise<string[]> {\n\t\tif (selector.vendor) {\n\t\t\t// selective activation\n\t\t\tawait this._extensionService.activateByEvent(\n\t\t\t\t`onLanguageModelChat:${selector.vendor}}`,\n\t\t\t);\n\t\t} else {\n\t\t\t// activate all extensions that do language models\n\t\t\tconst all = Array.from(this._vendors).map((vendor) =>\n\t\t\t\tthis._extensionService.activateByEvent(\n\t\t\t\t\t`onLanguageModelChat:${vendor}`,\n\t\t\t\t),\n\t\t\t);\n\t\t\tawait Promise.all(all);\n\t\t}\n\n\t\tconst result: string[] = [];\n\n\t\tfor (const [identifier, model] of this._providers) {\n\t\t\tif (\n\t\t\t\t(selector.vendor === undefined ||\n\t\t\t\t\tmodel.metadata.vendor === selector.vendor) &&\n\t\t\t\t(selector.family === undefined ||\n\t\t\t\t\tmodel.metadata.family === selector.family) &&\n\t\t\t\t(selector.version === undefined ||\n\t\t\t\t\tmodel.metadata.version === selector.version) &&\n\t\t\t\t(selector.identifier === undefined ||\n\t\t\t\t\tmodel.metadata.id === selector.identifier) &&\n\t\t\t\t(!model.metadata.targetExtensions ||\n\t\t\t\t\tmodel.metadata.targetExtensions.some((candidate) =>\n\t\t\t\t\t\tExtensionIdentifier.equals(\n\t\t\t\t\t\t\tcandidate,\n\t\t\t\t\t\t\tselector.extension,\n\t\t\t\t\t\t),\n\t\t\t\t\t))\n\t\t\t) {\n\t\t\t\tresult.push(identifier);\n\t\t\t}\n\t\t}\n\n\t\tthis._logService.trace(\n\t\t\t\"[LM] selected language models\",\n\t\t\tselector,\n\t\t\tresult,\n\t\t);\n\n\t\treturn result;\n\t}\n\n\tregisterLanguageModelChat(\n\t\tidentifier: string,\n\t\tprovider: ILanguageModelChat,\n\t): IDisposable {\n\t\tthis._logService.trace(\n\t\t\t\"[LM] registering language model chat\",\n\t\t\tidentifier,\n\t\t\tprovider.metadata,\n\t\t);\n\n\t\tif (!this._vendors.has(provider.metadata.vendor)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Chat response provider uses UNKNOWN vendor ${provider.metadata.vendor}.`,\n\t\t\t);\n\t\t}\n\t\tif (this._providers.has(identifier)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Chat response provider with identifier ${identifier} is already registered.`,\n\t\t\t);\n\t\t}\n\t\tthis._providers.set(identifier, provider);\n\t\tthis._onDidChangeProviders.fire({\n\t\t\tadded: [{ identifier, metadata: provider.metadata }],\n\t\t});\n\t\treturn toDisposable(() => {\n\t\t\tif (this._providers.delete(identifier)) {\n\t\t\t\tthis._onDidChangeProviders.fire({ removed: [identifier] });\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"[LM] UNregistered language model chat\",\n\t\t\t\t\tidentifier,\n\t\t\t\t\tprovider.metadata,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync sendChatRequest(\n\t\tidentifier: string,\n\t\tfrom: ExtensionIdentifier,\n\t\tmessages: IChatMessage[],\n\t\toptions: { [name: string]: any },\n\t\ttoken: CancellationToken,\n\t): Promise<ILanguageModelChatResponse> {\n\t\tconst provider = this._providers.get(identifier);\n\t\tif (!provider) {\n\t\t\tthrow new Error(\n\t\t\t\t`Chat response provider with identifier ${identifier} is not registered.`,\n\t\t\t);\n\t\t}\n\t\treturn provider.sendChatRequest(messages, from, options, token);\n\t}\n\n\tcomputeTokenLength(\n\t\tidentifier: string,\n\t\tmessage: string | IChatMessage,\n\t\ttoken: CancellationToken,\n\t): Promise<number> {\n\t\tconst provider = this._providers.get(identifier);\n\t\tif (!provider) {\n\t\t\tthrow new Error(\n\t\t\t\t`Chat response provider with identifier ${identifier} is not registered.`,\n\t\t\t);\n\t\t}\n\t\treturn provider.provideTokenCount(message, token);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ChatMessageRole"]
}
