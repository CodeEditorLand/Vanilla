{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatWordCounter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IWordCountResult {\n\tvalue: string;\n\treturnedWordCount: number;\n\ttotalWordCount: number;\n\tisFullString: boolean;\n}\n\nconst r = String.raw;\n\n/**\n * Matches `[text](link title?)` or `[text](<link> title?)`\n *\n * Taken from vscode-markdown-languageservice\n */\nconst linkPattern =\n\tr`(?<!\\\\)` + // Must not start with escape\n\n\t// text\n\tr`(!?\\[` + // open prefix match -->\n\t/**/r`(?:` +\n\t/*****/r`[^\\[\\]\\\\]|` + // Non-bracket chars, or...\n\t/*****/r`\\\\.|` + // Escaped char, or...\n\t/*****/r`\\[[^\\[\\]]*\\]` + // Matched bracket pair\n\t/**/r`)*` +\n\tr`\\])` + // <-- close prefix match\n\n\t// Destination\n\tr`(\\(\\s*)` + // Pre href\n\t/**/r`(` +\n\t/*****/r`[^\\s\\(\\)<](?:[^\\s\\(\\)]|\\([^\\s\\(\\)]*?\\))*|` + // Link without whitespace, or...\n\t/*****/r`<(?:\\\\[<>]|[^<>])+>` + // In angle brackets\n\t/**/r`)` +\n\n\t// Title\n\t/**/r`\\s*(?:\"[^\"]*\"|'[^']*'|\\([^\\(\\)]*\\))?\\s*` +\n\tr`\\)`;\n\nexport function getNWords(str: string, numWordsToCount: number): IWordCountResult {\n\t// This regex matches each word and skips over whitespace and separators. A word is:\n\t// A markdown link\n\t// One chinese character\n\t// One or more + - =, handled so that code like \"a=1+2-3\" is broken up better\n\t// One or more characters that aren't whitepace or any of the above\n\tconst allWordMatches = Array.from(str.matchAll(new RegExp(linkPattern + r`|\\p{sc=Han}|=+|\\++|-+|[^\\s\\|\\p{sc=Han}|=|\\+|\\-]+`, 'gu')));\n\n\tconst targetWords = allWordMatches.slice(0, numWordsToCount);\n\n\tconst endIndex = numWordsToCount > allWordMatches.length\n\t\t? str.length // Reached end of string\n\t\t: targetWords.length ? targetWords.at(-1)!.index + targetWords.at(-1)![0].length : 0;\n\n\tconst value = str.substring(0, endIndex);\n\treturn {\n\t\tvalue,\n\t\treturnedWordCount: targetWords.length === 0 ? (value.length ? 1 : 0) : targetWords.length,\n\t\tisFullString: endIndex >= str.length,\n\t\ttotalWordCount: allWordMatches.length\n\t};\n}\n\nexport function countWords(str: string): number {\n\tconst result = getNWords(str, Number.MAX_SAFE_INTEGER);\n\treturn result.returnedWordCount;\n}\n"],
  "mappings": ";;AAYA,MAAM,IAAI,OAAO;AAOjB,MAAM,cACL;AAAA;AAGA;AAAA;AACI;AACG;AAAA;AACA;AAAA;AACA;AAAA;AACH,QACJ;AAAA;AAGA;AAAA;AACI;AACG;AAAA;AACA;AAAA;AACH;AAAA;AAGA,6CACJ;AAEM,SAAS,UAAU,KAAa,iBAA2C;AAMjF,QAAM,iBAAiB,MAAM,KAAK,IAAI,SAAS,IAAI,OAAO,cAAc,qDAAqD,IAAI,CAAC,CAAC;AAEnI,QAAM,cAAc,eAAe,MAAM,GAAG,eAAe;AAE3D,QAAM,WAAW,kBAAkB,eAAe,SAC/C,IAAI,SACJ,YAAY,SAAS,YAAY,GAAG,EAAE,EAAG,QAAQ,YAAY,GAAG,EAAE,EAAG,CAAC,EAAE,SAAS;AAEpF,QAAM,QAAQ,IAAI,UAAU,GAAG,QAAQ;AACvC,SAAO;AAAA,IACN;AAAA,IACA,mBAAmB,YAAY,WAAW,IAAK,MAAM,SAAS,IAAI,IAAK,YAAY;AAAA,IACnF,cAAc,YAAY,IAAI;AAAA,IAC9B,gBAAgB,eAAe;AAAA,EAChC;AACD;AArBgB;AAuBT,SAAS,WAAW,KAAqB;AAC/C,QAAM,SAAS,UAAU,KAAK,OAAO,gBAAgB;AACrD,SAAO,OAAO;AACf;AAHgB;",
  "names": []
}
