import{localize as t}from"../../../../nls.js";import{RawContextKey as e}from"../../../../platform/contextkey/common/contextkey.js";const s=new e("chatSessionResponseVote","",{type:"string",description:t("interactiveSessionResponseVote","When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string.")}),a=new e("chatVoteUpEnabled",!1,{type:"boolean",description:t("chatVoteUpEnabled","True when the chat vote up action is enabled.")}),i=new e("chatSessionResponseDetectedAgentOrCommand",!1,{type:"boolean",description:t("chatSessionResponseDetectedAgentOrCommand","When the agent or command was automatically detected")}),r=new e("chatResponseSupportsIssueReporting",!1,{type:"boolean",description:t("chatResponseSupportsIssueReporting","True when the current chat response supports issue reporting.")}),p=new e("chatSessionResponseFiltered",!1,{type:"boolean",description:t("chatResponseFiltered","True when the chat response was filtered out by the server.")}),c=new e("chatSessionResponseError",!1,{type:"boolean",description:t("chatResponseErrored","True when the chat response resulted in an error.")}),T=new e("chatSessionRequestInProgress",!1,{type:"boolean",description:t("interactiveSessionRequestInProgress","True when the current request is still in progress.")}),h=new e("chatResponse",!1,{type:"boolean",description:t("chatResponse","The chat item is a response.")}),l=new e("chatRequest",!1,{type:"boolean",description:t("chatRequest","The chat item is a request")}),E=new e("chatEditApplied",!1,{type:"boolean",description:t("chatEditApplied","True when the chat text edits have been applied.")}),_=new e("chatInputHasText",!1,{type:"boolean",description:t("interactiveInputHasText","True when the chat input has text.")}),d=new e("chatInputHasFocus",!1,{type:"boolean",description:t("interactiveInputHasFocus","True when the chat input has focus.")}),u=new e("inChatInput",!1,{type:"boolean",description:t("inInteractiveInput","True when focus is in the chat input, false otherwise.")}),C=new e("inChat",!1,{type:"boolean",description:t("inChat","True when focus is in the chat widget, false otherwise.")}),N=new e("chatIsEnabled",!1,{type:"boolean",description:t("chatIsEnabled","True when chat is enabled because a default chat participant is activated with an implementation.")}),b=new e("chatPanelParticipantRegistered",!1,{type:"boolean",description:t("chatParticipantRegistered","True when a default chat participant is registered for the panel.")}),w=new e("chatExtensionInvalid",!1,{type:"boolean",description:t("chatExtensionInvalid","True when the installed chat extension is invalid and needs to be updated.")}),O=new e("chatCursorAtTop",!1),R=new e("chatInputHasAgent",!1),I=new e("chatLocation",void 0),S=new e("quickChatHasFocus",!1,{type:"boolean",description:t("inQuickChat","True when the quick chat UI has focus, false otherwise.")});export{E as CONTEXT_CHAT_EDIT_APPLIED,N as CONTEXT_CHAT_ENABLED,w as CONTEXT_CHAT_EXTENSION_INVALID,O as CONTEXT_CHAT_INPUT_CURSOR_AT_TOP,R as CONTEXT_CHAT_INPUT_HAS_AGENT,d as CONTEXT_CHAT_INPUT_HAS_FOCUS,_ as CONTEXT_CHAT_INPUT_HAS_TEXT,I as CONTEXT_CHAT_LOCATION,b as CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED,T as CONTEXT_CHAT_REQUEST_IN_PROGRESS,r as CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING,u as CONTEXT_IN_CHAT_INPUT,C as CONTEXT_IN_CHAT_SESSION,S as CONTEXT_IN_QUICK_CHAT,l as CONTEXT_REQUEST,h as CONTEXT_RESPONSE,i as CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND,c as CONTEXT_RESPONSE_ERROR,p as CONTEXT_RESPONSE_FILTERED,s as CONTEXT_RESPONSE_VOTE,a as CONTEXT_VOTE_UP_ENABLED};
