{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/languageModelStats.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { Extensions, IExtensionFeaturesManagementService, IExtensionFeaturesRegistry } from '../../../services/extensionManagement/common/extensionFeatures.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { localize } from '../../../../nls.js';\n\nexport const ILanguageModelStatsService = createDecorator<ILanguageModelStatsService>('ILanguageModelStatsService');\n\nexport interface ILanguageModelStatsService {\n\treadonly _serviceBrand: undefined;\n\n\tupdate(model: string, extensionId: ExtensionIdentifier, agent: string | undefined, tokenCount: number | undefined): Promise<void>;\n}\n\ninterface LanguageModelStats {\n\textensions: {\n\t\textensionId: string;\n\t\trequestCount: number;\n\t\ttokenCount: number;\n\t\tparticipants: {\n\t\t\tid: string;\n\t\t\trequestCount: number;\n\t\t\ttokenCount: number;\n\t\t}[];\n\t}[];\n}\n\nexport class LanguageModelStatsService extends Disposable implements ILanguageModelStatsService {\n\n\tprivate static readonly MODEL_STATS_STORAGE_KEY_PREFIX = 'languageModelStats.';\n\tprivate static readonly MODEL_ACCESS_STORAGE_KEY_PREFIX = 'languageModelAccess.';\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeStats = this._register(new Emitter<string>());\n\treadonly onDidChangeLanguageMoelStats = this._onDidChangeStats.event;\n\n\tprivate readonly sessionStats = new Map<string, LanguageModelStats>();\n\n\tconstructor(\n\t\t@IExtensionFeaturesManagementService private readonly extensionFeaturesManagementService: IExtensionFeaturesManagementService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis._register(_storageService.onDidChangeValue(StorageScope.APPLICATION, undefined, this._store)(e => {\n\t\t\tconst model = this.getModel(e.key);\n\t\t\tif (model) {\n\t\t\t\tthis._onDidChangeStats.fire(model);\n\t\t\t}\n\t\t}));\n\t}\n\n\thasAccessedModel(extensionId: string, model: string): boolean {\n\t\treturn this.getAccessExtensions(model).includes(extensionId.toLowerCase());\n\t}\n\n\tasync update(model: string, extensionId: ExtensionIdentifier, agent: string | undefined, tokenCount: number | undefined): Promise<void> {\n\t\tawait this.extensionFeaturesManagementService.getAccess(extensionId, 'languageModels');\n\n\t\t// update model access\n\t\tthis.addAccess(model, extensionId.value);\n\n\t\t// update session stats\n\t\tlet sessionStats = this.sessionStats.get(model);\n\t\tif (!sessionStats) {\n\t\t\tsessionStats = { extensions: [] };\n\t\t\tthis.sessionStats.set(model, sessionStats);\n\t\t}\n\t\tthis.add(sessionStats, extensionId.value, agent, tokenCount);\n\n\t\tthis.write(model, extensionId.value, agent, tokenCount);\n\t\tthis._onDidChangeStats.fire(model);\n\t}\n\n\tprivate addAccess(model: string, extensionId: string): void {\n\t\textensionId = extensionId.toLowerCase();\n\t\tconst extensions = this.getAccessExtensions(model);\n\t\tif (!extensions.includes(extensionId)) {\n\t\t\textensions.push(extensionId);\n\t\t\tthis._storageService.store(this.getAccessKey(model), JSON.stringify(extensions), StorageScope.APPLICATION, StorageTarget.USER);\n\t\t}\n\t}\n\n\tprivate getAccessExtensions(model: string): string[] {\n\t\tconst key = this.getAccessKey(model);\n\t\tconst data = this._storageService.get(key, StorageScope.APPLICATION);\n\t\ttry {\n\t\t\tif (data) {\n\t\t\t\tconst parsed = JSON.parse(data);\n\t\t\t\tif (Array.isArray(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t\treturn [];\n\n\t}\n\n\tprivate async write(model: string, extensionId: string, participant: string | undefined, tokenCount: number | undefined): Promise<void> {\n\t\tconst modelStats = await this.read(model);\n\t\tthis.add(modelStats, extensionId, participant, tokenCount);\n\t\tthis._storageService.store(this.getKey(model), JSON.stringify(modelStats), StorageScope.APPLICATION, StorageTarget.USER);\n\t}\n\n\tprivate add(modelStats: LanguageModelStats, extensionId: string, participant: string | undefined, tokenCount: number | undefined): void {\n\t\tlet extensionStats = modelStats.extensions.find(e => ExtensionIdentifier.equals(e.extensionId, extensionId));\n\t\tif (!extensionStats) {\n\t\t\textensionStats = { extensionId, requestCount: 0, tokenCount: 0, participants: [] };\n\t\t\tmodelStats.extensions.push(extensionStats);\n\t\t}\n\t\tif (participant) {\n\t\t\tlet participantStats = extensionStats.participants.find(p => p.id === participant);\n\t\t\tif (!participantStats) {\n\t\t\t\tparticipantStats = { id: participant, requestCount: 0, tokenCount: 0 };\n\t\t\t\textensionStats.participants.push(participantStats);\n\t\t\t}\n\t\t\tparticipantStats.requestCount++;\n\t\t\tparticipantStats.tokenCount += tokenCount ?? 0;\n\t\t} else {\n\t\t\textensionStats.requestCount++;\n\t\t\textensionStats.tokenCount += tokenCount ?? 0;\n\t\t}\n\t}\n\n\tprivate async read(model: string): Promise<LanguageModelStats> {\n\t\ttry {\n\t\t\tconst value = this._storageService.get(this.getKey(model), StorageScope.APPLICATION);\n\t\t\tif (value) {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t}\n\t\treturn { extensions: [] };\n\t}\n\n\tprivate getModel(key: string): string | undefined {\n\t\tif (key.startsWith(LanguageModelStatsService.MODEL_STATS_STORAGE_KEY_PREFIX)) {\n\t\t\treturn key.substring(LanguageModelStatsService.MODEL_STATS_STORAGE_KEY_PREFIX.length);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getKey(model: string): string {\n\t\treturn `${LanguageModelStatsService.MODEL_STATS_STORAGE_KEY_PREFIX}${model}`;\n\t}\n\n\tprivate getAccessKey(model: string): string {\n\t\treturn `${LanguageModelStatsService.MODEL_ACCESS_STORAGE_KEY_PREFIX}${model}`;\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(Extensions.ExtensionFeaturesRegistry).registerExtensionFeature({\n\tid: 'languageModels',\n\tlabel: localize('Language Models', \"Language Models\"),\n\tdescription: localize('languageModels', \"Language models usage statistics of this extension.\"),\n\taccess: {\n\t\tcanToggle: false\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
