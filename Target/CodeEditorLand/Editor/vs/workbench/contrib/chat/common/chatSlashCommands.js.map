{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/chat/common/chatSlashCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IProgress } from \"../../../../platform/progress/common/progress.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport type { ChatAgentLocation } from \"./chatAgents.js\";\nimport type {\n\tIChatFollowup,\n\tIChatProgress,\n\tIChatResponseProgressFileTreeData,\n} from \"./chatService.js\";\nimport type { IChatMessage } from \"./languageModels.js\";\n\n//#region slash service, commands etc\n\nexport interface IChatSlashData {\n\tcommand: string;\n\tdetail: string;\n\tsortText?: string;\n\t/**\n\t * Whether the command should execute as soon\n\t * as it is entered. Defaults to `false`.\n\t */\n\texecuteImmediately?: boolean;\n\tlocations: ChatAgentLocation[];\n}\n\nexport interface IChatSlashFragment {\n\tcontent: string | { treeData: IChatResponseProgressFileTreeData };\n}\nexport type IChatSlashCallback = {\n\t(\n\t\tprompt: string,\n\t\tprogress: IProgress<IChatProgress>,\n\t\thistory: IChatMessage[],\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): Promise<{ followUp: IChatFollowup[] } | void>;\n};\n\nexport const IChatSlashCommandService =\n\tcreateDecorator<IChatSlashCommandService>(\"chatSlashCommandService\");\n\n/**\n * This currently only exists to drive /clear and /help\n */\nexport interface IChatSlashCommandService {\n\t_serviceBrand: undefined;\n\treadonly onDidChangeCommands: Event<void>;\n\tregisterSlashCommand(\n\t\tdata: IChatSlashData,\n\t\tcommand: IChatSlashCallback,\n\t): IDisposable;\n\texecuteCommand(\n\t\tid: string,\n\t\tprompt: string,\n\t\tprogress: IProgress<IChatProgress>,\n\t\thistory: IChatMessage[],\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): Promise<{ followUp: IChatFollowup[] } | void>;\n\tgetCommands(location: ChatAgentLocation): Array<IChatSlashData>;\n\thasCommand(id: string): boolean;\n}\n\ntype Tuple = { data: IChatSlashData; command?: IChatSlashCallback };\n\nexport class ChatSlashCommandService\n\textends Disposable\n\timplements IChatSlashCommandService\n{\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _commands = new Map<string, Tuple>();\n\n\tprivate readonly _onDidChangeCommands = this._register(new Emitter<void>());\n\treadonly onDidChangeCommands: Event<void> = this._onDidChangeCommands.event;\n\n\tconstructor(@IExtensionService private readonly _extensionService: IExtensionService) {\n\t\tsuper();\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._commands.clear();\n\t}\n\n\tregisterSlashCommand(\n\t\tdata: IChatSlashData,\n\t\tcommand: IChatSlashCallback,\n\t): IDisposable {\n\t\tif (this._commands.has(data.command)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Already registered a command with id ${data.command}}`,\n\t\t\t);\n\t\t}\n\n\t\tthis._commands.set(data.command, { data, command });\n\t\tthis._onDidChangeCommands.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\tif (this._commands.delete(data.command)) {\n\t\t\t\tthis._onDidChangeCommands.fire();\n\t\t\t}\n\t\t});\n\t}\n\n\tgetCommands(location: ChatAgentLocation): Array<IChatSlashData> {\n\t\treturn Array.from(this._commands.values(), (v) => v.data).filter((c) =>\n\t\t\tc.locations.includes(location),\n\t\t);\n\t}\n\n\thasCommand(id: string): boolean {\n\t\treturn this._commands.has(id);\n\t}\n\n\tasync executeCommand(\n\t\tid: string,\n\t\tprompt: string,\n\t\tprogress: IProgress<IChatProgress>,\n\t\thistory: IChatMessage[],\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): Promise<{ followUp: IChatFollowup[] } | void> {\n\t\tconst data = this._commands.get(id);\n\t\tif (!data) {\n\t\t\tthrow new Error(\"No command with id ${id} NOT registered\");\n\t\t}\n\t\tif (!data.command) {\n\t\t\tawait this._extensionService.activateByEvent(`onSlash:${id}`);\n\t\t}\n\t\tif (!data.command) {\n\t\t\tthrow new Error(`No command with id ${id} NOT resolved`);\n\t\t}\n\n\t\treturn await data.command(prompt, progress, history, location, token);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAA2B;AACpC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,uBAAuB;AAEhC,SAAS,yBAAyB;AAoC3B,MAAM,2BACZ,gBAA0C,yBAAyB;AA0B7D,IAAM,0BAAN,cACE,WAET;AAAA,EAQC,YAAgD,mBAAsC;AACrF,UAAM;AADyC;AAAA,EAEhD;AAAA,EA1FD,OAgFA;AAAA;AAAA;AAAA,EAGkB,YAAY,oBAAI,IAAmB;AAAA,EAEnC,uBAAuB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACjE,sBAAmC,KAAK,qBAAqB;AAAA,EAM7D,UAAgB;AACxB,UAAM,QAAQ;AACd,SAAK,UAAU,MAAM;AAAA,EACtB;AAAA,EAEA,qBACC,MACA,SACc;AACd,QAAI,KAAK,UAAU,IAAI,KAAK,OAAO,GAAG;AACrC,YAAM,IAAI;AAAA,QACT,wCAAwC,KAAK,OAAO;AAAA,MACrD;AAAA,IACD;AAEA,SAAK,UAAU,IAAI,KAAK,SAAS,EAAE,MAAM,QAAQ,CAAC;AAClD,SAAK,qBAAqB,KAAK;AAE/B,WAAO,aAAa,MAAM;AACzB,UAAI,KAAK,UAAU,OAAO,KAAK,OAAO,GAAG;AACxC,aAAK,qBAAqB,KAAK;AAAA,MAChC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,YAAY,UAAoD;AAC/D,WAAO,MAAM,KAAK,KAAK,UAAU,OAAO,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE;AAAA,MAAO,CAAC,MACjE,EAAE,UAAU,SAAS,QAAQ;AAAA,IAC9B;AAAA,EACD;AAAA,EAEA,WAAW,IAAqB;AAC/B,WAAO,KAAK,UAAU,IAAI,EAAE;AAAA,EAC7B;AAAA,EAEA,MAAM,eACL,IACA,QACA,UACA,SACA,UACA,OACgD;AAChD,UAAM,OAAO,KAAK,UAAU,IAAI,EAAE;AAClC,QAAI,CAAC,MAAM;AACV,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC1D;AACA,QAAI,CAAC,KAAK,SAAS;AAClB,YAAM,KAAK,kBAAkB,gBAAgB,WAAW,EAAE,EAAE;AAAA,IAC7D;AACA,QAAI,CAAC,KAAK,SAAS;AAClB,YAAM,IAAI,MAAM,sBAAsB,EAAE,eAAe;AAAA,IACxD;AAEA,WAAO,MAAM,KAAK,QAAQ,QAAQ,UAAU,SAAS,UAAU,KAAK;AAAA,EACrE;AACD;AAvEa,0BAAN;AAAA,EAWO;AAAA,GAXD;",
  "names": []
}
