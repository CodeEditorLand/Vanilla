{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/url/browser/trustedDomains.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport type {\n\tIQuickInputService,\n\tIQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../../services/environment/browser/environmentService.js\";\n\nconst TRUSTED_DOMAINS_URI = URI.parse(\"trustedDomains:/Trusted Domains\");\n\nexport const TRUSTED_DOMAINS_STORAGE_KEY = \"http.linkProtectionTrustedDomains\";\nexport const TRUSTED_DOMAINS_CONTENT_STORAGE_KEY =\n\t\"http.linkProtectionTrustedDomainsContent\";\n\nexport const manageTrustedDomainSettingsCommand = {\n\tid: \"workbench.action.manageTrustedDomain\",\n\tdescription: {\n\t\tdescription: localize2(\n\t\t\t\"trustedDomain.manageTrustedDomain\",\n\t\t\t\"Manage Trusted Domains\",\n\t\t),\n\t\targs: [],\n\t},\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\teditorService.openEditor({\n\t\t\tresource: TRUSTED_DOMAINS_URI,\n\t\t\tlanguageId: \"jsonc\",\n\t\t\toptions: { pinned: true },\n\t\t});\n\t\treturn;\n\t},\n};\n\ntype ConfigureTrustedDomainsQuickPickItem = IQuickPickItem &\n\t({ id: \"manage\" } | { id: \"trust\"; toTrust: string });\n\nexport async function configureOpenerTrustedDomainsHandler(\n\ttrustedDomains: string[],\n\tdomainToConfigure: string,\n\tresource: URI,\n\tquickInputService: IQuickInputService,\n\tstorageService: IStorageService,\n\teditorService: IEditorService,\n\ttelemetryService: ITelemetryService,\n) {\n\tconst parsedDomainToConfigure = URI.parse(domainToConfigure);\n\tconst toplevelDomainSegements =\n\t\tparsedDomainToConfigure.authority.split(\".\");\n\tconst domainEnd = toplevelDomainSegements\n\t\t.slice(toplevelDomainSegements.length - 2)\n\t\t.join(\".\");\n\tconst topLevelDomain = \"*.\" + domainEnd;\n\tconst options: ConfigureTrustedDomainsQuickPickItem[] = [];\n\n\toptions.push({\n\t\ttype: \"item\",\n\t\tlabel: localize(\n\t\t\t\"trustedDomain.trustDomain\",\n\t\t\t\"Trust {0}\",\n\t\t\tdomainToConfigure,\n\t\t),\n\t\tid: \"trust\",\n\t\ttoTrust: domainToConfigure,\n\t\tpicked: true,\n\t});\n\n\tconst isIP =\n\t\ttoplevelDomainSegements.length === 4 &&\n\t\ttoplevelDomainSegements.every(\n\t\t\t(segment) =>\n\t\t\t\tNumber.isInteger(+segment) ||\n\t\t\t\tNumber.isInteger(+segment.split(\":\")[0]),\n\t\t);\n\n\tif (isIP) {\n\t\tif (parsedDomainToConfigure.authority.includes(\":\")) {\n\t\t\tconst base = parsedDomainToConfigure.authority.split(\":\")[0];\n\t\t\toptions.push({\n\t\t\t\ttype: \"item\",\n\t\t\t\tlabel: localize(\n\t\t\t\t\t\"trustedDomain.trustAllPorts\",\n\t\t\t\t\t\"Trust {0} on all ports\",\n\t\t\t\t\tbase,\n\t\t\t\t),\n\t\t\t\ttoTrust: base + \":*\",\n\t\t\t\tid: \"trust\",\n\t\t\t});\n\t\t}\n\t} else {\n\t\toptions.push({\n\t\t\ttype: \"item\",\n\t\t\tlabel: localize(\n\t\t\t\t\"trustedDomain.trustSubDomain\",\n\t\t\t\t\"Trust {0} and all its subdomains\",\n\t\t\t\tdomainEnd,\n\t\t\t),\n\t\t\ttoTrust: topLevelDomain,\n\t\t\tid: \"trust\",\n\t\t});\n\t}\n\n\toptions.push({\n\t\ttype: \"item\",\n\t\tlabel: localize(\n\t\t\t\"trustedDomain.trustAllDomains\",\n\t\t\t\"Trust all domains (disables link protection)\",\n\t\t),\n\t\ttoTrust: \"*\",\n\t\tid: \"trust\",\n\t});\n\toptions.push({\n\t\ttype: \"item\",\n\t\tlabel: localize(\n\t\t\t\"trustedDomain.manageTrustedDomains\",\n\t\t\t\"Manage Trusted Domains\",\n\t\t),\n\t\tid: \"manage\",\n\t});\n\n\tconst pickedResult =\n\t\tawait quickInputService.pick<ConfigureTrustedDomainsQuickPickItem>(\n\t\t\toptions,\n\t\t\t{ activeItem: options[0] },\n\t\t);\n\n\tif (pickedResult && pickedResult.id) {\n\t\tswitch (pickedResult.id) {\n\t\t\tcase \"manage\":\n\t\t\t\tawait editorService.openEditor({\n\t\t\t\t\tresource: TRUSTED_DOMAINS_URI.with({\n\t\t\t\t\t\tfragment: resource.toString(),\n\t\t\t\t\t}),\n\t\t\t\t\tlanguageId: \"jsonc\",\n\t\t\t\t\toptions: { pinned: true },\n\t\t\t\t});\n\t\t\t\treturn trustedDomains;\n\t\t\tcase \"trust\": {\n\t\t\t\tconst itemToTrust = pickedResult.toTrust;\n\t\t\t\tif (trustedDomains.indexOf(itemToTrust) === -1) {\n\t\t\t\t\tstorageService.remove(\n\t\t\t\t\t\tTRUSTED_DOMAINS_CONTENT_STORAGE_KEY,\n\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t);\n\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\tTRUSTED_DOMAINS_STORAGE_KEY,\n\t\t\t\t\t\tJSON.stringify([...trustedDomains, itemToTrust]),\n\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn [...trustedDomains, itemToTrust];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [];\n}\n\nexport interface IStaticTrustedDomains {\n\treadonly defaultTrustedDomains: string[];\n\treadonly trustedDomains: string[];\n}\n\nexport async function readTrustedDomains(\n\taccessor: ServicesAccessor,\n): Promise<IStaticTrustedDomains> {\n\tconst { defaultTrustedDomains, trustedDomains } =\n\t\treadStaticTrustedDomains(accessor);\n\treturn {\n\t\tdefaultTrustedDomains,\n\t\ttrustedDomains,\n\t};\n}\n\nexport function readStaticTrustedDomains(\n\taccessor: ServicesAccessor,\n): IStaticTrustedDomains {\n\tconst storageService = accessor.get(IStorageService);\n\tconst productService = accessor.get(IProductService);\n\tconst environmentService = accessor.get(\n\t\tIBrowserWorkbenchEnvironmentService,\n\t);\n\n\tconst defaultTrustedDomains = [\n\t\t...(productService.linkProtectionTrustedDomains ?? []),\n\t\t...(environmentService.options?.additionalTrustedDomains ?? []),\n\t];\n\n\tlet trustedDomains: string[] = [];\n\ttry {\n\t\tconst trustedDomainsSrc = storageService.get(\n\t\t\tTRUSTED_DOMAINS_STORAGE_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (trustedDomainsSrc) {\n\t\t\ttrustedDomains = JSON.parse(trustedDomainsSrc);\n\t\t}\n\t} catch (err) {}\n\n\treturn {\n\t\tdefaultTrustedDomains,\n\t\ttrustedDomains,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
