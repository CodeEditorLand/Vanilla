{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/url/browser/trustedDomainsFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { parse } from \"../../../../base/common/json.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\tFileType,\n\ttype IFileDeleteOptions,\n\ttype IFileOverwriteOptions,\n\tIFileService,\n\ttype IFileSystemProviderWithFileReadWriteCapability,\n\ttype IFileWriteOptions,\n\ttype IStat,\n\ttype IWatchOptions,\n} from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tTRUSTED_DOMAINS_CONTENT_STORAGE_KEY,\n\tTRUSTED_DOMAINS_STORAGE_KEY,\n\treadTrustedDomains,\n} from \"./trustedDomains.js\";\n\nconst TRUSTED_DOMAINS_SCHEMA = \"trustedDomains\";\n\nconst TRUSTED_DOMAINS_STAT: IStat = {\n\ttype: FileType.File,\n\tctime: Date.now(),\n\tmtime: Date.now(),\n\tsize: 0,\n};\n\nconst CONFIG_HELP_TEXT_PRE = `// Links matching one or more entries in the list below can be opened without link protection.\n// The following examples show what entries can look like:\n// - \"https://microsoft.com\": Matches this specific domain using https\n// - \"https://microsoft.com:8080\": Matches this specific domain on this port using https\n// - \"https://microsoft.com:*\": Matches this specific domain on any port using https\n// - \"https://microsoft.com/foo\": Matches https://microsoft.com/foo and https://microsoft.com/foo/bar,\n//   but not https://microsoft.com/foobar or https://microsoft.com/bar\n// - \"https://*.microsoft.com\": Match all domains ending in \"microsoft.com\" using https\n// - \"microsoft.com\": Match this specific domain using either http or https\n// - \"*.microsoft.com\": Match all domains ending in \"microsoft.com\" using either http or https\n// - \"http://192.168.0.1: Matches this specific IP using http\n// - \"http://192.168.0.*: Matches all IP's with this prefix using http\n// - \"*\": Match all domains using either http or https\n//\n`;\n\nconst CONFIG_HELP_TEXT_AFTER = `//\n// You can use the \"Manage Trusted Domains\" command to open this file.\n// Save this file to apply the trusted domains rules.\n`;\n\nconst CONFIG_PLACEHOLDER_TEXT = `[\n\t// \"https://microsoft.com\"\n]`;\n\nfunction computeTrustedDomainContent(\n\tdefaultTrustedDomains: string[],\n\ttrustedDomains: string[],\n\tconfiguring?: string,\n) {\n\tlet content = CONFIG_HELP_TEXT_PRE;\n\n\tif (defaultTrustedDomains.length > 0) {\n\t\tcontent += `// By default, VS Code trusts \"localhost\" as well as the following domains:\\n`;\n\t\tdefaultTrustedDomains.forEach((d) => {\n\t\t\tcontent += `// - \"${d}\"\\n`;\n\t\t});\n\t} else {\n\t\tcontent += `// By default, VS Code trusts \"localhost\".\\n`;\n\t}\n\n\tcontent += CONFIG_HELP_TEXT_AFTER;\n\n\tcontent += configuring\n\t\t? `\\n// Currently configuring trust for ${configuring}\\n`\n\t\t: \"\";\n\n\tif (trustedDomains.length === 0) {\n\t\tcontent += CONFIG_PLACEHOLDER_TEXT;\n\t} else {\n\t\tcontent += JSON.stringify(trustedDomains, null, 2);\n\t}\n\n\treturn content;\n}\n\nexport class TrustedDomainsFileSystemProvider\n\timplements\n\t\tIFileSystemProviderWithFileReadWriteCapability,\n\t\tIWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.trustedDomainsFileSystemProvider\";\n\n\treadonly capabilities = FileSystemProviderCapabilities.FileReadWrite;\n\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tthis.fileService.registerProvider(TRUSTED_DOMAINS_SCHEMA, this);\n\t}\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn Promise.resolve(TRUSTED_DOMAINS_STAT);\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\tlet trustedDomainsContent = this.storageService.get(\n\t\t\tTRUSTED_DOMAINS_CONTENT_STORAGE_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\n\t\tconst configuring: string | undefined = resource.fragment;\n\n\t\tconst { defaultTrustedDomains, trustedDomains } =\n\t\t\tawait this.instantiationService.invokeFunction(readTrustedDomains);\n\t\tif (\n\t\t\t!trustedDomainsContent ||\n\t\t\ttrustedDomainsContent.indexOf(CONFIG_HELP_TEXT_PRE) === -1 ||\n\t\t\ttrustedDomainsContent.indexOf(CONFIG_HELP_TEXT_AFTER) === -1 ||\n\t\t\ttrustedDomainsContent.indexOf(configuring ?? \"\") === -1 ||\n\t\t\t[...defaultTrustedDomains, ...trustedDomains].some(\n\t\t\t\t(d) => !assertIsDefined(trustedDomainsContent).includes(d),\n\t\t\t)\n\t\t) {\n\t\t\ttrustedDomainsContent = computeTrustedDomainContent(\n\t\t\t\tdefaultTrustedDomains,\n\t\t\t\ttrustedDomains,\n\t\t\t\tconfiguring,\n\t\t\t);\n\t\t}\n\n\t\tconst buffer = VSBuffer.fromString(trustedDomainsContent).buffer;\n\t\treturn buffer;\n\t}\n\n\twriteFile(\n\t\tresource: URI,\n\t\tcontent: Uint8Array,\n\t\topts: IFileWriteOptions,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconst trustedDomainsContent = VSBuffer.wrap(content).toString();\n\t\t\tconst trustedDomains = parse(trustedDomainsContent);\n\n\t\t\tthis.storageService.store(\n\t\t\t\tTRUSTED_DOMAINS_CONTENT_STORAGE_KEY,\n\t\t\t\ttrustedDomainsContent,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\tthis.storageService.store(\n\t\t\t\tTRUSTED_DOMAINS_STORAGE_KEY,\n\t\t\t\tJSON.stringify(trustedDomains) || \"\",\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t} catch (err) {}\n\n\t\treturn Promise.resolve();\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn {\n\t\t\tdispose() {\n\t\t\t\treturn;\n\t\t\t},\n\t\t};\n\t}\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn Promise.resolve(undefined!);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
