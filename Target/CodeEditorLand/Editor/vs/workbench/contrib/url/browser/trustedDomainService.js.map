{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/url/browser/trustedDomainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WindowIdleValue } from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { testUrlMatchesGlob } from \"../common/urlGlob.js\";\nimport {\n\tTRUSTED_DOMAINS_STORAGE_KEY,\n\treadStaticTrustedDomains,\n} from \"./trustedDomains.js\";\n\nexport const ITrustedDomainService = createDecorator<ITrustedDomainService>(\n\t\"ITrustedDomainService\",\n);\n\nexport interface ITrustedDomainService {\n\t_serviceBrand: undefined;\n\n\tisValid(resource: URI): boolean;\n}\n\nexport class TrustedDomainService\n\textends Disposable\n\timplements ITrustedDomainService\n{\n\t_serviceBrand: undefined;\n\n\tprivate _staticTrustedDomainsResult!: WindowIdleValue<string[]>;\n\n\tconstructor(\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tconst initStaticDomainsResult = () => {\n\t\t\treturn new WindowIdleValue(mainWindow, () => {\n\t\t\t\tconst { defaultTrustedDomains, trustedDomains } =\n\t\t\t\t\tthis._instantiationService.invokeFunction(\n\t\t\t\t\t\treadStaticTrustedDomains,\n\t\t\t\t\t);\n\t\t\t\treturn [...defaultTrustedDomains, ...trustedDomains];\n\t\t\t});\n\t\t};\n\t\tthis._staticTrustedDomainsResult = initStaticDomainsResult();\n\t\tthis._register(\n\t\t\tthis._storageService.onDidChangeValue(\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tTRUSTED_DOMAINS_STORAGE_KEY,\n\t\t\t\tthis._register(new DisposableStore()),\n\t\t\t)(() => {\n\t\t\t\tthis._staticTrustedDomainsResult?.dispose();\n\t\t\t\tthis._staticTrustedDomainsResult = initStaticDomainsResult();\n\t\t\t}),\n\t\t);\n\t}\n\n\tisValid(resource: URI): boolean {\n\t\tconst { defaultTrustedDomains, trustedDomains } =\n\t\t\tthis._instantiationService.invokeFunction(readStaticTrustedDomains);\n\t\tconst allTrustedDomains = [...defaultTrustedDomains, ...trustedDomains];\n\n\t\treturn isURLDomainTrusted(resource, allTrustedDomains);\n\t}\n}\n\nconst rLocalhost = /^localhost(:\\d+)?$/i;\nconst r127 = /^127.0.0.1(:\\d+)?$/;\n\nfunction isLocalhostAuthority(authority: string) {\n\treturn rLocalhost.test(authority) || r127.test(authority);\n}\n\n/**\n * Case-normalize some case-insensitive URLs, such as github.\n */\nfunction normalizeURL(url: string | URI): string {\n\tconst caseInsensitiveAuthorities = [\"github.com\"];\n\ttry {\n\t\tconst parsed = typeof url === \"string\" ? URI.parse(url, true) : url;\n\t\tif (caseInsensitiveAuthorities.includes(parsed.authority)) {\n\t\t\treturn parsed\n\t\t\t\t.with({ path: parsed.path.toLowerCase() })\n\t\t\t\t.toString(true);\n\t\t} else {\n\t\t\treturn parsed.toString(true);\n\t\t}\n\t} catch {\n\t\treturn url.toString();\n\t}\n}\n\n/**\n * Check whether a domain like https://www.microsoft.com matches\n * the list of trusted domains.\n *\n * - Schemes must match\n * - There's no subdomain matching. For example https://microsoft.com doesn't match https://www.microsoft.com\n * - Star matches all subdomains. For example https://*.microsoft.com matches https://www.microsoft.com and https://foo.bar.microsoft.com\n */\nexport function isURLDomainTrusted(\n\turl: URI,\n\ttrustedDomains: string[],\n): boolean {\n\turl = URI.parse(normalizeURL(url));\n\ttrustedDomains = trustedDomains.map(normalizeURL);\n\n\tif (isLocalhostAuthority(url.authority)) {\n\t\treturn true;\n\t}\n\n\tfor (let i = 0; i < trustedDomains.length; i++) {\n\t\tif (trustedDomains[i] === \"*\") {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (testUrlMatchesGlob(url, trustedDomains[i])) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,WAAW;AACpB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEA,MAAM,wBAAwB;AAAA,EACpC;AACD;AAQO,IAAM,uBAAN,cACE,WAET;AAAA,EAKC,YAEkB,uBACiB,iBACjC;AACD,UAAM;AAHW;AACiB;AAIlC,UAAM,0BAA0B,6BAAM;AACrC,aAAO,IAAI,gBAAgB,YAAY,MAAM;AAC5C,cAAM,EAAE,uBAAuB,eAAe,IAC7C,KAAK,sBAAsB;AAAA,UAC1B;AAAA,QACD;AACD,eAAO,CAAC,GAAG,uBAAuB,GAAG,cAAc;AAAA,MACpD,CAAC;AAAA,IACF,GARgC;AAShC,SAAK,8BAA8B,wBAAwB;AAC3D,SAAK;AAAA,MACJ,KAAK,gBAAgB;AAAA,QACpB,aAAa;AAAA,QACb;AAAA,QACA,KAAK,UAAU,IAAI,gBAAgB,CAAC;AAAA,MACrC,EAAE,MAAM;AACP,aAAK,6BAA6B,QAAQ;AAC1C,aAAK,8BAA8B,wBAAwB;AAAA,MAC5D,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAvED,OAuCA;AAAA;AAAA;AAAA,EACC;AAAA,EAEQ;AAAA,EA+BR,QAAQ,UAAwB;AAC/B,UAAM,EAAE,uBAAuB,eAAe,IAC7C,KAAK,sBAAsB,eAAe,wBAAwB;AACnE,UAAM,oBAAoB,CAAC,GAAG,uBAAuB,GAAG,cAAc;AAEtE,WAAO,mBAAmB,UAAU,iBAAiB;AAAA,EACtD;AACD;AA5Ca,uBAAN;AAAA,EASJ;AAAA,EAEA;AAAA,GAXU;AA8Cb,MAAM,aAAa;AACnB,MAAM,OAAO;AAEb,SAAS,qBAAqB,WAAmB;AAChD,SAAO,WAAW,KAAK,SAAS,KAAK,KAAK,KAAK,SAAS;AACzD;AAFS;AAOT,SAAS,aAAa,KAA2B;AAChD,QAAM,6BAA6B,CAAC,YAAY;AAChD,MAAI;AACH,UAAM,SAAS,OAAO,QAAQ,WAAW,IAAI,MAAM,KAAK,IAAI,IAAI;AAChE,QAAI,2BAA2B,SAAS,OAAO,SAAS,GAAG;AAC1D,aAAO,OACL,KAAK,EAAE,MAAM,OAAO,KAAK,YAAY,EAAE,CAAC,EACxC,SAAS,IAAI;AAAA,IAChB,OAAO;AACN,aAAO,OAAO,SAAS,IAAI;AAAA,IAC5B;AAAA,EACD,QAAQ;AACP,WAAO,IAAI,SAAS;AAAA,EACrB;AACD;AAdS;AAwBF,SAAS,mBACf,KACA,gBACU;AACV,QAAM,IAAI,MAAM,aAAa,GAAG,CAAC;AACjC,mBAAiB,eAAe,IAAI,YAAY;AAEhD,MAAI,qBAAqB,IAAI,SAAS,GAAG;AACxC,WAAO;AAAA,EACR;AAEA,WAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC/C,QAAI,eAAe,CAAC,MAAM,KAAK;AAC9B,aAAO;AAAA,IACR;AAEA,QAAI,mBAAmB,KAAK,eAAe,CAAC,CAAC,GAAG;AAC/C,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAtBgB;",
  "names": []
}
