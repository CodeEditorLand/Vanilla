const d=(e,i)=>{let n=e.with({query:null,fragment:null}).toString(!0);const a=t=>t.replace(/\/+$/,"");i=a(i),n=a(n);const h=Array.from({length:n.length+1}).map(()=>Array.from({length:i.length+1}).map(()=>{}));if(/^[^./:]*:\/\//.test(i))return c(h,n,i,0,0);const p=/^(https?):\/\//.exec(n)?.[1];return p?c(h,n,`${p}://${i}`,0,0):!1},c=(e,i,n,a,h)=>{if(e[a]?.[h]!==void 0)return e[a][h];const p=[];if(a===i.length)return h===n.length;if(h===n.length)return i.slice(a)[0]==="/";if(i[a]===n[h]&&p.push(c(e,i,n,a+1,h+1)),n[h]+n[h+1]==="*."&&(["/",":"].includes(i[a])||p.push(c(e,i,n,a+1,h)),p.push(c(e,i,n,a,h+2))),n[h]==="*"&&(a+1===i.length?p.push(c(e,i,n,a+1,h+1)):p.push(c(e,i,n,a+1,h)),p.push(c(e,i,n,a,h+1))),n[h]+n[h+1]===":*")if(i[a]===":"){let t=a+1;do t++;while(/[0-9]/.test(i[t]));p.push(c(e,i,n,t,h+2))}else p.push(c(e,i,n,a,h+2));return e[a][h]=p.some(t=>t===!0)};export{d as testUrlMatchesGlob};
