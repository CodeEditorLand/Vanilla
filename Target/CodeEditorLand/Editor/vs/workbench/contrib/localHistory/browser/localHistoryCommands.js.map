{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { IWorkingCopyHistoryEntry, IWorkingCopyHistoryService } from '../../../services/workingCopy/common/workingCopyHistory.js';\nimport { API_OPEN_DIFF_EDITOR_COMMAND_ID } from '../../../browser/parts/editor/editorCommands.js';\nimport { LocalHistoryFileSystemProvider } from './localHistoryFileSystemProvider.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { registerAction2, Action2, MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { basename, basenameOrAuthority, dirname } from '../../../../base/common/resources.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { EditorResourceAccessor, SaveSourceRegistry, SideBySideEditor } from '../../../common/editor.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IWorkingCopyService } from '../../../services/workingCopy/common/workingCopyService.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ActiveEditorContext, ResourceContextKey } from '../../../common/contextkeys.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { getIconClasses } from '../../../../editor/common/services/getIconClasses.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { getLocalHistoryDateFormatter, LOCAL_HISTORY_ICON_RESTORE, LOCAL_HISTORY_MENU_CONTEXT_KEY } from './localHistory.js';\nimport { IPathService } from '../../../services/path/common/pathService.js';\nimport { ResourceSet } from '../../../../base/common/map.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IEditorOptions } from '../../../../platform/editor/common/editor.js';\n\nconst LOCAL_HISTORY_CATEGORY = localize2('localHistory.category', 'Local History');\nconst CTX_LOCAL_HISTORY_ENABLED = ContextKeyExpr.has('config.workbench.localHistory.enabled');\n\nexport interface ITimelineCommandArgument {\n\turi: URI;\n\thandle: string;\n}\n\n//#region Compare with File\n\nexport const COMPARE_WITH_FILE_LABEL = localize2('localHistory.compareWithFile', 'Compare with File');\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.compareWithFile',\n\t\t\ttitle: COMPARE_WITH_FILE_LABEL,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '1_compare',\n\t\t\t\torder: 1,\n\t\t\t\twhen: LOCAL_HISTORY_MENU_CONTEXT_KEY\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\n\t\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\t\t\treturn commandService.executeCommand(API_OPEN_DIFF_EDITOR_COMMAND_ID, ...toDiffEditorArguments(entry, entry.workingCopy.resource));\n\t\t}\n\t}\n});\n\n//#endregion\n\n//#region Compare with Previous\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.compareWithPrevious',\n\t\t\ttitle: localize2('localHistory.compareWithPrevious', 'Compare with Previous'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '1_compare',\n\t\t\t\torder: 2,\n\t\t\t\twhen: LOCAL_HISTORY_MENU_CONTEXT_KEY\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst { entry, previous } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\n\t\t\t// Without a previous entry, just show the entry directly\n\t\t\tif (!previous) {\n\t\t\t\treturn openEntry(entry, editorService);\n\t\t\t}\n\n\t\t\t// Open real diff editor\n\t\t\treturn commandService.executeCommand(API_OPEN_DIFF_EDITOR_COMMAND_ID, ...toDiffEditorArguments(previous, entry));\n\t\t}\n\t}\n});\n\n//#endregion\n\n//#region Select for Compare / Compare with Selected\n\nlet itemSelectedForCompare: ITimelineCommandArgument | undefined = undefined;\n\nconst LocalHistoryItemSelectedForCompare = new RawContextKey<boolean>('localHistoryItemSelectedForCompare', false, true);\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.selectForCompare',\n\t\t\ttitle: localize2('localHistory.selectForCompare', 'Select for Compare'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '2_compare_with',\n\t\t\t\torder: 2,\n\t\t\t\twhen: LOCAL_HISTORY_MENU_CONTEXT_KEY\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\n\t\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\t\t\titemSelectedForCompare = item;\n\t\t\tLocalHistoryItemSelectedForCompare.bindTo(contextKeyService).set(true);\n\t\t}\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.compareWithSelected',\n\t\t\ttitle: localize2('localHistory.compareWithSelected', 'Compare with Selected'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '2_compare_with',\n\t\t\t\torder: 1,\n\t\t\t\twhen: ContextKeyExpr.and(LOCAL_HISTORY_MENU_CONTEXT_KEY, LocalHistoryItemSelectedForCompare)\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\tif (!itemSelectedForCompare) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectedEntry = (await findLocalHistoryEntry(workingCopyHistoryService, itemSelectedForCompare)).entry;\n\t\tif (!selectedEntry) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\t\t\treturn commandService.executeCommand(API_OPEN_DIFF_EDITOR_COMMAND_ID, ...toDiffEditorArguments(selectedEntry, entry));\n\t\t}\n\t}\n});\n\n//#endregion\n\n//#region Show Contents\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.open',\n\t\t\ttitle: localize2('localHistory.open', 'Show Contents'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '3_contents',\n\t\t\t\torder: 1,\n\t\t\t\twhen: LOCAL_HISTORY_MENU_CONTEXT_KEY\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\t\t\treturn openEntry(entry, editorService);\n\t\t}\n\t}\n});\n\n//#region Restore Contents\n\nconst RESTORE_CONTENTS_LABEL = localize2('localHistory.restore', 'Restore Contents');\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.restoreViaEditor',\n\t\t\ttitle: RESTORE_CONTENTS_LABEL,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.EditorTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: -10,\n\t\t\t\twhen: ResourceContextKey.Scheme.isEqualTo(LocalHistoryFileSystemProvider.SCHEMA)\n\t\t\t},\n\t\t\ticon: LOCAL_HISTORY_ICON_RESTORE\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, uri: URI): Promise<void> {\n\t\tconst { associatedResource, location } = LocalHistoryFileSystemProvider.fromLocalHistoryFileSystem(uri);\n\n\t\treturn restore(accessor, { uri: associatedResource, handle: basenameOrAuthority(location) });\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.restore',\n\t\t\ttitle: RESTORE_CONTENTS_LABEL,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '3_contents',\n\t\t\t\torder: 2,\n\t\t\t\twhen: LOCAL_HISTORY_MENU_CONTEXT_KEY\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\treturn restore(accessor, item);\n\t}\n});\n\nconst restoreSaveSource = SaveSourceRegistry.registerSource('localHistoryRestore.source', localize('localHistoryRestore.source', \"File Restored\"));\n\nasync function restore(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\tconst fileService = accessor.get(IFileService);\n\tconst dialogService = accessor.get(IDialogService);\n\tconst workingCopyService = accessor.get(IWorkingCopyService);\n\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\tconst editorService = accessor.get(IEditorService);\n\n\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\tif (entry) {\n\n\t\t// Ask for confirmation\n\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\ttype: 'warning',\n\t\t\tmessage: localize('confirmRestoreMessage', \"Do you want to restore the contents of '{0}'?\", basename(entry.workingCopy.resource)),\n\t\t\tdetail: localize('confirmRestoreDetail', \"Restoring will discard any unsaved changes.\"),\n\t\t\tprimaryButton: localize({ key: 'restoreButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Restore\")\n\t\t});\n\n\t\tif (!confirmed) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Revert all dirty working copies for target\n\t\tconst workingCopies = workingCopyService.getAll(entry.workingCopy.resource);\n\t\tif (workingCopies) {\n\t\t\tfor (const workingCopy of workingCopies) {\n\t\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\t\tawait workingCopy.revert({ soft: true });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Replace target with contents of history entry\n\t\ttry {\n\t\t\tawait fileService.cloneFile(entry.location, entry.workingCopy.resource);\n\t\t} catch (error) {\n\n\t\t\t// It is possible that we fail to copy the history entry to the\n\t\t\t// destination, for example when the destination is write protected.\n\t\t\t// In that case tell the user and return, it is still possible for\n\t\t\t// the user to manually copy the changes over from the diff editor.\n\n\t\t\tawait dialogService.error(localize('unableToRestore', \"Unable to restore '{0}'.\", basename(entry.workingCopy.resource)), toErrorMessage(error));\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Restore all working copies for target\n\t\tif (workingCopies) {\n\t\t\tfor (const workingCopy of workingCopies) {\n\t\t\t\tawait workingCopy.revert({ force: true });\n\t\t\t}\n\t\t}\n\n\t\t// Open target\n\t\tawait editorService.openEditor({ resource: entry.workingCopy.resource });\n\n\t\t// Add new entry\n\t\tawait workingCopyHistoryService.addEntry({\n\t\t\tresource: entry.workingCopy.resource,\n\t\t\tsource: restoreSaveSource\n\t\t}, CancellationToken.None);\n\n\t\t// Close source\n\t\tawait closeEntry(entry, editorService);\n\t}\n}\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.restoreViaPicker',\n\t\t\ttitle: localize2('localHistory.restoreViaPicker', 'Find Entry to Restore'),\n\t\t\tf1: true,\n\t\t\tcategory: LOCAL_HISTORY_CATEGORY,\n\t\t\tprecondition: CTX_LOCAL_HISTORY_ENABLED\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst labelService = accessor.get(ILabelService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst historyService = accessor.get(IHistoryService);\n\n\t\t// Show all resources with associated history entries in picker\n\t\t// with progress because this operation will take longer the more\n\t\t// files have been saved overall.\n\t\t//\n\t\t// Sort the resources by history to put more relevant entries\n\t\t// to the top.\n\n\t\tconst resourcePickerDisposables = new DisposableStore();\n\t\tconst resourcePicker = resourcePickerDisposables.add(quickInputService.createQuickPick<IQuickPickItem & { resource: URI }>());\n\n\t\tlet cts = new CancellationTokenSource();\n\t\tresourcePickerDisposables.add(resourcePicker.onDidHide(() => cts.dispose(true)));\n\n\t\tresourcePicker.busy = true;\n\t\tresourcePicker.show();\n\n\t\tconst resources = new ResourceSet(await workingCopyHistoryService.getAll(cts.token));\n\t\tconst recentEditorResources = new ResourceSet(coalesce(historyService.getHistory().map(({ resource }) => resource)));\n\n\t\tconst resourcesSortedByRecency: URI[] = [];\n\t\tfor (const resource of recentEditorResources) {\n\t\t\tif (resources.has(resource)) {\n\t\t\t\tresourcesSortedByRecency.push(resource);\n\t\t\t\tresources.delete(resource);\n\t\t\t}\n\t\t}\n\t\tresourcesSortedByRecency.push(...[...resources].sort((r1, r2) => r1.fsPath < r2.fsPath ? -1 : 1));\n\n\t\tresourcePicker.busy = false;\n\t\tresourcePicker.placeholder = localize('restoreViaPicker.filePlaceholder', \"Select the file to show local history for\");\n\t\tresourcePicker.matchOnLabel = true;\n\t\tresourcePicker.matchOnDescription = true;\n\t\tresourcePicker.items = [...resourcesSortedByRecency].map(resource => ({\n\t\t\tresource,\n\t\t\tlabel: basenameOrAuthority(resource),\n\t\t\tdescription: labelService.getUriLabel(dirname(resource), { relative: true }),\n\t\t\ticonClasses: getIconClasses(modelService, languageService, resource)\n\t\t}));\n\n\t\tawait Event.toPromise(resourcePicker.onDidAccept);\n\t\tresourcePickerDisposables.dispose();\n\n\t\tconst resource = resourcePicker.selectedItems.at(0)?.resource;\n\t\tif (!resource) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Show all entries for the picked resource in another picker\n\t\t// and open the entry in the end that was selected by the user\n\n\t\tconst entryPickerDisposables = new DisposableStore();\n\t\tconst entryPicker = entryPickerDisposables.add(quickInputService.createQuickPick<IQuickPickItem & { entry: IWorkingCopyHistoryEntry }>());\n\n\t\tcts = new CancellationTokenSource();\n\t\tentryPickerDisposables.add(entryPicker.onDidHide(() => cts.dispose(true)));\n\n\t\tentryPicker.busy = true;\n\t\tentryPicker.show();\n\n\t\tconst entries = await workingCopyHistoryService.getEntries(resource, cts.token);\n\n\t\tentryPicker.busy = false;\n\t\tentryPicker.canAcceptInBackground = true;\n\t\tentryPicker.placeholder = localize('restoreViaPicker.entryPlaceholder', \"Select the local history entry to open\");\n\t\tentryPicker.matchOnLabel = true;\n\t\tentryPicker.matchOnDescription = true;\n\t\tentryPicker.items = Array.from(entries).reverse().map(entry => ({\n\t\t\tentry,\n\t\t\tlabel: `$(circle-outline) ${SaveSourceRegistry.getSourceLabel(entry.source)}`,\n\t\t\tdescription: toLocalHistoryEntryDateLabel(entry.timestamp)\n\t\t}));\n\n\t\tentryPickerDisposables.add(entryPicker.onDidAccept(async e => {\n\t\t\tif (!e.inBackground) {\n\t\t\t\tentryPickerDisposables.dispose();\n\t\t\t}\n\n\t\t\tconst selectedItem = entryPicker.selectedItems.at(0);\n\t\t\tif (!selectedItem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst resourceExists = await fileService.exists(selectedItem.entry.workingCopy.resource);\n\t\t\tif (resourceExists) {\n\t\t\t\treturn commandService.executeCommand(API_OPEN_DIFF_EDITOR_COMMAND_ID, ...toDiffEditorArguments(selectedItem.entry, selectedItem.entry.workingCopy.resource, { preserveFocus: e.inBackground }));\n\t\t\t}\n\n\t\t\treturn openEntry(selectedItem.entry, editorService, { preserveFocus: e.inBackground });\n\t\t}));\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.TimelineTitle, { command: { id: 'workbench.action.localHistory.restoreViaPicker', title: localize2('localHistory.restoreViaPickerMenu', 'Local History: Find Entry to Restore...') }, group: 'submenu', order: 1, when: CTX_LOCAL_HISTORY_ENABLED });\n\n//#endregion\n\n//#region Rename\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.rename',\n\t\t\ttitle: localize2('localHistory.rename', 'Rename'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '5_edit',\n\t\t\t\torder: 1,\n\t\t\t\twhen: LOCAL_HISTORY_MENU_CONTEXT_KEY\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst inputBox = disposables.add(quickInputService.createInputBox());\n\t\t\tinputBox.title = localize('renameLocalHistoryEntryTitle', \"Rename Local History Entry\");\n\t\t\tinputBox.ignoreFocusOut = true;\n\t\t\tinputBox.placeholder = localize('renameLocalHistoryPlaceholder', \"Enter the new name of the local history entry\");\n\t\t\tinputBox.value = SaveSourceRegistry.getSourceLabel(entry.source);\n\t\t\tinputBox.show();\n\t\t\tdisposables.add(inputBox.onDidAccept(() => {\n\t\t\t\tif (inputBox.value) {\n\t\t\t\t\tworkingCopyHistoryService.updateEntry(entry, { source: inputBox.value }, CancellationToken.None);\n\t\t\t\t}\n\t\t\t\tdisposables.dispose();\n\t\t\t}));\n\t\t}\n\t}\n});\n\n//#endregion\n\n//#region Delete\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.delete',\n\t\t\ttitle: localize2('localHistory.delete', 'Delete'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '5_edit',\n\t\t\t\torder: 2,\n\t\t\t\twhen: LOCAL_HISTORY_MENU_CONTEXT_KEY\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\n\t\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\n\t\t\t// Ask for confirmation\n\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\ttype: 'warning',\n\t\t\t\tmessage: localize('confirmDeleteMessage', \"Do you want to delete the local history entry of '{0}' from {1}?\", entry.workingCopy.name, toLocalHistoryEntryDateLabel(entry.timestamp)),\n\t\t\t\tdetail: localize('confirmDeleteDetail', \"This action is irreversible!\"),\n\t\t\t\tprimaryButton: localize({ key: 'deleteButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Delete\"),\n\t\t\t});\n\n\t\t\tif (!confirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remove via service\n\t\t\tawait workingCopyHistoryService.removeEntry(entry, CancellationToken.None);\n\n\t\t\t// Close any opened editors\n\t\t\tawait closeEntry(entry, editorService);\n\t\t}\n\t}\n});\n\n//#endregion\n\n//#region Delete All\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.deleteAll',\n\t\t\ttitle: localize2('localHistory.deleteAll', 'Delete All'),\n\t\t\tf1: true,\n\t\t\tcategory: LOCAL_HISTORY_CATEGORY,\n\t\t\tprecondition: CTX_LOCAL_HISTORY_ENABLED\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\n\t\t// Ask for confirmation\n\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\ttype: 'warning',\n\t\t\tmessage: localize('confirmDeleteAllMessage', \"Do you want to delete all entries of all files in local history?\"),\n\t\t\tdetail: localize('confirmDeleteAllDetail', \"This action is irreversible!\"),\n\t\t\tprimaryButton: localize({ key: 'deleteAllButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Delete All\"),\n\t\t});\n\n\t\tif (!confirmed) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove via service\n\t\tawait workingCopyHistoryService.removeAll(CancellationToken.None);\n\t}\n});\n\n//#endregion\n\n//#region Create\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.create',\n\t\t\ttitle: localize2('localHistory.create', 'Create Entry'),\n\t\t\tf1: true,\n\t\t\tcategory: LOCAL_HISTORY_CATEGORY,\n\t\t\tprecondition: ContextKeyExpr.and(CTX_LOCAL_HISTORY_ENABLED, ActiveEditorContext)\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst labelService = accessor.get(ILabelService);\n\t\tconst pathService = accessor.get(IPathService);\n\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(editorService.activeEditor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\tif (resource?.scheme !== pathService.defaultUriScheme && resource?.scheme !== Schemas.vscodeUserData) {\n\t\t\treturn; // only enable for selected schemes\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst inputBox = disposables.add(quickInputService.createInputBox());\n\t\tinputBox.title = localize('createLocalHistoryEntryTitle', \"Create Local History Entry\");\n\t\tinputBox.ignoreFocusOut = true;\n\t\tinputBox.placeholder = localize('createLocalHistoryPlaceholder', \"Enter the new name of the local history entry for '{0}'\", labelService.getUriBasenameLabel(resource));\n\t\tinputBox.show();\n\t\tdisposables.add(inputBox.onDidAccept(async () => {\n\t\t\tconst entrySource = inputBox.value;\n\t\t\tdisposables.dispose();\n\n\t\t\tif (entrySource) {\n\t\t\t\tawait workingCopyHistoryService.addEntry({ resource, source: inputBox.value }, CancellationToken.None);\n\t\t\t}\n\t\t}));\n\t}\n});\n\n//#endregion\n\n//#region Helpers\n\nasync function openEntry(entry: IWorkingCopyHistoryEntry, editorService: IEditorService, options?: IEditorOptions): Promise<void> {\n\tconst resource = LocalHistoryFileSystemProvider.toLocalHistoryFileSystem({ location: entry.location, associatedResource: entry.workingCopy.resource });\n\n\tawait editorService.openEditor({\n\t\tresource,\n\t\tlabel: localize('localHistoryEditorLabel', \"{0} ({1} \u2022 {2})\", entry.workingCopy.name, SaveSourceRegistry.getSourceLabel(entry.source), toLocalHistoryEntryDateLabel(entry.timestamp)),\n\t\toptions\n\t});\n}\n\nasync function closeEntry(entry: IWorkingCopyHistoryEntry, editorService: IEditorService): Promise<void> {\n\tconst resource = LocalHistoryFileSystemProvider.toLocalHistoryFileSystem({ location: entry.location, associatedResource: entry.workingCopy.resource });\n\n\tconst editors = editorService.findEditors(resource, { supportSideBySide: SideBySideEditor.ANY });\n\tawait editorService.closeEditors(editors, { preserveFocus: true });\n}\n\nexport function toDiffEditorArguments(entry: IWorkingCopyHistoryEntry, resource: URI, options?: IEditorOptions): unknown[];\nexport function toDiffEditorArguments(previousEntry: IWorkingCopyHistoryEntry, entry: IWorkingCopyHistoryEntry, options?: IEditorOptions): unknown[];\nexport function toDiffEditorArguments(arg1: IWorkingCopyHistoryEntry, arg2: IWorkingCopyHistoryEntry | URI, options?: IEditorOptions): unknown[] {\n\n\t// Left hand side is always a working copy history entry\n\tconst originalResource = LocalHistoryFileSystemProvider.toLocalHistoryFileSystem({ location: arg1.location, associatedResource: arg1.workingCopy.resource });\n\n\tlet label: string;\n\n\t// Right hand side depends on how the method was called\n\t// and is either another working copy history entry\n\t// or the file on disk.\n\n\tlet modifiedResource: URI;\n\n\t// Compare with file on disk\n\tif (URI.isUri(arg2)) {\n\t\tconst resource = arg2;\n\n\t\tmodifiedResource = resource;\n\t\tlabel = localize('localHistoryCompareToFileEditorLabel', \"{0} ({1} \u2022 {2}) \u2194 {3}\", arg1.workingCopy.name, SaveSourceRegistry.getSourceLabel(arg1.source), toLocalHistoryEntryDateLabel(arg1.timestamp), arg1.workingCopy.name);\n\t}\n\n\t// Compare with another entry\n\telse {\n\t\tconst modified = arg2;\n\n\t\tmodifiedResource = LocalHistoryFileSystemProvider.toLocalHistoryFileSystem({ location: modified.location, associatedResource: modified.workingCopy.resource });\n\t\tlabel = localize('localHistoryCompareToPreviousEditorLabel', \"{0} ({1} \u2022 {2}) \u2194 {3} ({4} \u2022 {5})\", arg1.workingCopy.name, SaveSourceRegistry.getSourceLabel(arg1.source), toLocalHistoryEntryDateLabel(arg1.timestamp), modified.workingCopy.name, SaveSourceRegistry.getSourceLabel(modified.source), toLocalHistoryEntryDateLabel(modified.timestamp));\n\t}\n\n\treturn [\n\t\toriginalResource,\n\t\tmodifiedResource,\n\t\tlabel,\n\t\toptions ? [undefined, options] : undefined\n\t];\n}\n\nexport async function findLocalHistoryEntry(workingCopyHistoryService: IWorkingCopyHistoryService, descriptor: ITimelineCommandArgument): Promise<{ entry: IWorkingCopyHistoryEntry | undefined; previous: IWorkingCopyHistoryEntry | undefined }> {\n\tconst entries = await workingCopyHistoryService.getEntries(descriptor.uri, CancellationToken.None);\n\n\tlet currentEntry: IWorkingCopyHistoryEntry | undefined = undefined;\n\tlet previousEntry: IWorkingCopyHistoryEntry | undefined = undefined;\n\tfor (let i = 0; i < entries.length; i++) {\n\t\tconst entry = entries[i];\n\n\t\tif (entry.id === descriptor.handle) {\n\t\t\tcurrentEntry = entry;\n\t\t\tpreviousEntry = entries[i - 1];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn {\n\t\tentry: currentEntry,\n\t\tprevious: previousEntry\n\t};\n}\n\nconst SEP = /\\//g;\nfunction toLocalHistoryEntryDateLabel(timestamp: number): string {\n\treturn `${getLocalHistoryDateFormatter().format(timestamp).replace(SEP, '-')}`; // preserving `/` will break editor labels, so replace it with a non-path symbol\n}\n\n//#endregion\n"],
  "mappings": ";;AAKA,SAAS,UAAU,iBAAiB;AACpC,SAAS,WAAW;AACpB,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB,+BAA+B;AAC3D,SAAS,0BAA0B,kCAAkC;AACrE,SAAS,uCAAuC;AAChD,SAAS,sCAAsC;AAC/C,SAAS,gBAAgB,oBAAoB,qBAAqB;AAClE,SAAS,wBAAwB;AACjC,SAAS,iBAAiB,SAAS,QAAQ,oBAAoB;AAC/D,SAAS,UAAU,qBAAqB,eAAe;AACvD,SAAS,uBAAuB;AAChC,SAAS,wBAAwB,oBAAoB,wBAAwB;AAC7E,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB,0BAA0B;AACxD,SAAS,oBAAoB,sBAAsB;AACnD,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AACzB,SAAS,8BAA8B,4BAA4B,sCAAsC;AACzG,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAE/B,MAAM,yBAAyB,UAAU,yBAAyB,eAAe;AACjF,MAAM,4BAA4B,eAAe,IAAI,uCAAuC;AASrF,MAAM,0BAA0B,UAAU,gCAAgC,mBAAmB;AAEpG,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AAEzE,UAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AAC7E,QAAI,OAAO;AACV,aAAO,eAAe,eAAe,iCAAiC,GAAG,sBAAsB,OAAO,MAAM,YAAY,QAAQ,CAAC;AAAA,IAClI;AAAA,EACD;AACD,CAAC;AAMD,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,oCAAoC,uBAAuB;AAAA,MAC5E,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,gBAAgB,SAAS,IAAI,cAAc;AAEjD,UAAM,EAAE,OAAO,SAAS,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AACvF,QAAI,OAAO;AAGV,UAAI,CAAC,UAAU;AACd,eAAO,UAAU,OAAO,aAAa;AAAA,MACtC;AAGA,aAAO,eAAe,eAAe,iCAAiC,GAAG,sBAAsB,UAAU,KAAK,CAAC;AAAA,IAChH;AAAA,EACD;AACD,CAAC;AAMD,IAAI,yBAA+D;AAEnE,MAAM,qCAAqC,IAAI,cAAuB,sCAAsC,OAAO,IAAI;AAEvH,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,iCAAiC,oBAAoB;AAAA,MACtE,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,UAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AAC7E,QAAI,OAAO;AACV,+BAAyB;AACzB,yCAAmC,OAAO,iBAAiB,EAAE,IAAI,IAAI;AAAA,IACtE;AAAA,EACD;AACD,CAAC;AAED,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,oCAAoC,uBAAuB;AAAA,MAC5E,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM,eAAe,IAAI,gCAAgC,kCAAkC;AAAA,MAC5F;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AAEnD,QAAI,CAAC,wBAAwB;AAC5B;AAAA,IACD;AAEA,UAAM,iBAAiB,MAAM,sBAAsB,2BAA2B,sBAAsB,GAAG;AACvG,QAAI,CAAC,eAAe;AACnB;AAAA,IACD;AAEA,UAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AAC7E,QAAI,OAAO;AACV,aAAO,eAAe,eAAe,iCAAiC,GAAG,sBAAsB,eAAe,KAAK,CAAC;AAAA,IACrH;AAAA,EACD;AACD,CAAC;AAMD,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,qBAAqB,eAAe;AAAA,MACrD,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,gBAAgB,SAAS,IAAI,cAAc;AAEjD,UAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AAC7E,QAAI,OAAO;AACV,aAAO,UAAU,OAAO,aAAa;AAAA,IACtC;AAAA,EACD;AACD,CAAC;AAID,MAAM,yBAAyB,UAAU,wBAAwB,kBAAkB;AAEnF,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM,mBAAmB,OAAO,UAAU,+BAA+B,MAAM;AAAA,MAChF;AAAA,MACA,MAAM;AAAA,IACP,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,KAAyB;AAC9D,UAAM,EAAE,oBAAoB,SAAS,IAAI,+BAA+B,2BAA2B,GAAG;AAEtG,WAAO,QAAQ,UAAU,EAAE,KAAK,oBAAoB,QAAQ,oBAAoB,QAAQ,EAAE,CAAC;AAAA,EAC5F;AACD,CAAC;AAED,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,WAAO,QAAQ,UAAU,IAAI;AAAA,EAC9B;AACD,CAAC;AAED,MAAM,oBAAoB,mBAAmB,eAAe,8BAA8B,SAAS,8BAA8B,eAAe,CAAC;AAEjJ,eAAe,QAAQ,UAA4B,MAA+C;AACjG,QAAM,cAAc,SAAS,IAAI,YAAY;AAC7C,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,qBAAqB,SAAS,IAAI,mBAAmB;AAC3D,QAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,QAAM,gBAAgB,SAAS,IAAI,cAAc;AAEjD,QAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AAC7E,MAAI,OAAO;AAGV,UAAM,EAAE,UAAU,IAAI,MAAM,cAAc,QAAQ;AAAA,MACjD,MAAM;AAAA,MACN,SAAS,SAAS,yBAAyB,iDAAiD,SAAS,MAAM,YAAY,QAAQ,CAAC;AAAA,MAChI,QAAQ,SAAS,wBAAwB,6CAA6C;AAAA,MACtF,eAAe,SAAS,EAAE,KAAK,sBAAsB,SAAS,CAAC,uBAAuB,EAAE,GAAG,WAAW;AAAA,IACvG,CAAC;AAED,QAAI,CAAC,WAAW;AACf;AAAA,IACD;AAGA,UAAM,gBAAgB,mBAAmB,OAAO,MAAM,YAAY,QAAQ;AAC1E,QAAI,eAAe;AAClB,iBAAW,eAAe,eAAe;AACxC,YAAI,YAAY,QAAQ,GAAG;AAC1B,gBAAM,YAAY,OAAO,EAAE,MAAM,KAAK,CAAC;AAAA,QACxC;AAAA,MACD;AAAA,IACD;AAGA,QAAI;AACH,YAAM,YAAY,UAAU,MAAM,UAAU,MAAM,YAAY,QAAQ;AAAA,IACvE,SAAS,OAAO;AAOf,YAAM,cAAc,MAAM,SAAS,mBAAmB,4BAA4B,SAAS,MAAM,YAAY,QAAQ,CAAC,GAAG,eAAe,KAAK,CAAC;AAE9I;AAAA,IACD;AAGA,QAAI,eAAe;AAClB,iBAAW,eAAe,eAAe;AACxC,cAAM,YAAY,OAAO,EAAE,OAAO,KAAK,CAAC;AAAA,MACzC;AAAA,IACD;AAGA,UAAM,cAAc,WAAW,EAAE,UAAU,MAAM,YAAY,SAAS,CAAC;AAGvE,UAAM,0BAA0B,SAAS;AAAA,MACxC,UAAU,MAAM,YAAY;AAAA,MAC5B,QAAQ;AAAA,IACT,GAAG,kBAAkB,IAAI;AAGzB,UAAM,WAAW,OAAO,aAAa;AAAA,EACtC;AACD;AAlEe;AAoEf,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,iCAAiC,uBAAuB;AAAA,MACzE,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA2C;AACpD,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,UAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,cAAc,SAAS,IAAI,YAAY;AAC7C,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,iBAAiB,SAAS,IAAI,eAAe;AASnD,UAAM,4BAA4B,IAAI,gBAAgB;AACtD,UAAM,iBAAiB,0BAA0B,IAAI,kBAAkB,gBAAoD,CAAC;AAE5H,QAAI,MAAM,IAAI,wBAAwB;AACtC,8BAA0B,IAAI,eAAe,UAAU,MAAM,IAAI,QAAQ,IAAI,CAAC,CAAC;AAE/E,mBAAe,OAAO;AACtB,mBAAe,KAAK;AAEpB,UAAM,YAAY,IAAI,YAAY,MAAM,0BAA0B,OAAO,IAAI,KAAK,CAAC;AACnF,UAAM,wBAAwB,IAAI,YAAY,SAAS,eAAe,WAAW,EAAE,IAAI,CAAC,EAAE,UAAAA,UAAS,MAAMA,SAAQ,CAAC,CAAC;AAEnH,UAAM,2BAAkC,CAAC;AACzC,eAAWA,aAAY,uBAAuB;AAC7C,UAAI,UAAU,IAAIA,SAAQ,GAAG;AAC5B,iCAAyB,KAAKA,SAAQ;AACtC,kBAAU,OAAOA,SAAQ;AAAA,MAC1B;AAAA,IACD;AACA,6BAAyB,KAAK,GAAG,CAAC,GAAG,SAAS,EAAE,KAAK,CAAC,IAAI,OAAO,GAAG,SAAS,GAAG,SAAS,KAAK,CAAC,CAAC;AAEhG,mBAAe,OAAO;AACtB,mBAAe,cAAc,SAAS,oCAAoC,2CAA2C;AACrH,mBAAe,eAAe;AAC9B,mBAAe,qBAAqB;AACpC,mBAAe,QAAQ,CAAC,GAAG,wBAAwB,EAAE,IAAI,CAAAA,eAAa;AAAA,MACrE,UAAAA;AAAA,MACA,OAAO,oBAAoBA,SAAQ;AAAA,MACnC,aAAa,aAAa,YAAY,QAAQA,SAAQ,GAAG,EAAE,UAAU,KAAK,CAAC;AAAA,MAC3E,aAAa,eAAe,cAAc,iBAAiBA,SAAQ;AAAA,IACpE,EAAE;AAEF,UAAM,MAAM,UAAU,eAAe,WAAW;AAChD,8BAA0B,QAAQ;AAElC,UAAM,WAAW,eAAe,cAAc,GAAG,CAAC,GAAG;AACrD,QAAI,CAAC,UAAU;AACd;AAAA,IACD;AAKA,UAAM,yBAAyB,IAAI,gBAAgB;AACnD,UAAM,cAAc,uBAAuB,IAAI,kBAAkB,gBAAsE,CAAC;AAExI,UAAM,IAAI,wBAAwB;AAClC,2BAAuB,IAAI,YAAY,UAAU,MAAM,IAAI,QAAQ,IAAI,CAAC,CAAC;AAEzE,gBAAY,OAAO;AACnB,gBAAY,KAAK;AAEjB,UAAM,UAAU,MAAM,0BAA0B,WAAW,UAAU,IAAI,KAAK;AAE9E,gBAAY,OAAO;AACnB,gBAAY,wBAAwB;AACpC,gBAAY,cAAc,SAAS,qCAAqC,wCAAwC;AAChH,gBAAY,eAAe;AAC3B,gBAAY,qBAAqB;AACjC,gBAAY,QAAQ,MAAM,KAAK,OAAO,EAAE,QAAQ,EAAE,IAAI,YAAU;AAAA,MAC/D;AAAA,MACA,OAAO,qBAAqB,mBAAmB,eAAe,MAAM,MAAM,CAAC;AAAA,MAC3E,aAAa,6BAA6B,MAAM,SAAS;AAAA,IAC1D,EAAE;AAEF,2BAAuB,IAAI,YAAY,YAAY,OAAM,MAAK;AAC7D,UAAI,CAAC,EAAE,cAAc;AACpB,+BAAuB,QAAQ;AAAA,MAChC;AAEA,YAAM,eAAe,YAAY,cAAc,GAAG,CAAC;AACnD,UAAI,CAAC,cAAc;AAClB;AAAA,MACD;AAEA,YAAM,iBAAiB,MAAM,YAAY,OAAO,aAAa,MAAM,YAAY,QAAQ;AACvF,UAAI,gBAAgB;AACnB,eAAO,eAAe,eAAe,iCAAiC,GAAG,sBAAsB,aAAa,OAAO,aAAa,MAAM,YAAY,UAAU,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;AAAA,MAC/L;AAEA,aAAO,UAAU,aAAa,OAAO,eAAe,EAAE,eAAe,EAAE,aAAa,CAAC;AAAA,IACtF,CAAC,CAAC;AAAA,EACH;AACD,CAAC;AAED,aAAa,eAAe,OAAO,eAAe,EAAE,SAAS,EAAE,IAAI,kDAAkD,OAAO,UAAU,qCAAqC,yCAAyC,EAAE,GAAG,OAAO,WAAW,OAAO,GAAG,MAAM,0BAA0B,CAAC;AAMtR,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,uBAAuB,QAAQ;AAAA,MAChD,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,UAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AAC7E,QAAI,OAAO;AACV,YAAM,cAAc,IAAI,gBAAgB;AACxC,YAAM,WAAW,YAAY,IAAI,kBAAkB,eAAe,CAAC;AACnE,eAAS,QAAQ,SAAS,gCAAgC,4BAA4B;AACtF,eAAS,iBAAiB;AAC1B,eAAS,cAAc,SAAS,iCAAiC,+CAA+C;AAChH,eAAS,QAAQ,mBAAmB,eAAe,MAAM,MAAM;AAC/D,eAAS,KAAK;AACd,kBAAY,IAAI,SAAS,YAAY,MAAM;AAC1C,YAAI,SAAS,OAAO;AACnB,oCAA0B,YAAY,OAAO,EAAE,QAAQ,SAAS,MAAM,GAAG,kBAAkB,IAAI;AAAA,QAChG;AACA,oBAAY,QAAQ;AAAA,MACrB,CAAC,CAAC;AAAA,IACH;AAAA,EACD;AACD,CAAC;AAMD,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,uBAAuB,QAAQ;AAAA,MAChD,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA4B,MAA+C;AACpF,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,gBAAgB,SAAS,IAAI,cAAc;AAEjD,UAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,2BAA2B,IAAI;AAC7E,QAAI,OAAO;AAGV,YAAM,EAAE,UAAU,IAAI,MAAM,cAAc,QAAQ;AAAA,QACjD,MAAM;AAAA,QACN,SAAS,SAAS,wBAAwB,oEAAoE,MAAM,YAAY,MAAM,6BAA6B,MAAM,SAAS,CAAC;AAAA,QACnL,QAAQ,SAAS,uBAAuB,8BAA8B;AAAA,QACtE,eAAe,SAAS,EAAE,KAAK,qBAAqB,SAAS,CAAC,uBAAuB,EAAE,GAAG,UAAU;AAAA,MACrG,CAAC;AAED,UAAI,CAAC,WAAW;AACf;AAAA,MACD;AAGA,YAAM,0BAA0B,YAAY,OAAO,kBAAkB,IAAI;AAGzE,YAAM,WAAW,OAAO,aAAa;AAAA,IACtC;AAAA,EACD;AACD,CAAC;AAMD,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,0BAA0B,YAAY;AAAA,MACvD,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA2C;AACpD,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AAGzE,UAAM,EAAE,UAAU,IAAI,MAAM,cAAc,QAAQ;AAAA,MACjD,MAAM;AAAA,MACN,SAAS,SAAS,2BAA2B,kEAAkE;AAAA,MAC/G,QAAQ,SAAS,0BAA0B,8BAA8B;AAAA,MACzE,eAAe,SAAS,EAAE,KAAK,wBAAwB,SAAS,CAAC,uBAAuB,EAAE,GAAG,cAAc;AAAA,IAC5G,CAAC;AAED,QAAI,CAAC,WAAW;AACf;AAAA,IACD;AAGA,UAAM,0BAA0B,UAAU,kBAAkB,IAAI;AAAA,EACjE;AACD,CAAC;AAMD,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,uBAAuB,cAAc;AAAA,MACtD,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,cAAc,eAAe,IAAI,2BAA2B,mBAAmB;AAAA,IAChF,CAAC;AAAA,EACF;AAAA,EACA,MAAM,IAAI,UAA2C;AACpD,UAAM,4BAA4B,SAAS,IAAI,0BAA0B;AACzE,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,UAAM,cAAc,SAAS,IAAI,YAAY;AAE7C,UAAM,WAAW,uBAAuB,eAAe,cAAc,cAAc,EAAE,mBAAmB,iBAAiB,QAAQ,CAAC;AAClI,QAAI,UAAU,WAAW,YAAY,oBAAoB,UAAU,WAAW,QAAQ,gBAAgB;AACrG;AAAA,IACD;AAEA,UAAM,cAAc,IAAI,gBAAgB;AACxC,UAAM,WAAW,YAAY,IAAI,kBAAkB,eAAe,CAAC;AACnE,aAAS,QAAQ,SAAS,gCAAgC,4BAA4B;AACtF,aAAS,iBAAiB;AAC1B,aAAS,cAAc,SAAS,iCAAiC,2DAA2D,aAAa,oBAAoB,QAAQ,CAAC;AACtK,aAAS,KAAK;AACd,gBAAY,IAAI,SAAS,YAAY,YAAY;AAChD,YAAM,cAAc,SAAS;AAC7B,kBAAY,QAAQ;AAEpB,UAAI,aAAa;AAChB,cAAM,0BAA0B,SAAS,EAAE,UAAU,QAAQ,SAAS,MAAM,GAAG,kBAAkB,IAAI;AAAA,MACtG;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AACD,CAAC;AAMD,eAAe,UAAU,OAAiC,eAA+B,SAAyC;AACjI,QAAM,WAAW,+BAA+B,yBAAyB,EAAE,UAAU,MAAM,UAAU,oBAAoB,MAAM,YAAY,SAAS,CAAC;AAErJ,QAAM,cAAc,WAAW;AAAA,IAC9B;AAAA,IACA,OAAO,SAAS,2BAA2B,wBAAmB,MAAM,YAAY,MAAM,mBAAmB,eAAe,MAAM,MAAM,GAAG,6BAA6B,MAAM,SAAS,CAAC;AAAA,IACpL;AAAA,EACD,CAAC;AACF;AARe;AAUf,eAAe,WAAW,OAAiC,eAA8C;AACxG,QAAM,WAAW,+BAA+B,yBAAyB,EAAE,UAAU,MAAM,UAAU,oBAAoB,MAAM,YAAY,SAAS,CAAC;AAErJ,QAAM,UAAU,cAAc,YAAY,UAAU,EAAE,mBAAmB,iBAAiB,IAAI,CAAC;AAC/F,QAAM,cAAc,aAAa,SAAS,EAAE,eAAe,KAAK,CAAC;AAClE;AALe;AASR,SAAS,sBAAsB,MAAgC,MAAsC,SAAqC;AAGhJ,QAAM,mBAAmB,+BAA+B,yBAAyB,EAAE,UAAU,KAAK,UAAU,oBAAoB,KAAK,YAAY,SAAS,CAAC;AAE3J,MAAI;AAMJ,MAAI;AAGJ,MAAI,IAAI,MAAM,IAAI,GAAG;AACpB,UAAM,WAAW;AAEjB,uBAAmB;AACnB,YAAQ,SAAS,wCAAwC,mCAAyB,KAAK,YAAY,MAAM,mBAAmB,eAAe,KAAK,MAAM,GAAG,6BAA6B,KAAK,SAAS,GAAG,KAAK,YAAY,IAAI;AAAA,EAC7N,OAGK;AACJ,UAAM,WAAW;AAEjB,uBAAmB,+BAA+B,yBAAyB,EAAE,UAAU,SAAS,UAAU,oBAAoB,SAAS,YAAY,SAAS,CAAC;AAC7J,YAAQ,SAAS,4CAA4C,oDAAqC,KAAK,YAAY,MAAM,mBAAmB,eAAe,KAAK,MAAM,GAAG,6BAA6B,KAAK,SAAS,GAAG,SAAS,YAAY,MAAM,mBAAmB,eAAe,SAAS,MAAM,GAAG,6BAA6B,SAAS,SAAS,CAAC;AAAA,EACvV;AAEA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,CAAC,QAAW,OAAO,IAAI;AAAA,EAClC;AACD;AAnCgB;AAqChB,eAAsB,sBAAsB,2BAAuD,YAAgJ;AAClP,QAAM,UAAU,MAAM,0BAA0B,WAAW,WAAW,KAAK,kBAAkB,IAAI;AAEjG,MAAI,eAAqD;AACzD,MAAI,gBAAsD;AAC1D,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,UAAM,QAAQ,QAAQ,CAAC;AAEvB,QAAI,MAAM,OAAO,WAAW,QAAQ;AACnC,qBAAe;AACf,sBAAgB,QAAQ,IAAI,CAAC;AAC7B;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,EACX;AACD;AAnBsB;AAqBtB,MAAM,MAAM;AACZ,SAAS,6BAA6B,WAA2B;AAChE,SAAO,GAAG,6BAA6B,EAAE,OAAO,SAAS,EAAE,QAAQ,KAAK,GAAG,CAAC;AAC7E;AAFS;",
  "names": ["resource"]
}
