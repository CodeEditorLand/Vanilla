{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/localHistory/browser/localHistoryFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IFileDeleteOptions, IFileOverwriteOptions, FileSystemProviderCapabilities, FileType, IFileWriteOptions, hasReadWriteCapability, IFileService, IFileSystemProvider, IFileSystemProviderWithFileReadWriteCapability, IStat, IWatchOptions } from '../../../../platform/files/common/files.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\n\ninterface ILocalHistoryResource {\n\n\t/**\n\t * The location of the local history entry to read from.\n\t */\n\treadonly location: URI;\n\n\t/**\n\t * The associated resource the local history entry is about.\n\t */\n\treadonly associatedResource: URI;\n}\n\ninterface ISerializedLocalHistoryResource {\n\treadonly location: string;\n\treadonly associatedResource: string;\n}\n\n/**\n * A wrapper around a standard file system provider\n * that is entirely readonly.\n */\nexport class LocalHistoryFileSystemProvider implements IFileSystemProvider, IFileSystemProviderWithFileReadWriteCapability {\n\n\tstatic readonly SCHEMA = 'vscode-local-history';\n\n\tstatic toLocalHistoryFileSystem(resource: ILocalHistoryResource): URI {\n\t\tconst serializedLocalHistoryResource: ISerializedLocalHistoryResource = {\n\t\t\tlocation: resource.location.toString(true),\n\t\t\tassociatedResource: resource.associatedResource.toString(true)\n\t\t};\n\n\t\t// Try to preserve the associated resource as much as possible\n\t\t// and only keep the `query` part dynamic. This enables other\n\t\t// components (e.g. other timeline providers) to continue\n\t\t// providing timeline entries even when our resource is active.\n\t\treturn resource.associatedResource.with({\n\t\t\tscheme: LocalHistoryFileSystemProvider.SCHEMA,\n\t\t\tquery: JSON.stringify(serializedLocalHistoryResource)\n\t\t});\n\t}\n\n\tstatic fromLocalHistoryFileSystem(resource: URI): ILocalHistoryResource {\n\t\tconst serializedLocalHistoryResource: ISerializedLocalHistoryResource = JSON.parse(resource.query);\n\n\t\treturn {\n\t\t\tlocation: URI.parse(serializedLocalHistoryResource.location),\n\t\t\tassociatedResource: URI.parse(serializedLocalHistoryResource.associatedResource)\n\t\t};\n\t}\n\n\tprivate static readonly EMPTY_RESOURCE = URI.from({ scheme: LocalHistoryFileSystemProvider.SCHEMA, path: '/empty' });\n\n\tstatic readonly EMPTY: ILocalHistoryResource = {\n\t\tlocation: LocalHistoryFileSystemProvider.EMPTY_RESOURCE,\n\t\tassociatedResource: LocalHistoryFileSystemProvider.EMPTY_RESOURCE\n\t};\n\n\tget capabilities() {\n\t\treturn FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.Readonly;\n\t}\n\n\tconstructor(private readonly fileService: IFileService) { }\n\n\tprivate readonly mapSchemeToProvider = new Map<string, Promise<IFileSystemProvider>>();\n\n\tprivate async withProvider(resource: URI): Promise<IFileSystemProvider> {\n\t\tconst scheme = resource.scheme;\n\n\t\tlet providerPromise = this.mapSchemeToProvider.get(scheme);\n\t\tif (!providerPromise) {\n\n\t\t\t// Resolve early when provider already exists\n\t\t\tconst provider = this.fileService.getProvider(scheme);\n\t\t\tif (provider) {\n\t\t\t\tproviderPromise = Promise.resolve(provider);\n\t\t\t}\n\n\t\t\t// Otherwise wait for registration\n\t\t\telse {\n\t\t\t\tproviderPromise = new Promise<IFileSystemProvider>(resolve => {\n\t\t\t\t\tconst disposable = this.fileService.onDidChangeFileSystemProviderRegistrations(e => {\n\t\t\t\t\t\tif (e.added && e.provider && e.scheme === scheme) {\n\t\t\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t\t\tresolve(e.provider);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.mapSchemeToProvider.set(scheme, providerPromise);\n\t\t}\n\n\t\treturn providerPromise;\n\t}\n\n\t//#region Supported File Operations\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\tconst location = LocalHistoryFileSystemProvider.fromLocalHistoryFileSystem(resource).location;\n\n\t\t// Special case: empty resource\n\t\tif (isEqual(LocalHistoryFileSystemProvider.EMPTY_RESOURCE, location)) {\n\t\t\treturn { type: FileType.File, ctime: 0, mtime: 0, size: 0 };\n\t\t}\n\n\t\t// Otherwise delegate to provider\n\t\treturn (await this.withProvider(location)).stat(location);\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\tconst location = LocalHistoryFileSystemProvider.fromLocalHistoryFileSystem(resource).location;\n\n\t\t// Special case: empty resource\n\t\tif (isEqual(LocalHistoryFileSystemProvider.EMPTY_RESOURCE, location)) {\n\t\t\treturn VSBuffer.fromString('').buffer;\n\t\t}\n\n\t\t// Otherwise delegate to provider\n\t\tconst provider = await this.withProvider(location);\n\t\tif (hasReadWriteCapability(provider)) {\n\t\t\treturn provider.readFile(location);\n\t\t}\n\n\t\tthrow new Error('Unsupported');\n\t}\n\n\t//#endregion\n\n\t//#region Unsupported File Operations\n\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\tasync writeFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> { }\n\n\tasync mkdir(resource: URI): Promise<void> { }\n\tasync readdir(resource: URI): Promise<[string, FileType][]> { return []; }\n\n\tasync rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> { }\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> { }\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable { return Disposable.None; }\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
