{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/localHistory/browser/localHistoryFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\tFileType,\n\ttype IFileDeleteOptions,\n\ttype IFileOverwriteOptions,\n\ttype IFileService,\n\ttype IFileSystemProvider,\n\ttype IFileSystemProviderWithFileReadWriteCapability,\n\ttype IFileWriteOptions,\n\ttype IStat,\n\ttype IWatchOptions,\n\thasReadWriteCapability,\n} from \"../../../../platform/files/common/files.js\";\n\ninterface ILocalHistoryResource {\n\t/**\n\t * The location of the local history entry to read from.\n\t */\n\treadonly location: URI;\n\n\t/**\n\t * The associated resource the local history entry is about.\n\t */\n\treadonly associatedResource: URI;\n}\n\ninterface ISerializedLocalHistoryResource {\n\treadonly location: string;\n\treadonly associatedResource: string;\n}\n\n/**\n * A wrapper around a standard file system provider\n * that is entirely readonly.\n */\nexport class LocalHistoryFileSystemProvider\n\timplements\n\t\tIFileSystemProvider,\n\t\tIFileSystemProviderWithFileReadWriteCapability\n{\n\tstatic readonly SCHEMA = \"vscode-local-history\";\n\n\tstatic toLocalHistoryFileSystem(resource: ILocalHistoryResource): URI {\n\t\tconst serializedLocalHistoryResource: ISerializedLocalHistoryResource =\n\t\t\t{\n\t\t\t\tlocation: resource.location.toString(true),\n\t\t\t\tassociatedResource: resource.associatedResource.toString(true),\n\t\t\t};\n\n\t\t// Try to preserve the associated resource as much as possible\n\t\t// and only keep the `query` part dynamic. This enables other\n\t\t// components (e.g. other timeline providers) to continue\n\t\t// providing timeline entries even when our resource is active.\n\t\treturn resource.associatedResource.with({\n\t\t\tscheme: LocalHistoryFileSystemProvider.SCHEMA,\n\t\t\tquery: JSON.stringify(serializedLocalHistoryResource),\n\t\t});\n\t}\n\n\tstatic fromLocalHistoryFileSystem(resource: URI): ILocalHistoryResource {\n\t\tconst serializedLocalHistoryResource: ISerializedLocalHistoryResource =\n\t\t\tJSON.parse(resource.query);\n\n\t\treturn {\n\t\t\tlocation: URI.parse(serializedLocalHistoryResource.location),\n\t\t\tassociatedResource: URI.parse(\n\t\t\t\tserializedLocalHistoryResource.associatedResource,\n\t\t\t),\n\t\t};\n\t}\n\n\tprivate static readonly EMPTY_RESOURCE = URI.from({\n\t\tscheme: LocalHistoryFileSystemProvider.SCHEMA,\n\t\tpath: \"/empty\",\n\t});\n\n\tstatic readonly EMPTY: ILocalHistoryResource = {\n\t\tlocation: LocalHistoryFileSystemProvider.EMPTY_RESOURCE,\n\t\tassociatedResource: LocalHistoryFileSystemProvider.EMPTY_RESOURCE,\n\t};\n\n\tget capabilities() {\n\t\treturn (\n\t\t\tFileSystemProviderCapabilities.FileReadWrite |\n\t\t\tFileSystemProviderCapabilities.Readonly\n\t\t);\n\t}\n\n\tconstructor(private readonly fileService: IFileService) {}\n\n\tprivate readonly mapSchemeToProvider = new Map<\n\t\tstring,\n\t\tPromise<IFileSystemProvider>\n\t>();\n\n\tprivate async withProvider(resource: URI): Promise<IFileSystemProvider> {\n\t\tconst scheme = resource.scheme;\n\n\t\tlet providerPromise = this.mapSchemeToProvider.get(scheme);\n\t\tif (!providerPromise) {\n\t\t\t// Resolve early when provider already exists\n\t\t\tconst provider = this.fileService.getProvider(scheme);\n\t\t\tif (provider) {\n\t\t\t\tproviderPromise = Promise.resolve(provider);\n\t\t\t}\n\n\t\t\t// Otherwise wait for registration\n\t\t\telse {\n\t\t\t\tproviderPromise = new Promise<IFileSystemProvider>(\n\t\t\t\t\t(resolve) => {\n\t\t\t\t\t\tconst disposable =\n\t\t\t\t\t\t\tthis.fileService.onDidChangeFileSystemProviderRegistrations(\n\t\t\t\t\t\t\t\t(e) => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\te.added &&\n\t\t\t\t\t\t\t\t\t\te.provider &&\n\t\t\t\t\t\t\t\t\t\te.scheme === scheme\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t\t\t\t\t\tresolve(e.provider);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.mapSchemeToProvider.set(scheme, providerPromise);\n\t\t}\n\n\t\treturn providerPromise;\n\t}\n\n\t//#region Supported File Operations\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\tconst location =\n\t\t\tLocalHistoryFileSystemProvider.fromLocalHistoryFileSystem(\n\t\t\t\tresource,\n\t\t\t).location;\n\n\t\t// Special case: empty resource\n\t\tif (isEqual(LocalHistoryFileSystemProvider.EMPTY_RESOURCE, location)) {\n\t\t\treturn { type: FileType.File, ctime: 0, mtime: 0, size: 0 };\n\t\t}\n\n\t\t// Otherwise delegate to provider\n\t\treturn (await this.withProvider(location)).stat(location);\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\tconst location =\n\t\t\tLocalHistoryFileSystemProvider.fromLocalHistoryFileSystem(\n\t\t\t\tresource,\n\t\t\t).location;\n\n\t\t// Special case: empty resource\n\t\tif (isEqual(LocalHistoryFileSystemProvider.EMPTY_RESOURCE, location)) {\n\t\t\treturn VSBuffer.fromString(\"\").buffer;\n\t\t}\n\n\t\t// Otherwise delegate to provider\n\t\tconst provider = await this.withProvider(location);\n\t\tif (hasReadWriteCapability(provider)) {\n\t\t\treturn provider.readFile(location);\n\t\t}\n\n\t\tthrow new Error(\"Unsupported\");\n\t}\n\n\t//#endregion\n\n\t//#region Unsupported File Operations\n\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\tasync writeFile(\n\t\tresource: URI,\n\t\tcontent: Uint8Array,\n\t\topts: IFileWriteOptions,\n\t): Promise<void> {}\n\n\tasync mkdir(resource: URI): Promise<void> {}\n\tasync readdir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn [];\n\t}\n\n\tasync rename(\n\t\tfrom: URI,\n\t\tto: URI,\n\t\topts: IFileOverwriteOptions,\n\t): Promise<void> {}\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> {}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
