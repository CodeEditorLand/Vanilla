{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/localHistory/browser/localHistory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { language } from '../../../../base/common/platform.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\n\ninterface ILocalHistoryDateFormatter {\n\tformat: (timestamp: number) => string;\n}\n\nlet localHistoryDateFormatter: ILocalHistoryDateFormatter | undefined = undefined;\n\nexport function getLocalHistoryDateFormatter(): ILocalHistoryDateFormatter {\n\tif (!localHistoryDateFormatter) {\n\t\tconst options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };\n\n\t\tlet formatter: Intl.DateTimeFormat;\n\t\ttry {\n\t\t\tformatter = new Intl.DateTimeFormat(language, options);\n\t\t} catch (error) {\n\t\t\tformatter = new Intl.DateTimeFormat(undefined, options); // error can happen when language is invalid (https://github.com/microsoft/vscode/issues/147086)\n\t\t}\n\n\t\tlocalHistoryDateFormatter = {\n\t\t\tformat: date => formatter.format(date)\n\t\t};\n\t}\n\n\treturn localHistoryDateFormatter;\n}\n\nexport const LOCAL_HISTORY_MENU_CONTEXT_VALUE = 'localHistory:item';\nexport const LOCAL_HISTORY_MENU_CONTEXT_KEY = ContextKeyExpr.equals('timelineItem', LOCAL_HISTORY_MENU_CONTEXT_VALUE);\n\nexport const LOCAL_HISTORY_ICON_ENTRY = registerIcon('localHistory-icon', Codicon.circleOutline, localize('localHistoryIcon', \"Icon for a local history entry in the timeline view.\"));\nexport const LOCAL_HISTORY_ICON_RESTORE = registerIcon('localHistory-restore', Codicon.check, localize('localHistoryRestore', \"Icon for restoring contents of a local history entry.\"));\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAM7B,IAAI,4BAAoE;AAEjE,SAAS,+BAA2D;AAC1E,MAAI,CAAC,2BAA2B;AAC/B,UAAM,UAAsC,EAAE,MAAM,WAAW,OAAO,QAAQ,KAAK,WAAW,MAAM,WAAW,QAAQ,UAAU;AAEjI,QAAI;AACJ,QAAI;AACH,kBAAY,IAAI,KAAK,eAAe,UAAU,OAAO;AAAA,IACtD,SAAS,OAAO;AACf,kBAAY,IAAI,KAAK,eAAe,QAAW,OAAO;AAAA,IACvD;AAEA,gCAA4B;AAAA,MAC3B,QAAQ,iCAAQ,UAAU,OAAO,IAAI,GAA7B;AAAA,IACT;AAAA,EACD;AAEA,SAAO;AACR;AAjBgB;AAmBT,MAAM,mCAAmC;AACzC,MAAM,iCAAiC,eAAe,OAAO,gBAAgB,gCAAgC;AAE7G,MAAM,2BAA2B,aAAa,qBAAqB,QAAQ,eAAe,SAAS,oBAAoB,sDAAsD,CAAC;AAC9K,MAAM,6BAA6B,aAAa,wBAAwB,QAAQ,OAAO,SAAS,uBAAuB,uDAAuD,CAAC;",
  "names": []
}
