{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/localHistory/browser/localHistory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { language } from \"../../../../base/common/platform.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\n\ninterface ILocalHistoryDateFormatter {\n\tformat: (timestamp: number) => string;\n}\n\nlet localHistoryDateFormatter: ILocalHistoryDateFormatter | undefined;\n\nexport function getLocalHistoryDateFormatter(): ILocalHistoryDateFormatter {\n\tif (!localHistoryDateFormatter) {\n\t\tconst options: Intl.DateTimeFormatOptions = {\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"long\",\n\t\t\tday: \"numeric\",\n\t\t\thour: \"numeric\",\n\t\t\tminute: \"numeric\",\n\t\t};\n\n\t\tlet formatter: Intl.DateTimeFormat;\n\t\ttry {\n\t\t\tformatter = new Intl.DateTimeFormat(language, options);\n\t\t} catch (error) {\n\t\t\tformatter = new Intl.DateTimeFormat(undefined, options); // error can happen when language is invalid (https://github.com/microsoft/vscode/issues/147086)\n\t\t}\n\n\t\tlocalHistoryDateFormatter = {\n\t\t\tformat: (date) => formatter.format(date),\n\t\t};\n\t}\n\n\treturn localHistoryDateFormatter;\n}\n\nexport const LOCAL_HISTORY_MENU_CONTEXT_VALUE = \"localHistory:item\";\nexport const LOCAL_HISTORY_MENU_CONTEXT_KEY = ContextKeyExpr.equals(\n\t\"timelineItem\",\n\tLOCAL_HISTORY_MENU_CONTEXT_VALUE,\n);\n\nexport const LOCAL_HISTORY_ICON_ENTRY = registerIcon(\n\t\"localHistory-icon\",\n\tCodicon.circleOutline,\n\tlocalize(\n\t\t\"localHistoryIcon\",\n\t\t\"Icon for a local history entry in the timeline view.\",\n\t),\n);\nexport const LOCAL_HISTORY_ICON_RESTORE = registerIcon(\n\t\"localHistory-restore\",\n\tCodicon.check,\n\tlocalize(\n\t\t\"localHistoryRestore\",\n\t\t\"Icon for restoring contents of a local history entry.\",\n\t),\n);\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAM7B,IAAI;AAEG,SAAS,+BAA2D;AAC1E,MAAI,CAAC,2BAA2B;AAC/B,UAAM,UAAsC;AAAA,MAC3C,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,IACT;AAEA,QAAI;AACJ,QAAI;AACH,kBAAY,IAAI,KAAK,eAAe,UAAU,OAAO;AAAA,IACtD,SAAS,OAAO;AACf,kBAAY,IAAI,KAAK,eAAe,QAAW,OAAO;AAAA,IACvD;AAEA,gCAA4B;AAAA,MAC3B,QAAQ,wBAAC,SAAS,UAAU,OAAO,IAAI,GAA/B;AAAA,IACT;AAAA,EACD;AAEA,SAAO;AACR;AAvBgB;AAyBT,MAAM,mCAAmC;AACzC,MAAM,iCAAiC,eAAe;AAAA,EAC5D;AAAA,EACA;AACD;AAEO,MAAM,2BAA2B;AAAA,EACvC;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;AACO,MAAM,6BAA6B;AAAA,EACzC;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;",
  "names": []
}
