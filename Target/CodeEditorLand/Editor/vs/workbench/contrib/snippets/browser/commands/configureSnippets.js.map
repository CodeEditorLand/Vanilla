{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isValidBasename } from '../../../../../base/common/extpath.js';\nimport { extname } from '../../../../../base/common/path.js';\nimport { basename, joinPath } from '../../../../../base/common/resources.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { getIconClassesForLanguageId } from '../../../../../editor/common/services/getIconClasses.js';\nimport * as nls from '../../../../../nls.js';\nimport { MenuId } from '../../../../../platform/actions/common/actions.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../../platform/label/common/label.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { IQuickInputService, IQuickPickItem, QuickPickInput } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { SnippetsAction } from './abstractSnippetsActions.js';\nimport { ISnippetsService } from '../snippets.js';\nimport { SnippetSource } from '../snippetsFile.js';\nimport { ITextFileService } from '../../../../services/textfile/common/textfiles.js';\nimport { IUserDataProfileService } from '../../../../services/userDataProfile/common/userDataProfile.js';\n\nnamespace ISnippetPick {\n\texport function is(thing: object | undefined): thing is ISnippetPick {\n\t\treturn !!thing && URI.isUri((<ISnippetPick>thing).filepath);\n\t}\n}\n\ninterface ISnippetPick extends IQuickPickItem {\n\tfilepath: URI;\n\thint?: true;\n}\n\nasync function computePicks(snippetService: ISnippetsService, userDataProfileService: IUserDataProfileService, languageService: ILanguageService, labelService: ILabelService) {\n\n\tconst existing: ISnippetPick[] = [];\n\tconst future: ISnippetPick[] = [];\n\n\tconst seen = new Set<string>();\n\tconst added = new Map<string, { snippet: ISnippetPick; detail: string }>();\n\n\tfor (const file of await snippetService.getSnippetFiles()) {\n\n\t\tif (file.source === SnippetSource.Extension) {\n\t\t\t// skip extension snippets\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (file.isGlobalSnippets) {\n\n\t\t\tawait file.load();\n\n\t\t\t// list scopes for global snippets\n\t\t\tconst names = new Set<string>();\n\t\t\tlet source: string | undefined;\n\n\t\t\touter: for (const snippet of file.data) {\n\t\t\t\tif (!source) {\n\t\t\t\t\tsource = snippet.source;\n\t\t\t\t}\n\n\t\t\t\tfor (const scope of snippet.scopes) {\n\t\t\t\t\tconst name = languageService.getLanguageName(scope);\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tif (names.size >= 4) {\n\t\t\t\t\t\t\tnames.add(`${name}...`);\n\t\t\t\t\t\t\tbreak outer;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnames.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst snippet: ISnippetPick = {\n\t\t\t\tlabel: basename(file.location),\n\t\t\t\tfilepath: file.location,\n\t\t\t\tdescription: names.size === 0\n\t\t\t\t\t? nls.localize('global.scope', \"(global)\")\n\t\t\t\t\t: nls.localize('global.1', \"({0})\", [...names].join(', '))\n\t\t\t};\n\t\t\texisting.push(snippet);\n\n\t\t\tif (!source) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst detail = nls.localize('detail.label', \"({0}) {1}\", source, labelService.getUriLabel(file.location, { relative: true }));\n\t\t\tconst lastItem = added.get(basename(file.location));\n\t\t\tif (lastItem) {\n\t\t\t\tsnippet.detail = detail;\n\t\t\t\tlastItem.snippet.detail = lastItem.detail;\n\t\t\t}\n\t\t\tadded.set(basename(file.location), { snippet, detail });\n\n\t\t} else {\n\t\t\t// language snippet\n\t\t\tconst mode = basename(file.location).replace(/\\.json$/, '');\n\t\t\texisting.push({\n\t\t\t\tlabel: basename(file.location),\n\t\t\t\tdescription: `(${languageService.getLanguageName(mode)})`,\n\t\t\t\tfilepath: file.location\n\t\t\t});\n\t\t\tseen.add(mode);\n\t\t}\n\t}\n\n\tconst dir = userDataProfileService.currentProfile.snippetsHome;\n\tfor (const languageId of languageService.getRegisteredLanguageIds()) {\n\t\tconst label = languageService.getLanguageName(languageId);\n\t\tif (label && !seen.has(languageId)) {\n\t\t\tfuture.push({\n\t\t\t\tlabel: languageId,\n\t\t\t\tdescription: `(${label})`,\n\t\t\t\tfilepath: joinPath(dir, `${languageId}.json`),\n\t\t\t\thint: true,\n\t\t\t\ticonClasses: getIconClassesForLanguageId(languageId)\n\t\t\t});\n\t\t}\n\t}\n\n\texisting.sort((a, b) => {\n\t\tconst a_ext = extname(a.filepath.path);\n\t\tconst b_ext = extname(b.filepath.path);\n\t\tif (a_ext === b_ext) {\n\t\t\treturn a.label.localeCompare(b.label);\n\t\t} else if (a_ext === '.code-snippets') {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t});\n\n\tfuture.sort((a, b) => {\n\t\treturn a.label.localeCompare(b.label);\n\t});\n\n\treturn { existing, future };\n}\n\nasync function createSnippetFile(scope: string, defaultPath: URI, quickInputService: IQuickInputService, fileService: IFileService, textFileService: ITextFileService, opener: IOpenerService) {\n\n\tfunction createSnippetUri(input: string) {\n\t\tconst filename = extname(input) !== '.code-snippets'\n\t\t\t? `${input}.code-snippets`\n\t\t\t: input;\n\t\treturn joinPath(defaultPath, filename);\n\t}\n\n\tawait fileService.createFolder(defaultPath);\n\n\tconst input = await quickInputService.input({\n\t\tplaceHolder: nls.localize('name', \"Type snippet file name\"),\n\t\tasync validateInput(input) {\n\t\t\tif (!input) {\n\t\t\t\treturn nls.localize('bad_name1', \"Invalid file name\");\n\t\t\t}\n\t\t\tif (!isValidBasename(input)) {\n\t\t\t\treturn nls.localize('bad_name2', \"'{0}' is not a valid file name\", input);\n\t\t\t}\n\t\t\tif (await fileService.exists(createSnippetUri(input))) {\n\t\t\t\treturn nls.localize('bad_name3', \"'{0}' already exists\", input);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tif (!input) {\n\t\treturn undefined;\n\t}\n\n\tconst resource = createSnippetUri(input);\n\n\tawait textFileService.write(resource, [\n\t\t'{',\n\t\t'\\t// Place your ' + scope + ' snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and ',\n\t\t'\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope ',\n\t\t'\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is ',\n\t\t'\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: ',\n\t\t'\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. ',\n\t\t'\\t// Placeholders with the same ids are connected.',\n\t\t'\\t// Example:',\n\t\t'\\t// \"Print to console\": {',\n\t\t'\\t// \\t\"scope\": \"javascript,typescript\",',\n\t\t'\\t// \\t\"prefix\": \"log\",',\n\t\t'\\t// \\t\"body\": [',\n\t\t'\\t// \\t\\t\"console.log(\\'$1\\');\",',\n\t\t'\\t// \\t\\t\"$2\"',\n\t\t'\\t// \\t],',\n\t\t'\\t// \\t\"description\": \"Log output to console\"',\n\t\t'\\t// }',\n\t\t'}'\n\t].join('\\n'));\n\n\tawait opener.open(resource);\n\treturn undefined;\n}\n\nasync function createLanguageSnippetFile(pick: ISnippetPick, fileService: IFileService, textFileService: ITextFileService) {\n\tif (await fileService.exists(pick.filepath)) {\n\t\treturn;\n\t}\n\tconst contents = [\n\t\t'{',\n\t\t'\\t// Place your snippets for ' + pick.label + ' here. Each snippet is defined under a snippet name and has a prefix, body and ',\n\t\t'\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:',\n\t\t'\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the ',\n\t\t'\\t// same ids are connected.',\n\t\t'\\t// Example:',\n\t\t'\\t// \"Print to console\": {',\n\t\t'\\t// \\t\"prefix\": \"log\",',\n\t\t'\\t// \\t\"body\": [',\n\t\t'\\t// \\t\\t\"console.log(\\'$1\\');\",',\n\t\t'\\t// \\t\\t\"$2\"',\n\t\t'\\t// \\t],',\n\t\t'\\t// \\t\"description\": \"Log output to console\"',\n\t\t'\\t// }',\n\t\t'}'\n\t].join('\\n');\n\tawait textFileService.write(pick.filepath, contents);\n}\n\nexport class ConfigureSnippetsAction extends SnippetsAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.openSnippets',\n\t\t\ttitle: nls.localize2('openSnippet.label', \"Configure Snippets\"),\n\t\t\tshortTitle: {\n\t\t\t\t...nls.localize2('userSnippets', \"Snippets\"),\n\t\t\t\tmnemonicTitle: nls.localize({ key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] }, \"&&Snippets\"),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tmenu: [\n\t\t\t\t{ id: MenuId.MenubarPreferencesMenu, group: '2_configuration', order: 5 },\n\t\t\t\t{ id: MenuId.GlobalActivity, group: '2_configuration', order: 5 },\n\t\t\t]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<any> {\n\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst opener = accessor.get(IOpenerService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst userDataProfileService = accessor.get(IUserDataProfileService);\n\t\tconst workspaceService = accessor.get(IWorkspaceContextService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst textFileService = accessor.get(ITextFileService);\n\t\tconst labelService = accessor.get(ILabelService);\n\n\t\tconst picks = await computePicks(snippetService, userDataProfileService, languageService, labelService);\n\t\tconst existing: QuickPickInput[] = picks.existing;\n\n\t\ttype SnippetPick = IQuickPickItem & { uri: URI } & { scope: string };\n\t\tconst globalSnippetPicks: SnippetPick[] = [{\n\t\t\tscope: nls.localize('new.global_scope', 'global'),\n\t\t\tlabel: nls.localize('new.global', \"New Global Snippets file...\"),\n\t\t\turi: userDataProfileService.currentProfile.snippetsHome\n\t\t}];\n\n\t\tconst workspaceSnippetPicks: SnippetPick[] = [];\n\t\tfor (const folder of workspaceService.getWorkspace().folders) {\n\t\t\tworkspaceSnippetPicks.push({\n\t\t\t\tscope: nls.localize('new.workspace_scope', \"{0} workspace\", folder.name),\n\t\t\t\tlabel: nls.localize('new.folder', \"New Snippets file for '{0}'...\", folder.name),\n\t\t\t\turi: folder.toResource('.vscode')\n\t\t\t});\n\t\t}\n\n\t\tif (existing.length > 0) {\n\t\t\texisting.unshift({ type: 'separator', label: nls.localize('group.global', \"Existing Snippets\") });\n\t\t\texisting.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n\t\t} else {\n\t\t\texisting.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n\t\t}\n\n\t\tconst pick = await quickInputService.pick(([] as QuickPickInput[]).concat(existing, globalSnippetPicks, workspaceSnippetPicks, picks.future), {\n\t\t\tplaceHolder: nls.localize('openSnippet.pickLanguage', \"Select Snippets File or Create Snippets\"),\n\t\t\tmatchOnDescription: true\n\t\t});\n\n\t\tif (globalSnippetPicks.indexOf(pick as SnippetPick) >= 0) {\n\t\t\treturn createSnippetFile((pick as SnippetPick).scope, (pick as SnippetPick).uri, quickInputService, fileService, textFileService, opener);\n\t\t} else if (workspaceSnippetPicks.indexOf(pick as SnippetPick) >= 0) {\n\t\t\treturn createSnippetFile((pick as SnippetPick).scope, (pick as SnippetPick).uri, quickInputService, fileService, textFileService, opener);\n\t\t} else if (ISnippetPick.is(pick)) {\n\t\t\tif (pick.hint) {\n\t\t\t\tawait createLanguageSnippetFile(pick, fileService, textFileService);\n\t\t\t}\n\t\t\treturn opener.open(pick.filepath);\n\t\t}\n\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ISnippetPick", "snippet", "input"]
}
