import{isValidBasename as y}from"../../../../../base/common/extpath.js";import{extname as k}from"../../../../../base/common/path.js";import{basename as h,joinPath as P}from"../../../../../base/common/resources.js";import{URI as z}from"../../../../../base/common/uri.js";import{ILanguageService as $}from"../../../../../editor/common/languages/language.js";import{getIconClassesForLanguageId as L}from"../../../../../editor/common/services/getIconClasses.js";import*as i from"../../../../../nls.js";import{MenuId as w}from"../../../../../platform/actions/common/actions.js";import{IFileService as F}from"../../../../../platform/files/common/files.js";import"../../../../../platform/instantiation/common/instantiation.js";import{ILabelService as U}from"../../../../../platform/label/common/label.js";import{IOpenerService as _}from"../../../../../platform/opener/common/opener.js";import{IQuickInputService as j}from"../../../../../platform/quickinput/common/quickInput.js";import{IWorkspaceContextService as C}from"../../../../../platform/workspace/common/workspace.js";import{ITextFileService as Q}from"../../../../services/textfile/common/textfiles.js";import{IUserDataProfileService as T}from"../../../../services/userDataProfile/common/userDataProfile.js";import{ISnippetsService as N}from"../snippets.js";import{SnippetSource as A}from"../snippetsFile.js";import{SnippetsAction as E}from"./abstractSnippetsActions.js";var v;(n=>{function c(o){return!!o&&z.isUri(o.filepath)}n.is=c})(v||={});async function O(c,n,o,r){const s=[],u=[],f=new Set,m=new Map;for(const e of await c.getSnippetFiles())if(e.source!==A.Extension)if(e.isGlobalSnippets){await e.load();const t=new Set;let l;e:for(const a of e.data){l||(l=a.source);for(const b of a.scopes){const I=o.getLanguageName(b);if(I)if(t.size>=4){t.add(`${I}...`);break e}else t.add(I)}}const p={label:h(e.location),filepath:e.location,description:t.size===0?i.localize("global.scope","(global)"):i.localize("global.1","({0})",[...t].join(", "))};if(s.push(p),!l)continue;const S=i.localize("detail.label","({0}) {1}",l,r.getUriLabel(e.location,{relative:!0})),g=m.get(h(e.location));g&&(p.detail=S,g.snippet.detail=g.detail),m.set(h(e.location),{snippet:p,detail:S})}else{const t=h(e.location).replace(/\.json$/,"");s.push({label:h(e.location),description:`(${o.getLanguageName(t)})`,filepath:e.location}),f.add(t)}const d=n.currentProfile.snippetsHome;for(const e of o.getRegisteredLanguageIds()){const t=o.getLanguageName(e);t&&!f.has(e)&&u.push({label:e,description:`(${t})`,filepath:P(d,`${e}.json`),hint:!0,iconClasses:L(e)})}return s.sort((e,t)=>{const l=k(e.filepath.path),p=k(t.filepath.path);return l===p?e.label.localeCompare(t.label):l===".code-snippets"?-1:1}),u.sort((e,t)=>e.label.localeCompare(t.label)),{existing:s,future:u}}async function x(c,n,o,r,s,u){function f(e){const t=k(e)!==".code-snippets"?`${e}.code-snippets`:e;return P(n,t)}await r.createFolder(n);const m=await o.input({placeHolder:i.localize("name","Type snippet file name"),async validateInput(e){if(!e)return i.localize("bad_name1","Invalid file name");if(!y(e))return i.localize("bad_name2","'{0}' is not a valid file name",e);if(await r.exists(f(e)))return i.localize("bad_name3","'{0}' already exists",e)}});if(!m)return;const d=f(m);await s.write(d,["{","	// Place your "+c+" snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and ","	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope ","	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is ","	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: ","	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. ","	// Placeholders with the same ids are connected.","	// Example:",'	// "Print to console": {','	// 	"scope": "javascript,typescript",','	// 	"prefix": "log",','	// 	"body": [',`	// 		"console.log('$1');",`,'	// 		"$2"',"	// 	],",'	// 	"description": "Log output to console"',"	// }","}"].join(`
`)),await u.open(d)}async function R(c,n,o){if(await n.exists(c.filepath))return;const r=["{","	// Place your snippets for "+c.label+" here. Each snippet is defined under a snippet name and has a prefix, body and ","	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:","	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the ","	// same ids are connected.","	// Example:",'	// "Print to console": {','	// 	"prefix": "log",','	// 	"body": [',`	// 		"console.log('$1');",`,'	// 		"$2"',"	// 	],",'	// 	"description": "Log output to console"',"	// }","}"].join(`
`);await o.write(c.filepath,r)}class se extends E{constructor(){super({id:"workbench.action.openSnippets",title:i.localize2("openSnippet.label","Configure Snippets"),shortTitle:{...i.localize2("userSnippets","Snippets"),mnemonicTitle:i.localize({key:"miOpenSnippets",comment:["&& denotes a mnemonic"]},"&&Snippets")},f1:!0,menu:[{id:w.MenubarPreferencesMenu,group:"2_configuration",order:5},{id:w.GlobalActivity,group:"2_configuration",order:5}]})}async run(n){const o=n.get(N),r=n.get(j),s=n.get(_),u=n.get($),f=n.get(T),m=n.get(C),d=n.get(F),e=n.get(Q),t=n.get(U),l=await O(o,f,u,t),p=l.existing,S=[{scope:i.localize("new.global_scope","global"),label:i.localize("new.global","New Global Snippets file..."),uri:f.currentProfile.snippetsHome}],g=[];for(const b of m.getWorkspace().folders)g.push({scope:i.localize("new.workspace_scope","{0} workspace",b.name),label:i.localize("new.folder","New Snippets file for '{0}'...",b.name),uri:b.toResource(".vscode")});p.length>0?(p.unshift({type:"separator",label:i.localize("group.global","Existing Snippets")}),p.push({type:"separator",label:i.localize("new.global.sep","New Snippets")})):p.push({type:"separator",label:i.localize("new.global.sep","New Snippets")});const a=await r.pick([].concat(p,S,g,l.future),{placeHolder:i.localize("openSnippet.pickLanguage","Select Snippets File or Create Snippets"),matchOnDescription:!0});if(S.indexOf(a)>=0)return x(a.scope,a.uri,r,d,e,s);if(g.indexOf(a)>=0)return x(a.scope,a.uri,r,d,e,s);if(v.is(a))return a.hint&&await R(a,d,e),s.open(a.filepath)}}export{se as ConfigureSnippetsAction};
