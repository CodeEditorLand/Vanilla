{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/snippetsFile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tWindowIdleValue,\n\tgetActiveWindow,\n} from \"../../../../base/browser/dom.js\";\nimport { tail } from \"../../../../base/common/arrays.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tgetNodeType,\n\tparse as jsonParse,\n} from \"../../../../base/common/json.js\";\nimport { basename, extname } from \"../../../../base/common/path.js\";\nimport { relativePath } from \"../../../../base/common/resources.js\";\nimport { isObject } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tPlaceholder,\n\tSnippetParser,\n\tText,\n\tVariable,\n} from \"../../../../editor/contrib/snippet/browser/snippetParser.js\";\nimport { KnownSnippetVariableNames } from \"../../../../editor/contrib/snippet/browser/snippetVariables.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { IExtensionResourceLoaderService } from \"../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport type { IFileService } from \"../../../../platform/files/common/files.js\";\n\nclass SnippetBodyInsights {\n\treadonly codeSnippet: string;\n\n\t/** The snippet uses bad placeholders which collide with variable names */\n\treadonly isBogous: boolean;\n\n\t/** The snippet has no placeholder of the final placeholder is at the end */\n\treadonly isTrivial: boolean;\n\n\treadonly usesClipboardVariable: boolean;\n\treadonly usesSelectionVariable: boolean;\n\n\tconstructor(body: string) {\n\t\t// init with defaults\n\t\tthis.isBogous = false;\n\t\tthis.isTrivial = false;\n\t\tthis.usesClipboardVariable = false;\n\t\tthis.usesSelectionVariable = false;\n\t\tthis.codeSnippet = body;\n\n\t\t// check snippet...\n\t\tconst textmateSnippet = new SnippetParser().parse(body, false);\n\n\t\tconst placeholders = new Map<string, number>();\n\t\tlet placeholderMax = 0;\n\t\tfor (const placeholder of textmateSnippet.placeholders) {\n\t\t\tplaceholderMax = Math.max(placeholderMax, placeholder.index);\n\t\t}\n\n\t\t// mark snippet as trivial when there is no placeholders or when the only\n\t\t// placeholder is the final tabstop and it is at the very end.\n\t\tif (textmateSnippet.placeholders.length === 0) {\n\t\t\tthis.isTrivial = true;\n\t\t} else if (placeholderMax === 0) {\n\t\t\tconst last = tail(textmateSnippet.children);\n\t\t\tthis.isTrivial = last instanceof Placeholder && last.isFinalTabstop;\n\t\t}\n\n\t\tconst stack = [...textmateSnippet.children];\n\t\twhile (stack.length > 0) {\n\t\t\tconst marker = stack.shift()!;\n\t\t\tif (marker instanceof Variable) {\n\t\t\t\tif (\n\t\t\t\t\tmarker.children.length === 0 &&\n\t\t\t\t\t!KnownSnippetVariableNames[marker.name]\n\t\t\t\t) {\n\t\t\t\t\t// a 'variable' without a default value and not being one of our supported\n\t\t\t\t\t// variables is automatically turned into a placeholder. This is to restore\n\t\t\t\t\t// a bug we had before. So `${foo}` becomes `${N:foo}`\n\t\t\t\t\tconst index = placeholders.has(marker.name)\n\t\t\t\t\t\t? placeholders.get(marker.name)!\n\t\t\t\t\t\t: ++placeholderMax;\n\t\t\t\t\tplaceholders.set(marker.name, index);\n\n\t\t\t\t\tconst synthetic = new Placeholder(index).appendChild(\n\t\t\t\t\t\tnew Text(marker.name),\n\t\t\t\t\t);\n\t\t\t\t\ttextmateSnippet.replace(marker, [synthetic]);\n\t\t\t\t\tthis.isBogous = true;\n\t\t\t\t}\n\n\t\t\t\tswitch (marker.name) {\n\t\t\t\t\tcase \"CLIPBOARD\":\n\t\t\t\t\t\tthis.usesClipboardVariable = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"SELECTION\":\n\t\t\t\t\tcase \"TM_SELECTED_TEXT\":\n\t\t\t\t\t\tthis.usesSelectionVariable = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// recurse\n\t\t\t\tstack.push(...marker.children);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isBogous) {\n\t\t\tthis.codeSnippet = textmateSnippet.toTextmateString();\n\t\t}\n\t}\n}\n\nexport class Snippet {\n\tprivate readonly _bodyInsights: WindowIdleValue<SnippetBodyInsights>;\n\n\treadonly prefixLow: string;\n\n\tconstructor(\n\t\treadonly isFileTemplate: boolean,\n\t\treadonly scopes: string[],\n\t\treadonly name: string,\n\t\treadonly prefix: string,\n\t\treadonly description: string,\n\t\treadonly body: string,\n\t\treadonly source: string,\n\t\treadonly snippetSource: SnippetSource,\n\t\treadonly snippetIdentifier: string,\n\t\treadonly extensionId?: ExtensionIdentifier,\n\t) {\n\t\tthis.prefixLow = prefix.toLowerCase();\n\t\tthis._bodyInsights = new WindowIdleValue(\n\t\t\tgetActiveWindow(),\n\t\t\t() => new SnippetBodyInsights(this.body),\n\t\t);\n\t}\n\n\tget codeSnippet(): string {\n\t\treturn this._bodyInsights.value.codeSnippet;\n\t}\n\n\tget isBogous(): boolean {\n\t\treturn this._bodyInsights.value.isBogous;\n\t}\n\n\tget isTrivial(): boolean {\n\t\treturn this._bodyInsights.value.isTrivial;\n\t}\n\n\tget needsClipboard(): boolean {\n\t\treturn this._bodyInsights.value.usesClipboardVariable;\n\t}\n\n\tget usesSelection(): boolean {\n\t\treturn this._bodyInsights.value.usesSelectionVariable;\n\t}\n}\n\ninterface JsonSerializedSnippet {\n\tisFileTemplate?: boolean;\n\tbody: string | string[];\n\tscope?: string;\n\tprefix: string | string[] | undefined;\n\tdescription: string;\n}\n\nfunction isJsonSerializedSnippet(thing: any): thing is JsonSerializedSnippet {\n\treturn isObject(thing) && Boolean((<JsonSerializedSnippet>thing).body);\n}\n\ninterface JsonSerializedSnippets {\n\t[name: string]:\n\t\t| JsonSerializedSnippet\n\t\t| { [name: string]: JsonSerializedSnippet };\n}\n\nexport enum SnippetSource {\n\tUser = 1,\n\tWorkspace = 2,\n\tExtension = 3,\n}\n\nexport class SnippetFile {\n\treadonly data: Snippet[] = [];\n\treadonly isGlobalSnippets: boolean;\n\treadonly isUserSnippets: boolean;\n\n\tprivate _loadPromise?: Promise<this>;\n\n\tconstructor(\n\t\treadonly source: SnippetSource,\n\t\treadonly location: URI,\n\t\tpublic defaultScopes: string[] | undefined,\n\t\tprivate readonly _extension: IExtensionDescription | undefined,\n\t\tprivate readonly _fileService: IFileService,\n\t\tprivate readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t) {\n\t\tthis.isGlobalSnippets = extname(location.path) === \".code-snippets\";\n\t\tthis.isUserSnippets = !this._extension;\n\t}\n\n\tselect(selector: string, bucket: Snippet[]): void {\n\t\tif (this.isGlobalSnippets || !this.isUserSnippets) {\n\t\t\tthis._scopeSelect(selector, bucket);\n\t\t} else {\n\t\t\tthis._filepathSelect(selector, bucket);\n\t\t}\n\t}\n\n\tprivate _filepathSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `fooLang.json` files all snippets are accepted\n\t\tif (selector + \".json\" === basename(this.location.path)) {\n\t\t\tbucket.push(...this.data);\n\t\t}\n\t}\n\n\tprivate _scopeSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `my.code-snippets` files we need to look at each snippet\n\t\tfor (const snippet of this.data) {\n\t\t\tconst len = snippet.scopes.length;\n\t\t\tif (len === 0) {\n\t\t\t\t// always accept\n\t\t\t\tbucket.push(snippet);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t// match\n\t\t\t\t\tif (snippet.scopes[i] === selector) {\n\t\t\t\t\t\tbucket.push(snippet);\n\t\t\t\t\t\tbreak; // match only once!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst idx = selector.lastIndexOf(\".\");\n\t\tif (idx >= 0) {\n\t\t\tthis._scopeSelect(selector.substring(0, idx), bucket);\n\t\t}\n\t}\n\n\tprivate async _load(): Promise<string> {\n\t\tif (this._extension) {\n\t\t\treturn this._extensionResourceLoaderService.readExtensionResource(\n\t\t\t\tthis.location,\n\t\t\t);\n\t\t} else {\n\t\t\tconst content = await this._fileService.readFile(this.location);\n\t\t\treturn content.value.toString();\n\t\t}\n\t}\n\n\tload(): Promise<this> {\n\t\tif (!this._loadPromise) {\n\t\t\tthis._loadPromise = Promise.resolve(this._load()).then(\n\t\t\t\t(content) => {\n\t\t\t\t\tconst data = <JsonSerializedSnippets>jsonParse(content);\n\t\t\t\t\tif (getNodeType(data) === \"object\") {\n\t\t\t\t\t\tfor (const [name, scopeOrTemplate] of Object.entries(\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tif (isJsonSerializedSnippet(scopeOrTemplate)) {\n\t\t\t\t\t\t\t\tthis._parseSnippet(\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tscopeOrTemplate,\n\t\t\t\t\t\t\t\t\tthis.data,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (const [name, template] of Object.entries(\n\t\t\t\t\t\t\t\t\tscopeOrTemplate,\n\t\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\t\tthis._parseSnippet(\n\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\ttemplate,\n\t\t\t\t\t\t\t\t\t\tthis.data,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\treturn this._loadPromise;\n\t}\n\n\treset(): void {\n\t\tthis._loadPromise = undefined;\n\t\tthis.data.length = 0;\n\t}\n\n\tprivate _parseSnippet(\n\t\tname: string,\n\t\tsnippet: JsonSerializedSnippet,\n\t\tbucket: Snippet[],\n\t): void {\n\t\tlet { isFileTemplate, prefix, body, description } = snippet;\n\n\t\tif (!prefix) {\n\t\t\tprefix = \"\";\n\t\t}\n\n\t\tif (Array.isArray(body)) {\n\t\t\tbody = body.join(\"\\n\");\n\t\t}\n\t\tif (typeof body !== \"string\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Array.isArray(description)) {\n\t\t\tdescription = description.join(\"\\n\");\n\t\t}\n\n\t\tlet scopes: string[];\n\t\tif (this.defaultScopes) {\n\t\t\tscopes = this.defaultScopes;\n\t\t} else if (typeof snippet.scope === \"string\") {\n\t\t\tscopes = snippet.scope\n\t\t\t\t.split(\",\")\n\t\t\t\t.map((s) => s.trim())\n\t\t\t\t.filter(Boolean);\n\t\t} else {\n\t\t\tscopes = [];\n\t\t}\n\n\t\tlet source: string;\n\t\tif (this._extension) {\n\t\t\t// extension snippet -> show the name of the extension\n\t\t\tsource = this._extension.displayName || this._extension.name;\n\t\t} else if (this.source === SnippetSource.Workspace) {\n\t\t\t// workspace -> only *.code-snippets files\n\t\t\tsource = localize(\n\t\t\t\t\"source.workspaceSnippetGlobal\",\n\t\t\t\t\"Workspace Snippet\",\n\t\t\t);\n\t\t} else {\n\t\t\t// user -> global (*.code-snippets) and language snippets\n\t\t\tif (this.isGlobalSnippets) {\n\t\t\t\tsource = localize(\n\t\t\t\t\t\"source.userSnippetGlobal\",\n\t\t\t\t\t\"Global User Snippet\",\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsource = localize(\"source.userSnippet\", \"User Snippet\");\n\t\t\t}\n\t\t}\n\n\t\tfor (const _prefix of Iterable.wrap(prefix)) {\n\t\t\tbucket.push(\n\t\t\t\tnew Snippet(\n\t\t\t\t\tBoolean(isFileTemplate),\n\t\t\t\t\tscopes,\n\t\t\t\t\tname,\n\t\t\t\t\t_prefix,\n\t\t\t\t\tdescription,\n\t\t\t\t\tbody,\n\t\t\t\t\tsource,\n\t\t\t\t\tthis.source,\n\t\t\t\t\tthis._extension\n\t\t\t\t\t\t? `${relativePath(this._extension.extensionLocation, this.location)}/${name}`\n\t\t\t\t\t\t: `${basename(this.location.path)}/${name}`,\n\t\t\t\t\tthis._extension?.identifier,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SnippetSource", "name"]
}
