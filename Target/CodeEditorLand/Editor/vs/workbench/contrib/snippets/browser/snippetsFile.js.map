{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/snippetsFile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { parse as jsonParse, getNodeType } from '../../../../base/common/json.js';\nimport { localize } from '../../../../nls.js';\nimport { extname, basename } from '../../../../base/common/path.js';\nimport { SnippetParser, Variable, Placeholder, Text } from '../../../../editor/contrib/snippet/browser/snippetParser.js';\nimport { KnownSnippetVariableNames } from '../../../../editor/contrib/snippet/browser/snippetVariables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { IExtensionResourceLoaderService } from '../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { relativePath } from '../../../../base/common/resources.js';\nimport { isObject } from '../../../../base/common/types.js';\nimport { tail } from '../../../../base/common/arrays.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { WindowIdleValue, getActiveWindow } from '../../../../base/browser/dom.js';\n\nclass SnippetBodyInsights {\n\n\treadonly codeSnippet: string;\n\n\t/** The snippet uses bad placeholders which collide with variable names */\n\treadonly isBogous: boolean;\n\n\t/** The snippet has no placeholder of the final placeholder is at the end */\n\treadonly isTrivial: boolean;\n\n\treadonly usesClipboardVariable: boolean;\n\treadonly usesSelectionVariable: boolean;\n\n\tconstructor(body: string) {\n\n\t\t// init with defaults\n\t\tthis.isBogous = false;\n\t\tthis.isTrivial = false;\n\t\tthis.usesClipboardVariable = false;\n\t\tthis.usesSelectionVariable = false;\n\t\tthis.codeSnippet = body;\n\n\t\t// check snippet...\n\t\tconst textmateSnippet = new SnippetParser().parse(body, false);\n\n\t\tconst placeholders = new Map<string, number>();\n\t\tlet placeholderMax = 0;\n\t\tfor (const placeholder of textmateSnippet.placeholders) {\n\t\t\tplaceholderMax = Math.max(placeholderMax, placeholder.index);\n\t\t}\n\n\t\t// mark snippet as trivial when there is no placeholders or when the only\n\t\t// placeholder is the final tabstop and it is at the very end.\n\t\tif (textmateSnippet.placeholders.length === 0) {\n\t\t\tthis.isTrivial = true;\n\t\t} else if (placeholderMax === 0) {\n\t\t\tconst last = tail(textmateSnippet.children);\n\t\t\tthis.isTrivial = last instanceof Placeholder && last.isFinalTabstop;\n\t\t}\n\n\t\tconst stack = [...textmateSnippet.children];\n\t\twhile (stack.length > 0) {\n\t\t\tconst marker = stack.shift()!;\n\t\t\tif (marker instanceof Variable) {\n\n\t\t\t\tif (marker.children.length === 0 && !KnownSnippetVariableNames[marker.name]) {\n\t\t\t\t\t// a 'variable' without a default value and not being one of our supported\n\t\t\t\t\t// variables is automatically turned into a placeholder. This is to restore\n\t\t\t\t\t// a bug we had before. So `${foo}` becomes `${N:foo}`\n\t\t\t\t\tconst index = placeholders.has(marker.name) ? placeholders.get(marker.name)! : ++placeholderMax;\n\t\t\t\t\tplaceholders.set(marker.name, index);\n\n\t\t\t\t\tconst synthetic = new Placeholder(index).appendChild(new Text(marker.name));\n\t\t\t\t\ttextmateSnippet.replace(marker, [synthetic]);\n\t\t\t\t\tthis.isBogous = true;\n\t\t\t\t}\n\n\t\t\t\tswitch (marker.name) {\n\t\t\t\t\tcase 'CLIPBOARD':\n\t\t\t\t\t\tthis.usesClipboardVariable = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'SELECTION':\n\t\t\t\t\tcase 'TM_SELECTED_TEXT':\n\t\t\t\t\t\tthis.usesSelectionVariable = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// recurse\n\t\t\t\tstack.push(...marker.children);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isBogous) {\n\t\t\tthis.codeSnippet = textmateSnippet.toTextmateString();\n\t\t}\n\n\t}\n}\n\nexport class Snippet {\n\n\tprivate readonly _bodyInsights: WindowIdleValue<SnippetBodyInsights>;\n\n\treadonly prefixLow: string;\n\n\tconstructor(\n\t\treadonly isFileTemplate: boolean,\n\t\treadonly scopes: string[],\n\t\treadonly name: string,\n\t\treadonly prefix: string,\n\t\treadonly description: string,\n\t\treadonly body: string,\n\t\treadonly source: string,\n\t\treadonly snippetSource: SnippetSource,\n\t\treadonly snippetIdentifier: string,\n\t\treadonly extensionId?: ExtensionIdentifier,\n\t) {\n\t\tthis.prefixLow = prefix.toLowerCase();\n\t\tthis._bodyInsights = new WindowIdleValue(getActiveWindow(), () => new SnippetBodyInsights(this.body));\n\t}\n\n\tget codeSnippet(): string {\n\t\treturn this._bodyInsights.value.codeSnippet;\n\t}\n\n\tget isBogous(): boolean {\n\t\treturn this._bodyInsights.value.isBogous;\n\t}\n\n\tget isTrivial(): boolean {\n\t\treturn this._bodyInsights.value.isTrivial;\n\t}\n\n\tget needsClipboard(): boolean {\n\t\treturn this._bodyInsights.value.usesClipboardVariable;\n\t}\n\n\tget usesSelection(): boolean {\n\t\treturn this._bodyInsights.value.usesSelectionVariable;\n\t}\n}\n\n\ninterface JsonSerializedSnippet {\n\tisFileTemplate?: boolean;\n\tbody: string | string[];\n\tscope?: string;\n\tprefix: string | string[] | undefined;\n\tdescription: string;\n}\n\nfunction isJsonSerializedSnippet(thing: any): thing is JsonSerializedSnippet {\n\treturn isObject(thing) && Boolean((<JsonSerializedSnippet>thing).body);\n}\n\ninterface JsonSerializedSnippets {\n\t[name: string]: JsonSerializedSnippet | { [name: string]: JsonSerializedSnippet };\n}\n\nexport const enum SnippetSource {\n\tUser = 1,\n\tWorkspace = 2,\n\tExtension = 3,\n}\n\nexport class SnippetFile {\n\n\treadonly data: Snippet[] = [];\n\treadonly isGlobalSnippets: boolean;\n\treadonly isUserSnippets: boolean;\n\n\tprivate _loadPromise?: Promise<this>;\n\n\tconstructor(\n\t\treadonly source: SnippetSource,\n\t\treadonly location: URI,\n\t\tpublic defaultScopes: string[] | undefined,\n\t\tprivate readonly _extension: IExtensionDescription | undefined,\n\t\tprivate readonly _fileService: IFileService,\n\t\tprivate readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t) {\n\t\tthis.isGlobalSnippets = extname(location.path) === '.code-snippets';\n\t\tthis.isUserSnippets = !this._extension;\n\t}\n\n\tselect(selector: string, bucket: Snippet[]): void {\n\t\tif (this.isGlobalSnippets || !this.isUserSnippets) {\n\t\t\tthis._scopeSelect(selector, bucket);\n\t\t} else {\n\t\t\tthis._filepathSelect(selector, bucket);\n\t\t}\n\t}\n\n\tprivate _filepathSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `fooLang.json` files all snippets are accepted\n\t\tif (selector + '.json' === basename(this.location.path)) {\n\t\t\tbucket.push(...this.data);\n\t\t}\n\t}\n\n\tprivate _scopeSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `my.code-snippets` files we need to look at each snippet\n\t\tfor (const snippet of this.data) {\n\t\t\tconst len = snippet.scopes.length;\n\t\t\tif (len === 0) {\n\t\t\t\t// always accept\n\t\t\t\tbucket.push(snippet);\n\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t// match\n\t\t\t\t\tif (snippet.scopes[i] === selector) {\n\t\t\t\t\t\tbucket.push(snippet);\n\t\t\t\t\t\tbreak; // match only once!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst idx = selector.lastIndexOf('.');\n\t\tif (idx >= 0) {\n\t\t\tthis._scopeSelect(selector.substring(0, idx), bucket);\n\t\t}\n\t}\n\n\tprivate async _load(): Promise<string> {\n\t\tif (this._extension) {\n\t\t\treturn this._extensionResourceLoaderService.readExtensionResource(this.location);\n\t\t} else {\n\t\t\tconst content = await this._fileService.readFile(this.location);\n\t\t\treturn content.value.toString();\n\t\t}\n\t}\n\n\tload(): Promise<this> {\n\t\tif (!this._loadPromise) {\n\t\t\tthis._loadPromise = Promise.resolve(this._load()).then(content => {\n\t\t\t\tconst data = <JsonSerializedSnippets>jsonParse(content);\n\t\t\t\tif (getNodeType(data) === 'object') {\n\t\t\t\t\tfor (const [name, scopeOrTemplate] of Object.entries(data)) {\n\t\t\t\t\t\tif (isJsonSerializedSnippet(scopeOrTemplate)) {\n\t\t\t\t\t\t\tthis._parseSnippet(name, scopeOrTemplate, this.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (const [name, template] of Object.entries(scopeOrTemplate)) {\n\t\t\t\t\t\t\t\tthis._parseSnippet(name, template, this.data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t});\n\t\t}\n\t\treturn this._loadPromise;\n\t}\n\n\treset(): void {\n\t\tthis._loadPromise = undefined;\n\t\tthis.data.length = 0;\n\t}\n\n\tprivate _parseSnippet(name: string, snippet: JsonSerializedSnippet, bucket: Snippet[]): void {\n\n\t\tlet { isFileTemplate, prefix, body, description } = snippet;\n\n\t\tif (!prefix) {\n\t\t\tprefix = '';\n\t\t}\n\n\t\tif (Array.isArray(body)) {\n\t\t\tbody = body.join('\\n');\n\t\t}\n\t\tif (typeof body !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Array.isArray(description)) {\n\t\t\tdescription = description.join('\\n');\n\t\t}\n\n\t\tlet scopes: string[];\n\t\tif (this.defaultScopes) {\n\t\t\tscopes = this.defaultScopes;\n\t\t} else if (typeof snippet.scope === 'string') {\n\t\t\tscopes = snippet.scope.split(',').map(s => s.trim()).filter(Boolean);\n\t\t} else {\n\t\t\tscopes = [];\n\t\t}\n\n\t\tlet source: string;\n\t\tif (this._extension) {\n\t\t\t// extension snippet -> show the name of the extension\n\t\t\tsource = this._extension.displayName || this._extension.name;\n\n\t\t} else if (this.source === SnippetSource.Workspace) {\n\t\t\t// workspace -> only *.code-snippets files\n\t\t\tsource = localize('source.workspaceSnippetGlobal', \"Workspace Snippet\");\n\t\t} else {\n\t\t\t// user -> global (*.code-snippets) and language snippets\n\t\t\tif (this.isGlobalSnippets) {\n\t\t\t\tsource = localize('source.userSnippetGlobal', \"Global User Snippet\");\n\t\t\t} else {\n\t\t\t\tsource = localize('source.userSnippet', \"User Snippet\");\n\t\t\t}\n\t\t}\n\n\t\tfor (const _prefix of Iterable.wrap(prefix)) {\n\t\t\tbucket.push(new Snippet(\n\t\t\t\tBoolean(isFileTemplate),\n\t\t\t\tscopes,\n\t\t\t\tname,\n\t\t\t\t_prefix,\n\t\t\t\tdescription,\n\t\t\t\tbody,\n\t\t\t\tsource,\n\t\t\t\tthis.source,\n\t\t\t\tthis._extension ? `${relativePath(this._extension.extensionLocation, this.location)}/${name}` : `${basename(this.location.path)}/${name}`,\n\t\t\t\tthis._extension?.identifier,\n\t\t\t));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SnippetSource", "name"]
}
