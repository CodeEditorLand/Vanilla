{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/tabCompletion.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode } from \"../../../../base/common/keyCodes.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorCommand,\n\tEditorContributionInstantiation,\n\tregisterEditorCommand,\n\tregisterEditorContribution,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport { EditorOption } from \"../../../../editor/common/config/editorOptions.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { IEditorContribution } from \"../../../../editor/common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport type { CompletionItemProvider } from \"../../../../editor/common/languages.js\";\nimport { ILanguageFeaturesService } from \"../../../../editor/common/services/languageFeatures.js\";\nimport {\n\tCodeEditorStateFlag,\n\tEditorState,\n} from \"../../../../editor/contrib/editorState/browser/editorState.js\";\nimport { SnippetController2 } from \"../../../../editor/contrib/snippet/browser/snippetController2.js\";\nimport { showSimpleSuggestions } from \"../../../../editor/contrib/suggest/browser/suggest.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { SnippetCompletion } from \"./snippetCompletionProvider.js\";\nimport { ISnippetsService } from \"./snippets.js\";\nimport type { Snippet } from \"./snippetsFile.js\";\nimport { getNonWhitespacePrefix } from \"./snippetsService.js\";\n\nexport class TabCompletionController implements IEditorContribution {\n\tstatic readonly ID = \"editor.tabCompletionController\";\n\n\tstatic readonly ContextKey = new RawContextKey<boolean>(\n\t\t\"hasSnippetCompletions\",\n\t\tundefined,\n\t);\n\n\tstatic get(editor: ICodeEditor): TabCompletionController | null {\n\t\treturn editor.getContribution<TabCompletionController>(\n\t\t\tTabCompletionController.ID,\n\t\t);\n\t}\n\n\tprivate readonly _hasSnippets: IContextKey<boolean>;\n\tprivate readonly _configListener: IDisposable;\n\tprivate _enabled?: boolean;\n\tprivate _selectionListener?: IDisposable;\n\n\tprivate _activeSnippets: Snippet[] = [];\n\tprivate _completionProvider?: IDisposable & CompletionItemProvider;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ISnippetsService private readonly _snippetService: ISnippetsService,\n\t\t@IClipboardService\n\t\tprivate readonly _clipboardService: IClipboardService,\n\t\t@ILanguageFeaturesService\n\t\tprivate readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._hasSnippets =\n\t\t\tTabCompletionController.ContextKey.bindTo(contextKeyService);\n\t\tthis._configListener = this._editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.tabCompletion)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t\tthis._update();\n\t}\n\n\tdispose(): void {\n\t\tthis._configListener.dispose();\n\t\tthis._selectionListener?.dispose();\n\t}\n\n\tprivate _update(): void {\n\t\tconst enabled =\n\t\t\tthis._editor.getOption(EditorOption.tabCompletion) ===\n\t\t\t\"onlySnippets\";\n\t\tif (this._enabled !== enabled) {\n\t\t\tthis._enabled = enabled;\n\t\t\tif (this._enabled) {\n\t\t\t\tthis._selectionListener =\n\t\t\t\t\tthis._editor.onDidChangeCursorSelection((e) =>\n\t\t\t\t\t\tthis._updateSnippets(),\n\t\t\t\t\t);\n\t\t\t\tif (this._editor.getModel()) {\n\t\t\t\t\tthis._updateSnippets();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._selectionListener?.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateSnippets(): void {\n\t\t// reset first\n\t\tthis._activeSnippets = [];\n\t\tthis._completionProvider?.dispose();\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// lots of dance for getting the\n\t\tconst selection = this._editor.getSelection();\n\t\tconst model = this._editor.getModel();\n\t\tmodel.tokenization.tokenizeIfCheap(selection.positionLineNumber);\n\t\tconst id = model.getLanguageIdAtPosition(\n\t\t\tselection.positionLineNumber,\n\t\t\tselection.positionColumn,\n\t\t);\n\t\tconst snippets = this._snippetService.getSnippetsSync(id);\n\n\t\tif (!snippets) {\n\t\t\t// nothing for this language\n\t\t\tthis._hasSnippets.set(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (Range.isEmpty(selection)) {\n\t\t\t// empty selection -> real text (no whitespace) left of cursor\n\t\t\tconst prefix = getNonWhitespacePrefix(\n\t\t\t\tmodel,\n\t\t\t\tselection.getPosition(),\n\t\t\t);\n\t\t\tif (prefix) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (prefix.endsWith(snippet.prefix)) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (\n\t\t\t!Range.spansMultipleLines(selection) &&\n\t\t\tmodel.getValueLengthInRange(selection) <= 100\n\t\t) {\n\t\t\t// actual selection -> snippet must be a full match\n\t\t\tconst selected = model.getValueInRange(selection);\n\t\t\tif (selected) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (selected === snippet.prefix) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst len = this._activeSnippets.length;\n\t\tif (len === 0) {\n\t\t\tthis._hasSnippets.set(false);\n\t\t} else if (len === 1) {\n\t\t\tthis._hasSnippets.set(true);\n\t\t} else {\n\t\t\tthis._hasSnippets.set(true);\n\t\t\tthis._completionProvider = {\n\t\t\t\t_debugDisplayName: \"tabCompletion\",\n\t\t\t\tdispose: () => {\n\t\t\t\t\tregistration.dispose();\n\t\t\t\t},\n\t\t\t\tprovideCompletionItems: (_model, position) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t_model !== model ||\n\t\t\t\t\t\t!selection.containsPosition(position)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst suggestions = this._activeSnippets.map((snippet) => {\n\t\t\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\t\t\tposition.delta(0, -snippet.prefix.length),\n\t\t\t\t\t\t\tposition,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn new SnippetCompletion(snippet, range);\n\t\t\t\t\t});\n\t\t\t\t\treturn { suggestions };\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst registration =\n\t\t\t\tthis._languageFeaturesService.completionProvider.register(\n\t\t\t\t\t{\n\t\t\t\t\t\tlanguage: model.getLanguageId(),\n\t\t\t\t\t\tpattern: model.uri.fsPath,\n\t\t\t\t\t\tscheme: model.uri.scheme,\n\t\t\t\t\t},\n\t\t\t\t\tthis._completionProvider,\n\t\t\t\t);\n\t\t}\n\t}\n\n\tasync performSnippetCompletions() {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._activeSnippets.length === 1) {\n\t\t\t// one -> just insert\n\t\t\tconst [snippet] = this._activeSnippets;\n\n\t\t\t// async clipboard access might be required and in that case\n\t\t\t// we need to check if the editor has changed in flight and then\n\t\t\t// bail out (or be smarter than that)\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (snippet.needsClipboard) {\n\t\t\t\tconst state = new EditorState(\n\t\t\t\t\tthis._editor,\n\t\t\t\t\tCodeEditorStateFlag.Value | CodeEditorStateFlag.Position,\n\t\t\t\t);\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t\tif (!state.validate(this._editor)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSnippetController2.get(this._editor)?.insert(snippet.codeSnippet, {\n\t\t\t\toverwriteBefore: snippet.prefix.length,\n\t\t\t\toverwriteAfter: 0,\n\t\t\t\tclipboardText,\n\t\t\t});\n\t\t} else if (this._activeSnippets.length > 1) {\n\t\t\t// two or more -> show IntelliSense box\n\t\t\tif (this._completionProvider) {\n\t\t\t\tshowSimpleSuggestions(this._editor, this._completionProvider);\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterEditorContribution(\n\tTabCompletionController.ID,\n\tTabCompletionController,\n\tEditorContributionInstantiation.Eager,\n); // eager because it needs to define a context key\n\nconst TabCompletionCommand =\n\tEditorCommand.bindToContribution<TabCompletionController>(\n\t\tTabCompletionController.get,\n\t);\n\nregisterEditorCommand(\n\tnew TabCompletionCommand({\n\t\tid: \"insertSnippet\",\n\t\tprecondition: TabCompletionController.ContextKey,\n\t\thandler: (x) => x.performSnippetCompletions(),\n\t\tkbOpts: {\n\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\tEditorContextKeys.tabDoesNotMoveFocus,\n\t\t\t\tSnippetController2.InSnippetMode.toNegated(),\n\t\t\t),\n\t\t\tprimary: KeyCode.Tab,\n\t\t},\n\t}),\n);\n"],
  "mappings": "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",
  "names": []
}
