{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/tabCompletion.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { RawContextKey, IContextKeyService, ContextKeyExpr, IContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ISnippetsService } from './snippets.js';\nimport { getNonWhitespacePrefix } from './snippetsService.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IEditorContribution } from '../../../../editor/common/editorCommon.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { registerEditorContribution, EditorCommand, registerEditorCommand, EditorContributionInstantiation } from '../../../../editor/browser/editorExtensions.js';\nimport { SnippetController2 } from '../../../../editor/contrib/snippet/browser/snippetController2.js';\nimport { showSimpleSuggestions } from '../../../../editor/contrib/suggest/browser/suggest.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { Snippet } from './snippetsFile.js';\nimport { SnippetCompletion } from './snippetCompletionProvider.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { EditorState, CodeEditorStateFlag } from '../../../../editor/contrib/editorState/browser/editorState.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { CompletionItemProvider } from '../../../../editor/common/languages.js';\n\nexport class TabCompletionController implements IEditorContribution {\n\n\tstatic readonly ID = 'editor.tabCompletionController';\n\n\tstatic readonly ContextKey = new RawContextKey<boolean>('hasSnippetCompletions', undefined);\n\n\tstatic get(editor: ICodeEditor): TabCompletionController | null {\n\t\treturn editor.getContribution<TabCompletionController>(TabCompletionController.ID);\n\t}\n\n\tprivate readonly _hasSnippets: IContextKey<boolean>;\n\tprivate readonly _configListener: IDisposable;\n\tprivate _enabled?: boolean;\n\tprivate _selectionListener?: IDisposable;\n\n\tprivate _activeSnippets: Snippet[] = [];\n\tprivate _completionProvider?: IDisposable & CompletionItemProvider;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ISnippetsService private readonly _snippetService: ISnippetsService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._hasSnippets = TabCompletionController.ContextKey.bindTo(contextKeyService);\n\t\tthis._configListener = this._editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.hasChanged(EditorOption.tabCompletion)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t\tthis._update();\n\t}\n\n\tdispose(): void {\n\t\tthis._configListener.dispose();\n\t\tthis._selectionListener?.dispose();\n\t}\n\n\tprivate _update(): void {\n\t\tconst enabled = this._editor.getOption(EditorOption.tabCompletion) === 'onlySnippets';\n\t\tif (this._enabled !== enabled) {\n\t\t\tthis._enabled = enabled;\n\t\t\tif (!this._enabled) {\n\t\t\t\tthis._selectionListener?.dispose();\n\t\t\t} else {\n\t\t\t\tthis._selectionListener = this._editor.onDidChangeCursorSelection(e => this._updateSnippets());\n\t\t\t\tif (this._editor.getModel()) {\n\t\t\t\t\tthis._updateSnippets();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateSnippets(): void {\n\n\t\t// reset first\n\t\tthis._activeSnippets = [];\n\t\tthis._completionProvider?.dispose();\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// lots of dance for getting the\n\t\tconst selection = this._editor.getSelection();\n\t\tconst model = this._editor.getModel();\n\t\tmodel.tokenization.tokenizeIfCheap(selection.positionLineNumber);\n\t\tconst id = model.getLanguageIdAtPosition(selection.positionLineNumber, selection.positionColumn);\n\t\tconst snippets = this._snippetService.getSnippetsSync(id);\n\n\t\tif (!snippets) {\n\t\t\t// nothing for this language\n\t\t\tthis._hasSnippets.set(false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (Range.isEmpty(selection)) {\n\t\t\t// empty selection -> real text (no whitespace) left of cursor\n\t\t\tconst prefix = getNonWhitespacePrefix(model, selection.getPosition());\n\t\t\tif (prefix) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (prefix.endsWith(snippet.prefix)) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (!Range.spansMultipleLines(selection) && model.getValueLengthInRange(selection) <= 100) {\n\t\t\t// actual selection -> snippet must be a full match\n\t\t\tconst selected = model.getValueInRange(selection);\n\t\t\tif (selected) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tif (selected === snippet.prefix) {\n\t\t\t\t\t\tthis._activeSnippets.push(snippet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst len = this._activeSnippets.length;\n\t\tif (len === 0) {\n\t\t\tthis._hasSnippets.set(false);\n\t\t} else if (len === 1) {\n\t\t\tthis._hasSnippets.set(true);\n\t\t} else {\n\t\t\tthis._hasSnippets.set(true);\n\t\t\tthis._completionProvider = {\n\t\t\t\t_debugDisplayName: 'tabCompletion',\n\t\t\t\tdispose: () => {\n\t\t\t\t\tregistration.dispose();\n\t\t\t\t},\n\t\t\t\tprovideCompletionItems: (_model, position) => {\n\t\t\t\t\tif (_model !== model || !selection.containsPosition(position)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst suggestions = this._activeSnippets.map(snippet => {\n\t\t\t\t\t\tconst range = Range.fromPositions(position.delta(0, -snippet.prefix.length), position);\n\t\t\t\t\t\treturn new SnippetCompletion(snippet, range);\n\t\t\t\t\t});\n\t\t\t\t\treturn { suggestions };\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst registration = this._languageFeaturesService.completionProvider.register(\n\t\t\t\t{ language: model.getLanguageId(), pattern: model.uri.fsPath, scheme: model.uri.scheme },\n\t\t\t\tthis._completionProvider\n\t\t\t);\n\t\t}\n\t}\n\n\tasync performSnippetCompletions() {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._activeSnippets.length === 1) {\n\t\t\t// one -> just insert\n\t\t\tconst [snippet] = this._activeSnippets;\n\n\t\t\t// async clipboard access might be required and in that case\n\t\t\t// we need to check if the editor has changed in flight and then\n\t\t\t// bail out (or be smarter than that)\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (snippet.needsClipboard) {\n\t\t\t\tconst state = new EditorState(this._editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Position);\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t\tif (!state.validate(this._editor)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSnippetController2.get(this._editor)?.insert(snippet.codeSnippet, {\n\t\t\t\toverwriteBefore: snippet.prefix.length, overwriteAfter: 0,\n\t\t\t\tclipboardText\n\t\t\t});\n\n\t\t} else if (this._activeSnippets.length > 1) {\n\t\t\t// two or more -> show IntelliSense box\n\t\t\tif (this._completionProvider) {\n\t\t\t\tshowSimpleSuggestions(this._editor, this._completionProvider);\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterEditorContribution(TabCompletionController.ID, TabCompletionController, EditorContributionInstantiation.Eager); // eager because it needs to define a context key\n\nconst TabCompletionCommand = EditorCommand.bindToContribution<TabCompletionController>(TabCompletionController.get);\n\nregisterEditorCommand(new TabCompletionCommand({\n\tid: 'insertSnippet',\n\tprecondition: TabCompletionController.ContextKey,\n\thandler: x => x.performSnippetCompletions(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib,\n\t\tkbExpr: ContextKeyExpr.and(\n\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\tEditorContextKeys.tabDoesNotMoveFocus,\n\t\t\tSnippetController2.InSnippetMode.toNegated()\n\t\t),\n\t\tprimary: KeyCode.Tab\n\t}\n}));\n"],
  "mappings": "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",
  "names": []
}
