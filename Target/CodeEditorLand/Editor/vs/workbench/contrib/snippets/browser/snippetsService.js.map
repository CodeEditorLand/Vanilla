{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/snippetsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { combinedDisposable, IDisposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { isFalsyOrWhitespace } from '../../../../base/common/strings.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { setSnippetSuggestSupport } from '../../../../editor/contrib/suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { FileChangeType, IFileService } from '../../../../platform/files/common/files.js';\nimport { ILifecycleService, LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IWorkspace, IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { ISnippetGetOptions, ISnippetsService } from './snippets.js';\nimport { Snippet, SnippetFile, SnippetSource } from './snippetsFile.js';\nimport { ExtensionsRegistry, IExtensionPointUser } from '../../../services/extensions/common/extensionsRegistry.js';\nimport { languagesExtPoint } from '../../../services/language/common/languageService.js';\nimport { SnippetCompletionProvider } from './snippetCompletionProvider.js';\nimport { IExtensionResourceLoaderService } from '../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { isStringArray } from '../../../../base/common/types.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { ILanguageConfigurationService } from '../../../../editor/common/languages/languageConfigurationRegistry.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { insertInto } from '../../../../base/common/arrays.js';\n\nnamespace snippetExt {\n\n\texport interface ISnippetsExtensionPoint {\n\t\tlanguage: string;\n\t\tpath: string;\n\t}\n\n\texport interface IValidSnippetsExtensionPoint {\n\t\tlanguage: string;\n\t\tlocation: URI;\n\t}\n\n\texport function toValidSnippet(extension: IExtensionPointUser<ISnippetsExtensionPoint[]>, snippet: ISnippetsExtensionPoint, languageService: ILanguageService): IValidSnippetsExtensionPoint | null {\n\n\t\tif (isFalsyOrWhitespace(snippet.path)) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.path.0',\n\t\t\t\t\"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n\t\t\t\textension.description.name, String(snippet.path)\n\t\t\t));\n\t\t\treturn null;\n\t\t}\n\n\t\tif (isFalsyOrWhitespace(snippet.language) && !snippet.path.endsWith('.code-snippets')) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.language.0',\n\t\t\t\t\"When omitting the language, the value of `contributes.{0}.path` must be a `.code-snippets`-file. Provided value: {1}\",\n\t\t\t\textension.description.name, String(snippet.path)\n\t\t\t));\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!isFalsyOrWhitespace(snippet.language) && !languageService.isRegisteredLanguageId(snippet.language)) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.language',\n\t\t\t\t\"Unknown language in `contributes.{0}.language`. Provided value: {1}\",\n\t\t\t\textension.description.name, String(snippet.language)\n\t\t\t));\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extensionLocation = extension.description.extensionLocation;\n\t\tconst snippetLocation = resources.joinPath(extensionLocation, snippet.path);\n\t\tif (!resources.isEqualOrParent(snippetLocation, extensionLocation)) {\n\t\t\textension.collector.error(localize(\n\t\t\t\t'invalid.path.1',\n\t\t\t\t\"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n\t\t\t\textension.description.name, snippetLocation.path, extensionLocation.path\n\t\t\t));\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tlanguage: snippet.language,\n\t\t\tlocation: snippetLocation\n\t\t};\n\t}\n\n\texport const snippetsContribution: IJSONSchema = {\n\t\tdescription: localize('vscode.extension.contributes.snippets', 'Contributes snippets.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ language: '', path: '' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { language: '${1:id}', path: './snippets/${2:id}.json.' } }],\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.snippets-language', 'Language identifier for which this snippet is contributed to.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tpath: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.snippets-path', 'Path of the snippets file. The path is relative to the extension folder and typically starts with \\'./snippets/\\'.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\texport const point = ExtensionsRegistry.registerExtensionPoint<snippetExt.ISnippetsExtensionPoint[]>({\n\t\textensionPoint: 'snippets',\n\t\tdeps: [languagesExtPoint],\n\t\tjsonSchema: snippetExt.snippetsContribution\n\t});\n}\n\nfunction watch(service: IFileService, resource: URI, callback: () => any): IDisposable {\n\treturn combinedDisposable(\n\t\tservice.watch(resource),\n\t\tservice.onDidFilesChange(e => {\n\t\t\tif (e.affects(resource)) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t})\n\t);\n}\n\nclass SnippetEnablement {\n\n\tprivate static _key = 'snippets.ignoredSnippets';\n\n\tprivate readonly _ignored: Set<string>;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\n\t\tconst raw = _storageService.get(SnippetEnablement._key, StorageScope.PROFILE, '');\n\t\tlet data: string[] | undefined;\n\t\ttry {\n\t\t\tdata = JSON.parse(raw);\n\t\t} catch { }\n\n\t\tthis._ignored = isStringArray(data) ? new Set(data) : new Set();\n\t}\n\n\tisIgnored(id: string): boolean {\n\t\treturn this._ignored.has(id);\n\t}\n\n\tupdateIgnored(id: string, value: boolean): void {\n\t\tlet changed = false;\n\t\tif (this._ignored.has(id) && !value) {\n\t\t\tthis._ignored.delete(id);\n\t\t\tchanged = true;\n\t\t} else if (!this._ignored.has(id) && value) {\n\t\t\tthis._ignored.add(id);\n\t\t\tchanged = true;\n\t\t}\n\t\tif (changed) {\n\t\t\tthis._storageService.store(SnippetEnablement._key, JSON.stringify(Array.from(this._ignored)), StorageScope.PROFILE, StorageTarget.USER);\n\t\t}\n\t}\n}\n\nclass SnippetUsageTimestamps {\n\n\tprivate static _key = 'snippets.usageTimestamps';\n\n\tprivate readonly _usages: Map<string, number>;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\n\t\tconst raw = _storageService.get(SnippetUsageTimestamps._key, StorageScope.PROFILE, '');\n\t\tlet data: [string, number][] | undefined;\n\t\ttry {\n\t\t\tdata = JSON.parse(raw);\n\t\t} catch {\n\t\t\tdata = [];\n\t\t}\n\n\t\tthis._usages = Array.isArray(data) ? new Map(data) : new Map();\n\t}\n\n\tgetUsageTimestamp(id: string): number | undefined {\n\t\treturn this._usages.get(id);\n\t}\n\n\tupdateUsageTimestamp(id: string): void {\n\t\t// map uses insertion order, we want most recent at the end\n\t\tthis._usages.delete(id);\n\t\tthis._usages.set(id, Date.now());\n\n\t\t// persist last 100 item\n\t\tconst all = [...this._usages].slice(-100);\n\t\tthis._storageService.store(SnippetUsageTimestamps._key, JSON.stringify(all), StorageScope.PROFILE, StorageTarget.USER);\n\t}\n}\n\nexport class SnippetsService implements ISnippetsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _pendingWork: Promise<any>[] = [];\n\tprivate readonly _files = new ResourceMap<SnippetFile>();\n\tprivate readonly _enablement: SnippetEnablement;\n\tprivate readonly _usageTimestamps: SnippetUsageTimestamps;\n\n\tconstructor(\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ITextFileService private readonly _textfileService: ITextFileService,\n\t\t@IExtensionResourceLoaderService private readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILanguageConfigurationService languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tthis._pendingWork.push(Promise.resolve(lifecycleService.when(LifecyclePhase.Restored).then(() => {\n\t\t\tthis._initExtensionSnippets();\n\t\t\tthis._initUserSnippets();\n\t\t\tthis._initWorkspaceSnippets();\n\t\t})));\n\n\t\tsetSnippetSuggestSupport(new SnippetCompletionProvider(this._languageService, this, languageConfigurationService));\n\n\t\tthis._enablement = instantiationService.createInstance(SnippetEnablement);\n\t\tthis._usageTimestamps = instantiationService.createInstance(SnippetUsageTimestamps);\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tisEnabled(snippet: Snippet): boolean {\n\t\treturn !this._enablement.isIgnored(snippet.snippetIdentifier);\n\t}\n\n\tupdateEnablement(snippet: Snippet, enabled: boolean): void {\n\t\tthis._enablement.updateIgnored(snippet.snippetIdentifier, !enabled);\n\t}\n\n\tupdateUsageTimestamp(snippet: Snippet): void {\n\t\tthis._usageTimestamps.updateUsageTimestamp(snippet.snippetIdentifier);\n\t}\n\n\tprivate _joinSnippets(): Promise<any> {\n\t\tconst promises = this._pendingWork.slice(0);\n\t\tthis._pendingWork.length = 0;\n\t\treturn Promise.all(promises);\n\t}\n\n\tasync getSnippetFiles(): Promise<Iterable<SnippetFile>> {\n\t\tawait this._joinSnippets();\n\t\treturn this._files.values();\n\t}\n\n\tasync getSnippets(languageId: string | undefined, opts?: ISnippetGetOptions): Promise<Snippet[]> {\n\t\tawait this._joinSnippets();\n\n\t\tconst result: Snippet[] = [];\n\t\tconst promises: Promise<any>[] = [];\n\n\t\tif (languageId) {\n\t\t\tif (this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\t\tfor (const file of this._files.values()) {\n\t\t\t\t\tpromises.push(file.load()\n\t\t\t\t\t\t.then(file => file.select(languageId, result))\n\t\t\t\t\t\t.catch(err => this._logService.error(err, file.location.toString()))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const file of this._files.values()) {\n\t\t\t\tpromises.push(file.load()\n\t\t\t\t\t.then(file => insertInto(result, result.length, file.data))\n\t\t\t\t\t.catch(err => this._logService.error(err, file.location.toString()))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\t\treturn this._filterAndSortSnippets(result, opts);\n\t}\n\n\tgetSnippetsSync(languageId: string, opts?: ISnippetGetOptions): Snippet[] {\n\t\tconst result: Snippet[] = [];\n\t\tif (this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\tfor (const file of this._files.values()) {\n\t\t\t\t// kick off loading (which is a noop in case it's already loaded)\n\t\t\t\t// and optimistically collect snippets\n\t\t\t\tfile.load().catch(_err => { /*ignore*/ });\n\t\t\t\tfile.select(languageId, result);\n\t\t\t}\n\t\t}\n\t\treturn this._filterAndSortSnippets(result, opts);\n\t}\n\n\tprivate _filterAndSortSnippets(snippets: Snippet[], opts?: ISnippetGetOptions): Snippet[] {\n\n\t\tconst result: Snippet[] = [];\n\n\t\tfor (const snippet of snippets) {\n\t\t\tif (!snippet.prefix && !opts?.includeNoPrefixSnippets) {\n\t\t\t\t// prefix or no-prefix wanted\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!this.isEnabled(snippet) && !opts?.includeDisabledSnippets) {\n\t\t\t\t// enabled or disabled wanted\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (typeof opts?.fileTemplateSnippets === 'boolean' && opts.fileTemplateSnippets !== snippet.isFileTemplate) {\n\t\t\t\t// isTopLevel requested but mismatching\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult.push(snippet);\n\t\t}\n\n\n\t\treturn result.sort((a, b) => {\n\t\t\tlet result = 0;\n\t\t\tif (!opts?.noRecencySort) {\n\t\t\t\tconst val1 = this._usageTimestamps.getUsageTimestamp(a.snippetIdentifier) ?? -1;\n\t\t\t\tconst val2 = this._usageTimestamps.getUsageTimestamp(b.snippetIdentifier) ?? -1;\n\t\t\t\tresult = val2 - val1;\n\t\t\t}\n\t\t\tif (result === 0) {\n\t\t\t\tresult = this._compareSnippet(a, b);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tprivate _compareSnippet(a: Snippet, b: Snippet): number {\n\t\tif (a.snippetSource < b.snippetSource) {\n\t\t\treturn -1;\n\t\t} else if (a.snippetSource > b.snippetSource) {\n\t\t\treturn 1;\n\t\t} else if (a.source < b.source) {\n\t\t\treturn -1;\n\t\t} else if (a.source > b.source) {\n\t\t\treturn 1;\n\t\t} else if (a.name > b.name) {\n\t\t\treturn 1;\n\t\t} else if (a.name < b.name) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t// --- loading, watching\n\n\tprivate _initExtensionSnippets(): void {\n\t\tsnippetExt.point.setHandler(extensions => {\n\n\t\t\tfor (const [key, value] of this._files) {\n\t\t\t\tif (value.source === SnippetSource.Extension) {\n\t\t\t\t\tthis._files.delete(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tfor (const contribution of extension.value) {\n\t\t\t\t\tconst validContribution = snippetExt.toValidSnippet(extension, contribution, this._languageService);\n\t\t\t\t\tif (!validContribution) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst file = this._files.get(validContribution.location);\n\t\t\t\t\tif (file) {\n\t\t\t\t\t\tif (file.defaultScopes) {\n\t\t\t\t\t\t\tfile.defaultScopes.push(validContribution.language);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfile.defaultScopes = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst file = new SnippetFile(SnippetSource.Extension, validContribution.location, validContribution.language ? [validContribution.language] : undefined, extension.description, this._fileService, this._extensionResourceLoaderService);\n\t\t\t\t\t\tthis._files.set(file.location, file);\n\n\t\t\t\t\t\tif (this._environmentService.isExtensionDevelopment) {\n\t\t\t\t\t\t\tfile.load().then(file => {\n\t\t\t\t\t\t\t\t// warn about bad tabstop/variable usage\n\t\t\t\t\t\t\t\tif (file.data.some(snippet => snippet.isBogous)) {\n\t\t\t\t\t\t\t\t\textension.collector.warn(localize(\n\t\t\t\t\t\t\t\t\t\t'badVariableUse',\n\t\t\t\t\t\t\t\t\t\t\"One or more snippets from the extension '{0}' very likely confuse snippet-variables and snippet-placeholders (see https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax for more details)\",\n\t\t\t\t\t\t\t\t\t\textension.description.name\n\t\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, err => {\n\t\t\t\t\t\t\t\t// generic error\n\t\t\t\t\t\t\t\textension.collector.warn(localize(\n\t\t\t\t\t\t\t\t\t'badFile',\n\t\t\t\t\t\t\t\t\t\"The snippet file \\\"{0}\\\" could not be read.\",\n\t\t\t\t\t\t\t\t\tfile.location.toString()\n\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _initWorkspaceSnippets(): void {\n\t\t// workspace stuff\n\t\tconst disposables = new DisposableStore();\n\t\tconst updateWorkspaceSnippets = () => {\n\t\t\tdisposables.clear();\n\t\t\tthis._pendingWork.push(this._initWorkspaceFolderSnippets(this._contextService.getWorkspace(), disposables));\n\t\t};\n\t\tthis._disposables.add(disposables);\n\t\tthis._disposables.add(this._contextService.onDidChangeWorkspaceFolders(updateWorkspaceSnippets));\n\t\tthis._disposables.add(this._contextService.onDidChangeWorkbenchState(updateWorkspaceSnippets));\n\t\tupdateWorkspaceSnippets();\n\t}\n\n\tprivate async _initWorkspaceFolderSnippets(workspace: IWorkspace, bucket: DisposableStore): Promise<any> {\n\t\tconst promises = workspace.folders.map(async folder => {\n\t\t\tconst snippetFolder = folder.toResource('.vscode');\n\t\t\tconst value = await this._fileService.exists(snippetFolder);\n\t\t\tif (value) {\n\t\t\t\tthis._initFolderSnippets(SnippetSource.Workspace, snippetFolder, bucket);\n\t\t\t} else {\n\t\t\t\t// watch\n\t\t\t\tbucket.add(this._fileService.onDidFilesChange(e => {\n\t\t\t\t\tif (e.contains(snippetFolder, FileChangeType.ADDED)) {\n\t\t\t\t\t\tthis._initFolderSnippets(SnippetSource.Workspace, snippetFolder, bucket);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t\tawait Promise.all(promises);\n\t}\n\n\tprivate async _initUserSnippets(): Promise<any> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst updateUserSnippets = async () => {\n\t\t\tdisposables.clear();\n\t\t\tconst userSnippetsFolder = this._userDataProfileService.currentProfile.snippetsHome;\n\t\t\tawait this._fileService.createFolder(userSnippetsFolder);\n\t\t\tawait this._initFolderSnippets(SnippetSource.User, userSnippetsFolder, disposables);\n\t\t};\n\t\tthis._disposables.add(disposables);\n\t\tthis._disposables.add(this._userDataProfileService.onDidChangeCurrentProfile(e => e.join((async () => {\n\t\t\tthis._pendingWork.push(updateUserSnippets());\n\t\t})())));\n\t\tawait updateUserSnippets();\n\t}\n\n\tprivate _initFolderSnippets(source: SnippetSource, folder: URI, bucket: DisposableStore): Promise<any> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst addFolderSnippets = async () => {\n\t\t\tdisposables.clear();\n\t\t\tif (!await this._fileService.exists(folder)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst stat = await this._fileService.resolve(folder);\n\t\t\t\tfor (const entry of stat.children || []) {\n\t\t\t\t\tdisposables.add(this._addSnippetFile(entry.resource, source));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(`Failed snippets from folder '${folder.toString()}'`, err);\n\t\t\t}\n\t\t};\n\n\t\tbucket.add(this._textfileService.files.onDidSave(e => {\n\t\t\tif (resources.isEqualOrParent(e.model.resource, folder)) {\n\t\t\t\taddFolderSnippets();\n\t\t\t}\n\t\t}));\n\t\tbucket.add(watch(this._fileService, folder, addFolderSnippets));\n\t\tbucket.add(disposables);\n\t\treturn addFolderSnippets();\n\t}\n\n\tprivate _addSnippetFile(uri: URI, source: SnippetSource): IDisposable {\n\t\tconst ext = resources.extname(uri);\n\t\tif (source === SnippetSource.User && ext === '.json') {\n\t\t\tconst langName = resources.basename(uri).replace(/\\.json/, '');\n\t\t\tthis._files.set(uri, new SnippetFile(source, uri, [langName], undefined, this._fileService, this._extensionResourceLoaderService));\n\t\t} else if (ext === '.code-snippets') {\n\t\t\tthis._files.set(uri, new SnippetFile(source, uri, undefined, undefined, this._fileService, this._extensionResourceLoaderService));\n\t\t}\n\t\treturn {\n\t\t\tdispose: () => this._files.delete(uri)\n\t\t};\n\t}\n}\n\n\nexport interface ISimpleModel {\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport function getNonWhitespacePrefix(model: ISimpleModel, position: Position): string {\n\t/**\n\t * Do not analyze more characters\n\t */\n\tconst MAX_PREFIX_LENGTH = 100;\n\n\tconst line = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n\n\tconst minChIndex = Math.max(0, line.length - MAX_PREFIX_LENGTH);\n\tfor (let chIndex = line.length - 1; chIndex >= minChIndex; chIndex--) {\n\t\tconst ch = line.charAt(chIndex);\n\n\t\tif (/\\s/.test(ch)) {\n\t\t\treturn line.substr(chIndex + 1);\n\t\t}\n\t}\n\n\tif (minChIndex === 0) {\n\t\treturn line;\n\t}\n\n\treturn '';\n}\n"],
  "mappings": "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",
  "names": ["snippetExt", "file", "result"]
}
