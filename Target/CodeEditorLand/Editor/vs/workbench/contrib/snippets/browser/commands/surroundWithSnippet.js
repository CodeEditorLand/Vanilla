import{EditorContextKeys as c}from"../../../../../editor/common/editorContextKeys.js";import{SnippetController2 as d}from"../../../../../editor/contrib/snippet/browser/snippetController2.js";import{localize2 as l}from"../../../../../nls.js";import{IClipboardService as S}from"../../../../../platform/clipboard/common/clipboardService.js";import{ContextKeyExpr as u}from"../../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as f}from"../../../../../platform/instantiation/common/instantiation.js";import{pickSnippet as g}from"../snippetPicker.js";import{ISnippetsService as I}from"../snippets.js";import{SnippetEditorAction as x}from"./abstractSnippetsActions.js";async function y(m,e,t,p){const{lineNumber:o,column:s}=t;e.tokenization.tokenizeIfCheap(o);const r=e.getLanguageIdAtPosition(o,s);return(await m.getSnippets(r,{includeNoPrefixSnippets:!0,includeDisabledSnippets:p})).filter(n=>n.usesSelection)}class a extends x{static options={id:"editor.action.surroundWithSnippet",title:l("label","Surround with Snippet...")};constructor(){super({...a.options,precondition:u.and(c.writable,c.hasNonEmptySelection),f1:!0})}async runEditorCommand(e,t){if(!t.hasModel())return;const p=e.get(f),o=e.get(I),s=e.get(S),r=await y(o,t.getModel(),t.getPosition(),!0);if(!r.length)return;const i=await p.invokeFunction(g,r);if(!i)return;let n;i.needsClipboard&&(n=await s.readText()),t.focus(),d.get(t)?.insert(i.codeSnippet,{clipboardText:n}),o.updateUsageTimestamp(i)}}export{a as SurroundWithSnippetEditorAction,y as getSurroundableSnippets};
