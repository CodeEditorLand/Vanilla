import{groupBy as g,isFalsyOrEmpty as u}from"../../../../../base/common/arrays.js";import{compare as d}from"../../../../../base/common/strings.js";import{getCodeEditor as m}from"../../../../../editor/browser/editorBrowser.js";import{ILanguageService as f}from"../../../../../editor/common/languages/language.js";import{SnippetController2 as S}from"../../../../../editor/contrib/snippet/browser/snippetController2.js";import{localize as I,localize2 as k}from"../../../../../nls.js";import{IQuickInputService as y}from"../../../../../platform/quickinput/common/quickInput.js";import{IEditorService as v}from"../../../../services/editor/common/editorService.js";import{ISnippetsService as h}from"../snippets.js";import{SnippetsAction as L}from"./abstractSnippetsActions.js";class l extends L{static Id="workbench.action.populateFileFromSnippet";constructor(){super({id:l.Id,title:k("label","Fill File with Snippet"),f1:!0})}async run(i){const a=i.get(h),s=i.get(y),r=i.get(v),p=i.get(f),t=m(r.activeTextEditorControl);if(!t||!t.hasModel())return;const c=await a.getSnippets(void 0,{fileTemplateSnippets:!0,noRecencySort:!0,includeNoPrefixSnippets:!0});if(c.length===0)return;const e=await this._pick(s,p,c);e&&t.hasModel()&&(S.get(t)?.apply([{range:t.getModel().getFullModelRange(),template:e.snippet.body}]),t.getModel().setLanguage(p.createById(e.langId),l.Id),t.focus())}async _pick(i,a,s){const r=[];for(const e of s)if(u(e.scopes))r.push({langId:"",snippet:e});else for(const n of e.scopes)r.push({langId:n,snippet:e});const p=[],t=g(r,(e,n)=>d(e.langId,n.langId));for(const e of t){let n=!0;for(const o of e)n&&(p.push({type:"separator",label:a.getLanguageName(o.langId)??o.langId}),n=!1),p.push({snippet:o,label:o.snippet.prefix||o.snippet.name,detail:o.snippet.description})}return(await i.pick(p,{placeHolder:I("placeholder","Select a snippet"),matchOnDetail:!0}))?.snippet}}export{l as ApplyFileSnippetAction};
