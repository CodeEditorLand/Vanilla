{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isPatternInWord } from \"../../../../base/common/filters.js\";\nimport { MarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport { compare, compareSubstring } from \"../../../../base/common/strings.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { type IRange, Range } from \"../../../../editor/common/core/range.js\";\nimport type { IWordAtPosition } from \"../../../../editor/common/core/wordHelper.js\";\nimport {\n\ttype Command,\n\ttype CompletionContext,\n\ttype CompletionItem,\n\tCompletionItemInsertTextRule,\n\tCompletionItemKind,\n\ttype CompletionItemLabel,\n\ttype CompletionItemProvider,\n\ttype CompletionList,\n\tCompletionTriggerKind,\n} from \"../../../../editor/common/languages.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { ILanguageConfigurationService } from \"../../../../editor/common/languages/languageConfigurationRegistry.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { SnippetParser } from \"../../../../editor/contrib/snippet/browser/snippetParser.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport type { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { ISnippetsService } from \"./snippets.js\";\nimport { Snippet, SnippetSource } from \"./snippetsFile.js\";\n\nconst markSnippetAsUsed = \"_snippet.markAsUsed\";\n\nCommandsRegistry.registerCommand(markSnippetAsUsed, (accessor, ...args) => {\n\tconst snippetsService = accessor.get(ISnippetsService);\n\tconst [first] = args;\n\tif (first instanceof Snippet) {\n\t\tsnippetsService.updateUsageTimestamp(first);\n\t}\n});\n\nexport class SnippetCompletion implements CompletionItem {\n\tlabel: CompletionItemLabel;\n\tdetail: string;\n\tinsertText: string;\n\tdocumentation?: MarkdownString;\n\trange: IRange | { insert: IRange; replace: IRange };\n\tsortText: string;\n\tkind: CompletionItemKind;\n\tinsertTextRules: CompletionItemInsertTextRule;\n\textensionId?: ExtensionIdentifier;\n\tcommand?: Command;\n\n\tconstructor(\n\t\treadonly snippet: Snippet,\n\t\trange: IRange | { insert: IRange; replace: IRange },\n\t) {\n\t\tthis.label = { label: snippet.prefix, description: snippet.name };\n\t\tthis.detail = localize(\n\t\t\t\"detail.snippet\",\n\t\t\t\"{0} ({1})\",\n\t\t\tsnippet.description || snippet.name,\n\t\t\tsnippet.source,\n\t\t);\n\t\tthis.insertText = snippet.codeSnippet;\n\t\tthis.extensionId = snippet.extensionId;\n\t\tthis.range = range;\n\t\tthis.sortText = `${snippet.snippetSource === SnippetSource.Extension ? \"z\" : \"a\"}-${snippet.prefix}`;\n\t\tthis.kind = CompletionItemKind.Snippet;\n\t\tthis.insertTextRules = CompletionItemInsertTextRule.InsertAsSnippet;\n\t\tthis.command = {\n\t\t\tid: markSnippetAsUsed,\n\t\t\ttitle: \"\",\n\t\t\targuments: [snippet],\n\t\t};\n\t}\n\n\tresolve(): this {\n\t\tthis.documentation = new MarkdownString().appendCodeblock(\n\t\t\t\"\",\n\t\t\tSnippetParser.asInsertText(this.snippet.codeSnippet),\n\t\t);\n\t\treturn this;\n\t}\n\n\tstatic compareByLabel(a: SnippetCompletion, b: SnippetCompletion): number {\n\t\treturn compare(a.label.label, b.label.label);\n\t}\n}\n\ninterface ISnippetPosition {\n\tstartColumn: number;\n\tprefixLow: string;\n\tisWord: boolean;\n}\n\nexport class SnippetCompletionProvider implements CompletionItemProvider {\n\treadonly _debugDisplayName = \"snippetCompletions\";\n\n\tconstructor(\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ISnippetsService private readonly _snippets: ISnippetsService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\t//\n\t}\n\n\tasync provideCompletionItems(\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t\tcontext: CompletionContext,\n\t): Promise<CompletionList> {\n\t\tconst sw = new StopWatch();\n\n\t\t// compute all snippet anchors: word starts and every non word character\n\t\tconst line = position.lineNumber;\n\t\tconst word = model.getWordAtPosition(position) ?? {\n\t\t\tstartColumn: position.column,\n\t\t\tendColumn: position.column,\n\t\t\tword: \"\",\n\t\t};\n\n\t\tconst lineContentLow = model\n\t\t\t.getLineContent(position.lineNumber)\n\t\t\t.toLowerCase();\n\t\tconst lineContentWithWordLow = lineContentLow.substring(\n\t\t\t0,\n\t\t\tword.startColumn + word.word.length - 1,\n\t\t);\n\t\tconst anchors = this._computeSnippetPositions(\n\t\t\tmodel,\n\t\t\tline,\n\t\t\tword,\n\t\t\tlineContentWithWordLow,\n\t\t);\n\n\t\t// loop over possible snippets and match them against the anchors\n\t\tconst columnOffset = position.column - 1;\n\t\tconst triggerCharacterLow =\n\t\t\tcontext.triggerCharacter?.toLowerCase() ?? \"\";\n\t\tconst languageId = this._getLanguageIdAtPosition(model, position);\n\t\tconst languageConfig =\n\t\t\tthis._languageConfigurationService.getLanguageConfiguration(\n\t\t\t\tlanguageId,\n\t\t\t);\n\t\tconst snippets = new Set(await this._snippets.getSnippets(languageId));\n\t\tconst suggestions: SnippetCompletion[] = [];\n\n\t\tfor (const snippet of snippets) {\n\t\t\tif (\n\t\t\t\tcontext.triggerKind ===\n\t\t\t\t\tCompletionTriggerKind.TriggerCharacter &&\n\t\t\t\t!snippet.prefixLow.startsWith(triggerCharacterLow)\n\t\t\t) {\n\t\t\t\t// strict -> when having trigger characters they must prefix-match\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet candidate: ISnippetPosition | undefined;\n\t\t\tfor (const anchor of anchors) {\n\t\t\t\tif (\n\t\t\t\t\tanchor.prefixLow.match(/^\\s/) &&\n\t\t\t\t\t!snippet.prefixLow.match(/^\\s/)\n\t\t\t\t) {\n\t\t\t\t\t// only allow whitespace anchor when snippet prefix starts with whitespace too\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tisPatternInWord(\n\t\t\t\t\t\tanchor.prefixLow,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tanchor.prefixLow.length,\n\t\t\t\t\t\tsnippet.prefixLow,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tsnippet.prefixLow.length,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcandidate = anchor;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst pos = candidate.startColumn - 1;\n\n\t\t\tconst prefixRestLen =\n\t\t\t\tsnippet.prefixLow.length - (columnOffset - pos);\n\t\t\tconst endsWithPrefixRest = compareSubstring(\n\t\t\t\tlineContentLow,\n\t\t\t\tsnippet.prefixLow,\n\t\t\t\tcolumnOffset,\n\t\t\t\tcolumnOffset + prefixRestLen,\n\t\t\t\tcolumnOffset - pos,\n\t\t\t);\n\t\t\tconst startPosition = position.with(undefined, pos + 1);\n\n\t\t\tlet endColumn =\n\t\t\t\tendsWithPrefixRest === 0\n\t\t\t\t\t? position.column + prefixRestLen\n\t\t\t\t\t: position.column;\n\n\t\t\t// First check if there is anything to the right of the cursor\n\t\t\tif (columnOffset < lineContentLow.length) {\n\t\t\t\tconst autoClosingPairs = languageConfig.getAutoClosingPairs();\n\t\t\t\tconst standardAutoClosingPairConditionals =\n\t\t\t\t\tautoClosingPairs.autoClosingPairsCloseSingleChar.get(\n\t\t\t\t\t\tlineContentLow[columnOffset],\n\t\t\t\t\t);\n\t\t\t\t// If the character to the right of the cursor is a closing character of an autoclosing pair\n\t\t\t\tif (\n\t\t\t\t\tstandardAutoClosingPairConditionals?.some(\n\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\t// and the start position is the opening character of an autoclosing pair\n\t\t\t\t\t\t\tp.open ===\n\t\t\t\t\t\t\t\tlineContentLow[startPosition.column - 1] &&\n\t\t\t\t\t\t\t// and the snippet prefix contains the opening and closing pair at its edges\n\t\t\t\t\t\t\tsnippet.prefix.startsWith(p.open) &&\n\t\t\t\t\t\t\tsnippet.prefix[snippet.prefix.length - 1] ===\n\t\t\t\t\t\t\t\tp.close,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// Eat the character that was likely inserted because of auto-closing pairs\n\t\t\t\t\tendColumn++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst replace = Range.fromPositions(\n\t\t\t\t{ lineNumber: line, column: candidate.startColumn },\n\t\t\t\t{ lineNumber: line, column: endColumn },\n\t\t\t);\n\t\t\tconst insert = replace.setEndPosition(line, position.column);\n\n\t\t\tsuggestions.push(\n\t\t\t\tnew SnippetCompletion(snippet, { replace, insert }),\n\t\t\t);\n\t\t\tsnippets.delete(snippet);\n\t\t}\n\n\t\t// add remaing snippets when the current prefix ends in whitespace or when line is empty\n\t\t// and when not having a trigger character\n\t\tif (\n\t\t\t!triggerCharacterLow &&\n\t\t\t(/\\s/.test(\n\t\t\t\tlineContentLow[position.column - 2],\n\t\t\t) /*end in whitespace */ ||\n\t\t\t\t!lineContentLow) /*empty line*/\n\t\t) {\n\t\t\tfor (const snippet of snippets) {\n\t\t\t\tconst insert = Range.fromPositions(position);\n\t\t\t\tconst replace =\n\t\t\t\t\tlineContentLow.indexOf(snippet.prefixLow, columnOffset) ===\n\t\t\t\t\tcolumnOffset\n\t\t\t\t\t\t? insert.setEndPosition(\n\t\t\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\t\t\tposition.column + snippet.prefixLow.length,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: insert;\n\t\t\t\tsuggestions.push(\n\t\t\t\t\tnew SnippetCompletion(snippet, { replace, insert }),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// dismbiguate suggestions with same labels\n\t\tthis._disambiguateSnippets(suggestions);\n\n\t\treturn {\n\t\t\tsuggestions,\n\t\t\tduration: sw.elapsed(),\n\t\t};\n\t}\n\n\tprivate _disambiguateSnippets(suggestions: SnippetCompletion[]) {\n\t\tsuggestions.sort(SnippetCompletion.compareByLabel);\n\t\tfor (let i = 0; i < suggestions.length; i++) {\n\t\t\tconst item = suggestions[i];\n\t\t\tlet to = i + 1;\n\t\t\tfor (\n\t\t\t\t;\n\t\t\t\tto < suggestions.length && item.label === suggestions[to].label;\n\t\t\t\tto++\n\t\t\t) {\n\t\t\t\tsuggestions[to].label.label = localize(\n\t\t\t\t\t\"snippetSuggest.longLabel\",\n\t\t\t\t\t\"{0}, {1}\",\n\t\t\t\t\tsuggestions[to].label.label,\n\t\t\t\t\tsuggestions[to].snippet.name,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (to > i + 1) {\n\t\t\t\tsuggestions[i].label.label = localize(\n\t\t\t\t\t\"snippetSuggest.longLabel\",\n\t\t\t\t\t\"{0}, {1}\",\n\t\t\t\t\tsuggestions[i].label.label,\n\t\t\t\t\tsuggestions[i].snippet.name,\n\t\t\t\t);\n\t\t\t\ti = to;\n\t\t\t}\n\t\t}\n\t}\n\n\tresolveCompletionItem(item: CompletionItem): CompletionItem {\n\t\treturn item instanceof SnippetCompletion ? item.resolve() : item;\n\t}\n\n\tprivate _computeSnippetPositions(\n\t\tmodel: ITextModel,\n\t\tline: number,\n\t\tword: IWordAtPosition,\n\t\tlineContentWithWordLow: string,\n\t): ISnippetPosition[] {\n\t\tconst result: ISnippetPosition[] = [];\n\n\t\tfor (let column = 1; column < word.startColumn; column++) {\n\t\t\tconst wordInfo = model.getWordAtPosition(\n\t\t\t\tnew Position(line, column),\n\t\t\t);\n\t\t\tresult.push({\n\t\t\t\tstartColumn: column,\n\t\t\t\tprefixLow: lineContentWithWordLow.substring(column - 1),\n\t\t\t\tisWord: Boolean(wordInfo),\n\t\t\t});\n\t\t\tif (wordInfo) {\n\t\t\t\tcolumn = wordInfo.endColumn;\n\n\t\t\t\t// the character right after a word is an anchor, always\n\t\t\t\tresult.push({\n\t\t\t\t\tstartColumn: wordInfo.endColumn,\n\t\t\t\t\tprefixLow: lineContentWithWordLow.substring(\n\t\t\t\t\t\twordInfo.endColumn - 1,\n\t\t\t\t\t),\n\t\t\t\t\tisWord: false,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (word.word.length > 0 || result.length === 0) {\n\t\t\tresult.push({\n\t\t\t\tstartColumn: word.startColumn,\n\t\t\t\tprefixLow: lineContentWithWordLow.substring(\n\t\t\t\t\tword.startColumn - 1,\n\t\t\t\t),\n\t\t\t\tisWord: true,\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getLanguageIdAtPosition(\n\t\tmodel: ITextModel,\n\t\tposition: Position,\n\t): string {\n\t\t// validate the `languageId` to ensure this is a user\n\t\t// facing language with a name and the chance to have\n\t\t// snippets, else fall back to the outer language\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tlet languageId = model.getLanguageIdAtPosition(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t);\n\t\tif (!this._languageService.getLanguageName(languageId)) {\n\t\t\tlanguageId = model.getLanguageId();\n\t\t}\n\t\treturn languageId;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
