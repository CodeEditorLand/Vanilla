{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { compare, compareSubstring } from '../../../../base/common/strings.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { IRange, Range } from '../../../../editor/common/core/range.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { CompletionItem, CompletionItemKind, CompletionItemProvider, CompletionList, CompletionItemInsertTextRule, CompletionContext, CompletionTriggerKind, CompletionItemLabel, Command } from '../../../../editor/common/languages.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { SnippetParser } from '../../../../editor/contrib/snippet/browser/snippetParser.js';\nimport { localize } from '../../../../nls.js';\nimport { ISnippetsService } from './snippets.js';\nimport { Snippet, SnippetSource } from './snippetsFile.js';\nimport { isPatternInWord } from '../../../../base/common/filters.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageConfigurationService } from '../../../../editor/common/languages/languageConfigurationRegistry.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IWordAtPosition } from '../../../../editor/common/core/wordHelper.js';\n\n\nconst markSnippetAsUsed = '_snippet.markAsUsed';\n\nCommandsRegistry.registerCommand(markSnippetAsUsed, (accessor, ...args) => {\n\tconst snippetsService = accessor.get(ISnippetsService);\n\tconst [first] = args;\n\tif (first instanceof Snippet) {\n\t\tsnippetsService.updateUsageTimestamp(first);\n\t}\n});\n\nexport class SnippetCompletion implements CompletionItem {\n\n\tlabel: CompletionItemLabel;\n\tdetail: string;\n\tinsertText: string;\n\tdocumentation?: MarkdownString;\n\trange: IRange | { insert: IRange; replace: IRange };\n\tsortText: string;\n\tkind: CompletionItemKind;\n\tinsertTextRules: CompletionItemInsertTextRule;\n\textensionId?: ExtensionIdentifier;\n\tcommand?: Command;\n\n\tconstructor(\n\t\treadonly snippet: Snippet,\n\t\trange: IRange | { insert: IRange; replace: IRange },\n\t) {\n\t\tthis.label = { label: snippet.prefix, description: snippet.name };\n\t\tthis.detail = localize('detail.snippet', \"{0} ({1})\", snippet.description || snippet.name, snippet.source);\n\t\tthis.insertText = snippet.codeSnippet;\n\t\tthis.extensionId = snippet.extensionId;\n\t\tthis.range = range;\n\t\tthis.sortText = `${snippet.snippetSource === SnippetSource.Extension ? 'z' : 'a'}-${snippet.prefix}`;\n\t\tthis.kind = CompletionItemKind.Snippet;\n\t\tthis.insertTextRules = CompletionItemInsertTextRule.InsertAsSnippet;\n\t\tthis.command = { id: markSnippetAsUsed, title: '', arguments: [snippet] };\n\t}\n\n\tresolve(): this {\n\t\tthis.documentation = new MarkdownString().appendCodeblock('', SnippetParser.asInsertText(this.snippet.codeSnippet));\n\t\treturn this;\n\t}\n\n\tstatic compareByLabel(a: SnippetCompletion, b: SnippetCompletion): number {\n\t\treturn compare(a.label.label, b.label.label);\n\t}\n}\n\ninterface ISnippetPosition {\n\tstartColumn: number;\n\tprefixLow: string;\n\tisWord: boolean;\n}\n\nexport class SnippetCompletionProvider implements CompletionItemProvider {\n\n\treadonly _debugDisplayName = 'snippetCompletions';\n\n\tconstructor(\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ISnippetsService private readonly _snippets: ISnippetsService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\t//\n\t}\n\n\tasync provideCompletionItems(model: ITextModel, position: Position, context: CompletionContext): Promise<CompletionList> {\n\n\t\tconst sw = new StopWatch();\n\n\t\t// compute all snippet anchors: word starts and every non word character\n\t\tconst line = position.lineNumber;\n\t\tconst word = model.getWordAtPosition(position) ?? { startColumn: position.column, endColumn: position.column, word: '' };\n\n\t\tconst lineContentLow = model.getLineContent(position.lineNumber).toLowerCase();\n\t\tconst lineContentWithWordLow = lineContentLow.substring(0, word.startColumn + word.word.length - 1);\n\t\tconst anchors = this._computeSnippetPositions(model, line, word, lineContentWithWordLow);\n\n\t\t// loop over possible snippets and match them against the anchors\n\t\tconst columnOffset = position.column - 1;\n\t\tconst triggerCharacterLow = context.triggerCharacter?.toLowerCase() ?? '';\n\t\tconst languageId = this._getLanguageIdAtPosition(model, position);\n\t\tconst languageConfig = this._languageConfigurationService.getLanguageConfiguration(languageId);\n\t\tconst snippets = new Set(await this._snippets.getSnippets(languageId));\n\t\tconst suggestions: SnippetCompletion[] = [];\n\n\t\tfor (const snippet of snippets) {\n\n\t\t\tif (context.triggerKind === CompletionTriggerKind.TriggerCharacter && !snippet.prefixLow.startsWith(triggerCharacterLow)) {\n\t\t\t\t// strict -> when having trigger characters they must prefix-match\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet candidate: ISnippetPosition | undefined;\n\t\t\tfor (const anchor of anchors) {\n\n\t\t\t\tif (anchor.prefixLow.match(/^\\s/) && !snippet.prefixLow.match(/^\\s/)) {\n\t\t\t\t\t// only allow whitespace anchor when snippet prefix starts with whitespace too\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (isPatternInWord(anchor.prefixLow, 0, anchor.prefixLow.length, snippet.prefixLow, 0, snippet.prefixLow.length)) {\n\t\t\t\t\tcandidate = anchor;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst pos = candidate.startColumn - 1;\n\n\t\t\tconst prefixRestLen = snippet.prefixLow.length - (columnOffset - pos);\n\t\t\tconst endsWithPrefixRest = compareSubstring(lineContentLow, snippet.prefixLow, columnOffset, columnOffset + prefixRestLen, columnOffset - pos);\n\t\t\tconst startPosition = position.with(undefined, pos + 1);\n\n\t\t\tlet endColumn = endsWithPrefixRest === 0 ? position.column + prefixRestLen : position.column;\n\n\t\t\t// First check if there is anything to the right of the cursor\n\t\t\tif (columnOffset < lineContentLow.length) {\n\t\t\t\tconst autoClosingPairs = languageConfig.getAutoClosingPairs();\n\t\t\t\tconst standardAutoClosingPairConditionals = autoClosingPairs.autoClosingPairsCloseSingleChar.get(lineContentLow[columnOffset]);\n\t\t\t\t// If the character to the right of the cursor is a closing character of an autoclosing pair\n\t\t\t\tif (standardAutoClosingPairConditionals?.some(p =>\n\t\t\t\t\t// and the start position is the opening character of an autoclosing pair\n\t\t\t\t\tp.open === lineContentLow[startPosition.column - 1] &&\n\t\t\t\t\t// and the snippet prefix contains the opening and closing pair at its edges\n\t\t\t\t\tsnippet.prefix.startsWith(p.open) &&\n\t\t\t\t\tsnippet.prefix[snippet.prefix.length - 1] === p.close)\n\t\t\t\t) {\n\t\t\t\t\t// Eat the character that was likely inserted because of auto-closing pairs\n\t\t\t\t\tendColumn++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst replace = Range.fromPositions({ lineNumber: line, column: candidate.startColumn }, { lineNumber: line, column: endColumn });\n\t\t\tconst insert = replace.setEndPosition(line, position.column);\n\n\t\t\tsuggestions.push(new SnippetCompletion(snippet, { replace, insert }));\n\t\t\tsnippets.delete(snippet);\n\t\t}\n\n\t\t// add remaing snippets when the current prefix ends in whitespace or when line is empty\n\t\t// and when not having a trigger character\n\t\tif (!triggerCharacterLow && (/\\s/.test(lineContentLow[position.column - 2]) /*end in whitespace */ || !lineContentLow /*empty line*/)) {\n\t\t\tfor (const snippet of snippets) {\n\t\t\t\tconst insert = Range.fromPositions(position);\n\t\t\t\tconst replace = lineContentLow.indexOf(snippet.prefixLow, columnOffset) === columnOffset ? insert.setEndPosition(position.lineNumber, position.column + snippet.prefixLow.length) : insert;\n\t\t\t\tsuggestions.push(new SnippetCompletion(snippet, { replace, insert }));\n\t\t\t}\n\t\t}\n\n\t\t// dismbiguate suggestions with same labels\n\t\tthis._disambiguateSnippets(suggestions);\n\n\t\treturn {\n\t\t\tsuggestions,\n\t\t\tduration: sw.elapsed()\n\t\t};\n\t}\n\n\tprivate _disambiguateSnippets(suggestions: SnippetCompletion[]) {\n\t\tsuggestions.sort(SnippetCompletion.compareByLabel);\n\t\tfor (let i = 0; i < suggestions.length; i++) {\n\t\t\tconst item = suggestions[i];\n\t\t\tlet to = i + 1;\n\t\t\tfor (; to < suggestions.length && item.label === suggestions[to].label; to++) {\n\t\t\t\tsuggestions[to].label.label = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[to].label.label, suggestions[to].snippet.name);\n\t\t\t}\n\t\t\tif (to > i + 1) {\n\t\t\t\tsuggestions[i].label.label = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[i].label.label, suggestions[i].snippet.name);\n\t\t\t\ti = to;\n\t\t\t}\n\t\t}\n\t}\n\n\tresolveCompletionItem(item: CompletionItem): CompletionItem {\n\t\treturn (item instanceof SnippetCompletion) ? item.resolve() : item;\n\t}\n\n\tprivate _computeSnippetPositions(model: ITextModel, line: number, word: IWordAtPosition, lineContentWithWordLow: string): ISnippetPosition[] {\n\t\tconst result: ISnippetPosition[] = [];\n\n\t\tfor (let column = 1; column < word.startColumn; column++) {\n\t\t\tconst wordInfo = model.getWordAtPosition(new Position(line, column));\n\t\t\tresult.push({\n\t\t\t\tstartColumn: column,\n\t\t\t\tprefixLow: lineContentWithWordLow.substring(column - 1),\n\t\t\t\tisWord: Boolean(wordInfo)\n\t\t\t});\n\t\t\tif (wordInfo) {\n\t\t\t\tcolumn = wordInfo.endColumn;\n\n\t\t\t\t// the character right after a word is an anchor, always\n\t\t\t\tresult.push({\n\t\t\t\t\tstartColumn: wordInfo.endColumn,\n\t\t\t\t\tprefixLow: lineContentWithWordLow.substring(wordInfo.endColumn - 1),\n\t\t\t\t\tisWord: false\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (word.word.length > 0 || result.length === 0) {\n\t\t\tresult.push({\n\t\t\t\tstartColumn: word.startColumn,\n\t\t\t\tprefixLow: lineContentWithWordLow.substring(word.startColumn - 1),\n\t\t\t\tisWord: true\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getLanguageIdAtPosition(model: ITextModel, position: Position): string {\n\t\t// validate the `languageId` to ensure this is a user\n\t\t// facing language with a name and the chance to have\n\t\t// snippets, else fall back to the outer language\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tlet languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n\t\tif (!this._languageService.getLanguageName(languageId)) {\n\t\t\tlanguageId = model.getLanguageId();\n\t\t}\n\t\treturn languageId;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
