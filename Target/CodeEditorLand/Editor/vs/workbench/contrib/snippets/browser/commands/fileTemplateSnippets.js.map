{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy, isFalsyOrEmpty } from '../../../../../base/common/arrays.js';\nimport { compare } from '../../../../../base/common/strings.js';\nimport { getCodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { SnippetController2 } from '../../../../../editor/contrib/snippet/browser/snippetController2.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { SnippetsAction } from './abstractSnippetsActions.js';\nimport { ISnippetsService } from '../snippets.js';\nimport { Snippet } from '../snippetsFile.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\n\nexport class ApplyFileSnippetAction extends SnippetsAction {\n\n\tstatic readonly Id = 'workbench.action.populateFileFromSnippet';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ApplyFileSnippetAction.Id,\n\t\t\ttitle: localize2('label', \"Fill File with Snippet\"),\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst langService = accessor.get(ILanguageService);\n\n\t\tconst editor = getCodeEditor(editorService.activeTextEditorControl);\n\t\tif (!editor || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst snippets = await snippetService.getSnippets(undefined, { fileTemplateSnippets: true, noRecencySort: true, includeNoPrefixSnippets: true });\n\t\tif (snippets.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = await this._pick(quickInputService, langService, snippets);\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (editor.hasModel()) {\n\t\t\t// apply snippet edit -> replaces everything\n\t\t\tSnippetController2.get(editor)?.apply([{\n\t\t\t\trange: editor.getModel().getFullModelRange(),\n\t\t\t\ttemplate: selection.snippet.body\n\t\t\t}]);\n\n\t\t\t// set language if possible\n\t\t\teditor.getModel().setLanguage(langService.createById(selection.langId), ApplyFileSnippetAction.Id);\n\n\t\t\teditor.focus();\n\t\t}\n\t}\n\n\tprivate async _pick(quickInputService: IQuickInputService, langService: ILanguageService, snippets: Snippet[]) {\n\n\t\t// spread snippet onto each language it supports\n\t\ttype SnippetAndLanguage = { langId: string; snippet: Snippet };\n\t\tconst all: SnippetAndLanguage[] = [];\n\t\tfor (const snippet of snippets) {\n\t\t\tif (isFalsyOrEmpty(snippet.scopes)) {\n\t\t\t\tall.push({ langId: '', snippet });\n\t\t\t} else {\n\t\t\t\tfor (const langId of snippet.scopes) {\n\t\t\t\t\tall.push({ langId, snippet });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttype SnippetAndLanguagePick = IQuickPickItem & { snippet: SnippetAndLanguage };\n\t\tconst picks: (SnippetAndLanguagePick | IQuickPickSeparator)[] = [];\n\n\t\tconst groups = groupBy(all, (a, b) => compare(a.langId, b.langId));\n\n\t\tfor (const group of groups) {\n\t\t\tlet first = true;\n\t\t\tfor (const item of group) {\n\n\t\t\t\tif (first) {\n\t\t\t\t\tpicks.push({\n\t\t\t\t\t\ttype: 'separator',\n\t\t\t\t\t\tlabel: langService.getLanguageName(item.langId) ?? item.langId\n\t\t\t\t\t});\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\n\t\t\t\tpicks.push({\n\t\t\t\t\tsnippet: item,\n\t\t\t\t\tlabel: item.snippet.prefix || item.snippet.name,\n\t\t\t\t\tdetail: item.snippet.description\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst pick = await quickInputService.pick(picks, {\n\t\t\tplaceHolder: localize('placeholder', 'Select a snippet'),\n\t\t\tmatchOnDetail: true,\n\t\t});\n\n\t\treturn pick?.snippet;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,sBAAsB;AACxC,SAAS,eAAe;AACxB,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,UAAU,iBAAiB;AACpC,SAAS,wBAAwB;AACjC,SAAS,oBAAoB,gBAAgB,2BAA2B;AACxE,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAExB,MAAM,+BAA+B,eAAe;AAAA,EAlB3D,OAkB2D;AAAA;AAAA;AAAA,EAE1D,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM;AAAA,MACL,IAAI,uBAAuB;AAAA,MAC3B,OAAO,UAAU,SAAS,wBAAwB;AAAA,MAClD,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,iBAAiB,SAAS,IAAI,gBAAgB;AACpD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,cAAc,SAAS,IAAI,gBAAgB;AAEjD,UAAM,SAAS,cAAc,cAAc,uBAAuB;AAClE,QAAI,CAAC,UAAU,CAAC,OAAO,SAAS,GAAG;AAClC;AAAA,IACD;AAEA,UAAM,WAAW,MAAM,eAAe,YAAY,QAAW,EAAE,sBAAsB,MAAM,eAAe,MAAM,yBAAyB,KAAK,CAAC;AAC/I,QAAI,SAAS,WAAW,GAAG;AAC1B;AAAA,IACD;AAEA,UAAM,YAAY,MAAM,KAAK,MAAM,mBAAmB,aAAa,QAAQ;AAC3E,QAAI,CAAC,WAAW;AACf;AAAA,IACD;AAEA,QAAI,OAAO,SAAS,GAAG;AAEtB,yBAAmB,IAAI,MAAM,GAAG,MAAM,CAAC;AAAA,QACtC,OAAO,OAAO,SAAS,EAAE,kBAAkB;AAAA,QAC3C,UAAU,UAAU,QAAQ;AAAA,MAC7B,CAAC,CAAC;AAGF,aAAO,SAAS,EAAE,YAAY,YAAY,WAAW,UAAU,MAAM,GAAG,uBAAuB,EAAE;AAEjG,aAAO,MAAM;AAAA,IACd;AAAA,EACD;AAAA,EAEA,MAAc,MAAM,mBAAuC,aAA+B,UAAqB;AAI9G,UAAM,MAA4B,CAAC;AACnC,eAAW,WAAW,UAAU;AAC/B,UAAI,eAAe,QAAQ,MAAM,GAAG;AACnC,YAAI,KAAK,EAAE,QAAQ,IAAI,QAAQ,CAAC;AAAA,MACjC,OAAO;AACN,mBAAW,UAAU,QAAQ,QAAQ;AACpC,cAAI,KAAK,EAAE,QAAQ,QAAQ,CAAC;AAAA,QAC7B;AAAA,MACD;AAAA,IACD;AAGA,UAAM,QAA0D,CAAC;AAEjE,UAAM,SAAS,QAAQ,KAAK,CAAC,GAAG,MAAM,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC;AAEjE,eAAW,SAAS,QAAQ;AAC3B,UAAI,QAAQ;AACZ,iBAAW,QAAQ,OAAO;AAEzB,YAAI,OAAO;AACV,gBAAM,KAAK;AAAA,YACV,MAAM;AAAA,YACN,OAAO,YAAY,gBAAgB,KAAK,MAAM,KAAK,KAAK;AAAA,UACzD,CAAC;AACD,kBAAQ;AAAA,QACT;AAEA,cAAM,KAAK;AAAA,UACV,SAAS;AAAA,UACT,OAAO,KAAK,QAAQ,UAAU,KAAK,QAAQ;AAAA,UAC3C,QAAQ,KAAK,QAAQ;AAAA,QACtB,CAAC;AAAA,MACF;AAAA,IACD;AAEA,UAAM,OAAO,MAAM,kBAAkB,KAAK,OAAO;AAAA,MAChD,aAAa,SAAS,eAAe,kBAAkB;AAAA,MACvD,eAAe;AAAA,IAChB,CAAC;AAED,WAAO,MAAM;AAAA,EACd;AACD;",
  "names": []
}
