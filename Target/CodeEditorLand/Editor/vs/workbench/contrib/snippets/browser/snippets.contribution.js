import*as e from"../../../../nls.js";import{registerAction2 as i}from"../../../../platform/actions/common/actions.js";import{CommandsRegistry as p}from"../../../../platform/commands/common/commands.js";import{InstantiationType as a,registerSingleton as c}from"../../../../platform/instantiation/common/extensions.js";import*as l from"../../../../platform/jsonschemas/common/jsonContributionRegistry.js";import{Registry as t}from"../../../../platform/registry/common/platform.js";import{Extensions as m}from"../../../common/contributions.js";import{ConfigureSnippetsAction as d}from"./commands/configureSnippets.js";import{ApplyFileSnippetAction as f}from"./commands/fileTemplateSnippets.js";import{InsertSnippetAction as h}from"./commands/insertSnippet.js";import{SurroundWithSnippetEditorAction as S}from"./commands/surroundWithSnippet.js";import{SnippetCodeActions as g}from"./snippetCodeActionProvider.js";import{ISnippetsService as u}from"./snippets.js";import{SnippetsService as y}from"./snippetsService.js";import{LifecyclePhase as b}from"../../../services/lifecycle/common/lifecycle.js";import{Extensions as C}from"../../../../platform/configuration/common/configurationRegistry.js";import"./tabCompletion.js";import{editorConfigurationBaseNode as I}from"../../../../editor/common/config/editorConfigurationSchema.js";c(u,y,a.Delayed),i(h),p.registerCommandAlias("editor.action.showSnippets","editor.action.insertSnippet"),i(S),i(f),i(d);const N=t.as(m.Workbench);N.registerWorkbenchContribution(g,b.Restored),t.as(C.Configuration).registerConfiguration({...I,properties:{"editor.snippets.codeActions.enabled":{description:e.localize("editor.snippets.codeActions.enabled","Controls if surround-with-snippets or file template snippets show as Code Actions."),type:"boolean",default:!0}}});const o="vscode://schemas/snippets",s={prefix:{description:e.localize("snippetSchema.json.prefix","The prefix to use when selecting the snippet in intellisense"),type:["string","array"]},isFileTemplate:{description:e.localize("snippetSchema.json.isFileTemplate","The snippet is meant to populate or replace a whole file"),type:"boolean"},body:{markdownDescription:e.localize("snippetSchema.json.body","The snippet content. Use `$1`, `${1:defaultText}` to define cursor positions, use `$0` for the final cursor position. Insert variable values with `${varName}` and `${varName:defaultText}`, e.g. `This is file: $TM_FILENAME`."),type:["string","array"],items:{type:"string"}},description:{description:e.localize("snippetSchema.json.description","The snippet description."),type:["string","array"]}},$={id:o,allowComments:!0,allowTrailingCommas:!0,defaultSnippets:[{label:e.localize("snippetSchema.json.default","Empty snippet"),body:{"${1:snippetName}":{prefix:"${2:prefix}",body:"${3:snippet}",description:"${4:description}"}}}],type:"object",description:e.localize("snippetSchema.json","User snippet configuration"),additionalProperties:{type:"object",required:["body"],properties:s,additionalProperties:!1}},r="vscode://schemas/global-snippets",j={id:r,allowComments:!0,allowTrailingCommas:!0,defaultSnippets:[{label:e.localize("snippetSchema.json.default","Empty snippet"),body:{"${1:snippetName}":{scope:"${2:scope}",prefix:"${3:prefix}",body:"${4:snippet}",description:"${5:description}"}}}],type:"object",description:e.localize("snippetSchema.json","User snippet configuration"),additionalProperties:{type:"object",required:["body"],properties:{...s,scope:{description:e.localize("snippetSchema.json.scope","A list of language names to which this snippet applies, e.g. 'typescript,javascript'."),type:"string"}},additionalProperties:!1}},n=t.as(l.Extensions.JSONContribution);n.registerSchema(o,$),n.registerSchema(r,j);
