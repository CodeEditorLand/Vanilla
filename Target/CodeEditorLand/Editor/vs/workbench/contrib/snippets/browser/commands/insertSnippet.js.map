{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/commands/insertSnippet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { ServicesAccessor } from '../../../../../editor/browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../../../editor/common/editorContextKeys.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { SnippetController2 } from '../../../../../editor/contrib/snippet/browser/snippetController2.js';\nimport * as nls from '../../../../../nls.js';\nimport { IClipboardService } from '../../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { SnippetEditorAction } from './abstractSnippetsActions.js';\nimport { pickSnippet } from '../snippetPicker.js';\nimport { ISnippetsService } from '../snippets.js';\nimport { Snippet, SnippetSource } from '../snippetsFile.js';\n\nclass Args {\n\n\tstatic fromUser(arg: any): Args {\n\t\tif (!arg || typeof arg !== 'object') {\n\t\t\treturn Args._empty;\n\t\t}\n\t\tlet { snippet, name, langId } = arg;\n\t\tif (typeof snippet !== 'string') {\n\t\t\tsnippet = undefined;\n\t\t}\n\t\tif (typeof name !== 'string') {\n\t\t\tname = undefined;\n\t\t}\n\t\tif (typeof langId !== 'string') {\n\t\t\tlangId = undefined;\n\t\t}\n\t\treturn new Args(snippet, name, langId);\n\t}\n\n\tprivate static readonly _empty = new Args(undefined, undefined, undefined);\n\n\tprivate constructor(\n\t\tpublic readonly snippet: string | undefined,\n\t\tpublic readonly name: string | undefined,\n\t\tpublic readonly langId: string | undefined\n\t) { }\n}\n\nexport class InsertSnippetAction extends SnippetEditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertSnippet',\n\t\t\ttitle: nls.localize2('snippet.suggestions.label', \"Insert Snippet\"),\n\t\t\tf1: true,\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: `Insert Snippet`,\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'snippet': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'langId': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'name': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tasync runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, arg: any) {\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst instaService = accessor.get(IInstantiationService);\n\n\t\tconst snippet = await new Promise<Snippet | undefined>((resolve, reject) => {\n\n\t\t\tconst { lineNumber, column } = editor.getPosition();\n\t\t\tconst { snippet, name, langId } = Args.fromUser(arg);\n\n\t\t\tif (snippet) {\n\t\t\t\treturn resolve(new Snippet(\n\t\t\t\t\tfalse,\n\t\t\t\t\t[],\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\tsnippet,\n\t\t\t\t\t'',\n\t\t\t\t\tSnippetSource.User,\n\t\t\t\t\t`random/${Math.random()}`\n\t\t\t\t));\n\t\t\t}\n\n\t\t\tlet languageId: string;\n\t\t\tif (langId) {\n\t\t\t\tif (!languageService.isRegisteredLanguageId(langId)) {\n\t\t\t\t\treturn resolve(undefined);\n\t\t\t\t}\n\t\t\t\tlanguageId = langId;\n\t\t\t} else {\n\t\t\t\teditor.getModel().tokenization.tokenizeIfCheap(lineNumber);\n\t\t\t\tlanguageId = editor.getModel().getLanguageIdAtPosition(lineNumber, column);\n\n\t\t\t\t// validate the `languageId` to ensure this is a user\n\t\t\t\t// facing language with a name and the chance to have\n\t\t\t\t// snippets, else fall back to the outer language\n\t\t\t\tif (!languageService.getLanguageName(languageId)) {\n\t\t\t\t\tlanguageId = editor.getModel().getLanguageId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (name) {\n\t\t\t\t// take selected snippet\n\t\t\t\tsnippetService.getSnippets(languageId, { includeNoPrefixSnippets: true })\n\t\t\t\t\t.then(snippets => snippets.find(snippet => snippet.name === name))\n\t\t\t\t\t.then(resolve, reject);\n\n\t\t\t} else {\n\t\t\t\t// let user pick a snippet\n\t\t\t\tresolve(instaService.invokeFunction(pickSnippet, languageId));\n\t\t\t}\n\t\t});\n\n\t\tif (!snippet) {\n\t\t\treturn;\n\t\t}\n\t\tlet clipboardText: string | undefined;\n\t\tif (snippet.needsClipboard) {\n\t\t\tclipboardText = await clipboardService.readText();\n\t\t}\n\t\teditor.focus();\n\t\tSnippetController2.get(editor)?.insert(snippet.codeSnippet, { clipboardText });\n\t\tsnippetService.updateUsageTimestamp(snippet);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["snippet"]
}
