{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/browser/commands/insertSnippet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ICodeEditor } from \"../../../../../editor/browser/editorBrowser.js\";\nimport type { ServicesAccessor } from \"../../../../../editor/browser/editorExtensions.js\";\nimport { EditorContextKeys } from \"../../../../../editor/common/editorContextKeys.js\";\nimport { ILanguageService } from \"../../../../../editor/common/languages/language.js\";\nimport { SnippetController2 } from \"../../../../../editor/contrib/snippet/browser/snippetController2.js\";\nimport * as nls from \"../../../../../nls.js\";\nimport { IClipboardService } from \"../../../../../platform/clipboard/common/clipboardService.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { pickSnippet } from \"../snippetPicker.js\";\nimport { ISnippetsService } from \"../snippets.js\";\nimport { Snippet, SnippetSource } from \"../snippetsFile.js\";\nimport { SnippetEditorAction } from \"./abstractSnippetsActions.js\";\n\nclass Args {\n\tstatic fromUser(arg: any): Args {\n\t\tif (!arg || typeof arg !== \"object\") {\n\t\t\treturn Args._empty;\n\t\t}\n\t\tlet { snippet, name, langId } = arg;\n\t\tif (typeof snippet !== \"string\") {\n\t\t\tsnippet = undefined;\n\t\t}\n\t\tif (typeof name !== \"string\") {\n\t\t\tname = undefined;\n\t\t}\n\t\tif (typeof langId !== \"string\") {\n\t\t\tlangId = undefined;\n\t\t}\n\t\treturn new Args(snippet, name, langId);\n\t}\n\n\tprivate static readonly _empty = new Args(undefined, undefined, undefined);\n\n\tprivate constructor(\n\t\tpublic readonly snippet: string | undefined,\n\t\tpublic readonly name: string | undefined,\n\t\tpublic readonly langId: string | undefined,\n\t) {}\n}\n\nexport class InsertSnippetAction extends SnippetEditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.insertSnippet\",\n\t\t\ttitle: nls.localize2(\"snippet.suggestions.label\", \"Insert Snippet\"),\n\t\t\tf1: true,\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: `Insert Snippet`,\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"args\",\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tsnippet: {\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlangId: {\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n\n\tasync runEditorCommand(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\targ: any,\n\t) {\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst instaService = accessor.get(IInstantiationService);\n\n\t\tconst snippet = await new Promise<Snippet | undefined>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tconst { lineNumber, column } = editor.getPosition();\n\t\t\t\tconst { snippet, name, langId } = Args.fromUser(arg);\n\n\t\t\t\tif (snippet) {\n\t\t\t\t\treturn resolve(\n\t\t\t\t\t\tnew Snippet(\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\tsnippet,\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\tSnippetSource.User,\n\t\t\t\t\t\t\t`random/${Math.random()}`,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet languageId: string;\n\t\t\t\tif (langId) {\n\t\t\t\t\tif (!languageService.isRegisteredLanguageId(langId)) {\n\t\t\t\t\t\treturn resolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t\tlanguageId = langId;\n\t\t\t\t} else {\n\t\t\t\t\teditor.getModel().tokenization.tokenizeIfCheap(lineNumber);\n\t\t\t\t\tlanguageId = editor\n\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t.getLanguageIdAtPosition(lineNumber, column);\n\n\t\t\t\t\t// validate the `languageId` to ensure this is a user\n\t\t\t\t\t// facing language with a name and the chance to have\n\t\t\t\t\t// snippets, else fall back to the outer language\n\t\t\t\t\tif (!languageService.getLanguageName(languageId)) {\n\t\t\t\t\t\tlanguageId = editor.getModel().getLanguageId();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (name) {\n\t\t\t\t\t// take selected snippet\n\t\t\t\t\tsnippetService\n\t\t\t\t\t\t.getSnippets(languageId, {\n\t\t\t\t\t\t\tincludeNoPrefixSnippets: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((snippets) =>\n\t\t\t\t\t\t\tsnippets.find((snippet) => snippet.name === name),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\t// let user pick a snippet\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tinstaService.invokeFunction(pickSnippet, languageId),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tif (!snippet) {\n\t\t\treturn;\n\t\t}\n\t\tlet clipboardText: string | undefined;\n\t\tif (snippet.needsClipboard) {\n\t\t\tclipboardText = await clipboardService.readText();\n\t\t}\n\t\teditor.focus();\n\t\tSnippetController2.get(editor)?.insert(snippet.codeSnippet, {\n\t\t\tclipboardText,\n\t\t});\n\t\tsnippetService.updateUsageTimestamp(snippet);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["snippet"]
}
