{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/test/browser/snippetsRewrite.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Snippet, SnippetSource } from '../../browser/snippetsFile.js';\n\nsuite('SnippetRewrite', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertRewrite(input: string, expected: string | boolean): void {\n\t\tconst actual = new Snippet(false, ['foo'], 'foo', 'foo', 'foo', input, 'foo', SnippetSource.User, generateUuid());\n\t\tif (typeof expected === 'boolean') {\n\t\t\tassert.strictEqual(actual.codeSnippet, input);\n\t\t} else {\n\t\t\tassert.strictEqual(actual.codeSnippet, expected);\n\t\t}\n\t}\n\n\ttest('bogous variable rewrite', function () {\n\n\t\tassertRewrite('foo', false);\n\t\tassertRewrite('hello $1 world$0', false);\n\n\t\tassertRewrite('$foo and $foo', '${1:foo} and ${1:foo}');\n\t\tassertRewrite('$1 and $SELECTION and $foo', '$1 and ${SELECTION} and ${2:foo}');\n\n\n\t\tassertRewrite(\n\t\t\t[\n\t\t\t\t'for (var ${index} = 0; ${index} < ${array}.length; ${index}++) {',\n\t\t\t\t'\\tvar ${element} = ${array}[${index}];',\n\t\t\t\t'\\t$0',\n\t\t\t\t'}'\n\t\t\t].join('\\n'),\n\t\t\t[\n\t\t\t\t'for (var ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {',\n\t\t\t\t'\\tvar ${3:element} = ${2:array}[${1:index}];',\n\t\t\t\t'\\t$0',\n\t\t\t\t'\\\\}'\n\t\t\t].join('\\n')\n\t\t);\n\t});\n\n\ttest('Snippet choices: unable to escape comma and pipe, #31521', function () {\n\t\tassertRewrite('console.log(${1|not\\\\, not, five, 5, 1   23|});', false);\n\t});\n\n\ttest('lazy bogous variable rewrite', function () {\n\t\tconst snippet = new Snippet(false, ['fooLang'], 'foo', 'prefix', 'desc', 'This is ${bogous} because it is a ${var}', 'source', SnippetSource.Extension, generateUuid());\n\t\tassert.strictEqual(snippet.body, 'This is ${bogous} because it is a ${var}');\n\t\tassert.strictEqual(snippet.codeSnippet, 'This is ${1:bogous} because it is a ${2:var}');\n\t\tassert.strictEqual(snippet.isBogous, true);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,oBAAoB;AAC7B,SAAS,+CAA+C;AACxD,SAAS,SAAS,qBAAqB;AAEvC,MAAM,kBAAkB,WAAY;AAEnC,0CAAwC;AAExC,WAAS,cAAc,OAAe,UAAkC;AACvE,UAAM,SAAS,IAAI,QAAQ,OAAO,CAAC,KAAK,GAAG,OAAO,OAAO,OAAO,OAAO,OAAO,cAAc,MAAM,aAAa,CAAC;AAChH,QAAI,OAAO,aAAa,WAAW;AAClC,aAAO,YAAY,OAAO,aAAa,KAAK;AAAA,IAC7C,OAAO;AACN,aAAO,YAAY,OAAO,aAAa,QAAQ;AAAA,IAChD;AAAA,EACD;AAPS;AAST,OAAK,2BAA2B,WAAY;AAE3C,kBAAc,OAAO,KAAK;AAC1B,kBAAc,oBAAoB,KAAK;AAEvC,kBAAc,iBAAiB,uBAAuB;AACtD,kBAAc,8BAA8B,kCAAkC;AAG9E;AAAA,MACC;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,EAAE,KAAK,IAAI;AAAA,MACX;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,EAAE,KAAK,IAAI;AAAA,IACZ;AAAA,EACD,CAAC;AAED,OAAK,4DAA4D,WAAY;AAC5E,kBAAc,mDAAmD,KAAK;AAAA,EACvE,CAAC;AAED,OAAK,gCAAgC,WAAY;AAChD,UAAM,UAAU,IAAI,QAAQ,OAAO,CAAC,SAAS,GAAG,OAAO,UAAU,QAAQ,4CAA4C,UAAU,cAAc,WAAW,aAAa,CAAC;AACtK,WAAO,YAAY,QAAQ,MAAM,0CAA0C;AAC3E,WAAO,YAAY,QAAQ,aAAa,8CAA8C;AACtF,WAAO,YAAY,QAAQ,UAAU,IAAI;AAAA,EAC1C,CAAC;AACF,CAAC;",
  "names": []
}
