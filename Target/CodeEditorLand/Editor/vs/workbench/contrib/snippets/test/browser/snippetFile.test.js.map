{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/snippets/test/browser/snippetFile.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { SnippetFile, Snippet, SnippetSource } from '../../browser/snippetsFile.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { SnippetParser } from '../../../../../editor/contrib/snippet/browser/snippetParser.js';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('Snippets', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass TestSnippetFile extends SnippetFile {\n\t\tconstructor(filepath: URI, snippets: Snippet[]) {\n\t\t\tsuper(SnippetSource.Extension, filepath, undefined, undefined, undefined!, undefined!);\n\t\t\tthis.data.push(...snippets);\n\t\t}\n\t}\n\n\ttest('SnippetFile#select', () => {\n\t\tlet file = new TestSnippetFile(URI.file('somepath/foo.code-snippets'), []);\n\t\tlet bucket: Snippet[] = [];\n\t\tfile.select('', bucket);\n\t\tassert.strictEqual(bucket.length, 0);\n\n\t\tfile = new TestSnippetFile(URI.file('somepath/foo.code-snippets'), [\n\t\t\tnew Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['foo'], 'FooSnippet2', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bar'], 'BarSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bar.comment'], 'BarSnippet2', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bar.strings'], 'BarSnippet2', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bazz', 'bazz'], 'BazzSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t]);\n\n\t\tbucket = [];\n\t\tfile.select('foo', bucket);\n\t\tassert.strictEqual(bucket.length, 2);\n\n\t\tbucket = [];\n\t\tfile.select('fo', bucket);\n\t\tassert.strictEqual(bucket.length, 0);\n\n\t\tbucket = [];\n\t\tfile.select('bar', bucket);\n\t\tassert.strictEqual(bucket.length, 1);\n\n\t\tbucket = [];\n\t\tfile.select('bar.comment', bucket);\n\t\tassert.strictEqual(bucket.length, 2);\n\n\t\tbucket = [];\n\t\tfile.select('bazz', bucket);\n\t\tassert.strictEqual(bucket.length, 1);\n\t});\n\n\ttest('SnippetFile#select - any scope', function () {\n\n\t\tconst file = new TestSnippetFile(URI.file('somepath/foo.code-snippets'), [\n\t\t\tnew Snippet(false, [], 'AnySnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t]);\n\n\t\tconst bucket: Snippet[] = [];\n\t\tfile.select('foo', bucket);\n\t\tassert.strictEqual(bucket.length, 2);\n\n\t});\n\n\ttest('Snippet#needsClipboard', function () {\n\n\t\tfunction assertNeedsClipboard(body: string, expected: boolean): void {\n\t\t\tconst snippet = new Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', body, 'test', SnippetSource.User, generateUuid());\n\t\t\tassert.strictEqual(snippet.needsClipboard, expected);\n\n\t\t\tassert.strictEqual(SnippetParser.guessNeedsClipboard(body), expected);\n\t\t}\n\n\t\tassertNeedsClipboard('foo$CLIPBOARD', true);\n\t\tassertNeedsClipboard('${CLIPBOARD}', true);\n\t\tassertNeedsClipboard('foo${CLIPBOARD}bar', true);\n\t\tassertNeedsClipboard('foo$clipboard', false);\n\t\tassertNeedsClipboard('foo${clipboard}', false);\n\t\tassertNeedsClipboard('baba', false);\n\t});\n\n\ttest('Snippet#isTrivial', function () {\n\n\t\tfunction assertIsTrivial(body: string, expected: boolean): void {\n\t\t\tconst snippet = new Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', body, 'test', SnippetSource.User, generateUuid());\n\t\t\tassert.strictEqual(snippet.isTrivial, expected);\n\t\t}\n\n\t\tassertIsTrivial('foo', true);\n\t\tassertIsTrivial('foo$0', true);\n\t\tassertIsTrivial('foo$0bar', false);\n\t\tassertIsTrivial('foo$1', false);\n\t\tassertIsTrivial('foo$1$0', false);\n\t\tassertIsTrivial('${1:foo}', false);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
