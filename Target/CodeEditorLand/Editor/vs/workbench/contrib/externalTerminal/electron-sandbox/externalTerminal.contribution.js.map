{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport * as paths from \"../../../../base/common/path.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tConfigurationScope,\n\tExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport {\n\tDEFAULT_TERMINAL_OSX,\n\ttype IExternalTerminalSettings,\n} from \"../../../../platform/externalTerminal/common/externalTerminal.js\";\nimport { IExternalTerminalService } from \"../../../../platform/externalTerminal/electron-sandbox/externalTerminalService.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IRemoteAuthorityResolverService } from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../common/contributions.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { TerminalContextKeys } from \"../../terminal/common/terminalContextKey.js\";\n\nconst OPEN_NATIVE_CONSOLE_COMMAND_ID =\n\t\"workbench.action.terminal.openNativeConsole\";\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC,\n\twhen: TerminalContextKeys.notFocus,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\thandler: async (accessor) => {\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\t// Open external terminal in local workspaces\n\t\tconst terminalService = accessor.get(IExternalTerminalService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst remoteAuthorityResolverService = accessor.get(\n\t\t\tIRemoteAuthorityResolverService,\n\t\t);\n\t\tconst root = historyService.getLastActiveWorkspaceRoot();\n\t\tconst config =\n\t\t\tconfigurationService.getValue<IExternalTerminalSettings>(\n\t\t\t\t\"terminal.external\",\n\t\t\t);\n\n\t\t// It's a local workspace, open the root\n\t\tif (root?.scheme === Schemas.file) {\n\t\t\tterminalService.openTerminal(config, root.fsPath);\n\t\t\treturn;\n\t\t}\n\n\t\t// If it's a remote workspace, open the canonical URI if it is a local folder\n\t\ttry {\n\t\t\tif (root?.scheme === Schemas.vscodeRemote) {\n\t\t\t\tconst canonicalUri =\n\t\t\t\t\tawait remoteAuthorityResolverService.getCanonicalURI(root);\n\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\tterminalService.openTerminal(config, canonicalUri.fsPath);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch {}\n\n\t\t// Open the current file's folder if it's local or its canonical URI is local\n\t\t// Opens current file's folder, if no folder is open in editor\n\t\tconst activeFile = historyService.getLastActiveFile(Schemas.file);\n\t\tif (activeFile?.scheme === Schemas.file) {\n\t\t\tterminalService.openTerminal(\n\t\t\t\tconfig,\n\t\t\t\tpaths.dirname(activeFile.fsPath),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tif (activeFile?.scheme === Schemas.vscodeRemote) {\n\t\t\t\tconst canonicalUri =\n\t\t\t\t\tawait remoteAuthorityResolverService.getCanonicalURI(\n\t\t\t\t\t\tactiveFile,\n\t\t\t\t\t);\n\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\tterminalService.openTerminal(config, canonicalUri.fsPath);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch {}\n\n\t\t// Fallback to opening without a cwd which will end up using the local home path\n\t\tterminalService.openTerminal(config, undefined);\n\t},\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\t\ttitle: nls.localize2(\n\t\t\t\"globalConsoleAction\",\n\t\t\t\"Open New External Terminal\",\n\t\t),\n\t},\n});\n\nexport class ExternalTerminalContribution implements IWorkbenchContribution {\n\tpublic _serviceBrand: undefined;\n\tconstructor(\n\t\t@IExternalTerminalService\n\t\tprivate readonly _externalTerminalService: IExternalTerminalService,\n\t) {\n\t\tthis._updateConfiguration();\n\t}\n\n\tprivate async _updateConfiguration(): Promise<void> {\n\t\tconst terminals =\n\t\t\tawait this._externalTerminalService.getDefaultTerminalForPlatforms();\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\tid: \"externalTerminal\",\n\t\t\torder: 100,\n\t\t\ttitle: nls.localize(\n\t\t\t\t\"terminalConfigurationTitle\",\n\t\t\t\t\"External Terminal\",\n\t\t\t),\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\t\"terminal.explorerKind\": {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tenum: [\"integrated\", \"external\", \"both\"],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"terminal.explorerKind.integrated\",\n\t\t\t\t\t\t\t\"Use VS Code's integrated terminal.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"terminal.explorerKind.external\",\n\t\t\t\t\t\t\t\"Use the configured external terminal.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"terminal.explorerKind.both\",\n\t\t\t\t\t\t\t\"Use the other two together.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"explorer.openInTerminalKind\",\n\t\t\t\t\t\t\"When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched\",\n\t\t\t\t\t),\n\t\t\t\t\tdefault: \"integrated\",\n\t\t\t\t},\n\t\t\t\t\"terminal.sourceControlRepositoriesKind\": {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tenum: [\"integrated\", \"external\", \"both\"],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"terminal.sourceControlRepositoriesKind.integrated\",\n\t\t\t\t\t\t\t\"Use VS Code's integrated terminal.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"terminal.sourceControlRepositoriesKind.external\",\n\t\t\t\t\t\t\t\"Use the configured external terminal.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"terminal.sourceControlRepositoriesKind.both\",\n\t\t\t\t\t\t\t\"Use the other two together.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"sourceControlRepositories.openInTerminalKind\",\n\t\t\t\t\t\t\"When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched\",\n\t\t\t\t\t),\n\t\t\t\t\tdefault: \"integrated\",\n\t\t\t\t},\n\t\t\t\t\"terminal.external.windowsExec\": {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"terminal.external.windowsExec\",\n\t\t\t\t\t\t\"Customizes which terminal to run on Windows.\",\n\t\t\t\t\t),\n\t\t\t\t\tdefault: terminals.windows,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\t},\n\t\t\t\t\"terminal.external.osxExec\": {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"terminal.external.osxExec\",\n\t\t\t\t\t\t\"Customizes which terminal application to run on macOS.\",\n\t\t\t\t\t),\n\t\t\t\t\tdefault: DEFAULT_TERMINAL_OSX,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\t},\n\t\t\t\t\"terminal.external.linuxExec\": {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"terminal.external.linuxExec\",\n\t\t\t\t\t\t\"Customizes which terminal to run on Linux.\",\n\t\t\t\t\t),\n\t\t\t\t\tdefault: terminals.linux,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n\n// Register workbench contributions\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n);\nworkbenchRegistry.registerWorkbenchContribution(\n\tExternalTerminalContribution,\n\tLifecyclePhase.Restored,\n);\n"],
  "mappings": "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",
  "names": []
}
