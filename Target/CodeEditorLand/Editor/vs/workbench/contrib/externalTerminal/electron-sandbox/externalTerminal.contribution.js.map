{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport * as paths from '../../../../base/common/path.js';\nimport { DEFAULT_TERMINAL_OSX, IExternalTerminalSettings } from '../../../../platform/externalTerminal/common/externalTerminal.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { KeyMod, KeyCode } from '../../../../base/common/keyCodes.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IConfigurationRegistry, Extensions, ConfigurationScope } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { IExternalTerminalService } from '../../../../platform/externalTerminal/electron-sandbox/externalTerminalService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { TerminalContextKeys } from '../../terminal/common/terminalContextKey.js';\nimport { IRemoteAuthorityResolverService } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\n\nconst OPEN_NATIVE_CONSOLE_COMMAND_ID = 'workbench.action.terminal.openNativeConsole';\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC,\n\twhen: TerminalContextKeys.notFocus,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\thandler: async (accessor) => {\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\t// Open external terminal in local workspaces\n\t\tconst terminalService = accessor.get(IExternalTerminalService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst remoteAuthorityResolverService = accessor.get(IRemoteAuthorityResolverService);\n\t\tconst root = historyService.getLastActiveWorkspaceRoot();\n\t\tconst config = configurationService.getValue<IExternalTerminalSettings>('terminal.external');\n\n\t\t// It's a local workspace, open the root\n\t\tif (root?.scheme === Schemas.file) {\n\t\t\tterminalService.openTerminal(config, root.fsPath);\n\t\t\treturn;\n\t\t}\n\n\t\t// If it's a remote workspace, open the canonical URI if it is a local folder\n\t\ttry {\n\t\t\tif (root?.scheme === Schemas.vscodeRemote) {\n\t\t\t\tconst canonicalUri = await remoteAuthorityResolverService.getCanonicalURI(root);\n\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\tterminalService.openTerminal(config, canonicalUri.fsPath);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch { }\n\n\t\t// Open the current file's folder if it's local or its canonical URI is local\n\t\t// Opens current file's folder, if no folder is open in editor\n\t\tconst activeFile = historyService.getLastActiveFile(Schemas.file);\n\t\tif (activeFile?.scheme === Schemas.file) {\n\t\t\tterminalService.openTerminal(config, paths.dirname(activeFile.fsPath));\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tif (activeFile?.scheme === Schemas.vscodeRemote) {\n\t\t\t\tconst canonicalUri = await remoteAuthorityResolverService.getCanonicalURI(activeFile);\n\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\tterminalService.openTerminal(config, canonicalUri.fsPath);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch { }\n\n\t\t// Fallback to opening without a cwd which will end up using the local home path\n\t\tterminalService.openTerminal(config, undefined);\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\t\ttitle: nls.localize2('globalConsoleAction', \"Open New External Terminal\")\n\t}\n});\n\nexport class ExternalTerminalContribution implements IWorkbenchContribution {\n\n\tpublic _serviceBrand: undefined;\n\tconstructor(@IExternalTerminalService private readonly _externalTerminalService: IExternalTerminalService) {\n\t\tthis._updateConfiguration();\n\t}\n\n\tprivate async _updateConfiguration(): Promise<void> {\n\t\tconst terminals = await this._externalTerminalService.getDefaultTerminalForPlatforms();\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\tid: 'externalTerminal',\n\t\t\torder: 100,\n\t\t\ttitle: nls.localize('terminalConfigurationTitle', \"External Terminal\"),\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\t'terminal.explorerKind': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: [\n\t\t\t\t\t\t'integrated',\n\t\t\t\t\t\t'external',\n\t\t\t\t\t\t'both'\n\t\t\t\t\t],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize('terminal.explorerKind.integrated', \"Use VS Code's integrated terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.explorerKind.external', \"Use the configured external terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.explorerKind.both', \"Use the other two together.\")\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('explorer.openInTerminalKind', \"When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched\"),\n\t\t\t\t\tdefault: 'integrated'\n\t\t\t\t},\n\t\t\t\t'terminal.sourceControlRepositoriesKind': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: [\n\t\t\t\t\t\t'integrated',\n\t\t\t\t\t\t'external',\n\t\t\t\t\t\t'both'\n\t\t\t\t\t],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize('terminal.sourceControlRepositoriesKind.integrated', \"Use VS Code's integrated terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.sourceControlRepositoriesKind.external', \"Use the configured external terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.sourceControlRepositoriesKind.both', \"Use the other two together.\")\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('sourceControlRepositories.openInTerminalKind', \"When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched\"),\n\t\t\t\t\tdefault: 'integrated'\n\t\t\t\t},\n\t\t\t\t'terminal.external.windowsExec': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('terminal.external.windowsExec', \"Customizes which terminal to run on Windows.\"),\n\t\t\t\t\tdefault: terminals.windows,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'terminal.external.osxExec': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('terminal.external.osxExec', \"Customizes which terminal application to run on macOS.\"),\n\t\t\t\t\tdefault: DEFAULT_TERMINAL_OSX,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'terminal.external.linuxExec': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('terminal.external.linuxExec', \"Customizes which terminal to run on Linux.\"),\n\t\t\t\t\tdefault: terminals.linux,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n// Register workbench contributions\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ExternalTerminalContribution, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": []
}
