var D=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var x=(s,o,e,n)=>{for(var t=n>1?void 0:n?N(o,e):o,m=s.length-1,c;m>=0;m--)(c=s[m])&&(t=(n?c(o,e,t):c(t))||t);return n&&t&&D(o,e,t),t},S=(s,o)=>(e,n)=>o(e,n,s);import{distinct as E}from"../../../../../vs/base/common/arrays.js";import{Disposable as K}from"../../../../../vs/base/common/lifecycle.js";import{Schemas as g}from"../../../../../vs/base/common/network.js";import{basename as k,dirname as I}from"../../../../../vs/base/common/path.js";import{isWindows as L}from"../../../../../vs/base/common/platform.js";import{URI as P}from"../../../../../vs/base/common/uri.js";import*as d from"../../../../../vs/nls.js";import{MenuId as C,MenuRegistry as M}from"../../../../../vs/platform/actions/common/actions.js";import{CommandsRegistry as G}from"../../../../../vs/platform/commands/common/commands.js";import{IConfigurationService as _}from"../../../../../vs/platform/configuration/common/configuration.js";import{ContextKeyExpr as a}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IExternalTerminalService as z}from"../../../../../vs/platform/externalTerminal/common/externalTerminal.js";import{IFileService as U}from"../../../../../vs/platform/files/common/files.js";import{IListService as V}from"../../../../../vs/platform/list/browser/listService.js";import{Registry as F}from"../../../../../vs/platform/registry/common/platform.js";import{TerminalLocation as j}from"../../../../../vs/platform/terminal/common/terminal.js";import{ResourceContextKey as h}from"../../../../../vs/workbench/common/contextkeys.js";import{Extensions as B}from"../../../../../vs/workbench/common/contributions.js";import{getMultiSelectedResources as H,IExplorerService as J}from"../../../../../vs/workbench/contrib/files/browser/files.js";import{ITerminalService as Q,ITerminalGroupService as X}from"../../../../../vs/workbench/contrib/terminal/browser/terminal.js";import{IEditorGroupsService as Y}from"../../../../../vs/workbench/services/editor/common/editorGroupsService.js";import{IEditorService as Z}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{LifecyclePhase as $}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";import{IRemoteAgentService as ee}from"../../../../../vs/workbench/services/remote/common/remoteAgentService.js";const w="openInTerminal",y="openInIntegratedTerminal";function b(s,o){G.registerCommand({id:s,handler:async(e,n)=>{const t=e.get(_),m=e.get(U),c=e.get(Q),R=e.get(ee),O=e.get(X);let f;try{f=e.get(z)}catch{}const T=H(n,e.get(V),e.get(Z),e.get(Y),e.get(J));return m.resolveAll(T.map(u=>({resource:u}))).then(async u=>{const A=t.getValue(),W=R.getConnection()||o==="integrated",v=E(u.filter(r=>r.success));if(W){const r={},q=v.map(({stat:l})=>{const i=l.resource;return l.isDirectory?i:P.from({scheme:i.scheme,authority:i.authority,fragment:i.fragment,query:i.query,path:I(i.path)})});for(const l of q){if(r[l.path])return;r[l.path]=!0;const i=await c.createTerminal({config:{cwd:l}});i&&i.target!==j.Editor&&(T.length===1||!n||l.path===n.path||l.path===I(n.path))&&(c.setActiveInstance(i),O.showPanel(!0))}}else f&&E(v.map(({stat:r})=>r.isDirectory?r.resource.fsPath:I(r.resource.fsPath))).forEach(r=>{f.openTerminal(A.terminal.external,r)})})}})}b(w,"external"),b(y,"integrated");let p=class extends K{constructor(e){super();this._configurationService=e;const n=a.and(h.Scheme.isEqualTo(g.file),a.or(a.equals("config.terminal.explorerKind","integrated"),a.equals("config.terminal.explorerKind","both"))),t=a.and(h.Scheme.isEqualTo(g.file),a.or(a.equals("config.terminal.explorerKind","external"),a.equals("config.terminal.explorerKind","both")));this._openInIntegratedTerminalMenuItem={group:"navigation",order:30,command:{id:y,title:d.localize("scopedConsoleAction.Integrated","Open in Integrated Terminal")},when:a.or(n,h.Scheme.isEqualTo(g.vscodeRemote))},this._openInTerminalMenuItem={group:"navigation",order:31,command:{id:w,title:d.localize("scopedConsoleAction.external","Open in External Terminal")},when:t},M.appendMenuItem(C.ExplorerContext,this._openInTerminalMenuItem),M.appendMenuItem(C.ExplorerContext,this._openInIntegratedTerminalMenuItem),this._register(this._configurationService.onDidChangeConfiguration(m=>{(m.affectsConfiguration("terminal.explorerKind")||m.affectsConfiguration("terminal.external"))&&this._refreshOpenInTerminalMenuItemTitle()})),this._refreshOpenInTerminalMenuItemTitle()}_openInIntegratedTerminalMenuItem;_openInTerminalMenuItem;isWindows(){const e=this._configurationService.getValue().terminal;if(L&&e.external?.windowsExec){const n=k(e.external.windowsExec);if(n==="wt"||n==="wt.exe")return!0}return!1}_refreshOpenInTerminalMenuItemTitle(){this.isWindows()&&(this._openInTerminalMenuItem.command.title=d.localize("scopedConsoleAction.wt","Open in Windows Terminal"))}};p=x([S(0,_)],p),F.as(B.Workbench).registerWorkbenchContribution(p,$.Restored);export{p as ExternalTerminalContribution};
