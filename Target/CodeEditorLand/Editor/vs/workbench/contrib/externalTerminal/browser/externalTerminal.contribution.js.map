{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { MenuId, MenuRegistry, IMenuItem } from '../../../../platform/actions/common/actions.js';\nimport { ITerminalGroupService, ITerminalService as IIntegratedTerminalService } from '../../terminal/browser/terminal.js';\nimport { ResourceContextKey } from '../../../common/contextkeys.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { getMultiSelectedResources, IExplorerService } from '../../files/browser/files.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isWindows } from '../../../../base/common/platform.js';\nimport { dirname, basename } from '../../../../base/common/path.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IExternalTerminalConfiguration, IExternalTerminalService } from '../../../../platform/externalTerminal/common/externalTerminal.js';\nimport { TerminalLocation } from '../../../../platform/terminal/common/terminal.js';\nimport { IListService } from '../../../../platform/list/browser/listService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\n\nconst OPEN_IN_TERMINAL_COMMAND_ID = 'openInTerminal';\nconst OPEN_IN_INTEGRATED_TERMINAL_COMMAND_ID = 'openInIntegratedTerminal';\n\nfunction registerOpenTerminalCommand(id: string, explorerKind: 'integrated' | 'external') {\n\tCommandsRegistry.registerCommand({\n\t\tid: id,\n\t\thandler: async (accessor, resource: URI) => {\n\n\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst integratedTerminalService = accessor.get(IIntegratedTerminalService);\n\t\t\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\t\t\tconst terminalGroupService = accessor.get(ITerminalGroupService);\n\t\t\tlet externalTerminalService: IExternalTerminalService | undefined = undefined;\n\t\t\ttry {\n\t\t\t\texternalTerminalService = accessor.get(IExternalTerminalService);\n\t\t\t} catch { }\n\n\t\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService), accessor.get(IEditorGroupsService), accessor.get(IExplorerService));\n\t\t\treturn fileService.resolveAll(resources.map(r => ({ resource: r }))).then(async stats => {\n\t\t\t\t// Always use integrated terminal when using a remote\n\t\t\t\tconst config = configurationService.getValue<IExternalTerminalConfiguration>();\n\n\t\t\t\tconst useIntegratedTerminal = remoteAgentService.getConnection() || explorerKind === 'integrated';\n\t\t\t\tconst targets = distinct(stats.filter(data => data.success));\n\t\t\t\tif (useIntegratedTerminal) {\n\t\t\t\t\t// TODO: Use uri for cwd in createterminal\n\t\t\t\t\tconst opened: { [path: string]: boolean } = {};\n\t\t\t\t\tconst cwds = targets.map(({ stat }) => {\n\t\t\t\t\t\tconst resource = stat!.resource;\n\t\t\t\t\t\tif (stat!.isDirectory) {\n\t\t\t\t\t\t\treturn resource;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn URI.from({\n\t\t\t\t\t\t\tscheme: resource.scheme,\n\t\t\t\t\t\t\tauthority: resource.authority,\n\t\t\t\t\t\t\tfragment: resource.fragment,\n\t\t\t\t\t\t\tquery: resource.query,\n\t\t\t\t\t\t\tpath: dirname(resource.path)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tfor (const cwd of cwds) {\n\t\t\t\t\t\tif (opened[cwd.path]) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\topened[cwd.path] = true;\n\t\t\t\t\t\tconst instance = await integratedTerminalService.createTerminal({ config: { cwd } });\n\t\t\t\t\t\tif (instance && instance.target !== TerminalLocation.Editor && (resources.length === 1 || !resource || cwd.path === resource.path || cwd.path === dirname(resource.path))) {\n\t\t\t\t\t\t\tintegratedTerminalService.setActiveInstance(instance);\n\t\t\t\t\t\t\tterminalGroupService.showPanel(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (externalTerminalService) {\n\t\t\t\t\tdistinct(targets.map(({ stat }) => stat!.isDirectory ? stat!.resource.fsPath : dirname(stat!.resource.fsPath))).forEach(cwd => {\n\t\t\t\t\t\texternalTerminalService.openTerminal(config.terminal.external, cwd);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nregisterOpenTerminalCommand(OPEN_IN_TERMINAL_COMMAND_ID, 'external');\nregisterOpenTerminalCommand(OPEN_IN_INTEGRATED_TERMINAL_COMMAND_ID, 'integrated');\n\nexport class ExternalTerminalContribution extends Disposable implements IWorkbenchContribution {\n\tprivate _openInIntegratedTerminalMenuItem: IMenuItem;\n\tprivate _openInTerminalMenuItem: IMenuItem;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tconst shouldShowIntegratedOnLocal = ContextKeyExpr.and(\n\t\t\tResourceContextKey.Scheme.isEqualTo(Schemas.file),\n\t\t\tContextKeyExpr.or(ContextKeyExpr.equals('config.terminal.explorerKind', 'integrated'), ContextKeyExpr.equals('config.terminal.explorerKind', 'both')));\n\n\n\t\tconst shouldShowExternalKindOnLocal = ContextKeyExpr.and(\n\t\t\tResourceContextKey.Scheme.isEqualTo(Schemas.file),\n\t\t\tContextKeyExpr.or(ContextKeyExpr.equals('config.terminal.explorerKind', 'external'), ContextKeyExpr.equals('config.terminal.explorerKind', 'both')));\n\n\t\tthis._openInIntegratedTerminalMenuItem = {\n\t\t\tgroup: 'navigation',\n\t\t\torder: 30,\n\t\t\tcommand: {\n\t\t\t\tid: OPEN_IN_INTEGRATED_TERMINAL_COMMAND_ID,\n\t\t\t\ttitle: nls.localize('scopedConsoleAction.Integrated', \"Open in Integrated Terminal\")\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.or(shouldShowIntegratedOnLocal, ResourceContextKey.Scheme.isEqualTo(Schemas.vscodeRemote))\n\t\t};\n\n\n\t\tthis._openInTerminalMenuItem = {\n\t\t\tgroup: 'navigation',\n\t\t\torder: 31,\n\t\t\tcommand: {\n\t\t\t\tid: OPEN_IN_TERMINAL_COMMAND_ID,\n\t\t\t\ttitle: nls.localize('scopedConsoleAction.external', \"Open in External Terminal\")\n\t\t\t},\n\t\t\twhen: shouldShowExternalKindOnLocal\n\t\t};\n\n\n\t\tMenuRegistry.appendMenuItem(MenuId.ExplorerContext, this._openInTerminalMenuItem);\n\t\tMenuRegistry.appendMenuItem(MenuId.ExplorerContext, this._openInIntegratedTerminalMenuItem);\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('terminal.explorerKind') || e.affectsConfiguration('terminal.external')) {\n\t\t\t\tthis._refreshOpenInTerminalMenuItemTitle();\n\t\t\t}\n\t\t}));\n\n\t\tthis._refreshOpenInTerminalMenuItemTitle();\n\t}\n\n\tprivate isWindows(): boolean {\n\t\tconst config = this._configurationService.getValue<IExternalTerminalConfiguration>().terminal;\n\t\tif (isWindows && config.external?.windowsExec) {\n\t\t\tconst file = basename(config.external.windowsExec);\n\t\t\tif (file === 'wt' || file === 'wt.exe') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _refreshOpenInTerminalMenuItemTitle(): void {\n\t\tif (this.isWindows()) {\n\t\t\tthis._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.wt', \"Open in Windows Terminal\");\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ExternalTerminalContribution, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": ["resource"]
}
