{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/test/browser/fileOnDiskProvider.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { workbenchInstantiationService, TestServiceAccessor } from '../../../../test/browser/workbenchTestServices.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { TextFileContentProvider } from '../../common/files.js';\nimport { snapshotToString } from '../../../../services/textfile/common/textfiles.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('Files - FileOnDiskContentProvider', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('provideTextContent', async () => {\n\t\tconst provider = disposables.add(instantiationService.createInstance(TextFileContentProvider));\n\t\tconst uri = URI.parse('testFileOnDiskContentProvider://foo');\n\n\t\tconst content = await provider.provideTextContent(uri.with({ scheme: 'conflictResolution', query: JSON.stringify({ scheme: uri.scheme }) }));\n\n\t\tassert.ok(content);\n\t\tassert.strictEqual(snapshotToString(content.createSnapshot()), 'Hello Html');\n\t\tassert.strictEqual(accessor.fileService.getLastReadFileUri().scheme, uri.scheme);\n\t\tassert.strictEqual(accessor.fileService.getLastReadFileUri().path, uri.path);\n\n\t\tcontent.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,WAAW;AACpB,SAAS,+BAA+B,2BAA2B;AACnE,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AAExD,MAAM,qCAAqC,MAAM;AAEhD,QAAM,cAAc,IAAI,gBAAgB;AACxC,MAAI;AACJ,MAAI;AAEJ,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAAA,EACnE,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,sBAAsB,YAAY;AACtC,UAAM,WAAW,YAAY,IAAI,qBAAqB,eAAe,uBAAuB,CAAC;AAC7F,UAAM,MAAM,IAAI,MAAM,qCAAqC;AAE3D,UAAM,UAAU,MAAM,SAAS,mBAAmB,IAAI,KAAK,EAAE,QAAQ,sBAAsB,OAAO,KAAK,UAAU,EAAE,QAAQ,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC;AAE3I,WAAO,GAAG,OAAO;AACjB,WAAO,YAAY,iBAAiB,QAAQ,eAAe,CAAC,GAAG,YAAY;AAC3E,WAAO,YAAY,SAAS,YAAY,mBAAmB,EAAE,QAAQ,IAAI,MAAM;AAC/E,WAAO,YAAY,SAAS,YAAY,mBAAmB,EAAE,MAAM,IAAI,IAAI;AAE3E,YAAQ,QAAQ;AAAA,EACjB,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
