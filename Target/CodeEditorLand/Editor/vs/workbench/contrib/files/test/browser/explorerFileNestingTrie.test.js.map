{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/test/browser/explorerFileNestingTrie.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PreTrie, ExplorerFileNestingTrie, SufTrie } from '../../common/explorerFileNestingTrie.js';\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst fakeFilenameAttributes = { dirname: 'mydir', basename: '', extname: '' };\n\nsuite('SufTrie', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('exactMatches', () => {\n\t\tconst t = new SufTrie();\n\t\tt.add('.npmrc', 'MyKey');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), []);\n\t});\n\n\ttest('starMatches', () => {\n\t\tconst t = new SufTrie();\n\t\tt.add('*.npmrc', 'MyKey');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t});\n\n\ttest('starSubstitutes', () => {\n\t\tconst t = new SufTrie();\n\t\tt.add('*.npmrc', '${capture}.json');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['.json']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['a.json']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['a.b.c.d.json']);\n\t});\n\n\ttest('multiMatches', () => {\n\t\tconst t = new SufTrie();\n\t\tt.add('*.npmrc', 'Key1');\n\t\tt.add('*.json', 'Key2');\n\t\tt.add('*d.npmrc', 'Key3');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['Key1']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.json', fakeFilenameAttributes), ['Key2']);\n\t\tassert.deepStrictEqual(t.get('a.json', fakeFilenameAttributes), ['Key2']);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['Key1']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['Key1', 'Key3']);\n\t});\n\n\ttest('multiSubstitutes', () => {\n\t\tconst t = new SufTrie();\n\t\tt.add('*.npmrc', 'Key1.${capture}.js');\n\t\tt.add('*.json', 'Key2.${capture}.js');\n\t\tt.add('*d.npmrc', 'Key3.${capture}.js');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['Key1..js']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.json', fakeFilenameAttributes), ['Key2..js']);\n\t\tassert.deepStrictEqual(t.get('a.json', fakeFilenameAttributes), ['Key2.a.js']);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['Key1.a.js']);\n\t\tassert.deepStrictEqual(t.get('a.b.cd.npmrc', fakeFilenameAttributes), ['Key1.a.b.cd.js', 'Key3.a.b.c.js']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['Key1.a.b.c.d.js', 'Key3.a.b.c..js']);\n\t});\n});\n\nsuite('PreTrie', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('exactMatches', () => {\n\t\tconst t = new PreTrie();\n\t\tt.add('.npmrc', 'MyKey');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), []);\n\t});\n\n\ttest('starMatches', () => {\n\t\tconst t = new PreTrie();\n\t\tt.add('*.npmrc', 'MyKey');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['MyKey']);\n\t});\n\n\ttest('starSubstitutes', () => {\n\t\tconst t = new PreTrie();\n\t\tt.add('*.npmrc', '${capture}.json');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['.json']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['a.json']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['a.b.c.d.json']);\n\t});\n\n\ttest('multiMatches', () => {\n\t\tconst t = new PreTrie();\n\t\tt.add('*.npmrc', 'Key1');\n\t\tt.add('*.json', 'Key2');\n\t\tt.add('*d.npmrc', 'Key3');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['Key1']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.json', fakeFilenameAttributes), ['Key2']);\n\t\tassert.deepStrictEqual(t.get('a.json', fakeFilenameAttributes), ['Key2']);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['Key1']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['Key1', 'Key3']);\n\t});\n\n\ttest('multiSubstitutes', () => {\n\t\tconst t = new PreTrie();\n\t\tt.add('*.npmrc', 'Key1.${capture}.js');\n\t\tt.add('*.json', 'Key2.${capture}.js');\n\t\tt.add('*d.npmrc', 'Key3.${capture}.js');\n\t\tassert.deepStrictEqual(t.get('.npmrc', fakeFilenameAttributes), ['Key1..js']);\n\t\tassert.deepStrictEqual(t.get('npmrc', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.npmrcs', fakeFilenameAttributes), []);\n\t\tassert.deepStrictEqual(t.get('.json', fakeFilenameAttributes), ['Key2..js']);\n\t\tassert.deepStrictEqual(t.get('a.json', fakeFilenameAttributes), ['Key2.a.js']);\n\t\tassert.deepStrictEqual(t.get('a.npmrc', fakeFilenameAttributes), ['Key1.a.js']);\n\t\tassert.deepStrictEqual(t.get('a.b.cd.npmrc', fakeFilenameAttributes), ['Key1.a.b.cd.js', 'Key3.a.b.c.js']);\n\t\tassert.deepStrictEqual(t.get('a.b.c.d.npmrc', fakeFilenameAttributes), ['Key1.a.b.c.d.js', 'Key3.a.b.c..js']);\n\t});\n\n\n\ttest('emptyMatches', () => {\n\t\tconst t = new PreTrie();\n\t\tt.add('package*json', 'package');\n\t\tassert.deepStrictEqual(t.get('package.json', fakeFilenameAttributes), ['package']);\n\t\tassert.deepStrictEqual(t.get('packagejson', fakeFilenameAttributes), ['package']);\n\t\tassert.deepStrictEqual(t.get('package-lock.json', fakeFilenameAttributes), ['package']);\n\t});\n});\n\nsuite('StarTrie', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst assertMapEquals = (actual: Map<string, Set<string>>, expected: Record<string, string[]>) => {\n\t\tconst actualStr = [...actual.entries()].map(e => `${e[0]} => [${[...e[1].keys()].join()}]`);\n\t\tconst expectedStr = Object.entries(expected).map(e => `${e[0]}: [${[e[1]].join()}]`);\n\t\tconst bigMsg = actualStr + '===' + expectedStr;\n\t\tassert.strictEqual(actual.size, Object.keys(expected).length, bigMsg);\n\t\tfor (const parent of actual.keys()) {\n\t\t\tconst act = actual.get(parent)!;\n\t\t\tconst exp = expected[parent];\n\t\t\tconst str = [...act.keys()].join() + '===' + exp.join();\n\t\t\tconst msg = bigMsg + '\\n' + str;\n\t\t\tassert(act.size === exp.length, msg);\n\t\t\tfor (const child of exp) {\n\t\t\t\tassert(act.has(child), msg);\n\t\t\t}\n\t\t}\n\t};\n\n\ttest('does added extension nesting', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*', ['${capture}.*']],\n\t\t]);\n\t\tconst nesting = t.nest([\n\t\t\t'file',\n\t\t\t'file.json',\n\t\t\t'boop.test',\n\t\t\t'boop.test1',\n\t\t\t'boop.test.1',\n\t\t\t'beep',\n\t\t\t'beep.test1',\n\t\t\t'beep.boop.test1',\n\t\t\t'beep.boop.test2',\n\t\t\t'beep.boop.a',\n\t\t], 'mydir');\n\t\tassertMapEquals(nesting, {\n\t\t\t'file': ['file.json'],\n\t\t\t'boop.test': ['boop.test.1'],\n\t\t\t'boop.test1': [],\n\t\t\t'beep': ['beep.test1', 'beep.boop.test1', 'beep.boop.test2', 'beep.boop.a']\n\t\t});\n\t});\n\n\ttest('does ext specific nesting', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*.ts', ['${capture}.js']],\n\t\t\t['*.js', ['${capture}.map']],\n\t\t]);\n\t\tconst nesting = t.nest([\n\t\t\t'a.ts',\n\t\t\t'a.js',\n\t\t\t'a.jss',\n\t\t\t'ab.js',\n\t\t\t'b.js',\n\t\t\t'b.map',\n\t\t\t'c.ts',\n\t\t\t'c.js',\n\t\t\t'c.map',\n\t\t\t'd.ts',\n\t\t\t'd.map',\n\t\t], 'mydir');\n\t\tassertMapEquals(nesting, {\n\t\t\t'a.ts': ['a.js'],\n\t\t\t'ab.js': [],\n\t\t\t'a.jss': [],\n\t\t\t'b.js': ['b.map'],\n\t\t\t'c.ts': ['c.js', 'c.map'],\n\t\t\t'd.ts': [],\n\t\t\t'd.map': [],\n\t\t});\n\t});\n\n\ttest('handles loops', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*.a', ['${capture}.b', '${capture}.c']],\n\t\t\t['*.b', ['${capture}.a']],\n\t\t\t['*.c', ['${capture}.d']],\n\n\t\t\t['*.aa', ['${capture}.bb']],\n\t\t\t['*.bb', ['${capture}.cc', '${capture}.dd']],\n\t\t\t['*.cc', ['${capture}.aa']],\n\t\t\t['*.dd', ['${capture}.ee']],\n\t\t]);\n\t\tconst nesting = t.nest([\n\t\t\t'.a', '.b', '.c', '.d',\n\t\t\t'a.a', 'a.b', 'a.d',\n\t\t\t'a.aa', 'a.bb', 'a.cc',\n\t\t\t'b.aa', 'b.bb',\n\t\t\t'c.bb', 'c.cc',\n\t\t\t'd.aa', 'd.cc',\n\t\t\t'e.aa', 'e.bb', 'e.dd', 'e.ee',\n\t\t\t'f.aa', 'f.bb', 'f.cc', 'f.dd', 'f.ee',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting, {\n\t\t\t'.a': [], '.b': [], '.c': [], '.d': [],\n\t\t\t'a.a': [], 'a.b': [], 'a.d': [],\n\t\t\t'a.aa': [], 'a.bb': [], 'a.cc': [],\n\t\t\t'b.aa': ['b.bb'],\n\t\t\t'c.bb': ['c.cc'],\n\t\t\t'd.cc': ['d.aa'],\n\t\t\t'e.aa': ['e.bb', 'e.dd', 'e.ee'],\n\t\t\t'f.aa': [], 'f.bb': [], 'f.cc': [], 'f.dd': [], 'f.ee': []\n\t\t});\n\t});\n\n\ttest('does general bidirectional suffix matching', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*-vsdoc.js', ['${capture}.js']],\n\t\t\t['*.js', ['${capture}-vscdoc.js']],\n\t\t]);\n\n\t\tconst nesting = t.nest([\n\t\t\t'a-vsdoc.js',\n\t\t\t'a.js',\n\t\t\t'b.js',\n\t\t\t'b-vscdoc.js',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting, {\n\t\t\t'a-vsdoc.js': ['a.js'],\n\t\t\t'b.js': ['b-vscdoc.js'],\n\t\t});\n\t});\n\n\ttest('does general bidirectional prefix matching', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['vsdoc-*.js', ['${capture}.js']],\n\t\t\t['*.js', ['vscdoc-${capture}.js']],\n\t\t]);\n\n\t\tconst nesting = t.nest([\n\t\t\t'vsdoc-a.js',\n\t\t\t'a.js',\n\t\t\t'b.js',\n\t\t\t'vscdoc-b.js',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting, {\n\t\t\t'vsdoc-a.js': ['a.js'],\n\t\t\t'b.js': ['vscdoc-b.js'],\n\t\t});\n\t});\n\n\ttest('does general bidirectional general matching', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['foo-*-bar.js', ['${capture}.js']],\n\t\t\t['*.js', ['bib-${capture}-bap.js']],\n\t\t]);\n\n\t\tconst nesting = t.nest([\n\t\t\t'foo-a-bar.js',\n\t\t\t'a.js',\n\t\t\t'b.js',\n\t\t\t'bib-b-bap.js',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting, {\n\t\t\t'foo-a-bar.js': ['a.js'],\n\t\t\t'b.js': ['bib-b-bap.js'],\n\t\t});\n\t});\n\n\ttest('does extension specific path segment matching', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*.js', ['${capture}.*.js']],\n\t\t]);\n\n\t\tconst nesting = t.nest([\n\t\t\t'foo.js',\n\t\t\t'foo.test.js',\n\t\t\t'fooTest.js',\n\t\t\t'bar.js.js',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting, {\n\t\t\t'foo.js': ['foo.test.js'],\n\t\t\t'fooTest.js': [],\n\t\t\t'bar.js.js': [],\n\t\t});\n\t});\n\n\ttest('does exact match nesting', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['package.json', ['.npmrc', 'npm-shrinkwrap.json', 'yarn.lock', '.yarnclean', '.yarnignore', '.yarn-integrity', '.yarnrc']],\n\t\t\t['bower.json', ['.bowerrc']],\n\t\t]);\n\n\t\tconst nesting = t.nest([\n\t\t\t'package.json',\n\t\t\t'.npmrc', 'npm-shrinkwrap.json', 'yarn.lock',\n\t\t\t'.bowerrc',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting, {\n\t\t\t'package.json': [\n\t\t\t\t'.npmrc', 'npm-shrinkwrap.json', 'yarn.lock'],\n\t\t\t'.bowerrc': [],\n\t\t});\n\t});\n\n\ttest('eslint test', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['.eslintrc*', ['.eslint*']],\n\t\t]);\n\n\t\tconst nesting1 = t.nest([\n\t\t\t'.eslintrc.json',\n\t\t\t'.eslintignore',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting1, {\n\t\t\t'.eslintrc.json': ['.eslintignore'],\n\t\t});\n\n\t\tconst nesting2 = t.nest([\n\t\t\t'.eslintrc',\n\t\t\t'.eslintignore',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting2, {\n\t\t\t'.eslintrc': ['.eslintignore'],\n\t\t});\n\t});\n\n\ttest('basename expansion', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*-vsdoc.js', ['${basename}.doc']],\n\t\t]);\n\n\t\tconst nesting1 = t.nest([\n\t\t\t'boop-vsdoc.js',\n\t\t\t'boop-vsdoc.doc',\n\t\t\t'boop.doc',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting1, {\n\t\t\t'boop-vsdoc.js': ['boop-vsdoc.doc'],\n\t\t\t'boop.doc': [],\n\t\t});\n\t});\n\n\ttest('extname expansion', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*-vsdoc.js', ['${extname}.doc']],\n\t\t]);\n\n\t\tconst nesting1 = t.nest([\n\t\t\t'boop-vsdoc.js',\n\t\t\t'js.doc',\n\t\t\t'boop.doc',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting1, {\n\t\t\t'boop-vsdoc.js': ['js.doc'],\n\t\t\t'boop.doc': [],\n\t\t});\n\t});\n\n\ttest('added segment matcher', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*', ['${basename}.*.${extname}']],\n\t\t]);\n\n\t\tconst nesting1 = t.nest([\n\t\t\t'some.file',\n\t\t\t'some.html.file',\n\t\t\t'some.html.nested.file',\n\t\t\t'other.file',\n\t\t\t'some.thing',\n\t\t\t'some.thing.else',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting1, {\n\t\t\t'some.file': ['some.html.file', 'some.html.nested.file'],\n\t\t\t'other.file': [],\n\t\t\t'some.thing': [],\n\t\t\t'some.thing.else': [],\n\t\t});\n\t});\n\n\ttest('added segment matcher (old format)', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['*', ['$(basename).*.$(extname)']],\n\t\t]);\n\n\t\tconst nesting1 = t.nest([\n\t\t\t'some.file',\n\t\t\t'some.html.file',\n\t\t\t'some.html.nested.file',\n\t\t\t'other.file',\n\t\t\t'some.thing',\n\t\t\t'some.thing.else',\n\t\t], 'mydir');\n\n\t\tassertMapEquals(nesting1, {\n\t\t\t'some.file': ['some.html.file', 'some.html.nested.file'],\n\t\t\t'other.file': [],\n\t\t\t'some.thing': [],\n\t\t\t'some.thing.else': [],\n\t\t});\n\t});\n\n\ttest('dirname matching', () => {\n\t\tconst t = new ExplorerFileNestingTrie([\n\t\t\t['index.ts', ['${dirname}.ts']],\n\t\t]);\n\n\t\tconst nesting1 = t.nest([\n\t\t\t'otherFile.ts',\n\t\t\t'MyComponent.ts',\n\t\t\t'index.ts',\n\t\t], 'MyComponent');\n\n\t\tassertMapEquals(nesting1, {\n\t\t\t'index.ts': ['MyComponent.ts'],\n\t\t\t'otherFile.ts': [],\n\t\t});\n\t});\n\n\ttest.skip('is fast', () => {\n\t\tconst bigNester = new ExplorerFileNestingTrie([\n\t\t\t['*', ['${capture}.*']],\n\t\t\t['*.js', ['${capture}.*.js', '${capture}.map']],\n\t\t\t['*.jsx', ['${capture}.js']],\n\t\t\t['*.ts', ['${capture}.js', '${capture}.*.ts']],\n\t\t\t['*.tsx', ['${capture}.js']],\n\t\t\t['*.css', ['${capture}.*.css', '${capture}.map']],\n\t\t\t['*.html', ['${capture}.*.html']],\n\t\t\t['*.htm', ['${capture}.*.htm']],\n\t\t\t['*.less', ['${capture}.*.less', '${capture}.css']],\n\t\t\t['*.scss', ['${capture}.*.scss', '${capture}.css']],\n\t\t\t['*.sass', ['${capture}.css']],\n\t\t\t['*.styl', ['${capture}.css']],\n\t\t\t['*.coffee', ['${capture}.*.coffee', '${capture}.js']],\n\t\t\t['*.iced', ['${capture}.*.iced', '${capture}.js']],\n\t\t\t['*.config', ['${capture}.*.config']],\n\t\t\t['*.cs', ['${capture}.*.cs', '${capture}.cs.d.ts']],\n\t\t\t['*.vb', ['${capture}.*.vb']],\n\t\t\t['*.json', ['${capture}.*.json']],\n\t\t\t['*.md', ['${capture}.html']],\n\t\t\t['*.mdown', ['${capture}.html']],\n\t\t\t['*.markdown', ['${capture}.html']],\n\t\t\t['*.mdwn', ['${capture}.html']],\n\t\t\t['*.svg', ['${capture}.svgz']],\n\t\t\t['*.a', ['${capture}.b']],\n\t\t\t['*.b', ['${capture}.a']],\n\t\t\t['*.resx', ['${capture}.designer.cs']],\n\t\t\t['package.json', ['.npmrc', 'npm-shrinkwrap.json', 'yarn.lock', '.yarnclean', '.yarnignore', '.yarn-integrity', '.yarnrc']],\n\t\t\t['bower.json', ['.bowerrc']],\n\t\t\t['*-vsdoc.js', ['${capture}.js']],\n\t\t\t['*.tt', ['${capture}.*']]\n\t\t]);\n\n\t\tconst bigFiles = Array.from({ length: 50000 / 6 }).map((_, i) => [\n\t\t\t'file' + i + '.js',\n\t\t\t'file' + i + '.map',\n\t\t\t'file' + i + '.css',\n\t\t\t'file' + i + '.ts',\n\t\t\t'file' + i + '.d.ts',\n\t\t\t'file' + i + '.jsx',\n\t\t]).flat();\n\n\t\tconst start = performance.now();\n\t\t// const _bigResult =\n\t\tbigNester.nest(bigFiles, 'mydir');\n\t\tconst end = performance.now();\n\t\tassert(end - start < 1000, 'too slow...' + (end - start));\n\t\t// console.log(bigResult)\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
