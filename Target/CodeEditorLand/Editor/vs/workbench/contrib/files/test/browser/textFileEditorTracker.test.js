import a from"assert";import{Event as S}from"../../../../../base/common/event.js";import{TextFileEditorTracker as I}from"../../browser/editors/textFileEditorTracker.js";import{ensureNoDisposablesAreLeakedInTestSuite as y,toResource as d}from"../../../../../base/test/common/utils.js";import{IEditorService as F}from"../../../../services/editor/common/editorService.js";import{workbenchInstantiationService as h,TestServiceAccessor as g,TestFilesConfigurationService as O,registerTestFileEditor as R,registerTestResourceEditor as k,createEditorPart as D,TestEnvironmentService as C,TestFileService as M,workbenchTeardown as b,TestTextResourceConfigurationService as U}from"../../../../test/browser/workbenchTestServices.js";import{snapshotToString as x}from"../../../../services/textfile/common/textfiles.js";import{FileChangesEvent as P,FileChangeType as A,FileOperationError as _,FileOperationResult as N}from"../../../../../platform/files/common/files.js";import{IEditorGroupsService as G}from"../../../../services/editor/common/editorGroupsService.js";import{timeout as w}from"../../../../../base/common/async.js";import{DisposableStore as L}from"../../../../../base/common/lifecycle.js";import"../../../../services/textfile/common/textFileEditorModelManager.js";import{EditorService as q}from"../../../../services/editor/browser/editorService.js";import"../../../../services/untitled/common/untitledTextEditorInput.js";import{isEqual as H}from"../../../../../base/common/resources.js";import"../../../../../base/common/uri.js";import{TestConfigurationService as K}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{IConfigurationService as V}from"../../../../../platform/configuration/common/configuration.js";import{IFilesConfigurationService as W}from"../../../../services/filesConfiguration/common/filesConfigurationService.js";import{MockContextKeyService as j}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import"../../../../../platform/contextkey/common/contextkey.js";import{FILE_EDITOR_INPUT_ID as u}from"../../common/files.js";import{DEFAULT_EDITOR_ASSOCIATION as c}from"../../../../common/editor.js";import{TestWorkspace as z}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{TestContextService as B,TestMarkerService as J}from"../../../../test/common/workbenchTestServices.js";import{UriIdentityService as Q}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";suite("Files - TextFileEditorTracker",()=>{const r=new L;class E extends I{getDirtyTextFileTrackerDelay(){return 5}}setup(()=>{r.add(R()),r.add(k())}),teardown(()=>{r.clear()});async function l(e=!1){const t=h(void 0,r),o=new K;e?o.setUserConfiguration("files",{autoSave:"afterDelay",autoSaveDelay:1}):o.setUserConfiguration("files",{autoSave:"off",autoSaveDelay:1}),t.stub(V,o);const i=r.add(new M);t.stub(W,r.add(new O(t.createInstance(j),o,new B(z),C,r.add(new Q(i)),i,new J,new U(o))));const s=await D(t,r);t.stub(G,s);const n=r.add(t.createInstance(q,void 0));r.add(n),t.stub(F,n);const m=t.createInstance(g);return r.add(m.textFileService.files),r.add(t.createInstance(E)),{accessor:m,cleanup:async()=>{await b(t),s.dispose()}}}test("file change event updates model",async function(){const{accessor:e,cleanup:t}=await l(),o=d.call(this,"/path/index.txt"),i=await e.textFileService.files.resolve(o);r.add(i),i.textEditorModel.setValue("Super Good"),a.strictEqual(x(i.createSnapshot()),"Super Good"),await i.save(),e.fileService.fireFileChanges(new P([{resource:o,type:A.UPDATED}],!1)),await w(0),a.strictEqual(x(i.createSnapshot()),"Hello Html"),await t()}),test("dirty text file model opens as editor",async function(){const e=d.call(this,"/path/index.txt");await f(e,!1,!1)}),test("dirty text file model does not open as editor if autosave is ON",async function(){const e=d.call(this,"/path/index.txt");await f(e,!0,!1)}),test("dirty text file model opens as editor when save fails",async function(){const e=d.call(this,"/path/index.txt");await f(e,!1,!0)}),test("dirty text file model opens as editor when save fails if autosave is ON",async function(){const e=d.call(this,"/path/index.txt");await f(e,!0,!0)});async function f(e,t,o){const{accessor:i,cleanup:s}=await l(t);a.ok(!i.editorService.isOpened({resource:e,typeId:u,editorId:c.id})),o&&i.textFileService.setWriteErrorOnce(new _("fail to write",N.FILE_OTHER_ERROR));const n=await i.textFileService.files.resolve(e);r.add(n),n.textEditorModel.setValue("Super Good"),t?(await n.save(),await w(10),o?a.ok(i.editorService.isOpened({resource:e,typeId:u,editorId:c.id})):a.ok(!i.editorService.isOpened({resource:e,typeId:u,editorId:c.id}))):(await v(i.editorService),a.ok(i.editorService.isOpened({resource:e,typeId:u,editorId:c.id}))),await s()}test("dirty untitled text file model opens as editor",function(){return p(!1)}),test("dirty untitled text file model opens as editor - autosave ON",function(){return p(!0)});async function p(e){const{accessor:t,cleanup:o}=await l(e),i=await t.textEditorService.resolveTextEditor({resource:void 0,forceUntitled:!0}),s=r.add(await i.resolve());a.ok(!t.editorService.isOpened(i)),s.textEditorModel?.setValue("Super Good"),await v(t.editorService),a.ok(t.editorService.isOpened(i)),await o()}function v(e){return S.toPromise(S.once(e.onDidActiveEditorChange))}test("non-dirty files reload on window focus",async function(){const{accessor:e,cleanup:t}=await l(),o=d.call(this,"/path/index.txt");await e.editorService.openEditor(await e.textEditorService.resolveTextEditor({resource:o,options:{override:c.id}})),e.hostService.setFocus(!1),e.hostService.setFocus(!0),await T(e.textFileService,o),await t()});function T(e,t){return new Promise(o=>{const i=e.files.onDidResolve(s=>{H(s.model.resource,t)&&(i.dispose(),o())})})}y()});
