{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/test/browser/textFileEditorTracker.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event } from '../../../../../base/common/event.js';\nimport { TextFileEditorTracker } from '../../browser/editors/textFileEditorTracker.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { workbenchInstantiationService, TestServiceAccessor, TestFilesConfigurationService, registerTestFileEditor, registerTestResourceEditor, createEditorPart, TestEnvironmentService, TestFileService, workbenchTeardown, TestTextResourceConfigurationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { IResolvedTextFileEditorModel, snapshotToString, ITextFileService } from '../../../../services/textfile/common/textfiles.js';\nimport { FileChangesEvent, FileChangeType, FileOperationError, FileOperationResult } from '../../../../../platform/files/common/files.js';\nimport { IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { TextFileEditorModelManager } from '../../../../services/textfile/common/textFileEditorModelManager.js';\nimport { EditorService } from '../../../../services/editor/browser/editorService.js';\nimport { UntitledTextEditorInput } from '../../../../services/untitled/common/untitledTextEditorInput.js';\nimport { isEqual } from '../../../../../base/common/resources.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { IFilesConfigurationService } from '../../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { FILE_EDITOR_INPUT_ID } from '../../common/files.js';\nimport { DEFAULT_EDITOR_ASSOCIATION } from '../../../../common/editor.js';\nimport { TestWorkspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { TestContextService, TestMarkerService } from '../../../../test/common/workbenchTestServices.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\n\nsuite('Files - TextFileEditorTracker', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tclass TestTextFileEditorTracker extends TextFileEditorTracker {\n\n\t\tprotected override getDirtyTextFileTrackerDelay(): number {\n\t\t\treturn 5; // encapsulated in a method for tests to override\n\t\t}\n\t}\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestFileEditor());\n\t\tdisposables.add(registerTestResourceEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function createTracker(autoSaveEnabled = false): Promise<{ accessor: TestServiceAccessor; cleanup: () => Promise<void> }> {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst configurationService = new TestConfigurationService();\n\t\tif (autoSaveEnabled) {\n\t\t\tconfigurationService.setUserConfiguration('files', { autoSave: 'afterDelay', autoSaveDelay: 1 });\n\t\t} else {\n\t\t\tconfigurationService.setUserConfiguration('files', { autoSave: 'off', autoSaveDelay: 1 });\n\t\t}\n\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\n\t\tconst fileService = disposables.add(new TestFileService());\n\n\t\tinstantiationService.stub(IFilesConfigurationService, disposables.add(new TestFilesConfigurationService(\n\t\t\t<IContextKeyService>instantiationService.createInstance(MockContextKeyService),\n\t\t\tconfigurationService,\n\t\t\tnew TestContextService(TestWorkspace),\n\t\t\tTestEnvironmentService,\n\t\t\tdisposables.add(new UriIdentityService(fileService)),\n\t\t\tfileService,\n\t\t\tnew TestMarkerService(),\n\t\t\tnew TestTextResourceConfigurationService(configurationService)\n\t\t)));\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = disposables.add(instantiationService.createInstance(EditorService, undefined));\n\t\tdisposables.add(editorService);\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\tconst accessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add((<TextFileEditorModelManager>accessor.textFileService.files));\n\n\t\tdisposables.add(instantiationService.createInstance(TestTextFileEditorTracker));\n\n\t\tconst cleanup = async () => {\n\t\t\tawait workbenchTeardown(instantiationService);\n\t\t\tpart.dispose();\n\t\t};\n\n\t\treturn { accessor, cleanup };\n\t}\n\n\ttest('file change event updates model', async function () {\n\t\tconst { accessor, cleanup } = await createTracker();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\t\tdisposables.add(model);\n\n\t\tmodel.textEditorModel.setValue('Super Good');\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), 'Super Good');\n\n\t\tawait model.save();\n\n\t\t// change event (watcher)\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.UPDATED }], false));\n\n\t\tawait timeout(0); // due to event updating model async\n\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), 'Hello Html');\n\n\t\tawait cleanup();\n\t});\n\n\ttest('dirty text file model opens as editor', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, false, false);\n\t});\n\n\ttest('dirty text file model does not open as editor if autosave is ON', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, true, false);\n\t});\n\n\ttest('dirty text file model opens as editor when save fails', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, false, true);\n\t});\n\n\ttest('dirty text file model opens as editor when save fails if autosave is ON', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, true, true);\n\t});\n\n\tasync function testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource: URI, autoSave: boolean, error: boolean): Promise<void> {\n\t\tconst { accessor, cleanup } = await createTracker(autoSave);\n\n\t\tassert.ok(!accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\n\t\tif (error) {\n\t\t\taccessor.textFileService.setWriteErrorOnce(new FileOperationError('fail to write', FileOperationResult.FILE_OTHER_ERROR));\n\t\t}\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\t\tdisposables.add(model);\n\n\t\tmodel.textEditorModel.setValue('Super Good');\n\n\t\tif (autoSave) {\n\t\t\tawait model.save();\n\t\t\tawait timeout(10);\n\t\t\tif (error) {\n\t\t\t\tassert.ok(accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\t\t\t} else {\n\t\t\t\tassert.ok(!accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\t\t\t}\n\t\t} else {\n\t\t\tawait awaitEditorOpening(accessor.editorService);\n\t\t\tassert.ok(accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\t\t}\n\n\t\tawait cleanup();\n\t}\n\n\ttest('dirty untitled text file model opens as editor', function () {\n\t\treturn testUntitledEditor(false);\n\t});\n\n\ttest('dirty untitled text file model opens as editor - autosave ON', function () {\n\t\treturn testUntitledEditor(true);\n\t});\n\n\tasync function testUntitledEditor(autoSaveEnabled: boolean): Promise<void> {\n\t\tconst { accessor, cleanup } = await createTracker(autoSaveEnabled);\n\n\t\tconst untitledTextEditor = await accessor.textEditorService.resolveTextEditor({ resource: undefined, forceUntitled: true }) as UntitledTextEditorInput;\n\t\tconst model = disposables.add(await untitledTextEditor.resolve());\n\n\t\tassert.ok(!accessor.editorService.isOpened(untitledTextEditor));\n\n\t\tmodel.textEditorModel?.setValue('Super Good');\n\n\t\tawait awaitEditorOpening(accessor.editorService);\n\t\tassert.ok(accessor.editorService.isOpened(untitledTextEditor));\n\n\t\tawait cleanup();\n\t}\n\n\tfunction awaitEditorOpening(editorService: IEditorService): Promise<void> {\n\t\treturn Event.toPromise(Event.once(editorService.onDidActiveEditorChange));\n\t}\n\n\ttest('non-dirty files reload on window focus', async function () {\n\t\tconst { accessor, cleanup } = await createTracker();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait accessor.editorService.openEditor(await accessor.textEditorService.resolveTextEditor({ resource, options: { override: DEFAULT_EDITOR_ASSOCIATION.id } }));\n\n\t\taccessor.hostService.setFocus(false);\n\t\taccessor.hostService.setFocus(true);\n\n\t\tawait awaitModelResolveEvent(accessor.textFileService, resource);\n\n\t\tawait cleanup();\n\t});\n\n\tfunction awaitModelResolveEvent(textFileService: ITextFileService, resource: URI): Promise<void> {\n\t\treturn new Promise(resolve => {\n\t\t\tconst listener = textFileService.files.onDidResolve(e => {\n\t\t\t\tif (isEqual(e.model.resource, resource)) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
