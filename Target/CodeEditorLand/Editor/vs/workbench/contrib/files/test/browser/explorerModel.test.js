import e from"assert";import{isLinux as w,isWindows as P,OS as r}from"../../../../../base/common/platform.js";import{URI as p}from"../../../../../base/common/uri.js";import{join as q}from"../../../../../base/common/path.js";import{validateFileName as h}from"../../browser/fileActions.js";import{ExplorerItem as u}from"../../common/explorerModel.js";import{ensureNoDisposablesAreLeakedInTestSuite as b,toResource as f}from"../../../../../base/test/common/utils.js";import{TestFileService as D,TestPathService as k}from"../../../../test/browser/workbenchTestServices.js";import{TestConfigurationService as v}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{NullFilesConfigurationService as E}from"../../../../test/common/workbenchTestServices.js";suite("Files - View Model",function(){const C=new D,g=new v;function l(a,t,s,i,n,d){return new u(f.call(this,a),C,g,E,void 0,s,!1,!1,!1,t,d)}const o=new k;test("Properties",function(){const a=new Date().getTime();let t=l.call(this,"/path/to/stat","sName",!0,!0,8096,a);e.strictEqual(t.isDirectoryResolved,!1),e.strictEqual(t.resource.fsPath,f.call(this,"/path/to/stat").fsPath),e.strictEqual(t.name,"sName"),e.strictEqual(t.isDirectory,!0),e.strictEqual(t.mtime,new Date(a).getTime()),t=l.call(this,"/path/to/stat","sName",!1,!1,8096,a)}),test("Add and Remove Child, check for hasChild",function(){const a=new Date().getTime(),t=l.call(this,"/path/to/stat","sName",!0,!1,8096,a),s=l.call(this,"/path/to/stat/foo","foo",!0,!1,8096,a),i=l.call(this,"/otherpath/to/other/otherbar.html","otherbar.html",!1,!1,8096,a);t.addChild(s),e(!!t.getChild(s.name)),t.removeChild(s),t.addChild(s),e(!!t.getChild(s.name)),t.removeChild(s),e(!t.getChild(s.name)),t.addChild(i),e.strictEqual(i.resource.fsPath,f.call(this,"/path/to/stat/"+i.name).fsPath)}),test("Move",function(){const a=new Date().getTime(),t=l.call(this,"/","/",!0,!1,8096,a),s=l.call(this,"/path","path",!0,!1,8096,a),i=l.call(this,"/path/to","to",!0,!1,8096,a),n=l.call(this,"/path/to/stat","stat",!1,!1,8096,a);t.addChild(s),s.addChild(i),i.addChild(n),n.move(t),e.strictEqual(n.resource.fsPath,f.call(this,"/"+n.name).fsPath);const d=l.call(this,"/leaf","leaf",!0,!1,8096,a),c=l.call(this,"/leaf/folder","folder",!0,!1,8096,a),m=l.call(this,"/leaf/folder/index.html","index.html",!0,!1,8096,a);d.addChild(c),c.addChild(m),t.addChild(d),c.move(i),e.strictEqual(c.resource.fsPath,p.file(i.resource.fsPath+"/"+c.name).fsPath),e.strictEqual(m.resource.fsPath,p.file(c.resource.fsPath+"/"+m.name).fsPath)}),test("Rename",function(){const a=new Date().getTime(),t=l.call(this,"/","/",!0,!1,8096,a),s=l.call(this,"/path","path",!0,!1,8096,a),i=l.call(this,"/path/to","to",!0,!1,8096,a),n=l.call(this,"/path/to/stat","stat",!0,!1,8096,a);t.addChild(s),s.addChild(i),i.addChild(n),e.strictEqual(t.getChild(s.name),s);const d=l.call(this,"/otherpath","otherpath",!0,!0,8096,a);s.rename(d),e.strictEqual(t.getChild(s.name),s),e.strictEqual(s.name,d.name),e.strictEqual(s.resource.fsPath,d.resource.fsPath),e.strictEqual(i.resource.fsPath,f.call(this,"/otherpath/to").fsPath),e.strictEqual(n.resource.fsPath,f.call(this,"/otherpath/to/stat").fsPath);const c=l.call(this,"/otherpath/to/statother.js","statother.js",!0,!1,8096,a);n.rename(c),e.strictEqual(i.getChild(n.name),n),e.strictEqual(n.name,c.name),e.strictEqual(n.resource.fsPath,c.resource.fsPath)}),test("Find",function(){const a=new Date().getTime(),t=l.call(this,"/","/",!0,!1,8096,a),s=l.call(this,"/path","path",!0,!1,8096,a),i=l.call(this,"/path/to","to",!0,!1,8096,a),n=l.call(this,"/path/to/stat","stat",!0,!1,8096,a),d=l.call(this,"/path/to/STAT","stat",!0,!1,8096,a),c=l.call(this,"/path/to/stat/foo","foo",!0,!1,8096,a),m=l.call(this,"/path/to/stat/foo/bar.html","bar.html",!1,!1,8096,a);t.addChild(s),s.addChild(i),i.addChild(n),n.addChild(c),c.addChild(m),e.strictEqual(t.find(m.resource),m),e.strictEqual(t.find(c.resource),c),e.strictEqual(t.find(n.resource),n),e.strictEqual(t.find(i.resource),i),e.strictEqual(t.find(s.resource),s),w?e.ok(!t.find(d.resource)):e.strictEqual(t.find(d.resource),n),e.strictEqual(t.find(f.call(this,"foobar")),null),e.strictEqual(t.find(f.call(this,"/")),t)}),test("Find with mixed case",function(){const a=new Date().getTime(),t=l.call(this,"/","/",!0,!1,8096,a),s=l.call(this,"/path","path",!0,!1,8096,a),i=l.call(this,"/path/to","to",!0,!1,8096,a),n=l.call(this,"/path/to/stat","stat",!0,!1,8096,a),d=l.call(this,"/path/to/stat/foo","foo",!0,!1,8096,a),c=l.call(this,"/path/to/stat/foo/bar.html","bar.html",!1,!1,8096,a);t.addChild(s),s.addChild(i),i.addChild(n),n.addChild(d),d.addChild(c),w?(e.ok(!t.find(f.call(this,"/path/to/stat/Foo"))),e.ok(!t.find(f.call(this,"/Path/to/stat/foo/bar.html")))):(e.ok(t.find(f.call(this,"/path/to/stat/Foo"))),e.ok(t.find(f.call(this,"/Path/to/stat/foo/bar.html"))))}),test("Validate File Name (For Create)",function(){const a=new Date().getTime(),t=l.call(this,"/path/to/stat","sName",!0,!0,8096,a),s=l.call(this,"/path/to/stat/alles.klar","alles.klar",!0,!0,8096,a);t.addChild(s),e(h(o,t,null,r)!==null),e(h(o,t,"",r)!==null),e(h(o,t,"  ",r)!==null),e(h(o,t,"Read Me",r)===null,"name containing space"),P&&(e(h(o,t,"foo:bar",r)!==null),e(h(o,t,"foo*bar",r)!==null),e(h(o,t,"foo?bar",r)!==null),e(h(o,t,"foo<bar",r)!==null),e(h(o,t,"foo>bar",r)!==null),e(h(o,t,"foo|bar",r)!==null)),e(h(o,t,"alles.klar",r)===null),e(h(o,t,".foo",r)===null),e(h(o,t,"foo.bar",r)===null),e(h(o,t,"foo",r)===null)}),test("Validate File Name (For Rename)",function(){const a=new Date().getTime(),t=l.call(this,"/path/to/stat","sName",!0,!0,8096,a),s=l.call(this,"/path/to/stat/alles.klar","alles.klar",!0,!0,8096,a);t.addChild(s),e(h(o,t,"alles.klar",r)===null),e(h(o,t,"Alles.klar",r)===null),e(h(o,t,"Alles.Klar",r)===null),e(h(o,t,".foo",r)===null),e(h(o,t,"foo.bar",r)===null),e(h(o,t,"foo",r)===null)}),test("Validate Multi-Path File Names",function(){const a=new Date().getTime(),t=l.call(this,"/","workspaceFolder",!0,!1,8096,a);e(h(o,t,"foo/bar",r)===null),e(h(o,t,"foo\\bar",r)===null),e(h(o,t,"all/slashes/are/same",r)===null),e(h(o,t,"theres/one/different\\slash",r)===null),e(h(o,t,"/slashAtBeginning",r)!==null);const s=l.call(this,"/path","path",!0,!1,8096,a),i=l.call(this,"/path/to","to",!0,!1,8096,a),n=l.call(this,"/path/to/stat","stat",!0,!1,8096,a);t.addChild(s),s.addChild(i),i.addChild(n);const d=l.call(this,"/path/to/stat/fileNested","fileNested",!1,!1,8096,a);n.addChild(d),e(h(o,t,"/path/to/stat/fileNested/aChild",r)!==null),e(h(o,t,"/path/to/stat/fileNested",r)!==null),e(h(o,t,"/path/to/stat/",r)!==null)}),test("Merge Local with Disk",function(){const a=new u(p.file(q("C:\\","/path/to")),C,g,E,void 0,!0,!1,!1,!1,"to",Date.now()),t=new u(p.file(q("C:\\","/path/to")),C,g,E,void 0,!0,!1,!1,!1,"to",Date.now());u.mergeLocalWithDisk(t,a),e.strictEqual(a.mtime,t.mtime),t.addChild(new u(p.file(q("C:\\","/path/to/foo.html")),C,g,E,void 0,!0,!1,!1,!1,"foo.html",Date.now())),u.mergeLocalWithDisk(t,a);const s=new u(p.file(q("C:\\","/path/to/foo.html")),C,g,E,void 0,!0,!1,!1,!1,"foo.html",Date.now());t.removeChild(s),t.addChild(s),t._isDirectoryResolved=!0,u.mergeLocalWithDisk(t,a),e.strictEqual(a.getChild("foo.html").name,"foo.html"),e.deepStrictEqual(a.getChild("foo.html").parent,a,"Check parent");const i=a.getChild("foo.html");u.mergeLocalWithDisk(t,a),e.ok(i===a.getChild(i.name))}),b()});
