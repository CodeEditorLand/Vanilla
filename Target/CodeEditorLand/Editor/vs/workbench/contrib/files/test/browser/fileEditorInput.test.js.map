{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/test/browser/fileEditorInput.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { FileEditorInput } from '../../browser/editors/fileEditorInput.js';\nimport { workbenchInstantiationService, TestServiceAccessor, getLastResolvedFileStat } from '../../../../test/browser/workbenchTestServices.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorFactoryRegistry, Verbosity, EditorExtensions, EditorInputCapabilities } from '../../../../common/editor.js';\nimport { EncodingMode, TextFileOperationError, TextFileOperationResult } from '../../../../services/textfile/common/textfiles.js';\nimport { FileOperationResult, NotModifiedSinceFileOperationError, TooLargeFileOperationError } from '../../../../../platform/files/common/files.js';\nimport { TextFileEditorModel } from '../../../../services/textfile/common/textFileEditorModel.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { BinaryEditorModel } from '../../../../common/editor/binaryEditorModel.js';\nimport { IResourceEditorInput } from '../../../../../platform/editor/common/editor.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { FileEditorInputSerializer } from '../../browser/editors/fileEditorHandler.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { TextEditorService } from '../../../../services/textfile/common/textEditorService.js';\n\nsuite('Files - FileEditorInput', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tfunction createFileInput(resource: URI, preferredResource?: URI, preferredLanguageId?: string, preferredName?: string, preferredDescription?: string, preferredContents?: string): FileEditorInput {\n\t\treturn disposables.add(instantiationService.createInstance(FileEditorInput, resource, preferredResource, preferredName, preferredDescription, undefined, preferredLanguageId, preferredContents));\n\t}\n\n\tclass TestTextEditorService extends TextEditorService {\n\t\toverride createTextEditor(input: IResourceEditorInput) {\n\t\t\treturn createFileInput(input.resource);\n\t\t}\n\n\t\toverride async resolveTextEditor(input: IResourceEditorInput) {\n\t\t\treturn createFileInput(input.resource);\n\t\t}\n\t}\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService({\n\t\t\ttextEditorService: instantiationService => instantiationService.createInstance(TestTextEditorService)\n\t\t}, disposables);\n\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('Basics', async function () {\n\t\tlet input = createFileInput(toResource.call(this, '/foo/bar/file.js'));\n\t\tconst otherInput = createFileInput(toResource.call(this, 'foo/bar/otherfile.js'));\n\t\tconst otherInputSame = createFileInput(toResource.call(this, 'foo/bar/file.js'));\n\n\t\tassert(input.matches(input));\n\t\tassert(input.matches(otherInputSame));\n\t\tassert(!input.matches(otherInput));\n\t\tassert.ok(input.getName());\n\t\tassert.ok(input.getDescription());\n\t\tassert.ok(input.getTitle(Verbosity.SHORT));\n\n\t\tassert.ok(!input.hasCapability(EditorInputCapabilities.Untitled));\n\t\tassert.ok(!input.hasCapability(EditorInputCapabilities.Readonly));\n\t\tassert.ok(!input.isReadonly());\n\t\tassert.ok(!input.hasCapability(EditorInputCapabilities.Singleton));\n\t\tassert.ok(!input.hasCapability(EditorInputCapabilities.RequiresTrust));\n\n\t\tconst untypedInput = input.toUntyped({ preserveViewState: 0 });\n\t\tassert.strictEqual(untypedInput.resource.toString(), input.resource.toString());\n\n\t\tassert.strictEqual('file.js', input.getName());\n\n\t\tassert.strictEqual(toResource.call(this, '/foo/bar/file.js').fsPath, input.resource.fsPath);\n\t\tassert(input.resource instanceof URI);\n\n\t\tinput = createFileInput(toResource.call(this, '/foo/bar.html'));\n\n\t\tconst inputToResolve: FileEditorInput = createFileInput(toResource.call(this, '/foo/bar/file.js'));\n\t\tconst sameOtherInput: FileEditorInput = createFileInput(toResource.call(this, '/foo/bar/file.js'));\n\n\t\tlet resolved = await inputToResolve.resolve();\n\t\tassert.ok(inputToResolve.isResolved());\n\n\t\tconst resolvedModelA = resolved;\n\t\tresolved = await inputToResolve.resolve();\n\t\tassert(resolvedModelA === resolved); // OK: Resolved Model cached globally per input\n\n\t\ttry {\n\t\t\tDisposableStore.DISABLE_DISPOSED_WARNING = true; // prevent unwanted warning output from occurring\n\n\t\t\tconst otherResolved = await sameOtherInput.resolve();\n\t\t\tassert(otherResolved === resolvedModelA); // OK: Resolved Model cached globally per input\n\t\t\tinputToResolve.dispose();\n\n\t\t\tresolved = await inputToResolve.resolve();\n\t\t\tassert(resolvedModelA === resolved); // Model is still the same because we had 2 clients\n\t\t\tinputToResolve.dispose();\n\t\t\tsameOtherInput.dispose();\n\t\t\tresolvedModelA.dispose();\n\n\t\t\tresolved = await inputToResolve.resolve();\n\t\t\tassert(resolvedModelA !== resolved); // Different instance, because input got disposed\n\n\t\t\tconst stat = getLastResolvedFileStat(resolved);\n\t\t\tresolved = await inputToResolve.resolve();\n\t\t\tawait timeout(0);\n\t\t\tassert(stat !== getLastResolvedFileStat(resolved)); // Different stat, because resolve always goes to the server for refresh\n\t\t} finally {\n\t\t\tDisposableStore.DISABLE_DISPOSED_WARNING = false;\n\t\t}\n\t});\n\n\ttest('reports as untitled without supported file scheme', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/file.js').with({ scheme: 'someTestingScheme' }));\n\n\t\tassert.ok(input.hasCapability(EditorInputCapabilities.Untitled));\n\t\tassert.ok(!input.hasCapability(EditorInputCapabilities.Readonly));\n\t\tassert.ok(!input.isReadonly());\n\t});\n\n\ttest('reports as readonly with readonly file scheme', async function () {\n\t\tconst inMemoryFilesystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tinMemoryFilesystemProvider.setReadOnly(true);\n\n\t\tdisposables.add(accessor.fileService.registerProvider('someTestingReadonlyScheme', inMemoryFilesystemProvider));\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/file.js').with({ scheme: 'someTestingReadonlyScheme' }));\n\n\t\tassert.ok(!input.hasCapability(EditorInputCapabilities.Untitled));\n\t\tassert.ok(input.hasCapability(EditorInputCapabilities.Readonly));\n\t\tassert.ok(input.isReadonly());\n\t});\n\n\ttest('preferred resource', function () {\n\t\tconst resource = toResource.call(this, '/foo/bar/updatefile.js');\n\t\tconst preferredResource = toResource.call(this, '/foo/bar/UPDATEFILE.js');\n\n\t\tconst inputWithoutPreferredResource = createFileInput(resource);\n\t\tassert.strictEqual(inputWithoutPreferredResource.resource.toString(), resource.toString());\n\t\tassert.strictEqual(inputWithoutPreferredResource.preferredResource.toString(), resource.toString());\n\n\t\tconst inputWithPreferredResource = createFileInput(resource, preferredResource);\n\n\t\tassert.strictEqual(inputWithPreferredResource.resource.toString(), resource.toString());\n\t\tassert.strictEqual(inputWithPreferredResource.preferredResource.toString(), preferredResource.toString());\n\n\t\tlet didChangeLabel = false;\n\t\tdisposables.add(inputWithPreferredResource.onDidChangeLabel(e => {\n\t\t\tdidChangeLabel = true;\n\t\t}));\n\n\t\tassert.strictEqual(inputWithPreferredResource.getName(), 'UPDATEFILE.js');\n\n\t\tconst otherPreferredResource = toResource.call(this, '/FOO/BAR/updateFILE.js');\n\t\tinputWithPreferredResource.setPreferredResource(otherPreferredResource);\n\n\t\tassert.strictEqual(inputWithPreferredResource.resource.toString(), resource.toString());\n\t\tassert.strictEqual(inputWithPreferredResource.preferredResource.toString(), otherPreferredResource.toString());\n\t\tassert.strictEqual(inputWithPreferredResource.getName(), 'updateFILE.js');\n\t\tassert.strictEqual(didChangeLabel, true);\n\t});\n\n\ttest('preferred language', async function () {\n\t\tconst languageId = 'file-input-test';\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: languageId,\n\t\t}));\n\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/file.js'), undefined, languageId);\n\t\tassert.strictEqual(input.getPreferredLanguageId(), languageId);\n\n\t\tconst model = disposables.add(await input.resolve() as TextFileEditorModel);\n\t\tassert.strictEqual(model.textEditorModel!.getLanguageId(), languageId);\n\n\t\tinput.setLanguageId('text');\n\t\tassert.strictEqual(input.getPreferredLanguageId(), 'text');\n\t\tassert.strictEqual(model.textEditorModel!.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\n\t\tconst input2 = createFileInput(toResource.call(this, '/foo/bar/file.js'));\n\t\tinput2.setPreferredLanguageId(languageId);\n\n\t\tconst model2 = disposables.add(await input2.resolve() as TextFileEditorModel);\n\t\tassert.strictEqual(model2.textEditorModel!.getLanguageId(), languageId);\n\t});\n\n\ttest('preferred contents', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/file.js'), undefined, undefined, undefined, undefined, 'My contents');\n\n\t\tconst model = disposables.add(await input.resolve() as TextFileEditorModel);\n\t\tassert.strictEqual(model.textEditorModel!.getValue(), 'My contents');\n\t\tassert.strictEqual(input.isDirty(), true);\n\n\t\tconst untypedInput = input.toUntyped({ preserveViewState: 0 });\n\t\tassert.strictEqual(untypedInput.contents, 'My contents');\n\n\t\tconst untypedInputWithoutContents = input.toUntyped();\n\t\tassert.strictEqual(untypedInputWithoutContents.contents, undefined);\n\n\t\tinput.setPreferredContents('Other contents');\n\t\tawait input.resolve();\n\t\tassert.strictEqual(model.textEditorModel!.getValue(), 'Other contents');\n\n\t\tmodel.textEditorModel?.setValue('Changed contents');\n\t\tawait input.resolve();\n\t\tassert.strictEqual(model.textEditorModel!.getValue(), 'Changed contents'); // preferred contents only used once\n\n\t\tconst input2 = createFileInput(toResource.call(this, '/foo/bar/file.js'));\n\t\tinput2.setPreferredContents('My contents');\n\n\t\tconst model2 = await input2.resolve() as TextFileEditorModel;\n\t\tassert.strictEqual(model2.textEditorModel!.getValue(), 'My contents');\n\t\tassert.strictEqual(input2.isDirty(), true);\n\t});\n\n\ttest('matches', function () {\n\t\tconst input1 = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\t\tconst input2 = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\t\tconst input3 = createFileInput(toResource.call(this, '/foo/bar/other.js'));\n\t\tconst input2Upper = createFileInput(toResource.call(this, '/foo/bar/UPDATEFILE.js'));\n\n\t\tassert.strictEqual(input1.matches(input1), true);\n\t\tassert.strictEqual(input1.matches(input2), true);\n\t\tassert.strictEqual(input1.matches(input3), false);\n\n\t\tassert.strictEqual(input1.matches(input2Upper), false);\n\t});\n\n\ttest('getEncoding/setEncoding', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\tawait input.setEncoding('utf16', EncodingMode.Encode);\n\t\tassert.strictEqual(input.getEncoding(), 'utf16');\n\n\t\tconst resolved = disposables.add(await input.resolve() as TextFileEditorModel);\n\t\tassert.strictEqual(input.getEncoding(), resolved.getEncoding());\n\t});\n\n\ttest('save', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\tconst resolved = disposables.add(await input.resolve() as TextFileEditorModel);\n\t\tresolved.textEditorModel!.setValue('changed');\n\t\tassert.ok(input.isDirty());\n\t\tassert.ok(input.isModified());\n\n\t\tawait input.save(0);\n\t\tassert.ok(!input.isDirty());\n\t\tassert.ok(!input.isModified());\n\t});\n\n\ttest('revert', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\tconst resolved = disposables.add(await input.resolve() as TextFileEditorModel);\n\t\tresolved.textEditorModel!.setValue('changed');\n\t\tassert.ok(input.isDirty());\n\t\tassert.ok(input.isModified());\n\n\t\tawait input.revert(0);\n\t\tassert.ok(!input.isDirty());\n\t\tassert.ok(!input.isModified());\n\n\t\tinput.dispose();\n\t\tassert.ok(input.isDisposed());\n\t});\n\n\ttest('resolve handles binary files', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\taccessor.textFileService.setReadStreamErrorOnce(new TextFileOperationError('error', TextFileOperationResult.FILE_IS_BINARY));\n\n\t\tconst resolved = disposables.add(await input.resolve());\n\t\tassert.ok(resolved);\n\t});\n\n\ttest('resolve throws for too large files', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\tlet e: Error | undefined = undefined;\n\t\taccessor.textFileService.setReadStreamErrorOnce(new TooLargeFileOperationError('error', FileOperationResult.FILE_TOO_LARGE, 1000));\n\t\ttry {\n\t\t\tawait input.resolve();\n\t\t} catch (error) {\n\t\t\te = error;\n\t\t}\n\t\tassert.ok(e);\n\t});\n\n\ttest('attaches to model when created and reports dirty', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\tlet listenerCount = 0;\n\t\tdisposables.add(input.onDidChangeDirty(() => {\n\t\t\tlistenerCount++;\n\t\t}));\n\n\t\t// instead of going through file input resolve method\n\t\t// we resolve the model directly through the service\n\t\tconst model = disposables.add(await accessor.textFileService.files.resolve(input.resource));\n\t\tmodel.textEditorModel?.setValue('hello world');\n\n\t\tassert.strictEqual(listenerCount, 1);\n\t\tassert.ok(input.isDirty());\n\t});\n\n\ttest('force open text/binary', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\t\tinput.setForceOpenAsBinary();\n\n\t\tlet resolved = disposables.add(await input.resolve());\n\t\tassert.ok(resolved instanceof BinaryEditorModel);\n\n\t\tinput.setForceOpenAsText();\n\n\t\tresolved = disposables.add(await input.resolve());\n\t\tassert.ok(resolved instanceof TextFileEditorModel);\n\t});\n\n\ttest('file editor serializer', async function () {\n\t\tinstantiationService.invokeFunction(accessor => Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).start(accessor));\n\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\tdisposables.add(Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer('workbench.editors.files.fileEditorInput', FileEditorInputSerializer));\n\n\t\tconst editorSerializer = Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).getEditorSerializer(input.typeId);\n\t\tif (!editorSerializer) {\n\t\t\tassert.fail('File Editor Input Serializer missing');\n\t\t}\n\n\t\tassert.strictEqual(editorSerializer.canSerialize(input), true);\n\n\t\tconst inputSerialized = editorSerializer.serialize(input);\n\t\tif (!inputSerialized) {\n\t\t\tassert.fail('Unexpected serialized file input');\n\t\t}\n\n\t\tconst inputDeserialized = editorSerializer.deserialize(instantiationService, inputSerialized);\n\t\tassert.strictEqual(inputDeserialized ? input.matches(inputDeserialized) : false, true);\n\n\t\tconst preferredResource = toResource.call(this, '/foo/bar/UPDATEfile.js');\n\t\tconst inputWithPreferredResource = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'), preferredResource);\n\n\t\tconst inputWithPreferredResourceSerialized = editorSerializer.serialize(inputWithPreferredResource);\n\t\tif (!inputWithPreferredResourceSerialized) {\n\t\t\tassert.fail('Unexpected serialized file input');\n\t\t}\n\n\t\tconst inputWithPreferredResourceDeserialized = editorSerializer.deserialize(instantiationService, inputWithPreferredResourceSerialized) as FileEditorInput;\n\t\tassert.strictEqual(inputWithPreferredResource.resource.toString(), inputWithPreferredResourceDeserialized.resource.toString());\n\t\tassert.strictEqual(inputWithPreferredResource.preferredResource.toString(), inputWithPreferredResourceDeserialized.preferredResource.toString());\n\t});\n\n\ttest('preferred name/description', async function () {\n\n\t\t// Works with custom file input\n\t\tconst customFileInput = createFileInput(toResource.call(this, '/foo/bar/updatefile.js').with({ scheme: 'test-custom' }), undefined, undefined, 'My Name', 'My Description');\n\n\t\tlet didChangeLabelCounter = 0;\n\t\tdisposables.add(customFileInput.onDidChangeLabel(() => {\n\t\t\tdidChangeLabelCounter++;\n\t\t}));\n\n\t\tassert.strictEqual(customFileInput.getName(), 'My Name');\n\t\tassert.strictEqual(customFileInput.getDescription(), 'My Description');\n\n\t\tcustomFileInput.setPreferredName('My Name 2');\n\t\tcustomFileInput.setPreferredDescription('My Description 2');\n\n\t\tassert.strictEqual(customFileInput.getName(), 'My Name 2');\n\t\tassert.strictEqual(customFileInput.getDescription(), 'My Description 2');\n\n\t\tassert.strictEqual(didChangeLabelCounter, 2);\n\n\t\tcustomFileInput.dispose();\n\n\t\t// Disallowed with local file input\n\t\tconst fileInput = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'), undefined, undefined, 'My Name', 'My Description');\n\n\t\tdidChangeLabelCounter = 0;\n\t\tdisposables.add(fileInput.onDidChangeLabel(() => {\n\t\t\tdidChangeLabelCounter++;\n\t\t}));\n\n\t\tassert.notStrictEqual(fileInput.getName(), 'My Name');\n\t\tassert.notStrictEqual(fileInput.getDescription(), 'My Description');\n\n\t\tfileInput.setPreferredName('My Name 2');\n\t\tfileInput.setPreferredDescription('My Description 2');\n\n\t\tassert.notStrictEqual(fileInput.getName(), 'My Name 2');\n\t\tassert.notStrictEqual(fileInput.getDescription(), 'My Description 2');\n\n\t\tassert.strictEqual(didChangeLabelCounter, 0);\n\t});\n\n\ttest('reports readonly changes', async function () {\n\t\tconst input = createFileInput(toResource.call(this, '/foo/bar/updatefile.js'));\n\n\t\tlet listenerCount = 0;\n\t\tdisposables.add(input.onDidChangeCapabilities(() => {\n\t\t\tlistenerCount++;\n\t\t}));\n\n\t\tconst model = disposables.add(await accessor.textFileService.files.resolve(input.resource));\n\n\t\tassert.strictEqual(model.isReadonly(), false);\n\t\tassert.strictEqual(input.hasCapability(EditorInputCapabilities.Readonly), false);\n\t\tassert.strictEqual(input.isReadonly(), false);\n\n\t\tconst stat = await accessor.fileService.resolve(input.resource, { resolveMetadata: true });\n\n\t\ttry {\n\t\t\taccessor.fileService.readShouldThrowError = new NotModifiedSinceFileOperationError('file not modified since', { ...stat, readonly: true });\n\t\t\tawait input.resolve();\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(!!model.isReadonly(), true);\n\t\tassert.strictEqual(input.hasCapability(EditorInputCapabilities.Readonly), true);\n\t\tassert.strictEqual(!!input.isReadonly(), true);\n\t\tassert.strictEqual(listenerCount, 1);\n\n\t\ttry {\n\t\t\taccessor.fileService.readShouldThrowError = new NotModifiedSinceFileOperationError('file not modified since', { ...stat, readonly: false });\n\t\t\tawait input.resolve();\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(model.isReadonly(), false);\n\t\tassert.strictEqual(input.hasCapability(EditorInputCapabilities.Readonly), false);\n\t\tassert.strictEqual(input.isReadonly(), false);\n\t\tassert.strictEqual(listenerCount, 2);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["instantiationService", "accessor"]
}
