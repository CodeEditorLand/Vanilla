var f=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var m=(d,l,o,t)=>{for(var e=t>1?void 0:t?I(l,o):l,n=d.length-1,r;n>=0;n--)(r=d[n])&&(e=(t?r(l,o,e):r(e))||e);return t&&e&&f(l,o,e),e},p=(d,l)=>(o,t)=>l(o,t,d);import{Event as R}from"../../../../base/common/event.js";import"../../../../base/common/glob.js";import{Disposable as w,DisposableStore as v,MutableDisposable as g}from"../../../../base/common/lifecycle.js";import"../../../../base/common/uri.js";import"../../../../editor/common/config/editorOptions.js";import{ILanguageService as F}from"../../../../editor/common/languages/language.js";import"../../../../editor/common/model.js";import{IModelService as y}from"../../../../editor/common/services/model.js";import"../../../../editor/common/services/resolverService.js";import{localize as s}from"../../../../nls.js";import{ContextKeyExpr as c,RawContextKey as i}from"../../../../platform/contextkey/common/contextkey.js";import{InputFocusedContextKey as E}from"../../../../platform/contextkey/common/contextkeys.js";import"../../../../platform/editor/common/editor.js";import{FileChangeType as T,IFileService as C}from"../../../../platform/files/common/files.js";import{EditorResourceAccessor as S,SideBySideEditor as O}from"../../../common/editor.js";import"../../../common/editor/editorInput.js";import"../../../services/editor/common/editorGroupsService.js";import"../../../services/editor/common/editorService.js";import{ITextFileService as D}from"../../../services/textfile/common/textfiles.js";const he="workbench.view.explorer",be="workbench.explorer.fileView",fe=new i("explorerViewletVisible",!0,{type:"boolean",description:s("explorerViewletVisible","True when the EXPLORER viewlet is visible.")}),h=new i("foldersViewVisible",!0,{type:"boolean",description:s("foldersViewVisible","True when the FOLDERS view (the file tree within the explorer view container) is visible.")}),Ie=new i("explorerResourceIsFolder",!1,{type:"boolean",description:s("explorerResourceIsFolder","True when the focused item in the EXPLORER is a folder.")}),M=new i("explorerResourceReadonly",!1,{type:"boolean",description:s("explorerResourceReadonly","True when the focused item in the EXPLORER is read-only.")}),Re=M.toNegated(),we=new i("explorerResourceAvailableEditorIds",""),ve=new i("explorerResourceIsRoot",!1,{type:"boolean",description:s("explorerResourceIsRoot","True when the focused item in the EXPLORER is a root folder.")}),ge=new i("explorerResourceCut",!1,{type:"boolean",description:s("explorerResourceCut","True when an item in the EXPLORER has been cut for cut and paste.")}),Fe=new i("explorerResourceMoveableToTrash",!1,{type:"boolean",description:s("explorerResourceMoveableToTrash","True when the focused item in the EXPLORER can be moved to trash.")}),L=new i("filesExplorerFocus",!0,{type:"boolean",description:s("filesExplorerFocus","True when the focus is inside the EXPLORER view.")}),ye=new i("openEditorsFocus",!0,{type:"boolean",description:s("openEditorsFocus","True when the focus is inside the OPEN EDITORS view.")}),V=new i("explorerViewletFocus",!0,{type:"boolean",description:s("explorerViewletFocus","True when the focus is inside the EXPLORER viewlet.")}),Te=new i("explorerViewletCompressedFocus",!0,{type:"boolean",description:s("explorerViewletCompressedFocus","True when the focused item in the EXPLORER view is a compact item.")}),Ce=new i("explorerViewletCompressedFirstFocus",!0,{type:"boolean",description:s("explorerViewletCompressedFirstFocus","True when the focus is inside a compact item's first part in the EXPLORER view.")}),Se=new i("explorerViewletCompressedLastFocus",!0,{type:"boolean",description:s("explorerViewletCompressedLastFocus","True when the focus is inside a compact item's last part in the EXPLORER view.")}),Oe=new i("viewHasSomeCollapsibleItem",!1,{type:"boolean",description:s("viewHasSomeCollapsibleItem","True when a workspace in the EXPLORER view has some collapsible root child.")}),De=c.and(h,L,c.not(E)),Me=c.and(h,V,c.not(E)),Le="workbench.editors.files.textFileEditor",Ve="workbench.editors.files.fileEditorInput",Pe="workbench.editors.files.binaryFileEditor",Ue="code-text-binary";var P=(r=>(r.Default="default",r.Mixed="mixed",r.FilesFirst="filesFirst",r.Type="type",r.Modified="modified",r.FoldersNestsFiles="foldersNestsFiles",r))(P||{}),U=(t=>(t.Verbose="verbose",t.Default="default",t.Light="light",t))(U||{}),_=(e=>(e.Default="default",e.Upper="upper",e.Lower="lower",e.Unicode="unicode",e))(_||{});let a=class extends w{constructor(o,t,e,n){super();this.textFileService=o;this.fileService=t;this.languageService=e;this.modelService=n}fileWatcherDisposable=this._register(new g);static async open(o,t,e,n,r){await n.openEditor({original:{resource:a.resourceToTextFile(t,o)},modified:{resource:o},label:e,options:r})}static resourceToTextFile(o,t){return t.with({scheme:o,query:JSON.stringify({scheme:t.scheme,query:t.query})})}static textFileToResource(o){const{scheme:t,query:e}=JSON.parse(o.query);return o.with({scheme:t,query:e})}async provideTextContent(o){if(!o.query)return null;const t=a.textFileToResource(o),e=await this.resolveEditorModel(o);if(!this.fileWatcherDisposable.value){const n=new v;this.fileWatcherDisposable.value=n,n.add(this.fileService.onDidFilesChange(r=>{r.contains(t,T.UPDATED)&&this.resolveEditorModel(o,!1)})),e&&n.add(R.once(e.onWillDispose)(()=>this.fileWatcherDisposable.clear()))}return e}async resolveEditorModel(o,t=!0){const e=a.textFileToResource(o),n=await this.textFileService.readStream(e);let r=this.modelService.getModel(o);if(r)this.modelService.updateModel(r,n.value);else if(t){const x=this.modelService.getModel(e);let u;x?u=this.languageService.createById(x.getLanguageId()):u=this.languageService.createByFilepathOrFirstLine(e),r=this.modelService.createModel(n.value,u,o)}return r}};a=m([p(0,D),p(1,C),p(2,F),p(3,y)],a);class b{constructor(l,o){this._editor=l;this._group=o;this.id=b.COUNTER++}id;static COUNTER=0;get editor(){return this._editor}get group(){return this._group}get groupId(){return this._group.id}getId(){return`openeditor:${this.groupId}:${this.id}`}isPreview(){return!this._group.isPinned(this.editor)}isSticky(){return this._group.isSticky(this.editor)}getResource(){return S.getOriginalUri(this.editor,{supportSideBySide:O.PRIMARY})}}export{Pe as BINARY_FILE_EDITOR_ID,Ue as BINARY_TEXT_FILE_MODE,Ce as ExplorerCompressedFirstFocusContext,Te as ExplorerCompressedFocusContext,Se as ExplorerCompressedLastFocusContext,Me as ExplorerFocusCondition,V as ExplorerFocusedContext,Ie as ExplorerFolderContext,we as ExplorerResourceAvailableEditorIdsContext,ge as ExplorerResourceCut,Fe as ExplorerResourceMoveableToTrash,Re as ExplorerResourceNotReadonlyContext,M as ExplorerResourceReadonlyContext,ve as ExplorerRootContext,fe as ExplorerViewletVisibleContext,Ve as FILE_EDITOR_INPUT_ID,De as FilesExplorerFocusCondition,L as FilesExplorerFocusedContext,h as FoldersViewVisibleContext,_ as LexicographicOptions,b as OpenEditor,ye as OpenEditorsFocusedContext,P as SortOrder,Le as TEXT_FILE_EDITOR_ID,a as TextFileContentProvider,U as UndoConfirmLevel,he as VIEWLET_ID,be as VIEW_ID,Oe as ViewHasSomeCollapsibleRootItemContext};
