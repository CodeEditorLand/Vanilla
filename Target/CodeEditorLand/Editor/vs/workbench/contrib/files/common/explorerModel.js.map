{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/common/explorerModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport { memoize } from \"../../../../base/common/decorators.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { isEqual } from \"../../../../base/common/extpath.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport {\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { posix } from \"../../../../base/common/path.js\";\nimport {\n\tbasenameOrAuthority,\n\tisEqualOrParent,\n\tjoinPath,\n} from \"../../../../base/common/resources.js\";\nimport {\n\tequalsIgnoreCase,\n\trtrim,\n\tstartsWithIgnoreCase,\n} from \"../../../../base/common/strings.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\ttype IFileService,\n\ttype IFileStat,\n} from \"../../../../platform/files/common/files.js\";\nimport type { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IFilesConfigurationService } from \"../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { ExplorerFileNestingTrie } from \"./explorerFileNestingTrie.js\";\nimport { type IFilesConfiguration, SortOrder } from \"./files.js\";\n\nexport class ExplorerModel implements IDisposable {\n\tprivate _roots!: ExplorerItem[];\n\tprivate _listener: IDisposable;\n\tprivate readonly _onDidChangeRoots = new Emitter<void>();\n\n\tconstructor(\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tfileService: IFileService,\n\t\tconfigService: IConfigurationService,\n\t\tfilesConfigService: IFilesConfigurationService,\n\t) {\n\t\tconst setRoots = () =>\n\t\t\t(this._roots = this.contextService\n\t\t\t\t.getWorkspace()\n\t\t\t\t.folders.map(\n\t\t\t\t\t(folder) =>\n\t\t\t\t\t\tnew ExplorerItem(\n\t\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\t\tfileService,\n\t\t\t\t\t\t\tconfigService,\n\t\t\t\t\t\t\tfilesConfigService,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tfolder.name,\n\t\t\t\t\t\t),\n\t\t\t\t));\n\t\tsetRoots();\n\n\t\tthis._listener = this.contextService.onDidChangeWorkspaceFolders(() => {\n\t\t\tsetRoots();\n\t\t\tthis._onDidChangeRoots.fire();\n\t\t});\n\t}\n\n\tget roots(): ExplorerItem[] {\n\t\treturn this._roots;\n\t}\n\n\tget onDidChangeRoots(): Event<void> {\n\t\treturn this._onDidChangeRoots.event;\n\t}\n\n\t/**\n\t * Returns an array of child stat from this stat that matches with the provided path.\n\t * Starts matching from the first root.\n\t * Will return empty array in case the FileStat does not exist.\n\t */\n\tfindAll(resource: URI): ExplorerItem[] {\n\t\treturn coalesce(this.roots.map((root) => root.find(resource)));\n\t}\n\n\t/**\n\t * Returns a FileStat that matches the passed resource.\n\t * In case multiple FileStat are matching the resource (same folder opened multiple times) returns the FileStat that has the closest root.\n\t * Will return undefined in case the FileStat does not exist.\n\t */\n\tfindClosest(resource: URI): ExplorerItem | null {\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\tif (folder) {\n\t\t\tconst root = this.roots.find((r) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(r.resource, folder.uri),\n\t\t\t);\n\t\t\tif (root) {\n\t\t\t\treturn root.find(resource);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._listener);\n\t}\n}\n\nexport class ExplorerItem {\n\t_isDirectoryResolved: boolean; // used in tests\n\tpublic error: Error | undefined = undefined;\n\tprivate _isExcluded = false;\n\n\tpublic nestedParent: ExplorerItem | undefined;\n\tpublic nestedChildren: ExplorerItem[] | undefined;\n\n\tconstructor(\n\t\tpublic resource: URI,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly configService: IConfigurationService,\n\t\tprivate readonly filesConfigService: IFilesConfigurationService,\n\t\tprivate _parent: ExplorerItem | undefined,\n\t\tprivate _isDirectory?: boolean,\n\t\tprivate _isSymbolicLink?: boolean,\n\t\tprivate _readonly?: boolean,\n\t\tprivate _locked?: boolean,\n\t\tprivate _name: string = basenameOrAuthority(resource),\n\t\tprivate _mtime?: number,\n\t\tprivate _unknown = false,\n\t) {\n\t\tthis._isDirectoryResolved = false;\n\t}\n\n\tget isExcluded(): boolean {\n\t\tif (this._isExcluded) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!this._parent) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._parent.isExcluded;\n\t}\n\n\tset isExcluded(value: boolean) {\n\t\tthis._isExcluded = value;\n\t}\n\n\thasChildren(filter: (stat: ExplorerItem) => boolean): boolean {\n\t\tif (this.hasNests) {\n\t\t\treturn this.nestedChildren?.some((c) => filter(c)) ?? false;\n\t\t} else {\n\t\t\treturn this.isDirectory;\n\t\t}\n\t}\n\n\tget hasNests() {\n\t\treturn !!this.nestedChildren?.length;\n\t}\n\n\tget isDirectoryResolved(): boolean {\n\t\treturn this._isDirectoryResolved;\n\t}\n\n\tget isSymbolicLink(): boolean {\n\t\treturn !!this._isSymbolicLink;\n\t}\n\n\tget isDirectory(): boolean {\n\t\treturn !!this._isDirectory;\n\t}\n\n\tget isReadonly(): boolean | IMarkdownString {\n\t\treturn this.filesConfigService.isReadonly(this.resource, {\n\t\t\tresource: this.resource,\n\t\t\tname: this.name,\n\t\t\treadonly: this._readonly,\n\t\t\tlocked: this._locked,\n\t\t});\n\t}\n\n\tget mtime(): number | undefined {\n\t\treturn this._mtime;\n\t}\n\n\tget name(): string {\n\t\treturn this._name;\n\t}\n\n\tget isUnknown(): boolean {\n\t\treturn this._unknown;\n\t}\n\n\tget parent(): ExplorerItem | undefined {\n\t\treturn this._parent;\n\t}\n\n\tget root(): ExplorerItem {\n\t\tif (!this._parent) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this._parent.root;\n\t}\n\n\t@memoize get children(): Map<string, ExplorerItem> {\n\t\treturn new Map<string, ExplorerItem>();\n\t}\n\n\tprivate updateName(value: string): void {\n\t\t// Re-add to parent since the parent has a name map to children and the name might have changed\n\t\tthis._parent?.removeChild(this);\n\t\tthis._name = value;\n\t\tthis._parent?.addChild(this);\n\t}\n\n\tgetId(): string {\n\t\treturn this.root.resource.toString() + \"::\" + this.resource.toString();\n\t}\n\n\ttoString(): string {\n\t\treturn `ExplorerItem: ${this.name}`;\n\t}\n\n\tget isRoot(): boolean {\n\t\treturn this === this.root;\n\t}\n\n\tstatic create(\n\t\tfileService: IFileService,\n\t\tconfigService: IConfigurationService,\n\t\tfilesConfigService: IFilesConfigurationService,\n\t\traw: IFileStat,\n\t\tparent: ExplorerItem | undefined,\n\t\tresolveTo?: readonly URI[],\n\t): ExplorerItem {\n\t\tconst stat = new ExplorerItem(\n\t\t\traw.resource,\n\t\t\tfileService,\n\t\t\tconfigService,\n\t\t\tfilesConfigService,\n\t\t\tparent,\n\t\t\traw.isDirectory,\n\t\t\traw.isSymbolicLink,\n\t\t\traw.readonly,\n\t\t\traw.locked,\n\t\t\traw.name,\n\t\t\traw.mtime,\n\t\t\t!raw.isFile && !raw.isDirectory,\n\t\t);\n\n\t\t// Recursively add children if present\n\t\tif (stat.isDirectory) {\n\t\t\t// isDirectoryResolved is a very important indicator in the stat model that tells if the folder was fully resolved\n\t\t\t// the folder is fully resolved if either it has a list of children or the client requested this by using the resolveTo\n\t\t\t// array of resource path to resolve.\n\t\t\tstat._isDirectoryResolved =\n\t\t\t\t!!raw.children ||\n\t\t\t\t(!!resolveTo &&\n\t\t\t\t\tresolveTo.some((r) => {\n\t\t\t\t\t\treturn isEqualOrParent(r, stat.resource);\n\t\t\t\t\t}));\n\n\t\t\t// Recurse into children\n\t\t\tif (raw.children) {\n\t\t\t\tfor (let i = 0, len = raw.children.length; i < len; i++) {\n\t\t\t\t\tconst child = ExplorerItem.create(\n\t\t\t\t\t\tfileService,\n\t\t\t\t\t\tconfigService,\n\t\t\t\t\t\tfilesConfigService,\n\t\t\t\t\t\traw.children[i],\n\t\t\t\t\t\tstat,\n\t\t\t\t\t\tresolveTo,\n\t\t\t\t\t);\n\t\t\t\t\tstat.addChild(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn stat;\n\t}\n\n\t/**\n\t * Merges the stat which was resolved from the disk with the local stat by copying over properties\n\t * and children. The merge will only consider resolved stat elements to avoid overwriting data which\n\t * exists locally.\n\t */\n\tstatic mergeLocalWithDisk(disk: ExplorerItem, local: ExplorerItem): void {\n\t\tif (disk.resource.toString() !== local.resource.toString()) {\n\t\t\treturn; // Merging only supported for stats with the same resource\n\t\t}\n\n\t\t// Stop merging when a folder is not resolved to avoid loosing local data\n\t\tconst mergingDirectories = disk.isDirectory || local.isDirectory;\n\t\tif (\n\t\t\tmergingDirectories &&\n\t\t\tlocal._isDirectoryResolved &&\n\t\t\t!disk._isDirectoryResolved\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Properties\n\t\tlocal.resource = disk.resource;\n\t\tif (!local.isRoot) {\n\t\t\tlocal.updateName(disk.name);\n\t\t}\n\t\tlocal._isDirectory = disk.isDirectory;\n\t\tlocal._mtime = disk.mtime;\n\t\tlocal._isDirectoryResolved = disk._isDirectoryResolved;\n\t\tlocal._isSymbolicLink = disk.isSymbolicLink;\n\t\tlocal.error = disk.error;\n\n\t\t// Merge Children if resolved\n\t\tif (mergingDirectories && disk._isDirectoryResolved) {\n\t\t\t// Map resource => stat\n\t\t\tconst oldLocalChildren = new ResourceMap<ExplorerItem>();\n\t\t\tlocal.children.forEach((child) => {\n\t\t\t\toldLocalChildren.set(child.resource, child);\n\t\t\t});\n\n\t\t\t// Clear current children\n\t\t\tlocal.children.clear();\n\n\t\t\t// Merge received children\n\t\t\tdisk.children.forEach((diskChild) => {\n\t\t\t\tconst formerLocalChild = oldLocalChildren.get(\n\t\t\t\t\tdiskChild.resource,\n\t\t\t\t);\n\t\t\t\t// Existing child: merge\n\t\t\t\tif (formerLocalChild) {\n\t\t\t\t\tExplorerItem.mergeLocalWithDisk(\n\t\t\t\t\t\tdiskChild,\n\t\t\t\t\t\tformerLocalChild,\n\t\t\t\t\t);\n\t\t\t\t\tlocal.addChild(formerLocalChild);\n\t\t\t\t\toldLocalChildren.delete(diskChild.resource);\n\t\t\t\t}\n\n\t\t\t\t// New child: add\n\t\t\t\telse {\n\t\t\t\t\tlocal.addChild(diskChild);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\toldLocalChildren.forEach((oldChild) => {\n\t\t\t\tif (oldChild instanceof NewExplorerItem) {\n\t\t\t\t\tlocal.addChild(oldChild);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Adds a child element to this folder.\n\t */\n\taddChild(child: ExplorerItem): void {\n\t\t// Inherit some parent properties to child\n\t\tchild._parent = this;\n\t\tchild.updateResource(false);\n\t\tthis.children.set(this.getPlatformAwareName(child.name), child);\n\t}\n\n\tgetChild(name: string): ExplorerItem | undefined {\n\t\treturn this.children.get(this.getPlatformAwareName(name));\n\t}\n\n\tfetchChildren(\n\t\tsortOrder: SortOrder,\n\t): ExplorerItem[] | Promise<ExplorerItem[]> {\n\t\tconst nestingConfig = this.configService.getValue<IFilesConfiguration>({\n\t\t\tresource: this.root.resource,\n\t\t}).explorer.fileNesting;\n\n\t\t// fast path when the children can be resolved sync\n\t\tif (nestingConfig.enabled && this.nestedChildren) {\n\t\t\treturn this.nestedChildren;\n\t\t}\n\n\t\treturn (async () => {\n\t\t\tif (!this._isDirectoryResolved) {\n\t\t\t\t// Resolve metadata only when the mtime is needed since this can be expensive\n\t\t\t\t// Mtime is only used when the sort order is 'modified'\n\t\t\t\tconst resolveMetadata = sortOrder === SortOrder.Modified;\n\t\t\t\tthis.error = undefined;\n\t\t\t\ttry {\n\t\t\t\t\tconst stat = await this.fileService.resolve(this.resource, {\n\t\t\t\t\t\tresolveSingleChildDescendants: true,\n\t\t\t\t\t\tresolveMetadata,\n\t\t\t\t\t});\n\t\t\t\t\tconst resolved = ExplorerItem.create(\n\t\t\t\t\t\tthis.fileService,\n\t\t\t\t\t\tthis.configService,\n\t\t\t\t\t\tthis.filesConfigService,\n\t\t\t\t\t\tstat,\n\t\t\t\t\t\tthis,\n\t\t\t\t\t);\n\t\t\t\t\tExplorerItem.mergeLocalWithDisk(resolved, this);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.error = e;\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t\tthis._isDirectoryResolved = true;\n\t\t\t}\n\n\t\t\tconst items: ExplorerItem[] = [];\n\t\t\tif (nestingConfig.enabled) {\n\t\t\t\tconst fileChildren: [string, ExplorerItem][] = [];\n\t\t\t\tconst dirChildren: [string, ExplorerItem][] = [];\n\t\t\t\tfor (const child of this.children.entries()) {\n\t\t\t\t\tchild[1].nestedParent = undefined;\n\t\t\t\t\tif (child[1].isDirectory) {\n\t\t\t\t\t\tdirChildren.push(child);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfileChildren.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst nested = this.fileNester.nest(\n\t\t\t\t\tfileChildren.map(([name]) => name),\n\t\t\t\t\tthis.getPlatformAwareName(this.name),\n\t\t\t\t);\n\n\t\t\t\tfor (const [fileEntryName, fileEntryItem] of fileChildren) {\n\t\t\t\t\tconst nestedItems = nested.get(fileEntryName);\n\t\t\t\t\tif (nestedItems !== undefined) {\n\t\t\t\t\t\tfileEntryItem.nestedChildren = [];\n\t\t\t\t\t\tfor (const name of nestedItems.keys()) {\n\t\t\t\t\t\t\tconst child = assertIsDefined(\n\t\t\t\t\t\t\t\tthis.children.get(name),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfileEntryItem.nestedChildren.push(child);\n\t\t\t\t\t\t\tchild.nestedParent = fileEntryItem;\n\t\t\t\t\t\t}\n\t\t\t\t\t\titems.push(fileEntryItem);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfileEntryItem.nestedChildren = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const [_, dirEntryItem] of dirChildren.values()) {\n\t\t\t\t\titems.push(dirEntryItem);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.children.forEach((child) => {\n\t\t\t\t\titems.push(child);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn items;\n\t\t})();\n\t}\n\n\tprivate _fileNester: ExplorerFileNestingTrie | undefined;\n\tprivate get fileNester(): ExplorerFileNestingTrie {\n\t\tif (!this.root._fileNester) {\n\t\t\tconst nestingConfig =\n\t\t\t\tthis.configService.getValue<IFilesConfiguration>({\n\t\t\t\t\tresource: this.root.resource,\n\t\t\t\t}).explorer.fileNesting;\n\t\t\tconst patterns = Object.entries(nestingConfig.patterns)\n\t\t\t\t.filter(\n\t\t\t\t\t(entry) =>\n\t\t\t\t\t\ttypeof entry[0] === \"string\" &&\n\t\t\t\t\t\ttypeof entry[1] === \"string\" &&\n\t\t\t\t\t\tentry[0] &&\n\t\t\t\t\t\tentry[1],\n\t\t\t\t)\n\t\t\t\t.map(\n\t\t\t\t\t([parentPattern, childrenPatterns]) =>\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tthis.getPlatformAwareName(parentPattern.trim()),\n\t\t\t\t\t\t\tchildrenPatterns\n\t\t\t\t\t\t\t\t.split(\",\")\n\t\t\t\t\t\t\t\t.map((p) =>\n\t\t\t\t\t\t\t\t\tthis.getPlatformAwareName(\n\t\t\t\t\t\t\t\t\t\tp\n\t\t\t\t\t\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t\t\t\t\t\t.replace(/\\u200b/g, \"\")\n\t\t\t\t\t\t\t\t\t\t\t.trim(),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.filter((p) => p !== \"\"),\n\t\t\t\t\t\t] as [string, string[]],\n\t\t\t\t);\n\n\t\t\tthis.root._fileNester = new ExplorerFileNestingTrie(patterns);\n\t\t}\n\t\treturn this.root._fileNester;\n\t}\n\n\t/**\n\t * Removes a child element from this folder.\n\t */\n\tremoveChild(child: ExplorerItem): void {\n\t\tthis.nestedChildren = undefined;\n\t\tthis.children.delete(this.getPlatformAwareName(child.name));\n\t}\n\n\tforgetChildren(): void {\n\t\tthis.children.clear();\n\t\tthis.nestedChildren = undefined;\n\t\tthis._isDirectoryResolved = false;\n\t\tthis._fileNester = undefined;\n\t}\n\n\tprivate getPlatformAwareName(name: string): string {\n\t\treturn this.fileService.hasCapability(\n\t\t\tthis.resource,\n\t\t\tFileSystemProviderCapabilities.PathCaseSensitive,\n\t\t)\n\t\t\t? name\n\t\t\t: name.toLowerCase();\n\t}\n\n\t/**\n\t * Moves this element under a new parent element.\n\t */\n\tmove(newParent: ExplorerItem): void {\n\t\tthis.nestedParent?.removeChild(this);\n\t\tthis._parent?.removeChild(this);\n\t\tnewParent.removeChild(this); // make sure to remove any previous version of the file if any\n\t\tnewParent.addChild(this);\n\t\tthis.updateResource(true);\n\t}\n\n\tprivate updateResource(recursive: boolean): void {\n\t\tif (this._parent) {\n\t\t\tthis.resource = joinPath(this._parent.resource, this.name);\n\t\t}\n\n\t\tif (recursive) {\n\t\t\tif (this.isDirectory) {\n\t\t\t\tthis.children.forEach((child) => {\n\t\t\t\t\tchild.updateResource(true);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tells this stat that it was renamed. This requires changes to all children of this stat (if any)\n\t * so that the path property can be updated properly.\n\t */\n\trename(renamedStat: { name: string; mtime?: number }): void {\n\t\t// Merge a subset of Properties that can change on rename\n\t\tthis.updateName(renamedStat.name);\n\t\tthis._mtime = renamedStat.mtime;\n\n\t\t// Update Paths including children\n\t\tthis.updateResource(true);\n\t}\n\n\t/**\n\t * Returns a child stat from this stat that matches with the provided path.\n\t * Will return \"null\" in case the child does not exist.\n\t */\n\tfind(resource: URI): ExplorerItem | null {\n\t\t// Return if path found\n\t\t// For performance reasons try to do the comparison as fast as possible\n\t\tconst ignoreCase = !this.fileService.hasCapability(\n\t\t\tresource,\n\t\t\tFileSystemProviderCapabilities.PathCaseSensitive,\n\t\t);\n\t\tif (\n\t\t\tresource &&\n\t\t\tthis.resource.scheme === resource.scheme &&\n\t\t\tequalsIgnoreCase(this.resource.authority, resource.authority) &&\n\t\t\t(ignoreCase\n\t\t\t\t? startsWithIgnoreCase(resource.path, this.resource.path)\n\t\t\t\t: resource.path.startsWith(this.resource.path))\n\t\t) {\n\t\t\treturn this.findByPath(\n\t\t\t\trtrim(resource.path, posix.sep),\n\t\t\t\tthis.resource.path.length,\n\t\t\t\tignoreCase,\n\t\t\t);\n\t\t}\n\n\t\treturn null; //Unable to find\n\t}\n\n\tprivate findByPath(\n\t\tpath: string,\n\t\tindex: number,\n\t\tignoreCase: boolean,\n\t): ExplorerItem | null {\n\t\tif (isEqual(rtrim(this.resource.path, posix.sep), path, ignoreCase)) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.isDirectory) {\n\t\t\t// Ignore separtor to more easily deduct the next name to search\n\t\t\twhile (index < path.length && path[index] === posix.sep) {\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tlet indexOfNextSep = path.indexOf(posix.sep, index);\n\t\t\tif (indexOfNextSep === -1) {\n\t\t\t\t// If there is no separator take the remainder of the path\n\t\t\t\tindexOfNextSep = path.length;\n\t\t\t}\n\t\t\t// The name to search is between two separators\n\t\t\tconst name = path.substring(index, indexOfNextSep);\n\n\t\t\tconst child = this.children.get(this.getPlatformAwareName(name));\n\n\t\t\tif (child) {\n\t\t\t\t// We found a child with the given name, search inside it\n\t\t\t\treturn child.findByPath(path, indexOfNextSep, ignoreCase);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\nexport class NewExplorerItem extends ExplorerItem {\n\tconstructor(\n\t\tfileService: IFileService,\n\t\tconfigService: IConfigurationService,\n\t\tfilesConfigService: IFilesConfigurationService,\n\t\tparent: ExplorerItem,\n\t\tisDirectory: boolean,\n\t) {\n\t\tsuper(\n\t\t\tURI.file(\"\"),\n\t\t\tfileService,\n\t\t\tconfigService,\n\t\t\tfilesConfigService,\n\t\t\tparent,\n\t\t\tisDirectory,\n\t\t);\n\t\tthis._isDirectoryResolved = true;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
