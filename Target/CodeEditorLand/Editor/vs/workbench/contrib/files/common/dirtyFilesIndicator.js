var p=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var c=(o,r,i,e)=>{for(var t=e>1?void 0:e?d(r,i):r,s=o.length-1,v;s>=0;s--)(v=o[s])&&(t=(e?v(r,i,t):v(t))||t);return e&&t&&p(r,i,t),t},n=(o,r)=>(i,e)=>r(i,e,o);import*as l from"../../../../nls.js";import{VIEWLET_ID as y}from"./files.js";import{Disposable as g,MutableDisposable as u}from"../../../../base/common/lifecycle.js";import{IActivityService as C,NumberBadge as h}from"../../../services/activity/common/activity.js";import{IWorkingCopyService as f}from"../../../services/workingCopy/common/workingCopyService.js";import{WorkingCopyCapabilities as m}from"../../../services/workingCopy/common/workingCopy.js";import{IFilesConfigurationService as b}from"../../../services/filesConfiguration/common/filesConfigurationService.js";let a=class extends g{constructor(i,e,t){super();this.activityService=i;this.workingCopyService=e;this.filesConfigurationService=t;this.updateActivityBadge(),this.registerListeners()}static ID="workbench.contrib.dirtyFilesIndicator";badgeHandle=this._register(new u);lastKnownDirtyCount=0;registerListeners(){this._register(this.workingCopyService.onDidChangeDirty(i=>this.onWorkingCopyDidChangeDirty(i)))}onWorkingCopyDidChangeDirty(i){const e=i.isDirty();e&&!(i.capabilities&m.Untitled)&&this.filesConfigurationService.hasShortAutoSaveDelay(i.resource)||(e||this.lastKnownDirtyCount>0)&&this.updateActivityBadge()}updateActivityBadge(){const i=this.lastKnownDirtyCount=this.workingCopyService.dirtyCount;i>0?this.badgeHandle.value=this.activityService.showViewContainerActivity(y,{badge:new h(i,e=>e===1?l.localize("dirtyFile","1 unsaved file"):l.localize("dirtyFiles","{0} unsaved files",i))}):this.badgeHandle.clear()}};a=c([n(0,C),n(1,f),n(2,b)],a);export{a as DirtyFilesIndicator};
