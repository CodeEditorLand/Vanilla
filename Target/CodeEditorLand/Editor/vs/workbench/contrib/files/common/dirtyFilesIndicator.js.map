{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/common/dirtyFilesIndicator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tIActivityService,\n\tNumberBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport { IFilesConfigurationService } from \"../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport {\n\ttype IWorkingCopy,\n\tWorkingCopyCapabilities,\n} from \"../../../services/workingCopy/common/workingCopy.js\";\nimport { IWorkingCopyService } from \"../../../services/workingCopy/common/workingCopyService.js\";\nimport { VIEWLET_ID } from \"./files.js\";\n\nexport class DirtyFilesIndicator\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.dirtyFilesIndicator\";\n\n\tprivate readonly badgeHandle = this._register(new MutableDisposable());\n\n\tprivate lastKnownDirtyCount = 0;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IWorkingCopyService\n\t\tprivate readonly workingCopyService: IWorkingCopyService,\n\t\t@IFilesConfigurationService\n\t\tprivate readonly filesConfigurationService: IFilesConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.updateActivityBadge();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Working copy dirty indicator\n\t\tthis._register(\n\t\t\tthis.workingCopyService.onDidChangeDirty((workingCopy) =>\n\t\t\t\tthis.onWorkingCopyDidChangeDirty(workingCopy),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onWorkingCopyDidChangeDirty(workingCopy: IWorkingCopy): void {\n\t\tconst gotDirty = workingCopy.isDirty();\n\t\tif (\n\t\t\tgotDirty &&\n\t\t\t!(workingCopy.capabilities & WorkingCopyCapabilities.Untitled) &&\n\t\t\tthis.filesConfigurationService.hasShortAutoSaveDelay(\n\t\t\t\tworkingCopy.resource,\n\t\t\t)\n\t\t) {\n\t\t\treturn; // do not indicate dirty of working copies that are auto saved after short delay\n\t\t}\n\n\t\tif (gotDirty || this.lastKnownDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate updateActivityBadge(): void {\n\t\tconst dirtyCount = (this.lastKnownDirtyCount =\n\t\t\tthis.workingCopyService.dirtyCount);\n\n\t\t// Indicate dirty count in badge if any\n\t\tif (dirtyCount > 0) {\n\t\t\tthis.badgeHandle.value =\n\t\t\t\tthis.activityService.showViewContainerActivity(VIEWLET_ID, {\n\t\t\t\t\tbadge: new NumberBadge(dirtyCount, (num) =>\n\t\t\t\t\t\tnum === 1\n\t\t\t\t\t\t\t? nls.localize(\"dirtyFile\", \"1 unsaved file\")\n\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\"dirtyFiles\",\n\t\t\t\t\t\t\t\t\t\"{0} unsaved files\",\n\t\t\t\t\t\t\t\t\tdirtyCount,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.badgeHandle.clear();\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,YAAY,SAAS;AAErB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,kCAAkC;AAC3C;AAAA,EAEC;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAEpB,IAAM,sBAAN,cACE,WAET;AAAA,EAOC,YACoC,iBAElB,oBAEA,2BAChB;AACD,UAAM;AAN6B;AAElB;AAEA;AAIjB,SAAK,oBAAoB;AAEzB,SAAK,kBAAkB;AAAA,EACxB;AAAA,EA7CD,OA0BA;AAAA;AAAA;AAAA,EACC,OAAgB,KAAK;AAAA,EAEJ,cAAc,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAE7D,sBAAsB;AAAA,EAgBtB,oBAA0B;AAEjC,SAAK;AAAA,MACJ,KAAK,mBAAmB;AAAA,QAAiB,CAAC,gBACzC,KAAK,4BAA4B,WAAW;AAAA,MAC7C;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,4BAA4B,aAAiC;AACpE,UAAM,WAAW,YAAY,QAAQ;AACrC,QACC,YACA,EAAE,YAAY,eAAe,wBAAwB,aACrD,KAAK,0BAA0B;AAAA,MAC9B,YAAY;AAAA,IACb,GACC;AACD;AAAA,IACD;AAEA,QAAI,YAAY,KAAK,sBAAsB,GAAG;AAC7C,WAAK,oBAAoB;AAAA,IAC1B;AAAA,EACD;AAAA,EAEQ,sBAA4B;AACnC,UAAM,aAAc,KAAK,sBACxB,KAAK,mBAAmB;AAGzB,QAAI,aAAa,GAAG;AACnB,WAAK,YAAY,QAChB,KAAK,gBAAgB,0BAA0B,YAAY;AAAA,QAC1D,OAAO,IAAI;AAAA,UAAY;AAAA,UAAY,CAAC,QACnC,QAAQ,IACL,IAAI,SAAS,aAAa,gBAAgB,IAC1C,IAAI;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,QACH;AAAA,MACD,CAAC;AAAA,IACH,OAAO;AACN,WAAK,YAAY,MAAM;AAAA,IACxB;AAAA,EACD;AACD;AAxEa,sBAAN;AAAA,EAWJ;AAAA,EACA;AAAA,EAEA;AAAA,GAdU;",
  "names": []
}
