{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/common/dirtyFilesIndicator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { VIEWLET_ID } from './files.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { IActivityService, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { IWorkingCopyService } from '../../../services/workingCopy/common/workingCopyService.js';\nimport { IWorkingCopy, WorkingCopyCapabilities } from '../../../services/workingCopy/common/workingCopy.js';\nimport { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';\n\nexport class DirtyFilesIndicator extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.dirtyFilesIndicator';\n\n\tprivate readonly badgeHandle = this._register(new MutableDisposable());\n\n\tprivate lastKnownDirtyCount = 0;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateActivityBadge();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Working copy dirty indicator\n\t\tthis._register(this.workingCopyService.onDidChangeDirty(workingCopy => this.onWorkingCopyDidChangeDirty(workingCopy)));\n\t}\n\n\tprivate onWorkingCopyDidChangeDirty(workingCopy: IWorkingCopy): void {\n\t\tconst gotDirty = workingCopy.isDirty();\n\t\tif (gotDirty && !(workingCopy.capabilities & WorkingCopyCapabilities.Untitled) && this.filesConfigurationService.hasShortAutoSaveDelay(workingCopy.resource)) {\n\t\t\treturn; // do not indicate dirty of working copies that are auto saved after short delay\n\t\t}\n\n\t\tif (gotDirty || this.lastKnownDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate updateActivityBadge(): void {\n\t\tconst dirtyCount = this.lastKnownDirtyCount = this.workingCopyService.dirtyCount;\n\n\t\t// Indicate dirty count in badge if any\n\t\tif (dirtyCount > 0) {\n\t\t\tthis.badgeHandle.value = this.activityService.showViewContainerActivity(\n\t\t\t\tVIEWLET_ID,\n\t\t\t\t{\n\t\t\t\t\tbadge: new NumberBadge(dirtyCount, num => num === 1 ? nls.localize('dirtyFile', \"1 unsaved file\") : nls.localize('dirtyFiles', \"{0} unsaved files\", dirtyCount)),\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis.badgeHandle.clear();\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,8BAA8B;AACvC,SAAS,kBAAkB;AAC3B,SAAS,YAAY,yBAAyB;AAC9C,SAAS,kBAAkB,mBAAmB;AAC9C,SAAS,2BAA2B;AACpC,SAAS,cAAc,+BAA+B;AACtD,SAAS,kCAAkC;AAEpC,IAAM,sBAAN,cAAkC,WAA6C;AAAA,EAQrF,YACoC,iBACG,oBACO,2BAC5C;AACD,UAAM;AAJ6B;AACG;AACO;AAI7C,SAAK,oBAAoB;AAEzB,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAhCD,OAcsF;AAAA;AAAA;AAAA,EAErF,OAAgB,KAAK;AAAA,EAEJ,cAAc,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAE7D,sBAAsB;AAAA,EActB,oBAA0B;AAGjC,SAAK,UAAU,KAAK,mBAAmB,iBAAiB,iBAAe,KAAK,4BAA4B,WAAW,CAAC,CAAC;AAAA,EACtH;AAAA,EAEQ,4BAA4B,aAAiC;AACpE,UAAM,WAAW,YAAY,QAAQ;AACrC,QAAI,YAAY,EAAE,YAAY,eAAe,wBAAwB,aAAa,KAAK,0BAA0B,sBAAsB,YAAY,QAAQ,GAAG;AAC7J;AAAA,IACD;AAEA,QAAI,YAAY,KAAK,sBAAsB,GAAG;AAC7C,WAAK,oBAAoB;AAAA,IAC1B;AAAA,EACD;AAAA,EAEQ,sBAA4B;AACnC,UAAM,aAAa,KAAK,sBAAsB,KAAK,mBAAmB;AAGtE,QAAI,aAAa,GAAG;AACnB,WAAK,YAAY,QAAQ,KAAK,gBAAgB;AAAA,QAC7C;AAAA,QACA;AAAA,UACC,OAAO,IAAI,YAAY,YAAY,SAAO,QAAQ,IAAI,IAAI,SAAS,aAAa,gBAAgB,IAAI,IAAI,SAAS,cAAc,qBAAqB,UAAU,CAAC;AAAA,QAChK;AAAA,MACD;AAAA,IACD,OAAO;AACN,WAAK,YAAY,MAAM;AAAA,IACxB;AAAA,EACD;AACD;AApDa,sBAAN;AAAA,EASJ;AAAA,EACA;AAAA,EACA;AAAA,GAXU;",
  "names": []
}
