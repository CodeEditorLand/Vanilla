{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/common/files.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport type { IExpression } from \"../../../../base/common/glob.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IEditorOptions } from \"../../../../editor/common/config/editorOptions.js\";\nimport {\n\ttype ILanguageSelection,\n\tILanguageService,\n} from \"../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport type { ITextModelContentProvider } from \"../../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tContextKeyExpr,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { InputFocusedContextKey } from \"../../../../platform/contextkey/common/contextkeys.js\";\nimport type { ITextEditorOptions } from \"../../../../platform/editor/common/editor.js\";\nimport {\n\tFileChangeType,\n\tIFileService,\n\ttype IFilesConfiguration as PlatformIFilesConfiguration,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tEditorResourceAccessor,\n\ttype IEditorIdentifier,\n\ttype IWorkbenchEditorConfiguration,\n\tSideBySideEditor,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport type { IEditorGroup } from \"../../../services/editor/common/editorGroupsService.js\";\nimport type { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { ITextFileService } from \"../../../services/textfile/common/textfiles.js\";\n\n/**\n * Explorer viewlet id.\n */\nexport const VIEWLET_ID = \"workbench.view.explorer\";\n\n/**\n * Explorer file view id.\n */\nexport const VIEW_ID = \"workbench.explorer.fileView\";\n\n/**\n * Context Keys to use with keybindings for the Explorer and Open Editors view\n */\nexport const ExplorerViewletVisibleContext = new RawContextKey<boolean>(\n\t\"explorerViewletVisible\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerViewletVisible\",\n\t\t\t\"True when the EXPLORER viewlet is visible.\",\n\t\t),\n\t},\n);\nexport const FoldersViewVisibleContext = new RawContextKey<boolean>(\n\t\"foldersViewVisible\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"foldersViewVisible\",\n\t\t\t\"True when the FOLDERS view (the file tree within the explorer view container) is visible.\",\n\t\t),\n\t},\n);\nexport const ExplorerFolderContext = new RawContextKey<boolean>(\n\t\"explorerResourceIsFolder\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerResourceIsFolder\",\n\t\t\t\"True when the focused item in the EXPLORER is a folder.\",\n\t\t),\n\t},\n);\nexport const ExplorerResourceReadonlyContext = new RawContextKey<boolean>(\n\t\"explorerResourceReadonly\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerResourceReadonly\",\n\t\t\t\"True when the focused item in the EXPLORER is read-only.\",\n\t\t),\n\t},\n);\nexport const ExplorerResourceNotReadonlyContext =\n\tExplorerResourceReadonlyContext.toNegated();\n/**\n * Comma separated list of editor ids that can be used for the selected explorer resource.\n */\nexport const ExplorerResourceAvailableEditorIdsContext =\n\tnew RawContextKey<string>(\"explorerResourceAvailableEditorIds\", \"\");\nexport const ExplorerRootContext = new RawContextKey<boolean>(\n\t\"explorerResourceIsRoot\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerResourceIsRoot\",\n\t\t\t\"True when the focused item in the EXPLORER is a root folder.\",\n\t\t),\n\t},\n);\nexport const ExplorerResourceCut = new RawContextKey<boolean>(\n\t\"explorerResourceCut\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerResourceCut\",\n\t\t\t\"True when an item in the EXPLORER has been cut for cut and paste.\",\n\t\t),\n\t},\n);\nexport const ExplorerResourceMoveableToTrash = new RawContextKey<boolean>(\n\t\"explorerResourceMoveableToTrash\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerResourceMoveableToTrash\",\n\t\t\t\"True when the focused item in the EXPLORER can be moved to trash.\",\n\t\t),\n\t},\n);\nexport const FilesExplorerFocusedContext = new RawContextKey<boolean>(\n\t\"filesExplorerFocus\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"filesExplorerFocus\",\n\t\t\t\"True when the focus is inside the EXPLORER view.\",\n\t\t),\n\t},\n);\nexport const OpenEditorsFocusedContext = new RawContextKey<boolean>(\n\t\"openEditorsFocus\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"openEditorsFocus\",\n\t\t\t\"True when the focus is inside the OPEN EDITORS view.\",\n\t\t),\n\t},\n);\nexport const ExplorerFocusedContext = new RawContextKey<boolean>(\n\t\"explorerViewletFocus\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerViewletFocus\",\n\t\t\t\"True when the focus is inside the EXPLORER viewlet.\",\n\t\t),\n\t},\n);\n\n// compressed nodes\nexport const ExplorerCompressedFocusContext = new RawContextKey<boolean>(\n\t\"explorerViewletCompressedFocus\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerViewletCompressedFocus\",\n\t\t\t\"True when the focused item in the EXPLORER view is a compact item.\",\n\t\t),\n\t},\n);\nexport const ExplorerCompressedFirstFocusContext = new RawContextKey<boolean>(\n\t\"explorerViewletCompressedFirstFocus\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerViewletCompressedFirstFocus\",\n\t\t\t\"True when the focus is inside a compact item's first part in the EXPLORER view.\",\n\t\t),\n\t},\n);\nexport const ExplorerCompressedLastFocusContext = new RawContextKey<boolean>(\n\t\"explorerViewletCompressedLastFocus\",\n\ttrue,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"explorerViewletCompressedLastFocus\",\n\t\t\t\"True when the focus is inside a compact item's last part in the EXPLORER view.\",\n\t\t),\n\t},\n);\n\nexport const ViewHasSomeCollapsibleRootItemContext = new RawContextKey<boolean>(\n\t\"viewHasSomeCollapsibleItem\",\n\tfalse,\n\t{\n\t\ttype: \"boolean\",\n\t\tdescription: localize(\n\t\t\t\"viewHasSomeCollapsibleItem\",\n\t\t\t\"True when a workspace in the EXPLORER view has some collapsible root child.\",\n\t\t),\n\t},\n);\n\nexport const FilesExplorerFocusCondition = ContextKeyExpr.and(\n\tFoldersViewVisibleContext,\n\tFilesExplorerFocusedContext,\n\tContextKeyExpr.not(InputFocusedContextKey),\n);\nexport const ExplorerFocusCondition = ContextKeyExpr.and(\n\tFoldersViewVisibleContext,\n\tExplorerFocusedContext,\n\tContextKeyExpr.not(InputFocusedContextKey),\n);\n\n/**\n * Text file editor id.\n */\nexport const TEXT_FILE_EDITOR_ID = \"workbench.editors.files.textFileEditor\";\n\n/**\n * File editor input id.\n */\nexport const FILE_EDITOR_INPUT_ID = \"workbench.editors.files.fileEditorInput\";\n\n/**\n * Binary file editor id.\n */\nexport const BINARY_FILE_EDITOR_ID = \"workbench.editors.files.binaryFileEditor\";\n\n/**\n * Language identifier for binary files opened as text.\n */\nexport const BINARY_TEXT_FILE_MODE = \"code-text-binary\";\n\nexport interface IFilesConfiguration\n\textends PlatformIFilesConfiguration,\n\t\tIWorkbenchEditorConfiguration {\n\texplorer: {\n\t\topenEditors: {\n\t\t\tvisible: number;\n\t\t\tsortOrder: \"editorOrder\" | \"alphabetical\" | \"fullPath\";\n\t\t};\n\t\tautoReveal: boolean | \"focusNoScroll\";\n\t\tautoRevealExclude: IExpression;\n\t\tenableDragAndDrop: boolean;\n\t\tconfirmDelete: boolean;\n\t\tenableUndo: boolean;\n\t\tconfirmUndo: UndoConfirmLevel;\n\t\texpandSingleFolderWorkspaces: boolean;\n\t\tsortOrder: SortOrder;\n\t\tsortOrderLexicographicOptions: LexicographicOptions;\n\t\tsortOrderReverse: boolean;\n\t\tdecorations: {\n\t\t\tcolors: boolean;\n\t\t\tbadges: boolean;\n\t\t};\n\t\tincrementalNaming: \"simple\" | \"smart\" | \"disabled\";\n\t\texcludeGitIgnore: boolean;\n\t\tfileNesting: {\n\t\t\tenabled: boolean;\n\t\t\texpand: boolean;\n\t\t\tpatterns: { [parent: string]: string };\n\t\t};\n\t\tautoOpenDroppedFile: boolean;\n\t};\n\teditor: IEditorOptions;\n}\n\nexport interface IFileResource {\n\tresource: URI;\n\tisDirectory?: boolean;\n}\n\nexport enum SortOrder {\n\tDefault = \"default\",\n\tMixed = \"mixed\",\n\tFilesFirst = \"filesFirst\",\n\tType = \"type\",\n\tModified = \"modified\",\n\tFoldersNestsFiles = \"foldersNestsFiles\",\n}\n\nexport enum UndoConfirmLevel {\n\tVerbose = \"verbose\",\n\tDefault = \"default\",\n\tLight = \"light\",\n}\n\nexport enum LexicographicOptions {\n\tDefault = \"default\",\n\tUpper = \"upper\",\n\tLower = \"lower\",\n\tUnicode = \"unicode\",\n}\n\nexport interface ISortOrderConfiguration {\n\tsortOrder: SortOrder;\n\tlexicographicOptions: LexicographicOptions;\n\treverse: boolean;\n}\n\nexport class TextFileContentProvider\n\textends Disposable\n\timplements ITextModelContentProvider\n{\n\tprivate readonly fileWatcherDisposable = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t) {\n\t\tsuper();\n\t}\n\n\tstatic async open(\n\t\tresource: URI,\n\t\tscheme: string,\n\t\tlabel: string,\n\t\teditorService: IEditorService,\n\t\toptions?: ITextEditorOptions,\n\t): Promise<void> {\n\t\tawait editorService.openEditor({\n\t\t\toriginal: {\n\t\t\t\tresource: TextFileContentProvider.resourceToTextFile(\n\t\t\t\t\tscheme,\n\t\t\t\t\tresource,\n\t\t\t\t),\n\t\t\t},\n\t\t\tmodified: { resource },\n\t\t\tlabel,\n\t\t\toptions,\n\t\t});\n\t}\n\n\tprivate static resourceToTextFile(scheme: string, resource: URI): URI {\n\t\treturn resource.with({\n\t\t\tscheme,\n\t\t\tquery: JSON.stringify({\n\t\t\t\tscheme: resource.scheme,\n\t\t\t\tquery: resource.query,\n\t\t\t}),\n\t\t});\n\t}\n\n\tprivate static textFileToResource(resource: URI): URI {\n\t\tconst { scheme, query } = JSON.parse(resource.query);\n\n\t\treturn resource.with({ scheme, query });\n\t}\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tif (!resource.query) {\n\t\t\t// We require the URI to use the `query` to transport the original scheme and query\n\t\t\t// as done by `resourceToTextFile`\n\t\t\treturn null;\n\t\t}\n\n\t\tconst savedFileResource =\n\t\t\tTextFileContentProvider.textFileToResource(resource);\n\n\t\t// Make sure our text file is resolved up to date\n\t\tconst codeEditorModel = await this.resolveEditorModel(resource);\n\n\t\t// Make sure to keep contents up to date when it changes\n\t\tif (!this.fileWatcherDisposable.value) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tthis.fileWatcherDisposable.value = disposables;\n\t\t\tdisposables.add(\n\t\t\t\tthis.fileService.onDidFilesChange((changes) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tchanges.contains(\n\t\t\t\t\t\t\tsavedFileResource,\n\t\t\t\t\t\t\tFileChangeType.UPDATED,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.resolveEditorModel(\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\tfalse /* do not create if missing */,\n\t\t\t\t\t\t); // update model when resource changes\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (codeEditorModel) {\n\t\t\t\tdisposables.add(\n\t\t\t\t\tEvent.once(codeEditorModel.onWillDispose)(() =>\n\t\t\t\t\t\tthis.fileWatcherDisposable.clear(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn codeEditorModel;\n\t}\n\n\tprivate resolveEditorModel(\n\t\tresource: URI,\n\t\tcreateAsNeeded?: true,\n\t): Promise<ITextModel>;\n\tprivate resolveEditorModel(\n\t\tresource: URI,\n\t\tcreateAsNeeded?: boolean,\n\t): Promise<ITextModel | null>;\n\tprivate async resolveEditorModel(\n\t\tresource: URI,\n\t\tcreateAsNeeded = true,\n\t): Promise<ITextModel | null> {\n\t\tconst savedFileResource =\n\t\t\tTextFileContentProvider.textFileToResource(resource);\n\n\t\tconst content =\n\t\t\tawait this.textFileService.readStream(savedFileResource);\n\n\t\tlet codeEditorModel = this.modelService.getModel(resource);\n\t\tif (codeEditorModel) {\n\t\t\tthis.modelService.updateModel(codeEditorModel, content.value);\n\t\t} else if (createAsNeeded) {\n\t\t\tconst textFileModel = this.modelService.getModel(savedFileResource);\n\n\t\t\tlet languageSelector: ILanguageSelection;\n\t\t\tif (textFileModel) {\n\t\t\t\tlanguageSelector = this.languageService.createById(\n\t\t\t\t\ttextFileModel.getLanguageId(),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlanguageSelector =\n\t\t\t\t\tthis.languageService.createByFilepathOrFirstLine(\n\t\t\t\t\t\tsavedFileResource,\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tcodeEditorModel = this.modelService.createModel(\n\t\t\t\tcontent.value,\n\t\t\t\tlanguageSelector,\n\t\t\t\tresource,\n\t\t\t);\n\t\t}\n\n\t\treturn codeEditorModel;\n\t}\n}\n\nexport class OpenEditor implements IEditorIdentifier {\n\tprivate id: number;\n\tprivate static COUNTER = 0;\n\n\tconstructor(\n\t\tprivate _editor: EditorInput,\n\t\tprivate _group: IEditorGroup,\n\t) {\n\t\tthis.id = OpenEditor.COUNTER++;\n\t}\n\n\tget editor() {\n\t\treturn this._editor;\n\t}\n\n\tget group() {\n\t\treturn this._group;\n\t}\n\n\tget groupId() {\n\t\treturn this._group.id;\n\t}\n\n\tgetId(): string {\n\t\treturn `openeditor:${this.groupId}:${this.id}`;\n\t}\n\n\tisPreview(): boolean {\n\t\treturn !this._group.isPinned(this.editor);\n\t}\n\n\tisSticky(): boolean {\n\t\treturn this._group.isSticky(this.editor);\n\t}\n\n\tgetResource(): URI | undefined {\n\t\treturn EditorResourceAccessor.getOriginalUri(this.editor, {\n\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SortOrder", "UndoConfirmLevel", "LexicographicOptions"]
}
