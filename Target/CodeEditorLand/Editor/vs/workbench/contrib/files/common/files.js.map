{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/common/files.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { IEditorOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { IWorkbenchEditorConfiguration, IEditorIdentifier, EditorResourceAccessor, SideBySideEditor } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IFilesConfiguration as PlatformIFilesConfiguration, FileChangeType, IFileService } from '../../../../platform/files/common/files.js';\nimport { ContextKeyExpr, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ITextModelContentProvider } from '../../../../editor/common/services/resolverService.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService, ILanguageSelection } from '../../../../editor/common/languages/language.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { InputFocusedContextKey } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { IEditorGroup } from '../../../services/editor/common/editorGroupsService.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ITextEditorOptions } from '../../../../platform/editor/common/editor.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { localize } from '../../../../nls.js';\nimport { IExpression } from '../../../../base/common/glob.js';\n\n/**\n * Explorer viewlet id.\n */\nexport const VIEWLET_ID = 'workbench.view.explorer';\n\n/**\n * Explorer file view id.\n */\nexport const VIEW_ID = 'workbench.explorer.fileView';\n\n/**\n * Context Keys to use with keybindings for the Explorer and Open Editors view\n */\nexport const ExplorerViewletVisibleContext = new RawContextKey<boolean>('explorerViewletVisible', true, { type: 'boolean', description: localize('explorerViewletVisible', \"True when the EXPLORER viewlet is visible.\") });\nexport const FoldersViewVisibleContext = new RawContextKey<boolean>('foldersViewVisible', true, { type: 'boolean', description: localize('foldersViewVisible', \"True when the FOLDERS view (the file tree within the explorer view container) is visible.\") });\nexport const ExplorerFolderContext = new RawContextKey<boolean>('explorerResourceIsFolder', false, { type: 'boolean', description: localize('explorerResourceIsFolder', \"True when the focused item in the EXPLORER is a folder.\") });\nexport const ExplorerResourceReadonlyContext = new RawContextKey<boolean>('explorerResourceReadonly', false, { type: 'boolean', description: localize('explorerResourceReadonly', \"True when the focused item in the EXPLORER is read-only.\") });\nexport const ExplorerResourceNotReadonlyContext = ExplorerResourceReadonlyContext.toNegated();\n/**\n * Comma separated list of editor ids that can be used for the selected explorer resource.\n */\nexport const ExplorerResourceAvailableEditorIdsContext = new RawContextKey<string>('explorerResourceAvailableEditorIds', '');\nexport const ExplorerRootContext = new RawContextKey<boolean>('explorerResourceIsRoot', false, { type: 'boolean', description: localize('explorerResourceIsRoot', \"True when the focused item in the EXPLORER is a root folder.\") });\nexport const ExplorerResourceCut = new RawContextKey<boolean>('explorerResourceCut', false, { type: 'boolean', description: localize('explorerResourceCut', \"True when an item in the EXPLORER has been cut for cut and paste.\") });\nexport const ExplorerResourceMoveableToTrash = new RawContextKey<boolean>('explorerResourceMoveableToTrash', false, { type: 'boolean', description: localize('explorerResourceMoveableToTrash', \"True when the focused item in the EXPLORER can be moved to trash.\") });\nexport const FilesExplorerFocusedContext = new RawContextKey<boolean>('filesExplorerFocus', true, { type: 'boolean', description: localize('filesExplorerFocus', \"True when the focus is inside the EXPLORER view.\") });\nexport const OpenEditorsFocusedContext = new RawContextKey<boolean>('openEditorsFocus', true, { type: 'boolean', description: localize('openEditorsFocus', \"True when the focus is inside the OPEN EDITORS view.\") });\nexport const ExplorerFocusedContext = new RawContextKey<boolean>('explorerViewletFocus', true, { type: 'boolean', description: localize('explorerViewletFocus', \"True when the focus is inside the EXPLORER viewlet.\") });\n\n// compressed nodes\nexport const ExplorerCompressedFocusContext = new RawContextKey<boolean>('explorerViewletCompressedFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedFocus', \"True when the focused item in the EXPLORER view is a compact item.\") });\nexport const ExplorerCompressedFirstFocusContext = new RawContextKey<boolean>('explorerViewletCompressedFirstFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedFirstFocus', \"True when the focus is inside a compact item's first part in the EXPLORER view.\") });\nexport const ExplorerCompressedLastFocusContext = new RawContextKey<boolean>('explorerViewletCompressedLastFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedLastFocus', \"True when the focus is inside a compact item's last part in the EXPLORER view.\") });\n\nexport const ViewHasSomeCollapsibleRootItemContext = new RawContextKey<boolean>('viewHasSomeCollapsibleItem', false, { type: 'boolean', description: localize('viewHasSomeCollapsibleItem', \"True when a workspace in the EXPLORER view has some collapsible root child.\") });\n\nexport const FilesExplorerFocusCondition = ContextKeyExpr.and(FoldersViewVisibleContext, FilesExplorerFocusedContext, ContextKeyExpr.not(InputFocusedContextKey));\nexport const ExplorerFocusCondition = ContextKeyExpr.and(FoldersViewVisibleContext, ExplorerFocusedContext, ContextKeyExpr.not(InputFocusedContextKey));\n\n/**\n * Text file editor id.\n */\nexport const TEXT_FILE_EDITOR_ID = 'workbench.editors.files.textFileEditor';\n\n/**\n * File editor input id.\n */\nexport const FILE_EDITOR_INPUT_ID = 'workbench.editors.files.fileEditorInput';\n\n/**\n * Binary file editor id.\n */\nexport const BINARY_FILE_EDITOR_ID = 'workbench.editors.files.binaryFileEditor';\n\n/**\n * Language identifier for binary files opened as text.\n */\nexport const BINARY_TEXT_FILE_MODE = 'code-text-binary';\n\nexport interface IFilesConfiguration extends PlatformIFilesConfiguration, IWorkbenchEditorConfiguration {\n\texplorer: {\n\t\topenEditors: {\n\t\t\tvisible: number;\n\t\t\tsortOrder: 'editorOrder' | 'alphabetical' | 'fullPath';\n\t\t};\n\t\tautoReveal: boolean | 'focusNoScroll';\n\t\tautoRevealExclude: IExpression;\n\t\tenableDragAndDrop: boolean;\n\t\tconfirmDelete: boolean;\n\t\tenableUndo: boolean;\n\t\tconfirmUndo: UndoConfirmLevel;\n\t\texpandSingleFolderWorkspaces: boolean;\n\t\tsortOrder: SortOrder;\n\t\tsortOrderLexicographicOptions: LexicographicOptions;\n\t\tsortOrderReverse: boolean;\n\t\tdecorations: {\n\t\t\tcolors: boolean;\n\t\t\tbadges: boolean;\n\t\t};\n\t\tincrementalNaming: 'simple' | 'smart' | 'disabled';\n\t\texcludeGitIgnore: boolean;\n\t\tfileNesting: {\n\t\t\tenabled: boolean;\n\t\t\texpand: boolean;\n\t\t\tpatterns: { [parent: string]: string };\n\t\t};\n\t\tautoOpenDroppedFile: boolean;\n\t};\n\teditor: IEditorOptions;\n}\n\nexport interface IFileResource {\n\tresource: URI;\n\tisDirectory?: boolean;\n}\n\nexport const enum SortOrder {\n\tDefault = 'default',\n\tMixed = 'mixed',\n\tFilesFirst = 'filesFirst',\n\tType = 'type',\n\tModified = 'modified',\n\tFoldersNestsFiles = 'foldersNestsFiles',\n}\n\nexport const enum UndoConfirmLevel {\n\tVerbose = 'verbose',\n\tDefault = 'default',\n\tLight = 'light',\n}\n\nexport const enum LexicographicOptions {\n\tDefault = 'default',\n\tUpper = 'upper',\n\tLower = 'lower',\n\tUnicode = 'unicode',\n}\n\nexport interface ISortOrderConfiguration {\n\tsortOrder: SortOrder;\n\tlexicographicOptions: LexicographicOptions;\n\treverse: boolean;\n}\n\nexport class TextFileContentProvider extends Disposable implements ITextModelContentProvider {\n\tprivate readonly fileWatcherDisposable = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tsuper();\n\t}\n\n\tstatic async open(resource: URI, scheme: string, label: string, editorService: IEditorService, options?: ITextEditorOptions): Promise<void> {\n\t\tawait editorService.openEditor({\n\t\t\toriginal: { resource: TextFileContentProvider.resourceToTextFile(scheme, resource) },\n\t\t\tmodified: { resource },\n\t\t\tlabel,\n\t\t\toptions\n\t\t});\n\t}\n\n\tprivate static resourceToTextFile(scheme: string, resource: URI): URI {\n\t\treturn resource.with({ scheme, query: JSON.stringify({ scheme: resource.scheme, query: resource.query }) });\n\t}\n\n\tprivate static textFileToResource(resource: URI): URI {\n\t\tconst { scheme, query } = JSON.parse(resource.query);\n\n\t\treturn resource.with({ scheme, query });\n\t}\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tif (!resource.query) {\n\t\t\t// We require the URI to use the `query` to transport the original scheme and query\n\t\t\t// as done by `resourceToTextFile`\n\t\t\treturn null;\n\t\t}\n\n\t\tconst savedFileResource = TextFileContentProvider.textFileToResource(resource);\n\n\t\t// Make sure our text file is resolved up to date\n\t\tconst codeEditorModel = await this.resolveEditorModel(resource);\n\n\t\t// Make sure to keep contents up to date when it changes\n\t\tif (!this.fileWatcherDisposable.value) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tthis.fileWatcherDisposable.value = disposables;\n\t\t\tdisposables.add(this.fileService.onDidFilesChange(changes => {\n\t\t\t\tif (changes.contains(savedFileResource, FileChangeType.UPDATED)) {\n\t\t\t\t\tthis.resolveEditorModel(resource, false /* do not create if missing */); // update model when resource changes\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (codeEditorModel) {\n\t\t\t\tdisposables.add(Event.once(codeEditorModel.onWillDispose)(() => this.fileWatcherDisposable.clear()));\n\t\t\t}\n\t\t}\n\n\t\treturn codeEditorModel;\n\t}\n\n\tprivate resolveEditorModel(resource: URI, createAsNeeded?: true): Promise<ITextModel>;\n\tprivate resolveEditorModel(resource: URI, createAsNeeded?: boolean): Promise<ITextModel | null>;\n\tprivate async resolveEditorModel(resource: URI, createAsNeeded: boolean = true): Promise<ITextModel | null> {\n\t\tconst savedFileResource = TextFileContentProvider.textFileToResource(resource);\n\n\t\tconst content = await this.textFileService.readStream(savedFileResource);\n\n\t\tlet codeEditorModel = this.modelService.getModel(resource);\n\t\tif (codeEditorModel) {\n\t\t\tthis.modelService.updateModel(codeEditorModel, content.value);\n\t\t} else if (createAsNeeded) {\n\t\t\tconst textFileModel = this.modelService.getModel(savedFileResource);\n\n\t\t\tlet languageSelector: ILanguageSelection;\n\t\t\tif (textFileModel) {\n\t\t\t\tlanguageSelector = this.languageService.createById(textFileModel.getLanguageId());\n\t\t\t} else {\n\t\t\t\tlanguageSelector = this.languageService.createByFilepathOrFirstLine(savedFileResource);\n\t\t\t}\n\n\t\t\tcodeEditorModel = this.modelService.createModel(content.value, languageSelector, resource);\n\t\t}\n\n\t\treturn codeEditorModel;\n\t}\n}\n\nexport class OpenEditor implements IEditorIdentifier {\n\n\tprivate id: number;\n\tprivate static COUNTER = 0;\n\n\tconstructor(private _editor: EditorInput, private _group: IEditorGroup) {\n\t\tthis.id = OpenEditor.COUNTER++;\n\t}\n\n\tget editor() {\n\t\treturn this._editor;\n\t}\n\n\tget group() {\n\t\treturn this._group;\n\t}\n\n\tget groupId() {\n\t\treturn this._group.id;\n\t}\n\n\tgetId(): string {\n\t\treturn `openeditor:${this.groupId}:${this.id}`;\n\t}\n\n\tisPreview(): boolean {\n\t\treturn !this._group.isPinned(this.editor);\n\t}\n\n\tisSticky(): boolean {\n\t\treturn this._group.isSticky(this.editor);\n\t}\n\n\tgetResource(): URI | undefined {\n\t\treturn EditorResourceAccessor.getOriginalUri(this.editor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SortOrder", "UndoConfirmLevel", "LexicographicOptions"]
}
