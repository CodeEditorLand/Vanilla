{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/common/explorerFileNestingTrie.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ntype FilenameAttributes = {\n\t// index.test in index.test.json\n\tbasename: string;\n\t// json in index.test.json\n\textname: string;\n\t// my-folder in my-folder/index.test.json\n\tdirname: string;\n};\n\n/**\n * A sort of double-ended trie, used to efficiently query for matches to \"star\" patterns, where\n * a given key represents a parent and may contain a capturing group (\"*\"), which can then be\n * referenced via the token \"$(capture)\" in associated child patterns.\n *\n * The generated tree will have at most two levels, as subtrees are flattened rather than nested.\n *\n * Example:\n * The config: [\n * [ *.ts , [ $(capture).*.ts ; $(capture).js ] ]\n * [ *.js , [ $(capture).min.js ] ] ]\n * Nests the files: [ a.ts ; a.d.ts ; a.js ; a.min.js ; b.ts ; b.min.js ]\n * As:\n * - a.ts => [ a.d.ts ; a.js ; a.min.js ]\n * - b.ts => [ ]\n * - b.min.ts => [ ]\n */\nexport class ExplorerFileNestingTrie {\n\tprivate root = new PreTrie();\n\n\tconstructor(config: [string, string[]][]) {\n\t\tfor (const [parentPattern, childPatterns] of config) {\n\t\t\tfor (const childPattern of childPatterns) {\n\t\t\t\tthis.root.add(parentPattern, childPattern);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.root.toString();\n\t}\n\n\tprivate getAttributes(filename: string, dirname: string): FilenameAttributes {\n\t\tconst lastDot = filename.lastIndexOf('.');\n\t\tif (lastDot < 1) {\n\t\t\treturn {\n\t\t\t\tdirname,\n\t\t\t\tbasename: filename,\n\t\t\t\textname: ''\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdirname,\n\t\t\t\tbasename: filename.substring(0, lastDot),\n\t\t\t\textname: filename.substring(lastDot + 1)\n\t\t\t};\n\t\t}\n\t}\n\n\tnest(files: string[], dirname: string): Map<string, Set<string>> {\n\t\tconst parentFinder = new PreTrie();\n\n\t\tfor (const potentialParent of files) {\n\t\t\tconst attributes = this.getAttributes(potentialParent, dirname);\n\t\t\tconst children = this.root.get(potentialParent, attributes);\n\t\t\tfor (const child of children) {\n\t\t\t\tparentFinder.add(child, potentialParent);\n\t\t\t}\n\t\t}\n\n\t\tconst findAllRootAncestors = (file: string, seen: Set<string> = new Set()): string[] => {\n\t\t\tif (seen.has(file)) { return []; }\n\t\t\tseen.add(file);\n\t\t\tconst attributes = this.getAttributes(file, dirname);\n\t\t\tconst ancestors = parentFinder.get(file, attributes);\n\t\t\tif (ancestors.length === 0) {\n\t\t\t\treturn [file];\n\t\t\t}\n\n\t\t\tif (ancestors.length === 1 && ancestors[0] === file) {\n\t\t\t\treturn [file];\n\t\t\t}\n\n\t\t\treturn ancestors.flatMap(a => findAllRootAncestors(a, seen));\n\t\t};\n\n\t\tconst result = new Map<string, Set<string>>();\n\t\tfor (const file of files) {\n\t\t\tlet ancestors = findAllRootAncestors(file);\n\t\t\tif (ancestors.length === 0) { ancestors = [file]; }\n\t\t\tfor (const ancestor of ancestors) {\n\t\t\t\tlet existing = result.get(ancestor);\n\t\t\t\tif (!existing) { result.set(ancestor, existing = new Set()); }\n\t\t\t\tif (file !== ancestor) {\n\t\t\t\t\texisting.add(file);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/** Export for test only. */\nexport class PreTrie {\n\tprivate value: SufTrie = new SufTrie();\n\n\tprivate map: Map<string, PreTrie> = new Map();\n\n\tconstructor() { }\n\n\tadd(key: string, value: string) {\n\t\tif (key === '') {\n\t\t\tthis.value.add(key, value);\n\t\t} else if (key[0] === '*') {\n\t\t\tthis.value.add(key, value);\n\t\t} else {\n\t\t\tconst head = key[0];\n\t\t\tconst rest = key.slice(1);\n\t\t\tlet existing = this.map.get(head);\n\t\t\tif (!existing) {\n\t\t\t\tthis.map.set(head, existing = new PreTrie());\n\t\t\t}\n\t\t\texisting.add(rest, value);\n\t\t}\n\t}\n\n\tget(key: string, attributes: FilenameAttributes): string[] {\n\t\tconst results: string[] = [];\n\t\tresults.push(...this.value.get(key, attributes));\n\n\t\tconst head = key[0];\n\t\tconst rest = key.slice(1);\n\t\tconst existing = this.map.get(head);\n\t\tif (existing) {\n\t\t\tresults.push(...existing.get(rest, attributes));\n\t\t}\n\n\t\treturn results;\n\t}\n\n\ttoString(indentation = ''): string {\n\t\tconst lines = [];\n\t\tif (this.value.hasItems) {\n\t\t\tlines.push('* => \\n' + this.value.toString(indentation + '  '));\n\t\t}\n\t\t[...this.map.entries()].map(([key, trie]) =>\n\t\t\tlines.push('^' + key + ' => \\n' + trie.toString(indentation + '  ')));\n\t\treturn lines.map(l => indentation + l).join('\\n');\n\t}\n}\n\n/** Export for test only. */\nexport class SufTrie {\n\tprivate star: SubstitutionString[] = [];\n\tprivate epsilon: SubstitutionString[] = [];\n\n\tprivate map: Map<string, SufTrie> = new Map();\n\thasItems: boolean = false;\n\n\tconstructor() { }\n\n\tadd(key: string, value: string) {\n\t\tthis.hasItems = true;\n\t\tif (key === '*') {\n\t\t\tthis.star.push(new SubstitutionString(value));\n\t\t} else if (key === '') {\n\t\t\tthis.epsilon.push(new SubstitutionString(value));\n\t\t} else {\n\t\t\tconst tail = key[key.length - 1];\n\t\t\tconst rest = key.slice(0, key.length - 1);\n\t\t\tif (tail === '*') {\n\t\t\t\tthrow Error('Unexpected star in SufTrie key: ' + key);\n\t\t\t} else {\n\t\t\t\tlet existing = this.map.get(tail);\n\t\t\t\tif (!existing) {\n\t\t\t\t\tthis.map.set(tail, existing = new SufTrie());\n\t\t\t\t}\n\t\t\t\texisting.add(rest, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tget(key: string, attributes: FilenameAttributes): string[] {\n\t\tconst results: string[] = [];\n\t\tif (key === '') {\n\t\t\tresults.push(...this.epsilon.map(ss => ss.substitute(attributes)));\n\t\t}\n\t\tif (this.star.length) {\n\t\t\tresults.push(...this.star.map(ss => ss.substitute(attributes, key)));\n\t\t}\n\n\t\tconst tail = key[key.length - 1];\n\t\tconst rest = key.slice(0, key.length - 1);\n\t\tconst existing = this.map.get(tail);\n\t\tif (existing) {\n\t\t\tresults.push(...existing.get(rest, attributes));\n\t\t}\n\n\t\treturn results;\n\t}\n\n\ttoString(indentation = ''): string {\n\t\tconst lines = [];\n\t\tif (this.star.length) {\n\t\t\tlines.push('* => ' + this.star.join('; '));\n\t\t}\n\n\t\tif (this.epsilon.length) {\n\t\t\t// allow-any-unicode-next-line\n\t\t\tlines.push('\u03B5 => ' + this.epsilon.join('; '));\n\t\t}\n\n\t\t[...this.map.entries()].map(([key, trie]) =>\n\t\t\tlines.push(key + '$' + ' => \\n' + trie.toString(indentation + '  ')));\n\n\t\treturn lines.map(l => indentation + l).join('\\n');\n\t}\n}\n\nconst enum SubstitutionType {\n\tcapture = 'capture',\n\tbasename = 'basename',\n\tdirname = 'dirname',\n\textname = 'extname',\n}\n\nconst substitutionStringTokenizer = /\\$[({](capture|basename|dirname|extname)[)}]/g;\n\nclass SubstitutionString {\n\n\tprivate tokens: (string | { capture: SubstitutionType })[] = [];\n\n\tconstructor(pattern: string) {\n\t\tsubstitutionStringTokenizer.lastIndex = 0;\n\t\tlet token;\n\t\tlet lastIndex = 0;\n\t\twhile (token = substitutionStringTokenizer.exec(pattern)) {\n\t\t\tconst prefix = pattern.slice(lastIndex, token.index);\n\t\t\tthis.tokens.push(prefix);\n\n\t\t\tconst type = token[1];\n\t\t\tswitch (type) {\n\t\t\t\tcase SubstitutionType.basename:\n\t\t\t\tcase SubstitutionType.dirname:\n\t\t\t\tcase SubstitutionType.extname:\n\t\t\t\tcase SubstitutionType.capture:\n\t\t\t\t\tthis.tokens.push({ capture: type });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: throw Error('unknown substitution type: ' + type);\n\t\t\t}\n\t\t\tlastIndex = token.index + token[0].length;\n\t\t}\n\n\t\tif (lastIndex !== pattern.length) {\n\t\t\tconst suffix = pattern.slice(lastIndex, pattern.length);\n\t\t\tthis.tokens.push(suffix);\n\t\t}\n\t}\n\n\tsubstitute(attributes: FilenameAttributes, capture?: string): string {\n\t\treturn this.tokens.map(t => {\n\t\t\tif (typeof t === 'string') { return t; }\n\t\t\tswitch (t.capture) {\n\t\t\t\tcase SubstitutionType.basename: return attributes.basename;\n\t\t\t\tcase SubstitutionType.dirname: return attributes.dirname;\n\t\t\t\tcase SubstitutionType.extname: return attributes.extname;\n\t\t\t\tcase SubstitutionType.capture: return capture || '';\n\t\t\t}\n\t\t}).join('');\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SubstitutionType"]
}
