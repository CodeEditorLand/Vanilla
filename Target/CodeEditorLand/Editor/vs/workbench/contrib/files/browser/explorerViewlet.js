var Y=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var x=(w,e,o,r)=>{for(var t=r>1?void 0:r?z(e,o):e,s=w.length-1,a;s>=0;s--)(a=w[s])&&(t=(r?a(e,o,t):a(t))||t);return r&&t&&Y(e,o,t),t},i=(w,e)=>(o,r)=>e(o,r,w);import"./media/explorerviewlet.css";import{localize as c,localize2 as D}from"../../../../nls.js";import{mark as K}from"../../../../base/common/performance.js";import{VIEWLET_ID as C,VIEW_ID as I,ExplorerViewletVisibleContext as G}from"../common/files.js";import{IConfigurationService as U}from"../../../../platform/configuration/common/configuration.js";import{ExplorerView as A}from"./views/explorerView.js";import{EmptyView as p}from"./views/emptyView.js";import{OpenEditorsView as y}from"./views/openEditorsView.js";import{IStorageService as j}from"../../../../platform/storage/common/storage.js";import{IInstantiationService as J}from"../../../../platform/instantiation/common/instantiation.js";import{IExtensionService as Q}from"../../../services/extensions/common/extensions.js";import{IWorkspaceContextService as M,WorkbenchState as X}from"../../../../platform/workspace/common/workspace.js";import{ITelemetryService as Z}from"../../../../platform/telemetry/common/telemetry.js";import{IContextKeyService as ee,ContextKeyExpr as n}from"../../../../platform/contextkey/common/contextkey.js";import{IThemeService as oe}from"../../../../platform/theme/common/themeService.js";import{Extensions as P,ViewContainerLocation as re,IViewDescriptorService as te,ViewContentGroups as h}from"../../../common/views.js";import{IContextMenuService as ie}from"../../../../platform/contextview/browser/contextView.js";import{Disposable as ne}from"../../../../base/common/lifecycle.js";import{IWorkbenchLayoutService as se}from"../../../services/layout/browser/layoutService.js";import{ViewPaneContainer as ce}from"../../../browser/parts/views/viewPaneContainer.js";import{KeyChord as ae,KeyMod as k,KeyCode as S}from"../../../../base/common/keyCodes.js";import{Registry as q}from"../../../../platform/registry/common/platform.js";import{IProgressService as pe,ProgressLocation as de}from"../../../../platform/progress/common/progress.js";import{SyncDescriptor as v}from"../../../../platform/instantiation/common/descriptors.js";import{WorkbenchStateContext as m,RemoteNameContext as b,OpenFolderWorkspaceSupportContext as $}from"../../../common/contextkeys.js";import{IsWebContext as W}from"../../../../platform/contextkey/common/contextkeys.js";import{AddRootFolderAction as N,OpenFolderAction as le,OpenFileFolderAction as me,OpenFolderViaWorkspaceAction as we}from"../../../browser/actions/workspaceActions.js";import{OpenRecentAction as fe}from"../../../browser/actions/windowActions.js";import{isMacintosh as ue,isWeb as he}from"../../../../base/common/platform.js";import{Codicon as B}from"../../../../base/common/codicons.js";import{registerIcon as L}from"../../../../platform/theme/common/iconRegistry.js";import{isMouseEvent as H}from"../../../../base/browser/dom.js";const O=L("explorer-view-icon",B.files,c("explorerViewIcon","View icon of the explorer view.")),Ve=L("open-editors-view-icon",B.book,c("openEditorsIcon","View icon of the open editors view."));let E=class extends ne{constructor(o,r){super();this.workspaceContextService=o;r.withProgress({location:de.Explorer},()=>o.getCompleteWorkspace()).finally(()=>{this.registerViews(),this._register(o.onDidChangeWorkbenchState(()=>this.registerViews())),this._register(o.onDidChangeWorkspaceFolders(()=>this.registerViews()))})}static ID="workbench.contrib.explorerViewletViews";registerViews(){K("code/willRegisterExplorerViews");const o=d.getViews(T),r=[],t=[],s=this.createOpenEditorsViewDescriptor();o.some(l=>l.id===s.id)||r.push(s);const a=this.createExplorerViewDescriptor(),f=o.find(l=>l.id===a.id),g=this.createEmptyViewDescriptor(),u=o.find(l=>l.id===g.id);this.workspaceContextService.getWorkbenchState()===X.EMPTY||this.workspaceContextService.getWorkspace().folders.length===0?(f&&t.push(f),u||r.push(g)):(u&&t.push(u),f||r.push(a)),t.length&&d.deregisterViews(t,T),r.length&&d.registerViews(r,T),K("code/didRegisterExplorerViews")}createOpenEditorsViewDescriptor(){return{id:y.ID,name:y.NAME,ctorDescriptor:new v(y),containerIcon:Ve,order:0,canToggleVisibility:!0,canMoveView:!0,collapsed:!1,hideByDefault:!0,focusCommand:{id:"workbench.files.action.focusOpenEditorsView",keybindings:{primary:ae(k.CtrlCmd|S.KeyK,S.KeyE)}}}}createEmptyViewDescriptor(){return{id:p.ID,name:p.NAME,containerIcon:O,ctorDescriptor:new v(p),order:1,canToggleVisibility:!0,focusCommand:{id:"workbench.explorer.fileView.focus"}}}createExplorerViewDescriptor(){return{id:I,name:D("folders","Folders"),containerIcon:O,ctorDescriptor:new v(A),order:1,canMoveView:!0,canToggleVisibility:!1,focusCommand:{id:"workbench.explorer.fileView.focus"}}}};E=x([i(0,M),i(1,pe)],E);let V=class extends ce{viewletVisibleContextKey;constructor(e,o,r,t,s,a,f,g,u,l,_){super(C,{mergeViewWithContainerWhenSingleView:!0},a,s,e,u,o,l,g,t,r,_),this.viewletVisibleContextKey=G.bindTo(f),this._register(this.contextService.onDidChangeWorkspaceName(Ce=>this.updateTitleArea()))}create(e){super.create(e),e.classList.add("explorer-viewlet")}createView(e,o){return e.id===I?this.instantiationService.createInstance(A,{...o,delegate:{willOpenElement:r=>{if(!H(r))return;const t=this.getOpenEditorsView();if(t){let s=0;this.configurationService.getValue().workbench?.editor?.enablePreview&&(s=250),t.setStructuralRefreshDelay(s)}},didOpenElement:r=>{if(!H(r))return;this.getOpenEditorsView()?.setStructuralRefreshDelay(0)}}}):super.createView(e,o)}getExplorerView(){return this.getView(I)}getOpenEditorsView(){return this.getView(y.ID)}setVisible(e){this.viewletVisibleContextKey.set(e),super.setVisible(e)}focus(){const e=this.getView(I);e&&this.panes.every(o=>!o.isExpanded())&&e.setExpanded(!0),e?.isExpanded()?e.focus():super.focus()}};V=x([i(0,se),i(1,Z),i(2,M),i(3,j),i(4,U),i(5,J),i(6,ee),i(7,oe),i(8,ie),i(9,Q),i(10,te)],V);const ge=q.as(P.ViewContainersRegistry),T=ge.registerViewContainer({id:C,title:D("explore","Explorer"),ctorDescriptor:new v(V),storageId:"workbench.explorer.views.state",icon:O,alwaysUseContainerInfo:!0,hideIfEmpty:!0,order:0,openCommandActionDescriptor:{id:C,title:D("explore","Explorer"),mnemonicTitle:c({key:"miViewExplorer",comment:["&& denotes a mnemonic"]},"&&Explorer"),keybindings:{primary:k.CtrlCmd|k.Shift|S.KeyE},order:0}},re.Sidebar,{isDefault:!0}),F=c("openFolder","Open Folder"),Ie=c("addAFolder","add a folder"),ye=c("openRecent","Open Recent"),ve=`[${F}](command:${N.ID})`,Ee=`[${Ie}](command:${N.ID})`,R=`[${F}](command:${ue&&!he?me.ID:le.ID})`,xe=`[${F}](command:${we.ID})`,De=`[${ye}](command:${fe.ID})`,d=q.as(P.ViewsRegistry);d.registerViewWelcomeContent(p.ID,{content:c({key:"noWorkspaceHelp",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change']},`You have not yet added a folder to the workspace.
{0}`,ve),when:n.and(m.isEqualTo("workspace"),$),group:h.Open,order:1}),d.registerViewWelcomeContent(p.ID,{content:c({key:"noFolderHelpWeb",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change']},`You have not yet opened a folder.
{0}
{1}`,xe,De),when:n.and(m.isEqualTo("workspace"),$.toNegated()),group:h.Open,order:1}),d.registerViewWelcomeContent(p.ID,{content:c({key:"remoteNoFolderHelp",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change']},`Connected to remote.
{0}`,R),when:n.and(m.notEqualsTo("workspace"),b.notEqualsTo(""),W.toNegated()),group:h.Open,order:1}),d.registerViewWelcomeContent(p.ID,{content:c({key:"noFolderButEditorsHelp",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change']},`You have not yet opened a folder.
{0}
Opening a folder will close all currently open editors. To keep them open, {1} instead.`,R,Ee),when:n.and(n.has("editorIsOpen"),n.or(n.and(m.notEqualsTo("workspace"),b.isEqualTo("")),n.and(m.notEqualsTo("workspace"),W))),group:h.Open,order:1}),d.registerViewWelcomeContent(p.ID,{content:c({key:"noFolderHelp",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change']},`You have not yet opened a folder.
{0}`,R),when:n.and(n.has("editorIsOpen")?.negate(),n.or(n.and(m.notEqualsTo("workspace"),b.isEqualTo("")),n.and(m.notEqualsTo("workspace"),W))),group:h.Open,order:1});export{V as ExplorerViewPaneContainer,E as ExplorerViewletViewsContribution,T as VIEW_CONTAINER};
