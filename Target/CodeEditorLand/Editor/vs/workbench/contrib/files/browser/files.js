import{URI as I}from"../../../../base/common/uri.js";import{IListService as h}from"../../../../platform/list/browser/listService.js";import{OpenEditor as f}from"../common/files.js";import{EditorResourceAccessor as S,SideBySideEditor as C}from"../../../common/editor.js";import{List as g}from"../../../../base/browser/ui/list/listWidget.js";import"../../../services/editor/common/editorService.js";import{ExplorerItem as b}from"../common/explorerModel.js";import{coalesce as R}from"../../../../base/common/arrays.js";import{AsyncDataTree as L}from"../../../../base/browser/ui/tree/asyncDataTree.js";import"../../../services/editor/common/editorGroupsService.js";import"../../../common/views.js";import{createDecorator as F}from"../../../../platform/instantiation/common/instantiation.js";import"../../../../editor/browser/services/bulkEditService.js";import"../../../../platform/progress/common/progress.js";import{isActiveElement as x}from"../../../../base/browser/dom.js";const Z=F("explorerService");function P(r){const e=r.lastFocusedList,s=e?.getHTMLElement();if(s&&x(s)){let o;if(e instanceof g){const i=e.getFocusedElements();i.length&&(o=i[0])}else if(e instanceof L){const i=e.getFocus();i.length&&(o=i[0])}return o}}function U(r,e,s){if(I.isUri(r))return r;const o=P(s);return o instanceof b?o.resource:o instanceof f?o.getResource():S.getOriginalUri(e.activeEditor,{supportSideBySide:C.PRIMARY})}function $(r,e,s,o,i){const c=e.lastFocusedList,d=c?.getHTMLElement();if(d&&x(d)){if(c instanceof L&&c.getFocus().every(t=>t instanceof b)){const t=i.getContext(!0,!0);if(t.length)return t.map(l=>l.resource)}if(c instanceof g){const t=R(c.getSelectedElements().filter(n=>n instanceof f).map(n=>n.getResource())),l=c.getFocusedElements(),a=l.length?l[0]:void 0;let p;if(I.isUri(r))p=r.toString();else if(a instanceof f){const n=a.getResource();p=n?n.toString():void 0}const E=t.findIndex(n=>n.toString()===p);if(E!==-1){const n=t[E];return t.splice(E,1),t.unshift(n),t}}}const u=o.activeGroup.selectedEditors;if(u.length>1&&I.isUri(r)){const t=u.findIndex(l=>l.matches({resource:r}));if(t!==-1){const l=u[t];return u.splice(t,1),u.unshift(l),u.map(a=>S.getOriginalUri(a)).filter(a=>!!a)}}const v=U(r,s,e);return v?[v]:[]}function ee(r){const e=r.get(h).lastFocusedList,s=e?.getHTMLElement();if(s&&x(s)&&e instanceof g){const o=R(e.getSelectedElements().filter(m=>m instanceof f)),i=e.getFocusedElements(),c=i.length?i[0]:void 0;let d;return c instanceof f&&(d=c),o.some(m=>m===d)?o:d?[d]:void 0}}export{Z as IExplorerService,$ as getMultiSelectedResources,ee as getOpenEditorsViewMultiSelection,U as getResourceForCommand};
