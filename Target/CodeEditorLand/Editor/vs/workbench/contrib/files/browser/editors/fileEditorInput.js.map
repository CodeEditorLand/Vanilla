{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/fileEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../../base/common/htmlContent.js\";\nimport {\n\tDisposableStore,\n\ttype IReference,\n\tdispose,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../../base/common/network.js\";\nimport { isEqual } from \"../../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport { createTextBufferFactory } from \"../../../../../editor/common/model/textModel.js\";\nimport { ITextModelService } from \"../../../../../editor/common/services/resolverService.js\";\nimport { ITextResourceConfigurationService } from \"../../../../../editor/common/services/textResourceConfiguration.js\";\nimport type { ITextResourceEditorInput } from \"../../../../../platform/editor/common/editor.js\";\nimport { IFileService } from \"../../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { ILabelService } from \"../../../../../platform/label/common/label.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\tEditorInputCapabilities,\n\ttype GroupIdentifier,\n\ttype IEditorDescriptor,\n\ttype IEditorPane,\n\ttype IFileEditorInput,\n\ttype IFileEditorInputOptions,\n\ttype IMoveResult,\n\ttype IUntypedEditorInput,\n\ttype IUntypedFileEditorInput,\n\ttype Verbosity,\n\tfindViewStateForEditor,\n\tisResourceEditorInput,\n} from \"../../../../common/editor.js\";\nimport { BinaryEditorModel } from \"../../../../common/editor/binaryEditorModel.js\";\nimport type {\n\tEditorInput,\n\tIUntypedEditorOptions,\n} from \"../../../../common/editor/editorInput.js\";\nimport { AbstractTextResourceEditorInput } from \"../../../../common/editor/textResourceEditorInput.js\";\nimport { ICustomEditorLabelService } from \"../../../../services/editor/common/customEditorLabelService.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport { IFilesConfigurationService } from \"../../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { IPathService } from \"../../../../services/path/common/pathService.js\";\nimport {\n\ttype EncodingMode,\n\ttype ITextFileEditorModel,\n\tITextFileService,\n\tTextFileEditorModelState,\n\ttype TextFileOperationError,\n\tTextFileOperationResult,\n\tTextFileResolveReason,\n} from \"../../../../services/textfile/common/textfiles.js\";\nimport {\n\tBINARY_FILE_EDITOR_ID,\n\tFILE_EDITOR_INPUT_ID,\n\tTEXT_FILE_EDITOR_ID,\n} from \"../../common/files.js\";\n\nenum ForceOpenAs {\n\tNone = 0,\n\tText = 1,\n\tBinary = 2,\n}\n\n/**\n * A file editor input is the input type for the file editor of file system resources.\n */\nexport class FileEditorInput\n\textends AbstractTextResourceEditorInput\n\timplements IFileEditorInput\n{\n\toverride get typeId(): string {\n\t\treturn FILE_EDITOR_INPUT_ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\tlet capabilities = EditorInputCapabilities.CanSplitInGroup;\n\n\t\tif (this.model) {\n\t\t\tif (this.model.isReadonly()) {\n\t\t\t\tcapabilities |= EditorInputCapabilities.Readonly;\n\t\t\t}\n\t\t} else if (this.fileService.hasProvider(this.resource)) {\n\t\t\tif (this.filesConfigurationService.isReadonly(this.resource)) {\n\t\t\t\tcapabilities |= EditorInputCapabilities.Readonly;\n\t\t\t}\n\t\t} else {\n\t\t\tcapabilities |= EditorInputCapabilities.Untitled;\n\t\t}\n\n\t\tif (!(capabilities & EditorInputCapabilities.Readonly)) {\n\t\t\tcapabilities |= EditorInputCapabilities.CanDropIntoEditor;\n\t\t}\n\n\t\treturn capabilities;\n\t}\n\n\tprivate preferredName: string | undefined;\n\tprivate preferredDescription: string | undefined;\n\tprivate preferredEncoding: string | undefined;\n\tprivate preferredLanguageId: string | undefined;\n\tprivate preferredContents: string | undefined;\n\n\tprivate forceOpenAs: ForceOpenAs = ForceOpenAs.None;\n\n\tprivate model: ITextFileEditorModel | undefined = undefined;\n\tprivate cachedTextFileModelReference:\n\t\t| IReference<ITextFileEditorModel>\n\t\t| undefined = undefined;\n\n\tprivate readonly modelListeners = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tresource: URI,\n\t\tpreferredResource: URI | undefined,\n\t\tpreferredName: string | undefined,\n\t\tpreferredDescription: string | undefined,\n\t\tpreferredEncoding: string | undefined,\n\t\tpreferredLanguageId: string | undefined,\n\t\tpreferredContents: string | undefined,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@ICustomEditorLabelService customEditorLabelService: ICustomEditorLabelService\n\t) {\n\t\tsuper(resource, preferredResource, editorService, textFileService, labelService, fileService, filesConfigurationService, textResourceConfigurationService, customEditorLabelService);\n\n\t\tthis.model = this.textFileService.files.get(resource);\n\n\t\tif (preferredName) {\n\t\t\tthis.setPreferredName(preferredName);\n\t\t}\n\n\t\tif (preferredDescription) {\n\t\t\tthis.setPreferredDescription(preferredDescription);\n\t\t}\n\n\t\tif (preferredEncoding) {\n\t\t\tthis.setPreferredEncoding(preferredEncoding);\n\t\t}\n\n\t\tif (preferredLanguageId) {\n\t\t\tthis.setPreferredLanguageId(preferredLanguageId);\n\t\t}\n\n\t\tif (typeof preferredContents === 'string') {\n\t\t\tthis.setPreferredContents(preferredContents);\n\t\t}\n\n\t\t// Attach to model that matches our resource once created\n\t\tthis._register(this.textFileService.files.onDidCreate(model => this.onDidCreateTextFileModel(model)));\n\n\t\t// If a file model already exists, make sure to wire it in\n\t\tif (this.model) {\n\t\t\tthis.registerModelListeners(this.model);\n\t\t}\n\t}\n\n\tprivate onDidCreateTextFileModel(model: ITextFileEditorModel): void {\n\t\t// Once the text file model is created, we keep it inside\n\t\t// the input to be able to implement some methods properly\n\t\tif (isEqual(model.resource, this.resource)) {\n\t\t\tthis.model = model;\n\n\t\t\tthis.registerModelListeners(model);\n\t\t}\n\t}\n\n\tprivate registerModelListeners(model: ITextFileEditorModel): void {\n\t\t// Clear any old\n\t\tthis.modelListeners.clear();\n\n\t\t// re-emit some events from the model\n\t\tthis.modelListeners.add(\n\t\t\tmodel.onDidChangeDirty(() => this._onDidChangeDirty.fire()),\n\t\t);\n\t\tthis.modelListeners.add(\n\t\t\tmodel.onDidChangeReadonly(() =>\n\t\t\t\tthis._onDidChangeCapabilities.fire(),\n\t\t\t),\n\t\t);\n\n\t\t// important: treat save errors as potential dirty change because\n\t\t// a file that is in save conflict or error will report dirty even\n\t\t// if auto save is turned on.\n\t\tthis.modelListeners.add(\n\t\t\tmodel.onDidSaveError(() => this._onDidChangeDirty.fire()),\n\t\t);\n\n\t\t// remove model association once it gets disposed\n\t\tthis.modelListeners.add(\n\t\t\tEvent.once(model.onWillDispose)(() => {\n\t\t\t\tthis.modelListeners.clear();\n\t\t\t\tthis.model = undefined;\n\t\t\t}),\n\t\t);\n\t}\n\n\toverride getName(): string {\n\t\treturn this.preferredName || super.getName();\n\t}\n\n\tsetPreferredName(name: string): void {\n\t\tif (!this.allowLabelOverride()) {\n\t\t\treturn; // block for specific schemes we consider to be owning\n\t\t}\n\n\t\tif (this.preferredName !== name) {\n\t\t\tthis.preferredName = name;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tprivate allowLabelOverride(): boolean {\n\t\treturn (\n\t\t\tthis.resource.scheme !== this.pathService.defaultUriScheme &&\n\t\t\tthis.resource.scheme !== Schemas.vscodeUserData &&\n\t\t\tthis.resource.scheme !== Schemas.file &&\n\t\t\tthis.resource.scheme !== Schemas.vscodeRemote\n\t\t);\n\t}\n\n\tgetPreferredName(): string | undefined {\n\t\treturn this.preferredName;\n\t}\n\n\toverride isReadonly(): boolean | IMarkdownString {\n\t\treturn this.model\n\t\t\t? this.model.isReadonly()\n\t\t\t: this.filesConfigurationService.isReadonly(this.resource);\n\t}\n\n\toverride getDescription(verbosity?: Verbosity): string | undefined {\n\t\treturn this.preferredDescription || super.getDescription(verbosity);\n\t}\n\n\tsetPreferredDescription(description: string): void {\n\t\tif (!this.allowLabelOverride()) {\n\t\t\treturn; // block for specific schemes we consider to be owning\n\t\t}\n\n\t\tif (this.preferredDescription !== description) {\n\t\t\tthis.preferredDescription = description;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tgetPreferredDescription(): string | undefined {\n\t\treturn this.preferredDescription;\n\t}\n\n\toverride getTitle(verbosity?: Verbosity): string {\n\t\tlet title = super.getTitle(verbosity);\n\n\t\tconst preferredTitle = this.getPreferredTitle();\n\t\tif (preferredTitle) {\n\t\t\ttitle = `${preferredTitle} (${title})`;\n\t\t}\n\n\t\treturn title;\n\t}\n\n\tprotected getPreferredTitle(): string | undefined {\n\t\tif (this.preferredName && this.preferredDescription) {\n\t\t\treturn `${this.preferredName} ${this.preferredDescription}`;\n\t\t}\n\n\t\tif (this.preferredName || this.preferredDescription) {\n\t\t\treturn this.preferredName ?? this.preferredDescription;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\tif (this.model) {\n\t\t\treturn this.model.getEncoding();\n\t\t}\n\n\t\treturn this.preferredEncoding;\n\t}\n\n\tgetPreferredEncoding(): string | undefined {\n\t\treturn this.preferredEncoding;\n\t}\n\n\tasync setEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n\t\tthis.setPreferredEncoding(encoding);\n\n\t\treturn this.model?.setEncoding(encoding, mode);\n\t}\n\n\tsetPreferredEncoding(encoding: string): void {\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// encoding is a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tgetLanguageId(): string | undefined {\n\t\tif (this.model) {\n\t\t\treturn this.model.getLanguageId();\n\t\t}\n\n\t\treturn this.preferredLanguageId;\n\t}\n\n\tgetPreferredLanguageId(): string | undefined {\n\t\treturn this.preferredLanguageId;\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.setPreferredLanguageId(languageId);\n\n\t\tthis.model?.setLanguageId(languageId, source);\n\t}\n\n\tsetPreferredLanguageId(languageId: string): void {\n\t\tthis.preferredLanguageId = languageId;\n\n\t\t// languages are a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tsetPreferredContents(contents: string): void {\n\t\tthis.preferredContents = contents;\n\n\t\t// contents is a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tsetForceOpenAsText(): void {\n\t\tthis.forceOpenAs = ForceOpenAs.Text;\n\t}\n\n\tsetForceOpenAsBinary(): void {\n\t\tthis.forceOpenAs = ForceOpenAs.Binary;\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn !!this.model?.isDirty();\n\t}\n\n\toverride isSaving(): boolean {\n\t\tif (\n\t\t\tthis.model?.hasState(TextFileEditorModelState.SAVED) ||\n\t\t\tthis.model?.hasState(TextFileEditorModelState.CONFLICT) ||\n\t\t\tthis.model?.hasState(TextFileEditorModelState.ERROR)\n\t\t) {\n\t\t\treturn false; // require the model to be dirty and not in conflict or error state\n\t\t}\n\n\t\t// Note: currently not checking for ModelState.PENDING_SAVE for a reason\n\t\t// because we currently miss an event for this state change on editors\n\t\t// and it could result in bad UX where an editor can be closed even though\n\t\t// it shows up as dirty and has not finished saving yet.\n\n\t\tif (this.filesConfigurationService.hasShortAutoSaveDelay(this)) {\n\t\t\treturn true; // a short auto save is configured, treat this as being saved\n\t\t}\n\n\t\treturn super.isSaving();\n\t}\n\n\toverride prefersEditorPane<T extends IEditorDescriptor<IEditorPane>>(\n\t\teditorPanes: T[],\n\t): T | undefined {\n\t\tif (this.forceOpenAs === ForceOpenAs.Binary) {\n\t\t\treturn editorPanes.find(\n\t\t\t\t(editorPane) => editorPane.typeId === BINARY_FILE_EDITOR_ID,\n\t\t\t);\n\t\t}\n\n\t\treturn editorPanes.find(\n\t\t\t(editorPane) => editorPane.typeId === TEXT_FILE_EDITOR_ID,\n\t\t);\n\t}\n\n\toverride resolve(\n\t\toptions?: IFileEditorInputOptions,\n\t): Promise<ITextFileEditorModel | BinaryEditorModel> {\n\t\t// Resolve as binary\n\t\tif (this.forceOpenAs === ForceOpenAs.Binary) {\n\t\t\treturn this.doResolveAsBinary();\n\t\t}\n\n\t\t// Resolve as text\n\t\treturn this.doResolveAsText(options);\n\t}\n\n\tprivate async doResolveAsText(\n\t\toptions?: IFileEditorInputOptions,\n\t): Promise<ITextFileEditorModel | BinaryEditorModel> {\n\t\ttry {\n\t\t\t// Unset preferred contents after having applied it once\n\t\t\t// to prevent this property to stick. We still want future\n\t\t\t// `resolve` calls to fetch the contents from disk.\n\t\t\tconst preferredContents = this.preferredContents;\n\t\t\tthis.preferredContents = undefined;\n\n\t\t\t// Resolve resource via text file service and only allow\n\t\t\t// to open binary files if we are instructed so\n\t\t\tawait this.textFileService.files.resolve(this.resource, {\n\t\t\t\tlanguageId: this.preferredLanguageId,\n\t\t\t\tencoding: this.preferredEncoding,\n\t\t\t\tcontents:\n\t\t\t\t\ttypeof preferredContents === \"string\"\n\t\t\t\t\t\t? createTextBufferFactory(preferredContents)\n\t\t\t\t\t\t: undefined,\n\t\t\t\treload: { async: true }, // trigger a reload of the model if it exists already but do not wait to show the model\n\t\t\t\tallowBinary: this.forceOpenAs === ForceOpenAs.Text,\n\t\t\t\treason: TextFileResolveReason.EDITOR,\n\t\t\t\tlimits: this.ensureLimits(options),\n\t\t\t});\n\n\t\t\t// This is a bit ugly, because we first resolve the model and then resolve a model reference. the reason being that binary\n\t\t\t// or very large files do not resolve to a text file model but should be opened as binary files without text. First calling into\n\t\t\t// resolve() ensures we are not creating model references for these kind of resources.\n\t\t\t// In addition we have a bit of payload to take into account (encoding, reload) that the text resolver does not handle yet.\n\t\t\tif (!this.cachedTextFileModelReference) {\n\t\t\t\tthis.cachedTextFileModelReference =\n\t\t\t\t\t(await this.textModelService.createModelReference(\n\t\t\t\t\t\tthis.resource,\n\t\t\t\t\t)) as IReference<ITextFileEditorModel>;\n\t\t\t}\n\n\t\t\tconst model = this.cachedTextFileModelReference.object;\n\n\t\t\t// It is possible that this input was disposed before the model\n\t\t\t// finished resolving. As such, we need to make sure to dispose\n\t\t\t// the model reference to not leak it.\n\t\t\tif (this.isDisposed()) {\n\t\t\t\tthis.disposeModelReference();\n\t\t\t}\n\n\t\t\treturn model;\n\t\t} catch (error) {\n\t\t\t// Handle binary files with binary model\n\t\t\tif (\n\t\t\t\t(<TextFileOperationError>error).textFileOperationResult ===\n\t\t\t\tTextFileOperationResult.FILE_IS_BINARY\n\t\t\t) {\n\t\t\t\treturn this.doResolveAsBinary();\n\t\t\t}\n\n\t\t\t// Bubble any other error up\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async doResolveAsBinary(): Promise<BinaryEditorModel> {\n\t\tconst model = this.instantiationService.createInstance(\n\t\t\tBinaryEditorModel,\n\t\t\tthis.preferredResource,\n\t\t\tthis.getName(),\n\t\t);\n\t\tawait model.resolve();\n\n\t\treturn model;\n\t}\n\n\tisResolved(): boolean {\n\t\treturn !!this.model;\n\t}\n\n\toverride async rename(\n\t\tgroup: GroupIdentifier,\n\t\ttarget: URI,\n\t): Promise<IMoveResult> {\n\t\treturn {\n\t\t\teditor: {\n\t\t\t\tresource: target,\n\t\t\t\tencoding: this.getEncoding(),\n\t\t\t\toptions: {\n\t\t\t\t\tviewState: findViewStateForEditor(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\tthis.editorService,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}\n\n\toverride toUntyped(\n\t\toptions?: IUntypedEditorOptions,\n\t): ITextResourceEditorInput {\n\t\tconst untypedInput: IUntypedFileEditorInput = {\n\t\t\tresource: this.preferredResource,\n\t\t\tforceFile: true,\n\t\t\toptions: {\n\t\t\t\toverride: this.editorId,\n\t\t\t},\n\t\t};\n\n\t\tif (typeof options?.preserveViewState === \"number\") {\n\t\t\tuntypedInput.encoding = this.getEncoding();\n\t\t\tuntypedInput.languageId = this.getLanguageId();\n\t\t\tuntypedInput.contents = (() => {\n\t\t\t\tconst model = this.textFileService.files.get(this.resource);\n\t\t\t\tif (\n\t\t\t\t\tmodel?.isDirty() &&\n\t\t\t\t\t!model.textEditorModel.isTooLargeForHeapOperation()\n\t\t\t\t) {\n\t\t\t\t\treturn model.textEditorModel.getValue(); // only if dirty and not too large\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t})();\n\n\t\t\tuntypedInput.options = {\n\t\t\t\t...untypedInput.options,\n\t\t\t\tviewState: findViewStateForEditor(\n\t\t\t\t\tthis,\n\t\t\t\t\toptions.preserveViewState,\n\t\t\t\t\tthis.editorService,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\treturn untypedInput;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof FileEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\t\t// Model\n\t\tthis.model = undefined;\n\n\t\t// Model reference\n\t\tthis.disposeModelReference();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate disposeModelReference(): void {\n\t\tdispose(this.cachedTextFileModelReference);\n\t\tthis.cachedTextFileModelReference = undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ForceOpenAs"]
}
