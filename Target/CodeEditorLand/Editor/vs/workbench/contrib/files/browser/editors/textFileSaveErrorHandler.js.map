{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../../nls.js';\nimport { toErrorMessage } from '../../../../../base/common/errorMessage.js';\nimport { basename, isEqual } from '../../../../../base/common/resources.js';\nimport { Action } from '../../../../../base/common/actions.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { FileOperationError, FileOperationResult, IWriteFileOptions } from '../../../../../platform/files/common/files.js';\nimport { ITextFileService, ISaveErrorHandler, ITextFileEditorModel, ITextFileSaveAsOptions, ITextFileSaveOptions } from '../../../../services/textfile/common/textfiles.js';\nimport { ServicesAccessor, IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IDisposable, dispose, Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IWorkbenchContribution } from '../../../../common/contributions.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { ResourceMap } from '../../../../../base/common/map.js';\nimport { DiffEditorInput } from '../../../../common/editor/diffEditorInput.js';\nimport { IContextKeyService, RawContextKey } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { TextFileContentProvider } from '../../common/files.js';\nimport { FileEditorInput } from './fileEditorInput.js';\nimport { SAVE_FILE_AS_LABEL } from '../fileConstants.js';\nimport { INotificationService, INotificationHandle, INotificationActions, Severity } from '../../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { IProductService } from '../../../../../platform/product/common/productService.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { IPreferencesService } from '../../../../services/preferences/common/preferences.js';\nimport { IEditorIdentifier, SaveReason, SideBySideEditor } from '../../../../common/editor.js';\nimport { hash } from '../../../../../base/common/hash.js';\n\nexport const CONFLICT_RESOLUTION_CONTEXT = 'saveConflictResolutionContext';\nexport const CONFLICT_RESOLUTION_SCHEME = 'conflictResolution';\n\nconst LEARN_MORE_DIRTY_WRITE_IGNORE_KEY = 'learnMoreDirtyWriteError';\n\nconst conflictEditorHelp = localize('userGuide', \"Use the actions in the editor tool bar to either undo your changes or overwrite the content of the file with your changes.\");\n\n// A handler for text file save error happening with conflict resolution actions\nexport class TextFileSaveErrorHandler extends Disposable implements ISaveErrorHandler, IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.textFileSaveErrorHandler';\n\n\tprivate readonly messages = new ResourceMap<INotificationHandle>();\n\tprivate readonly conflictResolutionContext = new RawContextKey<boolean>(CONFLICT_RESOLUTION_CONTEXT, false, true).bindTo(this.contextKeyService);\n\tprivate activeConflictResolutionResource: URI | undefined = undefined;\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IContextKeyService private contextKeyService: IContextKeyService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tconst provider = this._register(instantiationService.createInstance(TextFileContentProvider));\n\t\tthis._register(textModelService.registerTextModelContentProvider(CONFLICT_RESOLUTION_SCHEME, provider));\n\n\t\t// Set as save error handler to service for text files\n\t\tthis.textFileService.files.saveErrorHandler = this;\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.textFileService.files.onDidSave(e => this.onFileSavedOrReverted(e.model.resource)));\n\t\tthis._register(this.textFileService.files.onDidRevert(model => this.onFileSavedOrReverted(model.resource)));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.onActiveEditorChanged()));\n\t}\n\n\tprivate onActiveEditorChanged(): void {\n\t\tlet isActiveEditorSaveConflictResolution = false;\n\t\tlet activeConflictResolutionResource: URI | undefined;\n\n\t\tconst activeInput = this.editorService.activeEditor;\n\t\tif (activeInput instanceof DiffEditorInput) {\n\t\t\tconst resource = activeInput.original.resource;\n\t\t\tif (resource?.scheme === CONFLICT_RESOLUTION_SCHEME) {\n\t\t\t\tisActiveEditorSaveConflictResolution = true;\n\t\t\t\tactiveConflictResolutionResource = activeInput.modified.resource;\n\t\t\t}\n\t\t}\n\n\t\tthis.conflictResolutionContext.set(isActiveEditorSaveConflictResolution);\n\t\tthis.activeConflictResolutionResource = activeConflictResolutionResource;\n\t}\n\n\tprivate onFileSavedOrReverted(resource: URI): void {\n\t\tconst messageHandle = this.messages.get(resource);\n\t\tif (messageHandle) {\n\t\t\tmessageHandle.close();\n\t\t\tthis.messages.delete(resource);\n\t\t}\n\t}\n\n\tonSaveError(error: unknown, model: ITextFileEditorModel, options: ITextFileSaveOptions): void {\n\t\tconst fileOperationError = error as FileOperationError;\n\t\tconst resource = model.resource;\n\n\t\tlet message: string;\n\t\tconst primaryActions: Action[] = [];\n\t\tconst secondaryActions: Action[] = [];\n\n\t\t// Dirty write prevention\n\t\tif (fileOperationError.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\n\t\t\t// If the user tried to save from the opened conflict editor, show its message again\n\t\t\tif (this.activeConflictResolutionResource && isEqual(this.activeConflictResolutionResource, model.resource)) {\n\t\t\t\tif (this.storageService.getBoolean(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, StorageScope.APPLICATION)) {\n\t\t\t\t\treturn; // return if this message is ignored\n\t\t\t\t}\n\n\t\t\t\tmessage = conflictEditorHelp;\n\n\t\t\t\tprimaryActions.push(this.instantiationService.createInstance(ResolveConflictLearnMoreAction));\n\t\t\t\tsecondaryActions.push(this.instantiationService.createInstance(DoNotShowResolveConflictLearnMoreAction));\n\t\t\t}\n\n\t\t\t// Otherwise show the message that will lead the user into the save conflict editor.\n\t\t\telse {\n\t\t\t\tmessage = localize('staleSaveError', \"Failed to save '{0}': The content of the file is newer. Please compare your version with the file contents or overwrite the content of the file with your changes.\", basename(resource));\n\n\t\t\t\tprimaryActions.push(this.instantiationService.createInstance(ResolveSaveConflictAction, model));\n\t\t\t\tprimaryActions.push(this.instantiationService.createInstance(SaveModelIgnoreModifiedSinceAction, model, options));\n\n\t\t\t\tsecondaryActions.push(this.instantiationService.createInstance(ConfigureSaveConflictAction));\n\t\t\t}\n\t\t}\n\n\t\t// Any other save error\n\t\telse {\n\t\t\tconst isWriteLocked = fileOperationError.fileOperationResult === FileOperationResult.FILE_WRITE_LOCKED;\n\t\t\tconst triedToUnlock = isWriteLocked && (fileOperationError.options as IWriteFileOptions | undefined)?.unlock;\n\t\t\tconst isPermissionDenied = fileOperationError.fileOperationResult === FileOperationResult.FILE_PERMISSION_DENIED;\n\t\t\tconst canSaveElevated = resource.scheme === Schemas.file; // currently only supported for local schemes (https://github.com/microsoft/vscode/issues/48659)\n\n\t\t\t// Save Elevated\n\t\t\tif (canSaveElevated && (isPermissionDenied || triedToUnlock)) {\n\t\t\t\tprimaryActions.push(this.instantiationService.createInstance(SaveModelElevatedAction, model, options, !!triedToUnlock));\n\t\t\t}\n\n\t\t\t// Unlock\n\t\t\telse if (isWriteLocked) {\n\t\t\t\tprimaryActions.push(this.instantiationService.createInstance(UnlockModelAction, model, options));\n\t\t\t}\n\n\t\t\t// Retry\n\t\t\telse {\n\t\t\t\tprimaryActions.push(this.instantiationService.createInstance(RetrySaveModelAction, model, options));\n\t\t\t}\n\n\t\t\t// Save As\n\t\t\tprimaryActions.push(this.instantiationService.createInstance(SaveModelAsAction, model));\n\n\t\t\t// Revert\n\t\t\tprimaryActions.push(this.instantiationService.createInstance(RevertModelAction, model));\n\n\t\t\t// Message\n\t\t\tif (isWriteLocked) {\n\t\t\t\tif (triedToUnlock && canSaveElevated) {\n\t\t\t\t\tmessage = isWindows ? localize('readonlySaveErrorAdmin', \"Failed to save '{0}': File is read-only. Select 'Overwrite as Admin' to retry as administrator.\", basename(resource)) : localize('readonlySaveErrorSudo', \"Failed to save '{0}': File is read-only. Select 'Overwrite as Sudo' to retry as superuser.\", basename(resource));\n\t\t\t\t} else {\n\t\t\t\t\tmessage = localize('readonlySaveError', \"Failed to save '{0}': File is read-only. Select 'Overwrite' to attempt to make it writeable.\", basename(resource));\n\t\t\t\t}\n\t\t\t} else if (canSaveElevated && isPermissionDenied) {\n\t\t\t\tmessage = isWindows ? localize('permissionDeniedSaveError', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.\", basename(resource)) : localize('permissionDeniedSaveErrorSudo', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.\", basename(resource));\n\t\t\t} else {\n\t\t\t\tmessage = localize({ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, \"Failed to save '{0}': {1}\", basename(resource), toErrorMessage(error, false));\n\t\t\t}\n\t\t}\n\n\t\t// Show message and keep function to hide in case the file gets saved/reverted\n\t\tconst actions: INotificationActions = { primary: primaryActions, secondary: secondaryActions };\n\t\tconst handle = this.notificationService.notify({\n\t\t\tid: `${hash(model.resource.toString())}`, // unique per model (https://github.com/microsoft/vscode/issues/121539)\n\t\t\tseverity: Severity.Error,\n\t\t\tmessage,\n\t\t\tactions\n\t\t});\n\t\tEvent.once(handle.onDidClose)(() => { dispose(primaryActions); dispose(secondaryActions); });\n\t\tthis.messages.set(model.resource, handle);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.messages.clear();\n\t}\n}\n\nconst pendingResolveSaveConflictMessages: INotificationHandle[] = [];\nfunction clearPendingResolveSaveConflictMessages(): void {\n\twhile (pendingResolveSaveConflictMessages.length > 0) {\n\t\tconst item = pendingResolveSaveConflictMessages.pop();\n\t\titem?.close();\n\t}\n}\n\nclass ResolveConflictLearnMoreAction extends Action {\n\n\tconstructor(\n\t\t@IOpenerService private readonly openerService: IOpenerService\n\t) {\n\t\tsuper('workbench.files.action.resolveConflictLearnMore', localize('learnMore', \"Learn More\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tawait this.openerService.open(URI.parse('https://go.microsoft.com/fwlink/?linkid=868264'));\n\t}\n}\n\nclass DoNotShowResolveConflictLearnMoreAction extends Action {\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper('workbench.files.action.resolveConflictLearnMoreDoNotShowAgain', localize('dontShowAgain', \"Don't Show Again\"));\n\t}\n\n\toverride async run(notification: IDisposable): Promise<void> {\n\n\t\t// Remember this as application state\n\t\tthis.storageService.store(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, true, StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\t// Hide notification\n\t\tnotification.dispose();\n\t}\n}\n\nclass ResolveSaveConflictAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper('workbench.files.action.resolveConflict', localize('compareChanges', \"Compare\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tconst resource = this.model.resource;\n\t\t\tconst name = basename(resource);\n\t\t\tconst editorLabel = localize('saveConflictDiffLabel', \"{0} (in file) \u2194 {1} (in {2}) - Resolve save conflict\", name, name, this.productService.nameLong);\n\n\t\t\tawait TextFileContentProvider.open(resource, CONFLICT_RESOLUTION_SCHEME, editorLabel, this.editorService, { pinned: true });\n\n\t\t\t// Show additional help how to resolve the save conflict\n\t\t\tconst actions = { primary: [this.instantiationService.createInstance(ResolveConflictLearnMoreAction)] };\n\t\t\tconst handle = this.notificationService.notify({\n\t\t\t\tid: `${hash(resource.toString())}`, // unique per model\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage: conflictEditorHelp,\n\t\t\t\tactions,\n\t\t\t\tneverShowAgain: { id: LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, isSecondary: true }\n\t\t\t});\n\t\t\tEvent.once(handle.onDidClose)(() => dispose(actions.primary));\n\t\t\tpendingResolveSaveConflictMessages.push(handle);\n\t\t}\n\t}\n}\n\nclass SaveModelElevatedAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\tprivate options: ITextFileSaveOptions,\n\t\tprivate triedToUnlock: boolean\n\t) {\n\t\tsuper('workbench.files.action.saveModelElevated', triedToUnlock ? isWindows ? localize('overwriteElevated', \"Overwrite as Admin...\") : localize('overwriteElevatedSudo', \"Overwrite as Sudo...\") : isWindows ? localize('saveElevated', \"Retry as Admin...\") : localize('saveElevatedSudo', \"Retry as Sudo...\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tawait this.model.save({\n\t\t\t\t...this.options,\n\t\t\t\twriteElevated: true,\n\t\t\t\twriteUnlock: this.triedToUnlock,\n\t\t\t\treason: SaveReason.EXPLICIT\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass RetrySaveModelAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\tprivate options: ITextFileSaveOptions\n\t) {\n\t\tsuper('workbench.files.action.saveModel', localize('retry', \"Retry\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tawait this.model.save({ ...this.options, reason: SaveReason.EXPLICIT });\n\t\t}\n\t}\n}\n\nclass RevertModelAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel\n\t) {\n\t\tsuper('workbench.files.action.revertModel', localize('revert', \"Revert\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tawait this.model.revert();\n\t\t}\n\t}\n}\n\nclass SaveModelAsAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\t@IEditorService private editorService: IEditorService\n\t) {\n\t\tsuper('workbench.files.action.saveModelAs', SAVE_FILE_AS_LABEL.value);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tconst editor = this.findEditor();\n\t\t\tif (editor) {\n\t\t\t\tawait this.editorService.save(editor, { saveAs: true, reason: SaveReason.EXPLICIT });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate findEditor(): IEditorIdentifier | undefined {\n\t\tlet preferredMatchingEditor: IEditorIdentifier | undefined;\n\n\t\tconst editors = this.editorService.findEditors(this.model.resource, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\tfor (const identifier of editors) {\n\t\t\tif (identifier.editor instanceof FileEditorInput) {\n\t\t\t\t// We prefer a `FileEditorInput` for \"Save As\", but it is possible\n\t\t\t\t// that a custom editor is leveraging the text file model and as\n\t\t\t\t// such we need to fallback to any other editor having the resource\n\t\t\t\t// opened for running the save.\n\t\t\t\tpreferredMatchingEditor = identifier;\n\t\t\t\tbreak;\n\t\t\t} else if (!preferredMatchingEditor) {\n\t\t\t\tpreferredMatchingEditor = identifier;\n\t\t\t}\n\t\t}\n\n\t\treturn preferredMatchingEditor;\n\t}\n}\n\nclass UnlockModelAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\tprivate options: ITextFileSaveOptions\n\t) {\n\t\tsuper('workbench.files.action.unlock', localize('overwrite', \"Overwrite\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tawait this.model.save({ ...this.options, writeUnlock: true, reason: SaveReason.EXPLICIT });\n\t\t}\n\t}\n}\n\nclass SaveModelIgnoreModifiedSinceAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\tprivate options: ITextFileSaveOptions\n\t) {\n\t\tsuper('workbench.files.action.saveIgnoreModifiedSince', localize('overwrite', \"Overwrite\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tawait this.model.save({ ...this.options, ignoreModifiedSince: true, reason: SaveReason.EXPLICIT });\n\t\t}\n\t}\n}\n\nclass ConfigureSaveConflictAction extends Action {\n\n\tconstructor(\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper('workbench.files.action.configureSaveConflict', localize('configure', \"Configure\"));\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tthis.preferencesService.openSettings({ query: 'files.saveConflictResolution' });\n\t}\n}\n\nexport const acceptLocalChangesCommand = (accessor: ServicesAccessor, resource: URI) => {\n\treturn acceptOrRevertLocalChangesCommand(accessor, resource, true);\n};\n\nexport const revertLocalChangesCommand = (accessor: ServicesAccessor, resource: URI) => {\n\treturn acceptOrRevertLocalChangesCommand(accessor, resource, false);\n};\n\nasync function acceptOrRevertLocalChangesCommand(accessor: ServicesAccessor, resource: URI, accept: boolean) {\n\tconst editorService = accessor.get(IEditorService);\n\n\tconst editorPane = editorService.activeEditorPane;\n\tif (!editorPane) {\n\t\treturn;\n\t}\n\n\tconst editor = editorPane.input;\n\tconst group = editorPane.group;\n\n\t// Hide any previously shown message about how to use these actions\n\tclearPendingResolveSaveConflictMessages();\n\n\t// Accept or revert\n\tif (accept) {\n\t\tconst options: ITextFileSaveAsOptions = { ignoreModifiedSince: true, reason: SaveReason.EXPLICIT };\n\t\tawait editorService.save({ editor, groupId: group.id }, options);\n\t} else {\n\t\tawait editorService.revert({ editor, groupId: group.id });\n\t}\n\n\t// Reopen original editor\n\tawait editorService.openEditor({ resource }, group);\n\n\t// Clean up\n\treturn group.closeEditor(editor);\n}\n"],
  "mappings": "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",
  "names": []
}
