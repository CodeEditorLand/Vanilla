import { URI } from "vs/base/common/uri";
import { IBulkEditService, ResourceFileEdit } from "vs/editor/browser/services/bulkEditService";
import { IClipboardService } from "vs/platform/clipboard/common/clipboardService";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IFileService } from "vs/platform/files/common/files";
import { IProgressService, ProgressLocation } from "vs/platform/progress/common/progress";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IEditableData } from "vs/workbench/common/views";
import { IExplorerService, IExplorerView } from "vs/workbench/contrib/files/browser/files";
import { ExplorerItem } from "vs/workbench/contrib/files/common/explorerModel";
import { ISortOrderConfiguration } from "vs/workbench/contrib/files/common/files";
import { IEditorService } from "vs/workbench/services/editor/common/editorService";
import { IFilesConfigurationService } from "vs/workbench/services/filesConfiguration/common/filesConfigurationService";
import { IHostService } from "vs/workbench/services/host/browser/host";
export declare const UNDO_REDO_SOURCE: any;
export declare class ExplorerService implements IExplorerService {
    private fileService;
    private configurationService;
    private contextService;
    private clipboardService;
    private editorService;
    private readonly uriIdentityService;
    private readonly bulkEditService;
    private readonly progressService;
    private readonly filesConfigurationService;
    private readonly telemetryService;
    readonly _serviceBrand: undefined;
    private static readonly EXPLORER_FILE_CHANGES_REACT_DELAY;
    private readonly disposables;
    private editable;
    private config;
    private cutItems;
    private view;
    private model;
    private onFileChangesScheduler;
    private fileChangeEvents;
    private revealExcludeMatcher;
    constructor(fileService: IFileService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, clipboardService: IClipboardService, editorService: IEditorService, uriIdentityService: IUriIdentityService, bulkEditService: IBulkEditService, progressService: IProgressService, hostService: IHostService, filesConfigurationService: IFilesConfigurationService, telemetryService: ITelemetryService);
    get roots(): ExplorerItem[];
    get sortOrderConfiguration(): ISortOrderConfiguration;
    registerView(contextProvider: IExplorerView): void;
    getContext(respectMultiSelection: boolean, ignoreNestedChildren?: boolean): ExplorerItem[];
    applyBulkEdit(edit: ResourceFileEdit[], options: {
        undoLabel: string;
        progressLabel: string;
        confirmBeforeUndo?: boolean;
        progressLocation?: ProgressLocation.Explorer | ProgressLocation.Window;
    }): Promise<void>;
    hasViewFocus(): boolean;
    findClosest(resource: URI): ExplorerItem | null;
    findClosestRoot(resource: URI): ExplorerItem | null;
    setEditable(stat: ExplorerItem, data: IEditableData | null): Promise<void>;
    setToCopy(items: ExplorerItem[], cut: boolean): Promise<void>;
    isCut(item: ExplorerItem): boolean;
    getEditable(): {
        stat: ExplorerItem;
        data: IEditableData;
    } | undefined;
    getEditableData(stat: ExplorerItem): IEditableData | undefined;
    isEditable(stat: ExplorerItem | undefined): boolean;
    select(resource: URI, reveal?: boolean | string): Promise<void>;
    refresh(reveal?: boolean): Promise<void>;
    private onDidRunOperation;
    private shouldAutoRevealItem;
    private onConfigurationUpdated;
    dispose(): void;
}
