{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../../nls.js\";\nimport {\n\tEditorResolution,\n\ttype IEditorOptions,\n} from \"../../../../../platform/editor/common/editor.js\";\nimport { IStorageService } from \"../../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../../platform/theme/common/themeService.js\";\nimport { BaseBinaryResourceEditor } from \"../../../../browser/parts/editor/binaryEditor.js\";\nimport { isEditorInputWithOptions } from \"../../../../common/editor.js\";\nimport { DiffEditorInput } from \"../../../../common/editor/diffEditorInput.js\";\nimport type { EditorInput } from \"../../../../common/editor/editorInput.js\";\nimport type { IEditorGroup } from \"../../../../services/editor/common/editorGroupsService.js\";\nimport {\n\tIEditorResolverService,\n\ttype ResolvedEditor,\n\tResolvedStatus,\n} from \"../../../../services/editor/common/editorResolverService.js\";\nimport {\n\tBINARY_FILE_EDITOR_ID,\n\tBINARY_TEXT_FILE_MODE,\n} from \"../../common/files.js\";\nimport { FileEditorInput } from \"./fileEditorInput.js\";\n\n/**\n * An implementation of editor for binary files that cannot be displayed.\n */\nexport class BinaryFileEditor extends BaseBinaryResourceEditor {\n\tstatic readonly ID = BINARY_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorResolverService\n\t\tprivate readonly editorResolverService: IEditorResolverService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper(\n\t\t\tBinaryFileEditor.ID,\n\t\t\tgroup,\n\t\t\t{\n\t\t\t\topenInternal: (input, options) =>\n\t\t\t\t\tthis.openInternal(input, options),\n\t\t\t},\n\t\t\ttelemetryService,\n\t\t\tthemeService,\n\t\t\tstorageService,\n\t\t);\n\t}\n\n\tprivate async openInternal(\n\t\tinput: EditorInput,\n\t\toptions: IEditorOptions | undefined,\n\t): Promise<void> {\n\t\tif (input instanceof FileEditorInput && this.group.activeEditor) {\n\t\t\t// We operate on the active editor here to support re-opening\n\t\t\t// diff editors where `input` may just be one side of the\n\t\t\t// diff editor.\n\t\t\t// Since `openInternal` can only ever be selected from the\n\t\t\t// active editor of the group, this is a safe assumption.\n\t\t\t// (https://github.com/microsoft/vscode/issues/124222)\n\t\t\tconst activeEditor = this.group.activeEditor;\n\t\t\tconst untypedActiveEditor = activeEditor?.toUntyped();\n\t\t\tif (!untypedActiveEditor) {\n\t\t\t\treturn; // we need untyped editor support\n\t\t\t}\n\n\t\t\t// Try to let the user pick an editor\n\t\t\tlet resolvedEditor: ResolvedEditor | undefined =\n\t\t\t\tawait this.editorResolverService.resolveEditor(\n\t\t\t\t\t{\n\t\t\t\t\t\t...untypedActiveEditor,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\toverride: EditorResolution.PICK,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tthis.group,\n\t\t\t\t);\n\n\t\t\tif (resolvedEditor === ResolvedStatus.NONE) {\n\t\t\t\tresolvedEditor = undefined;\n\t\t\t} else if (resolvedEditor === ResolvedStatus.ABORT) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the result if a file editor, the user indicated to open\n\t\t\t// the binary file as text. As such we adjust the input for that.\n\t\t\tif (isEditorInputWithOptions(resolvedEditor)) {\n\t\t\t\tfor (const editor of resolvedEditor.editor instanceof\n\t\t\t\tDiffEditorInput\n\t\t\t\t\t? [\n\t\t\t\t\t\t\tresolvedEditor.editor.original,\n\t\t\t\t\t\t\tresolvedEditor.editor.modified,\n\t\t\t\t\t\t]\n\t\t\t\t\t: [resolvedEditor.editor]) {\n\t\t\t\t\tif (editor instanceof FileEditorInput) {\n\t\t\t\t\t\teditor.setForceOpenAsText();\n\t\t\t\t\t\teditor.setPreferredLanguageId(BINARY_TEXT_FILE_MODE); // https://github.com/microsoft/vscode/issues/131076\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Replace the active editor with the picked one\n\t\t\tawait this.group.replaceEditors([\n\t\t\t\t{\n\t\t\t\t\teditor: activeEditor,\n\t\t\t\t\treplacement: resolvedEditor?.editor ?? input,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t...(resolvedEditor?.options ?? options),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t}\n\n\toverride getTitle(): string {\n\t\treturn this.input\n\t\t\t? this.input.getName()\n\t\t\t: localize(\"binaryFileEditor\", \"Binary File Viewer\");\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,OAEM;AACP,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,qBAAqB;AAC9B,SAAS,gCAAgC;AACzC,SAAS,gCAAgC;AACzC,SAAS,uBAAuB;AAGhC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAKzB,IAAM,mBAAN,cAA+B,yBAAyB;AAAA,EAG9D,YACC,OACmB,kBACJ,cAEE,uBACA,gBAChB;AACD;AAAA,MACC,iBAAiB;AAAA,MACjB;AAAA,MACA;AAAA,QACC,cAAc,wBAAC,OAAO,YACrB,KAAK,aAAa,OAAO,OAAO,GADnB;AAAA,MAEf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAbiB;AAAA,EAclB;AAAA,EAtDD,OAgC+D;AAAA;AAAA;AAAA,EAC9D,OAAgB,KAAK;AAAA,EAuBrB,MAAc,aACb,OACA,SACgB;AAChB,QAAI,iBAAiB,mBAAmB,KAAK,MAAM,cAAc;AAOhE,YAAM,eAAe,KAAK,MAAM;AAChC,YAAM,sBAAsB,cAAc,UAAU;AACpD,UAAI,CAAC,qBAAqB;AACzB;AAAA,MACD;AAGA,UAAI,iBACH,MAAM,KAAK,sBAAsB;AAAA,QAChC;AAAA,UACC,GAAG;AAAA,UACH,SAAS;AAAA,YACR,GAAG;AAAA,YACH,UAAU,iBAAiB;AAAA,UAC5B;AAAA,QACD;AAAA,QACA,KAAK;AAAA,MACN;AAED,UAAI,mBAAmB,eAAe,MAAM;AAC3C,yBAAiB;AAAA,MAClB,WAAW,mBAAmB,eAAe,OAAO;AACnD;AAAA,MACD;AAIA,UAAI,yBAAyB,cAAc,GAAG;AAC7C,mBAAW,UAAU,eAAe,kBACpC,kBACG;AAAA,UACA,eAAe,OAAO;AAAA,UACtB,eAAe,OAAO;AAAA,QACvB,IACC,CAAC,eAAe,MAAM,GAAG;AAC3B,cAAI,kBAAkB,iBAAiB;AACtC,mBAAO,mBAAmB;AAC1B,mBAAO,uBAAuB,qBAAqB;AAAA,UACpD;AAAA,QACD;AAAA,MACD;AAGA,YAAM,KAAK,MAAM,eAAe;AAAA,QAC/B;AAAA,UACC,QAAQ;AAAA,UACR,aAAa,gBAAgB,UAAU;AAAA,UACvC,SAAS;AAAA,YACR,GAAI,gBAAgB,WAAW;AAAA,UAChC;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAES,WAAmB;AAC3B,WAAO,KAAK,QACT,KAAK,MAAM,QAAQ,IACnB,SAAS,oBAAoB,oBAAoB;AAAA,EACrD;AACD;AA/Fa,mBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,GATU;",
  "names": []
}
