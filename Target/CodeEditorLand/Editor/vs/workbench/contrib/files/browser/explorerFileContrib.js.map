{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/explorerFileContrib.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\n\nexport const enum ExplorerExtensions {\n\tFileContributionRegistry = 'workbench.registry.explorer.fileContributions'\n}\n\n/**\n * Contributes to the rendering of a file in the explorer.\n */\nexport interface IExplorerFileContribution extends IDisposable {\n\t/**\n\t * Called to render a file in the container. The implementation should\n\t * remove any rendered elements if `resource` is undefined.\n\t */\n\tsetResource(resource: URI | undefined): void;\n}\n\nexport interface IExplorerFileContributionDescriptor {\n\tcreate(insta: IInstantiationService, container: HTMLElement): IExplorerFileContribution;\n}\n\nexport interface IExplorerFileContributionRegistry {\n\t/**\n\t * Registers a new contribution. A new instance of the contribution will be\n\t * instantiated for each template in the explorer.\n\t */\n\tregister(descriptor: IExplorerFileContributionDescriptor): void;\n}\n\nclass ExplorerFileContributionRegistry implements IExplorerFileContributionRegistry {\n\tprivate readonly _onDidRegisterDescriptor = new Emitter<IExplorerFileContributionDescriptor>();\n\tpublic readonly onDidRegisterDescriptor = this._onDidRegisterDescriptor.event;\n\n\tprivate readonly descriptors: IExplorerFileContributionDescriptor[] = [];\n\n\t/** @inheritdoc */\n\tpublic register(descriptor: IExplorerFileContributionDescriptor): void {\n\t\tthis.descriptors.push(descriptor);\n\t\tthis._onDidRegisterDescriptor.fire(descriptor);\n\t}\n\n\t/**\n\t * Creates a new instance of all registered contributions.\n\t */\n\tpublic create(insta: IInstantiationService, container: HTMLElement, store: DisposableStore): IExplorerFileContribution[] {\n\t\treturn this.descriptors.map(d => {\n\t\t\tconst i = d.create(insta, container);\n\t\t\tstore.add(i);\n\t\t\treturn i;\n\t\t});\n\t}\n}\n\nexport const explorerFileContribRegistry = new ExplorerFileContributionRegistry();\nRegistry.add(ExplorerExtensions.FileContributionRegistry, explorerFileContribRegistry);\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,WAAW;AACpB,SAAS,6BAA6B;AACtC,SAAS,gBAAgB;AAElB,IAAW,qBAAX,kBAAWA,wBAAX;AACN,EAAAA,oBAAA,8BAA2B;AADV,SAAAA;AAAA,GAAA;AA2BlB,MAAM,iCAA8E;AAAA,EAtCpF,OAsCoF;AAAA;AAAA;AAAA,EAClE,2BAA2B,IAAI,QAA6C;AAAA,EAC7E,0BAA0B,KAAK,yBAAyB;AAAA,EAEvD,cAAqD,CAAC;AAAA;AAAA,EAGhE,SAAS,YAAuD;AACtE,SAAK,YAAY,KAAK,UAAU;AAChC,SAAK,yBAAyB,KAAK,UAAU;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKO,OAAO,OAA8B,WAAwB,OAAqD;AACxH,WAAO,KAAK,YAAY,IAAI,OAAK;AAChC,YAAM,IAAI,EAAE,OAAO,OAAO,SAAS;AACnC,YAAM,IAAI,CAAC;AACX,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AAEO,MAAM,8BAA8B,IAAI,iCAAiC;AAChF,SAAS,IAAI,gFAA6C,2BAA2B;",
  "names": ["ExplorerExtensions"]
}
