{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/explorerFileContrib.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport type {\n\tDisposableStore,\n\tIDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\n\nexport enum ExplorerExtensions {\n\tFileContributionRegistry = \"workbench.registry.explorer.fileContributions\",\n}\n\n/**\n * Contributes to the rendering of a file in the explorer.\n */\nexport interface IExplorerFileContribution extends IDisposable {\n\t/**\n\t * Called to render a file in the container. The implementation should\n\t * remove any rendered elements if `resource` is undefined.\n\t */\n\tsetResource(resource: URI | undefined): void;\n}\n\nexport interface IExplorerFileContributionDescriptor {\n\tcreate(\n\t\tinsta: IInstantiationService,\n\t\tcontainer: HTMLElement,\n\t): IExplorerFileContribution;\n}\n\nexport interface IExplorerFileContributionRegistry {\n\t/**\n\t * Registers a new contribution. A new instance of the contribution will be\n\t * instantiated for each template in the explorer.\n\t */\n\tregister(descriptor: IExplorerFileContributionDescriptor): void;\n}\n\nclass ExplorerFileContributionRegistry\n\timplements IExplorerFileContributionRegistry\n{\n\tprivate readonly _onDidRegisterDescriptor =\n\t\tnew Emitter<IExplorerFileContributionDescriptor>();\n\tpublic readonly onDidRegisterDescriptor =\n\t\tthis._onDidRegisterDescriptor.event;\n\n\tprivate readonly descriptors: IExplorerFileContributionDescriptor[] = [];\n\n\t/** @inheritdoc */\n\tpublic register(descriptor: IExplorerFileContributionDescriptor): void {\n\t\tthis.descriptors.push(descriptor);\n\t\tthis._onDidRegisterDescriptor.fire(descriptor);\n\t}\n\n\t/**\n\t * Creates a new instance of all registered contributions.\n\t */\n\tpublic create(\n\t\tinsta: IInstantiationService,\n\t\tcontainer: HTMLElement,\n\t\tstore: DisposableStore,\n\t): IExplorerFileContribution[] {\n\t\treturn this.descriptors.map((d) => {\n\t\t\tconst i = d.create(insta, container);\n\t\t\tstore.add(i);\n\t\t\treturn i;\n\t\t});\n\t}\n}\n\nexport const explorerFileContribRegistry =\n\tnew ExplorerFileContributionRegistry();\nRegistry.add(\n\tExplorerExtensions.FileContributionRegistry,\n\texplorerFileContribRegistry,\n);\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AAOxB,SAAS,gBAAgB;AAElB,IAAK,qBAAL,kBAAKA,wBAAL;AACN,EAAAA,oBAAA,8BAA2B;AADhB,SAAAA;AAAA,GAAA;AA8BZ,MAAM,iCAEN;AAAA,EA9CA,OA8CA;AAAA;AAAA;AAAA,EACkB,2BAChB,IAAI,QAA6C;AAAA,EAClC,0BACf,KAAK,yBAAyB;AAAA,EAEd,cAAqD,CAAC;AAAA;AAAA,EAGhE,SAAS,YAAuD;AACtE,SAAK,YAAY,KAAK,UAAU;AAChC,SAAK,yBAAyB,KAAK,UAAU;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKO,OACN,OACA,WACA,OAC8B;AAC9B,WAAO,KAAK,YAAY,IAAI,CAAC,MAAM;AAClC,YAAM,IAAI,EAAE,OAAO,OAAO,SAAS;AACnC,YAAM,IAAI,CAAC;AACX,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AAEO,MAAM,8BACZ,IAAI,iCAAiC;AACtC,SAAS;AAAA,EACR;AAAA,EACA;AACD;",
  "names": ["ExplorerExtensions"]
}
