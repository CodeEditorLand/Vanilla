{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/fileImportExport.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tgetActiveWindow,\n\tisDragEvent,\n\ttriggerDownload,\n} from \"../../../../base/browser/dom.js\";\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport {\n\tLimiter,\n\tPromises,\n\tRunOnceWorker,\n} from \"../../../../base/common/async.js\";\nimport {\n\tVSBuffer,\n\tnewWriteableBufferStream,\n} from \"../../../../base/common/buffer.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { canceled } from \"../../../../base/common/errors.js\";\nimport { createSingleCallFunction } from \"../../../../base/common/functional.js\";\nimport { mnemonicButtonLabel } from \"../../../../base/common/labels.js\";\nimport {\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { FileAccess, Schemas } from \"../../../../base/common/network.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport {\n\tbasename,\n\tdirname,\n\tjoinPath,\n} from \"../../../../base/common/resources.js\";\nimport { listenStream } from \"../../../../base/common/stream.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { ResourceFileEdit } from \"../../../../editor/browser/services/bulkEditService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IConfirmation,\n\tIDialogService,\n\tIFileDialogService,\n\ttype IPromptButton,\n\tgetFileNamesMessage,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { extractEditorsAndFilesDropData } from \"../../../../platform/dnd/browser/dnd.js\";\nimport { WebFileSystemAccess } from \"../../../../platform/files/browser/webFileSystemAccess.js\";\nimport {\n\tByteSize,\n\tFileSystemProviderCapabilities,\n\tIFileService,\n\ttype IFileStatWithMetadata,\n} from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\ttype IProgress,\n\tIProgressService,\n\ttype IProgressStep,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { IWorkspaceEditingService } from \"../../../services/workspaces/common/workspaceEditing.js\";\nimport { ExplorerItem } from \"../common/explorerModel.js\";\nimport {\n\ttype IFilesConfiguration,\n\tUndoConfirmLevel,\n\tVIEW_ID,\n} from \"../common/files.js\";\nimport { IExplorerService } from \"./files.js\";\n\n//#region Browser File Upload (drag and drop, input element)\n\ninterface IBrowserUploadOperation {\n\tstartTime: number;\n\tprogressScheduler: RunOnceWorker<IProgressStep>;\n\n\tfilesTotal: number;\n\tfilesUploaded: number;\n\n\ttotalBytesUploaded: number;\n}\n\ninterface IWebkitDataTransfer {\n\titems: IWebkitDataTransferItem[];\n}\n\ninterface IWebkitDataTransferItem {\n\twebkitGetAsEntry(): IWebkitDataTransferItemEntry;\n}\n\ninterface IWebkitDataTransferItemEntry {\n\tname: string | undefined;\n\tisFile: boolean;\n\tisDirectory: boolean;\n\n\tfile(resolve: (file: File) => void, reject: () => void): void;\n\tcreateReader(): IWebkitDataTransferItemEntryReader;\n}\n\ninterface IWebkitDataTransferItemEntryReader {\n\treadEntries(\n\t\tresolve: (file: IWebkitDataTransferItemEntry[]) => void,\n\t\treject: () => void,\n\t): void;\n}\n\nexport class BrowserFileUpload {\n\tprivate static readonly MAX_PARALLEL_UPLOADS = 20;\n\n\tconstructor(\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t) {}\n\n\tupload(target: ExplorerItem, source: DragEvent | FileList): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// Indicate progress globally\n\t\tconst uploadPromise = this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\tdelay: 800,\n\t\t\t\tcancellable: true,\n\t\t\t\ttitle: localize(\"uploadingFiles\", \"Uploading\"),\n\t\t\t},\n\t\t\tasync (progress) =>\n\t\t\t\tthis.doUpload(\n\t\t\t\t\ttarget,\n\t\t\t\t\tthis.toTransfer(source),\n\t\t\t\t\tprogress,\n\t\t\t\t\tcts.token,\n\t\t\t\t),\n\t\t\t() => cts.dispose(true),\n\t\t);\n\n\t\t// Also indicate progress in the files view\n\t\tthis.progressService.withProgress(\n\t\t\t{ location: VIEW_ID, delay: 500 },\n\t\t\t() => uploadPromise,\n\t\t);\n\n\t\treturn uploadPromise;\n\t}\n\n\tprivate toTransfer(source: DragEvent | FileList): IWebkitDataTransfer {\n\t\tif (isDragEvent(source)) {\n\t\t\treturn source.dataTransfer as unknown as IWebkitDataTransfer;\n\t\t}\n\n\t\tconst transfer: IWebkitDataTransfer = { items: [] };\n\n\t\t// We want to reuse the same code for uploading from\n\t\t// Drag & Drop as well as input element based upload\n\t\t// so we convert into webkit data transfer when the\n\t\t// input element approach is used (simplified).\n\t\tfor (const file of source) {\n\t\t\ttransfer.items.push({\n\t\t\t\twebkitGetAsEntry: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: file.name,\n\t\t\t\t\t\tisDirectory: false,\n\t\t\t\t\t\tisFile: true,\n\t\t\t\t\t\tcreateReader: () => {\n\t\t\t\t\t\t\tthrow new Error(\"Unsupported for files\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfile: (resolve) => resolve(file),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn transfer;\n\t}\n\n\tprivate async doUpload(\n\t\ttarget: ExplorerItem,\n\t\tsource: IWebkitDataTransfer,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst items = source.items;\n\n\t\t// Somehow the items thing is being modified at random, maybe as a security\n\t\t// measure since this is a DND operation. As such, we copy the items into\n\t\t// an array we own as early as possible before using it.\n\t\tconst entries: IWebkitDataTransferItemEntry[] = [];\n\t\tfor (const item of items) {\n\t\t\tentries.push(item.webkitGetAsEntry());\n\t\t}\n\n\t\tconst results: { isFile: boolean; resource: URI }[] = [];\n\t\tconst operation: IBrowserUploadOperation = {\n\t\t\tstartTime: Date.now(),\n\t\t\tprogressScheduler: new RunOnceWorker<IProgressStep>((steps) => {\n\t\t\t\tprogress.report(steps[steps.length - 1]);\n\t\t\t}, 1000),\n\n\t\t\tfilesTotal: entries.length,\n\t\t\tfilesUploaded: 0,\n\n\t\t\ttotalBytesUploaded: 0,\n\t\t};\n\n\t\t// Upload all entries in parallel up to a\n\t\t// certain maximum leveraging the `Limiter`\n\t\tconst uploadLimiter = new Limiter(\n\t\t\tBrowserFileUpload.MAX_PARALLEL_UPLOADS,\n\t\t);\n\t\tawait Promises.settled(\n\t\t\tentries.map((entry) => {\n\t\t\t\treturn uploadLimiter.queue(async () => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Confirm overwrite as needed\n\t\t\t\t\tif (target && entry.name && target.getChild(entry.name)) {\n\t\t\t\t\t\tconst { confirmed } = await this.dialogService.confirm(\n\t\t\t\t\t\t\tgetFileOverwriteConfirm(entry.name),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!confirmed) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait this.explorerService.applyBulkEdit(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tnew ResourceFileEdit(\n\t\t\t\t\t\t\t\t\tjoinPath(target.resource, entry.name),\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t\t\t\t\tfolder: target.getChild(entry.name)\n\t\t\t\t\t\t\t\t\t\t\t?.isDirectory,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tundoLabel: localize(\n\t\t\t\t\t\t\t\t\t\"overwrite\",\n\t\t\t\t\t\t\t\t\t\"Overwrite {0}\",\n\t\t\t\t\t\t\t\t\tentry.name,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tprogressLabel: localize(\n\t\t\t\t\t\t\t\t\t\"overwriting\",\n\t\t\t\t\t\t\t\t\t\"Overwriting {0}\",\n\t\t\t\t\t\t\t\t\tentry.name,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Upload entry\n\t\t\t\t\tconst result = await this.doUploadEntry(\n\t\t\t\t\t\tentry,\n\t\t\t\t\t\ttarget.resource,\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tprogress,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tresults.push(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\toperation.progressScheduler.dispose();\n\n\t\t// Open uploaded file in editor only if we upload just one\n\t\tconst firstUploadedFile = results[0];\n\t\tif (!token.isCancellationRequested && firstUploadedFile?.isFile) {\n\t\t\tawait this.editorService.openEditor({\n\t\t\t\tresource: firstUploadedFile.resource,\n\t\t\t\toptions: { pinned: true },\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async doUploadEntry(\n\t\tentry: IWebkitDataTransferItemEntry,\n\t\tparentResource: URI,\n\t\ttarget: ExplorerItem | undefined,\n\t\tprogress: IProgress<IProgressStep>,\n\t\toperation: IBrowserUploadOperation,\n\t\ttoken: CancellationToken,\n\t): Promise<{ isFile: boolean; resource: URI } | undefined> {\n\t\tif (\n\t\t\ttoken.isCancellationRequested ||\n\t\t\t!entry.name ||\n\t\t\t(!entry.isFile && !entry.isDirectory)\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Report progress\n\t\tlet fileBytesUploaded = 0;\n\t\tconst reportProgress = (\n\t\t\tfileSize: number,\n\t\t\tbytesUploaded: number,\n\t\t): void => {\n\t\t\tfileBytesUploaded += bytesUploaded;\n\t\t\toperation.totalBytesUploaded += bytesUploaded;\n\n\t\t\tconst bytesUploadedPerSecond =\n\t\t\t\toperation.totalBytesUploaded /\n\t\t\t\t((Date.now() - operation.startTime) / 1000);\n\n\t\t\t// Small file\n\t\t\tlet message: string;\n\t\t\tif (fileSize < ByteSize.MB) {\n\t\t\t\tif (operation.filesTotal === 1) {\n\t\t\t\t\tmessage = `${entry.name}`;\n\t\t\t\t} else {\n\t\t\t\t\tmessage = localize(\n\t\t\t\t\t\t\"uploadProgressSmallMany\",\n\t\t\t\t\t\t\"{0} of {1} files ({2}/s)\",\n\t\t\t\t\t\toperation.filesUploaded,\n\t\t\t\t\t\toperation.filesTotal,\n\t\t\t\t\t\tByteSize.formatSize(bytesUploadedPerSecond),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Large file\n\t\t\telse {\n\t\t\t\tmessage = localize(\n\t\t\t\t\t\"uploadProgressLarge\",\n\t\t\t\t\t\"{0} ({1} of {2}, {3}/s)\",\n\t\t\t\t\tentry.name,\n\t\t\t\t\tByteSize.formatSize(fileBytesUploaded),\n\t\t\t\t\tByteSize.formatSize(fileSize),\n\t\t\t\t\tByteSize.formatSize(bytesUploadedPerSecond),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Report progress but limit to update only once per second\n\t\t\toperation.progressScheduler.work({ message });\n\t\t};\n\t\toperation.filesUploaded++;\n\t\treportProgress(0, 0);\n\n\t\t// Handle file upload\n\t\tconst resource = joinPath(parentResource, entry.name);\n\t\tif (entry.isFile) {\n\t\t\tconst file = await new Promise<File>((resolve, reject) =>\n\t\t\t\tentry.file(resolve, reject),\n\t\t\t);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Chrome/Edge/Firefox support stream method, but only use it for\n\t\t\t// larger files to reduce the overhead of the streaming approach\n\t\t\tif (typeof file.stream === \"function\" && file.size > ByteSize.MB) {\n\t\t\t\tawait this.doUploadFileBuffered(\n\t\t\t\t\tresource,\n\t\t\t\t\tfile,\n\t\t\t\t\treportProgress,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Fallback to unbuffered upload for other browsers or small files\n\t\t\telse {\n\t\t\t\tawait this.doUploadFileUnbuffered(\n\t\t\t\t\tresource,\n\t\t\t\t\tfile,\n\t\t\t\t\treportProgress,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn { isFile: true, resource };\n\t\t}\n\n\t\t// Handle folder upload\n\t\telse {\n\t\t\t// Create target folder\n\t\t\tawait this.fileService.createFolder(resource);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Recursive upload files in this directory\n\t\t\tconst dirReader = entry.createReader();\n\t\t\tconst childEntries: IWebkitDataTransferItemEntry[] = [];\n\t\t\tlet done = false;\n\t\t\tdo {\n\t\t\t\tconst childEntriesChunk = await new Promise<\n\t\t\t\t\tIWebkitDataTransferItemEntry[]\n\t\t\t\t>((resolve, reject) => dirReader.readEntries(resolve, reject));\n\t\t\t\tif (childEntriesChunk.length > 0) {\n\t\t\t\t\tchildEntries.push(...childEntriesChunk);\n\t\t\t\t} else {\n\t\t\t\t\tdone = true; // an empty array is a signal that all entries have been read\n\t\t\t\t}\n\t\t\t} while (!done && !token.isCancellationRequested);\n\n\t\t\t// Update operation total based on new counts\n\t\t\toperation.filesTotal += childEntries.length;\n\n\t\t\t// Split up files from folders to upload\n\t\t\tconst folderTarget =\n\t\t\t\t(target && target.getChild(entry.name)) || undefined;\n\t\t\tconst fileChildEntries: IWebkitDataTransferItemEntry[] = [];\n\t\t\tconst folderChildEntries: IWebkitDataTransferItemEntry[] = [];\n\t\t\tfor (const childEntry of childEntries) {\n\t\t\t\tif (childEntry.isFile) {\n\t\t\t\t\tfileChildEntries.push(childEntry);\n\t\t\t\t} else if (childEntry.isDirectory) {\n\t\t\t\t\tfolderChildEntries.push(childEntry);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Upload files (up to `MAX_PARALLEL_UPLOADS` in parallel)\n\t\t\tconst fileUploadQueue = new Limiter(\n\t\t\t\tBrowserFileUpload.MAX_PARALLEL_UPLOADS,\n\t\t\t);\n\t\t\tawait Promises.settled(\n\t\t\t\tfileChildEntries.map((fileChildEntry) => {\n\t\t\t\t\treturn fileUploadQueue.queue(() =>\n\t\t\t\t\t\tthis.doUploadEntry(\n\t\t\t\t\t\t\tfileChildEntry,\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\tfolderTarget,\n\t\t\t\t\t\t\tprogress,\n\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\t// Upload folders (sequentially give we don't know their sizes)\n\t\t\tfor (const folderChildEntry of folderChildEntries) {\n\t\t\t\tawait this.doUploadEntry(\n\t\t\t\t\tfolderChildEntry,\n\t\t\t\t\tresource,\n\t\t\t\t\tfolderTarget,\n\t\t\t\t\tprogress,\n\t\t\t\t\toperation,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn { isFile: false, resource };\n\t\t}\n\t}\n\n\tprivate async doUploadFileBuffered(\n\t\tresource: URI,\n\t\tfile: File,\n\t\tprogressReporter: (fileSize: number, bytesUploaded: number) => void,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst writeableStream = newWriteableBufferStream({\n\t\t\t// Set a highWaterMark to prevent the stream\n\t\t\t// for file upload to produce large buffers\n\t\t\t// in-memory\n\t\t\thighWaterMark: 10,\n\t\t});\n\t\tconst writeFilePromise = this.fileService.writeFile(\n\t\t\tresource,\n\t\t\twriteableStream,\n\t\t);\n\n\t\t// Read the file in chunks using File.stream() web APIs\n\t\ttry {\n\t\t\tconst reader: ReadableStreamDefaultReader<Uint8Array> = file\n\t\t\t\t.stream()\n\t\t\t\t.getReader();\n\n\t\t\tlet res = await reader.read();\n\t\t\twhile (!res.done) {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Write buffer into stream but make sure to wait\n\t\t\t\t// in case the `highWaterMark` is reached\n\t\t\t\tconst buffer = VSBuffer.wrap(res.value);\n\t\t\t\tawait writeableStream.write(buffer);\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Report progress\n\t\t\t\tprogressReporter(file.size, buffer.byteLength);\n\n\t\t\t\tres = await reader.read();\n\t\t\t}\n\t\t\twriteableStream.end(undefined);\n\t\t} catch (error) {\n\t\t\twriteableStream.error(error);\n\t\t\twriteableStream.end();\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Wait for file being written to target\n\t\tawait writeFilePromise;\n\t}\n\n\tprivate doUploadFileUnbuffered(\n\t\tresource: URI,\n\t\tfile: File,\n\t\tprogressReporter: (fileSize: number, bytesUploaded: number) => void,\n\t): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onload = async (event) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (event.target?.result instanceof ArrayBuffer) {\n\t\t\t\t\t\tconst buffer = VSBuffer.wrap(\n\t\t\t\t\t\t\tnew Uint8Array(event.target.result),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait this.fileService.writeFile(resource, buffer);\n\n\t\t\t\t\t\t// Report progress\n\t\t\t\t\t\tprogressReporter(file.size, buffer.byteLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"Could not read from dropped file.\");\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Start reading the file to trigger `onload`\n\t\t\treader.readAsArrayBuffer(file);\n\t\t});\n\t}\n}\n\n//#endregion\n\n//#region External File Import (drag and drop)\n\nexport class ExternalFileImport {\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceEditingService\n\t\tprivate readonly workspaceEditingService: IWorkspaceEditingService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {}\n\n\tasync import(\n\t\ttarget: ExplorerItem,\n\t\tsource: DragEvent,\n\t\ttargetWindow: Window,\n\t): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// Indicate progress globally\n\t\tconst importPromise = this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\tdelay: 800,\n\t\t\t\tcancellable: true,\n\t\t\t\ttitle: localize(\"copyingFiles\", \"Copying...\"),\n\t\t\t},\n\t\t\tasync () =>\n\t\t\t\tawait this.doImport(target, source, targetWindow, cts.token),\n\t\t\t() => cts.dispose(true),\n\t\t);\n\n\t\t// Also indicate progress in the files view\n\t\tthis.progressService.withProgress(\n\t\t\t{ location: VIEW_ID, delay: 500 },\n\t\t\t() => importPromise,\n\t\t);\n\n\t\treturn importPromise;\n\t}\n\n\tprivate async doImport(\n\t\ttarget: ExplorerItem,\n\t\tsource: DragEvent,\n\t\ttargetWindow: Window,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\t// Activate all providers for the resources dropped\n\t\tconst candidateFiles = coalesce(\n\t\t\t(\n\t\t\t\tawait this.instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\textractEditorsAndFilesDropData(accessor, source),\n\t\t\t\t)\n\t\t\t).map((editor) => editor.resource),\n\t\t);\n\t\tawait Promise.all(\n\t\t\tcandidateFiles.map((resource) =>\n\t\t\t\tthis.fileService.activateProvider(resource.scheme),\n\t\t\t),\n\t\t);\n\n\t\t// Check for dropped external files to be folders\n\t\tconst files = coalesce(\n\t\t\tcandidateFiles.filter((resource) =>\n\t\t\t\tthis.fileService.hasProvider(resource),\n\t\t\t),\n\t\t);\n\t\tconst resolvedFiles = await this.fileService.resolveAll(\n\t\t\tfiles.map((file) => ({ resource: file })),\n\t\t);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Pass focus to window\n\t\tthis.hostService.focus(targetWindow);\n\n\t\t// Handle folders by adding to workspace if we are in workspace context and if dropped on top\n\t\tconst folders = resolvedFiles\n\t\t\t.filter(\n\t\t\t\t(resolvedFile) =>\n\t\t\t\t\tresolvedFile.success && resolvedFile.stat?.isDirectory,\n\t\t\t)\n\t\t\t.map((resolvedFile) => ({ uri: resolvedFile.stat!.resource }));\n\t\tif (folders.length > 0 && target.isRoot) {\n\t\t\tenum ImportChoice {\n\t\t\t\tCopy = 1,\n\t\t\t\tAdd = 2,\n\t\t\t}\n\n\t\t\tconst buttons: IPromptButton<ImportChoice | undefined>[] = [\n\t\t\t\t{\n\t\t\t\t\tlabel:\n\t\t\t\t\t\tfolders.length > 1\n\t\t\t\t\t\t\t? localize(\"copyFolders\", \"&&Copy Folders\")\n\t\t\t\t\t\t\t: localize(\"copyFolder\", \"&&Copy Folder\"),\n\t\t\t\t\trun: () => ImportChoice.Copy,\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tlet message: string;\n\n\t\t\t// We only allow to add a folder to the workspace if there is already a workspace folder with that scheme\n\t\t\tconst workspaceFolderSchemas = this.contextService\n\t\t\t\t.getWorkspace()\n\t\t\t\t.folders.map((folder) => folder.uri.scheme);\n\t\t\tif (\n\t\t\t\tfolders.some(\n\t\t\t\t\t(folder) =>\n\t\t\t\t\t\tworkspaceFolderSchemas.indexOf(folder.uri.scheme) >= 0,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tbuttons.unshift({\n\t\t\t\t\tlabel:\n\t\t\t\t\t\tfolders.length > 1\n\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\"addFolders\",\n\t\t\t\t\t\t\t\t\t\"&&Add Folders to Workspace\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\"addFolder\",\n\t\t\t\t\t\t\t\t\t\"&&Add Folder to Workspace\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\trun: () => ImportChoice.Add,\n\t\t\t\t});\n\t\t\t\tmessage =\n\t\t\t\t\tfolders.length > 1\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"dropFolders\",\n\t\t\t\t\t\t\t\t\"Do you want to copy the folders or add the folders to the workspace?\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"dropFolder\",\n\t\t\t\t\t\t\t\t\"Do you want to copy '{0}' or add '{0}' as a folder to the workspace?\",\n\t\t\t\t\t\t\t\tbasename(folders[0].uri),\n\t\t\t\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmessage =\n\t\t\t\t\tfolders.length > 1\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"copyfolders\",\n\t\t\t\t\t\t\t\t\"Are you sure to want to copy folders?\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"copyfolder\",\n\t\t\t\t\t\t\t\t\"Are you sure to want to copy '{0}'?\",\n\t\t\t\t\t\t\t\tbasename(folders[0].uri),\n\t\t\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { result } = await this.dialogService.prompt({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tbuttons,\n\t\t\t\tcancelButton: true,\n\t\t\t});\n\n\t\t\t// Add folders\n\t\t\tif (result === ImportChoice.Add) {\n\t\t\t\treturn this.workspaceEditingService.addFolders(folders);\n\t\t\t}\n\n\t\t\t// Copy resources\n\t\t\tif (result === ImportChoice.Copy) {\n\t\t\t\treturn this.importResources(target, files, token);\n\t\t\t}\n\t\t}\n\n\t\t// Handle dropped files (only support FileStat as target)\n\t\telse if (target instanceof ExplorerItem) {\n\t\t\treturn this.importResources(target, files, token);\n\t\t}\n\t}\n\n\tprivate async importResources(\n\t\ttarget: ExplorerItem,\n\t\tresources: URI[],\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tif (resources && resources.length > 0) {\n\t\t\t// Resolve target to check for name collisions and ask user\n\t\t\tconst targetStat = await this.fileService.resolve(target.resource);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check for name collisions\n\t\t\tconst targetNames = new Set<string>();\n\t\t\tconst caseSensitive = this.fileService.hasCapability(\n\t\t\t\ttarget.resource,\n\t\t\t\tFileSystemProviderCapabilities.PathCaseSensitive,\n\t\t\t);\n\t\t\tif (targetStat.children) {\n\t\t\t\ttargetStat.children.forEach((child) => {\n\t\t\t\t\ttargetNames.add(\n\t\t\t\t\t\tcaseSensitive ? child.name : child.name.toLowerCase(),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet inaccessibleFileCount = 0;\n\t\t\tconst resourcesFiltered = coalesce(\n\t\t\t\tawait Promises.settled(\n\t\t\t\t\tresources.map(async (resource) => {\n\t\t\t\t\t\tconst fileDoesNotExist =\n\t\t\t\t\t\t\t!(await this.fileService.exists(resource));\n\t\t\t\t\t\tif (fileDoesNotExist) {\n\t\t\t\t\t\t\tinaccessibleFileCount++;\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttargetNames.has(\n\t\t\t\t\t\t\t\tcaseSensitive\n\t\t\t\t\t\t\t\t\t? basename(resource)\n\t\t\t\t\t\t\t\t\t: basename(resource).toLowerCase(),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst confirmationResult =\n\t\t\t\t\t\t\t\tawait this.dialogService.confirm(\n\t\t\t\t\t\t\t\t\tgetFileOverwriteConfirm(basename(resource)),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!confirmationResult.confirmed) {\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn resource;\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (inaccessibleFileCount > 0) {\n\t\t\t\tthis.notificationService.error(\n\t\t\t\t\tinaccessibleFileCount > 1\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"filesInaccessible\",\n\t\t\t\t\t\t\t\t\"Some or all of the dropped files could not be accessed for import.\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"fileInaccessible\",\n\t\t\t\t\t\t\t\t\"The dropped file could not be accessed for import.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Copy resources through bulk edit API\n\t\t\tconst resourceFileEdits = resourcesFiltered.map((resource) => {\n\t\t\t\tconst sourceFileName = basename(resource);\n\t\t\t\tconst targetFile = joinPath(target.resource, sourceFileName);\n\n\t\t\t\treturn new ResourceFileEdit(resource, targetFile, {\n\t\t\t\t\toverwrite: true,\n\t\t\t\t\tcopy: true,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst undoLevel =\n\t\t\t\tthis.configurationService.getValue<IFilesConfiguration>()\n\t\t\t\t\t.explorer.confirmUndo;\n\t\t\tawait this.explorerService.applyBulkEdit(resourceFileEdits, {\n\t\t\t\tundoLabel:\n\t\t\t\t\tresourcesFiltered.length === 1\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"substitution will be the name of the file that was imported\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tkey: \"importFile\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Import {0}\",\n\t\t\t\t\t\t\t\tbasename(resourcesFiltered[0]),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"substitution will be the number of files that were imported\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tkey: \"importnFile\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Import {0} resources\",\n\t\t\t\t\t\t\t\tresourcesFiltered.length,\n\t\t\t\t\t\t\t),\n\t\t\t\tprogressLabel:\n\t\t\t\t\tresourcesFiltered.length === 1\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"substitution will be the name of the file that was copied\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tkey: \"copyingFile\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Copying {0}\",\n\t\t\t\t\t\t\t\tbasename(resourcesFiltered[0]),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"substitution will be the number of files that were copied\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tkey: \"copyingnFile\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Copying {0} resources\",\n\t\t\t\t\t\t\t\tresourcesFiltered.length,\n\t\t\t\t\t\t\t),\n\t\t\t\tprogressLocation: ProgressLocation.Window,\n\t\t\t\tconfirmBeforeUndo:\n\t\t\t\t\tundoLevel === UndoConfirmLevel.Verbose ||\n\t\t\t\t\tundoLevel === UndoConfirmLevel.Default,\n\t\t\t});\n\n\t\t\t// if we only add one file, just open it directly\n\t\t\tconst autoOpen =\n\t\t\t\tthis.configurationService.getValue<IFilesConfiguration>()\n\t\t\t\t\t.explorer.autoOpenDroppedFile;\n\t\t\tif (autoOpen && resourceFileEdits.length === 1) {\n\t\t\t\tconst item = this.explorerService.findClosest(\n\t\t\t\t\tresourceFileEdits[0].newResource!,\n\t\t\t\t);\n\t\t\t\tif (item && !item.isDirectory) {\n\t\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\t\tresource: item.resource,\n\t\t\t\t\t\toptions: { pinned: true },\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//#endregion\n\n//#region Download (web, native)\n\ninterface IDownloadOperation {\n\tstartTime: number;\n\tprogressScheduler: RunOnceWorker<IProgressStep>;\n\n\tfilesTotal: number;\n\tfilesDownloaded: number;\n\n\ttotalBytesDownloaded: number;\n\tfileBytesDownloaded: number;\n}\n\nexport class FileDownload {\n\tprivate static readonly LAST_USED_DOWNLOAD_PATH_STORAGE_KEY =\n\t\t\"workbench.explorer.downloadPath\";\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileDialogService\n\t\tprivate readonly fileDialogService: IFileDialogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {}\n\n\tdownload(source: ExplorerItem[]): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// Indicate progress globally\n\t\tconst downloadPromise = this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\tdelay: 800,\n\t\t\t\tcancellable: isWeb,\n\t\t\t\ttitle: localize(\"downloadingFiles\", \"Downloading\"),\n\t\t\t},\n\t\t\tasync (progress) => this.doDownload(source, progress, cts),\n\t\t\t() => cts.dispose(true),\n\t\t);\n\n\t\t// Also indicate progress in the files view\n\t\tthis.progressService.withProgress(\n\t\t\t{ location: VIEW_ID, delay: 500 },\n\t\t\t() => downloadPromise,\n\t\t);\n\n\t\treturn downloadPromise;\n\t}\n\n\tprivate async doDownload(\n\t\tsources: ExplorerItem[],\n\t\tprogress: IProgress<IProgressStep>,\n\t\tcts: CancellationTokenSource,\n\t): Promise<void> {\n\t\tfor (const source of sources) {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Web: use DOM APIs to download files with optional support\n\t\t\t// for folders and large files\n\t\t\tif (isWeb) {\n\t\t\t\tawait this.doDownloadBrowser(source.resource, progress, cts);\n\t\t\t}\n\n\t\t\t// Native: use working copy file service to get at the contents\n\t\t\telse {\n\t\t\t\tawait this.doDownloadNative(source, progress, cts);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async doDownloadBrowser(\n\t\tresource: URI,\n\t\tprogress: IProgress<IProgressStep>,\n\t\tcts: CancellationTokenSource,\n\t): Promise<void> {\n\t\tconst stat = await this.fileService.resolve(resource, {\n\t\t\tresolveMetadata: true,\n\t\t});\n\n\t\tif (cts.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst maxBlobDownloadSize = 32 * ByteSize.MB; // avoid to download via blob-trick >32MB to avoid memory pressure\n\t\tconst preferFileSystemAccessWebApis =\n\t\t\tstat.isDirectory || stat.size > maxBlobDownloadSize;\n\n\t\t// Folder: use FS APIs to download files and folders if available and preferred\n\t\tconst activeWindow = getActiveWindow();\n\t\tif (\n\t\t\tpreferFileSystemAccessWebApis &&\n\t\t\tWebFileSystemAccess.supported(activeWindow)\n\t\t) {\n\t\t\ttry {\n\t\t\t\tconst parentFolder: FileSystemDirectoryHandle =\n\t\t\t\t\tawait activeWindow.showDirectoryPicker();\n\t\t\t\tconst operation: IDownloadOperation = {\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tprogressScheduler: new RunOnceWorker<IProgressStep>(\n\t\t\t\t\t\t(steps) => {\n\t\t\t\t\t\t\tprogress.report(steps[steps.length - 1]);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t1000,\n\t\t\t\t\t),\n\n\t\t\t\t\tfilesTotal: stat.isDirectory ? 0 : 1, // folders increment filesTotal within downloadFolder method\n\t\t\t\t\tfilesDownloaded: 0,\n\n\t\t\t\t\ttotalBytesDownloaded: 0,\n\t\t\t\t\tfileBytesDownloaded: 0,\n\t\t\t\t};\n\n\t\t\t\tif (stat.isDirectory) {\n\t\t\t\t\tconst targetFolder = await parentFolder.getDirectoryHandle(\n\t\t\t\t\t\tstat.name,\n\t\t\t\t\t\t{ create: true },\n\t\t\t\t\t);\n\t\t\t\t\tawait this.downloadFolderBrowser(\n\t\t\t\t\t\tstat,\n\t\t\t\t\t\ttargetFolder,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\tcts.token,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tawait this.downloadFileBrowser(\n\t\t\t\t\t\tparentFolder,\n\t\t\t\t\t\tstat,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\tcts.token,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\toperation.progressScheduler.dispose();\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.warn(error);\n\t\t\t\tcts.cancel(); // `showDirectoryPicker` will throw an error when the user cancels\n\t\t\t}\n\t\t}\n\n\t\t// File: use traditional download to circumvent browser limitations\n\t\telse if (stat.isFile) {\n\t\t\tlet bufferOrUri: Uint8Array | URI;\n\t\t\ttry {\n\t\t\t\tbufferOrUri = (\n\t\t\t\t\tawait this.fileService.readFile(\n\t\t\t\t\t\tstat.resource,\n\t\t\t\t\t\t{ limits: { size: maxBlobDownloadSize } },\n\t\t\t\t\t\tcts.token,\n\t\t\t\t\t)\n\t\t\t\t).value.buffer;\n\t\t\t} catch (error) {\n\t\t\t\tbufferOrUri = FileAccess.uriToBrowserUri(stat.resource);\n\t\t\t}\n\n\t\t\tif (!cts.token.isCancellationRequested) {\n\t\t\t\ttriggerDownload(bufferOrUri, stat.name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async downloadFileBufferedBrowser(\n\t\tresource: URI,\n\t\ttarget: FileSystemWritableFileStream,\n\t\toperation: IDownloadOperation,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst contents = await this.fileService.readFileStream(\n\t\t\tresource,\n\t\t\tundefined,\n\t\t\ttoken,\n\t\t);\n\t\tif (token.isCancellationRequested) {\n\t\t\ttarget.close();\n\t\t\treturn;\n\t\t}\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst sourceStream = contents.value;\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tdisposables.add(toDisposable(() => target.close()));\n\n\t\t\tdisposables.add(\n\t\t\t\tcreateSingleCallFunction(token.onCancellationRequested)(() => {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treject(canceled());\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tlistenStream(\n\t\t\t\tsourceStream,\n\t\t\t\t{\n\t\t\t\t\tonData: (data) => {\n\t\t\t\t\t\ttarget.write(data.buffer);\n\t\t\t\t\t\tthis.reportProgress(\n\t\t\t\t\t\t\tcontents.name,\n\t\t\t\t\t\t\tcontents.size,\n\t\t\t\t\t\t\tdata.byteLength,\n\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tonError: (error) => {\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t},\n\t\t\t\t\tonEnd: () => {\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async downloadFileUnbufferedBrowser(\n\t\tresource: URI,\n\t\ttarget: FileSystemWritableFileStream,\n\t\toperation: IDownloadOperation,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst contents = await this.fileService.readFile(\n\t\t\tresource,\n\t\t\tundefined,\n\t\t\ttoken,\n\t\t);\n\t\tif (!token.isCancellationRequested) {\n\t\t\ttarget.write(contents.value.buffer);\n\t\t\tthis.reportProgress(\n\t\t\t\tcontents.name,\n\t\t\t\tcontents.size,\n\t\t\t\tcontents.value.byteLength,\n\t\t\t\toperation,\n\t\t\t);\n\t\t}\n\n\t\ttarget.close();\n\t}\n\n\tprivate async downloadFileBrowser(\n\t\ttargetFolder: FileSystemDirectoryHandle,\n\t\tfile: IFileStatWithMetadata,\n\t\toperation: IDownloadOperation,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\t// Report progress\n\t\toperation.filesDownloaded++;\n\t\toperation.fileBytesDownloaded = 0; // reset for this file\n\t\tthis.reportProgress(file.name, 0, 0, operation);\n\n\t\t// Start to download\n\t\tconst targetFile = await targetFolder.getFileHandle(file.name, {\n\t\t\tcreate: true,\n\t\t});\n\t\tconst targetFileWriter = await targetFile.createWritable();\n\n\t\t// For large files, write buffered using streams\n\t\tif (file.size > ByteSize.MB) {\n\t\t\treturn this.downloadFileBufferedBrowser(\n\t\t\t\tfile.resource,\n\t\t\t\ttargetFileWriter,\n\t\t\t\toperation,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t}\n\n\t\t// For small files prefer to write unbuffered to reduce overhead\n\t\treturn this.downloadFileUnbufferedBrowser(\n\t\t\tfile.resource,\n\t\t\ttargetFileWriter,\n\t\t\toperation,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\tprivate async downloadFolderBrowser(\n\t\tfolder: IFileStatWithMetadata,\n\t\ttargetFolder: FileSystemDirectoryHandle,\n\t\toperation: IDownloadOperation,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tif (folder.children) {\n\t\t\toperation.filesTotal += folder.children.map(\n\t\t\t\t(child) => child.isFile,\n\t\t\t).length;\n\n\t\t\tfor (const child of folder.children) {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (child.isFile) {\n\t\t\t\t\tawait this.downloadFileBrowser(\n\t\t\t\t\t\ttargetFolder,\n\t\t\t\t\t\tchild,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst childFolder = await targetFolder.getDirectoryHandle(\n\t\t\t\t\t\tchild.name,\n\t\t\t\t\t\t{ create: true },\n\t\t\t\t\t);\n\t\t\t\t\tconst resolvedChildFolder = await this.fileService.resolve(\n\t\t\t\t\t\tchild.resource,\n\t\t\t\t\t\t{ resolveMetadata: true },\n\t\t\t\t\t);\n\n\t\t\t\t\tawait this.downloadFolderBrowser(\n\t\t\t\t\t\tresolvedChildFolder,\n\t\t\t\t\t\tchildFolder,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate reportProgress(\n\t\tname: string,\n\t\tfileSize: number,\n\t\tbytesDownloaded: number,\n\t\toperation: IDownloadOperation,\n\t): void {\n\t\toperation.fileBytesDownloaded += bytesDownloaded;\n\t\toperation.totalBytesDownloaded += bytesDownloaded;\n\n\t\tconst bytesDownloadedPerSecond =\n\t\t\toperation.totalBytesDownloaded /\n\t\t\t((Date.now() - operation.startTime) / 1000);\n\n\t\t// Small file\n\t\tlet message: string;\n\t\tif (fileSize < ByteSize.MB) {\n\t\t\tif (operation.filesTotal === 1) {\n\t\t\t\tmessage = name;\n\t\t\t} else {\n\t\t\t\tmessage = localize(\n\t\t\t\t\t\"downloadProgressSmallMany\",\n\t\t\t\t\t\"{0} of {1} files ({2}/s)\",\n\t\t\t\t\toperation.filesDownloaded,\n\t\t\t\t\toperation.filesTotal,\n\t\t\t\t\tByteSize.formatSize(bytesDownloadedPerSecond),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Large file\n\t\telse {\n\t\t\tmessage = localize(\n\t\t\t\t\"downloadProgressLarge\",\n\t\t\t\t\"{0} ({1} of {2}, {3}/s)\",\n\t\t\t\tname,\n\t\t\t\tByteSize.formatSize(operation.fileBytesDownloaded),\n\t\t\t\tByteSize.formatSize(fileSize),\n\t\t\t\tByteSize.formatSize(bytesDownloadedPerSecond),\n\t\t\t);\n\t\t}\n\n\t\t// Report progress but limit to update only once per second\n\t\toperation.progressScheduler.work({ message });\n\t}\n\n\tprivate async doDownloadNative(\n\t\texplorerItem: ExplorerItem,\n\t\tprogress: IProgress<IProgressStep>,\n\t\tcts: CancellationTokenSource,\n\t): Promise<void> {\n\t\tprogress.report({ message: explorerItem.name });\n\n\t\tlet defaultUri: URI;\n\t\tconst lastUsedDownloadPath = this.storageService.get(\n\t\t\tFileDownload.LAST_USED_DOWNLOAD_PATH_STORAGE_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (lastUsedDownloadPath) {\n\t\t\tdefaultUri = joinPath(\n\t\t\t\tURI.file(lastUsedDownloadPath),\n\t\t\t\texplorerItem.name,\n\t\t\t);\n\t\t} else {\n\t\t\tdefaultUri = joinPath(\n\t\t\t\texplorerItem.isDirectory\n\t\t\t\t\t? await this.fileDialogService.defaultFolderPath(\n\t\t\t\t\t\t\tSchemas.file,\n\t\t\t\t\t\t)\n\t\t\t\t\t: await this.fileDialogService.defaultFilePath(\n\t\t\t\t\t\t\tSchemas.file,\n\t\t\t\t\t\t),\n\t\t\t\texplorerItem.name,\n\t\t\t);\n\t\t}\n\n\t\tconst destination = await this.fileDialogService.showSaveDialog({\n\t\t\tavailableFileSystems: [Schemas.file],\n\t\t\tsaveLabel: mnemonicButtonLabel(\n\t\t\t\tlocalize(\"downloadButton\", \"Download\"),\n\t\t\t),\n\t\t\ttitle: localize(\n\t\t\t\t\"chooseWhereToDownload\",\n\t\t\t\t\"Choose Where to Download\",\n\t\t\t),\n\t\t\tdefaultUri,\n\t\t});\n\n\t\tif (destination) {\n\t\t\t// Remember as last used download folder\n\t\t\tthis.storageService.store(\n\t\t\t\tFileDownload.LAST_USED_DOWNLOAD_PATH_STORAGE_KEY,\n\t\t\t\tdirname(destination).fsPath,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\n\t\t\t// Perform download\n\t\t\tawait this.explorerService.applyBulkEdit(\n\t\t\t\t[\n\t\t\t\t\tnew ResourceFileEdit(explorerItem.resource, destination, {\n\t\t\t\t\t\toverwrite: true,\n\t\t\t\t\t\tcopy: true,\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tundoLabel: localize(\n\t\t\t\t\t\t\"downloadBulkEdit\",\n\t\t\t\t\t\t\"Download {0}\",\n\t\t\t\t\t\texplorerItem.name,\n\t\t\t\t\t),\n\t\t\t\t\tprogressLabel: localize(\n\t\t\t\t\t\t\"downloadingBulkEdit\",\n\t\t\t\t\t\t\"Downloading {0}\",\n\t\t\t\t\t\texplorerItem.name,\n\t\t\t\t\t),\n\t\t\t\t\tprogressLocation: ProgressLocation.Window,\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tcts.cancel(); // User canceled a download. In case there were multiple files selected we should cancel the remainder of the prompts #86100\n\t\t}\n\t}\n}\n\n//#endregion\n\n//#region Helpers\n\nexport function getFileOverwriteConfirm(name: string): IConfirmation {\n\treturn {\n\t\tmessage: localize(\n\t\t\t\"confirmOverwrite\",\n\t\t\t\"A file or folder with the name '{0}' already exists in the destination folder. Do you want to replace it?\",\n\t\t\tname,\n\t\t),\n\t\tdetail: localize(\"irreversible\", \"This action is irreversible!\"),\n\t\tprimaryButton: localize(\n\t\t\t{ key: \"replaceButtonLabel\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"&&Replace\",\n\t\t),\n\t\ttype: \"warning\",\n\t};\n}\n\nexport function getMultipleFilesOverwriteConfirm(files: URI[]): IConfirmation {\n\tif (files.length > 1) {\n\t\treturn {\n\t\t\tmessage: localize(\n\t\t\t\t\"confirmManyOverwrites\",\n\t\t\t\t\"The following {0} files and/or folders already exist in the destination folder. Do you want to replace them?\",\n\t\t\t\tfiles.length,\n\t\t\t),\n\t\t\tdetail:\n\t\t\t\tgetFileNamesMessage(files) +\n\t\t\t\t\"\\n\" +\n\t\t\t\tlocalize(\"irreversible\", \"This action is irreversible!\"),\n\t\t\tprimaryButton: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"replaceButtonLabel\",\n\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t},\n\t\t\t\t\"&&Replace\",\n\t\t\t),\n\t\t\ttype: \"warning\",\n\t\t};\n\t}\n\n\treturn getFileOverwriteConfirm(basename(files[0]));\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["ImportChoice"]
}
