import { Disposable } from "vs/base/common/lifecycle";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IFileService } from "vs/platform/files/common/files";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IOpenerService } from "vs/platform/opener/common/opener";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IHostService } from "vs/workbench/services/host/browser/host";
export declare class WorkspaceWatcher extends Disposable {
    private readonly fileService;
    private readonly configurationService;
    private readonly contextService;
    private readonly notificationService;
    private readonly openerService;
    private readonly uriIdentityService;
    private readonly hostService;
    private readonly telemetryService;
    static readonly ID = "workbench.contrib.workspaceWatcher";
    private readonly watchedWorkspaces;
    constructor(fileService: IFileService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, notificationService: INotificationService, openerService: IOpenerService, uriIdentityService: IUriIdentityService, hostService: IHostService, telemetryService: ITelemetryService);
    private registerListeners;
    private onDidChangeWorkspaceFolders;
    private onDidChangeWorkbenchState;
    private onDidChangeConfiguration;
    private onDidWatchError;
    private watchWorkspace;
    private unwatchWorkspace;
    private refresh;
    private unwatchWorkspaces;
    dispose(): void;
}
