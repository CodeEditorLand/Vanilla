{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/explorerViewlet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/explorerviewlet.css';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { mark } from '../../../../base/common/performance.js';\nimport { VIEWLET_ID, VIEW_ID, IFilesConfiguration, ExplorerViewletVisibleContext } from '../common/files.js';\nimport { IViewletViewOptions } from '../../../browser/parts/views/viewsViewlet.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ExplorerView } from './views/explorerView.js';\nimport { EmptyView } from './views/emptyView.js';\nimport { OpenEditorsView } from './views/openEditorsView.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IContextKeyService, IContextKey, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IViewsRegistry, IViewDescriptor, Extensions, ViewContainer, IViewContainersRegistry, ViewContainerLocation, IViewDescriptorService, ViewContentGroups } from '../../../common/views.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';\nimport { ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { KeyChord, KeyMod, KeyCode } from '../../../../base/common/keyCodes.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { WorkbenchStateContext, RemoteNameContext, OpenFolderWorkspaceSupportContext } from '../../../common/contextkeys.js';\nimport { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { AddRootFolderAction, OpenFolderAction, OpenFileFolderAction, OpenFolderViaWorkspaceAction } from '../../../browser/actions/workspaceActions.js';\nimport { OpenRecentAction } from '../../../browser/actions/windowActions.js';\nimport { isMacintosh, isWeb } from '../../../../base/common/platform.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nimport { isMouseEvent } from '../../../../base/browser/dom.js';\n\nconst explorerViewIcon = registerIcon('explorer-view-icon', Codicon.files, localize('explorerViewIcon', 'View icon of the explorer view.'));\nconst openEditorsViewIcon = registerIcon('open-editors-view-icon', Codicon.book, localize('openEditorsIcon', 'View icon of the open editors view.'));\n\nexport class ExplorerViewletViewsContribution extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.explorerViewletViews';\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IProgressService progressService: IProgressService\n\t) {\n\t\tsuper();\n\n\t\tprogressService.withProgress({ location: ProgressLocation.Explorer }, () => workspaceContextService.getCompleteWorkspace()).finally(() => {\n\t\t\tthis.registerViews();\n\n\t\t\tthis._register(workspaceContextService.onDidChangeWorkbenchState(() => this.registerViews()));\n\t\t\tthis._register(workspaceContextService.onDidChangeWorkspaceFolders(() => this.registerViews()));\n\t\t});\n\t}\n\n\tprivate registerViews(): void {\n\t\tmark('code/willRegisterExplorerViews');\n\n\t\tconst viewDescriptors = viewsRegistry.getViews(VIEW_CONTAINER);\n\n\t\tconst viewDescriptorsToRegister: IViewDescriptor[] = [];\n\t\tconst viewDescriptorsToDeregister: IViewDescriptor[] = [];\n\n\t\tconst openEditorsViewDescriptor = this.createOpenEditorsViewDescriptor();\n\t\tif (!viewDescriptors.some(v => v.id === openEditorsViewDescriptor.id)) {\n\t\t\tviewDescriptorsToRegister.push(openEditorsViewDescriptor);\n\t\t}\n\n\t\tconst explorerViewDescriptor = this.createExplorerViewDescriptor();\n\t\tconst registeredExplorerViewDescriptor = viewDescriptors.find(v => v.id === explorerViewDescriptor.id);\n\t\tconst emptyViewDescriptor = this.createEmptyViewDescriptor();\n\t\tconst registeredEmptyViewDescriptor = viewDescriptors.find(v => v.id === emptyViewDescriptor.id);\n\n\t\tif (this.workspaceContextService.getWorkbenchState() === WorkbenchState.EMPTY || this.workspaceContextService.getWorkspace().folders.length === 0) {\n\t\t\tif (registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredExplorerViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(emptyViewDescriptor);\n\t\t\t}\n\t\t} else {\n\t\t\tif (registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredEmptyViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(explorerViewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\tif (viewDescriptorsToDeregister.length) {\n\t\t\tviewsRegistry.deregisterViews(viewDescriptorsToDeregister, VIEW_CONTAINER);\n\t\t}\n\t\tif (viewDescriptorsToRegister.length) {\n\t\t\tviewsRegistry.registerViews(viewDescriptorsToRegister, VIEW_CONTAINER);\n\t\t}\n\n\t\tmark('code/didRegisterExplorerViews');\n\t}\n\n\tprivate createOpenEditorsViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: OpenEditorsView.ID,\n\t\t\tname: OpenEditorsView.NAME,\n\t\t\tctorDescriptor: new SyncDescriptor(OpenEditorsView),\n\t\t\tcontainerIcon: openEditorsViewIcon,\n\t\t\torder: 0,\n\t\t\tcanToggleVisibility: true,\n\t\t\tcanMoveView: true,\n\t\t\tcollapsed: false,\n\t\t\thideByDefault: true,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.files.action.focusOpenEditorsView',\n\t\t\t\tkeybindings: { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyCode.KeyE) }\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createEmptyViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: EmptyView.ID,\n\t\t\tname: EmptyView.NAME,\n\t\t\tcontainerIcon: explorerViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(EmptyView),\n\t\t\torder: 1,\n\t\t\tcanToggleVisibility: true,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.explorer.fileView.focus'\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createExplorerViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: VIEW_ID,\n\t\t\tname: localize2('folders', \"Folders\"),\n\t\t\tcontainerIcon: explorerViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(ExplorerView),\n\t\t\torder: 1,\n\t\t\tcanMoveView: true,\n\t\t\tcanToggleVisibility: false,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.explorer.fileView.focus'\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport class ExplorerViewPaneContainer extends ViewPaneContainer {\n\n\tprivate viewletVisibleContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService\n\t) {\n\n\t\tsuper(VIEWLET_ID, { mergeViewWithContainerWhenSingleView: true }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);\n\n\t\tthis.viewletVisibleContextKey = ExplorerViewletVisibleContext.bindTo(contextKeyService);\n\t\tthis._register(this.contextService.onDidChangeWorkspaceName(e => this.updateTitleArea()));\n\t}\n\n\toverride create(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tparent.classList.add('explorer-viewlet');\n\t}\n\n\tprotected override createView(viewDescriptor: IViewDescriptor, options: IViewletViewOptions): ViewPane {\n\t\tif (viewDescriptor.id === VIEW_ID) {\n\t\t\treturn this.instantiationService.createInstance(ExplorerView, {\n\t\t\t\t...options, delegate: {\n\t\t\t\t\twillOpenElement: e => {\n\t\t\t\t\t\tif (!isMouseEvent(e)) {\n\t\t\t\t\t\t\treturn; // only delay when user clicks\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst openEditorsView = this.getOpenEditorsView();\n\t\t\t\t\t\tif (openEditorsView) {\n\t\t\t\t\t\t\tlet delay = 0;\n\n\t\t\t\t\t\t\tconst config = this.configurationService.getValue<IFilesConfiguration>();\n\t\t\t\t\t\t\tif (!!config.workbench?.editor?.enablePreview) {\n\t\t\t\t\t\t\t\t// delay open editors view when preview is enabled\n\t\t\t\t\t\t\t\t// to accomodate for the user doing a double click\n\t\t\t\t\t\t\t\t// to pin the editor.\n\t\t\t\t\t\t\t\t// without this delay a double click would be not\n\t\t\t\t\t\t\t\t// possible because the next element would move\n\t\t\t\t\t\t\t\t// under the mouse after the first click.\n\t\t\t\t\t\t\t\tdelay = 250;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\topenEditorsView.setStructuralRefreshDelay(delay);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdidOpenElement: e => {\n\t\t\t\t\t\tif (!isMouseEvent(e)) {\n\t\t\t\t\t\t\treturn; // only delay when user clicks\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst openEditorsView = this.getOpenEditorsView();\n\t\t\t\t\t\topenEditorsView?.setStructuralRefreshDelay(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn super.createView(viewDescriptor, options);\n\t}\n\n\tgetExplorerView(): ExplorerView {\n\t\treturn <ExplorerView>this.getView(VIEW_ID);\n\t}\n\n\tgetOpenEditorsView(): OpenEditorsView {\n\t\treturn <OpenEditorsView>this.getView(OpenEditorsView.ID);\n\t}\n\n\toverride setVisible(visible: boolean): void {\n\t\tthis.viewletVisibleContextKey.set(visible);\n\t\tsuper.setVisible(visible);\n\t}\n\n\toverride focus(): void {\n\t\tconst explorerView = this.getView(VIEW_ID);\n\t\tif (explorerView && this.panes.every(p => !p.isExpanded())) {\n\t\t\texplorerView.setExpanded(true);\n\t\t}\n\t\tif (explorerView?.isExpanded()) {\n\t\t\texplorerView.focus();\n\t\t} else {\n\t\t\tsuper.focus();\n\t\t}\n\t}\n}\n\nconst viewContainerRegistry = Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry);\n\n/**\n * Explorer viewlet container.\n */\nexport const VIEW_CONTAINER: ViewContainer = viewContainerRegistry.registerViewContainer({\n\tid: VIEWLET_ID,\n\ttitle: localize2('explore', \"Explorer\"),\n\tctorDescriptor: new SyncDescriptor(ExplorerViewPaneContainer),\n\tstorageId: 'workbench.explorer.views.state',\n\ticon: explorerViewIcon,\n\talwaysUseContainerInfo: true,\n\thideIfEmpty: true,\n\torder: 0,\n\topenCommandActionDescriptor: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: localize2('explore', \"Explorer\"),\n\t\tmnemonicTitle: localize({ key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] }, \"&&Explorer\"),\n\t\tkeybindings: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyE },\n\t\torder: 0\n\t},\n}, ViewContainerLocation.Sidebar, { isDefault: true });\n\nconst openFolder = localize('openFolder', \"Open Folder\");\nconst addAFolder = localize('addAFolder', \"add a folder\");\nconst openRecent = localize('openRecent', \"Open Recent\");\n\nconst addRootFolderButton = `[${openFolder}](command:${AddRootFolderAction.ID})`;\nconst addAFolderButton = `[${addAFolder}](command:${AddRootFolderAction.ID})`;\nconst openFolderButton = `[${openFolder}](command:${(isMacintosh && !isWeb) ? OpenFileFolderAction.ID : OpenFolderAction.ID})`;\nconst openFolderViaWorkspaceButton = `[${openFolder}](command:${OpenFolderViaWorkspaceAction.ID})`;\nconst openRecentButton = `[${openRecent}](command:${OpenRecentAction.ID})`;\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noWorkspaceHelp', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet added a folder to the workspace.\\n{0}\", addRootFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// inside a .code-workspace\n\t\tWorkbenchStateContext.isEqualTo('workspace'),\n\t\t// unless we cannot enter or open workspaces (e.g. web serverless)\n\t\tOpenFolderWorkspaceSupportContext\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noFolderHelpWeb', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet opened a folder.\\n{0}\\n{1}\", openFolderViaWorkspaceButton, openRecentButton),\n\twhen: ContextKeyExpr.and(\n\t\t// inside a .code-workspace\n\t\tWorkbenchStateContext.isEqualTo('workspace'),\n\t\t// we cannot enter workspaces (e.g. web serverless)\n\t\tOpenFolderWorkspaceSupportContext.toNegated()\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'remoteNoFolderHelp', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change'] },\n\t\t\"Connected to remote.\\n{0}\", openFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// not inside a .code-workspace\n\t\tWorkbenchStateContext.notEqualsTo('workspace'),\n\t\t// connected to a remote\n\t\tRemoteNameContext.notEqualsTo(''),\n\t\t// but not in web\n\t\tIsWebContext.toNegated()),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noFolderButEditorsHelp', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet opened a folder.\\n{0}\\nOpening a folder will close all currently open editors. To keep them open, {1} instead.\", openFolderButton, addAFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// editors are opened\n\t\tContextKeyExpr.has('editorIsOpen'),\n\t\tContextKeyExpr.or(\n\t\t\t// not inside a .code-workspace and local\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.isEqualTo('')),\n\t\t\t// not inside a .code-workspace and web\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), IsWebContext)\n\t\t)\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noFolderHelp', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet opened a folder.\\n{0}\", openFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// no editor is open\n\t\tContextKeyExpr.has('editorIsOpen')?.negate(),\n\t\tContextKeyExpr.or(\n\t\t\t// not inside a .code-workspace and local\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.isEqualTo('')),\n\t\t\t// not inside a .code-workspace and web\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), IsWebContext)\n\t\t)\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n"],
  "mappings": "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",
  "names": []
}
