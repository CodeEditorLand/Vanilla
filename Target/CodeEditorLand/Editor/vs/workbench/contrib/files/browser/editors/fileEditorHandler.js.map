{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/fileEditorHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../../../base/common/uri.js';\nimport { IEditorSerializer } from '../../../../common/editor.js';\nimport { EditorInput } from '../../../../common/editor/editorInput.js';\nimport { ITextEditorService } from '../../../../services/textfile/common/textEditorService.js';\nimport { isEqual } from '../../../../../base/common/resources.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkbenchContribution } from '../../../../common/contributions.js';\nimport { IWorkingCopyIdentifier, NO_TYPE_ID } from '../../../../services/workingCopy/common/workingCopy.js';\nimport { IWorkingCopyEditorHandler, IWorkingCopyEditorService } from '../../../../services/workingCopy/common/workingCopyEditorService.js';\nimport { FileEditorInput } from './fileEditorInput.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\n\ninterface ISerializedFileEditorInput {\n\tresourceJSON: UriComponents;\n\tpreferredResourceJSON?: UriComponents;\n\tname?: string;\n\tdescription?: string;\n\tencoding?: string;\n\tmodeId?: string; // should be `languageId` but is kept for backwards compatibility\n}\n\nexport class FileEditorInputSerializer implements IEditorSerializer {\n\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tserialize(editorInput: EditorInput): string {\n\t\tconst fileEditorInput = editorInput as FileEditorInput;\n\t\tconst resource = fileEditorInput.resource;\n\t\tconst preferredResource = fileEditorInput.preferredResource;\n\t\tconst serializedFileEditorInput: ISerializedFileEditorInput = {\n\t\t\tresourceJSON: resource.toJSON(),\n\t\t\tpreferredResourceJSON: isEqual(resource, preferredResource) ? undefined : preferredResource, // only storing preferredResource if it differs from the resource\n\t\t\tname: fileEditorInput.getPreferredName(),\n\t\t\tdescription: fileEditorInput.getPreferredDescription(),\n\t\t\tencoding: fileEditorInput.getEncoding(),\n\t\t\tmodeId: fileEditorInput.getPreferredLanguageId() // only using the preferred user associated language here if available to not store redundant data\n\t\t};\n\n\t\treturn JSON.stringify(serializedFileEditorInput);\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): FileEditorInput {\n\t\treturn instantiationService.invokeFunction(accessor => {\n\t\t\tconst serializedFileEditorInput: ISerializedFileEditorInput = JSON.parse(serializedEditorInput);\n\t\t\tconst resource = URI.revive(serializedFileEditorInput.resourceJSON);\n\t\t\tconst preferredResource = URI.revive(serializedFileEditorInput.preferredResourceJSON);\n\t\t\tconst name = serializedFileEditorInput.name;\n\t\t\tconst description = serializedFileEditorInput.description;\n\t\t\tconst encoding = serializedFileEditorInput.encoding;\n\t\t\tconst languageId = serializedFileEditorInput.modeId;\n\n\t\t\tconst fileEditorInput = accessor.get(ITextEditorService).createTextEditor({ resource, label: name, description, encoding, languageId, forceFile: true }) as FileEditorInput;\n\t\t\tif (preferredResource) {\n\t\t\t\tfileEditorInput.setPreferredResource(preferredResource);\n\t\t\t}\n\n\t\t\treturn fileEditorInput;\n\t\t});\n\t}\n}\n\nexport class FileEditorWorkingCopyEditorHandler extends Disposable implements IWorkbenchContribution, IWorkingCopyEditorHandler {\n\n\tstatic readonly ID = 'workbench.contrib.fileEditorWorkingCopyEditorHandler';\n\n\tconstructor(\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@ITextEditorService private readonly textEditorService: ITextEditorService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(workingCopyEditorService.registerHandler(this));\n\t}\n\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean | Promise<boolean> {\n\t\treturn workingCopy.typeId === NO_TYPE_ID && this.fileService.canHandleResource(workingCopy.resource);\n\t}\n\n\tprivate handlesSync(workingCopy: IWorkingCopyIdentifier): boolean {\n\t\treturn workingCopy.typeId === NO_TYPE_ID && this.fileService.hasProvider(workingCopy.resource);\n\t}\n\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean {\n\t\tif (!this.handlesSync(workingCopy)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Naturally it would make sense here to check for `instanceof FileEditorInput`\n\t\t// but because some custom editors also leverage text file based working copies\n\t\t// we need to do a weaker check by only comparing for the resource\n\n\t\treturn isEqual(workingCopy.resource, editor.resource);\n\t}\n\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): EditorInput {\n\t\treturn this.textEditorService.createTextEditor({ resource: workingCopy.resource, forceFile: true });\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,KAAK,qBAAqB;AACnC,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,6BAA6B;AACtC,SAAS,8BAA8B;AACvC,SAAS,wBAAwB,kBAAkB;AACnD,SAAS,2BAA2B,iCAAiC;AACrE,SAAS,uBAAuB;AAChC,SAAS,oBAAoB;AAWtB,MAAM,0BAAuD;AAAA,EA3BpE,OA2BoE;AAAA;AAAA;AAAA,EAEnE,aAAa,aAAmC;AAC/C,WAAO;AAAA,EACR;AAAA,EAEA,UAAU,aAAkC;AAC3C,UAAM,kBAAkB;AACxB,UAAM,WAAW,gBAAgB;AACjC,UAAM,oBAAoB,gBAAgB;AAC1C,UAAM,4BAAwD;AAAA,MAC7D,cAAc,SAAS,OAAO;AAAA,MAC9B,uBAAuB,QAAQ,UAAU,iBAAiB,IAAI,SAAY;AAAA;AAAA,MAC1E,MAAM,gBAAgB,iBAAiB;AAAA,MACvC,aAAa,gBAAgB,wBAAwB;AAAA,MACrD,UAAU,gBAAgB,YAAY;AAAA,MACtC,QAAQ,gBAAgB,uBAAuB;AAAA;AAAA,IAChD;AAEA,WAAO,KAAK,UAAU,yBAAyB;AAAA,EAChD;AAAA,EAEA,YAAY,sBAA6C,uBAAgD;AACxG,WAAO,qBAAqB,eAAe,cAAY;AACtD,YAAM,4BAAwD,KAAK,MAAM,qBAAqB;AAC9F,YAAM,WAAW,IAAI,OAAO,0BAA0B,YAAY;AAClE,YAAM,oBAAoB,IAAI,OAAO,0BAA0B,qBAAqB;AACpF,YAAM,OAAO,0BAA0B;AACvC,YAAM,cAAc,0BAA0B;AAC9C,YAAM,WAAW,0BAA0B;AAC3C,YAAM,aAAa,0BAA0B;AAE7C,YAAM,kBAAkB,SAAS,IAAI,kBAAkB,EAAE,iBAAiB,EAAE,UAAU,OAAO,MAAM,aAAa,UAAU,YAAY,WAAW,KAAK,CAAC;AACvJ,UAAI,mBAAmB;AACtB,wBAAgB,qBAAqB,iBAAiB;AAAA,MACvD;AAEA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AAEO,IAAM,qCAAN,cAAiD,WAAwE;AAAA,EAI/H,YAC4B,0BACU,mBACN,aAC9B;AACD,UAAM;AAH+B;AACN;AAI/B,SAAK,UAAU,yBAAyB,gBAAgB,IAAI,CAAC;AAAA,EAC9D;AAAA,EAjFD,OAqEgI;AAAA;AAAA;AAAA,EAE/H,OAAgB,KAAK;AAAA,EAYrB,QAAQ,aAAiE;AACxE,WAAO,YAAY,WAAW,cAAc,KAAK,YAAY,kBAAkB,YAAY,QAAQ;AAAA,EACpG;AAAA,EAEQ,YAAY,aAA8C;AACjE,WAAO,YAAY,WAAW,cAAc,KAAK,YAAY,YAAY,YAAY,QAAQ;AAAA,EAC9F;AAAA,EAEA,OAAO,aAAqC,QAA8B;AACzE,QAAI,CAAC,KAAK,YAAY,WAAW,GAAG;AACnC,aAAO;AAAA,IACR;AAMA,WAAO,QAAQ,YAAY,UAAU,OAAO,QAAQ;AAAA,EACrD;AAAA,EAEA,aAAa,aAAkD;AAC9D,WAAO,KAAK,kBAAkB,iBAAiB,EAAE,UAAU,YAAY,UAAU,WAAW,KAAK,CAAC;AAAA,EACnG;AACD;AArCa,qCAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,GAPU;",
  "names": []
}
