{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/fileEditorHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport { isEqual } from \"../../../../../base/common/resources.js\";\nimport { URI, type UriComponents } from \"../../../../../base/common/uri.js\";\nimport { IFileService } from \"../../../../../platform/files/common/files.js\";\nimport type { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport type { IWorkbenchContribution } from \"../../../../common/contributions.js\";\nimport type { IEditorSerializer } from \"../../../../common/editor.js\";\nimport type { EditorInput } from \"../../../../common/editor/editorInput.js\";\nimport { ITextEditorService } from \"../../../../services/textfile/common/textEditorService.js\";\nimport {\n\ttype IWorkingCopyIdentifier,\n\tNO_TYPE_ID,\n} from \"../../../../services/workingCopy/common/workingCopy.js\";\nimport {\n\ttype IWorkingCopyEditorHandler,\n\tIWorkingCopyEditorService,\n} from \"../../../../services/workingCopy/common/workingCopyEditorService.js\";\nimport type { FileEditorInput } from \"./fileEditorInput.js\";\n\ninterface ISerializedFileEditorInput {\n\tresourceJSON: UriComponents;\n\tpreferredResourceJSON?: UriComponents;\n\tname?: string;\n\tdescription?: string;\n\tencoding?: string;\n\tmodeId?: string; // should be `languageId` but is kept for backwards compatibility\n}\n\nexport class FileEditorInputSerializer implements IEditorSerializer {\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tserialize(editorInput: EditorInput): string {\n\t\tconst fileEditorInput = editorInput as FileEditorInput;\n\t\tconst resource = fileEditorInput.resource;\n\t\tconst preferredResource = fileEditorInput.preferredResource;\n\t\tconst serializedFileEditorInput: ISerializedFileEditorInput = {\n\t\t\tresourceJSON: resource.toJSON(),\n\t\t\tpreferredResourceJSON: isEqual(resource, preferredResource)\n\t\t\t\t? undefined\n\t\t\t\t: preferredResource, // only storing preferredResource if it differs from the resource\n\t\t\tname: fileEditorInput.getPreferredName(),\n\t\t\tdescription: fileEditorInput.getPreferredDescription(),\n\t\t\tencoding: fileEditorInput.getEncoding(),\n\t\t\tmodeId: fileEditorInput.getPreferredLanguageId(), // only using the preferred user associated language here if available to not store redundant data\n\t\t};\n\n\t\treturn JSON.stringify(serializedFileEditorInput);\n\t}\n\n\tdeserialize(\n\t\tinstantiationService: IInstantiationService,\n\t\tserializedEditorInput: string,\n\t): FileEditorInput {\n\t\treturn instantiationService.invokeFunction((accessor) => {\n\t\t\tconst serializedFileEditorInput: ISerializedFileEditorInput =\n\t\t\t\tJSON.parse(serializedEditorInput);\n\t\t\tconst resource = URI.revive(serializedFileEditorInput.resourceJSON);\n\t\t\tconst preferredResource = URI.revive(\n\t\t\t\tserializedFileEditorInput.preferredResourceJSON,\n\t\t\t);\n\t\t\tconst name = serializedFileEditorInput.name;\n\t\t\tconst description = serializedFileEditorInput.description;\n\t\t\tconst encoding = serializedFileEditorInput.encoding;\n\t\t\tconst languageId = serializedFileEditorInput.modeId;\n\n\t\t\tconst fileEditorInput = accessor\n\t\t\t\t.get(ITextEditorService)\n\t\t\t\t.createTextEditor({\n\t\t\t\t\tresource,\n\t\t\t\t\tlabel: name,\n\t\t\t\t\tdescription,\n\t\t\t\t\tencoding,\n\t\t\t\t\tlanguageId,\n\t\t\t\t\tforceFile: true,\n\t\t\t\t}) as FileEditorInput;\n\t\t\tif (preferredResource) {\n\t\t\t\tfileEditorInput.setPreferredResource(preferredResource);\n\t\t\t}\n\n\t\t\treturn fileEditorInput;\n\t\t});\n\t}\n}\n\nexport class FileEditorWorkingCopyEditorHandler\n\textends Disposable\n\timplements IWorkbenchContribution, IWorkingCopyEditorHandler\n{\n\tstatic readonly ID = \"workbench.contrib.fileEditorWorkingCopyEditorHandler\";\n\n\tconstructor(\n\t\t@IWorkingCopyEditorService\n\t\tworkingCopyEditorService: IWorkingCopyEditorService,\n\t\t@ITextEditorService\n\t\tprivate readonly textEditorService: ITextEditorService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(workingCopyEditorService.registerHandler(this));\n\t}\n\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean | Promise<boolean> {\n\t\treturn (\n\t\t\tworkingCopy.typeId === NO_TYPE_ID &&\n\t\t\tthis.fileService.canHandleResource(workingCopy.resource)\n\t\t);\n\t}\n\n\tprivate handlesSync(workingCopy: IWorkingCopyIdentifier): boolean {\n\t\treturn (\n\t\t\tworkingCopy.typeId === NO_TYPE_ID &&\n\t\t\tthis.fileService.hasProvider(workingCopy.resource)\n\t\t);\n\t}\n\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean {\n\t\tif (!this.handlesSync(workingCopy)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Naturally it would make sense here to check for `instanceof FileEditorInput`\n\t\t// but because some custom editors also leverage text file based working copies\n\t\t// we need to do a weaker check by only comparing for the resource\n\n\t\treturn isEqual(workingCopy.resource, editor.resource);\n\t}\n\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): EditorInput {\n\t\treturn this.textEditorService.createTextEditor({\n\t\t\tresource: workingCopy.resource,\n\t\t\tforceFile: true,\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,WAA+B;AACxC,SAAS,oBAAoB;AAK7B,SAAS,0BAA0B;AACnC;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AAYA,MAAM,0BAAuD;AAAA,EAjCpE,OAiCoE;AAAA;AAAA;AAAA,EACnE,aAAa,aAAmC;AAC/C,WAAO;AAAA,EACR;AAAA,EAEA,UAAU,aAAkC;AAC3C,UAAM,kBAAkB;AACxB,UAAM,WAAW,gBAAgB;AACjC,UAAM,oBAAoB,gBAAgB;AAC1C,UAAM,4BAAwD;AAAA,MAC7D,cAAc,SAAS,OAAO;AAAA,MAC9B,uBAAuB,QAAQ,UAAU,iBAAiB,IACvD,SACA;AAAA;AAAA,MACH,MAAM,gBAAgB,iBAAiB;AAAA,MACvC,aAAa,gBAAgB,wBAAwB;AAAA,MACrD,UAAU,gBAAgB,YAAY;AAAA,MACtC,QAAQ,gBAAgB,uBAAuB;AAAA;AAAA,IAChD;AAEA,WAAO,KAAK,UAAU,yBAAyB;AAAA,EAChD;AAAA,EAEA,YACC,sBACA,uBACkB;AAClB,WAAO,qBAAqB,eAAe,CAAC,aAAa;AACxD,YAAM,4BACL,KAAK,MAAM,qBAAqB;AACjC,YAAM,WAAW,IAAI,OAAO,0BAA0B,YAAY;AAClE,YAAM,oBAAoB,IAAI;AAAA,QAC7B,0BAA0B;AAAA,MAC3B;AACA,YAAM,OAAO,0BAA0B;AACvC,YAAM,cAAc,0BAA0B;AAC9C,YAAM,WAAW,0BAA0B;AAC3C,YAAM,aAAa,0BAA0B;AAE7C,YAAM,kBAAkB,SACtB,IAAI,kBAAkB,EACtB,iBAAiB;AAAA,QACjB;AAAA,QACA,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA,WAAW;AAAA,MACZ,CAAC;AACF,UAAI,mBAAmB;AACtB,wBAAgB,qBAAqB,iBAAiB;AAAA,MACvD;AAEA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AAEO,IAAM,qCAAN,cACE,WAET;AAAA,EAGC,YAEC,0BAEiB,mBACc,aAC9B;AACD,UAAM;AAHW;AACc;AAI/B,SAAK,UAAU,yBAAyB,gBAAgB,IAAI,CAAC;AAAA,EAC9D;AAAA,EA3GD,OA8FA;AAAA;AAAA;AAAA,EACC,OAAgB,KAAK;AAAA,EAcrB,QAAQ,aAAiE;AACxE,WACC,YAAY,WAAW,cACvB,KAAK,YAAY,kBAAkB,YAAY,QAAQ;AAAA,EAEzD;AAAA,EAEQ,YAAY,aAA8C;AACjE,WACC,YAAY,WAAW,cACvB,KAAK,YAAY,YAAY,YAAY,QAAQ;AAAA,EAEnD;AAAA,EAEA,OAAO,aAAqC,QAA8B;AACzE,QAAI,CAAC,KAAK,YAAY,WAAW,GAAG;AACnC,aAAO;AAAA,IACR;AAMA,WAAO,QAAQ,YAAY,UAAU,OAAO,QAAQ;AAAA,EACrD;AAAA,EAEA,aAAa,aAAkD;AAC9D,WAAO,KAAK,kBAAkB,iBAAiB;AAAA,MAC9C,UAAU,YAAY;AAAA,MACtB,WAAW;AAAA,IACZ,CAAC;AAAA,EACF;AACD;AAlDa,qCAAN;AAAA,EAOJ;AAAA,EAEA;AAAA,EAEA;AAAA,GAXU;",
  "names": []
}
