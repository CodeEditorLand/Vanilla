{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/workspaceWatcher.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { IDisposable, Disposable, dispose, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService, IConfigurationChangeEvent } from '../../../../platform/configuration/common/configuration.js';\nimport { IFileService, IFilesConfiguration } from '../../../../platform/files/common/files.js';\nimport { IWorkspaceContextService, IWorkspaceFolder, IWorkspaceFoldersChangeEvent } from '../../../../platform/workspace/common/workspace.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { INotificationService, Severity, NeverShowAgainScope, NotificationPriority } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { isAbsolute } from '../../../../base/common/path.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nexport class WorkspaceWatcher extends Disposable {\n\n\tstatic readonly ID = 'workbench.contrib.workspaceWatcher';\n\n\tprivate readonly watchedWorkspaces = new ResourceMap<IDisposable>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\n\t\tthis.refresh();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(e => this.onDidChangeWorkspaceFolders(e)));\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.onDidChangeWorkbenchState()));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onDidChangeConfiguration(e)));\n\t\tthis._register(this.fileService.onDidWatchError(error => this.onDidWatchError(error)));\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(e: IWorkspaceFoldersChangeEvent): void {\n\n\t\t// Removed workspace: Unwatch\n\t\tfor (const removed of e.removed) {\n\t\t\tthis.unwatchWorkspace(removed);\n\t\t}\n\n\t\t// Added workspace: Watch\n\t\tfor (const added of e.added) {\n\t\t\tthis.watchWorkspace(added);\n\t\t}\n\t}\n\n\tprivate onDidChangeWorkbenchState(): void {\n\t\tthis.refresh();\n\t}\n\n\tprivate onDidChangeConfiguration(e: IConfigurationChangeEvent): void {\n\t\tif (e.affectsConfiguration('files.watcherExclude') || e.affectsConfiguration('files.watcherInclude')) {\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\tprivate onDidWatchError(error: Error): void {\n\t\tconst msg = error.toString();\n\t\tlet reason: 'ENOSPC' | 'EUNKNOWN' | 'ETERM' | undefined = undefined;\n\n\t\t// Detect if we run into ENOSPC issues\n\t\tif (msg.indexOf('ENOSPC') >= 0) {\n\t\t\treason = 'ENOSPC';\n\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tlocalize('enospcError', \"Unable to watch for file changes. Please follow the instructions link to resolve this issue.\"),\n\t\t\t\t[{\n\t\t\t\t\tlabel: localize('learnMore', \"Instructions\"),\n\t\t\t\t\trun: () => this.openerService.open(URI.parse('https://go.microsoft.com/fwlink/?linkid=867693'))\n\t\t\t\t}],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tneverShowAgain: { id: 'ignoreEnospcError', isSecondary: true, scope: NeverShowAgainScope.WORKSPACE }\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// Detect when the watcher throws an error unexpectedly\n\t\telse if (msg.indexOf('EUNKNOWN') >= 0) {\n\t\t\treason = 'EUNKNOWN';\n\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tlocalize('eshutdownError', \"File changes watcher stopped unexpectedly. A reload of the window may enable the watcher again unless the workspace cannot be watched for file changes.\"),\n\t\t\t\t[{\n\t\t\t\t\tlabel: localize('reload', \"Reload\"),\n\t\t\t\t\trun: () => this.hostService.reload()\n\t\t\t\t}],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tpriority: NotificationPriority.SILENT // reduce potential spam since we don't really know how often this fires\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// Detect unexpected termination\n\t\telse if (msg.indexOf('ETERM') >= 0) {\n\t\t\treason = 'ETERM';\n\t\t}\n\n\t\t// Log telemetry if we gathered a reason (logging it from the renderer\n\t\t// allows us to investigate this situation in context of experiments)\n\t\tif (reason) {\n\t\t\ttype WatchErrorClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tcomment: 'An event that fires when a watcher errors';\n\t\t\t\treason: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The watcher error reason.' };\n\t\t\t};\n\t\t\ttype WatchErrorEvent = {\n\t\t\t\treason: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<WatchErrorEvent, WatchErrorClassification>('fileWatcherError', { reason });\n\t\t}\n\t}\n\n\tprivate watchWorkspace(workspace: IWorkspaceFolder): void {\n\n\t\t// Compute the watcher exclude rules from configuration\n\t\tconst excludes: string[] = [];\n\t\tconst config = this.configurationService.getValue<IFilesConfiguration>({ resource: workspace.uri });\n\t\tif (config.files?.watcherExclude) {\n\t\t\tfor (const key in config.files.watcherExclude) {\n\t\t\t\tif (key && config.files.watcherExclude[key] === true) {\n\t\t\t\t\texcludes.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst pathsToWatch = new ResourceMap<URI>(uri => this.uriIdentityService.extUri.getComparisonKey(uri));\n\n\t\t// Add the workspace as path to watch\n\t\tpathsToWatch.set(workspace.uri, workspace.uri);\n\n\t\t// Compute additional includes from configuration\n\t\tif (config.files?.watcherInclude) {\n\t\t\tfor (const includePath of config.files.watcherInclude) {\n\t\t\t\tif (!includePath) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Absolute: verify a child of the workspace\n\t\t\t\tif (isAbsolute(includePath)) {\n\t\t\t\t\tconst candidate = URI.file(includePath).with({ scheme: workspace.uri.scheme });\n\t\t\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(candidate, workspace.uri)) {\n\t\t\t\t\t\tpathsToWatch.set(candidate, candidate);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Relative: join against workspace folder\n\t\t\t\telse {\n\t\t\t\t\tconst candidate = workspace.toResource(includePath);\n\t\t\t\t\tpathsToWatch.set(candidate, candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Watch all paths as instructed\n\t\tconst disposables = new DisposableStore();\n\t\tfor (const [, pathToWatch] of pathsToWatch) {\n\t\t\tdisposables.add(this.fileService.watch(pathToWatch, { recursive: true, excludes }));\n\t\t}\n\t\tthis.watchedWorkspaces.set(workspace.uri, disposables);\n\t}\n\n\tprivate unwatchWorkspace(workspace: IWorkspaceFolder): void {\n\t\tif (this.watchedWorkspaces.has(workspace.uri)) {\n\t\t\tdispose(this.watchedWorkspaces.get(workspace.uri));\n\t\t\tthis.watchedWorkspaces.delete(workspace.uri);\n\t\t}\n\t}\n\n\tprivate refresh(): void {\n\n\t\t// Unwatch all first\n\t\tthis.unwatchWorkspaces();\n\n\t\t// Watch each workspace folder\n\t\tfor (const folder of this.contextService.getWorkspace().folders) {\n\t\t\tthis.watchWorkspace(folder);\n\t\t}\n\t}\n\n\tprivate unwatchWorkspaces(): void {\n\t\tfor (const [, disposable] of this.watchedWorkspaces) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.watchedWorkspaces.clear();\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.unwatchWorkspaces();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
