{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/textFileEditorTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, distinct } from \"../../../../../base/common/arrays.js\";\nimport { RunOnceWorker } from \"../../../../../base/common/async.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../../base/common/network.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport { ICodeEditorService } from \"../../../../../editor/browser/services/codeEditorService.js\";\nimport type { IWorkbenchContribution } from \"../../../../common/contributions.js\";\nimport { DEFAULT_EDITOR_ASSOCIATION } from \"../../../../common/editor.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport { IFilesConfigurationService } from \"../../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { IHostService } from \"../../../../services/host/browser/host.js\";\nimport { ILifecycleService } from \"../../../../services/lifecycle/common/lifecycle.js\";\nimport {\n\tITextFileService,\n\tTextFileEditorModelState,\n} from \"../../../../services/textfile/common/textfiles.js\";\nimport { UntitledTextEditorInput } from \"../../../../services/untitled/common/untitledTextEditorInput.js\";\nimport { IWorkingCopyEditorService } from \"../../../../services/workingCopy/common/workingCopyEditorService.js\";\nimport { FILE_EDITOR_INPUT_ID } from \"../../common/files.js\";\n\nexport class TextFileEditorTracker\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.textFileEditorTracker\";\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyEditorService private readonly workingCopyEditorService: IWorkingCopyEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Ensure dirty text file and untitled models are always opened as editors\n\t\tthis._register(\n\t\t\tthis.textFileService.files.onDidChangeDirty((model) =>\n\t\t\t\tthis.ensureDirtyFilesAreOpenedWorker.work(model.resource),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.textFileService.files.onDidSaveError((model) =>\n\t\t\t\tthis.ensureDirtyFilesAreOpenedWorker.work(model.resource),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.textFileService.untitled.onDidChangeDirty((model) =>\n\t\t\t\tthis.ensureDirtyFilesAreOpenedWorker.work(model.resource),\n\t\t\t),\n\t\t);\n\n\t\t// Update visible text file editors when focus is gained\n\t\tthis._register(\n\t\t\tthis.hostService.onDidChangeFocus((hasFocus) =>\n\t\t\t\thasFocus ? this.reloadVisibleTextFileEditors() : undefined,\n\t\t\t),\n\t\t);\n\n\t\t// Lifecycle\n\t\tthis._register(\n\t\t\tthis.lifecycleService.onDidShutdown(() => this.dispose()),\n\t\t);\n\t}\n\n\t//#region Text File: Ensure every dirty text and untitled file is opened in an editor\n\n\tprivate readonly ensureDirtyFilesAreOpenedWorker = this._register(\n\t\tnew RunOnceWorker<URI>(\n\t\t\t(units) => this.ensureDirtyTextFilesAreOpened(units),\n\t\t\tthis.getDirtyTextFileTrackerDelay(),\n\t\t),\n\t);\n\n\tprotected getDirtyTextFileTrackerDelay(): number {\n\t\treturn 800; // encapsulated in a method for tests to override\n\t}\n\n\tprivate ensureDirtyTextFilesAreOpened(resources: URI[]): void {\n\t\tthis.doEnsureDirtyTextFilesAreOpened(\n\t\t\tdistinct(\n\t\t\t\tresources.filter((resource) => {\n\t\t\t\t\tif (!this.textFileService.isDirty(resource)) {\n\t\t\t\t\t\treturn false; // resource must be dirty\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fileModel = this.textFileService.files.get(resource);\n\t\t\t\t\tif (\n\t\t\t\t\t\tfileModel?.hasState(\n\t\t\t\t\t\t\tTextFileEditorModelState.PENDING_SAVE,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false; // resource must not be pending to save\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tresource.scheme !== Schemas.untitled &&\n\t\t\t\t\t\t!fileModel?.hasState(TextFileEditorModelState.ERROR) &&\n\t\t\t\t\t\tthis.filesConfigurationService.hasShortAutoSaveDelay(\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// leave models auto saved after short delay unless\n\t\t\t\t\t\t// the save resulted in an error and not for untitled\n\t\t\t\t\t\t// that are not auto-saved anyway\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.editorService.isOpened({\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\ttypeId:\n\t\t\t\t\t\t\t\tresource.scheme === Schemas.untitled\n\t\t\t\t\t\t\t\t\t? UntitledTextEditorInput.ID\n\t\t\t\t\t\t\t\t\t: FILE_EDITOR_INPUT_ID,\n\t\t\t\t\t\t\teditorId: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\t\t\t})\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false; // model must not be opened already as file (fast check via editor type)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst model =\n\t\t\t\t\t\tfileModel ??\n\t\t\t\t\t\tthis.textFileService.untitled.get(resource);\n\t\t\t\t\tif (\n\t\t\t\t\t\tmodel &&\n\t\t\t\t\t\tthis.workingCopyEditorService.findEditor(model)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false; // model must not be opened already as file (slower check via working copy)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}),\n\t\t\t\t(resource) => resource.toString(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate doEnsureDirtyTextFilesAreOpened(resources: URI[]): void {\n\t\tif (!resources.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editorService.openEditors(\n\t\t\tresources.map((resource) => ({\n\t\t\t\tresource,\n\t\t\t\toptions: { inactive: true, pinned: true, preserveFocus: true },\n\t\t\t})),\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Window Focus Change: Update visible code editors when focus is gained that have a known text file model\n\n\tprivate reloadVisibleTextFileEditors(): void {\n\t\t// the window got focus and we use this as a hint that files might have been changed outside\n\t\t// of this window. since file events can be unreliable, we queue a load for models that\n\t\t// are visible in any editor. since this is a fast operation in the case nothing has changed,\n\t\t// we tolerate the additional work.\n\t\tdistinct(\n\t\t\tcoalesce(\n\t\t\t\tthis.codeEditorService.listCodeEditors().map((codeEditor) => {\n\t\t\t\t\tconst resource = codeEditor.getModel()?.uri;\n\t\t\t\t\tif (!resource) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst model = this.textFileService.files.get(resource);\n\t\t\t\t\tif (!model || model.isDirty() || !model.isResolved()) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn model;\n\t\t\t\t}),\n\t\t\t),\n\t\t\t(model) => model.resource.toString(),\n\t\t).forEach((model) =>\n\t\t\tthis.textFileService.files.resolve(model.resource, {\n\t\t\t\treload: { async: true },\n\t\t\t}),\n\t\t);\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
