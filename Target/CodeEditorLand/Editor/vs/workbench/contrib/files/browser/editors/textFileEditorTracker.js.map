{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/textFileEditorTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from '../../../../common/contributions.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ITextFileService, TextFileEditorModelState } from '../../../../services/textfile/common/textfiles.js';\nimport { ILifecycleService } from '../../../../services/lifecycle/common/lifecycle.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { distinct, coalesce } from '../../../../../base/common/arrays.js';\nimport { IHostService } from '../../../../services/host/browser/host.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { RunOnceWorker } from '../../../../../base/common/async.js';\nimport { ICodeEditorService } from '../../../../../editor/browser/services/codeEditorService.js';\nimport { IFilesConfigurationService } from '../../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { FILE_EDITOR_INPUT_ID } from '../../common/files.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { UntitledTextEditorInput } from '../../../../services/untitled/common/untitledTextEditorInput.js';\nimport { IWorkingCopyEditorService } from '../../../../services/workingCopy/common/workingCopyEditorService.js';\nimport { DEFAULT_EDITOR_ASSOCIATION } from '../../../../common/editor.js';\n\nexport class TextFileEditorTracker extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.textFileEditorTracker';\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyEditorService private readonly workingCopyEditorService: IWorkingCopyEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Ensure dirty text file and untitled models are always opened as editors\n\t\tthis._register(this.textFileService.files.onDidChangeDirty(model => this.ensureDirtyFilesAreOpenedWorker.work(model.resource)));\n\t\tthis._register(this.textFileService.files.onDidSaveError(model => this.ensureDirtyFilesAreOpenedWorker.work(model.resource)));\n\t\tthis._register(this.textFileService.untitled.onDidChangeDirty(model => this.ensureDirtyFilesAreOpenedWorker.work(model.resource)));\n\n\t\t// Update visible text file editors when focus is gained\n\t\tthis._register(this.hostService.onDidChangeFocus(hasFocus => hasFocus ? this.reloadVisibleTextFileEditors() : undefined));\n\n\t\t// Lifecycle\n\t\tthis._register(this.lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\t//#region Text File: Ensure every dirty text and untitled file is opened in an editor\n\n\tprivate readonly ensureDirtyFilesAreOpenedWorker = this._register(new RunOnceWorker<URI>(units => this.ensureDirtyTextFilesAreOpened(units), this.getDirtyTextFileTrackerDelay()));\n\n\tprotected getDirtyTextFileTrackerDelay(): number {\n\t\treturn 800; // encapsulated in a method for tests to override\n\t}\n\n\tprivate ensureDirtyTextFilesAreOpened(resources: URI[]): void {\n\t\tthis.doEnsureDirtyTextFilesAreOpened(distinct(resources.filter(resource => {\n\t\t\tif (!this.textFileService.isDirty(resource)) {\n\t\t\t\treturn false; // resource must be dirty\n\t\t\t}\n\n\t\t\tconst fileModel = this.textFileService.files.get(resource);\n\t\t\tif (fileModel?.hasState(TextFileEditorModelState.PENDING_SAVE)) {\n\t\t\t\treturn false; // resource must not be pending to save\n\t\t\t}\n\n\t\t\tif (resource.scheme !== Schemas.untitled && !fileModel?.hasState(TextFileEditorModelState.ERROR) && this.filesConfigurationService.hasShortAutoSaveDelay(resource)) {\n\t\t\t\t// leave models auto saved after short delay unless\n\t\t\t\t// the save resulted in an error and not for untitled\n\t\t\t\t// that are not auto-saved anyway\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.editorService.isOpened({ resource, typeId: resource.scheme === Schemas.untitled ? UntitledTextEditorInput.ID : FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id })) {\n\t\t\t\treturn false; // model must not be opened already as file (fast check via editor type)\n\t\t\t}\n\n\t\t\tconst model = fileModel ?? this.textFileService.untitled.get(resource);\n\t\t\tif (model && this.workingCopyEditorService.findEditor(model)) {\n\t\t\t\treturn false; // model must not be opened already as file (slower check via working copy)\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}), resource => resource.toString()));\n\t}\n\n\tprivate doEnsureDirtyTextFilesAreOpened(resources: URI[]): void {\n\t\tif (!resources.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editorService.openEditors(resources.map(resource => ({\n\t\t\tresource,\n\t\t\toptions: { inactive: true, pinned: true, preserveFocus: true }\n\t\t})));\n\t}\n\n\t//#endregion\n\n\t//#region Window Focus Change: Update visible code editors when focus is gained that have a known text file model\n\n\tprivate reloadVisibleTextFileEditors(): void {\n\t\t// the window got focus and we use this as a hint that files might have been changed outside\n\t\t// of this window. since file events can be unreliable, we queue a load for models that\n\t\t// are visible in any editor. since this is a fast operation in the case nothing has changed,\n\t\t// we tolerate the additional work.\n\t\tdistinct(\n\t\t\tcoalesce(this.codeEditorService.listCodeEditors()\n\t\t\t\t.map(codeEditor => {\n\t\t\t\t\tconst resource = codeEditor.getModel()?.uri;\n\t\t\t\t\tif (!resource) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst model = this.textFileService.files.get(resource);\n\t\t\t\t\tif (!model || model.isDirty() || !model.isResolved()) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn model;\n\t\t\t\t})),\n\t\t\tmodel => model.resource.toString()\n\t\t).forEach(model => this.textFileService.files.resolve(model.resource, { reload: { async: true } }));\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
