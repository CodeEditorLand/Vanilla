{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/textFileEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../../nls.js';\nimport { mark } from '../../../../../base/common/performance.js';\nimport { assertIsDefined } from '../../../../../base/common/types.js';\nimport { IPathService } from '../../../../services/path/common/pathService.js';\nimport { IAction, toAction } from '../../../../../base/common/actions.js';\nimport { VIEWLET_ID, TEXT_FILE_EDITOR_ID, BINARY_TEXT_FILE_MODE } from '../../common/files.js';\nimport { ITextFileService, TextFileOperationError, TextFileOperationResult } from '../../../../services/textfile/common/textfiles.js';\nimport { AbstractTextCodeEditor } from '../../../../browser/parts/editor/textCodeEditor.js';\nimport { IEditorOpenContext, isTextEditorViewState, DEFAULT_EDITOR_ASSOCIATION, createEditorOpenError, IFileEditorInputOptions, createTooLargeFileError } from '../../../../common/editor.js';\nimport { EditorInput } from '../../../../common/editor/editorInput.js';\nimport { applyTextEditorOptions } from '../../../../common/editor/editorOptions.js';\nimport { BinaryEditorModel } from '../../../../common/editor/binaryEditorModel.js';\nimport { FileEditorInput } from './fileEditorInput.js';\nimport { FileOperationError, FileOperationResult, FileChangesEvent, IFileService, FileOperationEvent, FileOperation, ByteSize, TooLargeFileOperationError } from '../../../../../platform/files/common/files.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { ITextResourceConfigurationService } from '../../../../../editor/common/services/textResourceConfiguration.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IThemeService } from '../../../../../platform/theme/common/themeService.js';\nimport { ICodeEditorViewState, ScrollType } from '../../../../../editor/common/editorCommon.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { IEditorGroup, IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { EditorActivation, ITextEditorOptions } from '../../../../../platform/editor/common/editor.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IExplorerService } from '../files.js';\nimport { IPaneCompositePartService } from '../../../../services/panecomposite/browser/panecomposite.js';\nimport { ViewContainerLocation } from '../../../../common/views.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { IPreferencesService } from '../../../../services/preferences/common/preferences.js';\nimport { IHostService } from '../../../../services/host/browser/host.js';\nimport { IEditorOptions as ICodeEditorOptions } from '../../../../../editor/common/config/editorOptions.js';\nimport { IFilesConfigurationService } from '../../../../services/filesConfiguration/common/filesConfigurationService.js';\n\n/**\n * An implementation of editor for file system resources.\n */\nexport class TextFileEditor extends AbstractTextCodeEditor<ICodeEditorViewState> {\n\n\tstatic readonly ID = TEXT_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IPreferencesService protected readonly preferencesService: IPreferencesService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper(TextFileEditor.ID, group, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService, fileService);\n\n\t\t// Clear view state for deleted files\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\n\t\t// Move view state for moved files\n\t\tthis._register(this.fileService.onDidRunOperation(e => this.onDidRunOperation(e)));\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tfor (const resource of e.rawDeleted) {\n\t\t\tthis.clearEditorViewState(resource);\n\t\t}\n\t}\n\n\tprivate onDidRunOperation(e: FileOperationEvent): void {\n\t\tif (e.operation === FileOperation.MOVE && e.target) {\n\t\t\tthis.moveEditorViewState(e.resource, e.target.resource, this.uriIdentityService.extUri);\n\t\t}\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textFileEditor', \"Text File Editor\");\n\t}\n\n\toverride get input(): FileEditorInput | undefined {\n\t\treturn this._input as FileEditorInput;\n\t}\n\n\toverride async setInput(input: FileEditorInput, options: IFileEditorInputOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tmark('code/willSetInputToTextFileEditor');\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\ttry {\n\t\t\tconst resolvedModel = await input.resolve(options);\n\n\t\t\t// Check for cancellation\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// There is a special case where the text editor has to handle binary\n\t\t\t// file editor input: if a binary file has been resolved and cached\n\t\t\t// before, it maybe an actual instance of BinaryEditorModel. In this\n\t\t\t// case our text editor has to open this model using the binary editor.\n\t\t\t// We return early in this case.\n\n\t\t\tif (resolvedModel instanceof BinaryEditorModel) {\n\t\t\t\treturn this.openAsBinary(input, options);\n\t\t\t}\n\n\t\t\tconst textFileModel = resolvedModel;\n\n\t\t\t// Editor\n\t\t\tconst control = assertIsDefined(this.editorControl);\n\t\t\tcontrol.setModel(textFileModel.textEditorModel);\n\n\t\t\t// Restore view state (unless provided by options)\n\t\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\t\tconst editorViewState = this.loadEditorViewState(input, context);\n\t\t\t\tif (editorViewState) {\n\t\t\t\t\tif (options?.selection) {\n\t\t\t\t\t\teditorViewState.cursorState = []; // prevent duplicate selections via options\n\t\t\t\t\t}\n\n\t\t\t\t\tcontrol.restoreViewState(editorViewState);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply options to editor if any\n\t\t\tif (options) {\n\t\t\t\tapplyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\t// Since the resolved model provides information about being readonly\n\t\t\t// or not, we apply it here to the editor even though the editor input\n\t\t\t// was already asked for being readonly or not. The rationale is that\n\t\t\t// a resolved model might have more specific information about being\n\t\t\t// readonly or not that the input did not have.\n\t\t\tcontrol.updateOptions(this.getReadonlyConfiguration(textFileModel.isReadonly()));\n\n\t\t\tif (control.handleInitialized) {\n\t\t\t\tcontrol.handleInitialized();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tawait this.handleSetInputError(error, input, options);\n\t\t}\n\n\t\tmark('code/didSetInputToTextFileEditor');\n\t}\n\n\tprotected async handleSetInputError(error: Error, input: FileEditorInput, options: ITextEditorOptions | undefined): Promise<void> {\n\n\t\t// Handle case where content appears to be binary\n\t\tif ((<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\n\t\t\treturn this.openAsBinary(input, options);\n\t\t}\n\n\t\t// Handle case where we were asked to open a folder\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_IS_DIRECTORY) {\n\t\t\tconst actions: IAction[] = [];\n\n\t\t\tactions.push(toAction({\n\t\t\t\tid: 'workbench.files.action.openFolder', label: localize('openFolder', \"Open Folder\"), run: async () => {\n\t\t\t\t\treturn this.hostService.openWindow([{ folderUri: input.resource }], { forceNewWindow: true });\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (this.contextService.isInsideWorkspace(input.preferredResource)) {\n\t\t\t\tactions.push(toAction({\n\t\t\t\t\tid: 'workbench.files.action.reveal', label: localize('reveal', \"Reveal Folder\"), run: async () => {\n\t\t\t\t\t\tawait this.paneCompositeService.openPaneComposite(VIEWLET_ID, ViewContainerLocation.Sidebar, true);\n\n\t\t\t\t\t\treturn this.explorerService.select(input.preferredResource, true);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tthrow createEditorOpenError(localize('fileIsDirectory', \"The file is not displayed in the text editor because it is a directory.\"), actions, { forceMessage: true });\n\t\t}\n\n\t\t// Handle case where a file is too large to open without confirmation\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\n\t\t\tlet message: string;\n\t\t\tif (error instanceof TooLargeFileOperationError) {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithSize', \"The file is not displayed in the text editor because it is very large ({0}).\", ByteSize.formatSize(error.size));\n\t\t\t} else {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithoutSize', \"The file is not displayed in the text editor because it is very large.\");\n\t\t\t}\n\n\t\t\tthrow createTooLargeFileError(this.group, input, options, message, this.preferencesService);\n\t\t}\n\n\t\t// Offer to create a file from the error if we have a file not found and the name is valid and not readonly\n\t\tif (\n\t\t\t(<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND &&\n\t\t\t!this.filesConfigurationService.isReadonly(input.preferredResource) &&\n\t\t\tawait this.pathService.hasValidBasename(input.preferredResource)\n\t\t) {\n\t\t\tconst fileNotFoundError = createEditorOpenError(new FileOperationError(localize('unavailableResourceErrorEditorText', \"The editor could not be opened because the file was not found.\"), FileOperationResult.FILE_NOT_FOUND), [\n\t\t\t\ttoAction({\n\t\t\t\t\tid: 'workbench.files.action.createMissingFile', label: localize('createFile', \"Create File\"), run: async () => {\n\t\t\t\t\t\tawait this.textFileService.create([{ resource: input.preferredResource }]);\n\n\t\t\t\t\t\treturn this.editorService.openEditor({\n\t\t\t\t\t\t\tresource: input.preferredResource,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tpinned: true // new file gets pinned by default\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t], {\n\n\t\t\t\t// Support the flow of directly pressing `Enter` on the dialog to\n\t\t\t\t// create the file on the go. This is nice when for example following\n\t\t\t\t// a link to a file that does not exist to scaffold it quickly.\n\n\t\t\t\tallowDialog: true\n\t\t\t});\n\n\t\t\tthrow fileNotFoundError;\n\t\t}\n\n\t\t// Otherwise make sure the error bubbles up\n\t\tthrow error;\n\t}\n\n\tprivate openAsBinary(input: FileEditorInput, options: ITextEditorOptions | undefined): void {\n\t\tconst defaultBinaryEditor = this.configurationService.getValue<string | undefined>('workbench.editor.defaultBinaryEditor');\n\n\t\tconst editorOptions = {\n\t\t\t...options,\n\t\t\t// Make sure to not steal away the currently active group\n\t\t\t// because we are triggering another openEditor() call\n\t\t\t// and do not control the initial intent that resulted\n\t\t\t// in us now opening as binary.\n\t\t\tactivation: EditorActivation.PRESERVE\n\t\t};\n\n\t\t// Check configuration and determine whether we open the binary\n\t\t// file input in a different editor or going through the same\n\t\t// editor.\n\t\t// Going through the same editor is debt, and a better solution\n\t\t// would be to introduce a real editor for the binary case\n\t\t// and avoid enforcing binary or text on the file editor input.\n\n\t\tif (defaultBinaryEditor && defaultBinaryEditor !== '' && defaultBinaryEditor !== DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\tthis.doOpenAsBinaryInDifferentEditor(this.group, defaultBinaryEditor, input, editorOptions);\n\t\t} else {\n\t\t\tthis.doOpenAsBinaryInSameEditor(this.group, defaultBinaryEditor, input, editorOptions);\n\t\t}\n\t}\n\n\tprivate doOpenAsBinaryInDifferentEditor(group: IEditorGroup, editorId: string | undefined, editor: FileEditorInput, editorOptions: ITextEditorOptions): void {\n\t\tthis.editorService.replaceEditors([{\n\t\t\teditor,\n\t\t\treplacement: { resource: editor.resource, options: { ...editorOptions, override: editorId } }\n\t\t}], group);\n\t}\n\n\tprivate doOpenAsBinaryInSameEditor(group: IEditorGroup, editorId: string | undefined, editor: FileEditorInput, editorOptions: ITextEditorOptions): void {\n\n\t\t// Open binary as text\n\t\tif (editorId === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\teditor.setForceOpenAsText();\n\t\t\teditor.setPreferredLanguageId(BINARY_TEXT_FILE_MODE); // https://github.com/microsoft/vscode/issues/131076\n\n\t\t\teditorOptions = { ...editorOptions, forceReload: true }; // Same pane and same input, must force reload to clear cached state\n\t\t}\n\n\t\t// Open as binary\n\t\telse {\n\t\t\teditor.setForceOpenAsBinary();\n\t\t}\n\n\t\tgroup.openEditor(editor, editorOptions);\n\t}\n\n\toverride clearInput(): void {\n\t\tsuper.clearInput();\n\n\t\t// Clear Model\n\t\tthis.editorControl?.setModel(null);\n\t}\n\n\tprotected override createEditorControl(parent: HTMLElement, initialOptions: ICodeEditorOptions): void {\n\t\tmark('code/willCreateTextFileEditorControl');\n\n\t\tsuper.createEditorControl(parent, initialOptions);\n\n\t\tmark('code/didCreateTextFileEditorControl');\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\treturn input instanceof FileEditorInput;\n\t}\n\n\tprotected override tracksDisposedEditorViewState(): boolean {\n\t\treturn true; // track view state even for disposed editors\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
