{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/editors/textFileEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type IAction, toAction } from \"../../../../../base/common/actions.js\";\nimport type { CancellationToken } from \"../../../../../base/common/cancellation.js\";\nimport { mark } from \"../../../../../base/common/performance.js\";\nimport { assertIsDefined } from \"../../../../../base/common/types.js\";\nimport type { IEditorOptions as ICodeEditorOptions } from \"../../../../../editor/common/config/editorOptions.js\";\nimport {\n\ttype ICodeEditorViewState,\n\tScrollType,\n} from \"../../../../../editor/common/editorCommon.js\";\nimport { ITextResourceConfigurationService } from \"../../../../../editor/common/services/textResourceConfiguration.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport {\n\tEditorActivation,\n\ttype ITextEditorOptions,\n} from \"../../../../../platform/editor/common/editor.js\";\nimport {\n\tByteSize,\n\ttype FileChangesEvent,\n\tFileOperation,\n\tFileOperationError,\n\ttype FileOperationEvent,\n\tFileOperationResult,\n\tIFileService,\n\tTooLargeFileOperationError,\n} from \"../../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { IStorageService } from \"../../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../../platform/theme/common/themeService.js\";\nimport { IUriIdentityService } from \"../../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../../platform/workspace/common/workspace.js\";\nimport { AbstractTextCodeEditor } from \"../../../../browser/parts/editor/textCodeEditor.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\ttype IEditorOpenContext,\n\ttype IFileEditorInputOptions,\n\tcreateEditorOpenError,\n\tcreateTooLargeFileError,\n\tisTextEditorViewState,\n} from \"../../../../common/editor.js\";\nimport { BinaryEditorModel } from \"../../../../common/editor/binaryEditorModel.js\";\nimport type { EditorInput } from \"../../../../common/editor/editorInput.js\";\nimport { applyTextEditorOptions } from \"../../../../common/editor/editorOptions.js\";\nimport { ViewContainerLocation } from \"../../../../common/views.js\";\nimport {\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport { IFilesConfigurationService } from \"../../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { IHostService } from \"../../../../services/host/browser/host.js\";\nimport { IPaneCompositePartService } from \"../../../../services/panecomposite/browser/panecomposite.js\";\nimport { IPathService } from \"../../../../services/path/common/pathService.js\";\nimport { IPreferencesService } from \"../../../../services/preferences/common/preferences.js\";\nimport {\n\tITextFileService,\n\ttype TextFileOperationError,\n\tTextFileOperationResult,\n} from \"../../../../services/textfile/common/textfiles.js\";\nimport {\n\tBINARY_TEXT_FILE_MODE,\n\tTEXT_FILE_EDITOR_ID,\n\tVIEWLET_ID,\n} from \"../../common/files.js\";\nimport { IExplorerService } from \"../files.js\";\nimport { FileEditorInput } from \"./fileEditorInput.js\";\n\n/**\n * An implementation of editor for file system resources.\n */\nexport class TextFileEditor extends AbstractTextCodeEditor<ICodeEditorViewState> {\n\tstatic readonly ID = TEXT_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IPreferencesService protected readonly preferencesService: IPreferencesService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper(TextFileEditor.ID, group, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService, fileService);\n\n\t\t// Clear view state for deleted files\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\n\t\t// Move view state for moved files\n\t\tthis._register(this.fileService.onDidRunOperation(e => this.onDidRunOperation(e)));\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tfor (const resource of e.rawDeleted) {\n\t\t\tthis.clearEditorViewState(resource);\n\t\t}\n\t}\n\n\tprivate onDidRunOperation(e: FileOperationEvent): void {\n\t\tif (e.operation === FileOperation.MOVE && e.target) {\n\t\t\tthis.moveEditorViewState(\n\t\t\t\te.resource,\n\t\t\t\te.target.resource,\n\t\t\t\tthis.uriIdentityService.extUri,\n\t\t\t);\n\t\t}\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize(\"textFileEditor\", \"Text File Editor\");\n\t}\n\n\toverride get input(): FileEditorInput | undefined {\n\t\treturn this._input as FileEditorInput;\n\t}\n\n\toverride async setInput(\n\t\tinput: FileEditorInput,\n\t\toptions: IFileEditorInputOptions | undefined,\n\t\tcontext: IEditorOpenContext,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tmark(\"code/willSetInputToTextFileEditor\");\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\ttry {\n\t\t\tconst resolvedModel = await input.resolve(options);\n\n\t\t\t// Check for cancellation\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// There is a special case where the text editor has to handle binary\n\t\t\t// file editor input: if a binary file has been resolved and cached\n\t\t\t// before, it maybe an actual instance of BinaryEditorModel. In this\n\t\t\t// case our text editor has to open this model using the binary editor.\n\t\t\t// We return early in this case.\n\n\t\t\tif (resolvedModel instanceof BinaryEditorModel) {\n\t\t\t\treturn this.openAsBinary(input, options);\n\t\t\t}\n\n\t\t\tconst textFileModel = resolvedModel;\n\n\t\t\t// Editor\n\t\t\tconst control = assertIsDefined(this.editorControl);\n\t\t\tcontrol.setModel(textFileModel.textEditorModel);\n\n\t\t\t// Restore view state (unless provided by options)\n\t\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\t\tconst editorViewState = this.loadEditorViewState(\n\t\t\t\t\tinput,\n\t\t\t\t\tcontext,\n\t\t\t\t);\n\t\t\t\tif (editorViewState) {\n\t\t\t\t\tif (options?.selection) {\n\t\t\t\t\t\teditorViewState.cursorState = []; // prevent duplicate selections via options\n\t\t\t\t\t}\n\n\t\t\t\t\tcontrol.restoreViewState(editorViewState);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply options to editor if any\n\t\t\tif (options) {\n\t\t\t\tapplyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\t// Since the resolved model provides information about being readonly\n\t\t\t// or not, we apply it here to the editor even though the editor input\n\t\t\t// was already asked for being readonly or not. The rationale is that\n\t\t\t// a resolved model might have more specific information about being\n\t\t\t// readonly or not that the input did not have.\n\t\t\tcontrol.updateOptions(\n\t\t\t\tthis.getReadonlyConfiguration(textFileModel.isReadonly()),\n\t\t\t);\n\n\t\t\tif (control.handleInitialized) {\n\t\t\t\tcontrol.handleInitialized();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tawait this.handleSetInputError(error, input, options);\n\t\t}\n\n\t\tmark(\"code/didSetInputToTextFileEditor\");\n\t}\n\n\tprotected async handleSetInputError(\n\t\terror: Error,\n\t\tinput: FileEditorInput,\n\t\toptions: ITextEditorOptions | undefined,\n\t): Promise<void> {\n\t\t// Handle case where content appears to be binary\n\t\tif (\n\t\t\t(<TextFileOperationError>error).textFileOperationResult ===\n\t\t\tTextFileOperationResult.FILE_IS_BINARY\n\t\t) {\n\t\t\treturn this.openAsBinary(input, options);\n\t\t}\n\n\t\t// Handle case where we were asked to open a folder\n\t\tif (\n\t\t\t(<FileOperationError>error).fileOperationResult ===\n\t\t\tFileOperationResult.FILE_IS_DIRECTORY\n\t\t) {\n\t\t\tconst actions: IAction[] = [];\n\n\t\t\tactions.push(\n\t\t\t\ttoAction({\n\t\t\t\t\tid: \"workbench.files.action.openFolder\",\n\t\t\t\t\tlabel: localize(\"openFolder\", \"Open Folder\"),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\treturn this.hostService.openWindow(\n\t\t\t\t\t\t\t[{ folderUri: input.resource }],\n\t\t\t\t\t\t\t{ forceNewWindow: true },\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\tthis.contextService.isInsideWorkspace(input.preferredResource)\n\t\t\t) {\n\t\t\t\tactions.push(\n\t\t\t\t\ttoAction({\n\t\t\t\t\t\tid: \"workbench.files.action.reveal\",\n\t\t\t\t\t\tlabel: localize(\"reveal\", \"Reveal Folder\"),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tawait this.paneCompositeService.openPaneComposite(\n\t\t\t\t\t\t\t\tVIEWLET_ID,\n\t\t\t\t\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\treturn this.explorerService.select(\n\t\t\t\t\t\t\t\tinput.preferredResource,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow createEditorOpenError(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"fileIsDirectory\",\n\t\t\t\t\t\"The file is not displayed in the text editor because it is a directory.\",\n\t\t\t\t),\n\t\t\t\tactions,\n\t\t\t\t{ forceMessage: true },\n\t\t\t);\n\t\t}\n\n\t\t// Handle case where a file is too large to open without confirmation\n\t\tif (\n\t\t\t(<FileOperationError>error).fileOperationResult ===\n\t\t\tFileOperationResult.FILE_TOO_LARGE\n\t\t) {\n\t\t\tlet message: string;\n\t\t\tif (error instanceof TooLargeFileOperationError) {\n\t\t\t\tmessage = localize(\n\t\t\t\t\t\"fileTooLargeForHeapErrorWithSize\",\n\t\t\t\t\t\"The file is not displayed in the text editor because it is very large ({0}).\",\n\t\t\t\t\tByteSize.formatSize(error.size),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmessage = localize(\n\t\t\t\t\t\"fileTooLargeForHeapErrorWithoutSize\",\n\t\t\t\t\t\"The file is not displayed in the text editor because it is very large.\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow createTooLargeFileError(\n\t\t\t\tthis.group,\n\t\t\t\tinput,\n\t\t\t\toptions,\n\t\t\t\tmessage,\n\t\t\t\tthis.preferencesService,\n\t\t\t);\n\t\t}\n\n\t\t// Offer to create a file from the error if we have a file not found and the name is valid and not readonly\n\t\tif (\n\t\t\t(<FileOperationError>error).fileOperationResult ===\n\t\t\t\tFileOperationResult.FILE_NOT_FOUND &&\n\t\t\t!this.filesConfigurationService.isReadonly(\n\t\t\t\tinput.preferredResource,\n\t\t\t) &&\n\t\t\t(await this.pathService.hasValidBasename(input.preferredResource))\n\t\t) {\n\t\t\tconst fileNotFoundError = createEditorOpenError(\n\t\t\t\tnew FileOperationError(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"unavailableResourceErrorEditorText\",\n\t\t\t\t\t\t\"The editor could not be opened because the file was not found.\",\n\t\t\t\t\t),\n\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND,\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\ttoAction({\n\t\t\t\t\t\tid: \"workbench.files.action.createMissingFile\",\n\t\t\t\t\t\tlabel: localize(\"createFile\", \"Create File\"),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tawait this.textFileService.create([\n\t\t\t\t\t\t\t\t{ resource: input.preferredResource },\n\t\t\t\t\t\t\t]);\n\n\t\t\t\t\t\t\treturn this.editorService.openEditor({\n\t\t\t\t\t\t\t\tresource: input.preferredResource,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tpinned: true, // new file gets pinned by default\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\t// Support the flow of directly pressing `Enter` on the dialog to\n\t\t\t\t\t// create the file on the go. This is nice when for example following\n\t\t\t\t\t// a link to a file that does not exist to scaffold it quickly.\n\n\t\t\t\t\tallowDialog: true,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tthrow fileNotFoundError;\n\t\t}\n\n\t\t// Otherwise make sure the error bubbles up\n\t\tthrow error;\n\t}\n\n\tprivate openAsBinary(\n\t\tinput: FileEditorInput,\n\t\toptions: ITextEditorOptions | undefined,\n\t): void {\n\t\tconst defaultBinaryEditor = this.configurationService.getValue<\n\t\t\tstring | undefined\n\t\t>(\"workbench.editor.defaultBinaryEditor\");\n\n\t\tconst editorOptions = {\n\t\t\t...options,\n\t\t\t// Make sure to not steal away the currently active group\n\t\t\t// because we are triggering another openEditor() call\n\t\t\t// and do not control the initial intent that resulted\n\t\t\t// in us now opening as binary.\n\t\t\tactivation: EditorActivation.PRESERVE,\n\t\t};\n\n\t\t// Check configuration and determine whether we open the binary\n\t\t// file input in a different editor or going through the same\n\t\t// editor.\n\t\t// Going through the same editor is debt, and a better solution\n\t\t// would be to introduce a real editor for the binary case\n\t\t// and avoid enforcing binary or text on the file editor input.\n\n\t\tif (\n\t\t\tdefaultBinaryEditor &&\n\t\t\tdefaultBinaryEditor !== \"\" &&\n\t\t\tdefaultBinaryEditor !== DEFAULT_EDITOR_ASSOCIATION.id\n\t\t) {\n\t\t\tthis.doOpenAsBinaryInDifferentEditor(\n\t\t\t\tthis.group,\n\t\t\t\tdefaultBinaryEditor,\n\t\t\t\tinput,\n\t\t\t\teditorOptions,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.doOpenAsBinaryInSameEditor(\n\t\t\t\tthis.group,\n\t\t\t\tdefaultBinaryEditor,\n\t\t\t\tinput,\n\t\t\t\teditorOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate doOpenAsBinaryInDifferentEditor(\n\t\tgroup: IEditorGroup,\n\t\teditorId: string | undefined,\n\t\teditor: FileEditorInput,\n\t\teditorOptions: ITextEditorOptions,\n\t): void {\n\t\tthis.editorService.replaceEditors(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\teditor,\n\t\t\t\t\treplacement: {\n\t\t\t\t\t\tresource: editor.resource,\n\t\t\t\t\t\toptions: { ...editorOptions, override: editorId },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tgroup,\n\t\t);\n\t}\n\n\tprivate doOpenAsBinaryInSameEditor(\n\t\tgroup: IEditorGroup,\n\t\teditorId: string | undefined,\n\t\teditor: FileEditorInput,\n\t\teditorOptions: ITextEditorOptions,\n\t): void {\n\t\t// Open binary as text\n\t\tif (editorId === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\teditor.setForceOpenAsText();\n\t\t\teditor.setPreferredLanguageId(BINARY_TEXT_FILE_MODE); // https://github.com/microsoft/vscode/issues/131076\n\n\t\t\teditorOptions = { ...editorOptions, forceReload: true }; // Same pane and same input, must force reload to clear cached state\n\t\t}\n\n\t\t// Open as binary\n\t\telse {\n\t\t\teditor.setForceOpenAsBinary();\n\t\t}\n\n\t\tgroup.openEditor(editor, editorOptions);\n\t}\n\n\toverride clearInput(): void {\n\t\tsuper.clearInput();\n\n\t\t// Clear Model\n\t\tthis.editorControl?.setModel(null);\n\t}\n\n\tprotected override createEditorControl(\n\t\tparent: HTMLElement,\n\t\tinitialOptions: ICodeEditorOptions,\n\t): void {\n\t\tmark(\"code/willCreateTextFileEditorControl\");\n\n\t\tsuper.createEditorControl(parent, initialOptions);\n\n\t\tmark(\"code/didCreateTextFileEditorControl\");\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\treturn input instanceof FileEditorInput;\n\t}\n\n\tprotected override tracksDisposedEditorViewState(): boolean {\n\t\treturn true; // track view state even for disposed editors\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
