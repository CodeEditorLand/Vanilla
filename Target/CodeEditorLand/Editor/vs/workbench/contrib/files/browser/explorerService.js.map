{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/explorerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport type { IExpression } from \"../../../../base/common/glob.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { basename, dirname } from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tIBulkEditService,\n\ttype ResourceFileEdit,\n} from \"../../../../editor/browser/services/bulkEditService.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport {\n\ttype IConfigurationChangeEvent,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tFileChangeType,\n\ttype FileChangesEvent,\n\tFileOperation,\n\ttype FileOperationEvent,\n\tIFileService,\n\ttype IResolveFileOptions,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\ttype IProgressCompositeOptions,\n\ttype IProgressOptions,\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { UndoRedoSource } from \"../../../../platform/undoRedo/common/undoRedo.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { ResourceGlobMatcher } from \"../../../common/resources.js\";\nimport type { IEditableData } from \"../../../common/views.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IFilesConfigurationService } from \"../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { ExplorerItem, ExplorerModel } from \"../common/explorerModel.js\";\nimport {\n\ttype IFilesConfiguration,\n\ttype ISortOrderConfiguration,\n\tLexicographicOptions,\n\tSortOrder,\n} from \"../common/files.js\";\nimport type { IExplorerService, IExplorerView } from \"./files.js\";\n\nexport const UNDO_REDO_SOURCE = new UndoRedoSource();\n\nexport class ExplorerService implements IExplorerService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly EXPLORER_FILE_CHANGES_REACT_DELAY = 500; // delay in ms to react to file changes to give our internal events a chance to react first\n\n\tprivate readonly disposables = new DisposableStore();\n\tprivate editable: { stat: ExplorerItem; data: IEditableData } | undefined;\n\tprivate config: IFilesConfiguration[\"explorer\"];\n\tprivate cutItems: ExplorerItem[] | undefined;\n\tprivate view: IExplorerView | undefined;\n\tprivate model: ExplorerModel;\n\tprivate onFileChangesScheduler: RunOnceScheduler;\n\tprivate fileChangeEvents: FileChangesEvent[] = [];\n\tprivate revealExcludeMatcher: ResourceGlobMatcher;\n\n\tconstructor(\n\t\t@IFileService private fileService: IFileService,\n\t\t@IConfigurationService\n\t\tprivate configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService\n\t\tprivate contextService: IWorkspaceContextService,\n\t\t@IClipboardService private clipboardService: IClipboardService,\n\t\t@IEditorService private editorService: IEditorService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IFilesConfigurationService\n\t\tprivate readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.config = this.configurationService.getValue(\"explorer\");\n\n\t\tthis.model = new ExplorerModel(\n\t\t\tthis.contextService,\n\t\t\tthis.uriIdentityService,\n\t\t\tthis.fileService,\n\t\t\tthis.configurationService,\n\t\t\tthis.filesConfigurationService,\n\t\t);\n\t\tthis.disposables.add(this.model);\n\t\tthis.disposables.add(\n\t\t\tthis.fileService.onDidRunOperation((e) =>\n\t\t\t\tthis.onDidRunOperation(e),\n\t\t\t),\n\t\t);\n\n\t\tthis.onFileChangesScheduler = new RunOnceScheduler(async () => {\n\t\t\tconst events = this.fileChangeEvents;\n\t\t\tthis.fileChangeEvents = [];\n\n\t\t\t// Filter to the ones we care\n\t\t\tconst types = [FileChangeType.DELETED];\n\t\t\tif (this.config.sortOrder === SortOrder.Modified) {\n\t\t\t\ttypes.push(FileChangeType.UPDATED);\n\t\t\t}\n\n\t\t\tlet shouldRefresh = false;\n\t\t\t// For DELETED and UPDATED events go through the explorer model and check if any of the items got affected\n\t\t\tthis.roots.forEach((r) => {\n\t\t\t\tif (this.view && !shouldRefresh) {\n\t\t\t\t\tshouldRefresh = doesFileEventAffect(\n\t\t\t\t\t\tr,\n\t\t\t\t\t\tthis.view,\n\t\t\t\t\t\tevents,\n\t\t\t\t\t\ttypes,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// For ADDED events we need to go through all the events and check if the explorer is already aware of some of them\n\t\t\t// Or if they affect not yet resolved parts of the explorer. If that is the case we will not refresh.\n\t\t\tevents.forEach((e) => {\n\t\t\t\tif (!shouldRefresh) {\n\t\t\t\t\tfor (const resource of e.rawAdded) {\n\t\t\t\t\t\tconst parent = this.model.findClosest(\n\t\t\t\t\t\t\tdirname(resource),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// Parent of the added resource is resolved and the explorer model is not aware of the added resource - we need to refresh\n\t\t\t\t\t\tif (parent && !parent.getChild(basename(resource))) {\n\t\t\t\t\t\t\tshouldRefresh = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (shouldRefresh) {\n\t\t\t\tawait this.refresh(false);\n\t\t\t}\n\t\t}, ExplorerService.EXPLORER_FILE_CHANGES_REACT_DELAY);\n\n\t\tthis.disposables.add(\n\t\t\tthis.fileService.onDidFilesChange((e) => {\n\t\t\t\tthis.fileChangeEvents.push(e);\n\t\t\t\t// Don't mess with the file tree while in the process of editing. #112293\n\t\t\t\tif (this.editable) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!this.onFileChangesScheduler.isScheduled()) {\n\t\t\t\t\tthis.onFileChangesScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) =>\n\t\t\t\tthis.onConfigurationUpdated(e),\n\t\t\t),\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tEvent.any<{ scheme: string }>(\n\t\t\t\tthis.fileService.onDidChangeFileSystemProviderRegistrations,\n\t\t\t\tthis.fileService.onDidChangeFileSystemProviderCapabilities,\n\t\t\t)(async (e) => {\n\t\t\t\tlet affected = false;\n\t\t\t\tthis.model.roots.forEach((r) => {\n\t\t\t\t\tif (r.resource.scheme === e.scheme) {\n\t\t\t\t\t\taffected = true;\n\t\t\t\t\t\tr.forgetChildren();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (affected) {\n\t\t\t\t\tif (this.view) {\n\t\t\t\t\t\tawait this.view.setTreeInput();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tthis.model.onDidChangeRoots(() => {\n\t\t\t\tthis.view?.setTreeInput();\n\t\t\t}),\n\t\t);\n\n\t\t// Refresh explorer when window gets focus to compensate for missing file events #126817\n\t\tthis.disposables.add(\n\t\t\thostService.onDidChangeFocus((hasFocus) => {\n\t\t\t\tif (hasFocus) {\n\t\t\t\t\tthis.refresh(false);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.revealExcludeMatcher = new ResourceGlobMatcher(\n\t\t\t(uri) =>\n\t\t\t\tgetRevealExcludes(\n\t\t\t\t\tconfigurationService.getValue<IFilesConfiguration>({\n\t\t\t\t\t\tresource: uri,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t(event) => event.affectsConfiguration(\"explorer.autoRevealExclude\"),\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t);\n\t\tthis.disposables.add(this.revealExcludeMatcher);\n\t}\n\n\tget roots(): ExplorerItem[] {\n\t\treturn this.model.roots;\n\t}\n\n\tget sortOrderConfiguration(): ISortOrderConfiguration {\n\t\treturn {\n\t\t\tsortOrder: this.config.sortOrder,\n\t\t\tlexicographicOptions: this.config.sortOrderLexicographicOptions,\n\t\t\treverse: this.config.sortOrderReverse,\n\t\t};\n\t}\n\n\tregisterView(contextProvider: IExplorerView): void {\n\t\tthis.view = contextProvider;\n\t}\n\n\tgetContext(\n\t\trespectMultiSelection: boolean,\n\t\tignoreNestedChildren = false,\n\t): ExplorerItem[] {\n\t\tif (!this.view) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst items = new Set<ExplorerItem>(\n\t\t\tthis.view.getContext(respectMultiSelection),\n\t\t);\n\t\titems.forEach((item) => {\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\trespectMultiSelection &&\n\t\t\t\t\t!ignoreNestedChildren &&\n\t\t\t\t\tthis.view?.isItemCollapsed(item) &&\n\t\t\t\t\titem.nestedChildren\n\t\t\t\t) {\n\t\t\t\t\tfor (const child of item.nestedChildren) {\n\t\t\t\t\t\titems.add(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// We will error out trying to resolve collapsed nodes that have not yet been resolved.\n\t\t\t\t// So we catch and ignore them in the multiSelect context\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t\treturn [...items];\n\t}\n\n\tasync applyBulkEdit(\n\t\tedit: ResourceFileEdit[],\n\t\toptions: {\n\t\t\tundoLabel: string;\n\t\t\tprogressLabel: string;\n\t\t\tconfirmBeforeUndo?: boolean;\n\t\t\tprogressLocation?:\n\t\t\t\t| ProgressLocation.Explorer\n\t\t\t\t| ProgressLocation.Window;\n\t\t},\n\t): Promise<void> {\n\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\tconst location = options.progressLocation ?? ProgressLocation.Window;\n\t\tlet progressOptions;\n\t\tif (location === ProgressLocation.Window) {\n\t\t\tprogressOptions = {\n\t\t\t\tlocation: location,\n\t\t\t\ttitle: options.progressLabel,\n\t\t\t\tcancellable: edit.length > 1,\n\t\t\t} satisfies IProgressOptions;\n\t\t} else {\n\t\t\tprogressOptions = {\n\t\t\t\tlocation: location,\n\t\t\t\ttitle: options.progressLabel,\n\t\t\t\tcancellable: edit.length > 1,\n\t\t\t\tdelay: 500,\n\t\t\t} satisfies IProgressCompositeOptions;\n\t\t}\n\t\tconst promise = this.progressService.withProgress(\n\t\t\tprogressOptions,\n\t\t\tasync (progress) => {\n\t\t\t\tawait this.bulkEditService.apply(edit, {\n\t\t\t\t\tundoRedoSource: UNDO_REDO_SOURCE,\n\t\t\t\t\tlabel: options.undoLabel,\n\t\t\t\t\tcode: \"undoredo.explorerOperation\",\n\t\t\t\t\tprogress,\n\t\t\t\t\ttoken: cancellationTokenSource.token,\n\t\t\t\t\tconfirmBeforeUndo: options.confirmBeforeUndo,\n\t\t\t\t});\n\t\t\t},\n\t\t\t() => cancellationTokenSource.cancel(),\n\t\t);\n\t\tawait this.progressService.withProgress(\n\t\t\t{ location: ProgressLocation.Explorer, delay: 500 },\n\t\t\t() => promise,\n\t\t);\n\t\tcancellationTokenSource.dispose();\n\t}\n\n\thasViewFocus(): boolean {\n\t\treturn !!this.view && this.view.hasFocus();\n\t}\n\n\t// IExplorerService methods\n\n\tfindClosest(resource: URI): ExplorerItem | null {\n\t\treturn this.model.findClosest(resource);\n\t}\n\n\tfindClosestRoot(resource: URI): ExplorerItem | null {\n\t\tconst parentRoots = this.model.roots\n\t\t\t.filter((r) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\t\tresource,\n\t\t\t\t\tr.resource,\n\t\t\t\t),\n\t\t\t)\n\t\t\t.sort(\n\t\t\t\t(first, second) =>\n\t\t\t\t\tsecond.resource.path.length - first.resource.path.length,\n\t\t\t);\n\t\treturn parentRoots.length ? parentRoots[0] : null;\n\t}\n\n\tasync setEditable(\n\t\tstat: ExplorerItem,\n\t\tdata: IEditableData | null,\n\t): Promise<void> {\n\t\tif (!this.view) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (data) {\n\t\t\tthis.editable = { stat, data };\n\t\t} else {\n\t\t\tthis.editable = undefined;\n\t\t}\n\t\tconst isEditing = this.isEditable(stat);\n\t\ttry {\n\t\t\tawait this.view.setEditable(stat, isEditing);\n\t\t} catch {\n\t\t\tconst parent = stat.parent;\n\t\t\ttype ExplorerViewEditableErrorData = {\n\t\t\t\tparentIsDirectory: boolean | undefined;\n\t\t\t\tisDirectory: boolean | undefined;\n\t\t\t\tisReadonly: boolean | undefined;\n\t\t\t\tparentIsReadonly: boolean | undefined;\n\t\t\t\tparentIsExcluded: boolean | undefined;\n\t\t\t\tisExcluded: boolean | undefined;\n\t\t\t\tparentIsRoot: boolean | undefined;\n\t\t\t\tisRoot: boolean | undefined;\n\t\t\t\tparentHasNests: boolean | undefined;\n\t\t\t\thasNests: boolean | undefined;\n\t\t\t};\n\t\t\ttype ExplorerViewEditableErrorClassification = {\n\t\t\t\towner: \"lramos15\";\n\t\t\t\tcomment: \"Helps gain a broard understanding of why users are unable to edit files in the explorer\";\n\t\t\t\tparentIsDirectory: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the parent of the editable element is a directory\";\n\t\t\t\t};\n\t\t\t\tisDirectory: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the editable element is a directory\";\n\t\t\t\t};\n\t\t\t\tisReadonly: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the editable element is readonly\";\n\t\t\t\t};\n\t\t\t\tparentIsReadonly: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the parent of the editable element is readonly\";\n\t\t\t\t};\n\t\t\t\tparentIsExcluded: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the parent of the editable element is excluded from being shown in the explorer\";\n\t\t\t\t};\n\t\t\t\tisExcluded: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the editable element is excluded from being shown in the explorer\";\n\t\t\t\t};\n\t\t\t\tparentIsRoot: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the parent of the editable element is a root\";\n\t\t\t\t};\n\t\t\t\tisRoot: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the editable element is a root\";\n\t\t\t\t};\n\t\t\t\tparentHasNests: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the parent of the editable element has nested children\";\n\t\t\t\t};\n\t\t\t\thasNests: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Whether the editable element has nested children\";\n\t\t\t\t};\n\t\t\t};\n\t\t\tconst errorData = {\n\t\t\t\tparentIsDirectory: parent?.isDirectory,\n\t\t\t\tisDirectory: stat.isDirectory,\n\t\t\t\tisReadonly: !!stat.isReadonly,\n\t\t\t\tparentIsReadonly: !!parent?.isReadonly,\n\t\t\t\tparentIsExcluded: parent?.isExcluded,\n\t\t\t\tisExcluded: stat.isExcluded,\n\t\t\t\tparentIsRoot: parent?.isRoot,\n\t\t\t\tisRoot: stat.isRoot,\n\t\t\t\tparentHasNests: parent?.hasNests,\n\t\t\t\thasNests: stat.hasNests,\n\t\t\t};\n\t\t\tthis.telemetryService.publicLogError2<\n\t\t\t\tExplorerViewEditableErrorData,\n\t\t\t\tExplorerViewEditableErrorClassification\n\t\t\t>(\"explorerView.setEditableError\", errorData);\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!this.editable &&\n\t\t\tthis.fileChangeEvents.length &&\n\t\t\t!this.onFileChangesScheduler.isScheduled()\n\t\t) {\n\t\t\tthis.onFileChangesScheduler.schedule();\n\t\t}\n\t}\n\n\tasync setToCopy(items: ExplorerItem[], cut: boolean): Promise<void> {\n\t\tconst previouslyCutItems = this.cutItems;\n\t\tthis.cutItems = cut ? items : undefined;\n\t\tawait this.clipboardService.writeResources(\n\t\t\titems.map((s) => s.resource),\n\t\t);\n\n\t\tthis.view?.itemsCopied(items, cut, previouslyCutItems);\n\t}\n\n\tisCut(item: ExplorerItem): boolean {\n\t\treturn (\n\t\t\t!!this.cutItems &&\n\t\t\tthis.cutItems.some((i) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\ti.resource,\n\t\t\t\t\titem.resource,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\tgetEditable(): { stat: ExplorerItem; data: IEditableData } | undefined {\n\t\treturn this.editable;\n\t}\n\n\tgetEditableData(stat: ExplorerItem): IEditableData | undefined {\n\t\treturn this.editable && this.editable.stat === stat\n\t\t\t? this.editable.data\n\t\t\t: undefined;\n\t}\n\n\tisEditable(stat: ExplorerItem | undefined): boolean {\n\t\treturn !!this.editable && (this.editable.stat === stat || !stat);\n\t}\n\n\tasync select(resource: URI, reveal?: boolean | string): Promise<void> {\n\t\tif (!this.view) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If file or parent matches exclude patterns, do not reveal unless reveal argument is 'force'\n\t\tconst ignoreRevealExcludes = reveal === \"force\";\n\n\t\tconst fileStat = this.findClosest(resource);\n\t\tif (fileStat) {\n\t\t\tif (!this.shouldAutoRevealItem(fileStat, ignoreRevealExcludes)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.view.selectResource(fileStat.resource, reveal);\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Stat needs to be resolved first and then revealed\n\t\tconst options: IResolveFileOptions = {\n\t\t\tresolveTo: [resource],\n\t\t\tresolveMetadata: this.config.sortOrder === SortOrder.Modified,\n\t\t};\n\t\tconst root = this.findClosestRoot(resource);\n\t\tif (!root) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\ttry {\n\t\t\tconst stat = await this.fileService.resolve(root.resource, options);\n\n\t\t\t// Convert to model\n\t\t\tconst modelStat = ExplorerItem.create(\n\t\t\t\tthis.fileService,\n\t\t\t\tthis.configurationService,\n\t\t\t\tthis.filesConfigurationService,\n\t\t\t\tstat,\n\t\t\t\tundefined,\n\t\t\t\toptions.resolveTo,\n\t\t\t);\n\t\t\t// Update Input with disk Stat\n\t\t\tExplorerItem.mergeLocalWithDisk(modelStat, root);\n\t\t\tconst item = root.find(resource);\n\t\t\tawait this.view.refresh(true, root);\n\n\t\t\t// Once item is resolved, check again if folder should be expanded\n\t\t\tif (\n\t\t\t\titem &&\n\t\t\t\t!this.shouldAutoRevealItem(item, ignoreRevealExcludes)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.view.selectResource(\n\t\t\t\titem ? item.resource : undefined,\n\t\t\t\treveal,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\troot.error = error;\n\t\t\tawait this.view.refresh(false, root);\n\t\t}\n\t}\n\n\tasync refresh(reveal = true): Promise<void> {\n\t\tthis.model.roots.forEach((r) => r.forgetChildren());\n\t\tif (this.view) {\n\t\t\tawait this.view.refresh(true);\n\t\t\tconst resource = this.editorService.activeEditor?.resource;\n\t\t\tconst autoReveal =\n\t\t\t\tthis.configurationService.getValue<IFilesConfiguration>()\n\t\t\t\t\t.explorer.autoReveal;\n\n\t\t\tif (reveal && resource && autoReveal) {\n\t\t\t\t// We did a top level refresh, reveal the active file #67118\n\t\t\t\tthis.select(resource, autoReveal);\n\t\t\t}\n\t\t}\n\t}\n\n\t// File events\n\n\tprivate async onDidRunOperation(e: FileOperationEvent): Promise<void> {\n\t\t// When nesting, changes to one file in a folder may impact the rendered structure\n\t\t// of all the folder's immediate children, thus a recursive refresh is needed.\n\t\t// Ideally the tree would be able to recusively refresh just one level but that does not yet exist.\n\t\tconst shouldDeepRefresh = this.config.fileNesting.enabled;\n\n\t\t// Add\n\t\tif (\n\t\t\te.isOperation(FileOperation.CREATE) ||\n\t\t\te.isOperation(FileOperation.COPY)\n\t\t) {\n\t\t\tconst addedElement = e.target;\n\t\t\tconst parentResource = dirname(addedElement.resource)!;\n\t\t\tconst parents = this.model.findAll(parentResource);\n\n\t\t\tif (parents.length) {\n\t\t\t\t// Add the new file to its parent (Model)\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tparents.map(async (p) => {\n\t\t\t\t\t\t// We have to check if the parent is resolved #29177\n\t\t\t\t\t\tconst resolveMetadata =\n\t\t\t\t\t\t\tthis.config.sortOrder === `modified`;\n\t\t\t\t\t\tif (!p.isDirectoryResolved) {\n\t\t\t\t\t\t\tconst stat = await this.fileService.resolve(\n\t\t\t\t\t\t\t\tp.resource,\n\t\t\t\t\t\t\t\t{ resolveMetadata },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (stat) {\n\t\t\t\t\t\t\t\tconst modelStat = ExplorerItem.create(\n\t\t\t\t\t\t\t\t\tthis.fileService,\n\t\t\t\t\t\t\t\t\tthis.configurationService,\n\t\t\t\t\t\t\t\t\tthis.filesConfigurationService,\n\t\t\t\t\t\t\t\t\tstat,\n\t\t\t\t\t\t\t\t\tp.parent,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tExplorerItem.mergeLocalWithDisk(modelStat, p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst childElement = ExplorerItem.create(\n\t\t\t\t\t\t\tthis.fileService,\n\t\t\t\t\t\t\tthis.configurationService,\n\t\t\t\t\t\t\tthis.filesConfigurationService,\n\t\t\t\t\t\t\taddedElement,\n\t\t\t\t\t\t\tp.parent,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// Make sure to remove any previous version of the file if any\n\t\t\t\t\t\tp.removeChild(childElement);\n\t\t\t\t\t\tp.addChild(childElement);\n\t\t\t\t\t\t// Refresh the Parent (View)\n\t\t\t\t\t\tawait this.view?.refresh(shouldDeepRefresh, p);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Move (including Rename)\n\t\telse if (e.isOperation(FileOperation.MOVE)) {\n\t\t\tconst oldResource = e.resource;\n\t\t\tconst newElement = e.target;\n\t\t\tconst oldParentResource = dirname(oldResource);\n\t\t\tconst newParentResource = dirname(newElement.resource);\n\t\t\tconst modelElements = this.model.findAll(oldResource);\n\t\t\tconst sameParentMove =\n\t\t\t\tmodelElements.every((e) => !e.nestedParent) &&\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\toldParentResource,\n\t\t\t\t\tnewParentResource,\n\t\t\t\t);\n\n\t\t\t// Handle Rename\n\t\t\tif (sameParentMove) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tmodelElements.map(async (modelElement) => {\n\t\t\t\t\t\t// Rename File (Model)\n\t\t\t\t\t\tmodelElement.rename(newElement);\n\t\t\t\t\t\tawait this.view?.refresh(\n\t\t\t\t\t\t\tshouldDeepRefresh,\n\t\t\t\t\t\t\tmodelElement.parent,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Handle Move\n\t\t\telse {\n\t\t\t\tconst newParents = this.model.findAll(newParentResource);\n\t\t\t\tif (newParents.length && modelElements.length) {\n\t\t\t\t\t// Move in Model\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tmodelElements.map(async (modelElement, index) => {\n\t\t\t\t\t\t\tconst oldParent = modelElement.parent;\n\t\t\t\t\t\t\tconst oldNestedParent = modelElement.nestedParent;\n\t\t\t\t\t\t\tmodelElement.move(newParents[index]);\n\t\t\t\t\t\t\tif (oldNestedParent) {\n\t\t\t\t\t\t\t\tawait this.view?.refresh(\n\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\toldNestedParent,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait this.view?.refresh(false, oldParent);\n\t\t\t\t\t\t\tawait this.view?.refresh(\n\t\t\t\t\t\t\t\tshouldDeepRefresh,\n\t\t\t\t\t\t\t\tnewParents[index],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delete\n\t\telse if (e.isOperation(FileOperation.DELETE)) {\n\t\t\tconst modelElements = this.model.findAll(e.resource);\n\t\t\tawait Promise.all(\n\t\t\t\tmodelElements.map(async (modelElement) => {\n\t\t\t\t\tif (modelElement.parent) {\n\t\t\t\t\t\t// Remove Element from Parent (Model)\n\t\t\t\t\t\tconst parent = modelElement.parent;\n\t\t\t\t\t\tparent.removeChild(modelElement);\n\t\t\t\t\t\tthis.view?.focusNext();\n\n\t\t\t\t\t\tconst oldNestedParent = modelElement.nestedParent;\n\t\t\t\t\t\tif (oldNestedParent) {\n\t\t\t\t\t\t\toldNestedParent.removeChild(modelElement);\n\t\t\t\t\t\t\tawait this.view?.refresh(false, oldNestedParent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Refresh Parent (View)\n\t\t\t\t\t\tawait this.view?.refresh(shouldDeepRefresh, parent);\n\n\t\t\t\t\t\tif (this.view?.getFocus().length === 0) {\n\t\t\t\t\t\t\tthis.view?.focusLast();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\t// Check if an item matches a explorer.autoRevealExclude pattern\n\tprivate shouldAutoRevealItem(\n\t\titem: ExplorerItem | undefined,\n\t\tignore: boolean,\n\t): boolean {\n\t\tif (item === undefined || ignore) {\n\t\t\treturn true;\n\t\t}\n\t\tif (\n\t\t\tthis.revealExcludeMatcher.matches(\n\t\t\t\titem.resource,\n\t\t\t\t(name) => !!(item.parent && item.parent.getChild(name)),\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tconst root = item.root;\n\t\tlet currentItem = item.parent;\n\t\twhile (currentItem !== root) {\n\t\t\tif (currentItem === undefined) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this.revealExcludeMatcher.matches(currentItem.resource)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcurrentItem = currentItem.parent;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async onConfigurationUpdated(\n\t\tevent: IConfigurationChangeEvent,\n\t): Promise<void> {\n\t\tif (!event.affectsConfiguration(\"explorer\")) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet shouldRefresh = false;\n\n\t\tif (event.affectsConfiguration(\"explorer.fileNesting\")) {\n\t\t\tshouldRefresh = true;\n\t\t}\n\n\t\tconst configuration =\n\t\t\tthis.configurationService.getValue<IFilesConfiguration>();\n\n\t\tconst configSortOrder =\n\t\t\tconfiguration?.explorer?.sortOrder || SortOrder.Default;\n\t\tif (this.config.sortOrder !== configSortOrder) {\n\t\t\tshouldRefresh = this.config.sortOrder !== undefined;\n\t\t}\n\n\t\tconst configLexicographicOptions =\n\t\t\tconfiguration?.explorer?.sortOrderLexicographicOptions ||\n\t\t\tLexicographicOptions.Default;\n\t\tif (\n\t\t\tthis.config.sortOrderLexicographicOptions !==\n\t\t\tconfigLexicographicOptions\n\t\t) {\n\t\t\tshouldRefresh =\n\t\t\t\tshouldRefresh ||\n\t\t\t\tthis.config.sortOrderLexicographicOptions !== undefined;\n\t\t}\n\t\tconst sortOrderReverse =\n\t\t\tconfiguration?.explorer?.sortOrderReverse || false;\n\n\t\tif (this.config.sortOrderReverse !== sortOrderReverse) {\n\t\t\tshouldRefresh =\n\t\t\t\tshouldRefresh || this.config.sortOrderReverse !== undefined;\n\t\t}\n\n\t\tthis.config = configuration.explorer;\n\n\t\tif (shouldRefresh) {\n\t\t\tawait this.refresh();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nfunction doesFileEventAffect(\n\titem: ExplorerItem,\n\tview: IExplorerView,\n\tevents: FileChangesEvent[],\n\ttypes: FileChangeType[],\n): boolean {\n\tfor (const [_name, child] of item.children) {\n\t\tif (view.isItemVisible(child)) {\n\t\t\tif (events.some((e) => e.contains(child.resource, ...types))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (child.isDirectory && child.isDirectoryResolved) {\n\t\t\t\tif (doesFileEventAffect(child, view, events, types)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction getRevealExcludes(configuration: IFilesConfiguration): IExpression {\n\tconst revealExcludes =\n\t\tconfiguration &&\n\t\tconfiguration.explorer &&\n\t\tconfiguration.explorer.autoRevealExclude;\n\n\tif (!revealExcludes) {\n\t\treturn {};\n\t}\n\n\treturn revealExcludes;\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
