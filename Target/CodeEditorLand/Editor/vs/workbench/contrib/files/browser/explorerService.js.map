{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/explorerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IFilesConfiguration, ISortOrderConfiguration, SortOrder, LexicographicOptions } from '../common/files.js';\nimport { ExplorerItem, ExplorerModel } from '../common/explorerModel.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { FileOperationEvent, FileOperation, IFileService, FileChangesEvent, FileChangeType, IResolveFileOptions } from '../../../../platform/files/common/files.js';\nimport { dirname, basename } from '../../../../base/common/resources.js';\nimport { IConfigurationService, IConfigurationChangeEvent } from '../../../../platform/configuration/common/configuration.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IEditableData } from '../../../common/views.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IBulkEditService, ResourceFileEdit } from '../../../../editor/browser/services/bulkEditService.js';\nimport { UndoRedoSource } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { IExplorerView, IExplorerService } from './files.js';\nimport { IProgressService, ProgressLocation, IProgressCompositeOptions, IProgressOptions } from '../../../../platform/progress/common/progress.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IExpression } from '../../../../base/common/glob.js';\nimport { ResourceGlobMatcher } from '../../../common/resources.js';\nimport { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nexport const UNDO_REDO_SOURCE = new UndoRedoSource();\n\nexport class ExplorerService implements IExplorerService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly EXPLORER_FILE_CHANGES_REACT_DELAY = 500; // delay in ms to react to file changes to give our internal events a chance to react first\n\n\tprivate readonly disposables = new DisposableStore();\n\tprivate editable: { stat: ExplorerItem; data: IEditableData } | undefined;\n\tprivate config: IFilesConfiguration['explorer'];\n\tprivate cutItems: ExplorerItem[] | undefined;\n\tprivate view: IExplorerView | undefined;\n\tprivate model: ExplorerModel;\n\tprivate onFileChangesScheduler: RunOnceScheduler;\n\tprivate fileChangeEvents: FileChangesEvent[] = [];\n\tprivate revealExcludeMatcher: ResourceGlobMatcher;\n\n\tconstructor(\n\t\t@IFileService private fileService: IFileService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IClipboardService private clipboardService: IClipboardService,\n\t\t@IEditorService private editorService: IEditorService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tthis.config = this.configurationService.getValue('explorer');\n\n\t\tthis.model = new ExplorerModel(this.contextService, this.uriIdentityService, this.fileService, this.configurationService, this.filesConfigurationService);\n\t\tthis.disposables.add(this.model);\n\t\tthis.disposables.add(this.fileService.onDidRunOperation(e => this.onDidRunOperation(e)));\n\n\t\tthis.onFileChangesScheduler = new RunOnceScheduler(async () => {\n\t\t\tconst events = this.fileChangeEvents;\n\t\t\tthis.fileChangeEvents = [];\n\n\t\t\t// Filter to the ones we care\n\t\t\tconst types = [FileChangeType.DELETED];\n\t\t\tif (this.config.sortOrder === SortOrder.Modified) {\n\t\t\t\ttypes.push(FileChangeType.UPDATED);\n\t\t\t}\n\n\t\t\tlet shouldRefresh = false;\n\t\t\t// For DELETED and UPDATED events go through the explorer model and check if any of the items got affected\n\t\t\tthis.roots.forEach(r => {\n\t\t\t\tif (this.view && !shouldRefresh) {\n\t\t\t\t\tshouldRefresh = doesFileEventAffect(r, this.view, events, types);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// For ADDED events we need to go through all the events and check if the explorer is already aware of some of them\n\t\t\t// Or if they affect not yet resolved parts of the explorer. If that is the case we will not refresh.\n\t\t\tevents.forEach(e => {\n\t\t\t\tif (!shouldRefresh) {\n\t\t\t\t\tfor (const resource of e.rawAdded) {\n\t\t\t\t\t\tconst parent = this.model.findClosest(dirname(resource));\n\t\t\t\t\t\t// Parent of the added resource is resolved and the explorer model is not aware of the added resource - we need to refresh\n\t\t\t\t\t\tif (parent && !parent.getChild(basename(resource))) {\n\t\t\t\t\t\t\tshouldRefresh = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (shouldRefresh) {\n\t\t\t\tawait this.refresh(false);\n\t\t\t}\n\n\t\t}, ExplorerService.EXPLORER_FILE_CHANGES_REACT_DELAY);\n\n\t\tthis.disposables.add(this.fileService.onDidFilesChange(e => {\n\t\t\tthis.fileChangeEvents.push(e);\n\t\t\t// Don't mess with the file tree while in the process of editing. #112293\n\t\t\tif (this.editable) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.onFileChangesScheduler.isScheduled()) {\n\t\t\t\tthis.onFileChangesScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis.disposables.add(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\t\tthis.disposables.add(Event.any<{ scheme: string }>(this.fileService.onDidChangeFileSystemProviderRegistrations, this.fileService.onDidChangeFileSystemProviderCapabilities)(async e => {\n\t\t\tlet affected = false;\n\t\t\tthis.model.roots.forEach(r => {\n\t\t\t\tif (r.resource.scheme === e.scheme) {\n\t\t\t\t\taffected = true;\n\t\t\t\t\tr.forgetChildren();\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (affected) {\n\t\t\t\tif (this.view) {\n\t\t\t\t\tawait this.view.setTreeInput();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis.disposables.add(this.model.onDidChangeRoots(() => {\n\t\t\tthis.view?.setTreeInput();\n\t\t}));\n\n\t\t// Refresh explorer when window gets focus to compensate for missing file events #126817\n\t\tthis.disposables.add(hostService.onDidChangeFocus(hasFocus => {\n\t\t\tif (hasFocus) {\n\t\t\t\tthis.refresh(false);\n\t\t\t}\n\t\t}));\n\t\tthis.revealExcludeMatcher = new ResourceGlobMatcher(\n\t\t\t(uri) => getRevealExcludes(configurationService.getValue<IFilesConfiguration>({ resource: uri })),\n\t\t\t(event) => event.affectsConfiguration('explorer.autoRevealExclude'),\n\t\t\tcontextService, configurationService);\n\t\tthis.disposables.add(this.revealExcludeMatcher);\n\t}\n\n\tget roots(): ExplorerItem[] {\n\t\treturn this.model.roots;\n\t}\n\n\tget sortOrderConfiguration(): ISortOrderConfiguration {\n\t\treturn {\n\t\t\tsortOrder: this.config.sortOrder,\n\t\t\tlexicographicOptions: this.config.sortOrderLexicographicOptions,\n\t\t\treverse: this.config.sortOrderReverse,\n\t\t};\n\t}\n\n\tregisterView(contextProvider: IExplorerView): void {\n\t\tthis.view = contextProvider;\n\t}\n\n\tgetContext(respectMultiSelection: boolean, ignoreNestedChildren: boolean = false): ExplorerItem[] {\n\t\tif (!this.view) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst items = new Set<ExplorerItem>(this.view.getContext(respectMultiSelection));\n\t\titems.forEach(item => {\n\t\t\ttry {\n\t\t\t\tif (respectMultiSelection && !ignoreNestedChildren && this.view?.isItemCollapsed(item) && item.nestedChildren) {\n\t\t\t\t\tfor (const child of item.nestedChildren) {\n\t\t\t\t\t\titems.add(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// We will error out trying to resolve collapsed nodes that have not yet been resolved.\n\t\t\t\t// So we catch and ignore them in the multiSelect context\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t\treturn [...items];\n\t}\n\n\tasync applyBulkEdit(edit: ResourceFileEdit[], options: { undoLabel: string; progressLabel: string; confirmBeforeUndo?: boolean; progressLocation?: ProgressLocation.Explorer | ProgressLocation.Window }): Promise<void> {\n\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\tconst location = options.progressLocation ?? ProgressLocation.Window;\n\t\tlet progressOptions;\n\t\tif (location === ProgressLocation.Window) {\n\t\t\tprogressOptions = {\n\t\t\t\tlocation: location,\n\t\t\t\ttitle: options.progressLabel,\n\t\t\t\tcancellable: edit.length > 1,\n\t\t\t} satisfies IProgressOptions;\n\t\t} else {\n\t\t\tprogressOptions = {\n\t\t\t\tlocation: location,\n\t\t\t\ttitle: options.progressLabel,\n\t\t\t\tcancellable: edit.length > 1,\n\t\t\t\tdelay: 500,\n\t\t\t} satisfies IProgressCompositeOptions;\n\t\t}\n\t\tconst promise = this.progressService.withProgress(progressOptions, async progress => {\n\t\t\tawait this.bulkEditService.apply(edit, {\n\t\t\t\tundoRedoSource: UNDO_REDO_SOURCE,\n\t\t\t\tlabel: options.undoLabel,\n\t\t\t\tcode: 'undoredo.explorerOperation',\n\t\t\t\tprogress,\n\t\t\t\ttoken: cancellationTokenSource.token,\n\t\t\t\tconfirmBeforeUndo: options.confirmBeforeUndo\n\t\t\t});\n\t\t}, () => cancellationTokenSource.cancel());\n\t\tawait this.progressService.withProgress({ location: ProgressLocation.Explorer, delay: 500 }, () => promise);\n\t\tcancellationTokenSource.dispose();\n\t}\n\n\thasViewFocus(): boolean {\n\t\treturn !!this.view && this.view.hasFocus();\n\t}\n\n\t// IExplorerService methods\n\n\tfindClosest(resource: URI): ExplorerItem | null {\n\t\treturn this.model.findClosest(resource);\n\t}\n\n\tfindClosestRoot(resource: URI): ExplorerItem | null {\n\t\tconst parentRoots = this.model.roots.filter(r => this.uriIdentityService.extUri.isEqualOrParent(resource, r.resource))\n\t\t\t.sort((first, second) => second.resource.path.length - first.resource.path.length);\n\t\treturn parentRoots.length ? parentRoots[0] : null;\n\t}\n\n\tasync setEditable(stat: ExplorerItem, data: IEditableData | null): Promise<void> {\n\t\tif (!this.view) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data) {\n\t\t\tthis.editable = undefined;\n\t\t} else {\n\t\t\tthis.editable = { stat, data };\n\t\t}\n\t\tconst isEditing = this.isEditable(stat);\n\t\ttry {\n\t\t\tawait this.view.setEditable(stat, isEditing);\n\t\t} catch {\n\t\t\tconst parent = stat.parent;\n\t\t\ttype ExplorerViewEditableErrorData = {\n\t\t\t\tparentIsDirectory: boolean | undefined;\n\t\t\t\tisDirectory: boolean | undefined;\n\t\t\t\tisReadonly: boolean | undefined;\n\t\t\t\tparentIsReadonly: boolean | undefined;\n\t\t\t\tparentIsExcluded: boolean | undefined;\n\t\t\t\tisExcluded: boolean | undefined;\n\t\t\t\tparentIsRoot: boolean | undefined;\n\t\t\t\tisRoot: boolean | undefined;\n\t\t\t\tparentHasNests: boolean | undefined;\n\t\t\t\thasNests: boolean | undefined;\n\t\t\t};\n\t\t\ttype ExplorerViewEditableErrorClassification = {\n\t\t\t\towner: 'lramos15';\n\t\t\t\tcomment: 'Helps gain a broard understanding of why users are unable to edit files in the explorer';\n\t\t\t\tparentIsDirectory: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the parent of the editable element is a directory' };\n\t\t\t\tisDirectory: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the editable element is a directory' };\n\t\t\t\tisReadonly: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the editable element is readonly' };\n\t\t\t\tparentIsReadonly: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the parent of the editable element is readonly' };\n\t\t\t\tparentIsExcluded: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the parent of the editable element is excluded from being shown in the explorer' };\n\t\t\t\tisExcluded: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the editable element is excluded from being shown in the explorer' };\n\t\t\t\tparentIsRoot: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the parent of the editable element is a root' };\n\t\t\t\tisRoot: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the editable element is a root' };\n\t\t\t\tparentHasNests: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the parent of the editable element has nested children' };\n\t\t\t\thasNests: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the editable element has nested children' };\n\t\t\t};\n\t\t\tconst errorData = {\n\t\t\t\tparentIsDirectory: parent?.isDirectory,\n\t\t\t\tisDirectory: stat.isDirectory,\n\t\t\t\tisReadonly: !!stat.isReadonly,\n\t\t\t\tparentIsReadonly: !!parent?.isReadonly,\n\t\t\t\tparentIsExcluded: parent?.isExcluded,\n\t\t\t\tisExcluded: stat.isExcluded,\n\t\t\t\tparentIsRoot: parent?.isRoot,\n\t\t\t\tisRoot: stat.isRoot,\n\t\t\t\tparentHasNests: parent?.hasNests,\n\t\t\t\thasNests: stat.hasNests,\n\t\t\t};\n\t\t\tthis.telemetryService.publicLogError2<ExplorerViewEditableErrorData, ExplorerViewEditableErrorClassification>('explorerView.setEditableError', errorData);\n\t\t\treturn;\n\t\t}\n\n\n\t\tif (!this.editable && this.fileChangeEvents.length && !this.onFileChangesScheduler.isScheduled()) {\n\t\t\tthis.onFileChangesScheduler.schedule();\n\t\t}\n\t}\n\n\tasync setToCopy(items: ExplorerItem[], cut: boolean): Promise<void> {\n\t\tconst previouslyCutItems = this.cutItems;\n\t\tthis.cutItems = cut ? items : undefined;\n\t\tawait this.clipboardService.writeResources(items.map(s => s.resource));\n\n\t\tthis.view?.itemsCopied(items, cut, previouslyCutItems);\n\t}\n\n\tisCut(item: ExplorerItem): boolean {\n\t\treturn !!this.cutItems && this.cutItems.some(i => this.uriIdentityService.extUri.isEqual(i.resource, item.resource));\n\t}\n\n\tgetEditable(): { stat: ExplorerItem; data: IEditableData } | undefined {\n\t\treturn this.editable;\n\t}\n\n\tgetEditableData(stat: ExplorerItem): IEditableData | undefined {\n\t\treturn this.editable && this.editable.stat === stat ? this.editable.data : undefined;\n\t}\n\n\tisEditable(stat: ExplorerItem | undefined): boolean {\n\t\treturn !!this.editable && (this.editable.stat === stat || !stat);\n\t}\n\n\tasync select(resource: URI, reveal?: boolean | string): Promise<void> {\n\t\tif (!this.view) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If file or parent matches exclude patterns, do not reveal unless reveal argument is 'force'\n\t\tconst ignoreRevealExcludes = reveal === 'force';\n\n\t\tconst fileStat = this.findClosest(resource);\n\t\tif (fileStat) {\n\t\t\tif (!this.shouldAutoRevealItem(fileStat, ignoreRevealExcludes)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.view.selectResource(fileStat.resource, reveal);\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Stat needs to be resolved first and then revealed\n\t\tconst options: IResolveFileOptions = { resolveTo: [resource], resolveMetadata: this.config.sortOrder === SortOrder.Modified };\n\t\tconst root = this.findClosestRoot(resource);\n\t\tif (!root) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\ttry {\n\t\t\tconst stat = await this.fileService.resolve(root.resource, options);\n\n\t\t\t// Convert to model\n\t\t\tconst modelStat = ExplorerItem.create(this.fileService, this.configurationService, this.filesConfigurationService, stat, undefined, options.resolveTo);\n\t\t\t// Update Input with disk Stat\n\t\t\tExplorerItem.mergeLocalWithDisk(modelStat, root);\n\t\t\tconst item = root.find(resource);\n\t\t\tawait this.view.refresh(true, root);\n\n\t\t\t// Once item is resolved, check again if folder should be expanded\n\t\t\tif (item && !this.shouldAutoRevealItem(item, ignoreRevealExcludes)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.view.selectResource(item ? item.resource : undefined, reveal);\n\t\t} catch (error) {\n\t\t\troot.error = error;\n\t\t\tawait this.view.refresh(false, root);\n\t\t}\n\t}\n\n\tasync refresh(reveal = true): Promise<void> {\n\t\tthis.model.roots.forEach(r => r.forgetChildren());\n\t\tif (this.view) {\n\t\t\tawait this.view.refresh(true);\n\t\t\tconst resource = this.editorService.activeEditor?.resource;\n\t\t\tconst autoReveal = this.configurationService.getValue<IFilesConfiguration>().explorer.autoReveal;\n\n\t\t\tif (reveal && resource && autoReveal) {\n\t\t\t\t// We did a top level refresh, reveal the active file #67118\n\t\t\t\tthis.select(resource, autoReveal);\n\t\t\t}\n\t\t}\n\t}\n\n\t// File events\n\n\tprivate async onDidRunOperation(e: FileOperationEvent): Promise<void> {\n\t\t// When nesting, changes to one file in a folder may impact the rendered structure\n\t\t// of all the folder's immediate children, thus a recursive refresh is needed.\n\t\t// Ideally the tree would be able to recusively refresh just one level but that does not yet exist.\n\t\tconst shouldDeepRefresh = this.config.fileNesting.enabled;\n\n\t\t// Add\n\t\tif (e.isOperation(FileOperation.CREATE) || e.isOperation(FileOperation.COPY)) {\n\t\t\tconst addedElement = e.target;\n\t\t\tconst parentResource = dirname(addedElement.resource)!;\n\t\t\tconst parents = this.model.findAll(parentResource);\n\n\t\t\tif (parents.length) {\n\n\t\t\t\t// Add the new file to its parent (Model)\n\t\t\t\tawait Promise.all(parents.map(async p => {\n\t\t\t\t\t// We have to check if the parent is resolved #29177\n\t\t\t\t\tconst resolveMetadata = this.config.sortOrder === `modified`;\n\t\t\t\t\tif (!p.isDirectoryResolved) {\n\t\t\t\t\t\tconst stat = await this.fileService.resolve(p.resource, { resolveMetadata });\n\t\t\t\t\t\tif (stat) {\n\t\t\t\t\t\t\tconst modelStat = ExplorerItem.create(this.fileService, this.configurationService, this.filesConfigurationService, stat, p.parent);\n\t\t\t\t\t\t\tExplorerItem.mergeLocalWithDisk(modelStat, p);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst childElement = ExplorerItem.create(this.fileService, this.configurationService, this.filesConfigurationService, addedElement, p.parent);\n\t\t\t\t\t// Make sure to remove any previous version of the file if any\n\t\t\t\t\tp.removeChild(childElement);\n\t\t\t\t\tp.addChild(childElement);\n\t\t\t\t\t// Refresh the Parent (View)\n\t\t\t\t\tawait this.view?.refresh(shouldDeepRefresh, p);\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\t// Move (including Rename)\n\t\telse if (e.isOperation(FileOperation.MOVE)) {\n\t\t\tconst oldResource = e.resource;\n\t\t\tconst newElement = e.target;\n\t\t\tconst oldParentResource = dirname(oldResource);\n\t\t\tconst newParentResource = dirname(newElement.resource);\n\t\t\tconst modelElements = this.model.findAll(oldResource);\n\t\t\tconst sameParentMove = modelElements.every(e => !e.nestedParent) && this.uriIdentityService.extUri.isEqual(oldParentResource, newParentResource);\n\n\t\t\t// Handle Rename\n\t\t\tif (sameParentMove) {\n\t\t\t\tawait Promise.all(modelElements.map(async modelElement => {\n\t\t\t\t\t// Rename File (Model)\n\t\t\t\t\tmodelElement.rename(newElement);\n\t\t\t\t\tawait this.view?.refresh(shouldDeepRefresh, modelElement.parent);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Handle Move\n\t\t\telse {\n\t\t\t\tconst newParents = this.model.findAll(newParentResource);\n\t\t\t\tif (newParents.length && modelElements.length) {\n\t\t\t\t\t// Move in Model\n\t\t\t\t\tawait Promise.all(modelElements.map(async (modelElement, index) => {\n\t\t\t\t\t\tconst oldParent = modelElement.parent;\n\t\t\t\t\t\tconst oldNestedParent = modelElement.nestedParent;\n\t\t\t\t\t\tmodelElement.move(newParents[index]);\n\t\t\t\t\t\tif (oldNestedParent) {\n\t\t\t\t\t\t\tawait this.view?.refresh(false, oldNestedParent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait this.view?.refresh(false, oldParent);\n\t\t\t\t\t\tawait this.view?.refresh(shouldDeepRefresh, newParents[index]);\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delete\n\t\telse if (e.isOperation(FileOperation.DELETE)) {\n\t\t\tconst modelElements = this.model.findAll(e.resource);\n\t\t\tawait Promise.all(modelElements.map(async modelElement => {\n\t\t\t\tif (modelElement.parent) {\n\t\t\t\t\t// Remove Element from Parent (Model)\n\t\t\t\t\tconst parent = modelElement.parent;\n\t\t\t\t\tparent.removeChild(modelElement);\n\t\t\t\t\tthis.view?.focusNext();\n\n\t\t\t\t\tconst oldNestedParent = modelElement.nestedParent;\n\t\t\t\t\tif (oldNestedParent) {\n\t\t\t\t\t\toldNestedParent.removeChild(modelElement);\n\t\t\t\t\t\tawait this.view?.refresh(false, oldNestedParent);\n\t\t\t\t\t}\n\t\t\t\t\t// Refresh Parent (View)\n\t\t\t\t\tawait this.view?.refresh(shouldDeepRefresh, parent);\n\n\t\t\t\t\tif (this.view?.getFocus().length === 0) {\n\t\t\t\t\t\tthis.view?.focusLast();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\t// Check if an item matches a explorer.autoRevealExclude pattern\n\tprivate shouldAutoRevealItem(item: ExplorerItem | undefined, ignore: boolean): boolean {\n\t\tif (item === undefined || ignore) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.revealExcludeMatcher.matches(item.resource, name => !!(item.parent && item.parent.getChild(name)))) {\n\t\t\treturn false;\n\t\t}\n\t\tconst root = item.root;\n\t\tlet currentItem = item.parent;\n\t\twhile (currentItem !== root) {\n\t\t\tif (currentItem === undefined) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this.revealExcludeMatcher.matches(currentItem.resource)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcurrentItem = currentItem.parent;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async onConfigurationUpdated(event: IConfigurationChangeEvent): Promise<void> {\n\t\tif (!event.affectsConfiguration('explorer')) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet shouldRefresh = false;\n\n\t\tif (event.affectsConfiguration('explorer.fileNesting')) {\n\t\t\tshouldRefresh = true;\n\t\t}\n\n\t\tconst configuration = this.configurationService.getValue<IFilesConfiguration>();\n\n\t\tconst configSortOrder = configuration?.explorer?.sortOrder || SortOrder.Default;\n\t\tif (this.config.sortOrder !== configSortOrder) {\n\t\t\tshouldRefresh = this.config.sortOrder !== undefined;\n\t\t}\n\n\t\tconst configLexicographicOptions = configuration?.explorer?.sortOrderLexicographicOptions || LexicographicOptions.Default;\n\t\tif (this.config.sortOrderLexicographicOptions !== configLexicographicOptions) {\n\t\t\tshouldRefresh = shouldRefresh || this.config.sortOrderLexicographicOptions !== undefined;\n\t\t}\n\t\tconst sortOrderReverse = configuration?.explorer?.sortOrderReverse || false;\n\n\t\tif (this.config.sortOrderReverse !== sortOrderReverse) {\n\t\t\tshouldRefresh = shouldRefresh || this.config.sortOrderReverse !== undefined;\n\t\t}\n\n\t\tthis.config = configuration.explorer;\n\n\t\tif (shouldRefresh) {\n\t\t\tawait this.refresh();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nfunction doesFileEventAffect(item: ExplorerItem, view: IExplorerView, events: FileChangesEvent[], types: FileChangeType[]): boolean {\n\tfor (const [_name, child] of item.children) {\n\t\tif (view.isItemVisible(child)) {\n\t\t\tif (events.some(e => e.contains(child.resource, ...types))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (child.isDirectory && child.isDirectoryResolved) {\n\t\t\t\tif (doesFileEventAffect(child, view, events, types)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction getRevealExcludes(configuration: IFilesConfiguration): IExpression {\n\tconst revealExcludes = configuration && configuration.explorer && configuration.explorer.autoRevealExclude;\n\n\tif (!revealExcludes) {\n\t\treturn {};\n\t}\n\n\treturn revealExcludes;\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
