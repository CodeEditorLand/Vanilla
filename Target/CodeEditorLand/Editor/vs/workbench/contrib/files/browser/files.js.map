{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/files.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isActiveElement } from \"../../../../base/browser/dom.js\";\nimport { List } from \"../../../../base/browser/ui/list/listWidget.js\";\nimport { AsyncDataTree } from \"../../../../base/browser/ui/tree/asyncDataTree.js\";\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type { ResourceFileEdit } from \"../../../../editor/browser/services/bulkEditService.js\";\nimport {\n\ttype ServicesAccessor,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IListService } from \"../../../../platform/list/browser/listService.js\";\nimport type { ProgressLocation } from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tEditorResourceAccessor,\n\ttype IEditorIdentifier,\n\tSideBySideEditor,\n} from \"../../../common/editor.js\";\nimport type { IEditableData } from \"../../../common/views.js\";\nimport type { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport type { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { ExplorerItem } from \"../common/explorerModel.js\";\nimport { type ISortOrderConfiguration, OpenEditor } from \"../common/files.js\";\n\nexport interface IExplorerService {\n\treadonly _serviceBrand: undefined;\n\treadonly roots: ExplorerItem[];\n\treadonly sortOrderConfiguration: ISortOrderConfiguration;\n\n\tgetContext(\n\t\trespectMultiSelection: boolean,\n\t\tignoreNestedChildren?: boolean,\n\t): ExplorerItem[];\n\thasViewFocus(): boolean;\n\tsetEditable(stat: ExplorerItem, data: IEditableData | null): Promise<void>;\n\tgetEditable(): { stat: ExplorerItem; data: IEditableData } | undefined;\n\tgetEditableData(stat: ExplorerItem): IEditableData | undefined;\n\t// If undefined is passed checks if any element is currently being edited.\n\tisEditable(stat: ExplorerItem | undefined): boolean;\n\tfindClosest(resource: URI): ExplorerItem | null;\n\tfindClosestRoot(resource: URI): ExplorerItem | null;\n\trefresh(): Promise<void>;\n\tsetToCopy(stats: ExplorerItem[], cut: boolean): Promise<void>;\n\tisCut(stat: ExplorerItem): boolean;\n\tapplyBulkEdit(\n\t\tedit: ResourceFileEdit[],\n\t\toptions: {\n\t\t\tundoLabel: string;\n\t\t\tprogressLabel: string;\n\t\t\tconfirmBeforeUndo?: boolean;\n\t\t\tprogressLocation?:\n\t\t\t\t| ProgressLocation.Explorer\n\t\t\t\t| ProgressLocation.Window;\n\t\t},\n\t): Promise<void>;\n\n\t/**\n\t * Selects and reveal the file element provided by the given resource if its found in the explorer.\n\t * Will try to resolve the path in case the explorer is not yet expanded to the file yet.\n\t */\n\tselect(resource: URI, reveal?: boolean | string): Promise<void>;\n\n\tregisterView(contextAndRefreshProvider: IExplorerView): void;\n}\n\nexport const IExplorerService =\n\tcreateDecorator<IExplorerService>(\"explorerService\");\n\nexport interface IExplorerView {\n\tautoReveal: boolean | \"force\" | \"focusNoScroll\";\n\tgetContext(respectMultiSelection: boolean): ExplorerItem[];\n\trefresh(\n\t\trecursive: boolean,\n\t\titem?: ExplorerItem,\n\t\tcancelEditing?: boolean,\n\t): Promise<void>;\n\tselectResource(\n\t\tresource: URI | undefined,\n\t\treveal?: boolean | string,\n\t\tretry?: number,\n\t): Promise<void>;\n\tsetTreeInput(): Promise<void>;\n\titemsCopied(\n\t\ttats: ExplorerItem[],\n\t\tcut: boolean,\n\t\tpreviousCut: ExplorerItem[] | undefined,\n\t): void;\n\tsetEditable(stat: ExplorerItem, isEditing: boolean): Promise<void>;\n\tisItemVisible(item: ExplorerItem): boolean;\n\tisItemCollapsed(item: ExplorerItem): boolean;\n\thasFocus(): boolean;\n\tgetFocus(): ExplorerItem[];\n\tfocusNext(): void;\n\tfocusLast(): void;\n}\n\nfunction getFocus(listService: IListService): unknown | undefined {\n\tconst list = listService.lastFocusedList;\n\tconst element = list?.getHTMLElement();\n\tif (element && isActiveElement(element)) {\n\t\tlet focus: unknown;\n\t\tif (list instanceof List) {\n\t\t\tconst focused = list.getFocusedElements();\n\t\t\tif (focused.length) {\n\t\t\t\tfocus = focused[0];\n\t\t\t}\n\t\t} else if (list instanceof AsyncDataTree) {\n\t\t\tconst focused = list.getFocus();\n\t\t\tif (focused.length) {\n\t\t\t\tfocus = focused[0];\n\t\t\t}\n\t\t}\n\n\t\treturn focus;\n\t}\n\n\treturn undefined;\n}\n\n// Commands can get executed from a command palette, from a context menu or from some list using a keybinding\n// To cover all these cases we need to properly compute the resource on which the command is being executed\nexport function getResourceForCommand(\n\tcommandArg: unknown,\n\teditorService: IEditorService,\n\tlistService: IListService,\n): URI | undefined {\n\tif (URI.isUri(commandArg)) {\n\t\treturn commandArg;\n\t}\n\n\tconst focus = getFocus(listService);\n\tif (focus instanceof ExplorerItem) {\n\t\treturn focus.resource;\n\t} else if (focus instanceof OpenEditor) {\n\t\treturn focus.getResource();\n\t}\n\n\treturn EditorResourceAccessor.getOriginalUri(editorService.activeEditor, {\n\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t});\n}\n\nexport function getMultiSelectedResources(\n\tcommandArg: unknown,\n\tlistService: IListService,\n\teditorSerice: IEditorService,\n\teditorGroupService: IEditorGroupsService,\n\texplorerService: IExplorerService,\n): Array<URI> {\n\tconst list = listService.lastFocusedList;\n\tconst element = list?.getHTMLElement();\n\tif (element && isActiveElement(element)) {\n\t\t// Explorer\n\t\tif (\n\t\t\tlist instanceof AsyncDataTree &&\n\t\t\tlist.getFocus().every((item) => item instanceof ExplorerItem)\n\t\t) {\n\t\t\t// Explorer\n\t\t\tconst context = explorerService.getContext(true, true);\n\t\t\tif (context.length) {\n\t\t\t\treturn context.map((c) => c.resource);\n\t\t\t}\n\t\t}\n\n\t\t// Open editors view\n\t\tif (list instanceof List) {\n\t\t\tconst selection = coalesce(\n\t\t\t\tlist\n\t\t\t\t\t.getSelectedElements()\n\t\t\t\t\t.filter((s) => s instanceof OpenEditor)\n\t\t\t\t\t.map((oe: OpenEditor) => oe.getResource()),\n\t\t\t);\n\t\t\tconst focusedElements = list.getFocusedElements();\n\t\t\tconst focus = focusedElements.length\n\t\t\t\t? focusedElements[0]\n\t\t\t\t: undefined;\n\t\t\tlet mainUriStr: string | undefined;\n\t\t\tif (URI.isUri(commandArg)) {\n\t\t\t\tmainUriStr = commandArg.toString();\n\t\t\t} else if (focus instanceof OpenEditor) {\n\t\t\t\tconst focusedResource = focus.getResource();\n\t\t\t\tmainUriStr = focusedResource\n\t\t\t\t\t? focusedResource.toString()\n\t\t\t\t\t: undefined;\n\t\t\t}\n\t\t\t// We only respect the selection if it contains the main element.\n\t\t\tconst mainIndex = selection.findIndex(\n\t\t\t\t(s) => s.toString() === mainUriStr,\n\t\t\t);\n\t\t\tif (mainIndex !== -1) {\n\t\t\t\t// Move the main resource to the front of the selection.\n\t\t\t\tconst mainResource = selection[mainIndex];\n\t\t\t\tselection.splice(mainIndex, 1);\n\t\t\t\tselection.unshift(mainResource);\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check for tabs multiselect\n\tconst activeGroup = editorGroupService.activeGroup;\n\tconst selection = activeGroup.selectedEditors;\n\tif (selection.length > 1 && URI.isUri(commandArg)) {\n\t\t// If the resource is part of the tabs selection, return all selected tabs/resources.\n\t\t// It's possible that multiple tabs are selected but the action was applied to a resource that is not part of the selection.\n\t\tconst mainEditorSelectionIndex = selection.findIndex((e) =>\n\t\t\te.matches({ resource: commandArg }),\n\t\t);\n\t\tif (mainEditorSelectionIndex !== -1) {\n\t\t\tconst mainEditor = selection[mainEditorSelectionIndex];\n\t\t\tselection.splice(mainEditorSelectionIndex, 1);\n\t\t\tselection.unshift(mainEditor);\n\t\t\treturn selection\n\t\t\t\t.map((editor) => EditorResourceAccessor.getOriginalUri(editor))\n\t\t\t\t.filter((uri) => !!uri);\n\t\t}\n\t}\n\n\tconst result = getResourceForCommand(commandArg, editorSerice, listService);\n\treturn !!result ? [result] : [];\n}\n\nexport function getOpenEditorsViewMultiSelection(\n\taccessor: ServicesAccessor,\n): Array<IEditorIdentifier> | undefined {\n\tconst list = accessor.get(IListService).lastFocusedList;\n\tconst element = list?.getHTMLElement();\n\tif (element && isActiveElement(element)) {\n\t\t// Open editors view\n\t\tif (list instanceof List) {\n\t\t\tconst selection = coalesce(\n\t\t\t\tlist\n\t\t\t\t\t.getSelectedElements()\n\t\t\t\t\t.filter((s) => s instanceof OpenEditor),\n\t\t\t);\n\t\t\tconst focusedElements = list.getFocusedElements();\n\t\t\tconst focus = focusedElements.length\n\t\t\t\t? focusedElements[0]\n\t\t\t\t: undefined;\n\t\t\tlet mainEditor: IEditorIdentifier | undefined;\n\t\t\tif (focus instanceof OpenEditor) {\n\t\t\t\tmainEditor = focus;\n\t\t\t}\n\t\t\t// We only respect the selection if it contains the main element.\n\t\t\tif (selection.some((s) => s === mainEditor)) {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t\treturn mainEditor ? [mainEditor] : undefined;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],
  "mappings": "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",
  "names": ["selection"]
}
