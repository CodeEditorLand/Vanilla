{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/files/browser/files.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { IListService } from '../../../../platform/list/browser/listService.js';\nimport { OpenEditor, ISortOrderConfiguration } from '../common/files.js';\nimport { EditorResourceAccessor, SideBySideEditor, IEditorIdentifier } from '../../../common/editor.js';\nimport { List } from '../../../../base/browser/ui/list/listWidget.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ExplorerItem } from '../common/explorerModel.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { AsyncDataTree } from '../../../../base/browser/ui/tree/asyncDataTree.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IEditableData } from '../../../common/views.js';\nimport { createDecorator, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ResourceFileEdit } from '../../../../editor/browser/services/bulkEditService.js';\nimport { ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { isActiveElement } from '../../../../base/browser/dom.js';\n\nexport interface IExplorerService {\n\treadonly _serviceBrand: undefined;\n\treadonly roots: ExplorerItem[];\n\treadonly sortOrderConfiguration: ISortOrderConfiguration;\n\n\tgetContext(respectMultiSelection: boolean, ignoreNestedChildren?: boolean): ExplorerItem[];\n\thasViewFocus(): boolean;\n\tsetEditable(stat: ExplorerItem, data: IEditableData | null): Promise<void>;\n\tgetEditable(): { stat: ExplorerItem; data: IEditableData } | undefined;\n\tgetEditableData(stat: ExplorerItem): IEditableData | undefined;\n\t// If undefined is passed checks if any element is currently being edited.\n\tisEditable(stat: ExplorerItem | undefined): boolean;\n\tfindClosest(resource: URI): ExplorerItem | null;\n\tfindClosestRoot(resource: URI): ExplorerItem | null;\n\trefresh(): Promise<void>;\n\tsetToCopy(stats: ExplorerItem[], cut: boolean): Promise<void>;\n\tisCut(stat: ExplorerItem): boolean;\n\tapplyBulkEdit(edit: ResourceFileEdit[], options: { undoLabel: string; progressLabel: string; confirmBeforeUndo?: boolean; progressLocation?: ProgressLocation.Explorer | ProgressLocation.Window }): Promise<void>;\n\n\t/**\n\t * Selects and reveal the file element provided by the given resource if its found in the explorer.\n\t * Will try to resolve the path in case the explorer is not yet expanded to the file yet.\n\t */\n\tselect(resource: URI, reveal?: boolean | string): Promise<void>;\n\n\tregisterView(contextAndRefreshProvider: IExplorerView): void;\n}\n\nexport const IExplorerService = createDecorator<IExplorerService>('explorerService');\n\nexport interface IExplorerView {\n\tautoReveal: boolean | 'force' | 'focusNoScroll';\n\tgetContext(respectMultiSelection: boolean): ExplorerItem[];\n\trefresh(recursive: boolean, item?: ExplorerItem, cancelEditing?: boolean): Promise<void>;\n\tselectResource(resource: URI | undefined, reveal?: boolean | string, retry?: number): Promise<void>;\n\tsetTreeInput(): Promise<void>;\n\titemsCopied(tats: ExplorerItem[], cut: boolean, previousCut: ExplorerItem[] | undefined): void;\n\tsetEditable(stat: ExplorerItem, isEditing: boolean): Promise<void>;\n\tisItemVisible(item: ExplorerItem): boolean;\n\tisItemCollapsed(item: ExplorerItem): boolean;\n\thasFocus(): boolean;\n\tgetFocus(): ExplorerItem[];\n\tfocusNext(): void;\n\tfocusLast(): void;\n}\n\nfunction getFocus(listService: IListService): unknown | undefined {\n\tconst list = listService.lastFocusedList;\n\tconst element = list?.getHTMLElement();\n\tif (element && isActiveElement(element)) {\n\t\tlet focus: unknown;\n\t\tif (list instanceof List) {\n\t\t\tconst focused = list.getFocusedElements();\n\t\t\tif (focused.length) {\n\t\t\t\tfocus = focused[0];\n\t\t\t}\n\t\t} else if (list instanceof AsyncDataTree) {\n\t\t\tconst focused = list.getFocus();\n\t\t\tif (focused.length) {\n\t\t\t\tfocus = focused[0];\n\t\t\t}\n\t\t}\n\n\t\treturn focus;\n\t}\n\n\treturn undefined;\n}\n\n// Commands can get executed from a command palette, from a context menu or from some list using a keybinding\n// To cover all these cases we need to properly compute the resource on which the command is being executed\nexport function getResourceForCommand(commandArg: unknown, editorService: IEditorService, listService: IListService): URI | undefined {\n\tif (URI.isUri(commandArg)) {\n\t\treturn commandArg;\n\t}\n\n\tconst focus = getFocus(listService);\n\tif (focus instanceof ExplorerItem) {\n\t\treturn focus.resource;\n\t} else if (focus instanceof OpenEditor) {\n\t\treturn focus.getResource();\n\t}\n\n\treturn EditorResourceAccessor.getOriginalUri(editorService.activeEditor, { supportSideBySide: SideBySideEditor.PRIMARY });\n}\n\nexport function getMultiSelectedResources(commandArg: unknown, listService: IListService, editorSerice: IEditorService, editorGroupService: IEditorGroupsService, explorerService: IExplorerService): Array<URI> {\n\tconst list = listService.lastFocusedList;\n\tconst element = list?.getHTMLElement();\n\tif (element && isActiveElement(element)) {\n\t\t// Explorer\n\t\tif (list instanceof AsyncDataTree && list.getFocus().every(item => item instanceof ExplorerItem)) {\n\t\t\t// Explorer\n\t\t\tconst context = explorerService.getContext(true, true);\n\t\t\tif (context.length) {\n\t\t\t\treturn context.map(c => c.resource);\n\t\t\t}\n\t\t}\n\n\t\t// Open editors view\n\t\tif (list instanceof List) {\n\t\t\tconst selection = coalesce(list.getSelectedElements().filter(s => s instanceof OpenEditor).map((oe: OpenEditor) => oe.getResource()));\n\t\t\tconst focusedElements = list.getFocusedElements();\n\t\t\tconst focus = focusedElements.length ? focusedElements[0] : undefined;\n\t\t\tlet mainUriStr: string | undefined = undefined;\n\t\t\tif (URI.isUri(commandArg)) {\n\t\t\t\tmainUriStr = commandArg.toString();\n\t\t\t} else if (focus instanceof OpenEditor) {\n\t\t\t\tconst focusedResource = focus.getResource();\n\t\t\t\tmainUriStr = focusedResource ? focusedResource.toString() : undefined;\n\t\t\t}\n\t\t\t// We only respect the selection if it contains the main element.\n\t\t\tconst mainIndex = selection.findIndex(s => s.toString() === mainUriStr);\n\t\t\tif (mainIndex !== -1) {\n\t\t\t\t// Move the main resource to the front of the selection.\n\t\t\t\tconst mainResource = selection[mainIndex];\n\t\t\t\tselection.splice(mainIndex, 1);\n\t\t\t\tselection.unshift(mainResource);\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check for tabs multiselect\n\tconst activeGroup = editorGroupService.activeGroup;\n\tconst selection = activeGroup.selectedEditors;\n\tif (selection.length > 1 && URI.isUri(commandArg)) {\n\t\t// If the resource is part of the tabs selection, return all selected tabs/resources.\n\t\t// It's possible that multiple tabs are selected but the action was applied to a resource that is not part of the selection.\n\t\tconst mainEditorSelectionIndex = selection.findIndex(e => e.matches({ resource: commandArg }));\n\t\tif (mainEditorSelectionIndex !== -1) {\n\t\t\tconst mainEditor = selection[mainEditorSelectionIndex];\n\t\t\tselection.splice(mainEditorSelectionIndex, 1);\n\t\t\tselection.unshift(mainEditor);\n\t\t\treturn selection.map(editor => EditorResourceAccessor.getOriginalUri(editor)).filter(uri => !!uri);\n\t\t}\n\t}\n\n\tconst result = getResourceForCommand(commandArg, editorSerice, listService);\n\treturn !!result ? [result] : [];\n}\n\nexport function getOpenEditorsViewMultiSelection(accessor: ServicesAccessor): Array<IEditorIdentifier> | undefined {\n\tconst list = accessor.get(IListService).lastFocusedList;\n\tconst element = list?.getHTMLElement();\n\tif (element && isActiveElement(element)) {\n\t\t// Open editors view\n\t\tif (list instanceof List) {\n\t\t\tconst selection = coalesce(list.getSelectedElements().filter(s => s instanceof OpenEditor));\n\t\t\tconst focusedElements = list.getFocusedElements();\n\t\t\tconst focus = focusedElements.length ? focusedElements[0] : undefined;\n\t\t\tlet mainEditor: IEditorIdentifier | undefined = undefined;\n\t\t\tif (focus instanceof OpenEditor) {\n\t\t\t\tmainEditor = focus;\n\t\t\t}\n\t\t\t// We only respect the selection if it contains the main element.\n\t\t\tif (selection.some(s => s === mainEditor)) {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t\treturn mainEditor ? [mainEditor] : undefined;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],
  "mappings": "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",
  "names": ["selection"]
}
