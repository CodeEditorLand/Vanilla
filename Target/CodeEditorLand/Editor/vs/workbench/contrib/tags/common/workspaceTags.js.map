{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tags/common/workspaceTags.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WorkbenchState, IWorkspace } from '../../../../platform/workspace/common/workspace.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { getRemotes } from '../../../../platform/extensionManagement/common/configRemotes.js';\n\nexport type Tags = { [index: string]: boolean | number | string | undefined };\n\nexport const IWorkspaceTagsService = createDecorator<IWorkspaceTagsService>('workspaceTagsService');\n\nexport interface IWorkspaceTagsService {\n\treadonly _serviceBrand: undefined;\n\n\tgetTags(): Promise<Tags>;\n\n\t/**\n\t * Returns an id for the workspace, different from the id returned by the context service. A hash based\n\t * on the folder uri or workspace configuration, not time-based, and undefined for empty workspaces.\n\t */\n\tgetTelemetryWorkspaceId(workspace: IWorkspace, state: WorkbenchState): Promise<string | undefined>;\n\n\tgetHashedRemotesFromUri(workspaceUri: URI, stripEndingDotGit?: boolean): Promise<string[]>;\n}\n\nexport async function getHashedRemotesFromConfig(text: string, stripEndingDotGit: boolean = false, sha1Hex: (str: string) => Promise<string>): Promise<string[]> {\n\treturn Promise.all(getRemotes(text, stripEndingDotGit).map(remote => sha1Hex(remote)));\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB,kBAAkB;AAC3C,SAAS,uBAAuB;AAChC,SAAS,WAAW;AACpB,SAAS,kBAAkB;AAIpB,MAAM,wBAAwB,gBAAuC,sBAAsB;AAgBlG,eAAsB,2BAA2B,MAAc,oBAA6B,OAAO,SAA8D;AAChK,SAAO,QAAQ,IAAI,WAAW,MAAM,iBAAiB,EAAE,IAAI,YAAU,QAAQ,MAAM,CAAC,CAAC;AACtF;AAFsB;",
  "names": []
}
