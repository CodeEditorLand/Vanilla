{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tags/browser/workspaceTagsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport type {\n\tIWorkspace,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspaceTagsService, type Tags } from \"../common/workspaceTags.js\";\n\nexport class NoOpWorkspaceTagsService implements IWorkspaceTagsService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tgetTags(): Promise<Tags> {\n\t\treturn Promise.resolve({});\n\t}\n\n\tasync getTelemetryWorkspaceId(\n\t\tworkspace: IWorkspace,\n\t\tstate: WorkbenchState,\n\t): Promise<string | undefined> {\n\t\treturn undefined;\n\t}\n\n\tgetHashedRemotesFromUri(\n\t\tworkspaceUri: URI,\n\t\tstripEndingDotGit?: boolean,\n\t): Promise<string[]> {\n\t\treturn Promise.resolve([]);\n\t}\n}\n\nregisterSingleton(\n\tIWorkspaceTagsService,\n\tNoOpWorkspaceTagsService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;AAMA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAKP,SAAS,6BAAwC;AAE1C,MAAM,yBAA0D;AAAA,EAhBvE,OAgBuE;AAAA;AAAA;AAAA,EAGtE,UAAyB;AACxB,WAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC1B;AAAA,EAEA,MAAM,wBACL,WACA,OAC8B;AAC9B,WAAO;AAAA,EACR;AAAA,EAEA,wBACC,cACA,mBACoB;AACpB,WAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC1B;AACD;AAEA;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
