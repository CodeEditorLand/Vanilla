{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tags/electron-sandbox/workspaceTags.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { sha1Hex } from '../../../../base/browser/hash.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IFileService, IFileStat } from '../../../../platform/files/common/files.js';\nimport { ITelemetryService, TelemetryLevel } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { ITextFileService, } from '../../../services/textfile/common/textfiles.js';\nimport { IWorkspaceTagsService, Tags, getHashedRemotesFromConfig as baseGetHashedRemotesFromConfig } from '../common/workspaceTags.js';\nimport { IDiagnosticsService, IWorkspaceInformation } from '../../../../platform/diagnostics/common/diagnostics.js';\nimport { IRequestService } from '../../../../platform/request/common/request.js';\nimport { isWindows } from '../../../../base/common/platform.js';\nimport { AllowedSecondLevelDomains, getDomainsOfRemotes } from '../../../../platform/extensionManagement/common/configRemotes.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\n\nexport async function getHashedRemotesFromConfig(text: string, stripEndingDotGit: boolean = false): Promise<string[]> {\n\treturn baseGetHashedRemotesFromConfig(text, stripEndingDotGit, remote => sha1Hex(remote));\n}\n\nexport class WorkspaceTags implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkspaceTagsService private readonly workspaceTagsService: IWorkspaceTagsService,\n\t\t@IDiagnosticsService private readonly diagnosticsService: IDiagnosticsService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tif (this.telemetryService.telemetryLevel === TelemetryLevel.USAGE) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tprivate async report(): Promise<void> {\n\t\t// Windows-only Edition Event\n\t\tthis.reportWindowsEdition();\n\n\t\t// Workspace Tags\n\t\tthis.workspaceTagsService.getTags()\n\t\t\t.then(tags => this.reportWorkspaceTags(tags), error => onUnexpectedError(error));\n\n\t\t// Cloud Stats\n\t\tthis.reportCloudStats();\n\n\t\tthis.reportProxyStats();\n\n\t\tthis.getWorkspaceInformation().then(stats => this.diagnosticsService.reportWorkspaceStats(stats));\n\t}\n\n\tprivate async reportWindowsEdition(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet value = await this.nativeHostService.windowsGetStringRegKey('HKEY_LOCAL_MACHINE', 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion', 'EditionID');\n\t\tif (value === undefined) {\n\t\t\tvalue = 'Unknown';\n\t\t}\n\n\t\tthis.telemetryService.publicLog2<{ edition: string }, { owner: 'sbatten'; comment: 'Information about the Windows edition.'; edition: { classification: 'SystemMetaData'; purpose: 'BusinessInsight'; comment: 'The Windows edition.' } }>('windowsEdition', { edition: value });\n\t}\n\n\tprivate async getWorkspaceInformation(): Promise<IWorkspaceInformation> {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tconst state = this.contextService.getWorkbenchState();\n\t\tconst telemetryId = await this.workspaceTagsService.getTelemetryWorkspaceId(workspace, state);\n\n\t\treturn {\n\t\t\tid: workspace.id,\n\t\t\ttelemetryId,\n\t\t\trendererSessionId: this.telemetryService.sessionId,\n\t\t\tfolders: workspace.folders,\n\t\t\ttransient: workspace.transient,\n\t\t\tconfiguration: workspace.configuration\n\t\t};\n\t}\n\n\tprivate reportWorkspaceTags(tags: Tags): void {\n\t\t/* __GDPR__\n\t\t\t\"workspce.tags\" : {\n\t\t\t\t\"owner\": \"lramos15\",\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${WorkspaceTags}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('workspce.tags', tags);\n\t}\n\n\tprivate reportRemoteDomains(workspaceUris: URI[]): void {\n\t\tPromise.all<string[]>(workspaceUris.map(workspaceUri => {\n\t\t\tconst path = workspaceUri.path;\n\t\t\tconst uri = workspaceUri.with({ path: `${path !== '/' ? path : ''}/.git/config` });\n\t\t\treturn this.fileService.exists(uri).then(exists => {\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this.textFileService.read(uri, { acceptTextOnly: true }).then(\n\t\t\t\t\tcontent => getDomainsOfRemotes(content.value, AllowedSecondLevelDomains),\n\t\t\t\t\terr => [] // ignore missing or binary file\n\t\t\t\t);\n\t\t\t});\n\t\t})).then(domains => {\n\t\t\tconst set = domains.reduce((set, list) => list.reduce((set, item) => set.add(item), set), new Set<string>());\n\t\t\tconst list: string[] = [];\n\t\t\tset.forEach(item => list.push(item));\n\t\t\t/* __GDPR__\n\t\t\t\t\"workspace.remotes\" : {\n\t\t\t\t\t\"owner\": \"lramos15\",\n\t\t\t\t\t\"domains\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('workspace.remotes', { domains: list.sort() });\n\t\t}, onUnexpectedError);\n\t}\n\n\tprivate reportRemotes(workspaceUris: URI[]): void {\n\t\tPromise.all<string[]>(workspaceUris.map(workspaceUri => {\n\t\t\treturn this.workspaceTagsService.getHashedRemotesFromUri(workspaceUri, true);\n\t\t})).then(() => { }, onUnexpectedError);\n\t}\n\n\t/* __GDPR__FRAGMENT__\n\t\t\"AzureTags\" : {\n\t\t\t\"node\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t}\n\t*/\n\tprivate reportAzureNode(workspaceUris: URI[], tags: Tags): Promise<Tags> {\n\t\t// TODO: should also work for `node_modules` folders several levels down\n\t\tconst uris = workspaceUris.map(workspaceUri => {\n\t\t\tconst path = workspaceUri.path;\n\t\t\treturn workspaceUri.with({ path: `${path !== '/' ? path : ''}/node_modules` });\n\t\t});\n\t\treturn this.fileService.resolveAll(uris.map(resource => ({ resource }))).then(\n\t\t\tresults => {\n\t\t\t\tconst names = (<IFileStat[]>[]).concat(...results.map(result => result.success ? (result.stat!.children || []) : [])).map(c => c.name);\n\t\t\t\tconst referencesAzure = WorkspaceTags.searchArray(names, /azure/i);\n\t\t\t\tif (referencesAzure) {\n\t\t\t\t\ttags['node'] = true;\n\t\t\t\t}\n\t\t\t\treturn tags;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\treturn tags;\n\t\t\t});\n\t}\n\n\tprivate static searchArray(arr: string[], regEx: RegExp): boolean | undefined {\n\t\treturn arr.some(v => v.search(regEx) > -1) || undefined;\n\t}\n\n\t/* __GDPR__FRAGMENT__\n\t\t\"AzureTags\" : {\n\t\t\t\"java\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t}\n\t*/\n\tprivate reportAzureJava(workspaceUris: URI[], tags: Tags): Promise<Tags> {\n\t\treturn Promise.all(workspaceUris.map(workspaceUri => {\n\t\t\tconst path = workspaceUri.path;\n\t\t\tconst uri = workspaceUri.with({ path: `${path !== '/' ? path : ''}/pom.xml` });\n\t\t\treturn this.fileService.exists(uri).then(exists => {\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn this.textFileService.read(uri, { acceptTextOnly: true }).then(\n\t\t\t\t\tcontent => !!content.value.match(/azure/i),\n\t\t\t\t\terr => false\n\t\t\t\t);\n\t\t\t});\n\t\t})).then(javas => {\n\t\t\tif (javas.indexOf(true) !== -1) {\n\t\t\t\ttags['java'] = true;\n\t\t\t}\n\t\t\treturn tags;\n\t\t});\n\t}\n\n\tprivate reportAzure(uris: URI[]) {\n\t\tconst tags: Tags = Object.create(null);\n\t\tthis.reportAzureNode(uris, tags).then((tags) => {\n\t\t\treturn this.reportAzureJava(uris, tags);\n\t\t}).then((tags) => {\n\t\t\tif (Object.keys(tags).length) {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"workspace.azure\" : {\n\t\t\t\t\t\t\"owner\": \"lramos15\",\n\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\"${AzureTags}\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog('workspace.azure', tags);\n\t\t\t}\n\t\t}).then(undefined, onUnexpectedError);\n\t}\n\n\tprivate reportCloudStats(): void {\n\t\tconst uris = this.contextService.getWorkspace().folders.map(folder => folder.uri);\n\t\tif (uris.length && this.fileService) {\n\t\t\tthis.reportRemoteDomains(uris);\n\t\t\tthis.reportRemotes(uris);\n\t\t\tthis.reportAzure(uris);\n\t\t}\n\t}\n\n\tprivate reportProxyStats() {\n\t\tconst downloadUrl = this.productService.downloadUrl;\n\t\tif (!downloadUrl) {\n\t\t\treturn;\n\t\t}\n\t\tthis.requestService.resolveProxy(downloadUrl)\n\t\t\t.then(proxy => {\n\t\t\t\tlet type = proxy ? String(proxy).trim().split(/\\s+/, 1)[0] : 'EMPTY';\n\t\t\t\tif (['DIRECT', 'PROXY', 'HTTPS', 'SOCKS', 'EMPTY'].indexOf(type) === -1) {\n\t\t\t\t\ttype = 'UNKNOWN';\n\t\t\t\t}\n\t\t\t}).then(undefined, onUnexpectedError);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["set", "list", "tags"]
}
