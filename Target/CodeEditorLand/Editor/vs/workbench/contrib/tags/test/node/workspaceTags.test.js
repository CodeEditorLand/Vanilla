import r from"assert";import*as a from"crypto";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../../base/test/common/utils.js";import{getHashedRemotesFromConfig as c}from"../../common/workspaceTags.js";function i(t){return a.createHash("sha1").update(t.toString()).digest("hex")}async function p(t){return i(t)}async function e(t,o=!1){return c(t,o,s=>p(s))}suite("Telemetry - WorkspaceTags",()=>{test("Single remote hashed",async function(){r.deepStrictEqual(await e(t("https://username:password@github3.com/username/repository.git")),[i("github3.com/username/repository.git")]),r.deepStrictEqual(await e(t("ssh://user@git.server.org/project.git")),[i("git.server.org/project.git")]),r.deepStrictEqual(await e(t("user@git.server.org:project.git")),[i("git.server.org/project.git")]),r.deepStrictEqual(await e(t("/opt/git/project.git")),[]),r.deepStrictEqual(await e(t("https://username:password@github3.com/username/repository.git"),!0),[i("github3.com/username/repository")]),r.deepStrictEqual(await e(t("ssh://user@git.server.org/project.git"),!0),[i("git.server.org/project")]),r.deepStrictEqual(await e(t("user@git.server.org:project.git"),!0),[i("git.server.org/project")]),r.deepStrictEqual(await e(t("/opt/git/project.git"),!0),[]),r.deepStrictEqual(await e(t("https://username:password@github3.com/username/repository.git"),!0),await e(t("https://username:password@github3.com/username/repository"))),r.deepStrictEqual(await e(t("ssh://user@git.server.org/project.git"),!0),await e(t("ssh://user@git.server.org/project"))),r.deepStrictEqual(await e(t("user@git.server.org:project.git"),!0),[i("git.server.org/project")]),r.deepStrictEqual(await e(t("/opt/git/project.git"),!0),await e(t("/opt/git/project")))}),test("Multiple remotes hashed",async function(){const o=["https://github.com/microsoft/vscode.git","https://git.example.com/gitproject.git"].map(t).join(" ");r.deepStrictEqual(await e(o),[i("github.com/microsoft/vscode.git"),i("git.example.com/gitproject.git")]),r.deepStrictEqual(await e(o,!0),[i("github.com/microsoft/vscode"),i("git.example.com/gitproject")]);const s=["https://github.com/microsoft/vscode","https://git.example.com/gitproject"].map(t).join(" ");r.deepStrictEqual(await e(o,!0),await e(s))});function t(o){return`[remote "origin"]
	url = ${o}
	fetch = +refs/heads/*:refs/remotes/origin/*
`}g()});export{e as getHashedRemotesFromConfig};
