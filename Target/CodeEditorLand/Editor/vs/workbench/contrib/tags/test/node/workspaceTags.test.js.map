{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/tags/test/node/workspaceTags.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as crypto from 'crypto';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { getHashedRemotesFromConfig as baseGetHashedRemotesFromConfig } from '../../common/workspaceTags.js';\n\nfunction hash(value: string): string {\n\treturn crypto.createHash('sha1').update(value.toString()).digest('hex'); // CodeQL [SM04514] Using SHA1 to convert a URL to a fixed length\n}\n\nasync function asyncHash(value: string): Promise<string> {\n\treturn hash(value);\n}\n\nexport async function getHashedRemotesFromConfig(text: string, stripEndingDotGit: boolean = false): Promise<string[]> {\n\treturn baseGetHashedRemotesFromConfig(text, stripEndingDotGit, remote => asyncHash(remote));\n}\n\nsuite('Telemetry - WorkspaceTags', () => {\n\n\ttest('Single remote hashed', async function () {\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository.git')), [hash('github3.com/username/repository.git')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project.git')), [hash('git.server.org/project.git')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('user@git.server.org:project.git')), [hash('git.server.org/project.git')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('/opt/git/project.git')), []);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository.git'), true), [hash('github3.com/username/repository')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project.git'), true), [hash('git.server.org/project')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('user@git.server.org:project.git'), true), [hash('git.server.org/project')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('/opt/git/project.git'), true), []);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository.git'), true), await getHashedRemotesFromConfig(remote('https://username:password@github3.com/username/repository')));\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project.git'), true), await getHashedRemotesFromConfig(remote('ssh://user@git.server.org/project')));\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('user@git.server.org:project.git'), true), [hash('git.server.org/project')]);\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(remote('/opt/git/project.git'), true), await getHashedRemotesFromConfig(remote('/opt/git/project')));\n\t});\n\n\ttest('Multiple remotes hashed', async function () {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.example.com/gitproject.git'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(config), [hash('github.com/microsoft/vscode.git'), hash('git.example.com/gitproject.git')]);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(config, true), [hash('github.com/microsoft/vscode'), hash('git.example.com/gitproject')]);\n\n\t\t// Compare Striped .git with no .git\n\t\tconst noDotGitConfig = ['https://github.com/microsoft/vscode', 'https://git.example.com/gitproject'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(await getHashedRemotesFromConfig(config, true), await getHashedRemotesFromConfig(noDotGitConfig));\n\t});\n\n\tfunction remote(url: string): string {\n\t\treturn `[remote \"origin\"]\n\turl = ${url}\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n`;\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,YAAY,YAAY;AACxB,SAAS,+CAA+C;AACxD,SAAS,8BAA8B,sCAAsC;AAE7E,SAAS,KAAK,OAAuB;AACpC,SAAO,OAAO,WAAW,MAAM,EAAE,OAAO,MAAM,SAAS,CAAC,EAAE,OAAO,KAAK;AACvE;AAFS;AAIT,eAAe,UAAU,OAAgC;AACxD,SAAO,KAAK,KAAK;AAClB;AAFe;AAIf,eAAsB,2BAA2B,MAAc,oBAA6B,OAA0B;AACrH,SAAO,+BAA+B,MAAM,mBAAmB,YAAU,UAAU,MAAM,CAAC;AAC3F;AAFsB;AAItB,MAAM,6BAA6B,MAAM;AAExC,OAAK,wBAAwB,iBAAkB;AAC9C,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,+DAA+D,CAAC,GAAG,CAAC,KAAK,qCAAqC,CAAC,CAAC;AAC/K,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,uCAAuC,CAAC,GAAG,CAAC,KAAK,4BAA4B,CAAC,CAAC;AAC9I,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,iCAAiC,CAAC,GAAG,CAAC,KAAK,4BAA4B,CAAC,CAAC;AACxI,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,sBAAsB,CAAC,GAAG,CAAC,CAAC;AAG3F,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,+DAA+D,GAAG,IAAI,GAAG,CAAC,KAAK,iCAAiC,CAAC,CAAC;AACjL,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,uCAAuC,GAAG,IAAI,GAAG,CAAC,KAAK,wBAAwB,CAAC,CAAC;AAChJ,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,iCAAiC,GAAG,IAAI,GAAG,CAAC,KAAK,wBAAwB,CAAC,CAAC;AAC1I,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,sBAAsB,GAAG,IAAI,GAAG,CAAC,CAAC;AAGjG,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,+DAA+D,GAAG,IAAI,GAAG,MAAM,2BAA2B,OAAO,2DAA2D,CAAC,CAAC;AAC7O,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,uCAAuC,GAAG,IAAI,GAAG,MAAM,2BAA2B,OAAO,mCAAmC,CAAC,CAAC;AAC7L,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,iCAAiC,GAAG,IAAI,GAAG,CAAC,KAAK,wBAAwB,CAAC,CAAC;AAC1I,WAAO,gBAAgB,MAAM,2BAA2B,OAAO,sBAAsB,GAAG,IAAI,GAAG,MAAM,2BAA2B,OAAO,kBAAkB,CAAC,CAAC;AAAA,EAC5J,CAAC;AAED,OAAK,2BAA2B,iBAAkB;AACjD,UAAM,SAAS,CAAC,2CAA2C,wCAAwC,EAAE,IAAI,MAAM,EAAE,KAAK,GAAG;AACzH,WAAO,gBAAgB,MAAM,2BAA2B,MAAM,GAAG,CAAC,KAAK,iCAAiC,GAAG,KAAK,gCAAgC,CAAC,CAAC;AAGlJ,WAAO,gBAAgB,MAAM,2BAA2B,QAAQ,IAAI,GAAG,CAAC,KAAK,6BAA6B,GAAG,KAAK,4BAA4B,CAAC,CAAC;AAGhJ,UAAM,iBAAiB,CAAC,uCAAuC,oCAAoC,EAAE,IAAI,MAAM,EAAE,KAAK,GAAG;AACzH,WAAO,gBAAgB,MAAM,2BAA2B,QAAQ,IAAI,GAAG,MAAM,2BAA2B,cAAc,CAAC;AAAA,EACxH,CAAC;AAED,WAAS,OAAO,KAAqB;AACpC,WAAO;AAAA,SACA,GAAG;AAAA;AAAA;AAAA,EAGX;AALS;AAOT,0CAAwC;AACzC,CAAC;",
  "names": []
}
