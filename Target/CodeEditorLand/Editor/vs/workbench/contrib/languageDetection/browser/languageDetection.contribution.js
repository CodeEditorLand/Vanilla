var L=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var y=(r,e,o,t)=>{for(var i=t>1?void 0:t?C(e,o):e,n=r.length-1,a;n>=0;n--)(a=r[n])&&(i=(t?a(e,o,i):a(i))||i);return t&&i&&L(e,o,i),i},s=(r,e)=>(o,t)=>e(o,t,r);import{ThrottledDelayer as k}from"../../../../base/common/async.js";import{KeyCode as x,KeyMod as h}from"../../../../base/common/keyCodes.js";import{DisposableStore as f}from"../../../../base/common/lifecycle.js";import{Schemas as A}from"../../../../base/common/network.js";import{getCodeEditor as v}from"../../../../editor/browser/editorBrowser.js";import{EditorContextKeys as K}from"../../../../editor/common/editorContextKeys.js";import{ILanguageService as w}from"../../../../editor/common/languages/language.js";import{localize as g,localize2 as T}from"../../../../nls.js";import{Action2 as W,registerAction2 as R}from"../../../../platform/actions/common/actions.js";import{IConfigurationService as M}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as H}from"../../../../platform/contextkey/common/contextkey.js";import{IKeybindingService as N}from"../../../../platform/keybinding/common/keybinding.js";import{KeybindingWeight as U}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{INotificationService as j}from"../../../../platform/notification/common/notification.js";import{Registry as B}from"../../../../platform/registry/common/platform.js";import{Extensions as O}from"../../../common/contributions.js";import{IEditorService as _}from"../../../services/editor/common/editorService.js";import{ILanguageDetectionService as S,LanguageDetectionLanguageEventSource as P}from"../../../services/languageDetection/common/languageDetectionWorkerService.js";import{LifecyclePhase as z}from"../../../services/lifecycle/common/lifecycle.js";import{IStatusbarService as G,StatusbarAlignment as E}from"../../../services/statusbar/browser/statusbar.js";import{NOTEBOOK_EDITOR_EDITABLE as $}from"../../notebook/common/notebookContextKeys.js";const l="editor.detectLanguage";let d=class{constructor(e,o,t,i,n,a){this._languageDetectionService=e;this._statusBarService=o;this._configurationService=t;this._editorService=i;this._languageService=n;this._keybindingService=a;i.onDidActiveEditorChange(()=>this._update(!0),this,this._disposables),this._update(!1)}static _id="status.languageDetectionStatus";_disposables=new f;_combinedEntry;_delayer=new k(1e3);_renderDisposables=new f;dispose(){this._disposables.dispose(),this._delayer.dispose(),this._combinedEntry?.dispose(),this._renderDisposables.dispose()}_update(e){e&&(this._combinedEntry?.dispose(),this._combinedEntry=void 0),this._delayer.trigger(()=>this._doUpdate())}async _doUpdate(){const e=v(this._editorService.activeTextEditorControl);this._renderDisposables.clear(),e?.onDidChangeModelLanguage(()=>this._update(!0),this,this._renderDisposables),e?.onDidChangeModelContent(()=>this._update(!1),this,this._renderDisposables);const o=e?.getModel(),t=o?.uri,i=o?.getLanguageId(),n=this._configurationService.getValue("workbench.editor.languageDetectionHints");if(!(typeof n=="object"&&n?.untitledEditors)||t?.scheme!==A.untitled||!i||!t)this._combinedEntry?.dispose(),this._combinedEntry=void 0;else{const c=await this._languageDetectionService.detectLanguage(t),I={jsonc:"json"},p=o.getLanguageId();if(c&&c!==p&&I[p]!==c){const D=this._languageService.getLanguageName(c)||c;let m=g("status.autoDetectLanguage","Accept Detected Language: {0}",D);const u=this._keybindingService.lookupKeybinding(l)?.getLabel();u&&(m+=` (${u})`);const b={name:g("langDetection.name","Language Detection"),ariaLabel:g("langDetection.aria","Change to Detected Language: {0}",c),tooltip:m,command:l,text:"$(lightbulb-autofix)"};this._combinedEntry?this._combinedEntry.update(b):this._combinedEntry=this._statusBarService.addEntry(b,d._id,E.RIGHT,{id:"status.editor.mode",alignment:E.RIGHT,compact:!0})}else this._combinedEntry?.dispose(),this._combinedEntry=void 0}}};d=y([s(0,S),s(1,G),s(2,M),s(3,_),s(4,w),s(5,N)],d),B.as(O.Workbench).registerWorkbenchContribution(d,z.Restored),R(class extends W{constructor(){super({id:l,title:T("detectlang","Detect Language from Content"),f1:!0,precondition:H.and($.toNegated(),K.editorTextFocus),keybinding:{primary:x.KeyD|h.Alt|h.Shift,weight:U.WorkbenchContrib}})}async run(r){const e=r.get(_),o=r.get(S),t=v(e.activeTextEditorControl),i=r.get(j),n=t?.getModel()?.uri;if(n){const a=await o.detectLanguage(n);a?t.getModel()?.setLanguage(a,P):i.warn(g("noDetection","Unable to detect editor language"))}}});
