{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeActions/browser/codeActionsContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { IJSONSchema, IJSONSchemaMap } from '../../../../base/common/jsonSchema.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { editorConfigurationBaseNode } from '../../../../editor/common/config/editorConfigurationSchema.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { codeActionCommandId, refactorCommandId, sourceActionCommandId } from '../../../../editor/contrib/codeAction/browser/codeAction.js';\nimport { CodeActionKind } from '../../../../editor/contrib/codeAction/common/types.js';\nimport * as nls from '../../../../nls.js';\nimport { ConfigurationScope, Extensions, IConfigurationNode, IConfigurationPropertySchema, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { CodeActionsExtensionPoint, ContributedCodeAction } from '../common/codeActionsExtensionPoint.js';\nimport { IExtensionPoint } from '../../../services/extensions/common/extensionsRegistry.js';\n\nconst createCodeActionsAutoSave = (description: string): IJSONSchema => {\n\treturn {\n\t\ttype: 'string',\n\t\tenum: ['always', 'explicit', 'never', true, false],\n\t\tenumDescriptions: [\n\t\t\tnls.localize('alwaysSave', 'Triggers Code Actions on explicit saves and auto saves triggered by window or focus changes.'),\n\t\t\tnls.localize('explicitSave', 'Triggers Code Actions only when explicitly saved'),\n\t\t\tnls.localize('neverSave', 'Never triggers Code Actions on save'),\n\t\t\tnls.localize('explicitSaveBoolean', 'Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \"explicit\".'),\n\t\t\tnls.localize('neverSaveBoolean', 'Never triggers Code Actions on save. This value will be deprecated in favor of \"never\".')\n\t\t],\n\t\tdefault: 'explicit',\n\t\tdescription: description\n\t};\n};\n\nconst createNotebookCodeActionsAutoSave = (description: string): IJSONSchema => {\n\treturn {\n\t\ttype: ['string', 'boolean'],\n\t\tenum: ['explicit', 'never', true, false],\n\t\tenumDescriptions: [\n\t\t\tnls.localize('explicit', 'Triggers Code Actions only when explicitly saved.'),\n\t\t\tnls.localize('never', 'Never triggers Code Actions on save.'),\n\t\t\tnls.localize('explicitBoolean', 'Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \"explicit\".'),\n\t\t\tnls.localize('neverBoolean', 'Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \"never\".')\n\t\t],\n\t\tdefault: 'explicit',\n\t\tdescription: description\n\t};\n};\n\n\nconst codeActionsOnSaveSchema: IConfigurationPropertySchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: { type: 'string' }\n\t\t}\n\t],\n\tmarkdownDescription: nls.localize('editor.codeActionsOnSave', 'Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. Example: `\"source.organizeImports\": \"explicit\" `'),\n\ttype: ['object', 'array'],\n\tadditionalProperties: {\n\t\ttype: 'string',\n\t\tenum: ['always', 'explicit', 'never', true, false],\n\t},\n\tdefault: {},\n\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE,\n};\n\nexport const editorConfiguration = Object.freeze<IConfigurationNode>({\n\t...editorConfigurationBaseNode,\n\tproperties: {\n\t\t'editor.codeActionsOnSave': codeActionsOnSaveSchema\n\t}\n});\n\nconst notebookCodeActionsOnSaveSchema: IConfigurationPropertySchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: { type: 'string' }\n\t\t}\n\t],\n\tmarkdownDescription: nls.localize('notebook.codeActionsOnSave', 'Run a series of Code Actions for a notebook on save. Code Actions must be specified, the file must not be saved after delay, and the editor must not be shutting down. Example: `\"notebook.source.organizeImports\": \"explicit\"`'),\n\ttype: 'object',\n\tadditionalProperties: {\n\t\ttype: ['string', 'boolean'],\n\t\tenum: ['explicit', 'never', true, false],\n\t\t// enum: ['explicit', 'always', 'never'], -- autosave support needs to be built first\n\t\t// nls.localize('always', 'Always triggers Code Actions on save, including autosave, focus, and window change events.'),\n\t},\n\tdefault: {}\n};\n\nexport const notebookEditorConfiguration = Object.freeze<IConfigurationNode>({\n\t...editorConfigurationBaseNode,\n\tproperties: {\n\t\t'notebook.codeActionsOnSave': notebookCodeActionsOnSaveSchema\n\t}\n});\n\nexport class CodeActionsContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate _contributedCodeActions: CodeActionsExtensionPoint[] = [];\n\tprivate settings: Set<string> = new Set<string>();\n\n\tprivate readonly _onDidChangeContributions = this._register(new Emitter<void>());\n\n\tconstructor(\n\t\tcodeActionsExtensionPoint: IExtensionPoint<CodeActionsExtensionPoint[]>,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ILanguageFeaturesService private readonly languageFeatures: ILanguageFeaturesService\n\t) {\n\t\tsuper();\n\n\t\t// TODO: @justschen caching of code actions based on extensions loaded: https://github.com/microsoft/vscode/issues/216019\n\t\tlanguageFeatures.codeActionProvider.onDidChange(() => {\n\t\t\tthis.updateSettingsFromCodeActionProviders();\n\t\t\tthis.updateConfigurationSchemaFromContribs();\n\t\t}, 2000);\n\n\t\tcodeActionsExtensionPoint.setHandler(extensionPoints => {\n\t\t\tthis._contributedCodeActions = extensionPoints.flatMap(x => x.value).filter(x => Array.isArray(x.actions));\n\t\t\tthis.updateConfigurationSchema(this._contributedCodeActions);\n\t\t\tthis._onDidChangeContributions.fire();\n\t\t});\n\n\t\tkeybindingService.registerSchemaContribution({\n\t\t\tgetSchemaAdditions: () => this.getSchemaAdditions(),\n\t\t\tonDidChange: this._onDidChangeContributions.event,\n\t\t});\n\t}\n\n\tprivate updateSettingsFromCodeActionProviders(): void {\n\t\tconst providers = this.languageFeatures.codeActionProvider.allNoModel();\n\t\tproviders.forEach(provider => {\n\t\t\tif (provider.providedCodeActionKinds) {\n\t\t\t\tprovider.providedCodeActionKinds.forEach(kind => {\n\t\t\t\t\tif (!this.settings.has(kind) && CodeActionKind.Source.contains(new HierarchicalKind(kind))) {\n\t\t\t\t\t\tthis.settings.add(kind);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateConfigurationSchema(codeActionContributions: readonly CodeActionsExtensionPoint[]) {\n\t\tconst newProperties: IJSONSchemaMap = {};\n\t\tconst newNotebookProperties: IJSONSchemaMap = {};\n\t\tfor (const [sourceAction, props] of this.getSourceActions(codeActionContributions)) {\n\t\t\tthis.settings.add(sourceAction);\n\t\t\tnewProperties[sourceAction] = createCodeActionsAutoSave(nls.localize('codeActionsOnSave.generic', \"Controls whether '{0}' actions should be run on file save.\", props.title));\n\t\t\tnewNotebookProperties[sourceAction] = createNotebookCodeActionsAutoSave(nls.localize('codeActionsOnSave.generic', \"Controls whether '{0}' actions should be run on file save.\", props.title));\n\t\t}\n\t\tcodeActionsOnSaveSchema.properties = newProperties;\n\t\tnotebookCodeActionsOnSaveSchema.properties = newNotebookProperties;\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration)\n\t\t\t.notifyConfigurationSchemaUpdated(editorConfiguration);\n\t}\n\n\tprivate updateConfigurationSchemaFromContribs() {\n\t\tconst properties: IJSONSchemaMap = { ...codeActionsOnSaveSchema.properties };\n\t\tconst notebookProperties: IJSONSchemaMap = { ...notebookCodeActionsOnSaveSchema.properties };\n\t\tfor (const codeActionKind of this.settings) {\n\t\t\tif (!properties[codeActionKind]) {\n\t\t\t\tproperties[codeActionKind] = createCodeActionsAutoSave(nls.localize('codeActionsOnSave.generic', \"Controls whether '{0}' actions should be run on file save.\", codeActionKind));\n\t\t\t\tnotebookProperties[codeActionKind] = createNotebookCodeActionsAutoSave(nls.localize('codeActionsOnSave.generic', \"Controls whether '{0}' actions should be run on file save.\", codeActionKind));\n\t\t\t}\n\t\t}\n\t\tcodeActionsOnSaveSchema.properties = properties;\n\t\tnotebookCodeActionsOnSaveSchema.properties = notebookProperties;\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration)\n\t\t\t.notifyConfigurationSchemaUpdated(editorConfiguration);\n\t}\n\n\tprivate getSourceActions(contributions: readonly CodeActionsExtensionPoint[]) {\n\t\tconst sourceActions = new Map<string, { readonly title: string }>();\n\t\tfor (const contribution of contributions) {\n\t\t\tfor (const action of contribution.actions) {\n\t\t\t\tconst kind = new HierarchicalKind(action.kind);\n\t\t\t\tif (CodeActionKind.Source.contains(kind)) {\n\t\t\t\t\tsourceActions.set(kind.value, action);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sourceActions;\n\t}\n\n\tprivate getSchemaAdditions(): IJSONSchema[] {\n\t\tconst conditionalSchema = (command: string, actions: readonly ContributedCodeAction[]): IJSONSchema => {\n\t\t\treturn {\n\t\t\t\tif: {\n\t\t\t\t\trequired: ['command'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t'command': { const: command }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tthen: {\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t'args': {\n\t\t\t\t\t\t\trequired: ['kind'],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t'kind': {\n\t\t\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tenum: actions.map(action => action.kind),\n\t\t\t\t\t\t\t\t\t\t\tenumDescriptions: actions.map(action => action.description ?? action.title),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{ type: 'string' },\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tconst getActions = (ofKind: HierarchicalKind): ContributedCodeAction[] => {\n\t\t\tconst allActions = this._contributedCodeActions.flatMap(desc => desc.actions);\n\n\t\t\tconst out = new Map<string, ContributedCodeAction>();\n\t\t\tfor (const action of allActions) {\n\t\t\t\tif (!out.has(action.kind) && ofKind.contains(new HierarchicalKind(action.kind))) {\n\t\t\t\t\tout.set(action.kind, action);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Array.from(out.values());\n\t\t};\n\n\t\treturn [\n\t\t\tconditionalSchema(codeActionCommandId, getActions(HierarchicalKind.Empty)),\n\t\t\tconditionalSchema(refactorCommandId, getActions(CodeActionKind.Refactor)),\n\t\t\tconditionalSchema(sourceActionCommandId, getActions(CodeActionKind.Source)),\n\t\t];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
