var g=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var d=(s,n,o,t)=>{for(var e=t>1?void 0:t?u(n,o):n,i=s.length-1,r;i>=0;i--)(r=s[i])&&(e=(t?r(n,o,e):r(e))||e);return t&&e&&g(n,o,e),e},m=(s,n)=>(o,t)=>n(o,t,s);import{HierarchicalKind as f}from"../../../../base/common/hierarchicalKind.js";import{Disposable as x}from"../../../../base/common/lifecycle.js";import{ILanguageFeaturesService as y}from"../../../../editor/common/services/languageFeatures.js";import{CodeActionKind as p}from"../../../../editor/contrib/codeAction/common/types.js";import{ContextKeyExpr as h,IContextKeyService as v}from"../../../../platform/contextkey/common/contextkey.js";let c=class extends x{constructor(o,t,e){super();this.contextKeyService=t;this._register(e.codeActionProvider.register("*",this)),o.setHandler(i=>{this.contributions=[];for(const r of i)if(r.value.refactoring)for(const a of r.value.refactoring){const l=h.deserialize(a.when);l&&this.contributions.push({title:a.title,when:l,command:a.command})}})}contributions=[];emptyCodeActionsList={actions:[],dispose:()=>{}};async provideCodeActions(o,t,e,i){return this.emptyCodeActionsList}_getAdditionalMenuItems(o,t){return o.only!==p.Refactor.value&&!t.some(e=>e.kind&&p.Refactor.contains(new f(e.kind)))?[]:this.contributions.filter(e=>this.contextKeyService.contextMatchesRules(e.when)).map(e=>({id:e.command,title:e.title}))}};c=d([m(1,v),m(2,y)],c);export{c as CodeActionDocumentationContribution};
