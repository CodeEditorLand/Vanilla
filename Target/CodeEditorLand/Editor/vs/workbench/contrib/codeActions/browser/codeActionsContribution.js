var b=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=(s,a,i,o)=>{for(var e=o>1?void 0:o?x(a,i):a,n=s.length-1,t;n>=0;n--)(t=s[n])&&(e=(o?t(a,i,e):t(e))||e);return o&&e&&b(a,i,e),e},g=(s,a)=>(i,o)=>a(i,o,s);import{Emitter as I}from"../../../../base/common/event.js";import{HierarchicalKind as d}from"../../../../base/common/hierarchicalKind.js";import{Disposable as w}from"../../../../base/common/lifecycle.js";import{editorConfigurationBaseNode as h}from"../../../../editor/common/config/editorConfigurationSchema.js";import{ILanguageFeaturesService as O}from"../../../../editor/common/services/languageFeatures.js";import{codeActionCommandId as P,refactorCommandId as N,sourceActionCommandId as k}from"../../../../editor/contrib/codeAction/browser/codeAction.js";import{CodeActionKind as p}from"../../../../editor/contrib/codeAction/common/types.js";import*as r from"../../../../nls.js";import{ConfigurationScope as z,Extensions as v}from"../../../../platform/configuration/common/configurationRegistry.js";import{IKeybindingService as E}from"../../../../platform/keybinding/common/keybinding.js";import{Registry as C}from"../../../../platform/registry/common/platform.js";const S=s=>({type:"string",enum:["always","explicit","never",!0,!1],enumDescriptions:[r.localize("alwaysSave","Triggers Code Actions on explicit saves and auto saves triggered by window or focus changes."),r.localize("explicitSave","Triggers Code Actions only when explicitly saved"),r.localize("neverSave","Never triggers Code Actions on save"),r.localize("explicitSaveBoolean",'Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of "explicit".'),r.localize("neverSaveBoolean",'Never triggers Code Actions on save. This value will be deprecated in favor of "never".')],default:"explicit",description:s}),y=s=>({type:["string","boolean"],enum:["explicit","never",!0,!1],enumDescriptions:[r.localize("explicit","Triggers Code Actions only when explicitly saved."),r.localize("never","Never triggers Code Actions on save."),r.localize("explicitBoolean",'Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of "explicit".'),r.localize("neverBoolean",'Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of "never".')],default:"explicit",description:s}),l={oneOf:[{type:"object",additionalProperties:{type:"string"}},{type:"array",items:{type:"string"}}],markdownDescription:r.localize("editor.codeActionsOnSave",'Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. Example: `"source.organizeImports": "explicit" `'),type:["object","array"],additionalProperties:{type:"string",enum:["always","explicit","never",!0,!1]},default:{},scope:z.LANGUAGE_OVERRIDABLE},A=Object.freeze({...h,properties:{"editor.codeActionsOnSave":l}}),u={oneOf:[{type:"object",additionalProperties:{type:"string"}},{type:"array",items:{type:"string"}}],markdownDescription:r.localize("notebook.codeActionsOnSave",'Run a series of Code Actions for a notebook on save. Code Actions must be specified, the file must not be saved after delay, and the editor must not be shutting down. Example: `"notebook.source.organizeImports": "explicit"`'),type:"object",additionalProperties:{type:["string","boolean"],enum:["explicit","never",!0,!1]},default:{}},H=Object.freeze({...h,properties:{"notebook.codeActionsOnSave":u}});let m=class extends w{constructor(i,o,e){super();this.languageFeatures=e;e.codeActionProvider.onDidChange(()=>{this.updateSettingsFromCodeActionProviders(),this.updateConfigurationSchemaFromContribs()},2e3),i.setHandler(n=>{this._contributedCodeActions=n.flatMap(t=>t.value).filter(t=>Array.isArray(t.actions)),this.updateConfigurationSchema(this._contributedCodeActions),this._onDidChangeContributions.fire()}),o.registerSchemaContribution({getSchemaAdditions:()=>this.getSchemaAdditions(),onDidChange:this._onDidChangeContributions.event})}_contributedCodeActions=[];settings=new Set;_onDidChangeContributions=this._register(new I);updateSettingsFromCodeActionProviders(){this.languageFeatures.codeActionProvider.allNoModel().forEach(o=>{o.providedCodeActionKinds&&o.providedCodeActionKinds.forEach(e=>{!this.settings.has(e)&&p.Source.contains(new d(e))&&this.settings.add(e)})})}updateConfigurationSchema(i){const o={},e={};for(const[n,t]of this.getSourceActions(i))this.settings.add(n),o[n]=S(r.localize("codeActionsOnSave.generic","Controls whether '{0}' actions should be run on file save.",t.title)),e[n]=y(r.localize("codeActionsOnSave.generic","Controls whether '{0}' actions should be run on file save.",t.title));l.properties=o,u.properties=e,C.as(v.Configuration).notifyConfigurationSchemaUpdated(A)}updateConfigurationSchemaFromContribs(){const i={...l.properties},o={...u.properties};for(const e of this.settings)i[e]||(i[e]=S(r.localize("codeActionsOnSave.generic","Controls whether '{0}' actions should be run on file save.",e)),o[e]=y(r.localize("codeActionsOnSave.generic","Controls whether '{0}' actions should be run on file save.",e)));l.properties=i,u.properties=o,C.as(v.Configuration).notifyConfigurationSchemaUpdated(A)}getSourceActions(i){const o=new Map;for(const e of i)for(const n of e.actions){const t=new d(n.kind);p.Source.contains(t)&&o.set(t.value,n)}return o}getSchemaAdditions(){const i=(e,n)=>({if:{required:["command"],properties:{command:{const:e}}},then:{properties:{args:{required:["kind"],properties:{kind:{anyOf:[{enum:n.map(t=>t.kind),enumDescriptions:n.map(t=>t.description??t.title)},{type:"string"}]}}}}}}),o=e=>{const n=this._contributedCodeActions.flatMap(c=>c.actions),t=new Map;for(const c of n)!t.has(c.kind)&&e.contains(new d(c.kind))&&t.set(c.kind,c);return Array.from(t.values())};return[i(P,o(d.Empty)),i(N,o(p.Refactor)),i(k,o(p.Source))]}};m=f([g(1,E),g(2,O)],m);export{m as CodeActionsContribution,A as editorConfiguration,H as notebookEditorConfiguration};
