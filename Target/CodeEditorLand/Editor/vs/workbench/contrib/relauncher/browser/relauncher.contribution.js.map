{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose, Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWindowsConfiguration, IWindowSettings, TitleBarSetting, TitlebarStyle } from '../../../../platform/window/common/window.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { ConfigurationTarget, IConfigurationChangeEvent, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { localize } from '../../../../nls.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { isMacintosh, isNative, isLinux } from '../../../../base/common/platform.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\n\ninterface IConfiguration extends IWindowsConfiguration {\n\tupdate?: { mode?: string };\n\tdebug?: { console?: { wordWrap?: boolean } };\n\teditor?: { accessibilitySupport?: 'on' | 'off' | 'auto' };\n\tsecurity?: { workspace?: { trust?: { enabled?: boolean } }; restrictUNCAccess?: boolean };\n\twindow: IWindowSettings;\n\tworkbench?: { enableExperiments?: boolean };\n\t_extensionsGallery?: { enablePPE?: boolean };\n\taccessibility?: { verbosity?: { debug?: boolean } };\n}\n\nexport class SettingsChangeRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate static SETTINGS = [\n\t\tTitleBarSetting.TITLE_BAR_STYLE,\n\t\t'window.nativeTabs',\n\t\t'window.nativeFullScreen',\n\t\t'window.clickThroughInactive',\n\t\t'window.experimentalControlOverlay',\n\t\t'update.mode',\n\t\t'editor.accessibilitySupport',\n\t\t'security.workspace.trust.enabled',\n\t\t'workbench.enableExperiments',\n\t\t'_extensionsGallery.enablePPE',\n\t\t'security.restrictUNCAccess',\n\t\t'accessibility.verbosity.debug'\n\t];\n\n\tprivate readonly titleBarStyle = new ChangeObserver<TitlebarStyle>('string');\n\tprivate readonly nativeTabs = new ChangeObserver('boolean');\n\tprivate readonly nativeFullScreen = new ChangeObserver('boolean');\n\tprivate readonly clickThroughInactive = new ChangeObserver('boolean');\n\tprivate readonly linuxWindowControlOverlay = new ChangeObserver('boolean');\n\tprivate readonly updateMode = new ChangeObserver('string');\n\tprivate accessibilitySupport: 'on' | 'off' | 'auto' | undefined;\n\tprivate readonly workspaceTrustEnabled = new ChangeObserver('boolean');\n\tprivate readonly experimentsEnabled = new ChangeObserver('boolean');\n\tprivate readonly enablePPEExtensionsGallery = new ChangeObserver('boolean');\n\tprivate readonly restrictUNCAccess = new ChangeObserver('boolean');\n\tprivate readonly accessibilityVerbosityDebug = new ChangeObserver('boolean');\n\n\tconstructor(\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper();\n\n\t\tthis.onConfigurationChange(undefined);\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange(e)));\n\t}\n\n\tprivate onConfigurationChange(e: IConfigurationChangeEvent | undefined): void {\n\t\tif (e && !SettingsChangeRelauncher.SETTINGS.some(key => e.affectsConfiguration(key))) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tlet changed = false;\n\n\t\tfunction processChanged(didChange: boolean) {\n\t\t\tchanged = changed || didChange;\n\t\t}\n\n\t\tconst config = this.configurationService.getValue<IConfiguration>();\n\t\tif (isNative) {\n\n\t\t\t// Titlebar style\n\t\t\tprocessChanged((config.window.titleBarStyle === TitlebarStyle.NATIVE || config.window.titleBarStyle === TitlebarStyle.CUSTOM) && this.titleBarStyle.handleChange(config.window?.titleBarStyle));\n\n\t\t\t// macOS: Native tabs\n\t\t\tprocessChanged(isMacintosh && this.nativeTabs.handleChange(config.window?.nativeTabs));\n\n\t\t\t// macOS: Native fullscreen\n\t\t\tprocessChanged(isMacintosh && this.nativeFullScreen.handleChange(config.window?.nativeFullScreen));\n\n\t\t\t// macOS: Click through (accept first mouse)\n\t\t\tprocessChanged(isMacintosh && this.clickThroughInactive.handleChange(config.window?.clickThroughInactive));\n\n\t\t\t// Linux: WCO\n\t\t\tprocessChanged(isLinux && this.linuxWindowControlOverlay.handleChange(config.window?.experimentalControlOverlay));\n\n\t\t\t// Update mode\n\t\t\tprocessChanged(this.updateMode.handleChange(config.update?.mode));\n\n\t\t\t// On linux turning on accessibility support will also pass this flag to the chrome renderer, thus a restart is required\n\t\t\tif (isLinux && typeof config.editor?.accessibilitySupport === 'string' && config.editor.accessibilitySupport !== this.accessibilitySupport) {\n\t\t\t\tthis.accessibilitySupport = config.editor.accessibilitySupport;\n\t\t\t\tif (this.accessibilitySupport === 'on') {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Workspace trust\n\t\t\tprocessChanged(this.workspaceTrustEnabled.handleChange(config?.security?.workspace?.trust?.enabled));\n\n\t\t\t// UNC host access restrictions\n\t\t\tprocessChanged(this.restrictUNCAccess.handleChange(config?.security?.restrictUNCAccess));\n\n\t\t\t// Debug accessibility verbosity\n\t\t\tprocessChanged(this.accessibilityVerbosityDebug.handleChange(config?.accessibility?.verbosity?.debug));\n\t\t}\n\n\t\t// Experiments\n\t\tprocessChanged(this.experimentsEnabled.handleChange(config.workbench?.enableExperiments));\n\n\t\t// Profiles\n\t\tprocessChanged(this.productService.quality !== 'stable' && this.enablePPEExtensionsGallery.handleChange(config._extensionsGallery?.enablePPE));\n\n\t\t// Notify only when changed from an event and the change\n\t\t// was not triggerd programmatically (e.g. from experiments)\n\t\tif (changed && e && e.source !== ConfigurationTarget.DEFAULT) {\n\t\t\tthis.doConfirm(\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize('relaunchSettingMessage', \"A setting has changed that requires a restart to take effect.\") :\n\t\t\t\t\tlocalize('relaunchSettingMessageWeb', \"A setting has changed that requires a reload to take effect.\"),\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize('relaunchSettingDetail', \"Press the restart button to restart {0} and enable the setting.\", this.productService.nameLong) :\n\t\t\t\t\tlocalize('relaunchSettingDetailWeb', \"Press the reload button to reload {0} and enable the setting.\", this.productService.nameLong),\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize({ key: 'restart', comment: ['&& denotes a mnemonic'] }, \"&&Restart\") :\n\t\t\t\t\tlocalize({ key: 'restartWeb', comment: ['&& denotes a mnemonic'] }, \"&&Reload\"),\n\t\t\t\t() => this.hostService.restart()\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doConfirm(message: string, detail: string, primaryButton: string, confirmedFn: () => void): Promise<void> {\n\t\tif (this.hostService.hasFocus) {\n\t\t\tconst { confirmed } = await this.dialogService.confirm({ message, detail, primaryButton });\n\t\t\tif (confirmed) {\n\t\t\t\tconfirmedFn();\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface TypeNameToType {\n\treadonly boolean: boolean;\n\treadonly string: string;\n}\n\nclass ChangeObserver<T> {\n\n\tstatic create<TTypeName extends 'boolean' | 'string'>(typeName: TTypeName): ChangeObserver<TypeNameToType[TTypeName]> {\n\t\treturn new ChangeObserver(typeName);\n\t}\n\n\tconstructor(private readonly typeName: string) { }\n\n\tprivate lastValue: T | undefined = undefined;\n\n\t/**\n\t * Returns if there was a change compared to the last value\n\t */\n\thandleChange(value: T | undefined): boolean {\n\t\tif (typeof value === this.typeName && value !== this.lastValue) {\n\t\t\tthis.lastValue = value;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport class WorkspaceChangeExtHostRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate firstFolderResource?: URI;\n\tprivate extensionHostRestarter: RunOnceScheduler;\n\n\tprivate onDidChangeWorkspaceFoldersUnbind: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.extensionHostRestarter = this._register(new RunOnceScheduler(async () => {\n\t\t\tif (!!environmentService.extensionTestsLocationURI) {\n\t\t\t\treturn; // no restart when in tests: see https://github.com/microsoft/vscode/issues/66936\n\t\t\t}\n\n\t\t\tif (environmentService.remoteAuthority) {\n\t\t\t\thostService.reload(); // TODO@aeschli, workaround\n\t\t\t} else if (isNative) {\n\t\t\t\tconst stopped = await extensionService.stopExtensionHosts(localize('restartExtensionHost.reason', \"Restarting extension host due to a workspace folder change.\"));\n\t\t\t\tif (stopped) {\n\t\t\t\t\textensionService.startExtensionHosts();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 10));\n\n\t\tthis.contextService.getCompleteWorkspace()\n\t\t\t.then(workspace => {\n\t\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\t\t\tthis.handleWorkbenchState();\n\t\t\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => setTimeout(() => this.handleWorkbenchState())));\n\t\t\t});\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.onDidChangeWorkspaceFoldersUnbind?.dispose();\n\t\t}));\n\t}\n\n\tprivate handleWorkbenchState(): void {\n\n\t\t// React to folder changes when we are in workspace state\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\n\t\t\t// Update our known first folder path if we entered workspace\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\n\t\t\t// Install workspace folder listener\n\t\t\tif (!this.onDidChangeWorkspaceFoldersUnbind) {\n\t\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = this.contextService.onDidChangeWorkspaceFolders(() => this.onDidChangeWorkspaceFolders());\n\t\t\t}\n\t\t}\n\n\t\t// Ignore the workspace folder changes in EMPTY or FOLDER state\n\t\telse {\n\t\t\tdispose(this.onDidChangeWorkspaceFoldersUnbind);\n\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = undefined;\n\t\t}\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(): void {\n\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t// Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n\t\tconst newFirstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\tif (!isEqual(this.firstFolderResource, newFirstFolderResource)) {\n\t\t\tthis.firstFolderResource = newFirstFolderResource;\n\n\t\t\tthis.extensionHostRestarter.schedule(); // buffer calls to extension host restart\n\t\t}\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(SettingsChangeRelauncher, LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(WorkspaceChangeExtHostRelauncher, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": []
}
