{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/encryption/electron-sandbox/encryption.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isLinux } from '../../../../base/common/platform.js';\nimport { parse } from '../../../../base/common/jsonc.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { IJSONEditingService } from '../../../services/configuration/common/jsonEditing.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\n\nclass EncryptionContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tthis.migrateToGnomeLibsecret();\n\t}\n\n\t/**\n\t * Migrate the user from using the gnome or gnome-keyring password-store to gnome-libsecret.\n\t * TODO@TylerLeonhardt: This migration can be removed in 3 months or so and then storage\n\t * can be cleaned up.\n\t */\n\tprivate async migrateToGnomeLibsecret(): Promise<void> {\n\t\tif (!isLinux || this.storageService.getBoolean('encryption.migratedToGnomeLibsecret', StorageScope.APPLICATION, false)) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\tconst argv = parse(content.value.toString());\n\t\t\tif (argv['password-store'] === 'gnome' || argv['password-store'] === 'gnome-keyring') {\n\t\t\t\tthis.jsonEditingService.write(this.environmentService.argvResource, [{ path: ['password-store'], value: 'gnome-libsecret' }], true);\n\t\t\t}\n\t\t\tthis.storageService.store('encryption.migratedToGnomeLibsecret', true, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(EncryptionContribution, LifecyclePhase.Eventually);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,wBAAwB,iCAAiC,cAAc,2BAA2B;AAC3G,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAE/B,IAAM,yBAAN,MAA+D;AAAA,EAC9D,YACuC,oBACA,oBACP,aACG,gBACjC;AAJqC;AACA;AACP;AACG;AAElC,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAvBD,OAe+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAe9D,MAAc,0BAAyC;AACtD,QAAI,CAAC,WAAW,KAAK,eAAe,WAAW,uCAAuC,aAAa,aAAa,KAAK,GAAG;AACvH;AAAA,IACD;AACA,QAAI;AACH,YAAM,UAAU,MAAM,KAAK,YAAY,SAAS,KAAK,mBAAmB,YAAY;AACpF,YAAM,OAAO,MAAM,QAAQ,MAAM,SAAS,CAAC;AAC3C,UAAI,KAAK,gBAAgB,MAAM,WAAW,KAAK,gBAAgB,MAAM,iBAAiB;AACrF,aAAK,mBAAmB,MAAM,KAAK,mBAAmB,cAAc,CAAC,EAAE,MAAM,CAAC,gBAAgB,GAAG,OAAO,kBAAkB,CAAC,GAAG,IAAI;AAAA,MACnI;AACA,WAAK,eAAe,MAAM,uCAAuC,MAAM,aAAa,aAAa,cAAc,IAAI;AAAA,IACpH,SAAS,OAAO;AACf,cAAQ,MAAM,KAAK;AAAA,IACpB;AAAA,EACD;AACD;AA9BM,yBAAN;AAAA,EAEG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GALG;AAgCN,SAAS,GAAoC,oBAAoB,SAAS,EAAE,8BAA8B,wBAAwB,eAAe,UAAU;",
  "names": []
}
