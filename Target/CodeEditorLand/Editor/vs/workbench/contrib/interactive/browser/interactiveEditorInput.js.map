{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/interactive/browser/interactiveEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport type { IReference } from \"../../../../base/common/lifecycle.js\";\nimport * as paths from \"../../../../base/common/path.js\";\nimport { isEqual, joinPath } from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../../editor/common/languages/modesRegistry.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IFileDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tEditorInputCapabilities,\n\ttype GroupIdentifier,\n\ttype IRevertOptions,\n\ttype ISaveOptions,\n\ttype IUntypedEditorInput,\n} from \"../../../common/editor.js\";\nimport { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport {\n\ttype IResolvedNotebookEditorModel,\n\tNotebookSetting,\n} from \"../../notebook/common/notebookCommon.js\";\nimport {\n\ttype ICompositeNotebookEditorInput,\n\tNotebookEditorInput,\n} from \"../../notebook/common/notebookEditorInput.js\";\nimport { INotebookService } from \"../../notebook/common/notebookService.js\";\nimport { IInteractiveDocumentService } from \"./interactiveDocumentService.js\";\nimport { IInteractiveHistoryService } from \"./interactiveHistoryService.js\";\n\nexport class InteractiveEditorInput\n\textends EditorInput\n\timplements ICompositeNotebookEditorInput\n{\n\tstatic create(\n\t\tinstantiationService: IInstantiationService,\n\t\tresource: URI,\n\t\tinputResource: URI,\n\t\ttitle?: string,\n\t\tlanguage?: string,\n\t) {\n\t\treturn instantiationService.createInstance(\n\t\t\tInteractiveEditorInput,\n\t\t\tresource,\n\t\t\tinputResource,\n\t\t\ttitle,\n\t\t\tlanguage,\n\t\t);\n\t}\n\n\tprivate static windowNames: Record<string, string> = {};\n\n\tstatic setName(notebookUri: URI, title: string | undefined) {\n\t\tif (title) {\n\t\t\tthis.windowNames[notebookUri.path] = title;\n\t\t}\n\t}\n\n\tstatic readonly ID: string = \"workbench.input.interactive\";\n\n\tpublic override get editorId(): string {\n\t\treturn \"interactive\";\n\t}\n\n\toverride get typeId(): string {\n\t\treturn InteractiveEditorInput.ID;\n\t}\n\n\tprivate name: string;\n\tprivate readonly isScratchpad: boolean;\n\n\tget language() {\n\t\treturn (\n\t\t\tthis._inputModelRef?.object.textEditorModel.getLanguageId() ??\n\t\t\tthis._initLanguage\n\t\t);\n\t}\n\tprivate _initLanguage?: string;\n\n\tprivate _notebookEditorInput: NotebookEditorInput;\n\tget notebookEditorInput() {\n\t\treturn this._notebookEditorInput;\n\t}\n\n\tget editorInputs() {\n\t\treturn [this._notebookEditorInput];\n\t}\n\n\tprivate _resource: URI;\n\n\toverride get resource(): URI {\n\t\treturn this._resource;\n\t}\n\n\tprivate _inputResource: URI;\n\n\tget inputResource() {\n\t\treturn this._inputResource;\n\t}\n\tprivate _inputResolver: Promise<IResolvedNotebookEditorModel | null> | null;\n\tprivate _editorModelReference: IResolvedNotebookEditorModel | null;\n\n\tprivate _inputModelRef: IReference<IResolvedTextEditorModel> | null;\n\n\tget primary(): EditorInput {\n\t\treturn this._notebookEditorInput;\n\t}\n\tprivate _textModelService: ITextModelService;\n\tprivate _interactiveDocumentService: IInteractiveDocumentService;\n\tprivate _historyService: IInteractiveHistoryService;\n\n\tconstructor(\n\t\tresource: URI,\n\t\tinputResource: URI,\n\t\ttitle: string | undefined,\n\t\tlanguageId: string | undefined,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@IInteractiveDocumentService\n\t\tinteractiveDocumentService: IInteractiveDocumentService,\n\t\t@IInteractiveHistoryService historyService: IInteractiveHistoryService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IFileDialogService\n\t\tprivate readonly _fileDialogService: IFileDialogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tconst input = NotebookEditorInput.getOrCreate(\n\t\t\tinstantiationService,\n\t\t\tresource,\n\t\t\tundefined,\n\t\t\t\"interactive\",\n\t\t\t{},\n\t\t);\n\t\tsuper();\n\t\tthis.isScratchpad =\n\t\t\tconfigurationService.getValue<boolean>(\n\t\t\t\tNotebookSetting.InteractiveWindowPromptToSave,\n\t\t\t) !== true;\n\t\tthis._notebookEditorInput = input;\n\t\tthis._register(this._notebookEditorInput);\n\t\tthis.name =\n\t\t\ttitle ??\n\t\t\tInteractiveEditorInput.windowNames[resource.path] ??\n\t\t\tpaths.basename(resource.path, paths.extname(resource.path));\n\t\tthis._initLanguage = languageId;\n\t\tthis._resource = resource;\n\t\tthis._inputResource = inputResource;\n\t\tthis._inputResolver = null;\n\t\tthis._editorModelReference = null;\n\t\tthis._inputModelRef = null;\n\t\tthis._textModelService = textModelService;\n\t\tthis._interactiveDocumentService = interactiveDocumentService;\n\t\tthis._historyService = historyService;\n\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tconst oncePrimaryDisposed = Event.once(this.primary.onWillDispose);\n\t\tthis._register(\n\t\t\toncePrimaryDisposed(() => {\n\t\t\t\tif (!this.isDisposed()) {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Re-emit some events from the primary side to the outside\n\t\tthis._register(\n\t\t\tthis.primary.onDidChangeDirty(() => this._onDidChangeDirty.fire()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.primary.onDidChangeLabel(() => this._onDidChangeLabel.fire()),\n\t\t);\n\n\t\t// Re-emit some events from both sides to the outside\n\t\tthis._register(\n\t\t\tthis.primary.onDidChangeCapabilities(() =>\n\t\t\t\tthis._onDidChangeCapabilities.fire(),\n\t\t\t),\n\t\t);\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\tconst scratchPad = this.isScratchpad\n\t\t\t? EditorInputCapabilities.Scratchpad\n\t\t\t: 0;\n\n\t\treturn (\n\t\t\tEditorInputCapabilities.Untitled |\n\t\t\tEditorInputCapabilities.Readonly |\n\t\t\tscratchPad\n\t\t);\n\t}\n\n\tprivate async _resolveEditorModel() {\n\t\tif (!this._editorModelReference) {\n\t\t\tthis._editorModelReference =\n\t\t\t\tawait this._notebookEditorInput.resolve();\n\t\t}\n\n\t\treturn this._editorModelReference;\n\t}\n\n\toverride async resolve(): Promise<IResolvedNotebookEditorModel | null> {\n\t\tif (this._editorModelReference) {\n\t\t\treturn this._editorModelReference;\n\t\t}\n\n\t\tif (this._inputResolver) {\n\t\t\treturn this._inputResolver;\n\t\t}\n\n\t\tthis._inputResolver = this._resolveEditorModel();\n\n\t\treturn this._inputResolver;\n\t}\n\n\tasync resolveInput(language?: string) {\n\t\tif (this._inputModelRef) {\n\t\t\treturn this._inputModelRef.object.textEditorModel;\n\t\t}\n\n\t\tconst resolvedLanguage =\n\t\t\tlanguage ?? this._initLanguage ?? PLAINTEXT_LANGUAGE_ID;\n\t\tthis._interactiveDocumentService.willCreateInteractiveDocument(\n\t\t\tthis.resource,\n\t\t\tthis.inputResource,\n\t\t\tresolvedLanguage,\n\t\t);\n\t\tthis._inputModelRef = await this._textModelService.createModelReference(\n\t\t\tthis.inputResource,\n\t\t);\n\n\t\treturn this._inputModelRef.object.textEditorModel;\n\t}\n\n\toverride async save(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: ISaveOptions,\n\t): Promise<EditorInput | IUntypedEditorInput | undefined> {\n\t\tif (this._editorModelReference) {\n\t\t\tif (this.hasCapability(EditorInputCapabilities.Untitled)) {\n\t\t\t\treturn this.saveAs(group, options);\n\t\t\t} else {\n\t\t\t\tawait this._editorModelReference.save(options);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride async saveAs(\n\t\tgroup: GroupIdentifier,\n\t\toptions?: ISaveOptions,\n\t): Promise<IUntypedEditorInput | undefined> {\n\t\tif (!this._editorModelReference) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst provider =\n\t\t\tthis._notebookService.getContributedNotebookType(\"interactive\");\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst filename = this.getName() + \".ipynb\";\n\t\tconst pathCandidate = joinPath(\n\t\t\tawait this._fileDialogService.defaultFilePath(),\n\t\t\tfilename,\n\t\t);\n\n\t\tconst target = await this._fileDialogService.pickFileToSave(\n\t\t\tpathCandidate,\n\t\t\toptions?.availableFileSystems,\n\t\t);\n\t\tif (!target) {\n\t\t\treturn undefined; // save cancelled\n\t\t}\n\n\t\tconst saved = await this._editorModelReference.saveAs(target);\n\t\tif (saved && \"resource\" in saved && saved.resource) {\n\t\t\tthis._notebookService\n\t\t\t\t.getNotebookTextModel(saved.resource)\n\t\t\t\t?.dispose();\n\t\t}\n\t\treturn saved;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (super.matches(otherInput)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (otherInput instanceof InteractiveEditorInput) {\n\t\t\treturn (\n\t\t\t\tisEqual(this.resource, otherInput.resource) &&\n\t\t\t\tisEqual(this.inputResource, otherInput.inputResource)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\toverride getName() {\n\t\treturn this.name;\n\t}\n\n\toverride isDirty(): boolean {\n\t\tif (this.isScratchpad) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._editorModelReference?.isDirty() ?? false;\n\t}\n\n\toverride isModified() {\n\t\treturn this._editorModelReference?.isModified() ?? false;\n\t}\n\n\toverride async revert(\n\t\t_group: GroupIdentifier,\n\t\toptions?: IRevertOptions,\n\t): Promise<void> {\n\t\tif (\n\t\t\tthis._editorModelReference &&\n\t\t\tthis._editorModelReference.isDirty()\n\t\t) {\n\t\t\tawait this._editorModelReference.revert(options);\n\t\t}\n\t}\n\n\toverride dispose() {\n\t\t// we support closing the interactive window without prompt, so the editor model should not be dirty\n\t\tthis._editorModelReference?.revert({ soft: true });\n\n\t\tthis._notebookEditorInput?.dispose();\n\t\tthis._editorModelReference?.dispose();\n\t\tthis._editorModelReference = null;\n\t\tthis._interactiveDocumentService.willRemoveInteractiveDocument(\n\t\t\tthis.resource,\n\t\t\tthis.inputResource,\n\t\t);\n\t\tthis._inputModelRef?.dispose();\n\t\tthis._inputModelRef = null;\n\t\tsuper.dispose();\n\t}\n\n\tget historyService() {\n\t\treturn this._historyService;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
