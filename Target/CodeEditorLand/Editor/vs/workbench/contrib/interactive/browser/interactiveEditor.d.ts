import "./media/interactive.css";
import * as DOM from "../../../../base/browser/dom.js";
import type { CancellationToken } from "../../../../base/common/cancellation.js";
import { type Event } from "../../../../base/common/event.js";
import { ICodeEditorService } from "../../../../editor/browser/services/codeEditorService.js";
import { CodeEditorWidget } from "../../../../editor/browser/widget/codeEditor/codeEditorWidget.js";
import type { ICodeEditorViewState } from "../../../../editor/common/editorCommon.js";
import { ILanguageService } from "../../../../editor/common/languages/language.js";
import { ITextResourceConfigurationService } from "../../../../editor/common/services/textResourceConfiguration.js";
import { IMenuService } from "../../../../platform/actions/common/actions.js";
import { IConfigurationService } from "../../../../platform/configuration/common/configuration.js";
import { IContextKeyService } from "../../../../platform/contextkey/common/contextkey.js";
import { IContextMenuService } from "../../../../platform/contextview/browser/contextView.js";
import { type ITextEditorOptions } from "../../../../platform/editor/common/editor.js";
import { IInstantiationService } from "../../../../platform/instantiation/common/instantiation.js";
import { IKeybindingService } from "../../../../platform/keybinding/common/keybinding.js";
import { IStorageService } from "../../../../platform/storage/common/storage.js";
import { ITelemetryService } from "../../../../platform/telemetry/common/telemetry.js";
import { IThemeService } from "../../../../platform/theme/common/themeService.js";
import { EditorPane } from "../../../browser/parts/editor/editorPane.js";
import { type IEditorOpenContext, type IEditorPaneScrollPosition, type IEditorPaneSelectionChangeEvent, type IEditorPaneWithScrolling } from "../../../common/editor.js";
import { IEditorGroupsService, type IEditorGroup } from "../../../services/editor/common/editorGroupsService.js";
import { IExtensionService } from "../../../services/extensions/common/extensions.js";
import type { INotebookEditorOptions, INotebookEditorViewState } from "../../notebook/browser/notebookBrowser.js";
import type { NotebookEditorWidget } from "../../notebook/browser/notebookEditorWidget.js";
import { INotebookEditorService } from "../../notebook/browser/services/notebookEditorService.js";
import { INotebookExecutionStateService } from "../../notebook/common/notebookExecutionStateService.js";
import { INotebookKernelService } from "../../notebook/common/notebookKernelService.js";
import { InteractiveEditorInput } from "./interactiveEditorInput.js";
import "./interactiveEditor.css";
export interface InteractiveEditorViewState {
    readonly notebook?: INotebookEditorViewState;
    readonly input?: ICodeEditorViewState | null;
}
export interface InteractiveEditorOptions extends ITextEditorOptions {
    readonly viewState?: InteractiveEditorViewState;
}
export declare class InteractiveEditor extends EditorPane implements IEditorPaneWithScrolling {
    private _rootElement;
    private _styleElement;
    private _notebookEditorContainer;
    private _notebookWidget;
    private _inputCellContainer;
    private _inputFocusIndicator;
    private _inputRunButtonContainer;
    private _inputEditorContainer;
    private _codeEditorWidget;
    private _notebookWidgetService;
    private _instantiationService;
    private _languageService;
    private _contextKeyService;
    private _configurationService;
    private _notebookKernelService;
    private _keybindingService;
    private _menuService;
    private _contextMenuService;
    private _editorGroupService;
    private _notebookExecutionStateService;
    private _extensionService;
    private readonly _widgetDisposableStore;
    private _lastLayoutDimensions?;
    private _editorOptions;
    private _notebookOptions;
    private _editorMemento;
    private readonly _groupListener;
    private _runbuttonToolbar;
    private _hintElement;
    private _onDidFocusWidget;
    get onDidFocus(): Event<void>;
    private _onDidChangeSelection;
    readonly onDidChangeSelection: Event<IEditorPaneSelectionChangeEvent>;
    private _onDidChangeScroll;
    readonly onDidChangeScroll: Event<void>;
    constructor(group: IEditorGroup, telemetryService: ITelemetryService, themeService: IThemeService, storageService: IStorageService, instantiationService: IInstantiationService, notebookWidgetService: INotebookEditorService, contextKeyService: IContextKeyService, codeEditorService: ICodeEditorService, notebookKernelService: INotebookKernelService, languageService: ILanguageService, keybindingService: IKeybindingService, configurationService: IConfigurationService, menuService: IMenuService, contextMenuService: IContextMenuService, editorGroupService: IEditorGroupsService, textResourceConfigurationService: ITextResourceConfigurationService, notebookExecutionStateService: INotebookExecutionStateService, extensionService: IExtensionService);
    private get inputCellContainerHeight();
    private get inputCellEditorHeight();
    protected createEditor(parent: HTMLElement): void;
    private _setupRunButtonToolbar;
    private _createLayoutStyles;
    private _computeEditorOptions;
    protected saveState(): void;
    getViewState(): InteractiveEditorViewState | undefined;
    private _saveEditorViewState;
    private _loadNotebookEditorViewState;
    setInput(input: InteractiveEditorInput, options: InteractiveEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    setOptions(options: INotebookEditorOptions | undefined): void;
    private _toEditorPaneSelectionChangeReason;
    private _cellAtBottom;
    private _scrollIfNecessary;
    private _syncWithKernel;
    layout(dimension: DOM.Dimension, position: DOM.IDomPosition): void;
    private _layoutWidgets;
    private _validateDimension;
    private _updateInputHint;
    getScrollPosition(): IEditorPaneScrollPosition;
    setScrollPosition(position: IEditorPaneScrollPosition): void;
    focus(): void;
    focusHistory(): void;
    protected setEditorVisible(visible: boolean): void;
    clearInput(): void;
    getControl(): {
        notebookEditor: NotebookEditorWidget | undefined;
        codeEditor: CodeEditorWidget;
    };
}
