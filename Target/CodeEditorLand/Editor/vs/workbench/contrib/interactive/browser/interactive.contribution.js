var ge=Object.defineProperty;var me=Object.getOwnPropertyDescriptor;var q=(i,t,e,o)=>{for(var r=o>1?void 0:o?me(t,e):t,c=i.length-1,n;c>=0;c--)(n=i[c])&&(r=(o?n(t,e,r):n(r))||r);return o&&r&&ge(t,e,r),r},m=(i,t)=>(e,o)=>t(e,o,i);import{Iterable as fe}from"../../../../base/common/iterator.js";import{KeyCode as v,KeyMod as D}from"../../../../base/common/keyCodes.js";import{Disposable as te}from"../../../../base/common/lifecycle.js";import{parse as Ie}from"../../../../base/common/marshalling.js";import{Schemas as C}from"../../../../base/common/network.js";import{extname as H,isEqual as be}from"../../../../base/common/resources.js";import{isFalsyOrWhitespace as ye}from"../../../../base/common/strings.js";import{URI as b}from"../../../../base/common/uri.js";import{IBulkEditService as he}from"../../../../editor/browser/services/bulkEditService.js";import{EditOperation as ke}from"../../../../editor/common/core/editOperation.js";import{PLAINTEXT_LANGUAGE_ID as we}from"../../../../editor/common/languages/modesRegistry.js";import{IModelService as Se}from"../../../../editor/common/services/model.js";import{ITextModelService as Ce}from"../../../../editor/common/services/resolverService.js";import{peekViewBorder as V}from"../../../../editor/contrib/peekView/browser/peekView.js";import{Context as B}from"../../../../editor/contrib/suggest/browser/suggest.js";import{localize as y,localize2 as x}from"../../../../nls.js";import{Action2 as h,MenuId as z,registerAction2 as k}from"../../../../platform/actions/common/actions.js";import{IConfigurationService as xe}from"../../../../platform/configuration/common/configuration.js";import{Extensions as We}from"../../../../platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as a}from"../../../../platform/contextkey/common/contextkey.js";import{EditorActivation as Te}from"../../../../platform/editor/common/editor.js";import{SyncDescriptor as Ne}from"../../../../platform/instantiation/common/descriptors.js";import{InstantiationType as oe,registerSingleton as ie}from"../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as re}from"../../../../platform/instantiation/common/instantiation.js";import{KeybindingWeight as P}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{ILogService as Re}from"../../../../platform/log/common/log.js";import{Registry as j}from"../../../../platform/registry/common/platform.js";import{contrastBorder as ne,ifDefinedThenElse as L,listInactiveSelectionBackground as K,registerColor as de}from"../../../../platform/theme/common/colorRegistry.js";import{EditorPaneDescriptor as De}from"../../../browser/editor.js";import{WorkbenchPhase as Pe,registerWorkbenchContribution2 as G}from"../../../common/contributions.js";import{EditorExtensions as ce,EditorsOrder as $}from"../../../common/editor.js";import{PANEL_BORDER as se}from"../../../common/theme.js";import{columnToEditorGroup as Oe}from"../../../services/editor/common/editorGroupColumn.js";import{IEditorGroupsService as Ue}from"../../../services/editor/common/editorGroupsService.js";import{IEditorResolverService as _e,RegisteredEditorPriority as Q}from"../../../services/editor/common/editorResolverService.js";import{IEditorService as f}from"../../../services/editor/common/editorService.js";import{IExtensionService as Ae}from"../../../services/extensions/common/extensions.js";import{IWorkingCopyEditorService as Me}from"../../../services/workingCopy/common/workingCopyEditorService.js";import{ResourceNotebookCellEdit as qe}from"../../bulkEdit/browser/bulkCellEdits.js";import{NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT as Y}from"../../notebook/browser/controller/coreActions.js";import*as Ve from"../../notebook/browser/notebookIcons.js";import{INotebookEditorService as Be}from"../../notebook/browser/services/notebookEditorService.js";import{CellEditType as Le,CellKind as Ke,CellUri as ae,INTERACTIVE_WINDOW_EDITOR_ID as J,NotebookSetting as Fe,NotebookWorkingCopyTypeIdentifier as He}from"../../notebook/common/notebookCommon.js";import{InteractiveWindowOpen as le}from"../../notebook/common/notebookContextKeys.js";import{INotebookKernelService as ze}from"../../notebook/common/notebookKernelService.js";import{INotebookService as je}from"../../notebook/common/notebookService.js";import{INTERACTIVE_INPUT_CURSOR_BOUNDARY as W,InteractiveWindowSetting as X}from"./interactiveCommon.js";import{IInteractiveDocumentService as Ge,InteractiveDocumentService as $e}from"./interactiveDocumentService.js";import{InteractiveEditor as Qe}from"./interactiveEditor.js";import{InteractiveEditorInput as E}from"./interactiveEditorInput.js";import{IInteractiveHistoryService as M,InteractiveHistoryService as Ye}from"./interactiveHistoryService.js";const w=x("interactiveWindow","Interactive Window");j.as(ce.EditorPane).registerEditorPane(De.create(Qe,J,"Interactive Window"),[new Ne(E)]);let O=class extends te{constructor(e,o,r,c){super();this.instantiationService=c;e.getContributedNotebookType("interactive")||this._register(e.registerContributedNotebookType("interactive",{providerDisplayName:"Interactive Notebook",displayName:"Interactive",filenamePattern:["*.interactive"],priority:Q.builtin})),o.registerEditor(`${C.vscodeInteractiveInput}:/**`,{id:"vscode-interactive-input",label:"Interactive Editor",priority:Q.exclusive},{canSupportResource:d=>d.scheme===C.vscodeInteractiveInput,singlePerResource:!0},{createEditorInput:({resource:d})=>r.getEditors($.SEQUENTIAL).find(l=>l.editor instanceof E&&l.editor.inputResource.toString()===d.toString())}),o.registerEditor("*.interactive",{id:"interactive",label:"Interactive Editor",priority:Q.exclusive},{canSupportResource:d=>d.scheme===C.untitled&&H(d)===".interactive"||d.scheme===C.vscodeNotebookCell&&H(d)===".interactive",singlePerResource:!0},{createEditorInput:({resource:d,options:s})=>{const l=ae.parse(d);let g,p=d;l&&(g={resource:d,options:s},p=l.notebook);const I={...s,cellOptions:g,cellRevealType:void 0,cellSelections:void 0,isReadOnly:void 0,viewState:void 0,indexedCellOptions:void 0};return{editor:Z(p,this.instantiationService),options:I}},createUntitledEditorInput:({resource:d,options:s})=>{if(!d)throw new Error("Interactive window editors must have a resource name");const l=ae.parse(d);let g;l&&(g={resource:d,options:s});const p={...s,cellOptions:g,cellRevealType:void 0,cellSelections:void 0,isReadOnly:void 0,viewState:void 0,indexedCellOptions:void 0};return{editor:Z(d,this.instantiationService),options:p}}})}static ID="workbench.contrib.interactiveDocument"};O=q([m(0,je),m(1,_e),m(2,f),m(3,re)],O);let U=class{constructor(t,e){this._modelService=e;this._registration=t.registerTextModelContentProvider(C.vscodeInteractiveInput,this)}static ID="workbench.contrib.interactiveInputContentProvider";_registration;dispose(){this._registration.dispose()}async provideTextContent(t){const e=this._modelService.getModel(t);return e||this._modelService.createModel("",null,t,!1)}};U=q([m(0,Ce),m(1,Se)],U);function Z(i,t){const e=/\/Interactive-(\d+)/.exec(i.path),o=e&&e[1]?`/InteractiveInput-${e[1]}`:"InteractiveInput",r=b.from({scheme:C.vscodeInteractiveInput,path:o});return E.create(t,i,r)}let _=class extends te{constructor(e,o,r){super();this._instantiationService=e;this._workingCopyEditorService=o;this._extensionService=r;this._installHandler()}static ID="workbench.contrib.interactiveWindowWorkingCopyEditorHandler";handles(e){const o=this._getViewType(e);return!!o&&o==="interactive"}isOpen(e,o){return this.handles(e)?o instanceof E&&be(e.resource,o.resource):!1}createEditor(e){return Z(e.resource,this._instantiationService)}async _installHandler(){await this._extensionService.whenInstalledExtensionsRegistered(),this._register(this._workingCopyEditorService.registerHandler(this))}_getViewType(e){return He.parse(e.typeId)}};_=q([m(0,re),m(1,Me),m(2,Ae)],_),G(O.ID,O,Pe.BlockRestore),G(U.ID,U,{editorTypeId:J}),G(_.ID,_,{editorTypeId:J});class ue{static ID=E.ID;canSerialize(t){return t instanceof E?b.isUri(t.primary.resource)&&b.isUri(t.inputResource):!1}serialize(t){if(this.canSerialize(t))return JSON.stringify({resource:t.primary.resource,inputResource:t.inputResource,name:t.getName(),language:t.language})}deserialize(t,e){const o=Ie(e);if(!o)return;const{resource:r,inputResource:c,name:n,language:d}=o;return!b.isUri(r)||!b.isUri(c)?void 0:E.create(t,r,c,n,d)}}j.as(ce.EditorFactory).registerEditorSerializer(ue.ID,ue),ie(M,Ye,oe.Delayed),ie(Ge,$e,oe.Delayed),k(class extends h{constructor(){super({id:"_interactive.open",title:x("interactive.open","Open Interactive Window"),f1:!1,category:w,metadata:{description:y("interactive.open","Open Interactive Window"),args:[{name:"showOptions",description:"Show Options",schema:{type:"object",properties:{viewColumn:{type:"number",default:-1},preserveFocus:{type:"boolean",default:!0}}}},{name:"resource",description:"Interactive resource Uri",isOptional:!0},{name:"controllerId",description:"Notebook controller Id",isOptional:!0},{name:"title",description:"Notebook editor title",isOptional:!0}]}})}async run(i,t,e,o,r){const c=i.get(f),n=i.get(Ue),d=i.get(M),s=i.get(ze),l=i.get(Re),g=i.get(xe),p=Oe(n,g,typeof t=="number"?t:t?.viewColumn),I={activation:Te.PRESERVE,preserveFocus:typeof t!="number"?t?.preserveFocus??!1:!1};if(e&&H(e)===".interactive"){l.debug("Open interactive window from resource:",e.toString());const N=b.revive(e),R=c.findEditors(N).filter(S=>S.editor instanceof E&&S.editor.resource?.toString()===N.toString());if(R.length){l.debug("Find existing interactive window:",e.toString());const S=R[0].editor,ve=R[0].groupId,Ee=(await c.openEditor(S,I,ve))?.getControl();return{notebookUri:S.resource,inputUri:S.inputResource,notebookEditorId:Ee?.notebookEditor?.getId()}}}const A=new Set;c.getEditors($.SEQUENTIAL).forEach(N=>{N.editor.resource&&A.add(N.editor.resource.toString())});let u,T,F=1;do u=b.from({scheme:C.untitled,path:`/Interactive-${F}.interactive`}),T=b.from({scheme:C.vscodeInteractiveInput,path:`/InteractiveInput-${F}`}),F++;while(A.has(u.toString()));if(E.setName(u,r),l.debug("Open new interactive window:",u.toString(),T.toString()),o){const R=s.getMatchingKernel({uri:u,notebookType:"interactive"}).all.find(S=>S.id===o);R&&s.preselectKernelForNotebook(R,{uri:u,notebookType:"interactive"})}d.clearHistory(u);const pe={resource:u,options:I},ee=(await c.openEditor(pe,p))?.getControl();return l.debug("New interactive window opened. Notebook editor id",ee?.notebookEditor?.getId()),{notebookUri:u,inputUri:T,notebookEditorId:ee?.notebookEditor?.getId()}}}),k(class extends h{constructor(){super({id:"interactive.execute",title:x("interactive.execute","Execute Code"),category:w,keybinding:[{when:a.equals("activeEditor","workbench.editor.interactive"),primary:D.CtrlCmd|v.Enter,weight:Y},{when:a.and(a.equals("activeEditor","workbench.editor.interactive"),a.equals("config.interactiveWindow.executeWithShiftEnter",!0)),primary:D.Shift|v.Enter,weight:Y},{when:a.and(a.equals("activeEditor","workbench.editor.interactive"),a.equals("config.interactiveWindow.executeWithShiftEnter",!1)),primary:v.Enter,weight:Y}],menu:[{id:z.InteractiveInputExecute}],icon:Ve.executeIcon,f1:!1,metadata:{description:"Execute the Contents of the Input Box",args:[{name:"resource",description:"Interactive resource Uri",isOptional:!0}]}})}async run(i,t){const e=i.get(f),o=i.get(he),r=i.get(M),c=i.get(Be);let n;if(t){const d=b.revive(t),s=e.findEditors(d);for(const l of s)if(l.editor.typeId===E.ID){n=(await e.openEditor(l.editor,l.groupId))?.getControl();break}}else n=e.activeEditorPane?.getControl();if(n&&n.notebookEditor&&n.codeEditor){const d=n.notebookEditor.textModel,s=n.codeEditor.getModel(),g=n.notebookEditor.activeKernel?.supportedLanguages[0]??we;if(d&&s){const p=d.length,I=s.getValue();if(ye(I))return;r.replaceLast(d.uri,I),r.addToHistory(d.uri,""),s.setValue("");const A=n.notebookEditor.notebookOptions.getDisplayOptions().interactiveWindowCollapseCodeCells==="fromEditor"?{inputCollapsed:!1,outputCollapsed:!1}:void 0;await o.apply([new qe(d.uri,{editType:Le.Replace,index:p,count:0,cells:[{cellKind:Ke.Code,mime:void 0,language:g,source:I,outputs:[],metadata:{},collapseState:A}]})]);const u={start:p,end:p+1};n.notebookEditor.revealCellRangeInView(u),await n.notebookEditor.executeNotebookCells(n.notebookEditor.getCellsInRange({start:p,end:p+1}));const T=c.getNotebookEditor(n.notebookEditor.getId());T&&(T.setSelections([u]),T.setFocus(u))}}}}),k(class extends h{constructor(){super({id:"interactive.input.clear",title:x("interactive.input.clear","Clear the interactive window input editor contents"),category:w,f1:!1})}async run(i){const e=i.get(f).activeEditorPane?.getControl();if(e&&e.notebookEditor&&e.codeEditor){const o=e.notebookEditor.textModel,r=e.codeEditor.getModel(),c=e.codeEditor.getModel()?.getFullModelRange();o&&r&&c&&e.codeEditor.executeEdits("",[ke.replace(c,null)])}}}),k(class extends h{constructor(){super({id:"interactive.history.previous",title:x("interactive.history.previous","Previous value in history"),category:w,f1:!1,keybinding:[{when:a.and(a.equals("activeEditor","workbench.editor.interactive"),W.notEqualsTo("bottom"),W.notEqualsTo("none"),B.Visible.toNegated()),primary:v.UpArrow,weight:P.WorkbenchContrib},{when:a.and(a.equals("activeEditor","workbench.editor.repl"),W.notEqualsTo("bottom"),W.notEqualsTo("none"),B.Visible.toNegated()),primary:v.UpArrow,weight:P.WorkbenchContrib}]})}async run(i){const t=i.get(f),e=i.get(M),o=t.activeEditorPane?.getControl();if(o&&o.notebookEditor&&o.codeEditor){const r=o.notebookEditor.textModel,c=o.codeEditor.getModel();if(r&&c){const n=e.getPreviousValue(r.uri);n&&c.setValue(n)}}}}),k(class extends h{constructor(){super({id:"interactive.history.next",title:x("interactive.history.next","Next value in history"),category:w,f1:!1,keybinding:[{when:a.and(a.equals("activeEditor","workbench.editor.interactive"),W.notEqualsTo("top"),W.notEqualsTo("none"),B.Visible.toNegated()),primary:v.DownArrow,weight:P.WorkbenchContrib},{when:a.and(a.equals("activeEditor","workbench.editor.repl"),W.notEqualsTo("top"),W.notEqualsTo("none"),B.Visible.toNegated()),primary:v.DownArrow,weight:P.WorkbenchContrib}]})}async run(i){const t=i.get(f),e=i.get(M),o=t.activeEditorPane?.getControl();if(o&&o.notebookEditor&&o.codeEditor){const r=o.notebookEditor.textModel,c=o.codeEditor.getModel();if(r&&c){const n=e.getNextValue(r.uri);n!==null&&c.setValue(n)}}}}),k(class extends h{constructor(){super({id:"interactive.scrollToTop",title:y("interactiveScrollToTop","Scroll to Top"),keybinding:{when:a.equals("activeEditor","workbench.editor.interactive"),primary:D.CtrlCmd|v.Home,mac:{primary:D.CtrlCmd|v.UpArrow},weight:P.WorkbenchContrib},category:w})}async run(i){const e=i.get(f).activeEditorPane?.getControl();if(e&&e.notebookEditor&&e.codeEditor){if(e.notebookEditor.getLength()===0)return;e.notebookEditor.revealCellRangeInView({start:0,end:1})}}}),k(class extends h{constructor(){super({id:"interactive.scrollToBottom",title:y("interactiveScrollToBottom","Scroll to Bottom"),keybinding:{when:a.equals("activeEditor","workbench.editor.interactive"),primary:D.CtrlCmd|v.End,mac:{primary:D.CtrlCmd|v.DownArrow},weight:P.WorkbenchContrib},category:w})}async run(i){const e=i.get(f).activeEditorPane?.getControl();if(e&&e.notebookEditor&&e.codeEditor){if(e.notebookEditor.getLength()===0)return;const o=e.notebookEditor.getLength();e.notebookEditor.revealCellRangeInView({start:o-1,end:o})}}}),k(class extends h{constructor(){super({id:"interactive.input.focus",title:x("interactive.input.focus","Focus Input Editor"),category:w,menu:{id:z.CommandPalette,when:le},precondition:le})}async run(i){const t=i.get(f),e=t.activeEditorPane?.getControl();if(e&&e.notebookEditor&&e.codeEditor)t.activeEditorPane?.focus();else{const o=t.getEditors($.MOST_RECENTLY_ACTIVE),r=fe.find(o,c=>c.editor.typeId===E.ID);if(r){const c=r.editor,n=r.groupId,s=(await t.openEditor(c,n))?.getControl();s&&s.notebookEditor&&s.codeEditor&&t.activeEditorPane?.focus()}}}}),k(class extends h{constructor(){super({id:"interactive.history.focus",title:x("interactive.history.focus","Focus History"),category:w,menu:{id:z.CommandPalette,when:a.equals("activeEditor","workbench.editor.interactive")},precondition:a.equals("activeEditor","workbench.editor.interactive")})}async run(i){const e=i.get(f).activeEditorPane?.getControl();e&&e.notebookEditor&&e.codeEditor&&e.notebookEditor.focus()}}),de("interactive.activeCodeBorder",{dark:L(V,V,"#007acc"),light:L(V,V,"#007acc"),hcDark:ne,hcLight:ne},y("interactive.activeCodeBorder","The border color for the current interactive code cell when the editor has focus.")),de("interactive.inactiveCodeBorder",{dark:L(K,K,"#37373D"),light:L(K,K,"#E4E6F1"),hcDark:se,hcLight:se},y("interactive.inactiveCodeBorder","The border color for the current interactive code cell when the editor does not have focus.")),j.as(We.Configuration).registerConfiguration({id:"interactiveWindow",order:100,type:"object",properties:{[X.interactiveWindowAlwaysScrollOnNewCell]:{type:"boolean",default:!0,markdownDescription:y("interactiveWindow.alwaysScrollOnNewCell","Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.")},[Fe.InteractiveWindowPromptToSave]:{type:"boolean",default:!1,markdownDescription:y("interactiveWindow.promptToSaveOnClose","Prompt to save the interactive window when it is closed. Only new interactive windows will be affected by this setting change.")},[X.executeWithShiftEnter]:{type:"boolean",default:!1,markdownDescription:y("interactiveWindow.executeWithShiftEnter","Execute the Interactive Window (REPL) input box with shift+enter, so that enter can be used to create a newline."),tags:["replExecute"]},[X.showExecutionHint]:{type:"boolean",default:!0,markdownDescription:y("interactiveWindow.showExecutionHint","Display a hint in the Interactive Window (REPL) input box to indicate how to execute code."),tags:["replExecute"]}}});export{O as InteractiveDocumentContribution,ue as InteractiveEditorSerializer};
