var D=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var v=(l,n,e,t)=>{for(var r=t>1?void 0:t?h(n,e):n,o=l.length-1,s;o>=0;o--)(s=l[o])&&(r=(t?s(n,e,r):s(r))||r);return t&&r&&D(n,e,r),r},i=(l,n)=>(e,t)=>n(e,t,l);import{CancellationTokenSource as g}from"../../../../base/common/cancellation.js";import{Emitter as I}from"../../../../base/common/event.js";import{parse as f,stringify as b}from"../../../../base/common/marshalling.js";import{IConfigurationService as k}from"../../../../platform/configuration/common/configuration.js";import{IEnvironmentService as E}from"../../../../platform/environment/common/environment.js";import{IFileService as U}from"../../../../platform/files/common/files.js";import{IStorageService as P,StorageScope as p,StorageTarget as y}from"../../../../platform/storage/common/storage.js";import{ITelemetryService as C}from"../../../../platform/telemetry/common/telemetry.js";import{IUriIdentityService as A}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{AbstractSynchroniser as T}from"../../../../platform/userDataSync/common/abstractSynchronizer.js";import{SyncResource as _}from"../../../../platform/userDataSync/common/userDataSync.js";import{IWorkspaceIdentityService as W}from"../../../services/workspaces/common/workspaceIdentityService.js";import{IEditSessionsStorageService as O}from"./editSessions.js";class M{_serviceBrand;async writeResource(){}async getAllResourceRefs(){return[]}async resolveResourceContent(){return null}}class j{_serviceBrand;_onDidChangeEnablement=new I;onDidChangeEnablement=this._onDidChangeEnablement.event;_onDidChangeResourceEnablement=new I;onDidChangeResourceEnablement=this._onDidChangeResourceEnablement.event;isEnabled(){return!0}canToggleEnablement(){return!0}setEnablement(n){}isResourceEnabled(n){return!0}setResourceEnablement(n,e){}getResourceSyncStateVersion(n){}}let d=class extends T{constructor(e,t,r,o,s,S,a,c,u,m,L,F){const R=new M,w=new j;super({syncResource:_.WorkspaceState,profile:e},t,s,S,u,r,R,w,a,o,c,m);this.workspaceIdentityService=L;this.editSessionsStorageService=F}version=1;async sync(){const e=new g,t=await this.workspaceIdentityService.getWorkspaceStateFolders(e.token);if(!t.length)return;await this.storageService.flush();const r=this.storageService.keys(p.WORKSPACE,y.USER);if(!r.length)return;const o={};r.forEach(S=>{const a=this.storageService.get(S,p.WORKSPACE);a&&(o[S]=a)});const s={folders:t,storage:o,version:this.version};await this.editSessionsStorageService.write("workspaceState",b(s))}async apply(){const e=this.editSessionsStorageService.lastReadResources.get("editSessions")?.content,t=e?JSON.parse(e).workspaceStateId:void 0,r=await this.editSessionsStorageService.read("workspaceState",t);if(!r)return null;const o=f(r.content);if(!o)return this.logService.info("Skipping initializing workspace state because remote workspace state does not exist."),null;const s=new g,S=await this.workspaceIdentityService.matches(o.folders,s.token);if(!S)return this.logService.info("Skipping initializing workspace state because remote workspace state does not match current workspace."),null;const a={};for(const c of Object.keys(o.storage))a[c]=o.storage[c];if(Object.keys(a).length){const c=[];for(const u of Object.keys(a))try{const m=f(a[u]);S(m),c.push({key:u,value:m,scope:p.WORKSPACE,target:y.USER})}catch{c.push({key:u,value:a[u],scope:p.WORKSPACE,target:y.USER})}this.storageService.storeAll(c,!0)}return this.editSessionsStorageService.delete("workspaceState",r.ref),null}applyResult(e,t,r,o){throw new Error("Method not implemented.")}async generateSyncPreview(e,t,r,o,s){return[]}getMergeResult(e,t){throw new Error("Method not implemented.")}getAcceptResult(e,t,r,o){throw new Error("Method not implemented.")}async hasRemoteChanged(e){return!0}async hasLocalData(){return!1}async resolveContent(e){return null}};d=v([i(4,U),i(5,E),i(6,C),i(7,k),i(8,P),i(9,A),i(10,W),i(11,O)],d);export{d as WorkspaceStateSynchroniser};
