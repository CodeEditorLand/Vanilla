{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/editSessions/common/editSessionsLogService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { joinPath } from \"../../../../base/common/resources.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport {\n\tAbstractLogger,\n\ttype ILogger,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport {\n\ttype IEditSessionsLogService,\n\teditSessionsLogId,\n} from \"./editSessions.js\";\n\nexport class EditSessionsLogService\n\textends AbstractLogger\n\timplements IEditSessionsLogService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly logger: ILogger;\n\n\tconstructor(\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t) {\n\t\tsuper();\n\t\tthis.logger = this._register(\n\t\t\tloggerService.createLogger(\n\t\t\t\tjoinPath(\n\t\t\t\t\tenvironmentService.logsHome,\n\t\t\t\t\t`${editSessionsLogId}.log`,\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tid: editSessionsLogId,\n\t\t\t\t\tname: localize(\"cloudChangesLog\", \"Cloud Changes\"),\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tthis.logger.trace(message, ...args);\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tthis.logger.debug(message, ...args);\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tthis.logger.info(message, ...args);\n\t}\n\n\twarn(message: string, ...args: any[]): void {\n\t\tthis.logger.warn(message, ...args);\n\t}\n\n\terror(message: string | Error, ...args: any[]): void {\n\t\tthis.logger.error(message, ...args);\n\t}\n\n\tflush(): void {\n\t\tthis.logger.flush();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,gBAAgB;AACzB,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AAEA,IAAM,yBAAN,cACE,eAET;AAAA,EArBA,OAqBA;AAAA;AAAA;AAAA,EAEkB;AAAA,EAEjB,YACiB,eACK,oBACpB;AACD,UAAM;AACN,SAAK,SAAS,KAAK;AAAA,MAClB,cAAc;AAAA,QACb;AAAA,UACC,mBAAmB;AAAA,UACnB,GAAG,iBAAiB;AAAA,QACrB;AAAA,QACA;AAAA,UACC,IAAI;AAAA,UACJ,MAAM,SAAS,mBAAmB,eAAe;AAAA,QAClD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,YAAoB,MAAmB;AAC5C,SAAK,OAAO,MAAM,SAAS,GAAG,IAAI;AAAA,EACnC;AAAA,EAEA,MAAM,YAAoB,MAAmB;AAC5C,SAAK,OAAO,MAAM,SAAS,GAAG,IAAI;AAAA,EACnC;AAAA,EAEA,KAAK,YAAoB,MAAmB;AAC3C,SAAK,OAAO,KAAK,SAAS,GAAG,IAAI;AAAA,EAClC;AAAA,EAEA,KAAK,YAAoB,MAAmB;AAC3C,SAAK,OAAO,KAAK,SAAS,GAAG,IAAI;AAAA,EAClC;AAAA,EAEA,MAAM,YAA4B,MAAmB;AACpD,SAAK,OAAO,MAAM,SAAS,GAAG,IAAI;AAAA,EACnC;AAAA,EAEA,QAAc;AACb,SAAK,OAAO,MAAM;AAAA,EACnB;AACD;AAjDa,yBAAN;AAAA,EAQJ;AAAA,EACA;AAAA,GATU;",
  "names": []
}
