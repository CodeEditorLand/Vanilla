import { CancellationToken } from "vs/base/common/cancellation";
import { Disposable } from "vs/base/common/lifecycle";
import { ICommandService } from "vs/platform/commands/common/commands";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IDialogService, IFileDialogService } from "vs/platform/dialogs/common/dialogs";
import { IEnvironmentService } from "vs/platform/environment/common/environment";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IOpenerService } from "vs/platform/opener/common/opener";
import { IProductService } from "vs/platform/product/common/productService";
import { IProgress, IProgressService, IProgressStep } from "vs/platform/progress/common/progress";
import { IQuickInputService } from "vs/platform/quickinput/common/quickInput";
import { IRequestService } from "vs/platform/request/common/request";
import { IStorageService } from "vs/platform/storage/common/storage";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IUserDataProfilesService } from "vs/platform/userDataProfile/common/userDataProfile";
import { IEditSessionIdentityService } from "vs/platform/workspace/common/editSessions";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IWorkbenchContribution } from "vs/workbench/common/contributions";
import { IEditSessionsLogService, IEditSessionsStorageService } from "vs/workbench/contrib/editSessions/common/editSessions";
import { ISCMService } from "vs/workbench/contrib/scm/common/scm";
import { IActivityService } from "vs/workbench/services/activity/common/activity";
import { IEditorService } from "vs/workbench/services/editor/common/editorService";
import { IExtensionService } from "vs/workbench/services/extensions/common/extensions";
import { ILifecycleService } from "vs/workbench/services/lifecycle/common/lifecycle";
import { IRemoteAgentService } from "vs/workbench/services/remote/common/remoteAgentService";
import { IWorkspaceIdentityService } from "vs/workbench/services/workspaces/common/workspaceIdentityService";
export declare class EditSessionsContribution extends Disposable implements IWorkbenchContribution {
    private readonly editSessionsStorageService;
    private readonly fileService;
    private readonly progressService;
    private readonly openerService;
    private readonly telemetryService;
    private readonly scmService;
    private readonly notificationService;
    private readonly dialogService;
    private readonly logService;
    private readonly environmentService;
    private readonly instantiationService;
    private readonly productService;
    private configurationService;
    private readonly contextService;
    private readonly editSessionIdentityService;
    private readonly quickInputService;
    private commandService;
    private readonly contextKeyService;
    private readonly fileDialogService;
    private readonly lifecycleService;
    private readonly storageService;
    private readonly activityService;
    private readonly editorService;
    private readonly remoteAgentService;
    private readonly extensionService;
    private readonly requestService;
    private readonly userDataProfilesService;
    private readonly uriIdentityService;
    private readonly workspaceIdentityService;
    private continueEditSessionOptions;
    private readonly shouldShowViewsContext;
    private readonly pendingEditSessionsContext;
    private static APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY;
    private readonly accountsMenuBadgeDisposable;
    private registeredCommands;
    private workspaceStateSynchronizer;
    private editSessionsStorageClient;
    constructor(editSessionsStorageService: IEditSessionsStorageService, fileService: IFileService, progressService: IProgressService, openerService: IOpenerService, telemetryService: ITelemetryService, scmService: ISCMService, notificationService: INotificationService, dialogService: IDialogService, logService: IEditSessionsLogService, environmentService: IEnvironmentService, instantiationService: IInstantiationService, productService: IProductService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, editSessionIdentityService: IEditSessionIdentityService, quickInputService: IQuickInputService, commandService: ICommandService, contextKeyService: IContextKeyService, fileDialogService: IFileDialogService, lifecycleService: ILifecycleService, storageService: IStorageService, activityService: IActivityService, editorService: IEditorService, remoteAgentService: IRemoteAgentService, extensionService: IExtensionService, requestService: IRequestService, userDataProfilesService: IUserDataProfilesService, uriIdentityService: IUriIdentityService, workspaceIdentityService: IWorkspaceIdentityService);
    private autoResumeEditSession;
    private updateAccountsMenuBadge;
    private autoStoreEditSession;
    private registerViews;
    private registerActions;
    private registerShowEditSessionOutputChannelAction;
    private registerShowEditSessionViewAction;
    private registerContinueEditSessionAction;
    private registerResumeLatestEditSessionAction;
    private registerStoreLatestEditSessionAction;
    resumeEditSession(ref?: string, silent?: boolean, forceApplyUnrelatedChange?: boolean, applyPartialMatch?: boolean, progress?: IProgress<IProgressStep>, serializedData?: string): Promise<void>;
    private generateChanges;
    private willChangeLocalContents;
    storeEditSession(fromStoreCommand: boolean, cancellationToken: CancellationToken): Promise<string | undefined>;
    private getChangedResources;
    private hasEditSession;
    private shouldContinueOnWithEditSession;
    private registerContributedEditSessionOptions;
    private generateStandaloneOptionCommand;
    private registerContinueInLocalFolderAction;
    private pickContinueEditSessionDestination;
    private resolveDestination;
    private createPickItems;
}
