var _=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var p=(g,u,t,i)=>{for(var e=i>1?void 0:i?k(u,t):u,n=g.length-1,s;n>=0;n--)(s=g[n])&&(e=(i?s(u,t,e):s(e))||e);return i&&e&&_(u,t,e),e},r=(g,u)=>(t,i)=>u(t,i,g);import{Disposable as R,DisposableStore as I}from"../../../../base/common/lifecycle.js";import{localize as a}from"../../../../nls.js";import{Action2 as m,MenuId as S,MenuRegistry as D,registerAction2 as C}from"../../../../platform/actions/common/actions.js";import{ContextKeyExpr as d,IContextKeyService as O}from"../../../../platform/contextkey/common/contextkey.js";import{IEnvironmentService as b}from"../../../../platform/environment/common/environment.js";import{IFileService as T}from"../../../../platform/files/common/files.js";import{IProductService as M}from"../../../../platform/product/common/productService.js";import{IQuickInputService as N}from"../../../../platform/quickinput/common/quickInput.js";import{IStorageService as z,StorageScope as l,StorageTarget as K}from"../../../../platform/storage/common/storage.js";import{createSyncHeaders as w}from"../../../../platform/userDataSync/common/userDataSync.js";import{IAuthenticationService as Q}from"../../../services/authentication/common/authentication.js";import{IExtensionService as H}from"../../../services/extensions/common/extensions.js";import{EDIT_SESSIONS_SIGNED_IN as q,EDIT_SESSION_SYNC_CATEGORY as A,EDIT_SESSIONS_SIGNED_IN_KEY as v,IEditSessionsLogService as G,EDIT_SESSIONS_PENDING_KEY as y}from"../common/editSessions.js";import{IDialogService as U}from"../../../../platform/dialogs/common/dialogs.js";import{generateUuid as E}from"../../../../base/common/uuid.js";import{getCurrentAuthenticationSessionInfo as Y}from"../../../services/authentication/browser/authenticationService.js";import{isWeb as L}from"../../../../base/common/platform.js";import{UserDataSyncMachinesService as F}from"../../../../platform/userDataSync/common/userDataSyncMachines.js";import{Emitter as P}from"../../../../base/common/event.js";import{CancellationError as $}from"../../../../base/common/errors.js";import{ISecretStorageService as j}from"../../../../platform/secrets/common/secrets.js";let c=class extends R{constructor(t,i,e,n,s,h,o,f,B,J,V){super();this.fileService=t;this.storageService=i;this.quickInputService=e;this.authenticationService=n;this.extensionService=s;this.environmentService=h;this.logService=o;this.productService=f;this.contextKeyService=B;this.dialogService=J;this.secretStorageService=V;this._register(this.authenticationService.onDidChangeSessions(x=>this.onDidChangeSessions(x.event))),this._register(this.storageService.onDidChangeValue(l.APPLICATION,c.CACHED_SESSION_STORAGE_KEY,this._register(new I))(()=>this.onDidChangeStorage())),this.registerSignInAction(),this.registerResetAuthenticationAction(),this.signedInContext=q.bindTo(this.contextKeyService),this.signedInContext.set(this.existingSessionId!==void 0)}SIZE_LIMIT=Math.floor(1024*1024*1.9);serverConfiguration=this.productService["editSessions.store"];machineClient;authenticationInfo;static CACHED_SESSION_STORAGE_KEY="editSessionAccountPreference";initialized=!1;signedInContext;get isSignedIn(){return this.existingSessionId!==void 0}_didSignIn=new P;get onDidSignIn(){return this._didSignIn.event}_didSignOut=new P;get onDidSignOut(){return this._didSignOut.event}_lastWrittenResources=new Map;get lastWrittenResources(){return this._lastWrittenResources}_lastReadResources=new Map;get lastReadResources(){return this._lastReadResources}storeClient;async write(t,i){if(await this.initialize("write",!1),!this.initialized)throw new Error("Please sign in to store your edit session.");typeof i!="string"&&i.machine===void 0&&(i.machine=await this.getOrCreateCurrentMachineId()),i=typeof i=="string"?i:JSON.stringify(i);const e=await this.storeClient.writeResource(t,i,null,void 0,w(E()));return this._lastWrittenResources.set(t,{ref:e,content:i}),e}async read(t,i){if(await this.initialize("read",!1),!this.initialized)throw new Error("Please sign in to apply your latest edit session.");let e;const n=w(E());try{if(i!==void 0)e=await this.storeClient?.resolveResourceContent(t,i,void 0,n);else{const s=await this.storeClient?.readResource(t,null,void 0,n);e=s?.content,i=s?.ref}}catch(s){this.logService.error(s)}if(e!=null&&i!==void 0)return this._lastReadResources.set(t,{ref:i,content:e}),{ref:i,content:e}}async delete(t,i){if(await this.initialize("write",!1),!this.initialized)throw new Error(`Unable to delete edit session with ref ${i}.`);try{await this.storeClient?.deleteResource(t,i)}catch(e){this.logService.error(e)}}async list(t){if(await this.initialize("read",!1),!this.initialized)throw new Error("Unable to list edit sessions.");try{return this.storeClient?.getAllResourceRefs(t)??[]}catch(i){this.logService.error(i)}return[]}async initialize(t,i=!1){return this.initialized?!0:(this.initialized=await this.doInitialize(t,i),this.signedInContext.set(this.initialized),this.initialized&&this._didSignIn.fire(),this.initialized)}async doInitialize(t,i){if(await this.extensionService.whenInstalledExtensionsRegistered(),!this.serverConfiguration?.url)throw new Error("Unable to initialize sessions sync as session sync preference is not configured in product.json.");if(this.storeClient===void 0)return!1;if(this._register(this.storeClient.onTokenFailed(()=>{this.logService.info("Clearing edit sessions authentication preference because of successive token failures."),this.clearAuthenticationPreference()})),this.machineClient===void 0&&(this.machineClient=new F(this.environmentService,this.fileService,this.storageService,this.storeClient,this.logService,this.productService)),this.authenticationInfo!==void 0)return!0;const e=await this.getAuthenticationSession(t,i);return e!==void 0&&(this.authenticationInfo=e,this.storeClient.setAuthToken(e.token,e.providerId)),e!==void 0}cachedMachines;async getMachineById(t){if(await this.initialize("read",!1),!this.cachedMachines){const i=await this.machineClient.getMachines();this.cachedMachines=i.reduce((e,n)=>e.set(n.id,n.name),new Map)}return this.cachedMachines.get(t)}async getOrCreateCurrentMachineId(){const t=await this.machineClient.getMachines().then(i=>i.find(e=>e.isCurrent)?.id);return t===void 0?(await this.machineClient.addCurrentMachine(),await this.machineClient.getMachines().then(i=>i.find(e=>e.isCurrent).id)):t}async getAuthenticationSession(t,i){if(this.existingSessionId){this.logService.info(`Searching for existing authentication session with ID ${this.existingSessionId}`);const n=await this.getExistingSession();if(n)return this.logService.info(`Found existing authentication session with ID ${n.session.id}`),{sessionId:n.session.id,token:n.session.idToken??n.session.accessToken,providerId:n.session.providerId};this._didSignOut.fire()}if(this.shouldAttemptEditSessionInit()){this.logService.info("Reusing user data sync enablement");const n=await Y(this.secretStorageService,this.productService);if(n!==void 0)return this.logService.info(`Using current authentication session with ID ${n.id}`),this.existingSessionId=n.id,{sessionId:n.id,token:n.accessToken,providerId:n.providerId}}if(i)return;const e=await this.getAccountPreference(t);if(e!==void 0)return this.existingSessionId=e.id,{sessionId:e.id,token:e.idToken??e.accessToken,providerId:e.providerId}}shouldAttemptEditSessionInit(){return L&&this.storageService.isNew(l.APPLICATION)&&this.storageService.isNew(l.WORKSPACE)}async getAccountPreference(t){const i=new I,e=i.add(this.quickInputService.createQuickPick({useSeparators:!0}));return e.ok=!1,e.placeholder=t==="read"?a("choose account read placeholder","Select an account to restore your working changes from the cloud"):a("choose account placeholder","Select an account to store your working changes in the cloud"),e.ignoreFocusOut=!0,e.items=await this.createQuickpickItems(),new Promise((n,s)=>{i.add(e.onDidHide(h=>{s(new $),i.dispose()})),i.add(e.onDidAccept(async h=>{const o=e.selectedItems[0],f="provider"in o?{...await this.authenticationService.createSession(o.provider.id,o.provider.scopes),providerId:o.provider.id}:"session"in o?o.session:void 0;n(f),e.hide()})),e.show()})}async createQuickpickItems(){const t=[];t.push({type:"separator",label:a("signed in","Signed In")});const i=await this.getAllSessions();t.push(...i),t.push({type:"separator",label:a("others","Others")});for(const e of await this.getAuthenticationProviders())if(!i.some(s=>s.session.providerId===e.id)||this.authenticationService.getProvider(e.id).supportsMultipleAccounts){const s=this.authenticationService.getProvider(e.id).label;t.push({label:a("sign in using account","Sign in with {0}",s),provider:e})}return t}async getAllSessions(){const t=await this.getAuthenticationProviders(),i=new Map;let e;for(const n of t){const s=await this.authenticationService.getSessions(n.id,n.scopes);for(const h of s){const o={label:h.account.label,description:this.authenticationService.getProvider(n.id).label,session:{...h,providerId:n.id}};i.set(o.session.account.id,o),this.existingSessionId===h.id&&(e=o)}}return e!==void 0&&i.set(e.session.account.id,e),[...i.values()].sort((n,s)=>n.label.localeCompare(s.label))}async getAuthenticationProviders(){if(!this.serverConfiguration)throw new Error("Unable to get configured authentication providers as session sync preference is not configured in product.json.");const t=this.serverConfiguration.authenticationProviders,i=Object.keys(t).reduce((n,s)=>(n.push({id:s,scopes:t[s].scopes}),n),[]),e=this.authenticationService.declaredProviders;return i.filter(({id:n})=>e.some(s=>s.id===n))}get existingSessionId(){return this.storageService.get(c.CACHED_SESSION_STORAGE_KEY,l.APPLICATION)}set existingSessionId(t){this.logService.trace(`Saving authentication session preference for ID ${t}.`),t===void 0?this.storageService.remove(c.CACHED_SESSION_STORAGE_KEY,l.APPLICATION):this.storageService.store(c.CACHED_SESSION_STORAGE_KEY,t,l.APPLICATION,K.MACHINE)}async getExistingSession(){return(await this.getAllSessions()).find(i=>i.session.id===this.existingSessionId)}async onDidChangeStorage(){const t=this.existingSessionId,i=this.authenticationInfo?.sessionId;i!==t&&(this.logService.trace(`Resetting authentication state because authentication session ID preference changed from ${i} to ${t}.`),this.authenticationInfo=void 0,this.initialized=!1)}clearAuthenticationPreference(){this.authenticationInfo=void 0,this.initialized=!1,this.existingSessionId=void 0,this.signedInContext.set(!1)}onDidChangeSessions(t){this.authenticationInfo?.sessionId&&t.removed?.find(i=>i.id===this.authenticationInfo?.sessionId)&&this.clearAuthenticationPreference()}registerSignInAction(){const t=this,i="workbench.editSessions.actions.signIn",e=d.and(d.equals(y,!1),d.equals(v,!1));this._register(C(class extends m{constructor(){super({id:i,title:a("sign in","Turn on Cloud Changes..."),category:A,precondition:e,menu:[{id:S.CommandPalette},{id:S.AccountsContext,group:"2_editSessions",when:e}]})}async run(){return await t.initialize("write",!1)}})),this._register(D.appendMenuItem(S.AccountsContext,{group:"2_editSessions",command:{id:i,title:a("sign in badge","Turn on Cloud Changes... (1)")},when:d.and(d.equals(y,!0),d.equals(v,!1))}))}registerResetAuthenticationAction(){const t=this;this._register(C(class extends m{constructor(){super({id:"workbench.editSessions.actions.resetAuth",title:a("reset auth.v3","Turn off Cloud Changes..."),category:A,precondition:d.equals(v,!0),menu:[{id:S.CommandPalette},{id:S.AccountsContext,group:"2_editSessions",when:d.equals(v,!0)}]})}async run(){const e=await t.dialogService.confirm({message:a("sign out of cloud changes clear data prompt","Do you want to disable storing working changes in the cloud?"),checkbox:{label:a("delete all cloud changes","Delete all stored data from the cloud.")}});e.confirmed&&(e.checkboxChecked&&t.storeClient?.deleteResource("editSessions",null),t.clearAuthenticationPreference())}}))}};c=p([r(0,T),r(1,z),r(2,N),r(3,Q),r(4,H),r(5,b),r(6,G),r(7,M),r(8,O),r(9,U),r(10,j)],c);export{c as EditSessionsWorkbenchService};
