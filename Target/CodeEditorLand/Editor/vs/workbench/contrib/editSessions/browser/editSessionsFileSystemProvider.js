var S=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=(s,e,t,i)=>{for(var o=i>1?void 0:i?h(e,t):e,n=s.length-1,r;n>=0;n--)(r=s[n])&&(o=(i?r(e,t,o):r(o))||o);return i&&o&&S(e,t,o),o},y=(s,e)=>(t,i)=>e(t,i,s);import{NotSupportedError as f}from"../../../../base/common/errors.js";import{Event as F}from"../../../../base/common/event.js";import{Disposable as u}from"../../../../base/common/lifecycle.js";import{FilePermission as g,FileSystemProviderCapabilities as I,FileSystemProviderErrorCode as c,FileType as v}from"../../../../platform/files/common/files.js";import{ChangeType as R,EDIT_SESSIONS_SCHEME as b,IEditSessionsStorageService as w,decodeEditSessionFileContent as C}from"../common/editSessions.js";let a=class{constructor(e){this.editSessionsStorageService=e}static SCHEMA=b;capabilities=I.Readonly+I.FileReadWrite;async readFile(e){const t=/(?<ref>[^/]+)\/(?<folderName>[^/]+)\/(?<filePath>.*)/.exec(e.path.substring(1));if(!t?.groups)throw c.FileNotFound;const{ref:i,folderName:o,filePath:n}=t.groups,r=await this.editSessionsStorageService.read("editSessions",i);if(!r)throw c.FileNotFound;const d=JSON.parse(r.content),l=d.folders.find(p=>p.name===o)?.workingChanges.find(p=>p.relativeFilePath===n);if(!l||l.type===R.Deletion)throw c.FileNotFound;return C(d.version,l.contents).buffer}async stat(e){const t=await this.readFile(e),i=Date.now();return{type:v.File,permissions:g.Readonly,mtime:i,ctime:i,size:t.byteLength}}onDidChangeCapabilities=F.None;onDidChangeFile=F.None;watch(e,t){return u.None}async mkdir(e){}async readdir(e){return[]}async rename(e,t,i){}async delete(e,t){}async writeFile(){throw new f}};a=m([y(0,w)],a);export{a as EditSessionsFileSystemProvider};
