var le=Object.defineProperty;var he=Object.getOwnPropertyDescriptor;var V=(y,p,e,i)=>{for(var n=i>1?void 0:i?he(p,e):p,t=y.length-1,o;t>=0;t--)(o=y[t])&&(n=(i?o(p,e,n):o(n))||n);return i&&n&&le(p,e,n),n},c=(y,p)=>(e,i)=>p(e,i,y);import{sha1Hex as $}from"../../../../base/browser/hash.js";import{encodeBase64 as q}from"../../../../base/common/buffer.js";import{CancellationTokenSource as A}from"../../../../base/common/cancellation.js";import{Codicon as Se}from"../../../../base/common/codicons.js";import{CancellationError as z}from"../../../../base/common/errors.js";import{Disposable as ge,DisposableStore as B,MutableDisposable as me}from"../../../../base/common/lifecycle.js";import{Schemas as K}from"../../../../base/common/network.js";import{equals as pe}from"../../../../base/common/objects.js";import{isNative as j,isWeb as fe}from"../../../../base/common/platform.js";import{basename as ve,joinPath as we,relativePath as ye}from"../../../../base/common/resources.js";import{ThemeIcon as H}from"../../../../base/common/themables.js";import{URI as O}from"../../../../base/common/uri.js";import"../../../../editor/browser/editorExtensions.js";import{localize as s,localize2 as C}from"../../../../nls.js";import"../../../../platform/action/common/action.js";import{Action2 as f,MenuId as Ce,MenuRegistry as Q,registerAction2 as v}from"../../../../platform/actions/common/actions.js";import{ICommandService as Y}from"../../../../platform/commands/common/commands.js";import{IConfigurationService as Ie}from"../../../../platform/configuration/common/configuration.js";import{Extensions as Ee}from"../../../../platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as G,IContextKeyService as ke}from"../../../../platform/contextkey/common/contextkey.js";import{IsWebContext as Oe}from"../../../../platform/contextkey/common/contextkeys.js";import{getFileNamesMessage as be,IDialogService as Pe,IFileDialogService as Ae}from"../../../../platform/dialogs/common/dialogs.js";import{IEnvironmentService as De}from"../../../../platform/environment/common/environment.js";import{IFileService as xe}from"../../../../platform/files/common/files.js";import{SyncDescriptor as Re}from"../../../../platform/instantiation/common/descriptors.js";import{InstantiationType as J,registerSingleton as Z}from"../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as Le}from"../../../../platform/instantiation/common/instantiation.js";import{INotificationService as Fe,Severity as X}from"../../../../platform/notification/common/notification.js";import{IOpenerService as We}from"../../../../platform/opener/common/opener.js";import{IProductService as Te}from"../../../../platform/product/common/productService.js";import{IProgressService as Ne,ProgressLocation as D}from"../../../../platform/progress/common/progress.js";import{IQuickInputService as _e}from"../../../../platform/quickinput/common/quickInput.js";import{Registry as W}from"../../../../platform/registry/common/platform.js";import{IRequestService as Ue}from"../../../../platform/request/common/request.js";import{IStorageService as Me,StorageScope as T,StorageTarget as Ve}from"../../../../platform/storage/common/storage.js";import{ITelemetryService as $e}from"../../../../platform/telemetry/common/telemetry.js";import{IUriIdentityService as qe}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as ze}from"../../../../platform/userDataProfile/common/userDataProfile.js";import{UserDataSyncErrorCode as Be,UserDataSyncStoreError as Ke}from"../../../../platform/userDataSync/common/userDataSync.js";import{EditSessionIdentityMatch as ee,IEditSessionIdentityService as je}from"../../../../platform/workspace/common/editSessions.js";import{getVirtualWorkspaceLocation as ie}from"../../../../platform/workspace/common/virtualWorkspace.js";import{IWorkspaceContextService as He,WorkbenchState as te}from"../../../../platform/workspace/common/workspace.js";import{ViewPaneContainer as Qe}from"../../../browser/parts/views/viewPaneContainer.js";import{workbenchConfigurationNodeBase as Ye}from"../../../common/configuration.js";import{VirtualWorkspaceContext as Ge,WorkspaceFolderCountContext as Je}from"../../../common/contextkeys.js";import{Extensions as Ze}from"../../../common/contributions.js";import{ViewContainerLocation as ne,Extensions as Xe}from"../../../common/views.js";import{IActivityService as ei,NumberBadge as ii}from"../../../services/activity/common/activity.js";import{IEditorService as ti}from"../../../services/editor/common/editorService.js";import{IExtensionService as ni,isProposedApiEnabled as oi}from"../../../services/extensions/common/extensions.js";import{ExtensionsRegistry as si}from"../../../services/extensions/common/extensionsRegistry.js";import{ILifecycleService as ri,LifecyclePhase as ai,ShutdownReason as ci}from"../../../services/lifecycle/common/lifecycle.js";import{IOutputService as di}from"../../../services/output/common/output.js";import{IPaneCompositePartService as ui}from"../../../services/panecomposite/browser/panecomposite.js";import{IRemoteAgentService as li}from"../../../services/remote/common/remoteAgentService.js";import{IViewsService as hi}from"../../../services/views/common/viewsService.js";import{IWorkspaceIdentityService as Si}from"../../../services/workspaces/common/workspaceIdentityService.js";import{VIEWLET_ID as gi}from"../../extensions/common/extensions.js";import{ISCMService as mi}from"../../scm/common/scm.js";import{ChangeType as I,decodeEditSessionFileContent as pi,EDIT_SESSION_SYNC_CATEGORY as b,EDIT_SESSIONS_CONTAINER_ID as oe,EDIT_SESSIONS_DATA_VIEW_ID as fi,EDIT_SESSIONS_PENDING as vi,EDIT_SESSIONS_SHOW_VIEW as wi,EDIT_SESSIONS_TITLE as yi,EDIT_SESSIONS_VIEW_ICON as Ci,EditSessionSchemaVersion as Ii,editSessionsLogId as Ei,FileType as se,hashedEditSessionId as N,IEditSessionsLogService as re,IEditSessionsStorageService as ae}from"../common/editSessions.js";import{EditSessionsLogService as ki}from"../common/editSessionsLogService.js";import{EditSessionsStoreClient as Oi}from"../common/editSessionsStorageClient.js";import{WorkspaceStateSynchroniser as bi}from"../common/workspaceStateSync.js";import{EditSessionsFileSystemProvider as ce}from"./editSessionsFileSystemProvider.js";import{EditSessionsWorkbenchService as Pi}from"./editSessionsStorageService.js";import{EditSessionsDataViews as Ai}from"./editSessionsViews.js";Z(re,ki,J.Delayed),Z(ae,Pi,J.Delayed);const x={id:"_workbench.editSessions.actions.continueEditSession",title:C("continue working on","Continue Working On..."),precondition:Je.notEqualsTo("0"),f1:!0},R={id:"_workbench.editSessions.actions.continueEditSession.openLocalFolder",title:C("continue edit session in local folder","Open In Local Folder"),category:b,precondition:G.and(Oe.toNegated(),Ge)},de={id:"workbench.editSessions.actions.showOutputChannel",title:C("show log","Show Log"),category:b},P={id:"workbench.action.continueOn.extensions",title:s("continueOn.installAdditional","Install additional development environment options")};v(class extends f{constructor(){super({...P,f1:!1})}async run(y){(await y.get(ui).openPaneComposite(gi,ne.Sidebar,!0))?.getViewPaneContainer()?.search("@tag:continueOn")}});const _=`[${s("resuming working changes window","Resuming working changes...")}](command:${de.id})`,E={location:D.Window,type:"syncing"},ue="editSessionId",Di="workbench.editSessions.continueOn";let w=class extends ge{constructor(e,i,n,t,o,r,a,u,l,h,S,d,g,m,k,L,F,Fi,Wi,Ti,Ni,_i,Ui,Mi,Vi,$i,qi,zi,Bi){super();this.editSessionsStorageService=e;this.fileService=i;this.progressService=n;this.openerService=t;this.telemetryService=o;this.scmService=r;this.notificationService=a;this.dialogService=u;this.logService=l;this.environmentService=h;this.instantiationService=S;this.productService=d;this.configurationService=g;this.contextService=m;this.editSessionIdentityService=k;this.quickInputService=L;this.commandService=F;this.contextKeyService=Fi;this.fileDialogService=Wi;this.lifecycleService=Ti;this.storageService=Ni;this.activityService=_i;this.editorService=Ui;this.remoteAgentService=Mi;this.extensionService=Vi;this.requestService=$i;this.userDataProfilesService=qi;this.uriIdentityService=zi;this.workspaceIdentityService=Bi;this.shouldShowViewsContext=wi.bindTo(this.contextKeyService),this.pendingEditSessionsContext=vi.bindTo(this.contextKeyService),this.pendingEditSessionsContext.set(!1),this.productService["editSessions.store"]?.url&&(this.editSessionsStorageClient=new Oi(O.parse(this.productService["editSessions.store"].url),this.productService,this.requestService,this.logService,this.environmentService,this.fileService,this.storageService),this.editSessionsStorageService.storeClient=this.editSessionsStorageClient,this.workspaceStateSynchronizer=new bi(this.userDataProfilesService.defaultProfile,void 0,this.editSessionsStorageClient,this.logService,this.fileService,this.environmentService,this.telemetryService,this.configurationService,this.storageService,this.uriIdentityService,this.workspaceIdentityService,this.editSessionsStorageService),this.autoResumeEditSession(),this.registerActions(),this.registerViews(),this.registerContributedEditSessionOptions(),this._register(this.fileService.registerProvider(ce.SCHEMA,new ce(this.editSessionsStorageService))),this.lifecycleService.onWillShutdown(M=>{M.reason!==ci.RELOAD&&this.editSessionsStorageService.isSignedIn&&this.configurationService.getValue("workbench.experimental.cloudChanges.autoStore")==="onShutdown"&&!fe&&M.join(this.autoStoreEditSession(),{id:"autoStoreWorkingChanges",label:s("autoStoreWorkingChanges","Storing current working changes...")})}),this._register(this.editSessionsStorageService.onDidSignIn(()=>this.updateAccountsMenuBadge())),this._register(this.editSessionsStorageService.onDidSignOut(()=>this.updateAccountsMenuBadge())))}continueEditSessionOptions=[];shouldShowViewsContext;pendingEditSessionsContext;static APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY="applicationLaunchedViaContinueOn";accountsMenuBadgeDisposable=this._register(new me);registeredCommands=new Set;workspaceStateSynchronizer;editSessionsStorageClient;async autoResumeEditSession(){const e=this.configurationService.getValue("workbench.cloudChanges.autoResume")==="onReload";if(this.environmentService.editSessionId!==void 0)this.logService.info(`Resuming cloud changes, reason: found editSessionId ${this.environmentService.editSessionId} in environment service...`),await this.progressService.withProgress(E,async i=>await this.resumeEditSession(this.environmentService.editSessionId,void 0,void 0,void 0,i).finally(()=>this.environmentService.editSessionId=void 0));else if(e&&this.editSessionsStorageService.isSignedIn)this.logService.info("Resuming cloud changes, reason: cloud changes enabled..."),await this.progressService.withProgress(E,async i=>await this.resumeEditSession(void 0,!0,void 0,void 0,i));else if(e){const i=this.storageService.getBoolean(w.APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY,T.APPLICATION,!1);this.logService.info(`Prompting to enable cloud changes, has application previously launched from Continue On flow: ${i}`);const n=()=>{this.logService.info("Showing badge to enable cloud changes in accounts menu..."),this.updateAccountsMenuBadge(),this.pendingEditSessionsContext.set(!0);const t=this.editSessionsStorageService.onDidSignIn(async()=>{t.dispose(),this.logService.info("Showing badge to enable cloud changes in accounts menu succeeded, resuming cloud changes..."),await this.progressService.withProgress(E,async o=>await this.resumeEditSession(void 0,!0,void 0,void 0,o)),this.storageService.remove(w.APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY,T.APPLICATION),this.environmentService.continueOn=void 0})};this.environmentService.continueOn!==void 0&&!this.editSessionsStorageService.isSignedIn&&i===!1?(this.storageService.store(w.APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY,!0,T.APPLICATION,Ve.MACHINE),this.logService.info("Prompting to enable cloud changes..."),await this.editSessionsStorageService.initialize("read"),this.editSessionsStorageService.isSignedIn?(this.logService.info("Prompting to enable cloud changes succeeded, resuming cloud changes..."),await this.progressService.withProgress(E,async t=>await this.resumeEditSession(void 0,!0,void 0,void 0,t))):n()):!this.editSessionsStorageService.isSignedIn&&i===!0&&n()}else this.logService.debug("Auto resuming cloud changes disabled.")}updateAccountsMenuBadge(){if(this.editSessionsStorageService.isSignedIn)return this.accountsMenuBadgeDisposable.clear();const e=new ii(1,()=>s("check for pending cloud changes","Check for pending cloud changes"));this.accountsMenuBadgeDisposable.value=this.activityService.showAccountsActivity({badge:e})}async autoStoreEditSession(){const e=new A;await this.progressService.withProgress({location:D.Window,type:"syncing",title:s("store working changes","Storing working changes...")},async()=>this.storeEditSession(!1,e.token),()=>{e.cancel(),e.dispose()})}registerViews(){const e=W.as(Xe.ViewContainersRegistry).registerViewContainer({id:oe,title:yi,ctorDescriptor:new Re(Qe,[oe,{mergeViewWithContainerWhenSingleView:!0}]),icon:Ci,hideIfEmpty:!0},ne.Sidebar,{doNotRegisterOpenCommand:!0});this._register(this.instantiationService.createInstance(Ai,e))}registerActions(){this.registerContinueEditSessionAction(),this.registerResumeLatestEditSessionAction(),this.registerStoreLatestEditSessionAction(),this.registerContinueInLocalFolderAction(),this.registerShowEditSessionViewAction(),this.registerShowEditSessionOutputChannelAction()}registerShowEditSessionOutputChannelAction(){this._register(v(class extends f{constructor(){super(de)}run(i,...n){i.get(di).showChannel(Ei)}}))}registerShowEditSessionViewAction(){const e=this;this._register(v(class extends f{constructor(){super({id:"workbench.editSessions.actions.showEditSessions",title:C("show cloud changes","Show Cloud Changes"),category:b,f1:!0})}async run(n){e.shouldShowViewsContext.set(!0),await n.get(hi).openView(fi)}}))}registerContinueEditSessionAction(){const e=this;this._register(v(class extends f{constructor(){super(x)}async run(n,t,o){let r=t;if(!o&&!r&&(o=await e.pickContinueEditSessionDestination(),!o)){e.telemetryService.publicLog2("continueOn.editSessions.pick.outcome",{outcome:"noSelection"});return}const a=await e.shouldContinueOnWithEditSession();let u;if(a){e.telemetryService.publicLog2("continueOn.editSessions.store");const l=new A;try{u=await e.progressService.withProgress({location:D.Notification,cancellable:!0,type:"syncing",title:s("store your working changes","Storing your working changes...")},async()=>{const h=await e.storeEditSession(!1,l.token);return h!==void 0?e.telemetryService.publicLog2("continueOn.editSessions.store.outcome",{outcome:"storeSucceeded",hashedId:N(h)}):e.telemetryService.publicLog2("continueOn.editSessions.store.outcome",{outcome:"storeSkipped"}),h},()=>{l.cancel(),l.dispose(),e.telemetryService.publicLog2("continueOn.editSessions.store.outcome",{outcome:"storeCancelledByUser"})})}catch(h){throw e.telemetryService.publicLog2("continueOn.editSessions.store.outcome",{outcome:"storeFailed"}),h}}if(r=o?await e.resolveDestination(o):r,r!==void 0)if(u!==void 0&&r!=="noDestinationUri"){const l=encodeURIComponent(u);r=r.with({query:r.query.length>0?r.query+`&${ue}=${l}&continueOn=1`:`${ue}=${l}&continueOn=1`}),e.logService.info(`Opening ${r.toString()}`),await e.openerService.open(r,{openExternal:!0})}else!a&&r!=="noDestinationUri"?(e.logService.info(`Opening ${r.toString()}`),await e.openerService.open(r,{openExternal:!0})):u===void 0&&a&&e.logService.warn(`Failed to store working changes when invoking ${x.id}.`)}}))}registerResumeLatestEditSessionAction(){const e=this;this._register(v(class extends f{constructor(){super({id:"workbench.editSessions.actions.resumeLatest",title:C("resume latest cloud changes","Resume Latest Changes from Cloud"),category:b,f1:!0})}async run(n,t,o){await e.progressService.withProgress({...E,title:_},async()=>await e.resumeEditSession(t,void 0,o))}})),this._register(v(class extends f{constructor(){super({id:"workbench.editSessions.actions.resumeFromSerializedPayload",title:C("resume cloud changes","Resume Changes from Serialized Data"),category:"Developer",f1:!0})}async run(n,t){const o=await e.quickInputService.input({prompt:"Enter serialized data"});o&&e.editSessionsStorageService.lastReadResources.set("editSessions",{content:o,ref:""}),await e.progressService.withProgress({...E,title:_},async()=>await e.resumeEditSession(t,void 0,void 0,void 0,void 0,o))}}))}registerStoreLatestEditSessionAction(){const e=this;this._register(v(class extends f{constructor(){super({id:"workbench.editSessions.actions.storeCurrent",title:C("store working changes in cloud","Store Working Changes in Cloud"),category:b,f1:!0})}async run(n){const t=new A;await e.progressService.withProgress({location:D.Notification,title:s("storing working changes","Storing working changes...")},async()=>{e.telemetryService.publicLog2("editSessions.store"),await e.storeEditSession(!0,t.token)},()=>{t.cancel(),t.dispose()})}}))}async resumeEditSession(e,i,n,t,o,r){if(await this.remoteAgentService.getEnvironment(),this.contextService.getWorkbenchState()===te.EMPTY||(this.logService.info(e!==void 0?`Resuming changes from cloud with ref ${e}...`:"Checking for pending cloud changes..."),i&&!await this.editSessionsStorageService.initialize("read",!0)))return;this.telemetryService.publicLog2("editSessions.resume"),performance.mark("code/willResumeEditSessionFromIdentifier"),o?.report({message:s("checkingForWorkingChanges","Checking for pending cloud changes...")});const a=r?{content:r,ref:""}:await this.editSessionsStorageService.read("editSessions",e);if(!a){e===void 0&&!i?this.notificationService.info(s("no cloud changes","There are no changes to resume from the cloud.")):e!==void 0&&this.notificationService.warn(s("no cloud changes for ref","Could not resume changes from the cloud for ID {0}.",e)),this.logService.info(e!==void 0?`Aborting resuming changes from cloud as no edit session content is available to be applied from ref ${e}.`:"Aborting resuming edit session as no edit session content is available to be applied");return}o?.report({message:_});const u=JSON.parse(a.content);if(e=a.ref,u.version>Ii){this.notificationService.error(s("client too old","Please upgrade to a newer version of {0} to resume your working changes from the cloud.",this.productService.nameLong)),this.telemetryService.publicLog2("editSessions.resume.outcome",{hashedId:N(e),outcome:"clientUpdateNeeded"});return}try{const{changes:l,conflictingChanges:h}=await this.generateChanges(u,e,n,t);if(l.length===0)return;if(h.length>0){const{confirmed:S}=await this.dialogService.confirm({type:X.Warning,message:h.length>1?s("resume edit session warning many","Resuming your working changes from the cloud will overwrite the following {0} files. Do you want to proceed?",h.length):s("resume edit session warning 1","Resuming your working changes from the cloud will overwrite {0}. Do you want to proceed?",ve(h[0].uri)),detail:h.length>1?be(h.map(d=>d.uri)):void 0});if(!S)return}for(const{uri:S,type:d,contents:g}of l)d===I.Addition?await this.fileService.writeFile(S,pi(u.version,g)):d===I.Deletion&&await this.fileService.exists(S)&&await this.fileService.del(S);await this.workspaceStateSynchronizer?.apply(!1,{}),this.logService.info(`Deleting edit session with ref ${e} after successfully applying it to current workspace...`),await this.editSessionsStorageService.delete("editSessions",e),this.logService.info(`Deleted edit session with ref ${e}.`),this.telemetryService.publicLog2("editSessions.resume.outcome",{hashedId:N(e),outcome:"resumeSucceeded"})}catch(l){this.logService.error("Failed to resume edit session, reason: ",l.toString()),this.notificationService.error(s("resume failed","Failed to resume your working changes from the cloud."))}performance.mark("code/didResumeEditSessionFromIdentifier")}async generateChanges(e,i,n=!1,t=!1){const o=[],r=[],a=this.contextService.getWorkspace().folders,u=new A;for(const l of e.folders){let h;if(l.canonicalIdentity)for(const d of a){const g=await this.editSessionIdentityService.getEditSessionIdentifier(d,u.token);if(this.logService.info(`Matching identity ${g} against edit session folder identity ${l.canonicalIdentity}...`),pe(g,l.canonicalIdentity)||n){h=d;break}if(g!==void 0){const m=await this.editSessionIdentityService.provideEditSessionIdentityMatch(d,g,l.canonicalIdentity,u.token);if(m===ee.Complete){h=d;break}else if(m===ee.Partial&&this.configurationService.getValue("workbench.experimental.cloudChanges.partialMatches.enabled")===!0)if(!t)this.notificationService.prompt(X.Info,s("editSessionPartialMatch","You have pending working changes in the cloud for this workspace. Would you like to resume them?"),[{label:s("resume","Resume"),run:()=>this.resumeEditSession(i,!1,void 0,!0)}]);else{h=d;break}}}else h=a.find(d=>d.name===l.name);if(!h)return this.logService.info(`Skipping applying ${l.workingChanges.length} changes from edit session with ref ${i} as no matching workspace folder was found.`),{changes:[],conflictingChanges:[],contributedStateHandlers:[]};const S=new Set;for(const d of this.scmService.repositories)d.provider.rootUri!==void 0&&this.contextService.getWorkspaceFolder(d.provider.rootUri)?.name===l.name&&this.getChangedResources(d).forEach(m=>S.add(m.toString()));for(const d of l.workingChanges){const g=we(h.uri,d.relativeFilePath);o.push({uri:g,type:d.type,contents:d.contents}),await this.willChangeLocalContents(S,g,d)&&r.push({uri:g,type:d.type,contents:d.contents})}}return{changes:o,conflictingChanges:r}}async willChangeLocalContents(e,i,n){if(!e.has(i.toString()))return!1;const{contents:t,type:o}=n;switch(o){case I.Addition:{const[r,a]=await Promise.all([$(t),$(q((await this.fileService.readFile(i)).value))]);return r!==a}case I.Deletion:return await this.fileService.exists(i);default:throw new Error("Unhandled change type.")}}async storeEditSession(e,i){const n=[];let t=0,o=!1;await this.editorService.saveAll();for(const a of this.scmService.repositories){const u=this.getChangedResources(a),l=[],{rootUri:h}=a.provider,S=h?this.contextService.getWorkspaceFolder(h):void 0;let d=S?.name;for(const m of u){const k=this.contextService.getWorkspaceFolder(m);if(!k){this.logService.info(`Skipping working change ${m.toString()} as no associated workspace folder was found.`);continue}await this.editSessionIdentityService.onWillCreateEditSessionIdentity(k,i),d=d??k.name;const L=ye(k.uri,m)??m.path;try{if(!(await this.fileService.stat(m)).isFile)continue}catch{}if(o=!0,await this.fileService.exists(m)){const F=q((await this.fileService.readFile(m)).value);if(t+=F.length,t>this.editSessionsStorageService.SIZE_LIMIT){this.notificationService.error(s("payload too large","Your working changes exceed the size limit and cannot be stored."));return}l.push({type:I.Addition,fileType:se.File,contents:F,relativeFilePath:L})}else l.push({type:I.Deletion,fileType:se.File,contents:void 0,relativeFilePath:L})}let g;S!=null&&(g=await this.editSessionIdentityService.getEditSessionIdentifier(S,i)),n.push({workingChanges:l,name:d??"",canonicalIdentity:g??void 0,absoluteUri:S?.uri.toString()})}if(await this.workspaceStateSynchronizer?.sync(null,{}),!o){this.logService.info("Skipped storing working changes in the cloud as there are no edits to store."),e&&this.notificationService.info(s("no working changes to store","Skipped storing working changes in the cloud as there are no edits to store."));return}const r={folders:n,version:2,workspaceStateId:this.editSessionsStorageService.lastWrittenResources.get("workspaceState")?.ref};try{this.logService.info("Storing edit session...");const a=await this.editSessionsStorageService.write("editSessions",r);return this.logService.info(`Stored edit session with ref ${a}.`),a}catch(a){if(this.logService.error("Failed to store edit session, reason: ",a.toString()),a instanceof Ke)switch(a.code){case Be.TooLarge:this.telemetryService.publicLog2("editSessions.upload.failed",{reason:"TooLarge"}),this.notificationService.error(s("payload too large","Your working changes exceed the size limit and cannot be stored."));break;default:this.telemetryService.publicLog2("editSessions.upload.failed",{reason:"unknown"}),this.notificationService.error(s("payload failed","Your working changes cannot be stored."));break}}}getChangedResources(e){return e.provider.groups.reduce((i,n)=>(n.resources.forEach(t=>i.add(t.sourceUri)),i),new Set)}hasEditSession(){for(const e of this.scmService.repositories)if(this.getChangedResources(e).size>0)return!0;return!1}async shouldContinueOnWithEditSession(){if(this.editSessionsStorageService.isSignedIn)return this.hasEditSession();if(this.configurationService.getValue(Di)==="off")return this.telemetryService.publicLog2("continueOn.editSessions.canStore.outcome",{outcome:"disabledEditSessionsViaSetting"}),!1;if(this.hasEditSession()){const e=new B,i=e.add(this.quickInputService.createQuickPick());i.placeholder=s("continue with cloud changes","Select whether to bring your working changes with you"),i.ok=!1,i.ignoreFocusOut=!0;const n={label:s("with cloud changes","Yes, continue with my working changes")},t={label:s("without cloud changes","No, continue without my working changes")};i.items=[n,t];const o=await new Promise((a,u)=>{e.add(i.onDidAccept(()=>{a(i.selectedItems[0]===n),e.dispose()})),e.add(i.onDidHide(()=>{u(new z),e.dispose()})),i.show()});if(!o)return this.telemetryService.publicLog2("continueOn.editSessions.canStore.outcome",{outcome:"didNotEnableEditSessionsWhenPrompted"}),o;const r=await this.editSessionsStorageService.initialize("write");return r||this.telemetryService.publicLog2("continueOn.editSessions.canStore.outcome",{outcome:"didNotEnableEditSessionsWhenPrompted"}),r}return!1}registerContributedEditSessionOptions(){Ri.setHandler(e=>{const i=[];for(const n of e)if(oi(n.description,"contribEditSessions")&&Array.isArray(n.value))for(const t of n.value){const o=Q.getCommand(t.command);if(!o)return;const r=o.icon,a=typeof o.title=="string"?o.title:o.title.value,u=G.deserialize(t.when);i.push(new U(H.isThemeIcon(r)?`$(${r.id}) ${a}`:a,o.id,o.source?.title,u,t.documentation)),t.qualifiedName&&this.generateStandaloneOptionCommand(o.id,t.qualifiedName,t.category??o.category,u,t.remoteGroup)}this.continueEditSessionOptions=i})}generateStandaloneOptionCommand(e,i,n,t,o){const r={id:`${x.id}.${e}`,title:{original:i,value:i},category:typeof n=="string"?{original:n,value:n}:n,precondition:t,f1:!0};this.registeredCommands.has(r.id)||(this.registeredCommands.add(r.id),this._register(v(class extends f{constructor(){super(r)}async run(u){return u.get(Y).executeCommand(x.id,void 0,e)}})),o!==void 0&&Q.appendMenuItem(Ce.StatusBarRemoteIndicatorMenu,{group:o,command:r,when:r.precondition}))}registerContinueInLocalFolderAction(){const e=this;this._register(v(class extends f{constructor(){super(R)}async run(n){const t=await e.fileDialogService.showOpenDialog({title:s("continueEditSession.openLocalFolder.title.v2","Select a local folder to continue working in"),canSelectFolders:!0,canSelectMany:!1,canSelectFiles:!1,availableFileSystems:[K.file]});return t?.length!==1?void 0:O.from({scheme:e.productService.urlProtocol,authority:K.file,path:t[0].path})}})),ie(this.contextService.getWorkspace())!==void 0&&j&&this.generateStandaloneOptionCommand(R.id,s("continueWorkingOn.existingLocalFolder","Continue Working in Existing Local Folder"),void 0,R.precondition,void 0)}async pickContinueEditSessionDestination(){const e=new B,i=e.add(this.quickInputService.createQuickPick({useSeparators:!0})),n=this.contextService.getWorkbenchState()===te.FOLDER?this.contextService.getWorkspace().folders[0].name:this.contextService.getWorkspace().folders.map(o=>o.name).join(", ");i.placeholder=s("continueEditSessionPick.title.v2","Select a development environment to continue working on {0} in",`'${n}'`),i.items=this.createPickItems(),this.extensionService.onDidChangeExtensions(()=>{i.items=this.createPickItems()});const t=await new Promise((o,r)=>{e.add(i.onDidHide(()=>{e.dispose(),o(void 0)})),e.add(i.onDidAccept(a=>{const u=i.activeItems[0].command;u===P.id?this.commandService.executeCommand(P.id):(o(u),i.hide())})),i.show(),e.add(i.onDidTriggerItemButton(async a=>{if(a.item.documentation!==void 0){const u=O.isUri(a.item.documentation)?O.parse(a.item.documentation):await this.commandService.executeCommand(a.item.documentation);this.openerService.open(u,{openExternal:!0})}}))});return i.dispose(),t}async resolveDestination(e){try{const i=await this.commandService.executeCommand(e);if(i===void 0)return this.telemetryService.publicLog2("continueOn.openDestination.outcome",{selection:e,outcome:"noDestinationUri"}),"noDestinationUri";if(O.isUri(i))return this.telemetryService.publicLog2("continueOn.openDestination.outcome",{selection:e,outcome:"resolvedUri"}),i;this.telemetryService.publicLog2("continueOn.openDestination.outcome",{selection:e,outcome:"invalidDestination"});return}catch(i){i instanceof z?this.telemetryService.publicLog2("continueOn.openDestination.outcome",{selection:e,outcome:"cancelled"}):this.telemetryService.publicLog2("continueOn.openDestination.outcome",{selection:e,outcome:"unknownError"});return}}createPickItems(){const e=[...this.continueEditSessionOptions].filter(n=>n.when===void 0||this.contextKeyService.contextMatchesRules(n.when));return ie(this.contextService.getWorkspace())!==void 0&&j&&e.push(new U("$(folder) "+s("continueEditSessionItem.openInLocalFolder.v2","Open in Local Folder"),R.id,s("continueEditSessionItem.builtin","Built-in"))),e.sort((n,t)=>n.label.localeCompare(t.label)).concat({type:"separator"},new U(P.title,P.id))}};w=V([c(0,ae),c(1,xe),c(2,Ne),c(3,We),c(4,$e),c(5,mi),c(6,Fe),c(7,Pe),c(8,re),c(9,De),c(10,Le),c(11,Te),c(12,Ie),c(13,He),c(14,je),c(15,_e),c(16,Y),c(17,ke),c(18,Ae),c(19,ri),c(20,Me),c(21,ei),c(22,ti),c(23,li),c(24,ni),c(25,Ue),c(26,ze),c(27,qe),c(28,Si)],w);const xi=H.asClassName(Se.info);class U{constructor(p,e,i,n,t){this.label=p;this.command=e;this.description=i;this.when=n;this.documentation=t;t!==void 0&&(this.buttons=[{iconClass:xi,tooltip:s("learnMoreTooltip","Learn More")}])}buttons}const Ri=si.registerExtensionPoint({extensionPoint:"continueEditSession",jsonSchema:{description:s("continueEditSessionExtPoint","Contributes options for continuing the current edit session in a different environment"),type:"array",items:{type:"object",properties:{command:{description:s("continueEditSessionExtPoint.command","Identifier of the command to execute. The command must be declared in the 'commands'-section and return a URI representing a different environment where the current edit session can be continued."),type:"string"},group:{description:s("continueEditSessionExtPoint.group","Group into which this item belongs."),type:"string"},qualifiedName:{description:s("continueEditSessionExtPoint.qualifiedName","A fully qualified name for this item which is used for display in menus."),type:"string"},description:{description:s("continueEditSessionExtPoint.description","The url, or a command that returns the url, to the option's documentation page."),type:"string"},remoteGroup:{description:s("continueEditSessionExtPoint.remoteGroup","Group into which this item belongs in the remote indicator."),type:"string"},when:{description:s("continueEditSessionExtPoint.when","Condition which must be true to show this item."),type:"string"}},required:["command"]}}}),Li=W.as(Ze.Workbench);Li.registerWorkbenchContribution(w,ai.Restored),W.as(Ee.Configuration).registerConfiguration({...Ye,properties:{"workbench.experimental.cloudChanges.autoStore":{enum:["onShutdown","off"],enumDescriptions:[s("autoStoreWorkingChanges.onShutdown","Automatically store current working changes in the cloud on window close."),s("autoStoreWorkingChanges.off","Never attempt to automatically store working changes in the cloud.")],type:"string",tags:["experimental","usesOnlineServices"],default:"off",markdownDescription:s("autoStoreWorkingChangesDescription","Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.")},"workbench.cloudChanges.autoResume":{enum:["onReload","off"],enumDescriptions:[s("autoResumeWorkingChanges.onReload","Automatically resume available working changes from the cloud on window reload."),s("autoResumeWorkingChanges.off","Never attempt to resume working changes from the cloud.")],type:"string",tags:["usesOnlineServices"],default:"onReload",markdownDescription:s("autoResumeWorkingChanges","Controls whether to automatically resume available working changes stored in the cloud for the current workspace.")},"workbench.cloudChanges.continueOn":{enum:["prompt","off"],enumDescriptions:[s("continueOnCloudChanges.promptForAuth","Prompt the user to sign in to store working changes in the cloud with Continue Working On."),s("continueOnCloudChanges.off","Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.")],type:"string",tags:["usesOnlineServices"],default:"prompt",markdownDescription:s("continueOnCloudChanges","Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.")},"workbench.experimental.cloudChanges.partialMatches.enabled":{type:"boolean",tags:["experimental","usesOnlineServices"],default:!1,markdownDescription:s("cloudChangesPartialMatchesEnabled","Controls whether to surface cloud changes which partially match the current session.")}}});export{w as EditSessionsContribution};
