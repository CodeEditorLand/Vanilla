var P=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var y=(S,s,i,e)=>{for(var t=e>1?void 0:e?N(s,i):s,c=S.length-1,o;c>=0;c--)(o=S[c])&&(t=(e?o(s,i,t):o(t))||t);return e&&t&&P(s,i,t),t},u=(S,s)=>(i,e)=>s(i,e,S);import{Disposable as O}from"../../../../base/common/lifecycle.js";import{localize as a}from"../../../../nls.js";import{SyncDescriptor as D}from"../../../../platform/instantiation/common/descriptors.js";import{IInstantiationService as W}from"../../../../platform/instantiation/common/instantiation.js";import{Registry as $}from"../../../../platform/registry/common/platform.js";import{TreeView as F,TreeViewPane as R}from"../../../browser/parts/views/treeView.js";import{Extensions as H,TreeItemCollapsibleState as g}from"../../../common/views.js";import{ChangeType as K,EDIT_SESSIONS_DATA_VIEW_ID as U,EDIT_SESSIONS_SCHEME as T,EDIT_SESSIONS_SHOW_VIEW as M,EDIT_SESSIONS_TITLE as f,IEditSessionsStorageService as b}from"../common/editSessions.js";import{URI as h}from"../../../../base/common/uri.js";import{fromNow as A}from"../../../../base/common/date.js";import{Codicon as m}from"../../../../base/common/codicons.js";import{API_OPEN_EDITOR_COMMAND_ID as Y}from"../../../browser/parts/editor/editorCommands.js";import{registerAction2 as v,Action2 as I,MenuId as E}from"../../../../platform/actions/common/actions.js";import{ContextKeyExpr as l,IContextKeyService as q,RawContextKey as J}from"../../../../platform/contextkey/common/contextkey.js";import{ICommandService as _}from"../../../../platform/commands/common/commands.js";import{IDialogService as V}from"../../../../platform/dialogs/common/dialogs.js";import{IWorkspaceContextService as L}from"../../../../platform/workspace/common/workspace.js";import{joinPath as j}from"../../../../base/common/resources.js";import{IFileService as B}from"../../../../platform/files/common/files.js";import{basename as z}from"../../../../base/common/path.js";const k="editSessionsCount",X=new J(k,0);let w=class extends O{constructor(i,e){super();this.instantiationService=e;this.registerViews(i)}registerViews(i){const e=U,t=this.instantiationService.createInstance(F,e,f.value);t.showCollapseAllAction=!0,t.showRefreshAction=!0,t.dataProvider=this.instantiationService.createInstance(p);const c=$.as(H.ViewsRegistry);c.registerViews([{id:e,name:f,ctorDescriptor:new D(R),canToggleVisibility:!0,canMoveView:!1,treeView:t,collapsed:!1,when:l.and(M),order:100,hideByDefault:!0}],i),c.registerViewWelcomeContent(e,{content:a("noStoredChanges",`You have no stored changes in the cloud to display.
{0}`,`[${a("storeWorkingChangesTitle","Store Working Changes")}](command:workbench.editSessions.actions.store)`),when:l.equals(k,0),order:1}),this._register(v(class extends I{constructor(){super({id:"workbench.editSessions.actions.resume",title:a("workbench.editSessions.actions.resume.v2","Resume Working Changes"),icon:m.desktopDownload,menu:{id:E.ViewItemContext,when:l.and(l.equals("view",e),l.regex("viewItem",/edit-session/i)),group:"inline"}})}async run(o,r){const n=h.parse(r.$treeItemHandle).path.substring(1);await o.get(_).executeCommand("workbench.editSessions.actions.resumeLatest",n,!0),await t.refresh()}})),this._register(v(class extends I{constructor(){super({id:"workbench.editSessions.actions.store",title:a("workbench.editSessions.actions.store.v2","Store Working Changes"),icon:m.cloudUpload})}async run(o,r){await o.get(_).executeCommand("workbench.editSessions.actions.storeCurrent"),await t.refresh()}})),this._register(v(class extends I{constructor(){super({id:"workbench.editSessions.actions.delete",title:a("workbench.editSessions.actions.delete.v2","Delete Working Changes"),icon:m.trash,menu:{id:E.ViewItemContext,when:l.and(l.equals("view",e),l.regex("viewItem",/edit-session/i)),group:"inline"}})}async run(o,r){const n=h.parse(r.$treeItemHandle).path.substring(1),d=o.get(V),C=o.get(b);(await d.confirm({message:a("confirm delete.v2","Are you sure you want to permanently delete your working changes with ref {0}?",n),detail:a("confirm delete detail.v2"," You cannot undo this action."),type:"warning",title:f.value})).confirmed&&(await C.delete("editSessions",n),await t.refresh())}})),this._register(v(class extends I{constructor(){super({id:"workbench.editSessions.actions.deleteAll",title:a("workbench.editSessions.actions.deleteAll","Delete All Working Changes from Cloud"),icon:m.trash,menu:{id:E.ViewTitle,when:l.and(l.equals("view",e),l.greater(k,0))}})}async run(o){const r=o.get(V),n=o.get(b);(await r.confirm({message:a("confirm delete all","Are you sure you want to permanently delete all stored changes from the cloud?"),detail:a("confirm delete all detail"," You cannot undo this action."),type:"warning",title:f.value})).confirmed&&(await n.delete("editSessions",null),await t.refresh())}}))}};w=y([u(1,W)],w);let p=class{constructor(s,i,e,t){this.editSessionsStorageService=s;this.contextKeyService=i;this.workspaceContextService=e;this.fileService=t;this.editSessionsCount=X.bindTo(this.contextKeyService)}editSessionsCount;async getChildren(s){if(!s)return this.getAllEditSessions();const[i,e,t]=h.parse(s.handle).path.substring(1).split("/");return i&&!e?this.getEditSession(i):i&&e&&!t?this.getEditSessionFolderContents(i,e):[]}async getAllEditSessions(){const s=await this.editSessionsStorageService.list("editSessions");this.editSessionsCount.set(s.length);const i=[];for(const e of s){const t=h.from({scheme:T,authority:"remote-session-content",path:`/${e.ref}`}),c=await this.editSessionsStorageService.read("editSessions",e.ref);if(!c)continue;const o=JSON.parse(c.content),r=o.folders.map(x=>x.name).join(", ")??e.ref,n=o.machine,d=n?await this.editSessionsStorageService.getMachineById(n):void 0,C=d===void 0?A(e.created,!0):`${A(e.created,!0)}\xA0\xA0\u2022\xA0\xA0${d}`;i.push({handle:t.toString(),collapsibleState:g.Collapsed,label:{label:r},description:C,themeIcon:m.repo,contextValue:"edit-session"})}return i}async getEditSession(s){const i=await this.editSessionsStorageService.read("editSessions",s);if(!i)return[];const e=JSON.parse(i.content);if(e.folders.length===1){const t=e.folders[0];return this.getEditSessionFolderContents(s,t.name)}return e.folders.map(t=>({handle:h.from({scheme:T,authority:"remote-session-content",path:`/${i.ref}/${t.name}`}).toString(),collapsibleState:g.Collapsed,label:{label:t.name},themeIcon:m.folder}))}async getEditSessionFolderContents(s,i){const e=await this.editSessionsStorageService.read("editSessions",s);if(!e)return[];const t=JSON.parse(e.content),c=this.workspaceContextService.getWorkspace().folders.find(r=>r.name===i),o=t.folders.find(r=>r.name===i);return o?Promise.all(o.workingChanges.map(async r=>{const n=h.from({scheme:T,authority:"remote-session-content",path:`/${e.ref}/${i}/${r.relativeFilePath}`});if(c?.uri){const d=j(c.uri,r.relativeFilePath);if(r.type===K.Addition&&await this.fileService.exists(d))return{handle:n.toString(),resourceUri:n,collapsibleState:g.None,label:{label:r.relativeFilePath},themeIcon:m.file,command:{id:"vscode.diff",title:a("compare changes","Compare Changes"),arguments:[d,n,`${z(r.relativeFilePath)} (${a("local copy","Local Copy")} \u2194 ${a("cloud changes","Cloud Changes")})`,void 0]}}}return{handle:n.toString(),resourceUri:n,collapsibleState:g.None,label:{label:r.relativeFilePath},themeIcon:m.file,command:{id:Y,title:a("open file","Open File"),arguments:[n,void 0,void 0]}}})):[]}};p=y([u(0,b),u(1,q),u(2,L),u(3,B)],p);export{w as EditSessionsDataViews};
