{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from '../../../common/contributions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ILifecycleService, LifecyclePhase, ShutdownReason } from '../../../services/lifecycle/common/lifecycle.js';\nimport { Action2, IAction2Options, MenuId, MenuRegistry, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IEditSessionsStorageService, Change, ChangeType, Folder, EditSession, FileType, EDIT_SESSION_SYNC_CATEGORY, EDIT_SESSIONS_CONTAINER_ID, EditSessionSchemaVersion, IEditSessionsLogService, EDIT_SESSIONS_VIEW_ICON, EDIT_SESSIONS_TITLE, EDIT_SESSIONS_SHOW_VIEW, EDIT_SESSIONS_DATA_VIEW_ID, decodeEditSessionFileContent, hashedEditSessionId, editSessionsLogId, EDIT_SESSIONS_PENDING } from '../common/editSessions.js';\nimport { ISCMRepository, ISCMService } from '../../scm/common/scm.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { basename, joinPath, relativePath } from '../../../../base/common/resources.js';\nimport { encodeBase64 } from '../../../../base/common/buffer.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IProgress, IProgressService, IProgressStep, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { EditSessionsWorkbenchService } from './editSessionsStorageService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { UserDataSyncErrorCode, UserDataSyncStoreError, IUserDataSynchroniser } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { getFileNamesMessage, IDialogService, IFileDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IQuickInputButton, IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ExtensionsRegistry } from '../../../services/extensions/common/extensionsRegistry.js';\nimport { ContextKeyExpr, ContextKeyExpression, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { getVirtualWorkspaceLocation } from '../../../../platform/workspace/common/virtualWorkspace.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { IExtensionService, isProposedApiEnabled } from '../../../services/extensions/common/extensions.js';\nimport { EditSessionsLogService } from '../common/editSessionsLogService.js';\nimport { IViewContainersRegistry, Extensions as ViewExtensions, ViewContainerLocation } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { EditSessionsDataViews } from './editSessionsViews.js';\nimport { EditSessionsFileSystemProvider } from './editSessionsFileSystemProvider.js';\nimport { isNative, isWeb } from '../../../../base/common/platform.js';\nimport { VirtualWorkspaceContext, WorkspaceFolderCountContext } from '../../../common/contextkeys.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { equals } from '../../../../base/common/objects.js';\nimport { EditSessionIdentityMatch, IEditSessionIdentityService } from '../../../../platform/workspace/common/editSessions.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IOutputService } from '../../../services/output/common/output.js';\nimport { sha1Hex } from '../../../../base/browser/hash.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IActivityService, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ILocalizedString } from '../../../../platform/action/common/action.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { WorkspaceStateSynchroniser } from '../common/workspaceStateSync.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IRequestService } from '../../../../platform/request/common/request.js';\nimport { EditSessionsStoreClient } from '../common/editSessionsStorageClient.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceIdentityService } from '../../../services/workspaces/common/workspaceIdentityService.js';\n\nregisterSingleton(IEditSessionsLogService, EditSessionsLogService, InstantiationType.Delayed);\nregisterSingleton(IEditSessionsStorageService, EditSessionsWorkbenchService, InstantiationType.Delayed);\n\n\nconst continueWorkingOnCommand: IAction2Options = {\n\tid: '_workbench.editSessions.actions.continueEditSession',\n\ttitle: localize2('continue working on', 'Continue Working On...'),\n\tprecondition: WorkspaceFolderCountContext.notEqualsTo('0'),\n\tf1: true\n};\nconst openLocalFolderCommand: IAction2Options = {\n\tid: '_workbench.editSessions.actions.continueEditSession.openLocalFolder',\n\ttitle: localize2('continue edit session in local folder', 'Open In Local Folder'),\n\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\tprecondition: ContextKeyExpr.and(IsWebContext.toNegated(), VirtualWorkspaceContext)\n};\nconst showOutputChannelCommand: IAction2Options = {\n\tid: 'workbench.editSessions.actions.showOutputChannel',\n\ttitle: localize2('show log', \"Show Log\"),\n\tcategory: EDIT_SESSION_SYNC_CATEGORY\n};\nconst installAdditionalContinueOnOptionsCommand = {\n\tid: 'workbench.action.continueOn.extensions',\n\ttitle: localize('continueOn.installAdditional', 'Install additional development environment options'),\n};\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({ ...installAdditionalContinueOnOptionsCommand, f1: false });\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\treturn accessor.get(IExtensionsWorkbenchService).openSearch('@tag:continueOn');\n\t}\n});\n\nconst resumeProgressOptionsTitle = `[${localize('resuming working changes window', 'Resuming working changes...')}](command:${showOutputChannelCommand.id})`;\nconst resumeProgressOptions = {\n\tlocation: ProgressLocation.Window,\n\ttype: 'syncing',\n};\nconst queryParamName = 'editSessionId';\n\nconst useEditSessionsWithContinueOn = 'workbench.editSessions.continueOn';\nexport class EditSessionsContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate continueEditSessionOptions: ContinueEditSessionItem[] = [];\n\n\tprivate readonly shouldShowViewsContext: IContextKey<boolean>;\n\tprivate readonly pendingEditSessionsContext: IContextKey<boolean>;\n\n\tprivate static APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY = 'applicationLaunchedViaContinueOn';\n\tprivate readonly accountsMenuBadgeDisposable = this._register(new MutableDisposable());\n\n\tprivate registeredCommands = new Set<string>();\n\n\tprivate workspaceStateSynchronizer: IUserDataSynchroniser | undefined;\n\tprivate editSessionsStorageClient: EditSessionsStoreClient | undefined;\n\n\tconstructor(\n\t\t@IEditSessionsStorageService private readonly editSessionsStorageService: IEditSessionsStorageService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IEditSessionsLogService private readonly logService: IEditSessionsLogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IEditSessionIdentityService private readonly editSessionIdentityService: IEditSessionIdentityService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@ICommandService private commandService: ICommandService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceIdentityService private readonly workspaceIdentityService: IWorkspaceIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tthis.shouldShowViewsContext = EDIT_SESSIONS_SHOW_VIEW.bindTo(this.contextKeyService);\n\t\tthis.pendingEditSessionsContext = EDIT_SESSIONS_PENDING.bindTo(this.contextKeyService);\n\t\tthis.pendingEditSessionsContext.set(false);\n\n\t\tif (!this.productService['editSessions.store']?.url) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editSessionsStorageClient = new EditSessionsStoreClient(URI.parse(this.productService['editSessions.store'].url), this.productService, this.requestService, this.logService, this.environmentService, this.fileService, this.storageService);\n\t\tthis.editSessionsStorageService.storeClient = this.editSessionsStorageClient;\n\t\tthis.workspaceStateSynchronizer = new WorkspaceStateSynchroniser(this.userDataProfilesService.defaultProfile, undefined, this.editSessionsStorageClient, this.logService, this.fileService, this.environmentService, this.telemetryService, this.configurationService, this.storageService, this.uriIdentityService, this.workspaceIdentityService, this.editSessionsStorageService);\n\n\t\tthis.autoResumeEditSession();\n\n\t\tthis.registerActions();\n\t\tthis.registerViews();\n\t\tthis.registerContributedEditSessionOptions();\n\n\t\tthis._register(this.fileService.registerProvider(EditSessionsFileSystemProvider.SCHEMA, new EditSessionsFileSystemProvider(this.editSessionsStorageService)));\n\t\tthis.lifecycleService.onWillShutdown((e) => {\n\t\t\tif (e.reason !== ShutdownReason.RELOAD && this.editSessionsStorageService.isSignedIn && this.configurationService.getValue('workbench.experimental.cloudChanges.autoStore') === 'onShutdown' && !isWeb) {\n\t\t\t\te.join(this.autoStoreEditSession(), { id: 'autoStoreWorkingChanges', label: localize('autoStoreWorkingChanges', 'Storing current working changes...') });\n\t\t\t}\n\t\t});\n\t\tthis._register(this.editSessionsStorageService.onDidSignIn(() => this.updateAccountsMenuBadge()));\n\t\tthis._register(this.editSessionsStorageService.onDidSignOut(() => this.updateAccountsMenuBadge()));\n\t}\n\n\tprivate async autoResumeEditSession() {\n\t\tconst shouldAutoResumeOnReload = this.configurationService.getValue('workbench.cloudChanges.autoResume') === 'onReload';\n\n\t\tif (this.environmentService.editSessionId !== undefined) {\n\t\t\tthis.logService.info(`Resuming cloud changes, reason: found editSessionId ${this.environmentService.editSessionId} in environment service...`);\n\t\t\tawait this.progressService.withProgress(resumeProgressOptions, async (progress) => await this.resumeEditSession(this.environmentService.editSessionId, undefined, undefined, undefined, progress).finally(() => this.environmentService.editSessionId = undefined));\n\t\t} else if (shouldAutoResumeOnReload && this.editSessionsStorageService.isSignedIn) {\n\t\t\tthis.logService.info('Resuming cloud changes, reason: cloud changes enabled...');\n\t\t\t// Attempt to resume edit session based on edit workspace identifier\n\t\t\t// Note: at this point if the user is not signed into edit sessions,\n\t\t\t// we don't want them to be prompted to sign in and should just return early\n\t\t\tawait this.progressService.withProgress(resumeProgressOptions, async (progress) => await this.resumeEditSession(undefined, true, undefined, undefined, progress));\n\t\t} else if (shouldAutoResumeOnReload) {\n\t\t\t// The application has previously launched via a protocol URL Continue On flow\n\t\t\tconst hasApplicationLaunchedFromContinueOnFlow = this.storageService.getBoolean(EditSessionsContribution.APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY, StorageScope.APPLICATION, false);\n\t\t\tthis.logService.info(`Prompting to enable cloud changes, has application previously launched from Continue On flow: ${hasApplicationLaunchedFromContinueOnFlow}`);\n\n\t\t\tconst handlePendingEditSessions = () => {\n\t\t\t\t// display a badge in the accounts menu but do not prompt the user to sign in again\n\t\t\t\tthis.logService.info('Showing badge to enable cloud changes in accounts menu...');\n\t\t\t\tthis.updateAccountsMenuBadge();\n\t\t\t\tthis.pendingEditSessionsContext.set(true);\n\t\t\t\t// attempt a resume if we are in a pending state and the user just signed in\n\t\t\t\tconst disposable = this.editSessionsStorageService.onDidSignIn(async () => {\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\tthis.logService.info('Showing badge to enable cloud changes in accounts menu succeeded, resuming cloud changes...');\n\t\t\t\t\tawait this.progressService.withProgress(resumeProgressOptions, async (progress) => await this.resumeEditSession(undefined, true, undefined, undefined, progress));\n\t\t\t\t\tthis.storageService.remove(EditSessionsContribution.APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY, StorageScope.APPLICATION);\n\t\t\t\t\tthis.environmentService.continueOn = undefined;\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif ((this.environmentService.continueOn !== undefined) &&\n\t\t\t\t!this.editSessionsStorageService.isSignedIn &&\n\t\t\t\t// and user has not yet been prompted to sign in on this machine\n\t\t\t\thasApplicationLaunchedFromContinueOnFlow === false\n\t\t\t) {\n\t\t\t\t// store the fact that we prompted the user\n\t\t\t\tthis.storageService.store(EditSessionsContribution.APPLICATION_LAUNCHED_VIA_CONTINUE_ON_STORAGE_KEY, true, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t\tthis.logService.info('Prompting to enable cloud changes...');\n\t\t\t\tawait this.editSessionsStorageService.initialize('read');\n\t\t\t\tif (this.editSessionsStorageService.isSignedIn) {\n\t\t\t\t\tthis.logService.info('Prompting to enable cloud changes succeeded, resuming cloud changes...');\n\t\t\t\t\tawait this.progressService.withProgress(resumeProgressOptions, async (progress) => await this.resumeEditSession(undefined, true, undefined, undefined, progress));\n\t\t\t\t} else {\n\t\t\t\t\thandlePendingEditSessions();\n\t\t\t\t}\n\t\t\t} else if (!this.editSessionsStorageService.isSignedIn &&\n\t\t\t\t// and user has been prompted to sign in on this machine\n\t\t\t\thasApplicationLaunchedFromContinueOnFlow === true\n\t\t\t) {\n\t\t\t\thandlePendingEditSessions();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logService.debug('Auto resuming cloud changes disabled.');\n\t\t}\n\t}\n\n\tprivate updateAccountsMenuBadge() {\n\t\tif (this.editSessionsStorageService.isSignedIn) {\n\t\t\treturn this.accountsMenuBadgeDisposable.clear();\n\t\t}\n\n\t\tconst badge = new NumberBadge(1, () => localize('check for pending cloud changes', 'Check for pending cloud changes'));\n\t\tthis.accountsMenuBadgeDisposable.value = this.activityService.showAccountsActivity({ badge });\n\t}\n\n\tprivate async autoStoreEditSession() {\n\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\tawait this.progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttype: 'syncing',\n\t\t\ttitle: localize('store working changes', 'Storing working changes...')\n\t\t}, async () => this.storeEditSession(false, cancellationTokenSource.token), () => {\n\t\t\tcancellationTokenSource.cancel();\n\t\t\tcancellationTokenSource.dispose();\n\t\t});\n\t}\n\n\tprivate registerViews() {\n\t\tconst container = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).registerViewContainer(\n\t\t\t{\n\t\t\t\tid: EDIT_SESSIONS_CONTAINER_ID,\n\t\t\t\ttitle: EDIT_SESSIONS_TITLE,\n\t\t\t\tctorDescriptor: new SyncDescriptor(\n\t\t\t\t\tViewPaneContainer,\n\t\t\t\t\t[EDIT_SESSIONS_CONTAINER_ID, { mergeViewWithContainerWhenSingleView: true }]\n\t\t\t\t),\n\t\t\t\ticon: EDIT_SESSIONS_VIEW_ICON,\n\t\t\t\thideIfEmpty: true\n\t\t\t}, ViewContainerLocation.Sidebar, { doNotRegisterOpenCommand: true }\n\t\t);\n\t\tthis._register(this.instantiationService.createInstance(EditSessionsDataViews, container));\n\t}\n\n\tprivate registerActions() {\n\t\tthis.registerContinueEditSessionAction();\n\n\t\tthis.registerResumeLatestEditSessionAction();\n\t\tthis.registerStoreLatestEditSessionAction();\n\n\t\tthis.registerContinueInLocalFolderAction();\n\n\t\tthis.registerShowEditSessionViewAction();\n\t\tthis.registerShowEditSessionOutputChannelAction();\n\t}\n\n\tprivate registerShowEditSessionOutputChannelAction() {\n\t\tthis._register(registerAction2(class ShowEditSessionOutput extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper(showOutputChannelCommand);\n\t\t\t}\n\n\t\t\trun(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\t\tconst outputChannel = accessor.get(IOutputService);\n\t\t\t\tvoid outputChannel.showChannel(editSessionsLogId);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerShowEditSessionViewAction() {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class ShowEditSessionView extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.editSessions.actions.showEditSessions',\n\t\t\t\t\ttitle: localize2('show cloud changes', 'Show Cloud Changes'),\n\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\tf1: true\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tthat.shouldShowViewsContext.set(true);\n\t\t\t\tconst viewsService = accessor.get(IViewsService);\n\t\t\t\tawait viewsService.openView(EDIT_SESSIONS_DATA_VIEW_ID);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerContinueEditSessionAction() {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class ContinueEditSessionAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper(continueWorkingOnCommand);\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor, workspaceUri: URI | undefined, destination: string | undefined): Promise<void> {\n\t\t\t\ttype ContinueOnEventOutcome = { outcome: string; hashedId?: string };\n\t\t\t\ttype ContinueOnClassificationOutcome = {\n\t\t\t\t\towner: 'joyceerhl'; comment: 'Reporting the outcome of invoking the Continue On action.';\n\t\t\t\t\toutcome: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The outcome of invoking continue edit session.' };\n\t\t\t\t\thashedId?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The hash of the stored edit session id, for correlating success of stores and resumes.' };\n\t\t\t\t};\n\n\t\t\t\t// First ask the user to pick a destination, if necessary\n\t\t\t\tlet uri: URI | 'noDestinationUri' | undefined = workspaceUri;\n\t\t\t\tif (!destination && !uri) {\n\t\t\t\t\tdestination = await that.pickContinueEditSessionDestination();\n\t\t\t\t\tif (!destination) {\n\t\t\t\t\t\tthat.telemetryService.publicLog2<ContinueOnEventOutcome, ContinueOnClassificationOutcome>('continueOn.editSessions.pick.outcome', { outcome: 'noSelection' });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Determine if we need to store an edit session, asking for edit session auth if necessary\n\t\t\t\tconst shouldStoreEditSession = await that.shouldContinueOnWithEditSession();\n\n\t\t\t\t// Run the store action to get back a ref\n\t\t\t\tlet ref: string | undefined;\n\t\t\t\tif (shouldStoreEditSession) {\n\t\t\t\t\ttype ContinueWithEditSessionEvent = {};\n\t\t\t\t\ttype ContinueWithEditSessionClassification = {\n\t\t\t\t\t\towner: 'joyceerhl'; comment: 'Reporting when storing an edit session as part of the Continue On flow.';\n\t\t\t\t\t};\n\t\t\t\t\tthat.telemetryService.publicLog2<ContinueWithEditSessionEvent, ContinueWithEditSessionClassification>('continueOn.editSessions.store');\n\n\t\t\t\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tref = await that.progressService.withProgress({\n\t\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\t\tcancellable: true,\n\t\t\t\t\t\t\ttype: 'syncing',\n\t\t\t\t\t\t\ttitle: localize('store your working changes', 'Storing your working changes...')\n\t\t\t\t\t\t}, async () => {\n\t\t\t\t\t\t\tconst ref = await that.storeEditSession(false, cancellationTokenSource.token);\n\t\t\t\t\t\t\tif (ref !== undefined) {\n\t\t\t\t\t\t\t\tthat.telemetryService.publicLog2<ContinueOnEventOutcome, ContinueOnClassificationOutcome>('continueOn.editSessions.store.outcome', { outcome: 'storeSucceeded', hashedId: hashedEditSessionId(ref) });\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.telemetryService.publicLog2<ContinueOnEventOutcome, ContinueOnClassificationOutcome>('continueOn.editSessions.store.outcome', { outcome: 'storeSkipped' });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ref;\n\t\t\t\t\t\t}, () => {\n\t\t\t\t\t\t\tcancellationTokenSource.cancel();\n\t\t\t\t\t\t\tcancellationTokenSource.dispose();\n\t\t\t\t\t\t\tthat.telemetryService.publicLog2<ContinueOnEventOutcome, ContinueOnClassificationOutcome>('continueOn.editSessions.store.outcome', { outcome: 'storeCancelledByUser' });\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tthat.telemetryService.publicLog2<ContinueOnEventOutcome, ContinueOnClassificationOutcome>('continueOn.editSessions.store.outcome', { outcome: 'storeFailed' });\n\t\t\t\t\t\tthrow ex;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Append the ref to the URI\n\t\t\t\turi = destination ? await that.resolveDestination(destination) : uri;\n\t\t\t\tif (uri === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (ref !== undefined && uri !== 'noDestinationUri') {\n\t\t\t\t\tconst encodedRef = encodeURIComponent(ref);\n\t\t\t\t\turi = uri.with({\n\t\t\t\t\t\tquery: uri.query.length > 0 ? (uri.query + `&${queryParamName}=${encodedRef}&continueOn=1`) : `${queryParamName}=${encodedRef}&continueOn=1`\n\t\t\t\t\t});\n\n\t\t\t\t\t// Open the URI\n\t\t\t\t\tthat.logService.info(`Opening ${uri.toString()}`);\n\t\t\t\t\tawait that.openerService.open(uri, { openExternal: true });\n\t\t\t\t} else if (!shouldStoreEditSession && uri !== 'noDestinationUri') {\n\t\t\t\t\t// Open the URI without an edit session ref\n\t\t\t\t\tthat.logService.info(`Opening ${uri.toString()}`);\n\t\t\t\t\tawait that.openerService.open(uri, { openExternal: true });\n\t\t\t\t} else if (ref === undefined && shouldStoreEditSession) {\n\t\t\t\t\tthat.logService.warn(`Failed to store working changes when invoking ${continueWorkingOnCommand.id}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerResumeLatestEditSessionAction(): void {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class ResumeLatestEditSessionAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.editSessions.actions.resumeLatest',\n\t\t\t\t\ttitle: localize2('resume latest cloud changes', 'Resume Latest Changes from Cloud'),\n\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\tf1: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor, editSessionId?: string, forceApplyUnrelatedChange?: boolean): Promise<void> {\n\t\t\t\tawait that.progressService.withProgress({ ...resumeProgressOptions, title: resumeProgressOptionsTitle }, async () => await that.resumeEditSession(editSessionId, undefined, forceApplyUnrelatedChange));\n\t\t\t}\n\t\t}));\n\t\tthis._register(registerAction2(class ResumeLatestEditSessionAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.editSessions.actions.resumeFromSerializedPayload',\n\t\t\t\t\ttitle: localize2('resume cloud changes', 'Resume Changes from Serialized Data'),\n\t\t\t\t\tcategory: 'Developer',\n\t\t\t\t\tf1: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor, editSessionId?: string): Promise<void> {\n\t\t\t\tconst data = await that.quickInputService.input({ prompt: 'Enter serialized data' });\n\t\t\t\tif (data) {\n\t\t\t\t\tthat.editSessionsStorageService.lastReadResources.set('editSessions', { content: data, ref: '' });\n\t\t\t\t}\n\t\t\t\tawait that.progressService.withProgress({ ...resumeProgressOptions, title: resumeProgressOptionsTitle }, async () => await that.resumeEditSession(editSessionId, undefined, undefined, undefined, undefined, data));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerStoreLatestEditSessionAction(): void {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class StoreLatestEditSessionAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.editSessions.actions.storeCurrent',\n\t\t\t\t\ttitle: localize2('store working changes in cloud', 'Store Working Changes in Cloud'),\n\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\tf1: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\t\t\tawait that.progressService.withProgress({\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle: localize('storing working changes', 'Storing working changes...')\n\t\t\t\t}, async () => {\n\t\t\t\t\ttype StoreEvent = {};\n\t\t\t\t\ttype StoreClassification = {\n\t\t\t\t\t\towner: 'joyceerhl'; comment: 'Reporting when the store edit session action is invoked.';\n\t\t\t\t\t};\n\t\t\t\t\tthat.telemetryService.publicLog2<StoreEvent, StoreClassification>('editSessions.store');\n\n\t\t\t\t\tawait that.storeEditSession(true, cancellationTokenSource.token);\n\t\t\t\t}, () => {\n\t\t\t\t\tcancellationTokenSource.cancel();\n\t\t\t\t\tcancellationTokenSource.dispose();\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync resumeEditSession(ref?: string, silent?: boolean, forceApplyUnrelatedChange?: boolean, applyPartialMatch?: boolean, progress?: IProgress<IProgressStep>, serializedData?: string): Promise<void> {\n\t\t// Wait for the remote environment to become available, if any\n\t\tawait this.remoteAgentService.getEnvironment();\n\n\t\t// Edit sessions are not currently supported in empty workspaces\n\t\t// https://github.com/microsoft/vscode/issues/159220\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.info(ref !== undefined ? `Resuming changes from cloud with ref ${ref}...` : 'Checking for pending cloud changes...');\n\n\t\tif (silent && !(await this.editSessionsStorageService.initialize('read', true))) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype ResumeEvent = { outcome: string; hashedId?: string };\n\t\ttype ResumeClassification = {\n\t\t\towner: 'joyceerhl'; comment: 'Reporting when an edit session is resumed from an edit session identifier.';\n\t\t\toutcome: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The outcome of resuming the edit session.' };\n\t\t\thashedId?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The hash of the stored edit session id, for correlating success of stores and resumes.' };\n\t\t};\n\t\tthis.telemetryService.publicLog2<ResumeEvent, ResumeClassification>('editSessions.resume');\n\n\t\tperformance.mark('code/willResumeEditSessionFromIdentifier');\n\n\t\tprogress?.report({ message: localize('checkingForWorkingChanges', 'Checking for pending cloud changes...') });\n\t\tconst data = serializedData ? { content: serializedData, ref: '' } : await this.editSessionsStorageService.read('editSessions', ref);\n\t\tif (!data) {\n\t\t\tif (ref === undefined && !silent) {\n\t\t\t\tthis.notificationService.info(localize('no cloud changes', 'There are no changes to resume from the cloud.'));\n\t\t\t} else if (ref !== undefined) {\n\t\t\t\tthis.notificationService.warn(localize('no cloud changes for ref', 'Could not resume changes from the cloud for ID {0}.', ref));\n\t\t\t}\n\t\t\tthis.logService.info(ref !== undefined ? `Aborting resuming changes from cloud as no edit session content is available to be applied from ref ${ref}.` : `Aborting resuming edit session as no edit session content is available to be applied`);\n\t\t\treturn;\n\t\t}\n\n\t\tprogress?.report({ message: resumeProgressOptionsTitle });\n\t\tconst editSession = JSON.parse(data.content);\n\t\tref = data.ref;\n\n\t\tif (editSession.version > EditSessionSchemaVersion) {\n\t\t\tthis.notificationService.error(localize('client too old', \"Please upgrade to a newer version of {0} to resume your working changes from the cloud.\", this.productService.nameLong));\n\t\t\tthis.telemetryService.publicLog2<ResumeEvent, ResumeClassification>('editSessions.resume.outcome', { hashedId: hashedEditSessionId(ref), outcome: 'clientUpdateNeeded' });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst { changes, conflictingChanges } = await this.generateChanges(editSession, ref, forceApplyUnrelatedChange, applyPartialMatch);\n\t\t\tif (changes.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// TODO@joyceerhl Provide the option to diff files which would be overwritten by edit session contents\n\t\t\tif (conflictingChanges.length > 0) {\n\t\t\t\t// Allow to show edit sessions\n\n\t\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\t\ttype: Severity.Warning,\n\t\t\t\t\tmessage: conflictingChanges.length > 1 ?\n\t\t\t\t\t\tlocalize('resume edit session warning many', 'Resuming your working changes from the cloud will overwrite the following {0} files. Do you want to proceed?', conflictingChanges.length) :\n\t\t\t\t\t\tlocalize('resume edit session warning 1', 'Resuming your working changes from the cloud will overwrite {0}. Do you want to proceed?', basename(conflictingChanges[0].uri)),\n\t\t\t\t\tdetail: conflictingChanges.length > 1 ? getFileNamesMessage(conflictingChanges.map((c) => c.uri)) : undefined\n\t\t\t\t});\n\n\t\t\t\tif (!confirmed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const { uri, type, contents } of changes) {\n\t\t\t\tif (type === ChangeType.Addition) {\n\t\t\t\t\tawait this.fileService.writeFile(uri, decodeEditSessionFileContent(editSession.version, contents!));\n\t\t\t\t} else if (type === ChangeType.Deletion && await this.fileService.exists(uri)) {\n\t\t\t\t\tawait this.fileService.del(uri);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.workspaceStateSynchronizer?.apply(false, {});\n\n\t\t\tthis.logService.info(`Deleting edit session with ref ${ref} after successfully applying it to current workspace...`);\n\t\t\tawait this.editSessionsStorageService.delete('editSessions', ref);\n\t\t\tthis.logService.info(`Deleted edit session with ref ${ref}.`);\n\n\t\t\tthis.telemetryService.publicLog2<ResumeEvent, ResumeClassification>('editSessions.resume.outcome', { hashedId: hashedEditSessionId(ref), outcome: 'resumeSucceeded' });\n\t\t} catch (ex) {\n\t\t\tthis.logService.error('Failed to resume edit session, reason: ', (ex as Error).toString());\n\t\t\tthis.notificationService.error(localize('resume failed', \"Failed to resume your working changes from the cloud.\"));\n\t\t}\n\n\t\tperformance.mark('code/didResumeEditSessionFromIdentifier');\n\t}\n\n\tprivate async generateChanges(editSession: EditSession, ref: string, forceApplyUnrelatedChange = false, applyPartialMatch = false) {\n\t\tconst changes: ({ uri: URI; type: ChangeType; contents: string | undefined })[] = [];\n\t\tconst conflictingChanges = [];\n\t\tconst workspaceFolders = this.contextService.getWorkspace().folders;\n\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\n\t\tfor (const folder of editSession.folders) {\n\t\t\tlet folderRoot: IWorkspaceFolder | undefined;\n\n\t\t\tif (folder.canonicalIdentity) {\n\t\t\t\t// Look for an edit session identifier that we can use\n\t\t\t\tfor (const f of workspaceFolders) {\n\t\t\t\t\tconst identity = await this.editSessionIdentityService.getEditSessionIdentifier(f, cancellationTokenSource.token);\n\t\t\t\t\tthis.logService.info(`Matching identity ${identity} against edit session folder identity ${folder.canonicalIdentity}...`);\n\n\t\t\t\t\tif (equals(identity, folder.canonicalIdentity) || forceApplyUnrelatedChange) {\n\t\t\t\t\t\tfolderRoot = f;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (identity !== undefined) {\n\t\t\t\t\t\tconst match = await this.editSessionIdentityService.provideEditSessionIdentityMatch(f, identity, folder.canonicalIdentity, cancellationTokenSource.token);\n\t\t\t\t\t\tif (match === EditSessionIdentityMatch.Complete) {\n\t\t\t\t\t\t\tfolderRoot = f;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (match === EditSessionIdentityMatch.Partial &&\n\t\t\t\t\t\t\tthis.configurationService.getValue('workbench.experimental.cloudChanges.partialMatches.enabled') === true\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (!applyPartialMatch) {\n\t\t\t\t\t\t\t\t// Surface partially matching edit session\n\t\t\t\t\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\t\t\t\tlocalize('editSessionPartialMatch', 'You have pending working changes in the cloud for this workspace. Would you like to resume them?'),\n\t\t\t\t\t\t\t\t\t[{ label: localize('resume', 'Resume'), run: () => this.resumeEditSession(ref, false, undefined, true) }]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfolderRoot = f;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfolderRoot = workspaceFolders.find((f) => f.name === folder.name);\n\t\t\t}\n\n\t\t\tif (!folderRoot) {\n\t\t\t\tthis.logService.info(`Skipping applying ${folder.workingChanges.length} changes from edit session with ref ${ref} as no matching workspace folder was found.`);\n\t\t\t\treturn { changes: [], conflictingChanges: [], contributedStateHandlers: [] };\n\t\t\t}\n\n\t\t\tconst localChanges = new Set<string>();\n\t\t\tfor (const repository of this.scmService.repositories) {\n\t\t\t\tif (repository.provider.rootUri !== undefined &&\n\t\t\t\t\tthis.contextService.getWorkspaceFolder(repository.provider.rootUri)?.name === folder.name\n\t\t\t\t) {\n\t\t\t\t\tconst repositoryChanges = this.getChangedResources(repository);\n\t\t\t\t\trepositoryChanges.forEach((change) => localChanges.add(change.toString()));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const change of folder.workingChanges) {\n\t\t\t\tconst uri = joinPath(folderRoot.uri, change.relativeFilePath);\n\n\t\t\t\tchanges.push({ uri, type: change.type, contents: change.contents });\n\t\t\t\tif (await this.willChangeLocalContents(localChanges, uri, change)) {\n\t\t\t\t\tconflictingChanges.push({ uri, type: change.type, contents: change.contents });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { changes, conflictingChanges };\n\t}\n\n\tprivate async willChangeLocalContents(localChanges: Set<string>, uriWithIncomingChanges: URI, incomingChange: Change) {\n\t\tif (!localChanges.has(uriWithIncomingChanges.toString())) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst { contents, type } = incomingChange;\n\n\t\tswitch (type) {\n\t\t\tcase (ChangeType.Addition): {\n\t\t\t\tconst [originalContents, incomingContents] = await Promise.all([sha1Hex(contents), sha1Hex(encodeBase64((await this.fileService.readFile(uriWithIncomingChanges)).value))]);\n\t\t\t\treturn originalContents !== incomingContents;\n\t\t\t}\n\t\t\tcase (ChangeType.Deletion): {\n\t\t\t\treturn await this.fileService.exists(uriWithIncomingChanges);\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unhandled change type.');\n\t\t}\n\t}\n\n\tasync storeEditSession(fromStoreCommand: boolean, cancellationToken: CancellationToken): Promise<string | undefined> {\n\t\tconst folders: Folder[] = [];\n\t\tlet editSessionSize = 0;\n\t\tlet hasEdits = false;\n\n\t\t// Save all saveable editors before building edit session contents\n\t\tawait this.editorService.saveAll();\n\n\t\tfor (const repository of this.scmService.repositories) {\n\t\t\t// Look through all resource groups and compute which files were added/modified/deleted\n\t\t\tconst trackedUris = this.getChangedResources(repository); // A URI might appear in more than one resource group\n\n\t\t\tconst workingChanges: Change[] = [];\n\n\t\t\tconst { rootUri } = repository.provider;\n\t\t\tconst workspaceFolder = rootUri ? this.contextService.getWorkspaceFolder(rootUri) : undefined;\n\t\t\tlet name = workspaceFolder?.name;\n\n\t\t\tfor (const uri of trackedUris) {\n\t\t\t\tconst workspaceFolder = this.contextService.getWorkspaceFolder(uri);\n\t\t\t\tif (!workspaceFolder) {\n\t\t\t\t\tthis.logService.info(`Skipping working change ${uri.toString()} as no associated workspace folder was found.`);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tawait this.editSessionIdentityService.onWillCreateEditSessionIdentity(workspaceFolder, cancellationToken);\n\n\t\t\t\tname = name ?? workspaceFolder.name;\n\t\t\t\tconst relativeFilePath = relativePath(workspaceFolder.uri, uri) ?? uri.path;\n\n\t\t\t\t// Only deal with file contents for now\n\t\t\t\ttry {\n\t\t\t\t\tif (!(await this.fileService.stat(uri)).isFile) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch { }\n\n\t\t\t\thasEdits = true;\n\n\n\t\t\t\tif (await this.fileService.exists(uri)) {\n\t\t\t\t\tconst contents = encodeBase64((await this.fileService.readFile(uri)).value);\n\t\t\t\t\teditSessionSize += contents.length;\n\t\t\t\t\tif (editSessionSize > this.editSessionsStorageService.SIZE_LIMIT) {\n\t\t\t\t\t\tthis.notificationService.error(localize('payload too large', 'Your working changes exceed the size limit and cannot be stored.'));\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tworkingChanges.push({ type: ChangeType.Addition, fileType: FileType.File, contents: contents, relativeFilePath: relativeFilePath });\n\t\t\t\t} else {\n\t\t\t\t\t// Assume it's a deletion\n\t\t\t\t\tworkingChanges.push({ type: ChangeType.Deletion, fileType: FileType.File, contents: undefined, relativeFilePath: relativeFilePath });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet canonicalIdentity = undefined;\n\t\t\tif (workspaceFolder !== null && workspaceFolder !== undefined) {\n\t\t\t\tcanonicalIdentity = await this.editSessionIdentityService.getEditSessionIdentifier(workspaceFolder, cancellationToken);\n\t\t\t}\n\n\t\t\t// TODO@joyceerhl debt: don't store working changes as a child of the folder\n\t\t\tfolders.push({ workingChanges, name: name ?? '', canonicalIdentity: canonicalIdentity ?? undefined, absoluteUri: workspaceFolder?.uri.toString() });\n\t\t}\n\n\t\t// Store contributed workspace state\n\t\tawait this.workspaceStateSynchronizer?.sync(null, {});\n\n\t\tif (!hasEdits) {\n\t\t\tthis.logService.info('Skipped storing working changes in the cloud as there are no edits to store.');\n\t\t\tif (fromStoreCommand) {\n\t\t\t\tthis.notificationService.info(localize('no working changes to store', 'Skipped storing working changes in the cloud as there are no edits to store.'));\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst data: EditSession = { folders, version: 2, workspaceStateId: this.editSessionsStorageService.lastWrittenResources.get('workspaceState')?.ref };\n\n\t\ttry {\n\t\t\tthis.logService.info(`Storing edit session...`);\n\t\t\tconst ref = await this.editSessionsStorageService.write('editSessions', data);\n\t\t\tthis.logService.info(`Stored edit session with ref ${ref}.`);\n\t\t\treturn ref;\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(`Failed to store edit session, reason: `, (ex as Error).toString());\n\n\t\t\ttype UploadFailedEvent = { reason: string };\n\t\t\ttype UploadFailedClassification = {\n\t\t\t\towner: 'joyceerhl'; comment: 'Reporting when Continue On server request fails.';\n\t\t\t\treason?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The reason that the server request failed.' };\n\t\t\t};\n\n\t\t\tif (ex instanceof UserDataSyncStoreError) {\n\t\t\t\tswitch (ex.code) {\n\t\t\t\t\tcase UserDataSyncErrorCode.TooLarge:\n\t\t\t\t\t\t// Uploading a payload can fail due to server size limits\n\t\t\t\t\t\tthis.telemetryService.publicLog2<UploadFailedEvent, UploadFailedClassification>('editSessions.upload.failed', { reason: 'TooLarge' });\n\t\t\t\t\t\tthis.notificationService.error(localize('payload too large', 'Your working changes exceed the size limit and cannot be stored.'));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.telemetryService.publicLog2<UploadFailedEvent, UploadFailedClassification>('editSessions.upload.failed', { reason: 'unknown' });\n\t\t\t\t\t\tthis.notificationService.error(localize('payload failed', 'Your working changes cannot be stored.'));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getChangedResources(repository: ISCMRepository) {\n\t\treturn repository.provider.groups.reduce((resources, resourceGroups) => {\n\t\t\tresourceGroups.resources.forEach((resource) => resources.add(resource.sourceUri));\n\t\t\treturn resources;\n\t\t}, new Set<URI>()); // A URI might appear in more than one resource group\n\t}\n\n\tprivate hasEditSession() {\n\t\tfor (const repository of this.scmService.repositories) {\n\t\t\tif (this.getChangedResources(repository).size > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async shouldContinueOnWithEditSession(): Promise<boolean> {\n\t\ttype EditSessionsAuthCheckEvent = { outcome: string };\n\t\ttype EditSessionsAuthCheckClassification = {\n\t\t\towner: 'joyceerhl'; comment: 'Reporting whether we can and should store edit session as part of Continue On.';\n\t\t\toutcome: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The outcome of checking whether we can store an edit session as part of the Continue On flow.' };\n\t\t};\n\n\t\t// If the user is already signed in, we should store edit session\n\t\tif (this.editSessionsStorageService.isSignedIn) {\n\t\t\treturn this.hasEditSession();\n\t\t}\n\n\t\t// If the user has been asked before and said no, don't use edit sessions\n\t\tif (this.configurationService.getValue(useEditSessionsWithContinueOn) === 'off') {\n\t\t\tthis.telemetryService.publicLog2<EditSessionsAuthCheckEvent, EditSessionsAuthCheckClassification>('continueOn.editSessions.canStore.outcome', { outcome: 'disabledEditSessionsViaSetting' });\n\t\t\treturn false;\n\t\t}\n\n\t\t// Prompt the user to use edit sessions if they currently could benefit from using it\n\t\tif (this.hasEditSession()) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst quickpick = disposables.add(this.quickInputService.createQuickPick<IQuickPickItem>());\n\t\t\tquickpick.placeholder = localize('continue with cloud changes', \"Select whether to bring your working changes with you\");\n\t\t\tquickpick.ok = false;\n\t\t\tquickpick.ignoreFocusOut = true;\n\t\t\tconst withCloudChanges = { label: localize('with cloud changes', \"Yes, continue with my working changes\") };\n\t\t\tconst withoutCloudChanges = { label: localize('without cloud changes', \"No, continue without my working changes\") };\n\t\t\tquickpick.items = [withCloudChanges, withoutCloudChanges];\n\n\t\t\tconst continueWithCloudChanges = await new Promise<boolean>((resolve, reject) => {\n\t\t\t\tdisposables.add(quickpick.onDidAccept(() => {\n\t\t\t\t\tresolve(quickpick.selectedItems[0] === withCloudChanges);\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}));\n\t\t\t\tdisposables.add(quickpick.onDidHide(() => {\n\t\t\t\t\treject(new CancellationError());\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}));\n\t\t\t\tquickpick.show();\n\t\t\t});\n\n\t\t\tif (!continueWithCloudChanges) {\n\t\t\t\tthis.telemetryService.publicLog2<EditSessionsAuthCheckEvent, EditSessionsAuthCheckClassification>('continueOn.editSessions.canStore.outcome', { outcome: 'didNotEnableEditSessionsWhenPrompted' });\n\t\t\t\treturn continueWithCloudChanges;\n\t\t\t}\n\n\t\t\tconst initialized = await this.editSessionsStorageService.initialize('write');\n\t\t\tif (!initialized) {\n\t\t\t\tthis.telemetryService.publicLog2<EditSessionsAuthCheckEvent, EditSessionsAuthCheckClassification>('continueOn.editSessions.canStore.outcome', { outcome: 'didNotEnableEditSessionsWhenPrompted' });\n\t\t\t}\n\t\t\treturn initialized;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t//#region Continue Edit Session extension contribution point\n\n\tprivate registerContributedEditSessionOptions() {\n\t\tcontinueEditSessionExtPoint.setHandler(extensions => {\n\t\t\tconst continueEditSessionOptions: ContinueEditSessionItem[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (!isProposedApiEnabled(extension.description, 'contribEditSessions')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!Array.isArray(extension.value)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (const contribution of extension.value) {\n\t\t\t\t\tconst command = MenuRegistry.getCommand(contribution.command);\n\t\t\t\t\tif (!command) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst icon = command.icon;\n\t\t\t\t\tconst title = typeof command.title === 'string' ? command.title : command.title.value;\n\t\t\t\t\tconst when = ContextKeyExpr.deserialize(contribution.when);\n\n\t\t\t\t\tcontinueEditSessionOptions.push(new ContinueEditSessionItem(\n\t\t\t\t\t\tThemeIcon.isThemeIcon(icon) ? `$(${icon.id}) ${title}` : title,\n\t\t\t\t\t\tcommand.id,\n\t\t\t\t\t\tcommand.source?.title,\n\t\t\t\t\t\twhen,\n\t\t\t\t\t\tcontribution.documentation\n\t\t\t\t\t));\n\n\t\t\t\t\tif (contribution.qualifiedName) {\n\t\t\t\t\t\tthis.generateStandaloneOptionCommand(command.id, contribution.qualifiedName, contribution.category ?? command.category, when, contribution.remoteGroup);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.continueEditSessionOptions = continueEditSessionOptions;\n\t\t});\n\t}\n\n\tprivate generateStandaloneOptionCommand(commandId: string, qualifiedName: string, category: string | ILocalizedString | undefined, when: ContextKeyExpression | undefined, remoteGroup: string | undefined) {\n\t\tconst command: IAction2Options = {\n\t\t\tid: `${continueWorkingOnCommand.id}.${commandId}`,\n\t\t\ttitle: { original: qualifiedName, value: qualifiedName },\n\t\t\tcategory: typeof category === 'string' ? { original: category, value: category } : category,\n\t\t\tprecondition: when,\n\t\t\tf1: true\n\t\t};\n\n\t\tif (!this.registeredCommands.has(command.id)) {\n\t\t\tthis.registeredCommands.add(command.id);\n\n\t\t\tthis._register(registerAction2(class StandaloneContinueOnOption extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper(command);\n\t\t\t\t}\n\n\t\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\t\treturn accessor.get(ICommandService).executeCommand(continueWorkingOnCommand.id, undefined, commandId);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (remoteGroup !== undefined) {\n\t\t\t\tMenuRegistry.appendMenuItem(MenuId.StatusBarRemoteIndicatorMenu, {\n\t\t\t\t\tgroup: remoteGroup,\n\t\t\t\t\tcommand: command,\n\t\t\t\t\twhen: command.precondition\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerContinueInLocalFolderAction(): void {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class ContinueInLocalFolderAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper(openLocalFolderCommand);\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor): Promise<URI | undefined> {\n\t\t\t\tconst selection = await that.fileDialogService.showOpenDialog({\n\t\t\t\t\ttitle: localize('continueEditSession.openLocalFolder.title.v2', 'Select a local folder to continue working in'),\n\t\t\t\t\tcanSelectFolders: true,\n\t\t\t\t\tcanSelectMany: false,\n\t\t\t\t\tcanSelectFiles: false,\n\t\t\t\t\tavailableFileSystems: [Schemas.file]\n\t\t\t\t});\n\n\t\t\t\treturn selection?.length !== 1 ? undefined : URI.from({\n\t\t\t\t\tscheme: that.productService.urlProtocol,\n\t\t\t\t\tauthority: Schemas.file,\n\t\t\t\t\tpath: selection[0].path\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tif (getVirtualWorkspaceLocation(this.contextService.getWorkspace()) !== undefined && isNative) {\n\t\t\tthis.generateStandaloneOptionCommand(openLocalFolderCommand.id, localize('continueWorkingOn.existingLocalFolder', 'Continue Working in Existing Local Folder'), undefined, openLocalFolderCommand.precondition, undefined);\n\t\t}\n\t}\n\n\tprivate async pickContinueEditSessionDestination(): Promise<string | undefined> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickPick = disposables.add(this.quickInputService.createQuickPick<ContinueEditSessionItem>({ useSeparators: true }));\n\n\t\tconst workspaceContext = this.contextService.getWorkbenchState() === WorkbenchState.FOLDER\n\t\t\t? this.contextService.getWorkspace().folders[0].name\n\t\t\t: this.contextService.getWorkspace().folders.map((folder) => folder.name).join(', ');\n\t\tquickPick.placeholder = localize('continueEditSessionPick.title.v2', \"Select a development environment to continue working on {0} in\", `'${workspaceContext}'`);\n\t\tquickPick.items = this.createPickItems();\n\t\tthis.extensionService.onDidChangeExtensions(() => {\n\t\t\tquickPick.items = this.createPickItems();\n\t\t});\n\n\t\tconst command = await new Promise<string | undefined>((resolve, reject) => {\n\t\t\tdisposables.add(quickPick.onDidHide(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tresolve(undefined);\n\t\t\t}));\n\n\t\t\tdisposables.add(quickPick.onDidAccept((e) => {\n\t\t\t\tconst selection = quickPick.activeItems[0].command;\n\n\t\t\t\tif (selection === installAdditionalContinueOnOptionsCommand.id) {\n\t\t\t\t\tvoid this.commandService.executeCommand(installAdditionalContinueOnOptionsCommand.id);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(selection);\n\t\t\t\t\tquickPick.hide();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tquickPick.show();\n\n\t\t\tdisposables.add(quickPick.onDidTriggerItemButton(async (e) => {\n\t\t\t\tif (e.item.documentation !== undefined) {\n\t\t\t\t\tconst uri = URI.isUri(e.item.documentation) ? URI.parse(e.item.documentation) : await this.commandService.executeCommand(e.item.documentation);\n\t\t\t\t\tvoid this.openerService.open(uri, { openExternal: true });\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tquickPick.dispose();\n\n\t\treturn command;\n\t}\n\n\tprivate async resolveDestination(command: string): Promise<URI | 'noDestinationUri' | undefined> {\n\t\ttype EvaluateContinueOnDestinationEvent = { outcome: string; selection: string };\n\t\ttype EvaluateContinueOnDestinationClassification = {\n\t\t\towner: 'joyceerhl'; comment: 'Reporting the outcome of evaluating a selected Continue On destination option.';\n\t\t\tselection: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The selected Continue On destination option.' };\n\t\t\toutcome: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The outcome of evaluating the selected Continue On destination option.' };\n\t\t};\n\n\t\ttry {\n\t\t\tconst uri = await this.commandService.executeCommand(command);\n\n\t\t\t// Some continue on commands do not return a URI\n\t\t\t// to support extensions which want to be in control\n\t\t\t// of how the destination is opened\n\t\t\tif (uri === undefined) {\n\t\t\t\tthis.telemetryService.publicLog2<EvaluateContinueOnDestinationEvent, EvaluateContinueOnDestinationClassification>('continueOn.openDestination.outcome', { selection: command, outcome: 'noDestinationUri' });\n\t\t\t\treturn 'noDestinationUri';\n\t\t\t}\n\n\t\t\tif (URI.isUri(uri)) {\n\t\t\t\tthis.telemetryService.publicLog2<EvaluateContinueOnDestinationEvent, EvaluateContinueOnDestinationClassification>('continueOn.openDestination.outcome', { selection: command, outcome: 'resolvedUri' });\n\t\t\t\treturn uri;\n\t\t\t}\n\n\t\t\tthis.telemetryService.publicLog2<EvaluateContinueOnDestinationEvent, EvaluateContinueOnDestinationClassification>('continueOn.openDestination.outcome', { selection: command, outcome: 'invalidDestination' });\n\t\t\treturn undefined;\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof CancellationError) {\n\t\t\t\tthis.telemetryService.publicLog2<EvaluateContinueOnDestinationEvent, EvaluateContinueOnDestinationClassification>('continueOn.openDestination.outcome', { selection: command, outcome: 'cancelled' });\n\t\t\t} else {\n\t\t\t\tthis.telemetryService.publicLog2<EvaluateContinueOnDestinationEvent, EvaluateContinueOnDestinationClassification>('continueOn.openDestination.outcome', { selection: command, outcome: 'unknownError' });\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate createPickItems(): (ContinueEditSessionItem | IQuickPickSeparator)[] {\n\t\tconst items = [...this.continueEditSessionOptions].filter((option) => option.when === undefined || this.contextKeyService.contextMatchesRules(option.when));\n\n\t\tif (getVirtualWorkspaceLocation(this.contextService.getWorkspace()) !== undefined && isNative) {\n\t\t\titems.push(new ContinueEditSessionItem(\n\t\t\t\t'$(folder) ' + localize('continueEditSessionItem.openInLocalFolder.v2', 'Open in Local Folder'),\n\t\t\t\topenLocalFolderCommand.id,\n\t\t\t\tlocalize('continueEditSessionItem.builtin', 'Built-in')\n\t\t\t));\n\t\t}\n\n\t\tconst sortedItems: (ContinueEditSessionItem | IQuickPickSeparator)[] = items.sort((item1, item2) => item1.label.localeCompare(item2.label));\n\t\treturn sortedItems.concat({ type: 'separator' }, new ContinueEditSessionItem(installAdditionalContinueOnOptionsCommand.title, installAdditionalContinueOnOptionsCommand.id));\n\t}\n}\n\nconst infoButtonClass = ThemeIcon.asClassName(Codicon.info);\nclass ContinueEditSessionItem implements IQuickPickItem {\n\tpublic readonly buttons: IQuickInputButton[] | undefined;\n\n\tconstructor(\n\t\tpublic readonly label: string,\n\t\tpublic readonly command: string,\n\t\tpublic readonly description?: string,\n\t\tpublic readonly when?: ContextKeyExpression,\n\t\tpublic readonly documentation?: string,\n\t) {\n\t\tif (documentation !== undefined) {\n\t\t\tthis.buttons = [{\n\t\t\t\ticonClass: infoButtonClass,\n\t\t\t\ttooltip: localize('learnMoreTooltip', 'Learn More'),\n\t\t\t}];\n\t\t}\n\t}\n}\n\ninterface ICommand {\n\tcommand: string;\n\tgroup: string;\n\twhen: string;\n\tdocumentation?: string;\n\tqualifiedName?: string;\n\tcategory?: string;\n\tremoteGroup?: string;\n}\n\nconst continueEditSessionExtPoint = ExtensionsRegistry.registerExtensionPoint<ICommand[]>({\n\textensionPoint: 'continueEditSession',\n\tjsonSchema: {\n\t\tdescription: localize('continueEditSessionExtPoint', 'Contributes options for continuing the current edit session in a different environment'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tcommand: {\n\t\t\t\t\tdescription: localize('continueEditSessionExtPoint.command', 'Identifier of the command to execute. The command must be declared in the \\'commands\\'-section and return a URI representing a different environment where the current edit session can be continued.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tgroup: {\n\t\t\t\t\tdescription: localize('continueEditSessionExtPoint.group', 'Group into which this item belongs.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tqualifiedName: {\n\t\t\t\t\tdescription: localize('continueEditSessionExtPoint.qualifiedName', 'A fully qualified name for this item which is used for display in menus.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\tdescription: localize('continueEditSessionExtPoint.description', \"The url, or a command that returns the url, to the option's documentation page.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tremoteGroup: {\n\t\t\t\t\tdescription: localize('continueEditSessionExtPoint.remoteGroup', 'Group into which this item belongs in the remote indicator.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\tdescription: localize('continueEditSessionExtPoint.when', 'Condition which must be true to show this item.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['command']\n\t\t}\n\t}\n});\n\n//#endregion\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(EditSessionsContribution, LifecyclePhase.Restored);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\t'properties': {\n\t\t'workbench.experimental.cloudChanges.autoStore': {\n\t\t\tenum: ['onShutdown', 'off'],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('autoStoreWorkingChanges.onShutdown', \"Automatically store current working changes in the cloud on window close.\"),\n\t\t\t\tlocalize('autoStoreWorkingChanges.off', \"Never attempt to automatically store working changes in the cloud.\")\n\t\t\t],\n\t\t\t'type': 'string',\n\t\t\t'tags': ['experimental', 'usesOnlineServices'],\n\t\t\t'default': 'off',\n\t\t\t'markdownDescription': localize('autoStoreWorkingChangesDescription', \"Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.\"),\n\t\t},\n\t\t'workbench.cloudChanges.autoResume': {\n\t\t\tenum: ['onReload', 'off'],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('autoResumeWorkingChanges.onReload', \"Automatically resume available working changes from the cloud on window reload.\"),\n\t\t\t\tlocalize('autoResumeWorkingChanges.off', \"Never attempt to resume working changes from the cloud.\")\n\t\t\t],\n\t\t\t'type': 'string',\n\t\t\t'tags': ['usesOnlineServices'],\n\t\t\t'default': 'onReload',\n\t\t\t'markdownDescription': localize('autoResumeWorkingChanges', \"Controls whether to automatically resume available working changes stored in the cloud for the current workspace.\"),\n\t\t},\n\t\t'workbench.cloudChanges.continueOn': {\n\t\t\tenum: ['prompt', 'off'],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('continueOnCloudChanges.promptForAuth', 'Prompt the user to sign in to store working changes in the cloud with Continue Working On.'),\n\t\t\t\tlocalize('continueOnCloudChanges.off', 'Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.')\n\t\t\t],\n\t\t\ttype: 'string',\n\t\t\ttags: ['usesOnlineServices'],\n\t\t\tdefault: 'prompt',\n\t\t\tmarkdownDescription: localize('continueOnCloudChanges', 'Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.')\n\t\t},\n\t\t'workbench.experimental.cloudChanges.partialMatches.enabled': {\n\t\t\t'type': 'boolean',\n\t\t\t'tags': ['experimental', 'usesOnlineServices'],\n\t\t\t'default': false,\n\t\t\t'markdownDescription': localize('cloudChangesPartialMatchesEnabled', \"Controls whether to surface cloud changes which partially match the current session.\")\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": ["ref", "workspaceFolder"]
}
