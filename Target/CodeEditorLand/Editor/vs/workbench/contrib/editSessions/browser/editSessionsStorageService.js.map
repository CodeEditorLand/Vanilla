{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nimport { Action2, MenuId, MenuRegistry, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { createSyncHeaders, IAuthenticationProvider, IResourceRefHandle } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { AuthenticationSession, AuthenticationSessionsChangeEvent, IAuthenticationService } from '../../../services/authentication/common/authentication.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { EDIT_SESSIONS_SIGNED_IN, EditSession, EDIT_SESSION_SYNC_CATEGORY, IEditSessionsStorageService, EDIT_SESSIONS_SIGNED_IN_KEY, IEditSessionsLogService, SyncResource, EDIT_SESSIONS_PENDING_KEY } from '../common/editSessions.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { getCurrentAuthenticationSessionInfo } from '../../../services/authentication/browser/authenticationService.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { IUserDataSyncMachinesService, UserDataSyncMachinesService } from '../../../../platform/userDataSync/common/userDataSyncMachines.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { EditSessionsStoreClient } from '../common/editSessionsStorageClient.js';\nimport { ISecretStorageService } from '../../../../platform/secrets/common/secrets.js';\n\ntype ExistingSession = IQuickPickItem & { session: AuthenticationSession & { providerId: string } };\ntype AuthenticationProviderOption = IQuickPickItem & { provider: IAuthenticationProvider };\n\nexport class EditSessionsWorkbenchService extends Disposable implements IEditSessionsStorageService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tpublic readonly SIZE_LIMIT = Math.floor(1024 * 1024 * 1.9); // 2 MB\n\n\tprivate serverConfiguration = this.productService['editSessions.store'];\n\tprivate machineClient: IUserDataSyncMachinesService | undefined;\n\n\tprivate authenticationInfo: { sessionId: string; token: string; providerId: string } | undefined;\n\tprivate static CACHED_SESSION_STORAGE_KEY = 'editSessionAccountPreference';\n\n\tprivate initialized = false;\n\tprivate readonly signedInContext: IContextKey<boolean>;\n\n\tget isSignedIn() {\n\t\treturn this.existingSessionId !== undefined;\n\t}\n\n\tprivate _didSignIn = new Emitter<void>();\n\tget onDidSignIn() {\n\t\treturn this._didSignIn.event;\n\t}\n\n\tprivate _didSignOut = new Emitter<void>();\n\tget onDidSignOut() {\n\t\treturn this._didSignOut.event;\n\t}\n\n\tprivate _lastWrittenResources = new Map<SyncResource, { ref: string; content: string }>();\n\tget lastWrittenResources() {\n\t\treturn this._lastWrittenResources;\n\t}\n\n\tprivate _lastReadResources = new Map<SyncResource, { ref: string; content: string }>();\n\tget lastReadResources() {\n\t\treturn this._lastReadResources;\n\t}\n\n\tstoreClient: EditSessionsStoreClient | undefined; // TODO@joyceerhl lifecycle hack\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IEditSessionsLogService private readonly logService: IEditSessionsLogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ISecretStorageService private readonly secretStorageService: ISecretStorageService\n\t) {\n\t\tsuper();\n\n\t\t// If the user signs out of the current session, reset our cached auth state in memory and on disk\n\t\tthis._register(this.authenticationService.onDidChangeSessions((e) => this.onDidChangeSessions(e.event)));\n\n\t\t// If another window changes the preferred session storage, reset our cached auth state in memory\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, this._register(new DisposableStore()))(() => this.onDidChangeStorage()));\n\n\t\tthis.registerSignInAction();\n\t\tthis.registerResetAuthenticationAction();\n\n\t\tthis.signedInContext = EDIT_SESSIONS_SIGNED_IN.bindTo(this.contextKeyService);\n\t\tthis.signedInContext.set(this.existingSessionId !== undefined);\n\t}\n\n\t/**\n\t * @param resource: The resource to retrieve content for.\n\t * @param content An object representing resource state to be restored.\n\t * @returns The ref of the stored state.\n\t */\n\tasync write(resource: SyncResource, content: string | EditSession): Promise<string> {\n\t\tawait this.initialize('write', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error('Please sign in to store your edit session.');\n\t\t}\n\n\t\tif (typeof content !== 'string' && content.machine === undefined) {\n\t\t\tcontent.machine = await this.getOrCreateCurrentMachineId();\n\t\t}\n\n\t\tcontent = typeof content === 'string' ? content : JSON.stringify(content);\n\t\tconst ref = await this.storeClient!.writeResource(resource, content, null, undefined, createSyncHeaders(generateUuid()));\n\n\t\tthis._lastWrittenResources.set(resource, { ref, content });\n\n\t\treturn ref;\n\t}\n\n\t/**\n\t * @param resource: The resource to retrieve content for.\n\t * @param ref: A specific content ref to retrieve content for, if it exists.\n\t * If undefined, this method will return the latest saved edit session, if any.\n\t *\n\t * @returns An object representing the requested or latest state, if any.\n\t */\n\tasync read(resource: SyncResource, ref: string | undefined): Promise<{ ref: string; content: string } | undefined> {\n\t\tawait this.initialize('read', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error('Please sign in to apply your latest edit session.');\n\t\t}\n\n\t\tlet content: string | undefined | null;\n\t\tconst headers = createSyncHeaders(generateUuid());\n\t\ttry {\n\t\t\tif (ref !== undefined) {\n\t\t\t\tcontent = await this.storeClient?.resolveResourceContent(resource, ref, undefined, headers);\n\t\t\t} else {\n\t\t\t\tconst result = await this.storeClient?.readResource(resource, null, undefined, headers);\n\t\t\t\tcontent = result?.content;\n\t\t\t\tref = result?.ref;\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\n\t\t// TODO@joyceerhl Validate session data, check schema version\n\t\tif (content !== undefined && content !== null && ref !== undefined) {\n\t\t\tthis._lastReadResources.set(resource, { ref, content });\n\t\t\treturn { ref, content };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync delete(resource: SyncResource, ref: string | null) {\n\t\tawait this.initialize('write', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(`Unable to delete edit session with ref ${ref}.`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.storeClient?.deleteResource(resource, ref);\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\t}\n\n\tasync list(resource: SyncResource): Promise<IResourceRefHandle[]> {\n\t\tawait this.initialize('read', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(`Unable to list edit sessions.`);\n\t\t}\n\n\t\ttry {\n\t\t\treturn this.storeClient?.getAllResourceRefs(resource) ?? [];\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tpublic async initialize(reason: 'read' | 'write', silent: boolean = false) {\n\t\tif (this.initialized) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.initialized = await this.doInitialize(reason, silent);\n\t\tthis.signedInContext.set(this.initialized);\n\t\tif (this.initialized) {\n\t\t\tthis._didSignIn.fire();\n\t\t}\n\t\treturn this.initialized;\n\n\t}\n\n\t/**\n\t *\n\t * Ensures that the store client is initialized,\n\t * meaning that authentication is configured and it\n\t * can be used to communicate with the remote storage service\n\t */\n\tprivate async doInitialize(reason: 'read' | 'write', silent: boolean): Promise<boolean> {\n\t\t// Wait for authentication extensions to be registered\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tif (!this.serverConfiguration?.url) {\n\t\t\tthrow new Error('Unable to initialize sessions sync as session sync preference is not configured in product.json.');\n\t\t}\n\n\t\tif (this.storeClient === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._register(this.storeClient.onTokenFailed(() => {\n\t\t\tthis.logService.info('Clearing edit sessions authentication preference because of successive token failures.');\n\t\t\tthis.clearAuthenticationPreference();\n\t\t}));\n\n\t\tif (this.machineClient === undefined) {\n\t\t\tthis.machineClient = new UserDataSyncMachinesService(this.environmentService, this.fileService, this.storageService, this.storeClient, this.logService, this.productService);\n\t\t}\n\n\t\t// If we already have an existing auth session in memory, use that\n\t\tif (this.authenticationInfo !== undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst authenticationSession = await this.getAuthenticationSession(reason, silent);\n\t\tif (authenticationSession !== undefined) {\n\t\t\tthis.authenticationInfo = authenticationSession;\n\t\t\tthis.storeClient.setAuthToken(authenticationSession.token, authenticationSession.providerId);\n\t\t}\n\n\t\treturn authenticationSession !== undefined;\n\t}\n\n\tprivate cachedMachines: Map<string, string> | undefined;\n\n\tasync getMachineById(machineId: string) {\n\t\tawait this.initialize('read', false);\n\n\t\tif (!this.cachedMachines) {\n\t\t\tconst machines = await this.machineClient!.getMachines();\n\t\t\tthis.cachedMachines = machines.reduce((map, machine) => map.set(machine.id, machine.name), new Map<string, string>());\n\t\t}\n\n\t\treturn this.cachedMachines.get(machineId);\n\t}\n\n\tprivate async getOrCreateCurrentMachineId(): Promise<string> {\n\t\tconst currentMachineId = await this.machineClient!.getMachines().then((machines) => machines.find((m) => m.isCurrent)?.id);\n\n\t\tif (currentMachineId === undefined) {\n\t\t\tawait this.machineClient!.addCurrentMachine();\n\t\t\treturn await this.machineClient!.getMachines().then((machines) => machines.find((m) => m.isCurrent)!.id);\n\t\t}\n\n\t\treturn currentMachineId;\n\t}\n\n\tprivate async getAuthenticationSession(reason: 'read' | 'write', silent: boolean) {\n\t\t// If the user signed in previously and the session is still available, reuse that without prompting the user again\n\t\tif (this.existingSessionId) {\n\t\t\tthis.logService.info(`Searching for existing authentication session with ID ${this.existingSessionId}`);\n\t\t\tconst existingSession = await this.getExistingSession();\n\t\t\tif (existingSession) {\n\t\t\t\tthis.logService.info(`Found existing authentication session with ID ${existingSession.session.id}`);\n\t\t\t\treturn { sessionId: existingSession.session.id, token: existingSession.session.idToken ?? existingSession.session.accessToken, providerId: existingSession.session.providerId };\n\t\t\t} else {\n\t\t\t\tthis._didSignOut.fire();\n\t\t\t}\n\t\t}\n\n\t\t// If settings sync is already enabled, avoid asking again to authenticate\n\t\tif (this.shouldAttemptEditSessionInit()) {\n\t\t\tthis.logService.info(`Reusing user data sync enablement`);\n\t\t\tconst authenticationSessionInfo = await getCurrentAuthenticationSessionInfo(this.secretStorageService, this.productService);\n\t\t\tif (authenticationSessionInfo !== undefined) {\n\t\t\t\tthis.logService.info(`Using current authentication session with ID ${authenticationSessionInfo.id}`);\n\t\t\t\tthis.existingSessionId = authenticationSessionInfo.id;\n\t\t\t\treturn { sessionId: authenticationSessionInfo.id, token: authenticationSessionInfo.accessToken, providerId: authenticationSessionInfo.providerId };\n\t\t\t}\n\t\t}\n\n\t\t// If we aren't supposed to prompt the user because\n\t\t// we're in a silent flow, just return here\n\t\tif (silent) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ask the user to pick a preferred account\n\t\tconst authenticationSession = await this.getAccountPreference(reason);\n\t\tif (authenticationSession !== undefined) {\n\t\t\tthis.existingSessionId = authenticationSession.id;\n\t\t\treturn { sessionId: authenticationSession.id, token: authenticationSession.idToken ?? authenticationSession.accessToken, providerId: authenticationSession.providerId };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate shouldAttemptEditSessionInit(): boolean {\n\t\treturn isWeb && this.storageService.isNew(StorageScope.APPLICATION) && this.storageService.isNew(StorageScope.WORKSPACE);\n\t}\n\n\t/**\n\t *\n\t * Prompts the user to pick an authentication option for storing and getting edit sessions.\n\t */\n\tprivate async getAccountPreference(reason: 'read' | 'write'): Promise<AuthenticationSession & { providerId: string } | undefined> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickpick = disposables.add(this.quickInputService.createQuickPick<ExistingSession | AuthenticationProviderOption | IQuickPickItem>({ useSeparators: true }));\n\t\tquickpick.ok = false;\n\t\tquickpick.placeholder = reason === 'read' ? localize('choose account read placeholder', \"Select an account to restore your working changes from the cloud\") : localize('choose account placeholder', \"Select an account to store your working changes in the cloud\");\n\t\tquickpick.ignoreFocusOut = true;\n\t\tquickpick.items = await this.createQuickpickItems();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdisposables.add(quickpick.onDidHide((e) => {\n\t\t\t\treject(new CancellationError());\n\t\t\t\tdisposables.dispose();\n\t\t\t}));\n\n\t\t\tdisposables.add(quickpick.onDidAccept(async (e) => {\n\t\t\t\tconst selection = quickpick.selectedItems[0];\n\t\t\t\tconst session = 'provider' in selection ? { ...await this.authenticationService.createSession(selection.provider.id, selection.provider.scopes), providerId: selection.provider.id } : ('session' in selection ? selection.session : undefined);\n\t\t\t\tresolve(session);\n\t\t\t\tquickpick.hide();\n\t\t\t}));\n\n\t\t\tquickpick.show();\n\t\t});\n\t}\n\n\tprivate async createQuickpickItems(): Promise<(ExistingSession | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[]> {\n\t\tconst options: (ExistingSession | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[] = [];\n\n\t\toptions.push({ type: 'separator', label: localize('signed in', \"Signed In\") });\n\n\t\tconst sessions = await this.getAllSessions();\n\t\toptions.push(...sessions);\n\n\t\toptions.push({ type: 'separator', label: localize('others', \"Others\") });\n\n\t\tfor (const authenticationProvider of (await this.getAuthenticationProviders())) {\n\t\t\tconst signedInForProvider = sessions.some(account => account.session.providerId === authenticationProvider.id);\n\t\t\tif (!signedInForProvider || this.authenticationService.getProvider(authenticationProvider.id).supportsMultipleAccounts) {\n\t\t\t\tconst providerName = this.authenticationService.getProvider(authenticationProvider.id).label;\n\t\t\t\toptions.push({ label: localize('sign in using account', \"Sign in with {0}\", providerName), provider: authenticationProvider });\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t *\n\t * Returns all authentication sessions available from {@link getAuthenticationProviders}.\n\t */\n\tprivate async getAllSessions() {\n\t\tconst authenticationProviders = await this.getAuthenticationProviders();\n\t\tconst accounts = new Map<string, ExistingSession>();\n\t\tlet currentSession: ExistingSession | undefined;\n\n\t\tfor (const provider of authenticationProviders) {\n\t\t\tconst sessions = await this.authenticationService.getSessions(provider.id, provider.scopes);\n\n\t\t\tfor (const session of sessions) {\n\t\t\t\tconst item = {\n\t\t\t\t\tlabel: session.account.label,\n\t\t\t\t\tdescription: this.authenticationService.getProvider(provider.id).label,\n\t\t\t\t\tsession: { ...session, providerId: provider.id }\n\t\t\t\t};\n\t\t\t\taccounts.set(item.session.account.id, item);\n\t\t\t\tif (this.existingSessionId === session.id) {\n\t\t\t\t\tcurrentSession = item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentSession !== undefined) {\n\t\t\taccounts.set(currentSession.session.account.id, currentSession);\n\t\t}\n\n\t\treturn [...accounts.values()].sort((a, b) => a.label.localeCompare(b.label));\n\t}\n\n\t/**\n\t *\n\t * Returns all authentication providers which can be used to authenticate\n\t * to the remote storage service, based on product.json configuration\n\t * and registered authentication providers.\n\t */\n\tprivate async getAuthenticationProviders() {\n\t\tif (!this.serverConfiguration) {\n\t\t\tthrow new Error('Unable to get configured authentication providers as session sync preference is not configured in product.json.');\n\t\t}\n\n\t\t// Get the list of authentication providers configured in product.json\n\t\tconst authenticationProviders = this.serverConfiguration.authenticationProviders;\n\t\tconst configuredAuthenticationProviders = Object.keys(authenticationProviders).reduce<IAuthenticationProvider[]>((result, id) => {\n\t\t\tresult.push({ id, scopes: authenticationProviders[id].scopes });\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t// Filter out anything that isn't currently available through the authenticationService\n\t\tconst availableAuthenticationProviders = this.authenticationService.declaredProviders;\n\n\t\treturn configuredAuthenticationProviders.filter(({ id }) => availableAuthenticationProviders.some(provider => provider.id === id));\n\t}\n\n\tprivate get existingSessionId() {\n\t\treturn this.storageService.get(EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, StorageScope.APPLICATION);\n\t}\n\n\tprivate set existingSessionId(sessionId: string | undefined) {\n\t\tthis.logService.trace(`Saving authentication session preference for ID ${sessionId}.`);\n\t\tif (sessionId === undefined) {\n\t\t\tthis.storageService.remove(EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, StorageScope.APPLICATION);\n\t\t} else {\n\t\t\tthis.storageService.store(EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, sessionId, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\t}\n\n\tprivate async getExistingSession() {\n\t\tconst accounts = await this.getAllSessions();\n\t\treturn accounts.find((account) => account.session.id === this.existingSessionId);\n\t}\n\n\tprivate async onDidChangeStorage(): Promise<void> {\n\t\tconst newSessionId = this.existingSessionId;\n\t\tconst previousSessionId = this.authenticationInfo?.sessionId;\n\n\t\tif (previousSessionId !== newSessionId) {\n\t\t\tthis.logService.trace(`Resetting authentication state because authentication session ID preference changed from ${previousSessionId} to ${newSessionId}.`);\n\t\t\tthis.authenticationInfo = undefined;\n\t\t\tthis.initialized = false;\n\t\t}\n\t}\n\n\tprivate clearAuthenticationPreference(): void {\n\t\tthis.authenticationInfo = undefined;\n\t\tthis.initialized = false;\n\t\tthis.existingSessionId = undefined;\n\t\tthis.signedInContext.set(false);\n\t}\n\n\tprivate onDidChangeSessions(e: AuthenticationSessionsChangeEvent): void {\n\t\tif (this.authenticationInfo?.sessionId && e.removed?.find(session => session.id === this.authenticationInfo?.sessionId)) {\n\t\t\tthis.clearAuthenticationPreference();\n\t\t}\n\t}\n\n\tprivate registerSignInAction() {\n\t\tconst that = this;\n\t\tconst id = 'workbench.editSessions.actions.signIn';\n\t\tconst when = ContextKeyExpr.and(ContextKeyExpr.equals(EDIT_SESSIONS_PENDING_KEY, false), ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, false));\n\t\tthis._register(registerAction2(class ResetEditSessionAuthenticationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid,\n\t\t\t\t\ttitle: localize('sign in', 'Turn on Cloud Changes...'),\n\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\tprecondition: when,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_editSessions',\n\t\t\t\t\t\twhen,\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\treturn await that.initialize('write', false);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: '2_editSessions',\n\t\t\tcommand: {\n\t\t\t\tid,\n\t\t\t\ttitle: localize('sign in badge', 'Turn on Cloud Changes... (1)'),\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.equals(EDIT_SESSIONS_PENDING_KEY, true), ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, false))\n\t\t}));\n\t}\n\n\tprivate registerResetAuthenticationAction() {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class ResetEditSessionAuthenticationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.editSessions.actions.resetAuth',\n\t\t\t\t\ttitle: localize('reset auth.v3', 'Turn off Cloud Changes...'),\n\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, true),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_editSessions',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, true),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tconst result = await that.dialogService.confirm({\n\t\t\t\t\tmessage: localize('sign out of cloud changes clear data prompt', 'Do you want to disable storing working changes in the cloud?'),\n\t\t\t\t\tcheckbox: { label: localize('delete all cloud changes', 'Delete all stored data from the cloud.') }\n\t\t\t\t});\n\t\t\t\tif (result.confirmed) {\n\t\t\t\t\tif (result.checkboxChecked) {\n\t\t\t\t\t\tthat.storeClient?.deleteResource('editSessions', null);\n\t\t\t\t\t}\n\t\t\t\t\tthat.clearAuthenticationPreference();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
