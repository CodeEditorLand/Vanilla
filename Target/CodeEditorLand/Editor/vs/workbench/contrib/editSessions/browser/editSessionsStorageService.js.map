{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationError } from \"../../../../base/common/errors.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tMenuRegistry,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickSeparator,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { ISecretStorageService } from \"../../../../platform/secrets/common/secrets.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype IAuthenticationProvider,\n\ttype IResourceRefHandle,\n\tcreateSyncHeaders,\n} from \"../../../../platform/userDataSync/common/userDataSync.js\";\nimport {\n\ttype IUserDataSyncMachinesService,\n\tUserDataSyncMachinesService,\n} from \"../../../../platform/userDataSync/common/userDataSyncMachines.js\";\nimport { getCurrentAuthenticationSessionInfo } from \"../../../services/authentication/browser/authenticationService.js\";\nimport {\n\ttype AuthenticationSession,\n\ttype AuthenticationSessionsChangeEvent,\n\tIAuthenticationService,\n} from \"../../../services/authentication/common/authentication.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport {\n\tEDIT_SESSIONS_PENDING_KEY,\n\tEDIT_SESSIONS_SIGNED_IN,\n\tEDIT_SESSIONS_SIGNED_IN_KEY,\n\tEDIT_SESSION_SYNC_CATEGORY,\n\ttype EditSession,\n\tIEditSessionsLogService,\n\ttype IEditSessionsStorageService,\n\ttype SyncResource,\n} from \"../common/editSessions.js\";\nimport type { EditSessionsStoreClient } from \"../common/editSessionsStorageClient.js\";\n\ntype ExistingSession = IQuickPickItem & {\n\tsession: AuthenticationSession & { providerId: string };\n};\ntype AuthenticationProviderOption = IQuickPickItem & {\n\tprovider: IAuthenticationProvider;\n};\n\nexport class EditSessionsWorkbenchService\n\textends Disposable\n\timplements IEditSessionsStorageService\n{\n\tdeclare _serviceBrand: undefined;\n\n\tpublic readonly SIZE_LIMIT = Math.floor(1024 * 1024 * 1.9); // 2 MB\n\n\tprivate serverConfiguration = this.productService[\"editSessions.store\"];\n\tprivate machineClient: IUserDataSyncMachinesService | undefined;\n\n\tprivate authenticationInfo:\n\t\t| { sessionId: string; token: string; providerId: string }\n\t\t| undefined;\n\tprivate static CACHED_SESSION_STORAGE_KEY = \"editSessionAccountPreference\";\n\n\tprivate initialized = false;\n\tprivate readonly signedInContext: IContextKey<boolean>;\n\n\tget isSignedIn() {\n\t\treturn this.existingSessionId !== undefined;\n\t}\n\n\tprivate _didSignIn = new Emitter<void>();\n\tget onDidSignIn() {\n\t\treturn this._didSignIn.event;\n\t}\n\n\tprivate _didSignOut = new Emitter<void>();\n\tget onDidSignOut() {\n\t\treturn this._didSignOut.event;\n\t}\n\n\tprivate _lastWrittenResources = new Map<\n\t\tSyncResource,\n\t\t{ ref: string; content: string }\n\t>();\n\tget lastWrittenResources() {\n\t\treturn this._lastWrittenResources;\n\t}\n\n\tprivate _lastReadResources = new Map<\n\t\tSyncResource,\n\t\t{ ref: string; content: string }\n\t>();\n\tget lastReadResources() {\n\t\treturn this._lastReadResources;\n\t}\n\n\tstoreClient: EditSessionsStoreClient | undefined; // TODO@joyceerhl lifecycle hack\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IEditSessionsLogService private readonly logService: IEditSessionsLogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ISecretStorageService private readonly secretStorageService: ISecretStorageService\n\t) {\n\t\tsuper();\n\n\t\t// If the user signs out of the current session, reset our cached auth state in memory and on disk\n\t\tthis._register(this.authenticationService.onDidChangeSessions((e) => this.onDidChangeSessions(e.event)));\n\n\t\t// If another window changes the preferred session storage, reset our cached auth state in memory\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, this._register(new DisposableStore()))(() => this.onDidChangeStorage()));\n\n\t\tthis.registerSignInAction();\n\t\tthis.registerResetAuthenticationAction();\n\n\t\tthis.signedInContext = EDIT_SESSIONS_SIGNED_IN.bindTo(this.contextKeyService);\n\t\tthis.signedInContext.set(this.existingSessionId !== undefined);\n\t}\n\n\t/**\n\t * @param resource: The resource to retrieve content for.\n\t * @param content An object representing resource state to be restored.\n\t * @returns The ref of the stored state.\n\t */\n\tasync write(\n\t\tresource: SyncResource,\n\t\tcontent: string | EditSession,\n\t): Promise<string> {\n\t\tawait this.initialize(\"write\", false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(\"Please sign in to store your edit session.\");\n\t\t}\n\n\t\tif (typeof content !== \"string\" && content.machine === undefined) {\n\t\t\tcontent.machine = await this.getOrCreateCurrentMachineId();\n\t\t}\n\n\t\tcontent =\n\t\t\ttypeof content === \"string\" ? content : JSON.stringify(content);\n\t\tconst ref = await this.storeClient!.writeResource(\n\t\t\tresource,\n\t\t\tcontent,\n\t\t\tnull,\n\t\t\tundefined,\n\t\t\tcreateSyncHeaders(generateUuid()),\n\t\t);\n\n\t\tthis._lastWrittenResources.set(resource, { ref, content });\n\n\t\treturn ref;\n\t}\n\n\t/**\n\t * @param resource: The resource to retrieve content for.\n\t * @param ref: A specific content ref to retrieve content for, if it exists.\n\t * If undefined, this method will return the latest saved edit session, if any.\n\t *\n\t * @returns An object representing the requested or latest state, if any.\n\t */\n\tasync read(\n\t\tresource: SyncResource,\n\t\tref: string | undefined,\n\t): Promise<{ ref: string; content: string } | undefined> {\n\t\tawait this.initialize(\"read\", false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Please sign in to apply your latest edit session.\",\n\t\t\t);\n\t\t}\n\n\t\tlet content: string | undefined | null;\n\t\tconst headers = createSyncHeaders(generateUuid());\n\t\ttry {\n\t\t\tif (ref !== undefined) {\n\t\t\t\tcontent = await this.storeClient?.resolveResourceContent(\n\t\t\t\t\tresource,\n\t\t\t\t\tref,\n\t\t\t\t\tundefined,\n\t\t\t\t\theaders,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst result = await this.storeClient?.readResource(\n\t\t\t\t\tresource,\n\t\t\t\t\tnull,\n\t\t\t\t\tundefined,\n\t\t\t\t\theaders,\n\t\t\t\t);\n\t\t\t\tcontent = result?.content;\n\t\t\t\tref = result?.ref;\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\n\t\t// TODO@joyceerhl Validate session data, check schema version\n\t\tif (content !== undefined && content !== null && ref !== undefined) {\n\t\t\tthis._lastReadResources.set(resource, { ref, content });\n\t\t\treturn { ref, content };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync delete(resource: SyncResource, ref: string | null) {\n\t\tawait this.initialize(\"write\", false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(`Unable to delete edit session with ref ${ref}.`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.storeClient?.deleteResource(resource, ref);\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\t}\n\n\tasync list(resource: SyncResource): Promise<IResourceRefHandle[]> {\n\t\tawait this.initialize(\"read\", false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(`Unable to list edit sessions.`);\n\t\t}\n\n\t\ttry {\n\t\t\treturn this.storeClient?.getAllResourceRefs(resource) ?? [];\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tpublic async initialize(reason: \"read\" | \"write\", silent = false) {\n\t\tif (this.initialized) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.initialized = await this.doInitialize(reason, silent);\n\t\tthis.signedInContext.set(this.initialized);\n\t\tif (this.initialized) {\n\t\t\tthis._didSignIn.fire();\n\t\t}\n\t\treturn this.initialized;\n\t}\n\n\t/**\n\t *\n\t * Ensures that the store client is initialized,\n\t * meaning that authentication is configured and it\n\t * can be used to communicate with the remote storage service\n\t */\n\tprivate async doInitialize(\n\t\treason: \"read\" | \"write\",\n\t\tsilent: boolean,\n\t): Promise<boolean> {\n\t\t// Wait for authentication extensions to be registered\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tif (!this.serverConfiguration?.url) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Unable to initialize sessions sync as session sync preference is not configured in product.json.\",\n\t\t\t);\n\t\t}\n\n\t\tif (this.storeClient === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis.storeClient.onTokenFailed(() => {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Clearing edit sessions authentication preference because of successive token failures.\",\n\t\t\t\t);\n\t\t\t\tthis.clearAuthenticationPreference();\n\t\t\t}),\n\t\t);\n\n\t\tif (this.machineClient === undefined) {\n\t\t\tthis.machineClient = new UserDataSyncMachinesService(\n\t\t\t\tthis.environmentService,\n\t\t\t\tthis.fileService,\n\t\t\t\tthis.storageService,\n\t\t\t\tthis.storeClient,\n\t\t\t\tthis.logService,\n\t\t\t\tthis.productService,\n\t\t\t);\n\t\t}\n\n\t\t// If we already have an existing auth session in memory, use that\n\t\tif (this.authenticationInfo !== undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst authenticationSession = await this.getAuthenticationSession(\n\t\t\treason,\n\t\t\tsilent,\n\t\t);\n\t\tif (authenticationSession !== undefined) {\n\t\t\tthis.authenticationInfo = authenticationSession;\n\t\t\tthis.storeClient.setAuthToken(\n\t\t\t\tauthenticationSession.token,\n\t\t\t\tauthenticationSession.providerId,\n\t\t\t);\n\t\t}\n\n\t\treturn authenticationSession !== undefined;\n\t}\n\n\tprivate cachedMachines: Map<string, string> | undefined;\n\n\tasync getMachineById(machineId: string) {\n\t\tawait this.initialize(\"read\", false);\n\n\t\tif (!this.cachedMachines) {\n\t\t\tconst machines = await this.machineClient!.getMachines();\n\t\t\tthis.cachedMachines = machines.reduce(\n\t\t\t\t(map, machine) => map.set(machine.id, machine.name),\n\t\t\t\tnew Map<string, string>(),\n\t\t\t);\n\t\t}\n\n\t\treturn this.cachedMachines.get(machineId);\n\t}\n\n\tprivate async getOrCreateCurrentMachineId(): Promise<string> {\n\t\tconst currentMachineId = await this.machineClient!.getMachines().then(\n\t\t\t(machines) => machines.find((m) => m.isCurrent)?.id,\n\t\t);\n\n\t\tif (currentMachineId === undefined) {\n\t\t\tawait this.machineClient!.addCurrentMachine();\n\t\t\treturn await this.machineClient!.getMachines().then(\n\t\t\t\t(machines) => machines.find((m) => m.isCurrent)!.id,\n\t\t\t);\n\t\t}\n\n\t\treturn currentMachineId;\n\t}\n\n\tprivate async getAuthenticationSession(\n\t\treason: \"read\" | \"write\",\n\t\tsilent: boolean,\n\t) {\n\t\t// If the user signed in previously and the session is still available, reuse that without prompting the user again\n\t\tif (this.existingSessionId) {\n\t\t\tthis.logService.info(\n\t\t\t\t`Searching for existing authentication session with ID ${this.existingSessionId}`,\n\t\t\t);\n\t\t\tconst existingSession = await this.getExistingSession();\n\t\t\tif (existingSession) {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Found existing authentication session with ID ${existingSession.session.id}`,\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: existingSession.session.id,\n\t\t\t\t\ttoken:\n\t\t\t\t\t\texistingSession.session.idToken ??\n\t\t\t\t\t\texistingSession.session.accessToken,\n\t\t\t\t\tproviderId: existingSession.session.providerId,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis._didSignOut.fire();\n\t\t\t}\n\t\t}\n\n\t\t// If settings sync is already enabled, avoid asking again to authenticate\n\t\tif (this.shouldAttemptEditSessionInit()) {\n\t\t\tthis.logService.info(`Reusing user data sync enablement`);\n\t\t\tconst authenticationSessionInfo =\n\t\t\t\tawait getCurrentAuthenticationSessionInfo(\n\t\t\t\t\tthis.secretStorageService,\n\t\t\t\t\tthis.productService,\n\t\t\t\t);\n\t\t\tif (authenticationSessionInfo !== undefined) {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Using current authentication session with ID ${authenticationSessionInfo.id}`,\n\t\t\t\t);\n\t\t\t\tthis.existingSessionId = authenticationSessionInfo.id;\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: authenticationSessionInfo.id,\n\t\t\t\t\ttoken: authenticationSessionInfo.accessToken,\n\t\t\t\t\tproviderId: authenticationSessionInfo.providerId,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// If we aren't supposed to prompt the user because\n\t\t// we're in a silent flow, just return here\n\t\tif (silent) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ask the user to pick a preferred account\n\t\tconst authenticationSession = await this.getAccountPreference(reason);\n\t\tif (authenticationSession !== undefined) {\n\t\t\tthis.existingSessionId = authenticationSession.id;\n\t\t\treturn {\n\t\t\t\tsessionId: authenticationSession.id,\n\t\t\t\ttoken:\n\t\t\t\t\tauthenticationSession.idToken ??\n\t\t\t\t\tauthenticationSession.accessToken,\n\t\t\t\tproviderId: authenticationSession.providerId,\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate shouldAttemptEditSessionInit(): boolean {\n\t\treturn (\n\t\t\tisWeb &&\n\t\t\tthis.storageService.isNew(StorageScope.APPLICATION) &&\n\t\t\tthis.storageService.isNew(StorageScope.WORKSPACE)\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * Prompts the user to pick an authentication option for storing and getting edit sessions.\n\t */\n\tprivate async getAccountPreference(\n\t\treason: \"read\" | \"write\",\n\t): Promise<(AuthenticationSession & { providerId: string }) | undefined> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickpick = disposables.add(\n\t\t\tthis.quickInputService.createQuickPick<\n\t\t\t\tExistingSession | AuthenticationProviderOption | IQuickPickItem\n\t\t\t>({ useSeparators: true }),\n\t\t);\n\t\tquickpick.ok = false;\n\t\tquickpick.placeholder =\n\t\t\treason === \"read\"\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"choose account read placeholder\",\n\t\t\t\t\t\t\"Select an account to restore your working changes from the cloud\",\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"choose account placeholder\",\n\t\t\t\t\t\t\"Select an account to store your working changes in the cloud\",\n\t\t\t\t\t);\n\t\tquickpick.ignoreFocusOut = true;\n\t\tquickpick.items = await this.createQuickpickItems();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdisposables.add(\n\t\t\t\tquickpick.onDidHide((e) => {\n\t\t\t\t\treject(new CancellationError());\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposables.add(\n\t\t\t\tquickpick.onDidAccept(async (e) => {\n\t\t\t\t\tconst selection = quickpick.selectedItems[0];\n\t\t\t\t\tconst session =\n\t\t\t\t\t\t\"provider\" in selection\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t...(await this.authenticationService.createSession(\n\t\t\t\t\t\t\t\t\t\tselection.provider.id,\n\t\t\t\t\t\t\t\t\t\tselection.provider.scopes,\n\t\t\t\t\t\t\t\t\t)),\n\t\t\t\t\t\t\t\t\tproviderId: selection.provider.id,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: \"session\" in selection\n\t\t\t\t\t\t\t\t? selection.session\n\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\tresolve(session);\n\t\t\t\t\tquickpick.hide();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tquickpick.show();\n\t\t});\n\t}\n\n\tprivate async createQuickpickItems(): Promise<\n\t\t(\n\t\t\t| ExistingSession\n\t\t\t| AuthenticationProviderOption\n\t\t\t| IQuickPickSeparator\n\t\t\t| (IQuickPickItem & { canceledAuthentication: boolean })\n\t\t)[]\n\t> {\n\t\tconst options: (\n\t\t\t| ExistingSession\n\t\t\t| AuthenticationProviderOption\n\t\t\t| IQuickPickSeparator\n\t\t\t| (IQuickPickItem & { canceledAuthentication: boolean })\n\t\t)[] = [];\n\n\t\toptions.push({\n\t\t\ttype: \"separator\",\n\t\t\tlabel: localize(\"signed in\", \"Signed In\"),\n\t\t});\n\n\t\tconst sessions = await this.getAllSessions();\n\t\toptions.push(...sessions);\n\n\t\toptions.push({\n\t\t\ttype: \"separator\",\n\t\t\tlabel: localize(\"others\", \"Others\"),\n\t\t});\n\n\t\tfor (const authenticationProvider of await this.getAuthenticationProviders()) {\n\t\t\tconst signedInForProvider = sessions.some(\n\t\t\t\t(account) =>\n\t\t\t\t\taccount.session.providerId === authenticationProvider.id,\n\t\t\t);\n\t\t\tif (\n\t\t\t\t!signedInForProvider ||\n\t\t\t\tthis.authenticationService.getProvider(\n\t\t\t\t\tauthenticationProvider.id,\n\t\t\t\t).supportsMultipleAccounts\n\t\t\t) {\n\t\t\t\tconst providerName = this.authenticationService.getProvider(\n\t\t\t\t\tauthenticationProvider.id,\n\t\t\t\t).label;\n\t\t\t\toptions.push({\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"sign in using account\",\n\t\t\t\t\t\t\"Sign in with {0}\",\n\t\t\t\t\t\tproviderName,\n\t\t\t\t\t),\n\t\t\t\t\tprovider: authenticationProvider,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t *\n\t * Returns all authentication sessions available from {@link getAuthenticationProviders}.\n\t */\n\tprivate async getAllSessions() {\n\t\tconst authenticationProviders = await this.getAuthenticationProviders();\n\t\tconst accounts = new Map<string, ExistingSession>();\n\t\tlet currentSession: ExistingSession | undefined;\n\n\t\tfor (const provider of authenticationProviders) {\n\t\t\tconst sessions = await this.authenticationService.getSessions(\n\t\t\t\tprovider.id,\n\t\t\t\tprovider.scopes,\n\t\t\t);\n\n\t\t\tfor (const session of sessions) {\n\t\t\t\tconst item = {\n\t\t\t\t\tlabel: session.account.label,\n\t\t\t\t\tdescription: this.authenticationService.getProvider(\n\t\t\t\t\t\tprovider.id,\n\t\t\t\t\t).label,\n\t\t\t\t\tsession: { ...session, providerId: provider.id },\n\t\t\t\t};\n\t\t\t\taccounts.set(item.session.account.id, item);\n\t\t\t\tif (this.existingSessionId === session.id) {\n\t\t\t\t\tcurrentSession = item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentSession !== undefined) {\n\t\t\taccounts.set(currentSession.session.account.id, currentSession);\n\t\t}\n\n\t\treturn [...accounts.values()].sort((a, b) =>\n\t\t\ta.label.localeCompare(b.label),\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * Returns all authentication providers which can be used to authenticate\n\t * to the remote storage service, based on product.json configuration\n\t * and registered authentication providers.\n\t */\n\tprivate async getAuthenticationProviders() {\n\t\tif (!this.serverConfiguration) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Unable to get configured authentication providers as session sync preference is not configured in product.json.\",\n\t\t\t);\n\t\t}\n\n\t\t// Get the list of authentication providers configured in product.json\n\t\tconst authenticationProviders =\n\t\t\tthis.serverConfiguration.authenticationProviders;\n\t\tconst configuredAuthenticationProviders = Object.keys(\n\t\t\tauthenticationProviders,\n\t\t).reduce<IAuthenticationProvider[]>((result, id) => {\n\t\t\tresult.push({ id, scopes: authenticationProviders[id].scopes });\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t// Filter out anything that isn't currently available through the authenticationService\n\t\tconst availableAuthenticationProviders =\n\t\t\tthis.authenticationService.declaredProviders;\n\n\t\treturn configuredAuthenticationProviders.filter(({ id }) =>\n\t\t\tavailableAuthenticationProviders.some(\n\t\t\t\t(provider) => provider.id === id,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate get existingSessionId() {\n\t\treturn this.storageService.get(\n\t\t\tEditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t}\n\n\tprivate set existingSessionId(sessionId: string | undefined) {\n\t\tthis.logService.trace(\n\t\t\t`Saving authentication session preference for ID ${sessionId}.`,\n\t\t);\n\t\tif (sessionId === undefined) {\n\t\t\tthis.storageService.remove(\n\t\t\t\tEditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.store(\n\t\t\t\tEditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY,\n\t\t\t\tsessionId,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async getExistingSession() {\n\t\tconst accounts = await this.getAllSessions();\n\t\treturn accounts.find(\n\t\t\t(account) => account.session.id === this.existingSessionId,\n\t\t);\n\t}\n\n\tprivate async onDidChangeStorage(): Promise<void> {\n\t\tconst newSessionId = this.existingSessionId;\n\t\tconst previousSessionId = this.authenticationInfo?.sessionId;\n\n\t\tif (previousSessionId !== newSessionId) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`Resetting authentication state because authentication session ID preference changed from ${previousSessionId} to ${newSessionId}.`,\n\t\t\t);\n\t\t\tthis.authenticationInfo = undefined;\n\t\t\tthis.initialized = false;\n\t\t}\n\t}\n\n\tprivate clearAuthenticationPreference(): void {\n\t\tthis.authenticationInfo = undefined;\n\t\tthis.initialized = false;\n\t\tthis.existingSessionId = undefined;\n\t\tthis.signedInContext.set(false);\n\t}\n\n\tprivate onDidChangeSessions(e: AuthenticationSessionsChangeEvent): void {\n\t\tif (\n\t\t\tthis.authenticationInfo?.sessionId &&\n\t\t\te.removed?.find(\n\t\t\t\t(session) => session.id === this.authenticationInfo?.sessionId,\n\t\t\t)\n\t\t) {\n\t\t\tthis.clearAuthenticationPreference();\n\t\t}\n\t}\n\n\tprivate registerSignInAction() {\n\t\tconst that = this;\n\t\tconst id = \"workbench.editSessions.actions.signIn\";\n\t\tconst when = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals(EDIT_SESSIONS_PENDING_KEY, false),\n\t\t\tContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, false),\n\t\t);\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass ResetEditSessionAuthenticationAction extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\t\t\"sign in\",\n\t\t\t\t\t\t\t\t\"Turn on Cloud Changes...\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\t\t\tprecondition: when,\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\t\t\t\tgroup: \"2_editSessions\",\n\t\t\t\t\t\t\t\t\twhen,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run() {\n\t\t\t\t\t\treturn await that.initialize(\"write\", false);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tMenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\t\tgroup: \"2_editSessions\",\n\t\t\t\tcommand: {\n\t\t\t\t\tid,\n\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\"sign in badge\",\n\t\t\t\t\t\t\"Turn on Cloud Changes... (1)\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals(EDIT_SESSIONS_PENDING_KEY, true),\n\t\t\t\t\tContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, false),\n\t\t\t\t),\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate registerResetAuthenticationAction() {\n\t\tconst that = this;\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass ResetEditSessionAuthenticationAction extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: \"workbench.editSessions.actions.resetAuth\",\n\t\t\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\t\t\"reset auth.v3\",\n\t\t\t\t\t\t\t\t\"Turn off Cloud Changes...\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\t\t\tprecondition: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\tEDIT_SESSIONS_SIGNED_IN_KEY,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\t\t\t\tgroup: \"2_editSessions\",\n\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\tEDIT_SESSIONS_SIGNED_IN_KEY,\n\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run() {\n\t\t\t\t\t\tconst result = await that.dialogService.confirm({\n\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\"sign out of cloud changes clear data prompt\",\n\t\t\t\t\t\t\t\t\"Do you want to disable storing working changes in the cloud?\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\t\t\"delete all cloud changes\",\n\t\t\t\t\t\t\t\t\t\"Delete all stored data from the cloud.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (result.confirmed) {\n\t\t\t\t\t\t\tif (result.checkboxChecked) {\n\t\t\t\t\t\t\t\tthat.storeClient?.deleteResource(\n\t\t\t\t\t\t\t\t\t\"editSessions\",\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthat.clearAuthenticationPreference();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
