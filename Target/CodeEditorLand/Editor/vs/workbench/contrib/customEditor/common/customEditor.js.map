{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/customEditor/common/customEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { IDisposable, IReference } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as nls from '../../../../nls.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IRevertOptions, ISaveOptions } from '../../../common/editor.js';\nimport { globMatchesResource, priorityToRank, RegisteredEditorPriority } from '../../../services/editor/common/editorResolverService.js';\n\nexport const ICustomEditorService = createDecorator<ICustomEditorService>('customEditorService');\n\nexport const CONTEXT_ACTIVE_CUSTOM_EDITOR_ID = new RawContextKey<string>('activeCustomEditorId', '', {\n\ttype: 'string',\n\tdescription: nls.localize('context.customEditor', \"The viewType of the currently active custom editor.\"),\n});\n\nexport const CONTEXT_FOCUSED_CUSTOM_EDITOR_IS_EDITABLE = new RawContextKey<boolean>('focusedCustomEditorIsEditable', false);\n\nexport interface CustomEditorCapabilities {\n\treadonly supportsMultipleEditorsPerDocument?: boolean;\n}\n\nexport interface ICustomEditorService {\n\t_serviceBrand: any;\n\n\treadonly models: ICustomEditorModelManager;\n\n\tgetCustomEditor(viewType: string): CustomEditorInfo | undefined;\n\tgetAllCustomEditors(resource: URI): CustomEditorInfoCollection;\n\tgetContributedCustomEditors(resource: URI): CustomEditorInfoCollection;\n\tgetUserConfiguredCustomEditors(resource: URI): CustomEditorInfoCollection;\n\n\tregisterCustomEditorCapabilities(viewType: string, options: CustomEditorCapabilities): IDisposable;\n\tgetCustomEditorCapabilities(viewType: string): CustomEditorCapabilities | undefined;\n}\n\nexport interface ICustomEditorModelManager {\n\tgetAllModels(resource: URI): Promise<ICustomEditorModel[]>;\n\n\tget(resource: URI, viewType: string): Promise<ICustomEditorModel | undefined>;\n\n\ttryRetain(resource: URI, viewType: string): Promise<IReference<ICustomEditorModel>> | undefined;\n\n\tadd(resource: URI, viewType: string, model: Promise<ICustomEditorModel>): Promise<IReference<ICustomEditorModel>>;\n\n\tdisposeAllModelsForView(viewType: string): void;\n}\n\nexport interface ICustomEditorModel extends IDisposable {\n\treadonly viewType: string;\n\treadonly resource: URI;\n\treadonly backupId: string | undefined;\n\treadonly canHotExit: boolean;\n\n\tisReadonly(): boolean | IMarkdownString;\n\treadonly onDidChangeReadonly: Event<void>;\n\n\tisOrphaned(): boolean;\n\treadonly onDidChangeOrphaned: Event<void>;\n\n\tisDirty(): boolean;\n\treadonly onDidChangeDirty: Event<void>;\n\n\trevert(options?: IRevertOptions): Promise<void>;\n\n\tsaveCustomEditor(options?: ISaveOptions): Promise<URI | undefined>;\n\tsaveCustomEditorAs(resource: URI, targetResource: URI, currentOptions?: ISaveOptions): Promise<boolean>;\n}\n\nexport const enum CustomEditorPriority {\n\tdefault = 'default',\n\tbuiltin = 'builtin',\n\toption = 'option',\n}\n\nexport interface CustomEditorSelector {\n\treadonly filenamePattern?: string;\n}\n\nexport interface CustomEditorDescriptor {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly providerDisplayName: string;\n\treadonly priority: RegisteredEditorPriority;\n\treadonly selector: readonly CustomEditorSelector[];\n}\n\nexport class CustomEditorInfo implements CustomEditorDescriptor {\n\n\tpublic readonly id: string;\n\tpublic readonly displayName: string;\n\tpublic readonly providerDisplayName: string;\n\tpublic readonly priority: RegisteredEditorPriority;\n\tpublic readonly selector: readonly CustomEditorSelector[];\n\n\tconstructor(descriptor: CustomEditorDescriptor) {\n\t\tthis.id = descriptor.id;\n\t\tthis.displayName = descriptor.displayName;\n\t\tthis.providerDisplayName = descriptor.providerDisplayName;\n\t\tthis.priority = descriptor.priority;\n\t\tthis.selector = descriptor.selector;\n\t}\n\n\tmatches(resource: URI): boolean {\n\t\treturn this.selector.some(selector => selector.filenamePattern && globMatchesResource(selector.filenamePattern, resource));\n\t}\n}\n\nexport class CustomEditorInfoCollection {\n\n\tpublic readonly allEditors: readonly CustomEditorInfo[];\n\n\tconstructor(\n\t\teditors: readonly CustomEditorInfo[],\n\t) {\n\t\tthis.allEditors = distinct(editors, editor => editor.id);\n\t}\n\n\tpublic get length(): number { return this.allEditors.length; }\n\n\t/**\n\t * Find the single default editor to use (if any) by looking at the editor's priority and the\n\t * other contributed editors.\n\t */\n\tpublic get defaultEditor(): CustomEditorInfo | undefined {\n\t\treturn this.allEditors.find(editor => {\n\t\t\tswitch (editor.priority) {\n\t\t\t\tcase RegisteredEditorPriority.default:\n\t\t\t\tcase RegisteredEditorPriority.builtin:\n\t\t\t\t\t// A default editor must have higher priority than all other contributed editors.\n\t\t\t\t\treturn this.allEditors.every(otherEditor =>\n\t\t\t\t\t\totherEditor === editor || isLowerPriority(otherEditor, editor));\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Find the best available editor to use.\n\t *\n\t * Unlike the `defaultEditor`, a bestAvailableEditor can exist even if there are other editors with\n\t * the same priority.\n\t */\n\tpublic get bestAvailableEditor(): CustomEditorInfo | undefined {\n\t\tconst editors = Array.from(this.allEditors).sort((a, b) => {\n\t\t\treturn priorityToRank(a.priority) - priorityToRank(b.priority);\n\t\t});\n\t\treturn editors[0];\n\t}\n}\n\nfunction isLowerPriority(otherEditor: CustomEditorInfo, editor: CustomEditorInfo): unknown {\n\treturn priorityToRank(otherEditor.priority) < priorityToRank(editor.priority);\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,aAAa,kBAAkB;AACxC,SAAS,WAAW;AACpB,YAAY,SAAS;AACrB,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,gBAAgB,oBAAoB;AAC7C,SAAS,qBAAqB,gBAAgB,gCAAgC;AAEvE,MAAM,uBAAuB,gBAAsC,qBAAqB;AAExF,MAAM,kCAAkC,IAAI,cAAsB,wBAAwB,IAAI;AAAA,EACpG,MAAM;AAAA,EACN,aAAa,IAAI,SAAS,wBAAwB,qDAAqD;AACxG,CAAC;AAEM,MAAM,4CAA4C,IAAI,cAAuB,iCAAiC,KAAK;AAqDnH,IAAW,uBAAX,kBAAWA,0BAAX;AACN,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,YAAS;AAHQ,SAAAA;AAAA,GAAA;AAkBX,MAAM,iBAAmD;AAAA,EA9FhE,OA8FgE;AAAA;AAAA;AAAA,EAE/C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,YAAY,YAAoC;AAC/C,SAAK,KAAK,WAAW;AACrB,SAAK,cAAc,WAAW;AAC9B,SAAK,sBAAsB,WAAW;AACtC,SAAK,WAAW,WAAW;AAC3B,SAAK,WAAW,WAAW;AAAA,EAC5B;AAAA,EAEA,QAAQ,UAAwB;AAC/B,WAAO,KAAK,SAAS,KAAK,cAAY,SAAS,mBAAmB,oBAAoB,SAAS,iBAAiB,QAAQ,CAAC;AAAA,EAC1H;AACD;AAEO,MAAM,2BAA2B;AAAA,EAnHxC,OAmHwC;AAAA;AAAA;AAAA,EAEvB;AAAA,EAEhB,YACC,SACC;AACD,SAAK,aAAa,SAAS,SAAS,YAAU,OAAO,EAAE;AAAA,EACxD;AAAA,EAEA,IAAW,SAAiB;AAAE,WAAO,KAAK,WAAW;AAAA,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7D,IAAW,gBAA8C;AACxD,WAAO,KAAK,WAAW,KAAK,YAAU;AACrC,cAAQ,OAAO,UAAU;AAAA,QACxB,KAAK,yBAAyB;AAAA,QAC9B,KAAK,yBAAyB;AAE7B,iBAAO,KAAK,WAAW,MAAM,iBAC5B,gBAAgB,UAAU,gBAAgB,aAAa,MAAM,CAAC;AAAA,QAEhE;AACC,iBAAO;AAAA,MACT;AAAA,IACD,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,sBAAoD;AAC9D,UAAM,UAAU,MAAM,KAAK,KAAK,UAAU,EAAE,KAAK,CAAC,GAAG,MAAM;AAC1D,aAAO,eAAe,EAAE,QAAQ,IAAI,eAAe,EAAE,QAAQ;AAAA,IAC9D,CAAC;AACD,WAAO,QAAQ,CAAC;AAAA,EACjB;AACD;AAEA,SAAS,gBAAgB,aAA+B,QAAmC;AAC1F,SAAO,eAAe,YAAY,QAAQ,IAAI,eAAe,OAAO,QAAQ;AAC7E;AAFS;",
  "names": ["CustomEditorPriority"]
}
