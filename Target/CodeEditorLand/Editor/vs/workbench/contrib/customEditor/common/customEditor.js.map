{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/customEditor/common/customEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport type {\n\tIDisposable,\n\tIReference,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IRevertOptions, ISaveOptions } from \"../../../common/editor.js\";\nimport {\n\tRegisteredEditorPriority,\n\tglobMatchesResource,\n\tpriorityToRank,\n} from \"../../../services/editor/common/editorResolverService.js\";\n\nexport const ICustomEditorService = createDecorator<ICustomEditorService>(\n\t\"customEditorService\",\n);\n\nexport const CONTEXT_ACTIVE_CUSTOM_EDITOR_ID = new RawContextKey<string>(\n\t\"activeCustomEditorId\",\n\t\"\",\n\t{\n\t\ttype: \"string\",\n\t\tdescription: nls.localize(\n\t\t\t\"context.customEditor\",\n\t\t\t\"The viewType of the currently active custom editor.\",\n\t\t),\n\t},\n);\n\nexport const CONTEXT_FOCUSED_CUSTOM_EDITOR_IS_EDITABLE =\n\tnew RawContextKey<boolean>(\"focusedCustomEditorIsEditable\", false);\n\nexport interface CustomEditorCapabilities {\n\treadonly supportsMultipleEditorsPerDocument?: boolean;\n}\n\nexport interface ICustomEditorService {\n\t_serviceBrand: any;\n\n\treadonly models: ICustomEditorModelManager;\n\n\tgetCustomEditor(viewType: string): CustomEditorInfo | undefined;\n\tgetAllCustomEditors(resource: URI): CustomEditorInfoCollection;\n\tgetContributedCustomEditors(resource: URI): CustomEditorInfoCollection;\n\tgetUserConfiguredCustomEditors(resource: URI): CustomEditorInfoCollection;\n\n\tregisterCustomEditorCapabilities(\n\t\tviewType: string,\n\t\toptions: CustomEditorCapabilities,\n\t): IDisposable;\n\tgetCustomEditorCapabilities(\n\t\tviewType: string,\n\t): CustomEditorCapabilities | undefined;\n}\n\nexport interface ICustomEditorModelManager {\n\tgetAllModels(resource: URI): Promise<ICustomEditorModel[]>;\n\n\tget(\n\t\tresource: URI,\n\t\tviewType: string,\n\t): Promise<ICustomEditorModel | undefined>;\n\n\ttryRetain(\n\t\tresource: URI,\n\t\tviewType: string,\n\t): Promise<IReference<ICustomEditorModel>> | undefined;\n\n\tadd(\n\t\tresource: URI,\n\t\tviewType: string,\n\t\tmodel: Promise<ICustomEditorModel>,\n\t): Promise<IReference<ICustomEditorModel>>;\n\n\tdisposeAllModelsForView(viewType: string): void;\n}\n\nexport interface ICustomEditorModel extends IDisposable {\n\treadonly viewType: string;\n\treadonly resource: URI;\n\treadonly backupId: string | undefined;\n\treadonly canHotExit: boolean;\n\n\tisReadonly(): boolean | IMarkdownString;\n\treadonly onDidChangeReadonly: Event<void>;\n\n\tisOrphaned(): boolean;\n\treadonly onDidChangeOrphaned: Event<void>;\n\n\tisDirty(): boolean;\n\treadonly onDidChangeDirty: Event<void>;\n\n\trevert(options?: IRevertOptions): Promise<void>;\n\n\tsaveCustomEditor(options?: ISaveOptions): Promise<URI | undefined>;\n\tsaveCustomEditorAs(\n\t\tresource: URI,\n\t\ttargetResource: URI,\n\t\tcurrentOptions?: ISaveOptions,\n\t): Promise<boolean>;\n}\n\nexport enum CustomEditorPriority {\n\tdefault = \"default\",\n\tbuiltin = \"builtin\",\n\toption = \"option\",\n}\n\nexport interface CustomEditorSelector {\n\treadonly filenamePattern?: string;\n}\n\nexport interface CustomEditorDescriptor {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly providerDisplayName: string;\n\treadonly priority: RegisteredEditorPriority;\n\treadonly selector: readonly CustomEditorSelector[];\n}\n\nexport class CustomEditorInfo implements CustomEditorDescriptor {\n\tpublic readonly id: string;\n\tpublic readonly displayName: string;\n\tpublic readonly providerDisplayName: string;\n\tpublic readonly priority: RegisteredEditorPriority;\n\tpublic readonly selector: readonly CustomEditorSelector[];\n\n\tconstructor(descriptor: CustomEditorDescriptor) {\n\t\tthis.id = descriptor.id;\n\t\tthis.displayName = descriptor.displayName;\n\t\tthis.providerDisplayName = descriptor.providerDisplayName;\n\t\tthis.priority = descriptor.priority;\n\t\tthis.selector = descriptor.selector;\n\t}\n\n\tmatches(resource: URI): boolean {\n\t\treturn this.selector.some(\n\t\t\t(selector) =>\n\t\t\t\tselector.filenamePattern &&\n\t\t\t\tglobMatchesResource(selector.filenamePattern, resource),\n\t\t);\n\t}\n}\n\nexport class CustomEditorInfoCollection {\n\tpublic readonly allEditors: readonly CustomEditorInfo[];\n\n\tconstructor(editors: readonly CustomEditorInfo[]) {\n\t\tthis.allEditors = distinct(editors, (editor) => editor.id);\n\t}\n\n\tpublic get length(): number {\n\t\treturn this.allEditors.length;\n\t}\n\n\t/**\n\t * Find the single default editor to use (if any) by looking at the editor's priority and the\n\t * other contributed editors.\n\t */\n\tpublic get defaultEditor(): CustomEditorInfo | undefined {\n\t\treturn this.allEditors.find((editor) => {\n\t\t\tswitch (editor.priority) {\n\t\t\t\tcase RegisteredEditorPriority.default:\n\t\t\t\tcase RegisteredEditorPriority.builtin:\n\t\t\t\t\t// A default editor must have higher priority than all other contributed editors.\n\t\t\t\t\treturn this.allEditors.every(\n\t\t\t\t\t\t(otherEditor) =>\n\t\t\t\t\t\t\totherEditor === editor ||\n\t\t\t\t\t\t\tisLowerPriority(otherEditor, editor),\n\t\t\t\t\t);\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Find the best available editor to use.\n\t *\n\t * Unlike the `defaultEditor`, a bestAvailableEditor can exist even if there are other editors with\n\t * the same priority.\n\t */\n\tpublic get bestAvailableEditor(): CustomEditorInfo | undefined {\n\t\tconst editors = Array.from(this.allEditors).sort((a, b) => {\n\t\t\treturn priorityToRank(a.priority) - priorityToRank(b.priority);\n\t\t});\n\t\treturn editors[0];\n\t}\n}\n\nfunction isLowerPriority(\n\totherEditor: CustomEditorInfo,\n\teditor: CustomEditorInfo,\n): unknown {\n\treturn (\n\t\tpriorityToRank(otherEditor.priority) < priorityToRank(editor.priority)\n\t);\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AAQzB,YAAY,SAAS;AACrB,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAEhC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,MAAM,uBAAuB;AAAA,EACnC;AACD;AAEO,MAAM,kCAAkC,IAAI;AAAA,EAClD;AAAA,EACA;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa,IAAI;AAAA,MAChB;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAEO,MAAM,4CACZ,IAAI,cAAuB,iCAAiC,KAAK;AAwE3D,IAAK,uBAAL,kBAAKA,0BAAL;AACN,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,YAAS;AAHE,SAAAA;AAAA,GAAA;AAkBL,MAAM,iBAAmD;AAAA,EAlIhE,OAkIgE;AAAA;AAAA;AAAA,EAC/C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,YAAY,YAAoC;AAC/C,SAAK,KAAK,WAAW;AACrB,SAAK,cAAc,WAAW;AAC9B,SAAK,sBAAsB,WAAW;AACtC,SAAK,WAAW,WAAW;AAC3B,SAAK,WAAW,WAAW;AAAA,EAC5B;AAAA,EAEA,QAAQ,UAAwB;AAC/B,WAAO,KAAK,SAAS;AAAA,MACpB,CAAC,aACA,SAAS,mBACT,oBAAoB,SAAS,iBAAiB,QAAQ;AAAA,IACxD;AAAA,EACD;AACD;AAEO,MAAM,2BAA2B;AAAA,EA1JxC,OA0JwC;AAAA;AAAA;AAAA,EACvB;AAAA,EAEhB,YAAY,SAAsC;AACjD,SAAK,aAAa,SAAS,SAAS,CAAC,WAAW,OAAO,EAAE;AAAA,EAC1D;AAAA,EAEA,IAAW,SAAiB;AAC3B,WAAO,KAAK,WAAW;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,gBAA8C;AACxD,WAAO,KAAK,WAAW,KAAK,CAAC,WAAW;AACvC,cAAQ,OAAO,UAAU;AAAA,QACxB,KAAK,yBAAyB;AAAA,QAC9B,KAAK,yBAAyB;AAE7B,iBAAO,KAAK,WAAW;AAAA,YACtB,CAAC,gBACA,gBAAgB,UAChB,gBAAgB,aAAa,MAAM;AAAA,UACrC;AAAA,QAED;AACC,iBAAO;AAAA,MACT;AAAA,IACD,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,sBAAoD;AAC9D,UAAM,UAAU,MAAM,KAAK,KAAK,UAAU,EAAE,KAAK,CAAC,GAAG,MAAM;AAC1D,aAAO,eAAe,EAAE,QAAQ,IAAI,eAAe,EAAE,QAAQ;AAAA,IAC9D,CAAC;AACD,WAAO,QAAQ,CAAC;AAAA,EACjB;AACD;AAEA,SAAS,gBACR,aACA,QACU;AACV,SACC,eAAe,YAAY,QAAQ,IAAI,eAAe,OAAO,QAAQ;AAEvE;AAPS;",
  "names": ["CustomEditorPriority"]
}
