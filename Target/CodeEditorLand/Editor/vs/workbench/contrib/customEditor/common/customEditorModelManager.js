import{createSingleCallFunction as n}from"../../../../base/common/functional.js";import"../../../../base/common/lifecycle.js";import"../../../../base/common/uri.js";import"./customEditor.js";class p{_references=new Map;async getAllModels(r){const e=`${r.toString()}@@@`,o=[];for(const[t,s]of this._references)t.startsWith(e)&&s.model&&o.push(await s.model);return o}async get(r,e){const o=this.key(r,e);return this._references.get(o)?.model}tryRetain(r,e){const o=this.key(r,e),t=this._references.get(o);if(t)return t.counter++,t.model.then(s=>({object:s,dispose:n(()=>{--t.counter<=0&&(t.model.then(i=>i.dispose()),this._references.delete(o))})}))}add(r,e,o){const t=this.key(r,e);if(this._references.get(t))throw new Error("Model already exists");return this._references.set(t,{viewType:e,model:o,counter:0}),this.tryRetain(r,e)}disposeAllModelsForView(r){for(const[e,o]of this._references)o.viewType===r&&(o.model.then(t=>t.dispose()),this._references.delete(e))}key(r,e){return`${r.toString()}@@@${e}`}}export{p as CustomEditorModelManager};
