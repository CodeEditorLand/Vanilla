{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/customEditor/common/extensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport type { IJSONSchema } from \"../../../../base/common/jsonSchema.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { IExtensionManifest } from \"../../../../platform/extensions/common/extensions.js\";\nimport { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tExtensions,\n\ttype IExtensionFeatureTableRenderer,\n\ttype IExtensionFeaturesRegistry,\n\ttype IRenderedData,\n\ttype IRowData,\n\ttype ITableData,\n} from \"../../../services/extensionManagement/common/extensionFeatures.js\";\nimport { ExtensionsRegistry } from \"../../../services/extensions/common/extensionsRegistry.js\";\nimport { languagesExtPoint } from \"../../../services/language/common/languageService.js\";\nimport {\n\tCustomEditorPriority,\n\ttype CustomEditorSelector,\n} from \"./customEditor.js\";\n\nconst Fields = Object.freeze({\n\tviewType: \"viewType\",\n\tdisplayName: \"displayName\",\n\tselector: \"selector\",\n\tpriority: \"priority\",\n});\n\nexport interface ICustomEditorsExtensionPoint {\n\treadonly [Fields.viewType]: string;\n\treadonly [Fields.displayName]: string;\n\treadonly [Fields.selector]?: readonly CustomEditorSelector[];\n\treadonly [Fields.priority]?: string;\n}\n\nconst CustomEditorsContribution: IJSONSchema = {\n\tdescription: nls.localize(\n\t\t\"contributes.customEditors\",\n\t\t\"Contributed custom editors.\",\n\t),\n\ttype: \"array\",\n\tdefaultSnippets: [\n\t\t{\n\t\t\tbody: [\n\t\t\t\t{\n\t\t\t\t\t[Fields.viewType]: \"$1\",\n\t\t\t\t\t[Fields.displayName]: \"$2\",\n\t\t\t\t\t[Fields.selector]: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfilenamePattern: \"$3\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n\titems: {\n\t\ttype: \"object\",\n\t\trequired: [Fields.viewType, Fields.displayName, Fields.selector],\n\t\tproperties: {\n\t\t\t[Fields.viewType]: {\n\t\t\t\ttype: \"string\",\n\t\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\t\"contributes.viewType\",\n\t\t\t\t\t\"Identifier for the custom editor. This must be unique across all custom editors, so we recommend including your extension id as part of `viewType`. The `viewType` is used when registering custom editors with `vscode.registerCustomEditorProvider` and in the `onCustomEditor:${id}` [activation event](https://code.visualstudio.com/api/references/activation-events).\",\n\t\t\t\t),\n\t\t\t},\n\t\t\t[Fields.displayName]: {\n\t\t\t\ttype: \"string\",\n\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\"contributes.displayName\",\n\t\t\t\t\t\"Human readable name of the custom editor. This is displayed to users when selecting which editor to use.\",\n\t\t\t\t),\n\t\t\t},\n\t\t\t[Fields.selector]: {\n\t\t\t\ttype: \"array\",\n\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\"contributes.selector\",\n\t\t\t\t\t\"Set of globs that the custom editor is enabled for.\",\n\t\t\t\t),\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\t\tfilenamePattern: \"$1\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tfilenamePattern: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\"contributes.selector.filenamePattern\",\n\t\t\t\t\t\t\t\t\"Glob that the custom editor is enabled for.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t[Fields.priority]: {\n\t\t\t\ttype: \"string\",\n\t\t\t\tmarkdownDeprecationMessage: nls.localize(\n\t\t\t\t\t\"contributes.priority\",\n\t\t\t\t\t\"Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.\",\n\t\t\t\t),\n\t\t\t\tenum: [\n\t\t\t\t\tCustomEditorPriority.default,\n\t\t\t\t\tCustomEditorPriority.option,\n\t\t\t\t],\n\t\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"contributes.priority.default\",\n\t\t\t\t\t\t\"The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.\",\n\t\t\t\t\t),\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"contributes.priority.option\",\n\t\t\t\t\t\t\"The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.\",\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\tdefault: \"default\",\n\t\t\t},\n\t\t},\n\t},\n};\n\nexport const customEditorsExtensionPoint =\n\tExtensionsRegistry.registerExtensionPoint<ICustomEditorsExtensionPoint[]>({\n\t\textensionPoint: \"customEditors\",\n\t\tdeps: [languagesExtPoint],\n\t\tjsonSchema: CustomEditorsContribution,\n\t\tactivationEventsGenerator: (\n\t\t\tcontribs: ICustomEditorsExtensionPoint[],\n\t\t\tresult: { push(item: string): void },\n\t\t) => {\n\t\t\tfor (const contrib of contribs) {\n\t\t\t\tconst viewType = contrib[Fields.viewType];\n\t\t\t\tif (viewType) {\n\t\t\t\t\tresult.push(`onCustomEditor:${viewType}`);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n\nclass CustomEditorsDataRenderer\n\textends Disposable\n\timplements IExtensionFeatureTableRenderer\n{\n\treadonly type = \"table\";\n\n\tshouldRender(manifest: IExtensionManifest): boolean {\n\t\treturn !!manifest.contributes?.customEditors;\n\t}\n\n\trender(manifest: IExtensionManifest): IRenderedData<ITableData> {\n\t\tconst customEditors = manifest.contributes?.customEditors || [];\n\t\tif (!customEditors.length) {\n\t\t\treturn { data: { headers: [], rows: [] }, dispose: () => {} };\n\t\t}\n\n\t\tconst headers = [\n\t\t\tnls.localize(\"customEditors view type\", \"View Type\"),\n\t\t\tnls.localize(\"customEditors priority\", \"Priority\"),\n\t\t\tnls.localize(\"customEditors filenamePattern\", \"Filename Pattern\"),\n\t\t];\n\n\t\tconst rows: IRowData[][] = customEditors.map((customEditor) => {\n\t\t\treturn [\n\t\t\t\tcustomEditor.viewType,\n\t\t\t\tcustomEditor.priority ?? \"\",\n\t\t\t\tcoalesce(\n\t\t\t\t\tcustomEditor.selector.map((x) => x.filenamePattern),\n\t\t\t\t).join(\", \"),\n\t\t\t];\n\t\t});\n\n\t\treturn {\n\t\t\tdata: {\n\t\t\t\theaders,\n\t\t\t\trows,\n\t\t\t},\n\t\t\tdispose: () => {},\n\t\t};\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(\n\tExtensions.ExtensionFeaturesRegistry,\n).registerExtensionFeature({\n\tid: \"customEditors\",\n\tlabel: nls.localize(\"customEditors\", \"Custom Editors\"),\n\taccess: {\n\t\tcanToggle: false,\n\t},\n\trenderer: new SyncDescriptor(CustomEditorsDataRenderer),\n});\n"],
  "mappings": "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",
  "names": []
}
