{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/customEditor/common/extensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as nls from '../../../../nls.js';\nimport { IExtensionManifest } from '../../../../platform/extensions/common/extensions.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { CustomEditorPriority, CustomEditorSelector } from './customEditor.js';\nimport { Extensions, IExtensionFeatureTableRenderer, IExtensionFeaturesRegistry, IRenderedData, IRowData, ITableData } from '../../../services/extensionManagement/common/extensionFeatures.js';\nimport { ExtensionsRegistry } from '../../../services/extensions/common/extensionsRegistry.js';\nimport { languagesExtPoint } from '../../../services/language/common/languageService.js';\n\nconst Fields = Object.freeze({\n\tviewType: 'viewType',\n\tdisplayName: 'displayName',\n\tselector: 'selector',\n\tpriority: 'priority',\n});\n\nexport interface ICustomEditorsExtensionPoint {\n\treadonly [Fields.viewType]: string;\n\treadonly [Fields.displayName]: string;\n\treadonly [Fields.selector]?: readonly CustomEditorSelector[];\n\treadonly [Fields.priority]?: string;\n}\n\nconst CustomEditorsContribution: IJSONSchema = {\n\tdescription: nls.localize('contributes.customEditors', 'Contributed custom editors.'),\n\ttype: 'array',\n\tdefaultSnippets: [{\n\t\tbody: [{\n\t\t\t[Fields.viewType]: '$1',\n\t\t\t[Fields.displayName]: '$2',\n\t\t\t[Fields.selector]: [{\n\t\t\t\tfilenamePattern: '$3'\n\t\t\t}],\n\t\t}]\n\t}],\n\titems: {\n\t\ttype: 'object',\n\t\trequired: [\n\t\t\tFields.viewType,\n\t\t\tFields.displayName,\n\t\t\tFields.selector,\n\t\t],\n\t\tproperties: {\n\t\t\t[Fields.viewType]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tmarkdownDescription: nls.localize('contributes.viewType', 'Identifier for the custom editor. This must be unique across all custom editors, so we recommend including your extension id as part of `viewType`. The `viewType` is used when registering custom editors with `vscode.registerCustomEditorProvider` and in the `onCustomEditor:${id}` [activation event](https://code.visualstudio.com/api/references/activation-events).'),\n\t\t\t},\n\t\t\t[Fields.displayName]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: nls.localize('contributes.displayName', 'Human readable name of the custom editor. This is displayed to users when selecting which editor to use.'),\n\t\t\t},\n\t\t\t[Fields.selector]: {\n\t\t\t\ttype: 'array',\n\t\t\t\tdescription: nls.localize('contributes.selector', 'Set of globs that the custom editor is enabled for.'),\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tdefaultSnippets: [{\n\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\tfilenamePattern: '$1',\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tfilenamePattern: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.selector.filenamePattern', 'Glob that the custom editor is enabled for.'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t[Fields.priority]: {\n\t\t\t\ttype: 'string',\n\t\t\t\tmarkdownDeprecationMessage: nls.localize('contributes.priority', 'Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.'),\n\t\t\t\tenum: [\n\t\t\t\t\tCustomEditorPriority.default,\n\t\t\t\t\tCustomEditorPriority.option,\n\t\t\t\t],\n\t\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\t\tnls.localize('contributes.priority.default', 'The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.'),\n\t\t\t\t\tnls.localize('contributes.priority.option', 'The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.'),\n\t\t\t\t],\n\t\t\t\tdefault: 'default'\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const customEditorsExtensionPoint = ExtensionsRegistry.registerExtensionPoint<ICustomEditorsExtensionPoint[]>({\n\textensionPoint: 'customEditors',\n\tdeps: [languagesExtPoint],\n\tjsonSchema: CustomEditorsContribution,\n\tactivationEventsGenerator: (contribs: ICustomEditorsExtensionPoint[], result: { push(item: string): void }) => {\n\t\tfor (const contrib of contribs) {\n\t\t\tconst viewType = contrib[Fields.viewType];\n\t\t\tif (viewType) {\n\t\t\t\tresult.push(`onCustomEditor:${viewType}`);\n\t\t\t}\n\t\t}\n\t},\n});\n\nclass CustomEditorsDataRenderer extends Disposable implements IExtensionFeatureTableRenderer {\n\n\treadonly type = 'table';\n\n\tshouldRender(manifest: IExtensionManifest): boolean {\n\t\treturn !!manifest.contributes?.customEditors;\n\t}\n\n\trender(manifest: IExtensionManifest): IRenderedData<ITableData> {\n\t\tconst customEditors = manifest.contributes?.customEditors || [];\n\t\tif (!customEditors.length) {\n\t\t\treturn { data: { headers: [], rows: [] }, dispose: () => { } };\n\t\t}\n\n\t\tconst headers = [\n\t\t\tnls.localize('customEditors view type', \"View Type\"),\n\t\t\tnls.localize('customEditors priority', \"Priority\"),\n\t\t\tnls.localize('customEditors filenamePattern', \"Filename Pattern\"),\n\t\t];\n\n\t\tconst rows: IRowData[][] = customEditors\n\t\t\t.map(customEditor => {\n\t\t\t\treturn [\n\t\t\t\t\tcustomEditor.viewType,\n\t\t\t\t\tcustomEditor.priority ?? '',\n\t\t\t\t\tcoalesce(customEditor.selector.map(x => x.filenamePattern)).join(', ')\n\t\t\t\t];\n\t\t\t});\n\n\t\treturn {\n\t\t\tdata: {\n\t\t\t\theaders,\n\t\t\t\trows\n\t\t\t},\n\t\t\tdispose: () => { }\n\t\t};\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(Extensions.ExtensionFeaturesRegistry).registerExtensionFeature({\n\tid: 'customEditors',\n\tlabel: nls.localize('customEditors', \"Custom Editors\"),\n\taccess: {\n\t\tcanToggle: false\n\t},\n\trenderer: new SyncDescriptor(CustomEditorsDataRenderer),\n});\n"],
  "mappings": "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",
  "names": []
}
