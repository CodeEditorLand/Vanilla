{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/common/inlineChat.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { Extensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { diffInserted, diffRemoved, editorWidgetBackground, editorWidgetBorder, editorWidgetForeground, focusBorder, inputBackground, inputPlaceholderForeground, registerColor, transparent, widgetShadow } from '../../../../platform/theme/common/colorRegistry.js';\n\n// settings\n\nexport const enum InlineChatConfigKeys {\n\tMode = 'inlineChat.mode',\n\tFinishOnType = 'inlineChat.finishOnType',\n\tAcceptedOrDiscardBeforeSave = 'inlineChat.acceptedOrDiscardBeforeSave',\n\tStartWithOverlayWidget = 'inlineChat.startWithOverlayWidget',\n\tZoneToolbar = 'inlineChat.experimental.enableZoneToolbar',\n\tHoldToSpeech = 'inlineChat.holdToSpeech',\n\tAccessibleDiffView = 'inlineChat.accessibleDiffView'\n}\n\nexport const enum EditMode {\n\tLive = 'live',\n\tPreview = 'preview'\n}\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\tid: 'editor',\n\tproperties: {\n\t\t[InlineChatConfigKeys.Mode]: {\n\t\t\tdescription: localize('mode', \"Configure if changes crafted with inline chat are applied directly to the document or are previewed first.\"),\n\t\t\tdefault: EditMode.Live,\n\t\t\ttype: 'string',\n\t\t\tenum: [EditMode.Live, EditMode.Preview],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize('mode.live', \"Changes are applied directly to the document, can be highlighted via inline diffs, and accepted/discarded by hunks. Ending a session will keep the changes.\"),\n\t\t\t\tlocalize('mode.preview', \"Changes are previewed only and need to be accepted via the apply button. Ending a session will discard the changes.\"),\n\t\t\t],\n\t\t\ttags: ['experimental']\n\t\t},\n\t\t[InlineChatConfigKeys.FinishOnType]: {\n\t\t\tdescription: localize('finishOnType', \"Whether to finish an inline chat session when typing outside of changed regions.\"),\n\t\t\tdefault: false,\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t[InlineChatConfigKeys.AcceptedOrDiscardBeforeSave]: {\n\t\t\tdescription: localize('acceptedOrDiscardBeforeSave', \"Whether pending inline chat sessions prevent saving.\"),\n\t\t\tdefault: true,\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t[InlineChatConfigKeys.HoldToSpeech]: {\n\t\t\tdescription: localize('holdToSpeech', \"Whether holding the inline chat keybinding will automatically enable speech recognition.\"),\n\t\t\tdefault: true,\n\t\t\ttype: 'boolean'\n\t\t},\n\t\t[InlineChatConfigKeys.AccessibleDiffView]: {\n\t\t\tdescription: localize('accessibleDiffView', \"Whether the inline chat also renders an accessible diff viewer for its changes.\"),\n\t\t\tdefault: 'auto',\n\t\t\ttype: 'string',\n\t\t\tenum: ['auto', 'on', 'off'],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize('accessibleDiffView.auto', \"The accessible diff viewer is based on screen reader mode being enabled.\"),\n\t\t\t\tlocalize('accessibleDiffView.on', \"The accessible diff viewer is always enabled.\"),\n\t\t\t\tlocalize('accessibleDiffView.off', \"The accessible diff viewer is never enabled.\"),\n\t\t\t],\n\t\t},\n\t\t[InlineChatConfigKeys.ZoneToolbar]: {\n\t\t\tdescription: localize('zoneToolbar', \"Whether to show a toolbar to accept or reject changes in the inline chat changes view.\"),\n\t\t\tdefault: false,\n\t\t\ttype: 'boolean',\n\t\t\ttags: ['experimental']\n\t\t},\n\t}\n});\n\n\nexport const INLINE_CHAT_ID = 'interactiveEditor';\nexport const INTERACTIVE_EDITOR_ACCESSIBILITY_HELP_ID = 'interactiveEditorAccessiblityHelp';\n\n// --- CONTEXT\n\nexport const enum InlineChatResponseType {\n\tNone = 'none',\n\tMessages = 'messages',\n\tMessagesAndEdits = 'messagesAndEdits'\n}\n\nexport const CTX_INLINE_CHAT_HAS_AGENT = new RawContextKey<boolean>('inlineChatHasProvider', false, localize('inlineChatHasProvider', \"Whether a provider for interactive editors exists\"));\nexport const CTX_INLINE_CHAT_VISIBLE = new RawContextKey<boolean>('inlineChatVisible', false, localize('inlineChatVisible', \"Whether the interactive editor input is visible\"));\nexport const CTX_INLINE_CHAT_FOCUSED = new RawContextKey<boolean>('inlineChatFocused', false, localize('inlineChatFocused', \"Whether the interactive editor input is focused\"));\nexport const CTX_INLINE_CHAT_EDITING = new RawContextKey<boolean>('inlineChatEditing', true, localize('inlineChatEditing', \"Whether the user is currently editing or generating code in the inline chat\"));\nexport const CTX_INLINE_CHAT_RESPONSE_FOCUSED = new RawContextKey<boolean>('inlineChatResponseFocused', false, localize('inlineChatResponseFocused', \"Whether the interactive widget's response is focused\"));\nexport const CTX_INLINE_CHAT_EMPTY = new RawContextKey<boolean>('inlineChatEmpty', false, localize('inlineChatEmpty', \"Whether the interactive editor input is empty\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_FIRST = new RawContextKey<boolean>('inlineChatInnerCursorFirst', false, localize('inlineChatInnerCursorFirst', \"Whether the cursor of the iteractive editor input is on the first line\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_LAST = new RawContextKey<boolean>('inlineChatInnerCursorLast', false, localize('inlineChatInnerCursorLast', \"Whether the cursor of the iteractive editor input is on the last line\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_START = new RawContextKey<boolean>('inlineChatInnerCursorStart', false, localize('inlineChatInnerCursorStart', \"Whether the cursor of the iteractive editor input is on the start of the input\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_END = new RawContextKey<boolean>('inlineChatInnerCursorEnd', false, localize('inlineChatInnerCursorEnd', \"Whether the cursor of the iteractive editor input is on the end of the input\"));\nexport const CTX_INLINE_CHAT_OUTER_CURSOR_POSITION = new RawContextKey<'above' | 'below' | ''>('inlineChatOuterCursorPosition', '', localize('inlineChatOuterCursorPosition', \"Whether the cursor of the outer editor is above or below the interactive editor input\"));\nexport const CTX_INLINE_CHAT_HAS_STASHED_SESSION = new RawContextKey<boolean>('inlineChatHasStashedSession', false, localize('inlineChatHasStashedSession', \"Whether interactive editor has kept a session for quick restore\"));\nexport const CTX_INLINE_CHAT_USER_DID_EDIT = new RawContextKey<boolean>('inlineChatUserDidEdit', undefined, localize('inlineChatUserDidEdit', \"Whether the user did changes ontop of the inline chat\"));\nexport const CTX_INLINE_CHAT_DOCUMENT_CHANGED = new RawContextKey<boolean>('inlineChatDocumentChanged', false, localize('inlineChatDocumentChanged', \"Whether the document has changed concurrently\"));\nexport const CTX_INLINE_CHAT_CHANGE_HAS_DIFF = new RawContextKey<boolean>('inlineChatChangeHasDiff', false, localize('inlineChatChangeHasDiff', \"Whether the current change supports showing a diff\"));\nexport const CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF = new RawContextKey<boolean>('inlineChatChangeShowsDiff', false, localize('inlineChatChangeShowsDiff', \"Whether the current change showing a diff\"));\nexport const CTX_INLINE_CHAT_EDIT_MODE = new RawContextKey<EditMode>('config.inlineChat.mode', EditMode.Live);\nexport const CTX_INLINE_CHAT_REQUEST_IN_PROGRESS = new RawContextKey<boolean>('inlineChatRequestInProgress', false, localize('inlineChatRequestInProgress', \"Whether an inline chat request is currently in progress\"));\nexport const CTX_INLINE_CHAT_RESPONSE_TYPE = new RawContextKey<InlineChatResponseType>('inlineChatResponseType', InlineChatResponseType.None, localize('inlineChatResponseTypes', \"What type was the responses have been receieved, nothing yet, just messages, or messaged and local edits\"));\n\n// --- (selected) action identifier\n\nexport const ACTION_ACCEPT_CHANGES = 'inlineChat.acceptChanges';\nexport const ACTION_DISCARD_CHANGES = 'inlineChat.discardHunkChange';\nexport const ACTION_REGENERATE_RESPONSE = 'inlineChat.regenerate';\nexport const ACTION_VIEW_IN_CHAT = 'inlineChat.viewInChat';\nexport const ACTION_TOGGLE_DIFF = 'inlineChat.toggleDiff';\nexport const ACTION_REPORT_ISSUE = 'inlineChat.reportIssue';\n\n// --- menus\n\nexport const MENU_INLINE_CHAT_WIDGET_STATUS = MenuId.for('inlineChatWidget.status');\nexport const MENU_INLINE_CHAT_WIDGET_SECONDARY = MenuId.for('inlineChatWidget.secondary');\nexport const MENU_INLINE_CHAT_ZONE = MenuId.for('inlineChatWidget.changesZone');\n\n// --- colors\n\n\nexport const inlineChatForeground = registerColor('inlineChat.foreground', editorWidgetForeground, localize('inlineChat.foreground', \"Foreground color of the interactive editor widget\"));\nexport const inlineChatBackground = registerColor('inlineChat.background', editorWidgetBackground, localize('inlineChat.background', \"Background color of the interactive editor widget\"));\nexport const inlineChatBorder = registerColor('inlineChat.border', editorWidgetBorder, localize('inlineChat.border', \"Border color of the interactive editor widget\"));\nexport const inlineChatShadow = registerColor('inlineChat.shadow', widgetShadow, localize('inlineChat.shadow', \"Shadow color of the interactive editor widget\"));\nexport const inlineChatInputBorder = registerColor('inlineChatInput.border', editorWidgetBorder, localize('inlineChatInput.border', \"Border color of the interactive editor input\"));\nexport const inlineChatInputFocusBorder = registerColor('inlineChatInput.focusBorder', focusBorder, localize('inlineChatInput.focusBorder', \"Border color of the interactive editor input when focused\"));\nexport const inlineChatInputPlaceholderForeground = registerColor('inlineChatInput.placeholderForeground', inputPlaceholderForeground, localize('inlineChatInput.placeholderForeground', \"Foreground color of the interactive editor input placeholder\"));\nexport const inlineChatInputBackground = registerColor('inlineChatInput.background', inputBackground, localize('inlineChatInput.background', \"Background color of the interactive editor input\"));\n\nexport const inlineChatDiffInserted = registerColor('inlineChatDiff.inserted', transparent(diffInserted, .5), localize('inlineChatDiff.inserted', \"Background color of inserted text in the interactive editor input\"));\nexport const overviewRulerInlineChatDiffInserted = registerColor('editorOverviewRuler.inlineChatInserted', { dark: transparent(diffInserted, 0.6), light: transparent(diffInserted, 0.8), hcDark: transparent(diffInserted, 0.6), hcLight: transparent(diffInserted, 0.8) }, localize('editorOverviewRuler.inlineChatInserted', 'Overview ruler marker color for inline chat inserted content.'));\nexport const minimapInlineChatDiffInserted = registerColor('editorOverviewRuler.inlineChatInserted', { dark: transparent(diffInserted, 0.6), light: transparent(diffInserted, 0.8), hcDark: transparent(diffInserted, 0.6), hcLight: transparent(diffInserted, 0.8) }, localize('editorOverviewRuler.inlineChatInserted', 'Overview ruler marker color for inline chat inserted content.'));\n\nexport const inlineChatDiffRemoved = registerColor('inlineChatDiff.removed', transparent(diffRemoved, .5), localize('inlineChatDiff.removed', \"Background color of removed text in the interactive editor input\"));\nexport const overviewRulerInlineChatDiffRemoved = registerColor('editorOverviewRuler.inlineChatRemoved', { dark: transparent(diffRemoved, 0.6), light: transparent(diffRemoved, 0.8), hcDark: transparent(diffRemoved, 0.6), hcLight: transparent(diffRemoved, 0.8) }, localize('editorOverviewRuler.inlineChatRemoved', 'Overview ruler marker color for inline chat removed content.'));\n"],
  "mappings": "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",
  "names": ["InlineChatConfigKeys", "EditMode", "InlineChatResponseType"]
}
