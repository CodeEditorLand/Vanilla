{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/common/inlineChat.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../nls.js\";\nimport { MenuId } from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tdiffInserted,\n\tdiffRemoved,\n\teditorWidgetBackground,\n\teditorWidgetBorder,\n\teditorWidgetForeground,\n\tfocusBorder,\n\tinputBackground,\n\tinputPlaceholderForeground,\n\tregisterColor,\n\ttransparent,\n\twidgetShadow,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\n\n// settings\n\nexport enum InlineChatConfigKeys {\n\tMode = \"inlineChat.mode\",\n\tFinishOnType = \"inlineChat.finishOnType\",\n\tAcceptedOrDiscardBeforeSave = \"inlineChat.acceptedOrDiscardBeforeSave\",\n\tStartWithOverlayWidget = \"inlineChat.startWithOverlayWidget\",\n\tZoneToolbar = \"inlineChat.experimental.enableZoneToolbar\",\n\tHoldToSpeech = \"inlineChat.holdToSpeech\",\n\tAccessibleDiffView = \"inlineChat.accessibleDiffView\",\n}\n\nexport enum EditMode {\n\tLive = \"live\",\n\tPreview = \"preview\",\n}\n\nRegistry.as<IConfigurationRegistry>(\n\tExtensions.Configuration,\n).registerConfiguration({\n\tid: \"editor\",\n\tproperties: {\n\t\t[InlineChatConfigKeys.Mode]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"mode\",\n\t\t\t\t\"Configure if changes crafted with inline chat are applied directly to the document or are previewed first.\",\n\t\t\t),\n\t\t\tdefault: EditMode.Live,\n\t\t\ttype: \"string\",\n\t\t\tenum: [EditMode.Live, EditMode.Preview],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"mode.live\",\n\t\t\t\t\t\"Changes are applied directly to the document, can be highlighted via inline diffs, and accepted/discarded by hunks. Ending a session will keep the changes.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"mode.preview\",\n\t\t\t\t\t\"Changes are previewed only and need to be accepted via the apply button. Ending a session will discard the changes.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\ttags: [\"experimental\"],\n\t\t},\n\t\t[InlineChatConfigKeys.FinishOnType]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"finishOnType\",\n\t\t\t\t\"Whether to finish an inline chat session when typing outside of changed regions.\",\n\t\t\t),\n\t\t\tdefault: false,\n\t\t\ttype: \"boolean\",\n\t\t},\n\t\t[InlineChatConfigKeys.AcceptedOrDiscardBeforeSave]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"acceptedOrDiscardBeforeSave\",\n\t\t\t\t\"Whether pending inline chat sessions prevent saving.\",\n\t\t\t),\n\t\t\tdefault: true,\n\t\t\ttype: \"boolean\",\n\t\t},\n\t\t[InlineChatConfigKeys.HoldToSpeech]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"holdToSpeech\",\n\t\t\t\t\"Whether holding the inline chat keybinding will automatically enable speech recognition.\",\n\t\t\t),\n\t\t\tdefault: true,\n\t\t\ttype: \"boolean\",\n\t\t},\n\t\t[InlineChatConfigKeys.AccessibleDiffView]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"accessibleDiffView\",\n\t\t\t\t\"Whether the inline chat also renders an accessible diff viewer for its changes.\",\n\t\t\t),\n\t\t\tdefault: \"auto\",\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"auto\", \"on\", \"off\"],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"accessibleDiffView.auto\",\n\t\t\t\t\t\"The accessible diff viewer is based on screen reader mode being enabled.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"accessibleDiffView.on\",\n\t\t\t\t\t\"The accessible diff viewer is always enabled.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"accessibleDiffView.off\",\n\t\t\t\t\t\"The accessible diff viewer is never enabled.\",\n\t\t\t\t),\n\t\t\t],\n\t\t},\n\t\t[InlineChatConfigKeys.ZoneToolbar]: {\n\t\t\tdescription: localize(\n\t\t\t\t\"zoneToolbar\",\n\t\t\t\t\"Whether to show a toolbar to accept or reject changes in the inline chat changes view.\",\n\t\t\t),\n\t\t\tdefault: false,\n\t\t\ttype: \"boolean\",\n\t\t\ttags: [\"experimental\"],\n\t\t},\n\t},\n});\n\nexport const INLINE_CHAT_ID = \"interactiveEditor\";\nexport const INTERACTIVE_EDITOR_ACCESSIBILITY_HELP_ID =\n\t\"interactiveEditorAccessiblityHelp\";\n\n// --- CONTEXT\n\nexport enum InlineChatResponseType {\n\tNone = \"none\",\n\tMessages = \"messages\",\n\tMessagesAndEdits = \"messagesAndEdits\",\n}\n\nexport const CTX_INLINE_CHAT_HAS_AGENT = new RawContextKey<boolean>(\n\t\"inlineChatHasProvider\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatHasProvider\",\n\t\t\"Whether a provider for interactive editors exists\",\n\t),\n);\nexport const CTX_INLINE_CHAT_VISIBLE = new RawContextKey<boolean>(\n\t\"inlineChatVisible\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatVisible\",\n\t\t\"Whether the interactive editor input is visible\",\n\t),\n);\nexport const CTX_INLINE_CHAT_FOCUSED = new RawContextKey<boolean>(\n\t\"inlineChatFocused\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatFocused\",\n\t\t\"Whether the interactive editor input is focused\",\n\t),\n);\nexport const CTX_INLINE_CHAT_EDITING = new RawContextKey<boolean>(\n\t\"inlineChatEditing\",\n\ttrue,\n\tlocalize(\n\t\t\"inlineChatEditing\",\n\t\t\"Whether the user is currently editing or generating code in the inline chat\",\n\t),\n);\nexport const CTX_INLINE_CHAT_RESPONSE_FOCUSED = new RawContextKey<boolean>(\n\t\"inlineChatResponseFocused\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatResponseFocused\",\n\t\t\"Whether the interactive widget's response is focused\",\n\t),\n);\nexport const CTX_INLINE_CHAT_EMPTY = new RawContextKey<boolean>(\n\t\"inlineChatEmpty\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatEmpty\",\n\t\t\"Whether the interactive editor input is empty\",\n\t),\n);\nexport const CTX_INLINE_CHAT_INNER_CURSOR_FIRST = new RawContextKey<boolean>(\n\t\"inlineChatInnerCursorFirst\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatInnerCursorFirst\",\n\t\t\"Whether the cursor of the iteractive editor input is on the first line\",\n\t),\n);\nexport const CTX_INLINE_CHAT_INNER_CURSOR_LAST = new RawContextKey<boolean>(\n\t\"inlineChatInnerCursorLast\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatInnerCursorLast\",\n\t\t\"Whether the cursor of the iteractive editor input is on the last line\",\n\t),\n);\nexport const CTX_INLINE_CHAT_INNER_CURSOR_START = new RawContextKey<boolean>(\n\t\"inlineChatInnerCursorStart\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatInnerCursorStart\",\n\t\t\"Whether the cursor of the iteractive editor input is on the start of the input\",\n\t),\n);\nexport const CTX_INLINE_CHAT_INNER_CURSOR_END = new RawContextKey<boolean>(\n\t\"inlineChatInnerCursorEnd\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatInnerCursorEnd\",\n\t\t\"Whether the cursor of the iteractive editor input is on the end of the input\",\n\t),\n);\nexport const CTX_INLINE_CHAT_OUTER_CURSOR_POSITION = new RawContextKey<\n\t\"above\" | \"below\" | \"\"\n>(\n\t\"inlineChatOuterCursorPosition\",\n\t\"\",\n\tlocalize(\n\t\t\"inlineChatOuterCursorPosition\",\n\t\t\"Whether the cursor of the outer editor is above or below the interactive editor input\",\n\t),\n);\nexport const CTX_INLINE_CHAT_HAS_STASHED_SESSION = new RawContextKey<boolean>(\n\t\"inlineChatHasStashedSession\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatHasStashedSession\",\n\t\t\"Whether interactive editor has kept a session for quick restore\",\n\t),\n);\nexport const CTX_INLINE_CHAT_USER_DID_EDIT = new RawContextKey<boolean>(\n\t\"inlineChatUserDidEdit\",\n\tundefined,\n\tlocalize(\n\t\t\"inlineChatUserDidEdit\",\n\t\t\"Whether the user did changes ontop of the inline chat\",\n\t),\n);\nexport const CTX_INLINE_CHAT_DOCUMENT_CHANGED = new RawContextKey<boolean>(\n\t\"inlineChatDocumentChanged\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatDocumentChanged\",\n\t\t\"Whether the document has changed concurrently\",\n\t),\n);\nexport const CTX_INLINE_CHAT_CHANGE_HAS_DIFF = new RawContextKey<boolean>(\n\t\"inlineChatChangeHasDiff\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatChangeHasDiff\",\n\t\t\"Whether the current change supports showing a diff\",\n\t),\n);\nexport const CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF = new RawContextKey<boolean>(\n\t\"inlineChatChangeShowsDiff\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatChangeShowsDiff\",\n\t\t\"Whether the current change showing a diff\",\n\t),\n);\nexport const CTX_INLINE_CHAT_EDIT_MODE = new RawContextKey<EditMode>(\n\t\"config.inlineChat.mode\",\n\tEditMode.Live,\n);\nexport const CTX_INLINE_CHAT_REQUEST_IN_PROGRESS = new RawContextKey<boolean>(\n\t\"inlineChatRequestInProgress\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatRequestInProgress\",\n\t\t\"Whether an inline chat request is currently in progress\",\n\t),\n);\nexport const CTX_INLINE_CHAT_RESPONSE_TYPE =\n\tnew RawContextKey<InlineChatResponseType>(\n\t\t\"inlineChatResponseType\",\n\t\tInlineChatResponseType.None,\n\t\tlocalize(\n\t\t\t\"inlineChatResponseTypes\",\n\t\t\t\"What type was the responses have been receieved, nothing yet, just messages, or messaged and local edits\",\n\t\t),\n\t);\n\n// --- (selected) action identifier\n\nexport const ACTION_ACCEPT_CHANGES = \"inlineChat.acceptChanges\";\nexport const ACTION_DISCARD_CHANGES = \"inlineChat.discardHunkChange\";\nexport const ACTION_REGENERATE_RESPONSE = \"inlineChat.regenerate\";\nexport const ACTION_VIEW_IN_CHAT = \"inlineChat.viewInChat\";\nexport const ACTION_TOGGLE_DIFF = \"inlineChat.toggleDiff\";\nexport const ACTION_REPORT_ISSUE = \"inlineChat.reportIssue\";\n\n// --- menus\n\nexport const MENU_INLINE_CHAT_WIDGET_STATUS = MenuId.for(\n\t\"inlineChatWidget.status\",\n);\nexport const MENU_INLINE_CHAT_WIDGET_SECONDARY = MenuId.for(\n\t\"inlineChatWidget.secondary\",\n);\nexport const MENU_INLINE_CHAT_ZONE = MenuId.for(\"inlineChatWidget.changesZone\");\n\n// --- colors\n\nexport const inlineChatForeground = registerColor(\n\t\"inlineChat.foreground\",\n\teditorWidgetForeground,\n\tlocalize(\n\t\t\"inlineChat.foreground\",\n\t\t\"Foreground color of the interactive editor widget\",\n\t),\n);\nexport const inlineChatBackground = registerColor(\n\t\"inlineChat.background\",\n\teditorWidgetBackground,\n\tlocalize(\n\t\t\"inlineChat.background\",\n\t\t\"Background color of the interactive editor widget\",\n\t),\n);\nexport const inlineChatBorder = registerColor(\n\t\"inlineChat.border\",\n\teditorWidgetBorder,\n\tlocalize(\n\t\t\"inlineChat.border\",\n\t\t\"Border color of the interactive editor widget\",\n\t),\n);\nexport const inlineChatShadow = registerColor(\n\t\"inlineChat.shadow\",\n\twidgetShadow,\n\tlocalize(\n\t\t\"inlineChat.shadow\",\n\t\t\"Shadow color of the interactive editor widget\",\n\t),\n);\nexport const inlineChatInputBorder = registerColor(\n\t\"inlineChatInput.border\",\n\teditorWidgetBorder,\n\tlocalize(\n\t\t\"inlineChatInput.border\",\n\t\t\"Border color of the interactive editor input\",\n\t),\n);\nexport const inlineChatInputFocusBorder = registerColor(\n\t\"inlineChatInput.focusBorder\",\n\tfocusBorder,\n\tlocalize(\n\t\t\"inlineChatInput.focusBorder\",\n\t\t\"Border color of the interactive editor input when focused\",\n\t),\n);\nexport const inlineChatInputPlaceholderForeground = registerColor(\n\t\"inlineChatInput.placeholderForeground\",\n\tinputPlaceholderForeground,\n\tlocalize(\n\t\t\"inlineChatInput.placeholderForeground\",\n\t\t\"Foreground color of the interactive editor input placeholder\",\n\t),\n);\nexport const inlineChatInputBackground = registerColor(\n\t\"inlineChatInput.background\",\n\tinputBackground,\n\tlocalize(\n\t\t\"inlineChatInput.background\",\n\t\t\"Background color of the interactive editor input\",\n\t),\n);\n\nexport const inlineChatDiffInserted = registerColor(\n\t\"inlineChatDiff.inserted\",\n\ttransparent(diffInserted, 0.5),\n\tlocalize(\n\t\t\"inlineChatDiff.inserted\",\n\t\t\"Background color of inserted text in the interactive editor input\",\n\t),\n);\nexport const overviewRulerInlineChatDiffInserted = registerColor(\n\t\"editorOverviewRuler.inlineChatInserted\",\n\t{\n\t\tdark: transparent(diffInserted, 0.6),\n\t\tlight: transparent(diffInserted, 0.8),\n\t\thcDark: transparent(diffInserted, 0.6),\n\t\thcLight: transparent(diffInserted, 0.8),\n\t},\n\tlocalize(\n\t\t\"editorOverviewRuler.inlineChatInserted\",\n\t\t\"Overview ruler marker color for inline chat inserted content.\",\n\t),\n);\nexport const minimapInlineChatDiffInserted = registerColor(\n\t\"editorOverviewRuler.inlineChatInserted\",\n\t{\n\t\tdark: transparent(diffInserted, 0.6),\n\t\tlight: transparent(diffInserted, 0.8),\n\t\thcDark: transparent(diffInserted, 0.6),\n\t\thcLight: transparent(diffInserted, 0.8),\n\t},\n\tlocalize(\n\t\t\"editorOverviewRuler.inlineChatInserted\",\n\t\t\"Overview ruler marker color for inline chat inserted content.\",\n\t),\n);\n\nexport const inlineChatDiffRemoved = registerColor(\n\t\"inlineChatDiff.removed\",\n\ttransparent(diffRemoved, 0.5),\n\tlocalize(\n\t\t\"inlineChatDiff.removed\",\n\t\t\"Background color of removed text in the interactive editor input\",\n\t),\n);\nexport const overviewRulerInlineChatDiffRemoved = registerColor(\n\t\"editorOverviewRuler.inlineChatRemoved\",\n\t{\n\t\tdark: transparent(diffRemoved, 0.6),\n\t\tlight: transparent(diffRemoved, 0.8),\n\t\thcDark: transparent(diffRemoved, 0.6),\n\t\thcLight: transparent(diffRemoved, 0.8),\n\t},\n\tlocalize(\n\t\t\"editorOverviewRuler.inlineChatRemoved\",\n\t\t\"Overview ruler marker color for inline chat removed content.\",\n\t),\n);\n"],
  "mappings": "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",
  "names": ["InlineChatConfigKeys", "EditMode", "InlineChatResponseType"]
}
