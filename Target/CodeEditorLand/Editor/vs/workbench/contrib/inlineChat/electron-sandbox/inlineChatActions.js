import{disposableTimeout as s}from"../../../../../vs/base/common/async.js";import{KeyCode as a,KeyMod as C}from"../../../../../vs/base/common/keyCodes.js";import"../../../../../vs/editor/browser/editorBrowser.js";import{EditorContextKeys as h}from"../../../../../vs/editor/common/editorContextKeys.js";import{localize2 as f}from"../../../../../vs/nls.js";import"../../../../../vs/platform/actions/common/actions.js";import{ICommandService as S}from"../../../../../vs/platform/commands/common/commands.js";import{IConfigurationService as I}from"../../../../../vs/platform/configuration/common/configuration.js";import{ContextKeyExpr as u}from"../../../../../vs/platform/contextkey/common/contextkey.js";import"../../../../../vs/platform/instantiation/common/instantiation.js";import{IKeybindingService as g}from"../../../../../vs/platform/keybinding/common/keybinding.js";import{KeybindingWeight as v}from"../../../../../vs/platform/keybinding/common/keybindingsRegistry.js";import"../../../../../vs/workbench/contrib/chat/browser/actions/chatExecuteActions.js";import{StartVoiceChatAction as y,StopListeningAction as b,VOICE_KEY_HOLD_THRESHOLD as x}from"../../../../../vs/workbench/contrib/chat/electron-sandbox/actions/voiceChatActions.js";import{AbstractInlineChatAction as A,setHoldForSpeech as E}from"../../../../../vs/workbench/contrib/inlineChat/browser/inlineChatActions.js";import"../../../../../vs/workbench/contrib/inlineChat/browser/inlineChatController.js";import{CTX_INLINE_CHAT_VISIBLE as H,InlineChatConfigKeys as K}from"../../../../../vs/workbench/contrib/inlineChat/common/inlineChat.js";import{HasSpeechProvider as T,ISpeechService as _}from"../../../../../vs/workbench/contrib/speech/common/speechService.js";class $ extends A{constructor(){super({id:"inlineChat.holdForSpeech",precondition:u.and(T,H),title:f("holdForSpeech","Hold for Speech"),keybinding:{when:h.textInputFocus,weight:v.WorkbenchContrib,primary:C.CtrlCmd|a.KeyI}})}runInlineChatCommand(o,t,i,...r){d(o,t,this)}}function d(e,o,t){const i=e.get(I),r=e.get(_),l=e.get(g),n=e.get(S);if(!i.getValue(K.HoldToSpeech||!r.hasSpeechProvider))return;const c=l.enableKeybindingHoldMode(t.desc.id);if(!c)return;let m=!1;const p=s(()=>{n.executeCommand(y.ID,{voice:{disableTimeout:!0}}),m=!0},x);c.finally(()=>{m&&n.executeCommand(b.ID).finally(()=>{o.acceptInput()}),p.dispose()})}E(d);export{$ as HoldToSpeak};
