{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/electron-sandbox/inlineChatActions.ts"],
  "sourcesContent": ["import { disposableTimeout } from \"../../../../base/common/async.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport { localize2 } from \"../../../../nls.js\";\nimport type { Action2 } from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport type { IChatExecuteActionContext } from \"../../chat/browser/actions/chatExecuteActions.js\";\nimport {\n\tStartVoiceChatAction,\n\tStopListeningAction,\n\tVOICE_KEY_HOLD_THRESHOLD,\n} from \"../../chat/electron-sandbox/actions/voiceChatActions.js\";\nimport {\n\tHasSpeechProvider,\n\tISpeechService,\n} from \"../../speech/common/speechService.js\";\nimport {\n\tAbstractInlineChatAction,\n\tsetHoldForSpeech,\n} from \"../browser/inlineChatActions.js\";\nimport type { InlineChatController } from \"../browser/inlineChatController.js\";\nimport {\n\tCTX_INLINE_CHAT_VISIBLE,\n\tInlineChatConfigKeys,\n} from \"../common/inlineChat.js\";\n\nexport class HoldToSpeak extends AbstractInlineChatAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"inlineChat.holdForSpeech\",\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tHasSpeechProvider,\n\t\t\t\tCTX_INLINE_CHAT_VISIBLE,\n\t\t\t),\n\t\t\ttitle: localize2(\"holdForSpeech\", \"Hold for Speech\"),\n\t\t\tkeybinding: {\n\t\t\t\twhen: EditorContextKeys.textInputFocus,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyI,\n\t\t\t},\n\t\t});\n\t}\n\n\toverride runInlineChatCommand(\n\t\taccessor: ServicesAccessor,\n\t\tctrl: InlineChatController,\n\t\teditor: ICodeEditor,\n\t\t...args: any[]\n\t): void {\n\t\tholdForSpeech(accessor, ctrl, this);\n\t}\n}\n\nfunction holdForSpeech(\n\taccessor: ServicesAccessor,\n\tctrl: InlineChatController,\n\taction: Action2,\n): void {\n\tconst configService = accessor.get(IConfigurationService);\n\tconst speechService = accessor.get(ISpeechService);\n\tconst keybindingService = accessor.get(IKeybindingService);\n\tconst commandService = accessor.get(ICommandService);\n\n\t// enabled or possible?\n\tif (\n\t\t!configService.getValue<boolean>(\n\t\t\tInlineChatConfigKeys.HoldToSpeech ||\n\t\t\t\t!speechService.hasSpeechProvider,\n\t\t)\n\t) {\n\t\treturn;\n\t}\n\n\tconst holdMode = keybindingService.enableKeybindingHoldMode(action.desc.id);\n\tif (!holdMode) {\n\t\treturn;\n\t}\n\tlet listening = false;\n\tconst handle = disposableTimeout(() => {\n\t\t// start VOICE input\n\t\tcommandService.executeCommand(StartVoiceChatAction.ID, {\n\t\t\tvoice: { disableTimeout: true },\n\t\t} satisfies IChatExecuteActionContext);\n\t\tlistening = true;\n\t}, VOICE_KEY_HOLD_THRESHOLD);\n\n\tholdMode.finally(() => {\n\t\tif (listening) {\n\t\t\tcommandService\n\t\t\t\t.executeCommand(StopListeningAction.ID)\n\t\t\t\t.finally(() => {\n\t\t\t\t\tctrl.acceptInput();\n\t\t\t\t});\n\t\t}\n\t\thandle.dispose();\n\t});\n}\n\n// make this accessible to the chat actions from the browser layer\nsetHoldForSpeech(holdForSpeech);\n"],
  "mappings": ";;AAAA,SAAS,yBAAyB;AAKlC,SAAS,SAAS,cAAc;AAEhC,SAAS,yBAAyB;AAClC,SAAS,iBAAiB;AAE1B,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAE/B,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AAEjC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEA,MAAM,oBAAoB,yBAAyB;AAAA,EApC1D,OAoC0D;AAAA;AAAA;AAAA,EACzD,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,cAAc,eAAe;AAAA,QAC5B;AAAA,QACA;AAAA,MACD;AAAA,MACA,OAAO,UAAU,iBAAiB,iBAAiB;AAAA,MACnD,YAAY;AAAA,QACX,MAAM,kBAAkB;AAAA,QACxB,QAAQ,iBAAiB;AAAA,QACzB,SAAS,OAAO,UAAU,QAAQ;AAAA,MACnC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAES,qBACR,UACA,MACA,WACG,MACI;AACP,kBAAc,UAAU,MAAM,IAAI;AAAA,EACnC;AACD;AAEA,SAAS,cACR,UACA,MACA,QACO;AACP,QAAM,gBAAgB,SAAS,IAAI,qBAAqB;AACxD,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,QAAM,iBAAiB,SAAS,IAAI,eAAe;AAGnD,MACC,CAAC,cAAc;AAAA,IACd,qBAAqB,gBACpB,CAAC,cAAc;AAAA,EACjB,GACC;AACD;AAAA,EACD;AAEA,QAAM,WAAW,kBAAkB,yBAAyB,OAAO,KAAK,EAAE;AAC1E,MAAI,CAAC,UAAU;AACd;AAAA,EACD;AACA,MAAI,YAAY;AAChB,QAAM,SAAS,kBAAkB,MAAM;AAEtC,mBAAe,eAAe,qBAAqB,IAAI;AAAA,MACtD,OAAO,EAAE,gBAAgB,KAAK;AAAA,IAC/B,CAAqC;AACrC,gBAAY;AAAA,EACb,GAAG,wBAAwB;AAE3B,WAAS,QAAQ,MAAM;AACtB,QAAI,WAAW;AACd,qBACE,eAAe,oBAAoB,EAAE,EACrC,QAAQ,MAAM;AACd,aAAK,YAAY;AAAA,MAClB,CAAC;AAAA,IACH;AACA,WAAO,QAAQ;AAAA,EAChB,CAAC;AACF;AA3CS;AA8CT,iBAAiB,aAAa;",
  "names": []
}
