{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/test/browser/testWorkerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { URI } from '../../../../../base/common/uri.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IModelService } from '../../../../../editor/common/services/model.js';\nimport { assertType } from '../../../../../base/common/types.js';\nimport { DiffAlgorithmName, IEditorWorkerService, ILineChange } from '../../../../../editor/common/services/editorWorker.js';\nimport { IDocumentDiff, IDocumentDiffProviderOptions } from '../../../../../editor/common/diff/documentDiffProvider.js';\nimport { BaseEditorSimpleWorker } from '../../../../../editor/common/services/editorSimpleWorker.js';\nimport { LineRange } from '../../../../../editor/common/core/lineRange.js';\nimport { MovedText } from '../../../../../editor/common/diff/linesDiffComputer.js';\nimport { LineRangeMapping, DetailedLineRangeMapping, RangeMapping } from '../../../../../editor/common/diff/rangeMapping.js';\nimport { TextEdit } from '../../../../../editor/common/languages.js';\n\n\nexport class TestWorkerService extends mock<IEditorWorkerService>() {\n\n\tprivate readonly _worker = new BaseEditorSimpleWorker();\n\n\tconstructor(@IModelService private readonly _modelService: IModelService) {\n\t\tsuper();\n\t}\n\n\toverride async computeMoreMinimalEdits(resource: URI, edits: TextEdit[] | null | undefined, pretty?: boolean | undefined): Promise<TextEdit[] | undefined> {\n\t\treturn undefined;\n\t}\n\n\toverride async computeDiff(original: URI, modified: URI, options: IDocumentDiffProviderOptions, algorithm: DiffAlgorithmName): Promise<IDocumentDiff | null> {\n\n\t\tconst originalModel = this._modelService.getModel(original);\n\t\tconst modifiedModel = this._modelService.getModel(modified);\n\n\t\tassertType(originalModel);\n\t\tassertType(modifiedModel);\n\n\t\tthis._worker.$acceptNewModel({\n\t\t\turl: originalModel.uri.toString(),\n\t\t\tversionId: originalModel.getVersionId(),\n\t\t\tlines: originalModel.getLinesContent(),\n\t\t\tEOL: originalModel.getEOL(),\n\t\t});\n\n\t\tthis._worker.$acceptNewModel({\n\t\t\turl: modifiedModel.uri.toString(),\n\t\t\tversionId: modifiedModel.getVersionId(),\n\t\t\tlines: modifiedModel.getLinesContent(),\n\t\t\tEOL: modifiedModel.getEOL(),\n\t\t});\n\n\t\tconst result = await this._worker.$computeDiff(originalModel.uri.toString(), modifiedModel.uri.toString(), options, algorithm);\n\t\tif (!result) {\n\t\t\treturn result;\n\t\t}\n\t\t// Convert from space efficient JSON data to rich objects.\n\t\tconst diff: IDocumentDiff = {\n\t\t\tidentical: result.identical,\n\t\t\tquitEarly: result.quitEarly,\n\t\t\tchanges: toLineRangeMappings(result.changes),\n\t\t\tmoves: result.moves.map(m => new MovedText(\n\t\t\t\tnew LineRangeMapping(new LineRange(m[0], m[1]), new LineRange(m[2], m[3])),\n\t\t\t\ttoLineRangeMappings(m[4])\n\t\t\t))\n\t\t};\n\t\treturn diff;\n\n\t\tfunction toLineRangeMappings(changes: readonly ILineChange[]): readonly DetailedLineRangeMapping[] {\n\t\t\treturn changes.map(\n\t\t\t\t(c) => new DetailedLineRangeMapping(\n\t\t\t\t\tnew LineRange(c[0], c[1]),\n\t\t\t\t\tnew LineRange(c[2], c[3]),\n\t\t\t\t\tc[4]?.map(\n\t\t\t\t\t\t(c) => new RangeMapping(\n\t\t\t\t\t\t\tnew Range(c[0], c[1], c[2], c[3]),\n\t\t\t\t\t\t\tnew Range(c[4], c[5], c[6], c[7])\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAIA,SAAS,WAAW;AACpB,SAAS,YAAY;AACrB,SAAS,aAAa;AACtB,SAAS,qBAAqB;AAC9B,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB,sBAAsB,mBAAmB;AACrE,SAAS,eAAe,oCAAoC;AAC5D,SAAS,8BAA8B;AACvC,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB,0BAA0B,oBAAoB;AACzE,SAAS,gBAAgB;AAGlB,IAAM,oBAAN,cAAgC,KAA2B,EAAE;AAAA,EAInE,YAA4C,eAA8B;AACzE,UAAM;AADqC;AAAA,EAE5C;AAAA,EAxBD,OAkBoE;AAAA;AAAA;AAAA,EAElD,UAAU,IAAI,uBAAuB;AAAA,EAMtD,MAAe,wBAAwB,UAAe,OAAsC,QAA+D;AAC1J,WAAO;AAAA,EACR;AAAA,EAEA,MAAe,YAAY,UAAe,UAAe,SAAuC,WAA6D;AAE5J,UAAM,gBAAgB,KAAK,cAAc,SAAS,QAAQ;AAC1D,UAAM,gBAAgB,KAAK,cAAc,SAAS,QAAQ;AAE1D,eAAW,aAAa;AACxB,eAAW,aAAa;AAExB,SAAK,QAAQ,gBAAgB;AAAA,MAC5B,KAAK,cAAc,IAAI,SAAS;AAAA,MAChC,WAAW,cAAc,aAAa;AAAA,MACtC,OAAO,cAAc,gBAAgB;AAAA,MACrC,KAAK,cAAc,OAAO;AAAA,IAC3B,CAAC;AAED,SAAK,QAAQ,gBAAgB;AAAA,MAC5B,KAAK,cAAc,IAAI,SAAS;AAAA,MAChC,WAAW,cAAc,aAAa;AAAA,MACtC,OAAO,cAAc,gBAAgB;AAAA,MACrC,KAAK,cAAc,OAAO;AAAA,IAC3B,CAAC;AAED,UAAM,SAAS,MAAM,KAAK,QAAQ,aAAa,cAAc,IAAI,SAAS,GAAG,cAAc,IAAI,SAAS,GAAG,SAAS,SAAS;AAC7H,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,IACR;AAEA,UAAM,OAAsB;AAAA,MAC3B,WAAW,OAAO;AAAA,MAClB,WAAW,OAAO;AAAA,MAClB,SAAS,oBAAoB,OAAO,OAAO;AAAA,MAC3C,OAAO,OAAO,MAAM,IAAI,OAAK,IAAI;AAAA,QAChC,IAAI,iBAAiB,IAAI,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAAA,QACzE,oBAAoB,EAAE,CAAC,CAAC;AAAA,MACzB,CAAC;AAAA,IACF;AACA,WAAO;AAEP,aAAS,oBAAoB,SAAsE;AAClG,aAAO,QAAQ;AAAA,QACd,CAAC,MAAM,IAAI;AAAA,UACV,IAAI,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,UACxB,IAAI,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,UACxB,EAAE,CAAC,GAAG;AAAA,YACL,CAACA,OAAM,IAAI;AAAA,cACV,IAAI,MAAMA,GAAE,CAAC,GAAGA,GAAE,CAAC,GAAGA,GAAE,CAAC,GAAGA,GAAE,CAAC,CAAC;AAAA,cAChC,IAAI,MAAMA,GAAE,CAAC,GAAGA,GAAE,CAAC,GAAGA,GAAE,CAAC,GAAGA,GAAE,CAAC,CAAC;AAAA,YACjC;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAbS;AAAA,EAcV;AACD;AAjEa,oBAAN;AAAA,EAIO;AAAA,GAJD;",
  "names": ["c"]
}
