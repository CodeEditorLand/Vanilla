{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/test/browser/inlineChatStrategies.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { IntervalTimer } from '../../../../../base/common/async.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { asProgressiveEdit } from '../../browser/utils.js';\nimport assert from 'assert';\n\n\nsuite('AsyncEdit', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('asProgressiveEdit', async () => {\n\t\tconst interval = new IntervalTimer();\n\t\tconst edit = {\n\t\t\trange: { startLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 1 },\n\t\t\ttext: 'Hello, world!'\n\t\t};\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tconst result = asProgressiveEdit(interval, edit, 5, cts.token);\n\n\t\t// Verify the range\n\t\tassert.deepStrictEqual(result.range, edit.range);\n\n\t\tconst iter = result.newText[Symbol.asyncIterator]();\n\n\t\t// Verify the newText\n\t\tconst a = await iter.next();\n\t\tassert.strictEqual(a.value, 'Hello,');\n\t\tassert.strictEqual(a.done, false);\n\n\t\t// Verify the next word\n\t\tconst b = await iter.next();\n\t\tassert.strictEqual(b.value, ' world!');\n\t\tassert.strictEqual(b.done, false);\n\n\t\tconst c = await iter.next();\n\t\tassert.strictEqual(c.value, undefined);\n\t\tassert.strictEqual(c.done, true);\n\n\t\tcts.dispose();\n\t});\n\n\ttest('asProgressiveEdit - cancellation', async () => {\n\t\tconst interval = new IntervalTimer();\n\t\tconst edit = {\n\t\t\trange: { startLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 1 },\n\t\t\ttext: 'Hello, world!'\n\t\t};\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tconst result = asProgressiveEdit(interval, edit, 5, cts.token);\n\n\t\t// Verify the range\n\t\tassert.deepStrictEqual(result.range, edit.range);\n\n\t\tconst iter = result.newText[Symbol.asyncIterator]();\n\n\t\t// Verify the newText\n\t\tconst a = await iter.next();\n\t\tassert.strictEqual(a.value, 'Hello,');\n\t\tassert.strictEqual(a.done, false);\n\n\t\tcts.dispose(true);\n\n\t\tconst c = await iter.next();\n\t\tassert.strictEqual(c.value, undefined);\n\t\tassert.strictEqual(c.done, true);\n\t});\n});\n"],
  "mappings": "AAKA,SAAS,+BAA+B;AACxC,SAAS,qBAAqB;AAC9B,SAAS,+CAA+C;AACxD,SAAS,yBAAyB;AAClC,OAAO,YAAY;AAGnB,MAAM,aAAa,MAAM;AAExB,0CAAwC;AAExC,OAAK,qBAAqB,YAAY;AACrC,UAAM,WAAW,IAAI,cAAc;AACnC,UAAM,OAAO;AAAA,MACZ,OAAO,EAAE,iBAAiB,GAAG,aAAa,GAAG,eAAe,GAAG,WAAW,EAAE;AAAA,MAC5E,MAAM;AAAA,IACP;AAEA,UAAM,MAAM,IAAI,wBAAwB;AACxC,UAAM,SAAS,kBAAkB,UAAU,MAAM,GAAG,IAAI,KAAK;AAG7D,WAAO,gBAAgB,OAAO,OAAO,KAAK,KAAK;AAE/C,UAAM,OAAO,OAAO,QAAQ,OAAO,aAAa,EAAE;AAGlD,UAAM,IAAI,MAAM,KAAK,KAAK;AAC1B,WAAO,YAAY,EAAE,OAAO,QAAQ;AACpC,WAAO,YAAY,EAAE,MAAM,KAAK;AAGhC,UAAM,IAAI,MAAM,KAAK,KAAK;AAC1B,WAAO,YAAY,EAAE,OAAO,SAAS;AACrC,WAAO,YAAY,EAAE,MAAM,KAAK;AAEhC,UAAM,IAAI,MAAM,KAAK,KAAK;AAC1B,WAAO,YAAY,EAAE,OAAO,MAAS;AACrC,WAAO,YAAY,EAAE,MAAM,IAAI;AAE/B,QAAI,QAAQ;AAAA,EACb,CAAC;AAED,OAAK,oCAAoC,YAAY;AACpD,UAAM,WAAW,IAAI,cAAc;AACnC,UAAM,OAAO;AAAA,MACZ,OAAO,EAAE,iBAAiB,GAAG,aAAa,GAAG,eAAe,GAAG,WAAW,EAAE;AAAA,MAC5E,MAAM;AAAA,IACP;AAEA,UAAM,MAAM,IAAI,wBAAwB;AACxC,UAAM,SAAS,kBAAkB,UAAU,MAAM,GAAG,IAAI,KAAK;AAG7D,WAAO,gBAAgB,OAAO,OAAO,KAAK,KAAK;AAE/C,UAAM,OAAO,OAAO,QAAQ,OAAO,aAAa,EAAE;AAGlD,UAAM,IAAI,MAAM,KAAK,KAAK;AAC1B,WAAO,YAAY,EAAE,OAAO,QAAQ;AACpC,WAAO,YAAY,EAAE,MAAM,KAAK;AAEhC,QAAI,QAAQ,IAAI;AAEhB,UAAM,IAAI,MAAM,KAAK,KAAK;AAC1B,WAAO,YAAY,EAAE,OAAO,MAAS;AACrC,WAAO,YAAY,EAAE,MAAM,IAAI;AAAA,EAChC,CAAC;AACF,CAAC;",
  "names": []
}
