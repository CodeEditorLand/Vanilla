import t from"assert";import{equals as $}from"../../../../../base/common/arrays.js";import{DeferredPromise as O,raceCancellation as D,timeout as T}from"../../../../../base/common/async.js";import{Emitter as j,Event as A}from"../../../../../base/common/event.js";import{DisposableStore as z}from"../../../../../base/common/lifecycle.js";import{mock as h}from"../../../../../base/test/common/mock.js";import{runWithFakedTimers as P}from"../../../../../base/test/common/timeTravelScheduler.js";import"../../../../../editor/browser/editorBrowser.js";import{IDiffProviderFactoryService as X}from"../../../../../editor/browser/widget/diffEditor/diffProviderFactoryService.js";import{EditOperation as Y}from"../../../../../editor/common/core/editOperation.js";import{Range as m}from"../../../../../editor/common/core/range.js";import{EndOfLineSequence as B}from"../../../../../editor/common/model.js";import{IEditorWorkerService as J}from"../../../../../editor/common/services/editorWorker.js";import{IModelService as Z}from"../../../../../editor/common/services/model.js";import{TestDiffProviderFactoryService as ee}from"../../../../../editor/test/browser/diff/testDiffProviderFactoryService.js";import{instantiateTestCodeEditor as te}from"../../../../../editor/test/browser/testCodeEditor.js";import{IConfigurationService as q}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as ne}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{IContextKeyService as U}from"../../../../../platform/contextkey/common/contextkey.js";import{SyncDescriptor as p}from"../../../../../platform/instantiation/common/descriptors.js";import{ServiceCollection as ie}from"../../../../../platform/instantiation/common/serviceCollection.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MockContextKeyService as ae}from"../../../../../platform/keybinding/test/common/mockKeybindingService.js";import{IEditorProgressService as oe}from"../../../../../platform/progress/common/progress.js";import{IViewDescriptorService as re}from"../../../../common/views.js";import"../../../accessibility/browser/accessibilityConfiguration.js";import{IAccessibleViewService as se}from"../../../../../platform/accessibility/browser/accessibleView.js";import{IChatAccessibilityService as de,IChatWidgetService as ce}from"../../../chat/browser/chat.js";import{ChatAgentLocation as _,ChatAgentService as ue,IChatAgentNameService as le,IChatAgentService as V}from"../../../chat/common/chatAgents.js";import"../../../chat/common/chatViewModel.js";import{InlineChatController as Ee,State as a}from"../../browser/inlineChatController.js";import"../../browser/inlineChatSession.js";import{CTX_INLINE_CHAT_USER_DID_EDIT as Q,EditMode as M,InlineChatConfigKeys as F}from"../../common/inlineChat.js";import{TestViewsService as ge,workbenchInstantiationService as me}from"../../../../test/browser/workbenchTestServices.js";import{IExtensionService as Se,nullExtensionDescription as we}from"../../../../services/extensions/common/extensions.js";import{IChatService as b}from"../../../chat/common/chatService.js";import{ChatService as Ie}from"../../../chat/common/chatServiceImpl.js";import{IChatVariablesService as fe}from"../../../chat/common/chatVariables.js";import{ILogService as pe,NullLogService as he}from"../../../../../platform/log/common/log.js";import{ITelemetryService as ve}from"../../../../../platform/telemetry/common/telemetry.js";import{NullTelemetryService as Te}from"../../../../../platform/telemetry/common/telemetryUtils.js";import{TestContextService as Ce,TestExtensionService as ye}from"../../../../test/common/workbenchTestServices.js";import{IWorkspaceContextService as _e}from"../../../../../platform/workspace/common/workspace.js";import{IViewsService as Ne}from"../../../../services/views/common/viewsService.js";import{ChatSlashCommandService as Ae,IChatSlashCommandService as ke}from"../../../chat/common/chatSlashCommands.js";import{ChatWidgetService as Re}from"../../../chat/browser/chatWidget.js";import{ChatWidgetHistoryService as We,IChatWidgetHistoryService as qe}from"../../../chat/common/chatWidgetHistoryService.js";import{IHoverService as Ue}from"../../../../../platform/hover/browser/hover.js";import{NullHoverService as xe}from"../../../../../platform/hover/test/browser/nullHoverService.js";import{ChatVariablesService as He}from"../../../chat/browser/chatVariables.js";import{ICommandService as Oe}from"../../../../../platform/commands/common/commands.js";import{TestCommandService as De}from"../../../../../editor/test/browser/editorTestServices.js";import{INotebookEditorService as Pe}from"../../../notebook/browser/services/notebookEditorService.js";import{RerunAction as x}from"../../browser/inlineChatActions.js";import{CancellationToken as H}from"../../../../../base/common/cancellation.js";import{assertType as k}from"../../../../../base/common/types.js";import{IWorkbenchAssignmentService as Ve}from"../../../../services/assignment/common/assignmentService.js";import{NullWorkbenchAssignmentService as Qe}from"../../../../services/assignment/test/common/nullAssignmentService.js";import{IInlineChatSavingService as Me}from"../../browser/inlineChatSavingService.js";import{IInlineChatSessionService as L}from"../../browser/inlineChatSessionService.js";import{InlineChatSessionServiceImpl as Fe}from"../../browser/inlineChatSessionServiceImpl.js";import{TestWorkerService as be}from"./testWorkerService.js";suite("InteractiveChatController",function(){const I={extensionId:we.identifier,publisherDisplayName:"",extensionDisplayName:"",extensionPublisherId:"",name:"testEditorAgent",isDefault:!0,locations:[_.Editor],metadata:{},slashCommands:[],disambiguation:[]};class d extends Ee{static INIT_SEQUENCE=[a.CREATE_SESSION,a.INIT_UI,a.WAIT_FOR_INPUT];static INIT_SEQUENCE_AUTO_SEND=[...this.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT];onDidChangeState=this._onDidEnterState.event;states=[];awaitStates(n){const s=[];return new Promise((c,l)=>{const E=this.onDidChangeState(S=>{s.push(S),$(n,s)&&(E.dispose(),c(void 0))});setTimeout(()=>{E.dispose(),c(`[${n.join(",")}] <> [${s.join(",")}]`)},1e3)})}}const g=new z;let C,r,i,e,R,y,w,N,u,W;setup(function(){const o=new ie([q,new ne],[fe,new p(He)],[pe,new he],[ve,Te],[Ue,xe],[Se,new ye],[U,new ae],[Ne,new class extends ge{async openView(n,s){return{widget:W??null}}}],[_e,new Ce],[qe,new p(We)],[ce,new p(Re)],[ke,new p(Ae)],[b,new p(Ie)],[le,new class extends h(){getAgentNameRestriction(n){return!1}}],[J,new p(be)],[U,R],[V,new p(ue)],[X,new p(ee)],[L,new p(Fe)],[Oe,new p(De)],[Me,new class extends h(){markChanged(n){}}],[oe,new class extends h(){show(n,s){return{total(){},worked(c){},done(){}}}}],[de,new class extends h(){acceptResponse(n,s){}acceptRequest(){return-1}}],[se,new class extends h(){getOpenAriaHint(n){return null}}],[q,C],[re,new class extends h(){onDidChangeLocation=A.None}],[Pe,new class extends h(){listNotebookEditors(){return[]}}],[Ve,new Qe]);u=g.add(g.add(me(void 0,g)).createChild(o)),C=u.get(q),C.setUserConfiguration("chat",{editor:{fontSize:14,fontFamily:"default"}}),C.setUserConfiguration("inlineChat",{mode:"livePreview"}),C.setUserConfiguration("editor",{}),R=u.get(U),y=u.get(b),w=u.get(V),N=g.add(u.get(L)),i=g.add(u.get(Z).createModel(`Hello
World
Hello Again
Hello World
`,null)),i.setEOL(B.LF),r=g.add(te(u,i)),g.add(w.registerDynamicAgent({id:"testEditorAgent",...I},{async invoke(n,s,c,l){return s({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:n.message}]}),{}}}))}),teardown(function(){g.clear(),e?.dispose()}),test("creation, not showing anything",function(){e=u.createInstance(d,r),t.ok(e),t.strictEqual(e.getWidgetPosition(),void 0)}),test("run (show/hide)",async function(){e=u.createInstance(d,r);const o=e.awaitStates(d.INIT_SEQUENCE_AUTO_SEND),n=e.run({message:"Hello",autoSend:!0});t.strictEqual(await o,void 0),t.ok(e.getWidgetPosition()!==void 0),await e.cancelSession(),await n,t.ok(e.getWidgetPosition()===void 0)}),test("wholeRange does not expand to whole lines, editor selection default",async function(){r.setSelection(new m(1,1,1,3)),e=u.createInstance(d,r),e.run({}),await A.toPromise(A.filter(e.onDidChangeState,n=>n===a.WAIT_FOR_INPUT));const o=N.getSession(r,r.getModel().uri);t.ok(o),t.deepStrictEqual(o.wholeRange.value,new m(1,1,1,3)),await e.cancelSession()}),test("typing outside of wholeRange finishes session",async function(){C.setUserConfiguration(F.FinishOnType,!0),e=u.createInstance(d,r);const o=e.awaitStates(d.INIT_SEQUENCE_AUTO_SEND),n=e.run({message:"Hello",autoSend:!0});t.strictEqual(await o,void 0);const s=N.getSession(r,r.getModel().uri);t.ok(s),t.deepStrictEqual(s.wholeRange.value,new m(1,1,1,10)),r.setSelection(new m(2,1,2,1)),r.trigger("test","type",{text:"a"}),t.strictEqual(await e.awaitStates([a.ACCEPT]),void 0),await n}),test("'whole range' isn't updated for edits outside whole range #4346",async function(){r.setSelection(new m(3,1,3,3)),g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(c,l,E,S){return l({kind:"textEdit",uri:r.getModel().uri,edits:[{range:new m(1,1,1,1),text:`${c.message}
${c.message}`}]}),{}}})),e=u.createInstance(d,r);const o=e.awaitStates(d.INIT_SEQUENCE),n=e.run({message:"GENGEN",autoSend:!1});t.strictEqual(await o,void 0);const s=N.getSession(r,r.getModel().uri);t.ok(s),t.deepStrictEqual(s.wholeRange.value,new m(3,1,3,3)),e.chatWidget.setInput("GENGEN"),e.acceptInput(),t.strictEqual(await e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),void 0),t.deepStrictEqual(s.wholeRange.value,new m(1,1,4,3)),await e.cancelSession(),await n}),test("Stuck inline chat widget #211",async function(){g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(s,c,l,E){return new Promise(()=>{})}})),e=u.createInstance(d,r);const o=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST]),n=e.run({message:"Hello",autoSend:!0});t.strictEqual(await o,void 0),e.acceptSession(),await n,t.strictEqual(e.getWidgetPosition(),void 0)}),test("[Bug] Inline Chat's streaming pushed broken iterations to the undo stack #2403",async function(){g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(c,l,E,S){return l({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:`hEllo1
`}]}),l({kind:"textEdit",uri:i.uri,edits:[{range:new m(2,1,2,1),text:`hEllo2
`}]}),l({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1e3,1),text:`Hello1
Hello2
`}]}),{}}}));const o=r.getModel().getValue();e=u.createInstance(d,r);const n=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),s=e.run({message:"Hello",autoSend:!0});t.strictEqual(await n,void 0),e.acceptSession(),await s,t.strictEqual(r.getModel().getValue(),`Hello1
Hello2
`),r.getModel().undo(),t.strictEqual(r.getModel().getValue(),o)}),test.skip("UI is streaming edits minutes after the response is finished #3345",async function(){return C.setUserConfiguration(F.Mode,M.Live),P({maxTaskCount:Number.MAX_SAFE_INTEGER},async()=>{g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(s,c,l,E){const S="${CSI}#a\n${CSI}#b\n${CSI}#c\n";throw await T(10),c({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:S}]}),await T(10),c({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:S.repeat(1e3)+"DONE"}]}),new Error("Too long")}})),e=u.createInstance(d,r);const o=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),n=e.run({message:"Hello",autoSend:!0});t.strictEqual(await o,void 0),t.ok(!r.getModel().getValue().includes("DONE")),await T(10),t.ok(!r.getModel().getValue().includes("DONE")),await e.cancelSession(),await n})}),test("escape doesn't remove code added from inline editor chat #3523 1/2",async function(){e=u.createInstance(d,r);const o=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),n=e.run({message:"GENERATED",autoSend:!0});t.strictEqual(await o,void 0),t.ok(i.getValue().includes("GENERATED")),t.strictEqual(R.getContextKeyValue(Q.key),void 0),e.cancelSession(),await n,t.ok(!i.getValue().includes("GENERATED"))}),test("escape doesn't remove code added from inline editor chat #3523, 2/2",async function(){e=u.createInstance(d,r);const o=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),n=e.run({message:"GENERATED",autoSend:!0});t.strictEqual(await o,void 0),t.ok(i.getValue().includes("GENERATED")),r.executeEdits("test",[Y.insert(i.getFullModelRange().getEndPosition(),"MANUAL")]),t.strictEqual(R.getContextKeyValue(Q.key),!0),e.finishExistingSession(),await n,t.ok(i.getValue().includes("GENERATED")),t.ok(i.getValue().includes("MANUAL"))}),test("re-run should discard pending edits",async function(){let o=1;g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(E,S,f,v){return S({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:E.message+o++}]}),{}}})),e=u.createInstance(d,r);const n=new x;i.setValue("");const s=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),c=e.run({message:"PROMPT_",autoSend:!0});t.strictEqual(await s,void 0),t.strictEqual(i.getValue(),"PROMPT_1");const l=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);await u.invokeFunction(n.runInlineChatCommand,e,r),t.strictEqual(await l,void 0),t.strictEqual(i.getValue(),"PROMPT_2"),e.finishExistingSession(),await c}),test("Retry undoes all changes, not just those from the request#5736",async function(){const o=["eins-","zwei-","drei-"];g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(S,f,v,G){return f({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:o.shift()??""}]}),{}}})),e=u.createInstance(d,r);const n=new x;i.setValue("");const s=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),c=e.run({message:"1",autoSend:!0});t.strictEqual(await s,void 0),t.strictEqual(i.getValue(),"eins-");const l=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);e.chatWidget.setInput("1"),await e.acceptInput(),t.strictEqual(await l,void 0),t.strictEqual(i.getValue(),"zwei-eins-");const E=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);await u.invokeFunction(n.runInlineChatCommand,e,r),t.strictEqual(await E,void 0),t.strictEqual(i.getValue(),"drei-eins-"),e.finishExistingSession(),await c}),test("moving inline chat to another model undoes changes",async function(){const o=[`eins
`,`zwei
`];g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(l,E,S,f){return E({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:o.shift()??""}]}),{}}})),e=u.createInstance(d,r);const n=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);e.run({message:"1",autoSend:!0}),t.strictEqual(await n,void 0),t.strictEqual(i.getValue(),`eins
Hello
World
Hello Again
Hello World
`);const s=y.startSession(_.Editor,H.None);g.add(s),W=new class extends h(){get viewModel(){return{model:s}}focusLastMessage(){}};const c=e.joinCurrentRun();await e.viewInChat(),t.strictEqual(i.getValue(),`Hello
World
Hello Again
Hello World
`),await c}),test("moving inline chat to another model undoes changes (2 requests)",async function(){const o=[`eins
`,`zwei
`];g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(E,S,f,v){return S({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:o.shift()??""}]}),{}}})),e=u.createInstance(d,r);const n=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);e.run({message:"1",autoSend:!0}),t.strictEqual(await n,void 0),t.strictEqual(i.getValue(),`eins
Hello
World
Hello Again
Hello World
`);const s=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);e.chatWidget.setInput("1"),await e.acceptInput(),t.strictEqual(await s,void 0),t.strictEqual(i.getValue(),`zwei
eins
Hello
World
Hello Again
Hello World
`);const c=y.startSession(_.Editor,H.None);g.add(c),W=new class extends h(){get viewModel(){return{model:c}}focusLastMessage(){}};const l=e.joinCurrentRun();await e.viewInChat(),t.strictEqual(i.getValue(),`Hello
World
Hello Again
Hello World
`),await l}),test('Clicking "re-run without /doc" while a request is in progress closes the widget #5997',async function(){i.setValue("");let o=0;const n=[],s=new j;g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(f,v,G,K){return queueMicrotask(()=>s.fire()),n.push(f.enableCommandDetection),v({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:f.message+o++}]}),o===1?await D(new Promise(()=>{}),K):await T(10),{}}})),e=u.createInstance(d,r);const c=A.toPromise(s.event);e.run({message:"Hello-",autoSend:!0}),await c;const l=e.chatWidget.viewModel?.model.getRequests().at(-1);k(l);const E=A.toPromise(s.event),S=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);y.resendRequest(l,{noCommandDetection:!0,attempt:l.attempt+1,location:_.Editor}),await E,t.strictEqual(await S,void 0),t.deepStrictEqual(n,[!0,!1]),t.strictEqual(i.getValue(),"Hello-1")}),test("Re-run without after request is done",async function(){i.setValue("");let o=0;const n=[];g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(E,S,f,v){return n.push(E.enableCommandDetection),S({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:E.message+o++}]}),{}}})),e=u.createInstance(d,r);const s=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);e.run({message:"Hello-",autoSend:!0}),t.strictEqual(await s,void 0);const c=e.chatWidget.viewModel?.model.getRequests().at(-1);k(c);const l=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);y.resendRequest(c,{noCommandDetection:!0,attempt:c.attempt+1,location:_.Editor}),t.strictEqual(await l,void 0),t.deepStrictEqual(n,[!0,!1]),t.strictEqual(i.getValue(),"Hello-1")}),test("Inline: Pressing Rerun request while the response streams breaks the response #5442",async function(){i.setValue(`two
one
`);const o=[],n=new O;g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(E,S,f,v){return o.push(E.attempt),S({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:`TRY:${E.attempt}
`}]}),await D(n.p,v),n.complete(),await T(10),{}}})),e=u.createInstance(d,r);const s=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST]);e.run({message:"Hello-",autoSend:!0}),t.strictEqual(await s,void 0),await T(10),t.deepStrictEqual(o,[0]);const c=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),l=new x;await u.invokeFunction(l.runInlineChatCommand,e,r),t.strictEqual(await c,void 0),t.deepStrictEqual(o,[0,1]),t.strictEqual(i.getValue(),`TRY:1
two
one
`)}),test("Stopping/cancelling a request should NOT undo its changes",async function(){i.setValue("World");const o=new O;let n;g.add(w.registerDynamicAgent({id:"testEditorAgent2",...I},{async invoke(E,S,f,v){return n=S,await o.p,{}}})),e=u.createInstance(d,r);const s=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST]);e.run({message:"Hello",autoSend:!0}),await T(10),t.strictEqual(await s,void 0),k(n);const c=new Promise(E=>i.onDidChangeContent(()=>E()));n({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:"Hello-Hello"}]}),await c,t.strictEqual(i.getValue(),"HelloWorld");const l=e.awaitStates([a.WAIT_FOR_INPUT]);y.cancelCurrentRequestForSession(e.chatWidget.viewModel.model.sessionId),t.strictEqual(await l,void 0),t.strictEqual(i.getValue(),"HelloWorld")}),test("Apply Edits from existing session w/ edits",async function(){i.setValue("");const o=await N.createSession(r,{editMode:M.Live},H.None);k(o),await y.sendRequest(o.chatModel.sessionId,"Existing",{location:_.Editor}),t.strictEqual(o.chatModel.requestInProgress,!0);const n=o.chatModel.lastRequest?.response;k(n),await new Promise(c=>{n.isComplete&&c(void 0);const l=n.onDidChange(()=>{n.isComplete&&(l.dispose(),c(void 0))})}),e=u.createInstance(d,r);const s=e.awaitStates([...d.INIT_SEQUENCE]);e.run({existingSession:o}),t.strictEqual(await s,void 0),t.strictEqual(i.getValue(),"Existing")}),test("Undo on error (2 rounds)",async function(){return P({},async()=>{g.add(w.registerDynamicAgent({id:"testEditorAgent",...I},{async invoke(c,l,E,S){return l({kind:"textEdit",uri:i.uri,edits:[{range:new m(1,1,1,1),text:c.message}]}),c.message==="two"?(await T(100),{errorDetails:{message:"FAILED"}}):{}}})),i.setValue(""),e=u.createInstance(d,r);const o=e.awaitStates([...d.INIT_SEQUENCE,a.SHOW_REQUEST,a.WAIT_FOR_INPUT]);e.run({autoSend:!0,message:"one"}),t.strictEqual(await o,void 0),t.strictEqual(i.getValue(),"one");const n=e.awaitStates([a.SHOW_REQUEST,a.WAIT_FOR_INPUT]),s=new Set;g.add(i.onDidChangeContent(()=>s.add(i.getValue()))),e.chatWidget.acceptInput("two"),t.strictEqual(await n,void 0),t.strictEqual(i.getValue(),"one"),t.ok(s.has("twoone"))})})});
