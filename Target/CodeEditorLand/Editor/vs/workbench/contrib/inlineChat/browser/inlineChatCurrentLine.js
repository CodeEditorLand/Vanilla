var g=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var C=(a,n,o,e)=>{for(var t=e>1?void 0:e?E(n,o):n,i=a.length-1,r;i>=0;i--)(r=a[i])&&(t=(e?r(n,o,t):r(t))||t);return e&&t&&g(n,o,t),t},h=(a,n)=>(o,e)=>n(o,e,a);import{DisposableStore as u,MutableDisposable as I}from"../../../../base/common/lifecycle.js";import{EditorAction2 as _}from"../../../../editor/browser/editorExtensions.js";import{EditOperation as x}from"../../../../editor/common/core/editOperation.js";import{Position as L}from"../../../../editor/common/core/position.js";import{Range as A}from"../../../../editor/common/core/range.js";import{CursorChangeReason as N}from"../../../../editor/common/cursorEvents.js";import{EditorContextKeys as b}from"../../../../editor/common/editorContextKeys.js";import{localize as y,localize2 as v}from"../../../../nls.js";import{ContextKeyExpr as S,IContextKeyService as w,RawContextKey as M}from"../../../../platform/contextkey/common/contextkey.js";import{IChatAgentService as O}from"../../chat/common/chatAgents.js";import{CTX_INLINE_CHAT_HAS_AGENT as T,CTX_INLINE_CHAT_VISIBLE as D}from"../common/inlineChat.js";import{AbstractInlineChatAction as W}from"./inlineChatActions.js";import{InlineChatController as j,State as H}from"./inlineChatController.js";const K=new M("inlineChatExpansion",!1,y("inlineChatExpansion","Whether the inline chat expansion is enabled when at the end of a just-typed line"));let d=class{static Id="editor.inlineChatExpansion";_store=new u;_editorListener=this._store.add(new I);_ctxInlineChatExpansion;constructor(n,o,e){this._ctxInlineChatExpansion=K.bindTo(o);const t=()=>{n.hasModel()&&e.getAgents().length>0?this._install(n):this._uninstall()};this._store.add(e.onDidChangeAgents(t)),this._store.add(n.onDidChangeModel(t)),t()}dispose(){this._ctxInlineChatExpansion.reset(),this._store.dispose()}_install(n){const o=new u;this._editorListener.value=o;const e=n.getModel(),t=[];o.add(n.onDidChangeCursorPosition(i=>{let r=!1;if(i.reason===N.NotSet){const s=n.getPosition(),c=e.getOffsetAt(s),l=e.getLineLength(s.lineNumber);e.getLineFirstNonWhitespaceColumn(s.lineNumber)!==0&&s.column>l&&t.includes(c)&&(r=!0)}t.length=0,this._ctxInlineChatExpansion.set(r)})),o.add(n.onDidChangeModelContent(i=>{t.length=0;for(const r of i.changes){const s=r.rangeOffset+r.text.length;t.push(s)}queueMicrotask(()=>{t.length>0&&this._ctxInlineChatExpansion.set(!1)})}))}_uninstall(){this._editorListener.clear()}};d=C([h(1,w),h(2,O)],d);class Z extends _{constructor(){super({id:"inlineChat.startWithCurrentLine",category:W.category,title:v("startWithCurrentLine","Start in Editor with Current Line"),f1:!0,precondition:S.and(D.negate(),T,b.writable)})}async runEditorCommand(n,o){const e=j.get(o);if(!e||!o.hasModel())return;const t=o.getModel(),i=o.getSelection().positionLineNumber,r=t.getLineContent(i),s=t.getLineFirstNonWhitespaceColumn(i),c=t.getLineMaxColumn(i);let l=[];t.pushEditOperations(null,[x.replace(new A(i,s,i,c),"")],m=>(l=m,null));let p;const f=e.onDidEnterState(m=>p=m);try{await e.run({autoSend:!0,message:r.trim(),position:new L(i,s)})}finally{f.dispose()}p===H.CANCEL&&t.pushEditOperations(null,l,()=>null)}}export{K as CTX_INLINE_CHAT_EXPANSION,d as InlineChatExansionContextKey,Z as InlineChatExpandLineAction};
