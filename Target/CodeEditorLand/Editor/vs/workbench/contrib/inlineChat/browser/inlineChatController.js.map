{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as aria from '../../../../base/browser/ui/aria/aria.js';\nimport { Barrier, DeferredPromise, Queue } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Lazy } from '../../../../base/common/lazy.js';\nimport { DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { MovingAverage } from '../../../../base/common/numbers.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ICodeEditor, isCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IPosition, Position } from '../../../../editor/common/core/position.js';\nimport { IRange, Range } from '../../../../editor/common/core/range.js';\nimport { ISelection, Selection, SelectionDirection } from '../../../../editor/common/core/selection.js';\nimport { IEditorContribution } from '../../../../editor/common/editorCommon.js';\nimport { TextEdit } from '../../../../editor/common/languages.js';\nimport { IValidEditOperation } from '../../../../editor/common/model.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { DefaultModelSHA1Computer } from '../../../../editor/common/services/modelService.js';\nimport { InlineCompletionsController } from '../../../../editor/contrib/inlineCompletions/browser/controller/inlineCompletionsController.js';\nimport { MessageController } from '../../../../editor/contrib/message/browser/messageController.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { showChatView } from '../../chat/browser/chat.js';\nimport { IChatWidgetLocationOptions } from '../../chat/browser/chatWidget.js';\nimport { ChatAgentLocation } from '../../chat/common/chatAgents.js';\nimport { ChatModel, ChatRequestRemovalReason, IChatRequestModel, IChatTextEditGroup, IChatTextEditGroupState, IResponse } from '../../chat/common/chatModel.js';\nimport { IChatService } from '../../chat/common/chatService.js';\nimport { HunkInformation, HunkState, Session, StashedSession } from './inlineChatSession.js';\nimport { InlineChatError } from './inlineChatSessionServiceImpl.js';\nimport { EditModeStrategy, HunkAction, IEditObserver, LiveStrategy, PreviewStrategy, ProgressingEditsOptions } from './inlineChatStrategies.js';\nimport { CTX_INLINE_CHAT_EDITING, CTX_INLINE_CHAT_REQUEST_IN_PROGRESS, CTX_INLINE_CHAT_RESPONSE_TYPE, CTX_INLINE_CHAT_USER_DID_EDIT, CTX_INLINE_CHAT_VISIBLE, EditMode, INLINE_CHAT_ID, InlineChatConfigKeys, InlineChatResponseType } from '../common/inlineChat.js';\nimport { INotebookEditorService } from '../../notebook/browser/services/notebookEditorService.js';\nimport { IEditorService, SIDE_GROUP } from '../../../services/editor/common/editorService.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { IInlineChatSavingService } from './inlineChatSavingService.js';\nimport { IInlineChatSessionService } from './inlineChatSessionService.js';\nimport { InlineChatZoneWidget } from './inlineChatZoneWidget.js';\nimport { CONTEXT_RESPONSE, CONTEXT_RESPONSE_ERROR } from '../../chat/common/chatContextKeys.js';\n\nexport const enum State {\n\tCREATE_SESSION = 'CREATE_SESSION',\n\tINIT_UI = 'INIT_UI',\n\tWAIT_FOR_INPUT = 'WAIT_FOR_INPUT',\n\tSHOW_REQUEST = 'SHOW_REQUEST',\n\tPAUSE = 'PAUSE',\n\tCANCEL = 'CANCEL',\n\tACCEPT = 'DONE',\n}\n\nconst enum Message {\n\tNONE = 0,\n\tACCEPT_SESSION = 1 << 0,\n\tCANCEL_SESSION = 1 << 1,\n\tPAUSE_SESSION = 1 << 2,\n\tCANCEL_REQUEST = 1 << 3,\n\tCANCEL_INPUT = 1 << 4,\n\tACCEPT_INPUT = 1 << 5,\n}\n\nexport abstract class InlineChatRunOptions {\n\tinitialSelection?: ISelection;\n\tinitialRange?: IRange;\n\tmessage?: string;\n\tautoSend?: boolean;\n\texistingSession?: Session;\n\tisUnstashed?: boolean;\n\tposition?: IPosition;\n\twithIntentDetection?: boolean;\n\theadless?: boolean;\n\n\tstatic isInlineChatRunOptions(options: any): options is InlineChatRunOptions {\n\t\tconst { initialSelection, initialRange, message, autoSend, position, existingSession } = <InlineChatRunOptions>options;\n\t\tif (\n\t\t\ttypeof message !== 'undefined' && typeof message !== 'string'\n\t\t\t|| typeof autoSend !== 'undefined' && typeof autoSend !== 'boolean'\n\t\t\t|| typeof initialRange !== 'undefined' && !Range.isIRange(initialRange)\n\t\t\t|| typeof initialSelection !== 'undefined' && !Selection.isISelection(initialSelection)\n\t\t\t|| typeof position !== 'undefined' && !Position.isIPosition(position)\n\t\t\t|| typeof existingSession !== 'undefined' && !(existingSession instanceof Session)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class InlineChatController implements IEditorContribution {\n\n\tstatic get(editor: ICodeEditor) {\n\t\treturn editor.getContribution<InlineChatController>(INLINE_CHAT_ID);\n\t}\n\n\tprivate _isDisposed: boolean = false;\n\tprivate readonly _store = new DisposableStore();\n\n\tprivate readonly _ui: Lazy<InlineChatZoneWidget>;\n\n\tprivate readonly _ctxVisible: IContextKey<boolean>;\n\tprivate readonly _ctxEditing: IContextKey<boolean>;\n\tprivate readonly _ctxResponseType: IContextKey<undefined | InlineChatResponseType>;\n\tprivate readonly _ctxUserDidEdit: IContextKey<boolean>;\n\tprivate readonly _ctxRequestInProgress: IContextKey<boolean>;\n\n\tprivate readonly _ctxResponse: IContextKey<boolean>;\n\n\tprivate readonly _messages = this._store.add(new Emitter<Message>());\n\tprotected readonly _onDidEnterState = this._store.add(new Emitter<State>());\n\treadonly onDidEnterState = this._onDidEnterState.event;\n\n\tprivate readonly _onWillStartSession = this._store.add(new Emitter<void>());\n\treadonly onWillStartSession = this._onWillStartSession.event;\n\n\tget chatWidget() {\n\t\treturn this._ui.value.widget.chatWidget;\n\t}\n\n\tprivate readonly _sessionStore = this._store.add(new DisposableStore());\n\tprivate readonly _stashedSession = this._store.add(new MutableDisposable<StashedSession>());\n\tprivate _session?: Session;\n\tprivate _strategy?: EditModeStrategy;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@IInlineChatSessionService private readonly _inlineChatSessionService: IInlineChatSessionService,\n\t\t@IInlineChatSavingService private readonly _inlineChatSavingService: IInlineChatSavingService,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@INotebookEditorService notebookEditorService: INotebookEditorService,\n\t) {\n\t\tthis._ctxVisible = CTX_INLINE_CHAT_VISIBLE.bindTo(contextKeyService);\n\t\tthis._ctxEditing = CTX_INLINE_CHAT_EDITING.bindTo(contextKeyService);\n\t\tthis._ctxUserDidEdit = CTX_INLINE_CHAT_USER_DID_EDIT.bindTo(contextKeyService);\n\t\tthis._ctxResponseType = CTX_INLINE_CHAT_RESPONSE_TYPE.bindTo(contextKeyService);\n\t\tthis._ctxRequestInProgress = CTX_INLINE_CHAT_REQUEST_IN_PROGRESS.bindTo(contextKeyService);\n\n\t\tthis._ctxResponse = CONTEXT_RESPONSE.bindTo(contextKeyService);\n\t\tCONTEXT_RESPONSE_ERROR.bindTo(contextKeyService);\n\n\t\tthis._ui = new Lazy(() => {\n\n\t\t\tconst location: IChatWidgetLocationOptions = {\n\t\t\t\tlocation: ChatAgentLocation.Editor,\n\t\t\t\tresolveData: () => {\n\t\t\t\t\tassertType(this._editor.hasModel());\n\t\t\t\t\tassertType(this._session);\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: ChatAgentLocation.Editor,\n\t\t\t\t\t\tselection: this._editor.getSelection(),\n\t\t\t\t\t\tdocument: this._session.textModelN.uri,\n\t\t\t\t\t\twholeRange: this._session?.wholeRange.trackedInitialRange,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// inline chat in notebooks\n\t\t\t// check if this editor is part of a notebook editor\n\t\t\t// and iff so, use the notebook location but keep the resolveData\n\t\t\t// talk about editor data\n\t\t\tfor (const notebookEditor of notebookEditorService.listNotebookEditors()) {\n\t\t\t\tfor (const [, codeEditor] of notebookEditor.codeEditors) {\n\t\t\t\t\tif (codeEditor === this._editor) {\n\t\t\t\t\t\tlocation.location = ChatAgentLocation.Notebook;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this._store.add(_instaService.createInstance(InlineChatZoneWidget, location, this._editor));\n\t\t});\n\n\t\tthis._store.add(this._editor.onDidChangeModel(async e => {\n\t\t\tif (this._session || !e.newModelUrl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst existingSession = this._inlineChatSessionService.getSession(this._editor, e.newModelUrl);\n\t\t\tif (!existingSession) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._log('session RESUMING after model change', e);\n\t\t\tawait this.run({ existingSession });\n\t\t}));\n\n\t\tthis._store.add(this._inlineChatSessionService.onDidEndSession(e => {\n\t\t\tif (e.session === this._session && e.endedByExternalCause) {\n\t\t\t\tthis._log('session ENDED by external cause');\n\t\t\t\tthis._session = undefined;\n\t\t\t\tthis._strategy?.cancel();\n\t\t\t\tthis._resetWidget();\n\t\t\t\tthis.cancelSession();\n\t\t\t}\n\t\t}));\n\n\t\tthis._store.add(this._inlineChatSessionService.onDidMoveSession(async e => {\n\t\t\tif (e.editor === this._editor) {\n\t\t\t\tthis._log('session RESUMING after move', e);\n\t\t\t\tawait this.run({ existingSession: e.session });\n\t\t\t}\n\t\t}));\n\n\t\tthis._log(`NEW controller`);\n\t}\n\n\tdispose(): void {\n\t\tif (this._currentRun) {\n\t\t\tthis._messages.fire(this._session?.chatModel.hasRequests\n\t\t\t\t? Message.PAUSE_SESSION\n\t\t\t\t: Message.CANCEL_SESSION);\n\t\t}\n\t\tthis._store.dispose();\n\t\tthis._isDisposed = true;\n\t\tthis._log('DISPOSED controller');\n\t}\n\n\tprivate _log(message: string | Error, ...more: any[]): void {\n\t\tif (message instanceof Error) {\n\t\t\tthis._logService.error(message, ...more);\n\t\t} else {\n\t\t\tthis._logService.trace(`[IE] (editor:${this._editor.getId()}) ${message}`, ...more);\n\t\t}\n\t}\n\n\tgetMessage(): string | undefined {\n\t\treturn this._ui.value.widget.responseContent;\n\t}\n\n\tgetId(): string {\n\t\treturn INLINE_CHAT_ID;\n\t}\n\n\tprivate _getMode(): EditMode {\n\t\treturn this._configurationService.getValue<EditMode>(InlineChatConfigKeys.Mode);\n\t}\n\n\tgetWidgetPosition(): Position | undefined {\n\t\treturn this._ui.value.position;\n\t}\n\n\tprivate _currentRun?: Promise<void>;\n\n\tasync run(options: InlineChatRunOptions | undefined = {}): Promise<void> {\n\t\ttry {\n\t\t\tthis.finishExistingSession();\n\t\t\tif (this._currentRun) {\n\t\t\t\tawait this._currentRun;\n\t\t\t}\n\t\t\tif (options.initialSelection) {\n\t\t\t\tthis._editor.setSelection(options.initialSelection);\n\t\t\t}\n\t\t\tthis._stashedSession.clear();\n\t\t\tthis._onWillStartSession.fire();\n\t\t\tthis._currentRun = this._nextState(State.CREATE_SESSION, options);\n\t\t\tawait this._currentRun;\n\n\t\t} catch (error) {\n\t\t\t// this should not happen but when it does make sure to tear down the UI and everything\n\t\t\tthis._log('error during run', error);\n\t\t\tonUnexpectedError(error);\n\t\t\tif (this._session) {\n\t\t\t\tthis._inlineChatSessionService.releaseSession(this._session);\n\t\t\t}\n\t\t\tthis[State.PAUSE]();\n\n\t\t} finally {\n\t\t\tthis._currentRun = undefined;\n\t\t}\n\t}\n\n\t// ---- state machine\n\n\tprotected async _nextState(state: State, options: InlineChatRunOptions): Promise<void> {\n\t\tlet nextState: State | void = state;\n\t\twhile (nextState && !this._isDisposed) {\n\t\t\tthis._log('setState to ', nextState);\n\t\t\tconst p: State | Promise<State> | Promise<void> = this[nextState](options);\n\t\t\tthis._onDidEnterState.fire(nextState);\n\t\t\tnextState = await p;\n\t\t}\n\t}\n\n\tprivate async [State.CREATE_SESSION](options: InlineChatRunOptions): Promise<State.CANCEL | State.INIT_UI> {\n\t\tassertType(this._session === undefined);\n\t\tassertType(this._editor.hasModel());\n\n\t\tlet session: Session | undefined = options.existingSession;\n\n\t\tlet initPosition: Position | undefined;\n\t\tif (options.position) {\n\t\t\tinitPosition = Position.lift(options.position).delta(-1);\n\t\t\tdelete options.position;\n\t\t}\n\n\t\tconst widgetPosition = this._showWidget(options.headless ?? session?.headless, true, initPosition);\n\n\t\t// this._updatePlaceholder();\n\t\tlet errorMessage = localize('create.fail', \"Failed to start editor chat\");\n\n\t\tif (!session) {\n\t\t\tconst createSessionCts = new CancellationTokenSource();\n\t\t\tconst msgListener = Event.once(this._messages.event)(m => {\n\t\t\t\tthis._log('state=_createSession) message received', m);\n\t\t\t\tif (m === Message.ACCEPT_INPUT) {\n\t\t\t\t\t// user accepted the input before having a session\n\t\t\t\t\toptions.autoSend = true;\n\t\t\t\t\tthis._ui.value.widget.updateInfo(localize('welcome.2', \"Getting ready...\"));\n\t\t\t\t} else {\n\t\t\t\t\tcreateSessionCts.cancel();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tsession = await this._inlineChatSessionService.createSession(\n\t\t\t\t\tthis._editor,\n\t\t\t\t\t{ editMode: this._getMode(), wholeRange: options.initialRange },\n\t\t\t\t\tcreateSessionCts.token\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// Inline chat errors are from the provider and have their error messages shown to the user\n\t\t\t\tif (error instanceof InlineChatError || error?.name === InlineChatError.code) {\n\t\t\t\t\terrorMessage = error.message;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcreateSessionCts.dispose();\n\t\t\tmsgListener.dispose();\n\n\t\t\tif (createSessionCts.token.isCancellationRequested) {\n\t\t\t\tif (session) {\n\t\t\t\t\tthis._inlineChatSessionService.releaseSession(session);\n\t\t\t\t}\n\t\t\t\treturn State.CANCEL;\n\t\t\t}\n\t\t}\n\n\t\tdelete options.initialRange;\n\t\tdelete options.existingSession;\n\n\t\tif (!session) {\n\t\t\tMessageController.get(this._editor)?.showMessage(errorMessage, widgetPosition);\n\t\t\tthis._log('Failed to start editor chat');\n\t\t\treturn State.CANCEL;\n\t\t}\n\n\t\tawait session.chatModel.waitForInitialization();\n\n\t\t// create a new strategy\n\t\tswitch (session.editMode) {\n\t\t\tcase EditMode.Preview:\n\t\t\t\tthis._strategy = this._instaService.createInstance(PreviewStrategy, session, this._editor, this._ui.value);\n\t\t\t\tbreak;\n\t\t\tcase EditMode.Live:\n\t\t\tdefault:\n\t\t\t\tthis._strategy = this._instaService.createInstance(LiveStrategy, session, this._editor, this._ui.value, session.headless || this._configurationService.getValue<boolean>(InlineChatConfigKeys.ZoneToolbar));\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis._session = session;\n\t\treturn State.INIT_UI;\n\t}\n\n\tprivate async [State.INIT_UI](options: InlineChatRunOptions): Promise<State.WAIT_FOR_INPUT | State.SHOW_REQUEST> {\n\t\tassertType(this._session);\n\t\tassertType(this._strategy);\n\n\t\t// hide/cancel inline completions when invoking IE\n\t\tInlineCompletionsController.get(this._editor)?.hide();\n\n\t\tthis._sessionStore.clear();\n\n\t\tconst wholeRangeDecoration = this._editor.createDecorationsCollection();\n\t\tconst handleWholeRangeChange = () => {\n\t\t\tconst newDecorations = this._strategy?.getWholeRangeDecoration() ?? [];\n\t\t\twholeRangeDecoration.set(newDecorations);\n\n\t\t\tthis._ctxEditing.set(!this._session?.wholeRange.trackedInitialRange.isEmpty());\n\t\t};\n\t\tthis._sessionStore.add(toDisposable(() => {\n\t\t\twholeRangeDecoration.clear();\n\t\t\tthis._ctxEditing.reset();\n\t\t}));\n\t\tthis._sessionStore.add(this._session.wholeRange.onDidChange(handleWholeRangeChange));\n\t\thandleWholeRangeChange();\n\n\t\tthis._ui.value.widget.setChatModel(this._session.chatModel);\n\t\tthis._updatePlaceholder();\n\n\n\t\tconst isModelEmpty = !this._session.chatModel.hasRequests;\n\t\tthis._ui.value.widget.updateToolbar(true);\n\t\tthis._ui.value.widget.toggleStatus(!isModelEmpty);\n\t\tthis._showWidget(this._session.headless, isModelEmpty);\n\n\t\tthis._sessionStore.add(this._editor.onDidChangeModel((e) => {\n\t\t\tconst msg = this._session?.chatModel.hasRequests\n\t\t\t\t? Message.PAUSE_SESSION // pause when switching models/tabs and when having a previous exchange\n\t\t\t\t: Message.CANCEL_SESSION;\n\t\t\tthis._log('model changed, pause or cancel session', msg, e);\n\t\t\tthis._messages.fire(msg);\n\t\t}));\n\n\t\tconst altVersionNow = this._editor.getModel()?.getAlternativeVersionId();\n\n\t\tthis._sessionStore.add(this._editor.onDidChangeModelContent(e => {\n\n\t\t\tif (!this._session?.hunkData.ignoreTextModelNChanges) {\n\t\t\t\tthis._ctxUserDidEdit.set(altVersionNow !== this._editor.getModel()?.getAlternativeVersionId());\n\t\t\t}\n\n\t\t\tif (this._session?.hunkData.ignoreTextModelNChanges || this._strategy?.hasFocus()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst wholeRange = this._session!.wholeRange;\n\t\t\tlet shouldFinishSession = false;\n\t\t\tif (this._configurationService.getValue<boolean>(InlineChatConfigKeys.FinishOnType)) {\n\t\t\t\tfor (const { range } of e.changes) {\n\t\t\t\t\tshouldFinishSession = !Range.areIntersectingOrTouching(range, wholeRange.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._session!.recordExternalEditOccurred(shouldFinishSession);\n\n\t\t\tif (shouldFinishSession) {\n\t\t\t\tthis._log('text changed outside of whole range, FINISH session');\n\t\t\t\tthis.finishExistingSession();\n\t\t\t}\n\t\t}));\n\n\t\tthis._sessionStore.add(this._session.chatModel.onDidChange(async e => {\n\t\t\tif (e.kind === 'removeRequest') {\n\t\t\t\t// TODO@jrieken there is still some work left for when a request \"in the middle\"\n\t\t\t\t// is removed. We will undo all changes till that point but not remove those\n\t\t\t\t// later request\n\t\t\t\tawait this._session!.undoChangesUntil(e.requestId);\n\t\t\t}\n\t\t}));\n\n\t\t// apply edits from completed requests that haven't been applied yet\n\t\tconst editState = this._createChatTextEditGroupState();\n\t\tlet didEdit = false;\n\t\tfor (const request of this._session.chatModel.getRequests()) {\n\t\t\tif (!request.response) {\n\t\t\t\t// done when seeing the first request that is still pending (no response).\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (const part of request.response.response.value) {\n\t\t\t\tif (part.kind !== 'textEditGroup' || !isEqual(part.uri, this._session.textModelN.uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (part.state?.applied) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (const edit of part.edits) {\n\t\t\t\t\tthis._makeChanges(edit, undefined, !didEdit);\n\t\t\t\t\tdidEdit = true;\n\t\t\t\t}\n\t\t\t\tpart.state ??= editState;\n\t\t\t}\n\t\t}\n\t\tif (didEdit) {\n\t\t\tconst diff = await this._editorWorkerService.computeDiff(this._session.textModel0.uri, this._session.textModelN.uri, { computeMoves: false, maxComputationTimeMs: Number.MAX_SAFE_INTEGER, ignoreTrimWhitespace: false }, 'advanced');\n\t\t\tthis._session.wholeRange.fixup(diff?.changes ?? []);\n\t\t\tawait this._session.hunkData.recompute(editState, diff);\n\n\t\t\tthis._updateCtxResponseType();\n\t\t}\n\t\toptions.position = await this._strategy.renderChanges();\n\n\t\tif (this._session.chatModel.requestInProgress) {\n\t\t\treturn State.SHOW_REQUEST;\n\t\t} else {\n\t\t\treturn State.WAIT_FOR_INPUT;\n\t\t}\n\t}\n\n\tprivate async [State.WAIT_FOR_INPUT](options: InlineChatRunOptions): Promise<State.ACCEPT | State.CANCEL | State.PAUSE | State.WAIT_FOR_INPUT | State.SHOW_REQUEST> {\n\t\tassertType(this._session);\n\t\tassertType(this._strategy);\n\n\t\tthis._updatePlaceholder();\n\n\t\tif (options.message) {\n\t\t\tthis.updateInput(options.message);\n\t\t\taria.alert(options.message);\n\t\t\tdelete options.message;\n\t\t\tthis._showWidget(this._session.headless, false);\n\t\t}\n\n\t\tlet message = Message.NONE;\n\t\tlet request: IChatRequestModel | undefined;\n\n\t\tconst barrier = new Barrier();\n\t\tconst store = new DisposableStore();\n\t\tstore.add(this._session.chatModel.onDidChange(e => {\n\t\t\tif (e.kind === 'addRequest') {\n\t\t\t\trequest = e.request;\n\t\t\t\tmessage = Message.ACCEPT_INPUT;\n\t\t\t\tbarrier.open();\n\t\t\t}\n\t\t}));\n\t\tstore.add(this._strategy.onDidAccept(() => this.acceptSession()));\n\t\tstore.add(this._strategy.onDidDiscard(() => this.cancelSession()));\n\t\tstore.add(Event.once(this._messages.event)(m => {\n\t\t\tthis._log('state=_waitForInput) message received', m);\n\t\t\tmessage = m;\n\t\t\tbarrier.open();\n\t\t}));\n\n\t\tif (options.autoSend) {\n\t\t\tdelete options.autoSend;\n\t\t\tthis._showWidget(this._session.headless, false);\n\t\t\tthis._ui.value.widget.chatWidget.acceptInput();\n\t\t}\n\n\t\tawait barrier.wait();\n\t\tstore.dispose();\n\n\n\t\tif (message & (Message.CANCEL_INPUT | Message.CANCEL_SESSION)) {\n\t\t\treturn State.CANCEL;\n\t\t}\n\n\t\tif (message & Message.PAUSE_SESSION) {\n\t\t\treturn State.PAUSE;\n\t\t}\n\n\t\tif (message & Message.ACCEPT_SESSION) {\n\t\t\tthis._ui.value.widget.selectAll(false);\n\t\t\treturn State.ACCEPT;\n\t\t}\n\n\t\tif (!request?.message.text) {\n\t\t\treturn State.WAIT_FOR_INPUT;\n\t\t}\n\n\n\t\treturn State.SHOW_REQUEST;\n\t}\n\n\n\tprivate async [State.SHOW_REQUEST](options: InlineChatRunOptions): Promise<State.WAIT_FOR_INPUT | State.CANCEL | State.PAUSE | State.ACCEPT> {\n\t\tassertType(this._session);\n\t\tassertType(this._strategy);\n\t\tassertType(this._session.chatModel.requestInProgress);\n\n\t\tthis._ctxRequestInProgress.set(true);\n\n\t\tconst { chatModel } = this._session;\n\t\tconst request = chatModel.lastRequest;\n\n\t\tassertType(request);\n\t\tassertType(request.response);\n\n\t\tthis._showWidget(this._session.headless, false);\n\t\tthis._ui.value.widget.selectAll(false);\n\t\tthis._ui.value.widget.updateInfo('');\n\t\tthis._ui.value.widget.toggleStatus(true);\n\n\t\tconst { response } = request;\n\t\tconst responsePromise = new DeferredPromise<void>();\n\n\t\tconst store = new DisposableStore();\n\n\t\tconst progressiveEditsCts = store.add(new CancellationTokenSource());\n\t\tconst progressiveEditsAvgDuration = new MovingAverage();\n\t\tconst progressiveEditsClock = StopWatch.create();\n\t\tconst progressiveEditsQueue = new Queue();\n\n\t\tlet next: State.WAIT_FOR_INPUT | State.SHOW_REQUEST | State.CANCEL | State.PAUSE | State.ACCEPT = State.WAIT_FOR_INPUT;\n\n\t\tstore.add(Event.once(this._messages.event)(message => {\n\t\t\tthis._log('state=_makeRequest) message received', message);\n\t\t\tthis._chatService.cancelCurrentRequestForSession(chatModel.sessionId);\n\t\t\tif (message & Message.CANCEL_SESSION) {\n\t\t\t\tnext = State.CANCEL;\n\t\t\t} else if (message & Message.PAUSE_SESSION) {\n\t\t\t\tnext = State.PAUSE;\n\t\t\t} else if (message & Message.ACCEPT_SESSION) {\n\t\t\t\tnext = State.ACCEPT;\n\t\t\t}\n\t\t}));\n\n\t\tstore.add(chatModel.onDidChange(async e => {\n\t\t\tif (e.kind === 'removeRequest' && e.requestId === request.id) {\n\t\t\t\tprogressiveEditsCts.cancel();\n\t\t\t\tresponsePromise.complete();\n\t\t\t\tif (e.reason === ChatRequestRemovalReason.Resend) {\n\t\t\t\t\tnext = State.SHOW_REQUEST;\n\t\t\t\t} else {\n\t\t\t\t\tnext = State.CANCEL;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.kind === 'move') {\n\t\t\t\tassertType(this._session);\n\t\t\t\tconst log: typeof this._log = (msg: string, ...args: any[]) => this._log('state=_showRequest) moving inline chat', msg, ...args);\n\n\t\t\t\tlog('move was requested', e.target, e.range);\n\n\t\t\t\t// if there's already a tab open for targetUri, show it and move inline chat to that tab\n\t\t\t\t// otherwise, open the tab to the side\n\t\t\t\tconst initialSelection = Selection.fromRange(Range.lift(e.range), SelectionDirection.LTR);\n\t\t\t\tconst editorPane = await this._editorService.openEditor({ resource: e.target, options: { selection: initialSelection } }, SIDE_GROUP);\n\n\t\t\t\tif (!editorPane) {\n\t\t\t\t\tlog('opening editor failed');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst newEditor = editorPane.getControl();\n\t\t\t\tif (!isCodeEditor(newEditor) || !newEditor.hasModel()) {\n\t\t\t\t\tlog('new editor is either missing or not a code editor or does not have a model');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this._inlineChatSessionService.getSession(newEditor, e.target)) {\n\t\t\t\t\tlog('new editor ALREADY has a session');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst newSession = await this._inlineChatSessionService.createSession(\n\t\t\t\t\tnewEditor,\n\t\t\t\t\t{\n\t\t\t\t\t\teditMode: this._getMode(),\n\t\t\t\t\t\tsession: this._session,\n\t\t\t\t\t},\n\t\t\t\t\tCancellationToken.None); // TODO@ulugbekna: add proper cancellation?\n\n\n\t\t\t\tInlineChatController.get(newEditor)?.run({ existingSession: newSession });\n\n\t\t\t\tnext = State.CANCEL;\n\t\t\t\tresponsePromise.complete();\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}));\n\n\t\t// cancel the request when the user types\n\t\tstore.add(this._ui.value.widget.chatWidget.inputEditor.onDidChangeModelContent(() => {\n\t\t\tthis._chatService.cancelCurrentRequestForSession(chatModel.sessionId);\n\t\t}));\n\n\t\tlet lastLength = 0;\n\t\tlet isFirstChange = true;\n\n\t\tconst editState = this._createChatTextEditGroupState();\n\t\tlet localEditGroup: IChatTextEditGroup | undefined;\n\n\t\t// apply edits\n\t\tconst handleResponse = () => {\n\n\t\t\tthis._updateCtxResponseType();\n\n\t\t\tif (!localEditGroup) {\n\t\t\t\tlocalEditGroup = <IChatTextEditGroup | undefined>response.response.value.find(part => part.kind === 'textEditGroup' && isEqual(part.uri, this._session?.textModelN.uri));\n\t\t\t}\n\n\t\t\tif (localEditGroup) {\n\n\t\t\t\tlocalEditGroup.state ??= editState;\n\n\t\t\t\tconst edits = localEditGroup.edits;\n\t\t\t\tconst newEdits = edits.slice(lastLength);\n\t\t\t\tif (newEdits.length > 0) {\n\n\t\t\t\t\tthis._log(`${this._session?.textModelN.uri.toString()} received ${newEdits.length} edits`);\n\n\t\t\t\t\t// NEW changes\n\t\t\t\t\tlastLength = edits.length;\n\t\t\t\t\tprogressiveEditsAvgDuration.update(progressiveEditsClock.elapsed());\n\t\t\t\t\tprogressiveEditsClock.reset();\n\n\t\t\t\t\tprogressiveEditsQueue.queue(async () => {\n\n\t\t\t\t\t\tconst startThen = this._session!.wholeRange.value.getStartPosition();\n\n\t\t\t\t\t\t// making changes goes into a queue because otherwise the async-progress time will\n\t\t\t\t\t\t// influence the time it takes to receive the changes and progressive typing will\n\t\t\t\t\t\t// become infinitely fast\n\t\t\t\t\t\tfor (const edits of newEdits) {\n\t\t\t\t\t\t\tawait this._makeChanges(edits, {\n\t\t\t\t\t\t\t\tduration: progressiveEditsAvgDuration.value,\n\t\t\t\t\t\t\t\ttoken: progressiveEditsCts.token\n\t\t\t\t\t\t\t}, isFirstChange);\n\n\t\t\t\t\t\t\tisFirstChange = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// reshow the widget if the start position changed or shows at the wrong position\n\t\t\t\t\t\tconst startNow = this._session!.wholeRange.value.getStartPosition();\n\t\t\t\t\t\tif (!startNow.equals(startThen) || !this._ui.value.position?.equals(startNow)) {\n\t\t\t\t\t\t\tthis._showWidget(this._session!.headless, false, startNow.delta(-1));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (response.isCanceled) {\n\t\t\t\tprogressiveEditsCts.cancel();\n\t\t\t\tresponsePromise.complete();\n\n\t\t\t} else if (response.isComplete) {\n\t\t\t\tresponsePromise.complete();\n\t\t\t}\n\t\t};\n\t\tstore.add(response.onDidChange(handleResponse));\n\t\thandleResponse();\n\n\t\t// (1) we must wait for the request to finish\n\t\t// (2) we must wait for all edits that came in via progress to complete\n\t\tawait responsePromise.p;\n\t\tawait progressiveEditsQueue.whenIdle();\n\n\t\tif (response.result?.errorDetails) {\n\t\t\tawait this._session.undoChangesUntil(response.requestId);\n\t\t}\n\n\t\tstore.dispose();\n\n\t\tconst diff = await this._editorWorkerService.computeDiff(this._session.textModel0.uri, this._session.textModelN.uri, { computeMoves: false, maxComputationTimeMs: Number.MAX_SAFE_INTEGER, ignoreTrimWhitespace: false }, 'advanced');\n\t\tthis._session.wholeRange.fixup(diff?.changes ?? []);\n\t\tawait this._session.hunkData.recompute(editState, diff);\n\n\t\tthis._ctxRequestInProgress.set(false);\n\n\n\t\tlet newPosition: Position | undefined;\n\n\t\tif (response.result?.errorDetails) {\n\t\t\t// error -> no message, errors are shown with the request\n\n\t\t} else if (response.response.value.length === 0) {\n\t\t\t// empty -> show message\n\t\t\tconst status = localize('empty', \"No results, please refine your input and try again\");\n\t\t\tthis._ui.value.widget.updateStatus(status, { classes: ['warn'] });\n\n\t\t} else {\n\t\t\t// real response -> no message\n\t\t\tthis._ui.value.widget.updateStatus('');\n\t\t}\n\n\t\tconst position = await this._strategy.renderChanges();\n\t\tif (position) {\n\t\t\t// if the selection doesn't start far off we keep the widget at its current position\n\t\t\t// because it makes reading this nicer\n\t\t\tconst selection = this._editor.getSelection();\n\t\t\tif (selection?.containsPosition(position)) {\n\t\t\t\tif (position.lineNumber - selection.startLineNumber > 8) {\n\t\t\t\t\tnewPosition = position;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnewPosition = position;\n\t\t\t}\n\t\t}\n\t\tthis._showWidget(this._session.headless, false, newPosition);\n\n\t\treturn next;\n\t}\n\n\tprivate async[State.PAUSE]() {\n\n\t\tthis._resetWidget();\n\n\t\tthis._strategy?.dispose?.();\n\t\tthis._session = undefined;\n\t}\n\n\tprivate async[State.ACCEPT]() {\n\t\tassertType(this._session);\n\t\tassertType(this._strategy);\n\t\tthis._sessionStore.clear();\n\n\t\ttry {\n\t\t\tawait this._strategy.apply();\n\t\t} catch (err) {\n\t\t\tthis._dialogService.error(localize('err.apply', \"Failed to apply changes.\", toErrorMessage(err)));\n\t\t\tthis._log('FAILED to apply changes');\n\t\t\tthis._log(err);\n\t\t}\n\n\t\tthis._inlineChatSessionService.releaseSession(this._session);\n\n\t\tthis._resetWidget();\n\n\t\tthis._strategy?.dispose();\n\t\tthis._strategy = undefined;\n\t\tthis._session = undefined;\n\t}\n\n\tprivate async[State.CANCEL]() {\n\t\tif (this._session) {\n\t\t\t// assertType(this._session);\n\t\t\tassertType(this._strategy);\n\t\t\tthis._sessionStore.clear();\n\n\t\t\t// only stash sessions that were not unstashed, not \"empty\", and not interacted with\n\t\t\tconst shouldStash = !this._session.isUnstashed && this._session.chatModel.hasRequests && this._session.hunkData.size === this._session.hunkData.pending;\n\t\t\tlet undoCancelEdits: IValidEditOperation[] = [];\n\t\t\ttry {\n\t\t\t\tundoCancelEdits = this._strategy.cancel();\n\t\t\t} catch (err) {\n\t\t\t\tthis._dialogService.error(localize('err.discard', \"Failed to discard changes.\", toErrorMessage(err)));\n\t\t\t\tthis._log('FAILED to discard changes');\n\t\t\t\tthis._log(err);\n\t\t\t}\n\n\t\t\tthis._stashedSession.clear();\n\t\t\tif (shouldStash) {\n\t\t\t\tthis._stashedSession.value = this._inlineChatSessionService.stashSession(this._session, this._editor, undoCancelEdits);\n\t\t\t} else {\n\t\t\t\tthis._inlineChatSessionService.releaseSession(this._session);\n\t\t\t}\n\t\t}\n\n\t\tthis._resetWidget();\n\n\t\tthis._strategy?.dispose();\n\t\tthis._strategy = undefined;\n\t\tthis._session = undefined;\n\t}\n\n\t// ----\n\n\tprivate _showWidget(headless: boolean = false, initialRender: boolean = false, position?: Position) {\n\t\tassertType(this._editor.hasModel());\n\t\tthis._ctxVisible.set(true);\n\n\t\tlet widgetPosition: Position;\n\t\tif (position) {\n\t\t\t// explicit position wins\n\t\t\twidgetPosition = position;\n\t\t} else if (this._ui.rawValue?.position) {\n\t\t\t// already showing - special case of line 1\n\t\t\tif (this._ui.rawValue?.position.lineNumber === 1) {\n\t\t\t\twidgetPosition = this._ui.rawValue?.position.delta(-1);\n\t\t\t} else {\n\t\t\t\twidgetPosition = this._ui.rawValue?.position;\n\t\t\t}\n\t\t} else {\n\t\t\t// default to ABOVE the selection\n\t\t\twidgetPosition = this._editor.getSelection().getStartPosition().delta(-1);\n\t\t}\n\n\t\tif (this._session && !position && (this._session.hasChangedText || this._session.chatModel.hasRequests)) {\n\t\t\twidgetPosition = this._session.wholeRange.trackedInitialRange.getStartPosition().delta(-1);\n\t\t}\n\n\t\tif (!headless) {\n\t\t\tif (this._ui.rawValue?.position) {\n\t\t\t\tthis._ui.value.updatePositionAndHeight(widgetPosition);\n\t\t\t} else {\n\t\t\t\tthis._ui.value.show(widgetPosition);\n\t\t\t}\n\t\t}\n\n\t\treturn widgetPosition;\n\t}\n\n\tprivate _resetWidget() {\n\t\tthis._sessionStore.clear();\n\t\tthis._ctxVisible.reset();\n\t\tthis._ctxUserDidEdit.reset();\n\n\t\tthis._ui.rawValue?.hide();\n\n\t\t// Return focus to the editor only if the current focus is within the editor widget\n\t\tif (this._editor.hasWidgetFocus()) {\n\t\t\tthis._editor.focus();\n\t\t}\n\t}\n\n\tprivate _updateCtxResponseType(): void {\n\n\t\tif (!this._session) {\n\t\t\tthis._ctxResponseType.set(InlineChatResponseType.None);\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasLocalEdit = (response: IResponse): boolean => {\n\t\t\treturn response.value.some(part => part.kind === 'textEditGroup' && isEqual(part.uri, this._session?.textModelN.uri));\n\t\t};\n\n\t\tlet responseType = InlineChatResponseType.None;\n\t\tfor (const request of this._session.chatModel.getRequests()) {\n\t\t\tif (!request.response) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresponseType = InlineChatResponseType.Messages;\n\t\t\tif (hasLocalEdit(request.response.response)) {\n\t\t\t\tresponseType = InlineChatResponseType.MessagesAndEdits;\n\t\t\t\tbreak; // no need to check further\n\t\t\t}\n\t\t}\n\t\tthis._ctxResponseType.set(responseType);\n\t\tthis._ctxResponse.set(responseType !== InlineChatResponseType.None);\n\t}\n\n\tprivate _createChatTextEditGroupState(): IChatTextEditGroupState {\n\t\tassertType(this._session);\n\n\t\tconst sha1 = new DefaultModelSHA1Computer();\n\t\tconst textModel0Sha1 = sha1.canComputeSHA1(this._session.textModel0)\n\t\t\t? sha1.computeSHA1(this._session.textModel0)\n\t\t\t: generateUuid();\n\n\t\treturn {\n\t\t\tsha1: textModel0Sha1,\n\t\t\tapplied: 0\n\t\t};\n\t}\n\n\tprivate async _makeChanges(edits: TextEdit[], opts: ProgressingEditsOptions | undefined, undoStopBefore: boolean) {\n\t\tassertType(this._session);\n\t\tassertType(this._strategy);\n\n\t\tconst moreMinimalEdits = await this._editorWorkerService.computeMoreMinimalEdits(this._session.textModelN.uri, edits);\n\t\tthis._log('edits from PROVIDER and after making them MORE MINIMAL', this._session.agent.extensionId, edits, moreMinimalEdits);\n\n\t\tif (moreMinimalEdits?.length === 0) {\n\t\t\t// nothing left to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst actualEdits = !opts && moreMinimalEdits ? moreMinimalEdits : edits;\n\t\tconst editOperations = actualEdits.map(TextEdit.asEditOperation);\n\n\t\tconst editsObserver: IEditObserver = {\n\t\t\tstart: () => this._session!.hunkData.ignoreTextModelNChanges = true,\n\t\t\tstop: () => this._session!.hunkData.ignoreTextModelNChanges = false,\n\t\t};\n\n\t\tthis._inlineChatSavingService.markChanged(this._session);\n\t\tif (opts) {\n\t\t\tawait this._strategy.makeProgressiveChanges(editOperations, editsObserver, opts, undoStopBefore);\n\t\t} else {\n\t\t\tawait this._strategy.makeChanges(editOperations, editsObserver, undoStopBefore);\n\t\t}\n\t}\n\n\tprivate _forcedPlaceholder: string | undefined = undefined;\n\n\tprivate _updatePlaceholder(): void {\n\t\tthis._ui.value.widget.placeholder = this._getPlaceholderText();\n\t}\n\n\tprivate _getPlaceholderText(): string {\n\t\treturn this._forcedPlaceholder ?? this._session?.agent.description ?? '';\n\t}\n\n\t// ---- controller API\n\n\tshowSaveHint(): void {\n\t\tif (!this._session) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst status = localize('savehint', \"Accept or discard changes to continue saving.\");\n\t\tthis._ui.value.widget.updateStatus(status, { classes: ['warn'] });\n\n\t\tif (this._ui.value.position) {\n\t\t\tthis._editor.revealLineInCenterIfOutsideViewport(this._ui.value.position.lineNumber);\n\t\t} else {\n\t\t\tconst hunk = this._session.hunkData.getInfo().find(info => info.getState() === HunkState.Pending);\n\t\t\tif (hunk) {\n\t\t\t\tthis._editor.revealLineInCenterIfOutsideViewport(hunk.getRangesN()[0].startLineNumber);\n\t\t\t}\n\t\t}\n\t}\n\n\tacceptInput() {\n\t\treturn this.chatWidget.acceptInput();\n\t}\n\n\tupdateInput(text: string, selectAll = true): void {\n\n\t\tthis._ui.value.widget.chatWidget.setInput(text);\n\t\tif (selectAll) {\n\t\t\tconst newSelection = new Selection(1, 1, Number.MAX_SAFE_INTEGER, 1);\n\t\t\tthis._ui.value.widget.chatWidget.inputEditor.setSelection(newSelection);\n\t\t}\n\t}\n\n\tcancelCurrentRequest(): void {\n\t\tthis._messages.fire(Message.CANCEL_INPUT | Message.CANCEL_REQUEST);\n\t}\n\n\tarrowOut(up: boolean): void {\n\t\tif (this._ui.value.position && this._editor.hasModel()) {\n\t\t\tconst { column } = this._editor.getPosition();\n\t\t\tconst { lineNumber } = this._ui.value.position;\n\t\t\tconst newLine = up ? lineNumber : lineNumber + 1;\n\t\t\tthis._editor.setPosition({ lineNumber: newLine, column });\n\t\t\tthis._editor.focus();\n\t\t}\n\t}\n\n\tfocus(): void {\n\t\tthis._ui.value.widget.focus();\n\t}\n\n\thasFocus(): boolean {\n\t\treturn this._ui.value.widget.hasFocus();\n\t}\n\n\n\tasync viewInChat() {\n\t\tif (!this._strategy || !this._session) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet someApplied = false;\n\t\tlet lastEdit: IChatTextEditGroup | undefined;\n\n\t\tconst uri = this._editor.getModel()?.uri;\n\t\tconst requests = this._session.chatModel.getRequests();\n\t\tfor (const request of requests) {\n\t\t\tif (!request.response) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const part of request.response.response.value) {\n\t\t\t\tif (part.kind === 'textEditGroup' && isEqual(part.uri, uri)) {\n\t\t\t\t\t// fully or partially applied edits\n\t\t\t\t\tsomeApplied = someApplied || Boolean(part.state?.applied);\n\t\t\t\t\tlastEdit = part;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst doEdits = this._strategy.cancel();\n\n\t\tif (someApplied) {\n\t\t\tassertType(lastEdit);\n\t\t\tlastEdit.edits = [doEdits];\n\t\t\tlastEdit.state!.applied = 0;\n\t\t}\n\n\t\tawait this._instaService.invokeFunction(moveToPanelChat, this._session?.chatModel);\n\n\t\tthis.cancelSession();\n\t}\n\n\tacceptSession(): void {\n\t\tconst response = this._session?.chatModel.getRequests().at(-1)?.response;\n\t\tif (response) {\n\t\t\tthis._chatService.notifyUserAction({\n\t\t\t\tsessionId: response.session.sessionId,\n\t\t\t\trequestId: response.requestId,\n\t\t\t\tagentId: response.agent?.id,\n\t\t\t\tcommand: response.slashCommand?.name,\n\t\t\t\tresult: response.result,\n\t\t\t\taction: {\n\t\t\t\t\tkind: 'inlineChat',\n\t\t\t\t\taction: 'accepted'\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis._messages.fire(Message.ACCEPT_SESSION);\n\t}\n\n\tacceptHunk(hunkInfo?: HunkInformation) {\n\t\treturn this._strategy?.performHunkAction(hunkInfo, HunkAction.Accept);\n\t}\n\n\tdiscardHunk(hunkInfo?: HunkInformation) {\n\t\treturn this._strategy?.performHunkAction(hunkInfo, HunkAction.Discard);\n\t}\n\n\ttoggleDiff(hunkInfo?: HunkInformation) {\n\t\treturn this._strategy?.performHunkAction(hunkInfo, HunkAction.ToggleDiff);\n\t}\n\n\tmoveHunk(next: boolean) {\n\t\tthis.focus();\n\t\tthis._strategy?.performHunkAction(undefined, next ? HunkAction.MoveNext : HunkAction.MovePrev);\n\t}\n\n\tasync cancelSession() {\n\t\tconst response = this._session?.chatModel.lastRequest?.response;\n\t\tif (response) {\n\t\t\tthis._chatService.notifyUserAction({\n\t\t\t\tsessionId: response.session.sessionId,\n\t\t\t\trequestId: response.requestId,\n\t\t\t\tagentId: response.agent?.id,\n\t\t\t\tcommand: response.slashCommand?.name,\n\t\t\t\tresult: response.result,\n\t\t\t\taction: {\n\t\t\t\t\tkind: 'inlineChat',\n\t\t\t\t\taction: 'discarded'\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis._messages.fire(Message.CANCEL_SESSION);\n\t}\n\n\tfinishExistingSession(): void {\n\t\tif (this._session) {\n\t\t\tif (this._session.editMode === EditMode.Preview) {\n\t\t\t\tthis._log('finishing existing session, using CANCEL', this._session.editMode);\n\t\t\t\tthis.cancelSession();\n\t\t\t} else {\n\t\t\t\tthis._log('finishing existing session, using APPLY', this._session.editMode);\n\t\t\t\tthis.acceptSession();\n\t\t\t}\n\t\t}\n\t}\n\n\treportIssue() {\n\t\tconst response = this._session?.chatModel.lastRequest?.response;\n\t\tif (response) {\n\t\t\tthis._chatService.notifyUserAction({\n\t\t\t\tsessionId: response.session.sessionId,\n\t\t\t\trequestId: response.requestId,\n\t\t\t\tagentId: response.agent?.id,\n\t\t\t\tcommand: response.slashCommand?.name,\n\t\t\t\tresult: response.result,\n\t\t\t\taction: { kind: 'bug' }\n\t\t\t});\n\t\t}\n\t}\n\n\tunstashLastSession(): Session | undefined {\n\t\tconst result = this._stashedSession.value?.unstash();\n\t\tif (result) {\n\t\t\tthis._inlineChatSavingService.markChanged(result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tjoinCurrentRun(): Promise<void> | undefined {\n\t\treturn this._currentRun;\n\t}\n\n\tasync reviewEdits(anchor: IRange, stream: AsyncIterable<TextEdit>, token: CancellationToken) {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst session = await this._inlineChatSessionService.createSession(this._editor, { editMode: EditMode.Live, wholeRange: anchor, headless: true }, token);\n\t\tif (!session) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst request = session.chatModel.addRequest({ text: 'DUMMY', parts: [] }, { variables: [] }, 0);\n\t\tconst run = this.run({\n\t\t\texistingSession: session,\n\t\t\theadless: true\n\t\t});\n\n\t\tawait Event.toPromise(Event.filter(this._onDidEnterState.event, candidate => candidate === State.SHOW_REQUEST));\n\n\t\tfor await (const chunk of stream) {\n\t\t\tsession.chatModel.acceptResponseProgress(request, { kind: 'textEdit', uri: this._editor.getModel()!.uri, edits: [chunk] });\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tsession.chatModel.cancelRequest(request);\n\t\t} else {\n\t\t\tsession.chatModel.completeResponse(request);\n\t\t}\n\t\tawait run;\n\t\treturn true;\n\t}\n}\n\nasync function moveToPanelChat(accessor: ServicesAccessor, model: ChatModel | undefined) {\n\n\tconst viewsService = accessor.get(IViewsService);\n\tconst chatService = accessor.get(IChatService);\n\n\tconst widget = await showChatView(viewsService);\n\n\tif (widget && widget.viewModel && model) {\n\t\tfor (const request of model.getRequests().slice()) {\n\t\t\tawait chatService.adoptRequest(widget.viewModel.model.sessionId, request);\n\t\t}\n\t\twidget.focusLastMessage();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["State", "Message", "edits"]
}
