{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatNotebook.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { illegalState } from \"../../../../base/common/errors.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { NotebookTextDiffEditor } from \"../../notebook/browser/diff/notebookDiffEditor.js\";\nimport { NotebookMultiTextDiffEditor } from \"../../notebook/browser/diff/notebookMultiDiffEditor.js\";\nimport { INotebookEditorService } from \"../../notebook/browser/services/notebookEditorService.js\";\nimport { CellUri } from \"../../notebook/common/notebookCommon.js\";\nimport { InlineChatController } from \"./inlineChatController.js\";\nimport { IInlineChatSessionService } from \"./inlineChatSessionService.js\";\n\nexport class InlineChatNotebookContribution {\n\tprivate readonly _store = new DisposableStore();\n\n\tconstructor(\n\t\t@IInlineChatSessionService sessionService: IInlineChatSessionService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@INotebookEditorService notebookEditorService: INotebookEditorService,\n\t) {\n\t\tthis._store.add(\n\t\t\tsessionService.registerSessionKeyComputer(\n\t\t\t\tSchemas.vscodeNotebookCell,\n\t\t\t\t{\n\t\t\t\t\tgetComparisonKey: (editor, uri) => {\n\t\t\t\t\t\tconst data = CellUri.parse(uri);\n\t\t\t\t\t\tif (!data) {\n\t\t\t\t\t\t\tthrow illegalState(\"Expected notebook cell uri\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet fallback: string | undefined;\n\t\t\t\t\t\tfor (const notebookEditor of notebookEditorService.listNotebookEditors()) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tnotebookEditor.hasModel() &&\n\t\t\t\t\t\t\t\tisEqual(\n\t\t\t\t\t\t\t\t\tnotebookEditor.textModel.uri,\n\t\t\t\t\t\t\t\t\tdata.notebook,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst candidate = `<notebook>${notebookEditor.getId()}#${uri}`;\n\n\t\t\t\t\t\t\t\tif (!fallback) {\n\t\t\t\t\t\t\t\t\tfallback = candidate;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// find the code editor in the list of cell-code editors\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tnotebookEditor.codeEditors.find(\n\t\t\t\t\t\t\t\t\t\t(tuple) => tuple[1] === editor,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn candidate;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// \t// reveal cell and try to find code editor again\n\t\t\t\t\t\t\t\t// \tconst cell = notebookEditor.getCellByHandle(data.handle);\n\t\t\t\t\t\t\t\t// \tif (cell) {\n\t\t\t\t\t\t\t\t// \t\tnotebookEditor.revealInViewAtTop(cell);\n\t\t\t\t\t\t\t\t// \t\tif (notebookEditor.codeEditors.find((tuple) => tuple[1] === editor)) {\n\t\t\t\t\t\t\t\t// \t\t\treturn candidate;\n\t\t\t\t\t\t\t\t// \t\t}\n\t\t\t\t\t\t\t\t// \t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (fallback) {\n\t\t\t\t\t\t\treturn fallback;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst activeEditor = editorService.activeEditorPane;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tactiveEditor &&\n\t\t\t\t\t\t\t(activeEditor.getId() ===\n\t\t\t\t\t\t\t\tNotebookTextDiffEditor.ID ||\n\t\t\t\t\t\t\t\tactiveEditor.getId() ===\n\t\t\t\t\t\t\t\t\tNotebookMultiTextDiffEditor.ID)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn `<notebook>${editor.getId()}#${uri}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow illegalState(\"Expected notebook editor\");\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._store.add(\n\t\t\tsessionService.onWillStartSession((newSessionEditor) => {\n\t\t\t\tconst candidate = CellUri.parse(\n\t\t\t\t\tnewSessionEditor.getModel().uri,\n\t\t\t\t);\n\t\t\t\tif (!candidate) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const notebookEditor of notebookEditorService.listNotebookEditors()) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisEqual(\n\t\t\t\t\t\t\tnotebookEditor.textModel?.uri,\n\t\t\t\t\t\t\tcandidate.notebook,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet found = false;\n\t\t\t\t\t\tconst editors: ICodeEditor[] = [];\n\t\t\t\t\t\tfor (const [\n\t\t\t\t\t\t\t,\n\t\t\t\t\t\t\tcodeEditor,\n\t\t\t\t\t\t] of notebookEditor.codeEditors) {\n\t\t\t\t\t\t\teditors.push(codeEditor);\n\t\t\t\t\t\t\tfound = codeEditor === newSessionEditor || found;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (found) {\n\t\t\t\t\t\t\t// found the this editor in the outer notebook editor -> make sure to\n\t\t\t\t\t\t\t// cancel all sibling sessions\n\t\t\t\t\t\t\tfor (const editor of editors) {\n\t\t\t\t\t\t\t\tif (editor !== newSessionEditor) {\n\t\t\t\t\t\t\t\t\tInlineChatController.get(\n\t\t\t\t\t\t\t\t\t\teditor,\n\t\t\t\t\t\t\t\t\t)?.finishExistingSession();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis._store.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,oBAAoB;AAC7B,SAAS,uBAAuB;AAChC,SAAS,eAAe;AACxB,SAAS,eAAe;AAExB,SAAS,sBAAsB;AAC/B,SAAS,8BAA8B;AACvC,SAAS,mCAAmC;AAC5C,SAAS,8BAA8B;AACvC,SAAS,eAAe;AACxB,SAAS,4BAA4B;AACrC,SAAS,iCAAiC;AAEnC,IAAM,iCAAN,MAAqC;AAAA,EAlB5C,OAkB4C;AAAA;AAAA;AAAA,EAC1B,SAAS,IAAI,gBAAgB;AAAA,EAE9C,YAC4B,gBACX,eACQ,uBACvB;AACD,SAAK,OAAO;AAAA,MACX,eAAe;AAAA,QACd,QAAQ;AAAA,QACR;AAAA,UACC,kBAAkB,wBAAC,QAAQ,QAAQ;AAClC,kBAAM,OAAO,QAAQ,MAAM,GAAG;AAC9B,gBAAI,CAAC,MAAM;AACV,oBAAM,aAAa,4BAA4B;AAAA,YAChD;AACA,gBAAI;AACJ,uBAAW,kBAAkB,sBAAsB,oBAAoB,GAAG;AACzE,kBACC,eAAe,SAAS,KACxB;AAAA,gBACC,eAAe,UAAU;AAAA,gBACzB,KAAK;AAAA,cACN,GACC;AACD,sBAAM,YAAY,aAAa,eAAe,MAAM,CAAC,IAAI,GAAG;AAE5D,oBAAI,CAAC,UAAU;AACd,6BAAW;AAAA,gBACZ;AAGA,oBACC,eAAe,YAAY;AAAA,kBAC1B,CAAC,UAAU,MAAM,CAAC,MAAM;AAAA,gBACzB,GACC;AACD,yBAAO;AAAA,gBACR;AAAA,cAUD;AAAA,YACD;AAEA,gBAAI,UAAU;AACb,qBAAO;AAAA,YACR;AAEA,kBAAM,eAAe,cAAc;AACnC,gBACC,iBACC,aAAa,MAAM,MACnB,uBAAuB,MACvB,aAAa,MAAM,MAClB,4BAA4B,KAC7B;AACD,qBAAO,aAAa,OAAO,MAAM,CAAC,IAAI,GAAG;AAAA,YAC1C;AAEA,kBAAM,aAAa,0BAA0B;AAAA,UAC9C,GAxDkB;AAAA,QAyDnB;AAAA,MACD;AAAA,IACD;AAEA,SAAK,OAAO;AAAA,MACX,eAAe,mBAAmB,CAAC,qBAAqB;AACvD,cAAM,YAAY,QAAQ;AAAA,UACzB,iBAAiB,SAAS,EAAE;AAAA,QAC7B;AACA,YAAI,CAAC,WAAW;AACf;AAAA,QACD;AACA,mBAAW,kBAAkB,sBAAsB,oBAAoB,GAAG;AACzE,cACC;AAAA,YACC,eAAe,WAAW;AAAA,YAC1B,UAAU;AAAA,UACX,GACC;AACD,gBAAI,QAAQ;AACZ,kBAAM,UAAyB,CAAC;AAChC,uBAAW;AAAA,cACV;AAAA,cACA;AAAA,YACD,KAAK,eAAe,aAAa;AAChC,sBAAQ,KAAK,UAAU;AACvB,sBAAQ,eAAe,oBAAoB;AAAA,YAC5C;AACA,gBAAI,OAAO;AAGV,yBAAW,UAAU,SAAS;AAC7B,oBAAI,WAAW,kBAAkB;AAChC,uCAAqB;AAAA,oBACpB;AAAA,kBACD,GAAG,sBAAsB;AAAA,gBAC1B;AAAA,cACD;AACA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,OAAO,QAAQ;AAAA,EACrB;AACD;AAtHa,iCAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,GANU;",
  "names": []
}
