var g=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var p=(c,r,f,i)=>{for(var o=i>1?void 0:i?S(r,f):r,t=c.length-1,d;t>=0;t--)(d=c[t])&&(o=(i?d(r,f,o):d(o))||o);return i&&o&&g(r,f,o),o},l=(c,r)=>(f,i)=>r(f,i,c);import{illegalState as E}from"../../../../base/common/errors.js";import{DisposableStore as u}from"../../../../base/common/lifecycle.js";import{Schemas as h}from"../../../../base/common/network.js";import{isEqual as I}from"../../../../base/common/resources.js";import{IEditorService as v}from"../../../services/editor/common/editorService.js";import{NotebookTextDiffEditor as x}from"../../notebook/browser/diff/notebookDiffEditor.js";import{NotebookMultiTextDiffEditor as D}from"../../notebook/browser/diff/notebookMultiDiffEditor.js";import{INotebookEditorService as M}from"../../notebook/browser/services/notebookEditorService.js";import{CellUri as k}from"../../notebook/common/notebookCommon.js";import{InlineChatController as y}from"./inlineChatController.js";import{IInlineChatSessionService as C}from"./inlineChatSessionService.js";let a=class{_store=new u;constructor(r,f,i){this._store.add(r.registerSessionKeyComputer(h.vscodeNotebookCell,{getComparisonKey:(o,t)=>{const d=k.parse(t);if(!d)throw E("Expected notebook cell uri");let s;for(const e of i.listNotebookEditors())if(e.hasModel()&&I(e.textModel.uri,d.notebook)){const m=`<notebook>${e.getId()}#${t}`;if(s||(s=m),e.codeEditors.find(b=>b[1]===o))return m}if(s)return s;const n=f.activeEditorPane;if(n&&(n.getId()===x.ID||n.getId()===D.ID))return`<notebook>${o.getId()}#${t}`;throw E("Expected notebook editor")}})),this._store.add(r.onWillStartSession(o=>{const t=k.parse(o.getModel().uri);if(t){for(const d of i.listNotebookEditors())if(I(d.textModel?.uri,t.notebook)){let s=!1;const n=[];for(const[,e]of d.codeEditors)n.push(e),s=e===o||s;if(s){for(const e of n)e!==o&&y.get(e)?.finishExistingSession();break}}}}))}dispose(){this._store.dispose()}};a=p([l(0,C),l(1,v),l(2,M)],a);export{a as InlineChatNotebookContribution};
