{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatCurrentLine.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { IActiveCodeEditor, ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { CursorChangeReason } from '../../../../editor/common/cursorEvents.js';\nimport { IEditorContribution } from '../../../../editor/common/editorCommon.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IChatAgentService } from '../../chat/common/chatAgents.js';\nimport { InlineChatController, State } from './inlineChatController.js';\nimport { CTX_INLINE_CHAT_HAS_AGENT, CTX_INLINE_CHAT_VISIBLE } from '../common/inlineChat.js';\nimport { EditorAction2, ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { EditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { AbstractInlineChatAction } from './inlineChatActions.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { IValidEditOperation } from '../../../../editor/common/model.js';\n\n\nexport const CTX_INLINE_CHAT_EXPANSION = new RawContextKey<boolean>('inlineChatExpansion', false, localize('inlineChatExpansion', \"Whether the inline chat expansion is enabled when at the end of a just-typed line\"));\n\nexport class InlineChatExansionContextKey implements IEditorContribution {\n\n\tstatic Id = 'editor.inlineChatExpansion';\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _editorListener = this._store.add(new MutableDisposable());\n\n\tprivate readonly _ctxInlineChatExpansion: IContextKey<boolean>;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService\n\t) {\n\t\tthis._ctxInlineChatExpansion = CTX_INLINE_CHAT_EXPANSION.bindTo(contextKeyService);\n\n\t\tconst update = () => {\n\t\t\tif (editor.hasModel() && chatAgentService.getAgents().length > 0) {\n\t\t\t\tthis._install(editor);\n\t\t\t} else {\n\t\t\t\tthis._uninstall();\n\t\t\t}\n\t\t};\n\t\tthis._store.add(chatAgentService.onDidChangeAgents(update));\n\t\tthis._store.add(editor.onDidChangeModel(update));\n\t\tupdate();\n\t}\n\n\tdispose(): void {\n\t\tthis._ctxInlineChatExpansion.reset();\n\t\tthis._store.dispose();\n\t}\n\n\tprivate _install(editor: IActiveCodeEditor): void {\n\n\t\tconst store = new DisposableStore();\n\t\tthis._editorListener.value = store;\n\n\t\tconst model = editor.getModel();\n\t\tconst lastChangeEnds: number[] = [];\n\n\t\tstore.add(editor.onDidChangeCursorPosition(e => {\n\n\t\t\tlet enabled = false;\n\n\t\t\tif (e.reason === CursorChangeReason.NotSet) {\n\n\t\t\t\tconst position = editor.getPosition();\n\t\t\t\tconst positionOffset = model.getOffsetAt(position);\n\n\t\t\t\tconst lineLength = model.getLineLength(position.lineNumber);\n\t\t\t\tconst firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(position.lineNumber);\n\n\t\t\t\tif (firstNonWhitespace !== 0 && position.column > lineLength && lastChangeEnds.includes(positionOffset)) {\n\t\t\t\t\tenabled = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastChangeEnds.length = 0;\n\t\t\tthis._ctxInlineChatExpansion.set(enabled);\n\n\t\t}));\n\n\t\tstore.add(editor.onDidChangeModelContent(e => {\n\t\t\tlastChangeEnds.length = 0;\n\t\t\tfor (const change of e.changes) {\n\t\t\t\tconst changeEnd = change.rangeOffset + change.text.length;\n\t\t\t\tlastChangeEnds.push(changeEnd);\n\t\t\t}\n\t\t\tqueueMicrotask(() => {\n\t\t\t\tif (lastChangeEnds.length > 0) {\n\t\t\t\t\t// this is a signal that onDidChangeCursorPosition didn't run which means some outside change\n\t\t\t\t\t// which means we should disable the context key\n\t\t\t\t\tthis._ctxInlineChatExpansion.set(false);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\tprivate _uninstall(): void {\n\t\tthis._editorListener.clear();\n\t}\n}\n\nexport class InlineChatExpandLineAction extends EditorAction2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'inlineChat.startWithCurrentLine',\n\t\t\tcategory: AbstractInlineChatAction.category,\n\t\t\ttitle: localize2('startWithCurrentLine', \"Start in Editor with Current Line\"),\n\t\t\tf1: true,\n\t\t\tprecondition: ContextKeyExpr.and(CTX_INLINE_CHAT_VISIBLE.negate(), CTX_INLINE_CHAT_HAS_AGENT, EditorContextKeys.writable),\n\t\t\t// keybinding: {\n\t\t\t// \twhen: CTX_INLINE_CHAT_EXPANSION,\n\t\t\t// \tweight: KeybindingWeight.EditorContrib,\n\t\t\t// \tprimary: KeyCode.Tab\n\t\t\t// }\n\t\t});\n\t}\n\n\toverride async runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\tconst ctrl = InlineChatController.get(editor);\n\t\tif (!ctrl || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst lineNumber = editor.getSelection().positionLineNumber;\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\n\t\tconst startColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tconst endColumn = model.getLineMaxColumn(lineNumber);\n\n\t\t// clear the line\n\t\tlet undoEdits: IValidEditOperation[] = [];\n\t\tmodel.pushEditOperations(null, [EditOperation.replace(new Range(lineNumber, startColumn, lineNumber, endColumn), '')], (edits) => {\n\t\t\tundoEdits = edits;\n\t\t\treturn null;\n\t\t});\n\n\t\tlet lastState: State | undefined;\n\t\tconst d = ctrl.onDidEnterState(e => lastState = e);\n\n\t\ttry {\n\t\t\t// trigger chat\n\t\t\tawait ctrl.run({\n\t\t\t\tautoSend: true,\n\t\t\t\tmessage: lineContent.trim(),\n\t\t\t\tposition: new Position(lineNumber, startColumn)\n\t\t\t});\n\n\t\t} finally {\n\t\t\td.dispose();\n\t\t}\n\n\t\tif (lastState === State.CANCEL) {\n\t\t\tmodel.pushEditOperations(null, undoEdits, () => null);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
