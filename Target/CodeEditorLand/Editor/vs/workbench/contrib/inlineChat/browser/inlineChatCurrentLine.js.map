{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatCurrentLine.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposableStore,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type {\n\tIActiveCodeEditor,\n\tICodeEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorAction2,\n\ttype ServicesAccessor,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport { EditOperation } from \"../../../../editor/common/core/editOperation.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { CursorChangeReason } from \"../../../../editor/common/cursorEvents.js\";\nimport type { IEditorContribution } from \"../../../../editor/common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport type { IValidEditOperation } from \"../../../../editor/common/model.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IChatAgentService } from \"../../chat/common/chatAgents.js\";\nimport {\n\tCTX_INLINE_CHAT_HAS_AGENT,\n\tCTX_INLINE_CHAT_VISIBLE,\n} from \"../common/inlineChat.js\";\nimport { AbstractInlineChatAction } from \"./inlineChatActions.js\";\nimport { InlineChatController, State } from \"./inlineChatController.js\";\n\nexport const CTX_INLINE_CHAT_EXPANSION = new RawContextKey<boolean>(\n\t\"inlineChatExpansion\",\n\tfalse,\n\tlocalize(\n\t\t\"inlineChatExpansion\",\n\t\t\"Whether the inline chat expansion is enabled when at the end of a just-typed line\",\n\t),\n);\n\nexport class InlineChatExansionContextKey implements IEditorContribution {\n\tstatic Id = \"editor.inlineChatExpansion\";\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _editorListener = this._store.add(new MutableDisposable());\n\n\tprivate readonly _ctxInlineChatExpansion: IContextKey<boolean>;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService,\n\t) {\n\t\tthis._ctxInlineChatExpansion =\n\t\t\tCTX_INLINE_CHAT_EXPANSION.bindTo(contextKeyService);\n\n\t\tconst update = () => {\n\t\t\tif (editor.hasModel() && chatAgentService.getAgents().length > 0) {\n\t\t\t\tthis._install(editor);\n\t\t\t} else {\n\t\t\t\tthis._uninstall();\n\t\t\t}\n\t\t};\n\t\tthis._store.add(chatAgentService.onDidChangeAgents(update));\n\t\tthis._store.add(editor.onDidChangeModel(update));\n\t\tupdate();\n\t}\n\n\tdispose(): void {\n\t\tthis._ctxInlineChatExpansion.reset();\n\t\tthis._store.dispose();\n\t}\n\n\tprivate _install(editor: IActiveCodeEditor): void {\n\t\tconst store = new DisposableStore();\n\t\tthis._editorListener.value = store;\n\n\t\tconst model = editor.getModel();\n\t\tconst lastChangeEnds: number[] = [];\n\n\t\tstore.add(\n\t\t\teditor.onDidChangeCursorPosition((e) => {\n\t\t\t\tlet enabled = false;\n\n\t\t\t\tif (e.reason === CursorChangeReason.NotSet) {\n\t\t\t\t\tconst position = editor.getPosition();\n\t\t\t\t\tconst positionOffset = model.getOffsetAt(position);\n\n\t\t\t\t\tconst lineLength = model.getLineLength(position.lineNumber);\n\t\t\t\t\tconst firstNonWhitespace =\n\t\t\t\t\t\tmodel.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\t);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tfirstNonWhitespace !== 0 &&\n\t\t\t\t\t\tposition.column > lineLength &&\n\t\t\t\t\t\tlastChangeEnds.includes(positionOffset)\n\t\t\t\t\t) {\n\t\t\t\t\t\tenabled = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlastChangeEnds.length = 0;\n\t\t\t\tthis._ctxInlineChatExpansion.set(enabled);\n\t\t\t}),\n\t\t);\n\n\t\tstore.add(\n\t\t\teditor.onDidChangeModelContent((e) => {\n\t\t\t\tlastChangeEnds.length = 0;\n\t\t\t\tfor (const change of e.changes) {\n\t\t\t\t\tconst changeEnd = change.rangeOffset + change.text.length;\n\t\t\t\t\tlastChangeEnds.push(changeEnd);\n\t\t\t\t}\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\tif (lastChangeEnds.length > 0) {\n\t\t\t\t\t\t// this is a signal that onDidChangeCursorPosition didn't run which means some outside change\n\t\t\t\t\t\t// which means we should disable the context key\n\t\t\t\t\t\tthis._ctxInlineChatExpansion.set(false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _uninstall(): void {\n\t\tthis._editorListener.clear();\n\t}\n}\n\nexport class InlineChatExpandLineAction extends EditorAction2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"inlineChat.startWithCurrentLine\",\n\t\t\tcategory: AbstractInlineChatAction.category,\n\t\t\ttitle: localize2(\n\t\t\t\t\"startWithCurrentLine\",\n\t\t\t\t\"Start in Editor with Current Line\",\n\t\t\t),\n\t\t\tf1: true,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCTX_INLINE_CHAT_VISIBLE.negate(),\n\t\t\t\tCTX_INLINE_CHAT_HAS_AGENT,\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t),\n\t\t\t// keybinding: {\n\t\t\t// \twhen: CTX_INLINE_CHAT_EXPANSION,\n\t\t\t// \tweight: KeybindingWeight.EditorContrib,\n\t\t\t// \tprimary: KeyCode.Tab\n\t\t\t// }\n\t\t});\n\t}\n\n\toverride async runEditorCommand(\n\t\t_accessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t) {\n\t\tconst ctrl = InlineChatController.get(editor);\n\t\tif (!ctrl || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst lineNumber = editor.getSelection().positionLineNumber;\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\n\t\tconst startColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tconst endColumn = model.getLineMaxColumn(lineNumber);\n\n\t\t// clear the line\n\t\tlet undoEdits: IValidEditOperation[] = [];\n\t\tmodel.pushEditOperations(\n\t\t\tnull,\n\t\t\t[\n\t\t\t\tEditOperation.replace(\n\t\t\t\t\tnew Range(lineNumber, startColumn, lineNumber, endColumn),\n\t\t\t\t\t\"\",\n\t\t\t\t),\n\t\t\t],\n\t\t\t(edits) => {\n\t\t\t\tundoEdits = edits;\n\t\t\t\treturn null;\n\t\t\t},\n\t\t);\n\n\t\tlet lastState: State | undefined;\n\t\tconst d = ctrl.onDidEnterState((e) => (lastState = e));\n\n\t\ttry {\n\t\t\t// trigger chat\n\t\t\tawait ctrl.run({\n\t\t\t\tautoSend: true,\n\t\t\t\tmessage: lineContent.trim(),\n\t\t\t\tposition: new Position(lineNumber, startColumn),\n\t\t\t});\n\t\t} finally {\n\t\t\td.dispose();\n\t\t}\n\n\t\tif (lastState === State.CANCEL) {\n\t\t\tmodel.pushEditOperations(null, undoEdits, () => null);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
