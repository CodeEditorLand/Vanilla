{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatSessionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tIActiveCodeEditor,\n\tICodeEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport type { IRange } from \"../../../../editor/common/core/range.js\";\nimport type { IValidEditOperation } from \"../../../../editor/common/model.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { EditMode } from \"../common/inlineChat.js\";\nimport type { Session, StashedSession } from \"./inlineChatSession.js\";\n\nexport interface ISessionKeyComputer {\n\tgetComparisonKey(editor: ICodeEditor, uri: URI): string;\n}\n\nexport const IInlineChatSessionService =\n\tcreateDecorator<IInlineChatSessionService>(\"IInlineChatSessionService\");\n\nexport interface IInlineChatSessionEvent {\n\treadonly editor: ICodeEditor;\n\treadonly session: Session;\n}\n\nexport interface IInlineChatSessionEndEvent extends IInlineChatSessionEvent {\n\treadonly endedByExternalCause: boolean;\n}\n\nexport interface IInlineChatSessionService {\n\t_serviceBrand: undefined;\n\n\tonWillStartSession: Event<IActiveCodeEditor>;\n\tonDidMoveSession: Event<IInlineChatSessionEvent>;\n\tonDidStashSession: Event<IInlineChatSessionEvent>;\n\tonDidEndSession: Event<IInlineChatSessionEndEvent>;\n\n\tcreateSession(\n\t\teditor: IActiveCodeEditor,\n\t\toptions: {\n\t\t\teditMode: EditMode;\n\t\t\twholeRange?: IRange;\n\t\t\tsession?: Session;\n\t\t\theadless?: boolean;\n\t\t},\n\t\ttoken: CancellationToken,\n\t): Promise<Session | undefined>;\n\n\tmoveSession(session: Session, newEditor: ICodeEditor): void;\n\n\tgetCodeEditor(session: Session): ICodeEditor;\n\n\tgetSession(editor: ICodeEditor, uri: URI): Session | undefined;\n\n\treleaseSession(session: Session): void;\n\n\tstashSession(\n\t\tsession: Session,\n\t\teditor: ICodeEditor,\n\t\tundoCancelEdits: IValidEditOperation[],\n\t): StashedSession;\n\n\tregisterSessionKeyComputer(\n\t\tscheme: string,\n\t\tvalue: ISessionKeyComputer,\n\t): IDisposable;\n\n\tdispose(): void;\n}\n"],
  "mappings": "AAcA,SAAS,uBAAuB;AAQzB,MAAM,4BACZ,gBAA2C,2BAA2B;",
  "names": []
}
