{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatSessionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IActiveCodeEditor, ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { IValidEditOperation } from '../../../../editor/common/model.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { EditMode } from '../common/inlineChat.js';\nimport { Session, StashedSession } from './inlineChatSession.js';\n\nexport interface ISessionKeyComputer {\n\tgetComparisonKey(editor: ICodeEditor, uri: URI): string;\n}\n\nexport const IInlineChatSessionService = createDecorator<IInlineChatSessionService>('IInlineChatSessionService');\n\nexport interface IInlineChatSessionEvent {\n\treadonly editor: ICodeEditor;\n\treadonly session: Session;\n}\n\nexport interface IInlineChatSessionEndEvent extends IInlineChatSessionEvent {\n\treadonly endedByExternalCause: boolean;\n}\n\nexport interface IInlineChatSessionService {\n\t_serviceBrand: undefined;\n\n\tonWillStartSession: Event<IActiveCodeEditor>;\n\tonDidMoveSession: Event<IInlineChatSessionEvent>;\n\tonDidStashSession: Event<IInlineChatSessionEvent>;\n\tonDidEndSession: Event<IInlineChatSessionEndEvent>;\n\n\tcreateSession(editor: IActiveCodeEditor, options: { editMode: EditMode; wholeRange?: IRange; session?: Session; headless?: boolean }, token: CancellationToken): Promise<Session | undefined>;\n\n\tmoveSession(session: Session, newEditor: ICodeEditor): void;\n\n\tgetCodeEditor(session: Session): ICodeEditor;\n\n\tgetSession(editor: ICodeEditor, uri: URI): Session | undefined;\n\n\treleaseSession(session: Session): void;\n\n\tstashSession(session: Session, editor: ICodeEditor, undoCancelEdits: IValidEditOperation[]): StashedSession;\n\n\tregisterSessionKeyComputer(scheme: string, value: ISessionKeyComputer): IDisposable;\n\n\tdispose(): void;\n}\n"],
  "mappings": "AAIA,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AACpB,SAAS,mBAAmB,mBAAmB;AAC/C,SAAS,cAAc;AACvB,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB,SAAS,SAAS,sBAAsB;AAMjC,MAAM,4BAA4B,gBAA2C,2BAA2B;",
  "names": []
}
