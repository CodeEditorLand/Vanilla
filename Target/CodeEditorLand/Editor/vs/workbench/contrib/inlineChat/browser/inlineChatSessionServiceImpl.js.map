{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatSessionServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport type {\n\tIActiveCodeEditor,\n\tICodeEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport type { IValidEditOperation } from \"../../../../editor/common/model.js\";\nimport { createTextBufferFactoryFromSnapshot } from \"../../../../editor/common/model/textModel.js\";\nimport { IEditorWorkerService } from \"../../../../editor/common/services/editorWorker.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { ITextModelService } from \"../../../../editor/common/services/resolverService.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { DEFAULT_EDITOR_ASSOCIATION } from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { ITextFileService } from \"../../../services/textfile/common/textfiles.js\";\nimport { UntitledTextEditorInput } from \"../../../services/untitled/common/untitledTextEditorInput.js\";\nimport {\n\tChatAgentLocation,\n\tIChatAgentService,\n} from \"../../chat/common/chatAgents.js\";\nimport { IChatService } from \"../../chat/common/chatService.js\";\nimport {\n\tCTX_INLINE_CHAT_HAS_AGENT,\n\ttype EditMode,\n} from \"../common/inlineChat.js\";\nimport {\n\tHunkData,\n\tSession,\n\tSessionWholeRange,\n\tStashedSession,\n\ttype TelemetryData,\n\ttype TelemetryDataClassification,\n} from \"./inlineChatSession.js\";\nimport type {\n\tIInlineChatSessionEndEvent,\n\tIInlineChatSessionEvent,\n\tIInlineChatSessionService,\n\tISessionKeyComputer,\n} from \"./inlineChatSessionService.js\";\n\ntype SessionData = {\n\teditor: ICodeEditor;\n\tsession: Session;\n\tstore: IDisposable;\n};\n\nexport class InlineChatError extends Error {\n\tstatic readonly code = \"InlineChatError\";\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = InlineChatError.code;\n\t}\n}\n\nexport class InlineChatSessionServiceImpl implements IInlineChatSessionService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _store = new DisposableStore();\n\n\tprivate readonly _onWillStartSession = this._store.add(\n\t\tnew Emitter<IActiveCodeEditor>(),\n\t);\n\treadonly onWillStartSession: Event<IActiveCodeEditor> =\n\t\tthis._onWillStartSession.event;\n\n\tprivate readonly _onDidMoveSession = this._store.add(\n\t\tnew Emitter<IInlineChatSessionEvent>(),\n\t);\n\treadonly onDidMoveSession: Event<IInlineChatSessionEvent> =\n\t\tthis._onDidMoveSession.event;\n\n\tprivate readonly _onDidEndSession = this._store.add(\n\t\tnew Emitter<IInlineChatSessionEndEvent>(),\n\t);\n\treadonly onDidEndSession: Event<IInlineChatSessionEndEvent> =\n\t\tthis._onDidEndSession.event;\n\n\tprivate readonly _onDidStashSession = this._store.add(\n\t\tnew Emitter<IInlineChatSessionEvent>(),\n\t);\n\treadonly onDidStashSession: Event<IInlineChatSessionEvent> =\n\t\tthis._onDidStashSession.event;\n\n\tprivate readonly _sessions = new Map<string, SessionData>();\n\tprivate readonly _keyComputers = new Map<string, ISessionKeyComputer>();\n\n\tconstructor(\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t\t@IChatAgentService private readonly _chatAgentService: IChatAgentService\n\t) { }\n\n\tdispose() {\n\t\tthis._store.dispose();\n\t\tthis._sessions.forEach((x) => x.store.dispose());\n\t\tthis._sessions.clear();\n\t}\n\n\tasync createSession(\n\t\teditor: IActiveCodeEditor,\n\t\toptions: {\n\t\t\teditMode: EditMode;\n\t\t\theadless?: boolean;\n\t\t\twholeRange?: Range;\n\t\t\tsession?: Session;\n\t\t},\n\t\ttoken: CancellationToken,\n\t): Promise<Session | undefined> {\n\t\tconst agent = this._chatAgentService.getDefaultAgent(\n\t\t\tChatAgentLocation.Editor,\n\t\t);\n\n\t\tif (!agent) {\n\t\t\tthis._logService.trace(\"[IE] NO agent found\");\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._onWillStartSession.fire(editor);\n\n\t\tconst textModel = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tconst store = new DisposableStore();\n\t\tthis._logService.trace(\n\t\t\t`[IE] creating NEW session for ${editor.getId()}, ${agent.extensionId}`,\n\t\t);\n\n\t\tconst chatModel =\n\t\t\toptions.session?.chatModel ??\n\t\t\tthis._chatService.startSession(ChatAgentLocation.Editor, token);\n\t\tif (!chatModel) {\n\t\t\tthis._logService.trace(\"[IE] NO chatModel found\");\n\t\t\treturn undefined;\n\t\t}\n\n\t\tstore.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tconst doesOtherSessionUseChatModel = [\n\t\t\t\t\t...this._sessions.values(),\n\t\t\t\t].some(\n\t\t\t\t\t(data) =>\n\t\t\t\t\t\tdata.session !== session &&\n\t\t\t\t\t\tdata.session.chatModel === chatModel,\n\t\t\t\t);\n\n\t\t\t\tif (!doesOtherSessionUseChatModel) {\n\t\t\t\t\tthis._chatService.clearSession(chatModel.sessionId);\n\t\t\t\t\tchatModel.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst lastResponseListener = store.add(new MutableDisposable());\n\t\tstore.add(\n\t\t\tchatModel.onDidChange((e) => {\n\t\t\t\tif (e.kind !== \"addRequest\" || !e.request.response) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { response } = e.request;\n\n\t\t\t\tsession.markModelVersion(e.request);\n\t\t\t\tlastResponseListener.value = response.onDidChange(() => {\n\t\t\t\t\tif (!response.isComplete) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlastResponseListener.clear(); // ONCE\n\n\t\t\t\t\t// special handling for untitled files\n\t\t\t\t\tfor (const part of response.response.value) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpart.kind !== \"textEditGroup\" ||\n\t\t\t\t\t\t\tpart.uri.scheme !== Schemas.untitled ||\n\t\t\t\t\t\t\tisEqual(part.uri, session.textModelN.uri)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst langSelection =\n\t\t\t\t\t\t\tthis._languageService.createByFilepathOrFirstLine(\n\t\t\t\t\t\t\t\tpart.uri,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst untitledTextModel =\n\t\t\t\t\t\t\tthis._textFileService.untitled.create({\n\t\t\t\t\t\t\t\tassociatedResource: part.uri,\n\t\t\t\t\t\t\t\tlanguageId: langSelection.languageId,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tuntitledTextModel.resolve();\n\t\t\t\t\t\tthis._textModelService\n\t\t\t\t\t\t\t.createModelReference(part.uri)\n\t\t\t\t\t\t\t.then((ref) => {\n\t\t\t\t\t\t\t\tstore.add(ref);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tstore.add(\n\t\t\tthis._chatAgentService.onDidChangeAgents((e) => {\n\t\t\t\tif (\n\t\t\t\t\te === undefined &&\n\t\t\t\t\t!this._chatAgentService.getAgent(agent.id)\n\t\t\t\t) {\n\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t`[IE] provider GONE for ${editor.getId()}, ${agent.extensionId}`,\n\t\t\t\t\t);\n\t\t\t\t\tthis._releaseSession(session, true);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst id = generateUuid();\n\t\tconst targetUri = textModel.uri;\n\n\t\t// AI edits happen in the actual model, keep a reference but make no copy\n\t\tstore.add(\n\t\t\tawait this._textModelService.createModelReference(textModel.uri),\n\t\t);\n\t\tconst textModelN = textModel;\n\n\t\t// create: keep a snapshot of the \"actual\" model\n\t\tconst textModel0 = store.add(\n\t\t\tthis._modelService.createModel(\n\t\t\t\tcreateTextBufferFactoryFromSnapshot(textModel.createSnapshot()),\n\t\t\t\t{\n\t\t\t\t\tlanguageId: textModel.getLanguageId(),\n\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t},\n\t\t\t\ttargetUri.with({\n\t\t\t\t\tscheme: Schemas.vscode,\n\t\t\t\t\tauthority: \"inline-chat\",\n\t\t\t\t\tpath: \"\",\n\t\t\t\t\tquery: new URLSearchParams({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\ttextModel0: \"\",\n\t\t\t\t\t}).toString(),\n\t\t\t\t}),\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\n\t\t// untitled documents are special and we are releasing their session when their last editor closes\n\t\tif (targetUri.scheme === Schemas.untitled) {\n\t\t\tstore.add(\n\t\t\t\tthis._editorService.onDidCloseEditor(() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this._editorService.isOpened({\n\t\t\t\t\t\t\tresource: targetUri,\n\t\t\t\t\t\t\ttypeId: UntitledTextEditorInput.ID,\n\t\t\t\t\t\t\teditorId: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\t\t\t})\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._releaseSession(session, true);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tlet wholeRange = options.wholeRange;\n\t\tif (!wholeRange) {\n\t\t\twholeRange = new Range(\n\t\t\t\tselection.selectionStartLineNumber,\n\t\t\t\tselection.selectionStartColumn,\n\t\t\t\tselection.positionLineNumber,\n\t\t\t\tselection.positionColumn,\n\t\t\t);\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tstore.dispose();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst session = new Session(\n\t\t\toptions.editMode,\n\t\t\toptions.headless ?? false,\n\t\t\ttargetUri,\n\t\t\ttextModel0,\n\t\t\ttextModelN,\n\t\t\tagent,\n\t\t\tstore.add(new SessionWholeRange(textModelN, wholeRange)),\n\t\t\tstore.add(\n\t\t\t\tnew HunkData(this._editorWorkerService, textModel0, textModelN),\n\t\t\t),\n\t\t\tchatModel,\n\t\t\toptions.session?.versionsByRequest,\n\t\t);\n\n\t\t// store: key -> session\n\t\tconst key = this._key(editor, session.targetUri);\n\t\tif (this._sessions.has(key)) {\n\t\t\tstore.dispose();\n\t\t\tthrow new Error(`Session already stored for ${key}`);\n\t\t}\n\t\tthis._sessions.set(key, { session, editor, store });\n\t\treturn session;\n\t}\n\n\tmoveSession(session: Session, target: ICodeEditor): void {\n\t\tconst newKey = this._key(target, session.targetUri);\n\t\tconst existing = this._sessions.get(newKey);\n\t\tif (existing) {\n\t\t\tif (existing.session !== session) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot move session because the target editor already/still has one`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// noop\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet found = false;\n\t\tfor (const [oldKey, data] of this._sessions) {\n\t\t\tif (data.session === session) {\n\t\t\t\tfound = true;\n\t\t\t\tthis._sessions.delete(oldKey);\n\t\t\t\tthis._sessions.set(newKey, { ...data, editor: target });\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t`[IE] did MOVE session for ${data.editor.getId()} to NEW EDITOR ${target.getId()}, ${session.agent.extensionId}`,\n\t\t\t\t);\n\t\t\t\tthis._onDidMoveSession.fire({ session, editor: target });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tthrow new Error(`Cannot move session because it is not stored`);\n\t\t}\n\t}\n\n\treleaseSession(session: Session): void {\n\t\tthis._releaseSession(session, false);\n\t}\n\n\tprivate _releaseSession(session: Session, byServer: boolean): void {\n\t\tlet tuple: [string, SessionData] | undefined;\n\n\t\t// cleanup\n\t\tfor (const candidate of this._sessions) {\n\t\t\tif (candidate[1].session === session) {\n\t\t\t\t// if (value.session === session) {\n\t\t\t\ttuple = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!tuple) {\n\t\t\t// double remove\n\t\t\treturn;\n\t\t}\n\n\t\tthis._telemetryService.publicLog2<\n\t\t\tTelemetryData,\n\t\t\tTelemetryDataClassification\n\t\t>(\"interactiveEditor/session\", session.asTelemetryData());\n\n\t\tconst [key, value] = tuple;\n\t\tthis._sessions.delete(key);\n\t\tthis._logService.trace(\n\t\t\t`[IE] did RELEASED session for ${value.editor.getId()}, ${session.agent.extensionId}`,\n\t\t);\n\n\t\tthis._onDidEndSession.fire({\n\t\t\teditor: value.editor,\n\t\t\tsession,\n\t\t\tendedByExternalCause: byServer,\n\t\t});\n\t\tvalue.store.dispose();\n\t}\n\n\tstashSession(\n\t\tsession: Session,\n\t\teditor: ICodeEditor,\n\t\tundoCancelEdits: IValidEditOperation[],\n\t): StashedSession {\n\t\tconst result = this._instaService.createInstance(\n\t\t\tStashedSession,\n\t\t\teditor,\n\t\t\tsession,\n\t\t\tundoCancelEdits,\n\t\t);\n\t\tthis._onDidStashSession.fire({ editor, session });\n\t\tthis._logService.trace(\n\t\t\t`[IE] did STASH session for ${editor.getId()}, ${session.agent.extensionId}`,\n\t\t);\n\t\treturn result;\n\t}\n\n\tgetCodeEditor(session: Session): ICodeEditor {\n\t\tfor (const [, data] of this._sessions) {\n\t\t\tif (data.session === session) {\n\t\t\t\treturn data.editor;\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"session not found\");\n\t}\n\n\tgetSession(editor: ICodeEditor, uri: URI): Session | undefined {\n\t\tconst key = this._key(editor, uri);\n\t\treturn this._sessions.get(key)?.session;\n\t}\n\n\tprivate _key(editor: ICodeEditor, uri: URI): string {\n\t\tconst item = this._keyComputers.get(uri.scheme);\n\t\treturn item\n\t\t\t? item.getComparisonKey(editor, uri)\n\t\t\t: `${editor.getId()}@${uri.toString()}`;\n\t}\n\n\tregisterSessionKeyComputer(\n\t\tscheme: string,\n\t\tvalue: ISessionKeyComputer,\n\t): IDisposable {\n\t\tthis._keyComputers.set(scheme, value);\n\t\treturn toDisposable(() => this._keyComputers.delete(scheme));\n\t}\n}\n\nexport class InlineChatEnabler {\n\tstatic Id = \"inlineChat.enabler\";\n\n\tprivate readonly _ctxHasProvider: IContextKey<boolean>;\n\n\tprivate readonly _store = new DisposableStore();\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService,\n\t) {\n\t\tthis._ctxHasProvider =\n\t\t\tCTX_INLINE_CHAT_HAS_AGENT.bindTo(contextKeyService);\n\t\tthis._store.add(\n\t\t\tchatAgentService.onDidChangeAgents(() => {\n\t\t\t\tconst hasEditorAgent = Boolean(\n\t\t\t\t\tchatAgentService.getDefaultAgent(ChatAgentLocation.Editor),\n\t\t\t\t);\n\t\t\t\tthis._ctxHasProvider.set(hasEditorAgent);\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose() {\n\t\tthis._ctxHasProvider.reset();\n\t\tthis._store.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
