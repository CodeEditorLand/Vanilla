{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatSessionServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { DisposableStore, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { IActiveCodeEditor, ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { IValidEditOperation } from '../../../../editor/common/model.js';\nimport { createTextBufferFactoryFromSnapshot } from '../../../../editor/common/model/textModel.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { DEFAULT_EDITOR_ASSOCIATION } from '../../../common/editor.js';\nimport { ChatAgentLocation, IChatAgentService } from '../../chat/common/chatAgents.js';\nimport { IChatService } from '../../chat/common/chatService.js';\nimport { CTX_INLINE_CHAT_HAS_AGENT, EditMode } from '../common/inlineChat.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { UntitledTextEditorInput } from '../../../services/untitled/common/untitledTextEditorInput.js';\nimport { HunkData, Session, SessionWholeRange, StashedSession, TelemetryData, TelemetryDataClassification } from './inlineChatSession.js';\nimport { IInlineChatSessionEndEvent, IInlineChatSessionEvent, IInlineChatSessionService, ISessionKeyComputer } from './inlineChatSessionService.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\n\n\ntype SessionData = {\n\teditor: ICodeEditor;\n\tsession: Session;\n\tstore: IDisposable;\n};\n\nexport class InlineChatError extends Error {\n\tstatic readonly code = 'InlineChatError';\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = InlineChatError.code;\n\t}\n}\n\n\nexport class InlineChatSessionServiceImpl implements IInlineChatSessionService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _store = new DisposableStore();\n\n\tprivate readonly _onWillStartSession = this._store.add(new Emitter<IActiveCodeEditor>());\n\treadonly onWillStartSession: Event<IActiveCodeEditor> = this._onWillStartSession.event;\n\n\tprivate readonly _onDidMoveSession = this._store.add(new Emitter<IInlineChatSessionEvent>());\n\treadonly onDidMoveSession: Event<IInlineChatSessionEvent> = this._onDidMoveSession.event;\n\n\tprivate readonly _onDidEndSession = this._store.add(new Emitter<IInlineChatSessionEndEvent>());\n\treadonly onDidEndSession: Event<IInlineChatSessionEndEvent> = this._onDidEndSession.event;\n\n\tprivate readonly _onDidStashSession = this._store.add(new Emitter<IInlineChatSessionEvent>());\n\treadonly onDidStashSession: Event<IInlineChatSessionEvent> = this._onDidStashSession.event;\n\n\tprivate readonly _sessions = new Map<string, SessionData>();\n\tprivate readonly _keyComputers = new Map<string, ISessionKeyComputer>();\n\n\tconstructor(\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t\t@IChatAgentService private readonly _chatAgentService: IChatAgentService\n\t) { }\n\n\tdispose() {\n\t\tthis._store.dispose();\n\t\tthis._sessions.forEach(x => x.store.dispose());\n\t\tthis._sessions.clear();\n\t}\n\n\tasync createSession(editor: IActiveCodeEditor, options: { editMode: EditMode; headless?: boolean; wholeRange?: Range; session?: Session }, token: CancellationToken): Promise<Session | undefined> {\n\n\t\tconst agent = this._chatAgentService.getDefaultAgent(ChatAgentLocation.Editor);\n\n\t\tif (!agent) {\n\t\t\tthis._logService.trace('[IE] NO agent found');\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._onWillStartSession.fire(editor);\n\n\t\tconst textModel = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tconst store = new DisposableStore();\n\t\tthis._logService.trace(`[IE] creating NEW session for ${editor.getId()}, ${agent.extensionId}`);\n\n\t\tconst chatModel = options.session?.chatModel ?? this._chatService.startSession(ChatAgentLocation.Editor, token);\n\t\tif (!chatModel) {\n\t\t\tthis._logService.trace('[IE] NO chatModel found');\n\t\t\treturn undefined;\n\t\t}\n\n\t\tstore.add(toDisposable(() => {\n\t\t\tconst doesOtherSessionUseChatModel = [...this._sessions.values()].some(data => data.session !== session && data.session.chatModel === chatModel);\n\n\t\t\tif (!doesOtherSessionUseChatModel) {\n\t\t\t\tthis._chatService.clearSession(chatModel.sessionId);\n\t\t\t\tchatModel.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tconst lastResponseListener = store.add(new MutableDisposable());\n\t\tstore.add(chatModel.onDidChange(e => {\n\t\t\tif (e.kind !== 'addRequest' || !e.request.response) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { response } = e.request;\n\n\t\t\tsession.markModelVersion(e.request);\n\t\t\tlastResponseListener.value = response.onDidChange(() => {\n\n\t\t\t\tif (!response.isComplete) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlastResponseListener.clear(); // ONCE\n\n\t\t\t\t// special handling for untitled files\n\t\t\t\tfor (const part of response.response.value) {\n\t\t\t\t\tif (part.kind !== 'textEditGroup' || part.uri.scheme !== Schemas.untitled || isEqual(part.uri, session.textModelN.uri)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst langSelection = this._languageService.createByFilepathOrFirstLine(part.uri, undefined);\n\t\t\t\t\tconst untitledTextModel = this._textFileService.untitled.create({\n\t\t\t\t\t\tassociatedResource: part.uri,\n\t\t\t\t\t\tlanguageId: langSelection.languageId\n\t\t\t\t\t});\n\t\t\t\t\tuntitledTextModel.resolve();\n\t\t\t\t\tthis._textModelService.createModelReference(part.uri).then(ref => {\n\t\t\t\t\t\tstore.add(ref);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t});\n\t\t}));\n\n\t\tstore.add(this._chatAgentService.onDidChangeAgents(e => {\n\t\t\tif (e === undefined && !this._chatAgentService.getAgent(agent.id)) {\n\t\t\t\tthis._logService.trace(`[IE] provider GONE for ${editor.getId()}, ${agent.extensionId}`);\n\t\t\t\tthis._releaseSession(session, true);\n\t\t\t}\n\t\t}));\n\n\t\tconst id = generateUuid();\n\t\tconst targetUri = textModel.uri;\n\n\t\t// AI edits happen in the actual model, keep a reference but make no copy\n\t\tstore.add((await this._textModelService.createModelReference(textModel.uri)));\n\t\tconst textModelN = textModel;\n\n\t\t// create: keep a snapshot of the \"actual\" model\n\t\tconst textModel0 = store.add(this._modelService.createModel(\n\t\t\tcreateTextBufferFactoryFromSnapshot(textModel.createSnapshot()),\n\t\t\t{ languageId: textModel.getLanguageId(), onDidChange: Event.None },\n\t\t\ttargetUri.with({ scheme: Schemas.vscode, authority: 'inline-chat', path: '', query: new URLSearchParams({ id, 'textModel0': '' }).toString() }), true\n\t\t));\n\n\t\t// untitled documents are special and we are releasing their session when their last editor closes\n\t\tif (targetUri.scheme === Schemas.untitled) {\n\t\t\tstore.add(this._editorService.onDidCloseEditor(() => {\n\t\t\t\tif (!this._editorService.isOpened({ resource: targetUri, typeId: UntitledTextEditorInput.ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id })) {\n\t\t\t\t\tthis._releaseSession(session, true);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tlet wholeRange = options.wholeRange;\n\t\tif (!wholeRange) {\n\t\t\twholeRange = new Range(selection.selectionStartLineNumber, selection.selectionStartColumn, selection.positionLineNumber, selection.positionColumn);\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tstore.dispose();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst session = new Session(\n\t\t\toptions.editMode,\n\t\t\toptions.headless ?? false,\n\t\t\ttargetUri,\n\t\t\ttextModel0,\n\t\t\ttextModelN,\n\t\t\tagent,\n\t\t\tstore.add(new SessionWholeRange(textModelN, wholeRange)),\n\t\t\tstore.add(new HunkData(this._editorWorkerService, textModel0, textModelN)),\n\t\t\tchatModel,\n\t\t\toptions.session?.versionsByRequest,\n\t\t);\n\n\t\t// store: key -> session\n\t\tconst key = this._key(editor, session.targetUri);\n\t\tif (this._sessions.has(key)) {\n\t\t\tstore.dispose();\n\t\t\tthrow new Error(`Session already stored for ${key}`);\n\t\t}\n\t\tthis._sessions.set(key, { session, editor, store });\n\t\treturn session;\n\t}\n\n\tmoveSession(session: Session, target: ICodeEditor): void {\n\t\tconst newKey = this._key(target, session.targetUri);\n\t\tconst existing = this._sessions.get(newKey);\n\t\tif (existing) {\n\t\t\tif (existing.session !== session) {\n\t\t\t\tthrow new Error(`Cannot move session because the target editor already/still has one`);\n\t\t\t} else {\n\t\t\t\t// noop\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet found = false;\n\t\tfor (const [oldKey, data] of this._sessions) {\n\t\t\tif (data.session === session) {\n\t\t\t\tfound = true;\n\t\t\t\tthis._sessions.delete(oldKey);\n\t\t\t\tthis._sessions.set(newKey, { ...data, editor: target });\n\t\t\t\tthis._logService.trace(`[IE] did MOVE session for ${data.editor.getId()} to NEW EDITOR ${target.getId()}, ${session.agent.extensionId}`);\n\t\t\t\tthis._onDidMoveSession.fire({ session, editor: target });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tthrow new Error(`Cannot move session because it is not stored`);\n\t\t}\n\t}\n\n\treleaseSession(session: Session): void {\n\t\tthis._releaseSession(session, false);\n\t}\n\n\tprivate _releaseSession(session: Session, byServer: boolean): void {\n\n\t\tlet tuple: [string, SessionData] | undefined;\n\n\t\t// cleanup\n\t\tfor (const candidate of this._sessions) {\n\t\t\tif (candidate[1].session === session) {\n\t\t\t\t// if (value.session === session) {\n\t\t\t\ttuple = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!tuple) {\n\t\t\t// double remove\n\t\t\treturn;\n\t\t}\n\n\t\tthis._telemetryService.publicLog2<TelemetryData, TelemetryDataClassification>('interactiveEditor/session', session.asTelemetryData());\n\n\t\tconst [key, value] = tuple;\n\t\tthis._sessions.delete(key);\n\t\tthis._logService.trace(`[IE] did RELEASED session for ${value.editor.getId()}, ${session.agent.extensionId}`);\n\n\t\tthis._onDidEndSession.fire({ editor: value.editor, session, endedByExternalCause: byServer });\n\t\tvalue.store.dispose();\n\t}\n\n\tstashSession(session: Session, editor: ICodeEditor, undoCancelEdits: IValidEditOperation[]): StashedSession {\n\t\tconst result = this._instaService.createInstance(StashedSession, editor, session, undoCancelEdits);\n\t\tthis._onDidStashSession.fire({ editor, session });\n\t\tthis._logService.trace(`[IE] did STASH session for ${editor.getId()}, ${session.agent.extensionId}`);\n\t\treturn result;\n\t}\n\n\tgetCodeEditor(session: Session): ICodeEditor {\n\t\tfor (const [, data] of this._sessions) {\n\t\t\tif (data.session === session) {\n\t\t\t\treturn data.editor;\n\t\t\t}\n\t\t}\n\t\tthrow new Error('session not found');\n\t}\n\n\tgetSession(editor: ICodeEditor, uri: URI): Session | undefined {\n\t\tconst key = this._key(editor, uri);\n\t\treturn this._sessions.get(key)?.session;\n\t}\n\n\tprivate _key(editor: ICodeEditor, uri: URI): string {\n\t\tconst item = this._keyComputers.get(uri.scheme);\n\t\treturn item\n\t\t\t? item.getComparisonKey(editor, uri)\n\t\t\t: `${editor.getId()}@${uri.toString()}`;\n\n\t}\n\n\tregisterSessionKeyComputer(scheme: string, value: ISessionKeyComputer): IDisposable {\n\t\tthis._keyComputers.set(scheme, value);\n\t\treturn toDisposable(() => this._keyComputers.delete(scheme));\n\t}\n}\n\nexport class InlineChatEnabler {\n\n\tstatic Id = 'inlineChat.enabler';\n\n\tprivate readonly _ctxHasProvider: IContextKey<boolean>;\n\n\tprivate readonly _store = new DisposableStore();\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService\n\t) {\n\t\tthis._ctxHasProvider = CTX_INLINE_CHAT_HAS_AGENT.bindTo(contextKeyService);\n\t\tthis._store.add(chatAgentService.onDidChangeAgents(() => {\n\t\t\tconst hasEditorAgent = Boolean(chatAgentService.getDefaultAgent(ChatAgentLocation.Editor));\n\t\t\tthis._ctxHasProvider.set(hasEditorAgent);\n\t\t}));\n\t}\n\n\tdispose() {\n\t\tthis._ctxHasProvider.reset();\n\t\tthis._store.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
