var N=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var y=(S,e,t,i)=>{for(var s=i>1?void 0:i?O(e,t):e,o=S.length-1,r;o>=0;o--)(r=S[o])&&(s=(i?r(e,t,s):r(s))||s);return i&&s&&N(e,t,s),s},a=(S,e)=>(t,i)=>e(t,i,S);import"../../../../base/common/cancellation.js";import{Emitter as p,Event as $}from"../../../../base/common/event.js";import{DisposableStore as C,MutableDisposable as P,toDisposable as w}from"../../../../base/common/lifecycle.js";import{Schemas as x}from"../../../../base/common/network.js";import"../../../../base/common/uri.js";import{generateUuid as U}from"../../../../base/common/uuid.js";import{isCodeEditor as K,isCompositeEditor as W,isDiffEditor as F}from"../../../../editor/browser/editorBrowser.js";import{Range as H}from"../../../../editor/common/core/range.js";import"../../../../editor/common/model.js";import{createTextBufferFactoryFromSnapshot as q}from"../../../../editor/common/model/textModel.js";import{IEditorWorkerService as B}from"../../../../editor/common/services/editorWorker.js";import{IModelService as V}from"../../../../editor/common/services/model.js";import{ITextModelService as G}from"../../../../editor/common/services/resolverService.js";import{IContextKeyService as X}from"../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as j}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as z}from"../../../../platform/log/common/log.js";import{ITelemetryService as J}from"../../../../platform/telemetry/common/telemetry.js";import{DEFAULT_EDITOR_ASSOCIATION as Q}from"../../../common/editor.js";import{ChatAgentLocation as D,IChatAgentService as T}from"../../chat/common/chatAgents.js";import{IChatService as Y}from"../../chat/common/chatService.js";import{CTX_INLINE_CHAT_HAS_AGENT as Z,CTX_INLINE_CHAT_POSSIBLE as ee}from"../common/inlineChat.js";import{IEditorService as k}from"../../../services/editor/common/editorService.js";import{UntitledTextEditorInput as te}from"../../../services/untitled/common/untitledTextEditorInput.js";import{HunkData as ie,Session as se,SessionWholeRange as oe,StashedSession as re}from"./inlineChatSession.js";import"./inlineChatSessionService.js";import{isEqual as ne}from"../../../../base/common/resources.js";import{ILanguageService as ae}from"../../../../editor/common/languages/language.js";import{ITextFileService as de}from"../../../services/textfile/common/textfiles.js";class b extends Error{static code="InlineChatError";constructor(e){super(e),this.name=b.code}}let _=class{constructor(e,t,i,s,o,r,n,c,m,M,I){this._telemetryService=e;this._modelService=t;this._textModelService=i;this._editorWorkerService=s;this._logService=o;this._instaService=r;this._editorService=n;this._textFileService=c;this._languageService=m;this._chatService=M;this._chatAgentService=I}_store=new C;_onWillStartSession=this._store.add(new p);onWillStartSession=this._onWillStartSession.event;_onDidMoveSession=this._store.add(new p);onDidMoveSession=this._onDidMoveSession.event;_onDidEndSession=this._store.add(new p);onDidEndSession=this._onDidEndSession.event;_onDidStashSession=this._store.add(new p);onDidStashSession=this._onDidStashSession.event;_sessions=new Map;_keyComputers=new Map;dispose(){this._store.dispose(),this._sessions.forEach(e=>e.store.dispose()),this._sessions.clear()}async createSession(e,t,i){const s=this._chatAgentService.getDefaultAgent(D.Editor);if(!s){this._logService.trace("[IE] NO agent found");return}this._onWillStartSession.fire(e);const o=e.getModel(),r=e.getSelection(),n=new C;this._logService.trace(`[IE] creating NEW session for ${e.getId()}, ${s.extensionId}`);const c=t.session?.chatModel??this._chatService.startSession(D.Editor,i);if(!c){this._logService.trace("[IE] NO chatModel found");return}n.add(w(()=>{[...this._sessions.values()].some(h=>h.session!==d&&h.session.chatModel===c)||(this._chatService.clearSession(c.sessionId),c.dispose())}));const m=n.add(new P);n.add(c.onDidChange(l=>{if(l.kind!=="addRequest"||!l.request.response)return;const{response:h}=l.request;d.markModelVersion(l.request),m.value=h.onDidChange(()=>{if(h.isComplete){m.clear();for(const v of h.response.value){if(v.kind!=="textEditGroup"||v.uri.scheme!==x.untitled||ne(v.uri,d.textModelN.uri))continue;const R=this._languageService.createByFilepathOrFirstLine(v.uri,void 0);this._textFileService.untitled.create({associatedResource:v.uri,languageId:R.languageId}).resolve(),this._textModelService.createModelReference(v.uri).then(L=>{n.add(L)})}}})})),n.add(this._chatAgentService.onDidChangeAgents(l=>{l===void 0&&(!this._chatAgentService.getAgent(s.id)||!this._chatAgentService.getActivatedAgents().includes(s))&&(this._logService.trace(`[IE] provider GONE for ${e.getId()}, ${s.extensionId}`),this._releaseSession(d,!0))}));const M=U(),I=o.uri;n.add(await this._textModelService.createModelReference(o.uri));const g=o,A=n.add(this._modelService.createModel(q(o.createSnapshot()),{languageId:o.getLanguageId(),onDidChange:$.None},I.with({scheme:x.vscode,authority:"inline-chat",path:"",query:new URLSearchParams({id:M,textModel0:""}).toString()}),!0));I.scheme===x.untitled&&n.add(this._editorService.onDidCloseEditor(()=>{this._editorService.isOpened({resource:I,typeId:te.ID,editorId:Q.id})||this._releaseSession(d,!0)}));let f=t.wholeRange;if(f||(f=new H(r.selectionStartLineNumber,r.selectionStartColumn,r.positionLineNumber,r.positionColumn)),i.isCancellationRequested){n.dispose();return}const d=new se(t.editMode,t.headless??!1,I,A,g,s,n.add(new oe(g,f)),n.add(new ie(this._editorWorkerService,A,g)),c,t.session?.versionsByRequest),E=this._key(e,d.targetUri);if(this._sessions.has(E))throw n.dispose(),new Error(`Session already stored for ${E}`);return this._sessions.set(E,{session:d,editor:e,store:n}),d}moveSession(e,t){const i=this._key(t,e.targetUri),s=this._sessions.get(i);if(s){if(s.session!==e)throw new Error("Cannot move session because the target editor already/still has one");return}let o=!1;for(const[r,n]of this._sessions)if(n.session===e){o=!0,this._sessions.delete(r),this._sessions.set(i,{...n,editor:t}),this._logService.trace(`[IE] did MOVE session for ${n.editor.getId()} to NEW EDITOR ${t.getId()}, ${e.agent.extensionId}`),this._onDidMoveSession.fire({session:e,editor:t});break}if(!o)throw new Error("Cannot move session because it is not stored")}releaseSession(e){this._releaseSession(e,!1)}_releaseSession(e,t){let i;for(const r of this._sessions)if(r[1].session===e){i=r;break}if(!i)return;this._telemetryService.publicLog2("interactiveEditor/session",e.asTelemetryData());const[s,o]=i;this._sessions.delete(s),this._logService.trace(`[IE] did RELEASED session for ${o.editor.getId()}, ${e.agent.extensionId}`),this._onDidEndSession.fire({editor:o.editor,session:e,endedByExternalCause:t}),o.store.dispose()}stashSession(e,t,i){const s=this._instaService.createInstance(re,t,e,i);return this._onDidStashSession.fire({editor:t,session:e}),this._logService.trace(`[IE] did STASH session for ${t.getId()}, ${e.agent.extensionId}`),s}getCodeEditor(e){for(const[,t]of this._sessions)if(t.session===e)return t.editor;throw new Error("session not found")}getSession(e,t){const i=this._key(e,t);return this._sessions.get(i)?.session}_key(e,t){const i=this._keyComputers.get(t.scheme);return i?i.getComparisonKey(e,t):`${e.getId()}@${t.toString()}`}registerSessionKeyComputer(e,t){return this._keyComputers.set(e,t),w(()=>this._keyComputers.delete(e))}};_=y([a(0,J),a(1,V),a(2,G),a(3,B),a(4,z),a(5,j),a(6,k),a(7,de),a(8,ae),a(9,Y),a(10,T)],_);let u=class{static Id="inlineChat.enabler";_ctxHasProvider;_ctxPossible;_store=new C;constructor(e,t,i){this._ctxHasProvider=Z.bindTo(e),this._ctxPossible=ee.bindTo(e);const s=()=>{const r=!!t.getDefaultAgent(D.Editor);this._ctxHasProvider.set(r)};this._store.add(t.onDidChangeAgents(s)),s();const o=()=>{const r=i.activeEditorPane?.getControl(),n=K(r)||F(r)||W(r);this._ctxPossible.set(n)};this._store.add(i.onDidActiveEditorChange(o)),o()}dispose(){this._ctxPossible.reset(),this._ctxHasProvider.reset(),this._store.dispose()}};u=y([a(0,X),a(1,T),a(2,k)],u);export{u as InlineChatEnabler,b as InlineChatError,_ as InlineChatSessionServiceImpl};
