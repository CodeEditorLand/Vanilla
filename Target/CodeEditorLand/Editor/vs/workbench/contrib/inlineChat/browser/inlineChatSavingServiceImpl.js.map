{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatSavingServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue, raceCancellation } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { DisposableStore, IDisposable, MutableDisposable, combinedDisposable, dispose } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor, isCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IProgress, IProgressStep } from '../../../../platform/progress/common/progress.js';\nimport { SaveReason } from '../../../common/editor.js';\nimport { Session } from './inlineChatSession.js';\nimport { IInlineChatSessionService } from './inlineChatSessionService.js';\nimport { InlineChatConfigKeys } from '../common/inlineChat.js';\nimport { GroupsOrder, IEditorGroup, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { IInlineChatSavingService } from './inlineChatSavingService.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { IResourceEditorInput } from '../../../../platform/editor/common/editor.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { CellUri } from '../../notebook/common/notebookCommon.js';\nimport { getNotebookEditorFromEditorPane } from '../../notebook/browser/notebookBrowser.js';\nimport { compare } from '../../../../base/common/strings.js';\nimport { IWorkingCopyFileService } from '../../../services/workingCopy/common/workingCopyFileService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { InlineChatController } from './inlineChatController.js';\n\ninterface SessionData {\n\treadonly resourceUri: URI;\n\treadonly dispose: () => void;\n\treadonly session: Session;\n\treadonly groupCandidate: IEditorGroup;\n}\n\nexport class InlineChatSavingServiceImpl implements IInlineChatSavingService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _saveParticipant = this._store.add(new MutableDisposable());\n\tprivate readonly _sessionData = new Map<Session, SessionData>();\n\n\tconstructor(\n\t\t@IFilesConfigurationService private readonly _fileConfigService: IFilesConfigurationService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInlineChatSessionService private readonly _inlineChatSessionService: IInlineChatSessionService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t\t@IWorkingCopyFileService private readonly _workingCopyFileService: IWorkingCopyFileService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._store.add(Event.any(_inlineChatSessionService.onDidEndSession, _inlineChatSessionService.onDidStashSession)(e => {\n\t\t\tthis._sessionData.get(e.session)?.dispose();\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._store.dispose();\n\t\tdispose(this._sessionData.values());\n\t}\n\n\tmarkChanged(session: Session): void {\n\t\tif (!this._sessionData.has(session)) {\n\n\t\t\tlet uri = session.targetUri;\n\n\t\t\t// notebooks: use the notebook-uri because saving happens on the notebook-level\n\t\t\tif (uri.scheme === Schemas.vscodeNotebookCell) {\n\t\t\t\tconst data = CellUri.parse(uri);\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\turi = data?.notebook;\n\t\t\t}\n\n\t\t\tif (this._sessionData.size === 0) {\n\t\t\t\tthis._installSaveParticpant();\n\t\t\t}\n\n\t\t\tconst saveConfigOverride = this._fileConfigService.disableAutoSave(uri);\n\t\t\tthis._sessionData.set(session, {\n\t\t\t\tresourceUri: uri,\n\t\t\t\tgroupCandidate: this._editorGroupService.activeGroup,\n\t\t\t\tsession,\n\t\t\t\tdispose: () => {\n\t\t\t\t\tsaveConfigOverride.dispose();\n\t\t\t\t\tthis._sessionData.delete(session);\n\t\t\t\t\tif (this._sessionData.size === 0) {\n\t\t\t\t\t\tthis._saveParticipant.clear();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _installSaveParticpant(): void {\n\n\t\tconst queue = new Queue<void>();\n\n\t\tconst d1 = this._textFileService.files.addSaveParticipant({\n\t\t\tparticipate: (model, ctx, progress, token) => {\n\t\t\t\treturn queue.queue(() => this._participate(ctx.savedFrom ?? model.textEditorModel?.uri, ctx.reason, progress, token));\n\t\t\t}\n\t\t});\n\t\tconst d2 = this._workingCopyFileService.addSaveParticipant({\n\t\t\tparticipate: (workingCopy, ctx, progress, token) => {\n\t\t\t\treturn queue.queue(() => this._participate(ctx.savedFrom ?? workingCopy.resource, ctx.reason, progress, token));\n\t\t\t}\n\t\t});\n\t\tthis._saveParticipant.value = combinedDisposable(d1, d2, queue);\n\t}\n\n\tprivate async _participate(uri: URI | undefined, reason: SaveReason, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\n\t\tif (reason !== SaveReason.EXPLICIT) {\n\t\t\t// all saves that we are concerned about are explicit\n\t\t\t// because we have disabled auto-save for them\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._configService.getValue<boolean>(InlineChatConfigKeys.AcceptedOrDiscardBeforeSave)) {\n\t\t\t// disabled\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessions = new Map<Session, SessionData>();\n\t\tfor (const [session, data] of this._sessionData) {\n\t\t\tif (uri?.toString() === data.resourceUri.toString()) {\n\t\t\t\tsessions.set(session, data);\n\t\t\t}\n\t\t}\n\n\t\tif (sessions.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tprogress.report({\n\t\t\tmessage: sessions.size === 1\n\t\t\t\t? localize('inlineChat', \"Waiting for Inline Chat changes to be Accepted or Discarded...\")\n\t\t\t\t: localize('inlineChat.N', \"Waiting for Inline Chat changes in {0} editors to be Accepted or Discarded...\", sessions.size)\n\t\t});\n\n\t\t// reveal all sessions in order and also show dangling sessions\n\t\tconst { groups, orphans } = this._getGroupsAndOrphans(sessions.values());\n\t\tconst editorsOpenedAndSessionsEnded = this._openAndWait(groups, token).then(() => {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this._openAndWait(Iterable.map(orphans, s => [this._editorGroupService.activeGroup, s]), token);\n\t\t});\n\n\t\t// fallback: resolve when all sessions for this model have been resolved. this is independent of the editor opening\n\t\tconst allSessionsEnded = this._whenSessionsEnded(Iterable.concat(groups.map(tuple => tuple[1]), orphans), token);\n\n\t\tawait Promise.race([allSessionsEnded, editorsOpenedAndSessionsEnded]);\n\t}\n\n\tprivate _getGroupsAndOrphans(sessions: Iterable<SessionData>) {\n\n\t\tconst groupByEditor = new Map<ICodeEditor, IEditorGroup>();\n\t\tfor (const group of this._editorGroupService.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\tconst candidate = group.activeEditorPane?.getControl();\n\t\t\tif (isCodeEditor(candidate)) {\n\t\t\t\tgroupByEditor.set(candidate, group);\n\t\t\t}\n\t\t}\n\n\t\tconst groups: [IEditorGroup, SessionData][] = [];\n\t\tconst orphans = new Set<SessionData>();\n\n\t\tfor (const data of sessions) {\n\n\t\t\tconst editor = this._inlineChatSessionService.getCodeEditor(data.session);\n\t\t\tconst group = groupByEditor.get(editor);\n\t\t\tif (group) {\n\t\t\t\t// there is only one session per group because all sessions have the same model\n\t\t\t\t// because we save one file.\n\t\t\t\tgroups.push([group, data]);\n\t\t\t} else if (this._editorGroupService.groups.includes(data.groupCandidate)) {\n\t\t\t\t// the group candidate is still there. use it\n\t\t\t\tgroups.push([data.groupCandidate, data]);\n\t\t\t} else {\n\t\t\t\torphans.add(data);\n\t\t\t}\n\t\t}\n\t\treturn { groups, orphans };\n\t}\n\n\tprivate async _openAndWait(groups: Iterable<[IEditorGroup, SessionData]>, token: CancellationToken) {\n\n\t\tconst dataByGroup = new Map<IEditorGroup, SessionData[]>();\n\t\tfor (const [group, data] of groups) {\n\t\t\tlet array = dataByGroup.get(group);\n\t\t\tif (!array) {\n\t\t\t\tarray = [];\n\t\t\t\tdataByGroup.set(group, array);\n\t\t\t}\n\t\t\tarray.push(data);\n\t\t}\n\n\t\tfor (const [group, array] of dataByGroup) {\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tarray.sort((a, b) => compare(a.session.targetUri.toString(), b.session.targetUri.toString()));\n\n\n\t\t\tfor (const data of array) {\n\n\t\t\t\tconst input: IResourceEditorInput = { resource: data.resourceUri };\n\t\t\t\tconst pane = await this._editorService.openEditor(input, group);\n\t\t\t\tlet editor: ICodeEditor | undefined;\n\t\t\t\tif (data.session.targetUri.scheme === Schemas.vscodeNotebookCell) {\n\t\t\t\t\tconst notebookEditor = getNotebookEditorFromEditorPane(pane);\n\t\t\t\t\tconst uriData = CellUri.parse(data.session.targetUri);\n\t\t\t\t\tif (notebookEditor && notebookEditor.hasModel() && uriData) {\n\t\t\t\t\t\tconst cell = notebookEditor.getCellByHandle(uriData.handle);\n\t\t\t\t\t\tif (cell) {\n\t\t\t\t\t\t\tawait notebookEditor.revealRangeInCenterIfOutsideViewportAsync(cell, data.session.wholeRange.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst tuple = notebookEditor.codeEditors.find(tuple => tuple[1].getModel()?.uri.toString() === data.session.targetUri.toString());\n\t\t\t\t\t\teditor = tuple?.[1];\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tif (isCodeEditor(pane?.getControl())) {\n\t\t\t\t\t\teditor = <ICodeEditor>pane.getControl();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!editor) {\n\t\t\t\t\t// PANIC\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._inlineChatSessionService.moveSession(data.session, editor);\n\t\t\t\tInlineChatController.get(editor)?.showSaveHint();\n\t\t\t\tthis._logService.info('WAIT for session to end', editor.getId(), data.session.targetUri.toString());\n\t\t\t\tawait this._whenSessionsEnded(Iterable.single(data), token);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _whenSessionsEnded(iterable: Iterable<SessionData>, token: CancellationToken) {\n\n\t\tconst sessions = new Map<Session, SessionData>();\n\t\tfor (const item of iterable) {\n\t\t\tsessions.set(item.session, item);\n\t\t}\n\n\t\tif (sessions.size === 0) {\n\t\t\t// nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tlet listener: IDisposable | undefined;\n\n\t\tconst whenEnded = new Promise<void>(resolve => {\n\t\t\tlistener = Event.any(this._inlineChatSessionService.onDidEndSession, this._inlineChatSessionService.onDidStashSession)(e => {\n\t\t\t\tconst data = sessions.get(e.session);\n\t\t\t\tif (data) {\n\t\t\t\t\tdata.dispose();\n\t\t\t\t\tsessions.delete(e.session);\n\t\t\t\t\tif (sessions.size === 0) {\n\t\t\t\t\t\tresolve(); // DONE, release waiting\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\ttry {\n\t\t\tawait raceCancellation(whenEnded, token);\n\t\t} finally {\n\t\t\tlistener?.dispose();\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,OAAO,wBAAwB;AACxC,SAAS,yBAAyB;AAClC,SAAS,iBAAiB,aAAa,mBAAmB,oBAAoB,eAAe;AAC7F,SAAS,aAAa,oBAAoB;AAC1C,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,WAAW,qBAAqB;AACzC,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,iCAAiC;AAC1C,SAAS,4BAA4B;AACrC,SAAS,aAAa,cAAc,4BAA4B;AAChE,SAAS,sBAAsB;AAC/B,SAAS,kCAAkC;AAC3C,SAAS,wBAAwB;AACjC,SAAS,gCAAgC;AACzC,SAAS,gBAAgB;AACzB,SAAS,4BAA4B;AACrC,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,uCAAuC;AAChD,SAAS,eAAe;AACxB,SAAS,+BAA+B;AACxC,SAAS,WAAW;AACpB,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,4BAA4B;AAS9B,IAAM,8BAAN,MAAsE;AAAA,EAQ5E,YAC8C,oBACN,qBACJ,kBACF,gBACW,2BACJ,gBACE,yBACZ,aAC7B;AAR4C;AACN;AACJ;AACF;AACW;AACJ;AACE;AACZ;AAE9B,SAAK,OAAO,IAAI,MAAM,IAAI,0BAA0B,iBAAiB,0BAA0B,iBAAiB,EAAE,OAAK;AACtH,WAAK,aAAa,IAAI,EAAE,OAAO,GAAG,QAAQ;AAAA,IAC3C,CAAC,CAAC;AAAA,EACH;AAAA,EA7DD,OAwC6E;AAAA;AAAA;AAAA,EAI3D,SAAS,IAAI,gBAAgB;AAAA,EAC7B,mBAAmB,KAAK,OAAO,IAAI,IAAI,kBAAkB,CAAC;AAAA,EAC1D,eAAe,oBAAI,IAA0B;AAAA,EAiB9D,UAAgB;AACf,SAAK,OAAO,QAAQ;AACpB,YAAQ,KAAK,aAAa,OAAO,CAAC;AAAA,EACnC;AAAA,EAEA,YAAY,SAAwB;AACnC,QAAI,CAAC,KAAK,aAAa,IAAI,OAAO,GAAG;AAEpC,UAAI,MAAM,QAAQ;AAGlB,UAAI,IAAI,WAAW,QAAQ,oBAAoB;AAC9C,cAAM,OAAO,QAAQ,MAAM,GAAG;AAC9B,YAAI,CAAC,MAAM;AACV;AAAA,QACD;AACA,cAAM,MAAM;AAAA,MACb;AAEA,UAAI,KAAK,aAAa,SAAS,GAAG;AACjC,aAAK,uBAAuB;AAAA,MAC7B;AAEA,YAAM,qBAAqB,KAAK,mBAAmB,gBAAgB,GAAG;AACtE,WAAK,aAAa,IAAI,SAAS;AAAA,QAC9B,aAAa;AAAA,QACb,gBAAgB,KAAK,oBAAoB;AAAA,QACzC;AAAA,QACA,SAAS,6BAAM;AACd,6BAAmB,QAAQ;AAC3B,eAAK,aAAa,OAAO,OAAO;AAChC,cAAI,KAAK,aAAa,SAAS,GAAG;AACjC,iBAAK,iBAAiB,MAAM;AAAA,UAC7B;AAAA,QACD,GANS;AAAA,MAOV,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,yBAA+B;AAEtC,UAAM,QAAQ,IAAI,MAAY;AAE9B,UAAM,KAAK,KAAK,iBAAiB,MAAM,mBAAmB;AAAA,MACzD,aAAa,wBAAC,OAAO,KAAK,UAAU,UAAU;AAC7C,eAAO,MAAM,MAAM,MAAM,KAAK,aAAa,IAAI,aAAa,MAAM,iBAAiB,KAAK,IAAI,QAAQ,UAAU,KAAK,CAAC;AAAA,MACrH,GAFa;AAAA,IAGd,CAAC;AACD,UAAM,KAAK,KAAK,wBAAwB,mBAAmB;AAAA,MAC1D,aAAa,wBAAC,aAAa,KAAK,UAAU,UAAU;AACnD,eAAO,MAAM,MAAM,MAAM,KAAK,aAAa,IAAI,aAAa,YAAY,UAAU,IAAI,QAAQ,UAAU,KAAK,CAAC;AAAA,MAC/G,GAFa;AAAA,IAGd,CAAC;AACD,SAAK,iBAAiB,QAAQ,mBAAmB,IAAI,IAAI,KAAK;AAAA,EAC/D;AAAA,EAEA,MAAc,aAAa,KAAsB,QAAoB,UAAoC,OAAyC;AAEjJ,QAAI,WAAW,WAAW,UAAU;AAGnC;AAAA,IACD;AAEA,QAAI,CAAC,KAAK,eAAe,SAAkB,qBAAqB,2BAA2B,GAAG;AAE7F;AAAA,IACD;AAEA,UAAM,WAAW,oBAAI,IAA0B;AAC/C,eAAW,CAAC,SAAS,IAAI,KAAK,KAAK,cAAc;AAChD,UAAI,KAAK,SAAS,MAAM,KAAK,YAAY,SAAS,GAAG;AACpD,iBAAS,IAAI,SAAS,IAAI;AAAA,MAC3B;AAAA,IACD;AAEA,QAAI,SAAS,SAAS,GAAG;AACxB;AAAA,IACD;AAEA,aAAS,OAAO;AAAA,MACf,SAAS,SAAS,SAAS,IACxB,SAAS,cAAc,gEAAgE,IACvF,SAAS,gBAAgB,iFAAiF,SAAS,IAAI;AAAA,IAC3H,CAAC;AAGD,UAAM,EAAE,QAAQ,QAAQ,IAAI,KAAK,qBAAqB,SAAS,OAAO,CAAC;AACvE,UAAM,gCAAgC,KAAK,aAAa,QAAQ,KAAK,EAAE,KAAK,MAAM;AACjF,UAAI,MAAM,yBAAyB;AAClC;AAAA,MACD;AACA,aAAO,KAAK,aAAa,SAAS,IAAI,SAAS,OAAK,CAAC,KAAK,oBAAoB,aAAa,CAAC,CAAC,GAAG,KAAK;AAAA,IACtG,CAAC;AAGD,UAAM,mBAAmB,KAAK,mBAAmB,SAAS,OAAO,OAAO,IAAI,WAAS,MAAM,CAAC,CAAC,GAAG,OAAO,GAAG,KAAK;AAE/G,UAAM,QAAQ,KAAK,CAAC,kBAAkB,6BAA6B,CAAC;AAAA,EACrE;AAAA,EAEQ,qBAAqB,UAAiC;AAE7D,UAAM,gBAAgB,oBAAI,IAA+B;AACzD,eAAW,SAAS,KAAK,oBAAoB,UAAU,YAAY,oBAAoB,GAAG;AACzF,YAAM,YAAY,MAAM,kBAAkB,WAAW;AACrD,UAAI,aAAa,SAAS,GAAG;AAC5B,sBAAc,IAAI,WAAW,KAAK;AAAA,MACnC;AAAA,IACD;AAEA,UAAM,SAAwC,CAAC;AAC/C,UAAM,UAAU,oBAAI,IAAiB;AAErC,eAAW,QAAQ,UAAU;AAE5B,YAAM,SAAS,KAAK,0BAA0B,cAAc,KAAK,OAAO;AACxE,YAAM,QAAQ,cAAc,IAAI,MAAM;AACtC,UAAI,OAAO;AAGV,eAAO,KAAK,CAAC,OAAO,IAAI,CAAC;AAAA,MAC1B,WAAW,KAAK,oBAAoB,OAAO,SAAS,KAAK,cAAc,GAAG;AAEzE,eAAO,KAAK,CAAC,KAAK,gBAAgB,IAAI,CAAC;AAAA,MACxC,OAAO;AACN,gBAAQ,IAAI,IAAI;AAAA,MACjB;AAAA,IACD;AACA,WAAO,EAAE,QAAQ,QAAQ;AAAA,EAC1B;AAAA,EAEA,MAAc,aAAa,QAA+C,OAA0B;AAEnG,UAAM,cAAc,oBAAI,IAAiC;AACzD,eAAW,CAAC,OAAO,IAAI,KAAK,QAAQ;AACnC,UAAI,QAAQ,YAAY,IAAI,KAAK;AACjC,UAAI,CAAC,OAAO;AACX,gBAAQ,CAAC;AACT,oBAAY,IAAI,OAAO,KAAK;AAAA,MAC7B;AACA,YAAM,KAAK,IAAI;AAAA,IAChB;AAEA,eAAW,CAAC,OAAO,KAAK,KAAK,aAAa;AAEzC,UAAI,MAAM,yBAAyB;AAClC;AAAA,MACD;AAEA,YAAM,KAAK,CAAC,GAAG,MAAM,QAAQ,EAAE,QAAQ,UAAU,SAAS,GAAG,EAAE,QAAQ,UAAU,SAAS,CAAC,CAAC;AAG5F,iBAAW,QAAQ,OAAO;AAEzB,cAAM,QAA8B,EAAE,UAAU,KAAK,YAAY;AACjE,cAAM,OAAO,MAAM,KAAK,eAAe,WAAW,OAAO,KAAK;AAC9D,YAAI;AACJ,YAAI,KAAK,QAAQ,UAAU,WAAW,QAAQ,oBAAoB;AACjE,gBAAM,iBAAiB,gCAAgC,IAAI;AAC3D,gBAAM,UAAU,QAAQ,MAAM,KAAK,QAAQ,SAAS;AACpD,cAAI,kBAAkB,eAAe,SAAS,KAAK,SAAS;AAC3D,kBAAM,OAAO,eAAe,gBAAgB,QAAQ,MAAM;AAC1D,gBAAI,MAAM;AACT,oBAAM,eAAe,0CAA0C,MAAM,KAAK,QAAQ,WAAW,KAAK;AAAA,YACnG;AACA,kBAAM,QAAQ,eAAe,YAAY,KAAK,CAAAA,WAASA,OAAM,CAAC,EAAE,SAAS,GAAG,IAAI,SAAS,MAAM,KAAK,QAAQ,UAAU,SAAS,CAAC;AAChI,qBAAS,QAAQ,CAAC;AAAA,UACnB;AAAA,QAED,OAAO;AACN,cAAI,aAAa,MAAM,WAAW,CAAC,GAAG;AACrC,qBAAsB,KAAK,WAAW;AAAA,UACvC;AAAA,QACD;AAEA,YAAI,CAAC,QAAQ;AAEZ;AAAA,QACD;AACA,aAAK,0BAA0B,YAAY,KAAK,SAAS,MAAM;AAC/D,6BAAqB,IAAI,MAAM,GAAG,aAAa;AAC/C,aAAK,YAAY,KAAK,2BAA2B,OAAO,MAAM,GAAG,KAAK,QAAQ,UAAU,SAAS,CAAC;AAClG,cAAM,KAAK,mBAAmB,SAAS,OAAO,IAAI,GAAG,KAAK;AAAA,MAC3D;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,mBAAmB,UAAiC,OAA0B;AAE3F,UAAM,WAAW,oBAAI,IAA0B;AAC/C,eAAW,QAAQ,UAAU;AAC5B,eAAS,IAAI,KAAK,SAAS,IAAI;AAAA,IAChC;AAEA,QAAI,SAAS,SAAS,GAAG;AAExB;AAAA,IACD;AAEA,QAAI;AAEJ,UAAM,YAAY,IAAI,QAAc,aAAW;AAC9C,iBAAW,MAAM,IAAI,KAAK,0BAA0B,iBAAiB,KAAK,0BAA0B,iBAAiB,EAAE,OAAK;AAC3H,cAAM,OAAO,SAAS,IAAI,EAAE,OAAO;AACnC,YAAI,MAAM;AACT,eAAK,QAAQ;AACb,mBAAS,OAAO,EAAE,OAAO;AACzB,cAAI,SAAS,SAAS,GAAG;AACxB,oBAAQ;AAAA,UACT;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAED,QAAI;AACH,YAAM,iBAAiB,WAAW,KAAK;AAAA,IACxC,UAAE;AACD,gBAAU,QAAQ;AAAA,IACnB;AAAA,EACD;AACD;AApPa,8BAAN;AAAA,EASJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAhBU;",
  "names": ["tuple"]
}
