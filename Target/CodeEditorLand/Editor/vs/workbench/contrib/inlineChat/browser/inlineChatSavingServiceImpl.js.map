{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatSavingServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue, raceCancellation } from \"../../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tcombinedDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { compare } from \"../../../../base/common/strings.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\ttype ICodeEditor,\n\tisCodeEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { IResourceEditorInput } from \"../../../../platform/editor/common/editor.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type {\n\tIProgress,\n\tIProgressStep,\n} from \"../../../../platform/progress/common/progress.js\";\nimport { SaveReason } from \"../../../common/editor.js\";\nimport {\n\tGroupsOrder,\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IFilesConfigurationService } from \"../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { ITextFileService } from \"../../../services/textfile/common/textfiles.js\";\nimport { IWorkingCopyFileService } from \"../../../services/workingCopy/common/workingCopyFileService.js\";\nimport { getNotebookEditorFromEditorPane } from \"../../notebook/browser/notebookBrowser.js\";\nimport { CellUri } from \"../../notebook/common/notebookCommon.js\";\nimport { InlineChatConfigKeys } from \"../common/inlineChat.js\";\nimport { InlineChatController } from \"./inlineChatController.js\";\nimport type { IInlineChatSavingService } from \"./inlineChatSavingService.js\";\nimport type { Session } from \"./inlineChatSession.js\";\nimport { IInlineChatSessionService } from \"./inlineChatSessionService.js\";\n\ninterface SessionData {\n\treadonly resourceUri: URI;\n\treadonly dispose: () => void;\n\treadonly session: Session;\n\treadonly groupCandidate: IEditorGroup;\n}\n\nexport class InlineChatSavingServiceImpl implements IInlineChatSavingService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _saveParticipant = this._store.add(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly _sessionData = new Map<Session, SessionData>();\n\n\tconstructor(\n\t\t@IFilesConfigurationService\n\t\tprivate readonly _fileConfigService: IFilesConfigurationService,\n\t\t@IEditorGroupsService\n\t\tprivate readonly _editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInlineChatSessionService\n\t\tprivate readonly _inlineChatSessionService: IInlineChatSessionService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configService: IConfigurationService,\n\t\t@IWorkingCopyFileService\n\t\tprivate readonly _workingCopyFileService: IWorkingCopyFileService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._store.add(\n\t\t\tEvent.any(\n\t\t\t\t_inlineChatSessionService.onDidEndSession,\n\t\t\t\t_inlineChatSessionService.onDidStashSession,\n\t\t\t)((e) => {\n\t\t\t\tthis._sessionData.get(e.session)?.dispose();\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis._store.dispose();\n\t\tdispose(this._sessionData.values());\n\t}\n\n\tmarkChanged(session: Session): void {\n\t\tif (!this._sessionData.has(session)) {\n\t\t\tlet uri = session.targetUri;\n\n\t\t\t// notebooks: use the notebook-uri because saving happens on the notebook-level\n\t\t\tif (uri.scheme === Schemas.vscodeNotebookCell) {\n\t\t\t\tconst data = CellUri.parse(uri);\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\turi = data?.notebook;\n\t\t\t}\n\n\t\t\tif (this._sessionData.size === 0) {\n\t\t\t\tthis._installSaveParticpant();\n\t\t\t}\n\n\t\t\tconst saveConfigOverride =\n\t\t\t\tthis._fileConfigService.disableAutoSave(uri);\n\t\t\tthis._sessionData.set(session, {\n\t\t\t\tresourceUri: uri,\n\t\t\t\tgroupCandidate: this._editorGroupService.activeGroup,\n\t\t\t\tsession,\n\t\t\t\tdispose: () => {\n\t\t\t\t\tsaveConfigOverride.dispose();\n\t\t\t\t\tthis._sessionData.delete(session);\n\t\t\t\t\tif (this._sessionData.size === 0) {\n\t\t\t\t\t\tthis._saveParticipant.clear();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _installSaveParticpant(): void {\n\t\tconst queue = new Queue<void>();\n\n\t\tconst d1 = this._textFileService.files.addSaveParticipant({\n\t\t\tparticipate: (model, ctx, progress, token) => {\n\t\t\t\treturn queue.queue(() =>\n\t\t\t\t\tthis._participate(\n\t\t\t\t\t\tctx.savedFrom ?? model.textEditorModel?.uri,\n\t\t\t\t\t\tctx.reason,\n\t\t\t\t\t\tprogress,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t\tconst d2 = this._workingCopyFileService.addSaveParticipant({\n\t\t\tparticipate: (workingCopy, ctx, progress, token) => {\n\t\t\t\treturn queue.queue(() =>\n\t\t\t\t\tthis._participate(\n\t\t\t\t\t\tctx.savedFrom ?? workingCopy.resource,\n\t\t\t\t\t\tctx.reason,\n\t\t\t\t\t\tprogress,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t\tthis._saveParticipant.value = combinedDisposable(d1, d2, queue);\n\t}\n\n\tprivate async _participate(\n\t\turi: URI | undefined,\n\t\treason: SaveReason,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tif (reason !== SaveReason.EXPLICIT) {\n\t\t\t// all saves that we are concerned about are explicit\n\t\t\t// because we have disabled auto-save for them\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!this._configService.getValue<boolean>(\n\t\t\t\tInlineChatConfigKeys.AcceptedOrDiscardBeforeSave,\n\t\t\t)\n\t\t) {\n\t\t\t// disabled\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessions = new Map<Session, SessionData>();\n\t\tfor (const [session, data] of this._sessionData) {\n\t\t\tif (uri?.toString() === data.resourceUri.toString()) {\n\t\t\t\tsessions.set(session, data);\n\t\t\t}\n\t\t}\n\n\t\tif (sessions.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tprogress.report({\n\t\t\tmessage:\n\t\t\t\tsessions.size === 1\n\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\"inlineChat\",\n\t\t\t\t\t\t\t\"Waiting for Inline Chat changes to be Accepted or Discarded...\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\"inlineChat.N\",\n\t\t\t\t\t\t\t\"Waiting for Inline Chat changes in {0} editors to be Accepted or Discarded...\",\n\t\t\t\t\t\t\tsessions.size,\n\t\t\t\t\t\t),\n\t\t});\n\n\t\t// reveal all sessions in order and also show dangling sessions\n\t\tconst { groups, orphans } = this._getGroupsAndOrphans(\n\t\t\tsessions.values(),\n\t\t);\n\t\tconst editorsOpenedAndSessionsEnded = this._openAndWait(\n\t\t\tgroups,\n\t\t\ttoken,\n\t\t).then(() => {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this._openAndWait(\n\t\t\t\tIterable.map(orphans, (s) => [\n\t\t\t\t\tthis._editorGroupService.activeGroup,\n\t\t\t\t\ts,\n\t\t\t\t]),\n\t\t\t\ttoken,\n\t\t\t);\n\t\t});\n\n\t\t// fallback: resolve when all sessions for this model have been resolved. this is independent of the editor opening\n\t\tconst allSessionsEnded = this._whenSessionsEnded(\n\t\t\tIterable.concat(\n\t\t\t\tgroups.map((tuple) => tuple[1]),\n\t\t\t\torphans,\n\t\t\t),\n\t\t\ttoken,\n\t\t);\n\n\t\tawait Promise.race([allSessionsEnded, editorsOpenedAndSessionsEnded]);\n\t}\n\n\tprivate _getGroupsAndOrphans(sessions: Iterable<SessionData>) {\n\t\tconst groupByEditor = new Map<ICodeEditor, IEditorGroup>();\n\t\tfor (const group of this._editorGroupService.getGroups(\n\t\t\tGroupsOrder.MOST_RECENTLY_ACTIVE,\n\t\t)) {\n\t\t\tconst candidate = group.activeEditorPane?.getControl();\n\t\t\tif (isCodeEditor(candidate)) {\n\t\t\t\tgroupByEditor.set(candidate, group);\n\t\t\t}\n\t\t}\n\n\t\tconst groups: [IEditorGroup, SessionData][] = [];\n\t\tconst orphans = new Set<SessionData>();\n\n\t\tfor (const data of sessions) {\n\t\t\tconst editor = this._inlineChatSessionService.getCodeEditor(\n\t\t\t\tdata.session,\n\t\t\t);\n\t\t\tconst group = groupByEditor.get(editor);\n\t\t\tif (group) {\n\t\t\t\t// there is only one session per group because all sessions have the same model\n\t\t\t\t// because we save one file.\n\t\t\t\tgroups.push([group, data]);\n\t\t\t} else if (\n\t\t\t\tthis._editorGroupService.groups.includes(data.groupCandidate)\n\t\t\t) {\n\t\t\t\t// the group candidate is still there. use it\n\t\t\t\tgroups.push([data.groupCandidate, data]);\n\t\t\t} else {\n\t\t\t\torphans.add(data);\n\t\t\t}\n\t\t}\n\t\treturn { groups, orphans };\n\t}\n\n\tprivate async _openAndWait(\n\t\tgroups: Iterable<[IEditorGroup, SessionData]>,\n\t\ttoken: CancellationToken,\n\t) {\n\t\tconst dataByGroup = new Map<IEditorGroup, SessionData[]>();\n\t\tfor (const [group, data] of groups) {\n\t\t\tlet array = dataByGroup.get(group);\n\t\t\tif (!array) {\n\t\t\t\tarray = [];\n\t\t\t\tdataByGroup.set(group, array);\n\t\t\t}\n\t\t\tarray.push(data);\n\t\t}\n\n\t\tfor (const [group, array] of dataByGroup) {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tarray.sort((a, b) =>\n\t\t\t\tcompare(\n\t\t\t\t\ta.session.targetUri.toString(),\n\t\t\t\t\tb.session.targetUri.toString(),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tfor (const data of array) {\n\t\t\t\tconst input: IResourceEditorInput = {\n\t\t\t\t\tresource: data.resourceUri,\n\t\t\t\t};\n\t\t\t\tconst pane = await this._editorService.openEditor(input, group);\n\t\t\t\tlet editor: ICodeEditor | undefined;\n\t\t\t\tif (\n\t\t\t\t\tdata.session.targetUri.scheme === Schemas.vscodeNotebookCell\n\t\t\t\t) {\n\t\t\t\t\tconst notebookEditor =\n\t\t\t\t\t\tgetNotebookEditorFromEditorPane(pane);\n\t\t\t\t\tconst uriData = CellUri.parse(data.session.targetUri);\n\t\t\t\t\tif (\n\t\t\t\t\t\tnotebookEditor &&\n\t\t\t\t\t\tnotebookEditor.hasModel() &&\n\t\t\t\t\t\turiData\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst cell = notebookEditor.getCellByHandle(\n\t\t\t\t\t\t\turiData.handle,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (cell) {\n\t\t\t\t\t\t\tawait notebookEditor.revealRangeInCenterIfOutsideViewportAsync(\n\t\t\t\t\t\t\t\tcell,\n\t\t\t\t\t\t\t\tdata.session.wholeRange.value,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst tuple = notebookEditor.codeEditors.find(\n\t\t\t\t\t\t\t(tuple) =>\n\t\t\t\t\t\t\t\ttuple[1].getModel()?.uri.toString() ===\n\t\t\t\t\t\t\t\tdata.session.targetUri.toString(),\n\t\t\t\t\t\t);\n\t\t\t\t\t\teditor = tuple?.[1];\n\t\t\t\t\t}\n\t\t\t\t} else if (isCodeEditor(pane?.getControl())) {\n\t\t\t\t\teditor = <ICodeEditor>pane.getControl();\n\t\t\t\t}\n\n\t\t\t\tif (!editor) {\n\t\t\t\t\t// PANIC\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._inlineChatSessionService.moveSession(\n\t\t\t\t\tdata.session,\n\t\t\t\t\teditor,\n\t\t\t\t);\n\t\t\t\tInlineChatController.get(editor)?.showSaveHint();\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t\"WAIT for session to end\",\n\t\t\t\t\teditor.getId(),\n\t\t\t\t\tdata.session.targetUri.toString(),\n\t\t\t\t);\n\t\t\t\tawait this._whenSessionsEnded(Iterable.single(data), token);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _whenSessionsEnded(\n\t\titerable: Iterable<SessionData>,\n\t\ttoken: CancellationToken,\n\t) {\n\t\tconst sessions = new Map<Session, SessionData>();\n\t\tfor (const item of iterable) {\n\t\t\tsessions.set(item.session, item);\n\t\t}\n\n\t\tif (sessions.size === 0) {\n\t\t\t// nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tlet listener: IDisposable | undefined;\n\n\t\tconst whenEnded = new Promise<void>((resolve) => {\n\t\t\tlistener = Event.any(\n\t\t\t\tthis._inlineChatSessionService.onDidEndSession,\n\t\t\t\tthis._inlineChatSessionService.onDidStashSession,\n\t\t\t)((e) => {\n\t\t\t\tconst data = sessions.get(e.session);\n\t\t\t\tif (data) {\n\t\t\t\t\tdata.dispose();\n\t\t\t\t\tsessions.delete(e.session);\n\t\t\t\t\tif (sessions.size === 0) {\n\t\t\t\t\t\tresolve(); // DONE, release waiting\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\ttry {\n\t\t\tawait raceCancellation(whenEnded, token);\n\t\t} finally {\n\t\t\tlistener?.dispose();\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["tuple"]
}
