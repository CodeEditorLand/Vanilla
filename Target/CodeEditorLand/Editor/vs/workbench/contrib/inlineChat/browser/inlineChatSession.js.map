{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/inlineChat/browser/inlineChatSession.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IIdentifiedSingleEditOperation, IModelDecorationOptions, IModelDeltaDecoration, ITextModel, IValidEditOperation, TrackedRangeStickiness } from '../../../../editor/common/model.js';\nimport { EditMode, CTX_INLINE_CHAT_HAS_STASHED_SESSION } from '../common/inlineChat.js';\nimport { IRange, Range } from '../../../../editor/common/core/range.js';\nimport { ModelDecorationOptions } from '../../../../editor/common/model/textModel.js';\nimport { EditOperation, ISingleEditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { DetailedLineRangeMapping, LineRangeMapping, RangeMapping } from '../../../../editor/common/diff/rangeMapping.js';\nimport { IInlineChatSessionService } from './inlineChatSessionService.js';\nimport { LineRange } from '../../../../editor/common/core/lineRange.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { coalesceInPlace } from '../../../../base/common/arrays.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { IModelContentChangedEvent } from '../../../../editor/common/textModelEvents.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ChatModel, IChatRequestModel, IChatTextEditGroupState } from '../../chat/common/chatModel.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IChatAgent } from '../../chat/common/chatAgents.js';\nimport { IDocumentDiff } from '../../../../editor/common/diff/documentDiffProvider.js';\n\n\nexport type TelemetryData = {\n\textension: string;\n\trounds: string;\n\tundos: string;\n\tunstashed: number;\n\tedits: number;\n\tfinishedByEdit: boolean;\n\tstartTime: string;\n\tendTime: string;\n\teditMode: string;\n\tacceptedHunks: number;\n\tdiscardedHunks: number;\n\tresponseTypes: string;\n};\n\nexport type TelemetryDataClassification = {\n\towner: 'jrieken';\n\tcomment: 'Data about an interaction editor session';\n\textension: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension providing the data' };\n\trounds: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of request that were made' };\n\tundos: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Requests that have been undone' };\n\tedits: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Did edits happen while the session was active' };\n\tunstashed: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'How often did this session become stashed and resumed' };\n\tfinishedByEdit: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Did edits cause the session to terminate' };\n\tstartTime: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'When the session started' };\n\tendTime: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'When the session ended' };\n\teditMode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'What edit mode was choosen: live, livePreview, preview' };\n\tacceptedHunks: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of accepted hunks' };\n\tdiscardedHunks: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of discarded hunks' };\n\tresponseTypes: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Comma separated list of response types like edits, message, mixed' };\n};\n\n\nexport class SessionWholeRange {\n\n\tprivate static readonly _options: IModelDecorationOptions = ModelDecorationOptions.register({ description: 'inlineChat/session/wholeRange' });\n\n\tprivate readonly _onDidChange = new Emitter<this>();\n\treadonly onDidChange: Event<this> = this._onDidChange.event;\n\n\tprivate _decorationIds: string[] = [];\n\n\tconstructor(private readonly _textModel: ITextModel, wholeRange: IRange) {\n\t\tthis._decorationIds = _textModel.deltaDecorations([], [{ range: wholeRange, options: SessionWholeRange._options }]);\n\t}\n\n\tdispose() {\n\t\tthis._onDidChange.dispose();\n\t\tif (!this._textModel.isDisposed()) {\n\t\t\tthis._textModel.deltaDecorations(this._decorationIds, []);\n\t\t}\n\t}\n\n\tfixup(changes: readonly DetailedLineRangeMapping[]): void {\n\n\t\tconst newDeco: IModelDeltaDecoration[] = [];\n\t\tfor (const { modified } of changes) {\n\t\t\tconst modifiedRange = modified.isEmpty\n\t\t\t\t? new Range(modified.startLineNumber, 1, modified.startLineNumber, this._textModel.getLineLength(modified.startLineNumber))\n\t\t\t\t: new Range(modified.startLineNumber, 1, modified.endLineNumberExclusive - 1, this._textModel.getLineLength(modified.endLineNumberExclusive - 1));\n\n\t\t\tnewDeco.push({ range: modifiedRange, options: SessionWholeRange._options });\n\t\t}\n\t\tconst [first, ...rest] = this._decorationIds; // first is the original whole range\n\t\tconst newIds = this._textModel.deltaDecorations(rest, newDeco);\n\t\tthis._decorationIds = [first].concat(newIds);\n\t\tthis._onDidChange.fire(this);\n\t}\n\n\tget trackedInitialRange(): Range {\n\t\tconst [first] = this._decorationIds;\n\t\treturn this._textModel.getDecorationRange(first) ?? new Range(1, 1, 1, 1);\n\t}\n\n\tget value(): Range {\n\t\tlet result: Range | undefined;\n\t\tfor (const id of this._decorationIds) {\n\t\t\tconst range = this._textModel.getDecorationRange(id);\n\t\t\tif (range) {\n\t\t\t\tif (!result) {\n\t\t\t\t\tresult = range;\n\t\t\t\t} else {\n\t\t\t\t\tresult = Range.plusRange(result, range);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result!;\n\t}\n}\n\nexport class Session {\n\n\tprivate _isUnstashed: boolean = false;\n\tprivate readonly _startTime = new Date();\n\tprivate readonly _teldata: TelemetryData;\n\n\tprivate readonly _versionByRequest = new Map<string, number>();\n\n\tconstructor(\n\t\treadonly editMode: EditMode,\n\t\treadonly headless: boolean,\n\t\t/**\n\t\t * The URI of the document which is being EditorEdit\n\t\t */\n\t\treadonly targetUri: URI,\n\t\t/**\n\t\t * A copy of the document at the time the session was started\n\t\t */\n\t\treadonly textModel0: ITextModel,\n\t\t/**\n\t\t * The model of the editor\n\t\t */\n\t\treadonly textModelN: ITextModel,\n\t\treadonly agent: IChatAgent,\n\t\treadonly wholeRange: SessionWholeRange,\n\t\treadonly hunkData: HunkData,\n\t\treadonly chatModel: ChatModel,\n\t\tversionsByRequest?: [string, number][], // DEBT? this is needed when a chat model is \"reused\" for a new chat session\n\t) {\n\n\t\tthis._teldata = {\n\t\t\textension: ExtensionIdentifier.toKey(agent.extensionId),\n\t\t\tstartTime: this._startTime.toISOString(),\n\t\t\tendTime: this._startTime.toISOString(),\n\t\t\tedits: 0,\n\t\t\tfinishedByEdit: false,\n\t\t\trounds: '',\n\t\t\tundos: '',\n\t\t\teditMode,\n\t\t\tunstashed: 0,\n\t\t\tacceptedHunks: 0,\n\t\t\tdiscardedHunks: 0,\n\t\t\tresponseTypes: ''\n\t\t};\n\t\tif (versionsByRequest) {\n\t\t\tthis._versionByRequest = new Map(versionsByRequest);\n\t\t}\n\t}\n\n\tget isUnstashed(): boolean {\n\t\treturn this._isUnstashed;\n\t}\n\n\tmarkUnstashed() {\n\t\tthis._teldata.unstashed! += 1;\n\t\tthis._isUnstashed = true;\n\t}\n\n\tmarkModelVersion(request: IChatRequestModel) {\n\t\tthis._versionByRequest.set(request.id, this.textModelN.getAlternativeVersionId());\n\t}\n\n\tget versionsByRequest() {\n\t\treturn Array.from(this._versionByRequest);\n\t}\n\n\tasync undoChangesUntil(requestId: string): Promise<boolean> {\n\n\t\tconst targetAltVersion = this._versionByRequest.get(requestId);\n\t\tif (targetAltVersion === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\t// undo till this point\n\t\tthis.hunkData.ignoreTextModelNChanges = true;\n\t\ttry {\n\t\t\twhile (targetAltVersion < this.textModelN.getAlternativeVersionId() && this.textModelN.canUndo()) {\n\t\t\t\tawait this.textModelN.undo();\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.hunkData.ignoreTextModelNChanges = false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tget hasChangedText(): boolean {\n\t\treturn !this.textModel0.equalsTextBuffer(this.textModelN.getTextBuffer());\n\t}\n\n\tasChangedText(changes: readonly LineRangeMapping[]): string | undefined {\n\t\tif (changes.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet startLine = Number.MAX_VALUE;\n\t\tlet endLine = Number.MIN_VALUE;\n\t\tfor (const change of changes) {\n\t\t\tstartLine = Math.min(startLine, change.modified.startLineNumber);\n\t\t\tendLine = Math.max(endLine, change.modified.endLineNumberExclusive);\n\t\t}\n\n\t\treturn this.textModelN.getValueInRange(new Range(startLine, 1, endLine, Number.MAX_VALUE));\n\t}\n\n\trecordExternalEditOccurred(didFinish: boolean) {\n\t\tthis._teldata.edits += 1;\n\t\tthis._teldata.finishedByEdit = didFinish;\n\t}\n\n\tasTelemetryData(): TelemetryData {\n\n\t\tfor (const item of this.hunkData.getInfo()) {\n\t\t\tswitch (item.getState()) {\n\t\t\t\tcase HunkState.Accepted:\n\t\t\t\t\tthis._teldata.acceptedHunks += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase HunkState.Rejected:\n\t\t\t\t\tthis._teldata.discardedHunks += 1;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._teldata.endTime = new Date().toISOString();\n\t\treturn this._teldata;\n\t}\n}\n\n\nexport class StashedSession {\n\n\tprivate readonly _listener: IDisposable;\n\tprivate readonly _ctxHasStashedSession: IContextKey<boolean>;\n\tprivate _session: Session | undefined;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\tsession: Session,\n\t\tprivate readonly _undoCancelEdits: IValidEditOperation[],\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInlineChatSessionService private readonly _sessionService: IInlineChatSessionService,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tthis._ctxHasStashedSession = CTX_INLINE_CHAT_HAS_STASHED_SESSION.bindTo(contextKeyService);\n\n\t\t// keep session for a little bit, only release when user continues to work (type, move cursor, etc.)\n\t\tthis._session = session;\n\t\tthis._ctxHasStashedSession.set(true);\n\t\tthis._listener = Event.once(Event.any(editor.onDidChangeCursorSelection, editor.onDidChangeModelContent, editor.onDidChangeModel, editor.onDidBlurEditorWidget))(() => {\n\t\t\tthis._session = undefined;\n\t\t\tthis._sessionService.releaseSession(session);\n\t\t\tthis._ctxHasStashedSession.reset();\n\t\t});\n\t}\n\n\tdispose() {\n\t\tthis._listener.dispose();\n\t\tthis._ctxHasStashedSession.reset();\n\t\tif (this._session) {\n\t\t\tthis._sessionService.releaseSession(this._session);\n\t\t}\n\t}\n\n\tunstash(): Session | undefined {\n\t\tif (!this._session) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._listener.dispose();\n\t\tconst result = this._session;\n\t\tresult.markUnstashed();\n\t\tresult.hunkData.ignoreTextModelNChanges = true;\n\t\tresult.textModelN.pushEditOperations(null, this._undoCancelEdits, () => null);\n\t\tresult.hunkData.ignoreTextModelNChanges = false;\n\t\tthis._session = undefined;\n\t\tthis._logService.debug('[IE] Unstashed session');\n\t\treturn result;\n\t}\n}\n\n// ---\n\nfunction lineRangeAsRange(lineRange: LineRange, model: ITextModel): Range {\n\treturn lineRange.isEmpty\n\t\t? new Range(lineRange.startLineNumber, 1, lineRange.startLineNumber, model.getLineLength(lineRange.startLineNumber))\n\t\t: new Range(lineRange.startLineNumber, 1, lineRange.endLineNumberExclusive - 1, model.getLineLength(lineRange.endLineNumberExclusive - 1));\n}\n\nexport class HunkData {\n\n\tprivate static readonly _HUNK_TRACKED_RANGE = ModelDecorationOptions.register({\n\t\tdescription: 'inline-chat-hunk-tracked-range',\n\t\tstickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n\t});\n\n\tprivate static readonly _HUNK_THRESHOLD = 8;\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _data = new Map<RawHunk, RawHunkData>();\n\tprivate _ignoreChanges: boolean = false;\n\n\tconstructor(\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,\n\t\tprivate readonly _textModel0: ITextModel,\n\t\tprivate readonly _textModelN: ITextModel,\n\t) {\n\n\t\tthis._store.add(_textModelN.onDidChangeContent(e => {\n\t\t\tif (!this._ignoreChanges) {\n\t\t\t\tthis._mirrorChanges(e);\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tif (!this._textModelN.isDisposed()) {\n\t\t\tthis._textModelN.changeDecorations(accessor => {\n\t\t\t\tfor (const { textModelNDecorations } of this._data.values()) {\n\t\t\t\t\ttextModelNDecorations.forEach(accessor.removeDecoration, accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (!this._textModel0.isDisposed()) {\n\t\t\tthis._textModel0.changeDecorations(accessor => {\n\t\t\t\tfor (const { textModel0Decorations } of this._data.values()) {\n\t\t\t\t\ttextModel0Decorations.forEach(accessor.removeDecoration, accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis._data.clear();\n\t\tthis._store.dispose();\n\t}\n\n\tset ignoreTextModelNChanges(value: boolean) {\n\t\tthis._ignoreChanges = value;\n\t}\n\n\tget ignoreTextModelNChanges(): boolean {\n\t\treturn this._ignoreChanges;\n\t}\n\n\tprivate _mirrorChanges(event: IModelContentChangedEvent) {\n\n\t\t// mirror textModelN changes to textModel0 execept for those that\n\t\t// overlap with a hunk\n\n\t\ttype HunkRangePair = { rangeN: Range; range0: Range; markAccepted: () => void };\n\t\tconst hunkRanges: HunkRangePair[] = [];\n\n\t\tconst ranges0: Range[] = [];\n\n\t\tfor (const entry of this._data.values()) {\n\n\t\t\tif (entry.state === HunkState.Pending) {\n\t\t\t\t// pending means the hunk's changes aren't \"sync'd\" yet\n\t\t\t\tfor (let i = 1; i < entry.textModelNDecorations.length; i++) {\n\t\t\t\t\tconst rangeN = this._textModelN.getDecorationRange(entry.textModelNDecorations[i]);\n\t\t\t\t\tconst range0 = this._textModel0.getDecorationRange(entry.textModel0Decorations[i]);\n\t\t\t\t\tif (rangeN && range0) {\n\t\t\t\t\t\thunkRanges.push({\n\t\t\t\t\t\t\trangeN, range0,\n\t\t\t\t\t\t\tmarkAccepted: () => entry.state = HunkState.Accepted\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (entry.state === HunkState.Accepted) {\n\t\t\t\t// accepted means the hunk's changes are also in textModel0\n\t\t\t\tfor (let i = 1; i < entry.textModel0Decorations.length; i++) {\n\t\t\t\t\tconst range = this._textModel0.getDecorationRange(entry.textModel0Decorations[i]);\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tranges0.push(range);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\thunkRanges.sort((a, b) => Range.compareRangesUsingStarts(a.rangeN, b.rangeN));\n\t\tranges0.sort(Range.compareRangesUsingStarts);\n\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (const change of event.changes) {\n\n\t\t\tlet isOverlapping = false;\n\n\t\t\tlet pendingChangesLen = 0;\n\n\t\t\tfor (const entry of hunkRanges) {\n\t\t\t\tif (entry.rangeN.getEndPosition().isBefore(Range.getStartPosition(change.range))) {\n\t\t\t\t\t// pending hunk _before_ this change. When projecting into textModel0 we need to\n\t\t\t\t\t// subtract that. Because diffing is relaxed it might include changes that are not\n\t\t\t\t\t// actual insertions/deletions. Therefore we need to take the length of the original\n\t\t\t\t\t// range into account.\n\t\t\t\t\tpendingChangesLen += this._textModelN.getValueLengthInRange(entry.rangeN);\n\t\t\t\t\tpendingChangesLen -= this._textModel0.getValueLengthInRange(entry.range0);\n\n\t\t\t\t} else if (Range.areIntersectingOrTouching(entry.rangeN, change.range)) {\n\t\t\t\t\t// an edit overlaps with a (pending) hunk. We take this as a signal\n\t\t\t\t\t// to mark the hunk as accepted and to ignore the edit. The range of the hunk\n\t\t\t\t\t// will be up-to-date because of decorations created for them\n\t\t\t\t\tentry.markAccepted();\n\t\t\t\t\tisOverlapping = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else {\n\t\t\t\t\t// hunks past this change aren't relevant\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isOverlapping) {\n\t\t\t\t// hunk overlaps, it grew\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst offset0 = change.rangeOffset - pendingChangesLen;\n\t\t\tconst start0 = this._textModel0.getPositionAt(offset0);\n\n\t\t\tlet acceptedChangesLen = 0;\n\t\t\tfor (const range of ranges0) {\n\t\t\t\tif (range.getEndPosition().isBefore(start0)) {\n\t\t\t\t\t// accepted hunk _before_ this projected change. When projecting into textModel0\n\t\t\t\t\t// we need to add that\n\t\t\t\t\tacceptedChangesLen += this._textModel0.getValueLengthInRange(range);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst start = this._textModel0.getPositionAt(offset0 + acceptedChangesLen);\n\t\t\tconst end = this._textModel0.getPositionAt(offset0 + acceptedChangesLen + change.rangeLength);\n\t\t\tedits.push(EditOperation.replace(Range.fromPositions(start, end), change.text));\n\t\t}\n\n\t\tthis._textModel0.pushEditOperations(null, edits, () => null);\n\t}\n\n\tasync recompute(editState: IChatTextEditGroupState, diff?: IDocumentDiff | null) {\n\n\t\tdiff ??= await this._editorWorkerService.computeDiff(this._textModel0.uri, this._textModelN.uri, { ignoreTrimWhitespace: false, maxComputationTimeMs: Number.MAX_SAFE_INTEGER, computeMoves: false }, 'advanced');\n\n\t\tlet mergedChanges: DetailedLineRangeMapping[] = [];\n\n\t\tif (diff && diff.changes.length > 0) {\n\t\t\t// merge changes neighboring changes\n\t\t\tmergedChanges = [diff.changes[0]];\n\t\t\tfor (let i = 1; i < diff.changes.length; i++) {\n\t\t\t\tconst lastChange = mergedChanges[mergedChanges.length - 1];\n\t\t\t\tconst thisChange = diff.changes[i];\n\t\t\t\tif (thisChange.modified.startLineNumber - lastChange.modified.endLineNumberExclusive <= HunkData._HUNK_THRESHOLD) {\n\t\t\t\t\tmergedChanges[mergedChanges.length - 1] = new DetailedLineRangeMapping(\n\t\t\t\t\t\tlastChange.original.join(thisChange.original),\n\t\t\t\t\t\tlastChange.modified.join(thisChange.modified),\n\t\t\t\t\t\t(lastChange.innerChanges ?? []).concat(thisChange.innerChanges ?? [])\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tmergedChanges.push(thisChange);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst hunks = mergedChanges.map(change => new RawHunk(change.original, change.modified, change.innerChanges ?? []));\n\n\t\teditState.applied = hunks.length;\n\n\t\tthis._textModelN.changeDecorations(accessorN => {\n\n\t\t\tthis._textModel0.changeDecorations(accessor0 => {\n\n\t\t\t\t// clean up old decorations\n\t\t\t\tfor (const { textModelNDecorations, textModel0Decorations } of this._data.values()) {\n\t\t\t\t\ttextModelNDecorations.forEach(accessorN.removeDecoration, accessorN);\n\t\t\t\t\ttextModel0Decorations.forEach(accessor0.removeDecoration, accessor0);\n\t\t\t\t}\n\n\t\t\t\tthis._data.clear();\n\n\t\t\t\t// add new decorations\n\t\t\t\tfor (const hunk of hunks) {\n\n\t\t\t\t\tconst textModelNDecorations: string[] = [];\n\t\t\t\t\tconst textModel0Decorations: string[] = [];\n\n\t\t\t\t\ttextModelNDecorations.push(accessorN.addDecoration(lineRangeAsRange(hunk.modified, this._textModelN), HunkData._HUNK_TRACKED_RANGE));\n\t\t\t\t\ttextModel0Decorations.push(accessor0.addDecoration(lineRangeAsRange(hunk.original, this._textModel0), HunkData._HUNK_TRACKED_RANGE));\n\n\t\t\t\t\tfor (const change of hunk.changes) {\n\t\t\t\t\t\ttextModelNDecorations.push(accessorN.addDecoration(change.modifiedRange, HunkData._HUNK_TRACKED_RANGE));\n\t\t\t\t\t\ttextModel0Decorations.push(accessor0.addDecoration(change.originalRange, HunkData._HUNK_TRACKED_RANGE));\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._data.set(hunk, {\n\t\t\t\t\t\teditState,\n\t\t\t\t\t\ttextModelNDecorations,\n\t\t\t\t\t\ttextModel0Decorations,\n\t\t\t\t\t\tstate: HunkState.Pending\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tget size(): number {\n\t\treturn this._data.size;\n\t}\n\n\tget pending(): number {\n\t\treturn Iterable.reduce(this._data.values(), (r, { state }) => r + (state === HunkState.Pending ? 1 : 0), 0);\n\t}\n\n\tprivate _discardEdits(item: HunkInformation): ISingleEditOperation[] {\n\t\tconst edits: ISingleEditOperation[] = [];\n\t\tconst rangesN = item.getRangesN();\n\t\tconst ranges0 = item.getRanges0();\n\t\tfor (let i = 1; i < rangesN.length; i++) {\n\t\t\tconst modifiedRange = rangesN[i];\n\n\t\t\tconst originalValue = this._textModel0.getValueInRange(ranges0[i]);\n\t\t\tedits.push(EditOperation.replace(modifiedRange, originalValue));\n\t\t}\n\t\treturn edits;\n\t}\n\n\tdiscardAll() {\n\t\tconst edits: ISingleEditOperation[][] = [];\n\t\tfor (const item of this.getInfo()) {\n\t\t\tif (item.getState() === HunkState.Pending) {\n\t\t\t\tedits.push(this._discardEdits(item));\n\t\t\t}\n\t\t}\n\t\tconst undoEdits: IValidEditOperation[][] = [];\n\t\tthis._textModelN.pushEditOperations(null, edits.flat(), (_undoEdits) => {\n\t\t\tundoEdits.push(_undoEdits);\n\t\t\treturn null;\n\t\t});\n\t\treturn undoEdits.flat();\n\t}\n\n\tgetInfo(): HunkInformation[] {\n\n\t\tconst result: HunkInformation[] = [];\n\n\t\tfor (const [hunk, data] of this._data.entries()) {\n\t\t\tconst item: HunkInformation = {\n\t\t\t\tgetState: () => {\n\t\t\t\t\treturn data.state;\n\t\t\t\t},\n\t\t\t\tisInsertion: () => {\n\t\t\t\t\treturn hunk.original.isEmpty;\n\t\t\t\t},\n\t\t\t\tgetRangesN: () => {\n\t\t\t\t\tconst ranges = data.textModelNDecorations.map(id => this._textModelN.getDecorationRange(id));\n\t\t\t\t\tcoalesceInPlace(ranges);\n\t\t\t\t\treturn ranges;\n\t\t\t\t},\n\t\t\t\tgetRanges0: () => {\n\t\t\t\t\tconst ranges = data.textModel0Decorations.map(id => this._textModel0.getDecorationRange(id));\n\t\t\t\t\tcoalesceInPlace(ranges);\n\t\t\t\t\treturn ranges;\n\t\t\t\t},\n\t\t\t\tdiscardChanges: () => {\n\t\t\t\t\t// DISCARD: replace modified range with original value. The modified range is retrieved from a decoration\n\t\t\t\t\t// which was created above so that typing in the editor keeps discard working.\n\t\t\t\t\tif (data.state === HunkState.Pending) {\n\t\t\t\t\t\tconst edits = this._discardEdits(item);\n\t\t\t\t\t\tthis._textModelN.pushEditOperations(null, edits, () => null);\n\t\t\t\t\t\tdata.state = HunkState.Rejected;\n\t\t\t\t\t\tif (data.editState.applied > 0) {\n\t\t\t\t\t\t\tdata.editState.applied -= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tacceptChanges: () => {\n\t\t\t\t\t// ACCEPT: replace original range with modified value. The modified value is retrieved from the model via\n\t\t\t\t\t// its decoration and the original range is retrieved from the hunk.\n\t\t\t\t\tif (data.state === HunkState.Pending) {\n\t\t\t\t\t\tconst edits: ISingleEditOperation[] = [];\n\t\t\t\t\t\tconst rangesN = item.getRangesN();\n\t\t\t\t\t\tconst ranges0 = item.getRanges0();\n\t\t\t\t\t\tfor (let i = 1; i < ranges0.length; i++) {\n\t\t\t\t\t\t\tconst originalRange = ranges0[i];\n\t\t\t\t\t\t\tconst modifiedValue = this._textModelN.getValueInRange(rangesN[i]);\n\t\t\t\t\t\t\tedits.push(EditOperation.replace(originalRange, modifiedValue));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._textModel0.pushEditOperations(null, edits, () => null);\n\t\t\t\t\t\tdata.state = HunkState.Accepted;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tresult.push(item);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nclass RawHunk {\n\tconstructor(\n\t\treadonly original: LineRange,\n\t\treadonly modified: LineRange,\n\t\treadonly changes: RangeMapping[]\n\t) { }\n}\n\ntype RawHunkData = {\n\ttextModelNDecorations: string[];\n\ttextModel0Decorations: string[];\n\tstate: HunkState;\n\teditState: IChatTextEditGroupState;\n};\n\nexport const enum HunkState {\n\tPending = 0,\n\tAccepted = 1,\n\tRejected = 2\n}\n\nexport interface HunkInformation {\n\t/**\n\t * The first element [0] is the whole modified range and subsequent elements are word-level changes\n\t */\n\tgetRangesN(): Range[];\n\n\tgetRanges0(): Range[];\n\n\tisInsertion(): boolean;\n\n\tdiscardChanges(): void;\n\n\t/**\n\t * Accept the hunk. Applies the corresponding edits into textModel0\n\t */\n\tacceptChanges(): void;\n\n\tgetState(): HunkState;\n}\n"],
  "mappings": "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",
  "names": ["HunkState"]
}
