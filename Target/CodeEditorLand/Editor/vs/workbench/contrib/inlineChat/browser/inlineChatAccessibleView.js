import{renderMarkdownAsPlaintext as s}from"../../../../base/browser/markdownRenderer.js";import{MarkdownString as c}from"../../../../base/common/htmlContent.js";import{ICodeEditorService as l}from"../../../../editor/browser/services/codeEditorService.js";import{AccessibleContentProvider as m,AccessibleViewProviderId as a,AccessibleViewType as o}from"../../../../platform/accessibility/browser/accessibleView.js";import{ContextKeyExpr as p}from"../../../../platform/contextkey/common/contextkey.js";import{AccessibilityVerbositySettingId as d}from"../../accessibility/browser/accessibilityConfiguration.js";import{CTX_INLINE_CHAT_FOCUSED as C,CTX_INLINE_CHAT_RESPONSE_FOCUSED as f}from"../common/inlineChat.js";import{InlineChatController as y}from"./inlineChatController.js";class u{priority=100;name="inlineChat";when=p.or(C,f);type=o.View;getProvider(n){const t=n.get(l),r=t.getActiveCodeEditor()||t.getFocusedCodeEditor();if(!r)return;const e=y.get(r);if(!e)return;const i=e?.getMessage();if(i)return new m(a.InlineChat,{type:o.View},()=>s(new c(i),!0),()=>e.focus(),d.InlineChat)}}export{u as InlineChatAccessibleView};
