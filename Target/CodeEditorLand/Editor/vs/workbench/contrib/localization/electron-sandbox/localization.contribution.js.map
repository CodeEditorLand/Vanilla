{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from '../../../common/contributions.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { IExtensionManagementService, IExtensionGalleryService, InstallOperation, ILocalExtension, InstallExtensionResult, DidUninstallExtensionEvent } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { INotificationService, NeverShowAgainScope } from '../../../../platform/notification/common/notification.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { minimumTranslatedStrings } from './minimalTranslations.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ILocaleService } from '../../../services/localization/common/locale.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { BaseLocalizationWorkbenchContribution } from '../common/localization.contribution.js';\n\nclass NativeLocalizationWorkbenchContribution extends BaseLocalizationWorkbenchContribution {\n\tprivate static LANGUAGEPACK_SUGGESTION_IGNORE_STORAGE_KEY = 'extensionsAssistant/languagePackSuggestionIgnore';\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ILocaleService private readonly localeService: ILocaleService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis.checkAndInstall();\n\t\tthis._register(this.extensionManagementService.onDidInstallExtensions(e => this.onDidInstallExtensions(e)));\n\t\tthis._register(this.extensionManagementService.onDidUninstallExtension(e => this.onDidUninstallExtension(e)));\n\t}\n\n\tprivate async onDidInstallExtensions(results: readonly InstallExtensionResult[]): Promise<void> {\n\t\tfor (const result of results) {\n\t\t\tif (result.operation === InstallOperation.Install && result.local) {\n\t\t\t\tawait this.onDidInstallExtension(result.local, !!result.context?.extensionsSync);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprivate async onDidInstallExtension(localExtension: ILocalExtension, fromSettingsSync: boolean): Promise<void> {\n\t\tconst localization = localExtension.manifest.contributes?.localizations?.[0];\n\t\tif (!localization || platform.language === localization.languageId) {\n\t\t\treturn;\n\t\t}\n\t\tconst { languageId, languageName } = localization;\n\n\t\tthis.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize('updateLocale', \"Would you like to change {0}'s display language to {1} and restart?\", this.productService.nameLong, languageName || languageId),\n\t\t\t[{\n\t\t\t\tlabel: localize('changeAndRestart', \"Change Language and Restart\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tawait this.localeService.setLocale({\n\t\t\t\t\t\tid: languageId,\n\t\t\t\t\t\tlabel: languageName ?? languageId,\n\t\t\t\t\t\textensionId: localExtension.identifier.id,\n\t\t\t\t\t\t// If settings sync installs the language pack, then we would have just shown the notification so no\n\t\t\t\t\t\t// need to show the dialog.\n\t\t\t\t\t}, true);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{\n\t\t\t\tsticky: true,\n\t\t\t\tneverShowAgain: { id: 'langugage.update.donotask', isSecondary: true, scope: NeverShowAgainScope.APPLICATION }\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate async onDidUninstallExtension(_event: DidUninstallExtensionEvent): Promise<void> {\n\t\tif (!await this.isLocaleInstalled(platform.language)) {\n\t\t\tthis.localeService.setLocale({\n\t\t\t\tid: 'en',\n\t\t\t\tlabel: 'English'\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async checkAndInstall(): Promise<void> {\n\t\tconst language = platform.language;\n\t\tlet locale = platform.locale ?? '';\n\t\tconst languagePackSuggestionIgnoreList: string[] = JSON.parse(\n\t\t\tthis.storageService.get(\n\t\t\t\tNativeLocalizationWorkbenchContribution.LANGUAGEPACK_SUGGESTION_IGNORE_STORAGE_KEY,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t'[]'\n\t\t\t)\n\t\t);\n\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\treturn;\n\t\t}\n\t\tif (!language || !locale || platform.Language.isDefaultVariant()) {\n\t\t\treturn;\n\t\t}\n\t\tif (locale.startsWith(language) || languagePackSuggestionIgnoreList.includes(locale)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst installed = await this.isLocaleInstalled(locale);\n\t\tif (installed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fullLocale = locale;\n\t\tlet tagResult = await this.galleryService.query({ text: `tag:lp-${locale}` }, CancellationToken.None);\n\t\tif (tagResult.total === 0) {\n\t\t\t// Trim the locale and try again.\n\t\t\tlocale = locale.split('-')[0];\n\t\t\ttagResult = await this.galleryService.query({ text: `tag:lp-${locale}` }, CancellationToken.None);\n\t\t\tif (tagResult.total === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst extensionToInstall = tagResult.total === 1 ? tagResult.firstPage[0] : tagResult.firstPage.find(e => e.publisher === 'MS-CEINTL' && e.name.startsWith('vscode-language-pack'));\n\t\tconst extensionToFetchTranslationsFrom = extensionToInstall ?? tagResult.firstPage[0];\n\n\t\tif (!extensionToFetchTranslationsFrom.assets.manifest) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [manifest, translation] = await Promise.all([\n\t\t\tthis.galleryService.getManifest(extensionToFetchTranslationsFrom, CancellationToken.None),\n\t\t\tthis.galleryService.getCoreTranslation(extensionToFetchTranslationsFrom, locale)\n\t\t]);\n\t\tconst loc = manifest?.contributes?.localizations?.find(x => locale.startsWith(x.languageId.toLowerCase()));\n\t\tconst languageName = loc ? (loc.languageName || locale) : locale;\n\t\tconst languageDisplayName = loc ? (loc.localizedLanguageName || loc.languageName || locale) : locale;\n\t\tconst translationsFromPack: { [key: string]: string } = translation?.contents?.['vs/workbench/contrib/localization/electron-sandbox/minimalTranslations'] ?? {};\n\t\tconst promptMessageKey = extensionToInstall ? 'installAndRestartMessage' : 'showLanguagePackExtensions';\n\t\tconst useEnglish = !translationsFromPack[promptMessageKey];\n\n\t\tconst translations: { [key: string]: string } = {};\n\t\tObject.keys(minimumTranslatedStrings).forEach(key => {\n\t\t\tif (!translationsFromPack[key] || useEnglish) {\n\t\t\t\ttranslations[key] = minimumTranslatedStrings[key].replace('{0}', () => languageName);\n\t\t\t} else {\n\t\t\t\ttranslations[key] = `${translationsFromPack[key].replace('{0}', () => languageDisplayName)} (${minimumTranslatedStrings[key].replace('{0}', () => languageName)})`;\n\t\t\t}\n\t\t});\n\n\t\tconst logUserReaction = (userReaction: string) => {\n\t\t\t/* __GDPR__\n\t\t\t\t\"languagePackSuggestion:popup\" : {\n\t\t\t\t\t\"owner\": \"TylerLeonhardt\",\n\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"language\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('languagePackSuggestion:popup', { userReaction, language: locale });\n\t\t};\n\n\t\tconst searchAction = {\n\t\t\tlabel: translations['searchMarketplace'],\n\t\t\trun: async () => {\n\t\t\t\tlogUserReaction('search');\n\t\t\t\tawait this.extensionsWorkbenchService.openSearch(`tag:lp-${locale}`);\n\t\t\t}\n\t\t};\n\n\t\tconst installAndRestartAction = {\n\t\t\tlabel: translations['installAndRestart'],\n\t\t\trun: async () => {\n\t\t\t\tlogUserReaction('installAndRestart');\n\t\t\t\tawait this.localeService.setLocale({\n\t\t\t\t\tid: locale,\n\t\t\t\t\tlabel: languageName,\n\t\t\t\t\textensionId: extensionToInstall?.identifier.id,\n\t\t\t\t\tgalleryExtension: extensionToInstall\n\t\t\t\t\t// The user will be prompted if they want to install the language pack before this.\n\t\t\t\t}, true);\n\t\t\t}\n\t\t};\n\n\t\tconst promptMessage = translations[promptMessageKey];\n\n\t\tthis.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tpromptMessage,\n\t\t\t[extensionToInstall ? installAndRestartAction : searchAction,\n\t\t\t{\n\t\t\t\tlabel: localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tlanguagePackSuggestionIgnoreList.push(fullLocale);\n\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\tNativeLocalizationWorkbenchContribution.LANGUAGEPACK_SUGGESTION_IGNORE_STORAGE_KEY,\n\t\t\t\t\t\tJSON.stringify(languagePackSuggestionIgnoreList),\n\t\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\tStorageTarget.USER\n\t\t\t\t\t);\n\t\t\t\t\tlogUserReaction('neverShowAgain');\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tlogUserReaction('cancelled');\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate async isLocaleInstalled(locale: string): Promise<boolean> {\n\t\tconst installed = await this.extensionManagementService.getInstalled();\n\t\treturn installed.some(i => !!i.manifest.contributes?.localizations?.length\n\t\t\t&& i.manifest.contributes.localizations.some(l => locale.startsWith(l.languageId.toLowerCase())));\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(NativeLocalizationWorkbenchContribution, LifecyclePhase.Eventually);\n"],
  "mappings": "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",
  "names": []
}
