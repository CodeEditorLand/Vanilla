var O=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var P=(p,c,n,e)=>{for(var t=e>1?void 0:e?D(c,n):c,i=p.length-1,s;i>=0;i--)(s=p[i])&&(t=(e?s(c,n,t):s(t))||t);return e&&t&&O(c,n,t),t},o=(p,c)=>(n,e)=>c(n,e,p);import{CancellationToken as y}from"../../../../base/common/cancellation.js";import*as u from"../../../../base/common/platform.js";import b from"../../../../base/common/severity.js";import{localize as E}from"../../../../nls.js";import{IExtensionGalleryService as U,IExtensionManagementService as _,InstallOperation as C}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{INotificationService as M,NeverShowAgainScope as W}from"../../../../platform/notification/common/notification.js";import{IProductService as K}from"../../../../platform/product/common/productService.js";import{Registry as $}from"../../../../platform/registry/common/platform.js";import{IStorageService as z,StorageScope as L,StorageTarget as F}from"../../../../platform/storage/common/storage.js";import{ITelemetryService as Y}from"../../../../platform/telemetry/common/telemetry.js";import{Extensions as q}from"../../../common/contributions.js";import{LifecyclePhase as J}from"../../../services/lifecycle/common/lifecycle.js";import{ILocaleService as j}from"../../../services/localization/common/locale.js";import{IExtensionsWorkbenchService as B}from"../../extensions/common/extensions.js";import{BaseLocalizationWorkbenchContribution as V}from"../common/localization.contribution.js";import{minimumTranslatedStrings as x}from"./minimalTranslations.js";let l=class extends V{constructor(n,e,t,i,s,r,g,v){super();this.notificationService=n;this.localeService=e;this.productService=t;this.storageService=i;this.extensionManagementService=s;this.galleryService=r;this.extensionsWorkbenchService=g;this.telemetryService=v;this.checkAndInstall(),this._register(this.extensionManagementService.onDidInstallExtensions(m=>this.onDidInstallExtensions(m))),this._register(this.extensionManagementService.onDidUninstallExtension(m=>this.onDidUninstallExtension(m)))}static LANGUAGEPACK_SUGGESTION_IGNORE_STORAGE_KEY="extensionsAssistant/languagePackSuggestionIgnore";async onDidInstallExtensions(n){for(const e of n)e.operation===C.Install&&e.local&&await this.onDidInstallExtension(e.local,!!e.context?.extensionsSync)}async onDidInstallExtension(n,e){const t=n.manifest.contributes?.localizations?.[0];if(!t||u.language===t.languageId)return;const{languageId:i,languageName:s}=t;this.notificationService.prompt(b.Info,E("updateLocale","Would you like to change {0}'s display language to {1} and restart?",this.productService.nameLong,s||i),[{label:E("changeAndRestart","Change Language and Restart"),run:async()=>{await this.localeService.setLocale({id:i,label:s??i,extensionId:n.identifier.id},!0)}}],{sticky:!0,neverShowAgain:{id:"langugage.update.donotask",isSecondary:!0,scope:W.APPLICATION}})}async onDidUninstallExtension(n){await this.isLocaleInstalled(u.language)||this.localeService.setLocale({id:"en",label:"English"})}async checkAndInstall(){const n=u.language;let e=u.locale??"";const t=JSON.parse(this.storageService.get(l.LANGUAGEPACK_SUGGESTION_IGNORE_STORAGE_KEY,L.APPLICATION,"[]"));if(!this.galleryService.isEnabled()||!n||!e||u.Language.isDefaultVariant()||e.startsWith(n)||t.includes(e)||await this.isLocaleInstalled(e))return;const s=e;let r=await this.galleryService.query({text:`tag:lp-${e}`},y.None);if(r.total===0&&(e=e.split("-")[0],r=await this.galleryService.query({text:`tag:lp-${e}`},y.None),r.total===0))return;const g=r.total===1?r.firstPage[0]:r.firstPage.find(a=>a.publisher==="MS-CEINTL"&&a.name.startsWith("vscode-language-pack")),v=g??r.firstPage[0];if(!v.assets.manifest)return;const[m,N]=await Promise.all([this.galleryService.getManifest(v,y.None),this.galleryService.getCoreTranslation(v,e)]),S=m?.contributes?.localizations?.find(a=>e.startsWith(a.languageId.toLowerCase())),I=S&&S.languageName||e,R=S&&(S.localizedLanguageName||S.languageName)||e,f=N?.contents?.["vs/workbench/contrib/localization/electron-sandbox/minimalTranslations"]??{},A=g?"installAndRestartMessage":"showLanguagePackExtensions",G=!f[A],d={};Object.keys(x).forEach(a=>{!f[a]||G?d[a]=x[a].replace("{0}",()=>I):d[a]=`${f[a].replace("{0}",()=>R)} (${x[a].replace("{0}",()=>I)})`});const h=a=>{this.telemetryService.publicLog("languagePackSuggestion:popup",{userReaction:a,language:e})},T={label:d.searchMarketplace,run:async()=>{h("search"),await this.extensionsWorkbenchService.openSearch(`tag:lp-${e}`)}},w={label:d.installAndRestart,run:async()=>{h("installAndRestart"),await this.localeService.setLocale({id:e,label:I,extensionId:g?.identifier.id,galleryExtension:g},!0)}},k=d[A];this.notificationService.prompt(b.Info,k,[g?w:T,{label:E("neverAgain","Don't Show Again"),isSecondary:!0,run:()=>{t.push(s),this.storageService.store(l.LANGUAGEPACK_SUGGESTION_IGNORE_STORAGE_KEY,JSON.stringify(t),L.APPLICATION,F.USER),h("neverShowAgain")}}],{onCancel:()=>{h("cancelled")}})}async isLocaleInstalled(n){return(await this.extensionManagementService.getInstalled()).some(t=>!!t.manifest.contributes?.localizations?.length&&t.manifest.contributes.localizations.some(i=>n.startsWith(i.languageId.toLowerCase())))}};l=P([o(0,M),o(1,j),o(2,K),o(3,z),o(4,_),o(5,U),o(6,B),o(7,Y)],l);const H=$.as(q.Workbench);H.registerWorkbenchContribution(l,J.Eventually);
