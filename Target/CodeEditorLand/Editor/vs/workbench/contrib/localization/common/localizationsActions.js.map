{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/localization/common/localizationsActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IQuickInputService, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Action2, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguagePackItem, ILanguagePackService } from '../../../../platform/languagePacks/common/languagePacks.js';\nimport { ILocaleService } from '../../../services/localization/common/locale.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\n\nexport class ConfigureDisplayLanguageAction extends Action2 {\n\tpublic static readonly ID = 'workbench.action.configureLocale';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ConfigureDisplayLanguageAction.ID,\n\t\t\ttitle: localize2('configureLocale', \"Configure Display Language\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize2('configureLocaleDescription', \"Changes the locale of VS Code based on installed language packs. Common languages include French, Chinese, Spanish, Japanese, German, Korean, and more.\")\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst languagePackService: ILanguagePackService = accessor.get(ILanguagePackService);\n\t\tconst quickInputService: IQuickInputService = accessor.get(IQuickInputService);\n\t\tconst localeService: ILocaleService = accessor.get(ILocaleService);\n\t\tconst extensionWorkbenchService: IExtensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);\n\n\t\tconst installedLanguages = await languagePackService.getInstalledLanguages();\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst qp = disposables.add(quickInputService.createQuickPick<ILanguagePackItem>({ useSeparators: true }));\n\t\tqp.matchOnDescription = true;\n\t\tqp.placeholder = localize('chooseLocale', \"Select Display Language\");\n\n\t\tif (installedLanguages?.length) {\n\t\t\tconst items: Array<ILanguagePackItem | IQuickPickSeparator> = [{ type: 'separator', label: localize('installed', \"Installed\") }];\n\t\t\tqp.items = items.concat(this.withMoreInfoButton(installedLanguages));\n\t\t}\n\n\t\tconst source = new CancellationTokenSource();\n\t\tdisposables.add(qp.onDispose(() => {\n\t\t\tsource.cancel();\n\t\t\tdisposables.dispose();\n\t\t}));\n\n\t\tconst installedSet = new Set<string>(installedLanguages?.map(language => language.id!) ?? []);\n\t\tlanguagePackService.getAvailableLanguages().then(availableLanguages => {\n\t\t\tconst newLanguages = availableLanguages.filter(l => l.id && !installedSet.has(l.id));\n\t\t\tif (newLanguages.length) {\n\t\t\t\tqp.items = [\n\t\t\t\t\t...qp.items,\n\t\t\t\t\t{ type: 'separator', label: localize('available', \"Available\") },\n\t\t\t\t\t...this.withMoreInfoButton(newLanguages)\n\t\t\t\t];\n\t\t\t}\n\t\t\tqp.busy = false;\n\t\t});\n\n\t\tdisposables.add(qp.onDidAccept(async () => {\n\t\t\tconst selectedLanguage = qp.activeItems[0] as ILanguagePackItem | undefined;\n\t\t\tif (selectedLanguage) {\n\t\t\t\tqp.hide();\n\t\t\t\tawait localeService.setLocale(selectedLanguage);\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(qp.onDidTriggerItemButton(async e => {\n\t\t\tqp.hide();\n\t\t\tif (e.item.extensionId) {\n\t\t\t\tawait extensionWorkbenchService.open(e.item.extensionId);\n\t\t\t}\n\t\t}));\n\n\t\tqp.show();\n\t\tqp.busy = true;\n\t}\n\n\tprivate withMoreInfoButton(items: ILanguagePackItem[]): ILanguagePackItem[] {\n\t\tfor (const item of items) {\n\t\t\tif (item.extensionId) {\n\t\t\t\titem.buttons = [{\n\t\t\t\t\ttooltip: localize('moreInfo', \"More Info\"),\n\t\t\t\t\ticonClass: 'codicon-info'\n\t\t\t\t}];\n\t\t\t}\n\t\t}\n\t\treturn items;\n\t}\n}\n\nexport class ClearDisplayLanguageAction extends Action2 {\n\tpublic static readonly ID = 'workbench.action.clearLocalePreference';\n\tpublic static readonly LABEL = localize2('clearDisplayLanguage', \"Clear Display Language Preference\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ClearDisplayLanguageAction.ID,\n\t\t\ttitle: ClearDisplayLanguageAction.LABEL,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst localeService: ILocaleService = accessor.get(ILocaleService);\n\t\tawait localeService.clearLocalePreference();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
