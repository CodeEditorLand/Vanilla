{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/emergencyAlert/electron-sandbox/emergencyAlert.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { arch, platform } from \"../../../../base/common/process.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIRequestService,\n\tasJson,\n} from \"../../../../platform/request/common/request.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { IBannerService } from \"../../../services/banner/browser/bannerService.js\";\n\ninterface IEmergencyAlert {\n\treadonly commit: string;\n\treadonly platform?: string;\n\treadonly arch?: string;\n\treadonly message: string;\n\treadonly actions?: [\n\t\t{\n\t\t\treadonly label: string;\n\t\t\treadonly href: string;\n\t\t},\n\t];\n}\n\ninterface IEmergencyAlerts {\n\treadonly alerts: IEmergencyAlert[];\n}\n\nexport class EmergencyAlert implements IWorkbenchContribution {\n\tstatic readonly ID = \"workbench.contrib.emergencyAlert\";\n\n\tconstructor(\n\t\t@IBannerService private readonly bannerService: IBannerService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tif (productService.quality !== \"insider\") {\n\t\t\treturn; // only enabled in insiders for now\n\t\t}\n\n\t\tconst emergencyAlertUrl = productService.emergencyAlertUrl;\n\t\tif (!emergencyAlertUrl) {\n\t\t\treturn; // no emergency alert configured\n\t\t}\n\n\t\tthis.fetchAlerts(emergencyAlertUrl);\n\t}\n\n\tprivate async fetchAlerts(url: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.doFetchAlerts(url);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t}\n\n\tprivate async doFetchAlerts(url: string): Promise<void> {\n\t\tconst requestResult = await this.requestService.request(\n\t\t\t{ type: \"GET\", url },\n\t\t\tCancellationToken.None,\n\t\t);\n\n\t\tif (requestResult.res.statusCode !== 200) {\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to fetch emergency alerts: HTTP ${requestResult.res.statusCode}`,\n\t\t\t);\n\t\t}\n\n\t\tconst emergencyAlerts = await asJson<IEmergencyAlerts>(requestResult);\n\t\tif (!emergencyAlerts) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const emergencyAlert of emergencyAlerts.alerts) {\n\t\t\tif (\n\t\t\t\temergencyAlert.commit !== this.productService.commit || // version mismatch\n\t\t\t\t(emergencyAlert.platform &&\n\t\t\t\t\temergencyAlert.platform !== platform) || // platform mismatch\n\t\t\t\t(emergencyAlert.arch && emergencyAlert.arch !== arch) // arch mismatch\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.bannerService.show({\n\t\t\t\tid: \"emergencyAlert.banner\",\n\t\t\t\ticon: Codicon.warning,\n\t\t\t\tmessage: emergencyAlert.message,\n\t\t\t\tactions: emergencyAlert.actions,\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nregisterWorkbenchContribution2(\n\t\"workbench.emergencyAlert\",\n\tEmergencyAlert,\n\tWorkbenchPhase.Eventually,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,eAAe;AACxB,SAAS,MAAM,gBAAgB;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAmBxB,IAAM,iBAAN,MAAuD;AAAA,EAG7D,YACkC,eACC,gBACA,gBACJ,YAC7B;AAJgC;AACC;AACA;AACJ;AAE9B,QAAI,eAAe,YAAY,WAAW;AACzC;AAAA,IACD;AAEA,UAAM,oBAAoB,eAAe;AACzC,QAAI,CAAC,mBAAmB;AACvB;AAAA,IACD;AAEA,SAAK,YAAY,iBAAiB;AAAA,EACnC;AAAA,EAzDD,OAsC8D;AAAA;AAAA;AAAA,EAC7D,OAAgB,KAAK;AAAA,EAoBrB,MAAc,YAAY,KAA4B;AACrD,QAAI;AACH,YAAM,KAAK,cAAc,GAAG;AAAA,IAC7B,SAAS,GAAG;AACX,WAAK,WAAW,MAAM,CAAC;AAAA,IACxB;AAAA,EACD;AAAA,EAEA,MAAc,cAAc,KAA4B;AACvD,UAAM,gBAAgB,MAAM,KAAK,eAAe;AAAA,MAC/C,EAAE,MAAM,OAAO,IAAI;AAAA,MACnB,kBAAkB;AAAA,IACnB;AAEA,QAAI,cAAc,IAAI,eAAe,KAAK;AACzC,YAAM,IAAI;AAAA,QACT,0CAA0C,cAAc,IAAI,UAAU;AAAA,MACvE;AAAA,IACD;AAEA,UAAM,kBAAkB,MAAM,OAAyB,aAAa;AACpE,QAAI,CAAC,iBAAiB;AACrB;AAAA,IACD;AAEA,eAAW,kBAAkB,gBAAgB,QAAQ;AACpD,UACC,eAAe,WAAW,KAAK,eAAe;AAAA,MAC7C,eAAe,YACf,eAAe,aAAa;AAAA,MAC5B,eAAe,QAAQ,eAAe,SAAS,MAC/C;AACD;AAAA,MACD;AAEA,WAAK,cAAc,KAAK;AAAA,QACvB,IAAI;AAAA,QACJ,MAAM,QAAQ;AAAA,QACd,SAAS,eAAe;AAAA,QACxB,SAAS,eAAe;AAAA,MACzB,CAAC;AAED;AAAA,IACD;AAAA,EACD;AACD;AAlEa,iBAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAPU;AAoEb;AAAA,EACC;AAAA,EACA;AAAA,EACA,eAAe;AAChB;",
  "names": []
}
