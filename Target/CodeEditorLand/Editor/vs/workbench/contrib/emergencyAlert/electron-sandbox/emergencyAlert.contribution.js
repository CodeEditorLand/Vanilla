var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var l=(i,o,r,t)=>{for(var e=t>1?void 0:t?y(o,r):o,n=i.length-1,c;n>=0;n--)(c=i[n])&&(e=(t?c(o,r,e):c(e))||e);return t&&e&&m(o,r,e),e},a=(i,o)=>(r,t)=>o(r,t,i);import{CancellationToken as g}from"../../../../base/common/cancellation.js";import{Codicon as h}from"../../../../base/common/codicons.js";import{arch as d,platform as f}from"../../../../base/common/process.js";import{ILogService as v}from"../../../../platform/log/common/log.js";import{IProductService as p}from"../../../../platform/product/common/productService.js";import{asJson as u,IRequestService as b}from"../../../../platform/request/common/request.js";import{registerWorkbenchContribution2 as I,WorkbenchPhase as S}from"../../../common/contributions.js";import{IBannerService as A}from"../../../services/banner/browser/bannerService.js";let s=class{constructor(o,r,t,e){this.bannerService=o;this.requestService=r;this.productService=t;this.logService=e;if(t.quality!=="insider")return;const n=t.emergencyAlertUrl;n&&this.fetchAlerts(n)}static ID="workbench.contrib.emergencyAlert";async fetchAlerts(o){try{await this.doFetchAlerts(o)}catch(r){this.logService.error(r)}}async doFetchAlerts(o){const r=await this.requestService.request({type:"GET",url:o},g.None);if(r.res.statusCode!==200)throw new Error(`Failed to fetch emergency alerts: HTTP ${r.res.statusCode}`);const t=await u(r);if(t)for(const e of t.alerts){if(e.commit!==this.productService.commit||e.platform&&e.platform!==f||e.arch&&e.arch!==d)return;this.bannerService.show({id:"emergencyAlert.banner",icon:h.warning,message:e.message,actions:e.actions});break}}};s=l([a(0,A),a(1,b),a(2,p),a(3,v)],s),I("workbench.emergencyAlert",s,S.Eventually);export{s as EmergencyAlert};
