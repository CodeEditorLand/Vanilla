{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/performance/electron-sandbox/startupTimings.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport { timeout } from \"../../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IUpdateService } from \"../../../../platform/update/common/update.js\";\nimport { IWorkspaceTrustManagementService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../../services/environment/electron-sandbox/environmentService.js\";\nimport { ILifecycleService } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport { ITimerService } from \"../../../services/timer/browser/timerService.js\";\nimport { StartupTimings } from \"../browser/startupTimings.js\";\n\ninterface ITracingData {\n\treadonly args?: {\n\t\treadonly usedHeapSizeAfter?: number;\n\t\treadonly usedHeapSizeBefore?: number;\n\t};\n\treadonly dur: number; // in microseconds\n\treadonly name: string; // e.g. MinorGC or MajorGC\n\treadonly pid: number;\n}\n\ninterface IHeapStatistics {\n\treadonly used: number;\n\treadonly garbage: number;\n\treadonly majorGCs: number;\n\treadonly minorGCs: number;\n\treadonly duration: number;\n}\n\nexport class NativeStartupTimings\n\textends StartupTimings\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ITimerService private readonly _timerService: ITimerService,\n\t\t@INativeHostService\n\t\tprivate readonly _nativeHostService: INativeHostService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IPaneCompositePartService\n\t\tpaneCompositeService: IPaneCompositePartService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IUpdateService updateService: IUpdateService,\n\t\t@INativeWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IWorkspaceTrustManagementService\n\t\tworkspaceTrustService: IWorkspaceTrustManagementService,\n\t) {\n\t\tsuper(\n\t\t\teditorService,\n\t\t\tpaneCompositeService,\n\t\t\tlifecycleService,\n\t\t\tupdateService,\n\t\t\tworkspaceTrustService,\n\t\t);\n\n\t\tthis._report().catch(onUnexpectedError);\n\t}\n\n\tprivate async _report() {\n\t\tconst standardStartupError = await this._isStandardStartup();\n\t\tthis._appendStartupTimes(standardStartupError).catch(onUnexpectedError);\n\t}\n\n\tprivate async _appendStartupTimes(\n\t\tstandardStartupError: string | undefined,\n\t) {\n\t\tconst appendTo = this._environmentService.args[\"prof-append-timers\"];\n\t\tconst durationMarkers =\n\t\t\tthis._environmentService.args[\"prof-duration-markers\"];\n\t\tconst durationMarkersFile =\n\t\t\tthis._environmentService.args[\"prof-duration-markers-file\"];\n\t\tif (!appendTo && !durationMarkers) {\n\t\t\t// nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait Promise.all([\n\t\t\t\tthis._timerService.whenReady(),\n\t\t\t\ttimeout(15000), // wait: cached data creation, telemetry sending\n\t\t\t]);\n\n\t\t\tconst perfBaseline = await this._timerService.perfBaseline;\n\t\t\tconst heapStatistics = await this._resolveStartupHeapStatistics();\n\t\t\tif (heapStatistics) {\n\t\t\t\tthis._telemetryLogHeapStatistics(heapStatistics);\n\t\t\t}\n\n\t\t\tif (appendTo) {\n\t\t\t\tconst content =\n\t\t\t\t\tcoalesce([\n\t\t\t\t\t\tthis._timerService.startupMetrics.ellapsed,\n\t\t\t\t\t\tthis._productService.nameShort,\n\t\t\t\t\t\t(this._productService.commit || \"\").slice(0, 10) ||\n\t\t\t\t\t\t\t\"0000000000\",\n\t\t\t\t\t\tthis._telemetryService.sessionId,\n\t\t\t\t\t\tstandardStartupError === undefined\n\t\t\t\t\t\t\t? \"standard_start\"\n\t\t\t\t\t\t\t: `NO_standard_start : ${standardStartupError}`,\n\t\t\t\t\t\t`${String(perfBaseline).padStart(4, \"0\")}ms`,\n\t\t\t\t\t\theapStatistics\n\t\t\t\t\t\t\t? this._printStartupHeapStatistics(heapStatistics)\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t]).join(\"\\t\") + \"\\n\";\n\t\t\t\tawait this._appendContent(URI.file(appendTo), content);\n\t\t\t}\n\n\t\t\tif (durationMarkers?.length) {\n\t\t\t\tconst durations: string[] = [];\n\t\t\t\tfor (const durationMarker of durationMarkers) {\n\t\t\t\t\tlet duration = 0;\n\t\t\t\t\tif (durationMarker === \"ellapsed\") {\n\t\t\t\t\t\tduration = this._timerService.startupMetrics.ellapsed;\n\t\t\t\t\t} else if (durationMarker.indexOf(\"-\") !== -1) {\n\t\t\t\t\t\tconst markers = durationMarker.split(\"-\");\n\t\t\t\t\t\tif (markers.length === 2) {\n\t\t\t\t\t\t\tduration = this._timerService.getDuration(\n\t\t\t\t\t\t\t\tmarkers[0],\n\t\t\t\t\t\t\t\tmarkers[1],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (duration) {\n\t\t\t\t\t\tdurations.push(durationMarker);\n\t\t\t\t\t\tdurations.push(`${duration}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst durationsContent = `${durations.join(\"\\t\")}\\n`;\n\t\t\t\tif (durationMarkersFile) {\n\t\t\t\t\tawait this._appendContent(\n\t\t\t\t\t\tURI.file(durationMarkersFile),\n\t\t\t\t\t\tdurationsContent,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(durationsContent);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t} finally {\n\t\t\tthis._nativeHostService.exit(0);\n\t\t}\n\t}\n\n\tprotected override async _isStandardStartup(): Promise<string | undefined> {\n\t\tconst windowCount = await this._nativeHostService.getWindowCount();\n\t\tif (windowCount !== 1) {\n\t\t\treturn `Expected window count : 1, Actual : ${windowCount}`;\n\t\t}\n\t\treturn super._isStandardStartup();\n\t}\n\n\tprivate async _appendContent(file: URI, content: string): Promise<void> {\n\t\tconst chunks: VSBuffer[] = [];\n\t\tif (await this._fileService.exists(file)) {\n\t\t\tchunks.push((await this._fileService.readFile(file)).value);\n\t\t}\n\t\tchunks.push(VSBuffer.fromString(content));\n\t\tawait this._fileService.writeFile(file, VSBuffer.concat(chunks));\n\t}\n\n\tprivate async _resolveStartupHeapStatistics(): Promise<\n\t\tIHeapStatistics | undefined\n\t> {\n\t\tif (\n\t\t\t!this._environmentService.args[\"enable-tracing\"] ||\n\t\t\t!this._environmentService.args[\"trace-startup-file\"] ||\n\t\t\tthis._environmentService.args[\"trace-startup-format\"] !== \"json\" ||\n\t\t\t!this._environmentService.args[\"trace-startup-duration\"]\n\t\t) {\n\t\t\treturn undefined; // unexpected arguments for startup heap statistics\n\t\t}\n\n\t\tconst windowProcessId = await this._nativeHostService.getProcessId();\n\t\tconst used =\n\t\t\t(performance as unknown as { memory?: { usedJSHeapSize?: number } })\n\t\t\t\t.memory?.usedJSHeapSize ?? 0; // https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory\n\n\t\tlet minorGCs = 0;\n\t\tlet majorGCs = 0;\n\t\tlet garbage = 0;\n\t\tlet duration = 0;\n\n\t\ttry {\n\t\t\tconst traceContents: { traceEvents: ITracingData[] } = JSON.parse(\n\t\t\t\t(\n\t\t\t\t\tawait this._fileService.readFile(\n\t\t\t\t\t\tURI.file(\n\t\t\t\t\t\t\tthis._environmentService.args[\"trace-startup-file\"],\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t).value.toString(),\n\t\t\t);\n\t\t\tfor (const event of traceContents.traceEvents) {\n\t\t\t\tif (event.pid !== windowProcessId) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tswitch (event.name) {\n\t\t\t\t\t// Major/Minor GC Events\n\t\t\t\t\tcase \"MinorGC\":\n\t\t\t\t\t\tminorGCs++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"MajorGC\":\n\t\t\t\t\t\tmajorGCs++;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// GC Events that block the main thread\n\t\t\t\t\t// Refs: https://v8.dev/blog/trash-talk\n\t\t\t\t\tcase \"V8.GCFinalizeMC\":\n\t\t\t\t\tcase \"V8.GCScavenger\":\n\t\t\t\t\t\tduration += event.dur;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (event.name === \"MajorGC\" || event.name === \"MinorGC\") {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof event.args?.usedHeapSizeAfter === \"number\" &&\n\t\t\t\t\t\ttypeof event.args.usedHeapSizeBefore === \"number\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tgarbage +=\n\t\t\t\t\t\t\tevent.args.usedHeapSizeBefore -\n\t\t\t\t\t\t\tevent.args.usedHeapSizeAfter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tminorGCs,\n\t\t\t\tmajorGCs,\n\t\t\t\tused,\n\t\t\t\tgarbage,\n\t\t\t\tduration: Math.round(duration / 1000),\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate _telemetryLogHeapStatistics({\n\t\tused,\n\t\tgarbage,\n\t\tmajorGCs,\n\t\tminorGCs,\n\t\tduration,\n\t}: IHeapStatistics): void {\n\t\ttype StartupHeapStatisticsClassification = {\n\t\t\towner: \"bpasero\";\n\t\t\tcomment: \"An event that reports startup heap statistics for performance analysis.\";\n\t\t\theapUsed: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Used heap\";\n\t\t\t};\n\t\t\theapGarbage: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Garbage heap\";\n\t\t\t};\n\t\t\tmajorGCs: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Major GCs count\";\n\t\t\t};\n\t\t\tminorGCs: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Minor GCs count\";\n\t\t\t};\n\t\t\tgcsDuration: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"GCs duration\";\n\t\t\t};\n\t\t};\n\t\ttype StartupHeapStatisticsEvent = {\n\t\t\theapUsed: number;\n\t\t\theapGarbage: number;\n\t\t\tmajorGCs: number;\n\t\t\tminorGCs: number;\n\t\t\tgcsDuration: number;\n\t\t};\n\t\tthis._telemetryService.publicLog2<\n\t\t\tStartupHeapStatisticsEvent,\n\t\t\tStartupHeapStatisticsClassification\n\t\t>(\"startupHeapStatistics\", {\n\t\t\theapUsed: used,\n\t\t\theapGarbage: garbage,\n\t\t\tmajorGCs,\n\t\t\tminorGCs,\n\t\t\tgcsDuration: duration,\n\t\t});\n\t}\n\n\tprivate _printStartupHeapStatistics({\n\t\tused,\n\t\tgarbage,\n\t\tmajorGCs,\n\t\tminorGCs,\n\t\tduration,\n\t}: IHeapStatistics) {\n\t\tconst MB = 1024 * 1024;\n\t\treturn `Heap: ${Math.round(used / MB)}MB (used) ${Math.round(garbage / MB)}MB (garbage) ${majorGCs} (MajorGC) ${minorGCs} (MinorGC) ${duration}ms (GC duration)`;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
