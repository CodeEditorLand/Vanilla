var b=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=(a,r,o,e)=>{for(var i=e>1?void 0:e?h(r,o):r,p=a.length-1,m;p>=0;p--)(m=a[p])&&(i=(e?m(r,o,i):m(i))||i);return e&&i&&b(r,o,i),i},t=(a,r)=>(o,e)=>r(o,e,a);import{timeout as y}from"../../../../base/common/async.js";import{VSBuffer as k}from"../../../../base/common/buffer.js";import{joinPath as O}from"../../../../base/common/resources.js";import{generateUuid as P}from"../../../../base/common/uuid.js";import{IConfigurationService as w}from"../../../../platform/configuration/common/configuration.js";import{IFileService as x}from"../../../../platform/files/common/files.js";import{ILogService as T}from"../../../../platform/log/common/log.js";import{INativeHostService as _}from"../../../../platform/native/common/native.js";import{IProfileAnalysisWorkerService as E,ProfilingOutput as N}from"../../../../platform/profiling/electron-sandbox/profileAnalysisWorkerService.js";import{INativeWorkbenchEnvironmentService as $}from"../../../services/environment/electron-sandbox/environmentService.js";import{parseExtensionDevOptions as D}from"../../../services/extensions/common/extensionDevOptions.js";import{ITimerService as V}from"../../../services/timer/browser/timerService.js";let v=class{constructor(r,o,e,i,p,m,S){this._environmentService=r;this._fileService=o;this._logService=e;D(r).isExtensionDevTestFromCli||p.perfBaseline.then(f=>{if(e.info(`[perf] Render performance baseline is ${f}ms`),f<0)return;const I=f*10,c=new PerformanceObserver(async g=>{c.takeRecords();const l=g.getEntries().map(n=>n.duration).reduce((n,s)=>Math.max(n,s),0);if(l<I)return;if(!m.getValue("application.experimental.rendererProfiling")){e.debug(`[perf] SLOW task detected (${l}ms) but renderer profiling is disabled via 'application.experimental.rendererProfiling'`);return}const d=P();e.warn(`[perf] Renderer reported VERY LONG TASK (${l}ms), starting profiling session '${d}'`),c.disconnect();for(let n=0;n<3;n++)try{const s=await i.profileRenderer(d,5e3);if(await S.analyseBottomUp(s,L=>"<<renderer>>",f,!0)===N.Interesting){this._store(s,d);break}y(15e3)}catch(s){e.error(s);break}c.observe({entryTypes:["longtask"]})});c.observe({entryTypes:["longtask"]}),this._observer=c})}_observer;dispose(){this._observer?.disconnect()}async _store(r,o){const e=O(this._environmentService.tmpDir,`renderer-${Math.random().toString(16).slice(2,8)}.cpuprofile.json`);await this._fileService.writeFile(e,k.fromString(JSON.stringify(r))),this._logService.info(`[perf] stored profile to DISK '${e}'`,o)}};v=u([t(0,$),t(1,x),t(2,T),t(3,_),t(4,V),t(5,w),t(6,E)],v);export{v as RendererProfiling};
