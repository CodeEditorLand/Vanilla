import{EventProfiling as a}from"../../../../../vs/base/common/event.js";import{localize2 as o}from"../../../../../vs/nls.js";import{Categories as n}from"../../../../../vs/platform/action/common/actionCommonCategories.js";import{Action2 as s,registerAction2 as c}from"../../../../../vs/platform/actions/common/actions.js";import{IInstantiationService as m}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{InstantiationService as v,Trace as f}from"../../../../../vs/platform/instantiation/common/instantiationService.js";import{Registry as p}from"../../../../../vs/platform/registry/common/platform.js";import{Extensions as g,registerWorkbenchContribution2 as d}from"../../../../../vs/workbench/common/contributions.js";import{EditorExtensions as y}from"../../../../../vs/workbench/common/editor.js";import{InputLatencyContrib as S}from"../../../../../vs/workbench/contrib/performance/browser/inputLatencyContrib.js";import{PerfviewContrib as l,PerfviewInput as u}from"../../../../../vs/workbench/contrib/performance/browser/perfviewEditor.js";import{IEditorService as E}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{LifecyclePhase as I}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";d(l.ID,l,{lazy:!0}),p.as(y.EditorFactory).registerEditorSerializer(u.Id,class{canSerialize(){return!0}serialize(){return""}deserialize(r){return r.createInstance(u)}}),c(class extends s{constructor(){super({id:"perfview.show",title:o("show.label","Startup Performance"),category:n.Developer,f1:!0})}run(r){const e=r.get(E),t=l.get();return e.openEditor(t.getEditorInput(),{pinned:!0})}}),c(class extends s{constructor(){super({id:"perf.insta.printAsyncCycles",title:o("cycles","Print Service Cycles"),category:n.Developer,f1:!0})}run(e){const t=e.get(m);if(t instanceof v){const i=t._globalGraph?.findCycleSlow();i?console.warn("CYCLE",i):console.warn("YEAH, no more cycles")}}}),c(class extends s{constructor(){super({id:"perf.insta.printTraces",title:o("insta.trace","Print Service Traces"),category:n.Developer,f1:!0})}run(){if(f.all.size===0){console.log("Enable via `instantiationService.ts#_enableAllTracing`");return}for(const e of f.all)console.log(e)}}),c(class extends s{constructor(){super({id:"perf.event.profiling",title:o("emitter","Print Emitter Profiles"),category:n.Developer,f1:!0})}run(){if(a.all.size===0){console.log("USE `EmitterOptions._profName` to enable profiling");return}for(const e of a.all)console.log(`${e.name}: ${e.invocationCount} invocations COST ${e.elapsedOverall}ms, ${e.listenerCount} listeners, avg cost is ${e.durations.reduce((t,i)=>t+i,0)/e.durations.length}ms`)}}),p.as(g.Workbench).registerWorkbenchContribution(S,I.Eventually);
