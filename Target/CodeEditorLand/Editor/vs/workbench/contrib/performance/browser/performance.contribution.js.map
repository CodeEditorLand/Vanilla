{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/performance/browser/performance.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EventProfiling } from \"../../../../base/common/event.js\";\nimport { localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tInstantiationService,\n\tTrace,\n} from \"../../../../platform/instantiation/common/instantiationService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tExtensions,\n\ttype IWorkbenchContributionsRegistry,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport {\n\tEditorExtensions,\n\ttype IEditorFactoryRegistry,\n\ttype IEditorSerializer,\n} from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { InputLatencyContrib } from \"./inputLatencyContrib.js\";\nimport { PerfviewContrib, PerfviewInput } from \"./perfviewEditor.js\";\n\n// -- startup performance view\n\nregisterWorkbenchContribution2(PerfviewContrib.ID, PerfviewContrib, {\n\tlazy: true,\n});\n\nRegistry.as<IEditorFactoryRegistry>(\n\tEditorExtensions.EditorFactory,\n).registerEditorSerializer(\n\tPerfviewInput.Id,\n\tclass implements IEditorSerializer {\n\t\tcanSerialize(): boolean {\n\t\t\treturn true;\n\t\t}\n\t\tserialize(): string {\n\t\t\treturn \"\";\n\t\t}\n\t\tdeserialize(\n\t\t\tinstantiationService: IInstantiationService,\n\t\t): PerfviewInput {\n\t\t\treturn instantiationService.createInstance(PerfviewInput);\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"perfview.show\",\n\t\t\t\ttitle: localize2(\"show.label\", \"Startup Performance\"),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tconst contrib = PerfviewContrib.get();\n\t\t\treturn editorService.openEditor(contrib.getEditorInput(), {\n\t\t\t\tpinned: true,\n\t\t\t});\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass PrintServiceCycles extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"perf.insta.printAsyncCycles\",\n\t\t\t\ttitle: localize2(\"cycles\", \"Print Service Cycles\"),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst instaService = accessor.get(IInstantiationService);\n\t\t\tif (instaService instanceof InstantiationService) {\n\t\t\t\tconst cycle = instaService._globalGraph?.findCycleSlow();\n\t\t\t\tif (cycle) {\n\t\t\t\t\tconsole.warn(`CYCLE`, cycle);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`YEAH, no more cycles`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass PrintServiceTraces extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"perf.insta.printTraces\",\n\t\t\t\ttitle: localize2(\"insta.trace\", \"Print Service Traces\"),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\trun() {\n\t\t\tif (Trace.all.size === 0) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"Enable via `instantiationService.ts#_enableAllTracing`\",\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const item of Trace.all) {\n\t\t\t\tconsole.log(item);\n\t\t\t}\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass PrintEventProfiling extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"perf.event.profiling\",\n\t\t\t\ttitle: localize2(\"emitter\", \"Print Emitter Profiles\"),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\trun(): void {\n\t\t\tif (EventProfiling.all.size === 0) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"USE `EmitterOptions._profName` to enable profiling\",\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const item of EventProfiling.all) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${item.name}: ${item.invocationCount} invocations COST ${item.elapsedOverall}ms, ${item.listenerCount} listeners, avg cost is ${item.durations.reduce((a, b) => a + b, 0) / item.durations.length}ms`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n);\n\n// -- input latency\n\nRegistry.as<IWorkbenchContributionsRegistry>(\n\tExtensions.Workbench,\n).registerWorkbenchContribution(InputLatencyContrib, LifecyclePhase.Eventually);\n"],
  "mappings": "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",
  "names": []
}
