{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/performance/browser/inputLatencyContrib.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { inputLatency } from '../../../../base/browser/performance.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nexport class InputLatencyContrib extends Disposable implements IWorkbenchContribution {\n\tprivate readonly _listener = this._register(new MutableDisposable());\n\tprivate readonly _scheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\n\t\t// The current sampling strategy is when the active editor changes, start sampling and\n\t\t// report the results after 60 seconds. It's done this way as we don't want to sample\n\t\t// everything, just somewhat randomly, and using an interval would utilize CPU when the\n\t\t// application is inactive.\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis._logSamples();\n\t\t\tthis._setupListener();\n\t\t}, 60000));\n\n\n\t\t// Only log 1% of users selected randomly to reduce the volume of data\n\t\tif (Math.random() <= 0.01) {\n\t\t\tthis._setupListener();\n\t\t}\n\n\t}\n\n\tprivate _setupListener(): void {\n\t\tthis._listener.value = Event.once(this._editorService.onDidActiveEditorChange)(() => this._scheduler.schedule());\n\t}\n\n\tprivate _logSamples(): void {\n\t\tconst measurements = inputLatency.getAndClearMeasurements();\n\t\tif (!measurements) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype InputLatencyStatisticFragment = {\n\t\t\towner: 'tyriar';\n\t\t\tcomment: 'Represents a set of statistics collected about input latencies';\n\t\t\taverage: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The average time it took to execute.' };\n\t\t\tmax: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The maximum time it took to execute.' };\n\t\t\tmin: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The minimum time it took to execute.' };\n\t\t};\n\n\t\ttype PerformanceInputLatencyClassification = {\n\t\t\towner: 'tyriar';\n\t\t\tcomment: 'This is a set of samples of the time (in milliseconds) that various events took when typing in the editor';\n\t\t\tkeydown: InputLatencyStatisticFragment;\n\t\t\tinput: InputLatencyStatisticFragment;\n\t\t\trender: InputLatencyStatisticFragment;\n\t\t\ttotal: InputLatencyStatisticFragment;\n\t\t\tsampleCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of samples measured.' };\n\t\t};\n\n\t\ttype PerformanceInputLatencyEvent = inputLatency.IInputLatencyMeasurements;\n\n\t\tthis._telemetryService.publicLog2<PerformanceInputLatencyEvent, PerformanceInputLatencyClassification>('performance.inputLatency', {\n\t\t\tkeydown: measurements.keydown,\n\t\t\tinput: measurements.input,\n\t\t\trender: measurements.render,\n\t\t\ttotal: measurements.total,\n\t\t\tsampleCount: measurements.sampleCount\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,aAAa;AACtB,SAAS,YAAY,yBAAyB;AAC9C,SAAS,yBAAyB;AAClC,SAAS,8BAA8B;AACvC,SAAS,sBAAsB;AAExB,IAAM,sBAAN,cAAkC,WAA6C;AAAA,EAIrF,YACkC,gBACG,mBACnC;AACD,UAAM;AAH2B;AACG;AAQpC,SAAK,aAAa,KAAK,UAAU,IAAI,iBAAiB,MAAM;AAC3D,WAAK,YAAY;AACjB,WAAK,eAAe;AAAA,IACrB,GAAG,GAAK,CAAC;AAIT,QAAI,KAAK,OAAO,KAAK,MAAM;AAC1B,WAAK,eAAe;AAAA,IACrB;AAAA,EAED;AAAA,EAtCD,OAasF;AAAA;AAAA;AAAA,EACpE,YAAY,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAClD;AAAA,EAyBT,iBAAuB;AAC9B,SAAK,UAAU,QAAQ,MAAM,KAAK,KAAK,eAAe,uBAAuB,EAAE,MAAM,KAAK,WAAW,SAAS,CAAC;AAAA,EAChH;AAAA,EAEQ,cAAoB;AAC3B,UAAM,eAAe,aAAa,wBAAwB;AAC1D,QAAI,CAAC,cAAc;AAClB;AAAA,IACD;AAsBA,SAAK,kBAAkB,WAAgF,4BAA4B;AAAA,MAClI,SAAS,aAAa;AAAA,MACtB,OAAO,aAAa;AAAA,MACpB,QAAQ,aAAa;AAAA,MACrB,OAAO,aAAa;AAAA,MACpB,aAAa,aAAa;AAAA,IAC3B,CAAC;AAAA,EACF;AACD;AAjEa,sBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,GANU;",
  "names": []
}
