{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/performance/browser/inputLatencyContrib.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { inputLatency } from \"../../../../base/browser/performance.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\n\nexport class InputLatencyContrib\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate readonly _listener = this._register(new MutableDisposable());\n\tprivate readonly _scheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\n\t\t// The current sampling strategy is when the active editor changes, start sampling and\n\t\t// report the results after 60 seconds. It's done this way as we don't want to sample\n\t\t// everything, just somewhat randomly, and using an interval would utilize CPU when the\n\t\t// application is inactive.\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis._logSamples();\n\t\t\tthis._setupListener();\n\t\t}, 60000));\n\n\n\t\t// Only log 1% of users selected randomly to reduce the volume of data\n\t\tif (Math.random() <= 0.01) {\n\t\t\tthis._setupListener();\n\t\t}\n\n\t}\n\n\tprivate _setupListener(): void {\n\t\tthis._listener.value = Event.once(\n\t\t\tthis._editorService.onDidActiveEditorChange,\n\t\t)(() => this._scheduler.schedule());\n\t}\n\n\tprivate _logSamples(): void {\n\t\tconst measurements = inputLatency.getAndClearMeasurements();\n\t\tif (!measurements) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype InputLatencyStatisticFragment = {\n\t\t\towner: \"tyriar\";\n\t\t\tcomment: \"Represents a set of statistics collected about input latencies\";\n\t\t\taverage: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The average time it took to execute.\";\n\t\t\t};\n\t\t\tmax: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The maximum time it took to execute.\";\n\t\t\t};\n\t\t\tmin: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The minimum time it took to execute.\";\n\t\t\t};\n\t\t};\n\n\t\ttype PerformanceInputLatencyClassification = {\n\t\t\towner: \"tyriar\";\n\t\t\tcomment: \"This is a set of samples of the time (in milliseconds) that various events took when typing in the editor\";\n\t\t\tkeydown: InputLatencyStatisticFragment;\n\t\t\tinput: InputLatencyStatisticFragment;\n\t\t\trender: InputLatencyStatisticFragment;\n\t\t\ttotal: InputLatencyStatisticFragment;\n\t\t\tsampleCount: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The number of samples measured.\";\n\t\t\t};\n\t\t};\n\n\t\ttype PerformanceInputLatencyEvent =\n\t\t\tinputLatency.IInputLatencyMeasurements;\n\n\t\tthis._telemetryService.publicLog2<\n\t\t\tPerformanceInputLatencyEvent,\n\t\t\tPerformanceInputLatencyClassification\n\t\t>(\"performance.inputLatency\", {\n\t\t\tkeydown: measurements.keydown,\n\t\t\tinput: measurements.input,\n\t\t\trender: measurements.render,\n\t\t\ttotal: measurements.total,\n\t\t\tsampleCount: measurements.sampleCount,\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,aAAa;AACtB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAElC,SAAS,sBAAsB;AAExB,IAAM,sBAAN,cACE,WAET;AAAA,EAIC,YACkC,gBACG,mBACnC;AACD,UAAM;AAH2B;AACG;AAQpC,SAAK,aAAa,KAAK,UAAU,IAAI,iBAAiB,MAAM;AAC3D,WAAK,YAAY;AACjB,WAAK,eAAe;AAAA,IACrB,GAAG,GAAK,CAAC;AAIT,QAAI,KAAK,OAAO,KAAK,MAAM;AAC1B,WAAK,eAAe;AAAA,IACrB;AAAA,EAED;AAAA,EA5CD,OAmBA;AAAA;AAAA;AAAA,EACkB,YAAY,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAClD;AAAA,EAyBT,iBAAuB;AAC9B,SAAK,UAAU,QAAQ,MAAM;AAAA,MAC5B,KAAK,eAAe;AAAA,IACrB,EAAE,MAAM,KAAK,WAAW,SAAS,CAAC;AAAA,EACnC;AAAA,EAEQ,cAAoB;AAC3B,UAAM,eAAe,aAAa,wBAAwB;AAC1D,QAAI,CAAC,cAAc;AAClB;AAAA,IACD;AAuCA,SAAK,kBAAkB,WAGrB,4BAA4B;AAAA,MAC7B,SAAS,aAAa;AAAA,MACtB,OAAO,aAAa;AAAA,MACpB,QAAQ,aAAa;AAAA,MACrB,OAAO,aAAa;AAAA,MACpB,aAAa,aAAa;AAAA,IAC3B,CAAC;AAAA,EACF;AACD;AA1Fa,sBAAN;AAAA,EAQJ;AAAA,EACA;AAAA,GATU;",
  "names": []
}
