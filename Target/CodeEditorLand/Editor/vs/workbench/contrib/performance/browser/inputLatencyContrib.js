var p=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var c=(n,t,e,i)=>{for(var r=i>1?void 0:i?u(t,e):t,o=n.length-1,s;o>=0;o--)(s=n[o])&&(r=(i?s(t,e,r):s(r))||r);return i&&r&&p(t,e,r),r},m=(n,t)=>(e,i)=>t(e,i,n);import{inputLatency as l}from"../../../../../vs/base/browser/performance.js";import{RunOnceScheduler as d}from"../../../../../vs/base/common/async.js";import{Event as h}from"../../../../../vs/base/common/event.js";import{Disposable as y,MutableDisposable as f}from"../../../../../vs/base/common/lifecycle.js";import{ITelemetryService as v}from"../../../../../vs/platform/telemetry/common/telemetry.js";import"../../../../../vs/workbench/common/contributions.js";import{IEditorService as S}from"../../../../../vs/workbench/services/editor/common/editorService.js";let a=class extends y{constructor(e,i){super();this._editorService=e;this._telemetryService=i;this._scheduler=this._register(new d(()=>{this._logSamples(),this._setupListener()},6e4)),Math.random()<=.01&&this._setupListener()}_listener=this._register(new f);_scheduler;_setupListener(){this._listener.value=h.once(this._editorService.onDidActiveEditorChange)(()=>this._scheduler.schedule())}_logSamples(){const e=l.getAndClearMeasurements();e&&this._telemetryService.publicLog2("performance.inputLatency",{keydown:e.keydown,input:e.input,render:e.render,total:e.total,sampleCount:e.sampleCount})}};a=c([m(0,S),m(1,v)],a);export{a as InputLatencyContrib};
