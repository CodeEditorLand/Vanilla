{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/common/abstractDebugAdapter.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { MockDebugAdapter } from './mockDebug.js';\n\nsuite('Debug - AbstractDebugAdapter', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('event ordering', () => {\n\t\tlet adapter: MockDebugAdapter;\n\t\tlet output: string[];\n\t\tsetup(() => {\n\t\t\tadapter = new MockDebugAdapter();\n\t\t\toutput = [];\n\t\t\tadapter.onEvent(ev => {\n\t\t\t\toutput.push((ev as DebugProtocol.OutputEvent).body.output);\n\t\t\t\tPromise.resolve().then(() => output.push('--end microtask--'));\n\t\t\t});\n\t\t});\n\n\t\tconst evaluate = async (expression: string) => {\n\t\t\tawait new Promise(resolve => adapter.sendRequest('evaluate', { expression }, resolve));\n\t\t\toutput.push(`=${expression}`);\n\t\t\tPromise.resolve().then(() => output.push('--end microtask--'));\n\t\t};\n\n\t\ttest('inserts task boundary before response', async () => {\n\t\t\tawait evaluate('before.foo');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(output, ['before.foo', '--end microtask--', '=before.foo', '--end microtask--']);\n\t\t});\n\n\t\ttest('inserts task boundary after response', async () => {\n\t\t\tawait evaluate('after.foo');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(output, ['=after.foo', '--end microtask--', 'after.foo', '--end microtask--']);\n\t\t});\n\n\t\ttest('does not insert boundaries between events', async () => {\n\t\t\tadapter.sendEventBody('output', { output: 'a' });\n\t\t\tadapter.sendEventBody('output', { output: 'b' });\n\t\t\tadapter.sendEventBody('output', { output: 'c' });\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(output, ['a', 'b', 'c', '--end microtask--', '--end microtask--', '--end microtask--']);\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,eAAe;AACxB,SAAS,+CAA+C;AACxD,SAAS,wBAAwB;AAEjC,MAAM,gCAAgC,MAAM;AAC3C,0CAAwC;AAExC,QAAM,kBAAkB,MAAM;AAC7B,QAAI;AACJ,QAAI;AACJ,UAAM,MAAM;AACX,gBAAU,IAAI,iBAAiB;AAC/B,eAAS,CAAC;AACV,cAAQ,QAAQ,QAAM;AACrB,eAAO,KAAM,GAAiC,KAAK,MAAM;AACzD,gBAAQ,QAAQ,EAAE,KAAK,MAAM,OAAO,KAAK,mBAAmB,CAAC;AAAA,MAC9D,CAAC;AAAA,IACF,CAAC;AAED,UAAM,WAAW,8BAAO,eAAuB;AAC9C,YAAM,IAAI,QAAQ,aAAW,QAAQ,YAAY,YAAY,EAAE,WAAW,GAAG,OAAO,CAAC;AACrF,aAAO,KAAK,IAAI,UAAU,EAAE;AAC5B,cAAQ,QAAQ,EAAE,KAAK,MAAM,OAAO,KAAK,mBAAmB,CAAC;AAAA,IAC9D,GAJiB;AAMjB,SAAK,yCAAyC,YAAY;AACzD,YAAM,SAAS,YAAY;AAC3B,YAAM,QAAQ,CAAC;AAEf,aAAO,gBAAgB,QAAQ,CAAC,cAAc,qBAAqB,eAAe,mBAAmB,CAAC;AAAA,IACvG,CAAC;AAED,SAAK,wCAAwC,YAAY;AACxD,YAAM,SAAS,WAAW;AAC1B,YAAM,QAAQ,CAAC;AAEf,aAAO,gBAAgB,QAAQ,CAAC,cAAc,qBAAqB,aAAa,mBAAmB,CAAC;AAAA,IACrG,CAAC;AAED,SAAK,6CAA6C,YAAY;AAC7D,cAAQ,cAAc,UAAU,EAAE,QAAQ,IAAI,CAAC;AAC/C,cAAQ,cAAc,UAAU,EAAE,QAAQ,IAAI,CAAC;AAC/C,cAAQ,cAAc,UAAU,EAAE,QAAQ,IAAI,CAAC;AAC/C,YAAM,QAAQ,CAAC;AAEf,aAAO,gBAAgB,QAAQ,CAAC,KAAK,KAAK,KAAK,qBAAqB,qBAAqB,mBAAmB,CAAC;AAAA,IAC9G,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
