{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/debugSource.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { URI as uri } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { Source } from '../../common/debugSource.js';\nimport { mockUriIdentityService } from './mockDebugModel.js';\n\nsuite('Debug - Source', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('from raw source', () => {\n\t\tconst source = new Source({\n\t\t\tname: 'zz',\n\t\t\tpath: '/xx/yy/zz',\n\t\t\tsourceReference: 0,\n\t\t\tpresentationHint: 'emphasize'\n\t\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\n\t\tassert.strictEqual(source.presentationHint, 'emphasize');\n\t\tassert.strictEqual(source.name, 'zz');\n\t\tassert.strictEqual(source.inMemory, false);\n\t\tassert.strictEqual(source.reference, 0);\n\t\tassert.strictEqual(source.uri.toString(), uri.file('/xx/yy/zz').toString());\n\t});\n\n\ttest('from raw internal source', () => {\n\t\tconst source = new Source({\n\t\t\tname: 'internalModule.js',\n\t\t\tsourceReference: 11,\n\t\t\tpresentationHint: 'deemphasize'\n\t\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\n\t\tassert.strictEqual(source.presentationHint, 'deemphasize');\n\t\tassert.strictEqual(source.name, 'internalModule.js');\n\t\tassert.strictEqual(source.inMemory, true);\n\t\tassert.strictEqual(source.reference, 11);\n\t\tassert.strictEqual(source.uri.toString(), 'debug:internalModule.js?session%3DaDebugSessionId%26ref%3D11');\n\t});\n\n\ttest('get encoded debug data', () => {\n\t\tconst checkData = (uri: uri, expectedName: string, expectedPath: string, expectedSourceReference: number | undefined, expectedSessionId?: string) => {\n\t\t\tconst { name, path, sourceReference, sessionId } = Source.getEncodedDebugData(uri);\n\t\t\tassert.strictEqual(name, expectedName);\n\t\t\tassert.strictEqual(path, expectedPath);\n\t\t\tassert.strictEqual(sourceReference, expectedSourceReference);\n\t\t\tassert.strictEqual(sessionId, expectedSessionId);\n\t\t};\n\n\t\tcheckData(uri.file('a/b/c/d'), 'd', isWindows ? '\\\\a\\\\b\\\\c\\\\d' : '/a/b/c/d', undefined, undefined);\n\t\tcheckData(uri.from({ scheme: 'file', path: '/my/path/test.js', query: 'ref=1&session=2' }), 'test.js', isWindows ? '\\\\my\\\\path\\\\test.js' : '/my/path/test.js', undefined, undefined);\n\n\t\tcheckData(uri.from({ scheme: 'http', authority: 'www.example.com', path: '/my/path' }), 'path', 'http://www.example.com/my/path', undefined, undefined);\n\t\tcheckData(uri.from({ scheme: 'debug', authority: 'www.example.com', path: '/my/path', query: 'ref=100' }), 'path', '/my/path', 100, undefined);\n\t\tcheckData(uri.from({ scheme: 'debug', path: 'a/b/c/d.js', query: 'session=100' }), 'd.js', 'a/b/c/d.js', undefined, '100');\n\t\tcheckData(uri.from({ scheme: 'debug', path: 'a/b/c/d/foo.txt', query: 'session=100&ref=10' }), 'foo.txt', 'a/b/c/d/foo.txt', 10, '100');\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,iBAAiB;AAC1B,SAAS,OAAO,WAAW;AAC3B,SAAS,+CAA+C;AACxD,SAAS,sBAAsB;AAC/B,SAAS,cAAc;AACvB,SAAS,8BAA8B;AAEvC,MAAM,kBAAkB,MAAM;AAE7B,0CAAwC;AAExC,OAAK,mBAAmB,MAAM;AAC7B,UAAM,SAAS,IAAI,OAAO;AAAA,MACzB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB,GAAG,mBAAmB,wBAAwB,IAAI,eAAe,CAAC;AAElE,WAAO,YAAY,OAAO,kBAAkB,WAAW;AACvD,WAAO,YAAY,OAAO,MAAM,IAAI;AACpC,WAAO,YAAY,OAAO,UAAU,KAAK;AACzC,WAAO,YAAY,OAAO,WAAW,CAAC;AACtC,WAAO,YAAY,OAAO,IAAI,SAAS,GAAG,IAAI,KAAK,WAAW,EAAE,SAAS,CAAC;AAAA,EAC3E,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC,UAAM,SAAS,IAAI,OAAO;AAAA,MACzB,MAAM;AAAA,MACN,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB,GAAG,mBAAmB,wBAAwB,IAAI,eAAe,CAAC;AAElE,WAAO,YAAY,OAAO,kBAAkB,aAAa;AACzD,WAAO,YAAY,OAAO,MAAM,mBAAmB;AACnD,WAAO,YAAY,OAAO,UAAU,IAAI;AACxC,WAAO,YAAY,OAAO,WAAW,EAAE;AACvC,WAAO,YAAY,OAAO,IAAI,SAAS,GAAG,8DAA8D;AAAA,EACzG,CAAC;AAED,OAAK,0BAA0B,MAAM;AACpC,UAAM,YAAY,wBAACA,MAAU,cAAsB,cAAsB,yBAA6C,sBAA+B;AACpJ,YAAM,EAAE,MAAM,MAAM,iBAAiB,UAAU,IAAI,OAAO,oBAAoBA,IAAG;AACjF,aAAO,YAAY,MAAM,YAAY;AACrC,aAAO,YAAY,MAAM,YAAY;AACrC,aAAO,YAAY,iBAAiB,uBAAuB;AAC3D,aAAO,YAAY,WAAW,iBAAiB;AAAA,IAChD,GANkB;AAQlB,cAAU,IAAI,KAAK,SAAS,GAAG,KAAK,YAAY,iBAAiB,YAAY,QAAW,MAAS;AACjG,cAAU,IAAI,KAAK,EAAE,QAAQ,QAAQ,MAAM,oBAAoB,OAAO,kBAAkB,CAAC,GAAG,WAAW,YAAY,wBAAwB,oBAAoB,QAAW,MAAS;AAEnL,cAAU,IAAI,KAAK,EAAE,QAAQ,QAAQ,WAAW,mBAAmB,MAAM,WAAW,CAAC,GAAG,QAAQ,kCAAkC,QAAW,MAAS;AACtJ,cAAU,IAAI,KAAK,EAAE,QAAQ,SAAS,WAAW,mBAAmB,MAAM,YAAY,OAAO,UAAU,CAAC,GAAG,QAAQ,YAAY,KAAK,MAAS;AAC7I,cAAU,IAAI,KAAK,EAAE,QAAQ,SAAS,MAAM,cAAc,OAAO,cAAc,CAAC,GAAG,QAAQ,cAAc,QAAW,KAAK;AACzH,cAAU,IAAI,KAAK,EAAE,QAAQ,SAAS,MAAM,mBAAmB,OAAO,qBAAqB,CAAC,GAAG,WAAW,mBAAmB,IAAI,KAAK;AAAA,EACvI,CAAC;AACF,CAAC;",
  "names": ["uri"]
}
