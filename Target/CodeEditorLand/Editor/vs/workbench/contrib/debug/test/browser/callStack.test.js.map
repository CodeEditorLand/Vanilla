{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/callStack.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { ThemeIcon } from '../../../../../base/common/themables.js';\nimport { Constants } from '../../../../../base/common/uint.js';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { TestAccessibilityService } from '../../../../../platform/accessibility/test/common/testAccessibilityService.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { createDecorationsForStackFrame } from '../../browser/callStackEditorContribution.js';\nimport { getContext, getContextForContributedActions, getSpecificSourceName } from '../../browser/callStackView.js';\nimport { debugStackframe, debugStackframeFocused } from '../../browser/debugIcons.js';\nimport { getStackFrameThreadAndSessionToFocus } from '../../browser/debugService.js';\nimport { DebugSession } from '../../browser/debugSession.js';\nimport { IDebugService, IDebugSessionOptions, State } from '../../common/debug.js';\nimport { DebugModel, StackFrame, Thread } from '../../common/debugModel.js';\nimport { Source } from '../../common/debugSource.js';\nimport { createMockDebugModel, mockUriIdentityService } from './mockDebugModel.js';\nimport { MockRawSession } from '../common/mockDebug.js';\n\nconst mockWorkspaceContextService = {\n\tgetWorkspace: () => {\n\t\treturn {\n\t\t\tfolders: []\n\t\t};\n\t}\n} as any;\n\nexport function createTestSession(model: DebugModel, name = 'mockSession', options?: IDebugSessionOptions): DebugSession {\n\treturn new DebugSession(generateUuid(), { resolved: { name, type: 'node', request: 'launch' }, unresolved: undefined }, undefined, model, options, {\n\t\tgetViewModel(): any {\n\t\t\treturn {\n\t\t\t\tupdateViews(): void {\n\t\t\t\t\t// noop\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} as IDebugService, undefined!, undefined!, new TestConfigurationService({ debug: { console: { collapseIdenticalLines: true } } }), undefined!, mockWorkspaceContextService, undefined!, undefined!, undefined!, mockUriIdentityService, new TestInstantiationService(), undefined!, undefined!, new NullLogService(), undefined!, undefined!, new TestAccessibilityService());\n}\n\nfunction createTwoStackFrames(session: DebugSession): { firstStackFrame: StackFrame; secondStackFrame: StackFrame } {\n\tconst thread = new class extends Thread {\n\t\tpublic override getCallStack(): StackFrame[] {\n\t\t\treturn [firstStackFrame, secondStackFrame];\n\t\t}\n\t}(session, 'mockthread', 1);\n\n\tconst firstSource = new Source({\n\t\tname: 'internalModule.js',\n\t\tpath: 'a/b/c/d/internalModule.js',\n\t\tsourceReference: 10,\n\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\tconst secondSource = new Source({\n\t\tname: 'internalModule.js',\n\t\tpath: 'z/x/c/d/internalModule.js',\n\t\tsourceReference: 11,\n\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\n\tconst firstStackFrame = new StackFrame(thread, 0, firstSource, 'app.js', 'normal', { startLineNumber: 1, startColumn: 2, endLineNumber: 1, endColumn: 10 }, 0, true);\n\tconst secondStackFrame = new StackFrame(thread, 1, secondSource, 'app2.js', 'normal', { startLineNumber: 1, startColumn: 2, endLineNumber: 1, endColumn: 10 }, 1, true);\n\n\treturn { firstStackFrame, secondStackFrame };\n}\n\nsuite('Debug - CallStack', () => {\n\tlet model: DebugModel;\n\tlet mockRawSession: MockRawSession;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tmodel = createMockDebugModel(disposables);\n\t\tmockRawSession = new MockRawSession();\n\t});\n\n\tteardown(() => {\n\t\tsinon.restore();\n\t});\n\n\t// Threads\n\n\ttest('threads simple', () => {\n\t\tconst threadId = 1;\n\t\tconst threadName = 'firstThread';\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tmodel.addSession(session);\n\n\t\tassert.strictEqual(model.getSessions(true).length, 1);\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: threadId,\n\t\t\t\tname: threadName\n\t\t\t}]\n\t\t});\n\n\t\tassert.strictEqual(session.getThread(threadId)!.name, threadName);\n\n\t\tmodel.clearThreads(session.getId(), true);\n\t\tassert.strictEqual(session.getThread(threadId), undefined);\n\t\tassert.strictEqual(model.getSessions(true).length, 1);\n\t});\n\n\ttest('threads multiple with allThreadsStopped', async () => {\n\t\tconst threadId1 = 1;\n\t\tconst threadName1 = 'firstThread';\n\t\tconst threadId2 = 2;\n\t\tconst threadName2 = 'secondThread';\n\t\tconst stoppedReason = 'breakpoint';\n\n\t\t// Add the threads\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tmodel.addSession(session);\n\n\t\tsession['raw'] = <any>mockRawSession;\n\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: threadId1,\n\t\t\t\tname: threadName1\n\t\t\t}]\n\t\t});\n\n\t\t// Stopped event with all threads stopped\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: threadId1,\n\t\t\t\tname: threadName1\n\t\t\t}, {\n\t\t\t\tid: threadId2,\n\t\t\t\tname: threadName2\n\t\t\t}],\n\t\t\tstoppedDetails: {\n\t\t\t\treason: stoppedReason,\n\t\t\t\tthreadId: 1,\n\t\t\t\tallThreadsStopped: true\n\t\t\t},\n\t\t});\n\n\t\tconst thread1 = session.getThread(threadId1)!;\n\t\tconst thread2 = session.getThread(threadId2)!;\n\n\t\t// at the beginning, callstacks are obtainable but not available\n\t\tassert.strictEqual(session.getAllThreads().length, 2);\n\t\tassert.strictEqual(thread1.name, threadName1);\n\t\tassert.strictEqual(thread1.stopped, true);\n\t\tassert.strictEqual(thread1.getCallStack().length, 0);\n\t\tassert.strictEqual(thread1.stoppedDetails!.reason, stoppedReason);\n\t\tassert.strictEqual(thread2.name, threadName2);\n\t\tassert.strictEqual(thread2.stopped, true);\n\t\tassert.strictEqual(thread2.getCallStack().length, 0);\n\t\tassert.strictEqual(thread2.stoppedDetails!.reason, undefined);\n\n\t\t// after calling getCallStack, the callstack becomes available\n\t\t// and results in a request for the callstack in the debug adapter\n\t\tawait thread1.fetchCallStack();\n\t\tassert.notStrictEqual(thread1.getCallStack().length, 0);\n\n\t\tawait thread2.fetchCallStack();\n\t\tassert.notStrictEqual(thread2.getCallStack().length, 0);\n\n\t\t// calling multiple times getCallStack doesn't result in multiple calls\n\t\t// to the debug adapter\n\t\tawait thread1.fetchCallStack();\n\t\tawait thread2.fetchCallStack();\n\n\t\t// clearing the callstack results in the callstack not being available\n\t\tthread1.clearCallStack();\n\t\tassert.strictEqual(thread1.stopped, true);\n\t\tassert.strictEqual(thread1.getCallStack().length, 0);\n\n\t\tthread2.clearCallStack();\n\t\tassert.strictEqual(thread2.stopped, true);\n\t\tassert.strictEqual(thread2.getCallStack().length, 0);\n\n\t\tmodel.clearThreads(session.getId(), true);\n\t\tassert.strictEqual(session.getThread(threadId1), undefined);\n\t\tassert.strictEqual(session.getThread(threadId2), undefined);\n\t\tassert.strictEqual(session.getAllThreads().length, 0);\n\t});\n\n\ttest('allThreadsStopped in multiple events', async () => {\n\t\tconst threadId1 = 1;\n\t\tconst threadName1 = 'firstThread';\n\t\tconst threadId2 = 2;\n\t\tconst threadName2 = 'secondThread';\n\t\tconst stoppedReason = 'breakpoint';\n\n\t\t// Add the threads\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tmodel.addSession(session);\n\n\t\tsession['raw'] = <any>mockRawSession;\n\n\t\t// Stopped event with all threads stopped\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: threadId1,\n\t\t\t\tname: threadName1\n\t\t\t}, {\n\t\t\t\tid: threadId2,\n\t\t\t\tname: threadName2\n\t\t\t}],\n\t\t\tstoppedDetails: {\n\t\t\t\treason: stoppedReason,\n\t\t\t\tthreadId: threadId1,\n\t\t\t\tallThreadsStopped: true\n\t\t\t},\n\t\t});\n\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: threadId1,\n\t\t\t\tname: threadName1\n\t\t\t}, {\n\t\t\t\tid: threadId2,\n\t\t\t\tname: threadName2\n\t\t\t}],\n\t\t\tstoppedDetails: {\n\t\t\t\treason: stoppedReason,\n\t\t\t\tthreadId: threadId2,\n\t\t\t\tallThreadsStopped: true\n\t\t\t},\n\t\t});\n\n\t\tconst thread1 = session.getThread(threadId1)!;\n\t\tconst thread2 = session.getThread(threadId2)!;\n\n\t\tassert.strictEqual(thread1.stoppedDetails?.reason, stoppedReason);\n\t\tassert.strictEqual(thread2.stoppedDetails?.reason, stoppedReason);\n\t});\n\n\ttest('threads multiple without allThreadsStopped', async () => {\n\t\tconst sessionStub = sinon.spy(mockRawSession, 'stackTrace');\n\n\t\tconst stoppedThreadId = 1;\n\t\tconst stoppedThreadName = 'stoppedThread';\n\t\tconst runningThreadId = 2;\n\t\tconst runningThreadName = 'runningThread';\n\t\tconst stoppedReason = 'breakpoint';\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tmodel.addSession(session);\n\n\t\tsession['raw'] = <any>mockRawSession;\n\n\t\t// Add the threads\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: stoppedThreadId,\n\t\t\t\tname: stoppedThreadName\n\t\t\t}]\n\t\t});\n\n\t\t// Stopped event with only one thread stopped\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: 1,\n\t\t\t\tname: stoppedThreadName\n\t\t\t}, {\n\t\t\t\tid: runningThreadId,\n\t\t\t\tname: runningThreadName\n\t\t\t}],\n\t\t\tstoppedDetails: {\n\t\t\t\treason: stoppedReason,\n\t\t\t\tthreadId: 1,\n\t\t\t\tallThreadsStopped: false\n\t\t\t}\n\t\t});\n\n\t\tconst stoppedThread = session.getThread(stoppedThreadId)!;\n\t\tconst runningThread = session.getThread(runningThreadId)!;\n\n\t\t// the callstack for the stopped thread is obtainable but not available\n\t\t// the callstack for the running thread is not obtainable nor available\n\t\tassert.strictEqual(stoppedThread.name, stoppedThreadName);\n\t\tassert.strictEqual(stoppedThread.stopped, true);\n\t\tassert.strictEqual(session.getAllThreads().length, 2);\n\t\tassert.strictEqual(stoppedThread.getCallStack().length, 0);\n\t\tassert.strictEqual(stoppedThread.stoppedDetails!.reason, stoppedReason);\n\t\tassert.strictEqual(runningThread.name, runningThreadName);\n\t\tassert.strictEqual(runningThread.stopped, false);\n\t\tassert.strictEqual(runningThread.getCallStack().length, 0);\n\t\tassert.strictEqual(runningThread.stoppedDetails, undefined);\n\n\t\t// after calling getCallStack, the callstack becomes available\n\t\t// and results in a request for the callstack in the debug adapter\n\t\tawait stoppedThread.fetchCallStack();\n\t\tassert.notStrictEqual(stoppedThread.getCallStack().length, 0);\n\t\tassert.strictEqual(runningThread.getCallStack().length, 0);\n\t\tassert.strictEqual(sessionStub.callCount, 1);\n\n\t\t// calling getCallStack on the running thread returns empty array\n\t\t// and does not return in a request for the callstack in the debug\n\t\t// adapter\n\t\tawait runningThread.fetchCallStack();\n\t\tassert.strictEqual(runningThread.getCallStack().length, 0);\n\t\tassert.strictEqual(sessionStub.callCount, 1);\n\n\t\t// clearing the callstack results in the callstack not being available\n\t\tstoppedThread.clearCallStack();\n\t\tassert.strictEqual(stoppedThread.stopped, true);\n\t\tassert.strictEqual(stoppedThread.getCallStack().length, 0);\n\n\t\tmodel.clearThreads(session.getId(), true);\n\t\tassert.strictEqual(session.getThread(stoppedThreadId), undefined);\n\t\tassert.strictEqual(session.getThread(runningThreadId), undefined);\n\t\tassert.strictEqual(session.getAllThreads().length, 0);\n\t});\n\n\ttest('stack frame get specific source name', () => {\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tmodel.addSession(session);\n\t\tconst { firstStackFrame, secondStackFrame } = createTwoStackFrames(session);\n\n\t\tassert.strictEqual(getSpecificSourceName(firstStackFrame), '.../b/c/d/internalModule.js');\n\t\tassert.strictEqual(getSpecificSourceName(secondStackFrame), '.../x/c/d/internalModule.js');\n\t});\n\n\ttest('stack frame toString()', () => {\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tconst thread = new Thread(session, 'mockthread', 1);\n\t\tconst firstSource = new Source({\n\t\t\tname: 'internalModule.js',\n\t\t\tpath: 'a/b/c/d/internalModule.js',\n\t\t\tsourceReference: 10,\n\t\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\t\tconst stackFrame = new StackFrame(thread, 1, firstSource, 'app', 'normal', { startLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 10 }, 1, true);\n\t\tassert.strictEqual(stackFrame.toString(), 'app (internalModule.js:1)');\n\n\t\tconst secondSource = new Source(undefined, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\t\tconst stackFrame2 = new StackFrame(thread, 2, secondSource, 'module', 'normal', { startLineNumber: undefined!, startColumn: undefined!, endLineNumber: undefined!, endColumn: undefined! }, 2, true);\n\t\tassert.strictEqual(stackFrame2.toString(), 'module');\n\t});\n\n\ttest('debug child sessions are added in correct order', () => {\n\t\tconst session = disposables.add(createTestSession(model));\n\t\tmodel.addSession(session);\n\t\tconst secondSession = disposables.add(createTestSession(model, 'mockSession2'));\n\t\tmodel.addSession(secondSession);\n\t\tconst firstChild = disposables.add(createTestSession(model, 'firstChild', { parentSession: session }));\n\t\tmodel.addSession(firstChild);\n\t\tconst secondChild = disposables.add(createTestSession(model, 'secondChild', { parentSession: session }));\n\t\tmodel.addSession(secondChild);\n\t\tconst thirdSession = disposables.add(createTestSession(model, 'mockSession3'));\n\t\tmodel.addSession(thirdSession);\n\t\tconst anotherChild = disposables.add(createTestSession(model, 'secondChild', { parentSession: secondSession }));\n\t\tmodel.addSession(anotherChild);\n\n\t\tconst sessions = model.getSessions();\n\t\tassert.strictEqual(sessions[0].getId(), session.getId());\n\t\tassert.strictEqual(sessions[1].getId(), firstChild.getId());\n\t\tassert.strictEqual(sessions[2].getId(), secondChild.getId());\n\t\tassert.strictEqual(sessions[3].getId(), secondSession.getId());\n\t\tassert.strictEqual(sessions[4].getId(), anotherChild.getId());\n\t\tassert.strictEqual(sessions[5].getId(), thirdSession.getId());\n\t});\n\n\ttest('decorations', () => {\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tmodel.addSession(session);\n\t\tconst { firstStackFrame, secondStackFrame } = createTwoStackFrames(session);\n\t\tlet decorations = createDecorationsForStackFrame(firstStackFrame, true, false);\n\t\tassert.strictEqual(decorations.length, 3);\n\t\tassert.deepStrictEqual(decorations[0].range, new Range(1, 2, 1, 3));\n\t\tassert.strictEqual(decorations[0].options.glyphMarginClassName, ThemeIcon.asClassName(debugStackframe));\n\t\tassert.deepStrictEqual(decorations[1].range, new Range(1, 2, 1, Constants.MAX_SAFE_SMALL_INTEGER));\n\t\tassert.strictEqual(decorations[1].options.className, 'debug-top-stack-frame-line');\n\t\tassert.strictEqual(decorations[1].options.isWholeLine, true);\n\n\t\tdecorations = createDecorationsForStackFrame(secondStackFrame, true, false);\n\t\tassert.strictEqual(decorations.length, 2);\n\t\tassert.deepStrictEqual(decorations[0].range, new Range(1, 2, 1, 3));\n\t\tassert.strictEqual(decorations[0].options.glyphMarginClassName, ThemeIcon.asClassName(debugStackframeFocused));\n\t\tassert.deepStrictEqual(decorations[1].range, new Range(1, 2, 1, Constants.MAX_SAFE_SMALL_INTEGER));\n\t\tassert.strictEqual(decorations[1].options.className, 'debug-focused-stack-frame-line');\n\t\tassert.strictEqual(decorations[1].options.isWholeLine, true);\n\n\t\tdecorations = createDecorationsForStackFrame(firstStackFrame, true, false);\n\t\tassert.strictEqual(decorations.length, 3);\n\t\tassert.deepStrictEqual(decorations[0].range, new Range(1, 2, 1, 3));\n\t\tassert.strictEqual(decorations[0].options.glyphMarginClassName, ThemeIcon.asClassName(debugStackframe));\n\t\tassert.deepStrictEqual(decorations[1].range, new Range(1, 2, 1, Constants.MAX_SAFE_SMALL_INTEGER));\n\t\tassert.strictEqual(decorations[1].options.className, 'debug-top-stack-frame-line');\n\t\tassert.strictEqual(decorations[1].options.isWholeLine, true);\n\t\t// Inline decoration gets rendered in this case\n\t\tassert.strictEqual(decorations[2].options.before?.inlineClassName, 'debug-top-stack-frame-column');\n\t\tassert.deepStrictEqual(decorations[2].range, new Range(1, 2, 1, Constants.MAX_SAFE_SMALL_INTEGER));\n\t});\n\n\ttest('contexts', () => {\n\t\tconst session = createTestSession(model);\n\t\tdisposables.add(session);\n\t\tmodel.addSession(session);\n\t\tconst { firstStackFrame, secondStackFrame } = createTwoStackFrames(session);\n\t\tlet context = getContext(firstStackFrame);\n\t\tassert.strictEqual(context.sessionId, firstStackFrame.thread.session.getId());\n\t\tassert.strictEqual(context.threadId, firstStackFrame.thread.getId());\n\t\tassert.strictEqual(context.frameId, firstStackFrame.getId());\n\n\t\tcontext = getContext(secondStackFrame.thread);\n\t\tassert.strictEqual(context.sessionId, secondStackFrame.thread.session.getId());\n\t\tassert.strictEqual(context.threadId, secondStackFrame.thread.getId());\n\t\tassert.strictEqual(context.frameId, undefined);\n\n\t\tcontext = getContext(session);\n\t\tassert.strictEqual(context.sessionId, session.getId());\n\t\tassert.strictEqual(context.threadId, undefined);\n\t\tassert.strictEqual(context.frameId, undefined);\n\n\t\tlet contributedContext = getContextForContributedActions(firstStackFrame);\n\t\tassert.strictEqual(contributedContext, firstStackFrame.source.raw.path);\n\t\tcontributedContext = getContextForContributedActions(firstStackFrame.thread);\n\t\tassert.strictEqual(contributedContext, firstStackFrame.thread.threadId);\n\t\tcontributedContext = getContextForContributedActions(session);\n\t\tassert.strictEqual(contributedContext, session.getId());\n\t});\n\n\ttest('focusStackFrameThreadAndSession', () => {\n\t\tconst threadId1 = 1;\n\t\tconst threadName1 = 'firstThread';\n\t\tconst threadId2 = 2;\n\t\tconst threadName2 = 'secondThread';\n\t\tconst stoppedReason = 'breakpoint';\n\n\t\t// Add the threads\n\t\tconst session = new class extends DebugSession {\n\t\t\toverride get state(): State {\n\t\t\t\treturn State.Stopped;\n\t\t\t}\n\t\t}(generateUuid(), { resolved: { name: 'stoppedSession', type: 'node', request: 'launch' }, unresolved: undefined }, undefined, model, undefined, undefined!, undefined!, undefined!, undefined!, undefined!, mockWorkspaceContextService, undefined!, undefined!, undefined!, mockUriIdentityService, new TestInstantiationService(), undefined!, undefined!, new NullLogService(), undefined!, undefined!, new TestAccessibilityService());\n\t\tdisposables.add(session);\n\n\t\tconst runningSession = createTestSession(model);\n\t\tdisposables.add(runningSession);\n\t\tmodel.addSession(runningSession);\n\t\tmodel.addSession(session);\n\n\t\tsession['raw'] = <any>mockRawSession;\n\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: threadId1,\n\t\t\t\tname: threadName1\n\t\t\t}]\n\t\t});\n\n\t\t// Stopped event with all threads stopped\n\t\tmodel.rawUpdate({\n\t\t\tsessionId: session.getId(),\n\t\t\tthreads: [{\n\t\t\t\tid: threadId1,\n\t\t\t\tname: threadName1\n\t\t\t}, {\n\t\t\t\tid: threadId2,\n\t\t\t\tname: threadName2\n\t\t\t}],\n\t\t\tstoppedDetails: {\n\t\t\t\treason: stoppedReason,\n\t\t\t\tthreadId: 1,\n\t\t\t\tallThreadsStopped: true\n\t\t\t},\n\t\t});\n\n\t\tconst thread = session.getThread(threadId1)!;\n\t\tconst runningThread = session.getThread(threadId2);\n\n\t\tlet toFocus = getStackFrameThreadAndSessionToFocus(model, undefined);\n\t\t// Verify stopped session and stopped thread get focused\n\t\tassert.deepStrictEqual(toFocus, { stackFrame: undefined, thread: thread, session: session });\n\n\t\ttoFocus = getStackFrameThreadAndSessionToFocus(model, undefined, undefined, runningSession);\n\t\tassert.deepStrictEqual(toFocus, { stackFrame: undefined, thread: undefined, session: runningSession });\n\n\t\ttoFocus = getStackFrameThreadAndSessionToFocus(model, undefined, thread);\n\t\tassert.deepStrictEqual(toFocus, { stackFrame: undefined, thread: thread, session: session });\n\n\t\ttoFocus = getStackFrameThreadAndSessionToFocus(model, undefined, runningThread);\n\t\tassert.deepStrictEqual(toFocus, { stackFrame: undefined, thread: runningThread, session: session });\n\n\t\tconst stackFrame = new StackFrame(thread, 5, undefined!, 'stackframename2', undefined, undefined!, 1, true);\n\t\ttoFocus = getStackFrameThreadAndSessionToFocus(model, stackFrame);\n\t\tassert.deepStrictEqual(toFocus, { stackFrame: stackFrame, thread: thread, session: session });\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
