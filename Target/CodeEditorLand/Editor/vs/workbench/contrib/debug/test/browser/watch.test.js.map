{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/watch.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DebugModel, Expression } from '../../common/debugModel.js';\nimport { createMockDebugModel } from './mockDebugModel.js';\n\n// Expressions\n\nfunction assertWatchExpressions(watchExpressions: Expression[], expectedName: string) {\n\tassert.strictEqual(watchExpressions.length, 2);\n\twatchExpressions.forEach(we => {\n\t\tassert.strictEqual(we.available, false);\n\t\tassert.strictEqual(we.reference, 0);\n\t\tassert.strictEqual(we.name, expectedName);\n\t});\n}\n\nsuite('Debug - Watch', () => {\n\tlet model: DebugModel;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tmodel = createMockDebugModel(disposables);\n\t});\n\n\ttest('watch expressions', () => {\n\t\tassert.strictEqual(model.getWatchExpressions().length, 0);\n\t\tmodel.addWatchExpression('console');\n\t\tmodel.addWatchExpression('console');\n\t\tlet watchExpressions = model.getWatchExpressions();\n\t\tassertWatchExpressions(watchExpressions, 'console');\n\n\t\tmodel.renameWatchExpression(watchExpressions[0].getId(), 'new_name');\n\t\tmodel.renameWatchExpression(watchExpressions[1].getId(), 'new_name');\n\t\tassertWatchExpressions(model.getWatchExpressions(), 'new_name');\n\n\t\tassertWatchExpressions(model.getWatchExpressions(), 'new_name');\n\n\t\tmodel.addWatchExpression('mockExpression');\n\t\tmodel.moveWatchExpression(model.getWatchExpressions()[2].getId(), 1);\n\t\twatchExpressions = model.getWatchExpressions();\n\t\tassert.strictEqual(watchExpressions[0].name, 'new_name');\n\t\tassert.strictEqual(watchExpressions[1].name, 'mockExpression');\n\t\tassert.strictEqual(watchExpressions[2].name, 'new_name');\n\n\t\tmodel.removeWatchExpressions();\n\t\tassert.strictEqual(model.getWatchExpressions().length, 0);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,YAAY,kBAAkB;AACvC,SAAS,4BAA4B;AAIrC,SAAS,uBAAuB,kBAAgC,cAAsB;AACrF,SAAO,YAAY,iBAAiB,QAAQ,CAAC;AAC7C,mBAAiB,QAAQ,QAAM;AAC9B,WAAO,YAAY,GAAG,WAAW,KAAK;AACtC,WAAO,YAAY,GAAG,WAAW,CAAC;AAClC,WAAO,YAAY,GAAG,MAAM,YAAY;AAAA,EACzC,CAAC;AACF;AAPS;AAST,MAAM,iBAAiB,MAAM;AAC5B,MAAI;AACJ,QAAM,cAAc,wCAAwC;AAE5D,QAAM,MAAM;AACX,YAAQ,qBAAqB,WAAW;AAAA,EACzC,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B,WAAO,YAAY,MAAM,oBAAoB,EAAE,QAAQ,CAAC;AACxD,UAAM,mBAAmB,SAAS;AAClC,UAAM,mBAAmB,SAAS;AAClC,QAAI,mBAAmB,MAAM,oBAAoB;AACjD,2BAAuB,kBAAkB,SAAS;AAElD,UAAM,sBAAsB,iBAAiB,CAAC,EAAE,MAAM,GAAG,UAAU;AACnE,UAAM,sBAAsB,iBAAiB,CAAC,EAAE,MAAM,GAAG,UAAU;AACnE,2BAAuB,MAAM,oBAAoB,GAAG,UAAU;AAE9D,2BAAuB,MAAM,oBAAoB,GAAG,UAAU;AAE9D,UAAM,mBAAmB,gBAAgB;AACzC,UAAM,oBAAoB,MAAM,oBAAoB,EAAE,CAAC,EAAE,MAAM,GAAG,CAAC;AACnE,uBAAmB,MAAM,oBAAoB;AAC7C,WAAO,YAAY,iBAAiB,CAAC,EAAE,MAAM,UAAU;AACvD,WAAO,YAAY,iBAAiB,CAAC,EAAE,MAAM,gBAAgB;AAC7D,WAAO,YAAY,iBAAiB,CAAC,EAAE,MAAM,UAAU;AAEvD,UAAM,uBAAuB;AAC7B,WAAO,YAAY,MAAM,oBAAoB,EAAE,QAAQ,CAAC;AAAA,EACzD,CAAC;AACF,CAAC;",
  "names": []
}
