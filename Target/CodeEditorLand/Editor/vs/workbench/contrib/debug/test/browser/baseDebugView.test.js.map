{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/baseDebugView.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { HighlightedLabel } from '../../../../../base/browser/ui/highlightedlabel/highlightedLabel.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IHoverService } from '../../../../../platform/hover/browser/hover.js';\nimport { NullHoverService } from '../../../../../platform/hover/test/browser/nullHoverService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { renderViewTree } from '../../browser/baseDebugView.js';\nimport { DebugExpressionRenderer } from '../../browser/debugExpressionRenderer.js';\nimport { isStatusbarInDebugMode } from '../../browser/statusbarColorProvider.js';\nimport { State } from '../../common/debug.js';\nimport { Expression, Scope, StackFrame, Thread, Variable } from '../../common/debugModel.js';\nimport { MockSession } from '../common/mockDebug.js';\nimport { createTestSession } from './callStack.test.js';\nimport { createMockDebugModel } from './mockDebugModel.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nconst $ = dom.$;\n\n\nsuite('Debug - Base Debug View', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet renderer: DebugExpressionRenderer;\n\tlet configurationService: TestConfigurationService;\n\n\tfunction assertVariable(session: MockSession, scope: Scope, disposables: Pick<DisposableStore, \"add\">, displayType: boolean) {\n\t\tlet variable = new Variable(session, 1, scope, 2, 'foo', 'bar.foo', undefined, 0, 0, undefined, {}, 'string');\n\t\tlet expression = $('.');\n\t\tlet name = $('.');\n\t\tlet type = $('.');\n\t\tlet value = $('.');\n\t\tconst label = new HighlightedLabel(name);\n\t\tconst lazyButton = $('.');\n\t\tconst store = disposables.add(new DisposableStore());\n\t\tstore.add(renderer.renderVariable({ expression, name, type, value, label, lazyButton }, variable, { showChanged: false }));\n\n\t\tassert.strictEqual(label.element.textContent, 'foo');\n\t\tassert.strictEqual(value.textContent, '');\n\n\t\tvariable.value = 'hey';\n\t\texpression = $('.');\n\t\tname = $('.');\n\t\ttype = $('.');\n\t\tvalue = $('.');\n\t\tstore.add(renderer.renderVariable({ expression, name, type, value, label, lazyButton }, variable, { showChanged: false }));\n\t\tassert.strictEqual(value.textContent, 'hey');\n\t\tassert.strictEqual(label.element.textContent, displayType ? 'foo: ' : 'foo =');\n\t\tassert.strictEqual(type.textContent, displayType ? 'string =' : '');\n\n\t\tvariable.value = isWindows ? 'C:\\\\foo.js:5' : '/foo.js:5';\n\t\texpression = $('.');\n\t\tname = $('.');\n\t\ttype = $('.');\n\t\tvalue = $('.');\n\t\tstore.add(renderer.renderVariable({ expression, name, type, value, label, lazyButton }, variable, { showChanged: false }));\n\t\tassert.ok(value.querySelector('a'));\n\t\tassert.strictEqual(value.querySelector('a')!.textContent, variable.value);\n\n\t\tvariable = new Variable(session, 1, scope, 2, 'console', 'console', '5', 0, 0, undefined, { kind: 'virtual' });\n\t\texpression = $('.');\n\t\tname = $('.');\n\t\ttype = $('.');\n\t\tvalue = $('.');\n\t\tstore.add(renderer.renderVariable({ expression, name, type, value, label, lazyButton }, variable, { showChanged: false }));\n\t\tassert.strictEqual(name.className, 'virtual');\n\t\tassert.strictEqual(label.element.textContent, 'console =');\n\t\tassert.strictEqual(value.className, 'value number');\n\n\t\tvariable = new Variable(session, 1, scope, 2, 'xpto', 'xpto.xpto', undefined, 0, 0, undefined, {}, 'custom-type');\n\t\tstore.add(renderer.renderVariable({ expression, name, type, value, label, lazyButton }, variable, { showChanged: false }));\n\t\tassert.strictEqual(label.element.textContent, 'xpto');\n\t\tassert.strictEqual(value.textContent, '');\n\t\tvariable.value = '2';\n\t\texpression = $('.');\n\t\tname = $('.');\n\t\ttype = $('.');\n\t\tvalue = $('.');\n\t\tstore.add(renderer.renderVariable({ expression, name, type, value, label, lazyButton }, variable, { showChanged: false }));\n\t\tassert.strictEqual(value.textContent, '2');\n\t\tassert.strictEqual(label.element.textContent, displayType ? 'xpto: ' : 'xpto =');\n\t\tassert.strictEqual(type.textContent, displayType ? 'custom-type =' : '');\n\n\t\tlabel.dispose();\n\t}\n\n\t/**\n\t * Instantiate services for use by the functions being tested.\n\t */\n\tsetup(() => {\n\t\tconst instantiationService: TestInstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tconfigurationService = instantiationService.createInstance(TestConfigurationService);\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\tinstantiationService.stub(IHoverService, NullHoverService);\n\t\trenderer = instantiationService.createInstance(DebugExpressionRenderer);\n\t});\n\n\ttest('render view tree', () => {\n\t\tconst container = $('.container');\n\t\tconst treeContainer = renderViewTree(container);\n\n\t\tassert.strictEqual(treeContainer.className, 'debug-view-content');\n\t\tassert.strictEqual(container.childElementCount, 1);\n\t\tassert.strictEqual(container.firstChild, treeContainer);\n\t\tassert.strictEqual(dom.isHTMLDivElement(treeContainer), true);\n\t});\n\n\ttest('render expression value', () => {\n\t\tlet container = $('.container');\n\t\tconst store = disposables.add(new DisposableStore());\n\t\tstore.add(renderer.renderValue(container, 'render \\n me', {}));\n\t\tassert.strictEqual(container.className, 'value');\n\t\tassert.strictEqual(container.textContent, 'render \\n me');\n\n\t\tconst expression = new Expression('console');\n\t\texpression.value = 'Object';\n\t\tcontainer = $('.container');\n\t\tstore.add(renderer.renderValue(container, expression, { colorize: true }));\n\t\tassert.strictEqual(container.className, 'value unavailable error');\n\n\t\texpression.available = true;\n\t\texpression.value = '\"string value\"';\n\t\tcontainer = $('.container');\n\t\tstore.add(renderer.renderValue(container, expression, { colorize: true }));\n\t\tassert.strictEqual(container.className, 'value string');\n\t\tassert.strictEqual(container.textContent, '\"string value\"');\n\n\t\texpression.type = 'boolean';\n\t\tcontainer = $('.container');\n\t\tstore.add(renderer.renderValue(container, expression, { colorize: true }));\n\t\tassert.strictEqual(container.className, 'value boolean');\n\t\tassert.strictEqual(container.textContent, expression.value);\n\n\t\texpression.value = 'this is a long string';\n\t\tcontainer = $('.container');\n\t\tstore.add(renderer.renderValue(container, expression, { colorize: true, maxValueLength: 4 }));\n\t\tassert.strictEqual(container.textContent, 'this...');\n\n\t\texpression.value = isWindows ? 'C:\\\\foo.js:5' : '/foo.js:5';\n\t\tcontainer = $('.container');\n\t\tstore.add(renderer.renderValue(container, expression, { colorize: true }));\n\t\tassert.ok(container.querySelector('a'));\n\t\tassert.strictEqual(container.querySelector('a')!.textContent, expression.value);\n\t});\n\n\ttest('render variable', () => {\n\t\tconst session = new MockSession();\n\t\tconst thread = new Thread(session, 'mockthread', 1);\n\t\tconst range = {\n\t\t\tstartLineNumber: 1,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: undefined!,\n\t\t\tendColumn: undefined!\n\t\t};\n\t\tconst stackFrame = new StackFrame(thread, 1, null!, 'app.js', 'normal', range, 0, true);\n\t\tconst scope = new Scope(stackFrame, 1, 'local', 1, false, 10, 10);\n\n\t\tconfigurationService.setUserConfiguration('debug.showVariableTypes', false);\n\t\tassertVariable(session, scope, disposables, false);\n\n\t});\n\n\ttest('render variable with display type setting', () => {\n\t\tconst session = new MockSession();\n\t\tconst thread = new Thread(session, 'mockthread', 1);\n\t\tconst range = {\n\t\t\tstartLineNumber: 1,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: undefined!,\n\t\t\tendColumn: undefined!\n\t\t};\n\t\tconst stackFrame = new StackFrame(thread, 1, null!, 'app.js', 'normal', range, 0, true);\n\t\tconst scope = new Scope(stackFrame, 1, 'local', 1, false, 10, 10);\n\n\t\tconfigurationService.setUserConfiguration('debug.showVariableTypes', true);\n\t\tassertVariable(session, scope, disposables, true);\n\t});\n\n\ttest('statusbar in debug mode', () => {\n\t\tconst model = createMockDebugModel(disposables);\n\t\tconst session = disposables.add(createTestSession(model));\n\t\tconst session2 = disposables.add(createTestSession(model, undefined, { suppressDebugStatusbar: true }));\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Inactive, []), false);\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Initializing, [session]), false);\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Running, [session]), true);\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Stopped, [session]), true);\n\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Running, [session2]), false);\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Running, [session, session2]), true);\n\n\t\tsession.configuration.noDebug = true;\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Running, [session]), false);\n\t\tassert.strictEqual(isStatusbarInDebugMode(State.Running, [session, session2]), false);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,YAAY,SAAS;AACrB,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAC1B,SAAS,+CAA+C;AACxD,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,SAAS,gCAAgC;AACzC,SAAS,qCAAqC;AAC9C,SAAS,sBAAsB;AAC/B,SAAS,+BAA+B;AACxC,SAAS,8BAA8B;AACvC,SAAS,aAAa;AACtB,SAAS,YAAY,OAAO,YAAY,QAAQ,gBAAgB;AAChE,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,4BAA4B;AACrC,SAAS,gCAAgC;AACzC,SAAS,6BAA6B;AACtC,MAAM,IAAI,IAAI;AAGd,MAAM,2BAA2B,MAAM;AACtC,QAAM,cAAc,wCAAwC;AAC5D,MAAI;AACJ,MAAI;AAEJ,WAAS,eAAe,SAAsB,OAAcA,cAA2C,aAAsB;AAC5H,QAAI,WAAW,IAAI,SAAS,SAAS,GAAG,OAAO,GAAG,OAAO,WAAW,QAAW,GAAG,GAAG,QAAW,CAAC,GAAG,QAAQ;AAC5G,QAAI,aAAa,EAAE,GAAG;AACtB,QAAI,OAAO,EAAE,GAAG;AAChB,QAAI,OAAO,EAAE,GAAG;AAChB,QAAI,QAAQ,EAAE,GAAG;AACjB,UAAM,QAAQ,IAAI,iBAAiB,IAAI;AACvC,UAAM,aAAa,EAAE,GAAG;AACxB,UAAM,QAAQA,aAAY,IAAI,IAAI,gBAAgB,CAAC;AACnD,UAAM,IAAI,SAAS,eAAe,EAAE,YAAY,MAAM,MAAM,OAAO,OAAO,WAAW,GAAG,UAAU,EAAE,aAAa,MAAM,CAAC,CAAC;AAEzH,WAAO,YAAY,MAAM,QAAQ,aAAa,KAAK;AACnD,WAAO,YAAY,MAAM,aAAa,EAAE;AAExC,aAAS,QAAQ;AACjB,iBAAa,EAAE,GAAG;AAClB,WAAO,EAAE,GAAG;AACZ,WAAO,EAAE,GAAG;AACZ,YAAQ,EAAE,GAAG;AACb,UAAM,IAAI,SAAS,eAAe,EAAE,YAAY,MAAM,MAAM,OAAO,OAAO,WAAW,GAAG,UAAU,EAAE,aAAa,MAAM,CAAC,CAAC;AACzH,WAAO,YAAY,MAAM,aAAa,KAAK;AAC3C,WAAO,YAAY,MAAM,QAAQ,aAAa,cAAc,UAAU,OAAO;AAC7E,WAAO,YAAY,KAAK,aAAa,cAAc,aAAa,EAAE;AAElE,aAAS,QAAQ,YAAY,iBAAiB;AAC9C,iBAAa,EAAE,GAAG;AAClB,WAAO,EAAE,GAAG;AACZ,WAAO,EAAE,GAAG;AACZ,YAAQ,EAAE,GAAG;AACb,UAAM,IAAI,SAAS,eAAe,EAAE,YAAY,MAAM,MAAM,OAAO,OAAO,WAAW,GAAG,UAAU,EAAE,aAAa,MAAM,CAAC,CAAC;AACzH,WAAO,GAAG,MAAM,cAAc,GAAG,CAAC;AAClC,WAAO,YAAY,MAAM,cAAc,GAAG,EAAG,aAAa,SAAS,KAAK;AAExE,eAAW,IAAI,SAAS,SAAS,GAAG,OAAO,GAAG,WAAW,WAAW,KAAK,GAAG,GAAG,QAAW,EAAE,MAAM,UAAU,CAAC;AAC7G,iBAAa,EAAE,GAAG;AAClB,WAAO,EAAE,GAAG;AACZ,WAAO,EAAE,GAAG;AACZ,YAAQ,EAAE,GAAG;AACb,UAAM,IAAI,SAAS,eAAe,EAAE,YAAY,MAAM,MAAM,OAAO,OAAO,WAAW,GAAG,UAAU,EAAE,aAAa,MAAM,CAAC,CAAC;AACzH,WAAO,YAAY,KAAK,WAAW,SAAS;AAC5C,WAAO,YAAY,MAAM,QAAQ,aAAa,WAAW;AACzD,WAAO,YAAY,MAAM,WAAW,cAAc;AAElD,eAAW,IAAI,SAAS,SAAS,GAAG,OAAO,GAAG,QAAQ,aAAa,QAAW,GAAG,GAAG,QAAW,CAAC,GAAG,aAAa;AAChH,UAAM,IAAI,SAAS,eAAe,EAAE,YAAY,MAAM,MAAM,OAAO,OAAO,WAAW,GAAG,UAAU,EAAE,aAAa,MAAM,CAAC,CAAC;AACzH,WAAO,YAAY,MAAM,QAAQ,aAAa,MAAM;AACpD,WAAO,YAAY,MAAM,aAAa,EAAE;AACxC,aAAS,QAAQ;AACjB,iBAAa,EAAE,GAAG;AAClB,WAAO,EAAE,GAAG;AACZ,WAAO,EAAE,GAAG;AACZ,YAAQ,EAAE,GAAG;AACb,UAAM,IAAI,SAAS,eAAe,EAAE,YAAY,MAAM,MAAM,OAAO,OAAO,WAAW,GAAG,UAAU,EAAE,aAAa,MAAM,CAAC,CAAC;AACzH,WAAO,YAAY,MAAM,aAAa,GAAG;AACzC,WAAO,YAAY,MAAM,QAAQ,aAAa,cAAc,WAAW,QAAQ;AAC/E,WAAO,YAAY,KAAK,aAAa,cAAc,kBAAkB,EAAE;AAEvE,UAAM,QAAQ;AAAA,EACf;AA1DS;AA+DT,QAAM,MAAM;AACX,UAAM,uBAAiD,8BAA8B,QAAW,WAAW;AAC3G,2BAAuB,qBAAqB,eAAe,wBAAwB;AACnF,yBAAqB,KAAK,uBAAuB,oBAAoB;AACrE,yBAAqB,KAAK,eAAe,gBAAgB;AACzD,eAAW,qBAAqB,eAAe,uBAAuB;AAAA,EACvE,CAAC;AAED,OAAK,oBAAoB,MAAM;AAC9B,UAAM,YAAY,EAAE,YAAY;AAChC,UAAM,gBAAgB,eAAe,SAAS;AAE9C,WAAO,YAAY,cAAc,WAAW,oBAAoB;AAChE,WAAO,YAAY,UAAU,mBAAmB,CAAC;AACjD,WAAO,YAAY,UAAU,YAAY,aAAa;AACtD,WAAO,YAAY,IAAI,iBAAiB,aAAa,GAAG,IAAI;AAAA,EAC7D,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC,QAAI,YAAY,EAAE,YAAY;AAC9B,UAAM,QAAQ,YAAY,IAAI,IAAI,gBAAgB,CAAC;AACnD,UAAM,IAAI,SAAS,YAAY,WAAW,gBAAgB,CAAC,CAAC,CAAC;AAC7D,WAAO,YAAY,UAAU,WAAW,OAAO;AAC/C,WAAO,YAAY,UAAU,aAAa,cAAc;AAExD,UAAM,aAAa,IAAI,WAAW,SAAS;AAC3C,eAAW,QAAQ;AACnB,gBAAY,EAAE,YAAY;AAC1B,UAAM,IAAI,SAAS,YAAY,WAAW,YAAY,EAAE,UAAU,KAAK,CAAC,CAAC;AACzE,WAAO,YAAY,UAAU,WAAW,yBAAyB;AAEjE,eAAW,YAAY;AACvB,eAAW,QAAQ;AACnB,gBAAY,EAAE,YAAY;AAC1B,UAAM,IAAI,SAAS,YAAY,WAAW,YAAY,EAAE,UAAU,KAAK,CAAC,CAAC;AACzE,WAAO,YAAY,UAAU,WAAW,cAAc;AACtD,WAAO,YAAY,UAAU,aAAa,gBAAgB;AAE1D,eAAW,OAAO;AAClB,gBAAY,EAAE,YAAY;AAC1B,UAAM,IAAI,SAAS,YAAY,WAAW,YAAY,EAAE,UAAU,KAAK,CAAC,CAAC;AACzE,WAAO,YAAY,UAAU,WAAW,eAAe;AACvD,WAAO,YAAY,UAAU,aAAa,WAAW,KAAK;AAE1D,eAAW,QAAQ;AACnB,gBAAY,EAAE,YAAY;AAC1B,UAAM,IAAI,SAAS,YAAY,WAAW,YAAY,EAAE,UAAU,MAAM,gBAAgB,EAAE,CAAC,CAAC;AAC5F,WAAO,YAAY,UAAU,aAAa,SAAS;AAEnD,eAAW,QAAQ,YAAY,iBAAiB;AAChD,gBAAY,EAAE,YAAY;AAC1B,UAAM,IAAI,SAAS,YAAY,WAAW,YAAY,EAAE,UAAU,KAAK,CAAC,CAAC;AACzE,WAAO,GAAG,UAAU,cAAc,GAAG,CAAC;AACtC,WAAO,YAAY,UAAU,cAAc,GAAG,EAAG,aAAa,WAAW,KAAK;AAAA,EAC/E,CAAC;AAED,OAAK,mBAAmB,MAAM;AAC7B,UAAM,UAAU,IAAI,YAAY;AAChC,UAAM,SAAS,IAAI,OAAO,SAAS,cAAc,CAAC;AAClD,UAAM,QAAQ;AAAA,MACb,iBAAiB;AAAA,MACjB,aAAa;AAAA,MACb,eAAe;AAAA,MACf,WAAW;AAAA,IACZ;AACA,UAAM,aAAa,IAAI,WAAW,QAAQ,GAAG,MAAO,UAAU,UAAU,OAAO,GAAG,IAAI;AACtF,UAAM,QAAQ,IAAI,MAAM,YAAY,GAAG,SAAS,GAAG,OAAO,IAAI,EAAE;AAEhE,yBAAqB,qBAAqB,2BAA2B,KAAK;AAC1E,mBAAe,SAAS,OAAO,aAAa,KAAK;AAAA,EAElD,CAAC;AAED,OAAK,6CAA6C,MAAM;AACvD,UAAM,UAAU,IAAI,YAAY;AAChC,UAAM,SAAS,IAAI,OAAO,SAAS,cAAc,CAAC;AAClD,UAAM,QAAQ;AAAA,MACb,iBAAiB;AAAA,MACjB,aAAa;AAAA,MACb,eAAe;AAAA,MACf,WAAW;AAAA,IACZ;AACA,UAAM,aAAa,IAAI,WAAW,QAAQ,GAAG,MAAO,UAAU,UAAU,OAAO,GAAG,IAAI;AACtF,UAAM,QAAQ,IAAI,MAAM,YAAY,GAAG,SAAS,GAAG,OAAO,IAAI,EAAE;AAEhE,yBAAqB,qBAAqB,2BAA2B,IAAI;AACzE,mBAAe,SAAS,OAAO,aAAa,IAAI;AAAA,EACjD,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC,UAAM,QAAQ,qBAAqB,WAAW;AAC9C,UAAM,UAAU,YAAY,IAAI,kBAAkB,KAAK,CAAC;AACxD,UAAM,WAAW,YAAY,IAAI,kBAAkB,OAAO,QAAW,EAAE,wBAAwB,KAAK,CAAC,CAAC;AACtG,WAAO,YAAY,uBAAuB,MAAM,UAAU,CAAC,CAAC,GAAG,KAAK;AACpE,WAAO,YAAY,uBAAuB,MAAM,cAAc,CAAC,OAAO,CAAC,GAAG,KAAK;AAC/E,WAAO,YAAY,uBAAuB,MAAM,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI;AACzE,WAAO,YAAY,uBAAuB,MAAM,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI;AAEzE,WAAO,YAAY,uBAAuB,MAAM,SAAS,CAAC,QAAQ,CAAC,GAAG,KAAK;AAC3E,WAAO,YAAY,uBAAuB,MAAM,SAAS,CAAC,SAAS,QAAQ,CAAC,GAAG,IAAI;AAEnF,YAAQ,cAAc,UAAU;AAChC,WAAO,YAAY,uBAAuB,MAAM,SAAS,CAAC,OAAO,CAAC,GAAG,KAAK;AAC1E,WAAO,YAAY,uBAAuB,MAAM,SAAS,CAAC,SAAS,QAAQ,CAAC,GAAG,KAAK;AAAA,EACrF,CAAC;AACF,CAAC;",
  "names": ["disposables"]
}
