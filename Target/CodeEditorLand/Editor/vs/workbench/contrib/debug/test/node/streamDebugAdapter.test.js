import a from"assert";import*as d from"crypto";import*as c from"net";import*as l from"../../../../../base/common/platform.js";import{tmpdir as g}from"os";import{join as p}from"../../../../../base/common/path.js";import*as f from"../../../../../base/node/ports.js";import{SocketDebugAdapter as S,NamedPipeDebugAdapter as q}from"../../node/debugAdapter.js";import{ensureNoDisposablesAreLeakedInTestSuite as b}from"../../../../../base/test/common/utils.js";function m(s){return new Promise((r,o)=>{s.sendRequest("initialize",{adapterID:"test"},e=>{r(e)},3e3)})}function u(s){s.on("data",r=>{const o=r.toString().split(`\r
`)[2],e=JSON.parse(o),t={seq:e.seq,request_seq:e.seq,type:"response",command:e.command};e.arguments.adapterID==="test"?t.success=!0:(t.success=!1,t.message="failed");const n=JSON.stringify(t);s.write(`Content-Length: ${n.length}\r
\r
${n}`)})}suite("Debug - StreamDebugAdapter",()=>{b(),test("StreamDebugAdapter (NamedPipeDebugAdapter) can initialize a connection",async()=>{const s=d.randomBytes(10).toString("hex"),r=l.isWindows?p("\\\\.\\pipe\\",s):p(g(),s),o=await new Promise((t,n)=>{const i=c.createServer(u);i.once("listening",()=>t(i)),i.once("error",n),i.listen(r)}),e=new q({type:"pipeServer",path:r});try{await e.startSession();const t=await m(e);a.strictEqual(t.command,"initialize"),a.strictEqual(t.request_seq,1),a.strictEqual(t.success,!0,t.message)}finally{await e.stopSession(),o.close(),e.dispose()}}),test("StreamDebugAdapter (SocketDebugAdapter) can initialize a connection",async()=>{const s=Math.floor(Math.random()*1e3+8e3),r=await f.findFreePort(s,10,3e3,87),o=c.createServer(u).listen(r),e=new S({type:"server",port:r});try{await e.startSession();const t=await m(e);a.strictEqual(t.command,"initialize"),a.strictEqual(t.request_seq,1),a.strictEqual(t.success,!0,t.message)}finally{await e.stopSession(),o.close(),e.dispose()}})});
