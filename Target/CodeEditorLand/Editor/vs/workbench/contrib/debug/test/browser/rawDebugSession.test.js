import r from"assert";import{mock as o,mockObject as g}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as a}from"../../../../../base/test/common/utils.js";import"../../../../../platform/debug/common/extensionHostDebug.js";import"../../../../../platform/dialogs/common/dialogs.js";import"../../../../../platform/notification/common/notification.js";import"../../../../../platform/opener/common/opener.js";import{RawDebugSession as u}from"../../browser/rawDebugSession.js";import"../../common/debug.js";import{MockDebugAdapter as c}from"../common/mockDebug.js";suite("RawDebugSession",()=>{const n=a();function i(){const e=new c,s=g()({type:"mock-debug"}),t=new u(e,s,"sessionId","name",new(o()),new(o()),new(o()),new(o()));return n.add(t),n.add(e),{debugAdapter:e,dbgr:s}}test("handles startDebugging request success",async()=>{const{debugAdapter:e,dbgr:s}=i();s.startDebugging.returns(Promise.resolve(!0)),e.sendRequestBody("startDebugging",{request:"launch",configuration:{type:"some-other-type"}});const t=await e.waitForResponseFromClient("startDebugging");r.strictEqual(t.command,"startDebugging"),r.strictEqual(t.success,!0)}),test("handles startDebugging request failure",async()=>{const{debugAdapter:e,dbgr:s}=i();s.startDebugging.returns(Promise.resolve(!1)),e.sendRequestBody("startDebugging",{request:"launch",configuration:{type:"some-other-type"}});const t=await e.waitForResponseFromClient("startDebugging");r.strictEqual(t.command,"startDebugging"),r.strictEqual(t.success,!1)})});
