{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/debugHover.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { findExpressionInStackFrame } from '../../browser/debugHover.js';\nimport type { IExpression, IScope } from '../../common/debug.js';\nimport { Scope, StackFrame, Thread, Variable } from '../../common/debugModel.js';\nimport { Source } from '../../common/debugSource.js';\nimport { createTestSession } from './callStack.test.js';\nimport { createMockDebugModel, mockUriIdentityService } from './mockDebugModel.js';\n\nsuite('Debug - Hover', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('find expression in stack frame', async () => {\n\t\tconst model = createMockDebugModel(disposables);\n\t\tconst session = disposables.add(createTestSession(model));\n\n\t\tconst thread = new class extends Thread {\n\t\t\tpublic override getCallStack(): StackFrame[] {\n\t\t\t\treturn [stackFrame];\n\t\t\t}\n\t\t}(session, 'mockthread', 1);\n\n\t\tconst firstSource = new Source({\n\t\t\tname: 'internalModule.js',\n\t\t\tpath: 'a/b/c/d/internalModule.js',\n\t\t\tsourceReference: 10,\n\t\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\n\t\tconst stackFrame = new class extends StackFrame {\n\t\t\toverride getScopes(): Promise<IScope[]> {\n\t\t\t\treturn Promise.resolve([scope]);\n\t\t\t}\n\t\t}(thread, 1, firstSource, 'app.js', 'normal', { startLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 10 }, 1, true);\n\n\n\t\tconst scope = new class extends Scope {\n\t\t\toverride getChildren(): Promise<IExpression[]> {\n\t\t\t\treturn Promise.resolve([variableA]);\n\t\t\t}\n\t\t}(stackFrame, 1, 'local', 1, false, 10, 10);\n\n\t\tconst variableA = new class extends Variable {\n\t\t\toverride getChildren(): Promise<IExpression[]> {\n\t\t\t\treturn Promise.resolve([variableB]);\n\t\t\t}\n\t\t}(session, 1, scope, 2, 'A', 'A', undefined, 0, 0, undefined, {}, 'string');\n\t\tconst variableB = new Variable(session, 1, scope, 2, 'B', 'A.B', undefined, 0, 0, undefined, {}, 'string');\n\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, []), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A']), variableA);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['doesNotExist', 'no']), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['a']), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['B']), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A', 'B']), variableB);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A', 'C']), undefined);\n\n\t\t// We do not search in expensive scopes\n\t\tscope.expensive = true;\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A']), undefined);\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,sBAAsB;AAC/B,SAAS,kCAAkC;AAE3C,SAAS,OAAO,YAAY,QAAQ,gBAAgB;AACpD,SAAS,cAAc;AACvB,SAAS,yBAAyB;AAClC,SAAS,sBAAsB,8BAA8B;AAE7D,MAAM,iBAAiB,MAAM;AAC5B,QAAM,cAAc,wCAAwC;AAE5D,OAAK,kCAAkC,YAAY;AAClD,UAAM,QAAQ,qBAAqB,WAAW;AAC9C,UAAM,UAAU,YAAY,IAAI,kBAAkB,KAAK,CAAC;AAExD,UAAM,SAAS,IAAI,cAAc,OAAO;AAAA,MACvB,eAA6B;AAC5C,eAAO,CAAC,UAAU;AAAA,MACnB;AAAA,IACD,EAAE,SAAS,cAAc,CAAC;AAE1B,UAAM,cAAc,IAAI,OAAO;AAAA,MAC9B,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB;AAAA,IAClB,GAAG,mBAAmB,wBAAwB,IAAI,eAAe,CAAC;AAElE,UAAM,aAAa,IAAI,cAAc,WAAW;AAAA,MACtC,YAA+B;AACvC,eAAO,QAAQ,QAAQ,CAAC,KAAK,CAAC;AAAA,MAC/B;AAAA,IACD,EAAE,QAAQ,GAAG,aAAa,UAAU,UAAU,EAAE,iBAAiB,GAAG,aAAa,GAAG,eAAe,GAAG,WAAW,GAAG,GAAG,GAAG,IAAI;AAG9H,UAAM,QAAQ,IAAI,cAAc,MAAM;AAAA,MAC5B,cAAsC;AAC9C,eAAO,QAAQ,QAAQ,CAAC,SAAS,CAAC;AAAA,MACnC;AAAA,IACD,EAAE,YAAY,GAAG,SAAS,GAAG,OAAO,IAAI,EAAE;AAE1C,UAAM,YAAY,IAAI,cAAc,SAAS;AAAA,MACnC,cAAsC;AAC9C,eAAO,QAAQ,QAAQ,CAAC,SAAS,CAAC;AAAA,MACnC;AAAA,IACD,EAAE,SAAS,GAAG,OAAO,GAAG,KAAK,KAAK,QAAW,GAAG,GAAG,QAAW,CAAC,GAAG,QAAQ;AAC1E,UAAM,YAAY,IAAI,SAAS,SAAS,GAAG,OAAO,GAAG,KAAK,OAAO,QAAW,GAAG,GAAG,QAAW,CAAC,GAAG,QAAQ;AAEzG,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,CAAC,GAAG,MAAS;AAC9E,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,GAAG,CAAC,GAAG,SAAS;AACjF,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,gBAAgB,IAAI,CAAC,GAAG,MAAS;AAClG,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,GAAG,CAAC,GAAG,MAAS;AACjF,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,GAAG,CAAC,GAAG,MAAS;AACjF,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,KAAK,GAAG,CAAC,GAAG,SAAS;AACtF,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,KAAK,GAAG,CAAC,GAAG,MAAS;AAGtF,UAAM,YAAY;AAClB,WAAO,YAAY,MAAM,2BAA2B,YAAY,CAAC,GAAG,CAAC,GAAG,MAAS;AAAA,EAClF,CAAC;AACF,CAAC;",
  "names": []
}
