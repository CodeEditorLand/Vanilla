{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/mockDebugModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { DebugModel } from '../../common/debugModel.js';\nimport { MockDebugStorage } from '../common/mockDebug.js';\nimport { TestFileService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nconst fileService = new TestFileService();\nexport const mockUriIdentityService = new UriIdentityService(fileService);\n\nexport function createMockDebugModel(disposable: Pick<DisposableStore, 'add'>): DebugModel {\n\tconst storage = disposable.add(new TestStorageService());\n\tconst debugStorage = disposable.add(new MockDebugStorage(storage));\n\treturn disposable.add(new DebugModel(debugStorage, <any>{ isDirty: (e: any) => false }, mockUriIdentityService, new NullLogService()));\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B;AACnC,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAEnC,MAAM,cAAc,IAAI,gBAAgB;AACjC,MAAM,yBAAyB,IAAI,mBAAmB,WAAW;AAEjE,SAAS,qBAAqB,YAAsD;AAC1F,QAAM,UAAU,WAAW,IAAI,IAAI,mBAAmB,CAAC;AACvD,QAAM,eAAe,WAAW,IAAI,IAAI,iBAAiB,OAAO,CAAC;AACjE,SAAO,WAAW,IAAI,IAAI,WAAW,cAAmB,EAAE,SAAS,wBAAC,MAAW,OAAZ,WAAkB,GAAG,wBAAwB,IAAI,eAAe,CAAC,CAAC;AACtI;AAJgB;",
  "names": []
}
