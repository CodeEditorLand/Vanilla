{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/debugViewModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { Expression, StackFrame, Thread } from '../../common/debugModel.js';\nimport { Source } from '../../common/debugSource.js';\nimport { ViewModel } from '../../common/debugViewModel.js';\nimport { mockUriIdentityService } from './mockDebugModel.js';\nimport { MockSession } from '../common/mockDebug.js';\n\nsuite('Debug - View Model', () => {\n\tlet model: ViewModel;\n\n\tsetup(() => {\n\t\tmodel = new ViewModel(new MockContextKeyService());\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('focused stack frame', () => {\n\t\tassert.strictEqual(model.focusedStackFrame, undefined);\n\t\tassert.strictEqual(model.focusedThread, undefined);\n\t\tconst session = new MockSession();\n\t\tconst thread = new Thread(session, 'myThread', 1);\n\t\tconst source = new Source({\n\t\t\tname: 'internalModule.js',\n\t\t\tsourceReference: 11,\n\t\t\tpresentationHint: 'deemphasize'\n\t\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\t\tconst frame = new StackFrame(thread, 1, source, 'app.js', 'normal', { startColumn: 1, startLineNumber: 1, endColumn: 1, endLineNumber: 1 }, 0, true);\n\t\tmodel.setFocus(frame, thread, session, false);\n\n\t\tassert.strictEqual(model.focusedStackFrame!.getId(), frame.getId());\n\t\tassert.strictEqual(model.focusedThread!.threadId, 1);\n\t\tassert.strictEqual(model.focusedSession!.getId(), session.getId());\n\t});\n\n\ttest('selected expression', () => {\n\t\tassert.strictEqual(model.getSelectedExpression(), undefined);\n\t\tconst expression = new Expression('my expression');\n\t\tmodel.setSelectedExpression(expression, false);\n\n\t\tassert.strictEqual(model.getSelectedExpression()?.expression, expression);\n\t});\n\n\ttest('multi session view and changed workbench state', () => {\n\t\tassert.strictEqual(model.isMultiSessionView(), false);\n\t\tmodel.setMultiSessionView(true);\n\t\tassert.strictEqual(model.isMultiSessionView(), true);\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAC/B,SAAS,YAAY,YAAY,cAAc;AAC/C,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,8BAA8B;AACvC,SAAS,mBAAmB;AAE5B,MAAM,sBAAsB,MAAM;AACjC,MAAI;AAEJ,QAAM,MAAM;AACX,YAAQ,IAAI,UAAU,IAAI,sBAAsB,CAAC;AAAA,EAClD,CAAC;AAED,0CAAwC;AAExC,OAAK,uBAAuB,MAAM;AACjC,WAAO,YAAY,MAAM,mBAAmB,MAAS;AACrD,WAAO,YAAY,MAAM,eAAe,MAAS;AACjD,UAAM,UAAU,IAAI,YAAY;AAChC,UAAM,SAAS,IAAI,OAAO,SAAS,YAAY,CAAC;AAChD,UAAM,SAAS,IAAI,OAAO;AAAA,MACzB,MAAM;AAAA,MACN,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB,GAAG,mBAAmB,wBAAwB,IAAI,eAAe,CAAC;AAClE,UAAM,QAAQ,IAAI,WAAW,QAAQ,GAAG,QAAQ,UAAU,UAAU,EAAE,aAAa,GAAG,iBAAiB,GAAG,WAAW,GAAG,eAAe,EAAE,GAAG,GAAG,IAAI;AACnJ,UAAM,SAAS,OAAO,QAAQ,SAAS,KAAK;AAE5C,WAAO,YAAY,MAAM,kBAAmB,MAAM,GAAG,MAAM,MAAM,CAAC;AAClE,WAAO,YAAY,MAAM,cAAe,UAAU,CAAC;AACnD,WAAO,YAAY,MAAM,eAAgB,MAAM,GAAG,QAAQ,MAAM,CAAC;AAAA,EAClE,CAAC;AAED,OAAK,uBAAuB,MAAM;AACjC,WAAO,YAAY,MAAM,sBAAsB,GAAG,MAAS;AAC3D,UAAM,aAAa,IAAI,WAAW,eAAe;AACjD,UAAM,sBAAsB,YAAY,KAAK;AAE7C,WAAO,YAAY,MAAM,sBAAsB,GAAG,YAAY,UAAU;AAAA,EACzE,CAAC;AAED,OAAK,kDAAkD,MAAM;AAC5D,WAAO,YAAY,MAAM,mBAAmB,GAAG,KAAK;AACpD,UAAM,oBAAoB,IAAI;AAC9B,WAAO,YAAY,MAAM,mBAAmB,GAAG,IAAI;AAAA,EACpD,CAAC;AACF,CAAC;",
  "names": []
}
