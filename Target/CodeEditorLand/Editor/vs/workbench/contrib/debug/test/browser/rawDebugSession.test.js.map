{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/rawDebugSession.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { mock, mockObject } from '../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IExtensionHostDebugService } from '../../../../../platform/debug/common/extensionHostDebug.js';\nimport { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { RawDebugSession } from '../../browser/rawDebugSession.js';\nimport { IDebugger } from '../../common/debug.js';\nimport { MockDebugAdapter } from '../common/mockDebug.js';\n\nsuite('RawDebugSession', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createTestObjects() {\n\t\tconst debugAdapter = new MockDebugAdapter();\n\t\tconst dbgr = mockObject<IDebugger>()({\n\t\t\ttype: 'mock-debug'\n\t\t});\n\n\t\tconst session = new RawDebugSession(\n\t\t\tdebugAdapter,\n\t\t\tdbgr as any as IDebugger,\n\t\t\t'sessionId',\n\t\t\t'name',\n\t\t\tnew (mock<IExtensionHostDebugService>()),\n\t\t\tnew (mock<IOpenerService>()),\n\t\t\tnew (mock<INotificationService>()),\n\t\t\tnew (mock<IDialogService>()));\n\t\tdisposables.add(session);\n\t\tdisposables.add(debugAdapter);\n\n\t\treturn { debugAdapter, dbgr };\n\t}\n\n\ttest('handles startDebugging request success', async () => {\n\t\tconst { debugAdapter, dbgr } = createTestObjects();\n\t\tdbgr.startDebugging.returns(Promise.resolve(true));\n\n\t\tdebugAdapter.sendRequestBody('startDebugging', {\n\t\t\trequest: 'launch',\n\t\t\tconfiguration: {\n\t\t\t\ttype: 'some-other-type'\n\t\t\t}\n\t\t} as DebugProtocol.StartDebuggingRequestArguments);\n\t\tconst response = await debugAdapter.waitForResponseFromClient('startDebugging');\n\t\tassert.strictEqual(response.command, 'startDebugging');\n\t\tassert.strictEqual(response.success, true);\n\t});\n\n\ttest('handles startDebugging request failure', async () => {\n\t\tconst { debugAdapter, dbgr } = createTestObjects();\n\t\tdbgr.startDebugging.returns(Promise.resolve(false));\n\n\t\tdebugAdapter.sendRequestBody('startDebugging', {\n\t\t\trequest: 'launch',\n\t\t\tconfiguration: {\n\t\t\t\ttype: 'some-other-type'\n\t\t\t}\n\t\t} as DebugProtocol.StartDebuggingRequestArguments);\n\t\tconst response = await debugAdapter.waitForResponseFromClient('startDebugging');\n\t\tassert.strictEqual(response.command, 'startDebugging');\n\t\tassert.strictEqual(response.success, false);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,MAAM,kBAAkB;AACjC,SAAS,+CAA+C;AACxD,SAAS,kCAAkC;AAC3C,SAAS,sBAAsB;AAC/B,SAAS,4BAA4B;AACrC,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAC1B,SAAS,wBAAwB;AAEjC,MAAM,mBAAmB,MAAM;AAC9B,QAAM,cAAc,wCAAwC;AAE5D,WAAS,oBAAoB;AAC5B,UAAM,eAAe,IAAI,iBAAiB;AAC1C,UAAM,OAAO,WAAsB,EAAE;AAAA,MACpC,MAAM;AAAA,IACP,CAAC;AAED,UAAM,UAAU,IAAI;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK,KAAiC;AAAA,MACtC,KAAK,KAAqB;AAAA,MAC1B,KAAK,KAA2B;AAAA,MAChC,KAAK,KAAqB;AAAA,IAAE;AAC7B,gBAAY,IAAI,OAAO;AACvB,gBAAY,IAAI,YAAY;AAE5B,WAAO,EAAE,cAAc,KAAK;AAAA,EAC7B;AAnBS;AAqBT,OAAK,0CAA0C,YAAY;AAC1D,UAAM,EAAE,cAAc,KAAK,IAAI,kBAAkB;AACjD,SAAK,eAAe,QAAQ,QAAQ,QAAQ,IAAI,CAAC;AAEjD,iBAAa,gBAAgB,kBAAkB;AAAA,MAC9C,SAAS;AAAA,MACT,eAAe;AAAA,QACd,MAAM;AAAA,MACP;AAAA,IACD,CAAiD;AACjD,UAAM,WAAW,MAAM,aAAa,0BAA0B,gBAAgB;AAC9E,WAAO,YAAY,SAAS,SAAS,gBAAgB;AACrD,WAAO,YAAY,SAAS,SAAS,IAAI;AAAA,EAC1C,CAAC;AAED,OAAK,0CAA0C,YAAY;AAC1D,UAAM,EAAE,cAAc,KAAK,IAAI,kBAAkB;AACjD,SAAK,eAAe,QAAQ,QAAQ,QAAQ,KAAK,CAAC;AAElD,iBAAa,gBAAgB,kBAAkB;AAAA,MAC9C,SAAS;AAAA,MACT,eAAe;AAAA,QACd,MAAM;AAAA,MACP;AAAA,IACD,CAAiD;AACjD,UAAM,WAAW,MAAM,aAAa,0BAA0B,gBAAgB;AAC9E,WAAO,YAAY,SAAS,SAAS,gBAAgB;AACrD,WAAO,YAAY,SAAS,SAAS,KAAK;AAAA,EAC3C,CAAC;AACF,CAAC;",
  "names": []
}
