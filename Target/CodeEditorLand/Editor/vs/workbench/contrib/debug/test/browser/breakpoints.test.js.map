{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/breakpoints.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { MarkdownString } from '../../../../../base/common/htmlContent.js';\nimport { dispose } from '../../../../../base/common/lifecycle.js';\nimport { URI as uri } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { OverviewRulerLane } from '../../../../../editor/common/model.js';\nimport { LanguageService } from '../../../../../editor/common/services/languageService.js';\nimport { createTextModel } from '../../../../../editor/test/common/testTextModel.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ILabelService } from '../../../../../platform/label/common/label.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { createBreakpointDecorations } from '../../browser/breakpointEditorContribution.js';\nimport { getBreakpointMessageAndIcon, getExpandedBodySize } from '../../browser/breakpointsView.js';\nimport { DataBreakpointSetType, IBreakpointData, IBreakpointUpdateData, IDebugService, State } from '../../common/debug.js';\nimport { Breakpoint, DebugModel } from '../../common/debugModel.js';\nimport { createTestSession } from './callStack.test.js';\nimport { createMockDebugModel, mockUriIdentityService } from './mockDebugModel.js';\nimport { MockDebugService, MockDebugStorage } from '../common/mockDebug.js';\nimport { MockLabelService } from '../../../../services/label/test/common/mockLabelService.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nfunction addBreakpointsAndCheckEvents(model: DebugModel, uri: uri, data: IBreakpointData[]) {\n\tlet eventCount = 0;\n\tconst toDispose = model.onDidChangeBreakpoints(e => {\n\t\tassert.strictEqual(e?.sessionOnly, false);\n\t\tassert.strictEqual(e?.changed, undefined);\n\t\tassert.strictEqual(e?.removed, undefined);\n\t\tconst added = e?.added;\n\t\tassert.notStrictEqual(added, undefined);\n\t\tassert.strictEqual(added!.length, data.length);\n\t\teventCount++;\n\t\tdispose(toDispose);\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tassert.strictEqual(e.added![i] instanceof Breakpoint, true);\n\t\t\tassert.strictEqual((e.added![i] as Breakpoint).lineNumber, data[i].lineNumber);\n\t\t}\n\t});\n\tconst bps = model.addBreakpoints(uri, data);\n\tassert.strictEqual(eventCount, 1);\n\treturn bps;\n}\n\nsuite('Debug - Breakpoints', () => {\n\tlet model: DebugModel;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tmodel = createMockDebugModel(disposables);\n\t});\n\n\t// Breakpoints\n\n\ttest('simple', () => {\n\t\tconst modelUri = uri.file('/myfolder/myfile.js');\n\n\t\taddBreakpointsAndCheckEvents(model, modelUri, [{ lineNumber: 5, enabled: true }, { lineNumber: 10, enabled: false }]);\n\t\tassert.strictEqual(model.areBreakpointsActivated(), true);\n\t\tassert.strictEqual(model.getBreakpoints().length, 2);\n\n\t\tlet eventCount = 0;\n\t\tconst toDispose = model.onDidChangeBreakpoints(e => {\n\t\t\teventCount++;\n\t\t\tassert.strictEqual(e?.added, undefined);\n\t\t\tassert.strictEqual(e?.sessionOnly, false);\n\t\t\tassert.strictEqual(e?.removed?.length, 2);\n\t\t\tassert.strictEqual(e?.changed, undefined);\n\n\t\t\tdispose(toDispose);\n\t\t});\n\n\t\tmodel.removeBreakpoints(model.getBreakpoints());\n\t\tassert.strictEqual(eventCount, 1);\n\t\tassert.strictEqual(model.getBreakpoints().length, 0);\n\t});\n\n\ttest('toggling', () => {\n\t\tconst modelUri = uri.file('/myfolder/myfile.js');\n\n\t\taddBreakpointsAndCheckEvents(model, modelUri, [{ lineNumber: 5, enabled: true }, { lineNumber: 10, enabled: false }]);\n\t\taddBreakpointsAndCheckEvents(model, modelUri, [{ lineNumber: 12, enabled: true, condition: 'fake condition' }]);\n\t\tassert.strictEqual(model.getBreakpoints().length, 3);\n\t\tconst bp = model.getBreakpoints().pop();\n\t\tif (bp) {\n\t\t\tmodel.removeBreakpoints([bp]);\n\t\t}\n\t\tassert.strictEqual(model.getBreakpoints().length, 2);\n\n\t\tmodel.setBreakpointsActivated(false);\n\t\tassert.strictEqual(model.areBreakpointsActivated(), false);\n\t\tmodel.setBreakpointsActivated(true);\n\t\tassert.strictEqual(model.areBreakpointsActivated(), true);\n\t});\n\n\ttest('two files', () => {\n\t\tconst modelUri1 = uri.file('/myfolder/my file first.js');\n\t\tconst modelUri2 = uri.file('/secondfolder/second/second file.js');\n\t\taddBreakpointsAndCheckEvents(model, modelUri1, [{ lineNumber: 5, enabled: true }, { lineNumber: 10, enabled: false }]);\n\t\tassert.strictEqual(getExpandedBodySize(model, undefined, 9), 44);\n\n\t\taddBreakpointsAndCheckEvents(model, modelUri2, [{ lineNumber: 1, enabled: true }, { lineNumber: 2, enabled: true }, { lineNumber: 3, enabled: false }]);\n\t\tassert.strictEqual(getExpandedBodySize(model, undefined, 9), 110);\n\n\t\tassert.strictEqual(model.getBreakpoints().length, 5);\n\t\tassert.strictEqual(model.getBreakpoints({ uri: modelUri1 }).length, 2);\n\t\tassert.strictEqual(model.getBreakpoints({ uri: modelUri2 }).length, 3);\n\t\tassert.strictEqual(model.getBreakpoints({ lineNumber: 5 }).length, 1);\n\t\tassert.strictEqual(model.getBreakpoints({ column: 5 }).length, 0);\n\n\t\tconst bp = model.getBreakpoints()[0];\n\t\tconst update = new Map<string, IBreakpointUpdateData>();\n\t\tupdate.set(bp.getId(), { lineNumber: 100 });\n\t\tlet eventFired = false;\n\t\tconst toDispose = model.onDidChangeBreakpoints(e => {\n\t\t\teventFired = true;\n\t\t\tassert.strictEqual(e?.added, undefined);\n\t\t\tassert.strictEqual(e?.removed, undefined);\n\t\t\tassert.strictEqual(e?.changed?.length, 1);\n\t\t\tdispose(toDispose);\n\t\t});\n\t\tmodel.updateBreakpoints(update);\n\t\tassert.strictEqual(eventFired, true);\n\t\tassert.strictEqual(bp.lineNumber, 100);\n\n\t\tassert.strictEqual(model.getBreakpoints({ enabledOnly: true }).length, 3);\n\t\tmodel.enableOrDisableAllBreakpoints(false);\n\t\tmodel.getBreakpoints().forEach(bp => {\n\t\t\tassert.strictEqual(bp.enabled, false);\n\t\t});\n\t\tassert.strictEqual(model.getBreakpoints({ enabledOnly: true }).length, 0);\n\n\t\tmodel.setEnablement(bp, true);\n\t\tassert.strictEqual(bp.enabled, true);\n\n\t\tmodel.removeBreakpoints(model.getBreakpoints({ uri: modelUri1 }));\n\t\tassert.strictEqual(getExpandedBodySize(model, undefined, 9), 66);\n\n\t\tassert.strictEqual(model.getBreakpoints().length, 3);\n\t});\n\n\ttest('conditions', () => {\n\t\tconst modelUri1 = uri.file('/myfolder/my file first.js');\n\t\taddBreakpointsAndCheckEvents(model, modelUri1, [{ lineNumber: 5, condition: 'i < 5', hitCondition: '17' }, { lineNumber: 10, condition: 'j < 3' }]);\n\t\tconst breakpoints = model.getBreakpoints();\n\n\t\tassert.strictEqual(breakpoints[0].condition, 'i < 5');\n\t\tassert.strictEqual(breakpoints[0].hitCondition, '17');\n\t\tassert.strictEqual(breakpoints[1].condition, 'j < 3');\n\t\tassert.strictEqual(!!breakpoints[1].hitCondition, false);\n\n\t\tassert.strictEqual(model.getBreakpoints().length, 2);\n\t\tmodel.removeBreakpoints(model.getBreakpoints());\n\t\tassert.strictEqual(model.getBreakpoints().length, 0);\n\t});\n\n\ttest('function breakpoints', () => {\n\t\tmodel.addFunctionBreakpoint({ name: 'foo' }, '1');\n\t\tmodel.addFunctionBreakpoint({ name: 'bar' }, '2');\n\t\tmodel.updateFunctionBreakpoint('1', { name: 'fooUpdated' });\n\t\tmodel.updateFunctionBreakpoint('2', { name: 'barUpdated' });\n\n\t\tconst functionBps = model.getFunctionBreakpoints();\n\t\tassert.strictEqual(functionBps[0].name, 'fooUpdated');\n\t\tassert.strictEqual(functionBps[1].name, 'barUpdated');\n\n\t\tmodel.removeFunctionBreakpoints();\n\t\tassert.strictEqual(model.getFunctionBreakpoints().length, 0);\n\t});\n\n\ttest('multiple sessions', () => {\n\t\tconst modelUri = uri.file('/myfolder/myfile.js');\n\t\taddBreakpointsAndCheckEvents(model, modelUri, [{ lineNumber: 5, enabled: true, condition: 'x > 5' }, { lineNumber: 10, enabled: false }]);\n\t\tconst breakpoints = model.getBreakpoints();\n\t\tconst session = disposables.add(createTestSession(model));\n\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\n\t\tassert.strictEqual(breakpoints[0].lineNumber, 5);\n\t\tassert.strictEqual(breakpoints[1].lineNumber, 10);\n\n\t\tdata.set(breakpoints[0].getId(), { verified: false, line: 10 });\n\t\tdata.set(breakpoints[1].getId(), { verified: true, line: 50 });\n\t\tmodel.setBreakpointSessionData(session.getId(), {}, data);\n\t\tassert.strictEqual(breakpoints[0].lineNumber, 5);\n\t\tassert.strictEqual(breakpoints[1].lineNumber, 50);\n\n\t\tconst session2 = disposables.add(createTestSession(model));\n\t\tconst data2 = new Map<string, DebugProtocol.Breakpoint>();\n\t\tdata2.set(breakpoints[0].getId(), { verified: true, line: 100 });\n\t\tdata2.set(breakpoints[1].getId(), { verified: true, line: 500 });\n\t\tmodel.setBreakpointSessionData(session2.getId(), {}, data2);\n\n\t\t// Breakpoint is verified only once, show that line\n\t\tassert.strictEqual(breakpoints[0].lineNumber, 100);\n\t\t// Breakpoint is verified two times, show the original line\n\t\tassert.strictEqual(breakpoints[1].lineNumber, 10);\n\n\t\tmodel.setBreakpointSessionData(session.getId(), {}, undefined);\n\t\t// No more double session verification\n\t\tassert.strictEqual(breakpoints[0].lineNumber, 100);\n\t\tassert.strictEqual(breakpoints[1].lineNumber, 500);\n\n\t\tassert.strictEqual(breakpoints[0].supported, false);\n\t\tconst data3 = new Map<string, DebugProtocol.Breakpoint>();\n\t\tdata3.set(breakpoints[0].getId(), { verified: true, line: 500 });\n\t\tmodel.setBreakpointSessionData(session2.getId(), { supportsConditionalBreakpoints: true }, data2);\n\t\tassert.strictEqual(breakpoints[0].supported, true);\n\t});\n\n\ttest('exception breakpoints', () => {\n\t\tlet eventCount = 0;\n\t\tdisposables.add(model.onDidChangeBreakpoints(() => eventCount++));\n\t\tmodel.setExceptionBreakpointsForSession(\"session-id-1\", [{ filter: 'uncaught', label: 'UNCAUGHT', default: true }]);\n\t\tassert.strictEqual(eventCount, 1);\n\t\tlet exceptionBreakpoints = model.getExceptionBreakpointsForSession(\"session-id-1\");\n\t\tassert.strictEqual(exceptionBreakpoints.length, 1);\n\t\tassert.strictEqual(exceptionBreakpoints[0].filter, 'uncaught');\n\t\tassert.strictEqual(exceptionBreakpoints[0].enabled, true);\n\n\t\tmodel.setExceptionBreakpointsForSession(\"session-id-2\", [{ filter: 'uncaught', label: 'UNCAUGHT' }, { filter: 'caught', label: 'CAUGHT' }]);\n\t\tassert.strictEqual(eventCount, 2);\n\t\texceptionBreakpoints = model.getExceptionBreakpointsForSession(\"session-id-2\");\n\t\tassert.strictEqual(exceptionBreakpoints.length, 2);\n\t\tassert.strictEqual(exceptionBreakpoints[0].filter, 'uncaught');\n\t\tassert.strictEqual(exceptionBreakpoints[0].enabled, true);\n\t\tassert.strictEqual(exceptionBreakpoints[1].filter, 'caught');\n\t\tassert.strictEqual(exceptionBreakpoints[1].label, 'CAUGHT');\n\t\tassert.strictEqual(exceptionBreakpoints[1].enabled, false);\n\n\t\tmodel.setExceptionBreakpointsForSession(\"session-id-3\", [{ filter: 'all', label: 'ALL' }]);\n\t\tassert.strictEqual(eventCount, 3);\n\t\tassert.strictEqual(model.getExceptionBreakpointsForSession(\"session-id-3\").length, 1);\n\t\texceptionBreakpoints = model.getExceptionBreakpoints();\n\t\tassert.strictEqual(exceptionBreakpoints[0].filter, 'uncaught');\n\t\tassert.strictEqual(exceptionBreakpoints[0].enabled, true);\n\t\tassert.strictEqual(exceptionBreakpoints[1].filter, 'caught');\n\t\tassert.strictEqual(exceptionBreakpoints[1].label, 'CAUGHT');\n\t\tassert.strictEqual(exceptionBreakpoints[1].enabled, false);\n\t\tassert.strictEqual(exceptionBreakpoints[2].filter, 'all');\n\t\tassert.strictEqual(exceptionBreakpoints[2].label, 'ALL');\n\t});\n\n\ttest('exception breakpoints multiple sessions', () => {\n\t\tlet eventCount = 0;\n\t\tdisposables.add(model.onDidChangeBreakpoints(() => eventCount++));\n\n\t\tmodel.setExceptionBreakpointsForSession(\"session-id-4\", [{ filter: 'uncaught', label: 'UNCAUGHT', default: true }, { filter: 'caught', label: 'CAUGHT' }]);\n\t\tmodel.setExceptionBreakpointFallbackSession(\"session-id-4\");\n\t\tassert.strictEqual(eventCount, 1);\n\t\tlet exceptionBreakpointsForSession = model.getExceptionBreakpointsForSession(\"session-id-4\");\n\t\tassert.strictEqual(exceptionBreakpointsForSession.length, 2);\n\t\tassert.strictEqual(exceptionBreakpointsForSession[0].filter, 'uncaught');\n\t\tassert.strictEqual(exceptionBreakpointsForSession[1].filter, 'caught');\n\n\t\tmodel.setExceptionBreakpointsForSession(\"session-id-5\", [{ filter: 'all', label: 'ALL' }, { filter: 'caught', label: 'CAUGHT' }]);\n\t\tassert.strictEqual(eventCount, 2);\n\t\texceptionBreakpointsForSession = model.getExceptionBreakpointsForSession(\"session-id-5\");\n\t\tlet exceptionBreakpointsForUndefined = model.getExceptionBreakpointsForSession(undefined);\n\t\tassert.strictEqual(exceptionBreakpointsForSession.length, 2);\n\t\tassert.strictEqual(exceptionBreakpointsForSession[0].filter, 'caught');\n\t\tassert.strictEqual(exceptionBreakpointsForSession[1].filter, 'all');\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined.length, 2);\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined[0].filter, 'uncaught');\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined[1].filter, 'caught');\n\n\t\tmodel.removeExceptionBreakpointsForSession(\"session-id-4\");\n\t\tassert.strictEqual(eventCount, 2);\n\t\texceptionBreakpointsForUndefined = model.getExceptionBreakpointsForSession(undefined);\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined.length, 2);\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined[0].filter, 'uncaught');\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined[1].filter, 'caught');\n\n\t\tmodel.setExceptionBreakpointFallbackSession(\"session-id-5\");\n\t\tassert.strictEqual(eventCount, 2);\n\t\texceptionBreakpointsForUndefined = model.getExceptionBreakpointsForSession(undefined);\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined.length, 2);\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined[0].filter, 'caught');\n\t\tassert.strictEqual(exceptionBreakpointsForUndefined[1].filter, 'all');\n\n\t\tconst exceptionBreakpoints = model.getExceptionBreakpoints();\n\t\tassert.strictEqual(exceptionBreakpoints.length, 3);\n\t});\n\n\ttest('instruction breakpoints', () => {\n\t\tlet eventCount = 0;\n\t\tdisposables.add(model.onDidChangeBreakpoints(() => eventCount++));\n\t\t//address: string, offset: number, condition?: string, hitCondition?: string\n\t\tmodel.addInstructionBreakpoint({ instructionReference: '0xCCCCFFFF', offset: 0, address: 0n, canPersist: false });\n\n\t\tassert.strictEqual(eventCount, 1);\n\t\tlet instructionBreakpoints = model.getInstructionBreakpoints();\n\t\tassert.strictEqual(instructionBreakpoints.length, 1);\n\t\tassert.strictEqual(instructionBreakpoints[0].instructionReference, '0xCCCCFFFF');\n\t\tassert.strictEqual(instructionBreakpoints[0].offset, 0);\n\n\t\tmodel.addInstructionBreakpoint({ instructionReference: '0xCCCCEEEE', offset: 1, address: 0n, canPersist: false });\n\t\tassert.strictEqual(eventCount, 2);\n\t\tinstructionBreakpoints = model.getInstructionBreakpoints();\n\t\tassert.strictEqual(instructionBreakpoints.length, 2);\n\t\tassert.strictEqual(instructionBreakpoints[0].instructionReference, '0xCCCCFFFF');\n\t\tassert.strictEqual(instructionBreakpoints[0].offset, 0);\n\t\tassert.strictEqual(instructionBreakpoints[1].instructionReference, '0xCCCCEEEE');\n\t\tassert.strictEqual(instructionBreakpoints[1].offset, 1);\n\t});\n\n\ttest('data breakpoints', () => {\n\t\tlet eventCount = 0;\n\t\tdisposables.add(model.onDidChangeBreakpoints(() => eventCount++));\n\n\t\tmodel.addDataBreakpoint({ description: 'label', src: { type: DataBreakpointSetType.Variable, dataId: 'id' }, canPersist: true, accessTypes: ['read'], accessType: 'read' }, '1');\n\t\tmodel.addDataBreakpoint({ description: 'second', src: { type: DataBreakpointSetType.Variable, dataId: 'secondId' }, canPersist: false, accessTypes: ['readWrite'], accessType: 'readWrite' }, '2');\n\t\tmodel.updateDataBreakpoint('1', { condition: 'aCondition' });\n\t\tmodel.updateDataBreakpoint('2', { hitCondition: '10' });\n\t\tconst dataBreakpoints = model.getDataBreakpoints();\n\t\tassert.strictEqual(dataBreakpoints[0].canPersist, true);\n\t\tassert.deepStrictEqual(dataBreakpoints[0].src, { type: DataBreakpointSetType.Variable, dataId: 'id' });\n\t\tassert.strictEqual(dataBreakpoints[0].accessType, 'read');\n\t\tassert.strictEqual(dataBreakpoints[0].condition, 'aCondition');\n\t\tassert.strictEqual(dataBreakpoints[1].canPersist, false);\n\t\tassert.strictEqual(dataBreakpoints[1].description, 'second');\n\t\tassert.strictEqual(dataBreakpoints[1].accessType, 'readWrite');\n\t\tassert.strictEqual(dataBreakpoints[1].hitCondition, '10');\n\n\t\tassert.strictEqual(eventCount, 4);\n\n\t\tmodel.removeDataBreakpoints(dataBreakpoints[0].getId());\n\t\tassert.strictEqual(eventCount, 5);\n\t\tassert.strictEqual(model.getDataBreakpoints().length, 1);\n\n\t\tmodel.removeDataBreakpoints();\n\t\tassert.strictEqual(model.getDataBreakpoints().length, 0);\n\t\tassert.strictEqual(eventCount, 6);\n\t});\n\n\ttest('message and class name', () => {\n\t\tconst modelUri = uri.file('/myfolder/my file first.js');\n\t\taddBreakpointsAndCheckEvents(model, modelUri, [\n\t\t\t{ lineNumber: 5, enabled: true, condition: 'x > 5' },\n\t\t\t{ lineNumber: 10, enabled: false },\n\t\t\t{ lineNumber: 12, enabled: true, logMessage: 'hello' },\n\t\t\t{ lineNumber: 15, enabled: true, hitCondition: '12' },\n\t\t\t{ lineNumber: 500, enabled: true },\n\t\t]);\n\t\tconst breakpoints = model.getBreakpoints();\n\t\tconst ls = new MockLabelService();\n\n\t\tlet result = getBreakpointMessageAndIcon(State.Stopped, true, breakpoints[0], ls, model);\n\t\tassert.strictEqual(result.message, 'Condition: x > 5');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-conditional');\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, breakpoints[1], ls, model);\n\t\tassert.strictEqual(result.message, 'Disabled Breakpoint');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-disabled');\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, breakpoints[2], ls, model);\n\t\tassert.strictEqual(result.message, 'Log Message: hello');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-log');\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, breakpoints[3], ls, model);\n\t\tassert.strictEqual(result.message, 'Hit Count: 12');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-conditional');\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, breakpoints[4], ls, model);\n\t\tassert.strictEqual(result.message, ls.getUriLabel(breakpoints[4].uri));\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint');\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, false, breakpoints[2], ls, model);\n\t\tassert.strictEqual(result.message, 'Disabled Logpoint');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-log-disabled');\n\n\t\tmodel.addDataBreakpoint({ description: 'label', canPersist: true, accessTypes: ['read'], accessType: 'read', src: { type: DataBreakpointSetType.Variable, dataId: 'id' } });\n\t\tconst dataBreakpoints = model.getDataBreakpoints();\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, dataBreakpoints[0], ls, model);\n\t\tassert.strictEqual(result.message, 'Data Breakpoint');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-data');\n\n\t\tconst functionBreakpoint = model.addFunctionBreakpoint({ name: 'foo' }, '1');\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, functionBreakpoint, ls, model);\n\t\tassert.strictEqual(result.message, 'Function Breakpoint');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-function');\n\n\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\tdata.set(breakpoints[0].getId(), { verified: false, line: 10 });\n\t\tdata.set(breakpoints[1].getId(), { verified: true, line: 50 });\n\t\tdata.set(breakpoints[2].getId(), { verified: true, line: 50, message: 'world' });\n\t\tdata.set(functionBreakpoint.getId(), { verified: true });\n\t\tmodel.setBreakpointSessionData('mocksessionid', { supportsFunctionBreakpoints: false, supportsDataBreakpoints: true, supportsLogPoints: true }, data);\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, breakpoints[0], ls, model);\n\t\tassert.strictEqual(result.message, 'Unverified Breakpoint');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-unverified');\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, functionBreakpoint, ls, model);\n\t\tassert.strictEqual(result.message, 'Function breakpoints not supported by this debug type');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-function-unverified');\n\n\t\tresult = getBreakpointMessageAndIcon(State.Stopped, true, breakpoints[2], ls, model);\n\t\tassert.strictEqual(result.message, 'Log Message: hello, world');\n\t\tassert.strictEqual(result.icon.id, 'debug-breakpoint-log');\n\t});\n\n\ttest('decorations', () => {\n\t\tconst modelUri = uri.file('/myfolder/my file first.js');\n\t\tconst languageId = 'testMode';\n\t\tconst textModel = createTextModel(\n\t\t\t['this is line one', 'this is line two', '    this is line three it has whitespace at start', 'this is line four', 'this is line five'].join('\\n'),\n\t\t\tlanguageId\n\t\t);\n\t\taddBreakpointsAndCheckEvents(model, modelUri, [\n\t\t\t{ lineNumber: 1, enabled: true, condition: 'x > 5' },\n\t\t\t{ lineNumber: 2, column: 4, enabled: false },\n\t\t\t{ lineNumber: 3, enabled: true, logMessage: 'hello' },\n\t\t\t{ lineNumber: 500, enabled: true },\n\t\t]);\n\t\tconst breakpoints = model.getBreakpoints();\n\n\t\tconst instantiationService = new TestInstantiationService();\n\t\tconst debugService = new MockDebugService();\n\t\tdebugService.getModel = () => model;\n\t\tinstantiationService.stub(IDebugService, debugService);\n\t\tinstantiationService.stub(ILabelService, new MockLabelService());\n\t\tinstantiationService.stub(ILanguageService, disposables.add(new LanguageService()));\n\t\tlet decorations = instantiationService.invokeFunction(accessor => createBreakpointDecorations(accessor, textModel, breakpoints, State.Running, true, true));\n\t\tassert.strictEqual(decorations.length, 3); // last breakpoint filtered out since it has a large line number\n\t\tassert.deepStrictEqual(decorations[0].range, new Range(1, 1, 1, 2));\n\t\tassert.deepStrictEqual(decorations[1].range, new Range(2, 4, 2, 5));\n\t\tassert.deepStrictEqual(decorations[2].range, new Range(3, 5, 3, 6));\n\t\tassert.strictEqual(decorations[0].options.beforeContentClassName, undefined);\n\t\tassert.strictEqual(decorations[1].options.before?.inlineClassName, `debug-breakpoint-placeholder`);\n\t\tassert.strictEqual(decorations[0].options.overviewRuler?.position, OverviewRulerLane.Left);\n\t\tconst expected = new MarkdownString(undefined, { isTrusted: true, supportThemeIcons: true }).appendCodeblock(languageId, 'Condition: x > 5');\n\t\tassert.deepStrictEqual(decorations[0].options.glyphMarginHoverMessage, expected);\n\n\t\tdecorations = instantiationService.invokeFunction(accessor => createBreakpointDecorations(accessor, textModel, breakpoints, State.Running, true, false));\n\t\tassert.strictEqual(decorations[0].options.overviewRuler, null);\n\n\t\ttextModel.dispose();\n\t\tinstantiationService.dispose();\n\t});\n\n\ttest('updates when storage changes', () => {\n\t\tconst storage1 = disposables.add(new TestStorageService());\n\t\tconst debugStorage1 = disposables.add(new MockDebugStorage(storage1));\n\t\tconst model1 = disposables.add(new DebugModel(debugStorage1, <any>{ isDirty: (e: any) => false }, mockUriIdentityService, new NullLogService()));\n\n\t\t// 1. create breakpoints in the first model\n\t\tconst modelUri = uri.file('/myfolder/my file first.js');\n\t\tconst first = [\n\t\t\t{ lineNumber: 1, enabled: true, condition: 'x > 5' },\n\t\t\t{ lineNumber: 2, column: 4, enabled: false },\n\t\t];\n\n\t\taddBreakpointsAndCheckEvents(model1, modelUri, first);\n\t\tdebugStorage1.storeBreakpoints(model1);\n\t\tconst stored = storage1.get('debug.breakpoint', StorageScope.WORKSPACE);\n\n\t\t// 2. hydrate a new model and ensure external breakpoints get applied\n\t\tconst storage2 = disposables.add(new TestStorageService());\n\t\tconst model2 = disposables.add(new DebugModel(disposables.add(new MockDebugStorage(storage2)), <any>{ isDirty: (e: any) => false }, mockUriIdentityService, new NullLogService()));\n\t\tstorage2.store('debug.breakpoint', stored, StorageScope.WORKSPACE, StorageTarget.USER, /* external= */ true);\n\t\tassert.deepStrictEqual(model2.getBreakpoints().map(b => b.getId()), model1.getBreakpoints().map(b => b.getId()));\n\n\t\t// 3. ensure non-external changes are ignored\n\t\tstorage2.store('debug.breakpoint', '[]', StorageScope.WORKSPACE, StorageTarget.USER, /* external= */ false);\n\t\tassert.deepStrictEqual(model2.getBreakpoints().map(b => b.getId()), model1.getBreakpoints().map(b => b.getId()));\n\t});\n});\n"],
  "mappings": "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",
  "names": ["uri", "bp"]
}
