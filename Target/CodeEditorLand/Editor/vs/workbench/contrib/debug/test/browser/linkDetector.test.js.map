{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/linkDetector.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { isHTMLAnchorElement } from '../../../../../base/browser/dom.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ITunnelService } from '../../../../../platform/tunnel/common/tunnel.js';\nimport { WorkspaceFolder } from '../../../../../platform/workspace/common/workspace.js';\nimport { LinkDetector } from '../../browser/linkDetector.js';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nsuite('Debug - Link Detector', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet linkDetector: LinkDetector;\n\n\t/**\n\t * Instantiate a {@link LinkDetector} for use by the functions being tested.\n\t */\n\tsetup(() => {\n\t\tconst instantiationService: TestInstantiationService = <TestInstantiationService>workbenchInstantiationService(undefined, disposables);\n\t\tinstantiationService.stub(ITunnelService, { canTunnel: () => false });\n\t\tlinkDetector = instantiationService.createInstance(LinkDetector);\n\t});\n\n\t/**\n\t * Assert that a given Element is an anchor element.\n\t *\n\t * @param element The Element to verify.\n\t */\n\tfunction assertElementIsLink(element: Element) {\n\t\tassert(isHTMLAnchorElement(element));\n\t}\n\n\ttest('noLinks', () => {\n\t\tconst input = 'I am a string';\n\t\tconst expectedOutput = '<span>I am a string</span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('trailingNewline', () => {\n\t\tconst input = 'I am a string\\n';\n\t\tconst expectedOutput = '<span>I am a string\\n</span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('trailingNewlineSplit', () => {\n\t\tconst input = 'I am a string\\n';\n\t\tconst expectedOutput = '<span>I am a string\\n</span>';\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('singleLineLink', () => {\n\t\tconst input = isWindows ? 'C:\\\\foo\\\\bar.js:12:34' : '/Users/foo/bar.js:12:34';\n\t\tconst expectedOutput = isWindows ? '<span><a tabindex=\"0\">C:\\\\foo\\\\bar.js:12:34<\\/a><\\/span>' : '<span><a tabindex=\"0\">/Users/foo/bar.js:12:34<\\/a><\\/span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(1, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('A', output.firstElementChild!.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t\tassertElementIsLink(output.firstElementChild!);\n\t\tassert.strictEqual(isWindows ? 'C:\\\\foo\\\\bar.js:12:34' : '/Users/foo/bar.js:12:34', output.firstElementChild!.textContent);\n\t});\n\n\ttest('relativeLink', () => {\n\t\tconst input = '\\./foo/bar.js';\n\t\tconst expectedOutput = '<span>\\./foo/bar.js</span>';\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(0, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('relativeLinkWithWorkspace', async () => {\n\t\tconst input = '\\./foo/bar.js';\n\t\tconst output = linkDetector.linkify(input, false, new WorkspaceFolder({ uri: URI.file('/path/to/workspace'), name: 'ws', index: 0 }));\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.ok(output.outerHTML.indexOf('link') >= 0);\n\t});\n\n\ttest('singleLineLinkAndText', function () {\n\t\tconst input = isWindows ? 'The link: C:/foo/bar.js:12:34' : 'The link: /Users/foo/bar.js:12:34';\n\t\tconst expectedOutput = /^<span>The link: <a tabindex=\"0\">.*\\/foo\\/bar.js:12:34<\\/a><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(1, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('A', output.children[0].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t\tassertElementIsLink(output.children[0]);\n\t\tassert.strictEqual(isWindows ? 'C:/foo/bar.js:12:34' : '/Users/foo/bar.js:12:34', output.children[0].textContent);\n\t});\n\n\ttest('singleLineMultipleLinks', () => {\n\t\tconst input = isWindows ? 'Here is a link C:/foo/bar.js:12:34 and here is another D:/boo/far.js:56:78' :\n\t\t\t'Here is a link /Users/foo/bar.js:12:34 and here is another /Users/boo/far.js:56:78';\n\t\tconst expectedOutput = /^<span>Here is a link <a tabindex=\"0\">.*\\/foo\\/bar.js:12:34<\\/a> and here is another <a tabindex=\"0\">.*\\/boo\\/far.js:56:78<\\/a><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input);\n\n\t\tassert.strictEqual(2, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('A', output.children[0].tagName);\n\t\tassert.strictEqual('A', output.children[1].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t\tassertElementIsLink(output.children[0]);\n\t\tassertElementIsLink(output.children[1]);\n\t\tassert.strictEqual(isWindows ? 'C:/foo/bar.js:12:34' : '/Users/foo/bar.js:12:34', output.children[0].textContent);\n\t\tassert.strictEqual(isWindows ? 'D:/boo/far.js:56:78' : '/Users/boo/far.js:56:78', output.children[1].textContent);\n\t});\n\n\ttest('multilineNoLinks', () => {\n\t\tconst input = 'Line one\\nLine two\\nLine three';\n\t\tconst expectedOutput = /^<span><span>Line one\\n<\\/span><span>Line two\\n<\\/span><span>Line three<\\/span><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(3, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('SPAN', output.children[0].tagName);\n\t\tassert.strictEqual('SPAN', output.children[1].tagName);\n\t\tassert.strictEqual('SPAN', output.children[2].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t});\n\n\ttest('multilineTrailingNewline', () => {\n\t\tconst input = 'I am a string\\nAnd I am another\\n';\n\t\tconst expectedOutput = '<span><span>I am a string\\n<\\/span><span>And I am another\\n<\\/span><\\/span>';\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(2, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('SPAN', output.children[0].tagName);\n\t\tassert.strictEqual('SPAN', output.children[1].tagName);\n\t\tassert.strictEqual(expectedOutput, output.outerHTML);\n\t});\n\n\ttest('multilineWithLinks', () => {\n\t\tconst input = isWindows ? 'I have a link for you\\nHere it is: C:/foo/bar.js:12:34\\nCool, huh?' :\n\t\t\t'I have a link for you\\nHere it is: /Users/foo/bar.js:12:34\\nCool, huh?';\n\t\tconst expectedOutput = /^<span><span>I have a link for you\\n<\\/span><span>Here it is: <a tabindex=\"0\">.*\\/foo\\/bar.js:12:34<\\/a>\\n<\\/span><span>Cool, huh\\?<\\/span><\\/span>$/;\n\t\tconst output = linkDetector.linkify(input, true);\n\n\t\tassert.strictEqual(3, output.children.length);\n\t\tassert.strictEqual('SPAN', output.tagName);\n\t\tassert.strictEqual('SPAN', output.children[0].tagName);\n\t\tassert.strictEqual('SPAN', output.children[1].tagName);\n\t\tassert.strictEqual('SPAN', output.children[2].tagName);\n\t\tassert.strictEqual('A', output.children[1].children[0].tagName);\n\t\tassert(expectedOutput.test(output.outerHTML));\n\t\tassertElementIsLink(output.children[1].children[0]);\n\t\tassert.strictEqual(isWindows ? 'C:/foo/bar.js:12:34' : '/Users/foo/bar.js:12:34', output.children[1].children[0].textContent);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
