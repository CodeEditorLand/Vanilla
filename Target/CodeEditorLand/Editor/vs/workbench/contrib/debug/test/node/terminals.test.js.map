{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/node/terminals.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { prepareCommand } from '../../node/terminals.js';\n\n\nsuite('Debug - prepareCommand', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('bash', () => {\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('bash', ['{$} ('], false).trim(),\n\t\t\t'\\\\{\\\\$\\\\}\\\\ \\\\(');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('bash', ['hello', 'world', '--flag=true'], false).trim(),\n\t\t\t'hello world --flag=true');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('bash', [' space arg '], false).trim(),\n\t\t\t'\\\\ space\\\\ arg\\\\');\n\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('bash', ['{$} ('], true).trim(),\n\t\t\t'{$} (');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('bash', ['hello', 'world', '--flag=true'], true).trim(),\n\t\t\t'hello world --flag=true');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('bash', [' space arg '], true).trim(),\n\t\t\t'space arg');\n\t});\n\n\ttest('bash - do not escape > and <', () => {\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('bash', ['arg1', '>', '> hello.txt', '<', '<input.in'], false).trim(),\n\t\t\t'arg1 > \\\\>\\\\ hello.txt < \\\\<input.in');\n\t});\n\n\ttest('cmd', () => {\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', ['^!< '], false).trim(),\n\t\t\t'\"^^^!^< \"');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', ['hello', 'world', '--flag=true'], false).trim(),\n\t\t\t'hello world --flag=true');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', [' space arg '], false).trim(),\n\t\t\t'\" space arg \"');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', ['\"A>0\"'], false).trim(),\n\t\t\t'\"\"\"A^>0\"\"\"');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', [''], false).trim(),\n\t\t\t'\"\"');\n\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', ['^!< '], true).trim(),\n\t\t\t'^!<');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', ['hello', 'world', '--flag=true'], true).trim(),\n\t\t\t'hello world --flag=true');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', [' space arg '], true).trim(),\n\t\t\t'space arg');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', ['\"A>0\"'], true).trim(),\n\t\t\t'\"A>0\"');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', [''], true).trim(),\n\t\t\t'');\n\t});\n\n\ttest('cmd - do not escape > and <', () => {\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('cmd.exe', ['arg1', '>', '> hello.txt', '<', '<input.in'], false).trim(),\n\t\t\t'arg1 > \"^> hello.txt\" < ^<input.in');\n\t});\n\n\ttest('powershell', () => {\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', ['!< '], false).trim(),\n\t\t\t`& '!< '`);\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', ['hello', 'world', '--flag=true'], false).trim(),\n\t\t\t`& 'hello' 'world' '--flag=true'`);\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', [' space arg '], false).trim(),\n\t\t\t`& ' space arg '`);\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', ['\"A>0\"'], false).trim(),\n\t\t\t`& '\"A>0\"'`);\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', [''], false).trim(),\n\t\t\t`& ''`);\n\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', ['!< '], true).trim(),\n\t\t\t'!<');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', ['hello', 'world', '--flag=true'], true).trim(),\n\t\t\t'hello world --flag=true');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', [' space arg '], true).trim(),\n\t\t\t'space arg');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', ['\"A>0\"'], true).trim(),\n\t\t\t'\"A>0\"');\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', [''], true).trim(),\n\t\t\t``);\n\t});\n\n\ttest('powershell - do not escape > and <', () => {\n\t\tassert.strictEqual(\n\t\t\tprepareCommand('powershell', ['arg1', '>', '> hello.txt', '<', '<input.in'], false).trim(),\n\t\t\t`& 'arg1' > '> hello.txt' < '<input.in'`);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
