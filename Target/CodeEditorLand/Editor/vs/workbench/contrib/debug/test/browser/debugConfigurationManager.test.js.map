{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/debugConfigurationManager.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { ContextKeyService } from '../../../../../platform/contextkey/browser/contextKeyService.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { ConfigurationManager } from '../../browser/debugConfigurationManager.js';\nimport { DebugConfigurationProviderTriggerKind, IAdapterManager, IConfig, IDebugAdapterExecutable, IDebugSession } from '../../common/debug.js';\nimport { IPreferencesService } from '../../../../services/preferences/common/preferences.js';\nimport { TestQuickInputService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestHistoryService, TestContextService, TestExtensionService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('debugConfigurationManager', () => {\n\tconst configurationProviderType = 'custom-type';\n\tlet _debugConfigurationManager: ConfigurationManager;\n\tlet disposables: DisposableStore;\n\n\tconst adapterManager = <IAdapterManager>{\n\t\tgetDebugAdapterDescriptor(session: IDebugSession, config: IConfig): Promise<IDebugAdapterExecutable | undefined> {\n\t\t\treturn Promise.resolve(undefined);\n\t\t},\n\n\t\tactivateDebuggers(activationEvent: string, debugType?: string): Promise<void> {\n\t\t\treturn Promise.resolve();\n\t\t},\n\n\t\tget onDidDebuggersExtPointRead(): Event<void> {\n\t\t\treturn Event.None;\n\t\t}\n\t};\n\n\tconst preferencesService = <IPreferencesService>{\n\t\tuserSettingsResource: URI.file('/tmp/settings.json')\n\t};\n\n\tconst configurationService = new TestConfigurationService();\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst fileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst instantiationService = disposables.add(new TestInstantiationService(new ServiceCollection([IPreferencesService, preferencesService], [IConfigurationService, configurationService])));\n\t\t_debugConfigurationManager = new ConfigurationManager(\n\t\t\tadapterManager,\n\t\t\tnew TestContextService(),\n\t\t\tconfigurationService,\n\t\t\tnew TestQuickInputService(),\n\t\t\tinstantiationService,\n\t\t\tnew TestStorageService(),\n\t\t\tnew TestExtensionService(),\n\t\t\tnew TestHistoryService(),\n\t\t\tnew UriIdentityService(fileService),\n\t\t\tnew ContextKeyService(configurationService),\n\t\t\tnew NullLogService());\n\t});\n\n\tteardown(() => disposables.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('resolves configuration based on type', async () => {\n\t\tdisposables.add(_debugConfigurationManager.registerDebugConfigurationProvider({\n\t\t\ttype: configurationProviderType,\n\t\t\tresolveDebugConfiguration: (folderUri, config, token) => {\n\t\t\t\tassert.strictEqual(config.type, configurationProviderType);\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t...config,\n\t\t\t\t\tconfigurationResolved: true\n\t\t\t\t});\n\t\t\t},\n\t\t\ttriggerKind: DebugConfigurationProviderTriggerKind.Initial\n\t\t}));\n\n\t\tconst initialConfig: IConfig = {\n\t\t\ttype: configurationProviderType,\n\t\t\trequest: 'launch',\n\t\t\tname: 'configName',\n\t\t};\n\n\t\tconst resultConfig = await _debugConfigurationManager.resolveConfigurationByProviders(undefined, configurationProviderType, initialConfig, CancellationToken.None);\n\t\tassert.strictEqual((resultConfig as any).configurationResolved, true, 'Configuration should be updated by test provider');\n\t});\n\n\ttest('resolves configuration from second provider if type changes', async () => {\n\t\tconst secondProviderType = 'second-provider';\n\t\tdisposables.add(_debugConfigurationManager.registerDebugConfigurationProvider({\n\t\t\ttype: configurationProviderType,\n\t\t\tresolveDebugConfiguration: (folderUri, config, token) => {\n\t\t\t\tassert.strictEqual(config.type, configurationProviderType);\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t...config,\n\t\t\t\t\ttype: secondProviderType\n\t\t\t\t});\n\t\t\t},\n\t\t\ttriggerKind: DebugConfigurationProviderTriggerKind.Initial\n\t\t}));\n\t\tdisposables.add(_debugConfigurationManager.registerDebugConfigurationProvider({\n\t\t\ttype: secondProviderType,\n\t\t\tresolveDebugConfiguration: (folderUri, config, token) => {\n\t\t\t\tassert.strictEqual(config.type, secondProviderType);\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t...config,\n\t\t\t\t\tconfigurationResolved: true\n\t\t\t\t});\n\t\t\t},\n\t\t\ttriggerKind: DebugConfigurationProviderTriggerKind.Initial\n\t\t}));\n\n\t\tconst initialConfig: IConfig = {\n\t\t\ttype: configurationProviderType,\n\t\t\trequest: 'launch',\n\t\t\tname: 'configName',\n\t\t};\n\n\t\tconst resultConfig = await _debugConfigurationManager.resolveConfigurationByProviders(undefined, configurationProviderType, initialConfig, CancellationToken.None);\n\t\tassert.strictEqual(resultConfig!.type, secondProviderType);\n\t\tassert.strictEqual((resultConfig as any).configurationResolved, true, 'Configuration should be updated by test provider');\n\t});\n\n\tteardown(() => disposables.clear());\n});\n"],
  "mappings": "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",
  "names": []
}
