import s from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../../base/test/common/utils.js";import{ThreadStatusScheduler as r}from"../../browser/debugSession.js";suite("DebugSession - ThreadStatusScheduler",()=>{const n=u();test("cancel base case",async()=>{const e=n.add(new r);await e.run(Promise.resolve([1]),async(a,t)=>{s.strictEqual(a,1),s.strictEqual(t.isCancellationRequested,!1),e.cancel([1]),s.strictEqual(t.isCancellationRequested,!0)})}),test("cancel global",async()=>{const e=n.add(new r);await e.run(Promise.resolve([1]),async(a,t)=>{s.strictEqual(a,1),s.strictEqual(t.isCancellationRequested,!1),e.cancel(void 0),s.strictEqual(t.isCancellationRequested,!0)})}),test("cancels when new work comes in",async()=>{const e=n.add(new r);let a=!1;await e.run(Promise.resolve([1]),async(t,l)=>{s.strictEqual(t,1),s.strictEqual(l.isCancellationRequested,!1),await e.run(Promise.resolve([1]),async(i,c)=>{a=!0,s.strictEqual(l.isCancellationRequested,!0),s.strictEqual(c.isCancellationRequested,!1)})}),s.strictEqual(a,!0)}),test("cancels slower lookups when new lookup is made",async()=>{const e=n.add(new r),a=[],t=[];await Promise.all([e.run(Promise.resolve().then(()=>{}).then(()=>[1,3]),async l=>{a.push(l)}),e.run(Promise.resolve([1,2]),async l=>{t.push(l)})]),s.deepEqual(a,[3]),s.deepEqual(t,[1,2])}),test("allows work with other IDs",async()=>{const e=n.add(new r);let a=!1;await e.run(Promise.resolve([1]),async(t,l)=>{s.strictEqual(t,1),s.strictEqual(l.isCancellationRequested,!1),await e.run(Promise.resolve([2]),async(i,c)=>{a=!0,s.strictEqual(l.isCancellationRequested,!1),s.strictEqual(c.isCancellationRequested,!1)})}),s.strictEqual(a,!0)}),test("cancels when called during reslution",async()=>{const e=n.add(new r);let a=!1;await e.run(Promise.resolve().then(()=>e.cancel([1])).then(()=>[1]),async()=>{a=!0}),s.strictEqual(a,!1)}),test("global cancels when called during reslution",async()=>{const e=n.add(new r);let a=!1;await e.run(Promise.resolve().then(()=>e.cancel(void 0)).then(()=>[1]),async()=>{a=!0}),s.strictEqual(a,!1)})});
