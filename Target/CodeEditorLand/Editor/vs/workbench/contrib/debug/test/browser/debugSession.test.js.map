{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/browser/debugSession.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ThreadStatusScheduler } from '../../browser/debugSession.js';\n\n\nsuite('DebugSession - ThreadStatusScheduler', () => {\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('cancel base case', async () => {\n\t\tconst scheduler = ds.add(new ThreadStatusScheduler());\n\n\t\tawait scheduler.run(Promise.resolve([1]), async (threadId, token) => {\n\t\t\tassert.strictEqual(threadId, 1);\n\t\t\tassert.strictEqual(token.isCancellationRequested, false);\n\t\t\tscheduler.cancel([1]);\n\t\t\tassert.strictEqual(token.isCancellationRequested, true);\n\t\t});\n\t});\n\n\ttest('cancel global', async () => {\n\t\tconst scheduler = ds.add(new ThreadStatusScheduler());\n\n\t\tawait scheduler.run(Promise.resolve([1]), async (threadId, token) => {\n\t\t\tassert.strictEqual(threadId, 1);\n\t\t\tassert.strictEqual(token.isCancellationRequested, false);\n\t\t\tscheduler.cancel(undefined);\n\t\t\tassert.strictEqual(token.isCancellationRequested, true);\n\t\t});\n\t});\n\n\ttest('cancels when new work comes in', async () => {\n\t\tconst scheduler = ds.add(new ThreadStatusScheduler());\n\t\tlet innerCalled = false;\n\n\t\tawait scheduler.run(Promise.resolve([1]), async (threadId, token1) => {\n\t\t\tassert.strictEqual(threadId, 1);\n\t\t\tassert.strictEqual(token1.isCancellationRequested, false);\n\t\t\tawait scheduler.run(Promise.resolve([1]), async (_threadId, token2) => {\n\t\t\t\tinnerCalled = true;\n\t\t\t\tassert.strictEqual(token1.isCancellationRequested, true);\n\t\t\t\tassert.strictEqual(token2.isCancellationRequested, false);\n\t\t\t});\n\t\t});\n\n\t\tassert.strictEqual(innerCalled, true);\n\t});\n\n\ttest('cancels slower lookups when new lookup is made', async () => {\n\t\tconst scheduler = ds.add(new ThreadStatusScheduler());\n\t\tconst innerCalled1: number[] = [];\n\t\tconst innerCalled2: number[] = [];\n\n\t\tawait Promise.all([\n\t\t\tscheduler.run(Promise.resolve().then(() => { }).then(() => [1, 3]), async threadId => {\n\t\t\t\tinnerCalled1.push(threadId);\n\t\t\t}),\n\t\t\tscheduler.run(Promise.resolve([1, 2]), async threadId => {\n\t\t\t\tinnerCalled2.push(threadId);\n\t\t\t})\n\t\t]);\n\n\t\tassert.deepEqual(innerCalled1, [3]);\n\t\tassert.deepEqual(innerCalled2, [1, 2]);\n\t});\n\n\ttest('allows work with other IDs', async () => {\n\t\tconst scheduler = ds.add(new ThreadStatusScheduler());\n\t\tlet innerCalled = false;\n\n\t\tawait scheduler.run(Promise.resolve([1]), async (threadId, token1) => {\n\t\t\tassert.strictEqual(threadId, 1);\n\t\t\tassert.strictEqual(token1.isCancellationRequested, false);\n\t\t\tawait scheduler.run(Promise.resolve([2]), async (_threadId, token2) => {\n\t\t\t\tinnerCalled = true;\n\t\t\t\tassert.strictEqual(token1.isCancellationRequested, false);\n\t\t\t\tassert.strictEqual(token2.isCancellationRequested, false);\n\t\t\t});\n\t\t});\n\n\t\tassert.strictEqual(innerCalled, true);\n\t});\n\n\ttest('cancels when called during reslution', async () => {\n\t\tconst scheduler = ds.add(new ThreadStatusScheduler());\n\t\tlet innerCalled = false;\n\n\t\tawait scheduler.run(Promise.resolve().then(() => scheduler.cancel([1])).then(() => [1]), async () => {\n\t\t\tinnerCalled = true;\n\t\t});\n\n\t\tassert.strictEqual(innerCalled, false);\n\t});\n\n\ttest('global cancels when called during reslution', async () => {\n\t\tconst scheduler = ds.add(new ThreadStatusScheduler());\n\t\tlet innerCalled = false;\n\n\t\tawait scheduler.run(Promise.resolve().then(() => scheduler.cancel(undefined)).then(() => [1]), async () => {\n\t\t\tinnerCalled = true;\n\t\t});\n\n\t\tassert.strictEqual(innerCalled, false);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
