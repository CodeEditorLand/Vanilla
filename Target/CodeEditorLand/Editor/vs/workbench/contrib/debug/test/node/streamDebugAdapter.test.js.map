{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/node/streamDebugAdapter.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as crypto from 'crypto';\nimport * as net from 'net';\nimport * as platform from '../../../../../base/common/platform.js';\nimport { tmpdir } from 'os';\nimport { join } from '../../../../../base/common/path.js';\nimport * as ports from '../../../../../base/node/ports.js';\nimport { SocketDebugAdapter, NamedPipeDebugAdapter, StreamDebugAdapter } from '../../node/debugAdapter.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\n\nfunction sendInitializeRequest(debugAdapter: StreamDebugAdapter): Promise<DebugProtocol.Response> {\n\treturn new Promise((resolve, reject) => {\n\t\tdebugAdapter.sendRequest('initialize', { adapterID: 'test' }, (result) => {\n\t\t\tresolve(result);\n\t\t}, 3000);\n\t});\n}\n\nfunction serverConnection(socket: net.Socket) {\n\tsocket.on('data', (data: Buffer) => {\n\t\tconst str = data.toString().split('\\r\\n')[2];\n\t\tconst request = JSON.parse(str);\n\t\tconst response: any = {\n\t\t\tseq: request.seq,\n\t\t\trequest_seq: request.seq,\n\t\t\ttype: 'response',\n\t\t\tcommand: request.command\n\t\t};\n\t\tif (request.arguments.adapterID === 'test') {\n\t\t\tresponse.success = true;\n\t\t} else {\n\t\t\tresponse.success = false;\n\t\t\tresponse.message = 'failed';\n\t\t}\n\n\t\tconst responsePayload = JSON.stringify(response);\n\t\tsocket.write(`Content-Length: ${responsePayload.length}\\r\\n\\r\\n${responsePayload}`);\n\t});\n}\n\nsuite('Debug - StreamDebugAdapter', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest(`StreamDebugAdapter (NamedPipeDebugAdapter) can initialize a connection`, async () => {\n\n\t\tconst pipeName = crypto.randomBytes(10).toString('hex');\n\t\tconst pipePath = platform.isWindows ? join('\\\\\\\\.\\\\pipe\\\\', pipeName) : join(tmpdir(), pipeName);\n\t\tconst server = await new Promise<net.Server>((resolve, reject) => {\n\t\t\tconst server = net.createServer(serverConnection);\n\t\t\tserver.once('listening', () => resolve(server));\n\t\t\tserver.once('error', reject);\n\t\t\tserver.listen(pipePath);\n\t\t});\n\n\t\tconst debugAdapter = new NamedPipeDebugAdapter({\n\t\t\ttype: 'pipeServer',\n\t\t\tpath: pipePath\n\t\t});\n\t\ttry {\n\t\t\tawait debugAdapter.startSession();\n\t\t\tconst response: DebugProtocol.Response = await sendInitializeRequest(debugAdapter);\n\t\t\tassert.strictEqual(response.command, 'initialize');\n\t\t\tassert.strictEqual(response.request_seq, 1);\n\t\t\tassert.strictEqual(response.success, true, response.message);\n\t\t} finally {\n\t\t\tawait debugAdapter.stopSession();\n\t\t\tserver.close();\n\t\t\tdebugAdapter.dispose();\n\t\t}\n\t});\n\n\ttest(`StreamDebugAdapter (SocketDebugAdapter) can initialize a connection`, async () => {\n\n\t\tconst rndPort = Math.floor(Math.random() * 1000 + 8000);\n\t\tconst port = await ports.findFreePort(rndPort, 10 /* try 10 ports */, 3000 /* try up to 3 seconds */, 87 /* skip 87 ports between attempts */);\n\t\tconst server = net.createServer(serverConnection).listen(port);\n\t\tconst debugAdapter = new SocketDebugAdapter({\n\t\t\ttype: 'server',\n\t\t\tport\n\t\t});\n\t\ttry {\n\t\t\tawait debugAdapter.startSession();\n\t\t\tconst response: DebugProtocol.Response = await sendInitializeRequest(debugAdapter);\n\t\t\tassert.strictEqual(response.command, 'initialize');\n\t\t\tassert.strictEqual(response.request_seq, 1);\n\t\t\tassert.strictEqual(response.success, true, response.message);\n\t\t} finally {\n\t\t\tawait debugAdapter.stopSession();\n\t\t\tserver.close();\n\t\t\tdebugAdapter.dispose();\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": ["server"]
}
