import o from"assert";import{DeferredPromise as u}from"../../../../../base/common/async.js";import{DisposableStore as w}from"../../../../../base/common/lifecycle.js";import{mockObject as S}from"../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as h}from"../../../../../base/test/common/utils.js";import{NullLogService as g}from"../../../../../platform/log/common/log.js";import{DebugModel as b,ExceptionBreakpoint as k,FunctionBreakpoint as C}from"../../common/debugModel.js";import{MockDebugStorage as D}from"./mockDebug.js";import{TestStorageService as v}from"../../../../test/common/workbenchTestServices.js";suite("DebugModel",()=>{h(),suite("FunctionBreakpoint",()=>{test("Id is saved",()=>{const e=new C({name:"function",enabled:!0,hitCondition:"hit condition",condition:"condition",logMessage:"log message"}),a=JSON.stringify(e),t=JSON.parse(a);o.equal(t.id,e.getId())})}),suite("ExceptionBreakpoint",()=>{test("Restored matches new",()=>{const e=new k({conditionDescription:"condition description",description:"description",filter:"condition",label:"label",supportsCondition:!0,enabled:!0},"id"),a=JSON.stringify(e),t=JSON.parse(a),s=new k(t);o.ok(e.matches(s))})}),suite("DebugModel",()=>{test("refreshTopOfCallstack resolves all returned promises when called multiple times",async()=>{const e=new u,a=new u,t=S()({session:{capabilities:{supportsDelayedStackTraceLoading:!0}},getCallStack:()=>[],getStaleCallStack:()=>[]});t.fetchCallStack.callsFake(f=>f===1?e.p:a.p),t.getId.returns(1);const s=new w,m=s.add(new v),r=new b(s.add(new D(m)),{isDirty:f=>!1},void 0,new g);s.add(r);let d=!1,l=!1,p=!1,c=!1;const i=r.refreshTopOfCallstack(t);i.topCallStack.then(()=>d=!0),i.wholeCallStack.then(()=>l=!0);const n=r.refreshTopOfCallstack(t);n.topCallStack.then(()=>p=!0),n.wholeCallStack.then(()=>c=!0),o.ok(!d),o.ok(!l),o.ok(!p),o.ok(!c),await e.complete(),await i.topCallStack,await n.topCallStack,o.ok(!l),o.ok(!c),await a.complete(),await i.wholeCallStack,await n.wholeCallStack,s.dispose()})})});
