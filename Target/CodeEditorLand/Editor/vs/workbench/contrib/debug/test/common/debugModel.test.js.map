{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/test/common/debugModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DeferredPromise } from '../../../../../base/common/async.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { mockObject } from '../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { DebugModel, ExceptionBreakpoint, FunctionBreakpoint, Thread } from '../../common/debugModel.js';\nimport { MockDebugStorage } from './mockDebug.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('DebugModel', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('FunctionBreakpoint', () => {\n\t\ttest('Id is saved', () => {\n\t\t\tconst fbp = new FunctionBreakpoint({ name: 'function', enabled: true, hitCondition: 'hit condition', condition: 'condition', logMessage: 'log message' });\n\t\t\tconst strigified = JSON.stringify(fbp);\n\t\t\tconst parsed = JSON.parse(strigified);\n\t\t\tassert.equal(parsed.id, fbp.getId());\n\t\t});\n\t});\n\n\tsuite('ExceptionBreakpoint', () => {\n\t\ttest('Restored matches new', () => {\n\t\t\tconst ebp = new ExceptionBreakpoint({\n\t\t\t\tconditionDescription: 'condition description',\n\t\t\t\tdescription: 'description',\n\t\t\t\tfilter: 'condition',\n\t\t\t\tlabel: 'label',\n\t\t\t\tsupportsCondition: true,\n\t\t\t\tenabled: true,\n\t\t\t}, 'id');\n\t\t\tconst strigified = JSON.stringify(ebp);\n\t\t\tconst parsed = JSON.parse(strigified);\n\t\t\tconst newEbp = new ExceptionBreakpoint(parsed);\n\t\t\tassert.ok(ebp.matches(newEbp));\n\t\t});\n\t});\n\n\tsuite('DebugModel', () => {\n\t\ttest('refreshTopOfCallstack resolves all returned promises when called multiple times', async () => {\n\t\t\tconst topFrameDeferred = new DeferredPromise<void>();\n\t\t\tconst wholeStackDeferred = new DeferredPromise<void>();\n\t\t\tconst fakeThread = mockObject<Thread>()({\n\t\t\t\tsession: { capabilities: { supportsDelayedStackTraceLoading: true } } as any,\n\t\t\t\tgetCallStack: () => [],\n\t\t\t\tgetStaleCallStack: () => [],\n\t\t\t});\n\t\t\tfakeThread.fetchCallStack.callsFake((levels: number) => {\n\t\t\t\treturn levels === 1 ? topFrameDeferred.p : wholeStackDeferred.p;\n\t\t\t});\n\t\t\tfakeThread.getId.returns(1);\n\n\t\t\tconst disposable = new DisposableStore();\n\t\t\tconst storage = disposable.add(new TestStorageService());\n\t\t\tconst model = new DebugModel(disposable.add(new MockDebugStorage(storage)), <any>{ isDirty: (e: any) => false }, undefined!, new NullLogService());\n\t\t\tdisposable.add(model);\n\n\t\t\tlet top1Resolved = false;\n\t\t\tlet whole1Resolved = false;\n\t\t\tlet top2Resolved = false;\n\t\t\tlet whole2Resolved = false;\n\t\t\tconst result1 = model.refreshTopOfCallstack(fakeThread as any);\n\t\t\tresult1.topCallStack.then(() => top1Resolved = true);\n\t\t\tresult1.wholeCallStack.then(() => whole1Resolved = true);\n\n\t\t\tconst result2 = model.refreshTopOfCallstack(fakeThread as any);\n\t\t\tresult2.topCallStack.then(() => top2Resolved = true);\n\t\t\tresult2.wholeCallStack.then(() => whole2Resolved = true);\n\n\t\t\tassert.ok(!top1Resolved);\n\t\t\tassert.ok(!whole1Resolved);\n\t\t\tassert.ok(!top2Resolved);\n\t\t\tassert.ok(!whole2Resolved);\n\n\t\t\tawait topFrameDeferred.complete();\n\t\t\tawait result1.topCallStack;\n\t\t\tawait result2.topCallStack;\n\t\t\tassert.ok(!whole1Resolved);\n\t\t\tassert.ok(!whole2Resolved);\n\n\t\t\tawait wholeStackDeferred.complete();\n\t\t\tawait result1.wholeCallStack;\n\t\t\tawait result2.wholeCallStack;\n\n\t\t\tdisposable.dispose();\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
