var v=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var S=(c,e,i,t)=>{for(var r=t>1?void 0:t?f(e,i):e,n=c.length-1,o;n>=0;n--)(o=c[n])&&(r=(t?o(e,i,r):o(r))||r);return t&&r&&v(e,i,r),r},l=(c,e)=>(i,t)=>e(i,t,c);import"../../../../base/common/uri.js";import{localize as p}from"../../../../nls.js";import{getMimeTypes as h}from"../../../../editor/common/services/languagesAssociations.js";import"../../../../editor/common/model.js";import{IModelService as I}from"../../../../editor/common/services/model.js";import{ILanguageService as M}from"../../../../editor/common/languages/language.js";import{ITextModelService as T}from"../../../../editor/common/services/resolverService.js";import"../../../common/contributions.js";import{DEBUG_SCHEME as b,IDebugService as E}from"./debug.js";import{Source as y}from"./debugSource.js";import{IEditorWorkerService as C}from"../../../../editor/common/services/editorWorker.js";import{EditOperation as x}from"../../../../editor/common/core/editOperation.js";import{Range as N}from"../../../../editor/common/core/range.js";import{CancellationTokenSource as U}from"../../../../base/common/cancellation.js";import{PLAINTEXT_LANGUAGE_ID as k}from"../../../../editor/common/languages/modesRegistry.js";import{ErrorNoTelemetry as A}from"../../../../base/common/errors.js";let a=class{constructor(e,i,t,r,n){this.debugService=i;this.modelService=t;this.languageService=r;this.editorWorkerService=n;e.registerTextModelContentProvider(b,this),a.INSTANCE=this}static INSTANCE;pendingUpdates=new Map;dispose(){this.pendingUpdates.forEach(e=>e.dispose())}provideTextContent(e){return this.createOrUpdateContentModel(e,!0)}static refreshDebugContent(e){a.INSTANCE?.createOrUpdateContentModel(e,!1)}createOrUpdateContentModel(e,i){const t=this.modelService.getModel(e);if(!t&&!i)return null;let r;if(e.query){const o=y.getEncodedDebugData(e);r=this.debugService.getModel().getSession(o.sessionId)}if(r||(r=this.debugService.getViewModel().focusedSession),!r)return Promise.reject(new A(p("unable","Unable to resolve the resource without a debug session")));const n=o=>{this.debugService.sourceIsNotAvailable(e);const d=this.languageService.createById(k),s=o?p("canNotResolveSourceWithError","Could not load source '{0}': {1}.",e.path,o):p("canNotResolveSource","Could not load source '{0}'.",e.path);return this.modelService.createModel(s,d,e)};return r.loadSource(e).then(o=>{if(o&&o.body)if(t){const d=o.body.content;this.pendingUpdates.get(t.id)?.cancel();const u=new U;return this.pendingUpdates.set(t.id,u),this.editorWorkerService.computeMoreMinimalEdits(t.uri,[{text:d,range:t.getFullModelRange()}]).then(m=>(this.pendingUpdates.delete(t.id),!u.token.isCancellationRequested&&m&&m.length>0&&t.applyEdits(m.map(g=>x.replace(N.lift(g.range),g.text))),t))}else{const d=o.body.mimeType||h(e)[0],s=this.languageService.createByMimeType(d);return this.modelService.createModel(o.body.content,s,e)}return n()},o=>n(o.message))}};a=S([l(0,T),l(1,E),l(2,I),l(3,M),l(4,C)],a);export{a as DebugContentProvider};
