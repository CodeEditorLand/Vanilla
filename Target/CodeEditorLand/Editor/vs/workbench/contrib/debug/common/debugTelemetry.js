var c=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var g=(n,e,o,t)=>{for(var s=t>1?void 0:t?a(e,o):e,r=n.length-1,p;r>=0;r--)(p=n[r])&&(s=(t?p(e,o,s):p(s))||s);return t&&s&&c(e,o,s),s},l=(n,e)=>(o,t)=>e(o,t,n);import{ITelemetryService as d}from"../../../../platform/telemetry/common/telemetry.js";let i=class{constructor(e,o){this.model=e;this.telemetryService=o}logDebugSessionStart(e,o){const t=e.getMainExtensionDescriptor();this.telemetryService.publicLog("debugSessionStart",{type:e.type,breakpointCount:this.model.getBreakpoints().length,exceptionBreakpoints:this.model.getExceptionBreakpoints(),watchExpressionsCount:this.model.getWatchExpressions().length,extensionName:t.identifier.value,isBuiltin:t.isBuiltin,launchJsonExists:o})}logDebugSessionStop(e,o){const t=this.model.getBreakpoints();this.telemetryService.publicLog("debugSessionStop",{type:e&&e.configuration.type,success:o.emittedStopped||t.length===0,sessionLengthInSeconds:o.sessionLengthInSeconds,breakpointCount:t.length,watchExpressionsCount:this.model.getWatchExpressions().length})}};i=g([l(1,d)],i);export{i as DebugTelemetry};
