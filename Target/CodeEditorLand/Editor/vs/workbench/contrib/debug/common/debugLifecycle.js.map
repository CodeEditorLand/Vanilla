{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugLifecycle.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport * as nls from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IDebugConfiguration, IDebugService } from './debug.js';\nimport { ILifecycleService, ShutdownReason } from '../../../services/lifecycle/common/lifecycle.js';\n\nexport class DebugLifecycle implements IWorkbenchContribution {\n\tprivate disposable: IDisposable;\n\n\tconstructor(\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t) {\n\t\tthis.disposable = lifecycleService.onBeforeShutdown(async e => e.veto(this.shouldVetoShutdown(e.reason), 'veto.debug'));\n\t}\n\n\tprivate shouldVetoShutdown(_reason: ShutdownReason): boolean | Promise<boolean> {\n\t\tconst rootSessions = this.debugService.getModel().getSessions().filter(s => s.parentSession === undefined);\n\t\tif (rootSessions.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst shouldConfirmOnExit = this.configurationService.getValue<IDebugConfiguration>('debug').confirmOnExit;\n\t\tif (shouldConfirmOnExit === 'never') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.showWindowCloseConfirmation(rootSessions.length);\n\t}\n\n\tpublic dispose() {\n\t\treturn this.disposable.dispose();\n\t}\n\n\tprivate async showWindowCloseConfirmation(numSessions: number): Promise<boolean> {\n\t\tlet message: string;\n\t\tif (numSessions === 1) {\n\t\t\tmessage = nls.localize('debug.debugSessionCloseConfirmationSingular', \"There is an active debug session, are you sure you want to stop it?\");\n\t\t} else {\n\t\t\tmessage = nls.localize('debug.debugSessionCloseConfirmationPlural', \"There are active debug sessions, are you sure you want to stop them?\");\n\t\t}\n\t\tconst res = await this.dialogService.confirm({\n\t\t\tmessage,\n\t\t\ttype: 'warning',\n\t\t\tprimaryButton: nls.localize({ key: 'debug.stop', comment: ['&& denotes a mnemonic'] }, \"&&Stop Debugging\")\n\t\t});\n\t\treturn !res.confirmed;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,mBAAmB;AAC5B,YAAY,SAAS;AACrB,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAC/B,SAAS,8BAA8B;AACvC,SAAS,qBAAqB,qBAAqB;AACnD,SAAS,mBAAmB,sBAAsB;AAE3C,IAAM,iBAAN,MAAuD;AAAA,EAG7D,YACoB,kBACa,cACQ,sBACP,eAChC;AAH+B;AACQ;AACP;AAEjC,SAAK,aAAa,iBAAiB,iBAAiB,OAAM,MAAK,EAAE,KAAK,KAAK,mBAAmB,EAAE,MAAM,GAAG,YAAY,CAAC;AAAA,EACvH;AAAA,EAvBD,OAa8D;AAAA;AAAA;AAAA,EACrD;AAAA,EAWA,mBAAmB,SAAqD;AAC/E,UAAM,eAAe,KAAK,aAAa,SAAS,EAAE,YAAY,EAAE,OAAO,OAAK,EAAE,kBAAkB,MAAS;AACzG,QAAI,aAAa,WAAW,GAAG;AAC9B,aAAO;AAAA,IACR;AAEA,UAAM,sBAAsB,KAAK,qBAAqB,SAA8B,OAAO,EAAE;AAC7F,QAAI,wBAAwB,SAAS;AACpC,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,4BAA4B,aAAa,MAAM;AAAA,EAC5D;AAAA,EAEO,UAAU;AAChB,WAAO,KAAK,WAAW,QAAQ;AAAA,EAChC;AAAA,EAEA,MAAc,4BAA4B,aAAuC;AAChF,QAAI;AACJ,QAAI,gBAAgB,GAAG;AACtB,gBAAU,IAAI,SAAS,+CAA+C,qEAAqE;AAAA,IAC5I,OAAO;AACN,gBAAU,IAAI,SAAS,6CAA6C,sEAAsE;AAAA,IAC3I;AACA,UAAM,MAAM,MAAM,KAAK,cAAc,QAAQ;AAAA,MAC5C;AAAA,MACA,MAAM;AAAA,MACN,eAAe,IAAI,SAAS,EAAE,KAAK,cAAc,SAAS,CAAC,uBAAuB,EAAE,GAAG,kBAAkB;AAAA,IAC1G,CAAC;AACD,WAAO,CAAC,IAAI;AAAA,EACb;AACD;AA5Ca,iBAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAPU;",
  "names": []
}
