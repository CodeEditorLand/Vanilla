var m=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var c=(t,o,e,n)=>{for(var i=n>1?void 0:n?d(o,e):o,r=t.length-1,u;r>=0;r--)(u=t[r])&&(i=(n?u(o,e,i):u(i))||i);return n&&i&&m(o,e,i),i},s=(t,o)=>(e,n)=>o(e,n,t);import*as l from"../../../../nls.js";import{IConfigurationService as g}from"../../../../platform/configuration/common/configuration.js";import{IDialogService as p}from"../../../../platform/dialogs/common/dialogs.js";import{ILifecycleService as f}from"../../../services/lifecycle/common/lifecycle.js";import{IDebugService as b}from"./debug.js";let a=class{constructor(o,e,n,i){this.debugService=e;this.configurationService=n;this.dialogService=i;this.disposable=o.onBeforeShutdown(async r=>r.veto(this.shouldVetoShutdown(r.reason),"veto.debug"))}disposable;shouldVetoShutdown(o){const e=this.debugService.getModel().getSessions().filter(i=>i.parentSession===void 0);return e.length===0||this.configurationService.getValue("debug").confirmOnExit==="never"?!1:this.showWindowCloseConfirmation(e.length)}dispose(){return this.disposable.dispose()}async showWindowCloseConfirmation(o){let e;return o===1?e=l.localize("debug.debugSessionCloseConfirmationSingular","There is an active debug session, are you sure you want to stop it?"):e=l.localize("debug.debugSessionCloseConfirmationPlural","There are active debug sessions, are you sure you want to stop them?"),!(await this.dialogService.confirm({message:e,type:"warning",primaryButton:l.localize({key:"debug.stop",comment:["&& denotes a mnemonic"]},"&&Stop Debugging")})).confirmed}};a=c([s(0,f),s(1,b),s(2,g),s(3,p)],a);export{a as DebugLifecycle};
