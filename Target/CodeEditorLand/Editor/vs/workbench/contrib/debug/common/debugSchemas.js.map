{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugSchemas.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extensionsRegistry from '../../../services/extensions/common/extensionsRegistry.js';\nimport * as nls from '../../../../nls.js';\nimport { IDebuggerContribution, ICompound, IBreakpointContribution } from './debug.js';\nimport { launchSchemaId } from '../../../services/configuration/common/configuration.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { inputsSchema } from '../../../services/configurationResolver/common/configurationResolverSchema.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Extensions, IExtensionFeatureTableRenderer, IExtensionFeaturesRegistry, IRenderedData, IRowData, ITableData } from '../../../services/extensionManagement/common/extensionFeatures.js';\nimport { IExtensionManifest } from '../../../../platform/extensions/common/extensions.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\n\n// debuggers extension point\nexport const debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<IDebuggerContribution[]>({\n\textensionPoint: 'debuggers',\n\tdefaultExtensionKind: ['workspace'],\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.debuggers', 'Contributes debug adapters.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ type: '' }] }],\n\t\titems: {\n\t\t\tadditionalProperties: false,\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { type: '', program: '', runtime: '' } }],\n\t\t\tproperties: {\n\t\t\t\ttype: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.type', \"Unique identifier for this debug adapter.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.label', \"Display name for this debug adapter.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tprogram: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.program', \"Path to the debug adapter program. Path is either absolute or relative to the extension folder.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\targs: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.args', \"Optional arguments to pass to the adapter.\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\truntime: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.runtime', \"Optional runtime in case the program attribute is not an executable but requires a runtime.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\truntimeArgs: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.runtimeArgs', \"Optional runtime arguments.\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\tvariables: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.variables', \"Mapping from interactive variables (e.g. ${action.pickProcess}) in `launch.json` to a command.\"),\n\t\t\t\t\ttype: 'object'\n\t\t\t\t},\n\t\t\t\tinitialConfigurations: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.initialConfigurations', \"Configurations for generating the initial \\'launch.json\\'.\"),\n\t\t\t\t\ttype: ['array', 'string'],\n\t\t\t\t},\n\t\t\t\tlanguages: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.languages', \"List of languages for which the debug extension could be considered the \\\"default debugger\\\".\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\tconfigurationSnippets: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.configurationSnippets', \"Snippets for adding new configurations in \\'launch.json\\'.\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\tconfigurationAttributes: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.configurationAttributes', \"JSON schema configurations for validating \\'launch.json\\'.\"),\n\t\t\t\t\ttype: 'object'\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.when', \"Condition which must be true to enable this type of debugger. Consider using 'shellExecutionSupported', 'virtualWorkspace', 'resourceScheme' or an extension-defined context key as appropriate for this.\"),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: ''\n\t\t\t\t},\n\t\t\t\thiddenWhen: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.hiddenWhen', \"When this condition is true, this debugger type is hidden from the debugger list, but is still enabled.\"),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: ''\n\t\t\t\t},\n\t\t\t\tdeprecated: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.deprecated', \"Optional message to mark this debug type as being deprecated.\"),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: ''\n\t\t\t\t},\n\t\t\t\twindows: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.windows', \"Windows specific settings.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\truntime: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.windows.runtime', \"Runtime used for Windows.\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tosx: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.osx', \"macOS specific settings.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\truntime: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.osx.runtime', \"Runtime used for macOS.\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tlinux: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.linux', \"Linux specific settings.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\truntime: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.linux.runtime', \"Runtime used for Linux.\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstrings: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.strings', \"UI strings contributed by this debug adapter.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tunverifiedBreakpoints: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.strings.unverifiedBreakpoints', \"When there are unverified breakpoints in a language supported by this debug adapter, this message will appear on the breakpoint hover and in the breakpoints view. Markdown and command links are supported.\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n// breakpoints extension point #9037\nexport const breakpointsExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<IBreakpointContribution[]>({\n\textensionPoint: 'breakpoints',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.breakpoints', 'Contributes breakpoints.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ language: '' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: false,\n\t\t\tdefaultSnippets: [{ body: { language: '' } }],\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.breakpoints.language', \"Allow breakpoints for this language.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.breakpoints.when', \"Condition which must be true to enable breakpoints in this language. Consider matching this to the debugger when clause as appropriate.\"),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: ''\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\n// debug general schema\n\nexport const presentationSchema: IJSONSchema = {\n\ttype: 'object',\n\tdescription: nls.localize('presentation', \"Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.\"),\n\tproperties: {\n\t\thidden: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('presentation.hidden', \"Controls if this configuration should be shown in the configuration dropdown and the command palette.\")\n\t\t},\n\t\tgroup: {\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tdescription: nls.localize('presentation.group', \"Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette.\")\n\t\t},\n\t\torder: {\n\t\t\ttype: 'number',\n\t\t\tdefault: 1,\n\t\t\tdescription: nls.localize('presentation.order', \"Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette.\")\n\t\t}\n\t},\n\tdefault: {\n\t\thidden: false,\n\t\tgroup: '',\n\t\torder: 1\n\t}\n};\nconst defaultCompound: ICompound = { name: 'Compound', configurations: [] };\nexport const launchSchema: IJSONSchema = {\n\tid: launchSchemaId,\n\ttype: 'object',\n\ttitle: nls.localize('app.launch.json.title', \"Launch\"),\n\tallowTrailingCommas: true,\n\tallowComments: true,\n\trequired: [],\n\tdefault: { version: '0.2.0', configurations: [], compounds: [] },\n\tproperties: {\n\t\tversion: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('app.launch.json.version', \"Version of this file format.\"),\n\t\t\tdefault: '0.2.0'\n\t\t},\n\t\tconfigurations: {\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('app.launch.json.configurations', \"List of configurations. Add new configurations or edit existing ones by using IntelliSense.\"),\n\t\t\titems: {\n\t\t\t\tdefaultSnippets: [],\n\t\t\t\t'type': 'object',\n\t\t\t\toneOf: []\n\t\t\t}\n\t\t},\n\t\tcompounds: {\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('app.launch.json.compounds', \"List of compounds. Each compound references multiple configurations which will get launched together.\"),\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['name', 'configurations'],\n\t\t\t\tproperties: {\n\t\t\t\t\tname: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n\t\t\t\t\t},\n\t\t\t\t\tpresentation: presentationSchema,\n\t\t\t\t\tconfigurations: {\n\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\toneOf: [{\n\t\t\t\t\t\t\t\tenum: [],\n\t\t\t\t\t\t\t\tdescription: nls.localize('useUniqueNames', \"Please use unique configuration names.\")\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\trequired: ['name'],\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\t\t\tenum: [],\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfolder: {\n\t\t\t\t\t\t\t\t\t\tenum: [],\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compound.folder', \"Name of folder in which the compound is located.\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compounds.configurations', \"Names of configurations that will be started as part of this compound.\")\n\t\t\t\t\t},\n\t\t\t\t\tstopAll: {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compound.stopAll', \"Controls whether manually terminating one session will stop all of the compound sessions.\")\n\t\t\t\t\t},\n\t\t\t\t\tpreLaunchTask: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: nls.localize('compoundPrelaunchTask', \"Task to run before any of the compound configurations start.\")\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdefault: defaultCompound\n\t\t\t},\n\t\t\tdefault: [\n\t\t\t\tdefaultCompound\n\t\t\t]\n\t\t},\n\t\tinputs: inputsSchema.definitions!.inputs\n\t}\n};\n\nclass DebuggersDataRenderer extends Disposable implements IExtensionFeatureTableRenderer {\n\n\treadonly type = 'table';\n\n\tshouldRender(manifest: IExtensionManifest): boolean {\n\t\treturn !!manifest.contributes?.debuggers;\n\t}\n\n\trender(manifest: IExtensionManifest): IRenderedData<ITableData> {\n\t\tconst contrib = manifest.contributes?.debuggers || [];\n\t\tif (!contrib.length) {\n\t\t\treturn { data: { headers: [], rows: [] }, dispose: () => { } };\n\t\t}\n\n\t\tconst headers = [\n\t\t\tnls.localize('debugger name', \"Name\"),\n\t\t\tnls.localize('debugger type', \"Type\"),\n\t\t];\n\n\t\tconst rows: IRowData[][] = contrib.map(d => {\n\t\t\treturn [\n\t\t\t\td.label ?? '',\n\t\t\t\td.type\n\t\t\t];\n\t\t});\n\n\t\treturn {\n\t\t\tdata: {\n\t\t\t\theaders,\n\t\t\t\trows\n\t\t\t},\n\t\t\tdispose: () => { }\n\t\t};\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(Extensions.ExtensionFeaturesRegistry).registerExtensionFeature({\n\tid: 'debuggers',\n\tlabel: nls.localize('debuggers', \"Debuggers\"),\n\taccess: {\n\t\tcanToggle: false\n\t},\n\trenderer: new SyncDescriptor(DebuggersDataRenderer),\n});\n\n"],
  "mappings": "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",
  "names": []
}
