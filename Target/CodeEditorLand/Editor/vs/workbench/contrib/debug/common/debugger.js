var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var l=(p,t,e,r)=>{for(var n=r>1?void 0:r?y(t,e):t,i=p.length-1,u;i>=0;i--)(u=p[i])&&(n=(r?u(t,e,n):u(n))||n);return r&&n&&m(t,e,n),n},d=(p,t)=>(e,r)=>t(e,r,p);import{Schemas as v}from"../../../../base/common/network.js";import{filter as C}from"../../../../base/common/objects.js";import{isObject as c}from"../../../../base/common/types.js";import{URI as S}from"../../../../base/common/uri.js";import{ITextResourcePropertiesService as I}from"../../../../editor/common/services/textResourceConfiguration.js";import*as g from"../../../../nls.js";import{IConfigurationService as x}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as f,IContextKeyService as D}from"../../../../platform/contextkey/common/contextkey.js";import{cleanRemoteAuthority as E}from"../../../../platform/telemetry/common/telemetryUtils.js";import{IConfigurationResolverService as M}from"../../../services/configurationResolver/common/configurationResolver.js";import*as P from"../../../services/configurationResolver/common/configurationResolverUtils.js";import{IWorkbenchEnvironmentService as W}from"../../../services/environment/common/environmentService.js";import{DebugConfigurationProviderTriggerKind as R,IDebugService as $,debuggerDisabledMessage as w}from"./debug.js";import{isDebuggerMainContribution as O}from"./debugUtils.js";let b=class{constructor(t,e,r,n,i,u,s,o,a){this.adapterManager=t;this.configurationService=n;this.resourcePropertiesService=i;this.configurationResolverService=u;this.environmentService=s;this.debugService=o;this.contextKeyService=a;this.debuggerContribution={type:e.type},this.merge(e,r),this.debuggerWhen=typeof this.debuggerContribution.when=="string"?f.deserialize(this.debuggerContribution.when):void 0,this.debuggerHiddenWhen=typeof this.debuggerContribution.hiddenWhen=="string"?f.deserialize(this.debuggerContribution.hiddenWhen):void 0}debuggerContribution;mergedExtensionDescriptions=[];mainExtensionDescription;debuggerWhen;debuggerHiddenWhen;merge(t,e){function r(n,i,u,s=0){return c(n)?(c(i)&&Object.keys(i).forEach(o=>{o!=="__proto__"&&(c(n[o])&&c(i[o])?r(n[o],i[o],u,s+1):o in n?u&&(s===0&&o==="type"||(n[o]=i[o])):n[o]=i[o])}),n):i}this.mergedExtensionDescriptions.indexOf(e)<0&&(this.mergedExtensionDescriptions.push(e),r(this.debuggerContribution,t,e.isBuiltin),O(t)&&(this.mainExtensionDescription=e))}async startDebugging(t,e){const r=this.debugService.getModel().getSession(e);return await this.debugService.startDebugging(void 0,t,{parentSession:r},void 0)}async createDebugAdapter(t){await this.adapterManager.activateDebuggers("onDebugAdapterProtocolTracker",this.type);const e=this.adapterManager.createDebugAdapter(t);if(e)return Promise.resolve(e);throw new Error(g.localize("cannot.find.da","Cannot find debug adapter for type '{0}'.",this.type))}async substituteVariables(t,e){const r=await this.adapterManager.substituteVariables(this.type,t,e);return await this.configurationResolverService.resolveWithInteractionReplace(t,r,"launch",this.variables,r.__configurationTarget)}runInTerminal(t,e){return this.adapterManager.runInTerminal(this.type,t,e)}get label(){return this.debuggerContribution.label||this.debuggerContribution.type}get type(){return this.debuggerContribution.type}get variables(){return this.debuggerContribution.variables}get configurationSnippets(){return this.debuggerContribution.configurationSnippets}get languages(){return this.debuggerContribution.languages}get when(){return this.debuggerWhen}get hiddenWhen(){return this.debuggerHiddenWhen}get enabled(){return!this.debuggerWhen||this.contextKeyService.contextMatchesRules(this.debuggerWhen)}get isHiddenFromDropdown(){return this.debuggerHiddenWhen?this.contextKeyService.contextMatchesRules(this.debuggerHiddenWhen):!1}get strings(){return this.debuggerContribution.strings??this.debuggerContribution.uiMessages}interestedInLanguage(t){return!!(this.languages&&this.languages.indexOf(t)>=0)}hasInitialConfiguration(){return!!this.debuggerContribution.initialConfigurations}hasDynamicConfigurationProviders(){return this.debugService.getConfigurationManager().hasDebugConfigurationProvider(this.type,R.Dynamic)}hasConfigurationProvider(){return this.debugService.getConfigurationManager().hasDebugConfigurationProvider(this.type)}getInitialConfigurationContent(t){let e=this.debuggerContribution.initialConfigurations||[];t&&(e=e.concat(t));const r=this.resourcePropertiesService.getEOL(S.from({scheme:v.untitled,path:"1"}))===`\r
`?`\r
`:`
`,n=JSON.stringify(e,null,"	").split(`
`).map(h=>"	"+h).join(r).trim(),i=g.localize("launch.config.comment1","Use IntelliSense to learn about possible attributes."),u=g.localize("launch.config.comment2","Hover to view descriptions of existing attributes."),s=g.localize("launch.config.comment3","For more information, visit: {0}","https://go.microsoft.com/fwlink/?linkid=830387");let o=["{",`	// ${i}`,`	// ${u}`,`	// ${s}`,'	"version": "0.2.0",',`	"configurations": ${n}`,"}"].join(r);const a=this.configurationService.getValue();return a.editor&&a.editor.insertSpaces&&(o=o.replace(/\t/g," ".repeat(a.editor.tabSize))),Promise.resolve(o)}getMainExtensionDescriptor(){return this.mainExtensionDescription||this.mergedExtensionDescriptions[0]}getCustomTelemetryEndpoint(){const t=this.debuggerContribution.aiKey;if(!t)return;const e=E(this.environmentService.remoteAuthority)!=="other";return{id:`${this.getMainExtensionDescriptor().publisher}.${this.type}`,aiKey:t,sendErrorTelemetry:e}}getSchemaAttributes(t){return this.debuggerContribution.configurationAttributes?Object.keys(this.debuggerContribution.configurationAttributes).map(e=>{const r=`${this.type}:${e}`,n=`${this.type}:${e}:platform`,i=this.debuggerContribution.configurationAttributes[e],u=["name","type","request"];i.required=i.required&&i.required.length?u.concat(i.required):u,i.additionalProperties=!1,i.type="object",i.properties||(i.properties={});const s=i.properties;s.type={enum:[this.type],enumDescriptions:[this.label],description:g.localize("debugType","Type of configuration."),pattern:"^(?!node2)",deprecationMessage:this.debuggerContribution.deprecated||(this.enabled?void 0:w(this.type)),doNotSuggest:!!this.debuggerContribution.deprecated,errorMessage:g.localize("debugTypeNotRecognised","The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled."),patternErrorMessage:g.localize("node2NotSupported",'"node2" is no longer supported, use "node" instead and set the "protocol" attribute to "inspector".')},s.request={enum:[e],description:g.localize("debugRequest",'Request type of configuration. Can be "launch" or "attach".')};for(const a in t.common.properties)s[a]={$ref:`#/definitions/common/properties/${a}`};Object.keys(s).forEach(a=>{P.applyDeprecatedVariableMessage(s[a])}),t[r]={...i},t[n]={type:"object",additionalProperties:!1,properties:C(s,a=>a!=="type"&&a!=="request"&&a!=="name")};const o={...i};return o.properties={...s,windows:{$ref:`#/definitions/${n}`,description:g.localize("debugWindowsConfiguration","Windows specific launch configuration attributes.")},osx:{$ref:`#/definitions/${n}`,description:g.localize("debugOSXConfiguration","OS X specific launch configuration attributes.")},linux:{$ref:`#/definitions/${n}`,description:g.localize("debugLinuxConfiguration","Linux specific launch configuration attributes.")}},o}):null}};b=l([d(3,x),d(4,I),d(5,M),d(6,W),d(7,$),d(8,D)],b);export{b as Debugger};
