import{URI as a}from"../../../../base/common/uri.js";import*as e from"../../../../nls.js";import{RawContextKey as n}from"../../../../platform/contextkey/common/contextkey.js";import{createDecorator as d}from"../../../../platform/instantiation/common/instantiation.js";const h="workbench.view.debug",x="workbench.debug.variablesView",v="workbench.debug.watchExpressionsView",P="workbench.debug.callStackView",C="workbench.debug.loadedScriptsView",k="workbench.debug.breakPointsView",R="workbench.debug.disassemblyView",A="workbench.panel.repl",_="workbench.panel.repl.view",w=new n("debugType",void 0,{type:"string",description:e.localize("debugType","Debug type of the active debug session. For example 'python'.")}),B=new n("debugConfigurationType",void 0,{type:"string",description:e.localize("debugConfigurationType","Debug type of the selected launch configuration. For example 'python'.")}),O=new n("debugState","inactive",{type:"string",description:e.localize("debugState","State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'.")}),l="debugUx",N=new n(l,"default",{type:"string",description:e.localize("debugUX","Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet.")}),L=new n("hasDebugged",!1,{type:"boolean",description:e.localize("hasDebugged","True when a debug session has been started at least once, false otherwise.")}),M=new n("inDebugMode",!1,{type:"boolean",description:e.localize("inDebugMode","True when debugging, false otherwise.")}),F=new n("inDebugRepl",!1,{type:"boolean",description:e.localize("inDebugRepl","True when focus is in the debug console, false otherwise.")}),z=new n("breakpointWidgetVisible",!1,{type:"boolean",description:e.localize("breakpointWidgetVisibile","True when breakpoint editor zone widget is visible, false otherwise.")}),U=new n("inBreakpointWidget",!1,{type:"boolean",description:e.localize("inBreakpointWidget","True when focus is in the breakpoint editor zone widget, false otherwise.")}),V=new n("breakpointsFocused",!0,{type:"boolean",description:e.localize("breakpointsFocused","True when the BREAKPOINTS view is focused, false otherwise.")}),X=new n("watchExpressionsFocused",!0,{type:"boolean",description:e.localize("watchExpressionsFocused","True when the WATCH view is focused, false otherwise.")}),W=new n("watchExpressionsExist",!1,{type:"boolean",description:e.localize("watchExpressionsExist","True when at least one watch expression exists, false otherwise.")}),G=new n("variablesFocused",!0,{type:"boolean",description:e.localize("variablesFocused","True when the VARIABLES views is focused, false otherwise")}),H=new n("expressionSelected",!1,{type:"boolean",description:e.localize("expressionSelected","True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise.")}),K=new n("breakpointInputFocused",!1,{type:"boolean",description:e.localize("breakpointInputFocused","True when the input box has focus in the BREAKPOINTS view.")}),j=new n("callStackItemType",void 0,{type:"string",description:e.localize("callStackItemType","Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'")}),q=new n("callStackSessionIsAttach",!1,{type:"boolean",description:e.localize("callStackSessionIsAttach","True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view.")}),Y=new n("callStackItemStopped",!1,{type:"boolean",description:e.localize("callStackItemStopped","True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view.")}),J=new n("callStackSessionHasOneThread",!1,{type:"boolean",description:e.localize("callStackSessionHasOneThread","True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view.")}),Q=new n("watchItemType",void 0,{type:"string",description:e.localize("watchItemType","Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'")}),Z=new n("canViewMemory",void 0,{type:"boolean",description:e.localize("canViewMemory","Indicates whether the item in the view has an associated memory refrence.")}),$=new n("breakpointItemType",void 0,{type:"string",description:e.localize("breakpointItemType","Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'")}),ee=new n("breakpointItemBytes",void 0,{type:"boolean",description:e.localize("breakpointItemIsDataBytes","Whether the breakpoint item is a data breakpoint on a byte range.")}),ne=new n("breakpointHasModes",!1,{type:"boolean",description:e.localize("breakpointHasModes","Whether the breakpoint has multiple modes it can switch to.")}),oe=new n("breakpointSupportsCondition",!1,{type:"boolean",description:e.localize("breakpointSupportsCondition","True when the focused breakpoint supports conditions.")}),te=new n("loadedScriptsSupported",!1,{type:"boolean",description:e.localize("loadedScriptsSupported","True when the focused sessions supports the LOADED SCRIPTS view")}),re=new n("loadedScriptsItemType",void 0,{type:"string",description:e.localize("loadedScriptsItemType","Represents the item type of the focused element in the LOADED SCRIPTS view.")}),ie=new n("focusedSessionIsAttach",!1,{type:"boolean",description:e.localize("focusedSessionIsAttach","True when the focused session is 'attach'.")}),se=new n("focusedSessionIsNoDebug",!1,{type:"boolean",description:e.localize("focusedSessionIsNoDebug","True when the focused session is run without debugging.")}),ae=new n("stepBackSupported",!1,{type:"boolean",description:e.localize("stepBackSupported","True when the focused session supports 'stepBack' requests.")}),de=new n("restartFrameSupported",!1,{type:"boolean",description:e.localize("restartFrameSupported","True when the focused session supports 'restartFrame' requests.")}),le=new n("stackFrameSupportsRestart",!1,{type:"boolean",description:e.localize("stackFrameSupportsRestart","True when the focused stack frame supports 'restartFrame'.")}),pe=new n("jumpToCursorSupported",!1,{type:"boolean",description:e.localize("jumpToCursorSupported","True when the focused session supports 'jumpToCursor' request.")}),ue=new n("stepIntoTargetsSupported",!1,{type:"boolean",description:e.localize("stepIntoTargetsSupported","True when the focused session supports 'stepIntoTargets' request.")}),ce=new n("breakpointsExist",!1,{type:"boolean",description:e.localize("breakpointsExist","True when at least one breakpoint exists.")}),ge=new n("debuggersAvailable",!1,{type:"boolean",description:e.localize("debuggersAvailable","True when there is at least one debug extensions active.")}),be=new n("debugExtensionAvailable",!0,{type:"boolean",description:e.localize("debugExtensionsAvailable","True when there is at least one debug extension installed and enabled.")}),me=new n("debugProtocolVariableMenuContext",void 0,{type:"string",description:e.localize("debugProtocolVariableMenuContext","Represents the context the debug adapter sets on the focused variable in the VARIABLES view.")}),Ie=new n("debugSetVariableSupported",!1,{type:"boolean",description:e.localize("debugSetVariableSupported","True when the focused session supports 'setVariable' request.")}),fe=new n("debugSetDataBreakpointAddressSupported",!1,{type:"boolean",description:e.localize("debugSetDataBreakpointAddressSupported","True when the focused session supports 'getBreakpointInfo' request on an address.")}),Ee=new n("debugSetExpressionSupported",!1,{type:"boolean",description:e.localize("debugSetExpressionSupported","True when the focused session supports 'setExpression' request.")}),ye=new n("breakWhenValueChangesSupported",!1,{type:"boolean",description:e.localize("breakWhenValueChangesSupported","True when the focused session supports to break when value changes.")}),Se=new n("breakWhenValueIsAccessedSupported",!1,{type:"boolean",description:e.localize("breakWhenValueIsAccessedSupported","True when the focused breakpoint supports to break when value is accessed.")}),Te=new n("breakWhenValueIsReadSupported",!1,{type:"boolean",description:e.localize("breakWhenValueIsReadSupported","True when the focused breakpoint supports to break when value is read.")}),De=new n("terminateDebuggeeSupported",!1,{type:"boolean",description:e.localize("terminateDebuggeeSupported","True when the focused session supports the terminate debuggee capability.")}),he=new n("suspendDebuggeeSupported",!1,{type:"boolean",description:e.localize("suspendDebuggeeSupported","True when the focused session supports the suspend debuggee capability.")}),xe=new n("variableEvaluateNamePresent",!1,{type:"boolean",description:e.localize("variableEvaluateNamePresent","True when the focused variable has an 'evalauteName' field set.")}),ve=new n("variableIsReadonly",!1,{type:"boolean",description:e.localize("variableIsReadonly","True when the focused variable is read-only.")}),Pe=new n("variableValue",!1,{type:"string",description:e.localize("variableValue","Value of the variable, present for debug visualization clauses.")}),Ce=new n("variableType",!1,{type:"string",description:e.localize("variableType","Type of the variable, present for debug visualization clauses.")}),ke=new n("variableInterfaces",!1,{type:"array",description:e.localize("variableInterfaces","Any interfaces or contracts that the variable satisfies, present for debug visualization clauses.")}),Re=new n("variableName",!1,{type:"string",description:e.localize("variableName","Name of the variable, present for debug visualization clauses.")}),Ae=new n("variableLanguage",!1,{type:"string",description:e.localize("variableLanguage","Language of the variable source, present for debug visualization clauses.")}),_e=new n("variableExtensionId",!1,{type:"string",description:e.localize("variableExtensionId","Extension ID of the variable source, present for debug visualization clauses.")}),we=new n("exceptionWidgetVisible",!1,{type:"boolean",description:e.localize("exceptionWidgetVisible","True when the exception widget is visible.")}),Be=new n("multiSessionRepl",!1,{type:"boolean",description:e.localize("multiSessionRepl","True when there is more than 1 debug console.")}),Oe=new n("multiSessionDebug",!1,{type:"boolean",description:e.localize("multiSessionDebug","True when there is more than 1 active debug session.")}),Ne=new n("disassembleRequestSupported",!1,{type:"boolean",description:e.localize("disassembleRequestSupported","True when the focused sessions supports disassemble request.")}),Le=new n("disassemblyViewFocus",!1,{type:"boolean",description:e.localize("disassemblyViewFocus","True when the Disassembly View is focused.")}),Me=new n("languageSupportsDisassembleRequest",!1,{type:"boolean",description:e.localize("languageSupportsDisassembleRequest","True when the language in the current editor supports disassemble request.")}),Fe=new n("focusedStackFrameHasInstructionReference",!1,{type:"boolean",description:e.localize("focusedStackFrameHasInstructionReference","True when the focused stack frame has instruction pointer reference.")}),ze=i=>e.localize("debuggerDisabled","Configured debug type '{0}' is installed but not supported in this environment.",i),Ue="editor.contrib.debug",Ve="editor.contrib.breakpoint",Xe="debug",We={enum:["neverOpen","openOnSessionStart","openOnFirstSessionStart"],default:"openOnFirstSessionStart",description:e.localize("internalConsoleOptions","Controls when the internal Debug Console should open.")};var p=(r=>(r[r.Inactive=0]="Inactive",r[r.Initializing=1]="Initializing",r[r.Stopped=2]="Stopped",r[r.Running=3]="Running",r))(p||{});function Ge(i){switch(i){case 1:return"initializing";case 2:return"stopped";case 3:return"running";default:return"inactive"}}var u=(o=>(o[o.Valid=0]="Valid",o[o.Unreadable=1]="Unreadable",o[o.Error=2]="Error",o))(u||{});const He="vscode-debug-memory";function Ke(i){const s=i.presentationHint??i.source.presentationHint;return s==="deemphasize"||s==="subtle"}var c=(t=>(t[t.Variable=0]="Variable",t[t.Address=1]="Address",t))(c||{}),g=(t=>(t[t.Initial=1]="Initial",t[t.Dynamic=2]="Dynamic",t))(g||{}),b=(s=>(s.UnverifiedBreakpoints="unverifiedBreakpoints",s))(b||{});const je=d("debugService");var m=(r=>(r[r.CONDITION=0]="CONDITION",r[r.HIT_COUNT=1]="HIT_COUNT",r[r.LOG_MESSAGE=2]="LOG_MESSAGE",r[r.TRIGGER_POINT=3]="TRIGGER_POINT",r))(m||{}),I=(t=>(t[t.Command=0]="Command",t[t.Tree=1]="Tree",t))(I||{}),f=(o=>(o[o.None=0]="None",o[o.Collapsed=1]="Collapsed",o[o.Expanded=2]="Expanded",o))(f||{}),E;(t=>(t.deserialize=o=>o,t.serialize=o=>o))(E||={});var y;(t=>(t.deserialize=o=>({id:o.id,name:o.name,iconPath:o.iconPath&&{light:a.revive(o.iconPath.light),dark:a.revive(o.iconPath.dark)},iconClass:o.iconClass,visualization:o.visualization}),t.serialize=o=>o))(y||={});export{k as BREAKPOINTS_VIEW_ID,Ve as BREAKPOINT_EDITOR_CONTRIBUTION_ID,m as BreakpointWidgetContext,P as CALLSTACK_VIEW_ID,ce as CONTEXT_BREAKPOINTS_EXIST,V as CONTEXT_BREAKPOINTS_FOCUSED,ne as CONTEXT_BREAKPOINT_HAS_MODES,K as CONTEXT_BREAKPOINT_INPUT_FOCUSED,ee as CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES,$ as CONTEXT_BREAKPOINT_ITEM_TYPE,oe as CONTEXT_BREAKPOINT_SUPPORTS_CONDITION,z as CONTEXT_BREAKPOINT_WIDGET_VISIBLE,ye as CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED,Se as CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED,Te as CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED,Y as CONTEXT_CALLSTACK_ITEM_STOPPED,j as CONTEXT_CALLSTACK_ITEM_TYPE,J as CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD,q as CONTEXT_CALLSTACK_SESSION_IS_ATTACH,Z as CONTEXT_CAN_VIEW_MEMORY,ge as CONTEXT_DEBUGGERS_AVAILABLE,B as CONTEXT_DEBUG_CONFIGURATION_TYPE,be as CONTEXT_DEBUG_EXTENSION_AVAILABLE,me as CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT,O as CONTEXT_DEBUG_STATE,w as CONTEXT_DEBUG_TYPE,N as CONTEXT_DEBUG_UX,l as CONTEXT_DEBUG_UX_KEY,Ne as CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED,Le as CONTEXT_DISASSEMBLY_VIEW_FOCUS,we as CONTEXT_EXCEPTION_WIDGET_VISIBLE,H as CONTEXT_EXPRESSION_SELECTED,ie as CONTEXT_FOCUSED_SESSION_IS_ATTACH,se as CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG,Fe as CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE,L as CONTEXT_HAS_DEBUGGED,U as CONTEXT_IN_BREAKPOINT_WIDGET,M as CONTEXT_IN_DEBUG_MODE,F as CONTEXT_IN_DEBUG_REPL,pe as CONTEXT_JUMP_TO_CURSOR_SUPPORTED,Me as CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST,re as CONTEXT_LOADED_SCRIPTS_ITEM_TYPE,te as CONTEXT_LOADED_SCRIPTS_SUPPORTED,Oe as CONTEXT_MULTI_SESSION_DEBUG,Be as CONTEXT_MULTI_SESSION_REPL,de as CONTEXT_RESTART_FRAME_SUPPORTED,fe as CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED,Ee as CONTEXT_SET_EXPRESSION_SUPPORTED,Ie as CONTEXT_SET_VARIABLE_SUPPORTED,le as CONTEXT_STACK_FRAME_SUPPORTS_RESTART,ae as CONTEXT_STEP_BACK_SUPPORTED,ue as CONTEXT_STEP_INTO_TARGETS_SUPPORTED,he as CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED,De as CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED,G as CONTEXT_VARIABLES_FOCUSED,xe as CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT,_e as CONTEXT_VARIABLE_EXTENSIONID,ke as CONTEXT_VARIABLE_INTERFACES,ve as CONTEXT_VARIABLE_IS_READONLY,Ae as CONTEXT_VARIABLE_LANGUAGE,Re as CONTEXT_VARIABLE_NAME,Ce as CONTEXT_VARIABLE_TYPE,Pe as CONTEXT_VARIABLE_VALUE,W as CONTEXT_WATCH_EXPRESSIONS_EXIST,X as CONTEXT_WATCH_EXPRESSIONS_FOCUSED,Q as CONTEXT_WATCH_ITEM_TYPE,He as DEBUG_MEMORY_SCHEME,A as DEBUG_PANEL_ID,Xe as DEBUG_SCHEME,R as DISASSEMBLY_VIEW_ID,c as DataBreakpointSetType,g as DebugConfigurationProviderTriggerKind,f as DebugTreeItemCollapsibleState,I as DebugVisualizationType,b as DebuggerString,Ue as EDITOR_CONTRIBUTION_ID,je as IDebugService,y as IDebugVisualization,E as IDebugVisualizationTreeItem,We as INTERNAL_CONSOLE_OPTIONS_SCHEMA,C as LOADED_SCRIPTS_VIEW_ID,u as MemoryRangeType,_ as REPL_VIEW_ID,p as State,x as VARIABLES_VIEW_ID,h as VIEWLET_ID,v as WATCH_VIEW_ID,ze as debuggerDisabledMessage,Ge as getStateLabel,Ke as isFrameDeemphasized};
