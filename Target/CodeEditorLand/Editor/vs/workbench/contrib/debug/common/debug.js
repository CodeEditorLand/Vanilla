import"../../../../../vs/base/common/actions.js";import"../../../../../vs/base/common/buffer.js";import"../../../../../vs/base/common/cancellation.js";import"../../../../../vs/base/common/color.js";import"../../../../../vs/base/common/event.js";import"../../../../../vs/base/common/jsonSchema.js";import"../../../../../vs/base/common/lifecycle.js";import"../../../../../vs/base/common/severity.js";import{URI as s}from"../../../../../vs/base/common/uri.js";import"../../../../../vs/editor/common/core/position.js";import"../../../../../vs/editor/common/core/range.js";import"../../../../../vs/editor/common/editorCommon.js";import"../../../../../vs/editor/common/model.js";import*as e from"../../../../../vs/nls.js";import"../../../../../vs/platform/configuration/common/configuration.js";import{RawContextKey as n}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{createDecorator as d}from"../../../../../vs/platform/instantiation/common/instantiation.js";import"../../../../../vs/platform/telemetry/common/telemetry.js";import"../../../../../vs/platform/workspace/common/workspace.js";import"../../../../../vs/workbench/common/editor.js";import"../../../../../vs/workbench/contrib/debug/common/debugCompoundRoot.js";import"../../../../../vs/workbench/contrib/debug/common/debugModel.js";import"../../../../../vs/workbench/contrib/debug/common/debugSource.js";import"../../../../../vs/workbench/contrib/tasks/common/tasks.js";import"../../../../../vs/workbench/contrib/testing/common/testResult.js";import"../../../../../vs/workbench/services/editor/common/editorService.js";const fe="workbench.view.debug",Ee="workbench.debug.variablesView",ye="workbench.debug.watchExpressionsView",Se="workbench.debug.callStackView",Te="workbench.debug.loadedScriptsView",De="workbench.debug.breakPointsView",he="workbench.debug.disassemblyView",xe="workbench.panel.repl",ve="workbench.panel.repl.view",Pe=new n("debugType",void 0,{type:"string",description:e.localize("debugType","Debug type of the active debug session. For example 'python'.")}),Ce=new n("debugConfigurationType",void 0,{type:"string",description:e.localize("debugConfigurationType","Debug type of the selected launch configuration. For example 'python'.")}),ke=new n("debugState","inactive",{type:"string",description:e.localize("debugState","State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'.")}),l="debugUx",Re=new n(l,"default",{type:"string",description:e.localize("debugUX","Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet.")}),Ae=new n("hasDebugged",!1,{type:"boolean",description:e.localize("hasDebugged","True when a debug session has been started at least once, false otherwise.")}),_e=new n("inDebugMode",!1,{type:"boolean",description:e.localize("inDebugMode","True when debugging, false otherwise.")}),we=new n("inDebugRepl",!1,{type:"boolean",description:e.localize("inDebugRepl","True when focus is in the debug console, false otherwise.")}),Be=new n("breakpointWidgetVisible",!1,{type:"boolean",description:e.localize("breakpointWidgetVisibile","True when breakpoint editor zone widget is visible, false otherwise.")}),Oe=new n("inBreakpointWidget",!1,{type:"boolean",description:e.localize("inBreakpointWidget","True when focus is in the breakpoint editor zone widget, false otherwise.")}),Ne=new n("breakpointsFocused",!0,{type:"boolean",description:e.localize("breakpointsFocused","True when the BREAKPOINTS view is focused, false otherwise.")}),Le=new n("watchExpressionsFocused",!0,{type:"boolean",description:e.localize("watchExpressionsFocused","True when the WATCH view is focused, false otherwise.")}),Fe=new n("watchExpressionsExist",!1,{type:"boolean",description:e.localize("watchExpressionsExist","True when at least one watch expression exists, false otherwise.")}),Me=new n("variablesFocused",!0,{type:"boolean",description:e.localize("variablesFocused","True when the VARIABLES views is focused, false otherwise")}),ze=new n("expressionSelected",!1,{type:"boolean",description:e.localize("expressionSelected","True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise.")}),Ue=new n("breakpointInputFocused",!1,{type:"boolean",description:e.localize("breakpointInputFocused","True when the input box has focus in the BREAKPOINTS view.")}),Ve=new n("callStackItemType",void 0,{type:"string",description:e.localize("callStackItemType","Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'")}),Xe=new n("callStackSessionIsAttach",!1,{type:"boolean",description:e.localize("callStackSessionIsAttach","True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view.")}),We=new n("callStackItemStopped",!1,{type:"boolean",description:e.localize("callStackItemStopped","True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view.")}),Ge=new n("callStackSessionHasOneThread",!1,{type:"boolean",description:e.localize("callStackSessionHasOneThread","True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view.")}),He=new n("watchItemType",void 0,{type:"string",description:e.localize("watchItemType","Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'")}),Ke=new n("canViewMemory",void 0,{type:"boolean",description:e.localize("canViewMemory","Indicates whether the item in the view has an associated memory refrence.")}),qe=new n("breakpointItemType",void 0,{type:"string",description:e.localize("breakpointItemType","Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'")}),Ye=new n("breakpointItemBytes",void 0,{type:"boolean",description:e.localize("breakpointItemIsDataBytes","Whether the breakpoint item is a data breakpoint on a byte range.")}),je=new n("breakpointHasModes",!1,{type:"boolean",description:e.localize("breakpointHasModes","Whether the breakpoint has multiple modes it can switch to.")}),Je=new n("breakpointSupportsCondition",!1,{type:"boolean",description:e.localize("breakpointSupportsCondition","True when the focused breakpoint supports conditions.")}),Qe=new n("loadedScriptsSupported",!1,{type:"boolean",description:e.localize("loadedScriptsSupported","True when the focused sessions supports the LOADED SCRIPTS view")}),Ze=new n("loadedScriptsItemType",void 0,{type:"string",description:e.localize("loadedScriptsItemType","Represents the item type of the focused element in the LOADED SCRIPTS view.")}),$e=new n("focusedSessionIsAttach",!1,{type:"boolean",description:e.localize("focusedSessionIsAttach","True when the focused session is 'attach'.")}),en=new n("focusedSessionIsNoDebug",!1,{type:"boolean",description:e.localize("focusedSessionIsNoDebug","True when the focused session is run without debugging.")}),nn=new n("stepBackSupported",!1,{type:"boolean",description:e.localize("stepBackSupported","True when the focused session supports 'stepBack' requests.")}),on=new n("restartFrameSupported",!1,{type:"boolean",description:e.localize("restartFrameSupported","True when the focused session supports 'restartFrame' requests.")}),tn=new n("stackFrameSupportsRestart",!1,{type:"boolean",description:e.localize("stackFrameSupportsRestart","True when the focused stack frame supports 'restartFrame'.")}),rn=new n("jumpToCursorSupported",!1,{type:"boolean",description:e.localize("jumpToCursorSupported","True when the focused session supports 'jumpToCursor' request.")}),an=new n("stepIntoTargetsSupported",!1,{type:"boolean",description:e.localize("stepIntoTargetsSupported","True when the focused session supports 'stepIntoTargets' request.")}),sn=new n("breakpointsExist",!1,{type:"boolean",description:e.localize("breakpointsExist","True when at least one breakpoint exists.")}),dn=new n("debuggersAvailable",!1,{type:"boolean",description:e.localize("debuggersAvailable","True when there is at least one debug extensions active.")}),ln=new n("debugExtensionAvailable",!0,{type:"boolean",description:e.localize("debugExtensionsAvailable","True when there is at least one debug extension installed and enabled.")}),un=new n("debugProtocolVariableMenuContext",void 0,{type:"string",description:e.localize("debugProtocolVariableMenuContext","Represents the context the debug adapter sets on the focused variable in the VARIABLES view.")}),pn=new n("debugSetVariableSupported",!1,{type:"boolean",description:e.localize("debugSetVariableSupported","True when the focused session supports 'setVariable' request.")}),cn=new n("debugSetDataBreakpointAddressSupported",!1,{type:"boolean",description:e.localize("debugSetDataBreakpointAddressSupported","True when the focused session supports 'getBreakpointInfo' request on an address.")}),gn=new n("debugSetExpressionSupported",!1,{type:"boolean",description:e.localize("debugSetExpressionSupported","True when the focused session supports 'setExpression' request.")}),bn=new n("breakWhenValueChangesSupported",!1,{type:"boolean",description:e.localize("breakWhenValueChangesSupported","True when the focused session supports to break when value changes.")}),mn=new n("breakWhenValueIsAccessedSupported",!1,{type:"boolean",description:e.localize("breakWhenValueIsAccessedSupported","True when the focused breakpoint supports to break when value is accessed.")}),In=new n("breakWhenValueIsReadSupported",!1,{type:"boolean",description:e.localize("breakWhenValueIsReadSupported","True when the focused breakpoint supports to break when value is read.")}),fn=new n("terminateDebuggeeSupported",!1,{type:"boolean",description:e.localize("terminateDebuggeeSupported","True when the focused session supports the terminate debuggee capability.")}),En=new n("suspendDebuggeeSupported",!1,{type:"boolean",description:e.localize("suspendDebuggeeSupported","True when the focused session supports the suspend debuggee capability.")}),yn=new n("variableEvaluateNamePresent",!1,{type:"boolean",description:e.localize("variableEvaluateNamePresent","True when the focused variable has an 'evalauteName' field set.")}),Sn=new n("variableIsReadonly",!1,{type:"boolean",description:e.localize("variableIsReadonly","True when the focused variable is read-only.")}),Tn=new n("variableValue",!1,{type:"string",description:e.localize("variableValue","Value of the variable, present for debug visualization clauses.")}),Dn=new n("variableType",!1,{type:"string",description:e.localize("variableType","Type of the variable, present for debug visualization clauses.")}),hn=new n("variableInterfaces",!1,{type:"array",description:e.localize("variableInterfaces","Any interfaces or contracts that the variable satisfies, present for debug visualization clauses.")}),xn=new n("variableName",!1,{type:"string",description:e.localize("variableName","Name of the variable, present for debug visualization clauses.")}),vn=new n("variableLanguage",!1,{type:"string",description:e.localize("variableLanguage","Language of the variable source, present for debug visualization clauses.")}),Pn=new n("variableExtensionId",!1,{type:"string",description:e.localize("variableExtensionId","Extension ID of the variable source, present for debug visualization clauses.")}),Cn=new n("exceptionWidgetVisible",!1,{type:"boolean",description:e.localize("exceptionWidgetVisible","True when the exception widget is visible.")}),kn=new n("multiSessionRepl",!1,{type:"boolean",description:e.localize("multiSessionRepl","True when there is more than 1 debug console.")}),Rn=new n("multiSessionDebug",!1,{type:"boolean",description:e.localize("multiSessionDebug","True when there is more than 1 active debug session.")}),An=new n("disassembleRequestSupported",!1,{type:"boolean",description:e.localize("disassembleRequestSupported","True when the focused sessions supports disassemble request.")}),_n=new n("disassemblyViewFocus",!1,{type:"boolean",description:e.localize("disassemblyViewFocus","True when the Disassembly View is focused.")}),wn=new n("languageSupportsDisassembleRequest",!1,{type:"boolean",description:e.localize("languageSupportsDisassembleRequest","True when the language in the current editor supports disassemble request.")}),Bn=new n("focusedStackFrameHasInstructionReference",!1,{type:"boolean",description:e.localize("focusedStackFrameHasInstructionReference","True when the focused stack frame has instruction pointer reference.")}),On=i=>e.localize("debuggerDisabled","Configured debug type '{0}' is installed but not supported in this environment.",i),Nn="editor.contrib.debug",Ln="editor.contrib.breakpoint",Fn="debug",Mn={enum:["neverOpen","openOnSessionStart","openOnFirstSessionStart"],default:"openOnFirstSessionStart",description:e.localize("internalConsoleOptions","Controls when the internal Debug Console should open.")};var u=(r=>(r[r.Inactive=0]="Inactive",r[r.Initializing=1]="Initializing",r[r.Stopped=2]="Stopped",r[r.Running=3]="Running",r))(u||{});function zn(i){switch(i){case 1:return"initializing";case 2:return"stopped";case 3:return"running";default:return"inactive"}}var p=(o=>(o[o.Valid=0]="Valid",o[o.Unreadable=1]="Unreadable",o[o.Error=2]="Error",o))(p||{});const Un="vscode-debug-memory";function Vn(i){const a=i.presentationHint??i.source.presentationHint;return a==="deemphasize"||a==="subtle"}var c=(t=>(t[t.Variable=0]="Variable",t[t.Address=1]="Address",t))(c||{}),g=(t=>(t[t.Initial=1]="Initial",t[t.Dynamic=2]="Dynamic",t))(g||{}),b=(a=>(a.UnverifiedBreakpoints="unverifiedBreakpoints",a))(b||{});const Xn=d("debugService");var m=(r=>(r[r.CONDITION=0]="CONDITION",r[r.HIT_COUNT=1]="HIT_COUNT",r[r.LOG_MESSAGE=2]="LOG_MESSAGE",r[r.TRIGGER_POINT=3]="TRIGGER_POINT",r))(m||{}),I=(t=>(t[t.Command=0]="Command",t[t.Tree=1]="Tree",t))(I||{}),f=(o=>(o[o.None=0]="None",o[o.Collapsed=1]="Collapsed",o[o.Expanded=2]="Expanded",o))(f||{}),E;(t=>(t.deserialize=o=>o,t.serialize=o=>o))(E||={});var y;(t=>(t.deserialize=o=>({id:o.id,name:o.name,iconPath:o.iconPath&&{light:s.revive(o.iconPath.light),dark:s.revive(o.iconPath.dark)},iconClass:o.iconClass,visualization:o.visualization}),t.serialize=o=>o))(y||={});export{De as BREAKPOINTS_VIEW_ID,Ln as BREAKPOINT_EDITOR_CONTRIBUTION_ID,m as BreakpointWidgetContext,Se as CALLSTACK_VIEW_ID,sn as CONTEXT_BREAKPOINTS_EXIST,Ne as CONTEXT_BREAKPOINTS_FOCUSED,je as CONTEXT_BREAKPOINT_HAS_MODES,Ue as CONTEXT_BREAKPOINT_INPUT_FOCUSED,Ye as CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES,qe as CONTEXT_BREAKPOINT_ITEM_TYPE,Je as CONTEXT_BREAKPOINT_SUPPORTS_CONDITION,Be as CONTEXT_BREAKPOINT_WIDGET_VISIBLE,bn as CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED,mn as CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED,In as CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED,We as CONTEXT_CALLSTACK_ITEM_STOPPED,Ve as CONTEXT_CALLSTACK_ITEM_TYPE,Ge as CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD,Xe as CONTEXT_CALLSTACK_SESSION_IS_ATTACH,Ke as CONTEXT_CAN_VIEW_MEMORY,dn as CONTEXT_DEBUGGERS_AVAILABLE,Ce as CONTEXT_DEBUG_CONFIGURATION_TYPE,ln as CONTEXT_DEBUG_EXTENSION_AVAILABLE,un as CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT,ke as CONTEXT_DEBUG_STATE,Pe as CONTEXT_DEBUG_TYPE,Re as CONTEXT_DEBUG_UX,l as CONTEXT_DEBUG_UX_KEY,An as CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED,_n as CONTEXT_DISASSEMBLY_VIEW_FOCUS,Cn as CONTEXT_EXCEPTION_WIDGET_VISIBLE,ze as CONTEXT_EXPRESSION_SELECTED,$e as CONTEXT_FOCUSED_SESSION_IS_ATTACH,en as CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG,Bn as CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE,Ae as CONTEXT_HAS_DEBUGGED,Oe as CONTEXT_IN_BREAKPOINT_WIDGET,_e as CONTEXT_IN_DEBUG_MODE,we as CONTEXT_IN_DEBUG_REPL,rn as CONTEXT_JUMP_TO_CURSOR_SUPPORTED,wn as CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST,Ze as CONTEXT_LOADED_SCRIPTS_ITEM_TYPE,Qe as CONTEXT_LOADED_SCRIPTS_SUPPORTED,Rn as CONTEXT_MULTI_SESSION_DEBUG,kn as CONTEXT_MULTI_SESSION_REPL,on as CONTEXT_RESTART_FRAME_SUPPORTED,cn as CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED,gn as CONTEXT_SET_EXPRESSION_SUPPORTED,pn as CONTEXT_SET_VARIABLE_SUPPORTED,tn as CONTEXT_STACK_FRAME_SUPPORTS_RESTART,nn as CONTEXT_STEP_BACK_SUPPORTED,an as CONTEXT_STEP_INTO_TARGETS_SUPPORTED,En as CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED,fn as CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED,Me as CONTEXT_VARIABLES_FOCUSED,yn as CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT,Pn as CONTEXT_VARIABLE_EXTENSIONID,hn as CONTEXT_VARIABLE_INTERFACES,Sn as CONTEXT_VARIABLE_IS_READONLY,vn as CONTEXT_VARIABLE_LANGUAGE,xn as CONTEXT_VARIABLE_NAME,Dn as CONTEXT_VARIABLE_TYPE,Tn as CONTEXT_VARIABLE_VALUE,Fe as CONTEXT_WATCH_EXPRESSIONS_EXIST,Le as CONTEXT_WATCH_EXPRESSIONS_FOCUSED,He as CONTEXT_WATCH_ITEM_TYPE,Un as DEBUG_MEMORY_SCHEME,xe as DEBUG_PANEL_ID,Fn as DEBUG_SCHEME,he as DISASSEMBLY_VIEW_ID,c as DataBreakpointSetType,g as DebugConfigurationProviderTriggerKind,f as DebugTreeItemCollapsibleState,I as DebugVisualizationType,b as DebuggerString,Nn as EDITOR_CONTRIBUTION_ID,Xn as IDebugService,y as IDebugVisualization,E as IDebugVisualizationTreeItem,Mn as INTERNAL_CONSOLE_OPTIONS_SCHEMA,Te as LOADED_SCRIPTS_VIEW_ID,p as MemoryRangeType,ve as REPL_VIEW_ID,u as State,Ee as VARIABLES_VIEW_ID,fe as VIEWLET_ID,ye as WATCH_VIEW_ID,On as debuggerDisabledMessage,zn as getStateLabel,Vn as isFrameDeemphasized};
