{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugTelemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { AdapterEndEvent, IDebugModel, IDebugSession } from \"./debug.js\";\nimport type { Debugger } from \"./debugger.js\";\n\nexport class DebugTelemetry {\n\tconstructor(\n\t\tprivate readonly model: IDebugModel,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) { }\n\n\tlogDebugSessionStart(dbgr: Debugger, launchJsonExists: boolean) {\n\t\tconst extension = dbgr.getMainExtensionDescriptor();\n\t\t/* __GDPR__\n\t\t\t\"debugSessionStart\" : {\n\t\t\t\t\"owner\": \"connor4312\",\n\t\t\t\t\"type\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"exceptionBreakpoints\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"extensionName\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"isBuiltin\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true},\n\t\t\t\t\"launchJsonExists\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(\"debugSessionStart\", {\n\t\t\ttype: dbgr.type,\n\t\t\tbreakpointCount: this.model.getBreakpoints().length,\n\t\t\texceptionBreakpoints: this.model.getExceptionBreakpoints(),\n\t\t\twatchExpressionsCount: this.model.getWatchExpressions().length,\n\t\t\textensionName: extension.identifier.value,\n\t\t\tisBuiltin: extension.isBuiltin,\n\t\t\tlaunchJsonExists,\n\t\t});\n\t}\n\n\tlogDebugSessionStop(\n\t\tsession: IDebugSession,\n\t\tadapterExitEvent: AdapterEndEvent,\n\t) {\n\t\tconst breakpoints = this.model.getBreakpoints();\n\n\t\t/* __GDPR__\n\t\t\t\"debugSessionStop\" : {\n\t\t\t\t\"owner\": \"connor4312\",\n\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"sessionLengthInSeconds\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(\"debugSessionStop\", {\n\t\t\ttype: session && session.configuration.type,\n\t\t\tsuccess:\n\t\t\t\tadapterExitEvent.emittedStopped || breakpoints.length === 0,\n\t\t\tsessionLengthInSeconds: adapterExitEvent.sessionLengthInSeconds,\n\t\t\tbreakpointCount: breakpoints.length,\n\t\t\twatchExpressionsCount: this.model.getWatchExpressions().length,\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAI3B,IAAM,iBAAN,MAAqB;AAAA,EAC3B,YACkB,OACmB,kBACnC;AAFgB;AACmB;AAAA,EACjC;AAAA,EAbL,OAS4B;AAAA;AAAA;AAAA,EAM3B,qBAAqB,MAAgB,kBAA2B;AAC/D,UAAM,YAAY,KAAK,2BAA2B;AAalD,SAAK,iBAAiB,UAAU,qBAAqB;AAAA,MACpD,MAAM,KAAK;AAAA,MACX,iBAAiB,KAAK,MAAM,eAAe,EAAE;AAAA,MAC7C,sBAAsB,KAAK,MAAM,wBAAwB;AAAA,MACzD,uBAAuB,KAAK,MAAM,oBAAoB,EAAE;AAAA,MACxD,eAAe,UAAU,WAAW;AAAA,MACpC,WAAW,UAAU;AAAA,MACrB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,oBACC,SACA,kBACC;AACD,UAAM,cAAc,KAAK,MAAM,eAAe;AAY9C,SAAK,iBAAiB,UAAU,oBAAoB;AAAA,MACnD,MAAM,WAAW,QAAQ,cAAc;AAAA,MACvC,SACC,iBAAiB,kBAAkB,YAAY,WAAW;AAAA,MAC3D,wBAAwB,iBAAiB;AAAA,MACzC,iBAAiB,YAAY;AAAA,MAC7B,uBAAuB,KAAK,MAAM,oBAAoB,EAAE;AAAA,IACzD,CAAC;AAAA,EACF;AACD;AAxDa,iBAAN;AAAA,EAGJ;AAAA,GAHU;",
  "names": []
}
