{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugVisualizers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport {\n\ttype IDisposable,\n\ttype IReference,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport {\n\tContextKeyExpr,\n\ttype ContextKeyExpression,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { ExtensionsRegistry } from \"../../../services/extensions/common/extensionsRegistry.js\";\nimport {\n\tCONTEXT_VARIABLE_NAME,\n\tCONTEXT_VARIABLE_TYPE,\n\tCONTEXT_VARIABLE_VALUE,\n\ttype IDebugSession,\n\ttype IDebugVisualization,\n\ttype IDebugVisualizationContext,\n\ttype IDebugVisualizationTreeItem,\n\ttype IExpression,\n\ttype IExpressionContainer,\n\ttype MainThreadDebugVisualization,\n} from \"./debug.js\";\nimport { getContextForVariable } from \"./debugContext.js\";\nimport { Scope, Variable, VisualizedExpression } from \"./debugModel.js\";\n\nexport const IDebugVisualizerService = createDecorator<IDebugVisualizerService>(\n\t\"debugVisualizerService\",\n);\n\ninterface VisualizerHandle {\n\tid: string;\n\textensionId: ExtensionIdentifier;\n\tprovideDebugVisualizers(\n\t\tcontext: IDebugVisualizationContext,\n\t\ttoken: CancellationToken,\n\t): Promise<IDebugVisualization[]>;\n\tresolveDebugVisualizer(\n\t\tviz: IDebugVisualization,\n\t\ttoken: CancellationToken,\n\t): Promise<MainThreadDebugVisualization>;\n\texecuteDebugVisualizerCommand(id: number): Promise<void>;\n\tdisposeDebugVisualizers(ids: number[]): void;\n}\n\ninterface VisualizerTreeHandle {\n\tgetTreeItem(\n\t\telement: IDebugVisualizationContext,\n\t): Promise<IDebugVisualizationTreeItem | undefined>;\n\tgetChildren(element: number): Promise<IDebugVisualizationTreeItem[]>;\n\tdisposeItem(element: number): void;\n\teditItem?(\n\t\titem: number,\n\t\tvalue: string,\n\t): Promise<IDebugVisualizationTreeItem | undefined>;\n}\n\nexport class DebugVisualizer {\n\tpublic get name() {\n\t\treturn this.viz.name;\n\t}\n\n\tpublic get iconPath() {\n\t\treturn this.viz.iconPath;\n\t}\n\n\tpublic get iconClass() {\n\t\treturn this.viz.iconClass;\n\t}\n\n\tconstructor(\n\t\tprivate readonly handle: VisualizerHandle,\n\t\tprivate readonly viz: IDebugVisualization,\n\t) {}\n\n\tpublic async resolve(token: CancellationToken) {\n\t\treturn (this.viz.visualization ??=\n\t\t\tawait this.handle.resolveDebugVisualizer(this.viz, token));\n\t}\n\n\tpublic async execute() {\n\t\tawait this.handle.executeDebugVisualizerCommand(this.viz.id);\n\t}\n}\n\nexport interface IDebugVisualizerService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Gets visualizers applicable for the given Expression.\n\t */\n\tgetApplicableFor(\n\t\texpression: IExpression,\n\t\ttoken: CancellationToken,\n\t): Promise<IReference<DebugVisualizer[]>>;\n\n\t/**\n\t * Registers a new visualizer (called from the main thread debug service)\n\t */\n\tregister(handle: VisualizerHandle): IDisposable;\n\n\t/**\n\t * Registers a new visualizer tree.\n\t */\n\tregisterTree(treeId: string, handle: VisualizerTreeHandle): IDisposable;\n\n\t/**\n\t * Sets that a certa tree should be used for the visualized node\n\t */\n\tgetVisualizedNodeFor(\n\t\ttreeId: string,\n\t\texpr: IExpression,\n\t): Promise<VisualizedExpression | undefined>;\n\n\t/**\n\t * Gets children for a visualized tree node.\n\t */\n\tgetVisualizedChildren(\n\t\tsession: IDebugSession | undefined,\n\t\ttreeId: string,\n\t\ttreeElementId: number,\n\t): Promise<IExpression[]>;\n\n\t/**\n\t * Gets children for a visualized tree node.\n\t */\n\teditTreeItem(\n\t\ttreeId: string,\n\t\titem: IDebugVisualizationTreeItem,\n\t\tnewValue: string,\n\t): Promise<void>;\n}\n\nconst emptyRef: IReference<DebugVisualizer[]> = {\n\tobject: [],\n\tdispose: () => {},\n};\n\nexport class DebugVisualizerService implements IDebugVisualizerService {\n\tpublic declare readonly _serviceBrand: undefined;\n\n\tprivate readonly handles = new Map<\n\t\t/* extId + \\0 + vizId */ string,\n\t\tVisualizerHandle\n\t>();\n\tprivate readonly trees = new Map<\n\t\t/* extId + \\0 + treeId */ string,\n\t\tVisualizerTreeHandle\n\t>();\n\tprivate readonly didActivate = new Map<string, Promise<void>>();\n\tprivate registrations: {\n\t\texpr: ContextKeyExpression;\n\t\tid: string;\n\t\textensionId: ExtensionIdentifier;\n\t}[] = [];\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tvisualizersExtensionPoint.setHandler((_, { added, removed }) => {\n\t\t\tthis.registrations = this.registrations.filter(r =>\n\t\t\t\t!removed.some(e => ExtensionIdentifier.equals(e.description.identifier, r.extensionId)));\n\t\t\tadded.forEach(e => this.processExtensionRegistration(e.description));\n\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic async getApplicableFor(\n\t\tvariable: IExpression,\n\t\ttoken: CancellationToken,\n\t): Promise<IReference<DebugVisualizer[]>> {\n\t\tif (!(variable instanceof Variable)) {\n\t\t\treturn emptyRef;\n\t\t}\n\t\tconst threadId = variable.getThreadId();\n\t\tif (threadId === undefined) {\n\t\t\t// an expression, not a variable\n\t\t\treturn emptyRef;\n\t\t}\n\n\t\tconst context = this.getVariableContext(threadId, variable);\n\t\tconst overlay = getContextForVariable(\n\t\t\tthis.contextKeyService,\n\t\t\tvariable,\n\t\t\t[\n\t\t\t\t[CONTEXT_VARIABLE_NAME.key, variable.name],\n\t\t\t\t[CONTEXT_VARIABLE_VALUE.key, variable.value],\n\t\t\t\t[CONTEXT_VARIABLE_TYPE.key, variable.type],\n\t\t\t],\n\t\t);\n\n\t\tconst maybeVisualizers = await Promise.all(\n\t\t\tthis.registrations.map(async (registration) => {\n\t\t\t\tif (!overlay.contextMatchesRules(registration.expr)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet prom = this.didActivate.get(registration.id);\n\t\t\t\tif (!prom) {\n\t\t\t\t\tprom = this.extensionService.activateByEvent(\n\t\t\t\t\t\t`onDebugVisualizer:${registration.id}`,\n\t\t\t\t\t);\n\t\t\t\t\tthis.didActivate.set(registration.id, prom);\n\t\t\t\t}\n\n\t\t\t\tawait prom;\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst handle = this.handles.get(\n\t\t\t\t\ttoKey(registration.extensionId, registration.id),\n\t\t\t\t);\n\t\t\t\treturn (\n\t\t\t\t\thandle && {\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tresult: await handle.provideDebugVisualizers(\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t),\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tconst ref = {\n\t\t\tobject: maybeVisualizers\n\t\t\t\t.filter(isDefined)\n\t\t\t\t.flatMap((v) =>\n\t\t\t\t\tv.result.map((r) => new DebugVisualizer(v.handle, r)),\n\t\t\t\t),\n\t\t\tdispose: () => {\n\t\t\t\tfor (const viz of maybeVisualizers) {\n\t\t\t\t\tviz?.handle.disposeDebugVisualizers(\n\t\t\t\t\t\tviz.result.map((r) => r.id),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tref.dispose();\n\t\t}\n\n\t\treturn ref;\n\t}\n\n\t/** @inheritdoc */\n\tpublic register(handle: VisualizerHandle): IDisposable {\n\t\tconst key = toKey(handle.extensionId, handle.id);\n\t\tthis.handles.set(key, handle);\n\t\treturn toDisposable(() => this.handles.delete(key));\n\t}\n\n\t/** @inheritdoc */\n\tpublic registerTree(\n\t\ttreeId: string,\n\t\thandle: VisualizerTreeHandle,\n\t): IDisposable {\n\t\tthis.trees.set(treeId, handle);\n\t\treturn toDisposable(() => this.trees.delete(treeId));\n\t}\n\n\t/** @inheritdoc */\n\tpublic async getVisualizedNodeFor(\n\t\ttreeId: string,\n\t\texpr: IExpression,\n\t): Promise<VisualizedExpression | undefined> {\n\t\tif (!(expr instanceof Variable)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst threadId = expr.getThreadId();\n\t\tif (threadId === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tree = this.trees.get(treeId);\n\t\tif (!tree) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst treeItem = await tree.getTreeItem(\n\t\t\t\tthis.getVariableContext(threadId, expr),\n\t\t\t);\n\t\t\tif (!treeItem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn new VisualizedExpression(\n\t\t\t\texpr.getSession(),\n\t\t\t\tthis,\n\t\t\t\ttreeId,\n\t\t\t\ttreeItem,\n\t\t\t\texpr,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tthis.logService.warn(\"Failed to get visualized node\", e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tpublic async getVisualizedChildren(\n\t\tsession: IDebugSession | undefined,\n\t\ttreeId: string,\n\t\ttreeElementId: number,\n\t): Promise<IExpression[]> {\n\t\tconst node = this.trees.get(treeId);\n\t\tconst children = (await node?.getChildren(treeElementId)) || [];\n\t\treturn children.map(\n\t\t\t(c) =>\n\t\t\t\tnew VisualizedExpression(session, this, treeId, c, undefined),\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic async editTreeItem(\n\t\ttreeId: string,\n\t\ttreeItem: IDebugVisualizationTreeItem,\n\t\tnewValue: string,\n\t): Promise<void> {\n\t\tconst newItem = await this.trees\n\t\t\t.get(treeId)\n\t\t\t?.editItem?.(treeItem.id, newValue);\n\t\tif (newItem) {\n\t\t\tObject.assign(treeItem, newItem); // replace in-place so rerenders work\n\t\t}\n\t}\n\n\tprivate getVariableContext(threadId: number, variable: Variable) {\n\t\tconst context: IDebugVisualizationContext = {\n\t\t\tsessionId: variable.getSession()?.getId() || \"\",\n\t\t\tcontainerId:\n\t\t\t\tvariable.parent instanceof Variable\n\t\t\t\t\t? variable.reference\n\t\t\t\t\t: undefined,\n\t\t\tthreadId,\n\t\t\tvariable: {\n\t\t\t\tname: variable.name,\n\t\t\t\tvalue: variable.value,\n\t\t\t\ttype: variable.type,\n\t\t\t\tevaluateName: variable.evaluateName,\n\t\t\t\tvariablesReference: variable.reference || 0,\n\t\t\t\tindexedVariables: variable.indexedVariables,\n\t\t\t\tmemoryReference: variable.memoryReference,\n\t\t\t\tnamedVariables: variable.namedVariables,\n\t\t\t\tpresentationHint: variable.presentationHint,\n\t\t\t},\n\t\t};\n\n\t\tfor (\n\t\t\tlet p: IExpressionContainer = variable;\n\t\t\tp instanceof Variable;\n\t\t\tp = p.parent\n\t\t) {\n\t\t\tif (p.parent instanceof Scope) {\n\t\t\t\tcontext.frameId = p.parent.stackFrame.frameId;\n\t\t\t}\n\t\t}\n\n\t\treturn context;\n\t}\n\n\tprivate processExtensionRegistration(ext: IExtensionDescription) {\n\t\tconst viz = ext.contributes?.debugVisualizers;\n\t\tif (!(viz instanceof Array)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const { when, id } of viz) {\n\t\t\ttry {\n\t\t\t\tconst expr = ContextKeyExpr.deserialize(when);\n\t\t\t\tif (expr) {\n\t\t\t\t\tthis.registrations.push({\n\t\t\t\t\t\texpr,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\textensionId: ext.identifier,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`Error processing debug visualizer registration from extension '${ext.identifier.value}'`,\n\t\t\t\t\te,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst toKey = (extensionId: ExtensionIdentifier, id: string) =>\n\t`${ExtensionIdentifier.toKey(extensionId)}\\0${id}`;\n\nconst visualizersExtensionPoint = ExtensionsRegistry.registerExtensionPoint<\n\t{ id: string; when: string }[]\n>({\n\textensionPoint: \"debugVisualizers\",\n\tjsonSchema: {\n\t\ttype: \"array\",\n\t\titems: {\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: \"Name of the debug visualizer\",\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"Condition when the debug visualizer is applicable\",\n\t\t\t\t},\n\t\t\t},\n\t\t\trequired: [\"id\", \"when\"],\n\t\t},\n\t},\n\tactivationEventsGenerator: (\n\t\tcontribs,\n\t\tresult: { push(item: string): void },\n\t) => {\n\t\tfor (const contrib of contribs) {\n\t\t\tif (contrib.id) {\n\t\t\t\tresult.push(`onDebugVisualizer:${contrib.id}`);\n\t\t\t}\n\t\t}\n\t},\n});\n"],
  "mappings": ";;;;;;;;;;;;AAMA;AAAA,EAGC;AAAA,OACM;AACP,SAAS,iBAAiB;AAC1B;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EACC;AAAA,OAEM;AACP,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OAQM;AACP,SAAS,6BAA6B;AACtC,SAAS,OAAO,UAAU,4BAA4B;AAE/C,MAAM,0BAA0B;AAAA,EACtC;AACD;AA6BO,MAAM,gBAAgB;AAAA,EAa5B,YACkB,QACA,KAChB;AAFgB;AACA;AAAA,EACf;AAAA,EAvFJ,OAuE6B;AAAA;AAAA;AAAA,EAC5B,IAAW,OAAO;AACjB,WAAO,KAAK,IAAI;AAAA,EACjB;AAAA,EAEA,IAAW,WAAW;AACrB,WAAO,KAAK,IAAI;AAAA,EACjB;AAAA,EAEA,IAAW,YAAY;AACtB,WAAO,KAAK,IAAI;AAAA,EACjB;AAAA,EAOA,MAAa,QAAQ,OAA0B;AAC9C,WAAQ,KAAK,IAAI,kBAChB,MAAM,KAAK,OAAO,uBAAuB,KAAK,KAAK,KAAK;AAAA,EAC1D;AAAA,EAEA,MAAa,UAAU;AACtB,UAAM,KAAK,OAAO,8BAA8B,KAAK,IAAI,EAAE;AAAA,EAC5D;AACD;AAkDA,MAAM,WAA0C;AAAA,EAC/C,QAAQ,CAAC;AAAA,EACT,SAAS,6BAAM;AAAA,EAAC,GAAP;AACV;AAEO,IAAM,yBAAN,MAAgE;AAAA,EAkBtE,YACsC,mBACD,kBACN,YAC7B;AAHoC;AACD;AACN;AAE9B,8BAA0B,WAAW,CAAC,GAAG,EAAE,OAAO,QAAQ,MAAM;AAC/D,WAAK,gBAAgB,KAAK,cAAc,OAAO,OAC9C,CAAC,QAAQ,KAAK,OAAK,oBAAoB,OAAO,EAAE,YAAY,YAAY,EAAE,WAAW,CAAC,CAAC;AACxF,YAAM,QAAQ,OAAK,KAAK,6BAA6B,EAAE,WAAW,CAAC;AAAA,IACpE,CAAC;AAAA,EACF;AAAA,EApLD,OAwJuE;AAAA;AAAA;AAAA,EAGrD,UAAU,oBAAI,IAG7B;AAAA,EACe,QAAQ,oBAAI,IAG3B;AAAA,EACe,cAAc,oBAAI,IAA2B;AAAA,EACtD,gBAIF,CAAC;AAAA;AAAA,EAeP,MAAa,iBACZ,UACA,OACyC;AACzC,QAAI,EAAE,oBAAoB,WAAW;AACpC,aAAO;AAAA,IACR;AACA,UAAM,WAAW,SAAS,YAAY;AACtC,QAAI,aAAa,QAAW;AAE3B,aAAO;AAAA,IACR;AAEA,UAAM,UAAU,KAAK,mBAAmB,UAAU,QAAQ;AAC1D,UAAM,UAAU;AAAA,MACf,KAAK;AAAA,MACL;AAAA,MACA;AAAA,QACC,CAAC,sBAAsB,KAAK,SAAS,IAAI;AAAA,QACzC,CAAC,uBAAuB,KAAK,SAAS,KAAK;AAAA,QAC3C,CAAC,sBAAsB,KAAK,SAAS,IAAI;AAAA,MAC1C;AAAA,IACD;AAEA,UAAM,mBAAmB,MAAM,QAAQ;AAAA,MACtC,KAAK,cAAc,IAAI,OAAO,iBAAiB;AAC9C,YAAI,CAAC,QAAQ,oBAAoB,aAAa,IAAI,GAAG;AACpD;AAAA,QACD;AAEA,YAAI,OAAO,KAAK,YAAY,IAAI,aAAa,EAAE;AAC/C,YAAI,CAAC,MAAM;AACV,iBAAO,KAAK,iBAAiB;AAAA,YAC5B,qBAAqB,aAAa,EAAE;AAAA,UACrC;AACA,eAAK,YAAY,IAAI,aAAa,IAAI,IAAI;AAAA,QAC3C;AAEA,cAAM;AACN,YAAI,MAAM,yBAAyB;AAClC;AAAA,QACD;AAEA,cAAM,SAAS,KAAK,QAAQ;AAAA,UAC3B,MAAM,aAAa,aAAa,aAAa,EAAE;AAAA,QAChD;AACA,eACC,UAAU;AAAA,UACT;AAAA,UACA,QAAQ,MAAM,OAAO;AAAA,YACpB;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MAEF,CAAC;AAAA,IACF;AAEA,UAAM,MAAM;AAAA,MACX,QAAQ,iBACN,OAAO,SAAS,EAChB;AAAA,QAAQ,CAAC,MACT,EAAE,OAAO,IAAI,CAAC,MAAM,IAAI,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AAAA,MACrD;AAAA,MACD,SAAS,6BAAM;AACd,mBAAW,OAAO,kBAAkB;AACnC,eAAK,OAAO;AAAA,YACX,IAAI,OAAO,IAAI,CAAC,MAAM,EAAE,EAAE;AAAA,UAC3B;AAAA,QACD;AAAA,MACD,GANS;AAAA,IAOV;AAEA,QAAI,MAAM,yBAAyB;AAClC,UAAI,QAAQ;AAAA,IACb;AAEA,WAAO;AAAA,EACR;AAAA;AAAA,EAGO,SAAS,QAAuC;AACtD,UAAM,MAAM,MAAM,OAAO,aAAa,OAAO,EAAE;AAC/C,SAAK,QAAQ,IAAI,KAAK,MAAM;AAC5B,WAAO,aAAa,MAAM,KAAK,QAAQ,OAAO,GAAG,CAAC;AAAA,EACnD;AAAA;AAAA,EAGO,aACN,QACA,QACc;AACd,SAAK,MAAM,IAAI,QAAQ,MAAM;AAC7B,WAAO,aAAa,MAAM,KAAK,MAAM,OAAO,MAAM,CAAC;AAAA,EACpD;AAAA;AAAA,EAGA,MAAa,qBACZ,QACA,MAC4C;AAC5C,QAAI,EAAE,gBAAgB,WAAW;AAChC;AAAA,IACD;AAEA,UAAM,WAAW,KAAK,YAAY;AAClC,QAAI,aAAa,QAAW;AAC3B;AAAA,IACD;AAEA,UAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,QAAI,CAAC,MAAM;AACV;AAAA,IACD;AAEA,QAAI;AACH,YAAM,WAAW,MAAM,KAAK;AAAA,QAC3B,KAAK,mBAAmB,UAAU,IAAI;AAAA,MACvC;AACA,UAAI,CAAC,UAAU;AACd;AAAA,MACD;AAEA,aAAO,IAAI;AAAA,QACV,KAAK,WAAW;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,GAAG;AACX,WAAK,WAAW,KAAK,iCAAiC,CAAC;AACvD;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAGA,MAAa,sBACZ,SACA,QACA,eACyB;AACzB,UAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,UAAM,WAAY,MAAM,MAAM,YAAY,aAAa,KAAM,CAAC;AAC9D,WAAO,SAAS;AAAA,MACf,CAAC,MACA,IAAI,qBAAqB,SAAS,MAAM,QAAQ,GAAG,MAAS;AAAA,IAC9D;AAAA,EACD;AAAA;AAAA,EAGA,MAAa,aACZ,QACA,UACA,UACgB;AAChB,UAAM,UAAU,MAAM,KAAK,MACzB,IAAI,MAAM,GACT,WAAW,SAAS,IAAI,QAAQ;AACnC,QAAI,SAAS;AACZ,aAAO,OAAO,UAAU,OAAO;AAAA,IAChC;AAAA,EACD;AAAA,EAEQ,mBAAmB,UAAkB,UAAoB;AAChE,UAAM,UAAsC;AAAA,MAC3C,WAAW,SAAS,WAAW,GAAG,MAAM,KAAK;AAAA,MAC7C,aACC,SAAS,kBAAkB,WACxB,SAAS,YACT;AAAA,MACJ;AAAA,MACA,UAAU;AAAA,QACT,MAAM,SAAS;AAAA,QACf,OAAO,SAAS;AAAA,QAChB,MAAM,SAAS;AAAA,QACf,cAAc,SAAS;AAAA,QACvB,oBAAoB,SAAS,aAAa;AAAA,QAC1C,kBAAkB,SAAS;AAAA,QAC3B,iBAAiB,SAAS;AAAA,QAC1B,gBAAgB,SAAS;AAAA,QACzB,kBAAkB,SAAS;AAAA,MAC5B;AAAA,IACD;AAEA,aACK,IAA0B,UAC9B,aAAa,UACb,IAAI,EAAE,QACL;AACD,UAAI,EAAE,kBAAkB,OAAO;AAC9B,gBAAQ,UAAU,EAAE,OAAO,WAAW;AAAA,MACvC;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,6BAA6B,KAA4B;AAChE,UAAM,MAAM,IAAI,aAAa;AAC7B,QAAI,EAAE,eAAe,QAAQ;AAC5B;AAAA,IACD;AAEA,eAAW,EAAE,MAAM,GAAG,KAAK,KAAK;AAC/B,UAAI;AACH,cAAM,OAAO,eAAe,YAAY,IAAI;AAC5C,YAAI,MAAM;AACT,eAAK,cAAc,KAAK;AAAA,YACvB;AAAA,YACA;AAAA,YACA,aAAa,IAAI;AAAA,UAClB,CAAC;AAAA,QACF;AAAA,MACD,SAAS,GAAG;AACX,aAAK,WAAW;AAAA,UACf,kEAAkE,IAAI,WAAW,KAAK;AAAA,UACtF;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AA7Pa,yBAAN;AAAA,EAmBJ;AAAA,EACA;AAAA,EACA;AAAA,GArBU;AA+Pb,MAAM,QAAQ,wBAAC,aAAkC,OAChD,GAAG,oBAAoB,MAAM,WAAW,CAAC,KAAK,EAAE,IADnC;AAGd,MAAM,4BAA4B,mBAAmB,uBAEnD;AAAA,EACD,gBAAgB;AAAA,EAChB,YAAY;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,MACN,MAAM;AAAA,MACN,YAAY;AAAA,QACX,IAAI;AAAA,UACH,MAAM;AAAA,UACN,aAAa;AAAA,QACd;AAAA,QACA,MAAM;AAAA,UACL,MAAM;AAAA,UACN,aACC;AAAA,QACF;AAAA,MACD;AAAA,MACA,UAAU,CAAC,MAAM,MAAM;AAAA,IACxB;AAAA,EACD;AAAA,EACA,2BAA2B,wBAC1B,UACA,WACI;AACJ,eAAW,WAAW,UAAU;AAC/B,UAAI,QAAQ,IAAI;AACf,eAAO,KAAK,qBAAqB,QAAQ,EAAE,EAAE;AAAA,MAC9C;AAAA,IACD;AAAA,EACD,GAT2B;AAU5B,CAAC;",
  "names": []
}
