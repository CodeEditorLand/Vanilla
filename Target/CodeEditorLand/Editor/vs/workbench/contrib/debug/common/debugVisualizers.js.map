{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugVisualizers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDisposable, IReference, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { ContextKeyExpr, ContextKeyExpression, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { CONTEXT_VARIABLE_NAME, CONTEXT_VARIABLE_TYPE, CONTEXT_VARIABLE_VALUE, MainThreadDebugVisualization, IDebugVisualization, IDebugVisualizationContext, IExpression, IExpressionContainer, IDebugVisualizationTreeItem, IDebugSession } from './debug.js';\nimport { getContextForVariable } from './debugContext.js';\nimport { Scope, Variable, VisualizedExpression } from './debugModel.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { ExtensionsRegistry } from '../../../services/extensions/common/extensionsRegistry.js';\n\nexport const IDebugVisualizerService = createDecorator<IDebugVisualizerService>('debugVisualizerService');\n\ninterface VisualizerHandle {\n\tid: string;\n\textensionId: ExtensionIdentifier;\n\tprovideDebugVisualizers(context: IDebugVisualizationContext, token: CancellationToken): Promise<IDebugVisualization[]>;\n\tresolveDebugVisualizer(viz: IDebugVisualization, token: CancellationToken): Promise<MainThreadDebugVisualization>;\n\texecuteDebugVisualizerCommand(id: number): Promise<void>;\n\tdisposeDebugVisualizers(ids: number[]): void;\n}\n\ninterface VisualizerTreeHandle {\n\tgetTreeItem(element: IDebugVisualizationContext): Promise<IDebugVisualizationTreeItem | undefined>;\n\tgetChildren(element: number): Promise<IDebugVisualizationTreeItem[]>;\n\tdisposeItem(element: number): void;\n\teditItem?(item: number, value: string): Promise<IDebugVisualizationTreeItem | undefined>;\n}\n\nexport class DebugVisualizer {\n\tpublic get name() {\n\t\treturn this.viz.name;\n\t}\n\n\tpublic get iconPath() {\n\t\treturn this.viz.iconPath;\n\t}\n\n\tpublic get iconClass() {\n\t\treturn this.viz.iconClass;\n\t}\n\n\tconstructor(private readonly handle: VisualizerHandle, private readonly viz: IDebugVisualization) { }\n\n\tpublic async resolve(token: CancellationToken) {\n\t\treturn this.viz.visualization ??= await this.handle.resolveDebugVisualizer(this.viz, token);\n\t}\n\n\tpublic async execute() {\n\t\tawait this.handle.executeDebugVisualizerCommand(this.viz.id);\n\t}\n}\n\nexport interface IDebugVisualizerService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Gets visualizers applicable for the given Expression.\n\t */\n\tgetApplicableFor(expression: IExpression, token: CancellationToken): Promise<IReference<DebugVisualizer[]>>;\n\n\t/**\n\t * Registers a new visualizer (called from the main thread debug service)\n\t */\n\tregister(handle: VisualizerHandle): IDisposable;\n\n\t/**\n\t * Registers a new visualizer tree.\n\t */\n\tregisterTree(treeId: string, handle: VisualizerTreeHandle): IDisposable;\n\n\t/**\n\t * Sets that a certa tree should be used for the visualized node\n\t */\n\tgetVisualizedNodeFor(treeId: string, expr: IExpression): Promise<VisualizedExpression | undefined>;\n\n\t/**\n\t * Gets children for a visualized tree node.\n\t */\n\tgetVisualizedChildren(session: IDebugSession | undefined, treeId: string, treeElementId: number): Promise<IExpression[]>;\n\n\t/**\n\t * Gets children for a visualized tree node.\n\t */\n\teditTreeItem(treeId: string, item: IDebugVisualizationTreeItem, newValue: string): Promise<void>;\n}\n\nconst emptyRef: IReference<DebugVisualizer[]> = { object: [], dispose: () => { } };\n\nexport class DebugVisualizerService implements IDebugVisualizerService {\n\tdeclare public readonly _serviceBrand: undefined;\n\n\tprivate readonly handles = new Map</* extId + \\0 + vizId */ string, VisualizerHandle>();\n\tprivate readonly trees = new Map</* extId + \\0 + treeId */ string, VisualizerTreeHandle>();\n\tprivate readonly didActivate = new Map<string, Promise<void>>();\n\tprivate registrations: { expr: ContextKeyExpression; id: string; extensionId: ExtensionIdentifier }[] = [];\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tvisualizersExtensionPoint.setHandler((_, { added, removed }) => {\n\t\t\tthis.registrations = this.registrations.filter(r =>\n\t\t\t\t!removed.some(e => ExtensionIdentifier.equals(e.description.identifier, r.extensionId)));\n\t\t\tadded.forEach(e => this.processExtensionRegistration(e.description));\n\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic async getApplicableFor(variable: IExpression, token: CancellationToken): Promise<IReference<DebugVisualizer[]>> {\n\t\tif (!(variable instanceof Variable)) {\n\t\t\treturn emptyRef;\n\t\t}\n\t\tconst threadId = variable.getThreadId();\n\t\tif (threadId === undefined) { // an expression, not a variable\n\t\t\treturn emptyRef;\n\t\t}\n\n\t\tconst context = this.getVariableContext(threadId, variable);\n\t\tconst overlay = getContextForVariable(this.contextKeyService, variable, [\n\t\t\t[CONTEXT_VARIABLE_NAME.key, variable.name],\n\t\t\t[CONTEXT_VARIABLE_VALUE.key, variable.value],\n\t\t\t[CONTEXT_VARIABLE_TYPE.key, variable.type],\n\t\t]);\n\n\t\tconst maybeVisualizers = await Promise.all(this.registrations.map(async registration => {\n\t\t\tif (!overlay.contextMatchesRules(registration.expr)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet prom = this.didActivate.get(registration.id);\n\t\t\tif (!prom) {\n\t\t\t\tprom = this.extensionService.activateByEvent(`onDebugVisualizer:${registration.id}`);\n\t\t\t\tthis.didActivate.set(registration.id, prom);\n\t\t\t}\n\n\t\t\tawait prom;\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst handle = this.handles.get(toKey(registration.extensionId, registration.id));\n\t\t\treturn handle && { handle, result: await handle.provideDebugVisualizers(context, token) };\n\t\t}));\n\n\t\tconst ref = {\n\t\t\tobject: maybeVisualizers.filter(isDefined).flatMap(v => v.result.map(r => new DebugVisualizer(v.handle, r))),\n\t\t\tdispose: () => {\n\t\t\t\tfor (const viz of maybeVisualizers) {\n\t\t\t\t\tviz?.handle.disposeDebugVisualizers(viz.result.map(r => r.id));\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tref.dispose();\n\t\t}\n\n\t\treturn ref;\n\t}\n\n\t/** @inheritdoc */\n\tpublic register(handle: VisualizerHandle): IDisposable {\n\t\tconst key = toKey(handle.extensionId, handle.id);\n\t\tthis.handles.set(key, handle);\n\t\treturn toDisposable(() => this.handles.delete(key));\n\t}\n\n\t/** @inheritdoc */\n\tpublic registerTree(treeId: string, handle: VisualizerTreeHandle): IDisposable {\n\t\tthis.trees.set(treeId, handle);\n\t\treturn toDisposable(() => this.trees.delete(treeId));\n\t}\n\n\t/** @inheritdoc */\n\tpublic async getVisualizedNodeFor(treeId: string, expr: IExpression): Promise<VisualizedExpression | undefined> {\n\t\tif (!(expr instanceof Variable)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst threadId = expr.getThreadId();\n\t\tif (threadId === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tree = this.trees.get(treeId);\n\t\tif (!tree) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst treeItem = await tree.getTreeItem(this.getVariableContext(threadId, expr));\n\t\t\tif (!treeItem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn new VisualizedExpression(expr.getSession(), this, treeId, treeItem, expr);\n\t\t} catch (e) {\n\t\t\tthis.logService.warn('Failed to get visualized node', e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tpublic async getVisualizedChildren(session: IDebugSession | undefined, treeId: string, treeElementId: number): Promise<IExpression[]> {\n\t\tconst node = this.trees.get(treeId);\n\t\tconst children = await node?.getChildren(treeElementId) || [];\n\t\treturn children.map(c => new VisualizedExpression(session, this, treeId, c, undefined));\n\t}\n\n\t/** @inheritdoc */\n\tpublic async editTreeItem(treeId: string, treeItem: IDebugVisualizationTreeItem, newValue: string): Promise<void> {\n\t\tconst newItem = await this.trees.get(treeId)?.editItem?.(treeItem.id, newValue);\n\t\tif (newItem) {\n\t\t\tObject.assign(treeItem, newItem); // replace in-place so rerenders work\n\t\t}\n\t}\n\n\tprivate getVariableContext(threadId: number, variable: Variable) {\n\t\tconst context: IDebugVisualizationContext = {\n\t\t\tsessionId: variable.getSession()?.getId() || '',\n\t\t\tcontainerId: (variable.parent instanceof Variable ? variable.reference : undefined),\n\t\t\tthreadId,\n\t\t\tvariable: {\n\t\t\t\tname: variable.name,\n\t\t\t\tvalue: variable.value,\n\t\t\t\ttype: variable.type,\n\t\t\t\tevaluateName: variable.evaluateName,\n\t\t\t\tvariablesReference: variable.reference || 0,\n\t\t\t\tindexedVariables: variable.indexedVariables,\n\t\t\t\tmemoryReference: variable.memoryReference,\n\t\t\t\tnamedVariables: variable.namedVariables,\n\t\t\t\tpresentationHint: variable.presentationHint,\n\t\t\t}\n\t\t};\n\n\t\tfor (let p: IExpressionContainer = variable; p instanceof Variable; p = p.parent) {\n\t\t\tif (p.parent instanceof Scope) {\n\t\t\t\tcontext.frameId = p.parent.stackFrame.frameId;\n\t\t\t}\n\t\t}\n\n\t\treturn context;\n\t}\n\n\tprivate processExtensionRegistration(ext: IExtensionDescription) {\n\t\tconst viz = ext.contributes?.debugVisualizers;\n\t\tif (!(viz instanceof Array)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const { when, id } of viz) {\n\t\t\ttry {\n\t\t\t\tconst expr = ContextKeyExpr.deserialize(when);\n\t\t\t\tif (expr) {\n\t\t\t\t\tthis.registrations.push({ expr, id, extensionId: ext.identifier });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(`Error processing debug visualizer registration from extension '${ext.identifier.value}'`, e);\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst toKey = (extensionId: ExtensionIdentifier, id: string) => `${ExtensionIdentifier.toKey(extensionId)}\\0${id}`;\n\nconst visualizersExtensionPoint = ExtensionsRegistry.registerExtensionPoint<{ id: string; when: string }[]>({\n\textensionPoint: 'debugVisualizers',\n\tjsonSchema: {\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'Name of the debug visualizer'\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'Condition when the debug visualizer is applicable'\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['id', 'when']\n\t\t}\n\t},\n\tactivationEventsGenerator: (contribs, result: { push(item: string): void }) => {\n\t\tfor (const contrib of contribs) {\n\t\t\tif (contrib.id) {\n\t\t\t\tresult.push(`onDebugVisualizer:${contrib.id}`);\n\t\t\t}\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
