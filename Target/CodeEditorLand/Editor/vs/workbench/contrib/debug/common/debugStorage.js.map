{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugStorage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { observableValue } from '../../../../base/common/observable.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IDebugModel, IEvaluate, IExpression } from './debug.js';\nimport { Breakpoint, DataBreakpoint, ExceptionBreakpoint, Expression, FunctionBreakpoint } from './debugModel.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\n\nconst DEBUG_BREAKPOINTS_KEY = 'debug.breakpoint';\nconst DEBUG_FUNCTION_BREAKPOINTS_KEY = 'debug.functionbreakpoint';\nconst DEBUG_DATA_BREAKPOINTS_KEY = 'debug.databreakpoint';\nconst DEBUG_EXCEPTION_BREAKPOINTS_KEY = 'debug.exceptionbreakpoint';\nconst DEBUG_WATCH_EXPRESSIONS_KEY = 'debug.watchexpressions';\nconst DEBUG_CHOSEN_ENVIRONMENTS_KEY = 'debug.chosenenvironment';\nconst DEBUG_UX_STATE_KEY = 'debug.uxstate';\n\nexport class DebugStorage extends Disposable {\n\tpublic readonly breakpoints = observableValue(this, this.loadBreakpoints());\n\tpublic readonly functionBreakpoints = observableValue(this, this.loadFunctionBreakpoints());\n\tpublic readonly exceptionBreakpoints = observableValue(this, this.loadExceptionBreakpoints());\n\tpublic readonly dataBreakpoints = observableValue(this, this.loadDataBreakpoints());\n\tpublic readonly watchExpressions = observableValue(this, this.loadWatchExpressions());\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(storageService.onDidChangeValue(StorageScope.WORKSPACE, undefined, this._store)(e => {\n\t\t\tif (e.external) {\n\t\t\t\tswitch (e.key) {\n\t\t\t\t\tcase DEBUG_BREAKPOINTS_KEY:\n\t\t\t\t\t\treturn this.breakpoints.set(this.loadBreakpoints(), undefined);\n\t\t\t\t\tcase DEBUG_FUNCTION_BREAKPOINTS_KEY:\n\t\t\t\t\t\treturn this.functionBreakpoints.set(this.loadFunctionBreakpoints(), undefined);\n\t\t\t\t\tcase DEBUG_EXCEPTION_BREAKPOINTS_KEY:\n\t\t\t\t\t\treturn this.exceptionBreakpoints.set(this.loadExceptionBreakpoints(), undefined);\n\t\t\t\t\tcase DEBUG_DATA_BREAKPOINTS_KEY:\n\t\t\t\t\t\treturn this.dataBreakpoints.set(this.loadDataBreakpoints(), undefined);\n\t\t\t\t\tcase DEBUG_WATCH_EXPRESSIONS_KEY:\n\t\t\t\t\t\treturn this.watchExpressions.set(this.loadWatchExpressions(), undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tloadDebugUxState(): 'simple' | 'default' {\n\t\treturn this.storageService.get(DEBUG_UX_STATE_KEY, StorageScope.WORKSPACE, 'default') as 'simple' | 'default';\n\t}\n\n\tstoreDebugUxState(value: 'simple' | 'default'): void {\n\t\tthis.storageService.store(DEBUG_UX_STATE_KEY, value, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate loadBreakpoints(): Breakpoint[] {\n\t\tlet result: Breakpoint[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_BREAKPOINTS_KEY, StorageScope.WORKSPACE, '[]')).map((breakpoint: ReturnType<Breakpoint['toJSON']>) => {\n\t\t\t\tbreakpoint.uri = URI.revive(breakpoint.uri);\n\t\t\t\treturn new Breakpoint(breakpoint, this.textFileService, this.uriIdentityService, this.logService, breakpoint.id);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate loadFunctionBreakpoints(): FunctionBreakpoint[] {\n\t\tlet result: FunctionBreakpoint[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_FUNCTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE, '[]')).map((fb: ReturnType<FunctionBreakpoint['toJSON']>) => {\n\t\t\t\treturn new FunctionBreakpoint(fb, fb.id);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate loadExceptionBreakpoints(): ExceptionBreakpoint[] {\n\t\tlet result: ExceptionBreakpoint[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_EXCEPTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE, '[]')).map((exBreakpoint: ReturnType<ExceptionBreakpoint['toJSON']>) => {\n\t\t\t\treturn new ExceptionBreakpoint(exBreakpoint, exBreakpoint.id);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate loadDataBreakpoints(): DataBreakpoint[] {\n\t\tlet result: DataBreakpoint[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_DATA_BREAKPOINTS_KEY, StorageScope.WORKSPACE, '[]')).map((dbp: ReturnType<DataBreakpoint['toJSON']>) => {\n\t\t\t\treturn new DataBreakpoint(dbp, dbp.id);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate loadWatchExpressions(): Expression[] {\n\t\tlet result: Expression[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_WATCH_EXPRESSIONS_KEY, StorageScope.WORKSPACE, '[]')).map((watchStoredData: { name: string; id: string }) => {\n\t\t\t\treturn new Expression(watchStoredData.name, watchStoredData.id);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tloadChosenEnvironments(): { [key: string]: string } {\n\t\treturn JSON.parse(this.storageService.get(DEBUG_CHOSEN_ENVIRONMENTS_KEY, StorageScope.WORKSPACE, '{}'));\n\t}\n\n\tstoreChosenEnvironments(environments: { [key: string]: string }): void {\n\t\tthis.storageService.store(DEBUG_CHOSEN_ENVIRONMENTS_KEY, JSON.stringify(environments), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tstoreWatchExpressions(watchExpressions: (IExpression & IEvaluate)[]): void {\n\t\tif (watchExpressions.length) {\n\t\t\tthis.storageService.store(DEBUG_WATCH_EXPRESSIONS_KEY, JSON.stringify(watchExpressions.map(we => ({ name: we.name, id: we.getId() }))), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_WATCH_EXPRESSIONS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tstoreBreakpoints(debugModel: IDebugModel): void {\n\t\tconst breakpoints = debugModel.getBreakpoints();\n\t\tif (breakpoints.length) {\n\t\t\tthis.storageService.store(DEBUG_BREAKPOINTS_KEY, JSON.stringify(breakpoints), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_BREAKPOINTS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst functionBreakpoints = debugModel.getFunctionBreakpoints();\n\t\tif (functionBreakpoints.length) {\n\t\t\tthis.storageService.store(DEBUG_FUNCTION_BREAKPOINTS_KEY, JSON.stringify(functionBreakpoints), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_FUNCTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst dataBreakpoints = debugModel.getDataBreakpoints().filter(dbp => dbp.canPersist);\n\t\tif (dataBreakpoints.length) {\n\t\t\tthis.storageService.store(DEBUG_DATA_BREAKPOINTS_KEY, JSON.stringify(dataBreakpoints), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_DATA_BREAKPOINTS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst exceptionBreakpoints = debugModel.getExceptionBreakpoints();\n\t\tif (exceptionBreakpoints.length) {\n\t\t\tthis.storageService.store(DEBUG_EXCEPTION_BREAKPOINTS_KEY, JSON.stringify(exceptionBreakpoints), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_EXCEPTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
