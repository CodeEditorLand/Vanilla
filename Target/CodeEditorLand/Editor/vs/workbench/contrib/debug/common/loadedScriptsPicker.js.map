{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/loadedScriptsPicker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { matchesFuzzy } from '../../../../base/common/filters.js';\nimport { Source } from './debugSource.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IDebugService, IDebugSession } from './debug.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { getIconClasses } from '../../../../editor/common/services/getIconClasses.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\n\nimport { dirname } from '../../../../base/common/resources.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\n\nexport interface IPickerDebugItem extends IQuickPickItem {\n\taccept(): void;\n}\n\n/**\n * This function takes a regular quickpick and makes one for loaded scripts that has persistent headers\n * e.g. when some picks are filtered out, the ones that are visible still have its header.\n */\nexport async function showLoadedScriptMenu(accessor: ServicesAccessor) {\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst debugService = accessor.get(IDebugService);\n\tconst editorService = accessor.get(IEditorService);\n\tconst sessions = debugService.getModel().getSessions(false);\n\tconst modelService = accessor.get(IModelService);\n\tconst languageService = accessor.get(ILanguageService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tconst localDisposableStore = new DisposableStore();\n\tconst quickPick = quickInputService.createQuickPick<IPickerDebugItem>({ useSeparators: true });\n\tlocalDisposableStore.add(quickPick);\n\tquickPick.matchOnLabel = quickPick.matchOnDescription = quickPick.matchOnDetail = quickPick.sortByLabel = false;\n\tquickPick.placeholder = nls.localize('moveFocusedView.selectView', \"Search loaded scripts by name\");\n\tquickPick.items = await _getPicks(quickPick.value, sessions, editorService, modelService, languageService, labelService);\n\n\tlocalDisposableStore.add(quickPick.onDidChangeValue(async () => {\n\t\tquickPick.items = await _getPicks(quickPick.value, sessions, editorService, modelService, languageService, labelService);\n\t}));\n\tlocalDisposableStore.add(quickPick.onDidAccept(() => {\n\t\tconst selectedItem = quickPick.selectedItems[0];\n\t\tselectedItem.accept();\n\t\tquickPick.hide();\n\t\tlocalDisposableStore.dispose();\n\t}));\n\tquickPick.show();\n}\n\nasync function _getPicksFromSession(session: IDebugSession, filter: string, editorService: IEditorService, modelService: IModelService, languageService: ILanguageService, labelService: ILabelService): Promise<Array<IPickerDebugItem | IQuickPickSeparator>> {\n\tconst items: Array<IPickerDebugItem | IQuickPickSeparator> = [];\n\titems.push({ type: 'separator', label: session.name });\n\tconst sources = await session.getLoadedSources();\n\n\tsources.forEach((element: Source) => {\n\t\tconst pick = _createPick(element, filter, editorService, modelService, languageService, labelService);\n\t\tif (pick) {\n\t\t\titems.push(pick);\n\t\t}\n\n\t});\n\treturn items;\n}\nasync function _getPicks(filter: string, sessions: IDebugSession[], editorService: IEditorService, modelService: IModelService, languageService: ILanguageService, labelService: ILabelService): Promise<Array<IPickerDebugItem | IQuickPickSeparator>> {\n\tconst loadedScriptPicks: Array<IPickerDebugItem | IQuickPickSeparator> = [];\n\n\n\tconst picks = await Promise.all(\n\t\tsessions.map((session) => _getPicksFromSession(session, filter, editorService, modelService, languageService, labelService))\n\t);\n\n\tfor (const row of picks) {\n\t\tfor (const elem of row) {\n\t\t\tloadedScriptPicks.push(elem);\n\t\t}\n\t}\n\treturn loadedScriptPicks;\n}\n\nfunction _createPick(source: Source, filter: string, editorService: IEditorService, modelService: IModelService, languageService: ILanguageService, labelService: ILabelService): IPickerDebugItem | undefined {\n\n\tconst label = labelService.getUriBasenameLabel(source.uri);\n\tconst desc = labelService.getUriLabel(dirname(source.uri));\n\n\t// manually filter so that headers don't get filtered out\n\tconst labelHighlights = matchesFuzzy(filter, label, true);\n\tconst descHighlights = matchesFuzzy(filter, desc, true);\n\tif (labelHighlights || descHighlights) {\n\t\treturn {\n\t\t\tlabel,\n\t\t\tdescription: desc === '.' ? undefined : desc,\n\t\t\thighlights: { label: labelHighlights ?? undefined, description: descHighlights ?? undefined },\n\t\t\ticonClasses: getIconClasses(modelService, languageService, source.uri),\n\t\t\taccept: () => {\n\t\t\t\tif (source.available) {\n\t\t\t\t\tsource.openInEditor(editorService, { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 });\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\treturn undefined;\n}\n"],
  "mappings": "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",
  "names": []
}
