{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugViewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED, CONTEXT_EXPRESSION_SELECTED, CONTEXT_FOCUSED_SESSION_IS_ATTACH, CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG, CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE, CONTEXT_JUMP_TO_CURSOR_SUPPORTED, CONTEXT_LOADED_SCRIPTS_SUPPORTED, CONTEXT_MULTI_SESSION_DEBUG, CONTEXT_RESTART_FRAME_SUPPORTED, CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED, CONTEXT_SET_EXPRESSION_SUPPORTED, CONTEXT_SET_VARIABLE_SUPPORTED, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_STEP_INTO_TARGETS_SUPPORTED, CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED, CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED, IDebugSession, IExpression, IExpressionContainer, IStackFrame, IThread, IViewModel } from './debug.js';\nimport { isSessionAttach } from './debugUtils.js';\n\nexport class ViewModel implements IViewModel {\n\n\tfirstSessionStart = true;\n\n\tprivate _focusedStackFrame: IStackFrame | undefined;\n\tprivate _focusedSession: IDebugSession | undefined;\n\tprivate _focusedThread: IThread | undefined;\n\tprivate selectedExpression: { expression: IExpression; settingWatch: boolean } | undefined;\n\tprivate readonly _onDidFocusSession = new Emitter<IDebugSession | undefined>();\n\tprivate readonly _onDidFocusThread = new Emitter<{ thread: IThread | undefined; explicit: boolean; session: IDebugSession | undefined }>();\n\tprivate readonly _onDidFocusStackFrame = new Emitter<{ stackFrame: IStackFrame | undefined; explicit: boolean; session: IDebugSession | undefined }>();\n\tprivate readonly _onDidSelectExpression = new Emitter<{ expression: IExpression; settingWatch: boolean } | undefined>();\n\tprivate readonly _onDidEvaluateLazyExpression = new Emitter<IExpressionContainer>();\n\tprivate readonly _onWillUpdateViews = new Emitter<void>();\n\tprivate readonly _onDidChangeVisualization = new Emitter<{ original: IExpression; replacement: IExpression }>();\n\tprivate readonly visualized = new WeakMap<IExpression, IExpression>();\n\tprivate readonly preferredVisualizers = new Map</** cache key */ string, /* tree ID */ string>();\n\tprivate expressionSelectedContextKey!: IContextKey<boolean>;\n\tprivate loadedScriptsSupportedContextKey!: IContextKey<boolean>;\n\tprivate stepBackSupportedContextKey!: IContextKey<boolean>;\n\tprivate focusedSessionIsAttach!: IContextKey<boolean>;\n\tprivate focusedSessionIsNoDebug!: IContextKey<boolean>;\n\tprivate restartFrameSupportedContextKey!: IContextKey<boolean>;\n\tprivate stepIntoTargetsSupported!: IContextKey<boolean>;\n\tprivate jumpToCursorSupported!: IContextKey<boolean>;\n\tprivate setVariableSupported!: IContextKey<boolean>;\n\tprivate setDataBreakpointAtByteSupported!: IContextKey<boolean>;\n\tprivate setExpressionSupported!: IContextKey<boolean>;\n\tprivate multiSessionDebug!: IContextKey<boolean>;\n\tprivate terminateDebuggeeSupported!: IContextKey<boolean>;\n\tprivate suspendDebuggeeSupported!: IContextKey<boolean>;\n\tprivate disassembleRequestSupported!: IContextKey<boolean>;\n\tprivate focusedStackFrameHasInstructionPointerReference!: IContextKey<boolean>;\n\n\tconstructor(private contextKeyService: IContextKeyService) {\n\t\tcontextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.expressionSelectedContextKey = CONTEXT_EXPRESSION_SELECTED.bindTo(contextKeyService);\n\t\t\tthis.loadedScriptsSupportedContextKey = CONTEXT_LOADED_SCRIPTS_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.stepBackSupportedContextKey = CONTEXT_STEP_BACK_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.focusedSessionIsAttach = CONTEXT_FOCUSED_SESSION_IS_ATTACH.bindTo(contextKeyService);\n\t\t\tthis.focusedSessionIsNoDebug = CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG.bindTo(contextKeyService);\n\t\t\tthis.restartFrameSupportedContextKey = CONTEXT_RESTART_FRAME_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.stepIntoTargetsSupported = CONTEXT_STEP_INTO_TARGETS_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.jumpToCursorSupported = CONTEXT_JUMP_TO_CURSOR_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.setVariableSupported = CONTEXT_SET_VARIABLE_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.setDataBreakpointAtByteSupported = CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.setExpressionSupported = CONTEXT_SET_EXPRESSION_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.multiSessionDebug = CONTEXT_MULTI_SESSION_DEBUG.bindTo(contextKeyService);\n\t\t\tthis.terminateDebuggeeSupported = CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.suspendDebuggeeSupported = CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.disassembleRequestSupported = CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.focusedStackFrameHasInstructionPointerReference = CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE.bindTo(contextKeyService);\n\t\t});\n\t}\n\n\tgetId(): string {\n\t\treturn 'root';\n\t}\n\n\tget focusedSession(): IDebugSession | undefined {\n\t\treturn this._focusedSession;\n\t}\n\n\tget focusedThread(): IThread | undefined {\n\t\treturn this._focusedThread;\n\t}\n\n\tget focusedStackFrame(): IStackFrame | undefined {\n\t\treturn this._focusedStackFrame;\n\t}\n\n\tsetFocus(stackFrame: IStackFrame | undefined, thread: IThread | undefined, session: IDebugSession | undefined, explicit: boolean): void {\n\t\tconst shouldEmitForStackFrame = this._focusedStackFrame !== stackFrame;\n\t\tconst shouldEmitForSession = this._focusedSession !== session;\n\t\tconst shouldEmitForThread = this._focusedThread !== thread;\n\n\n\t\tthis._focusedStackFrame = stackFrame;\n\t\tthis._focusedThread = thread;\n\t\tthis._focusedSession = session;\n\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.loadedScriptsSupportedContextKey.set(!!session?.capabilities.supportsLoadedSourcesRequest);\n\t\t\tthis.stepBackSupportedContextKey.set(!!session?.capabilities.supportsStepBack);\n\t\t\tthis.restartFrameSupportedContextKey.set(!!session?.capabilities.supportsRestartFrame);\n\t\t\tthis.stepIntoTargetsSupported.set(!!session?.capabilities.supportsStepInTargetsRequest);\n\t\t\tthis.jumpToCursorSupported.set(!!session?.capabilities.supportsGotoTargetsRequest);\n\t\t\tthis.setVariableSupported.set(!!session?.capabilities.supportsSetVariable);\n\t\t\tthis.setDataBreakpointAtByteSupported.set(!!session?.capabilities.supportsDataBreakpointBytes);\n\t\t\tthis.setExpressionSupported.set(!!session?.capabilities.supportsSetExpression);\n\t\t\tthis.terminateDebuggeeSupported.set(!!session?.capabilities.supportTerminateDebuggee);\n\t\t\tthis.suspendDebuggeeSupported.set(!!session?.capabilities.supportSuspendDebuggee);\n\t\t\tthis.disassembleRequestSupported.set(!!session?.capabilities.supportsDisassembleRequest);\n\t\t\tthis.focusedStackFrameHasInstructionPointerReference.set(!!stackFrame?.instructionPointerReference);\n\t\t\tconst attach = !!session && isSessionAttach(session);\n\t\t\tthis.focusedSessionIsAttach.set(attach);\n\t\t\tthis.focusedSessionIsNoDebug.set(!!session && !!session.configuration.noDebug);\n\t\t});\n\n\t\tif (shouldEmitForSession) {\n\t\t\tthis._onDidFocusSession.fire(session);\n\t\t}\n\n\t\t// should not call onDidFocusThread if onDidFocusStackFrame is called.\n\t\tif (shouldEmitForStackFrame) {\n\t\t\tthis._onDidFocusStackFrame.fire({ stackFrame, explicit, session });\n\t\t} else if (shouldEmitForThread) {\n\t\t\tthis._onDidFocusThread.fire({ thread, explicit, session });\n\t\t}\n\t}\n\n\tget onDidFocusSession(): Event<IDebugSession | undefined> {\n\t\treturn this._onDidFocusSession.event;\n\t}\n\n\tget onDidFocusThread(): Event<{ thread: IThread | undefined; explicit: boolean; session: IDebugSession | undefined }> {\n\t\treturn this._onDidFocusThread.event;\n\t}\n\n\tget onDidFocusStackFrame(): Event<{ stackFrame: IStackFrame | undefined; explicit: boolean; session: IDebugSession | undefined }> {\n\t\treturn this._onDidFocusStackFrame.event;\n\t}\n\n\tget onDidChangeVisualization() {\n\t\treturn this._onDidChangeVisualization.event;\n\t}\n\n\tgetSelectedExpression(): { expression: IExpression; settingWatch: boolean } | undefined {\n\t\treturn this.selectedExpression;\n\t}\n\n\tsetSelectedExpression(expression: IExpression | undefined, settingWatch: boolean) {\n\t\tthis.selectedExpression = expression ? { expression, settingWatch: settingWatch } : undefined;\n\t\tthis.expressionSelectedContextKey.set(!!expression);\n\t\tthis._onDidSelectExpression.fire(this.selectedExpression);\n\t}\n\n\tget onDidSelectExpression(): Event<{ expression: IExpression; settingWatch: boolean } | undefined> {\n\t\treturn this._onDidSelectExpression.event;\n\t}\n\n\tget onDidEvaluateLazyExpression(): Event<IExpressionContainer> {\n\t\treturn this._onDidEvaluateLazyExpression.event;\n\t}\n\n\tupdateViews(): void {\n\t\tthis._onWillUpdateViews.fire();\n\t}\n\n\tget onWillUpdateViews(): Event<void> {\n\t\treturn this._onWillUpdateViews.event;\n\t}\n\n\tisMultiSessionView(): boolean {\n\t\treturn !!this.multiSessionDebug.get();\n\t}\n\n\tsetMultiSessionView(isMultiSessionView: boolean): void {\n\t\tthis.multiSessionDebug.set(isMultiSessionView);\n\t}\n\n\tsetVisualizedExpression(original: IExpression, visualized: IExpression & { treeId: string } | undefined): void {\n\t\tconst current = this.visualized.get(original) || original;\n\t\tconst key = this.getPreferredVisualizedKey(original);\n\t\tif (visualized) {\n\t\t\tthis.visualized.set(original, visualized);\n\t\t\tthis.preferredVisualizers.set(key, visualized.treeId);\n\t\t} else {\n\t\t\tthis.visualized.delete(original);\n\t\t\tthis.preferredVisualizers.delete(key);\n\t\t}\n\t\tthis._onDidChangeVisualization.fire({ original: current, replacement: visualized || original });\n\t}\n\n\tgetVisualizedExpression(expression: IExpression): IExpression | string | undefined {\n\t\treturn this.visualized.get(expression) || this.preferredVisualizers.get(this.getPreferredVisualizedKey(expression));\n\t}\n\n\tasync evaluateLazyExpression(expression: IExpressionContainer): Promise<void> {\n\t\tawait expression.evaluateLazy();\n\t\tthis._onDidEvaluateLazyExpression.fire(expression);\n\t}\n\n\tprivate getPreferredVisualizedKey(expr: IExpression) {\n\t\treturn JSON.stringify([\n\t\t\texpr.name,\n\t\t\texpr.type,\n\t\t\t!!expr.memoryReference,\n\t\t].join('\\0'));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
