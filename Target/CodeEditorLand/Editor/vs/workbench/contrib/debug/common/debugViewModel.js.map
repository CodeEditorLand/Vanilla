{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugViewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport type {\n\tIContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tCONTEXT_DISASSEMBLE_REQUEST_SUPPORTED,\n\tCONTEXT_EXPRESSION_SELECTED,\n\tCONTEXT_FOCUSED_SESSION_IS_ATTACH,\n\tCONTEXT_FOCUSED_SESSION_IS_NO_DEBUG,\n\tCONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE,\n\tCONTEXT_JUMP_TO_CURSOR_SUPPORTED,\n\tCONTEXT_LOADED_SCRIPTS_SUPPORTED,\n\tCONTEXT_MULTI_SESSION_DEBUG,\n\tCONTEXT_RESTART_FRAME_SUPPORTED,\n\tCONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED,\n\tCONTEXT_SET_EXPRESSION_SUPPORTED,\n\tCONTEXT_SET_VARIABLE_SUPPORTED,\n\tCONTEXT_STEP_BACK_SUPPORTED,\n\tCONTEXT_STEP_INTO_TARGETS_SUPPORTED,\n\tCONTEXT_SUSPEND_DEBUGGEE_SUPPORTED,\n\tCONTEXT_TERMINATE_DEBUGGEE_SUPPORTED,\n\ttype IDebugSession,\n\ttype IExpression,\n\ttype IExpressionContainer,\n\ttype IStackFrame,\n\ttype IThread,\n\ttype IViewModel,\n} from \"./debug.js\";\nimport { isSessionAttach } from \"./debugUtils.js\";\n\nexport class ViewModel implements IViewModel {\n\tfirstSessionStart = true;\n\n\tprivate _focusedStackFrame: IStackFrame | undefined;\n\tprivate _focusedSession: IDebugSession | undefined;\n\tprivate _focusedThread: IThread | undefined;\n\tprivate selectedExpression:\n\t\t| { expression: IExpression; settingWatch: boolean }\n\t\t| undefined;\n\tprivate readonly _onDidFocusSession = new Emitter<\n\t\tIDebugSession | undefined\n\t>();\n\tprivate readonly _onDidFocusThread = new Emitter<{\n\t\tthread: IThread | undefined;\n\t\texplicit: boolean;\n\t\tsession: IDebugSession | undefined;\n\t}>();\n\tprivate readonly _onDidFocusStackFrame = new Emitter<{\n\t\tstackFrame: IStackFrame | undefined;\n\t\texplicit: boolean;\n\t\tsession: IDebugSession | undefined;\n\t}>();\n\tprivate readonly _onDidSelectExpression = new Emitter<\n\t\t{ expression: IExpression; settingWatch: boolean } | undefined\n\t>();\n\tprivate readonly _onDidEvaluateLazyExpression =\n\t\tnew Emitter<IExpressionContainer>();\n\tprivate readonly _onWillUpdateViews = new Emitter<void>();\n\tprivate readonly _onDidChangeVisualization = new Emitter<{\n\t\toriginal: IExpression;\n\t\treplacement: IExpression;\n\t}>();\n\tprivate readonly visualized = new WeakMap<IExpression, IExpression>();\n\tprivate readonly preferredVisualizers = new Map<\n\t\t/** cache key */ string,\n\t\t/* tree ID */ string\n\t>();\n\tprivate expressionSelectedContextKey!: IContextKey<boolean>;\n\tprivate loadedScriptsSupportedContextKey!: IContextKey<boolean>;\n\tprivate stepBackSupportedContextKey!: IContextKey<boolean>;\n\tprivate focusedSessionIsAttach!: IContextKey<boolean>;\n\tprivate focusedSessionIsNoDebug!: IContextKey<boolean>;\n\tprivate restartFrameSupportedContextKey!: IContextKey<boolean>;\n\tprivate stepIntoTargetsSupported!: IContextKey<boolean>;\n\tprivate jumpToCursorSupported!: IContextKey<boolean>;\n\tprivate setVariableSupported!: IContextKey<boolean>;\n\tprivate setDataBreakpointAtByteSupported!: IContextKey<boolean>;\n\tprivate setExpressionSupported!: IContextKey<boolean>;\n\tprivate multiSessionDebug!: IContextKey<boolean>;\n\tprivate terminateDebuggeeSupported!: IContextKey<boolean>;\n\tprivate suspendDebuggeeSupported!: IContextKey<boolean>;\n\tprivate disassembleRequestSupported!: IContextKey<boolean>;\n\tprivate focusedStackFrameHasInstructionPointerReference!: IContextKey<boolean>;\n\n\tconstructor(private contextKeyService: IContextKeyService) {\n\t\tcontextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.expressionSelectedContextKey =\n\t\t\t\tCONTEXT_EXPRESSION_SELECTED.bindTo(contextKeyService);\n\t\t\tthis.loadedScriptsSupportedContextKey =\n\t\t\t\tCONTEXT_LOADED_SCRIPTS_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.stepBackSupportedContextKey =\n\t\t\t\tCONTEXT_STEP_BACK_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.focusedSessionIsAttach =\n\t\t\t\tCONTEXT_FOCUSED_SESSION_IS_ATTACH.bindTo(contextKeyService);\n\t\t\tthis.focusedSessionIsNoDebug =\n\t\t\t\tCONTEXT_FOCUSED_SESSION_IS_NO_DEBUG.bindTo(contextKeyService);\n\t\t\tthis.restartFrameSupportedContextKey =\n\t\t\t\tCONTEXT_RESTART_FRAME_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.stepIntoTargetsSupported =\n\t\t\t\tCONTEXT_STEP_INTO_TARGETS_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.jumpToCursorSupported =\n\t\t\t\tCONTEXT_JUMP_TO_CURSOR_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.setVariableSupported =\n\t\t\t\tCONTEXT_SET_VARIABLE_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.setDataBreakpointAtByteSupported =\n\t\t\t\tCONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED.bindTo(\n\t\t\t\t\tcontextKeyService,\n\t\t\t\t);\n\t\t\tthis.setExpressionSupported =\n\t\t\t\tCONTEXT_SET_EXPRESSION_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.multiSessionDebug =\n\t\t\t\tCONTEXT_MULTI_SESSION_DEBUG.bindTo(contextKeyService);\n\t\t\tthis.terminateDebuggeeSupported =\n\t\t\t\tCONTEXT_TERMINATE_DEBUGGEE_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.suspendDebuggeeSupported =\n\t\t\t\tCONTEXT_SUSPEND_DEBUGGEE_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.disassembleRequestSupported =\n\t\t\t\tCONTEXT_DISASSEMBLE_REQUEST_SUPPORTED.bindTo(contextKeyService);\n\t\t\tthis.focusedStackFrameHasInstructionPointerReference =\n\t\t\t\tCONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE.bindTo(\n\t\t\t\t\tcontextKeyService,\n\t\t\t\t);\n\t\t});\n\t}\n\n\tgetId(): string {\n\t\treturn \"root\";\n\t}\n\n\tget focusedSession(): IDebugSession | undefined {\n\t\treturn this._focusedSession;\n\t}\n\n\tget focusedThread(): IThread | undefined {\n\t\treturn this._focusedThread;\n\t}\n\n\tget focusedStackFrame(): IStackFrame | undefined {\n\t\treturn this._focusedStackFrame;\n\t}\n\n\tsetFocus(\n\t\tstackFrame: IStackFrame | undefined,\n\t\tthread: IThread | undefined,\n\t\tsession: IDebugSession | undefined,\n\t\texplicit: boolean,\n\t): void {\n\t\tconst shouldEmitForStackFrame = this._focusedStackFrame !== stackFrame;\n\t\tconst shouldEmitForSession = this._focusedSession !== session;\n\t\tconst shouldEmitForThread = this._focusedThread !== thread;\n\n\t\tthis._focusedStackFrame = stackFrame;\n\t\tthis._focusedThread = thread;\n\t\tthis._focusedSession = session;\n\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.loadedScriptsSupportedContextKey.set(\n\t\t\t\t!!session?.capabilities.supportsLoadedSourcesRequest,\n\t\t\t);\n\t\t\tthis.stepBackSupportedContextKey.set(\n\t\t\t\t!!session?.capabilities.supportsStepBack,\n\t\t\t);\n\t\t\tthis.restartFrameSupportedContextKey.set(\n\t\t\t\t!!session?.capabilities.supportsRestartFrame,\n\t\t\t);\n\t\t\tthis.stepIntoTargetsSupported.set(\n\t\t\t\t!!session?.capabilities.supportsStepInTargetsRequest,\n\t\t\t);\n\t\t\tthis.jumpToCursorSupported.set(\n\t\t\t\t!!session?.capabilities.supportsGotoTargetsRequest,\n\t\t\t);\n\t\t\tthis.setVariableSupported.set(\n\t\t\t\t!!session?.capabilities.supportsSetVariable,\n\t\t\t);\n\t\t\tthis.setDataBreakpointAtByteSupported.set(\n\t\t\t\t!!session?.capabilities.supportsDataBreakpointBytes,\n\t\t\t);\n\t\t\tthis.setExpressionSupported.set(\n\t\t\t\t!!session?.capabilities.supportsSetExpression,\n\t\t\t);\n\t\t\tthis.terminateDebuggeeSupported.set(\n\t\t\t\t!!session?.capabilities.supportTerminateDebuggee,\n\t\t\t);\n\t\t\tthis.suspendDebuggeeSupported.set(\n\t\t\t\t!!session?.capabilities.supportSuspendDebuggee,\n\t\t\t);\n\t\t\tthis.disassembleRequestSupported.set(\n\t\t\t\t!!session?.capabilities.supportsDisassembleRequest,\n\t\t\t);\n\t\t\tthis.focusedStackFrameHasInstructionPointerReference.set(\n\t\t\t\t!!stackFrame?.instructionPointerReference,\n\t\t\t);\n\t\t\tconst attach = !!session && isSessionAttach(session);\n\t\t\tthis.focusedSessionIsAttach.set(attach);\n\t\t\tthis.focusedSessionIsNoDebug.set(\n\t\t\t\t!!session && !!session.configuration.noDebug,\n\t\t\t);\n\t\t});\n\n\t\tif (shouldEmitForSession) {\n\t\t\tthis._onDidFocusSession.fire(session);\n\t\t}\n\n\t\t// should not call onDidFocusThread if onDidFocusStackFrame is called.\n\t\tif (shouldEmitForStackFrame) {\n\t\t\tthis._onDidFocusStackFrame.fire({ stackFrame, explicit, session });\n\t\t} else if (shouldEmitForThread) {\n\t\t\tthis._onDidFocusThread.fire({ thread, explicit, session });\n\t\t}\n\t}\n\n\tget onDidFocusSession(): Event<IDebugSession | undefined> {\n\t\treturn this._onDidFocusSession.event;\n\t}\n\n\tget onDidFocusThread(): Event<{\n\t\tthread: IThread | undefined;\n\t\texplicit: boolean;\n\t\tsession: IDebugSession | undefined;\n\t}> {\n\t\treturn this._onDidFocusThread.event;\n\t}\n\n\tget onDidFocusStackFrame(): Event<{\n\t\tstackFrame: IStackFrame | undefined;\n\t\texplicit: boolean;\n\t\tsession: IDebugSession | undefined;\n\t}> {\n\t\treturn this._onDidFocusStackFrame.event;\n\t}\n\n\tget onDidChangeVisualization() {\n\t\treturn this._onDidChangeVisualization.event;\n\t}\n\n\tgetSelectedExpression():\n\t\t| { expression: IExpression; settingWatch: boolean }\n\t\t| undefined {\n\t\treturn this.selectedExpression;\n\t}\n\n\tsetSelectedExpression(\n\t\texpression: IExpression | undefined,\n\t\tsettingWatch: boolean,\n\t) {\n\t\tthis.selectedExpression = expression\n\t\t\t? { expression, settingWatch: settingWatch }\n\t\t\t: undefined;\n\t\tthis.expressionSelectedContextKey.set(!!expression);\n\t\tthis._onDidSelectExpression.fire(this.selectedExpression);\n\t}\n\n\tget onDidSelectExpression(): Event<\n\t\t{ expression: IExpression; settingWatch: boolean } | undefined\n\t> {\n\t\treturn this._onDidSelectExpression.event;\n\t}\n\n\tget onDidEvaluateLazyExpression(): Event<IExpressionContainer> {\n\t\treturn this._onDidEvaluateLazyExpression.event;\n\t}\n\n\tupdateViews(): void {\n\t\tthis._onWillUpdateViews.fire();\n\t}\n\n\tget onWillUpdateViews(): Event<void> {\n\t\treturn this._onWillUpdateViews.event;\n\t}\n\n\tisMultiSessionView(): boolean {\n\t\treturn !!this.multiSessionDebug.get();\n\t}\n\n\tsetMultiSessionView(isMultiSessionView: boolean): void {\n\t\tthis.multiSessionDebug.set(isMultiSessionView);\n\t}\n\n\tsetVisualizedExpression(\n\t\toriginal: IExpression,\n\t\tvisualized: (IExpression & { treeId: string }) | undefined,\n\t): void {\n\t\tconst current = this.visualized.get(original) || original;\n\t\tconst key = this.getPreferredVisualizedKey(original);\n\t\tif (visualized) {\n\t\t\tthis.visualized.set(original, visualized);\n\t\t\tthis.preferredVisualizers.set(key, visualized.treeId);\n\t\t} else {\n\t\t\tthis.visualized.delete(original);\n\t\t\tthis.preferredVisualizers.delete(key);\n\t\t}\n\t\tthis._onDidChangeVisualization.fire({\n\t\t\toriginal: current,\n\t\t\treplacement: visualized || original,\n\t\t});\n\t}\n\n\tgetVisualizedExpression(\n\t\texpression: IExpression,\n\t): IExpression | string | undefined {\n\t\treturn (\n\t\t\tthis.visualized.get(expression) ||\n\t\t\tthis.preferredVisualizers.get(\n\t\t\t\tthis.getPreferredVisualizedKey(expression),\n\t\t\t)\n\t\t);\n\t}\n\n\tasync evaluateLazyExpression(\n\t\texpression: IExpressionContainer,\n\t): Promise<void> {\n\t\tawait expression.evaluateLazy();\n\t\tthis._onDidEvaluateLazyExpression.fire(expression);\n\t}\n\n\tprivate getPreferredVisualizedKey(expr: IExpression) {\n\t\treturn JSON.stringify(\n\t\t\t[expr.name, expr.type, !!expr.memoryReference].join(\"\\0\"),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
