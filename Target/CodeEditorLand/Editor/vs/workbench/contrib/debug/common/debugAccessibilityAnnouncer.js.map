{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugAccessibilityAnnouncer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { IAccessibilityService } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IDebugService } from \"./debug.js\";\nimport { Expression } from \"./debugModel.js\";\n\nexport class DebugWatchAccessibilityAnnouncer\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic ID = \"workbench.contrib.debugWatchAccessibilityAnnouncer\";\n\tprivate readonly _listener: MutableDisposable<IDisposable> = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IAccessibilityService\n\t\tprivate readonly _accessibilityService: IAccessibilityService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._setListener();\n\t\tthis._register(\n\t\t\t_configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\"accessibility.debugWatchVariableAnnouncements\",\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._setListener();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _setListener(): void {\n\t\tconst value = this._configurationService.getValue(\n\t\t\t\"accessibility.debugWatchVariableAnnouncements\",\n\t\t);\n\t\tif (value && !this._listener.value) {\n\t\t\tthis._listener.value = this._debugService\n\t\t\t\t.getModel()\n\t\t\t\t.onDidChangeWatchExpressionValue((e) => {\n\t\t\t\t\tif (!e || e.value === Expression.DEFAULT_VALUE) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO: get user feedback, perhaps setting to configure verbosity + whether value, name, neither, or both are announced\n\t\t\t\t\tthis._accessibilityService.alert(`${e.name} = ${e.value}`);\n\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t`debugAccessibilityAnnouncerValueChanged ${e.name} ${e.value}`,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis._listener.clear();\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAE5B,SAAS,qBAAqB;AAC9B,SAAS,kBAAkB;AAEpB,IAAM,mCAAN,cACE,WAET;AAAA,EAKC,YACiC,eACF,aAEb,uBAEA,uBAChB;AACD,UAAM;AAP0B;AACF;AAEb;AAEA;AAGjB,SAAK,aAAa;AAClB,SAAK;AAAA,MACJ,sBAAsB,yBAAyB,CAAC,MAAM;AACrD,YACC,EAAE;AAAA,UACD;AAAA,QACD,GACC;AACD,eAAK,aAAa;AAAA,QACnB;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EA9CD,OAoBA;AAAA;AAAA;AAAA,EACC,OAAO,KAAK;AAAA,EACK,YAA4C,KAAK;AAAA,IACjE,IAAI,kBAAkB;AAAA,EACvB;AAAA,EAwBQ,eAAqB;AAC5B,UAAM,QAAQ,KAAK,sBAAsB;AAAA,MACxC;AAAA,IACD;AACA,QAAI,SAAS,CAAC,KAAK,UAAU,OAAO;AACnC,WAAK,UAAU,QAAQ,KAAK,cAC1B,SAAS,EACT,gCAAgC,CAAC,MAAM;AACvC,YAAI,CAAC,KAAK,EAAE,UAAU,WAAW,eAAe;AAC/C;AAAA,QACD;AAGA,aAAK,sBAAsB,MAAM,GAAG,EAAE,IAAI,MAAM,EAAE,KAAK,EAAE;AACzD,aAAK,YAAY;AAAA,UAChB,2CAA2C,EAAE,IAAI,IAAI,EAAE,KAAK;AAAA,QAC7D;AAAA,MACD,CAAC;AAAA,IACH,OAAO;AACN,WAAK,UAAU,MAAM;AAAA,IACtB;AAAA,EACD;AACD;AArDa,mCAAN;AAAA,EASJ;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,GAbU;",
  "names": []
}
