{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugger.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { isObject } from '../../../../base/common/types.js';\nimport { IJSONSchema, IJSONSchemaMap, IJSONSchemaSnippet } from '../../../../base/common/jsonSchema.js';\nimport { IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { IConfig, IDebuggerContribution, IDebugAdapter, IDebugger, IDebugSession, IAdapterManager, IDebugService, debuggerDisabledMessage, IDebuggerMetadata, DebugConfigurationProviderTriggerKind } from './debug.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport * as ConfigurationResolverUtils from '../../../services/configurationResolver/common/configurationResolverUtils.js';\nimport { ITextResourcePropertiesService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { isDebuggerMainContribution } from './debugUtils.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { ITelemetryEndpoint } from '../../../../platform/telemetry/common/telemetry.js';\nimport { cleanRemoteAuthority } from '../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { ContextKeyExpr, ContextKeyExpression, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { filter } from '../../../../base/common/objects.js';\n\nexport class Debugger implements IDebugger, IDebuggerMetadata {\n\n\tprivate debuggerContribution: IDebuggerContribution;\n\tprivate mergedExtensionDescriptions: IExtensionDescription[] = [];\n\tprivate mainExtensionDescription: IExtensionDescription | undefined;\n\n\tprivate debuggerWhen: ContextKeyExpression | undefined;\n\tprivate debuggerHiddenWhen: ContextKeyExpression | undefined;\n\n\tconstructor(\n\t\tprivate adapterManager: IAdapterManager,\n\t\tdbgContribution: IDebuggerContribution,\n\t\textensionDescription: IExtensionDescription,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService private readonly resourcePropertiesService: ITextResourcePropertiesService,\n\t\t@IConfigurationResolverService private readonly configurationResolverService: IConfigurationResolverService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tthis.debuggerContribution = { type: dbgContribution.type };\n\t\tthis.merge(dbgContribution, extensionDescription);\n\n\t\tthis.debuggerWhen = typeof this.debuggerContribution.when === 'string' ? ContextKeyExpr.deserialize(this.debuggerContribution.when) : undefined;\n\t\tthis.debuggerHiddenWhen = typeof this.debuggerContribution.hiddenWhen === 'string' ? ContextKeyExpr.deserialize(this.debuggerContribution.hiddenWhen) : undefined;\n\t}\n\n\tmerge(otherDebuggerContribution: IDebuggerContribution, extensionDescription: IExtensionDescription): void {\n\n\t\t/**\n\t\t * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\n\t\t * if existing non-structured properties on the destination should be overwritten or not. Defaults to true (overwrite).\n\t\t */\n\t\tfunction mixin(destination: any, source: any, overwrite: boolean, level = 0): any {\n\n\t\t\tif (!isObject(destination)) {\n\t\t\t\treturn source;\n\t\t\t}\n\n\t\t\tif (isObject(source)) {\n\t\t\t\tObject.keys(source).forEach(key => {\n\t\t\t\t\tif (key !== '__proto__') {\n\t\t\t\t\t\tif (isObject(destination[key]) && isObject(source[key])) {\n\t\t\t\t\t\t\tmixin(destination[key], source[key], overwrite, level + 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (key in destination) {\n\t\t\t\t\t\t\t\tif (overwrite) {\n\t\t\t\t\t\t\t\t\tif (level === 0 && key === 'type') {\n\t\t\t\t\t\t\t\t\t\t// don't merge the 'type' property\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdestination[key] = source[key];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdestination[key] = source[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn destination;\n\t\t}\n\n\t\t// only if not already merged\n\t\tif (this.mergedExtensionDescriptions.indexOf(extensionDescription) < 0) {\n\n\t\t\t// remember all extensions that have been merged for this debugger\n\t\t\tthis.mergedExtensionDescriptions.push(extensionDescription);\n\n\t\t\t// merge new debugger contribution into existing contributions (and don't overwrite values in built-in extensions)\n\t\t\tmixin(this.debuggerContribution, otherDebuggerContribution, extensionDescription.isBuiltin);\n\n\t\t\t// remember the extension that is considered the \"main\" debugger contribution\n\t\t\tif (isDebuggerMainContribution(otherDebuggerContribution)) {\n\t\t\t\tthis.mainExtensionDescription = extensionDescription;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync startDebugging(configuration: IConfig, parentSessionId: string): Promise<boolean> {\n\t\tconst parentSession = this.debugService.getModel().getSession(parentSessionId);\n\t\treturn await this.debugService.startDebugging(undefined, configuration, { parentSession }, undefined);\n\t}\n\n\tasync createDebugAdapter(session: IDebugSession): Promise<IDebugAdapter> {\n\t\tawait this.adapterManager.activateDebuggers('onDebugAdapterProtocolTracker', this.type);\n\t\tconst da = this.adapterManager.createDebugAdapter(session);\n\t\tif (da) {\n\t\t\treturn Promise.resolve(da);\n\t\t}\n\t\tthrow new Error(nls.localize('cannot.find.da', \"Cannot find debug adapter for type '{0}'.\", this.type));\n\t}\n\n\tasync substituteVariables(folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\tconst substitutedConfig = await this.adapterManager.substituteVariables(this.type, folder, config);\n\t\treturn await this.configurationResolverService.resolveWithInteractionReplace(folder, substitutedConfig, 'launch', this.variables, substitutedConfig.__configurationTarget);\n\t}\n\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\treturn this.adapterManager.runInTerminal(this.type, args, sessionId);\n\t}\n\n\tget label(): string {\n\t\treturn this.debuggerContribution.label || this.debuggerContribution.type;\n\t}\n\n\tget type(): string {\n\t\treturn this.debuggerContribution.type;\n\t}\n\n\tget variables(): { [key: string]: string } | undefined {\n\t\treturn this.debuggerContribution.variables;\n\t}\n\n\tget configurationSnippets(): IJSONSchemaSnippet[] | undefined {\n\t\treturn this.debuggerContribution.configurationSnippets;\n\t}\n\n\tget languages(): string[] | undefined {\n\t\treturn this.debuggerContribution.languages;\n\t}\n\n\tget when(): ContextKeyExpression | undefined {\n\t\treturn this.debuggerWhen;\n\t}\n\n\tget hiddenWhen(): ContextKeyExpression | undefined {\n\t\treturn this.debuggerHiddenWhen;\n\t}\n\n\tget enabled() {\n\t\treturn !this.debuggerWhen || this.contextKeyService.contextMatchesRules(this.debuggerWhen);\n\t}\n\n\tget isHiddenFromDropdown() {\n\t\tif (!this.debuggerHiddenWhen) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.contextKeyService.contextMatchesRules(this.debuggerHiddenWhen);\n\t}\n\n\tget strings() {\n\t\treturn this.debuggerContribution.strings ?? (this.debuggerContribution as any).uiMessages;\n\t}\n\n\tinterestedInLanguage(languageId: string): boolean {\n\t\treturn !!(this.languages && this.languages.indexOf(languageId) >= 0);\n\t}\n\n\thasInitialConfiguration(): boolean {\n\t\treturn !!this.debuggerContribution.initialConfigurations;\n\t}\n\n\thasDynamicConfigurationProviders(): boolean {\n\t\treturn this.debugService.getConfigurationManager().hasDebugConfigurationProvider(this.type, DebugConfigurationProviderTriggerKind.Dynamic);\n\t}\n\n\thasConfigurationProvider(): boolean {\n\t\treturn this.debugService.getConfigurationManager().hasDebugConfigurationProvider(this.type);\n\t}\n\n\tgetInitialConfigurationContent(initialConfigs?: IConfig[]): Promise<string> {\n\t\t// at this point we got some configs from the package.json and/or from registered DebugConfigurationProviders\n\t\tlet initialConfigurations = this.debuggerContribution.initialConfigurations || [];\n\t\tif (initialConfigs) {\n\t\t\tinitialConfigurations = initialConfigurations.concat(initialConfigs);\n\t\t}\n\n\t\tconst eol = this.resourcePropertiesService.getEOL(URI.from({ scheme: Schemas.untitled, path: '1' })) === '\\r\\n' ? '\\r\\n' : '\\n';\n\t\tconst configs = JSON.stringify(initialConfigurations, null, '\\t').split('\\n').map(line => '\\t' + line).join(eol).trim();\n\t\tconst comment1 = nls.localize('launch.config.comment1', \"Use IntelliSense to learn about possible attributes.\");\n\t\tconst comment2 = nls.localize('launch.config.comment2', \"Hover to view descriptions of existing attributes.\");\n\t\tconst comment3 = nls.localize('launch.config.comment3', \"For more information, visit: {0}\", 'https://go.microsoft.com/fwlink/?linkid=830387');\n\n\t\tlet content = [\n\t\t\t'{',\n\t\t\t`\\t// ${comment1}`,\n\t\t\t`\\t// ${comment2}`,\n\t\t\t`\\t// ${comment3}`,\n\t\t\t`\\t\"version\": \"0.2.0\",`,\n\t\t\t`\\t\"configurations\": ${configs}`,\n\t\t\t'}'\n\t\t].join(eol);\n\n\t\t// fix formatting\n\t\tconst editorConfig = this.configurationService.getValue<any>();\n\t\tif (editorConfig.editor && editorConfig.editor.insertSpaces) {\n\t\t\tcontent = content.replace(new RegExp('\\t', 'g'), ' '.repeat(editorConfig.editor.tabSize));\n\t\t}\n\n\t\treturn Promise.resolve(content);\n\t}\n\n\tgetMainExtensionDescriptor(): IExtensionDescription {\n\t\treturn this.mainExtensionDescription || this.mergedExtensionDescriptions[0];\n\t}\n\n\tgetCustomTelemetryEndpoint(): ITelemetryEndpoint | undefined {\n\t\tconst aiKey = this.debuggerContribution.aiKey;\n\t\tif (!aiKey) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst sendErrorTelemtry = cleanRemoteAuthority(this.environmentService.remoteAuthority) !== 'other';\n\t\treturn {\n\t\t\tid: `${this.getMainExtensionDescriptor().publisher}.${this.type}`,\n\t\t\taiKey,\n\t\t\tsendErrorTelemetry: sendErrorTelemtry\n\t\t};\n\t}\n\n\tgetSchemaAttributes(definitions: IJSONSchemaMap): IJSONSchema[] | null {\n\n\t\tif (!this.debuggerContribution.configurationAttributes) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// fill in the default configuration attributes shared by all adapters.\n\t\treturn Object.keys(this.debuggerContribution.configurationAttributes).map(request => {\n\t\t\tconst definitionId = `${this.type}:${request}`;\n\t\t\tconst platformSpecificDefinitionId = `${this.type}:${request}:platform`;\n\t\t\tconst attributes: IJSONSchema = this.debuggerContribution.configurationAttributes[request];\n\t\t\tconst defaultRequired = ['name', 'type', 'request'];\n\t\t\tattributes.required = attributes.required && attributes.required.length ? defaultRequired.concat(attributes.required) : defaultRequired;\n\t\t\tattributes.additionalProperties = false;\n\t\t\tattributes.type = 'object';\n\t\t\tif (!attributes.properties) {\n\t\t\t\tattributes.properties = {};\n\t\t\t}\n\t\t\tconst properties = attributes.properties;\n\t\t\tproperties['type'] = {\n\t\t\t\tenum: [this.type],\n\t\t\t\tenumDescriptions: [this.label],\n\t\t\t\tdescription: nls.localize('debugType', \"Type of configuration.\"),\n\t\t\t\tpattern: '^(?!node2)',\n\t\t\t\tdeprecationMessage: this.debuggerContribution.deprecated || (this.enabled ? undefined : debuggerDisabledMessage(this.type)),\n\t\t\t\tdoNotSuggest: !!this.debuggerContribution.deprecated,\n\t\t\t\terrorMessage: nls.localize('debugTypeNotRecognised', \"The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.\"),\n\t\t\t\tpatternErrorMessage: nls.localize('node2NotSupported', \"\\\"node2\\\" is no longer supported, use \\\"node\\\" instead and set the \\\"protocol\\\" attribute to \\\"inspector\\\".\")\n\t\t\t};\n\t\t\tproperties['request'] = {\n\t\t\t\tenum: [request],\n\t\t\t\tdescription: nls.localize('debugRequest', \"Request type of configuration. Can be \\\"launch\\\" or \\\"attach\\\".\"),\n\t\t\t};\n\t\t\tfor (const prop in definitions['common'].properties) {\n\t\t\t\tproperties[prop] = {\n\t\t\t\t\t$ref: `#/definitions/common/properties/${prop}`\n\t\t\t\t};\n\t\t\t}\n\t\t\tObject.keys(properties).forEach(name => {\n\t\t\t\t// Use schema allOf property to get independent error reporting #21113\n\t\t\t\tConfigurationResolverUtils.applyDeprecatedVariableMessage(properties[name]);\n\t\t\t});\n\n\t\t\tdefinitions[definitionId] = { ...attributes };\n\t\t\tdefinitions[platformSpecificDefinitionId] = {\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: false,\n\t\t\t\tproperties: filter(properties, key => key !== 'type' && key !== 'request' && key !== 'name')\n\t\t\t};\n\n\t\t\t// Don't add the OS props to the real attributes object so they don't show up in 'definitions'\n\t\t\tconst attributesCopy = { ...attributes };\n\t\t\tattributesCopy.properties = {\n\t\t\t\t...properties,\n\t\t\t\t...{\n\t\t\t\t\twindows: {\n\t\t\t\t\t\t$ref: `#/definitions/${platformSpecificDefinitionId}`,\n\t\t\t\t\t\tdescription: nls.localize('debugWindowsConfiguration', \"Windows specific launch configuration attributes.\"),\n\t\t\t\t\t},\n\t\t\t\t\tosx: {\n\t\t\t\t\t\t$ref: `#/definitions/${platformSpecificDefinitionId}`,\n\t\t\t\t\t\tdescription: nls.localize('debugOSXConfiguration', \"OS X specific launch configuration attributes.\"),\n\t\t\t\t\t},\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\t$ref: `#/definitions/${platformSpecificDefinitionId}`,\n\t\t\t\t\t\tdescription: nls.localize('debugLinuxConfiguration', \"Linux specific launch configuration attributes.\"),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn attributesCopy;\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
