{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugContentProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { ErrorNoTelemetry } from \"../../../../base/common/errors.js\";\nimport type { URI as uri } from \"../../../../base/common/uri.js\";\nimport { EditOperation } from \"../../../../editor/common/core/editOperation.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../../editor/common/languages/modesRegistry.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { IEditorWorkerService } from \"../../../../editor/common/services/editorWorker.js\";\nimport { getMimeTypes } from \"../../../../editor/common/services/languagesAssociations.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport {\n\ttype ITextModelContentProvider,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { DEBUG_SCHEME, IDebugService, type IDebugSession } from \"./debug.js\";\nimport { Source } from \"./debugSource.js\";\n\n/**\n * Debug URI format\n *\n * a debug URI represents a Source object and the debug session where the Source comes from.\n *\n *       debug:arbitrary_path?session=123e4567-e89b-12d3-a456-426655440000&ref=1016\n *       \\___/ \\____________/ \\__________________________________________/ \\______/\n *         |          |                             |                          |\n *      scheme   source.path                    session id            source.reference\n *\n * the arbitrary_path and the session id are encoded with 'encodeURIComponent'\n *\n */\nexport class DebugContentProvider\n\timplements IWorkbenchContribution, ITextModelContentProvider\n{\n\tprivate static INSTANCE: DebugContentProvider;\n\n\tprivate readonly pendingUpdates = new Map<\n\t\tstring,\n\t\tCancellationTokenSource\n\t>();\n\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(DEBUG_SCHEME, this);\n\t\tDebugContentProvider.INSTANCE = this;\n\t}\n\n\tdispose(): void {\n\t\tthis.pendingUpdates.forEach((cancellationSource) =>\n\t\t\tcancellationSource.dispose(),\n\t\t);\n\t}\n\n\tprovideTextContent(resource: uri): Promise<ITextModel> | null {\n\t\treturn this.createOrUpdateContentModel(resource, true);\n\t}\n\n\t/**\n\t * Reload the model content of the given resource.\n\t * If there is no model for the given resource, this method does nothing.\n\t */\n\tstatic refreshDebugContent(resource: uri): void {\n\t\tDebugContentProvider.INSTANCE?.createOrUpdateContentModel(\n\t\t\tresource,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\t/**\n\t * Create or reload the model content of the given resource.\n\t */\n\tprivate createOrUpdateContentModel(\n\t\tresource: uri,\n\t\tcreateIfNotExists: boolean,\n\t): Promise<ITextModel> | null {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model && !createIfNotExists) {\n\t\t\t// nothing to do\n\t\t\treturn null;\n\t\t}\n\n\t\tlet session: IDebugSession | undefined;\n\n\t\tif (resource.query) {\n\t\t\tconst data = Source.getEncodedDebugData(resource);\n\t\t\tsession = this.debugService.getModel().getSession(data.sessionId);\n\t\t}\n\n\t\tif (!session) {\n\t\t\t// fallback: use focused session\n\t\t\tsession = this.debugService.getViewModel().focusedSession;\n\t\t}\n\n\t\tif (!session) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew ErrorNoTelemetry(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"unable\",\n\t\t\t\t\t\t\"Unable to resolve the resource without a debug session\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst createErrModel = (errMsg?: string) => {\n\t\t\tthis.debugService.sourceIsNotAvailable(resource);\n\t\t\tconst languageSelection = this.languageService.createById(\n\t\t\t\tPLAINTEXT_LANGUAGE_ID,\n\t\t\t);\n\t\t\tconst message = errMsg\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"canNotResolveSourceWithError\",\n\t\t\t\t\t\t\"Could not load source '{0}': {1}.\",\n\t\t\t\t\t\tresource.path,\n\t\t\t\t\t\terrMsg,\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"canNotResolveSource\",\n\t\t\t\t\t\t\"Could not load source '{0}'.\",\n\t\t\t\t\t\tresource.path,\n\t\t\t\t\t);\n\t\t\treturn this.modelService.createModel(\n\t\t\t\tmessage,\n\t\t\t\tlanguageSelection,\n\t\t\t\tresource,\n\t\t\t);\n\t\t};\n\n\t\treturn session.loadSource(resource).then(\n\t\t\t(response) => {\n\t\t\t\tif (response && response.body) {\n\t\t\t\t\tif (model) {\n\t\t\t\t\t\tconst newContent = response.body.content;\n\n\t\t\t\t\t\t// cancel and dispose an existing update\n\t\t\t\t\t\tconst cancellationSource = this.pendingUpdates.get(\n\t\t\t\t\t\t\tmodel.id,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcancellationSource?.cancel();\n\n\t\t\t\t\t\t// create and keep update token\n\t\t\t\t\t\tconst myToken = new CancellationTokenSource();\n\t\t\t\t\t\tthis.pendingUpdates.set(model.id, myToken);\n\n\t\t\t\t\t\t// update text model\n\t\t\t\t\t\treturn this.editorWorkerService\n\t\t\t\t\t\t\t.computeMoreMinimalEdits(model.uri, [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: newContent,\n\t\t\t\t\t\t\t\t\trange: model.getFullModelRange(),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t.then((edits) => {\n\t\t\t\t\t\t\t\t// remove token\n\t\t\t\t\t\t\t\tthis.pendingUpdates.delete(model.id);\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t!myToken.token.isCancellationRequested &&\n\t\t\t\t\t\t\t\t\tedits &&\n\t\t\t\t\t\t\t\t\tedits.length > 0\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t// use the evil-edit as these models show in readonly-editor only\n\t\t\t\t\t\t\t\t\tmodel.applyEdits(\n\t\t\t\t\t\t\t\t\t\tedits.map((edit) =>\n\t\t\t\t\t\t\t\t\t\t\tEditOperation.replace(\n\t\t\t\t\t\t\t\t\t\t\t\tRange.lift(edit.range),\n\t\t\t\t\t\t\t\t\t\t\t\tedit.text,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn model;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// create text model\n\t\t\t\t\t\tconst mime =\n\t\t\t\t\t\t\tresponse.body.mimeType || getMimeTypes(resource)[0];\n\t\t\t\t\t\tconst languageSelection =\n\t\t\t\t\t\t\tthis.languageService.createByMimeType(mime);\n\t\t\t\t\t\treturn this.modelService.createModel(\n\t\t\t\t\t\t\tresponse.body.content,\n\t\t\t\t\t\t\tlanguageSelection,\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn createErrModel();\n\t\t\t},\n\t\t\t(err: DebugProtocol.ErrorResponse) => createErrModel(err.message),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,+BAA+B;AACxC,SAAS,wBAAwB;AAEjC,SAAS,qBAAqB;AAC9B,SAAS,aAAa;AACtB,SAAS,wBAAwB;AACjC,SAAS,6BAA6B;AAEtC,SAAS,4BAA4B;AACrC,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAC9B;AAAA,EAEC;AAAA,OACM;AACP,SAAS,gBAAgB;AAEzB,SAAS,cAAc,qBAAyC;AAChE,SAAS,cAAc;AAehB,IAAM,uBAAN,MAEP;AAAA,EAQC,YACoB,0BACa,cACA,cACG,iBACI,qBACtC;AAJ+B;AACA;AACG;AACI;AAEvC,6BAAyB,iCAAiC,cAAc,IAAI;AAC5E,yBAAqB,WAAW;AAAA,EACjC;AAAA,EAzDD,OAwCA;AAAA;AAAA;AAAA,EACC,OAAe;AAAA,EAEE,iBAAiB,oBAAI,IAGpC;AAAA,EAaF,UAAgB;AACf,SAAK,eAAe;AAAA,MAAQ,CAAC,uBAC5B,mBAAmB,QAAQ;AAAA,IAC5B;AAAA,EACD;AAAA,EAEA,mBAAmB,UAA2C;AAC7D,WAAO,KAAK,2BAA2B,UAAU,IAAI;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,oBAAoB,UAAqB;AAC/C,yBAAqB,UAAU;AAAA,MAC9B;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKQ,2BACP,UACA,mBAC6B;AAC7B,UAAM,QAAQ,KAAK,aAAa,SAAS,QAAQ;AACjD,QAAI,CAAC,SAAS,CAAC,mBAAmB;AAEjC,aAAO;AAAA,IACR;AAEA,QAAI;AAEJ,QAAI,SAAS,OAAO;AACnB,YAAM,OAAO,OAAO,oBAAoB,QAAQ;AAChD,gBAAU,KAAK,aAAa,SAAS,EAAE,WAAW,KAAK,SAAS;AAAA,IACjE;AAEA,QAAI,CAAC,SAAS;AAEb,gBAAU,KAAK,aAAa,aAAa,EAAE;AAAA,IAC5C;AAEA,QAAI,CAAC,SAAS;AACb,aAAO,QAAQ;AAAA,QACd,IAAI;AAAA,UACH;AAAA,YACC;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,UAAM,iBAAiB,wBAAC,WAAoB;AAC3C,WAAK,aAAa,qBAAqB,QAAQ;AAC/C,YAAM,oBAAoB,KAAK,gBAAgB;AAAA,QAC9C;AAAA,MACD;AACA,YAAM,UAAU,SACb;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT;AAAA,MACD,IACC;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS;AAAA,MACV;AACF,aAAO,KAAK,aAAa;AAAA,QACxB;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,GAtBuB;AAwBvB,WAAO,QAAQ,WAAW,QAAQ,EAAE;AAAA,MACnC,CAAC,aAAa;AACb,YAAI,YAAY,SAAS,MAAM;AAC9B,cAAI,OAAO;AACV,kBAAM,aAAa,SAAS,KAAK;AAGjC,kBAAM,qBAAqB,KAAK,eAAe;AAAA,cAC9C,MAAM;AAAA,YACP;AACA,gCAAoB,OAAO;AAG3B,kBAAM,UAAU,IAAI,wBAAwB;AAC5C,iBAAK,eAAe,IAAI,MAAM,IAAI,OAAO;AAGzC,mBAAO,KAAK,oBACV,wBAAwB,MAAM,KAAK;AAAA,cACnC;AAAA,gBACC,MAAM;AAAA,gBACN,OAAO,MAAM,kBAAkB;AAAA,cAChC;AAAA,YACD,CAAC,EACA,KAAK,CAAC,UAAU;AAEhB,mBAAK,eAAe,OAAO,MAAM,EAAE;AAEnC,kBACC,CAAC,QAAQ,MAAM,2BACf,SACA,MAAM,SAAS,GACd;AAED,sBAAM;AAAA,kBACL,MAAM;AAAA,oBAAI,CAAC,SACV,cAAc;AAAA,sBACb,MAAM,KAAK,KAAK,KAAK;AAAA,sBACrB,KAAK;AAAA,oBACN;AAAA,kBACD;AAAA,gBACD;AAAA,cACD;AACA,qBAAO;AAAA,YACR,CAAC;AAAA,UACH,OAAO;AAEN,kBAAM,OACL,SAAS,KAAK,YAAY,aAAa,QAAQ,EAAE,CAAC;AACnD,kBAAM,oBACL,KAAK,gBAAgB,iBAAiB,IAAI;AAC3C,mBAAO,KAAK,aAAa;AAAA,cACxB,SAAS,KAAK;AAAA,cACd;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAEA,eAAO,eAAe;AAAA,MACvB;AAAA,MACA,CAAC,QAAqC,eAAe,IAAI,OAAO;AAAA,IACjE;AAAA,EACD;AACD;AArKa,uBAAN;AAAA,EAWJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAfU;",
  "names": []
}
