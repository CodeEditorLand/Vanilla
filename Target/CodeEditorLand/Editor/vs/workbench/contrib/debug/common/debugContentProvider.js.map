{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/common/debugContentProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI as uri } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { getMimeTypes } from '../../../../editor/common/services/languagesAssociations.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { ITextModelService, ITextModelContentProvider } from '../../../../editor/common/services/resolverService.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { DEBUG_SCHEME, IDebugService, IDebugSession } from './debug.js';\nimport { Source } from './debugSource.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { EditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';\nimport { ErrorNoTelemetry } from '../../../../base/common/errors.js';\n\n/**\n * Debug URI format\n *\n * a debug URI represents a Source object and the debug session where the Source comes from.\n *\n *       debug:arbitrary_path?session=123e4567-e89b-12d3-a456-426655440000&ref=1016\n *       \\___/ \\____________/ \\__________________________________________/ \\______/\n *         |          |                             |                          |\n *      scheme   source.path                    session id            source.reference\n *\n * the arbitrary_path and the session id are encoded with 'encodeURIComponent'\n *\n */\nexport class DebugContentProvider implements IWorkbenchContribution, ITextModelContentProvider {\n\n\tprivate static INSTANCE: DebugContentProvider;\n\n\tprivate readonly pendingUpdates = new Map<string, CancellationTokenSource>();\n\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(DEBUG_SCHEME, this);\n\t\tDebugContentProvider.INSTANCE = this;\n\t}\n\n\tdispose(): void {\n\t\tthis.pendingUpdates.forEach(cancellationSource => cancellationSource.dispose());\n\t}\n\n\tprovideTextContent(resource: uri): Promise<ITextModel> | null {\n\t\treturn this.createOrUpdateContentModel(resource, true);\n\t}\n\n\t/**\n\t * Reload the model content of the given resource.\n\t * If there is no model for the given resource, this method does nothing.\n\t */\n\tstatic refreshDebugContent(resource: uri): void {\n\t\tDebugContentProvider.INSTANCE?.createOrUpdateContentModel(resource, false);\n\t}\n\n\t/**\n\t * Create or reload the model content of the given resource.\n\t */\n\tprivate createOrUpdateContentModel(resource: uri, createIfNotExists: boolean): Promise<ITextModel> | null {\n\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model && !createIfNotExists) {\n\t\t\t// nothing to do\n\t\t\treturn null;\n\t\t}\n\n\t\tlet session: IDebugSession | undefined;\n\n\t\tif (resource.query) {\n\t\t\tconst data = Source.getEncodedDebugData(resource);\n\t\t\tsession = this.debugService.getModel().getSession(data.sessionId);\n\t\t}\n\n\t\tif (!session) {\n\t\t\t// fallback: use focused session\n\t\t\tsession = this.debugService.getViewModel().focusedSession;\n\t\t}\n\n\t\tif (!session) {\n\t\t\treturn Promise.reject(new ErrorNoTelemetry(localize('unable', \"Unable to resolve the resource without a debug session\")));\n\t\t}\n\t\tconst createErrModel = (errMsg?: string) => {\n\t\t\tthis.debugService.sourceIsNotAvailable(resource);\n\t\t\tconst languageSelection = this.languageService.createById(PLAINTEXT_LANGUAGE_ID);\n\t\t\tconst message = errMsg\n\t\t\t\t? localize('canNotResolveSourceWithError', \"Could not load source '{0}': {1}.\", resource.path, errMsg)\n\t\t\t\t: localize('canNotResolveSource', \"Could not load source '{0}'.\", resource.path);\n\t\t\treturn this.modelService.createModel(message, languageSelection, resource);\n\t\t};\n\n\t\treturn session.loadSource(resource).then(response => {\n\n\t\t\tif (response && response.body) {\n\n\t\t\t\tif (model) {\n\n\t\t\t\t\tconst newContent = response.body.content;\n\n\t\t\t\t\t// cancel and dispose an existing update\n\t\t\t\t\tconst cancellationSource = this.pendingUpdates.get(model.id);\n\t\t\t\t\tcancellationSource?.cancel();\n\n\t\t\t\t\t// create and keep update token\n\t\t\t\t\tconst myToken = new CancellationTokenSource();\n\t\t\t\t\tthis.pendingUpdates.set(model.id, myToken);\n\n\t\t\t\t\t// update text model\n\t\t\t\t\treturn this.editorWorkerService.computeMoreMinimalEdits(model.uri, [{ text: newContent, range: model.getFullModelRange() }]).then(edits => {\n\n\t\t\t\t\t\t// remove token\n\t\t\t\t\t\tthis.pendingUpdates.delete(model.id);\n\n\t\t\t\t\t\tif (!myToken.token.isCancellationRequested && edits && edits.length > 0) {\n\t\t\t\t\t\t\t// use the evil-edit as these models show in readonly-editor only\n\t\t\t\t\t\t\tmodel.applyEdits(edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn model;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// create text model\n\t\t\t\t\tconst mime = response.body.mimeType || getMimeTypes(resource)[0];\n\t\t\t\t\tconst languageSelection = this.languageService.createByMimeType(mime);\n\t\t\t\t\treturn this.modelService.createModel(response.body.content, languageSelection, resource);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn createErrModel();\n\n\t\t}, (err: DebugProtocol.ErrorResponse) => createErrModel(err.message));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
