{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/node/debugAdapter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from \"child_process\";\nimport * as net from \"net\";\nimport type * as stream from \"stream\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport * as path from \"../../../../base/common/path.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { Promises } from \"../../../../base/node/pfs.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { IExtensionDescription } from \"../../../../platform/extensions/common/extensions.js\";\nimport { AbstractDebugAdapter } from \"../common/abstractDebugAdapter.js\";\nimport type {\n\tIDebugAdapterExecutable,\n\tIDebugAdapterNamedPipeServer,\n\tIDebugAdapterServer,\n\tIDebuggerContribution,\n\tIPlatformSpecificAdapterContribution,\n} from \"../common/debug.js\";\n\n/**\n * An implementation that communicates via two streams with the debug adapter.\n */\nexport abstract class StreamDebugAdapter extends AbstractDebugAdapter {\n\tprivate static readonly TWO_CRLF = \"\\r\\n\\r\\n\";\n\tprivate static readonly HEADER_LINESEPARATOR = /\\r?\\n/; // allow for non-RFC 2822 conforming line separators\n\tprivate static readonly HEADER_FIELDSEPARATOR = /: */;\n\n\tprivate outputStream!: stream.Writable;\n\tprivate rawData = Buffer.allocUnsafe(0);\n\tprivate contentLength = -1;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprotected connect(\n\t\treadable: stream.Readable,\n\t\twritable: stream.Writable,\n\t): void {\n\t\tthis.outputStream = writable;\n\t\tthis.rawData = Buffer.allocUnsafe(0);\n\t\tthis.contentLength = -1;\n\n\t\treadable.on(\"data\", (data: Buffer) => this.handleData(data));\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tif (this.outputStream) {\n\t\t\tconst json = JSON.stringify(message);\n\t\t\tthis.outputStream.write(\n\t\t\t\t`Content-Length: ${Buffer.byteLength(json, \"utf8\")}${StreamDebugAdapter.TWO_CRLF}${json}`,\n\t\t\t\t\"utf8\",\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate handleData(data: Buffer): void {\n\t\tthis.rawData = Buffer.concat([this.rawData, data]);\n\n\t\twhile (true) {\n\t\t\tif (this.contentLength >= 0) {\n\t\t\t\tif (this.rawData.length >= this.contentLength) {\n\t\t\t\t\tconst message = this.rawData.toString(\n\t\t\t\t\t\t\"utf8\",\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tthis.contentLength,\n\t\t\t\t\t);\n\t\t\t\t\tthis.rawData = this.rawData.slice(this.contentLength);\n\t\t\t\t\tthis.contentLength = -1;\n\t\t\t\t\tif (message.length > 0) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.acceptMessage(\n\t\t\t\t\t\t\t\t<DebugProtocol.ProtocolMessage>(\n\t\t\t\t\t\t\t\t\tJSON.parse(message)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tthis._onError.fire(\n\t\t\t\t\t\t\t\tnew Error((e.message || e) + \"\\n\" + message),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontinue; // there may be more complete messages to process\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst idx = this.rawData.indexOf(StreamDebugAdapter.TWO_CRLF);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tconst header = this.rawData.toString(\"utf8\", 0, idx);\n\t\t\t\t\tconst lines = header.split(\n\t\t\t\t\t\tStreamDebugAdapter.HEADER_LINESEPARATOR,\n\t\t\t\t\t);\n\t\t\t\t\tfor (const h of lines) {\n\t\t\t\t\t\tconst kvPair = h.split(\n\t\t\t\t\t\t\tStreamDebugAdapter.HEADER_FIELDSEPARATOR,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (kvPair[0] === \"Content-Length\") {\n\t\t\t\t\t\t\tthis.contentLength = Number(kvPair[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.rawData = this.rawData.slice(\n\t\t\t\t\t\tidx + StreamDebugAdapter.TWO_CRLF.length,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport abstract class NetworkDebugAdapter extends StreamDebugAdapter {\n\tprotected socket?: net.Socket;\n\n\tprotected abstract createConnection(\n\t\tconnectionListener: () => void,\n\t): net.Socket;\n\n\tstartSession(): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tlet connected = false;\n\n\t\t\tthis.socket = this.createConnection(() => {\n\t\t\t\tthis.connect(this.socket!, this.socket!);\n\t\t\t\tresolve();\n\t\t\t\tconnected = true;\n\t\t\t});\n\n\t\t\tthis.socket.on(\"close\", () => {\n\t\t\t\tif (connected) {\n\t\t\t\t\tthis._onError.fire(new Error(\"connection closed\"));\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error(\"connection closed\"));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.socket.on(\"error\", (error) => {\n\t\t\t\tif (connected) {\n\t\t\t\t\tthis._onError.fire(error);\n\t\t\t\t} else {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync stopSession(): Promise<void> {\n\t\tawait this.cancelPendingRequests();\n\t\tif (this.socket) {\n\t\t\tthis.socket.end();\n\t\t\tthis.socket = undefined;\n\t\t}\n\t}\n}\n\n/**\n * An implementation that connects to a debug adapter via a socket.\n */\nexport class SocketDebugAdapter extends NetworkDebugAdapter {\n\tconstructor(private adapterServer: IDebugAdapterServer) {\n\t\tsuper();\n\t}\n\n\tprotected createConnection(connectionListener: () => void): net.Socket {\n\t\treturn net.createConnection(\n\t\t\tthis.adapterServer.port,\n\t\t\tthis.adapterServer.host || \"127.0.0.1\",\n\t\t\tconnectionListener,\n\t\t);\n\t}\n}\n\n/**\n * An implementation that connects to a debug adapter via a NamedPipe (on Windows)/UNIX Domain Socket (on non-Windows).\n */\nexport class NamedPipeDebugAdapter extends NetworkDebugAdapter {\n\tconstructor(private adapterServer: IDebugAdapterNamedPipeServer) {\n\t\tsuper();\n\t}\n\n\tprotected createConnection(connectionListener: () => void): net.Socket {\n\t\treturn net.createConnection(\n\t\t\tthis.adapterServer.path,\n\t\t\tconnectionListener,\n\t\t);\n\t}\n}\n\n/**\n * An implementation that launches the debug adapter as a separate process and communicates via stdin/stdout.\n */\nexport class ExecutableDebugAdapter extends StreamDebugAdapter {\n\tprivate serverProcess: cp.ChildProcess | undefined;\n\n\tconstructor(\n\t\tprivate adapterExecutable: IDebugAdapterExecutable,\n\t\tprivate debugType: string,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync startSession(): Promise<void> {\n\t\tconst command = this.adapterExecutable.command;\n\t\tconst args = this.adapterExecutable.args;\n\t\tconst options = this.adapterExecutable.options || {};\n\n\t\ttry {\n\t\t\t// verify executables asynchronously\n\t\t\tif (command) {\n\t\t\t\tif (path.isAbsolute(command)) {\n\t\t\t\t\tconst commandExists = await Promises.exists(command);\n\t\t\t\t\tif (!commandExists) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"debugAdapterBinNotFound\",\n\t\t\t\t\t\t\t\t\"Debug adapter executable '{0}' does not exist.\",\n\t\t\t\t\t\t\t\tcommand,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// relative path\n\t\t\t\t\tif (command.indexOf(\"/\") < 0 && command.indexOf(\"\\\\\") < 0) {\n\t\t\t\t\t\t// no separators: command looks like a runtime name like 'node' or 'mono'\n\t\t\t\t\t\t// TODO: check that the runtime is available on PATH\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"debugAdapterCannotDetermineExecutable\",\n\t\t\t\t\t\t\tcomment: [\"Adapter executable file not found\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Cannot determine executable for debug adapter '{0}'.\",\n\t\t\t\t\t\tthis.debugType,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet env = process.env;\n\t\t\tif (options.env && Object.keys(options.env).length > 0) {\n\t\t\t\tenv = objects.mixin(\n\t\t\t\t\tobjects.deepClone(process.env),\n\t\t\t\t\toptions.env,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (command === \"node\") {\n\t\t\t\tif (Array.isArray(args) && args.length > 0) {\n\t\t\t\t\tconst isElectron =\n\t\t\t\t\t\t!!process.env[\"ELECTRON_RUN_AS_NODE\"] ||\n\t\t\t\t\t\t!!process.versions[\"electron\"];\n\t\t\t\t\tconst forkOptions: cp.ForkOptions = {\n\t\t\t\t\t\tenv: env,\n\t\t\t\t\t\texecArgv: isElectron\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\"-e\",\n\t\t\t\t\t\t\t\t\t\"delete process.env.ELECTRON_RUN_AS_NODE;require(process.argv[1])\",\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\tsilent: true,\n\t\t\t\t\t};\n\t\t\t\t\tif (options.cwd) {\n\t\t\t\t\t\tforkOptions.cwd = options.cwd;\n\t\t\t\t\t}\n\t\t\t\t\tconst child = cp.fork(args[0], args.slice(1), forkOptions);\n\t\t\t\t\tif (!child.pid) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"unableToLaunchDebugAdapter\",\n\t\t\t\t\t\t\t\t\"Unable to launch debug adapter from '{0}'.\",\n\t\t\t\t\t\t\t\targs[0],\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthis.serverProcess = child;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"unableToLaunchDebugAdapterNoArgs\",\n\t\t\t\t\t\t\t\"Unable to launch debug adapter.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet spawnCommand = command;\n\t\t\t\tlet spawnArgs = args;\n\t\t\t\tconst spawnOptions: cp.SpawnOptions = {\n\t\t\t\t\tenv: env,\n\t\t\t\t};\n\t\t\t\tif (options.cwd) {\n\t\t\t\t\tspawnOptions.cwd = options.cwd;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tplatform.isWindows &&\n\t\t\t\t\t(command.endsWith(\".bat\") || command.endsWith(\".cmd\"))\n\t\t\t\t) {\n\t\t\t\t\t// https://github.com/microsoft/vscode/issues/224184\n\t\t\t\t\tspawnOptions.shell = true;\n\t\t\t\t\tspawnCommand = `\"${command}\"`;\n\t\t\t\t\tspawnArgs = args.map((a) => {\n\t\t\t\t\t\ta = a.replace(/\"/g, '\\\\\"'); // Escape existing double quotes with \\\n\t\t\t\t\t\t// Wrap in double quotes\n\t\t\t\t\t\treturn `\"${a}\"`;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.serverProcess = cp.spawn(\n\t\t\t\t\tspawnCommand,\n\t\t\t\t\tspawnArgs,\n\t\t\t\t\tspawnOptions,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.serverProcess.on(\"error\", (err) => {\n\t\t\t\tthis._onError.fire(err);\n\t\t\t});\n\t\t\tthis.serverProcess.on(\"exit\", (code, signal) => {\n\t\t\t\tthis._onExit.fire(code);\n\t\t\t});\n\n\t\t\tthis.serverProcess.stdout!.on(\"close\", () => {\n\t\t\t\tthis._onError.fire(new Error(\"read error\"));\n\t\t\t});\n\t\t\tthis.serverProcess.stdout!.on(\"error\", (error) => {\n\t\t\t\tthis._onError.fire(error);\n\t\t\t});\n\n\t\t\tthis.serverProcess.stdin!.on(\"error\", (error) => {\n\t\t\t\tthis._onError.fire(error);\n\t\t\t});\n\n\t\t\tthis.serverProcess.stderr!.resume();\n\n\t\t\t// finally connect to the DA\n\t\t\tthis.connect(this.serverProcess.stdout!, this.serverProcess.stdin!);\n\t\t} catch (err) {\n\t\t\tthis._onError.fire(err);\n\t\t}\n\t}\n\n\tasync stopSession(): Promise<void> {\n\t\tif (!this.serverProcess) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// when killing a process in windows its child\n\t\t// processes are *not* killed but become root\n\t\t// processes. Therefore we use TASKKILL.EXE\n\t\tawait this.cancelPendingRequests();\n\t\tif (platform.isWindows) {\n\t\t\treturn new Promise<void>((c, e) => {\n\t\t\t\tconst killer = cp.exec(\n\t\t\t\t\t`taskkill /F /T /PID ${this.serverProcess!.pid}`,\n\t\t\t\t\t(err, stdout, stderr) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn e(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tkiller.on(\"exit\", c);\n\t\t\t\tkiller.on(\"error\", e);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.serverProcess.kill(\"SIGTERM\");\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t}\n\n\tprivate static extract(\n\t\tplatformContribution: IPlatformSpecificAdapterContribution,\n\t\textensionFolderPath: string,\n\t): IDebuggerContribution | undefined {\n\t\tif (!platformContribution) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: IDebuggerContribution = Object.create(null);\n\t\tif (platformContribution.runtime) {\n\t\t\tif (platformContribution.runtime.indexOf(\"./\") === 0) {\n\t\t\t\t// TODO\n\t\t\t\tresult.runtime = path.join(\n\t\t\t\t\textensionFolderPath,\n\t\t\t\t\tplatformContribution.runtime,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresult.runtime = platformContribution.runtime;\n\t\t\t}\n\t\t}\n\t\tif (platformContribution.runtimeArgs) {\n\t\t\tresult.runtimeArgs = platformContribution.runtimeArgs;\n\t\t}\n\t\tif (platformContribution.program) {\n\t\t\tif (path.isAbsolute(platformContribution.program)) {\n\t\t\t\tresult.program = platformContribution.program;\n\t\t\t} else {\n\t\t\t\tresult.program = path.join(\n\t\t\t\t\textensionFolderPath,\n\t\t\t\t\tplatformContribution.program,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (platformContribution.args) {\n\t\t\tresult.args = platformContribution.args;\n\t\t}\n\n\t\tconst contribution = platformContribution as IDebuggerContribution;\n\n\t\tif (contribution.win) {\n\t\t\tresult.win = ExecutableDebugAdapter.extract(\n\t\t\t\tcontribution.win,\n\t\t\t\textensionFolderPath,\n\t\t\t);\n\t\t}\n\t\tif (contribution.winx86) {\n\t\t\tresult.winx86 = ExecutableDebugAdapter.extract(\n\t\t\t\tcontribution.winx86,\n\t\t\t\textensionFolderPath,\n\t\t\t);\n\t\t}\n\t\tif (contribution.windows) {\n\t\t\tresult.windows = ExecutableDebugAdapter.extract(\n\t\t\t\tcontribution.windows,\n\t\t\t\textensionFolderPath,\n\t\t\t);\n\t\t}\n\t\tif (contribution.osx) {\n\t\t\tresult.osx = ExecutableDebugAdapter.extract(\n\t\t\t\tcontribution.osx,\n\t\t\t\textensionFolderPath,\n\t\t\t);\n\t\t}\n\t\tif (contribution.linux) {\n\t\t\tresult.linux = ExecutableDebugAdapter.extract(\n\t\t\t\tcontribution.linux,\n\t\t\t\textensionFolderPath,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic platformAdapterExecutable(\n\t\textensionDescriptions: IExtensionDescription[],\n\t\tdebugType: string,\n\t): IDebugAdapterExecutable | undefined {\n\t\tlet result: IDebuggerContribution = Object.create(null);\n\t\tdebugType = debugType.toLowerCase();\n\n\t\t// merge all contributions into one\n\t\tfor (const ed of extensionDescriptions) {\n\t\t\tif (ed.contributes) {\n\t\t\t\tconst debuggers = <IDebuggerContribution[]>(\n\t\t\t\t\ted.contributes[\"debuggers\"]\n\t\t\t\t);\n\t\t\t\tif (debuggers && debuggers.length > 0) {\n\t\t\t\t\tdebuggers\n\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t(dbg) =>\n\t\t\t\t\t\t\t\ttypeof dbg.type === \"string\" &&\n\t\t\t\t\t\t\t\tstrings.equalsIgnoreCase(dbg.type, debugType),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.forEach((dbg) => {\n\t\t\t\t\t\t\t// extract relevant attributes and make them absolute where needed\n\t\t\t\t\t\t\tconst extractedDbg = ExecutableDebugAdapter.extract(\n\t\t\t\t\t\t\t\tdbg,\n\t\t\t\t\t\t\t\ted.extensionLocation.fsPath,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// merge\n\t\t\t\t\t\t\tresult = objects.mixin(\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\textractedDbg,\n\t\t\t\t\t\t\t\ted.isBuiltin,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// select the right platform\n\t\tlet platformInfo: IPlatformSpecificAdapterContribution | undefined;\n\t\tif (\n\t\t\tplatform.isWindows &&\n\t\t\t!process.env.hasOwnProperty(\"PROCESSOR_ARCHITEW6432\")\n\t\t) {\n\t\t\tplatformInfo = result.winx86 || result.win || result.windows;\n\t\t} else if (platform.isWindows) {\n\t\t\tplatformInfo = result.win || result.windows;\n\t\t} else if (platform.isMacintosh) {\n\t\t\tplatformInfo = result.osx;\n\t\t} else if (platform.isLinux) {\n\t\t\tplatformInfo = result.linux;\n\t\t}\n\t\tplatformInfo = platformInfo || result;\n\n\t\t// these are the relevant attributes\n\t\tconst program = platformInfo.program || result.program;\n\t\tconst args = platformInfo.args || result.args;\n\t\tconst runtime = platformInfo.runtime || result.runtime;\n\t\tconst runtimeArgs = platformInfo.runtimeArgs || result.runtimeArgs;\n\n\t\tif (runtime) {\n\t\t\treturn {\n\t\t\t\ttype: \"executable\",\n\t\t\t\tcommand: runtime,\n\t\t\t\targs: (runtimeArgs || [])\n\t\t\t\t\t.concat(typeof program === \"string\" ? [program] : [])\n\t\t\t\t\t.concat(args || []),\n\t\t\t};\n\t\t} else if (program) {\n\t\t\treturn {\n\t\t\t\ttype: \"executable\",\n\t\t\t\tcommand: program,\n\t\t\t\targs: args || [],\n\t\t\t};\n\t\t}\n\n\t\t// nothing found\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
