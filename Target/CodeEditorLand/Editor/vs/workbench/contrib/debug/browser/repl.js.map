{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/repl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { IHistoryNavigationWidget } from '../../../../base/browser/history.js';\nimport { IActionViewItem } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport * as aria from '../../../../base/browser/ui/aria/aria.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { IAsyncDataSource, ITreeContextMenuEvent, ITreeNode } from '../../../../base/browser/ui/tree/tree.js';\nimport { IAction } from '../../../../base/common/actions.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { HistoryNavigator } from '../../../../base/common/history.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { removeAnsiEscapeCodes } from '../../../../base/common/strings.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI as uri } from '../../../../base/common/uri.js';\nimport { ICodeEditor, isCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction } from '../../../../editor/browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { CodeEditorWidget } from '../../../../editor/browser/widget/codeEditor/codeEditorWidget.js';\nimport { EDITOR_FONT_DEFAULTS, EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { IDecorationOptions } from '../../../../editor/common/editorCommon.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { CompletionContext, CompletionItem, CompletionItemInsertTextRule, CompletionItemKind, CompletionItemKinds, CompletionList } from '../../../../editor/common/languages.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ITextResourcePropertiesService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { SuggestController } from '../../../../editor/contrib/suggest/browser/suggestController.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { createAndFillInContextMenuActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { Action2, IMenu, IMenuService, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { registerAndCreateHistoryNavigationContext } from '../../../../platform/history/browser/contextScopedHistoryWidget.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { WorkbenchAsyncDataTree } from '../../../../platform/list/browser/listService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { editorForeground, resolveColorValue } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { registerNavigableContainer } from '../../../browser/actions/widgetNavigationCommands.js';\nimport { FilterViewPane, IViewPaneOptions, ViewAction } from '../../../browser/parts/views/viewPane.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { AccessibilityCommandId } from '../../accessibility/common/accessibilityCommands.js';\nimport { getSimpleCodeEditorWidgetOptions, getSimpleEditorOptions } from '../../codeEditor/browser/simpleEditorOptions.js';\nimport { CONTEXT_DEBUG_STATE, CONTEXT_IN_DEBUG_REPL, CONTEXT_MULTI_SESSION_REPL, DEBUG_SCHEME, IDebugConfiguration, IDebugService, IDebugSession, IReplConfiguration, IReplElement, IReplOptions, REPL_VIEW_ID, State, getStateLabel } from '../common/debug.js';\nimport { Variable } from '../common/debugModel.js';\nimport { ReplEvaluationResult, ReplGroup } from '../common/replModel.js';\nimport { FocusSessionActionViewItem } from './debugActionViewItems.js';\nimport { DebugExpressionRenderer } from './debugExpressionRenderer.js';\nimport { debugConsoleClearAll, debugConsoleEvaluationPrompt } from './debugIcons.js';\nimport './media/repl.css';\nimport { ReplFilter } from './replFilter.js';\nimport { ReplAccessibilityProvider, ReplDataSource, ReplDelegate, ReplEvaluationInputsRenderer, ReplEvaluationResultsRenderer, ReplGroupRenderer, ReplOutputElementRenderer, ReplRawObjectsRenderer, ReplVariablesRenderer } from './replViewer.js';\n\nconst $ = dom.$;\n\nconst HISTORY_STORAGE_KEY = 'debug.repl.history';\nconst FILTER_HISTORY_STORAGE_KEY = 'debug.repl.filterHistory';\nconst FILTER_VALUE_STORAGE_KEY = 'debug.repl.filterValue';\nconst DECORATION_KEY = 'replinputdecoration';\n\nfunction revealLastElement(tree: WorkbenchAsyncDataTree<any, any, any>) {\n\ttree.scrollTop = tree.scrollHeight - tree.renderHeight;\n\t// tree.scrollTop = 1e6;\n}\n\nconst sessionsToIgnore = new Set<IDebugSession>();\nconst identityProvider = { getId: (element: IReplElement) => element.getId() };\n\nexport class Repl extends FilterViewPane implements IHistoryNavigationWidget {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly REFRESH_DELAY = 50; // delay in ms to refresh the repl for new elements to show\n\tprivate static readonly URI = uri.parse(`${DEBUG_SCHEME}:replinput`);\n\n\tprivate history: HistoryNavigator<string>;\n\tprivate tree?: WorkbenchAsyncDataTree<IDebugSession, IReplElement, FuzzyScore>;\n\tprivate replOptions: ReplOptions;\n\tprivate previousTreeScrollHeight: number = 0;\n\tprivate replDelegate!: ReplDelegate;\n\tprivate container!: HTMLElement;\n\tprivate treeContainer!: HTMLElement;\n\tprivate replInput!: CodeEditorWidget;\n\tprivate replInputContainer!: HTMLElement;\n\tprivate bodyContentDimension: dom.Dimension | undefined;\n\tprivate replInputLineCount = 1;\n\tprivate model: ITextModel | undefined;\n\tprivate setHistoryNavigationEnablement!: (enabled: boolean) => void;\n\tprivate scopedInstantiationService!: IInstantiationService;\n\tprivate replElementsChangeListener: IDisposable | undefined;\n\tprivate styleElement: HTMLStyleElement | undefined;\n\tprivate styleChangedWhenInvisible: boolean = false;\n\tprivate completionItemProvider: IDisposable | undefined;\n\tprivate modelChangeListener: IDisposable = Disposable.None;\n\tprivate filter: ReplFilter;\n\tprivate multiSessionRepl: IContextKey<boolean>;\n\tprivate menu: IMenu;\n\tprivate replDataSource: IAsyncDataSource<IDebugSession, IReplElement> | undefined;\n\tprivate findIsOpen: boolean = false;\n\n\tconstructor(\n\t\toptions: IViewPaneOptions,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService protected override readonly configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService private readonly textResourcePropertiesService: ITextResourcePropertiesService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IKeybindingService protected override readonly keybindingService: IKeybindingService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IMenuService menuService: IMenuService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tconst filterText = storageService.get(FILTER_VALUE_STORAGE_KEY, StorageScope.WORKSPACE, '');\n\t\tsuper({\n\t\t\t...options,\n\t\t\tfilterOptions: {\n\t\t\t\tplaceholder: localize({ key: 'workbench.debug.filter.placeholder', comment: ['Text in the brackets after e.g. is not localizable'] }, \"Filter (e.g. text, !exclude, \\\\escape)\"),\n\t\t\t\ttext: filterText,\n\t\t\t\thistory: JSON.parse(storageService.get(FILTER_HISTORY_STORAGE_KEY, StorageScope.WORKSPACE, '[]')) as string[],\n\t\t\t}\n\t\t}, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\n\t\tthis.menu = menuService.createMenu(MenuId.DebugConsoleContext, contextKeyService);\n\t\tthis._register(this.menu);\n\t\tthis.history = new HistoryNavigator(JSON.parse(this.storageService.get(HISTORY_STORAGE_KEY, StorageScope.WORKSPACE, '[]')), 100);\n\t\tthis.filter = new ReplFilter();\n\t\tthis.filter.filterQuery = filterText;\n\t\tthis.multiSessionRepl = CONTEXT_MULTI_SESSION_REPL.bindTo(contextKeyService);\n\t\tthis.replOptions = this._register(this.instantiationService.createInstance(ReplOptions, this.id, () => this.getLocationBasedColors().background));\n\t\tthis._register(this.replOptions.onDidChange(() => this.onDidStyleChange()));\n\n\t\tcodeEditorService.registerDecorationType('repl-decoration', DECORATION_KEY, {});\n\t\tthis.multiSessionRepl.set(this.isMultiSessionView);\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tif (this.debugService.getViewModel().focusedSession) {\n\t\t\tthis.onDidFocusSession(this.debugService.getViewModel().focusedSession);\n\t\t}\n\n\t\tthis._register(this.debugService.getViewModel().onDidFocusSession(async session => this.onDidFocusSession(session)));\n\t\tthis._register(this.debugService.getViewModel().onDidEvaluateLazyExpression(async e => {\n\t\t\tif (e instanceof Variable && this.tree?.hasNode(e)) {\n\t\t\t\tawait this.tree.updateChildren(e, false, true);\n\t\t\t\tawait this.tree.expand(e);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.debugService.onWillNewSession(async newSession => {\n\t\t\t// Need to listen to output events for sessions which are not yet fully initialised\n\t\t\tconst input = this.tree?.getInput();\n\t\t\tif (!input || input.state === State.Inactive) {\n\t\t\t\tawait this.selectSession(newSession);\n\t\t\t}\n\t\t\tthis.multiSessionRepl.set(this.isMultiSessionView);\n\t\t}));\n\t\tthis._register(this.debugService.onDidEndSession(async () => {\n\t\t\t// Update view, since orphaned sessions might now be separate\n\t\t\tawait Promise.resolve(); // allow other listeners to go first, so sessions can update parents\n\t\t\tthis.multiSessionRepl.set(this.isMultiSessionView);\n\t\t}));\n\t\tthis._register(this.themeService.onDidColorThemeChange(() => {\n\t\t\tthis.refreshReplElements(false);\n\t\t\tif (this.isVisible()) {\n\t\t\t\tthis.updateInputDecoration();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.onDidChangeBodyVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tif (!this.model) {\n\t\t\t\t\tthis.model = this.modelService.getModel(Repl.URI) || this.modelService.createModel('', null, Repl.URI, true);\n\t\t\t\t}\n\t\t\t\tthis.setMode();\n\t\t\t\tthis.replInput.setModel(this.model);\n\t\t\t\tthis.updateInputDecoration();\n\t\t\t\tthis.refreshReplElements(true);\n\t\t\t\tif (this.styleChangedWhenInvisible) {\n\t\t\t\t\tthis.styleChangedWhenInvisible = false;\n\t\t\t\t\tthis.onDidStyleChange();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug.console.wordWrap') && this.tree) {\n\t\t\t\tthis.tree.dispose();\n\t\t\t\tthis.treeContainer.innerText = '';\n\t\t\t\tdom.clearNode(this.treeContainer);\n\t\t\t\tthis.createReplTree();\n\t\t\t}\n\t\t\tif (e.affectsConfiguration('debug.console.acceptSuggestionOnEnter')) {\n\t\t\t\tconst config = this.configurationService.getValue<IDebugConfiguration>('debug');\n\t\t\t\tthis.replInput.updateOptions({\n\t\t\t\t\tacceptSuggestionOnEnter: config.console.acceptSuggestionOnEnter === 'on' ? 'on' : 'off'\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => {\n\t\t\tthis.setMode();\n\t\t}));\n\n\t\tthis._register(this.filterWidget.onDidChangeFilterText(() => {\n\t\t\tthis.filter.filterQuery = this.filterWidget.getFilterText();\n\t\t\tif (this.tree) {\n\t\t\t\tthis.tree.refilter();\n\t\t\t\trevealLastElement(this.tree);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async onDidFocusSession(session: IDebugSession | undefined): Promise<void> {\n\t\tif (session) {\n\t\t\tsessionsToIgnore.delete(session);\n\t\t\tthis.completionItemProvider?.dispose();\n\t\t\tif (session.capabilities.supportsCompletionsRequest) {\n\t\t\t\tthis.completionItemProvider = this.languageFeaturesService.completionProvider.register({ scheme: DEBUG_SCHEME, pattern: '**/replinput', hasAccessToAllModels: true }, {\n\t\t\t\t\t_debugDisplayName: 'debugConsole',\n\t\t\t\t\ttriggerCharacters: session.capabilities.completionTriggerCharacters || ['.'],\n\t\t\t\t\tprovideCompletionItems: async (_: ITextModel, position: Position, _context: CompletionContext, token: CancellationToken): Promise<CompletionList> => {\n\t\t\t\t\t\t// Disable history navigation because up and down are used to navigate through the suggest widget\n\t\t\t\t\t\tthis.setHistoryNavigationEnablement(false);\n\n\t\t\t\t\t\tconst model = this.replInput.getModel();\n\t\t\t\t\t\tif (model) {\n\t\t\t\t\t\t\tconst word = model.getWordAtPosition(position);\n\t\t\t\t\t\t\tconst overwriteBefore = word ? word.word.length : 0;\n\t\t\t\t\t\t\tconst text = model.getValue();\n\t\t\t\t\t\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\t\t\t\t\tconst frameId = focusedStackFrame ? focusedStackFrame.frameId : undefined;\n\t\t\t\t\t\t\tconst response = await session.completions(frameId, focusedStackFrame?.thread.threadId || 0, text, position, overwriteBefore, token);\n\n\t\t\t\t\t\t\tconst suggestions: CompletionItem[] = [];\n\t\t\t\t\t\t\tconst computeRange = (length: number) => Range.fromPositions(position.delta(0, -length), position);\n\t\t\t\t\t\t\tif (response && response.body && response.body.targets) {\n\t\t\t\t\t\t\t\tresponse.body.targets.forEach(item => {\n\t\t\t\t\t\t\t\t\tif (item && item.label) {\n\t\t\t\t\t\t\t\t\t\tlet insertTextRules: CompletionItemInsertTextRule | undefined = undefined;\n\t\t\t\t\t\t\t\t\t\tlet insertText = item.text || item.label;\n\t\t\t\t\t\t\t\t\t\tif (typeof item.selectionStart === 'number') {\n\t\t\t\t\t\t\t\t\t\t\t// If a debug completion item sets a selection we need to use snippets to make sure the selection is selected #90974\n\t\t\t\t\t\t\t\t\t\t\tinsertTextRules = CompletionItemInsertTextRule.InsertAsSnippet;\n\t\t\t\t\t\t\t\t\t\t\tconst selectionLength = typeof item.selectionLength === 'number' ? item.selectionLength : 0;\n\t\t\t\t\t\t\t\t\t\t\tconst placeholder = selectionLength > 0 ? '${1:' + insertText.substring(item.selectionStart, item.selectionStart + selectionLength) + '}$0' : '$0';\n\t\t\t\t\t\t\t\t\t\t\tinsertText = insertText.substring(0, item.selectionStart) + placeholder + insertText.substring(item.selectionStart + selectionLength);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tsuggestions.push({\n\t\t\t\t\t\t\t\t\t\t\tlabel: item.label,\n\t\t\t\t\t\t\t\t\t\t\tinsertText,\n\t\t\t\t\t\t\t\t\t\t\tdetail: item.detail,\n\t\t\t\t\t\t\t\t\t\t\tkind: CompletionItemKinds.fromString(item.type || 'property'),\n\t\t\t\t\t\t\t\t\t\t\tfilterText: (item.start && item.length) ? text.substring(item.start, item.start + item.length).concat(item.label) : undefined,\n\t\t\t\t\t\t\t\t\t\t\trange: computeRange(item.length || overwriteBefore),\n\t\t\t\t\t\t\t\t\t\t\tsortText: item.sortText,\n\t\t\t\t\t\t\t\t\t\t\tinsertTextRules\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').console.historySuggestions) {\n\t\t\t\t\t\t\t\tconst history = this.history.getHistory();\n\t\t\t\t\t\t\t\tconst idxLength = String(history.length).length;\n\t\t\t\t\t\t\t\thistory.forEach((h, i) => suggestions.push({\n\t\t\t\t\t\t\t\t\tlabel: h,\n\t\t\t\t\t\t\t\t\tinsertText: h,\n\t\t\t\t\t\t\t\t\tkind: CompletionItemKind.Text,\n\t\t\t\t\t\t\t\t\trange: computeRange(h.length),\n\t\t\t\t\t\t\t\t\tsortText: 'ZZZ' + String(history.length - i).padStart(idxLength, '0')\n\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn { suggestions };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve({ suggestions: [] });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tawait this.selectSession();\n\t}\n\n\tgetFilterStats(): { total: number; filtered: number } {\n\t\t// This could be called before the tree is created when setting this.filterState.filterText value\n\t\treturn {\n\t\t\ttotal: this.tree?.getNode().children.length ?? 0,\n\t\t\tfiltered: this.tree?.getNode().children.filter(c => c.visible).length ?? 0\n\t\t};\n\t}\n\n\tget isReadonly(): boolean {\n\t\t// Do not allow to edit inactive sessions\n\t\tconst session = this.tree?.getInput();\n\t\tif (session && session.state !== State.Inactive) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshowPreviousValue(): void {\n\t\tif (!this.isReadonly) {\n\t\t\tthis.navigateHistory(true);\n\t\t}\n\t}\n\n\tshowNextValue(): void {\n\t\tif (!this.isReadonly) {\n\t\t\tthis.navigateHistory(false);\n\t\t}\n\t}\n\n\tfocusFilter(): void {\n\t\tthis.filterWidget.focus();\n\t}\n\n\topenFind(): void {\n\t\tthis.tree?.openFind();\n\t}\n\n\tprivate setMode(): void {\n\t\tif (!this.isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeEditorControl = this.editorService.activeTextEditorControl;\n\t\tif (isCodeEditor(activeEditorControl)) {\n\t\t\tthis.modelChangeListener.dispose();\n\t\t\tthis.modelChangeListener = activeEditorControl.onDidChangeModelLanguage(() => this.setMode());\n\t\t\tif (this.model && activeEditorControl.hasModel()) {\n\t\t\t\tthis.model.setLanguage(activeEditorControl.getModel().getLanguageId());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidStyleChange(): void {\n\t\tif (!this.isVisible()) {\n\t\t\tthis.styleChangedWhenInvisible = true;\n\t\t\treturn;\n\t\t}\n\t\tif (this.styleElement) {\n\t\t\tthis.replInput.updateOptions({\n\t\t\t\tfontSize: this.replOptions.replConfiguration.fontSize,\n\t\t\t\tlineHeight: this.replOptions.replConfiguration.lineHeight,\n\t\t\t\tfontFamily: this.replOptions.replConfiguration.fontFamily === 'default' ? EDITOR_FONT_DEFAULTS.fontFamily : this.replOptions.replConfiguration.fontFamily\n\t\t\t});\n\n\t\t\tconst replInputLineHeight = this.replInput.getOption(EditorOption.lineHeight);\n\n\t\t\t// Set the font size, font family, line height and align the twistie to be centered, and input theme color\n\t\t\tthis.styleElement.textContent = `\n\t\t\t\t.repl .repl-input-wrapper .repl-input-chevron {\n\t\t\t\t\tline-height: ${replInputLineHeight}px\n\t\t\t\t}\n\n\t\t\t\t.repl .repl-input-wrapper .monaco-editor .lines-content {\n\t\t\t\t\tbackground-color: ${this.replOptions.replConfiguration.backgroundColor};\n\t\t\t\t}\n\t\t\t`;\n\t\t\tconst cssFontFamily = this.replOptions.replConfiguration.fontFamily === 'default' ? 'var(--monaco-monospace-font)' : this.replOptions.replConfiguration.fontFamily;\n\t\t\tthis.container.style.setProperty(`--vscode-repl-font-family`, cssFontFamily);\n\t\t\tthis.container.style.setProperty(`--vscode-repl-font-size`, `${this.replOptions.replConfiguration.fontSize}px`);\n\t\t\tthis.container.style.setProperty(`--vscode-repl-font-size-for-twistie`, `${this.replOptions.replConfiguration.fontSizeForTwistie}px`);\n\t\t\tthis.container.style.setProperty(`--vscode-repl-line-height`, this.replOptions.replConfiguration.cssLineHeight);\n\n\t\t\tthis.tree?.rerender();\n\n\t\t\tif (this.bodyContentDimension) {\n\t\t\t\tthis.layoutBodyContent(this.bodyContentDimension.height, this.bodyContentDimension.width);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate navigateHistory(previous: boolean): void {\n\t\tconst historyInput = (previous ?\n\t\t\t(this.history.previous() ?? this.history.first()) : this.history.next())\n\t\t\t?? '';\n\t\tthis.replInput.setValue(historyInput);\n\t\taria.status(historyInput);\n\t\t// always leave cursor at the end.\n\t\tthis.replInput.setPosition({ lineNumber: 1, column: historyInput.length + 1 });\n\t\tthis.setHistoryNavigationEnablement(true);\n\t}\n\n\tasync selectSession(session?: IDebugSession): Promise<void> {\n\t\tconst treeInput = this.tree?.getInput();\n\t\tif (!session) {\n\t\t\tconst focusedSession = this.debugService.getViewModel().focusedSession;\n\t\t\t// If there is a focusedSession focus on that one, otherwise just show any other not ignored session\n\t\t\tif (focusedSession) {\n\t\t\t\tsession = focusedSession;\n\t\t\t} else if (!treeInput || sessionsToIgnore.has(treeInput)) {\n\t\t\t\tsession = this.debugService.getModel().getSessions(true).find(s => !sessionsToIgnore.has(s));\n\t\t\t}\n\t\t}\n\t\tif (session) {\n\t\t\tthis.replElementsChangeListener?.dispose();\n\t\t\tthis.replElementsChangeListener = session.onDidChangeReplElements(() => {\n\t\t\t\tthis.refreshReplElements(session.getReplElements().length === 0);\n\t\t\t});\n\n\t\t\tif (this.tree && treeInput !== session) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.tree.setInput(session);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Ignore error because this may happen multiple times while refreshing,\n\t\t\t\t\t// then changing the root may fail. Log to help with debugging if needed.\n\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t}\n\t\t\t\trevealLastElement(this.tree);\n\t\t\t}\n\t\t}\n\n\t\tthis.replInput?.updateOptions({ readOnly: this.isReadonly });\n\t\tthis.updateInputDecoration();\n\t}\n\n\tasync clearRepl(): Promise<void> {\n\t\tconst session = this.tree?.getInput();\n\t\tif (session) {\n\t\t\tsession.removeReplExpressions();\n\t\t\tif (session.state === State.Inactive) {\n\t\t\t\t// Ignore inactive sessions which got cleared - so they are not shown any more\n\t\t\t\tsessionsToIgnore.add(session);\n\t\t\t\tawait this.selectSession();\n\t\t\t\tthis.multiSessionRepl.set(this.isMultiSessionView);\n\t\t\t}\n\t\t}\n\t\tthis.replInput.focus();\n\t}\n\n\tacceptReplInput(): void {\n\t\tconst session = this.tree?.getInput();\n\t\tif (session && !this.isReadonly) {\n\t\t\tsession.addReplExpression(this.debugService.getViewModel().focusedStackFrame, this.replInput.getValue());\n\t\t\trevealLastElement(this.tree!);\n\t\t\tthis.history.add(this.replInput.getValue());\n\t\t\tthis.replInput.setValue('');\n\t\t\tconst shouldRelayout = this.replInputLineCount > 1;\n\t\t\tthis.replInputLineCount = 1;\n\t\t\tif (shouldRelayout && this.bodyContentDimension) {\n\t\t\t\t// Trigger a layout to shrink a potential multi line input\n\t\t\t\tthis.layoutBodyContent(this.bodyContentDimension.height, this.bodyContentDimension.width);\n\t\t\t}\n\t\t}\n\t}\n\n\tsendReplInput(input: string): void {\n\t\tconst session = this.tree?.getInput();\n\t\tif (session && !this.isReadonly) {\n\t\t\tsession.addReplExpression(this.debugService.getViewModel().focusedStackFrame, input);\n\t\t\trevealLastElement(this.tree!);\n\t\t\tthis.history.add(input);\n\t\t}\n\t}\n\n\tgetVisibleContent(): string {\n\t\tlet text = '';\n\t\tif (this.model && this.tree) {\n\t\t\tconst lineDelimiter = this.textResourcePropertiesService.getEOL(this.model.uri);\n\t\t\tconst traverseAndAppend = (node: ITreeNode<IReplElement, FuzzyScore>) => {\n\t\t\t\tnode.children.forEach(child => {\n\t\t\t\t\tif (child.visible) {\n\t\t\t\t\t\ttext += child.element.toString().trimRight() + lineDelimiter;\n\t\t\t\t\t\tif (!child.collapsed && child.children.length) {\n\t\t\t\t\t\t\ttraverseAndAppend(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t\ttraverseAndAppend(this.tree.getNode());\n\t\t}\n\n\t\treturn removeAnsiEscapeCodes(text);\n\t}\n\n\tprotected layoutBodyContent(height: number, width: number): void {\n\t\tthis.bodyContentDimension = new dom.Dimension(width, height);\n\t\tconst replInputHeight = Math.min(this.replInput.getContentHeight(), height);\n\t\tif (this.tree) {\n\t\t\tconst lastElementVisible = this.tree.scrollTop + this.tree.renderHeight >= this.tree.scrollHeight;\n\t\t\tconst treeHeight = height - replInputHeight;\n\t\t\tthis.tree.getHTMLElement().style.height = `${treeHeight}px`;\n\t\t\tthis.tree.layout(treeHeight, width);\n\t\t\tif (lastElementVisible) {\n\t\t\t\trevealLastElement(this.tree);\n\t\t\t}\n\t\t}\n\t\tthis.replInputContainer.style.height = `${replInputHeight}px`;\n\n\t\tthis.replInput.layout({ width: width - 30, height: replInputHeight });\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.tree?.collapseAll();\n\t}\n\n\tgetDebugSession(): IDebugSession | undefined {\n\t\treturn this.tree?.getInput();\n\t}\n\n\tgetReplInput(): CodeEditorWidget {\n\t\treturn this.replInput;\n\t}\n\n\tgetReplDataSource(): IAsyncDataSource<IDebugSession, IReplElement> | undefined {\n\t\treturn this.replDataSource;\n\t}\n\n\tgetFocusedElement(): IReplElement | undefined {\n\t\treturn this.tree?.getFocus()?.[0];\n\t}\n\n\tfocusTree(): void {\n\t\tthis.tree?.domFocus();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tsetTimeout(() => this.replInput.focus(), 0);\n\t}\n\n\toverride getActionViewItem(action: IAction): IActionViewItem | undefined {\n\t\tif (action.id === selectReplCommandId) {\n\t\t\tconst session = (this.tree ? this.tree.getInput() : undefined) ?? this.debugService.getViewModel().focusedSession;\n\t\t\treturn this.instantiationService.createInstance(SelectReplActionViewItem, action, session);\n\t\t}\n\n\t\treturn super.getActionViewItem(action);\n\t}\n\n\tprivate get isMultiSessionView(): boolean {\n\t\treturn this.debugService.getModel().getSessions(true).filter(s => s.hasSeparateRepl() && !sessionsToIgnore.has(s)).length > 1;\n\t}\n\n\t// --- Cached locals\n\n\t@memoize\n\tprivate get refreshScheduler(): RunOnceScheduler {\n\t\tconst autoExpanded = new Set<string>();\n\t\treturn new RunOnceScheduler(async () => {\n\t\t\tif (!this.tree) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.tree.getInput()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait this.tree.updateChildren(undefined, true, false, { diffIdentityProvider: identityProvider });\n\n\t\t\tconst session = this.tree.getInput();\n\t\t\tif (session) {\n\t\t\t\t// Automatically expand repl group elements when specified\n\t\t\t\tconst autoExpandElements = async (elements: IReplElement[]) => {\n\t\t\t\t\tfor (const element of elements) {\n\t\t\t\t\t\tif (element instanceof ReplGroup) {\n\t\t\t\t\t\t\tif (element.autoExpand && !autoExpanded.has(element.getId())) {\n\t\t\t\t\t\t\t\tautoExpanded.add(element.getId());\n\t\t\t\t\t\t\t\tawait this.tree!.expand(element);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!this.tree!.isCollapsed(element)) {\n\t\t\t\t\t\t\t\t// Repl groups can have children which are repl groups thus we might need to expand those as well\n\t\t\t\t\t\t\t\tawait autoExpandElements(element.getChildren());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tawait autoExpandElements(session.getReplElements());\n\t\t\t}\n\t\t\t// Repl elements count changed, need to update filter stats on the badge\n\t\t\tconst { total, filtered } = this.getFilterStats();\n\t\t\tthis.filterWidget.updateBadge(total === filtered || total === 0 ? undefined : localize('showing filtered repl lines', \"Showing {0} of {1}\", filtered, total));\n\t\t}, Repl.REFRESH_DELAY);\n\t}\n\n\t// --- Creation\n\n\toverride render(): void {\n\t\tsuper.render();\n\t\tthis._register(registerNavigableContainer({\n\t\t\tname: 'repl',\n\t\t\tfocusNotifiers: [this, this.filterWidget],\n\t\t\tfocusNextWidget: () => {\n\t\t\t\tconst element = this.tree?.getHTMLElement();\n\t\t\t\tif (this.filterWidget.hasFocus()) {\n\t\t\t\t\tthis.tree?.domFocus();\n\t\t\t\t} else if (element && dom.isActiveElement(element)) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocusPreviousWidget: () => {\n\t\t\t\tconst element = this.tree?.getHTMLElement();\n\t\t\t\tif (this.replInput.hasTextFocus()) {\n\t\t\t\t\tthis.tree?.domFocus();\n\t\t\t\t} else if (element && dom.isActiveElement(element)) {\n\t\t\t\t\tthis.focusFilter();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected override renderBody(parent: HTMLElement): void {\n\t\tsuper.renderBody(parent);\n\t\tthis.container = dom.append(parent, $('.repl'));\n\t\tthis.treeContainer = dom.append(this.container, $(`.repl-tree.${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`));\n\t\tthis.createReplInput(this.container);\n\t\tthis.createReplTree();\n\t}\n\n\tprivate createReplTree(): void {\n\t\tthis.replDelegate = new ReplDelegate(this.configurationService, this.replOptions);\n\t\tconst wordWrap = this.configurationService.getValue<IDebugConfiguration>('debug').console.wordWrap;\n\t\tthis.treeContainer.classList.toggle('word-wrap', wordWrap);\n\t\tconst expressionRenderer = this.instantiationService.createInstance(DebugExpressionRenderer);\n\t\tthis.replDataSource = new ReplDataSource();\n\n\t\tconst tree = this.tree = <WorkbenchAsyncDataTree<IDebugSession, IReplElement, FuzzyScore>>this.instantiationService.createInstance(\n\t\t\tWorkbenchAsyncDataTree,\n\t\t\t'DebugRepl',\n\t\t\tthis.treeContainer,\n\t\t\tthis.replDelegate,\n\t\t\t[\n\t\t\t\tthis.instantiationService.createInstance(ReplVariablesRenderer, expressionRenderer),\n\t\t\t\tthis.instantiationService.createInstance(ReplOutputElementRenderer, expressionRenderer),\n\t\t\t\tnew ReplEvaluationInputsRenderer(),\n\t\t\t\tthis.instantiationService.createInstance(ReplGroupRenderer, expressionRenderer),\n\t\t\t\tnew ReplEvaluationResultsRenderer(expressionRenderer),\n\t\t\t\tnew ReplRawObjectsRenderer(expressionRenderer),\n\t\t\t],\n\t\t\tthis.replDataSource,\n\t\t\t{\n\t\t\t\tfilter: this.filter,\n\t\t\t\taccessibilityProvider: new ReplAccessibilityProvider(),\n\t\t\t\tidentityProvider,\n\t\t\t\tmouseSupport: false,\n\t\t\t\tfindWidgetEnabled: true,\n\t\t\t\tkeyboardNavigationLabelProvider: { getKeyboardNavigationLabel: (e: IReplElement) => e.toString(true) },\n\t\t\t\thorizontalScrolling: !wordWrap,\n\t\t\t\tsetRowLineHeight: false,\n\t\t\t\tsupportDynamicHeights: wordWrap,\n\t\t\t\toverrideStyles: this.getLocationBasedColors().listOverrideStyles\n\t\t\t});\n\n\t\tthis._register(tree.onDidChangeContentHeight(() => {\n\t\t\tif (tree.scrollHeight !== this.previousTreeScrollHeight) {\n\t\t\t\t// Due to rounding, the scrollTop + renderHeight will not exactly match the scrollHeight.\n\t\t\t\t// Consider the tree to be scrolled all the way down if it is within 2px of the bottom.\n\t\t\t\tconst lastElementWasVisible = tree.scrollTop + tree.renderHeight >= this.previousTreeScrollHeight - 2;\n\t\t\t\tif (lastElementWasVisible) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Can't set scrollTop during this event listener, the list might overwrite the change\n\t\t\t\t\t\trevealLastElement(tree);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previousTreeScrollHeight = tree.scrollHeight;\n\t\t}));\n\n\t\tthis._register(tree.onContextMenu(e => this.onContextMenu(e)));\n\t\tthis._register(tree.onDidChangeFindOpenState((open) => this.findIsOpen = open));\n\n\t\tlet lastSelectedString: string;\n\t\tthis._register(tree.onMouseClick(() => {\n\t\t\tif (this.findIsOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selection = dom.getWindow(this.treeContainer).getSelection();\n\t\t\tif (!selection || selection.type !== 'Range' || lastSelectedString === selection.toString()) {\n\t\t\t\t// only focus the input if the user is not currently selecting and find isn't open.\n\t\t\t\tthis.replInput.focus();\n\t\t\t}\n\t\t\tlastSelectedString = selection ? selection.toString() : '';\n\t\t}));\n\t\t// Make sure to select the session if debugging is already active\n\t\tthis.selectSession();\n\t\tthis.styleElement = dom.createStyleSheet(this.container);\n\t\tthis.onDidStyleChange();\n\t}\n\n\tprivate createReplInput(container: HTMLElement): void {\n\t\tthis.replInputContainer = dom.append(container, $('.repl-input-wrapper'));\n\t\tdom.append(this.replInputContainer, $('.repl-input-chevron' + ThemeIcon.asCSSSelector(debugConsoleEvaluationPrompt)));\n\n\t\tconst { historyNavigationBackwardsEnablement, historyNavigationForwardsEnablement } = this._register(registerAndCreateHistoryNavigationContext(this.scopedContextKeyService, this));\n\t\tthis.setHistoryNavigationEnablement = enabled => {\n\t\t\thistoryNavigationBackwardsEnablement.set(enabled);\n\t\t\thistoryNavigationForwardsEnablement.set(enabled);\n\t\t};\n\t\tCONTEXT_IN_DEBUG_REPL.bindTo(this.scopedContextKeyService).set(true);\n\n\t\tthis.scopedInstantiationService = this._register(this.instantiationService.createChild(new ServiceCollection([IContextKeyService, this.scopedContextKeyService])));\n\t\tconst options = getSimpleEditorOptions(this.configurationService);\n\t\toptions.readOnly = true;\n\t\toptions.suggest = { showStatusBar: true };\n\t\tconst config = this.configurationService.getValue<IDebugConfiguration>('debug');\n\t\toptions.acceptSuggestionOnEnter = config.console.acceptSuggestionOnEnter === 'on' ? 'on' : 'off';\n\t\toptions.ariaLabel = this.getAriaLabel();\n\n\t\tthis.replInput = this.scopedInstantiationService.createInstance(CodeEditorWidget, this.replInputContainer, options, getSimpleCodeEditorWidgetOptions());\n\n\t\tthis._register(this.replInput.onDidChangeModelContent(() => {\n\t\t\tconst model = this.replInput.getModel();\n\t\t\tthis.setHistoryNavigationEnablement(!!model && model.getValue() === '');\n\t\t\tconst lineCount = model ? Math.min(10, model.getLineCount()) : 1;\n\t\t\tif (lineCount !== this.replInputLineCount) {\n\t\t\t\tthis.replInputLineCount = lineCount;\n\t\t\t\tif (this.bodyContentDimension) {\n\t\t\t\t\tthis.layoutBodyContent(this.bodyContentDimension.height, this.bodyContentDimension.width);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\t// We add the input decoration only when the focus is in the input #61126\n\t\tthis._register(this.replInput.onDidFocusEditorText(() => this.updateInputDecoration()));\n\t\tthis._register(this.replInput.onDidBlurEditorText(() => this.updateInputDecoration()));\n\n\t\tthis._register(dom.addStandardDisposableListener(this.replInputContainer, dom.EventType.FOCUS, () => this.replInputContainer.classList.add('synthetic-focus')));\n\t\tthis._register(dom.addStandardDisposableListener(this.replInputContainer, dom.EventType.BLUR, () => this.replInputContainer.classList.remove('synthetic-focus')));\n\t}\n\n\tprivate getAriaLabel(): string {\n\t\tlet ariaLabel = localize('debugConsole', \"Debug Console\");\n\t\tif (!this.configurationService.getValue(AccessibilityVerbositySettingId.Debug)) {\n\t\t\treturn ariaLabel;\n\t\t}\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(AccessibilityCommandId.OpenAccessibilityHelp)?.getAriaLabel();\n\t\tif (keybinding) {\n\t\t\tariaLabel = localize('commentLabelWithKeybinding', \"{0}, use ({1}) for accessibility help\", ariaLabel, keybinding);\n\t\t} else {\n\t\t\tariaLabel = localize('commentLabelWithKeybindingNoKeybinding', \"{0}, run the command Open Accessibility Help which is currently not triggerable via keybinding.\", ariaLabel);\n\t\t}\n\n\t\treturn ariaLabel;\n\t}\n\n\tprivate onContextMenu(e: ITreeContextMenuEvent<IReplElement>): void {\n\t\tconst actions: IAction[] = [];\n\t\tcreateAndFillInContextMenuActions(this.menu, { arg: e.element, shouldForwardArgs: false }, actions);\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => e.anchor,\n\t\t\tgetActions: () => actions,\n\t\t\tgetActionsContext: () => e.element\n\t\t});\n\t}\n\n\t// --- Update\n\n\tprivate refreshReplElements(noDelay: boolean): void {\n\t\tif (this.tree && this.isVisible()) {\n\t\t\tif (this.refreshScheduler.isScheduled()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.refreshScheduler.schedule(noDelay ? 0 : undefined);\n\t\t}\n\t}\n\n\tprivate updateInputDecoration(): void {\n\t\tif (!this.replInput) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst decorations: IDecorationOptions[] = [];\n\t\tif (this.isReadonly && this.replInput.hasTextFocus() && !this.replInput.getValue()) {\n\t\t\tconst transparentForeground = resolveColorValue(editorForeground, this.themeService.getColorTheme())?.transparent(0.4);\n\t\t\tdecorations.push({\n\t\t\t\trange: {\n\t\t\t\t\tstartLineNumber: 0,\n\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t},\n\t\t\t\trenderOptions: {\n\t\t\t\t\tafter: {\n\t\t\t\t\t\tcontentText: localize('startDebugFirst', \"Please start a debug session to evaluate expressions\"),\n\t\t\t\t\t\tcolor: transparentForeground ? transparentForeground.toString() : undefined\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.replInput.setDecorationsByType('repl-decoration', DECORATION_KEY, decorations);\n\t}\n\n\toverride saveState(): void {\n\t\tconst replHistory = this.history.getHistory();\n\t\tif (replHistory.length) {\n\t\t\tthis.storageService.store(HISTORY_STORAGE_KEY, JSON.stringify(replHistory), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(HISTORY_STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t\tconst filterHistory = this.filterWidget.getHistory();\n\t\tif (filterHistory.length) {\n\t\t\tthis.storageService.store(FILTER_HISTORY_STORAGE_KEY, JSON.stringify(filterHistory), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(FILTER_HISTORY_STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t\tconst filterValue = this.filterWidget.getFilterText();\n\t\tif (filterValue) {\n\t\t\tthis.storageService.store(FILTER_VALUE_STORAGE_KEY, filterValue, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(FILTER_VALUE_STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\toverride dispose(): void {\n\t\tthis.replInput?.dispose(); // Disposed before rendered? #174558\n\t\tthis.replElementsChangeListener?.dispose();\n\t\tthis.refreshScheduler.dispose();\n\t\tthis.modelChangeListener.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nclass ReplOptions extends Disposable implements IReplOptions {\n\tprivate static readonly lineHeightEm = 1.4;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _replConfig!: IReplConfiguration;\n\tpublic get replConfiguration(): IReplConfiguration {\n\t\treturn this._replConfig;\n\t}\n\n\tconstructor(\n\t\tviewId: string,\n\t\tprivate readonly backgroundColorDelegate: () => string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.themeService.onDidColorThemeChange(e => this.update()));\n\t\tthis._register(this.viewDescriptorService.onDidChangeLocation(e => {\n\t\t\tif (e.views.some(v => v.id === viewId)) {\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug.console.lineHeight') || e.affectsConfiguration('debug.console.fontSize') || e.affectsConfiguration('debug.console.fontFamily')) {\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t}));\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tconst debugConsole = this.configurationService.getValue<IDebugConfiguration>('debug').console;\n\t\tthis._replConfig = {\n\t\t\tfontSize: debugConsole.fontSize,\n\t\t\tfontFamily: debugConsole.fontFamily,\n\t\t\tlineHeight: debugConsole.lineHeight ? debugConsole.lineHeight : ReplOptions.lineHeightEm * debugConsole.fontSize,\n\t\t\tcssLineHeight: debugConsole.lineHeight ? `${debugConsole.lineHeight}px` : `${ReplOptions.lineHeightEm}em`,\n\t\t\tbackgroundColor: this.themeService.getColorTheme().getColor(this.backgroundColorDelegate()),\n\t\t\tfontSizeForTwistie: debugConsole.fontSize * ReplOptions.lineHeightEm / 2 - 8\n\t\t};\n\t\tthis._onDidChange.fire();\n\t}\n}\n\n// Repl actions and commands\n\nclass AcceptReplInputAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'repl.action.acceptInput',\n\t\t\tlabel: localize({ key: 'actions.repl.acceptInput', comment: ['Apply input from the debug console input box'] }, \"Debug Console: Accept Input\"),\n\t\t\talias: 'Debug Console: Accept Input',\n\t\t\tprecondition: CONTEXT_IN_DEBUG_REPL,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor): void | Promise<void> {\n\t\tSuggestController.get(editor)?.cancelSuggestWidget();\n\t\tconst repl = getReplView(accessor.get(IViewsService));\n\t\trepl?.acceptReplInput();\n\t}\n}\n\nclass FilterReplAction extends ViewAction<Repl> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tviewId: REPL_VIEW_ID,\n\t\t\tid: 'repl.action.filter',\n\t\t\ttitle: localize('repl.action.filter', \"Debug Console: Focus Filter\"),\n\t\t\tprecondition: CONTEXT_IN_DEBUG_REPL,\n\t\t\tkeybinding: [{\n\t\t\t\twhen: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyF,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}]\n\t\t});\n\t}\n\n\trunInView(accessor: ServicesAccessor, repl: Repl): void | Promise<void> {\n\t\trepl.focusFilter();\n\t}\n}\n\n\nclass FindReplAction extends ViewAction<Repl> {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tviewId: REPL_VIEW_ID,\n\t\t\tid: 'repl.action.find',\n\t\t\ttitle: localize('repl.action.find', \"Debug Console: Focus Find\"),\n\t\t\tprecondition: CONTEXT_IN_DEBUG_REPL,\n\t\t\tkeybinding: [{\n\t\t\t\twhen: ContextKeyExpr.or(CONTEXT_IN_DEBUG_REPL, ContextKeyExpr.equals('focusedView', 'workbench.panel.repl.view')),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyF,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}],\n\t\t\ticon: Codicon.search,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', REPL_VIEW_ID),\n\t\t\t\torder: 15\n\t\t\t}, {\n\t\t\t\tid: MenuId.DebugConsoleContext,\n\t\t\t\tgroup: 'z_commands',\n\t\t\t\torder: 25\n\t\t\t}],\n\t\t});\n\t}\n\n\trunInView(accessor: ServicesAccessor, view: Repl): void | Promise<void> {\n\t\tview.openFind();\n\t}\n}\n\nclass ReplCopyAllAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'repl.action.copyAll',\n\t\t\tlabel: localize('actions.repl.copyAll', \"Debug: Console Copy All\"),\n\t\t\talias: 'Debug Console Copy All',\n\t\t\tprecondition: CONTEXT_IN_DEBUG_REPL,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor): void | Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst repl = getReplView(accessor.get(IViewsService));\n\t\tif (repl) {\n\t\t\treturn clipboardService.writeText(repl.getVisibleContent());\n\t\t}\n\t}\n}\n\nregisterEditorAction(AcceptReplInputAction);\nregisterEditorAction(ReplCopyAllAction);\nregisterAction2(FilterReplAction);\nregisterAction2(FindReplAction);\n\nclass SelectReplActionViewItem extends FocusSessionActionViewItem {\n\n\tprotected override getSessions(): ReadonlyArray<IDebugSession> {\n\t\treturn this.debugService.getModel().getSessions(true).filter(s => s.hasSeparateRepl() && !sessionsToIgnore.has(s));\n\t}\n\n\tprotected override mapFocusedSessionToSelected(focusedSession: IDebugSession): IDebugSession {\n\t\twhile (focusedSession.parentSession && !focusedSession.hasSeparateRepl()) {\n\t\t\tfocusedSession = focusedSession.parentSession;\n\t\t}\n\t\treturn focusedSession;\n\t}\n}\n\nexport function getReplView(viewsService: IViewsService): Repl | undefined {\n\treturn viewsService.getActiveViewWithId(REPL_VIEW_ID) as Repl ?? undefined;\n}\n\nconst selectReplCommandId = 'workbench.action.debug.selectRepl';\nregisterAction2(class extends ViewAction<Repl> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: selectReplCommandId,\n\t\t\tviewId: REPL_VIEW_ID,\n\t\t\ttitle: localize('selectRepl', \"Select Debug Console\"),\n\t\t\tf1: false,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.equals('view', REPL_VIEW_ID), CONTEXT_MULTI_SESSION_REPL),\n\t\t\t\torder: 20\n\t\t\t}\n\t\t});\n\t}\n\n\tasync runInView(accessor: ServicesAccessor, view: Repl, session: IDebugSession | undefined) {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\t// If session is already the focused session we need to manualy update the tree since view model will not send a focused change event\n\t\tif (session && session.state !== State.Inactive && session !== debugService.getViewModel().focusedSession) {\n\t\t\tif (session.state !== State.Stopped) {\n\t\t\t\t// Focus child session instead if it is stopped #112595\n\t\t\t\tconst stopppedChildSession = debugService.getModel().getSessions().find(s => s.parentSession === session && s.state === State.Stopped);\n\t\t\t\tif (stopppedChildSession) {\n\t\t\t\t\tsession = stopppedChildSession;\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait debugService.focusStackFrame(undefined, undefined, session, { explicit: true });\n\t\t}\n\t\t// Need to select the session in the view since the focussed session might not have changed\n\t\tawait view.selectSession(session);\n\t}\n});\n\nregisterAction2(class extends ViewAction<Repl> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.debug.panel.action.clearReplAction',\n\t\t\tviewId: REPL_VIEW_ID,\n\t\t\ttitle: localize2('clearRepl', 'Clear Console'),\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize2('clearRepl.descriotion', 'Clears all program output from your debug REPL')\n\t\t\t},\n\t\t\tf1: true,\n\t\t\ticon: debugConsoleClearAll,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', REPL_VIEW_ID),\n\t\t\t\torder: 30\n\t\t\t}, {\n\t\t\t\tid: MenuId.DebugConsoleContext,\n\t\t\t\tgroup: 'z_commands',\n\t\t\t\torder: 20\n\t\t\t}],\n\t\t\tkeybinding: [{\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyK },\n\t\t\t\t// Weight is higher than work workbench contributions so the keybinding remains\n\t\t\t\t// highest priority when chords are registered afterwards\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t\t\t\twhen: ContextKeyExpr.equals('focusedView', 'workbench.panel.repl.view')\n\t\t\t}],\n\t\t});\n\t}\n\n\trunInView(_accessor: ServicesAccessor, view: Repl): void {\n\t\tconst accessibilitySignalService = _accessor.get(IAccessibilitySignalService);\n\t\tview.clearRepl();\n\t\taccessibilitySignalService.playSignal(AccessibilitySignal.clear);\n\t}\n});\n\nregisterAction2(class extends ViewAction<Repl> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'debug.collapseRepl',\n\t\t\ttitle: localize('collapse', \"Collapse All\"),\n\t\t\tviewId: REPL_VIEW_ID,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.DebugConsoleContext,\n\t\t\t\tgroup: 'z_commands',\n\t\t\t\torder: 10\n\t\t\t}\n\t\t});\n\t}\n\n\trunInView(_accessor: ServicesAccessor, view: Repl): void {\n\t\tview.collapseAll();\n\t\tview.focus();\n\t}\n});\n\nregisterAction2(class extends ViewAction<Repl> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'debug.replPaste',\n\t\t\ttitle: localize('paste', \"Paste\"),\n\t\t\tviewId: REPL_VIEW_ID,\n\t\t\tprecondition: CONTEXT_DEBUG_STATE.notEqualsTo(getStateLabel(State.Inactive)),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.DebugConsoleContext,\n\t\t\t\tgroup: '2_cutcopypaste',\n\t\t\t\torder: 30\n\t\t\t}\n\t\t});\n\t}\n\n\tasync runInView(accessor: ServicesAccessor, view: Repl): Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst clipboardText = await clipboardService.readText();\n\t\tif (clipboardText) {\n\t\t\tconst replInput = view.getReplInput();\n\t\t\treplInput.setValue(replInput.getValue().concat(clipboardText));\n\t\t\tview.focus();\n\t\t\tconst model = replInput.getModel();\n\t\t\tconst lineNumber = model ? model.getLineCount() : 0;\n\t\t\tconst column = model?.getLineMaxColumn(lineNumber);\n\t\t\tif (typeof lineNumber === 'number' && typeof column === 'number') {\n\t\t\t\treplInput.setPosition({ lineNumber, column });\n\t\t\t}\n\t\t}\n\t}\n});\n\nregisterAction2(class extends ViewAction<Repl> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.debug.action.copyAll',\n\t\t\ttitle: localize('copyAll', \"Copy All\"),\n\t\t\tviewId: REPL_VIEW_ID,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.DebugConsoleContext,\n\t\t\t\tgroup: '2_cutcopypaste',\n\t\t\t\torder: 20\n\t\t\t}\n\t\t});\n\t}\n\n\tasync runInView(accessor: ServicesAccessor, view: Repl): Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tawait clipboardService.writeText(view.getVisibleContent());\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'debug.replCopy',\n\t\t\ttitle: localize('copy', \"Copy\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.DebugConsoleContext,\n\t\t\t\tgroup: '2_cutcopypaste',\n\t\t\t\torder: 10\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, element: IReplElement): Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst nativeSelection = dom.getActiveWindow().getSelection();\n\t\tconst selectedText = nativeSelection?.toString();\n\t\tif (selectedText && selectedText.length > 0) {\n\t\t\treturn clipboardService.writeText(selectedText);\n\t\t} else if (element) {\n\t\t\treturn clipboardService.writeText(await this.tryEvaluateAndCopy(debugService, element) || element.toString());\n\t\t}\n\t}\n\n\tprivate async tryEvaluateAndCopy(debugService: IDebugService, element: IReplElement): Promise<string | undefined> {\n\t\t// todo: we should expand DAP to allow copying more types here (#187784)\n\t\tif (!(element instanceof ReplEvaluationResult)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stackFrame = debugService.getViewModel().focusedStackFrame;\n\t\tconst session = debugService.getViewModel().focusedSession;\n\t\tif (!stackFrame || !session || !session.capabilities.supportsClipboardContext) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst evaluation = await session.evaluate(element.originalExpression, stackFrame.frameId, 'clipboard');\n\t\t\treturn evaluation?.body.result;\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
