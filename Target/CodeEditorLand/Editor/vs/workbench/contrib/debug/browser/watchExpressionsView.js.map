{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/watchExpressionsView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDragAndDropData } from '../../../../base/browser/dnd.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { IHighlight } from '../../../../base/browser/ui/highlightedlabel/highlightedLabel.js';\nimport { IListVirtualDelegate, ListDragOverEffectPosition, ListDragOverEffectType } from '../../../../base/browser/ui/list/list.js';\nimport { ElementsDragAndDropData, ListViewTargetSector } from '../../../../base/browser/ui/list/listView.js';\nimport { IListAccessibilityProvider } from '../../../../base/browser/ui/list/listWidget.js';\nimport { ITreeContextMenuEvent, ITreeDragAndDrop, ITreeDragOverReaction, ITreeMouseEvent, ITreeNode } from '../../../../base/browser/ui/tree/tree.js';\nimport { IAction } from '../../../../base/common/actions.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { localize } from '../../../../nls.js';\nimport { createAndFillInContextMenuActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { Action2, IMenu, IMenuService, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService, IContextViewService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { WorkbenchAsyncDataTree } from '../../../../platform/list/browser/listService.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ViewAction, ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { IViewletViewOptions } from '../../../browser/parts/views/viewsViewlet.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { CONTEXT_CAN_VIEW_MEMORY, CONTEXT_VARIABLE_IS_READONLY, CONTEXT_WATCH_EXPRESSIONS_EXIST, CONTEXT_WATCH_EXPRESSIONS_FOCUSED, CONTEXT_WATCH_ITEM_TYPE, IDebugConfiguration, IDebugService, IExpression, WATCH_VIEW_ID } from '../common/debug.js';\nimport { Expression, Variable, VisualizedExpression } from '../common/debugModel.js';\nimport { AbstractExpressionDataSource, AbstractExpressionsRenderer, IExpressionTemplateData, IInputBoxOptions, renderViewTree } from './baseDebugView.js';\nimport { DebugExpressionRenderer } from './debugExpressionRenderer.js';\nimport { watchExpressionsAdd, watchExpressionsRemoveAll } from './debugIcons.js';\nimport { VariablesRenderer, VisualizedVariableRenderer } from './variablesView.js';\n\nconst MAX_VALUE_RENDER_LENGTH_IN_VIEWLET = 1024;\nlet ignoreViewUpdates = false;\nlet useCachedEvaluation = false;\n\nexport class WatchExpressionsView extends ViewPane {\n\n\tprivate watchExpressionsUpdatedScheduler: RunOnceScheduler;\n\tprivate needsRefresh = false;\n\tprivate tree!: WorkbenchAsyncDataTree<IDebugService | IExpression, IExpression, FuzzyScore>;\n\tprivate watchExpressionsExist: IContextKey<boolean>;\n\tprivate watchItemType: IContextKey<string | undefined>;\n\tprivate variableReadonly: IContextKey<boolean>;\n\tprivate menu: IMenu;\n\tprivate expressionRenderer: DebugExpressionRenderer;\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IMenuService menuService: IMenuService\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\n\t\tthis.menu = menuService.createMenu(MenuId.DebugWatchContext, contextKeyService);\n\t\tthis._register(this.menu);\n\t\tthis.watchExpressionsUpdatedScheduler = new RunOnceScheduler(() => {\n\t\t\tthis.needsRefresh = false;\n\t\t\tthis.tree.updateChildren();\n\t\t}, 50);\n\t\tthis.watchExpressionsExist = CONTEXT_WATCH_EXPRESSIONS_EXIST.bindTo(contextKeyService);\n\t\tthis.variableReadonly = CONTEXT_VARIABLE_IS_READONLY.bindTo(contextKeyService);\n\t\tthis.watchExpressionsExist.set(this.debugService.getModel().getWatchExpressions().length > 0);\n\t\tthis.watchItemType = CONTEXT_WATCH_ITEM_TYPE.bindTo(contextKeyService);\n\t\tthis.expressionRenderer = instantiationService.createInstance(DebugExpressionRenderer);\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis.element.classList.add('debug-pane');\n\t\tcontainer.classList.add('debug-watch');\n\t\tconst treeContainer = renderViewTree(container);\n\n\t\tconst expressionsRenderer = this.instantiationService.createInstance(WatchExpressionsRenderer, this.expressionRenderer);\n\t\tthis.tree = <WorkbenchAsyncDataTree<IDebugService | IExpression, IExpression, FuzzyScore>>this.instantiationService.createInstance(WorkbenchAsyncDataTree, 'WatchExpressions', treeContainer, new WatchExpressionsDelegate(),\n\t\t\t[\n\t\t\t\texpressionsRenderer,\n\t\t\t\tthis.instantiationService.createInstance(VariablesRenderer, this.expressionRenderer),\n\t\t\t\tthis.instantiationService.createInstance(VisualizedVariableRenderer, this.expressionRenderer),\n\t\t\t],\n\t\t\tthis.instantiationService.createInstance(WatchExpressionsDataSource), {\n\t\t\taccessibilityProvider: new WatchExpressionsAccessibilityProvider(),\n\t\t\tidentityProvider: { getId: (element: IExpression) => element.getId() },\n\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\tgetKeyboardNavigationLabel: (e: IExpression) => {\n\t\t\t\t\tif (e === this.debugService.getViewModel().getSelectedExpression()?.expression) {\n\t\t\t\t\t\t// Don't filter input box\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn e.name;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdnd: new WatchExpressionsDragAndDrop(this.debugService),\n\t\t\toverrideStyles: this.getLocationBasedColors().listOverrideStyles\n\t\t});\n\t\tthis.tree.setInput(this.debugService);\n\t\tCONTEXT_WATCH_EXPRESSIONS_FOCUSED.bindTo(this.tree.contextKeyService);\n\n\t\tthis._register(VisualizedVariableRenderer.rendererOnVisualizationRange(this.debugService.getViewModel(), this.tree));\n\t\tthis._register(this.tree.onContextMenu(e => this.onContextMenu(e)));\n\t\tthis._register(this.tree.onMouseDblClick(e => this.onMouseDblClick(e)));\n\t\tthis._register(this.debugService.getModel().onDidChangeWatchExpressions(async we => {\n\t\t\tthis.watchExpressionsExist.set(this.debugService.getModel().getWatchExpressions().length > 0);\n\t\t\tif (!this.isBodyVisible()) {\n\t\t\t\tthis.needsRefresh = true;\n\t\t\t} else {\n\t\t\t\tif (we && !we.name) {\n\t\t\t\t\t// We are adding a new input box, no need to re-evaluate watch expressions\n\t\t\t\t\tuseCachedEvaluation = true;\n\t\t\t\t}\n\t\t\t\tawait this.tree.updateChildren();\n\t\t\t\tuseCachedEvaluation = false;\n\t\t\t\tif (we instanceof Expression) {\n\t\t\t\t\tthis.tree.reveal(we);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.debugService.getViewModel().onDidFocusStackFrame(() => {\n\t\t\tif (!this.isBodyVisible()) {\n\t\t\t\tthis.needsRefresh = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.watchExpressionsUpdatedScheduler.isScheduled()) {\n\t\t\t\tthis.watchExpressionsUpdatedScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.debugService.getViewModel().onWillUpdateViews(() => {\n\t\t\tif (!ignoreViewUpdates) {\n\t\t\t\tthis.tree.updateChildren();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.onDidChangeBodyVisibility(visible => {\n\t\t\tif (visible && this.needsRefresh) {\n\t\t\t\tthis.watchExpressionsUpdatedScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tlet horizontalScrolling: boolean | undefined;\n\t\tthis._register(this.debugService.getViewModel().onDidSelectExpression(e => {\n\t\t\tconst expression = e?.expression;\n\t\t\tif (expression && this.tree.hasNode(expression)) {\n\t\t\t\thorizontalScrolling = this.tree.options.horizontalScrolling;\n\t\t\t\tif (horizontalScrolling) {\n\t\t\t\t\tthis.tree.updateOptions({ horizontalScrolling: false });\n\t\t\t\t}\n\n\t\t\t\tif (expression.name) {\n\t\t\t\t\t// Only rerender if the input is already done since otherwise the tree is not yet aware of the new element\n\t\t\t\t\tthis.tree.rerender(expression);\n\t\t\t\t}\n\t\t\t} else if (!expression && horizontalScrolling !== undefined) {\n\t\t\t\tthis.tree.updateOptions({ horizontalScrolling: horizontalScrolling });\n\t\t\t\thorizontalScrolling = undefined;\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.debugService.getViewModel().onDidEvaluateLazyExpression(async e => {\n\t\t\tif (e instanceof Variable && this.tree.hasNode(e)) {\n\t\t\t\tawait this.tree.updateChildren(e, false, true);\n\t\t\t\tawait this.tree.expand(e);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.tree.layout(height, width);\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis.tree.domFocus();\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.tree.collapseAll();\n\t}\n\n\tprivate onMouseDblClick(e: ITreeMouseEvent<IExpression>): void {\n\t\tif ((e.browserEvent.target as HTMLElement).className.indexOf('twistie') >= 0) {\n\t\t\t// Ignore double click events on twistie\n\t\t\treturn;\n\t\t}\n\n\t\tconst element = e.element;\n\t\t// double click on primitive value: open input box to be able to select and copy value.\n\t\tconst selectedExpression = this.debugService.getViewModel().getSelectedExpression();\n\t\tif ((element instanceof Expression && element !== selectedExpression?.expression) || (element instanceof VisualizedExpression && element.treeItem.canEdit)) {\n\t\t\tthis.debugService.getViewModel().setSelectedExpression(element, false);\n\t\t} else if (!element) {\n\t\t\t// Double click in watch panel triggers to add a new watch expression\n\t\t\tthis.debugService.addWatchExpression();\n\t\t}\n\t}\n\n\tprivate onContextMenu(e: ITreeContextMenuEvent<IExpression>): void {\n\t\tconst element = e.element;\n\t\tconst selection = this.tree.getSelection();\n\n\t\tthis.watchItemType.set(element instanceof Expression ? 'expression' : element instanceof Variable ? 'variable' : undefined);\n\t\tconst actions: IAction[] = [];\n\t\tconst attributes = element instanceof Variable ? element.presentationHint?.attributes : undefined;\n\t\tthis.variableReadonly.set(!!attributes && attributes.indexOf('readOnly') >= 0 || !!element?.presentationHint?.lazy);\n\t\tcreateAndFillInContextMenuActions(this.menu, { arg: element, shouldForwardArgs: true }, actions);\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => e.anchor,\n\t\t\tgetActions: () => actions,\n\t\t\tgetActionsContext: () => element && selection.includes(element) ? selection : element ? [element] : [],\n\t\t});\n\t}\n}\n\nclass WatchExpressionsDelegate implements IListVirtualDelegate<IExpression> {\n\n\tgetHeight(_element: IExpression): number {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: IExpression): string {\n\t\tif (element instanceof Expression) {\n\t\t\treturn WatchExpressionsRenderer.ID;\n\t\t}\n\n\t\tif (element instanceof VisualizedExpression) {\n\t\t\treturn VisualizedVariableRenderer.ID;\n\t\t}\n\n\t\t// Variable\n\t\treturn VariablesRenderer.ID;\n\t}\n}\n\nfunction isDebugService(element: any): element is IDebugService {\n\treturn typeof element.getConfigurationManager === 'function';\n}\n\nclass WatchExpressionsDataSource extends AbstractExpressionDataSource<IDebugService, IExpression> {\n\n\tpublic override hasChildren(element: IExpression | IDebugService): boolean {\n\t\treturn isDebugService(element) || element.hasChildren;\n\t}\n\n\tprotected override doGetChildren(element: IDebugService | IExpression): Promise<Array<IExpression>> {\n\t\tif (isDebugService(element)) {\n\t\t\tconst debugService = element as IDebugService;\n\t\t\tconst watchExpressions = debugService.getModel().getWatchExpressions();\n\t\t\tconst viewModel = debugService.getViewModel();\n\t\t\treturn Promise.all(watchExpressions.map(we => !!we.name && !useCachedEvaluation\n\t\t\t\t? we.evaluate(viewModel.focusedSession!, viewModel.focusedStackFrame!, 'watch').then(() => we)\n\t\t\t\t: Promise.resolve(we)));\n\t\t}\n\n\t\treturn element.getChildren();\n\t}\n}\n\n\nexport class WatchExpressionsRenderer extends AbstractExpressionsRenderer {\n\n\tstatic readonly ID = 'watchexpression';\n\n\tconstructor(\n\t\tprivate readonly expressionRenderer: DebugExpressionRenderer,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t) {\n\t\tsuper(debugService, contextViewService, hoverService);\n\t}\n\n\tget templateId() {\n\t\treturn WatchExpressionsRenderer.ID;\n\t}\n\n\tpublic override renderElement(node: ITreeNode<IExpression, FuzzyScore>, index: number, data: IExpressionTemplateData): void {\n\t\tdata.elementDisposable.clear();\n\t\tdata.elementDisposable.add(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug.showVariableTypes')) {\n\t\t\t\tsuper.renderExpressionElement(node.element, node, data);\n\t\t\t}\n\t\t}));\n\t\tsuper.renderExpressionElement(node.element, node, data);\n\t}\n\n\tprotected renderExpression(expression: IExpression, data: IExpressionTemplateData, highlights: IHighlight[]): void {\n\t\tlet text: string;\n\t\tdata.type.textContent = '';\n\t\tconst showType = this.configurationService.getValue<IDebugConfiguration>('debug').showVariableTypes;\n\t\tif (showType && expression.type) {\n\t\t\ttext = typeof expression.value === 'string' ? `${expression.name}: ` : expression.name;\n\t\t\t//render type\n\t\t\tdata.type.textContent = expression.type + ' =';\n\t\t} else {\n\t\t\ttext = typeof expression.value === 'string' ? `${expression.name} =` : expression.name;\n\t\t}\n\n\t\tlet title: string;\n\t\tif (expression.type) {\n\t\t\tif (showType) {\n\t\t\t\ttitle = `${expression.name}`;\n\t\t\t} else {\n\t\t\t\ttitle = expression.type === expression.value ?\n\t\t\t\t\texpression.type :\n\t\t\t\t\t`${expression.type}`;\n\t\t\t}\n\t\t} else {\n\t\t\ttitle = expression.value;\n\t\t}\n\n\t\tdata.label.set(text, highlights, title);\n\t\tdata.elementDisposable.add(this.expressionRenderer.renderValue(data.value, expression, {\n\t\t\tshowChanged: true,\n\t\t\tmaxValueLength: MAX_VALUE_RENDER_LENGTH_IN_VIEWLET,\n\t\t\tcolorize: true,\n\t\t\tsession: expression.getSession(),\n\t\t}));\n\t}\n\n\tprotected getInputBoxOptions(expression: IExpression, settingValue: boolean): IInputBoxOptions {\n\t\tif (settingValue) {\n\t\t\treturn {\n\t\t\t\tinitialValue: expression.value,\n\t\t\t\tariaLabel: localize('typeNewValue', \"Type new value\"),\n\t\t\t\tonFinish: async (value: string, success: boolean) => {\n\t\t\t\t\tif (success && value) {\n\t\t\t\t\t\tconst focusedFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\t\t\t\tif (focusedFrame && (expression instanceof Variable || expression instanceof Expression)) {\n\t\t\t\t\t\t\tawait expression.setExpression(value, focusedFrame);\n\t\t\t\t\t\t\tthis.debugService.getViewModel().updateViews();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tinitialValue: expression.name ? expression.name : '',\n\t\t\tariaLabel: localize('watchExpressionInputAriaLabel', \"Type watch expression\"),\n\t\t\tplaceholder: localize('watchExpressionPlaceholder', \"Expression to watch\"),\n\t\t\tonFinish: (value: string, success: boolean) => {\n\t\t\t\tif (success && value) {\n\t\t\t\t\tthis.debugService.renameWatchExpression(expression.getId(), value);\n\t\t\t\t\tignoreViewUpdates = true;\n\t\t\t\t\tthis.debugService.getViewModel().updateViews();\n\t\t\t\t\tignoreViewUpdates = false;\n\t\t\t\t} else if (!expression.name) {\n\t\t\t\t\tthis.debugService.removeWatchExpressions(expression.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected override renderActionBar(actionBar: ActionBar, expression: IExpression) {\n\t\tconst contextKeyService = getContextForWatchExpressionMenu(this.contextKeyService, expression);\n\t\tconst context = expression;\n\t\tconst menu = this.menuService.getMenuActions(MenuId.DebugWatchContext, contextKeyService, { arg: context, shouldForwardArgs: false });\n\n\t\tconst primary: IAction[] = [];\n\t\tcreateAndFillInContextMenuActions(menu, { primary, secondary: [] }, 'inline');\n\n\t\tactionBar.clear();\n\t\tactionBar.context = context;\n\t\tactionBar.push(primary, { icon: true, label: false });\n\t}\n}\n\n/**\n * Gets a context key overlay that has context for the given expression.\n */\nfunction getContextForWatchExpressionMenu(parentContext: IContextKeyService, expression: IExpression) {\n\treturn parentContext.createOverlay([\n\t\t[CONTEXT_CAN_VIEW_MEMORY.key, expression.memoryReference !== undefined],\n\t\t[CONTEXT_WATCH_ITEM_TYPE.key, 'expression']\n\t]);\n}\n\nclass WatchExpressionsAccessibilityProvider implements IListAccessibilityProvider<IExpression> {\n\n\tgetWidgetAriaLabel(): string {\n\t\treturn localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'watchAriaTreeLabel' }, \"Debug Watch Expressions\");\n\t}\n\n\tgetAriaLabel(element: IExpression): string {\n\t\tif (element instanceof Expression) {\n\t\t\treturn localize('watchExpressionAriaLabel', \"{0}, value {1}\", (<Expression>element).name, (<Expression>element).value);\n\t\t}\n\n\t\t// Variable\n\t\treturn localize('watchVariableAriaLabel', \"{0}, value {1}\", (<Variable>element).name, (<Variable>element).value);\n\t}\n}\n\nclass WatchExpressionsDragAndDrop implements ITreeDragAndDrop<IExpression> {\n\n\tconstructor(private debugService: IDebugService) { }\n\n\tonDragOver(data: IDragAndDropData, targetElement: IExpression | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): boolean | ITreeDragOverReaction {\n\t\tif (!(data instanceof ElementsDragAndDropData)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst expressions = (data as ElementsDragAndDropData<IExpression>).elements;\n\t\tif (!(expressions.length > 0 && expressions[0] instanceof Expression)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet dropEffectPosition: ListDragOverEffectPosition | undefined = undefined;\n\t\tif (targetIndex === undefined) {\n\t\t\t// Hovering over the list\n\t\t\tdropEffectPosition = ListDragOverEffectPosition.After;\n\t\t\ttargetIndex = -1;\n\t\t} else {\n\t\t\t// Hovering over an element\n\t\t\tswitch (targetSector) {\n\t\t\t\tcase ListViewTargetSector.TOP:\n\t\t\t\tcase ListViewTargetSector.CENTER_TOP:\n\t\t\t\t\tdropEffectPosition = ListDragOverEffectPosition.Before; break;\n\t\t\t\tcase ListViewTargetSector.CENTER_BOTTOM:\n\t\t\t\tcase ListViewTargetSector.BOTTOM:\n\t\t\t\t\tdropEffectPosition = ListDragOverEffectPosition.After; break;\n\t\t\t}\n\t\t}\n\n\t\treturn { accept: true, effect: { type: ListDragOverEffectType.Move, position: dropEffectPosition }, feedback: [targetIndex] } satisfies ITreeDragOverReaction;\n\t}\n\n\tgetDragURI(element: IExpression): string | null {\n\t\tif (!(element instanceof Expression) || element === this.debugService.getViewModel().getSelectedExpression()?.expression) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn element.getId();\n\t}\n\n\tgetDragLabel(elements: IExpression[]): string | undefined {\n\t\tif (elements.length === 1) {\n\t\t\treturn elements[0].name;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tdrop(data: IDragAndDropData, targetElement: IExpression, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): void {\n\t\tif (!(data instanceof ElementsDragAndDropData)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst draggedElement = (data as ElementsDragAndDropData<IExpression>).elements[0];\n\t\tif (!(draggedElement instanceof Expression)) {\n\t\t\tthrow new Error('Invalid dragged element');\n\t\t}\n\n\t\tconst watches = this.debugService.getModel().getWatchExpressions();\n\t\tconst sourcePosition = watches.indexOf(draggedElement);\n\n\t\tlet targetPosition;\n\t\tif (targetElement instanceof Expression) {\n\t\t\ttargetPosition = watches.indexOf(targetElement);\n\n\t\t\tswitch (targetSector) {\n\t\t\t\tcase ListViewTargetSector.BOTTOM:\n\t\t\t\tcase ListViewTargetSector.CENTER_BOTTOM:\n\t\t\t\t\ttargetPosition++; break;\n\t\t\t}\n\n\t\t\tif (sourcePosition < targetPosition) {\n\t\t\t\ttargetPosition--;\n\t\t\t}\n\t\t} else {\n\t\t\ttargetPosition = watches.length - 1;\n\t\t}\n\n\t\tthis.debugService.moveWatchExpression(draggedElement.getId(), targetPosition);\n\t}\n\n\tdispose(): void { }\n}\n\nregisterAction2(class Collapse extends ViewAction<WatchExpressionsView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'watch.collapse',\n\t\t\tviewId: WATCH_VIEW_ID,\n\t\t\ttitle: localize('collapse', \"Collapse All\"),\n\t\t\tf1: false,\n\t\t\ticon: Codicon.collapseAll,\n\t\t\tprecondition: CONTEXT_WATCH_EXPRESSIONS_EXIST,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: 30,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', WATCH_VIEW_ID)\n\t\t\t}\n\t\t});\n\t}\n\n\trunInView(_accessor: ServicesAccessor, view: WatchExpressionsView) {\n\t\tview.collapseAll();\n\t}\n});\n\nexport const ADD_WATCH_ID = 'workbench.debug.viewlet.action.addWatchExpression'; // Use old and long id for backwards compatibility\nexport const ADD_WATCH_LABEL = localize('addWatchExpression', \"Add Expression\");\n\nregisterAction2(class AddWatchExpressionAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ADD_WATCH_ID,\n\t\t\ttitle: ADD_WATCH_LABEL,\n\t\t\tf1: false,\n\t\t\ticon: watchExpressionsAdd,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', WATCH_VIEW_ID)\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tdebugService.addWatchExpression();\n\t}\n});\n\nexport const REMOVE_WATCH_EXPRESSIONS_COMMAND_ID = 'workbench.debug.viewlet.action.removeAllWatchExpressions';\nexport const REMOVE_WATCH_EXPRESSIONS_LABEL = localize('removeAllWatchExpressions', \"Remove All Expressions\");\nregisterAction2(class RemoveAllWatchExpressionsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: REMOVE_WATCH_EXPRESSIONS_COMMAND_ID, // Use old and long id for backwards compatibility\n\t\t\ttitle: REMOVE_WATCH_EXPRESSIONS_LABEL,\n\t\t\tf1: false,\n\t\t\ticon: watchExpressionsRemoveAll,\n\t\t\tprecondition: CONTEXT_WATCH_EXPRESSIONS_EXIST,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: 20,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', WATCH_VIEW_ID)\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tdebugService.removeWatchExpressions();\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
