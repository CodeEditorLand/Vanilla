{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugANSIHandling.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color, RGBA } from \"../../../../base/common/color.js\";\nimport type { IWorkspaceFolder } from \"../../../../platform/workspace/common/workspace.js\";\nimport { ansiColorIdentifiers } from \"../../terminal/common/terminalColorRegistry.js\";\nimport type { ILinkDetector } from \"./linkDetector.js\";\n\n/**\n * @param text The content to stylize.\n * @returns An {@link HTMLSpanElement} that contains the potentially stylized text.\n */\nexport function handleANSIOutput(\n\ttext: string,\n\tlinkDetector: ILinkDetector,\n\tworkspaceFolder: IWorkspaceFolder | undefined,\n): HTMLSpanElement {\n\tconst root: HTMLSpanElement = document.createElement(\"span\");\n\tconst textLength: number = text.length;\n\n\tlet styleNames: string[] = [];\n\tlet customFgColor: RGBA | string | undefined;\n\tlet customBgColor: RGBA | string | undefined;\n\tlet customUnderlineColor: RGBA | string | undefined;\n\tlet colorsInverted = false;\n\tlet currentPos = 0;\n\tlet buffer = \"\";\n\n\twhile (currentPos < textLength) {\n\t\tlet sequenceFound = false;\n\n\t\t// Potentially an ANSI escape sequence.\n\t\t// See http://ascii-table.com/ansi-escape-sequences.php & https://en.wikipedia.org/wiki/ANSI_escape_code\n\t\tif (\n\t\t\ttext.charCodeAt(currentPos) === 27 &&\n\t\t\ttext.charAt(currentPos + 1) === \"[\"\n\t\t) {\n\t\t\tconst startPos: number = currentPos;\n\t\t\tcurrentPos += 2; // Ignore 'Esc[' as it's in every sequence.\n\n\t\t\tlet ansiSequence = \"\";\n\n\t\t\twhile (currentPos < textLength) {\n\t\t\t\tconst char: string = text.charAt(currentPos);\n\t\t\t\tansiSequence += char;\n\n\t\t\t\tcurrentPos++;\n\n\t\t\t\t// Look for a known sequence terminating character.\n\t\t\t\tif (char.match(/^[ABCDHIJKfhmpsu]$/)) {\n\t\t\t\t\tsequenceFound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (sequenceFound) {\n\t\t\t\t// Flush buffer with previous styles.\n\t\t\t\tappendStylizedStringToContainer(\n\t\t\t\t\troot,\n\t\t\t\t\tbuffer,\n\t\t\t\t\tstyleNames,\n\t\t\t\t\tlinkDetector,\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\tcustomFgColor,\n\t\t\t\t\tcustomBgColor,\n\t\t\t\t\tcustomUnderlineColor,\n\t\t\t\t);\n\n\t\t\t\tbuffer = \"\";\n\n\t\t\t\t/*\n\t\t\t\t * Certain ranges that are matched here do not contain real graphics rendition sequences. For\n\t\t\t\t * the sake of having a simpler expression, they have been included anyway.\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tansiSequence.match(\n\t\t\t\t\t\t/^(?:[34][0-8]|9[0-7]|10[0-7]|[0-9]|2[1-5,7-9]|[34]9|5[8,9]|1[0-9])(?:;[349][0-7]|10[0-7]|[013]|[245]|[34]9)?(?:;[012]?[0-9]?[0-9])*;?m$/,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tconst styleCodes: number[] = ansiSequence\n\t\t\t\t\t\t.slice(0, -1) // Remove final 'm' character.\n\t\t\t\t\t\t.split(\";\") // Separate style codes.\n\t\t\t\t\t\t.filter((elem) => elem !== \"\") // Filter empty elems as '34;m' -> ['34', ''].\n\t\t\t\t\t\t.map((elem) => Number.parseInt(elem, 10)); // Convert to numbers.\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tstyleCodes[0] === 38 ||\n\t\t\t\t\t\tstyleCodes[0] === 48 ||\n\t\t\t\t\t\tstyleCodes[0] === 58\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Advanced color code - can't be combined with formatting codes like simple colors can\n\t\t\t\t\t\t// Ignores invalid colors and additional info beyond what is necessary\n\t\t\t\t\t\tconst colorType =\n\t\t\t\t\t\t\tstyleCodes[0] === 38\n\t\t\t\t\t\t\t\t? \"foreground\"\n\t\t\t\t\t\t\t\t: styleCodes[0] === 48\n\t\t\t\t\t\t\t\t\t? \"background\"\n\t\t\t\t\t\t\t\t\t: \"underline\";\n\n\t\t\t\t\t\tif (styleCodes[1] === 5) {\n\t\t\t\t\t\t\tset8BitColor(styleCodes, colorType);\n\t\t\t\t\t\t} else if (styleCodes[1] === 2) {\n\t\t\t\t\t\t\tset24BitColor(styleCodes, colorType);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetBasicFormatters(styleCodes);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Unsupported sequence so simply hide it.\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentPos = startPos;\n\t\t\t}\n\t\t}\n\n\t\tif (sequenceFound === false) {\n\t\t\tbuffer += text.charAt(currentPos);\n\t\t\tcurrentPos++;\n\t\t}\n\t}\n\n\t// Flush remaining text buffer if not empty.\n\tif (buffer) {\n\t\tappendStylizedStringToContainer(\n\t\t\troot,\n\t\t\tbuffer,\n\t\t\tstyleNames,\n\t\t\tlinkDetector,\n\t\t\tworkspaceFolder,\n\t\t\tcustomFgColor,\n\t\t\tcustomBgColor,\n\t\t\tcustomUnderlineColor,\n\t\t);\n\t}\n\n\treturn root;\n\n\t/**\n\t * Change the foreground or background color by clearing the current color\n\t * and adding the new one.\n\t * @param colorType If `'foreground'`, will change the foreground color, if\n\t * \t`'background'`, will change the background color, and if `'underline'`\n\t * will set the underline color.\n\t * @param color Color to change to. If `undefined` or not provided,\n\t * will clear current color without adding a new one.\n\t */\n\tfunction changeColor(\n\t\tcolorType: \"foreground\" | \"background\" | \"underline\",\n\t\tcolor?: RGBA | string,\n\t): void {\n\t\tif (colorType === \"foreground\") {\n\t\t\tcustomFgColor = color;\n\t\t} else if (colorType === \"background\") {\n\t\t\tcustomBgColor = color;\n\t\t} else if (colorType === \"underline\") {\n\t\t\tcustomUnderlineColor = color;\n\t\t}\n\t\tstyleNames = styleNames.filter(\n\t\t\t(style) => style !== `code-${colorType}-colored`,\n\t\t);\n\t\tif (color !== undefined) {\n\t\t\tstyleNames.push(`code-${colorType}-colored`);\n\t\t}\n\t}\n\n\t/**\n\t * Swap foreground and background colors.  Used for color inversion.  Caller should check\n\t * [] flag to make sure it is appropriate to turn ON or OFF (if it is already inverted don't call\n\t */\n\tfunction reverseForegroundAndBackgroundColors(): void {\n\t\tconst oldFgColor = customFgColor;\n\t\tchangeColor(\"foreground\", customBgColor);\n\t\tchangeColor(\"background\", oldFgColor);\n\t}\n\n\t/**\n\t * Calculate and set basic ANSI formatting. Supports ON/OFF of bold, italic, underline,\n\t * double underline,  crossed-out/strikethrough, overline, dim, blink, rapid blink,\n\t * reverse/invert video, hidden, superscript, subscript and alternate font codes,\n\t * clearing/resetting of foreground, background and underline colors,\n\t * setting normal foreground and background colors, and bright foreground and\n\t * background colors. Not to be used for codes containing advanced colors.\n\t * Will ignore invalid codes.\n\t * @param styleCodes Array of ANSI basic styling numbers, which will be\n\t * applied in order. New colors and backgrounds clear old ones; new formatting\n\t * does not.\n\t * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#SGR }\n\t */\n\tfunction setBasicFormatters(styleCodes: number[]): void {\n\t\tfor (const code of styleCodes) {\n\t\t\tswitch (code) {\n\t\t\t\tcase 0: {\n\t\t\t\t\t// reset (everything)\n\t\t\t\t\tstyleNames = [];\n\t\t\t\t\tcustomFgColor = undefined;\n\t\t\t\t\tcustomBgColor = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 1: {\n\t\t\t\t\t// bold\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-bold`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-bold\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 2: {\n\t\t\t\t\t// dim\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-dim`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-dim\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3: {\n\t\t\t\t\t// italic\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-italic`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-italic\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 4: {\n\t\t\t\t\t// underline\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-underline` &&\n\t\t\t\t\t\t\tstyle !== `code-double-underline`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-underline\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 5: {\n\t\t\t\t\t// blink\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-blink`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-blink\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 6: {\n\t\t\t\t\t// rapid blink\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-rapid-blink`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-rapid-blink\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 7: {\n\t\t\t\t\t// invert foreground and background\n\t\t\t\t\tif (!colorsInverted) {\n\t\t\t\t\t\tcolorsInverted = true;\n\t\t\t\t\t\treverseForegroundAndBackgroundColors();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 8: {\n\t\t\t\t\t// hidden\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-hidden`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-hidden\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 9: {\n\t\t\t\t\t// strike-through/crossed-out\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-strike-through`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-strike-through\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 10: {\n\t\t\t\t\t// normal default font\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => !style.startsWith(\"code-font\"),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 11:\n\t\t\t\tcase 12:\n\t\t\t\tcase 13:\n\t\t\t\tcase 14:\n\t\t\t\tcase 15:\n\t\t\t\tcase 16:\n\t\t\t\tcase 17:\n\t\t\t\tcase 18:\n\t\t\t\tcase 19:\n\t\t\t\tcase 20: {\n\t\t\t\t\t// font codes (and 20 is 'blackletter' font code)\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => !style.startsWith(\"code-font\"),\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(`code-font-${code - 10}`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 21: {\n\t\t\t\t\t// double underline\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-underline` &&\n\t\t\t\t\t\t\tstyle !== `code-double-underline`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-double-underline\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 22: {\n\t\t\t\t\t// normal intensity (bold off and dim off)\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-bold` && style !== `code-dim`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 23: {\n\t\t\t\t\t// Neither italic or blackletter (font 10)\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-italic` && style !== `code-font-10`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 24: {\n\t\t\t\t\t// not underlined (Neither singly nor doubly underlined)\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-underline` &&\n\t\t\t\t\t\t\tstyle !== `code-double-underline`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 25: {\n\t\t\t\t\t// not blinking\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-blink` &&\n\t\t\t\t\t\t\tstyle !== `code-rapid-blink`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 27: {\n\t\t\t\t\t// not reversed/inverted\n\t\t\t\t\tif (colorsInverted) {\n\t\t\t\t\t\tcolorsInverted = false;\n\t\t\t\t\t\treverseForegroundAndBackgroundColors();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 28: {\n\t\t\t\t\t// not hidden (reveal)\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-hidden`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 29: {\n\t\t\t\t\t// not crossed-out\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-strike-through`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 53: {\n\t\t\t\t\t// overlined\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-overline`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-overline\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 55: {\n\t\t\t\t\t// not overlined\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) => style !== `code-overline`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 39: {\n\t\t\t\t\t// default foreground color\n\t\t\t\t\tchangeColor(\"foreground\", undefined);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 49: {\n\t\t\t\t\t// default background color\n\t\t\t\t\tchangeColor(\"background\", undefined);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 59: {\n\t\t\t\t\t// default underline color\n\t\t\t\t\tchangeColor(\"underline\", undefined);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 73: {\n\t\t\t\t\t// superscript\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-superscript` &&\n\t\t\t\t\t\t\tstyle !== `code-subscript`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-superscript\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 74: {\n\t\t\t\t\t// subscript\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-superscript` &&\n\t\t\t\t\t\t\tstyle !== `code-subscript`,\n\t\t\t\t\t);\n\t\t\t\t\tstyleNames.push(\"code-subscript\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 75: {\n\t\t\t\t\t// neither superscript or subscript\n\t\t\t\t\tstyleNames = styleNames.filter(\n\t\t\t\t\t\t(style) =>\n\t\t\t\t\t\t\tstyle !== `code-superscript` &&\n\t\t\t\t\t\t\tstyle !== `code-subscript`,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tsetBasicColor(code);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calculate and set styling for complicated 24-bit ANSI color codes.\n\t * @param styleCodes Full list of integer codes that make up the full ANSI\n\t * sequence, including the two defining codes and the three RGB codes.\n\t * @param colorType If `'foreground'`, will set foreground color, if\n\t * `'background'`, will set background color, and if it is `'underline'`\n\t * will set the underline color.\n\t * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit }\n\t */\n\tfunction set24BitColor(\n\t\tstyleCodes: number[],\n\t\tcolorType: \"foreground\" | \"background\" | \"underline\",\n\t): void {\n\t\tif (\n\t\t\tstyleCodes.length >= 5 &&\n\t\t\tstyleCodes[2] >= 0 &&\n\t\t\tstyleCodes[2] <= 255 &&\n\t\t\tstyleCodes[3] >= 0 &&\n\t\t\tstyleCodes[3] <= 255 &&\n\t\t\tstyleCodes[4] >= 0 &&\n\t\t\tstyleCodes[4] <= 255\n\t\t) {\n\t\t\tconst customColor = new RGBA(\n\t\t\t\tstyleCodes[2],\n\t\t\t\tstyleCodes[3],\n\t\t\t\tstyleCodes[4],\n\t\t\t);\n\t\t\tchangeColor(colorType, customColor);\n\t\t}\n\t}\n\n\t/**\n\t * Calculate and set styling for advanced 8-bit ANSI color codes.\n\t * @param styleCodes Full list of integer codes that make up the ANSI\n\t * sequence, including the two defining codes and the one color code.\n\t * @param colorType If `'foreground'`, will set foreground color, if\n\t * `'background'`, will set background color and if it is `'underline'`\n\t * will set the underline color.\n\t * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit }\n\t */\n\tfunction set8BitColor(\n\t\tstyleCodes: number[],\n\t\tcolorType: \"foreground\" | \"background\" | \"underline\",\n\t): void {\n\t\tlet colorNumber = styleCodes[2];\n\t\tconst color = calcANSI8bitColor(colorNumber);\n\n\t\tif (color) {\n\t\t\tchangeColor(colorType, color);\n\t\t} else if (colorNumber >= 0 && colorNumber <= 15) {\n\t\t\tif (colorType === \"underline\") {\n\t\t\t\t// for underline colors we just decode the 0-15 color number to theme color, set and return\n\t\t\t\tconst colorName = ansiColorIdentifiers[colorNumber];\n\t\t\t\tchangeColor(colorType, `--vscode-treminal-${colorName}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Need to map to one of the four basic color ranges (30-37, 90-97, 40-47, 100-107)\n\t\t\tcolorNumber += 30;\n\t\t\tif (colorNumber >= 38) {\n\t\t\t\t// Bright colors\n\t\t\t\tcolorNumber += 52;\n\t\t\t}\n\t\t\tif (colorType === \"background\") {\n\t\t\t\tcolorNumber += 10;\n\t\t\t}\n\t\t\tsetBasicColor(colorNumber);\n\t\t}\n\t}\n\n\t/**\n\t * Calculate and set styling for basic bright and dark ANSI color codes. Uses\n\t * theme colors if available. Automatically distinguishes between foreground\n\t * and background colors; does not support color-clearing codes 39 and 49.\n\t * @param styleCode Integer color code on one of the following ranges:\n\t * [30-37, 90-97, 40-47, 100-107]. If not on one of these ranges, will do\n\t * nothing.\n\t */\n\tfunction setBasicColor(styleCode: number): void {\n\t\tlet colorType: \"foreground\" | \"background\" | undefined;\n\t\tlet colorIndex: number | undefined;\n\n\t\tif (styleCode >= 30 && styleCode <= 37) {\n\t\t\tcolorIndex = styleCode - 30;\n\t\t\tcolorType = \"foreground\";\n\t\t} else if (styleCode >= 90 && styleCode <= 97) {\n\t\t\tcolorIndex = styleCode - 90 + 8; // High-intensity (bright)\n\t\t\tcolorType = \"foreground\";\n\t\t} else if (styleCode >= 40 && styleCode <= 47) {\n\t\t\tcolorIndex = styleCode - 40;\n\t\t\tcolorType = \"background\";\n\t\t} else if (styleCode >= 100 && styleCode <= 107) {\n\t\t\tcolorIndex = styleCode - 100 + 8; // High-intensity (bright)\n\t\t\tcolorType = \"background\";\n\t\t}\n\n\t\tif (colorIndex !== undefined && colorType) {\n\t\t\tconst colorName = ansiColorIdentifiers[colorIndex];\n\t\t\tchangeColor(\n\t\t\t\tcolorType,\n\t\t\t\t`--vscode-${colorName.replaceAll(\".\", \"-\")}`,\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * @param root The {@link HTMLElement} to append the content to.\n * @param stringContent The text content to be appended.\n * @param cssClasses The list of CSS styles to apply to the text content.\n * @param linkDetector The {@link ILinkDetector} responsible for generating links from {@param stringContent}.\n * @param customTextColor If provided, will apply custom color with inline style.\n * @param customBackgroundColor If provided, will apply custom backgroundColor with inline style.\n * @param customUnderlineColor If provided, will apply custom textDecorationColor with inline style.\n */\nexport function appendStylizedStringToContainer(\n\troot: HTMLElement,\n\tstringContent: string,\n\tcssClasses: string[],\n\tlinkDetector: ILinkDetector,\n\tworkspaceFolder: IWorkspaceFolder | undefined,\n\tcustomTextColor?: RGBA | string,\n\tcustomBackgroundColor?: RGBA | string,\n\tcustomUnderlineColor?: RGBA | string,\n): void {\n\tif (!root || !stringContent) {\n\t\treturn;\n\t}\n\n\tconst container = linkDetector.linkify(\n\t\tstringContent,\n\t\ttrue,\n\t\tworkspaceFolder,\n\t);\n\n\tcontainer.className = cssClasses.join(\" \");\n\tif (customTextColor) {\n\t\tcontainer.style.color =\n\t\t\ttypeof customTextColor === \"string\"\n\t\t\t\t? `var(${customTextColor})`\n\t\t\t\t: Color.Format.CSS.formatRGB(new Color(customTextColor));\n\t}\n\tif (customBackgroundColor) {\n\t\tcontainer.style.backgroundColor =\n\t\t\ttypeof customBackgroundColor === \"string\"\n\t\t\t\t? `var(${customBackgroundColor})`\n\t\t\t\t: Color.Format.CSS.formatRGB(new Color(customBackgroundColor));\n\t}\n\tif (customUnderlineColor) {\n\t\tcontainer.style.textDecorationColor =\n\t\t\ttypeof customUnderlineColor === \"string\"\n\t\t\t\t? `var(${customUnderlineColor})`\n\t\t\t\t: Color.Format.CSS.formatRGB(new Color(customUnderlineColor));\n\t}\n\n\troot.appendChild(container);\n}\n\n/**\n * Calculate the color from the color set defined in the ANSI 8-bit standard.\n * Standard and high intensity colors are not defined in the standard as specific\n * colors, so these and invalid colors return `undefined`.\n * @see {@link https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit } for info.\n * @param colorNumber The number (ranging from 16 to 255) referring to the color\n * desired.\n */\nexport function calcANSI8bitColor(colorNumber: number): RGBA | undefined {\n\tif (colorNumber % 1 !== 0) {\n\t\t// Should be integer\n\t\treturn;\n\t}\n\tif (colorNumber >= 16 && colorNumber <= 231) {\n\t\t// Converts to one of 216 RGB colors\n\t\tcolorNumber -= 16;\n\n\t\tlet blue: number = colorNumber % 6;\n\t\tcolorNumber = (colorNumber - blue) / 6;\n\t\tlet green: number = colorNumber % 6;\n\t\tcolorNumber = (colorNumber - green) / 6;\n\t\tlet red: number = colorNumber;\n\n\t\t// red, green, blue now range on [0, 5], need to map to [0,255]\n\t\tconst convFactor: number = 255 / 5;\n\t\tblue = Math.round(blue * convFactor);\n\t\tgreen = Math.round(green * convFactor);\n\t\tred = Math.round(red * convFactor);\n\n\t\treturn new RGBA(red, green, blue);\n\t} else if (colorNumber >= 232 && colorNumber <= 255) {\n\t\t// Converts to a grayscale value\n\t\tcolorNumber -= 232;\n\t\tconst colorLevel: number = Math.round((colorNumber / 23) * 255);\n\t\treturn new RGBA(colorLevel, colorLevel, colorLevel);\n\t} else {\n\t\treturn;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
