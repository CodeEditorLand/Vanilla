import{KeyCode as re,KeyMod as w}from"../../../../base/common/keyCodes.js";import{FileAccess as m}from"../../../../base/common/network.js";import{isMacintosh as ae,isWeb as Fe}from"../../../../base/common/platform.js";import"./media/debug.contribution.css";import"./media/debugHover.css";import{EditorContributionInstantiation as v,registerEditorContribution as M}from"../../../../editor/browser/editorExtensions.js";import*as e from"../../../../nls.js";import{AccessibleViewRegistry as P}from"../../../../platform/accessibility/browser/accessibleViewRegistry.js";import{MenuId as o,MenuRegistry as l}from"../../../../platform/actions/common/actions.js";import{Extensions as Ye,ConfigurationScope as Qe}from"../../../../platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as r}from"../../../../platform/contextkey/common/contextkey.js";import{SyncDescriptor as b}from"../../../../platform/instantiation/common/descriptors.js";import{InstantiationType as se,registerSingleton as le}from"../../../../platform/instantiation/common/extensions.js";import{Extensions as ue}from"../../../../platform/quickinput/common/quickAccess.js";import{Registry as u}from"../../../../platform/registry/common/platform.js";import{EditorPaneDescriptor as je}from"../../../browser/editor.js";import{ViewPaneContainer as Je}from"../../../browser/parts/views/viewPaneContainer.js";import{Extensions as p,WorkbenchPhase as de,registerWorkbenchContribution2 as ce}from"../../../common/contributions.js";import{EditorExtensions as $e}from"../../../common/editor.js";import{ViewContainerLocation as ge,Extensions as A}from"../../../common/views.js";import{launchSchemaId as Ze}from"../../../services/configuration/common/configuration.js";import{LifecyclePhase as E}from"../../../services/lifecycle/common/lifecycle.js";import{COPY_NOTEBOOK_VARIABLE_VALUE_ID as eo,COPY_NOTEBOOK_VARIABLE_VALUE_LABEL as oo}from"../../notebook/browser/contrib/notebookVariables/notebookVariableCommands.js";import{BREAKPOINTS_VIEW_ID as io,BREAKPOINT_EDITOR_CONTRIBUTION_ID as no,CALLSTACK_VIEW_ID as to,CONTEXT_BREAKPOINTS_EXIST as ro,CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED as be,CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED as me,CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED as pe,CONTEXT_CALLSTACK_ITEM_TYPE as g,CONTEXT_CAN_VIEW_MEMORY as x,CONTEXT_DEBUGGERS_AVAILABLE as s,CONTEXT_DEBUG_STATE as a,CONTEXT_DEBUG_UX as _,CONTEXT_FOCUSED_SESSION_IS_ATTACH as U,CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG as W,CONTEXT_HAS_DEBUGGED as ao,CONTEXT_IN_DEBUG_MODE as n,CONTEXT_JUMP_TO_CURSOR_SUPPORTED as Ee,CONTEXT_LOADED_SCRIPTS_SUPPORTED as so,CONTEXT_RESTART_FRAME_SUPPORTED as lo,CONTEXT_SET_EXPRESSION_SUPPORTED as _e,CONTEXT_SET_VARIABLE_SUPPORTED as Ce,CONTEXT_STACK_FRAME_SUPPORTS_RESTART as uo,CONTEXT_STEP_INTO_TARGETS_SUPPORTED as co,CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED as he,CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED as y,CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT as I,CONTEXT_VARIABLE_IS_READONLY as Te,CONTEXT_VARIABLE_VALUE as go,CONTEXT_WATCH_ITEM_TYPE as C,DEBUG_PANEL_ID as q,DISASSEMBLY_VIEW_ID as bo,EDITOR_CONTRIBUTION_ID as mo,IDebugService as po,INTERNAL_CONSOLE_OPTIONS_SCHEMA as Eo,LOADED_SCRIPTS_VIEW_ID as _o,REPL_VIEW_ID as Co,State as G,VARIABLES_VIEW_ID as ho,VIEWLET_ID as De,WATCH_VIEW_ID as To,getStateLabel as K}from"../common/debug.js";import{DebugContentProvider as Do}from"../common/debugContentProvider.js";import{DebugLifecycle as fo}from"../common/debugLifecycle.js";import{DebugVisualizerService as So,IDebugVisualizerService as Io}from"../common/debugVisualizers.js";import{DisassemblyViewInput as wo}from"../common/disassemblyViewInput.js";import{BreakpointEditorContribution as Ao}from"./breakpointEditorContribution.js";import{BreakpointsView as yo}from"./breakpointsView.js";import{CallStackEditorContribution as ko}from"./callStackEditorContribution.js";import{CallStackView as Oo}from"./callStackView.js";import{registerColors as Ro}from"./debugColors.js";import{ADD_CONFIGURATION_ID as Vo,ADD_TO_WATCH_ID as fe,ADD_TO_WATCH_LABEL as Se,CALLSTACK_BOTTOM_ID as Lo,CALLSTACK_BOTTOM_LABEL as Bo,CALLSTACK_DOWN_ID as No,CALLSTACK_DOWN_LABEL as zo,CALLSTACK_TOP_ID as vo,CALLSTACK_TOP_LABEL as Mo,CALLSTACK_UP_ID as Po,CALLSTACK_UP_LABEL as xo,CONTINUE_ID as k,CONTINUE_LABEL as X,COPY_EVALUATE_PATH_ID as Ie,COPY_EVALUATE_PATH_LABEL as we,COPY_STACK_TRACE_ID as Uo,COPY_VALUE_ID as H,COPY_VALUE_LABEL as Ae,DEBUG_COMMAND_CATEGORY as Wo,DEBUG_CONSOLE_QUICK_ACCESS_PREFIX as qo,DEBUG_QUICK_ACCESS_PREFIX as Go,DEBUG_RUN_COMMAND_ID as F,DEBUG_RUN_LABEL as ye,DEBUG_START_COMMAND_ID as Y,DEBUG_START_LABEL as ke,DISCONNECT_AND_SUSPEND_ID as Oe,DISCONNECT_AND_SUSPEND_LABEL as Re,DISCONNECT_ID as Ve,DISCONNECT_LABEL as Le,EDIT_EXPRESSION_COMMAND_ID as Ko,FOCUS_REPL_ID as Xo,JUMP_TO_CURSOR_ID as Be,NEXT_DEBUG_CONSOLE_ID as Ho,NEXT_DEBUG_CONSOLE_LABEL as Fo,OPEN_LOADED_SCRIPTS_LABEL as Yo,PAUSE_ID as Q,PAUSE_LABEL as j,PREV_DEBUG_CONSOLE_ID as Qo,PREV_DEBUG_CONSOLE_LABEL as jo,REMOVE_EXPRESSION_COMMAND_ID as Jo,RESTART_FRAME_ID as $o,RESTART_LABEL as J,RESTART_SESSION_ID as O,SELECT_AND_START_ID as Ne,SELECT_AND_START_LABEL as Zo,SELECT_DEBUG_CONSOLE_ID as ze,SELECT_DEBUG_CONSOLE_LABEL as ei,SELECT_DEBUG_SESSION_ID as oi,SELECT_DEBUG_SESSION_LABEL as ii,SET_EXPRESSION_COMMAND_ID as ni,SHOW_LOADED_SCRIPTS_ID as ti,STEP_INTO_ID as R,STEP_INTO_LABEL as $,STEP_INTO_TARGET_ID as ri,STEP_INTO_TARGET_LABEL as ai,STEP_OUT_ID as V,STEP_OUT_LABEL as Z,STEP_OVER_ID as L,STEP_OVER_LABEL as ee,STOP_ID as B,STOP_LABEL as oe,TERMINATE_THREAD_ID as ve,TOGGLE_INLINE_BREAKPOINT_ID as Me}from"./debugCommands.js";import{DebugConsoleQuickAccess as si}from"./debugConsoleQuickAccess.js";import{RunToCursorAction as Pe,SelectionToReplAction as xe,SelectionToWatchExpressionsAction as Ue}from"./debugEditorActions.js";import{DebugEditorContribution as li}from"./debugEditorContribution.js";import*as d from"./debugIcons.js";import{DebugProgressContribution as ui}from"./debugProgress.js";import{StartDebugQuickAccessProvider as di}from"./debugQuickAccess.js";import{DebugService as ci}from"./debugService.js";import{DebugStatusContribution as gi}from"./debugStatus.js";import{DebugTitleContribution as bi}from"./debugTitle.js";import{DebugToolBar as mi}from"./debugToolBar.js";import{DebugViewPaneContainer as pi}from"./debugViewlet.js";import{DisassemblyView as Ei,DisassemblyViewContribution as _i}from"./disassemblyView.js";import{LoadedScriptsView as Ci}from"./loadedScriptsView.js";import{Repl as hi}from"./repl.js";import{ReplAccessibleView as Ti}from"./replAccessibleView.js";import{StatusBarColorProvider as Di}from"./statusbarColorProvider.js";import{BREAK_WHEN_VALUE_CHANGES_ID as We,BREAK_WHEN_VALUE_IS_ACCESSED_ID as qe,BREAK_WHEN_VALUE_IS_READ_ID as Ge,SET_VARIABLE_ID as fi,VIEW_MEMORY_ID as ie,VariablesView as Si}from"./variablesView.js";import{ADD_WATCH_ID as Ii,ADD_WATCH_LABEL as wi,REMOVE_WATCH_EXPRESSIONS_COMMAND_ID as Ai,REMOVE_WATCH_EXPRESSIONS_LABEL as yi,WatchExpressionsView as ki}from"./watchExpressionsView.js";import{WelcomeView as ne}from"./welcomeView.js";import"./debugSettingMigration.js";import{DebugWatchAccessibilityAnnouncer as Ke}from"../common/debugAccessibilityAnnouncer.js";import{ReplAccessibilityAnnouncer as Xe}from"../common/replAccessibilityAnnouncer.js";import{ReplAccessibilityHelp as Oi}from"./replAccessibilityHelp.js";import{RunAndDebugAccessibilityHelp as Ri}from"./runAndDebugAccessibilityHelp.js";const Vi=e.localize("debugCategory","Debug");Ro(),le(po,ci,se.Delayed),le(Io,So,se.Delayed),u.as(p.Workbench).registerWorkbenchContribution(gi,E.Eventually),u.as(p.Workbench).registerWorkbenchContribution(ui,E.Eventually),Fe&&u.as(p.Workbench).registerWorkbenchContribution(bi,E.Eventually),u.as(p.Workbench).registerWorkbenchContribution(mi,E.Restored),u.as(p.Workbench).registerWorkbenchContribution(Do,E.Eventually),u.as(p.Workbench).registerWorkbenchContribution(Di,E.Eventually),u.as(p.Workbench).registerWorkbenchContribution(_i,E.Eventually),u.as(p.Workbench).registerWorkbenchContribution(fo,E.Eventually),u.as(ue.Quickaccess).registerQuickAccessProvider({ctor:di,prefix:Go,contextKey:"inLaunchConfigurationsPicker",placeholder:e.localize("startDebugPlaceholder","Type the name of a launch configuration to run."),helpEntries:[{description:e.localize("startDebuggingHelp","Start Debugging"),commandId:Ne,commandCenterOrder:50}]}),u.as(ue.Quickaccess).registerQuickAccessProvider({ctor:si,prefix:qo,contextKey:"inDebugConsolePicker",placeholder:e.localize("tasksQuickAccessPlaceholder","Type the name of a debug console to open."),helpEntries:[{description:e.localize("tasksQuickAccessHelp","Show All Debug Consoles"),commandId:ze}]}),M("editor.contrib.callStack",ko,v.AfterFirstRender),M(no,Ao,v.AfterFirstRender),M(mo,li,v.BeforeFirstInteraction);const t=(c,D,f,S)=>{l.appendMenuItem(o.CommandPalette,{when:r.and(s,f),group:Vi,command:{id:c,title:D,category:Wo,precondition:S}})};t(O,J),t(ve,e.localize2("terminateThread","Terminate Thread"),n),t(L,ee,n,a.isEqualTo("stopped")),t(R,$,n,a.isEqualTo("stopped")),t(ri,ai,n,r.and(co,n,a.isEqualTo("stopped"))),t(V,Z,n,a.isEqualTo("stopped")),t(Q,j,n,r.and(a.isEqualTo("running"),W.toNegated())),t(Ve,Le,n,r.or(U,y)),t(Oe,Re,n,r.or(U,r.and(he,y))),t(B,oe,n,r.or(U.toNegated(),y)),t(k,X,n,a.isEqualTo("stopped")),t(Xo,e.localize2({comment:["Debug is a noun in this context, not a verb."],key:"debugFocusConsole"},"Focus on Debug Console View")),t(Be,e.localize2("jumpToCursor","Jump to Cursor"),Ee),t(Be,e.localize2("SetNextStatement","Set Next Statement"),Ee),t(Pe.ID,Pe.LABEL,s),t(xe.ID,xe.LABEL,n),t(Ue.ID,Ue.LABEL),t(Me,e.localize2("inlineBreakpoint","Inline Breakpoint")),t(Y,ke,r.and(s,a.notEqualsTo(K(G.Initializing)))),t(F,ye,r.and(s,a.notEqualsTo(K(G.Initializing)))),t(Ne,Zo,r.and(s,a.notEqualsTo(K(G.Initializing)))),t(Ho,Fo),t(Qo,jo),t(ti,Yo,n),t(ze,ei),t(oi,ii),t(vo,Mo,n,a.isEqualTo("stopped")),t(Lo,Bo,n,a.isEqualTo("stopped")),t(Po,xo,n,a.isEqualTo("stopped")),t(No,zo,n,a.isEqualTo("stopped"));const i=(c,D,f,S,N,z,He="navigation",te)=>{l.appendMenuItem(c,{group:He,when:N,order:S,icon:te,command:{id:D,title:f,icon:te,precondition:z}})};if(i(o.DebugCallStackContext,O,J,10,g.isEqualTo("session"),void 0,"3_modification"),i(o.DebugCallStackContext,Ve,Le,20,g.isEqualTo("session"),void 0,"3_modification"),i(o.DebugCallStackContext,Oe,Re,21,r.and(g.isEqualTo("session"),he,y),void 0,"3_modification"),i(o.DebugCallStackContext,B,oe,30,g.isEqualTo("session"),void 0,"3_modification"),i(o.DebugCallStackContext,Q,j,10,r.and(g.isEqualTo("thread"),r.and(a.isEqualTo("running"),W.toNegated()))),i(o.DebugCallStackContext,k,X,10,r.and(g.isEqualTo("thread"),a.isEqualTo("stopped"))),i(o.DebugCallStackContext,L,ee,20,g.isEqualTo("thread"),a.isEqualTo("stopped")),i(o.DebugCallStackContext,R,$,30,g.isEqualTo("thread"),a.isEqualTo("stopped")),i(o.DebugCallStackContext,V,Z,40,g.isEqualTo("thread"),a.isEqualTo("stopped")),i(o.DebugCallStackContext,ve,e.localize("terminateThread","Terminate Thread"),10,g.isEqualTo("thread"),void 0,"termination"),i(o.DebugCallStackContext,$o,e.localize("restartFrame","Restart Frame"),10,r.and(g.isEqualTo("stackFrame"),lo),uo),i(o.DebugCallStackContext,Uo,e.localize("copyStackTrace","Copy Call Stack"),20,g.isEqualTo("stackFrame"),void 0,"3_modification"),i(o.DebugVariablesContext,ie,e.localize("viewMemory","View Binary Data"),15,x,n,"inline",d.debugInspectMemory),i(o.DebugVariablesContext,fi,e.localize("setValue","Set Value"),10,r.or(Ce,r.and(I,_e)),Te.toNegated(),"3_modification"),i(o.DebugVariablesContext,H,Ae,10,void 0,void 0,"5_cutcopypaste"),i(o.DebugVariablesContext,Ie,we,20,I,void 0,"5_cutcopypaste"),i(o.DebugVariablesContext,fe,Se,100,I,void 0,"z_commands"),i(o.DebugVariablesContext,Ge,e.localize("breakWhenValueIsRead","Break on Value Read"),200,pe,void 0,"z_commands"),i(o.DebugVariablesContext,We,e.localize("breakWhenValueChanges","Break on Value Change"),210,be,void 0,"z_commands"),i(o.DebugVariablesContext,qe,e.localize("breakWhenValueIsAccessed","Break on Value Access"),220,me,void 0,"z_commands"),i(o.DebugHoverContext,ie,e.localize("viewMemory","View Binary Data"),15,x,n,"inline",d.debugInspectMemory),i(o.DebugHoverContext,H,Ae,10,void 0,void 0,"5_cutcopypaste"),i(o.DebugHoverContext,Ie,we,20,I,void 0,"5_cutcopypaste"),i(o.DebugHoverContext,fe,Se,100,I,void 0,"z_commands"),i(o.DebugHoverContext,Ge,e.localize("breakWhenValueIsRead","Break on Value Read"),200,pe,void 0,"z_commands"),i(o.DebugHoverContext,We,e.localize("breakWhenValueChanges","Break on Value Change"),210,be,void 0,"z_commands"),i(o.DebugHoverContext,qe,e.localize("breakWhenValueIsAccessed","Break on Value Access"),220,me,void 0,"z_commands"),i(o.DebugWatchContext,Ii,wi,10,void 0,void 0,"3_modification"),i(o.DebugWatchContext,Ko,e.localize("editWatchExpression","Edit Expression"),20,C.isEqualTo("expression"),void 0,"3_modification"),i(o.DebugWatchContext,ni,e.localize("setValue","Set Value"),30,r.or(r.and(C.isEqualTo("expression"),_e),r.and(C.isEqualTo("variable"),Ce)),Te.toNegated(),"3_modification"),i(o.DebugWatchContext,H,e.localize("copyValue","Copy Value"),40,r.or(C.isEqualTo("expression"),C.isEqualTo("variable")),n,"3_modification"),i(o.DebugWatchContext,ie,e.localize("viewMemory","View Binary Data"),10,x,void 0,"inline",d.debugInspectMemory),i(o.DebugWatchContext,Jo,e.localize("removeWatchExpression","Remove Expression"),20,C.isEqualTo("expression"),void 0,"inline",d.watchExpressionRemove),i(o.DebugWatchContext,Ai,yi,20,void 0,void 0,"z_commands"),i(o.NotebookVariablesContext,eo,oo,20,go),ae){const c=(D,f,S,N,z)=>{l.appendMenuItem(o.TouchBarContext,{command:{id:D,title:f,icon:{dark:z}},when:r.and(s,N),group:"9_debug",order:S})};c(F,ye,0,n.toNegated(),m.asFileUri("vs/workbench/contrib/debug/browser/media/continue-tb.png")),c(Y,ke,1,n.toNegated(),m.asFileUri("vs/workbench/contrib/debug/browser/media/run-with-debugging-tb.png")),c(k,X,0,a.isEqualTo("stopped"),m.asFileUri("vs/workbench/contrib/debug/browser/media/continue-tb.png")),c(Q,j,1,r.and(n,r.and(a.isEqualTo("running"),W.toNegated())),m.asFileUri("vs/workbench/contrib/debug/browser/media/pause-tb.png")),c(L,ee,2,n,m.asFileUri("vs/workbench/contrib/debug/browser/media/stepover-tb.png")),c(R,$,3,n,m.asFileUri("vs/workbench/contrib/debug/browser/media/stepinto-tb.png")),c(V,Z,4,n,m.asFileUri("vs/workbench/contrib/debug/browser/media/stepout-tb.png")),c(O,J,5,n,m.asFileUri("vs/workbench/contrib/debug/browser/media/restart-tb.png")),c(B,oe,6,n,m.asFileUri("vs/workbench/contrib/debug/browser/media/stop-tb.png"))}l.appendMenuItem(o.EditorTitle,{submenu:o.EditorTitleRun,rememberDefaultAction:!0,title:e.localize2("run","Run or Debug..."),icon:d.debugRun,group:"navigation",order:-1}),l.appendMenuItem(o.MenubarMainMenu,{submenu:o.MenubarDebugMenu,title:{...e.localize2("runMenu","Run"),mnemonicTitle:e.localize({key:"mRun",comment:["&& denotes a mnemonic"]},"&&Run")},order:6}),l.appendMenuItem(o.MenubarDebugMenu,{group:"1_debug",command:{id:Y,title:e.localize({key:"miStartDebugging",comment:["&& denotes a mnemonic"]},"&&Start Debugging")},order:1,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"1_debug",command:{id:F,title:e.localize({key:"miRun",comment:["&& denotes a mnemonic"]},"Run &&Without Debugging")},order:2,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"1_debug",command:{id:B,title:e.localize({key:"miStopDebugging",comment:["&& denotes a mnemonic"]},"&&Stop Debugging"),precondition:n},order:3,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"1_debug",command:{id:O,title:e.localize({key:"miRestart Debugging",comment:["&& denotes a mnemonic"]},"&&Restart Debugging"),precondition:n},order:4,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"2_configuration",command:{id:Vo,title:e.localize({key:"miAddConfiguration",comment:["&& denotes a mnemonic"]},"A&&dd Configuration...")},order:2,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"3_step",command:{id:L,title:e.localize({key:"miStepOver",comment:["&& denotes a mnemonic"]},"Step &&Over"),precondition:a.isEqualTo("stopped")},order:1,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"3_step",command:{id:R,title:e.localize({key:"miStepInto",comment:["&& denotes a mnemonic"]},"Step &&Into"),precondition:a.isEqualTo("stopped")},order:2,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"3_step",command:{id:V,title:e.localize({key:"miStepOut",comment:["&& denotes a mnemonic"]},"Step O&&ut"),precondition:a.isEqualTo("stopped")},order:3,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"3_step",command:{id:k,title:e.localize({key:"miContinue",comment:["&& denotes a mnemonic"]},"&&Continue"),precondition:a.isEqualTo("stopped")},order:4,when:s}),l.appendMenuItem(o.MenubarNewBreakpointMenu,{group:"1_breakpoints",command:{id:Me,title:e.localize({key:"miInlineBreakpoint",comment:["&& denotes a mnemonic"]},"Inline Breakp&&oint")},order:2,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"4_new_breakpoint",title:e.localize({key:"miNewBreakpoint",comment:["&& denotes a mnemonic"]},"&&New Breakpoint"),submenu:o.MenubarNewBreakpointMenu,order:2,when:s}),l.appendMenuItem(o.MenubarDebugMenu,{group:"z_install",command:{id:"debug.installAdditionalDebuggers",title:e.localize({key:"miInstallAdditionalDebuggers",comment:["&& denotes a mnemonic"]},"&&Install Additional Debuggers...")},order:1});const Li=u.as(A.ViewContainersRegistry).registerViewContainer({id:q,title:e.localize2({comment:["Debug is a noun in this context, not a verb."],key:"debugPanel"},"Debug Console"),icon:d.debugConsoleViewIcon,ctorDescriptor:new b(Je,[q,{mergeViewWithContainerWhenSingleView:!0}]),storageId:q,hideIfEmpty:!0,order:2},ge.Panel,{doNotRegisterOpenCommand:!0});u.as(A.ViewsRegistry).registerViews([{id:Co,name:e.localize2({comment:["Debug is a noun in this context, not a verb."],key:"debugPanel"},"Debug Console"),containerIcon:d.debugConsoleViewIcon,canToggleVisibility:!1,canMoveView:!0,when:s,ctorDescriptor:new b(hi),openCommandActionDescriptor:{id:"workbench.debug.action.toggleRepl",mnemonicTitle:e.localize({key:"miToggleDebugConsole",comment:["&& denotes a mnemonic"]},"De&&bug Console"),keybindings:{primary:w.CtrlCmd|w.Shift|re.KeyY},order:2}}],Li);const h=u.as(A.ViewContainersRegistry).registerViewContainer({id:De,title:e.localize2("run and debug","Run and Debug"),openCommandActionDescriptor:{id:De,mnemonicTitle:e.localize({key:"miViewRun",comment:["&& denotes a mnemonic"]},"&&Run"),keybindings:{primary:w.CtrlCmd|w.Shift|re.KeyD},order:3},ctorDescriptor:new b(pi),icon:d.runViewIcon,alwaysUseContainerInfo:!0,order:3},ge.Sidebar),T=u.as(A.ViewsRegistry);T.registerViews([{id:ho,name:e.localize2("variables","Variables"),containerIcon:d.variablesViewIcon,ctorDescriptor:new b(Si),order:10,weight:40,canToggleVisibility:!0,canMoveView:!0,focusCommand:{id:"workbench.debug.action.focusVariablesView"},when:_.isEqualTo("default")}],h),T.registerViews([{id:To,name:e.localize2("watch","Watch"),containerIcon:d.watchViewIcon,ctorDescriptor:new b(ki),order:20,weight:10,canToggleVisibility:!0,canMoveView:!0,focusCommand:{id:"workbench.debug.action.focusWatchView"},when:_.isEqualTo("default")}],h),T.registerViews([{id:to,name:e.localize2("callStack","Call Stack"),containerIcon:d.callStackViewIcon,ctorDescriptor:new b(Oo),order:30,weight:30,canToggleVisibility:!0,canMoveView:!0,focusCommand:{id:"workbench.debug.action.focusCallStackView"},when:_.isEqualTo("default")}],h),T.registerViews([{id:io,name:e.localize2("breakpoints","Breakpoints"),containerIcon:d.breakpointsViewIcon,ctorDescriptor:new b(yo),order:40,weight:20,canToggleVisibility:!0,canMoveView:!0,focusCommand:{id:"workbench.debug.action.focusBreakpointsView"},when:r.or(ro,_.isEqualTo("default"),ao)}],h),T.registerViews([{id:ne.ID,name:ne.LABEL,containerIcon:d.runViewIcon,ctorDescriptor:new b(ne),order:1,weight:40,canToggleVisibility:!0,when:_.isEqualTo("simple")}],h),T.registerViews([{id:_o,name:e.localize2("loadedScripts","Loaded Scripts"),containerIcon:d.loadedScriptsViewIcon,ctorDescriptor:new b(Ci),order:35,weight:5,canToggleVisibility:!0,canMoveView:!0,collapsed:!0,when:r.and(so,_.isEqualTo("default"))}],h),u.as($e.EditorPane).registerEditorPane(je.create(Ei,bo,e.localize("disassembly","Disassembly")),[new b(wo)]);const Bi=u.as(Ye.Configuration);Bi.registerConfiguration({id:"debug",order:20,title:e.localize("debugConfigurationTitle","Debug"),type:"object",properties:{"debug.showVariableTypes":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"showVariableTypes"},"Show variable type in variable pane during debug session"),default:!1},"debug.allowBreakpointsEverywhere":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"allowBreakpointsEverywhere"},"Allow setting breakpoints in any file."),default:!1},"debug.gutterMiddleClickAction":{type:"string",enum:["logpoint","conditionalBreakpoint","triggeredBreakpoint","none"],description:e.localize({comment:["This is the description for a setting"],key:"gutterMiddleClickAction"},"Controls the action to perform when clicking the editor gutter with the middle mouse button."),enumDescriptions:[e.localize("debug.gutterMiddleClickAction.logpoint","Add Logpoint."),e.localize("debug.gutterMiddleClickAction.conditionalBreakpoint","Add Conditional Breakpoint."),e.localize("debug.gutterMiddleClickAction.triggeredBreakpoint","Add Triggered Breakpoint."),e.localize("debug.gutterMiddleClickAction.none","Don't perform any action.")],default:"logpoint"},"debug.openExplorerOnEnd":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"openExplorerOnEnd"},"Automatically open the explorer view at the end of a debug session."),default:!1},"debug.closeReadonlyTabsOnEnd":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"closeReadonlyTabsOnEnd"},"At the end of a debug session, all the read-only tabs associated with that session will be closed"),default:!1},"debug.inlineValues":{type:"string",enum:["on","off","auto"],description:e.localize({comment:["This is the description for a setting"],key:"inlineValues"},"Show variable values inline in editor while debugging."),enumDescriptions:[e.localize("inlineValues.on","Always show variable values inline in editor while debugging."),e.localize("inlineValues.off","Never show variable values inline in editor while debugging."),e.localize("inlineValues.focusNoScroll","Show variable values inline in editor while debugging when the language supports inline value locations.")],default:"auto"},"debug.toolBarLocation":{enum:["floating","docked","commandCenter","hidden"],markdownDescription:e.localize({comment:["This is the description for a setting"],key:"toolBarLocation"},"Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires {0}), or `hidden`.","`#window.commandCenter#`"),default:"floating",markdownEnumDescriptions:[e.localize("debugToolBar.floating","Show debug toolbar in all views."),e.localize("debugToolBar.docked","Show debug toolbar only in debug views."),e.localize("debugToolBar.commandCenter","`(Experimental)` Show debug toolbar in the command center."),e.localize("debugToolBar.hidden","Do not show debug toolbar.")]},"debug.showInStatusBar":{enum:["never","always","onFirstSessionStart"],enumDescriptions:[e.localize("never","Never show debug in Status bar"),e.localize("always","Always show debug in Status bar"),e.localize("onFirstSessionStart","Show debug in Status bar only after debug was started for the first time")],description:e.localize({comment:["This is the description for a setting"],key:"showInStatusBar"},"Controls when the debug Status bar should be visible."),default:"onFirstSessionStart"},"debug.internalConsoleOptions":Eo,"debug.console.closeOnEnd":{type:"boolean",description:e.localize("debug.console.closeOnEnd","Controls if the Debug Console should be automatically closed when the debug session ends."),default:!1},"debug.terminal.clearBeforeReusing":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"debug.terminal.clearBeforeReusing"},"Before starting a new debug session in an integrated or external terminal, clear the terminal."),default:!1},"debug.openDebug":{enum:["neverOpen","openOnSessionStart","openOnFirstSessionStart","openOnDebugBreak"],default:"openOnDebugBreak",description:e.localize("openDebug","Controls when the debug view should open.")},"debug.showSubSessionsInToolBar":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"showSubSessionsInToolBar"},"Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session."),default:!1},"debug.console.fontSize":{type:"number",description:e.localize("debug.console.fontSize","Controls the font size in pixels in the Debug Console."),default:ae?12:14},"debug.console.fontFamily":{type:"string",description:e.localize("debug.console.fontFamily","Controls the font family in the Debug Console."),default:"default"},"debug.console.lineHeight":{type:"number",description:e.localize("debug.console.lineHeight","Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size."),default:0},"debug.console.wordWrap":{type:"boolean",description:e.localize("debug.console.wordWrap","Controls if the lines should wrap in the Debug Console."),default:!0},"debug.console.historySuggestions":{type:"boolean",description:e.localize("debug.console.historySuggestions","Controls if the Debug Console should suggest previously typed input."),default:!0},"debug.console.collapseIdenticalLines":{type:"boolean",description:e.localize("debug.console.collapseIdenticalLines","Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge."),default:!0},"debug.console.acceptSuggestionOnEnter":{enum:["off","on"],description:e.localize("debug.console.acceptSuggestionOnEnter","Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console."),default:"off"},launch:{type:"object",description:e.localize({comment:["This is the description for a setting"],key:"launch"},"Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces."),default:{configurations:[],compounds:[]},$ref:Ze,disallowConfigurationDefault:!0},"debug.focusWindowOnBreak":{type:"boolean",description:e.localize("debug.focusWindowOnBreak","Controls whether the workbench window should be focused when the debugger breaks."),default:!0},"debug.focusEditorOnBreak":{type:"boolean",description:e.localize("debug.focusEditorOnBreak","Controls whether the editor should be focused when the debugger breaks."),default:!0},"debug.onTaskErrors":{enum:["debugAnyway","showErrors","prompt","abort"],enumDescriptions:[e.localize("debugAnyway","Ignore task errors and start debugging."),e.localize("showErrors","Show the Problems view and do not start debugging."),e.localize("prompt","Prompt user."),e.localize("cancel","Cancel debugging.")],description:e.localize("debug.onTaskErrors","Controls what to do when errors are encountered after running a preLaunchTask."),default:"prompt"},"debug.showBreakpointsInOverviewRuler":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"showBreakpointsInOverviewRuler"},"Controls whether breakpoints should be shown in the overview ruler."),default:!1},"debug.showInlineBreakpointCandidates":{type:"boolean",description:e.localize({comment:["This is the description for a setting"],key:"showInlineBreakpointCandidates"},"Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging."),default:!0},"debug.saveBeforeStart":{description:e.localize("debug.saveBeforeStart","Controls what editors to save before starting a debug session."),enum:["allEditorsInActiveGroup","nonUntitledEditorsInActiveGroup","none"],enumDescriptions:[e.localize("debug.saveBeforeStart.allEditorsInActiveGroup","Save all editors in the active group before starting a debug session."),e.localize("debug.saveBeforeStart.nonUntitledEditorsInActiveGroup","Save all editors in the active group except untitled ones before starting a debug session."),e.localize("debug.saveBeforeStart.none","Don't save any editors before starting a debug session.")],default:"allEditorsInActiveGroup",scope:Qe.LANGUAGE_OVERRIDABLE},"debug.confirmOnExit":{description:e.localize("debug.confirmOnExit","Controls whether to confirm when the window closes if there are active debug sessions."),type:"string",enum:["never","always"],enumDescriptions:[e.localize("debug.confirmOnExit.never","Never confirm."),e.localize("debug.confirmOnExit.always","Always confirm if there are debug sessions.")],default:"never"},"debug.disassemblyView.showSourceCode":{type:"boolean",default:!0,description:e.localize("debug.disassemblyView.showSourceCode","Show Source Code in Disassembly View.")},"debug.autoExpandLazyVariables":{type:"string",enum:["auto","on","off"],default:"auto",enumDescriptions:[e.localize("debug.autoExpandLazyVariables.auto","When in screen reader optimized mode, automatically expand lazy variables."),e.localize("debug.autoExpandLazyVariables.on","Always automatically expand lazy variables."),e.localize("debug.autoExpandLazyVariables.off","Never automatically expand lazy variables.")],description:e.localize("debug.autoExpandLazyVariables","Controls whether variables that are lazily resolved, such as getters, are automatically resolved and expanded by the debugger.")},"debug.enableStatusBarColor":{type:"boolean",description:e.localize("debug.enableStatusBarColor","Color of the Status bar when debugger is active."),default:!0},"debug.hideLauncherWhileDebugging":{type:"boolean",markdownDescription:e.localize({comment:["This is the description for a setting"],key:"debug.hideLauncherWhileDebugging"},"Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when {0} is not `docked`.","`#debug.toolBarLocation#`"),default:!1}}}),P.register(new Ti),P.register(new Oi),P.register(new Ri),ce(Xe.ID,Xe,de.AfterRestored),ce(Ke.ID,Ke,de.AfterRestored);
