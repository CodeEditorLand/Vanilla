{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugEditorActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getDomNodePagePosition } from \"../../../../base/browser/dom.js\";\nimport { Action } from \"../../../../base/common/actions.js\";\nimport { KeyChord, KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\ttype IActionOptions,\n\tregisterEditorAction,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport { ILanguageFeaturesService } from \"../../../../editor/common/services/languageFeatures.js\";\nimport { MessageController } from \"../../../../editor/contrib/message/browser/messageController.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { ILocalizedString } from \"../../../../platform/action/common/action.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { PanelFocusContext } from \"../../../common/contextkeys.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { CONTEXT_IN_CHAT_SESSION } from \"../../chat/common/chatContextKeys.js\";\nimport {\n\tBREAKPOINT_EDITOR_CONTRIBUTION_ID,\n\tBreakpointWidgetContext,\n\tCONTEXT_CALLSTACK_ITEM_TYPE,\n\tCONTEXT_DEBUGGERS_AVAILABLE,\n\tCONTEXT_DEBUG_STATE,\n\tCONTEXT_DISASSEMBLE_REQUEST_SUPPORTED,\n\tCONTEXT_DISASSEMBLY_VIEW_FOCUS,\n\tCONTEXT_EXCEPTION_WIDGET_VISIBLE,\n\tCONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE,\n\tCONTEXT_IN_DEBUG_MODE,\n\tCONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST,\n\tCONTEXT_STEP_INTO_TARGETS_SUPPORTED,\n\tEDITOR_CONTRIBUTION_ID,\n\ttype IBreakpointEditorContribution,\n\ttype IDebugConfiguration,\n\ttype IDebugEditorContribution,\n\tIDebugService,\n\tREPL_VIEW_ID,\n\tWATCH_VIEW_ID,\n} from \"../common/debug.js\";\nimport { getEvaluatableExpressionAtPosition } from \"../common/debugUtils.js\";\nimport { DisassemblyViewInput } from \"../common/disassemblyViewInput.js\";\nimport { openBreakpointSource } from \"./breakpointsView.js\";\nimport { DisassemblyView } from \"./disassemblyView.js\";\nimport type { Repl } from \"./repl.js\";\n\nclass ToggleBreakpointAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.debug.action.toggleBreakpoint\",\n\t\t\ttitle: {\n\t\t\t\t...nls.localize2(\n\t\t\t\t\t\"toggleBreakpointAction\",\n\t\t\t\t\t\"Debug: Toggle Breakpoint\",\n\t\t\t\t),\n\t\t\t\tmnemonicTitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miToggleBreakpoint\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Toggle &&Breakpoint\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\tCONTEXT_DISASSEMBLY_VIEW_FOCUS,\n\t\t\t\t),\n\t\t\t\tprimary: KeyCode.F9,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarDebugMenu,\n\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\tgroup: \"4_new_breakpoint\",\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst activePane = editorService.activeEditorPane;\n\t\tif (activePane instanceof DisassemblyView) {\n\t\t\tconst location = activePane.focusedAddressAndOffset;\n\t\t\tif (location) {\n\t\t\t\tconst bps = debugService.getModel().getInstructionBreakpoints();\n\t\t\t\tconst toRemove = bps.find(\n\t\t\t\t\t(bp) => bp.address === location.address,\n\t\t\t\t);\n\t\t\t\tif (toRemove) {\n\t\t\t\t\tdebugService.removeInstructionBreakpoints(\n\t\t\t\t\t\ttoRemove.instructionReference,\n\t\t\t\t\t\ttoRemove.offset,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdebugService.addInstructionBreakpoint({\n\t\t\t\t\t\tinstructionReference: location.reference,\n\t\t\t\t\t\toffset: location.offset,\n\t\t\t\t\t\taddress: location.address,\n\t\t\t\t\t\tcanPersist: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor =\n\t\t\tcodeEditorService.getFocusedCodeEditor() ||\n\t\t\tcodeEditorService.getActiveCodeEditor();\n\t\tif (editor?.hasModel()) {\n\t\t\tconst modelUri = editor.getModel().uri;\n\t\t\tconst canSet = debugService.canSetBreakpointsIn(editor.getModel());\n\t\t\t// Does not account for multi line selections, Set to remove multiple cursor on the same line\n\t\t\tconst lineNumbers = [\n\t\t\t\t...new Set(\n\t\t\t\t\teditor\n\t\t\t\t\t\t.getSelections()\n\t\t\t\t\t\t.map((s) => s.getPosition().lineNumber),\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tawait Promise.all(\n\t\t\t\tlineNumbers.map(async (line) => {\n\t\t\t\t\tconst bps = debugService\n\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t.getBreakpoints({ lineNumber: line, uri: modelUri });\n\t\t\t\t\tif (bps.length) {\n\t\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\t\tbps.map((bp) =>\n\t\t\t\t\t\t\t\tdebugService.removeBreakpoints(bp.getId()),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (canSet) {\n\t\t\t\t\t\tawait debugService.addBreakpoints(modelUri, [\n\t\t\t\t\t\t\t{ lineNumber: line },\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass ConditionalBreakpointAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.debug.action.conditionalBreakpoint\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"conditionalBreakpointEditorAction\",\n\t\t\t\t\"Debug: Add Conditional Breakpoint...\",\n\t\t\t),\n\t\t\talias: \"Debug: Add Conditional Breakpoint...\",\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miConditionalBreakpoint\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Conditional Breakpoint...\",\n\t\t\t\t),\n\t\t\t\tgroup: \"1_breakpoints\",\n\t\t\t\torder: 1,\n\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (\n\t\t\tposition &&\n\t\t\teditor.hasModel() &&\n\t\t\tdebugService.canSetBreakpointsIn(editor.getModel())\n\t\t) {\n\t\t\teditor\n\t\t\t\t.getContribution<IBreakpointEditorContribution>(\n\t\t\t\t\tBREAKPOINT_EDITOR_CONTRIBUTION_ID,\n\t\t\t\t)\n\t\t\t\t?.showBreakpointWidget(\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tundefined,\n\t\t\t\t\tBreakpointWidgetContext.CONDITION,\n\t\t\t\t);\n\t\t}\n\t}\n}\n\nclass LogPointAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.debug.action.addLogPoint\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"logPointEditorAction\",\n\t\t\t\t\"Debug: Add Logpoint...\",\n\t\t\t),\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\talias: \"Debug: Add Logpoint...\",\n\t\t\tmenuOpts: [\n\t\t\t\t{\n\t\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"miLogPoint\",\n\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"&&Logpoint...\",\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"1_breakpoints\",\n\t\t\t\t\torder: 4,\n\t\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (\n\t\t\tposition &&\n\t\t\teditor.hasModel() &&\n\t\t\tdebugService.canSetBreakpointsIn(editor.getModel())\n\t\t) {\n\t\t\teditor\n\t\t\t\t.getContribution<IBreakpointEditorContribution>(\n\t\t\t\t\tBREAKPOINT_EDITOR_CONTRIBUTION_ID,\n\t\t\t\t)\n\t\t\t\t?.showBreakpointWidget(\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t\tBreakpointWidgetContext.LOG_MESSAGE,\n\t\t\t\t);\n\t\t}\n\t}\n}\n\nclass TriggerByBreakpointAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.debug.action.triggerByBreakpoint\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"triggerByBreakpointEditorAction\",\n\t\t\t\t\"Debug: Add Triggered Breakpoint...\",\n\t\t\t),\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\talias: \"Debug: Triggered Breakpoint...\",\n\t\t\tmenuOpts: [\n\t\t\t\t{\n\t\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"miTriggerByBreakpoint\",\n\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"&&Triggered Breakpoint...\",\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"1_breakpoints\",\n\t\t\t\t\torder: 4,\n\t\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (\n\t\t\tposition &&\n\t\t\teditor.hasModel() &&\n\t\t\tdebugService.canSetBreakpointsIn(editor.getModel())\n\t\t) {\n\t\t\teditor\n\t\t\t\t.getContribution<IBreakpointEditorContribution>(\n\t\t\t\t\tBREAKPOINT_EDITOR_CONTRIBUTION_ID,\n\t\t\t\t)\n\t\t\t\t?.showBreakpointWidget(\n\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\tposition.column,\n\t\t\t\t\tBreakpointWidgetContext.TRIGGER_POINT,\n\t\t\t\t);\n\t\t}\n\t}\n}\n\nclass EditBreakpointAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.debug.action.editBreakpoint\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"EditBreakpointEditorAction\",\n\t\t\t\t\"Debug: Edit Breakpoint\",\n\t\t\t),\n\t\t\talias: \"Debug: Edit Existing Breakpoint\",\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miEditBreakpoint\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Edit Breakpoint\",\n\t\t\t\t),\n\t\t\t\tgroup: \"1_breakpoints\",\n\t\t\t\torder: 1,\n\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tconst debugModel = debugService.getModel();\n\t\tif (!(editor.hasModel() && position)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineBreakpoints = debugModel.getBreakpoints({\n\t\t\tlineNumber: position.lineNumber,\n\t\t});\n\t\tif (lineBreakpoints.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst breakpointDistances = lineBreakpoints.map((b) => {\n\t\t\tif (!b.column) {\n\t\t\t\treturn position.column;\n\t\t\t}\n\n\t\t\treturn Math.abs(b.column - position.column);\n\t\t});\n\t\tconst closestBreakpointIndex = breakpointDistances.indexOf(\n\t\t\tMath.min(...breakpointDistances),\n\t\t);\n\t\tconst closestBreakpoint = lineBreakpoints[closestBreakpointIndex];\n\n\t\teditor\n\t\t\t.getContribution<IBreakpointEditorContribution>(\n\t\t\t\tBREAKPOINT_EDITOR_CONTRIBUTION_ID,\n\t\t\t)\n\t\t\t?.showBreakpointWidget(\n\t\t\t\tclosestBreakpoint.lineNumber,\n\t\t\t\tclosestBreakpoint.column,\n\t\t\t);\n\t}\n}\n\nclass OpenDisassemblyViewAction extends Action2 {\n\tpublic static readonly ID = \"debug.action.openDisassemblyView\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenDisassemblyViewAction.ID,\n\t\t\ttitle: {\n\t\t\t\t...nls.localize2(\n\t\t\t\t\t\"openDisassemblyView\",\n\t\t\t\t\t\"Open Disassembly View\",\n\t\t\t\t),\n\t\t\t\tmnemonicTitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miDisassemblyView\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&DisassemblyView\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tprecondition:\n\t\t\t\tCONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\tgroup: \"debug\",\n\t\t\t\t\torder: 5,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\t\t\tPanelFocusContext.toNegated(),\n\t\t\t\t\t\tCONTEXT_DEBUG_STATE.isEqualTo(\"stopped\"),\n\t\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\t\tCONTEXT_DISASSEMBLE_REQUEST_SUPPORTED,\n\t\t\t\t\t\tCONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.DebugCallStackContext,\n\t\t\t\t\tgroup: \"z_commands\",\n\t\t\t\t\torder: 50,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\t\t\tCONTEXT_DEBUG_STATE.isEqualTo(\"stopped\"),\n\t\t\t\t\t\tCONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo(\"stackFrame\"),\n\t\t\t\t\t\tCONTEXT_DISASSEMBLE_REQUEST_SUPPORTED,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\t\t\tCONTEXT_DEBUG_STATE.isEqualTo(\"stopped\"),\n\t\t\t\t\t\tCONTEXT_DISASSEMBLE_REQUEST_SUPPORTED,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\teditorService.openEditor(DisassemblyViewInput.instance, {\n\t\t\tpinned: true,\n\t\t\trevealIfOpened: true,\n\t\t});\n\t}\n}\n\nclass ToggleDisassemblyViewSourceCodeAction extends Action2 {\n\tpublic static readonly ID = \"debug.action.toggleDisassemblyViewSourceCode\";\n\tpublic static readonly configID: string =\n\t\t\"debug.disassemblyView.showSourceCode\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleDisassemblyViewSourceCodeAction.ID,\n\t\t\ttitle: {\n\t\t\t\t...nls.localize2(\n\t\t\t\t\t\"toggleDisassemblyViewSourceCode\",\n\t\t\t\t\t\"Toggle Source Code in Disassembly View\",\n\t\t\t\t),\n\t\t\t\tmnemonicTitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"mitogglesource\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&ToggleSource\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"toggleDisassemblyViewSourceCodeDescription\",\n\t\t\t\t\t\"Shows or hides source code in disassembly\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor, ...args: any[]): void {\n\t\tconst configService = accessor.get(IConfigurationService);\n\t\tif (configService) {\n\t\t\tconst value =\n\t\t\t\tconfigService.getValue<IDebugConfiguration>(\"debug\")\n\t\t\t\t\t.disassemblyView.showSourceCode;\n\t\t\tconfigService.updateValue(\n\t\t\t\tToggleDisassemblyViewSourceCodeAction.configID,\n\t\t\t\t!value,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport class RunToCursorAction extends EditorAction {\n\tpublic static readonly ID = \"editor.debug.action.runToCursor\";\n\tpublic static readonly LABEL: ILocalizedString = nls.localize2(\n\t\t\"runToCursor\",\n\t\t\"Run to Cursor\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: RunToCursorAction.ID,\n\t\t\tlabel: RunToCursorAction.LABEL.value,\n\t\t\talias: \"Debug: Run to Cursor\",\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\tPanelFocusContext.toNegated(),\n\t\t\t\tContextKeyExpr.or(\n\t\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\t\tCONTEXT_DISASSEMBLY_VIEW_FOCUS,\n\t\t\t\t),\n\t\t\t\tCONTEXT_IN_CHAT_SESSION.negate(),\n\t\t\t),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: \"debug\",\n\t\t\t\torder: 2,\n\t\t\t\twhen: CONTEXT_IN_DEBUG_MODE,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst position = editor.getPosition();\n\t\tif (!(editor.hasModel() && position)) {\n\t\t\treturn;\n\t\t}\n\t\tconst uri = editor.getModel().uri;\n\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst viewModel = debugService.getViewModel();\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\n\t\tlet column: number | undefined;\n\t\tconst focusedStackFrame = viewModel.focusedStackFrame;\n\t\tif (\n\t\t\tfocusedStackFrame &&\n\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\tfocusedStackFrame.source.uri,\n\t\t\t\turi,\n\t\t\t) &&\n\t\t\tfocusedStackFrame.range.startLineNumber === position.lineNumber\n\t\t) {\n\t\t\t// If the cursor is on a line different than the one the debugger is currently paused on, then send the breakpoint on the line without a column\n\t\t\t// otherwise set it at the precise column #102199\n\t\t\tcolumn = position.column;\n\t\t}\n\t\tawait debugService.runTo(uri, position.lineNumber, column);\n\t}\n}\n\nexport class SelectionToReplAction extends EditorAction {\n\tpublic static readonly ID = \"editor.debug.action.selectionToRepl\";\n\tpublic static readonly LABEL: ILocalizedString = nls.localize2(\n\t\t\"evaluateInDebugConsole\",\n\t\t\"Evaluate in Debug Console\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SelectionToReplAction.ID,\n\t\t\tlabel: SelectionToReplAction.LABEL.value,\n\t\t\talias: \"Debug: Evaluate in Console\",\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\tCONTEXT_IN_CHAT_SESSION.negate(),\n\t\t\t),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: \"debug\",\n\t\t\t\torder: 0,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst viewModel = debugService.getViewModel();\n\t\tconst session = viewModel.focusedSession;\n\t\tif (!editor.hasModel() || !session) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = editor.getSelection();\n\t\tlet text: string;\n\t\tif (selection.isEmpty()) {\n\t\t\ttext = editor\n\t\t\t\t.getModel()\n\t\t\t\t.getLineContent(selection.selectionStartLineNumber)\n\t\t\t\t.trim();\n\t\t} else {\n\t\t\ttext = editor.getModel().getValueInRange(selection);\n\t\t}\n\n\t\tconst replView = (await viewsService.openView(REPL_VIEW_ID, false)) as\n\t\t\t| Repl\n\t\t\t| undefined;\n\t\treplView?.sendReplInput(text);\n\t}\n}\n\nexport class SelectionToWatchExpressionsAction extends EditorAction {\n\tpublic static readonly ID = \"editor.debug.action.selectionToWatch\";\n\tpublic static readonly LABEL: ILocalizedString = nls.localize2(\n\t\t\"addToWatch\",\n\t\t\"Add to Watch\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SelectionToWatchExpressionsAction.ID,\n\t\t\tlabel: SelectionToWatchExpressionsAction.LABEL.value,\n\t\t\talias: \"Debug: Add to Watch\",\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\tCONTEXT_IN_CHAT_SESSION.negate(),\n\t\t\t),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: \"debug\",\n\t\t\t\torder: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet expression: string | undefined;\n\n\t\tconst model = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tif (selection.isEmpty()) {\n\t\t\tconst position = editor.getPosition();\n\t\t\tconst evaluatableExpression =\n\t\t\t\tawait getEvaluatableExpressionAtPosition(\n\t\t\t\t\tlanguageFeaturesService,\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition,\n\t\t\t\t);\n\t\t\tif (!evaluatableExpression) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\texpression = evaluatableExpression.matchingExpression;\n\t\t} else {\n\t\t\texpression = model.getValueInRange(selection);\n\t\t}\n\n\t\tif (!expression) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait viewsService.openView(WATCH_VIEW_ID);\n\t\tdebugService.addWatchExpression(expression);\n\t}\n}\n\nclass ShowDebugHoverAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.debug.action.showDebugHover\",\n\t\t\tlabel: nls.localize(\"showDebugHover\", \"Debug: Show Hover\"),\n\t\t\talias: \"Debug: Show Hover\",\n\t\t\tprecondition: CONTEXT_IN_DEBUG_MODE,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyK,\n\t\t\t\t\tKeyMod.CtrlCmd | KeyCode.KeyI,\n\t\t\t\t),\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst position = editor.getPosition();\n\t\tif (!position || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn editor\n\t\t\t.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID)\n\t\t\t?.showHover(position, true);\n\t}\n}\n\nconst NO_TARGETS_MESSAGE = nls.localize(\n\t\"editor.debug.action.stepIntoTargets.notAvailable\",\n\t\"Step targets are not available here\",\n);\n\nclass StepIntoTargetsAction extends EditorAction {\n\tpublic static readonly ID = \"editor.debug.action.stepIntoTargets\";\n\tpublic static readonly LABEL = nls.localize(\n\t\t{\n\t\t\tkey: \"stepIntoTargets\",\n\t\t\tcomment: [\n\t\t\t\t\"Step Into Targets lets the user step into an exact function he or she is interested in.\",\n\t\t\t],\n\t\t},\n\t\t\"Step Into Target\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StepIntoTargetsAction.ID,\n\t\t\tlabel: StepIntoTargetsAction.LABEL,\n\t\t\talias: \"Debug: Step Into Target\",\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_STEP_INTO_TARGETS_SUPPORTED,\n\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\tCONTEXT_DEBUG_STATE.isEqualTo(\"stopped\"),\n\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: \"debug\",\n\t\t\t\torder: 1.5,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst contextMenuService = accessor.get(IContextMenuService);\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\t\tconst session = debugService.getViewModel().focusedSession;\n\t\tconst frame = debugService.getViewModel().focusedStackFrame;\n\t\tconst selection = editor.getSelection();\n\n\t\tconst targetPosition =\n\t\t\tselection?.getPosition() ||\n\t\t\t(frame && {\n\t\t\t\tlineNumber: frame.range.startLineNumber,\n\t\t\t\tcolumn: frame.range.startColumn,\n\t\t\t});\n\n\t\tif (\n\t\t\t!session ||\n\t\t\t!frame ||\n\t\t\t!editor.hasModel() ||\n\t\t\t!uriIdentityService.extUri.isEqual(\n\t\t\t\teditor.getModel().uri,\n\t\t\t\tframe.source.uri,\n\t\t\t)\n\t\t) {\n\t\t\tif (targetPosition) {\n\t\t\t\tMessageController.get(editor)?.showMessage(\n\t\t\t\t\tNO_TARGETS_MESSAGE,\n\t\t\t\t\ttargetPosition,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst targets = await session.stepInTargets(frame.frameId);\n\t\tif (!targets?.length) {\n\t\t\tMessageController.get(editor)?.showMessage(\n\t\t\t\tNO_TARGETS_MESSAGE,\n\t\t\t\ttargetPosition!,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is a selection, try to find the best target with a position to step into.\n\t\tif (selection) {\n\t\t\tconst positionalTargets: {\n\t\t\t\tstart: Position;\n\t\t\t\tend?: Position;\n\t\t\t\ttarget: DebugProtocol.StepInTarget;\n\t\t\t}[] = [];\n\t\t\tfor (const target of targets) {\n\t\t\t\tif (target.line) {\n\t\t\t\t\tpositionalTargets.push({\n\t\t\t\t\t\tstart: new Position(target.line, target.column || 1),\n\t\t\t\t\t\tend: target.endLine\n\t\t\t\t\t\t\t? new Position(\n\t\t\t\t\t\t\t\t\ttarget.endLine,\n\t\t\t\t\t\t\t\t\ttarget.endColumn || 1,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpositionalTargets.sort(\n\t\t\t\t(a, b) =>\n\t\t\t\t\tb.start.lineNumber - a.start.lineNumber ||\n\t\t\t\t\tb.start.column - a.start.column,\n\t\t\t);\n\n\t\t\tconst needle = selection.getPosition();\n\n\t\t\t// Try to find a target with a start and end that is around the cursor\n\t\t\t// position. Or, if none, whatever is before the cursor.\n\t\t\tconst best =\n\t\t\t\tpositionalTargets.find(\n\t\t\t\t\t(t) =>\n\t\t\t\t\t\tt.end &&\n\t\t\t\t\t\tneedle.isBefore(t.end) &&\n\t\t\t\t\t\tt.start.isBeforeOrEqual(needle),\n\t\t\t\t) ||\n\t\t\t\tpositionalTargets.find(\n\t\t\t\t\t(t) =>\n\t\t\t\t\t\tt.end === undefined && t.start.isBeforeOrEqual(needle),\n\t\t\t\t);\n\t\t\tif (best) {\n\t\t\t\tsession.stepIn(frame.thread.threadId, best.target.id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, show a context menu and have the user pick a target\n\t\teditor.revealLineInCenterIfOutsideViewport(frame.range.startLineNumber);\n\t\tconst cursorCoords = editor.getScrolledVisiblePosition(targetPosition!);\n\t\tconst editorCoords = getDomNodePagePosition(editor.getDomNode());\n\t\tconst x = editorCoords.left + cursorCoords.left;\n\t\tconst y = editorCoords.top + cursorCoords.top + cursorCoords.height;\n\n\t\tcontextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => ({ x, y }),\n\t\t\tgetActions: () => {\n\t\t\t\treturn targets.map(\n\t\t\t\t\t(t) =>\n\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t`stepIntoTarget:${t.id}`,\n\t\t\t\t\t\t\tt.label,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t() => session.stepIn(frame.thread.threadId, t.id),\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass GoToBreakpointAction extends EditorAction {\n\tconstructor(\n\t\tprivate isNext: boolean,\n\t\topts: IActionOptions,\n\t) {\n\t\tsuper(opts);\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<any> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\n\t\tif (editor.hasModel()) {\n\t\t\tconst currentUri = editor.getModel().uri;\n\t\t\tconst currentLine = editor.getPosition().lineNumber;\n\t\t\t//Breakpoints returned from `getBreakpoints` are already sorted.\n\t\t\tconst allEnabledBreakpoints = debugService\n\t\t\t\t.getModel()\n\t\t\t\t.getBreakpoints({ enabledOnly: true });\n\n\t\t\t//Try to find breakpoint in current file\n\t\t\tlet moveBreakpoint = this.isNext\n\t\t\t\t? allEnabledBreakpoints\n\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\t\tbp.uri,\n\t\t\t\t\t\t\t\t\tcurrentUri,\n\t\t\t\t\t\t\t\t) && bp.lineNumber > currentLine,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.shift()\n\t\t\t\t: allEnabledBreakpoints\n\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\t\tbp.uri,\n\t\t\t\t\t\t\t\t\tcurrentUri,\n\t\t\t\t\t\t\t\t) && bp.lineNumber < currentLine,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.pop();\n\n\t\t\t//Try to find breakpoints in following files\n\t\t\tif (!moveBreakpoint) {\n\t\t\t\tmoveBreakpoint = this.isNext\n\t\t\t\t\t? allEnabledBreakpoints\n\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\t\t\tbp.uri.toString() > currentUri.toString(),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.shift()\n\t\t\t\t\t: allEnabledBreakpoints\n\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\t\t\tbp.uri.toString() < currentUri.toString(),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.pop();\n\t\t\t}\n\n\t\t\t//Move to first or last possible breakpoint\n\t\t\tif (!moveBreakpoint && allEnabledBreakpoints.length) {\n\t\t\t\tmoveBreakpoint = this.isNext\n\t\t\t\t\t? allEnabledBreakpoints[0]\n\t\t\t\t\t: allEnabledBreakpoints[allEnabledBreakpoints.length - 1];\n\t\t\t}\n\n\t\t\tif (moveBreakpoint) {\n\t\t\t\treturn openBreakpointSource(\n\t\t\t\t\tmoveBreakpoint,\n\t\t\t\t\tfalse,\n\t\t\t\t\ttrue,\n\t\t\t\t\tfalse,\n\t\t\t\t\tdebugService,\n\t\t\t\t\teditorService,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass GoToNextBreakpointAction extends GoToBreakpointAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: \"editor.debug.action.goToNextBreakpoint\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"goToNextBreakpoint\",\n\t\t\t\t\"Debug: Go to Next Breakpoint\",\n\t\t\t),\n\t\t\talias: \"Debug: Go to Next Breakpoint\",\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t});\n\t}\n}\n\nclass GoToPreviousBreakpointAction extends GoToBreakpointAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: \"editor.debug.action.goToPreviousBreakpoint\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"goToPreviousBreakpoint\",\n\t\t\t\t\"Debug: Go to Previous Breakpoint\",\n\t\t\t),\n\t\t\talias: \"Debug: Go to Previous Breakpoint\",\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t});\n\t}\n}\n\nclass CloseExceptionWidgetAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.debug.action.closeExceptionWidget\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"closeExceptionWidget\",\n\t\t\t\t\"Close Exception Widget\",\n\t\t\t),\n\t\t\talias: \"Close Exception Widget\",\n\t\t\tprecondition: CONTEXT_EXCEPTION_WIDGET_VISIBLE,\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(_accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst contribution = editor.getContribution<IDebugEditorContribution>(\n\t\t\tEDITOR_CONTRIBUTION_ID,\n\t\t);\n\t\tcontribution?.closeExceptionWidget();\n\t}\n}\n\nregisterAction2(OpenDisassemblyViewAction);\nregisterAction2(ToggleDisassemblyViewSourceCodeAction);\nregisterAction2(ToggleBreakpointAction);\nregisterEditorAction(ConditionalBreakpointAction);\nregisterEditorAction(LogPointAction);\nregisterEditorAction(TriggerByBreakpointAction);\nregisterEditorAction(EditBreakpointAction);\nregisterEditorAction(RunToCursorAction);\nregisterEditorAction(StepIntoTargetsAction);\nregisterEditorAction(SelectionToReplAction);\nregisterEditorAction(SelectionToWatchExpressionsAction);\nregisterEditorAction(ShowDebugHoverAction);\nregisterEditorAction(GoToNextBreakpointAction);\nregisterEditorAction(GoToPreviousBreakpointAction);\nregisterEditorAction(CloseExceptionWidgetAction);\n"],
  "mappings": "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",
  "names": []
}
