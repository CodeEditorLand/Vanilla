{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugEditorActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getDomNodePagePosition } from '../../../../base/browser/dom.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorAction, IActionOptions, registerEditorAction } from '../../../../editor/browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { MessageController } from '../../../../editor/contrib/message/browser/messageController.js';\nimport * as nls from '../../../../nls.js';\nimport { ILocalizedString } from '../../../../platform/action/common/action.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { PanelFocusContext } from '../../../common/contextkeys.js';\nimport { CONTEXT_IN_CHAT_SESSION } from '../../chat/common/chatContextKeys.js';\nimport { openBreakpointSource } from './breakpointsView.js';\nimport { DisassemblyView } from './disassemblyView.js';\nimport { Repl } from './repl.js';\nimport { BREAKPOINT_EDITOR_CONTRIBUTION_ID, BreakpointWidgetContext, CONTEXT_CALLSTACK_ITEM_TYPE, CONTEXT_DEBUG_STATE, CONTEXT_DEBUGGERS_AVAILABLE, CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED, CONTEXT_DISASSEMBLY_VIEW_FOCUS, CONTEXT_EXCEPTION_WIDGET_VISIBLE, CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE, CONTEXT_IN_DEBUG_MODE, CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST, CONTEXT_STEP_INTO_TARGETS_SUPPORTED, EDITOR_CONTRIBUTION_ID, IBreakpointEditorContribution, IDebugConfiguration, IDebugEditorContribution, IDebugService, REPL_VIEW_ID, WATCH_VIEW_ID } from '../common/debug.js';\nimport { getEvaluatableExpressionAtPosition } from '../common/debugUtils.js';\nimport { DisassemblyViewInput } from '../common/disassemblyViewInput.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\n\nclass ToggleBreakpointAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.toggleBreakpoint',\n\t\t\ttitle: {\n\t\t\t\t...nls.localize2('toggleBreakpointAction', \"Debug: Toggle Breakpoint\"),\n\t\t\t\tmnemonicTitle: nls.localize({ key: 'miToggleBreakpoint', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Breakpoint\"),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.or(EditorContextKeys.editorTextFocus, CONTEXT_DISASSEMBLY_VIEW_FOCUS),\n\t\t\t\tprimary: KeyCode.F9,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarDebugMenu,\n\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\tgroup: '4_new_breakpoint',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst activePane = editorService.activeEditorPane;\n\t\tif (activePane instanceof DisassemblyView) {\n\t\t\tconst location = activePane.focusedAddressAndOffset;\n\t\t\tif (location) {\n\t\t\t\tconst bps = debugService.getModel().getInstructionBreakpoints();\n\t\t\t\tconst toRemove = bps.find(bp => bp.address === location.address);\n\t\t\t\tif (toRemove) {\n\t\t\t\t\tdebugService.removeInstructionBreakpoints(toRemove.instructionReference, toRemove.offset);\n\t\t\t\t} else {\n\t\t\t\t\tdebugService.addInstructionBreakpoint({ instructionReference: location.reference, offset: location.offset, address: location.address, canPersist: false });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\t\tif (editor?.hasModel()) {\n\t\t\tconst modelUri = editor.getModel().uri;\n\t\t\tconst canSet = debugService.canSetBreakpointsIn(editor.getModel());\n\t\t\t// Does not account for multi line selections, Set to remove multiple cursor on the same line\n\t\t\tconst lineNumbers = [...new Set(editor.getSelections().map(s => s.getPosition().lineNumber))];\n\n\t\t\tawait Promise.all(lineNumbers.map(async line => {\n\t\t\t\tconst bps = debugService.getModel().getBreakpoints({ lineNumber: line, uri: modelUri });\n\t\t\t\tif (bps.length) {\n\t\t\t\t\tawait Promise.all(bps.map(bp => debugService.removeBreakpoints(bp.getId())));\n\t\t\t\t} else if (canSet) {\n\t\t\t\t\tawait debugService.addBreakpoints(modelUri, [{ lineNumber: line }]);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n}\n\nclass ConditionalBreakpointAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.conditionalBreakpoint',\n\t\t\tlabel: nls.localize('conditionalBreakpointEditorAction', \"Debug: Add Conditional Breakpoint...\"),\n\t\t\talias: 'Debug: Add Conditional Breakpoint...',\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\ttitle: nls.localize({ key: 'miConditionalBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Conditional Breakpoint...\"),\n\t\t\t\tgroup: '1_breakpoints',\n\t\t\t\torder: 1,\n\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (position && editor.hasModel() && debugService.canSetBreakpointsIn(editor.getModel())) {\n\t\t\teditor.getContribution<IBreakpointEditorContribution>(BREAKPOINT_EDITOR_CONTRIBUTION_ID)?.showBreakpointWidget(position.lineNumber, undefined, BreakpointWidgetContext.CONDITION);\n\t\t}\n\t}\n}\n\nclass LogPointAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.addLogPoint',\n\t\t\tlabel: nls.localize('logPointEditorAction', \"Debug: Add Logpoint...\"),\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\talias: 'Debug: Add Logpoint...',\n\t\t\tmenuOpts: [\n\t\t\t\t{\n\t\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\t\ttitle: nls.localize({ key: 'miLogPoint', comment: ['&& denotes a mnemonic'] }, \"&&Logpoint...\"),\n\t\t\t\t\tgroup: '1_breakpoints',\n\t\t\t\t\torder: 4,\n\t\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (position && editor.hasModel() && debugService.canSetBreakpointsIn(editor.getModel())) {\n\t\t\teditor.getContribution<IBreakpointEditorContribution>(BREAKPOINT_EDITOR_CONTRIBUTION_ID)?.showBreakpointWidget(position.lineNumber, position.column, BreakpointWidgetContext.LOG_MESSAGE);\n\t\t}\n\t}\n}\n\nclass TriggerByBreakpointAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.triggerByBreakpoint',\n\t\t\tlabel: nls.localize('triggerByBreakpointEditorAction', \"Debug: Add Triggered Breakpoint...\"),\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\talias: 'Debug: Triggered Breakpoint...',\n\t\t\tmenuOpts: [\n\t\t\t\t{\n\t\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\t\ttitle: nls.localize({ key: 'miTriggerByBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Triggered Breakpoint...\"),\n\t\t\t\t\tgroup: '1_breakpoints',\n\t\t\t\t\torder: 4,\n\t\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (position && editor.hasModel() && debugService.canSetBreakpointsIn(editor.getModel())) {\n\t\t\teditor.getContribution<IBreakpointEditorContribution>(BREAKPOINT_EDITOR_CONTRIBUTION_ID)?.showBreakpointWidget(position.lineNumber, position.column, BreakpointWidgetContext.TRIGGER_POINT);\n\t\t}\n\t}\n}\n\nclass EditBreakpointAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.editBreakpoint',\n\t\t\tlabel: nls.localize('EditBreakpointEditorAction', \"Debug: Edit Breakpoint\"),\n\t\t\talias: 'Debug: Edit Existing Breakpoint',\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarNewBreakpointMenu,\n\t\t\t\ttitle: nls.localize({ key: 'miEditBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Edit Breakpoint\"),\n\t\t\t\tgroup: '1_breakpoints',\n\t\t\t\torder: 1,\n\t\t\t\twhen: CONTEXT_DEBUGGERS_AVAILABLE\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tconst debugModel = debugService.getModel();\n\t\tif (!(editor.hasModel() && position)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineBreakpoints = debugModel.getBreakpoints({ lineNumber: position.lineNumber });\n\t\tif (lineBreakpoints.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst breakpointDistances = lineBreakpoints.map(b => {\n\t\t\tif (!b.column) {\n\t\t\t\treturn position.column;\n\t\t\t}\n\n\t\t\treturn Math.abs(b.column - position.column);\n\t\t});\n\t\tconst closestBreakpointIndex = breakpointDistances.indexOf(Math.min(...breakpointDistances));\n\t\tconst closestBreakpoint = lineBreakpoints[closestBreakpointIndex];\n\n\t\teditor.getContribution<IBreakpointEditorContribution>(BREAKPOINT_EDITOR_CONTRIBUTION_ID)?.showBreakpointWidget(closestBreakpoint.lineNumber, closestBreakpoint.column);\n\t}\n}\n\nclass OpenDisassemblyViewAction extends Action2 {\n\n\tpublic static readonly ID = 'debug.action.openDisassemblyView';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenDisassemblyViewAction.ID,\n\t\t\ttitle: {\n\t\t\t\t...nls.localize2('openDisassemblyView', \"Open Disassembly View\"),\n\t\t\t\tmnemonicTitle: nls.localize({ key: 'miDisassemblyView', comment: ['&& denotes a mnemonic'] }, \"&&DisassemblyView\"),\n\t\t\t},\n\t\t\tprecondition: CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\t\tgroup: 'debug',\n\t\t\t\t\torder: 5,\n\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, PanelFocusContext.toNegated(), CONTEXT_DEBUG_STATE.isEqualTo('stopped'), EditorContextKeys.editorTextFocus, CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED, CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.DebugCallStackContext,\n\t\t\t\t\tgroup: 'z_commands',\n\t\t\t\t\torder: 50,\n\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED)\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\teditorService.openEditor(DisassemblyViewInput.instance, { pinned: true, revealIfOpened: true });\n\t}\n}\n\nclass ToggleDisassemblyViewSourceCodeAction extends Action2 {\n\n\tpublic static readonly ID = 'debug.action.toggleDisassemblyViewSourceCode';\n\tpublic static readonly configID: string = 'debug.disassemblyView.showSourceCode';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleDisassemblyViewSourceCodeAction.ID,\n\t\t\ttitle: {\n\t\t\t\t...nls.localize2('toggleDisassemblyViewSourceCode', \"Toggle Source Code in Disassembly View\"),\n\t\t\t\tmnemonicTitle: nls.localize({ key: 'mitogglesource', comment: ['&& denotes a mnemonic'] }, \"&&ToggleSource\"),\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('toggleDisassemblyViewSourceCodeDescription', 'Shows or hides source code in disassembly')\n\t\t\t},\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor, ...args: any[]): void {\n\t\tconst configService = accessor.get(IConfigurationService);\n\t\tif (configService) {\n\t\t\tconst value = configService.getValue<IDebugConfiguration>('debug').disassemblyView.showSourceCode;\n\t\t\tconfigService.updateValue(ToggleDisassemblyViewSourceCodeAction.configID, !value);\n\t\t}\n\t}\n}\n\nexport class RunToCursorAction extends EditorAction {\n\n\tpublic static readonly ID = 'editor.debug.action.runToCursor';\n\tpublic static readonly LABEL: ILocalizedString = nls.localize2('runToCursor', \"Run to Cursor\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: RunToCursorAction.ID,\n\t\t\tlabel: RunToCursorAction.LABEL.value,\n\t\t\talias: 'Debug: Run to Cursor',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_DEBUGGERS_AVAILABLE,\n\t\t\t\tPanelFocusContext.toNegated(),\n\t\t\t\tContextKeyExpr.or(EditorContextKeys.editorTextFocus, CONTEXT_DISASSEMBLY_VIEW_FOCUS),\n\t\t\t\tCONTEXT_IN_CHAT_SESSION.negate()\n\t\t\t),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: 'debug',\n\t\t\t\torder: 2,\n\t\t\t\twhen: CONTEXT_IN_DEBUG_MODE\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst position = editor.getPosition();\n\t\tif (!(editor.hasModel() && position)) {\n\t\t\treturn;\n\t\t}\n\t\tconst uri = editor.getModel().uri;\n\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst viewModel = debugService.getViewModel();\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\n\t\tlet column: number | undefined = undefined;\n\t\tconst focusedStackFrame = viewModel.focusedStackFrame;\n\t\tif (focusedStackFrame && uriIdentityService.extUri.isEqual(focusedStackFrame.source.uri, uri) && focusedStackFrame.range.startLineNumber === position.lineNumber) {\n\t\t\t// If the cursor is on a line different than the one the debugger is currently paused on, then send the breakpoint on the line without a column\n\t\t\t// otherwise set it at the precise column #102199\n\t\t\tcolumn = position.column;\n\t\t}\n\t\tawait debugService.runTo(uri, position.lineNumber, column);\n\t}\n}\n\nexport class SelectionToReplAction extends EditorAction {\n\n\tpublic static readonly ID = 'editor.debug.action.selectionToRepl';\n\tpublic static readonly LABEL: ILocalizedString = nls.localize2('evaluateInDebugConsole', \"Evaluate in Debug Console\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SelectionToReplAction.ID,\n\t\t\tlabel: SelectionToReplAction.LABEL.value,\n\t\t\talias: 'Debug: Evaluate in Console',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\tCONTEXT_IN_CHAT_SESSION.negate()),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: 'debug',\n\t\t\t\torder: 0\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst viewModel = debugService.getViewModel();\n\t\tconst session = viewModel.focusedSession;\n\t\tif (!editor.hasModel() || !session) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = editor.getSelection();\n\t\tlet text: string;\n\t\tif (selection.isEmpty()) {\n\t\t\ttext = editor.getModel().getLineContent(selection.selectionStartLineNumber).trim();\n\t\t} else {\n\t\t\ttext = editor.getModel().getValueInRange(selection);\n\t\t}\n\n\t\tconst replView = await viewsService.openView(REPL_VIEW_ID, false) as Repl | undefined;\n\t\treplView?.sendReplInput(text);\n\t}\n}\n\nexport class SelectionToWatchExpressionsAction extends EditorAction {\n\n\tpublic static readonly ID = 'editor.debug.action.selectionToWatch';\n\tpublic static readonly LABEL: ILocalizedString = nls.localize2('addToWatch', \"Add to Watch\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SelectionToWatchExpressionsAction.ID,\n\t\t\tlabel: SelectionToWatchExpressionsAction.LABEL.value,\n\t\t\talias: 'Debug: Add to Watch',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tCONTEXT_IN_DEBUG_MODE,\n\t\t\t\tEditorContextKeys.editorTextFocus,\n\t\t\t\tCONTEXT_IN_CHAT_SESSION.negate()),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: 'debug',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet expression: string | undefined = undefined;\n\n\t\tconst model = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tif (!selection.isEmpty()) {\n\t\t\texpression = model.getValueInRange(selection);\n\t\t} else {\n\t\t\tconst position = editor.getPosition();\n\t\t\tconst evaluatableExpression = await getEvaluatableExpressionAtPosition(languageFeaturesService, model, position);\n\t\t\tif (!evaluatableExpression) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\texpression = evaluatableExpression.matchingExpression;\n\t\t}\n\n\t\tif (!expression) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait viewsService.openView(WATCH_VIEW_ID);\n\t\tdebugService.addWatchExpression(expression);\n\t}\n}\n\nclass ShowDebugHoverAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.showDebugHover',\n\t\t\tlabel: nls.localize('showDebugHover', \"Debug: Show Hover\"),\n\t\t\talias: 'Debug: Show Hover',\n\t\t\tprecondition: CONTEXT_IN_DEBUG_MODE,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyI),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst position = editor.getPosition();\n\t\tif (!position || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn editor.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID)?.showHover(position, true);\n\t}\n}\n\nconst NO_TARGETS_MESSAGE = nls.localize('editor.debug.action.stepIntoTargets.notAvailable', \"Step targets are not available here\");\n\nclass StepIntoTargetsAction extends EditorAction {\n\n\tpublic static readonly ID = 'editor.debug.action.stepIntoTargets';\n\tpublic static readonly LABEL = nls.localize({ key: 'stepIntoTargets', comment: ['Step Into Targets lets the user step into an exact function he or she is interested in.'] }, \"Step Into Target\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StepIntoTargetsAction.ID,\n\t\t\tlabel: StepIntoTargetsAction.LABEL,\n\t\t\talias: 'Debug: Step Into Target',\n\t\t\tprecondition: ContextKeyExpr.and(CONTEXT_STEP_INTO_TARGETS_SUPPORTED, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), EditorContextKeys.editorTextFocus),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: 'debug',\n\t\t\t\torder: 1.5\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst contextMenuService = accessor.get(IContextMenuService);\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\t\tconst session = debugService.getViewModel().focusedSession;\n\t\tconst frame = debugService.getViewModel().focusedStackFrame;\n\t\tconst selection = editor.getSelection();\n\n\t\tconst targetPosition = selection?.getPosition() || (frame && { lineNumber: frame.range.startLineNumber, column: frame.range.startColumn });\n\n\t\tif (!session || !frame || !editor.hasModel() || !uriIdentityService.extUri.isEqual(editor.getModel().uri, frame.source.uri)) {\n\t\t\tif (targetPosition) {\n\t\t\t\tMessageController.get(editor)?.showMessage(NO_TARGETS_MESSAGE, targetPosition);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\n\t\tconst targets = await session.stepInTargets(frame.frameId);\n\t\tif (!targets?.length) {\n\t\t\tMessageController.get(editor)?.showMessage(NO_TARGETS_MESSAGE, targetPosition!);\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is a selection, try to find the best target with a position to step into.\n\t\tif (selection) {\n\t\t\tconst positionalTargets: { start: Position; end?: Position; target: DebugProtocol.StepInTarget }[] = [];\n\t\t\tfor (const target of targets) {\n\t\t\t\tif (target.line) {\n\t\t\t\t\tpositionalTargets.push({\n\t\t\t\t\t\tstart: new Position(target.line, target.column || 1),\n\t\t\t\t\t\tend: target.endLine ? new Position(target.endLine, target.endColumn || 1) : undefined,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpositionalTargets.sort((a, b) => b.start.lineNumber - a.start.lineNumber || b.start.column - a.start.column);\n\n\t\t\tconst needle = selection.getPosition();\n\n\t\t\t// Try to find a target with a start and end that is around the cursor\n\t\t\t// position. Or, if none, whatever is before the cursor.\n\t\t\tconst best = positionalTargets.find(t => t.end && needle.isBefore(t.end) && t.start.isBeforeOrEqual(needle)) || positionalTargets.find(t => t.end === undefined && t.start.isBeforeOrEqual(needle));\n\t\t\tif (best) {\n\t\t\t\tsession.stepIn(frame.thread.threadId, best.target.id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, show a context menu and have the user pick a target\n\t\teditor.revealLineInCenterIfOutsideViewport(frame.range.startLineNumber);\n\t\tconst cursorCoords = editor.getScrolledVisiblePosition(targetPosition!);\n\t\tconst editorCoords = getDomNodePagePosition(editor.getDomNode());\n\t\tconst x = editorCoords.left + cursorCoords.left;\n\t\tconst y = editorCoords.top + cursorCoords.top + cursorCoords.height;\n\n\t\tcontextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => ({ x, y }),\n\t\t\tgetActions: () => {\n\t\t\t\treturn targets.map(t => new Action(`stepIntoTarget:${t.id}`, t.label, undefined, true, () => session.stepIn(frame.thread.threadId, t.id)));\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass GoToBreakpointAction extends EditorAction {\n\tconstructor(private isNext: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<any> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\n\t\tif (editor.hasModel()) {\n\t\t\tconst currentUri = editor.getModel().uri;\n\t\t\tconst currentLine = editor.getPosition().lineNumber;\n\t\t\t//Breakpoints returned from `getBreakpoints` are already sorted.\n\t\t\tconst allEnabledBreakpoints = debugService.getModel().getBreakpoints({ enabledOnly: true });\n\n\t\t\t//Try to find breakpoint in current file\n\t\t\tlet moveBreakpoint =\n\t\t\t\tthis.isNext\n\t\t\t\t\t? allEnabledBreakpoints.filter(bp => uriIdentityService.extUri.isEqual(bp.uri, currentUri) && bp.lineNumber > currentLine).shift()\n\t\t\t\t\t: allEnabledBreakpoints.filter(bp => uriIdentityService.extUri.isEqual(bp.uri, currentUri) && bp.lineNumber < currentLine).pop();\n\n\t\t\t//Try to find breakpoints in following files\n\t\t\tif (!moveBreakpoint) {\n\t\t\t\tmoveBreakpoint =\n\t\t\t\t\tthis.isNext\n\t\t\t\t\t\t? allEnabledBreakpoints.filter(bp => bp.uri.toString() > currentUri.toString()).shift()\n\t\t\t\t\t\t: allEnabledBreakpoints.filter(bp => bp.uri.toString() < currentUri.toString()).pop();\n\t\t\t}\n\n\t\t\t//Move to first or last possible breakpoint\n\t\t\tif (!moveBreakpoint && allEnabledBreakpoints.length) {\n\t\t\t\tmoveBreakpoint = this.isNext ? allEnabledBreakpoints[0] : allEnabledBreakpoints[allEnabledBreakpoints.length - 1];\n\t\t\t}\n\n\t\t\tif (moveBreakpoint) {\n\t\t\t\treturn openBreakpointSource(moveBreakpoint, false, true, false, debugService, editorService);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass GoToNextBreakpointAction extends GoToBreakpointAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.debug.action.goToNextBreakpoint',\n\t\t\tlabel: nls.localize('goToNextBreakpoint', \"Debug: Go to Next Breakpoint\"),\n\t\t\talias: 'Debug: Go to Next Breakpoint',\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE\n\t\t});\n\t}\n}\n\nclass GoToPreviousBreakpointAction extends GoToBreakpointAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.debug.action.goToPreviousBreakpoint',\n\t\t\tlabel: nls.localize('goToPreviousBreakpoint', \"Debug: Go to Previous Breakpoint\"),\n\t\t\talias: 'Debug: Go to Previous Breakpoint',\n\t\t\tprecondition: CONTEXT_DEBUGGERS_AVAILABLE\n\t\t});\n\t}\n}\n\nclass CloseExceptionWidgetAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.closeExceptionWidget',\n\t\t\tlabel: nls.localize('closeExceptionWidget', \"Close Exception Widget\"),\n\t\t\talias: 'Close Exception Widget',\n\t\t\tprecondition: CONTEXT_EXCEPTION_WIDGET_VISIBLE,\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(_accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst contribution = editor.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID);\n\t\tcontribution?.closeExceptionWidget();\n\t}\n}\n\nregisterAction2(OpenDisassemblyViewAction);\nregisterAction2(ToggleDisassemblyViewSourceCodeAction);\nregisterAction2(ToggleBreakpointAction);\nregisterEditorAction(ConditionalBreakpointAction);\nregisterEditorAction(LogPointAction);\nregisterEditorAction(TriggerByBreakpointAction);\nregisterEditorAction(EditBreakpointAction);\nregisterEditorAction(RunToCursorAction);\nregisterEditorAction(StepIntoTargetsAction);\nregisterEditorAction(SelectionToReplAction);\nregisterEditorAction(SelectionToWatchExpressionsAction);\nregisterEditorAction(ShowDebugHoverAction);\nregisterEditorAction(GoToNextBreakpointAction);\nregisterEditorAction(GoToPreviousBreakpointAction);\nregisterEditorAction(CloseExceptionWidgetAction);\n"],
  "mappings": "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",
  "names": []
}
