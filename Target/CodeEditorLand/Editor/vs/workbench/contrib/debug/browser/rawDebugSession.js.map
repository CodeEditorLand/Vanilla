{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/rawDebugSession.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toAction } from \"../../../../base/common/actions.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { createErrorWithActions } from \"../../../../base/common/errorMessage.js\";\nimport * as errors from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tIExtensionHostDebugService,\n\ttype IOpenExtensionWindowResult,\n} from \"../../../../platform/debug/common/extensionHostDebug.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport type {\n\tAdapterEndEvent,\n\tIConfig,\n\tIDebugAdapter,\n\tIDebugger,\n} from \"../common/debug.js\";\nimport { formatPII, isUri } from \"../common/debugUtils.js\";\n\n/**\n * This interface represents a single command line argument split into a \"prefix\" and a \"path\" half.\n * The optional \"prefix\" contains arbitrary text and the optional \"path\" contains a file system path.\n * Concatenating both results in the original command line argument.\n */\ninterface ILaunchVSCodeArgument {\n\tprefix?: string;\n\tpath?: string;\n}\n\ninterface ILaunchVSCodeArguments {\n\targs: ILaunchVSCodeArgument[];\n\tdebugRenderer?: boolean;\n\tenv?: { [key: string]: string | null };\n}\n\n/**\n * Encapsulates the DebugAdapter lifecycle and some idiosyncrasies of the Debug Adapter Protocol.\n */\nexport class RawDebugSession implements IDisposable {\n\tprivate allThreadsContinued = true;\n\tprivate _readyForBreakpoints = false;\n\tprivate _capabilities: DebugProtocol.Capabilities;\n\n\t// shutdown\n\tprivate debugAdapterStopped = false;\n\tprivate inShutdown = false;\n\tprivate terminated = false;\n\tprivate firedAdapterExitEvent = false;\n\n\t// telemetry\n\tprivate startTime = 0;\n\tprivate didReceiveStoppedEvent = false;\n\n\t// DAP events\n\tprivate readonly _onDidInitialize =\n\t\tnew Emitter<DebugProtocol.InitializedEvent>();\n\tprivate readonly _onDidStop = new Emitter<DebugProtocol.StoppedEvent>();\n\tprivate readonly _onDidContinued =\n\t\tnew Emitter<DebugProtocol.ContinuedEvent>();\n\tprivate readonly _onDidTerminateDebugee =\n\t\tnew Emitter<DebugProtocol.TerminatedEvent>();\n\tprivate readonly _onDidExitDebugee =\n\t\tnew Emitter<DebugProtocol.ExitedEvent>();\n\tprivate readonly _onDidThread = new Emitter<DebugProtocol.ThreadEvent>();\n\tprivate readonly _onDidOutput = new Emitter<DebugProtocol.OutputEvent>();\n\tprivate readonly _onDidBreakpoint =\n\t\tnew Emitter<DebugProtocol.BreakpointEvent>();\n\tprivate readonly _onDidLoadedSource =\n\t\tnew Emitter<DebugProtocol.LoadedSourceEvent>();\n\tprivate readonly _onDidProgressStart =\n\t\tnew Emitter<DebugProtocol.ProgressStartEvent>();\n\tprivate readonly _onDidProgressUpdate =\n\t\tnew Emitter<DebugProtocol.ProgressUpdateEvent>();\n\tprivate readonly _onDidProgressEnd =\n\t\tnew Emitter<DebugProtocol.ProgressEndEvent>();\n\tprivate readonly _onDidInvalidated =\n\t\tnew Emitter<DebugProtocol.InvalidatedEvent>();\n\tprivate readonly _onDidInvalidateMemory =\n\t\tnew Emitter<DebugProtocol.MemoryEvent>();\n\tprivate readonly _onDidCustomEvent = new Emitter<DebugProtocol.Event>();\n\tprivate readonly _onDidEvent = new Emitter<DebugProtocol.Event>();\n\n\t// DA events\n\tprivate readonly _onDidExitAdapter = new Emitter<AdapterEndEvent>();\n\tprivate debugAdapter: IDebugAdapter | null;\n\tprivate stoppedSinceLastStep = false;\n\n\tprivate toDispose: IDisposable[] = [];\n\n\tconstructor(\n\t\tdebugAdapter: IDebugAdapter,\n\t\tpublic readonly dbgr: IDebugger,\n\t\tprivate readonly sessionId: string,\n\t\tprivate readonly name: string,\n\t\t@IExtensionHostDebugService\n\t\tprivate readonly extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogSerivce: IDialogService,\n\t) {\n\t\tthis.debugAdapter = debugAdapter;\n\t\tthis._capabilities = Object.create(null);\n\n\t\tthis.toDispose.push(\n\t\t\tthis.debugAdapter.onError((err) => {\n\t\t\t\tthis.shutdown(err);\n\t\t\t}),\n\t\t);\n\n\t\tthis.toDispose.push(\n\t\t\tthis.debugAdapter.onExit((code) => {\n\t\t\t\tif (code !== 0) {\n\t\t\t\t\tthis.shutdown(new Error(`exit code: ${code}`));\n\t\t\t\t} else {\n\t\t\t\t\t// normal exit\n\t\t\t\t\tthis.shutdown();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.debugAdapter.onEvent((event) => {\n\t\t\tswitch (event.event) {\n\t\t\t\tcase \"initialized\":\n\t\t\t\t\tthis._readyForBreakpoints = true;\n\t\t\t\t\tthis._onDidInitialize.fire(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"loadedSource\":\n\t\t\t\t\tthis._onDidLoadedSource.fire(\n\t\t\t\t\t\t<DebugProtocol.LoadedSourceEvent>event,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"capabilities\":\n\t\t\t\t\tif (event.body) {\n\t\t\t\t\t\tconst capabilities = (<DebugProtocol.CapabilitiesEvent>(\n\t\t\t\t\t\t\tevent\n\t\t\t\t\t\t)).body.capabilities;\n\t\t\t\t\t\tthis.mergeCapabilities(capabilities);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"stopped\":\n\t\t\t\t\tthis.didReceiveStoppedEvent = true; // telemetry: remember that debugger stopped successfully\n\t\t\t\t\tthis.stoppedSinceLastStep = true;\n\t\t\t\t\tthis._onDidStop.fire(<DebugProtocol.StoppedEvent>event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"continued\":\n\t\t\t\t\tthis.allThreadsContinued =\n\t\t\t\t\t\t(<DebugProtocol.ContinuedEvent>event).body\n\t\t\t\t\t\t\t.allThreadsContinued === false\n\t\t\t\t\t\t\t? false\n\t\t\t\t\t\t\t: true;\n\t\t\t\t\tthis._onDidContinued.fire(\n\t\t\t\t\t\t<DebugProtocol.ContinuedEvent>event,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"thread\":\n\t\t\t\t\tthis._onDidThread.fire(<DebugProtocol.ThreadEvent>event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"output\":\n\t\t\t\t\tthis._onDidOutput.fire(<DebugProtocol.OutputEvent>event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"breakpoint\":\n\t\t\t\t\tthis._onDidBreakpoint.fire(\n\t\t\t\t\t\t<DebugProtocol.BreakpointEvent>event,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"terminated\":\n\t\t\t\t\tthis._onDidTerminateDebugee.fire(\n\t\t\t\t\t\t<DebugProtocol.TerminatedEvent>event,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"exited\":\n\t\t\t\t\tthis._onDidExitDebugee.fire(\n\t\t\t\t\t\t<DebugProtocol.ExitedEvent>event,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"progressStart\":\n\t\t\t\t\tthis._onDidProgressStart.fire(\n\t\t\t\t\t\tevent as DebugProtocol.ProgressStartEvent,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"progressUpdate\":\n\t\t\t\t\tthis._onDidProgressUpdate.fire(\n\t\t\t\t\t\tevent as DebugProtocol.ProgressUpdateEvent,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"progressEnd\":\n\t\t\t\t\tthis._onDidProgressEnd.fire(\n\t\t\t\t\t\tevent as DebugProtocol.ProgressEndEvent,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"invalidated\":\n\t\t\t\t\tthis._onDidInvalidated.fire(\n\t\t\t\t\t\tevent as DebugProtocol.InvalidatedEvent,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"memory\":\n\t\t\t\t\tthis._onDidInvalidateMemory.fire(\n\t\t\t\t\t\tevent as DebugProtocol.MemoryEvent,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"process\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"module\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._onDidCustomEvent.fire(event);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._onDidEvent.fire(event);\n\t\t});\n\n\t\tthis.debugAdapter.onRequest((request) => this.dispatchRequest(request));\n\t}\n\n\tget isInShutdown() {\n\t\treturn this.inShutdown;\n\t}\n\n\tget onDidExitAdapter(): Event<AdapterEndEvent> {\n\t\treturn this._onDidExitAdapter.event;\n\t}\n\n\tget capabilities(): DebugProtocol.Capabilities {\n\t\treturn this._capabilities;\n\t}\n\n\t/**\n\t * DA is ready to accepts setBreakpoint requests.\n\t * Becomes true after \"initialized\" events has been received.\n\t */\n\tget readyForBreakpoints(): boolean {\n\t\treturn this._readyForBreakpoints;\n\t}\n\n\t//---- DAP events\n\n\tget onDidInitialize(): Event<DebugProtocol.InitializedEvent> {\n\t\treturn this._onDidInitialize.event;\n\t}\n\n\tget onDidStop(): Event<DebugProtocol.StoppedEvent> {\n\t\treturn this._onDidStop.event;\n\t}\n\n\tget onDidContinued(): Event<DebugProtocol.ContinuedEvent> {\n\t\treturn this._onDidContinued.event;\n\t}\n\n\tget onDidTerminateDebugee(): Event<DebugProtocol.TerminatedEvent> {\n\t\treturn this._onDidTerminateDebugee.event;\n\t}\n\n\tget onDidExitDebugee(): Event<DebugProtocol.ExitedEvent> {\n\t\treturn this._onDidExitDebugee.event;\n\t}\n\n\tget onDidThread(): Event<DebugProtocol.ThreadEvent> {\n\t\treturn this._onDidThread.event;\n\t}\n\n\tget onDidOutput(): Event<DebugProtocol.OutputEvent> {\n\t\treturn this._onDidOutput.event;\n\t}\n\n\tget onDidBreakpoint(): Event<DebugProtocol.BreakpointEvent> {\n\t\treturn this._onDidBreakpoint.event;\n\t}\n\n\tget onDidLoadedSource(): Event<DebugProtocol.LoadedSourceEvent> {\n\t\treturn this._onDidLoadedSource.event;\n\t}\n\n\tget onDidCustomEvent(): Event<DebugProtocol.Event> {\n\t\treturn this._onDidCustomEvent.event;\n\t}\n\n\tget onDidProgressStart(): Event<DebugProtocol.ProgressStartEvent> {\n\t\treturn this._onDidProgressStart.event;\n\t}\n\n\tget onDidProgressUpdate(): Event<DebugProtocol.ProgressUpdateEvent> {\n\t\treturn this._onDidProgressUpdate.event;\n\t}\n\n\tget onDidProgressEnd(): Event<DebugProtocol.ProgressEndEvent> {\n\t\treturn this._onDidProgressEnd.event;\n\t}\n\n\tget onDidInvalidated(): Event<DebugProtocol.InvalidatedEvent> {\n\t\treturn this._onDidInvalidated.event;\n\t}\n\n\tget onDidInvalidateMemory(): Event<DebugProtocol.MemoryEvent> {\n\t\treturn this._onDidInvalidateMemory.event;\n\t}\n\n\tget onDidEvent(): Event<DebugProtocol.Event> {\n\t\treturn this._onDidEvent.event;\n\t}\n\n\t//---- DebugAdapter lifecycle\n\n\t/**\n\t * Starts the underlying debug adapter and tracks the session time for telemetry.\n\t */\n\tasync start(): Promise<void> {\n\t\tif (!this.debugAdapter) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"noDebugAdapterStart\",\n\t\t\t\t\t\t\"No debug adapter, can not start debug session.\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tawait this.debugAdapter.startSession();\n\t\tthis.startTime = new Date().getTime();\n\t}\n\n\t/**\n\t * Send client capabilities to the debug adapter and receive DA capabilities in return.\n\t */\n\tasync initialize(\n\t\targs: DebugProtocol.InitializeRequestArguments,\n\t): Promise<DebugProtocol.InitializeResponse | undefined> {\n\t\tconst response = await this.send(\n\t\t\t\"initialize\",\n\t\t\targs,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\t\tif (response) {\n\t\t\tthis.mergeCapabilities(response.body);\n\t\t}\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * Terminate the debuggee and shutdown the adapter\n\t */\n\tdisconnect(args: DebugProtocol.DisconnectArguments): Promise<any> {\n\t\tconst terminateDebuggee = this.capabilities.supportTerminateDebuggee\n\t\t\t? args.terminateDebuggee\n\t\t\t: undefined;\n\t\tconst suspendDebuggee =\n\t\t\tthis.capabilities.supportTerminateDebuggee &&\n\t\t\tthis.capabilities.supportSuspendDebuggee\n\t\t\t\t? args.suspendDebuggee\n\t\t\t\t: undefined;\n\t\treturn this.shutdown(\n\t\t\tundefined,\n\t\t\targs.restart,\n\t\t\tterminateDebuggee,\n\t\t\tsuspendDebuggee,\n\t\t);\n\t}\n\n\t//---- DAP requests\n\n\tasync launchOrAttach(\n\t\tconfig: IConfig,\n\t): Promise<DebugProtocol.Response | undefined> {\n\t\tconst response = await this.send(\n\t\t\tconfig.request,\n\t\t\tconfig,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\t\tif (response) {\n\t\t\tthis.mergeCapabilities(response.body);\n\t\t}\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * Try killing the debuggee softly...\n\t */\n\tterminate(\n\t\trestart = false,\n\t): Promise<DebugProtocol.TerminateResponse | undefined> {\n\t\tif (this.capabilities.supportsTerminateRequest) {\n\t\t\tif (!this.terminated) {\n\t\t\t\tthis.terminated = true;\n\t\t\t\treturn this.send(\"terminate\", { restart }, undefined);\n\t\t\t}\n\t\t\treturn this.disconnect({ terminateDebuggee: true, restart });\n\t\t}\n\t\treturn Promise.reject(new Error(\"terminated not supported\"));\n\t}\n\n\trestart(\n\t\targs: DebugProtocol.RestartArguments,\n\t): Promise<DebugProtocol.RestartResponse | undefined> {\n\t\tif (this.capabilities.supportsRestartRequest) {\n\t\t\treturn this.send(\"restart\", args);\n\t\t}\n\t\treturn Promise.reject(new Error(\"restart not supported\"));\n\t}\n\n\tasync next(\n\t\targs: DebugProtocol.NextArguments,\n\t): Promise<DebugProtocol.NextResponse | undefined> {\n\t\tthis.stoppedSinceLastStep = false;\n\t\tconst response = await this.send(\"next\", args);\n\t\tif (!this.stoppedSinceLastStep) {\n\t\t\tthis.fireSimulatedContinuedEvent(args.threadId);\n\t\t}\n\t\treturn response;\n\t}\n\n\tasync stepIn(\n\t\targs: DebugProtocol.StepInArguments,\n\t): Promise<DebugProtocol.StepInResponse | undefined> {\n\t\tthis.stoppedSinceLastStep = false;\n\t\tconst response = await this.send(\"stepIn\", args);\n\t\tif (!this.stoppedSinceLastStep) {\n\t\t\tthis.fireSimulatedContinuedEvent(args.threadId);\n\t\t}\n\t\treturn response;\n\t}\n\n\tasync stepOut(\n\t\targs: DebugProtocol.StepOutArguments,\n\t): Promise<DebugProtocol.StepOutResponse | undefined> {\n\t\tthis.stoppedSinceLastStep = false;\n\t\tconst response = await this.send(\"stepOut\", args);\n\t\tif (!this.stoppedSinceLastStep) {\n\t\t\tthis.fireSimulatedContinuedEvent(args.threadId);\n\t\t}\n\t\treturn response;\n\t}\n\n\tasync continue(\n\t\targs: DebugProtocol.ContinueArguments,\n\t): Promise<DebugProtocol.ContinueResponse | undefined> {\n\t\tthis.stoppedSinceLastStep = false;\n\t\tconst response = await this.send<DebugProtocol.ContinueResponse>(\n\t\t\t\"continue\",\n\t\t\targs,\n\t\t);\n\t\tif (\n\t\t\tresponse &&\n\t\t\tresponse.body &&\n\t\t\tresponse.body.allThreadsContinued !== undefined\n\t\t) {\n\t\t\tthis.allThreadsContinued = response.body.allThreadsContinued;\n\t\t}\n\t\tif (!this.stoppedSinceLastStep) {\n\t\t\tthis.fireSimulatedContinuedEvent(\n\t\t\t\targs.threadId,\n\t\t\t\tthis.allThreadsContinued,\n\t\t\t);\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tpause(\n\t\targs: DebugProtocol.PauseArguments,\n\t): Promise<DebugProtocol.PauseResponse | undefined> {\n\t\treturn this.send(\"pause\", args);\n\t}\n\n\tterminateThreads(\n\t\targs: DebugProtocol.TerminateThreadsArguments,\n\t): Promise<DebugProtocol.TerminateThreadsResponse | undefined> {\n\t\tif (this.capabilities.supportsTerminateThreadsRequest) {\n\t\t\treturn this.send(\"terminateThreads\", args);\n\t\t}\n\t\treturn Promise.reject(new Error(\"terminateThreads not supported\"));\n\t}\n\n\tsetVariable(\n\t\targs: DebugProtocol.SetVariableArguments,\n\t): Promise<DebugProtocol.SetVariableResponse | undefined> {\n\t\tif (this.capabilities.supportsSetVariable) {\n\t\t\treturn this.send<DebugProtocol.SetVariableResponse>(\n\t\t\t\t\"setVariable\",\n\t\t\t\targs,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error(\"setVariable not supported\"));\n\t}\n\n\tsetExpression(\n\t\targs: DebugProtocol.SetExpressionArguments,\n\t): Promise<DebugProtocol.SetExpressionResponse | undefined> {\n\t\tif (this.capabilities.supportsSetExpression) {\n\t\t\treturn this.send<DebugProtocol.SetExpressionResponse>(\n\t\t\t\t\"setExpression\",\n\t\t\t\targs,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error(\"setExpression not supported\"));\n\t}\n\n\tasync restartFrame(\n\t\targs: DebugProtocol.RestartFrameArguments,\n\t\tthreadId: number,\n\t): Promise<DebugProtocol.RestartFrameResponse | undefined> {\n\t\tif (this.capabilities.supportsRestartFrame) {\n\t\t\tthis.stoppedSinceLastStep = false;\n\t\t\tconst response = await this.send(\"restartFrame\", args);\n\t\t\tif (!this.stoppedSinceLastStep) {\n\t\t\t\tthis.fireSimulatedContinuedEvent(threadId);\n\t\t\t}\n\t\t\treturn response;\n\t\t}\n\t\treturn Promise.reject(new Error(\"restartFrame not supported\"));\n\t}\n\n\tstepInTargets(\n\t\targs: DebugProtocol.StepInTargetsArguments,\n\t): Promise<DebugProtocol.StepInTargetsResponse | undefined> {\n\t\tif (this.capabilities.supportsStepInTargetsRequest) {\n\t\t\treturn this.send(\"stepInTargets\", args);\n\t\t}\n\t\treturn Promise.reject(new Error(\"stepInTargets not supported\"));\n\t}\n\n\tcompletions(\n\t\targs: DebugProtocol.CompletionsArguments,\n\t\ttoken: CancellationToken,\n\t): Promise<DebugProtocol.CompletionsResponse | undefined> {\n\t\tif (this.capabilities.supportsCompletionsRequest) {\n\t\t\treturn this.send<DebugProtocol.CompletionsResponse>(\n\t\t\t\t\"completions\",\n\t\t\t\targs,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error(\"completions not supported\"));\n\t}\n\n\tsetBreakpoints(\n\t\targs: DebugProtocol.SetBreakpointsArguments,\n\t): Promise<DebugProtocol.SetBreakpointsResponse | undefined> {\n\t\treturn this.send<DebugProtocol.SetBreakpointsResponse>(\n\t\t\t\"setBreakpoints\",\n\t\t\targs,\n\t\t);\n\t}\n\n\tsetFunctionBreakpoints(\n\t\targs: DebugProtocol.SetFunctionBreakpointsArguments,\n\t): Promise<DebugProtocol.SetFunctionBreakpointsResponse | undefined> {\n\t\tif (this.capabilities.supportsFunctionBreakpoints) {\n\t\t\treturn this.send<DebugProtocol.SetFunctionBreakpointsResponse>(\n\t\t\t\t\"setFunctionBreakpoints\",\n\t\t\t\targs,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(\n\t\t\tnew Error(\"setFunctionBreakpoints not supported\"),\n\t\t);\n\t}\n\n\tdataBreakpointInfo(\n\t\targs: DebugProtocol.DataBreakpointInfoArguments,\n\t): Promise<DebugProtocol.DataBreakpointInfoResponse | undefined> {\n\t\tif (this.capabilities.supportsDataBreakpoints) {\n\t\t\treturn this.send<DebugProtocol.DataBreakpointInfoResponse>(\n\t\t\t\t\"dataBreakpointInfo\",\n\t\t\t\targs,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error(\"dataBreakpointInfo not supported\"));\n\t}\n\n\tsetDataBreakpoints(\n\t\targs: DebugProtocol.SetDataBreakpointsArguments,\n\t): Promise<DebugProtocol.SetDataBreakpointsResponse | undefined> {\n\t\tif (this.capabilities.supportsDataBreakpoints) {\n\t\t\treturn this.send<DebugProtocol.SetDataBreakpointsResponse>(\n\t\t\t\t\"setDataBreakpoints\",\n\t\t\t\targs,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error(\"setDataBreakpoints not supported\"));\n\t}\n\n\tsetExceptionBreakpoints(\n\t\targs: DebugProtocol.SetExceptionBreakpointsArguments,\n\t): Promise<DebugProtocol.SetExceptionBreakpointsResponse | undefined> {\n\t\treturn this.send<DebugProtocol.SetExceptionBreakpointsResponse>(\n\t\t\t\"setExceptionBreakpoints\",\n\t\t\targs,\n\t\t);\n\t}\n\n\tbreakpointLocations(\n\t\targs: DebugProtocol.BreakpointLocationsArguments,\n\t): Promise<DebugProtocol.BreakpointLocationsResponse | undefined> {\n\t\tif (this.capabilities.supportsBreakpointLocationsRequest) {\n\t\t\treturn this.send(\"breakpointLocations\", args);\n\t\t}\n\t\treturn Promise.reject(\n\t\t\tnew Error(\"breakpointLocations is not supported\"),\n\t\t);\n\t}\n\n\tconfigurationDone(): Promise<\n\t\tDebugProtocol.ConfigurationDoneResponse | undefined\n\t> {\n\t\tif (this.capabilities.supportsConfigurationDoneRequest) {\n\t\t\treturn this.send(\"configurationDone\", null);\n\t\t}\n\t\treturn Promise.reject(new Error(\"configurationDone not supported\"));\n\t}\n\n\tstackTrace(\n\t\targs: DebugProtocol.StackTraceArguments,\n\t\ttoken: CancellationToken,\n\t): Promise<DebugProtocol.StackTraceResponse | undefined> {\n\t\treturn this.send<DebugProtocol.StackTraceResponse>(\n\t\t\t\"stackTrace\",\n\t\t\targs,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\texceptionInfo(\n\t\targs: DebugProtocol.ExceptionInfoArguments,\n\t): Promise<DebugProtocol.ExceptionInfoResponse | undefined> {\n\t\tif (this.capabilities.supportsExceptionInfoRequest) {\n\t\t\treturn this.send<DebugProtocol.ExceptionInfoResponse>(\n\t\t\t\t\"exceptionInfo\",\n\t\t\t\targs,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error(\"exceptionInfo not supported\"));\n\t}\n\n\tscopes(\n\t\targs: DebugProtocol.ScopesArguments,\n\t\ttoken: CancellationToken,\n\t): Promise<DebugProtocol.ScopesResponse | undefined> {\n\t\treturn this.send<DebugProtocol.ScopesResponse>(\"scopes\", args, token);\n\t}\n\n\tvariables(\n\t\targs: DebugProtocol.VariablesArguments,\n\t\ttoken?: CancellationToken,\n\t): Promise<DebugProtocol.VariablesResponse | undefined> {\n\t\treturn this.send<DebugProtocol.VariablesResponse>(\n\t\t\t\"variables\",\n\t\t\targs,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\tsource(\n\t\targs: DebugProtocol.SourceArguments,\n\t): Promise<DebugProtocol.SourceResponse | undefined> {\n\t\treturn this.send<DebugProtocol.SourceResponse>(\"source\", args);\n\t}\n\n\tlocations(\n\t\targs: DebugProtocol.LocationsArguments,\n\t): Promise<DebugProtocol.LocationsResponse | undefined> {\n\t\treturn this.send<DebugProtocol.LocationsResponse>(\"locations\", args);\n\t}\n\n\tloadedSources(\n\t\targs: DebugProtocol.LoadedSourcesArguments,\n\t): Promise<DebugProtocol.LoadedSourcesResponse | undefined> {\n\t\tif (this.capabilities.supportsLoadedSourcesRequest) {\n\t\t\treturn this.send<DebugProtocol.LoadedSourcesResponse>(\n\t\t\t\t\"loadedSources\",\n\t\t\t\targs,\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error(\"loadedSources not supported\"));\n\t}\n\n\tthreads(): Promise<DebugProtocol.ThreadsResponse | undefined> {\n\t\treturn this.send<DebugProtocol.ThreadsResponse>(\"threads\", null);\n\t}\n\n\tevaluate(\n\t\targs: DebugProtocol.EvaluateArguments,\n\t): Promise<DebugProtocol.EvaluateResponse | undefined> {\n\t\treturn this.send<DebugProtocol.EvaluateResponse>(\"evaluate\", args);\n\t}\n\n\tasync stepBack(\n\t\targs: DebugProtocol.StepBackArguments,\n\t): Promise<DebugProtocol.StepBackResponse | undefined> {\n\t\tif (this.capabilities.supportsStepBack) {\n\t\t\tthis.stoppedSinceLastStep = false;\n\t\t\tconst response = await this.send(\"stepBack\", args);\n\t\t\tif (!this.stoppedSinceLastStep) {\n\t\t\t\tthis.fireSimulatedContinuedEvent(args.threadId);\n\t\t\t}\n\t\t\treturn response;\n\t\t}\n\t\treturn Promise.reject(new Error(\"stepBack not supported\"));\n\t}\n\n\tasync reverseContinue(\n\t\targs: DebugProtocol.ReverseContinueArguments,\n\t): Promise<DebugProtocol.ReverseContinueResponse | undefined> {\n\t\tif (this.capabilities.supportsStepBack) {\n\t\t\tthis.stoppedSinceLastStep = false;\n\t\t\tconst response = await this.send(\"reverseContinue\", args);\n\t\t\tif (!this.stoppedSinceLastStep) {\n\t\t\t\tthis.fireSimulatedContinuedEvent(args.threadId);\n\t\t\t}\n\t\t\treturn response;\n\t\t}\n\t\treturn Promise.reject(new Error(\"reverseContinue not supported\"));\n\t}\n\n\tgotoTargets(\n\t\targs: DebugProtocol.GotoTargetsArguments,\n\t): Promise<DebugProtocol.GotoTargetsResponse | undefined> {\n\t\tif (this.capabilities.supportsGotoTargetsRequest) {\n\t\t\treturn this.send(\"gotoTargets\", args);\n\t\t}\n\t\treturn Promise.reject(new Error(\"gotoTargets is not supported\"));\n\t}\n\n\tasync goto(\n\t\targs: DebugProtocol.GotoArguments,\n\t): Promise<DebugProtocol.GotoResponse | undefined> {\n\t\tif (this.capabilities.supportsGotoTargetsRequest) {\n\t\t\tthis.stoppedSinceLastStep = false;\n\t\t\tconst response = await this.send(\"goto\", args);\n\t\t\tif (!this.stoppedSinceLastStep) {\n\t\t\t\tthis.fireSimulatedContinuedEvent(args.threadId);\n\t\t\t}\n\t\t\treturn response;\n\t\t}\n\n\t\treturn Promise.reject(new Error(\"goto is not supported\"));\n\t}\n\n\tasync setInstructionBreakpoints(\n\t\targs: DebugProtocol.SetInstructionBreakpointsArguments,\n\t): Promise<DebugProtocol.SetInstructionBreakpointsResponse | undefined> {\n\t\tif (this.capabilities.supportsInstructionBreakpoints) {\n\t\t\treturn await this.send(\"setInstructionBreakpoints\", args);\n\t\t}\n\n\t\treturn Promise.reject(\n\t\t\tnew Error(\"setInstructionBreakpoints is not supported\"),\n\t\t);\n\t}\n\n\tasync disassemble(\n\t\targs: DebugProtocol.DisassembleArguments,\n\t): Promise<DebugProtocol.DisassembleResponse | undefined> {\n\t\tif (this.capabilities.supportsDisassembleRequest) {\n\t\t\treturn await this.send(\"disassemble\", args);\n\t\t}\n\n\t\treturn Promise.reject(new Error(\"disassemble is not supported\"));\n\t}\n\n\tasync readMemory(\n\t\targs: DebugProtocol.ReadMemoryArguments,\n\t): Promise<DebugProtocol.ReadMemoryResponse | undefined> {\n\t\tif (this.capabilities.supportsReadMemoryRequest) {\n\t\t\treturn await this.send(\"readMemory\", args);\n\t\t}\n\n\t\treturn Promise.reject(new Error(\"readMemory is not supported\"));\n\t}\n\n\tasync writeMemory(\n\t\targs: DebugProtocol.WriteMemoryArguments,\n\t): Promise<DebugProtocol.WriteMemoryResponse | undefined> {\n\t\tif (this.capabilities.supportsWriteMemoryRequest) {\n\t\t\treturn await this.send(\"writeMemory\", args);\n\t\t}\n\n\t\treturn Promise.reject(new Error(\"writeMemory is not supported\"));\n\t}\n\n\tcancel(\n\t\targs: DebugProtocol.CancelArguments,\n\t): Promise<DebugProtocol.CancelResponse | undefined> {\n\t\treturn this.send(\"cancel\", args);\n\t}\n\n\tcustom(\n\t\trequest: string,\n\t\targs: any,\n\t): Promise<DebugProtocol.Response | undefined> {\n\t\treturn this.send(request, args);\n\t}\n\n\t//---- private\n\n\tprivate async shutdown(\n\t\terror?: Error,\n\t\trestart = false,\n\t\tterminateDebuggee: boolean | undefined = undefined,\n\t\tsuspendDebuggee: boolean | undefined = undefined,\n\t): Promise<any> {\n\t\tif (!this.inShutdown) {\n\t\t\tthis.inShutdown = true;\n\t\t\tif (this.debugAdapter) {\n\t\t\t\ttry {\n\t\t\t\t\tconst args: DebugProtocol.DisconnectArguments = { restart };\n\t\t\t\t\tif (typeof terminateDebuggee === \"boolean\") {\n\t\t\t\t\t\targs.terminateDebuggee = terminateDebuggee;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof suspendDebuggee === \"boolean\") {\n\t\t\t\t\t\targs.suspendDebuggee = suspendDebuggee;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if there's an error, the DA is probably already gone, so give it a much shorter timeout.\n\t\t\t\t\tawait this.send(\n\t\t\t\t\t\t\"disconnect\",\n\t\t\t\t\t\targs,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\terror ? 200 : 2000,\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Catch the potential 'disconnect' error - no need to show it to the user since the adapter is shutting down\n\t\t\t\t} finally {\n\t\t\t\t\tawait this.stopAdapter(error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.stopAdapter(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async stopAdapter(error?: Error): Promise<any> {\n\t\ttry {\n\t\t\tif (this.debugAdapter) {\n\t\t\t\tconst da = this.debugAdapter;\n\t\t\t\tthis.debugAdapter = null;\n\t\t\t\tawait da.stopSession();\n\t\t\t\tthis.debugAdapterStopped = true;\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.fireAdapterExitEvent(error);\n\t\t}\n\t}\n\n\tprivate fireAdapterExitEvent(error?: Error): void {\n\t\tif (!this.firedAdapterExitEvent) {\n\t\t\tthis.firedAdapterExitEvent = true;\n\n\t\t\tconst e: AdapterEndEvent = {\n\t\t\t\temittedStopped: this.didReceiveStoppedEvent,\n\t\t\t\tsessionLengthInSeconds:\n\t\t\t\t\t(new Date().getTime() - this.startTime) / 1000,\n\t\t\t};\n\t\t\tif (error && !this.debugAdapterStopped) {\n\t\t\t\te.error = error;\n\t\t\t}\n\t\t\tthis._onDidExitAdapter.fire(e);\n\t\t}\n\t}\n\n\tprivate async dispatchRequest(\n\t\trequest: DebugProtocol.Request,\n\t): Promise<void> {\n\t\tconst response: DebugProtocol.Response = {\n\t\t\ttype: \"response\",\n\t\t\tseq: 0,\n\t\t\tcommand: request.command,\n\t\t\trequest_seq: request.seq,\n\t\t\tsuccess: true,\n\t\t};\n\n\t\tconst safeSendResponse = (response: DebugProtocol.Response) =>\n\t\t\tthis.debugAdapter && this.debugAdapter.sendResponse(response);\n\n\t\tif (request.command === \"launchVSCode\") {\n\t\t\ttry {\n\t\t\t\tlet result = await this.launchVsCode(\n\t\t\t\t\t<ILaunchVSCodeArguments>request.arguments,\n\t\t\t\t);\n\t\t\t\tif (!result.success) {\n\t\t\t\t\tconst { confirmed } = await this.dialogSerivce.confirm({\n\t\t\t\t\t\ttype: Severity.Warning,\n\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\"canNotStart\",\n\t\t\t\t\t\t\t\"The debugger needs to open a new tab or window for the debuggee but the browser prevented this. You must give permission to continue.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"continue\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Continue\",\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\tresult = await this.launchVsCode(\n\t\t\t\t\t\t\t<ILaunchVSCodeArguments>request.arguments,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponse.success = false;\n\t\t\t\t\t\tsafeSendResponse(response);\n\t\t\t\t\t\tawait this.shutdown();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresponse.body = {\n\t\t\t\t\trendererDebugPort: result.rendererDebugPort,\n\t\t\t\t};\n\t\t\t\tsafeSendResponse(response);\n\t\t\t} catch (err) {\n\t\t\t\tresponse.success = false;\n\t\t\t\tresponse.message = err.message;\n\t\t\t\tsafeSendResponse(response);\n\t\t\t}\n\t\t} else if (request.command === \"runInTerminal\") {\n\t\t\ttry {\n\t\t\t\tconst shellProcessId = await this.dbgr.runInTerminal(\n\t\t\t\t\trequest.arguments as DebugProtocol.RunInTerminalRequestArguments,\n\t\t\t\t\tthis.sessionId,\n\t\t\t\t);\n\t\t\t\tconst resp = response as DebugProtocol.RunInTerminalResponse;\n\t\t\t\tresp.body = {};\n\t\t\t\tif (typeof shellProcessId === \"number\") {\n\t\t\t\t\tresp.body.shellProcessId = shellProcessId;\n\t\t\t\t}\n\t\t\t\tsafeSendResponse(resp);\n\t\t\t} catch (err) {\n\t\t\t\tresponse.success = false;\n\t\t\t\tresponse.message = err.message;\n\t\t\t\tsafeSendResponse(response);\n\t\t\t}\n\t\t} else if (request.command === \"startDebugging\") {\n\t\t\ttry {\n\t\t\t\tconst args =\n\t\t\t\t\trequest.arguments as DebugProtocol.StartDebuggingRequestArguments;\n\t\t\t\tconst config: IConfig = {\n\t\t\t\t\t...args.configuration,\n\t\t\t\t\t...{\n\t\t\t\t\t\trequest: args.request,\n\t\t\t\t\t\ttype: this.dbgr.type,\n\t\t\t\t\t\tname: args.configuration.name || this.name,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst success = await this.dbgr.startDebugging(\n\t\t\t\t\tconfig,\n\t\t\t\t\tthis.sessionId,\n\t\t\t\t);\n\t\t\t\tif (success) {\n\t\t\t\t\tsafeSendResponse(response);\n\t\t\t\t} else {\n\t\t\t\t\tresponse.success = false;\n\t\t\t\t\tresponse.message = \"Failed to start debugging\";\n\t\t\t\t\tsafeSendResponse(response);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tresponse.success = false;\n\t\t\t\tresponse.message = err.message;\n\t\t\t\tsafeSendResponse(response);\n\t\t\t}\n\t\t} else {\n\t\t\tresponse.success = false;\n\t\t\tresponse.message = `unknown request '${request.command}'`;\n\t\t\tsafeSendResponse(response);\n\t\t}\n\t}\n\n\tprivate launchVsCode(\n\t\tvscodeArgs: ILaunchVSCodeArguments,\n\t): Promise<IOpenExtensionWindowResult> {\n\t\tconst args: string[] = [];\n\n\t\tfor (const arg of vscodeArgs.args) {\n\t\t\tconst a2 = (arg.prefix || \"\") + (arg.path || \"\");\n\t\t\tconst match = /^--(.+)=(.+)$/.exec(a2);\n\t\t\tif (match && match.length === 3) {\n\t\t\t\tconst key = match[1];\n\t\t\t\tlet value = match[2];\n\n\t\t\t\tif (\n\t\t\t\t\t(key === \"file-uri\" || key === \"folder-uri\") &&\n\t\t\t\t\t!isUri(arg.path)\n\t\t\t\t) {\n\t\t\t\t\tvalue = isUri(value) ? value : URI.file(value).toString();\n\t\t\t\t}\n\t\t\t\targs.push(`--${key}=${value}`);\n\t\t\t} else {\n\t\t\t\targs.push(a2);\n\t\t\t}\n\t\t}\n\n\t\tif (vscodeArgs.env) {\n\t\t\targs.push(\n\t\t\t\t`--extensionEnvironment=${JSON.stringify(vscodeArgs.env)}`,\n\t\t\t);\n\t\t}\n\n\t\treturn this.extensionHostDebugService.openExtensionDevelopmentHostWindow(\n\t\t\targs,\n\t\t\t!!vscodeArgs.debugRenderer,\n\t\t);\n\t}\n\n\tprivate send<R extends DebugProtocol.Response>(\n\t\tcommand: string,\n\t\targs: any,\n\t\ttoken?: CancellationToken,\n\t\ttimeout?: number,\n\t\tshowErrors = true,\n\t): Promise<R | undefined> {\n\t\treturn new Promise<DebugProtocol.Response | undefined>(\n\t\t\t(completeDispatch, errorDispatch) => {\n\t\t\t\tif (!this.debugAdapter) {\n\t\t\t\t\tif (this.inShutdown) {\n\t\t\t\t\t\t// We are in shutdown silently complete\n\t\t\t\t\t\tcompleteDispatch(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrorDispatch(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\t\t\t\"No debugger available found. Can not send '{0}'.\",\n\t\t\t\t\t\t\t\t\tcommand,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet cancelationListener: IDisposable;\n\t\t\t\tconst requestId = this.debugAdapter.sendRequest(\n\t\t\t\t\tcommand,\n\t\t\t\t\targs,\n\t\t\t\t\t(response: DebugProtocol.Response) => {\n\t\t\t\t\t\tcancelationListener?.dispose();\n\n\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\tcompleteDispatch(response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\terrorDispatch(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttimeout,\n\t\t\t\t);\n\n\t\t\t\tif (token) {\n\t\t\t\t\tcancelationListener = token.onCancellationRequested(() => {\n\t\t\t\t\t\tcancelationListener.dispose();\n\t\t\t\t\t\tif (this.capabilities.supportsCancelRequest) {\n\t\t\t\t\t\t\tthis.cancel({ requestId });\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t).then(undefined, (err) =>\n\t\t\tPromise.reject(this.handleErrorResponse(err, showErrors)),\n\t\t);\n\t}\n\n\tprivate handleErrorResponse(\n\t\terrorResponse: DebugProtocol.Response,\n\t\tshowErrors: boolean,\n\t): Error {\n\t\tif (\n\t\t\terrorResponse.command === \"canceled\" &&\n\t\t\terrorResponse.message === \"canceled\"\n\t\t) {\n\t\t\treturn new errors.CancellationError();\n\t\t}\n\n\t\tconst error: DebugProtocol.Message | undefined =\n\t\t\terrorResponse?.body?.error;\n\t\tconst errorMessage = errorResponse?.message || \"\";\n\n\t\tconst userMessage = error\n\t\t\t? formatPII(error.format, false, error.variables)\n\t\t\t: errorMessage;\n\t\tconst url = error?.url;\n\t\tif (error && url) {\n\t\t\tconst label = error.urlLabel\n\t\t\t\t? error.urlLabel\n\t\t\t\t: nls.localize(\"moreInfo\", \"More Info\");\n\t\t\tconst uri = URI.parse(url);\n\t\t\t// Use a suffixed id if uri invokes a command, so default 'Open launch.json' command is suppressed on dialog\n\t\t\tconst actionId =\n\t\t\t\turi.scheme === Schemas.command\n\t\t\t\t\t? \"debug.moreInfo.command\"\n\t\t\t\t\t: \"debug.moreInfo\";\n\t\t\treturn createErrorWithActions(userMessage, [\n\t\t\t\ttoAction({\n\t\t\t\t\tid: actionId,\n\t\t\t\t\tlabel,\n\t\t\t\t\trun: () =>\n\t\t\t\t\t\tthis.openerService.open(uri, { allowCommands: true }),\n\t\t\t\t}),\n\t\t\t]);\n\t\t}\n\t\tif (showErrors && error && error.format && error.showUser) {\n\t\t\tthis.notificationService.error(userMessage);\n\t\t}\n\t\tconst result = new errors.ErrorNoTelemetry(userMessage);\n\t\t(<any>result).showUser = error?.showUser;\n\n\t\treturn result;\n\t}\n\n\tprivate mergeCapabilities(\n\t\tcapabilities: DebugProtocol.Capabilities | undefined,\n\t): void {\n\t\tif (capabilities) {\n\t\t\tthis._capabilities = objects.mixin(\n\t\t\t\tthis._capabilities,\n\t\t\t\tcapabilities,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate fireSimulatedContinuedEvent(\n\t\tthreadId: number,\n\t\tallThreadsContinued = false,\n\t): void {\n\t\tthis._onDidContinued.fire({\n\t\t\ttype: \"event\",\n\t\t\tevent: \"continued\",\n\t\t\tbody: {\n\t\t\t\tthreadId,\n\t\t\t\tallThreadsContinued,\n\t\t\t},\n\t\t\tseq: undefined!,\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.toDispose);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["response"]
}
