var I=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var l=(o,s,i,t)=>{for(var r=t>1?void 0:t?S(s,i):s,e=o.length-1,c;e>=0;e--)(c=o[e])&&(r=(t?c(s,i,r):c(r))||r);return t&&r&&I(s,i,r),r},n=(o,s)=>(i,t)=>s(i,t,o);import{matchesFuzzy as d}from"../../../../base/common/filters.js";import{localize as f}from"../../../../nls.js";import{ICommandService as v}from"../../../../platform/commands/common/commands.js";import{PickerQuickAccessProvider as P}from"../../../../platform/quickinput/browser/pickerQuickAccess.js";import{IViewsService as b}from"../../../services/views/common/viewsService.js";import{IDebugService as h,REPL_VIEW_ID as k}from"../common/debug.js";import{DEBUG_CONSOLE_QUICK_ACCESS_PREFIX as _,SELECT_AND_START_ID as g}from"./debugCommands.js";let m=class extends P{constructor(i,t,r){super(_,{canAcceptInBackground:!0});this._debugService=i;this._viewsService=t;this._commandService=r}_getPicks(i,t,r){const e=[];this._debugService.getModel().getSessions(!0).filter(a=>a.hasSeparateRepl()).forEach((a,p)=>{const u=this._createPick(a,p,i);u&&e.push(u)}),e.length>0&&e.push({type:"separator"});const c=f("workbench.action.debug.startDebug","Start a New Debug Session");return e.push({label:`$(plus) ${c}`,ariaLabel:c,accept:()=>this._commandService.executeCommand(g)}),e}_createPick(i,t,r){const e=i.name,c=d(r,e,!0);if(c)return{label:e,highlights:{label:c},accept:(a,p)=>{this._debugService.focusStackFrame(void 0,void 0,i,{explicit:!0}),this._viewsService.isViewVisible(k)||this._viewsService.openView(k,!0)}}}};m=l([n(0,h),n(1,b),n(2,v)],m);export{m as DebugConsoleQuickAccess};
