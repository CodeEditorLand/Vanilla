{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { matchesFuzzy } from \"../../../../base/common/filters.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport {\n\ttype IPickerQuickAccessItem,\n\tPickerQuickAccessProvider,\n\tTriggerAction,\n} from \"../../../../platform/quickinput/browser/pickerQuickAccess.js\";\nimport type { IQuickPickSeparator } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IDebugService } from \"../common/debug.js\";\nimport {\n\tADD_CONFIGURATION_ID,\n\tDEBUG_QUICK_ACCESS_PREFIX,\n} from \"./debugCommands.js\";\nimport { debugConfigure, debugRemoveConfig } from \"./debugIcons.js\";\n\nexport class StartDebugQuickAccessProvider extends PickerQuickAccessProvider<IPickerQuickAccessItem> {\n\tconstructor(\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t) {\n\t\tsuper(DEBUG_QUICK_ACCESS_PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize(\n\t\t\t\t\t\"noDebugResults\",\n\t\t\t\t\t\"No matching launch configurations\",\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected async _getPicks(\n\t\tfilter: string,\n\t): Promise<(IQuickPickSeparator | IPickerQuickAccessItem)[]> {\n\t\tconst picks: Array<IPickerQuickAccessItem | IQuickPickSeparator> = [];\n\t\tif (!this.debugService.getAdapterManager().hasEnabledDebuggers()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tpicks.push({ type: \"separator\", label: \"launch.json\" });\n\n\t\tconst configManager = this.debugService.getConfigurationManager();\n\n\t\t// Entries: configs\n\t\tlet lastGroup: string | undefined;\n\t\tfor (const config of configManager.getAllConfigurations()) {\n\t\t\tconst highlights = matchesFuzzy(filter, config.name, true);\n\t\t\tif (highlights) {\n\t\t\t\t// Separator\n\t\t\t\tif (lastGroup !== config.presentation?.group) {\n\t\t\t\t\tpicks.push({ type: \"separator\" });\n\t\t\t\t\tlastGroup = config.presentation?.group;\n\t\t\t\t}\n\n\t\t\t\t// Launch entry\n\t\t\t\tpicks.push({\n\t\t\t\t\tlabel: config.name,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\tthis.contextService.getWorkbenchState() ===\n\t\t\t\t\t\tWorkbenchState.WORKSPACE\n\t\t\t\t\t\t\t? config.launch.name\n\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\thighlights: { label: highlights },\n\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(debugConfigure),\n\t\t\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\t\t\"customizeLaunchConfig\",\n\t\t\t\t\t\t\t\t\"Configure Launch Configuration\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\ttrigger: () => {\n\t\t\t\t\t\tconfig.launch.openConfigFile({ preserveFocus: false });\n\n\t\t\t\t\t\treturn TriggerAction.CLOSE_PICKER;\n\t\t\t\t\t},\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait configManager.selectConfiguration(\n\t\t\t\t\t\t\tconfig.launch,\n\t\t\t\t\t\t\tconfig.name,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.debugService.startDebugging(\n\t\t\t\t\t\t\t\tconfig.launch,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t{ startedByUser: true },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.notificationService.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Entries detected configurations\n\t\tconst dynamicProviders = await configManager.getDynamicProviders();\n\t\tif (dynamicProviders.length > 0) {\n\t\t\tpicks.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"contributed\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"contributed is lower case because it looks better like that in UI. Nothing preceeds it. It is a name of the grouping of debug configurations.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"contributed\",\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\tconfigManager\n\t\t\t.getRecentDynamicConfigurations()\n\t\t\t.forEach(({ name, type }) => {\n\t\t\t\tconst highlights = matchesFuzzy(filter, name, true);\n\t\t\t\tif (highlights) {\n\t\t\t\t\tpicks.push({\n\t\t\t\t\t\tlabel: name,\n\t\t\t\t\t\thighlights: { label: highlights },\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ticonClass:\n\t\t\t\t\t\t\t\t\tThemeIcon.asClassName(debugRemoveConfig),\n\t\t\t\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\t\t\t\"removeLaunchConfig\",\n\t\t\t\t\t\t\t\t\t\"Remove Launch Configuration\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\ttrigger: () => {\n\t\t\t\t\t\t\tconfigManager.removeRecentDynamicConfigurations(\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn TriggerAction.CLOSE_PICKER;\n\t\t\t\t\t\t},\n\t\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\t\tawait configManager.selectConfiguration(\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t{ type },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst { launch, getConfig } =\n\t\t\t\t\t\t\t\t\tconfigManager.selectedConfiguration;\n\t\t\t\t\t\t\t\tconst config = await getConfig();\n\t\t\t\t\t\t\t\tawait this.debugService.startDebugging(\n\t\t\t\t\t\t\t\t\tlaunch,\n\t\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\t\t{ startedByUser: true },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tthis.notificationService.error(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tdynamicProviders.forEach((provider) => {\n\t\t\tpicks.push({\n\t\t\t\tlabel: `$(folder) ${provider.label}...`,\n\t\t\t\tariaLabel: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"providerAriaLabel\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t'Placeholder stands for the provider label. For example \"NodeJS\".',\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"{0} contributed configurations\",\n\t\t\t\t\tprovider.label,\n\t\t\t\t),\n\t\t\t\taccept: async () => {\n\t\t\t\t\tconst pick = await provider.pick();\n\t\t\t\t\tif (pick) {\n\t\t\t\t\t\t// Use the type of the provider, not of the config since config sometimes have subtypes (for example \"node-terminal\")\n\t\t\t\t\t\tawait configManager.selectConfiguration(\n\t\t\t\t\t\t\tpick.launch,\n\t\t\t\t\t\t\tpick.config.name,\n\t\t\t\t\t\t\tpick.config,\n\t\t\t\t\t\t\t{ type: provider.type },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.debugService.startDebugging(\n\t\t\t\t\t\t\tpick.launch,\n\t\t\t\t\t\t\tpick.config,\n\t\t\t\t\t\t\t{ startedByUser: true },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\n\t\t// Entries: launches\n\t\tconst visibleLaunches = configManager\n\t\t\t.getLaunches()\n\t\t\t.filter((launch) => !launch.hidden);\n\n\t\t// Separator\n\t\tif (visibleLaunches.length > 0) {\n\t\t\tpicks.push({\n\t\t\t\ttype: \"separator\",\n\t\t\t\tlabel: localize(\"configure\", \"configure\"),\n\t\t\t});\n\t\t}\n\n\t\tfor (const launch of visibleLaunches) {\n\t\t\tconst label =\n\t\t\t\tthis.contextService.getWorkbenchState() ===\n\t\t\t\tWorkbenchState.WORKSPACE\n\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\"addConfigTo\",\n\t\t\t\t\t\t\t\"Add Config ({0})...\",\n\t\t\t\t\t\t\tlaunch.name,\n\t\t\t\t\t\t)\n\t\t\t\t\t: localize(\"addConfiguration\", \"Add Configuration...\");\n\n\t\t\t// Add Config entry\n\t\t\tpicks.push({\n\t\t\t\tlabel,\n\t\t\t\tdescription:\n\t\t\t\t\tthis.contextService.getWorkbenchState() ===\n\t\t\t\t\tWorkbenchState.WORKSPACE\n\t\t\t\t\t\t? launch.name\n\t\t\t\t\t\t: \"\",\n\t\t\t\thighlights: {\n\t\t\t\t\tlabel: matchesFuzzy(filter, label, true) ?? undefined,\n\t\t\t\t},\n\t\t\t\taccept: () =>\n\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\tADD_CONFIGURATION_ID,\n\t\t\t\t\t\tlaunch.uri.toString(),\n\t\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\treturn picks;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
