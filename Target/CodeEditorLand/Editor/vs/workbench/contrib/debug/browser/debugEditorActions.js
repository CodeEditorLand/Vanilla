import{getDomNodePagePosition as oe}from"../../../../../vs/base/browser/dom.js";import{Action as te}from"../../../../../vs/base/common/actions.js";import{KeyChord as ie,KeyCode as k,KeyMod as K}from"../../../../../vs/base/common/keyCodes.js";import"../../../../../vs/editor/browser/editorBrowser.js";import{EditorAction as b,registerEditorAction as m}from"../../../../../vs/editor/browser/editorExtensions.js";import{ICodeEditorService as ne}from"../../../../../vs/editor/browser/services/codeEditorService.js";import{Position as X}from"../../../../../vs/editor/common/core/position.js";import{EditorContextKeys as v}from"../../../../../vs/editor/common/editorContextKeys.js";import{ILanguageFeaturesService as re}from"../../../../../vs/editor/common/services/languageFeatures.js";import{MessageController as q}from"../../../../../vs/editor/contrib/message/browser/messageController.js";import*as a from"../../../../../vs/nls.js";import"../../../../../vs/platform/action/common/action.js";import{Action2 as P,MenuId as C,registerAction2 as O}from"../../../../../vs/platform/actions/common/actions.js";import{IConfigurationService as se}from"../../../../../vs/platform/configuration/common/configuration.js";import{ContextKeyExpr as f}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IContextMenuService as ae}from"../../../../../vs/platform/contextview/browser/contextView.js";import"../../../../../vs/platform/instantiation/common/instantiation.js";import{KeybindingWeight as L}from"../../../../../vs/platform/keybinding/common/keybindingsRegistry.js";import{IUriIdentityService as _}from"../../../../../vs/platform/uriIdentity/common/uriIdentity.js";import{PanelFocusContext as H}from"../../../../../vs/workbench/common/contextkeys.js";import{CONTEXT_IN_CHAT_SESSION as V}from"../../../../../vs/workbench/contrib/chat/common/chatContextKeys.js";import{openBreakpointSource as ce}from"../../../../../vs/workbench/contrib/debug/browser/breakpointsView.js";import{DisassemblyView as de}from"../../../../../vs/workbench/contrib/debug/browser/disassemblyView.js";import"../../../../../vs/workbench/contrib/debug/browser/repl.js";import{BREAKPOINT_EDITOR_CONTRIBUTION_ID as D,BreakpointWidgetContext as R,CONTEXT_CALLSTACK_ITEM_TYPE as ue,CONTEXT_DEBUG_STATE as A,CONTEXT_DEBUGGERS_AVAILABLE as p,CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED as z,CONTEXT_DISASSEMBLY_VIEW_FOCUS as Q,CONTEXT_EXCEPTION_WIDGET_VISIBLE as le,CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE as ge,CONTEXT_IN_DEBUG_MODE as T,CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST as pe,CONTEXT_STEP_INTO_TARGETS_SUPPORTED as me,EDITOR_CONTRIBUTION_ID as Y,IDebugService as E,REPL_VIEW_ID as be,WATCH_VIEW_ID as Ee}from"../../../../../vs/workbench/contrib/debug/common/debug.js";import{getEvaluatableExpressionAtPosition as Ie}from"../../../../../vs/workbench/contrib/debug/common/debugUtils.js";import{DisassemblyViewInput as fe}from"../../../../../vs/workbench/contrib/debug/common/disassemblyViewInput.js";import{IEditorService as G}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{IViewsService as $}from"../../../../../vs/workbench/services/views/common/viewsService.js";class Se extends P{constructor(){super({id:"editor.debug.action.toggleBreakpoint",title:{...a.localize2("toggleBreakpointAction","Debug: Toggle Breakpoint"),mnemonicTitle:a.localize({key:"miToggleBreakpoint",comment:["&& denotes a mnemonic"]},"Toggle &&Breakpoint")},f1:!0,precondition:p,keybinding:{when:f.or(v.editorTextFocus,Q),primary:k.F9,weight:L.EditorContrib},menu:{id:C.MenubarDebugMenu,when:p,group:"4_new_breakpoint",order:1}})}async run(n){const e=n.get(G),o=n.get(E),i=e.activeEditorPane;if(i instanceof de){const t=i.focusedAddressAndOffset;if(t){const r=o.getModel().getInstructionBreakpoints().find(c=>c.address===t.address);r?o.removeInstructionBreakpoints(r.instructionReference,r.offset):o.addInstructionBreakpoint({instructionReference:t.reference,offset:t.offset,address:t.address,canPersist:!1})}return}const l=n.get(ne),s=l.getFocusedCodeEditor()||l.getActiveCodeEditor();if(s?.hasModel()){const t=s.getModel().uri,d=o.canSetBreakpointsIn(s.getModel()),r=[...new Set(s.getSelections().map(c=>c.getPosition().lineNumber))];await Promise.all(r.map(async c=>{const g=o.getModel().getBreakpoints({lineNumber:c,uri:t});g.length?await Promise.all(g.map(B=>o.removeBreakpoints(B.getId()))):d&&await o.addBreakpoints(t,[{lineNumber:c}])}))}}}class Ce extends b{constructor(){super({id:"editor.debug.action.conditionalBreakpoint",label:a.localize("conditionalBreakpointEditorAction","Debug: Add Conditional Breakpoint..."),alias:"Debug: Add Conditional Breakpoint...",precondition:p,menuOpts:{menuId:C.MenubarNewBreakpointMenu,title:a.localize({key:"miConditionalBreakpoint",comment:["&& denotes a mnemonic"]},"&&Conditional Breakpoint..."),group:"1_breakpoints",order:1,when:p}})}async run(n,e){const o=n.get(E),i=e.getPosition();i&&e.hasModel()&&o.canSetBreakpointsIn(e.getModel())&&e.getContribution(D)?.showBreakpointWidget(i.lineNumber,void 0,R.CONDITION)}}class Te extends b{constructor(){super({id:"editor.debug.action.addLogPoint",label:a.localize("logPointEditorAction","Debug: Add Logpoint..."),precondition:p,alias:"Debug: Add Logpoint...",menuOpts:[{menuId:C.MenubarNewBreakpointMenu,title:a.localize({key:"miLogPoint",comment:["&& denotes a mnemonic"]},"&&Logpoint..."),group:"1_breakpoints",order:4,when:p}]})}async run(n,e){const o=n.get(E),i=e.getPosition();i&&e.hasModel()&&o.canSetBreakpointsIn(e.getModel())&&e.getContribution(D)?.showBreakpointWidget(i.lineNumber,i.column,R.LOG_MESSAGE)}}class ve extends b{constructor(){super({id:"editor.debug.action.triggerByBreakpoint",label:a.localize("triggerByBreakpointEditorAction","Debug: Add Triggered Breakpoint..."),precondition:p,alias:"Debug: Triggered Breakpoint...",menuOpts:[{menuId:C.MenubarNewBreakpointMenu,title:a.localize({key:"miTriggerByBreakpoint",comment:["&& denotes a mnemonic"]},"&&Triggered Breakpoint..."),group:"1_breakpoints",order:4,when:p}]})}async run(n,e){const o=n.get(E),i=e.getPosition();i&&e.hasModel()&&o.canSetBreakpointsIn(e.getModel())&&e.getContribution(D)?.showBreakpointWidget(i.lineNumber,i.column,R.TRIGGER_POINT)}}class Be extends b{constructor(){super({id:"editor.debug.action.editBreakpoint",label:a.localize("EditBreakpointEditorAction","Debug: Edit Breakpoint"),alias:"Debug: Edit Existing Breakpoint",precondition:p,menuOpts:{menuId:C.MenubarNewBreakpointMenu,title:a.localize({key:"miEditBreakpoint",comment:["&& denotes a mnemonic"]},"&&Edit Breakpoint"),group:"1_breakpoints",order:1,when:p}})}async run(n,e){const o=n.get(E),i=e.getPosition(),l=o.getModel();if(!(e.hasModel()&&i))return;const s=l.getBreakpoints({lineNumber:i.lineNumber});if(s.length===0)return;const t=s.map(c=>c.column?Math.abs(c.column-i.column):i.column),d=t.indexOf(Math.min(...t)),r=s[d];e.getContribution(D)?.showBreakpointWidget(r.lineNumber,r.column)}}class U extends P{static ID="debug.action.openDisassemblyView";constructor(){super({id:U.ID,title:{...a.localize2("openDisassemblyView","Open Disassembly View"),mnemonicTitle:a.localize({key:"miDisassemblyView",comment:["&& denotes a mnemonic"]},"&&DisassemblyView")},precondition:ge,menu:[{id:C.EditorContext,group:"debug",order:5,when:f.and(T,H.toNegated(),A.isEqualTo("stopped"),v.editorTextFocus,z,pe)},{id:C.DebugCallStackContext,group:"z_commands",order:50,when:f.and(T,A.isEqualTo("stopped"),ue.isEqualTo("stackFrame"),z)},{id:C.CommandPalette,when:f.and(T,A.isEqualTo("stopped"),z)}]})}run(n){n.get(G).openEditor(fe.instance,{pinned:!0,revealIfOpened:!0})}}class w extends P{static ID="debug.action.toggleDisassemblyViewSourceCode";static configID="debug.disassemblyView.showSourceCode";constructor(){super({id:w.ID,title:{...a.localize2("toggleDisassemblyViewSourceCode","Toggle Source Code in Disassembly View"),mnemonicTitle:a.localize({key:"mitogglesource",comment:["&& denotes a mnemonic"]},"&&ToggleSource")},metadata:{description:a.localize2("toggleDisassemblyViewSourceCodeDescription","Shows or hides source code in disassembly")},f1:!0})}run(n,e,...o){const i=n.get(se);if(i){const l=i.getValue("debug").disassemblyView.showSourceCode;i.updateValue(w.configID,!l)}}}class h extends b{static ID="editor.debug.action.runToCursor";static LABEL=a.localize2("runToCursor","Run to Cursor");constructor(){super({id:h.ID,label:h.LABEL.value,alias:"Debug: Run to Cursor",precondition:f.and(p,H.toNegated(),f.or(v.editorTextFocus,Q),V.negate()),contextMenuOpts:{group:"debug",order:2,when:T}})}async run(n,e){const o=e.getPosition();if(!(e.hasModel()&&o))return;const i=e.getModel().uri,l=n.get(E),s=l.getViewModel(),t=n.get(_);let d;const r=s.focusedStackFrame;r&&t.extUri.isEqual(r.source.uri,i)&&r.range.startLineNumber===o.lineNumber&&(d=o.column),await l.runTo(i,o.lineNumber,d)}}class y extends b{static ID="editor.debug.action.selectionToRepl";static LABEL=a.localize2("evaluateInDebugConsole","Evaluate in Debug Console");constructor(){super({id:y.ID,label:y.LABEL.value,alias:"Debug: Evaluate in Console",precondition:f.and(T,v.editorTextFocus,V.negate()),contextMenuOpts:{group:"debug",order:0}})}async run(n,e){const o=n.get(E),i=n.get($),s=o.getViewModel().focusedSession;if(!e.hasModel()||!s)return;const t=e.getSelection();let d;t.isEmpty()?d=e.getModel().getLineContent(t.selectionStartLineNumber).trim():d=e.getModel().getValueInRange(t),(await i.openView(be,!1))?.sendReplInput(d)}}class x extends b{static ID="editor.debug.action.selectionToWatch";static LABEL=a.localize2("addToWatch","Add to Watch");constructor(){super({id:x.ID,label:x.LABEL.value,alias:"Debug: Add to Watch",precondition:f.and(T,v.editorTextFocus,V.negate()),contextMenuOpts:{group:"debug",order:1}})}async run(n,e){const o=n.get(E),i=n.get($),l=n.get(re);if(!e.hasModel())return;let s;const t=e.getModel(),d=e.getSelection();if(!d.isEmpty())s=t.getValueInRange(d);else{const r=e.getPosition(),c=await Ie(l,t,r);if(!c)return;s=c.matchingExpression}s&&(await i.openView(Ee),o.addWatchExpression(s))}}class ke extends b{constructor(){super({id:"editor.debug.action.showDebugHover",label:a.localize("showDebugHover","Debug: Show Hover"),alias:"Debug: Show Hover",precondition:T,kbOpts:{kbExpr:v.editorTextFocus,primary:ie(K.CtrlCmd|k.KeyK,K.CtrlCmd|k.KeyI),weight:L.EditorContrib}})}async run(n,e){const o=e.getPosition();if(!(!o||!e.hasModel()))return e.getContribution(Y)?.showHover(o,!0)}}const j=a.localize("editor.debug.action.stepIntoTargets.notAvailable","Step targets are not available here");class N extends b{static ID="editor.debug.action.stepIntoTargets";static LABEL=a.localize({key:"stepIntoTargets",comment:["Step Into Targets lets the user step into an exact function he or she is interested in."]},"Step Into Target");constructor(){super({id:N.ID,label:N.LABEL,alias:"Debug: Step Into Target",precondition:f.and(me,T,A.isEqualTo("stopped"),v.editorTextFocus),contextMenuOpts:{group:"debug",order:1.5}})}async run(n,e){const o=n.get(E),i=n.get(ae),l=n.get(_),s=o.getViewModel().focusedSession,t=o.getViewModel().focusedStackFrame,d=e.getSelection(),r=d?.getPosition()||t&&{lineNumber:t.range.startLineNumber,column:t.range.startColumn};if(!s||!t||!e.hasModel()||!l.extUri.isEqual(e.getModel().uri,t.source.uri)){r&&q.get(e)?.showMessage(j,r);return}const c=await s.stepInTargets(t.frameId);if(!c?.length){q.get(e)?.showMessage(j,r);return}if(d){const S=[];for(const u of c)u.line&&S.push({start:new X(u.line,u.column||1),end:u.endLine?new X(u.endLine,u.endColumn||1):void 0,target:u});S.sort((u,F)=>F.start.lineNumber-u.start.lineNumber||F.start.column-u.start.column);const M=d.getPosition(),W=S.find(u=>u.end&&M.isBefore(u.end)&&u.start.isBeforeOrEqual(M))||S.find(u=>u.end===void 0&&u.start.isBeforeOrEqual(M));if(W){s.stepIn(t.thread.threadId,W.target.id);return}}e.revealLineInCenterIfOutsideViewport(t.range.startLineNumber);const g=e.getScrolledVisiblePosition(r),B=oe(e.getDomNode()),Z=B.left+g.left,ee=B.top+g.top+g.height;i.showContextMenu({getAnchor:()=>({x:Z,y:ee}),getActions:()=>c.map(S=>new te(`stepIntoTarget:${S.id}`,S.label,void 0,!0,()=>s.stepIn(t.thread.threadId,S.id)))})}}class J extends b{constructor(e,o){super(o);this.isNext=e}async run(e,o){const i=e.get(E),l=e.get(G),s=e.get(_);if(o.hasModel()){const t=o.getModel().uri,d=o.getPosition().lineNumber,r=i.getModel().getBreakpoints({enabledOnly:!0});let c=this.isNext?r.filter(g=>s.extUri.isEqual(g.uri,t)&&g.lineNumber>d).shift():r.filter(g=>s.extUri.isEqual(g.uri,t)&&g.lineNumber<d).pop();if(c||(c=this.isNext?r.filter(g=>g.uri.toString()>t.toString()).shift():r.filter(g=>g.uri.toString()<t.toString()).pop()),!c&&r.length&&(c=this.isNext?r[0]:r[r.length-1]),c)return ce(c,!1,!0,!1,i,l)}}}class De extends J{constructor(){super(!0,{id:"editor.debug.action.goToNextBreakpoint",label:a.localize("goToNextBreakpoint","Debug: Go to Next Breakpoint"),alias:"Debug: Go to Next Breakpoint",precondition:p})}}class Ae extends J{constructor(){super(!1,{id:"editor.debug.action.goToPreviousBreakpoint",label:a.localize("goToPreviousBreakpoint","Debug: Go to Previous Breakpoint"),alias:"Debug: Go to Previous Breakpoint",precondition:p})}}class we extends b{constructor(){super({id:"editor.debug.action.closeExceptionWidget",label:a.localize("closeExceptionWidget","Close Exception Widget"),alias:"Close Exception Widget",precondition:le,kbOpts:{primary:k.Escape,weight:L.EditorContrib}})}async run(n,e){e.getContribution(Y)?.closeExceptionWidget()}}O(U),O(w),O(Se),m(Ce),m(Te),m(ve),m(Be),m(h),m(N),m(y),m(x),m(ke),m(De),m(Ae),m(we);export{h as RunToCursorAction,y as SelectionToReplAction,x as SelectionToWatchExpressionsAction};
