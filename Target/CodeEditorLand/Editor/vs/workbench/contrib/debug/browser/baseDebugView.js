var T=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var v=(l,t,o,e)=>{for(var i=e>1?void 0:e?h(t,o):t,n=l.length-1,s;n>=0;n--)(s=l[n])&&(i=(e?s(t,o,i):s(i))||i);return e&&i&&T(t,o,i),i},c=(l,t)=>(o,e)=>t(o,e,l);import*as r from"../../../../base/browser/dom.js";import"../../../../base/browser/keyboardEvent.js";import{ActionBar as y}from"../../../../base/browser/ui/actionbar/actionbar.js";import{HighlightedLabel as D}from"../../../../base/browser/ui/highlightedlabel/highlightedLabel.js";import{getDefaultHoverDelegate as S}from"../../../../base/browser/ui/hover/hoverDelegateFactory.js";import{InputBox as L}from"../../../../base/browser/ui/inputbox/inputBox.js";import"../../../../base/browser/ui/tree/tree.js";import{Codicon as B}from"../../../../base/common/codicons.js";import{createMatches as z}from"../../../../base/common/filters.js";import{createSingleCallFunction as H}from"../../../../base/common/functional.js";import{KeyCode as x}from"../../../../base/common/keyCodes.js";import{DisposableStore as g,dispose as V,toDisposable as M}from"../../../../base/common/lifecycle.js";import{ThemeIcon as C}from"../../../../base/common/themables.js";import{localize as w}from"../../../../nls.js";import"../../../../platform/commands/common/commands.js";import{IContextViewService as O}from"../../../../platform/contextview/browser/contextView.js";import{IHoverService as F}from"../../../../platform/hover/browser/hover.js";import{defaultInputBoxStyles as N}from"../../../../platform/theme/browser/defaultStyles.js";import{IDebugService as f}from"../common/debug.js";import{Variable as K}from"../common/debugModel.js";import{IDebugVisualizerService as k}from"../common/debugVisualizers.js";import"./linkDetector.js";const p=r.$;function xe(l){const t=p(".");return t.classList.add("debug-view-content"),l.appendChild(t),t}let u=class{constructor(t,o){this.debugService=t;this.debugVisualizer=o}async getChildren(t){const o=this.debugService.getViewModel(),e=await this.doGetChildren(t);return Promise.all(e.map(async i=>{const n=o.getVisualizedExpression(i);if(typeof n=="string"){const s=await this.debugVisualizer.getVisualizedNodeFor(n,i);if(s)return o.setVisualizedExpression(i,s),s}else if(n)return n;return i}))}};u=v([c(0,f),c(1,k)],u);let I=class{constructor(t,o,e){this.debugService=t;this.contextViewService=o;this.hoverService=e}renderTemplate(t){const o=new g,e=r.append(t,p(".expression")),i=r.append(e,p("span.name")),n=r.append(e,p("span.lazy-button"));n.classList.add(...C.asClassNameArray(B.eye)),o.add(this.hoverService.setupManagedHover(S("mouse"),n,w("debug.lazyButton.tooltip","Click to expand")));const s=r.append(e,p("span.type")),E=r.append(e,p("span.value")),a=o.add(new D(i)),m=r.append(e,p(".inputBoxContainer"));let d;this.renderActionBar&&(r.append(e,p(".span.actionbar-spacer")),d=o.add(new y(e)));const b={expression:e,name:i,type:s,value:E,label:a,inputBoxContainer:m,actionBar:d,elementDisposable:new g,templateDisposable:o,lazyButton:n,currentElement:void 0};return o.add(r.addDisposableListener(n,r.EventType.CLICK,()=>{b.currentElement&&this.debugService.getViewModel().evaluateLazyExpression(b.currentElement)})),b}renderExpressionElement(t,o,e){e.currentElement=t,this.renderExpression(o.element,e,z(o.filterData)),e.actionBar&&this.renderActionBar(e.actionBar,t,e);const i=this.debugService.getViewModel().getSelectedExpression();if(t===i?.expression||t instanceof K&&t.errorMessage){const n=this.getInputBoxOptions(t,!!i?.settingWatch);n&&e.elementDisposable.add(this.renderInputBox(e.name,e.value,e.inputBoxContainer,n))}}renderInputBox(t,o,e,i){t.style.display="none",o.style.display="none",e.style.display="initial",r.clearNode(e);const n=new L(e,this.contextViewService,{...i,inputBoxStyles:N});n.value=i.initialValue,n.focus(),n.select();const s=H((a,m)=>{t.style.display="",o.style.display="",e.style.display="none";const d=n.value;V(E),m&&(this.debugService.getViewModel().setSelectedExpression(void 0,!1),i.onFinish(d,a))}),E=[n,r.addStandardDisposableListener(n.inputElement,r.EventType.KEY_DOWN,a=>{const m=a.equals(x.Escape),d=a.equals(x.Enter);(m||d)&&(a.preventDefault(),a.stopPropagation(),s(d,!0))}),r.addDisposableListener(n.inputElement,r.EventType.BLUR,()=>{s(!0,!0)}),r.addDisposableListener(n.inputElement,r.EventType.CLICK,a=>{a.preventDefault(),a.stopPropagation()})];return M(()=>{s(!1,!1)})}disposeElement(t,o,e){e.elementDisposable.clear()}disposeTemplate(t){t.elementDisposable.dispose(),t.templateDisposable.dispose()}};I=v([c(0,f),c(1,O),c(2,F)],I);export{u as AbstractExpressionDataSource,I as AbstractExpressionsRenderer,xe as renderViewTree};
