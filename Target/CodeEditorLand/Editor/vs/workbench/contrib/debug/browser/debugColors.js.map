{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { registerColor, foreground, editorInfoForeground, editorWarningForeground, errorForeground, badgeBackground, badgeForeground, listDeemphasizedForeground, contrastBorder, inputBorder, toolbarHoverBackground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { localize } from '../../../../nls.js';\nimport * as icons from './debugIcons.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\n\nexport const debugToolBarBackground = registerColor('debugToolBar.background', {\n\tdark: '#333333',\n\tlight: '#F3F3F3',\n\thcDark: '#000000',\n\thcLight: '#FFFFFF'\n}, localize('debugToolBarBackground', \"Debug toolbar background color.\"));\n\nexport const debugToolBarBorder = registerColor('debugToolBar.border', null, localize('debugToolBarBorder', \"Debug toolbar border color.\"));\n\nexport const debugIconStartForeground = registerColor('debugIcon.startForeground', {\n\tdark: '#89D185',\n\tlight: '#388A34',\n\thcDark: '#89D185',\n\thcLight: '#388A34'\n}, localize('debugIcon.startForeground', \"Debug toolbar icon for start debugging.\"));\n\nexport function registerColors() {\n\n\tconst debugTokenExpressionName = registerColor('debugTokenExpression.name', { dark: '#c586c0', light: '#9b46b0', hcDark: foreground, hcLight: foreground }, 'Foreground color for the token names shown in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionType = registerColor('debugTokenExpression.type', { dark: '#4A90E2', light: '#4A90E2', hcDark: foreground, hcLight: foreground }, 'Foreground color for the token types shown in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionValue = registerColor('debugTokenExpression.value', { dark: '#cccccc99', light: '#6c6c6ccc', hcDark: foreground, hcLight: foreground }, 'Foreground color for the token values shown in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionString = registerColor('debugTokenExpression.string', { dark: '#ce9178', light: '#a31515', hcDark: '#f48771', hcLight: '#a31515' }, 'Foreground color for strings in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionBoolean = registerColor('debugTokenExpression.boolean', { dark: '#4e94ce', light: '#0000ff', hcDark: '#75bdfe', hcLight: '#0000ff' }, 'Foreground color for booleans in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionNumber = registerColor('debugTokenExpression.number', { dark: '#b5cea8', light: '#098658', hcDark: '#89d185', hcLight: '#098658' }, 'Foreground color for numbers in the debug views (ie. the Variables or Watch view).');\n\tconst debugTokenExpressionError = registerColor('debugTokenExpression.error', { dark: '#f48771', light: '#e51400', hcDark: '#f48771', hcLight: '#e51400' }, 'Foreground color for expression errors in the debug views (ie. the Variables or Watch view) and for error logs shown in the debug console.');\n\n\tconst debugViewExceptionLabelForeground = registerColor('debugView.exceptionLabelForeground', { dark: foreground, light: '#FFF', hcDark: foreground, hcLight: foreground }, 'Foreground color for a label shown in the CALL STACK view when the debugger breaks on an exception.');\n\tconst debugViewExceptionLabelBackground = registerColor('debugView.exceptionLabelBackground', { dark: '#6C2022', light: '#A31515', hcDark: '#6C2022', hcLight: '#A31515' }, 'Background color for a label shown in the CALL STACK view when the debugger breaks on an exception.');\n\tconst debugViewStateLabelForeground = registerColor('debugView.stateLabelForeground', foreground, 'Foreground color for a label in the CALL STACK view showing the current session\\'s or thread\\'s state.');\n\tconst debugViewStateLabelBackground = registerColor('debugView.stateLabelBackground', '#88888844', 'Background color for a label in the CALL STACK view showing the current session\\'s or thread\\'s state.');\n\tconst debugViewValueChangedHighlight = registerColor('debugView.valueChangedHighlight', '#569CD6', 'Color used to highlight value changes in the debug views (ie. in the Variables view).');\n\n\tconst debugConsoleInfoForeground = registerColor('debugConsole.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: foreground, hcLight: foreground }, 'Foreground color for info messages in debug REPL console.');\n\tconst debugConsoleWarningForeground = registerColor('debugConsole.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: '#008000', hcLight: editorWarningForeground }, 'Foreground color for warning messages in debug REPL console.');\n\tconst debugConsoleErrorForeground = registerColor('debugConsole.errorForeground', errorForeground, 'Foreground color for error messages in debug REPL console.');\n\tconst debugConsoleSourceForeground = registerColor('debugConsole.sourceForeground', foreground, 'Foreground color for source filenames in debug REPL console.');\n\tconst debugConsoleInputIconForeground = registerColor('debugConsoleInputIcon.foreground', foreground, 'Foreground color for debug console input marker icon.');\n\n\tconst debugIconPauseForeground = registerColor('debugIcon.pauseForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thcDark: '#75BEFF',\n\t\thcLight: '#007ACC'\n\t}, localize('debugIcon.pauseForeground', \"Debug toolbar icon for pause.\"));\n\n\tconst debugIconStopForeground = registerColor('debugIcon.stopForeground', {\n\t\tdark: '#F48771',\n\t\tlight: '#A1260D',\n\t\thcDark: '#F48771',\n\t\thcLight: '#A1260D'\n\t}, localize('debugIcon.stopForeground', \"Debug toolbar icon for stop.\"));\n\n\tconst debugIconDisconnectForeground = registerColor('debugIcon.disconnectForeground', {\n\t\tdark: '#F48771',\n\t\tlight: '#A1260D',\n\t\thcDark: '#F48771',\n\t\thcLight: '#A1260D'\n\t}, localize('debugIcon.disconnectForeground', \"Debug toolbar icon for disconnect.\"));\n\n\tconst debugIconRestartForeground = registerColor('debugIcon.restartForeground', {\n\t\tdark: '#89D185',\n\t\tlight: '#388A34',\n\t\thcDark: '#89D185',\n\t\thcLight: '#388A34'\n\t}, localize('debugIcon.restartForeground', \"Debug toolbar icon for restart.\"));\n\n\tconst debugIconStepOverForeground = registerColor('debugIcon.stepOverForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thcDark: '#75BEFF',\n\t\thcLight: '#007ACC'\n\t}, localize('debugIcon.stepOverForeground', \"Debug toolbar icon for step over.\"));\n\n\tconst debugIconStepIntoForeground = registerColor('debugIcon.stepIntoForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thcDark: '#75BEFF',\n\t\thcLight: '#007ACC'\n\t}, localize('debugIcon.stepIntoForeground', \"Debug toolbar icon for step into.\"));\n\n\tconst debugIconStepOutForeground = registerColor('debugIcon.stepOutForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thcDark: '#75BEFF',\n\t\thcLight: '#007ACC'\n\t}, localize('debugIcon.stepOutForeground', \"Debug toolbar icon for step over.\"));\n\n\tconst debugIconContinueForeground = registerColor('debugIcon.continueForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thcDark: '#75BEFF',\n\t\thcLight: '#007ACC'\n\t}, localize('debugIcon.continueForeground', \"Debug toolbar icon for continue.\"));\n\n\tconst debugIconStepBackForeground = registerColor('debugIcon.stepBackForeground', {\n\t\tdark: '#75BEFF',\n\t\tlight: '#007ACC',\n\t\thcDark: '#75BEFF',\n\t\thcLight: '#007ACC'\n\t}, localize('debugIcon.stepBackForeground', \"Debug toolbar icon for step back.\"));\n\n\tregisterThemingParticipant((theme, collector) => {\n\t\t// All these colours provide a default value so they will never be undefined, hence the `!`\n\t\tconst badgeBackgroundColor = theme.getColor(badgeBackground)!;\n\t\tconst badgeForegroundColor = theme.getColor(badgeForeground)!;\n\t\tconst listDeemphasizedForegroundColor = theme.getColor(listDeemphasizedForeground)!;\n\t\tconst debugViewExceptionLabelForegroundColor = theme.getColor(debugViewExceptionLabelForeground)!;\n\t\tconst debugViewExceptionLabelBackgroundColor = theme.getColor(debugViewExceptionLabelBackground)!;\n\t\tconst debugViewStateLabelForegroundColor = theme.getColor(debugViewStateLabelForeground)!;\n\t\tconst debugViewStateLabelBackgroundColor = theme.getColor(debugViewStateLabelBackground)!;\n\t\tconst debugViewValueChangedHighlightColor = theme.getColor(debugViewValueChangedHighlight)!;\n\t\tconst toolbarHoverBackgroundColor = theme.getColor(toolbarHoverBackground);\n\n\t\tcollector.addRule(`\n\t\t\t/* Text colour of the call stack row's filename */\n\t\t\t.debug-pane .debug-call-stack .monaco-list-row:not(.selected) .stack-frame > .file .file-name {\n\t\t\t\tcolor: ${listDeemphasizedForegroundColor}\n\t\t\t}\n\n\t\t\t/* Line & column number \"badge\" for selected call stack row */\n\t\t\t.debug-pane .monaco-list-row.selected .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor};\n\t\t\t\tcolor: ${badgeForegroundColor};\n\t\t\t}\n\n\t\t\t/* Line & column number \"badge\" for unselected call stack row (basically all other rows) */\n\t\t\t.debug-pane .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor.transparent(0.6)};\n\t\t\t\tcolor: ${badgeForegroundColor.transparent(0.6)};\n\t\t\t}\n\n\t\t\t/* State \"badge\" displaying the active session's current state.\n\t\t\t* Only visible when there are more active debug sessions/threads running.\n\t\t\t*/\n\t\t\t.debug-pane .debug-call-stack .thread > .state.label,\n\t\t\t.debug-pane .debug-call-stack .session > .state.label {\n\t\t\t\tbackground-color: ${debugViewStateLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewStateLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* State \"badge\" displaying the active session's current state.\n\t\t\t* Only visible when there are more active debug sessions/threads running\n\t\t\t* and thread paused due to a thrown exception.\n\t\t\t*/\n\t\t\t.debug-pane .debug-call-stack .thread > .state.label.exception,\n\t\t\t.debug-pane .debug-call-stack .session > .state.label.exception {\n\t\t\t\tbackground-color: ${debugViewExceptionLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewExceptionLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* Info \"badge\" shown when the debugger pauses due to a thrown exception. */\n\t\t\t.debug-pane .call-stack-state-message > .label.exception {\n\t\t\t\tbackground-color: ${debugViewExceptionLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewExceptionLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* Animation of changed values in Debug viewlet */\n\t\t\t@keyframes debugViewletValueChanged {\n\t\t\t\t0%   { background-color: ${debugViewValueChangedHighlightColor.transparent(0)} }\n\t\t\t\t5%   { background-color: ${debugViewValueChangedHighlightColor.transparent(0.9)} }\n\t\t\t\t100% { background-color: ${debugViewValueChangedHighlightColor.transparent(0.3)} }\n\t\t\t}\n\n\t\t\t.debug-pane .monaco-list-row .expression .value.changed {\n\t\t\t\tbackground-color: ${debugViewValueChangedHighlightColor.transparent(0.3)};\n\t\t\t\tanimation-name: debugViewletValueChanged;\n\t\t\t\tanimation-duration: 1s;\n\t\t\t\tanimation-fill-mode: forwards;\n\t\t\t}\n\n\t\t\t.monaco-list-row .expression .lazy-button:hover {\n\t\t\t\tbackground-color: ${toolbarHoverBackgroundColor}\n\t\t\t}\n\t\t`);\n\n\t\tconst contrastBorderColor = theme.getColor(contrastBorder);\n\n\t\tif (contrastBorderColor) {\n\t\t\tcollector.addRule(`\n\t\t\t.debug-pane .line-number {\n\t\t\t\tborder: 1px solid ${contrastBorderColor};\n\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\t// Use fully-opaque colors for line-number badges\n\t\tif (isHighContrast(theme.type)) {\n\t\t\tcollector.addRule(`\n\t\t\t.debug-pane .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor};\n\t\t\t\tcolor: ${badgeForegroundColor};\n\t\t\t}`);\n\t\t}\n\n\t\tconst tokenNameColor = theme.getColor(debugTokenExpressionName)!;\n\t\tconst tokenTypeColor = theme.getColor(debugTokenExpressionType)!;\n\t\tconst tokenValueColor = theme.getColor(debugTokenExpressionValue)!;\n\t\tconst tokenStringColor = theme.getColor(debugTokenExpressionString)!;\n\t\tconst tokenBooleanColor = theme.getColor(debugTokenExpressionBoolean)!;\n\t\tconst tokenErrorColor = theme.getColor(debugTokenExpressionError)!;\n\t\tconst tokenNumberColor = theme.getColor(debugTokenExpressionNumber)!;\n\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .monaco-list-row .expression .name {\n\t\t\t\tcolor: ${tokenNameColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .type {\n\t\t\t\tcolor: ${tokenTypeColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value,\n\t\t\t.monaco-workbench .debug-hover-widget .value {\n\t\t\t\tcolor: ${tokenValueColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.string,\n\t\t\t.monaco-workbench .debug-hover-widget .value.string {\n\t\t\t\tcolor: ${tokenStringColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.boolean,\n\t\t\t.monaco-workbench .debug-hover-widget .value.boolean {\n\t\t\t\tcolor: ${tokenBooleanColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .error,\n\t\t\t.monaco-workbench .debug-hover-widget .error,\n\t\t\t.monaco-workbench .debug-pane .debug-variables .scope .error {\n\t\t\t\tcolor: ${tokenErrorColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.number,\n\t\t\t.monaco-workbench .debug-hover-widget .value.number {\n\t\t\t\tcolor: ${tokenNumberColor};\n\t\t\t}\n\t\t`);\n\n\t\tconst debugConsoleInputBorderColor = theme.getColor(inputBorder) || Color.fromHex('#80808060');\n\t\tconst debugConsoleInfoForegroundColor = theme.getColor(debugConsoleInfoForeground)!;\n\t\tconst debugConsoleWarningForegroundColor = theme.getColor(debugConsoleWarningForeground)!;\n\t\tconst debugConsoleErrorForegroundColor = theme.getColor(debugConsoleErrorForeground)!;\n\t\tconst debugConsoleSourceForegroundColor = theme.getColor(debugConsoleSourceForeground)!;\n\t\tconst debugConsoleInputIconForegroundColor = theme.getColor(debugConsoleInputIconForeground)!;\n\n\t\tcollector.addRule(`\n\t\t\t.repl .repl-input-wrapper {\n\t\t\t\tborder-top: 1px solid ${debugConsoleInputBorderColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.info {\n\t\t\t\tcolor: ${debugConsoleInfoForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.warn {\n\t\t\t\tcolor: ${debugConsoleWarningForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.error {\n\t\t\t\tcolor: ${debugConsoleErrorForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .source {\n\t\t\t\tcolor: ${debugConsoleSourceForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\tcolor: ${debugConsoleInputIconForegroundColor};\n\t\t\t}\n\t\t`);\n\n\t\tif (!theme.defines(debugConsoleInputIconForeground)) {\n\t\t\tcollector.addRule(`\n\t\t\t\t.monaco-workbench.vs .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 0.25;\n\t\t\t\t}\n\n\t\t\t\t.monaco-workbench.vs-dark .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 0.4;\n\t\t\t\t}\n\n\t\t\t\t.monaco-workbench.hc-black .repl .repl-tree .monaco-tl-contents .arrow,\n\t\t\t\t.monaco-workbench.hc-light .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tconst debugIconStartColor = theme.getColor(debugIconStartForeground);\n\t\tif (debugIconStartColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStart)} { color: ${debugIconStartColor}; }`);\n\t\t}\n\n\t\tconst debugIconPauseColor = theme.getColor(debugIconPauseForeground);\n\t\tif (debugIconPauseColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugPause)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugPause)} { color: ${debugIconPauseColor}; }`);\n\t\t}\n\n\t\tconst debugIconStopColor = theme.getColor(debugIconStopForeground);\n\t\tif (debugIconStopColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStop)},.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStop)} { color: ${debugIconStopColor}; }`);\n\t\t}\n\n\t\tconst debugIconDisconnectColor = theme.getColor(debugIconDisconnectForeground);\n\t\tif (debugIconDisconnectColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugDisconnect)},.monaco-workbench .debug-view-content ${ThemeIcon.asCSSSelector(icons.debugDisconnect)}, .monaco-workbench .debug-toolbar ${ThemeIcon.asCSSSelector(icons.debugDisconnect)}, .monaco-workbench .command-center-center ${ThemeIcon.asCSSSelector(icons.debugDisconnect)} { color: ${debugIconDisconnectColor}; }`);\n\t\t}\n\n\t\tconst debugIconRestartColor = theme.getColor(debugIconRestartForeground);\n\t\tif (debugIconRestartColor) {\n\t\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugRestart)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugRestartFrame)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugRestart)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugRestartFrame)} { color: ${debugIconRestartColor}; }`);\n\t\t}\n\n\t\tconst debugIconStepOverColor = theme.getColor(debugIconStepOverForeground);\n\t\tif (debugIconStepOverColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepOver)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepOver)} { color: ${debugIconStepOverColor}; }`);\n\t\t}\n\n\t\tconst debugIconStepIntoColor = theme.getColor(debugIconStepIntoForeground);\n\t\tif (debugIconStepIntoColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepInto)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepInto)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepInto)} { color: ${debugIconStepIntoColor}; }`);\n\t\t}\n\n\t\tconst debugIconStepOutColor = theme.getColor(debugIconStepOutForeground);\n\t\tif (debugIconStepOutColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepOut)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepOut)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepOut)} { color: ${debugIconStepOutColor}; }`);\n\t\t}\n\n\t\tconst debugIconContinueColor = theme.getColor(debugIconContinueForeground);\n\t\tif (debugIconContinueColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugContinue)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugContinue)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugReverseContinue)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugReverseContinue)} { color: ${debugIconContinueColor}; }`);\n\t\t}\n\n\t\tconst debugIconStepBackColor = theme.getColor(debugIconStepBackForeground);\n\t\tif (debugIconStepBackColor) {\n\t\t\tcollector.addRule(`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepBack)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepBack)} { color: ${debugIconStepBackColor}; }`);\n\t\t}\n\t});\n}\n"],
  "mappings": "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",
  "names": []
}
