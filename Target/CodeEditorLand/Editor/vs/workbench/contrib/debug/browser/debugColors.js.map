{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from \"../../../../base/common/color.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tbadgeBackground,\n\tbadgeForeground,\n\tcontrastBorder,\n\teditorInfoForeground,\n\teditorWarningForeground,\n\terrorForeground,\n\tforeground,\n\tinputBorder,\n\tlistDeemphasizedForeground,\n\tregisterColor,\n\ttoolbarHoverBackground,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { isHighContrast } from \"../../../../platform/theme/common/theme.js\";\nimport { registerThemingParticipant } from \"../../../../platform/theme/common/themeService.js\";\nimport * as icons from \"./debugIcons.js\";\n\nexport const debugToolBarBackground = registerColor(\n\t\"debugToolBar.background\",\n\t{\n\t\tdark: \"#333333\",\n\t\tlight: \"#F3F3F3\",\n\t\thcDark: \"#000000\",\n\t\thcLight: \"#FFFFFF\",\n\t},\n\tlocalize(\"debugToolBarBackground\", \"Debug toolbar background color.\"),\n);\n\nexport const debugToolBarBorder = registerColor(\n\t\"debugToolBar.border\",\n\tnull,\n\tlocalize(\"debugToolBarBorder\", \"Debug toolbar border color.\"),\n);\n\nexport const debugIconStartForeground = registerColor(\n\t\"debugIcon.startForeground\",\n\t{\n\t\tdark: \"#89D185\",\n\t\tlight: \"#388A34\",\n\t\thcDark: \"#89D185\",\n\t\thcLight: \"#388A34\",\n\t},\n\tlocalize(\n\t\t\"debugIcon.startForeground\",\n\t\t\"Debug toolbar icon for start debugging.\",\n\t),\n);\n\nexport function registerColors() {\n\tconst debugTokenExpressionName = registerColor(\n\t\t\"debugTokenExpression.name\",\n\t\t{\n\t\t\tdark: \"#c586c0\",\n\t\t\tlight: \"#9b46b0\",\n\t\t\thcDark: foreground,\n\t\t\thcLight: foreground,\n\t\t},\n\t\t\"Foreground color for the token names shown in the debug views (ie. the Variables or Watch view).\",\n\t);\n\tconst debugTokenExpressionType = registerColor(\n\t\t\"debugTokenExpression.type\",\n\t\t{\n\t\t\tdark: \"#4A90E2\",\n\t\t\tlight: \"#4A90E2\",\n\t\t\thcDark: foreground,\n\t\t\thcLight: foreground,\n\t\t},\n\t\t\"Foreground color for the token types shown in the debug views (ie. the Variables or Watch view).\",\n\t);\n\tconst debugTokenExpressionValue = registerColor(\n\t\t\"debugTokenExpression.value\",\n\t\t{\n\t\t\tdark: \"#cccccc99\",\n\t\t\tlight: \"#6c6c6ccc\",\n\t\t\thcDark: foreground,\n\t\t\thcLight: foreground,\n\t\t},\n\t\t\"Foreground color for the token values shown in the debug views (ie. the Variables or Watch view).\",\n\t);\n\tconst debugTokenExpressionString = registerColor(\n\t\t\"debugTokenExpression.string\",\n\t\t{\n\t\t\tdark: \"#ce9178\",\n\t\t\tlight: \"#a31515\",\n\t\t\thcDark: \"#f48771\",\n\t\t\thcLight: \"#a31515\",\n\t\t},\n\t\t\"Foreground color for strings in the debug views (ie. the Variables or Watch view).\",\n\t);\n\tconst debugTokenExpressionBoolean = registerColor(\n\t\t\"debugTokenExpression.boolean\",\n\t\t{\n\t\t\tdark: \"#4e94ce\",\n\t\t\tlight: \"#0000ff\",\n\t\t\thcDark: \"#75bdfe\",\n\t\t\thcLight: \"#0000ff\",\n\t\t},\n\t\t\"Foreground color for booleans in the debug views (ie. the Variables or Watch view).\",\n\t);\n\tconst debugTokenExpressionNumber = registerColor(\n\t\t\"debugTokenExpression.number\",\n\t\t{\n\t\t\tdark: \"#b5cea8\",\n\t\t\tlight: \"#098658\",\n\t\t\thcDark: \"#89d185\",\n\t\t\thcLight: \"#098658\",\n\t\t},\n\t\t\"Foreground color for numbers in the debug views (ie. the Variables or Watch view).\",\n\t);\n\tconst debugTokenExpressionError = registerColor(\n\t\t\"debugTokenExpression.error\",\n\t\t{\n\t\t\tdark: \"#f48771\",\n\t\t\tlight: \"#e51400\",\n\t\t\thcDark: \"#f48771\",\n\t\t\thcLight: \"#e51400\",\n\t\t},\n\t\t\"Foreground color for expression errors in the debug views (ie. the Variables or Watch view) and for error logs shown in the debug console.\",\n\t);\n\n\tconst debugViewExceptionLabelForeground = registerColor(\n\t\t\"debugView.exceptionLabelForeground\",\n\t\t{\n\t\t\tdark: foreground,\n\t\t\tlight: \"#FFF\",\n\t\t\thcDark: foreground,\n\t\t\thcLight: foreground,\n\t\t},\n\t\t\"Foreground color for a label shown in the CALL STACK view when the debugger breaks on an exception.\",\n\t);\n\tconst debugViewExceptionLabelBackground = registerColor(\n\t\t\"debugView.exceptionLabelBackground\",\n\t\t{\n\t\t\tdark: \"#6C2022\",\n\t\t\tlight: \"#A31515\",\n\t\t\thcDark: \"#6C2022\",\n\t\t\thcLight: \"#A31515\",\n\t\t},\n\t\t\"Background color for a label shown in the CALL STACK view when the debugger breaks on an exception.\",\n\t);\n\tconst debugViewStateLabelForeground = registerColor(\n\t\t\"debugView.stateLabelForeground\",\n\t\tforeground,\n\t\t\"Foreground color for a label in the CALL STACK view showing the current session's or thread's state.\",\n\t);\n\tconst debugViewStateLabelBackground = registerColor(\n\t\t\"debugView.stateLabelBackground\",\n\t\t\"#88888844\",\n\t\t\"Background color for a label in the CALL STACK view showing the current session's or thread's state.\",\n\t);\n\tconst debugViewValueChangedHighlight = registerColor(\n\t\t\"debugView.valueChangedHighlight\",\n\t\t\"#569CD6\",\n\t\t\"Color used to highlight value changes in the debug views (ie. in the Variables view).\",\n\t);\n\n\tconst debugConsoleInfoForeground = registerColor(\n\t\t\"debugConsole.infoForeground\",\n\t\t{\n\t\t\tdark: editorInfoForeground,\n\t\t\tlight: editorInfoForeground,\n\t\t\thcDark: foreground,\n\t\t\thcLight: foreground,\n\t\t},\n\t\t\"Foreground color for info messages in debug REPL console.\",\n\t);\n\tconst debugConsoleWarningForeground = registerColor(\n\t\t\"debugConsole.warningForeground\",\n\t\t{\n\t\t\tdark: editorWarningForeground,\n\t\t\tlight: editorWarningForeground,\n\t\t\thcDark: \"#008000\",\n\t\t\thcLight: editorWarningForeground,\n\t\t},\n\t\t\"Foreground color for warning messages in debug REPL console.\",\n\t);\n\tconst debugConsoleErrorForeground = registerColor(\n\t\t\"debugConsole.errorForeground\",\n\t\terrorForeground,\n\t\t\"Foreground color for error messages in debug REPL console.\",\n\t);\n\tconst debugConsoleSourceForeground = registerColor(\n\t\t\"debugConsole.sourceForeground\",\n\t\tforeground,\n\t\t\"Foreground color for source filenames in debug REPL console.\",\n\t);\n\tconst debugConsoleInputIconForeground = registerColor(\n\t\t\"debugConsoleInputIcon.foreground\",\n\t\tforeground,\n\t\t\"Foreground color for debug console input marker icon.\",\n\t);\n\n\tconst debugIconPauseForeground = registerColor(\n\t\t\"debugIcon.pauseForeground\",\n\t\t{\n\t\t\tdark: \"#75BEFF\",\n\t\t\tlight: \"#007ACC\",\n\t\t\thcDark: \"#75BEFF\",\n\t\t\thcLight: \"#007ACC\",\n\t\t},\n\t\tlocalize(\"debugIcon.pauseForeground\", \"Debug toolbar icon for pause.\"),\n\t);\n\n\tconst debugIconStopForeground = registerColor(\n\t\t\"debugIcon.stopForeground\",\n\t\t{\n\t\t\tdark: \"#F48771\",\n\t\t\tlight: \"#A1260D\",\n\t\t\thcDark: \"#F48771\",\n\t\t\thcLight: \"#A1260D\",\n\t\t},\n\t\tlocalize(\"debugIcon.stopForeground\", \"Debug toolbar icon for stop.\"),\n\t);\n\n\tconst debugIconDisconnectForeground = registerColor(\n\t\t\"debugIcon.disconnectForeground\",\n\t\t{\n\t\t\tdark: \"#F48771\",\n\t\t\tlight: \"#A1260D\",\n\t\t\thcDark: \"#F48771\",\n\t\t\thcLight: \"#A1260D\",\n\t\t},\n\t\tlocalize(\n\t\t\t\"debugIcon.disconnectForeground\",\n\t\t\t\"Debug toolbar icon for disconnect.\",\n\t\t),\n\t);\n\n\tconst debugIconRestartForeground = registerColor(\n\t\t\"debugIcon.restartForeground\",\n\t\t{\n\t\t\tdark: \"#89D185\",\n\t\t\tlight: \"#388A34\",\n\t\t\thcDark: \"#89D185\",\n\t\t\thcLight: \"#388A34\",\n\t\t},\n\t\tlocalize(\n\t\t\t\"debugIcon.restartForeground\",\n\t\t\t\"Debug toolbar icon for restart.\",\n\t\t),\n\t);\n\n\tconst debugIconStepOverForeground = registerColor(\n\t\t\"debugIcon.stepOverForeground\",\n\t\t{\n\t\t\tdark: \"#75BEFF\",\n\t\t\tlight: \"#007ACC\",\n\t\t\thcDark: \"#75BEFF\",\n\t\t\thcLight: \"#007ACC\",\n\t\t},\n\t\tlocalize(\n\t\t\t\"debugIcon.stepOverForeground\",\n\t\t\t\"Debug toolbar icon for step over.\",\n\t\t),\n\t);\n\n\tconst debugIconStepIntoForeground = registerColor(\n\t\t\"debugIcon.stepIntoForeground\",\n\t\t{\n\t\t\tdark: \"#75BEFF\",\n\t\t\tlight: \"#007ACC\",\n\t\t\thcDark: \"#75BEFF\",\n\t\t\thcLight: \"#007ACC\",\n\t\t},\n\t\tlocalize(\n\t\t\t\"debugIcon.stepIntoForeground\",\n\t\t\t\"Debug toolbar icon for step into.\",\n\t\t),\n\t);\n\n\tconst debugIconStepOutForeground = registerColor(\n\t\t\"debugIcon.stepOutForeground\",\n\t\t{\n\t\t\tdark: \"#75BEFF\",\n\t\t\tlight: \"#007ACC\",\n\t\t\thcDark: \"#75BEFF\",\n\t\t\thcLight: \"#007ACC\",\n\t\t},\n\t\tlocalize(\n\t\t\t\"debugIcon.stepOutForeground\",\n\t\t\t\"Debug toolbar icon for step over.\",\n\t\t),\n\t);\n\n\tconst debugIconContinueForeground = registerColor(\n\t\t\"debugIcon.continueForeground\",\n\t\t{\n\t\t\tdark: \"#75BEFF\",\n\t\t\tlight: \"#007ACC\",\n\t\t\thcDark: \"#75BEFF\",\n\t\t\thcLight: \"#007ACC\",\n\t\t},\n\t\tlocalize(\n\t\t\t\"debugIcon.continueForeground\",\n\t\t\t\"Debug toolbar icon for continue.\",\n\t\t),\n\t);\n\n\tconst debugIconStepBackForeground = registerColor(\n\t\t\"debugIcon.stepBackForeground\",\n\t\t{\n\t\t\tdark: \"#75BEFF\",\n\t\t\tlight: \"#007ACC\",\n\t\t\thcDark: \"#75BEFF\",\n\t\t\thcLight: \"#007ACC\",\n\t\t},\n\t\tlocalize(\n\t\t\t\"debugIcon.stepBackForeground\",\n\t\t\t\"Debug toolbar icon for step back.\",\n\t\t),\n\t);\n\n\tregisterThemingParticipant((theme, collector) => {\n\t\t// All these colours provide a default value so they will never be undefined, hence the `!`\n\t\tconst badgeBackgroundColor = theme.getColor(badgeBackground)!;\n\t\tconst badgeForegroundColor = theme.getColor(badgeForeground)!;\n\t\tconst listDeemphasizedForegroundColor = theme.getColor(\n\t\t\tlistDeemphasizedForeground,\n\t\t)!;\n\t\tconst debugViewExceptionLabelForegroundColor = theme.getColor(\n\t\t\tdebugViewExceptionLabelForeground,\n\t\t)!;\n\t\tconst debugViewExceptionLabelBackgroundColor = theme.getColor(\n\t\t\tdebugViewExceptionLabelBackground,\n\t\t)!;\n\t\tconst debugViewStateLabelForegroundColor = theme.getColor(\n\t\t\tdebugViewStateLabelForeground,\n\t\t)!;\n\t\tconst debugViewStateLabelBackgroundColor = theme.getColor(\n\t\t\tdebugViewStateLabelBackground,\n\t\t)!;\n\t\tconst debugViewValueChangedHighlightColor = theme.getColor(\n\t\t\tdebugViewValueChangedHighlight,\n\t\t)!;\n\t\tconst toolbarHoverBackgroundColor = theme.getColor(\n\t\t\ttoolbarHoverBackground,\n\t\t);\n\n\t\tcollector.addRule(`\n\t\t\t/* Text colour of the call stack row's filename */\n\t\t\t.debug-pane .debug-call-stack .monaco-list-row:not(.selected) .stack-frame > .file .file-name {\n\t\t\t\tcolor: ${listDeemphasizedForegroundColor}\n\t\t\t}\n\n\t\t\t/* Line & column number \"badge\" for selected call stack row */\n\t\t\t.debug-pane .monaco-list-row.selected .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor};\n\t\t\t\tcolor: ${badgeForegroundColor};\n\t\t\t}\n\n\t\t\t/* Line & column number \"badge\" for unselected call stack row (basically all other rows) */\n\t\t\t.debug-pane .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor.transparent(0.6)};\n\t\t\t\tcolor: ${badgeForegroundColor.transparent(0.6)};\n\t\t\t}\n\n\t\t\t/* State \"badge\" displaying the active session's current state.\n\t\t\t* Only visible when there are more active debug sessions/threads running.\n\t\t\t*/\n\t\t\t.debug-pane .debug-call-stack .thread > .state.label,\n\t\t\t.debug-pane .debug-call-stack .session > .state.label {\n\t\t\t\tbackground-color: ${debugViewStateLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewStateLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* State \"badge\" displaying the active session's current state.\n\t\t\t* Only visible when there are more active debug sessions/threads running\n\t\t\t* and thread paused due to a thrown exception.\n\t\t\t*/\n\t\t\t.debug-pane .debug-call-stack .thread > .state.label.exception,\n\t\t\t.debug-pane .debug-call-stack .session > .state.label.exception {\n\t\t\t\tbackground-color: ${debugViewExceptionLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewExceptionLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* Info \"badge\" shown when the debugger pauses due to a thrown exception. */\n\t\t\t.debug-pane .call-stack-state-message > .label.exception {\n\t\t\t\tbackground-color: ${debugViewExceptionLabelBackgroundColor};\n\t\t\t\tcolor: ${debugViewExceptionLabelForegroundColor};\n\t\t\t}\n\n\t\t\t/* Animation of changed values in Debug viewlet */\n\t\t\t@keyframes debugViewletValueChanged {\n\t\t\t\t0%   { background-color: ${debugViewValueChangedHighlightColor.transparent(0)} }\n\t\t\t\t5%   { background-color: ${debugViewValueChangedHighlightColor.transparent(0.9)} }\n\t\t\t\t100% { background-color: ${debugViewValueChangedHighlightColor.transparent(0.3)} }\n\t\t\t}\n\n\t\t\t.debug-pane .monaco-list-row .expression .value.changed {\n\t\t\t\tbackground-color: ${debugViewValueChangedHighlightColor.transparent(0.3)};\n\t\t\t\tanimation-name: debugViewletValueChanged;\n\t\t\t\tanimation-duration: 1s;\n\t\t\t\tanimation-fill-mode: forwards;\n\t\t\t}\n\n\t\t\t.monaco-list-row .expression .lazy-button:hover {\n\t\t\t\tbackground-color: ${toolbarHoverBackgroundColor}\n\t\t\t}\n\t\t`);\n\n\t\tconst contrastBorderColor = theme.getColor(contrastBorder);\n\n\t\tif (contrastBorderColor) {\n\t\t\tcollector.addRule(`\n\t\t\t.debug-pane .line-number {\n\t\t\t\tborder: 1px solid ${contrastBorderColor};\n\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\t// Use fully-opaque colors for line-number badges\n\t\tif (isHighContrast(theme.type)) {\n\t\t\tcollector.addRule(`\n\t\t\t.debug-pane .line-number {\n\t\t\t\tbackground-color: ${badgeBackgroundColor};\n\t\t\t\tcolor: ${badgeForegroundColor};\n\t\t\t}`);\n\t\t}\n\n\t\tconst tokenNameColor = theme.getColor(debugTokenExpressionName)!;\n\t\tconst tokenTypeColor = theme.getColor(debugTokenExpressionType)!;\n\t\tconst tokenValueColor = theme.getColor(debugTokenExpressionValue)!;\n\t\tconst tokenStringColor = theme.getColor(debugTokenExpressionString)!;\n\t\tconst tokenBooleanColor = theme.getColor(debugTokenExpressionBoolean)!;\n\t\tconst tokenErrorColor = theme.getColor(debugTokenExpressionError)!;\n\t\tconst tokenNumberColor = theme.getColor(debugTokenExpressionNumber)!;\n\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .monaco-list-row .expression .name {\n\t\t\t\tcolor: ${tokenNameColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .type {\n\t\t\t\tcolor: ${tokenTypeColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value,\n\t\t\t.monaco-workbench .debug-hover-widget .value {\n\t\t\t\tcolor: ${tokenValueColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.string,\n\t\t\t.monaco-workbench .debug-hover-widget .value.string {\n\t\t\t\tcolor: ${tokenStringColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.boolean,\n\t\t\t.monaco-workbench .debug-hover-widget .value.boolean {\n\t\t\t\tcolor: ${tokenBooleanColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .error,\n\t\t\t.monaco-workbench .debug-hover-widget .error,\n\t\t\t.monaco-workbench .debug-pane .debug-variables .scope .error {\n\t\t\t\tcolor: ${tokenErrorColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .monaco-list-row .expression .value.number,\n\t\t\t.monaco-workbench .debug-hover-widget .value.number {\n\t\t\t\tcolor: ${tokenNumberColor};\n\t\t\t}\n\t\t`);\n\n\t\tconst debugConsoleInputBorderColor =\n\t\t\ttheme.getColor(inputBorder) || Color.fromHex(\"#80808060\");\n\t\tconst debugConsoleInfoForegroundColor = theme.getColor(\n\t\t\tdebugConsoleInfoForeground,\n\t\t)!;\n\t\tconst debugConsoleWarningForegroundColor = theme.getColor(\n\t\t\tdebugConsoleWarningForeground,\n\t\t)!;\n\t\tconst debugConsoleErrorForegroundColor = theme.getColor(\n\t\t\tdebugConsoleErrorForeground,\n\t\t)!;\n\t\tconst debugConsoleSourceForegroundColor = theme.getColor(\n\t\t\tdebugConsoleSourceForeground,\n\t\t)!;\n\t\tconst debugConsoleInputIconForegroundColor = theme.getColor(\n\t\t\tdebugConsoleInputIconForeground,\n\t\t)!;\n\n\t\tcollector.addRule(`\n\t\t\t.repl .repl-input-wrapper {\n\t\t\t\tborder-top: 1px solid ${debugConsoleInputBorderColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.info {\n\t\t\t\tcolor: ${debugConsoleInfoForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.warn {\n\t\t\t\tcolor: ${debugConsoleWarningForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .value.error {\n\t\t\t\tcolor: ${debugConsoleErrorForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .output .expression .source {\n\t\t\t\tcolor: ${debugConsoleSourceForegroundColor};\n\t\t\t}\n\n\t\t\t.monaco-workbench .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\tcolor: ${debugConsoleInputIconForegroundColor};\n\t\t\t}\n\t\t`);\n\n\t\tif (!theme.defines(debugConsoleInputIconForeground)) {\n\t\t\tcollector.addRule(`\n\t\t\t\t.monaco-workbench.vs .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 0.25;\n\t\t\t\t}\n\n\t\t\t\t.monaco-workbench.vs-dark .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 0.4;\n\t\t\t\t}\n\n\t\t\t\t.monaco-workbench.hc-black .repl .repl-tree .monaco-tl-contents .arrow,\n\t\t\t\t.monaco-workbench.hc-light .repl .repl-tree .monaco-tl-contents .arrow {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t`);\n\t\t}\n\n\t\tconst debugIconStartColor = theme.getColor(debugIconStartForeground);\n\t\tif (debugIconStartColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStart)} { color: ${debugIconStartColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconPauseColor = theme.getColor(debugIconPauseForeground);\n\t\tif (debugIconPauseColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugPause)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugPause)} { color: ${debugIconPauseColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconStopColor = theme.getColor(debugIconStopForeground);\n\t\tif (debugIconStopColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStop)},.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStop)} { color: ${debugIconStopColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconDisconnectColor = theme.getColor(\n\t\t\tdebugIconDisconnectForeground,\n\t\t);\n\t\tif (debugIconDisconnectColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugDisconnect)},.monaco-workbench .debug-view-content ${ThemeIcon.asCSSSelector(icons.debugDisconnect)}, .monaco-workbench .debug-toolbar ${ThemeIcon.asCSSSelector(icons.debugDisconnect)}, .monaco-workbench .command-center-center ${ThemeIcon.asCSSSelector(icons.debugDisconnect)} { color: ${debugIconDisconnectColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconRestartColor = theme.getColor(\n\t\t\tdebugIconRestartForeground,\n\t\t);\n\t\tif (debugIconRestartColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugRestart)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugRestartFrame)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugRestart)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugRestartFrame)} { color: ${debugIconRestartColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconStepOverColor = theme.getColor(\n\t\t\tdebugIconStepOverForeground,\n\t\t);\n\t\tif (debugIconStepOverColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepOver)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepOver)} { color: ${debugIconStepOverColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconStepIntoColor = theme.getColor(\n\t\t\tdebugIconStepIntoForeground,\n\t\t);\n\t\tif (debugIconStepIntoColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepInto)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepInto)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepInto)} { color: ${debugIconStepIntoColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconStepOutColor = theme.getColor(\n\t\t\tdebugIconStepOutForeground,\n\t\t);\n\t\tif (debugIconStepOutColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepOut)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepOut)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepOut)} { color: ${debugIconStepOutColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconContinueColor = theme.getColor(\n\t\t\tdebugIconContinueForeground,\n\t\t);\n\t\tif (debugIconContinueColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugContinue)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugContinue)}, .monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugReverseContinue)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugReverseContinue)} { color: ${debugIconContinueColor}; }`,\n\t\t\t);\n\t\t}\n\n\t\tconst debugIconStepBackColor = theme.getColor(\n\t\t\tdebugIconStepBackForeground,\n\t\t);\n\t\tif (debugIconStepBackColor) {\n\t\t\tcollector.addRule(\n\t\t\t\t`.monaco-workbench .part > .title > .title-actions .action-label${ThemeIcon.asCSSSelector(icons.debugStepBack)}, .monaco-workbench ${ThemeIcon.asCSSSelector(icons.debugStepBack)} { color: ${debugIconStepBackColor}; }`,\n\t\t\t);\n\t\t}\n\t});\n}\n"],
  "mappings": "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",
  "names": []
}
