{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/linkDetector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindow } from '../../../../base/browser/dom.js';\nimport { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport * as osPath from '../../../../base/common/path.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { ITunnelService } from '../../../../platform/tunnel/common/tunnel.js';\nimport { IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { IDebugSession } from '../common/debug.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IPathService } from '../../../services/path/common/pathService.js';\n\nconst CONTROL_CODES = '\\\\u0000-\\\\u0020\\\\u007f-\\\\u009f';\nconst WEB_LINK_REGEX = new RegExp('(?:[a-zA-Z][a-zA-Z0-9+.-]{2,}:\\\\/\\\\/|data:|www\\\\.)[^\\\\s' + CONTROL_CODES + '\"]{2,}[^\\\\s' + CONTROL_CODES + '\"\\')}\\\\],:;.!?]', 'ug');\n\nconst WIN_ABSOLUTE_PATH = /(?:[a-zA-Z]:(?:(?:\\\\|\\/)[\\w\\.-]*)+)/;\nconst WIN_RELATIVE_PATH = /(?:(?:\\~|\\.)(?:(?:\\\\|\\/)[\\w\\.-]*)+)/;\nconst WIN_PATH = new RegExp(`(${WIN_ABSOLUTE_PATH.source}|${WIN_RELATIVE_PATH.source})`);\nconst POSIX_PATH = /((?:\\~|\\.)?(?:\\/[\\w\\.-]*)+)/;\nconst LINE_COLUMN = /(?:\\:([\\d]+))?(?:\\:([\\d]+))?/;\nconst PATH_LINK_REGEX = new RegExp(`${platform.isWindows ? WIN_PATH.source : POSIX_PATH.source}${LINE_COLUMN.source}`, 'g');\nconst LINE_COLUMN_REGEX = /:([\\d]+)(?::([\\d]+))?$/;\n\nconst MAX_LENGTH = 2000;\n\ntype LinkKind = 'web' | 'path' | 'text';\ntype LinkPart = {\n\tkind: LinkKind;\n\tvalue: string;\n\tcaptures: string[];\n};\n\nexport const enum DebugLinkHoverBehavior {\n\t/** A nice workbench hover */\n\tRich,\n\t/**\n\t * Basic browser hover\n\t * @deprecated Consumers should adopt `rich` by propagating disposables appropriately\n\t */\n\tBasic,\n\t/** No hover */\n\tNone\n}\n\n/** Store implies HoverBehavior=rich */\nexport type DebugLinkHoverBehaviorTypeData = { type: DebugLinkHoverBehavior.None | DebugLinkHoverBehavior.Basic }\n\t| { type: DebugLinkHoverBehavior.Rich; store: DisposableStore };\n\nexport interface ILinkDetector {\n\tlinkify(text: string, splitLines?: boolean, workspaceFolder?: IWorkspaceFolder, includeFulltext?: boolean, hoverBehavior?: DebugLinkHoverBehaviorTypeData): HTMLElement;\n\tlinkifyLocation(text: string, locationReference: number, session: IDebugSession, hoverBehavior?: DebugLinkHoverBehaviorTypeData): HTMLElement;\n}\n\nexport class LinkDetector implements ILinkDetector {\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t) {\n\t\t// noop\n\t}\n\n\t/**\n\t * Matches and handles web urls, absolute and relative file links in the string provided.\n\t * Returns <span/> element that wraps the processed string, where matched links are replaced by <a/>.\n\t * 'onclick' event is attached to all anchored links that opens them in the editor.\n\t * When splitLines is true, each line of the text, even if it contains no links, is wrapped in a <span>\n\t * and added as a child of the returned <span>.\n\t * If a `hoverBehavior` is passed, hovers may be added using the workbench hover service.\n\t * This should be preferred for new code where hovers are desirable.\n\t */\n\tlinkify(text: string, splitLines?: boolean, workspaceFolder?: IWorkspaceFolder, includeFulltext?: boolean, hoverBehavior?: DebugLinkHoverBehaviorTypeData): HTMLElement {\n\t\treturn this._linkify(text, splitLines, workspaceFolder, includeFulltext, hoverBehavior);\n\t}\n\n\tprivate _linkify(text: string, splitLines?: boolean, workspaceFolder?: IWorkspaceFolder, includeFulltext?: boolean, hoverBehavior?: DebugLinkHoverBehaviorTypeData, defaultRef?: { locationReference: number; session: IDebugSession }): HTMLElement {\n\t\tif (splitLines) {\n\t\t\tconst lines = text.split('\\n');\n\t\t\tfor (let i = 0; i < lines.length - 1; i++) {\n\t\t\t\tlines[i] = lines[i] + '\\n';\n\t\t\t}\n\t\t\tif (!lines[lines.length - 1]) {\n\t\t\t\t// Remove the last element ('') that split added.\n\t\t\t\tlines.pop();\n\t\t\t}\n\t\t\tconst elements = lines.map(line => this._linkify(line, false, workspaceFolder, includeFulltext, hoverBehavior, defaultRef));\n\t\t\tif (elements.length === 1) {\n\t\t\t\t// Do not wrap single line with extra span.\n\t\t\t\treturn elements[0];\n\t\t\t}\n\t\t\tconst container = document.createElement('span');\n\t\t\telements.forEach(e => container.appendChild(e));\n\t\t\treturn container;\n\t\t}\n\n\t\tconst container = document.createElement('span');\n\t\tfor (const part of this.detectLinks(text)) {\n\t\t\ttry {\n\t\t\t\tswitch (part.kind) {\n\t\t\t\t\tcase 'text':\n\t\t\t\t\t\tcontainer.appendChild(defaultRef ? this.linkifyLocation(part.value, defaultRef.locationReference, defaultRef.session, hoverBehavior) : document.createTextNode(part.value));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'web':\n\t\t\t\t\t\tcontainer.appendChild(this.createWebLink(includeFulltext ? text : undefined, part.value, hoverBehavior));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'path': {\n\t\t\t\t\t\tconst path = part.captures[0];\n\t\t\t\t\t\tconst lineNumber = part.captures[1] ? Number(part.captures[1]) : 0;\n\t\t\t\t\t\tconst columnNumber = part.captures[2] ? Number(part.captures[2]) : 0;\n\t\t\t\t\t\tcontainer.appendChild(this.createPathLink(includeFulltext ? text : undefined, part.value, path, lineNumber, columnNumber, workspaceFolder, hoverBehavior));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tcontainer.appendChild(document.createTextNode(part.value));\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\n\t/**\n\t * Linkifies a location reference.\n\t */\n\tlinkifyLocation(text: string, locationReference: number, session: IDebugSession, hoverBehavior?: DebugLinkHoverBehaviorTypeData) {\n\t\tconst link = this.createLink(text);\n\t\tthis.decorateLink(link, undefined, text, hoverBehavior, async (preserveFocus: boolean) => {\n\t\t\tconst location = await session.resolveLocationReference(locationReference);\n\t\t\tawait location.source.openInEditor(this.editorService, {\n\t\t\t\tstartLineNumber: location.line,\n\t\t\t\tstartColumn: location.column,\n\t\t\t\tendLineNumber: location.endLine ?? location.line,\n\t\t\t\tendColumn: location.endColumn ?? location.column,\n\t\t\t}, preserveFocus);\n\t\t});\n\n\t\treturn link;\n\t}\n\n\t/**\n\t * Makes an {@link ILinkDetector} that links everything in the output to the\n\t * reference if they don't have other explicit links.\n\t */\n\tmakeReferencedLinkDetector(locationReference: number, session: IDebugSession): ILinkDetector {\n\t\treturn {\n\t\t\tlinkify: (text, splitLines, workspaceFolder, includeFulltext, hoverBehavior) =>\n\t\t\t\tthis._linkify(text, splitLines, workspaceFolder, includeFulltext, hoverBehavior, { locationReference, session }),\n\t\t\tlinkifyLocation: this.linkifyLocation.bind(this),\n\t\t};\n\t}\n\n\tprivate createWebLink(fulltext: string | undefined, url: string, hoverBehavior?: DebugLinkHoverBehaviorTypeData): Node {\n\t\tconst link = this.createLink(url);\n\n\t\tlet uri = URI.parse(url);\n\t\t// if the URI ends with something like `foo.js:12:3`, parse\n\t\t// that into a fragment to reveal that location (#150702)\n\t\tconst lineCol = LINE_COLUMN_REGEX.exec(uri.path);\n\t\tif (lineCol) {\n\t\t\turi = uri.with({\n\t\t\t\tpath: uri.path.slice(0, lineCol.index),\n\t\t\t\tfragment: `L${lineCol[0].slice(1)}`\n\t\t\t});\n\t\t}\n\n\t\tthis.decorateLink(link, uri, fulltext, hoverBehavior, async () => {\n\n\t\t\tif (uri.scheme === Schemas.file) {\n\t\t\t\t// Just using fsPath here is unsafe: https://github.com/microsoft/vscode/issues/109076\n\t\t\t\tconst fsPath = uri.fsPath;\n\t\t\t\tconst path = await this.pathService.path;\n\t\t\t\tconst fileUrl = osPath.normalize(((path.sep === osPath.posix.sep) && platform.isWindows) ? fsPath.replace(/\\\\/g, osPath.posix.sep) : fsPath);\n\n\t\t\t\tconst fileUri = URI.parse(fileUrl);\n\t\t\t\tconst exists = await this.fileService.exists(fileUri);\n\t\t\t\tif (!exists) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.editorService.openEditor({\n\t\t\t\t\tresource: fileUri,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tselection: lineCol ? { startLineNumber: +lineCol[1], startColumn: +lineCol[2] } : undefined,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.openerService.open(url, { allowTunneling: (!!this.environmentService.remoteAuthority && this.configurationService.getValue('remote.forwardOnOpen')) });\n\t\t});\n\n\t\treturn link;\n\t}\n\n\tprivate createPathLink(fulltext: string | undefined, text: string, path: string, lineNumber: number, columnNumber: number, workspaceFolder: IWorkspaceFolder | undefined, hoverBehavior?: DebugLinkHoverBehaviorTypeData): Node {\n\t\tif (path[0] === '/' && path[1] === '/') {\n\t\t\t// Most likely a url part which did not match, for example ftp://path.\n\t\t\treturn document.createTextNode(text);\n\t\t}\n\n\t\tconst options = { selection: { startLineNumber: lineNumber, startColumn: columnNumber } };\n\t\tif (path[0] === '.') {\n\t\t\tif (!workspaceFolder) {\n\t\t\t\treturn document.createTextNode(text);\n\t\t\t}\n\t\t\tconst uri = workspaceFolder.toResource(path);\n\t\t\tconst link = this.createLink(text);\n\t\t\tthis.decorateLink(link, uri, fulltext, hoverBehavior, (preserveFocus: boolean) => this.editorService.openEditor({ resource: uri, options: { ...options, preserveFocus } }));\n\t\t\treturn link;\n\t\t}\n\n\t\tif (path[0] === '~') {\n\t\t\tconst userHome = this.pathService.resolvedUserHome;\n\t\t\tif (userHome) {\n\t\t\t\tpath = osPath.join(userHome.fsPath, path.substring(1));\n\t\t\t}\n\t\t}\n\n\t\tconst link = this.createLink(text);\n\t\tlink.tabIndex = 0;\n\t\tconst uri = URI.file(osPath.normalize(path));\n\t\tthis.fileService.stat(uri).then(stat => {\n\t\t\tif (stat.isDirectory) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.decorateLink(link, uri, fulltext, hoverBehavior, (preserveFocus: boolean) => this.editorService.openEditor({ resource: uri, options: { ...options, preserveFocus } }));\n\t\t}).catch(() => {\n\t\t\t// If the uri can not be resolved we should not spam the console with error, remain quite #86587\n\t\t});\n\t\treturn link;\n\t}\n\n\tprivate createLink(text: string): HTMLElement {\n\t\tconst link = document.createElement('a');\n\t\tlink.textContent = text;\n\t\treturn link;\n\t}\n\n\tprivate decorateLink(link: HTMLElement, uri: URI | undefined, fulltext: string | undefined, hoverBehavior: DebugLinkHoverBehaviorTypeData | undefined, onClick: (preserveFocus: boolean) => void) {\n\t\tlink.classList.add('link');\n\t\tconst followLink = uri && this.tunnelService.canTunnel(uri) ? localize('followForwardedLink', \"follow link using forwarded port\") : localize('followLink', \"follow link\");\n\t\tconst title = link.ariaLabel = fulltext\n\t\t\t? (platform.isMacintosh ? localize('fileLinkWithPathMac', \"Cmd + click to {0}\\n{1}\", followLink, fulltext) : localize('fileLinkWithPath', \"Ctrl + click to {0}\\n{1}\", followLink, fulltext))\n\t\t\t: (platform.isMacintosh ? localize('fileLinkMac', \"Cmd + click to {0}\", followLink) : localize('fileLink', \"Ctrl + click to {0}\", followLink));\n\n\t\tif (hoverBehavior?.type === DebugLinkHoverBehavior.Rich) {\n\t\t\thoverBehavior.store.add(this.hoverService.setupManagedHover(getDefaultHoverDelegate('element'), link, title));\n\t\t} else if (hoverBehavior?.type !== DebugLinkHoverBehavior.None) {\n\t\t\tlink.title = title;\n\t\t}\n\n\t\tlink.onmousemove = (event) => { link.classList.toggle('pointer', platform.isMacintosh ? event.metaKey : event.ctrlKey); };\n\t\tlink.onmouseleave = () => link.classList.remove('pointer');\n\t\tlink.onclick = (event) => {\n\t\t\tconst selection = getWindow(link).getSelection();\n\t\t\tif (!selection || selection.type === 'Range') {\n\t\t\t\treturn; // do not navigate when user is selecting\n\t\t\t}\n\t\t\tif (!(platform.isMacintosh ? event.metaKey : event.ctrlKey)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tonClick(false);\n\t\t};\n\t\tlink.onkeydown = e => {\n\t\t\tconst event = new StandardKeyboardEvent(e);\n\t\t\tif (event.keyCode === KeyCode.Enter || event.keyCode === KeyCode.Space) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tonClick(event.keyCode === KeyCode.Space);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate detectLinks(text: string): LinkPart[] {\n\t\tif (text.length > MAX_LENGTH) {\n\t\t\treturn [{ kind: 'text', value: text, captures: [] }];\n\t\t}\n\n\t\tconst regexes: RegExp[] = [WEB_LINK_REGEX, PATH_LINK_REGEX];\n\t\tconst kinds: LinkKind[] = ['web', 'path'];\n\t\tconst result: LinkPart[] = [];\n\n\t\tconst splitOne = (text: string, regexIndex: number) => {\n\t\t\tif (regexIndex >= regexes.length) {\n\t\t\t\tresult.push({ value: text, kind: 'text', captures: [] });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst regex = regexes[regexIndex];\n\t\t\tlet currentIndex = 0;\n\t\t\tlet match;\n\t\t\tregex.lastIndex = 0;\n\t\t\twhile ((match = regex.exec(text)) !== null) {\n\t\t\t\tconst stringBeforeMatch = text.substring(currentIndex, match.index);\n\t\t\t\tif (stringBeforeMatch) {\n\t\t\t\t\tsplitOne(stringBeforeMatch, regexIndex + 1);\n\t\t\t\t}\n\t\t\t\tconst value = match[0];\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tkind: kinds[regexIndex],\n\t\t\t\t\tcaptures: match.slice(1)\n\t\t\t\t});\n\t\t\t\tcurrentIndex = match.index + value.length;\n\t\t\t}\n\t\t\tconst stringAfterMatches = text.substring(currentIndex);\n\t\t\tif (stringAfterMatches) {\n\t\t\t\tsplitOne(stringAfterMatches, regexIndex + 1);\n\t\t\t}\n\t\t};\n\n\t\tsplitOne(text, 0);\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["DebugLinkHoverBehavior", "container", "uri", "link", "text"]
}
