{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport type { IChannel } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport {\n\tIExtensionHostDebugService,\n\ttype IOpenExtensionWindowResult,\n} from \"../../../../platform/debug/common/extensionHostDebug.js\";\nimport {\n\tExtensionHostDebugBroadcastChannel,\n\tExtensionHostDebugChannelClient,\n} from \"../../../../platform/debug/common/extensionHostDebugIpc.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tisFolderToOpen,\n\tisWorkspaceToOpen,\n} from \"../../../../platform/window/common/window.js\";\nimport {\n\tIWorkspaceContextService,\n\thasWorkspaceFileExtension,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n\ttoWorkspaceIdentifier,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport type {\n\tIWorkspace,\n\tIWorkspaceProvider,\n} from \"../../../browser/web.api.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../../services/environment/browser/environmentService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { IRemoteAgentService } from \"../../../services/remote/common/remoteAgentService.js\";\n\nclass BrowserExtensionHostDebugService\n\textends ExtensionHostDebugChannelClient\n\timplements IExtensionHostDebugService\n{\n\tprivate static readonly LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY =\n\t\t\"debug.lastExtensionDevelopmentWorkspace\";\n\n\tprivate workspaceProvider: IWorkspaceProvider;\n\n\tprivate readonly storageService: IStorageService;\n\tprivate readonly fileService: IFileService;\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IFileService fileService: IFileService,\n\t) {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tlet channel: IChannel;\n\t\tif (connection) {\n\t\t\tchannel = connection.getChannel(\n\t\t\t\tExtensionHostDebugBroadcastChannel.ChannelName,\n\t\t\t);\n\t\t} else {\n\t\t\t// Extension host debugging not supported in serverless.\n\t\t\tchannel = {\n\t\t\t\tcall: async () => undefined,\n\t\t\t\tlisten: () => Event.None,\n\t\t\t} as any;\n\t\t}\n\n\t\tsuper(channel);\n\n\t\tthis.storageService = storageService;\n\t\tthis.fileService = fileService;\n\n\t\tif (\n\t\t\tenvironmentService.options &&\n\t\t\tenvironmentService.options.workspaceProvider\n\t\t) {\n\t\t\tthis.workspaceProvider =\n\t\t\t\tenvironmentService.options.workspaceProvider;\n\t\t} else {\n\t\t\tthis.workspaceProvider = {\n\t\t\t\topen: async () => true,\n\t\t\t\tworkspace: undefined,\n\t\t\t\ttrusted: undefined,\n\t\t\t};\n\t\t\tlogService.warn(\n\t\t\t\t\"Extension Host Debugging not available due to missing workspace provider.\",\n\t\t\t);\n\t\t}\n\n\t\t// Reload window on reload request\n\t\tthis._register(\n\t\t\tthis.onReload((event) => {\n\t\t\t\tif (\n\t\t\t\t\tenvironmentService.isExtensionDevelopment &&\n\t\t\t\t\tenvironmentService.debugExtensionHost.debugId ===\n\t\t\t\t\t\tevent.sessionId\n\t\t\t\t) {\n\t\t\t\t\thostService.reload();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Close window on close request\n\t\tthis._register(\n\t\t\tthis.onClose((event) => {\n\t\t\t\tif (\n\t\t\t\t\tenvironmentService.isExtensionDevelopment &&\n\t\t\t\t\tenvironmentService.debugExtensionHost.debugId ===\n\t\t\t\t\t\tevent.sessionId\n\t\t\t\t) {\n\t\t\t\t\thostService.close();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Remember workspace as last used for extension development\n\t\t// (unless this is API tests) to restore for a future session\n\t\tif (\n\t\t\tenvironmentService.isExtensionDevelopment &&\n\t\t\t!environmentService.extensionTestsLocationURI\n\t\t) {\n\t\t\tconst workspaceId = toWorkspaceIdentifier(\n\t\t\t\tcontextService.getWorkspace(),\n\t\t\t);\n\t\t\tif (\n\t\t\t\tisSingleFolderWorkspaceIdentifier(workspaceId) ||\n\t\t\t\tisWorkspaceIdentifier(workspaceId)\n\t\t\t) {\n\t\t\t\tconst serializedWorkspace = isSingleFolderWorkspaceIdentifier(\n\t\t\t\t\tworkspaceId,\n\t\t\t\t)\n\t\t\t\t\t? { folderUri: workspaceId.uri.toJSON() }\n\t\t\t\t\t: { workspaceUri: workspaceId.configPath.toJSON() };\n\t\t\t\tstorageService.store(\n\t\t\t\t\tBrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY,\n\t\t\t\t\tJSON.stringify(serializedWorkspace),\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tstorageService.remove(\n\t\t\t\t\tBrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY,\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\toverride async openExtensionDevelopmentHostWindow(\n\t\targs: string[],\n\t\t_debugRenderer: boolean,\n\t): Promise<IOpenExtensionWindowResult> {\n\t\t// Add environment parameters required for debug to work\n\t\tconst environment = new Map<string, string>();\n\n\t\tconst fileUriArg = this.findArgument(\"file-uri\", args);\n\t\tif (fileUriArg && !hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\tenvironment.set(\"openFile\", fileUriArg);\n\t\t}\n\n\t\tconst copyArgs = [\n\t\t\t\"extensionDevelopmentPath\",\n\t\t\t\"extensionTestsPath\",\n\t\t\t\"extensionEnvironment\",\n\t\t\t\"debugId\",\n\t\t\t\"inspect-brk-extensions\",\n\t\t\t\"inspect-extensions\",\n\t\t];\n\n\t\tfor (const argName of copyArgs) {\n\t\t\tconst value = this.findArgument(argName, args);\n\t\t\tif (value) {\n\t\t\t\tenvironment.set(argName, value);\n\t\t\t}\n\t\t}\n\n\t\t// Find out which workspace to open debug window on\n\t\tlet debugWorkspace: IWorkspace;\n\t\tconst folderUriArg = this.findArgument(\"folder-uri\", args);\n\t\tif (folderUriArg) {\n\t\t\tdebugWorkspace = { folderUri: URI.parse(folderUriArg) };\n\t\t} else {\n\t\t\tconst fileUriArg = this.findArgument(\"file-uri\", args);\n\t\t\tif (fileUriArg && hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\t\tdebugWorkspace = { workspaceUri: URI.parse(fileUriArg) };\n\t\t\t}\n\t\t}\n\n\t\tconst extensionTestsPath = this.findArgument(\n\t\t\t\"extensionTestsPath\",\n\t\t\targs,\n\t\t);\n\t\tif (!debugWorkspace && !extensionTestsPath) {\n\t\t\tconst lastExtensionDevelopmentWorkspace = this.storageService.get(\n\t\t\t\tBrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t);\n\t\t\tif (lastExtensionDevelopmentWorkspace) {\n\t\t\t\ttry {\n\t\t\t\t\tconst serializedWorkspace: {\n\t\t\t\t\t\tworkspaceUri?: UriComponents;\n\t\t\t\t\t\tfolderUri?: UriComponents;\n\t\t\t\t\t} = JSON.parse(lastExtensionDevelopmentWorkspace);\n\t\t\t\t\tif (serializedWorkspace.workspaceUri) {\n\t\t\t\t\t\tdebugWorkspace = {\n\t\t\t\t\t\t\tworkspaceUri: URI.revive(\n\t\t\t\t\t\t\t\tserializedWorkspace.workspaceUri,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (serializedWorkspace.folderUri) {\n\t\t\t\t\t\tdebugWorkspace = {\n\t\t\t\t\t\t\tfolderUri: URI.revive(\n\t\t\t\t\t\t\t\tserializedWorkspace.folderUri,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate workspace exists\n\t\tif (debugWorkspace) {\n\t\t\tconst debugWorkspaceResource = isFolderToOpen(debugWorkspace)\n\t\t\t\t? debugWorkspace.folderUri\n\t\t\t\t: isWorkspaceToOpen(debugWorkspace)\n\t\t\t\t\t? debugWorkspace.workspaceUri\n\t\t\t\t\t: undefined;\n\t\t\tif (debugWorkspaceResource) {\n\t\t\t\tconst workspaceExists = await this.fileService.exists(\n\t\t\t\t\tdebugWorkspaceResource,\n\t\t\t\t);\n\t\t\t\tif (!workspaceExists) {\n\t\t\t\t\tdebugWorkspace = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Open debug window as new window. Pass arguments over.\n\t\tconst success = await this.workspaceProvider.open(debugWorkspace, {\n\t\t\treuse: false, // debugging always requires a new window\n\t\t\tpayload: Array.from(environment.entries()), // mandatory properties to enable debugging\n\t\t});\n\n\t\treturn { success };\n\t}\n\n\tprivate findArgument(key: string, args: string[]): string | undefined {\n\t\tfor (const a of args) {\n\t\t\tconst k = `--${key}=`;\n\t\t\tif (a.indexOf(k) === 0) {\n\t\t\t\treturn a.substring(k.length);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nregisterSingleton(\n\tIExtensionHostDebugService,\n\tBrowserExtensionHostDebugService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["fileUriArg"]
}
