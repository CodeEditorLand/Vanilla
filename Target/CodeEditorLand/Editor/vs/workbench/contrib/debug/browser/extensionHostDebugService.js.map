{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { IChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { IExtensionHostDebugService, IOpenExtensionWindowResult } from '../../../../platform/debug/common/extensionHostDebug.js';\nimport { ExtensionHostDebugBroadcastChannel, ExtensionHostDebugChannelClient } from '../../../../platform/debug/common/extensionHostDebugIpc.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { isFolderToOpen, isWorkspaceToOpen } from '../../../../platform/window/common/window.js';\nimport { IWorkspaceContextService, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, toWorkspaceIdentifier, hasWorkspaceFileExtension } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkspace, IWorkspaceProvider } from '../../../browser/web.api.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\n\nclass BrowserExtensionHostDebugService extends ExtensionHostDebugChannelClient implements IExtensionHostDebugService {\n\n\tprivate static readonly LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY = 'debug.lastExtensionDevelopmentWorkspace';\n\n\tprivate workspaceProvider: IWorkspaceProvider;\n\n\tprivate readonly storageService: IStorageService;\n\tprivate readonly fileService: IFileService;\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tlet channel: IChannel;\n\t\tif (connection) {\n\t\t\tchannel = connection.getChannel(ExtensionHostDebugBroadcastChannel.ChannelName);\n\t\t} else {\n\t\t\t// Extension host debugging not supported in serverless.\n\t\t\tchannel = { call: async () => undefined, listen: () => Event.None } as any;\n\t\t}\n\n\t\tsuper(channel);\n\n\t\tthis.storageService = storageService;\n\t\tthis.fileService = fileService;\n\n\t\tif (environmentService.options && environmentService.options.workspaceProvider) {\n\t\t\tthis.workspaceProvider = environmentService.options.workspaceProvider;\n\t\t} else {\n\t\t\tthis.workspaceProvider = { open: async () => true, workspace: undefined, trusted: undefined };\n\t\t\tlogService.warn('Extension Host Debugging not available due to missing workspace provider.');\n\t\t}\n\n\t\t// Reload window on reload request\n\t\tthis._register(this.onReload(event => {\n\t\t\tif (environmentService.isExtensionDevelopment && environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\thostService.reload();\n\t\t\t}\n\t\t}));\n\n\t\t// Close window on close request\n\t\tthis._register(this.onClose(event => {\n\t\t\tif (environmentService.isExtensionDevelopment && environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\thostService.close();\n\t\t\t}\n\t\t}));\n\n\t\t// Remember workspace as last used for extension development\n\t\t// (unless this is API tests) to restore for a future session\n\t\tif (environmentService.isExtensionDevelopment && !environmentService.extensionTestsLocationURI) {\n\t\t\tconst workspaceId = toWorkspaceIdentifier(contextService.getWorkspace());\n\t\t\tif (isSingleFolderWorkspaceIdentifier(workspaceId) || isWorkspaceIdentifier(workspaceId)) {\n\t\t\t\tconst serializedWorkspace = isSingleFolderWorkspaceIdentifier(workspaceId) ? { folderUri: workspaceId.uri.toJSON() } : { workspaceUri: workspaceId.configPath.toJSON() };\n\t\t\t\tstorageService.store(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, JSON.stringify(serializedWorkspace), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t\t} else {\n\t\t\t\tstorageService.remove(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, StorageScope.PROFILE);\n\t\t\t}\n\t\t}\n\t}\n\n\toverride async openExtensionDevelopmentHostWindow(args: string[], _debugRenderer: boolean): Promise<IOpenExtensionWindowResult> {\n\n\t\t// Add environment parameters required for debug to work\n\t\tconst environment = new Map<string, string>();\n\n\t\tconst fileUriArg = this.findArgument('file-uri', args);\n\t\tif (fileUriArg && !hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\tenvironment.set('openFile', fileUriArg);\n\t\t}\n\n\t\tconst copyArgs = [\n\t\t\t'extensionDevelopmentPath',\n\t\t\t'extensionTestsPath',\n\t\t\t'extensionEnvironment',\n\t\t\t'debugId',\n\t\t\t'inspect-brk-extensions',\n\t\t\t'inspect-extensions',\n\t\t];\n\n\t\tfor (const argName of copyArgs) {\n\t\t\tconst value = this.findArgument(argName, args);\n\t\t\tif (value) {\n\t\t\t\tenvironment.set(argName, value);\n\t\t\t}\n\t\t}\n\n\t\t// Find out which workspace to open debug window on\n\t\tlet debugWorkspace: IWorkspace = undefined;\n\t\tconst folderUriArg = this.findArgument('folder-uri', args);\n\t\tif (folderUriArg) {\n\t\t\tdebugWorkspace = { folderUri: URI.parse(folderUriArg) };\n\t\t} else {\n\t\t\tconst fileUriArg = this.findArgument('file-uri', args);\n\t\t\tif (fileUriArg && hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\t\tdebugWorkspace = { workspaceUri: URI.parse(fileUriArg) };\n\t\t\t}\n\t\t}\n\n\t\tconst extensionTestsPath = this.findArgument('extensionTestsPath', args);\n\t\tif (!debugWorkspace && !extensionTestsPath) {\n\t\t\tconst lastExtensionDevelopmentWorkspace = this.storageService.get(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, StorageScope.PROFILE);\n\t\t\tif (lastExtensionDevelopmentWorkspace) {\n\t\t\t\ttry {\n\t\t\t\t\tconst serializedWorkspace: { workspaceUri?: UriComponents; folderUri?: UriComponents } = JSON.parse(lastExtensionDevelopmentWorkspace);\n\t\t\t\t\tif (serializedWorkspace.workspaceUri) {\n\t\t\t\t\t\tdebugWorkspace = { workspaceUri: URI.revive(serializedWorkspace.workspaceUri) };\n\t\t\t\t\t} else if (serializedWorkspace.folderUri) {\n\t\t\t\t\t\tdebugWorkspace = { folderUri: URI.revive(serializedWorkspace.folderUri) };\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate workspace exists\n\t\tif (debugWorkspace) {\n\t\t\tconst debugWorkspaceResource = isFolderToOpen(debugWorkspace) ? debugWorkspace.folderUri : isWorkspaceToOpen(debugWorkspace) ? debugWorkspace.workspaceUri : undefined;\n\t\t\tif (debugWorkspaceResource) {\n\t\t\t\tconst workspaceExists = await this.fileService.exists(debugWorkspaceResource);\n\t\t\t\tif (!workspaceExists) {\n\t\t\t\t\tdebugWorkspace = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Open debug window as new window. Pass arguments over.\n\t\tconst success = await this.workspaceProvider.open(debugWorkspace, {\n\t\t\treuse: false, \t\t\t\t\t\t\t\t// debugging always requires a new window\n\t\t\tpayload: Array.from(environment.entries())\t// mandatory properties to enable debugging\n\t\t});\n\n\t\treturn { success };\n\t}\n\n\tprivate findArgument(key: string, args: string[]): string | undefined {\n\t\tfor (const a of args) {\n\t\t\tconst k = `--${key}=`;\n\t\t\tif (a.indexOf(k) === 0) {\n\t\t\t\treturn a.substring(k.length);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nregisterSingleton(IExtensionHostDebugService, BrowserExtensionHostDebugService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["fileUriArg"]
}
