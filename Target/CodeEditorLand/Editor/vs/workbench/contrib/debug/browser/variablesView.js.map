{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/variablesView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { HighlightedLabel, IHighlight } from '../../../../base/browser/ui/highlightedlabel/highlightedLabel.js';\nimport { IListVirtualDelegate } from '../../../../base/browser/ui/list/list.js';\nimport { IListAccessibilityProvider } from '../../../../base/browser/ui/list/listWidget.js';\nimport { AsyncDataTree, IAsyncDataTreeViewState } from '../../../../base/browser/ui/tree/asyncDataTree.js';\nimport { ITreeContextMenuEvent, ITreeMouseEvent, ITreeNode, ITreeRenderer } from '../../../../base/browser/ui/tree/tree.js';\nimport { Action, IAction } from '../../../../base/common/actions.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { FuzzyScore, createMatches } from '../../../../base/common/filters.js';\nimport { IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { localize } from '../../../../nls.js';\nimport { createAndFillInContextMenuActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { IMenuService, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService, IContextViewService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { WorkbenchAsyncDataTree } from '../../../../platform/list/browser/listService.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ViewAction, ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { IViewletViewOptions } from '../../../browser/parts/views/viewsViewlet.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { IEditorService, SIDE_GROUP } from '../../../services/editor/common/editorService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED, CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED, CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED, CONTEXT_VARIABLES_FOCUSED, DataBreakpointSetType, DebugVisualizationType, IDataBreakpointInfoResponse, IDebugService, IExpression, IScope, IStackFrame, IViewModel, VARIABLES_VIEW_ID } from '../common/debug.js';\nimport { getContextForVariable } from '../common/debugContext.js';\nimport { ErrorScope, Expression, Scope, StackFrame, Variable, VisualizedExpression, getUriForDebugMemory } from '../common/debugModel.js';\nimport { DebugVisualizer, IDebugVisualizerService } from '../common/debugVisualizers.js';\nimport { AbstractExpressionDataSource, AbstractExpressionsRenderer, IExpressionTemplateData, IInputBoxOptions, renderViewTree } from './baseDebugView.js';\nimport { ADD_TO_WATCH_ID, ADD_TO_WATCH_LABEL, COPY_EVALUATE_PATH_ID, COPY_EVALUATE_PATH_LABEL, COPY_VALUE_ID, COPY_VALUE_LABEL } from './debugCommands.js';\nimport { DebugExpressionRenderer } from './debugExpressionRenderer.js';\n\nconst $ = dom.$;\nlet forgetScopes = true;\n\nlet variableInternalContext: Variable | undefined;\nlet dataBreakpointInfoResponse: IDataBreakpointInfoResponse | undefined;\n\ninterface IVariablesContext {\n\tsessionId: string | undefined;\n\tcontainer: DebugProtocol.Variable | DebugProtocol.Scope | DebugProtocol.EvaluateArguments;\n\tvariable: DebugProtocol.Variable;\n}\n\nexport class VariablesView extends ViewPane {\n\n\tprivate updateTreeScheduler: RunOnceScheduler;\n\tprivate needsRefresh = false;\n\tprivate tree!: WorkbenchAsyncDataTree<IStackFrame | null, IExpression | IScope, FuzzyScore>;\n\tprivate savedViewState = new Map<string, IAsyncDataTreeViewState>();\n\tprivate autoExpandedScopes = new Set<string>();\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IMenuService private readonly menuService: IMenuService\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\n\t\t// Use scheduler to prevent unnecessary flashing\n\t\tthis.updateTreeScheduler = new RunOnceScheduler(async () => {\n\t\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\n\t\t\tthis.needsRefresh = false;\n\t\t\tconst input = this.tree.getInput();\n\t\t\tif (input) {\n\t\t\t\tthis.savedViewState.set(input.getId(), this.tree.getViewState());\n\t\t\t}\n\t\t\tif (!stackFrame) {\n\t\t\t\tawait this.tree.setInput(null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewState = this.savedViewState.get(stackFrame.getId());\n\t\t\tawait this.tree.setInput(stackFrame, viewState);\n\n\t\t\t// Automatically expand the first non-expensive scope\n\t\t\tconst scopes = await stackFrame.getScopes();\n\t\t\tconst toExpand = scopes.find(s => !s.expensive);\n\n\t\t\t// A race condition could be present causing the scopes here to be different from the scopes that the tree just retrieved.\n\t\t\t// If that happened, don't try to reveal anything, it will be straightened out on the next update\n\t\t\tif (toExpand && this.tree.hasNode(toExpand)) {\n\t\t\t\tthis.autoExpandedScopes.add(toExpand.getId());\n\t\t\t\tawait this.tree.expand(toExpand);\n\t\t\t}\n\t\t}, 400);\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis.element.classList.add('debug-pane');\n\t\tcontainer.classList.add('debug-variables');\n\t\tconst treeContainer = renderViewTree(container);\n\t\tconst expressionRenderer = this.instantiationService.createInstance(DebugExpressionRenderer);\n\t\tthis.tree = <WorkbenchAsyncDataTree<IStackFrame | null, IExpression | IScope, FuzzyScore>>this.instantiationService.createInstance(WorkbenchAsyncDataTree, 'VariablesView', treeContainer, new VariablesDelegate(),\n\t\t\t[\n\t\t\t\tthis.instantiationService.createInstance(VariablesRenderer, expressionRenderer),\n\t\t\t\tthis.instantiationService.createInstance(VisualizedVariableRenderer, expressionRenderer),\n\t\t\t\tnew ScopesRenderer(),\n\t\t\t\tnew ScopeErrorRenderer(),\n\t\t\t],\n\t\t\tthis.instantiationService.createInstance(VariablesDataSource), {\n\t\t\taccessibilityProvider: new VariablesAccessibilityProvider(),\n\t\t\tidentityProvider: { getId: (element: IExpression | IScope) => element.getId() },\n\t\t\tkeyboardNavigationLabelProvider: { getKeyboardNavigationLabel: (e: IExpression | IScope) => e.name },\n\t\t\toverrideStyles: this.getLocationBasedColors().listOverrideStyles\n\t\t});\n\n\t\tthis._register(VisualizedVariableRenderer.rendererOnVisualizationRange(this.debugService.getViewModel(), this.tree));\n\t\tthis.tree.setInput(this.debugService.getViewModel().focusedStackFrame ?? null);\n\n\t\tCONTEXT_VARIABLES_FOCUSED.bindTo(this.tree.contextKeyService);\n\n\t\tthis._register(this.debugService.getViewModel().onDidFocusStackFrame(sf => {\n\t\t\tif (!this.isBodyVisible()) {\n\t\t\t\tthis.needsRefresh = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Refresh the tree immediately if the user explictly changed stack frames.\n\t\t\t// Otherwise postpone the refresh until user stops stepping.\n\t\t\tconst timeout = sf.explicit ? 0 : undefined;\n\t\t\tthis.updateTreeScheduler.schedule(timeout);\n\t\t}));\n\t\tthis._register(this.debugService.getViewModel().onWillUpdateViews(() => {\n\t\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\tif (stackFrame && forgetScopes) {\n\t\t\t\tstackFrame.forgetScopes();\n\t\t\t}\n\t\t\tforgetScopes = true;\n\t\t\tthis.tree.updateChildren();\n\t\t}));\n\t\tthis._register(this.tree);\n\t\tthis._register(this.tree.onMouseDblClick(e => this.onMouseDblClick(e)));\n\t\tthis._register(this.tree.onContextMenu(async e => await this.onContextMenu(e)));\n\n\t\tthis._register(this.onDidChangeBodyVisibility(visible => {\n\t\t\tif (visible && this.needsRefresh) {\n\t\t\t\tthis.updateTreeScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tlet horizontalScrolling: boolean | undefined;\n\t\tthis._register(this.debugService.getViewModel().onDidSelectExpression(e => {\n\t\t\tconst variable = e?.expression;\n\t\t\tif (variable && this.tree.hasNode(variable)) {\n\t\t\t\thorizontalScrolling = this.tree.options.horizontalScrolling;\n\t\t\t\tif (horizontalScrolling) {\n\t\t\t\t\tthis.tree.updateOptions({ horizontalScrolling: false });\n\t\t\t\t}\n\n\t\t\t\tthis.tree.rerender(variable);\n\t\t\t} else if (!e && horizontalScrolling !== undefined) {\n\t\t\t\tthis.tree.updateOptions({ horizontalScrolling: horizontalScrolling });\n\t\t\t\thorizontalScrolling = undefined;\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.debugService.getViewModel().onDidEvaluateLazyExpression(async e => {\n\t\t\tif (e instanceof Variable && this.tree.hasNode(e)) {\n\t\t\t\tawait this.tree.updateChildren(e, false, true);\n\t\t\t\tawait this.tree.expand(e);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.debugService.onDidEndSession(() => {\n\t\t\tthis.savedViewState.clear();\n\t\t\tthis.autoExpandedScopes.clear();\n\t\t}));\n\t}\n\n\tprotected override layoutBody(width: number, height: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.tree.layout(width, height);\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis.tree.domFocus();\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.tree.collapseAll();\n\t}\n\n\tprivate onMouseDblClick(e: ITreeMouseEvent<IExpression | IScope>): void {\n\t\tif (this.canSetExpressionValue(e.element)) {\n\t\t\tthis.debugService.getViewModel().setSelectedExpression(e.element, false);\n\t\t}\n\t}\n\n\tprivate canSetExpressionValue(e: IExpression | IScope | null): e is IExpression {\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tif (!session) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (e instanceof VisualizedExpression) {\n\t\t\treturn !!e.treeItem.canEdit;\n\t\t}\n\n\t\treturn e instanceof Variable && !e.presentationHint?.attributes?.includes('readOnly') && !e.presentationHint?.lazy;\n\t}\n\n\tprivate async onContextMenu(e: ITreeContextMenuEvent<IExpression | IScope>): Promise<void> {\n\t\tconst variable = e.element;\n\t\tif (!(variable instanceof Variable) || !variable.value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn openContextMenuForVariableTreeElement(this.contextKeyService, this.menuService, this.contextMenuService, MenuId.DebugVariablesContext, e);\n\t}\n}\n\nexport async function openContextMenuForVariableTreeElement(parentContextKeyService: IContextKeyService, menuService: IMenuService, contextMenuService: IContextMenuService, menuId: MenuId, e: ITreeContextMenuEvent<IExpression | IScope>) {\n\tconst variable = e.element;\n\tif (!(variable instanceof Variable) || !variable.value) {\n\t\treturn;\n\t}\n\n\tconst contextKeyService = await getContextForVariableMenuWithDataAccess(parentContextKeyService, variable);\n\tconst context: IVariablesContext = getVariablesContext(variable);\n\tconst menu = menuService.getMenuActions(menuId, contextKeyService, { arg: context, shouldForwardArgs: false });\n\n\tconst secondary: IAction[] = [];\n\tcreateAndFillInContextMenuActions(menu, { primary: [], secondary }, 'inline');\n\tcontextMenuService.showContextMenu({\n\t\tgetAnchor: () => e.anchor,\n\t\tgetActions: () => secondary\n\t});\n}\n\nconst getVariablesContext = (variable: Variable): IVariablesContext => ({\n\tsessionId: variable.getSession()?.getId(),\n\tcontainer: variable.parent instanceof Expression\n\t\t? { expression: variable.parent.name }\n\t\t: (variable.parent as (Variable | Scope)).toDebugProtocolObject(),\n\tvariable: variable.toDebugProtocolObject()\n});\n\n/**\n * Gets a context key overlay that has context for the given variable, including data access info.\n */\nasync function getContextForVariableMenuWithDataAccess(parentContext: IContextKeyService, variable: Variable) {\n\tconst session = variable.getSession();\n\tif (!session || !session.capabilities.supportsDataBreakpoints) {\n\t\treturn getContextForVariableMenuBase(parentContext, variable);\n\t}\n\n\tconst contextKeys: [string, unknown][] = [];\n\tdataBreakpointInfoResponse = await session.dataBreakpointInfo(variable.name, variable.parent.reference);\n\tconst dataBreakpointId = dataBreakpointInfoResponse?.dataId;\n\tconst dataBreakpointAccessTypes = dataBreakpointInfoResponse?.accessTypes;\n\n\tif (!dataBreakpointAccessTypes) {\n\t\tcontextKeys.push([CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED.key, !!dataBreakpointId]);\n\t} else {\n\t\tfor (const accessType of dataBreakpointAccessTypes) {\n\t\t\tswitch (accessType) {\n\t\t\t\tcase 'read':\n\t\t\t\t\tcontextKeys.push([CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED.key, !!dataBreakpointId]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'write':\n\t\t\t\t\tcontextKeys.push([CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED.key, !!dataBreakpointId]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'readWrite':\n\t\t\t\t\tcontextKeys.push([CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED.key, !!dataBreakpointId]);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn getContextForVariableMenuBase(parentContext, variable, contextKeys);\n}\n\n/**\n * Gets a context key overlay that has context for the given variable.\n */\nfunction getContextForVariableMenuBase(parentContext: IContextKeyService, variable: Variable, additionalContext: [string, unknown][] = []) {\n\tvariableInternalContext = variable;\n\treturn getContextForVariable(parentContext, variable, additionalContext);\n}\n\nfunction isStackFrame(obj: any): obj is IStackFrame {\n\treturn obj instanceof StackFrame;\n}\n\nclass VariablesDataSource extends AbstractExpressionDataSource<IStackFrame | null, IExpression | IScope> {\n\n\tpublic override hasChildren(element: IStackFrame | null | IExpression | IScope): boolean {\n\t\tif (!element) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isStackFrame(element)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn element.hasChildren;\n\t}\n\n\tprotected override doGetChildren(element: IStackFrame | IExpression | IScope): Promise<(IExpression | IScope)[]> {\n\t\tif (isStackFrame(element)) {\n\t\t\treturn element.getScopes();\n\t\t}\n\n\t\treturn element.getChildren();\n\t}\n}\n\ninterface IScopeTemplateData {\n\tname: HTMLElement;\n\tlabel: HighlightedLabel;\n}\n\nclass VariablesDelegate implements IListVirtualDelegate<IExpression | IScope> {\n\n\tgetHeight(element: IExpression | IScope): number {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: IExpression | IScope): string {\n\t\tif (element instanceof ErrorScope) {\n\t\t\treturn ScopeErrorRenderer.ID;\n\t\t}\n\n\t\tif (element instanceof Scope) {\n\t\t\treturn ScopesRenderer.ID;\n\t\t}\n\n\t\tif (element instanceof VisualizedExpression) {\n\t\t\treturn VisualizedVariableRenderer.ID;\n\t\t}\n\n\t\treturn VariablesRenderer.ID;\n\t}\n}\n\nclass ScopesRenderer implements ITreeRenderer<IScope, FuzzyScore, IScopeTemplateData> {\n\n\tstatic readonly ID = 'scope';\n\n\tget templateId(): string {\n\t\treturn ScopesRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IScopeTemplateData {\n\t\tconst name = dom.append(container, $('.scope'));\n\t\tconst label = new HighlightedLabel(name);\n\n\t\treturn { name, label };\n\t}\n\n\trenderElement(element: ITreeNode<IScope, FuzzyScore>, index: number, templateData: IScopeTemplateData): void {\n\t\ttemplateData.label.set(element.element.name, createMatches(element.filterData));\n\t}\n\n\tdisposeTemplate(templateData: IScopeTemplateData): void {\n\t\ttemplateData.label.dispose();\n\t}\n}\n\ninterface IScopeErrorTemplateData {\n\terror: HTMLElement;\n}\n\nclass ScopeErrorRenderer implements ITreeRenderer<IScope, FuzzyScore, IScopeErrorTemplateData> {\n\n\tstatic readonly ID = 'scopeError';\n\n\tget templateId(): string {\n\t\treturn ScopeErrorRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IScopeErrorTemplateData {\n\t\tconst wrapper = dom.append(container, $('.scope'));\n\t\tconst error = dom.append(wrapper, $('.error'));\n\t\treturn { error };\n\t}\n\n\trenderElement(element: ITreeNode<IScope, FuzzyScore>, index: number, templateData: IScopeErrorTemplateData): void {\n\t\ttemplateData.error.innerText = element.element.name;\n\t}\n\n\tdisposeTemplate(): void {\n\t\t// noop\n\t}\n}\n\nexport class VisualizedVariableRenderer extends AbstractExpressionsRenderer {\n\tpublic static readonly ID = 'viz';\n\n\t/**\n\t * Registers a helper that rerenders the tree when visualization is requested\n\t * or cancelled./\n\t */\n\tpublic static rendererOnVisualizationRange(model: IViewModel, tree: AsyncDataTree<any, any, any>): IDisposable {\n\t\treturn model.onDidChangeVisualization(({ original }) => {\n\t\t\tif (!tree.hasNode(original)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent: IExpression = tree.getParentElement(original);\n\t\t\ttree.updateChildren(parent, false, false);\n\t\t});\n\n\t}\n\n\tconstructor(\n\t\tprivate readonly expressionRenderer: DebugExpressionRenderer,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper(debugService, contextViewService, hoverService);\n\t}\n\n\tpublic override get templateId(): string {\n\t\treturn VisualizedVariableRenderer.ID;\n\t}\n\n\tpublic override renderElement(node: ITreeNode<IExpression, FuzzyScore>, index: number, data: IExpressionTemplateData): void {\n\t\tdata.elementDisposable.clear();\n\t\tsuper.renderExpressionElement(node.element, node, data);\n\t}\n\n\tprotected override renderExpression(expression: IExpression, data: IExpressionTemplateData, highlights: IHighlight[]): void {\n\t\tconst viz = expression as VisualizedExpression;\n\n\t\tlet text = viz.name;\n\t\tif (viz.value && typeof viz.name === 'string') {\n\t\t\ttext += ':';\n\t\t}\n\t\tdata.label.set(text, highlights, viz.name);\n\t\tdata.elementDisposable.add(this.expressionRenderer.renderValue(data.value, viz, {\n\t\t\tshowChanged: false,\n\t\t\tmaxValueLength: 1024,\n\t\t\tcolorize: true,\n\t\t\tsession: expression.getSession(),\n\t\t}));\n\t}\n\n\tprotected override getInputBoxOptions(expression: IExpression): IInputBoxOptions | undefined {\n\t\tconst viz = <VisualizedExpression>expression;\n\t\treturn {\n\t\t\tinitialValue: expression.value,\n\t\t\tariaLabel: localize('variableValueAriaLabel', \"Type new variable value\"),\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: () => viz.errorMessage ? ({ content: viz.errorMessage }) : null\n\t\t\t},\n\t\t\tonFinish: (value: string, success: boolean) => {\n\t\t\t\tviz.errorMessage = undefined;\n\t\t\t\tif (success) {\n\t\t\t\t\tviz.edit(value).then(() => {\n\t\t\t\t\t\t// Do not refresh scopes due to a node limitation #15520\n\t\t\t\t\t\tforgetScopes = false;\n\t\t\t\t\t\tthis.debugService.getViewModel().updateViews();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected override renderActionBar(actionBar: ActionBar, expression: IExpression, _data: IExpressionTemplateData) {\n\t\tconst viz = expression as VisualizedExpression;\n\t\tconst contextKeyService = viz.original ? getContextForVariableMenuBase(this.contextKeyService, viz.original) : this.contextKeyService;\n\t\tconst context = viz.original ? getVariablesContext(viz.original) : undefined;\n\t\tconst menu = this.menuService.getMenuActions(MenuId.DebugVariablesContext, contextKeyService, { arg: context, shouldForwardArgs: false });\n\n\t\tconst primary: IAction[] = [];\n\t\tcreateAndFillInContextMenuActions(menu, { primary, secondary: [] }, 'inline');\n\n\t\tif (viz.original) {\n\t\t\tconst action = new Action('debugViz', localize('removeVisualizer', 'Remove Visualizer'), ThemeIcon.asClassName(Codicon.eye), true, () => this.debugService.getViewModel().setVisualizedExpression(viz.original!, undefined));\n\t\t\taction.checked = true;\n\t\t\tprimary.push(action);\n\t\t\tactionBar.domNode.style.display = 'initial';\n\t\t}\n\t\tactionBar.clear();\n\t\tactionBar.context = context;\n\t\tactionBar.push(primary, { icon: true, label: false });\n\t}\n}\n\nexport class VariablesRenderer extends AbstractExpressionsRenderer {\n\n\tstatic readonly ID = 'variable';\n\n\tconstructor(\n\t\tprivate readonly expressionRenderer: DebugExpressionRenderer,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IDebugVisualizerService private readonly visualization: IDebugVisualizerService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IHoverService hoverService: IHoverService,\n\t) {\n\t\tsuper(debugService, contextViewService, hoverService);\n\t}\n\n\tget templateId(): string {\n\t\treturn VariablesRenderer.ID;\n\t}\n\n\tprotected renderExpression(expression: IExpression, data: IExpressionTemplateData, highlights: IHighlight[]): void {\n\t\tdata.elementDisposable.add(this.expressionRenderer.renderVariable(data, expression as Variable, {\n\t\t\thighlights,\n\t\t\tshowChanged: true,\n\t\t}));\n\t}\n\n\tpublic override renderElement(node: ITreeNode<IExpression, FuzzyScore>, index: number, data: IExpressionTemplateData): void {\n\t\tdata.elementDisposable.clear();\n\t\tsuper.renderExpressionElement(node.element, node, data);\n\t}\n\n\tprotected getInputBoxOptions(expression: IExpression): IInputBoxOptions {\n\t\tconst variable = <Variable>expression;\n\t\treturn {\n\t\t\tinitialValue: expression.value,\n\t\t\tariaLabel: localize('variableValueAriaLabel', \"Type new variable value\"),\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: () => variable.errorMessage ? ({ content: variable.errorMessage }) : null\n\t\t\t},\n\t\t\tonFinish: (value: string, success: boolean) => {\n\t\t\t\tvariable.errorMessage = undefined;\n\t\t\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\t\tif (success && variable.value !== value && focusedStackFrame) {\n\t\t\t\t\tvariable.setVariable(value, focusedStackFrame)\n\t\t\t\t\t\t// Need to force watch expressions and variables to update since a variable change can have an effect on both\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t// Do not refresh scopes due to a node limitation #15520\n\t\t\t\t\t\t\tforgetScopes = false;\n\t\t\t\t\t\t\tthis.debugService.getViewModel().updateViews();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected override renderActionBar(actionBar: ActionBar, expression: IExpression, data: IExpressionTemplateData) {\n\t\tconst variable = expression as Variable;\n\t\tconst contextKeyService = getContextForVariableMenuBase(this.contextKeyService, variable);\n\n\t\tconst primary: IAction[] = [];\n\t\tconst context = getVariablesContext(variable);\n\t\tconst menu = this.menuService.getMenuActions(MenuId.DebugVariablesContext, contextKeyService, { arg: context, shouldForwardArgs: false });\n\t\tcreateAndFillInContextMenuActions(menu, { primary, secondary: [] }, 'inline');\n\n\t\tactionBar.clear();\n\t\tactionBar.context = context;\n\t\tactionBar.push(primary, { icon: true, label: false });\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tdata.elementDisposable.add(toDisposable(() => cts.dispose(true)));\n\t\tthis.visualization.getApplicableFor(expression, cts.token).then(result => {\n\t\t\tdata.elementDisposable.add(result);\n\n\t\t\tconst originalExpression = (expression instanceof VisualizedExpression && expression.original) || expression;\n\t\t\tconst actions = result.object.map(v => new Action('debugViz', v.name, v.iconClass || 'debug-viz-icon', undefined, this.useVisualizer(v, originalExpression, cts.token)));\n\t\t\tif (actions.length === 0) {\n\t\t\t\t// no-op\n\t\t\t} else if (actions.length === 1) {\n\t\t\t\tactionBar.push(actions[0], { icon: true, label: false });\n\t\t\t} else {\n\t\t\t\tactionBar.push(new Action('debugViz', localize('useVisualizer', 'Visualize Variable...'), ThemeIcon.asClassName(Codicon.eye), undefined, () => this.pickVisualizer(actions, originalExpression, data)), { icon: true, label: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate pickVisualizer(actions: IAction[], expression: IExpression, data: IExpressionTemplateData) {\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => data.actionBar!.getContainer(),\n\t\t\tgetActions: () => actions,\n\t\t});\n\t}\n\n\tprivate useVisualizer(viz: DebugVisualizer, expression: IExpression, token: CancellationToken) {\n\t\treturn async () => {\n\t\t\tconst resolved = await viz.resolve(token);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resolved.type === DebugVisualizationType.Command) {\n\t\t\t\tviz.execute();\n\t\t\t} else {\n\t\t\t\tconst replacement = await this.visualization.getVisualizedNodeFor(resolved.id, expression);\n\t\t\t\tif (replacement) {\n\t\t\t\t\tthis.debugService.getViewModel().setVisualizedExpression(expression, replacement);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass VariablesAccessibilityProvider implements IListAccessibilityProvider<IExpression | IScope> {\n\n\tgetWidgetAriaLabel(): string {\n\t\treturn localize('variablesAriaTreeLabel', \"Debug Variables\");\n\t}\n\n\tgetAriaLabel(element: IExpression | IScope): string | null {\n\t\tif (element instanceof Scope) {\n\t\t\treturn localize('variableScopeAriaLabel', \"Scope {0}\", element.name);\n\t\t}\n\t\tif (element instanceof Variable) {\n\t\t\treturn localize({ key: 'variableAriaLabel', comment: ['Placeholders are variable name and variable value respectivly. They should not be translated.'] }, \"{0}, value {1}\", element.name, element.value);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\nexport const SET_VARIABLE_ID = 'debug.setVariable';\nCommandsRegistry.registerCommand({\n\tid: SET_VARIABLE_ID,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tdebugService.getViewModel().setSelectedExpression(variableInternalContext, false);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tmetadata: {\n\t\tdescription: COPY_VALUE_LABEL,\n\t},\n\tid: COPY_VALUE_ID,\n\thandler: async (accessor: ServicesAccessor, arg: Variable | Expression | IVariablesContext, ctx?: (Variable | Expression)[]) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tlet elementContext = '';\n\t\tlet elements: (Variable | Expression)[];\n\t\tif (arg instanceof Variable || arg instanceof Expression) {\n\t\t\telementContext = 'watch';\n\t\t\telements = ctx ? ctx : [];\n\t\t} else {\n\t\t\telementContext = 'variables';\n\t\t\telements = variableInternalContext ? [variableInternalContext] : [];\n\t\t}\n\n\t\tconst stackFrame = debugService.getViewModel().focusedStackFrame;\n\t\tconst session = debugService.getViewModel().focusedSession;\n\t\tif (!stackFrame || !session || elements.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst evalContext = session.capabilities.supportsClipboardContext ? 'clipboard' : elementContext;\n\t\tconst toEvaluate = elements.map(element => element instanceof Variable ? (element.evaluateName || element.value) : element.name);\n\n\t\ttry {\n\t\t\tconst evaluations = await Promise.all(toEvaluate.map(expr => session.evaluate(expr, stackFrame.frameId, evalContext)));\n\t\t\tconst result = coalesce(evaluations).map(evaluation => evaluation.body.result);\n\t\t\tif (result.length) {\n\t\t\t\tclipboardService.writeText(result.join('\\n'));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconst result = elements.map(element => element.value);\n\t\t\tclipboardService.writeText(result.join('\\n'));\n\t\t}\n\t}\n});\n\nexport const VIEW_MEMORY_ID = 'workbench.debug.viewlet.action.viewMemory';\n\nconst HEX_EDITOR_EXTENSION_ID = 'ms-vscode.hexeditor';\nconst HEX_EDITOR_EDITOR_ID = 'hexEditor.hexedit';\n\nCommandsRegistry.registerCommand({\n\tid: VIEW_MEMORY_ID,\n\thandler: async (accessor: ServicesAccessor, arg: IVariablesContext | IExpression, ctx?: (Variable | Expression)[]) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tlet sessionId: string;\n\t\tlet memoryReference: string;\n\t\tif ('sessionId' in arg) { // IVariablesContext\n\t\t\tif (!arg.sessionId || !arg.variable.memoryReference) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsessionId = arg.sessionId;\n\t\t\tmemoryReference = arg.variable.memoryReference;\n\t\t} else { // IExpression\n\t\t\tif (!arg.memoryReference) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst focused = debugService.getViewModel().focusedSession;\n\t\t\tif (!focused) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsessionId = focused.getId();\n\t\t\tmemoryReference = arg.memoryReference;\n\t\t}\n\n\t\tconst extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\tconst ext = await extensionService.getExtension(HEX_EDITOR_EXTENSION_ID);\n\t\tif (ext || await tryInstallHexEditor(extensionsWorkbenchService, notificationService)) {\n\t\t\t/* __GDPR__\n\t\t\t\t\"debug/didViewMemory\" : {\n\t\t\t\t\t\"owner\": \"connor4312\",\n\t\t\t\t\t\"debugType\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\ttelemetryService.publicLog('debug/didViewMemory', {\n\t\t\t\tdebugType: debugService.getModel().getSession(sessionId)?.configuration.type,\n\t\t\t});\n\n\t\t\tawait editorService.openEditor({\n\t\t\t\tresource: getUriForDebugMemory(sessionId, memoryReference),\n\t\t\t\toptions: {\n\t\t\t\t\trevealIfOpened: true,\n\t\t\t\t\toverride: HEX_EDITOR_EDITOR_ID,\n\t\t\t\t},\n\t\t\t}, SIDE_GROUP);\n\t\t}\n\t}\n});\n\nasync function tryInstallHexEditor(extensionsWorkbenchService: IExtensionsWorkbenchService, notificationService: INotificationService): Promise<boolean> {\n\ttry {\n\t\tawait extensionsWorkbenchService.install(HEX_EDITOR_EXTENSION_ID, {\n\t\t\tjustification: localize(\"viewMemory.prompt\", \"Inspecting binary data requires this extension.\"),\n\t\t\tenable: true\n\t\t}, ProgressLocation.Notification);\n\t\treturn true;\n\t} catch (error) {\n\t\tnotificationService.error(error);\n\t\treturn false;\n\t}\n}\n\nexport const BREAK_WHEN_VALUE_CHANGES_ID = 'debug.breakWhenValueChanges';\nCommandsRegistry.registerCommand({\n\tid: BREAK_WHEN_VALUE_CHANGES_ID,\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tif (dataBreakpointInfoResponse) {\n\t\t\tawait debugService.addDataBreakpoint({ description: dataBreakpointInfoResponse.description, src: { type: DataBreakpointSetType.Variable, dataId: dataBreakpointInfoResponse.dataId! }, canPersist: !!dataBreakpointInfoResponse.canPersist, accessTypes: dataBreakpointInfoResponse.accessTypes, accessType: 'write' });\n\t\t}\n\t}\n});\n\nexport const BREAK_WHEN_VALUE_IS_ACCESSED_ID = 'debug.breakWhenValueIsAccessed';\nCommandsRegistry.registerCommand({\n\tid: BREAK_WHEN_VALUE_IS_ACCESSED_ID,\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tif (dataBreakpointInfoResponse) {\n\t\t\tawait debugService.addDataBreakpoint({ description: dataBreakpointInfoResponse.description, src: { type: DataBreakpointSetType.Variable, dataId: dataBreakpointInfoResponse.dataId! }, canPersist: !!dataBreakpointInfoResponse.canPersist, accessTypes: dataBreakpointInfoResponse.accessTypes, accessType: 'readWrite' });\n\t\t}\n\t}\n});\n\nexport const BREAK_WHEN_VALUE_IS_READ_ID = 'debug.breakWhenValueIsRead';\nCommandsRegistry.registerCommand({\n\tid: BREAK_WHEN_VALUE_IS_READ_ID,\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tif (dataBreakpointInfoResponse) {\n\t\t\tawait debugService.addDataBreakpoint({ description: dataBreakpointInfoResponse.description, src: { type: DataBreakpointSetType.Variable, dataId: dataBreakpointInfoResponse.dataId! }, canPersist: !!dataBreakpointInfoResponse.canPersist, accessTypes: dataBreakpointInfoResponse.accessTypes, accessType: 'read' });\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tmetadata: {\n\t\tdescription: COPY_EVALUATE_PATH_LABEL,\n\t},\n\tid: COPY_EVALUATE_PATH_ID,\n\thandler: async (accessor: ServicesAccessor, context: IVariablesContext) => {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tawait clipboardService.writeText(context.variable.evaluateName!);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tmetadata: {\n\t\tdescription: ADD_TO_WATCH_LABEL,\n\t},\n\tid: ADD_TO_WATCH_ID,\n\thandler: async (accessor: ServicesAccessor, context: IVariablesContext) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tdebugService.addWatchExpression(context.variable.evaluateName);\n\t}\n});\n\nregisterAction2(class extends ViewAction<VariablesView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'variables.collapse',\n\t\t\tviewId: VARIABLES_VIEW_ID,\n\t\t\ttitle: localize('collapse', \"Collapse All\"),\n\t\t\tf1: false,\n\t\t\ticon: Codicon.collapseAll,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', VARIABLES_VIEW_ID)\n\t\t\t}\n\t\t});\n\t}\n\n\trunInView(_accessor: ServicesAccessor, view: VariablesView) {\n\t\tview.collapseAll();\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
