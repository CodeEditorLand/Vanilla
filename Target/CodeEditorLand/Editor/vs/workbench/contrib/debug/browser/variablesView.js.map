{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/variablesView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport type { ActionBar } from \"../../../../base/browser/ui/actionbar/actionbar.js\";\nimport {\n\tHighlightedLabel,\n\ttype IHighlight,\n} from \"../../../../base/browser/ui/highlightedlabel/highlightedLabel.js\";\nimport type { IListVirtualDelegate } from \"../../../../base/browser/ui/list/list.js\";\nimport type { IListAccessibilityProvider } from \"../../../../base/browser/ui/list/listWidget.js\";\nimport type {\n\tAsyncDataTree,\n\tIAsyncDataTreeViewState,\n} from \"../../../../base/browser/ui/tree/asyncDataTree.js\";\nimport type {\n\tITreeContextMenuEvent,\n\tITreeMouseEvent,\n\tITreeNode,\n\tITreeRenderer,\n} from \"../../../../base/browser/ui/tree/tree.js\";\nimport { Action, type IAction } from \"../../../../base/common/actions.js\";\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport {\n\ttype FuzzyScore,\n\tcreateMatches,\n} from \"../../../../base/common/filters.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { createAndFillInContextMenuActions } from \"../../../../platform/actions/browser/menuEntryActionViewItem.js\";\nimport {\n\tIMenuService,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIContextMenuService,\n\tIContextViewService,\n} from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IHoverService } from \"../../../../platform/hover/browser/hover.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { WorkbenchAsyncDataTree } from \"../../../../platform/list/browser/listService.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { ProgressLocation } from \"../../../../platform/progress/common/progress.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport { ViewAction, ViewPane } from \"../../../browser/parts/views/viewPane.js\";\nimport type { IViewletViewOptions } from \"../../../browser/parts/views/viewsViewlet.js\";\nimport { IViewDescriptorService } from \"../../../common/views.js\";\nimport {\n\tIEditorService,\n\tSIDE_GROUP,\n} from \"../../../services/editor/common/editorService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { IExtensionsWorkbenchService } from \"../../extensions/common/extensions.js\";\nimport {\n\tCONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED,\n\tCONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED,\n\tCONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED,\n\tCONTEXT_VARIABLES_FOCUSED,\n\tDataBreakpointSetType,\n\tDebugVisualizationType,\n\ttype IDataBreakpointInfoResponse,\n\tIDebugService,\n\ttype IExpression,\n\ttype IScope,\n\ttype IStackFrame,\n\ttype IViewModel,\n\tVARIABLES_VIEW_ID,\n} from \"../common/debug.js\";\nimport { getContextForVariable } from \"../common/debugContext.js\";\nimport {\n\tErrorScope,\n\tExpression,\n\tScope,\n\tStackFrame,\n\tVariable,\n\tVisualizedExpression,\n\tgetUriForDebugMemory,\n} from \"../common/debugModel.js\";\nimport {\n\ttype DebugVisualizer,\n\tIDebugVisualizerService,\n} from \"../common/debugVisualizers.js\";\nimport {\n\tAbstractExpressionDataSource,\n\tAbstractExpressionsRenderer,\n\ttype IExpressionTemplateData,\n\ttype IInputBoxOptions,\n\trenderViewTree,\n} from \"./baseDebugView.js\";\nimport {\n\tADD_TO_WATCH_ID,\n\tADD_TO_WATCH_LABEL,\n\tCOPY_EVALUATE_PATH_ID,\n\tCOPY_EVALUATE_PATH_LABEL,\n\tCOPY_VALUE_ID,\n\tCOPY_VALUE_LABEL,\n} from \"./debugCommands.js\";\nimport { DebugExpressionRenderer } from \"./debugExpressionRenderer.js\";\n\nconst $ = dom.$;\nlet forgetScopes = true;\n\nlet variableInternalContext: Variable | undefined;\nlet dataBreakpointInfoResponse: IDataBreakpointInfoResponse | undefined;\n\ninterface IVariablesContext {\n\tsessionId: string | undefined;\n\tcontainer:\n\t\t| DebugProtocol.Variable\n\t\t| DebugProtocol.Scope\n\t\t| DebugProtocol.EvaluateArguments;\n\tvariable: DebugProtocol.Variable;\n}\n\nexport class VariablesView extends ViewPane {\n\tprivate updateTreeScheduler: RunOnceScheduler;\n\tprivate needsRefresh = false;\n\tprivate tree!: WorkbenchAsyncDataTree<\n\t\tIStackFrame | null,\n\t\tIExpression | IScope,\n\t\tFuzzyScore\n\t>;\n\tprivate savedViewState = new Map<string, IAsyncDataTreeViewState>();\n\tprivate autoExpandedScopes = new Set<string>();\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t) {\n\t\tsuper(\n\t\t\toptions,\n\t\t\tkeybindingService,\n\t\t\tcontextMenuService,\n\t\t\tconfigurationService,\n\t\t\tcontextKeyService,\n\t\t\tviewDescriptorService,\n\t\t\tinstantiationService,\n\t\t\topenerService,\n\t\t\tthemeService,\n\t\t\ttelemetryService,\n\t\t\thoverService,\n\t\t);\n\n\t\t// Use scheduler to prevent unnecessary flashing\n\t\tthis.updateTreeScheduler = new RunOnceScheduler(async () => {\n\t\t\tconst stackFrame =\n\t\t\t\tthis.debugService.getViewModel().focusedStackFrame;\n\n\t\t\tthis.needsRefresh = false;\n\t\t\tconst input = this.tree.getInput();\n\t\t\tif (input) {\n\t\t\t\tthis.savedViewState.set(\n\t\t\t\t\tinput.getId(),\n\t\t\t\t\tthis.tree.getViewState(),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!stackFrame) {\n\t\t\t\tawait this.tree.setInput(null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewState = this.savedViewState.get(stackFrame.getId());\n\t\t\tawait this.tree.setInput(stackFrame, viewState);\n\n\t\t\t// Automatically expand the first non-expensive scope\n\t\t\tconst scopes = await stackFrame.getScopes();\n\t\t\tconst toExpand = scopes.find((s) => !s.expensive);\n\n\t\t\t// A race condition could be present causing the scopes here to be different from the scopes that the tree just retrieved.\n\t\t\t// If that happened, don't try to reveal anything, it will be straightened out on the next update\n\t\t\tif (toExpand && this.tree.hasNode(toExpand)) {\n\t\t\t\tthis.autoExpandedScopes.add(toExpand.getId());\n\t\t\t\tawait this.tree.expand(toExpand);\n\t\t\t}\n\t\t}, 400);\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis.element.classList.add(\"debug-pane\");\n\t\tcontainer.classList.add(\"debug-variables\");\n\t\tconst treeContainer = renderViewTree(container);\n\t\tconst expressionRenderer = this.instantiationService.createInstance(\n\t\t\tDebugExpressionRenderer,\n\t\t);\n\t\tthis.tree = <\n\t\t\tWorkbenchAsyncDataTree<\n\t\t\t\tIStackFrame | null,\n\t\t\t\tIExpression | IScope,\n\t\t\t\tFuzzyScore\n\t\t\t>\n\t\t>this.instantiationService.createInstance(\n\t\t\tWorkbenchAsyncDataTree,\n\t\t\t\"VariablesView\",\n\t\t\ttreeContainer,\n\t\t\tnew VariablesDelegate(),\n\t\t\t[\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tVariablesRenderer,\n\t\t\t\t\texpressionRenderer,\n\t\t\t\t),\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tVisualizedVariableRenderer,\n\t\t\t\t\texpressionRenderer,\n\t\t\t\t),\n\t\t\t\tnew ScopesRenderer(),\n\t\t\t\tnew ScopeErrorRenderer(),\n\t\t\t],\n\t\t\tthis.instantiationService.createInstance(VariablesDataSource),\n\t\t\t{\n\t\t\t\taccessibilityProvider: new VariablesAccessibilityProvider(),\n\t\t\t\tidentityProvider: {\n\t\t\t\t\tgetId: (element: IExpression | IScope) => element.getId(),\n\t\t\t\t},\n\t\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\t\tgetKeyboardNavigationLabel: (e: IExpression | IScope) =>\n\t\t\t\t\t\te.name,\n\t\t\t\t},\n\t\t\t\toverrideStyles:\n\t\t\t\t\tthis.getLocationBasedColors().listOverrideStyles,\n\t\t\t},\n\t\t);\n\n\t\tthis._register(\n\t\t\tVisualizedVariableRenderer.rendererOnVisualizationRange(\n\t\t\t\tthis.debugService.getViewModel(),\n\t\t\t\tthis.tree,\n\t\t\t),\n\t\t);\n\t\tthis.tree.setInput(\n\t\t\tthis.debugService.getViewModel().focusedStackFrame ?? null,\n\t\t);\n\n\t\tCONTEXT_VARIABLES_FOCUSED.bindTo(this.tree.contextKeyService);\n\n\t\tthis._register(\n\t\t\tthis.debugService.getViewModel().onDidFocusStackFrame((sf) => {\n\t\t\t\tif (!this.isBodyVisible()) {\n\t\t\t\t\tthis.needsRefresh = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Refresh the tree immediately if the user explictly changed stack frames.\n\t\t\t\t// Otherwise postpone the refresh until user stops stepping.\n\t\t\t\tconst timeout = sf.explicit ? 0 : undefined;\n\t\t\t\tthis.updateTreeScheduler.schedule(timeout);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.debugService.getViewModel().onWillUpdateViews(() => {\n\t\t\t\tconst stackFrame =\n\t\t\t\t\tthis.debugService.getViewModel().focusedStackFrame;\n\t\t\t\tif (stackFrame && forgetScopes) {\n\t\t\t\t\tstackFrame.forgetScopes();\n\t\t\t\t}\n\t\t\t\tforgetScopes = true;\n\t\t\t\tthis.tree.updateChildren();\n\t\t\t}),\n\t\t);\n\t\tthis._register(this.tree);\n\t\tthis._register(\n\t\t\tthis.tree.onMouseDblClick((e) => this.onMouseDblClick(e)),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.tree.onContextMenu(async (e) => await this.onContextMenu(e)),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.onDidChangeBodyVisibility((visible) => {\n\t\t\t\tif (visible && this.needsRefresh) {\n\t\t\t\t\tthis.updateTreeScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tlet horizontalScrolling: boolean | undefined;\n\t\tthis._register(\n\t\t\tthis.debugService.getViewModel().onDidSelectExpression((e) => {\n\t\t\t\tconst variable = e?.expression;\n\t\t\t\tif (variable && this.tree.hasNode(variable)) {\n\t\t\t\t\thorizontalScrolling = this.tree.options.horizontalScrolling;\n\t\t\t\t\tif (horizontalScrolling) {\n\t\t\t\t\t\tthis.tree.updateOptions({ horizontalScrolling: false });\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.tree.rerender(variable);\n\t\t\t\t} else if (!e && horizontalScrolling !== undefined) {\n\t\t\t\t\tthis.tree.updateOptions({\n\t\t\t\t\t\thorizontalScrolling: horizontalScrolling,\n\t\t\t\t\t});\n\t\t\t\t\thorizontalScrolling = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.debugService\n\t\t\t\t.getViewModel()\n\t\t\t\t.onDidEvaluateLazyExpression(async (e) => {\n\t\t\t\t\tif (e instanceof Variable && this.tree.hasNode(e)) {\n\t\t\t\t\t\tawait this.tree.updateChildren(e, false, true);\n\t\t\t\t\t\tawait this.tree.expand(e);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.debugService.onDidEndSession(() => {\n\t\t\t\tthis.savedViewState.clear();\n\t\t\t\tthis.autoExpandedScopes.clear();\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected override layoutBody(width: number, height: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.tree.layout(width, height);\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis.tree.domFocus();\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.tree.collapseAll();\n\t}\n\n\tprivate onMouseDblClick(e: ITreeMouseEvent<IExpression | IScope>): void {\n\t\tif (this.canSetExpressionValue(e.element)) {\n\t\t\tthis.debugService\n\t\t\t\t.getViewModel()\n\t\t\t\t.setSelectedExpression(e.element, false);\n\t\t}\n\t}\n\n\tprivate canSetExpressionValue(\n\t\te: IExpression | IScope | null,\n\t): e is IExpression {\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tif (!session) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (e instanceof VisualizedExpression) {\n\t\t\treturn !!e.treeItem.canEdit;\n\t\t}\n\n\t\treturn (\n\t\t\te instanceof Variable &&\n\t\t\t!e.presentationHint?.attributes?.includes(\"readOnly\") &&\n\t\t\t!e.presentationHint?.lazy\n\t\t);\n\t}\n\n\tprivate async onContextMenu(\n\t\te: ITreeContextMenuEvent<IExpression | IScope>,\n\t): Promise<void> {\n\t\tconst variable = e.element;\n\t\tif (!(variable instanceof Variable) || !variable.value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn openContextMenuForVariableTreeElement(\n\t\t\tthis.contextKeyService,\n\t\t\tthis.menuService,\n\t\t\tthis.contextMenuService,\n\t\t\tMenuId.DebugVariablesContext,\n\t\t\te,\n\t\t);\n\t}\n}\n\nexport async function openContextMenuForVariableTreeElement(\n\tparentContextKeyService: IContextKeyService,\n\tmenuService: IMenuService,\n\tcontextMenuService: IContextMenuService,\n\tmenuId: MenuId,\n\te: ITreeContextMenuEvent<IExpression | IScope>,\n) {\n\tconst variable = e.element;\n\tif (!(variable instanceof Variable) || !variable.value) {\n\t\treturn;\n\t}\n\n\tconst contextKeyService = await getContextForVariableMenuWithDataAccess(\n\t\tparentContextKeyService,\n\t\tvariable,\n\t);\n\tconst context: IVariablesContext = getVariablesContext(variable);\n\tconst menu = menuService.getMenuActions(menuId, contextKeyService, {\n\t\targ: context,\n\t\tshouldForwardArgs: false,\n\t});\n\n\tconst secondary: IAction[] = [];\n\tcreateAndFillInContextMenuActions(\n\t\tmenu,\n\t\t{ primary: [], secondary },\n\t\t\"inline\",\n\t);\n\tcontextMenuService.showContextMenu({\n\t\tgetAnchor: () => e.anchor,\n\t\tgetActions: () => secondary,\n\t});\n}\n\nconst getVariablesContext = (variable: Variable): IVariablesContext => ({\n\tsessionId: variable.getSession()?.getId(),\n\tcontainer:\n\t\tvariable.parent instanceof Expression\n\t\t\t? { expression: variable.parent.name }\n\t\t\t: (variable.parent as Variable | Scope).toDebugProtocolObject(),\n\tvariable: variable.toDebugProtocolObject(),\n});\n\n/**\n * Gets a context key overlay that has context for the given variable, including data access info.\n */\nasync function getContextForVariableMenuWithDataAccess(\n\tparentContext: IContextKeyService,\n\tvariable: Variable,\n) {\n\tconst session = variable.getSession();\n\tif (!session || !session.capabilities.supportsDataBreakpoints) {\n\t\treturn getContextForVariableMenuBase(parentContext, variable);\n\t}\n\n\tconst contextKeys: [string, unknown][] = [];\n\tdataBreakpointInfoResponse = await session.dataBreakpointInfo(\n\t\tvariable.name,\n\t\tvariable.parent.reference,\n\t);\n\tconst dataBreakpointId = dataBreakpointInfoResponse?.dataId;\n\tconst dataBreakpointAccessTypes = dataBreakpointInfoResponse?.accessTypes;\n\n\tif (dataBreakpointAccessTypes) {\n\t\tfor (const accessType of dataBreakpointAccessTypes) {\n\t\t\tswitch (accessType) {\n\t\t\t\tcase \"read\":\n\t\t\t\t\tcontextKeys.push([\n\t\t\t\t\t\tCONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED.key,\n\t\t\t\t\t\t!!dataBreakpointId,\n\t\t\t\t\t]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"write\":\n\t\t\t\t\tcontextKeys.push([\n\t\t\t\t\t\tCONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED.key,\n\t\t\t\t\t\t!!dataBreakpointId,\n\t\t\t\t\t]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"readWrite\":\n\t\t\t\t\tcontextKeys.push([\n\t\t\t\t\t\tCONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED.key,\n\t\t\t\t\t\t!!dataBreakpointId,\n\t\t\t\t\t]);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tcontextKeys.push([\n\t\t\tCONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED.key,\n\t\t\t!!dataBreakpointId,\n\t\t]);\n\t}\n\n\treturn getContextForVariableMenuBase(parentContext, variable, contextKeys);\n}\n\n/**\n * Gets a context key overlay that has context for the given variable.\n */\nfunction getContextForVariableMenuBase(\n\tparentContext: IContextKeyService,\n\tvariable: Variable,\n\tadditionalContext: [string, unknown][] = [],\n) {\n\tvariableInternalContext = variable;\n\treturn getContextForVariable(parentContext, variable, additionalContext);\n}\n\nfunction isStackFrame(obj: any): obj is IStackFrame {\n\treturn obj instanceof StackFrame;\n}\n\nclass VariablesDataSource extends AbstractExpressionDataSource<\n\tIStackFrame | null,\n\tIExpression | IScope\n> {\n\tpublic override hasChildren(\n\t\telement: IStackFrame | null | IExpression | IScope,\n\t): boolean {\n\t\tif (!element) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isStackFrame(element)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn element.hasChildren;\n\t}\n\n\tprotected override doGetChildren(\n\t\telement: IStackFrame | IExpression | IScope,\n\t): Promise<(IExpression | IScope)[]> {\n\t\tif (isStackFrame(element)) {\n\t\t\treturn element.getScopes();\n\t\t}\n\n\t\treturn element.getChildren();\n\t}\n}\n\ninterface IScopeTemplateData {\n\tname: HTMLElement;\n\tlabel: HighlightedLabel;\n}\n\nclass VariablesDelegate implements IListVirtualDelegate<IExpression | IScope> {\n\tgetHeight(element: IExpression | IScope): number {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: IExpression | IScope): string {\n\t\tif (element instanceof ErrorScope) {\n\t\t\treturn ScopeErrorRenderer.ID;\n\t\t}\n\n\t\tif (element instanceof Scope) {\n\t\t\treturn ScopesRenderer.ID;\n\t\t}\n\n\t\tif (element instanceof VisualizedExpression) {\n\t\t\treturn VisualizedVariableRenderer.ID;\n\t\t}\n\n\t\treturn VariablesRenderer.ID;\n\t}\n}\n\nclass ScopesRenderer\n\timplements ITreeRenderer<IScope, FuzzyScore, IScopeTemplateData>\n{\n\tstatic readonly ID = \"scope\";\n\n\tget templateId(): string {\n\t\treturn ScopesRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IScopeTemplateData {\n\t\tconst name = dom.append(container, $(\".scope\"));\n\t\tconst label = new HighlightedLabel(name);\n\n\t\treturn { name, label };\n\t}\n\n\trenderElement(\n\t\telement: ITreeNode<IScope, FuzzyScore>,\n\t\tindex: number,\n\t\ttemplateData: IScopeTemplateData,\n\t): void {\n\t\ttemplateData.label.set(\n\t\t\telement.element.name,\n\t\t\tcreateMatches(element.filterData),\n\t\t);\n\t}\n\n\tdisposeTemplate(templateData: IScopeTemplateData): void {\n\t\ttemplateData.label.dispose();\n\t}\n}\n\ninterface IScopeErrorTemplateData {\n\terror: HTMLElement;\n}\n\nclass ScopeErrorRenderer\n\timplements ITreeRenderer<IScope, FuzzyScore, IScopeErrorTemplateData>\n{\n\tstatic readonly ID = \"scopeError\";\n\n\tget templateId(): string {\n\t\treturn ScopeErrorRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IScopeErrorTemplateData {\n\t\tconst wrapper = dom.append(container, $(\".scope\"));\n\t\tconst error = dom.append(wrapper, $(\".error\"));\n\t\treturn { error };\n\t}\n\n\trenderElement(\n\t\telement: ITreeNode<IScope, FuzzyScore>,\n\t\tindex: number,\n\t\ttemplateData: IScopeErrorTemplateData,\n\t): void {\n\t\ttemplateData.error.innerText = element.element.name;\n\t}\n\n\tdisposeTemplate(): void {\n\t\t// noop\n\t}\n}\n\nexport class VisualizedVariableRenderer extends AbstractExpressionsRenderer {\n\tpublic static readonly ID = \"viz\";\n\n\t/**\n\t * Registers a helper that rerenders the tree when visualization is requested\n\t * or cancelled./\n\t */\n\tpublic static rendererOnVisualizationRange(\n\t\tmodel: IViewModel,\n\t\ttree: AsyncDataTree<any, any, any>,\n\t): IDisposable {\n\t\treturn model.onDidChangeVisualization(({ original }) => {\n\t\t\tif (!tree.hasNode(original)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parent: IExpression = tree.getParentElement(original);\n\t\t\ttree.updateChildren(parent, false, false);\n\t\t});\n\t}\n\n\tconstructor(\n\t\tprivate readonly expressionRenderer: DebugExpressionRenderer,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper(debugService, contextViewService, hoverService);\n\t}\n\n\tpublic override get templateId(): string {\n\t\treturn VisualizedVariableRenderer.ID;\n\t}\n\n\tpublic override renderElement(\n\t\tnode: ITreeNode<IExpression, FuzzyScore>,\n\t\tindex: number,\n\t\tdata: IExpressionTemplateData,\n\t): void {\n\t\tdata.elementDisposable.clear();\n\t\tsuper.renderExpressionElement(node.element, node, data);\n\t}\n\n\tprotected override renderExpression(\n\t\texpression: IExpression,\n\t\tdata: IExpressionTemplateData,\n\t\thighlights: IHighlight[],\n\t): void {\n\t\tconst viz = expression as VisualizedExpression;\n\n\t\tlet text = viz.name;\n\t\tif (viz.value && typeof viz.name === \"string\") {\n\t\t\ttext += \":\";\n\t\t}\n\t\tdata.label.set(text, highlights, viz.name);\n\t\tdata.elementDisposable.add(\n\t\t\tthis.expressionRenderer.renderValue(data.value, viz, {\n\t\t\t\tshowChanged: false,\n\t\t\t\tmaxValueLength: 1024,\n\t\t\t\tcolorize: true,\n\t\t\t\tsession: expression.getSession(),\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected override getInputBoxOptions(\n\t\texpression: IExpression,\n\t): IInputBoxOptions | undefined {\n\t\tconst viz = <VisualizedExpression>expression;\n\t\treturn {\n\t\t\tinitialValue: expression.value,\n\t\t\tariaLabel: localize(\n\t\t\t\t\"variableValueAriaLabel\",\n\t\t\t\t\"Type new variable value\",\n\t\t\t),\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: () =>\n\t\t\t\t\tviz.errorMessage ? { content: viz.errorMessage } : null,\n\t\t\t},\n\t\t\tonFinish: (value: string, success: boolean) => {\n\t\t\t\tviz.errorMessage = undefined;\n\t\t\t\tif (success) {\n\t\t\t\t\tviz.edit(value).then(() => {\n\t\t\t\t\t\t// Do not refresh scopes due to a node limitation #15520\n\t\t\t\t\t\tforgetScopes = false;\n\t\t\t\t\t\tthis.debugService.getViewModel().updateViews();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tprotected override renderActionBar(\n\t\tactionBar: ActionBar,\n\t\texpression: IExpression,\n\t\t_data: IExpressionTemplateData,\n\t) {\n\t\tconst viz = expression as VisualizedExpression;\n\t\tconst contextKeyService = viz.original\n\t\t\t? getContextForVariableMenuBase(\n\t\t\t\t\tthis.contextKeyService,\n\t\t\t\t\tviz.original,\n\t\t\t\t)\n\t\t\t: this.contextKeyService;\n\t\tconst context = viz.original\n\t\t\t? getVariablesContext(viz.original)\n\t\t\t: undefined;\n\t\tconst menu = this.menuService.getMenuActions(\n\t\t\tMenuId.DebugVariablesContext,\n\t\t\tcontextKeyService,\n\t\t\t{ arg: context, shouldForwardArgs: false },\n\t\t);\n\n\t\tconst primary: IAction[] = [];\n\t\tcreateAndFillInContextMenuActions(\n\t\t\tmenu,\n\t\t\t{ primary, secondary: [] },\n\t\t\t\"inline\",\n\t\t);\n\n\t\tif (viz.original) {\n\t\t\tconst action = new Action(\n\t\t\t\t\"debugViz\",\n\t\t\t\tlocalize(\"removeVisualizer\", \"Remove Visualizer\"),\n\t\t\t\tThemeIcon.asClassName(Codicon.eye),\n\t\t\t\ttrue,\n\t\t\t\t() =>\n\t\t\t\t\tthis.debugService\n\t\t\t\t\t\t.getViewModel()\n\t\t\t\t\t\t.setVisualizedExpression(viz.original!, undefined),\n\t\t\t);\n\t\t\taction.checked = true;\n\t\t\tprimary.push(action);\n\t\t\tactionBar.domNode.style.display = \"initial\";\n\t\t}\n\t\tactionBar.clear();\n\t\tactionBar.context = context;\n\t\tactionBar.push(primary, { icon: true, label: false });\n\t}\n}\n\nexport class VariablesRenderer extends AbstractExpressionsRenderer {\n\tstatic readonly ID = \"variable\";\n\n\tconstructor(\n\t\tprivate readonly expressionRenderer: DebugExpressionRenderer,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\t@IDebugVisualizerService\n\t\tprivate readonly visualization: IDebugVisualizerService,\n\t\t@IContextMenuService\n\t\tprivate readonly contextMenuService: IContextMenuService,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IHoverService hoverService: IHoverService,\n\t) {\n\t\tsuper(debugService, contextViewService, hoverService);\n\t}\n\n\tget templateId(): string {\n\t\treturn VariablesRenderer.ID;\n\t}\n\n\tprotected renderExpression(\n\t\texpression: IExpression,\n\t\tdata: IExpressionTemplateData,\n\t\thighlights: IHighlight[],\n\t): void {\n\t\tdata.elementDisposable.add(\n\t\t\tthis.expressionRenderer.renderVariable(\n\t\t\t\tdata,\n\t\t\t\texpression as Variable,\n\t\t\t\t{\n\t\t\t\t\thighlights,\n\t\t\t\t\tshowChanged: true,\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic override renderElement(\n\t\tnode: ITreeNode<IExpression, FuzzyScore>,\n\t\tindex: number,\n\t\tdata: IExpressionTemplateData,\n\t): void {\n\t\tdata.elementDisposable.clear();\n\t\tsuper.renderExpressionElement(node.element, node, data);\n\t}\n\n\tprotected getInputBoxOptions(expression: IExpression): IInputBoxOptions {\n\t\tconst variable = <Variable>expression;\n\t\treturn {\n\t\t\tinitialValue: expression.value,\n\t\t\tariaLabel: localize(\n\t\t\t\t\"variableValueAriaLabel\",\n\t\t\t\t\"Type new variable value\",\n\t\t\t),\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: () =>\n\t\t\t\t\tvariable.errorMessage\n\t\t\t\t\t\t? { content: variable.errorMessage }\n\t\t\t\t\t\t: null,\n\t\t\t},\n\t\t\tonFinish: (value: string, success: boolean) => {\n\t\t\t\tvariable.errorMessage = undefined;\n\t\t\t\tconst focusedStackFrame =\n\t\t\t\t\tthis.debugService.getViewModel().focusedStackFrame;\n\t\t\t\tif (success && variable.value !== value && focusedStackFrame) {\n\t\t\t\t\tvariable\n\t\t\t\t\t\t.setVariable(value, focusedStackFrame)\n\t\t\t\t\t\t// Need to force watch expressions and variables to update since a variable change can have an effect on both\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t// Do not refresh scopes due to a node limitation #15520\n\t\t\t\t\t\t\tforgetScopes = false;\n\t\t\t\t\t\t\tthis.debugService.getViewModel().updateViews();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tprotected override renderActionBar(\n\t\tactionBar: ActionBar,\n\t\texpression: IExpression,\n\t\tdata: IExpressionTemplateData,\n\t) {\n\t\tconst variable = expression as Variable;\n\t\tconst contextKeyService = getContextForVariableMenuBase(\n\t\t\tthis.contextKeyService,\n\t\t\tvariable,\n\t\t);\n\n\t\tconst primary: IAction[] = [];\n\t\tconst context = getVariablesContext(variable);\n\t\tconst menu = this.menuService.getMenuActions(\n\t\t\tMenuId.DebugVariablesContext,\n\t\t\tcontextKeyService,\n\t\t\t{ arg: context, shouldForwardArgs: false },\n\t\t);\n\t\tcreateAndFillInContextMenuActions(\n\t\t\tmenu,\n\t\t\t{ primary, secondary: [] },\n\t\t\t\"inline\",\n\t\t);\n\n\t\tactionBar.clear();\n\t\tactionBar.context = context;\n\t\tactionBar.push(primary, { icon: true, label: false });\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tdata.elementDisposable.add(toDisposable(() => cts.dispose(true)));\n\t\tthis.visualization\n\t\t\t.getApplicableFor(expression, cts.token)\n\t\t\t.then((result) => {\n\t\t\t\tdata.elementDisposable.add(result);\n\n\t\t\t\tconst originalExpression =\n\t\t\t\t\t(expression instanceof VisualizedExpression &&\n\t\t\t\t\t\texpression.original) ||\n\t\t\t\t\texpression;\n\t\t\t\tconst actions = result.object.map(\n\t\t\t\t\t(v) =>\n\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\"debugViz\",\n\t\t\t\t\t\t\tv.name,\n\t\t\t\t\t\t\tv.iconClass || \"debug-viz-icon\",\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tthis.useVisualizer(\n\t\t\t\t\t\t\t\tv,\n\t\t\t\t\t\t\t\toriginalExpression,\n\t\t\t\t\t\t\t\tcts.token,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (actions.length === 0) {\n\t\t\t\t\t// no-op\n\t\t\t\t} else if (actions.length === 1) {\n\t\t\t\t\tactionBar.push(actions[0], { icon: true, label: false });\n\t\t\t\t} else {\n\t\t\t\t\tactionBar.push(\n\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\"debugViz\",\n\t\t\t\t\t\t\tlocalize(\"useVisualizer\", \"Visualize Variable...\"),\n\t\t\t\t\t\t\tThemeIcon.asClassName(Codicon.eye),\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\tthis.pickVisualizer(\n\t\t\t\t\t\t\t\t\tactions,\n\t\t\t\t\t\t\t\t\toriginalExpression,\n\t\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{ icon: true, label: false },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate pickVisualizer(\n\t\tactions: IAction[],\n\t\texpression: IExpression,\n\t\tdata: IExpressionTemplateData,\n\t) {\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => data.actionBar!.getContainer(),\n\t\t\tgetActions: () => actions,\n\t\t});\n\t}\n\n\tprivate useVisualizer(\n\t\tviz: DebugVisualizer,\n\t\texpression: IExpression,\n\t\ttoken: CancellationToken,\n\t) {\n\t\treturn async () => {\n\t\t\tconst resolved = await viz.resolve(token);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resolved.type === DebugVisualizationType.Command) {\n\t\t\t\tviz.execute();\n\t\t\t} else {\n\t\t\t\tconst replacement =\n\t\t\t\t\tawait this.visualization.getVisualizedNodeFor(\n\t\t\t\t\t\tresolved.id,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t);\n\t\t\t\tif (replacement) {\n\t\t\t\t\tthis.debugService\n\t\t\t\t\t\t.getViewModel()\n\t\t\t\t\t\t.setVisualizedExpression(expression, replacement);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass VariablesAccessibilityProvider\n\timplements IListAccessibilityProvider<IExpression | IScope>\n{\n\tgetWidgetAriaLabel(): string {\n\t\treturn localize(\"variablesAriaTreeLabel\", \"Debug Variables\");\n\t}\n\n\tgetAriaLabel(element: IExpression | IScope): string | null {\n\t\tif (element instanceof Scope) {\n\t\t\treturn localize(\n\t\t\t\t\"variableScopeAriaLabel\",\n\t\t\t\t\"Scope {0}\",\n\t\t\t\telement.name,\n\t\t\t);\n\t\t}\n\t\tif (element instanceof Variable) {\n\t\t\treturn localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"variableAriaLabel\",\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\"Placeholders are variable name and variable value respectivly. They should not be translated.\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\"{0}, value {1}\",\n\t\t\t\telement.name,\n\t\t\t\telement.value,\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\nexport const SET_VARIABLE_ID = \"debug.setVariable\";\nCommandsRegistry.registerCommand({\n\tid: SET_VARIABLE_ID,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tdebugService\n\t\t\t.getViewModel()\n\t\t\t.setSelectedExpression(variableInternalContext, false);\n\t},\n});\n\nCommandsRegistry.registerCommand({\n\tmetadata: {\n\t\tdescription: COPY_VALUE_LABEL,\n\t},\n\tid: COPY_VALUE_ID,\n\thandler: async (\n\t\taccessor: ServicesAccessor,\n\t\targ: Variable | Expression | IVariablesContext,\n\t\tctx?: (Variable | Expression)[],\n\t) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tlet elementContext = \"\";\n\t\tlet elements: (Variable | Expression)[];\n\t\tif (arg instanceof Variable || arg instanceof Expression) {\n\t\t\telementContext = \"watch\";\n\t\t\telements = ctx ? ctx : [];\n\t\t} else {\n\t\t\telementContext = \"variables\";\n\t\t\telements = variableInternalContext ? [variableInternalContext] : [];\n\t\t}\n\n\t\tconst stackFrame = debugService.getViewModel().focusedStackFrame;\n\t\tconst session = debugService.getViewModel().focusedSession;\n\t\tif (!stackFrame || !session || elements.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst evalContext = session.capabilities.supportsClipboardContext\n\t\t\t? \"clipboard\"\n\t\t\t: elementContext;\n\t\tconst toEvaluate = elements.map((element) =>\n\t\t\telement instanceof Variable\n\t\t\t\t? element.evaluateName || element.value\n\t\t\t\t: element.name,\n\t\t);\n\n\t\ttry {\n\t\t\tconst evaluations = await Promise.all(\n\t\t\t\ttoEvaluate.map((expr) =>\n\t\t\t\t\tsession.evaluate(expr, stackFrame.frameId, evalContext),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst result = coalesce(evaluations).map(\n\t\t\t\t(evaluation) => evaluation.body.result,\n\t\t\t);\n\t\t\tif (result.length) {\n\t\t\t\tclipboardService.writeText(result.join(\"\\n\"));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconst result = elements.map((element) => element.value);\n\t\t\tclipboardService.writeText(result.join(\"\\n\"));\n\t\t}\n\t},\n});\n\nexport const VIEW_MEMORY_ID = \"workbench.debug.viewlet.action.viewMemory\";\n\nconst HEX_EDITOR_EXTENSION_ID = \"ms-vscode.hexeditor\";\nconst HEX_EDITOR_EDITOR_ID = \"hexEditor.hexedit\";\n\nCommandsRegistry.registerCommand({\n\tid: VIEW_MEMORY_ID,\n\thandler: async (\n\t\taccessor: ServicesAccessor,\n\t\targ: IVariablesContext | IExpression,\n\t\tctx?: (Variable | Expression)[],\n\t) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tlet sessionId: string;\n\t\tlet memoryReference: string;\n\t\tif (\"sessionId\" in arg) {\n\t\t\t// IVariablesContext\n\t\t\tif (!arg.sessionId || !arg.variable.memoryReference) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsessionId = arg.sessionId;\n\t\t\tmemoryReference = arg.variable.memoryReference;\n\t\t} else {\n\t\t\t// IExpression\n\t\t\tif (!arg.memoryReference) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst focused = debugService.getViewModel().focusedSession;\n\t\t\tif (!focused) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsessionId = focused.getId();\n\t\t\tmemoryReference = arg.memoryReference;\n\t\t}\n\n\t\tconst extensionsWorkbenchService = accessor.get(\n\t\t\tIExtensionsWorkbenchService,\n\t\t);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\tconst ext = await extensionService.getExtension(\n\t\t\tHEX_EDITOR_EXTENSION_ID,\n\t\t);\n\t\tif (\n\t\t\text ||\n\t\t\t(await tryInstallHexEditor(\n\t\t\t\textensionsWorkbenchService,\n\t\t\t\tnotificationService,\n\t\t\t))\n\t\t) {\n\t\t\t/* __GDPR__\n\t\t\t\t\"debug/didViewMemory\" : {\n\t\t\t\t\t\"owner\": \"connor4312\",\n\t\t\t\t\t\"debugType\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\ttelemetryService.publicLog(\"debug/didViewMemory\", {\n\t\t\t\tdebugType: debugService.getModel().getSession(sessionId)\n\t\t\t\t\t?.configuration.type,\n\t\t\t});\n\n\t\t\tawait editorService.openEditor(\n\t\t\t\t{\n\t\t\t\t\tresource: getUriForDebugMemory(sessionId, memoryReference),\n\t\t\t\t\toptions: {\n\t\t\t\t\t\trevealIfOpened: true,\n\t\t\t\t\t\toverride: HEX_EDITOR_EDITOR_ID,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSIDE_GROUP,\n\t\t\t);\n\t\t}\n\t},\n});\n\nasync function tryInstallHexEditor(\n\textensionsWorkbenchService: IExtensionsWorkbenchService,\n\tnotificationService: INotificationService,\n): Promise<boolean> {\n\ttry {\n\t\tawait extensionsWorkbenchService.install(\n\t\t\tHEX_EDITOR_EXTENSION_ID,\n\t\t\t{\n\t\t\t\tjustification: localize(\n\t\t\t\t\t\"viewMemory.prompt\",\n\t\t\t\t\t\"Inspecting binary data requires this extension.\",\n\t\t\t\t),\n\t\t\t\tenable: true,\n\t\t\t},\n\t\t\tProgressLocation.Notification,\n\t\t);\n\t\treturn true;\n\t} catch (error) {\n\t\tnotificationService.error(error);\n\t\treturn false;\n\t}\n}\n\nexport const BREAK_WHEN_VALUE_CHANGES_ID = \"debug.breakWhenValueChanges\";\nCommandsRegistry.registerCommand({\n\tid: BREAK_WHEN_VALUE_CHANGES_ID,\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tif (dataBreakpointInfoResponse) {\n\t\t\tawait debugService.addDataBreakpoint({\n\t\t\t\tdescription: dataBreakpointInfoResponse.description,\n\t\t\t\tsrc: {\n\t\t\t\t\ttype: DataBreakpointSetType.Variable,\n\t\t\t\t\tdataId: dataBreakpointInfoResponse.dataId!,\n\t\t\t\t},\n\t\t\t\tcanPersist: !!dataBreakpointInfoResponse.canPersist,\n\t\t\t\taccessTypes: dataBreakpointInfoResponse.accessTypes,\n\t\t\t\taccessType: \"write\",\n\t\t\t});\n\t\t}\n\t},\n});\n\nexport const BREAK_WHEN_VALUE_IS_ACCESSED_ID = \"debug.breakWhenValueIsAccessed\";\nCommandsRegistry.registerCommand({\n\tid: BREAK_WHEN_VALUE_IS_ACCESSED_ID,\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tif (dataBreakpointInfoResponse) {\n\t\t\tawait debugService.addDataBreakpoint({\n\t\t\t\tdescription: dataBreakpointInfoResponse.description,\n\t\t\t\tsrc: {\n\t\t\t\t\ttype: DataBreakpointSetType.Variable,\n\t\t\t\t\tdataId: dataBreakpointInfoResponse.dataId!,\n\t\t\t\t},\n\t\t\t\tcanPersist: !!dataBreakpointInfoResponse.canPersist,\n\t\t\t\taccessTypes: dataBreakpointInfoResponse.accessTypes,\n\t\t\t\taccessType: \"readWrite\",\n\t\t\t});\n\t\t}\n\t},\n});\n\nexport const BREAK_WHEN_VALUE_IS_READ_ID = \"debug.breakWhenValueIsRead\";\nCommandsRegistry.registerCommand({\n\tid: BREAK_WHEN_VALUE_IS_READ_ID,\n\thandler: async (accessor: ServicesAccessor) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tif (dataBreakpointInfoResponse) {\n\t\t\tawait debugService.addDataBreakpoint({\n\t\t\t\tdescription: dataBreakpointInfoResponse.description,\n\t\t\t\tsrc: {\n\t\t\t\t\ttype: DataBreakpointSetType.Variable,\n\t\t\t\t\tdataId: dataBreakpointInfoResponse.dataId!,\n\t\t\t\t},\n\t\t\t\tcanPersist: !!dataBreakpointInfoResponse.canPersist,\n\t\t\t\taccessTypes: dataBreakpointInfoResponse.accessTypes,\n\t\t\t\taccessType: \"read\",\n\t\t\t});\n\t\t}\n\t},\n});\n\nCommandsRegistry.registerCommand({\n\tmetadata: {\n\t\tdescription: COPY_EVALUATE_PATH_LABEL,\n\t},\n\tid: COPY_EVALUATE_PATH_ID,\n\thandler: async (accessor: ServicesAccessor, context: IVariablesContext) => {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tawait clipboardService.writeText(context.variable.evaluateName!);\n\t},\n});\n\nCommandsRegistry.registerCommand({\n\tmetadata: {\n\t\tdescription: ADD_TO_WATCH_LABEL,\n\t},\n\tid: ADD_TO_WATCH_ID,\n\thandler: async (accessor: ServicesAccessor, context: IVariablesContext) => {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tdebugService.addWatchExpression(context.variable.evaluateName);\n\t},\n});\n\nregisterAction2(\n\tclass extends ViewAction<VariablesView> {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"variables.collapse\",\n\t\t\t\tviewId: VARIABLES_VIEW_ID,\n\t\t\t\ttitle: localize(\"collapse\", \"Collapse All\"),\n\t\t\t\tf1: false,\n\t\t\t\ticon: Codicon.collapseAll,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\twhen: ContextKeyExpr.equals(\"view\", VARIABLES_VIEW_ID),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\trunInView(_accessor: ServicesAccessor, view: VariablesView) {\n\t\t\tview.collapseAll();\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": []
}
