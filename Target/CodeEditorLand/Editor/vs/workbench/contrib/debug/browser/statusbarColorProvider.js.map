{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ILayoutService } from \"../../../../platform/layout/browser/layoutService.js\";\nimport {\n\tasCssVariable,\n\tasCssVariableName,\n\tregisterColor,\n\ttransparent,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tCOMMAND_CENTER_BACKGROUND,\n\tSTATUS_BAR_BORDER,\n\tSTATUS_BAR_FOREGROUND,\n} from \"../../../common/theme.js\";\nimport { IStatusbarService } from \"../../../services/statusbar/browser/statusbar.js\";\nimport {\n\ttype IDebugConfiguration,\n\tIDebugService,\n\ttype IDebugSession,\n\tState,\n} from \"../common/debug.js\";\n\n// colors for theming\n\nexport const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor(\n\t\"statusBar.debuggingBackground\",\n\t{\n\t\tdark: \"#CC6633\",\n\t\tlight: \"#CC6633\",\n\t\thcDark: \"#BA592C\",\n\t\thcLight: \"#B5200D\",\n\t},\n\tlocalize(\n\t\t\"statusBarDebuggingBackground\",\n\t\t\"Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window\",\n\t),\n);\n\nexport const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor(\n\t\"statusBar.debuggingForeground\",\n\t{\n\t\tdark: STATUS_BAR_FOREGROUND,\n\t\tlight: STATUS_BAR_FOREGROUND,\n\t\thcDark: STATUS_BAR_FOREGROUND,\n\t\thcLight: \"#FFFFFF\",\n\t},\n\tlocalize(\n\t\t\"statusBarDebuggingForeground\",\n\t\t\"Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window\",\n\t),\n);\n\nexport const STATUS_BAR_DEBUGGING_BORDER = registerColor(\n\t\"statusBar.debuggingBorder\",\n\tSTATUS_BAR_BORDER,\n\tlocalize(\n\t\t\"statusBarDebuggingBorder\",\n\t\t\"Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window\",\n\t),\n);\n\nexport const COMMAND_CENTER_DEBUGGING_BACKGROUND = registerColor(\n\t\"commandCenter.debuggingBackground\",\n\ttransparent(STATUS_BAR_DEBUGGING_BACKGROUND, 0.258),\n\tlocalize(\n\t\t\"commandCenter-activeBackground\",\n\t\t\"Command center background color when a program is being debugged\",\n\t),\n\ttrue,\n);\n\nexport class StatusBarColorProvider implements IWorkbenchContribution {\n\tprivate readonly disposables = new DisposableStore();\n\tprivate disposable: IDisposable | undefined;\n\n\tprivate set enabled(enabled: boolean) {\n\t\tif (enabled === !!this.disposable) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (enabled) {\n\t\t\tthis.disposable = this.statusbarService.overrideStyle({\n\t\t\t\tpriority: 10,\n\t\t\t\tforeground: STATUS_BAR_DEBUGGING_FOREGROUND,\n\t\t\t\tbackground: STATUS_BAR_DEBUGGING_BACKGROUND,\n\t\t\t\tborder: STATUS_BAR_DEBUGGING_BORDER,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.disposable!.dispose();\n\t\t\tthis.disposable = undefined;\n\t\t}\n\t}\n\n\tconstructor(\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tthis.debugService.onDidChangeState(this.update, this, this.disposables);\n\t\tthis.contextService.onDidChangeWorkbenchState(\n\t\t\tthis.update,\n\t\t\tthis,\n\t\t\tthis.disposables,\n\t\t);\n\t\tthis.configurationService.onDidChangeConfiguration(\n\t\t\t(e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\"debug.enableStatusBarColor\") ||\n\t\t\t\t\te.affectsConfiguration(\"debug.toolBarLocation\")\n\t\t\t\t) {\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t},\n\t\t\tundefined,\n\t\t\tthis.disposables,\n\t\t);\n\t\tthis.update();\n\t}\n\n\tprotected update(): void {\n\t\tconst debugConfig =\n\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\"debug\");\n\t\tconst isInDebugMode = isStatusbarInDebugMode(\n\t\t\tthis.debugService.state,\n\t\t\tthis.debugService.getModel().getSessions(),\n\t\t);\n\t\tif (debugConfig.enableStatusBarColor) {\n\t\t\tthis.enabled = isInDebugMode;\n\t\t} else {\n\t\t\tthis.enabled = false;\n\t\t}\n\n\t\tconst isInCommandCenter =\n\t\t\tdebugConfig.toolBarLocation === \"commandCenter\";\n\t\tthis.layoutService.mainContainer.style.setProperty(\n\t\t\tasCssVariableName(COMMAND_CENTER_BACKGROUND),\n\t\t\tisInCommandCenter && isInDebugMode\n\t\t\t\t? asCssVariable(COMMAND_CENTER_DEBUGGING_BACKGROUND)\n\t\t\t\t: \"\",\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable?.dispose();\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport function isStatusbarInDebugMode(\n\tstate: State,\n\tsessions: IDebugSession[],\n): boolean {\n\tif (\n\t\tstate === State.Inactive ||\n\t\tstate === State.Initializing ||\n\t\tsessions.every(\n\t\t\t(s) => s.suppressDebugStatusbar || s.configuration?.noDebug,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": []
}
