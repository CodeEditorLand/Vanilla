{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { asCssVariable, asCssVariableName, registerColor, transparent } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IDebugService, State, IDebugSession, IDebugConfiguration } from '../common/debug.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { STATUS_BAR_FOREGROUND, STATUS_BAR_BORDER, COMMAND_CENTER_BACKGROUND } from '../../../common/theme.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IStatusbarService } from '../../../services/statusbar/browser/statusbar.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ILayoutService } from '../../../../platform/layout/browser/layoutService.js';\n\n\n// colors for theming\n\nexport const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor('statusBar.debuggingBackground', {\n\tdark: '#CC6633',\n\tlight: '#CC6633',\n\thcDark: '#BA592C',\n\thcLight: '#B5200D'\n}, localize('statusBarDebuggingBackground', \"Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor('statusBar.debuggingForeground', {\n\tdark: STATUS_BAR_FOREGROUND,\n\tlight: STATUS_BAR_FOREGROUND,\n\thcDark: STATUS_BAR_FOREGROUND,\n\thcLight: '#FFFFFF'\n}, localize('statusBarDebuggingForeground', \"Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_BORDER = registerColor('statusBar.debuggingBorder', STATUS_BAR_BORDER, localize('statusBarDebuggingBorder', \"Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const COMMAND_CENTER_DEBUGGING_BACKGROUND = registerColor(\n\t'commandCenter.debuggingBackground',\n\ttransparent(STATUS_BAR_DEBUGGING_BACKGROUND, 0.258),\n\tlocalize('commandCenter-activeBackground', \"Command center background color when a program is being debugged\"),\n\ttrue\n);\n\nexport class StatusBarColorProvider implements IWorkbenchContribution {\n\n\tprivate readonly disposables = new DisposableStore();\n\tprivate disposable: IDisposable | undefined;\n\n\tprivate set enabled(enabled: boolean) {\n\t\tif (enabled === !!this.disposable) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (enabled) {\n\t\t\tthis.disposable = this.statusbarService.overrideStyle({\n\t\t\t\tpriority: 10,\n\t\t\t\tforeground: STATUS_BAR_DEBUGGING_FOREGROUND,\n\t\t\t\tbackground: STATUS_BAR_DEBUGGING_BACKGROUND,\n\t\t\t\tborder: STATUS_BAR_DEBUGGING_BORDER,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.disposable!.dispose();\n\t\t\tthis.disposable = undefined;\n\t\t}\n\t}\n\n\tconstructor(\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis.debugService.onDidChangeState(this.update, this, this.disposables);\n\t\tthis.contextService.onDidChangeWorkbenchState(this.update, this, this.disposables);\n\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration('debug.enableStatusBarColor') || e.affectsConfiguration('debug.toolBarLocation')) {\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t}, undefined, this.disposables);\n\t\tthis.update();\n\t}\n\n\tprotected update(): void {\n\t\tconst debugConfig = this.configurationService.getValue<IDebugConfiguration>('debug');\n\t\tconst isInDebugMode = isStatusbarInDebugMode(this.debugService.state, this.debugService.getModel().getSessions());\n\t\tif (!debugConfig.enableStatusBarColor) {\n\t\t\tthis.enabled = false;\n\t\t} else {\n\t\t\tthis.enabled = isInDebugMode;\n\t\t}\n\n\t\tconst isInCommandCenter = debugConfig.toolBarLocation === 'commandCenter';\n\t\tthis.layoutService.mainContainer.style.setProperty(asCssVariableName(COMMAND_CENTER_BACKGROUND), isInCommandCenter && isInDebugMode\n\t\t\t? asCssVariable(COMMAND_CENTER_DEBUGGING_BACKGROUND)\n\t\t\t: ''\n\t\t);\n\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable?.dispose();\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport function isStatusbarInDebugMode(state: State, sessions: IDebugSession[]): boolean {\n\tif (state === State.Inactive || state === State.Initializing || sessions.every(s => s.suppressDebugStatusbar || s.configuration?.noDebug)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": []
}
