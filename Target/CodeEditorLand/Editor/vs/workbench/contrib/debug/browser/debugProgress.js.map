{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugProgress.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { IDisposable, dispose } from '../../../../base/common/lifecycle.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IDebugService, IDebugSession, VIEWLET_ID } from '../common/debug.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\n\nexport class DebugProgressContribution implements IWorkbenchContribution {\n\n\tprivate toDispose: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IViewsService viewsService: IViewsService\n\t) {\n\t\tlet progressListener: IDisposable | undefined;\n\t\tconst listenOnProgress = (session: IDebugSession | undefined) => {\n\t\t\tif (progressListener) {\n\t\t\t\tprogressListener.dispose();\n\t\t\t\tprogressListener = undefined;\n\t\t\t}\n\t\t\tif (session) {\n\t\t\t\tprogressListener = session.onDidProgressStart(async progressStartEvent => {\n\t\t\t\t\tconst promise = new Promise<void>(r => {\n\t\t\t\t\t\t// Show progress until a progress end event comes or the session ends\n\t\t\t\t\t\tconst listener = Event.any(Event.filter(session.onDidProgressEnd, e => e.body.progressId === progressStartEvent.body.progressId),\n\t\t\t\t\t\t\tsession.onDidEndAdapter)(() => {\n\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\tr();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tif (viewsService.isViewContainerVisible(VIEWLET_ID)) {\n\t\t\t\t\t\tprogressService.withProgress({ location: VIEWLET_ID }, () => promise);\n\t\t\t\t\t}\n\t\t\t\t\tconst source = debugService.getAdapterManager().getDebuggerLabel(session.configuration.type);\n\t\t\t\t\tprogressService.withProgress({\n\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\ttitle: progressStartEvent.body.title,\n\t\t\t\t\t\tcancellable: progressStartEvent.body.cancellable,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\tdelay: 500\n\t\t\t\t\t}, progressStep => {\n\t\t\t\t\t\tlet total = 0;\n\t\t\t\t\t\tconst reportProgress = (progress: { message?: string; percentage?: number }) => {\n\t\t\t\t\t\t\tlet increment = undefined;\n\t\t\t\t\t\t\tif (typeof progress.percentage === 'number') {\n\t\t\t\t\t\t\t\tincrement = progress.percentage - total;\n\t\t\t\t\t\t\t\ttotal += increment;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprogressStep.report({\n\t\t\t\t\t\t\t\tmessage: progress.message,\n\t\t\t\t\t\t\t\tincrement,\n\t\t\t\t\t\t\t\ttotal: typeof increment === 'number' ? 100 : undefined,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (progressStartEvent.body.message) {\n\t\t\t\t\t\t\treportProgress(progressStartEvent.body);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst progressUpdateListener = session.onDidProgressUpdate(e => {\n\t\t\t\t\t\t\tif (e.body.progressId === progressStartEvent.body.progressId) {\n\t\t\t\t\t\t\t\treportProgress(e.body);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn promise.then(() => progressUpdateListener.dispose());\n\t\t\t\t\t}, () => session.cancel(progressStartEvent.body.progressId));\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tthis.toDispose.push(debugService.getViewModel().onDidFocusSession(listenOnProgress));\n\t\tlistenOnProgress(debugService.getViewModel().focusedSession);\n\t\tthis.toDispose.push(debugService.onWillNewSession(session => {\n\t\t\tif (!progressListener) {\n\t\t\t\tlistenOnProgress(session);\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.toDispose);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa;AACtB,SAAS,aAAa,eAAe;AACrC,SAAS,kBAAkB,wBAAwB;AACnD,SAAS,8BAA8B;AACvC,SAAS,eAAe,eAAe,kBAAkB;AACzD,SAAS,qBAAqB;AAEvB,IAAM,4BAAN,MAAkE;AAAA,EAZzE,OAYyE;AAAA;AAAA;AAAA,EAEhE,YAA2B,CAAC;AAAA,EAEpC,YACgB,cACG,iBACH,cACd;AACD,QAAI;AACJ,UAAM,mBAAmB,wBAAC,YAAuC;AAChE,UAAI,kBAAkB;AACrB,yBAAiB,QAAQ;AACzB,2BAAmB;AAAA,MACpB;AACA,UAAI,SAAS;AACZ,2BAAmB,QAAQ,mBAAmB,OAAM,uBAAsB;AACzE,gBAAM,UAAU,IAAI,QAAc,OAAK;AAEtC,kBAAM,WAAW,MAAM;AAAA,cAAI,MAAM,OAAO,QAAQ,kBAAkB,OAAK,EAAE,KAAK,eAAe,mBAAmB,KAAK,UAAU;AAAA,cAC9H,QAAQ;AAAA,YAAe,EAAE,MAAM;AAC9B,uBAAS,QAAQ;AACjB,gBAAE;AAAA,YACH,CAAC;AAAA,UACH,CAAC;AAED,cAAI,aAAa,uBAAuB,UAAU,GAAG;AACpD,4BAAgB,aAAa,EAAE,UAAU,WAAW,GAAG,MAAM,OAAO;AAAA,UACrE;AACA,gBAAM,SAAS,aAAa,kBAAkB,EAAE,iBAAiB,QAAQ,cAAc,IAAI;AAC3F,0BAAgB,aAAa;AAAA,YAC5B,UAAU,iBAAiB;AAAA,YAC3B,OAAO,mBAAmB,KAAK;AAAA,YAC/B,aAAa,mBAAmB,KAAK;AAAA,YACrC;AAAA,YACA,OAAO;AAAA,UACR,GAAG,kBAAgB;AAClB,gBAAI,QAAQ;AACZ,kBAAM,iBAAiB,wBAAC,aAAwD;AAC/E,kBAAI,YAAY;AAChB,kBAAI,OAAO,SAAS,eAAe,UAAU;AAC5C,4BAAY,SAAS,aAAa;AAClC,yBAAS;AAAA,cACV;AACA,2BAAa,OAAO;AAAA,gBACnB,SAAS,SAAS;AAAA,gBAClB;AAAA,gBACA,OAAO,OAAO,cAAc,WAAW,MAAM;AAAA,cAC9C,CAAC;AAAA,YACF,GAXuB;AAavB,gBAAI,mBAAmB,KAAK,SAAS;AACpC,6BAAe,mBAAmB,IAAI;AAAA,YACvC;AACA,kBAAM,yBAAyB,QAAQ,oBAAoB,OAAK;AAC/D,kBAAI,EAAE,KAAK,eAAe,mBAAmB,KAAK,YAAY;AAC7D,+BAAe,EAAE,IAAI;AAAA,cACtB;AAAA,YACD,CAAC;AAED,mBAAO,QAAQ,KAAK,MAAM,uBAAuB,QAAQ,CAAC;AAAA,UAC3D,GAAG,MAAM,QAAQ,OAAO,mBAAmB,KAAK,UAAU,CAAC;AAAA,QAC5D,CAAC;AAAA,MACF;AAAA,IACD,GAtDyB;AAuDzB,SAAK,UAAU,KAAK,aAAa,aAAa,EAAE,kBAAkB,gBAAgB,CAAC;AACnF,qBAAiB,aAAa,aAAa,EAAE,cAAc;AAC3D,SAAK,UAAU,KAAK,aAAa,iBAAiB,aAAW;AAC5D,UAAI,CAAC,kBAAkB;AACtB,yBAAiB,OAAO;AAAA,MACzB;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAEA,UAAgB;AACf,YAAQ,KAAK,SAAS;AAAA,EACvB;AACD;AA7Ea,4BAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,GAPU;",
  "names": []
}
