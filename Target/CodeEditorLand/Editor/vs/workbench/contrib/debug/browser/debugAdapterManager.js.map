{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugAdapterManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport type {\n\tIJSONSchema,\n\tIJSONSchemaMap,\n} from \"../../../../base/common/jsonSchema.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { isCodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport type { IEditorModel } from \"../../../../editor/common/editorCommon.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tIMenuService,\n\tMenuId,\n\tMenuItemAction,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IJSONContributionRegistry,\n\tExtensions as JSONExtensions,\n} from \"../../../../platform/jsonschemas/common/jsonContributionRegistry.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport type { IWorkspaceFolder } from \"../../../../platform/workspace/common/workspace.js\";\nimport { launchSchemaId } from \"../../../services/configuration/common/configuration.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { TaskDefinitionRegistry } from \"../../tasks/common/taskDefinitionRegistry.js\";\nimport { ITaskService } from \"../../tasks/common/taskService.js\";\nimport { Breakpoints } from \"../common/breakpoints.js\";\nimport {\n\tCONTEXT_DEBUGGERS_AVAILABLE,\n\tCONTEXT_DEBUG_EXTENSION_AVAILABLE,\n\ttype IAdapterDescriptor,\n\ttype IAdapterManager,\n\ttype IConfig,\n\ttype IDebugAdapter,\n\ttype IDebugAdapterDescriptorFactory,\n\ttype IDebugAdapterFactory,\n\ttype IDebugConfiguration,\n\ttype IDebugSession,\n\tINTERNAL_CONSOLE_OPTIONS_SCHEMA,\n} from \"../common/debug.js\";\nimport {\n\tbreakpointsExtPoint,\n\tdebuggersExtPoint,\n\tlaunchSchema,\n\tpresentationSchema,\n} from \"../common/debugSchemas.js\";\nimport { Debugger } from \"../common/debugger.js\";\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(\n\tJSONExtensions.JSONContribution,\n);\n\nexport interface IAdapterManagerDelegate {\n\tonDidNewSession: Event<IDebugSession>;\n}\n\nexport class AdapterManager extends Disposable implements IAdapterManager {\n\tprivate debuggers: Debugger[];\n\tprivate adapterDescriptorFactories: IDebugAdapterDescriptorFactory[];\n\tprivate debugAdapterFactories = new Map<string, IDebugAdapterFactory>();\n\tprivate debuggersAvailable!: IContextKey<boolean>;\n\tprivate debugExtensionsAvailable!: IContextKey<boolean>;\n\tprivate readonly _onDidRegisterDebugger = new Emitter<void>();\n\tprivate readonly _onDidDebuggersExtPointRead = new Emitter<void>();\n\tprivate breakpointContributions: Breakpoints[] = [];\n\tprivate debuggerWhenKeys = new Set<string>();\n\tprivate taskLabels: string[] = [];\n\n\t/** Extensions that were already active before any debugger activation events */\n\tprivate earlyActivatedExtensions: Set<string> | undefined;\n\n\tprivate usedDebugTypes = new Set<string>();\n\n\tconstructor(\n\t\tdelegate: IAdapterManagerDelegate,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@ITaskService private readonly tasksService: ITaskService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t) {\n\t\tsuper();\n\t\tthis.adapterDescriptorFactories = [];\n\t\tthis.debuggers = [];\n\t\tthis.registerListeners();\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.debuggersAvailable =\n\t\t\t\tCONTEXT_DEBUGGERS_AVAILABLE.bindTo(contextKeyService);\n\t\t\tthis.debugExtensionsAvailable =\n\t\t\t\tCONTEXT_DEBUG_EXTENSION_AVAILABLE.bindTo(contextKeyService);\n\t\t});\n\t\tthis._register(\n\t\t\tthis.contextKeyService.onDidChangeContext((e) => {\n\t\t\t\tif (e.affectsSome(this.debuggerWhenKeys)) {\n\t\t\t\t\tthis.debuggersAvailable.set(this.hasEnabledDebuggers());\n\t\t\t\t\tthis.updateDebugAdapterSchema();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onDidDebuggersExtPointRead(() => {\n\t\t\t\tthis.debugExtensionsAvailable.set(this.debuggers.length > 0);\n\t\t\t}),\n\t\t);\n\n\t\t// generous debounce since this will end up calling `resolveTask` internally\n\t\tconst updateTaskScheduler = this._register(\n\t\t\tnew RunOnceScheduler(() => this.updateTaskLabels(), 5000),\n\t\t);\n\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\ttasksService.onDidChangeTaskConfig,\n\t\t\t\ttasksService.onDidChangeTaskProviders,\n\t\t\t)(() => {\n\t\t\t\tupdateTaskScheduler.cancel();\n\t\t\t\tupdateTaskScheduler.schedule();\n\t\t\t}),\n\t\t);\n\t\tthis.lifecycleService\n\t\t\t.when(LifecyclePhase.Eventually)\n\t\t\t.then(() =>\n\t\t\t\tthis.debugExtensionsAvailable.set(this.debuggers.length > 0),\n\t\t\t); // If no extensions with a debugger contribution are loaded\n\n\t\tthis._register(\n\t\t\tdelegate.onDidNewSession((s) => {\n\t\t\t\tthis.usedDebugTypes.add(s.configuration.type);\n\t\t\t}),\n\t\t);\n\n\t\tupdateTaskScheduler.schedule();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tdebuggersExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.added.forEach((added) => {\n\t\t\t\tadded.value.forEach((rawAdapter) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!rawAdapter.type ||\n\t\t\t\t\t\ttypeof rawAdapter.type !== \"string\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tadded.collector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"debugNoType\",\n\t\t\t\t\t\t\t\t\"Debugger 'type' can not be omitted and must be of type 'string'.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rawAdapter.type !== \"*\") {\n\t\t\t\t\t\tconst existing = this.getDebugger(rawAdapter.type);\n\t\t\t\t\t\tif (existing) {\n\t\t\t\t\t\t\texisting.merge(rawAdapter, added.description);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst dbg =\n\t\t\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\t\t\tDebugger,\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\trawAdapter,\n\t\t\t\t\t\t\t\t\tadded.description,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdbg.when\n\t\t\t\t\t\t\t\t?.keys()\n\t\t\t\t\t\t\t\t.forEach((key) =>\n\t\t\t\t\t\t\t\t\tthis.debuggerWhenKeys.add(key),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.debuggers.push(dbg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// take care of all wildcard contributions\n\t\t\textensions.forEach((extension) => {\n\t\t\t\textension.value.forEach((rawAdapter) => {\n\t\t\t\t\tif (rawAdapter.type === \"*\") {\n\t\t\t\t\t\tthis.debuggers.forEach((dbg) =>\n\t\t\t\t\t\t\tdbg.merge(rawAdapter, extension.description),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdelta.removed.forEach((removed) => {\n\t\t\t\tconst removedTypes = removed.value.map(\n\t\t\t\t\t(rawAdapter) => rawAdapter.type,\n\t\t\t\t);\n\t\t\t\tthis.debuggers = this.debuggers.filter(\n\t\t\t\t\t(d) => removedTypes.indexOf(d.type) === -1,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tthis.updateDebugAdapterSchema();\n\t\t\tthis._onDidDebuggersExtPointRead.fire();\n\t\t});\n\n\t\tbreakpointsExtPoint.setHandler((extensions) => {\n\t\t\tthis.breakpointContributions = extensions.flatMap((ext) =>\n\t\t\t\text.value.map((breakpoint) =>\n\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\tBreakpoints,\n\t\t\t\t\t\tbreakpoint,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate updateTaskLabels() {\n\t\tthis.tasksService.getKnownTasks().then((tasks) => {\n\t\t\tthis.taskLabels = tasks.map((task) => task._label);\n\t\t\tthis.updateDebugAdapterSchema();\n\t\t});\n\t}\n\n\tprivate updateDebugAdapterSchema() {\n\t\t// update the schema to include all attributes, snippets and types from extensions.\n\t\tconst items = <IJSONSchema>(\n\t\t\tlaunchSchema.properties![\"configurations\"].items\n\t\t);\n\t\tconst taskSchema = TaskDefinitionRegistry.getJsonSchema();\n\t\tconst definitions: IJSONSchemaMap = {\n\t\t\tcommon: {\n\t\t\t\tproperties: {\n\t\t\t\t\tname: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"debugName\",\n\t\t\t\t\t\t\t\"Name of configuration; appears in the launch configuration dropdown menu.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdefault: \"Launch\",\n\t\t\t\t\t},\n\t\t\t\t\tdebugServer: {\n\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"debugServer\",\n\t\t\t\t\t\t\t\"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdefault: 4711,\n\t\t\t\t\t},\n\t\t\t\t\tpreLaunchTask: {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\ttaskSchema,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: [\"string\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: \"\",\n\t\t\t\t\t\tdefaultSnippets: [{ body: { task: \"\", type: \"\" } }],\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"debugPrelaunchTask\",\n\t\t\t\t\t\t\t\"Task to run before debug session starts.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\texamples: this.taskLabels,\n\t\t\t\t\t},\n\t\t\t\t\tpostDebugTask: {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\ttaskSchema,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: [\"string\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: \"\",\n\t\t\t\t\t\tdefaultSnippets: [{ body: { task: \"\", type: \"\" } }],\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"debugPostDebugTask\",\n\t\t\t\t\t\t\t\"Task to run after debug session ends.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\texamples: this.taskLabels,\n\t\t\t\t\t},\n\t\t\t\t\tpresentation: presentationSchema,\n\t\t\t\t\tinternalConsoleOptions: INTERNAL_CONSOLE_OPTIONS_SCHEMA,\n\t\t\t\t\tsuppressMultipleSessionWarning: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"suppressMultipleSessionWarning\",\n\t\t\t\t\t\t\t\"Disable the warning when trying to start the same debug configuration more than once.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tlaunchSchema.definitions = definitions;\n\t\titems.oneOf = [];\n\t\titems.defaultSnippets = [];\n\t\tthis.debuggers.forEach((adapter) => {\n\t\t\tconst schemaAttributes = adapter.getSchemaAttributes(definitions);\n\t\t\tif (schemaAttributes && items.oneOf) {\n\t\t\t\titems.oneOf.push(...schemaAttributes);\n\t\t\t}\n\t\t\tconst configurationSnippets = adapter.configurationSnippets;\n\t\t\tif (configurationSnippets && items.defaultSnippets) {\n\t\t\t\titems.defaultSnippets.push(...configurationSnippets);\n\t\t\t}\n\t\t});\n\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\t}\n\n\tregisterDebugAdapterFactory(\n\t\tdebugTypes: string[],\n\t\tdebugAdapterLauncher: IDebugAdapterFactory,\n\t): IDisposable {\n\t\tdebugTypes.forEach((debugType) =>\n\t\t\tthis.debugAdapterFactories.set(debugType, debugAdapterLauncher),\n\t\t);\n\t\tthis.debuggersAvailable.set(this.hasEnabledDebuggers());\n\t\tthis._onDidRegisterDebugger.fire();\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tdebugTypes.forEach((debugType) =>\n\t\t\t\t\tthis.debugAdapterFactories.delete(debugType),\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t}\n\n\thasEnabledDebuggers(): boolean {\n\t\tfor (const [type] of this.debugAdapterFactories) {\n\t\t\tconst dbg = this.getDebugger(type);\n\t\t\tif (dbg && dbg.enabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter | undefined {\n\t\tconst factory = this.debugAdapterFactories.get(\n\t\t\tsession.configuration.type,\n\t\t);\n\t\tif (factory) {\n\t\t\treturn factory.createDebugAdapter(session);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsubstituteVariables(\n\t\tdebugType: string,\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: IConfig,\n\t): Promise<IConfig> {\n\t\tconst factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.substituteVariables(folder, config);\n\t\t}\n\t\treturn Promise.resolve(config);\n\t}\n\n\trunInTerminal(\n\t\tdebugType: string,\n\t\targs: DebugProtocol.RunInTerminalRequestArguments,\n\t\tsessionId: string,\n\t): Promise<number | undefined> {\n\t\tconst factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.runInTerminal(args, sessionId);\n\t\t}\n\t\treturn Promise.resolve(void 0);\n\t}\n\n\tregisterDebugAdapterDescriptorFactory(\n\t\tdebugAdapterProvider: IDebugAdapterDescriptorFactory,\n\t): IDisposable {\n\t\tthis.adapterDescriptorFactories.push(debugAdapterProvider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugAdapterDescriptorFactory(\n\t\t\t\t\tdebugAdapterProvider,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t}\n\n\tunregisterDebugAdapterDescriptorFactory(\n\t\tdebugAdapterProvider: IDebugAdapterDescriptorFactory,\n\t): void {\n\t\tconst ix =\n\t\t\tthis.adapterDescriptorFactories.indexOf(debugAdapterProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.adapterDescriptorFactories.splice(ix, 1);\n\t\t}\n\t}\n\n\tgetDebugAdapterDescriptor(\n\t\tsession: IDebugSession,\n\t): Promise<IAdapterDescriptor | undefined> {\n\t\tconst config = session.configuration;\n\t\tconst providers = this.adapterDescriptorFactories.filter(\n\t\t\t(p) => p.type === config.type && p.createDebugAdapterDescriptor,\n\t\t);\n\t\tif (providers.length === 1) {\n\t\t\treturn providers[0].createDebugAdapterDescriptor(session);\n\t\t} else {\n\t\t\t// TODO@AW handle n > 1 case\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tgetDebuggerLabel(type: string): string | undefined {\n\t\tconst dbgr = this.getDebugger(type);\n\t\tif (dbgr) {\n\t\t\treturn dbgr.label;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget onDidRegisterDebugger(): Event<void> {\n\t\treturn this._onDidRegisterDebugger.event;\n\t}\n\n\tget onDidDebuggersExtPointRead(): Event<void> {\n\t\treturn this._onDidDebuggersExtPointRead.event;\n\t}\n\n\tcanSetBreakpointsIn(model: ITextModel): boolean {\n\t\tconst languageId = model.getLanguageId();\n\t\tif (!languageId || languageId === \"jsonc\" || languageId === \"log\") {\n\t\t\t// do not allow breakpoints in our settings files and output\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\"debug\")\n\t\t\t\t.allowBreakpointsEverywhere\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.breakpointContributions.some(\n\t\t\t(breakpoints) =>\n\t\t\t\tbreakpoints.language === languageId && breakpoints.enabled,\n\t\t);\n\t}\n\n\tgetDebugger(type: string): Debugger | undefined {\n\t\treturn this.debuggers.find((dbg) =>\n\t\t\tstrings.equalsIgnoreCase(dbg.type, type),\n\t\t);\n\t}\n\n\tgetEnabledDebugger(type: string): Debugger | undefined {\n\t\tconst adapter = this.getDebugger(type);\n\t\treturn adapter && adapter.enabled ? adapter : undefined;\n\t}\n\n\tsomeDebuggerInterestedInLanguage(languageId: string): boolean {\n\t\treturn !!this.debuggers\n\t\t\t.filter((d) => d.enabled)\n\t\t\t.find((a) => a.interestedInLanguage(languageId));\n\t}\n\n\tasync guessDebugger(\n\t\tgettingConfigurations: boolean,\n\t): Promise<Debugger | undefined> {\n\t\tconst activeTextEditorControl =\n\t\t\tthis.editorService.activeTextEditorControl;\n\t\tlet candidates: Debugger[] = [];\n\t\tlet languageLabel: string | null = null;\n\t\tlet model: IEditorModel | null = null;\n\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\tmodel = activeTextEditorControl.getModel();\n\t\t\tconst language = model ? model.getLanguageId() : undefined;\n\t\t\tif (language) {\n\t\t\t\tlanguageLabel = this.languageService.getLanguageName(language);\n\t\t\t}\n\t\t\tconst adapters = this.debuggers\n\t\t\t\t.filter((a) => a.enabled)\n\t\t\t\t.filter((a) => language && a.interestedInLanguage(language));\n\t\t\tif (adapters.length === 1) {\n\t\t\t\treturn adapters[0];\n\t\t\t}\n\t\t\tif (adapters.length > 1) {\n\t\t\t\tcandidates = adapters;\n\t\t\t}\n\t\t}\n\n\t\t// We want to get the debuggers that have configuration providers in the case we are fetching configurations\n\t\t// Or if a breakpoint can be set in the current file (good hint that an extension can handle it)\n\t\tif (\n\t\t\t(!languageLabel ||\n\t\t\t\tgettingConfigurations ||\n\t\t\t\t(model && this.canSetBreakpointsIn(model))) &&\n\t\t\tcandidates.length === 0\n\t\t) {\n\t\t\tawait this.activateDebuggers(\"onDebugInitialConfigurations\");\n\n\t\t\tcandidates = this.debuggers\n\t\t\t\t.filter((a) => a.enabled)\n\t\t\t\t.filter(\n\t\t\t\t\t(dbg) =>\n\t\t\t\t\t\tdbg.hasInitialConfiguration() ||\n\t\t\t\t\t\tdbg.hasDynamicConfigurationProviders() ||\n\t\t\t\t\t\tdbg.hasConfigurationProvider(),\n\t\t\t\t);\n\t\t}\n\n\t\tif (candidates.length === 0 && languageLabel) {\n\t\t\tif (languageLabel.indexOf(\" \") >= 0) {\n\t\t\t\tlanguageLabel = `'${languageLabel}'`;\n\t\t\t}\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\ttype: Severity.Warning,\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"CouldNotFindLanguage\",\n\t\t\t\t\t\"You don't have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?\",\n\t\t\t\t\tlanguageLabel,\n\t\t\t\t),\n\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"findExtension\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Find {0} extension\",\n\t\t\t\t\tlanguageLabel,\n\t\t\t\t),\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\tawait this.commandService.executeCommand(\n\t\t\t\t\t\"debug.installAdditionalDebuggers\",\n\t\t\t\t\tlanguageLabel,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.initExtensionActivationsIfNeeded();\n\n\t\tcandidates.sort((first, second) =>\n\t\t\tfirst.label.localeCompare(second.label),\n\t\t);\n\t\tcandidates = candidates.filter((a) => !a.isHiddenFromDropdown);\n\n\t\tconst suggestedCandidates: Debugger[] = [];\n\t\tconst otherCandidates: Debugger[] = [];\n\t\tcandidates.forEach((d) => {\n\t\t\tconst descriptor = d.getMainExtensionDescriptor();\n\t\t\tif (\n\t\t\t\tdescriptor.id &&\n\t\t\t\t!!this.earlyActivatedExtensions?.has(descriptor.id)\n\t\t\t) {\n\t\t\t\t// Was activated early\n\t\t\t\tsuggestedCandidates.push(d);\n\t\t\t} else if (this.usedDebugTypes.has(d.type)) {\n\t\t\t\t// Was used already\n\t\t\t\tsuggestedCandidates.push(d);\n\t\t\t} else {\n\t\t\t\totherCandidates.push(d);\n\t\t\t}\n\t\t});\n\n\t\tconst picks: (\n\t\t\t| { label: string; debugger?: Debugger; type?: string }\n\t\t\t| MenuItemAction\n\t\t)[] = [];\n\t\tif (suggestedCandidates.length > 0) {\n\t\t\tpicks.push(\n\t\t\t\t{\n\t\t\t\t\ttype: \"separator\",\n\t\t\t\t\tlabel: nls.localize(\"suggestedDebuggers\", \"Suggested\"),\n\t\t\t\t},\n\t\t\t\t...suggestedCandidates.map((c) => ({\n\t\t\t\t\tlabel: c.label,\n\t\t\t\t\tdebugger: c,\n\t\t\t\t})),\n\t\t\t);\n\t\t}\n\n\t\tif (otherCandidates.length > 0) {\n\t\t\tif (picks.length > 0) {\n\t\t\t\tpicks.push({ type: \"separator\", label: \"\" });\n\t\t\t}\n\n\t\t\tpicks.push(\n\t\t\t\t...otherCandidates.map((c) => ({\n\t\t\t\t\tlabel: c.label,\n\t\t\t\t\tdebugger: c,\n\t\t\t\t})),\n\t\t\t);\n\t\t}\n\n\t\tpicks.push(\n\t\t\t{ type: \"separator\", label: \"\" },\n\t\t\t{\n\t\t\t\tlabel: languageLabel\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"installLanguage\",\n\t\t\t\t\t\t\t\"Install an extension for {0}...\",\n\t\t\t\t\t\t\tlanguageLabel,\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\"installExt\", \"Install extension...\"),\n\t\t\t},\n\t\t);\n\n\t\tconst contributed = this.menuService.getMenuActions(\n\t\t\tMenuId.DebugCreateConfiguration,\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tfor (const [, action] of contributed) {\n\t\t\tfor (const item of action) {\n\t\t\t\tpicks.push(item);\n\t\t\t}\n\t\t}\n\t\tconst placeHolder = nls.localize(\"selectDebug\", \"Select debugger\");\n\t\treturn this.quickInputService\n\t\t\t.pick<{ label: string; debugger?: Debugger } | IQuickPickItem>(\n\t\t\t\tpicks,\n\t\t\t\t{ activeItem: picks[0], placeHolder },\n\t\t\t)\n\t\t\t.then(async (picked) => {\n\t\t\t\tif (picked && \"debugger\" in picked && picked.debugger) {\n\t\t\t\t\treturn picked.debugger;\n\t\t\t\t} else if (picked instanceof MenuItemAction) {\n\t\t\t\t\tpicked.run();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (picked) {\n\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\"debug.installAdditionalDebuggers\",\n\t\t\t\t\t\tlanguageLabel,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\tprivate initExtensionActivationsIfNeeded(): void {\n\t\tif (!this.earlyActivatedExtensions) {\n\t\t\tthis.earlyActivatedExtensions = new Set<string>();\n\n\t\t\tconst status = this.extensionService.getExtensionsStatus();\n\t\t\tfor (const id in status) {\n\t\t\t\tif (!!status[id].activationTimes) {\n\t\t\t\t\tthis.earlyActivatedExtensions.add(id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync activateDebuggers(\n\t\tactivationEvent: string,\n\t\tdebugType?: string,\n\t): Promise<void> {\n\t\tthis.initExtensionActivationsIfNeeded();\n\n\t\tconst promises: Promise<any>[] = [\n\t\t\tthis.extensionService.activateByEvent(activationEvent),\n\t\t\tthis.extensionService.activateByEvent(\"onDebug\"),\n\t\t];\n\t\tif (debugType) {\n\t\t\tpromises.push(\n\t\t\t\tthis.extensionService.activateByEvent(\n\t\t\t\t\t`${activationEvent}:${debugType}`,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
