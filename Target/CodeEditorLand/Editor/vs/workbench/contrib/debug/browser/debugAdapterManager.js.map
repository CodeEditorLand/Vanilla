{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugAdapterManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IJSONSchema, IJSONSchemaMap } from '../../../../base/common/jsonSchema.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport Severity from '../../../../base/common/severity.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { isCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IEditorModel } from '../../../../editor/common/editorCommon.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport * as nls from '../../../../nls.js';\nimport { IMenuService, MenuId, MenuItemAction } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Extensions as JSONExtensions, IJSONContributionRegistry } from '../../../../platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { Breakpoints } from '../common/breakpoints.js';\nimport { CONTEXT_DEBUGGERS_AVAILABLE, CONTEXT_DEBUG_EXTENSION_AVAILABLE, IAdapterDescriptor, IAdapterManager, IConfig, IDebugAdapter, IDebugAdapterDescriptorFactory, IDebugAdapterFactory, IDebugConfiguration, IDebugSession, INTERNAL_CONSOLE_OPTIONS_SCHEMA } from '../common/debug.js';\nimport { Debugger } from '../common/debugger.js';\nimport { breakpointsExtPoint, debuggersExtPoint, launchSchema, presentationSchema } from '../common/debugSchemas.js';\nimport { TaskDefinitionRegistry } from '../../tasks/common/taskDefinitionRegistry.js';\nimport { ITaskService } from '../../tasks/common/taskService.js';\nimport { launchSchemaId } from '../../../services/configuration/common/configuration.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { ILifecycleService, LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\nexport interface IAdapterManagerDelegate {\n\tonDidNewSession: Event<IDebugSession>;\n}\n\nexport class AdapterManager extends Disposable implements IAdapterManager {\n\n\tprivate debuggers: Debugger[];\n\tprivate adapterDescriptorFactories: IDebugAdapterDescriptorFactory[];\n\tprivate debugAdapterFactories = new Map<string, IDebugAdapterFactory>();\n\tprivate debuggersAvailable!: IContextKey<boolean>;\n\tprivate debugExtensionsAvailable!: IContextKey<boolean>;\n\tprivate readonly _onDidRegisterDebugger = new Emitter<void>();\n\tprivate readonly _onDidDebuggersExtPointRead = new Emitter<void>();\n\tprivate breakpointContributions: Breakpoints[] = [];\n\tprivate debuggerWhenKeys = new Set<string>();\n\tprivate taskLabels: string[] = [];\n\n\t/** Extensions that were already active before any debugger activation events */\n\tprivate earlyActivatedExtensions: Set<string> | undefined;\n\n\tprivate usedDebugTypes = new Set<string>();\n\n\tconstructor(\n\t\tdelegate: IAdapterManagerDelegate,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@ITaskService private readonly tasksService: ITaskService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t) {\n\t\tsuper();\n\t\tthis.adapterDescriptorFactories = [];\n\t\tthis.debuggers = [];\n\t\tthis.registerListeners();\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.debuggersAvailable = CONTEXT_DEBUGGERS_AVAILABLE.bindTo(contextKeyService);\n\t\t\tthis.debugExtensionsAvailable = CONTEXT_DEBUG_EXTENSION_AVAILABLE.bindTo(contextKeyService);\n\t\t});\n\t\tthis._register(this.contextKeyService.onDidChangeContext(e => {\n\t\t\tif (e.affectsSome(this.debuggerWhenKeys)) {\n\t\t\t\tthis.debuggersAvailable.set(this.hasEnabledDebuggers());\n\t\t\t\tthis.updateDebugAdapterSchema();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.onDidDebuggersExtPointRead(() => {\n\t\t\tthis.debugExtensionsAvailable.set(this.debuggers.length > 0);\n\t\t}));\n\n\t\t// generous debounce since this will end up calling `resolveTask` internally\n\t\tconst updateTaskScheduler = this._register(new RunOnceScheduler(() => this.updateTaskLabels(), 5000));\n\n\t\tthis._register(Event.any(tasksService.onDidChangeTaskConfig, tasksService.onDidChangeTaskProviders)(() => {\n\t\t\tupdateTaskScheduler.cancel();\n\t\t\tupdateTaskScheduler.schedule();\n\t\t}));\n\t\tthis.lifecycleService.when(LifecyclePhase.Eventually)\n\t\t\t.then(() => this.debugExtensionsAvailable.set(this.debuggers.length > 0)); // If no extensions with a debugger contribution are loaded\n\n\t\tthis._register(delegate.onDidNewSession(s => {\n\t\t\tthis.usedDebugTypes.add(s.configuration.type);\n\t\t}));\n\n\t\tupdateTaskScheduler.schedule();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tdebuggersExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.added.forEach(added => {\n\t\t\t\tadded.value.forEach(rawAdapter => {\n\t\t\t\t\tif (!rawAdapter.type || (typeof rawAdapter.type !== 'string')) {\n\t\t\t\t\t\tadded.collector.error(nls.localize('debugNoType', \"Debugger 'type' can not be omitted and must be of type 'string'.\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rawAdapter.type !== '*') {\n\t\t\t\t\t\tconst existing = this.getDebugger(rawAdapter.type);\n\t\t\t\t\t\tif (existing) {\n\t\t\t\t\t\t\texisting.merge(rawAdapter, added.description);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst dbg = this.instantiationService.createInstance(Debugger, this, rawAdapter, added.description);\n\t\t\t\t\t\t\tdbg.when?.keys().forEach(key => this.debuggerWhenKeys.add(key));\n\t\t\t\t\t\t\tthis.debuggers.push(dbg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// take care of all wildcard contributions\n\t\t\textensions.forEach(extension => {\n\t\t\t\textension.value.forEach(rawAdapter => {\n\t\t\t\t\tif (rawAdapter.type === '*') {\n\t\t\t\t\t\tthis.debuggers.forEach(dbg => dbg.merge(rawAdapter, extension.description));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdelta.removed.forEach(removed => {\n\t\t\t\tconst removedTypes = removed.value.map(rawAdapter => rawAdapter.type);\n\t\t\t\tthis.debuggers = this.debuggers.filter(d => removedTypes.indexOf(d.type) === -1);\n\t\t\t});\n\n\t\t\tthis.updateDebugAdapterSchema();\n\t\t\tthis._onDidDebuggersExtPointRead.fire();\n\t\t});\n\n\t\tbreakpointsExtPoint.setHandler(extensions => {\n\t\t\tthis.breakpointContributions = extensions.flatMap(ext => ext.value.map(breakpoint => this.instantiationService.createInstance(Breakpoints, breakpoint)));\n\t\t});\n\t}\n\n\tprivate updateTaskLabels() {\n\t\tthis.tasksService.getKnownTasks().then(tasks => {\n\t\t\tthis.taskLabels = tasks.map(task => task._label);\n\t\t\tthis.updateDebugAdapterSchema();\n\t\t});\n\t}\n\n\tprivate updateDebugAdapterSchema() {\n\t\t// update the schema to include all attributes, snippets and types from extensions.\n\t\tconst items = (<IJSONSchema>launchSchema.properties!['configurations'].items);\n\t\tconst taskSchema = TaskDefinitionRegistry.getJsonSchema();\n\t\tconst definitions: IJSONSchemaMap = {\n\t\t\t'common': {\n\t\t\t\tproperties: {\n\t\t\t\t\t'name': {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('debugName', \"Name of configuration; appears in the launch configuration dropdown menu.\"),\n\t\t\t\t\t\tdefault: 'Launch'\n\t\t\t\t\t},\n\t\t\t\t\t'debugServer': {\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdescription: nls.localize('debugServer', \"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode\"),\n\t\t\t\t\t\tdefault: 4711\n\t\t\t\t\t},\n\t\t\t\t\t'preLaunchTask': {\n\t\t\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\t\t\ttype: ['string']\n\t\t\t\t\t\t}],\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdefaultSnippets: [{ body: { task: '', type: '' } }],\n\t\t\t\t\t\tdescription: nls.localize('debugPrelaunchTask', \"Task to run before debug session starts.\"),\n\t\t\t\t\t\texamples: this.taskLabels,\n\t\t\t\t\t},\n\t\t\t\t\t'postDebugTask': {\n\t\t\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\t\t\ttype: ['string'],\n\t\t\t\t\t\t}],\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdefaultSnippets: [{ body: { task: '', type: '' } }],\n\t\t\t\t\t\tdescription: nls.localize('debugPostDebugTask', \"Task to run after debug session ends.\"),\n\t\t\t\t\t\texamples: this.taskLabels,\n\t\t\t\t\t},\n\t\t\t\t\t'presentation': presentationSchema,\n\t\t\t\t\t'internalConsoleOptions': INTERNAL_CONSOLE_OPTIONS_SCHEMA,\n\t\t\t\t\t'suppressMultipleSessionWarning': {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdescription: nls.localize('suppressMultipleSessionWarning', \"Disable the warning when trying to start the same debug configuration more than once.\"),\n\t\t\t\t\t\tdefault: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tlaunchSchema.definitions = definitions;\n\t\titems.oneOf = [];\n\t\titems.defaultSnippets = [];\n\t\tthis.debuggers.forEach(adapter => {\n\t\t\tconst schemaAttributes = adapter.getSchemaAttributes(definitions);\n\t\t\tif (schemaAttributes && items.oneOf) {\n\t\t\t\titems.oneOf.push(...schemaAttributes);\n\t\t\t}\n\t\t\tconst configurationSnippets = adapter.configurationSnippets;\n\t\t\tif (configurationSnippets && items.defaultSnippets) {\n\t\t\t\titems.defaultSnippets.push(...configurationSnippets);\n\t\t\t}\n\t\t});\n\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\t}\n\n\tregisterDebugAdapterFactory(debugTypes: string[], debugAdapterLauncher: IDebugAdapterFactory): IDisposable {\n\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.set(debugType, debugAdapterLauncher));\n\t\tthis.debuggersAvailable.set(this.hasEnabledDebuggers());\n\t\tthis._onDidRegisterDebugger.fire();\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.delete(debugType));\n\t\t\t}\n\t\t};\n\t}\n\n\thasEnabledDebuggers(): boolean {\n\t\tfor (const [type] of this.debugAdapterFactories) {\n\t\t\tconst dbg = this.getDebugger(type);\n\t\t\tif (dbg && dbg.enabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter | undefined {\n\t\tconst factory = this.debugAdapterFactories.get(session.configuration.type);\n\t\tif (factory) {\n\t\t\treturn factory.createDebugAdapter(session);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsubstituteVariables(debugType: string, folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\tconst factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.substituteVariables(folder, config);\n\t\t}\n\t\treturn Promise.resolve(config);\n\t}\n\n\trunInTerminal(debugType: string, args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\tconst factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.runInTerminal(args, sessionId);\n\t\t}\n\t\treturn Promise.resolve(void 0);\n\t}\n\n\tregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): IDisposable {\n\t\tthis.adapterDescriptorFactories.push(debugAdapterProvider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugAdapterDescriptorFactory(debugAdapterProvider);\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): void {\n\t\tconst ix = this.adapterDescriptorFactories.indexOf(debugAdapterProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.adapterDescriptorFactories.splice(ix, 1);\n\t\t}\n\t}\n\n\tgetDebugAdapterDescriptor(session: IDebugSession): Promise<IAdapterDescriptor | undefined> {\n\t\tconst config = session.configuration;\n\t\tconst providers = this.adapterDescriptorFactories.filter(p => p.type === config.type && p.createDebugAdapterDescriptor);\n\t\tif (providers.length === 1) {\n\t\t\treturn providers[0].createDebugAdapterDescriptor(session);\n\t\t} else {\n\t\t\t// TODO@AW handle n > 1 case\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tgetDebuggerLabel(type: string): string | undefined {\n\t\tconst dbgr = this.getDebugger(type);\n\t\tif (dbgr) {\n\t\t\treturn dbgr.label;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget onDidRegisterDebugger(): Event<void> {\n\t\treturn this._onDidRegisterDebugger.event;\n\t}\n\n\tget onDidDebuggersExtPointRead(): Event<void> {\n\t\treturn this._onDidDebuggersExtPointRead.event;\n\t}\n\n\tcanSetBreakpointsIn(model: ITextModel): boolean {\n\t\tconst languageId = model.getLanguageId();\n\t\tif (!languageId || languageId === 'jsonc' || languageId === 'log') {\n\t\t\t// do not allow breakpoints in our settings files and output\n\t\t\treturn false;\n\t\t}\n\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').allowBreakpointsEverywhere) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.breakpointContributions.some(breakpoints => breakpoints.language === languageId && breakpoints.enabled);\n\t}\n\n\tgetDebugger(type: string): Debugger | undefined {\n\t\treturn this.debuggers.find(dbg => strings.equalsIgnoreCase(dbg.type, type));\n\t}\n\n\tgetEnabledDebugger(type: string): Debugger | undefined {\n\t\tconst adapter = this.getDebugger(type);\n\t\treturn adapter && adapter.enabled ? adapter : undefined;\n\t}\n\n\tsomeDebuggerInterestedInLanguage(languageId: string): boolean {\n\t\treturn !!this.debuggers\n\t\t\t.filter(d => d.enabled)\n\t\t\t.find(a => a.interestedInLanguage(languageId));\n\t}\n\n\tasync guessDebugger(gettingConfigurations: boolean): Promise<Debugger | undefined> {\n\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\tlet candidates: Debugger[] = [];\n\t\tlet languageLabel: string | null = null;\n\t\tlet model: IEditorModel | null = null;\n\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\tmodel = activeTextEditorControl.getModel();\n\t\t\tconst language = model ? model.getLanguageId() : undefined;\n\t\t\tif (language) {\n\t\t\t\tlanguageLabel = this.languageService.getLanguageName(language);\n\t\t\t}\n\t\t\tconst adapters = this.debuggers\n\t\t\t\t.filter(a => a.enabled)\n\t\t\t\t.filter(a => language && a.interestedInLanguage(language));\n\t\t\tif (adapters.length === 1) {\n\t\t\t\treturn adapters[0];\n\t\t\t}\n\t\t\tif (adapters.length > 1) {\n\t\t\t\tcandidates = adapters;\n\t\t\t}\n\t\t}\n\n\t\t// We want to get the debuggers that have configuration providers in the case we are fetching configurations\n\t\t// Or if a breakpoint can be set in the current file (good hint that an extension can handle it)\n\t\tif ((!languageLabel || gettingConfigurations || (model && this.canSetBreakpointsIn(model))) && candidates.length === 0) {\n\t\t\tawait this.activateDebuggers('onDebugInitialConfigurations');\n\n\t\t\tcandidates = this.debuggers\n\t\t\t\t.filter(a => a.enabled)\n\t\t\t\t.filter(dbg => dbg.hasInitialConfiguration() || dbg.hasDynamicConfigurationProviders() || dbg.hasConfigurationProvider());\n\t\t}\n\n\t\tif (candidates.length === 0 && languageLabel) {\n\t\t\tif (languageLabel.indexOf(' ') >= 0) {\n\t\t\t\tlanguageLabel = `'${languageLabel}'`;\n\t\t\t}\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\ttype: Severity.Warning,\n\t\t\t\tmessage: nls.localize('CouldNotFindLanguage', \"You don't have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?\", languageLabel),\n\t\t\t\tprimaryButton: nls.localize({ key: 'findExtension', comment: ['&& denotes a mnemonic'] }, \"&&Find {0} extension\", languageLabel)\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\tawait this.commandService.executeCommand('debug.installAdditionalDebuggers', languageLabel);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.initExtensionActivationsIfNeeded();\n\n\t\tcandidates.sort((first, second) => first.label.localeCompare(second.label));\n\t\tcandidates = candidates.filter(a => !a.isHiddenFromDropdown);\n\n\t\tconst suggestedCandidates: Debugger[] = [];\n\t\tconst otherCandidates: Debugger[] = [];\n\t\tcandidates.forEach(d => {\n\t\t\tconst descriptor = d.getMainExtensionDescriptor();\n\t\t\tif (descriptor.id && !!this.earlyActivatedExtensions?.has(descriptor.id)) {\n\t\t\t\t// Was activated early\n\t\t\t\tsuggestedCandidates.push(d);\n\t\t\t} else if (this.usedDebugTypes.has(d.type)) {\n\t\t\t\t// Was used already\n\t\t\t\tsuggestedCandidates.push(d);\n\t\t\t} else {\n\t\t\t\totherCandidates.push(d);\n\t\t\t}\n\t\t});\n\n\t\tconst picks: ({ label: string; debugger?: Debugger; type?: string } | MenuItemAction)[] = [];\n\t\tif (suggestedCandidates.length > 0) {\n\t\t\tpicks.push(\n\t\t\t\t{ type: 'separator', label: nls.localize('suggestedDebuggers', \"Suggested\") },\n\t\t\t\t...suggestedCandidates.map(c => ({ label: c.label, debugger: c })));\n\t\t}\n\n\t\tif (otherCandidates.length > 0) {\n\t\t\tif (picks.length > 0) {\n\t\t\t\tpicks.push({ type: 'separator', label: '' });\n\t\t\t}\n\n\t\t\tpicks.push(...otherCandidates.map(c => ({ label: c.label, debugger: c })));\n\t\t}\n\n\t\tpicks.push(\n\t\t\t{ type: 'separator', label: '' },\n\t\t\t{ label: languageLabel ? nls.localize('installLanguage', \"Install an extension for {0}...\", languageLabel) : nls.localize('installExt', \"Install extension...\") });\n\n\t\tconst contributed = this.menuService.getMenuActions(MenuId.DebugCreateConfiguration, this.contextKeyService);\n\t\tfor (const [, action] of contributed) {\n\t\t\tfor (const item of action) {\n\t\t\t\tpicks.push(item);\n\t\t\t}\n\t\t}\n\t\tconst placeHolder = nls.localize('selectDebug', \"Select debugger\");\n\t\treturn this.quickInputService.pick<{ label: string; debugger?: Debugger } | IQuickPickItem>(picks, { activeItem: picks[0], placeHolder })\n\t\t\t.then(async picked => {\n\t\t\t\tif (picked && 'debugger' in picked && picked.debugger) {\n\t\t\t\t\treturn picked.debugger;\n\t\t\t\t} else if (picked instanceof MenuItemAction) {\n\t\t\t\t\tpicked.run();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (picked) {\n\t\t\t\t\tthis.commandService.executeCommand('debug.installAdditionalDebuggers', languageLabel);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\tprivate initExtensionActivationsIfNeeded(): void {\n\t\tif (!this.earlyActivatedExtensions) {\n\t\t\tthis.earlyActivatedExtensions = new Set<string>();\n\n\t\t\tconst status = this.extensionService.getExtensionsStatus();\n\t\t\tfor (const id in status) {\n\t\t\t\tif (!!status[id].activationTimes) {\n\t\t\t\t\tthis.earlyActivatedExtensions.add(id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync activateDebuggers(activationEvent: string, debugType?: string): Promise<void> {\n\t\tthis.initExtensionActivationsIfNeeded();\n\n\t\tconst promises: Promise<any>[] = [\n\t\t\tthis.extensionService.activateByEvent(activationEvent),\n\t\t\tthis.extensionService.activateByEvent('onDebug')\n\t\t];\n\t\tif (debugType) {\n\t\t\tpromises.push(this.extensionService.activateByEvent(`${activationEvent}:${debugType}`));\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,SAAS,aAAa;AAC/B,SAAS,aAAa,sBAAsB;AAC5C,SAAS,YAAY,mBAAmB;AACxC,OAAO,cAAc;AACrB,YAAY,aAAa;AACzB,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,YAAY,SAAS;AACrB,SAAS,cAAc,QAAQ,sBAAsB;AACrD,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,aAAa,0BAA0B;AAChD,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B;AACtC,SAAS,cAAc,gBAAgB,iCAAiC;AACxE,SAAS,oBAAoB,sBAAsB;AACnD,SAAS,gBAAgB;AACzB,SAAS,wBAAwB;AACjC,SAAS,mBAAmB;AAC5B,SAAS,6BAA6B,mCAAmC,oBAAoB,iBAAiB,SAAS,eAAe,gCAAgC,sBAAsB,qBAAqB,eAAe,uCAAuC;AACvQ,SAAS,gBAAgB;AACzB,SAAS,qBAAqB,mBAAmB,cAAc,0BAA0B;AACzF,SAAS,8BAA8B;AACvC,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,SAAS,mBAAmB,sBAAsB;AAElD,MAAM,eAAe,SAAS,GAA8B,eAAe,gBAAgB;AAMpF,IAAM,iBAAN,cAA6B,WAAsC;AAAA,EAkBzE,YACC,UACiC,eACO,sBACH,mBACG,sBACN,gBACE,kBACC,mBACF,iBACF,eACG,kBACL,cACA,aAC9B;AACD,UAAM;AAb2B;AACO;AACH;AACG;AACN;AACE;AACC;AACF;AACF;AACG;AACL;AACA;AAG/B,SAAK,6BAA6B,CAAC;AACnC,SAAK,YAAY,CAAC;AAClB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB,mBAAmB,MAAM;AAC/C,WAAK,qBAAqB,4BAA4B,OAAO,iBAAiB;AAC9E,WAAK,2BAA2B,kCAAkC,OAAO,iBAAiB;AAAA,IAC3F,CAAC;AACD,SAAK,UAAU,KAAK,kBAAkB,mBAAmB,OAAK;AAC7D,UAAI,EAAE,YAAY,KAAK,gBAAgB,GAAG;AACzC,aAAK,mBAAmB,IAAI,KAAK,oBAAoB,CAAC;AACtD,aAAK,yBAAyB;AAAA,MAC/B;AAAA,IACD,CAAC,CAAC;AACF,SAAK,UAAU,KAAK,2BAA2B,MAAM;AACpD,WAAK,yBAAyB,IAAI,KAAK,UAAU,SAAS,CAAC;AAAA,IAC5D,CAAC,CAAC;AAGF,UAAM,sBAAsB,KAAK,UAAU,IAAI,iBAAiB,MAAM,KAAK,iBAAiB,GAAG,GAAI,CAAC;AAEpG,SAAK,UAAU,MAAM,IAAI,aAAa,uBAAuB,aAAa,wBAAwB,EAAE,MAAM;AACzG,0BAAoB,OAAO;AAC3B,0BAAoB,SAAS;AAAA,IAC9B,CAAC,CAAC;AACF,SAAK,iBAAiB,KAAK,eAAe,UAAU,EAClD,KAAK,MAAM,KAAK,yBAAyB,IAAI,KAAK,UAAU,SAAS,CAAC,CAAC;AAEzE,SAAK,UAAU,SAAS,gBAAgB,OAAK;AAC5C,WAAK,eAAe,IAAI,EAAE,cAAc,IAAI;AAAA,IAC7C,CAAC,CAAC;AAEF,wBAAoB,SAAS;AAAA,EAC9B;AAAA,EA7GD,OA2C0E;AAAA;AAAA;AAAA,EAEjE;AAAA,EACA;AAAA,EACA,wBAAwB,oBAAI,IAAkC;AAAA,EAC9D;AAAA,EACA;AAAA,EACS,yBAAyB,IAAI,QAAc;AAAA,EAC3C,8BAA8B,IAAI,QAAc;AAAA,EACzD,0BAAyC,CAAC;AAAA,EAC1C,mBAAmB,oBAAI,IAAY;AAAA,EACnC,aAAuB,CAAC;AAAA;AAAA,EAGxB;AAAA,EAEA,iBAAiB,oBAAI,IAAY;AAAA,EAoDjC,oBAA0B;AACjC,sBAAkB,WAAW,CAAC,YAAY,UAAU;AACnD,YAAM,MAAM,QAAQ,WAAS;AAC5B,cAAM,MAAM,QAAQ,gBAAc;AACjC,cAAI,CAAC,WAAW,QAAS,OAAO,WAAW,SAAS,UAAW;AAC9D,kBAAM,UAAU,MAAM,IAAI,SAAS,eAAe,kEAAkE,CAAC;AAAA,UACtH;AAEA,cAAI,WAAW,SAAS,KAAK;AAC5B,kBAAM,WAAW,KAAK,YAAY,WAAW,IAAI;AACjD,gBAAI,UAAU;AACb,uBAAS,MAAM,YAAY,MAAM,WAAW;AAAA,YAC7C,OAAO;AACN,oBAAM,MAAM,KAAK,qBAAqB,eAAe,UAAU,MAAM,YAAY,MAAM,WAAW;AAClG,kBAAI,MAAM,KAAK,EAAE,QAAQ,SAAO,KAAK,iBAAiB,IAAI,GAAG,CAAC;AAC9D,mBAAK,UAAU,KAAK,GAAG;AAAA,YACxB;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAGD,iBAAW,QAAQ,eAAa;AAC/B,kBAAU,MAAM,QAAQ,gBAAc;AACrC,cAAI,WAAW,SAAS,KAAK;AAC5B,iBAAK,UAAU,QAAQ,SAAO,IAAI,MAAM,YAAY,UAAU,WAAW,CAAC;AAAA,UAC3E;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAED,YAAM,QAAQ,QAAQ,aAAW;AAChC,cAAM,eAAe,QAAQ,MAAM,IAAI,gBAAc,WAAW,IAAI;AACpE,aAAK,YAAY,KAAK,UAAU,OAAO,OAAK,aAAa,QAAQ,EAAE,IAAI,MAAM,EAAE;AAAA,MAChF,CAAC;AAED,WAAK,yBAAyB;AAC9B,WAAK,4BAA4B,KAAK;AAAA,IACvC,CAAC;AAED,wBAAoB,WAAW,gBAAc;AAC5C,WAAK,0BAA0B,WAAW,QAAQ,SAAO,IAAI,MAAM,IAAI,gBAAc,KAAK,qBAAqB,eAAe,aAAa,UAAU,CAAC,CAAC;AAAA,IACxJ,CAAC;AAAA,EACF;AAAA,EAEQ,mBAAmB;AAC1B,SAAK,aAAa,cAAc,EAAE,KAAK,WAAS;AAC/C,WAAK,aAAa,MAAM,IAAI,UAAQ,KAAK,MAAM;AAC/C,WAAK,yBAAyB;AAAA,IAC/B,CAAC;AAAA,EACF;AAAA,EAEQ,2BAA2B;AAElC,UAAM,QAAsB,aAAa,WAAY,gBAAgB,EAAE;AACvE,UAAM,aAAa,uBAAuB,cAAc;AACxD,UAAM,cAA8B;AAAA,MACnC,UAAU;AAAA,QACT,YAAY;AAAA,UACX,QAAQ;AAAA,YACP,MAAM;AAAA,YACN,aAAa,IAAI,SAAS,aAAa,2EAA2E;AAAA,YAClH,SAAS;AAAA,UACV;AAAA,UACA,eAAe;AAAA,YACd,MAAM;AAAA,YACN,aAAa,IAAI,SAAS,eAAe,iIAAiI;AAAA,YAC1K,SAAS;AAAA,UACV;AAAA,UACA,iBAAiB;AAAA,YAChB,OAAO,CAAC,YAAY;AAAA,cACnB,MAAM,CAAC,QAAQ;AAAA,YAChB,CAAC;AAAA,YACD,SAAS;AAAA,YACT,iBAAiB,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,MAAM,GAAG,EAAE,CAAC;AAAA,YAClD,aAAa,IAAI,SAAS,sBAAsB,0CAA0C;AAAA,YAC1F,UAAU,KAAK;AAAA,UAChB;AAAA,UACA,iBAAiB;AAAA,YAChB,OAAO,CAAC,YAAY;AAAA,cACnB,MAAM,CAAC,QAAQ;AAAA,YAChB,CAAC;AAAA,YACD,SAAS;AAAA,YACT,iBAAiB,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,MAAM,GAAG,EAAE,CAAC;AAAA,YAClD,aAAa,IAAI,SAAS,sBAAsB,uCAAuC;AAAA,YACvF,UAAU,KAAK;AAAA,UAChB;AAAA,UACA,gBAAgB;AAAA,UAChB,0BAA0B;AAAA,UAC1B,kCAAkC;AAAA,YACjC,MAAM;AAAA,YACN,aAAa,IAAI,SAAS,kCAAkC,uFAAuF;AAAA,YACnJ,SAAS;AAAA,UACV;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,iBAAa,cAAc;AAC3B,UAAM,QAAQ,CAAC;AACf,UAAM,kBAAkB,CAAC;AACzB,SAAK,UAAU,QAAQ,aAAW;AACjC,YAAM,mBAAmB,QAAQ,oBAAoB,WAAW;AAChE,UAAI,oBAAoB,MAAM,OAAO;AACpC,cAAM,MAAM,KAAK,GAAG,gBAAgB;AAAA,MACrC;AACA,YAAM,wBAAwB,QAAQ;AACtC,UAAI,yBAAyB,MAAM,iBAAiB;AACnD,cAAM,gBAAgB,KAAK,GAAG,qBAAqB;AAAA,MACpD;AAAA,IACD,CAAC;AACD,iBAAa,eAAe,gBAAgB,YAAY;AAAA,EACzD;AAAA,EAEA,4BAA4B,YAAsB,sBAAyD;AAC1G,eAAW,QAAQ,eAAa,KAAK,sBAAsB,IAAI,WAAW,oBAAoB,CAAC;AAC/F,SAAK,mBAAmB,IAAI,KAAK,oBAAoB,CAAC;AACtD,SAAK,uBAAuB,KAAK;AAEjC,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,mBAAW,QAAQ,eAAa,KAAK,sBAAsB,OAAO,SAAS,CAAC;AAAA,MAC7E,GAFS;AAAA,IAGV;AAAA,EACD;AAAA,EAEA,sBAA+B;AAC9B,eAAW,CAAC,IAAI,KAAK,KAAK,uBAAuB;AAChD,YAAM,MAAM,KAAK,YAAY,IAAI;AACjC,UAAI,OAAO,IAAI,SAAS;AACvB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,mBAAmB,SAAmD;AACrE,UAAM,UAAU,KAAK,sBAAsB,IAAI,QAAQ,cAAc,IAAI;AACzE,QAAI,SAAS;AACZ,aAAO,QAAQ,mBAAmB,OAAO;AAAA,IAC1C;AACA,WAAO;AAAA,EACR;AAAA,EAEA,oBAAoB,WAAmB,QAAsC,QAAmC;AAC/G,UAAM,UAAU,KAAK,sBAAsB,IAAI,SAAS;AACxD,QAAI,SAAS;AACZ,aAAO,QAAQ,oBAAoB,QAAQ,MAAM;AAAA,IAClD;AACA,WAAO,QAAQ,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,cAAc,WAAmB,MAAmD,WAAgD;AACnI,UAAM,UAAU,KAAK,sBAAsB,IAAI,SAAS;AACxD,QAAI,SAAS;AACZ,aAAO,QAAQ,cAAc,MAAM,SAAS;AAAA,IAC7C;AACA,WAAO,QAAQ,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,sCAAsC,sBAAmE;AACxG,SAAK,2BAA2B,KAAK,oBAAoB;AACzD,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,aAAK,wCAAwC,oBAAoB;AAAA,MAClE,GAFS;AAAA,IAGV;AAAA,EACD;AAAA,EAEA,wCAAwC,sBAA4D;AACnG,UAAM,KAAK,KAAK,2BAA2B,QAAQ,oBAAoB;AACvE,QAAI,MAAM,GAAG;AACZ,WAAK,2BAA2B,OAAO,IAAI,CAAC;AAAA,IAC7C;AAAA,EACD;AAAA,EAEA,0BAA0B,SAAiE;AAC1F,UAAM,SAAS,QAAQ;AACvB,UAAM,YAAY,KAAK,2BAA2B,OAAO,OAAK,EAAE,SAAS,OAAO,QAAQ,EAAE,4BAA4B;AACtH,QAAI,UAAU,WAAW,GAAG;AAC3B,aAAO,UAAU,CAAC,EAAE,6BAA6B,OAAO;AAAA,IACzD,OAAO;AAAA,IAEP;AACA,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,iBAAiB,MAAkC;AAClD,UAAM,OAAO,KAAK,YAAY,IAAI;AAClC,QAAI,MAAM;AACT,aAAO,KAAK;AAAA,IACb;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,wBAAqC;AACxC,WAAO,KAAK,uBAAuB;AAAA,EACpC;AAAA,EAEA,IAAI,6BAA0C;AAC7C,WAAO,KAAK,4BAA4B;AAAA,EACzC;AAAA,EAEA,oBAAoB,OAA4B;AAC/C,UAAM,aAAa,MAAM,cAAc;AACvC,QAAI,CAAC,cAAc,eAAe,WAAW,eAAe,OAAO;AAElE,aAAO;AAAA,IACR;AACA,QAAI,KAAK,qBAAqB,SAA8B,OAAO,EAAE,4BAA4B;AAChG,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,wBAAwB,KAAK,iBAAe,YAAY,aAAa,cAAc,YAAY,OAAO;AAAA,EACnH;AAAA,EAEA,YAAY,MAAoC;AAC/C,WAAO,KAAK,UAAU,KAAK,SAAO,QAAQ,iBAAiB,IAAI,MAAM,IAAI,CAAC;AAAA,EAC3E;AAAA,EAEA,mBAAmB,MAAoC;AACtD,UAAM,UAAU,KAAK,YAAY,IAAI;AACrC,WAAO,WAAW,QAAQ,UAAU,UAAU;AAAA,EAC/C;AAAA,EAEA,iCAAiC,YAA6B;AAC7D,WAAO,CAAC,CAAC,KAAK,UACZ,OAAO,OAAK,EAAE,OAAO,EACrB,KAAK,OAAK,EAAE,qBAAqB,UAAU,CAAC;AAAA,EAC/C;AAAA,EAEA,MAAM,cAAc,uBAA+D;AAClF,UAAM,0BAA0B,KAAK,cAAc;AACnD,QAAI,aAAyB,CAAC;AAC9B,QAAI,gBAA+B;AACnC,QAAI,QAA6B;AACjC,QAAI,aAAa,uBAAuB,GAAG;AAC1C,cAAQ,wBAAwB,SAAS;AACzC,YAAM,WAAW,QAAQ,MAAM,cAAc,IAAI;AACjD,UAAI,UAAU;AACb,wBAAgB,KAAK,gBAAgB,gBAAgB,QAAQ;AAAA,MAC9D;AACA,YAAM,WAAW,KAAK,UACpB,OAAO,OAAK,EAAE,OAAO,EACrB,OAAO,OAAK,YAAY,EAAE,qBAAqB,QAAQ,CAAC;AAC1D,UAAI,SAAS,WAAW,GAAG;AAC1B,eAAO,SAAS,CAAC;AAAA,MAClB;AACA,UAAI,SAAS,SAAS,GAAG;AACxB,qBAAa;AAAA,MACd;AAAA,IACD;AAIA,SAAK,CAAC,iBAAiB,yBAA0B,SAAS,KAAK,oBAAoB,KAAK,MAAO,WAAW,WAAW,GAAG;AACvH,YAAM,KAAK,kBAAkB,8BAA8B;AAE3D,mBAAa,KAAK,UAChB,OAAO,OAAK,EAAE,OAAO,EACrB,OAAO,SAAO,IAAI,wBAAwB,KAAK,IAAI,iCAAiC,KAAK,IAAI,yBAAyB,CAAC;AAAA,IAC1H;AAEA,QAAI,WAAW,WAAW,KAAK,eAAe;AAC7C,UAAI,cAAc,QAAQ,GAAG,KAAK,GAAG;AACpC,wBAAgB,IAAI,aAAa;AAAA,MAClC;AACA,YAAM,EAAE,UAAU,IAAI,MAAM,KAAK,cAAc,QAAQ;AAAA,QACtD,MAAM,SAAS;AAAA,QACf,SAAS,IAAI,SAAS,wBAAwB,qGAAqG,aAAa;AAAA,QAChK,eAAe,IAAI,SAAS,EAAE,KAAK,iBAAiB,SAAS,CAAC,uBAAuB,EAAE,GAAG,wBAAwB,aAAa;AAAA,MAChI,CAAC;AACD,UAAI,WAAW;AACd,cAAM,KAAK,eAAe,eAAe,oCAAoC,aAAa;AAAA,MAC3F;AACA,aAAO;AAAA,IACR;AAEA,SAAK,iCAAiC;AAEtC,eAAW,KAAK,CAAC,OAAO,WAAW,MAAM,MAAM,cAAc,OAAO,KAAK,CAAC;AAC1E,iBAAa,WAAW,OAAO,OAAK,CAAC,EAAE,oBAAoB;AAE3D,UAAM,sBAAkC,CAAC;AACzC,UAAM,kBAA8B,CAAC;AACrC,eAAW,QAAQ,OAAK;AACvB,YAAM,aAAa,EAAE,2BAA2B;AAChD,UAAI,WAAW,MAAM,CAAC,CAAC,KAAK,0BAA0B,IAAI,WAAW,EAAE,GAAG;AAEzE,4BAAoB,KAAK,CAAC;AAAA,MAC3B,WAAW,KAAK,eAAe,IAAI,EAAE,IAAI,GAAG;AAE3C,4BAAoB,KAAK,CAAC;AAAA,MAC3B,OAAO;AACN,wBAAgB,KAAK,CAAC;AAAA,MACvB;AAAA,IACD,CAAC;AAED,UAAM,QAAoF,CAAC;AAC3F,QAAI,oBAAoB,SAAS,GAAG;AACnC,YAAM;AAAA,QACL,EAAE,MAAM,aAAa,OAAO,IAAI,SAAS,sBAAsB,WAAW,EAAE;AAAA,QAC5E,GAAG,oBAAoB,IAAI,QAAM,EAAE,OAAO,EAAE,OAAO,UAAU,EAAE,EAAE;AAAA,MAAC;AAAA,IACpE;AAEA,QAAI,gBAAgB,SAAS,GAAG;AAC/B,UAAI,MAAM,SAAS,GAAG;AACrB,cAAM,KAAK,EAAE,MAAM,aAAa,OAAO,GAAG,CAAC;AAAA,MAC5C;AAEA,YAAM,KAAK,GAAG,gBAAgB,IAAI,QAAM,EAAE,OAAO,EAAE,OAAO,UAAU,EAAE,EAAE,CAAC;AAAA,IAC1E;AAEA,UAAM;AAAA,MACL,EAAE,MAAM,aAAa,OAAO,GAAG;AAAA,MAC/B,EAAE,OAAO,gBAAgB,IAAI,SAAS,mBAAmB,mCAAmC,aAAa,IAAI,IAAI,SAAS,cAAc,sBAAsB,EAAE;AAAA,IAAC;AAElK,UAAM,cAAc,KAAK,YAAY,eAAe,OAAO,0BAA0B,KAAK,iBAAiB;AAC3G,eAAW,CAAC,EAAE,MAAM,KAAK,aAAa;AACrC,iBAAW,QAAQ,QAAQ;AAC1B,cAAM,KAAK,IAAI;AAAA,MAChB;AAAA,IACD;AACA,UAAM,cAAc,IAAI,SAAS,eAAe,iBAAiB;AACjE,WAAO,KAAK,kBAAkB,KAA8D,OAAO,EAAE,YAAY,MAAM,CAAC,GAAG,YAAY,CAAC,EACtI,KAAK,OAAM,WAAU;AACrB,UAAI,UAAU,cAAc,UAAU,OAAO,UAAU;AACtD,eAAO,OAAO;AAAA,MACf,WAAW,kBAAkB,gBAAgB;AAC5C,eAAO,IAAI;AACX;AAAA,MACD;AACA,UAAI,QAAQ;AACX,aAAK,eAAe,eAAe,oCAAoC,aAAa;AAAA,MACrF;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EACH;AAAA,EAEQ,mCAAyC;AAChD,QAAI,CAAC,KAAK,0BAA0B;AACnC,WAAK,2BAA2B,oBAAI,IAAY;AAEhD,YAAM,SAAS,KAAK,iBAAiB,oBAAoB;AACzD,iBAAW,MAAM,QAAQ;AACxB,YAAI,CAAC,CAAC,OAAO,EAAE,EAAE,iBAAiB;AACjC,eAAK,yBAAyB,IAAI,EAAE;AAAA,QACrC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,kBAAkB,iBAAyB,WAAmC;AACnF,SAAK,iCAAiC;AAEtC,UAAM,WAA2B;AAAA,MAChC,KAAK,iBAAiB,gBAAgB,eAAe;AAAA,MACrD,KAAK,iBAAiB,gBAAgB,SAAS;AAAA,IAChD;AACA,QAAI,WAAW;AACd,eAAS,KAAK,KAAK,iBAAiB,gBAAgB,GAAG,eAAe,IAAI,SAAS,EAAE,CAAC;AAAA,IACvF;AACA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC3B;AACD;AAhba,iBAAN;AAAA,EAoBJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA/BU;",
  "names": []
}
