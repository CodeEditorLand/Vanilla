{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugTaskRunner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../../base/common/actions.js\";\nimport { disposableTimeout } from \"../../../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { createErrorWithActions } from \"../../../../base/common/errorMessage.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport severity from \"../../../../base/common/severity.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tIMarkerService,\n\tMarkerSeverity,\n} from \"../../../../platform/markers/common/markers.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type {\n\tIWorkspace,\n\tIWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { Markers } from \"../../markers/common/markers.js\";\nimport {\n\tITaskService,\n\ttype ITaskSummary,\n} from \"../../tasks/common/taskService.js\";\nimport {\n\tConfiguringTask,\n\tCustomTask,\n\ttype ITaskEvent,\n\ttype ITaskIdentifier,\n\ttype Task,\n\tTaskEventKind,\n} from \"../../tasks/common/tasks.js\";\nimport type { IDebugConfiguration } from \"../common/debug.js\";\nimport {\n\tDEBUG_CONFIGURE_COMMAND_ID,\n\tDEBUG_CONFIGURE_LABEL,\n} from \"./debugCommands.js\";\n\nconst onceFilter = (\n\tevent: Event<ITaskEvent>,\n\tfilter: (e: ITaskEvent) => boolean,\n) => Event.once(Event.filter(event, filter));\n\nexport enum TaskRunResult {\n\tFailure = 0,\n\tSuccess = 1,\n}\n\nconst DEBUG_TASK_ERROR_CHOICE_KEY = \"debug.taskerrorchoice\";\nconst ABORT_LABEL = nls.localize(\"abort\", \"Abort\");\nconst DEBUG_ANYWAY_LABEL = nls.localize(\n\t{ key: \"debugAnyway\", comment: [\"&& denotes a mnemonic\"] },\n\t\"&&Debug Anyway\",\n);\nconst DEBUG_ANYWAY_LABEL_NO_MEMO = nls.localize(\n\t\"debugAnywayNoMemo\",\n\t\"Debug Anyway\",\n);\n\ninterface IRunnerTaskSummary extends ITaskSummary {\n\tcancelled?: boolean;\n}\n\nexport class DebugTaskRunner implements IDisposable {\n\tprivate globalCancellation = new CancellationTokenSource();\n\n\tconstructor(\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t) { }\n\n\tcancel(): void {\n\t\tthis.globalCancellation.dispose(true);\n\t\tthis.globalCancellation = new CancellationTokenSource();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.globalCancellation.dispose(true);\n\t}\n\n\tasync runTaskAndCheckErrors(\n\t\troot: IWorkspaceFolder | IWorkspace | undefined,\n\t\ttaskId: string | ITaskIdentifier | undefined,\n\t): Promise<TaskRunResult> {\n\t\ttry {\n\t\t\tconst taskSummary = await this.runTask(\n\t\t\t\troot,\n\t\t\t\ttaskId,\n\t\t\t\tthis.globalCancellation.token,\n\t\t\t);\n\t\t\tif (\n\t\t\t\ttaskSummary &&\n\t\t\t\t(taskSummary.exitCode === undefined || taskSummary.cancelled)\n\t\t\t) {\n\t\t\t\t// User canceled, either debugging, or the prelaunch task\n\t\t\t\treturn TaskRunResult.Failure;\n\t\t\t}\n\n\t\t\tconst errorCount = taskId\n\t\t\t\t? this.markerService.read({\n\t\t\t\t\t\tseverities: MarkerSeverity.Error,\n\t\t\t\t\t\ttake: 2,\n\t\t\t\t\t}).length\n\t\t\t\t: 0;\n\t\t\tconst successExitCode = taskSummary && taskSummary.exitCode === 0;\n\t\t\tconst failureExitCode = taskSummary && taskSummary.exitCode !== 0;\n\t\t\tconst onTaskErrors =\n\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\"debug\",\n\t\t\t\t).onTaskErrors;\n\t\t\tif (\n\t\t\t\tsuccessExitCode ||\n\t\t\t\tonTaskErrors === \"debugAnyway\" ||\n\t\t\t\t(errorCount === 0 && !failureExitCode)\n\t\t\t) {\n\t\t\t\treturn TaskRunResult.Success;\n\t\t\t}\n\t\t\tif (onTaskErrors === \"showErrors\") {\n\t\t\t\tawait this.viewsService.openView(Markers.MARKERS_VIEW_ID, true);\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\t\t\tif (onTaskErrors === \"abort\") {\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\n\t\t\tconst taskLabel =\n\t\t\t\ttypeof taskId === \"string\" ? taskId : taskId ? taskId.name : \"\";\n\t\t\tconst message =\n\t\t\t\terrorCount > 1\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"preLaunchTaskErrors\",\n\t\t\t\t\t\t\t\"Errors exist after running preLaunchTask '{0}'.\",\n\t\t\t\t\t\t\ttaskLabel,\n\t\t\t\t\t\t)\n\t\t\t\t\t: errorCount === 1\n\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\"preLaunchTaskError\",\n\t\t\t\t\t\t\t\t\"Error exists after running preLaunchTask '{0}'.\",\n\t\t\t\t\t\t\t\ttaskLabel,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: taskSummary &&\n\t\t\t\t\t\t\t\ttypeof taskSummary.exitCode === \"number\"\n\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\"preLaunchTaskExitCode\",\n\t\t\t\t\t\t\t\t\t\"The preLaunchTask '{0}' terminated with exit code {1}.\",\n\t\t\t\t\t\t\t\t\ttaskLabel,\n\t\t\t\t\t\t\t\t\ttaskSummary.exitCode,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\"preLaunchTaskTerminated\",\n\t\t\t\t\t\t\t\t\t\"The preLaunchTask '{0}' terminated.\",\n\t\t\t\t\t\t\t\t\ttaskLabel,\n\t\t\t\t\t\t\t\t);\n\n\t\t\tenum DebugChoice {\n\t\t\t\tDebugAnyway = 1,\n\t\t\t\tShowErrors = 2,\n\t\t\t\tCancel = 0,\n\t\t\t}\n\t\t\tconst { result, checkboxChecked } =\n\t\t\t\tawait this.dialogService.prompt<DebugChoice>({\n\t\t\t\t\ttype: severity.Warning,\n\t\t\t\t\tmessage,\n\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: DEBUG_ANYWAY_LABEL,\n\t\t\t\t\t\t\trun: () => DebugChoice.DebugAnyway,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"showErrors\",\n\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"&&Show Errors\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\trun: () => DebugChoice.ShowErrors,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tcancelButton: {\n\t\t\t\t\t\tlabel: ABORT_LABEL,\n\t\t\t\t\t\trun: () => DebugChoice.Cancel,\n\t\t\t\t\t},\n\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\"remember\",\n\t\t\t\t\t\t\t\"Remember my choice in user settings\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\tconst debugAnyway = result === DebugChoice.DebugAnyway;\n\t\t\tconst abort = result === DebugChoice.Cancel;\n\t\t\tif (checkboxChecked) {\n\t\t\t\tthis.configurationService.updateValue(\n\t\t\t\t\t\"debug.onTaskErrors\",\n\t\t\t\t\tresult === DebugChoice.DebugAnyway\n\t\t\t\t\t\t? \"debugAnyway\"\n\t\t\t\t\t\t: abort\n\t\t\t\t\t\t\t? \"abort\"\n\t\t\t\t\t\t\t: \"showErrors\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (abort) {\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\t\t\tif (debugAnyway) {\n\t\t\t\treturn TaskRunResult.Success;\n\t\t\t}\n\n\t\t\tawait this.viewsService.openView(Markers.MARKERS_VIEW_ID, true);\n\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t} catch (err) {\n\t\t\tconst taskConfigureAction = this.taskService.configureAction();\n\t\t\tconst choiceMap: { [key: string]: number } = JSON.parse(\n\t\t\t\tthis.storageService.get(\n\t\t\t\t\tDEBUG_TASK_ERROR_CHOICE_KEY,\n\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\"{}\",\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tlet choice = -1;\n\t\t\tenum DebugChoice {\n\t\t\t\tDebugAnyway = 0,\n\t\t\t\tConfigureTask = 1,\n\t\t\t\tCancel = 2,\n\t\t\t}\n\t\t\tif (choiceMap[err.message] !== undefined) {\n\t\t\t\tchoice = choiceMap[err.message];\n\t\t\t} else {\n\t\t\t\tconst { result, checkboxChecked } =\n\t\t\t\t\tawait this.dialogService.prompt<DebugChoice>({\n\t\t\t\t\t\ttype: severity.Error,\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tkey: \"debugAnyway\",\n\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"&&Debug Anyway\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\trun: () => DebugChoice.DebugAnyway,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: taskConfigureAction.label,\n\t\t\t\t\t\t\t\trun: () => DebugChoice.ConfigureTask,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tcancelButton: {\n\t\t\t\t\t\t\trun: () => DebugChoice.Cancel,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\"rememberTask\",\n\t\t\t\t\t\t\t\t\"Remember my choice for this task\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\tchoice = result;\n\t\t\t\tif (checkboxChecked) {\n\t\t\t\t\tchoiceMap[err.message] = choice;\n\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\tDEBUG_TASK_ERROR_CHOICE_KEY,\n\t\t\t\t\t\tJSON.stringify(choiceMap),\n\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (choice === DebugChoice.ConfigureTask) {\n\t\t\t\tawait taskConfigureAction.run();\n\t\t\t}\n\n\t\t\treturn choice === DebugChoice.DebugAnyway\n\t\t\t\t? TaskRunResult.Success\n\t\t\t\t: TaskRunResult.Failure;\n\t\t}\n\t}\n\n\tasync runTask(\n\t\troot: IWorkspace | IWorkspaceFolder | undefined,\n\t\ttaskId: string | ITaskIdentifier | undefined,\n\t\ttoken = this.globalCancellation.token,\n\t): Promise<IRunnerTaskSummary | null> {\n\t\tif (!taskId) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (!root) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"invalidTaskReference\",\n\t\t\t\t\t\t\"Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.\",\n\t\t\t\t\t\ttypeof taskId === \"string\" ? taskId : taskId.type,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\t// run a task before starting a debug session\n\t\tconst task = await this.taskService.getTask(root, taskId);\n\t\tif (!task) {\n\t\t\tconst errorMessage =\n\t\t\t\ttypeof taskId === \"string\"\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"DebugTaskNotFoundWithTaskId\",\n\t\t\t\t\t\t\t\"Could not find the task '{0}'.\",\n\t\t\t\t\t\t\ttaskId,\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\"DebugTaskNotFound\",\n\t\t\t\t\t\t\t\"Could not find the specified task.\",\n\t\t\t\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\tcreateErrorWithActions(errorMessage, [\n\t\t\t\t\tnew Action(\n\t\t\t\t\t\tDEBUG_CONFIGURE_COMMAND_ID,\n\t\t\t\t\t\tDEBUG_CONFIGURE_LABEL,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\tDEBUG_CONFIGURE_COMMAND_ID,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t]),\n\t\t\t);\n\t\t}\n\n\t\t// If a task is missing the problem matcher the promise will never complete, so we need to have a workaround #35340\n\t\tlet taskStarted = false;\n\t\tconst store = new DisposableStore();\n\t\tconst getTaskKey = (t: Task) => t.getKey() ?? t.getMapKey();\n\t\tconst taskKey = getTaskKey(task);\n\t\tconst inactivePromise: Promise<ITaskSummary | null> = new Promise(\n\t\t\t(resolve) =>\n\t\t\t\tstore.add(\n\t\t\t\t\tonceFilter(this.taskService.onDidStateChange, (e) => {\n\t\t\t\t\t\t// When a task isBackground it will go inactive when it is safe to launch.\n\t\t\t\t\t\t// But when a background task is terminated by the user, it will also fire an inactive event.\n\t\t\t\t\t\t// This means that we will not get to see the real exit code from running the task (undefined when terminated by the user).\n\t\t\t\t\t\t// Catch the ProcessEnded event here, which occurs before inactive, and capture the exit code to prevent this.\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t(e.kind === TaskEventKind.Inactive ||\n\t\t\t\t\t\t\t\t(e.kind === TaskEventKind.ProcessEnded &&\n\t\t\t\t\t\t\t\t\te.exitCode === undefined)) &&\n\t\t\t\t\t\t\tgetTaskKey(e.__task) === taskKey\n\t\t\t\t\t\t);\n\t\t\t\t\t})((e) => {\n\t\t\t\t\t\ttaskStarted = true;\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\te.kind === TaskEventKind.ProcessEnded\n\t\t\t\t\t\t\t\t? { exitCode: e.exitCode }\n\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t);\n\n\t\tstore.add(\n\t\t\tonceFilter(\n\t\t\t\tthis.taskService.onDidStateChange,\n\t\t\t\t(e) =>\n\t\t\t\t\t(e.kind === TaskEventKind.Active ||\n\t\t\t\t\t\te.kind === TaskEventKind.DependsOnStarted) &&\n\t\t\t\t\tgetTaskKey(e.__task) === taskKey,\n\t\t\t)(() => {\n\t\t\t\t// Task is active, so everything seems to be fine, no need to prompt after 10 seconds\n\t\t\t\t// Use case being a slow running task should not be prompted even though it takes more than 10 seconds\n\t\t\t\ttaskStarted = true;\n\t\t\t}),\n\t\t);\n\n\t\tconst didAcquireInput = store.add(new Emitter<void>());\n\t\tstore.add(\n\t\t\tonceFilter(\n\t\t\t\tthis.taskService.onDidStateChange,\n\t\t\t\t(e) =>\n\t\t\t\t\te.kind === TaskEventKind.AcquiredInput &&\n\t\t\t\t\tgetTaskKey(e.__task) === taskKey,\n\t\t\t)(() => didAcquireInput.fire()),\n\t\t);\n\n\t\tconst taskDonePromise: Promise<ITaskSummary | null> = this.taskService\n\t\t\t.getActiveTasks()\n\t\t\t.then(async (tasks): Promise<ITaskSummary | null> => {\n\t\t\t\tif (tasks.find((t) => getTaskKey(t) === taskKey)) {\n\t\t\t\t\tdidAcquireInput.fire();\n\t\t\t\t\t// Check that the task isn't busy and if it is, wait for it\n\t\t\t\t\tconst busyTasks = await this.taskService.getBusyTasks();\n\t\t\t\t\tif (busyTasks.find((t) => getTaskKey(t) === taskKey)) {\n\t\t\t\t\t\ttaskStarted = true;\n\t\t\t\t\t\treturn inactivePromise;\n\t\t\t\t\t}\n\t\t\t\t\t// task is already running and isn't busy - nothing to do.\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tconst taskPromise = this.taskService.run(task);\n\t\t\t\tif (task.configurationProperties.isBackground) {\n\t\t\t\t\treturn inactivePromise;\n\t\t\t\t}\n\n\t\t\t\treturn taskPromise.then((x) => x ?? null);\n\t\t\t});\n\n\t\tconst result = new Promise<IRunnerTaskSummary | null>(\n\t\t\t(resolve, reject) => {\n\t\t\t\ttaskDonePromise.then(\n\t\t\t\t\t(result) => {\n\t\t\t\t\t\ttaskStarted = true;\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t},\n\t\t\t\t\t(error) => reject(error),\n\t\t\t\t);\n\n\t\t\t\tstore.add(\n\t\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\t\tresolve({ exitCode: undefined, cancelled: true });\n\t\t\t\t\t\tthis.taskService.terminate(task).catch(() => {});\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// Start the timeouts once a terminal has been acquired\n\t\t\t\tstore.add(\n\t\t\t\t\tdidAcquireInput.event(() => {\n\t\t\t\t\t\tconst waitTime = task.configurationProperties\n\t\t\t\t\t\t\t.isBackground\n\t\t\t\t\t\t\t? 5000\n\t\t\t\t\t\t\t: 10000;\n\n\t\t\t\t\t\t// Error shown if there's a background task with no problem matcher that doesn't exit quickly\n\t\t\t\t\t\tstore.add(\n\t\t\t\t\t\t\tdisposableTimeout(() => {\n\t\t\t\t\t\t\t\tif (!taskStarted) {\n\t\t\t\t\t\t\t\t\tconst errorMessage = nls.localize(\n\t\t\t\t\t\t\t\t\t\t\"taskNotTracked\",\n\t\t\t\t\t\t\t\t\t\t\"The task '{0}' has not exited and doesn't have a 'problemMatcher' defined. Make sure to define a problem matcher for watch tasks.\",\n\t\t\t\t\t\t\t\t\t\ttypeof taskId === \"string\"\n\t\t\t\t\t\t\t\t\t\t\t? taskId\n\t\t\t\t\t\t\t\t\t\t\t: JSON.stringify(taskId),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\t\t\tseverity: severity.Error,\n\t\t\t\t\t\t\t\t\t\tmessage: errorMessage,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, waitTime),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Notification shown on any task taking a while to resolve\n\t\t\t\t\t\tstore.add(\n\t\t\t\t\t\t\tdisposableTimeout(() => {\n\t\t\t\t\t\t\t\tconst message = nls.localize(\n\t\t\t\t\t\t\t\t\t\"runningTask\",\n\t\t\t\t\t\t\t\t\t\"Waiting for preLaunchTask '{0}'...\",\n\t\t\t\t\t\t\t\t\ttask.configurationProperties.name,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst buttons = [\n\t\t\t\t\t\t\t\t\tDEBUG_ANYWAY_LABEL_NO_MEMO,\n\t\t\t\t\t\t\t\t\tABORT_LABEL,\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\tconst canConfigure =\n\t\t\t\t\t\t\t\t\ttask instanceof CustomTask ||\n\t\t\t\t\t\t\t\t\ttask instanceof ConfiguringTask;\n\t\t\t\t\t\t\t\tif (canConfigure) {\n\t\t\t\t\t\t\t\t\tbuttons.splice(\n\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"configureTask\",\n\t\t\t\t\t\t\t\t\t\t\t\"Configure Task\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.progressService.withProgress(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\t\t\t\t\ttitle: message,\n\t\t\t\t\t\t\t\t\t\tbuttons,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t() => result.catch(() => {}),\n\t\t\t\t\t\t\t\t\t(choice) => {\n\t\t\t\t\t\t\t\t\t\tif (choice === undefined) {\n\t\t\t\t\t\t\t\t\t\t\t// no-op, keep waiting\n\t\t\t\t\t\t\t\t\t\t} else if (choice === 0) {\n\t\t\t\t\t\t\t\t\t\t\t// debug anyway\n\t\t\t\t\t\t\t\t\t\t\tresolve({ exitCode: 0 });\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// abort or configure\n\t\t\t\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t\t\t\texitCode: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\tcancelled: true,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.taskService\n\t\t\t\t\t\t\t\t\t\t\t\t.terminate(task)\n\t\t\t\t\t\t\t\t\t\t\t\t.catch(() => {});\n\t\t\t\t\t\t\t\t\t\t\tif (canConfigure && choice === 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t// configure\n\t\t\t\t\t\t\t\t\t\t\t\tthis.taskService.openConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\ttask as CustomTask,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}, 10_000),\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\n\t\treturn result.finally(() => store.dispose());\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TaskRunResult", "DebugChoice", "result"]
}
