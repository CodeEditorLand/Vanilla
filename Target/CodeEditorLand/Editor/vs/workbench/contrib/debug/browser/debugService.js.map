{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as aria from \"../../../../base/browser/ui/aria/aria.js\";\nimport { Action, type IAction } from \"../../../../base/common/actions.js\";\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport {\n\tRunOnceScheduler,\n\traceTimeout,\n} from \"../../../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { isErrorWithActions } from \"../../../../base/common/errorMessage.js\";\nimport * as errors from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { deepClone, equals } from \"../../../../base/common/objects.js\";\nimport severity from \"../../../../base/common/severity.js\";\nimport { URI, type URI as uri } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport { isCodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IExtensionHostDebugService } from \"../../../../platform/debug/common/extensionHostDebug.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tFileChangeType,\n\ttype FileChangesEvent,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IQuickInputService } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspaceTrustRequestService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport { EditorsOrder } from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport {\n\tIViewDescriptorService,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport {\n\tIActivityService,\n\tNumberBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tParts,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport { ILifecycleService } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { VIEWLET_ID as EXPLORER_VIEWLET_ID } from \"../../files/common/files.js\";\nimport { ITestService } from \"../../testing/common/testService.js\";\nimport {\n\tCALLSTACK_VIEW_ID,\n\tCONTEXT_BREAKPOINTS_EXIST,\n\tCONTEXT_DEBUG_STATE,\n\tCONTEXT_DEBUG_TYPE,\n\tCONTEXT_DEBUG_UX,\n\tCONTEXT_DISASSEMBLY_VIEW_FOCUS,\n\tCONTEXT_HAS_DEBUGGED,\n\tCONTEXT_IN_DEBUG_MODE,\n\tDEBUG_MEMORY_SCHEME,\n\tDEBUG_SCHEME,\n\ttype IAdapterManager,\n\ttype IBreakpoint,\n\ttype IBreakpointData,\n\ttype IBreakpointUpdateData,\n\ttype ICompound,\n\ttype IConfig,\n\ttype IConfigurationManager,\n\ttype IDebugConfiguration,\n\ttype IDebugModel,\n\ttype IDebugService,\n\ttype IDebugSession,\n\ttype IDebugSessionOptions,\n\ttype IEnablement,\n\ttype IExceptionBreakpoint,\n\ttype IGlobalConfig,\n\ttype ILaunch,\n\ttype IStackFrame,\n\ttype IThread,\n\ttype IViewModel,\n\tREPL_VIEW_ID,\n\tState,\n\tVIEWLET_ID,\n\tdebuggerDisabledMessage,\n\tgetStateLabel,\n} from \"../common/debug.js\";\nimport { DebugCompoundRoot } from \"../common/debugCompoundRoot.js\";\nimport {\n\tBreakpoint,\n\tDataBreakpoint,\n\tDebugModel,\n\tFunctionBreakpoint,\n\ttype IDataBreakpointOptions,\n\ttype IFunctionBreakpointOptions,\n\ttype IInstructionBreakpointOptions,\n\tInstructionBreakpoint,\n} from \"../common/debugModel.js\";\nimport { Source } from \"../common/debugSource.js\";\nimport { DebugStorage } from \"../common/debugStorage.js\";\nimport { DebugTelemetry } from \"../common/debugTelemetry.js\";\nimport {\n\tgetExtensionHostDebugSession,\n\tsaveAllBeforeDebugStart,\n} from \"../common/debugUtils.js\";\nimport { ViewModel } from \"../common/debugViewModel.js\";\nimport type { Debugger } from \"../common/debugger.js\";\nimport { DisassemblyViewInput } from \"../common/disassemblyViewInput.js\";\nimport { AdapterManager } from \"./debugAdapterManager.js\";\nimport {\n\tDEBUG_CONFIGURE_COMMAND_ID,\n\tDEBUG_CONFIGURE_LABEL,\n} from \"./debugCommands.js\";\nimport { ConfigurationManager } from \"./debugConfigurationManager.js\";\nimport { DebugMemoryFileSystemProvider } from \"./debugMemory.js\";\nimport { DebugSession } from \"./debugSession.js\";\nimport { DebugTaskRunner, TaskRunResult } from \"./debugTaskRunner.js\";\n\nexport class DebugService implements IDebugService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeState: Emitter<State>;\n\tprivate readonly _onDidNewSession: Emitter<IDebugSession>;\n\tprivate readonly _onWillNewSession: Emitter<IDebugSession>;\n\tprivate readonly _onDidEndSession: Emitter<{\n\t\tsession: IDebugSession;\n\t\trestart: boolean;\n\t}>;\n\tprivate readonly restartingSessions = new Set<IDebugSession>();\n\tprivate debugStorage: DebugStorage;\n\tprivate model: DebugModel;\n\tprivate viewModel: ViewModel;\n\tprivate telemetry: DebugTelemetry;\n\tprivate taskRunner: DebugTaskRunner;\n\tprivate configurationManager: ConfigurationManager;\n\tprivate adapterManager: AdapterManager;\n\tprivate readonly disposables = new DisposableStore();\n\tprivate debugType!: IContextKey<string>;\n\tprivate debugState!: IContextKey<string>;\n\tprivate inDebugMode!: IContextKey<boolean>;\n\tprivate debugUx!: IContextKey<string>;\n\tprivate hasDebugged!: IContextKey<boolean>;\n\tprivate breakpointsExist!: IContextKey<boolean>;\n\tprivate disassemblyViewFocus!: IContextKey<boolean>;\n\tprivate breakpointsToSendOnResourceSaved: Set<URI>;\n\tprivate initializing = false;\n\tprivate _initializingOptions: IDebugSessionOptions | undefined;\n\tprivate previousState: State | undefined;\n\tprivate sessionCancellationTokens = new Map<\n\t\tstring,\n\t\tCancellationTokenSource\n\t>();\n\tprivate activity: IDisposable | undefined;\n\tprivate chosenEnvironments: { [key: string]: string };\n\tprivate haveDoneLazySetup = false;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionHostDebugService private readonly extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ITestService private readonly testService: ITestService,\n\t) {\n\t\tthis.breakpointsToSendOnResourceSaved = new Set<URI>();\n\n\t\tthis._onDidChangeState = new Emitter<State>();\n\t\tthis._onDidNewSession = new Emitter<IDebugSession>();\n\t\tthis._onWillNewSession = new Emitter<IDebugSession>();\n\t\tthis._onDidEndSession = new Emitter();\n\n\t\tthis.adapterManager = this.instantiationService.createInstance(AdapterManager, { onDidNewSession: this.onDidNewSession });\n\t\tthis.disposables.add(this.adapterManager);\n\t\tthis.configurationManager = this.instantiationService.createInstance(ConfigurationManager, this.adapterManager);\n\t\tthis.disposables.add(this.configurationManager);\n\t\tthis.debugStorage = this.disposables.add(this.instantiationService.createInstance(DebugStorage));\n\n\t\tthis.chosenEnvironments = this.debugStorage.loadChosenEnvironments();\n\n\t\tthis.model = this.instantiationService.createInstance(DebugModel, this.debugStorage);\n\t\tthis.telemetry = this.instantiationService.createInstance(DebugTelemetry, this.model);\n\n\t\tthis.viewModel = new ViewModel(contextKeyService);\n\t\tthis.taskRunner = this.instantiationService.createInstance(DebugTaskRunner);\n\n\t\tthis.disposables.add(this.fileService.onDidFilesChange(e => this.onFileChanges(e)));\n\t\tthis.disposables.add(this.lifecycleService.onWillShutdown(this.dispose, this));\n\n\t\tthis.disposables.add(this.extensionHostDebugService.onAttachSession(event => {\n\t\t\tconst session = this.model.getSession(event.sessionId, true);\n\t\t\tif (session) {\n\t\t\t\t// EH was started in debug mode -> attach to it\n\t\t\t\tsession.configuration.request = 'attach';\n\t\t\t\tsession.configuration.port = event.port;\n\t\t\t\tsession.setSubId(event.subId);\n\t\t\t\tthis.launchOrAttachToSession(session);\n\t\t\t}\n\t\t}));\n\t\tthis.disposables.add(this.extensionHostDebugService.onTerminateSession(event => {\n\t\t\tconst session = this.model.getSession(event.sessionId);\n\t\t\tif (session && session.subId === event.subId) {\n\t\t\t\tsession.disconnect();\n\t\t\t}\n\t\t}));\n\n\t\tthis.disposables.add(this.viewModel.onDidFocusStackFrame(() => {\n\t\t\tthis.onStateChange();\n\t\t}));\n\t\tthis.disposables.add(this.viewModel.onDidFocusSession((session: IDebugSession | undefined) => {\n\t\t\tthis.onStateChange();\n\n\t\t\tif (session) {\n\t\t\t\tthis.setExceptionBreakpointFallbackSession(session.getId());\n\t\t\t}\n\t\t}));\n\t\tthis.disposables.add(Event.any(this.adapterManager.onDidRegisterDebugger, this.configurationManager.onDidSelectConfiguration)(() => {\n\t\t\tconst debugUxValue = (this.state !== State.Inactive || (this.configurationManager.getAllConfigurations().length > 0 && this.adapterManager.hasEnabledDebuggers())) ? 'default' : 'simple';\n\t\t\tthis.debugUx.set(debugUxValue);\n\t\t\tthis.debugStorage.storeDebugUxState(debugUxValue);\n\t\t}));\n\t\tthis.disposables.add(this.model.onDidChangeCallStack(() => {\n\t\t\tconst numberOfSessions = this.model.getSessions().filter(s => !s.parentSession).length;\n\t\t\tthis.activity?.dispose();\n\t\t\tif (numberOfSessions > 0) {\n\t\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerByViewId(CALLSTACK_VIEW_ID);\n\t\t\t\tif (viewContainer) {\n\t\t\t\t\tthis.activity = this.activityService.showViewContainerActivity(viewContainer.id, { badge: new NumberBadge(numberOfSessions, n => n === 1 ? nls.localize('1activeSession', \"1 active session\") : nls.localize('nActiveSessions', \"{0} active sessions\", n)) });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.disposables.add(editorService.onDidActiveEditorChange(() => {\n\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\tif (editorService.activeEditor === DisassemblyViewInput.instance) {\n\t\t\t\t\tthis.disassemblyViewFocus.set(true);\n\t\t\t\t} else {\n\t\t\t\t\t// This key can be initialized a tick after this event is fired\n\t\t\t\t\tthis.disassemblyViewFocus?.reset();\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\tthis.disposables.add(this.lifecycleService.onBeforeShutdown(() => {\n\t\t\tfor (const editor of editorService.editors) {\n\t\t\t\t// Editors will not be valid on window reload, so close them.\n\t\t\t\tif (editor.resource?.scheme === DEBUG_MEMORY_SCHEME) {\n\t\t\t\t\teditor.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.disposables.add(extensionService.onWillStop(evt => {\n\t\t\tevt.veto(\n\t\t\t\tthis.model.getSessions().length > 0,\n\t\t\t\tnls.localize('active debug session', 'A debug session is still running.'),\n\t\t\t);\n\t\t}));\n\n\t\tthis.initContextKeys(contextKeyService);\n\t}\n\n\tprivate initContextKeys(contextKeyService: IContextKeyService): void {\n\t\tqueueMicrotask(() => {\n\t\t\tcontextKeyService.bufferChangeEvents(() => {\n\t\t\t\tthis.debugType = CONTEXT_DEBUG_TYPE.bindTo(contextKeyService);\n\t\t\t\tthis.debugState = CONTEXT_DEBUG_STATE.bindTo(contextKeyService);\n\t\t\t\tthis.hasDebugged =\n\t\t\t\t\tCONTEXT_HAS_DEBUGGED.bindTo(contextKeyService);\n\t\t\t\tthis.inDebugMode =\n\t\t\t\t\tCONTEXT_IN_DEBUG_MODE.bindTo(contextKeyService);\n\t\t\t\tthis.debugUx = CONTEXT_DEBUG_UX.bindTo(contextKeyService);\n\t\t\t\tthis.debugUx.set(this.debugStorage.loadDebugUxState());\n\t\t\t\tthis.breakpointsExist =\n\t\t\t\t\tCONTEXT_BREAKPOINTS_EXIST.bindTo(contextKeyService);\n\t\t\t\t// Need to set disassemblyViewFocus here to make it in the same context as the debug event handlers\n\t\t\t\tthis.disassemblyViewFocus =\n\t\t\t\t\tCONTEXT_DISASSEMBLY_VIEW_FOCUS.bindTo(contextKeyService);\n\t\t\t});\n\n\t\t\tconst setBreakpointsExistContext = () =>\n\t\t\t\tthis.breakpointsExist.set(\n\t\t\t\t\t!!(\n\t\t\t\t\t\tthis.model.getBreakpoints().length ||\n\t\t\t\t\t\tthis.model.getDataBreakpoints().length ||\n\t\t\t\t\t\tthis.model.getFunctionBreakpoints().length\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\tsetBreakpointsExistContext();\n\t\t\tthis.disposables.add(\n\t\t\t\tthis.model.onDidChangeBreakpoints(() =>\n\t\t\t\t\tsetBreakpointsExistContext(),\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tgetModel(): IDebugModel {\n\t\treturn this.model;\n\t}\n\n\tgetViewModel(): IViewModel {\n\t\treturn this.viewModel;\n\t}\n\n\tgetConfigurationManager(): IConfigurationManager {\n\t\treturn this.configurationManager;\n\t}\n\n\tgetAdapterManager(): IAdapterManager {\n\t\treturn this.adapterManager;\n\t}\n\n\tsourceIsNotAvailable(uri: uri): void {\n\t\tthis.model.sourceIsNotAvailable(uri);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n\n\t//---- state management\n\n\tget state(): State {\n\t\tconst focusedSession = this.viewModel.focusedSession;\n\t\tif (focusedSession) {\n\t\t\treturn focusedSession.state;\n\t\t}\n\n\t\treturn this.initializing ? State.Initializing : State.Inactive;\n\t}\n\n\tget initializingOptions(): IDebugSessionOptions | undefined {\n\t\treturn this._initializingOptions;\n\t}\n\n\tprivate startInitializingState(options?: IDebugSessionOptions): void {\n\t\tif (!this.initializing) {\n\t\t\tthis.initializing = true;\n\t\t\tthis._initializingOptions = options;\n\t\t\tthis.onStateChange();\n\t\t}\n\t}\n\n\tprivate endInitializingState(): void {\n\t\tif (this.initializing) {\n\t\t\tthis.initializing = false;\n\t\t\tthis._initializingOptions = undefined;\n\t\t\tthis.onStateChange();\n\t\t}\n\t}\n\n\tprivate cancelTokens(id: string | undefined): void {\n\t\tif (id) {\n\t\t\tconst token = this.sessionCancellationTokens.get(id);\n\t\t\tif (token) {\n\t\t\t\ttoken.cancel();\n\t\t\t\tthis.sessionCancellationTokens.delete(id);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.sessionCancellationTokens.forEach((t) => t.cancel());\n\t\t\tthis.sessionCancellationTokens.clear();\n\t\t}\n\t}\n\n\tprivate onStateChange(): void {\n\t\tconst state = this.state;\n\t\tif (this.previousState !== state) {\n\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\tthis.debugState.set(getStateLabel(state));\n\t\t\t\tthis.inDebugMode.set(state !== State.Inactive);\n\t\t\t\t// Only show the simple ux if debug is not yet started and if no launch.json exists\n\t\t\t\tconst debugUxValue =\n\t\t\t\t\t(state !== State.Inactive &&\n\t\t\t\t\t\tstate !== State.Initializing) ||\n\t\t\t\t\t(this.adapterManager.hasEnabledDebuggers() &&\n\t\t\t\t\t\tthis.configurationManager.selectedConfiguration.name)\n\t\t\t\t\t\t? \"default\"\n\t\t\t\t\t\t: \"simple\";\n\t\t\t\tthis.debugUx.set(debugUxValue);\n\t\t\t\tthis.debugStorage.storeDebugUxState(debugUxValue);\n\t\t\t});\n\t\t\tthis.previousState = state;\n\t\t\tthis._onDidChangeState.fire(state);\n\t\t}\n\t}\n\n\tget onDidChangeState(): Event<State> {\n\t\treturn this._onDidChangeState.event;\n\t}\n\n\tget onDidNewSession(): Event<IDebugSession> {\n\t\treturn this._onDidNewSession.event;\n\t}\n\n\tget onWillNewSession(): Event<IDebugSession> {\n\t\treturn this._onWillNewSession.event;\n\t}\n\n\tget onDidEndSession(): Event<{ session: IDebugSession; restart: boolean }> {\n\t\treturn this._onDidEndSession.event;\n\t}\n\n\tprivate lazySetup() {\n\t\tif (!this.haveDoneLazySetup) {\n\t\t\t// Registering fs providers is slow\n\t\t\t// https://github.com/microsoft/vscode/issues/159886\n\t\t\tthis.disposables.add(\n\t\t\t\tthis.fileService.registerProvider(\n\t\t\t\t\tDEBUG_MEMORY_SCHEME,\n\t\t\t\t\tnew DebugMemoryFileSystemProvider(this),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.haveDoneLazySetup = true;\n\t\t}\n\t}\n\n\t//---- life cycle management\n\n\t/**\n\t * main entry point\n\t * properly manages compounds, checks for errors and handles the initializing state.\n\t */\n\tasync startDebugging(\n\t\tlaunch: ILaunch | undefined,\n\t\tconfigOrName?: IConfig | string,\n\t\toptions?: IDebugSessionOptions,\n\t\tsaveBeforeStart = !options?.parentSession,\n\t): Promise<boolean> {\n\t\tconst message =\n\t\t\toptions && options.noDebug\n\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\"runTrust\",\n\t\t\t\t\t\t\"Running executes build tasks and program code from your workspace.\",\n\t\t\t\t\t)\n\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\"debugTrust\",\n\t\t\t\t\t\t\"Debugging executes build tasks and program code from your workspace.\",\n\t\t\t\t\t);\n\t\tconst trust =\n\t\t\tawait this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\t\tmessage,\n\t\t\t});\n\t\tif (!trust) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.lazySetup();\n\t\tthis.startInitializingState(options);\n\t\tthis.hasDebugged.set(true);\n\t\ttry {\n\t\t\t// make sure to save all files and that the configuration is up to date\n\t\t\tawait this.extensionService.activateByEvent(\"onDebug\");\n\t\t\tif (saveBeforeStart) {\n\t\t\t\tawait saveAllBeforeDebugStart(\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t\tthis.editorService,\n\t\t\t\t);\n\t\t\t}\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t\tlet config: IConfig | undefined;\n\t\t\tlet compound: ICompound | undefined;\n\t\t\tif (!configOrName) {\n\t\t\t\tconfigOrName =\n\t\t\t\t\tthis.configurationManager.selectedConfiguration.name;\n\t\t\t}\n\t\t\tif (typeof configOrName === \"string\" && launch) {\n\t\t\t\tconfig = launch.getConfiguration(configOrName);\n\t\t\t\tcompound = launch.getCompound(configOrName);\n\t\t\t} else if (typeof configOrName !== \"string\") {\n\t\t\t\tconfig = configOrName;\n\t\t\t}\n\n\t\t\tif (compound) {\n\t\t\t\t// we are starting a compound debug, first do some error checking and than start each configuration in the compound\n\t\t\t\tif (!compound.configurations) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"compoundMustHaveConfigurations\",\n\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t'compound indicates a \"compounds\" configuration item',\n\t\t\t\t\t\t\t\t\t'\"configurations\" is an attribute and should not be localized',\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'Compound must have \"configurations\" attribute set in order to start multiple configurations.',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (compound.preLaunchTask) {\n\t\t\t\t\tconst taskResult =\n\t\t\t\t\t\tawait this.taskRunner.runTaskAndCheckErrors(\n\t\t\t\t\t\t\tlaunch?.workspace ||\n\t\t\t\t\t\t\t\tthis.contextService.getWorkspace(),\n\t\t\t\t\t\t\tcompound.preLaunchTask,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (taskResult === TaskRunResult.Failure) {\n\t\t\t\t\t\tthis.endInitializingState();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (compound.stopAll) {\n\t\t\t\t\toptions = {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\tcompoundRoot: new DebugCompoundRoot(),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst values = await Promise.all(\n\t\t\t\t\tcompound.configurations.map((configData) => {\n\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\ttypeof configData === \"string\"\n\t\t\t\t\t\t\t\t? configData\n\t\t\t\t\t\t\t\t: configData.name;\n\t\t\t\t\t\tif (name === compound.name) {\n\t\t\t\t\t\t\treturn Promise.resolve(false);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet launchForName: ILaunch | undefined;\n\t\t\t\t\t\tif (typeof configData === \"string\") {\n\t\t\t\t\t\t\tconst launchesContainingName =\n\t\t\t\t\t\t\t\tthis.configurationManager\n\t\t\t\t\t\t\t\t\t.getLaunches()\n\t\t\t\t\t\t\t\t\t.filter((l) => !!l.getConfiguration(name));\n\t\t\t\t\t\t\tif (launchesContainingName.length === 1) {\n\t\t\t\t\t\t\t\tlaunchForName = launchesContainingName[0];\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\tlaunch &&\n\t\t\t\t\t\t\t\tlaunchesContainingName.length > 1 &&\n\t\t\t\t\t\t\t\tlaunchesContainingName.indexOf(launch) >= 0\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t// If there are multiple launches containing the configuration give priority to the configuration in the current launch\n\t\t\t\t\t\t\t\tlaunchForName = launch;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\tlaunchesContainingName.length === 0\n\t\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"noConfigurationNameInWorkspace\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Could not find launch configuration '{0}' in the workspace.\",\n\t\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"multipleConfigurationNamesInWorkspace\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.\",\n\t\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (configData.folder) {\n\t\t\t\t\t\t\tconst launchesMatchingConfigData =\n\t\t\t\t\t\t\t\tthis.configurationManager\n\t\t\t\t\t\t\t\t\t.getLaunches()\n\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t(l) =>\n\t\t\t\t\t\t\t\t\t\t\tl.workspace &&\n\t\t\t\t\t\t\t\t\t\t\tl.workspace.name ===\n\t\t\t\t\t\t\t\t\t\t\t\tconfigData.folder &&\n\t\t\t\t\t\t\t\t\t\t\t!!l.getConfiguration(\n\t\t\t\t\t\t\t\t\t\t\t\tconfigData.name,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (launchesMatchingConfigData.length === 1) {\n\t\t\t\t\t\t\t\tlaunchForName = launchesMatchingConfigData[0];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\"noFolderWithName\",\n\t\t\t\t\t\t\t\t\t\t\"Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.\",\n\t\t\t\t\t\t\t\t\t\tconfigData.folder,\n\t\t\t\t\t\t\t\t\t\tconfigData.name,\n\t\t\t\t\t\t\t\t\t\tcompound.name,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this.createSession(\n\t\t\t\t\t\t\tlaunchForName,\n\t\t\t\t\t\t\tlaunchForName!.getConfiguration(name),\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tconst result = values.every((success) => !!success); // Compound launch is a success only if each configuration launched successfully\n\t\t\t\tthis.endInitializingState();\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tif (configOrName && !config) {\n\t\t\t\tconst message = !!launch\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"configMissing\",\n\t\t\t\t\t\t\t\"Configuration '{0}' is missing in 'launch.json'.\",\n\t\t\t\t\t\t\ttypeof configOrName === \"string\"\n\t\t\t\t\t\t\t\t? configOrName\n\t\t\t\t\t\t\t\t: configOrName.name,\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\"launchJsonDoesNotExist\",\n\t\t\t\t\t\t\t\"'launch.json' does not exist for passed workspace folder.\",\n\t\t\t\t\t\t);\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\n\t\t\tconst result = await this.createSession(launch, config, options);\n\t\t\tthis.endInitializingState();\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\t// make sure to get out of initializing state, and propagate the result\n\t\t\tthis.notificationService.error(err);\n\t\t\tthis.endInitializingState();\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * gets the debugger for the type, resolves configurations by providers, substitutes variables and runs prelaunch tasks\n\t */\n\tprivate async createSession(\n\t\tlaunch: ILaunch | undefined,\n\t\tconfig: IConfig | undefined,\n\t\toptions?: IDebugSessionOptions,\n\t): Promise<boolean> {\n\t\t// We keep the debug type in a separate variable 'type' so that a no-folder config has no attributes.\n\t\t// Storing the type in the config would break extensions that assume that the no-folder case is indicated by an empty config.\n\t\tlet type: string | undefined;\n\t\tif (config) {\n\t\t\ttype = config.type;\n\t\t} else {\n\t\t\t// a no-folder workspace has no launch.config\n\t\t\tconfig = Object.create(null);\n\t\t}\n\t\tif (options && options.noDebug) {\n\t\t\tconfig!.noDebug = true;\n\t\t} else if (\n\t\t\toptions &&\n\t\t\ttypeof options.noDebug === \"undefined\" &&\n\t\t\toptions.parentSession &&\n\t\t\toptions.parentSession.configuration.noDebug\n\t\t) {\n\t\t\tconfig!.noDebug = true;\n\t\t}\n\t\tconst unresolvedConfig = deepClone(config);\n\n\t\tlet guess: Debugger | undefined;\n\t\tlet activeEditor: EditorInput | undefined;\n\t\tif (!type) {\n\t\t\tactiveEditor = this.editorService.activeEditor;\n\t\t\tif (activeEditor && activeEditor.resource) {\n\t\t\t\ttype =\n\t\t\t\t\tthis.chosenEnvironments[activeEditor.resource.toString()];\n\t\t\t}\n\t\t\tif (!type) {\n\t\t\t\tguess = await this.adapterManager.guessDebugger(false);\n\t\t\t\tif (guess) {\n\t\t\t\t\ttype = guess.type;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst initCancellationToken = new CancellationTokenSource();\n\t\tconst sessionId = generateUuid();\n\t\tthis.sessionCancellationTokens.set(sessionId, initCancellationToken);\n\n\t\tconst configByProviders =\n\t\t\tawait this.configurationManager.resolveConfigurationByProviders(\n\t\t\t\tlaunch && launch.workspace ? launch.workspace.uri : undefined,\n\t\t\t\ttype,\n\t\t\t\tconfig!,\n\t\t\t\tinitCancellationToken.token,\n\t\t\t);\n\t\t// a falsy config indicates an aborted launch\n\t\tif (configByProviders && configByProviders.type) {\n\t\t\ttry {\n\t\t\t\tlet resolvedConfig = await this.substituteVariables(\n\t\t\t\t\tlaunch,\n\t\t\t\t\tconfigByProviders,\n\t\t\t\t);\n\t\t\t\tif (!resolvedConfig) {\n\t\t\t\t\t// User cancelled resolving of interactive variables, silently return\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (initCancellationToken.token.isCancellationRequested) {\n\t\t\t\t\t// User cancelled, silently return\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst workspace =\n\t\t\t\t\tlaunch?.workspace || this.contextService.getWorkspace();\n\t\t\t\tconst taskResult = await this.taskRunner.runTaskAndCheckErrors(\n\t\t\t\t\tworkspace,\n\t\t\t\t\tresolvedConfig.preLaunchTask,\n\t\t\t\t);\n\t\t\t\tif (taskResult === TaskRunResult.Failure) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst cfg =\n\t\t\t\t\tawait this.configurationManager.resolveDebugConfigurationWithSubstitutedVariables(\n\t\t\t\t\t\tlaunch && launch.workspace\n\t\t\t\t\t\t\t? launch.workspace.uri\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tresolvedConfig.type,\n\t\t\t\t\t\tresolvedConfig,\n\t\t\t\t\t\tinitCancellationToken.token,\n\t\t\t\t\t);\n\t\t\t\tif (!cfg) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tlaunch &&\n\t\t\t\t\t\ttype &&\n\t\t\t\t\t\tcfg === null &&\n\t\t\t\t\t\t!initCancellationToken.token.isCancellationRequested\n\t\t\t\t\t) {\n\t\t\t\t\t\t// show launch.json only for \"config\" being \"null\".\n\t\t\t\t\t\tawait launch.openConfigFile(\n\t\t\t\t\t\t\t{ preserveFocus: true, type },\n\t\t\t\t\t\t\tinitCancellationToken.token,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tresolvedConfig = cfg;\n\n\t\t\t\tconst dbg = this.adapterManager.getDebugger(\n\t\t\t\t\tresolvedConfig.type,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!dbg ||\n\t\t\t\t\t(configByProviders.request !== \"attach\" &&\n\t\t\t\t\t\tconfigByProviders.request !== \"launch\")\n\t\t\t\t) {\n\t\t\t\t\tlet message: string;\n\t\t\t\t\tif (\n\t\t\t\t\t\tconfigByProviders.request !== \"attach\" &&\n\t\t\t\t\t\tconfigByProviders.request !== \"launch\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tmessage = configByProviders.request\n\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\"debugRequestNotSupported\",\n\t\t\t\t\t\t\t\t\t\"Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.\",\n\t\t\t\t\t\t\t\t\t\"request\",\n\t\t\t\t\t\t\t\t\tconfigByProviders.request,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\"debugRequesMissing\",\n\t\t\t\t\t\t\t\t\t\"Attribute '{0}' is missing from the chosen debug configuration.\",\n\t\t\t\t\t\t\t\t\t\"request\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage = resolvedConfig.type\n\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\"debugTypeNotSupported\",\n\t\t\t\t\t\t\t\t\t\"Configured debug type '{0}' is not supported.\",\n\t\t\t\t\t\t\t\t\tresolvedConfig.type,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\"debugTypeMissing\",\n\t\t\t\t\t\t\t\t\t\"Missing property 'type' for the chosen launch configuration.\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst actionList: IAction[] = [];\n\n\t\t\t\t\tactionList.push(\n\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\"installAdditionalDebuggers\",\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"installAdditionalDebuggers\",\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t'Placeholder is the debug type, so for example \"node\", \"python\"',\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Install {0} Extension\",\n\t\t\t\t\t\t\t\tresolvedConfig.type,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tasync () =>\n\t\t\t\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\t\t\t\"debug.installAdditionalDebuggers\",\n\t\t\t\t\t\t\t\t\tresolvedConfig?.type,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tawait this.showError(message, actionList);\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!dbg.enabled) {\n\t\t\t\t\tawait this.showError(debuggerDisabledMessage(dbg.type), []);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst result = await this.doCreateSession(\n\t\t\t\t\tsessionId,\n\t\t\t\t\tlaunch?.workspace,\n\t\t\t\t\t{ resolved: resolvedConfig, unresolved: unresolvedConfig },\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t\tif (result && guess && activeEditor && activeEditor.resource) {\n\t\t\t\t\t// Remeber user choice of environment per active editor to make starting debugging smoother #124770\n\t\t\t\t\tthis.chosenEnvironments[activeEditor.resource.toString()] =\n\t\t\t\t\t\tguess.type;\n\t\t\t\t\tthis.debugStorage.storeChosenEnvironments(\n\t\t\t\t\t\tthis.chosenEnvironments,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} catch (err) {\n\t\t\t\tif (err && err.message) {\n\t\t\t\t\tawait this.showError(err.message);\n\t\t\t\t} else if (\n\t\t\t\t\tthis.contextService.getWorkbenchState() ===\n\t\t\t\t\tWorkbenchState.EMPTY\n\t\t\t\t) {\n\t\t\t\t\tawait this.showError(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"noFolderWorkspaceDebugError\",\n\t\t\t\t\t\t\t\"The active file can not be debugged. Make sure it is saved and that you have a debug extension installed for that file type.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tlaunch &&\n\t\t\t\t\t!initCancellationToken.token.isCancellationRequested\n\t\t\t\t) {\n\t\t\t\t\tawait launch.openConfigFile(\n\t\t\t\t\t\t{ preserveFocus: true },\n\t\t\t\t\t\tinitCancellationToken.token,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tlaunch &&\n\t\t\ttype &&\n\t\t\tconfigByProviders === null &&\n\t\t\t!initCancellationToken.token.isCancellationRequested\n\t\t) {\n\t\t\t// show launch.json only for \"config\" being \"null\".\n\t\t\tawait launch.openConfigFile(\n\t\t\t\t{ preserveFocus: true, type },\n\t\t\t\tinitCancellationToken.token,\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * instantiates the new session, initializes the session, registers session listeners and reports telemetry\n\t */\n\tprivate async doCreateSession(\n\t\tsessionId: string,\n\t\troot: IWorkspaceFolder | undefined,\n\t\tconfiguration: { resolved: IConfig; unresolved: IConfig | undefined },\n\t\toptions?: IDebugSessionOptions,\n\t): Promise<boolean> {\n\t\tconst session = this.instantiationService.createInstance(\n\t\t\tDebugSession,\n\t\t\tsessionId,\n\t\t\tconfiguration,\n\t\t\troot,\n\t\t\tthis.model,\n\t\t\toptions,\n\t\t);\n\t\tif (\n\t\t\toptions?.startedByUser &&\n\t\t\tthis.model\n\t\t\t\t.getSessions()\n\t\t\t\t.some((s) => s.getLabel() === session.getLabel()) &&\n\t\t\tconfiguration.resolved.suppressMultipleSessionWarning !== true\n\t\t) {\n\t\t\t// There is already a session with the same name, prompt user #127721\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"multipleSession\",\n\t\t\t\t\t\"'{0}' is already running. Do you want to start another instance?\",\n\t\t\t\t\tsession.getLabel(),\n\t\t\t\t),\n\t\t\t});\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.addSession(session);\n\n\t\t// since the Session is now properly registered under its ID and hooked, we can announce it\n\t\t// this event doesn't go to extensions\n\t\tthis._onWillNewSession.fire(session);\n\n\t\tconst openDebug =\n\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\"debug\",\n\t\t\t).openDebug;\n\t\t// Open debug viewlet based on the visibility of the side bar and openDebug setting. Do not open for 'run without debug'\n\t\tif (\n\t\t\t!configuration.resolved.noDebug &&\n\t\t\t(openDebug === \"openOnSessionStart\" ||\n\t\t\t\t(openDebug !== \"neverOpen\" &&\n\t\t\t\t\tthis.viewModel.firstSessionStart)) &&\n\t\t\t!session.suppressDebugView\n\t\t) {\n\t\t\tawait this.paneCompositeService.openPaneComposite(\n\t\t\t\tVIEWLET_ID,\n\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.launchOrAttachToSession(session);\n\n\t\t\tconst internalConsoleOptions =\n\t\t\t\tsession.configuration.internalConsoleOptions ||\n\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\"debug\")\n\t\t\t\t\t.internalConsoleOptions;\n\t\t\tif (\n\t\t\t\tinternalConsoleOptions === \"openOnSessionStart\" ||\n\t\t\t\t(this.viewModel.firstSessionStart &&\n\t\t\t\t\tinternalConsoleOptions === \"openOnFirstSessionStart\")\n\t\t\t) {\n\t\t\t\tthis.viewsService.openView(REPL_VIEW_ID, false);\n\t\t\t}\n\n\t\t\tthis.viewModel.firstSessionStart = false;\n\t\t\tconst showSubSessions =\n\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\"debug\",\n\t\t\t\t).showSubSessionsInToolBar;\n\t\t\tconst sessions = this.model.getSessions();\n\t\t\tconst shownSessions = showSubSessions\n\t\t\t\t? sessions\n\t\t\t\t: sessions.filter((s) => !s.parentSession);\n\t\t\tif (shownSessions.length > 1) {\n\t\t\t\tthis.viewModel.setMultiSessionView(true);\n\t\t\t}\n\n\t\t\t// since the initialized response has arrived announce the new Session (including extensions)\n\t\t\tthis._onDidNewSession.fire(session);\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tif (errors.isCancellationError(error)) {\n\t\t\t\t// don't show 'canceled' error messages to the user #7906\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Show the repl if some error got logged there #5870\n\t\t\tif (session && session.getReplElements().length > 0) {\n\t\t\t\tthis.viewsService.openView(REPL_VIEW_ID, false);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tsession.configuration &&\n\t\t\t\tsession.configuration.request === \"attach\" &&\n\t\t\t\tsession.configuration.__autoAttach\n\t\t\t) {\n\t\t\t\t// ignore attach timeouts in auto attach mode\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst errorMessage = error instanceof Error ? error.message : error;\n\t\t\tif (error.showUser !== false) {\n\t\t\t\t// Only show the error when showUser is either not defined, or is true #128484\n\t\t\t\tawait this.showError(\n\t\t\t\t\terrorMessage,\n\t\t\t\t\tisErrorWithActions(error) ? error.actions : [],\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate async launchOrAttachToSession(\n\t\tsession: IDebugSession,\n\t\tforceFocus = false,\n\t): Promise<void> {\n\t\t// register listeners as the very first thing!\n\t\tthis.registerSessionListeners(session);\n\n\t\tconst dbgr = this.adapterManager.getDebugger(\n\t\t\tsession.configuration.type,\n\t\t);\n\t\ttry {\n\t\t\tawait session.initialize(dbgr!);\n\t\t\tawait session.launchOrAttach(session.configuration);\n\t\t\tconst launchJsonExists =\n\t\t\t\t!!session.root &&\n\t\t\t\t!!this.configurationService.getValue<IGlobalConfig>(\"launch\", {\n\t\t\t\t\tresource: session.root.uri,\n\t\t\t\t});\n\t\t\tawait this.telemetry.logDebugSessionStart(dbgr!, launchJsonExists);\n\n\t\t\tif (\n\t\t\t\tforceFocus ||\n\t\t\t\t!this.viewModel.focusedSession ||\n\t\t\t\t(session.parentSession === this.viewModel.focusedSession &&\n\t\t\t\t\tsession.compact)\n\t\t\t) {\n\t\t\t\tawait this.focusStackFrame(undefined, undefined, session);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (this.viewModel.focusedSession === session) {\n\t\t\t\tawait this.focusStackFrame(undefined);\n\t\t\t}\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprivate registerSessionListeners(session: IDebugSession): void {\n\t\tconst listenerDisposables = new DisposableStore();\n\t\tthis.disposables.add(listenerDisposables);\n\n\t\tconst sessionRunningScheduler = listenerDisposables.add(\n\t\t\tnew RunOnceScheduler(() => {\n\t\t\t\t// Do not immediatly defocus the stack frame if the session is running\n\t\t\t\tif (\n\t\t\t\t\tsession.state === State.Running &&\n\t\t\t\t\tthis.viewModel.focusedSession === session\n\t\t\t\t) {\n\t\t\t\t\tthis.viewModel.setFocus(\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tthis.viewModel.focusedThread,\n\t\t\t\t\t\tsession,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}, 200),\n\t\t);\n\t\tlistenerDisposables.add(\n\t\t\tsession.onDidChangeState(() => {\n\t\t\t\tif (\n\t\t\t\t\tsession.state === State.Running &&\n\t\t\t\t\tthis.viewModel.focusedSession === session\n\t\t\t\t) {\n\t\t\t\t\tsessionRunningScheduler.schedule();\n\t\t\t\t}\n\t\t\t\tif (session === this.viewModel.focusedSession) {\n\t\t\t\t\tthis.onStateChange();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tlistenerDisposables.add(\n\t\t\tthis.onDidEndSession((e) => {\n\t\t\t\tif (e.session === session) {\n\t\t\t\t\tthis.disposables.delete(listenerDisposables);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tlistenerDisposables.add(\n\t\t\tsession.onDidEndAdapter(async (adapterExitEvent) => {\n\t\t\t\tif (adapterExitEvent) {\n\t\t\t\t\tif (adapterExitEvent.error) {\n\t\t\t\t\t\tthis.notificationService.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"debugAdapterCrash\",\n\t\t\t\t\t\t\t\t\"Debug adapter process has terminated unexpectedly ({0})\",\n\t\t\t\t\t\t\t\tadapterExitEvent.error.message ||\n\t\t\t\t\t\t\t\t\tadapterExitEvent.error.toString(),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthis.telemetry.logDebugSessionStop(\n\t\t\t\t\t\tsession,\n\t\t\t\t\t\tadapterExitEvent,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// 'Run without debugging' mode VSCode must terminate the extension host. More details: #3905\n\t\t\t\tconst extensionDebugSession =\n\t\t\t\t\tgetExtensionHostDebugSession(session);\n\t\t\t\tif (\n\t\t\t\t\textensionDebugSession &&\n\t\t\t\t\textensionDebugSession.state === State.Running &&\n\t\t\t\t\textensionDebugSession.configuration.noDebug\n\t\t\t\t) {\n\t\t\t\t\tthis.extensionHostDebugService.close(\n\t\t\t\t\t\textensionDebugSession.getId(),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (session.configuration.postDebugTask) {\n\t\t\t\t\tconst root =\n\t\t\t\t\t\tsession.root ?? this.contextService.getWorkspace();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.taskRunner.runTask(\n\t\t\t\t\t\t\troot,\n\t\t\t\t\t\t\tsession.configuration.postDebugTask,\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.notificationService.error(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.endInitializingState();\n\t\t\t\tthis.cancelTokens(session.getId());\n\n\t\t\t\tif (\n\t\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\t\"debug\",\n\t\t\t\t\t).closeReadonlyTabsOnEnd\n\t\t\t\t) {\n\t\t\t\t\tconst editorsToClose = this.editorService\n\t\t\t\t\t\t.getEditors(EditorsOrder.SEQUENTIAL)\n\t\t\t\t\t\t.filter(({ editor }) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\teditor.resource?.scheme === DEBUG_SCHEME &&\n\t\t\t\t\t\t\t\tsession.getId() ===\n\t\t\t\t\t\t\t\t\tSource.getEncodedDebugData(editor.resource)\n\t\t\t\t\t\t\t\t\t\t.sessionId\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\tthis.editorService.closeEditors(editorsToClose);\n\t\t\t\t}\n\t\t\t\tthis._onDidEndSession.fire({\n\t\t\t\t\tsession,\n\t\t\t\t\trestart: this.restartingSessions.has(session),\n\t\t\t\t});\n\n\t\t\t\tconst focusedSession = this.viewModel.focusedSession;\n\t\t\t\tif (\n\t\t\t\t\tfocusedSession &&\n\t\t\t\t\tfocusedSession.getId() === session.getId()\n\t\t\t\t) {\n\t\t\t\t\tconst { session, thread, stackFrame } =\n\t\t\t\t\t\tgetStackFrameThreadAndSessionToFocus(\n\t\t\t\t\t\t\tthis.model,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tfocusedSession,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.viewModel.setFocus(stackFrame, thread, session, false);\n\t\t\t\t}\n\n\t\t\t\tif (this.model.getSessions().length === 0) {\n\t\t\t\t\tthis.viewModel.setMultiSessionView(false);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.layoutService.isVisible(Parts.SIDEBAR_PART) &&\n\t\t\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\t\t\"debug\",\n\t\t\t\t\t\t).openExplorerOnEnd\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.paneCompositeService.openPaneComposite(\n\t\t\t\t\t\t\tEXPLORER_VIEWLET_ID,\n\t\t\t\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Data breakpoints that can not be persisted should be cleared when a session ends\n\t\t\t\t\tconst dataBreakpoints = this.model\n\t\t\t\t\t\t.getDataBreakpoints()\n\t\t\t\t\t\t.filter((dbp) => !dbp.canPersist);\n\t\t\t\t\tdataBreakpoints.forEach((dbp) =>\n\t\t\t\t\t\tthis.model.removeDataBreakpoints(dbp.getId()),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\t\t\"debug\",\n\t\t\t\t\t\t).console.closeOnEnd\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst debugConsoleContainer =\n\t\t\t\t\t\t\tthis.viewDescriptorService.getViewContainerByViewId(\n\t\t\t\t\t\t\t\tREPL_VIEW_ID,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tdebugConsoleContainer &&\n\t\t\t\t\t\t\tthis.viewsService.isViewContainerVisible(\n\t\t\t\t\t\t\t\tdebugConsoleContainer.id,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.viewsService.closeViewContainer(\n\t\t\t\t\t\t\t\tdebugConsoleContainer.id,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.removeExceptionBreakpointsForSession(\n\t\t\t\t\tsession.getId(),\n\t\t\t\t);\n\t\t\t\t// session.dispose(); TODO@roblourens\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync restartSession(\n\t\tsession: IDebugSession,\n\t\trestartData?: any,\n\t): Promise<any> {\n\t\tif (session.saveBeforeRestart) {\n\t\t\tawait saveAllBeforeDebugStart(\n\t\t\t\tthis.configurationService,\n\t\t\t\tthis.editorService,\n\t\t\t);\n\t\t}\n\n\t\tconst isAutoRestart = !!restartData;\n\n\t\tconst runTasks: () => Promise<TaskRunResult> = async () => {\n\t\t\tif (isAutoRestart) {\n\t\t\t\t// Do not run preLaunch and postDebug tasks for automatic restarts\n\t\t\t\treturn Promise.resolve(TaskRunResult.Success);\n\t\t\t}\n\n\t\t\tconst root = session.root || this.contextService.getWorkspace();\n\t\t\tawait this.taskRunner.runTask(\n\t\t\t\troot,\n\t\t\t\tsession.configuration.preRestartTask,\n\t\t\t);\n\t\t\tawait this.taskRunner.runTask(\n\t\t\t\troot,\n\t\t\t\tsession.configuration.postDebugTask,\n\t\t\t);\n\n\t\t\tconst taskResult1 = await this.taskRunner.runTaskAndCheckErrors(\n\t\t\t\troot,\n\t\t\t\tsession.configuration.preLaunchTask,\n\t\t\t);\n\t\t\tif (taskResult1 !== TaskRunResult.Success) {\n\t\t\t\treturn taskResult1;\n\t\t\t}\n\n\t\t\treturn this.taskRunner.runTaskAndCheckErrors(\n\t\t\t\troot,\n\t\t\t\tsession.configuration.postRestartTask,\n\t\t\t);\n\t\t};\n\n\t\tconst extensionDebugSession = getExtensionHostDebugSession(session);\n\t\tif (extensionDebugSession) {\n\t\t\tconst taskResult = await runTasks();\n\t\t\tif (taskResult === TaskRunResult.Success) {\n\t\t\t\tthis.extensionHostDebugService.reload(\n\t\t\t\t\textensionDebugSession.getId(),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Read the configuration again if a launch.json has been changed, if not just use the inmemory configuration\n\t\tlet needsToSubstitute = false;\n\t\tlet unresolved: IConfig | undefined;\n\t\tconst launch = session.root\n\t\t\t? this.configurationManager.getLaunch(session.root.uri)\n\t\t\t: undefined;\n\t\tif (launch) {\n\t\t\tunresolved = launch.getConfiguration(session.configuration.name);\n\t\t\tif (\n\t\t\t\tunresolved &&\n\t\t\t\t!equals(unresolved, session.unresolvedConfiguration)\n\t\t\t) {\n\t\t\t\tunresolved.noDebug = session.configuration.noDebug;\n\t\t\t\tneedsToSubstitute = true;\n\t\t\t}\n\t\t}\n\n\t\tlet resolved: IConfig | undefined | null = session.configuration;\n\t\tif (launch && needsToSubstitute && unresolved) {\n\t\t\tconst initCancellationToken = new CancellationTokenSource();\n\t\t\tthis.sessionCancellationTokens.set(\n\t\t\t\tsession.getId(),\n\t\t\t\tinitCancellationToken,\n\t\t\t);\n\t\t\tconst resolvedByProviders =\n\t\t\t\tawait this.configurationManager.resolveConfigurationByProviders(\n\t\t\t\t\tlaunch.workspace ? launch.workspace.uri : undefined,\n\t\t\t\t\tunresolved.type,\n\t\t\t\t\tunresolved,\n\t\t\t\t\tinitCancellationToken.token,\n\t\t\t\t);\n\t\t\tif (resolvedByProviders) {\n\t\t\t\tresolved = await this.substituteVariables(\n\t\t\t\t\tlaunch,\n\t\t\t\t\tresolvedByProviders,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tresolved &&\n\t\t\t\t\t!initCancellationToken.token.isCancellationRequested\n\t\t\t\t) {\n\t\t\t\t\tresolved =\n\t\t\t\t\t\tawait this.configurationManager.resolveDebugConfigurationWithSubstitutedVariables(\n\t\t\t\t\t\t\tlaunch && launch.workspace\n\t\t\t\t\t\t\t\t? launch.workspace.uri\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\tresolved.type,\n\t\t\t\t\t\t\tresolved,\n\t\t\t\t\t\t\tinitCancellationToken.token,\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolved = resolvedByProviders;\n\t\t\t}\n\t\t}\n\t\tif (resolved) {\n\t\t\tsession.setConfiguration({ resolved, unresolved });\n\t\t}\n\t\tsession.configuration.__restart = restartData;\n\n\t\tconst doRestart = async (fn: () => Promise<boolean | undefined>) => {\n\t\t\tthis.restartingSessions.add(session);\n\t\t\tlet didRestart = false;\n\t\t\ttry {\n\t\t\t\tdidRestart = (await fn()) !== false;\n\t\t\t} catch (e) {\n\t\t\t\tdidRestart = false;\n\t\t\t\tthrow e;\n\t\t\t} finally {\n\t\t\t\tthis.restartingSessions.delete(session);\n\t\t\t\t// we previously may have issued an onDidEndSession with restart: true,\n\t\t\t\t// assuming the adapter exited (in `registerSessionListeners`). But the\n\t\t\t\t// restart failed, so emit the final termination now.\n\t\t\t\tif (!didRestart) {\n\t\t\t\t\tthis._onDidEndSession.fire({ session, restart: false });\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// For debug sessions spawned by test runs, cancel the test run and stop\n\t\t// the session, then start the test run again; tests have no notion of restarts.\n\t\tif (session.correlatedTestRun) {\n\t\t\tif (!session.correlatedTestRun.completedAt) {\n\t\t\t\tthis.testService.cancelTestRun(session.correlatedTestRun.id);\n\t\t\t\tawait Event.toPromise(session.correlatedTestRun.onComplete);\n\t\t\t\t// todo@connor4312 is there any reason to wait for the debug session to\n\t\t\t\t// terminate? I don't think so, test extension should already handle any\n\t\t\t\t// state conflicts...\n\t\t\t}\n\n\t\t\tthis.testService.runResolvedTests(\n\t\t\t\tsession.correlatedTestRun.request,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (session.capabilities.supportsRestartRequest) {\n\t\t\tconst taskResult = await runTasks();\n\t\t\tif (taskResult === TaskRunResult.Success) {\n\t\t\t\tawait doRestart(async () => {\n\t\t\t\t\tawait session.restart();\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldFocus =\n\t\t\t!!this.viewModel.focusedSession &&\n\t\t\tsession.getId() === this.viewModel.focusedSession.getId();\n\t\treturn doRestart(async () => {\n\t\t\t// If the restart is automatic  -> disconnect, otherwise -> terminate #55064\n\t\t\tif (isAutoRestart) {\n\t\t\t\tawait session.disconnect(true);\n\t\t\t} else {\n\t\t\t\tawait session.terminate(true);\n\t\t\t}\n\n\t\t\treturn new Promise<boolean>((c, e) => {\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tconst taskResult = await runTasks();\n\t\t\t\t\tif (taskResult !== TaskRunResult.Success) {\n\t\t\t\t\t\treturn c(false);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!resolved) {\n\t\t\t\t\t\treturn c(false);\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.launchOrAttachToSession(\n\t\t\t\t\t\t\tsession,\n\t\t\t\t\t\t\tshouldFocus,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._onDidNewSession.fire(session);\n\t\t\t\t\t\tc(true);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\te(error);\n\t\t\t\t\t}\n\t\t\t\t}, 300);\n\t\t\t});\n\t\t});\n\t}\n\n\tasync stopSession(\n\t\tsession: IDebugSession | undefined,\n\t\tdisconnect = false,\n\t\tsuspend = false,\n\t): Promise<any> {\n\t\tif (session) {\n\t\t\treturn disconnect\n\t\t\t\t? session.disconnect(undefined, suspend)\n\t\t\t\t: session.terminate();\n\t\t}\n\n\t\tconst sessions = this.model.getSessions();\n\t\tif (sessions.length === 0) {\n\t\t\tthis.taskRunner.cancel();\n\t\t\t// User might have cancelled starting of a debug session, and in some cases the quick pick is left open\n\t\t\tawait this.quickInputService.cancel();\n\t\t\tthis.endInitializingState();\n\t\t\tthis.cancelTokens(undefined);\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\tsessions.map((s) =>\n\t\t\t\tdisconnect ? s.disconnect(undefined, suspend) : s.terminate(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async substituteVariables(\n\t\tlaunch: ILaunch | undefined,\n\t\tconfig: IConfig,\n\t): Promise<IConfig | undefined> {\n\t\tconst dbg = this.adapterManager.getDebugger(config.type);\n\t\tif (dbg) {\n\t\t\tlet folder: IWorkspaceFolder | undefined;\n\t\t\tif (launch && launch.workspace) {\n\t\t\t\tfolder = launch.workspace;\n\t\t\t} else {\n\t\t\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\t\t\tif (folders.length === 1) {\n\t\t\t\t\tfolder = folders[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn await dbg.substituteVariables(folder, config);\n\t\t\t} catch (err) {\n\t\t\t\tthis.showError(\n\t\t\t\t\terr.message,\n\t\t\t\t\tundefined,\n\t\t\t\t\t!!launch?.getConfiguration(config.name),\n\t\t\t\t);\n\t\t\t\treturn undefined; // bail out\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(config);\n\t}\n\n\tprivate async showError(\n\t\tmessage: string,\n\t\terrorActions: ReadonlyArray<IAction> = [],\n\t\tpromptLaunchJson = true,\n\t): Promise<void> {\n\t\tconst configureAction = new Action(\n\t\t\tDEBUG_CONFIGURE_COMMAND_ID,\n\t\t\tDEBUG_CONFIGURE_LABEL,\n\t\t\tundefined,\n\t\t\ttrue,\n\t\t\t() =>\n\t\t\t\tthis.commandService.executeCommand(DEBUG_CONFIGURE_COMMAND_ID),\n\t\t);\n\t\t// Don't append the standard command if id of any provided action indicates it is a command\n\t\tconst actions =\n\t\t\terrorActions.filter((action) => action.id.endsWith(\".command\"))\n\t\t\t\t.length > 0\n\t\t\t\t? errorActions\n\t\t\t\t: [\n\t\t\t\t\t\t...errorActions,\n\t\t\t\t\t\t...(promptLaunchJson ? [configureAction] : []),\n\t\t\t\t\t];\n\t\tawait this.dialogService.prompt({\n\t\t\ttype: severity.Error,\n\t\t\tmessage,\n\t\t\tbuttons: actions.map((action) => ({\n\t\t\t\tlabel: action.label,\n\t\t\t\trun: () => action.run(),\n\t\t\t})),\n\t\t\tcancelButton: true,\n\t\t});\n\t}\n\n\t//---- focus management\n\n\tasync focusStackFrame(\n\t\t_stackFrame: IStackFrame | undefined,\n\t\t_thread?: IThread,\n\t\t_session?: IDebugSession,\n\t\toptions?: {\n\t\t\texplicit?: boolean;\n\t\t\tpreserveFocus?: boolean;\n\t\t\tsideBySide?: boolean;\n\t\t\tpinned?: boolean;\n\t\t},\n\t): Promise<void> {\n\t\tconst { stackFrame, thread, session } =\n\t\t\tgetStackFrameThreadAndSessionToFocus(\n\t\t\t\tthis.model,\n\t\t\t\t_stackFrame,\n\t\t\t\t_thread,\n\t\t\t\t_session,\n\t\t\t);\n\n\t\tif (stackFrame) {\n\t\t\tconst editor = await stackFrame.openInEditor(\n\t\t\t\tthis.editorService,\n\t\t\t\toptions?.preserveFocus ?? true,\n\t\t\t\toptions?.sideBySide,\n\t\t\t\toptions?.pinned,\n\t\t\t);\n\t\t\tif (editor) {\n\t\t\t\tif (editor.input === DisassemblyViewInput.instance) {\n\t\t\t\t\t// Go to address is invoked via setFocus\n\t\t\t\t} else {\n\t\t\t\t\tconst control = editor.getControl();\n\t\t\t\t\tif (\n\t\t\t\t\t\tstackFrame &&\n\t\t\t\t\t\tisCodeEditor(control) &&\n\t\t\t\t\t\tcontrol.hasModel()\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst model = control.getModel();\n\t\t\t\t\t\tconst lineNumber = stackFrame.range.startLineNumber;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlineNumber >= 1 &&\n\t\t\t\t\t\t\tlineNumber <= model.getLineCount()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst lineContent = control\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.getLineContent(lineNumber);\n\t\t\t\t\t\t\taria.alert(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tkey: \"debuggingPaused\",\n\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t'First placeholder is the file line content, second placeholder is the reason why debugging is stopped, for example \"breakpoint\", third is the stack frame name, and last is the line number.',\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"{0}, debugging paused {1}, {2}:{3}\",\n\t\t\t\t\t\t\t\t\tlineContent,\n\t\t\t\t\t\t\t\t\tthread && thread.stoppedDetails\n\t\t\t\t\t\t\t\t\t\t? `, reason ${thread.stoppedDetails.reason}`\n\t\t\t\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\t\t\t\tstackFrame.source\n\t\t\t\t\t\t\t\t\t\t? stackFrame.source.name\n\t\t\t\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\t\t\t\tstackFrame.range.startLineNumber,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (session) {\n\t\t\tthis.debugType.set(session.configuration.type);\n\t\t} else {\n\t\t\tthis.debugType.reset();\n\t\t}\n\n\t\tthis.viewModel.setFocus(\n\t\t\tstackFrame,\n\t\t\tthread,\n\t\t\tsession,\n\t\t\t!!options?.explicit,\n\t\t);\n\t}\n\n\t//---- watches\n\n\taddWatchExpression(name?: string): void {\n\t\tconst we = this.model.addWatchExpression(name);\n\t\tif (!name) {\n\t\t\tthis.viewModel.setSelectedExpression(we, false);\n\t\t}\n\t\tthis.debugStorage.storeWatchExpressions(\n\t\t\tthis.model.getWatchExpressions(),\n\t\t);\n\t}\n\n\trenameWatchExpression(id: string, newName: string): void {\n\t\tthis.model.renameWatchExpression(id, newName);\n\t\tthis.debugStorage.storeWatchExpressions(\n\t\t\tthis.model.getWatchExpressions(),\n\t\t);\n\t}\n\n\tmoveWatchExpression(id: string, position: number): void {\n\t\tthis.model.moveWatchExpression(id, position);\n\t\tthis.debugStorage.storeWatchExpressions(\n\t\t\tthis.model.getWatchExpressions(),\n\t\t);\n\t}\n\n\tremoveWatchExpressions(id?: string): void {\n\t\tthis.model.removeWatchExpressions(id);\n\t\tthis.debugStorage.storeWatchExpressions(\n\t\t\tthis.model.getWatchExpressions(),\n\t\t);\n\t}\n\n\t//---- breakpoints\n\n\tcanSetBreakpointsIn(model: ITextModel): boolean {\n\t\treturn this.adapterManager.canSetBreakpointsIn(model);\n\t}\n\n\tasync enableOrDisableBreakpoints(\n\t\tenable: boolean,\n\t\tbreakpoint?: IEnablement,\n\t): Promise<void> {\n\t\tif (breakpoint) {\n\t\t\tthis.model.setEnablement(breakpoint, enable);\n\t\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\t\tif (breakpoint instanceof Breakpoint) {\n\t\t\t\tawait this.makeTriggeredBreakpointsMatchEnablement(\n\t\t\t\t\tenable,\n\t\t\t\t\tbreakpoint,\n\t\t\t\t);\n\t\t\t\tawait this.sendBreakpoints(breakpoint.originalUri);\n\t\t\t} else if (breakpoint instanceof FunctionBreakpoint) {\n\t\t\t\tawait this.sendFunctionBreakpoints();\n\t\t\t} else if (breakpoint instanceof DataBreakpoint) {\n\t\t\t\tawait this.sendDataBreakpoints();\n\t\t\t} else if (breakpoint instanceof InstructionBreakpoint) {\n\t\t\t\tawait this.sendInstructionBreakpoints();\n\t\t\t} else {\n\t\t\t\tawait this.sendExceptionBreakpoints();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.model.enableOrDisableAllBreakpoints(enable);\n\t\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\t\tawait this.sendAllBreakpoints();\n\t\t}\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t}\n\n\tasync addBreakpoints(\n\t\turi: uri,\n\t\trawBreakpoints: IBreakpointData[],\n\t\tariaAnnounce = true,\n\t): Promise<IBreakpoint[]> {\n\t\tconst breakpoints = this.model.addBreakpoints(uri, rawBreakpoints);\n\t\tif (ariaAnnounce) {\n\t\t\tbreakpoints.forEach((bp) =>\n\t\t\t\taria.status(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"breakpointAdded\",\n\t\t\t\t\t\t\"Added breakpoint, line {0}, file {1}\",\n\t\t\t\t\t\tbp.lineNumber,\n\t\t\t\t\t\turi.fsPath,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// In some cases we need to store breakpoints before we send them because sending them can take a long time\n\t\t// And after sending them because the debug adapter can attach adapter data to a breakpoint\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendBreakpoints(uri);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\treturn breakpoints;\n\t}\n\n\tasync updateBreakpoints(\n\t\turi: uri,\n\t\tdata: Map<string, IBreakpointUpdateData>,\n\t\tsendOnResourceSaved: boolean,\n\t): Promise<void> {\n\t\tthis.model.updateBreakpoints(data);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tif (sendOnResourceSaved) {\n\t\t\tthis.breakpointsToSendOnResourceSaved.add(uri);\n\t\t} else {\n\t\t\tawait this.sendBreakpoints(uri);\n\t\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\t}\n\t}\n\n\tasync removeBreakpoints(id?: string): Promise<void> {\n\t\tconst breakpoints = this.model.getBreakpoints();\n\t\tconst toRemove = breakpoints.filter((bp) => !id || bp.getId() === id);\n\t\t// note: using the debugger-resolved uri for aria to reflect UI state\n\t\ttoRemove.forEach((bp) =>\n\t\t\taria.status(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"breakpointRemoved\",\n\t\t\t\t\t\"Removed breakpoint, line {0}, file {1}\",\n\t\t\t\t\tbp.lineNumber,\n\t\t\t\t\tbp.uri.fsPath,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tconst urisToClear = new Set(\n\t\t\ttoRemove.map((bp) => bp.originalUri.toString()),\n\t\t);\n\n\t\tthis.model.removeBreakpoints(toRemove);\n\t\tthis.unlinkTriggeredBreakpoints(breakpoints, toRemove).forEach((uri) =>\n\t\t\turisToClear.add(uri.toString()),\n\t\t);\n\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait Promise.all(\n\t\t\t[...urisToClear].map((uri) => this.sendBreakpoints(URI.parse(uri))),\n\t\t);\n\t}\n\n\tsetBreakpointsActivated(activated: boolean): Promise<void> {\n\t\tthis.model.setBreakpointsActivated(activated);\n\t\treturn this.sendAllBreakpoints();\n\t}\n\n\tasync addFunctionBreakpoint(\n\t\topts?: IFunctionBreakpointOptions,\n\t\tid?: string,\n\t): Promise<void> {\n\t\tthis.model.addFunctionBreakpoint(opts ?? { name: \"\" }, id);\n\t\t// If opts not provided, sending the breakpoint is handled by a later to call to `updateFunctionBreakpoint`\n\t\tif (opts) {\n\t\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\t\tawait this.sendFunctionBreakpoints();\n\t\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\t}\n\t}\n\n\tasync updateFunctionBreakpoint(\n\t\tid: string,\n\t\tupdate: { name?: string; hitCondition?: string; condition?: string },\n\t): Promise<void> {\n\t\tthis.model.updateFunctionBreakpoint(id, update);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendFunctionBreakpoints();\n\t}\n\n\tasync removeFunctionBreakpoints(id?: string): Promise<void> {\n\t\tthis.model.removeFunctionBreakpoints(id);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendFunctionBreakpoints();\n\t}\n\n\tasync addDataBreakpoint(opts: IDataBreakpointOptions): Promise<void> {\n\t\tthis.model.addDataBreakpoint(opts);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendDataBreakpoints();\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t}\n\n\tasync updateDataBreakpoint(\n\t\tid: string,\n\t\tupdate: { hitCondition?: string; condition?: string },\n\t): Promise<void> {\n\t\tthis.model.updateDataBreakpoint(id, update);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendDataBreakpoints();\n\t}\n\n\tasync removeDataBreakpoints(id?: string): Promise<void> {\n\t\tthis.model.removeDataBreakpoints(id);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendDataBreakpoints();\n\t}\n\n\tasync addInstructionBreakpoint(\n\t\topts: IInstructionBreakpointOptions,\n\t): Promise<void> {\n\t\tthis.model.addInstructionBreakpoint(opts);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendInstructionBreakpoints();\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t}\n\n\tasync removeInstructionBreakpoints(\n\t\tinstructionReference?: string,\n\t\toffset?: number,\n\t): Promise<void> {\n\t\tthis.model.removeInstructionBreakpoints(instructionReference, offset);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendInstructionBreakpoints();\n\t}\n\n\tsetExceptionBreakpointFallbackSession(sessionId: string) {\n\t\tthis.model.setExceptionBreakpointFallbackSession(sessionId);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t}\n\n\tsetExceptionBreakpointsForSession(\n\t\tsession: IDebugSession,\n\t\tfilters: DebugProtocol.ExceptionBreakpointsFilter[],\n\t): void {\n\t\tthis.model.setExceptionBreakpointsForSession(session.getId(), filters);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t}\n\n\tasync setExceptionBreakpointCondition(\n\t\texceptionBreakpoint: IExceptionBreakpoint,\n\t\tcondition: string | undefined,\n\t): Promise<void> {\n\t\tthis.model.setExceptionBreakpointCondition(\n\t\t\texceptionBreakpoint,\n\t\t\tcondition,\n\t\t);\n\t\tthis.debugStorage.storeBreakpoints(this.model);\n\t\tawait this.sendExceptionBreakpoints();\n\t}\n\n\tasync sendAllBreakpoints(session?: IDebugSession): Promise<any> {\n\t\tconst setBreakpointsPromises = distinct(\n\t\t\tthis.model.getBreakpoints(),\n\t\t\t(bp) => bp.originalUri.toString(),\n\t\t).map((bp) => this.sendBreakpoints(bp.originalUri, false, session));\n\n\t\t// If sending breakpoints to one session which we know supports the configurationDone request, can make all requests in parallel\n\t\tif (session?.capabilities.supportsConfigurationDoneRequest) {\n\t\t\tawait Promise.all([\n\t\t\t\t...setBreakpointsPromises,\n\t\t\t\tthis.sendFunctionBreakpoints(session),\n\t\t\t\tthis.sendDataBreakpoints(session),\n\t\t\t\tthis.sendInstructionBreakpoints(session),\n\t\t\t\tthis.sendExceptionBreakpoints(session),\n\t\t\t]);\n\t\t} else {\n\t\t\tawait Promise.all(setBreakpointsPromises);\n\t\t\tawait this.sendFunctionBreakpoints(session);\n\t\t\tawait this.sendDataBreakpoints(session);\n\t\t\tawait this.sendInstructionBreakpoints(session);\n\t\t\t// send exception breakpoints at the end since some debug adapters may rely on the order - this was the case before\n\t\t\t// the configurationDone request was introduced.\n\t\t\tawait this.sendExceptionBreakpoints(session);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the condition of triggered breakpoints that depended on\n\t * breakpoints in `removedBreakpoints`. Returns the URIs of resources that\n\t * had their breakpoints changed in this way.\n\t */\n\tprivate unlinkTriggeredBreakpoints(\n\t\tallBreakpoints: readonly IBreakpoint[],\n\t\tremovedBreakpoints: readonly IBreakpoint[],\n\t): uri[] {\n\t\tconst affectedUris: uri[] = [];\n\t\tfor (const removed of removedBreakpoints) {\n\t\t\tfor (const existing of allBreakpoints) {\n\t\t\t\tif (\n\t\t\t\t\t!removedBreakpoints.includes(existing) &&\n\t\t\t\t\texisting.triggeredBy === removed.getId()\n\t\t\t\t) {\n\t\t\t\t\tthis.model.updateBreakpoints(\n\t\t\t\t\t\tnew Map([\n\t\t\t\t\t\t\t[existing.getId(), { triggeredBy: undefined }],\n\t\t\t\t\t\t]),\n\t\t\t\t\t);\n\t\t\t\t\taffectedUris.push(existing.originalUri);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn affectedUris;\n\t}\n\n\tprivate async makeTriggeredBreakpointsMatchEnablement(\n\t\tenable: boolean,\n\t\tbreakpoint: Breakpoint,\n\t) {\n\t\tif (enable) {\n\t\t\t/** If the breakpoint is being enabled, also ensure its triggerer is enabled */\n\t\t\tif (breakpoint.triggeredBy) {\n\t\t\t\tconst trigger = this.model\n\t\t\t\t\t.getBreakpoints()\n\t\t\t\t\t.find((bp) => breakpoint.triggeredBy === bp.getId());\n\t\t\t\tif (trigger && !trigger.enabled) {\n\t\t\t\t\tawait this.enableOrDisableBreakpoints(enable, trigger);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/** Makes its triggeree states match the state of this breakpoint */\n\t\tawait Promise.all(\n\t\t\tthis.model\n\t\t\t\t.getBreakpoints()\n\t\t\t\t.filter(\n\t\t\t\t\t(bp) =>\n\t\t\t\t\t\tbp.triggeredBy === breakpoint.getId() &&\n\t\t\t\t\t\tbp.enabled !== enable,\n\t\t\t\t)\n\t\t\t\t.map((bp) => this.enableOrDisableBreakpoints(enable, bp)),\n\t\t);\n\t}\n\n\tpublic async sendBreakpoints(\n\t\tmodelUri: uri,\n\t\tsourceModified = false,\n\t\tsession?: IDebugSession,\n\t): Promise<void> {\n\t\tconst breakpointsToSend = this.model.getBreakpoints({\n\t\t\toriginalUri: modelUri,\n\t\t\tenabledOnly: true,\n\t\t});\n\t\tawait sendToOneOrAllSessions(this.model, session, async (s) => {\n\t\t\tif (!s.configuration.noDebug) {\n\t\t\t\tconst sessionBps = breakpointsToSend.filter(\n\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t!bp.triggeredBy || bp.getSessionDidTrigger(s.getId()),\n\t\t\t\t);\n\t\t\t\tawait s.sendBreakpoints(modelUri, sessionBps, sourceModified);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async sendFunctionBreakpoints(\n\t\tsession?: IDebugSession,\n\t): Promise<void> {\n\t\tconst breakpointsToSend = this.model\n\t\t\t.getFunctionBreakpoints()\n\t\t\t.filter(\n\t\t\t\t(fbp) => fbp.enabled && this.model.areBreakpointsActivated(),\n\t\t\t);\n\n\t\tawait sendToOneOrAllSessions(this.model, session, async (s) => {\n\t\t\tif (\n\t\t\t\ts.capabilities.supportsFunctionBreakpoints &&\n\t\t\t\t!s.configuration.noDebug\n\t\t\t) {\n\t\t\t\tawait s.sendFunctionBreakpoints(breakpointsToSend);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async sendDataBreakpoints(session?: IDebugSession): Promise<void> {\n\t\tconst breakpointsToSend = this.model\n\t\t\t.getDataBreakpoints()\n\t\t\t.filter(\n\t\t\t\t(fbp) => fbp.enabled && this.model.areBreakpointsActivated(),\n\t\t\t);\n\n\t\tawait sendToOneOrAllSessions(this.model, session, async (s) => {\n\t\t\tif (\n\t\t\t\ts.capabilities.supportsDataBreakpoints &&\n\t\t\t\t!s.configuration.noDebug\n\t\t\t) {\n\t\t\t\tawait s.sendDataBreakpoints(breakpointsToSend);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async sendInstructionBreakpoints(\n\t\tsession?: IDebugSession,\n\t): Promise<void> {\n\t\tconst breakpointsToSend = this.model\n\t\t\t.getInstructionBreakpoints()\n\t\t\t.filter(\n\t\t\t\t(fbp) => fbp.enabled && this.model.areBreakpointsActivated(),\n\t\t\t);\n\n\t\tawait sendToOneOrAllSessions(this.model, session, async (s) => {\n\t\t\tif (\n\t\t\t\ts.capabilities.supportsInstructionBreakpoints &&\n\t\t\t\t!s.configuration.noDebug\n\t\t\t) {\n\t\t\t\tawait s.sendInstructionBreakpoints(breakpointsToSend);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate sendExceptionBreakpoints(session?: IDebugSession): Promise<void> {\n\t\treturn sendToOneOrAllSessions(this.model, session, async (s) => {\n\t\t\tconst enabledExceptionBps = this.model\n\t\t\t\t.getExceptionBreakpointsForSession(s.getId())\n\t\t\t\t.filter((exb) => exb.enabled);\n\t\t\tif (\n\t\t\t\ts.capabilities.supportsConfigurationDoneRequest &&\n\t\t\t\t(!s.capabilities.exceptionBreakpointFilters ||\n\t\t\t\t\ts.capabilities.exceptionBreakpointFilters.length === 0)\n\t\t\t) {\n\t\t\t\t// Only call `setExceptionBreakpoints` as specified in dap protocol #90001\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!s.configuration.noDebug) {\n\t\t\t\tawait s.sendExceptionBreakpoints(enabledExceptionBps);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate onFileChanges(fileChangesEvent: FileChangesEvent): void {\n\t\tconst toRemove = this.model\n\t\t\t.getBreakpoints()\n\t\t\t.filter((bp) =>\n\t\t\t\tfileChangesEvent.contains(\n\t\t\t\t\tbp.originalUri,\n\t\t\t\t\tFileChangeType.DELETED,\n\t\t\t\t),\n\t\t\t);\n\t\tif (toRemove.length) {\n\t\t\tthis.model.removeBreakpoints(toRemove);\n\t\t}\n\n\t\tconst toSend: URI[] = [];\n\t\tfor (const uri of this.breakpointsToSendOnResourceSaved) {\n\t\t\tif (fileChangesEvent.contains(uri, FileChangeType.UPDATED)) {\n\t\t\t\ttoSend.push(uri);\n\t\t\t}\n\t\t}\n\n\t\tfor (const uri of toSend) {\n\t\t\tthis.breakpointsToSendOnResourceSaved.delete(uri);\n\t\t\tthis.sendBreakpoints(uri, true);\n\t\t}\n\t}\n\n\tasync runTo(uri: uri, lineNumber: number, column?: number): Promise<void> {\n\t\tlet breakpointToRemove: IBreakpoint | undefined;\n\t\tlet threadToContinue = this.getViewModel().focusedThread;\n\t\tconst addTempBreakPoint = async () => {\n\t\t\tconst bpExists = !!this.getModel().getBreakpoints({\n\t\t\t\tcolumn,\n\t\t\t\tlineNumber,\n\t\t\t\turi,\n\t\t\t}).length;\n\n\t\t\tif (!bpExists) {\n\t\t\t\tconst addResult = await this.addAndValidateBreakpoints(\n\t\t\t\t\turi,\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tcolumn,\n\t\t\t\t);\n\t\t\t\tif (addResult.thread) {\n\t\t\t\t\tthreadToContinue = addResult.thread;\n\t\t\t\t}\n\n\t\t\t\tif (addResult.breakpoint) {\n\t\t\t\t\tbreakpointToRemove = addResult.breakpoint;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { threadToContinue, breakpointToRemove };\n\t\t};\n\t\tconst removeTempBreakPoint = (state: State): boolean => {\n\t\t\tif (state === State.Stopped || state === State.Inactive) {\n\t\t\t\tif (breakpointToRemove) {\n\t\t\t\t\tthis.removeBreakpoints(breakpointToRemove.getId());\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tawait addTempBreakPoint();\n\t\tif (this.state === State.Inactive) {\n\t\t\t// If no session exists start the debugger\n\t\t\tconst { launch, name, getConfig } =\n\t\t\t\tthis.getConfigurationManager().selectedConfiguration;\n\t\t\tconst config = await getConfig();\n\t\t\tconst configOrName = config\n\t\t\t\t? Object.assign(deepClone(config), {})\n\t\t\t\t: name;\n\t\t\tconst listener = this.onDidChangeState((state) => {\n\t\t\t\tif (removeTempBreakPoint(state)) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tawait this.startDebugging(launch, configOrName, undefined, true);\n\t\t}\n\t\tif (this.state === State.Stopped) {\n\t\t\tconst focusedSession = this.getViewModel().focusedSession;\n\t\t\tif (!focusedSession || !threadToContinue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst listener = threadToContinue.session.onDidChangeState(() => {\n\t\t\t\tif (removeTempBreakPoint(focusedSession.state)) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tawait threadToContinue.continue();\n\t\t}\n\t}\n\n\tprivate async addAndValidateBreakpoints(\n\t\turi: URI,\n\t\tlineNumber: number,\n\t\tcolumn?: number,\n\t) {\n\t\tconst debugModel = this.getModel();\n\t\tconst viewModel = this.getViewModel();\n\n\t\tconst breakpoints = await this.addBreakpoints(\n\t\t\turi,\n\t\t\t[{ lineNumber, column }],\n\t\t\tfalse,\n\t\t);\n\t\tconst breakpoint = breakpoints?.[0];\n\t\tif (!breakpoint) {\n\t\t\treturn { breakpoint: undefined, thread: viewModel.focusedThread };\n\t\t}\n\n\t\t// If the breakpoint was not initially verified, wait up to 2s for it to become so.\n\t\t// Inherently racey if multiple sessions can verify async, but not solvable...\n\t\tif (!breakpoint.verified) {\n\t\t\tlet listener: IDisposable;\n\t\t\tawait raceTimeout(\n\t\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\t\tlistener = debugModel.onDidChangeBreakpoints(() => {\n\t\t\t\t\t\tif (breakpoint.verified) {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t\t2000,\n\t\t\t);\n\t\t\tlistener!.dispose();\n\t\t}\n\n\t\t// Look at paused threads for sessions that verified this bp. Prefer, in order:\n\t\tenum Score {\n\t\t\t/** The focused thread */\n\t\t\tFocused = 0,\n\t\t\t/** Any other stopped thread of a session that verified the bp */\n\t\t\tVerified = 1,\n\t\t\t/** Any thread that verified and paused in the same file */\n\t\t\tVerifiedAndPausedInFile = 2,\n\t\t\t/** The focused thread if it verified the breakpoint */\n\t\t\tVerifiedAndFocused = 3,\n\t\t}\n\n\t\tlet bestThread = viewModel.focusedThread;\n\t\tlet bestScore = Score.Focused;\n\t\tfor (const sessionId of breakpoint.sessionsThatVerified) {\n\t\t\tconst session = debugModel.getSession(sessionId);\n\t\t\tif (!session) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst threads = session.getAllThreads().filter((t) => t.stopped);\n\t\t\tif (bestScore < Score.VerifiedAndFocused) {\n\t\t\t\tif (\n\t\t\t\t\tviewModel.focusedThread &&\n\t\t\t\t\tthreads.includes(viewModel.focusedThread)\n\t\t\t\t) {\n\t\t\t\t\tbestThread = viewModel.focusedThread;\n\t\t\t\t\tbestScore = Score.VerifiedAndFocused;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bestScore < Score.VerifiedAndPausedInFile) {\n\t\t\t\tconst pausedInThisFile = threads.find((t) => {\n\t\t\t\t\tconst top = t.getTopStackFrame();\n\t\t\t\t\treturn (\n\t\t\t\t\t\ttop &&\n\t\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\ttop.source.uri,\n\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tif (pausedInThisFile) {\n\t\t\t\t\tbestThread = pausedInThisFile;\n\t\t\t\t\tbestScore = Score.VerifiedAndPausedInFile;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bestScore < Score.Verified) {\n\t\t\t\tbestThread = threads[0];\n\t\t\t\tbestScore = Score.VerifiedAndPausedInFile;\n\t\t\t}\n\t\t}\n\n\t\treturn { thread: bestThread, breakpoint };\n\t}\n}\n\nexport function getStackFrameThreadAndSessionToFocus(\n\tmodel: IDebugModel,\n\tstackFrame: IStackFrame | undefined,\n\tthread?: IThread,\n\tsession?: IDebugSession,\n\tavoidSession?: IDebugSession,\n): {\n\tstackFrame: IStackFrame | undefined;\n\tthread: IThread | undefined;\n\tsession: IDebugSession | undefined;\n} {\n\tif (!session) {\n\t\tif (stackFrame || thread) {\n\t\t\tsession = stackFrame ? stackFrame.thread.session : thread!.session;\n\t\t} else {\n\t\t\tconst sessions = model.getSessions();\n\t\t\tconst stoppedSession = sessions.find(\n\t\t\t\t(s) => s.state === State.Stopped,\n\t\t\t);\n\t\t\t// Make sure to not focus session that is going down\n\t\t\tsession =\n\t\t\t\tstoppedSession ||\n\t\t\t\tsessions.find(\n\t\t\t\t\t(s) =>\n\t\t\t\t\t\ts !== avoidSession && s !== avoidSession?.parentSession,\n\t\t\t\t) ||\n\t\t\t\t(sessions.length ? sessions[0] : undefined);\n\t\t}\n\t}\n\n\tif (!thread) {\n\t\tif (stackFrame) {\n\t\t\tthread = stackFrame.thread;\n\t\t} else {\n\t\t\tconst threads = session ? session.getAllThreads() : undefined;\n\t\t\tconst stoppedThread = threads && threads.find((t) => t.stopped);\n\t\t\tthread =\n\t\t\t\tstoppedThread ||\n\t\t\t\t(threads && threads.length ? threads[0] : undefined);\n\t\t}\n\t}\n\n\tif (!stackFrame && thread) {\n\t\tstackFrame = thread.getTopStackFrame();\n\t}\n\n\treturn { session, thread, stackFrame };\n}\n\nasync function sendToOneOrAllSessions(\n\tmodel: DebugModel,\n\tsession: IDebugSession | undefined,\n\tsend: (session: IDebugSession) => Promise<void>,\n): Promise<void> {\n\tif (session) {\n\t\tawait send(session);\n\t} else {\n\t\tawait Promise.all(model.getSessions().map((s) => send(s)));\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,UAAU;AACtB,SAAS,cAA4B;AACrC,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,+BAA+B;AACxC,SAAS,0BAA0B;AACnC,YAAY,YAAY;AACxB,SAAS,SAAS,aAAa;AAC/B;AAAA,EACC;AAAA,OAEM;AACP,SAAS,WAAW,cAAc;AAClC,OAAO,cAAc;AACrB,SAAS,WAA4B;AACrC,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAE7B,YAAY,SAAS;AACrB,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,kCAAkC;AAC3C,SAAS,sBAAsB;AAC/B;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,0BAA0B;AACnC,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,qCAAqC;AAC9C,SAAS,oBAAoB;AAE7B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC,SAAS,iCAAiC;AAC1C,SAAS,qBAAqB;AAC9B,SAAS,cAAc,2BAA2B;AAClD,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAoBA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAIA;AAAA,OACM;AACP,SAAS,cAAc;AACvB,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,iBAAiB;AAE1B,SAAS,4BAA4B;AACrC,SAAS,sBAAsB;AAC/B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,4BAA4B;AACrC,SAAS,qCAAqC;AAC9C,SAAS,oBAAoB;AAC7B,SAAS,iBAAiB,qBAAqB;AAExC,IAAM,eAAN,MAA4C;AAAA,EAsClD,YACkC,eACW,sBACZ,cACS,uBACF,qBACN,eACS,eACC,gBACN,mBACD,kBACI,sBACJ,kBACL,aACS,sBACK,2BACV,iBACD,gBACG,mBACW,8BACV,oBACP,aAC9B;AArBgC;AACW;AACZ;AACS;AACF;AACN;AACS;AACC;AACN;AACD;AACI;AACJ;AACL;AACS;AACK;AACV;AACD;AACG;AACW;AACV;AACP;AAE/B,SAAK,mCAAmC,oBAAI,IAAS;AAErD,SAAK,oBAAoB,IAAI,QAAe;AAC5C,SAAK,mBAAmB,IAAI,QAAuB;AACnD,SAAK,oBAAoB,IAAI,QAAuB;AACpD,SAAK,mBAAmB,IAAI,QAAQ;AAEpC,SAAK,iBAAiB,KAAK,qBAAqB,eAAe,gBAAgB,EAAE,iBAAiB,KAAK,gBAAgB,CAAC;AACxH,SAAK,YAAY,IAAI,KAAK,cAAc;AACxC,SAAK,uBAAuB,KAAK,qBAAqB,eAAe,sBAAsB,KAAK,cAAc;AAC9G,SAAK,YAAY,IAAI,KAAK,oBAAoB;AAC9C,SAAK,eAAe,KAAK,YAAY,IAAI,KAAK,qBAAqB,eAAe,YAAY,CAAC;AAE/F,SAAK,qBAAqB,KAAK,aAAa,uBAAuB;AAEnE,SAAK,QAAQ,KAAK,qBAAqB,eAAe,YAAY,KAAK,YAAY;AACnF,SAAK,YAAY,KAAK,qBAAqB,eAAe,gBAAgB,KAAK,KAAK;AAEpF,SAAK,YAAY,IAAI,UAAU,iBAAiB;AAChD,SAAK,aAAa,KAAK,qBAAqB,eAAe,eAAe;AAE1E,SAAK,YAAY,IAAI,KAAK,YAAY,iBAAiB,OAAK,KAAK,cAAc,CAAC,CAAC,CAAC;AAClF,SAAK,YAAY,IAAI,KAAK,iBAAiB,eAAe,KAAK,SAAS,IAAI,CAAC;AAE7E,SAAK,YAAY,IAAI,KAAK,0BAA0B,gBAAgB,WAAS;AAC5E,YAAM,UAAU,KAAK,MAAM,WAAW,MAAM,WAAW,IAAI;AAC3D,UAAI,SAAS;AAEZ,gBAAQ,cAAc,UAAU;AAChC,gBAAQ,cAAc,OAAO,MAAM;AACnC,gBAAQ,SAAS,MAAM,KAAK;AAC5B,aAAK,wBAAwB,OAAO;AAAA,MACrC;AAAA,IACD,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,KAAK,0BAA0B,mBAAmB,WAAS;AAC/E,YAAM,UAAU,KAAK,MAAM,WAAW,MAAM,SAAS;AACrD,UAAI,WAAW,QAAQ,UAAU,MAAM,OAAO;AAC7C,gBAAQ,WAAW;AAAA,MACpB;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,YAAY,IAAI,KAAK,UAAU,qBAAqB,MAAM;AAC9D,WAAK,cAAc;AAAA,IACpB,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,KAAK,UAAU,kBAAkB,CAAC,YAAuC;AAC7F,WAAK,cAAc;AAEnB,UAAI,SAAS;AACZ,aAAK,sCAAsC,QAAQ,MAAM,CAAC;AAAA,MAC3D;AAAA,IACD,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,MAAM,IAAI,KAAK,eAAe,uBAAuB,KAAK,qBAAqB,wBAAwB,EAAE,MAAM;AACnI,YAAM,eAAgB,KAAK,UAAU,MAAM,YAAa,KAAK,qBAAqB,qBAAqB,EAAE,SAAS,KAAK,KAAK,eAAe,oBAAoB,IAAM,YAAY;AACjL,WAAK,QAAQ,IAAI,YAAY;AAC7B,WAAK,aAAa,kBAAkB,YAAY;AAAA,IACjD,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,KAAK,MAAM,qBAAqB,MAAM;AAC1D,YAAM,mBAAmB,KAAK,MAAM,YAAY,EAAE,OAAO,OAAK,CAAC,EAAE,aAAa,EAAE;AAChF,WAAK,UAAU,QAAQ;AACvB,UAAI,mBAAmB,GAAG;AACzB,cAAM,gBAAgB,KAAK,sBAAsB,yBAAyB,iBAAiB;AAC3F,YAAI,eAAe;AAClB,eAAK,WAAW,KAAK,gBAAgB,0BAA0B,cAAc,IAAI,EAAE,OAAO,IAAI,YAAY,kBAAkB,OAAK,MAAM,IAAI,IAAI,SAAS,kBAAkB,kBAAkB,IAAI,IAAI,SAAS,mBAAmB,uBAAuB,CAAC,CAAC,EAAE,CAAC;AAAA,QAC7P;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,YAAY,IAAI,cAAc,wBAAwB,MAAM;AAChE,WAAK,kBAAkB,mBAAmB,MAAM;AAC/C,YAAI,cAAc,iBAAiB,qBAAqB,UAAU;AACjE,eAAK,qBAAqB,IAAI,IAAI;AAAA,QACnC,OAAO;AAEN,eAAK,sBAAsB,MAAM;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF,CAAC,CAAC;AAEF,SAAK,YAAY,IAAI,KAAK,iBAAiB,iBAAiB,MAAM;AACjE,iBAAW,UAAU,cAAc,SAAS;AAE3C,YAAI,OAAO,UAAU,WAAW,qBAAqB;AACpD,iBAAO,QAAQ;AAAA,QAChB;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,YAAY,IAAI,iBAAiB,WAAW,SAAO;AACvD,UAAI;AAAA,QACH,KAAK,MAAM,YAAY,EAAE,SAAS;AAAA,QAClC,IAAI,SAAS,wBAAwB,mCAAmC;AAAA,MACzE;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,gBAAgB,iBAAiB;AAAA,EACvC;AAAA,EAtSD,OA0ImD;AAAA;AAAA;AAAA,EAGjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAIA,qBAAqB,oBAAI,IAAmB;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACS,cAAc,IAAI,gBAAgB;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAe;AAAA,EACf;AAAA,EACA;AAAA,EACA,4BAA4B,oBAAI,IAGtC;AAAA,EACM;AAAA,EACA;AAAA,EACA,oBAAoB;AAAA,EA0HpB,gBAAgB,mBAA6C;AACpE,mBAAe,MAAM;AACpB,wBAAkB,mBAAmB,MAAM;AAC1C,aAAK,YAAY,mBAAmB,OAAO,iBAAiB;AAC5D,aAAK,aAAa,oBAAoB,OAAO,iBAAiB;AAC9D,aAAK,cACJ,qBAAqB,OAAO,iBAAiB;AAC9C,aAAK,cACJ,sBAAsB,OAAO,iBAAiB;AAC/C,aAAK,UAAU,iBAAiB,OAAO,iBAAiB;AACxD,aAAK,QAAQ,IAAI,KAAK,aAAa,iBAAiB,CAAC;AACrD,aAAK,mBACJ,0BAA0B,OAAO,iBAAiB;AAEnD,aAAK,uBACJ,+BAA+B,OAAO,iBAAiB;AAAA,MACzD,CAAC;AAED,YAAM,6BAA6B,6BAClC,KAAK,iBAAiB;AAAA,QACrB,CAAC,EACA,KAAK,MAAM,eAAe,EAAE,UAC5B,KAAK,MAAM,mBAAmB,EAAE,UAChC,KAAK,MAAM,uBAAuB,EAAE;AAAA,MAEtC,GAPkC;AAQnC,iCAA2B;AAC3B,WAAK,YAAY;AAAA,QAChB,KAAK,MAAM;AAAA,UAAuB,MACjC,2BAA2B;AAAA,QAC5B;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,WAAwB;AACvB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,eAA2B;AAC1B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,0BAAiD;AAChD,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,oBAAqC;AACpC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,qBAAqB,KAAgB;AACpC,SAAK,MAAM,qBAAqB,GAAG;AAAA,EACpC;AAAA,EAEA,UAAgB;AACf,SAAK,YAAY,QAAQ;AAAA,EAC1B;AAAA;AAAA,EAIA,IAAI,QAAe;AAClB,UAAM,iBAAiB,KAAK,UAAU;AACtC,QAAI,gBAAgB;AACnB,aAAO,eAAe;AAAA,IACvB;AAEA,WAAO,KAAK,eAAe,MAAM,eAAe,MAAM;AAAA,EACvD;AAAA,EAEA,IAAI,sBAAwD;AAC3D,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,uBAAuB,SAAsC;AACpE,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,eAAe;AACpB,WAAK,uBAAuB;AAC5B,WAAK,cAAc;AAAA,IACpB;AAAA,EACD;AAAA,EAEQ,uBAA6B;AACpC,QAAI,KAAK,cAAc;AACtB,WAAK,eAAe;AACpB,WAAK,uBAAuB;AAC5B,WAAK,cAAc;AAAA,IACpB;AAAA,EACD;AAAA,EAEQ,aAAa,IAA8B;AAClD,QAAI,IAAI;AACP,YAAM,QAAQ,KAAK,0BAA0B,IAAI,EAAE;AACnD,UAAI,OAAO;AACV,cAAM,OAAO;AACb,aAAK,0BAA0B,OAAO,EAAE;AAAA,MACzC;AAAA,IACD,OAAO;AACN,WAAK,0BAA0B,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC;AACxD,WAAK,0BAA0B,MAAM;AAAA,IACtC;AAAA,EACD;AAAA,EAEQ,gBAAsB;AAC7B,UAAM,QAAQ,KAAK;AACnB,QAAI,KAAK,kBAAkB,OAAO;AACjC,WAAK,kBAAkB,mBAAmB,MAAM;AAC/C,aAAK,WAAW,IAAI,cAAc,KAAK,CAAC;AACxC,aAAK,YAAY,IAAI,UAAU,MAAM,QAAQ;AAE7C,cAAM,eACJ,UAAU,MAAM,YAChB,UAAU,MAAM,gBAChB,KAAK,eAAe,oBAAoB,KACxC,KAAK,qBAAqB,sBAAsB,OAC9C,YACA;AACJ,aAAK,QAAQ,IAAI,YAAY;AAC7B,aAAK,aAAa,kBAAkB,YAAY;AAAA,MACjD,CAAC;AACD,WAAK,gBAAgB;AACrB,WAAK,kBAAkB,KAAK,KAAK;AAAA,IAClC;AAAA,EACD;AAAA,EAEA,IAAI,mBAAiC;AACpC,WAAO,KAAK,kBAAkB;AAAA,EAC/B;AAAA,EAEA,IAAI,kBAAwC;AAC3C,WAAO,KAAK,iBAAiB;AAAA,EAC9B;AAAA,EAEA,IAAI,mBAAyC;AAC5C,WAAO,KAAK,kBAAkB;AAAA,EAC/B;AAAA,EAEA,IAAI,kBAAuE;AAC1E,WAAO,KAAK,iBAAiB;AAAA,EAC9B;AAAA,EAEQ,YAAY;AACnB,QAAI,CAAC,KAAK,mBAAmB;AAG5B,WAAK,YAAY;AAAA,QAChB,KAAK,YAAY;AAAA,UAChB;AAAA,UACA,IAAI,8BAA8B,IAAI;AAAA,QACvC;AAAA,MACD;AACA,WAAK,oBAAoB;AAAA,IAC1B;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,eACL,QACA,cACA,SACA,kBAAkB,CAAC,SAAS,eACT;AACnB,UAAM,UACL,WAAW,QAAQ,UAChB,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,IACD,IACC,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,IACD;AACH,UAAM,QACL,MAAM,KAAK,6BAA6B,sBAAsB;AAAA,MAC7D;AAAA,IACD,CAAC;AACF,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AAEA,SAAK,UAAU;AACf,SAAK,uBAAuB,OAAO;AACnC,SAAK,YAAY,IAAI,IAAI;AACzB,QAAI;AAEH,YAAM,KAAK,iBAAiB,gBAAgB,SAAS;AACrD,UAAI,iBAAiB;AACpB,cAAM;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,QACN;AAAA,MACD;AACA,YAAM,KAAK,iBAAiB,kCAAkC;AAE9D,UAAI;AACJ,UAAI;AACJ,UAAI,CAAC,cAAc;AAClB,uBACC,KAAK,qBAAqB,sBAAsB;AAAA,MAClD;AACA,UAAI,OAAO,iBAAiB,YAAY,QAAQ;AAC/C,iBAAS,OAAO,iBAAiB,YAAY;AAC7C,mBAAW,OAAO,YAAY,YAAY;AAAA,MAC3C,WAAW,OAAO,iBAAiB,UAAU;AAC5C,iBAAS;AAAA,MACV;AAEA,UAAI,UAAU;AAEb,YAAI,CAAC,SAAS,gBAAgB;AAC7B,gBAAM,IAAI;AAAA,YACT,IAAI;AAAA,cACH;AAAA,gBACC,KAAK;AAAA,gBACL,SAAS;AAAA,kBACR;AAAA,kBACA;AAAA,gBACD;AAAA,cACD;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AACA,YAAI,SAAS,eAAe;AAC3B,gBAAM,aACL,MAAM,KAAK,WAAW;AAAA,YACrB,QAAQ,aACP,KAAK,eAAe,aAAa;AAAA,YAClC,SAAS;AAAA,UACV;AACD,cAAI,eAAe,cAAc,SAAS;AACzC,iBAAK,qBAAqB;AAC1B,mBAAO;AAAA,UACR;AAAA,QACD;AACA,YAAI,SAAS,SAAS;AACrB,oBAAU;AAAA,YACT,GAAG;AAAA,YACH,cAAc,IAAI,kBAAkB;AAAA,UACrC;AAAA,QACD;AAEA,cAAM,SAAS,MAAM,QAAQ;AAAA,UAC5B,SAAS,eAAe,IAAI,CAAC,eAAe;AAC3C,kBAAM,OACL,OAAO,eAAe,WACnB,aACA,WAAW;AACf,gBAAI,SAAS,SAAS,MAAM;AAC3B,qBAAO,QAAQ,QAAQ,KAAK;AAAA,YAC7B;AAEA,gBAAI;AACJ,gBAAI,OAAO,eAAe,UAAU;AACnC,oBAAM,yBACL,KAAK,qBACH,YAAY,EACZ,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,iBAAiB,IAAI,CAAC;AAC3C,kBAAI,uBAAuB,WAAW,GAAG;AACxC,gCAAgB,uBAAuB,CAAC;AAAA,cACzC,WACC,UACA,uBAAuB,SAAS,KAChC,uBAAuB,QAAQ,MAAM,KAAK,GACzC;AAED,gCAAgB;AAAA,cACjB,OAAO;AACN,sBAAM,IAAI;AAAA,kBACT,uBAAuB,WAAW,IAC/B,IAAI;AAAA,oBACJ;AAAA,oBACA;AAAA,oBACA;AAAA,kBACD,IACC,IAAI;AAAA,oBACJ;AAAA,oBACA;AAAA,oBACA;AAAA,kBACD;AAAA,gBACH;AAAA,cACD;AAAA,YACD,WAAW,WAAW,QAAQ;AAC7B,oBAAM,6BACL,KAAK,qBACH,YAAY,EACZ;AAAA,gBACA,CAAC,MACA,EAAE,aACF,EAAE,UAAU,SACX,WAAW,UACZ,CAAC,CAAC,EAAE;AAAA,kBACH,WAAW;AAAA,gBACZ;AAAA,cACF;AACF,kBAAI,2BAA2B,WAAW,GAAG;AAC5C,gCAAgB,2BAA2B,CAAC;AAAA,cAC7C,OAAO;AACN,sBAAM,IAAI;AAAA,kBACT,IAAI;AAAA,oBACH;AAAA,oBACA;AAAA,oBACA,WAAW;AAAA,oBACX,WAAW;AAAA,oBACX,SAAS;AAAA,kBACV;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAEA,mBAAO,KAAK;AAAA,cACX;AAAA,cACA,cAAe,iBAAiB,IAAI;AAAA,cACpC;AAAA,YACD;AAAA,UACD,CAAC;AAAA,QACF;AAEA,cAAMA,UAAS,OAAO,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO;AAClD,aAAK,qBAAqB;AAC1B,eAAOA;AAAA,MACR;AAEA,UAAI,gBAAgB,CAAC,QAAQ;AAC5B,cAAMC,WAAU,CAAC,CAAC,SACf,IAAI;AAAA,UACJ;AAAA,UACA;AAAA,UACA,OAAO,iBAAiB,WACrB,eACA,aAAa;AAAA,QACjB,IACC,IAAI;AAAA,UACJ;AAAA,UACA;AAAA,QACD;AACF,cAAM,IAAI,MAAMA,QAAO;AAAA,MACxB;AAEA,YAAM,SAAS,MAAM,KAAK,cAAc,QAAQ,QAAQ,OAAO;AAC/D,WAAK,qBAAqB;AAC1B,aAAO;AAAA,IACR,SAAS,KAAK;AAEb,WAAK,oBAAoB,MAAM,GAAG;AAClC,WAAK,qBAAqB;AAC1B,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC1B;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,cACb,QACA,QACA,SACmB;AAGnB,QAAI;AACJ,QAAI,QAAQ;AACX,aAAO,OAAO;AAAA,IACf,OAAO;AAEN,eAAS,uBAAO,OAAO,IAAI;AAAA,IAC5B;AACA,QAAI,WAAW,QAAQ,SAAS;AAC/B,aAAQ,UAAU;AAAA,IACnB,WACC,WACA,OAAO,QAAQ,YAAY,eAC3B,QAAQ,iBACR,QAAQ,cAAc,cAAc,SACnC;AACD,aAAQ,UAAU;AAAA,IACnB;AACA,UAAM,mBAAmB,UAAU,MAAM;AAEzC,QAAI;AACJ,QAAI;AACJ,QAAI,CAAC,MAAM;AACV,qBAAe,KAAK,cAAc;AAClC,UAAI,gBAAgB,aAAa,UAAU;AAC1C,eACC,KAAK,mBAAmB,aAAa,SAAS,SAAS,CAAC;AAAA,MAC1D;AACA,UAAI,CAAC,MAAM;AACV,gBAAQ,MAAM,KAAK,eAAe,cAAc,KAAK;AACrD,YAAI,OAAO;AACV,iBAAO,MAAM;AAAA,QACd;AAAA,MACD;AAAA,IACD;AAEA,UAAM,wBAAwB,IAAI,wBAAwB;AAC1D,UAAM,YAAY,aAAa;AAC/B,SAAK,0BAA0B,IAAI,WAAW,qBAAqB;AAEnE,UAAM,oBACL,MAAM,KAAK,qBAAqB;AAAA,MAC/B,UAAU,OAAO,YAAY,OAAO,UAAU,MAAM;AAAA,MACpD;AAAA,MACA;AAAA,MACA,sBAAsB;AAAA,IACvB;AAED,QAAI,qBAAqB,kBAAkB,MAAM;AAChD,UAAI;AACH,YAAI,iBAAiB,MAAM,KAAK;AAAA,UAC/B;AAAA,UACA;AAAA,QACD;AACA,YAAI,CAAC,gBAAgB;AAEpB,iBAAO;AAAA,QACR;AAEA,YAAI,sBAAsB,MAAM,yBAAyB;AAExD,iBAAO;AAAA,QACR;AAEA,cAAM,YACL,QAAQ,aAAa,KAAK,eAAe,aAAa;AACvD,cAAM,aAAa,MAAM,KAAK,WAAW;AAAA,UACxC;AAAA,UACA,eAAe;AAAA,QAChB;AACA,YAAI,eAAe,cAAc,SAAS;AACzC,iBAAO;AAAA,QACR;AAEA,cAAM,MACL,MAAM,KAAK,qBAAqB;AAAA,UAC/B,UAAU,OAAO,YACd,OAAO,UAAU,MACjB;AAAA,UACH,eAAe;AAAA,UACf;AAAA,UACA,sBAAsB;AAAA,QACvB;AACD,YAAI,CAAC,KAAK;AACT,cACC,UACA,QACA,QAAQ,QACR,CAAC,sBAAsB,MAAM,yBAC5B;AAED,kBAAM,OAAO;AAAA,cACZ,EAAE,eAAe,MAAM,KAAK;AAAA,cAC5B,sBAAsB;AAAA,YACvB;AAAA,UACD;AACA,iBAAO;AAAA,QACR;AACA,yBAAiB;AAEjB,cAAM,MAAM,KAAK,eAAe;AAAA,UAC/B,eAAe;AAAA,QAChB;AACA,YACC,CAAC,OACA,kBAAkB,YAAY,YAC9B,kBAAkB,YAAY,UAC9B;AACD,cAAI;AACJ,cACC,kBAAkB,YAAY,YAC9B,kBAAkB,YAAY,UAC7B;AACD,sBAAU,kBAAkB,UACzB,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,cACA,kBAAkB;AAAA,YACnB,IACC,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,UACH,OAAO;AACN,sBAAU,eAAe,OACtB,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,cACA,eAAe;AAAA,YAChB,IACC,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,YACD;AAAA,UACH;AAEA,gBAAM,aAAwB,CAAC;AAE/B,qBAAW;AAAA,YACV,IAAI;AAAA,cACH;AAAA,cACA,IAAI;AAAA,gBACH;AAAA,kBACC,KAAK;AAAA,kBACL,SAAS;AAAA,oBACR;AAAA,kBACD;AAAA,gBACD;AAAA,gBACA;AAAA,gBACA,eAAe;AAAA,cAChB;AAAA,cACA;AAAA,cACA;AAAA,cACA,YACC,KAAK,eAAe;AAAA,gBACnB;AAAA,gBACA,gBAAgB;AAAA,cACjB;AAAA,YACF;AAAA,UACD;AAEA,gBAAM,KAAK,UAAU,SAAS,UAAU;AAExC,iBAAO;AAAA,QACR;AAEA,YAAI,CAAC,IAAI,SAAS;AACjB,gBAAM,KAAK,UAAU,wBAAwB,IAAI,IAAI,GAAG,CAAC,CAAC;AAC1D,iBAAO;AAAA,QACR;AAEA,cAAM,SAAS,MAAM,KAAK;AAAA,UACzB;AAAA,UACA,QAAQ;AAAA,UACR,EAAE,UAAU,gBAAgB,YAAY,iBAAiB;AAAA,UACzD;AAAA,QACD;AACA,YAAI,UAAU,SAAS,gBAAgB,aAAa,UAAU;AAE7D,eAAK,mBAAmB,aAAa,SAAS,SAAS,CAAC,IACvD,MAAM;AACP,eAAK,aAAa;AAAA,YACjB,KAAK;AAAA,UACN;AAAA,QACD;AACA,eAAO;AAAA,MACR,SAAS,KAAK;AACb,YAAI,OAAO,IAAI,SAAS;AACvB,gBAAM,KAAK,UAAU,IAAI,OAAO;AAAA,QACjC,WACC,KAAK,eAAe,kBAAkB,MACtC,eAAe,OACd;AACD,gBAAM,KAAK;AAAA,YACV,IAAI;AAAA,cACH;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AACA,YACC,UACA,CAAC,sBAAsB,MAAM,yBAC5B;AACD,gBAAM,OAAO;AAAA,YACZ,EAAE,eAAe,KAAK;AAAA,YACtB,sBAAsB;AAAA,UACvB;AAAA,QACD;AAEA,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QACC,UACA,QACA,sBAAsB,QACtB,CAAC,sBAAsB,MAAM,yBAC5B;AAED,YAAM,OAAO;AAAA,QACZ,EAAE,eAAe,MAAM,KAAK;AAAA,QAC5B,sBAAsB;AAAA,MACvB;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,gBACb,WACA,MACA,eACA,SACmB;AACnB,UAAM,UAAU,KAAK,qBAAqB;AAAA,MACzC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL;AAAA,IACD;AACA,QACC,SAAS,iBACT,KAAK,MACH,YAAY,EACZ,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM,QAAQ,SAAS,CAAC,KACjD,cAAc,SAAS,mCAAmC,MACzD;AAED,YAAM,SAAS,MAAM,KAAK,cAAc,QAAQ;AAAA,QAC/C,SAAS,IAAI;AAAA,UACZ;AAAA,UACA;AAAA,UACA,QAAQ,SAAS;AAAA,QAClB;AAAA,MACD,CAAC;AACD,UAAI,CAAC,OAAO,WAAW;AACtB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,SAAK,MAAM,WAAW,OAAO;AAI7B,SAAK,kBAAkB,KAAK,OAAO;AAEnC,UAAM,YACL,KAAK,qBAAqB;AAAA,MACzB;AAAA,IACD,EAAE;AAEH,QACC,CAAC,cAAc,SAAS,YACvB,cAAc,wBACb,cAAc,eACd,KAAK,UAAU,sBACjB,CAAC,QAAQ,mBACR;AACD,YAAM,KAAK,qBAAqB;AAAA,QAC/B;AAAA,QACA,sBAAsB;AAAA,MACvB;AAAA,IACD;AAEA,QAAI;AACH,YAAM,KAAK,wBAAwB,OAAO;AAE1C,YAAM,yBACL,QAAQ,cAAc,0BACtB,KAAK,qBAAqB,SAA8B,OAAO,EAC7D;AACH,UACC,2BAA2B,wBAC1B,KAAK,UAAU,qBACf,2BAA2B,2BAC3B;AACD,aAAK,aAAa,SAAS,cAAc,KAAK;AAAA,MAC/C;AAEA,WAAK,UAAU,oBAAoB;AACnC,YAAM,kBACL,KAAK,qBAAqB;AAAA,QACzB;AAAA,MACD,EAAE;AACH,YAAM,WAAW,KAAK,MAAM,YAAY;AACxC,YAAM,gBAAgB,kBACnB,WACA,SAAS,OAAO,CAAC,MAAM,CAAC,EAAE,aAAa;AAC1C,UAAI,cAAc,SAAS,GAAG;AAC7B,aAAK,UAAU,oBAAoB,IAAI;AAAA,MACxC;AAGA,WAAK,iBAAiB,KAAK,OAAO;AAElC,aAAO;AAAA,IACR,SAAS,OAAO;AACf,UAAI,OAAO,oBAAoB,KAAK,GAAG;AAEtC,eAAO;AAAA,MACR;AAGA,UAAI,WAAW,QAAQ,gBAAgB,EAAE,SAAS,GAAG;AACpD,aAAK,aAAa,SAAS,cAAc,KAAK;AAAA,MAC/C;AAEA,UACC,QAAQ,iBACR,QAAQ,cAAc,YAAY,YAClC,QAAQ,cAAc,cACrB;AAED,eAAO;AAAA,MACR;AAEA,YAAM,eAAe,iBAAiB,QAAQ,MAAM,UAAU;AAC9D,UAAI,MAAM,aAAa,OAAO;AAE7B,cAAM,KAAK;AAAA,UACV;AAAA,UACA,mBAAmB,KAAK,IAAI,MAAM,UAAU,CAAC;AAAA,QAC9C;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,MAAc,wBACb,SACA,aAAa,OACG;AAEhB,SAAK,yBAAyB,OAAO;AAErC,UAAM,OAAO,KAAK,eAAe;AAAA,MAChC,QAAQ,cAAc;AAAA,IACvB;AACA,QAAI;AACH,YAAM,QAAQ,WAAW,IAAK;AAC9B,YAAM,QAAQ,eAAe,QAAQ,aAAa;AAClD,YAAM,mBACL,CAAC,CAAC,QAAQ,QACV,CAAC,CAAC,KAAK,qBAAqB,SAAwB,UAAU;AAAA,QAC7D,UAAU,QAAQ,KAAK;AAAA,MACxB,CAAC;AACF,YAAM,KAAK,UAAU,qBAAqB,MAAO,gBAAgB;AAEjE,UACC,cACA,CAAC,KAAK,UAAU,kBACf,QAAQ,kBAAkB,KAAK,UAAU,kBACzC,QAAQ,SACR;AACD,cAAM,KAAK,gBAAgB,QAAW,QAAW,OAAO;AAAA,MACzD;AAAA,IACD,SAAS,KAAK;AACb,UAAI,KAAK,UAAU,mBAAmB,SAAS;AAC9C,cAAM,KAAK,gBAAgB,MAAS;AAAA,MACrC;AACA,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC1B;AAAA,EACD;AAAA,EAEQ,yBAAyB,SAA8B;AAC9D,UAAM,sBAAsB,IAAI,gBAAgB;AAChD,SAAK,YAAY,IAAI,mBAAmB;AAExC,UAAM,0BAA0B,oBAAoB;AAAA,MACnD,IAAI,iBAAiB,MAAM;AAE1B,YACC,QAAQ,UAAU,MAAM,WACxB,KAAK,UAAU,mBAAmB,SACjC;AACD,eAAK,UAAU;AAAA,YACd;AAAA,YACA,KAAK,UAAU;AAAA,YACf;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MACD,GAAG,GAAG;AAAA,IACP;AACA,wBAAoB;AAAA,MACnB,QAAQ,iBAAiB,MAAM;AAC9B,YACC,QAAQ,UAAU,MAAM,WACxB,KAAK,UAAU,mBAAmB,SACjC;AACD,kCAAwB,SAAS;AAAA,QAClC;AACA,YAAI,YAAY,KAAK,UAAU,gBAAgB;AAC9C,eAAK,cAAc;AAAA,QACpB;AAAA,MACD,CAAC;AAAA,IACF;AACA,wBAAoB;AAAA,MACnB,KAAK,gBAAgB,CAAC,MAAM;AAC3B,YAAI,EAAE,YAAY,SAAS;AAC1B,eAAK,YAAY,OAAO,mBAAmB;AAAA,QAC5C;AAAA,MACD,CAAC;AAAA,IACF;AACA,wBAAoB;AAAA,MACnB,QAAQ,gBAAgB,OAAO,qBAAqB;AACnD,YAAI,kBAAkB;AACrB,cAAI,iBAAiB,OAAO;AAC3B,iBAAK,oBAAoB;AAAA,cACxB,IAAI;AAAA,gBACH;AAAA,gBACA;AAAA,gBACA,iBAAiB,MAAM,WACtB,iBAAiB,MAAM,SAAS;AAAA,cAClC;AAAA,YACD;AAAA,UACD;AACA,eAAK,UAAU;AAAA,YACd;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAGA,cAAM,wBACL,6BAA6B,OAAO;AACrC,YACC,yBACA,sBAAsB,UAAU,MAAM,WACtC,sBAAsB,cAAc,SACnC;AACD,eAAK,0BAA0B;AAAA,YAC9B,sBAAsB,MAAM;AAAA,UAC7B;AAAA,QACD;AAEA,YAAI,QAAQ,cAAc,eAAe;AACxC,gBAAM,OACL,QAAQ,QAAQ,KAAK,eAAe,aAAa;AAClD,cAAI;AACH,kBAAM,KAAK,WAAW;AAAA,cACrB;AAAA,cACA,QAAQ,cAAc;AAAA,YACvB;AAAA,UACD,SAAS,KAAK;AACb,iBAAK,oBAAoB,MAAM,GAAG;AAAA,UACnC;AAAA,QACD;AACA,aAAK,qBAAqB;AAC1B,aAAK,aAAa,QAAQ,MAAM,CAAC;AAEjC,YACC,KAAK,qBAAqB;AAAA,UACzB;AAAA,QACD,EAAE,wBACD;AACD,gBAAM,iBAAiB,KAAK,cAC1B,WAAW,aAAa,UAAU,EAClC,OAAO,CAAC,EAAE,OAAO,MAAM;AACvB,mBACC,OAAO,UAAU,WAAW,gBAC5B,QAAQ,MAAM,MACb,OAAO,oBAAoB,OAAO,QAAQ,EACxC;AAAA,UAEL,CAAC;AACF,eAAK,cAAc,aAAa,cAAc;AAAA,QAC/C;AACA,aAAK,iBAAiB,KAAK;AAAA,UAC1B;AAAA,UACA,SAAS,KAAK,mBAAmB,IAAI,OAAO;AAAA,QAC7C,CAAC;AAED,cAAM,iBAAiB,KAAK,UAAU;AACtC,YACC,kBACA,eAAe,MAAM,MAAM,QAAQ,MAAM,GACxC;AACD,gBAAM,EAAE,SAAAC,UAAS,QAAQ,WAAW,IACnC;AAAA,YACC,KAAK;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AACD,eAAK,UAAU,SAAS,YAAY,QAAQA,UAAS,KAAK;AAAA,QAC3D;AAEA,YAAI,KAAK,MAAM,YAAY,EAAE,WAAW,GAAG;AAC1C,eAAK,UAAU,oBAAoB,KAAK;AAExC,cACC,KAAK,cAAc,UAAU,MAAM,YAAY,KAC/C,KAAK,qBAAqB;AAAA,YACzB;AAAA,UACD,EAAE,mBACD;AACD,iBAAK,qBAAqB;AAAA,cACzB;AAAA,cACA,sBAAsB;AAAA,YACvB;AAAA,UACD;AAGA,gBAAM,kBAAkB,KAAK,MAC3B,mBAAmB,EACnB,OAAO,CAAC,QAAQ,CAAC,IAAI,UAAU;AACjC,0BAAgB;AAAA,YAAQ,CAAC,QACxB,KAAK,MAAM,sBAAsB,IAAI,MAAM,CAAC;AAAA,UAC7C;AAEA,cACC,KAAK,qBAAqB;AAAA,YACzB;AAAA,UACD,EAAE,QAAQ,YACT;AACD,kBAAM,wBACL,KAAK,sBAAsB;AAAA,cAC1B;AAAA,YACD;AACD,gBACC,yBACA,KAAK,aAAa;AAAA,cACjB,sBAAsB;AAAA,YACvB,GACC;AACD,mBAAK,aAAa;AAAA,gBACjB,sBAAsB;AAAA,cACvB;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAEA,aAAK,MAAM;AAAA,UACV,QAAQ,MAAM;AAAA,QACf;AAAA,MAED,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,MAAM,eACL,SACA,aACe;AACf,QAAI,QAAQ,mBAAmB;AAC9B,YAAM;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAEA,UAAM,gBAAgB,CAAC,CAAC;AAExB,UAAM,WAAyC,mCAAY;AAC1D,UAAI,eAAe;AAElB,eAAO,QAAQ,QAAQ,cAAc,OAAO;AAAA,MAC7C;AAEA,YAAM,OAAO,QAAQ,QAAQ,KAAK,eAAe,aAAa;AAC9D,YAAM,KAAK,WAAW;AAAA,QACrB;AAAA,QACA,QAAQ,cAAc;AAAA,MACvB;AACA,YAAM,KAAK,WAAW;AAAA,QACrB;AAAA,QACA,QAAQ,cAAc;AAAA,MACvB;AAEA,YAAM,cAAc,MAAM,KAAK,WAAW;AAAA,QACzC;AAAA,QACA,QAAQ,cAAc;AAAA,MACvB;AACA,UAAI,gBAAgB,cAAc,SAAS;AAC1C,eAAO;AAAA,MACR;AAEA,aAAO,KAAK,WAAW;AAAA,QACtB;AAAA,QACA,QAAQ,cAAc;AAAA,MACvB;AAAA,IACD,GA5B+C;AA8B/C,UAAM,wBAAwB,6BAA6B,OAAO;AAClE,QAAI,uBAAuB;AAC1B,YAAM,aAAa,MAAM,SAAS;AAClC,UAAI,eAAe,cAAc,SAAS;AACzC,aAAK,0BAA0B;AAAA,UAC9B,sBAAsB,MAAM;AAAA,QAC7B;AAAA,MACD;AAEA;AAAA,IACD;AAGA,QAAI,oBAAoB;AACxB,QAAI;AACJ,UAAM,SAAS,QAAQ,OACpB,KAAK,qBAAqB,UAAU,QAAQ,KAAK,GAAG,IACpD;AACH,QAAI,QAAQ;AACX,mBAAa,OAAO,iBAAiB,QAAQ,cAAc,IAAI;AAC/D,UACC,cACA,CAAC,OAAO,YAAY,QAAQ,uBAAuB,GAClD;AACD,mBAAW,UAAU,QAAQ,cAAc;AAC3C,4BAAoB;AAAA,MACrB;AAAA,IACD;AAEA,QAAI,WAAuC,QAAQ;AACnD,QAAI,UAAU,qBAAqB,YAAY;AAC9C,YAAM,wBAAwB,IAAI,wBAAwB;AAC1D,WAAK,0BAA0B;AAAA,QAC9B,QAAQ,MAAM;AAAA,QACd;AAAA,MACD;AACA,YAAM,sBACL,MAAM,KAAK,qBAAqB;AAAA,QAC/B,OAAO,YAAY,OAAO,UAAU,MAAM;AAAA,QAC1C,WAAW;AAAA,QACX;AAAA,QACA,sBAAsB;AAAA,MACvB;AACD,UAAI,qBAAqB;AACxB,mBAAW,MAAM,KAAK;AAAA,UACrB;AAAA,UACA;AAAA,QACD;AACA,YACC,YACA,CAAC,sBAAsB,MAAM,yBAC5B;AACD,qBACC,MAAM,KAAK,qBAAqB;AAAA,YAC/B,UAAU,OAAO,YACd,OAAO,UAAU,MACjB;AAAA,YACH,SAAS;AAAA,YACT;AAAA,YACA,sBAAsB;AAAA,UACvB;AAAA,QACF;AAAA,MACD,OAAO;AACN,mBAAW;AAAA,MACZ;AAAA,IACD;AACA,QAAI,UAAU;AACb,cAAQ,iBAAiB,EAAE,UAAU,WAAW,CAAC;AAAA,IAClD;AACA,YAAQ,cAAc,YAAY;AAElC,UAAM,YAAY,8BAAO,OAA2C;AACnE,WAAK,mBAAmB,IAAI,OAAO;AACnC,UAAI,aAAa;AACjB,UAAI;AACH,qBAAc,MAAM,GAAG,MAAO;AAAA,MAC/B,SAAS,GAAG;AACX,qBAAa;AACb,cAAM;AAAA,MACP,UAAE;AACD,aAAK,mBAAmB,OAAO,OAAO;AAItC,YAAI,CAAC,YAAY;AAChB,eAAK,iBAAiB,KAAK,EAAE,SAAS,SAAS,MAAM,CAAC;AAAA,QACvD;AAAA,MACD;AAAA,IACD,GAjBkB;AAqBlB,QAAI,QAAQ,mBAAmB;AAC9B,UAAI,CAAC,QAAQ,kBAAkB,aAAa;AAC3C,aAAK,YAAY,cAAc,QAAQ,kBAAkB,EAAE;AAC3D,cAAM,MAAM,UAAU,QAAQ,kBAAkB,UAAU;AAAA,MAI3D;AAEA,WAAK,YAAY;AAAA,QAChB,QAAQ,kBAAkB;AAAA,MAC3B;AACA;AAAA,IACD;AAEA,QAAI,QAAQ,aAAa,wBAAwB;AAChD,YAAM,aAAa,MAAM,SAAS;AAClC,UAAI,eAAe,cAAc,SAAS;AACzC,cAAM,UAAU,YAAY;AAC3B,gBAAM,QAAQ,QAAQ;AACtB,iBAAO;AAAA,QACR,CAAC;AAAA,MACF;AAEA;AAAA,IACD;AAEA,UAAM,cACL,CAAC,CAAC,KAAK,UAAU,kBACjB,QAAQ,MAAM,MAAM,KAAK,UAAU,eAAe,MAAM;AACzD,WAAO,UAAU,YAAY;AAE5B,UAAI,eAAe;AAClB,cAAM,QAAQ,WAAW,IAAI;AAAA,MAC9B,OAAO;AACN,cAAM,QAAQ,UAAU,IAAI;AAAA,MAC7B;AAEA,aAAO,IAAI,QAAiB,CAAC,GAAG,MAAM;AACrC,mBAAW,YAAY;AACtB,gBAAM,aAAa,MAAM,SAAS;AAClC,cAAI,eAAe,cAAc,SAAS;AACzC,mBAAO,EAAE,KAAK;AAAA,UACf;AAEA,cAAI,CAAC,UAAU;AACd,mBAAO,EAAE,KAAK;AAAA,UACf;AAEA,cAAI;AACH,kBAAM,KAAK;AAAA,cACV;AAAA,cACA;AAAA,YACD;AACA,iBAAK,iBAAiB,KAAK,OAAO;AAClC,cAAE,IAAI;AAAA,UACP,SAAS,OAAO;AACf,cAAE,KAAK;AAAA,UACR;AAAA,QACD,GAAG,GAAG;AAAA,MACP,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,YACL,SACA,aAAa,OACb,UAAU,OACK;AACf,QAAI,SAAS;AACZ,aAAO,aACJ,QAAQ,WAAW,QAAW,OAAO,IACrC,QAAQ,UAAU;AAAA,IACtB;AAEA,UAAM,WAAW,KAAK,MAAM,YAAY;AACxC,QAAI,SAAS,WAAW,GAAG;AAC1B,WAAK,WAAW,OAAO;AAEvB,YAAM,KAAK,kBAAkB,OAAO;AACpC,WAAK,qBAAqB;AAC1B,WAAK,aAAa,MAAS;AAAA,IAC5B;AAEA,WAAO,QAAQ;AAAA,MACd,SAAS;AAAA,QAAI,CAAC,MACb,aAAa,EAAE,WAAW,QAAW,OAAO,IAAI,EAAE,UAAU;AAAA,MAC7D;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,oBACb,QACA,QAC+B;AAC/B,UAAM,MAAM,KAAK,eAAe,YAAY,OAAO,IAAI;AACvD,QAAI,KAAK;AACR,UAAI;AACJ,UAAI,UAAU,OAAO,WAAW;AAC/B,iBAAS,OAAO;AAAA,MACjB,OAAO;AACN,cAAM,UAAU,KAAK,eAAe,aAAa,EAAE;AACnD,YAAI,QAAQ,WAAW,GAAG;AACzB,mBAAS,QAAQ,CAAC;AAAA,QACnB;AAAA,MACD;AACA,UAAI;AACH,eAAO,MAAM,IAAI,oBAAoB,QAAQ,MAAM;AAAA,MACpD,SAAS,KAAK;AACb,aAAK;AAAA,UACJ,IAAI;AAAA,UACJ;AAAA,UACA,CAAC,CAAC,QAAQ,iBAAiB,OAAO,IAAI;AAAA,QACvC;AACA,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO,QAAQ,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,MAAc,UACb,SACA,eAAuC,CAAC,GACxC,mBAAmB,MACH;AAChB,UAAM,kBAAkB,IAAI;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MACC,KAAK,eAAe,eAAe,0BAA0B;AAAA,IAC/D;AAEA,UAAM,UACL,aAAa,OAAO,CAAC,WAAW,OAAO,GAAG,SAAS,UAAU,CAAC,EAC5D,SAAS,IACR,eACA;AAAA,MACA,GAAG;AAAA,MACH,GAAI,mBAAmB,CAAC,eAAe,IAAI,CAAC;AAAA,IAC7C;AACH,UAAM,KAAK,cAAc,OAAO;AAAA,MAC/B,MAAM,SAAS;AAAA,MACf;AAAA,MACA,SAAS,QAAQ,IAAI,CAAC,YAAY;AAAA,QACjC,OAAO,OAAO;AAAA,QACd,KAAK,6BAAM,OAAO,IAAI,GAAjB;AAAA,MACN,EAAE;AAAA,MACF,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAAA;AAAA,EAIA,MAAM,gBACL,aACA,SACA,UACA,SAMgB;AAChB,UAAM,EAAE,YAAY,QAAQ,QAAQ,IACnC;AAAA,MACC,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAED,QAAI,YAAY;AACf,YAAM,SAAS,MAAM,WAAW;AAAA,QAC/B,KAAK;AAAA,QACL,SAAS,iBAAiB;AAAA,QAC1B,SAAS;AAAA,QACT,SAAS;AAAA,MACV;AACA,UAAI,QAAQ;AACX,YAAI,OAAO,UAAU,qBAAqB,UAAU;AAAA,QAEpD,OAAO;AACN,gBAAM,UAAU,OAAO,WAAW;AAClC,cACC,cACA,aAAa,OAAO,KACpB,QAAQ,SAAS,GAChB;AACD,kBAAM,QAAQ,QAAQ,SAAS;AAC/B,kBAAM,aAAa,WAAW,MAAM;AACpC,gBACC,cAAc,KACd,cAAc,MAAM,aAAa,GAChC;AACD,oBAAM,cAAc,QAClB,SAAS,EACT,eAAe,UAAU;AAC3B,mBAAK;AAAA,gBACJ,IAAI;AAAA,kBACH;AAAA,oBACC,KAAK;AAAA,oBACL,SAAS;AAAA,sBACR;AAAA,oBACD;AAAA,kBACD;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA,UAAU,OAAO,iBACd,YAAY,OAAO,eAAe,MAAM,KACxC;AAAA,kBACH,WAAW,SACR,WAAW,OAAO,OAClB;AAAA,kBACH,WAAW,MAAM;AAAA,gBAClB;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,QAAI,SAAS;AACZ,WAAK,UAAU,IAAI,QAAQ,cAAc,IAAI;AAAA,IAC9C,OAAO;AACN,WAAK,UAAU,MAAM;AAAA,IACtB;AAEA,SAAK,UAAU;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,CAAC,SAAS;AAAA,IACZ;AAAA,EACD;AAAA;AAAA,EAIA,mBAAmB,MAAqB;AACvC,UAAM,KAAK,KAAK,MAAM,mBAAmB,IAAI;AAC7C,QAAI,CAAC,MAAM;AACV,WAAK,UAAU,sBAAsB,IAAI,KAAK;AAAA,IAC/C;AACA,SAAK,aAAa;AAAA,MACjB,KAAK,MAAM,oBAAoB;AAAA,IAChC;AAAA,EACD;AAAA,EAEA,sBAAsB,IAAY,SAAuB;AACxD,SAAK,MAAM,sBAAsB,IAAI,OAAO;AAC5C,SAAK,aAAa;AAAA,MACjB,KAAK,MAAM,oBAAoB;AAAA,IAChC;AAAA,EACD;AAAA,EAEA,oBAAoB,IAAY,UAAwB;AACvD,SAAK,MAAM,oBAAoB,IAAI,QAAQ;AAC3C,SAAK,aAAa;AAAA,MACjB,KAAK,MAAM,oBAAoB;AAAA,IAChC;AAAA,EACD;AAAA,EAEA,uBAAuB,IAAmB;AACzC,SAAK,MAAM,uBAAuB,EAAE;AACpC,SAAK,aAAa;AAAA,MACjB,KAAK,MAAM,oBAAoB;AAAA,IAChC;AAAA,EACD;AAAA;AAAA,EAIA,oBAAoB,OAA4B;AAC/C,WAAO,KAAK,eAAe,oBAAoB,KAAK;AAAA,EACrD;AAAA,EAEA,MAAM,2BACL,QACA,YACgB;AAChB,QAAI,YAAY;AACf,WAAK,MAAM,cAAc,YAAY,MAAM;AAC3C,WAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAI,sBAAsB,YAAY;AACrC,cAAM,KAAK;AAAA,UACV;AAAA,UACA;AAAA,QACD;AACA,cAAM,KAAK,gBAAgB,WAAW,WAAW;AAAA,MAClD,WAAW,sBAAsB,oBAAoB;AACpD,cAAM,KAAK,wBAAwB;AAAA,MACpC,WAAW,sBAAsB,gBAAgB;AAChD,cAAM,KAAK,oBAAoB;AAAA,MAChC,WAAW,sBAAsB,uBAAuB;AACvD,cAAM,KAAK,2BAA2B;AAAA,MACvC,OAAO;AACN,cAAM,KAAK,yBAAyB;AAAA,MACrC;AAAA,IACD,OAAO;AACN,WAAK,MAAM,8BAA8B,MAAM;AAC/C,WAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,YAAM,KAAK,mBAAmB;AAAA,IAC/B;AACA,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAAA,EAC9C;AAAA,EAEA,MAAM,eACL,KACA,gBACA,eAAe,MACU;AACzB,UAAM,cAAc,KAAK,MAAM,eAAe,KAAK,cAAc;AACjE,QAAI,cAAc;AACjB,kBAAY;AAAA,QAAQ,CAAC,OACpB,KAAK;AAAA,UACJ,IAAI;AAAA,YACH;AAAA,YACA;AAAA,YACA,GAAG;AAAA,YACH,IAAI;AAAA,UACL;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAIA,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,gBAAgB,GAAG;AAC9B,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,kBACL,KACA,MACA,qBACgB;AAChB,SAAK,MAAM,kBAAkB,IAAI;AACjC,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,QAAI,qBAAqB;AACxB,WAAK,iCAAiC,IAAI,GAAG;AAAA,IAC9C,OAAO;AACN,YAAM,KAAK,gBAAgB,GAAG;AAC9B,WAAK,aAAa,iBAAiB,KAAK,KAAK;AAAA,IAC9C;AAAA,EACD;AAAA,EAEA,MAAM,kBAAkB,IAA4B;AACnD,UAAM,cAAc,KAAK,MAAM,eAAe;AAC9C,UAAM,WAAW,YAAY,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,MAAM,EAAE;AAEpE,aAAS;AAAA,MAAQ,CAAC,OACjB,KAAK;AAAA,QACJ,IAAI;AAAA,UACH;AAAA,UACA;AAAA,UACA,GAAG;AAAA,UACH,GAAG,IAAI;AAAA,QACR;AAAA,MACD;AAAA,IACD;AACA,UAAM,cAAc,IAAI;AAAA,MACvB,SAAS,IAAI,CAAC,OAAO,GAAG,YAAY,SAAS,CAAC;AAAA,IAC/C;AAEA,SAAK,MAAM,kBAAkB,QAAQ;AACrC,SAAK,2BAA2B,aAAa,QAAQ,EAAE;AAAA,MAAQ,CAAC,QAC/D,YAAY,IAAI,IAAI,SAAS,CAAC;AAAA,IAC/B;AAEA,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,QAAQ;AAAA,MACb,CAAC,GAAG,WAAW,EAAE,IAAI,CAAC,QAAQ,KAAK,gBAAgB,IAAI,MAAM,GAAG,CAAC,CAAC;AAAA,IACnE;AAAA,EACD;AAAA,EAEA,wBAAwB,WAAmC;AAC1D,SAAK,MAAM,wBAAwB,SAAS;AAC5C,WAAO,KAAK,mBAAmB;AAAA,EAChC;AAAA,EAEA,MAAM,sBACL,MACA,IACgB;AAChB,SAAK,MAAM,sBAAsB,QAAQ,EAAE,MAAM,GAAG,GAAG,EAAE;AAEzD,QAAI,MAAM;AACT,WAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,YAAM,KAAK,wBAAwB;AACnC,WAAK,aAAa,iBAAiB,KAAK,KAAK;AAAA,IAC9C;AAAA,EACD;AAAA,EAEA,MAAM,yBACL,IACA,QACgB;AAChB,SAAK,MAAM,yBAAyB,IAAI,MAAM;AAC9C,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,wBAAwB;AAAA,EACpC;AAAA,EAEA,MAAM,0BAA0B,IAA4B;AAC3D,SAAK,MAAM,0BAA0B,EAAE;AACvC,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,wBAAwB;AAAA,EACpC;AAAA,EAEA,MAAM,kBAAkB,MAA6C;AACpE,SAAK,MAAM,kBAAkB,IAAI;AACjC,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,oBAAoB;AAC/B,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAAA,EAC9C;AAAA,EAEA,MAAM,qBACL,IACA,QACgB;AAChB,SAAK,MAAM,qBAAqB,IAAI,MAAM;AAC1C,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,oBAAoB;AAAA,EAChC;AAAA,EAEA,MAAM,sBAAsB,IAA4B;AACvD,SAAK,MAAM,sBAAsB,EAAE;AACnC,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,oBAAoB;AAAA,EAChC;AAAA,EAEA,MAAM,yBACL,MACgB;AAChB,SAAK,MAAM,yBAAyB,IAAI;AACxC,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,2BAA2B;AACtC,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAAA,EAC9C;AAAA,EAEA,MAAM,6BACL,sBACA,QACgB;AAChB,SAAK,MAAM,6BAA6B,sBAAsB,MAAM;AACpE,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,2BAA2B;AAAA,EACvC;AAAA,EAEA,sCAAsC,WAAmB;AACxD,SAAK,MAAM,sCAAsC,SAAS;AAC1D,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAAA,EAC9C;AAAA,EAEA,kCACC,SACA,SACO;AACP,SAAK,MAAM,kCAAkC,QAAQ,MAAM,GAAG,OAAO;AACrE,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAAA,EAC9C;AAAA,EAEA,MAAM,gCACL,qBACA,WACgB;AAChB,SAAK,MAAM;AAAA,MACV;AAAA,MACA;AAAA,IACD;AACA,SAAK,aAAa,iBAAiB,KAAK,KAAK;AAC7C,UAAM,KAAK,yBAAyB;AAAA,EACrC;AAAA,EAEA,MAAM,mBAAmB,SAAuC;AAC/D,UAAM,yBAAyB;AAAA,MAC9B,KAAK,MAAM,eAAe;AAAA,MAC1B,CAAC,OAAO,GAAG,YAAY,SAAS;AAAA,IACjC,EAAE,IAAI,CAAC,OAAO,KAAK,gBAAgB,GAAG,aAAa,OAAO,OAAO,CAAC;AAGlE,QAAI,SAAS,aAAa,kCAAkC;AAC3D,YAAM,QAAQ,IAAI;AAAA,QACjB,GAAG;AAAA,QACH,KAAK,wBAAwB,OAAO;AAAA,QACpC,KAAK,oBAAoB,OAAO;AAAA,QAChC,KAAK,2BAA2B,OAAO;AAAA,QACvC,KAAK,yBAAyB,OAAO;AAAA,MACtC,CAAC;AAAA,IACF,OAAO;AACN,YAAM,QAAQ,IAAI,sBAAsB;AACxC,YAAM,KAAK,wBAAwB,OAAO;AAC1C,YAAM,KAAK,oBAAoB,OAAO;AACtC,YAAM,KAAK,2BAA2B,OAAO;AAG7C,YAAM,KAAK,yBAAyB,OAAO;AAAA,IAC5C;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,2BACP,gBACA,oBACQ;AACR,UAAM,eAAsB,CAAC;AAC7B,eAAW,WAAW,oBAAoB;AACzC,iBAAW,YAAY,gBAAgB;AACtC,YACC,CAAC,mBAAmB,SAAS,QAAQ,KACrC,SAAS,gBAAgB,QAAQ,MAAM,GACtC;AACD,eAAK,MAAM;AAAA,YACV,oBAAI,IAAI;AAAA,cACP,CAAC,SAAS,MAAM,GAAG,EAAE,aAAa,OAAU,CAAC;AAAA,YAC9C,CAAC;AAAA,UACF;AACA,uBAAa,KAAK,SAAS,WAAW;AAAA,QACvC;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,wCACb,QACA,YACC;AACD,QAAI,QAAQ;AAEX,UAAI,WAAW,aAAa;AAC3B,cAAM,UAAU,KAAK,MACnB,eAAe,EACf,KAAK,CAAC,OAAO,WAAW,gBAAgB,GAAG,MAAM,CAAC;AACpD,YAAI,WAAW,CAAC,QAAQ,SAAS;AAChC,gBAAM,KAAK,2BAA2B,QAAQ,OAAO;AAAA,QACtD;AAAA,MACD;AAAA,IACD;AAGA,UAAM,QAAQ;AAAA,MACb,KAAK,MACH,eAAe,EACf;AAAA,QACA,CAAC,OACA,GAAG,gBAAgB,WAAW,MAAM,KACpC,GAAG,YAAY;AAAA,MACjB,EACC,IAAI,CAAC,OAAO,KAAK,2BAA2B,QAAQ,EAAE,CAAC;AAAA,IAC1D;AAAA,EACD;AAAA,EAEA,MAAa,gBACZ,UACA,iBAAiB,OACjB,SACgB;AAChB,UAAM,oBAAoB,KAAK,MAAM,eAAe;AAAA,MACnD,aAAa;AAAA,MACb,aAAa;AAAA,IACd,CAAC;AACD,UAAM,uBAAuB,KAAK,OAAO,SAAS,OAAO,MAAM;AAC9D,UAAI,CAAC,EAAE,cAAc,SAAS;AAC7B,cAAM,aAAa,kBAAkB;AAAA,UACpC,CAAC,OACA,CAAC,GAAG,eAAe,GAAG,qBAAqB,EAAE,MAAM,CAAC;AAAA,QACtD;AACA,cAAM,EAAE,gBAAgB,UAAU,YAAY,cAAc;AAAA,MAC7D;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,wBACb,SACgB;AAChB,UAAM,oBAAoB,KAAK,MAC7B,uBAAuB,EACvB;AAAA,MACA,CAAC,QAAQ,IAAI,WAAW,KAAK,MAAM,wBAAwB;AAAA,IAC5D;AAED,UAAM,uBAAuB,KAAK,OAAO,SAAS,OAAO,MAAM;AAC9D,UACC,EAAE,aAAa,+BACf,CAAC,EAAE,cAAc,SAChB;AACD,cAAM,EAAE,wBAAwB,iBAAiB;AAAA,MAClD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,oBAAoB,SAAwC;AACzE,UAAM,oBAAoB,KAAK,MAC7B,mBAAmB,EACnB;AAAA,MACA,CAAC,QAAQ,IAAI,WAAW,KAAK,MAAM,wBAAwB;AAAA,IAC5D;AAED,UAAM,uBAAuB,KAAK,OAAO,SAAS,OAAO,MAAM;AAC9D,UACC,EAAE,aAAa,2BACf,CAAC,EAAE,cAAc,SAChB;AACD,cAAM,EAAE,oBAAoB,iBAAiB;AAAA,MAC9C;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,2BACb,SACgB;AAChB,UAAM,oBAAoB,KAAK,MAC7B,0BAA0B,EAC1B;AAAA,MACA,CAAC,QAAQ,IAAI,WAAW,KAAK,MAAM,wBAAwB;AAAA,IAC5D;AAED,UAAM,uBAAuB,KAAK,OAAO,SAAS,OAAO,MAAM;AAC9D,UACC,EAAE,aAAa,kCACf,CAAC,EAAE,cAAc,SAChB;AACD,cAAM,EAAE,2BAA2B,iBAAiB;AAAA,MACrD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEQ,yBAAyB,SAAwC;AACxE,WAAO,uBAAuB,KAAK,OAAO,SAAS,OAAO,MAAM;AAC/D,YAAM,sBAAsB,KAAK,MAC/B,kCAAkC,EAAE,MAAM,CAAC,EAC3C,OAAO,CAAC,QAAQ,IAAI,OAAO;AAC7B,UACC,EAAE,aAAa,qCACd,CAAC,EAAE,aAAa,8BAChB,EAAE,aAAa,2BAA2B,WAAW,IACrD;AAED;AAAA,MACD;AACA,UAAI,CAAC,EAAE,cAAc,SAAS;AAC7B,cAAM,EAAE,yBAAyB,mBAAmB;AAAA,MACrD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEQ,cAAc,kBAA0C;AAC/D,UAAM,WAAW,KAAK,MACpB,eAAe,EACf;AAAA,MAAO,CAAC,OACR,iBAAiB;AAAA,QAChB,GAAG;AAAA,QACH,eAAe;AAAA,MAChB;AAAA,IACD;AACD,QAAI,SAAS,QAAQ;AACpB,WAAK,MAAM,kBAAkB,QAAQ;AAAA,IACtC;AAEA,UAAM,SAAgB,CAAC;AACvB,eAAW,OAAO,KAAK,kCAAkC;AACxD,UAAI,iBAAiB,SAAS,KAAK,eAAe,OAAO,GAAG;AAC3D,eAAO,KAAK,GAAG;AAAA,MAChB;AAAA,IACD;AAEA,eAAW,OAAO,QAAQ;AACzB,WAAK,iCAAiC,OAAO,GAAG;AAChD,WAAK,gBAAgB,KAAK,IAAI;AAAA,IAC/B;AAAA,EACD;AAAA,EAEA,MAAM,MAAM,KAAU,YAAoB,QAAgC;AACzE,QAAI;AACJ,QAAI,mBAAmB,KAAK,aAAa,EAAE;AAC3C,UAAM,oBAAoB,mCAAY;AACrC,YAAM,WAAW,CAAC,CAAC,KAAK,SAAS,EAAE,eAAe;AAAA,QACjD;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC,EAAE;AAEH,UAAI,CAAC,UAAU;AACd,cAAM,YAAY,MAAM,KAAK;AAAA,UAC5B;AAAA,UACA;AAAA,UACA;AAAA,QACD;AACA,YAAI,UAAU,QAAQ;AACrB,6BAAmB,UAAU;AAAA,QAC9B;AAEA,YAAI,UAAU,YAAY;AACzB,+BAAqB,UAAU;AAAA,QAChC;AAAA,MACD;AACA,aAAO,EAAE,kBAAkB,mBAAmB;AAAA,IAC/C,GAtB0B;AAuB1B,UAAM,uBAAuB,wBAAC,UAA0B;AACvD,UAAI,UAAU,MAAM,WAAW,UAAU,MAAM,UAAU;AACxD,YAAI,oBAAoB;AACvB,eAAK,kBAAkB,mBAAmB,MAAM,CAAC;AAAA,QAClD;AACA,eAAO;AAAA,MACR;AACA,aAAO;AAAA,IACR,GAR6B;AAU7B,UAAM,kBAAkB;AACxB,QAAI,KAAK,UAAU,MAAM,UAAU;AAElC,YAAM,EAAE,QAAQ,MAAM,UAAU,IAC/B,KAAK,wBAAwB,EAAE;AAChC,YAAM,SAAS,MAAM,UAAU;AAC/B,YAAM,eAAe,SAClB,OAAO,OAAO,UAAU,MAAM,GAAG,CAAC,CAAC,IACnC;AACH,YAAM,WAAW,KAAK,iBAAiB,CAAC,UAAU;AACjD,YAAI,qBAAqB,KAAK,GAAG;AAChC,mBAAS,QAAQ;AAAA,QAClB;AAAA,MACD,CAAC;AACD,YAAM,KAAK,eAAe,QAAQ,cAAc,QAAW,IAAI;AAAA,IAChE;AACA,QAAI,KAAK,UAAU,MAAM,SAAS;AACjC,YAAM,iBAAiB,KAAK,aAAa,EAAE;AAC3C,UAAI,CAAC,kBAAkB,CAAC,kBAAkB;AACzC;AAAA,MACD;AAEA,YAAM,WAAW,iBAAiB,QAAQ,iBAAiB,MAAM;AAChE,YAAI,qBAAqB,eAAe,KAAK,GAAG;AAC/C,mBAAS,QAAQ;AAAA,QAClB;AAAA,MACD,CAAC;AACD,YAAM,iBAAiB,SAAS;AAAA,IACjC;AAAA,EACD;AAAA,EAEA,MAAc,0BACb,KACA,YACA,QACC;AACD,UAAM,aAAa,KAAK,SAAS;AACjC,UAAM,YAAY,KAAK,aAAa;AAEpC,UAAM,cAAc,MAAM,KAAK;AAAA,MAC9B;AAAA,MACA,CAAC,EAAE,YAAY,OAAO,CAAC;AAAA,MACvB;AAAA,IACD;AACA,UAAM,aAAa,cAAc,CAAC;AAClC,QAAI,CAAC,YAAY;AAChB,aAAO,EAAE,YAAY,QAAW,QAAQ,UAAU,cAAc;AAAA,IACjE;AAIA,QAAI,CAAC,WAAW,UAAU;AACzB,UAAI;AACJ,YAAM;AAAA,QACL,IAAI,QAAc,CAAC,YAAY;AAC9B,qBAAW,WAAW,uBAAuB,MAAM;AAClD,gBAAI,WAAW,UAAU;AACxB,sBAAQ;AAAA,YACT;AAAA,UACD,CAAC;AAAA,QACF,CAAC;AAAA,QACD;AAAA,MACD;AACA,eAAU,QAAQ;AAAA,IACnB;AAGA,QAAK;AAAL,MAAKC,WAAL;AAEC,MAAAA,cAAA,aAAU,KAAV;AAEA,MAAAA,cAAA,cAAW,KAAX;AAEA,MAAAA,cAAA,6BAA0B,KAA1B;AAEA,MAAAA,cAAA,wBAAqB,KAArB;AAAA,OARI;AAWL,QAAI,aAAa,UAAU;AAC3B,QAAI,YAAY;AAChB,eAAW,aAAa,WAAW,sBAAsB;AACxD,YAAM,UAAU,WAAW,WAAW,SAAS;AAC/C,UAAI,CAAC,SAAS;AACb;AAAA,MACD;AAEA,YAAM,UAAU,QAAQ,cAAc,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO;AAC/D,UAAI,YAAY,4BAA0B;AACzC,YACC,UAAU,iBACV,QAAQ,SAAS,UAAU,aAAa,GACvC;AACD,uBAAa,UAAU;AACvB,sBAAY;AAAA,QACb;AAAA,MACD;AAEA,UAAI,YAAY,iCAA+B;AAC9C,cAAM,mBAAmB,QAAQ,KAAK,CAAC,MAAM;AAC5C,gBAAM,MAAM,EAAE,iBAAiB;AAC/B,iBACC,OACA,KAAK,mBAAmB,OAAO;AAAA,YAC9B,IAAI,OAAO;AAAA,YACX;AAAA,UACD;AAAA,QAEF,CAAC;AAED,YAAI,kBAAkB;AACrB,uBAAa;AACb,sBAAY;AAAA,QACb;AAAA,MACD;AAEA,UAAI,YAAY,kBAAgB;AAC/B,qBAAa,QAAQ,CAAC;AACtB,oBAAY;AAAA,MACb;AAAA,IACD;AAEA,WAAO,EAAE,QAAQ,YAAY,WAAW;AAAA,EACzC;AACD;AAnhEa,eAAN;AAAA,EAuCJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA3DU;AAqhEN,SAAS,qCACf,OACA,YACA,QACA,SACA,cAKC;AACD,MAAI,CAAC,SAAS;AACb,QAAI,cAAc,QAAQ;AACzB,gBAAU,aAAa,WAAW,OAAO,UAAU,OAAQ;AAAA,IAC5D,OAAO;AACN,YAAM,WAAW,MAAM,YAAY;AACnC,YAAM,iBAAiB,SAAS;AAAA,QAC/B,CAAC,MAAM,EAAE,UAAU,MAAM;AAAA,MAC1B;AAEA,gBACC,kBACA,SAAS;AAAA,QACR,CAAC,MACA,MAAM,gBAAgB,MAAM,cAAc;AAAA,MAC5C,MACC,SAAS,SAAS,SAAS,CAAC,IAAI;AAAA,IACnC;AAAA,EACD;AAEA,MAAI,CAAC,QAAQ;AACZ,QAAI,YAAY;AACf,eAAS,WAAW;AAAA,IACrB,OAAO;AACN,YAAM,UAAU,UAAU,QAAQ,cAAc,IAAI;AACpD,YAAM,gBAAgB,WAAW,QAAQ,KAAK,CAAC,MAAM,EAAE,OAAO;AAC9D,eACC,kBACC,WAAW,QAAQ,SAAS,QAAQ,CAAC,IAAI;AAAA,IAC5C;AAAA,EACD;AAEA,MAAI,CAAC,cAAc,QAAQ;AAC1B,iBAAa,OAAO,iBAAiB;AAAA,EACtC;AAEA,SAAO,EAAE,SAAS,QAAQ,WAAW;AACtC;AA/CgB;AAiDhB,eAAe,uBACd,OACA,SACA,MACgB;AAChB,MAAI,SAAS;AACZ,UAAM,KAAK,OAAO;AAAA,EACnB,OAAO;AACN,UAAM,QAAQ,IAAI,MAAM,YAAY,EAAE,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;AAAA,EAC1D;AACD;AAVe;",
  "names": ["result", "message", "session", "Score"]
}
