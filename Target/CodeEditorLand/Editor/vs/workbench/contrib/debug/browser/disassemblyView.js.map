{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/disassemblyView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { PixelRatio } from '../../../../base/browser/pixelRatio.js';\nimport { $, Dimension, addStandardDisposableListener, append } from '../../../../base/browser/dom.js';\nimport { IListAccessibilityProvider } from '../../../../base/browser/ui/list/listWidget.js';\nimport { ITableRenderer, ITableVirtualDelegate } from '../../../../base/browser/ui/table/table.js';\nimport { binarySearch2 } from '../../../../base/common/arrays.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable, dispose } from '../../../../base/common/lifecycle.js';\nimport { isAbsolute } from '../../../../base/common/path.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { applyFontInfo } from '../../../../editor/browser/config/domFontInfo.js';\nimport { isCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { BareFontInfo } from '../../../../editor/common/config/fontInfo.js';\nimport { IRange, Range } from '../../../../editor/common/core/range.js';\nimport { StringBuilder } from '../../../../editor/common/core/stringBuilder.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { TextEditorSelectionRevealType } from '../../../../platform/editor/common/editor.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { WorkbenchTable } from '../../../../platform/list/browser/listService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { editorBackground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { EditorPane } from '../../../browser/parts/editor/editorPane.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { focusedStackFrameColor, topStackFrameColor } from './callStackEditorContribution.js';\nimport * as icons from './debugIcons.js';\nimport { CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST, DISASSEMBLY_VIEW_ID, IDebugConfiguration, IDebugService, IDebugSession, IInstructionBreakpoint, State } from '../common/debug.js';\nimport { InstructionBreakpoint } from '../common/debugModel.js';\nimport { getUriFromSource } from '../common/debugSource.js';\nimport { isUri, sourcesEqual } from '../common/debugUtils.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IEditorGroup } from '../../../services/editor/common/editorGroupsService.js';\n\ninterface IDisassembledInstructionEntry {\n\tallowBreakpoint: boolean;\n\tisBreakpointSet: boolean;\n\tisBreakpointEnabled: boolean;\n\t/** Instruction reference from the DA */\n\tinstructionReference: string;\n\t/** Offset from the instructionReference that's the basis for the `instructionOffset` */\n\tinstructionReferenceOffset: number;\n\t/** The number of instructions (+/-) away from the instructionReference and instructionReferenceOffset this instruction lies */\n\tinstructionOffset: number;\n\t/** Whether this is the first instruction on the target line. */\n\tshowSourceLocation?: boolean;\n\t/** Original instruction from the debugger */\n\tinstruction: DebugProtocol.DisassembledInstruction;\n\t/** Parsed instruction address */\n\taddress: bigint;\n}\n\n\n// Special entry as a placeholer when disassembly is not available\nconst disassemblyNotAvailable: IDisassembledInstructionEntry = {\n\tallowBreakpoint: false,\n\tisBreakpointSet: false,\n\tisBreakpointEnabled: false,\n\tinstructionReference: '',\n\tinstructionOffset: 0,\n\tinstructionReferenceOffset: 0,\n\taddress: 0n,\n\tinstruction: {\n\t\taddress: '-1',\n\t\tinstruction: localize('instructionNotAvailable', \"Disassembly not available.\")\n\t},\n};\n\nexport class DisassemblyView extends EditorPane {\n\n\tprivate static readonly NUM_INSTRUCTIONS_TO_LOAD = 50;\n\n\t// Used in instruction renderer\n\tprivate _fontInfo: BareFontInfo | undefined;\n\tprivate _disassembledInstructions: WorkbenchTable<IDisassembledInstructionEntry> | undefined;\n\tprivate _onDidChangeStackFrame: Emitter<void>;\n\tprivate _previousDebuggingState: State;\n\tprivate _instructionBpList: readonly IInstructionBreakpoint[] = [];\n\tprivate _enableSourceCodeRender: boolean = true;\n\tprivate _loadingLock: boolean = false;\n\tprivate readonly _referenceToMemoryAddress = new Map<string, bigint>();\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t) {\n\t\tsuper(DISASSEMBLY_VIEW_ID, group, telemetryService, themeService, storageService);\n\n\t\tthis._disassembledInstructions = undefined;\n\t\tthis._onDidChangeStackFrame = this._register(new Emitter<void>({ leakWarningThreshold: 1000 }));\n\t\tthis._previousDebuggingState = _debugService.state;\n\t\tthis._register(_configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug')) {\n\t\t\t\t// show/hide source code requires changing height which WorkbenchTable doesn't support dynamic height, thus force a total reload.\n\t\t\t\tconst newValue = this._configurationService.getValue<IDebugConfiguration>('debug').disassemblyView.showSourceCode;\n\t\t\t\tif (this._enableSourceCodeRender !== newValue) {\n\t\t\t\t\tthis._enableSourceCodeRender = newValue;\n\t\t\t\t\t// todo: trigger rerender\n\t\t\t\t} else {\n\t\t\t\t\tthis._disassembledInstructions?.rerender();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tget fontInfo() {\n\t\tif (!this._fontInfo) {\n\t\t\tthis._fontInfo = this.createFontInfo();\n\n\t\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration('editor')) {\n\t\t\t\t\tthis._fontInfo = this.createFontInfo();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\treturn this._fontInfo;\n\t}\n\n\tprivate createFontInfo() {\n\t\treturn BareFontInfo.createFromRawSettings(this._configurationService.getValue('editor'), PixelRatio.getInstance(this.window).value);\n\t}\n\n\tget currentInstructionAddresses() {\n\t\treturn this._debugService.getModel().getSessions(false).\n\t\t\tmap(session => session.getAllThreads()).\n\t\t\treduce((prev, curr) => prev.concat(curr), []).\n\t\t\tmap(thread => thread.getTopStackFrame()).\n\t\t\tmap(frame => frame?.instructionPointerReference).\n\t\t\tmap(ref => ref ? this.getReferenceAddress(ref) : undefined);\n\t}\n\n\t// Instruction reference of the top stack frame of the focused stack\n\tget focusedCurrentInstructionReference() {\n\t\treturn this._debugService.getViewModel().focusedStackFrame?.thread.getTopStackFrame()?.instructionPointerReference;\n\t}\n\n\tget focusedCurrentInstructionAddress() {\n\t\tconst ref = this.focusedCurrentInstructionReference;\n\t\treturn ref ? this.getReferenceAddress(ref) : undefined;\n\t}\n\n\tget focusedInstructionReference() {\n\t\treturn this._debugService.getViewModel().focusedStackFrame?.instructionPointerReference;\n\t}\n\n\tget focusedInstructionAddress() {\n\t\tconst ref = this.focusedInstructionReference;\n\t\treturn ref ? this.getReferenceAddress(ref) : undefined;\n\t}\n\n\tget isSourceCodeRender() { return this._enableSourceCodeRender; }\n\n\tget debugSession(): IDebugSession | undefined {\n\t\treturn this._debugService.getViewModel().focusedSession;\n\t}\n\n\tget onDidChangeStackFrame() { return this._onDidChangeStackFrame.event; }\n\n\tget focusedAddressAndOffset() {\n\t\tconst element = this._disassembledInstructions?.getFocusedElements()[0];\n\t\tif (!element) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst reference = element.instructionReference;\n\t\tconst offset = Number(element.address - this.getReferenceAddress(reference)!);\n\t\treturn { reference, offset, address: element.address };\n\t}\n\n\tprotected createEditor(parent: HTMLElement): void {\n\t\tthis._enableSourceCodeRender = this._configurationService.getValue<IDebugConfiguration>('debug').disassemblyView.showSourceCode;\n\t\tconst lineHeight = this.fontInfo.lineHeight;\n\t\tconst thisOM = this;\n\t\tconst delegate = new class implements ITableVirtualDelegate<IDisassembledInstructionEntry> {\n\t\t\theaderRowHeight: number = 0; // No header\n\t\t\tgetHeight(row: IDisassembledInstructionEntry): number {\n\t\t\t\tif (thisOM.isSourceCodeRender && row.showSourceLocation && row.instruction.location?.path && row.instruction.line) {\n\t\t\t\t\t// instruction line + source lines\n\t\t\t\t\tif (row.instruction.endLine) {\n\t\t\t\t\t\treturn lineHeight * (row.instruction.endLine - row.instruction.line + 2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// source is only a single line.\n\t\t\t\t\t\treturn lineHeight * 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// just instruction line\n\t\t\t\treturn lineHeight;\n\t\t\t}\n\t\t};\n\n\t\tconst instructionRenderer = this._register(this._instantiationService.createInstance(InstructionRenderer, this));\n\n\t\tthis._disassembledInstructions = this._register(this._instantiationService.createInstance(WorkbenchTable,\n\t\t\t'DisassemblyView', parent, delegate,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: '',\n\t\t\t\t\ttooltip: '',\n\t\t\t\t\tweight: 0,\n\t\t\t\t\tminimumWidth: this.fontInfo.lineHeight,\n\t\t\t\t\tmaximumWidth: this.fontInfo.lineHeight,\n\t\t\t\t\ttemplateId: BreakpointRenderer.TEMPLATE_ID,\n\t\t\t\t\tproject(row: IDisassembledInstructionEntry): IDisassembledInstructionEntry { return row; }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('disassemblyTableColumnLabel', \"instructions\"),\n\t\t\t\t\ttooltip: '',\n\t\t\t\t\tweight: 0.3,\n\t\t\t\t\ttemplateId: InstructionRenderer.TEMPLATE_ID,\n\t\t\t\t\tproject(row: IDisassembledInstructionEntry): IDisassembledInstructionEntry { return row; }\n\t\t\t\t},\n\t\t\t],\n\t\t\t[\n\t\t\t\tthis._instantiationService.createInstance(BreakpointRenderer, this),\n\t\t\t\tinstructionRenderer,\n\t\t\t],\n\t\t\t{\n\t\t\t\tidentityProvider: { getId: (e: IDisassembledInstructionEntry) => e.instruction.address },\n\t\t\t\thorizontalScrolling: false,\n\t\t\t\toverrideStyles: {\n\t\t\t\t\tlistBackground: editorBackground\n\t\t\t\t},\n\t\t\t\tmultipleSelectionSupport: false,\n\t\t\t\tsetRowLineHeight: false,\n\t\t\t\topenOnSingleClick: false,\n\t\t\t\taccessibilityProvider: new AccessibilityProvider(),\n\t\t\t\tmouseSupport: false\n\t\t\t}\n\t\t)) as WorkbenchTable<IDisassembledInstructionEntry>;\n\n\t\tthis._disassembledInstructions.domNode.classList.add('disassembly-view');\n\n\t\tif (this.focusedInstructionReference) {\n\t\t\tthis.reloadDisassembly(this.focusedInstructionReference, 0);\n\t\t}\n\n\t\tthis._register(this._disassembledInstructions.onDidScroll(e => {\n\t\t\tif (this._loadingLock) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (e.oldScrollTop > e.scrollTop && e.scrollTop < e.height) {\n\t\t\t\tthis._loadingLock = true;\n\t\t\t\tconst prevTop = Math.floor(e.scrollTop / this.fontInfo.lineHeight);\n\t\t\t\tthis.scrollUp_LoadDisassembledInstructions(DisassemblyView.NUM_INSTRUCTIONS_TO_LOAD).then((loaded) => {\n\t\t\t\t\tif (loaded > 0) {\n\t\t\t\t\t\tthis._disassembledInstructions!.reveal(prevTop + loaded, 0);\n\t\t\t\t\t}\n\t\t\t\t\tthis._loadingLock = false;\n\t\t\t\t});\n\t\t\t} else if (e.oldScrollTop < e.scrollTop && e.scrollTop + e.height > e.scrollHeight - e.height) {\n\t\t\t\tthis._loadingLock = true;\n\t\t\t\tthis.scrollDown_LoadDisassembledInstructions(DisassemblyView.NUM_INSTRUCTIONS_TO_LOAD).then(() => { this._loadingLock = false; });\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._debugService.getViewModel().onDidFocusStackFrame(({ stackFrame }) => {\n\t\t\tif (this._disassembledInstructions && stackFrame?.instructionPointerReference) {\n\t\t\t\tthis.goToInstructionAndOffset(stackFrame.instructionPointerReference, 0);\n\t\t\t}\n\t\t\tthis._onDidChangeStackFrame.fire();\n\t\t}));\n\n\t\t// refresh breakpoints view\n\t\tthis._register(this._debugService.getModel().onDidChangeBreakpoints(bpEvent => {\n\t\t\tif (bpEvent && this._disassembledInstructions) {\n\t\t\t\t// draw viewable BP\n\t\t\t\tlet changed = false;\n\t\t\t\tbpEvent.added?.forEach((bp) => {\n\t\t\t\t\tif (bp instanceof InstructionBreakpoint) {\n\t\t\t\t\t\tconst index = this.getIndexFromReferenceAndOffset(bp.instructionReference, bp.offset);\n\t\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\t\tthis._disassembledInstructions!.row(index).isBreakpointSet = true;\n\t\t\t\t\t\t\tthis._disassembledInstructions!.row(index).isBreakpointEnabled = bp.enabled;\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tbpEvent.removed?.forEach((bp) => {\n\t\t\t\t\tif (bp instanceof InstructionBreakpoint) {\n\t\t\t\t\t\tconst index = this.getIndexFromReferenceAndOffset(bp.instructionReference, bp.offset);\n\t\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\t\tthis._disassembledInstructions!.row(index).isBreakpointSet = false;\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tbpEvent.changed?.forEach((bp) => {\n\t\t\t\t\tif (bp instanceof InstructionBreakpoint) {\n\t\t\t\t\t\tconst index = this.getIndexFromReferenceAndOffset(bp.instructionReference, bp.offset);\n\t\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\t\tif (this._disassembledInstructions!.row(index).isBreakpointEnabled !== bp.enabled) {\n\t\t\t\t\t\t\t\tthis._disassembledInstructions!.row(index).isBreakpointEnabled = bp.enabled;\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// get an updated list so that items beyond the current range would render when reached.\n\t\t\t\tthis._instructionBpList = this._debugService.getModel().getInstructionBreakpoints();\n\n\t\t\t\t// breakpoints restored from a previous session can be based on memory\n\t\t\t\t// references that may no longer exist in the current session. Request\n\t\t\t\t// those instructions to be loaded so the BP can be displayed.\n\t\t\t\tfor (const bp of this._instructionBpList) {\n\t\t\t\t\tthis.primeMemoryReference(bp.instructionReference);\n\t\t\t\t}\n\n\t\t\t\tif (changed) {\n\t\t\t\t\tthis._onDidChangeStackFrame.fire();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._debugService.onDidChangeState(e => {\n\t\t\tif ((e === State.Running || e === State.Stopped) &&\n\t\t\t\t(this._previousDebuggingState !== State.Running && this._previousDebuggingState !== State.Stopped)) {\n\t\t\t\t// Just started debugging, clear the view\n\t\t\t\tthis.clear();\n\t\t\t\tthis._enableSourceCodeRender = this._configurationService.getValue<IDebugConfiguration>('debug').disassemblyView.showSourceCode;\n\t\t\t}\n\n\t\t\tthis._previousDebuggingState = e;\n\t\t\tthis._onDidChangeStackFrame.fire();\n\t\t}));\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\tthis._disassembledInstructions?.layout(dimension.height);\n\t}\n\n\tasync goToInstructionAndOffset(instructionReference: string, offset: number, focus?: boolean) {\n\t\tlet addr = this._referenceToMemoryAddress.get(instructionReference);\n\t\tif (addr === undefined) {\n\t\t\tawait this.loadDisassembledInstructions(instructionReference, 0, -DisassemblyView.NUM_INSTRUCTIONS_TO_LOAD, DisassemblyView.NUM_INSTRUCTIONS_TO_LOAD * 2);\n\t\t\taddr = this._referenceToMemoryAddress.get(instructionReference);\n\t\t}\n\n\t\tif (addr) {\n\t\t\tthis.goToAddress(addr + BigInt(offset), focus);\n\t\t}\n\t}\n\n\t/** Gets the address associated with the instruction reference. */\n\tgetReferenceAddress(instructionReference: string) {\n\t\treturn this._referenceToMemoryAddress.get(instructionReference);\n\t}\n\n\t/**\n\t * Go to the address provided. If no address is provided, reveal the address of the currently focused stack frame. Returns false if that address is not available.\n\t */\n\tprivate goToAddress(address: bigint, focus?: boolean): boolean {\n\t\tif (!this._disassembledInstructions) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!address) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst index = this.getIndexFromAddress(address);\n\t\tif (index >= 0) {\n\t\t\tthis._disassembledInstructions.reveal(index);\n\n\t\t\tif (focus) {\n\t\t\t\tthis._disassembledInstructions.domFocus();\n\t\t\t\tthis._disassembledInstructions.setFocus([index]);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate async scrollUp_LoadDisassembledInstructions(instructionCount: number): Promise<number> {\n\t\tconst first = this._disassembledInstructions?.row(0);\n\t\tif (first) {\n\t\t\treturn this.loadDisassembledInstructions(\n\t\t\t\tfirst.instructionReference,\n\t\t\t\tfirst.instructionReferenceOffset,\n\t\t\t\tfirst.instructionOffset - instructionCount,\n\t\t\t\tinstructionCount,\n\t\t\t);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprivate async scrollDown_LoadDisassembledInstructions(instructionCount: number): Promise<number> {\n\t\tconst last = this._disassembledInstructions?.row(this._disassembledInstructions?.length - 1);\n\t\tif (last) {\n\t\t\treturn this.loadDisassembledInstructions(\n\t\t\t\tlast.instructionReference,\n\t\t\t\tlast.instructionReferenceOffset,\n\t\t\t\tlast.instructionOffset + 1,\n\t\t\t\tinstructionCount,\n\t\t\t);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Sets the memory reference address. We don't just loadDisassembledInstructions\n\t * for this, since we can't really deal with discontiguous ranges (we can't\n\t * detect _if_ a range is discontiguous since we don't know how much memory\n\t * comes between instructions.)\n\t */\n\tprivate async primeMemoryReference(instructionReference: string) {\n\t\tif (this._referenceToMemoryAddress.has(instructionReference)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst s = await this.debugSession?.disassemble(instructionReference, 0, 0, 1);\n\t\tif (s && s.length > 0) {\n\t\t\ttry {\n\t\t\t\tthis._referenceToMemoryAddress.set(instructionReference, BigInt(s[0].address));\n\t\t\t\treturn true;\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/** Loads disasembled instructions. Returns the number of instructions that were loaded. */\n\tprivate async loadDisassembledInstructions(instructionReference: string, offset: number, instructionOffset: number, instructionCount: number): Promise<number> {\n\t\tconst session = this.debugSession;\n\t\tconst resultEntries = await session?.disassemble(instructionReference, offset, instructionOffset, instructionCount);\n\n\t\t// Ensure we always load the baseline instructions so we know what address the instructionReference refers to.\n\t\tif (!this._referenceToMemoryAddress.has(instructionReference) && instructionOffset !== 0) {\n\t\t\tawait this.loadDisassembledInstructions(instructionReference, 0, 0, DisassemblyView.NUM_INSTRUCTIONS_TO_LOAD);\n\t\t}\n\n\t\tif (session && resultEntries && this._disassembledInstructions) {\n\t\t\tconst newEntries: IDisassembledInstructionEntry[] = [];\n\n\t\t\tlet lastLocation: DebugProtocol.Source | undefined;\n\t\t\tlet lastLine: IRange | undefined;\n\t\t\tfor (let i = 0; i < resultEntries.length; i++) {\n\t\t\t\tconst instruction = resultEntries[i];\n\t\t\t\tconst thisInstructionOffset = instructionOffset + i;\n\n\t\t\t\t// Forward fill the missing location as detailed in the DAP spec.\n\t\t\t\tif (instruction.location) {\n\t\t\t\t\tlastLocation = instruction.location;\n\t\t\t\t\tlastLine = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (instruction.line) {\n\t\t\t\t\tconst currentLine: IRange = {\n\t\t\t\t\t\tstartLineNumber: instruction.line,\n\t\t\t\t\t\tstartColumn: instruction.column ?? 0,\n\t\t\t\t\t\tendLineNumber: instruction.endLine ?? instruction.line,\n\t\t\t\t\t\tendColumn: instruction.endColumn ?? 0,\n\t\t\t\t\t};\n\n\t\t\t\t\t// Add location only to the first unique range. This will give the appearance of grouping of instructions.\n\t\t\t\t\tif (!Range.equalsRange(currentLine, lastLine ?? null)) {\n\t\t\t\t\t\tlastLine = currentLine;\n\t\t\t\t\t\tinstruction.location = lastLocation;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet address: bigint;\n\t\t\t\ttry {\n\t\t\t\t\taddress = BigInt(instruction.address);\n\t\t\t\t} catch {\n\t\t\t\t\tconsole.error(`Could not parse disassembly address ${instruction.address} (in ${JSON.stringify(instruction)})`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst entry: IDisassembledInstructionEntry = {\n\t\t\t\t\tallowBreakpoint: true,\n\t\t\t\t\tisBreakpointSet: false,\n\t\t\t\t\tisBreakpointEnabled: false,\n\t\t\t\t\tinstructionReference,\n\t\t\t\t\tinstructionReferenceOffset: offset,\n\t\t\t\t\tinstructionOffset: thisInstructionOffset,\n\t\t\t\t\tinstruction,\n\t\t\t\t\taddress,\n\t\t\t\t};\n\n\t\t\t\tnewEntries.push(entry);\n\n\t\t\t\t// if we just loaded the first instruction for this reference, mark its address.\n\t\t\t\tif (offset === 0 && thisInstructionOffset === 0) {\n\t\t\t\t\tthis._referenceToMemoryAddress.set(instructionReference, address);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newEntries.length === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tconst refBaseAddress = this._referenceToMemoryAddress.get(instructionReference);\n\t\t\tconst bps = this._instructionBpList.map(p => {\n\t\t\t\tconst base = this._referenceToMemoryAddress.get(p.instructionReference);\n\t\t\t\tif (!base) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tenabled: p.enabled,\n\t\t\t\t\taddress: base + BigInt(p.offset || 0),\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tif (refBaseAddress !== undefined) {\n\t\t\t\tfor (const entry of newEntries) {\n\t\t\t\t\tconst bp = bps.find(p => p?.address === entry.address);\n\t\t\t\t\tif (bp) {\n\t\t\t\t\t\tentry.isBreakpointSet = true;\n\t\t\t\t\t\tentry.isBreakpointEnabled = bp.enabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst da = this._disassembledInstructions;\n\t\t\tif (da.length === 1 && this._disassembledInstructions.row(0) === disassemblyNotAvailable) {\n\t\t\t\tda.splice(0, 1);\n\t\t\t}\n\n\t\t\tconst firstAddr = newEntries[0].address;\n\t\t\tconst lastAddr = newEntries[newEntries.length - 1].address;\n\n\t\t\tconst startN = binarySearch2(da.length, i => Number(da.row(i).address - firstAddr));\n\t\t\tconst start = startN < 0 ? ~startN : startN;\n\t\t\tconst endN = binarySearch2(da.length, i => Number(da.row(i).address - lastAddr));\n\t\t\tconst end = endN < 0 ? ~endN : endN + 1;\n\t\t\tconst toDelete = end - start;\n\n\t\t\t// Go through everything we're about to add, and only show the source\n\t\t\t// location if it's different from the previous one, \"grouping\" instructions by line\n\t\t\tlet lastLocated: undefined | DebugProtocol.DisassembledInstruction;\n\t\t\tfor (let i = start - 1; i >= 0; i--) {\n\t\t\t\tconst { instruction } = da.row(i);\n\t\t\t\tif (instruction.location && instruction.line !== undefined) {\n\t\t\t\t\tlastLocated = instruction;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst shouldShowLocation = (instruction: DebugProtocol.DisassembledInstruction) =>\n\t\t\t\tinstruction.line !== undefined && instruction.location !== undefined &&\n\t\t\t\t(!lastLocated || !sourcesEqual(instruction.location, lastLocated.location) || instruction.line !== lastLocated.line);\n\n\t\t\tfor (const entry of newEntries) {\n\t\t\t\tif (shouldShowLocation(entry.instruction)) {\n\t\t\t\t\tentry.showSourceLocation = true;\n\t\t\t\t\tlastLocated = entry.instruction;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tda.splice(start, toDelete, newEntries);\n\n\t\t\treturn newEntries.length - toDelete;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprivate getIndexFromReferenceAndOffset(instructionReference: string, offset: number): number {\n\t\tconst addr = this._referenceToMemoryAddress.get(instructionReference);\n\t\tif (addr === undefined) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn this.getIndexFromAddress(addr + BigInt(offset));\n\t}\n\n\tprivate getIndexFromAddress(address: bigint): number {\n\t\tconst disassembledInstructions = this._disassembledInstructions;\n\t\tif (disassembledInstructions && disassembledInstructions.length > 0) {\n\t\t\treturn binarySearch2(disassembledInstructions.length, index => {\n\t\t\t\tconst row = disassembledInstructions.row(index);\n\t\t\t\treturn Number(row.address - address);\n\t\t\t});\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Clears the table and reload instructions near the target address\n\t */\n\tprivate reloadDisassembly(instructionReference: string, offset: number) {\n\t\tif (!this._disassembledInstructions) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._loadingLock = true; // stop scrolling during the load.\n\t\tthis.clear();\n\t\tthis._instructionBpList = this._debugService.getModel().getInstructionBreakpoints();\n\t\tthis.loadDisassembledInstructions(instructionReference, offset, -DisassemblyView.NUM_INSTRUCTIONS_TO_LOAD * 4, DisassemblyView.NUM_INSTRUCTIONS_TO_LOAD * 8).then(() => {\n\t\t\t// on load, set the target instruction in the middle of the page.\n\t\t\tif (this._disassembledInstructions!.length > 0) {\n\t\t\t\tconst targetIndex = Math.floor(this._disassembledInstructions!.length / 2);\n\t\t\t\tthis._disassembledInstructions!.reveal(targetIndex, 0.5);\n\n\t\t\t\t// Always focus the target address on reload, or arrow key navigation would look terrible\n\t\t\t\tthis._disassembledInstructions!.domFocus();\n\t\t\t\tthis._disassembledInstructions!.setFocus([targetIndex]);\n\t\t\t}\n\t\t\tthis._loadingLock = false;\n\t\t});\n\t}\n\n\tprivate clear() {\n\t\tthis._referenceToMemoryAddress.clear();\n\t\tthis._disassembledInstructions?.splice(0, this._disassembledInstructions.length, [disassemblyNotAvailable]);\n\t}\n}\n\ninterface IBreakpointColumnTemplateData {\n\tcurrentElement: { element?: IDisassembledInstructionEntry };\n\ticon: HTMLElement;\n\tdisposables: IDisposable[];\n}\n\nclass BreakpointRenderer implements ITableRenderer<IDisassembledInstructionEntry, IBreakpointColumnTemplateData> {\n\n\tstatic readonly TEMPLATE_ID = 'breakpoint';\n\n\ttemplateId: string = BreakpointRenderer.TEMPLATE_ID;\n\n\tprivate readonly _breakpointIcon = 'codicon-' + icons.breakpoint.regular.id;\n\tprivate readonly _breakpointDisabledIcon = 'codicon-' + icons.breakpoint.disabled.id;\n\tprivate readonly _breakpointHintIcon = 'codicon-' + icons.debugBreakpointHint.id;\n\tprivate readonly _debugStackframe = 'codicon-' + icons.debugStackframe.id;\n\tprivate readonly _debugStackframeFocused = 'codicon-' + icons.debugStackframeFocused.id;\n\n\tconstructor(\n\t\tprivate readonly _disassemblyView: DisassemblyView,\n\t\t@IDebugService private readonly _debugService: IDebugService\n\t) {\n\t}\n\n\trenderTemplate(container: HTMLElement): IBreakpointColumnTemplateData {\n\t\t// align from the bottom so that it lines up with instruction when source code is present.\n\t\tcontainer.style.alignSelf = 'flex-end';\n\n\t\tconst icon = append(container, $('.codicon'));\n\t\ticon.style.display = 'flex';\n\t\ticon.style.alignItems = 'center';\n\t\ticon.style.justifyContent = 'center';\n\t\ticon.style.height = this._disassemblyView.fontInfo.lineHeight + 'px';\n\n\t\tconst currentElement: { element?: IDisassembledInstructionEntry } = { element: undefined };\n\n\t\tconst disposables = [\n\t\t\tthis._disassemblyView.onDidChangeStackFrame(() => this.rerenderDebugStackframe(icon, currentElement.element)),\n\t\t\taddStandardDisposableListener(container, 'mouseover', () => {\n\t\t\t\tif (currentElement.element?.allowBreakpoint) {\n\t\t\t\t\ticon.classList.add(this._breakpointHintIcon);\n\t\t\t\t}\n\t\t\t}),\n\t\t\taddStandardDisposableListener(container, 'mouseout', () => {\n\t\t\t\tif (currentElement.element?.allowBreakpoint) {\n\t\t\t\t\ticon.classList.remove(this._breakpointHintIcon);\n\t\t\t\t}\n\t\t\t}),\n\t\t\taddStandardDisposableListener(container, 'click', () => {\n\t\t\t\tif (currentElement.element?.allowBreakpoint) {\n\t\t\t\t\t// click show hint while waiting for BP to resolve.\n\t\t\t\t\ticon.classList.add(this._breakpointHintIcon);\n\t\t\t\t\tconst reference = currentElement.element.instructionReference;\n\t\t\t\t\tconst offset = Number(currentElement.element.address - this._disassemblyView.getReferenceAddress(reference)!);\n\t\t\t\t\tif (currentElement.element.isBreakpointSet) {\n\t\t\t\t\t\tthis._debugService.removeInstructionBreakpoints(reference, offset);\n\t\t\t\t\t} else if (currentElement.element.allowBreakpoint && !currentElement.element.isBreakpointSet) {\n\t\t\t\t\t\tthis._debugService.addInstructionBreakpoint({ instructionReference: reference, offset, address: currentElement.element.address, canPersist: false });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t];\n\n\t\treturn { currentElement, icon, disposables };\n\t}\n\n\trenderElement(element: IDisassembledInstructionEntry, index: number, templateData: IBreakpointColumnTemplateData, height: number | undefined): void {\n\t\ttemplateData.currentElement.element = element;\n\t\tthis.rerenderDebugStackframe(templateData.icon, element);\n\t}\n\n\tdisposeTemplate(templateData: IBreakpointColumnTemplateData): void {\n\t\tdispose(templateData.disposables);\n\t\ttemplateData.disposables = [];\n\t}\n\n\tprivate rerenderDebugStackframe(icon: HTMLElement, element?: IDisassembledInstructionEntry) {\n\t\tif (element?.address === this._disassemblyView.focusedCurrentInstructionAddress) {\n\t\t\ticon.classList.add(this._debugStackframe);\n\t\t} else if (element?.address === this._disassemblyView.focusedInstructionAddress) {\n\t\t\ticon.classList.add(this._debugStackframeFocused);\n\t\t} else {\n\t\t\ticon.classList.remove(this._debugStackframe);\n\t\t\ticon.classList.remove(this._debugStackframeFocused);\n\t\t}\n\n\t\ticon.classList.remove(this._breakpointHintIcon);\n\n\t\tif (element?.isBreakpointSet) {\n\t\t\tif (element.isBreakpointEnabled) {\n\t\t\t\ticon.classList.add(this._breakpointIcon);\n\t\t\t\ticon.classList.remove(this._breakpointDisabledIcon);\n\t\t\t} else {\n\t\t\t\ticon.classList.remove(this._breakpointIcon);\n\t\t\t\ticon.classList.add(this._breakpointDisabledIcon);\n\t\t\t}\n\t\t} else {\n\t\t\ticon.classList.remove(this._breakpointIcon);\n\t\t\ticon.classList.remove(this._breakpointDisabledIcon);\n\t\t}\n\t}\n}\n\ninterface IInstructionColumnTemplateData {\n\tcurrentElement: { element?: IDisassembledInstructionEntry };\n\t// TODO: hover widget?\n\tinstruction: HTMLElement;\n\tsourcecode: HTMLElement;\n\t// disposed when cell is closed.\n\tcellDisposable: IDisposable[];\n\t// disposed when template is closed.\n\tdisposables: IDisposable[];\n}\n\nclass InstructionRenderer extends Disposable implements ITableRenderer<IDisassembledInstructionEntry, IInstructionColumnTemplateData> {\n\n\tstatic readonly TEMPLATE_ID = 'instruction';\n\n\tprivate static readonly INSTRUCTION_ADDR_MIN_LENGTH = 25;\n\tprivate static readonly INSTRUCTION_BYTES_MIN_LENGTH = 30;\n\n\ttemplateId: string = InstructionRenderer.TEMPLATE_ID;\n\n\tprivate _topStackFrameColor: Color | undefined;\n\tprivate _focusedStackFrameColor: Color | undefined;\n\n\tconstructor(\n\t\tprivate readonly _disassemblyView: DisassemblyView,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IUriIdentityService private readonly uriService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis._topStackFrameColor = themeService.getColorTheme().getColor(topStackFrameColor);\n\t\tthis._focusedStackFrameColor = themeService.getColorTheme().getColor(focusedStackFrameColor);\n\n\t\tthis._register(themeService.onDidColorThemeChange(e => {\n\t\t\tthis._topStackFrameColor = e.getColor(topStackFrameColor);\n\t\t\tthis._focusedStackFrameColor = e.getColor(focusedStackFrameColor);\n\t\t}));\n\t}\n\n\trenderTemplate(container: HTMLElement): IInstructionColumnTemplateData {\n\t\tconst sourcecode = append(container, $('.sourcecode'));\n\t\tconst instruction = append(container, $('.instruction'));\n\t\tthis.applyFontInfo(sourcecode);\n\t\tthis.applyFontInfo(instruction);\n\t\tconst currentElement: { element?: IDisassembledInstructionEntry } = { element: undefined };\n\t\tconst cellDisposable: IDisposable[] = [];\n\n\t\tconst disposables = [\n\t\t\tthis._disassemblyView.onDidChangeStackFrame(() => this.rerenderBackground(instruction, sourcecode, currentElement.element)),\n\t\t\taddStandardDisposableListener(sourcecode, 'dblclick', () => this.openSourceCode(currentElement.element?.instruction)),\n\t\t];\n\n\t\treturn { currentElement, instruction, sourcecode, cellDisposable, disposables };\n\t}\n\n\trenderElement(element: IDisassembledInstructionEntry, index: number, templateData: IInstructionColumnTemplateData, height: number | undefined): void {\n\t\tthis.renderElementInner(element, index, templateData, height);\n\t}\n\n\tprivate async renderElementInner(element: IDisassembledInstructionEntry, index: number, templateData: IInstructionColumnTemplateData, height: number | undefined): Promise<void> {\n\t\ttemplateData.currentElement.element = element;\n\t\tconst instruction = element.instruction;\n\t\ttemplateData.sourcecode.innerText = '';\n\t\tconst sb = new StringBuilder(1000);\n\n\t\tif (this._disassemblyView.isSourceCodeRender && element.showSourceLocation && instruction.location?.path && instruction.line !== undefined) {\n\t\t\tconst sourceURI = this.getUriFromSource(instruction);\n\n\t\t\tif (sourceURI) {\n\t\t\t\tlet textModel: ITextModel | undefined = undefined;\n\t\t\t\tconst sourceSB = new StringBuilder(10000);\n\t\t\t\tconst ref = await this.textModelService.createModelReference(sourceURI);\n\t\t\t\tif (templateData.currentElement.element !== element) {\n\t\t\t\t\treturn; // avoid a race, #192831\n\t\t\t\t}\n\t\t\t\ttextModel = ref.object.textEditorModel;\n\t\t\t\ttemplateData.cellDisposable.push(ref);\n\n\t\t\t\t// templateData could have moved on during async.  Double check if it is still the same source.\n\t\t\t\tif (textModel && templateData.currentElement.element === element) {\n\t\t\t\t\tlet lineNumber = instruction.line;\n\n\t\t\t\t\twhile (lineNumber && lineNumber >= 1 && lineNumber <= textModel.getLineCount()) {\n\t\t\t\t\t\tconst lineContent = textModel.getLineContent(lineNumber);\n\t\t\t\t\t\tsourceSB.appendString(`  ${lineNumber}: `);\n\t\t\t\t\t\tsourceSB.appendString(lineContent + '\\n');\n\n\t\t\t\t\t\tif (instruction.endLine && lineNumber < instruction.endLine) {\n\t\t\t\t\t\t\tlineNumber++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\ttemplateData.sourcecode.innerText = sourceSB.build();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet spacesToAppend = 10;\n\n\t\tif (instruction.address !== '-1') {\n\t\t\tsb.appendString(instruction.address);\n\t\t\tif (instruction.address.length < InstructionRenderer.INSTRUCTION_ADDR_MIN_LENGTH) {\n\t\t\t\tspacesToAppend = InstructionRenderer.INSTRUCTION_ADDR_MIN_LENGTH - instruction.address.length;\n\t\t\t}\n\t\t\tfor (let i = 0; i < spacesToAppend; i++) {\n\t\t\t\tsb.appendString(' ');\n\t\t\t}\n\t\t}\n\n\t\tif (instruction.instructionBytes) {\n\t\t\tsb.appendString(instruction.instructionBytes);\n\t\t\tspacesToAppend = 10;\n\t\t\tif (instruction.instructionBytes.length < InstructionRenderer.INSTRUCTION_BYTES_MIN_LENGTH) {\n\t\t\t\tspacesToAppend = InstructionRenderer.INSTRUCTION_BYTES_MIN_LENGTH - instruction.instructionBytes.length;\n\t\t\t}\n\t\t\tfor (let i = 0; i < spacesToAppend; i++) {\n\t\t\t\tsb.appendString(' ');\n\t\t\t}\n\t\t}\n\n\t\tsb.appendString(instruction.instruction);\n\t\ttemplateData.instruction.innerText = sb.build();\n\n\t\tthis.rerenderBackground(templateData.instruction, templateData.sourcecode, element);\n\t}\n\n\tdisposeElement(element: IDisassembledInstructionEntry, index: number, templateData: IInstructionColumnTemplateData, height: number | undefined): void {\n\t\tdispose(templateData.cellDisposable);\n\t\ttemplateData.cellDisposable = [];\n\t}\n\n\tdisposeTemplate(templateData: IInstructionColumnTemplateData): void {\n\t\tdispose(templateData.disposables);\n\t\ttemplateData.disposables = [];\n\t}\n\n\tprivate rerenderBackground(instruction: HTMLElement, sourceCode: HTMLElement, element?: IDisassembledInstructionEntry) {\n\t\tif (element && this._disassemblyView.currentInstructionAddresses.includes(element.address)) {\n\t\t\tinstruction.style.background = this._topStackFrameColor?.toString() || 'transparent';\n\t\t} else if (element?.address === this._disassemblyView.focusedInstructionAddress) {\n\t\t\tinstruction.style.background = this._focusedStackFrameColor?.toString() || 'transparent';\n\t\t} else {\n\t\t\tinstruction.style.background = 'transparent';\n\t\t}\n\t}\n\n\tprivate openSourceCode(instruction: DebugProtocol.DisassembledInstruction | undefined) {\n\t\tif (instruction) {\n\t\t\tconst sourceURI = this.getUriFromSource(instruction);\n\t\t\tconst selection = instruction.endLine ? {\n\t\t\t\tstartLineNumber: instruction.line!,\n\t\t\t\tendLineNumber: instruction.endLine,\n\t\t\t\tstartColumn: instruction.column || 1,\n\t\t\t\tendColumn: instruction.endColumn || Constants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t} : {\n\t\t\t\tstartLineNumber: instruction.line!,\n\t\t\t\tendLineNumber: instruction.line!,\n\t\t\t\tstartColumn: instruction.column || 1,\n\t\t\t\tendColumn: instruction.endColumn || Constants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t};\n\n\t\t\tthis.editorService.openEditor({\n\t\t\t\tresource: sourceURI,\n\t\t\t\tdescription: localize('editorOpenedFromDisassemblyDescription', \"from disassembly\"),\n\t\t\t\toptions: {\n\t\t\t\t\tpreserveFocus: false,\n\t\t\t\t\tselection: selection,\n\t\t\t\t\trevealIfOpened: true,\n\t\t\t\t\tselectionRevealType: TextEditorSelectionRevealType.CenterIfOutsideViewport,\n\t\t\t\t\tpinned: false,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getUriFromSource(instruction: DebugProtocol.DisassembledInstruction): URI {\n\t\t// Try to resolve path before consulting the debugSession.\n\t\tconst path = instruction.location!.path;\n\t\tif (path && isUri(path)) {\t// path looks like a uri\n\t\t\treturn this.uriService.asCanonicalUri(URI.parse(path));\n\t\t}\n\t\t// assume a filesystem path\n\t\tif (path && isAbsolute(path)) {\n\t\t\treturn this.uriService.asCanonicalUri(URI.file(path));\n\t\t}\n\n\t\treturn getUriFromSource(instruction.location!, instruction.location!.path, this._disassemblyView.debugSession!.getId(), this.uriService, this.logService);\n\t}\n\n\tprivate applyFontInfo(element: HTMLElement) {\n\t\tapplyFontInfo(element, this._disassemblyView.fontInfo);\n\t\telement.style.whiteSpace = 'pre';\n\t}\n}\n\nclass AccessibilityProvider implements IListAccessibilityProvider<IDisassembledInstructionEntry> {\n\n\tgetWidgetAriaLabel(): string {\n\t\treturn localize('disassemblyView', \"Disassembly View\");\n\t}\n\n\tgetAriaLabel(element: IDisassembledInstructionEntry): string | null {\n\t\tlet label = '';\n\n\t\tconst instruction = element.instruction;\n\t\tif (instruction.address !== '-1') {\n\t\t\tlabel += `${localize('instructionAddress', \"Address\")}: ${instruction.address}`;\n\t\t}\n\t\tif (instruction.instructionBytes) {\n\t\t\tlabel += `, ${localize('instructionBytes', \"Bytes\")}: ${instruction.instructionBytes}`;\n\t\t}\n\t\tlabel += `, ${localize(`instructionText`, \"Instruction\")}: ${instruction.instruction}`;\n\n\t\treturn label;\n\t}\n}\n\nexport class DisassemblyViewContribution implements IWorkbenchContribution {\n\n\tprivate readonly _onDidActiveEditorChangeListener: IDisposable;\n\tprivate _onDidChangeModelLanguage: IDisposable | undefined;\n\tprivate _languageSupportsDisassembleRequest: IContextKey<boolean> | undefined;\n\n\tconstructor(\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tcontextKeyService.bufferChangeEvents(() => {\n\t\t\tthis._languageSupportsDisassembleRequest = CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST.bindTo(contextKeyService);\n\t\t});\n\n\t\tconst onDidActiveEditorChangeListener = () => {\n\t\t\tif (this._onDidChangeModelLanguage) {\n\t\t\t\tthis._onDidChangeModelLanguage.dispose();\n\t\t\t\tthis._onDidChangeModelLanguage = undefined;\n\t\t\t}\n\n\t\t\tconst activeTextEditorControl = editorService.activeTextEditorControl;\n\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\tconst language = activeTextEditorControl.getModel()?.getLanguageId();\n\t\t\t\t// TODO: instead of using idDebuggerInterestedInLanguage, have a specific ext point for languages\n\t\t\t\t// support disassembly\n\t\t\t\tthis._languageSupportsDisassembleRequest?.set(!!language && debugService.getAdapterManager().someDebuggerInterestedInLanguage(language));\n\n\t\t\t\tthis._onDidChangeModelLanguage = activeTextEditorControl.onDidChangeModelLanguage(e => {\n\t\t\t\t\tthis._languageSupportsDisassembleRequest?.set(debugService.getAdapterManager().someDebuggerInterestedInLanguage(e.newLanguage));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._languageSupportsDisassembleRequest?.set(false);\n\t\t\t}\n\t\t};\n\n\t\tonDidActiveEditorChangeListener();\n\t\tthis._onDidActiveEditorChangeListener = editorService.onDidActiveEditorChange(onDidActiveEditorChangeListener);\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidActiveEditorChangeListener.dispose();\n\t\tthis._onDidChangeModelLanguage?.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
