var A=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var f=(g,u,e,t)=>{for(var s=t>1?void 0:t?B(u,e):u,r=g.length-1,i;r>=0;r--)(i=g[r])&&(s=(t?i(u,e,s):i(s))||s);return t&&s&&A(u,e,s),s},c=(g,u)=>(e,t)=>u(e,t,g);import*as a from"../../../../base/browser/dom.js";import{StandardKeyboardEvent as S}from"../../../../base/browser/keyboardEvent.js";import{BaseActionViewItem as T,SelectActionViewItem as k}from"../../../../base/browser/ui/actionbar/actionViewItems.js";import{getDefaultHoverDelegate as w}from"../../../../base/browser/ui/hover/hoverDelegateFactory.js";import{SelectBox as K}from"../../../../base/browser/ui/selectBox/selectBox.js";import"../../../../base/common/actions.js";import{KeyCode as m}from"../../../../base/common/keyCodes.js";import{dispose as y}from"../../../../base/common/lifecycle.js";import{ThemeIcon as M}from"../../../../base/common/themables.js";import*as h from"../../../../nls.js";import{ICommandService as P}from"../../../../platform/commands/common/commands.js";import{IConfigurationService as I}from"../../../../platform/configuration/common/configuration.js";import{IContextKeyService as R}from"../../../../platform/contextkey/common/contextkey.js";import{IContextViewService as D}from"../../../../platform/contextview/browser/contextView.js";import{IHoverService as _}from"../../../../platform/hover/browser/hover.js";import{IKeybindingService as W}from"../../../../platform/keybinding/common/keybinding.js";import{defaultSelectBoxStyles as C}from"../../../../platform/theme/browser/defaultStyles.js";import{asCssVariable as v,selectBackground as N,selectBorder as x}from"../../../../platform/theme/common/colorRegistry.js";import{IWorkspaceContextService as H,WorkbenchState as $}from"../../../../platform/workspace/common/workspace.js";import{AccessibilityVerbositySettingId as z}from"../../accessibility/browser/accessibilityConfiguration.js";import{AccessibilityCommandId as F}from"../../accessibility/common/accessibilityCommands.js";import{IDebugService as O,State as U}from"../common/debug.js";import{ADD_CONFIGURATION_ID as V}from"./debugCommands.js";import{debugStart as q}from"./debugIcons.js";const L=a.$;let p=class extends T{constructor(e,t,s,r,i,o,d,n,l,E,G){super(e,t,s);this.context=e;this.debugService=r;this.configurationService=i;this.commandService=o;this.contextService=d;this.keybindingService=l;this.hoverService=E;this.contextKeyService=G;this.toDispose=[],this.selectBox=new K([],-1,n,C,{ariaLabel:h.localize("debugLaunchConfigurations","Debug Launch Configurations")}),this.selectBox.setFocusable(!1),this.toDispose.push(this.selectBox),this.registerListeners()}static SEPARATOR="\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500";container;start;selectBox;debugOptions=[];toDispose;selected=0;providers=[];registerListeners(){this.toDispose.push(this.configurationService.onDidChangeConfiguration(e=>{e.affectsConfiguration("launch")&&this.updateOptions()})),this.toDispose.push(this.debugService.getConfigurationManager().onDidSelectConfiguration(()=>{this.updateOptions()}))}render(e){this.container=e,e.classList.add("start-debug-action-item"),this.start=a.append(e,L(M.asCSSSelector(q)));const t=this.keybindingService.lookupKeybinding(this.action.id)?.getLabel(),s=t?` (${t})`:"",r=this.action.label+s;this.toDispose.push(this.hoverService.setupManagedHover(w("mouse"),this.start,r)),this.start.setAttribute("role","button"),this._setAriaLabel(r),this.toDispose.push(a.addDisposableListener(this.start,a.EventType.CLICK,()=>{this.start.blur(),this.debugService.state!==U.Initializing&&this.actionRunner.run(this.action,this.context)})),this.toDispose.push(a.addDisposableListener(this.start,a.EventType.MOUSE_DOWN,n=>{this.action.enabled&&n.button===0&&this.start.classList.add("active")})),this.toDispose.push(a.addDisposableListener(this.start,a.EventType.MOUSE_UP,()=>{this.start.classList.remove("active")})),this.toDispose.push(a.addDisposableListener(this.start,a.EventType.MOUSE_OUT,()=>{this.start.classList.remove("active")})),this.toDispose.push(a.addDisposableListener(this.start,a.EventType.KEY_DOWN,n=>{const l=new S(n);l.equals(m.RightArrow)&&(this.start.tabIndex=-1,this.selectBox.focus(),l.stopPropagation())})),this.toDispose.push(this.selectBox.onDidSelect(async n=>{const l=this.debugOptions[n.index];(l.handler?await l.handler():!1)?this.selected=n.index:this.selectBox.select(this.selected)}));const i=L(".configuration");this.selectBox.render(a.append(e,i)),this.toDispose.push(a.addDisposableListener(i,a.EventType.KEY_DOWN,n=>{const l=new S(n);l.equals(m.LeftArrow)&&(this.selectBox.setFocusable(!1),this.start.tabIndex=0,this.start.focus(),l.stopPropagation())})),this.container.style.border=`1px solid ${v(x)}`,i.style.borderLeft=`1px solid ${v(x)}`,this.container.style.backgroundColor=v(N);const o=this.debugService.getConfigurationManager(),d=()=>o.getDynamicProviders().then(n=>{n.length!==this.providers.length&&(this.providers=n,this.updateOptions())});this.toDispose.push(o.onDidChangeConfigurationProviders(d)),d(),this.updateOptions()}setActionContext(e){this.context=e}isEnabled(){return!0}focus(e){e?this.selectBox.focus():(this.start.tabIndex=0,this.start.focus())}blur(){this.start.tabIndex=-1,this.selectBox.blur(),this.container.blur()}setFocusable(e){e?this.start.tabIndex=0:(this.start.tabIndex=-1,this.selectBox.setFocusable(!1))}dispose(){this.toDispose=y(this.toDispose),super.dispose()}updateOptions(){this.selected=0,this.debugOptions=[];const e=this.debugService.getConfigurationManager(),t=this.contextService.getWorkbenchState()===$.WORKSPACE;let s;const r=[];e.getAllConfigurations().forEach(({launch:i,name:o,presentation:d})=>{s!==d?.group&&(s=d?.group,this.debugOptions.length&&(this.debugOptions.push({label:p.SEPARATOR,handler:()=>Promise.resolve(!1)}),r.push(this.debugOptions.length-1))),o===e.selectedConfiguration.name&&i===e.selectedConfiguration.launch&&(this.selected=this.debugOptions.length);const n=t?`${o} (${i.name})`:o;this.debugOptions.push({label:n,handler:async()=>(await e.selectConfiguration(i,o),!0)})}),e.getRecentDynamicConfigurations().slice(0,3).forEach(({name:i,type:o})=>{o===e.selectedConfiguration.type&&e.selectedConfiguration.name===i&&(this.selected=this.debugOptions.length),this.debugOptions.push({label:i,handler:async()=>(await e.selectConfiguration(void 0,i,void 0,{type:o}),!0)})}),this.debugOptions.length===0&&this.debugOptions.push({label:h.localize("noConfigurations","No Configurations"),handler:async()=>!1}),this.debugOptions.push({label:p.SEPARATOR,handler:()=>Promise.resolve(!1)}),r.push(this.debugOptions.length-1),this.providers.forEach(i=>{this.debugOptions.push({label:`${i.label}...`,handler:async()=>{const o=await i.pick();return o?(await e.selectConfiguration(o.launch,o.config.name,o.config,{type:i.type}),!0):!1}})}),e.getLaunches().filter(i=>!i.hidden).forEach(i=>{const o=t?h.localize("addConfigTo","Add Config ({0})...",i.name):h.localize("addConfiguration","Add Configuration...");this.debugOptions.push({label:o,handler:async()=>(await this.commandService.executeCommand(V,i.uri.toString()),!1)})}),this.selectBox.setOptions(this.debugOptions.map((i,o)=>({text:i.label,isDisabled:r.indexOf(o)!==-1})),this.selected)}_setAriaLabel(e){let t=e,s;this.configurationService.getValue(z.Debug)&&(s=this.keybindingService.lookupKeybinding(F.OpenAccessibilityHelp,this.contextKeyService)?.getLabel()??void 0),s?t=h.localize("commentLabelWithKeybinding","{0}, use ({1}) for accessibility help",t,s):t=h.localize("commentLabelWithKeybindingNoKeybinding","{0}, run the command Open Accessibility Help which is currently not triggerable via keybinding.",t),this.start.ariaLabel=t}};p=f([c(3,O),c(4,I),c(5,P),c(6,H),c(7,D),c(8,W),c(9,_),c(10,R)],p);let b=class extends k{constructor(e,t,s,r,i){super(null,e,[],-1,r,C,{ariaLabel:h.localize("debugSession","Debug Session")});this.debugService=s;this.configurationService=i;this._register(this.debugService.getViewModel().onDidFocusSession(()=>{const d=this.getSelectedSession();if(d){const n=this.getSessions().indexOf(d);this.select(n)}})),this._register(this.debugService.onDidNewSession(d=>{const n=[];n.push(d.onDidChangeName(()=>this.update())),n.push(d.onDidEndAdapter(()=>y(n))),this.update()})),this.getSessions().forEach(d=>{this._register(d.onDidChangeName(()=>this.update()))}),this._register(this.debugService.onDidEndSession(()=>this.update()));const o=t?this.mapFocusedSessionToSelected(t):void 0;this.update(o)}getActionContext(e,t){return this.getSessions()[t]}update(e){e||(e=this.getSelectedSession());const t=this.getSessions(),s=t.map(r=>{const i=r.getLabel();return r.parentSession?`\xA0\xA0${i}`:i});this.setOptions(s.map(r=>({text:r})),e?t.indexOf(e):void 0)}getSelectedSession(){const e=this.debugService.getViewModel().focusedSession;return e?this.mapFocusedSessionToSelected(e):void 0}getSessions(){const e=this.configurationService.getValue("debug").showSubSessionsInToolBar,t=this.debugService.getModel().getSessions();return e?t:t.filter(s=>!s.parentSession)}mapFocusedSessionToSelected(e){const t=this.configurationService.getValue("debug").showSubSessionsInToolBar;for(;e.parentSession&&!t;)e=e.parentSession;return e}};b=f([c(2,O),c(3,D),c(4,I)],b);export{b as FocusSessionActionViewItem,p as StartDebugActionViewItem};
