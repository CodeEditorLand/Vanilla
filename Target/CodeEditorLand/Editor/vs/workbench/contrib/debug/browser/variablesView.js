var ne=Object.defineProperty;var oe=Object.getOwnPropertyDescriptor;var D=(o,i,e,t)=>{for(var r=t>1?void 0:t?oe(i,e):i,s=o.length-1,n;s>=0;s--)(n=o[s])&&(r=(t?n(i,e,r):n(r))||r);return t&&r&&ne(i,e,r),r},a=(o,i)=>(e,t)=>i(e,t,o);import*as w from"../../../../base/browser/dom.js";import{HighlightedLabel as ae}from"../../../../base/browser/ui/highlightedlabel/highlightedLabel.js";import{Action as L}from"../../../../base/common/actions.js";import{coalesce as ce}from"../../../../base/common/arrays.js";import{RunOnceScheduler as le}from"../../../../base/common/async.js";import{CancellationTokenSource as pe}from"../../../../base/common/cancellation.js";import{Codicon as F}from"../../../../base/common/codicons.js";import{createMatches as de}from"../../../../base/common/filters.js";import{toDisposable as ue}from"../../../../base/common/lifecycle.js";import{ThemeIcon as j}from"../../../../base/common/themables.js";import{localize as g}from"../../../../nls.js";import{createAndFillInContextMenuActions as R}from"../../../../platform/actions/browser/menuEntryActionViewItem.js";import{IMenuService as O,MenuId as T,registerAction2 as Ie}from"../../../../platform/actions/common/actions.js";import{IClipboardService as X}from"../../../../platform/clipboard/common/clipboardService.js";import{CommandsRegistry as h}from"../../../../platform/commands/common/commands.js";import{IConfigurationService as me}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as ve,IContextKeyService as P}from"../../../../platform/contextkey/common/contextkey.js";import{IContextMenuService as Y,IContextViewService as G}from"../../../../platform/contextview/browser/contextView.js";import{IHoverService as B}from"../../../../platform/hover/browser/hover.js";import{IInstantiationService as Se}from"../../../../platform/instantiation/common/instantiation.js";import{IKeybindingService as ge}from"../../../../platform/keybinding/common/keybinding.js";import{WorkbenchAsyncDataTree as be}from"../../../../platform/list/browser/listService.js";import{INotificationService as he}from"../../../../platform/notification/common/notification.js";import{IOpenerService as fe}from"../../../../platform/opener/common/opener.js";import{ProgressLocation as xe}from"../../../../platform/progress/common/progress.js";import{ITelemetryService as q}from"../../../../platform/telemetry/common/telemetry.js";import{IThemeService as ye}from"../../../../platform/theme/common/themeService.js";import{ViewAction as Ee,ViewPane as Ve}from"../../../browser/parts/views/viewPane.js";import{IViewDescriptorService as De}from"../../../common/views.js";import{IEditorService as we,SIDE_GROUP as Te}from"../../../services/editor/common/editorService.js";import{IExtensionService as Ae}from"../../../services/extensions/common/extensions.js";import{IExtensionsWorkbenchService as Ce}from"../../extensions/common/extensions.js";import{CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED as $,CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED as Me,CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED as _e,CONTEXT_VARIABLES_FOCUSED as ke,DataBreakpointSetType as N,DebugVisualizationType as ze,IDebugService as S,VARIABLES_VIEW_ID as J}from"../common/debug.js";import{getContextForVariable as Le}from"../common/debugContext.js";import{ErrorScope as Fe,Expression as Q,Scope as Z,StackFrame as Re,Variable as x,VisualizedExpression as H,getUriForDebugMemory as Oe}from"../common/debugModel.js";import{IDebugVisualizerService as Pe}from"../common/debugVisualizers.js";import{AbstractExpressionDataSource as Be,AbstractExpressionsRenderer as ee,renderViewTree as Ne}from"./baseDebugView.js";import{ADD_TO_WATCH_ID as He,ADD_TO_WATCH_LABEL as Ke,COPY_EVALUATE_PATH_ID as We,COPY_EVALUATE_PATH_LABEL as Ue,COPY_VALUE_ID as je,COPY_VALUE_LABEL as Xe}from"./debugCommands.js";import{DebugExpressionRenderer as Ye}from"./debugExpressionRenderer.js";const K=w.$;let A=!0,C,l,M=class extends Ve{constructor(e,t,r,s,n,c,p,d,I,u,m,v,y){super(e,s,t,n,d,p,c,I,u,m,v);this.debugService=r;this.menuService=y;this.updateTreeScheduler=new le(async()=>{const E=this.debugService.getViewModel().focusedStackFrame;this.needsRefresh=!1;const U=this.tree.getInput();if(U&&this.savedViewState.set(U.getId(),this.tree.getViewState()),!E){await this.tree.setInput(null);return}const re=this.savedViewState.get(E.getId());await this.tree.setInput(E,re);const V=(await E.getScopes()).find(se=>!se.expensive);V&&this.tree.hasNode(V)&&(this.autoExpandedScopes.add(V.getId()),await this.tree.expand(V))},400)}updateTreeScheduler;needsRefresh=!1;tree;savedViewState=new Map;autoExpandedScopes=new Set;renderBody(e){super.renderBody(e),this.element.classList.add("debug-pane"),e.classList.add("debug-variables");const t=Ne(e),r=this.instantiationService.createInstance(Ye);this.tree=this.instantiationService.createInstance(be,"VariablesView",t,new Je,[this.instantiationService.createInstance(f,r),this.instantiationService.createInstance(b,r),new k,new z],this.instantiationService.createInstance($e),{accessibilityProvider:new Qe,identityProvider:{getId:n=>n.getId()},keyboardNavigationLabelProvider:{getKeyboardNavigationLabel:n=>n.name},overrideStyles:this.getLocationBasedColors().listOverrideStyles}),this._register(b.rendererOnVisualizationRange(this.debugService.getViewModel(),this.tree)),this.tree.setInput(this.debugService.getViewModel().focusedStackFrame??null),ke.bindTo(this.tree.contextKeyService),this._register(this.debugService.getViewModel().onDidFocusStackFrame(n=>{if(!this.isBodyVisible()){this.needsRefresh=!0;return}const c=n.explicit?0:void 0;this.updateTreeScheduler.schedule(c)})),this._register(this.debugService.getViewModel().onWillUpdateViews(()=>{const n=this.debugService.getViewModel().focusedStackFrame;n&&A&&n.forgetScopes(),A=!0,this.tree.updateChildren()})),this._register(this.tree),this._register(this.tree.onMouseDblClick(n=>this.onMouseDblClick(n))),this._register(this.tree.onContextMenu(async n=>await this.onContextMenu(n))),this._register(this.onDidChangeBodyVisibility(n=>{n&&this.needsRefresh&&this.updateTreeScheduler.schedule()}));let s;this._register(this.debugService.getViewModel().onDidSelectExpression(n=>{const c=n?.expression;c&&this.tree.hasNode(c)?(s=this.tree.options.horizontalScrolling,s&&this.tree.updateOptions({horizontalScrolling:!1}),this.tree.rerender(c)):!n&&s!==void 0&&(this.tree.updateOptions({horizontalScrolling:s}),s=void 0)})),this._register(this.debugService.getViewModel().onDidEvaluateLazyExpression(async n=>{n instanceof x&&this.tree.hasNode(n)&&(await this.tree.updateChildren(n,!1,!0),await this.tree.expand(n))})),this._register(this.debugService.onDidEndSession(()=>{this.savedViewState.clear(),this.autoExpandedScopes.clear()}))}layoutBody(e,t){super.layoutBody(t,e),this.tree.layout(e,t)}focus(){super.focus(),this.tree.domFocus()}collapseAll(){this.tree.collapseAll()}onMouseDblClick(e){this.canSetExpressionValue(e.element)&&this.debugService.getViewModel().setSelectedExpression(e.element,!1)}canSetExpressionValue(e){return this.debugService.getViewModel().focusedSession?e instanceof H?!!e.treeItem.canEdit:e instanceof x&&!e.presentationHint?.attributes?.includes("readOnly")&&!e.presentationHint?.lazy:!1}async onContextMenu(e){const t=e.element;if(!(!(t instanceof x)||!t.value))return Ge(this.contextKeyService,this.menuService,this.contextMenuService,T.DebugVariablesContext,e)}};M=D([a(1,Y),a(2,S),a(3,ge),a(4,me),a(5,Se),a(6,De),a(7,P),a(8,fe),a(9,ye),a(10,q),a(11,B),a(12,O)],M);async function Ge(o,i,e,t,r){const s=r.element;if(!(s instanceof x)||!s.value)return;const n=await qe(o,s),c=W(s),p=i.getMenuActions(t,n,{arg:c,shouldForwardArgs:!1}),d=[];R(p,{primary:[],secondary:d},"inline"),e.showContextMenu({getAnchor:()=>r.anchor,getActions:()=>d})}const W=o=>({sessionId:o.getSession()?.getId(),container:o.parent instanceof Q?{expression:o.parent.name}:o.parent.toDebugProtocolObject(),variable:o.toDebugProtocolObject()});async function qe(o,i){const e=i.getSession();if(!e||!e.capabilities.supportsDataBreakpoints)return _(o,i);const t=[];l=await e.dataBreakpointInfo(i.name,i.parent.reference);const r=l?.dataId,s=l?.accessTypes;if(s)for(const n of s)switch(n){case"read":t.push([_e.key,!!r]);break;case"write":t.push([$.key,!!r]);break;case"readWrite":t.push([Me.key,!!r]);break}else t.push([$.key,!!r]);return _(o,i,t)}function _(o,i,e=[]){return C=i,Le(o,i,e)}function te(o){return o instanceof Re}class $e extends Be{hasChildren(i){return i?te(i)?!0:i.hasChildren:!1}doGetChildren(i){return te(i)?i.getScopes():i.getChildren()}}class Je{getHeight(i){return 22}getTemplateId(i){return i instanceof Fe?z.ID:i instanceof Z?k.ID:i instanceof H?b.ID:f.ID}}class k{static ID="scope";get templateId(){return k.ID}renderTemplate(i){const e=w.append(i,K(".scope")),t=new ae(e);return{name:e,label:t}}renderElement(i,e,t){t.label.set(i.element.name,de(i.filterData))}disposeTemplate(i){i.label.dispose()}}class z{static ID="scopeError";get templateId(){return z.ID}renderTemplate(i){const e=w.append(i,K(".scope"));return{error:w.append(e,K(".error"))}}renderElement(i,e,t){t.error.innerText=i.element.name}disposeTemplate(){}}let b=class extends ee{constructor(e,t,r,s,n,c){super(t,r,s);this.expressionRenderer=e;this.menuService=n;this.contextKeyService=c}static ID="viz";static rendererOnVisualizationRange(e,t){return e.onDidChangeVisualization(({original:r})=>{if(!t.hasNode(r))return;const s=t.getParentElement(r);t.updateChildren(s,!1,!1)})}get templateId(){return b.ID}renderElement(e,t,r){r.elementDisposable.clear(),super.renderExpressionElement(e.element,e,r)}renderExpression(e,t,r){const s=e;let n=s.name;s.value&&typeof s.name=="string"&&(n+=":"),t.label.set(n,r,s.name),t.elementDisposable.add(this.expressionRenderer.renderValue(t.value,s,{showChanged:!1,maxValueLength:1024,colorize:!0,session:e.getSession()}))}getInputBoxOptions(e){const t=e;return{initialValue:e.value,ariaLabel:g("variableValueAriaLabel","Type new variable value"),validationOptions:{validation:()=>t.errorMessage?{content:t.errorMessage}:null},onFinish:(r,s)=>{t.errorMessage=void 0,s&&t.edit(r).then(()=>{A=!1,this.debugService.getViewModel().updateViews()})}}}renderActionBar(e,t,r){const s=t,n=s.original?_(this.contextKeyService,s.original):this.contextKeyService,c=s.original?W(s.original):void 0,p=this.menuService.getMenuActions(T.DebugVariablesContext,n,{arg:c,shouldForwardArgs:!1}),d=[];if(R(p,{primary:d,secondary:[]},"inline"),s.original){const I=new L("debugViz",g("removeVisualizer","Remove Visualizer"),j.asClassName(F.eye),!0,()=>this.debugService.getViewModel().setVisualizedExpression(s.original,void 0));I.checked=!0,d.push(I),e.domNode.style.display="initial"}e.clear(),e.context=c,e.push(d,{icon:!0,label:!1})}};b=D([a(1,S),a(2,G),a(3,B),a(4,O),a(5,P)],b);let f=class extends ee{constructor(e,t,r,s,n,c,p,d){super(c,p,d);this.expressionRenderer=e;this.menuService=t;this.contextKeyService=r;this.visualization=s;this.contextMenuService=n}static ID="variable";get templateId(){return f.ID}renderExpression(e,t,r){t.elementDisposable.add(this.expressionRenderer.renderVariable(t,e,{highlights:r,showChanged:!0}))}renderElement(e,t,r){r.elementDisposable.clear(),super.renderExpressionElement(e.element,e,r)}getInputBoxOptions(e){const t=e;return{initialValue:e.value,ariaLabel:g("variableValueAriaLabel","Type new variable value"),validationOptions:{validation:()=>t.errorMessage?{content:t.errorMessage}:null},onFinish:(r,s)=>{t.errorMessage=void 0;const n=this.debugService.getViewModel().focusedStackFrame;s&&t.value!==r&&n&&t.setVariable(r,n).then(()=>{A=!1,this.debugService.getViewModel().updateViews()})}}}renderActionBar(e,t,r){const s=t,n=_(this.contextKeyService,s),c=[],p=W(s),d=this.menuService.getMenuActions(T.DebugVariablesContext,n,{arg:p,shouldForwardArgs:!1});R(d,{primary:c,secondary:[]},"inline"),e.clear(),e.context=p,e.push(c,{icon:!0,label:!1});const I=new pe;r.elementDisposable.add(ue(()=>I.dispose(!0))),this.visualization.getApplicableFor(t,I.token).then(u=>{r.elementDisposable.add(u);const m=t instanceof H&&t.original||t,v=u.object.map(y=>new L("debugViz",y.name,y.iconClass||"debug-viz-icon",void 0,this.useVisualizer(y,m,I.token)));v.length===0||(v.length===1?e.push(v[0],{icon:!0,label:!1}):e.push(new L("debugViz",g("useVisualizer","Visualize Variable..."),j.asClassName(F.eye),void 0,()=>this.pickVisualizer(v,m,r)),{icon:!0,label:!1}))})}pickVisualizer(e,t,r){this.contextMenuService.showContextMenu({getAnchor:()=>r.actionBar.getContainer(),getActions:()=>e})}useVisualizer(e,t,r){return async()=>{const s=await e.resolve(r);if(!r.isCancellationRequested)if(s.type===ze.Command)e.execute();else{const n=await this.visualization.getVisualizedNodeFor(s.id,t);n&&this.debugService.getViewModel().setVisualizedExpression(t,n)}}}};f=D([a(1,O),a(2,P),a(3,Pe),a(4,Y),a(5,S),a(6,G),a(7,B)],f);class Qe{getWidgetAriaLabel(){return g("variablesAriaTreeLabel","Debug Variables")}getAriaLabel(i){return i instanceof Z?g("variableScopeAriaLabel","Scope {0}",i.name):i instanceof x?g({key:"variableAriaLabel",comment:["Placeholders are variable name and variable value respectivly. They should not be translated."]},"{0}, value {1}",i.name,i.value):null}}const Ze="debug.setVariable";h.registerCommand({id:Ze,handler:o=>{o.get(S).getViewModel().setSelectedExpression(C,!1)}}),h.registerCommand({metadata:{description:Xe},id:je,handler:async(o,i,e)=>{const t=o.get(S),r=o.get(X);let s="",n;i instanceof x||i instanceof Q?(s="watch",n=e||[]):(s="variables",n=C?[C]:[]);const c=t.getViewModel().focusedStackFrame,p=t.getViewModel().focusedSession;if(!c||!p||n.length===0)return;const d=p.capabilities.supportsClipboardContext?"clipboard":s,I=n.map(u=>u instanceof x?u.evaluateName||u.value:u.name);try{const u=await Promise.all(I.map(v=>p.evaluate(v,c.frameId,d))),m=ce(u).map(v=>v.body.result);m.length&&r.writeText(m.join(`
`))}catch{const m=n.map(v=>v.value);r.writeText(m.join(`
`))}}});const et="workbench.debug.viewlet.action.viewMemory",ie="ms-vscode.hexeditor",tt="hexEditor.hexedit";h.registerCommand({id:et,handler:async(o,i,e)=>{const t=o.get(S);let r,s;if("sessionId"in i){if(!i.sessionId||!i.variable.memoryReference)return;r=i.sessionId,s=i.variable.memoryReference}else{if(!i.memoryReference)return;const m=t.getViewModel().focusedSession;if(!m)return;r=m.getId(),s=i.memoryReference}const n=o.get(Ce),c=o.get(we),p=o.get(he),d=o.get(Ae),I=o.get(q);(await d.getExtension(ie)||await it(n,p))&&(I.publicLog("debug/didViewMemory",{debugType:t.getModel().getSession(r)?.configuration.type}),await c.openEditor({resource:Oe(r,s),options:{revealIfOpened:!0,override:tt}},Te))}});async function it(o,i){try{return await o.install(ie,{justification:g("viewMemory.prompt","Inspecting binary data requires this extension."),enable:!0},xe.Notification),!0}catch(e){return i.error(e),!1}}const rt="debug.breakWhenValueChanges";h.registerCommand({id:rt,handler:async o=>{const i=o.get(S);l&&await i.addDataBreakpoint({description:l.description,src:{type:N.Variable,dataId:l.dataId},canPersist:!!l.canPersist,accessTypes:l.accessTypes,accessType:"write"})}});const st="debug.breakWhenValueIsAccessed";h.registerCommand({id:st,handler:async o=>{const i=o.get(S);l&&await i.addDataBreakpoint({description:l.description,src:{type:N.Variable,dataId:l.dataId},canPersist:!!l.canPersist,accessTypes:l.accessTypes,accessType:"readWrite"})}});const nt="debug.breakWhenValueIsRead";h.registerCommand({id:nt,handler:async o=>{const i=o.get(S);l&&await i.addDataBreakpoint({description:l.description,src:{type:N.Variable,dataId:l.dataId},canPersist:!!l.canPersist,accessTypes:l.accessTypes,accessType:"read"})}}),h.registerCommand({metadata:{description:Ue},id:We,handler:async(o,i)=>{await o.get(X).writeText(i.variable.evaluateName)}}),h.registerCommand({metadata:{description:Ke},id:He,handler:async(o,i)=>{o.get(S).addWatchExpression(i.variable.evaluateName)}}),Ie(class extends Ee{constructor(){super({id:"variables.collapse",viewId:J,title:g("collapse","Collapse All"),f1:!1,icon:F.collapseAll,menu:{id:T.ViewTitle,group:"navigation",when:ve.equals("view",J)}})}runInView(o,i){i.collapseAll()}});export{rt as BREAK_WHEN_VALUE_CHANGES_ID,st as BREAK_WHEN_VALUE_IS_ACCESSED_ID,nt as BREAK_WHEN_VALUE_IS_READ_ID,Ze as SET_VARIABLE_ID,et as VIEW_MEMORY_ID,f as VariablesRenderer,M as VariablesView,b as VisualizedVariableRenderer,Ge as openContextMenuForVariableTreeElement};
