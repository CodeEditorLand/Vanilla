{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isSafari } from '../../../../base/browser/browser.js';\nimport { BrowserFeatures } from '../../../../base/browser/canIUse.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { StandardMouseEvent } from '../../../../base/browser/mouseEvent.js';\nimport { Action, IAction, Separator, SubmenuAction } from '../../../../base/common/actions.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler, timeout } from '../../../../base/common/async.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { dispose, disposeIfDisposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport * as env from '../../../../base/common/platform.js';\nimport severity from '../../../../base/common/severity.js';\nimport { noBreakWhitespace } from '../../../../base/common/strings.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ContentWidgetPositionPreference, IActiveCodeEditor, ICodeEditor, IContentWidget, IContentWidgetPosition, IEditorMouseEvent, MouseTargetType } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { IPosition } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { GlyphMarginLane, IModelDecorationOptions, IModelDecorationOverviewRulerOptions, IModelDecorationsChangeAccessor, ITextModel, OverviewRulerLane, TrackedRangeStickiness } from '../../../../editor/common/model.js';\nimport * as nls from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { registerColor } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { GutterActionsRegistry } from '../../codeEditor/browser/editorLineNumberMenu.js';\nimport { getBreakpointMessageAndIcon } from './breakpointsView.js';\nimport { BreakpointWidget } from './breakpointWidget.js';\nimport * as icons from './debugIcons.js';\nimport { BREAKPOINT_EDITOR_CONTRIBUTION_ID, BreakpointWidgetContext, CONTEXT_BREAKPOINT_WIDGET_VISIBLE, DebuggerString, IBreakpoint, IBreakpointEditorContribution, IBreakpointUpdateData, IDebugConfiguration, IDebugService, IDebugSession, State } from '../common/debug.js';\n\nconst $ = dom.$;\n\ninterface IBreakpointDecoration {\n\tdecorationId: string;\n\tbreakpoint: IBreakpoint;\n\trange: Range;\n\tinlineWidget?: InlineBreakpointWidget;\n}\n\nconst breakpointHelperDecoration: IModelDecorationOptions = {\n\tdescription: 'breakpoint-helper-decoration',\n\tglyphMarginClassName: ThemeIcon.asClassName(icons.debugBreakpointHint),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tglyphMarginHoverMessage: new MarkdownString().appendText(nls.localize('breakpointHelper', \"Click to add a breakpoint\")),\n\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges\n};\n\nexport function createBreakpointDecorations(accessor: ServicesAccessor, model: ITextModel, breakpoints: ReadonlyArray<IBreakpoint>, state: State, breakpointsActivated: boolean, showBreakpointsInOverviewRuler: boolean): { range: Range; options: IModelDecorationOptions }[] {\n\tconst result: { range: Range; options: IModelDecorationOptions }[] = [];\n\tbreakpoints.forEach((breakpoint) => {\n\t\tif (breakpoint.lineNumber > model.getLineCount()) {\n\t\t\treturn;\n\t\t}\n\t\tconst hasOtherBreakpointsOnLine = breakpoints.some(bp => bp !== breakpoint && bp.lineNumber === breakpoint.lineNumber);\n\t\tconst column = model.getLineFirstNonWhitespaceColumn(breakpoint.lineNumber);\n\t\tconst range = model.validateRange(\n\t\t\tbreakpoint.column ? new Range(breakpoint.lineNumber, breakpoint.column, breakpoint.lineNumber, breakpoint.column + 1)\n\t\t\t\t: new Range(breakpoint.lineNumber, column, breakpoint.lineNumber, column + 1) // Decoration has to have a width #20688\n\t\t);\n\n\t\tresult.push({\n\t\t\toptions: getBreakpointDecorationOptions(accessor, model, breakpoint, state, breakpointsActivated, showBreakpointsInOverviewRuler, hasOtherBreakpointsOnLine),\n\t\t\trange\n\t\t});\n\t});\n\n\treturn result;\n}\n\nfunction getBreakpointDecorationOptions(accessor: ServicesAccessor, model: ITextModel, breakpoint: IBreakpoint, state: State, breakpointsActivated: boolean, showBreakpointsInOverviewRuler: boolean, hasOtherBreakpointsOnLine: boolean): IModelDecorationOptions {\n\tconst debugService = accessor.get(IDebugService);\n\tconst languageService = accessor.get(ILanguageService);\n\tconst labelService = accessor.get(ILabelService);\n\tconst { icon, message, showAdapterUnverifiedMessage } = getBreakpointMessageAndIcon(state, breakpointsActivated, breakpoint, labelService, debugService.getModel());\n\tlet glyphMarginHoverMessage: MarkdownString | undefined;\n\n\tlet unverifiedMessage: string | undefined;\n\tif (showAdapterUnverifiedMessage) {\n\t\tlet langId: string | undefined;\n\t\tunverifiedMessage = debugService.getModel().getSessions().map(s => {\n\t\t\tconst dbg = debugService.getAdapterManager().getDebugger(s.configuration.type);\n\t\t\tconst message = dbg?.strings?.[DebuggerString.UnverifiedBreakpoints];\n\t\t\tif (message) {\n\t\t\t\tif (!langId) {\n\t\t\t\t\t// Lazily compute this, only if needed for some debug adapter\n\t\t\t\t\tlangId = languageService.guessLanguageIdByFilepathOrFirstLine(breakpoint.uri) ?? undefined;\n\t\t\t\t}\n\t\t\t\treturn langId && dbg.interestedInLanguage(langId) ? message : undefined;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t})\n\t\t\t.find(messages => !!messages);\n\t}\n\n\tif (message) {\n\t\tglyphMarginHoverMessage = new MarkdownString(undefined, { isTrusted: true, supportThemeIcons: true });\n\t\tif (breakpoint.condition || breakpoint.hitCondition) {\n\t\t\tconst languageId = model.getLanguageId();\n\t\t\tglyphMarginHoverMessage.appendCodeblock(languageId, message);\n\t\t\tif (unverifiedMessage) {\n\t\t\t\tglyphMarginHoverMessage.appendMarkdown('$(warning) ' + unverifiedMessage);\n\t\t\t}\n\t\t} else {\n\t\t\tglyphMarginHoverMessage.appendText(message);\n\t\t\tif (unverifiedMessage) {\n\t\t\t\tglyphMarginHoverMessage.appendMarkdown('\\n\\n$(warning) ' + unverifiedMessage);\n\t\t\t}\n\t\t}\n\t} else if (unverifiedMessage) {\n\t\tglyphMarginHoverMessage = new MarkdownString(undefined, { isTrusted: true, supportThemeIcons: true }).appendMarkdown(unverifiedMessage);\n\t}\n\n\tlet overviewRulerDecoration: IModelDecorationOverviewRulerOptions | null = null;\n\tif (showBreakpointsInOverviewRuler) {\n\t\toverviewRulerDecoration = {\n\t\t\tcolor: themeColorFromId(debugIconBreakpointForeground),\n\t\t\tposition: OverviewRulerLane.Left\n\t\t};\n\t}\n\n\tconst renderInline = breakpoint.column && (hasOtherBreakpointsOnLine || breakpoint.column > model.getLineFirstNonWhitespaceColumn(breakpoint.lineNumber));\n\treturn {\n\t\tdescription: 'breakpoint-decoration',\n\t\tglyphMargin: { position: GlyphMarginLane.Right },\n\t\tglyphMarginClassName: ThemeIcon.asClassName(icon),\n\t\tglyphMarginHoverMessage,\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tbefore: renderInline ? {\n\t\t\tcontent: noBreakWhitespace,\n\t\t\tinlineClassName: `debug-breakpoint-placeholder`,\n\t\t\tinlineClassNameAffectsLetterSpacing: true\n\t\t} : undefined,\n\t\toverviewRuler: overviewRulerDecoration,\n\t\tzIndex: 9999\n\t};\n}\n\ntype BreakpointsForLine = { lineNumber: number; positions: IPosition[] };\n\nasync function requestBreakpointCandidateLocations(model: ITextModel, lineNumbers: number[], session: IDebugSession): Promise<BreakpointsForLine[]> {\n\tif (!session.capabilities.supportsBreakpointLocationsRequest) {\n\t\treturn [];\n\t}\n\n\treturn await Promise.all(distinct(lineNumbers, l => l).map(async lineNumber => {\n\t\ttry {\n\t\t\treturn { lineNumber, positions: await session.breakpointsLocations(model.uri, lineNumber) };\n\t\t} catch {\n\t\t\treturn { lineNumber, positions: [] };\n\t\t}\n\t}));\n}\n\nfunction createCandidateDecorations(model: ITextModel, breakpointDecorations: IBreakpointDecoration[], lineBreakpoints: BreakpointsForLine[]): { range: Range; options: IModelDecorationOptions; breakpoint: IBreakpoint | undefined }[] {\n\tconst result: { range: Range; options: IModelDecorationOptions; breakpoint: IBreakpoint | undefined }[] = [];\n\tfor (const { positions, lineNumber } of lineBreakpoints) {\n\t\tif (positions.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Do not render candidates if there is only one, since it is already covered by the line breakpoint\n\t\tconst firstColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tconst lastColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n\t\tpositions.forEach(p => {\n\t\t\tconst range = new Range(p.lineNumber, p.column, p.lineNumber, p.column + 1);\n\t\t\tif ((p.column <= firstColumn && !breakpointDecorations.some(bp => bp.range.startColumn > firstColumn && bp.range.startLineNumber === p.lineNumber)) || p.column > lastColumn) {\n\t\t\t\t// Do not render candidates on the start of the line if there's no other breakpoint on the line.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst breakpointAtPosition = breakpointDecorations.find(bpd => bpd.range.equalsRange(range));\n\t\t\tif (breakpointAtPosition && breakpointAtPosition.inlineWidget) {\n\t\t\t\t// Space already occupied, do not render candidate.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult.push({\n\t\t\t\trange,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'breakpoint-placeholder-decoration',\n\t\t\t\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\t\t\tbefore: breakpointAtPosition ? undefined : {\n\t\t\t\t\t\tcontent: noBreakWhitespace,\n\t\t\t\t\t\tinlineClassName: `debug-breakpoint-placeholder`,\n\t\t\t\t\t\tinlineClassNameAffectsLetterSpacing: true\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbreakpoint: breakpointAtPosition ? breakpointAtPosition.breakpoint : undefined\n\t\t\t});\n\t\t});\n\t}\n\n\treturn result;\n}\n\nexport class BreakpointEditorContribution implements IBreakpointEditorContribution {\n\n\tprivate breakpointHintDecoration: string | null = null;\n\tprivate breakpointWidget: BreakpointWidget | undefined;\n\tprivate breakpointWidgetVisible!: IContextKey<boolean>;\n\tprivate toDispose: IDisposable[] = [];\n\tprivate ignoreDecorationsChangedEvent = false;\n\tprivate ignoreBreakpointsChangeEvent = false;\n\tprivate breakpointDecorations: IBreakpointDecoration[] = [];\n\tprivate candidateDecorations: { decorationId: string; inlineWidget: InlineBreakpointWidget }[] = [];\n\tprivate setDecorationsScheduler!: RunOnceScheduler;\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService\n\t) {\n\t\tthis.breakpointWidgetVisible = CONTEXT_BREAKPOINT_WIDGET_VISIBLE.bindTo(contextKeyService);\n\t\tthis.setDecorationsScheduler = new RunOnceScheduler(() => this.setDecorations(), 30);\n\t\tthis.setDecorationsScheduler.schedule();\n\t\tthis.registerListeners();\n\t}\n\n\t/**\n\t * Returns context menu actions at the line number if breakpoints can be\n\t * set. This is used by the {@link TestingDecorations} to allow breakpoint\n\t * setting on lines where breakpoint \"run\" actions are present.\n\t */\n\tpublic getContextMenuActionsAtPosition(lineNumber: number, model: ITextModel) {\n\t\tif (!this.debugService.getAdapterManager().hasEnabledDebuggers()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!this.debugService.canSetBreakpointsIn(model)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst breakpoints = this.debugService.getModel().getBreakpoints({ lineNumber, uri: model.uri });\n\t\treturn this.getContextMenuActions(breakpoints, model.uri, lineNumber);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(this.editor.onMouseDown(async (e: IEditorMouseEvent) => {\n\t\t\tif (!this.debugService.getAdapterManager().hasEnabledDebuggers()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = this.editor.getModel();\n\t\t\tif (!e.target.position\n\t\t\t\t|| !model\n\t\t\t\t|| e.target.type !== MouseTargetType.GUTTER_GLYPH_MARGIN\n\t\t\t\t|| e.target.detail.isAfterLines\n\t\t\t\t|| !this.marginFreeFromNonDebugDecorations(e.target.position.lineNumber)\n\t\t\t\t// don't return early if there's a breakpoint\n\t\t\t\t&& !e.target.element?.className.includes('breakpoint')\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst canSetBreakpoints = this.debugService.canSetBreakpointsIn(model);\n\t\t\tconst lineNumber = e.target.position.lineNumber;\n\t\t\tconst uri = model.uri;\n\n\t\t\tif (e.event.rightButton || (env.isMacintosh && e.event.leftButton && e.event.ctrlKey)) {\n\t\t\t\t// handled by editor gutter context menu\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconst breakpoints = this.debugService.getModel().getBreakpoints({ uri, lineNumber });\n\n\t\t\t\tif (breakpoints.length) {\n\t\t\t\t\tconst isShiftPressed = e.event.shiftKey;\n\t\t\t\t\tconst enabled = breakpoints.some(bp => bp.enabled);\n\n\t\t\t\t\tif (isShiftPressed) {\n\t\t\t\t\t\tbreakpoints.forEach(bp => this.debugService.enableOrDisableBreakpoints(!enabled, bp));\n\t\t\t\t\t} else if (!env.isLinux && breakpoints.some(bp => !!bp.condition || !!bp.logMessage || !!bp.hitCondition || !!bp.triggeredBy)) {\n\t\t\t\t\t\t// Show the dialog if there is a potential condition to be accidently lost.\n\t\t\t\t\t\t// Do not show dialog on linux due to electron issue freezing the mouse #50026\n\t\t\t\t\t\tconst logPoint = breakpoints.every(bp => !!bp.logMessage);\n\t\t\t\t\t\tconst breakpointType = logPoint ? nls.localize('logPoint', \"Logpoint\") : nls.localize('breakpoint', \"Breakpoint\");\n\n\t\t\t\t\t\tconst disabledBreakpointDialogMessage = nls.localize(\n\t\t\t\t\t\t\t'breakpointHasConditionDisabled',\n\t\t\t\t\t\t\t\"This {0} has a {1} that will get lost on remove. Consider enabling the {0} instead.\",\n\t\t\t\t\t\t\tbreakpointType.toLowerCase(),\n\t\t\t\t\t\t\tlogPoint ? nls.localize('message', \"message\") : nls.localize('condition', \"condition\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst enabledBreakpointDialogMessage = nls.localize(\n\t\t\t\t\t\t\t'breakpointHasConditionEnabled',\n\t\t\t\t\t\t\t\"This {0} has a {1} that will get lost on remove. Consider disabling the {0} instead.\",\n\t\t\t\t\t\t\tbreakpointType.toLowerCase(),\n\t\t\t\t\t\t\tlogPoint ? nls.localize('message', \"message\") : nls.localize('condition', \"condition\")\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tawait this.dialogService.prompt({\n\t\t\t\t\t\t\ttype: severity.Info,\n\t\t\t\t\t\t\tmessage: enabled ? enabledBreakpointDialogMessage : disabledBreakpointDialogMessage,\n\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: nls.localize({ key: 'removeLogPoint', comment: ['&& denotes a mnemonic'] }, \"&&Remove {0}\", breakpointType),\n\t\t\t\t\t\t\t\t\trun: () => breakpoints.forEach(bp => this.debugService.removeBreakpoints(bp.getId()))\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: nls.localize('disableLogPoint', \"{0} {1}\", enabled ? nls.localize({ key: 'disable', comment: ['&& denotes a mnemonic'] }, \"&&Disable\") : nls.localize({ key: 'enable', comment: ['&& denotes a mnemonic'] }, \"&&Enable\"), breakpointType),\n\t\t\t\t\t\t\t\t\trun: () => breakpoints.forEach(bp => this.debugService.enableOrDisableBreakpoints(!enabled, bp))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tcancelButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!enabled) {\n\t\t\t\t\t\t\tbreakpoints.forEach(bp => this.debugService.enableOrDisableBreakpoints(!enabled, bp));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreakpoints.forEach(bp => this.debugService.removeBreakpoints(bp.getId()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (canSetBreakpoints) {\n\t\t\t\t\tif (e.event.middleButton) {\n\t\t\t\t\t\tconst action = this.configurationService.getValue<IDebugConfiguration>('debug').gutterMiddleClickAction;\n\t\t\t\t\t\tif (action !== 'none') {\n\t\t\t\t\t\t\tlet context: BreakpointWidgetContext;\n\t\t\t\t\t\t\tswitch (action) {\n\t\t\t\t\t\t\t\tcase 'logpoint':\n\t\t\t\t\t\t\t\t\tcontext = BreakpointWidgetContext.LOG_MESSAGE;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'conditionalBreakpoint':\n\t\t\t\t\t\t\t\t\tcontext = BreakpointWidgetContext.CONDITION;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'triggeredBreakpoint':\n\t\t\t\t\t\t\t\t\tcontext = BreakpointWidgetContext.TRIGGER_POINT;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.showBreakpointWidget(lineNumber, undefined, context);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.debugService.addBreakpoints(uri, [{ lineNumber }]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tif (!(BrowserFeatures.pointerEvents && isSafari)) {\n\t\t\t/**\n\t\t\t * We disable the hover feature for Safari on iOS as\n\t\t\t * 1. Browser hover events are handled specially by the system (it treats first click as hover if there is `:hover` css registered). Below hover behavior will confuse users with inconsistent expeirence.\n\t\t\t * 2. When users click on line numbers, the breakpoint hint displays immediately, however it doesn't create the breakpoint unless users click on the left gutter. On a touch screen, it's hard to click on that small area.\n\t\t\t */\n\t\t\tthis.toDispose.push(this.editor.onMouseMove((e: IEditorMouseEvent) => {\n\t\t\t\tif (!this.debugService.getAdapterManager().hasEnabledDebuggers()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet showBreakpointHintAtLineNumber = -1;\n\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\tif (model && e.target.position && (e.target.type === MouseTargetType.GUTTER_GLYPH_MARGIN || e.target.type === MouseTargetType.GUTTER_LINE_NUMBERS) && this.debugService.canSetBreakpointsIn(model) &&\n\t\t\t\t\tthis.marginFreeFromNonDebugDecorations(e.target.position.lineNumber)) {\n\t\t\t\t\tconst data = e.target.detail;\n\t\t\t\t\tif (!data.isAfterLines) {\n\t\t\t\t\t\tshowBreakpointHintAtLineNumber = e.target.position.lineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.ensureBreakpointHintDecoration(showBreakpointHintAtLineNumber);\n\t\t\t}));\n\t\t\tthis.toDispose.push(this.editor.onMouseLeave(() => {\n\t\t\t\tthis.ensureBreakpointHintDecoration(-1);\n\t\t\t}));\n\t\t}\n\n\n\t\tthis.toDispose.push(this.editor.onDidChangeModel(async () => {\n\t\t\tthis.closeBreakpointWidget();\n\t\t\tawait this.setDecorations();\n\t\t}));\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(() => {\n\t\t\tif (!this.ignoreBreakpointsChangeEvent && !this.setDecorationsScheduler.isScheduled()) {\n\t\t\t\tthis.setDecorationsScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.debugService.onDidChangeState(() => {\n\t\t\t// We need to update breakpoint decorations when state changes since the top stack frame and breakpoint decoration might change\n\t\t\tif (!this.setDecorationsScheduler.isScheduled()) {\n\t\t\t\tthis.setDecorationsScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.editor.onDidChangeModelDecorations(() => this.onModelDecorationsChanged()));\n\t\tthis.toDispose.push(this.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration('debug.showBreakpointsInOverviewRuler') || e.affectsConfiguration('debug.showInlineBreakpointCandidates')) {\n\t\t\t\tawait this.setDecorations();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate getContextMenuActions(breakpoints: ReadonlyArray<IBreakpoint>, uri: URI, lineNumber: number, column?: number): IAction[] {\n\t\tconst actions: IAction[] = [];\n\n\t\tif (breakpoints.length === 1) {\n\t\t\tconst breakpointType = breakpoints[0].logMessage ? nls.localize('logPoint', \"Logpoint\") : nls.localize('breakpoint', \"Breakpoint\");\n\t\t\tactions.push(new Action('debug.removeBreakpoint', nls.localize('removeBreakpoint', \"Remove {0}\", breakpointType), undefined, true, async () => {\n\t\t\t\tawait this.debugService.removeBreakpoints(breakpoints[0].getId());\n\t\t\t}));\n\t\t\tactions.push(new Action(\n\t\t\t\t'workbench.debug.action.editBreakpointAction',\n\t\t\t\tnls.localize('editBreakpoint', \"Edit {0}...\", breakpointType),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => Promise.resolve(this.showBreakpointWidget(breakpoints[0].lineNumber, breakpoints[0].column))\n\t\t\t));\n\n\t\t\tactions.push(new Action(\n\t\t\t\t`workbench.debug.viewlet.action.toggleBreakpoint`,\n\t\t\t\tbreakpoints[0].enabled ? nls.localize('disableBreakpoint', \"Disable {0}\", breakpointType) : nls.localize('enableBreakpoint', \"Enable {0}\", breakpointType),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => this.debugService.enableOrDisableBreakpoints(!breakpoints[0].enabled, breakpoints[0])\n\t\t\t));\n\t\t} else if (breakpoints.length > 1) {\n\t\t\tconst sorted = breakpoints.slice().sort((first, second) => (first.column && second.column) ? first.column - second.column : 1);\n\t\t\tactions.push(new SubmenuAction('debug.removeBreakpoints', nls.localize('removeBreakpoints', \"Remove Breakpoints\"), sorted.map(bp => new Action(\n\t\t\t\t'removeInlineBreakpoint',\n\t\t\t\tbp.column ? nls.localize('removeInlineBreakpointOnColumn', \"Remove Inline Breakpoint on Column {0}\", bp.column) : nls.localize('removeLineBreakpoint', \"Remove Line Breakpoint\"),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => this.debugService.removeBreakpoints(bp.getId())\n\t\t\t))));\n\n\t\t\tactions.push(new SubmenuAction('debug.editBreakpoints', nls.localize('editBreakpoints', \"Edit Breakpoints\"), sorted.map(bp =>\n\t\t\t\tnew Action('editBreakpoint',\n\t\t\t\t\tbp.column ? nls.localize('editInlineBreakpointOnColumn', \"Edit Inline Breakpoint on Column {0}\", bp.column) : nls.localize('editLineBreakpoint', \"Edit Line Breakpoint\"),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() => Promise.resolve(this.showBreakpointWidget(bp.lineNumber, bp.column))\n\t\t\t\t)\n\t\t\t)));\n\n\t\t\tactions.push(new SubmenuAction('debug.enableDisableBreakpoints', nls.localize('enableDisableBreakpoints', \"Enable/Disable Breakpoints\"), sorted.map(bp => new Action(\n\t\t\t\tbp.enabled ? 'disableColumnBreakpoint' : 'enableColumnBreakpoint',\n\t\t\t\tbp.enabled ? (bp.column ? nls.localize('disableInlineColumnBreakpoint', \"Disable Inline Breakpoint on Column {0}\", bp.column) : nls.localize('disableBreakpointOnLine', \"Disable Line Breakpoint\"))\n\t\t\t\t\t: (bp.column ? nls.localize('enableBreakpoints', \"Enable Inline Breakpoint on Column {0}\", bp.column) : nls.localize('enableBreakpointOnLine', \"Enable Line Breakpoint\")),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => this.debugService.enableOrDisableBreakpoints(!bp.enabled, bp)\n\t\t\t))));\n\t\t} else {\n\t\t\tactions.push(new Action(\n\t\t\t\t'addBreakpoint',\n\t\t\t\tnls.localize('addBreakpoint', \"Add Breakpoint\"),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => this.debugService.addBreakpoints(uri, [{ lineNumber, column }])\n\t\t\t));\n\t\t\tactions.push(new Action(\n\t\t\t\t'addConditionalBreakpoint',\n\t\t\t\tnls.localize('addConditionalBreakpoint', \"Add Conditional Breakpoint...\"),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => Promise.resolve(this.showBreakpointWidget(lineNumber, column, BreakpointWidgetContext.CONDITION))\n\t\t\t));\n\t\t\tactions.push(new Action(\n\t\t\t\t'addLogPoint',\n\t\t\t\tnls.localize('addLogPoint', \"Add Logpoint...\"),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => Promise.resolve(this.showBreakpointWidget(lineNumber, column, BreakpointWidgetContext.LOG_MESSAGE))\n\t\t\t));\n\t\t\tactions.push(new Action(\n\t\t\t\t'addTriggeredBreakpoint',\n\t\t\t\tnls.localize('addTriggeredBreakpoint', \"Add Triggered Breakpoint...\"),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => Promise.resolve(this.showBreakpointWidget(lineNumber, column, BreakpointWidgetContext.TRIGGER_POINT))\n\t\t\t));\n\t\t}\n\n\t\tif (this.debugService.state === State.Stopped) {\n\t\t\tactions.push(new Separator());\n\t\t\tactions.push(new Action(\n\t\t\t\t'runToLine',\n\t\t\t\tnls.localize('runToLine', \"Run to Line\"),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t\t() => this.debugService.runTo(uri, lineNumber).catch(onUnexpectedError)\n\t\t\t));\n\t\t}\n\n\t\treturn actions;\n\t}\n\n\tprivate marginFreeFromNonDebugDecorations(line: number): boolean {\n\t\tconst decorations = this.editor.getLineDecorations(line);\n\t\tif (decorations) {\n\t\t\tfor (const { options } of decorations) {\n\t\t\t\tconst clz = options.glyphMarginClassName;\n\t\t\t\tif (!clz) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst hasSomeActionableCodicon = !(clz.includes('codicon-') || clz.startsWith('coverage-deco-')) || clz.includes('codicon-testing-') || clz.includes('codicon-merge-') || clz.includes('codicon-arrow-') || clz.includes('codicon-loading') || clz.includes('codicon-fold') || clz.includes('codicon-gutter-lightbulb') || clz.includes('codicon-lightbulb-sparkle');\n\t\t\t\tif (hasSomeActionableCodicon) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate ensureBreakpointHintDecoration(showBreakpointHintAtLineNumber: number): void {\n\t\tthis.editor.changeDecorations((accessor) => {\n\t\t\tif (this.breakpointHintDecoration) {\n\t\t\t\taccessor.removeDecoration(this.breakpointHintDecoration);\n\t\t\t\tthis.breakpointHintDecoration = null;\n\t\t\t}\n\t\t\tif (showBreakpointHintAtLineNumber !== -1) {\n\t\t\t\tthis.breakpointHintDecoration = accessor.addDecoration({\n\t\t\t\t\tstartLineNumber: showBreakpointHintAtLineNumber,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: showBreakpointHintAtLineNumber,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t}, breakpointHelperDecoration\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async setDecorations(): Promise<void> {\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst setCandidateDecorations = (changeAccessor: IModelDecorationsChangeAccessor, desiredCandidatePositions: BreakpointsForLine[]) => {\n\t\t\tconst desiredCandidateDecorations = createCandidateDecorations(model, this.breakpointDecorations, desiredCandidatePositions);\n\t\t\tconst candidateDecorationIds = changeAccessor.deltaDecorations(this.candidateDecorations.map(c => c.decorationId), desiredCandidateDecorations);\n\t\t\tthis.candidateDecorations.forEach(candidate => {\n\t\t\t\tcandidate.inlineWidget.dispose();\n\t\t\t});\n\t\t\tthis.candidateDecorations = candidateDecorationIds.map((decorationId, index) => {\n\t\t\t\tconst candidate = desiredCandidateDecorations[index];\n\t\t\t\t// Candidate decoration has a breakpoint attached when a breakpoint is already at that location and we did not yet set a decoration there\n\t\t\t\t// In practice this happens for the first breakpoint that was set on a line\n\t\t\t\t// We could have also rendered this first decoration as part of desiredBreakpointDecorations however at that moment we have no location information\n\t\t\t\tconst icon = candidate.breakpoint ? getBreakpointMessageAndIcon(this.debugService.state, this.debugService.getModel().areBreakpointsActivated(), candidate.breakpoint, this.labelService, this.debugService.getModel()).icon : icons.breakpoint.disabled;\n\t\t\t\tconst contextMenuActions = () => this.getContextMenuActions(candidate.breakpoint ? [candidate.breakpoint] : [], activeCodeEditor.getModel().uri, candidate.range.startLineNumber, candidate.range.startColumn);\n\t\t\t\tconst inlineWidget = new InlineBreakpointWidget(activeCodeEditor, decorationId, ThemeIcon.asClassName(icon), candidate.breakpoint, this.debugService, this.contextMenuService, contextMenuActions);\n\n\t\t\t\treturn {\n\t\t\t\t\tdecorationId,\n\t\t\t\t\tinlineWidget\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\n\t\tconst activeCodeEditor = this.editor;\n\t\tconst model = activeCodeEditor.getModel();\n\t\tconst breakpoints = this.debugService.getModel().getBreakpoints({ uri: model.uri });\n\t\tconst debugSettings = this.configurationService.getValue<IDebugConfiguration>('debug');\n\t\tconst desiredBreakpointDecorations = this.instantiationService.invokeFunction(accessor => createBreakpointDecorations(accessor, model, breakpoints, this.debugService.state, this.debugService.getModel().areBreakpointsActivated(), debugSettings.showBreakpointsInOverviewRuler));\n\n\t\t// try to set breakpoint location candidates in the same changeDecorations()\n\t\t// call to avoid flickering, if the DA responds reasonably quickly.\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tconst desiredCandidatePositions = debugSettings.showInlineBreakpointCandidates && session ? requestBreakpointCandidateLocations(this.editor.getModel(), desiredBreakpointDecorations.map(bp => bp.range.startLineNumber), session) : Promise.resolve([]);\n\t\tconst desiredCandidatePositionsRaced = await Promise.race([desiredCandidatePositions, timeout(500).then(() => undefined)]);\n\t\tif (desiredCandidatePositionsRaced === undefined) { // the timeout resolved first\n\t\t\tdesiredCandidatePositions.then(v => activeCodeEditor.changeDecorations(d => setCandidateDecorations(d, v)));\n\t\t}\n\n\t\ttry {\n\t\t\tthis.ignoreDecorationsChangedEvent = true;\n\n\t\t\t// Set breakpoint decorations\n\t\t\tactiveCodeEditor.changeDecorations((changeAccessor) => {\n\t\t\t\tconst decorationIds = changeAccessor.deltaDecorations(this.breakpointDecorations.map(bpd => bpd.decorationId), desiredBreakpointDecorations);\n\t\t\t\tthis.breakpointDecorations.forEach(bpd => {\n\t\t\t\t\tbpd.inlineWidget?.dispose();\n\t\t\t\t});\n\t\t\t\tthis.breakpointDecorations = decorationIds.map((decorationId, index) => {\n\t\t\t\t\tlet inlineWidget: InlineBreakpointWidget | undefined = undefined;\n\t\t\t\t\tconst breakpoint = breakpoints[index];\n\t\t\t\t\tif (desiredBreakpointDecorations[index].options.before) {\n\t\t\t\t\t\tconst contextMenuActions = () => this.getContextMenuActions([breakpoint], activeCodeEditor.getModel().uri, breakpoint.lineNumber, breakpoint.column);\n\t\t\t\t\t\tinlineWidget = new InlineBreakpointWidget(activeCodeEditor, decorationId, desiredBreakpointDecorations[index].options.glyphMarginClassName, breakpoint, this.debugService, this.contextMenuService, contextMenuActions);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdecorationId,\n\t\t\t\t\t\tbreakpoint,\n\t\t\t\t\t\trange: desiredBreakpointDecorations[index].range,\n\t\t\t\t\t\tinlineWidget\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tif (desiredCandidatePositionsRaced) {\n\t\t\t\t\tsetCandidateDecorations(changeAccessor, desiredCandidatePositionsRaced);\n\t\t\t\t}\n\t\t\t});\n\t\t} finally {\n\t\t\tthis.ignoreDecorationsChangedEvent = false;\n\t\t}\n\n\t\tfor (const d of this.breakpointDecorations) {\n\t\t\tif (d.inlineWidget) {\n\t\t\t\tthis.editor.layoutContentWidget(d.inlineWidget);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onModelDecorationsChanged(): Promise<void> {\n\t\tif (this.breakpointDecorations.length === 0 || this.ignoreDecorationsChangedEvent || !this.editor.hasModel()) {\n\t\t\t// I have no decorations\n\t\t\treturn;\n\t\t}\n\t\tlet somethingChanged = false;\n\t\tconst model = this.editor.getModel();\n\t\tthis.breakpointDecorations.forEach(breakpointDecoration => {\n\t\t\tif (somethingChanged) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst newBreakpointRange = model.getDecorationRange(breakpointDecoration.decorationId);\n\t\t\tif (newBreakpointRange && (!breakpointDecoration.range.equalsRange(newBreakpointRange))) {\n\t\t\t\tsomethingChanged = true;\n\t\t\t\tbreakpointDecoration.range = newBreakpointRange;\n\t\t\t}\n\t\t});\n\t\tif (!somethingChanged) {\n\t\t\t// nothing to do, my decorations did not change.\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = new Map<string, IBreakpointUpdateData>();\n\t\tfor (let i = 0, len = this.breakpointDecorations.length; i < len; i++) {\n\t\t\tconst breakpointDecoration = this.breakpointDecorations[i];\n\t\t\tconst decorationRange = model.getDecorationRange(breakpointDecoration.decorationId);\n\t\t\t// check if the line got deleted.\n\t\t\tif (decorationRange) {\n\t\t\t\t// since we know it is collapsed, it cannot grow to multiple lines\n\t\t\t\tif (breakpointDecoration.breakpoint) {\n\t\t\t\t\tdata.set(breakpointDecoration.breakpoint.getId(), {\n\t\t\t\t\t\tlineNumber: decorationRange.startLineNumber,\n\t\t\t\t\t\tcolumn: breakpointDecoration.breakpoint.column ? decorationRange.startColumn : undefined,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.ignoreBreakpointsChangeEvent = true;\n\t\t\tawait this.debugService.updateBreakpoints(model.uri, data, true);\n\t\t} finally {\n\t\t\tthis.ignoreBreakpointsChangeEvent = false;\n\t\t}\n\t}\n\n\t// breakpoint widget\n\tshowBreakpointWidget(lineNumber: number, column: number | undefined, context?: BreakpointWidgetContext): void {\n\t\tthis.breakpointWidget?.dispose();\n\n\t\tthis.breakpointWidget = this.instantiationService.createInstance(BreakpointWidget, this.editor, lineNumber, column, context);\n\t\tthis.breakpointWidget.show({ lineNumber, column: 1 });\n\t\tthis.breakpointWidgetVisible.set(true);\n\t}\n\n\tcloseBreakpointWidget(): void {\n\t\tif (this.breakpointWidget) {\n\t\t\tthis.breakpointWidget.dispose();\n\t\t\tthis.breakpointWidget = undefined;\n\t\t\tthis.breakpointWidgetVisible.reset();\n\t\t\tthis.editor.focus();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.breakpointWidget?.dispose();\n\t\tthis.editor.removeDecorations(this.breakpointDecorations.map(bpd => bpd.decorationId));\n\t\tdispose(this.toDispose);\n\t}\n}\n\nGutterActionsRegistry.registerGutterActionsGenerator(({ lineNumber, editor, accessor }, result) => {\n\tconst model = editor.getModel();\n\tconst debugService = accessor.get(IDebugService);\n\tif (!model || !debugService.getAdapterManager().hasEnabledDebuggers() || !debugService.canSetBreakpointsIn(model)) {\n\t\treturn;\n\t}\n\n\tconst breakpointEditorContribution = editor.getContribution<IBreakpointEditorContribution>(BREAKPOINT_EDITOR_CONTRIBUTION_ID);\n\tif (!breakpointEditorContribution) {\n\t\treturn;\n\t}\n\n\tconst actions = breakpointEditorContribution.getContextMenuActionsAtPosition(lineNumber, model);\n\n\tfor (const action of actions) {\n\t\tresult.push(action, '2_debug');\n\t}\n});\n\nclass InlineBreakpointWidget implements IContentWidget, IDisposable {\n\n\t// editor.IContentWidget.allowEditorOverflow\n\tallowEditorOverflow = false;\n\tsuppressMouseDown = true;\n\n\tprivate domNode!: HTMLElement;\n\tprivate range: Range | null;\n\tprivate toDispose: IDisposable[] = [];\n\n\tconstructor(\n\t\tprivate readonly editor: IActiveCodeEditor,\n\t\tprivate readonly decorationId: string,\n\t\tcssClass: string | null | undefined,\n\t\tprivate readonly breakpoint: IBreakpoint | undefined,\n\t\tprivate readonly debugService: IDebugService,\n\t\tprivate readonly contextMenuService: IContextMenuService,\n\t\tprivate readonly getContextMenuActions: () => IAction[]\n\t) {\n\t\tthis.range = this.editor.getModel().getDecorationRange(decorationId);\n\t\tthis.toDispose.push(this.editor.onDidChangeModelDecorations(() => {\n\t\t\tconst model = this.editor.getModel();\n\t\t\tconst range = model.getDecorationRange(this.decorationId);\n\t\t\tif (this.range && !this.range.equalsRange(range)) {\n\t\t\t\tthis.range = range;\n\t\t\t\tthis.editor.layoutContentWidget(this);\n\t\t\t}\n\t\t}));\n\t\tthis.create(cssClass);\n\n\t\tthis.editor.addContentWidget(this);\n\t\tthis.editor.layoutContentWidget(this);\n\t}\n\n\tprivate create(cssClass: string | null | undefined): void {\n\t\tthis.domNode = $('.inline-breakpoint-widget');\n\t\tif (cssClass) {\n\t\t\tthis.domNode.classList.add(...cssClass.split(' '));\n\t\t}\n\t\tthis.toDispose.push(dom.addDisposableListener(this.domNode, dom.EventType.CLICK, async e => {\n\t\t\tswitch (this.breakpoint?.enabled) {\n\t\t\t\tcase undefined:\n\t\t\t\t\tawait this.debugService.addBreakpoints(this.editor.getModel().uri, [{ lineNumber: this.range!.startLineNumber, column: this.range!.startColumn }]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase true:\n\t\t\t\t\tawait this.debugService.removeBreakpoints(this.breakpoint.getId());\n\t\t\t\t\tbreak;\n\t\t\t\tcase false:\n\t\t\t\t\tthis.debugService.enableOrDisableBreakpoints(true, this.breakpoint);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(dom.addDisposableListener(this.domNode, dom.EventType.CONTEXT_MENU, e => {\n\t\t\tconst event = new StandardMouseEvent(dom.getWindow(this.domNode), e);\n\t\t\tconst actions = this.getContextMenuActions();\n\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\tgetAnchor: () => event,\n\t\t\t\tgetActions: () => actions,\n\t\t\t\tgetActionsContext: () => this.breakpoint,\n\t\t\t\tonHide: () => disposeIfDisposable(actions)\n\t\t\t});\n\t\t}));\n\n\t\tconst updateSize = () => {\n\t\t\tconst lineHeight = this.editor.getOption(EditorOption.lineHeight);\n\t\t\tthis.domNode.style.height = `${lineHeight}px`;\n\t\t\tthis.domNode.style.width = `${Math.ceil(0.8 * lineHeight)}px`;\n\t\t\tthis.domNode.style.marginLeft = `4px`;\n\t\t};\n\t\tupdateSize();\n\n\t\tthis.toDispose.push(this.editor.onDidChangeConfiguration(c => {\n\t\t\tif (c.hasChanged(EditorOption.fontSize) || c.hasChanged(EditorOption.lineHeight)) {\n\t\t\t\tupdateSize();\n\t\t\t}\n\t\t}));\n\t}\n\n\t@memoize\n\tgetId(): string {\n\t\treturn generateUuid();\n\t}\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetPosition(): IContentWidgetPosition | null {\n\t\tif (!this.range) {\n\t\t\treturn null;\n\t\t}\n\t\t// Workaround: since the content widget can not be placed before the first column we need to force the left position\n\t\tthis.domNode.classList.toggle('line-start', this.range.startColumn === 1);\n\n\t\treturn {\n\t\t\tposition: { lineNumber: this.range.startLineNumber, column: this.range.startColumn - 1 },\n\t\t\tpreference: [ContentWidgetPositionPreference.EXACT]\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tthis.editor.removeContentWidget(this);\n\t\tdispose(this.toDispose);\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst scope = '.monaco-editor .glyph-margin-widgets, .monaco-workbench .debug-breakpoints, .monaco-workbench .disassembly-view, .monaco-editor .contentWidgets';\n\tconst debugIconBreakpointColor = theme.getColor(debugIconBreakpointForeground);\n\tif (debugIconBreakpointColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${icons.allBreakpoints.map(b => `${ThemeIcon.asCSSSelector(b.regular)}`).join(',\\n\t\t')},\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugBreakpointUnsupported)},\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugBreakpointHint)}:not([class*='codicon-debug-breakpoint']):not([class*='codicon-debug-stackframe']),\n\t\t\t${ThemeIcon.asCSSSelector(icons.breakpoint.regular)}${ThemeIcon.asCSSSelector(icons.debugStackframeFocused)}::after,\n\t\t\t${ThemeIcon.asCSSSelector(icons.breakpoint.regular)}${ThemeIcon.asCSSSelector(icons.debugStackframe)}::after {\n\t\t\t\tcolor: ${debugIconBreakpointColor} !important;\n\t\t\t}\n\t\t}`);\n\n\t\tcollector.addRule(`${scope} {\n\t\t\t${ThemeIcon.asCSSSelector(icons.breakpoint.pending)} {\n\t\t\t\tcolor: ${debugIconBreakpointColor} !important;\n\t\t\t\tfont-size: 12px !important;\n\t\t\t}\n\t\t}`);\n\t}\n\n\tconst debugIconBreakpointDisabledColor = theme.getColor(debugIconBreakpointDisabledForeground);\n\tif (debugIconBreakpointDisabledColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${icons.allBreakpoints.map(b => ThemeIcon.asCSSSelector(b.disabled)).join(',\\n\t\t')} {\n\t\t\t\tcolor: ${debugIconBreakpointDisabledColor};\n\t\t\t}\n\t\t}`);\n\t}\n\n\tconst debugIconBreakpointUnverifiedColor = theme.getColor(debugIconBreakpointUnverifiedForeground);\n\tif (debugIconBreakpointUnverifiedColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${icons.allBreakpoints.map(b => ThemeIcon.asCSSSelector(b.unverified)).join(',\\n\t\t')} {\n\t\t\t\tcolor: ${debugIconBreakpointUnverifiedColor};\n\t\t\t}\n\t\t}`);\n\t}\n\n\tconst debugIconBreakpointCurrentStackframeForegroundColor = theme.getColor(debugIconBreakpointCurrentStackframeForeground);\n\tif (debugIconBreakpointCurrentStackframeForegroundColor) {\n\t\tcollector.addRule(`\n\t\t.monaco-editor .debug-top-stack-frame-column {\n\t\t\tcolor: ${debugIconBreakpointCurrentStackframeForegroundColor} !important;\n\t\t}\n\t\t${scope} {\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugStackframe)} {\n\t\t\t\tcolor: ${debugIconBreakpointCurrentStackframeForegroundColor} !important;\n\t\t\t}\n\t\t}\n\t\t`);\n\t}\n\n\tconst debugIconBreakpointStackframeFocusedColor = theme.getColor(debugIconBreakpointStackframeForeground);\n\tif (debugIconBreakpointStackframeFocusedColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugStackframeFocused)} {\n\t\t\t\tcolor: ${debugIconBreakpointStackframeFocusedColor} !important;\n\t\t\t}\n\t\t}`);\n\t}\n});\n\nexport const debugIconBreakpointForeground = registerColor('debugIcon.breakpointForeground', '#E51400', nls.localize('debugIcon.breakpointForeground', 'Icon color for breakpoints.'));\nconst debugIconBreakpointDisabledForeground = registerColor('debugIcon.breakpointDisabledForeground', '#848484', nls.localize('debugIcon.breakpointDisabledForeground', 'Icon color for disabled breakpoints.'));\nconst debugIconBreakpointUnverifiedForeground = registerColor('debugIcon.breakpointUnverifiedForeground', '#848484', nls.localize('debugIcon.breakpointUnverifiedForeground', 'Icon color for unverified breakpoints.'));\nconst debugIconBreakpointCurrentStackframeForeground = registerColor('debugIcon.breakpointCurrentStackframeForeground', { dark: '#FFCC00', light: '#BE8700', hcDark: '#FFCC00', hcLight: '#BE8700' }, nls.localize('debugIcon.breakpointCurrentStackframeForeground', 'Icon color for the current breakpoint stack frame.'));\nconst debugIconBreakpointStackframeForeground = registerColor('debugIcon.breakpointStackframeForeground', '#89D185', nls.localize('debugIcon.breakpointStackframeForeground', 'Icon color for all breakpoint stack frames.'));\n"],
  "mappings": "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",
  "names": ["message", "desiredCandidatePositions"]
}
