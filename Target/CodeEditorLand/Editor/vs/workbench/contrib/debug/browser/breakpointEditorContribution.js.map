{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isSafari } from \"../../../../base/browser/browser.js\";\nimport { BrowserFeatures } from \"../../../../base/browser/canIUse.js\";\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport { StandardMouseEvent } from \"../../../../base/browser/mouseEvent.js\";\nimport {\n\tAction,\n\ttype IAction,\n\tSeparator,\n\tSubmenuAction,\n} from \"../../../../base/common/actions.js\";\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport { RunOnceScheduler, timeout } from \"../../../../base/common/async.js\";\nimport { memoize } from \"../../../../base/common/decorators.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { MarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport {\n\ttype IDisposable,\n\tdispose,\n\tdisposeIfDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as env from \"../../../../base/common/platform.js\";\nimport severity from \"../../../../base/common/severity.js\";\nimport { noBreakWhitespace } from \"../../../../base/common/strings.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport {\n\tContentWidgetPositionPreference,\n\ttype IActiveCodeEditor,\n\ttype ICodeEditor,\n\ttype IContentWidget,\n\ttype IContentWidgetPosition,\n\ttype IEditorMouseEvent,\n\tMouseTargetType,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { EditorOption } from \"../../../../editor/common/config/editorOptions.js\";\nimport type { IPosition } from \"../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport {\n\tGlyphMarginLane,\n\ttype IModelDecorationOptions,\n\ttype IModelDecorationOverviewRulerOptions,\n\ttype IModelDecorationsChangeAccessor,\n\ttype ITextModel,\n\tOverviewRulerLane,\n\tTrackedRangeStickiness,\n} from \"../../../../editor/common/model.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { registerColor } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\tregisterThemingParticipant,\n\tthemeColorFromId,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport { GutterActionsRegistry } from \"../../codeEditor/browser/editorLineNumberMenu.js\";\nimport {\n\tBREAKPOINT_EDITOR_CONTRIBUTION_ID,\n\tBreakpointWidgetContext,\n\tCONTEXT_BREAKPOINT_WIDGET_VISIBLE,\n\tDebuggerString,\n\ttype IBreakpoint,\n\ttype IBreakpointEditorContribution,\n\ttype IBreakpointUpdateData,\n\ttype IDebugConfiguration,\n\tIDebugService,\n\ttype IDebugSession,\n\tState,\n} from \"../common/debug.js\";\nimport { BreakpointWidget } from \"./breakpointWidget.js\";\nimport { getBreakpointMessageAndIcon } from \"./breakpointsView.js\";\nimport * as icons from \"./debugIcons.js\";\n\nconst $ = dom.$;\n\ninterface IBreakpointDecoration {\n\tdecorationId: string;\n\tbreakpoint: IBreakpoint;\n\trange: Range;\n\tinlineWidget?: InlineBreakpointWidget;\n}\n\nconst breakpointHelperDecoration: IModelDecorationOptions = {\n\tdescription: \"breakpoint-helper-decoration\",\n\tglyphMarginClassName: ThemeIcon.asClassName(icons.debugBreakpointHint),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tglyphMarginHoverMessage: new MarkdownString().appendText(\n\t\tnls.localize(\"breakpointHelper\", \"Click to add a breakpoint\"),\n\t),\n\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n};\n\nexport function createBreakpointDecorations(\n\taccessor: ServicesAccessor,\n\tmodel: ITextModel,\n\tbreakpoints: ReadonlyArray<IBreakpoint>,\n\tstate: State,\n\tbreakpointsActivated: boolean,\n\tshowBreakpointsInOverviewRuler: boolean,\n): { range: Range; options: IModelDecorationOptions }[] {\n\tconst result: { range: Range; options: IModelDecorationOptions }[] = [];\n\tbreakpoints.forEach((breakpoint) => {\n\t\tif (breakpoint.lineNumber > model.getLineCount()) {\n\t\t\treturn;\n\t\t}\n\t\tconst hasOtherBreakpointsOnLine = breakpoints.some(\n\t\t\t(bp) =>\n\t\t\t\tbp !== breakpoint && bp.lineNumber === breakpoint.lineNumber,\n\t\t);\n\t\tconst column = model.getLineFirstNonWhitespaceColumn(\n\t\t\tbreakpoint.lineNumber,\n\t\t);\n\t\tconst range = model.validateRange(\n\t\t\tbreakpoint.column\n\t\t\t\t? new Range(\n\t\t\t\t\t\tbreakpoint.lineNumber,\n\t\t\t\t\t\tbreakpoint.column,\n\t\t\t\t\t\tbreakpoint.lineNumber,\n\t\t\t\t\t\tbreakpoint.column + 1,\n\t\t\t\t\t)\n\t\t\t\t: new Range(\n\t\t\t\t\t\tbreakpoint.lineNumber,\n\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\tbreakpoint.lineNumber,\n\t\t\t\t\t\tcolumn + 1,\n\t\t\t\t\t), // Decoration has to have a width #20688\n\t\t);\n\n\t\tresult.push({\n\t\t\toptions: getBreakpointDecorationOptions(\n\t\t\t\taccessor,\n\t\t\t\tmodel,\n\t\t\t\tbreakpoint,\n\t\t\t\tstate,\n\t\t\t\tbreakpointsActivated,\n\t\t\t\tshowBreakpointsInOverviewRuler,\n\t\t\t\thasOtherBreakpointsOnLine,\n\t\t\t),\n\t\t\trange,\n\t\t});\n\t});\n\n\treturn result;\n}\n\nfunction getBreakpointDecorationOptions(\n\taccessor: ServicesAccessor,\n\tmodel: ITextModel,\n\tbreakpoint: IBreakpoint,\n\tstate: State,\n\tbreakpointsActivated: boolean,\n\tshowBreakpointsInOverviewRuler: boolean,\n\thasOtherBreakpointsOnLine: boolean,\n): IModelDecorationOptions {\n\tconst debugService = accessor.get(IDebugService);\n\tconst languageService = accessor.get(ILanguageService);\n\tconst labelService = accessor.get(ILabelService);\n\tconst { icon, message, showAdapterUnverifiedMessage } =\n\t\tgetBreakpointMessageAndIcon(\n\t\t\tstate,\n\t\t\tbreakpointsActivated,\n\t\t\tbreakpoint,\n\t\t\tlabelService,\n\t\t\tdebugService.getModel(),\n\t\t);\n\tlet glyphMarginHoverMessage: MarkdownString | undefined;\n\n\tlet unverifiedMessage: string | undefined;\n\tif (showAdapterUnverifiedMessage) {\n\t\tlet langId: string | undefined;\n\t\tunverifiedMessage = debugService\n\t\t\t.getModel()\n\t\t\t.getSessions()\n\t\t\t.map((s) => {\n\t\t\t\tconst dbg = debugService\n\t\t\t\t\t.getAdapterManager()\n\t\t\t\t\t.getDebugger(s.configuration.type);\n\t\t\t\tconst message =\n\t\t\t\t\tdbg?.strings?.[DebuggerString.UnverifiedBreakpoints];\n\t\t\t\tif (message) {\n\t\t\t\t\tif (!langId) {\n\t\t\t\t\t\t// Lazily compute this, only if needed for some debug adapter\n\t\t\t\t\t\tlangId =\n\t\t\t\t\t\t\tlanguageService.guessLanguageIdByFilepathOrFirstLine(\n\t\t\t\t\t\t\t\tbreakpoint.uri,\n\t\t\t\t\t\t\t) ?? undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn langId && dbg.interestedInLanguage(langId)\n\t\t\t\t\t\t? message\n\t\t\t\t\t\t: undefined;\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.find((messages) => !!messages);\n\t}\n\n\tif (message) {\n\t\tglyphMarginHoverMessage = new MarkdownString(undefined, {\n\t\t\tisTrusted: true,\n\t\t\tsupportThemeIcons: true,\n\t\t});\n\t\tif (breakpoint.condition || breakpoint.hitCondition) {\n\t\t\tconst languageId = model.getLanguageId();\n\t\t\tglyphMarginHoverMessage.appendCodeblock(languageId, message);\n\t\t\tif (unverifiedMessage) {\n\t\t\t\tglyphMarginHoverMessage.appendMarkdown(\n\t\t\t\t\t\"$(warning) \" + unverifiedMessage,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tglyphMarginHoverMessage.appendText(message);\n\t\t\tif (unverifiedMessage) {\n\t\t\t\tglyphMarginHoverMessage.appendMarkdown(\n\t\t\t\t\t\"\\n\\n$(warning) \" + unverifiedMessage,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t} else if (unverifiedMessage) {\n\t\tglyphMarginHoverMessage = new MarkdownString(undefined, {\n\t\t\tisTrusted: true,\n\t\t\tsupportThemeIcons: true,\n\t\t}).appendMarkdown(unverifiedMessage);\n\t}\n\n\tlet overviewRulerDecoration: IModelDecorationOverviewRulerOptions | null =\n\t\tnull;\n\tif (showBreakpointsInOverviewRuler) {\n\t\toverviewRulerDecoration = {\n\t\t\tcolor: themeColorFromId(debugIconBreakpointForeground),\n\t\t\tposition: OverviewRulerLane.Left,\n\t\t};\n\t}\n\n\tconst renderInline =\n\t\tbreakpoint.column &&\n\t\t(hasOtherBreakpointsOnLine ||\n\t\t\tbreakpoint.column >\n\t\t\t\tmodel.getLineFirstNonWhitespaceColumn(breakpoint.lineNumber));\n\treturn {\n\t\tdescription: \"breakpoint-decoration\",\n\t\tglyphMargin: { position: GlyphMarginLane.Right },\n\t\tglyphMarginClassName: ThemeIcon.asClassName(icon),\n\t\tglyphMarginHoverMessage,\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tbefore: renderInline\n\t\t\t? {\n\t\t\t\t\tcontent: noBreakWhitespace,\n\t\t\t\t\tinlineClassName: `debug-breakpoint-placeholder`,\n\t\t\t\t\tinlineClassNameAffectsLetterSpacing: true,\n\t\t\t\t}\n\t\t\t: undefined,\n\t\toverviewRuler: overviewRulerDecoration,\n\t\tzIndex: 9999,\n\t};\n}\n\ntype BreakpointsForLine = { lineNumber: number; positions: IPosition[] };\n\nasync function requestBreakpointCandidateLocations(\n\tmodel: ITextModel,\n\tlineNumbers: number[],\n\tsession: IDebugSession,\n): Promise<BreakpointsForLine[]> {\n\tif (!session.capabilities.supportsBreakpointLocationsRequest) {\n\t\treturn [];\n\t}\n\n\treturn await Promise.all(\n\t\tdistinct(lineNumbers, (l) => l).map(async (lineNumber) => {\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tlineNumber,\n\t\t\t\t\tpositions: await session.breakpointsLocations(\n\t\t\t\t\t\tmodel.uri,\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t} catch {\n\t\t\t\treturn { lineNumber, positions: [] };\n\t\t\t}\n\t\t}),\n\t);\n}\n\nfunction createCandidateDecorations(\n\tmodel: ITextModel,\n\tbreakpointDecorations: IBreakpointDecoration[],\n\tlineBreakpoints: BreakpointsForLine[],\n): {\n\trange: Range;\n\toptions: IModelDecorationOptions;\n\tbreakpoint: IBreakpoint | undefined;\n}[] {\n\tconst result: {\n\t\trange: Range;\n\t\toptions: IModelDecorationOptions;\n\t\tbreakpoint: IBreakpoint | undefined;\n\t}[] = [];\n\tfor (const { positions, lineNumber } of lineBreakpoints) {\n\t\tif (positions.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Do not render candidates if there is only one, since it is already covered by the line breakpoint\n\t\tconst firstColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tconst lastColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n\t\tpositions.forEach((p) => {\n\t\t\tconst range = new Range(\n\t\t\t\tp.lineNumber,\n\t\t\t\tp.column,\n\t\t\t\tp.lineNumber,\n\t\t\t\tp.column + 1,\n\t\t\t);\n\t\t\tif (\n\t\t\t\t(p.column <= firstColumn &&\n\t\t\t\t\t!breakpointDecorations.some(\n\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\tbp.range.startColumn > firstColumn &&\n\t\t\t\t\t\t\tbp.range.startLineNumber === p.lineNumber,\n\t\t\t\t\t)) ||\n\t\t\t\tp.column > lastColumn\n\t\t\t) {\n\t\t\t\t// Do not render candidates on the start of the line if there's no other breakpoint on the line.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst breakpointAtPosition = breakpointDecorations.find((bpd) =>\n\t\t\t\tbpd.range.equalsRange(range),\n\t\t\t);\n\t\t\tif (breakpointAtPosition && breakpointAtPosition.inlineWidget) {\n\t\t\t\t// Space already occupied, do not render candidate.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult.push({\n\t\t\t\trange,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: \"breakpoint-placeholder-decoration\",\n\t\t\t\t\tstickiness:\n\t\t\t\t\t\tTrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\t\t\tbefore: breakpointAtPosition\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tcontent: noBreakWhitespace,\n\t\t\t\t\t\t\t\tinlineClassName: `debug-breakpoint-placeholder`,\n\t\t\t\t\t\t\t\tinlineClassNameAffectsLetterSpacing: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbreakpoint: breakpointAtPosition\n\t\t\t\t\t? breakpointAtPosition.breakpoint\n\t\t\t\t\t: undefined,\n\t\t\t});\n\t\t});\n\t}\n\n\treturn result;\n}\n\nexport class BreakpointEditorContribution\n\timplements IBreakpointEditorContribution\n{\n\tprivate breakpointHintDecoration: string | null = null;\n\tprivate breakpointWidget: BreakpointWidget | undefined;\n\tprivate breakpointWidgetVisible!: IContextKey<boolean>;\n\tprivate toDispose: IDisposable[] = [];\n\tprivate ignoreDecorationsChangedEvent = false;\n\tprivate ignoreBreakpointsChangeEvent = false;\n\tprivate breakpointDecorations: IBreakpointDecoration[] = [];\n\tprivate candidateDecorations: {\n\t\tdecorationId: string;\n\t\tinlineWidget: InlineBreakpointWidget;\n\t}[] = [];\n\tprivate setDecorationsScheduler!: RunOnceScheduler;\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IContextMenuService\n\t\tprivate readonly contextMenuService: IContextMenuService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t) {\n\t\tthis.breakpointWidgetVisible =\n\t\t\tCONTEXT_BREAKPOINT_WIDGET_VISIBLE.bindTo(contextKeyService);\n\t\tthis.setDecorationsScheduler = new RunOnceScheduler(\n\t\t\t() => this.setDecorations(),\n\t\t\t30,\n\t\t);\n\t\tthis.setDecorationsScheduler.schedule();\n\t\tthis.registerListeners();\n\t}\n\n\t/**\n\t * Returns context menu actions at the line number if breakpoints can be\n\t * set. This is used by the {@link TestingDecorations} to allow breakpoint\n\t * setting on lines where breakpoint \"run\" actions are present.\n\t */\n\tpublic getContextMenuActionsAtPosition(\n\t\tlineNumber: number,\n\t\tmodel: ITextModel,\n\t) {\n\t\tif (!this.debugService.getAdapterManager().hasEnabledDebuggers()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!this.debugService.canSetBreakpointsIn(model)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst breakpoints = this.debugService\n\t\t\t.getModel()\n\t\t\t.getBreakpoints({ lineNumber, uri: model.uri });\n\t\treturn this.getContextMenuActions(breakpoints, model.uri, lineNumber);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onMouseDown(async (e: IEditorMouseEvent) => {\n\t\t\t\tif (\n\t\t\t\t\t!this.debugService.getAdapterManager().hasEnabledDebuggers()\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\tif (\n\t\t\t\t\t!e.target.position ||\n\t\t\t\t\t!model ||\n\t\t\t\t\te.target.type !== MouseTargetType.GUTTER_GLYPH_MARGIN ||\n\t\t\t\t\te.target.detail.isAfterLines ||\n\t\t\t\t\t(!this.marginFreeFromNonDebugDecorations(\n\t\t\t\t\t\te.target.position.lineNumber,\n\t\t\t\t\t) &&\n\t\t\t\t\t\t// don't return early if there's a breakpoint\n\t\t\t\t\t\t!e.target.element?.className.includes(\"breakpoint\"))\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst canSetBreakpoints =\n\t\t\t\t\tthis.debugService.canSetBreakpointsIn(model);\n\t\t\t\tconst lineNumber = e.target.position.lineNumber;\n\t\t\t\tconst uri = model.uri;\n\n\t\t\t\tif (\n\t\t\t\t\te.event.rightButton ||\n\t\t\t\t\t(env.isMacintosh && e.event.leftButton && e.event.ctrlKey)\n\t\t\t\t) {\n\t\t\t\t\t// handled by editor gutter context menu\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tconst breakpoints = this.debugService\n\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t.getBreakpoints({ uri, lineNumber });\n\n\t\t\t\t\tif (breakpoints.length) {\n\t\t\t\t\t\tconst isShiftPressed = e.event.shiftKey;\n\t\t\t\t\t\tconst enabled = breakpoints.some((bp) => bp.enabled);\n\n\t\t\t\t\t\tif (isShiftPressed) {\n\t\t\t\t\t\t\tbreakpoints.forEach((bp) =>\n\t\t\t\t\t\t\t\tthis.debugService.enableOrDisableBreakpoints(\n\t\t\t\t\t\t\t\t\t!enabled,\n\t\t\t\t\t\t\t\t\tbp,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t!env.isLinux &&\n\t\t\t\t\t\t\tbreakpoints.some(\n\t\t\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\t\t\t!!bp.condition ||\n\t\t\t\t\t\t\t\t\t!!bp.logMessage ||\n\t\t\t\t\t\t\t\t\t!!bp.hitCondition ||\n\t\t\t\t\t\t\t\t\t!!bp.triggeredBy,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Show the dialog if there is a potential condition to be accidently lost.\n\t\t\t\t\t\t\t// Do not show dialog on linux due to electron issue freezing the mouse #50026\n\t\t\t\t\t\t\tconst logPoint = breakpoints.every(\n\t\t\t\t\t\t\t\t(bp) => !!bp.logMessage,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst breakpointType = logPoint\n\t\t\t\t\t\t\t\t? nls.localize(\"logPoint\", \"Logpoint\")\n\t\t\t\t\t\t\t\t: nls.localize(\"breakpoint\", \"Breakpoint\");\n\n\t\t\t\t\t\t\tconst disabledBreakpointDialogMessage =\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"breakpointHasConditionDisabled\",\n\t\t\t\t\t\t\t\t\t\"This {0} has a {1} that will get lost on remove. Consider enabling the {0} instead.\",\n\t\t\t\t\t\t\t\t\tbreakpointType.toLowerCase(),\n\t\t\t\t\t\t\t\t\tlogPoint\n\t\t\t\t\t\t\t\t\t\t? nls.localize(\"message\", \"message\")\n\t\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"condition\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"condition\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst enabledBreakpointDialogMessage = nls.localize(\n\t\t\t\t\t\t\t\t\"breakpointHasConditionEnabled\",\n\t\t\t\t\t\t\t\t\"This {0} has a {1} that will get lost on remove. Consider disabling the {0} instead.\",\n\t\t\t\t\t\t\t\tbreakpointType.toLowerCase(),\n\t\t\t\t\t\t\t\tlogPoint\n\t\t\t\t\t\t\t\t\t? nls.localize(\"message\", \"message\")\n\t\t\t\t\t\t\t\t\t: nls.localize(\"condition\", \"condition\"),\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait this.dialogService.prompt({\n\t\t\t\t\t\t\t\ttype: severity.Info,\n\t\t\t\t\t\t\t\tmessage: enabled\n\t\t\t\t\t\t\t\t\t? enabledBreakpointDialogMessage\n\t\t\t\t\t\t\t\t\t: disabledBreakpointDialogMessage,\n\t\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tkey: \"removeLogPoint\",\n\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"&& denotes a mnemonic\",\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"&&Remove {0}\",\n\t\t\t\t\t\t\t\t\t\t\tbreakpointType,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\t\t\t\t\tbreakpoints.forEach((bp) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.debugService.removeBreakpoints(\n\t\t\t\t\t\t\t\t\t\t\t\t\tbp.getId(),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"disableLogPoint\",\n\t\t\t\t\t\t\t\t\t\t\t\"{0} {1}\",\n\t\t\t\t\t\t\t\t\t\t\tenabled\n\t\t\t\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey: \"disable\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&& denotes a mnemonic\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&&Disable\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey: \"enable\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&& denotes a mnemonic\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&&Enable\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tbreakpointType,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\t\t\t\t\tbreakpoints.forEach((bp) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.debugService.enableOrDisableBreakpoints(\n\t\t\t\t\t\t\t\t\t\t\t\t\t!enabled,\n\t\t\t\t\t\t\t\t\t\t\t\t\tbp,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tcancelButton: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (enabled) {\n\t\t\t\t\t\t\tbreakpoints.forEach((bp) =>\n\t\t\t\t\t\t\t\tthis.debugService.removeBreakpoints(bp.getId()),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreakpoints.forEach((bp) =>\n\t\t\t\t\t\t\t\tthis.debugService.enableOrDisableBreakpoints(\n\t\t\t\t\t\t\t\t\t!enabled,\n\t\t\t\t\t\t\t\t\tbp,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (canSetBreakpoints) {\n\t\t\t\t\t\tif (e.event.middleButton) {\n\t\t\t\t\t\t\tconst action =\n\t\t\t\t\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\t\t\t\t\"debug\",\n\t\t\t\t\t\t\t\t).gutterMiddleClickAction;\n\t\t\t\t\t\t\tif (action !== \"none\") {\n\t\t\t\t\t\t\t\tlet context: BreakpointWidgetContext;\n\t\t\t\t\t\t\t\tswitch (action) {\n\t\t\t\t\t\t\t\t\tcase \"logpoint\":\n\t\t\t\t\t\t\t\t\t\tcontext =\n\t\t\t\t\t\t\t\t\t\t\tBreakpointWidgetContext.LOG_MESSAGE;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"conditionalBreakpoint\":\n\t\t\t\t\t\t\t\t\t\tcontext =\n\t\t\t\t\t\t\t\t\t\t\tBreakpointWidgetContext.CONDITION;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"triggeredBreakpoint\":\n\t\t\t\t\t\t\t\t\t\tcontext =\n\t\t\t\t\t\t\t\t\t\t\tBreakpointWidgetContext.TRIGGER_POINT;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.showBreakpointWidget(\n\t\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.debugService.addBreakpoints(uri, [\n\t\t\t\t\t\t\t\t{ lineNumber },\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (!(BrowserFeatures.pointerEvents && isSafari)) {\n\t\t\t/**\n\t\t\t * We disable the hover feature for Safari on iOS as\n\t\t\t * 1. Browser hover events are handled specially by the system (it treats first click as hover if there is `:hover` css registered). Below hover behavior will confuse users with inconsistent expeirence.\n\t\t\t * 2. When users click on line numbers, the breakpoint hint displays immediately, however it doesn't create the breakpoint unless users click on the left gutter. On a touch screen, it's hard to click on that small area.\n\t\t\t */\n\t\t\tthis.toDispose.push(\n\t\t\t\tthis.editor.onMouseMove((e: IEditorMouseEvent) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.debugService\n\t\t\t\t\t\t\t.getAdapterManager()\n\t\t\t\t\t\t\t.hasEnabledDebuggers()\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet showBreakpointHintAtLineNumber = -1;\n\t\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\t\tif (\n\t\t\t\t\t\tmodel &&\n\t\t\t\t\t\te.target.position &&\n\t\t\t\t\t\t(e.target.type ===\n\t\t\t\t\t\t\tMouseTargetType.GUTTER_GLYPH_MARGIN ||\n\t\t\t\t\t\t\te.target.type ===\n\t\t\t\t\t\t\t\tMouseTargetType.GUTTER_LINE_NUMBERS) &&\n\t\t\t\t\t\tthis.debugService.canSetBreakpointsIn(model) &&\n\t\t\t\t\t\tthis.marginFreeFromNonDebugDecorations(\n\t\t\t\t\t\t\te.target.position.lineNumber,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst data = e.target.detail;\n\t\t\t\t\t\tif (!data.isAfterLines) {\n\t\t\t\t\t\t\tshowBreakpointHintAtLineNumber =\n\t\t\t\t\t\t\t\te.target.position.lineNumber;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.ensureBreakpointHintDecoration(\n\t\t\t\t\t\tshowBreakpointHintAtLineNumber,\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.toDispose.push(\n\t\t\t\tthis.editor.onMouseLeave(() => {\n\t\t\t\t\tthis.ensureBreakpointHintDecoration(-1);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onDidChangeModel(async () => {\n\t\t\t\tthis.closeBreakpointWidget();\n\t\t\t\tawait this.setDecorations();\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService.getModel().onDidChangeBreakpoints(() => {\n\t\t\t\tif (\n\t\t\t\t\t!this.ignoreBreakpointsChangeEvent &&\n\t\t\t\t\t!this.setDecorationsScheduler.isScheduled()\n\t\t\t\t) {\n\t\t\t\t\tthis.setDecorationsScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService.onDidChangeState(() => {\n\t\t\t\t// We need to update breakpoint decorations when state changes since the top stack frame and breakpoint decoration might change\n\t\t\t\tif (!this.setDecorationsScheduler.isScheduled()) {\n\t\t\t\t\tthis.setDecorationsScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onDidChangeModelDecorations(() =>\n\t\t\t\tthis.onModelDecorationsChanged(),\n\t\t\t),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\"debug.showBreakpointsInOverviewRuler\",\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\"debug.showInlineBreakpointCandidates\",\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tawait this.setDecorations();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate getContextMenuActions(\n\t\tbreakpoints: ReadonlyArray<IBreakpoint>,\n\t\turi: URI,\n\t\tlineNumber: number,\n\t\tcolumn?: number,\n\t): IAction[] {\n\t\tconst actions: IAction[] = [];\n\n\t\tif (breakpoints.length === 1) {\n\t\t\tconst breakpointType = breakpoints[0].logMessage\n\t\t\t\t? nls.localize(\"logPoint\", \"Logpoint\")\n\t\t\t\t: nls.localize(\"breakpoint\", \"Breakpoint\");\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"debug.removeBreakpoint\",\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"removeBreakpoint\",\n\t\t\t\t\t\t\"Remove {0}\",\n\t\t\t\t\t\tbreakpointType,\n\t\t\t\t\t),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\tawait this.debugService.removeBreakpoints(\n\t\t\t\t\t\t\tbreakpoints[0].getId(),\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"workbench.debug.action.editBreakpointAction\",\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"editBreakpoint\",\n\t\t\t\t\t\t\"Edit {0}...\",\n\t\t\t\t\t\tbreakpointType,\n\t\t\t\t\t),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t\tthis.showBreakpointWidget(\n\t\t\t\t\t\t\t\tbreakpoints[0].lineNumber,\n\t\t\t\t\t\t\t\tbreakpoints[0].column,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t`workbench.debug.viewlet.action.toggleBreakpoint`,\n\t\t\t\t\tbreakpoints[0].enabled\n\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\"disableBreakpoint\",\n\t\t\t\t\t\t\t\t\"Disable {0}\",\n\t\t\t\t\t\t\t\tbreakpointType,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\"enableBreakpoint\",\n\t\t\t\t\t\t\t\t\"Enable {0}\",\n\t\t\t\t\t\t\t\tbreakpointType,\n\t\t\t\t\t\t\t),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.debugService.enableOrDisableBreakpoints(\n\t\t\t\t\t\t\t!breakpoints[0].enabled,\n\t\t\t\t\t\t\tbreakpoints[0],\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (breakpoints.length > 1) {\n\t\t\tconst sorted = breakpoints\n\t\t\t\t.slice()\n\t\t\t\t.sort((first, second) =>\n\t\t\t\t\tfirst.column && second.column\n\t\t\t\t\t\t? first.column - second.column\n\t\t\t\t\t\t: 1,\n\t\t\t\t);\n\t\t\tactions.push(\n\t\t\t\tnew SubmenuAction(\n\t\t\t\t\t\"debug.removeBreakpoints\",\n\t\t\t\t\tnls.localize(\"removeBreakpoints\", \"Remove Breakpoints\"),\n\t\t\t\t\tsorted.map(\n\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\t\"removeInlineBreakpoint\",\n\t\t\t\t\t\t\t\tbp.column\n\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"removeInlineBreakpointOnColumn\",\n\t\t\t\t\t\t\t\t\t\t\t\"Remove Inline Breakpoint on Column {0}\",\n\t\t\t\t\t\t\t\t\t\t\tbp.column,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"removeLineBreakpoint\",\n\t\t\t\t\t\t\t\t\t\t\t\"Remove Line Breakpoint\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\tthis.debugService.removeBreakpoints(\n\t\t\t\t\t\t\t\t\t\tbp.getId(),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tactions.push(\n\t\t\t\tnew SubmenuAction(\n\t\t\t\t\t\"debug.editBreakpoints\",\n\t\t\t\t\tnls.localize(\"editBreakpoints\", \"Edit Breakpoints\"),\n\t\t\t\t\tsorted.map(\n\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\t\"editBreakpoint\",\n\t\t\t\t\t\t\t\tbp.column\n\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"editInlineBreakpointOnColumn\",\n\t\t\t\t\t\t\t\t\t\t\t\"Edit Inline Breakpoint on Column {0}\",\n\t\t\t\t\t\t\t\t\t\t\tbp.column,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"editLineBreakpoint\",\n\t\t\t\t\t\t\t\t\t\t\t\"Edit Line Breakpoint\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t\t\t\t\tthis.showBreakpointWidget(\n\t\t\t\t\t\t\t\t\t\t\tbp.lineNumber,\n\t\t\t\t\t\t\t\t\t\t\tbp.column,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tactions.push(\n\t\t\t\tnew SubmenuAction(\n\t\t\t\t\t\"debug.enableDisableBreakpoints\",\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"enableDisableBreakpoints\",\n\t\t\t\t\t\t\"Enable/Disable Breakpoints\",\n\t\t\t\t\t),\n\t\t\t\t\tsorted.map(\n\t\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\tnew Action(\n\t\t\t\t\t\t\t\tbp.enabled\n\t\t\t\t\t\t\t\t\t? \"disableColumnBreakpoint\"\n\t\t\t\t\t\t\t\t\t: \"enableColumnBreakpoint\",\n\t\t\t\t\t\t\t\tbp.enabled\n\t\t\t\t\t\t\t\t\t? bp.column\n\t\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"disableInlineColumnBreakpoint\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Disable Inline Breakpoint on Column {0}\",\n\t\t\t\t\t\t\t\t\t\t\t\tbp.column,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"disableBreakpointOnLine\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Disable Line Breakpoint\",\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: bp.column\n\t\t\t\t\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"enableBreakpoints\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Enable Inline Breakpoint on Column {0}\",\n\t\t\t\t\t\t\t\t\t\t\t\tbp.column,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"enableBreakpointOnLine\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Enable Line Breakpoint\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\tthis.debugService.enableOrDisableBreakpoints(\n\t\t\t\t\t\t\t\t\t\t!bp.enabled,\n\t\t\t\t\t\t\t\t\t\tbp,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"addBreakpoint\",\n\t\t\t\t\tnls.localize(\"addBreakpoint\", \"Add Breakpoint\"),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.debugService.addBreakpoints(uri, [\n\t\t\t\t\t\t\t{ lineNumber, column },\n\t\t\t\t\t\t]),\n\t\t\t\t),\n\t\t\t);\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"addConditionalBreakpoint\",\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"addConditionalBreakpoint\",\n\t\t\t\t\t\t\"Add Conditional Breakpoint...\",\n\t\t\t\t\t),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t\tthis.showBreakpointWidget(\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\t\t\tBreakpointWidgetContext.CONDITION,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"addLogPoint\",\n\t\t\t\t\tnls.localize(\"addLogPoint\", \"Add Logpoint...\"),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t\tthis.showBreakpointWidget(\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\t\t\tBreakpointWidgetContext.LOG_MESSAGE,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"addTriggeredBreakpoint\",\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"addTriggeredBreakpoint\",\n\t\t\t\t\t\t\"Add Triggered Breakpoint...\",\n\t\t\t\t\t),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t\tthis.showBreakpointWidget(\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tcolumn,\n\t\t\t\t\t\t\t\tBreakpointWidgetContext.TRIGGER_POINT,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (this.debugService.state === State.Stopped) {\n\t\t\tactions.push(new Separator());\n\t\t\tactions.push(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"runToLine\",\n\t\t\t\t\tnls.localize(\"runToLine\", \"Run to Line\"),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.debugService\n\t\t\t\t\t\t\t.runTo(uri, lineNumber)\n\t\t\t\t\t\t\t.catch(onUnexpectedError),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn actions;\n\t}\n\n\tprivate marginFreeFromNonDebugDecorations(line: number): boolean {\n\t\tconst decorations = this.editor.getLineDecorations(line);\n\t\tif (decorations) {\n\t\t\tfor (const { options } of decorations) {\n\t\t\t\tconst clz = options.glyphMarginClassName;\n\t\t\t\tif (!clz) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst hasSomeActionableCodicon =\n\t\t\t\t\t!(\n\t\t\t\t\t\tclz.includes(\"codicon-\") ||\n\t\t\t\t\t\tclz.startsWith(\"coverage-deco-\")\n\t\t\t\t\t) ||\n\t\t\t\t\tclz.includes(\"codicon-testing-\") ||\n\t\t\t\t\tclz.includes(\"codicon-merge-\") ||\n\t\t\t\t\tclz.includes(\"codicon-arrow-\") ||\n\t\t\t\t\tclz.includes(\"codicon-loading\") ||\n\t\t\t\t\tclz.includes(\"codicon-fold\") ||\n\t\t\t\t\tclz.includes(\"codicon-gutter-lightbulb\") ||\n\t\t\t\t\tclz.includes(\"codicon-lightbulb-sparkle\");\n\t\t\t\tif (hasSomeActionableCodicon) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate ensureBreakpointHintDecoration(\n\t\tshowBreakpointHintAtLineNumber: number,\n\t): void {\n\t\tthis.editor.changeDecorations((accessor) => {\n\t\t\tif (this.breakpointHintDecoration) {\n\t\t\t\taccessor.removeDecoration(this.breakpointHintDecoration);\n\t\t\t\tthis.breakpointHintDecoration = null;\n\t\t\t}\n\t\t\tif (showBreakpointHintAtLineNumber !== -1) {\n\t\t\t\tthis.breakpointHintDecoration = accessor.addDecoration(\n\t\t\t\t\t{\n\t\t\t\t\t\tstartLineNumber: showBreakpointHintAtLineNumber,\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tendLineNumber: showBreakpointHintAtLineNumber,\n\t\t\t\t\t\tendColumn: 1,\n\t\t\t\t\t},\n\t\t\t\t\tbreakpointHelperDecoration,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async setDecorations(): Promise<void> {\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst setCandidateDecorations = (\n\t\t\tchangeAccessor: IModelDecorationsChangeAccessor,\n\t\t\tdesiredCandidatePositions: BreakpointsForLine[],\n\t\t) => {\n\t\t\tconst desiredCandidateDecorations = createCandidateDecorations(\n\t\t\t\tmodel,\n\t\t\t\tthis.breakpointDecorations,\n\t\t\t\tdesiredCandidatePositions,\n\t\t\t);\n\t\t\tconst candidateDecorationIds = changeAccessor.deltaDecorations(\n\t\t\t\tthis.candidateDecorations.map((c) => c.decorationId),\n\t\t\t\tdesiredCandidateDecorations,\n\t\t\t);\n\t\t\tthis.candidateDecorations.forEach((candidate) => {\n\t\t\t\tcandidate.inlineWidget.dispose();\n\t\t\t});\n\t\t\tthis.candidateDecorations = candidateDecorationIds.map(\n\t\t\t\t(decorationId, index) => {\n\t\t\t\t\tconst candidate = desiredCandidateDecorations[index];\n\t\t\t\t\t// Candidate decoration has a breakpoint attached when a breakpoint is already at that location and we did not yet set a decoration there\n\t\t\t\t\t// In practice this happens for the first breakpoint that was set on a line\n\t\t\t\t\t// We could have also rendered this first decoration as part of desiredBreakpointDecorations however at that moment we have no location information\n\t\t\t\t\tconst icon = candidate.breakpoint\n\t\t\t\t\t\t? getBreakpointMessageAndIcon(\n\t\t\t\t\t\t\t\tthis.debugService.state,\n\t\t\t\t\t\t\t\tthis.debugService\n\t\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t\t.areBreakpointsActivated(),\n\t\t\t\t\t\t\t\tcandidate.breakpoint,\n\t\t\t\t\t\t\t\tthis.labelService,\n\t\t\t\t\t\t\t\tthis.debugService.getModel(),\n\t\t\t\t\t\t\t).icon\n\t\t\t\t\t\t: icons.breakpoint.disabled;\n\t\t\t\t\tconst contextMenuActions = () =>\n\t\t\t\t\t\tthis.getContextMenuActions(\n\t\t\t\t\t\t\tcandidate.breakpoint ? [candidate.breakpoint] : [],\n\t\t\t\t\t\t\tactiveCodeEditor.getModel().uri,\n\t\t\t\t\t\t\tcandidate.range.startLineNumber,\n\t\t\t\t\t\t\tcandidate.range.startColumn,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst inlineWidget = new InlineBreakpointWidget(\n\t\t\t\t\t\tactiveCodeEditor,\n\t\t\t\t\t\tdecorationId,\n\t\t\t\t\t\tThemeIcon.asClassName(icon),\n\t\t\t\t\t\tcandidate.breakpoint,\n\t\t\t\t\t\tthis.debugService,\n\t\t\t\t\t\tthis.contextMenuService,\n\t\t\t\t\t\tcontextMenuActions,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdecorationId,\n\t\t\t\t\t\tinlineWidget,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t);\n\t\t};\n\n\t\tconst activeCodeEditor = this.editor;\n\t\tconst model = activeCodeEditor.getModel();\n\t\tconst breakpoints = this.debugService\n\t\t\t.getModel()\n\t\t\t.getBreakpoints({ uri: model.uri });\n\t\tconst debugSettings =\n\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\"debug\");\n\t\tconst desiredBreakpointDecorations =\n\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\tcreateBreakpointDecorations(\n\t\t\t\t\taccessor,\n\t\t\t\t\tmodel,\n\t\t\t\t\tbreakpoints,\n\t\t\t\t\tthis.debugService.state,\n\t\t\t\t\tthis.debugService.getModel().areBreakpointsActivated(),\n\t\t\t\t\tdebugSettings.showBreakpointsInOverviewRuler,\n\t\t\t\t),\n\t\t\t);\n\n\t\t// try to set breakpoint location candidates in the same changeDecorations()\n\t\t// call to avoid flickering, if the DA responds reasonably quickly.\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tconst desiredCandidatePositions =\n\t\t\tdebugSettings.showInlineBreakpointCandidates && session\n\t\t\t\t? requestBreakpointCandidateLocations(\n\t\t\t\t\t\tthis.editor.getModel(),\n\t\t\t\t\t\tdesiredBreakpointDecorations.map(\n\t\t\t\t\t\t\t(bp) => bp.range.startLineNumber,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tsession,\n\t\t\t\t\t)\n\t\t\t\t: Promise.resolve([]);\n\t\tconst desiredCandidatePositionsRaced = await Promise.race([\n\t\t\tdesiredCandidatePositions,\n\t\t\ttimeout(500).then(() => undefined),\n\t\t]);\n\t\tif (desiredCandidatePositionsRaced === undefined) {\n\t\t\t// the timeout resolved first\n\t\t\tdesiredCandidatePositions.then((v) =>\n\t\t\t\tactiveCodeEditor.changeDecorations((d) =>\n\t\t\t\t\tsetCandidateDecorations(d, v),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.ignoreDecorationsChangedEvent = true;\n\n\t\t\t// Set breakpoint decorations\n\t\t\tactiveCodeEditor.changeDecorations((changeAccessor) => {\n\t\t\t\tconst decorationIds = changeAccessor.deltaDecorations(\n\t\t\t\t\tthis.breakpointDecorations.map((bpd) => bpd.decorationId),\n\t\t\t\t\tdesiredBreakpointDecorations,\n\t\t\t\t);\n\t\t\t\tthis.breakpointDecorations.forEach((bpd) => {\n\t\t\t\t\tbpd.inlineWidget?.dispose();\n\t\t\t\t});\n\t\t\t\tthis.breakpointDecorations = decorationIds.map(\n\t\t\t\t\t(decorationId, index) => {\n\t\t\t\t\t\tlet inlineWidget: InlineBreakpointWidget | undefined;\n\t\t\t\t\t\tconst breakpoint = breakpoints[index];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tdesiredBreakpointDecorations[index].options.before\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst contextMenuActions = () =>\n\t\t\t\t\t\t\t\tthis.getContextMenuActions(\n\t\t\t\t\t\t\t\t\t[breakpoint],\n\t\t\t\t\t\t\t\t\tactiveCodeEditor.getModel().uri,\n\t\t\t\t\t\t\t\t\tbreakpoint.lineNumber,\n\t\t\t\t\t\t\t\t\tbreakpoint.column,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tinlineWidget = new InlineBreakpointWidget(\n\t\t\t\t\t\t\t\tactiveCodeEditor,\n\t\t\t\t\t\t\t\tdecorationId,\n\t\t\t\t\t\t\t\tdesiredBreakpointDecorations[index].options\n\t\t\t\t\t\t\t\t\t.glyphMarginClassName,\n\t\t\t\t\t\t\t\tbreakpoint,\n\t\t\t\t\t\t\t\tthis.debugService,\n\t\t\t\t\t\t\t\tthis.contextMenuService,\n\t\t\t\t\t\t\t\tcontextMenuActions,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdecorationId,\n\t\t\t\t\t\t\tbreakpoint,\n\t\t\t\t\t\t\trange: desiredBreakpointDecorations[index].range,\n\t\t\t\t\t\t\tinlineWidget,\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (desiredCandidatePositionsRaced) {\n\t\t\t\t\tsetCandidateDecorations(\n\t\t\t\t\t\tchangeAccessor,\n\t\t\t\t\t\tdesiredCandidatePositionsRaced,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t} finally {\n\t\t\tthis.ignoreDecorationsChangedEvent = false;\n\t\t}\n\n\t\tfor (const d of this.breakpointDecorations) {\n\t\t\tif (d.inlineWidget) {\n\t\t\t\tthis.editor.layoutContentWidget(d.inlineWidget);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onModelDecorationsChanged(): Promise<void> {\n\t\tif (\n\t\t\tthis.breakpointDecorations.length === 0 ||\n\t\t\tthis.ignoreDecorationsChangedEvent ||\n\t\t\t!this.editor.hasModel()\n\t\t) {\n\t\t\t// I have no decorations\n\t\t\treturn;\n\t\t}\n\t\tlet somethingChanged = false;\n\t\tconst model = this.editor.getModel();\n\t\tthis.breakpointDecorations.forEach((breakpointDecoration) => {\n\t\t\tif (somethingChanged) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst newBreakpointRange = model.getDecorationRange(\n\t\t\t\tbreakpointDecoration.decorationId,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tnewBreakpointRange &&\n\t\t\t\t!breakpointDecoration.range.equalsRange(newBreakpointRange)\n\t\t\t) {\n\t\t\t\tsomethingChanged = true;\n\t\t\t\tbreakpointDecoration.range = newBreakpointRange;\n\t\t\t}\n\t\t});\n\t\tif (!somethingChanged) {\n\t\t\t// nothing to do, my decorations did not change.\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = new Map<string, IBreakpointUpdateData>();\n\t\tfor (let i = 0, len = this.breakpointDecorations.length; i < len; i++) {\n\t\t\tconst breakpointDecoration = this.breakpointDecorations[i];\n\t\t\tconst decorationRange = model.getDecorationRange(\n\t\t\t\tbreakpointDecoration.decorationId,\n\t\t\t);\n\t\t\t// check if the line got deleted.\n\t\t\tif (decorationRange) {\n\t\t\t\t// since we know it is collapsed, it cannot grow to multiple lines\n\t\t\t\tif (breakpointDecoration.breakpoint) {\n\t\t\t\t\tdata.set(breakpointDecoration.breakpoint.getId(), {\n\t\t\t\t\t\tlineNumber: decorationRange.startLineNumber,\n\t\t\t\t\t\tcolumn: breakpointDecoration.breakpoint.column\n\t\t\t\t\t\t\t? decorationRange.startColumn\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.ignoreBreakpointsChangeEvent = true;\n\t\t\tawait this.debugService.updateBreakpoints(model.uri, data, true);\n\t\t} finally {\n\t\t\tthis.ignoreBreakpointsChangeEvent = false;\n\t\t}\n\t}\n\n\t// breakpoint widget\n\tshowBreakpointWidget(\n\t\tlineNumber: number,\n\t\tcolumn: number | undefined,\n\t\tcontext?: BreakpointWidgetContext,\n\t): void {\n\t\tthis.breakpointWidget?.dispose();\n\n\t\tthis.breakpointWidget = this.instantiationService.createInstance(\n\t\t\tBreakpointWidget,\n\t\t\tthis.editor,\n\t\t\tlineNumber,\n\t\t\tcolumn,\n\t\t\tcontext,\n\t\t);\n\t\tthis.breakpointWidget.show({ lineNumber, column: 1 });\n\t\tthis.breakpointWidgetVisible.set(true);\n\t}\n\n\tcloseBreakpointWidget(): void {\n\t\tif (this.breakpointWidget) {\n\t\t\tthis.breakpointWidget.dispose();\n\t\t\tthis.breakpointWidget = undefined;\n\t\t\tthis.breakpointWidgetVisible.reset();\n\t\t\tthis.editor.focus();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.breakpointWidget?.dispose();\n\t\tthis.editor.removeDecorations(\n\t\t\tthis.breakpointDecorations.map((bpd) => bpd.decorationId),\n\t\t);\n\t\tdispose(this.toDispose);\n\t}\n}\n\nGutterActionsRegistry.registerGutterActionsGenerator(\n\t({ lineNumber, editor, accessor }, result) => {\n\t\tconst model = editor.getModel();\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tif (\n\t\t\t!model ||\n\t\t\t!debugService.getAdapterManager().hasEnabledDebuggers() ||\n\t\t\t!debugService.canSetBreakpointsIn(model)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst breakpointEditorContribution =\n\t\t\teditor.getContribution<IBreakpointEditorContribution>(\n\t\t\t\tBREAKPOINT_EDITOR_CONTRIBUTION_ID,\n\t\t\t);\n\t\tif (!breakpointEditorContribution) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions =\n\t\t\tbreakpointEditorContribution.getContextMenuActionsAtPosition(\n\t\t\t\tlineNumber,\n\t\t\t\tmodel,\n\t\t\t);\n\n\t\tfor (const action of actions) {\n\t\t\tresult.push(action, \"2_debug\");\n\t\t}\n\t},\n);\n\nclass InlineBreakpointWidget implements IContentWidget, IDisposable {\n\t// editor.IContentWidget.allowEditorOverflow\n\tallowEditorOverflow = false;\n\tsuppressMouseDown = true;\n\n\tprivate domNode!: HTMLElement;\n\tprivate range: Range | null;\n\tprivate toDispose: IDisposable[] = [];\n\n\tconstructor(\n\t\tprivate readonly editor: IActiveCodeEditor,\n\t\tprivate readonly decorationId: string,\n\t\tcssClass: string | null | undefined,\n\t\tprivate readonly breakpoint: IBreakpoint | undefined,\n\t\tprivate readonly debugService: IDebugService,\n\t\tprivate readonly contextMenuService: IContextMenuService,\n\t\tprivate readonly getContextMenuActions: () => IAction[],\n\t) {\n\t\tthis.range = this.editor.getModel().getDecorationRange(decorationId);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onDidChangeModelDecorations(() => {\n\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\tconst range = model.getDecorationRange(this.decorationId);\n\t\t\t\tif (this.range && !this.range.equalsRange(range)) {\n\t\t\t\t\tthis.range = range;\n\t\t\t\t\tthis.editor.layoutContentWidget(this);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.create(cssClass);\n\n\t\tthis.editor.addContentWidget(this);\n\t\tthis.editor.layoutContentWidget(this);\n\t}\n\n\tprivate create(cssClass: string | null | undefined): void {\n\t\tthis.domNode = $(\".inline-breakpoint-widget\");\n\t\tif (cssClass) {\n\t\t\tthis.domNode.classList.add(...cssClass.split(\" \"));\n\t\t}\n\t\tthis.toDispose.push(\n\t\t\tdom.addDisposableListener(\n\t\t\t\tthis.domNode,\n\t\t\t\tdom.EventType.CLICK,\n\t\t\t\tasync (e) => {\n\t\t\t\t\tswitch (this.breakpoint?.enabled) {\n\t\t\t\t\t\tcase undefined:\n\t\t\t\t\t\t\tawait this.debugService.addBreakpoints(\n\t\t\t\t\t\t\t\tthis.editor.getModel().uri,\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlineNumber: this.range!.startLineNumber,\n\t\t\t\t\t\t\t\t\t\tcolumn: this.range!.startColumn,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase true:\n\t\t\t\t\t\t\tawait this.debugService.removeBreakpoints(\n\t\t\t\t\t\t\t\tthis.breakpoint.getId(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase false:\n\t\t\t\t\t\t\tthis.debugService.enableOrDisableBreakpoints(\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\tthis.breakpoint,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tdom.addDisposableListener(\n\t\t\t\tthis.domNode,\n\t\t\t\tdom.EventType.CONTEXT_MENU,\n\t\t\t\t(e) => {\n\t\t\t\t\tconst event = new StandardMouseEvent(\n\t\t\t\t\t\tdom.getWindow(this.domNode),\n\t\t\t\t\t\te,\n\t\t\t\t\t);\n\t\t\t\t\tconst actions = this.getContextMenuActions();\n\t\t\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\t\t\tgetAnchor: () => event,\n\t\t\t\t\t\tgetActions: () => actions,\n\t\t\t\t\t\tgetActionsContext: () => this.breakpoint,\n\t\t\t\t\t\tonHide: () => disposeIfDisposable(actions),\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tconst updateSize = () => {\n\t\t\tconst lineHeight = this.editor.getOption(EditorOption.lineHeight);\n\t\t\tthis.domNode.style.height = `${lineHeight}px`;\n\t\t\tthis.domNode.style.width = `${Math.ceil(0.8 * lineHeight)}px`;\n\t\t\tthis.domNode.style.marginLeft = `4px`;\n\t\t};\n\t\tupdateSize();\n\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onDidChangeConfiguration((c) => {\n\t\t\t\tif (\n\t\t\t\t\tc.hasChanged(EditorOption.fontSize) ||\n\t\t\t\t\tc.hasChanged(EditorOption.lineHeight)\n\t\t\t\t) {\n\t\t\t\t\tupdateSize();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t@memoize\n\tgetId(): string {\n\t\treturn generateUuid();\n\t}\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetPosition(): IContentWidgetPosition | null {\n\t\tif (!this.range) {\n\t\t\treturn null;\n\t\t}\n\t\t// Workaround: since the content widget can not be placed before the first column we need to force the left position\n\t\tthis.domNode.classList.toggle(\n\t\t\t\"line-start\",\n\t\t\tthis.range.startColumn === 1,\n\t\t);\n\n\t\treturn {\n\t\t\tposition: {\n\t\t\t\tlineNumber: this.range.startLineNumber,\n\t\t\t\tcolumn: this.range.startColumn - 1,\n\t\t\t},\n\t\t\tpreference: [ContentWidgetPositionPreference.EXACT],\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tthis.editor.removeContentWidget(this);\n\t\tdispose(this.toDispose);\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst scope =\n\t\t\".monaco-editor .glyph-margin-widgets, .monaco-workbench .debug-breakpoints, .monaco-workbench .disassembly-view, .monaco-editor .contentWidgets\";\n\tconst debugIconBreakpointColor = theme.getColor(\n\t\tdebugIconBreakpointForeground,\n\t);\n\tif (debugIconBreakpointColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${icons.allBreakpoints.map((b) => `${ThemeIcon.asCSSSelector(b.regular)}`).join(\",\\n\t\t\")},\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugBreakpointUnsupported)},\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugBreakpointHint)}:not([class*='codicon-debug-breakpoint']):not([class*='codicon-debug-stackframe']),\n\t\t\t${ThemeIcon.asCSSSelector(icons.breakpoint.regular)}${ThemeIcon.asCSSSelector(icons.debugStackframeFocused)}::after,\n\t\t\t${ThemeIcon.asCSSSelector(icons.breakpoint.regular)}${ThemeIcon.asCSSSelector(icons.debugStackframe)}::after {\n\t\t\t\tcolor: ${debugIconBreakpointColor} !important;\n\t\t\t}\n\t\t}`);\n\n\t\tcollector.addRule(`${scope} {\n\t\t\t${ThemeIcon.asCSSSelector(icons.breakpoint.pending)} {\n\t\t\t\tcolor: ${debugIconBreakpointColor} !important;\n\t\t\t\tfont-size: 12px !important;\n\t\t\t}\n\t\t}`);\n\t}\n\n\tconst debugIconBreakpointDisabledColor = theme.getColor(\n\t\tdebugIconBreakpointDisabledForeground,\n\t);\n\tif (debugIconBreakpointDisabledColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${icons.allBreakpoints.map((b) => ThemeIcon.asCSSSelector(b.disabled)).join(\",\\n\t\t\")} {\n\t\t\t\tcolor: ${debugIconBreakpointDisabledColor};\n\t\t\t}\n\t\t}`);\n\t}\n\n\tconst debugIconBreakpointUnverifiedColor = theme.getColor(\n\t\tdebugIconBreakpointUnverifiedForeground,\n\t);\n\tif (debugIconBreakpointUnverifiedColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${icons.allBreakpoints.map((b) => ThemeIcon.asCSSSelector(b.unverified)).join(\",\\n\t\t\")} {\n\t\t\t\tcolor: ${debugIconBreakpointUnverifiedColor};\n\t\t\t}\n\t\t}`);\n\t}\n\n\tconst debugIconBreakpointCurrentStackframeForegroundColor = theme.getColor(\n\t\tdebugIconBreakpointCurrentStackframeForeground,\n\t);\n\tif (debugIconBreakpointCurrentStackframeForegroundColor) {\n\t\tcollector.addRule(`\n\t\t.monaco-editor .debug-top-stack-frame-column {\n\t\t\tcolor: ${debugIconBreakpointCurrentStackframeForegroundColor} !important;\n\t\t}\n\t\t${scope} {\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugStackframe)} {\n\t\t\t\tcolor: ${debugIconBreakpointCurrentStackframeForegroundColor} !important;\n\t\t\t}\n\t\t}\n\t\t`);\n\t}\n\n\tconst debugIconBreakpointStackframeFocusedColor = theme.getColor(\n\t\tdebugIconBreakpointStackframeForeground,\n\t);\n\tif (debugIconBreakpointStackframeFocusedColor) {\n\t\tcollector.addRule(`${scope} {\n\t\t\t${ThemeIcon.asCSSSelector(icons.debugStackframeFocused)} {\n\t\t\t\tcolor: ${debugIconBreakpointStackframeFocusedColor} !important;\n\t\t\t}\n\t\t}`);\n\t}\n});\n\nexport const debugIconBreakpointForeground = registerColor(\n\t\"debugIcon.breakpointForeground\",\n\t\"#E51400\",\n\tnls.localize(\n\t\t\"debugIcon.breakpointForeground\",\n\t\t\"Icon color for breakpoints.\",\n\t),\n);\nconst debugIconBreakpointDisabledForeground = registerColor(\n\t\"debugIcon.breakpointDisabledForeground\",\n\t\"#848484\",\n\tnls.localize(\n\t\t\"debugIcon.breakpointDisabledForeground\",\n\t\t\"Icon color for disabled breakpoints.\",\n\t),\n);\nconst debugIconBreakpointUnverifiedForeground = registerColor(\n\t\"debugIcon.breakpointUnverifiedForeground\",\n\t\"#848484\",\n\tnls.localize(\n\t\t\"debugIcon.breakpointUnverifiedForeground\",\n\t\t\"Icon color for unverified breakpoints.\",\n\t),\n);\nconst debugIconBreakpointCurrentStackframeForeground = registerColor(\n\t\"debugIcon.breakpointCurrentStackframeForeground\",\n\t{\n\t\tdark: \"#FFCC00\",\n\t\tlight: \"#BE8700\",\n\t\thcDark: \"#FFCC00\",\n\t\thcLight: \"#BE8700\",\n\t},\n\tnls.localize(\n\t\t\"debugIcon.breakpointCurrentStackframeForeground\",\n\t\t\"Icon color for the current breakpoint stack frame.\",\n\t),\n);\nconst debugIconBreakpointStackframeForeground = registerColor(\n\t\"debugIcon.breakpointStackframeForeground\",\n\t\"#89D185\",\n\tnls.localize(\n\t\t\"debugIcon.breakpointStackframeForeground\",\n\t\t\"Icon color for all breakpoint stack frames.\",\n\t),\n);\n"],
  "mappings": "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",
  "names": ["message", "desiredCandidatePositions"]
}
