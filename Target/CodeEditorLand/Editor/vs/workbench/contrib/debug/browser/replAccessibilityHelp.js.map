{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/replAccessibilityHelp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { AccessibleViewProviderId, AccessibleViewType, IAccessibleViewContentProvider } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { IAccessibleViewImplentation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { getReplView, Repl } from './repl.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { localize } from '../../../../nls.js';\n\nexport class ReplAccessibilityHelp implements IAccessibleViewImplentation {\n\tpriority = 120;\n\tname = 'replHelp';\n\twhen = ContextKeyExpr.equals('focusedView', 'workbench.panel.repl.view');\n\ttype: AccessibleViewType = AccessibleViewType.Help;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst replView = getReplView(viewsService);\n\t\tif (!replView) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new ReplAccessibilityHelpProvider(replView);\n\t}\n}\n\nclass ReplAccessibilityHelpProvider extends Disposable implements IAccessibleViewContentProvider {\n\tpublic readonly id = AccessibleViewProviderId.ReplHelp;\n\tpublic readonly verbositySettingKey = AccessibilityVerbositySettingId.Debug;\n\tpublic readonly options = { type: AccessibleViewType.Help };\n\tprivate _treeHadFocus = false;\n\tconstructor(private readonly _replView: Repl) {\n\t\tsuper();\n\t\tthis._treeHadFocus = !!_replView.getFocusedElement();\n\t}\n\n\tpublic onClose(): void {\n\t\tif (this._treeHadFocus) {\n\t\t\treturn this._replView.focusTree();\n\t\t}\n\t\tthis._replView.getReplInput().focus();\n\t}\n\n\tpublic provideContent(): string {\n\t\treturn [\n\t\t\tlocalize('repl.help', \"The debug console is a Read-Eval-Print-Loop that allows you to evaluate expressions and run commands and can be focused with{0}.\", '<keybinding:workbench.panel.repl.view.focus>'),\n\t\t\tlocalize('repl.output', \"The debug console output can be navigated to from the input field with the Focus Previous Widget command{0}.\", '<keybinding:widgetNavigation.focusPrevious>'),\n\t\t\tlocalize('repl.input', \"The debug console input can be navigated to from the output with the Focus Next Widget command{0}.\", '<keybinding:widgetNavigation.focusNext>'),\n\t\t\tlocalize('repl.history', \"The debug console output history can be navigated with the up and down arrow keys.\"),\n\t\t\tlocalize('repl.accessibleView', \"The Open Accessible View command{0} will allow character by character navigation of the console output.\", '<keybinding:editor.action.accessibleView>'),\n\t\t\tlocalize('repl.showRunAndDebug', \"The Show Run and Debug view command{0} will open the Run and Debug view and provides more information about debugging.\", '<keybinding:workbench.view.debug>'),\n\t\t\tlocalize('repl.clear', \"The Debug: Clear Console command{0} will clear the console output.\", '<keybinding:workbench.debug.panel.action.clearReplAction>'),\n\t\t\tlocalize('repl.lazyVariables', \"The setting `debug.expandLazyVariables` controls whether variables are evaluated automatically. This is enabled by default when using a screen reader.\"),\n\t\t].join('\\n');\n\t}\n}\n\n"],
  "mappings": ";;AAKA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B,oBAAoB,sCAAsC;AAC7F,SAAS,mCAAmC;AAC5C,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,aAAa,YAAY;AAClC,SAAS,qBAAqB;AAC9B,SAAS,uCAAuC;AAChD,SAAS,gBAAgB;AAElB,MAAM,sBAA6D;AAAA,EAf1E,OAe0E;AAAA;AAAA;AAAA,EACzE,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,eAAe,OAAO,eAAe,2BAA2B;AAAA,EACvE,OAA2B,mBAAmB;AAAA,EAC9C,YAAY,UAA4B;AACvC,UAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,UAAM,WAAW,YAAY,YAAY;AACzC,QAAI,CAAC,UAAU;AACd,aAAO;AAAA,IACR;AACA,WAAO,IAAI,8BAA8B,QAAQ;AAAA,EAClD;AACD;AAEA,MAAM,sCAAsC,WAAqD;AAAA,EAKhG,YAA6B,WAAiB;AAC7C,UAAM;AADsB;AAE5B,SAAK,gBAAgB,CAAC,CAAC,UAAU,kBAAkB;AAAA,EACpD;AAAA,EAtCD,OA8BiG;AAAA;AAAA;AAAA,EAChF,KAAK,yBAAyB;AAAA,EAC9B,sBAAsB,gCAAgC;AAAA,EACtD,UAAU,EAAE,MAAM,mBAAmB,KAAK;AAAA,EAClD,gBAAgB;AAAA,EAMjB,UAAgB;AACtB,QAAI,KAAK,eAAe;AACvB,aAAO,KAAK,UAAU,UAAU;AAAA,IACjC;AACA,SAAK,UAAU,aAAa,EAAE,MAAM;AAAA,EACrC;AAAA,EAEO,iBAAyB;AAC/B,WAAO;AAAA,MACN,SAAS,aAAa,oIAAoI,8CAA8C;AAAA,MACxM,SAAS,eAAe,gHAAgH,6CAA6C;AAAA,MACrL,SAAS,cAAc,sGAAsG,yCAAyC;AAAA,MACtK,SAAS,gBAAgB,oFAAoF;AAAA,MAC7G,SAAS,uBAAuB,2GAA2G,2CAA2C;AAAA,MACtL,SAAS,wBAAwB,0HAA0H,mCAAmC;AAAA,MAC9L,SAAS,cAAc,sEAAsE,2DAA2D;AAAA,MACxJ,SAAS,sBAAsB,wJAAwJ;AAAA,IACxL,EAAE,KAAK,IAAI;AAAA,EACZ;AACD;",
  "names": []
}
