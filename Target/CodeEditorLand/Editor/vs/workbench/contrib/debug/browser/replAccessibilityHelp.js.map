{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/replAccessibilityHelp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport type { ServicesAccessor } from \"../../../../editor/browser/editorExtensions.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tAccessibleViewProviderId,\n\tAccessibleViewType,\n\ttype IAccessibleViewContentProvider,\n} from \"../../../../platform/accessibility/browser/accessibleView.js\";\nimport type { IAccessibleViewImplentation } from \"../../../../platform/accessibility/browser/accessibleViewRegistry.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { AccessibilityVerbositySettingId } from \"../../accessibility/browser/accessibilityConfiguration.js\";\nimport { type Repl, getReplView } from \"./repl.js\";\n\nexport class ReplAccessibilityHelp implements IAccessibleViewImplentation {\n\tpriority = 120;\n\tname = \"replHelp\";\n\twhen = ContextKeyExpr.equals(\"focusedView\", \"workbench.panel.repl.view\");\n\ttype: AccessibleViewType = AccessibleViewType.Help;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst replView = getReplView(viewsService);\n\t\tif (!replView) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new ReplAccessibilityHelpProvider(replView);\n\t}\n}\n\nclass ReplAccessibilityHelpProvider\n\textends Disposable\n\timplements IAccessibleViewContentProvider\n{\n\tpublic readonly id = AccessibleViewProviderId.ReplHelp;\n\tpublic readonly verbositySettingKey = AccessibilityVerbositySettingId.Debug;\n\tpublic readonly options = { type: AccessibleViewType.Help };\n\tprivate _treeHadFocus = false;\n\tconstructor(private readonly _replView: Repl) {\n\t\tsuper();\n\t\tthis._treeHadFocus = !!_replView.getFocusedElement();\n\t}\n\n\tpublic onClose(): void {\n\t\tif (this._treeHadFocus) {\n\t\t\treturn this._replView.focusTree();\n\t\t}\n\t\tthis._replView.getReplInput().focus();\n\t}\n\n\tpublic provideContent(): string {\n\t\treturn [\n\t\t\tlocalize(\n\t\t\t\t\"repl.help\",\n\t\t\t\t\"The debug console is a Read-Eval-Print-Loop that allows you to evaluate expressions and run commands and can be focused with{0}.\",\n\t\t\t\t\"<keybinding:workbench.panel.repl.view.focus>\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"repl.output\",\n\t\t\t\t\"The debug console output can be navigated to from the input field with the Focus Previous Widget command{0}.\",\n\t\t\t\t\"<keybinding:widgetNavigation.focusPrevious>\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"repl.input\",\n\t\t\t\t\"The debug console input can be navigated to from the output with the Focus Next Widget command{0}.\",\n\t\t\t\t\"<keybinding:widgetNavigation.focusNext>\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"repl.history\",\n\t\t\t\t\"The debug console output history can be navigated with the up and down arrow keys.\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"repl.accessibleView\",\n\t\t\t\t\"The Open Accessible View command{0} will allow character by character navigation of the console output.\",\n\t\t\t\t\"<keybinding:editor.action.accessibleView>\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"repl.showRunAndDebug\",\n\t\t\t\t\"The Show Run and Debug view command{0} will open the Run and Debug view and provides more information about debugging.\",\n\t\t\t\t\"<keybinding:workbench.view.debug>\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"repl.clear\",\n\t\t\t\t\"The Debug: Clear Console command{0} will clear the console output.\",\n\t\t\t\t\"<keybinding:workbench.debug.panel.action.clearReplAction>\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"repl.lazyVariables\",\n\t\t\t\t\"The setting `debug.expandLazyVariables` controls whether variables are evaluated automatically. This is enabled by default when using a screen reader.\",\n\t\t\t),\n\t\t].join(\"\\n\");\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAE3B,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAEP,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,SAAS,uCAAuC;AAChD,SAAoB,mBAAmB;AAEhC,MAAM,sBAA6D;AAAA,EAnB1E,OAmB0E;AAAA;AAAA;AAAA,EACzE,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,eAAe,OAAO,eAAe,2BAA2B;AAAA,EACvE,OAA2B,mBAAmB;AAAA,EAC9C,YAAY,UAA4B;AACvC,UAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,UAAM,WAAW,YAAY,YAAY;AACzC,QAAI,CAAC,UAAU;AACd,aAAO;AAAA,IACR;AACA,WAAO,IAAI,8BAA8B,QAAQ;AAAA,EAClD;AACD;AAEA,MAAM,sCACG,WAET;AAAA,EAKC,YAA6B,WAAiB;AAC7C,UAAM;AADsB;AAE5B,SAAK,gBAAgB,CAAC,CAAC,UAAU,kBAAkB;AAAA,EACpD;AAAA,EA7CD,OAqCA;AAAA;AAAA;AAAA,EACiB,KAAK,yBAAyB;AAAA,EAC9B,sBAAsB,gCAAgC;AAAA,EACtD,UAAU,EAAE,MAAM,mBAAmB,KAAK;AAAA,EAClD,gBAAgB;AAAA,EAMjB,UAAgB;AACtB,QAAI,KAAK,eAAe;AACvB,aAAO,KAAK,UAAU,UAAU;AAAA,IACjC;AACA,SAAK,UAAU,aAAa,EAAE,MAAM;AAAA,EACrC;AAAA,EAEO,iBAAyB;AAC/B,WAAO;AAAA,MACN;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,MACD;AAAA,IACD,EAAE,KAAK,IAAI;AAAA,EACZ;AACD;",
  "names": []
}
