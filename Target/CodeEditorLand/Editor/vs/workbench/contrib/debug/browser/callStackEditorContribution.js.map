{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/callStackEditorContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { IEditorContribution } from '../../../../editor/common/editorCommon.js';\nimport { GlyphMarginLane, IModelDecorationOptions, IModelDeltaDecoration, OverviewRulerLane, TrackedRangeStickiness } from '../../../../editor/common/model.js';\nimport { localize } from '../../../../nls.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { registerColor } from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { debugStackframe, debugStackframeFocused } from './debugIcons.js';\nimport { IDebugService, IStackFrame } from '../common/debug.js';\nimport './media/callStackEditorContribution.css';\n\nexport const topStackFrameColor = registerColor('editor.stackFrameHighlightBackground', { dark: '#ffff0033', light: '#ffff6673', hcDark: '#ffff0033', hcLight: '#ffff6673' }, localize('topStackFrameLineHighlight', 'Background color for the highlight of line at the top stack frame position.'));\nexport const focusedStackFrameColor = registerColor('editor.focusedStackFrameHighlightBackground', { dark: '#7abd7a4d', light: '#cee7ce73', hcDark: '#7abd7a4d', hcLight: '#cee7ce73' }, localize('focusedStackFrameLineHighlight', 'Background color for the highlight of line at focused stack frame position.'));\nconst stickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\n// we need a separate decoration for glyph margin, since we do not want it on each line of a multi line statement.\nconst TOP_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tdescription: 'top-stack-frame-margin',\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframe),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tzIndex: 9999,\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(topStackFrameColor)\n\t}\n};\nconst FOCUSED_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tdescription: 'focused-stack-frame-margin',\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframeFocused),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tzIndex: 9999,\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(focusedStackFrameColor)\n\t}\n};\nexport const TOP_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tdescription: 'top-stack-frame-decoration',\n\tisWholeLine: true,\n\tclassName: 'debug-top-stack-frame-line',\n\tstickiness\n};\nexport const FOCUSED_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tdescription: 'focused-stack-frame-decoration',\n\tisWholeLine: true,\n\tclassName: 'debug-focused-stack-frame-line',\n\tstickiness\n};\n\nexport const makeStackFrameColumnDecoration = (noCharactersBefore: boolean): IModelDecorationOptions => ({\n\tdescription: 'top-stack-frame-inline-decoration',\n\tbefore: {\n\t\tcontent: '\\uEB8B',\n\t\tinlineClassName: noCharactersBefore ? 'debug-top-stack-frame-column start-of-line' : 'debug-top-stack-frame-column',\n\t\tinlineClassNameAffectsLetterSpacing: true\n\t},\n});\n\nexport function createDecorationsForStackFrame(stackFrame: IStackFrame, isFocusedSession: boolean, noCharactersBefore: boolean): IModelDeltaDecoration[] {\n\t// only show decorations for the currently focused thread.\n\tconst result: IModelDeltaDecoration[] = [];\n\tconst columnUntilEOLRange = new Range(stackFrame.range.startLineNumber, stackFrame.range.startColumn, stackFrame.range.startLineNumber, Constants.MAX_SAFE_SMALL_INTEGER);\n\tconst range = new Range(stackFrame.range.startLineNumber, stackFrame.range.startColumn, stackFrame.range.startLineNumber, stackFrame.range.startColumn + 1);\n\n\t// compute how to decorate the editor. Different decorations are used if this is a top stack frame, focused stack frame,\n\t// an exception or a stack frame that did not change the line number (we only decorate the columns, not the whole line).\n\tconst topStackFrame = stackFrame.thread.getTopStackFrame();\n\tif (stackFrame.getId() === topStackFrame?.getId()) {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: TOP_STACK_FRAME_MARGIN,\n\t\t\t\trange\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: TOP_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange\n\t\t});\n\n\t\tif (stackFrame.range.startColumn > 1) {\n\t\t\tresult.push({\n\t\t\t\toptions: makeStackFrameColumnDecoration(noCharactersBefore),\n\t\t\t\trange: columnUntilEOLRange\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: FOCUSED_STACK_FRAME_MARGIN,\n\t\t\t\trange\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: FOCUSED_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange\n\t\t});\n\t}\n\n\treturn result;\n}\n\nexport class CallStackEditorContribution extends Disposable implements IEditorContribution {\n\tprivate decorations = this.editor.createDecorationsCollection();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tconst setDecorations = () => this.decorations.set(this.createCallStackDecorations());\n\t\tthis._register(Event.any(this.debugService.getViewModel().onDidFocusStackFrame, this.debugService.getModel().onDidChangeCallStack)(() => {\n\t\t\tsetDecorations();\n\t\t}));\n\t\tthis._register(this.editor.onDidChangeModel(e => {\n\t\t\tif (e.newModelUrl) {\n\t\t\t\tsetDecorations();\n\t\t\t}\n\t\t}));\n\t\tsetDecorations();\n\t}\n\n\tprivate createCallStackDecorations(): IModelDeltaDecoration[] {\n\t\tconst editor = this.editor;\n\t\tif (!editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tthis.debugService.getModel().getSessions().forEach(s => {\n\t\t\tconst isSessionFocused = s === focusedStackFrame?.thread.session;\n\t\t\ts.getAllThreads().forEach(t => {\n\t\t\t\tif (t.stopped) {\n\t\t\t\t\tconst callStack = t.getCallStack();\n\t\t\t\t\tconst stackFrames: IStackFrame[] = [];\n\t\t\t\t\tif (callStack.length > 0) {\n\t\t\t\t\t\t// Always decorate top stack frame, and decorate focused stack frame if it is not the top stack frame\n\t\t\t\t\t\tif (focusedStackFrame && !focusedStackFrame.equals(callStack[0])) {\n\t\t\t\t\t\t\tstackFrames.push(focusedStackFrame);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstackFrames.push(callStack[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tstackFrames.forEach(candidateStackFrame => {\n\t\t\t\t\t\tif (candidateStackFrame && this.uriIdentityService.extUri.isEqual(candidateStackFrame.source.uri, editor.getModel()?.uri)) {\n\t\t\t\t\t\t\tif (candidateStackFrame.range.startLineNumber > editor.getModel()?.getLineCount() || candidateStackFrame.range.startLineNumber < 1) {\n\t\t\t\t\t\t\t\tthis.logService.warn(`CallStackEditorContribution: invalid stack frame line number: ${candidateStackFrame.range.startLineNumber}`);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst noCharactersBefore = editor.getModel().getLineFirstNonWhitespaceColumn(candidateStackFrame.range.startLineNumber) >= candidateStackFrame.range.startColumn;\n\t\t\t\t\t\t\tdecorations.push(...createDecorationsForStackFrame(candidateStackFrame, isSessionFocused, noCharactersBefore));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Deduplicate same decorations so colors do not stack #109045\n\t\treturn distinct(decorations, d => `${d.options.className} ${d.options.glyphMarginClassName} ${d.range.startLineNumber} ${d.range.startColumn}`);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.decorations.clear();\n\t}\n}\n\n"],
  "mappings": "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",
  "names": []
}
