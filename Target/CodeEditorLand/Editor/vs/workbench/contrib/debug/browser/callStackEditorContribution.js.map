{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/callStackEditorContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { Constants } from \"../../../../base/common/uint.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { IEditorContribution } from \"../../../../editor/common/editorCommon.js\";\nimport {\n\tGlyphMarginLane,\n\ttype IModelDecorationOptions,\n\ttype IModelDeltaDecoration,\n\tOverviewRulerLane,\n\tTrackedRangeStickiness,\n} from \"../../../../editor/common/model.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { registerColor } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { themeColorFromId } from \"../../../../platform/theme/common/themeService.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IDebugService, type IStackFrame } from \"../common/debug.js\";\nimport { debugStackframe, debugStackframeFocused } from \"./debugIcons.js\";\nimport \"./media/callStackEditorContribution.css\";\n\nexport const topStackFrameColor = registerColor(\n\t\"editor.stackFrameHighlightBackground\",\n\t{\n\t\tdark: \"#ffff0033\",\n\t\tlight: \"#ffff6673\",\n\t\thcDark: \"#ffff0033\",\n\t\thcLight: \"#ffff6673\",\n\t},\n\tlocalize(\n\t\t\"topStackFrameLineHighlight\",\n\t\t\"Background color for the highlight of line at the top stack frame position.\",\n\t),\n);\nexport const focusedStackFrameColor = registerColor(\n\t\"editor.focusedStackFrameHighlightBackground\",\n\t{\n\t\tdark: \"#7abd7a4d\",\n\t\tlight: \"#cee7ce73\",\n\t\thcDark: \"#7abd7a4d\",\n\t\thcLight: \"#cee7ce73\",\n\t},\n\tlocalize(\n\t\t\"focusedStackFrameLineHighlight\",\n\t\t\"Background color for the highlight of line at focused stack frame position.\",\n\t),\n);\nconst stickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\n// we need a separate decoration for glyph margin, since we do not want it on each line of a multi line statement.\nconst TOP_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tdescription: \"top-stack-frame-margin\",\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframe),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tzIndex: 9999,\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(topStackFrameColor),\n\t},\n};\nconst FOCUSED_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tdescription: \"focused-stack-frame-margin\",\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframeFocused),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tzIndex: 9999,\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(focusedStackFrameColor),\n\t},\n};\nexport const TOP_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tdescription: \"top-stack-frame-decoration\",\n\tisWholeLine: true,\n\tclassName: \"debug-top-stack-frame-line\",\n\tstickiness,\n};\nexport const FOCUSED_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tdescription: \"focused-stack-frame-decoration\",\n\tisWholeLine: true,\n\tclassName: \"debug-focused-stack-frame-line\",\n\tstickiness,\n};\n\nexport const makeStackFrameColumnDecoration = (\n\tnoCharactersBefore: boolean,\n): IModelDecorationOptions => ({\n\tdescription: \"top-stack-frame-inline-decoration\",\n\tbefore: {\n\t\tcontent: \"\\uEB8B\",\n\t\tinlineClassName: noCharactersBefore\n\t\t\t? \"debug-top-stack-frame-column start-of-line\"\n\t\t\t: \"debug-top-stack-frame-column\",\n\t\tinlineClassNameAffectsLetterSpacing: true,\n\t},\n});\n\nexport function createDecorationsForStackFrame(\n\tstackFrame: IStackFrame,\n\tisFocusedSession: boolean,\n\tnoCharactersBefore: boolean,\n): IModelDeltaDecoration[] {\n\t// only show decorations for the currently focused thread.\n\tconst result: IModelDeltaDecoration[] = [];\n\tconst columnUntilEOLRange = new Range(\n\t\tstackFrame.range.startLineNumber,\n\t\tstackFrame.range.startColumn,\n\t\tstackFrame.range.startLineNumber,\n\t\tConstants.MAX_SAFE_SMALL_INTEGER,\n\t);\n\tconst range = new Range(\n\t\tstackFrame.range.startLineNumber,\n\t\tstackFrame.range.startColumn,\n\t\tstackFrame.range.startLineNumber,\n\t\tstackFrame.range.startColumn + 1,\n\t);\n\n\t// compute how to decorate the editor. Different decorations are used if this is a top stack frame, focused stack frame,\n\t// an exception or a stack frame that did not change the line number (we only decorate the columns, not the whole line).\n\tconst topStackFrame = stackFrame.thread.getTopStackFrame();\n\tif (stackFrame.getId() === topStackFrame?.getId()) {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: TOP_STACK_FRAME_MARGIN,\n\t\t\t\trange,\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: TOP_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange,\n\t\t});\n\n\t\tif (stackFrame.range.startColumn > 1) {\n\t\t\tresult.push({\n\t\t\t\toptions: makeStackFrameColumnDecoration(noCharactersBefore),\n\t\t\t\trange: columnUntilEOLRange,\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: FOCUSED_STACK_FRAME_MARGIN,\n\t\t\t\trange,\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: FOCUSED_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange,\n\t\t});\n\t}\n\n\treturn result;\n}\n\nexport class CallStackEditorContribution\n\textends Disposable\n\timplements IEditorContribution\n{\n\tprivate decorations = this.editor.createDecorationsCollection();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tconst setDecorations = () =>\n\t\t\tthis.decorations.set(this.createCallStackDecorations());\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\tthis.debugService.getViewModel().onDidFocusStackFrame,\n\t\t\t\tthis.debugService.getModel().onDidChangeCallStack,\n\t\t\t)(() => {\n\t\t\t\tsetDecorations();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editor.onDidChangeModel((e) => {\n\t\t\t\tif (e.newModelUrl) {\n\t\t\t\t\tsetDecorations();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tsetDecorations();\n\t}\n\n\tprivate createCallStackDecorations(): IModelDeltaDecoration[] {\n\t\tconst editor = this.editor;\n\t\tif (!editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst focusedStackFrame =\n\t\t\tthis.debugService.getViewModel().focusedStackFrame;\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tthis.debugService\n\t\t\t.getModel()\n\t\t\t.getSessions()\n\t\t\t.forEach((s) => {\n\t\t\t\tconst isSessionFocused =\n\t\t\t\t\ts === focusedStackFrame?.thread.session;\n\t\t\t\ts.getAllThreads().forEach((t) => {\n\t\t\t\t\tif (t.stopped) {\n\t\t\t\t\t\tconst callStack = t.getCallStack();\n\t\t\t\t\t\tconst stackFrames: IStackFrame[] = [];\n\t\t\t\t\t\tif (callStack.length > 0) {\n\t\t\t\t\t\t\t// Always decorate top stack frame, and decorate focused stack frame if it is not the top stack frame\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tfocusedStackFrame &&\n\t\t\t\t\t\t\t\t!focusedStackFrame.equals(callStack[0])\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tstackFrames.push(focusedStackFrame);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstackFrames.push(callStack[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstackFrames.forEach((candidateStackFrame) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tcandidateStackFrame &&\n\t\t\t\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\t\tcandidateStackFrame.source.uri,\n\t\t\t\t\t\t\t\t\teditor.getModel()?.uri,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tcandidateStackFrame.range.startLineNumber >\n\t\t\t\t\t\t\t\t\t\teditor.getModel()?.getLineCount() ||\n\t\t\t\t\t\t\t\t\tcandidateStackFrame.range.startLineNumber <\n\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t\t\t`CallStackEditorContribution: invalid stack frame line number: ${candidateStackFrame.range.startLineNumber}`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst noCharactersBefore =\n\t\t\t\t\t\t\t\t\teditor\n\t\t\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t\t\t.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\t\t\t\t\t\tcandidateStackFrame.range\n\t\t\t\t\t\t\t\t\t\t\t\t.startLineNumber,\n\t\t\t\t\t\t\t\t\t\t) >=\n\t\t\t\t\t\t\t\t\tcandidateStackFrame.range.startColumn;\n\t\t\t\t\t\t\t\tdecorations.push(\n\t\t\t\t\t\t\t\t\t...createDecorationsForStackFrame(\n\t\t\t\t\t\t\t\t\t\tcandidateStackFrame,\n\t\t\t\t\t\t\t\t\t\tisSessionFocused,\n\t\t\t\t\t\t\t\t\t\tnoCharactersBefore,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t// Deduplicate same decorations so colors do not stack #109045\n\t\treturn distinct(\n\t\t\tdecorations,\n\t\t\t(d) =>\n\t\t\t\t`${d.options.className} ${d.options.glyphMarginClassName} ${d.range.startLineNumber} ${d.range.startColumn}`,\n\t\t);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.decorations.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
