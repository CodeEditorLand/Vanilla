{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugSession.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as aria from '../../../../base/browser/ui/aria/aria.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { Queue, RunOnceScheduler, raceTimeout } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { canceled } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { normalizeDriveLetter } from '../../../../base/common/labels.js';\nimport { Disposable, DisposableMap, DisposableStore, IDisposable, MutableDisposable, dispose } from '../../../../base/common/lifecycle.js';\nimport { mixin } from '../../../../base/common/objects.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { IPosition, Position } from '../../../../editor/common/core/position.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { ICustomEndpointTelemetryService, ITelemetryService, TelemetryLevel } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceContextService, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { ViewContainerLocation } from '../../../common/views.js';\nimport { RawDebugSession } from './rawDebugSession.js';\nimport { AdapterEndEvent, IBreakpoint, IConfig, IDataBreakpoint, IDataBreakpointInfoResponse, IDebugConfiguration, IDebugLocationReferenced, IDebugService, IDebugSession, IDebugSessionOptions, IDebugger, IExceptionBreakpoint, IExceptionInfo, IFunctionBreakpoint, IInstructionBreakpoint, IMemoryRegion, IRawModelUpdate, IRawStoppedDetails, IReplElement, IStackFrame, IThread, LoadedSourceEvent, State, VIEWLET_ID, isFrameDeemphasized } from '../common/debug.js';\nimport { DebugCompoundRoot } from '../common/debugCompoundRoot.js';\nimport { DebugModel, ExpressionContainer, MemoryRegion, Thread } from '../common/debugModel.js';\nimport { Source } from '../common/debugSource.js';\nimport { filterExceptionsFromTelemetry } from '../common/debugUtils.js';\nimport { INewReplElementData, ReplModel } from '../common/replModel.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { ILifecycleService } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';\nimport { getActiveWindow } from '../../../../base/browser/dom.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { ITestService } from '../../testing/common/testService.js';\nimport { ITestResultService } from '../../testing/common/testResultService.js';\nimport { LiveTestResult } from '../../testing/common/testResult.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\n\nconst TRIGGERED_BREAKPOINT_MAX_DELAY = 1500;\n\nexport class DebugSession implements IDebugSession, IDisposable {\n\tparentSession: IDebugSession | undefined;\n\n\tprivate _subId: string | undefined;\n\traw: RawDebugSession | undefined; // used in tests\n\tprivate initialized = false;\n\tprivate _options: IDebugSessionOptions;\n\n\tprivate sources = new Map<string, Source>();\n\tprivate threads = new Map<number, Thread>();\n\tprivate threadIds: number[] = [];\n\tprivate cancellationMap = new Map<number, CancellationTokenSource[]>();\n\tprivate readonly rawListeners = new DisposableStore();\n\tprivate readonly globalDisposables = new DisposableStore();\n\tprivate fetchThreadsScheduler: RunOnceScheduler | undefined;\n\tprivate passFocusScheduler: RunOnceScheduler;\n\tprivate lastContinuedThreadId: number | undefined;\n\tprivate repl: ReplModel;\n\tprivate stoppedDetails: IRawStoppedDetails[] = [];\n\tprivate readonly statusQueue = this.rawListeners.add(new ThreadStatusScheduler());\n\n\t/** Test run this debug session was spawned by */\n\tpublic readonly correlatedTestRun?: LiveTestResult;\n\t/** Whether we terminated the correlated run yet. Used so a 2nd terminate request goes through to the underlying session. */\n\tprivate didTerminateTestRun?: boolean;\n\n\tprivate readonly _onDidChangeState = new Emitter<void>();\n\tprivate readonly _onDidEndAdapter = new Emitter<AdapterEndEvent | undefined>();\n\n\tprivate readonly _onDidLoadedSource = new Emitter<LoadedSourceEvent>();\n\tprivate readonly _onDidCustomEvent = new Emitter<DebugProtocol.Event>();\n\tprivate readonly _onDidProgressStart = new Emitter<DebugProtocol.ProgressStartEvent>();\n\tprivate readonly _onDidProgressUpdate = new Emitter<DebugProtocol.ProgressUpdateEvent>();\n\tprivate readonly _onDidProgressEnd = new Emitter<DebugProtocol.ProgressEndEvent>();\n\tprivate readonly _onDidInvalidMemory = new Emitter<DebugProtocol.MemoryEvent>();\n\n\tprivate readonly _onDidChangeREPLElements = new Emitter<IReplElement | undefined>();\n\n\tprivate _name: string | undefined;\n\tprivate readonly _onDidChangeName = new Emitter<string>();\n\n\t/**\n\t * Promise set while enabling dependent breakpoints to block the debugger\n\t * from continuing from a stopped state.\n\t */\n\tprivate _waitToResume?: Promise<unknown>;\n\n\tconstructor(\n\t\tprivate id: string,\n\t\tprivate _configuration: { resolved: IConfig; unresolved: IConfig | undefined },\n\t\tpublic root: IWorkspaceFolder | undefined,\n\t\tprivate model: DebugModel,\n\t\toptions: IDebugSessionOptions | undefined,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICustomEndpointTelemetryService private readonly customEndpointTelemetryService: ICustomEndpointTelemetryService,\n\t\t@IWorkbenchEnvironmentService private readonly workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService testResultService: ITestResultService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t) {\n\t\tthis._options = options || {};\n\t\tthis.parentSession = this._options.parentSession;\n\t\tif (this.hasSeparateRepl()) {\n\t\t\tthis.repl = new ReplModel(this.configurationService);\n\t\t} else {\n\t\t\tthis.repl = (this.parentSession as DebugSession).repl;\n\t\t}\n\n\t\tconst toDispose = this.globalDisposables;\n\t\tconst replListener = toDispose.add(new MutableDisposable());\n\t\treplListener.value = this.repl.onDidChangeElements((e) => this._onDidChangeREPLElements.fire(e));\n\t\tif (lifecycleService) {\n\t\t\ttoDispose.add(lifecycleService.onWillShutdown(() => {\n\t\t\t\tthis.shutdown();\n\t\t\t\tdispose(toDispose);\n\t\t\t}));\n\t\t}\n\n\t\t// Cast here, it's not possible to reference a hydrated result in this code path.\n\t\tthis.correlatedTestRun = options?.testRun\n\t\t\t? (testResultService.getResult(options.testRun.runId) as LiveTestResult)\n\t\t\t: this.parentSession?.correlatedTestRun;\n\n\t\tif (this.correlatedTestRun) {\n\t\t\t// Listen to the test completing because the user might have taken the cancel action rather than stopping the session.\n\t\t\ttoDispose.add(this.correlatedTestRun.onComplete(() => this.terminate()));\n\t\t}\n\n\t\tconst compoundRoot = this._options.compoundRoot;\n\t\tif (compoundRoot) {\n\t\t\ttoDispose.add(compoundRoot.onDidSessionStop(() => this.terminate()));\n\t\t}\n\t\tthis.passFocusScheduler = new RunOnceScheduler(() => {\n\t\t\t// If there is some session or thread that is stopped pass focus to it\n\t\t\tif (this.debugService.getModel().getSessions().some(s => s.state === State.Stopped) || this.getAllThreads().some(t => t.stopped)) {\n\t\t\t\tif (typeof this.lastContinuedThreadId === 'number') {\n\t\t\t\t\tconst thread = this.debugService.getViewModel().focusedThread;\n\t\t\t\t\tif (thread && thread.threadId === this.lastContinuedThreadId && !thread.stopped) {\n\t\t\t\t\t\tconst toFocusThreadId = this.getStoppedDetails()?.threadId;\n\t\t\t\t\t\tconst toFocusThread = typeof toFocusThreadId === 'number' ? this.getThread(toFocusThreadId) : undefined;\n\t\t\t\t\t\tthis.debugService.focusStackFrame(undefined, toFocusThread);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\t\t\t\tif (session && session.getId() === this.getId() && session.state !== State.Stopped) {\n\t\t\t\t\t\tthis.debugService.focusStackFrame(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 800);\n\n\t\tconst parent = this._options.parentSession;\n\t\tif (parent) {\n\t\t\ttoDispose.add(parent.onDidEndAdapter(() => {\n\t\t\t\t// copy the parent repl and get a new detached repl for this child, and\n\t\t\t\t// remove its parent, if it's still running\n\t\t\t\tif (!this.hasSeparateRepl() && this.raw?.isInShutdown === false) {\n\t\t\t\t\tthis.repl = this.repl.clone();\n\t\t\t\t\treplListener.value = this.repl.onDidChangeElements((e) => this._onDidChangeREPLElements.fire(e));\n\t\t\t\t\tthis.parentSession = undefined;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tsetSubId(subId: string | undefined) {\n\t\tthis._subId = subId;\n\t}\n\n\tgetMemory(memoryReference: string): IMemoryRegion {\n\t\treturn new MemoryRegion(memoryReference, this);\n\t}\n\n\tget subId(): string | undefined {\n\t\treturn this._subId;\n\t}\n\n\tget configuration(): IConfig {\n\t\treturn this._configuration.resolved;\n\t}\n\n\tget unresolvedConfiguration(): IConfig | undefined {\n\t\treturn this._configuration.unresolved;\n\t}\n\n\tget lifecycleManagedByParent(): boolean {\n\t\treturn !!this._options.lifecycleManagedByParent;\n\t}\n\n\tget compact(): boolean {\n\t\treturn !!this._options.compact;\n\t}\n\n\tget saveBeforeRestart(): boolean {\n\t\treturn this._options.saveBeforeRestart ?? !this._options?.parentSession;\n\t}\n\n\tget compoundRoot(): DebugCompoundRoot | undefined {\n\t\treturn this._options.compoundRoot;\n\t}\n\n\tget suppressDebugStatusbar(): boolean {\n\t\treturn this._options.suppressDebugStatusbar ?? false;\n\t}\n\n\tget suppressDebugToolbar(): boolean {\n\t\treturn this._options.suppressDebugToolbar ?? false;\n\t}\n\n\tget suppressDebugView(): boolean {\n\t\treturn this._options.suppressDebugView ?? false;\n\t}\n\n\n\tget autoExpandLazyVariables(): boolean {\n\t\t// This tiny helper avoids converting the entire debug model to use service injection\n\t\tconst screenReaderOptimized = this.accessibilityService.isScreenReaderOptimized();\n\t\tconst value = this.configurationService.getValue<IDebugConfiguration>('debug').autoExpandLazyVariables;\n\t\treturn value === 'auto' && screenReaderOptimized || value === 'on';\n\t}\n\n\tsetConfiguration(configuration: { resolved: IConfig; unresolved: IConfig | undefined }) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetLabel(): string {\n\t\tconst includeRoot = this.workspaceContextService.getWorkspace().folders.length > 1;\n\t\treturn includeRoot && this.root ? `${this.name} (${resources.basenameOrAuthority(this.root.uri)})` : this.name;\n\t}\n\n\tsetName(name: string): void {\n\t\tthis._name = name;\n\t\tthis._onDidChangeName.fire(name);\n\t}\n\n\tget name(): string {\n\t\treturn this._name || this.configuration.name;\n\t}\n\n\tget state(): State {\n\t\tif (!this.initialized) {\n\t\t\treturn State.Initializing;\n\t\t}\n\t\tif (!this.raw) {\n\t\t\treturn State.Inactive;\n\t\t}\n\n\t\tconst focusedThread = this.debugService.getViewModel().focusedThread;\n\t\tif (focusedThread && focusedThread.session === this) {\n\t\t\treturn focusedThread.stopped ? State.Stopped : State.Running;\n\t\t}\n\t\tif (this.getAllThreads().some(t => t.stopped)) {\n\t\t\treturn State.Stopped;\n\t\t}\n\n\t\treturn State.Running;\n\t}\n\n\tget capabilities(): DebugProtocol.Capabilities {\n\t\treturn this.raw ? this.raw.capabilities : Object.create(null);\n\t}\n\n\t//---- events\n\tget onDidChangeState(): Event<void> {\n\t\treturn this._onDidChangeState.event;\n\t}\n\n\tget onDidEndAdapter(): Event<AdapterEndEvent | undefined> {\n\t\treturn this._onDidEndAdapter.event;\n\t}\n\n\tget onDidChangeReplElements(): Event<IReplElement | undefined> {\n\t\treturn this._onDidChangeREPLElements.event;\n\t}\n\n\tget onDidChangeName(): Event<string> {\n\t\treturn this._onDidChangeName.event;\n\t}\n\n\t//---- DAP events\n\n\tget onDidCustomEvent(): Event<DebugProtocol.Event> {\n\t\treturn this._onDidCustomEvent.event;\n\t}\n\n\tget onDidLoadedSource(): Event<LoadedSourceEvent> {\n\t\treturn this._onDidLoadedSource.event;\n\t}\n\n\tget onDidProgressStart(): Event<DebugProtocol.ProgressStartEvent> {\n\t\treturn this._onDidProgressStart.event;\n\t}\n\n\tget onDidProgressUpdate(): Event<DebugProtocol.ProgressUpdateEvent> {\n\t\treturn this._onDidProgressUpdate.event;\n\t}\n\n\tget onDidProgressEnd(): Event<DebugProtocol.ProgressEndEvent> {\n\t\treturn this._onDidProgressEnd.event;\n\t}\n\n\tget onDidInvalidateMemory(): Event<DebugProtocol.MemoryEvent> {\n\t\treturn this._onDidInvalidMemory.event;\n\t}\n\n\t//---- DAP requests\n\n\t/**\n\t * create and initialize a new debug adapter for this session\n\t */\n\tasync initialize(dbgr: IDebugger): Promise<void> {\n\n\t\tif (this.raw) {\n\t\t\t// if there was already a connection make sure to remove old listeners\n\t\t\tawait this.shutdown();\n\t\t}\n\n\t\ttry {\n\t\t\tconst debugAdapter = await dbgr.createDebugAdapter(this);\n\t\t\tthis.raw = this.instantiationService.createInstance(RawDebugSession, debugAdapter, dbgr, this.id, this.configuration.name);\n\n\t\t\tawait this.raw.start();\n\t\t\tthis.registerListeners();\n\t\t\tawait this.raw.initialize({\n\t\t\t\tclientID: 'vscode',\n\t\t\t\tclientName: this.productService.nameLong,\n\t\t\t\tadapterID: this.configuration.type,\n\t\t\t\tpathFormat: 'path',\n\t\t\t\tlinesStartAt1: true,\n\t\t\t\tcolumnsStartAt1: true,\n\t\t\t\tsupportsVariableType: true, // #8858\n\t\t\t\tsupportsVariablePaging: true, // #9537\n\t\t\t\tsupportsRunInTerminalRequest: true, // #10574\n\t\t\t\tlocale: platform.language, // #169114\n\t\t\t\tsupportsProgressReporting: true, // #92253\n\t\t\t\tsupportsInvalidatedEvent: true, // #106745\n\t\t\t\tsupportsMemoryReferences: true, //#129684\n\t\t\t\tsupportsArgsCanBeInterpretedByShell: true, // #149910\n\t\t\t\tsupportsMemoryEvent: true, // #133643\n\t\t\t\tsupportsStartDebuggingRequest: true,\n\t\t\t\tsupportsANSIStyling: true,\n\t\t\t});\n\n\t\t\tthis.initialized = true;\n\t\t\tthis._onDidChangeState.fire();\n\t\t\tthis.debugService.setExceptionBreakpointsForSession(this, (this.raw && this.raw.capabilities.exceptionBreakpointFilters) || []);\n\t\t\tthis.debugService.getModel().registerBreakpointModes(this.configuration.type, this.raw.capabilities.breakpointModes || []);\n\t\t} catch (err) {\n\t\t\tthis.initialized = true;\n\t\t\tthis._onDidChangeState.fire();\n\t\t\tawait this.shutdown();\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * launch or attach to the debuggee\n\t */\n\tasync launchOrAttach(config: IConfig): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'launch or attach'));\n\t\t}\n\t\tif (this.parentSession && this.parentSession.state === State.Inactive) {\n\t\t\tthrow canceled();\n\t\t}\n\n\t\t// __sessionID only used for EH debugging (but we add it always for now...)\n\t\tconfig.__sessionId = this.getId();\n\t\ttry {\n\t\t\tawait this.raw.launchOrAttach(config);\n\t\t} catch (err) {\n\t\t\tthis.shutdown();\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * terminate the current debug adapter session\n\t */\n\tasync terminate(restart = false): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\t// Adapter went down but it did not send a 'terminated' event, simulate like the event has been sent\n\t\t\tthis.onDidExitAdapter();\n\t\t}\n\n\t\tthis.cancelAllRequests();\n\t\tif (this._options.lifecycleManagedByParent && this.parentSession) {\n\t\t\tawait this.parentSession.terminate(restart);\n\t\t} else if (this.correlatedTestRun && !this.correlatedTestRun.completedAt && !this.didTerminateTestRun) {\n\t\t\tthis.didTerminateTestRun = true;\n\t\t\tthis.testService.cancelTestRun(this.correlatedTestRun.id);\n\t\t} else if (this.raw) {\n\t\t\tif (this.raw.capabilities.supportsTerminateRequest && this._configuration.resolved.request === 'launch') {\n\t\t\t\tawait this.raw.terminate(restart);\n\t\t\t} else {\n\t\t\t\tawait this.raw.disconnect({ restart, terminateDebuggee: true });\n\t\t\t}\n\t\t}\n\n\t\tif (!restart) {\n\t\t\tthis._options.compoundRoot?.sessionStopped();\n\t\t}\n\t}\n\n\t/**\n\t * end the current debug adapter session\n\t */\n\tasync disconnect(restart = false, suspend = false): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\t// Adapter went down but it did not send a 'terminated' event, simulate like the event has been sent\n\t\t\tthis.onDidExitAdapter();\n\t\t}\n\n\t\tthis.cancelAllRequests();\n\t\tif (this._options.lifecycleManagedByParent && this.parentSession) {\n\t\t\tawait this.parentSession.disconnect(restart, suspend);\n\t\t} else if (this.raw) {\n\t\t\t// TODO terminateDebuggee should be undefined by default?\n\t\t\tawait this.raw.disconnect({ restart, terminateDebuggee: false, suspendDebuggee: suspend });\n\t\t}\n\n\t\tif (!restart) {\n\t\t\tthis._options.compoundRoot?.sessionStopped();\n\t\t}\n\t}\n\n\t/**\n\t * restart debug adapter session\n\t */\n\tasync restart(): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'restart'));\n\t\t}\n\n\t\tthis.cancelAllRequests();\n\t\tif (this._options.lifecycleManagedByParent && this.parentSession) {\n\t\t\tawait this.parentSession.restart();\n\t\t} else {\n\t\t\tawait this.raw.restart({ arguments: this.configuration });\n\t\t}\n\t}\n\n\tasync sendBreakpoints(modelUri: URI, breakpointsToSend: IBreakpoint[], sourceModified: boolean): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'breakpoints'));\n\t\t}\n\n\t\tif (!this.raw.readyForBreakpoints) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst rawSource = this.getRawSource(modelUri);\n\t\tif (breakpointsToSend.length && !rawSource.adapterData) {\n\t\t\trawSource.adapterData = breakpointsToSend[0].adapterData;\n\t\t}\n\t\t// Normalize all drive letters going out from vscode to debug adapters so we are consistent with our resolving #43959\n\t\tif (rawSource.path) {\n\t\t\trawSource.path = normalizeDriveLetter(rawSource.path);\n\t\t}\n\n\t\tconst response = await this.raw.setBreakpoints({\n\t\t\tsource: rawSource,\n\t\t\tlines: breakpointsToSend.map(bp => bp.sessionAgnosticData.lineNumber),\n\t\t\tbreakpoints: breakpointsToSend.map(bp => bp.toDAP()),\n\t\t\tsourceModified\n\t\t});\n\t\tif (response?.body) {\n\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\tfor (let i = 0; i < breakpointsToSend.length; i++) {\n\t\t\t\tdata.set(breakpointsToSend[i].getId(), response.body.breakpoints[i]);\n\t\t\t}\n\n\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t}\n\t}\n\n\tasync sendFunctionBreakpoints(fbpts: IFunctionBreakpoint[]): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'function breakpoints'));\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst response = await this.raw.setFunctionBreakpoints({ breakpoints: fbpts.map(bp => bp.toDAP()) });\n\t\t\tif (response?.body) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tfor (let i = 0; i < fbpts.length; i++) {\n\t\t\t\t\tdata.set(fbpts[i].getId(), response.body.breakpoints[i]);\n\t\t\t\t}\n\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendExceptionBreakpoints(exbpts: IExceptionBreakpoint[]): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'exception breakpoints'));\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst args: DebugProtocol.SetExceptionBreakpointsArguments = this.capabilities.supportsExceptionFilterOptions ? {\n\t\t\t\tfilters: [],\n\t\t\t\tfilterOptions: exbpts.map(exb => {\n\t\t\t\t\tif (exb.condition) {\n\t\t\t\t\t\treturn { filterId: exb.filter, condition: exb.condition };\n\t\t\t\t\t}\n\n\t\t\t\t\treturn { filterId: exb.filter };\n\t\t\t\t})\n\t\t\t} : { filters: exbpts.map(exb => exb.filter) };\n\n\t\t\tconst response = await this.raw.setExceptionBreakpoints(args);\n\t\t\tif (response?.body && response.body.breakpoints) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tfor (let i = 0; i < exbpts.length; i++) {\n\t\t\t\t\tdata.set(exbpts[i].getId(), response.body.breakpoints[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t}\n\t\t}\n\t}\n\n\tdataBytesBreakpointInfo(address: string, bytes: number): Promise<IDataBreakpointInfoResponse | undefined> {\n\t\tif (this.raw?.capabilities.supportsDataBreakpointBytes === false) {\n\t\t\tthrow new Error(localize('sessionDoesNotSupporBytesBreakpoints', \"Session does not support breakpoints with bytes\"));\n\t\t}\n\n\t\treturn this._dataBreakpointInfo({ name: address, bytes, asAddress: true });\n\t}\n\n\tdataBreakpointInfo(name: string, variablesReference?: number): Promise<{ dataId: string | null; description: string; canPersist?: boolean } | undefined> {\n\t\treturn this._dataBreakpointInfo({ name, variablesReference });\n\t}\n\n\tprivate async _dataBreakpointInfo(args: DebugProtocol.DataBreakpointInfoArguments): Promise<{ dataId: string | null; description: string; canPersist?: boolean } | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'data breakpoints info'));\n\t\t}\n\t\tif (!this.raw.readyForBreakpoints) {\n\t\t\tthrow new Error(localize('sessionNotReadyForBreakpoints', \"Session is not ready for breakpoints\"));\n\t\t}\n\n\t\tconst response = await this.raw.dataBreakpointInfo(args);\n\t\treturn response?.body;\n\t}\n\n\tasync sendDataBreakpoints(dataBreakpoints: IDataBreakpoint[]): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'data breakpoints'));\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst converted = await Promise.all(dataBreakpoints.map(async bp => {\n\t\t\t\ttry {\n\t\t\t\t\tconst dap = await bp.toDAP(this);\n\t\t\t\t\treturn { dap, bp };\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn { bp, message: e.message };\n\t\t\t\t}\n\t\t\t}));\n\t\t\tconst response = await this.raw.setDataBreakpoints({ breakpoints: converted.map(d => d.dap).filter(isDefined) });\n\t\t\tif (response?.body) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (const dap of converted) {\n\t\t\t\t\tif (!dap.dap) {\n\t\t\t\t\t\tdata.set(dap.bp.getId(), dap.message);\n\t\t\t\t\t} else if (i < response.body.breakpoints.length) {\n\t\t\t\t\t\tdata.set(dap.bp.getId(), response.body.breakpoints[i++]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendInstructionBreakpoints(instructionBreakpoints: IInstructionBreakpoint[]): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'instruction breakpoints'));\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst response = await this.raw.setInstructionBreakpoints({ breakpoints: instructionBreakpoints.map(ib => ib.toDAP()) });\n\t\t\tif (response?.body) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tfor (let i = 0; i < instructionBreakpoints.length; i++) {\n\t\t\t\t\tdata.set(instructionBreakpoints[i].getId(), response.body.breakpoints[i]);\n\t\t\t\t}\n\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync breakpointsLocations(uri: URI, lineNumber: number): Promise<IPosition[]> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'breakpoints locations'));\n\t\t}\n\n\t\tconst source = this.getRawSource(uri);\n\t\tconst response = await this.raw.breakpointLocations({ source, line: lineNumber });\n\t\tif (!response || !response.body || !response.body.breakpoints) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst positions = response.body.breakpoints.map(bp => ({ lineNumber: bp.line, column: bp.column || 1 }));\n\n\t\treturn distinct(positions, p => `${p.lineNumber}:${p.column}`);\n\t}\n\n\tgetDebugProtocolBreakpoint(breakpointId: string): DebugProtocol.Breakpoint | undefined {\n\t\treturn this.model.getDebugProtocolBreakpoint(breakpointId, this.getId());\n\t}\n\n\tcustomRequest(request: string, args: any): Promise<DebugProtocol.Response | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", request));\n\t\t}\n\n\t\treturn this.raw.custom(request, args);\n\t}\n\n\tstackTrace(threadId: number, startFrame: number, levels: number, token: CancellationToken): Promise<DebugProtocol.StackTraceResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'stackTrace'));\n\t\t}\n\n\t\tconst sessionToken = this.getNewCancellationToken(threadId, token);\n\t\treturn this.raw.stackTrace({ threadId, startFrame, levels }, sessionToken);\n\t}\n\n\tasync exceptionInfo(threadId: number): Promise<IExceptionInfo | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'exceptionInfo'));\n\t\t}\n\n\t\tconst response = await this.raw.exceptionInfo({ threadId });\n\t\tif (response) {\n\t\t\treturn {\n\t\t\t\tid: response.body.exceptionId,\n\t\t\t\tdescription: response.body.description,\n\t\t\t\tbreakMode: response.body.breakMode,\n\t\t\t\tdetails: response.body.details\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tscopes(frameId: number, threadId: number): Promise<DebugProtocol.ScopesResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'scopes'));\n\t\t}\n\n\t\tconst token = this.getNewCancellationToken(threadId);\n\t\treturn this.raw.scopes({ frameId }, token);\n\t}\n\n\tvariables(variablesReference: number, threadId: number | undefined, filter: 'indexed' | 'named' | undefined, start: number | undefined, count: number | undefined): Promise<DebugProtocol.VariablesResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'variables'));\n\t\t}\n\n\t\tconst token = threadId ? this.getNewCancellationToken(threadId) : undefined;\n\t\treturn this.raw.variables({ variablesReference, filter, start, count }, token);\n\t}\n\n\tevaluate(expression: string, frameId: number, context?: string, location?: { line: number; column: number; source: DebugProtocol.Source }): Promise<DebugProtocol.EvaluateResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'evaluate'));\n\t\t}\n\n\t\treturn this.raw.evaluate({ expression, frameId, context, line: location?.line, column: location?.column, source: location?.source });\n\t}\n\n\tasync restartFrame(frameId: number, threadId: number): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'restartFrame'));\n\t\t}\n\n\t\tawait this.raw.restartFrame({ frameId }, threadId);\n\t}\n\n\tprivate setLastSteppingGranularity(threadId: number, granularity?: DebugProtocol.SteppingGranularity) {\n\t\tconst thread = this.getThread(threadId);\n\t\tif (thread) {\n\t\t\tthread.lastSteppingGranularity = granularity;\n\t\t}\n\t}\n\n\tasync next(threadId: number, granularity?: DebugProtocol.SteppingGranularity): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'next'));\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.next({ threadId, granularity });\n\t}\n\n\tasync stepIn(threadId: number, targetId?: number, granularity?: DebugProtocol.SteppingGranularity): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'stepIn'));\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.stepIn({ threadId, targetId, granularity });\n\t}\n\n\tasync stepOut(threadId: number, granularity?: DebugProtocol.SteppingGranularity): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'stepOut'));\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.stepOut({ threadId, granularity });\n\t}\n\n\tasync stepBack(threadId: number, granularity?: DebugProtocol.SteppingGranularity): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'stepBack'));\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.stepBack({ threadId, granularity });\n\t}\n\n\tasync continue(threadId: number): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'continue'));\n\t\t}\n\n\t\tawait this.raw.continue({ threadId });\n\t}\n\n\tasync reverseContinue(threadId: number): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'reverse continue'));\n\t\t}\n\n\t\tawait this.raw.reverseContinue({ threadId });\n\t}\n\n\tasync pause(threadId: number): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'pause'));\n\t\t}\n\n\t\tawait this.raw.pause({ threadId });\n\t}\n\n\tasync terminateThreads(threadIds?: number[]): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'terminateThreads'));\n\t\t}\n\n\t\tawait this.raw.terminateThreads({ threadIds });\n\t}\n\n\tsetVariable(variablesReference: number, name: string, value: string): Promise<DebugProtocol.SetVariableResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'setVariable'));\n\t\t}\n\n\t\treturn this.raw.setVariable({ variablesReference, name, value });\n\t}\n\n\tsetExpression(frameId: number, expression: string, value: string): Promise<DebugProtocol.SetExpressionResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'setExpression'));\n\t\t}\n\n\t\treturn this.raw.setExpression({ expression, value, frameId });\n\t}\n\n\tgotoTargets(source: DebugProtocol.Source, line: number, column?: number): Promise<DebugProtocol.GotoTargetsResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'gotoTargets'));\n\t\t}\n\n\t\treturn this.raw.gotoTargets({ source, line, column });\n\t}\n\n\tgoto(threadId: number, targetId: number): Promise<DebugProtocol.GotoResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'goto'));\n\t\t}\n\n\t\treturn this.raw.goto({ threadId, targetId });\n\t}\n\n\tloadSource(resource: URI): Promise<DebugProtocol.SourceResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'loadSource')));\n\t\t}\n\n\t\tconst source = this.getSourceForUri(resource);\n\t\tlet rawSource: DebugProtocol.Source;\n\t\tif (source) {\n\t\t\trawSource = source.raw;\n\t\t} else {\n\t\t\t// create a Source\n\t\t\tconst data = Source.getEncodedDebugData(resource);\n\t\t\trawSource = { path: data.path, sourceReference: data.sourceReference };\n\t\t}\n\n\t\treturn this.raw.source({ sourceReference: rawSource.sourceReference || 0, source: rawSource });\n\t}\n\n\tasync getLoadedSources(): Promise<Source[]> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'getLoadedSources')));\n\t\t}\n\n\t\tconst response = await this.raw.loadedSources({});\n\t\tif (response?.body && response.body.sources) {\n\t\t\treturn response.body.sources.map(src => this.getSource(src));\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tasync completions(frameId: number | undefined, threadId: number, text: string, position: Position, overwriteBefore: number, token: CancellationToken): Promise<DebugProtocol.CompletionsResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'completions')));\n\t\t}\n\t\tconst sessionCancelationToken = this.getNewCancellationToken(threadId, token);\n\n\t\treturn this.raw.completions({\n\t\t\tframeId,\n\t\t\ttext,\n\t\t\tcolumn: position.column,\n\t\t\tline: position.lineNumber,\n\t\t}, sessionCancelationToken);\n\t}\n\n\tasync stepInTargets(frameId: number): Promise<{ id: number; label: string }[] | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'stepInTargets')));\n\t\t}\n\n\t\tconst response = await this.raw.stepInTargets({ frameId });\n\t\treturn response?.body.targets;\n\t}\n\n\tasync cancel(progressId: string): Promise<DebugProtocol.CancelResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'cancel')));\n\t\t}\n\n\t\treturn this.raw.cancel({ progressId });\n\t}\n\n\tasync disassemble(memoryReference: string, offset: number, instructionOffset: number, instructionCount: number): Promise<DebugProtocol.DisassembledInstruction[] | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'disassemble')));\n\t\t}\n\n\t\tconst response = await this.raw.disassemble({ memoryReference, offset, instructionOffset, instructionCount, resolveSymbols: true });\n\t\treturn response?.body?.instructions;\n\t}\n\n\treadMemory(memoryReference: string, offset: number, count: number): Promise<DebugProtocol.ReadMemoryResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'readMemory')));\n\t\t}\n\n\t\treturn this.raw.readMemory({ count, memoryReference, offset });\n\t}\n\n\twriteMemory(memoryReference: string, offset: number, data: string, allowPartial?: boolean): Promise<DebugProtocol.WriteMemoryResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'disassemble')));\n\t\t}\n\n\t\treturn this.raw.writeMemory({ memoryReference, offset, allowPartial, data });\n\t}\n\n\tasync resolveLocationReference(locationReference: number): Promise<IDebugLocationReferenced> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'locations'));\n\t\t}\n\n\t\tconst location = await this.raw.locations({ locationReference });\n\t\tif (!location?.body) {\n\t\t\tthrow new Error(localize('noDebugAdapter', \"No debugger available, can not send '{0}'\", 'locations'));\n\t\t}\n\n\t\tconst source = this.getSource(location.body.source);\n\t\treturn { column: 1, ...location.body, source };\n\t}\n\n\t//---- threads\n\n\tgetThread(threadId: number): Thread | undefined {\n\t\treturn this.threads.get(threadId);\n\t}\n\n\tgetAllThreads(): IThread[] {\n\t\tconst result: IThread[] = [];\n\t\tthis.threadIds.forEach((threadId) => {\n\t\t\tconst thread = this.threads.get(threadId);\n\t\t\tif (thread) {\n\t\t\t\tresult.push(thread);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tclearThreads(removeThreads: boolean, reference: number | undefined = undefined): void {\n\t\tif (reference !== undefined && reference !== null) {\n\t\t\tconst thread = this.threads.get(reference);\n\t\t\tif (thread) {\n\t\t\t\tthread.clearCallStack();\n\t\t\t\tthread.stoppedDetails = undefined;\n\t\t\t\tthread.stopped = false;\n\n\t\t\t\tif (removeThreads) {\n\t\t\t\t\tthis.threads.delete(reference);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.threads.forEach(thread => {\n\t\t\t\tthread.clearCallStack();\n\t\t\t\tthread.stoppedDetails = undefined;\n\t\t\t\tthread.stopped = false;\n\t\t\t});\n\n\t\t\tif (removeThreads) {\n\t\t\t\tthis.threads.clear();\n\t\t\t\tthis.threadIds = [];\n\t\t\t\tExpressionContainer.allValues.clear();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetStoppedDetails(): IRawStoppedDetails | undefined {\n\t\treturn this.stoppedDetails.length >= 1 ? this.stoppedDetails[0] : undefined;\n\t}\n\n\trawUpdate(data: IRawModelUpdate): void {\n\t\tthis.threadIds = [];\n\t\tdata.threads.forEach(thread => {\n\t\t\tthis.threadIds.push(thread.id);\n\t\t\tif (!this.threads.has(thread.id)) {\n\t\t\t\t// A new thread came in, initialize it.\n\t\t\t\tthis.threads.set(thread.id, new Thread(this, thread.name, thread.id));\n\t\t\t} else if (thread.name) {\n\t\t\t\t// Just the thread name got updated #18244\n\t\t\t\tconst oldThread = this.threads.get(thread.id);\n\t\t\t\tif (oldThread) {\n\t\t\t\t\toldThread.name = thread.name;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.threads.forEach(t => {\n\t\t\t// Remove all old threads which are no longer part of the update #75980\n\t\t\tif (this.threadIds.indexOf(t.threadId) === -1) {\n\t\t\t\tthis.threads.delete(t.threadId);\n\t\t\t}\n\t\t});\n\n\t\tconst stoppedDetails = data.stoppedDetails;\n\t\tif (stoppedDetails) {\n\t\t\t// Set the availability of the threads' callstacks depending on\n\t\t\t// whether the thread is stopped or not\n\t\t\tif (stoppedDetails.allThreadsStopped) {\n\t\t\t\tthis.threads.forEach(thread => {\n\t\t\t\t\tthread.stoppedDetails = thread.threadId === stoppedDetails.threadId ? stoppedDetails : { reason: thread.stoppedDetails?.reason };\n\t\t\t\t\tthread.stopped = true;\n\t\t\t\t\tthread.clearCallStack();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst thread = typeof stoppedDetails.threadId === 'number' ? this.threads.get(stoppedDetails.threadId) : undefined;\n\t\t\t\tif (thread) {\n\t\t\t\t\t// One thread is stopped, only update that thread.\n\t\t\t\t\tthread.stoppedDetails = stoppedDetails;\n\t\t\t\t\tthread.clearCallStack();\n\t\t\t\t\tthread.stopped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate waitForTriggeredBreakpoints() {\n\t\tif (!this._waitToResume) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn raceTimeout(\n\t\t\tthis._waitToResume,\n\t\t\tTRIGGERED_BREAKPOINT_MAX_DELAY\n\t\t);\n\t}\n\n\tprivate async fetchThreads(stoppedDetails?: IRawStoppedDetails): Promise<void> {\n\t\tif (this.raw) {\n\t\t\tconst response = await this.raw.threads();\n\t\t\tif (response?.body && response.body.threads) {\n\t\t\t\tthis.model.rawUpdate({\n\t\t\t\t\tsessionId: this.getId(),\n\t\t\t\t\tthreads: response.body.threads,\n\t\t\t\t\tstoppedDetails\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tinitializeForTest(raw: RawDebugSession): void {\n\t\tthis.raw = raw;\n\t\tthis.registerListeners();\n\t}\n\n\t//---- private\n\n\tprivate registerListeners(): void {\n\t\tif (!this.raw) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rawListeners.add(this.raw.onDidInitialize(async () => {\n\t\t\taria.status(\n\t\t\t\tthis.configuration.noDebug\n\t\t\t\t\t? localize('debuggingStartedNoDebug', \"Started running without debugging.\")\n\t\t\t\t\t: localize('debuggingStarted', \"Debugging started.\")\n\t\t\t);\n\n\t\t\tconst sendConfigurationDone = async () => {\n\t\t\t\tif (this.raw && this.raw.capabilities.supportsConfigurationDoneRequest) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.raw.configurationDone();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// Disconnect the debug session on configuration done error #10596\n\t\t\t\t\t\tthis.notificationService.error(e);\n\t\t\t\t\t\tthis.raw?.disconnect({});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t};\n\n\t\t\t// Send all breakpoints\n\t\t\ttry {\n\t\t\t\tawait this.debugService.sendAllBreakpoints(this);\n\t\t\t} finally {\n\t\t\t\tawait sendConfigurationDone();\n\t\t\t\tawait this.fetchThreads();\n\t\t\t}\n\t\t}));\n\n\n\t\tconst statusQueue = this.statusQueue;\n\t\tthis.rawListeners.add(this.raw.onDidStop(event => this.handleStop(event.body)));\n\n\t\tthis.rawListeners.add(this.raw.onDidThread(event => {\n\t\t\tstatusQueue.cancel([event.body.threadId]);\n\t\t\tif (event.body.reason === 'started') {\n\t\t\t\t// debounce to reduce threadsRequest frequency and improve performance\n\t\t\t\tif (!this.fetchThreadsScheduler) {\n\t\t\t\t\tthis.fetchThreadsScheduler = new RunOnceScheduler(() => {\n\t\t\t\t\t\tthis.fetchThreads();\n\t\t\t\t\t}, 100);\n\t\t\t\t\tthis.rawListeners.add(this.fetchThreadsScheduler);\n\t\t\t\t}\n\t\t\t\tif (!this.fetchThreadsScheduler.isScheduled()) {\n\t\t\t\t\tthis.fetchThreadsScheduler.schedule();\n\t\t\t\t}\n\t\t\t} else if (event.body.reason === 'exited') {\n\t\t\t\tthis.model.clearThreads(this.getId(), true, event.body.threadId);\n\t\t\t\tconst viewModel = this.debugService.getViewModel();\n\t\t\t\tconst focusedThread = viewModel.focusedThread;\n\t\t\t\tthis.passFocusScheduler.cancel();\n\t\t\t\tif (focusedThread && event.body.threadId === focusedThread.threadId) {\n\t\t\t\t\t// De-focus the thread in case it was focused\n\t\t\t\t\tthis.debugService.focusStackFrame(undefined, undefined, viewModel.focusedSession, { explicit: false });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.rawListeners.add(this.raw.onDidTerminateDebugee(async event => {\n\t\t\taria.status(localize('debuggingStopped', \"Debugging stopped.\"));\n\t\t\tif (event.body && event.body.restart) {\n\t\t\t\tawait this.debugService.restartSession(this, event.body.restart);\n\t\t\t} else if (this.raw) {\n\t\t\t\tawait this.raw.disconnect({ terminateDebuggee: false });\n\t\t\t}\n\t\t}));\n\n\t\tthis.rawListeners.add(this.raw.onDidContinued(event => {\n\t\t\tconst allThreads = event.body.allThreadsContinued !== false;\n\n\t\t\tstatusQueue.cancel(allThreads ? undefined : [event.body.threadId]);\n\n\t\t\tconst threadId = allThreads ? undefined : event.body.threadId;\n\t\t\tif (typeof threadId === 'number') {\n\t\t\t\tthis.stoppedDetails = this.stoppedDetails.filter(sd => sd.threadId !== threadId);\n\t\t\t\tconst tokens = this.cancellationMap.get(threadId);\n\t\t\t\tthis.cancellationMap.delete(threadId);\n\t\t\t\ttokens?.forEach(t => t.dispose(true));\n\t\t\t} else {\n\t\t\t\tthis.stoppedDetails = [];\n\t\t\t\tthis.cancelAllRequests();\n\t\t\t}\n\t\t\tthis.lastContinuedThreadId = threadId;\n\t\t\t// We need to pass focus to other sessions / threads with a timeout in case a quick stop event occurs #130321\n\t\t\tthis.passFocusScheduler.schedule();\n\t\t\tthis.model.clearThreads(this.getId(), false, threadId);\n\t\t\tthis._onDidChangeState.fire();\n\t\t}));\n\n\t\tconst outputQueue = new Queue<void>();\n\t\tthis.rawListeners.add(this.raw.onDidOutput(async event => {\n\t\t\tconst outputSeverity = event.body.category === 'stderr' ? Severity.Error : event.body.category === 'console' ? Severity.Warning : Severity.Info;\n\n\t\t\t// When a variables event is received, execute immediately to obtain the variables value #126967\n\t\t\tif (event.body.variablesReference) {\n\t\t\t\tconst source = event.body.source && event.body.line ? {\n\t\t\t\t\tlineNumber: event.body.line,\n\t\t\t\t\tcolumn: event.body.column ? event.body.column : 1,\n\t\t\t\t\tsource: this.getSource(event.body.source)\n\t\t\t\t} : undefined;\n\t\t\t\tconst container = new ExpressionContainer(this, undefined, event.body.variablesReference, generateUuid());\n\t\t\t\tconst children = container.getChildren();\n\t\t\t\t// we should put appendToRepl into queue to make sure the logs to be displayed in correct order\n\t\t\t\t// see https://github.com/microsoft/vscode/issues/126967#issuecomment-874954269\n\t\t\t\toutputQueue.queue(async () => {\n\t\t\t\t\tconst resolved = await children;\n\t\t\t\t\t// For single logged variables, try to use the output if we can so\n\t\t\t\t\t// present a better (i.e. ANSI-aware) representation of the output\n\t\t\t\t\tif (resolved.length === 1) {\n\t\t\t\t\t\tthis.appendToRepl({ output: event.body.output, expression: resolved[0], sev: outputSeverity, source }, event.body.category === 'important');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tresolved.forEach((child) => {\n\t\t\t\t\t\t// Since we can not display multiple trees in a row, we are displaying these variables one after the other (ignoring their names)\n\t\t\t\t\t\t(<any>child).name = null;\n\t\t\t\t\t\tthis.appendToRepl({ output: '', expression: child, sev: outputSeverity, source }, event.body.category === 'important');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toutputQueue.queue(async () => {\n\t\t\t\tif (!event.body || !this.raw) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (event.body.category === 'telemetry') {\n\t\t\t\t\t// only log telemetry events from debug adapter if the debug extension provided the telemetry key\n\t\t\t\t\t// and the user opted in telemetry\n\t\t\t\t\tconst telemetryEndpoint = this.raw.dbgr.getCustomTelemetryEndpoint();\n\t\t\t\t\tif (telemetryEndpoint && this.telemetryService.telemetryLevel !== TelemetryLevel.NONE) {\n\t\t\t\t\t\t// __GDPR__TODO__ We're sending events in the name of the debug extension and we can not ensure that those are declared correctly.\n\t\t\t\t\t\tlet data = event.body.data;\n\t\t\t\t\t\tif (!telemetryEndpoint.sendErrorTelemetry && event.body.data) {\n\t\t\t\t\t\t\tdata = filterExceptionsFromTelemetry(event.body.data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.customEndpointTelemetryService.publicLog(telemetryEndpoint, event.body.output, data);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Make sure to append output in the correct order by properly waiting on preivous promises #33822\n\t\t\t\tconst source = event.body.source && event.body.line ? {\n\t\t\t\t\tlineNumber: event.body.line,\n\t\t\t\t\tcolumn: event.body.column ? event.body.column : 1,\n\t\t\t\t\tsource: this.getSource(event.body.source)\n\t\t\t\t} : undefined;\n\n\t\t\t\tif (event.body.group === 'start' || event.body.group === 'startCollapsed') {\n\t\t\t\t\tconst expanded = event.body.group === 'start';\n\t\t\t\t\tthis.repl.startGroup(this, event.body.output || '', expanded, source);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (event.body.group === 'end') {\n\t\t\t\t\tthis.repl.endGroup();\n\t\t\t\t\tif (!event.body.output) {\n\t\t\t\t\t\t// Only return if the end event does not have additional output in it\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof event.body.output === 'string') {\n\t\t\t\t\tthis.appendToRepl({ output: event.body.output, sev: outputSeverity, source }, event.body.category === 'important');\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\tthis.rawListeners.add(this.raw.onDidBreakpoint(event => {\n\t\t\tconst id = event.body && event.body.breakpoint ? event.body.breakpoint.id : undefined;\n\t\t\tconst breakpoint = this.model.getBreakpoints().find(bp => bp.getIdFromAdapter(this.getId()) === id);\n\t\t\tconst functionBreakpoint = this.model.getFunctionBreakpoints().find(bp => bp.getIdFromAdapter(this.getId()) === id);\n\t\t\tconst dataBreakpoint = this.model.getDataBreakpoints().find(dbp => dbp.getIdFromAdapter(this.getId()) === id);\n\t\t\tconst exceptionBreakpoint = this.model.getExceptionBreakpoints().find(excbp => excbp.getIdFromAdapter(this.getId()) === id);\n\n\t\t\tif (event.body.reason === 'new' && event.body.breakpoint.source && event.body.breakpoint.line) {\n\t\t\t\tconst source = this.getSource(event.body.breakpoint.source);\n\t\t\t\tconst bps = this.model.addBreakpoints(source.uri, [{\n\t\t\t\t\tcolumn: event.body.breakpoint.column,\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tlineNumber: event.body.breakpoint.line,\n\t\t\t\t}], false);\n\t\t\t\tif (bps.length === 1) {\n\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([[bps[0].getId(), event.body.breakpoint]]);\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (event.body.reason === 'removed') {\n\t\t\t\tif (breakpoint) {\n\t\t\t\t\tthis.model.removeBreakpoints([breakpoint]);\n\t\t\t\t}\n\t\t\t\tif (functionBreakpoint) {\n\t\t\t\t\tthis.model.removeFunctionBreakpoints(functionBreakpoint.getId());\n\t\t\t\t}\n\t\t\t\tif (dataBreakpoint) {\n\t\t\t\t\tthis.model.removeDataBreakpoints(dataBreakpoint.getId());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (event.body.reason === 'changed') {\n\t\t\t\tif (breakpoint) {\n\t\t\t\t\tif (!breakpoint.column) {\n\t\t\t\t\t\tevent.body.breakpoint.column = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([[breakpoint.getId(), event.body.breakpoint]]);\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t\t}\n\t\t\t\tif (functionBreakpoint) {\n\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([[functionBreakpoint.getId(), event.body.breakpoint]]);\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t\t}\n\t\t\t\tif (dataBreakpoint) {\n\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([[dataBreakpoint.getId(), event.body.breakpoint]]);\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t\t}\n\t\t\t\tif (exceptionBreakpoint) {\n\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([[exceptionBreakpoint.getId(), event.body.breakpoint]]);\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, data);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.rawListeners.add(this.raw.onDidLoadedSource(event => {\n\t\t\tthis._onDidLoadedSource.fire({\n\t\t\t\treason: event.body.reason,\n\t\t\t\tsource: this.getSource(event.body.source)\n\t\t\t});\n\t\t}));\n\n\t\tthis.rawListeners.add(this.raw.onDidCustomEvent(event => {\n\t\t\tthis._onDidCustomEvent.fire(event);\n\t\t}));\n\n\t\tthis.rawListeners.add(this.raw.onDidProgressStart(event => {\n\t\t\tthis._onDidProgressStart.fire(event);\n\t\t}));\n\t\tthis.rawListeners.add(this.raw.onDidProgressUpdate(event => {\n\t\t\tthis._onDidProgressUpdate.fire(event);\n\t\t}));\n\t\tthis.rawListeners.add(this.raw.onDidProgressEnd(event => {\n\t\t\tthis._onDidProgressEnd.fire(event);\n\t\t}));\n\t\tthis.rawListeners.add(this.raw.onDidInvalidateMemory(event => {\n\t\t\tthis._onDidInvalidMemory.fire(event);\n\t\t}));\n\t\tthis.rawListeners.add(this.raw.onDidInvalidated(async event => {\n\t\t\tconst areas = event.body.areas || ['all'];\n\t\t\t// If invalidated event only requires to update variables or watch, do that, otherwise refetch threads https://github.com/microsoft/vscode/issues/106745\n\t\t\tif (areas.includes('threads') || areas.includes('stacks') || areas.includes('all')) {\n\t\t\t\tthis.cancelAllRequests();\n\t\t\t\tthis.model.clearThreads(this.getId(), true);\n\n\t\t\t\tconst details = this.stoppedDetails;\n\t\t\t\tthis.stoppedDetails.length = 1;\n\t\t\t\tawait Promise.all(details.map(d => this.handleStop(d)));\n\t\t\t}\n\n\t\t\tconst viewModel = this.debugService.getViewModel();\n\t\t\tif (viewModel.focusedSession === this) {\n\t\t\t\tviewModel.updateViews();\n\t\t\t}\n\t\t}));\n\n\t\tthis.rawListeners.add(this.raw.onDidExitAdapter(event => this.onDidExitAdapter(event)));\n\t}\n\n\tprivate async handleStop(event: IRawStoppedDetails) {\n\t\tthis.passFocusScheduler.cancel();\n\t\tthis.stoppedDetails.push(event);\n\n\t\t// do this very eagerly if we have hitBreakpointIds, since it may take a\n\t\t// moment for breakpoints to set and we want to do our best to not miss\n\t\t// anything\n\t\tif (event.hitBreakpointIds) {\n\t\t\tthis._waitToResume = this.enableDependentBreakpoints(event.hitBreakpointIds);\n\t\t}\n\n\t\tthis.statusQueue.run(\n\t\t\tthis.fetchThreads(event).then(() => event.threadId === undefined ? this.threadIds : [event.threadId]),\n\t\t\tasync (threadId, token) => {\n\t\t\t\tconst hasLotsOfThreads = event.threadId === undefined && this.threadIds.length > 10;\n\n\t\t\t\t// If the focus for the current session is on a non-existent thread, clear the focus.\n\t\t\t\tconst focusedThread = this.debugService.getViewModel().focusedThread;\n\t\t\t\tconst focusedThreadDoesNotExist = focusedThread !== undefined && focusedThread.session === this && !this.threads.has(focusedThread.threadId);\n\t\t\t\tif (focusedThreadDoesNotExist) {\n\t\t\t\t\tthis.debugService.focusStackFrame(undefined, undefined);\n\t\t\t\t}\n\n\t\t\t\tconst thread = typeof threadId === 'number' ? this.getThread(threadId) : undefined;\n\t\t\t\tif (thread) {\n\t\t\t\t\t// Call fetch call stack twice, the first only return the top stack frame.\n\t\t\t\t\t// Second retrieves the rest of the call stack. For performance reasons #25605\n\t\t\t\t\t// Second call is only done if there's few threads that stopped in this event.\n\t\t\t\t\tconst promises = this.model.refreshTopOfCallstack(<Thread>thread, /* fetchFullStack= */!hasLotsOfThreads);\n\t\t\t\t\tconst focus = async () => {\n\t\t\t\t\t\tif (focusedThreadDoesNotExist || (!event.preserveFocusHint && thread.getCallStack().length)) {\n\t\t\t\t\t\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\t\t\t\t\tif (!focusedStackFrame || focusedStackFrame.thread.session === this) {\n\t\t\t\t\t\t\t\t// Only take focus if nothing is focused, or if the focus is already on the current session\n\t\t\t\t\t\t\t\tconst preserveFocus = !this.configurationService.getValue<IDebugConfiguration>('debug').focusEditorOnBreak;\n\t\t\t\t\t\t\t\tawait this.debugService.focusStackFrame(undefined, thread, undefined, { preserveFocus });\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (thread.stoppedDetails && !token.isCancellationRequested) {\n\t\t\t\t\t\t\t\tif (thread.stoppedDetails.reason === 'breakpoint' && this.configurationService.getValue<IDebugConfiguration>('debug').openDebug === 'openOnDebugBreak' && !this.suppressDebugView) {\n\t\t\t\t\t\t\t\t\tawait this.paneCompositeService.openPaneComposite(VIEWLET_ID, ViewContainerLocation.Sidebar);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').focusWindowOnBreak && !this.workbenchEnvironmentService.extensionTestsLocationURI) {\n\t\t\t\t\t\t\t\t\tconst activeWindow = getActiveWindow();\n\t\t\t\t\t\t\t\t\tif (!activeWindow.document.hasFocus()) {\n\t\t\t\t\t\t\t\t\t\tawait this.hostService.focus(mainWindow, { force: true /* Application may not be active */ });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tawait promises.topCallStack;\n\n\t\t\t\t\tif (!event.hitBreakpointIds) { // if hitBreakpointIds are present, this is handled earlier on\n\t\t\t\t\t\tthis._waitToResume = this.enableDependentBreakpoints(thread);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tfocus();\n\n\t\t\t\t\tawait promises.wholeCallStack;\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\t\t\tif (!focusedStackFrame || isFrameDeemphasized(focusedStackFrame)) {\n\t\t\t\t\t\t// The top stack frame can be deemphesized so try to focus again #68616\n\t\t\t\t\t\tfocus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeState.fire();\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate async enableDependentBreakpoints(hitBreakpointIdsOrThread: Thread | number[]) {\n\t\tlet breakpoints: IBreakpoint[];\n\t\tif (Array.isArray(hitBreakpointIdsOrThread)) {\n\t\t\tbreakpoints = this.model.getBreakpoints().filter(bp => hitBreakpointIdsOrThread.includes(bp.getIdFromAdapter(this.id)!));\n\t\t} else {\n\t\t\tconst frame = hitBreakpointIdsOrThread.getTopStackFrame();\n\t\t\tif (frame === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hitBreakpointIdsOrThread.stoppedDetails && hitBreakpointIdsOrThread.stoppedDetails.reason !== 'breakpoint') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbreakpoints = this.getBreakpointsAtPosition(frame.source.uri, frame.range.startLineNumber, frame.range.endLineNumber, frame.range.startColumn, frame.range.endColumn);\n\t\t}\n\n\t\t// find the current breakpoints\n\n\t\t// check if the current breakpoints are dependencies, and if so collect and send the dependents to DA\n\t\tconst urisToResend = new Set<string>();\n\t\tthis.model.getBreakpoints({ triggeredOnly: true, enabledOnly: true }).forEach(bp => {\n\t\t\tbreakpoints.forEach(cbp => {\n\t\t\t\tif (bp.enabled && bp.triggeredBy === cbp.getId()) {\n\t\t\t\t\tbp.setSessionDidTrigger(this.getId());\n\t\t\t\t\turisToResend.add(bp.uri.toString());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst results: Promise<any>[] = [];\n\t\turisToResend.forEach((uri) => results.push(this.debugService.sendBreakpoints(URI.parse(uri), undefined, this)));\n\t\treturn Promise.all(results);\n\t}\n\n\tprivate getBreakpointsAtPosition(uri: URI, startLineNumber: number, endLineNumber: number, startColumn: number, endColumn: number): IBreakpoint[] {\n\t\treturn this.model.getBreakpoints({ uri: uri }).filter(bp => {\n\t\t\tif (bp.lineNumber < startLineNumber || bp.lineNumber > endLineNumber) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (bp.column && (bp.column < startColumn || bp.column > endColumn)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tprivate onDidExitAdapter(event?: AdapterEndEvent): void {\n\t\tthis.initialized = true;\n\t\tthis.model.setBreakpointSessionData(this.getId(), this.capabilities, undefined);\n\t\tthis.shutdown();\n\t\tthis._onDidEndAdapter.fire(event);\n\t}\n\n\t// Disconnects and clears state. Session can be initialized again for a new connection.\n\tprivate shutdown(): void {\n\t\tthis.rawListeners.clear();\n\t\tif (this.raw) {\n\t\t\t// Send out disconnect and immediatly dispose (do not wait for response) #127418\n\t\t\tthis.raw.disconnect({});\n\t\t\tthis.raw.dispose();\n\t\t\tthis.raw = undefined;\n\t\t}\n\t\tthis.fetchThreadsScheduler?.dispose();\n\t\tthis.fetchThreadsScheduler = undefined;\n\t\tthis.passFocusScheduler.cancel();\n\t\tthis.passFocusScheduler.dispose();\n\t\tthis.model.clearThreads(this.getId(), true);\n\t\tthis._onDidChangeState.fire();\n\t}\n\n\tpublic dispose() {\n\t\tthis.cancelAllRequests();\n\t\tthis.rawListeners.dispose();\n\t\tthis.globalDisposables.dispose();\n\t}\n\n\t//---- sources\n\n\tgetSourceForUri(uri: URI): Source | undefined {\n\t\treturn this.sources.get(this.uriIdentityService.asCanonicalUri(uri).toString());\n\t}\n\n\tgetSource(raw?: DebugProtocol.Source): Source {\n\t\tlet source = new Source(raw, this.getId(), this.uriIdentityService, this.logService);\n\t\tconst uriKey = source.uri.toString();\n\t\tconst found = this.sources.get(uriKey);\n\t\tif (found) {\n\t\t\tsource = found;\n\t\t\t// merge attributes of new into existing\n\t\t\tsource.raw = mixin(source.raw, raw);\n\t\t\tif (source.raw && raw) {\n\t\t\t\t// Always take the latest presentation hint from adapter #42139\n\t\t\t\tsource.raw.presentationHint = raw.presentationHint;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.sources.set(uriKey, source);\n\t\t}\n\n\t\treturn source;\n\t}\n\n\tprivate getRawSource(uri: URI): DebugProtocol.Source {\n\t\tconst source = this.getSourceForUri(uri);\n\t\tif (source) {\n\t\t\treturn source.raw;\n\t\t} else {\n\t\t\tconst data = Source.getEncodedDebugData(uri);\n\t\t\treturn { name: data.name, path: data.path, sourceReference: data.sourceReference };\n\t\t}\n\t}\n\n\tprivate getNewCancellationToken(threadId: number, token?: CancellationToken): CancellationToken {\n\t\tconst tokenSource = new CancellationTokenSource(token);\n\t\tconst tokens = this.cancellationMap.get(threadId) || [];\n\t\ttokens.push(tokenSource);\n\t\tthis.cancellationMap.set(threadId, tokens);\n\n\t\treturn tokenSource.token;\n\t}\n\n\tprivate cancelAllRequests(): void {\n\t\tthis.cancellationMap.forEach(tokens => tokens.forEach(t => t.dispose(true)));\n\t\tthis.cancellationMap.clear();\n\t}\n\n\t// REPL\n\n\tgetReplElements(): IReplElement[] {\n\t\treturn this.repl.getReplElements();\n\t}\n\n\thasSeparateRepl(): boolean {\n\t\treturn !this.parentSession || this._options.repl !== 'mergeWithParent';\n\t}\n\n\tremoveReplExpressions(): void {\n\t\tthis.repl.removeReplExpressions();\n\t}\n\n\tasync addReplExpression(stackFrame: IStackFrame | undefined, expression: string): Promise<void> {\n\t\tawait this.repl.addReplExpression(this, stackFrame, expression);\n\t\t// Evaluate all watch expressions and fetch variables again since repl evaluation might have changed some.\n\t\tthis.debugService.getViewModel().updateViews();\n\t}\n\n\tappendToRepl(data: INewReplElementData, isImportant?: boolean): void {\n\t\tthis.repl.appendToRepl(this, data);\n\t\tif (isImportant) {\n\t\t\tthis.notificationService.notify({ message: data.output.toString(), severity: data.sev, source: this.name });\n\t\t}\n\t}\n}\n\n/**\n * Keeps track of events for threads, and cancels any previous operations for\n * a thread when the thread goes into a new state. Currently, the operations a thread has are:\n *\n * - started\n * - stopped\n * - continue\n * - exited\n *\n * In each case, the new state preempts the old state, so we don't need to\n * queue work, just cancel old work. It's up to the caller to make sure that\n * no UI effects happen at the point when the `token` is cancelled.\n */\nexport class ThreadStatusScheduler extends Disposable {\n\t/**\n\t * An array of set of thread IDs. When a 'stopped' event is encountered, the\n\t * editor refreshes its thread IDs. In the meantime, the thread may change\n\t * state it again. So the editor puts a Set into this array when it starts\n\t * the refresh, and checks it after the refresh is finished, to see if\n\t * any of the threads it looked up should now be invalidated.\n\t */\n\tprivate pendingCancellations: Set<number | undefined>[] = [];\n\n\t/**\n\t * Cancellation tokens for currently-running operations on threads.\n\t */\n\tprivate readonly threadOps = this._register(new DisposableMap<number, CancellationTokenSource>());\n\n\t/**\n\t * Runs the operation.\n\t * If thread is undefined it affects all threads.\n\t */\n\tpublic async run(threadIdsP: Promise<number[]>, operation: (threadId: number, ct: CancellationToken) => Promise<unknown>) {\n\t\tconst cancelledWhileLookingUpThreads = new Set<number | undefined>();\n\t\tthis.pendingCancellations.push(cancelledWhileLookingUpThreads);\n\t\tconst threadIds = await threadIdsP;\n\n\t\t// Now that we got our threads,\n\t\t// 1. Remove our pending set, and\n\t\t// 2. Cancel any slower callers who might also have found this thread\n\t\tfor (let i = 0; i < this.pendingCancellations.length; i++) {\n\t\t\tconst s = this.pendingCancellations[i];\n\t\t\tif (s === cancelledWhileLookingUpThreads) {\n\t\t\t\tthis.pendingCancellations.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tfor (const threadId of threadIds) {\n\t\t\t\t\ts.add(threadId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (cancelledWhileLookingUpThreads.has(undefined)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait Promise.all(threadIds.map(threadId => {\n\t\t\tif (cancelledWhileLookingUpThreads.has(threadId)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.threadOps.get(threadId)?.cancel();\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tthis.threadOps.set(threadId, cts);\n\t\t\treturn operation(threadId, cts.token);\n\t\t}));\n\t}\n\n\t/**\n\t * Cancels all ongoing state operations on the given threads.\n\t * If threads is undefined it cancel all threads.\n\t */\n\tpublic cancel(threadIds?: readonly number[]) {\n\t\tif (!threadIds) {\n\t\t\tfor (const [_, op] of this.threadOps) {\n\t\t\t\top.cancel();\n\t\t\t}\n\t\t\tthis.threadOps.clearAndDisposeAll();\n\t\t\tfor (const s of this.pendingCancellations) {\n\t\t\t\ts.add(undefined);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const threadId of threadIds) {\n\t\t\t\tthis.threadOps.get(threadId)?.cancel();\n\t\t\t\tthis.threadOps.deleteAndDispose(threadId);\n\t\t\t\tfor (const s of this.pendingCancellations) {\n\t\t\t\t\ts.add(threadId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["focusedStackFrame"]
}
