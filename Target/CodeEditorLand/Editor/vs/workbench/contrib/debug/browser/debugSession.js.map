{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugSession.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from \"../../../../base/browser/dom.js\";\nimport * as aria from \"../../../../base/browser/ui/aria/aria.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport {\n\tQueue,\n\tRunOnceScheduler,\n\traceTimeout,\n} from \"../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { canceled } from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { normalizeDriveLetter } from \"../../../../base/common/labels.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { mixin } from \"../../../../base/common/objects.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport type {\n\tIPosition,\n\tPosition,\n} from \"../../../../editor/common/core/position.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IAccessibilityService } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tICustomEndpointTelemetryService,\n\tITelemetryService,\n\tTelemetryLevel,\n} from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { ViewContainerLocation } from \"../../../common/views.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { ILifecycleService } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport type { LiveTestResult } from \"../../testing/common/testResult.js\";\nimport { ITestResultService } from \"../../testing/common/testResultService.js\";\nimport { ITestService } from \"../../testing/common/testService.js\";\nimport {\n\ttype AdapterEndEvent,\n\ttype IBreakpoint,\n\ttype IConfig,\n\ttype IDataBreakpoint,\n\ttype IDataBreakpointInfoResponse,\n\ttype IDebugConfiguration,\n\ttype IDebugLocationReferenced,\n\tIDebugService,\n\ttype IDebugSession,\n\ttype IDebugSessionOptions,\n\ttype IDebugger,\n\ttype IExceptionBreakpoint,\n\ttype IExceptionInfo,\n\ttype IFunctionBreakpoint,\n\ttype IInstructionBreakpoint,\n\ttype IMemoryRegion,\n\ttype IRawModelUpdate,\n\ttype IRawStoppedDetails,\n\ttype IReplElement,\n\ttype IStackFrame,\n\ttype IThread,\n\ttype LoadedSourceEvent,\n\tState,\n\tVIEWLET_ID,\n\tisFrameDeemphasized,\n} from \"../common/debug.js\";\nimport type { DebugCompoundRoot } from \"../common/debugCompoundRoot.js\";\nimport {\n\ttype DebugModel,\n\tExpressionContainer,\n\tMemoryRegion,\n\tThread,\n} from \"../common/debugModel.js\";\nimport { Source } from \"../common/debugSource.js\";\nimport { filterExceptionsFromTelemetry } from \"../common/debugUtils.js\";\nimport { type INewReplElementData, ReplModel } from \"../common/replModel.js\";\nimport { RawDebugSession } from \"./rawDebugSession.js\";\n\nconst TRIGGERED_BREAKPOINT_MAX_DELAY = 1500;\n\nexport class DebugSession implements IDebugSession, IDisposable {\n\tparentSession: IDebugSession | undefined;\n\n\tprivate _subId: string | undefined;\n\traw: RawDebugSession | undefined; // used in tests\n\tprivate initialized = false;\n\tprivate _options: IDebugSessionOptions;\n\n\tprivate sources = new Map<string, Source>();\n\tprivate threads = new Map<number, Thread>();\n\tprivate threadIds: number[] = [];\n\tprivate cancellationMap = new Map<number, CancellationTokenSource[]>();\n\tprivate readonly rawListeners = new DisposableStore();\n\tprivate readonly globalDisposables = new DisposableStore();\n\tprivate fetchThreadsScheduler: RunOnceScheduler | undefined;\n\tprivate passFocusScheduler: RunOnceScheduler;\n\tprivate lastContinuedThreadId: number | undefined;\n\tprivate repl: ReplModel;\n\tprivate stoppedDetails: IRawStoppedDetails[] = [];\n\tprivate readonly statusQueue = this.rawListeners.add(\n\t\tnew ThreadStatusScheduler(),\n\t);\n\n\t/** Test run this debug session was spawned by */\n\tpublic readonly correlatedTestRun?: LiveTestResult;\n\t/** Whether we terminated the correlated run yet. Used so a 2nd terminate request goes through to the underlying session. */\n\tprivate didTerminateTestRun?: boolean;\n\n\tprivate readonly _onDidChangeState = new Emitter<void>();\n\tprivate readonly _onDidEndAdapter = new Emitter<\n\t\tAdapterEndEvent | undefined\n\t>();\n\n\tprivate readonly _onDidLoadedSource = new Emitter<LoadedSourceEvent>();\n\tprivate readonly _onDidCustomEvent = new Emitter<DebugProtocol.Event>();\n\tprivate readonly _onDidProgressStart =\n\t\tnew Emitter<DebugProtocol.ProgressStartEvent>();\n\tprivate readonly _onDidProgressUpdate =\n\t\tnew Emitter<DebugProtocol.ProgressUpdateEvent>();\n\tprivate readonly _onDidProgressEnd =\n\t\tnew Emitter<DebugProtocol.ProgressEndEvent>();\n\tprivate readonly _onDidInvalidMemory =\n\t\tnew Emitter<DebugProtocol.MemoryEvent>();\n\n\tprivate readonly _onDidChangeREPLElements = new Emitter<\n\t\tIReplElement | undefined\n\t>();\n\n\tprivate _name: string | undefined;\n\tprivate readonly _onDidChangeName = new Emitter<string>();\n\n\t/**\n\t * Promise set while enabling dependent breakpoints to block the debugger\n\t * from continuing from a stopped state.\n\t */\n\tprivate _waitToResume?: Promise<unknown>;\n\n\tconstructor(\n\t\tprivate id: string,\n\t\tprivate _configuration: {\n\t\t\tresolved: IConfig;\n\t\t\tunresolved: IConfig | undefined;\n\t\t},\n\t\tpublic root: IWorkspaceFolder | undefined,\n\t\tprivate model: DebugModel,\n\t\toptions: IDebugSessionOptions | undefined,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IPaneCompositePartService\n\t\tprivate readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@ICustomEndpointTelemetryService\n\t\tprivate readonly customEndpointTelemetryService: ICustomEndpointTelemetryService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService testResultService: ITestResultService,\n\t\t@IAccessibilityService\n\t\tprivate readonly accessibilityService: IAccessibilityService,\n\t) {\n\t\tthis._options = options || {};\n\t\tthis.parentSession = this._options.parentSession;\n\t\tif (this.hasSeparateRepl()) {\n\t\t\tthis.repl = new ReplModel(this.configurationService);\n\t\t} else {\n\t\t\tthis.repl = (this.parentSession as DebugSession).repl;\n\t\t}\n\n\t\tconst toDispose = this.globalDisposables;\n\t\tconst replListener = toDispose.add(new MutableDisposable());\n\t\treplListener.value = this.repl.onDidChangeElements((e) =>\n\t\t\tthis._onDidChangeREPLElements.fire(e),\n\t\t);\n\t\tif (lifecycleService) {\n\t\t\ttoDispose.add(\n\t\t\t\tlifecycleService.onWillShutdown(() => {\n\t\t\t\t\tthis.shutdown();\n\t\t\t\t\tdispose(toDispose);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\t// Cast here, it's not possible to reference a hydrated result in this code path.\n\t\tthis.correlatedTestRun = options?.testRun\n\t\t\t? (testResultService.getResult(\n\t\t\t\t\toptions.testRun.runId,\n\t\t\t\t) as LiveTestResult)\n\t\t\t: this.parentSession?.correlatedTestRun;\n\n\t\tif (this.correlatedTestRun) {\n\t\t\t// Listen to the test completing because the user might have taken the cancel action rather than stopping the session.\n\t\t\ttoDispose.add(\n\t\t\t\tthis.correlatedTestRun.onComplete(() => this.terminate()),\n\t\t\t);\n\t\t}\n\n\t\tconst compoundRoot = this._options.compoundRoot;\n\t\tif (compoundRoot) {\n\t\t\ttoDispose.add(\n\t\t\t\tcompoundRoot.onDidSessionStop(() => this.terminate()),\n\t\t\t);\n\t\t}\n\t\tthis.passFocusScheduler = new RunOnceScheduler(() => {\n\t\t\t// If there is some session or thread that is stopped pass focus to it\n\t\t\tif (\n\t\t\t\tthis.debugService\n\t\t\t\t\t.getModel()\n\t\t\t\t\t.getSessions()\n\t\t\t\t\t.some((s) => s.state === State.Stopped) ||\n\t\t\t\tthis.getAllThreads().some((t) => t.stopped)\n\t\t\t) {\n\t\t\t\tif (typeof this.lastContinuedThreadId === \"number\") {\n\t\t\t\t\tconst thread =\n\t\t\t\t\t\tthis.debugService.getViewModel().focusedThread;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthread &&\n\t\t\t\t\t\tthread.threadId === this.lastContinuedThreadId &&\n\t\t\t\t\t\t!thread.stopped\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst toFocusThreadId =\n\t\t\t\t\t\t\tthis.getStoppedDetails()?.threadId;\n\t\t\t\t\t\tconst toFocusThread =\n\t\t\t\t\t\t\ttypeof toFocusThreadId === \"number\"\n\t\t\t\t\t\t\t\t? this.getThread(toFocusThreadId)\n\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\tthis.debugService.focusStackFrame(\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttoFocusThread,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst session =\n\t\t\t\t\t\tthis.debugService.getViewModel().focusedSession;\n\t\t\t\t\tif (\n\t\t\t\t\t\tsession &&\n\t\t\t\t\t\tsession.getId() === this.getId() &&\n\t\t\t\t\t\tsession.state !== State.Stopped\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.debugService.focusStackFrame(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 800);\n\n\t\tconst parent = this._options.parentSession;\n\t\tif (parent) {\n\t\t\ttoDispose.add(\n\t\t\t\tparent.onDidEndAdapter(() => {\n\t\t\t\t\t// copy the parent repl and get a new detached repl for this child, and\n\t\t\t\t\t// remove its parent, if it's still running\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.hasSeparateRepl() &&\n\t\t\t\t\t\tthis.raw?.isInShutdown === false\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.repl = this.repl.clone();\n\t\t\t\t\t\treplListener.value = this.repl.onDidChangeElements(\n\t\t\t\t\t\t\t(e) => this._onDidChangeREPLElements.fire(e),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.parentSession = undefined;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tsetSubId(subId: string | undefined) {\n\t\tthis._subId = subId;\n\t}\n\n\tgetMemory(memoryReference: string): IMemoryRegion {\n\t\treturn new MemoryRegion(memoryReference, this);\n\t}\n\n\tget subId(): string | undefined {\n\t\treturn this._subId;\n\t}\n\n\tget configuration(): IConfig {\n\t\treturn this._configuration.resolved;\n\t}\n\n\tget unresolvedConfiguration(): IConfig | undefined {\n\t\treturn this._configuration.unresolved;\n\t}\n\n\tget lifecycleManagedByParent(): boolean {\n\t\treturn !!this._options.lifecycleManagedByParent;\n\t}\n\n\tget compact(): boolean {\n\t\treturn !!this._options.compact;\n\t}\n\n\tget saveBeforeRestart(): boolean {\n\t\treturn this._options.saveBeforeRestart ?? !this._options?.parentSession;\n\t}\n\n\tget compoundRoot(): DebugCompoundRoot | undefined {\n\t\treturn this._options.compoundRoot;\n\t}\n\n\tget suppressDebugStatusbar(): boolean {\n\t\treturn this._options.suppressDebugStatusbar ?? false;\n\t}\n\n\tget suppressDebugToolbar(): boolean {\n\t\treturn this._options.suppressDebugToolbar ?? false;\n\t}\n\n\tget suppressDebugView(): boolean {\n\t\treturn this._options.suppressDebugView ?? false;\n\t}\n\n\tget autoExpandLazyVariables(): boolean {\n\t\t// This tiny helper avoids converting the entire debug model to use service injection\n\t\tconst screenReaderOptimized =\n\t\t\tthis.accessibilityService.isScreenReaderOptimized();\n\t\tconst value =\n\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\"debug\",\n\t\t\t).autoExpandLazyVariables;\n\t\treturn (value === \"auto\" && screenReaderOptimized) || value === \"on\";\n\t}\n\n\tsetConfiguration(configuration: {\n\t\tresolved: IConfig;\n\t\tunresolved: IConfig | undefined;\n\t}) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetLabel(): string {\n\t\tconst includeRoot =\n\t\t\tthis.workspaceContextService.getWorkspace().folders.length > 1;\n\t\treturn includeRoot && this.root\n\t\t\t? `${this.name} (${resources.basenameOrAuthority(this.root.uri)})`\n\t\t\t: this.name;\n\t}\n\n\tsetName(name: string): void {\n\t\tthis._name = name;\n\t\tthis._onDidChangeName.fire(name);\n\t}\n\n\tget name(): string {\n\t\treturn this._name || this.configuration.name;\n\t}\n\n\tget state(): State {\n\t\tif (!this.initialized) {\n\t\t\treturn State.Initializing;\n\t\t}\n\t\tif (!this.raw) {\n\t\t\treturn State.Inactive;\n\t\t}\n\n\t\tconst focusedThread = this.debugService.getViewModel().focusedThread;\n\t\tif (focusedThread && focusedThread.session === this) {\n\t\t\treturn focusedThread.stopped ? State.Stopped : State.Running;\n\t\t}\n\t\tif (this.getAllThreads().some((t) => t.stopped)) {\n\t\t\treturn State.Stopped;\n\t\t}\n\n\t\treturn State.Running;\n\t}\n\n\tget capabilities(): DebugProtocol.Capabilities {\n\t\treturn this.raw ? this.raw.capabilities : Object.create(null);\n\t}\n\n\t//---- events\n\tget onDidChangeState(): Event<void> {\n\t\treturn this._onDidChangeState.event;\n\t}\n\n\tget onDidEndAdapter(): Event<AdapterEndEvent | undefined> {\n\t\treturn this._onDidEndAdapter.event;\n\t}\n\n\tget onDidChangeReplElements(): Event<IReplElement | undefined> {\n\t\treturn this._onDidChangeREPLElements.event;\n\t}\n\n\tget onDidChangeName(): Event<string> {\n\t\treturn this._onDidChangeName.event;\n\t}\n\n\t//---- DAP events\n\n\tget onDidCustomEvent(): Event<DebugProtocol.Event> {\n\t\treturn this._onDidCustomEvent.event;\n\t}\n\n\tget onDidLoadedSource(): Event<LoadedSourceEvent> {\n\t\treturn this._onDidLoadedSource.event;\n\t}\n\n\tget onDidProgressStart(): Event<DebugProtocol.ProgressStartEvent> {\n\t\treturn this._onDidProgressStart.event;\n\t}\n\n\tget onDidProgressUpdate(): Event<DebugProtocol.ProgressUpdateEvent> {\n\t\treturn this._onDidProgressUpdate.event;\n\t}\n\n\tget onDidProgressEnd(): Event<DebugProtocol.ProgressEndEvent> {\n\t\treturn this._onDidProgressEnd.event;\n\t}\n\n\tget onDidInvalidateMemory(): Event<DebugProtocol.MemoryEvent> {\n\t\treturn this._onDidInvalidMemory.event;\n\t}\n\n\t//---- DAP requests\n\n\t/**\n\t * create and initialize a new debug adapter for this session\n\t */\n\tasync initialize(dbgr: IDebugger): Promise<void> {\n\t\tif (this.raw) {\n\t\t\t// if there was already a connection make sure to remove old listeners\n\t\t\tawait this.shutdown();\n\t\t}\n\n\t\ttry {\n\t\t\tconst debugAdapter = await dbgr.createDebugAdapter(this);\n\t\t\tthis.raw = this.instantiationService.createInstance(\n\t\t\t\tRawDebugSession,\n\t\t\t\tdebugAdapter,\n\t\t\t\tdbgr,\n\t\t\t\tthis.id,\n\t\t\t\tthis.configuration.name,\n\t\t\t);\n\n\t\t\tawait this.raw.start();\n\t\t\tthis.registerListeners();\n\t\t\tawait this.raw.initialize({\n\t\t\t\tclientID: \"vscode\",\n\t\t\t\tclientName: this.productService.nameLong,\n\t\t\t\tadapterID: this.configuration.type,\n\t\t\t\tpathFormat: \"path\",\n\t\t\t\tlinesStartAt1: true,\n\t\t\t\tcolumnsStartAt1: true,\n\t\t\t\tsupportsVariableType: true, // #8858\n\t\t\t\tsupportsVariablePaging: true, // #9537\n\t\t\t\tsupportsRunInTerminalRequest: true, // #10574\n\t\t\t\tlocale: platform.language, // #169114\n\t\t\t\tsupportsProgressReporting: true, // #92253\n\t\t\t\tsupportsInvalidatedEvent: true, // #106745\n\t\t\t\tsupportsMemoryReferences: true, //#129684\n\t\t\t\tsupportsArgsCanBeInterpretedByShell: true, // #149910\n\t\t\t\tsupportsMemoryEvent: true, // #133643\n\t\t\t\tsupportsStartDebuggingRequest: true,\n\t\t\t\tsupportsANSIStyling: true,\n\t\t\t});\n\n\t\t\tthis.initialized = true;\n\t\t\tthis._onDidChangeState.fire();\n\t\t\tthis.debugService.setExceptionBreakpointsForSession(\n\t\t\t\tthis,\n\t\t\t\t(this.raw &&\n\t\t\t\t\tthis.raw.capabilities.exceptionBreakpointFilters) ||\n\t\t\t\t\t[],\n\t\t\t);\n\t\t\tthis.debugService\n\t\t\t\t.getModel()\n\t\t\t\t.registerBreakpointModes(\n\t\t\t\t\tthis.configuration.type,\n\t\t\t\t\tthis.raw.capabilities.breakpointModes || [],\n\t\t\t\t);\n\t\t} catch (err) {\n\t\t\tthis.initialized = true;\n\t\t\tthis._onDidChangeState.fire();\n\t\t\tawait this.shutdown();\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * launch or attach to the debuggee\n\t */\n\tasync launchOrAttach(config: IConfig): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"launch or attach\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (this.parentSession && this.parentSession.state === State.Inactive) {\n\t\t\tthrow canceled();\n\t\t}\n\n\t\t// __sessionID only used for EH debugging (but we add it always for now...)\n\t\tconfig.__sessionId = this.getId();\n\t\ttry {\n\t\t\tawait this.raw.launchOrAttach(config);\n\t\t} catch (err) {\n\t\t\tthis.shutdown();\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * terminate the current debug adapter session\n\t */\n\tasync terminate(restart = false): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\t// Adapter went down but it did not send a 'terminated' event, simulate like the event has been sent\n\t\t\tthis.onDidExitAdapter();\n\t\t}\n\n\t\tthis.cancelAllRequests();\n\t\tif (this._options.lifecycleManagedByParent && this.parentSession) {\n\t\t\tawait this.parentSession.terminate(restart);\n\t\t} else if (\n\t\t\tthis.correlatedTestRun &&\n\t\t\t!this.correlatedTestRun.completedAt &&\n\t\t\t!this.didTerminateTestRun\n\t\t) {\n\t\t\tthis.didTerminateTestRun = true;\n\t\t\tthis.testService.cancelTestRun(this.correlatedTestRun.id);\n\t\t} else if (this.raw) {\n\t\t\tif (\n\t\t\t\tthis.raw.capabilities.supportsTerminateRequest &&\n\t\t\t\tthis._configuration.resolved.request === \"launch\"\n\t\t\t) {\n\t\t\t\tawait this.raw.terminate(restart);\n\t\t\t} else {\n\t\t\t\tawait this.raw.disconnect({ restart, terminateDebuggee: true });\n\t\t\t}\n\t\t}\n\n\t\tif (!restart) {\n\t\t\tthis._options.compoundRoot?.sessionStopped();\n\t\t}\n\t}\n\n\t/**\n\t * end the current debug adapter session\n\t */\n\tasync disconnect(restart = false, suspend = false): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\t// Adapter went down but it did not send a 'terminated' event, simulate like the event has been sent\n\t\t\tthis.onDidExitAdapter();\n\t\t}\n\n\t\tthis.cancelAllRequests();\n\t\tif (this._options.lifecycleManagedByParent && this.parentSession) {\n\t\t\tawait this.parentSession.disconnect(restart, suspend);\n\t\t} else if (this.raw) {\n\t\t\t// TODO terminateDebuggee should be undefined by default?\n\t\t\tawait this.raw.disconnect({\n\t\t\t\trestart,\n\t\t\t\tterminateDebuggee: false,\n\t\t\t\tsuspendDebuggee: suspend,\n\t\t\t});\n\t\t}\n\n\t\tif (!restart) {\n\t\t\tthis._options.compoundRoot?.sessionStopped();\n\t\t}\n\t}\n\n\t/**\n\t * restart debug adapter session\n\t */\n\tasync restart(): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"restart\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis.cancelAllRequests();\n\t\tif (this._options.lifecycleManagedByParent && this.parentSession) {\n\t\t\tawait this.parentSession.restart();\n\t\t} else {\n\t\t\tawait this.raw.restart({ arguments: this.configuration });\n\t\t}\n\t}\n\n\tasync sendBreakpoints(\n\t\tmodelUri: URI,\n\t\tbreakpointsToSend: IBreakpoint[],\n\t\tsourceModified: boolean,\n\t): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"breakpoints\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (!this.raw.readyForBreakpoints) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst rawSource = this.getRawSource(modelUri);\n\t\tif (breakpointsToSend.length && !rawSource.adapterData) {\n\t\t\trawSource.adapterData = breakpointsToSend[0].adapterData;\n\t\t}\n\t\t// Normalize all drive letters going out from vscode to debug adapters so we are consistent with our resolving #43959\n\t\tif (rawSource.path) {\n\t\t\trawSource.path = normalizeDriveLetter(rawSource.path);\n\t\t}\n\n\t\tconst response = await this.raw.setBreakpoints({\n\t\t\tsource: rawSource,\n\t\t\tlines: breakpointsToSend.map(\n\t\t\t\t(bp) => bp.sessionAgnosticData.lineNumber,\n\t\t\t),\n\t\t\tbreakpoints: breakpointsToSend.map((bp) => bp.toDAP()),\n\t\t\tsourceModified,\n\t\t});\n\t\tif (response?.body) {\n\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\tfor (let i = 0; i < breakpointsToSend.length; i++) {\n\t\t\t\tdata.set(\n\t\t\t\t\tbreakpointsToSend[i].getId(),\n\t\t\t\t\tresponse.body.breakpoints[i],\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\tthis.getId(),\n\t\t\t\tthis.capabilities,\n\t\t\t\tdata,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync sendFunctionBreakpoints(fbpts: IFunctionBreakpoint[]): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"function breakpoints\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst response = await this.raw.setFunctionBreakpoints({\n\t\t\t\tbreakpoints: fbpts.map((bp) => bp.toDAP()),\n\t\t\t});\n\t\t\tif (response?.body) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tfor (let i = 0; i < fbpts.length; i++) {\n\t\t\t\t\tdata.set(fbpts[i].getId(), response.body.breakpoints[i]);\n\t\t\t\t}\n\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\tthis.getId(),\n\t\t\t\t\tthis.capabilities,\n\t\t\t\t\tdata,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendExceptionBreakpoints(\n\t\texbpts: IExceptionBreakpoint[],\n\t): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"exception breakpoints\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst args: DebugProtocol.SetExceptionBreakpointsArguments = this\n\t\t\t\t.capabilities.supportsExceptionFilterOptions\n\t\t\t\t? {\n\t\t\t\t\t\tfilters: [],\n\t\t\t\t\t\tfilterOptions: exbpts.map((exb) => {\n\t\t\t\t\t\t\tif (exb.condition) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tfilterId: exb.filter,\n\t\t\t\t\t\t\t\t\tcondition: exb.condition,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn { filterId: exb.filter };\n\t\t\t\t\t\t}),\n\t\t\t\t\t}\n\t\t\t\t: { filters: exbpts.map((exb) => exb.filter) };\n\n\t\t\tconst response = await this.raw.setExceptionBreakpoints(args);\n\t\t\tif (response?.body && response.body.breakpoints) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tfor (let i = 0; i < exbpts.length; i++) {\n\t\t\t\t\tdata.set(exbpts[i].getId(), response.body.breakpoints[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\tthis.getId(),\n\t\t\t\t\tthis.capabilities,\n\t\t\t\t\tdata,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tdataBytesBreakpointInfo(\n\t\taddress: string,\n\t\tbytes: number,\n\t): Promise<IDataBreakpointInfoResponse | undefined> {\n\t\tif (this.raw?.capabilities.supportsDataBreakpointBytes === false) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"sessionDoesNotSupporBytesBreakpoints\",\n\t\t\t\t\t\"Session does not support breakpoints with bytes\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this._dataBreakpointInfo({\n\t\t\tname: address,\n\t\t\tbytes,\n\t\t\tasAddress: true,\n\t\t});\n\t}\n\n\tdataBreakpointInfo(\n\t\tname: string,\n\t\tvariablesReference?: number,\n\t): Promise<\n\t\t| { dataId: string | null; description: string; canPersist?: boolean }\n\t\t| undefined\n\t> {\n\t\treturn this._dataBreakpointInfo({ name, variablesReference });\n\t}\n\n\tprivate async _dataBreakpointInfo(\n\t\targs: DebugProtocol.DataBreakpointInfoArguments,\n\t): Promise<\n\t\t| { dataId: string | null; description: string; canPersist?: boolean }\n\t\t| undefined\n\t> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"data breakpoints info\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (!this.raw.readyForBreakpoints) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"sessionNotReadyForBreakpoints\",\n\t\t\t\t\t\"Session is not ready for breakpoints\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst response = await this.raw.dataBreakpointInfo(args);\n\t\treturn response?.body;\n\t}\n\n\tasync sendDataBreakpoints(\n\t\tdataBreakpoints: IDataBreakpoint[],\n\t): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"data breakpoints\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst converted = await Promise.all(\n\t\t\t\tdataBreakpoints.map(async (bp) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst dap = await bp.toDAP(this);\n\t\t\t\t\t\treturn { dap, bp };\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn { bp, message: e.message };\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst response = await this.raw.setDataBreakpoints({\n\t\t\t\tbreakpoints: converted.map((d) => d.dap).filter(isDefined),\n\t\t\t});\n\t\t\tif (response?.body) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (const dap of converted) {\n\t\t\t\t\tif (!dap.dap) {\n\t\t\t\t\t\tdata.set(dap.bp.getId(), dap.message);\n\t\t\t\t\t} else if (i < response.body.breakpoints.length) {\n\t\t\t\t\t\tdata.set(\n\t\t\t\t\t\t\tdap.bp.getId(),\n\t\t\t\t\t\t\tresponse.body.breakpoints[i++],\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\tthis.getId(),\n\t\t\t\t\tthis.capabilities,\n\t\t\t\t\tdata,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendInstructionBreakpoints(\n\t\tinstructionBreakpoints: IInstructionBreakpoint[],\n\t): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"instruction breakpoints\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (this.raw.readyForBreakpoints) {\n\t\t\tconst response = await this.raw.setInstructionBreakpoints({\n\t\t\t\tbreakpoints: instructionBreakpoints.map((ib) => ib.toDAP()),\n\t\t\t});\n\t\t\tif (response?.body) {\n\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>();\n\t\t\t\tfor (let i = 0; i < instructionBreakpoints.length; i++) {\n\t\t\t\t\tdata.set(\n\t\t\t\t\t\tinstructionBreakpoints[i].getId(),\n\t\t\t\t\t\tresponse.body.breakpoints[i],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\tthis.getId(),\n\t\t\t\t\tthis.capabilities,\n\t\t\t\t\tdata,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync breakpointsLocations(\n\t\turi: URI,\n\t\tlineNumber: number,\n\t): Promise<IPosition[]> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"breakpoints locations\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst source = this.getRawSource(uri);\n\t\tconst response = await this.raw.breakpointLocations({\n\t\t\tsource,\n\t\t\tline: lineNumber,\n\t\t});\n\t\tif (!response || !response.body || !response.body.breakpoints) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst positions = response.body.breakpoints.map((bp) => ({\n\t\t\tlineNumber: bp.line,\n\t\t\tcolumn: bp.column || 1,\n\t\t}));\n\n\t\treturn distinct(positions, (p) => `${p.lineNumber}:${p.column}`);\n\t}\n\n\tgetDebugProtocolBreakpoint(\n\t\tbreakpointId: string,\n\t): DebugProtocol.Breakpoint | undefined {\n\t\treturn this.model.getDebugProtocolBreakpoint(\n\t\t\tbreakpointId,\n\t\t\tthis.getId(),\n\t\t);\n\t}\n\n\tcustomRequest(\n\t\trequest: string,\n\t\targs: any,\n\t): Promise<DebugProtocol.Response | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\trequest,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.custom(request, args);\n\t}\n\n\tstackTrace(\n\t\tthreadId: number,\n\t\tstartFrame: number,\n\t\tlevels: number,\n\t\ttoken: CancellationToken,\n\t): Promise<DebugProtocol.StackTraceResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"stackTrace\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst sessionToken = this.getNewCancellationToken(threadId, token);\n\t\treturn this.raw.stackTrace(\n\t\t\t{ threadId, startFrame, levels },\n\t\t\tsessionToken,\n\t\t);\n\t}\n\n\tasync exceptionInfo(threadId: number): Promise<IExceptionInfo | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"exceptionInfo\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst response = await this.raw.exceptionInfo({ threadId });\n\t\tif (response) {\n\t\t\treturn {\n\t\t\t\tid: response.body.exceptionId,\n\t\t\t\tdescription: response.body.description,\n\t\t\t\tbreakMode: response.body.breakMode,\n\t\t\t\tdetails: response.body.details,\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tscopes(\n\t\tframeId: number,\n\t\tthreadId: number,\n\t): Promise<DebugProtocol.ScopesResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"scopes\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst token = this.getNewCancellationToken(threadId);\n\t\treturn this.raw.scopes({ frameId }, token);\n\t}\n\n\tvariables(\n\t\tvariablesReference: number,\n\t\tthreadId: number | undefined,\n\t\tfilter: \"indexed\" | \"named\" | undefined,\n\t\tstart: number | undefined,\n\t\tcount: number | undefined,\n\t): Promise<DebugProtocol.VariablesResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"variables\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst token = threadId\n\t\t\t? this.getNewCancellationToken(threadId)\n\t\t\t: undefined;\n\t\treturn this.raw.variables(\n\t\t\t{ variablesReference, filter, start, count },\n\t\t\ttoken,\n\t\t);\n\t}\n\n\tevaluate(\n\t\texpression: string,\n\t\tframeId: number,\n\t\tcontext?: string,\n\t\tlocation?: {\n\t\t\tline: number;\n\t\t\tcolumn: number;\n\t\t\tsource: DebugProtocol.Source;\n\t\t},\n\t): Promise<DebugProtocol.EvaluateResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"evaluate\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.evaluate({\n\t\t\texpression,\n\t\t\tframeId,\n\t\t\tcontext,\n\t\t\tline: location?.line,\n\t\t\tcolumn: location?.column,\n\t\t\tsource: location?.source,\n\t\t});\n\t}\n\n\tasync restartFrame(frameId: number, threadId: number): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"restartFrame\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tawait this.raw.restartFrame({ frameId }, threadId);\n\t}\n\n\tprivate setLastSteppingGranularity(\n\t\tthreadId: number,\n\t\tgranularity?: DebugProtocol.SteppingGranularity,\n\t) {\n\t\tconst thread = this.getThread(threadId);\n\t\tif (thread) {\n\t\t\tthread.lastSteppingGranularity = granularity;\n\t\t}\n\t}\n\n\tasync next(\n\t\tthreadId: number,\n\t\tgranularity?: DebugProtocol.SteppingGranularity,\n\t): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"next\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.next({ threadId, granularity });\n\t}\n\n\tasync stepIn(\n\t\tthreadId: number,\n\t\ttargetId?: number,\n\t\tgranularity?: DebugProtocol.SteppingGranularity,\n\t): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"stepIn\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.stepIn({ threadId, targetId, granularity });\n\t}\n\n\tasync stepOut(\n\t\tthreadId: number,\n\t\tgranularity?: DebugProtocol.SteppingGranularity,\n\t): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"stepOut\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.stepOut({ threadId, granularity });\n\t}\n\n\tasync stepBack(\n\t\tthreadId: number,\n\t\tgranularity?: DebugProtocol.SteppingGranularity,\n\t): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"stepBack\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis.setLastSteppingGranularity(threadId, granularity);\n\t\tawait this.raw.stepBack({ threadId, granularity });\n\t}\n\n\tasync continue(threadId: number): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"continue\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tawait this.raw.continue({ threadId });\n\t}\n\n\tasync reverseContinue(threadId: number): Promise<void> {\n\t\tawait this.waitForTriggeredBreakpoints();\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"reverse continue\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tawait this.raw.reverseContinue({ threadId });\n\t}\n\n\tasync pause(threadId: number): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"pause\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tawait this.raw.pause({ threadId });\n\t}\n\n\tasync terminateThreads(threadIds?: number[]): Promise<void> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"terminateThreads\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tawait this.raw.terminateThreads({ threadIds });\n\t}\n\n\tsetVariable(\n\t\tvariablesReference: number,\n\t\tname: string,\n\t\tvalue: string,\n\t): Promise<DebugProtocol.SetVariableResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"setVariable\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.setVariable({ variablesReference, name, value });\n\t}\n\n\tsetExpression(\n\t\tframeId: number,\n\t\texpression: string,\n\t\tvalue: string,\n\t): Promise<DebugProtocol.SetExpressionResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"setExpression\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.setExpression({ expression, value, frameId });\n\t}\n\n\tgotoTargets(\n\t\tsource: DebugProtocol.Source,\n\t\tline: number,\n\t\tcolumn?: number,\n\t): Promise<DebugProtocol.GotoTargetsResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"gotoTargets\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.gotoTargets({ source, line, column });\n\t}\n\n\tgoto(\n\t\tthreadId: number,\n\t\ttargetId: number,\n\t): Promise<DebugProtocol.GotoResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"goto\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.goto({ threadId, targetId });\n\t}\n\n\tloadSource(\n\t\tresource: URI,\n\t): Promise<DebugProtocol.SourceResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"loadSource\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst source = this.getSourceForUri(resource);\n\t\tlet rawSource: DebugProtocol.Source;\n\t\tif (source) {\n\t\t\trawSource = source.raw;\n\t\t} else {\n\t\t\t// create a Source\n\t\t\tconst data = Source.getEncodedDebugData(resource);\n\t\t\trawSource = {\n\t\t\t\tpath: data.path,\n\t\t\t\tsourceReference: data.sourceReference,\n\t\t\t};\n\t\t}\n\n\t\treturn this.raw.source({\n\t\t\tsourceReference: rawSource.sourceReference || 0,\n\t\t\tsource: rawSource,\n\t\t});\n\t}\n\n\tasync getLoadedSources(): Promise<Source[]> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"getLoadedSources\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst response = await this.raw.loadedSources({});\n\t\tif (response?.body && response.body.sources) {\n\t\t\treturn response.body.sources.map((src) => this.getSource(src));\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tasync completions(\n\t\tframeId: number | undefined,\n\t\tthreadId: number,\n\t\ttext: string,\n\t\tposition: Position,\n\t\toverwriteBefore: number,\n\t\ttoken: CancellationToken,\n\t): Promise<DebugProtocol.CompletionsResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"completions\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst sessionCancelationToken = this.getNewCancellationToken(\n\t\t\tthreadId,\n\t\t\ttoken,\n\t\t);\n\n\t\treturn this.raw.completions(\n\t\t\t{\n\t\t\t\tframeId,\n\t\t\t\ttext,\n\t\t\t\tcolumn: position.column,\n\t\t\t\tline: position.lineNumber,\n\t\t\t},\n\t\t\tsessionCancelationToken,\n\t\t);\n\t}\n\n\tasync stepInTargets(\n\t\tframeId: number,\n\t): Promise<{ id: number; label: string }[] | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"stepInTargets\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst response = await this.raw.stepInTargets({ frameId });\n\t\treturn response?.body.targets;\n\t}\n\n\tasync cancel(\n\t\tprogressId: string,\n\t): Promise<DebugProtocol.CancelResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"cancel\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.cancel({ progressId });\n\t}\n\n\tasync disassemble(\n\t\tmemoryReference: string,\n\t\toffset: number,\n\t\tinstructionOffset: number,\n\t\tinstructionCount: number,\n\t): Promise<DebugProtocol.DisassembledInstruction[] | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"disassemble\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst response = await this.raw.disassemble({\n\t\t\tmemoryReference,\n\t\t\toffset,\n\t\t\tinstructionOffset,\n\t\t\tinstructionCount,\n\t\t\tresolveSymbols: true,\n\t\t});\n\t\treturn response?.body?.instructions;\n\t}\n\n\treadMemory(\n\t\tmemoryReference: string,\n\t\toffset: number,\n\t\tcount: number,\n\t): Promise<DebugProtocol.ReadMemoryResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"readMemory\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.readMemory({ count, memoryReference, offset });\n\t}\n\n\twriteMemory(\n\t\tmemoryReference: string,\n\t\toffset: number,\n\t\tdata: string,\n\t\tallowPartial?: boolean,\n\t): Promise<DebugProtocol.WriteMemoryResponse | undefined> {\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\t\"disassemble\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.raw.writeMemory({\n\t\t\tmemoryReference,\n\t\t\toffset,\n\t\t\tallowPartial,\n\t\t\tdata,\n\t\t});\n\t}\n\n\tasync resolveLocationReference(\n\t\tlocationReference: number,\n\t): Promise<IDebugLocationReferenced> {\n\t\tif (!this.raw) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"locations\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst location = await this.raw.locations({ locationReference });\n\t\tif (!location?.body) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noDebugAdapter\",\n\t\t\t\t\t\"No debugger available, can not send '{0}'\",\n\t\t\t\t\t\"locations\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst source = this.getSource(location.body.source);\n\t\treturn { column: 1, ...location.body, source };\n\t}\n\n\t//---- threads\n\n\tgetThread(threadId: number): Thread | undefined {\n\t\treturn this.threads.get(threadId);\n\t}\n\n\tgetAllThreads(): IThread[] {\n\t\tconst result: IThread[] = [];\n\t\tthis.threadIds.forEach((threadId) => {\n\t\t\tconst thread = this.threads.get(threadId);\n\t\t\tif (thread) {\n\t\t\t\tresult.push(thread);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tclearThreads(\n\t\tremoveThreads: boolean,\n\t\treference: number | undefined = undefined,\n\t): void {\n\t\tif (reference !== undefined && reference !== null) {\n\t\t\tconst thread = this.threads.get(reference);\n\t\t\tif (thread) {\n\t\t\t\tthread.clearCallStack();\n\t\t\t\tthread.stoppedDetails = undefined;\n\t\t\t\tthread.stopped = false;\n\n\t\t\t\tif (removeThreads) {\n\t\t\t\t\tthis.threads.delete(reference);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.threads.forEach((thread) => {\n\t\t\t\tthread.clearCallStack();\n\t\t\t\tthread.stoppedDetails = undefined;\n\t\t\t\tthread.stopped = false;\n\t\t\t});\n\n\t\t\tif (removeThreads) {\n\t\t\t\tthis.threads.clear();\n\t\t\t\tthis.threadIds = [];\n\t\t\t\tExpressionContainer.allValues.clear();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetStoppedDetails(): IRawStoppedDetails | undefined {\n\t\treturn this.stoppedDetails.length >= 1\n\t\t\t? this.stoppedDetails[0]\n\t\t\t: undefined;\n\t}\n\n\trawUpdate(data: IRawModelUpdate): void {\n\t\tthis.threadIds = [];\n\t\tdata.threads.forEach((thread) => {\n\t\t\tthis.threadIds.push(thread.id);\n\t\t\tif (!this.threads.has(thread.id)) {\n\t\t\t\t// A new thread came in, initialize it.\n\t\t\t\tthis.threads.set(\n\t\t\t\t\tthread.id,\n\t\t\t\t\tnew Thread(this, thread.name, thread.id),\n\t\t\t\t);\n\t\t\t} else if (thread.name) {\n\t\t\t\t// Just the thread name got updated #18244\n\t\t\t\tconst oldThread = this.threads.get(thread.id);\n\t\t\t\tif (oldThread) {\n\t\t\t\t\toldThread.name = thread.name;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.threads.forEach((t) => {\n\t\t\t// Remove all old threads which are no longer part of the update #75980\n\t\t\tif (this.threadIds.indexOf(t.threadId) === -1) {\n\t\t\t\tthis.threads.delete(t.threadId);\n\t\t\t}\n\t\t});\n\n\t\tconst stoppedDetails = data.stoppedDetails;\n\t\tif (stoppedDetails) {\n\t\t\t// Set the availability of the threads' callstacks depending on\n\t\t\t// whether the thread is stopped or not\n\t\t\tif (stoppedDetails.allThreadsStopped) {\n\t\t\t\tthis.threads.forEach((thread) => {\n\t\t\t\t\tthread.stoppedDetails =\n\t\t\t\t\t\tthread.threadId === stoppedDetails.threadId\n\t\t\t\t\t\t\t? stoppedDetails\n\t\t\t\t\t\t\t: { reason: thread.stoppedDetails?.reason };\n\t\t\t\t\tthread.stopped = true;\n\t\t\t\t\tthread.clearCallStack();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst thread =\n\t\t\t\t\ttypeof stoppedDetails.threadId === \"number\"\n\t\t\t\t\t\t? this.threads.get(stoppedDetails.threadId)\n\t\t\t\t\t\t: undefined;\n\t\t\t\tif (thread) {\n\t\t\t\t\t// One thread is stopped, only update that thread.\n\t\t\t\t\tthread.stoppedDetails = stoppedDetails;\n\t\t\t\t\tthread.clearCallStack();\n\t\t\t\t\tthread.stopped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate waitForTriggeredBreakpoints() {\n\t\tif (!this._waitToResume) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn raceTimeout(this._waitToResume, TRIGGERED_BREAKPOINT_MAX_DELAY);\n\t}\n\n\tprivate async fetchThreads(\n\t\tstoppedDetails?: IRawStoppedDetails,\n\t): Promise<void> {\n\t\tif (this.raw) {\n\t\t\tconst response = await this.raw.threads();\n\t\t\tif (response?.body && response.body.threads) {\n\t\t\t\tthis.model.rawUpdate({\n\t\t\t\t\tsessionId: this.getId(),\n\t\t\t\t\tthreads: response.body.threads,\n\t\t\t\t\tstoppedDetails,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tinitializeForTest(raw: RawDebugSession): void {\n\t\tthis.raw = raw;\n\t\tthis.registerListeners();\n\t}\n\n\t//---- private\n\n\tprivate registerListeners(): void {\n\t\tif (!this.raw) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidInitialize(async () => {\n\t\t\t\taria.status(\n\t\t\t\t\tthis.configuration.noDebug\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"debuggingStartedNoDebug\",\n\t\t\t\t\t\t\t\t\"Started running without debugging.\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\"debuggingStarted\", \"Debugging started.\"),\n\t\t\t\t);\n\n\t\t\t\tconst sendConfigurationDone = async () => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.raw &&\n\t\t\t\t\t\tthis.raw.capabilities.supportsConfigurationDoneRequest\n\t\t\t\t\t) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.raw.configurationDone();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// Disconnect the debug session on configuration done error #10596\n\t\t\t\t\t\t\tthis.notificationService.error(e);\n\t\t\t\t\t\t\tthis.raw?.disconnect({});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t};\n\n\t\t\t\t// Send all breakpoints\n\t\t\t\ttry {\n\t\t\t\t\tawait this.debugService.sendAllBreakpoints(this);\n\t\t\t\t} finally {\n\t\t\t\t\tawait sendConfigurationDone();\n\t\t\t\t\tawait this.fetchThreads();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst statusQueue = this.statusQueue;\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidStop((event) => this.handleStop(event.body)),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidThread((event) => {\n\t\t\t\tstatusQueue.cancel([event.body.threadId]);\n\t\t\t\tif (event.body.reason === \"started\") {\n\t\t\t\t\t// debounce to reduce threadsRequest frequency and improve performance\n\t\t\t\t\tif (!this.fetchThreadsScheduler) {\n\t\t\t\t\t\tthis.fetchThreadsScheduler = new RunOnceScheduler(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tthis.fetchThreads();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.rawListeners.add(this.fetchThreadsScheduler);\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.fetchThreadsScheduler.isScheduled()) {\n\t\t\t\t\t\tthis.fetchThreadsScheduler.schedule();\n\t\t\t\t\t}\n\t\t\t\t} else if (event.body.reason === \"exited\") {\n\t\t\t\t\tthis.model.clearThreads(\n\t\t\t\t\t\tthis.getId(),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tevent.body.threadId,\n\t\t\t\t\t);\n\t\t\t\t\tconst viewModel = this.debugService.getViewModel();\n\t\t\t\t\tconst focusedThread = viewModel.focusedThread;\n\t\t\t\t\tthis.passFocusScheduler.cancel();\n\t\t\t\t\tif (\n\t\t\t\t\t\tfocusedThread &&\n\t\t\t\t\t\tevent.body.threadId === focusedThread.threadId\n\t\t\t\t\t) {\n\t\t\t\t\t\t// De-focus the thread in case it was focused\n\t\t\t\t\t\tthis.debugService.focusStackFrame(\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tviewModel.focusedSession,\n\t\t\t\t\t\t\t{ explicit: false },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidTerminateDebugee(async (event) => {\n\t\t\t\taria.status(localize(\"debuggingStopped\", \"Debugging stopped.\"));\n\t\t\t\tif (event.body && event.body.restart) {\n\t\t\t\t\tawait this.debugService.restartSession(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tevent.body.restart,\n\t\t\t\t\t);\n\t\t\t\t} else if (this.raw) {\n\t\t\t\t\tawait this.raw.disconnect({ terminateDebuggee: false });\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidContinued((event) => {\n\t\t\t\tconst allThreads = event.body.allThreadsContinued !== false;\n\n\t\t\t\tstatusQueue.cancel(\n\t\t\t\t\tallThreads ? undefined : [event.body.threadId],\n\t\t\t\t);\n\n\t\t\t\tconst threadId = allThreads ? undefined : event.body.threadId;\n\t\t\t\tif (typeof threadId === \"number\") {\n\t\t\t\t\tthis.stoppedDetails = this.stoppedDetails.filter(\n\t\t\t\t\t\t(sd) => sd.threadId !== threadId,\n\t\t\t\t\t);\n\t\t\t\t\tconst tokens = this.cancellationMap.get(threadId);\n\t\t\t\t\tthis.cancellationMap.delete(threadId);\n\t\t\t\t\ttokens?.forEach((t) => t.dispose(true));\n\t\t\t\t} else {\n\t\t\t\t\tthis.stoppedDetails = [];\n\t\t\t\t\tthis.cancelAllRequests();\n\t\t\t\t}\n\t\t\t\tthis.lastContinuedThreadId = threadId;\n\t\t\t\t// We need to pass focus to other sessions / threads with a timeout in case a quick stop event occurs #130321\n\t\t\t\tthis.passFocusScheduler.schedule();\n\t\t\t\tthis.model.clearThreads(this.getId(), false, threadId);\n\t\t\t\tthis._onDidChangeState.fire();\n\t\t\t}),\n\t\t);\n\n\t\tconst outputQueue = new Queue<void>();\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidOutput(async (event) => {\n\t\t\t\tconst outputSeverity =\n\t\t\t\t\tevent.body.category === \"stderr\"\n\t\t\t\t\t\t? Severity.Error\n\t\t\t\t\t\t: event.body.category === \"console\"\n\t\t\t\t\t\t\t? Severity.Warning\n\t\t\t\t\t\t\t: Severity.Info;\n\n\t\t\t\t// When a variables event is received, execute immediately to obtain the variables value #126967\n\t\t\t\tif (event.body.variablesReference) {\n\t\t\t\t\tconst source =\n\t\t\t\t\t\tevent.body.source && event.body.line\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tlineNumber: event.body.line,\n\t\t\t\t\t\t\t\t\tcolumn: event.body.column\n\t\t\t\t\t\t\t\t\t\t? event.body.column\n\t\t\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t\t\t\tsource: this.getSource(event.body.source),\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\tconst container = new ExpressionContainer(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tevent.body.variablesReference,\n\t\t\t\t\t\tgenerateUuid(),\n\t\t\t\t\t);\n\t\t\t\t\tconst children = container.getChildren();\n\t\t\t\t\t// we should put appendToRepl into queue to make sure the logs to be displayed in correct order\n\t\t\t\t\t// see https://github.com/microsoft/vscode/issues/126967#issuecomment-874954269\n\t\t\t\t\toutputQueue.queue(async () => {\n\t\t\t\t\t\tconst resolved = await children;\n\t\t\t\t\t\t// For single logged variables, try to use the output if we can so\n\t\t\t\t\t\t// present a better (i.e. ANSI-aware) representation of the output\n\t\t\t\t\t\tif (resolved.length === 1) {\n\t\t\t\t\t\t\tthis.appendToRepl(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toutput: event.body.output,\n\t\t\t\t\t\t\t\t\texpression: resolved[0],\n\t\t\t\t\t\t\t\t\tsev: outputSeverity,\n\t\t\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tevent.body.category === \"important\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolved.forEach((child) => {\n\t\t\t\t\t\t\t// Since we can not display multiple trees in a row, we are displaying these variables one after the other (ignoring their names)\n\t\t\t\t\t\t\t(<any>child).name = null;\n\t\t\t\t\t\t\tthis.appendToRepl(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\toutput: \"\",\n\t\t\t\t\t\t\t\t\texpression: child,\n\t\t\t\t\t\t\t\t\tsev: outputSeverity,\n\t\t\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tevent.body.category === \"important\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\toutputQueue.queue(async () => {\n\t\t\t\t\tif (!event.body || !this.raw) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (event.body.category === \"telemetry\") {\n\t\t\t\t\t\t// only log telemetry events from debug adapter if the debug extension provided the telemetry key\n\t\t\t\t\t\t// and the user opted in telemetry\n\t\t\t\t\t\tconst telemetryEndpoint =\n\t\t\t\t\t\t\tthis.raw.dbgr.getCustomTelemetryEndpoint();\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttelemetryEndpoint &&\n\t\t\t\t\t\t\tthis.telemetryService.telemetryLevel !==\n\t\t\t\t\t\t\t\tTelemetryLevel.NONE\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// __GDPR__TODO__ We're sending events in the name of the debug extension and we can not ensure that those are declared correctly.\n\t\t\t\t\t\t\tlet data = event.body.data;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!telemetryEndpoint.sendErrorTelemetry &&\n\t\t\t\t\t\t\t\tevent.body.data\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tdata = filterExceptionsFromTelemetry(\n\t\t\t\t\t\t\t\t\tevent.body.data,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.customEndpointTelemetryService.publicLog(\n\t\t\t\t\t\t\t\ttelemetryEndpoint,\n\t\t\t\t\t\t\t\tevent.body.output,\n\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure to append output in the correct order by properly waiting on preivous promises #33822\n\t\t\t\t\tconst source =\n\t\t\t\t\t\tevent.body.source && event.body.line\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tlineNumber: event.body.line,\n\t\t\t\t\t\t\t\t\tcolumn: event.body.column\n\t\t\t\t\t\t\t\t\t\t? event.body.column\n\t\t\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t\t\t\tsource: this.getSource(event.body.source),\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: undefined;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tevent.body.group === \"start\" ||\n\t\t\t\t\t\tevent.body.group === \"startCollapsed\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst expanded = event.body.group === \"start\";\n\t\t\t\t\t\tthis.repl.startGroup(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tevent.body.output || \"\",\n\t\t\t\t\t\t\texpanded,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (event.body.group === \"end\") {\n\t\t\t\t\t\tthis.repl.endGroup();\n\t\t\t\t\t\tif (!event.body.output) {\n\t\t\t\t\t\t\t// Only return if the end event does not have additional output in it\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof event.body.output === \"string\") {\n\t\t\t\t\t\tthis.appendToRepl(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\toutput: event.body.output,\n\t\t\t\t\t\t\t\tsev: outputSeverity,\n\t\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tevent.body.category === \"important\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidBreakpoint((event) => {\n\t\t\t\tconst id =\n\t\t\t\t\tevent.body && event.body.breakpoint\n\t\t\t\t\t\t? event.body.breakpoint.id\n\t\t\t\t\t\t: undefined;\n\t\t\t\tconst breakpoint = this.model\n\t\t\t\t\t.getBreakpoints()\n\t\t\t\t\t.find((bp) => bp.getIdFromAdapter(this.getId()) === id);\n\t\t\t\tconst functionBreakpoint = this.model\n\t\t\t\t\t.getFunctionBreakpoints()\n\t\t\t\t\t.find((bp) => bp.getIdFromAdapter(this.getId()) === id);\n\t\t\t\tconst dataBreakpoint = this.model\n\t\t\t\t\t.getDataBreakpoints()\n\t\t\t\t\t.find((dbp) => dbp.getIdFromAdapter(this.getId()) === id);\n\t\t\t\tconst exceptionBreakpoint = this.model\n\t\t\t\t\t.getExceptionBreakpoints()\n\t\t\t\t\t.find(\n\t\t\t\t\t\t(excbp) => excbp.getIdFromAdapter(this.getId()) === id,\n\t\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tevent.body.reason === \"new\" &&\n\t\t\t\t\tevent.body.breakpoint.source &&\n\t\t\t\t\tevent.body.breakpoint.line\n\t\t\t\t) {\n\t\t\t\t\tconst source = this.getSource(event.body.breakpoint.source);\n\t\t\t\t\tconst bps = this.model.addBreakpoints(\n\t\t\t\t\t\tsource.uri,\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolumn: event.body.breakpoint.column,\n\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\tlineNumber: event.body.breakpoint.line,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t\tif (bps.length === 1) {\n\t\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([\n\t\t\t\t\t\t\t[bps[0].getId(), event.body.breakpoint],\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\t\t\tthis.getId(),\n\t\t\t\t\t\t\tthis.capabilities,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (event.body.reason === \"removed\") {\n\t\t\t\t\tif (breakpoint) {\n\t\t\t\t\t\tthis.model.removeBreakpoints([breakpoint]);\n\t\t\t\t\t}\n\t\t\t\t\tif (functionBreakpoint) {\n\t\t\t\t\t\tthis.model.removeFunctionBreakpoints(\n\t\t\t\t\t\t\tfunctionBreakpoint.getId(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (dataBreakpoint) {\n\t\t\t\t\t\tthis.model.removeDataBreakpoints(\n\t\t\t\t\t\t\tdataBreakpoint.getId(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (event.body.reason === \"changed\") {\n\t\t\t\t\tif (breakpoint) {\n\t\t\t\t\t\tif (!breakpoint.column) {\n\t\t\t\t\t\t\tevent.body.breakpoint.column = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([\n\t\t\t\t\t\t\t[breakpoint.getId(), event.body.breakpoint],\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\t\t\tthis.getId(),\n\t\t\t\t\t\t\tthis.capabilities,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (functionBreakpoint) {\n\t\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([\n\t\t\t\t\t\t\t[functionBreakpoint.getId(), event.body.breakpoint],\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\t\t\tthis.getId(),\n\t\t\t\t\t\t\tthis.capabilities,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (dataBreakpoint) {\n\t\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([\n\t\t\t\t\t\t\t[dataBreakpoint.getId(), event.body.breakpoint],\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\t\t\tthis.getId(),\n\t\t\t\t\t\t\tthis.capabilities,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (exceptionBreakpoint) {\n\t\t\t\t\t\tconst data = new Map<string, DebugProtocol.Breakpoint>([\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\texceptionBreakpoint.getId(),\n\t\t\t\t\t\t\t\tevent.body.breakpoint,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tthis.model.setBreakpointSessionData(\n\t\t\t\t\t\t\tthis.getId(),\n\t\t\t\t\t\t\tthis.capabilities,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidLoadedSource((event) => {\n\t\t\t\tthis._onDidLoadedSource.fire({\n\t\t\t\t\treason: event.body.reason,\n\t\t\t\t\tsource: this.getSource(event.body.source),\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidCustomEvent((event) => {\n\t\t\t\tthis._onDidCustomEvent.fire(event);\n\t\t\t}),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidProgressStart((event) => {\n\t\t\t\tthis._onDidProgressStart.fire(event);\n\t\t\t}),\n\t\t);\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidProgressUpdate((event) => {\n\t\t\t\tthis._onDidProgressUpdate.fire(event);\n\t\t\t}),\n\t\t);\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidProgressEnd((event) => {\n\t\t\t\tthis._onDidProgressEnd.fire(event);\n\t\t\t}),\n\t\t);\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidInvalidateMemory((event) => {\n\t\t\t\tthis._onDidInvalidMemory.fire(event);\n\t\t\t}),\n\t\t);\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidInvalidated(async (event) => {\n\t\t\t\tconst areas = event.body.areas || [\"all\"];\n\t\t\t\t// If invalidated event only requires to update variables or watch, do that, otherwise refetch threads https://github.com/microsoft/vscode/issues/106745\n\t\t\t\tif (\n\t\t\t\t\tareas.includes(\"threads\") ||\n\t\t\t\t\tareas.includes(\"stacks\") ||\n\t\t\t\t\tareas.includes(\"all\")\n\t\t\t\t) {\n\t\t\t\t\tthis.cancelAllRequests();\n\t\t\t\t\tthis.model.clearThreads(this.getId(), true);\n\n\t\t\t\t\tconst details = this.stoppedDetails;\n\t\t\t\t\tthis.stoppedDetails.length = 1;\n\t\t\t\t\tawait Promise.all(details.map((d) => this.handleStop(d)));\n\t\t\t\t}\n\n\t\t\t\tconst viewModel = this.debugService.getViewModel();\n\t\t\t\tif (viewModel.focusedSession === this) {\n\t\t\t\t\tviewModel.updateViews();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.rawListeners.add(\n\t\t\tthis.raw.onDidExitAdapter((event) => this.onDidExitAdapter(event)),\n\t\t);\n\t}\n\n\tprivate async handleStop(event: IRawStoppedDetails) {\n\t\tthis.passFocusScheduler.cancel();\n\t\tthis.stoppedDetails.push(event);\n\n\t\t// do this very eagerly if we have hitBreakpointIds, since it may take a\n\t\t// moment for breakpoints to set and we want to do our best to not miss\n\t\t// anything\n\t\tif (event.hitBreakpointIds) {\n\t\t\tthis._waitToResume = this.enableDependentBreakpoints(\n\t\t\t\tevent.hitBreakpointIds,\n\t\t\t);\n\t\t}\n\n\t\tthis.statusQueue.run(\n\t\t\tthis.fetchThreads(event).then(() =>\n\t\t\t\tevent.threadId === undefined\n\t\t\t\t\t? this.threadIds\n\t\t\t\t\t: [event.threadId],\n\t\t\t),\n\t\t\tasync (threadId, token) => {\n\t\t\t\tconst hasLotsOfThreads =\n\t\t\t\t\tevent.threadId === undefined && this.threadIds.length > 10;\n\n\t\t\t\t// If the focus for the current session is on a non-existent thread, clear the focus.\n\t\t\t\tconst focusedThread =\n\t\t\t\t\tthis.debugService.getViewModel().focusedThread;\n\t\t\t\tconst focusedThreadDoesNotExist =\n\t\t\t\t\tfocusedThread !== undefined &&\n\t\t\t\t\tfocusedThread.session === this &&\n\t\t\t\t\t!this.threads.has(focusedThread.threadId);\n\t\t\t\tif (focusedThreadDoesNotExist) {\n\t\t\t\t\tthis.debugService.focusStackFrame(undefined, undefined);\n\t\t\t\t}\n\n\t\t\t\tconst thread =\n\t\t\t\t\ttypeof threadId === \"number\"\n\t\t\t\t\t\t? this.getThread(threadId)\n\t\t\t\t\t\t: undefined;\n\t\t\t\tif (thread) {\n\t\t\t\t\t// Call fetch call stack twice, the first only return the top stack frame.\n\t\t\t\t\t// Second retrieves the rest of the call stack. For performance reasons #25605\n\t\t\t\t\t// Second call is only done if there's few threads that stopped in this event.\n\t\t\t\t\tconst promises = this.model.refreshTopOfCallstack(\n\t\t\t\t\t\t<Thread>thread,\n\t\t\t\t\t\t/* fetchFullStack= */ !hasLotsOfThreads,\n\t\t\t\t\t);\n\t\t\t\t\tconst focus = async () => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tfocusedThreadDoesNotExist ||\n\t\t\t\t\t\t\t(!event.preserveFocusHint &&\n\t\t\t\t\t\t\t\tthread.getCallStack().length)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst focusedStackFrame =\n\t\t\t\t\t\t\t\tthis.debugService.getViewModel()\n\t\t\t\t\t\t\t\t\t.focusedStackFrame;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!focusedStackFrame ||\n\t\t\t\t\t\t\t\tfocusedStackFrame.thread.session === this\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t// Only take focus if nothing is focused, or if the focus is already on the current session\n\t\t\t\t\t\t\t\tconst preserveFocus =\n\t\t\t\t\t\t\t\t\t!this.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\t\t\t\t\t\"debug\",\n\t\t\t\t\t\t\t\t\t).focusEditorOnBreak;\n\t\t\t\t\t\t\t\tawait this.debugService.focusStackFrame(\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tthread,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t{ preserveFocus },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthread.stoppedDetails &&\n\t\t\t\t\t\t\t\t!token.isCancellationRequested\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tthread.stoppedDetails.reason ===\n\t\t\t\t\t\t\t\t\t\t\"breakpoint\" &&\n\t\t\t\t\t\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\t\t\t\t\t\"debug\",\n\t\t\t\t\t\t\t\t\t).openDebug === \"openOnDebugBreak\" &&\n\t\t\t\t\t\t\t\t\t!this.suppressDebugView\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tawait this.paneCompositeService.openPaneComposite(\n\t\t\t\t\t\t\t\t\t\tVIEWLET_ID,\n\t\t\t\t\t\t\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\t\t\t\t\t\"debug\",\n\t\t\t\t\t\t\t\t\t).focusWindowOnBreak &&\n\t\t\t\t\t\t\t\t\t!this.workbenchEnvironmentService\n\t\t\t\t\t\t\t\t\t\t.extensionTestsLocationURI\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tconst activeWindow = getActiveWindow();\n\t\t\t\t\t\t\t\t\tif (!activeWindow.document.hasFocus()) {\n\t\t\t\t\t\t\t\t\t\tawait this.hostService.focus(\n\t\t\t\t\t\t\t\t\t\t\tmainWindow,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tforce: true /* Application may not be active */,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tawait promises.topCallStack;\n\n\t\t\t\t\tif (!event.hitBreakpointIds) {\n\t\t\t\t\t\t// if hitBreakpointIds are present, this is handled earlier on\n\t\t\t\t\t\tthis._waitToResume =\n\t\t\t\t\t\t\tthis.enableDependentBreakpoints(thread);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tfocus();\n\n\t\t\t\t\tawait promises.wholeCallStack;\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst focusedStackFrame =\n\t\t\t\t\t\tthis.debugService.getViewModel().focusedStackFrame;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!focusedStackFrame ||\n\t\t\t\t\t\tisFrameDeemphasized(focusedStackFrame)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// The top stack frame can be deemphesized so try to focus again #68616\n\t\t\t\t\t\tfocus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeState.fire();\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate async enableDependentBreakpoints(\n\t\thitBreakpointIdsOrThread: Thread | number[],\n\t) {\n\t\tlet breakpoints: IBreakpoint[];\n\t\tif (Array.isArray(hitBreakpointIdsOrThread)) {\n\t\t\tbreakpoints = this.model\n\t\t\t\t.getBreakpoints()\n\t\t\t\t.filter((bp) =>\n\t\t\t\t\thitBreakpointIdsOrThread.includes(\n\t\t\t\t\t\tbp.getIdFromAdapter(this.id)!,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst frame = hitBreakpointIdsOrThread.getTopStackFrame();\n\t\t\tif (frame === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\thitBreakpointIdsOrThread.stoppedDetails &&\n\t\t\t\thitBreakpointIdsOrThread.stoppedDetails.reason !== \"breakpoint\"\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbreakpoints = this.getBreakpointsAtPosition(\n\t\t\t\tframe.source.uri,\n\t\t\t\tframe.range.startLineNumber,\n\t\t\t\tframe.range.endLineNumber,\n\t\t\t\tframe.range.startColumn,\n\t\t\t\tframe.range.endColumn,\n\t\t\t);\n\t\t}\n\n\t\t// find the current breakpoints\n\n\t\t// check if the current breakpoints are dependencies, and if so collect and send the dependents to DA\n\t\tconst urisToResend = new Set<string>();\n\t\tthis.model\n\t\t\t.getBreakpoints({ triggeredOnly: true, enabledOnly: true })\n\t\t\t.forEach((bp) => {\n\t\t\t\tbreakpoints.forEach((cbp) => {\n\t\t\t\t\tif (bp.enabled && bp.triggeredBy === cbp.getId()) {\n\t\t\t\t\t\tbp.setSessionDidTrigger(this.getId());\n\t\t\t\t\t\turisToResend.add(bp.uri.toString());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\tconst results: Promise<any>[] = [];\n\t\turisToResend.forEach((uri) =>\n\t\t\tresults.push(\n\t\t\t\tthis.debugService.sendBreakpoints(\n\t\t\t\t\tURI.parse(uri),\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\treturn Promise.all(results);\n\t}\n\n\tprivate getBreakpointsAtPosition(\n\t\turi: URI,\n\t\tstartLineNumber: number,\n\t\tendLineNumber: number,\n\t\tstartColumn: number,\n\t\tendColumn: number,\n\t): IBreakpoint[] {\n\t\treturn this.model.getBreakpoints({ uri: uri }).filter((bp) => {\n\t\t\tif (\n\t\t\t\tbp.lineNumber < startLineNumber ||\n\t\t\t\tbp.lineNumber > endLineNumber\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tbp.column &&\n\t\t\t\t(bp.column < startColumn || bp.column > endColumn)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tprivate onDidExitAdapter(event?: AdapterEndEvent): void {\n\t\tthis.initialized = true;\n\t\tthis.model.setBreakpointSessionData(\n\t\t\tthis.getId(),\n\t\t\tthis.capabilities,\n\t\t\tundefined,\n\t\t);\n\t\tthis.shutdown();\n\t\tthis._onDidEndAdapter.fire(event);\n\t}\n\n\t// Disconnects and clears state. Session can be initialized again for a new connection.\n\tprivate shutdown(): void {\n\t\tthis.rawListeners.clear();\n\t\tif (this.raw) {\n\t\t\t// Send out disconnect and immediatly dispose (do not wait for response) #127418\n\t\t\tthis.raw.disconnect({});\n\t\t\tthis.raw.dispose();\n\t\t\tthis.raw = undefined;\n\t\t}\n\t\tthis.fetchThreadsScheduler?.dispose();\n\t\tthis.fetchThreadsScheduler = undefined;\n\t\tthis.passFocusScheduler.cancel();\n\t\tthis.passFocusScheduler.dispose();\n\t\tthis.model.clearThreads(this.getId(), true);\n\t\tthis._onDidChangeState.fire();\n\t}\n\n\tpublic dispose() {\n\t\tthis.cancelAllRequests();\n\t\tthis.rawListeners.dispose();\n\t\tthis.globalDisposables.dispose();\n\t}\n\n\t//---- sources\n\n\tgetSourceForUri(uri: URI): Source | undefined {\n\t\treturn this.sources.get(\n\t\t\tthis.uriIdentityService.asCanonicalUri(uri).toString(),\n\t\t);\n\t}\n\n\tgetSource(raw?: DebugProtocol.Source): Source {\n\t\tlet source = new Source(\n\t\t\traw,\n\t\t\tthis.getId(),\n\t\t\tthis.uriIdentityService,\n\t\t\tthis.logService,\n\t\t);\n\t\tconst uriKey = source.uri.toString();\n\t\tconst found = this.sources.get(uriKey);\n\t\tif (found) {\n\t\t\tsource = found;\n\t\t\t// merge attributes of new into existing\n\t\t\tsource.raw = mixin(source.raw, raw);\n\t\t\tif (source.raw && raw) {\n\t\t\t\t// Always take the latest presentation hint from adapter #42139\n\t\t\t\tsource.raw.presentationHint = raw.presentationHint;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.sources.set(uriKey, source);\n\t\t}\n\n\t\treturn source;\n\t}\n\n\tprivate getRawSource(uri: URI): DebugProtocol.Source {\n\t\tconst source = this.getSourceForUri(uri);\n\t\tif (source) {\n\t\t\treturn source.raw;\n\t\t} else {\n\t\t\tconst data = Source.getEncodedDebugData(uri);\n\t\t\treturn {\n\t\t\t\tname: data.name,\n\t\t\t\tpath: data.path,\n\t\t\t\tsourceReference: data.sourceReference,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate getNewCancellationToken(\n\t\tthreadId: number,\n\t\ttoken?: CancellationToken,\n\t): CancellationToken {\n\t\tconst tokenSource = new CancellationTokenSource(token);\n\t\tconst tokens = this.cancellationMap.get(threadId) || [];\n\t\ttokens.push(tokenSource);\n\t\tthis.cancellationMap.set(threadId, tokens);\n\n\t\treturn tokenSource.token;\n\t}\n\n\tprivate cancelAllRequests(): void {\n\t\tthis.cancellationMap.forEach((tokens) =>\n\t\t\ttokens.forEach((t) => t.dispose(true)),\n\t\t);\n\t\tthis.cancellationMap.clear();\n\t}\n\n\t// REPL\n\n\tgetReplElements(): IReplElement[] {\n\t\treturn this.repl.getReplElements();\n\t}\n\n\thasSeparateRepl(): boolean {\n\t\treturn !this.parentSession || this._options.repl !== \"mergeWithParent\";\n\t}\n\n\tremoveReplExpressions(): void {\n\t\tthis.repl.removeReplExpressions();\n\t}\n\n\tasync addReplExpression(\n\t\tstackFrame: IStackFrame | undefined,\n\t\texpression: string,\n\t): Promise<void> {\n\t\tawait this.repl.addReplExpression(this, stackFrame, expression);\n\t\t// Evaluate all watch expressions and fetch variables again since repl evaluation might have changed some.\n\t\tthis.debugService.getViewModel().updateViews();\n\t}\n\n\tappendToRepl(data: INewReplElementData, isImportant?: boolean): void {\n\t\tthis.repl.appendToRepl(this, data);\n\t\tif (isImportant) {\n\t\t\tthis.notificationService.notify({\n\t\t\t\tmessage: data.output.toString(),\n\t\t\t\tseverity: data.sev,\n\t\t\t\tsource: this.name,\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * Keeps track of events for threads, and cancels any previous operations for\n * a thread when the thread goes into a new state. Currently, the operations a thread has are:\n *\n * - started\n * - stopped\n * - continue\n * - exited\n *\n * In each case, the new state preempts the old state, so we don't need to\n * queue work, just cancel old work. It's up to the caller to make sure that\n * no UI effects happen at the point when the `token` is cancelled.\n */\nexport class ThreadStatusScheduler extends Disposable {\n\t/**\n\t * An array of set of thread IDs. When a 'stopped' event is encountered, the\n\t * editor refreshes its thread IDs. In the meantime, the thread may change\n\t * state it again. So the editor puts a Set into this array when it starts\n\t * the refresh, and checks it after the refresh is finished, to see if\n\t * any of the threads it looked up should now be invalidated.\n\t */\n\tprivate pendingCancellations: Set<number | undefined>[] = [];\n\n\t/**\n\t * Cancellation tokens for currently-running operations on threads.\n\t */\n\tprivate readonly threadOps = this._register(\n\t\tnew DisposableMap<number, CancellationTokenSource>(),\n\t);\n\n\t/**\n\t * Runs the operation.\n\t * If thread is undefined it affects all threads.\n\t */\n\tpublic async run(\n\t\tthreadIdsP: Promise<number[]>,\n\t\toperation: (\n\t\t\tthreadId: number,\n\t\t\tct: CancellationToken,\n\t\t) => Promise<unknown>,\n\t) {\n\t\tconst cancelledWhileLookingUpThreads = new Set<number | undefined>();\n\t\tthis.pendingCancellations.push(cancelledWhileLookingUpThreads);\n\t\tconst threadIds = await threadIdsP;\n\n\t\t// Now that we got our threads,\n\t\t// 1. Remove our pending set, and\n\t\t// 2. Cancel any slower callers who might also have found this thread\n\t\tfor (let i = 0; i < this.pendingCancellations.length; i++) {\n\t\t\tconst s = this.pendingCancellations[i];\n\t\t\tif (s === cancelledWhileLookingUpThreads) {\n\t\t\t\tthis.pendingCancellations.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tfor (const threadId of threadIds) {\n\t\t\t\t\ts.add(threadId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (cancelledWhileLookingUpThreads.has(undefined)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tthreadIds.map((threadId) => {\n\t\t\t\tif (cancelledWhileLookingUpThreads.has(threadId)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.threadOps.get(threadId)?.cancel();\n\t\t\t\tconst cts = new CancellationTokenSource();\n\t\t\t\tthis.threadOps.set(threadId, cts);\n\t\t\t\treturn operation(threadId, cts.token);\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * Cancels all ongoing state operations on the given threads.\n\t * If threads is undefined it cancel all threads.\n\t */\n\tpublic cancel(threadIds?: readonly number[]) {\n\t\tif (threadIds) {\n\t\t\tfor (const threadId of threadIds) {\n\t\t\t\tthis.threadOps.get(threadId)?.cancel();\n\t\t\t\tthis.threadOps.deleteAndDispose(threadId);\n\t\t\t\tfor (const s of this.pendingCancellations) {\n\t\t\t\t\ts.add(threadId);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const [_, op] of this.threadOps) {\n\t\t\t\top.cancel();\n\t\t\t}\n\t\t\tthis.threadOps.clearAndDisposeAll();\n\t\t\tfor (const s of this.pendingCancellations) {\n\t\t\t\ts.add(undefined);\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["focusedStackFrame"]
}
