var y=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var S=(s,r,e,i)=>{for(var o=i>1?void 0:i?M(r,e):r,a=s.length-1,c;a>=0;a--)(c=s[a])&&(o=(i?c(r,e,o):c(o))||o);return i&&o&&y(r,e,o),o},n=(s,r)=>(e,i)=>r(e,i,s);import"../../../../../vs/base/browser/ui/actionbar/actionbar.js";import"../../../../../vs/base/common/actions.js";import{DisposableStore as B,dispose as O}from"../../../../../vs/base/common/lifecycle.js";import"vs/css!./media/debugViewlet";import"../../../../../vs/base/browser/ui/actionbar/actionViewItems.js";import*as l from"../../../../../vs/nls.js";import{createActionViewItem as q}from"../../../../../vs/platform/actions/browser/menuEntryActionViewItem.js";import{Action2 as w,MenuId as p,MenuRegistry as b,registerAction2 as D}from"../../../../../vs/platform/actions/common/actions.js";import{IConfigurationService as P}from"../../../../../vs/platform/configuration/common/configuration.js";import{ContextKeyExpr as t,IContextKeyService as W}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IContextMenuService as N,IContextViewService as R}from"../../../../../vs/platform/contextview/browser/contextView.js";import{IInstantiationService as U}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{IProgressService as z}from"../../../../../vs/platform/progress/common/progress.js";import{IQuickInputService as G}from"../../../../../vs/platform/quickinput/common/quickInput.js";import{IStorageService as F}from"../../../../../vs/platform/storage/common/storage.js";import{ITelemetryService as K}from"../../../../../vs/platform/telemetry/common/telemetry.js";import{IThemeService as X}from"../../../../../vs/platform/theme/common/themeService.js";import{IWorkspaceContextService as j}from"../../../../../vs/platform/workspace/common/workspace.js";import"../../../../../vs/workbench/browser/parts/views/viewPane.js";import{ViewPaneContainer as H,ViewsSubMenu as Y}from"../../../../../vs/workbench/browser/parts/views/viewPaneContainer.js";import{WorkbenchStateContext as C}from"../../../../../vs/workbench/common/contextkeys.js";import{IViewDescriptorService as Q}from"../../../../../vs/workbench/common/views.js";import{FocusSessionActionViewItem as $,StartDebugActionViewItem as J}from"../../../../../vs/workbench/contrib/debug/browser/debugActionViewItems.js";import{DEBUG_CONFIGURE_COMMAND_ID as Z,DEBUG_CONFIGURE_LABEL as ee,DEBUG_START_COMMAND_ID as V,DEBUG_START_LABEL as ie,DISCONNECT_ID as te,FOCUS_SESSION_ID as oe,SELECT_AND_START_ID as ne,STOP_ID as re}from"../../../../../vs/workbench/contrib/debug/browser/debugCommands.js";import{debugConfigure as se}from"../../../../../vs/workbench/contrib/debug/browser/debugIcons.js";import{createDisconnectMenuItemAction as ae}from"../../../../../vs/workbench/contrib/debug/browser/debugToolBar.js";import{WelcomeView as ce}from"../../../../../vs/workbench/contrib/debug/browser/welcomeView.js";import{BREAKPOINTS_VIEW_ID as ue,CONTEXT_DEBUG_STATE as m,CONTEXT_DEBUG_UX as I,CONTEXT_DEBUG_UX_KEY as de,CONTEXT_DEBUGGERS_AVAILABLE as le,getStateLabel as pe,IDebugService as E,REPL_VIEW_ID as f,State as T,VIEWLET_ID as u}from"../../../../../vs/workbench/contrib/debug/common/debug.js";import{IExtensionService as me}from"../../../../../vs/workbench/services/extensions/common/extensions.js";import{IWorkbenchLayoutService as ge}from"../../../../../vs/workbench/services/layout/browser/layoutService.js";import{IViewsService as ve}from"../../../../../vs/workbench/services/views/common/viewsService.js";let h=class extends H{constructor(e,i,o,a,c,g,v,A,_,k,L,fe,he,x){super(u,{mergeViewWithContainerWhenSingleView:!0},c,L,e,_,i,k,A,v,g,x);this.progressService=o;this.debugService=a;this.contextViewService=fe;this.contextKeyService=he;this._register(this.debugService.onDidChangeState(d=>this.onDebugServiceStateChange(d))),this._register(this.contextKeyService.onDidChangeContext(d=>{d.affectsSome(new Set([de,"inDebugMode"]))&&this.updateTitleArea()})),this._register(this.contextService.onDidChangeWorkbenchState(()=>this.updateTitleArea())),this._register(this.configurationService.onDidChangeConfiguration(d=>{(d.affectsConfiguration("debug.toolBarLocation")||d.affectsConfiguration("debug.hideLauncherWhileDebugging"))&&this.updateTitleArea()}))}startDebugActionViewItem;progressResolve;breakpointView;paneListeners=new Map;stopActionViewItemDisposables=this._register(new B);create(e){super.create(e),e.classList.add("debug-viewlet")}focus(){super.focus(),this.startDebugActionViewItem?this.startDebugActionViewItem.focus():this.focusView(ce.ID)}getActionViewItem(e,i){if(e.id===V)return this.startDebugActionViewItem=this.instantiationService.createInstance(J,null,e,i),this.startDebugActionViewItem;if(e.id===oe)return new $(e,void 0,this.debugService,this.contextViewService,this.configurationService);if(e.id===re||e.id===te){this.stopActionViewItemDisposables.clear();const o=this.instantiationService.invokeFunction(a=>ae(e,this.stopActionViewItemDisposables,a,{hoverDelegate:i.hoverDelegate}));if(o)return o}return q(this.instantiationService,e,i)}focusView(e){const i=this.getView(e);i&&i.focus()}onDebugServiceStateChange(e){this.progressResolve&&(this.progressResolve(),this.progressResolve=void 0),e===T.Initializing&&this.progressService.withProgress({location:u},i=>new Promise(o=>this.progressResolve=o))}addPanes(e){super.addPanes(e);for(const{pane:i}of e)i.id===ue?(this.breakpointView=i,this.updateBreakpointsMaxSize()):this.paneListeners.set(i.id,i.onDidChange(()=>this.updateBreakpointsMaxSize()))}removePanes(e){super.removePanes(e);for(const i of e)O(this.paneListeners.get(i.id)),this.paneListeners.delete(i.id)}updateBreakpointsMaxSize(){if(this.breakpointView){const e=this.panes.every(i=>!i.isExpanded()||i===this.breakpointView);this.breakpointView.maximumBodySize=e?Number.POSITIVE_INFINITY:this.breakpointView.minimumBodySize}}};h=S([n(0,ge),n(1,K),n(2,z),n(3,E),n(4,U),n(5,j),n(6,F),n(7,X),n(8,N),n(9,me),n(10,P),n(11,R),n(12,W),n(13,Q)],h),b.appendMenuItem(p.ViewContainerTitle,{when:t.and(t.equals("viewContainer",u),I.notEqualsTo("simple"),C.notEqualsTo("empty"),t.or(m.isEqualTo("inactive"),t.notEquals("config.debug.toolBarLocation","docked")),t.or(t.not("config.debug.hideLauncherWhileDebugging"),t.not("inDebugMode"))),order:10,group:"navigation",command:{precondition:m.notEqualsTo(pe(T.Initializing)),id:V,title:ie}}),D(class extends w{constructor(){super({id:Z,title:{value:ee,original:"Open 'launch.json'",mnemonicTitle:l.localize({key:"miOpenConfigurations",comment:["&& denotes a mnemonic"]},"Open &&Configurations")},metadata:{description:l.localize2("openLaunchConfigDescription","Opens the file used to configure how your program is debugged")},f1:!0,icon:se,precondition:I.notEqualsTo("simple"),menu:[{id:p.ViewContainerTitle,group:"navigation",order:20,when:t.and(t.equals("viewContainer",u),I.notEqualsTo("simple"),C.notEqualsTo("empty"),t.or(m.isEqualTo("inactive"),t.notEquals("config.debug.toolBarLocation","docked")))},{id:p.ViewContainerTitle,order:20,when:t.and(t.equals("viewContainer",u),m.notEqualsTo("inactive"),t.equals("config.debug.toolBarLocation","docked"))},{id:p.MenubarDebugMenu,group:"2_configuration",order:1,when:le}]})}async run(s){const r=s.get(E),e=s.get(G),i=r.getConfigurationManager();let o;if(i.selectedConfiguration.name)o=i.selectedConfiguration.launch;else{const a=i.getLaunches().filter(c=>!c.hidden);if(a.length===1)o=a[0];else{const c=a.map(v=>({label:v.name,launch:v})),g=await e.pick(c,{activeItem:c[0],placeHolder:l.localize({key:"selectWorkspaceFolder",comment:["User picks a workspace folder or a workspace configuration file here. Workspace configuration files can contain settings and thus a launch.json configuration can be written into one."]},"Select a workspace folder to create a launch.json file in or add it to the workspace config file")});g&&(o=g.launch)}}o&&await o.openConfigFile({preserveFocus:!1})}}),D(class extends w{constructor(){super({id:"debug.toggleReplIgnoreFocus",title:l.localize("debugPanel","Debug Console"),toggled:t.has(`view.${f}.visible`),menu:[{id:Y,group:"3_toggleRepl",order:30,when:t.and(t.equals("viewContainer",u))}]})}async run(s){const r=s.get(ve);r.isViewVisible(f)?r.closeView(f):await r.openView(f)}}),b.appendMenuItem(p.ViewContainerTitle,{when:t.and(t.equals("viewContainer",u),m.notEqualsTo("inactive"),t.or(t.equals("config.debug.toolBarLocation","docked"),t.has("config.debug.hideLauncherWhileDebugging"))),order:10,command:{id:ne,title:l.localize("startAdditionalSession","Start Additional Session")}});export{h as DebugViewPaneContainer};
