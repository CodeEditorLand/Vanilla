{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/replAccessibleView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport {\n\tAccessibleViewProviderId,\n\tAccessibleViewType,\n\ttype IAccessibleViewContentProvider,\n\tIAccessibleViewService,\n} from \"../../../../platform/accessibility/browser/accessibleView.js\";\nimport type { IAccessibleViewImplentation } from \"../../../../platform/accessibility/browser/accessibleViewRegistry.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { AccessibilityVerbositySettingId } from \"../../accessibility/browser/accessibilityConfiguration.js\";\nimport type { IReplElement } from \"../common/debug.js\";\nimport { type Repl, getReplView } from \"./repl.js\";\n\nexport class ReplAccessibleView implements IAccessibleViewImplentation {\n\tpriority = 70;\n\tname = \"debugConsole\";\n\twhen = ContextKeyExpr.equals(\"focusedView\", \"workbench.panel.repl.view\");\n\ttype: AccessibleViewType = AccessibleViewType.View;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst accessibleViewService = accessor.get(IAccessibleViewService);\n\t\tconst replView = getReplView(viewsService);\n\t\tif (!replView) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst focusedElement = replView.getFocusedElement();\n\t\treturn new ReplOutputAccessibleViewProvider(\n\t\t\treplView,\n\t\t\tfocusedElement,\n\t\t\taccessibleViewService,\n\t\t);\n\t}\n}\n\nclass ReplOutputAccessibleViewProvider\n\textends Disposable\n\timplements IAccessibleViewContentProvider\n{\n\tpublic readonly id = AccessibleViewProviderId.Repl;\n\tprivate _content: string | undefined;\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeContent: Event<void> =\n\t\tthis._onDidChangeContent.event;\n\tprivate readonly _onDidResolveChildren: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidResolveChildren: Event<void> =\n\t\tthis._onDidResolveChildren.event;\n\n\tpublic readonly verbositySettingKey = AccessibilityVerbositySettingId.Debug;\n\tpublic readonly options = {\n\t\ttype: AccessibleViewType.View,\n\t};\n\n\tprivate _elementPositionMap: Map<string, Position> = new Map<\n\t\tstring,\n\t\tPosition\n\t>();\n\tprivate _treeHadFocus = false;\n\n\tconstructor(\n\t\tprivate readonly _replView: Repl,\n\t\tprivate readonly _focusedElement: IReplElement | undefined,\n\t\t@IAccessibleViewService\n\t\tprivate readonly _accessibleViewService: IAccessibleViewService,\n\t) {\n\t\tsuper();\n\t\tthis._treeHadFocus = !!_focusedElement;\n\t}\n\tpublic provideContent(): string {\n\t\tconst debugSession = this._replView.getDebugSession();\n\t\tif (!debugSession) {\n\t\t\treturn \"No debug session available.\";\n\t\t}\n\t\tconst elements = debugSession.getReplElements();\n\t\tif (!elements.length) {\n\t\t\treturn \"No output in the debug console.\";\n\t\t}\n\t\tif (!this._content) {\n\t\t\tthis._updateContent(elements);\n\t\t}\n\t\t// Content is loaded asynchronously, so we need to check if it's available or fallback to the elements that are already available.\n\t\treturn (\n\t\t\tthis._content ?? elements.map((e) => e.toString(true)).join(\"\\n\")\n\t\t);\n\t}\n\n\tpublic onClose(): void {\n\t\tthis._content = undefined;\n\t\tthis._elementPositionMap.clear();\n\t\tif (this._treeHadFocus) {\n\t\t\treturn this._replView.focusTree();\n\t\t}\n\t\tthis._replView.getReplInput().focus();\n\t}\n\n\tpublic onOpen(): void {\n\t\t// Children are resolved async, so we need to update the content when they are resolved.\n\t\tthis._register(\n\t\t\tthis.onDidResolveChildren(() => {\n\t\t\t\tthis._onDidChangeContent.fire();\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\tif (this._focusedElement) {\n\t\t\t\t\t\tconst position = this._elementPositionMap.get(\n\t\t\t\t\t\t\tthis._focusedElement.getId(),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (position) {\n\t\t\t\t\t\t\tthis._accessibleViewService.setPosition(\n\t\t\t\t\t\t\t\tposition,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async _updateContent(elements: IReplElement[]) {\n\t\tconst dataSource = this._replView.getReplDataSource();\n\t\tif (!dataSource) {\n\t\t\treturn;\n\t\t}\n\t\tlet line = 1;\n\t\tconst content: string[] = [];\n\t\tfor (const e of elements) {\n\t\t\tcontent.push(e.toString().replace(/\\n/g, \"\"));\n\t\t\tthis._elementPositionMap.set(e.getId(), new Position(line, 1));\n\t\t\tline++;\n\t\t\tif (dataSource.hasChildren(e)) {\n\t\t\t\tconst childContent: string[] = [];\n\t\t\t\tconst children = await dataSource.getChildren(e);\n\t\t\t\tfor (const child of children) {\n\t\t\t\t\tconst id = child.getId();\n\t\t\t\t\tif (!this._elementPositionMap.has(id)) {\n\t\t\t\t\t\t// don't overwrite parent position\n\t\t\t\t\t\tthis._elementPositionMap.set(id, new Position(line, 1));\n\t\t\t\t\t}\n\t\t\t\t\tchildContent.push(\"  \" + child.toString());\n\t\t\t\t\tline++;\n\t\t\t\t}\n\t\t\t\tcontent.push(childContent.join(\"\\n\"));\n\t\t\t}\n\t\t}\n\n\t\tthis._content = content.join(\"\\n\");\n\t\tthis._onDidResolveChildren.fire();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
