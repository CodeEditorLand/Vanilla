{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugIcons.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { localize } from '../../../../nls.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\n\nexport const debugConsoleViewIcon = registerIcon('debug-console-view-icon', Codicon.debugConsole, localize('debugConsoleViewIcon', 'View icon of the debug console view.'));\nexport const runViewIcon = registerIcon('run-view-icon', Codicon.debugAlt, localize('runViewIcon', 'View icon of the run view.'));\nexport const variablesViewIcon = registerIcon('variables-view-icon', Codicon.debugAlt, localize('variablesViewIcon', 'View icon of the variables view.'));\nexport const watchViewIcon = registerIcon('watch-view-icon', Codicon.debugAlt, localize('watchViewIcon', 'View icon of the watch view.'));\nexport const callStackViewIcon = registerIcon('callstack-view-icon', Codicon.debugAlt, localize('callStackViewIcon', 'View icon of the call stack view.'));\nexport const breakpointsViewIcon = registerIcon('breakpoints-view-icon', Codicon.debugAlt, localize('breakpointsViewIcon', 'View icon of the breakpoints view.'));\nexport const loadedScriptsViewIcon = registerIcon('loaded-scripts-view-icon', Codicon.debugAlt, localize('loadedScriptsViewIcon', 'View icon of the loaded scripts view.'));\n\nexport const breakpoint = {\n\tregular: registerIcon('debug-breakpoint', Codicon.debugBreakpoint, localize('debugBreakpoint', 'Icon for breakpoints.')),\n\tdisabled: registerIcon('debug-breakpoint-disabled', Codicon.debugBreakpointDisabled, localize('debugBreakpointDisabled', 'Icon for disabled breakpoints.')),\n\tunverified: registerIcon('debug-breakpoint-unverified', Codicon.debugBreakpointUnverified, localize('debugBreakpointUnverified', 'Icon for unverified breakpoints.')),\n\tpending: registerIcon('debug-breakpoint-pending', Codicon.debugBreakpointPending, localize('debugBreakpointPendingOnTrigger', 'Icon for breakpoints waiting on another breakpoint.')),\n};\nexport const functionBreakpoint = {\n\tregular: registerIcon('debug-breakpoint-function', Codicon.debugBreakpointFunction, localize('debugBreakpointFunction', 'Icon for function breakpoints.')),\n\tdisabled: registerIcon('debug-breakpoint-function-disabled', Codicon.debugBreakpointFunctionDisabled, localize('debugBreakpointFunctionDisabled', 'Icon for disabled function breakpoints.')),\n\tunverified: registerIcon('debug-breakpoint-function-unverified', Codicon.debugBreakpointFunctionUnverified, localize('debugBreakpointFunctionUnverified', 'Icon for unverified function breakpoints.'))\n};\nexport const conditionalBreakpoint = {\n\tregular: registerIcon('debug-breakpoint-conditional', Codicon.debugBreakpointConditional, localize('debugBreakpointConditional', 'Icon for conditional breakpoints.')),\n\tdisabled: registerIcon('debug-breakpoint-conditional-disabled', Codicon.debugBreakpointConditionalDisabled, localize('debugBreakpointConditionalDisabled', 'Icon for disabled conditional breakpoints.')),\n\tunverified: registerIcon('debug-breakpoint-conditional-unverified', Codicon.debugBreakpointConditionalUnverified, localize('debugBreakpointConditionalUnverified', 'Icon for unverified conditional breakpoints.'))\n};\nexport const dataBreakpoint = {\n\tregular: registerIcon('debug-breakpoint-data', Codicon.debugBreakpointData, localize('debugBreakpointData', 'Icon for data breakpoints.')),\n\tdisabled: registerIcon('debug-breakpoint-data-disabled', Codicon.debugBreakpointDataDisabled, localize('debugBreakpointDataDisabled', 'Icon for disabled data breakpoints.')),\n\tunverified: registerIcon('debug-breakpoint-data-unverified', Codicon.debugBreakpointDataUnverified, localize('debugBreakpointDataUnverified', 'Icon for unverified data breakpoints.')),\n};\nexport const logBreakpoint = {\n\tregular: registerIcon('debug-breakpoint-log', Codicon.debugBreakpointLog, localize('debugBreakpointLog', 'Icon for log breakpoints.')),\n\tdisabled: registerIcon('debug-breakpoint-log-disabled', Codicon.debugBreakpointLogDisabled, localize('debugBreakpointLogDisabled', 'Icon for disabled log breakpoint.')),\n\tunverified: registerIcon('debug-breakpoint-log-unverified', Codicon.debugBreakpointLogUnverified, localize('debugBreakpointLogUnverified', 'Icon for unverified log breakpoints.')),\n};\n\nexport const debugBreakpointHint = registerIcon('debug-hint', Codicon.debugHint, localize('debugBreakpointHint', 'Icon for breakpoint hints shown on hover in editor glyph margin.'));\nexport const debugBreakpointUnsupported = registerIcon('debug-breakpoint-unsupported', Codicon.debugBreakpointUnsupported, localize('debugBreakpointUnsupported', 'Icon for unsupported breakpoints.'));\n\nexport const allBreakpoints = [breakpoint, functionBreakpoint, conditionalBreakpoint, dataBreakpoint, logBreakpoint];\n\n\nexport const debugStackframe = registerIcon('debug-stackframe', Codicon.debugStackframe, localize('debugStackframe', 'Icon for a stackframe shown in the editor glyph margin.'));\nexport const debugStackframeFocused = registerIcon('debug-stackframe-focused', Codicon.debugStackframeFocused, localize('debugStackframeFocused', 'Icon for a focused stackframe  shown in the editor glyph margin.'));\n\nexport const debugGripper = registerIcon('debug-gripper', Codicon.gripper, localize('debugGripper', 'Icon for the debug bar gripper.'));\n\nexport const debugRestartFrame = registerIcon('debug-restart-frame', Codicon.debugRestartFrame, localize('debugRestartFrame', 'Icon for the debug restart frame action.'));\n\nexport const debugStop = registerIcon('debug-stop', Codicon.debugStop, localize('debugStop', 'Icon for the debug stop action.'));\nexport const debugDisconnect = registerIcon('debug-disconnect', Codicon.debugDisconnect, localize('debugDisconnect', 'Icon for the debug disconnect action.'));\nexport const debugRestart = registerIcon('debug-restart', Codicon.debugRestart, localize('debugRestart', 'Icon for the debug restart action.'));\nexport const debugStepOver = registerIcon('debug-step-over', Codicon.debugStepOver, localize('debugStepOver', 'Icon for the debug step over action.'));\nexport const debugStepInto = registerIcon('debug-step-into', Codicon.debugStepInto, localize('debugStepInto', 'Icon for the debug step into action.'));\nexport const debugStepOut = registerIcon('debug-step-out', Codicon.debugStepOut, localize('debugStepOut', 'Icon for the debug step out action.'));\nexport const debugStepBack = registerIcon('debug-step-back', Codicon.debugStepBack, localize('debugStepBack', 'Icon for the debug step back action.'));\nexport const debugPause = registerIcon('debug-pause', Codicon.debugPause, localize('debugPause', 'Icon for the debug pause action.'));\nexport const debugContinue = registerIcon('debug-continue', Codicon.debugContinue, localize('debugContinue', 'Icon for the debug continue action.'));\nexport const debugReverseContinue = registerIcon('debug-reverse-continue', Codicon.debugReverseContinue, localize('debugReverseContinue', 'Icon for the debug reverse continue action.'));\nexport const debugRun = registerIcon('debug-run', Codicon.run, localize('debugRun', 'Icon for the run or debug action.'));\n\nexport const debugStart = registerIcon('debug-start', Codicon.debugStart, localize('debugStart', 'Icon for the debug start action.'));\nexport const debugConfigure = registerIcon('debug-configure', Codicon.gear, localize('debugConfigure', 'Icon for the debug configure action.'));\nexport const debugConsole = registerIcon('debug-console', Codicon.gear, localize('debugConsole', 'Icon for the debug console open action.'));\nexport const debugRemoveConfig = registerIcon('debug-remove-config', Codicon.trash, localize('debugRemoveConfig', 'Icon for removing debug configurations.'));\n\nexport const debugCollapseAll = registerIcon('debug-collapse-all', Codicon.collapseAll, localize('debugCollapseAll', 'Icon for the collapse all action in the debug views.'));\nexport const callstackViewSession = registerIcon('callstack-view-session', Codicon.bug, localize('callstackViewSession', 'Icon for the session icon in the call stack view.'));\nexport const debugConsoleClearAll = registerIcon('debug-console-clear-all', Codicon.clearAll, localize('debugConsoleClearAll', 'Icon for the clear all action in the debug console.'));\nexport const watchExpressionsRemoveAll = registerIcon('watch-expressions-remove-all', Codicon.closeAll, localize('watchExpressionsRemoveAll', 'Icon for the Remove All action in the watch view.'));\nexport const watchExpressionRemove = registerIcon('watch-expression-remove', Codicon.removeClose, localize('watchExpressionRemove', 'Icon for the Remove action in the watch view.'));\nexport const watchExpressionsAdd = registerIcon('watch-expressions-add', Codicon.add, localize('watchExpressionsAdd', 'Icon for the add action in the watch view.'));\nexport const watchExpressionsAddFuncBreakpoint = registerIcon('watch-expressions-add-function-breakpoint', Codicon.add, localize('watchExpressionsAddFuncBreakpoint', 'Icon for the add function breakpoint action in the watch view.'));\nexport const watchExpressionsAddDataBreakpoint = registerIcon('watch-expressions-add-data-breakpoint', Codicon.variableGroup, localize('watchExpressionsAddDataBreakpoint', 'Icon for the add data breakpoint action in the breakpoints view.'));\n\nexport const breakpointsRemoveAll = registerIcon('breakpoints-remove-all', Codicon.closeAll, localize('breakpointsRemoveAll', 'Icon for the Remove All action in the breakpoints view.'));\nexport const breakpointsActivate = registerIcon('breakpoints-activate', Codicon.activateBreakpoints, localize('breakpointsActivate', 'Icon for the activate action in the breakpoints view.'));\n\nexport const debugConsoleEvaluationInput = registerIcon('debug-console-evaluation-input', Codicon.arrowSmallRight, localize('debugConsoleEvaluationInput', 'Icon for the debug evaluation input marker.'));\nexport const debugConsoleEvaluationPrompt = registerIcon('debug-console-evaluation-prompt', Codicon.chevronRight, localize('debugConsoleEvaluationPrompt', 'Icon for the debug evaluation prompt.'));\n\nexport const debugInspectMemory = registerIcon('debug-inspect-memory', Codicon.fileBinary, localize('debugInspectMemory', 'Icon for the inspect memory action.'));\n"],
  "mappings": "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",
  "names": []
}
