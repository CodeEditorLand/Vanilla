{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugIcons.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\n\nexport const debugConsoleViewIcon = registerIcon(\n\t\"debug-console-view-icon\",\n\tCodicon.debugConsole,\n\tlocalize(\"debugConsoleViewIcon\", \"View icon of the debug console view.\"),\n);\nexport const runViewIcon = registerIcon(\n\t\"run-view-icon\",\n\tCodicon.debugAlt,\n\tlocalize(\"runViewIcon\", \"View icon of the run view.\"),\n);\nexport const variablesViewIcon = registerIcon(\n\t\"variables-view-icon\",\n\tCodicon.debugAlt,\n\tlocalize(\"variablesViewIcon\", \"View icon of the variables view.\"),\n);\nexport const watchViewIcon = registerIcon(\n\t\"watch-view-icon\",\n\tCodicon.debugAlt,\n\tlocalize(\"watchViewIcon\", \"View icon of the watch view.\"),\n);\nexport const callStackViewIcon = registerIcon(\n\t\"callstack-view-icon\",\n\tCodicon.debugAlt,\n\tlocalize(\"callStackViewIcon\", \"View icon of the call stack view.\"),\n);\nexport const breakpointsViewIcon = registerIcon(\n\t\"breakpoints-view-icon\",\n\tCodicon.debugAlt,\n\tlocalize(\"breakpointsViewIcon\", \"View icon of the breakpoints view.\"),\n);\nexport const loadedScriptsViewIcon = registerIcon(\n\t\"loaded-scripts-view-icon\",\n\tCodicon.debugAlt,\n\tlocalize(\"loadedScriptsViewIcon\", \"View icon of the loaded scripts view.\"),\n);\n\nexport const breakpoint = {\n\tregular: registerIcon(\n\t\t\"debug-breakpoint\",\n\t\tCodicon.debugBreakpoint,\n\t\tlocalize(\"debugBreakpoint\", \"Icon for breakpoints.\"),\n\t),\n\tdisabled: registerIcon(\n\t\t\"debug-breakpoint-disabled\",\n\t\tCodicon.debugBreakpointDisabled,\n\t\tlocalize(\"debugBreakpointDisabled\", \"Icon for disabled breakpoints.\"),\n\t),\n\tunverified: registerIcon(\n\t\t\"debug-breakpoint-unverified\",\n\t\tCodicon.debugBreakpointUnverified,\n\t\tlocalize(\n\t\t\t\"debugBreakpointUnverified\",\n\t\t\t\"Icon for unverified breakpoints.\",\n\t\t),\n\t),\n\tpending: registerIcon(\n\t\t\"debug-breakpoint-pending\",\n\t\tCodicon.debugBreakpointPending,\n\t\tlocalize(\n\t\t\t\"debugBreakpointPendingOnTrigger\",\n\t\t\t\"Icon for breakpoints waiting on another breakpoint.\",\n\t\t),\n\t),\n};\nexport const functionBreakpoint = {\n\tregular: registerIcon(\n\t\t\"debug-breakpoint-function\",\n\t\tCodicon.debugBreakpointFunction,\n\t\tlocalize(\"debugBreakpointFunction\", \"Icon for function breakpoints.\"),\n\t),\n\tdisabled: registerIcon(\n\t\t\"debug-breakpoint-function-disabled\",\n\t\tCodicon.debugBreakpointFunctionDisabled,\n\t\tlocalize(\n\t\t\t\"debugBreakpointFunctionDisabled\",\n\t\t\t\"Icon for disabled function breakpoints.\",\n\t\t),\n\t),\n\tunverified: registerIcon(\n\t\t\"debug-breakpoint-function-unverified\",\n\t\tCodicon.debugBreakpointFunctionUnverified,\n\t\tlocalize(\n\t\t\t\"debugBreakpointFunctionUnverified\",\n\t\t\t\"Icon for unverified function breakpoints.\",\n\t\t),\n\t),\n};\nexport const conditionalBreakpoint = {\n\tregular: registerIcon(\n\t\t\"debug-breakpoint-conditional\",\n\t\tCodicon.debugBreakpointConditional,\n\t\tlocalize(\n\t\t\t\"debugBreakpointConditional\",\n\t\t\t\"Icon for conditional breakpoints.\",\n\t\t),\n\t),\n\tdisabled: registerIcon(\n\t\t\"debug-breakpoint-conditional-disabled\",\n\t\tCodicon.debugBreakpointConditionalDisabled,\n\t\tlocalize(\n\t\t\t\"debugBreakpointConditionalDisabled\",\n\t\t\t\"Icon for disabled conditional breakpoints.\",\n\t\t),\n\t),\n\tunverified: registerIcon(\n\t\t\"debug-breakpoint-conditional-unverified\",\n\t\tCodicon.debugBreakpointConditionalUnverified,\n\t\tlocalize(\n\t\t\t\"debugBreakpointConditionalUnverified\",\n\t\t\t\"Icon for unverified conditional breakpoints.\",\n\t\t),\n\t),\n};\nexport const dataBreakpoint = {\n\tregular: registerIcon(\n\t\t\"debug-breakpoint-data\",\n\t\tCodicon.debugBreakpointData,\n\t\tlocalize(\"debugBreakpointData\", \"Icon for data breakpoints.\"),\n\t),\n\tdisabled: registerIcon(\n\t\t\"debug-breakpoint-data-disabled\",\n\t\tCodicon.debugBreakpointDataDisabled,\n\t\tlocalize(\n\t\t\t\"debugBreakpointDataDisabled\",\n\t\t\t\"Icon for disabled data breakpoints.\",\n\t\t),\n\t),\n\tunverified: registerIcon(\n\t\t\"debug-breakpoint-data-unverified\",\n\t\tCodicon.debugBreakpointDataUnverified,\n\t\tlocalize(\n\t\t\t\"debugBreakpointDataUnverified\",\n\t\t\t\"Icon for unverified data breakpoints.\",\n\t\t),\n\t),\n};\nexport const logBreakpoint = {\n\tregular: registerIcon(\n\t\t\"debug-breakpoint-log\",\n\t\tCodicon.debugBreakpointLog,\n\t\tlocalize(\"debugBreakpointLog\", \"Icon for log breakpoints.\"),\n\t),\n\tdisabled: registerIcon(\n\t\t\"debug-breakpoint-log-disabled\",\n\t\tCodicon.debugBreakpointLogDisabled,\n\t\tlocalize(\n\t\t\t\"debugBreakpointLogDisabled\",\n\t\t\t\"Icon for disabled log breakpoint.\",\n\t\t),\n\t),\n\tunverified: registerIcon(\n\t\t\"debug-breakpoint-log-unverified\",\n\t\tCodicon.debugBreakpointLogUnverified,\n\t\tlocalize(\n\t\t\t\"debugBreakpointLogUnverified\",\n\t\t\t\"Icon for unverified log breakpoints.\",\n\t\t),\n\t),\n};\n\nexport const debugBreakpointHint = registerIcon(\n\t\"debug-hint\",\n\tCodicon.debugHint,\n\tlocalize(\n\t\t\"debugBreakpointHint\",\n\t\t\"Icon for breakpoint hints shown on hover in editor glyph margin.\",\n\t),\n);\nexport const debugBreakpointUnsupported = registerIcon(\n\t\"debug-breakpoint-unsupported\",\n\tCodicon.debugBreakpointUnsupported,\n\tlocalize(\"debugBreakpointUnsupported\", \"Icon for unsupported breakpoints.\"),\n);\n\nexport const allBreakpoints = [\n\tbreakpoint,\n\tfunctionBreakpoint,\n\tconditionalBreakpoint,\n\tdataBreakpoint,\n\tlogBreakpoint,\n];\n\nexport const debugStackframe = registerIcon(\n\t\"debug-stackframe\",\n\tCodicon.debugStackframe,\n\tlocalize(\n\t\t\"debugStackframe\",\n\t\t\"Icon for a stackframe shown in the editor glyph margin.\",\n\t),\n);\nexport const debugStackframeFocused = registerIcon(\n\t\"debug-stackframe-focused\",\n\tCodicon.debugStackframeFocused,\n\tlocalize(\n\t\t\"debugStackframeFocused\",\n\t\t\"Icon for a focused stackframe  shown in the editor glyph margin.\",\n\t),\n);\n\nexport const debugGripper = registerIcon(\n\t\"debug-gripper\",\n\tCodicon.gripper,\n\tlocalize(\"debugGripper\", \"Icon for the debug bar gripper.\"),\n);\n\nexport const debugRestartFrame = registerIcon(\n\t\"debug-restart-frame\",\n\tCodicon.debugRestartFrame,\n\tlocalize(\"debugRestartFrame\", \"Icon for the debug restart frame action.\"),\n);\n\nexport const debugStop = registerIcon(\n\t\"debug-stop\",\n\tCodicon.debugStop,\n\tlocalize(\"debugStop\", \"Icon for the debug stop action.\"),\n);\nexport const debugDisconnect = registerIcon(\n\t\"debug-disconnect\",\n\tCodicon.debugDisconnect,\n\tlocalize(\"debugDisconnect\", \"Icon for the debug disconnect action.\"),\n);\nexport const debugRestart = registerIcon(\n\t\"debug-restart\",\n\tCodicon.debugRestart,\n\tlocalize(\"debugRestart\", \"Icon for the debug restart action.\"),\n);\nexport const debugStepOver = registerIcon(\n\t\"debug-step-over\",\n\tCodicon.debugStepOver,\n\tlocalize(\"debugStepOver\", \"Icon for the debug step over action.\"),\n);\nexport const debugStepInto = registerIcon(\n\t\"debug-step-into\",\n\tCodicon.debugStepInto,\n\tlocalize(\"debugStepInto\", \"Icon for the debug step into action.\"),\n);\nexport const debugStepOut = registerIcon(\n\t\"debug-step-out\",\n\tCodicon.debugStepOut,\n\tlocalize(\"debugStepOut\", \"Icon for the debug step out action.\"),\n);\nexport const debugStepBack = registerIcon(\n\t\"debug-step-back\",\n\tCodicon.debugStepBack,\n\tlocalize(\"debugStepBack\", \"Icon for the debug step back action.\"),\n);\nexport const debugPause = registerIcon(\n\t\"debug-pause\",\n\tCodicon.debugPause,\n\tlocalize(\"debugPause\", \"Icon for the debug pause action.\"),\n);\nexport const debugContinue = registerIcon(\n\t\"debug-continue\",\n\tCodicon.debugContinue,\n\tlocalize(\"debugContinue\", \"Icon for the debug continue action.\"),\n);\nexport const debugReverseContinue = registerIcon(\n\t\"debug-reverse-continue\",\n\tCodicon.debugReverseContinue,\n\tlocalize(\n\t\t\"debugReverseContinue\",\n\t\t\"Icon for the debug reverse continue action.\",\n\t),\n);\nexport const debugRun = registerIcon(\n\t\"debug-run\",\n\tCodicon.run,\n\tlocalize(\"debugRun\", \"Icon for the run or debug action.\"),\n);\n\nexport const debugStart = registerIcon(\n\t\"debug-start\",\n\tCodicon.debugStart,\n\tlocalize(\"debugStart\", \"Icon for the debug start action.\"),\n);\nexport const debugConfigure = registerIcon(\n\t\"debug-configure\",\n\tCodicon.gear,\n\tlocalize(\"debugConfigure\", \"Icon for the debug configure action.\"),\n);\nexport const debugConsole = registerIcon(\n\t\"debug-console\",\n\tCodicon.gear,\n\tlocalize(\"debugConsole\", \"Icon for the debug console open action.\"),\n);\nexport const debugRemoveConfig = registerIcon(\n\t\"debug-remove-config\",\n\tCodicon.trash,\n\tlocalize(\"debugRemoveConfig\", \"Icon for removing debug configurations.\"),\n);\n\nexport const debugCollapseAll = registerIcon(\n\t\"debug-collapse-all\",\n\tCodicon.collapseAll,\n\tlocalize(\n\t\t\"debugCollapseAll\",\n\t\t\"Icon for the collapse all action in the debug views.\",\n\t),\n);\nexport const callstackViewSession = registerIcon(\n\t\"callstack-view-session\",\n\tCodicon.bug,\n\tlocalize(\n\t\t\"callstackViewSession\",\n\t\t\"Icon for the session icon in the call stack view.\",\n\t),\n);\nexport const debugConsoleClearAll = registerIcon(\n\t\"debug-console-clear-all\",\n\tCodicon.clearAll,\n\tlocalize(\n\t\t\"debugConsoleClearAll\",\n\t\t\"Icon for the clear all action in the debug console.\",\n\t),\n);\nexport const watchExpressionsRemoveAll = registerIcon(\n\t\"watch-expressions-remove-all\",\n\tCodicon.closeAll,\n\tlocalize(\n\t\t\"watchExpressionsRemoveAll\",\n\t\t\"Icon for the Remove All action in the watch view.\",\n\t),\n);\nexport const watchExpressionRemove = registerIcon(\n\t\"watch-expression-remove\",\n\tCodicon.removeClose,\n\tlocalize(\n\t\t\"watchExpressionRemove\",\n\t\t\"Icon for the Remove action in the watch view.\",\n\t),\n);\nexport const watchExpressionsAdd = registerIcon(\n\t\"watch-expressions-add\",\n\tCodicon.add,\n\tlocalize(\n\t\t\"watchExpressionsAdd\",\n\t\t\"Icon for the add action in the watch view.\",\n\t),\n);\nexport const watchExpressionsAddFuncBreakpoint = registerIcon(\n\t\"watch-expressions-add-function-breakpoint\",\n\tCodicon.add,\n\tlocalize(\n\t\t\"watchExpressionsAddFuncBreakpoint\",\n\t\t\"Icon for the add function breakpoint action in the watch view.\",\n\t),\n);\nexport const watchExpressionsAddDataBreakpoint = registerIcon(\n\t\"watch-expressions-add-data-breakpoint\",\n\tCodicon.variableGroup,\n\tlocalize(\n\t\t\"watchExpressionsAddDataBreakpoint\",\n\t\t\"Icon for the add data breakpoint action in the breakpoints view.\",\n\t),\n);\n\nexport const breakpointsRemoveAll = registerIcon(\n\t\"breakpoints-remove-all\",\n\tCodicon.closeAll,\n\tlocalize(\n\t\t\"breakpointsRemoveAll\",\n\t\t\"Icon for the Remove All action in the breakpoints view.\",\n\t),\n);\nexport const breakpointsActivate = registerIcon(\n\t\"breakpoints-activate\",\n\tCodicon.activateBreakpoints,\n\tlocalize(\n\t\t\"breakpointsActivate\",\n\t\t\"Icon for the activate action in the breakpoints view.\",\n\t),\n);\n\nexport const debugConsoleEvaluationInput = registerIcon(\n\t\"debug-console-evaluation-input\",\n\tCodicon.arrowSmallRight,\n\tlocalize(\n\t\t\"debugConsoleEvaluationInput\",\n\t\t\"Icon for the debug evaluation input marker.\",\n\t),\n);\nexport const debugConsoleEvaluationPrompt = registerIcon(\n\t\"debug-console-evaluation-prompt\",\n\tCodicon.chevronRight,\n\tlocalize(\n\t\t\"debugConsoleEvaluationPrompt\",\n\t\t\"Icon for the debug evaluation prompt.\",\n\t),\n);\n\nexport const debugInspectMemory = registerIcon(\n\t\"debug-inspect-memory\",\n\tCodicon.fileBinary,\n\tlocalize(\"debugInspectMemory\", \"Icon for the inspect memory action.\"),\n);\n"],
  "mappings": "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",
  "names": []
}
