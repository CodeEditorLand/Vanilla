{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { IDisposable, dispose } from '../../../../base/common/lifecycle.js';\nimport { IDebugService, State, IDebugConfiguration } from '../common/debug.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IStatusbarEntry, IStatusbarService, StatusbarAlignment, IStatusbarEntryAccessor } from '../../../services/statusbar/browser/statusbar.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\n\nexport class DebugStatusContribution implements IWorkbenchContribution {\n\n\tprivate showInStatusBar!: 'never' | 'always' | 'onFirstSessionStart';\n\tprivate toDispose: IDisposable[] = [];\n\tprivate entryAccessor: IStatusbarEntryAccessor | undefined;\n\n\tconstructor(\n\t\t@IStatusbarService private readonly statusBarService: IStatusbarService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\n\t\tconst addStatusBarEntry = () => {\n\t\t\tthis.entryAccessor = this.statusBarService.addEntry(this.entry, 'status.debug', StatusbarAlignment.LEFT, 30 /* Low Priority */);\n\t\t};\n\n\t\tconst setShowInStatusBar = () => {\n\t\t\tthis.showInStatusBar = configurationService.getValue<IDebugConfiguration>('debug').showInStatusBar;\n\t\t\tif (this.showInStatusBar === 'always' && !this.entryAccessor) {\n\t\t\t\taddStatusBarEntry();\n\t\t\t}\n\t\t};\n\t\tsetShowInStatusBar();\n\n\t\tthis.toDispose.push(this.debugService.onDidChangeState(state => {\n\t\t\tif (state !== State.Inactive && this.showInStatusBar === 'onFirstSessionStart' && !this.entryAccessor) {\n\t\t\t\taddStatusBarEntry();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug.showInStatusBar')) {\n\t\t\t\tsetShowInStatusBar();\n\t\t\t\tif (this.entryAccessor && this.showInStatusBar === 'never') {\n\t\t\t\t\tthis.entryAccessor.dispose();\n\t\t\t\t\tthis.entryAccessor = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.debugService.getConfigurationManager().onDidSelectConfiguration(e => {\n\t\t\tthis.entryAccessor?.update(this.entry);\n\t\t}));\n\t}\n\n\tprivate get entry(): IStatusbarEntry {\n\t\tlet text = '';\n\t\tconst manager = this.debugService.getConfigurationManager();\n\t\tconst name = manager.selectedConfiguration.name || '';\n\t\tconst nameAndLaunchPresent = name && manager.selectedConfiguration.launch;\n\t\tif (nameAndLaunchPresent) {\n\t\t\ttext = (manager.getLaunches().length > 1 ? `${name} (${manager.selectedConfiguration.launch!.name})` : name);\n\t\t}\n\n\t\treturn {\n\t\t\tname: nls.localize('status.debug', \"Debug\"),\n\t\t\ttext: '$(debug-alt-small) ' + text,\n\t\t\tariaLabel: nls.localize('debugTarget', \"Debug: {0}\", text),\n\t\t\ttooltip: nls.localize('selectAndStartDebug', \"Select and Start Debug Configuration\"),\n\t\t\tcommand: 'workbench.action.debug.selectandstart'\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tthis.entryAccessor?.dispose();\n\t\tdispose(this.toDispose);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,SAAS;AACrB,SAAS,aAAa,eAAe;AACrC,SAAS,eAAe,OAAO,2BAA2B;AAC1D,SAAS,6BAA6B;AACtC,SAAS,iBAAiB,mBAAmB,oBAAoB,+BAA+B;AAChG,SAAS,8BAA8B;AAEhC,IAAM,0BAAN,MAAgE;AAAA,EAMtE,YACqC,kBACJ,cACT,sBACtB;AAHmC;AACJ;AAIhC,UAAM,oBAAoB,6BAAM;AAC/B,WAAK,gBAAgB,KAAK,iBAAiB;AAAA,QAAS,KAAK;AAAA,QAAO;AAAA,QAAgB,mBAAmB;AAAA,QAAM;AAAA;AAAA,MAAqB;AAAA,IAC/H,GAF0B;AAI1B,UAAM,qBAAqB,6BAAM;AAChC,WAAK,kBAAkB,qBAAqB,SAA8B,OAAO,EAAE;AACnF,UAAI,KAAK,oBAAoB,YAAY,CAAC,KAAK,eAAe;AAC7D,0BAAkB;AAAA,MACnB;AAAA,IACD,GAL2B;AAM3B,uBAAmB;AAEnB,SAAK,UAAU,KAAK,KAAK,aAAa,iBAAiB,WAAS;AAC/D,UAAI,UAAU,MAAM,YAAY,KAAK,oBAAoB,yBAAyB,CAAC,KAAK,eAAe;AACtG,0BAAkB;AAAA,MACnB;AAAA,IACD,CAAC,CAAC;AACF,SAAK,UAAU,KAAK,qBAAqB,yBAAyB,OAAK;AACtE,UAAI,EAAE,qBAAqB,uBAAuB,GAAG;AACpD,2BAAmB;AACnB,YAAI,KAAK,iBAAiB,KAAK,oBAAoB,SAAS;AAC3D,eAAK,cAAc,QAAQ;AAC3B,eAAK,gBAAgB;AAAA,QACtB;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AACF,SAAK,UAAU,KAAK,KAAK,aAAa,wBAAwB,EAAE,yBAAyB,OAAK;AAC7F,WAAK,eAAe,OAAO,KAAK,KAAK;AAAA,IACtC,CAAC,CAAC;AAAA,EACH;AAAA,EArDD,OAYuE;AAAA;AAAA;AAAA,EAE9D;AAAA,EACA,YAA2B,CAAC;AAAA,EAC5B;AAAA,EAuCR,IAAY,QAAyB;AACpC,QAAI,OAAO;AACX,UAAM,UAAU,KAAK,aAAa,wBAAwB;AAC1D,UAAM,OAAO,QAAQ,sBAAsB,QAAQ;AACnD,UAAM,uBAAuB,QAAQ,QAAQ,sBAAsB;AACnE,QAAI,sBAAsB;AACzB,aAAQ,QAAQ,YAAY,EAAE,SAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,sBAAsB,OAAQ,IAAI,MAAM;AAAA,IACxG;AAEA,WAAO;AAAA,MACN,MAAM,IAAI,SAAS,gBAAgB,OAAO;AAAA,MAC1C,MAAM,wBAAwB;AAAA,MAC9B,WAAW,IAAI,SAAS,eAAe,cAAc,IAAI;AAAA,MACzD,SAAS,IAAI,SAAS,uBAAuB,sCAAsC;AAAA,MACnF,SAAS;AAAA,IACV;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,eAAe,QAAQ;AAC5B,YAAQ,KAAK,SAAS;AAAA,EACvB;AACD;AAjEa,0BAAN;AAAA,EAOJ;AAAA,EACA;AAAA,EACA;AAAA,GATU;",
  "names": []
}
