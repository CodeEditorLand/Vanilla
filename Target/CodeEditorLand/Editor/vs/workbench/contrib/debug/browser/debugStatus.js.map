{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\nimport {\n\ttype IDebugConfiguration,\n\tIDebugService,\n\tState,\n} from \"../common/debug.js\";\n\nexport class DebugStatusContribution implements IWorkbenchContribution {\n\tprivate showInStatusBar!: \"never\" | \"always\" | \"onFirstSessionStart\";\n\tprivate toDispose: IDisposable[] = [];\n\tprivate entryAccessor: IStatusbarEntryAccessor | undefined;\n\n\tconstructor(\n\t\t@IStatusbarService private readonly statusBarService: IStatusbarService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tconst addStatusBarEntry = () => {\n\t\t\tthis.entryAccessor = this.statusBarService.addEntry(\n\t\t\t\tthis.entry,\n\t\t\t\t\"status.debug\",\n\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t30 /* Low Priority */,\n\t\t\t);\n\t\t};\n\n\t\tconst setShowInStatusBar = () => {\n\t\t\tthis.showInStatusBar =\n\t\t\t\tconfigurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\t\"debug\",\n\t\t\t\t).showInStatusBar;\n\t\t\tif (this.showInStatusBar === \"always\" && !this.entryAccessor) {\n\t\t\t\taddStatusBarEntry();\n\t\t\t}\n\t\t};\n\t\tsetShowInStatusBar();\n\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService.onDidChangeState((state) => {\n\t\t\t\tif (\n\t\t\t\t\tstate !== State.Inactive &&\n\t\t\t\t\tthis.showInStatusBar === \"onFirstSessionStart\" &&\n\t\t\t\t\t!this.entryAccessor\n\t\t\t\t) {\n\t\t\t\t\taddStatusBarEntry();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"debug.showInStatusBar\")) {\n\t\t\t\t\tsetShowInStatusBar();\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.entryAccessor &&\n\t\t\t\t\t\tthis.showInStatusBar === \"never\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.entryAccessor.dispose();\n\t\t\t\t\t\tthis.entryAccessor = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService\n\t\t\t\t.getConfigurationManager()\n\t\t\t\t.onDidSelectConfiguration((e) => {\n\t\t\t\t\tthis.entryAccessor?.update(this.entry);\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tprivate get entry(): IStatusbarEntry {\n\t\tlet text = \"\";\n\t\tconst manager = this.debugService.getConfigurationManager();\n\t\tconst name = manager.selectedConfiguration.name || \"\";\n\t\tconst nameAndLaunchPresent =\n\t\t\tname && manager.selectedConfiguration.launch;\n\t\tif (nameAndLaunchPresent) {\n\t\t\ttext =\n\t\t\t\tmanager.getLaunches().length > 1\n\t\t\t\t\t? `${name} (${manager.selectedConfiguration.launch!.name})`\n\t\t\t\t\t: name;\n\t\t}\n\n\t\treturn {\n\t\t\tname: nls.localize(\"status.debug\", \"Debug\"),\n\t\t\ttext: \"$(debug-alt-small) \" + text,\n\t\t\tariaLabel: nls.localize(\"debugTarget\", \"Debug: {0}\", text),\n\t\t\ttooltip: nls.localize(\n\t\t\t\t\"selectAndStartDebug\",\n\t\t\t\t\"Select and Start Debug Configuration\",\n\t\t\t),\n\t\t\tcommand: \"workbench.action.debug.selectandstart\",\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tthis.entryAccessor?.dispose();\n\t\tdispose(this.toDispose);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EAEC;AAAA,OACM;AACP,YAAY,SAAS;AACrB,SAAS,6BAA6B;AAEtC;AAAA,EAGC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AAEA,IAAM,0BAAN,MAAgE;AAAA,EAKtE,YACqC,kBACJ,cACT,sBACtB;AAHmC;AACJ;AAGhC,UAAM,oBAAoB,6BAAM;AAC/B,WAAK,gBAAgB,KAAK,iBAAiB;AAAA,QAC1C,KAAK;AAAA,QACL;AAAA,QACA,mBAAmB;AAAA,QACnB;AAAA,MACD;AAAA,IACD,GAP0B;AAS1B,UAAM,qBAAqB,6BAAM;AAChC,WAAK,kBACJ,qBAAqB;AAAA,QACpB;AAAA,MACD,EAAE;AACH,UAAI,KAAK,oBAAoB,YAAY,CAAC,KAAK,eAAe;AAC7D,0BAAkB;AAAA,MACnB;AAAA,IACD,GAR2B;AAS3B,uBAAmB;AAEnB,SAAK,UAAU;AAAA,MACd,KAAK,aAAa,iBAAiB,CAAC,UAAU;AAC7C,YACC,UAAU,MAAM,YAChB,KAAK,oBAAoB,yBACzB,CAAC,KAAK,eACL;AACD,4BAAkB;AAAA,QACnB;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK,UAAU;AAAA,MACd,qBAAqB,yBAAyB,CAAC,MAAM;AACpD,YAAI,EAAE,qBAAqB,uBAAuB,GAAG;AACpD,6BAAmB;AACnB,cACC,KAAK,iBACL,KAAK,oBAAoB,SACxB;AACD,iBAAK,cAAc,QAAQ;AAC3B,iBAAK,gBAAgB;AAAA,UACtB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK,UAAU;AAAA,MACd,KAAK,aACH,wBAAwB,EACxB,yBAAyB,CAAC,MAAM;AAChC,aAAK,eAAe,OAAO,KAAK,KAAK;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,EACD;AAAA,EAtFD,OAwBuE;AAAA;AAAA;AAAA,EAC9D;AAAA,EACA,YAA2B,CAAC;AAAA,EAC5B;AAAA,EA6DR,IAAY,QAAyB;AACpC,QAAI,OAAO;AACX,UAAM,UAAU,KAAK,aAAa,wBAAwB;AAC1D,UAAM,OAAO,QAAQ,sBAAsB,QAAQ;AACnD,UAAM,uBACL,QAAQ,QAAQ,sBAAsB;AACvC,QAAI,sBAAsB;AACzB,aACC,QAAQ,YAAY,EAAE,SAAS,IAC5B,GAAG,IAAI,KAAK,QAAQ,sBAAsB,OAAQ,IAAI,MACtD;AAAA,IACL;AAEA,WAAO;AAAA,MACN,MAAM,IAAI,SAAS,gBAAgB,OAAO;AAAA,MAC1C,MAAM,wBAAwB;AAAA,MAC9B,WAAW,IAAI,SAAS,eAAe,cAAc,IAAI;AAAA,MACzD,SAAS,IAAI;AAAA,QACZ;AAAA,QACA;AAAA,MACD;AAAA,MACA,SAAS;AAAA,IACV;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,eAAe,QAAQ;AAC5B,YAAQ,KAAK,SAAS;AAAA,EACvB;AACD;AA7Fa,0BAAN;AAAA,EAMJ;AAAA,EACA;AAAA,EACA;AAAA,GARU;",
  "names": []
}
