{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/baseDebugView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { IKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { HighlightedLabel, IHighlight } from '../../../../base/browser/ui/highlightedlabel/highlightedLabel.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport { IInputValidationOptions, InputBox } from '../../../../base/browser/ui/inputbox/inputBox.js';\nimport { IAsyncDataSource, ITreeNode, ITreeRenderer } from '../../../../base/browser/ui/tree/tree.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { FuzzyScore, createMatches } from '../../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore, IDisposable, dispose, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { localize } from '../../../../nls.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IContextViewService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { defaultInputBoxStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { IDebugService, IExpression } from '../common/debug.js';\nimport { Variable } from '../common/debugModel.js';\nimport { IDebugVisualizerService } from '../common/debugVisualizers.js';\nimport { LinkDetector } from './linkDetector.js';\n\nconst $ = dom.$;\n\nexport interface IRenderValueOptions {\n\tshowChanged?: boolean;\n\tmaxValueLength?: number;\n\t/** If set, a hover will be shown on the element. Requires a disposable store for usage. */\n\thover?: false | {\n\t\tcommands: { id: string; args: unknown[] }[];\n\t\tcommandService: ICommandService;\n\t};\n\tcolorize?: boolean;\n\tlinkDetector?: LinkDetector;\n}\n\nexport interface IVariableTemplateData {\n\texpression: HTMLElement;\n\tname: HTMLElement;\n\ttype: HTMLElement;\n\tvalue: HTMLElement;\n\tlabel: HighlightedLabel;\n\tlazyButton: HTMLElement;\n}\n\nexport function renderViewTree(container: HTMLElement): HTMLElement {\n\tconst treeContainer = $('.');\n\ttreeContainer.classList.add('debug-view-content');\n\tcontainer.appendChild(treeContainer);\n\treturn treeContainer;\n}\n\nexport interface IInputBoxOptions {\n\tinitialValue: string;\n\tariaLabel: string;\n\tplaceholder?: string;\n\tvalidationOptions?: IInputValidationOptions;\n\tonFinish: (value: string, success: boolean) => void;\n}\n\nexport interface IExpressionTemplateData {\n\texpression: HTMLElement;\n\tname: HTMLSpanElement;\n\ttype: HTMLSpanElement;\n\tvalue: HTMLSpanElement;\n\tinputBoxContainer: HTMLElement;\n\tactionBar?: ActionBar;\n\telementDisposable: DisposableStore;\n\ttemplateDisposable: IDisposable;\n\tlabel: HighlightedLabel;\n\tlazyButton: HTMLElement;\n\tcurrentElement: IExpression | undefined;\n}\n\nexport abstract class AbstractExpressionDataSource<Input, Element extends IExpression> implements IAsyncDataSource<Input, Element> {\n\tconstructor(\n\t\t@IDebugService protected debugService: IDebugService,\n\t\t@IDebugVisualizerService protected debugVisualizer: IDebugVisualizerService,\n\t) { }\n\n\tpublic abstract hasChildren(element: Input | Element): boolean;\n\n\tpublic async getChildren(element: Input | Element): Promise<Element[]> {\n\t\tconst vm = this.debugService.getViewModel();\n\t\tconst children = await this.doGetChildren(element);\n\t\treturn Promise.all(children.map(async r => {\n\t\t\tconst vizOrTree = vm.getVisualizedExpression(r as IExpression);\n\t\t\tif (typeof vizOrTree === 'string') {\n\t\t\t\tconst viz = await this.debugVisualizer.getVisualizedNodeFor(vizOrTree, r);\n\t\t\t\tif (viz) {\n\t\t\t\t\tvm.setVisualizedExpression(r, viz);\n\t\t\t\t\treturn viz as IExpression as Element;\n\t\t\t\t}\n\t\t\t} else if (vizOrTree) {\n\t\t\t\treturn vizOrTree as Element;\n\t\t\t}\n\n\n\t\t\treturn r;\n\t\t}));\n\t}\n\n\tprotected abstract doGetChildren(element: Input | Element): Promise<Element[]>;\n}\n\nexport abstract class AbstractExpressionsRenderer<T = IExpression> implements ITreeRenderer<T, FuzzyScore, IExpressionTemplateData> {\n\n\tconstructor(\n\t\t@IDebugService protected debugService: IDebugService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IHoverService protected readonly hoverService: IHoverService,\n\t) { }\n\n\tabstract get templateId(): string;\n\n\trenderTemplate(container: HTMLElement): IExpressionTemplateData {\n\t\tconst templateDisposable = new DisposableStore();\n\t\tconst expression = dom.append(container, $('.expression'));\n\t\tconst name = dom.append(expression, $('span.name'));\n\t\tconst lazyButton = dom.append(expression, $('span.lazy-button'));\n\t\tlazyButton.classList.add(...ThemeIcon.asClassNameArray(Codicon.eye));\n\n\t\ttemplateDisposable.add(this.hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), lazyButton, localize('debug.lazyButton.tooltip', \"Click to expand\")));\n\t\tconst type = dom.append(expression, $('span.type'));\n\n\t\tconst value = dom.append(expression, $('span.value'));\n\n\t\tconst label = templateDisposable.add(new HighlightedLabel(name));\n\n\t\tconst inputBoxContainer = dom.append(expression, $('.inputBoxContainer'));\n\n\t\tlet actionBar: ActionBar | undefined;\n\t\tif (this.renderActionBar) {\n\t\t\tdom.append(expression, $('.span.actionbar-spacer'));\n\t\t\tactionBar = templateDisposable.add(new ActionBar(expression));\n\t\t}\n\n\t\tconst template: IExpressionTemplateData = { expression, name, type, value, label, inputBoxContainer, actionBar, elementDisposable: new DisposableStore(), templateDisposable, lazyButton, currentElement: undefined };\n\n\t\ttemplateDisposable.add(dom.addDisposableListener(lazyButton, dom.EventType.CLICK, () => {\n\t\t\tif (template.currentElement) {\n\t\t\t\tthis.debugService.getViewModel().evaluateLazyExpression(template.currentElement);\n\t\t\t}\n\t\t}));\n\n\t\treturn template;\n\t}\n\n\tpublic abstract renderElement(node: ITreeNode<T, FuzzyScore>, index: number, data: IExpressionTemplateData): void;\n\n\tprotected renderExpressionElement(element: IExpression, node: ITreeNode<T, FuzzyScore>, data: IExpressionTemplateData): void {\n\t\tdata.currentElement = element;\n\t\tthis.renderExpression(node.element, data, createMatches(node.filterData));\n\t\tif (data.actionBar) {\n\t\t\tthis.renderActionBar!(data.actionBar, element, data);\n\t\t}\n\t\tconst selectedExpression = this.debugService.getViewModel().getSelectedExpression();\n\t\tif (element === selectedExpression?.expression || (element instanceof Variable && element.errorMessage)) {\n\t\t\tconst options = this.getInputBoxOptions(element, !!selectedExpression?.settingWatch);\n\t\t\tif (options) {\n\t\t\t\tdata.elementDisposable.add(this.renderInputBox(data.name, data.value, data.inputBoxContainer, options));\n\t\t\t}\n\t\t}\n\t}\n\n\trenderInputBox(nameElement: HTMLElement, valueElement: HTMLElement, inputBoxContainer: HTMLElement, options: IInputBoxOptions): IDisposable {\n\t\tnameElement.style.display = 'none';\n\t\tvalueElement.style.display = 'none';\n\t\tinputBoxContainer.style.display = 'initial';\n\t\tdom.clearNode(inputBoxContainer);\n\n\t\tconst inputBox = new InputBox(inputBoxContainer, this.contextViewService, { ...options, inputBoxStyles: defaultInputBoxStyles });\n\n\t\tinputBox.value = options.initialValue;\n\t\tinputBox.focus();\n\t\tinputBox.select();\n\n\t\tconst done = createSingleCallFunction((success: boolean, finishEditing: boolean) => {\n\t\t\tnameElement.style.display = '';\n\t\t\tvalueElement.style.display = '';\n\t\t\tinputBoxContainer.style.display = 'none';\n\t\t\tconst value = inputBox.value;\n\t\t\tdispose(toDispose);\n\n\t\t\tif (finishEditing) {\n\t\t\t\tthis.debugService.getViewModel().setSelectedExpression(undefined, false);\n\t\t\t\toptions.onFinish(value, success);\n\t\t\t}\n\t\t});\n\n\t\tconst toDispose = [\n\t\t\tinputBox,\n\t\t\tdom.addStandardDisposableListener(inputBox.inputElement, dom.EventType.KEY_DOWN, (e: IKeyboardEvent) => {\n\t\t\t\tconst isEscape = e.equals(KeyCode.Escape);\n\t\t\t\tconst isEnter = e.equals(KeyCode.Enter);\n\t\t\t\tif (isEscape || isEnter) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tdone(isEnter, true);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tdom.addDisposableListener(inputBox.inputElement, dom.EventType.BLUR, () => {\n\t\t\t\tdone(true, true);\n\t\t\t}),\n\t\t\tdom.addDisposableListener(inputBox.inputElement, dom.EventType.CLICK, e => {\n\t\t\t\t// Do not expand / collapse selected elements\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t})\n\t\t];\n\n\t\treturn toDisposable(() => {\n\t\t\tdone(false, false);\n\t\t});\n\t}\n\n\tprotected abstract renderExpression(expression: T, data: IExpressionTemplateData, highlights: IHighlight[]): void;\n\tprotected abstract getInputBoxOptions(expression: IExpression, settingValue: boolean): IInputBoxOptions | undefined;\n\n\tprotected renderActionBar?(actionBar: ActionBar, expression: IExpression, data: IExpressionTemplateData): void;\n\n\tdisposeElement(node: ITreeNode<T, FuzzyScore>, index: number, templateData: IExpressionTemplateData): void {\n\t\ttemplateData.elementDisposable.clear();\n\t}\n\n\tdisposeTemplate(templateData: IExpressionTemplateData): void {\n\t\ttemplateData.elementDisposable.dispose();\n\t\ttemplateData.templateDisposable.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
