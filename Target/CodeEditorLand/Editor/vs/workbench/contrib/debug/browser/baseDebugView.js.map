{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/baseDebugView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport type { IKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport { ActionBar } from \"../../../../base/browser/ui/actionbar/actionbar.js\";\nimport {\n\tHighlightedLabel,\n\ttype IHighlight,\n} from \"../../../../base/browser/ui/highlightedlabel/highlightedLabel.js\";\nimport { getDefaultHoverDelegate } from \"../../../../base/browser/ui/hover/hoverDelegateFactory.js\";\nimport {\n\ttype IInputValidationOptions,\n\tInputBox,\n} from \"../../../../base/browser/ui/inputbox/inputBox.js\";\nimport type {\n\tIAsyncDataSource,\n\tITreeNode,\n\tITreeRenderer,\n} from \"../../../../base/browser/ui/tree/tree.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport {\n\ttype FuzzyScore,\n\tcreateMatches,\n} from \"../../../../base/common/filters.js\";\nimport { createSingleCallFunction } from \"../../../../base/common/functional.js\";\nimport { KeyCode } from \"../../../../base/common/keyCodes.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IContextViewService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IHoverService } from \"../../../../platform/hover/browser/hover.js\";\nimport { defaultInputBoxStyles } from \"../../../../platform/theme/browser/defaultStyles.js\";\nimport { IDebugService, type IExpression } from \"../common/debug.js\";\nimport { Variable } from \"../common/debugModel.js\";\nimport { IDebugVisualizerService } from \"../common/debugVisualizers.js\";\nimport type { LinkDetector } from \"./linkDetector.js\";\n\nconst $ = dom.$;\n\nexport interface IRenderValueOptions {\n\tshowChanged?: boolean;\n\tmaxValueLength?: number;\n\t/** If set, a hover will be shown on the element. Requires a disposable store for usage. */\n\thover?:\n\t\t| false\n\t\t| {\n\t\t\t\tcommands: { id: string; args: unknown[] }[];\n\t\t\t\tcommandService: ICommandService;\n\t\t  };\n\tcolorize?: boolean;\n\tlinkDetector?: LinkDetector;\n}\n\nexport interface IVariableTemplateData {\n\texpression: HTMLElement;\n\tname: HTMLElement;\n\ttype: HTMLElement;\n\tvalue: HTMLElement;\n\tlabel: HighlightedLabel;\n\tlazyButton: HTMLElement;\n}\n\nexport function renderViewTree(container: HTMLElement): HTMLElement {\n\tconst treeContainer = $(\".\");\n\ttreeContainer.classList.add(\"debug-view-content\");\n\tcontainer.appendChild(treeContainer);\n\treturn treeContainer;\n}\n\nexport interface IInputBoxOptions {\n\tinitialValue: string;\n\tariaLabel: string;\n\tplaceholder?: string;\n\tvalidationOptions?: IInputValidationOptions;\n\tonFinish: (value: string, success: boolean) => void;\n}\n\nexport interface IExpressionTemplateData {\n\texpression: HTMLElement;\n\tname: HTMLSpanElement;\n\ttype: HTMLSpanElement;\n\tvalue: HTMLSpanElement;\n\tinputBoxContainer: HTMLElement;\n\tactionBar?: ActionBar;\n\telementDisposable: DisposableStore;\n\ttemplateDisposable: IDisposable;\n\tlabel: HighlightedLabel;\n\tlazyButton: HTMLElement;\n\tcurrentElement: IExpression | undefined;\n}\n\nexport abstract class AbstractExpressionDataSource<\n\tInput,\n\tElement extends IExpression,\n> implements IAsyncDataSource<Input, Element>\n{\n\tconstructor(\n\t\t@IDebugService protected debugService: IDebugService,\n\t\t@IDebugVisualizerService\n\t\tprotected debugVisualizer: IDebugVisualizerService,\n\t) {}\n\n\tpublic abstract hasChildren(element: Input | Element): boolean;\n\n\tpublic async getChildren(element: Input | Element): Promise<Element[]> {\n\t\tconst vm = this.debugService.getViewModel();\n\t\tconst children = await this.doGetChildren(element);\n\t\treturn Promise.all(\n\t\t\tchildren.map(async (r) => {\n\t\t\t\tconst vizOrTree = vm.getVisualizedExpression(r as IExpression);\n\t\t\t\tif (typeof vizOrTree === \"string\") {\n\t\t\t\t\tconst viz = await this.debugVisualizer.getVisualizedNodeFor(\n\t\t\t\t\t\tvizOrTree,\n\t\t\t\t\t\tr,\n\t\t\t\t\t);\n\t\t\t\t\tif (viz) {\n\t\t\t\t\t\tvm.setVisualizedExpression(r, viz);\n\t\t\t\t\t\treturn viz as IExpression as Element;\n\t\t\t\t\t}\n\t\t\t\t} else if (vizOrTree) {\n\t\t\t\t\treturn vizOrTree as Element;\n\t\t\t\t}\n\n\t\t\t\treturn r;\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected abstract doGetChildren(\n\t\telement: Input | Element,\n\t): Promise<Element[]>;\n}\n\nexport abstract class AbstractExpressionsRenderer<T = IExpression>\n\timplements ITreeRenderer<T, FuzzyScore, IExpressionTemplateData>\n{\n\tconstructor(\n\t\t@IDebugService protected debugService: IDebugService,\n\t\t@IContextViewService\n\t\tprivate readonly contextViewService: IContextViewService,\n\t\t@IHoverService protected readonly hoverService: IHoverService,\n\t) {}\n\n\tabstract get templateId(): string;\n\n\trenderTemplate(container: HTMLElement): IExpressionTemplateData {\n\t\tconst templateDisposable = new DisposableStore();\n\t\tconst expression = dom.append(container, $(\".expression\"));\n\t\tconst name = dom.append(expression, $(\"span.name\"));\n\t\tconst lazyButton = dom.append(expression, $(\"span.lazy-button\"));\n\t\tlazyButton.classList.add(...ThemeIcon.asClassNameArray(Codicon.eye));\n\n\t\ttemplateDisposable.add(\n\t\t\tthis.hoverService.setupManagedHover(\n\t\t\t\tgetDefaultHoverDelegate(\"mouse\"),\n\t\t\t\tlazyButton,\n\t\t\t\tlocalize(\"debug.lazyButton.tooltip\", \"Click to expand\"),\n\t\t\t),\n\t\t);\n\t\tconst type = dom.append(expression, $(\"span.type\"));\n\n\t\tconst value = dom.append(expression, $(\"span.value\"));\n\n\t\tconst label = templateDisposable.add(new HighlightedLabel(name));\n\n\t\tconst inputBoxContainer = dom.append(\n\t\t\texpression,\n\t\t\t$(\".inputBoxContainer\"),\n\t\t);\n\n\t\tlet actionBar: ActionBar | undefined;\n\t\tif (this.renderActionBar) {\n\t\t\tdom.append(expression, $(\".span.actionbar-spacer\"));\n\t\t\tactionBar = templateDisposable.add(new ActionBar(expression));\n\t\t}\n\n\t\tconst template: IExpressionTemplateData = {\n\t\t\texpression,\n\t\t\tname,\n\t\t\ttype,\n\t\t\tvalue,\n\t\t\tlabel,\n\t\t\tinputBoxContainer,\n\t\t\tactionBar,\n\t\t\telementDisposable: new DisposableStore(),\n\t\t\ttemplateDisposable,\n\t\t\tlazyButton,\n\t\t\tcurrentElement: undefined,\n\t\t};\n\n\t\ttemplateDisposable.add(\n\t\t\tdom.addDisposableListener(lazyButton, dom.EventType.CLICK, () => {\n\t\t\t\tif (template.currentElement) {\n\t\t\t\t\tthis.debugService\n\t\t\t\t\t\t.getViewModel()\n\t\t\t\t\t\t.evaluateLazyExpression(template.currentElement);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn template;\n\t}\n\n\tpublic abstract renderElement(\n\t\tnode: ITreeNode<T, FuzzyScore>,\n\t\tindex: number,\n\t\tdata: IExpressionTemplateData,\n\t): void;\n\n\tprotected renderExpressionElement(\n\t\telement: IExpression,\n\t\tnode: ITreeNode<T, FuzzyScore>,\n\t\tdata: IExpressionTemplateData,\n\t): void {\n\t\tdata.currentElement = element;\n\t\tthis.renderExpression(\n\t\t\tnode.element,\n\t\t\tdata,\n\t\t\tcreateMatches(node.filterData),\n\t\t);\n\t\tif (data.actionBar) {\n\t\t\tthis.renderActionBar!(data.actionBar, element, data);\n\t\t}\n\t\tconst selectedExpression = this.debugService\n\t\t\t.getViewModel()\n\t\t\t.getSelectedExpression();\n\t\tif (\n\t\t\telement === selectedExpression?.expression ||\n\t\t\t(element instanceof Variable && element.errorMessage)\n\t\t) {\n\t\t\tconst options = this.getInputBoxOptions(\n\t\t\t\telement,\n\t\t\t\t!!selectedExpression?.settingWatch,\n\t\t\t);\n\t\t\tif (options) {\n\t\t\t\tdata.elementDisposable.add(\n\t\t\t\t\tthis.renderInputBox(\n\t\t\t\t\t\tdata.name,\n\t\t\t\t\t\tdata.value,\n\t\t\t\t\t\tdata.inputBoxContainer,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\trenderInputBox(\n\t\tnameElement: HTMLElement,\n\t\tvalueElement: HTMLElement,\n\t\tinputBoxContainer: HTMLElement,\n\t\toptions: IInputBoxOptions,\n\t): IDisposable {\n\t\tnameElement.style.display = \"none\";\n\t\tvalueElement.style.display = \"none\";\n\t\tinputBoxContainer.style.display = \"initial\";\n\t\tdom.clearNode(inputBoxContainer);\n\n\t\tconst inputBox = new InputBox(\n\t\t\tinputBoxContainer,\n\t\t\tthis.contextViewService,\n\t\t\t{ ...options, inputBoxStyles: defaultInputBoxStyles },\n\t\t);\n\n\t\tinputBox.value = options.initialValue;\n\t\tinputBox.focus();\n\t\tinputBox.select();\n\n\t\tconst done = createSingleCallFunction(\n\t\t\t(success: boolean, finishEditing: boolean) => {\n\t\t\t\tnameElement.style.display = \"\";\n\t\t\t\tvalueElement.style.display = \"\";\n\t\t\t\tinputBoxContainer.style.display = \"none\";\n\t\t\t\tconst value = inputBox.value;\n\t\t\t\tdispose(toDispose);\n\n\t\t\t\tif (finishEditing) {\n\t\t\t\t\tthis.debugService\n\t\t\t\t\t\t.getViewModel()\n\t\t\t\t\t\t.setSelectedExpression(undefined, false);\n\t\t\t\t\toptions.onFinish(value, success);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tconst toDispose = [\n\t\t\tinputBox,\n\t\t\tdom.addStandardDisposableListener(\n\t\t\t\tinputBox.inputElement,\n\t\t\t\tdom.EventType.KEY_DOWN,\n\t\t\t\t(e: IKeyboardEvent) => {\n\t\t\t\t\tconst isEscape = e.equals(KeyCode.Escape);\n\t\t\t\t\tconst isEnter = e.equals(KeyCode.Enter);\n\t\t\t\t\tif (isEscape || isEnter) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tdone(isEnter, true);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t\tdom.addDisposableListener(\n\t\t\t\tinputBox.inputElement,\n\t\t\t\tdom.EventType.BLUR,\n\t\t\t\t() => {\n\t\t\t\t\tdone(true, true);\n\t\t\t\t},\n\t\t\t),\n\t\t\tdom.addDisposableListener(\n\t\t\t\tinputBox.inputElement,\n\t\t\t\tdom.EventType.CLICK,\n\t\t\t\t(e) => {\n\t\t\t\t\t// Do not expand / collapse selected elements\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t},\n\t\t\t),\n\t\t];\n\n\t\treturn toDisposable(() => {\n\t\t\tdone(false, false);\n\t\t});\n\t}\n\n\tprotected abstract renderExpression(\n\t\texpression: T,\n\t\tdata: IExpressionTemplateData,\n\t\thighlights: IHighlight[],\n\t): void;\n\tprotected abstract getInputBoxOptions(\n\t\texpression: IExpression,\n\t\tsettingValue: boolean,\n\t): IInputBoxOptions | undefined;\n\n\tprotected renderActionBar?(\n\t\tactionBar: ActionBar,\n\t\texpression: IExpression,\n\t\tdata: IExpressionTemplateData,\n\t): void;\n\n\tdisposeElement(\n\t\tnode: ITreeNode<T, FuzzyScore>,\n\t\tindex: number,\n\t\ttemplateData: IExpressionTemplateData,\n\t): void {\n\t\ttemplateData.elementDisposable.clear();\n\t}\n\n\tdisposeTemplate(templateData: IExpressionTemplateData): void {\n\t\ttemplateData.elementDisposable.dispose();\n\t\ttemplateData.templateDisposable.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
