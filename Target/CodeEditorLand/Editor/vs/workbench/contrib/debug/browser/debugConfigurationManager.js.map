{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugConfigurationManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { sequence } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport * as json from '../../../../base/common/json.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { DisposableStore, IDisposable, dispose } from '../../../../base/common/lifecycle.js';\nimport * as objects from '../../../../base/common/objects.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI as uri } from '../../../../base/common/uri.js';\nimport * as nls from '../../../../nls.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from '../../../../platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceContextService, IWorkspaceFolder, IWorkspaceFoldersChangeEvent, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { IEditorPane } from '../../../common/editor.js';\nimport { debugConfigure } from './debugIcons.js';\nimport { CONTEXT_DEBUG_CONFIGURATION_TYPE, DebugConfigurationProviderTriggerKind, IAdapterManager, ICompound, IConfig, IConfigPresentation, IConfigurationManager, IDebugConfigurationProvider, IGlobalConfig, ILaunch } from '../common/debug.js';\nimport { launchSchema } from '../common/debugSchemas.js';\nimport { getVisibleAndSorted } from '../common/debugUtils.js';\nimport { launchSchemaId } from '../../../services/configuration/common/configuration.js';\nimport { ACTIVE_GROUP, IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\njsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\nconst DEBUG_SELECTED_CONFIG_NAME_KEY = 'debug.selectedconfigname';\nconst DEBUG_SELECTED_ROOT = 'debug.selectedroot';\n// Debug type is only stored if a dynamic configuration is used for better restore\nconst DEBUG_SELECTED_TYPE = 'debug.selectedtype';\nconst DEBUG_RECENT_DYNAMIC_CONFIGURATIONS = 'debug.recentdynamicconfigurations';\n\ninterface IDynamicPickItem { label: string; launch: ILaunch; config: IConfig }\n\nexport class ConfigurationManager implements IConfigurationManager {\n\tprivate launches!: ILaunch[];\n\tprivate selectedName: string | undefined;\n\tprivate selectedLaunch: ILaunch | undefined;\n\tprivate getSelectedConfig: () => Promise<IConfig | undefined> = () => Promise.resolve(undefined);\n\tprivate selectedType: string | undefined;\n\tprivate selectedDynamic = false;\n\tprivate toDispose: IDisposable[];\n\tprivate readonly _onDidSelectConfigurationName = new Emitter<void>();\n\tprivate configProviders: IDebugConfigurationProvider[];\n\tprivate debugConfigurationTypeContext: IContextKey<string>;\n\tprivate readonly _onDidChangeConfigurationProviders = new Emitter<void>();\n\tpublic readonly onDidChangeConfigurationProviders = this._onDidChangeConfigurationProviders.event;\n\n\tconstructor(\n\t\tprivate readonly adapterManager: IAdapterManager,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IHistoryService private readonly historyService: IHistoryService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tthis.configProviders = [];\n\t\tthis.toDispose = [this._onDidChangeConfigurationProviders];\n\t\tthis.initLaunches();\n\t\tthis.setCompoundSchemaValues();\n\t\tthis.registerListeners();\n\t\tconst previousSelectedRoot = this.storageService.get(DEBUG_SELECTED_ROOT, StorageScope.WORKSPACE);\n\t\tconst previousSelectedType = this.storageService.get(DEBUG_SELECTED_TYPE, StorageScope.WORKSPACE);\n\t\tconst previousSelectedLaunch = this.launches.find(l => l.uri.toString() === previousSelectedRoot);\n\t\tconst previousSelectedName = this.storageService.get(DEBUG_SELECTED_CONFIG_NAME_KEY, StorageScope.WORKSPACE);\n\t\tthis.debugConfigurationTypeContext = CONTEXT_DEBUG_CONFIGURATION_TYPE.bindTo(contextKeyService);\n\t\tconst dynamicConfig = previousSelectedType ? { type: previousSelectedType } : undefined;\n\t\tif (previousSelectedLaunch && previousSelectedLaunch.getConfigurationNames().length) {\n\t\t\tthis.selectConfiguration(previousSelectedLaunch, previousSelectedName, undefined, dynamicConfig);\n\t\t} else if (this.launches.length > 0) {\n\t\t\tthis.selectConfiguration(undefined, previousSelectedName, undefined, dynamicConfig);\n\t\t}\n\t}\n\n\tregisterDebugConfigurationProvider(debugConfigurationProvider: IDebugConfigurationProvider): IDisposable {\n\t\tthis.configProviders.push(debugConfigurationProvider);\n\t\tthis._onDidChangeConfigurationProviders.fire();\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugConfigurationProvider(debugConfigurationProvider);\n\t\t\t\tthis._onDidChangeConfigurationProviders.fire();\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugConfigurationProvider(debugConfigurationProvider: IDebugConfigurationProvider): void {\n\t\tconst ix = this.configProviders.indexOf(debugConfigurationProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.configProviders.splice(ix, 1);\n\t\t}\n\t}\n\n\t/**\n\t * if scope is not specified,a value of DebugConfigurationProvideTrigger.Initial is assumed.\n\t */\n\thasDebugConfigurationProvider(debugType: string, triggerKind?: DebugConfigurationProviderTriggerKind): boolean {\n\t\tif (triggerKind === undefined) {\n\t\t\ttriggerKind = DebugConfigurationProviderTriggerKind.Initial;\n\t\t}\n\t\t// check if there are providers for the given type that contribute a provideDebugConfigurations method\n\t\tconst provider = this.configProviders.find(p => p.provideDebugConfigurations && (p.type === debugType) && (p.triggerKind === triggerKind));\n\t\treturn !!provider;\n\t}\n\n\tasync resolveConfigurationByProviders(folderUri: uri | undefined, type: string | undefined, config: IConfig, token: CancellationToken): Promise<IConfig | null | undefined> {\n\t\tconst resolveDebugConfigurationForType = async (type: string | undefined, config: IConfig | null | undefined) => {\n\t\t\tif (type !== '*') {\n\t\t\t\tawait this.adapterManager.activateDebuggers('onDebugResolve', type);\n\t\t\t}\n\n\t\t\tfor (const p of this.configProviders) {\n\t\t\t\tif (p.type === type && p.resolveDebugConfiguration && config) {\n\t\t\t\t\tconfig = await p.resolveDebugConfiguration(folderUri, config, token);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn config;\n\t\t};\n\n\t\tlet resolvedType = config.type ?? type;\n\t\tlet result: IConfig | null | undefined = config;\n\t\tfor (let seen = new Set(); result && !seen.has(resolvedType);) {\n\t\t\tseen.add(resolvedType);\n\t\t\tresult = await resolveDebugConfigurationForType(resolvedType, result);\n\t\t\tresult = await resolveDebugConfigurationForType('*', result);\n\t\t\tresolvedType = result?.type ?? type!;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync resolveDebugConfigurationWithSubstitutedVariables(folderUri: uri | undefined, type: string | undefined, config: IConfig, token: CancellationToken): Promise<IConfig | null | undefined> {\n\t\t// pipe the config through the promises sequentially. Append at the end the '*' types\n\t\tconst providers = this.configProviders.filter(p => p.type === type && p.resolveDebugConfigurationWithSubstitutedVariables)\n\t\t\t.concat(this.configProviders.filter(p => p.type === '*' && p.resolveDebugConfigurationWithSubstitutedVariables));\n\n\t\tlet result: IConfig | null | undefined = config;\n\t\tawait sequence(providers.map(provider => async () => {\n\t\t\t// If any provider returned undefined or null make sure to respect that and do not pass the result to more resolver\n\t\t\tif (result) {\n\t\t\t\tresult = await provider.resolveDebugConfigurationWithSubstitutedVariables!(folderUri, result, token);\n\t\t\t}\n\t\t}));\n\n\t\treturn result;\n\t}\n\n\tasync provideDebugConfigurations(folderUri: uri | undefined, type: string, token: CancellationToken): Promise<any[]> {\n\t\tawait this.adapterManager.activateDebuggers('onDebugInitialConfigurations');\n\t\tconst results = await Promise.all(this.configProviders.filter(p => p.type === type && p.triggerKind === DebugConfigurationProviderTriggerKind.Initial && p.provideDebugConfigurations).map(p => p.provideDebugConfigurations!(folderUri, token)));\n\n\t\treturn results.reduce((first, second) => first.concat(second), []);\n\t}\n\n\tasync getDynamicProviders(): Promise<{ label: string; type: string; getProvider: () => Promise<IDebugConfigurationProvider | undefined>; pick: () => Promise<{ launch: ILaunch; config: IConfig } | undefined> }[]> {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\tconst onDebugDynamicConfigurationsName = 'onDebugDynamicConfigurations';\n\t\tconst debugDynamicExtensionsTypes = this.extensionService.extensions.reduce((acc, e) => {\n\t\t\tif (!e.activationEvents) {\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\tconst explicitTypes: string[] = [];\n\t\t\tlet hasGenericEvent = false;\n\t\t\tfor (const event of e.activationEvents) {\n\t\t\t\tif (event === onDebugDynamicConfigurationsName) {\n\t\t\t\t\thasGenericEvent = true;\n\t\t\t\t} else if (event.startsWith(`${onDebugDynamicConfigurationsName}:`)) {\n\t\t\t\t\texplicitTypes.push(event.slice(onDebugDynamicConfigurationsName.length + 1));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (explicitTypes.length) {\n\t\t\t\texplicitTypes.forEach(t => acc.add(t));\n\t\t\t} else if (hasGenericEvent) {\n\t\t\t\tconst debuggerType = e.contributes?.debuggers?.[0].type;\n\t\t\t\tif (debuggerType) {\n\t\t\t\t\tacc.add(debuggerType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn acc;\n\t\t}, new Set<string>());\n\n\t\tfor (const configProvider of this.configProviders) {\n\t\t\tif (configProvider.triggerKind === DebugConfigurationProviderTriggerKind.Dynamic) {\n\t\t\t\tdebugDynamicExtensionsTypes.add(configProvider.type);\n\t\t\t}\n\t\t}\n\n\t\treturn [...debugDynamicExtensionsTypes].map(type => {\n\t\t\treturn {\n\t\t\t\tlabel: this.adapterManager.getDebuggerLabel(type)!,\n\t\t\t\tgetProvider: async () => {\n\t\t\t\t\tawait this.adapterManager.activateDebuggers(onDebugDynamicConfigurationsName, type);\n\t\t\t\t\treturn this.configProviders.find(p => p.type === type && p.triggerKind === DebugConfigurationProviderTriggerKind.Dynamic && p.provideDebugConfigurations);\n\t\t\t\t},\n\t\t\t\ttype,\n\t\t\t\tpick: async () => {\n\t\t\t\t\t// Do a late 'onDebugDynamicConfigurationsName' activation so extensions are not activated too early #108578\n\t\t\t\t\tawait this.adapterManager.activateDebuggers(onDebugDynamicConfigurationsName, type);\n\n\t\t\t\t\tconst token = new CancellationTokenSource();\n\t\t\t\t\tconst picks: Promise<IDynamicPickItem[]>[] = [];\n\t\t\t\t\tconst provider = this.configProviders.find(p => p.type === type && p.triggerKind === DebugConfigurationProviderTriggerKind.Dynamic && p.provideDebugConfigurations);\n\t\t\t\t\tthis.getLaunches().forEach(launch => {\n\t\t\t\t\t\tif (launch.workspace && provider) {\n\t\t\t\t\t\t\tpicks.push(provider.provideDebugConfigurations!(launch.workspace.uri, token.token).then(configurations => configurations.map(config => ({\n\t\t\t\t\t\t\t\tlabel: config.name,\n\t\t\t\t\t\t\t\tdescription: launch.name,\n\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\tbuttons: [{\n\t\t\t\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(debugConfigure),\n\t\t\t\t\t\t\t\t\ttooltip: nls.localize('editLaunchConfig', \"Edit Debug Configuration in launch.json\")\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\tlaunch\n\t\t\t\t\t\t\t}))));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tconst input = disposables.add(this.quickInputService.createQuickPick<IDynamicPickItem>());\n\t\t\t\t\tinput.busy = true;\n\t\t\t\t\tinput.placeholder = nls.localize('selectConfiguration', \"Select Launch Configuration\");\n\n\t\t\t\t\tconst chosenPromise = new Promise<IDynamicPickItem | undefined>(resolve => {\n\t\t\t\t\t\tdisposables.add(input.onDidAccept(() => resolve(input.activeItems[0])));\n\t\t\t\t\t\tdisposables.add(input.onDidTriggerItemButton(async (context) => {\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\tconst { launch, config } = context.item;\n\t\t\t\t\t\t\tawait launch.openConfigFile({ preserveFocus: false, type: config.type, suppressInitialConfigs: true });\n\t\t\t\t\t\t\t// Only Launch have a pin trigger button\n\t\t\t\t\t\t\tawait (launch as Launch).writeConfiguration(config);\n\t\t\t\t\t\t\tawait this.selectConfiguration(launch, config.name);\n\t\t\t\t\t\t\tthis.removeRecentDynamicConfigurations(config.name, config.type);\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tdisposables.add(input.onDidHide(() => resolve(undefined)));\n\t\t\t\t\t});\n\n\t\t\t\t\tlet nestedPicks: IDynamicPickItem[][];\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// This await invokes the extension providers, which might fail due to several reasons,\n\t\t\t\t\t\t// therefore we gate this logic under a try/catch to prevent leaving the Debug Tab\n\t\t\t\t\t\t// selector in a borked state.\n\t\t\t\t\t\tnestedPicks = await Promise.all(picks);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst items = nestedPicks.flat();\n\n\t\t\t\t\tinput.items = items;\n\t\t\t\t\tinput.busy = false;\n\t\t\t\t\tinput.show();\n\t\t\t\t\tconst chosen = await chosenPromise;\n\n\t\t\t\t\tdisposables.dispose();\n\n\t\t\t\t\tif (!chosen) {\n\t\t\t\t\t\t// User canceled quick input we should notify the provider to cancel computing configurations\n\t\t\t\t\t\ttoken.cancel();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn chosen;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tgetAllConfigurations(): { launch: ILaunch; name: string; presentation?: IConfigPresentation }[] {\n\t\tconst all: { launch: ILaunch; name: string; presentation?: IConfigPresentation }[] = [];\n\t\tfor (const l of this.launches) {\n\t\t\tfor (const name of l.getConfigurationNames()) {\n\t\t\t\tconst config = l.getConfiguration(name) || l.getCompound(name);\n\t\t\t\tif (config) {\n\t\t\t\t\tall.push({ launch: l, name, presentation: config.presentation });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn getVisibleAndSorted(all);\n\t}\n\n\tremoveRecentDynamicConfigurations(name: string, type: string) {\n\t\tconst remaining = this.getRecentDynamicConfigurations().filter(c => c.name !== name || c.type !== type);\n\t\tthis.storageService.store(DEBUG_RECENT_DYNAMIC_CONFIGURATIONS, JSON.stringify(remaining), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tif (this.selectedConfiguration.name === name && this.selectedType === type && this.selectedDynamic) {\n\t\t\tthis.selectConfiguration(undefined, undefined);\n\t\t} else {\n\t\t\tthis._onDidSelectConfigurationName.fire();\n\t\t}\n\t}\n\n\tgetRecentDynamicConfigurations(): { name: string; type: string }[] {\n\t\treturn JSON.parse(this.storageService.get(DEBUG_RECENT_DYNAMIC_CONFIGURATIONS, StorageScope.WORKSPACE, '[]'));\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(Event.any<IWorkspaceFoldersChangeEvent | WorkbenchState>(this.contextService.onDidChangeWorkspaceFolders, this.contextService.onDidChangeWorkbenchState)(() => {\n\t\t\tthis.initLaunches();\n\t\t\tthis.selectConfiguration(undefined);\n\t\t\tthis.setCompoundSchemaValues();\n\t\t}));\n\t\tthis.toDispose.push(this.configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration('launch')) {\n\t\t\t\t// A change happen in the launch.json. If there is already a launch configuration selected, do not change the selection.\n\t\t\t\tawait this.selectConfiguration(undefined);\n\t\t\t\tthis.setCompoundSchemaValues();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.adapterManager.onDidDebuggersExtPointRead(() => {\n\t\t\tthis.setCompoundSchemaValues();\n\t\t}));\n\t}\n\n\tprivate initLaunches(): void {\n\t\tthis.launches = this.contextService.getWorkspace().folders.map(folder => this.instantiationService.createInstance(Launch, this, this.adapterManager, folder));\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tthis.launches.push(this.instantiationService.createInstance(WorkspaceLaunch, this, this.adapterManager));\n\t\t}\n\t\tthis.launches.push(this.instantiationService.createInstance(UserLaunch, this, this.adapterManager));\n\n\t\tif (this.selectedLaunch && this.launches.indexOf(this.selectedLaunch) === -1) {\n\t\t\tthis.selectConfiguration(undefined);\n\t\t}\n\t}\n\n\tprivate setCompoundSchemaValues(): void {\n\t\tconst compoundConfigurationsSchema = (<IJSONSchema>launchSchema.properties!['compounds'].items).properties!['configurations'];\n\t\tconst launchNames = this.launches.map(l =>\n\t\t\tl.getConfigurationNames(true)).reduce((first, second) => first.concat(second), []);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![0].enum = launchNames;\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1].properties!.name.enum = launchNames;\n\n\t\tconst folderNames = this.contextService.getWorkspace().folders.map(f => f.name);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1].properties!.folder.enum = folderNames;\n\n\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\t}\n\n\tgetLaunches(): ILaunch[] {\n\t\treturn this.launches;\n\t}\n\n\tgetLaunch(workspaceUri: uri | undefined): ILaunch | undefined {\n\t\tif (!uri.isUri(workspaceUri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.launches.find(l => l.workspace && this.uriIdentityService.extUri.isEqual(l.workspace.uri, workspaceUri));\n\t}\n\n\tget selectedConfiguration(): { launch: ILaunch | undefined; name: string | undefined; getConfig: () => Promise<IConfig | undefined>; type: string | undefined } {\n\t\treturn {\n\t\t\tlaunch: this.selectedLaunch,\n\t\t\tname: this.selectedName,\n\t\t\tgetConfig: this.getSelectedConfig,\n\t\t\ttype: this.selectedType\n\t\t};\n\t}\n\n\tget onDidSelectConfiguration(): Event<void> {\n\t\treturn this._onDidSelectConfigurationName.event;\n\t}\n\n\tgetWorkspaceLaunch(): ILaunch | undefined {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.launches[this.launches.length - 1];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync selectConfiguration(launch: ILaunch | undefined, name?: string, config?: IConfig, dynamicConfig?: { type?: string }): Promise<void> {\n\t\tif (typeof launch === 'undefined') {\n\t\t\tconst rootUri = this.historyService.getLastActiveWorkspaceRoot();\n\t\t\tlaunch = this.getLaunch(rootUri);\n\t\t\tif (!launch || launch.getConfigurationNames().length === 0) {\n\t\t\t\tlaunch = this.launches.find(l => !!(l && l.getConfigurationNames().length)) || launch || this.launches[0];\n\t\t\t}\n\t\t}\n\n\t\tconst previousLaunch = this.selectedLaunch;\n\t\tconst previousName = this.selectedName;\n\t\tconst previousSelectedDynamic = this.selectedDynamic;\n\t\tthis.selectedLaunch = launch;\n\n\t\tif (this.selectedLaunch) {\n\t\t\tthis.storageService.store(DEBUG_SELECTED_ROOT, this.selectedLaunch.uri.toString(), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_SELECTED_ROOT, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst names = launch ? launch.getConfigurationNames() : [];\n\t\tthis.getSelectedConfig = () => {\n\t\t\tconst selected = this.selectedName ? launch?.getConfiguration(this.selectedName) : undefined;\n\t\t\treturn Promise.resolve(selected || config);\n\t\t};\n\n\t\tlet type = config?.type;\n\t\tif (name && names.indexOf(name) >= 0) {\n\t\t\tthis.setSelectedLaunchName(name);\n\t\t} else if (dynamicConfig && dynamicConfig.type) {\n\t\t\t// We could not find the previously used name and config is not passed. We should get all dynamic configurations from providers\n\t\t\t// And potentially auto select the previously used dynamic configuration #96293\n\t\t\ttype = dynamicConfig.type;\n\t\t\tif (!config) {\n\t\t\t\tconst providers = (await this.getDynamicProviders()).filter(p => p.type === type);\n\t\t\t\tthis.getSelectedConfig = async () => {\n\t\t\t\t\tconst activatedProviders = await Promise.all(providers.map(p => p.getProvider()));\n\t\t\t\t\tconst provider = activatedProviders.length > 0 ? activatedProviders[0] : undefined;\n\t\t\t\t\tif (provider && launch && launch.workspace) {\n\t\t\t\t\t\tconst token = new CancellationTokenSource();\n\t\t\t\t\t\tconst dynamicConfigs = await provider.provideDebugConfigurations!(launch.workspace.uri, token.token);\n\t\t\t\t\t\tconst dynamicConfig = dynamicConfigs.find(c => c.name === name);\n\t\t\t\t\t\tif (dynamicConfig) {\n\t\t\t\t\t\t\treturn dynamicConfig;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.setSelectedLaunchName(name);\n\n\t\t\tlet recentDynamicProviders = this.getRecentDynamicConfigurations();\n\t\t\tif (name && dynamicConfig.type) {\n\t\t\t\t// We need to store the recently used dynamic configurations to be able to show them in UI #110009\n\t\t\t\trecentDynamicProviders.unshift({ name, type: dynamicConfig.type });\n\t\t\t\trecentDynamicProviders = distinct(recentDynamicProviders, t => `${t.name} : ${t.type}`);\n\t\t\t\tthis.storageService.store(DEBUG_RECENT_DYNAMIC_CONFIGURATIONS, JSON.stringify(recentDynamicProviders), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t}\n\t\t} else if (!this.selectedName || names.indexOf(this.selectedName) === -1) {\n\t\t\t// We could not find the configuration to select, pick the first one, or reset the selection if there is no launch configuration\n\t\t\tconst nameToSet = names.length ? names[0] : undefined;\n\t\t\tthis.setSelectedLaunchName(nameToSet);\n\t\t}\n\n\t\tif (!config && launch && this.selectedName) {\n\t\t\tconfig = launch.getConfiguration(this.selectedName);\n\t\t\ttype = config?.type;\n\t\t}\n\n\t\tthis.selectedType = dynamicConfig?.type || config?.type;\n\t\tthis.selectedDynamic = !!dynamicConfig;\n\t\t// Only store the selected type if we are having a dynamic configuration. Otherwise restoring this configuration from storage might be misindentified as a dynamic configuration\n\t\tthis.storageService.store(DEBUG_SELECTED_TYPE, dynamicConfig ? this.selectedType : undefined, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\n\t\tif (type) {\n\t\t\tthis.debugConfigurationTypeContext.set(type);\n\t\t} else {\n\t\t\tthis.debugConfigurationTypeContext.reset();\n\t\t}\n\n\t\tif (this.selectedLaunch !== previousLaunch || this.selectedName !== previousName || previousSelectedDynamic !== this.selectedDynamic) {\n\t\t\tthis._onDidSelectConfigurationName.fire();\n\t\t}\n\t}\n\n\tprivate setSelectedLaunchName(selectedName: string | undefined): void {\n\t\tthis.selectedName = selectedName;\n\n\t\tif (this.selectedName) {\n\t\t\tthis.storageService.store(DEBUG_SELECTED_CONFIG_NAME_KEY, this.selectedName, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_SELECTED_CONFIG_NAME_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nabstract class AbstractLaunch implements ILaunch {\n\tabstract readonly uri: uri;\n\tabstract readonly name: string;\n\tabstract readonly workspace: IWorkspaceFolder | undefined;\n\tprotected abstract getConfig(): IGlobalConfig | undefined;\n\tabstract openConfigFile(options: { preserveFocus: boolean; type?: string | undefined; suppressInitialConfigs?: boolean | undefined }, token?: CancellationToken | undefined): Promise<{ editor: IEditorPane | null; created: boolean }>;\n\n\tconstructor(\n\t\tprotected configurationManager: ConfigurationManager,\n\t\tprivate readonly adapterManager: IAdapterManager\n\t) { }\n\n\tgetCompound(name: string): ICompound | undefined {\n\t\tconst config = this.getConfig();\n\t\tif (!config || !config.compounds) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn config.compounds.find(compound => compound.name === name);\n\t}\n\n\tgetConfigurationNames(ignoreCompoundsAndPresentation = false): string[] {\n\t\tconst config = this.getConfig();\n\t\tif (!config || (!Array.isArray(config.configurations) && !Array.isArray(config.compounds))) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst configurations: (IConfig | ICompound)[] = [];\n\t\t\tif (config.configurations) {\n\t\t\t\tconfigurations.push(...config.configurations.filter(cfg => cfg && typeof cfg.name === 'string'));\n\t\t\t}\n\n\t\t\tif (ignoreCompoundsAndPresentation) {\n\t\t\t\treturn configurations.map(c => c.name);\n\t\t\t}\n\n\t\t\tif (config.compounds) {\n\t\t\t\tconfigurations.push(...config.compounds.filter(compound => typeof compound.name === 'string' && compound.configurations && compound.configurations.length));\n\t\t\t}\n\t\t\treturn getVisibleAndSorted(configurations).map(c => c.name);\n\t\t}\n\t}\n\n\tgetConfiguration(name: string): IConfig | undefined {\n\t\t// We need to clone the configuration in order to be able to make changes to it #42198\n\t\tconst config = objects.deepClone(this.getConfig());\n\t\tif (!config || !config.configurations) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst configuration = config.configurations.find(config => config && config.name === name);\n\t\tif (configuration) {\n\t\t\tif (this instanceof UserLaunch) {\n\t\t\t\tconfiguration.__configurationTarget = ConfigurationTarget.USER;\n\t\t\t} else if (this instanceof WorkspaceLaunch) {\n\t\t\t\tconfiguration.__configurationTarget = ConfigurationTarget.WORKSPACE;\n\t\t\t} else {\n\t\t\t\tconfiguration.__configurationTarget = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn configuration;\n\t}\n\n\tasync getInitialConfigurationContent(folderUri?: uri, type?: string, useInitialConfigs?: boolean, token?: CancellationToken): Promise<string> {\n\t\tlet content = '';\n\t\tconst adapter = type ? this.adapterManager.getEnabledDebugger(type) : await this.adapterManager.guessDebugger(true);\n\t\tif (adapter) {\n\t\t\tconst initialConfigs = useInitialConfigs ?\n\t\t\t\tawait this.configurationManager.provideDebugConfigurations(folderUri, adapter.type, token || CancellationToken.None) :\n\t\t\t\t[];\n\t\t\tcontent = await adapter.getInitialConfigurationContent(initialConfigs);\n\t\t}\n\t\treturn content;\n\t}\n\n\tget hidden(): boolean {\n\t\treturn false;\n\t}\n}\n\nclass Launch extends AbstractLaunch implements ILaunch {\n\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\tpublic workspace: IWorkspaceFolder,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget uri(): uri {\n\t\treturn resources.joinPath(this.workspace.uri, '/.vscode/launch.json');\n\t}\n\n\tget name(): string {\n\t\treturn this.workspace.name;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch', { resource: this.workspace.uri }).workspaceFolderValue;\n\t}\n\n\tasync openConfigFile({ preserveFocus, type, suppressInitialConfigs }: { preserveFocus: boolean; type?: string; suppressInitialConfigs?: boolean }, token?: CancellationToken): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst resource = this.uri;\n\t\tlet created = false;\n\t\tlet content = '';\n\t\ttry {\n\t\t\tconst fileContent = await this.fileService.readFile(resource);\n\t\t\tcontent = fileContent.value.toString();\n\t\t} catch {\n\t\t\t// launch.json not found: create one by collecting launch configs from debugConfigProviders\n\t\t\tcontent = await this.getInitialConfigurationContent(this.workspace.uri, type, !suppressInitialConfigs, token);\n\t\t\tif (!content) {\n\t\t\t\t// Cancelled\n\t\t\t\treturn { editor: null, created: false };\n\t\t\t}\n\n\t\t\tcreated = true; // pin only if config file is created #8727\n\t\t\ttry {\n\t\t\t\tawait this.textFileService.write(resource, content);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(nls.localize('DebugConfig.failed', \"Unable to create 'launch.json' file inside the '.vscode' folder ({0}).\", error.message));\n\t\t\t}\n\t\t}\n\n\t\tconst index = content.indexOf(`\"${this.configurationManager.selectedConfiguration.name}\"`);\n\t\tlet startLineNumber = 1;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tif (content.charAt(i) === '\\n') {\n\t\t\t\tstartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tconst selection = startLineNumber > 1 ? { startLineNumber, startColumn: 4 } : undefined;\n\n\t\tconst editor = await this.editorService.openEditor({\n\t\t\tresource,\n\t\t\toptions: {\n\t\t\t\tselection,\n\t\t\t\tpreserveFocus,\n\t\t\t\tpinned: created,\n\t\t\t\trevealIfVisible: true\n\t\t\t},\n\t\t}, ACTIVE_GROUP);\n\n\t\treturn ({\n\t\t\teditor: editor ?? null,\n\t\t\tcreated\n\t\t});\n\t}\n\n\tasync writeConfiguration(configuration: IConfig): Promise<void> {\n\t\tconst fullConfig = objects.deepClone(this.getConfig()!);\n\t\tif (!fullConfig.configurations) {\n\t\t\tfullConfig.configurations = [];\n\t\t}\n\t\tfullConfig.configurations.push(configuration);\n\t\tawait this.configurationService.updateValue('launch', fullConfig, { resource: this.workspace.uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t}\n}\n\nclass WorkspaceLaunch extends AbstractLaunch implements ILaunch {\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.contextService.getWorkspace().configuration!;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize('workspace', \"workspace\");\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch').workspaceValue;\n\t}\n\n\tasync openConfigFile({ preserveFocus, type, useInitialConfigs }: { preserveFocus: boolean; type?: string; useInitialConfigs?: boolean }, token?: CancellationToken): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst launchExistInFile = !!this.getConfig();\n\t\tif (!launchExistInFile) {\n\t\t\t// Launch property in workspace config not found: create one by collecting launch configs from debugConfigProviders\n\t\t\tconst content = await this.getInitialConfigurationContent(undefined, type, useInitialConfigs, token);\n\t\t\tif (content) {\n\t\t\t\tawait this.configurationService.updateValue('launch', json.parse(content), ConfigurationTarget.WORKSPACE);\n\t\t\t} else {\n\t\t\t\treturn { editor: null, created: false };\n\t\t\t}\n\t\t}\n\n\t\tconst editor = await this.editorService.openEditor({\n\t\t\tresource: this.contextService.getWorkspace().configuration!,\n\t\t\toptions: { preserveFocus }\n\t\t}, ACTIVE_GROUP);\n\n\t\treturn ({\n\t\t\teditor: editor ?? null,\n\t\t\tcreated: false\n\t\t});\n\t}\n}\n\nclass UserLaunch extends AbstractLaunch implements ILaunch {\n\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.preferencesService.userSettingsResource;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize('user settings', \"user settings\");\n\t}\n\n\toverride get hidden(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch').userValue;\n\t}\n\n\tasync openConfigFile({ preserveFocus, type, useInitialContent }: { preserveFocus: boolean; type?: string; useInitialContent?: boolean }): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst editor = await this.preferencesService.openUserSettings({ jsonEditor: true, preserveFocus, revealSetting: { key: 'launch' } });\n\t\treturn ({\n\t\t\teditor: editor ?? null,\n\t\t\tcreated: false\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["type", "config", "dynamicConfig"]
}
