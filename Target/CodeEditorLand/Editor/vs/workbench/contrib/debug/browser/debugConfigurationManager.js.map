{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugConfigurationManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport { sequence } from \"../../../../base/common/async.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport * as json from \"../../../../base/common/json.js\";\nimport type { IJSONSchema } from \"../../../../base/common/jsonSchema.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { URI as uri } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IJSONContributionRegistry,\n\tExtensions as JSONExtensions,\n} from \"../../../../platform/jsonschemas/common/jsonContributionRegistry.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IQuickInputService } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\ttype IWorkspaceFoldersChangeEvent,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IEditorPane } from \"../../../common/editor.js\";\nimport { launchSchemaId } from \"../../../services/configuration/common/configuration.js\";\nimport {\n\tACTIVE_GROUP,\n\tIEditorService,\n} from \"../../../services/editor/common/editorService.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\nimport { ITextFileService } from \"../../../services/textfile/common/textfiles.js\";\nimport {\n\tCONTEXT_DEBUG_CONFIGURATION_TYPE,\n\tDebugConfigurationProviderTriggerKind,\n\ttype IAdapterManager,\n\ttype ICompound,\n\ttype IConfig,\n\ttype IConfigPresentation,\n\ttype IConfigurationManager,\n\ttype IDebugConfigurationProvider,\n\ttype IGlobalConfig,\n\ttype ILaunch,\n} from \"../common/debug.js\";\nimport { launchSchema } from \"../common/debugSchemas.js\";\nimport { getVisibleAndSorted } from \"../common/debugUtils.js\";\nimport { debugConfigure } from \"./debugIcons.js\";\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(\n\tJSONExtensions.JSONContribution,\n);\njsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\nconst DEBUG_SELECTED_CONFIG_NAME_KEY = \"debug.selectedconfigname\";\nconst DEBUG_SELECTED_ROOT = \"debug.selectedroot\";\n// Debug type is only stored if a dynamic configuration is used for better restore\nconst DEBUG_SELECTED_TYPE = \"debug.selectedtype\";\nconst DEBUG_RECENT_DYNAMIC_CONFIGURATIONS = \"debug.recentdynamicconfigurations\";\n\ninterface IDynamicPickItem {\n\tlabel: string;\n\tlaunch: ILaunch;\n\tconfig: IConfig;\n}\n\nexport class ConfigurationManager implements IConfigurationManager {\n\tprivate launches!: ILaunch[];\n\tprivate selectedName: string | undefined;\n\tprivate selectedLaunch: ILaunch | undefined;\n\tprivate getSelectedConfig: () => Promise<IConfig | undefined> = () =>\n\t\tPromise.resolve(undefined);\n\tprivate selectedType: string | undefined;\n\tprivate selectedDynamic = false;\n\tprivate toDispose: IDisposable[];\n\tprivate readonly _onDidSelectConfigurationName = new Emitter<void>();\n\tprivate configProviders: IDebugConfigurationProvider[];\n\tprivate debugConfigurationTypeContext: IContextKey<string>;\n\tprivate readonly _onDidChangeConfigurationProviders = new Emitter<void>();\n\tpublic readonly onDidChangeConfigurationProviders =\n\t\tthis._onDidChangeConfigurationProviders.event;\n\n\tconstructor(\n\t\tprivate readonly adapterManager: IAdapterManager,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IHistoryService private readonly historyService: IHistoryService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tthis.configProviders = [];\n\t\tthis.toDispose = [this._onDidChangeConfigurationProviders];\n\t\tthis.initLaunches();\n\t\tthis.setCompoundSchemaValues();\n\t\tthis.registerListeners();\n\t\tconst previousSelectedRoot = this.storageService.get(\n\t\t\tDEBUG_SELECTED_ROOT,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tconst previousSelectedType = this.storageService.get(\n\t\t\tDEBUG_SELECTED_TYPE,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tconst previousSelectedLaunch = this.launches.find(\n\t\t\t(l) => l.uri.toString() === previousSelectedRoot,\n\t\t);\n\t\tconst previousSelectedName = this.storageService.get(\n\t\t\tDEBUG_SELECTED_CONFIG_NAME_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tthis.debugConfigurationTypeContext =\n\t\t\tCONTEXT_DEBUG_CONFIGURATION_TYPE.bindTo(contextKeyService);\n\t\tconst dynamicConfig = previousSelectedType\n\t\t\t? { type: previousSelectedType }\n\t\t\t: undefined;\n\t\tif (\n\t\t\tpreviousSelectedLaunch &&\n\t\t\tpreviousSelectedLaunch.getConfigurationNames().length\n\t\t) {\n\t\t\tthis.selectConfiguration(\n\t\t\t\tpreviousSelectedLaunch,\n\t\t\t\tpreviousSelectedName,\n\t\t\t\tundefined,\n\t\t\t\tdynamicConfig,\n\t\t\t);\n\t\t} else if (this.launches.length > 0) {\n\t\t\tthis.selectConfiguration(\n\t\t\t\tundefined,\n\t\t\t\tpreviousSelectedName,\n\t\t\t\tundefined,\n\t\t\t\tdynamicConfig,\n\t\t\t);\n\t\t}\n\t}\n\n\tregisterDebugConfigurationProvider(\n\t\tdebugConfigurationProvider: IDebugConfigurationProvider,\n\t): IDisposable {\n\t\tthis.configProviders.push(debugConfigurationProvider);\n\t\tthis._onDidChangeConfigurationProviders.fire();\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugConfigurationProvider(\n\t\t\t\t\tdebugConfigurationProvider,\n\t\t\t\t);\n\t\t\t\tthis._onDidChangeConfigurationProviders.fire();\n\t\t\t},\n\t\t};\n\t}\n\n\tunregisterDebugConfigurationProvider(\n\t\tdebugConfigurationProvider: IDebugConfigurationProvider,\n\t): void {\n\t\tconst ix = this.configProviders.indexOf(debugConfigurationProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.configProviders.splice(ix, 1);\n\t\t}\n\t}\n\n\t/**\n\t * if scope is not specified,a value of DebugConfigurationProvideTrigger.Initial is assumed.\n\t */\n\thasDebugConfigurationProvider(\n\t\tdebugType: string,\n\t\ttriggerKind?: DebugConfigurationProviderTriggerKind,\n\t): boolean {\n\t\tif (triggerKind === undefined) {\n\t\t\ttriggerKind = DebugConfigurationProviderTriggerKind.Initial;\n\t\t}\n\t\t// check if there are providers for the given type that contribute a provideDebugConfigurations method\n\t\tconst provider = this.configProviders.find(\n\t\t\t(p) =>\n\t\t\t\tp.provideDebugConfigurations &&\n\t\t\t\tp.type === debugType &&\n\t\t\t\tp.triggerKind === triggerKind,\n\t\t);\n\t\treturn !!provider;\n\t}\n\n\tasync resolveConfigurationByProviders(\n\t\tfolderUri: uri | undefined,\n\t\ttype: string | undefined,\n\t\tconfig: IConfig,\n\t\ttoken: CancellationToken,\n\t): Promise<IConfig | null | undefined> {\n\t\tconst resolveDebugConfigurationForType = async (\n\t\t\ttype: string | undefined,\n\t\t\tconfig: IConfig | null | undefined,\n\t\t) => {\n\t\t\tif (type !== \"*\") {\n\t\t\t\tawait this.adapterManager.activateDebuggers(\n\t\t\t\t\t\"onDebugResolve\",\n\t\t\t\t\ttype,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const p of this.configProviders) {\n\t\t\t\tif (p.type === type && p.resolveDebugConfiguration && config) {\n\t\t\t\t\tconfig = await p.resolveDebugConfiguration(\n\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn config;\n\t\t};\n\n\t\tlet resolvedType = config.type ?? type;\n\t\tlet result: IConfig | null | undefined = config;\n\t\tfor (let seen = new Set(); result && !seen.has(resolvedType); ) {\n\t\t\tseen.add(resolvedType);\n\t\t\tresult = await resolveDebugConfigurationForType(\n\t\t\t\tresolvedType,\n\t\t\t\tresult,\n\t\t\t);\n\t\t\tresult = await resolveDebugConfigurationForType(\"*\", result);\n\t\t\tresolvedType = result?.type ?? type!;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync resolveDebugConfigurationWithSubstitutedVariables(\n\t\tfolderUri: uri | undefined,\n\t\ttype: string | undefined,\n\t\tconfig: IConfig,\n\t\ttoken: CancellationToken,\n\t): Promise<IConfig | null | undefined> {\n\t\t// pipe the config through the promises sequentially. Append at the end the '*' types\n\t\tconst providers = this.configProviders\n\t\t\t.filter(\n\t\t\t\t(p) =>\n\t\t\t\t\tp.type === type &&\n\t\t\t\t\tp.resolveDebugConfigurationWithSubstitutedVariables,\n\t\t\t)\n\t\t\t.concat(\n\t\t\t\tthis.configProviders.filter(\n\t\t\t\t\t(p) =>\n\t\t\t\t\t\tp.type === \"*\" &&\n\t\t\t\t\t\tp.resolveDebugConfigurationWithSubstitutedVariables,\n\t\t\t\t),\n\t\t\t);\n\n\t\tlet result: IConfig | null | undefined = config;\n\t\tawait sequence(\n\t\t\tproviders.map((provider) => async () => {\n\t\t\t\t// If any provider returned undefined or null make sure to respect that and do not pass the result to more resolver\n\t\t\t\tif (result) {\n\t\t\t\t\tresult =\n\t\t\t\t\t\tawait provider.resolveDebugConfigurationWithSubstitutedVariables!(\n\t\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn result;\n\t}\n\n\tasync provideDebugConfigurations(\n\t\tfolderUri: uri | undefined,\n\t\ttype: string,\n\t\ttoken: CancellationToken,\n\t): Promise<any[]> {\n\t\tawait this.adapterManager.activateDebuggers(\n\t\t\t\"onDebugInitialConfigurations\",\n\t\t);\n\t\tconst results = await Promise.all(\n\t\t\tthis.configProviders\n\t\t\t\t.filter(\n\t\t\t\t\t(p) =>\n\t\t\t\t\t\tp.type === type &&\n\t\t\t\t\t\tp.triggerKind ===\n\t\t\t\t\t\t\tDebugConfigurationProviderTriggerKind.Initial &&\n\t\t\t\t\t\tp.provideDebugConfigurations,\n\t\t\t\t)\n\t\t\t\t.map((p) => p.provideDebugConfigurations!(folderUri, token)),\n\t\t);\n\n\t\treturn results.reduce((first, second) => first.concat(second), []);\n\t}\n\n\tasync getDynamicProviders(): Promise<\n\t\t{\n\t\t\tlabel: string;\n\t\t\ttype: string;\n\t\t\tgetProvider: () => Promise<IDebugConfigurationProvider | undefined>;\n\t\t\tpick: () => Promise<\n\t\t\t\t{ launch: ILaunch; config: IConfig } | undefined\n\t\t\t>;\n\t\t}[]\n\t> {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\tconst onDebugDynamicConfigurationsName = \"onDebugDynamicConfigurations\";\n\t\tconst debugDynamicExtensionsTypes =\n\t\t\tthis.extensionService.extensions.reduce((acc, e) => {\n\t\t\t\tif (!e.activationEvents) {\n\t\t\t\t\treturn acc;\n\t\t\t\t}\n\n\t\t\t\tconst explicitTypes: string[] = [];\n\t\t\t\tlet hasGenericEvent = false;\n\t\t\t\tfor (const event of e.activationEvents) {\n\t\t\t\t\tif (event === onDebugDynamicConfigurationsName) {\n\t\t\t\t\t\thasGenericEvent = true;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tevent.startsWith(`${onDebugDynamicConfigurationsName}:`)\n\t\t\t\t\t) {\n\t\t\t\t\t\texplicitTypes.push(\n\t\t\t\t\t\t\tevent.slice(\n\t\t\t\t\t\t\t\tonDebugDynamicConfigurationsName.length + 1,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (explicitTypes.length) {\n\t\t\t\t\texplicitTypes.forEach((t) => acc.add(t));\n\t\t\t\t} else if (hasGenericEvent) {\n\t\t\t\t\tconst debuggerType = e.contributes?.debuggers?.[0].type;\n\t\t\t\t\tif (debuggerType) {\n\t\t\t\t\t\tacc.add(debuggerType);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, new Set<string>());\n\n\t\tfor (const configProvider of this.configProviders) {\n\t\t\tif (\n\t\t\t\tconfigProvider.triggerKind ===\n\t\t\t\tDebugConfigurationProviderTriggerKind.Dynamic\n\t\t\t) {\n\t\t\t\tdebugDynamicExtensionsTypes.add(configProvider.type);\n\t\t\t}\n\t\t}\n\n\t\treturn [...debugDynamicExtensionsTypes].map((type) => {\n\t\t\treturn {\n\t\t\t\tlabel: this.adapterManager.getDebuggerLabel(type)!,\n\t\t\t\tgetProvider: async () => {\n\t\t\t\t\tawait this.adapterManager.activateDebuggers(\n\t\t\t\t\t\tonDebugDynamicConfigurationsName,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t);\n\t\t\t\t\treturn this.configProviders.find(\n\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\tp.type === type &&\n\t\t\t\t\t\t\tp.triggerKind ===\n\t\t\t\t\t\t\t\tDebugConfigurationProviderTriggerKind.Dynamic &&\n\t\t\t\t\t\t\tp.provideDebugConfigurations,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\ttype,\n\t\t\t\tpick: async () => {\n\t\t\t\t\t// Do a late 'onDebugDynamicConfigurationsName' activation so extensions are not activated too early #108578\n\t\t\t\t\tawait this.adapterManager.activateDebuggers(\n\t\t\t\t\t\tonDebugDynamicConfigurationsName,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst token = new CancellationTokenSource();\n\t\t\t\t\tconst picks: Promise<IDynamicPickItem[]>[] = [];\n\t\t\t\t\tconst provider = this.configProviders.find(\n\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\tp.type === type &&\n\t\t\t\t\t\t\tp.triggerKind ===\n\t\t\t\t\t\t\t\tDebugConfigurationProviderTriggerKind.Dynamic &&\n\t\t\t\t\t\t\tp.provideDebugConfigurations,\n\t\t\t\t\t);\n\t\t\t\t\tthis.getLaunches().forEach((launch) => {\n\t\t\t\t\t\tif (launch.workspace && provider) {\n\t\t\t\t\t\t\tpicks.push(\n\t\t\t\t\t\t\t\tprovider.provideDebugConfigurations!(\n\t\t\t\t\t\t\t\t\tlaunch.workspace.uri,\n\t\t\t\t\t\t\t\t\ttoken.token,\n\t\t\t\t\t\t\t\t).then((configurations) =>\n\t\t\t\t\t\t\t\t\tconfigurations.map((config) => ({\n\t\t\t\t\t\t\t\t\t\tlabel: config.name,\n\t\t\t\t\t\t\t\t\t\tdescription: launch.name,\n\t\t\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\ticonClass:\n\t\t\t\t\t\t\t\t\t\t\t\t\tThemeIcon.asClassName(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdebugConfigure,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\ttooltip: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"editLaunchConfig\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Edit Debug Configuration in launch.json\",\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tlaunch,\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tconst input = disposables.add(\n\t\t\t\t\t\tthis.quickInputService.createQuickPick<IDynamicPickItem>(),\n\t\t\t\t\t);\n\t\t\t\t\tinput.busy = true;\n\t\t\t\t\tinput.placeholder = nls.localize(\n\t\t\t\t\t\t\"selectConfiguration\",\n\t\t\t\t\t\t\"Select Launch Configuration\",\n\t\t\t\t\t);\n\n\t\t\t\t\tconst chosenPromise = new Promise<\n\t\t\t\t\t\tIDynamicPickItem | undefined\n\t\t\t\t\t>((resolve) => {\n\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\tinput.onDidAccept(() =>\n\t\t\t\t\t\t\t\tresolve(input.activeItems[0]),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\tinput.onDidTriggerItemButton(async (context) => {\n\t\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\t\tconst { launch, config } = context.item;\n\t\t\t\t\t\t\t\tawait launch.openConfigFile({\n\t\t\t\t\t\t\t\t\tpreserveFocus: false,\n\t\t\t\t\t\t\t\t\ttype: config.type,\n\t\t\t\t\t\t\t\t\tsuppressInitialConfigs: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// Only Launch have a pin trigger button\n\t\t\t\t\t\t\t\tawait (launch as Launch).writeConfiguration(\n\t\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tawait this.selectConfiguration(\n\t\t\t\t\t\t\t\t\tlaunch,\n\t\t\t\t\t\t\t\t\tconfig.name,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis.removeRecentDynamicConfigurations(\n\t\t\t\t\t\t\t\t\tconfig.name,\n\t\t\t\t\t\t\t\t\tconfig.type,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\tinput.onDidHide(() => resolve(undefined)),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\n\t\t\t\t\tlet nestedPicks: IDynamicPickItem[][];\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// This await invokes the extension providers, which might fail due to several reasons,\n\t\t\t\t\t\t// therefore we gate this logic under a try/catch to prevent leaving the Debug Tab\n\t\t\t\t\t\t// selector in a borked state.\n\t\t\t\t\t\tnestedPicks = await Promise.all(picks);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst items = nestedPicks.flat();\n\n\t\t\t\t\tinput.items = items;\n\t\t\t\t\tinput.busy = false;\n\t\t\t\t\tinput.show();\n\t\t\t\t\tconst chosen = await chosenPromise;\n\n\t\t\t\t\tdisposables.dispose();\n\n\t\t\t\t\tif (!chosen) {\n\t\t\t\t\t\t// User canceled quick input we should notify the provider to cancel computing configurations\n\t\t\t\t\t\ttoken.cancel();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn chosen;\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t}\n\n\tgetAllConfigurations(): {\n\t\tlaunch: ILaunch;\n\t\tname: string;\n\t\tpresentation?: IConfigPresentation;\n\t}[] {\n\t\tconst all: {\n\t\t\tlaunch: ILaunch;\n\t\t\tname: string;\n\t\t\tpresentation?: IConfigPresentation;\n\t\t}[] = [];\n\t\tfor (const l of this.launches) {\n\t\t\tfor (const name of l.getConfigurationNames()) {\n\t\t\t\tconst config = l.getConfiguration(name) || l.getCompound(name);\n\t\t\t\tif (config) {\n\t\t\t\t\tall.push({\n\t\t\t\t\t\tlaunch: l,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tpresentation: config.presentation,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn getVisibleAndSorted(all);\n\t}\n\n\tremoveRecentDynamicConfigurations(name: string, type: string) {\n\t\tconst remaining = this.getRecentDynamicConfigurations().filter(\n\t\t\t(c) => c.name !== name || c.type !== type,\n\t\t);\n\t\tthis.storageService.store(\n\t\t\tDEBUG_RECENT_DYNAMIC_CONFIGURATIONS,\n\t\t\tJSON.stringify(remaining),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tif (\n\t\t\tthis.selectedConfiguration.name === name &&\n\t\t\tthis.selectedType === type &&\n\t\t\tthis.selectedDynamic\n\t\t) {\n\t\t\tthis.selectConfiguration(undefined, undefined);\n\t\t} else {\n\t\t\tthis._onDidSelectConfigurationName.fire();\n\t\t}\n\t}\n\n\tgetRecentDynamicConfigurations(): { name: string; type: string }[] {\n\t\treturn JSON.parse(\n\t\t\tthis.storageService.get(\n\t\t\t\tDEBUG_RECENT_DYNAMIC_CONFIGURATIONS,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\"[]\",\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(\n\t\t\tEvent.any<IWorkspaceFoldersChangeEvent | WorkbenchState>(\n\t\t\t\tthis.contextService.onDidChangeWorkspaceFolders,\n\t\t\t\tthis.contextService.onDidChangeWorkbenchState,\n\t\t\t)(() => {\n\t\t\t\tthis.initLaunches();\n\t\t\t\tthis.selectConfiguration(undefined);\n\t\t\t\tthis.setCompoundSchemaValues();\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (e.affectsConfiguration(\"launch\")) {\n\t\t\t\t\t// A change happen in the launch.json. If there is already a launch configuration selected, do not change the selection.\n\t\t\t\t\tawait this.selectConfiguration(undefined);\n\t\t\t\t\tthis.setCompoundSchemaValues();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.adapterManager.onDidDebuggersExtPointRead(() => {\n\t\t\t\tthis.setCompoundSchemaValues();\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate initLaunches(): void {\n\t\tthis.launches = this.contextService\n\t\t\t.getWorkspace()\n\t\t\t.folders.map((folder) =>\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tLaunch,\n\t\t\t\t\tthis,\n\t\t\t\t\tthis.adapterManager,\n\t\t\t\t\tfolder,\n\t\t\t\t),\n\t\t\t);\n\t\tif (\n\t\t\tthis.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE\n\t\t) {\n\t\t\tthis.launches.push(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tWorkspaceLaunch,\n\t\t\t\t\tthis,\n\t\t\t\t\tthis.adapterManager,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis.launches.push(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tUserLaunch,\n\t\t\t\tthis,\n\t\t\t\tthis.adapterManager,\n\t\t\t),\n\t\t);\n\n\t\tif (\n\t\t\tthis.selectedLaunch &&\n\t\t\tthis.launches.indexOf(this.selectedLaunch) === -1\n\t\t) {\n\t\t\tthis.selectConfiguration(undefined);\n\t\t}\n\t}\n\n\tprivate setCompoundSchemaValues(): void {\n\t\tconst compoundConfigurationsSchema = (<IJSONSchema>(\n\t\t\tlaunchSchema.properties![\"compounds\"].items\n\t\t)).properties![\"configurations\"];\n\t\tconst launchNames = this.launches\n\t\t\t.map((l) => l.getConfigurationNames(true))\n\t\t\t.reduce((first, second) => first.concat(second), []);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![0].enum =\n\t\t\tlaunchNames;\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1]\n\t\t\t.properties!.name.enum = launchNames;\n\n\t\tconst folderNames = this.contextService\n\t\t\t.getWorkspace()\n\t\t\t.folders.map((f) => f.name);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1]\n\t\t\t.properties!.folder.enum = folderNames;\n\n\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\t}\n\n\tgetLaunches(): ILaunch[] {\n\t\treturn this.launches;\n\t}\n\n\tgetLaunch(workspaceUri: uri | undefined): ILaunch | undefined {\n\t\tif (!uri.isUri(workspaceUri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.launches.find(\n\t\t\t(l) =>\n\t\t\t\tl.workspace &&\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tl.workspace.uri,\n\t\t\t\t\tworkspaceUri,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tget selectedConfiguration(): {\n\t\tlaunch: ILaunch | undefined;\n\t\tname: string | undefined;\n\t\tgetConfig: () => Promise<IConfig | undefined>;\n\t\ttype: string | undefined;\n\t} {\n\t\treturn {\n\t\t\tlaunch: this.selectedLaunch,\n\t\t\tname: this.selectedName,\n\t\t\tgetConfig: this.getSelectedConfig,\n\t\t\ttype: this.selectedType,\n\t\t};\n\t}\n\n\tget onDidSelectConfiguration(): Event<void> {\n\t\treturn this._onDidSelectConfigurationName.event;\n\t}\n\n\tgetWorkspaceLaunch(): ILaunch | undefined {\n\t\tif (\n\t\t\tthis.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE\n\t\t) {\n\t\t\treturn this.launches[this.launches.length - 1];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync selectConfiguration(\n\t\tlaunch: ILaunch | undefined,\n\t\tname?: string,\n\t\tconfig?: IConfig,\n\t\tdynamicConfig?: { type?: string },\n\t): Promise<void> {\n\t\tif (typeof launch === \"undefined\") {\n\t\t\tconst rootUri = this.historyService.getLastActiveWorkspaceRoot();\n\t\t\tlaunch = this.getLaunch(rootUri);\n\t\t\tif (!launch || launch.getConfigurationNames().length === 0) {\n\t\t\t\tlaunch =\n\t\t\t\t\tthis.launches.find(\n\t\t\t\t\t\t(l) => !!(l && l.getConfigurationNames().length),\n\t\t\t\t\t) ||\n\t\t\t\t\tlaunch ||\n\t\t\t\t\tthis.launches[0];\n\t\t\t}\n\t\t}\n\n\t\tconst previousLaunch = this.selectedLaunch;\n\t\tconst previousName = this.selectedName;\n\t\tconst previousSelectedDynamic = this.selectedDynamic;\n\t\tthis.selectedLaunch = launch;\n\n\t\tif (this.selectedLaunch) {\n\t\t\tthis.storageService.store(\n\t\t\t\tDEBUG_SELECTED_ROOT,\n\t\t\t\tthis.selectedLaunch.uri.toString(),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(\n\t\t\t\tDEBUG_SELECTED_ROOT,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t}\n\n\t\tconst names = launch ? launch.getConfigurationNames() : [];\n\t\tthis.getSelectedConfig = () => {\n\t\t\tconst selected = this.selectedName\n\t\t\t\t? launch?.getConfiguration(this.selectedName)\n\t\t\t\t: undefined;\n\t\t\treturn Promise.resolve(selected || config);\n\t\t};\n\n\t\tlet type = config?.type;\n\t\tif (name && names.indexOf(name) >= 0) {\n\t\t\tthis.setSelectedLaunchName(name);\n\t\t} else if (dynamicConfig && dynamicConfig.type) {\n\t\t\t// We could not find the previously used name and config is not passed. We should get all dynamic configurations from providers\n\t\t\t// And potentially auto select the previously used dynamic configuration #96293\n\t\t\ttype = dynamicConfig.type;\n\t\t\tif (!config) {\n\t\t\t\tconst providers = (await this.getDynamicProviders()).filter(\n\t\t\t\t\t(p) => p.type === type,\n\t\t\t\t);\n\t\t\t\tthis.getSelectedConfig = async () => {\n\t\t\t\t\tconst activatedProviders = await Promise.all(\n\t\t\t\t\t\tproviders.map((p) => p.getProvider()),\n\t\t\t\t\t);\n\t\t\t\t\tconst provider =\n\t\t\t\t\t\tactivatedProviders.length > 0\n\t\t\t\t\t\t\t? activatedProviders[0]\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\tif (provider && launch && launch.workspace) {\n\t\t\t\t\t\tconst token = new CancellationTokenSource();\n\t\t\t\t\t\tconst dynamicConfigs =\n\t\t\t\t\t\t\tawait provider.provideDebugConfigurations!(\n\t\t\t\t\t\t\t\tlaunch.workspace.uri,\n\t\t\t\t\t\t\t\ttoken.token,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dynamicConfig = dynamicConfigs.find(\n\t\t\t\t\t\t\t(c) => c.name === name,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (dynamicConfig) {\n\t\t\t\t\t\t\treturn dynamicConfig;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.setSelectedLaunchName(name);\n\n\t\t\tlet recentDynamicProviders = this.getRecentDynamicConfigurations();\n\t\t\tif (name && dynamicConfig.type) {\n\t\t\t\t// We need to store the recently used dynamic configurations to be able to show them in UI #110009\n\t\t\t\trecentDynamicProviders.unshift({\n\t\t\t\t\tname,\n\t\t\t\t\ttype: dynamicConfig.type,\n\t\t\t\t});\n\t\t\t\trecentDynamicProviders = distinct(\n\t\t\t\t\trecentDynamicProviders,\n\t\t\t\t\t(t) => `${t.name} : ${t.type}`,\n\t\t\t\t);\n\t\t\t\tthis.storageService.store(\n\t\t\t\t\tDEBUG_RECENT_DYNAMIC_CONFIGURATIONS,\n\t\t\t\t\tJSON.stringify(recentDynamicProviders),\n\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (\n\t\t\t!this.selectedName ||\n\t\t\tnames.indexOf(this.selectedName) === -1\n\t\t) {\n\t\t\t// We could not find the configuration to select, pick the first one, or reset the selection if there is no launch configuration\n\t\t\tconst nameToSet = names.length ? names[0] : undefined;\n\t\t\tthis.setSelectedLaunchName(nameToSet);\n\t\t}\n\n\t\tif (!config && launch && this.selectedName) {\n\t\t\tconfig = launch.getConfiguration(this.selectedName);\n\t\t\ttype = config?.type;\n\t\t}\n\n\t\tthis.selectedType = dynamicConfig?.type || config?.type;\n\t\tthis.selectedDynamic = !!dynamicConfig;\n\t\t// Only store the selected type if we are having a dynamic configuration. Otherwise restoring this configuration from storage might be misindentified as a dynamic configuration\n\t\tthis.storageService.store(\n\t\t\tDEBUG_SELECTED_TYPE,\n\t\t\tdynamicConfig ? this.selectedType : undefined,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\n\t\tif (type) {\n\t\t\tthis.debugConfigurationTypeContext.set(type);\n\t\t} else {\n\t\t\tthis.debugConfigurationTypeContext.reset();\n\t\t}\n\n\t\tif (\n\t\t\tthis.selectedLaunch !== previousLaunch ||\n\t\t\tthis.selectedName !== previousName ||\n\t\t\tpreviousSelectedDynamic !== this.selectedDynamic\n\t\t) {\n\t\t\tthis._onDidSelectConfigurationName.fire();\n\t\t}\n\t}\n\n\tprivate setSelectedLaunchName(selectedName: string | undefined): void {\n\t\tthis.selectedName = selectedName;\n\n\t\tif (this.selectedName) {\n\t\t\tthis.storageService.store(\n\t\t\t\tDEBUG_SELECTED_CONFIG_NAME_KEY,\n\t\t\t\tthis.selectedName,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(\n\t\t\t\tDEBUG_SELECTED_CONFIG_NAME_KEY,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nabstract class AbstractLaunch implements ILaunch {\n\tabstract readonly uri: uri;\n\tabstract readonly name: string;\n\tabstract readonly workspace: IWorkspaceFolder | undefined;\n\tprotected abstract getConfig(): IGlobalConfig | undefined;\n\tabstract openConfigFile(\n\t\toptions: {\n\t\t\tpreserveFocus: boolean;\n\t\t\ttype?: string | undefined;\n\t\t\tsuppressInitialConfigs?: boolean | undefined;\n\t\t},\n\t\ttoken?: CancellationToken | undefined,\n\t): Promise<{ editor: IEditorPane | null; created: boolean }>;\n\n\tconstructor(\n\t\tprotected configurationManager: ConfigurationManager,\n\t\tprivate readonly adapterManager: IAdapterManager,\n\t) {}\n\n\tgetCompound(name: string): ICompound | undefined {\n\t\tconst config = this.getConfig();\n\t\tif (!config || !config.compounds) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn config.compounds.find((compound) => compound.name === name);\n\t}\n\n\tgetConfigurationNames(ignoreCompoundsAndPresentation = false): string[] {\n\t\tconst config = this.getConfig();\n\t\tif (\n\t\t\t!config ||\n\t\t\t(!Array.isArray(config.configurations) &&\n\t\t\t\t!Array.isArray(config.compounds))\n\t\t) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst configurations: (IConfig | ICompound)[] = [];\n\t\t\tif (config.configurations) {\n\t\t\t\tconfigurations.push(\n\t\t\t\t\t...config.configurations.filter(\n\t\t\t\t\t\t(cfg) => cfg && typeof cfg.name === \"string\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (ignoreCompoundsAndPresentation) {\n\t\t\t\treturn configurations.map((c) => c.name);\n\t\t\t}\n\n\t\t\tif (config.compounds) {\n\t\t\t\tconfigurations.push(\n\t\t\t\t\t...config.compounds.filter(\n\t\t\t\t\t\t(compound) =>\n\t\t\t\t\t\t\ttypeof compound.name === \"string\" &&\n\t\t\t\t\t\t\tcompound.configurations &&\n\t\t\t\t\t\t\tcompound.configurations.length,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn getVisibleAndSorted(configurations).map((c) => c.name);\n\t\t}\n\t}\n\n\tgetConfiguration(name: string): IConfig | undefined {\n\t\t// We need to clone the configuration in order to be able to make changes to it #42198\n\t\tconst config = objects.deepClone(this.getConfig());\n\t\tif (!config || !config.configurations) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst configuration = config.configurations.find(\n\t\t\t(config) => config && config.name === name,\n\t\t);\n\t\tif (configuration) {\n\t\t\tif (this instanceof UserLaunch) {\n\t\t\t\tconfiguration.__configurationTarget = ConfigurationTarget.USER;\n\t\t\t} else if (this instanceof WorkspaceLaunch) {\n\t\t\t\tconfiguration.__configurationTarget =\n\t\t\t\t\tConfigurationTarget.WORKSPACE;\n\t\t\t} else {\n\t\t\t\tconfiguration.__configurationTarget =\n\t\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn configuration;\n\t}\n\n\tasync getInitialConfigurationContent(\n\t\tfolderUri?: uri,\n\t\ttype?: string,\n\t\tuseInitialConfigs?: boolean,\n\t\ttoken?: CancellationToken,\n\t): Promise<string> {\n\t\tlet content = \"\";\n\t\tconst adapter = type\n\t\t\t? this.adapterManager.getEnabledDebugger(type)\n\t\t\t: await this.adapterManager.guessDebugger(true);\n\t\tif (adapter) {\n\t\t\tconst initialConfigs = useInitialConfigs\n\t\t\t\t? await this.configurationManager.provideDebugConfigurations(\n\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\tadapter.type,\n\t\t\t\t\t\ttoken || CancellationToken.None,\n\t\t\t\t\t)\n\t\t\t\t: [];\n\t\t\tcontent =\n\t\t\t\tawait adapter.getInitialConfigurationContent(initialConfigs);\n\t\t}\n\t\treturn content;\n\t}\n\n\tget hidden(): boolean {\n\t\treturn false;\n\t}\n}\n\nclass Launch extends AbstractLaunch implements ILaunch {\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\tpublic workspace: IWorkspaceFolder,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget uri(): uri {\n\t\treturn resources.joinPath(this.workspace.uri, \"/.vscode/launch.json\");\n\t}\n\n\tget name(): string {\n\t\treturn this.workspace.name;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>(\"launch\", {\n\t\t\tresource: this.workspace.uri,\n\t\t}).workspaceFolderValue;\n\t}\n\n\tasync openConfigFile(\n\t\t{\n\t\t\tpreserveFocus,\n\t\t\ttype,\n\t\t\tsuppressInitialConfigs,\n\t\t}: {\n\t\t\tpreserveFocus: boolean;\n\t\t\ttype?: string;\n\t\t\tsuppressInitialConfigs?: boolean;\n\t\t},\n\t\ttoken?: CancellationToken,\n\t): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst resource = this.uri;\n\t\tlet created = false;\n\t\tlet content = \"\";\n\t\ttry {\n\t\t\tconst fileContent = await this.fileService.readFile(resource);\n\t\t\tcontent = fileContent.value.toString();\n\t\t} catch {\n\t\t\t// launch.json not found: create one by collecting launch configs from debugConfigProviders\n\t\t\tcontent = await this.getInitialConfigurationContent(\n\t\t\t\tthis.workspace.uri,\n\t\t\t\ttype,\n\t\t\t\t!suppressInitialConfigs,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tif (!content) {\n\t\t\t\t// Cancelled\n\t\t\t\treturn { editor: null, created: false };\n\t\t\t}\n\n\t\t\tcreated = true; // pin only if config file is created #8727\n\t\t\ttry {\n\t\t\t\tawait this.textFileService.write(resource, content);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"DebugConfig.failed\",\n\t\t\t\t\t\t\"Unable to create 'launch.json' file inside the '.vscode' folder ({0}).\",\n\t\t\t\t\t\terror.message,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst index = content.indexOf(\n\t\t\t`\"${this.configurationManager.selectedConfiguration.name}\"`,\n\t\t);\n\t\tlet startLineNumber = 1;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tif (content.charAt(i) === \"\\n\") {\n\t\t\t\tstartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tconst selection =\n\t\t\tstartLineNumber > 1\n\t\t\t\t? { startLineNumber, startColumn: 4 }\n\t\t\t\t: undefined;\n\n\t\tconst editor = await this.editorService.openEditor(\n\t\t\t{\n\t\t\t\tresource,\n\t\t\t\toptions: {\n\t\t\t\t\tselection,\n\t\t\t\t\tpreserveFocus,\n\t\t\t\t\tpinned: created,\n\t\t\t\t\trevealIfVisible: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\tACTIVE_GROUP,\n\t\t);\n\n\t\treturn {\n\t\t\teditor: editor ?? null,\n\t\t\tcreated,\n\t\t};\n\t}\n\n\tasync writeConfiguration(configuration: IConfig): Promise<void> {\n\t\tconst fullConfig = objects.deepClone(this.getConfig()!);\n\t\tif (!fullConfig.configurations) {\n\t\t\tfullConfig.configurations = [];\n\t\t}\n\t\tfullConfig.configurations.push(configuration);\n\t\tawait this.configurationService.updateValue(\n\t\t\t\"launch\",\n\t\t\tfullConfig,\n\t\t\t{ resource: this.workspace.uri },\n\t\t\tConfigurationTarget.WORKSPACE_FOLDER,\n\t\t);\n\t}\n}\n\nclass WorkspaceLaunch extends AbstractLaunch implements ILaunch {\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.contextService.getWorkspace().configuration!;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize(\"workspace\", \"workspace\");\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>(\"launch\")\n\t\t\t.workspaceValue;\n\t}\n\n\tasync openConfigFile(\n\t\t{\n\t\t\tpreserveFocus,\n\t\t\ttype,\n\t\t\tuseInitialConfigs,\n\t\t}: {\n\t\t\tpreserveFocus: boolean;\n\t\t\ttype?: string;\n\t\t\tuseInitialConfigs?: boolean;\n\t\t},\n\t\ttoken?: CancellationToken,\n\t): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst launchExistInFile = !!this.getConfig();\n\t\tif (!launchExistInFile) {\n\t\t\t// Launch property in workspace config not found: create one by collecting launch configs from debugConfigProviders\n\t\t\tconst content = await this.getInitialConfigurationContent(\n\t\t\t\tundefined,\n\t\t\t\ttype,\n\t\t\t\tuseInitialConfigs,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tif (content) {\n\t\t\t\tawait this.configurationService.updateValue(\n\t\t\t\t\t\"launch\",\n\t\t\t\t\tjson.parse(content),\n\t\t\t\t\tConfigurationTarget.WORKSPACE,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn { editor: null, created: false };\n\t\t\t}\n\t\t}\n\n\t\tconst editor = await this.editorService.openEditor(\n\t\t\t{\n\t\t\t\tresource: this.contextService.getWorkspace().configuration!,\n\t\t\t\toptions: { preserveFocus },\n\t\t\t},\n\t\t\tACTIVE_GROUP,\n\t\t);\n\n\t\treturn {\n\t\t\teditor: editor ?? null,\n\t\t\tcreated: false,\n\t\t};\n\t}\n}\n\nclass UserLaunch extends AbstractLaunch implements ILaunch {\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IPreferencesService\n\t\tprivate readonly preferencesService: IPreferencesService,\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.preferencesService.userSettingsResource;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize(\"user settings\", \"user settings\");\n\t}\n\n\toverride get hidden(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>(\"launch\")\n\t\t\t.userValue;\n\t}\n\n\tasync openConfigFile({\n\t\tpreserveFocus,\n\t\ttype,\n\t\tuseInitialContent,\n\t}: {\n\t\tpreserveFocus: boolean;\n\t\ttype?: string;\n\t\tuseInitialContent?: boolean;\n\t}): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst editor = await this.preferencesService.openUserSettings({\n\t\t\tjsonEditor: true,\n\t\t\tpreserveFocus,\n\t\t\trevealSetting: { key: \"launch\" },\n\t\t});\n\t\treturn {\n\t\t\teditor: editor ?? null,\n\t\t\tcreated: false,\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,SAAS,aAAa;AAC/B,YAAY,UAAU;AAEtB;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,YAAY,aAAa;AACzB,YAAY,eAAe;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,OAAO,WAAW;AAC3B,YAAY,SAAS;AACrB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP,SAAS,oBAAoB;AAC7B,SAAS,6BAA6B;AACtC;AAAA,EAEC,cAAc;AAAA,OACR;AACP,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,EAGA;AAAA,OACM;AAEP,SAAS,sBAAsB;AAC/B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,SAAS,wBAAwB;AACjC;AAAA,EACC;AAAA,EACA;AAAA,OASM;AACP,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAE/B,MAAM,eAAe,SAAS;AAAA,EAC7B,eAAe;AAChB;AACA,aAAa,eAAe,gBAAgB,YAAY;AAExD,MAAM,iCAAiC;AACvC,MAAM,sBAAsB;AAE5B,MAAM,sBAAsB;AAC5B,MAAM,sCAAsC;AAQrC,IAAM,uBAAN,MAA4D;AAAA,EAgBlE,YACkB,gBAEA,gBAEA,sBAEA,mBAEA,sBACiB,gBACE,kBACF,gBAEjB,oBACG,mBACU,YAC7B;AAhBgB;AAEA;AAEA;AAEA;AAEA;AACiB;AACE;AACF;AAEjB;AAEa;AAE9B,SAAK,kBAAkB,CAAC;AACxB,SAAK,YAAY,CAAC,KAAK,kCAAkC;AACzD,SAAK,aAAa;AAClB,SAAK,wBAAwB;AAC7B,SAAK,kBAAkB;AACvB,UAAM,uBAAuB,KAAK,eAAe;AAAA,MAChD;AAAA,MACA,aAAa;AAAA,IACd;AACA,UAAM,uBAAuB,KAAK,eAAe;AAAA,MAChD;AAAA,MACA,aAAa;AAAA,IACd;AACA,UAAM,yBAAyB,KAAK,SAAS;AAAA,MAC5C,CAAC,MAAM,EAAE,IAAI,SAAS,MAAM;AAAA,IAC7B;AACA,UAAM,uBAAuB,KAAK,eAAe;AAAA,MAChD;AAAA,MACA,aAAa;AAAA,IACd;AACA,SAAK,gCACJ,iCAAiC,OAAO,iBAAiB;AAC1D,UAAM,gBAAgB,uBACnB,EAAE,MAAM,qBAAqB,IAC7B;AACH,QACC,0BACA,uBAAuB,sBAAsB,EAAE,QAC9C;AACD,WAAK;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,WAAW,KAAK,SAAS,SAAS,GAAG;AACpC,WAAK;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EA7KD,OAgGmE;AAAA;AAAA;AAAA,EAC1D;AAAA,EACA;AAAA,EACA;AAAA,EACA,oBAAwD,6BAC/D,QAAQ,QAAQ,MAAS,GADsC;AAAA,EAExD;AAAA,EACA,kBAAkB;AAAA,EAClB;AAAA,EACS,gCAAgC,IAAI,QAAc;AAAA,EAC3D;AAAA,EACA;AAAA,EACS,qCAAqC,IAAI,QAAc;AAAA,EACxD,oCACf,KAAK,mCAAmC;AAAA,EAiEzC,mCACC,4BACc;AACd,SAAK,gBAAgB,KAAK,0BAA0B;AACpD,SAAK,mCAAmC,KAAK;AAC7C,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,aAAK;AAAA,UACJ;AAAA,QACD;AACA,aAAK,mCAAmC,KAAK;AAAA,MAC9C,GALS;AAAA,IAMV;AAAA,EACD;AAAA,EAEA,qCACC,4BACO;AACP,UAAM,KAAK,KAAK,gBAAgB,QAAQ,0BAA0B;AAClE,QAAI,MAAM,GAAG;AACZ,WAAK,gBAAgB,OAAO,IAAI,CAAC;AAAA,IAClC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,8BACC,WACA,aACU;AACV,QAAI,gBAAgB,QAAW;AAC9B,oBAAc,sCAAsC;AAAA,IACrD;AAEA,UAAM,WAAW,KAAK,gBAAgB;AAAA,MACrC,CAAC,MACA,EAAE,8BACF,EAAE,SAAS,aACX,EAAE,gBAAgB;AAAA,IACpB;AACA,WAAO,CAAC,CAAC;AAAA,EACV;AAAA,EAEA,MAAM,gCACL,WACA,MACA,QACA,OACsC;AACtC,UAAM,mCAAmC,8BACxCA,OACAC,YACI;AACJ,UAAID,UAAS,KAAK;AACjB,cAAM,KAAK,eAAe;AAAA,UACzB;AAAA,UACAA;AAAA,QACD;AAAA,MACD;AAEA,iBAAW,KAAK,KAAK,iBAAiB;AACrC,YAAI,EAAE,SAASA,SAAQ,EAAE,6BAA6BC,SAAQ;AAC7D,UAAAA,UAAS,MAAM,EAAE;AAAA,YAChB;AAAA,YACAA;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,aAAOA;AAAA,IACR,GAtByC;AAwBzC,QAAI,eAAe,OAAO,QAAQ;AAClC,QAAI,SAAqC;AACzC,aAAS,OAAO,oBAAI,IAAI,GAAG,UAAU,CAAC,KAAK,IAAI,YAAY,KAAK;AAC/D,WAAK,IAAI,YAAY;AACrB,eAAS,MAAM;AAAA,QACd;AAAA,QACA;AAAA,MACD;AACA,eAAS,MAAM,iCAAiC,KAAK,MAAM;AAC3D,qBAAe,QAAQ,QAAQ;AAAA,IAChC;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,kDACL,WACA,MACA,QACA,OACsC;AAEtC,UAAM,YAAY,KAAK,gBACrB;AAAA,MACA,CAAC,MACA,EAAE,SAAS,QACX,EAAE;AAAA,IACJ,EACC;AAAA,MACA,KAAK,gBAAgB;AAAA,QACpB,CAAC,MACA,EAAE,SAAS,OACX,EAAE;AAAA,MACJ;AAAA,IACD;AAED,QAAI,SAAqC;AACzC,UAAM;AAAA,MACL,UAAU,IAAI,CAAC,aAAa,YAAY;AAEvC,YAAI,QAAQ;AACX,mBACC,MAAM,SAAS;AAAA,YACd;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,QACF;AAAA,MACD,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,2BACL,WACA,MACA,OACiB;AACjB,UAAM,KAAK,eAAe;AAAA,MACzB;AAAA,IACD;AACA,UAAM,UAAU,MAAM,QAAQ;AAAA,MAC7B,KAAK,gBACH;AAAA,QACA,CAAC,MACA,EAAE,SAAS,QACX,EAAE,gBACD,sCAAsC,WACvC,EAAE;AAAA,MACJ,EACC,IAAI,CAAC,MAAM,EAAE,2BAA4B,WAAW,KAAK,CAAC;AAAA,IAC7D;AAEA,WAAO,QAAQ,OAAO,CAAC,OAAO,WAAW,MAAM,OAAO,MAAM,GAAG,CAAC,CAAC;AAAA,EAClE;AAAA,EAEA,MAAM,sBASJ;AACD,UAAM,KAAK,iBAAiB,kCAAkC;AAC9D,UAAM,mCAAmC;AACzC,UAAM,8BACL,KAAK,iBAAiB,WAAW,OAAO,CAAC,KAAK,MAAM;AACnD,UAAI,CAAC,EAAE,kBAAkB;AACxB,eAAO;AAAA,MACR;AAEA,YAAM,gBAA0B,CAAC;AACjC,UAAI,kBAAkB;AACtB,iBAAW,SAAS,EAAE,kBAAkB;AACvC,YAAI,UAAU,kCAAkC;AAC/C,4BAAkB;AAAA,QACnB,WACC,MAAM,WAAW,GAAG,gCAAgC,GAAG,GACtD;AACD,wBAAc;AAAA,YACb,MAAM;AAAA,cACL,iCAAiC,SAAS;AAAA,YAC3C;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,UAAI,cAAc,QAAQ;AACzB,sBAAc,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC;AAAA,MACxC,WAAW,iBAAiB;AAC3B,cAAM,eAAe,EAAE,aAAa,YAAY,CAAC,EAAE;AACnD,YAAI,cAAc;AACjB,cAAI,IAAI,YAAY;AAAA,QACrB;AAAA,MACD;AAEA,aAAO;AAAA,IACR,GAAG,oBAAI,IAAY,CAAC;AAErB,eAAW,kBAAkB,KAAK,iBAAiB;AAClD,UACC,eAAe,gBACf,sCAAsC,SACrC;AACD,oCAA4B,IAAI,eAAe,IAAI;AAAA,MACpD;AAAA,IACD;AAEA,WAAO,CAAC,GAAG,2BAA2B,EAAE,IAAI,CAAC,SAAS;AACrD,aAAO;AAAA,QACN,OAAO,KAAK,eAAe,iBAAiB,IAAI;AAAA,QAChD,aAAa,mCAAY;AACxB,gBAAM,KAAK,eAAe;AAAA,YACzB;AAAA,YACA;AAAA,UACD;AACA,iBAAO,KAAK,gBAAgB;AAAA,YAC3B,CAAC,MACA,EAAE,SAAS,QACX,EAAE,gBACD,sCAAsC,WACvC,EAAE;AAAA,UACJ;AAAA,QACD,GAZa;AAAA,QAab;AAAA,QACA,MAAM,mCAAY;AAEjB,gBAAM,KAAK,eAAe;AAAA,YACzB;AAAA,YACA;AAAA,UACD;AAEA,gBAAM,QAAQ,IAAI,wBAAwB;AAC1C,gBAAM,QAAuC,CAAC;AAC9C,gBAAM,WAAW,KAAK,gBAAgB;AAAA,YACrC,CAAC,MACA,EAAE,SAAS,QACX,EAAE,gBACD,sCAAsC,WACvC,EAAE;AAAA,UACJ;AACA,eAAK,YAAY,EAAE,QAAQ,CAAC,WAAW;AACtC,gBAAI,OAAO,aAAa,UAAU;AACjC,oBAAM;AAAA,gBACL,SAAS;AAAA,kBACR,OAAO,UAAU;AAAA,kBACjB,MAAM;AAAA,gBACP,EAAE;AAAA,kBAAK,CAAC,mBACP,eAAe,IAAI,CAAC,YAAY;AAAA,oBAC/B,OAAO,OAAO;AAAA,oBACd,aAAa,OAAO;AAAA,oBACpB;AAAA,oBACA,SAAS;AAAA,sBACR;AAAA,wBACC,WACC,UAAU;AAAA,0BACT;AAAA,wBACD;AAAA,wBACD,SAAS,IAAI;AAAA,0BACZ;AAAA,0BACA;AAAA,wBACD;AAAA,sBACD;AAAA,oBACD;AAAA,oBACA;AAAA,kBACD,EAAE;AAAA,gBACH;AAAA,cACD;AAAA,YACD;AAAA,UACD,CAAC;AAED,gBAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAM,QAAQ,YAAY;AAAA,YACzB,KAAK,kBAAkB,gBAAkC;AAAA,UAC1D;AACA,gBAAM,OAAO;AACb,gBAAM,cAAc,IAAI;AAAA,YACvB;AAAA,YACA;AAAA,UACD;AAEA,gBAAM,gBAAgB,IAAI,QAExB,CAAC,YAAY;AACd,wBAAY;AAAA,cACX,MAAM;AAAA,gBAAY,MACjB,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,cAC7B;AAAA,YACD;AACA,wBAAY;AAAA,cACX,MAAM,uBAAuB,OAAO,YAAY;AAC/C,wBAAQ,MAAS;AACjB,sBAAM,EAAE,QAAQ,OAAO,IAAI,QAAQ;AACnC,sBAAM,OAAO,eAAe;AAAA,kBAC3B,eAAe;AAAA,kBACf,MAAM,OAAO;AAAA,kBACb,wBAAwB;AAAA,gBACzB,CAAC;AAED,sBAAO,OAAkB;AAAA,kBACxB;AAAA,gBACD;AACA,sBAAM,KAAK;AAAA,kBACV;AAAA,kBACA,OAAO;AAAA,gBACR;AACA,qBAAK;AAAA,kBACJ,OAAO;AAAA,kBACP,OAAO;AAAA,gBACR;AAAA,cACD,CAAC;AAAA,YACF;AACA,wBAAY;AAAA,cACX,MAAM,UAAU,MAAM,QAAQ,MAAS,CAAC;AAAA,YACzC;AAAA,UACD,CAAC;AAED,cAAI;AACJ,cAAI;AAIH,0BAAc,MAAM,QAAQ,IAAI,KAAK;AAAA,UACtC,SAAS,KAAK;AACb,iBAAK,WAAW,MAAM,GAAG;AACzB,wBAAY,QAAQ;AACpB;AAAA,UACD;AAEA,gBAAM,QAAQ,YAAY,KAAK;AAE/B,gBAAM,QAAQ;AACd,gBAAM,OAAO;AACb,gBAAM,KAAK;AACX,gBAAM,SAAS,MAAM;AAErB,sBAAY,QAAQ;AAEpB,cAAI,CAAC,QAAQ;AAEZ,kBAAM,OAAO;AACb;AAAA,UACD;AAEA,iBAAO;AAAA,QACR,GAxHM;AAAA,MAyHP;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,uBAII;AACH,UAAM,MAIA,CAAC;AACP,eAAW,KAAK,KAAK,UAAU;AAC9B,iBAAW,QAAQ,EAAE,sBAAsB,GAAG;AAC7C,cAAM,SAAS,EAAE,iBAAiB,IAAI,KAAK,EAAE,YAAY,IAAI;AAC7D,YAAI,QAAQ;AACX,cAAI,KAAK;AAAA,YACR,QAAQ;AAAA,YACR;AAAA,YACA,cAAc,OAAO;AAAA,UACtB,CAAC;AAAA,QACF;AAAA,MACD;AAAA,IACD;AAEA,WAAO,oBAAoB,GAAG;AAAA,EAC/B;AAAA,EAEA,kCAAkC,MAAc,MAAc;AAC7D,UAAM,YAAY,KAAK,+BAA+B,EAAE;AAAA,MACvD,CAAC,MAAM,EAAE,SAAS,QAAQ,EAAE,SAAS;AAAA,IACtC;AACA,SAAK,eAAe;AAAA,MACnB;AAAA,MACA,KAAK,UAAU,SAAS;AAAA,MACxB,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AACA,QACC,KAAK,sBAAsB,SAAS,QACpC,KAAK,iBAAiB,QACtB,KAAK,iBACJ;AACD,WAAK,oBAAoB,QAAW,MAAS;AAAA,IAC9C,OAAO;AACN,WAAK,8BAA8B,KAAK;AAAA,IACzC;AAAA,EACD;AAAA,EAEA,iCAAmE;AAClE,WAAO,KAAK;AAAA,MACX,KAAK,eAAe;AAAA,QACnB;AAAA,QACA,aAAa;AAAA,QACb;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,oBAA0B;AACjC,SAAK,UAAU;AAAA,MACd,MAAM;AAAA,QACL,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAAA,MACrB,EAAE,MAAM;AACP,aAAK,aAAa;AAClB,aAAK,oBAAoB,MAAS;AAClC,aAAK,wBAAwB;AAAA,MAC9B,CAAC;AAAA,IACF;AACA,SAAK,UAAU;AAAA,MACd,KAAK,qBAAqB,yBAAyB,OAAO,MAAM;AAC/D,YAAI,EAAE,qBAAqB,QAAQ,GAAG;AAErC,gBAAM,KAAK,oBAAoB,MAAS;AACxC,eAAK,wBAAwB;AAAA,QAC9B;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK,UAAU;AAAA,MACd,KAAK,eAAe,2BAA2B,MAAM;AACpD,aAAK,wBAAwB;AAAA,MAC9B,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,eAAqB;AAC5B,SAAK,WAAW,KAAK,eACnB,aAAa,EACb,QAAQ;AAAA,MAAI,CAAC,WACb,KAAK,qBAAqB;AAAA,QACzB;AAAA,QACA;AAAA,QACA,KAAK;AAAA,QACL;AAAA,MACD;AAAA,IACD;AACD,QACC,KAAK,eAAe,kBAAkB,MAAM,eAAe,WAC1D;AACD,WAAK,SAAS;AAAA,QACb,KAAK,qBAAqB;AAAA,UACzB;AAAA,UACA;AAAA,UACA,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AACA,SAAK,SAAS;AAAA,MACb,KAAK,qBAAqB;AAAA,QACzB;AAAA,QACA;AAAA,QACA,KAAK;AAAA,MACN;AAAA,IACD;AAEA,QACC,KAAK,kBACL,KAAK,SAAS,QAAQ,KAAK,cAAc,MAAM,IAC9C;AACD,WAAK,oBAAoB,MAAS;AAAA,IACnC;AAAA,EACD;AAAA,EAEQ,0BAAgC;AACvC,UAAM,+BACL,aAAa,WAAY,WAAW,EAAE,MACpC,WAAY,gBAAgB;AAC/B,UAAM,cAAc,KAAK,SACvB,IAAI,CAAC,MAAM,EAAE,sBAAsB,IAAI,CAAC,EACxC,OAAO,CAAC,OAAO,WAAW,MAAM,OAAO,MAAM,GAAG,CAAC,CAAC;AACpD,IAAc,6BAA6B,MAAO,MAAO,CAAC,EAAE,OAC3D;AACD,IAAc,6BAA6B,MAAO,MAAO,CAAC,EACxD,WAAY,KAAK,OAAO;AAE1B,UAAM,cAAc,KAAK,eACvB,aAAa,EACb,QAAQ,IAAI,CAAC,MAAM,EAAE,IAAI;AAC3B,IAAc,6BAA6B,MAAO,MAAO,CAAC,EACxD,WAAY,OAAO,OAAO;AAE5B,iBAAa,eAAe,gBAAgB,YAAY;AAAA,EACzD;AAAA,EAEA,cAAyB;AACxB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,UAAU,cAAoD;AAC7D,QAAI,CAAC,IAAI,MAAM,YAAY,GAAG;AAC7B,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,SAAS;AAAA,MACpB,CAAC,MACA,EAAE,aACF,KAAK,mBAAmB,OAAO;AAAA,QAC9B,EAAE,UAAU;AAAA,QACZ;AAAA,MACD;AAAA,IACF;AAAA,EACD;AAAA,EAEA,IAAI,wBAKF;AACD,WAAO;AAAA,MACN,QAAQ,KAAK;AAAA,MACb,MAAM,KAAK;AAAA,MACX,WAAW,KAAK;AAAA,MAChB,MAAM,KAAK;AAAA,IACZ;AAAA,EACD;AAAA,EAEA,IAAI,2BAAwC;AAC3C,WAAO,KAAK,8BAA8B;AAAA,EAC3C;AAAA,EAEA,qBAA0C;AACzC,QACC,KAAK,eAAe,kBAAkB,MAAM,eAAe,WAC1D;AACD,aAAO,KAAK,SAAS,KAAK,SAAS,SAAS,CAAC;AAAA,IAC9C;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,oBACL,QACA,MACA,QACA,eACgB;AAChB,QAAI,OAAO,WAAW,aAAa;AAClC,YAAM,UAAU,KAAK,eAAe,2BAA2B;AAC/D,eAAS,KAAK,UAAU,OAAO;AAC/B,UAAI,CAAC,UAAU,OAAO,sBAAsB,EAAE,WAAW,GAAG;AAC3D,iBACC,KAAK,SAAS;AAAA,UACb,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE;AAAA,QAC1C,KACA,UACA,KAAK,SAAS,CAAC;AAAA,MACjB;AAAA,IACD;AAEA,UAAM,iBAAiB,KAAK;AAC5B,UAAM,eAAe,KAAK;AAC1B,UAAM,0BAA0B,KAAK;AACrC,SAAK,iBAAiB;AAEtB,QAAI,KAAK,gBAAgB;AACxB,WAAK,eAAe;AAAA,QACnB;AAAA,QACA,KAAK,eAAe,IAAI,SAAS;AAAA,QACjC,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD,OAAO;AACN,WAAK,eAAe;AAAA,QACnB;AAAA,QACA,aAAa;AAAA,MACd;AAAA,IACD;AAEA,UAAM,QAAQ,SAAS,OAAO,sBAAsB,IAAI,CAAC;AACzD,SAAK,oBAAoB,MAAM;AAC9B,YAAM,WAAW,KAAK,eACnB,QAAQ,iBAAiB,KAAK,YAAY,IAC1C;AACH,aAAO,QAAQ,QAAQ,YAAY,MAAM;AAAA,IAC1C;AAEA,QAAI,OAAO,QAAQ;AACnB,QAAI,QAAQ,MAAM,QAAQ,IAAI,KAAK,GAAG;AACrC,WAAK,sBAAsB,IAAI;AAAA,IAChC,WAAW,iBAAiB,cAAc,MAAM;AAG/C,aAAO,cAAc;AACrB,UAAI,CAAC,QAAQ;AACZ,cAAM,aAAa,MAAM,KAAK,oBAAoB,GAAG;AAAA,UACpD,CAAC,MAAM,EAAE,SAAS;AAAA,QACnB;AACA,aAAK,oBAAoB,YAAY;AACpC,gBAAM,qBAAqB,MAAM,QAAQ;AAAA,YACxC,UAAU,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;AAAA,UACrC;AACA,gBAAM,WACL,mBAAmB,SAAS,IACzB,mBAAmB,CAAC,IACpB;AACJ,cAAI,YAAY,UAAU,OAAO,WAAW;AAC3C,kBAAM,QAAQ,IAAI,wBAAwB;AAC1C,kBAAM,iBACL,MAAM,SAAS;AAAA,cACd,OAAO,UAAU;AAAA,cACjB,MAAM;AAAA,YACP;AACD,kBAAMC,iBAAgB,eAAe;AAAA,cACpC,CAAC,MAAM,EAAE,SAAS;AAAA,YACnB;AACA,gBAAIA,gBAAe;AAClB,qBAAOA;AAAA,YACR;AAAA,UACD;AAEA,iBAAO;AAAA,QACR;AAAA,MACD;AACA,WAAK,sBAAsB,IAAI;AAE/B,UAAI,yBAAyB,KAAK,+BAA+B;AACjE,UAAI,QAAQ,cAAc,MAAM;AAE/B,+BAAuB,QAAQ;AAAA,UAC9B;AAAA,UACA,MAAM,cAAc;AAAA,QACrB,CAAC;AACD,iCAAyB;AAAA,UACxB;AAAA,UACA,CAAC,MAAM,GAAG,EAAE,IAAI,MAAM,EAAE,IAAI;AAAA,QAC7B;AACA,aAAK,eAAe;AAAA,UACnB;AAAA,UACA,KAAK,UAAU,sBAAsB;AAAA,UACrC,aAAa;AAAA,UACb,cAAc;AAAA,QACf;AAAA,MACD;AAAA,IACD,WACC,CAAC,KAAK,gBACN,MAAM,QAAQ,KAAK,YAAY,MAAM,IACpC;AAED,YAAM,YAAY,MAAM,SAAS,MAAM,CAAC,IAAI;AAC5C,WAAK,sBAAsB,SAAS;AAAA,IACrC;AAEA,QAAI,CAAC,UAAU,UAAU,KAAK,cAAc;AAC3C,eAAS,OAAO,iBAAiB,KAAK,YAAY;AAClD,aAAO,QAAQ;AAAA,IAChB;AAEA,SAAK,eAAe,eAAe,QAAQ,QAAQ;AACnD,SAAK,kBAAkB,CAAC,CAAC;AAEzB,SAAK,eAAe;AAAA,MACnB;AAAA,MACA,gBAAgB,KAAK,eAAe;AAAA,MACpC,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AAEA,QAAI,MAAM;AACT,WAAK,8BAA8B,IAAI,IAAI;AAAA,IAC5C,OAAO;AACN,WAAK,8BAA8B,MAAM;AAAA,IAC1C;AAEA,QACC,KAAK,mBAAmB,kBACxB,KAAK,iBAAiB,gBACtB,4BAA4B,KAAK,iBAChC;AACD,WAAK,8BAA8B,KAAK;AAAA,IACzC;AAAA,EACD;AAAA,EAEQ,sBAAsB,cAAwC;AACrE,SAAK,eAAe;AAEpB,QAAI,KAAK,cAAc;AACtB,WAAK,eAAe;AAAA,QACnB;AAAA,QACA,KAAK;AAAA,QACL,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD,OAAO;AACN,WAAK,eAAe;AAAA,QACnB;AAAA,QACA,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,YAAY,QAAQ,KAAK,SAAS;AAAA,EACxC;AACD;AA5wBa,uBAAN;AAAA,EAkBJ;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,GAhCU;AA8wBb,MAAe,eAAkC;AAAA,EAchD,YACW,sBACO,gBAChB;AAFS;AACO;AAAA,EACf;AAAA,EA/3BJ,OA82BiD;AAAA;AAAA;AAAA,EAmBhD,YAAY,MAAqC;AAChD,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,UAAU,CAAC,OAAO,WAAW;AACjC,aAAO;AAAA,IACR;AAEA,WAAO,OAAO,UAAU,KAAK,CAAC,aAAa,SAAS,SAAS,IAAI;AAAA,EAClE;AAAA,EAEA,sBAAsB,iCAAiC,OAAiB;AACvE,UAAM,SAAS,KAAK,UAAU;AAC9B,QACC,CAAC,UACA,CAAC,MAAM,QAAQ,OAAO,cAAc,KACpC,CAAC,MAAM,QAAQ,OAAO,SAAS,GAC/B;AACD,aAAO,CAAC;AAAA,IACT,OAAO;AACN,YAAM,iBAA0C,CAAC;AACjD,UAAI,OAAO,gBAAgB;AAC1B,uBAAe;AAAA,UACd,GAAG,OAAO,eAAe;AAAA,YACxB,CAAC,QAAQ,OAAO,OAAO,IAAI,SAAS;AAAA,UACrC;AAAA,QACD;AAAA,MACD;AAEA,UAAI,gCAAgC;AACnC,eAAO,eAAe,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,MACxC;AAEA,UAAI,OAAO,WAAW;AACrB,uBAAe;AAAA,UACd,GAAG,OAAO,UAAU;AAAA,YACnB,CAAC,aACA,OAAO,SAAS,SAAS,YACzB,SAAS,kBACT,SAAS,eAAe;AAAA,UAC1B;AAAA,QACD;AAAA,MACD;AACA,aAAO,oBAAoB,cAAc,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,IAC7D;AAAA,EACD;AAAA,EAEA,iBAAiB,MAAmC;AAEnD,UAAM,SAAS,QAAQ,UAAU,KAAK,UAAU,CAAC;AACjD,QAAI,CAAC,UAAU,CAAC,OAAO,gBAAgB;AACtC,aAAO;AAAA,IACR;AACA,UAAM,gBAAgB,OAAO,eAAe;AAAA,MAC3C,CAACD,YAAWA,WAAUA,QAAO,SAAS;AAAA,IACvC;AACA,QAAI,eAAe;AAClB,UAAI,gBAAgB,YAAY;AAC/B,sBAAc,wBAAwB,oBAAoB;AAAA,MAC3D,WAAW,gBAAgB,iBAAiB;AAC3C,sBAAc,wBACb,oBAAoB;AAAA,MACtB,OAAO;AACN,sBAAc,wBACb,oBAAoB;AAAA,MACtB;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,+BACL,WACA,MACA,mBACA,OACkB;AAClB,QAAI,UAAU;AACd,UAAM,UAAU,OACb,KAAK,eAAe,mBAAmB,IAAI,IAC3C,MAAM,KAAK,eAAe,cAAc,IAAI;AAC/C,QAAI,SAAS;AACZ,YAAM,iBAAiB,oBACpB,MAAM,KAAK,qBAAqB;AAAA,QAChC;AAAA,QACA,QAAQ;AAAA,QACR,SAAS,kBAAkB;AAAA,MAC5B,IACC,CAAC;AACJ,gBACC,MAAM,QAAQ,+BAA+B,cAAc;AAAA,IAC7D;AACA,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,SAAkB;AACrB,WAAO;AAAA,EACR;AACD;AAEA,IAAM,SAAN,cAAqB,eAAkC;AAAA,EACtD,YACC,sBACA,gBACO,WACwB,aACI,iBACF,eAEhB,sBAChB;AACD,UAAM,sBAAsB,cAAc;AAPnC;AACwB;AACI;AACF;AAEhB;AAAA,EAGlB;AAAA,EA9+BD,OAk+BuD;AAAA;AAAA;AAAA,EActD,IAAI,MAAW;AACd,WAAO,UAAU,SAAS,KAAK,UAAU,KAAK,sBAAsB;AAAA,EACrE;AAAA,EAEA,IAAI,OAAe;AAClB,WAAO,KAAK,UAAU;AAAA,EACvB;AAAA,EAEU,YAAuC;AAChD,WAAO,KAAK,qBAAqB,QAAuB,UAAU;AAAA,MACjE,UAAU,KAAK,UAAU;AAAA,IAC1B,CAAC,EAAE;AAAA,EACJ;AAAA,EAEA,MAAM,eACL;AAAA,IACC;AAAA,IACA;AAAA,IACA;AAAA,EACD,GAKA,OAC4D;AAC5D,UAAM,WAAW,KAAK;AACtB,QAAI,UAAU;AACd,QAAI,UAAU;AACd,QAAI;AACH,YAAM,cAAc,MAAM,KAAK,YAAY,SAAS,QAAQ;AAC5D,gBAAU,YAAY,MAAM,SAAS;AAAA,IACtC,QAAQ;AAEP,gBAAU,MAAM,KAAK;AAAA,QACpB,KAAK,UAAU;AAAA,QACf;AAAA,QACA,CAAC;AAAA,QACD;AAAA,MACD;AACA,UAAI,CAAC,SAAS;AAEb,eAAO,EAAE,QAAQ,MAAM,SAAS,MAAM;AAAA,MACvC;AAEA,gBAAU;AACV,UAAI;AACH,cAAM,KAAK,gBAAgB,MAAM,UAAU,OAAO;AAAA,MACnD,SAAS,OAAO;AACf,cAAM,IAAI;AAAA,UACT,IAAI;AAAA,YACH;AAAA,YACA;AAAA,YACA,MAAM;AAAA,UACP;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,UAAM,QAAQ,QAAQ;AAAA,MACrB,IAAI,KAAK,qBAAqB,sBAAsB,IAAI;AAAA,IACzD;AACA,QAAI,kBAAkB;AACtB,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC/B,UAAI,QAAQ,OAAO,CAAC,MAAM,MAAM;AAC/B;AAAA,MACD;AAAA,IACD;AACA,UAAM,YACL,kBAAkB,IACf,EAAE,iBAAiB,aAAa,EAAE,IAClC;AAEJ,UAAM,SAAS,MAAM,KAAK,cAAc;AAAA,MACvC;AAAA,QACC;AAAA,QACA,SAAS;AAAA,UACR;AAAA,UACA;AAAA,UACA,QAAQ;AAAA,UACR,iBAAiB;AAAA,QAClB;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAEA,WAAO;AAAA,MACN,QAAQ,UAAU;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,mBAAmB,eAAuC;AAC/D,UAAM,aAAa,QAAQ,UAAU,KAAK,UAAU,CAAE;AACtD,QAAI,CAAC,WAAW,gBAAgB;AAC/B,iBAAW,iBAAiB,CAAC;AAAA,IAC9B;AACA,eAAW,eAAe,KAAK,aAAa;AAC5C,UAAM,KAAK,qBAAqB;AAAA,MAC/B;AAAA,MACA;AAAA,MACA,EAAE,UAAU,KAAK,UAAU,IAAI;AAAA,MAC/B,oBAAoB;AAAA,IACrB;AAAA,EACD;AACD;AAvHM,SAAN;AAAA,EAKG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GARG;AAyHN,IAAM,kBAAN,cAA8B,eAAkC;AAAA,EAC/D,YACC,sBACA,gBACiC,eAEhB,sBAEA,gBAChB;AACD,UAAM,sBAAsB,cAAc;AANT;AAEhB;AAEA;AAAA,EAGlB;AAAA,EAtmCD,OA2lCgE;AAAA;AAAA;AAAA,EAa/D,IAAI,YAAuB;AAC1B,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,MAAW;AACd,WAAO,KAAK,eAAe,aAAa,EAAE;AAAA,EAC3C;AAAA,EAEA,IAAI,OAAe;AAClB,WAAO,IAAI,SAAS,aAAa,WAAW;AAAA,EAC7C;AAAA,EAEU,YAAuC;AAChD,WAAO,KAAK,qBAAqB,QAAuB,QAAQ,EAC9D;AAAA,EACH;AAAA,EAEA,MAAM,eACL;AAAA,IACC;AAAA,IACA;AAAA,IACA;AAAA,EACD,GAKA,OAC4D;AAC5D,UAAM,oBAAoB,CAAC,CAAC,KAAK,UAAU;AAC3C,QAAI,CAAC,mBAAmB;AAEvB,YAAM,UAAU,MAAM,KAAK;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACA,UAAI,SAAS;AACZ,cAAM,KAAK,qBAAqB;AAAA,UAC/B;AAAA,UACA,KAAK,MAAM,OAAO;AAAA,UAClB,oBAAoB;AAAA,QACrB;AAAA,MACD,OAAO;AACN,eAAO,EAAE,QAAQ,MAAM,SAAS,MAAM;AAAA,MACvC;AAAA,IACD;AAEA,UAAM,SAAS,MAAM,KAAK,cAAc;AAAA,MACvC;AAAA,QACC,UAAU,KAAK,eAAe,aAAa,EAAE;AAAA,QAC7C,SAAS,EAAE,cAAc;AAAA,MAC1B;AAAA,MACA;AAAA,IACD;AAEA,WAAO;AAAA,MACN,QAAQ,UAAU;AAAA,MAClB,SAAS;AAAA,IACV;AAAA,EACD;AACD;AA3EM,kBAAN;AAAA,EAIG;AAAA,EACA;AAAA,EAEA;AAAA,GAPG;AA6EN,IAAM,aAAN,cAAyB,eAAkC;AAAA,EAC1D,YACC,sBACA,gBAEiB,sBAEA,oBAChB;AACD,UAAM,sBAAsB,cAAc;AAJzB;AAEA;AAAA,EAGlB;AAAA,EAlrCD,OAwqC2D;AAAA;AAAA;AAAA,EAY1D,IAAI,YAAuB;AAC1B,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,MAAW;AACd,WAAO,KAAK,mBAAmB;AAAA,EAChC;AAAA,EAEA,IAAI,OAAe;AAClB,WAAO,IAAI,SAAS,iBAAiB,eAAe;AAAA,EACrD;AAAA,EAEA,IAAa,SAAkB;AAC9B,WAAO;AAAA,EACR;AAAA,EAEU,YAAuC;AAChD,WAAO,KAAK,qBAAqB,QAAuB,QAAQ,EAC9D;AAAA,EACH;AAAA,EAEA,MAAM,eAAe;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,EACD,GAI8D;AAC7D,UAAM,SAAS,MAAM,KAAK,mBAAmB,iBAAiB;AAAA,MAC7D,YAAY;AAAA,MACZ;AAAA,MACA,eAAe,EAAE,KAAK,SAAS;AAAA,IAChC,CAAC;AACD,WAAO;AAAA,MACN,QAAQ,UAAU;AAAA,MAClB,SAAS;AAAA,IACV;AAAA,EACD;AACD;AApDM,aAAN;AAAA,EAIG;AAAA,EAEA;AAAA,GANG;",
  "names": ["type", "config", "dynamicConfig"]
}
