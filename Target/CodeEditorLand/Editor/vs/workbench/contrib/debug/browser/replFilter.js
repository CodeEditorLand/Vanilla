import{matchesFuzzy as f}from"../../../../base/common/filters.js";import{splitGlobAware as o}from"../../../../base/common/glob.js";import{TreeVisibility as p}from"../../../../base/browser/ui/tree/tree.js";import"../common/debug.js";import{ReplEvaluationResult as n,ReplEvaluationInput as c}from"../common/replModel.js";import{Variable as d}from"../common/debugModel.js";class i{static matchQuery=f;_parsedQueries=[];set filterQuery(t){if(this._parsedQueries=[],t=t.trim(),t&&t!==""){const r=o(t,",").map(e=>e.trim()).filter(e=>!!e.length);for(const e of r)e.startsWith("\\")?this._parsedQueries.push({type:"include",query:e.slice(1)}):e.startsWith("!")?this._parsedQueries.push({type:"exclude",query:e.slice(1)}):this._parsedQueries.push({type:"include",query:e})}}filter(t,r){if(t instanceof c||t instanceof n||t instanceof d)return p.Visible;let e=!1,s=!1;const l=t.toString(!0);for(const{type:u,query:a}of this._parsedQueries){if(u==="exclude"&&i.matchQuery(a,l))return!1;u==="include"&&(e=!0,i.matchQuery(a,l)&&(s=!0))}return e?s:typeof r<"u"?r:p.Visible}}export{i as ReplFilter};
