import{TreeVisibility as o}from"../../../../base/browser/ui/tree/tree.js";import{matchesFuzzy as a}from"../../../../base/common/filters.js";import{splitGlobAware as f}from"../../../../base/common/glob.js";import{Variable as n}from"../common/debugModel.js";import{ReplEvaluationInput as c,ReplEvaluationResult as m}from"../common/replModel.js";class i{static matchQuery=a;_parsedQueries=[];set filterQuery(t){if(this._parsedQueries=[],t=t.trim(),t&&t!==""){const r=f(t,",").map(e=>e.trim()).filter(e=>!!e.length);for(const e of r)e.startsWith("\\")?this._parsedQueries.push({type:"include",query:e.slice(1)}):e.startsWith("!")?this._parsedQueries.push({type:"exclude",query:e.slice(1)}):this._parsedQueries.push({type:"include",query:e})}}filter(t,r){if(t instanceof c||t instanceof m||t instanceof n)return o.Visible;let e=!1,s=!1;const l=t.toString(!0);for(const{type:u,query:p}of this._parsedQueries){if(u==="exclude"&&i.matchQuery(p,l))return!1;u==="include"&&(e=!0,i.matchQuery(p,l)&&(s=!0))}return e?s:typeof r<"u"?r:o.Visible}}export{i as ReplFilter};
