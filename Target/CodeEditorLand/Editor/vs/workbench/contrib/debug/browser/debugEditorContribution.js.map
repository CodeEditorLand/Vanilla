{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugEditorContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\taddDisposableListener,\n\tisKeyboardEvent,\n} from \"../../../../base/browser/dom.js\";\nimport { DomEmitter } from \"../../../../base/browser/event.js\";\nimport {\n\ttype IKeyboardEvent,\n\tStandardKeyboardEvent,\n} from \"../../../../base/browser/keyboardEvent.js\";\nimport type { IMouseEvent } from \"../../../../base/browser/mouseEvent.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { memoize } from \"../../../../base/common/decorators.js\";\nimport {\n\tillegalArgument,\n\tonUnexpectedExternalError,\n} from \"../../../../base/common/errors.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { visit } from \"../../../../base/common/json.js\";\nimport { setProperty } from \"../../../../base/common/jsonEdit.js\";\nimport { KeyCode } from \"../../../../base/common/keyCodes.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { clamp } from \"../../../../base/common/numbers.js\";\nimport { basename } from \"../../../../base/common/path.js\";\nimport * as env from \"../../../../base/common/platform.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { assertType, isDefined } from \"../../../../base/common/types.js\";\nimport { Constants } from \"../../../../base/common/uint.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { CoreEditingCommands } from \"../../../../editor/browser/coreCommands.js\";\nimport {\n\ttype ICodeEditor,\n\ttype IEditorMouseEvent,\n\ttype IPartialEditorMouseEvent,\n\tMouseTargetType,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorOption,\n\ttype IEditorHoverOptions,\n} from \"../../../../editor/common/config/editorOptions.js\";\nimport { EditOperation } from \"../../../../editor/common/core/editOperation.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { type IRange, Range } from \"../../../../editor/common/core/range.js\";\nimport { DEFAULT_WORD_REGEXP } from \"../../../../editor/common/core/wordHelper.js\";\nimport { ScrollType } from \"../../../../editor/common/editorCommon.js\";\nimport { StandardTokenType } from \"../../../../editor/common/encodedTokenAttributes.js\";\nimport type {\n\tInlineValue,\n\tInlineValueContext,\n} from \"../../../../editor/common/languages.js\";\nimport {\n\ttype IModelDeltaDecoration,\n\ttype ITextModel,\n\tInjectedTextCursorStops,\n} from \"../../../../editor/common/model.js\";\nimport {\n\ttype IFeatureDebounceInformation,\n\tILanguageFeatureDebounceService,\n} from \"../../../../editor/common/services/languageFeatureDebounce.js\";\nimport { ILanguageFeaturesService } from \"../../../../editor/common/services/languageFeatures.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { ContentHoverController } from \"../../../../editor/contrib/hover/browser/contentHoverController.js\";\nimport {\n\tHoverStartMode,\n\tHoverStartSource,\n} from \"../../../../editor/contrib/hover/browser/hoverOperation.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tCommandsRegistry,\n\tICommandService,\n} from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { registerColor } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type { FloatingEditorClickWidget } from \"../../../browser/codeeditor.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport {\n\tCONTEXT_EXCEPTION_WIDGET_VISIBLE,\n\ttype IDebugConfiguration,\n\ttype IDebugEditorContribution,\n\tIDebugService,\n\ttype IDebugSession,\n\ttype IExceptionInfo,\n\ttype IExpression,\n\ttype IStackFrame,\n\tState,\n} from \"../common/debug.js\";\nimport { Expression } from \"../common/debugModel.js\";\nimport { DebugHoverWidget, ShowDebugHoverResult } from \"./debugHover.js\";\nimport { ExceptionWidget } from \"./exceptionWidget.js\";\n\nconst MAX_NUM_INLINE_VALUES = 100; // JS Global scope can have 700+ entries. We want to limit ourselves for perf reasons\nconst MAX_INLINE_DECORATOR_LENGTH = 150; // Max string length of each inline decorator when debugging. If exceeded ... is added\nconst MAX_TOKENIZATION_LINE_LEN = 500; // If line is too long, then inline values for the line are skipped\n\nconst DEAFULT_INLINE_DEBOUNCE_DELAY = 200;\n\nexport const debugInlineForeground = registerColor(\n\t\"editor.inlineValuesForeground\",\n\t{\n\t\tdark: \"#ffffff80\",\n\t\tlight: \"#00000080\",\n\t\thcDark: \"#ffffff80\",\n\t\thcLight: \"#00000080\",\n\t},\n\tnls.localize(\n\t\t\"editor.inlineValuesForeground\",\n\t\t\"Color for the debug inline value text.\",\n\t),\n);\n\nexport const debugInlineBackground = registerColor(\n\t\"editor.inlineValuesBackground\",\n\t\"#ffc80033\",\n\tnls.localize(\n\t\t\"editor.inlineValuesBackground\",\n\t\t\"Color for the debug inline value background.\",\n\t),\n);\n\nclass InlineSegment {\n\tconstructor(\n\t\tpublic column: number,\n\t\tpublic text: string,\n\t) {}\n}\n\nfunction createInlineValueDecoration(\n\tlineNumber: number,\n\tcontentText: string,\n\tcolumn = Constants.MAX_SAFE_SMALL_INTEGER,\n): IModelDeltaDecoration[] {\n\t// If decoratorText is too long, trim and add ellipses. This could happen for minified files with everything on a single line\n\tif (contentText.length > MAX_INLINE_DECORATOR_LENGTH) {\n\t\tcontentText =\n\t\t\tcontentText.substring(0, MAX_INLINE_DECORATOR_LENGTH) + \"...\";\n\t}\n\n\treturn [\n\t\t{\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tstartColumn: column,\n\t\t\t\tendColumn: column,\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tdescription: \"debug-inline-value-decoration-spacer\",\n\t\t\t\tafter: {\n\t\t\t\t\tcontent: strings.noBreakWhitespace,\n\t\t\t\t\tcursorStops: InjectedTextCursorStops.None,\n\t\t\t\t},\n\t\t\t\tshowIfCollapsed: true,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tstartColumn: column,\n\t\t\t\tendColumn: column,\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tdescription: \"debug-inline-value-decoration\",\n\t\t\t\tafter: {\n\t\t\t\t\tcontent: replaceWsWithNoBreakWs(contentText),\n\t\t\t\t\tinlineClassName: \"debug-inline-value\",\n\t\t\t\t\tinlineClassNameAffectsLetterSpacing: true,\n\t\t\t\t\tcursorStops: InjectedTextCursorStops.None,\n\t\t\t\t},\n\t\t\t\tshowIfCollapsed: true,\n\t\t\t},\n\t\t},\n\t];\n}\n\nfunction replaceWsWithNoBreakWs(str: string): string {\n\treturn str.replace(/[ \\t]/g, strings.noBreakWhitespace);\n}\n\nfunction createInlineValueDecorationsInsideRange(\n\texpressions: ReadonlyArray<IExpression>,\n\tranges: Range[],\n\tmodel: ITextModel,\n\twordToLineNumbersMap: Map<string, number[]>,\n) {\n\tconst nameValueMap = new Map<string, string>();\n\tfor (const expr of expressions) {\n\t\tnameValueMap.set(expr.name, expr.value);\n\t\t// Limit the size of map. Too large can have a perf impact\n\t\tif (nameValueMap.size >= MAX_NUM_INLINE_VALUES) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst lineToNamesMap: Map<number, string[]> = new Map<number, string[]>();\n\n\t// Compute unique set of names on each line\n\tnameValueMap.forEach((_value, name) => {\n\t\tconst lineNumbers = wordToLineNumbersMap.get(name);\n\t\tif (lineNumbers) {\n\t\t\tfor (const lineNumber of lineNumbers) {\n\t\t\t\tif (\n\t\t\t\t\tranges.some(\n\t\t\t\t\t\t(r) =>\n\t\t\t\t\t\t\tlineNumber >= r.startLineNumber &&\n\t\t\t\t\t\t\tlineNumber <= r.endLineNumber,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (!lineToNamesMap.has(lineNumber)) {\n\t\t\t\t\t\tlineToNamesMap.set(lineNumber, []);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineToNamesMap.get(lineNumber)!.indexOf(name) === -1) {\n\t\t\t\t\t\tlineToNamesMap.get(lineNumber)!.push(name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Compute decorators for each line\n\treturn [...lineToNamesMap].map(([line, names]) => ({\n\t\tline,\n\t\tvariables: names\n\t\t\t.sort((first, second) => {\n\t\t\t\tconst content = model.getLineContent(line);\n\t\t\t\treturn content.indexOf(first) - content.indexOf(second);\n\t\t\t})\n\t\t\t.map((name) => ({ name, value: nameValueMap.get(name)! })),\n\t}));\n}\n\nfunction getWordToLineNumbersMap(\n\tmodel: ITextModel,\n\tlineNumber: number,\n\tresult: Map<string, number[]>,\n) {\n\tconst lineLength = model.getLineLength(lineNumber);\n\t// If line is too long then skip the line\n\tif (lineLength > MAX_TOKENIZATION_LINE_LEN) {\n\t\treturn;\n\t}\n\n\tconst lineContent = model.getLineContent(lineNumber);\n\tmodel.tokenization.forceTokenization(lineNumber);\n\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\tfor (\n\t\tlet tokenIndex = 0, tokenCount = lineTokens.getCount();\n\t\ttokenIndex < tokenCount;\n\t\ttokenIndex++\n\t) {\n\t\tconst tokenType = lineTokens.getStandardTokenType(tokenIndex);\n\n\t\t// Token is a word and not a comment\n\t\tif (tokenType === StandardTokenType.Other) {\n\t\t\tDEFAULT_WORD_REGEXP.lastIndex = 0; // We assume tokens will usually map 1:1 to words if they match\n\n\t\t\tconst tokenStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\tconst tokenEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\tconst tokenStr = lineContent.substring(\n\t\t\t\ttokenStartOffset,\n\t\t\t\ttokenEndOffset,\n\t\t\t);\n\t\t\tconst wordMatch = DEFAULT_WORD_REGEXP.exec(tokenStr);\n\n\t\t\tif (wordMatch) {\n\t\t\t\tconst word = wordMatch[0];\n\t\t\t\tif (!result.has(word)) {\n\t\t\t\t\tresult.set(word, []);\n\t\t\t\t}\n\n\t\t\t\tresult.get(word)!.push(lineNumber);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class DebugEditorContribution implements IDebugEditorContribution {\n\tprivate toDispose: IDisposable[];\n\tprivate hoverWidget: DebugHoverWidget;\n\tprivate hoverPosition?: { position: Position; event: IMouseEvent };\n\tprivate mouseDown = false;\n\tprivate exceptionWidgetVisible: IContextKey<boolean>;\n\tprivate gutterIsHovered = false;\n\n\tprivate exceptionWidget: ExceptionWidget | undefined;\n\tprivate configurationWidget: FloatingEditorClickWidget | undefined;\n\tprivate readonly altListener = new MutableDisposable();\n\tprivate altPressed = false;\n\tprivate oldDecorations = this.editor.createDecorationsCollection();\n\tprivate readonly displayedStore = new DisposableStore();\n\tprivate editorHoverOptions: IEditorHoverOptions | undefined;\n\tprivate readonly debounceInfo: IFeatureDebounceInformation;\n\n\t// Holds a Disposable that prevents the default editor hover behavior while it exists.\n\tprivate readonly defaultHoverLockout = new MutableDisposable();\n\n\tconstructor(\n\t\tprivate editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageFeatureDebounceService featureDebounceService: ILanguageFeatureDebounceService\n\t) {\n\t\tthis.debounceInfo = featureDebounceService.for(languageFeaturesService.inlineValuesProvider, 'InlineValues', { min: DEAFULT_INLINE_DEBOUNCE_DELAY });\n\t\tthis.hoverWidget = this.instantiationService.createInstance(DebugHoverWidget, this.editor);\n\t\tthis.toDispose = [this.defaultHoverLockout, this.altListener, this.displayedStore];\n\t\tthis.registerListeners();\n\t\tthis.exceptionWidgetVisible = CONTEXT_EXCEPTION_WIDGET_VISIBLE.bindTo(contextKeyService);\n\t\tthis.toggleExceptionWidget();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService\n\t\t\t\t.getViewModel()\n\t\t\t\t.onDidFocusStackFrame((e) =>\n\t\t\t\t\tthis.onFocusStackFrame(e.stackFrame),\n\t\t\t\t),\n\t\t);\n\n\t\t// hover listeners & hover widget\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onMouseDown((e: IEditorMouseEvent) =>\n\t\t\t\tthis.onEditorMouseDown(e),\n\t\t\t),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onMouseUp(() => (this.mouseDown = false)),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onMouseMove((e: IEditorMouseEvent) =>\n\t\t\t\tthis.onEditorMouseMove(e),\n\t\t\t),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onMouseLeave((e: IPartialEditorMouseEvent) => {\n\t\t\t\tconst hoverDomNode = this.hoverWidget.getDomNode();\n\t\t\t\tif (!hoverDomNode) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rect = hoverDomNode.getBoundingClientRect();\n\t\t\t\t// Only hide the hover widget if the editor mouse leave event is outside the hover widget #3528\n\t\t\t\tif (\n\t\t\t\t\te.event.posx < rect.left ||\n\t\t\t\t\te.event.posx > rect.right ||\n\t\t\t\t\te.event.posy < rect.top ||\n\t\t\t\t\te.event.posy > rect.bottom\n\t\t\t\t) {\n\t\t\t\t\tthis.hideHoverWidget();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onKeyDown((e: IKeyboardEvent) => this.onKeyDown(e)),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onDidChangeModelContent(() => {\n\t\t\t\tthis._wordToLineNumbersMap = undefined;\n\t\t\t\tthis.updateInlineValuesScheduler.schedule();\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService\n\t\t\t\t.getViewModel()\n\t\t\t\t.onWillUpdateViews(() =>\n\t\t\t\t\tthis.updateInlineValuesScheduler.schedule(),\n\t\t\t\t),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService\n\t\t\t\t.getViewModel()\n\t\t\t\t.onDidEvaluateLazyExpression(() =>\n\t\t\t\t\tthis.updateInlineValuesScheduler.schedule(),\n\t\t\t\t),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onDidChangeModel(async () => {\n\t\t\t\tthis.addDocumentListeners();\n\t\t\t\tthis.toggleExceptionWidget();\n\t\t\t\tthis.hideHoverWidget();\n\t\t\t\tthis._wordToLineNumbersMap = undefined;\n\t\t\t\tconst stackFrame =\n\t\t\t\t\tthis.debugService.getViewModel().focusedStackFrame;\n\t\t\t\tawait this.updateInlineValueDecorations(stackFrame);\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.editor.onDidScrollChange(() => {\n\t\t\t\tthis.hideHoverWidget();\n\n\t\t\t\t// Inline value provider should get called on view port change\n\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\tif (\n\t\t\t\t\tmodel &&\n\t\t\t\t\tthis.languageFeaturesService.inlineValuesProvider.has(model)\n\t\t\t\t) {\n\t\t\t\t\tthis.updateInlineValuesScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"editor.hover\")) {\n\t\t\t\t\tthis.updateHoverConfiguration();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.toDispose.push(\n\t\t\tthis.debugService.onDidChangeState((state: State) => {\n\t\t\t\tif (state !== State.Stopped) {\n\t\t\t\t\tthis.toggleExceptionWidget();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.updateHoverConfiguration();\n\t}\n\n\tprivate _wordToLineNumbersMap: WordsToLineNumbersCache | undefined;\n\n\tprivate updateHoverConfiguration(): void {\n\t\tconst model = this.editor.getModel();\n\t\tif (model) {\n\t\t\tthis.editorHoverOptions =\n\t\t\t\tthis.configurationService.getValue<IEditorHoverOptions>(\n\t\t\t\t\t\"editor.hover\",\n\t\t\t\t\t{\n\t\t\t\t\t\tresource: model.uri,\n\t\t\t\t\t\toverrideIdentifier: model.getLanguageId(),\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t}\n\t}\n\n\tprivate addDocumentListeners(): void {\n\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst model = this.editor.getModel();\n\t\tif (model) {\n\t\t\tthis.applyDocumentListeners(model, stackFrame);\n\t\t}\n\t}\n\n\tprivate applyDocumentListeners(\n\t\tmodel: ITextModel,\n\t\tstackFrame: IStackFrame | undefined,\n\t): void {\n\t\tif (\n\t\t\t!stackFrame ||\n\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\tmodel.uri,\n\t\t\t\tstackFrame.source.uri,\n\t\t\t)\n\t\t) {\n\t\t\tthis.altListener.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst ownerDocument = this.editor.getContainerDomNode().ownerDocument;\n\n\t\t// When the alt key is pressed show regular editor hover and hide the debug hover #84561\n\t\tthis.altListener.value = addDisposableListener(\n\t\t\townerDocument,\n\t\t\t\"keydown\",\n\t\t\t(keydownEvent) => {\n\t\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(\n\t\t\t\t\tkeydownEvent,\n\t\t\t\t);\n\t\t\t\tif (standardKeyboardEvent.keyCode === KeyCode.Alt) {\n\t\t\t\t\tthis.altPressed = true;\n\t\t\t\t\tconst debugHoverWasVisible = this.hoverWidget.isVisible();\n\t\t\t\t\tthis.hoverWidget.hide();\n\t\t\t\t\tthis.defaultHoverLockout.clear();\n\n\t\t\t\t\tif (debugHoverWasVisible && this.hoverPosition) {\n\t\t\t\t\t\t// If the debug hover was visible immediately show the editor hover for the alt transition to be smooth\n\t\t\t\t\t\tthis.showEditorHover(\n\t\t\t\t\t\t\tthis.hoverPosition.position,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst onKeyUp = new DomEmitter(ownerDocument, \"keyup\");\n\t\t\t\t\tconst listener = Event.any<KeyboardEvent | boolean>(\n\t\t\t\t\t\tthis.hostService.onDidChangeFocus,\n\t\t\t\t\t\tonKeyUp.event,\n\t\t\t\t\t)((keyupEvent) => {\n\t\t\t\t\t\tlet standardKeyboardEvent;\n\t\t\t\t\t\tif (isKeyboardEvent(keyupEvent)) {\n\t\t\t\t\t\t\tstandardKeyboardEvent = new StandardKeyboardEvent(\n\t\t\t\t\t\t\t\tkeyupEvent,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!standardKeyboardEvent ||\n\t\t\t\t\t\t\tstandardKeyboardEvent.keyCode === KeyCode.Alt\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.altPressed = false;\n\t\t\t\t\t\t\tthis.preventDefaultEditorHover();\n\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\tonKeyUp.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tasync showHover(\n\t\tposition: Position,\n\t\tfocus: boolean,\n\t\tmouseEvent?: IMouseEvent,\n\t): Promise<void> {\n\t\t// normally will already be set in `showHoverScheduler`, but public callers may hit this directly:\n\t\tthis.preventDefaultEditorHover();\n\n\t\tconst sf = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst model = this.editor.getModel();\n\t\tif (\n\t\t\tsf &&\n\t\t\tmodel &&\n\t\t\tthis.uriIdentityService.extUri.isEqual(sf.source.uri, model.uri)\n\t\t) {\n\t\t\tconst result = await this.hoverWidget.showAt(\n\t\t\t\tposition,\n\t\t\t\tfocus,\n\t\t\t\tmouseEvent,\n\t\t\t);\n\t\t\tif (result === ShowDebugHoverResult.NOT_AVAILABLE) {\n\t\t\t\t// When no expression available fallback to editor hover\n\t\t\t\tthis.showEditorHover(position, focus);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.showEditorHover(position, focus);\n\t\t}\n\t}\n\n\tprivate preventDefaultEditorHover() {\n\t\tif (\n\t\t\tthis.defaultHoverLockout.value ||\n\t\t\tthis.editorHoverOptions?.enabled === false\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hoverController =\n\t\t\tthis.editor.getContribution<ContentHoverController>(\n\t\t\t\tContentHoverController.ID,\n\t\t\t);\n\t\thoverController?.hideContentHover();\n\n\t\tthis.editor.updateOptions({ hover: { enabled: false } });\n\t\tthis.defaultHoverLockout.value = {\n\t\t\tdispose: () => {\n\t\t\t\tthis.editor.updateOptions({\n\t\t\t\t\thover: {\n\t\t\t\t\t\tenabled: this.editorHoverOptions?.enabled ?? true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate showEditorHover(position: Position, focus: boolean) {\n\t\tconst hoverController =\n\t\t\tthis.editor.getContribution<ContentHoverController>(\n\t\t\t\tContentHoverController.ID,\n\t\t\t);\n\t\tconst range = new Range(\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t\tposition.lineNumber,\n\t\t\tposition.column,\n\t\t);\n\t\t// enable the editor hover, otherwise the content controller will see it\n\t\t// as disabled and hide it on the first mouse move (#193149)\n\t\tthis.defaultHoverLockout.clear();\n\t\thoverController?.showContentHover(\n\t\t\trange,\n\t\t\tHoverStartMode.Immediate,\n\t\t\tHoverStartSource.Mouse,\n\t\t\tfocus,\n\t\t);\n\t}\n\n\tprivate async onFocusStackFrame(\n\t\tsf: IStackFrame | undefined,\n\t): Promise<void> {\n\t\tconst model = this.editor.getModel();\n\t\tif (model) {\n\t\t\tthis.applyDocumentListeners(model, sf);\n\t\t\tif (\n\t\t\t\tsf &&\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(sf.source.uri, model.uri)\n\t\t\t) {\n\t\t\t\tawait this.toggleExceptionWidget();\n\t\t\t} else {\n\t\t\t\tthis.hideHoverWidget();\n\t\t\t}\n\t\t}\n\n\t\tawait this.updateInlineValueDecorations(sf);\n\t}\n\n\tprivate get hoverDelay() {\n\t\tconst baseDelay = this.editorHoverOptions?.delay || 0;\n\n\t\t// heuristic to get a 'good' but configurable delay for evaluation. The\n\t\t// debug hover can be very large, so we tend to be more conservative about\n\t\t// when to show it (#180621). With this equation:\n\t\t// - default 300ms hover => * 2   = 600ms\n\t\t// - short   100ms hover => * 2   = 200ms\n\t\t// - longer  600ms hover => * 1.5 = 900ms\n\t\t// - long   1000ms hover => * 1.0 = 1000ms\n\t\tconst delayFactor = clamp(2 - (baseDelay - 300) / 600, 1, 2);\n\n\t\treturn baseDelay * delayFactor;\n\t}\n\n\t@memoize\n\tprivate get showHoverScheduler() {\n\t\tconst scheduler = new RunOnceScheduler(() => {\n\t\t\tif (this.hoverPosition && !this.altPressed) {\n\t\t\t\tthis.showHover(\n\t\t\t\t\tthis.hoverPosition.position,\n\t\t\t\t\tfalse,\n\t\t\t\t\tthis.hoverPosition.event,\n\t\t\t\t);\n\t\t\t}\n\t\t}, this.hoverDelay);\n\t\tthis.toDispose.push(scheduler);\n\n\t\treturn scheduler;\n\t}\n\n\tprivate hideHoverWidget(): void {\n\t\tif (this.hoverWidget.willBeVisible()) {\n\t\t\tthis.hoverWidget.hide();\n\t\t}\n\t\tthis.showHoverScheduler.cancel();\n\t\tthis.defaultHoverLockout.clear();\n\t}\n\n\t// hover business\n\n\tprivate onEditorMouseDown(mouseEvent: IEditorMouseEvent): void {\n\t\tthis.mouseDown = true;\n\t\tif (\n\t\t\tmouseEvent.target.type === MouseTargetType.CONTENT_WIDGET &&\n\t\t\tmouseEvent.target.detail === DebugHoverWidget.ID\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hideHoverWidget();\n\t}\n\n\tprivate onEditorMouseMove(mouseEvent: IEditorMouseEvent): void {\n\t\tif (this.debugService.state !== State.Stopped) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\t\tconst stopKey = env.isMacintosh ? \"metaKey\" : \"ctrlKey\";\n\n\t\tif (!this.altPressed) {\n\t\t\tif (target.type === MouseTargetType.GUTTER_GLYPH_MARGIN) {\n\t\t\t\tthis.defaultHoverLockout.clear();\n\t\t\t\tthis.gutterIsHovered = true;\n\t\t\t} else if (this.gutterIsHovered) {\n\t\t\t\tthis.gutterIsHovered = false;\n\t\t\t\tthis.updateHoverConfiguration();\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\ttarget.type === MouseTargetType.CONTENT_WIDGET &&\n\t\t\ttarget.detail === DebugHoverWidget.ID &&\n\t\t\t!(<any>mouseEvent.event)[stopKey]\n\t\t) {\n\t\t\t// mouse moved on top of debug hover widget\n\n\t\t\tconst sticky = this.editorHoverOptions?.sticky ?? true;\n\t\t\tif (sticky || this.hoverWidget.isShowingComplexValue) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (target.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\tif (\n\t\t\t\ttarget.position &&\n\t\t\t\t!Position.equals(\n\t\t\t\t\ttarget.position,\n\t\t\t\t\tthis.hoverPosition?.position || null,\n\t\t\t\t) &&\n\t\t\t\t!this.hoverWidget.isInSafeTriangle(\n\t\t\t\t\tmouseEvent.event.posx,\n\t\t\t\t\tmouseEvent.event.posy,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.hoverPosition = {\n\t\t\t\t\tposition: target.position,\n\t\t\t\t\tevent: mouseEvent.event,\n\t\t\t\t};\n\t\t\t\t// Disable the editor hover during the request to avoid flickering\n\t\t\t\tthis.preventDefaultEditorHover();\n\t\t\t\tthis.showHoverScheduler.schedule(this.hoverDelay);\n\t\t\t}\n\t\t} else if (!this.mouseDown) {\n\t\t\t// Do not hide debug hover when the mouse is pressed because it usually leads to accidental closing #64620\n\t\t\tthis.hideHoverWidget();\n\t\t}\n\t}\n\n\tprivate onKeyDown(e: IKeyboardEvent): void {\n\t\tconst stopKey = env.isMacintosh ? KeyCode.Meta : KeyCode.Ctrl;\n\t\tif (e.keyCode !== stopKey && e.keyCode !== KeyCode.Alt) {\n\t\t\t// do not hide hover when Ctrl/Meta is pressed, and alt is handled separately\n\t\t\tthis.hideHoverWidget();\n\t\t}\n\t}\n\t// end hover business\n\n\t// exception widget\n\tprivate async toggleExceptionWidget(): Promise<void> {\n\t\t// Toggles exception widget based on the state of the current editor model and debug stack frame\n\t\tconst model = this.editor.getModel();\n\t\tconst focusedSf = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst callStack = focusedSf ? focusedSf.thread.getCallStack() : null;\n\t\tif (!model || !focusedSf || !callStack || callStack.length === 0) {\n\t\t\tthis.closeExceptionWidget();\n\t\t\treturn;\n\t\t}\n\n\t\t// First call stack frame that is available is the frame where exception has been thrown\n\t\tconst exceptionSf = callStack.find(\n\t\t\t(sf) =>\n\t\t\t\t!!(\n\t\t\t\t\tsf &&\n\t\t\t\t\tsf.source &&\n\t\t\t\t\tsf.source.available &&\n\t\t\t\t\tsf.source.presentationHint !== \"deemphasize\"\n\t\t\t\t),\n\t\t);\n\t\tif (!exceptionSf || exceptionSf !== focusedSf) {\n\t\t\tthis.closeExceptionWidget();\n\t\t\treturn;\n\t\t}\n\n\t\tconst sameUri = this.uriIdentityService.extUri.isEqual(\n\t\t\texceptionSf.source.uri,\n\t\t\tmodel.uri,\n\t\t);\n\t\tif (this.exceptionWidget && !sameUri) {\n\t\t\tthis.closeExceptionWidget();\n\t\t} else if (sameUri) {\n\t\t\tconst exceptionInfo = await focusedSf.thread.exceptionInfo;\n\t\t\tif (exceptionInfo) {\n\t\t\t\tthis.showExceptionWidget(\n\t\t\t\t\texceptionInfo,\n\t\t\t\t\tthis.debugService.getViewModel().focusedSession,\n\t\t\t\t\texceptionSf.range.startLineNumber,\n\t\t\t\t\texceptionSf.range.startColumn,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showExceptionWidget(\n\t\texceptionInfo: IExceptionInfo,\n\t\tdebugSession: IDebugSession | undefined,\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t): void {\n\t\tif (this.exceptionWidget) {\n\t\t\tthis.exceptionWidget.dispose();\n\t\t}\n\n\t\tthis.exceptionWidget = this.instantiationService.createInstance(\n\t\t\tExceptionWidget,\n\t\t\tthis.editor,\n\t\t\texceptionInfo,\n\t\t\tdebugSession,\n\t\t);\n\t\tthis.exceptionWidget.show({ lineNumber, column }, 0);\n\t\tthis.exceptionWidget.focus();\n\t\tthis.editor.revealRangeInCenter({\n\t\t\tstartLineNumber: lineNumber,\n\t\t\tstartColumn: column,\n\t\t\tendLineNumber: lineNumber,\n\t\t\tendColumn: column,\n\t\t});\n\t\tthis.exceptionWidgetVisible.set(true);\n\t}\n\n\tcloseExceptionWidget(): void {\n\t\tif (this.exceptionWidget) {\n\t\t\tconst shouldFocusEditor = this.exceptionWidget.hasFocus();\n\t\t\tthis.exceptionWidget.dispose();\n\t\t\tthis.exceptionWidget = undefined;\n\t\t\tthis.exceptionWidgetVisible.set(false);\n\t\t\tif (shouldFocusEditor) {\n\t\t\t\tthis.editor.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync addLaunchConfiguration(): Promise<any> {\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet configurationsArrayPosition: Position | undefined;\n\t\tlet lastProperty: string;\n\n\t\tconst getConfigurationPosition = () => {\n\t\t\tlet depthInArray = 0;\n\t\t\tvisit(model.getValue(), {\n\t\t\t\tonObjectProperty: (property: string) => {\n\t\t\t\t\tlastProperty = property;\n\t\t\t\t},\n\t\t\t\tonArrayBegin: (offset: number) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastProperty === \"configurations\" &&\n\t\t\t\t\t\tdepthInArray === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tconfigurationsArrayPosition = model.getPositionAt(\n\t\t\t\t\t\t\toffset + 1,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tdepthInArray++;\n\t\t\t\t},\n\t\t\t\tonArrayEnd: () => {\n\t\t\t\t\tdepthInArray--;\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tgetConfigurationPosition();\n\n\t\tif (!configurationsArrayPosition) {\n\t\t\t// \"configurations\" array doesn't exist. Add it here.\n\t\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\t\tconst eol = model.getEOL();\n\t\t\tconst edit =\n\t\t\t\tbasename(model.uri.fsPath) === \"launch.json\"\n\t\t\t\t\t? setProperty(model.getValue(), [\"configurations\"], [], {\n\t\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\t\teol,\n\t\t\t\t\t\t})[0]\n\t\t\t\t\t: setProperty(\n\t\t\t\t\t\t\tmodel.getValue(),\n\t\t\t\t\t\t\t[\"launch\"],\n\t\t\t\t\t\t\t{ configurations: [] },\n\t\t\t\t\t\t\t{ tabSize, insertSpaces, eol },\n\t\t\t\t\t\t)[0];\n\t\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\t\tconst lineNumber = startPosition.lineNumber;\n\t\t\tconst range = new Range(\n\t\t\t\tlineNumber,\n\t\t\t\tstartPosition.column,\n\t\t\t\tlineNumber,\n\t\t\t\tmodel.getLineMaxColumn(lineNumber),\n\t\t\t);\n\t\t\tmodel.pushEditOperations(\n\t\t\t\tnull,\n\t\t\t\t[EditOperation.replace(range, edit.content)],\n\t\t\t\t() => null,\n\t\t\t);\n\t\t\t// Go through the file again since we've edited it\n\t\t\tgetConfigurationPosition();\n\t\t}\n\t\tif (!configurationsArrayPosition) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editor.focus();\n\n\t\tconst insertLine = (position: Position): Promise<any> => {\n\t\t\t// Check if there are more characters on a line after a \"configurations\": [, if yes enter a newline\n\t\t\tif (\n\t\t\t\tmodel.getLineLastNonWhitespaceColumn(position.lineNumber) >\n\t\t\t\tposition.column\n\t\t\t) {\n\t\t\t\tthis.editor.setPosition(position);\n\t\t\t\tCoreEditingCommands.LineBreakInsert.runEditorCommand(\n\t\t\t\t\tnull,\n\t\t\t\t\tthis.editor,\n\t\t\t\t\tnull,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.editor.setPosition(position);\n\t\t\treturn this.commandService.executeCommand(\n\t\t\t\t\"editor.action.insertLineAfter\",\n\t\t\t);\n\t\t};\n\n\t\tawait insertLine(configurationsArrayPosition);\n\t\tawait this.commandService.executeCommand(\n\t\t\t\"editor.action.triggerSuggest\",\n\t\t);\n\t}\n\n\t// Inline Decorations\n\n\t@memoize\n\tprivate get removeInlineValuesScheduler(): RunOnceScheduler {\n\t\treturn new RunOnceScheduler(() => {\n\t\t\tthis.displayedStore.clear();\n\t\t\tthis.oldDecorations.clear();\n\t\t}, 100);\n\t}\n\n\t@memoize\n\tprivate get updateInlineValuesScheduler(): RunOnceScheduler {\n\t\tconst model = this.editor.getModel();\n\t\treturn new RunOnceScheduler(\n\t\t\tasync () =>\n\t\t\t\tawait this.updateInlineValueDecorations(\n\t\t\t\t\tthis.debugService.getViewModel().focusedStackFrame,\n\t\t\t\t),\n\t\t\tmodel\n\t\t\t\t? this.debounceInfo.get(model)\n\t\t\t\t: DEAFULT_INLINE_DEBOUNCE_DELAY,\n\t\t);\n\t}\n\n\tprivate async updateInlineValueDecorations(\n\t\tstackFrame: IStackFrame | undefined,\n\t): Promise<void> {\n\t\tconst var_value_format = \"{0} = {1}\";\n\t\tconst separator = \", \";\n\n\t\tconst model = this.editor.getModel();\n\t\tconst inlineValuesSetting =\n\t\t\tthis.configurationService.getValue<IDebugConfiguration>(\n\t\t\t\t\"debug\",\n\t\t\t).inlineValues;\n\t\tconst inlineValuesTurnedOn =\n\t\t\tinlineValuesSetting === true ||\n\t\t\tinlineValuesSetting === \"on\" ||\n\t\t\t(inlineValuesSetting === \"auto\" &&\n\t\t\t\tmodel &&\n\t\t\t\tthis.languageFeaturesService.inlineValuesProvider.has(model));\n\t\tif (\n\t\t\t!inlineValuesTurnedOn ||\n\t\t\t!model ||\n\t\t\t!stackFrame ||\n\t\t\tmodel.uri.toString() !== stackFrame.source.uri.toString()\n\t\t) {\n\t\t\tif (!this.removeInlineValuesScheduler.isScheduled()) {\n\t\t\t\tthis.removeInlineValuesScheduler.schedule();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tthis.removeInlineValuesScheduler.cancel();\n\t\tthis.displayedStore.clear();\n\n\t\tconst viewRanges = this.editor.getVisibleRangesPlusViewportAboveBelow();\n\t\tlet allDecorations: IModelDeltaDecoration[];\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.displayedStore.add(toDisposable(() => cts.dispose(true)));\n\n\t\tif (this.languageFeaturesService.inlineValuesProvider.has(model)) {\n\t\t\tconst findVariable = async (\n\t\t\t\t_key: string,\n\t\t\t\tcaseSensitiveLookup: boolean,\n\t\t\t): Promise<string | undefined> => {\n\t\t\t\tconst scopes = await stackFrame.getMostSpecificScopes(\n\t\t\t\t\tstackFrame.range,\n\t\t\t\t);\n\t\t\t\tconst key = caseSensitiveLookup ? _key : _key.toLowerCase();\n\t\t\t\tfor (const scope of scopes) {\n\t\t\t\t\tconst variables = await scope.getChildren();\n\t\t\t\t\tconst found = variables.find((v) =>\n\t\t\t\t\t\tcaseSensitiveLookup\n\t\t\t\t\t\t\t? v.name === key\n\t\t\t\t\t\t\t: v.name.toLowerCase() === key,\n\t\t\t\t\t);\n\t\t\t\t\tif (found) {\n\t\t\t\t\t\treturn found.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t};\n\n\t\t\tconst ctx: InlineValueContext = {\n\t\t\t\tframeId: stackFrame.frameId,\n\t\t\t\tstoppedLocation: new Range(\n\t\t\t\t\tstackFrame.range.startLineNumber,\n\t\t\t\t\tstackFrame.range.startColumn + 1,\n\t\t\t\t\tstackFrame.range.endLineNumber,\n\t\t\t\t\tstackFrame.range.endColumn + 1,\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst providers = this.languageFeaturesService.inlineValuesProvider\n\t\t\t\t.ordered(model)\n\t\t\t\t.reverse();\n\n\t\t\tallDecorations = [];\n\t\t\tconst lineDecorations = new Map<number, InlineSegment[]>();\n\n\t\t\tconst promises = providers.flatMap((provider) =>\n\t\t\t\tviewRanges.map((range) =>\n\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\tprovider.provideInlineValues(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\trange,\n\t\t\t\t\t\t\tctx,\n\t\t\t\t\t\t\tcts.token,\n\t\t\t\t\t\t),\n\t\t\t\t\t).then(\n\t\t\t\t\t\tasync (result) => {\n\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\tfor (const iv of result) {\n\t\t\t\t\t\t\t\t\tlet text: string | undefined;\n\t\t\t\t\t\t\t\t\tswitch (iv.type) {\n\t\t\t\t\t\t\t\t\t\tcase \"text\":\n\t\t\t\t\t\t\t\t\t\t\ttext = iv.text;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase \"variable\": {\n\t\t\t\t\t\t\t\t\t\t\tlet va = iv.variableName;\n\t\t\t\t\t\t\t\t\t\t\tif (!va) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst lineContent =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodel.getLineContent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiv.range\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.startLineNumber,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tva = lineContent.substring(\n\t\t\t\t\t\t\t\t\t\t\t\t\tiv.range.startColumn - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tiv.range.endColumn - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tconst value = await findVariable(\n\t\t\t\t\t\t\t\t\t\t\t\tva,\n\t\t\t\t\t\t\t\t\t\t\t\tiv.caseSensitiveLookup,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\t\t\t\t\ttext = strings.format(\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar_value_format,\n\t\t\t\t\t\t\t\t\t\t\t\t\tva,\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcase \"expression\": {\n\t\t\t\t\t\t\t\t\t\t\tlet expr = iv.expression;\n\t\t\t\t\t\t\t\t\t\t\tif (!expr) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst lineContent =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodel.getLineContent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiv.range\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.startLineNumber,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\texpr = lineContent.substring(\n\t\t\t\t\t\t\t\t\t\t\t\t\tiv.range.startColumn - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tiv.range.endColumn - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif (expr) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst expression =\n\t\t\t\t\t\t\t\t\t\t\t\t\tnew Expression(expr);\n\t\t\t\t\t\t\t\t\t\t\t\tawait expression.evaluate(\n\t\t\t\t\t\t\t\t\t\t\t\t\tstackFrame.thread.session,\n\t\t\t\t\t\t\t\t\t\t\t\t\tstackFrame,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"watch\",\n\t\t\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tif (expression.available) {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext = strings.format(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar_value_format,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texpr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texpression.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (text) {\n\t\t\t\t\t\t\t\t\t\tconst line = iv.range.startLineNumber;\n\t\t\t\t\t\t\t\t\t\tlet lineSegments =\n\t\t\t\t\t\t\t\t\t\t\tlineDecorations.get(line);\n\t\t\t\t\t\t\t\t\t\tif (!lineSegments) {\n\t\t\t\t\t\t\t\t\t\t\tlineSegments = [];\n\t\t\t\t\t\t\t\t\t\t\tlineDecorations.set(\n\t\t\t\t\t\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t\t\t\t\t\t\tlineSegments,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t!lineSegments.some(\n\t\t\t\t\t\t\t\t\t\t\t\t(iv) => iv.text === text,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t// de-dupe\n\t\t\t\t\t\t\t\t\t\t\tlineSegments.push(\n\t\t\t\t\t\t\t\t\t\t\t\tnew InlineSegment(\n\t\t\t\t\t\t\t\t\t\t\t\t\tiv.range.startColumn,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst startTime = Date.now();\n\n\t\t\tawait Promise.all(promises);\n\n\t\t\t// update debounce info\n\t\t\tthis.updateInlineValuesScheduler.delay = this.debounceInfo.update(\n\t\t\t\tmodel,\n\t\t\t\tDate.now() - startTime,\n\t\t\t);\n\n\t\t\t// sort line segments and concatenate them into a decoration\n\n\t\t\tlineDecorations.forEach((segments, line) => {\n\t\t\t\tif (segments.length > 0) {\n\t\t\t\t\tsegments = segments.sort((a, b) => a.column - b.column);\n\t\t\t\t\tconst text = segments.map((s) => s.text).join(separator);\n\t\t\t\t\tallDecorations.push(\n\t\t\t\t\t\t...createInlineValueDecoration(line, text),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// old \"one-size-fits-all\" strategy\n\n\t\t\tconst scopes = await stackFrame.getMostSpecificScopes(\n\t\t\t\tstackFrame.range,\n\t\t\t);\n\t\t\tconst scopesWithVariables = await Promise.all(\n\t\t\t\tscopes.map(async (scope) => ({\n\t\t\t\t\tscope,\n\t\t\t\t\tvariables: await scope.getChildren(),\n\t\t\t\t})),\n\t\t\t);\n\n\t\t\t// Map of inline values per line that's populated in scope order, from\n\t\t\t// narrowest to widest. This is done to avoid duplicating values if\n\t\t\t// they appear in multiple scopes or are shadowed (#129770, #217326)\n\t\t\tconst valuesPerLine = new Map<\n\t\t\t\t/* line */ number,\n\t\t\t\tMap</* var */ string, /* value */ string>\n\t\t\t>();\n\n\t\t\tfor (const { scope, variables } of scopesWithVariables) {\n\t\t\t\tlet scopeRange = new Range(\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tstackFrame.range.startLineNumber,\n\t\t\t\t\tstackFrame.range.startColumn,\n\t\t\t\t);\n\t\t\t\tif (scope.range) {\n\t\t\t\t\tscopeRange = scopeRange.setStartPosition(\n\t\t\t\t\t\tscope.range.startLineNumber,\n\t\t\t\t\t\tscope.range.startColumn,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst ownRanges = viewRanges\n\t\t\t\t\t.map((r) => r.intersectRanges(scopeRange))\n\t\t\t\t\t.filter(isDefined);\n\t\t\t\tthis._wordToLineNumbersMap ??= new WordsToLineNumbersCache(\n\t\t\t\t\tmodel,\n\t\t\t\t);\n\t\t\t\tfor (const range of ownRanges) {\n\t\t\t\t\tthis._wordToLineNumbersMap.ensureRangePopulated(range);\n\t\t\t\t}\n\n\t\t\t\tconst mapped = createInlineValueDecorationsInsideRange(\n\t\t\t\t\tvariables,\n\t\t\t\t\townRanges,\n\t\t\t\t\tmodel,\n\t\t\t\t\tthis._wordToLineNumbersMap.value,\n\t\t\t\t);\n\t\t\t\tfor (const { line, variables } of mapped) {\n\t\t\t\t\tlet values = valuesPerLine.get(line);\n\t\t\t\t\tif (!values) {\n\t\t\t\t\t\tvalues = new Map<string, string>();\n\t\t\t\t\t\tvaluesPerLine.set(line, values);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const { name, value } of variables) {\n\t\t\t\t\t\tif (!values.has(name)) {\n\t\t\t\t\t\t\tvalues.set(name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tallDecorations = [...valuesPerLine.entries()].flatMap(\n\t\t\t\t([line, values]) =>\n\t\t\t\t\tcreateInlineValueDecoration(\n\t\t\t\t\t\tline,\n\t\t\t\t\t\t[...values].map(([n, v]) => `${n} = ${v}`).join(\", \"),\n\t\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (cts.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If word wrap is on, application of inline decorations may change the scroll position.\n\t\t// Ensure the cursor maintains its vertical position relative to the viewport when\n\t\t// we apply decorations.\n\t\tlet preservePosition: { position: Position; top: number } | undefined;\n\t\tif (this.editor.getOption(EditorOption.wordWrap) !== \"off\") {\n\t\t\tconst position = this.editor.getPosition();\n\t\t\tif (\n\t\t\t\tposition &&\n\t\t\t\tthis.editor\n\t\t\t\t\t.getVisibleRanges()\n\t\t\t\t\t.some((r) => r.containsPosition(position))\n\t\t\t) {\n\t\t\t\tpreservePosition = {\n\t\t\t\t\tposition,\n\t\t\t\t\ttop: this.editor.getTopForPosition(\n\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\tposition.column,\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis.oldDecorations.set(allDecorations);\n\n\t\tif (preservePosition) {\n\t\t\tconst top = this.editor.getTopForPosition(\n\t\t\t\tpreservePosition.position.lineNumber,\n\t\t\t\tpreservePosition.position.column,\n\t\t\t);\n\t\t\tthis.editor.setScrollTop(\n\t\t\t\tthis.editor.getScrollTop() - (preservePosition.top - top),\n\t\t\t\tScrollType.Immediate,\n\t\t\t);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tif (this.hoverWidget) {\n\t\t\tthis.hoverWidget.dispose();\n\t\t}\n\t\tif (this.configurationWidget) {\n\t\t\tthis.configurationWidget.dispose();\n\t\t}\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nclass WordsToLineNumbersCache {\n\t// we use this as an array of bits where each 1 bit is a line number that's been parsed\n\tprivate readonly intervals: Uint8Array;\n\tpublic readonly value = new Map<string, number[]>();\n\n\tconstructor(private readonly model: ITextModel) {\n\t\tthis.intervals = new Uint8Array(Math.ceil(model.getLineCount() / 8));\n\t}\n\n\t/** Ensures that variables names in the given range have been identified. */\n\tpublic ensureRangePopulated(range: Range) {\n\t\tfor (\n\t\t\tlet lineNumber = range.startLineNumber;\n\t\t\tlineNumber <= range.endLineNumber;\n\t\t\tlineNumber++\n\t\t) {\n\t\t\tconst bin = lineNumber >> 3; /* Math.floor(i / 8) */\n\t\t\tconst bit = 1 << (lineNumber & 0b111); /* 1 << (i % 8) */\n\t\t\tif (!(this.intervals[bin] & bit)) {\n\t\t\t\tgetWordToLineNumbersMap(this.model, lineNumber, this.value);\n\t\t\t\tthis.intervals[bin] |= bit;\n\t\t\t}\n\t\t}\n\t}\n}\n\nCommandsRegistry.registerCommand(\n\t\"_executeInlineValueProvider\",\n\tasync (\n\t\taccessor: ServicesAccessor,\n\t\turi: URI,\n\t\tiRange: IRange,\n\t\tcontext: InlineValueContext,\n\t): Promise<InlineValue[] | null> => {\n\t\tassertType(URI.isUri(uri));\n\t\tassertType(Range.isIRange(iRange));\n\n\t\tif (\n\t\t\t!context ||\n\t\t\ttypeof context.frameId !== \"number\" ||\n\t\t\t!Range.isIRange(context.stoppedLocation)\n\t\t) {\n\t\t\tthrow illegalArgument(\"context\");\n\t\t}\n\n\t\tconst model = accessor.get(IModelService).getModel(uri);\n\t\tif (!model) {\n\t\t\tthrow illegalArgument(\"uri\");\n\t\t}\n\n\t\tconst range = Range.lift(iRange);\n\t\tconst { inlineValuesProvider } = accessor.get(ILanguageFeaturesService);\n\t\tconst providers = inlineValuesProvider.ordered(model);\n\t\tconst providerResults = await Promise.all(\n\t\t\tproviders.map((provider) =>\n\t\t\t\tprovider.provideInlineValues(\n\t\t\t\t\tmodel,\n\t\t\t\t\trange,\n\t\t\t\t\tcontext,\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\treturn providerResults.flat().filter(isDefined);\n\t},\n);\n"],
  "mappings": "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",
  "names": ["standardKeyboardEvent", "iv", "variables"]
}
