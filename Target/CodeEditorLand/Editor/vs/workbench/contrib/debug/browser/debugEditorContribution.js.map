{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugEditorContribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, isKeyboardEvent } from '../../../../base/browser/dom.js';\nimport { DomEmitter } from '../../../../base/browser/event.js';\nimport { IKeyboardEvent, StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { IMouseEvent } from '../../../../base/browser/mouseEvent.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { illegalArgument, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { visit } from '../../../../base/common/json.js';\nimport { setProperty } from '../../../../base/common/jsonEdit.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore, IDisposable, MutableDisposable, dispose, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { clamp } from '../../../../base/common/numbers.js';\nimport { basename } from '../../../../base/common/path.js';\nimport * as env from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { assertType, isDefined } from '../../../../base/common/types.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { CoreEditingCommands } from '../../../../editor/browser/coreCommands.js';\nimport { ICodeEditor, IEditorMouseEvent, IPartialEditorMouseEvent, MouseTargetType } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorOption, IEditorHoverOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { EditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { IRange, Range } from '../../../../editor/common/core/range.js';\nimport { DEFAULT_WORD_REGEXP } from '../../../../editor/common/core/wordHelper.js';\nimport { ScrollType } from '../../../../editor/common/editorCommon.js';\nimport { StandardTokenType } from '../../../../editor/common/encodedTokenAttributes.js';\nimport { InlineValue, InlineValueContext } from '../../../../editor/common/languages.js';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops } from '../../../../editor/common/model.js';\nimport { IFeatureDebounceInformation, ILanguageFeatureDebounceService } from '../../../../editor/common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ContentHoverController } from '../../../../editor/contrib/hover/browser/contentHoverController.js';\nimport { HoverStartMode, HoverStartSource } from '../../../../editor/contrib/hover/browser/hoverOperation.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { registerColor } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { FloatingEditorClickWidget } from '../../../browser/codeeditor.js';\nimport { DebugHoverWidget, ShowDebugHoverResult } from './debugHover.js';\nimport { ExceptionWidget } from './exceptionWidget.js';\nimport { CONTEXT_EXCEPTION_WIDGET_VISIBLE, IDebugConfiguration, IDebugEditorContribution, IDebugService, IDebugSession, IExceptionInfo, IExpression, IStackFrame, State } from '../common/debug.js';\nimport { Expression } from '../common/debugModel.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\n\nconst MAX_NUM_INLINE_VALUES = 100; // JS Global scope can have 700+ entries. We want to limit ourselves for perf reasons\nconst MAX_INLINE_DECORATOR_LENGTH = 150; // Max string length of each inline decorator when debugging. If exceeded ... is added\nconst MAX_TOKENIZATION_LINE_LEN = 500; // If line is too long, then inline values for the line are skipped\n\nconst DEAFULT_INLINE_DEBOUNCE_DELAY = 200;\n\nexport const debugInlineForeground = registerColor('editor.inlineValuesForeground', {\n\tdark: '#ffffff80',\n\tlight: '#00000080',\n\thcDark: '#ffffff80',\n\thcLight: '#00000080'\n}, nls.localize('editor.inlineValuesForeground', \"Color for the debug inline value text.\"));\n\nexport const debugInlineBackground = registerColor('editor.inlineValuesBackground', '#ffc80033', nls.localize('editor.inlineValuesBackground', \"Color for the debug inline value background.\"));\n\nclass InlineSegment {\n\tconstructor(public column: number, public text: string) {\n\t}\n}\n\nfunction createInlineValueDecoration(lineNumber: number, contentText: string, column = Constants.MAX_SAFE_SMALL_INTEGER): IModelDeltaDecoration[] {\n\t// If decoratorText is too long, trim and add ellipses. This could happen for minified files with everything on a single line\n\tif (contentText.length > MAX_INLINE_DECORATOR_LENGTH) {\n\t\tcontentText = contentText.substring(0, MAX_INLINE_DECORATOR_LENGTH) + '...';\n\t}\n\n\treturn [\n\t\t{\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tstartColumn: column,\n\t\t\t\tendColumn: column\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tdescription: 'debug-inline-value-decoration-spacer',\n\t\t\t\tafter: {\n\t\t\t\t\tcontent: strings.noBreakWhitespace,\n\t\t\t\t\tcursorStops: InjectedTextCursorStops.None\n\t\t\t\t},\n\t\t\t\tshowIfCollapsed: true,\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\trange: {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\tstartColumn: column,\n\t\t\t\tendColumn: column\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tdescription: 'debug-inline-value-decoration',\n\t\t\t\tafter: {\n\t\t\t\t\tcontent: replaceWsWithNoBreakWs(contentText),\n\t\t\t\t\tinlineClassName: 'debug-inline-value',\n\t\t\t\t\tinlineClassNameAffectsLetterSpacing: true,\n\t\t\t\t\tcursorStops: InjectedTextCursorStops.None\n\t\t\t\t},\n\t\t\t\tshowIfCollapsed: true,\n\t\t\t}\n\t\t},\n\t];\n}\n\nfunction replaceWsWithNoBreakWs(str: string): string {\n\treturn str.replace(/[ \\t]/g, strings.noBreakWhitespace);\n}\n\nfunction createInlineValueDecorationsInsideRange(expressions: ReadonlyArray<IExpression>, ranges: Range[], model: ITextModel, wordToLineNumbersMap: Map<string, number[]>) {\n\tconst nameValueMap = new Map<string, string>();\n\tfor (const expr of expressions) {\n\t\tnameValueMap.set(expr.name, expr.value);\n\t\t// Limit the size of map. Too large can have a perf impact\n\t\tif (nameValueMap.size >= MAX_NUM_INLINE_VALUES) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst lineToNamesMap: Map<number, string[]> = new Map<number, string[]>();\n\n\t// Compute unique set of names on each line\n\tnameValueMap.forEach((_value, name) => {\n\t\tconst lineNumbers = wordToLineNumbersMap.get(name);\n\t\tif (lineNumbers) {\n\t\t\tfor (const lineNumber of lineNumbers) {\n\t\t\t\tif (ranges.some(r => lineNumber >= r.startLineNumber && lineNumber <= r.endLineNumber)) {\n\t\t\t\t\tif (!lineToNamesMap.has(lineNumber)) {\n\t\t\t\t\t\tlineToNamesMap.set(lineNumber, []);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineToNamesMap.get(lineNumber)!.indexOf(name) === -1) {\n\t\t\t\t\t\tlineToNamesMap.get(lineNumber)!.push(name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Compute decorators for each line\n\treturn [...lineToNamesMap].map(([line, names]) => ({\n\t\tline,\n\t\tvariables: names.sort((first, second) => {\n\t\t\tconst content = model.getLineContent(line);\n\t\t\treturn content.indexOf(first) - content.indexOf(second);\n\t\t}).map(name => ({ name, value: nameValueMap.get(name)! }))\n\t}));\n}\n\nfunction getWordToLineNumbersMap(model: ITextModel, lineNumber: number, result: Map<string, number[]>) {\n\tconst lineLength = model.getLineLength(lineNumber);\n\t// If line is too long then skip the line\n\tif (lineLength > MAX_TOKENIZATION_LINE_LEN) {\n\t\treturn;\n\t}\n\n\tconst lineContent = model.getLineContent(lineNumber);\n\tmodel.tokenization.forceTokenization(lineNumber);\n\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\tfor (let tokenIndex = 0, tokenCount = lineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n\t\tconst tokenType = lineTokens.getStandardTokenType(tokenIndex);\n\n\t\t// Token is a word and not a comment\n\t\tif (tokenType === StandardTokenType.Other) {\n\t\t\tDEFAULT_WORD_REGEXP.lastIndex = 0; // We assume tokens will usually map 1:1 to words if they match\n\n\t\t\tconst tokenStartOffset = lineTokens.getStartOffset(tokenIndex);\n\t\t\tconst tokenEndOffset = lineTokens.getEndOffset(tokenIndex);\n\t\t\tconst tokenStr = lineContent.substring(tokenStartOffset, tokenEndOffset);\n\t\t\tconst wordMatch = DEFAULT_WORD_REGEXP.exec(tokenStr);\n\n\t\t\tif (wordMatch) {\n\n\t\t\t\tconst word = wordMatch[0];\n\t\t\t\tif (!result.has(word)) {\n\t\t\t\t\tresult.set(word, []);\n\t\t\t\t}\n\n\t\t\t\tresult.get(word)!.push(lineNumber);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class DebugEditorContribution implements IDebugEditorContribution {\n\n\tprivate toDispose: IDisposable[];\n\tprivate hoverWidget: DebugHoverWidget;\n\tprivate hoverPosition?: { position: Position; event: IMouseEvent };\n\tprivate mouseDown = false;\n\tprivate exceptionWidgetVisible: IContextKey<boolean>;\n\tprivate gutterIsHovered = false;\n\n\tprivate exceptionWidget: ExceptionWidget | undefined;\n\tprivate configurationWidget: FloatingEditorClickWidget | undefined;\n\tprivate readonly altListener = new MutableDisposable();\n\tprivate altPressed = false;\n\tprivate oldDecorations = this.editor.createDecorationsCollection();\n\tprivate readonly displayedStore = new DisposableStore();\n\tprivate editorHoverOptions: IEditorHoverOptions | undefined;\n\tprivate readonly debounceInfo: IFeatureDebounceInformation;\n\n\t// Holds a Disposable that prevents the default editor hover behavior while it exists.\n\tprivate readonly defaultHoverLockout = new MutableDisposable();\n\n\tconstructor(\n\t\tprivate editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageFeatureDebounceService featureDebounceService: ILanguageFeatureDebounceService\n\t) {\n\t\tthis.debounceInfo = featureDebounceService.for(languageFeaturesService.inlineValuesProvider, 'InlineValues', { min: DEAFULT_INLINE_DEBOUNCE_DELAY });\n\t\tthis.hoverWidget = this.instantiationService.createInstance(DebugHoverWidget, this.editor);\n\t\tthis.toDispose = [this.defaultHoverLockout, this.altListener, this.displayedStore];\n\t\tthis.registerListeners();\n\t\tthis.exceptionWidgetVisible = CONTEXT_EXCEPTION_WIDGET_VISIBLE.bindTo(contextKeyService);\n\t\tthis.toggleExceptionWidget();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(this.debugService.getViewModel().onDidFocusStackFrame(e => this.onFocusStackFrame(e.stackFrame)));\n\n\t\t// hover listeners & hover widget\n\t\tthis.toDispose.push(this.editor.onMouseDown((e: IEditorMouseEvent) => this.onEditorMouseDown(e)));\n\t\tthis.toDispose.push(this.editor.onMouseUp(() => this.mouseDown = false));\n\t\tthis.toDispose.push(this.editor.onMouseMove((e: IEditorMouseEvent) => this.onEditorMouseMove(e)));\n\t\tthis.toDispose.push(this.editor.onMouseLeave((e: IPartialEditorMouseEvent) => {\n\t\t\tconst hoverDomNode = this.hoverWidget.getDomNode();\n\t\t\tif (!hoverDomNode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rect = hoverDomNode.getBoundingClientRect();\n\t\t\t// Only hide the hover widget if the editor mouse leave event is outside the hover widget #3528\n\t\t\tif (e.event.posx < rect.left || e.event.posx > rect.right || e.event.posy < rect.top || e.event.posy > rect.bottom) {\n\t\t\t\tthis.hideHoverWidget();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.editor.onKeyDown((e: IKeyboardEvent) => this.onKeyDown(e)));\n\t\tthis.toDispose.push(this.editor.onDidChangeModelContent(() => {\n\t\t\tthis._wordToLineNumbersMap = undefined;\n\t\t\tthis.updateInlineValuesScheduler.schedule();\n\t\t}));\n\t\tthis.toDispose.push(this.debugService.getViewModel().onWillUpdateViews(() => this.updateInlineValuesScheduler.schedule()));\n\t\tthis.toDispose.push(this.debugService.getViewModel().onDidEvaluateLazyExpression(() => this.updateInlineValuesScheduler.schedule()));\n\t\tthis.toDispose.push(this.editor.onDidChangeModel(async () => {\n\t\t\tthis.addDocumentListeners();\n\t\t\tthis.toggleExceptionWidget();\n\t\t\tthis.hideHoverWidget();\n\t\t\tthis._wordToLineNumbersMap = undefined;\n\t\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\tawait this.updateInlineValueDecorations(stackFrame);\n\t\t}));\n\t\tthis.toDispose.push(this.editor.onDidScrollChange(() => {\n\t\t\tthis.hideHoverWidget();\n\n\t\t\t// Inline value provider should get called on view port change\n\t\t\tconst model = this.editor.getModel();\n\t\t\tif (model && this.languageFeaturesService.inlineValuesProvider.has(model)) {\n\t\t\t\tthis.updateInlineValuesScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration('editor.hover')) {\n\t\t\t\tthis.updateHoverConfiguration();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.debugService.onDidChangeState((state: State) => {\n\t\t\tif (state !== State.Stopped) {\n\t\t\t\tthis.toggleExceptionWidget();\n\t\t\t}\n\t\t}));\n\n\t\tthis.updateHoverConfiguration();\n\t}\n\n\tprivate _wordToLineNumbersMap: WordsToLineNumbersCache | undefined;\n\n\tprivate updateHoverConfiguration(): void {\n\t\tconst model = this.editor.getModel();\n\t\tif (model) {\n\t\t\tthis.editorHoverOptions = this.configurationService.getValue<IEditorHoverOptions>('editor.hover', {\n\t\t\t\tresource: model.uri,\n\t\t\t\toverrideIdentifier: model.getLanguageId()\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate addDocumentListeners(): void {\n\t\tconst stackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst model = this.editor.getModel();\n\t\tif (model) {\n\t\t\tthis.applyDocumentListeners(model, stackFrame);\n\t\t}\n\t}\n\n\tprivate applyDocumentListeners(model: ITextModel, stackFrame: IStackFrame | undefined): void {\n\t\tif (!stackFrame || !this.uriIdentityService.extUri.isEqual(model.uri, stackFrame.source.uri)) {\n\t\t\tthis.altListener.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst ownerDocument = this.editor.getContainerDomNode().ownerDocument;\n\n\t\t// When the alt key is pressed show regular editor hover and hide the debug hover #84561\n\t\tthis.altListener.value = addDisposableListener(ownerDocument, 'keydown', keydownEvent => {\n\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(keydownEvent);\n\t\t\tif (standardKeyboardEvent.keyCode === KeyCode.Alt) {\n\t\t\t\tthis.altPressed = true;\n\t\t\t\tconst debugHoverWasVisible = this.hoverWidget.isVisible();\n\t\t\t\tthis.hoverWidget.hide();\n\t\t\t\tthis.defaultHoverLockout.clear();\n\n\t\t\t\tif (debugHoverWasVisible && this.hoverPosition) {\n\t\t\t\t\t// If the debug hover was visible immediately show the editor hover for the alt transition to be smooth\n\t\t\t\t\tthis.showEditorHover(this.hoverPosition.position, false);\n\t\t\t\t}\n\n\t\t\t\tconst onKeyUp = new DomEmitter(ownerDocument, 'keyup');\n\t\t\t\tconst listener = Event.any<KeyboardEvent | boolean>(this.hostService.onDidChangeFocus, onKeyUp.event)(keyupEvent => {\n\t\t\t\t\tlet standardKeyboardEvent = undefined;\n\t\t\t\t\tif (isKeyboardEvent(keyupEvent)) {\n\t\t\t\t\t\tstandardKeyboardEvent = new StandardKeyboardEvent(keyupEvent);\n\t\t\t\t\t}\n\t\t\t\t\tif (!standardKeyboardEvent || standardKeyboardEvent.keyCode === KeyCode.Alt) {\n\t\t\t\t\t\tthis.altPressed = false;\n\t\t\t\t\t\tthis.preventDefaultEditorHover();\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\tonKeyUp.dispose();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tasync showHover(position: Position, focus: boolean, mouseEvent?: IMouseEvent): Promise<void> {\n\t\t// normally will already be set in `showHoverScheduler`, but public callers may hit this directly:\n\t\tthis.preventDefaultEditorHover();\n\n\t\tconst sf = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst model = this.editor.getModel();\n\t\tif (sf && model && this.uriIdentityService.extUri.isEqual(sf.source.uri, model.uri)) {\n\t\t\tconst result = await this.hoverWidget.showAt(position, focus, mouseEvent);\n\t\t\tif (result === ShowDebugHoverResult.NOT_AVAILABLE) {\n\t\t\t\t// When no expression available fallback to editor hover\n\t\t\t\tthis.showEditorHover(position, focus);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.showEditorHover(position, focus);\n\t\t}\n\t}\n\n\tprivate preventDefaultEditorHover() {\n\t\tif (this.defaultHoverLockout.value || this.editorHoverOptions?.enabled === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hoverController = this.editor.getContribution<ContentHoverController>(ContentHoverController.ID);\n\t\thoverController?.hideContentHover();\n\n\t\tthis.editor.updateOptions({ hover: { enabled: false } });\n\t\tthis.defaultHoverLockout.value = {\n\t\t\tdispose: () => {\n\t\t\t\tthis.editor.updateOptions({\n\t\t\t\t\thover: { enabled: this.editorHoverOptions?.enabled ?? true }\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate showEditorHover(position: Position, focus: boolean) {\n\t\tconst hoverController = this.editor.getContribution<ContentHoverController>(ContentHoverController.ID);\n\t\tconst range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n\t\t// enable the editor hover, otherwise the content controller will see it\n\t\t// as disabled and hide it on the first mouse move (#193149)\n\t\tthis.defaultHoverLockout.clear();\n\t\thoverController?.showContentHover(range, HoverStartMode.Immediate, HoverStartSource.Mouse, focus);\n\t}\n\n\tprivate async onFocusStackFrame(sf: IStackFrame | undefined): Promise<void> {\n\t\tconst model = this.editor.getModel();\n\t\tif (model) {\n\t\t\tthis.applyDocumentListeners(model, sf);\n\t\t\tif (sf && this.uriIdentityService.extUri.isEqual(sf.source.uri, model.uri)) {\n\t\t\t\tawait this.toggleExceptionWidget();\n\t\t\t} else {\n\t\t\t\tthis.hideHoverWidget();\n\t\t\t}\n\t\t}\n\n\t\tawait this.updateInlineValueDecorations(sf);\n\t}\n\n\tprivate get hoverDelay() {\n\t\tconst baseDelay = this.editorHoverOptions?.delay || 0;\n\n\t\t// heuristic to get a 'good' but configurable delay for evaluation. The\n\t\t// debug hover can be very large, so we tend to be more conservative about\n\t\t// when to show it (#180621). With this equation:\n\t\t// - default 300ms hover => * 2   = 600ms\n\t\t// - short   100ms hover => * 2   = 200ms\n\t\t// - longer  600ms hover => * 1.5 = 900ms\n\t\t// - long   1000ms hover => * 1.0 = 1000ms\n\t\tconst delayFactor = clamp(2 - (baseDelay - 300) / 600, 1, 2);\n\n\t\treturn baseDelay * delayFactor;\n\t}\n\n\t@memoize\n\tprivate get showHoverScheduler() {\n\t\tconst scheduler = new RunOnceScheduler(() => {\n\t\t\tif (this.hoverPosition && !this.altPressed) {\n\t\t\t\tthis.showHover(this.hoverPosition.position, false, this.hoverPosition.event);\n\t\t\t}\n\t\t}, this.hoverDelay);\n\t\tthis.toDispose.push(scheduler);\n\n\t\treturn scheduler;\n\t}\n\n\tprivate hideHoverWidget(): void {\n\t\tif (this.hoverWidget.willBeVisible()) {\n\t\t\tthis.hoverWidget.hide();\n\t\t}\n\t\tthis.showHoverScheduler.cancel();\n\t\tthis.defaultHoverLockout.clear();\n\t}\n\n\t// hover business\n\n\tprivate onEditorMouseDown(mouseEvent: IEditorMouseEvent): void {\n\t\tthis.mouseDown = true;\n\t\tif (mouseEvent.target.type === MouseTargetType.CONTENT_WIDGET && mouseEvent.target.detail === DebugHoverWidget.ID) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hideHoverWidget();\n\t}\n\n\tprivate onEditorMouseMove(mouseEvent: IEditorMouseEvent): void {\n\t\tif (this.debugService.state !== State.Stopped) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\t\tconst stopKey = env.isMacintosh ? 'metaKey' : 'ctrlKey';\n\n\t\tif (!this.altPressed) {\n\t\t\tif (target.type === MouseTargetType.GUTTER_GLYPH_MARGIN) {\n\t\t\t\tthis.defaultHoverLockout.clear();\n\t\t\t\tthis.gutterIsHovered = true;\n\t\t\t} else if (this.gutterIsHovered) {\n\t\t\t\tthis.gutterIsHovered = false;\n\t\t\t\tthis.updateHoverConfiguration();\n\t\t\t}\n\t\t}\n\n\t\tif (target.type === MouseTargetType.CONTENT_WIDGET && target.detail === DebugHoverWidget.ID && !(<any>mouseEvent.event)[stopKey]) {\n\t\t\t// mouse moved on top of debug hover widget\n\n\t\t\tconst sticky = this.editorHoverOptions?.sticky ?? true;\n\t\t\tif (sticky || this.hoverWidget.isShowingComplexValue) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (target.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\tif (target.position && !Position.equals(target.position, this.hoverPosition?.position || null) && !this.hoverWidget.isInSafeTriangle(mouseEvent.event.posx, mouseEvent.event.posy)) {\n\t\t\t\tthis.hoverPosition = { position: target.position, event: mouseEvent.event };\n\t\t\t\t// Disable the editor hover during the request to avoid flickering\n\t\t\t\tthis.preventDefaultEditorHover();\n\t\t\t\tthis.showHoverScheduler.schedule(this.hoverDelay);\n\t\t\t}\n\t\t} else if (!this.mouseDown) {\n\t\t\t// Do not hide debug hover when the mouse is pressed because it usually leads to accidental closing #64620\n\t\t\tthis.hideHoverWidget();\n\t\t}\n\t}\n\n\tprivate onKeyDown(e: IKeyboardEvent): void {\n\t\tconst stopKey = env.isMacintosh ? KeyCode.Meta : KeyCode.Ctrl;\n\t\tif (e.keyCode !== stopKey && e.keyCode !== KeyCode.Alt) {\n\t\t\t// do not hide hover when Ctrl/Meta is pressed, and alt is handled separately\n\t\t\tthis.hideHoverWidget();\n\t\t}\n\t}\n\t// end hover business\n\n\t// exception widget\n\tprivate async toggleExceptionWidget(): Promise<void> {\n\t\t// Toggles exception widget based on the state of the current editor model and debug stack frame\n\t\tconst model = this.editor.getModel();\n\t\tconst focusedSf = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst callStack = focusedSf ? focusedSf.thread.getCallStack() : null;\n\t\tif (!model || !focusedSf || !callStack || callStack.length === 0) {\n\t\t\tthis.closeExceptionWidget();\n\t\t\treturn;\n\t\t}\n\n\t\t// First call stack frame that is available is the frame where exception has been thrown\n\t\tconst exceptionSf = callStack.find(sf => !!(sf && sf.source && sf.source.available && sf.source.presentationHint !== 'deemphasize'));\n\t\tif (!exceptionSf || exceptionSf !== focusedSf) {\n\t\t\tthis.closeExceptionWidget();\n\t\t\treturn;\n\t\t}\n\n\t\tconst sameUri = this.uriIdentityService.extUri.isEqual(exceptionSf.source.uri, model.uri);\n\t\tif (this.exceptionWidget && !sameUri) {\n\t\t\tthis.closeExceptionWidget();\n\t\t} else if (sameUri) {\n\t\t\tconst exceptionInfo = await focusedSf.thread.exceptionInfo;\n\t\t\tif (exceptionInfo) {\n\t\t\t\tthis.showExceptionWidget(exceptionInfo, this.debugService.getViewModel().focusedSession, exceptionSf.range.startLineNumber, exceptionSf.range.startColumn);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showExceptionWidget(exceptionInfo: IExceptionInfo, debugSession: IDebugSession | undefined, lineNumber: number, column: number): void {\n\t\tif (this.exceptionWidget) {\n\t\t\tthis.exceptionWidget.dispose();\n\t\t}\n\n\t\tthis.exceptionWidget = this.instantiationService.createInstance(ExceptionWidget, this.editor, exceptionInfo, debugSession);\n\t\tthis.exceptionWidget.show({ lineNumber, column }, 0);\n\t\tthis.exceptionWidget.focus();\n\t\tthis.editor.revealRangeInCenter({\n\t\t\tstartLineNumber: lineNumber,\n\t\t\tstartColumn: column,\n\t\t\tendLineNumber: lineNumber,\n\t\t\tendColumn: column,\n\t\t});\n\t\tthis.exceptionWidgetVisible.set(true);\n\t}\n\n\tcloseExceptionWidget(): void {\n\t\tif (this.exceptionWidget) {\n\t\t\tconst shouldFocusEditor = this.exceptionWidget.hasFocus();\n\t\t\tthis.exceptionWidget.dispose();\n\t\t\tthis.exceptionWidget = undefined;\n\t\t\tthis.exceptionWidgetVisible.set(false);\n\t\t\tif (shouldFocusEditor) {\n\t\t\t\tthis.editor.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync addLaunchConfiguration(): Promise<any> {\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet configurationsArrayPosition: Position | undefined;\n\t\tlet lastProperty: string;\n\n\t\tconst getConfigurationPosition = () => {\n\t\t\tlet depthInArray = 0;\n\t\t\tvisit(model.getValue(), {\n\t\t\t\tonObjectProperty: (property: string) => {\n\t\t\t\t\tlastProperty = property;\n\t\t\t\t},\n\t\t\t\tonArrayBegin: (offset: number) => {\n\t\t\t\t\tif (lastProperty === 'configurations' && depthInArray === 0) {\n\t\t\t\t\t\tconfigurationsArrayPosition = model.getPositionAt(offset + 1);\n\t\t\t\t\t}\n\t\t\t\t\tdepthInArray++;\n\t\t\t\t},\n\t\t\t\tonArrayEnd: () => {\n\t\t\t\t\tdepthInArray--;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tgetConfigurationPosition();\n\n\t\tif (!configurationsArrayPosition) {\n\t\t\t// \"configurations\" array doesn't exist. Add it here.\n\t\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\t\tconst eol = model.getEOL();\n\t\t\tconst edit = (basename(model.uri.fsPath) === 'launch.json') ?\n\t\t\t\tsetProperty(model.getValue(), ['configurations'], [], { tabSize, insertSpaces, eol })[0] :\n\t\t\t\tsetProperty(model.getValue(), ['launch'], { 'configurations': [] }, { tabSize, insertSpaces, eol })[0];\n\t\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\t\tconst lineNumber = startPosition.lineNumber;\n\t\t\tconst range = new Range(lineNumber, startPosition.column, lineNumber, model.getLineMaxColumn(lineNumber));\n\t\t\tmodel.pushEditOperations(null, [EditOperation.replace(range, edit.content)], () => null);\n\t\t\t// Go through the file again since we've edited it\n\t\t\tgetConfigurationPosition();\n\t\t}\n\t\tif (!configurationsArrayPosition) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editor.focus();\n\n\t\tconst insertLine = (position: Position): Promise<any> => {\n\t\t\t// Check if there are more characters on a line after a \"configurations\": [, if yes enter a newline\n\t\t\tif (model.getLineLastNonWhitespaceColumn(position.lineNumber) > position.column) {\n\t\t\t\tthis.editor.setPosition(position);\n\t\t\t\tCoreEditingCommands.LineBreakInsert.runEditorCommand(null, this.editor, null);\n\t\t\t}\n\t\t\tthis.editor.setPosition(position);\n\t\t\treturn this.commandService.executeCommand('editor.action.insertLineAfter');\n\t\t};\n\n\t\tawait insertLine(configurationsArrayPosition);\n\t\tawait this.commandService.executeCommand('editor.action.triggerSuggest');\n\t}\n\n\t// Inline Decorations\n\n\t@memoize\n\tprivate get removeInlineValuesScheduler(): RunOnceScheduler {\n\t\treturn new RunOnceScheduler(\n\t\t\t() => {\n\t\t\t\tthis.displayedStore.clear();\n\t\t\t\tthis.oldDecorations.clear();\n\t\t\t},\n\t\t\t100\n\t\t);\n\t}\n\n\t@memoize\n\tprivate get updateInlineValuesScheduler(): RunOnceScheduler {\n\t\tconst model = this.editor.getModel();\n\t\treturn new RunOnceScheduler(\n\t\t\tasync () => await this.updateInlineValueDecorations(this.debugService.getViewModel().focusedStackFrame),\n\t\t\tmodel ? this.debounceInfo.get(model) : DEAFULT_INLINE_DEBOUNCE_DELAY\n\t\t);\n\t}\n\n\tprivate async updateInlineValueDecorations(stackFrame: IStackFrame | undefined): Promise<void> {\n\n\t\tconst var_value_format = '{0} = {1}';\n\t\tconst separator = ', ';\n\n\t\tconst model = this.editor.getModel();\n\t\tconst inlineValuesSetting = this.configurationService.getValue<IDebugConfiguration>('debug').inlineValues;\n\t\tconst inlineValuesTurnedOn = inlineValuesSetting === true || inlineValuesSetting === 'on' || (inlineValuesSetting === 'auto' && model && this.languageFeaturesService.inlineValuesProvider.has(model));\n\t\tif (!inlineValuesTurnedOn || !model || !stackFrame || model.uri.toString() !== stackFrame.source.uri.toString()) {\n\t\t\tif (!this.removeInlineValuesScheduler.isScheduled()) {\n\t\t\t\tthis.removeInlineValuesScheduler.schedule();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tthis.removeInlineValuesScheduler.cancel();\n\t\tthis.displayedStore.clear();\n\n\t\tconst viewRanges = this.editor.getVisibleRangesPlusViewportAboveBelow();\n\t\tlet allDecorations: IModelDeltaDecoration[];\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.displayedStore.add(toDisposable(() => cts.dispose(true)));\n\n\t\tif (this.languageFeaturesService.inlineValuesProvider.has(model)) {\n\n\t\t\tconst findVariable = async (_key: string, caseSensitiveLookup: boolean): Promise<string | undefined> => {\n\t\t\t\tconst scopes = await stackFrame.getMostSpecificScopes(stackFrame.range);\n\t\t\t\tconst key = caseSensitiveLookup ? _key : _key.toLowerCase();\n\t\t\t\tfor (const scope of scopes) {\n\t\t\t\t\tconst variables = await scope.getChildren();\n\t\t\t\t\tconst found = variables.find(v => caseSensitiveLookup ? (v.name === key) : (v.name.toLowerCase() === key));\n\t\t\t\t\tif (found) {\n\t\t\t\t\t\treturn found.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t};\n\n\t\t\tconst ctx: InlineValueContext = {\n\t\t\t\tframeId: stackFrame.frameId,\n\t\t\t\tstoppedLocation: new Range(stackFrame.range.startLineNumber, stackFrame.range.startColumn + 1, stackFrame.range.endLineNumber, stackFrame.range.endColumn + 1)\n\t\t\t};\n\n\t\t\tconst providers = this.languageFeaturesService.inlineValuesProvider.ordered(model).reverse();\n\n\t\t\tallDecorations = [];\n\t\t\tconst lineDecorations = new Map<number, InlineSegment[]>();\n\n\t\t\tconst promises = providers.flatMap(provider => viewRanges.map(range => Promise.resolve(provider.provideInlineValues(model, range, ctx, cts.token)).then(async (result) => {\n\t\t\t\tif (result) {\n\t\t\t\t\tfor (const iv of result) {\n\n\t\t\t\t\t\tlet text: string | undefined = undefined;\n\t\t\t\t\t\tswitch (iv.type) {\n\t\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\t\ttext = iv.text;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'variable': {\n\t\t\t\t\t\t\t\tlet va = iv.variableName;\n\t\t\t\t\t\t\t\tif (!va) {\n\t\t\t\t\t\t\t\t\tconst lineContent = model.getLineContent(iv.range.startLineNumber);\n\t\t\t\t\t\t\t\t\tva = lineContent.substring(iv.range.startColumn - 1, iv.range.endColumn - 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst value = await findVariable(va, iv.caseSensitiveLookup);\n\t\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\t\ttext = strings.format(var_value_format, va, value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'expression': {\n\t\t\t\t\t\t\t\tlet expr = iv.expression;\n\t\t\t\t\t\t\t\tif (!expr) {\n\t\t\t\t\t\t\t\t\tconst lineContent = model.getLineContent(iv.range.startLineNumber);\n\t\t\t\t\t\t\t\t\texpr = lineContent.substring(iv.range.startColumn - 1, iv.range.endColumn - 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (expr) {\n\t\t\t\t\t\t\t\t\tconst expression = new Expression(expr);\n\t\t\t\t\t\t\t\t\tawait expression.evaluate(stackFrame.thread.session, stackFrame, 'watch', true);\n\t\t\t\t\t\t\t\t\tif (expression.available) {\n\t\t\t\t\t\t\t\t\t\ttext = strings.format(var_value_format, expr, expression.value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (text) {\n\t\t\t\t\t\t\tconst line = iv.range.startLineNumber;\n\t\t\t\t\t\t\tlet lineSegments = lineDecorations.get(line);\n\t\t\t\t\t\t\tif (!lineSegments) {\n\t\t\t\t\t\t\t\tlineSegments = [];\n\t\t\t\t\t\t\t\tlineDecorations.set(line, lineSegments);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!lineSegments.some(iv => iv.text === text)) {\t// de-dupe\n\t\t\t\t\t\t\t\tlineSegments.push(new InlineSegment(iv.range.startColumn, text));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, err => {\n\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t})));\n\n\t\t\tconst startTime = Date.now();\n\n\t\t\tawait Promise.all(promises);\n\n\t\t\t// update debounce info\n\t\t\tthis.updateInlineValuesScheduler.delay = this.debounceInfo.update(model, Date.now() - startTime);\n\n\t\t\t// sort line segments and concatenate them into a decoration\n\n\t\t\tlineDecorations.forEach((segments, line) => {\n\t\t\t\tif (segments.length > 0) {\n\t\t\t\t\tsegments = segments.sort((a, b) => a.column - b.column);\n\t\t\t\t\tconst text = segments.map(s => s.text).join(separator);\n\t\t\t\t\tallDecorations.push(...createInlineValueDecoration(line, text));\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\t\t\t// old \"one-size-fits-all\" strategy\n\n\t\t\tconst scopes = await stackFrame.getMostSpecificScopes(stackFrame.range);\n\t\t\tconst scopesWithVariables = await Promise.all(scopes.map(async scope =>\n\t\t\t\t({ scope, variables: await scope.getChildren() })));\n\n\t\t\t// Map of inline values per line that's populated in scope order, from\n\t\t\t// narrowest to widest. This is done to avoid duplicating values if\n\t\t\t// they appear in multiple scopes or are shadowed (#129770, #217326)\n\t\t\tconst valuesPerLine = new Map</* line */number, Map</* var */string, /* value */ string>>();\n\n\t\t\tfor (const { scope, variables } of scopesWithVariables) {\n\t\t\t\tlet scopeRange = new Range(0, 0, stackFrame.range.startLineNumber, stackFrame.range.startColumn);\n\t\t\t\tif (scope.range) {\n\t\t\t\t\tscopeRange = scopeRange.setStartPosition(scope.range.startLineNumber, scope.range.startColumn);\n\t\t\t\t}\n\n\t\t\t\tconst ownRanges = viewRanges.map(r => r.intersectRanges(scopeRange)).filter(isDefined);\n\t\t\t\tthis._wordToLineNumbersMap ??= new WordsToLineNumbersCache(model);\n\t\t\t\tfor (const range of ownRanges) {\n\t\t\t\t\tthis._wordToLineNumbersMap.ensureRangePopulated(range);\n\t\t\t\t}\n\n\t\t\t\tconst mapped = createInlineValueDecorationsInsideRange(variables, ownRanges, model, this._wordToLineNumbersMap.value);\n\t\t\t\tfor (const { line, variables } of mapped) {\n\t\t\t\t\tlet values = valuesPerLine.get(line);\n\t\t\t\t\tif (!values) {\n\t\t\t\t\t\tvalues = new Map<string, string>();\n\t\t\t\t\t\tvaluesPerLine.set(line, values);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const { name, value } of variables) {\n\t\t\t\t\t\tif (!values.has(name)) {\n\t\t\t\t\t\t\tvalues.set(name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tallDecorations = [...valuesPerLine.entries()].flatMap(([line, values]) =>\n\t\t\t\tcreateInlineValueDecoration(line, [...values].map(([n, v]) => `${n} = ${v}`).join(', '))\n\t\t\t);\n\t\t}\n\n\t\tif (cts.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If word wrap is on, application of inline decorations may change the scroll position.\n\t\t// Ensure the cursor maintains its vertical position relative to the viewport when\n\t\t// we apply decorations.\n\t\tlet preservePosition: { position: Position; top: number } | undefined;\n\t\tif (this.editor.getOption(EditorOption.wordWrap) !== 'off') {\n\t\t\tconst position = this.editor.getPosition();\n\t\t\tif (position && this.editor.getVisibleRanges().some(r => r.containsPosition(position))) {\n\t\t\t\tpreservePosition = { position, top: this.editor.getTopForPosition(position.lineNumber, position.column) };\n\t\t\t}\n\t\t}\n\n\t\tthis.oldDecorations.set(allDecorations);\n\n\t\tif (preservePosition) {\n\t\t\tconst top = this.editor.getTopForPosition(preservePosition.position.lineNumber, preservePosition.position.column);\n\t\t\tthis.editor.setScrollTop(this.editor.getScrollTop() - (preservePosition.top - top), ScrollType.Immediate);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tif (this.hoverWidget) {\n\t\t\tthis.hoverWidget.dispose();\n\t\t}\n\t\tif (this.configurationWidget) {\n\t\t\tthis.configurationWidget.dispose();\n\t\t}\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nclass WordsToLineNumbersCache {\n\t// we use this as an array of bits where each 1 bit is a line number that's been parsed\n\tprivate readonly intervals: Uint8Array;\n\tpublic readonly value = new Map<string, number[]>();\n\n\tconstructor(private readonly model: ITextModel) {\n\t\tthis.intervals = new Uint8Array(Math.ceil(model.getLineCount() / 8));\n\t}\n\n\t/** Ensures that variables names in the given range have been identified. */\n\tpublic ensureRangePopulated(range: Range) {\n\t\tfor (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n\t\t\tconst bin = lineNumber >> 3;  /* Math.floor(i / 8) */\n\t\t\tconst bit = 1 << (lineNumber & 0b111); /* 1 << (i % 8) */\n\t\t\tif (!(this.intervals[bin] & bit)) {\n\t\t\t\tgetWordToLineNumbersMap(this.model, lineNumber, this.value);\n\t\t\t\tthis.intervals[bin] |= bit;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nCommandsRegistry.registerCommand(\n\t'_executeInlineValueProvider',\n\tasync (\n\t\taccessor: ServicesAccessor,\n\t\turi: URI,\n\t\tiRange: IRange,\n\t\tcontext: InlineValueContext\n\t): Promise<InlineValue[] | null> => {\n\t\tassertType(URI.isUri(uri));\n\t\tassertType(Range.isIRange(iRange));\n\n\t\tif (!context || typeof context.frameId !== 'number' || !Range.isIRange(context.stoppedLocation)) {\n\t\t\tthrow illegalArgument('context');\n\t\t}\n\n\t\tconst model = accessor.get(IModelService).getModel(uri);\n\t\tif (!model) {\n\t\t\tthrow illegalArgument('uri');\n\t\t}\n\n\t\tconst range = Range.lift(iRange);\n\t\tconst { inlineValuesProvider } = accessor.get(ILanguageFeaturesService);\n\t\tconst providers = inlineValuesProvider.ordered(model);\n\t\tconst providerResults = await Promise.all(providers.map(provider => provider.provideInlineValues(model, range, context, CancellationToken.None)));\n\t\treturn providerResults.flat().filter(isDefined);\n\t});\n"],
  "mappings": "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",
  "names": ["standardKeyboardEvent", "iv", "variables"]
}
