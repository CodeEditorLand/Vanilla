{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/debug/browser/debugMemory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { clamp } from '../../../../base/common/numbers.js';\nimport { assertNever } from '../../../../base/common/assert.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { FileChangeType, IFileOpenOptions, FilePermission, FileSystemProviderCapabilities, FileSystemProviderErrorCode, FileType, IFileChange, IFileSystemProvider, IStat, IWatchOptions, createFileSystemProviderError } from '../../../../platform/files/common/files.js';\nimport { DEBUG_MEMORY_SCHEME, IDebugService, IDebugSession, IMemoryInvalidationEvent, IMemoryRegion, MemoryRange, MemoryRangeType, State } from '../common/debug.js';\n\nconst rangeRe = /range=([0-9]+):([0-9]+)/;\n\nexport class DebugMemoryFileSystemProvider implements IFileSystemProvider {\n\tprivate memoryFdCounter = 0;\n\tprivate readonly fdMemory = new Map<number, { session: IDebugSession; region: IMemoryRegion }>();\n\tprivate readonly changeEmitter = new Emitter<readonly IFileChange[]>();\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChangeCapabilities = Event.None;\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChangeFile = this.changeEmitter.event;\n\n\t/** @inheritdoc */\n\tpublic readonly capabilities = 0\n\t\t| FileSystemProviderCapabilities.PathCaseSensitive\n\t\t| FileSystemProviderCapabilities.FileOpenReadWriteClose;\n\n\tconstructor(private readonly debugService: IDebugService) {\n\t\tdebugService.onDidEndSession(({ session }) => {\n\t\t\tfor (const [fd, memory] of this.fdMemory) {\n\t\t\t\tif (memory.session === session) {\n\t\t\t\t\tthis.close(fd);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic watch(resource: URI, opts: IWatchOptions) {\n\t\tif (opts.recursive) {\n\t\t\treturn toDisposable(() => { });\n\t\t}\n\n\t\tconst { session, memoryReference, offset } = this.parseUri(resource);\n\t\tconst disposable = new DisposableStore();\n\n\t\tdisposable.add(session.onDidChangeState(() => {\n\t\t\tif (session.state === State.Running || session.state === State.Inactive) {\n\t\t\t\tthis.changeEmitter.fire([{ type: FileChangeType.DELETED, resource }]);\n\t\t\t}\n\t\t}));\n\n\t\tdisposable.add(session.onDidInvalidateMemory(e => {\n\t\t\tif (e.body.memoryReference !== memoryReference) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset && (e.body.offset >= offset.toOffset || e.body.offset + e.body.count < offset.fromOffset)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.changeEmitter.fire([{ resource, type: FileChangeType.UPDATED }]);\n\t\t}));\n\n\t\treturn disposable;\n\t}\n\n\t/** @inheritdoc */\n\tpublic stat(file: URI): Promise<IStat> {\n\t\tconst { readOnly } = this.parseUri(file);\n\t\treturn Promise.resolve({\n\t\t\ttype: FileType.File,\n\t\t\tmtime: 0,\n\t\t\tctime: 0,\n\t\t\tsize: 0,\n\t\t\tpermissions: readOnly ? FilePermission.Readonly : undefined,\n\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic mkdir(): never {\n\t\tthrow createFileSystemProviderError(`Not allowed`, FileSystemProviderErrorCode.NoPermissions);\n\t}\n\n\t/** @inheritdoc */\n\tpublic readdir(): never {\n\t\tthrow createFileSystemProviderError(`Not allowed`, FileSystemProviderErrorCode.NoPermissions);\n\t}\n\n\t/** @inheritdoc */\n\tpublic delete(): never {\n\t\tthrow createFileSystemProviderError(`Not allowed`, FileSystemProviderErrorCode.NoPermissions);\n\t}\n\n\t/** @inheritdoc */\n\tpublic rename(): never {\n\t\tthrow createFileSystemProviderError(`Not allowed`, FileSystemProviderErrorCode.NoPermissions);\n\t}\n\n\t/** @inheritdoc */\n\tpublic open(resource: URI, _opts: IFileOpenOptions): Promise<number> {\n\t\tconst { session, memoryReference, offset } = this.parseUri(resource);\n\t\tconst fd = this.memoryFdCounter++;\n\t\tlet region = session.getMemory(memoryReference);\n\t\tif (offset) {\n\t\t\tregion = new MemoryRegionView(region, offset);\n\t\t}\n\n\t\tthis.fdMemory.set(fd, { session, region });\n\t\treturn Promise.resolve(fd);\n\t}\n\n\t/** @inheritdoc */\n\tpublic close(fd: number) {\n\t\tthis.fdMemory.get(fd)?.region.dispose();\n\t\tthis.fdMemory.delete(fd);\n\t\treturn Promise.resolve();\n\t}\n\n\t/** @inheritdoc */\n\tpublic async writeFile(resource: URI, content: Uint8Array) {\n\t\tconst { offset } = this.parseUri(resource);\n\t\tif (!offset) {\n\t\t\tthrow createFileSystemProviderError(`Range must be present to read a file`, FileSystemProviderErrorCode.FileNotFound);\n\t\t}\n\n\t\tconst fd = await this.open(resource, { create: false });\n\n\t\ttry {\n\t\t\tawait this.write(fd, offset.fromOffset, content, 0, content.length);\n\t\t} finally {\n\t\t\tthis.close(fd);\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tpublic async readFile(resource: URI) {\n\t\tconst { offset } = this.parseUri(resource);\n\t\tif (!offset) {\n\t\t\tthrow createFileSystemProviderError(`Range must be present to read a file`, FileSystemProviderErrorCode.FileNotFound);\n\t\t}\n\n\t\tconst data = new Uint8Array(offset.toOffset - offset.fromOffset);\n\t\tconst fd = await this.open(resource, { create: false });\n\n\t\ttry {\n\t\t\tawait this.read(fd, offset.fromOffset, data, 0, data.length);\n\t\t\treturn data;\n\t\t} finally {\n\t\t\tthis.close(fd);\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tpublic async read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\tconst memory = this.fdMemory.get(fd);\n\t\tif (!memory) {\n\t\t\tthrow createFileSystemProviderError(`No file with that descriptor open`, FileSystemProviderErrorCode.Unavailable);\n\t\t}\n\n\t\tconst ranges = await memory.region.read(pos, length);\n\t\tlet readSoFar = 0;\n\t\tfor (const range of ranges) {\n\t\t\tswitch (range.type) {\n\t\t\t\tcase MemoryRangeType.Unreadable:\n\t\t\t\t\treturn readSoFar;\n\t\t\t\tcase MemoryRangeType.Error:\n\t\t\t\t\tif (readSoFar > 0) {\n\t\t\t\t\t\treturn readSoFar;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow createFileSystemProviderError(range.error, FileSystemProviderErrorCode.Unknown);\n\t\t\t\t\t}\n\t\t\t\tcase MemoryRangeType.Valid: {\n\t\t\t\t\tconst start = Math.max(0, pos - range.offset);\n\t\t\t\t\tconst toWrite = range.data.slice(start, Math.min(range.data.byteLength, start + (length - readSoFar)));\n\t\t\t\t\tdata.set(toWrite.buffer, offset + readSoFar);\n\t\t\t\t\treadSoFar += toWrite.byteLength;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tassertNever(range);\n\t\t\t}\n\t\t}\n\n\t\treturn readSoFar;\n\t}\n\n\t/** @inheritdoc */\n\tpublic write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\tconst memory = this.fdMemory.get(fd);\n\t\tif (!memory) {\n\t\t\tthrow createFileSystemProviderError(`No file with that descriptor open`, FileSystemProviderErrorCode.Unavailable);\n\t\t}\n\n\t\treturn memory.region.write(pos, VSBuffer.wrap(data).slice(offset, offset + length));\n\t}\n\n\tprotected parseUri(uri: URI) {\n\t\tif (uri.scheme !== DEBUG_MEMORY_SCHEME) {\n\t\t\tthrow createFileSystemProviderError(`Cannot open file with scheme ${uri.scheme}`, FileSystemProviderErrorCode.FileNotFound);\n\t\t}\n\n\t\tconst session = this.debugService.getModel().getSession(uri.authority);\n\t\tif (!session) {\n\t\t\tthrow createFileSystemProviderError(`Debug session not found`, FileSystemProviderErrorCode.FileNotFound);\n\t\t}\n\n\t\tlet offset: { fromOffset: number; toOffset: number } | undefined;\n\t\tconst rangeMatch = rangeRe.exec(uri.query);\n\t\tif (rangeMatch) {\n\t\t\toffset = { fromOffset: Number(rangeMatch[1]), toOffset: Number(rangeMatch[2]) };\n\t\t}\n\n\t\tconst [, memoryReference] = uri.path.split('/');\n\n\t\treturn {\n\t\t\tsession,\n\t\t\toffset,\n\t\t\treadOnly: !session.capabilities.supportsWriteMemoryRequest,\n\t\t\tsessionId: uri.authority,\n\t\t\tmemoryReference: decodeURIComponent(memoryReference),\n\t\t};\n\t}\n}\n\n/** A wrapper for a MemoryRegion that references a subset of data in another region. */\nclass MemoryRegionView extends Disposable implements IMemoryRegion {\n\tprivate readonly invalidateEmitter = new Emitter<IMemoryInvalidationEvent>();\n\n\tpublic readonly onDidInvalidate = this.invalidateEmitter.event;\n\tpublic readonly writable: boolean;\n\tprivate readonly width = this.range.toOffset - this.range.fromOffset;\n\n\tconstructor(private readonly parent: IMemoryRegion, public readonly range: { fromOffset: number; toOffset: number }) {\n\t\tsuper();\n\t\tthis.writable = parent.writable;\n\n\t\tthis._register(parent);\n\t\tthis._register(parent.onDidInvalidate(e => {\n\t\t\tconst fromOffset = clamp(e.fromOffset - range.fromOffset, 0, this.width);\n\t\t\tconst toOffset = clamp(e.toOffset - range.fromOffset, 0, this.width);\n\t\t\tif (toOffset > fromOffset) {\n\t\t\t\tthis.invalidateEmitter.fire({ fromOffset, toOffset });\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic read(fromOffset: number, toOffset: number): Promise<MemoryRange[]> {\n\t\tif (fromOffset < 0) {\n\t\t\tthrow new RangeError(`Invalid fromOffset: ${fromOffset}`);\n\t\t}\n\n\t\treturn this.parent.read(\n\t\t\tthis.range.fromOffset + fromOffset,\n\t\t\tthis.range.fromOffset + Math.min(toOffset, this.width),\n\t\t);\n\t}\n\n\tpublic write(offset: number, data: VSBuffer): Promise<number> {\n\t\treturn this.parent.write(this.range.fromOffset + offset, data);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
