var m=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var c=(t,r,i,e)=>{for(var o=e>1?void 0:e?f(r,i):r,l=t.length-1,d;l>=0;l--)(d=t[l])&&(o=(e?d(r,i,o):d(o))||o);return e&&o&&m(r,i,o),o},s=(t,r)=>(i,e)=>r(i,e,t);import{dispose as b}from"../../../../base/common/lifecycle.js";import{localize as a}from"../../../../nls.js";import{IConfigurationService as h}from"../../../../platform/configuration/common/configuration.js";import{Extensions as u}from"../../../../platform/configuration/common/configurationRegistry.js";import{IMarkerService as g,MarkerSeverity as p}from"../../../../platform/markers/common/markers.js";import{Registry as v}from"../../../../platform/registry/common/platform.js";import{listErrorForeground as y,listWarningForeground as _}from"../../../../platform/theme/common/colorRegistry.js";import{Extensions as I}from"../../../common/contributions.js";import{IDecorationsService as k}from"../../../services/decorations/common/decorations.js";import{LifecyclePhase as S}from"../../../services/lifecycle/common/lifecycle.js";class C{constructor(r){this._markerService=r;this.onDidChange=r.onMarkerChanged}label=a("label","Problems");onDidChange;provideDecorations(r){const i=this._markerService.read({resource:r,severities:p.Error|p.Warning});let e;for(const o of i)(!e||o.severity>e.severity)&&(e=o);if(e)return{weight:100*e.severity,bubble:!0,tooltip:i.length===1?a("tooltip.1","1 problem in this file"):a("tooltip.N","{0} problems in this file",i.length),letter:i.length<10?i.length.toString():"9+",color:e.severity===p.Error?y:_}}}let n=class{constructor(r,i,e){this._markerService=r;this._decorationsService=i;this._configurationService=e;this._disposables=[this._configurationService.onDidChangeConfiguration(o=>{o.affectsConfiguration("problems.visibility")&&this._updateEnablement()})],this._updateEnablement()}_disposables;_provider;_enabled;dispose(){b(this._provider),b(this._disposables)}_updateEnablement(){const r=this._configurationService.getValue("problems.visibility");if(r===void 0)return;const i=this._configurationService.getValue("problems"),e=r&&i.decorations.enabled;if(e===this._enabled){(!r||!i.decorations.enabled)&&(this._provider?.dispose(),this._provider=void 0);return}if(this._enabled=e,this._enabled){const o=new C(this._markerService);this._provider=this._decorationsService.registerDecorationsProvider(o)}else this._provider&&this._provider.dispose()}};n=c([s(0,g),s(1,k),s(2,h)],n),v.as(u.Configuration).registerConfiguration({id:"problems",order:101,type:"object",properties:{"problems.decorations.enabled":{markdownDescription:a("markers.showOnFile","Show Errors & Warnings on files and folder. Overwritten by {0} when it is off.","`#problems.visibility#`"),type:"boolean",default:!0}}}),v.as(I.Workbench).registerWorkbenchContribution(n,S.Restored);
