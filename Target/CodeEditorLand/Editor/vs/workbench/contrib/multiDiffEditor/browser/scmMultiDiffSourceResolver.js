var I=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var f=(c,e,r,i)=>{for(var t=i>1?void 0:i?U(e,r):e,s=c.length-1,a;s>=0;s--)(a=c[s])&&(t=(i?a(e,r,t):a(t))||t);return i&&t&&I(e,r,t),t},p=(c,e)=>(r,i)=>e(r,i,c);import{Disposable as h}from"../../../../base/common/lifecycle.js";import{observableFromEvent as d,waitForState as l}from"../../../../base/common/observable.js";import{ValueWithChangeEventFromObservable as S}from"../../../../base/common/observableInternal/utils.js";import{URI as m}from"../../../../base/common/uri.js";import"../../../../editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl.js";import{localize2 as D}from"../../../../nls.js";import{Action2 as w}from"../../../../platform/actions/common/actions.js";import"../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as M}from"../../../../platform/instantiation/common/instantiation.js";import{IActivityService as R,ProgressBadge as C}from"../../../services/activity/common/activity.js";import{IEditorService as E}from"../../../services/editor/common/editorService.js";import{ISCMService as _}from"../../scm/common/scm.js";import{IMultiDiffSourceResolverService as b,MultiDiffEditorItem as A}from"./multiDiffSourceResolverService.js";let o=class{constructor(e,r){this._scmService=e;this._activityService=r}static _scheme="scm-multi-diff-source";static getMultiDiffSourceUri(e,r){return m.from({scheme:o._scheme,query:JSON.stringify({repositoryUri:e,groupId:r})})}static parseUri(e){if(e.scheme!==o._scheme)return;let r;try{r=JSON.parse(e.query)}catch{return}if(typeof r!="object"||r===null)return;const{repositoryUri:i,groupId:t}=r;if(!(typeof i!="string"||typeof t!="string"))return{repositoryUri:m.parse(i),groupId:t}}canHandleUri(e){return o.parseUri(e)!==void 0}async resolveDiffSource(e){const{repositoryUri:r,groupId:i}=o.parseUri(e),t=await l(d(this,this._scmService.onDidAddRepository,()=>[...this._scmService.repositories].find(n=>n.provider.rootUri?.toString()===r.toString()))),s=await l(d(this,t.provider.onDidChangeResourceGroups,()=>t.provider.groups.find(n=>n.id===i))),g=d(this._activityService.onDidChangeActivity,()=>[...this._activityService.getViewContainerActivities("workbench.view.scm")]).map(n=>!n.some(y=>y.badge instanceof C));return await l(g,n=>n),new O(s,t)}};o=f([p(0,_),p(1,R)],o);class O{constructor(e,r){this._group=e;this._repository=r}_resources=d(this._group.onDidChangeResources,()=>this._group.resources.map(e=>new A(e.multiDiffEditorOriginalUri,e.multiDiffEditorModifiedUri,e.sourceUri)));resources=new S(this._resources);contextKeys={scmResourceGroup:this._group.id,scmProvider:this._repository.provider.contextValue}}let u=class extends h{static ID="workbench.contrib.scmMultiDiffSourceResolver";constructor(e,r){super(),this._register(r.registerResolver(e.createInstance(o)))}};u=f([p(0,M),p(1,b)],u);class v extends w{static async openMultiFileDiffEditor(e,r,i,t,s){if(!i)return;const a=o.getMultiDiffSourceUri(i.toString(),t);return await e.openEditor({label:r,multiDiffSource:a,options:s})}constructor(){super({id:"_workbench.openScmMultiDiffEditor",title:D("viewChanges","View Changes"),f1:!1})}async run(e,r){const i=e.get(E);await v.openMultiFileDiffEditor(i,r.title,m.revive(r.repositoryUri),r.resourceGroupId)}}export{v as OpenScmGroupAction,o as ScmMultiDiffSourceResolver,u as ScmMultiDiffSourceResolverContribution};
