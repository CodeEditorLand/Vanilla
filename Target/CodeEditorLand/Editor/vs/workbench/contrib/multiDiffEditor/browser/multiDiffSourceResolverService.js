import{BugIndicatingError as o}from"../../../../base/common/errors.js";import"../../../../base/common/event.js";import{toDisposable as t}from"../../../../base/common/lifecycle.js";import"../../../../base/common/uri.js";import"../../../../platform/contextkey/common/contextkey.js";import{createDecorator as l}from"../../../../platform/instantiation/common/instantiation.js";const m=l("multiDiffSourceResolverService");class p{constructor(e,r,s,n){this.originalUri=e;this.modifiedUri=r;this.goToFileUri=s;this.contextKeys=n;if(!e&&!r)throw new o("Invalid arguments")}getKey(){return JSON.stringify([this.modifiedUri?.toString(),this.originalUri?.toString()])}}class y{_serviceBrand;_resolvers=new Set;registerResolver(e){if(this._resolvers.has(e))throw new o("Duplicate resolver");return this._resolvers.add(e),t(()=>this._resolvers.delete(e))}resolve(e){for(const r of this._resolvers)if(r.canHandleUri(e))return r.resolveDiffSource(e);return Promise.resolve(void 0)}}export{m as IMultiDiffSourceResolverService,p as MultiDiffEditorItem,y as MultiDiffSourceResolverService};
