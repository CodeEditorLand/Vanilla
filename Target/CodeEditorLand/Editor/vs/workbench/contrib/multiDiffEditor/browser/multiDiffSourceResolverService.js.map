{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/multiDiffEditor/browser/multiDiffSourceResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { IValueWithChangeEvent } from '../../../../base/common/event.js';\nimport { IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\n\nexport const IMultiDiffSourceResolverService = createDecorator<IMultiDiffSourceResolverService>('multiDiffSourceResolverService');\n\nexport interface IMultiDiffSourceResolverService {\n\treadonly _serviceBrand: undefined;\n\n\tregisterResolver(resolver: IMultiDiffSourceResolver): IDisposable;\n\n\tresolve(uri: URI): Promise<IResolvedMultiDiffSource | undefined>;\n}\n\nexport interface IMultiDiffSourceResolver {\n\tcanHandleUri(uri: URI): boolean;\n\n\tresolveDiffSource(uri: URI): Promise<IResolvedMultiDiffSource>;\n}\n\nexport interface IResolvedMultiDiffSource {\n\treadonly resources: IValueWithChangeEvent<readonly MultiDiffEditorItem[]>;\n\treadonly contextKeys?: Record<string, ContextKeyValue>;\n}\n\nexport class MultiDiffEditorItem {\n\tconstructor(\n\t\treadonly originalUri: URI | undefined,\n\t\treadonly modifiedUri: URI | undefined,\n\t\treadonly goToFileUri: URI | undefined,\n\t\treadonly contextKeys?: Record<string, ContextKeyValue>\n\t) {\n\t\tif (!originalUri && !modifiedUri) {\n\t\t\tthrow new BugIndicatingError('Invalid arguments');\n\t\t}\n\t}\n\n\tgetKey(): string {\n\t\treturn JSON.stringify([this.modifiedUri?.toString(), this.originalUri?.toString()]);\n\t}\n}\n\nexport class MultiDiffSourceResolverService implements IMultiDiffSourceResolverService {\n\tpublic readonly _serviceBrand: undefined;\n\n\tprivate readonly _resolvers = new Set<IMultiDiffSourceResolver>();\n\n\tregisterResolver(resolver: IMultiDiffSourceResolver): IDisposable {\n\t\t// throw on duplicate\n\t\tif (this._resolvers.has(resolver)) {\n\t\t\tthrow new BugIndicatingError('Duplicate resolver');\n\t\t}\n\t\tthis._resolvers.add(resolver);\n\t\treturn toDisposable(() => this._resolvers.delete(resolver));\n\t}\n\n\tresolve(uri: URI): Promise<IResolvedMultiDiffSource | undefined> {\n\t\tfor (const resolver of this._resolvers) {\n\t\t\tif (resolver.canHandleUri(uri)) {\n\t\t\t\treturn resolver.resolveDiffSource(uri);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,0BAA0B;AACnC,SAAS,6BAA6B;AACtC,SAAS,aAAa,oBAAoB;AAC1C,SAAS,WAAW;AACpB,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAEzB,MAAM,kCAAkC,gBAAiD,gCAAgC;AAqBzH,MAAM,oBAAoB;AAAA,EAChC,YACU,aACA,aACA,aACA,aACR;AAJQ;AACA;AACA;AACA;AAET,QAAI,CAAC,eAAe,CAAC,aAAa;AACjC,YAAM,IAAI,mBAAmB,mBAAmB;AAAA,IACjD;AAAA,EACD;AAAA,EA3CD,OAiCiC;AAAA;AAAA;AAAA,EAYhC,SAAiB;AAChB,WAAO,KAAK,UAAU,CAAC,KAAK,aAAa,SAAS,GAAG,KAAK,aAAa,SAAS,CAAC,CAAC;AAAA,EACnF;AACD;AAEO,MAAM,+BAA0E;AAAA,EAlDvF,OAkDuF;AAAA;AAAA;AAAA,EACtE;AAAA,EAEC,aAAa,oBAAI,IAA8B;AAAA,EAEhE,iBAAiB,UAAiD;AAEjE,QAAI,KAAK,WAAW,IAAI,QAAQ,GAAG;AAClC,YAAM,IAAI,mBAAmB,oBAAoB;AAAA,IAClD;AACA,SAAK,WAAW,IAAI,QAAQ;AAC5B,WAAO,aAAa,MAAM,KAAK,WAAW,OAAO,QAAQ,CAAC;AAAA,EAC3D;AAAA,EAEA,QAAQ,KAAyD;AAChE,eAAW,YAAY,KAAK,YAAY;AACvC,UAAI,SAAS,aAAa,GAAG,GAAG;AAC/B,eAAO,SAAS,kBAAkB,GAAG;AAAA,MACtC;AAAA,IACD;AACA,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AACD;",
  "names": []
}
