{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/multiDiffEditor/browser/multiDiffEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LazyStatefulPromise, raceTimeout } from '../../../../base/common/async.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Event, ValueWithChangeEvent } from '../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable, DisposableStore, IDisposable, IReference } from '../../../../base/common/lifecycle.js';\nimport { parse } from '../../../../base/common/marshalling.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { ObservableLazyPromise, ValueWithChangeEventFromObservable, autorun, constObservable, derived, mapObservableArrayCached, observableFromEvent, observableFromValueWithChangeEvent, observableValue, recomputeInitiallyAndOnChange } from '../../../../base/common/observable.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { isDefined, isObject } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { RefCounted } from '../../../../editor/browser/widget/diffEditor/utils.js';\nimport { IDocumentDiffItem, IMultiDiffEditorModel } from '../../../../editor/browser/widget/multiDiffEditor/model.js';\nimport { MultiDiffEditorViewModel } from '../../../../editor/browser/widget/multiDiffEditor/multiDiffEditorViewModel.js';\nimport { IDiffEditorOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { localize } from '../../../../nls.js';\nimport { ConfirmResult } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorConfiguration } from '../../../browser/parts/editor/textEditor.js';\nimport { DEFAULT_EDITOR_ASSOCIATION, EditorInputCapabilities, EditorInputWithOptions, GroupIdentifier, IEditorSerializer, IResourceMultiDiffEditorInput, IRevertOptions, ISaveOptions, IUntypedEditorInput } from '../../../common/editor.js';\nimport { EditorInput, IEditorCloseHandler } from '../../../common/editor/editorInput.js';\nimport { IEditorResolverService, RegisteredEditorPriority } from '../../../services/editor/common/editorResolverService.js';\nimport { ILanguageSupport, ITextFileEditorModel, ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { MultiDiffEditorIcon } from './icons.contribution.js';\nimport { IMultiDiffSourceResolverService, IResolvedMultiDiffSource, MultiDiffEditorItem } from './multiDiffSourceResolverService.js';\n\nexport class MultiDiffEditorInput extends EditorInput implements ILanguageSupport {\n\tpublic static fromResourceMultiDiffEditorInput(input: IResourceMultiDiffEditorInput, instantiationService: IInstantiationService): MultiDiffEditorInput {\n\t\tif (!input.multiDiffSource && !input.resources) {\n\t\t\tthrow new BugIndicatingError('MultiDiffEditorInput requires either multiDiffSource or resources');\n\t\t}\n\t\tconst multiDiffSource = input.multiDiffSource ?? URI.parse(`multi-diff-editor:${new Date().getMilliseconds().toString() + Math.random().toString()}`);\n\t\treturn instantiationService.createInstance(\n\t\t\tMultiDiffEditorInput,\n\t\t\tmultiDiffSource,\n\t\t\tinput.label,\n\t\t\tinput.resources?.map(resource => {\n\t\t\t\treturn new MultiDiffEditorItem(\n\t\t\t\t\tresource.original.resource,\n\t\t\t\t\tresource.modified.resource,\n\t\t\t\t\tresource.goToFileResource,\n\t\t\t\t);\n\t\t\t}),\n\t\t\tinput.isTransient ?? false\n\t\t);\n\t}\n\n\tpublic static fromSerialized(data: ISerializedMultiDiffEditorInput, instantiationService: IInstantiationService): MultiDiffEditorInput {\n\t\treturn instantiationService.createInstance(\n\t\t\tMultiDiffEditorInput,\n\t\t\tURI.parse(data.multiDiffSourceUri),\n\t\t\tdata.label,\n\t\t\tdata.resources?.map(resource => new MultiDiffEditorItem(\n\t\t\t\tresource.originalUri ? URI.parse(resource.originalUri) : undefined,\n\t\t\t\tresource.modifiedUri ? URI.parse(resource.modifiedUri) : undefined,\n\t\t\t\tresource.goToFileUri ? URI.parse(resource.goToFileUri) : undefined,\n\t\t\t)),\n\t\t\tfalse\n\t\t);\n\t}\n\n\tstatic readonly ID: string = 'workbench.input.multiDiffEditor';\n\n\tget resource(): URI | undefined { return this.multiDiffSource; }\n\n\toverride get capabilities(): EditorInputCapabilities { return EditorInputCapabilities.Readonly; }\n\toverride get typeId(): string { return MultiDiffEditorInput.ID; }\n\n\tprivate _name: string = '';\n\toverride getName(): string { return this._name; }\n\n\toverride get editorId(): string { return DEFAULT_EDITOR_ASSOCIATION.id; }\n\toverride getIcon(): ThemeIcon { return MultiDiffEditorIcon; }\n\n\tconstructor(\n\t\tpublic readonly multiDiffSource: URI,\n\t\tpublic readonly label: string | undefined,\n\t\tpublic readonly initialResources: readonly MultiDiffEditorItem[] | undefined,\n\t\tpublic readonly isTransient: boolean = false,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@ITextResourceConfigurationService private readonly _textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IMultiDiffSourceResolverService private readonly _multiDiffSourceResolverService: IMultiDiffSourceResolverService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun((reader) => {\n\t\t\t/** @description Updates name */\n\t\t\tconst resources = this.resources.read(reader);\n\t\t\tconst label = this.label ?? localize('name', \"Multi Diff Editor\");\n\t\t\tif (resources) {\n\t\t\t\tthis._name = label + localize({\n\t\t\t\t\tkey: 'files',\n\t\t\t\t\tcomment: ['the number of files being shown']\n\t\t\t\t}, \" ({0} files)\", resources.length);\n\t\t\t} else {\n\t\t\t\tthis._name = label;\n\t\t\t}\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}));\n\t}\n\n\tpublic serialize(): ISerializedMultiDiffEditorInput {\n\t\treturn {\n\t\t\tlabel: this.label,\n\t\t\tmultiDiffSourceUri: this.multiDiffSource.toString(),\n\t\t\tresources: this.initialResources?.map(resource => ({\n\t\t\t\toriginalUri: resource.originalUri?.toString(),\n\t\t\t\tmodifiedUri: resource.modifiedUri?.toString(),\n\t\t\t\tgoToFileUri: resource.goToFileUri?.toString(),\n\t\t\t})),\n\t\t};\n\t}\n\n\tpublic setLanguageId(languageId: string, source?: string | undefined): void {\n\t\tconst activeDiffItem = this._viewModel.requireValue().activeDiffItem.get();\n\t\tconst value = activeDiffItem?.documentDiffItem;\n\t\tif (!value) { return; }\n\t\tconst target = value.modified ?? value.original;\n\t\tif (!target) { return; }\n\t\ttarget.setLanguage(languageId, source);\n\t}\n\n\tpublic async getViewModel(): Promise<MultiDiffEditorViewModel> {\n\t\treturn this._viewModel.getPromise();\n\t}\n\n\tprivate readonly _viewModel = new LazyStatefulPromise(async () => {\n\t\tconst model = await this._createModel();\n\t\tthis._register(model);\n\t\tconst vm = new MultiDiffEditorViewModel(model, this._instantiationService);\n\t\tthis._register(vm);\n\t\tawait raceTimeout(vm.waitForDiffs(), 1000);\n\t\treturn vm;\n\t});\n\n\tprivate async _createModel(): Promise<IMultiDiffEditorModel & IDisposable> {\n\t\tconst source = await this._resolvedSource.getPromise();\n\t\tconst textResourceConfigurationService = this._textResourceConfigurationService;\n\n\t\tconst documentsWithPromises = mapObservableArrayCached(this, source.resources, async (r, store) => {\n\t\t\t/** @description documentsWithPromises */\n\t\t\tlet original: IReference<IResolvedTextEditorModel> | undefined;\n\t\t\tlet modified: IReference<IResolvedTextEditorModel> | undefined;\n\n\t\t\tconst multiDiffItemStore = new DisposableStore();\n\n\t\t\ttry {\n\t\t\t\t[original, modified] = await Promise.all([\n\t\t\t\t\tr.originalUri ? this._textModelService.createModelReference(r.originalUri) : undefined,\n\t\t\t\t\tr.modifiedUri ? this._textModelService.createModelReference(r.modifiedUri) : undefined,\n\t\t\t\t]);\n\t\t\t\tif (original) { multiDiffItemStore.add(original); }\n\t\t\t\tif (modified) { multiDiffItemStore.add(modified); }\n\t\t\t} catch (e) {\n\t\t\t\t// e.g. \"File seems to be binary and cannot be opened as text\"\n\t\t\t\tconsole.error(e);\n\t\t\t\tonUnexpectedError(e);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst uri = (r.modifiedUri ?? r.originalUri)!;\n\t\t\tconst result: IDocumentDiffItemWithMultiDiffEditorItem = {\n\t\t\t\tmultiDiffEditorItem: r,\n\t\t\t\toriginal: original?.object.textEditorModel,\n\t\t\t\tmodified: modified?.object.textEditorModel,\n\t\t\t\tcontextKeys: r.contextKeys,\n\t\t\t\tget options() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...getReadonlyConfiguration(modified?.object.isReadonly() ?? true),\n\t\t\t\t\t\t...computeOptions(textResourceConfigurationService.getValue(uri)),\n\t\t\t\t\t} satisfies IDiffEditorOptions;\n\t\t\t\t},\n\t\t\t\tonOptionsDidChange: h => this._textResourceConfigurationService.onDidChangeConfiguration(e => {\n\t\t\t\t\tif (e.affectsConfiguration(uri, 'editor') || e.affectsConfiguration(uri, 'diffEditor')) {\n\t\t\t\t\t\th();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn store.add(RefCounted.createOfNonDisposable(result, multiDiffItemStore, this));\n\t\t}, i => JSON.stringify([i.modifiedUri?.toString(), i.originalUri?.toString()]));\n\n\t\tconst documents = observableValue<readonly RefCounted<IDocumentDiffItem>[] | 'loading'>('documents', 'loading');\n\n\t\tconst updateDocuments = derived(async reader => {\n\t\t\t/** @description Update documents */\n\t\t\tconst docsPromises = documentsWithPromises.read(reader);\n\t\t\tconst docs = await Promise.all(docsPromises);\n\t\t\tconst newDocuments = docs.filter(isDefined);\n\t\t\tdocuments.set(newDocuments, undefined);\n\t\t});\n\n\t\tconst a = recomputeInitiallyAndOnChange(updateDocuments);\n\t\tawait updateDocuments.get();\n\n\t\tconst result: IMultiDiffEditorModel & IDisposable = {\n\t\t\tdispose: () => a.dispose(),\n\t\t\tdocuments: new ValueWithChangeEventFromObservable(documents),\n\t\t\tcontextKeys: source.source?.contextKeys,\n\t\t};\n\t\treturn result;\n\t}\n\n\tprivate readonly _resolvedSource = new ObservableLazyPromise(async () => {\n\t\tconst source: IResolvedMultiDiffSource | undefined = this.initialResources\n\t\t\t? { resources: ValueWithChangeEvent.const(this.initialResources) }\n\t\t\t: await this._multiDiffSourceResolverService.resolve(this.multiDiffSource);\n\t\treturn {\n\t\t\tsource,\n\t\t\tresources: source ? observableFromValueWithChangeEvent(this, source.resources) : constObservable([]),\n\t\t};\n\t});\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (super.matches(otherInput)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof MultiDiffEditorInput) {\n\t\t\treturn this.multiDiffSource.toString() === otherInput.multiDiffSource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic readonly resources = derived(this, reader => this._resolvedSource.cachedPromiseResult.read(reader)?.data?.resources.read(reader));\n\n\tprivate readonly textFileServiceOnDidChange = new FastEventDispatcher<ITextFileEditorModel, URI>(\n\t\tthis._textFileService.files.onDidChangeDirty,\n\t\titem => item.resource.toString(),\n\t\turi => uri.toString()\n\t);\n\n\tprivate readonly _isDirtyObservables = mapObservableArrayCached(this, this.resources.map(r => r ?? []), res => {\n\t\tconst isModifiedDirty = res.modifiedUri ? isUriDirty(this.textFileServiceOnDidChange, this._textFileService, res.modifiedUri) : constObservable(false);\n\t\tconst isOriginalDirty = res.originalUri ? isUriDirty(this.textFileServiceOnDidChange, this._textFileService, res.originalUri) : constObservable(false);\n\t\treturn derived(reader => /** @description modifiedDirty||originalDirty */ isModifiedDirty.read(reader) || isOriginalDirty.read(reader));\n\t}, i => i.getKey());\n\tprivate readonly _isDirtyObservable = derived(this, reader => this._isDirtyObservables.read(reader).some(isDirty => isDirty.read(reader)))\n\t\t.keepObserved(this._store);\n\n\toverride readonly onDidChangeDirty = Event.fromObservableLight(this._isDirtyObservable);\n\toverride isDirty() { return this._isDirtyObservable.get(); }\n\n\toverride async save(group: number, options?: ISaveOptions | undefined): Promise<EditorInput> {\n\t\tawait this.doSaveOrRevert('save', group, options);\n\t\treturn this;\n\t}\n\n\toverride  revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void> {\n\t\treturn this.doSaveOrRevert('revert', group, options);\n\t}\n\n\tprivate async doSaveOrRevert(mode: 'save', group: GroupIdentifier, options?: ISaveOptions): Promise<void>;\n\tprivate async doSaveOrRevert(mode: 'revert', group: GroupIdentifier, options?: IRevertOptions): Promise<void>;\n\tprivate async doSaveOrRevert(mode: 'save' | 'revert', group: GroupIdentifier, options?: ISaveOptions | IRevertOptions): Promise<void> {\n\t\tconst items = this._viewModel.currentValue?.items.get();\n\t\tif (items) {\n\t\t\tawait Promise.all(items.map(async item => {\n\t\t\t\tconst model = item.diffEditorViewModel.model;\n\t\t\t\tconst handleOriginal = model.original.uri.scheme !== Schemas.untitled && this._textFileService.isDirty(model.original.uri); // match diff editor behaviour\n\n\t\t\t\tawait Promise.all([\n\t\t\t\t\thandleOriginal ? mode === 'save' ? this._textFileService.save(model.original.uri, options) : this._textFileService.revert(model.original.uri, options) : Promise.resolve(),\n\t\t\t\t\tmode === 'save' ? this._textFileService.save(model.modified.uri, options) : this._textFileService.revert(model.modified.uri, options),\n\t\t\t\t]);\n\t\t\t}));\n\t\t}\n\t\treturn undefined;\n\t}\n\n\toverride readonly closeHandler: IEditorCloseHandler = {\n\n\t\t// TODO@bpasero TODO@hediet this is a workaround for\n\t\t// not having a better way to figure out if the\n\t\t// editors this input wraps around are opened or not\n\n\t\tasync confirm() {\n\t\t\treturn ConfirmResult.DONT_SAVE;\n\t\t},\n\t\tshowConfirm() {\n\t\t\treturn false;\n\t\t}\n\t};\n}\n\nexport interface IDocumentDiffItemWithMultiDiffEditorItem extends IDocumentDiffItem {\n\tmultiDiffEditorItem: MultiDiffEditorItem;\n}\n\n/**\n * Uses a map to efficiently dispatch events to listeners that are interested in a specific key.\n*/\nclass FastEventDispatcher<T, TKey> {\n\tprivate _count = 0;\n\tprivate readonly _buckets = new Map<string, Set<(value: T) => void>>();\n\n\tprivate _eventSubscription: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly _event: Event<T>,\n\t\tprivate readonly _getEventArgsKey: (item: T) => string,\n\t\tprivate readonly _keyToString: (key: TKey) => string,\n\t) {\n\t}\n\n\tpublic filteredEvent(filter: TKey): (listener: (e: T) => any) => IDisposable {\n\t\treturn listener => {\n\t\t\tconst key = this._keyToString(filter);\n\t\t\tlet bucket = this._buckets.get(key);\n\t\t\tif (!bucket) {\n\t\t\t\tbucket = new Set();\n\t\t\t\tthis._buckets.set(key, bucket);\n\t\t\t}\n\t\t\tbucket.add(listener);\n\n\t\t\tthis._count++;\n\t\t\tif (this._count === 1) {\n\t\t\t\tthis._eventSubscription = this._event(this._handleEventChange);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdispose: () => {\n\t\t\t\t\tbucket!.delete(listener);\n\t\t\t\t\tif (bucket!.size === 0) {\n\t\t\t\t\t\tthis._buckets.delete(key);\n\t\t\t\t\t}\n\t\t\t\t\tthis._count--;\n\n\t\t\t\t\tif (this._count === 0) {\n\t\t\t\t\t\tthis._eventSubscription?.dispose();\n\t\t\t\t\t\tthis._eventSubscription = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\n\tprivate readonly _handleEventChange = (e: T) => {\n\t\tconst key = this._getEventArgsKey(e);\n\t\tconst bucket = this._buckets.get(key);\n\t\tif (bucket) {\n\t\t\tfor (const listener of bucket) {\n\t\t\t\tlistener(e);\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction isUriDirty(onDidChangeDirty: FastEventDispatcher<ITextFileEditorModel, URI>, textFileService: ITextFileService, uri: URI) {\n\treturn observableFromEvent(onDidChangeDirty.filteredEvent(uri), () => textFileService.isDirty(uri));\n}\n\nfunction getReadonlyConfiguration(isReadonly: boolean | IMarkdownString | undefined): { readOnly: boolean; readOnlyMessage: IMarkdownString | undefined } {\n\treturn {\n\t\treadOnly: !!isReadonly,\n\t\treadOnlyMessage: typeof isReadonly !== 'boolean' ? isReadonly : undefined\n\t};\n}\n\nfunction computeOptions(configuration: IEditorConfiguration): IDiffEditorOptions {\n\tconst editorConfiguration = deepClone(configuration.editor);\n\n\t// Handle diff editor specially by merging in diffEditor configuration\n\tif (isObject(configuration.diffEditor)) {\n\t\tconst diffEditorConfiguration: IDiffEditorOptions = deepClone(configuration.diffEditor);\n\n\t\t// User settings defines `diffEditor.codeLens`, but here we rename that to `diffEditor.diffCodeLens` to avoid collisions with `editor.codeLens`.\n\t\tdiffEditorConfiguration.diffCodeLens = diffEditorConfiguration.codeLens;\n\t\tdelete diffEditorConfiguration.codeLens;\n\n\t\t// User settings defines `diffEditor.wordWrap`, but here we rename that to `diffEditor.diffWordWrap` to avoid collisions with `editor.wordWrap`.\n\t\tdiffEditorConfiguration.diffWordWrap = <'off' | 'on' | 'inherit' | undefined>diffEditorConfiguration.wordWrap;\n\t\tdelete diffEditorConfiguration.wordWrap;\n\n\t\tObject.assign(editorConfiguration, diffEditorConfiguration);\n\t}\n\treturn editorConfiguration;\n}\n\nexport class MultiDiffEditorResolverContribution extends Disposable {\n\n\tstatic readonly ID = 'workbench.contrib.multiDiffEditorResolver';\n\n\tconstructor(\n\t\t@IEditorResolverService editorResolverService: IEditorResolverService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(editorResolverService.registerEditor(\n\t\t\t`*`,\n\t\t\t{\n\t\t\t\tid: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\tlabel: DEFAULT_EDITOR_ASSOCIATION.displayName,\n\t\t\t\tdetail: DEFAULT_EDITOR_ASSOCIATION.providerDisplayName,\n\t\t\t\tpriority: RegisteredEditorPriority.builtin\n\t\t\t},\n\t\t\t{},\n\t\t\t{\n\t\t\t\tcreateMultiDiffEditorInput: (multiDiffEditor: IResourceMultiDiffEditorInput): EditorInputWithOptions => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\teditor: MultiDiffEditorInput.fromResourceMultiDiffEditorInput(multiDiffEditor, instantiationService),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t}\n\t\t));\n\t}\n}\n\ninterface ISerializedMultiDiffEditorInput {\n\tmultiDiffSourceUri: string;\n\tlabel: string | undefined;\n\tresources: {\n\t\toriginalUri: string | undefined;\n\t\tmodifiedUri: string | undefined;\n\t\tgoToFileUri: string | undefined;\n\t}[] | undefined;\n}\n\nexport class MultiDiffEditorSerializer implements IEditorSerializer {\n\n\tcanSerialize(editor: EditorInput): editor is MultiDiffEditorInput {\n\t\treturn editor instanceof MultiDiffEditorInput && !editor.isTransient;\n\t}\n\n\tserialize(editor: MultiDiffEditorInput): string | undefined {\n\t\tif (!this.canSerialize(editor)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn JSON.stringify(editor.serialize());\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditor: string): EditorInput | undefined {\n\t\ttry {\n\t\t\tconst data = parse(serializedEditor) as ISerializedMultiDiffEditorInput;\n\t\t\treturn MultiDiffEditorInput.fromSerialized(data, instantiationService);\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["label", "result"]
}
