{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/multiDiffEditor/browser/scmMultiDiffSourceResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tValueWithChangeEventFromObservable,\n\tobservableFromEvent,\n\twaitForState,\n} from \"../../../../base/common/observable.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport type { IMultiDiffEditorOptions } from \"../../../../editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl.js\";\nimport { localize2 } from \"../../../../nls.js\";\nimport { Action2 } from \"../../../../platform/actions/common/actions.js\";\nimport type { ContextKeyValue } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIActivityService,\n\tProgressBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport {\n\ttype ISCMRepository,\n\ttype ISCMResourceGroup,\n\tISCMService,\n} from \"../../scm/common/scm.js\";\nimport {\n\ttype IMultiDiffSourceResolver,\n\tIMultiDiffSourceResolverService,\n\ttype IResolvedMultiDiffSource,\n\tMultiDiffEditorItem,\n} from \"./multiDiffSourceResolverService.js\";\n\nexport class ScmMultiDiffSourceResolver implements IMultiDiffSourceResolver {\n\tprivate static readonly _scheme = \"scm-multi-diff-source\";\n\n\tpublic static getMultiDiffSourceUri(\n\t\trepositoryUri: string,\n\t\tgroupId: string,\n\t): URI {\n\t\treturn URI.from({\n\t\t\tscheme: ScmMultiDiffSourceResolver._scheme,\n\t\t\tquery: JSON.stringify({\n\t\t\t\trepositoryUri,\n\t\t\t\tgroupId,\n\t\t\t} satisfies UriFields),\n\t\t});\n\t}\n\n\tprivate static parseUri(\n\t\turi: URI,\n\t): { repositoryUri: URI; groupId: string } | undefined {\n\t\tif (uri.scheme !== ScmMultiDiffSourceResolver._scheme) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet query: UriFields;\n\t\ttry {\n\t\t\tquery = JSON.parse(uri.query) as UriFields;\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (typeof query !== \"object\" || query === null) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst { repositoryUri, groupId } = query;\n\t\tif (typeof repositoryUri !== \"string\" || typeof groupId !== \"string\") {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn { repositoryUri: URI.parse(repositoryUri), groupId };\n\t}\n\n\tconstructor(\n\t\t@ISCMService private readonly _scmService: ISCMService,\n\t\t@IActivityService private readonly _activityService: IActivityService,\n\t) {\n\t}\n\n\tcanHandleUri(uri: URI): boolean {\n\t\treturn ScmMultiDiffSourceResolver.parseUri(uri) !== undefined;\n\t}\n\n\tasync resolveDiffSource(uri: URI): Promise<IResolvedMultiDiffSource> {\n\t\tconst { repositoryUri, groupId } =\n\t\t\tScmMultiDiffSourceResolver.parseUri(uri)!;\n\n\t\tconst repository = await waitForState(\n\t\t\tobservableFromEvent(this, this._scmService.onDidAddRepository, () =>\n\t\t\t\t[...this._scmService.repositories].find(\n\t\t\t\t\t(r) =>\n\t\t\t\t\t\tr.provider.rootUri?.toString() ===\n\t\t\t\t\t\trepositoryUri.toString(),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tconst group = await waitForState(\n\t\t\tobservableFromEvent(\n\t\t\t\tthis,\n\t\t\t\trepository.provider.onDidChangeResourceGroups,\n\t\t\t\t() => repository.provider.groups.find((g) => g.id === groupId),\n\t\t\t),\n\t\t);\n\n\t\tconst scmActivities = observableFromEvent(\n\t\t\tthis._activityService.onDidChangeActivity,\n\t\t\t() => [\n\t\t\t\t...this._activityService.getViewContainerActivities(\n\t\t\t\t\t\"workbench.view.scm\",\n\t\t\t\t),\n\t\t\t],\n\t\t);\n\t\tconst scmViewHasNoProgressBadge = scmActivities.map(\n\t\t\t(activities) =>\n\t\t\t\t!activities.some((a) => a.badge instanceof ProgressBadge),\n\t\t);\n\t\tawait waitForState(scmViewHasNoProgressBadge, (v) => v);\n\n\t\treturn new ScmResolvedMultiDiffSource(group, repository);\n\t}\n}\n\nclass ScmResolvedMultiDiffSource implements IResolvedMultiDiffSource {\n\tprivate readonly _resources = observableFromEvent<MultiDiffEditorItem[]>(\n\t\tthis._group.onDidChangeResources,\n\t\t() =>\n\t\t\t/** @description resources */ this._group.resources.map(\n\t\t\t\t(e) =>\n\t\t\t\t\tnew MultiDiffEditorItem(\n\t\t\t\t\t\te.multiDiffEditorOriginalUri,\n\t\t\t\t\t\te.multiDiffEditorModifiedUri,\n\t\t\t\t\t\te.sourceUri,\n\t\t\t\t\t),\n\t\t\t),\n\t);\n\treadonly resources = new ValueWithChangeEventFromObservable(\n\t\tthis._resources,\n\t);\n\n\tpublic readonly contextKeys: Record<string, ContextKeyValue> = {\n\t\tscmResourceGroup: this._group.id,\n\t\tscmProvider: this._repository.provider.contextValue,\n\t};\n\n\tconstructor(\n\t\tprivate readonly _group: ISCMResourceGroup,\n\t\tprivate readonly _repository: ISCMRepository,\n\t) {}\n}\n\ninterface UriFields {\n\trepositoryUri: string;\n\tgroupId: string;\n}\n\nexport class ScmMultiDiffSourceResolverContribution extends Disposable {\n\tstatic readonly ID = \"workbench.contrib.scmMultiDiffSourceResolver\";\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IMultiDiffSourceResolverService multiDiffSourceResolverService: IMultiDiffSourceResolverService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tmultiDiffSourceResolverService.registerResolver(\n\t\t\t\tinstantiationService.createInstance(ScmMultiDiffSourceResolver),\n\t\t\t),\n\t\t);\n\t}\n}\n\ninterface OpenScmGroupActionOptions {\n\ttitle: string;\n\trepositoryUri: UriComponents;\n\tresourceGroupId: string;\n}\n\nexport class OpenScmGroupAction extends Action2 {\n\tpublic static async openMultiFileDiffEditor(\n\t\teditorService: IEditorService,\n\t\tlabel: string,\n\t\trepositoryRootUri: URI | undefined,\n\t\tresourceGroupId: string,\n\t\toptions?: IMultiDiffEditorOptions,\n\t) {\n\t\tif (!repositoryRootUri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst multiDiffSource =\n\t\t\tScmMultiDiffSourceResolver.getMultiDiffSourceUri(\n\t\t\t\trepositoryRootUri.toString(),\n\t\t\t\tresourceGroupId,\n\t\t\t);\n\t\treturn await editorService.openEditor({\n\t\t\tlabel,\n\t\t\tmultiDiffSource,\n\t\t\toptions,\n\t\t});\n\t}\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"_workbench.openScmMultiDiffEditor\",\n\t\t\ttitle: localize2(\"viewChanges\", \"View Changes\"),\n\t\t\tf1: false,\n\t\t});\n\t}\n\n\tasync run(\n\t\taccessor: ServicesAccessor,\n\t\toptions: OpenScmGroupActionOptions,\n\t): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tawait OpenScmGroupAction.openMultiFileDiffEditor(\n\t\t\teditorService,\n\t\t\toptions.title,\n\t\t\tURI.revive(options.repositoryUri),\n\t\t\toptions.resourceGroupId,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,WAA+B;AAExC,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AAExB;AAAA,EACC;AAAA,OAEM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B;AAAA,EAGC;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EAEA;AAAA,OACM;AAEA,IAAM,6BAAN,MAAqE;AAAA,EA0C3E,YAC+B,aACK,kBAClC;AAF6B;AACK;AAAA,EAEpC;AAAA,EAnFD,OAqC4E;AAAA;AAAA;AAAA,EAC3E,OAAwB,UAAU;AAAA,EAElC,OAAc,sBACb,eACA,SACM;AACN,WAAO,IAAI,KAAK;AAAA,MACf,QAAQ,2BAA2B;AAAA,MACnC,OAAO,KAAK,UAAU;AAAA,QACrB;AAAA,QACA;AAAA,MACD,CAAqB;AAAA,IACtB,CAAC;AAAA,EACF;AAAA,EAEA,OAAe,SACd,KACsD;AACtD,QAAI,IAAI,WAAW,2BAA2B,SAAS;AACtD,aAAO;AAAA,IACR;AAEA,QAAI;AACJ,QAAI;AACH,cAAQ,KAAK,MAAM,IAAI,KAAK;AAAA,IAC7B,SAAS,GAAG;AACX,aAAO;AAAA,IACR;AAEA,QAAI,OAAO,UAAU,YAAY,UAAU,MAAM;AAChD,aAAO;AAAA,IACR;AAEA,UAAM,EAAE,eAAe,QAAQ,IAAI;AACnC,QAAI,OAAO,kBAAkB,YAAY,OAAO,YAAY,UAAU;AACrE,aAAO;AAAA,IACR;AAEA,WAAO,EAAE,eAAe,IAAI,MAAM,aAAa,GAAG,QAAQ;AAAA,EAC3D;AAAA,EAQA,aAAa,KAAmB;AAC/B,WAAO,2BAA2B,SAAS,GAAG,MAAM;AAAA,EACrD;AAAA,EAEA,MAAM,kBAAkB,KAA6C;AACpE,UAAM,EAAE,eAAe,QAAQ,IAC9B,2BAA2B,SAAS,GAAG;AAExC,UAAM,aAAa,MAAM;AAAA,MACxB;AAAA,QAAoB;AAAA,QAAM,KAAK,YAAY;AAAA,QAAoB,MAC9D,CAAC,GAAG,KAAK,YAAY,YAAY,EAAE;AAAA,UAClC,CAAC,MACA,EAAE,SAAS,SAAS,SAAS,MAC7B,cAAc,SAAS;AAAA,QACzB;AAAA,MACD;AAAA,IACD;AACA,UAAM,QAAQ,MAAM;AAAA,MACnB;AAAA,QACC;AAAA,QACA,WAAW,SAAS;AAAA,QACpB,MAAM,WAAW,SAAS,OAAO,KAAK,CAAC,MAAM,EAAE,OAAO,OAAO;AAAA,MAC9D;AAAA,IACD;AAEA,UAAM,gBAAgB;AAAA,MACrB,KAAK,iBAAiB;AAAA,MACtB,MAAM;AAAA,QACL,GAAG,KAAK,iBAAiB;AAAA,UACxB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,UAAM,4BAA4B,cAAc;AAAA,MAC/C,CAAC,eACA,CAAC,WAAW,KAAK,CAAC,MAAM,EAAE,iBAAiB,aAAa;AAAA,IAC1D;AACA,UAAM,aAAa,2BAA2B,CAAC,MAAM,CAAC;AAEtD,WAAO,IAAI,2BAA2B,OAAO,UAAU;AAAA,EACxD;AACD;AAzFa,6BAAN;AAAA,EA2CJ;AAAA,EACA;AAAA,GA5CU;AA2Fb,MAAM,2BAA+D;AAAA,EAsBpE,YACkB,QACA,aAChB;AAFgB;AACA;AAAA,EACf;AAAA,EAzJJ,OAgIqE;AAAA;AAAA;AAAA,EACnD,aAAa;AAAA,IAC7B,KAAK,OAAO;AAAA,IACZ;AAAA;AAAA,MAC+B,KAAK,OAAO,UAAU;AAAA,QACnD,CAAC,MACA,IAAI;AAAA,UACH,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,QACH;AAAA,MACF;AAAA;AAAA,EACF;AAAA,EACS,YAAY,IAAI;AAAA,IACxB,KAAK;AAAA,EACN;AAAA,EAEgB,cAA+C;AAAA,IAC9D,kBAAkB,KAAK,OAAO;AAAA,IAC9B,aAAa,KAAK,YAAY,SAAS;AAAA,EACxC;AAMD;AAOO,IAAM,yCAAN,cAAqD,WAAW;AAAA,EAjKvE,OAiKuE;AAAA;AAAA;AAAA,EACtE,OAAgB,KAAK;AAAA,EAErB,YACwB,sBACU,gCAChC;AACD,UAAM;AAEN,SAAK;AAAA,MACJ,+BAA+B;AAAA,QAC9B,qBAAqB,eAAe,0BAA0B;AAAA,MAC/D;AAAA,IACD;AAAA,EACD;AACD;AAfa,yCAAN;AAAA,EAIJ;AAAA,EACA;AAAA,GALU;AAuBN,MAAM,2BAA2B,QAAQ;AAAA,EAxLhD,OAwLgD;AAAA;AAAA;AAAA,EAC/C,aAAoB,wBACnB,eACA,OACA,mBACA,iBACA,SACC;AACD,QAAI,CAAC,mBAAmB;AACvB;AAAA,IACD;AAEA,UAAM,kBACL,2BAA2B;AAAA,MAC1B,kBAAkB,SAAS;AAAA,MAC3B;AAAA,IACD;AACD,WAAO,MAAM,cAAc,WAAW;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,eAAe,cAAc;AAAA,MAC9C,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IACL,UACA,SACgB;AAChB,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,mBAAmB;AAAA,MACxB;AAAA,MACA,QAAQ;AAAA,MACR,IAAI,OAAO,QAAQ,aAAa;AAAA,MAChC,QAAQ;AAAA,IACT;AAAA,EACD;AACD;",
  "names": []
}
