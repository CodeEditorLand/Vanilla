{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/multiDiffEditor/browser/scmMultiDiffSourceResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { observableFromEvent, ValueWithChangeEventFromObservable, waitForState } from '../../../../base/common/observable.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { IMultiDiffEditorOptions } from '../../../../editor/browser/widget/multiDiffEditor/multiDiffEditorWidgetImpl.js';\nimport { localize2 } from '../../../../nls.js';\nimport { Action2 } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IActivityService, ProgressBadge } from '../../../services/activity/common/activity.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ISCMRepository, ISCMResourceGroup, ISCMService } from '../../scm/common/scm.js';\nimport { IMultiDiffSourceResolver, IMultiDiffSourceResolverService, IResolvedMultiDiffSource, MultiDiffEditorItem } from './multiDiffSourceResolverService.js';\n\nexport class ScmMultiDiffSourceResolver implements IMultiDiffSourceResolver {\n\tprivate static readonly _scheme = 'scm-multi-diff-source';\n\n\tpublic static getMultiDiffSourceUri(repositoryUri: string, groupId: string): URI {\n\t\treturn URI.from({\n\t\t\tscheme: ScmMultiDiffSourceResolver._scheme,\n\t\t\tquery: JSON.stringify({ repositoryUri, groupId } satisfies UriFields),\n\t\t});\n\t}\n\n\tprivate static parseUri(uri: URI): { repositoryUri: URI; groupId: string } | undefined {\n\t\tif (uri.scheme !== ScmMultiDiffSourceResolver._scheme) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet query: UriFields;\n\t\ttry {\n\t\t\tquery = JSON.parse(uri.query) as UriFields;\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (typeof query !== 'object' || query === null) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst { repositoryUri, groupId } = query;\n\t\tif (typeof repositoryUri !== 'string' || typeof groupId !== 'string') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn { repositoryUri: URI.parse(repositoryUri), groupId };\n\t}\n\n\tconstructor(\n\t\t@ISCMService private readonly _scmService: ISCMService,\n\t\t@IActivityService private readonly _activityService: IActivityService,\n\t) {\n\t}\n\n\tcanHandleUri(uri: URI): boolean {\n\t\treturn ScmMultiDiffSourceResolver.parseUri(uri) !== undefined;\n\t}\n\n\tasync resolveDiffSource(uri: URI): Promise<IResolvedMultiDiffSource> {\n\t\tconst { repositoryUri, groupId } = ScmMultiDiffSourceResolver.parseUri(uri)!;\n\n\t\tconst repository = await waitForState(observableFromEvent(this,\n\t\t\tthis._scmService.onDidAddRepository,\n\t\t\t() => [...this._scmService.repositories].find(r => r.provider.rootUri?.toString() === repositoryUri.toString()))\n\t\t);\n\t\tconst group = await waitForState(observableFromEvent(this,\n\t\t\trepository.provider.onDidChangeResourceGroups,\n\t\t\t() => repository.provider.groups.find(g => g.id === groupId)\n\t\t));\n\n\t\tconst scmActivities = observableFromEvent(\n\t\t\tthis._activityService.onDidChangeActivity,\n\t\t\t() => [...this._activityService.getViewContainerActivities('workbench.view.scm')],\n\t\t);\n\t\tconst scmViewHasNoProgressBadge = scmActivities.map(activities => !activities.some(a => a.badge instanceof ProgressBadge));\n\t\tawait waitForState(scmViewHasNoProgressBadge, v => v);\n\n\t\treturn new ScmResolvedMultiDiffSource(group, repository);\n\t}\n}\n\nclass ScmResolvedMultiDiffSource implements IResolvedMultiDiffSource {\n\tprivate readonly _resources = observableFromEvent<MultiDiffEditorItem[]>(\n\t\tthis._group.onDidChangeResources,\n\t\t() => /** @description resources */ this._group.resources.map(e => new MultiDiffEditorItem(e.multiDiffEditorOriginalUri, e.multiDiffEditorModifiedUri, e.sourceUri))\n\t);\n\treadonly resources = new ValueWithChangeEventFromObservable(this._resources);\n\n\tpublic readonly contextKeys: Record<string, ContextKeyValue> = {\n\t\tscmResourceGroup: this._group.id,\n\t\tscmProvider: this._repository.provider.contextValue,\n\t};\n\n\tconstructor(\n\t\tprivate readonly _group: ISCMResourceGroup,\n\t\tprivate readonly _repository: ISCMRepository,\n\t) { }\n}\n\ninterface UriFields {\n\trepositoryUri: string;\n\tgroupId: string;\n}\n\nexport class ScmMultiDiffSourceResolverContribution extends Disposable {\n\n\tstatic readonly ID = 'workbench.contrib.scmMultiDiffSourceResolver';\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IMultiDiffSourceResolverService multiDiffSourceResolverService: IMultiDiffSourceResolverService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(multiDiffSourceResolverService.registerResolver(instantiationService.createInstance(ScmMultiDiffSourceResolver)));\n\t}\n}\n\ninterface OpenScmGroupActionOptions {\n\ttitle: string;\n\trepositoryUri: UriComponents;\n\tresourceGroupId: string;\n}\n\nexport class OpenScmGroupAction extends Action2 {\n\tpublic static async openMultiFileDiffEditor(editorService: IEditorService, label: string, repositoryRootUri: URI | undefined, resourceGroupId: string, options?: IMultiDiffEditorOptions) {\n\t\tif (!repositoryRootUri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst multiDiffSource = ScmMultiDiffSourceResolver.getMultiDiffSourceUri(repositoryRootUri.toString(), resourceGroupId);\n\t\treturn await editorService.openEditor({ label, multiDiffSource, options });\n\t}\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: '_workbench.openScmMultiDiffEditor',\n\t\t\ttitle: localize2('viewChanges', 'View Changes'),\n\t\t\tf1: false\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, options: OpenScmGroupActionOptions): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tawait OpenScmGroupAction.openMultiFileDiffEditor(editorService, options.title, URI.revive(options.repositoryUri), options.resourceGroupId);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
