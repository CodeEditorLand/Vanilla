{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/electron-sandbox/selectionClipboard.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { registerEditorContribution, EditorAction, ServicesAccessor, registerEditorAction, EditorContributionInstantiation } from '../../../../editor/browser/editorExtensions.js';\nimport { ConfigurationChangedEvent, EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { ICursorSelectionChangedEvent } from '../../../../editor/common/cursorEvents.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { IEditorContribution, Handler } from '../../../../editor/common/editorCommon.js';\nimport { EndOfLinePreference } from '../../../../editor/common/model.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { SelectionClipboardContributionID } from '../browser/selectionClipboard.js';\nimport { IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { addDisposableListener, onDidRegisterWindow } from '../../../../base/browser/dom.js';\n\nexport class SelectionClipboard extends Disposable implements IEditorContribution {\n\tprivate static readonly SELECTION_LENGTH_LIMIT = 65536;\n\n\tconstructor(editor: ICodeEditor, @IClipboardService clipboardService: IClipboardService) {\n\t\tsuper();\n\n\t\tif (platform.isLinux) {\n\t\t\tlet isEnabled = editor.getOption(EditorOption.selectionClipboard);\n\n\t\t\tthis._register(editor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => {\n\t\t\t\tif (e.hasChanged(EditorOption.selectionClipboard)) {\n\t\t\t\t\tisEnabled = editor.getOption(EditorOption.selectionClipboard);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst setSelectionToClipboard = this._register(new RunOnceScheduler(() => {\n\t\t\t\tif (!editor.hasModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst model = editor.getModel();\n\t\t\t\tlet selections = editor.getSelections();\n\t\t\t\tselections = selections.slice(0);\n\t\t\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t\t\tlet resultLength = 0;\n\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\tif (sel.isEmpty()) {\n\t\t\t\t\t\t// Only write if all cursors have selection\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tresultLength += model.getValueLengthInRange(sel);\n\t\t\t\t}\n\n\t\t\t\tif (resultLength > SelectionClipboard.SELECTION_LENGTH_LIMIT) {\n\t\t\t\t\t// This is a large selection!\n\t\t\t\t\t// => do not write it to the selection clipboard\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst result: string[] = [];\n\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\tresult.push(model.getValueInRange(sel, EndOfLinePreference.TextDefined));\n\t\t\t\t}\n\n\t\t\t\tconst textToCopy = result.join(model.getEOL());\n\t\t\t\tclipboardService.writeText(textToCopy, 'selection');\n\t\t\t}, 100));\n\n\t\t\tthis._register(editor.onDidChangeCursorSelection((e: ICursorSelectionChangedEvent) => {\n\t\t\t\tif (!isEnabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.source === 'restoreState') {\n\t\t\t\t\t// do not set selection to clipboard if this selection change\n\t\t\t\t\t// was caused by restoring editors...\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsetSelectionToClipboard.schedule();\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n}\n\nclass LinuxSelectionClipboardPastePreventer extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.linuxSelectionClipboardPastePreventer';\n\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.runAndSubscribe(onDidRegisterWindow, ({ window, disposables }) => {\n\t\t\tdisposables.add(addDisposableListener(window.document, 'mouseup', e => {\n\t\t\t\tif (e.button === 1) {\n\t\t\t\t\t// middle button\n\t\t\t\t\tconst config = configurationService.getValue<{ selectionClipboard: boolean }>('editor');\n\t\t\t\t\tif (!config.selectionClipboard) {\n\t\t\t\t\t\t// selection clipboard is disabled\n\t\t\t\t\t\t// try to stop the upcoming paste\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}, { window: mainWindow, disposables: this._store }));\n\t}\n}\n\nclass PasteSelectionClipboardAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.selectionClipboardPaste',\n\t\t\tlabel: nls.localize('actions.pasteSelectionClipboard', \"Paste Selection Clipboard\"),\n\t\t\talias: 'Paste Selection Clipboard',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\t// read selection clipboard\n\t\tconst text = await clipboardService.readText('selection');\n\n\t\teditor.trigger('keyboard', Handler.Paste, {\n\t\t\ttext: text,\n\t\t\tpasteOnNewLine: false,\n\t\t\tmulticursorText: null\n\t\t});\n\t}\n}\n\nregisterEditorContribution(SelectionClipboardContributionID, SelectionClipboard, EditorContributionInstantiation.Eager); // eager because it needs to listen to selection change events\nif (platform.isLinux) {\n\tregisterWorkbenchContribution2(LinuxSelectionClipboardPastePreventer.ID, LinuxSelectionClipboardPastePreventer, WorkbenchPhase.BlockRestore); // eager because it listens to mouse-up events globally\n\tregisterEditorAction(PasteSelectionClipboardAction);\n}\n"],
  "mappings": "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",
  "names": []
}
