{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/electron-sandbox/selectionClipboard.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\taddDisposableListener,\n\tonDidRegisterWindow,\n} from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\tEditorContributionInstantiation,\n\ttype ServicesAccessor,\n\tregisterEditorAction,\n\tregisterEditorContribution,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport {\n\ttype ConfigurationChangedEvent,\n\tEditorOption,\n} from \"../../../../editor/common/config/editorOptions.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { ICursorSelectionChangedEvent } from \"../../../../editor/common/cursorEvents.js\";\nimport {\n\tHandler,\n\ttype IEditorContribution,\n} from \"../../../../editor/common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport { EndOfLinePreference } from \"../../../../editor/common/model.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { SelectionClipboardContributionID } from \"../browser/selectionClipboard.js\";\n\nexport class SelectionClipboard\n\textends Disposable\n\timplements IEditorContribution\n{\n\tprivate static readonly SELECTION_LENGTH_LIMIT = 65536;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IClipboardService clipboardService: IClipboardService,\n\t) {\n\t\tsuper();\n\n\t\tif (platform.isLinux) {\n\t\t\tlet isEnabled = editor.getOption(EditorOption.selectionClipboard);\n\n\t\t\tthis._register(\n\t\t\t\teditor.onDidChangeConfiguration(\n\t\t\t\t\t(e: ConfigurationChangedEvent) => {\n\t\t\t\t\t\tif (e.hasChanged(EditorOption.selectionClipboard)) {\n\t\t\t\t\t\t\tisEnabled = editor.getOption(\n\t\t\t\t\t\t\t\tEditorOption.selectionClipboard,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst setSelectionToClipboard = this._register(\n\t\t\t\tnew RunOnceScheduler(() => {\n\t\t\t\t\tif (!editor.hasModel()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst model = editor.getModel();\n\t\t\t\t\tlet selections = editor.getSelections();\n\t\t\t\t\tselections = selections.slice(0);\n\t\t\t\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t\t\t\tlet resultLength = 0;\n\t\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\t\tif (sel.isEmpty()) {\n\t\t\t\t\t\t\t// Only write if all cursors have selection\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresultLength += model.getValueLengthInRange(sel);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tresultLength > SelectionClipboard.SELECTION_LENGTH_LIMIT\n\t\t\t\t\t) {\n\t\t\t\t\t\t// This is a large selection!\n\t\t\t\t\t\t// => do not write it to the selection clipboard\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: string[] = [];\n\t\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\tmodel.getValueInRange(\n\t\t\t\t\t\t\t\tsel,\n\t\t\t\t\t\t\t\tEndOfLinePreference.TextDefined,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst textToCopy = result.join(model.getEOL());\n\t\t\t\t\tclipboardService.writeText(textToCopy, \"selection\");\n\t\t\t\t}, 100),\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\teditor.onDidChangeCursorSelection(\n\t\t\t\t\t(e: ICursorSelectionChangedEvent) => {\n\t\t\t\t\t\tif (!isEnabled) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (e.source === \"restoreState\") {\n\t\t\t\t\t\t\t// do not set selection to clipboard if this selection change\n\t\t\t\t\t\t\t// was caused by restoring editors...\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSelectionToClipboard.schedule();\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n}\n\nclass LinuxSelectionClipboardPastePreventer\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID =\n\t\t\"workbench.contrib.linuxSelectionClipboardPastePreventer\";\n\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.runAndSubscribe(onDidRegisterWindow, ({ window, disposables }) => {\n\t\t\tdisposables.add(addDisposableListener(window.document, 'mouseup', e => {\n\t\t\t\tif (e.button === 1) {\n\t\t\t\t\t// middle button\n\t\t\t\t\tconst config = configurationService.getValue<{ selectionClipboard: boolean }>('editor');\n\t\t\t\t\tif (!config.selectionClipboard) {\n\t\t\t\t\t\t// selection clipboard is disabled\n\t\t\t\t\t\t// try to stop the upcoming paste\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}, { window: mainWindow, disposables: this._store }));\n\t}\n}\n\nclass PasteSelectionClipboardAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.selectionClipboardPaste\",\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"actions.pasteSelectionClipboard\",\n\t\t\t\t\"Paste Selection Clipboard\",\n\t\t\t),\n\t\t\talias: \"Paste Selection Clipboard\",\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tpublic async run(\n\t\taccessor: ServicesAccessor,\n\t\teditor: ICodeEditor,\n\t\targs: any,\n\t): Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\t// read selection clipboard\n\t\tconst text = await clipboardService.readText(\"selection\");\n\n\t\teditor.trigger(\"keyboard\", Handler.Paste, {\n\t\t\ttext: text,\n\t\t\tpasteOnNewLine: false,\n\t\t\tmulticursorText: null,\n\t\t});\n\t}\n}\n\nregisterEditorContribution(\n\tSelectionClipboardContributionID,\n\tSelectionClipboard,\n\tEditorContributionInstantiation.Eager,\n); // eager because it needs to listen to selection change events\nif (platform.isLinux) {\n\tregisterWorkbenchContribution2(\n\t\tLinuxSelectionClipboardPastePreventer.ID,\n\t\tLinuxSelectionClipboardPastePreventer,\n\t\tWorkbenchPhase.BlockRestore,\n\t); // eager because it listens to mouse-up events globally\n\tregisterEditorAction(PasteSelectionClipboardAction);\n}\n"],
  "mappings": "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",
  "names": []
}
