var h=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var d=(a,e,r,i)=>{for(var t=i>1?void 0:i?I(e,r):e,o=a.length-1,n;o>=0;o--)(n=a[o])&&(t=(i?n(e,r,t):n(t))||t);return i&&t&&h(e,r,t),t},p=(a,e)=>(r,i)=>e(r,i,a);import*as S from"../../../../nls.js";import{RunOnceScheduler as v}from"../../../../base/common/async.js";import{Disposable as g}from"../../../../base/common/lifecycle.js";import*as C from"../../../../base/common/platform.js";import{registerEditorContribution as x,EditorAction as T,registerEditorAction as L,EditorContributionInstantiation as w}from"../../../../editor/browser/editorExtensions.js";import{EditorOption as m}from"../../../../editor/common/config/editorOptions.js";import{Range as D}from"../../../../editor/common/core/range.js";import{Handler as O}from"../../../../editor/common/editorCommon.js";import{EndOfLinePreference as y}from"../../../../editor/common/model.js";import{IClipboardService as b}from"../../../../platform/clipboard/common/clipboardService.js";import{SelectionClipboardContributionID as _}from"../browser/selectionClipboard.js";import{WorkbenchPhase as k,registerWorkbenchContribution2 as R}from"../../../common/contributions.js";import{IConfigurationService as A}from"../../../../platform/configuration/common/configuration.js";import{EditorContextKeys as W}from"../../../../editor/common/editorContextKeys.js";import{mainWindow as N}from"../../../../base/browser/window.js";import{Event as M}from"../../../../base/common/event.js";import{addDisposableListener as P,onDidRegisterWindow as H}from"../../../../base/browser/dom.js";let s=class extends g{static SELECTION_LENGTH_LIMIT=65536;constructor(e,r){if(super(),C.isLinux){let i=e.getOption(m.selectionClipboard);this._register(e.onDidChangeConfiguration(o=>{o.hasChanged(m.selectionClipboard)&&(i=e.getOption(m.selectionClipboard))}));const t=this._register(new v(()=>{if(!e.hasModel())return;const o=e.getModel();let n=e.getSelections();n=n.slice(0),n.sort(D.compareRangesUsingStarts);let u=0;for(const l of n){if(l.isEmpty())return;u+=o.getValueLengthInRange(l)}if(u>s.SELECTION_LENGTH_LIMIT)return;const f=[];for(const l of n)f.push(o.getValueInRange(l,y.TextDefined));const E=f.join(o.getEOL());r.writeText(E,"selection")},100));this._register(e.onDidChangeCursorSelection(o=>{i&&o.source!=="restoreState"&&t.schedule()}))}}dispose(){super.dispose()}};s=d([p(1,b)],s);let c=class extends g{static ID="workbench.contrib.linuxSelectionClipboardPastePreventer";constructor(e){super(),this._register(M.runAndSubscribe(H,({window:r,disposables:i})=>{i.add(P(r.document,"mouseup",t=>{t.button===1&&(e.getValue("editor").selectionClipboard||t.preventDefault())}))},{window:N,disposables:this._store}))}};c=d([p(0,A)],c);class V extends T{constructor(){super({id:"editor.action.selectionClipboardPaste",label:S.localize("actions.pasteSelectionClipboard","Paste Selection Clipboard"),alias:"Paste Selection Clipboard",precondition:W.writable})}async run(e,r,i){const o=await e.get(b).readText("selection");r.trigger("keyboard",O.Paste,{text:o,pasteOnNewLine:!1,multicursorText:null})}}x(_,s,w.Eager),C.isLinux&&(R(c.ID,c,k.BlockRestore),L(V));export{s as SelectionClipboard};
