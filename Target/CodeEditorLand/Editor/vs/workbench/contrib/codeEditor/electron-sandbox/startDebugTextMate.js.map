{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/electron-sandbox/startDebugTextMate.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { ITextMateTokenizationService } from '../../../services/textMate/browser/textMateTokenizationFeature.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { INativeWorkbenchEnvironmentService } from '../../../services/environment/electron-sandbox/environmentService.js';\nimport { ILoggerService } from '../../../../platform/log/common/log.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\n\nclass StartDebugTextMate extends Action2 {\n\n\tprivate static resource = URI.parse(`inmemory:///tm-log.txt`);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.startDebugTextMate',\n\t\t\ttitle: nls.localize2('startDebugTextMate', \"Start TextMate Syntax Grammar Logging\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tprivate _getOrCreateModel(modelService: IModelService): ITextModel {\n\t\tconst model = modelService.getModel(StartDebugTextMate.resource);\n\t\tif (model) {\n\t\t\treturn model;\n\t\t}\n\t\treturn modelService.createModel('', null, StartDebugTextMate.resource);\n\t}\n\n\tprivate _append(model: ITextModel, str: string) {\n\t\tconst lineCount = model.getLineCount();\n\t\tmodel.applyEdits([{\n\t\t\trange: new Range(lineCount, Constants.MAX_SAFE_SMALL_INTEGER, lineCount, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t\ttext: str\n\t\t}]);\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst textMateService = accessor.get(ITextMateTokenizationService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst hostService = accessor.get(IHostService);\n\t\tconst environmentService = accessor.get(INativeWorkbenchEnvironmentService);\n\t\tconst loggerService = accessor.get(ILoggerService);\n\t\tconst fileService = accessor.get(IFileService);\n\n\t\tconst pathInTemp = joinPath(environmentService.tmpDir, `vcode-tm-log-${generateUuid()}.txt`);\n\t\tawait fileService.createFile(pathInTemp);\n\t\tconst logger = loggerService.createLogger(pathInTemp, { name: 'debug textmate' });\n\t\tconst model = this._getOrCreateModel(modelService);\n\t\tconst append = (str: string) => {\n\t\t\tthis._append(model, str + '\\n');\n\t\t\tscrollEditor();\n\t\t\tlogger.info(str);\n\t\t\tlogger.flush();\n\t\t};\n\t\tawait hostService.openWindow([{ fileUri: pathInTemp }], { forceNewWindow: true });\n\t\tconst textEditorPane = await editorService.openEditor({\n\t\t\tresource: model.uri,\n\t\t\toptions: { pinned: true }\n\t\t});\n\t\tif (!textEditorPane) {\n\t\t\treturn;\n\t\t}\n\t\tconst scrollEditor = () => {\n\t\t\tconst editors = codeEditorService.listCodeEditors();\n\t\t\tfor (const editor of editors) {\n\t\t\t\tif (editor.hasModel()) {\n\t\t\t\t\tif (editor.getModel().uri.toString() === StartDebugTextMate.resource.toString()) {\n\t\t\t\t\t\teditor.revealLine(editor.getModel().getLineCount());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tappend(`// Open the file you want to test to the side and watch here`);\n\t\tappend(`// Output mirrored at ${pathInTemp}`);\n\n\t\ttextMateService.startDebugMode(\n\t\t\t(str) => {\n\t\t\t\tthis._append(model, str + '\\n');\n\t\t\t\tscrollEditor();\n\t\t\t\tlogger.info(str);\n\t\t\t\tlogger.flush();\n\t\t\t},\n\t\t\t() => {\n\n\t\t\t}\n\t\t);\n\t}\n}\n\nregisterAction2(StartDebugTextMate);\n"],
  "mappings": "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",
  "names": []
}
