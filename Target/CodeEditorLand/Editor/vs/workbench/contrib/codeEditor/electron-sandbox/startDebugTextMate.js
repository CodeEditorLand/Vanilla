import*as M from"../../../../nls.js";import{Range as E}from"../../../../editor/common/core/range.js";import{Action2 as I,registerAction2 as h}from"../../../../platform/actions/common/actions.js";import{Categories as x}from"../../../../platform/action/common/actionCommonCategories.js";import{ITextMateTokenizationService as A}from"../../../services/textMate/browser/textMateTokenizationFeature.js";import{IModelService as L}from"../../../../editor/common/services/model.js";import{IEditorService as w}from"../../../services/editor/common/editorService.js";import{URI as C}from"../../../../base/common/uri.js";import{generateUuid as T}from"../../../../base/common/uuid.js";import{ICodeEditorService as _}from"../../../../editor/browser/services/codeEditorService.js";import{Constants as p}from"../../../../base/common/uint.js";import{IHostService as y}from"../../../services/host/browser/host.js";import{INativeWorkbenchEnvironmentService as F}from"../../../services/environment/electron-sandbox/environmentService.js";import{ILoggerService as N}from"../../../../platform/log/common/log.js";import{joinPath as O}from"../../../../base/common/resources.js";import{IFileService as R}from"../../../../platform/files/common/files.js";class r extends I{static resource=C.parse("inmemory:///tm-log.txt");constructor(){super({id:"editor.action.startDebugTextMate",title:M.localize2("startDebugTextMate","Start TextMate Syntax Grammar Logging"),category:x.Developer,f1:!0})}_getOrCreateModel(e){const o=e.getModel(r.resource);return o||e.createModel("",null,r.resource)}_append(e,o){const i=e.getLineCount();e.applyEdits([{range:new E(i,p.MAX_SAFE_SMALL_INTEGER,i,p.MAX_SAFE_SMALL_INTEGER),text:o}])}async run(e){const o=e.get(A),i=e.get(L),g=e.get(w),l=e.get(_),f=e.get(y),u=e.get(F),v=e.get(N),S=e.get(R),n=O(u.tmpDir,`vcode-tm-log-${T()}.txt`);await S.createFile(n);const c=v.createLogger(n,{name:"debug textmate"}),s=this._getOrCreateModel(i),a=t=>{this._append(s,t+`
`),d(),c.info(t),c.flush()};if(await f.openWindow([{fileUri:n}],{forceNewWindow:!0}),!await g.openEditor({resource:s.uri,options:{pinned:!0}}))return;const d=()=>{const t=l.listCodeEditors();for(const m of t)m.hasModel()&&m.getModel().uri.toString()===r.resource.toString()&&m.revealLine(m.getModel().getLineCount())};a("// Open the file you want to test to the side and watch here"),a(`// Output mirrored at ${n}`),o.startDebugMode(t=>{this._append(s,t+`
`),d(),c.info(t),c.flush()},()=>{})}}h(r);
