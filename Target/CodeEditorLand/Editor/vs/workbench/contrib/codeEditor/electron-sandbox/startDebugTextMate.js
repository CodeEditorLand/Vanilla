import{joinPath as M}from"../../../../base/common/resources.js";import{Constants as p}from"../../../../base/common/uint.js";import{URI as E}from"../../../../base/common/uri.js";import{generateUuid as I}from"../../../../base/common/uuid.js";import{ICodeEditorService as h}from"../../../../editor/browser/services/codeEditorService.js";import{Range as x}from"../../../../editor/common/core/range.js";import{IModelService as A}from"../../../../editor/common/services/model.js";import*as L from"../../../../nls.js";import{Categories as w}from"../../../../platform/action/common/actionCommonCategories.js";import{Action2 as C,registerAction2 as T}from"../../../../platform/actions/common/actions.js";import{IFileService as y}from"../../../../platform/files/common/files.js";import{ILoggerService as _}from"../../../../platform/log/common/log.js";import{IEditorService as F}from"../../../services/editor/common/editorService.js";import{INativeWorkbenchEnvironmentService as N}from"../../../services/environment/electron-sandbox/environmentService.js";import{IHostService as O}from"../../../services/host/browser/host.js";import{ITextMateTokenizationService as R}from"../../../services/textMate/browser/textMateTokenizationFeature.js";class r extends C{static resource=E.parse("inmemory:///tm-log.txt");constructor(){super({id:"editor.action.startDebugTextMate",title:L.localize2("startDebugTextMate","Start TextMate Syntax Grammar Logging"),category:w.Developer,f1:!0})}_getOrCreateModel(e){const o=e.getModel(r.resource);return o||e.createModel("",null,r.resource)}_append(e,o){const i=e.getLineCount();e.applyEdits([{range:new x(i,p.MAX_SAFE_SMALL_INTEGER,i,p.MAX_SAFE_SMALL_INTEGER),text:o}])}async run(e){const o=e.get(R),i=e.get(A),g=e.get(F),l=e.get(h),f=e.get(O),u=e.get(N),v=e.get(_),S=e.get(y),n=M(u.tmpDir,`vcode-tm-log-${I()}.txt`);await S.createFile(n);const m=v.createLogger(n,{name:"debug textmate"}),c=this._getOrCreateModel(i),s=t=>{this._append(c,t+`
`),d(),m.info(t),m.flush()};if(await f.openWindow([{fileUri:n}],{forceNewWindow:!0}),!await g.openEditor({resource:c.uri,options:{pinned:!0}}))return;const d=()=>{const t=l.listCodeEditors();for(const a of t)a.hasModel()&&a.getModel().uri.toString()===r.resource.toString()&&a.revealLine(a.getModel().getLineCount())};s("// Open the file you want to test to the side and watch here"),s(`// Output mirrored at ${n}`),o.startDebugMode(t=>{this._append(c,t+`
`),d(),m.info(t),m.flush()},()=>{})}}T(r);
