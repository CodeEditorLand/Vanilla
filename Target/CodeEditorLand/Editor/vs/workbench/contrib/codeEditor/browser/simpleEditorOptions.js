import"../../../../../vs/base/common/lifecycle.js";import{EditorExtensionsRegistry as l}from"../../../../../vs/editor/browser/editorExtensions.js";import"../../../../../vs/editor/browser/widget/codeEditor/codeEditorWidget.js";import"../../../../../vs/editor/common/config/editorOptions.js";import{ContextMenuController as s}from"../../../../../vs/editor/contrib/contextmenu/browser/contextmenu.js";import{SnippetController2 as d}from"../../../../../vs/editor/contrib/snippet/browser/snippetController2.js";import{SuggestController as a}from"../../../../../vs/editor/contrib/suggest/browser/suggestController.js";import"../../../../../vs/platform/configuration/common/configuration.js";import{editorSelectionBackground as u,inputBackground as p,inputForeground as g,selectionBackground as m}from"../../../../../vs/platform/theme/common/colorRegistry.js";import{registerThemingParticipant as c}from"../../../../../vs/platform/theme/common/themeService.js";import{MenuPreventer as f}from"../../../../../vs/workbench/contrib/codeEditor/browser/menuPreventer.js";import{SelectionClipboardContributionID as b}from"../../../../../vs/workbench/contrib/codeEditor/browser/selectionClipboard.js";import{TabCompletionController as C}from"../../../../../vs/workbench/contrib/snippets/browser/tabCompletion.js";function H(o){return{wordWrap:"on",overviewRulerLanes:0,glyphMargin:!1,lineNumbers:"off",folding:!1,selectOnLineNumbers:!1,hideCursorInOverviewRuler:!0,selectionHighlight:!1,scrollbar:{horizontal:"hidden",alwaysConsumeMouseWheel:!1},lineDecorationsWidth:0,overviewRulerBorder:!1,scrollBeyondLastLine:!1,renderLineHighlight:"none",fixedOverflowWidgets:!0,acceptSuggestionOnEnter:"smart",dragAndDrop:!1,revealHorizontalRightPadding:5,minimap:{enabled:!1},guides:{indentation:!1},accessibilitySupport:o.getValue("editor.accessibilitySupport"),cursorBlinking:o.getValue("editor.cursorBlinking")}}function P(){return{isSimpleWidget:!0,contributions:l.getSomeEditorContributions([f.ID,b,s.ID,a.ID,d.ID,C.ID])}}function z(o){return c((r,e)=>{const t=r.getColor(m);if(t){const i=r.getColor(p);i&&(e.addRule(`${o} .monaco-editor-background { background-color: ${i}; } `),e.addRule(`${o} .monaco-editor .selected-text { background-color: ${i.transparent(.4)}; }`));const n=r.getColor(g);n&&e.addRule(`${o} .monaco-editor .view-line span.inline-selected-text { color: ${n}; }`),e.addRule(`${o} .monaco-editor .focused .selected-text { background-color: ${t}; }`)}else e.addRule(`${o} .monaco-editor .focused .selected-text { background-color: ${r.getColor(u)}; }`)})}export{P as getSimpleCodeEditorWidgetOptions,H as getSimpleEditorOptions,z as setupSimpleEditorSelectionStyling};
