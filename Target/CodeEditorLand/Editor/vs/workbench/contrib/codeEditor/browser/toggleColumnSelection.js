import{CoreNavigationCommands as g}from"../../../../editor/browser/coreCommands.js";import{ICodeEditorService as S}from"../../../../editor/browser/services/codeEditorService.js";import{EditorOption as p}from"../../../../editor/common/config/editorOptions.js";import{Position as s}from"../../../../editor/common/core/position.js";import{Selection as v}from"../../../../editor/common/core/selection.js";import{localize as w,localize2 as V}from"../../../../nls.js";import{Action2 as b,MenuId as P,registerAction2 as E}from"../../../../platform/actions/common/actions.js";import{IConfigurationService as M}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as N}from"../../../../platform/contextkey/common/contextkey.js";class d extends b{static ID="editor.action.toggleColumnSelection";constructor(){super({id:d.ID,title:{...V("toggleColumnSelection","Toggle Column Selection Mode"),mnemonicTitle:w({key:"miColumnSelection",comment:["&& denotes a mnemonic"]},"Column &&Selection Mode")},f1:!0,toggled:N.equals("config.editor.columnSelection",!0),menu:{id:P.MenubarSelectionMenu,group:"4_config",order:2}})}async run(n){const i=n.get(M),a=n.get(S),u=i.getValue("editor.columnSelection"),t=this._getCodeEditor(a);await i.updateValue("editor.columnSelection",!u);const C=i.getValue("editor.columnSelection");if(!t||t!==this._getCodeEditor(a)||u===C||!t.hasModel()||typeof u!="boolean"||typeof C!="boolean")return;const o=t._getViewModel();if(t.getOption(p.columnSelection)){const e=t.getSelection(),l=new s(e.selectionStartLineNumber,e.selectionStartColumn),c=o.coordinatesConverter.convertModelPositionToViewPosition(l),m=new s(e.positionLineNumber,e.positionColumn),r=o.coordinatesConverter.convertModelPositionToViewPosition(m);g.MoveTo.runCoreEditorCommand(o,{position:l,viewPosition:c});const f=o.cursorConfig.visibleColumnFromColumn(o,r);g.ColumnSelect.runCoreEditorCommand(o,{position:m,viewPosition:r,doColumnSelect:!0,mouseColumn:f+1})}else{const e=o.getCursorColumnSelectData(),l=o.cursorConfig.columnFromVisibleColumn(o,e.fromViewLineNumber,e.fromViewVisualColumn),c=o.coordinatesConverter.convertViewPositionToModelPosition(new s(e.fromViewLineNumber,l)),m=o.cursorConfig.columnFromVisibleColumn(o,e.toViewLineNumber,e.toViewVisualColumn),r=o.coordinatesConverter.convertViewPositionToModelPosition(new s(e.toViewLineNumber,m));t.setSelection(new v(c.lineNumber,c.column,r.lineNumber,r.column))}}_getCodeEditor(n){const i=n.getFocusedCodeEditor();return i||n.getActiveCodeEditor()}}E(d);export{d as ToggleColumnSelectionAction};
