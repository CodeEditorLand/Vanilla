{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/menuPreventer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorContributionInstantiation,\n\tregisterEditorContribution,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport type { IEditorContribution } from \"../../../../editor/common/editorCommon.js\";\n\n/**\n * Prevents the top-level menu from showing up when doing Alt + Click in the editor\n */\nexport class MenuPreventer extends Disposable implements IEditorContribution {\n\tpublic static readonly ID = \"editor.contrib.menuPreventer\";\n\n\tprivate _editor: ICodeEditor;\n\tprivate _altListeningMouse: boolean;\n\tprivate _altMouseTriggered: boolean;\n\n\tconstructor(editor: ICodeEditor) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._altListeningMouse = false;\n\t\tthis._altMouseTriggered = false;\n\n\t\t// A global crossover handler to prevent menu bar from showing up\n\t\t// When <alt> is hold, we will listen to mouse events and prevent\n\t\t// the release event up <alt> if the mouse is triggered.\n\n\t\tthis._register(\n\t\t\tthis._editor.onMouseDown((e) => {\n\t\t\t\tif (this._altListeningMouse) {\n\t\t\t\t\tthis._altMouseTriggered = true;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._editor.onKeyDown((e) => {\n\t\t\t\tif (e.equals(KeyMod.Alt)) {\n\t\t\t\t\tif (!this._altListeningMouse) {\n\t\t\t\t\t\tthis._altMouseTriggered = false;\n\t\t\t\t\t}\n\t\t\t\t\tthis._altListeningMouse = true;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._editor.onKeyUp((e) => {\n\t\t\t\tif (e.equals(KeyMod.Alt)) {\n\t\t\t\t\tif (this._altMouseTriggered) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\tthis._altListeningMouse = false;\n\t\t\t\t\tthis._altMouseTriggered = false;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n}\n\nregisterEditorContribution(\n\tMenuPreventer.ID,\n\tMenuPreventer,\n\tEditorContributionInstantiation.BeforeFirstInteraction,\n);\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAE3B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAMA,MAAM,sBAAsB,WAA0C;AAAA,EAjB7E,OAiB6E;AAAA;AAAA;AAAA,EAC5E,OAAuB,KAAK;AAAA,EAEpB;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,QAAqB;AAChC,UAAM;AACN,SAAK,UAAU;AACf,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAM1B,SAAK;AAAA,MACJ,KAAK,QAAQ,YAAY,CAAC,MAAM;AAC/B,YAAI,KAAK,oBAAoB;AAC5B,eAAK,qBAAqB;AAAA,QAC3B;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,KAAK,QAAQ,UAAU,CAAC,MAAM;AAC7B,YAAI,EAAE,OAAO,OAAO,GAAG,GAAG;AACzB,cAAI,CAAC,KAAK,oBAAoB;AAC7B,iBAAK,qBAAqB;AAAA,UAC3B;AACA,eAAK,qBAAqB;AAAA,QAC3B;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,KAAK,QAAQ,QAAQ,CAAC,MAAM;AAC3B,YAAI,EAAE,OAAO,OAAO,GAAG,GAAG;AACzB,cAAI,KAAK,oBAAoB;AAC5B,cAAE,eAAe;AAAA,UAClB;AACA,eAAK,qBAAqB;AAC1B,eAAK,qBAAqB;AAAA,QAC3B;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAEA;AAAA,EACC,cAAc;AAAA,EACd;AAAA,EACA,gCAAgC;AACjC;",
  "names": []
}
