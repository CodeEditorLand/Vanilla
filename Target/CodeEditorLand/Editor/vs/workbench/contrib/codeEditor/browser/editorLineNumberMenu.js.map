{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/editorLineNumberMenu.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type IAction, Separator } from \"../../../../base/common/actions.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isMacintosh } from \"../../../../base/common/platform.js\";\nimport {\n\ttype ICodeEditor,\n\ttype IEditorMouseEvent,\n\tMouseTargetType,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorContributionInstantiation,\n\tregisterEditorContribution,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport type { IEditorContribution } from \"../../../../editor/common/editorCommon.js\";\nimport {\n\tIMenuService,\n\tMenuId,\n\ttype MenuItemAction,\n\ttype SubmenuItemAction,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { TextEditorSelectionSource } from \"../../../../platform/editor/common/editor.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\n\nexport interface IGutterActionsGenerator {\n\t(\n\t\tcontext: {\n\t\t\tlineNumber: number;\n\t\t\teditor: ICodeEditor;\n\t\t\taccessor: ServicesAccessor;\n\t\t},\n\t\tresult: { push(action: IAction, group?: string): void },\n\t): void;\n}\n\nexport class GutterActionsRegistryImpl {\n\tprivate _registeredGutterActionsGenerators: Set<IGutterActionsGenerator> =\n\t\tnew Set();\n\n\t/**\n\t *\n\t * This exists solely to allow the debug and test contributions to add actions to the gutter context menu\n\t * which cannot be trivially expressed using when clauses and therefore cannot be statically registered.\n\t * If you want an action to show up in the gutter context menu, you should generally use MenuId.EditorLineNumberMenu instead.\n\t */\n\tpublic registerGutterActionsGenerator(\n\t\tgutterActionsGenerator: IGutterActionsGenerator,\n\t): IDisposable {\n\t\tthis._registeredGutterActionsGenerators.add(gutterActionsGenerator);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._registeredGutterActionsGenerators.delete(\n\t\t\t\t\tgutterActionsGenerator,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic getGutterActionsGenerators(): IGutterActionsGenerator[] {\n\t\treturn Array.from(this._registeredGutterActionsGenerators.values());\n\t}\n}\n\nRegistry.add(\"gutterActionsRegistry\", new GutterActionsRegistryImpl());\nexport const GutterActionsRegistry: GutterActionsRegistryImpl = Registry.as(\n\t\"gutterActionsRegistry\",\n);\n\nexport class EditorLineNumberContextMenu\n\textends Disposable\n\timplements IEditorContribution\n{\n\tstatic readonly ID = \"workbench.contrib.editorLineNumberContextMenu\";\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.editor.onMouseDown((e: IEditorMouseEvent) => this.doShow(e, false)));\n\n\t}\n\n\tpublic show(e: IEditorMouseEvent) {\n\t\tthis.doShow(e, true);\n\t}\n\n\tprivate doShow(e: IEditorMouseEvent, force: boolean) {\n\t\tconst model = this.editor.getModel();\n\n\t\t// on macOS ctrl+click is interpreted as right click\n\t\tif (\n\t\t\t(!e.event.rightButton &&\n\t\t\t\t!(isMacintosh && e.event.leftButton && e.event.ctrlKey) &&\n\t\t\t\t!force) ||\n\t\t\t(e.target.type !== MouseTargetType.GUTTER_LINE_NUMBERS &&\n\t\t\t\te.target.type !== MouseTargetType.GUTTER_GLYPH_MARGIN) ||\n\t\t\t!e.target.position ||\n\t\t\t!model\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineNumber = e.target.position.lineNumber;\n\n\t\tconst contextKeyService = this.contextKeyService.createOverlay([\n\t\t\t[\"editorLineNumber\", lineNumber],\n\t\t]);\n\t\tconst menu = this.menuService.createMenu(\n\t\t\tMenuId.EditorLineNumberContext,\n\t\t\tcontextKeyService,\n\t\t);\n\n\t\tconst allActions: [\n\t\t\tstring,\n\t\t\t(IAction | MenuItemAction | SubmenuItemAction)[],\n\t\t][] = [];\n\n\t\tthis.instantiationService.invokeFunction((accessor) => {\n\t\t\tfor (const generator of GutterActionsRegistry.getGutterActionsGenerators()) {\n\t\t\t\tconst collectedActions = new Map<string, IAction[]>();\n\t\t\t\tgenerator(\n\t\t\t\t\t{ lineNumber, editor: this.editor, accessor },\n\t\t\t\t\t{\n\t\t\t\t\t\tpush: (action: IAction, group = \"navigation\") => {\n\t\t\t\t\t\t\tconst actions = collectedActions.get(group) ?? [];\n\t\t\t\t\t\t\tactions.push(action);\n\t\t\t\t\t\t\tcollectedActions.set(group, actions);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tfor (const [group, actions] of collectedActions.entries()) {\n\t\t\t\t\tallActions.push([group, actions]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tallActions.sort((a, b) => a[0].localeCompare(b[0]));\n\n\t\t\tconst menuActions = menu.getActions({\n\t\t\t\targ: { lineNumber, uri: model.uri },\n\t\t\t\tshouldForwardArgs: true,\n\t\t\t});\n\t\t\tallActions.push(...menuActions);\n\n\t\t\t// if the current editor selections do not contain the target line number,\n\t\t\t// set the selection to the clicked line number\n\t\t\tif (e.target.type === MouseTargetType.GUTTER_LINE_NUMBERS) {\n\t\t\t\tconst currentSelections = this.editor.getSelections();\n\t\t\t\tconst lineRange = {\n\t\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendColumn: model.getLineLength(lineNumber) + 1,\n\t\t\t\t};\n\t\t\t\tconst containsSelection = currentSelections?.some(\n\t\t\t\t\t(selection) =>\n\t\t\t\t\t\t!selection.isEmpty() &&\n\t\t\t\t\t\tselection.intersectRanges(lineRange) !== null,\n\t\t\t\t);\n\t\t\t\tif (!containsSelection) {\n\t\t\t\t\tthis.editor.setSelection(\n\t\t\t\t\t\tlineRange,\n\t\t\t\t\t\tTextEditorSelectionSource.PROGRAMMATIC,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\tgetAnchor: () => e.event,\n\t\t\t\tgetActions: () =>\n\t\t\t\t\tSeparator.join(...allActions.map((a) => a[1])),\n\t\t\t\tonHide: () => menu.dispose(),\n\t\t\t});\n\t\t});\n\t}\n}\n\nregisterEditorContribution(\n\tEditorLineNumberContextMenu.ID,\n\tEditorLineNumberContextMenu,\n\tEditorContributionInstantiation.AfterFirstRender,\n);\n"],
  "mappings": "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",
  "names": []
}
