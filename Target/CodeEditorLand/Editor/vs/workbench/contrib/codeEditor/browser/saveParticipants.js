var _=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var f=(g,e,t,r)=>{for(var i=r>1?void 0:r?D(e,t):e,n=g.length-1,a;n>=0;n--)(a=g[n])&&(i=(r?a(e,t,i):a(i))||i);return r&&i&&_(e,t,i),i},c=(g,e)=>(t,r)=>e(t,r,g);import{CancellationTokenSource as V}from"../../../../base/common/cancellation.js";import{HierarchicalKind as T}from"../../../../base/common/hierarchicalKind.js";import{Disposable as k}from"../../../../base/common/lifecycle.js";import{StopWatch as K}from"../../../../base/common/stopwatch.js";import*as H from"../../../../base/common/strings.js";import{isCodeEditor as j}from"../../../../editor/browser/editorBrowser.js";import{ICodeEditorService as S}from"../../../../editor/browser/services/codeEditorService.js";import{trimTrailingWhitespace as U}from"../../../../editor/common/commands/trimTrailingWhitespaceCommand.js";import{EditOperation as w}from"../../../../editor/common/core/editOperation.js";import{Position as R}from"../../../../editor/common/core/position.js";import{Range as q}from"../../../../editor/common/core/range.js";import"../../../../editor/common/core/selection.js";import{CodeActionTriggerType as B}from"../../../../editor/common/languages.js";import"../../../../editor/common/model.js";import{ILanguageFeaturesService as X}from"../../../../editor/common/services/languageFeatures.js";import{ApplyCodeActionReason as z,applyCodeAction as G,getCodeActions as Q}from"../../../../editor/contrib/codeAction/browser/codeAction.js";import{CodeActionKind as F,CodeActionTriggerSource as $}from"../../../../editor/contrib/codeAction/common/types.js";import{FormattingMode as L,formatDocumentRangesWithSelectedProvider as J,formatDocumentWithSelectedProvider as N}from"../../../../editor/contrib/format/browser/format.js";import{SnippetController2 as Y}from"../../../../editor/contrib/snippet/browser/snippetController2.js";import{localize as M}from"../../../../nls.js";import{IConfigurationService as m}from"../../../../platform/configuration/common/configuration.js";import"../../../../platform/extensions/common/extensions.js";import{IInstantiationService as O}from"../../../../platform/instantiation/common/instantiation.js";import{Progress as W}from"../../../../platform/progress/common/progress.js";import{Registry as Z}from"../../../../platform/registry/common/platform.js";import{ITelemetryService as ee}from"../../../../platform/telemetry/common/telemetry.js";import{Extensions as te}from"../../../common/contributions.js";import{SaveReason as p}from"../../../common/editor.js";import{getModifiedRanges as ie}from"../../format/browser/formatModified.js";import{IEditorService as re}from"../../../services/editor/common/editorService.js";import{IHostService as oe}from"../../../services/host/browser/host.js";import{LifecyclePhase as ne}from"../../../services/lifecycle/common/lifecycle.js";import{ITextFileService as ae}from"../../../services/textfile/common/textfiles.js";let h=class{constructor(e,t){this.configurationService=e;this.codeEditorService=t}async participate(e,t){if(!e.textEditorModel)return;const r=this.configurationService.getValue("files.trimTrailingWhitespace",{overrideIdentifier:e.textEditorModel.getLanguageId(),resource:e.resource}),i=this.configurationService.getValue("files.trimTrailingWhitespaceInRegexAndStrings",{overrideIdentifier:e.textEditorModel.getLanguageId(),resource:e.resource});r&&this.doTrimTrailingWhitespace(e.textEditorModel,t.reason===p.AUTO,i)}doTrimTrailingWhitespace(e,t,r){let i=[],n=[];const a=b(e,this.codeEditorService);if(a&&(i=a.getSelections(),t)){n=i.map(s=>s.getPosition());const o=Y.get(a)?.getSessionEnclosingRange();if(o)for(let s=o.startLineNumber;s<=o.endLineNumber;s++)n.push(new R(s,e.getLineMaxColumn(s)))}const d=U(e,n,r);d.length&&e.pushEditOperations(i,d,o=>i)}};h=f([c(0,m),c(1,S)],h);function b(g,e){let t=null;if(g.isAttachedToEditor()){for(const r of e.listCodeEditors())if(r.hasModel()&&r.getModel()===g){if(r.hasTextFocus())return r;t=r}}return t}let I=class{constructor(e,t){this.configurationService=e;this.codeEditorService=t}async participate(e,t){e.textEditorModel&&this.configurationService.getValue("files.insertFinalNewline",{overrideIdentifier:e.textEditorModel.getLanguageId(),resource:e.resource})&&this.doInsertFinalNewLine(e.textEditorModel)}doInsertFinalNewLine(e){const t=e.getLineCount(),r=e.getLineContent(t),i=H.lastNonWhitespaceIndex(r)===-1;if(!t||i)return;const n=[w.insert(new R(t,e.getLineMaxColumn(t)),e.getEOL())],a=b(e,this.codeEditorService);a?a.executeEdits("insertFinalNewLine",n,a.getSelections()):e.pushEditOperations([],n,()=>null)}};I=f([c(0,m),c(1,S)],I);let y=class{constructor(e,t){this.configurationService=e;this.codeEditorService=t}async participate(e,t){e.textEditorModel&&this.configurationService.getValue("files.trimFinalNewlines",{overrideIdentifier:e.textEditorModel.getLanguageId(),resource:e.resource})&&this.doTrimFinalNewLines(e.textEditorModel,t.reason===p.AUTO)}findLastNonEmptyLine(e){for(let t=e.getLineCount();t>=1;t--)if(e.getLineLength(t)>0)return t;return 0}doTrimFinalNewLines(e,t){const r=e.getLineCount();if(r===1)return;let i=[],n=0;const a=b(e,this.codeEditorService);if(a&&(i=a.getSelections(),t))for(let l=0,u=i.length;l<u;l++){const E=i[l].positionLineNumber;E>n&&(n=E)}const d=this.findLastNonEmptyLine(e),o=Math.max(d+1,n+1),s=e.validateRange(new q(o,1,r,e.getLineMaxColumn(r)));s.isEmpty()||(e.pushEditOperations(i,[w.delete(s)],l=>i),a?.setSelections(i))}};y=f([c(0,m),c(1,S)],y);let x=class{constructor(e,t,r){this.configurationService=e;this.codeEditorService=t;this.instantiationService=r}async participate(e,t,r,i){if(!e.textEditorModel||t.reason===p.AUTO)return;const n=e.textEditorModel,a={overrideIdentifier:n.getLanguageId(),resource:n.uri},d=new W(u=>{r.report({message:M({key:"formatting2",comment:["[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}"]},"Running '{0}' Formatter ([configure]({1})).",u.displayName||u.extensionId&&u.extensionId.value||"???","command:workbench.action.openSettings?%5B%22editor.formatOnSave%22%5D")})});if(!this.configurationService.getValue("editor.formatOnSave",a))return;const s=b(n,this.codeEditorService)||n,l=this.configurationService.getValue("editor.formatOnSaveMode",a);if(l==="file")await this.instantiationService.invokeFunction(N,s,L.Silent,d,i);else{const u=await this.instantiationService.invokeFunction(ie,j(s)?s.getModel():s);u===null&&l==="modificationsIfAvailable"?await this.instantiationService.invokeFunction(N,s,L.Silent,d,i):u&&await this.instantiationService.invokeFunction(J,s,u,L.Silent,d,i,!1)}}};x=f([c(0,m),c(1,S),c(2,O)],x);let C=class extends k{constructor(t,r,i,n,a,d,o){super();this.configurationService=t;this.instantiationService=r;this.languageFeaturesService=i;this.hostService=n;this.editorService=a;this.codeEditorService=d;this.telemetryService=o;this._register(this.hostService.onDidChangeFocus(()=>{this.triggerCodeActionsCommand()})),this._register(this.editorService.onDidActiveEditorChange(()=>{this.triggerCodeActionsCommand()}))}async triggerCodeActionsCommand(){if(this.configurationService.getValue("editor.codeActions.triggerOnFocusChange")&&this.configurationService.getValue("files.autoSave")==="afterDelay"){const t=this.codeEditorService.getActiveCodeEditor()?.getModel();if(!t)return;const r={overrideIdentifier:t.getLanguageId(),resource:t.uri},i=this.configurationService.getValue("editor.codeActionsOnSave",r);if(!i||Array.isArray(i))return;const n=Object.keys(i).filter(o=>i[o]&&i[o]==="always"&&F.Source.contains(new T(o))),a=new V,d=[];for(const o of n)d.push(new T(o));await this.applyOnSaveActions(t,d,[],W.None,a.token)}}async participate(t,r,i,n){if(!t.textEditorModel)return;const a=t.textEditorModel,d={overrideIdentifier:a.getLanguageId(),resource:a.uri},o=this.configurationService.getValue("editor.codeActionsOnSave",d);if(!o||r.reason===p.AUTO||r.reason!==p.EXPLICIT&&Array.isArray(o))return;const s=Array.isArray(o)?o:Object.keys(o).filter(v=>o[v]&&o[v]!=="never"),l=this.createCodeActionsOnSave(s);if(Array.isArray(o)||l.sort((v,P)=>F.SourceFixAll.contains(v)?F.SourceFixAll.contains(P)?0:-1:F.SourceFixAll.contains(P)?1:0),!l.length)return;const u=Array.isArray(o)?[]:Object.keys(o).filter(v=>o[v]==="never"||!1).map(v=>new T(v));i.report({message:M("codeaction","Quick Fixes")});const E=Array.isArray(o)?l:l.filter(v=>o[v.value]==="always"||(o[v.value]==="explicit"||o[v.value]===!0)&&r.reason===p.EXPLICIT);await this.applyOnSaveActions(a,E,u,i,n)}createCodeActionsOnSave(t){const r=t.map(i=>new T(i));return r.filter(i=>r.every(n=>n.equals(i)||!n.contains(i)))}async applyOnSaveActions(t,r,i,n,a){const d=new class{_names=new Set;_report(){n.report({message:M({key:"codeaction.get2",comment:["[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}"]},"Getting code actions from '{0}' ([configure]({1})).",[...this._names].map(o=>`'${o}'`).join(", "),"command:workbench.action.openSettings?%5B%22editor.codeActionsOnSave%22%5D")})}report(o){o.displayName&&!this._names.has(o.displayName)&&(this._names.add(o.displayName),this._report())}};for(const o of r){const s=new K,l=await this.getActionsToRun(t,o,i,d,a);if(this.telemetryService.publicLog2("codeAction.appliedOnSave",{codeAction:o.value,duration:s.elapsed()}),a.isCancellationRequested){l.dispose();return}try{for(const u of l.validActions)if(n.report({message:M("codeAction.apply","Applying code action '{0}'.",u.action.title)}),await this.instantiationService.invokeFunction(G,u,z.OnSave,{},a),a.isCancellationRequested)return}catch{}finally{l.dispose()}}}getActionsToRun(t,r,i,n,a){return Q(this.languageFeaturesService.codeActionProvider,t,t.getFullModelRange(),{type:B.Auto,triggerAction:$.OnSave,filter:{include:r,excludes:i,includeSourceActions:!0}},n,a)}};C=f([c(0,m),c(1,O),c(2,X),c(3,oe),c(4,re),c(5,S),c(6,ee)],C);let A=class extends k{constructor(t,r){super();this.instantiationService=t;this.textFileService=r;this.registerSaveParticipants()}registerSaveParticipants(){this._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(h))),this._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(C))),this._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(x))),this._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(I))),this._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(y)))}};A=f([c(0,O),c(1,ae)],A);const se=Z.as(te.Workbench);se.registerWorkbenchContribution(A,ne.Restored);export{I as FinalNewLineParticipant,A as SaveParticipantsContribution,y as TrimFinalNewLinesParticipant,h as TrimWhitespaceParticipant};
