{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/toggleColumnSelection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { CoreNavigationCommands } from '../../../../editor/browser/coreCommands.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\n\nexport class ToggleColumnSelectionAction extends Action2 {\n\n\tstatic readonly ID = 'editor.action.toggleColumnSelection';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleColumnSelectionAction.ID,\n\t\t\ttitle: {\n\t\t\t\t...localize2('toggleColumnSelection', \"Toggle Column Selection Mode\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'miColumnSelection', comment: ['&& denotes a mnemonic'] }, \"Column &&Selection Mode\"),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\ttoggled: ContextKeyExpr.equals('config.editor.columnSelection', true),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '4_config',\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\tconst oldValue = configurationService.getValue('editor.columnSelection');\n\t\tconst codeEditor = this._getCodeEditor(codeEditorService);\n\t\tawait configurationService.updateValue('editor.columnSelection', !oldValue);\n\t\tconst newValue = configurationService.getValue('editor.columnSelection');\n\t\tif (!codeEditor || codeEditor !== this._getCodeEditor(codeEditorService) || oldValue === newValue || !codeEditor.hasModel() || typeof oldValue !== 'boolean' || typeof newValue !== 'boolean') {\n\t\t\treturn;\n\t\t}\n\t\tconst viewModel = codeEditor._getViewModel();\n\t\tif (codeEditor.getOption(EditorOption.columnSelection)) {\n\t\t\tconst selection = codeEditor.getSelection();\n\t\t\tconst modelSelectionStart = new Position(selection.selectionStartLineNumber, selection.selectionStartColumn);\n\t\t\tconst viewSelectionStart = viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelSelectionStart);\n\t\t\tconst modelPosition = new Position(selection.positionLineNumber, selection.positionColumn);\n\t\t\tconst viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\n\t\t\tCoreNavigationCommands.MoveTo.runCoreEditorCommand(viewModel, {\n\t\t\t\tposition: modelSelectionStart,\n\t\t\t\tviewPosition: viewSelectionStart\n\t\t\t});\n\t\t\tconst visibleColumn = viewModel.cursorConfig.visibleColumnFromColumn(viewModel, viewPosition);\n\t\t\tCoreNavigationCommands.ColumnSelect.runCoreEditorCommand(viewModel, {\n\t\t\t\tposition: modelPosition,\n\t\t\t\tviewPosition: viewPosition,\n\t\t\t\tdoColumnSelect: true,\n\t\t\t\tmouseColumn: visibleColumn + 1\n\t\t\t});\n\t\t} else {\n\t\t\tconst columnSelectData = viewModel.getCursorColumnSelectData();\n\t\t\tconst fromViewColumn = viewModel.cursorConfig.columnFromVisibleColumn(viewModel, columnSelectData.fromViewLineNumber, columnSelectData.fromViewVisualColumn);\n\t\t\tconst fromPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(columnSelectData.fromViewLineNumber, fromViewColumn));\n\t\t\tconst toViewColumn = viewModel.cursorConfig.columnFromVisibleColumn(viewModel, columnSelectData.toViewLineNumber, columnSelectData.toViewVisualColumn);\n\t\t\tconst toPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(columnSelectData.toViewLineNumber, toViewColumn));\n\n\t\t\tcodeEditor.setSelection(new Selection(fromPosition.lineNumber, fromPosition.column, toPosition.lineNumber, toPosition.column));\n\t\t}\n\t}\n\n\tprivate _getCodeEditor(codeEditorService: ICodeEditorService): ICodeEditor | null {\n\t\tconst codeEditor = codeEditorService.getFocusedCodeEditor();\n\t\tif (codeEditor) {\n\t\t\treturn codeEditor;\n\t\t}\n\t\treturn codeEditorService.getActiveCodeEditor();\n\t}\n}\n\nregisterAction2(ToggleColumnSelectionAction);\n"],
  "mappings": "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",
  "names": []
}
