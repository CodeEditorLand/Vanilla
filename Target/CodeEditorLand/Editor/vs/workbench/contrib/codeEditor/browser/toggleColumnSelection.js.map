{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/toggleColumnSelection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CoreNavigationCommands } from \"../../../../editor/browser/coreCommands.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { EditorOption } from \"../../../../editor/common/config/editorOptions.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { Selection } from \"../../../../editor/common/core/selection.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport class ToggleColumnSelectionAction extends Action2 {\n\tstatic readonly ID = \"editor.action.toggleColumnSelection\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleColumnSelectionAction.ID,\n\t\t\ttitle: {\n\t\t\t\t...localize2(\n\t\t\t\t\t\"toggleColumnSelection\",\n\t\t\t\t\t\"Toggle Column Selection Mode\",\n\t\t\t\t),\n\t\t\t\tmnemonicTitle: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miColumnSelection\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Column &&Selection Mode\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\ttoggled: ContextKeyExpr.equals(\n\t\t\t\t\"config.editor.columnSelection\",\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: \"4_config\",\n\t\t\t\torder: 2,\n\t\t\t},\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\tconst oldValue = configurationService.getValue(\n\t\t\t\"editor.columnSelection\",\n\t\t);\n\t\tconst codeEditor = this._getCodeEditor(codeEditorService);\n\t\tawait configurationService.updateValue(\n\t\t\t\"editor.columnSelection\",\n\t\t\t!oldValue,\n\t\t);\n\t\tconst newValue = configurationService.getValue(\n\t\t\t\"editor.columnSelection\",\n\t\t);\n\t\tif (\n\t\t\t!codeEditor ||\n\t\t\tcodeEditor !== this._getCodeEditor(codeEditorService) ||\n\t\t\toldValue === newValue ||\n\t\t\t!codeEditor.hasModel() ||\n\t\t\ttypeof oldValue !== \"boolean\" ||\n\t\t\ttypeof newValue !== \"boolean\"\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewModel = codeEditor._getViewModel();\n\t\tif (codeEditor.getOption(EditorOption.columnSelection)) {\n\t\t\tconst selection = codeEditor.getSelection();\n\t\t\tconst modelSelectionStart = new Position(\n\t\t\t\tselection.selectionStartLineNumber,\n\t\t\t\tselection.selectionStartColumn,\n\t\t\t);\n\t\t\tconst viewSelectionStart =\n\t\t\t\tviewModel.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\tmodelSelectionStart,\n\t\t\t\t);\n\t\t\tconst modelPosition = new Position(\n\t\t\t\tselection.positionLineNumber,\n\t\t\t\tselection.positionColumn,\n\t\t\t);\n\t\t\tconst viewPosition =\n\t\t\t\tviewModel.coordinatesConverter.convertModelPositionToViewPosition(\n\t\t\t\t\tmodelPosition,\n\t\t\t\t);\n\n\t\t\tCoreNavigationCommands.MoveTo.runCoreEditorCommand(viewModel, {\n\t\t\t\tposition: modelSelectionStart,\n\t\t\t\tviewPosition: viewSelectionStart,\n\t\t\t});\n\t\t\tconst visibleColumn =\n\t\t\t\tviewModel.cursorConfig.visibleColumnFromColumn(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tviewPosition,\n\t\t\t\t);\n\t\t\tCoreNavigationCommands.ColumnSelect.runCoreEditorCommand(\n\t\t\t\tviewModel,\n\t\t\t\t{\n\t\t\t\t\tposition: modelPosition,\n\t\t\t\t\tviewPosition: viewPosition,\n\t\t\t\t\tdoColumnSelect: true,\n\t\t\t\t\tmouseColumn: visibleColumn + 1,\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tconst columnSelectData = viewModel.getCursorColumnSelectData();\n\t\t\tconst fromViewColumn =\n\t\t\t\tviewModel.cursorConfig.columnFromVisibleColumn(\n\t\t\t\t\tviewModel,\n\t\t\t\t\tcolumnSelectData.fromViewLineNumber,\n\t\t\t\t\tcolumnSelectData.fromViewVisualColumn,\n\t\t\t\t);\n\t\t\tconst fromPosition =\n\t\t\t\tviewModel.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\tcolumnSelectData.fromViewLineNumber,\n\t\t\t\t\t\tfromViewColumn,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\tconst toViewColumn = viewModel.cursorConfig.columnFromVisibleColumn(\n\t\t\t\tviewModel,\n\t\t\t\tcolumnSelectData.toViewLineNumber,\n\t\t\t\tcolumnSelectData.toViewVisualColumn,\n\t\t\t);\n\t\t\tconst toPosition =\n\t\t\t\tviewModel.coordinatesConverter.convertViewPositionToModelPosition(\n\t\t\t\t\tnew Position(\n\t\t\t\t\t\tcolumnSelectData.toViewLineNumber,\n\t\t\t\t\t\ttoViewColumn,\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\tcodeEditor.setSelection(\n\t\t\t\tnew Selection(\n\t\t\t\t\tfromPosition.lineNumber,\n\t\t\t\t\tfromPosition.column,\n\t\t\t\t\ttoPosition.lineNumber,\n\t\t\t\t\ttoPosition.column,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _getCodeEditor(\n\t\tcodeEditorService: ICodeEditorService,\n\t): ICodeEditor | null {\n\t\tconst codeEditor = codeEditorService.getFocusedCodeEditor();\n\t\tif (codeEditor) {\n\t\t\treturn codeEditor;\n\t\t}\n\t\treturn codeEditorService.getActiveCodeEditor();\n\t}\n}\n\nregisterAction2(ToggleColumnSelectionAction);\n"],
  "mappings": "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",
  "names": []
}
