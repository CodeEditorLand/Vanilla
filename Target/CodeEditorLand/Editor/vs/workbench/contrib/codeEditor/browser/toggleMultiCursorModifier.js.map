{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Action2, MenuId, MenuRegistry, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\n\nexport class ToggleMultiCursorModifierAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.toggleMultiCursorModifier';\n\n\tprivate static readonly multiCursorModifierConfigurationKey = 'editor.multiCursorModifier';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleMultiCursorModifierAction.ID,\n\t\t\ttitle: localize2('toggleLocation', 'Toggle Multi-Cursor Modifier'),\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tconst editorConf = configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\t\tconst newValue: 'ctrlCmd' | 'alt' = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'alt' : 'ctrlCmd');\n\n\t\treturn configurationService.updateValue(ToggleMultiCursorModifierAction.multiCursorModifierConfigurationKey, newValue);\n\t}\n}\n\nconst multiCursorModifier = new RawContextKey<string>('multiCursorModifier', 'altKey');\n\nclass MultiCursorModifierContextKeyController extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly _multiCursorModifier: IContextKey<string>;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t\tthis._multiCursorModifier = multiCursorModifier.bindTo(contextKeyService);\n\n\t\tthis._update();\n\t\tthis._register(configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration('editor.multiCursorModifier')) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _update(): void {\n\t\tconst editorConf = this.configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\t\tconst value = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'ctrlCmd' : 'altKey');\n\t\tthis._multiCursorModifier.set(value);\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(MultiCursorModifierContextKeyController, LifecyclePhase.Restored);\n\nregisterAction2(ToggleMultiCursorModifierAction);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarSelectionMenu, {\n\tgroup: '4_config',\n\tcommand: {\n\t\tid: ToggleMultiCursorModifierAction.ID,\n\t\ttitle: localize('miMultiCursorAlt', \"Switch to Alt+Click for Multi-Cursor\")\n\t},\n\twhen: multiCursorModifier.isEqualTo('ctrlCmd'),\n\torder: 1\n});\nMenuRegistry.appendMenuItem(MenuId.MenubarSelectionMenu, {\n\tgroup: '4_config',\n\tcommand: {\n\t\tid: ToggleMultiCursorModifierAction.ID,\n\t\ttitle: (\n\t\t\tisMacintosh\n\t\t\t\t? localize('miMultiCursorCmd', \"Switch to Cmd+Click for Multi-Cursor\")\n\t\t\t\t: localize('miMultiCursorCtrl', \"Switch to Ctrl+Click for Multi-Cursor\")\n\t\t)\n\t},\n\twhen: multiCursorModifier.isEqualTo('altKey'),\n\torder: 1\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,UAAU,iBAAiB;AACpC,SAAS,SAAS,QAAQ,cAAc,uBAAuB;AAC/D,SAAS,6BAA6B;AACtC,SAAS,aAAa,oBAAoB,qBAAqB;AAC/D,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,wBAAwB,iCAAiC,cAAc,2BAA2B;AAC3G,SAAS,sBAAsB;AAExB,MAAM,wCAAwC,QAAQ;AAAA,EAhB7D,OAgB6D;AAAA;AAAA;AAAA,EAE5D,OAAgB,KAAK;AAAA,EAErB,OAAwB,sCAAsC;AAAA,EAE9D,cAAc;AACb,UAAM;AAAA,MACL,IAAI,gCAAgC;AAAA,MACpC,OAAO,UAAU,kBAAkB,8BAA8B;AAAA,MACjE,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAES,IAAI,UAA2C;AACvD,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAE/D,UAAM,aAAa,qBAAqB,SAAqD,QAAQ;AACrG,UAAM,WAA+B,WAAW,wBAAwB,YAAY,QAAQ;AAE5F,WAAO,qBAAqB,YAAY,gCAAgC,qCAAqC,QAAQ;AAAA,EACtH;AACD;AAEA,MAAM,sBAAsB,IAAI,cAAsB,uBAAuB,QAAQ;AAErF,IAAM,0CAAN,cAAsD,WAA6C;AAAA,EAIlG,YACyC,sBACpB,mBACnB;AACD,UAAM;AAHkC;AAIxC,SAAK,uBAAuB,oBAAoB,OAAO,iBAAiB;AAExE,SAAK,QAAQ;AACb,SAAK,UAAU,qBAAqB,yBAAyB,CAAC,MAAM;AACnE,UAAI,EAAE,qBAAqB,4BAA4B,GAAG;AACzD,aAAK,QAAQ;AAAA,MACd;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EA3DD,OA0CmG;AAAA;AAAA;AAAA,EAEjF;AAAA,EAiBT,UAAgB;AACvB,UAAM,aAAa,KAAK,qBAAqB,SAAqD,QAAQ;AAC1G,UAAM,QAAS,WAAW,wBAAwB,YAAY,YAAY;AAC1E,SAAK,qBAAqB,IAAI,KAAK;AAAA,EACpC;AACD;AAxBM,0CAAN;AAAA,EAKG;AAAA,EACA;AAAA,GANG;AA0BN,SAAS,GAAoC,oBAAoB,SAAS,EAAE,8BAA8B,yCAAyC,eAAe,QAAQ;AAE1K,gBAAgB,+BAA+B;AAE/C,aAAa,eAAe,OAAO,sBAAsB;AAAA,EACxD,OAAO;AAAA,EACP,SAAS;AAAA,IACR,IAAI,gCAAgC;AAAA,IACpC,OAAO,SAAS,oBAAoB,sCAAsC;AAAA,EAC3E;AAAA,EACA,MAAM,oBAAoB,UAAU,SAAS;AAAA,EAC7C,OAAO;AACR,CAAC;AACD,aAAa,eAAe,OAAO,sBAAsB;AAAA,EACxD,OAAO;AAAA,EACP,SAAS;AAAA,IACR,IAAI,gCAAgC;AAAA,IACpC,OACC,cACG,SAAS,oBAAoB,sCAAsC,IACnE,SAAS,qBAAqB,uCAAuC;AAAA,EAE1E;AAAA,EACA,MAAM,oBAAoB,UAAU,QAAQ;AAAA,EAC5C,OAAO;AACR,CAAC;",
  "names": []
}
