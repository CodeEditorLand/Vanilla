{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { HierarchicalKind } from \"../../../../base/common/hierarchicalKind.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport {\n\ttype IActiveCodeEditor,\n\tisCodeEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { trimTrailingWhitespace } from \"../../../../editor/common/commands/trimTrailingWhitespaceCommand.js\";\nimport { EditOperation } from \"../../../../editor/common/core/editOperation.js\";\nimport { Position } from \"../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { Selection } from \"../../../../editor/common/core/selection.js\";\nimport {\n\ttype CodeActionProvider,\n\tCodeActionTriggerType,\n} from \"../../../../editor/common/languages.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { ILanguageFeaturesService } from \"../../../../editor/common/services/languageFeatures.js\";\nimport {\n\tApplyCodeActionReason,\n\tapplyCodeAction,\n\tgetCodeActions,\n} from \"../../../../editor/contrib/codeAction/browser/codeAction.js\";\nimport {\n\tCodeActionKind,\n\tCodeActionTriggerSource,\n} from \"../../../../editor/contrib/codeAction/common/types.js\";\nimport {\n\tFormattingMode,\n\tformatDocumentRangesWithSelectedProvider,\n\tformatDocumentWithSelectedProvider,\n} from \"../../../../editor/contrib/format/browser/format.js\";\nimport { SnippetController2 } from \"../../../../editor/contrib/snippet/browser/snippetController2.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IProgress,\n\ttype IProgressStep,\n\tProgress,\n} from \"../../../../platform/progress/common/progress.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchContributionsExtensions,\n} from \"../../../common/contributions.js\";\nimport { SaveReason } from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport {\n\ttype ITextFileEditorModel,\n\ttype ITextFileSaveParticipant,\n\ttype ITextFileSaveParticipantContext,\n\tITextFileService,\n} from \"../../../services/textfile/common/textfiles.js\";\nimport { getModifiedRanges } from \"../../format/browser/formatModified.js\";\n\nexport class TrimWhitespaceParticipant implements ITextFileSaveParticipant {\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService\n\t\tprivate readonly codeEditorService: ICodeEditorService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(\n\t\tmodel: ITextFileEditorModel,\n\t\tcontext: ITextFileSaveParticipantContext,\n\t): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst trimTrailingWhitespaceOption =\n\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\"files.trimTrailingWhitespace\",\n\t\t\t\t{\n\t\t\t\t\toverrideIdentifier: model.textEditorModel.getLanguageId(),\n\t\t\t\t\tresource: model.resource,\n\t\t\t\t},\n\t\t\t);\n\t\tconst trimInRegexAndStrings =\n\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\"files.trimTrailingWhitespaceInRegexAndStrings\",\n\t\t\t\t{\n\t\t\t\t\toverrideIdentifier: model.textEditorModel.getLanguageId(),\n\t\t\t\t\tresource: model.resource,\n\t\t\t\t},\n\t\t\t);\n\t\tif (trimTrailingWhitespaceOption) {\n\t\t\tthis.doTrimTrailingWhitespace(\n\t\t\t\tmodel.textEditorModel,\n\t\t\t\tcontext.reason === SaveReason.AUTO,\n\t\t\t\ttrimInRegexAndStrings,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate doTrimTrailingWhitespace(\n\t\tmodel: ITextModel,\n\t\tisAutoSaved: boolean,\n\t\ttrimInRegexesAndStrings: boolean,\n\t): void {\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cursors: Position[] = [];\n\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\t// Find `prevSelection` in any case do ensure a good undo stack when pushing the edit\n\t\t\t// Collect active cursors in `cursors` only if `isAutoSaved` to avoid having the cursors jump\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tcursors = prevSelection.map((s) => s.getPosition());\n\t\t\t\tconst snippetsRange =\n\t\t\t\t\tSnippetController2.get(editor)?.getSessionEnclosingRange();\n\t\t\t\tif (snippetsRange) {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet lineNumber = snippetsRange.startLineNumber;\n\t\t\t\t\t\tlineNumber <= snippetsRange.endLineNumber;\n\t\t\t\t\t\tlineNumber++\n\t\t\t\t\t) {\n\t\t\t\t\t\tcursors.push(\n\t\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\tmodel.getLineMaxColumn(lineNumber),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst ops = trimTrailingWhitespace(\n\t\t\tmodel,\n\t\t\tcursors,\n\t\t\ttrimInRegexesAndStrings,\n\t\t);\n\t\tif (!ops.length) {\n\t\t\treturn; // Nothing to do\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, ops, (_edits) => prevSelection);\n\t}\n}\n\nfunction findEditor(\n\tmodel: ITextModel,\n\tcodeEditorService: ICodeEditorService,\n): IActiveCodeEditor | null {\n\tlet candidate: IActiveCodeEditor | null = null;\n\n\tif (model.isAttachedToEditor()) {\n\t\tfor (const editor of codeEditorService.listCodeEditors()) {\n\t\t\tif (editor.hasModel() && editor.getModel() === model) {\n\t\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t\treturn editor; // favour focused editor if there are multiple\n\t\t\t\t}\n\n\t\t\t\tcandidate = editor;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn candidate;\n}\n\nexport class FinalNewLineParticipant implements ITextFileSaveParticipant {\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService\n\t\tprivate readonly codeEditorService: ICodeEditorService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(\n\t\tmodel: ITextFileEditorModel,\n\t\tcontext: ITextFileSaveParticipantContext,\n\t): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis.configurationService.getValue(\"files.insertFinalNewline\", {\n\t\t\t\toverrideIdentifier: model.textEditorModel.getLanguageId(),\n\t\t\t\tresource: model.resource,\n\t\t\t})\n\t\t) {\n\t\t\tthis.doInsertFinalNewLine(model.textEditorModel);\n\t\t}\n\t}\n\n\tprivate doInsertFinalNewLine(model: ITextModel): void {\n\t\tconst lineCount = model.getLineCount();\n\t\tconst lastLine = model.getLineContent(lineCount);\n\t\tconst lastLineIsEmptyOrWhitespace =\n\t\t\tstrings.lastNonWhitespaceIndex(lastLine) === -1;\n\n\t\tif (!lineCount || lastLineIsEmptyOrWhitespace) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits = [\n\t\t\tEditOperation.insert(\n\t\t\t\tnew Position(lineCount, model.getLineMaxColumn(lineCount)),\n\t\t\t\tmodel.getEOL(),\n\t\t\t),\n\t\t];\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\teditor.executeEdits(\n\t\t\t\t\"insertFinalNewLine\",\n\t\t\t\tedits,\n\t\t\t\teditor.getSelections(),\n\t\t\t);\n\t\t} else {\n\t\t\tmodel.pushEditOperations([], edits, () => null);\n\t\t}\n\t}\n}\n\nexport class TrimFinalNewLinesParticipant implements ITextFileSaveParticipant {\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService\n\t\tprivate readonly codeEditorService: ICodeEditorService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(\n\t\tmodel: ITextFileEditorModel,\n\t\tcontext: ITextFileSaveParticipantContext,\n\t): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis.configurationService.getValue(\"files.trimFinalNewlines\", {\n\t\t\t\toverrideIdentifier: model.textEditorModel.getLanguageId(),\n\t\t\t\tresource: model.resource,\n\t\t\t})\n\t\t) {\n\t\t\tthis.doTrimFinalNewLines(\n\t\t\t\tmodel.textEditorModel,\n\t\t\t\tcontext.reason === SaveReason.AUTO,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * returns 0 if the entire file is empty\n\t */\n\tprivate findLastNonEmptyLine(model: ITextModel): number {\n\t\tfor (\n\t\t\tlet lineNumber = model.getLineCount();\n\t\t\tlineNumber >= 1;\n\t\t\tlineNumber--\n\t\t) {\n\t\t\tconst lineLength = model.getLineLength(lineNumber);\n\t\t\tif (lineLength > 0) {\n\t\t\t\t// this line has content\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\t// no line has content\n\t\treturn 0;\n\t}\n\n\tprivate doTrimFinalNewLines(model: ITextModel, isAutoSaved: boolean): void {\n\t\tconst lineCount = model.getLineCount();\n\n\t\t// Do not insert new line if file does not end with new line\n\t\tif (lineCount === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cannotTouchLineNumber = 0;\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tfor (let i = 0, len = prevSelection.length; i < len; i++) {\n\t\t\t\t\tconst positionLineNumber =\n\t\t\t\t\t\tprevSelection[i].positionLineNumber;\n\t\t\t\t\tif (positionLineNumber > cannotTouchLineNumber) {\n\t\t\t\t\t\tcannotTouchLineNumber = positionLineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lastNonEmptyLine = this.findLastNonEmptyLine(model);\n\t\tconst deleteFromLineNumber = Math.max(\n\t\t\tlastNonEmptyLine + 1,\n\t\t\tcannotTouchLineNumber + 1,\n\t\t);\n\t\tconst deletionRange = model.validateRange(\n\t\t\tnew Range(\n\t\t\t\tdeleteFromLineNumber,\n\t\t\t\t1,\n\t\t\t\tlineCount,\n\t\t\t\tmodel.getLineMaxColumn(lineCount),\n\t\t\t),\n\t\t);\n\n\t\tif (deletionRange.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.pushEditOperations(\n\t\t\tprevSelection,\n\t\t\t[EditOperation.delete(deletionRange)],\n\t\t\t(_edits) => prevSelection,\n\t\t);\n\n\t\teditor?.setSelections(prevSelection);\n\t}\n}\n\nclass FormatOnSaveParticipant implements ITextFileSaveParticipant {\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService\n\t\tprivate readonly codeEditorService: ICodeEditorService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(\n\t\tmodel: ITextFileEditorModel,\n\t\tcontext: ITextFileSaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\t\tconst overrides = {\n\t\t\toverrideIdentifier: textEditorModel.getLanguageId(),\n\t\t\tresource: textEditorModel.uri,\n\t\t};\n\n\t\tconst nestedProgress = new Progress<{\n\t\t\tdisplayName?: string;\n\t\t\textensionId?: ExtensionIdentifier;\n\t\t}>((provider) => {\n\t\t\tprogress.report({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"formatting2\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Running '{0}' Formatter ([configure]({1})).\",\n\t\t\t\t\tprovider.displayName ||\n\t\t\t\t\t\t(provider.extensionId && provider.extensionId.value) ||\n\t\t\t\t\t\t\"???\",\n\t\t\t\t\t\"command:workbench.action.openSettings?%5B%22editor.formatOnSave%22%5D\",\n\t\t\t\t),\n\t\t\t});\n\t\t});\n\n\t\tconst enabled = this.configurationService.getValue<boolean>(\n\t\t\t\"editor.formatOnSave\",\n\t\t\toverrides,\n\t\t);\n\t\tif (!enabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst editorOrModel =\n\t\t\tfindEditor(textEditorModel, this.codeEditorService) ||\n\t\t\ttextEditorModel;\n\t\tconst mode = this.configurationService.getValue<\n\t\t\t\"file\" | \"modifications\" | \"modificationsIfAvailable\"\n\t\t>(\"editor.formatOnSaveMode\", overrides);\n\n\t\tif (mode === \"file\") {\n\t\t\tawait this.instantiationService.invokeFunction(\n\t\t\t\tformatDocumentWithSelectedProvider,\n\t\t\t\teditorOrModel,\n\t\t\t\tFormattingMode.Silent,\n\t\t\t\tnestedProgress,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t} else {\n\t\t\tconst ranges = await this.instantiationService.invokeFunction(\n\t\t\t\tgetModifiedRanges,\n\t\t\t\tisCodeEditor(editorOrModel)\n\t\t\t\t\t? editorOrModel.getModel()\n\t\t\t\t\t: editorOrModel,\n\t\t\t);\n\t\t\tif (ranges === null && mode === \"modificationsIfAvailable\") {\n\t\t\t\t// no SCM, fallback to formatting the whole file iff wanted\n\t\t\t\tawait this.instantiationService.invokeFunction(\n\t\t\t\t\tformatDocumentWithSelectedProvider,\n\t\t\t\t\teditorOrModel,\n\t\t\t\t\tFormattingMode.Silent,\n\t\t\t\t\tnestedProgress,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t} else if (ranges) {\n\t\t\t\t// formatted modified ranges\n\t\t\t\tawait this.instantiationService.invokeFunction(\n\t\t\t\t\tformatDocumentRangesWithSelectedProvider,\n\t\t\t\t\teditorOrModel,\n\t\t\t\t\tranges,\n\t\t\t\t\tFormattingMode.Silent,\n\t\t\t\t\tnestedProgress,\n\t\t\t\t\ttoken,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass CodeActionOnSaveParticipant\n\textends Disposable\n\timplements ITextFileSaveParticipant\n{\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@ILanguageFeaturesService\n\t\tprivate readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ICodeEditorService\n\t\tprivate readonly codeEditorService: ICodeEditorService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tthis.hostService.onDidChangeFocus(() => {\n\t\t\t\tthis.triggerCodeActionsCommand();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorService.onDidActiveEditorChange(() => {\n\t\t\t\tthis.triggerCodeActionsCommand();\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async triggerCodeActionsCommand() {\n\t\tif (\n\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\"editor.codeActions.triggerOnFocusChange\",\n\t\t\t) &&\n\t\t\tthis.configurationService.getValue<string>(\"files.autoSave\") ===\n\t\t\t\t\"afterDelay\"\n\t\t) {\n\t\t\tconst model = this.codeEditorService\n\t\t\t\t.getActiveCodeEditor()\n\t\t\t\t?.getModel();\n\t\t\tif (!model) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst settingsOverrides = {\n\t\t\t\toverrideIdentifier: model.getLanguageId(),\n\t\t\t\tresource: model.uri,\n\t\t\t};\n\t\t\tconst setting = this.configurationService.getValue<\n\t\t\t\t{ [kind: string]: string | boolean } | string[]\n\t\t\t>(\"editor.codeActionsOnSave\", settingsOverrides);\n\n\t\t\tif (!setting) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (Array.isArray(setting)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst settingItems: string[] = Object.keys(setting).filter(\n\t\t\t\t(x) =>\n\t\t\t\t\tsetting[x] &&\n\t\t\t\t\tsetting[x] === \"always\" &&\n\t\t\t\t\tCodeActionKind.Source.contains(new HierarchicalKind(x)),\n\t\t\t);\n\n\t\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\n\t\t\tconst codeActionKindList = [];\n\t\t\tfor (const item of settingItems) {\n\t\t\t\tcodeActionKindList.push(new HierarchicalKind(item));\n\t\t\t}\n\n\t\t\t// run code actions based on what is found from setting === 'always', no exclusions.\n\t\t\tawait this.applyOnSaveActions(\n\t\t\t\tmodel,\n\t\t\t\tcodeActionKindList,\n\t\t\t\t[],\n\t\t\t\tProgress.None,\n\t\t\t\tcancellationTokenSource.token,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync participate(\n\t\tmodel: ITextFileEditorModel,\n\t\tcontext: ITextFileSaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\t\tconst settingsOverrides = {\n\t\t\toverrideIdentifier: textEditorModel.getLanguageId(),\n\t\t\tresource: textEditorModel.uri,\n\t\t};\n\n\t\t// Convert boolean values to strings\n\t\tconst setting = this.configurationService.getValue<\n\t\t\t{ [kind: string]: string | boolean } | string[]\n\t\t>(\"editor.codeActionsOnSave\", settingsOverrides);\n\t\tif (!setting) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (context.reason !== SaveReason.EXPLICIT && Array.isArray(setting)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst settingItems: string[] = Array.isArray(setting)\n\t\t\t? setting\n\t\t\t: Object.keys(setting).filter(\n\t\t\t\t\t(x) => setting[x] && setting[x] !== \"never\",\n\t\t\t\t);\n\n\t\tconst codeActionsOnSave = this.createCodeActionsOnSave(settingItems);\n\n\t\tif (!Array.isArray(setting)) {\n\t\t\tcodeActionsOnSave.sort((a, b) => {\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(a)) {\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\tif (!codeActionsOnSave.length) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst excludedActions = Array.isArray(setting)\n\t\t\t? []\n\t\t\t: Object.keys(setting)\n\t\t\t\t\t.filter((x) => setting[x] === \"never\" || false)\n\t\t\t\t\t.map((x) => new HierarchicalKind(x));\n\n\t\tprogress.report({ message: localize(\"codeaction\", \"Quick Fixes\") });\n\n\t\tconst filteredSaveList = Array.isArray(setting)\n\t\t\t? codeActionsOnSave\n\t\t\t: codeActionsOnSave.filter(\n\t\t\t\t\t(x) =>\n\t\t\t\t\t\tsetting[x.value] === \"always\" ||\n\t\t\t\t\t\t((setting[x.value] === \"explicit\" ||\n\t\t\t\t\t\t\tsetting[x.value] === true) &&\n\t\t\t\t\t\t\tcontext.reason === SaveReason.EXPLICIT),\n\t\t\t\t);\n\n\t\tawait this.applyOnSaveActions(\n\t\t\ttextEditorModel,\n\t\t\tfilteredSaveList,\n\t\t\texcludedActions,\n\t\t\tprogress,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\tprivate createCodeActionsOnSave(\n\t\tsettingItems: readonly string[],\n\t): HierarchicalKind[] {\n\t\tconst kinds = settingItems.map((x) => new HierarchicalKind(x));\n\n\t\t// Remove subsets\n\t\treturn kinds.filter((kind) => {\n\t\t\treturn kinds.every(\n\t\t\t\t(otherKind) =>\n\t\t\t\t\totherKind.equals(kind) || !otherKind.contains(kind),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async applyOnSaveActions(\n\t\tmodel: ITextModel,\n\t\tcodeActionsOnSave: readonly HierarchicalKind[],\n\t\texcludes: readonly HierarchicalKind[],\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst getActionProgress = new (class\n\t\t\timplements IProgress<CodeActionProvider>\n\t\t{\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"codeaction.get2\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure]({1})).\",\n\t\t\t\t\t\t[...this._names].map((name) => `'${name}'`).join(\", \"),\n\t\t\t\t\t\t\"command:workbench.action.openSettings?%5B%22editor.codeActionsOnSave%22%5D\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (\n\t\t\t\t\tprovider.displayName &&\n\t\t\t\t\t!this._names.has(provider.displayName)\n\t\t\t\t) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\n\t\tfor (const codeActionKind of codeActionsOnSave) {\n\t\t\tconst sw = new StopWatch();\n\n\t\t\tconst actionsToRun = await this.getActionsToRun(\n\t\t\t\tmodel,\n\t\t\t\tcodeActionKind,\n\t\t\t\texcludes,\n\t\t\t\tgetActionProgress,\n\t\t\t\ttoken,\n\t\t\t);\n\n\t\t\t// Telemetry for duration of each code action on save.\n\t\t\ttype CodeActionOnSave = {\n\t\t\t\tcodeAction: string;\n\t\t\t\tduration: number;\n\t\t\t};\n\t\t\ttype CodeActionOnSaveClassification = {\n\t\t\t\towner: \"justschen\";\n\t\t\t\tcomment: \"Information about the code action that was accepted on save.\";\n\t\t\t\tcodeAction: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Kind of the code action setting that is run.\";\n\t\t\t\t};\n\t\t\t\tduration: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Duration it took for TS to return the action to run for each kind. \";\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tCodeActionOnSave,\n\t\t\t\tCodeActionOnSaveClassification\n\t\t\t>(\"codeAction.appliedOnSave\", {\n\t\t\t\tcodeAction: codeActionKind.value,\n\t\t\t\tduration: sw.elapsed(),\n\t\t\t});\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tfor (const action of actionsToRun.validActions) {\n\t\t\t\t\tprogress.report({\n\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\"codeAction.apply\",\n\t\t\t\t\t\t\t\"Applying code action '{0}'.\",\n\t\t\t\t\t\t\taction.action.title,\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t\tawait this.instantiationService.invokeFunction(\n\t\t\t\t\t\tapplyCodeAction,\n\t\t\t\t\t\taction,\n\t\t\t\t\t\tApplyCodeActionReason.OnSave,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// Failure to apply a code action should not block other on save actions\n\t\t\t} finally {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getActionsToRun(\n\t\tmodel: ITextModel,\n\t\tcodeActionKind: HierarchicalKind,\n\t\texcludes: readonly HierarchicalKind[],\n\t\tprogress: IProgress<CodeActionProvider>,\n\t\ttoken: CancellationToken,\n\t) {\n\t\treturn getCodeActions(\n\t\t\tthis.languageFeaturesService.codeActionProvider,\n\t\t\tmodel,\n\t\t\tmodel.getFullModelRange(),\n\t\t\t{\n\t\t\t\ttype: CodeActionTriggerType.Auto,\n\t\t\t\ttriggerAction: CodeActionTriggerSource.OnSave,\n\t\t\t\tfilter: {\n\t\t\t\t\tinclude: codeActionKind,\n\t\t\t\t\texcludes: excludes,\n\t\t\t\t\tincludeSourceActions: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\tprogress,\n\t\t\ttoken,\n\t\t);\n\t}\n}\n\nexport class SaveParticipantsContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerSaveParticipants();\n\t}\n\n\tprivate registerSaveParticipants(): void {\n\t\tthis._register(\n\t\t\tthis.textFileService.files.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tTrimWhitespaceParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.textFileService.files.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tCodeActionOnSaveParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.textFileService.files.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tFormatOnSaveParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.textFileService.files.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tFinalNewLineParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.textFileService.files.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tTrimFinalNewLinesParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n}\n\nconst workbenchContributionsRegistry =\n\tRegistry.as<IWorkbenchContributionsRegistry>(\n\t\tWorkbenchContributionsExtensions.Workbench,\n\t);\nworkbenchContributionsRegistry.registerWorkbenchContribution(\n\tSaveParticipantsContribution,\n\tLifecyclePhase.Restored,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EAEC;AAAA,OACM;AACP,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,YAAY,aAAa;AACzB;AAAA,EAEC;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC,SAAS,8BAA8B;AACvC,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AACzB,SAAS,aAAa;AAEtB;AAAA,EAEC;AAAA,OACM;AAEP,SAAS,gCAAgC;AACzC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AAEtC,SAAS,6BAA6B;AACtC;AAAA,EAGC;AAAA,OACM;AACP,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC;AAAA,EAGC,cAAc;AAAA,OACR;AACP,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B;AAAA,EAIC;AAAA,OACM;AACP,SAAS,yBAAyB;AAE3B,IAAM,4BAAN,MAAoE;AAAA,EAC1E,YAEkB,sBAEA,mBAChB;AAHgB;AAEA;AAAA,EAGlB;AAAA,EAhFD,OAwE2E;AAAA;AAAA;AAAA,EAU1E,MAAM,YACL,OACA,SACgB;AAChB,QAAI,CAAC,MAAM,iBAAiB;AAC3B;AAAA,IACD;AAEA,UAAM,+BACL,KAAK,qBAAqB;AAAA,MACzB;AAAA,MACA;AAAA,QACC,oBAAoB,MAAM,gBAAgB,cAAc;AAAA,QACxD,UAAU,MAAM;AAAA,MACjB;AAAA,IACD;AACD,UAAM,wBACL,KAAK,qBAAqB;AAAA,MACzB;AAAA,MACA;AAAA,QACC,oBAAoB,MAAM,gBAAgB,cAAc;AAAA,QACxD,UAAU,MAAM;AAAA,MACjB;AAAA,IACD;AACD,QAAI,8BAA8B;AACjC,WAAK;AAAA,QACJ,MAAM;AAAA,QACN,QAAQ,WAAW,WAAW;AAAA,QAC9B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,yBACP,OACA,aACA,yBACO;AACP,QAAI,gBAA6B,CAAC;AAClC,QAAI,UAAsB,CAAC;AAE3B,UAAM,SAAS,WAAW,OAAO,KAAK,iBAAiB;AACvD,QAAI,QAAQ;AAGX,sBAAgB,OAAO,cAAc;AACrC,UAAI,aAAa;AAChB,kBAAU,cAAc,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;AAClD,cAAM,gBACL,mBAAmB,IAAI,MAAM,GAAG,yBAAyB;AAC1D,YAAI,eAAe;AAClB,mBACK,aAAa,cAAc,iBAC/B,cAAc,cAAc,eAC5B,cACC;AACD,oBAAQ;AAAA,cACP,IAAI;AAAA,gBACH;AAAA,gBACA,MAAM,iBAAiB,UAAU;AAAA,cAClC;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,UAAM,MAAM;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,QAAI,CAAC,IAAI,QAAQ;AAChB;AAAA,IACD;AAEA,UAAM,mBAAmB,eAAe,KAAK,CAAC,WAAW,aAAa;AAAA,EACvE;AACD;AAxFa,4BAAN;AAAA,EAEJ;AAAA,EAEA;AAAA,GAJU;AA0Fb,SAAS,WACR,OACA,mBAC2B;AAC3B,MAAI,YAAsC;AAE1C,MAAI,MAAM,mBAAmB,GAAG;AAC/B,eAAW,UAAU,kBAAkB,gBAAgB,GAAG;AACzD,UAAI,OAAO,SAAS,KAAK,OAAO,SAAS,MAAM,OAAO;AACrD,YAAI,OAAO,aAAa,GAAG;AAC1B,iBAAO;AAAA,QACR;AAEA,oBAAY;AAAA,MACb;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAnBS;AAqBF,IAAM,0BAAN,MAAkE;AAAA,EACxE,YAEkB,sBAEA,mBAChB;AAHgB;AAEA;AAAA,EAGlB;AAAA,EA/LD,OAuLyE;AAAA;AAAA;AAAA,EAUxE,MAAM,YACL,OACA,SACgB;AAChB,QAAI,CAAC,MAAM,iBAAiB;AAC3B;AAAA,IACD;AAEA,QACC,KAAK,qBAAqB,SAAS,4BAA4B;AAAA,MAC9D,oBAAoB,MAAM,gBAAgB,cAAc;AAAA,MACxD,UAAU,MAAM;AAAA,IACjB,CAAC,GACA;AACD,WAAK,qBAAqB,MAAM,eAAe;AAAA,IAChD;AAAA,EACD;AAAA,EAEQ,qBAAqB,OAAyB;AACrD,UAAM,YAAY,MAAM,aAAa;AACrC,UAAM,WAAW,MAAM,eAAe,SAAS;AAC/C,UAAM,8BACL,QAAQ,uBAAuB,QAAQ,MAAM;AAE9C,QAAI,CAAC,aAAa,6BAA6B;AAC9C;AAAA,IACD;AAEA,UAAM,QAAQ;AAAA,MACb,cAAc;AAAA,QACb,IAAI,SAAS,WAAW,MAAM,iBAAiB,SAAS,CAAC;AAAA,QACzD,MAAM,OAAO;AAAA,MACd;AAAA,IACD;AACA,UAAM,SAAS,WAAW,OAAO,KAAK,iBAAiB;AACvD,QAAI,QAAQ;AACX,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA,OAAO,cAAc;AAAA,MACtB;AAAA,IACD,OAAO;AACN,YAAM,mBAAmB,CAAC,GAAG,OAAO,MAAM,IAAI;AAAA,IAC/C;AAAA,EACD;AACD;AAvDa,0BAAN;AAAA,EAEJ;AAAA,EAEA;AAAA,GAJU;AAyDN,IAAM,+BAAN,MAAuE;AAAA,EAC7E,YAEkB,sBAEA,mBAChB;AAHgB;AAEA;AAAA,EAGlB;AAAA,EAxPD,OAgP8E;AAAA;AAAA;AAAA,EAU7E,MAAM,YACL,OACA,SACgB;AAChB,QAAI,CAAC,MAAM,iBAAiB;AAC3B;AAAA,IACD;AAEA,QACC,KAAK,qBAAqB,SAAS,2BAA2B;AAAA,MAC7D,oBAAoB,MAAM,gBAAgB,cAAc;AAAA,MACxD,UAAU,MAAM;AAAA,IACjB,CAAC,GACA;AACD,WAAK;AAAA,QACJ,MAAM;AAAA,QACN,QAAQ,WAAW,WAAW;AAAA,MAC/B;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKQ,qBAAqB,OAA2B;AACvD,aACK,aAAa,MAAM,aAAa,GACpC,cAAc,GACd,cACC;AACD,YAAM,aAAa,MAAM,cAAc,UAAU;AACjD,UAAI,aAAa,GAAG;AAEnB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,oBAAoB,OAAmB,aAA4B;AAC1E,UAAM,YAAY,MAAM,aAAa;AAGrC,QAAI,cAAc,GAAG;AACpB;AAAA,IACD;AAEA,QAAI,gBAA6B,CAAC;AAClC,QAAI,wBAAwB;AAC5B,UAAM,SAAS,WAAW,OAAO,KAAK,iBAAiB;AACvD,QAAI,QAAQ;AACX,sBAAgB,OAAO,cAAc;AACrC,UAAI,aAAa;AAChB,iBAAS,IAAI,GAAG,MAAM,cAAc,QAAQ,IAAI,KAAK,KAAK;AACzD,gBAAM,qBACL,cAAc,CAAC,EAAE;AAClB,cAAI,qBAAqB,uBAAuB;AAC/C,oCAAwB;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,UAAM,mBAAmB,KAAK,qBAAqB,KAAK;AACxD,UAAM,uBAAuB,KAAK;AAAA,MACjC,mBAAmB;AAAA,MACnB,wBAAwB;AAAA,IACzB;AACA,UAAM,gBAAgB,MAAM;AAAA,MAC3B,IAAI;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAM,iBAAiB,SAAS;AAAA,MACjC;AAAA,IACD;AAEA,QAAI,cAAc,QAAQ,GAAG;AAC5B;AAAA,IACD;AAEA,UAAM;AAAA,MACL;AAAA,MACA,CAAC,cAAc,OAAO,aAAa,CAAC;AAAA,MACpC,CAAC,WAAW;AAAA,IACb;AAEA,YAAQ,cAAc,aAAa;AAAA,EACpC;AACD;AApGa,+BAAN;AAAA,EAEJ;AAAA,EAEA;AAAA,GAJU;AAsGb,IAAM,0BAAN,MAAkE;AAAA,EACjE,YAEkB,sBAEA,mBAEA,sBAChB;AALgB;AAEA;AAEA;AAAA,EAGlB;AAAA,EAhWD,OAsVkE;AAAA;AAAA;AAAA,EAYjE,MAAM,YACL,OACA,SACA,UACA,OACgB;AAChB,QAAI,CAAC,MAAM,iBAAiB;AAC3B;AAAA,IACD;AACA,QAAI,QAAQ,WAAW,WAAW,MAAM;AACvC,aAAO;AAAA,IACR;AAEA,UAAM,kBAAkB,MAAM;AAC9B,UAAM,YAAY;AAAA,MACjB,oBAAoB,gBAAgB,cAAc;AAAA,MAClD,UAAU,gBAAgB;AAAA,IAC3B;AAEA,UAAM,iBAAiB,IAAI,SAGxB,CAAC,aAAa;AAChB,eAAS,OAAO;AAAA,QACf,SAAS;AAAA,UACR;AAAA,YACC,KAAK;AAAA,YACL,SAAS;AAAA,cACR;AAAA,YACD;AAAA,UACD;AAAA,UACA;AAAA,UACA,SAAS,eACP,SAAS,eAAe,SAAS,YAAY,SAC9C;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAED,UAAM,UAAU,KAAK,qBAAqB;AAAA,MACzC;AAAA,MACA;AAAA,IACD;AACA,QAAI,CAAC,SAAS;AACb,aAAO;AAAA,IACR;AAEA,UAAM,gBACL,WAAW,iBAAiB,KAAK,iBAAiB,KAClD;AACD,UAAM,OAAO,KAAK,qBAAqB,SAErC,2BAA2B,SAAS;AAEtC,QAAI,SAAS,QAAQ;AACpB,YAAM,KAAK,qBAAqB;AAAA,QAC/B;AAAA,QACA;AAAA,QACA,eAAe;AAAA,QACf;AAAA,QACA;AAAA,MACD;AAAA,IACD,OAAO;AACN,YAAM,SAAS,MAAM,KAAK,qBAAqB;AAAA,QAC9C;AAAA,QACA,aAAa,aAAa,IACvB,cAAc,SAAS,IACvB;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ,SAAS,4BAA4B;AAE3D,cAAM,KAAK,qBAAqB;AAAA,UAC/B;AAAA,UACA;AAAA,UACA,eAAe;AAAA,UACf;AAAA,UACA;AAAA,QACD;AAAA,MACD,WAAW,QAAQ;AAElB,cAAM,KAAK,qBAAqB;AAAA,UAC/B;AAAA,UACA;AAAA,UACA;AAAA,UACA,eAAe;AAAA,UACf;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAzGM,0BAAN;AAAA,EAEG;AAAA,EAEA;AAAA,EAEA;AAAA,GANG;AA2GN,IAAM,8BAAN,cACS,WAET;AAAA,EACC,YAEkB,sBAEA,sBAEA,yBACc,aACE,eAEhB,mBACmB,kBACnC;AACD,UAAM;AAXW;AAEA;AAEA;AACc;AACE;AAEhB;AACmB;AAIpC,SAAK;AAAA,MACJ,KAAK,YAAY,iBAAiB,MAAM;AACvC,aAAK,0BAA0B;AAAA,MAChC,CAAC;AAAA,IACF;AACA,SAAK;AAAA,MACJ,KAAK,cAAc,wBAAwB,MAAM;AAChD,aAAK,0BAA0B;AAAA,MAChC,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EA9dD,OAocA;AAAA;AAAA;AAAA,EA4BC,MAAc,4BAA4B;AACzC,QACC,KAAK,qBAAqB;AAAA,MACzB;AAAA,IACD,KACA,KAAK,qBAAqB,SAAiB,gBAAgB,MAC1D,cACA;AACD,YAAM,QAAQ,KAAK,kBACjB,oBAAoB,GACnB,SAAS;AACZ,UAAI,CAAC,OAAO;AACX,eAAO;AAAA,MACR;AAEA,YAAM,oBAAoB;AAAA,QACzB,oBAAoB,MAAM,cAAc;AAAA,QACxC,UAAU,MAAM;AAAA,MACjB;AACA,YAAM,UAAU,KAAK,qBAAqB,SAExC,4BAA4B,iBAAiB;AAE/C,UAAI,CAAC,SAAS;AACb,eAAO;AAAA,MACR;AAEA,UAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,eAAO;AAAA,MACR;AAEA,YAAM,eAAyB,OAAO,KAAK,OAAO,EAAE;AAAA,QACnD,CAAC,MACA,QAAQ,CAAC,KACT,QAAQ,CAAC,MAAM,YACf,eAAe,OAAO,SAAS,IAAI,iBAAiB,CAAC,CAAC;AAAA,MACxD;AAEA,YAAM,0BAA0B,IAAI,wBAAwB;AAE5D,YAAM,qBAAqB,CAAC;AAC5B,iBAAW,QAAQ,cAAc;AAChC,2BAAmB,KAAK,IAAI,iBAAiB,IAAI,CAAC;AAAA,MACnD;AAGA,YAAM,KAAK;AAAA,QACV;AAAA,QACA;AAAA,QACA,CAAC;AAAA,QACD,SAAS;AAAA,QACT,wBAAwB;AAAA,MACzB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,YACL,OACA,SACA,UACA,OACgB;AAChB,QAAI,CAAC,MAAM,iBAAiB;AAC3B;AAAA,IACD;AAEA,UAAM,kBAAkB,MAAM;AAC9B,UAAM,oBAAoB;AAAA,MACzB,oBAAoB,gBAAgB,cAAc;AAAA,MAClD,UAAU,gBAAgB;AAAA,IAC3B;AAGA,UAAM,UAAU,KAAK,qBAAqB,SAExC,4BAA4B,iBAAiB;AAC/C,QAAI,CAAC,SAAS;AACb,aAAO;AAAA,IACR;AAEA,QAAI,QAAQ,WAAW,WAAW,MAAM;AACvC,aAAO;AAAA,IACR;AAEA,QAAI,QAAQ,WAAW,WAAW,YAAY,MAAM,QAAQ,OAAO,GAAG;AACrE,aAAO;AAAA,IACR;AAEA,UAAM,eAAyB,MAAM,QAAQ,OAAO,IACjD,UACA,OAAO,KAAK,OAAO,EAAE;AAAA,MACrB,CAAC,MAAM,QAAQ,CAAC,KAAK,QAAQ,CAAC,MAAM;AAAA,IACrC;AAEF,UAAM,oBAAoB,KAAK,wBAAwB,YAAY;AAEnE,QAAI,CAAC,MAAM,QAAQ,OAAO,GAAG;AAC5B,wBAAkB,KAAK,CAAC,GAAG,MAAM;AAChC,YAAI,eAAe,aAAa,SAAS,CAAC,GAAG;AAC5C,cAAI,eAAe,aAAa,SAAS,CAAC,GAAG;AAC5C,mBAAO;AAAA,UACR;AACA,iBAAO;AAAA,QACR;AACA,YAAI,eAAe,aAAa,SAAS,CAAC,GAAG;AAC5C,iBAAO;AAAA,QACR;AACA,eAAO;AAAA,MACR,CAAC;AAAA,IACF;AAEA,QAAI,CAAC,kBAAkB,QAAQ;AAC9B,aAAO;AAAA,IACR;AACA,UAAM,kBAAkB,MAAM,QAAQ,OAAO,IAC1C,CAAC,IACD,OAAO,KAAK,OAAO,EAClB,OAAO,CAAC,MAAM,QAAQ,CAAC,MAAM,WAAW,KAAK,EAC7C,IAAI,CAAC,MAAM,IAAI,iBAAiB,CAAC,CAAC;AAEtC,aAAS,OAAO,EAAE,SAAS,SAAS,cAAc,aAAa,EAAE,CAAC;AAElE,UAAM,mBAAmB,MAAM,QAAQ,OAAO,IAC3C,oBACA,kBAAkB;AAAA,MAClB,CAAC,MACA,QAAQ,EAAE,KAAK,MAAM,aACnB,QAAQ,EAAE,KAAK,MAAM,cACtB,QAAQ,EAAE,KAAK,MAAM,SACrB,QAAQ,WAAW,WAAW;AAAA,IACjC;AAEF,UAAM,KAAK;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,wBACP,cACqB;AACrB,UAAM,QAAQ,aAAa,IAAI,CAAC,MAAM,IAAI,iBAAiB,CAAC,CAAC;AAG7D,WAAO,MAAM,OAAO,CAAC,SAAS;AAC7B,aAAO,MAAM;AAAA,QACZ,CAAC,cACA,UAAU,OAAO,IAAI,KAAK,CAAC,UAAU,SAAS,IAAI;AAAA,MACpD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,mBACb,OACA,mBACA,UACA,UACA,OACgB;AAChB,UAAM,oBAAoB,IAAK,MAE/B;AAAA,MACS,SAAS,oBAAI,IAAY;AAAA,MACzB,UAAgB;AACvB,iBAAS,OAAO;AAAA,UACf,SAAS;AAAA,YACR;AAAA,cACC,KAAK;AAAA,cACL,SAAS;AAAA,gBACR;AAAA,cACD;AAAA,YACD;AAAA,YACA;AAAA,YACA,CAAC,GAAG,KAAK,MAAM,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,GAAG,EAAE,KAAK,IAAI;AAAA,YACrD;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF;AAAA,MACA,OAAO,UAA8B;AACpC,YACC,SAAS,eACT,CAAC,KAAK,OAAO,IAAI,SAAS,WAAW,GACpC;AACD,eAAK,OAAO,IAAI,SAAS,WAAW;AACpC,eAAK,QAAQ;AAAA,QACd;AAAA,MACD;AAAA,IACD,EAAG;AAEH,eAAW,kBAAkB,mBAAmB;AAC/C,YAAM,KAAK,IAAI,UAAU;AAEzB,YAAM,eAAe,MAAM,KAAK;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAsBA,WAAK,iBAAiB,WAGpB,4BAA4B;AAAA,QAC7B,YAAY,eAAe;AAAA,QAC3B,UAAU,GAAG,QAAQ;AAAA,MACtB,CAAC;AAED,UAAI,MAAM,yBAAyB;AAClC,qBAAa,QAAQ;AACrB;AAAA,MACD;AAEA,UAAI;AACH,mBAAW,UAAU,aAAa,cAAc;AAC/C,mBAAS,OAAO;AAAA,YACf,SAAS;AAAA,cACR;AAAA,cACA;AAAA,cACA,OAAO,OAAO;AAAA,YACf;AAAA,UACD,CAAC;AACD,gBAAM,KAAK,qBAAqB;AAAA,YAC/B;AAAA,YACA;AAAA,YACA,sBAAsB;AAAA,YACtB,CAAC;AAAA,YACD;AAAA,UACD;AACA,cAAI,MAAM,yBAAyB;AAClC;AAAA,UACD;AAAA,QACD;AAAA,MACD,QAAQ;AAAA,MAER,UAAE;AACD,qBAAa,QAAQ;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,gBACP,OACA,gBACA,UACA,UACA,OACC;AACD,WAAO;AAAA,MACN,KAAK,wBAAwB;AAAA,MAC7B;AAAA,MACA,MAAM,kBAAkB;AAAA,MACxB;AAAA,QACC,MAAM,sBAAsB;AAAA,QAC5B,eAAe,wBAAwB;AAAA,QACvC,QAAQ;AAAA,UACP,SAAS;AAAA,UACT;AAAA,UACA,sBAAsB;AAAA,QACvB;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AA/TM,8BAAN;AAAA,EAKG;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,GAfG;AAiUC,IAAM,+BAAN,cACE,WAET;AAAA,EACC,YAEkB,sBACkB,iBAClC;AACD,UAAM;AAHW;AACkB;AAInC,SAAK,yBAAyB;AAAA,EAC/B;AAAA,EA9wBD,OAqwBA;AAAA;AAAA;AAAA,EAWS,2BAAiC;AACxC,SAAK;AAAA,MACJ,KAAK,gBAAgB,MAAM;AAAA,QAC1B,KAAK,qBAAqB;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK,gBAAgB,MAAM;AAAA,QAC1B,KAAK,qBAAqB;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK,gBAAgB,MAAM;AAAA,QAC1B,KAAK,qBAAqB;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK,gBAAgB,MAAM;AAAA,QAC1B,KAAK,qBAAqB;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK,gBAAgB,MAAM;AAAA,QAC1B,KAAK,qBAAqB;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAnDa,+BAAN;AAAA,EAKJ;AAAA,EAEA;AAAA,GAPU;AAqDb,MAAM,iCACL,SAAS;AAAA,EACR,iCAAiC;AAClC;AACD,+BAA+B;AAAA,EAC9B;AAAA,EACA,eAAe;AAChB;",
  "names": []
}
