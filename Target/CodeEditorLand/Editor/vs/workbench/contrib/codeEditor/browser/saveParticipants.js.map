{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IActiveCodeEditor, isCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { trimTrailingWhitespace } from '../../../../editor/common/commands/trimTrailingWhitespaceCommand.js';\nimport { EditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Position } from '../../../../editor/common/core/position.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { CodeActionProvider, CodeActionTriggerType } from '../../../../editor/common/languages.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { ApplyCodeActionReason, applyCodeAction, getCodeActions } from '../../../../editor/contrib/codeAction/browser/codeAction.js';\nimport { CodeActionKind, CodeActionTriggerSource } from '../../../../editor/contrib/codeAction/common/types.js';\nimport { FormattingMode, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider } from '../../../../editor/contrib/format/browser/format.js';\nimport { SnippetController2 } from '../../../../editor/contrib/snippet/browser/snippetController2.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgress, IProgressStep, Progress } from '../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchContributionsExtensions } from '../../../common/contributions.js';\nimport { SaveReason } from '../../../common/editor.js';\nimport { getModifiedRanges } from '../../format/browser/formatModified.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { ITextFileEditorModel, ITextFileSaveParticipant, ITextFileSaveParticipantContext, ITextFileService } from '../../../services/textfile/common/textfiles.js';\n\nexport class TrimWhitespaceParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, context: ITextFileSaveParticipantContext): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst trimTrailingWhitespaceOption = this.configurationService.getValue<boolean>('files.trimTrailingWhitespace', { overrideIdentifier: model.textEditorModel.getLanguageId(), resource: model.resource });\n\t\tconst trimInRegexAndStrings = this.configurationService.getValue<boolean>('files.trimTrailingWhitespaceInRegexAndStrings', { overrideIdentifier: model.textEditorModel.getLanguageId(), resource: model.resource });\n\t\tif (trimTrailingWhitespaceOption) {\n\t\t\tthis.doTrimTrailingWhitespace(model.textEditorModel, context.reason === SaveReason.AUTO, trimInRegexAndStrings);\n\t\t}\n\t}\n\n\tprivate doTrimTrailingWhitespace(model: ITextModel, isAutoSaved: boolean, trimInRegexesAndStrings: boolean): void {\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cursors: Position[] = [];\n\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\t// Find `prevSelection` in any case do ensure a good undo stack when pushing the edit\n\t\t\t// Collect active cursors in `cursors` only if `isAutoSaved` to avoid having the cursors jump\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tcursors = prevSelection.map(s => s.getPosition());\n\t\t\t\tconst snippetsRange = SnippetController2.get(editor)?.getSessionEnclosingRange();\n\t\t\t\tif (snippetsRange) {\n\t\t\t\t\tfor (let lineNumber = snippetsRange.startLineNumber; lineNumber <= snippetsRange.endLineNumber; lineNumber++) {\n\t\t\t\t\t\tcursors.push(new Position(lineNumber, model.getLineMaxColumn(lineNumber)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst ops = trimTrailingWhitespace(model, cursors, trimInRegexesAndStrings);\n\t\tif (!ops.length) {\n\t\t\treturn; // Nothing to do\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, ops, (_edits) => prevSelection);\n\t}\n}\n\nfunction findEditor(model: ITextModel, codeEditorService: ICodeEditorService): IActiveCodeEditor | null {\n\tlet candidate: IActiveCodeEditor | null = null;\n\n\tif (model.isAttachedToEditor()) {\n\t\tfor (const editor of codeEditorService.listCodeEditors()) {\n\t\t\tif (editor.hasModel() && editor.getModel() === model) {\n\t\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t\treturn editor; // favour focused editor if there are multiple\n\t\t\t\t}\n\n\t\t\t\tcandidate = editor;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn candidate;\n}\n\nexport class FinalNewLineParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, context: ITextFileSaveParticipantContext): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.insertFinalNewline', { overrideIdentifier: model.textEditorModel.getLanguageId(), resource: model.resource })) {\n\t\t\tthis.doInsertFinalNewLine(model.textEditorModel);\n\t\t}\n\t}\n\n\tprivate doInsertFinalNewLine(model: ITextModel): void {\n\t\tconst lineCount = model.getLineCount();\n\t\tconst lastLine = model.getLineContent(lineCount);\n\t\tconst lastLineIsEmptyOrWhitespace = strings.lastNonWhitespaceIndex(lastLine) === -1;\n\n\t\tif (!lineCount || lastLineIsEmptyOrWhitespace) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits = [EditOperation.insert(new Position(lineCount, model.getLineMaxColumn(lineCount)), model.getEOL())];\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\teditor.executeEdits('insertFinalNewLine', edits, editor.getSelections());\n\t\t} else {\n\t\t\tmodel.pushEditOperations([], edits, () => null);\n\t\t}\n\t}\n}\n\nexport class TrimFinalNewLinesParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, context: ITextFileSaveParticipantContext): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.trimFinalNewlines', { overrideIdentifier: model.textEditorModel.getLanguageId(), resource: model.resource })) {\n\t\t\tthis.doTrimFinalNewLines(model.textEditorModel, context.reason === SaveReason.AUTO);\n\t\t}\n\t}\n\n\t/**\n\t * returns 0 if the entire file is empty\n\t */\n\tprivate findLastNonEmptyLine(model: ITextModel): number {\n\t\tfor (let lineNumber = model.getLineCount(); lineNumber >= 1; lineNumber--) {\n\t\t\tconst lineLength = model.getLineLength(lineNumber);\n\t\t\tif (lineLength > 0) {\n\t\t\t\t// this line has content\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\t// no line has content\n\t\treturn 0;\n\t}\n\n\tprivate doTrimFinalNewLines(model: ITextModel, isAutoSaved: boolean): void {\n\t\tconst lineCount = model.getLineCount();\n\n\t\t// Do not insert new line if file does not end with new line\n\t\tif (lineCount === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cannotTouchLineNumber = 0;\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tfor (let i = 0, len = prevSelection.length; i < len; i++) {\n\t\t\t\t\tconst positionLineNumber = prevSelection[i].positionLineNumber;\n\t\t\t\t\tif (positionLineNumber > cannotTouchLineNumber) {\n\t\t\t\t\t\tcannotTouchLineNumber = positionLineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lastNonEmptyLine = this.findLastNonEmptyLine(model);\n\t\tconst deleteFromLineNumber = Math.max(lastNonEmptyLine + 1, cannotTouchLineNumber + 1);\n\t\tconst deletionRange = model.validateRange(new Range(deleteFromLineNumber, 1, lineCount, model.getLineMaxColumn(lineCount)));\n\n\t\tif (deletionRange.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, [EditOperation.delete(deletionRange)], _edits => prevSelection);\n\n\t\teditor?.setSelections(prevSelection);\n\t}\n}\n\nclass FormatOnSaveParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, context: ITextFileSaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\t\tconst overrides = { overrideIdentifier: textEditorModel.getLanguageId(), resource: textEditorModel.uri };\n\n\t\tconst nestedProgress = new Progress<{ displayName?: string; extensionId?: ExtensionIdentifier }>(provider => {\n\t\t\tprogress.report({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t{ key: 'formatting2', comment: ['[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}'] },\n\t\t\t\t\t\"Running '{0}' Formatter ([configure]({1})).\",\n\t\t\t\t\tprovider.displayName || provider.extensionId && provider.extensionId.value || '???',\n\t\t\t\t\t'command:workbench.action.openSettings?%5B%22editor.formatOnSave%22%5D'\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\tconst enabled = this.configurationService.getValue<boolean>('editor.formatOnSave', overrides);\n\t\tif (!enabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst editorOrModel = findEditor(textEditorModel, this.codeEditorService) || textEditorModel;\n\t\tconst mode = this.configurationService.getValue<'file' | 'modifications' | 'modificationsIfAvailable'>('editor.formatOnSaveMode', overrides);\n\n\t\tif (mode === 'file') {\n\t\t\tawait this.instantiationService.invokeFunction(formatDocumentWithSelectedProvider, editorOrModel, FormattingMode.Silent, nestedProgress, token);\n\n\t\t} else {\n\t\t\tconst ranges = await this.instantiationService.invokeFunction(getModifiedRanges, isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel);\n\t\t\tif (ranges === null && mode === 'modificationsIfAvailable') {\n\t\t\t\t// no SCM, fallback to formatting the whole file iff wanted\n\t\t\t\tawait this.instantiationService.invokeFunction(formatDocumentWithSelectedProvider, editorOrModel, FormattingMode.Silent, nestedProgress, token);\n\n\t\t\t} else if (ranges) {\n\t\t\t\t// formatted modified ranges\n\t\t\t\tawait this.instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, editorOrModel, ranges, FormattingMode.Silent, nestedProgress, token, false);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass CodeActionOnSaveParticipant extends Disposable implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.hostService.onDidChangeFocus(() => { this.triggerCodeActionsCommand(); }));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => { this.triggerCodeActionsCommand(); }));\n\t}\n\n\tprivate async triggerCodeActionsCommand() {\n\t\tif (this.configurationService.getValue<boolean>('editor.codeActions.triggerOnFocusChange') && this.configurationService.getValue<string>('files.autoSave') === 'afterDelay') {\n\t\t\tconst model = this.codeEditorService.getActiveCodeEditor()?.getModel();\n\t\t\tif (!model) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst settingsOverrides = { overrideIdentifier: model.getLanguageId(), resource: model.uri };\n\t\t\tconst setting = this.configurationService.getValue<{ [kind: string]: string | boolean } | string[]>('editor.codeActionsOnSave', settingsOverrides);\n\n\t\t\tif (!setting) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (Array.isArray(setting)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst settingItems: string[] = Object.keys(setting).filter(x => setting[x] && setting[x] === 'always' && CodeActionKind.Source.contains(new HierarchicalKind(x)));\n\n\t\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\n\t\t\tconst codeActionKindList = [];\n\t\t\tfor (const item of settingItems) {\n\t\t\t\tcodeActionKindList.push(new HierarchicalKind(item));\n\t\t\t}\n\n\t\t\t// run code actions based on what is found from setting === 'always', no exclusions.\n\t\t\tawait this.applyOnSaveActions(model, codeActionKindList, [], Progress.None, cancellationTokenSource.token);\n\t\t}\n\t}\n\n\tasync participate(model: ITextFileEditorModel, context: ITextFileSaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\t\tconst settingsOverrides = { overrideIdentifier: textEditorModel.getLanguageId(), resource: textEditorModel.uri };\n\n\t\t// Convert boolean values to strings\n\t\tconst setting = this.configurationService.getValue<{ [kind: string]: string | boolean } | string[]>('editor.codeActionsOnSave', settingsOverrides);\n\t\tif (!setting) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (context.reason !== SaveReason.EXPLICIT && Array.isArray(setting)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst settingItems: string[] = Array.isArray(setting)\n\t\t\t? setting\n\t\t\t: Object.keys(setting).filter(x => setting[x] && setting[x] !== 'never');\n\n\t\tconst codeActionsOnSave = this.createCodeActionsOnSave(settingItems);\n\n\t\tif (!Array.isArray(setting)) {\n\t\t\tcodeActionsOnSave.sort((a, b) => {\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(a)) {\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\tif (!codeActionsOnSave.length) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst excludedActions = Array.isArray(setting)\n\t\t\t? []\n\t\t\t: Object.keys(setting)\n\t\t\t\t.filter(x => setting[x] === 'never' || false)\n\t\t\t\t.map(x => new HierarchicalKind(x));\n\n\t\tprogress.report({ message: localize('codeaction', \"Quick Fixes\") });\n\n\t\tconst filteredSaveList = Array.isArray(setting) ? codeActionsOnSave : codeActionsOnSave.filter(x => setting[x.value] === 'always' || ((setting[x.value] === 'explicit' || setting[x.value] === true) && context.reason === SaveReason.EXPLICIT));\n\n\t\tawait this.applyOnSaveActions(textEditorModel, filteredSaveList, excludedActions, progress, token);\n\t}\n\n\tprivate createCodeActionsOnSave(settingItems: readonly string[]): HierarchicalKind[] {\n\t\tconst kinds = settingItems.map(x => new HierarchicalKind(x));\n\n\t\t// Remove subsets\n\t\treturn kinds.filter(kind => {\n\t\t\treturn kinds.every(otherKind => otherKind.equals(kind) || !otherKind.contains(kind));\n\t\t});\n\t}\n\n\tprivate async applyOnSaveActions(model: ITextModel, codeActionsOnSave: readonly HierarchicalKind[], excludes: readonly HierarchicalKind[], progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\n\t\tconst getActionProgress = new class implements IProgress<CodeActionProvider> {\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t{ key: 'codeaction.get2', comment: ['[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}'] },\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure]({1})).\",\n\t\t\t\t\t\t[...this._names].map(name => `'${name}'`).join(', '),\n\t\t\t\t\t\t'command:workbench.action.openSettings?%5B%22editor.codeActionsOnSave%22%5D'\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (provider.displayName && !this._names.has(provider.displayName)) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (const codeActionKind of codeActionsOnSave) {\n\t\t\tconst sw = new StopWatch();\n\n\t\t\tconst actionsToRun = await this.getActionsToRun(model, codeActionKind, excludes, getActionProgress, token);\n\n\t\t\t// Telemetry for duration of each code action on save.\n\t\t\ttype CodeActionOnSave = {\n\t\t\t\tcodeAction: string;\n\t\t\t\tduration: number;\n\t\t\t};\n\t\t\ttype CodeActionOnSaveClassification = {\n\t\t\t\towner: 'justschen';\n\t\t\t\tcomment: 'Information about the code action that was accepted on save.';\n\t\t\t\tcodeAction: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Kind of the code action setting that is run.' };\n\t\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Duration it took for TS to return the action to run for each kind. ' };\n\t\t\t};\n\n\t\t\tthis.telemetryService.publicLog2<CodeActionOnSave, CodeActionOnSaveClassification>('codeAction.appliedOnSave', {\n\t\t\t\tcodeAction: codeActionKind.value,\n\t\t\t\tduration: sw.elapsed()\n\t\t\t});\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tfor (const action of actionsToRun.validActions) {\n\t\t\t\t\tprogress.report({ message: localize('codeAction.apply', \"Applying code action '{0}'.\", action.action.title) });\n\t\t\t\t\tawait this.instantiationService.invokeFunction(applyCodeAction, action, ApplyCodeActionReason.OnSave, {}, token);\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// Failure to apply a code action should not block other on save actions\n\t\t\t} finally {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getActionsToRun(model: ITextModel, codeActionKind: HierarchicalKind, excludes: readonly HierarchicalKind[], progress: IProgress<CodeActionProvider>, token: CancellationToken) {\n\t\treturn getCodeActions(this.languageFeaturesService.codeActionProvider, model, model.getFullModelRange(), {\n\t\t\ttype: CodeActionTriggerType.Auto,\n\t\t\ttriggerAction: CodeActionTriggerSource.OnSave,\n\t\t\tfilter: { include: codeActionKind, excludes: excludes, includeSourceActions: true },\n\t\t}, progress, token);\n\t}\n}\n\nexport class SaveParticipantsContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerSaveParticipants();\n\t}\n\n\tprivate registerSaveParticipants(): void {\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(TrimWhitespaceParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(CodeActionOnSaveParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(FormatOnSaveParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(FinalNewLineParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(TrimFinalNewLinesParticipant)));\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchContributionsExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(SaveParticipantsContribution, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": []
}
