{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\taddDisposableListener,\n\tonDidRegisterWindow,\n} from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport type {\n\tIActiveCodeEditor,\n\tICodeEditor,\n\tIDiffEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorAction,\n\tEditorContributionInstantiation,\n\ttype ServicesAccessor,\n\tregisterDiffEditorContribution,\n\tregisterEditorAction,\n\tregisterEditorContribution,\n} from \"../../../../editor/browser/editorExtensions.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { EditorOption } from \"../../../../editor/common/config/editorOptions.js\";\nimport type {\n\tIDiffEditorContribution,\n\tIEditorContribution,\n} from \"../../../../editor/common/editorCommon.js\";\nimport { EditorContextKeys } from \"../../../../editor/common/editorContextKeys.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\n\nconst transientWordWrapState = \"transientWordWrapState\";\nconst isWordWrapMinifiedKey = \"isWordWrapMinified\";\nconst isDominatedByLongLinesKey = \"isDominatedByLongLines\";\nconst CAN_TOGGLE_WORD_WRAP = new RawContextKey<boolean>(\n\t\"canToggleWordWrap\",\n\tfalse,\n\ttrue,\n);\nconst EDITOR_WORD_WRAP = new RawContextKey<boolean>(\n\t\"editorWordWrap\",\n\tfalse,\n\tnls.localize(\n\t\t\"editorWordWrap\",\n\t\t\"Whether the editor is currently using word wrapping.\",\n\t),\n);\n\n/**\n * State written/read by the toggle word wrap action and associated with a particular model.\n */\nexport interface IWordWrapTransientState {\n\treadonly wordWrapOverride: \"on\" | \"off\";\n}\n\n/**\n * Store (in memory) the word wrap state for a particular model.\n */\nexport function writeTransientState(\n\tmodel: ITextModel,\n\tstate: IWordWrapTransientState | null,\n\tcodeEditorService: ICodeEditorService,\n): void {\n\tcodeEditorService.setTransientModelProperty(\n\t\tmodel,\n\t\ttransientWordWrapState,\n\t\tstate,\n\t);\n}\n\n/**\n * Read (in memory) the word wrap state for a particular model.\n */\nexport function readTransientState(\n\tmodel: ITextModel,\n\tcodeEditorService: ICodeEditorService,\n): IWordWrapTransientState | null {\n\treturn codeEditorService.getTransientModelProperty(\n\t\tmodel,\n\t\ttransientWordWrapState,\n\t);\n}\n\nconst TOGGLE_WORD_WRAP_ID = \"editor.action.toggleWordWrap\";\nclass ToggleWordWrapAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\t\tlabel: nls.localize(\"toggle.wordwrap\", \"View: Toggle Word Wrap\"),\n\t\t\talias: \"View: Toggle Word Wrap\",\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: null,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.KeyZ,\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\tif (!canToggleWordWrap(codeEditorService, editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\n\t\t// Read the current state\n\t\tconst transientState = readTransientState(model, codeEditorService);\n\n\t\t// Compute the new state\n\t\tlet newState: IWordWrapTransientState | null;\n\t\tif (transientState) {\n\t\t\tnewState = null;\n\t\t} else {\n\t\t\tconst actualWrappingInfo = editor.getOption(\n\t\t\t\tEditorOption.wrappingInfo,\n\t\t\t);\n\t\t\tconst wordWrapOverride =\n\t\t\t\tactualWrappingInfo.wrappingColumn === -1 ? \"on\" : \"off\";\n\t\t\tnewState = { wordWrapOverride };\n\t\t}\n\n\t\t// Write the new state\n\t\t// (this will cause an event and the controller will apply the state)\n\t\twriteTransientState(model, newState, codeEditorService);\n\n\t\t// if we are in a diff editor, update the other editor (if possible)\n\t\tconst diffEditor = findDiffEditorContainingCodeEditor(\n\t\t\teditor,\n\t\t\tcodeEditorService,\n\t\t);\n\t\tif (diffEditor) {\n\t\t\tconst originalEditor = diffEditor.getOriginalEditor();\n\t\t\tconst modifiedEditor = diffEditor.getModifiedEditor();\n\t\t\tconst otherEditor =\n\t\t\t\toriginalEditor === editor ? modifiedEditor : originalEditor;\n\t\t\tif (canToggleWordWrap(codeEditorService, otherEditor)) {\n\t\t\t\twriteTransientState(\n\t\t\t\t\totherEditor.getModel(),\n\t\t\t\t\tnewState,\n\t\t\t\t\tcodeEditorService,\n\t\t\t\t);\n\t\t\t\tdiffEditor.updateOptions({});\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * If `editor` is the original or modified editor of a diff editor, it returns it.\n * It returns null otherwise.\n */\nfunction findDiffEditorContainingCodeEditor(\n\teditor: ICodeEditor,\n\tcodeEditorService: ICodeEditorService,\n): IDiffEditor | null {\n\tif (!editor.getOption(EditorOption.inDiffEditor)) {\n\t\treturn null;\n\t}\n\tfor (const diffEditor of codeEditorService.listDiffEditors()) {\n\t\tconst originalEditor = diffEditor.getOriginalEditor();\n\t\tconst modifiedEditor = diffEditor.getModifiedEditor();\n\t\tif (originalEditor === editor || modifiedEditor === editor) {\n\t\t\treturn diffEditor;\n\t\t}\n\t}\n\treturn null;\n}\n\nclass ToggleWordWrapController\n\textends Disposable\n\timplements IEditorContribution\n{\n\tpublic static readonly ID = \"editor.contrib.toggleWordWrapController\";\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IContextKeyService\n\t\tprivate readonly _contextKeyService: IContextKeyService,\n\t\t@ICodeEditorService\n\t\tprivate readonly _codeEditorService: ICodeEditorService,\n\t) {\n\t\tsuper();\n\n\t\tconst options = this._editor.getOptions();\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst isWordWrapMinified = this._contextKeyService.createKey(\n\t\t\tisWordWrapMinifiedKey,\n\t\t\twrappingInfo.isWordWrapMinified,\n\t\t);\n\t\tconst isDominatedByLongLines = this._contextKeyService.createKey(\n\t\t\tisDominatedByLongLinesKey,\n\t\t\twrappingInfo.isDominatedByLongLines,\n\t\t);\n\t\tlet currentlyApplyingEditorConfig = false;\n\n\t\tthis._register(\n\t\t\t_editor.onDidChangeConfiguration((e) => {\n\t\t\t\tif (!e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst options = this._editor.getOptions();\n\t\t\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\t\t\tisWordWrapMinified.set(wrappingInfo.isWordWrapMinified);\n\t\t\t\tisDominatedByLongLines.set(wrappingInfo.isDominatedByLongLines);\n\t\t\t\tif (!currentlyApplyingEditorConfig) {\n\t\t\t\t\t// I am not the cause of the word wrap getting changed\n\t\t\t\t\tensureWordWrapSettings();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\t_editor.onDidChangeModel((e) => {\n\t\t\t\tensureWordWrapSettings();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\t_codeEditorService.onDidChangeTransientModelProperty(() => {\n\t\t\t\tensureWordWrapSettings();\n\t\t\t}),\n\t\t);\n\n\t\tconst ensureWordWrapSettings = () => {\n\t\t\tif (!canToggleWordWrap(this._codeEditorService, this._editor)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst transientState = readTransientState(\n\t\t\t\tthis._editor.getModel(),\n\t\t\t\tthis._codeEditorService,\n\t\t\t);\n\n\t\t\t// Apply the state\n\t\t\ttry {\n\t\t\t\tcurrentlyApplyingEditorConfig = true;\n\t\t\t\tthis._applyWordWrapState(transientState);\n\t\t\t} finally {\n\t\t\t\tcurrentlyApplyingEditorConfig = false;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _applyWordWrapState(state: IWordWrapTransientState | null): void {\n\t\tconst wordWrapOverride2 = state ? state.wordWrapOverride : \"inherit\";\n\t\tthis._editor.updateOptions({\n\t\t\twordWrapOverride2: wordWrapOverride2,\n\t\t});\n\t}\n}\n\nclass DiffToggleWordWrapController\n\textends Disposable\n\timplements IDiffEditorContribution\n{\n\tpublic static readonly ID = \"diffeditor.contrib.toggleWordWrapController\";\n\n\tconstructor(\n\t\tprivate readonly _diffEditor: IDiffEditor,\n\t\t@ICodeEditorService\n\t\tprivate readonly _codeEditorService: ICodeEditorService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tthis._diffEditor.onDidChangeModel(() => {\n\t\t\t\tthis._ensureSyncedWordWrapToggle();\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _ensureSyncedWordWrapToggle(): void {\n\t\tconst originalEditor = this._diffEditor.getOriginalEditor();\n\t\tconst modifiedEditor = this._diffEditor.getModifiedEditor();\n\n\t\tif (!originalEditor.hasModel() || !modifiedEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst originalTransientState = readTransientState(\n\t\t\toriginalEditor.getModel(),\n\t\t\tthis._codeEditorService,\n\t\t);\n\t\tconst modifiedTransientState = readTransientState(\n\t\t\tmodifiedEditor.getModel(),\n\t\t\tthis._codeEditorService,\n\t\t);\n\n\t\tif (\n\t\t\toriginalTransientState &&\n\t\t\t!modifiedTransientState &&\n\t\t\tcanToggleWordWrap(this._codeEditorService, originalEditor)\n\t\t) {\n\t\t\twriteTransientState(\n\t\t\t\tmodifiedEditor.getModel(),\n\t\t\t\toriginalTransientState,\n\t\t\t\tthis._codeEditorService,\n\t\t\t);\n\t\t\tthis._diffEditor.updateOptions({});\n\t\t}\n\t\tif (\n\t\t\t!originalTransientState &&\n\t\t\tmodifiedTransientState &&\n\t\t\tcanToggleWordWrap(this._codeEditorService, modifiedEditor)\n\t\t) {\n\t\t\twriteTransientState(\n\t\t\t\toriginalEditor.getModel(),\n\t\t\t\tmodifiedTransientState,\n\t\t\t\tthis._codeEditorService,\n\t\t\t);\n\t\t\tthis._diffEditor.updateOptions({});\n\t\t}\n\t}\n}\n\nfunction canToggleWordWrap(\n\tcodeEditorService: ICodeEditorService,\n\teditor: ICodeEditor | null,\n): editor is IActiveCodeEditor {\n\tif (!editor) {\n\t\treturn false;\n\t}\n\tif (editor.isSimpleWidget) {\n\t\t// in a simple widget...\n\t\treturn false;\n\t}\n\t// Ensure correct word wrap settings\n\tconst model = editor.getModel();\n\tif (!model) {\n\t\treturn false;\n\t}\n\tif (editor.getOption(EditorOption.inDiffEditor)) {\n\t\t// this editor belongs to a diff editor\n\t\tfor (const diffEditor of codeEditorService.listDiffEditors()) {\n\t\t\tif (\n\t\t\t\tdiffEditor.getOriginalEditor() === editor &&\n\t\t\t\t!diffEditor.renderSideBySide\n\t\t\t) {\n\t\t\t\t// this editor is the left side of an inline diff editor\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\nclass EditorWordWrapContextKeyTracker\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.editorWordWrapContextKeyTracker\";\n\n\tprivate readonly _canToggleWordWrap: IContextKey<boolean>;\n\tprivate readonly _editorWordWrap: IContextKey<boolean>;\n\tprivate _activeEditor: ICodeEditor | null;\n\tprivate readonly _activeEditorListener: DisposableStore;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ICodeEditorService\n\t\tprivate readonly _codeEditorService: ICodeEditorService,\n\t\t@IContextKeyService\n\t\tprivate readonly _contextService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tEvent.runAndSubscribe(\n\t\t\t\tonDidRegisterWindow,\n\t\t\t\t({ window, disposables }) => {\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\taddDisposableListener(\n\t\t\t\t\t\t\twindow,\n\t\t\t\t\t\t\t\"focus\",\n\t\t\t\t\t\t\t() => this._update(),\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\taddDisposableListener(\n\t\t\t\t\t\t\twindow,\n\t\t\t\t\t\t\t\"blur\",\n\t\t\t\t\t\t\t() => this._update(),\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\t{ window: mainWindow, disposables: this._store },\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._editorService.onDidActiveEditorChange(() => this._update()),\n\t\t);\n\t\tthis._canToggleWordWrap = CAN_TOGGLE_WORD_WRAP.bindTo(\n\t\t\tthis._contextService,\n\t\t);\n\t\tthis._editorWordWrap = EDITOR_WORD_WRAP.bindTo(this._contextService);\n\t\tthis._activeEditor = null;\n\t\tthis._activeEditorListener = new DisposableStore();\n\t\tthis._update();\n\t}\n\n\tprivate _update(): void {\n\t\tconst activeEditor =\n\t\t\tthis._codeEditorService.getFocusedCodeEditor() ||\n\t\t\tthis._codeEditorService.getActiveCodeEditor();\n\t\tif (this._activeEditor === activeEditor) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._activeEditorListener.clear();\n\t\tthis._activeEditor = activeEditor;\n\n\t\tif (activeEditor) {\n\t\t\tthis._activeEditorListener.add(\n\t\t\t\tactiveEditor.onDidChangeModel(() =>\n\t\t\t\t\tthis._updateFromCodeEditor(),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._activeEditorListener.add(\n\t\t\t\tactiveEditor.onDidChangeConfiguration((e) => {\n\t\t\t\t\tif (e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\t\t\t\tthis._updateFromCodeEditor();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis._updateFromCodeEditor();\n\t\t}\n\t}\n\n\tprivate _updateFromCodeEditor(): void {\n\t\tif (canToggleWordWrap(this._codeEditorService, this._activeEditor)) {\n\t\t\tconst wrappingInfo = this._activeEditor.getOption(\n\t\t\t\tEditorOption.wrappingInfo,\n\t\t\t);\n\t\t\tthis._setValues(true, wrappingInfo.wrappingColumn !== -1);\n\t\t} else {\n\t\t\treturn this._setValues(false, false);\n\t\t}\n\t}\n\n\tprivate _setValues(canToggleWordWrap: boolean, isWordWrap: boolean): void {\n\t\tthis._canToggleWordWrap.set(canToggleWordWrap);\n\t\tthis._editorWordWrap.set(isWordWrap);\n\t}\n}\n\nregisterWorkbenchContribution2(\n\tEditorWordWrapContextKeyTracker.ID,\n\tEditorWordWrapContextKeyTracker,\n\tWorkbenchPhase.AfterRestored,\n);\n\nregisterEditorContribution(\n\tToggleWordWrapController.ID,\n\tToggleWordWrapController,\n\tEditorContributionInstantiation.Eager,\n); // eager because it needs to change the editor word wrap configuration\nregisterDiffEditorContribution(\n\tDiffToggleWordWrapController.ID,\n\tDiffToggleWordWrapController,\n);\nregisterEditorAction(ToggleWordWrapAction);\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize(\"unwrapMinified\", \"Disable wrapping for this file\"),\n\t\ticon: Codicon.wordWrap,\n\t},\n\tgroup: \"navigation\",\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tContextKeyExpr.has(isDominatedByLongLinesKey),\n\t\tContextKeyExpr.has(isWordWrapMinifiedKey),\n\t),\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize(\"wrapMinified\", \"Enable wrapping for this file\"),\n\t\ticon: Codicon.wordWrap,\n\t},\n\tgroup: \"navigation\",\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tEditorContextKeys.inDiffEditor.negate(),\n\t\tContextKeyExpr.has(isDominatedByLongLinesKey),\n\t\tContextKeyExpr.not(isWordWrapMinifiedKey),\n\t),\n});\n\n// View menu\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize(\n\t\t\t{ key: \"miToggleWordWrap\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\"&&Word Wrap\",\n\t\t),\n\t\ttoggled: EDITOR_WORD_WRAP,\n\t\tprecondition: CAN_TOGGLE_WORD_WRAP,\n\t},\n\torder: 1,\n\tgroup: \"5_editor\",\n});\n"],
  "mappings": "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",
  "names": ["options", "wrappingInfo", "canToggleWordWrap"]
}
