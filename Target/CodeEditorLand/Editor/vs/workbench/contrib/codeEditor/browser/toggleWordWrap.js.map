{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, onDidRegisterWindow } from '../../../../base/browser/dom.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IActiveCodeEditor, ICodeEditor, IDiffEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { EditorAction, EditorContributionInstantiation, ServicesAccessor, registerDiffEditorContribution, registerEditorAction, registerEditorContribution } from '../../../../editor/browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { IDiffEditorContribution, IEditorContribution } from '../../../../editor/common/editorCommon.js';\nimport { EditorContextKeys } from '../../../../editor/common/editorContextKeys.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nconst transientWordWrapState = 'transientWordWrapState';\nconst isWordWrapMinifiedKey = 'isWordWrapMinified';\nconst isDominatedByLongLinesKey = 'isDominatedByLongLines';\nconst CAN_TOGGLE_WORD_WRAP = new RawContextKey<boolean>('canToggleWordWrap', false, true);\nconst EDITOR_WORD_WRAP = new RawContextKey<boolean>('editorWordWrap', false, nls.localize('editorWordWrap', 'Whether the editor is currently using word wrapping.'));\n\n/**\n * State written/read by the toggle word wrap action and associated with a particular model.\n */\nexport interface IWordWrapTransientState {\n\treadonly wordWrapOverride: 'on' | 'off';\n}\n\n/**\n * Store (in memory) the word wrap state for a particular model.\n */\nexport function writeTransientState(model: ITextModel, state: IWordWrapTransientState | null, codeEditorService: ICodeEditorService): void {\n\tcodeEditorService.setTransientModelProperty(model, transientWordWrapState, state);\n}\n\n/**\n * Read (in memory) the word wrap state for a particular model.\n */\nexport function readTransientState(model: ITextModel, codeEditorService: ICodeEditorService): IWordWrapTransientState | null {\n\treturn codeEditorService.getTransientModelProperty(model, transientWordWrapState);\n}\n\nconst TOGGLE_WORD_WRAP_ID = 'editor.action.toggleWordWrap';\nclass ToggleWordWrapAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\t\tlabel: nls.localize('toggle.wordwrap', \"View: Toggle Word Wrap\"),\n\t\t\talias: 'View: Toggle Word Wrap',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: null,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.KeyZ,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\tif (!canToggleWordWrap(codeEditorService, editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\n\t\t// Read the current state\n\t\tconst transientState = readTransientState(model, codeEditorService);\n\n\t\t// Compute the new state\n\t\tlet newState: IWordWrapTransientState | null;\n\t\tif (transientState) {\n\t\t\tnewState = null;\n\t\t} else {\n\t\t\tconst actualWrappingInfo = editor.getOption(EditorOption.wrappingInfo);\n\t\t\tconst wordWrapOverride = (actualWrappingInfo.wrappingColumn === -1 ? 'on' : 'off');\n\t\t\tnewState = { wordWrapOverride };\n\t\t}\n\n\t\t// Write the new state\n\t\t// (this will cause an event and the controller will apply the state)\n\t\twriteTransientState(model, newState, codeEditorService);\n\n\t\t// if we are in a diff editor, update the other editor (if possible)\n\t\tconst diffEditor = findDiffEditorContainingCodeEditor(editor, codeEditorService);\n\t\tif (diffEditor) {\n\t\t\tconst originalEditor = diffEditor.getOriginalEditor();\n\t\t\tconst modifiedEditor = diffEditor.getModifiedEditor();\n\t\t\tconst otherEditor = (originalEditor === editor ? modifiedEditor : originalEditor);\n\t\t\tif (canToggleWordWrap(codeEditorService, otherEditor)) {\n\t\t\t\twriteTransientState(otherEditor.getModel(), newState, codeEditorService);\n\t\t\t\tdiffEditor.updateOptions({});\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * If `editor` is the original or modified editor of a diff editor, it returns it.\n * It returns null otherwise.\n */\nfunction findDiffEditorContainingCodeEditor(editor: ICodeEditor, codeEditorService: ICodeEditorService): IDiffEditor | null {\n\tif (!editor.getOption(EditorOption.inDiffEditor)) {\n\t\treturn null;\n\t}\n\tfor (const diffEditor of codeEditorService.listDiffEditors()) {\n\t\tconst originalEditor = diffEditor.getOriginalEditor();\n\t\tconst modifiedEditor = diffEditor.getModifiedEditor();\n\t\tif (originalEditor === editor || modifiedEditor === editor) {\n\t\t\treturn diffEditor;\n\t\t}\n\t}\n\treturn null;\n}\n\nclass ToggleWordWrapController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.toggleWordWrapController';\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService\n\t) {\n\t\tsuper();\n\n\t\tconst options = this._editor.getOptions();\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst isWordWrapMinified = this._contextKeyService.createKey(isWordWrapMinifiedKey, wrappingInfo.isWordWrapMinified);\n\t\tconst isDominatedByLongLines = this._contextKeyService.createKey(isDominatedByLongLinesKey, wrappingInfo.isDominatedByLongLines);\n\t\tlet currentlyApplyingEditorConfig = false;\n\n\t\tthis._register(_editor.onDidChangeConfiguration((e) => {\n\t\t\tif (!e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst options = this._editor.getOptions();\n\t\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\t\tisWordWrapMinified.set(wrappingInfo.isWordWrapMinified);\n\t\t\tisDominatedByLongLines.set(wrappingInfo.isDominatedByLongLines);\n\t\t\tif (!currentlyApplyingEditorConfig) {\n\t\t\t\t// I am not the cause of the word wrap getting changed\n\t\t\t\tensureWordWrapSettings();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(_editor.onDidChangeModel((e) => {\n\t\t\tensureWordWrapSettings();\n\t\t}));\n\n\t\tthis._register(_codeEditorService.onDidChangeTransientModelProperty(() => {\n\t\t\tensureWordWrapSettings();\n\t\t}));\n\n\t\tconst ensureWordWrapSettings = () => {\n\t\t\tif (!canToggleWordWrap(this._codeEditorService, this._editor)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst transientState = readTransientState(this._editor.getModel(), this._codeEditorService);\n\n\t\t\t// Apply the state\n\t\t\ttry {\n\t\t\t\tcurrentlyApplyingEditorConfig = true;\n\t\t\t\tthis._applyWordWrapState(transientState);\n\t\t\t} finally {\n\t\t\t\tcurrentlyApplyingEditorConfig = false;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _applyWordWrapState(state: IWordWrapTransientState | null): void {\n\t\tconst wordWrapOverride2 = state ? state.wordWrapOverride : 'inherit';\n\t\tthis._editor.updateOptions({\n\t\t\twordWrapOverride2: wordWrapOverride2\n\t\t});\n\t}\n}\n\nclass DiffToggleWordWrapController extends Disposable implements IDiffEditorContribution {\n\n\tpublic static readonly ID = 'diffeditor.contrib.toggleWordWrapController';\n\n\tconstructor(\n\t\tprivate readonly _diffEditor: IDiffEditor,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._diffEditor.onDidChangeModel(() => {\n\t\t\tthis._ensureSyncedWordWrapToggle();\n\t\t}));\n\t}\n\n\tprivate _ensureSyncedWordWrapToggle(): void {\n\t\tconst originalEditor = this._diffEditor.getOriginalEditor();\n\t\tconst modifiedEditor = this._diffEditor.getModifiedEditor();\n\n\t\tif (!originalEditor.hasModel() || !modifiedEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst originalTransientState = readTransientState(originalEditor.getModel(), this._codeEditorService);\n\t\tconst modifiedTransientState = readTransientState(modifiedEditor.getModel(), this._codeEditorService);\n\n\t\tif (originalTransientState && !modifiedTransientState && canToggleWordWrap(this._codeEditorService, originalEditor)) {\n\t\t\twriteTransientState(modifiedEditor.getModel(), originalTransientState, this._codeEditorService);\n\t\t\tthis._diffEditor.updateOptions({});\n\t\t}\n\t\tif (!originalTransientState && modifiedTransientState && canToggleWordWrap(this._codeEditorService, modifiedEditor)) {\n\t\t\twriteTransientState(originalEditor.getModel(), modifiedTransientState, this._codeEditorService);\n\t\t\tthis._diffEditor.updateOptions({});\n\t\t}\n\t}\n}\n\nfunction canToggleWordWrap(codeEditorService: ICodeEditorService, editor: ICodeEditor | null): editor is IActiveCodeEditor {\n\tif (!editor) {\n\t\treturn false;\n\t}\n\tif (editor.isSimpleWidget) {\n\t\t// in a simple widget...\n\t\treturn false;\n\t}\n\t// Ensure correct word wrap settings\n\tconst model = editor.getModel();\n\tif (!model) {\n\t\treturn false;\n\t}\n\tif (editor.getOption(EditorOption.inDiffEditor)) {\n\t\t// this editor belongs to a diff editor\n\t\tfor (const diffEditor of codeEditorService.listDiffEditors()) {\n\t\t\tif (diffEditor.getOriginalEditor() === editor && !diffEditor.renderSideBySide) {\n\t\t\t\t// this editor is the left side of an inline diff editor\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\nclass EditorWordWrapContextKeyTracker extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.editorWordWrapContextKeyTracker';\n\n\tprivate readonly _canToggleWordWrap: IContextKey<boolean>;\n\tprivate readonly _editorWordWrap: IContextKey<boolean>;\n\tprivate _activeEditor: ICodeEditor | null;\n\tprivate readonly _activeEditorListener: DisposableStore;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IContextKeyService private readonly _contextService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis._register(Event.runAndSubscribe(onDidRegisterWindow, ({ window, disposables }) => {\n\t\t\tdisposables.add(addDisposableListener(window, 'focus', () => this._update(), true));\n\t\t\tdisposables.add(addDisposableListener(window, 'blur', () => this._update(), true));\n\t\t}, { window: mainWindow, disposables: this._store }));\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => this._update()));\n\t\tthis._canToggleWordWrap = CAN_TOGGLE_WORD_WRAP.bindTo(this._contextService);\n\t\tthis._editorWordWrap = EDITOR_WORD_WRAP.bindTo(this._contextService);\n\t\tthis._activeEditor = null;\n\t\tthis._activeEditorListener = new DisposableStore();\n\t\tthis._update();\n\t}\n\n\tprivate _update(): void {\n\t\tconst activeEditor = this._codeEditorService.getFocusedCodeEditor() || this._codeEditorService.getActiveCodeEditor();\n\t\tif (this._activeEditor === activeEditor) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._activeEditorListener.clear();\n\t\tthis._activeEditor = activeEditor;\n\n\t\tif (activeEditor) {\n\t\t\tthis._activeEditorListener.add(activeEditor.onDidChangeModel(() => this._updateFromCodeEditor()));\n\t\t\tthis._activeEditorListener.add(activeEditor.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.hasChanged(EditorOption.wrappingInfo)) {\n\t\t\t\t\tthis._updateFromCodeEditor();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tthis._updateFromCodeEditor();\n\t\t}\n\t}\n\n\tprivate _updateFromCodeEditor(): void {\n\t\tif (!canToggleWordWrap(this._codeEditorService, this._activeEditor)) {\n\t\t\treturn this._setValues(false, false);\n\t\t} else {\n\t\t\tconst wrappingInfo = this._activeEditor.getOption(EditorOption.wrappingInfo);\n\t\t\tthis._setValues(true, wrappingInfo.wrappingColumn !== -1);\n\t\t}\n\t}\n\n\tprivate _setValues(canToggleWordWrap: boolean, isWordWrap: boolean): void {\n\t\tthis._canToggleWordWrap.set(canToggleWordWrap);\n\t\tthis._editorWordWrap.set(isWordWrap);\n\t}\n}\n\nregisterWorkbenchContribution2(EditorWordWrapContextKeyTracker.ID, EditorWordWrapContextKeyTracker, WorkbenchPhase.AfterRestored);\n\nregisterEditorContribution(ToggleWordWrapController.ID, ToggleWordWrapController, EditorContributionInstantiation.Eager); // eager because it needs to change the editor word wrap configuration\nregisterDiffEditorContribution(DiffToggleWordWrapController.ID, DiffToggleWordWrapController);\nregisterEditorAction(ToggleWordWrapAction);\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize('unwrapMinified', \"Disable wrapping for this file\"),\n\t\ticon: Codicon.wordWrap\n\t},\n\tgroup: 'navigation',\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tContextKeyExpr.has(isDominatedByLongLinesKey),\n\t\tContextKeyExpr.has(isWordWrapMinifiedKey)\n\t)\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize('wrapMinified', \"Enable wrapping for this file\"),\n\t\ticon: Codicon.wordWrap\n\t},\n\tgroup: 'navigation',\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tEditorContextKeys.inDiffEditor.negate(),\n\t\tContextKeyExpr.has(isDominatedByLongLinesKey),\n\t\tContextKeyExpr.not(isWordWrapMinifiedKey)\n\t)\n});\n\n\n// View menu\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tcommand: {\n\t\tid: TOGGLE_WORD_WRAP_ID,\n\t\ttitle: nls.localize({ key: 'miToggleWordWrap', comment: ['&& denotes a mnemonic'] }, \"&&Word Wrap\"),\n\t\ttoggled: EDITOR_WORD_WRAP,\n\t\tprecondition: CAN_TOGGLE_WORD_WRAP\n\t},\n\torder: 1,\n\tgroup: '5_editor'\n});\n"],
  "mappings": "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",
  "names": ["options", "wrappingInfo", "canToggleWordWrap"]
}
