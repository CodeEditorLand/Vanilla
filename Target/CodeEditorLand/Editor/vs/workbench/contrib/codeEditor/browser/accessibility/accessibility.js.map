{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./accessibility.css\";\nimport { alert } from \"../../../../../base/browser/ui/aria/aria.js\";\nimport { KeyCode, KeyMod } from \"../../../../../base/common/keyCodes.js\";\nimport { AccessibilityHelpNLS } from \"../../../../../editor/common/standaloneStrings.js\";\nimport * as nls from \"../../../../../nls.js\";\nimport { IAccessibilityService } from \"../../../../../platform/accessibility/common/accessibility.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../../platform/configuration/common/configuration.js\";\nimport type { ServicesAccessor } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { KeybindingWeight } from \"../../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { accessibilityHelpIsShown } from \"../../../accessibility/browser/accessibilityConfiguration.js\";\n\nclass ToggleScreenReaderMode extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"editor.action.toggleScreenReaderAccessibilityMode\",\n\t\t\ttitle: nls.localize2(\n\t\t\t\t\"toggleScreenReaderMode\",\n\t\t\t\t\"Toggle Screen Reader Accessibility Mode\",\n\t\t\t),\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2(\n\t\t\t\t\t\"toggleScreenReaderModeDescription\",\n\t\t\t\t\t\"Toggles an optimized mode for usage with screen readers, braille devices, and other assistive technologies.\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tkeybinding: [\n\t\t\t\t{\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyE,\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 10,\n\t\t\t\t\twhen: accessibilityHelpIsShown,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprimary: KeyMod.Alt | KeyCode.F1 | KeyMod.Shift,\n\t\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.F4 | KeyMod.Shift },\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 10,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst accessibiiltyService = accessor.get(IAccessibilityService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst isScreenReaderOptimized =\n\t\t\taccessibiiltyService.isScreenReaderOptimized();\n\t\tconfigurationService.updateValue(\n\t\t\t\"editor.accessibilitySupport\",\n\t\t\tisScreenReaderOptimized ? \"off\" : \"on\",\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t\talert(\n\t\t\tisScreenReaderOptimized\n\t\t\t\t? AccessibilityHelpNLS.screenReaderModeDisabled\n\t\t\t\t: AccessibilityHelpNLS.screenReaderModeEnabled,\n\t\t);\n\t}\n}\n\nregisterAction2(ToggleScreenReaderMode);\n"],
  "mappings": ";;AAKA,OAAO;AACP,SAAS,aAAa;AACtB,SAAS,SAAS,cAAc;AAChC,SAAS,4BAA4B;AACrC,YAAY,SAAS;AACrB,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,wBAAwB;AACjC,SAAS,gCAAgC;AAEzC,MAAM,+BAA+B,QAAQ;AAAA,EAvB7C,OAuB6C;AAAA;AAAA;AAAA,EAC5C,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,IAAI;AAAA,QACV;AAAA,QACA;AAAA,MACD;AAAA,MACA,UAAU;AAAA,QACT,aAAa,IAAI;AAAA,UAChB;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,IAAI;AAAA,MACJ,YAAY;AAAA,QACX;AAAA,UACC,SAAS,OAAO,UAAU,QAAQ;AAAA,UAClC,QAAQ,iBAAiB,mBAAmB;AAAA,UAC5C,MAAM;AAAA,QACP;AAAA,QACA;AAAA,UACC,SAAS,OAAO,MAAM,QAAQ,KAAK,OAAO;AAAA,UAC1C,OAAO,EAAE,SAAS,OAAO,MAAM,QAAQ,KAAK,OAAO,MAAM;AAAA,UACzD,QAAQ,iBAAiB,mBAAmB;AAAA,QAC7C;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,UAAM,0BACL,qBAAqB,wBAAwB;AAC9C,yBAAqB;AAAA,MACpB;AAAA,MACA,0BAA0B,QAAQ;AAAA,MAClC,oBAAoB;AAAA,IACrB;AACA;AAAA,MACC,0BACG,qBAAqB,2BACrB,qBAAqB;AAAA,IACzB;AAAA,EACD;AACD;AAEA,gBAAgB,sBAAsB;",
  "names": []
}
