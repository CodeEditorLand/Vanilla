{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './accessibility.css';\nimport * as nls from '../../../../../nls.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { Action2, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { accessibilityHelpIsShown } from '../../../accessibility/browser/accessibilityConfiguration.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { KeyCode, KeyMod } from '../../../../../base/common/keyCodes.js';\nimport { alert } from '../../../../../base/browser/ui/aria/aria.js';\nimport { AccessibilityHelpNLS } from '../../../../../editor/common/standaloneStrings.js';\n\nclass ToggleScreenReaderMode extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.toggleScreenReaderAccessibilityMode',\n\t\t\ttitle: nls.localize2('toggleScreenReaderMode', \"Toggle Screen Reader Accessibility Mode\"),\n\t\t\tmetadata: {\n\t\t\t\tdescription: nls.localize2('toggleScreenReaderModeDescription', \"Toggles an optimized mode for usage with screen readers, braille devices, and other assistive technologies.\"),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tkeybinding: [{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyE,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 10,\n\t\t\t\twhen: accessibilityHelpIsShown\n\t\t\t},\n\t\t\t{\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.F1 | KeyMod.Shift,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.F4 | KeyMod.Shift },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 10,\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst accessibiiltyService = accessor.get(IAccessibilityService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst isScreenReaderOptimized = accessibiiltyService.isScreenReaderOptimized();\n\t\tconfigurationService.updateValue('editor.accessibilitySupport', isScreenReaderOptimized ? 'off' : 'on', ConfigurationTarget.USER);\n\t\talert(isScreenReaderOptimized ? AccessibilityHelpNLS.screenReaderModeDisabled : AccessibilityHelpNLS.screenReaderModeEnabled);\n\t}\n}\n\nregisterAction2(ToggleScreenReaderMode);\n"],
  "mappings": ";;AAKA,OAAO;AACP,YAAY,SAAS;AACrB,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,wBAAwB;AACjC,SAAS,6BAA6B;AACtC,SAAS,SAAS,uBAAuB;AACzC,SAAS,gCAAgC;AACzC,SAAS,wBAAwB;AACjC,SAAS,SAAS,cAAc;AAChC,SAAS,aAAa;AACtB,SAAS,4BAA4B;AAErC,MAAM,+BAA+B,QAAQ;AAAA,EAjB7C,OAiB6C;AAAA;AAAA;AAAA,EAE5C,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,IAAI,UAAU,0BAA0B,yCAAyC;AAAA,MACxF,UAAU;AAAA,QACT,aAAa,IAAI,UAAU,qCAAqC,6GAA6G;AAAA,MAC9K;AAAA,MACA,IAAI;AAAA,MACJ,YAAY;AAAA,QAAC;AAAA,UACZ,SAAS,OAAO,UAAU,QAAQ;AAAA,UAClC,QAAQ,iBAAiB,mBAAmB;AAAA,UAC5C,MAAM;AAAA,QACP;AAAA,QACA;AAAA,UACC,SAAS,OAAO,MAAM,QAAQ,KAAK,OAAO;AAAA,UAC1C,OAAO,EAAE,SAAS,OAAO,MAAM,QAAQ,KAAK,OAAO,MAAM;AAAA,UACzD,QAAQ,iBAAiB,mBAAmB;AAAA,QAC7C;AAAA,MAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,UAAM,0BAA0B,qBAAqB,wBAAwB;AAC7E,yBAAqB,YAAY,+BAA+B,0BAA0B,QAAQ,MAAM,oBAAoB,IAAI;AAChI,UAAM,0BAA0B,qBAAqB,2BAA2B,qBAAqB,uBAAuB;AAAA,EAC7H;AACD;AAEA,gBAAgB,sBAAsB;",
  "names": []
}
