{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/simpleEditorOptions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { EditorExtensionsRegistry } from \"../../../../editor/browser/editorExtensions.js\";\nimport type { ICodeEditorWidgetOptions } from \"../../../../editor/browser/widget/codeEditor/codeEditorWidget.js\";\nimport type { IEditorOptions } from \"../../../../editor/common/config/editorOptions.js\";\nimport { ContextMenuController } from \"../../../../editor/contrib/contextmenu/browser/contextmenu.js\";\nimport { SnippetController2 } from \"../../../../editor/contrib/snippet/browser/snippetController2.js\";\nimport { SuggestController } from \"../../../../editor/contrib/suggest/browser/suggestController.js\";\nimport type { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\teditorSelectionBackground,\n\tinputBackground,\n\tinputForeground,\n\tselectionBackground,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { registerThemingParticipant } from \"../../../../platform/theme/common/themeService.js\";\nimport { TabCompletionController } from \"../../snippets/browser/tabCompletion.js\";\nimport { MenuPreventer } from \"./menuPreventer.js\";\nimport { SelectionClipboardContributionID } from \"./selectionClipboard.js\";\n\nexport function getSimpleEditorOptions(\n\tconfigurationService: IConfigurationService,\n): IEditorOptions {\n\treturn {\n\t\twordWrap: \"on\",\n\t\toverviewRulerLanes: 0,\n\t\tglyphMargin: false,\n\t\tlineNumbers: \"off\",\n\t\tfolding: false,\n\t\tselectOnLineNumbers: false,\n\t\thideCursorInOverviewRuler: true,\n\t\tselectionHighlight: false,\n\t\tscrollbar: {\n\t\t\thorizontal: \"hidden\",\n\t\t\talwaysConsumeMouseWheel: false,\n\t\t},\n\t\tlineDecorationsWidth: 0,\n\t\toverviewRulerBorder: false,\n\t\tscrollBeyondLastLine: false,\n\t\trenderLineHighlight: \"none\",\n\t\tfixedOverflowWidgets: true,\n\t\tacceptSuggestionOnEnter: \"smart\",\n\t\tdragAndDrop: false,\n\t\trevealHorizontalRightPadding: 5,\n\t\tminimap: {\n\t\t\tenabled: false,\n\t\t},\n\t\tguides: {\n\t\t\tindentation: false,\n\t\t},\n\t\taccessibilitySupport: configurationService.getValue<\n\t\t\t\"auto\" | \"off\" | \"on\"\n\t\t>(\"editor.accessibilitySupport\"),\n\t\tcursorBlinking: configurationService.getValue<\n\t\t\t\"blink\" | \"smooth\" | \"phase\" | \"expand\" | \"solid\"\n\t\t>(\"editor.cursorBlinking\"),\n\t\texperimentalEditContextEnabled: configurationService.getValue<boolean>(\n\t\t\t\"editor.experimentalEditContextEnabled\",\n\t\t),\n\t};\n}\n\nexport function getSimpleCodeEditorWidgetOptions(): ICodeEditorWidgetOptions {\n\treturn {\n\t\tisSimpleWidget: true,\n\t\tcontributions: EditorExtensionsRegistry.getSomeEditorContributions([\n\t\t\tMenuPreventer.ID,\n\t\t\tSelectionClipboardContributionID,\n\t\t\tContextMenuController.ID,\n\t\t\tSuggestController.ID,\n\t\t\tSnippetController2.ID,\n\t\t\tTabCompletionController.ID,\n\t\t]),\n\t};\n}\n\n/**\n * Should be called to set the styling on editors that are appearing as just input boxes\n * @param editorContainerSelector An element selector that will match the container of the editor\n */\nexport function setupSimpleEditorSelectionStyling(\n\teditorContainerSelector: string,\n): IDisposable {\n\t// Override styles in selections.ts\n\treturn registerThemingParticipant((theme, collector) => {\n\t\tconst selectionBackgroundColor = theme.getColor(selectionBackground);\n\n\t\tif (selectionBackgroundColor) {\n\t\t\t// Override inactive selection bg\n\t\t\tconst inputBackgroundColor = theme.getColor(inputBackground);\n\t\t\tif (inputBackgroundColor) {\n\t\t\t\tcollector.addRule(\n\t\t\t\t\t`${editorContainerSelector} .monaco-editor-background { background-color: ${inputBackgroundColor}; } `,\n\t\t\t\t);\n\t\t\t\tcollector.addRule(\n\t\t\t\t\t`${editorContainerSelector} .monaco-editor .selected-text { background-color: ${inputBackgroundColor.transparent(0.4)}; }`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Override selected fg\n\t\t\tconst inputForegroundColor = theme.getColor(inputForeground);\n\t\t\tif (inputForegroundColor) {\n\t\t\t\tcollector.addRule(\n\t\t\t\t\t`${editorContainerSelector} .monaco-editor .view-line span.inline-selected-text { color: ${inputForegroundColor}; }`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcollector.addRule(\n\t\t\t\t`${editorContainerSelector} .monaco-editor .focused .selected-text { background-color: ${selectionBackgroundColor}; }`,\n\t\t\t);\n\t\t} else {\n\t\t\t// Use editor selection color if theme has not set a selection background color\n\t\t\tcollector.addRule(\n\t\t\t\t`${editorContainerSelector} .monaco-editor .focused .selected-text { background-color: ${theme.getColor(editorSelectionBackground)}; }`,\n\t\t\t);\n\t\t}\n\t});\n}\n"],
  "mappings": ";;AAMA,SAAS,gCAAgC;AAGzC,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AACnC,SAAS,yBAAyB;AAElC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,kCAAkC;AAC3C,SAAS,+BAA+B;AACxC,SAAS,qBAAqB;AAC9B,SAAS,wCAAwC;AAE1C,SAAS,uBACf,sBACiB;AACjB,SAAO;AAAA,IACN,UAAU;AAAA,IACV,oBAAoB;AAAA,IACpB,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS;AAAA,IACT,qBAAqB;AAAA,IACrB,2BAA2B;AAAA,IAC3B,oBAAoB;AAAA,IACpB,WAAW;AAAA,MACV,YAAY;AAAA,MACZ,yBAAyB;AAAA,IAC1B;AAAA,IACA,sBAAsB;AAAA,IACtB,qBAAqB;AAAA,IACrB,sBAAsB;AAAA,IACtB,qBAAqB;AAAA,IACrB,sBAAsB;AAAA,IACtB,yBAAyB;AAAA,IACzB,aAAa;AAAA,IACb,8BAA8B;AAAA,IAC9B,SAAS;AAAA,MACR,SAAS;AAAA,IACV;AAAA,IACA,QAAQ;AAAA,MACP,aAAa;AAAA,IACd;AAAA,IACA,sBAAsB,qBAAqB,SAEzC,6BAA6B;AAAA,IAC/B,gBAAgB,qBAAqB,SAEnC,uBAAuB;AAAA,IACzB,gCAAgC,qBAAqB;AAAA,MACpD;AAAA,IACD;AAAA,EACD;AACD;AAxCgB;AA0CT,SAAS,mCAA6D;AAC5E,SAAO;AAAA,IACN,gBAAgB;AAAA,IAChB,eAAe,yBAAyB,2BAA2B;AAAA,MAClE,cAAc;AAAA,MACd;AAAA,MACA,sBAAsB;AAAA,MACtB,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,MACnB,wBAAwB;AAAA,IACzB,CAAC;AAAA,EACF;AACD;AAZgB;AAkBT,SAAS,kCACf,yBACc;AAEd,SAAO,2BAA2B,CAAC,OAAO,cAAc;AACvD,UAAM,2BAA2B,MAAM,SAAS,mBAAmB;AAEnE,QAAI,0BAA0B;AAE7B,YAAM,uBAAuB,MAAM,SAAS,eAAe;AAC3D,UAAI,sBAAsB;AACzB,kBAAU;AAAA,UACT,GAAG,uBAAuB,kDAAkD,oBAAoB;AAAA,QACjG;AACA,kBAAU;AAAA,UACT,GAAG,uBAAuB,sDAAsD,qBAAqB,YAAY,GAAG,CAAC;AAAA,QACtH;AAAA,MACD;AAGA,YAAM,uBAAuB,MAAM,SAAS,eAAe;AAC3D,UAAI,sBAAsB;AACzB,kBAAU;AAAA,UACT,GAAG,uBAAuB,iEAAiE,oBAAoB;AAAA,QAChH;AAAA,MACD;AAEA,gBAAU;AAAA,QACT,GAAG,uBAAuB,+DAA+D,wBAAwB;AAAA,MAClH;AAAA,IACD,OAAO;AAEN,gBAAU;AAAA,QACT,GAAG,uBAAuB,+DAA+D,MAAM,SAAS,yBAAyB,CAAC;AAAA,MACnI;AAAA,IACD;AAAA,EACD,CAAC;AACF;AArCgB;",
  "names": []
}
