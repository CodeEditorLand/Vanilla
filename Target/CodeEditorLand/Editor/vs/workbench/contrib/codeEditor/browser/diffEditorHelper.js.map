{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/diffEditorHelper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tautorunWithStore,\n\tobservableFromEvent,\n} from \"../../../../base/common/observable.js\";\nimport type { IDiffEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport { registerDiffEditorContribution } from \"../../../../editor/browser/editorExtensions.js\";\nimport { EmbeddedDiffEditorWidget } from \"../../../../editor/browser/widget/diffEditor/embeddedDiffEditorWidget.js\";\nimport type { IDiffEditorContribution } from \"../../../../editor/common/editorCommon.js\";\nimport { ITextResourceConfigurationService } from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { AccessibleViewRegistry } from \"../../../../platform/accessibility/browser/accessibleViewRegistry.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { FloatingEditorClickWidget } from \"../../../browser/codeeditor.js\";\nimport {\n\tExtensions,\n\ttype IConfigurationMigrationRegistry,\n} from \"../../../common/configuration.js\";\nimport { DiffEditorAccessibilityHelp } from \"./diffEditorAccessibilityHelp.js\";\n\nclass DiffEditorHelperContribution\n\textends Disposable\n\timplements IDiffEditorContribution\n{\n\tpublic static readonly ID = \"editor.contrib.diffEditorHelper\";\n\n\tconstructor(\n\t\tprivate readonly _diffEditor: IDiffEditor,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@ITextResourceConfigurationService\n\t\tprivate readonly _textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\n\t\tconst isEmbeddedDiffEditor =\n\t\t\tthis._diffEditor instanceof EmbeddedDiffEditorWidget;\n\n\t\tif (!isEmbeddedDiffEditor) {\n\t\t\tconst computationResult = observableFromEvent(\n\t\t\t\tthis,\n\t\t\t\t(e) => this._diffEditor.onDidUpdateDiff(e),\n\t\t\t\t() =>\n\t\t\t\t\t/** @description diffEditor.diffComputationResult */ this._diffEditor.getDiffComputationResult(),\n\t\t\t);\n\t\t\tconst onlyWhiteSpaceChange = computationResult.map(\n\t\t\t\t(r) => r && !r.identical && r.changes2.length === 0,\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\tautorunWithStore((reader, store) => {\n\t\t\t\t\t/** @description update state */\n\t\t\t\t\tif (onlyWhiteSpaceChange.read(reader)) {\n\t\t\t\t\t\tconst helperWidget = store.add(\n\t\t\t\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\t\t\t\tFloatingEditorClickWidget,\n\t\t\t\t\t\t\t\tthis._diffEditor.getModifiedEditor(),\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"hintWhitespace\",\n\t\t\t\t\t\t\t\t\t\"Show Whitespace Differences\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstore.add(\n\t\t\t\t\t\t\thelperWidget.onClick(() => {\n\t\t\t\t\t\t\t\tthis._textResourceConfigurationService.updateValue(\n\t\t\t\t\t\t\t\t\tthis._diffEditor.getModel()!.modified.uri,\n\t\t\t\t\t\t\t\t\t\"diffEditor.ignoreTrimWhitespace\",\n\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t\thelperWidget.render();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\tthis._diffEditor.onDidUpdateDiff(() => {\n\t\t\t\t\tconst diffComputationResult =\n\t\t\t\t\t\tthis._diffEditor.getDiffComputationResult();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tdiffComputationResult &&\n\t\t\t\t\t\tdiffComputationResult.quitEarly\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"hintTimeout\",\n\t\t\t\t\t\t\t\t\"The diff algorithm was stopped early (after {0} ms.)\",\n\t\t\t\t\t\t\t\tthis._diffEditor.maxComputationTime,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\t\t\t\"removeTimeout\",\n\t\t\t\t\t\t\t\t\t\t\"Remove Limit\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\t\tthis._textResourceConfigurationService.updateValue(\n\t\t\t\t\t\t\t\t\t\t\tthis._diffEditor.getModel()!\n\t\t\t\t\t\t\t\t\t\t\t\t.modified.uri,\n\t\t\t\t\t\t\t\t\t\t\t\"diffEditor.maxComputationTime\",\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n}\n\nregisterDiffEditorContribution(\n\tDiffEditorHelperContribution.ID,\n\tDiffEditorHelperContribution,\n);\n\nRegistry.as<IConfigurationMigrationRegistry>(\n\tExtensions.ConfigurationMigration,\n).registerConfigurationMigrations([\n\t{\n\t\tkey: \"diffEditor.experimental.collapseUnchangedRegions\",\n\t\tmigrateFn: (value, accessor) => {\n\t\t\treturn [\n\t\t\t\t[\"diffEditor.hideUnchangedRegions.enabled\", { value }],\n\t\t\t\t[\n\t\t\t\t\t\"diffEditor.experimental.collapseUnchangedRegions\",\n\t\t\t\t\t{ value: undefined },\n\t\t\t\t],\n\t\t\t];\n\t\t},\n\t},\n]);\nAccessibleViewRegistry.register(new DiffEditorAccessibilityHelp());\n"],
  "mappings": "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",
  "names": []
}
