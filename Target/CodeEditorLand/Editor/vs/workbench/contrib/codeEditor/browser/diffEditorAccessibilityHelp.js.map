{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/diffEditorAccessibilityHelp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { AccessibleDiffViewerNext, AccessibleDiffViewerPrev } from '../../../../editor/browser/widget/diffEditor/commands.js';\nimport { DiffEditorWidget } from '../../../../editor/browser/widget/diffEditor/diffEditorWidget.js';\nimport { localize } from '../../../../nls.js';\nimport { AccessibleViewProviderId, AccessibleViewType, AccessibleContentProvider } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { IAccessibleViewImplentation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { ContextKeyEqualsExpr, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { getCommentCommandInfo } from '../../accessibility/browser/editorAccessibilityHelp.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nexport class DiffEditorAccessibilityHelp implements IAccessibleViewImplentation {\n\treadonly priority = 105;\n\treadonly name = 'diff-editor';\n\treadonly when = ContextKeyEqualsExpr.create('isInDiffEditor', true);\n\treadonly type = AccessibleViewType.Help;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\n\t\tif (!(editorService.activeTextEditorControl instanceof DiffEditorWidget)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeEditor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();\n\t\tif (!codeEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst switchSides = localize('msg3', \"Run the command Diff Editor: Switch Side{0} to toggle between the original and modified editors.\", '<keybinding:diffEditor.switchSide>');\n\t\tconst diffEditorActiveAnnouncement = localize('msg5', \"The setting, accessibility.verbosity.diffEditorActive, controls if a diff editor announcement is made when it becomes the active editor.\");\n\n\t\tconst keys = ['accessibility.signals.diffLineDeleted', 'accessibility.signals.diffLineInserted', 'accessibility.signals.diffLineModified'];\n\t\tconst content = [\n\t\t\tlocalize('msg1', \"You are in a diff editor.\"),\n\t\t\tlocalize('msg2', \"View the next{0} or previous{1} diff in diff review mode, which is optimized for screen readers.\", '<keybinding:' + AccessibleDiffViewerNext.id + '>', '<keybinding:' + AccessibleDiffViewerPrev.id + '>'),\n\t\t\tswitchSides,\n\t\t\tdiffEditorActiveAnnouncement,\n\t\t\tlocalize('msg4', \"To control which accessibility signals should be played, the following settings can be configured: {0}.\", keys.join(', ')),\n\t\t];\n\t\tconst commentCommandInfo = getCommentCommandInfo(keybindingService, contextKeyService, codeEditor);\n\t\tif (commentCommandInfo) {\n\t\t\tcontent.push(commentCommandInfo);\n\t\t}\n\t\treturn new AccessibleContentProvider(\n\t\t\tAccessibleViewProviderId.DiffEditor,\n\t\t\t{ type: AccessibleViewType.Help },\n\t\t\t() => content.join('\\n'),\n\t\t\t() => codeEditor.focus(),\n\t\t\tAccessibilityVerbositySettingId.DiffEditor,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,0BAA0B;AACnC,SAAS,0BAA0B,gCAAgC;AACnE,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,0BAA0B,oBAAoB,iCAAiC;AACxF,SAAS,mCAAmC;AAC5C,SAAS,sBAAsB,0BAA0B;AACzD,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,uCAAuC;AAChD,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAExB,MAAM,4BAAmE;AAAA,EAlBhF,OAkBgF;AAAA;AAAA;AAAA,EACtE,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,qBAAqB,OAAO,kBAAkB,IAAI;AAAA,EACzD,OAAO,mBAAmB;AAAA,EACnC,YAAY,UAA4B;AACvC,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,QAAI,EAAE,cAAc,mCAAmC,mBAAmB;AACzE;AAAA,IACD;AAEA,UAAM,aAAa,kBAAkB,oBAAoB,KAAK,kBAAkB,qBAAqB;AACrG,QAAI,CAAC,YAAY;AAChB;AAAA,IACD;AAEA,UAAM,cAAc,SAAS,QAAQ,oGAAoG,oCAAoC;AAC7K,UAAM,+BAA+B,SAAS,QAAQ,0IAA0I;AAEhM,UAAM,OAAO,CAAC,yCAAyC,0CAA0C,wCAAwC;AACzI,UAAM,UAAU;AAAA,MACf,SAAS,QAAQ,2BAA2B;AAAA,MAC5C,SAAS,QAAQ,oGAAoG,iBAAiB,yBAAyB,KAAK,KAAK,iBAAiB,yBAAyB,KAAK,GAAG;AAAA,MAC3N;AAAA,MACA;AAAA,MACA,SAAS,QAAQ,2GAA2G,KAAK,KAAK,IAAI,CAAC;AAAA,IAC5I;AACA,UAAM,qBAAqB,sBAAsB,mBAAmB,mBAAmB,UAAU;AACjG,QAAI,oBAAoB;AACvB,cAAQ,KAAK,kBAAkB;AAAA,IAChC;AACA,WAAO,IAAI;AAAA,MACV,yBAAyB;AAAA,MACzB,EAAE,MAAM,mBAAmB,KAAK;AAAA,MAChC,MAAM,QAAQ,KAAK,IAAI;AAAA,MACvB,MAAM,WAAW,MAAM;AAAA,MACvB,gCAAgC;AAAA,IACjC;AAAA,EACD;AACD;",
  "names": []
}
