{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/browser/diffEditorAccessibilityHelp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport {\n\tAccessibleDiffViewerNext,\n\tAccessibleDiffViewerPrev,\n} from \"../../../../editor/browser/widget/diffEditor/commands.js\";\nimport { DiffEditorWidget } from \"../../../../editor/browser/widget/diffEditor/diffEditorWidget.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tAccessibleContentProvider,\n\tAccessibleViewProviderId,\n\tAccessibleViewType,\n} from \"../../../../platform/accessibility/browser/accessibleView.js\";\nimport type { IAccessibleViewImplentation } from \"../../../../platform/accessibility/browser/accessibleViewRegistry.js\";\nimport {\n\tContextKeyEqualsExpr,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { AccessibilityVerbositySettingId } from \"../../accessibility/browser/accessibilityConfiguration.js\";\nimport { getCommentCommandInfo } from \"../../accessibility/browser/editorAccessibilityHelp.js\";\n\nexport class DiffEditorAccessibilityHelp\n\timplements IAccessibleViewImplentation\n{\n\treadonly priority = 105;\n\treadonly name = \"diff-editor\";\n\treadonly when = ContextKeyEqualsExpr.create(\"isInDiffEditor\", true);\n\treadonly type = AccessibleViewType.Help;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\n\t\tif (\n\t\t\t!(editorService.activeTextEditorControl instanceof DiffEditorWidget)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeEditor =\n\t\t\tcodeEditorService.getActiveCodeEditor() ||\n\t\t\tcodeEditorService.getFocusedCodeEditor();\n\t\tif (!codeEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst switchSides = localize(\n\t\t\t\"msg3\",\n\t\t\t\"Run the command Diff Editor: Switch Side{0} to toggle between the original and modified editors.\",\n\t\t\t\"<keybinding:diffEditor.switchSide>\",\n\t\t);\n\t\tconst diffEditorActiveAnnouncement = localize(\n\t\t\t\"msg5\",\n\t\t\t\"The setting, accessibility.verbosity.diffEditorActive, controls if a diff editor announcement is made when it becomes the active editor.\",\n\t\t);\n\n\t\tconst keys = [\n\t\t\t\"accessibility.signals.diffLineDeleted\",\n\t\t\t\"accessibility.signals.diffLineInserted\",\n\t\t\t\"accessibility.signals.diffLineModified\",\n\t\t];\n\t\tconst content = [\n\t\t\tlocalize(\"msg1\", \"You are in a diff editor.\"),\n\t\t\tlocalize(\n\t\t\t\t\"msg2\",\n\t\t\t\t\"View the next{0} or previous{1} diff in diff review mode, which is optimized for screen readers.\",\n\t\t\t\t\"<keybinding:\" + AccessibleDiffViewerNext.id + \">\",\n\t\t\t\t\"<keybinding:\" + AccessibleDiffViewerPrev.id + \">\",\n\t\t\t),\n\t\t\tswitchSides,\n\t\t\tdiffEditorActiveAnnouncement,\n\t\t\tlocalize(\n\t\t\t\t\"msg4\",\n\t\t\t\t\"To control which accessibility signals should be played, the following settings can be configured: {0}.\",\n\t\t\t\tkeys.join(\", \"),\n\t\t\t),\n\t\t];\n\t\tconst commentCommandInfo = getCommentCommandInfo(\n\t\t\tkeybindingService,\n\t\t\tcontextKeyService,\n\t\t\tcodeEditor,\n\t\t);\n\t\tif (commentCommandInfo) {\n\t\t\tcontent.push(commentCommandInfo);\n\t\t}\n\t\treturn new AccessibleContentProvider(\n\t\t\tAccessibleViewProviderId.DiffEditor,\n\t\t\t{ type: AccessibleViewType.Help },\n\t\t\t() => content.join(\"\\n\"),\n\t\t\t() => codeEditor.focus(),\n\t\t\tAccessibilityVerbositySettingId.DiffEditor,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,0BAA0B;AACnC,SAAS,sBAAsB;AAC/B,SAAS,uCAAuC;AAChD,SAAS,6BAA6B;AAE/B,MAAM,4BAEb;AAAA,EA9BA,OA8BA;AAAA;AAAA;AAAA,EACU,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,qBAAqB,OAAO,kBAAkB,IAAI;AAAA,EACzD,OAAO,mBAAmB;AAAA,EACnC,YAAY,UAA4B;AACvC,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,QACC,EAAE,cAAc,mCAAmC,mBAClD;AACD;AAAA,IACD;AAEA,UAAM,aACL,kBAAkB,oBAAoB,KACtC,kBAAkB,qBAAqB;AACxC,QAAI,CAAC,YAAY;AAChB;AAAA,IACD;AAEA,UAAM,cAAc;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,+BAA+B;AAAA,MACpC;AAAA,MACA;AAAA,IACD;AAEA,UAAM,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,UAAU;AAAA,MACf,SAAS,QAAQ,2BAA2B;AAAA,MAC5C;AAAA,QACC;AAAA,QACA;AAAA,QACA,iBAAiB,yBAAyB,KAAK;AAAA,QAC/C,iBAAiB,yBAAyB,KAAK;AAAA,MAChD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,QACA,KAAK,KAAK,IAAI;AAAA,MACf;AAAA,IACD;AACA,UAAM,qBAAqB;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,QAAI,oBAAoB;AACvB,cAAQ,KAAK,kBAAkB;AAAA,IAChC;AACA,WAAO,IAAI;AAAA,MACV,yBAAyB;AAAA,MACzB,EAAE,MAAM,mBAAmB,KAAK;AAAA,MAChC,MAAM,QAAQ,KAAK,IAAI;AAAA,MACvB,MAAM,WAAW,MAAM;AAAA,MACvB,gCAAgC;AAAA,IACjC;AAAA,EACD;AACD;",
  "names": []
}
