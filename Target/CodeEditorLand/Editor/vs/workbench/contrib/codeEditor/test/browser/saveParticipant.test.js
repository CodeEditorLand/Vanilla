import r from"assert";import"../../../../../platform/instantiation/common/instantiation.js";import{FinalNewLineParticipant as I,TrimFinalNewLinesParticipant as f,TrimWhitespaceParticipant as $}from"../../browser/saveParticipants.js";import{TestConfigurationService as p}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{workbenchInstantiationService as M,TestServiceAccessor as T}from"../../../../test/browser/workbenchTestServices.js";import{ensureNoDisposablesAreLeakedInTestSuite as S,toResource as E}from"../../../../../base/test/common/utils.js";import{Range as v}from"../../../../../editor/common/core/range.js";import{Selection as m}from"../../../../../editor/common/core/selection.js";import{TextFileEditorModel as u}from"../../../../services/textfile/common/textFileEditorModel.js";import{snapshotToString as s}from"../../../../services/textfile/common/textfiles.js";import{SaveReason as l}from"../../../../common/editor.js";import"../../../../services/textfile/common/textFileEditorModelManager.js";import{DisposableStore as h}from"../../../../../base/common/lifecycle.js";suite("Save Participants",function(){const c=new h;let d,w;setup(()=>{d=M(void 0,c),w=d.createInstance(T),c.add(w.textFileService.files)}),teardown(()=>{c.clear()}),test("insert final new line",async function(){const e=c.add(d.createInstance(u,E.call(this,"/path/final_new_line.txt"),"utf8",void 0));await e.resolve();const a=new p;a.setUserConfiguration("files",{insertFinalNewline:!0});const o=new I(a,void 0);let t="";e.textEditorModel.setValue(t),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),t),t=`Hello New Line${e.textEditorModel.getEOL()}`,e.textEditorModel.setValue(t),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),t),t="Hello New Line",e.textEditorModel.setValue(t),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),`${t}${e.textEditorModel.getEOL()}`),t=`Hello New Line${e.textEditorModel.getEOL()}Hello New Line${e.textEditorModel.getEOL()}Hello New Line`,e.textEditorModel.setValue(t),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),`${t}${e.textEditorModel.getEOL()}`)}),test("trim final new lines",async function(){const e=c.add(d.createInstance(u,E.call(this,"/path/trim_final_new_line.txt"),"utf8",void 0));await e.resolve();const a=new p;a.setUserConfiguration("files",{trimFinalNewlines:!0});const o=new f(a,void 0),t="Trim New Line",i=`${e.textEditorModel.getEOL()}`;let n=`${t}`;e.textEditorModel.setValue(n),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),n),n=`${t}${i}`,e.textEditorModel.setValue(n),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),n),n=`${t}${i}${i}`,e.textEditorModel.setValue(n),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),`${t}${i}`),n=`${t}${i}${t}${i}${i}${i}`,e.textEditorModel.setValue(n),await o.participate(e,{reason:l.EXPLICIT}),r.strictEqual(s(e.createSnapshot()),`${t}${i}${t}${i}`)}),test("trim final new lines bug#39750",async function(){const e=c.add(d.createInstance(u,E.call(this,"/path/trim_final_new_line.txt"),"utf8",void 0));await e.resolve();const a=new p;a.setUserConfiguration("files",{trimFinalNewlines:!0});const o=new f(a,void 0),t="Trim New Line",i=`${t}`;e.textEditorModel.setValue(i);const n=[{range:new v(1,14,1,14),text:".",forceMoveMarkers:!1}];e.textEditorModel.pushEditOperations([new m(1,14,1,14)],n,()=>[new m(1,15,1,15)]),await e.textEditorModel.undo(),r.strictEqual(s(e.createSnapshot()),`${t}`),await o.participate(e,{reason:l.EXPLICIT}),await e.textEditorModel.redo(),r.strictEqual(s(e.createSnapshot()),`${t}.`)}),test("trim final new lines bug#46075",async function(){const e=c.add(d.createInstance(u,E.call(this,"/path/trim_final_new_line.txt"),"utf8",void 0));await e.resolve();const a=new p;a.setUserConfiguration("files",{trimFinalNewlines:!0});const o=new f(a,void 0),t="Test",i=`${e.textEditorModel.getEOL()}`,n=`${t}${i}${i}`;e.textEditorModel.setValue(n);for(let x=0;x<10;x++)await o.participate(e,{reason:l.EXPLICIT});r.strictEqual(s(e.createSnapshot()),`${t}${i}`),await e.textEditorModel.undo(),r.strictEqual(s(e.createSnapshot()),`${t}${i}${i}`),await e.textEditorModel.redo(),r.strictEqual(s(e.createSnapshot()),`${t}${i}`)}),test("trim whitespace",async function(){const e=c.add(d.createInstance(u,E.call(this,"/path/trim_final_new_line.txt"),"utf8",void 0));await e.resolve();const a=new p;a.setUserConfiguration("files",{trimTrailingWhitespace:!0});const o=new $(a,void 0),t="Test",i=`${t} 	`;e.textEditorModel.setValue(i);for(let n=0;n<10;n++)await o.participate(e,{reason:l.EXPLICIT});r.strictEqual(s(e.createSnapshot()),`${t}`)}),S()});
