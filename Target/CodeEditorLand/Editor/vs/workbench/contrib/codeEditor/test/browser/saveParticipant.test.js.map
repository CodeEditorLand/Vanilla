{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/codeEditor/test/browser/saveParticipant.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { FinalNewLineParticipant, TrimFinalNewLinesParticipant, TrimWhitespaceParticipant } from '../../browser/saveParticipants.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { workbenchInstantiationService, TestServiceAccessor } from '../../../../test/browser/workbenchTestServices.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../../editor/common/core/selection.js';\nimport { TextFileEditorModel } from '../../../../services/textfile/common/textFileEditorModel.js';\nimport { IResolvedTextFileEditorModel, snapshotToString } from '../../../../services/textfile/common/textfiles.js';\nimport { SaveReason } from '../../../../common/editor.js';\nimport { TextFileEditorModelManager } from '../../../../services/textfile/common/textFileEditorModelManager.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nsuite('Save Participants', function () {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(<TextFileEditorModelManager>accessor.textFileService.files);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('insert final new line', async function () {\n\t\tconst model: IResolvedTextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel);\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'insertFinalNewline': true });\n\t\tconst participant = new FinalNewLineParticipant(configService, undefined!);\n\n\t\t// No new line for empty lines\n\t\tlet lineContent = '';\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// No new line if last line already empty\n\t\tlineContent = `Hello New Line${model.textEditorModel.getEOL()}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// New empty line added (single line)\n\t\tlineContent = 'Hello New Line';\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${lineContent}${model.textEditorModel.getEOL()}`);\n\n\t\t// New empty line added (multi line)\n\t\tlineContent = `Hello New Line${model.textEditorModel.getEOL()}Hello New Line${model.textEditorModel.getEOL()}Hello New Line`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${lineContent}${model.textEditorModel.getEOL()}`);\n\t});\n\n\ttest('trim final new lines', async function () {\n\t\tconst model: IResolvedTextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel);\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimFinalNewlines': true });\n\t\tconst participant = new TrimFinalNewLinesParticipant(configService, undefined!);\n\t\tconst textContent = 'Trim New Line';\n\t\tconst eol = `${model.textEditorModel.getEOL()}`;\n\n\t\t// No new line removal if last line is not new line\n\t\tlet lineContent = `${textContent}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// No new line removal if last line is single new line\n\t\tlineContent = `${textContent}${eol}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), lineContent);\n\n\t\t// Remove new line (single line with two new lines)\n\t\tlineContent = `${textContent}${eol}${eol}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}`);\n\n\t\t// Remove new lines (multiple lines with multiple new lines)\n\t\tlineContent = `${textContent}${eol}${textContent}${eol}${eol}${eol}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}${textContent}${eol}`);\n\t});\n\n\ttest('trim final new lines bug#39750', async function () {\n\t\tconst model: IResolvedTextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel);\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimFinalNewlines': true });\n\t\tconst participant = new TrimFinalNewLinesParticipant(configService, undefined!);\n\t\tconst textContent = 'Trim New Line';\n\n\t\t// single line\n\t\tconst lineContent = `${textContent}`;\n\t\tmodel.textEditorModel.setValue(lineContent);\n\n\t\t// apply edits and push to undo stack.\n\t\tconst textEdits = [{ range: new Range(1, 14, 1, 14), text: '.', forceMoveMarkers: false }];\n\t\tmodel.textEditorModel.pushEditOperations([new Selection(1, 14, 1, 14)], textEdits, () => { return [new Selection(1, 15, 1, 15)]; });\n\n\t\t// undo\n\t\tawait model.textEditorModel.undo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}`);\n\n\t\t// trim final new lines should not mess the undo stack\n\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\tawait model.textEditorModel.redo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}.`);\n\t});\n\n\ttest('trim final new lines bug#46075', async function () {\n\t\tconst model: IResolvedTextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel);\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimFinalNewlines': true });\n\t\tconst participant = new TrimFinalNewLinesParticipant(configService, undefined!);\n\t\tconst textContent = 'Test';\n\t\tconst eol = `${model.textEditorModel.getEOL()}`;\n\t\tconst content = `${textContent}${eol}${eol}`;\n\t\tmodel.textEditorModel.setValue(content);\n\n\t\t// save many times\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\t}\n\n\t\t// confirm trimming\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}`);\n\n\t\t// undo should go back to previous content immediately\n\t\tawait model.textEditorModel.undo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}${eol}`);\n\t\tawait model.textEditorModel.redo();\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}${eol}`);\n\t});\n\n\ttest('trim whitespace', async function () {\n\t\tconst model: IResolvedTextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/trim_final_new_line.txt'), 'utf8', undefined) as IResolvedTextFileEditorModel);\n\n\t\tawait model.resolve();\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'trimTrailingWhitespace': true });\n\t\tconst participant = new TrimWhitespaceParticipant(configService, undefined!);\n\t\tconst textContent = 'Test';\n\t\tconst content = `${textContent} \t`;\n\t\tmodel.textEditorModel.setValue(content);\n\n\t\t// save many times\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tawait participant.participate(model, { reason: SaveReason.EXPLICIT });\n\t\t}\n\n\t\t// confirm trimming\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), `${textContent}`);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
