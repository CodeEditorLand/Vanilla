{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/markdown/browser/markdownSettingRenderer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ActionViewItem } from \"../../../../base/browser/ui/actionbar/actionViewItems.js\";\nimport type { IAction } from \"../../../../base/common/actions.js\";\nimport type { Tokens } from \"../../../../base/common/marked/marked.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\tIPreferencesService,\n\ttype ISetting,\n} from \"../../../services/preferences/common/preferences.js\";\nimport { settingKeyToDisplayFormat } from \"../../preferences/browser/settingsTreeModels.js\";\n\nexport class SimpleSettingRenderer {\n\tprivate readonly codeSettingRegex: RegExp;\n\n\tprivate _updatedSettings = new Map<string, any>(); // setting ID to user's original setting value\n\tprivate _encounteredSettings = new Map<string, ISetting>(); // setting ID to setting\n\tprivate _featuredSettings = new Map<string, any>(); // setting ID to feature value\n\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IContextMenuService\n\t\tprivate readonly _contextMenuService: IContextMenuService,\n\t\t@IPreferencesService\n\t\tprivate readonly _preferencesService: IPreferencesService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@IClipboardService\n\t\tprivate readonly _clipboardService: IClipboardService,\n\t) {\n\t\tthis.codeSettingRegex = /^<a (href)=\".*code.*:\\/\\/settings\\/([^\\s\"]+)\"(?:\\s*codesetting=\"([^\"]+)\")?>/;\n\t}\n\n\tget featuredSettingStates(): Map<string, boolean> {\n\t\tconst result = new Map<string, boolean>();\n\t\tfor (const [settingId, value] of this._featuredSettings) {\n\t\t\tresult.set(\n\t\t\t\tsettingId,\n\t\t\t\tthis._configurationService.getValue(settingId) === value,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetHtmlRenderer(): (token: Tokens.HTML | Tokens.Tag) => string {\n\t\treturn ({ raw }: Tokens.HTML | Tokens.Tag): string => {\n\t\t\tconst match = this.codeSettingRegex.exec(raw);\n\t\t\tif (match && match.length === 4) {\n\t\t\t\tconst settingId = match[2];\n\t\t\t\tconst rendered = this.render(settingId, match[3]);\n\t\t\t\tif (rendered) {\n\t\t\t\t\traw = raw.replace(this.codeSettingRegex, rendered);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn raw;\n\t\t};\n\t}\n\n\tsettingToUriString(settingId: string, value?: any): string {\n\t\treturn `${Schemas.codeSetting}://${settingId}${value ? `/${value}` : \"\"}`;\n\t}\n\n\tprivate getSetting(settingId: string): ISetting | undefined {\n\t\tif (this._encounteredSettings.has(settingId)) {\n\t\t\treturn this._encounteredSettings.get(settingId);\n\t\t}\n\t\treturn this._preferencesService.getSetting(settingId);\n\t}\n\n\tparseValue(settingId: string, value: string): any {\n\t\tif (value === \"undefined\" || value === \"\") {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst setting = this.getSetting(settingId);\n\t\tif (!setting) {\n\t\t\treturn value;\n\t\t}\n\n\t\tswitch (setting.type) {\n\t\t\tcase \"boolean\":\n\t\t\t\treturn value === \"true\";\n\t\t\tcase \"number\":\n\t\t\t\treturn Number.parseInt(value, 10);\n\t\t\tcase \"string\":\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n\n\tprivate render(settingId: string, newValue: string): string | undefined {\n\t\tconst setting = this.getSetting(settingId);\n\t\tif (!setting) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\treturn this.renderSetting(setting, newValue);\n\t}\n\n\tprivate viewInSettingsMessage(\n\t\tsettingId: string,\n\t\talreadyDisplayed: boolean,\n\t) {\n\t\tif (alreadyDisplayed) {\n\t\t\treturn nls.localize(\"viewInSettings\", \"View in Settings\");\n\t\t} else {\n\t\t\tconst displayName = settingKeyToDisplayFormat(settingId);\n\t\t\treturn nls.localize(\n\t\t\t\t\"viewInSettingsDetailed\",\n\t\t\t\t'View \"{0}: {1}\" in Settings',\n\t\t\t\tdisplayName.category,\n\t\t\t\tdisplayName.label,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate restorePreviousSettingMessage(settingId: string): string {\n\t\tconst displayName = settingKeyToDisplayFormat(settingId);\n\t\treturn nls.localize(\n\t\t\t\"restorePreviousValue\",\n\t\t\t'Restore value of \"{0}: {1}\"',\n\t\t\tdisplayName.category,\n\t\t\tdisplayName.label,\n\t\t);\n\t}\n\n\tprivate booleanSettingMessage(\n\t\tsetting: ISetting,\n\t\tbooleanValue: boolean,\n\t): string | undefined {\n\t\tconst currentValue = this._configurationService.getValue<boolean>(\n\t\t\tsetting.key,\n\t\t);\n\t\tif (\n\t\t\tcurrentValue === booleanValue ||\n\t\t\t(currentValue === undefined && setting.value === booleanValue)\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst displayName = settingKeyToDisplayFormat(setting.key);\n\t\tif (booleanValue) {\n\t\t\treturn nls.localize(\n\t\t\t\t\"trueMessage\",\n\t\t\t\t'Enable \"{0}: {1}\"',\n\t\t\t\tdisplayName.category,\n\t\t\t\tdisplayName.label,\n\t\t\t);\n\t\t} else {\n\t\t\treturn nls.localize(\n\t\t\t\t\"falseMessage\",\n\t\t\t\t'Disable \"{0}: {1}\"',\n\t\t\t\tdisplayName.category,\n\t\t\t\tdisplayName.label,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate stringSettingMessage(\n\t\tsetting: ISetting,\n\t\tstringValue: string,\n\t): string | undefined {\n\t\tconst currentValue = this._configurationService.getValue<string>(\n\t\t\tsetting.key,\n\t\t);\n\t\tif (\n\t\t\tcurrentValue === stringValue ||\n\t\t\t(currentValue === undefined && setting.value === stringValue)\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst displayName = settingKeyToDisplayFormat(setting.key);\n\t\treturn nls.localize(\n\t\t\t\"stringValue\",\n\t\t\t'Set \"{0}: {1}\" to \"{2}\"',\n\t\t\tdisplayName.category,\n\t\t\tdisplayName.label,\n\t\t\tstringValue,\n\t\t);\n\t}\n\n\tprivate numberSettingMessage(\n\t\tsetting: ISetting,\n\t\tnumberValue: number,\n\t): string | undefined {\n\t\tconst currentValue = this._configurationService.getValue<number>(\n\t\t\tsetting.key,\n\t\t);\n\t\tif (\n\t\t\tcurrentValue === numberValue ||\n\t\t\t(currentValue === undefined && setting.value === numberValue)\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst displayName = settingKeyToDisplayFormat(setting.key);\n\t\treturn nls.localize(\n\t\t\t\"numberValue\",\n\t\t\t'Set \"{0}: {1}\" to {2}',\n\t\t\tdisplayName.category,\n\t\t\tdisplayName.label,\n\t\t\tnumberValue,\n\t\t);\n\t}\n\n\tprivate renderSetting(\n\t\tsetting: ISetting,\n\t\tnewValue: string | undefined,\n\t): string | undefined {\n\t\tconst href = this.settingToUriString(setting.key, newValue);\n\t\tconst title = nls.localize(\n\t\t\t\"changeSettingTitle\",\n\t\t\t\"View or change setting\",\n\t\t);\n\t\treturn `<code tabindex=\"0\"><a href=\"${href}\" class=\"codesetting\" title=\"${title}\" aria-role=\"button\"><svg width=\"14\" height=\"14\" viewBox=\"0 0 15 15\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\"><path d=\"M9.1 4.4L8.6 2H7.4l-.5 2.4-.7.3-2-1.3-.9.8 1.3 2-.2.7-2.4.5v1.2l2.4.5.3.8-1.3 2 .8.8 2-1.3.8.3.4 2.3h1.2l.5-2.4.8-.3 2 1.3.8-.8-1.3-2 .3-.8 2.3-.4V7.4l-2.4-.5-.3-.8 1.3-2-.8-.8-2 1.3-.7-.2zM9.4 1l.5 2.4L12 2.1l2 2-1.4 2.1 2.4.4v2.8l-2.4.5L14 12l-2 2-2.1-1.4-.5 2.4H6.6l-.5-2.4L4 13.9l-2-2 1.4-2.1L1 9.4V6.6l2.4-.5L2.1 4l2-2 2.1 1.4.4-2.4h2.8zm.6 7c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zM8 9c.6 0 1-.4 1-1s-.4-1-1-1-1 .4-1 1 .4 1 1 1z\"/></svg>\n\t\t\t<span class=\"separator\"></span>\n\t\t\t<span class=\"setting-name\">${setting.key}</span>\n\t\t</a></code>`;\n\t}\n\n\tprivate getSettingMessage(\n\t\tsetting: ISetting,\n\t\tnewValue: boolean | string | number,\n\t): string | undefined {\n\t\tif (setting.type === \"boolean\") {\n\t\t\treturn this.booleanSettingMessage(setting, newValue as boolean);\n\t\t} else if (setting.type === \"string\") {\n\t\t\treturn this.stringSettingMessage(setting, newValue as string);\n\t\t} else if (setting.type === \"number\") {\n\t\t\treturn this.numberSettingMessage(setting, newValue as number);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync restoreSetting(settingId: string): Promise<void> {\n\t\tconst userOriginalSettingValue = this._updatedSettings.get(settingId);\n\t\tthis._updatedSettings.delete(settingId);\n\t\treturn this._configurationService.updateValue(\n\t\t\tsettingId,\n\t\t\tuserOriginalSettingValue,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n\n\tasync setSetting(\n\t\tsettingId: string,\n\t\tcurrentSettingValue: any,\n\t\tnewSettingValue: any,\n\t): Promise<void> {\n\t\tthis._updatedSettings.set(settingId, currentSettingValue);\n\t\treturn this._configurationService.updateValue(\n\t\t\tsettingId,\n\t\t\tnewSettingValue,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n\n\tgetActions(uri: URI) {\n\t\tif (uri.scheme !== Schemas.codeSetting) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions: IAction[] = [];\n\n\t\tconst settingId = uri.authority;\n\t\tconst newSettingValue = this.parseValue(\n\t\t\turi.authority,\n\t\t\turi.path.substring(1),\n\t\t);\n\t\tconst currentSettingValue =\n\t\t\tthis._configurationService.inspect(settingId).userValue;\n\n\t\tif (\n\t\t\tnewSettingValue !== undefined &&\n\t\t\tnewSettingValue === currentSettingValue &&\n\t\t\tthis._updatedSettings.has(settingId)\n\t\t) {\n\t\t\tconst restoreMessage =\n\t\t\t\tthis.restorePreviousSettingMessage(settingId);\n\t\t\tactions.push({\n\t\t\t\tclass: undefined,\n\t\t\t\tid: \"restoreSetting\",\n\t\t\t\tenabled: true,\n\t\t\t\ttooltip: restoreMessage,\n\t\t\t\tlabel: restoreMessage,\n\t\t\t\trun: () => {\n\t\t\t\t\treturn this.restoreSetting(settingId);\n\t\t\t\t},\n\t\t\t});\n\t\t} else if (newSettingValue !== undefined) {\n\t\t\tconst setting = this.getSetting(settingId);\n\t\t\tconst trySettingMessage = setting\n\t\t\t\t? this.getSettingMessage(setting, newSettingValue)\n\t\t\t\t: undefined;\n\n\t\t\tif (setting && trySettingMessage) {\n\t\t\t\tactions.push({\n\t\t\t\t\tclass: undefined,\n\t\t\t\t\tid: \"trySetting\",\n\t\t\t\t\tenabled: currentSettingValue !== newSettingValue,\n\t\t\t\t\ttooltip: trySettingMessage,\n\t\t\t\t\tlabel: trySettingMessage,\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.setSetting(\n\t\t\t\t\t\t\tsettingId,\n\t\t\t\t\t\t\tcurrentSettingValue,\n\t\t\t\t\t\t\tnewSettingValue,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst viewInSettingsMessage = this.viewInSettingsMessage(\n\t\t\tsettingId,\n\t\t\tactions.length > 0,\n\t\t);\n\t\tactions.push({\n\t\t\tclass: undefined,\n\t\t\tenabled: true,\n\t\t\tid: \"viewInSettings\",\n\t\t\ttooltip: viewInSettingsMessage,\n\t\t\tlabel: viewInSettingsMessage,\n\t\t\trun: () => {\n\t\t\t\treturn this._preferencesService.openApplicationSettings({\n\t\t\t\t\tquery: `@id:${settingId}`,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\tactions.push({\n\t\t\tclass: undefined,\n\t\t\tenabled: true,\n\t\t\tid: \"copySettingId\",\n\t\t\ttooltip: nls.localize(\"copySettingId\", \"Copy Setting ID\"),\n\t\t\tlabel: nls.localize(\"copySettingId\", \"Copy Setting ID\"),\n\t\t\trun: () => {\n\t\t\t\tthis._clipboardService.writeText(settingId);\n\t\t\t},\n\t\t});\n\n\t\treturn actions;\n\t}\n\n\tprivate showContextMenu(uri: URI, x: number, y: number) {\n\t\tconst actions = this.getActions(uri);\n\t\tif (!actions) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => ({ x, y }),\n\t\t\tgetActions: () => actions,\n\t\t\tgetActionViewItem: (action) => {\n\t\t\t\treturn new ActionViewItem(action, action, { label: true });\n\t\t\t},\n\t\t});\n\t}\n\n\tasync updateSetting(uri: URI, x: number, y: number) {\n\t\tif (uri.scheme === Schemas.codeSetting) {\n\t\t\ttype ReleaseNotesSettingUsedClassification = {\n\t\t\t\towner: \"alexr00\";\n\t\t\t\tcomment: \"Used to understand if the the action to update settings from the release notes is used.\";\n\t\t\t\tsettingId: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"The id of the setting that was clicked on in the release notes\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype ReleaseNotesSettingUsed = {\n\t\t\t\tsettingId: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\tReleaseNotesSettingUsed,\n\t\t\t\tReleaseNotesSettingUsedClassification\n\t\t\t>(\"releaseNotesSettingAction\", {\n\t\t\t\tsettingId: uri.authority,\n\t\t\t});\n\t\t\treturn this.showContextMenu(uri, x, y);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
