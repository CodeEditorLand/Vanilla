{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/markdown/test/browser/markdownSettingRenderer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { IAction } from '../../../../../base/common/actions.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ConfigurationScope, Extensions, IConfigurationNode, IConfigurationRegistry } from '../../../../../platform/configuration/common/configurationRegistry.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IContextMenuService } from '../../../../../platform/contextview/browser/contextView.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { SimpleSettingRenderer } from '../../browser/markdownSettingRenderer.js';\nimport { IPreferencesService } from '../../../../services/preferences/common/preferences.js';\n\nconst configuration: IConfigurationNode = {\n\t'id': 'examples',\n\t'title': 'Examples',\n\t'type': 'object',\n\t'properties': {\n\t\t'example.booleanSetting': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'scope': ConfigurationScope.APPLICATION\n\t\t},\n\t\t'example.booleanSetting2': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\t'scope': ConfigurationScope.APPLICATION\n\t\t},\n\t\t'example.stringSetting': {\n\t\t\t'type': 'string',\n\t\t\t'default': 'one',\n\t\t\t'scope': ConfigurationScope.APPLICATION\n\t\t},\n\t\t'example.numberSetting': {\n\t\t\t'type': 'number',\n\t\t\t'default': 3,\n\t\t\t'scope': ConfigurationScope.APPLICATION\n\t\t}\n\t}\n};\n\nclass MarkdownConfigurationService extends TestConfigurationService {\n\toverride async updateValue(key: string, value: any): Promise<void> {\n\t\tconst [section, setting] = key.split('.');\n\t\treturn this.setUserConfiguration(section, { [setting]: value });\n\t}\n}\n\nsuite('Markdown Setting Renderer Test', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet configurationService: TestConfigurationService;\n\tlet preferencesService: IPreferencesService;\n\tlet contextMenuService: IContextMenuService;\n\tlet settingRenderer: SimpleSettingRenderer;\n\n\tsuiteSetup(() => {\n\t\tconfigurationService = new MarkdownConfigurationService();\n\t\tpreferencesService = <IPreferencesService>{\n\t\t\tgetSetting: (setting) => {\n\t\t\t\tlet type = 'boolean';\n\t\t\t\tif (setting.includes('string')) {\n\t\t\t\t\ttype = 'string';\n\t\t\t\t}\n\t\t\t\treturn { type, key: setting };\n\t\t\t}\n\t\t};\n\t\tcontextMenuService = <IContextMenuService>{};\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration(configuration);\n\t\tsettingRenderer = new SimpleSettingRenderer(configurationService, contextMenuService, preferencesService, { publicLog2: () => { } } as any, { writeText: async () => { } } as any);\n\t});\n\n\tsuiteTeardown(() => {\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).deregisterConfigurations([configuration]);\n\t});\n\n\ttest('render code setting button with value', () => {\n\t\tconst htmlRenderer = settingRenderer.getHtmlRenderer();\n\t\tconst htmlNoValue = '<a href=\"code-oss://settings/example.booleanSetting\" codesetting=\"true\">';\n\t\tconst renderedHtmlNoValue = htmlRenderer({ block: false, raw: htmlNoValue, pre: false, text: '', type: 'html' });\n\t\tassert.strictEqual(renderedHtmlNoValue,\n\t\t\t`<code tabindex=\"0\"><a href=\"code-setting://example.booleanSetting/true\" class=\"codesetting\" title=\"View or change setting\" aria-role=\"button\"><svg width=\"14\" height=\"14\" viewBox=\"0 0 15 15\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\"><path d=\"M9.1 4.4L8.6 2H7.4l-.5 2.4-.7.3-2-1.3-.9.8 1.3 2-.2.7-2.4.5v1.2l2.4.5.3.8-1.3 2 .8.8 2-1.3.8.3.4 2.3h1.2l.5-2.4.8-.3 2 1.3.8-.8-1.3-2 .3-.8 2.3-.4V7.4l-2.4-.5-.3-.8 1.3-2-.8-.8-2 1.3-.7-.2zM9.4 1l.5 2.4L12 2.1l2 2-1.4 2.1 2.4.4v2.8l-2.4.5L14 12l-2 2-2.1-1.4-.5 2.4H6.6l-.5-2.4L4 13.9l-2-2 1.4-2.1L1 9.4V6.6l2.4-.5L2.1 4l2-2 2.1 1.4.4-2.4h2.8zm.6 7c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zM8 9c.6 0 1-.4 1-1s-.4-1-1-1-1 .4-1 1 .4 1 1 1z\"/></svg>\n\t\t\t<span class=\"separator\"></span>\n\t\t\t<span class=\"setting-name\">example.booleanSetting</span>\n\t\t</a></code>`);\n\t});\n\n\ttest('actions with no value', () => {\n\t\tconst uri = URI.parse(settingRenderer.settingToUriString('example.booleanSetting'));\n\t\tconst actions = settingRenderer.getActions(uri);\n\t\tassert.strictEqual(actions?.length, 2);\n\t\tassert.strictEqual(actions[0].label, 'View \"Example: Boolean Setting\" in Settings');\n\t});\n\n\ttest('actions with value + updating and restoring', async () => {\n\t\tawait configurationService.setUserConfiguration('example', { stringSetting: 'two' });\n\t\tconst uri = URI.parse(settingRenderer.settingToUriString('example.stringSetting', 'three'));\n\n\t\tconst verifyOriginalState = (actions: IAction[] | undefined): actions is IAction[] => {\n\t\t\tassert.strictEqual(actions?.length, 3);\n\t\t\tassert.strictEqual(actions[0].label, 'Set \"Example: String Setting\" to \"three\"');\n\t\t\tassert.strictEqual(actions[1].label, 'View in Settings');\n\t\t\tassert.strictEqual(configurationService.getValue('example.stringSetting'), 'two');\n\t\t\treturn true;\n\t\t};\n\n\t\tconst actions = settingRenderer.getActions(uri);\n\t\tif (verifyOriginalState(actions)) {\n\t\t\t// Update the value\n\t\t\tawait actions[0].run();\n\t\t\tassert.strictEqual(configurationService.getValue('example.stringSetting'), 'three');\n\t\t\tconst actionsUpdated = settingRenderer.getActions(uri);\n\t\t\tassert.strictEqual(actionsUpdated?.length, 3);\n\t\t\tassert.strictEqual(actionsUpdated[0].label, 'Restore value of \"Example: String Setting\"');\n\t\t\tassert.strictEqual(actions[1].label, 'View in Settings');\n\t\t\tassert.strictEqual(actions[2].label, 'Copy Setting ID');\n\t\t\tassert.strictEqual(configurationService.getValue('example.stringSetting'), 'three');\n\n\t\t\t// Restore the value\n\t\t\tawait actionsUpdated[0].run();\n\t\t\tverifyOriginalState(settingRenderer.getActions(uri));\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": ["actions"]
}
