{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/multicursor/notebookMulticursor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../../../nls.js';\nimport { Emitter, Event } from '../../../../../../base/common/event.js';\nimport { KeyCode, KeyMod } from '../../../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../../../base/common/map.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { EditorConfiguration } from '../../../../../../editor/browser/config/editorConfiguration.js';\nimport { ICodeEditor } from '../../../../../../editor/browser/editorBrowser.js';\nimport { CodeEditorWidget } from '../../../../../../editor/browser/widget/codeEditor/codeEditorWidget.js';\nimport { IEditorConfiguration } from '../../../../../../editor/common/config/editorConfiguration.js';\nimport { Position } from '../../../../../../editor/common/core/position.js';\nimport { Range } from '../../../../../../editor/common/core/range.js';\nimport { Selection, SelectionDirection } from '../../../../../../editor/common/core/selection.js';\nimport { IWordAtPosition, USUAL_WORD_SEPARATORS } from '../../../../../../editor/common/core/wordHelper.js';\nimport { CommandExecutor, CursorsController } from '../../../../../../editor/common/cursor/cursor.js';\nimport { DeleteOperations } from '../../../../../../editor/common/cursor/cursorDeleteOperations.js';\nimport { CursorConfiguration, ICursorSimpleModel } from '../../../../../../editor/common/cursorCommon.js';\nimport { CursorChangeReason } from '../../../../../../editor/common/cursorEvents.js';\nimport { ILanguageConfigurationService } from '../../../../../../editor/common/languages/languageConfigurationRegistry.js';\nimport { IModelDeltaDecoration, ITextModel, PositionAffinity } from '../../../../../../editor/common/model.js';\nimport { indentOfLine } from '../../../../../../editor/common/model/textModel.js';\nimport { ITextModelService } from '../../../../../../editor/common/services/resolverService.js';\nimport { ICoordinatesConverter } from '../../../../../../editor/common/viewModel.js';\nimport { ViewModelEventsCollector } from '../../../../../../editor/common/viewModelEventDispatcher.js';\nimport { IAccessibilityService } from '../../../../../../platform/accessibility/common/accessibility.js';\nimport { MenuId, registerAction2 } from '../../../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { IPastFutureElements, IUndoRedoElement, IUndoRedoService, UndoRedoElementType } from '../../../../../../platform/undoRedo/common/undoRedo.js';\nimport { INotebookActionContext, NotebookAction } from '../../controller/coreActions.js';\nimport { getNotebookEditorFromEditorPane, ICellViewModel, INotebookEditor, INotebookEditorContribution } from '../../notebookBrowser.js';\nimport { registerNotebookContribution } from '../../notebookEditorExtensions.js';\nimport { CellEditorOptions } from '../../view/cellParts/cellEditorOptions.js';\nimport { NOTEBOOK_CELL_EDITOR_FOCUSED, NOTEBOOK_IS_ACTIVE_EDITOR } from '../../../common/notebookContextKeys.js';\nimport { IEditorService } from '../../../../../services/editor/common/editorService.js';\nimport { RedoCommand, UndoCommand } from '../../../../../../editor/browser/editorExtensions.js';\nimport { registerWorkbenchContribution2, WorkbenchPhase } from '../../../../../common/contributions.js';\n\nconst NOTEBOOK_ADD_FIND_MATCH_TO_SELECTION_ID = 'notebook.addFindMatchToSelection';\n\nenum NotebookMultiCursorState {\n\tIdle,\n\tSelecting,\n\tEditing,\n}\n\ninterface TrackedMatch {\n\tcellViewModel: ICellViewModel;\n\tinitialSelection: Selection;\n\twordSelections: Selection[];\n\tconfig: IEditorConfiguration;\n\tdecorationIds: string[];\n\tundoRedoHistory: IPastFutureElements;\n}\n\nexport const NOTEBOOK_MULTI_SELECTION_CONTEXT = {\n\tIsNotebookMultiSelect: new RawContextKey<boolean>('isNotebookMultiSelect', false),\n\tNotebookMultiSelectState: new RawContextKey<NotebookMultiCursorState>('notebookMultiSelectState', NotebookMultiCursorState.Idle),\n};\n\nexport class NotebookMultiCursorController extends Disposable implements INotebookEditorContribution {\n\n\tstatic readonly id: string = 'notebook.multiCursorController';\n\n\tprivate state: NotebookMultiCursorState = NotebookMultiCursorState.Idle;\n\n\tprivate word: string = '';\n\tprivate trackedMatches: TrackedMatch[] = [];\n\n\tprivate readonly _onDidChangeAnchorCell = this._register(new Emitter<void>());\n\treadonly onDidChangeAnchorCell: Event<void> = this._onDidChangeAnchorCell.event;\n\tprivate anchorCell: [ICellViewModel, ICodeEditor] | undefined;\n\n\tprivate readonly anchorDisposables = this._register(new DisposableStore());\n\tprivate readonly cursorsDisposables = this._register(new DisposableStore());\n\tprivate cursorsControllers: ResourceMap<CursorsController> = new ResourceMap<CursorsController>();\n\n\tprivate _nbIsMultiSelectSession = NOTEBOOK_MULTI_SELECTION_CONTEXT.IsNotebookMultiSelect.bindTo(this.contextKeyService);\n\tprivate _nbMultiSelectState = NOTEBOOK_MULTI_SELECTION_CONTEXT.NotebookMultiSelectState.bindTo(this.contextKeyService);\n\n\n\tconstructor(\n\t\tprivate readonly notebookEditor: INotebookEditor,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ILanguageConfigurationService private readonly languageConfigurationService: ILanguageConfigurationService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IUndoRedoService private readonly undoRedoService: IUndoRedoService,\n\t) {\n\t\tsuper();\n\n\t\tif (!this.configurationService.getValue<boolean>('notebook.multiSelect.enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.anchorCell = this.notebookEditor.activeCellAndCodeEditor;\n\n\t\t// anchor cell will catch and relay all type, cut, paste events to the cursors controllers\n\t\t// need to create new controllers when the anchor cell changes, then update their listeners\n\t\t// ** cursor controllers need to happen first, because anchor listeners relay to them\n\t\tthis._register(this.onDidChangeAnchorCell(() => {\n\t\t\tthis.updateCursorsControllers();\n\t\t\tthis.updateAnchorListeners();\n\t\t}));\n\t}\n\n\tprivate updateCursorsControllers() {\n\t\tthis.cursorsDisposables.clear();\n\t\tthis.trackedMatches.forEach(async match => {\n\t\t\tconst textModelRef = await this.textModelService.createModelReference(match.cellViewModel.uri);\n\t\t\tconst textModel = textModelRef.object.textEditorModel;\n\t\t\tif (!textModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst cursorSimpleModel = this.constructCursorSimpleModel(match.cellViewModel);\n\t\t\tconst converter = this.constructCoordinatesConverter();\n\t\t\tconst editorConfig = match.config;\n\n\t\t\tconst controller = this.cursorsDisposables.add(new CursorsController(\n\t\t\t\ttextModel,\n\t\t\t\tcursorSimpleModel,\n\t\t\t\tconverter,\n\t\t\t\tnew CursorConfiguration(textModel.getLanguageId(), textModel.getOptions(), editorConfig, this.languageConfigurationService)\n\t\t\t));\n\t\t\tcontroller.setSelections(new ViewModelEventsCollector(), undefined, match.wordSelections, CursorChangeReason.Explicit);\n\t\t\tthis.cursorsControllers.set(match.cellViewModel.uri, controller);\n\t\t});\n\t}\n\n\tprivate constructCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn {\n\t\t\tconvertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\t\t\treturn viewPosition;\n\t\t\t},\n\t\t\tconvertViewRangeToModelRange(viewRange: Range): Range {\n\t\t\t\treturn viewRange;\n\t\t\t},\n\t\t\tvalidateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position {\n\t\t\t\treturn viewPosition;\n\t\t\t},\n\t\t\tvalidateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\t\t\treturn viewRange;\n\t\t\t},\n\t\t\tconvertModelPositionToViewPosition(modelPosition: Position, affinity?: PositionAffinity, allowZeroLineNumber?: boolean, belowHiddenRanges?: boolean): Position {\n\t\t\t\treturn modelPosition;\n\t\t\t},\n\t\t\tconvertModelRangeToViewRange(modelRange: Range, affinity?: PositionAffinity): Range {\n\t\t\t\treturn modelRange;\n\t\t\t},\n\t\t\tmodelPositionIsVisible(modelPosition: Position): boolean {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tgetModelLineViewLineCount(modelLineNumber: number): number {\n\t\t\t\treturn 1;\n\t\t\t},\n\t\t\tgetViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\t\t\treturn modelLineNumber;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate constructCursorSimpleModel(cell: ICellViewModel): ICursorSimpleModel {\n\t\treturn {\n\t\t\tgetLineCount(): number {\n\t\t\t\treturn cell.textBuffer.getLineCount();\n\t\t\t},\n\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\treturn cell.textBuffer.getLineContent(lineNumber);\n\t\t\t},\n\t\t\tgetLineMinColumn(lineNumber: number): number {\n\t\t\t\treturn cell.textBuffer.getLineMinColumn(lineNumber);\n\t\t\t},\n\t\t\tgetLineMaxColumn(lineNumber: number): number {\n\t\t\t\treturn cell.textBuffer.getLineMaxColumn(lineNumber);\n\t\t\t},\n\t\t\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\t\t\treturn cell.textBuffer.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\t\t},\n\t\t\tgetLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\t\t\treturn cell.textBuffer.getLineLastNonWhitespaceColumn(lineNumber);\n\t\t\t},\n\t\t\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\t\t\treturn position;\n\t\t\t},\n\t\t\tgetLineIndentColumn(lineNumber: number): number {\n\t\t\t\treturn indentOfLine(cell.textBuffer.getLineContent(lineNumber)) + 1;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate updateAnchorListeners() {\n\t\tthis.anchorDisposables.clear();\n\n\t\tif (!this.anchorCell) {\n\t\t\tthrow new Error('Anchor cell is undefined');\n\t\t}\n\n\t\t// typing\n\t\tthis.anchorDisposables.add(this.anchorCell[1].onWillType((input) => {\n\t\t\tconst collector = new ViewModelEventsCollector();\n\t\t\tthis.trackedMatches.forEach(match => {\n\t\t\t\tconst controller = this.cursorsControllers.get(match.cellViewModel.uri);\n\t\t\t\tif (!controller) {\n\t\t\t\t\t// should not happen\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (match.cellViewModel.handle !== this.anchorCell?.[0].handle) { // don't relay to active cell, already has a controller for typing\n\t\t\t\t\tcontroller.type(collector, input, 'keyboard');\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\tthis.anchorDisposables.add(this.anchorCell[1].onDidType(() => {\n\t\t\tthis.state = NotebookMultiCursorState.Editing; // typing will continue to work as normal across ranges, just preps for another cmd+d\n\t\t\tthis._nbMultiSelectState.set(NotebookMultiCursorState.Editing);\n\n\t\t\tconst anchorController = this.cursorsControllers.get(this.anchorCell![0].uri);\n\t\t\tif (!anchorController) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeSelections = this.notebookEditor.activeCodeEditor?.getSelections();\n\t\t\tif (!activeSelections) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// need to keep anchor cursor controller in sync manually (for delete usage), since we don't relay type event to it\n\t\t\tanchorController.setSelections(new ViewModelEventsCollector(), 'keyboard', activeSelections, CursorChangeReason.Explicit);\n\n\t\t\tthis.trackedMatches.forEach(match => {\n\t\t\t\tconst controller = this.cursorsControllers.get(match.cellViewModel.uri);\n\t\t\t\tif (!controller) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// this is used upon exiting the multicursor session to set the selections back to the correct cursor state\n\t\t\t\tmatch.initialSelection = controller.getSelection();\n\t\t\t\t// clear tracked selection data as it is invalid once typing begins\n\t\t\t\tmatch.wordSelections = [];\n\t\t\t});\n\n\t\t\tthis.updateLazyDecorations();\n\t\t}));\n\n\t\t// exit mode\n\t\tthis.anchorDisposables.add(this.anchorCell[1].onDidChangeCursorSelection((e) => {\n\t\t\tif (e.source === 'mouse' || e.source === 'deleteRight') {\n\t\t\t\tthis.resetToIdleState();\n\t\t\t}\n\t\t}));\n\n\t\tthis.anchorDisposables.add(this.anchorCell[1].onDidBlurEditorWidget(() => {\n\t\t\tif (this.state === NotebookMultiCursorState.Selecting || this.state === NotebookMultiCursorState.Editing) {\n\t\t\t\tthis.resetToIdleState();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateFinalUndoRedo() {\n\t\tconst anchorCellModel = this.anchorCell?.[1].getModel();\n\t\tif (!anchorCellModel) {\n\t\t\t// should not happen\n\t\t\treturn;\n\t\t}\n\n\t\tconst newElementsMap: ResourceMap<IUndoRedoElement[]> = new ResourceMap<IUndoRedoElement[]>();\n\t\tconst resources: URI[] = [];\n\n\t\tthis.trackedMatches.forEach(trackedMatch => {\n\t\t\tconst undoRedoState = trackedMatch.undoRedoHistory;\n\t\t\tif (!undoRedoState) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresources.push(trackedMatch.cellViewModel.uri);\n\n\t\t\tconst currentPastElements = this.undoRedoService.getElements(trackedMatch.cellViewModel.uri).past.slice();\n\t\t\tconst oldPastElements = trackedMatch.undoRedoHistory.past.slice();\n\t\t\tconst newElements = currentPastElements.slice(oldPastElements.length);\n\t\t\tif (newElements.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnewElementsMap.set(trackedMatch.cellViewModel.uri, newElements);\n\n\t\t\tthis.undoRedoService.removeElements(trackedMatch.cellViewModel.uri);\n\t\t\toldPastElements.forEach(element => {\n\t\t\t\tthis.undoRedoService.pushElement(element);\n\t\t\t});\n\t\t});\n\n\t\tthis.undoRedoService.pushElement({\n\t\t\ttype: UndoRedoElementType.Workspace,\n\t\t\tresources: resources,\n\t\t\tlabel: 'Multi Cursor Edit',\n\t\t\tcode: 'multiCursorEdit',\n\t\t\tconfirmBeforeUndo: false,\n\t\t\tundo: async () => {\n\t\t\t\tnewElementsMap.forEach(async value => {\n\t\t\t\t\tvalue.reverse().forEach(async element => {\n\t\t\t\t\t\tawait element.undo();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tredo: async () => {\n\t\t\t\tnewElementsMap.forEach(async value => {\n\t\t\t\t\tvalue.forEach(async element => {\n\t\t\t\t\t\tawait element.redo();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic resetToIdleState() {\n\t\tthis.state = NotebookMultiCursorState.Idle;\n\t\tthis._nbMultiSelectState.set(NotebookMultiCursorState.Idle);\n\t\tthis._nbIsMultiSelectSession.set(false);\n\t\tthis.updateFinalUndoRedo();\n\n\t\tthis.trackedMatches.forEach(match => {\n\t\t\tthis.clearDecorations(match);\n\t\t\tmatch.cellViewModel.setSelections([match.initialSelection]); // correct cursor placement upon exiting cmd-d session\n\t\t});\n\n\t\tthis.anchorDisposables.clear();\n\t\tthis.cursorsDisposables.clear();\n\t\tthis.cursorsControllers.clear();\n\t\tthis.trackedMatches = [];\n\t}\n\n\tpublic async findAndTrackNextSelection(cell: ICellViewModel): Promise<void> {\n\t\tif (this.state === NotebookMultiCursorState.Idle) { // move cursor to end of the symbol + track it, transition to selecting state\n\t\t\tconst textModel = cell.textModel;\n\t\t\tif (!textModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst inputSelection = cell.getSelections()[0];\n\t\t\tconst word = this.getWord(inputSelection, textModel);\n\t\t\tif (!word) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.word = word.word;\n\n\t\t\tconst newSelection = new Selection(\n\t\t\t\tinputSelection.startLineNumber,\n\t\t\t\tword.startColumn,\n\t\t\t\tinputSelection.startLineNumber,\n\t\t\t\tword.endColumn\n\t\t\t);\n\t\t\tcell.setSelections([newSelection]);\n\n\t\t\tthis.anchorCell = this.notebookEditor.activeCellAndCodeEditor;\n\t\t\tif (!this.anchorCell || this.anchorCell[0].handle !== cell.handle) {\n\t\t\t\tthrow new Error('Active cell is not the same as the cell passed as context');\n\t\t\t}\n\t\t\tif (!(this.anchorCell[1] instanceof CodeEditorWidget)) {\n\t\t\t\tthrow new Error('Active cell is not an instance of CodeEditorWidget');\n\t\t\t}\n\n\t\t\ttextModel.pushStackElement();\n\n\t\t\tthis.trackedMatches = [];\n\t\t\tconst editorConfig = this.constructCellEditorOptions(this.anchorCell[0]);\n\t\t\tconst newMatch: TrackedMatch = {\n\t\t\t\tcellViewModel: cell,\n\t\t\t\tinitialSelection: inputSelection,\n\t\t\t\twordSelections: [newSelection],\n\t\t\t\tconfig: editorConfig, // cache this in the match so we can create new cursors controllers with the correct language config\n\t\t\t\tdecorationIds: [],\n\t\t\t\tundoRedoHistory: this.undoRedoService.getElements(cell.uri)\n\t\t\t};\n\t\t\tthis.trackedMatches.push(newMatch);\n\n\t\t\tthis.initializeMultiSelectDecorations(newMatch);\n\t\t\tthis._nbIsMultiSelectSession.set(true);\n\t\t\tthis.state = NotebookMultiCursorState.Selecting;\n\t\t\tthis._nbMultiSelectState.set(NotebookMultiCursorState.Selecting);\n\t\t\tthis._onDidChangeAnchorCell.fire();\n\n\t\t} else if (this.state === NotebookMultiCursorState.Selecting) { // use the word we stored from idle state transition to find next match, track it\n\t\t\tconst notebookTextModel = this.notebookEditor.textModel;\n\t\t\tif (!notebookTextModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = this.notebookEditor.getCellIndex(cell);\n\t\t\tif (index === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst findResult = notebookTextModel.findNextMatch(\n\t\t\t\tthis.word,\n\t\t\t\t{ cellIndex: index, position: cell.getSelections()[cell.getSelections().length - 1].getEndPosition() },\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tUSUAL_WORD_SEPARATORS //! might want to get these from the editor config\n\t\t\t);\n\t\t\tif (!findResult) {\n\t\t\t\treturn; //todo: some sort of message to the user alerting them that there are no more matches? editor does not do this\n\t\t\t}\n\n\t\t\tconst resultCellViewModel = this.notebookEditor.getCellByHandle(findResult.cell.handle);\n\t\t\tif (!resultCellViewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet newMatch: TrackedMatch;\n\t\t\tif (findResult.cell.handle !== cell.handle) { // result is in a different cell, move focus there and apply selection, then update anchor\n\t\t\t\tawait this.notebookEditor.revealRangeInViewAsync(resultCellViewModel, findResult.match.range);\n\t\t\t\tthis.notebookEditor.focusNotebookCell(resultCellViewModel, 'editor');\n\n\t\t\t\tconst initialSelection = resultCellViewModel.getSelections()[0];\n\t\t\t\tconst newSelection = Selection.fromRange(findResult.match.range, SelectionDirection.LTR);\n\t\t\t\tresultCellViewModel.setSelections([newSelection]);\n\n\t\t\t\tthis.anchorCell = this.notebookEditor.activeCellAndCodeEditor;\n\t\t\t\tif (!this.anchorCell || !(this.anchorCell[1] instanceof CodeEditorWidget)) {\n\t\t\t\t\tthrow new Error('Active cell is not an instance of CodeEditorWidget');\n\t\t\t\t}\n\n\t\t\t\tconst textModel = await resultCellViewModel.resolveTextModel();\n\t\t\t\ttextModel.pushStackElement();\n\n\t\t\t\tnewMatch = {\n\t\t\t\t\tcellViewModel: resultCellViewModel,\n\t\t\t\t\tinitialSelection: initialSelection,\n\t\t\t\t\twordSelections: [newSelection],\n\t\t\t\t\tconfig: this.constructCellEditorOptions(this.anchorCell[0]),\n\t\t\t\t\tdecorationIds: [],\n\t\t\t\t\tundoRedoHistory: this.undoRedoService.getElements(resultCellViewModel.uri)\n\t\t\t\t} satisfies TrackedMatch;\n\t\t\t\tthis.trackedMatches.push(newMatch);\n\n\t\t\t\tthis._onDidChangeAnchorCell.fire();\n\n\t\t\t} else { // match is in the same cell, find tracked entry, update and set selections\n\t\t\t\tnewMatch = this.trackedMatches.find(match => match.cellViewModel.handle === findResult.cell.handle)!;\n\t\t\t\tnewMatch.wordSelections.push(Selection.fromRange(findResult.match.range, SelectionDirection.LTR));\n\t\t\t\tresultCellViewModel.setSelections(newMatch.wordSelections);\n\t\t\t}\n\n\t\t\tthis.initializeMultiSelectDecorations(newMatch);\n\t\t}\n\t}\n\n\tpublic async deleteLeft(): Promise<void> {\n\t\tthis.trackedMatches.forEach(match => {\n\t\t\tconst controller = this.cursorsControllers.get(match.cellViewModel.uri);\n\t\t\tif (!controller) {\n\t\t\t\t// should not happen\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [, commands] = DeleteOperations.deleteLeft(\n\t\t\t\tcontroller.getPrevEditOperationType(),\n\t\t\t\tcontroller.context.cursorConfig,\n\t\t\t\tcontroller.context.model,\n\t\t\t\tcontroller.getSelections(),\n\t\t\t\tcontroller.getAutoClosedCharacters(),\n\t\t\t);\n\n\t\t\tconst delSelections = CommandExecutor.executeCommands(controller.context.model, controller.getSelections(), commands);\n\t\t\tif (!delSelections) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcontroller.setSelections(new ViewModelEventsCollector(), undefined, delSelections, CursorChangeReason.Explicit);\n\t\t});\n\t}\n\n\tasync undo() {\n\t\tconst models: ITextModel[] = [];\n\t\tfor (const match of this.trackedMatches) {\n\t\t\tconst model = await match.cellViewModel.resolveTextModel();\n\t\t\tif (model) {\n\t\t\t\tmodels.push(model);\n\t\t\t}\n\t\t}\n\n\t\tawait Promise.all(models.map(model => model.undo()));\n\t}\n\n\tasync redo() {\n\t\tconst models: ITextModel[] = [];\n\t\tfor (const match of this.trackedMatches) {\n\t\t\tconst model = await match.cellViewModel.resolveTextModel();\n\t\t\tif (model) {\n\t\t\t\tmodels.push(model);\n\t\t\t}\n\t\t}\n\n\t\tawait Promise.all(models.map(model => model.redo()));\n\t}\n\n\tprivate constructCellEditorOptions(cell: ICellViewModel): EditorConfiguration {\n\t\tconst cellEditorOptions = new CellEditorOptions(this.notebookEditor.getBaseCellEditorOptions(cell.language), this.notebookEditor.notebookOptions, this.configurationService);\n\t\tconst options = cellEditorOptions.getUpdatedValue(cell.internalMetadata, cell.uri);\n\t\treturn new EditorConfiguration(false, MenuId.EditorContent, options, null, this.accessibilityService);\n\t}\n\n\t/**\n\t * Updates the multicursor selection decorations for a specific matched cell\n\t *\n\t * @param match -- match object containing the viewmodel + selections\n\t */\n\tprivate initializeMultiSelectDecorations(match: TrackedMatch) {\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tmatch.wordSelections.forEach(selection => {\n\t\t\tdecorations.push({\n\t\t\t\trange: selection,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: '',\n\t\t\t\t\tclassName: 'nb-multicursor-selection',\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tmatch.decorationIds = match.cellViewModel.deltaModelDecorations(\n\t\t\tmatch.decorationIds,\n\t\t\tdecorations\n\t\t);\n\t}\n\n\tprivate updateLazyDecorations() {\n\t\t// for every tracked match that is not in the visible range, dispose of their decorations and update them based off the cursorcontroller\n\t\tthis.trackedMatches.forEach(match => {\n\t\t\tconst cellIndex = this.notebookEditor.getCellIndex(match.cellViewModel);\n\t\t\tif (cellIndex === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst controller = this.cursorsControllers.get(match.cellViewModel.uri);\n\t\t\tif (!controller) {\n\t\t\t\t// should not happen\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selections = controller.getSelections();\n\n\n\t\t\tconst newDecorations = selections?.map(selection => {\n\t\t\t\treturn {\n\t\t\t\t\trange: selection,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\tclassName: 'nb-multicursor-selection',\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tmatch.decorationIds = match.cellViewModel.deltaModelDecorations(\n\t\t\t\tmatch.decorationIds,\n\t\t\t\tnewDecorations ?? []\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate clearDecorations(match: TrackedMatch) {\n\t\tmatch.decorationIds = match.cellViewModel.deltaModelDecorations(\n\t\t\tmatch.decorationIds,\n\t\t\t[]\n\t\t);\n\t}\n\n\tprivate getWord(selection: Selection, model: ITextModel): IWordAtPosition | null {\n\t\tconst lineNumber = selection.startLineNumber;\n\t\tconst startColumn = selection.startColumn;\n\n\t\tif (model.isDisposed()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn model.getWordAtPosition({\n\t\t\tlineNumber: lineNumber,\n\t\t\tcolumn: startColumn\n\t\t});\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.anchorDisposables.dispose();\n\t\tthis.cursorsDisposables.dispose();\n\n\t\tthis.trackedMatches.forEach(match => {\n\t\t\tthis.clearDecorations(match);\n\t\t});\n\t\tthis.trackedMatches = [];\n\t}\n\n}\n\nclass NotebookAddMatchToMultiSelectionAction extends NotebookAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NOTEBOOK_ADD_FIND_MATCH_TO_SELECTION_ID,\n\t\t\ttitle: localize('addFindMatchToSelection', \"Add Find Match to Selection\"),\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('config.notebook.multiSelect.enabled', true),\n\t\t\t\t\tNOTEBOOK_IS_ACTIVE_EDITOR,\n\t\t\t\t\tNOTEBOOK_CELL_EDITOR_FOCUSED,\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyD,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async runWithContext(accessor: ServicesAccessor, context: INotebookActionContext): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!context.cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = editor.getContribution<NotebookMultiCursorController>(NotebookMultiCursorController.id);\n\t\tcontroller.findAndTrackNextSelection(context.cell);\n\t}\n}\n\nclass NotebookExitMultiSelectionAction extends NotebookAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'noteMultiCursor.exit',\n\t\t\ttitle: localize('exitMultiSelection', \"Exit Multi Cursor Mode\"),\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('config.notebook.multiSelect.enabled', true),\n\t\t\t\t\tNOTEBOOK_IS_ACTIVE_EDITOR,\n\t\t\t\t\tNOTEBOOK_MULTI_SELECTION_CONTEXT.IsNotebookMultiSelect,\n\t\t\t\t),\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async runWithContext(accessor: ServicesAccessor, context: INotebookActionContext): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = editor.getContribution<NotebookMultiCursorController>(NotebookMultiCursorController.id);\n\t\tcontroller.resetToIdleState();\n\t}\n}\n\nclass NotebookDeleteLeftMultiSelectionAction extends NotebookAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'noteMultiCursor.deleteLeft',\n\t\t\ttitle: localize('deleteLeftMultiSelection', \"Delete Left\"),\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('config.notebook.multiSelect.enabled', true),\n\t\t\t\t\tNOTEBOOK_IS_ACTIVE_EDITOR,\n\t\t\t\t\tNOTEBOOK_MULTI_SELECTION_CONTEXT.IsNotebookMultiSelect,\n\t\t\t\t\tContextKeyExpr.or(\n\t\t\t\t\t\tNOTEBOOK_MULTI_SELECTION_CONTEXT.NotebookMultiSelectState.isEqualTo(NotebookMultiCursorState.Selecting),\n\t\t\t\t\t\tNOTEBOOK_MULTI_SELECTION_CONTEXT.NotebookMultiSelectState.isEqualTo(NotebookMultiCursorState.Editing)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tprimary: KeyCode.Backspace,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async runWithContext(accessor: ServicesAccessor, context: INotebookActionContext): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = editor.getContribution<NotebookMultiCursorController>(NotebookMultiCursorController.id);\n\t\tcontroller.deleteLeft();\n\t}\n}\n\nclass NotebookMultiCursorUndoRedoContribution extends Disposable {\n\n\tstatic readonly ID = 'workbench.contrib.notebook.multiCursorUndoRedo';\n\n\tconstructor(@IEditorService private readonly _editorService: IEditorService, @IConfigurationService private readonly configurationService: IConfigurationService) {\n\t\tsuper();\n\n\t\tif (!this.configurationService.getValue<boolean>('notebook.multiSelect.enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst PRIORITY = 10005;\n\t\tthis._register(UndoCommand.addImplementation(PRIORITY, 'notebook-multicursor-undo-redo', () => {\n\t\t\tconst editor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\t\tif (!editor) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst controller = editor.getContribution<NotebookMultiCursorController>(NotebookMultiCursorController.id);\n\n\t\t\treturn controller.undo();\n\t\t}, ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('config.notebook.multiSelect.enabled', true),\n\t\t\tNOTEBOOK_IS_ACTIVE_EDITOR,\n\t\t\tNOTEBOOK_MULTI_SELECTION_CONTEXT.IsNotebookMultiSelect,\n\t\t)));\n\n\t\tthis._register(RedoCommand.addImplementation(PRIORITY, 'notebook-multicursor-undo-redo', () => {\n\t\t\tconst editor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\t\tif (!editor) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst controller = editor.getContribution<NotebookMultiCursorController>(NotebookMultiCursorController.id);\n\t\t\treturn controller.redo();\n\t\t}, ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('config.notebook.multiSelect.enabled', true),\n\t\t\tNOTEBOOK_IS_ACTIVE_EDITOR,\n\t\t\tNOTEBOOK_MULTI_SELECTION_CONTEXT.IsNotebookMultiSelect,\n\t\t)));\n\t}\n}\n\nregisterNotebookContribution(NotebookMultiCursorController.id, NotebookMultiCursorController);\nregisterAction2(NotebookAddMatchToMultiSelectionAction);\nregisterAction2(NotebookExitMultiSelectionAction);\nregisterAction2(NotebookDeleteLeftMultiSelectionAction);\nregisterWorkbenchContribution2(NotebookMultiCursorUndoRedoContribution.ID, NotebookMultiCursorUndoRedoContribution, WorkbenchPhase.BlockRestore);\n"],
  "mappings": "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",
  "names": ["NotebookMultiCursorState"]
}
