{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/cellDiagnostics/cellDiagnosticEditorContrib.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable, toDisposable } from '../../../../../../base/common/lifecycle.js';\nimport { IMarkerData, IMarkerService } from '../../../../../../platform/markers/common/markers.js';\nimport { IRange } from '../../../../../../editor/common/core/range.js';\nimport { ICellExecutionError, ICellExecutionStateChangedEvent, IExecutionStateChangedEvent, INotebookExecutionStateService, NotebookExecutionType } from '../../../common/notebookExecutionStateService.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { CellKind, NotebookSetting } from '../../../common/notebookCommon.js';\nimport { INotebookEditor, INotebookEditorContribution } from '../../notebookBrowser.js';\nimport { registerNotebookContribution } from '../../notebookEditorExtensions.js';\nimport { Iterable } from '../../../../../../base/common/iterator.js';\nimport { CodeCellViewModel } from '../../viewModel/codeCellViewModel.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { Event } from '../../../../../../base/common/event.js';\nimport { IChatAgentService } from '../../../../chat/common/chatAgents.js';\n\ntype CellDiagnostic = {\n\tcellUri: URI;\n\terror: ICellExecutionError;\n\tdisposables: IDisposable[];\n};\n\nexport class CellDiagnostics extends Disposable implements INotebookEditorContribution {\n\n\tstatic ID: string = 'workbench.notebook.cellDiagnostics';\n\n\tprivate enabled = false;\n\tprivate listening = false;\n\tprivate diagnosticsByHandle: Map<number, CellDiagnostic> = new Map();\n\n\tconstructor(\n\t\tprivate readonly notebookEditor: INotebookEditor,\n\t\t@INotebookExecutionStateService private readonly notebookExecutionStateService: INotebookExecutionStateService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateEnabled();\n\n\t\tthis._register(chatAgentService.onDidChangeAgents(() => this.updateEnabled()));\n\t\tthis._register(configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration(NotebookSetting.cellFailureDiagnostics)) {\n\t\t\t\tthis.updateEnabled();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateEnabled() {\n\t\tconst settingEnabled = this.configurationService.getValue(NotebookSetting.cellFailureDiagnostics);\n\t\tif (this.enabled && (!settingEnabled || Iterable.isEmpty(this.chatAgentService.getAgents()))) {\n\t\t\tthis.enabled = false;\n\t\t\tthis.clearAll();\n\t\t} else if (!this.enabled && settingEnabled && !Iterable.isEmpty(this.chatAgentService.getAgents())) {\n\t\t\tthis.enabled = true;\n\t\t\tif (!this.listening) {\n\t\t\t\tthis.listening = true;\n\t\t\t\tthis._register(Event.accumulate<ICellExecutionStateChangedEvent | IExecutionStateChangedEvent>(\n\t\t\t\t\tthis.notebookExecutionStateService.onDidChangeExecution, 200\n\t\t\t\t)((e) => this.handleChangeExecutionState(e)));\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\tprivate handleChangeExecutionState(changes: (ICellExecutionStateChangedEvent | IExecutionStateChangedEvent)[]) {\n\t\tif (!this.enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst handled = new Set<number>();\n\t\tfor (const e of changes.reverse()) {\n\n\t\t\tconst notebookUri = this.notebookEditor.textModel?.uri;\n\t\t\tif (e.type === NotebookExecutionType.cell && notebookUri && e.affectsNotebook(notebookUri) && !handled.has(e.cellHandle)) {\n\t\t\t\thandled.add(e.cellHandle);\n\t\t\t\tif (!!e.changed) {\n\t\t\t\t\t// cell is running\n\t\t\t\t\tthis.clear(e.cellHandle);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setDiagnostics(e.cellHandle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate clearAll() {\n\t\tfor (const handle of this.diagnosticsByHandle.keys()) {\n\t\t\tthis.clear(handle);\n\t\t}\n\t}\n\n\tpublic clear(cellHandle: number) {\n\t\tconst diagnostic = this.diagnosticsByHandle.get(cellHandle);\n\t\tif (diagnostic) {\n\t\t\tfor (const disposable of diagnostic.disposables) {\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t\tthis.diagnosticsByHandle.delete(cellHandle);\n\t\t}\n\t}\n\n\tprivate setDiagnostics(cellHandle: number) {\n\t\tif (this.diagnosticsByHandle.has(cellHandle)) {\n\t\t\t// multiple diagnostics per cell not supported for now\n\t\t\treturn;\n\t\t}\n\n\t\tconst cell = this.notebookEditor.getCellByHandle(cellHandle);\n\t\tif (!cell || cell.cellKind !== CellKind.Code) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst metadata = cell.model.internalMetadata;\n\t\tif (cell instanceof CodeCellViewModel && !metadata.lastRunSuccess && metadata?.error?.location) {\n\t\t\tconst disposables: IDisposable[] = [];\n\t\t\tconst marker = this.createMarkerData(metadata.error.message, metadata.error.location);\n\t\t\tthis.markerService.changeOne(CellDiagnostics.ID, cell.uri, [marker]);\n\t\t\tdisposables.push(toDisposable(() => this.markerService.changeOne(CellDiagnostics.ID, cell.uri, [])));\n\t\t\tcell.excecutionError.set(metadata.error, undefined);\n\t\t\tdisposables.push(toDisposable(() => cell.excecutionError.set(undefined, undefined)));\n\t\t\tdisposables.push(cell.model.onDidChangeOutputs(() => {\n\t\t\t\tif (cell.model.outputs.length === 0) {\n\t\t\t\t\tthis.clear(cellHandle);\n\t\t\t\t}\n\t\t\t}));\n\t\t\tdisposables.push(cell.model.onDidChangeContent(() => {\n\t\t\t\tthis.clear(cellHandle);\n\t\t\t}));\n\t\t\tthis.diagnosticsByHandle.set(cellHandle, { cellUri: cell.uri, error: metadata.error, disposables });\n\t\t}\n\t}\n\n\tprivate createMarkerData(message: string, location: IRange): IMarkerData {\n\t\treturn {\n\t\t\tseverity: 8,\n\t\t\tmessage: message,\n\t\t\tstartLineNumber: location.startLineNumber + 1,\n\t\t\tstartColumn: location.startColumn + 1,\n\t\t\tendLineNumber: location.endLineNumber + 1,\n\t\t\tendColumn: location.endColumn + 1,\n\t\t\tsource: 'Cell Execution Error'\n\t\t};\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis.clearAll();\n\t}\n\n}\n\nregisterNotebookContribution(CellDiagnostics.ID, CellDiagnostics);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,YAAY,aAAa,oBAAoB;AACtD,SAAS,aAAa,sBAAsB;AAC5C,SAAS,cAAc;AACvB,SAAS,qBAAqB,iCAAiC,6BAA6B,gCAAgC,6BAA6B;AACzJ,SAAS,6BAA6B;AACtC,SAAS,UAAU,uBAAuB;AAC1C,SAAS,iBAAiB,mCAAmC;AAC7D,SAAS,oCAAoC;AAC7C,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAQ3B,IAAM,kBAAN,cAA8B,WAAkD;AAAA,EAQtF,YACkB,gBACgC,+BAChB,eACG,kBACI,sBACvC;AACD,UAAM;AANW;AACgC;AAChB;AACG;AACI;AAIxC,SAAK,cAAc;AAEnB,SAAK,UAAU,iBAAiB,kBAAkB,MAAM,KAAK,cAAc,CAAC,CAAC;AAC7E,SAAK,UAAU,qBAAqB,yBAAyB,CAAC,MAAM;AACnE,UAAI,EAAE,qBAAqB,gBAAgB,sBAAsB,GAAG;AACnE,aAAK,cAAc;AAAA,MACpB;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAlDD,OAyBuF;AAAA;AAAA;AAAA,EAEtF,OAAO,KAAa;AAAA,EAEZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,sBAAmD,oBAAI,IAAI;AAAA,EAqB3D,gBAAgB;AACvB,UAAM,iBAAiB,KAAK,qBAAqB,SAAS,gBAAgB,sBAAsB;AAChG,QAAI,KAAK,YAAY,CAAC,kBAAkB,SAAS,QAAQ,KAAK,iBAAiB,UAAU,CAAC,IAAI;AAC7F,WAAK,UAAU;AACf,WAAK,SAAS;AAAA,IACf,WAAW,CAAC,KAAK,WAAW,kBAAkB,CAAC,SAAS,QAAQ,KAAK,iBAAiB,UAAU,CAAC,GAAG;AACnG,WAAK,UAAU;AACf,UAAI,CAAC,KAAK,WAAW;AACpB,aAAK,YAAY;AACjB,aAAK,UAAU,MAAM;AAAA,UACpB,KAAK,8BAA8B;AAAA,UAAsB;AAAA,QAC1D,EAAE,CAAC,MAAM,KAAK,2BAA2B,CAAC,CAAC,CAAC;AAAA,MAC7C;AAAA,IACD;AAAA,EACD;AAAA,EAIQ,2BAA2B,SAA4E;AAC9G,QAAI,CAAC,KAAK,SAAS;AAClB;AAAA,IACD;AAEA,UAAM,UAAU,oBAAI,IAAY;AAChC,eAAW,KAAK,QAAQ,QAAQ,GAAG;AAElC,YAAM,cAAc,KAAK,eAAe,WAAW;AACnD,UAAI,EAAE,SAAS,sBAAsB,QAAQ,eAAe,EAAE,gBAAgB,WAAW,KAAK,CAAC,QAAQ,IAAI,EAAE,UAAU,GAAG;AACzH,gBAAQ,IAAI,EAAE,UAAU;AACxB,YAAI,CAAC,CAAC,EAAE,SAAS;AAEhB,eAAK,MAAM,EAAE,UAAU;AAAA,QACxB,OAAO;AACN,eAAK,eAAe,EAAE,UAAU;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,WAAW;AAClB,eAAW,UAAU,KAAK,oBAAoB,KAAK,GAAG;AACrD,WAAK,MAAM,MAAM;AAAA,IAClB;AAAA,EACD;AAAA,EAEO,MAAM,YAAoB;AAChC,UAAM,aAAa,KAAK,oBAAoB,IAAI,UAAU;AAC1D,QAAI,YAAY;AACf,iBAAW,cAAc,WAAW,aAAa;AAChD,mBAAW,QAAQ;AAAA,MACpB;AACA,WAAK,oBAAoB,OAAO,UAAU;AAAA,IAC3C;AAAA,EACD;AAAA,EAEQ,eAAe,YAAoB;AAC1C,QAAI,KAAK,oBAAoB,IAAI,UAAU,GAAG;AAE7C;AAAA,IACD;AAEA,UAAM,OAAO,KAAK,eAAe,gBAAgB,UAAU;AAC3D,QAAI,CAAC,QAAQ,KAAK,aAAa,SAAS,MAAM;AAC7C;AAAA,IACD;AAEA,UAAM,WAAW,KAAK,MAAM;AAC5B,QAAI,gBAAgB,qBAAqB,CAAC,SAAS,kBAAkB,UAAU,OAAO,UAAU;AAC/F,YAAM,cAA6B,CAAC;AACpC,YAAM,SAAS,KAAK,iBAAiB,SAAS,MAAM,SAAS,SAAS,MAAM,QAAQ;AACpF,WAAK,cAAc,UAAU,gBAAgB,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC;AACnE,kBAAY,KAAK,aAAa,MAAM,KAAK,cAAc,UAAU,gBAAgB,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;AACnG,WAAK,gBAAgB,IAAI,SAAS,OAAO,MAAS;AAClD,kBAAY,KAAK,aAAa,MAAM,KAAK,gBAAgB,IAAI,QAAW,MAAS,CAAC,CAAC;AACnF,kBAAY,KAAK,KAAK,MAAM,mBAAmB,MAAM;AACpD,YAAI,KAAK,MAAM,QAAQ,WAAW,GAAG;AACpC,eAAK,MAAM,UAAU;AAAA,QACtB;AAAA,MACD,CAAC,CAAC;AACF,kBAAY,KAAK,KAAK,MAAM,mBAAmB,MAAM;AACpD,aAAK,MAAM,UAAU;AAAA,MACtB,CAAC,CAAC;AACF,WAAK,oBAAoB,IAAI,YAAY,EAAE,SAAS,KAAK,KAAK,OAAO,SAAS,OAAO,YAAY,CAAC;AAAA,IACnG;AAAA,EACD;AAAA,EAEQ,iBAAiB,SAAiB,UAA+B;AACxE,WAAO;AAAA,MACN,UAAU;AAAA,MACV;AAAA,MACA,iBAAiB,SAAS,kBAAkB;AAAA,MAC5C,aAAa,SAAS,cAAc;AAAA,MACpC,eAAe,SAAS,gBAAgB;AAAA,MACxC,WAAW,SAAS,YAAY;AAAA,MAChC,QAAQ;AAAA,IACT;AAAA,EACD;AAAA,EAES,UAAU;AAClB,UAAM,QAAQ;AACd,SAAK,SAAS;AAAA,EACf;AAED;AAlIa,kBAAN;AAAA,EAUJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAbU;AAoIb,6BAA6B,gBAAgB,IAAI,eAAe;",
  "names": []
}
