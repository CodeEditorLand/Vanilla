import * as DOM from "vs/base/browser/dom";
import { IActionViewItem } from "vs/base/browser/ui/actionbar/actionbar";
import { IActionViewItemOptions } from "vs/base/browser/ui/actionbar/actionViewItems";
import { IAction } from "vs/base/common/actions";
import { CancellationToken } from "vs/base/common/cancellation";
import { Event } from "vs/base/common/event";
import { ITextResourceConfigurationService } from "vs/editor/common/services/textResourceConfiguration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILogService } from "vs/platform/log/common/log";
import { IEditorProgressService } from "vs/platform/progress/common/progress";
import { IStorageService } from "vs/platform/storage/common/storage";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IThemeService } from "vs/platform/theme/common/themeService";
import { EditorPane } from "vs/workbench/browser/parts/editor/editorPane";
import { IEditorOpenContext, IEditorPaneScrollPosition, IEditorPaneSelection, IEditorPaneWithScrolling } from "vs/workbench/common/editor";
import { IExtensionsWorkbenchService } from "vs/workbench/contrib/extensions/common/extensions";
import { INotebookEditorOptions, INotebookEditorPane, INotebookEditorViewState } from "vs/workbench/contrib/notebook/browser/notebookBrowser";
import { NotebookEditorWidget } from "vs/workbench/contrib/notebook/browser/notebookEditorWidget";
import { INotebookEditorService } from "vs/workbench/contrib/notebook/browser/services/notebookEditorService";
import { NotebookTextModel } from "vs/workbench/contrib/notebook/common/model/notebookTextModel";
import { NotebookEditorInput } from "vs/workbench/contrib/notebook/common/notebookEditorInput";
import { INotebookService } from "vs/workbench/contrib/notebook/common/notebookService";
import { INotebookEditorWorkerService } from "vs/workbench/contrib/notebook/common/services/notebookWorkerService";
import { IEditorGroup, IEditorGroupsService } from "vs/workbench/services/editor/common/editorGroupsService";
import { IEditorService } from "vs/workbench/services/editor/common/editorService";
import { IPreferencesService } from "vs/workbench/services/preferences/common/preferences";
import { IWorkingCopyBackupService } from "vs/workbench/services/workingCopy/common/workingCopyBackup";
export declare class NotebookEditor extends EditorPane implements INotebookEditorPane, IEditorPaneWithScrolling {
    private readonly _instantiationService;
    private readonly _editorService;
    private readonly _editorGroupService;
    private readonly _notebookWidgetService;
    private readonly _contextKeyService;
    private readonly _fileService;
    private readonly _editorProgressService;
    private readonly _notebookService;
    private readonly _extensionsWorkbenchService;
    private readonly _workingCopyBackupService;
    private readonly logService;
    private readonly _notebookEditorWorkerService;
    private readonly _preferencesService;
    static readonly ID: string;
    private readonly _editorMemento;
    private readonly _groupListener;
    private readonly _widgetDisposableStore;
    private _widget;
    private _rootElement;
    private _pagePosition?;
    private readonly _inputListener;
    private readonly _onDidFocusWidget;
    get onDidFocus(): Event<void>;
    private readonly _onDidBlurWidget;
    get onDidBlur(): Event<void>;
    private readonly _onDidChangeModel;
    readonly onDidChangeModel: Event<void>;
    private readonly _onDidChangeSelection;
    readonly onDidChangeSelection: any;
    protected readonly _onDidChangeScroll: any;
    readonly onDidChangeScroll: any;
    constructor(group: IEditorGroup, telemetryService: ITelemetryService, themeService: IThemeService, _instantiationService: IInstantiationService, storageService: IStorageService, _editorService: IEditorService, _editorGroupService: IEditorGroupsService, _notebookWidgetService: INotebookEditorService, _contextKeyService: IContextKeyService, _fileService: IFileService, configurationService: ITextResourceConfigurationService, _editorProgressService: IEditorProgressService, _notebookService: INotebookService, _extensionsWorkbenchService: IExtensionsWorkbenchService, _workingCopyBackupService: IWorkingCopyBackupService, logService: ILogService, _notebookEditorWorkerService: INotebookEditorWorkerService, _preferencesService: IPreferencesService);
    private _onDidChangeFileSystemProvider;
    private _onDidChangeInputCapabilities;
    private _updateReadonly;
    get textModel(): NotebookTextModel | undefined;
    get minimumWidth(): number;
    get maximumWidth(): number;
    set minimumWidth(value: number);
    set maximumWidth(value: number);
    get scopedContextKeyService(): IContextKeyService | undefined;
    protected createEditor(parent: HTMLElement): void;
    getActionViewItem(action: IAction, options: IActionViewItemOptions): IActionViewItem | undefined;
    getControl(): NotebookEditorWidget | undefined;
    setVisible(visible: boolean): void;
    protected setEditorVisible(visible: boolean): void;
    focus(): void;
    hasFocus(): boolean;
    setInput(input: NotebookEditorInput, options: INotebookEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken, noRetry?: boolean): Promise<void>;
    private _handlePerfMark;
    private _handlePromptRecommendations;
    clearInput(): void;
    setOptions(options: INotebookEditorOptions | undefined): void;
    protected saveState(): void;
    getViewState(): INotebookEditorViewState | undefined;
    getSelection(): IEditorPaneSelection | undefined;
    getScrollPosition(): IEditorPaneScrollPosition;
    setScrollPosition(scrollPosition: IEditorPaneScrollPosition): void;
    private _saveEditorViewState;
    private _loadNotebookEditorViewState;
    layout(dimension: DOM.Dimension, position: DOM.IDomPosition): void;
}
