{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/notebookDiffEditorBrowser.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CellLayoutState, ICellOutputViewModel, ICommonCellInfo, IGenericCellViewModel, IInsetRenderOutput } from '../notebookBrowser.js';\nimport { DiffElementCellViewModelBase, IDiffElementViewModelBase } from './diffElementViewModel.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { BareFontInfo } from '../../../../../editor/common/config/fontInfo.js';\nimport { DisposableStore, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { CodeEditorWidget } from '../../../../../editor/browser/widget/codeEditor/codeEditorWidget.js';\nimport { IMouseWheelEvent } from '../../../../../base/browser/mouseEvent.js';\nimport { RawContextKey } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { NotebookOptions } from '../notebookOptions.js';\nimport { NotebookLayoutInfo } from '../notebookViewEvents.js';\nimport { WorkbenchToolBar } from '../../../../../platform/actions/browser/toolbar.js';\nimport { DiffEditorWidget } from '../../../../../editor/browser/widget/diffEditor/diffEditorWidget.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { localize } from '../../../../../nls.js';\n\nexport enum DiffSide {\n\tOriginal = 0,\n\tModified = 1\n}\n\nexport interface IDiffCellInfo extends ICommonCellInfo {\n\tdiffElement: DiffElementCellViewModelBase;\n}\n\nexport interface INotebookTextDiffEditor {\n\tnotebookOptions: NotebookOptions;\n\treadonly textModel?: NotebookTextModel;\n\tonMouseUp: Event<{ readonly event: MouseEvent; readonly target: IDiffElementViewModelBase }>;\n\tonDidScroll: Event<void>;\n\tonDidDynamicOutputRendered: Event<{ cell: IGenericCellViewModel; output: ICellOutputViewModel }>;\n\tgetOverflowContainerDomNode(): HTMLElement;\n\tgetLayoutInfo(): NotebookLayoutInfo;\n\tgetScrollTop(): number;\n\tgetScrollHeight(): number;\n\tlayoutNotebookCell(cell: IDiffElementViewModelBase, height: number): void;\n\tcreateOutput(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: IDiffNestedCellViewModel, output: IInsetRenderOutput, getOffset: () => number, diffSide: DiffSide): void;\n\tshowInset(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: IDiffNestedCellViewModel, displayOutput: ICellOutputViewModel, diffSide: DiffSide): void;\n\tremoveInset(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: IDiffNestedCellViewModel, output: ICellOutputViewModel, diffSide: DiffSide): void;\n\thideInset(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: IDiffNestedCellViewModel, output: ICellOutputViewModel): void;\n\t/**\n\t * Trigger the editor to scroll from scroll event programmatically\n\t */\n\ttriggerScroll(event: IMouseWheelEvent): void;\n\tdelegateVerticalScrollbarPointerDown(browserEvent: PointerEvent): void;\n\tgetCellByInfo(cellInfo: ICommonCellInfo): IGenericCellViewModel;\n\tfocusNotebookCell(cell: IGenericCellViewModel, focus: 'editor' | 'container' | 'output'): Promise<void>;\n\tfocusNextNotebookCell(cell: IGenericCellViewModel, focus: 'editor' | 'container' | 'output'): Promise<void>;\n\tupdateOutputHeight(cellInfo: ICommonCellInfo, output: ICellOutputViewModel, height: number, isInit: boolean): void;\n\tdeltaCellOutputContainerClassNames(diffSide: DiffSide, cellId: string, added: string[], removed: string[]): void;\n\tpreviousChange(): void;\n\tnextChange(): void;\n}\n\nexport interface IDiffNestedCellViewModel {\n\n}\n\nexport interface CellDiffCommonRenderTemplate {\n\treadonly leftBorder: HTMLElement;\n\treadonly rightBorder: HTMLElement;\n\treadonly topBorder: HTMLElement;\n\treadonly bottomBorder: HTMLElement;\n}\n\nexport interface CellDiffPlaceholderRenderTemplate {\n\treadonly container: HTMLElement;\n\treadonly placeholder: HTMLElement;\n\treadonly body: HTMLElement;\n\treadonly marginOverlay: IDiffCellMarginOverlay;\n\treadonly elementDisposables: DisposableStore;\n}\n\nexport interface CellDiffSingleSideRenderTemplate extends CellDiffCommonRenderTemplate {\n\treadonly container: HTMLElement;\n\treadonly body: HTMLElement;\n\treadonly diffEditorContainer: HTMLElement;\n\treadonly diagonalFill: HTMLElement;\n\treadonly elementDisposables: DisposableStore;\n\treadonly cellHeaderContainer: HTMLElement;\n\treadonly editorContainer: HTMLElement;\n\treadonly sourceEditor: CodeEditorWidget;\n\treadonly metadataHeaderContainer: HTMLElement;\n\treadonly metadataInfoContainer: HTMLElement;\n\treadonly outputHeaderContainer: HTMLElement;\n\treadonly outputInfoContainer: HTMLElement;\n}\n\n\nexport interface NotebookDocumentDiffElementRenderTemplate extends CellDiffCommonRenderTemplate {\n\treadonly container: HTMLElement;\n\treadonly body: HTMLElement;\n\treadonly diffEditorContainer: HTMLElement;\n\treadonly elementDisposables: DisposableStore;\n\treadonly cellHeaderContainer: HTMLElement;\n\treadonly sourceEditor: DiffEditorWidget;\n\treadonly editorContainer: HTMLElement;\n\treadonly inputToolbarContainer: HTMLElement;\n\treadonly toolbar: WorkbenchToolBar;\n\treadonly marginOverlay: IDiffCellMarginOverlay;\n}\n\nexport interface IDiffCellMarginOverlay extends IDisposable {\n\tonAction: Event<void>;\n\tshow(): void;\n\thide(): void;\n}\n\nexport interface CellDiffSideBySideRenderTemplate extends CellDiffCommonRenderTemplate {\n\treadonly container: HTMLElement;\n\treadonly body: HTMLElement;\n\treadonly diffEditorContainer: HTMLElement;\n\treadonly elementDisposables: DisposableStore;\n\treadonly cellHeaderContainer: HTMLElement;\n\treadonly sourceEditor: DiffEditorWidget;\n\treadonly editorContainer: HTMLElement;\n\treadonly inputToolbarContainer: HTMLElement;\n\treadonly toolbar: WorkbenchToolBar;\n\treadonly metadataHeaderContainer: HTMLElement;\n\treadonly metadataInfoContainer: HTMLElement;\n\treadonly outputHeaderContainer: HTMLElement;\n\treadonly outputInfoContainer: HTMLElement;\n\treadonly marginOverlay: IDiffCellMarginOverlay;\n}\n\nexport interface IDiffElementLayoutInfo {\n\ttotalHeight: number;\n\twidth: number;\n\teditorHeight: number;\n\teditorMargin: number;\n\tmetadataHeight: number;\n\tcellStatusHeight: number;\n\tmetadataStatusHeight: number;\n\trawOutputHeight: number;\n\toutputMetadataHeight: number;\n\toutputTotalHeight: number;\n\toutputStatusHeight: number;\n\tbodyMargin: number;\n\tlayoutState: CellLayoutState;\n}\n\ntype IDiffElementSelfLayoutChangeEvent = { [K in keyof IDiffElementLayoutInfo]?: boolean };\n\nexport interface CellDiffViewModelLayoutChangeEvent extends IDiffElementSelfLayoutChangeEvent {\n\tfont?: BareFontInfo;\n\touterWidth?: boolean;\n\tmetadataEditor?: boolean;\n\toutputEditor?: boolean;\n\toutputView?: boolean;\n}\n\nexport const DIFF_CELL_MARGIN = 16;\nexport const NOTEBOOK_DIFF_CELL_INPUT = new RawContextKey<boolean>('notebook.diffEditor.cell.inputChanged', false);\nexport const NOTEBOOK_DIFF_METADATA = new RawContextKey<boolean>('notebook.diffEditor.metadataChanged', false);\nexport const NOTEBOOK_DIFF_CELL_IGNORE_WHITESPACE_KEY = 'notebook.diffEditor.cell.ignoreWhitespace';\nexport const NOTEBOOK_DIFF_CELL_IGNORE_WHITESPACE = new RawContextKey<boolean>(NOTEBOOK_DIFF_CELL_IGNORE_WHITESPACE_KEY, false);\nexport const NOTEBOOK_DIFF_CELL_PROPERTY = new RawContextKey<boolean>('notebook.diffEditor.cell.property.changed', false);\nexport const NOTEBOOK_DIFF_CELL_PROPERTY_EXPANDED = new RawContextKey<boolean>('notebook.diffEditor.cell.property.expanded', false);\nexport const NOTEBOOK_DIFF_CELLS_COLLAPSED = new RawContextKey<boolean>('notebook.diffEditor.allCollapsed', undefined, localize('notebook.diffEditor.allCollapsed', \"Whether all cells in notebook diff editor are collapsed\"));\nexport const NOTEBOOK_DIFF_HAS_UNCHANGED_CELLS = new RawContextKey<boolean>('notebook.diffEditor.hasUnchangedCells', undefined, localize('notebook.diffEditor.hasUnchangedCells', \"Whether there are unchanged cells in the notebook diff editor\"));\nexport const NOTEBOOK_DIFF_UNCHANGED_CELLS_HIDDEN = new RawContextKey<boolean>('notebook.diffEditor.unchangedCellsAreHidden', undefined, localize('notebook.diffEditor.unchangedCellsAreHidden', \"Whether the unchanged cells in the notebook diff editor are hidden\"));\nexport const NOTEBOOK_DIFF_ITEM_KIND = new RawContextKey<boolean>('notebook.diffEditor.item.kind', undefined, localize('notebook.diffEditor.item.kind', \"The kind of item in the notebook diff editor, Cell, Metadata or Output\"));\nexport const NOTEBOOK_DIFF_ITEM_DIFF_STATE = new RawContextKey<boolean>('notebook.diffEditor.item.state', undefined, localize('notebook.diffEditor.item.state', \"The diff state of item in the notebook diff editor, delete, insert, modified or unchanged\"));\n\nexport interface INotebookDiffViewModelUpdateEvent {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly elements: readonly IDiffElementViewModelBase[];\n}\n\nexport interface INotebookDiffViewModel extends IDisposable {\n\treadonly items: readonly IDiffElementViewModelBase[];\n\tonDidChangeItems: Event<INotebookDiffViewModelUpdateEvent>;\n\t/**\n\t * Computes the differences and generates the viewmodel.\n\t * If view models are generated, then the onDidChangeItems is triggered and will have a return value.\n\t * Else returns `undefined`\n\t * @param token\n\t */\n\tcomputeDiff(token: CancellationToken): Promise<{ firstChangeIndex: number } | undefined>;\n}\n"],
  "mappings": "AAKA,SAAS,iBAAiB,sBAAsB,iBAAiB,uBAAuB,0BAA0B;AAClH,SAAS,8BAA8B,iCAAiC;AACxE,SAAS,aAAa;AACtB,SAAS,oBAAoB;AAC7B,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,yBAAyB;AAClC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,gBAAgB;AAElB,IAAK,WAAL,kBAAKA,cAAL;AACN,EAAAA,oBAAA,cAAW,KAAX;AACA,EAAAA,oBAAA,cAAW,KAAX;AAFW,SAAAA;AAAA,GAAA;AAuIL,MAAM,mBAAmB;AACzB,MAAM,2BAA2B,IAAI,cAAuB,yCAAyC,KAAK;AAC1G,MAAM,yBAAyB,IAAI,cAAuB,uCAAuC,KAAK;AACtG,MAAM,2CAA2C;AACjD,MAAM,uCAAuC,IAAI,cAAuB,0CAA0C,KAAK;AACvH,MAAM,8BAA8B,IAAI,cAAuB,6CAA6C,KAAK;AACjH,MAAM,uCAAuC,IAAI,cAAuB,8CAA8C,KAAK;AAC3H,MAAM,gCAAgC,IAAI,cAAuB,oCAAoC,QAAW,SAAS,oCAAoC,yDAAyD,CAAC;AACvN,MAAM,oCAAoC,IAAI,cAAuB,yCAAyC,QAAW,SAAS,yCAAyC,+DAA+D,CAAC;AAC3O,MAAM,uCAAuC,IAAI,cAAuB,+CAA+C,QAAW,SAAS,+CAA+C,oEAAoE,CAAC;AAC/P,MAAM,0BAA0B,IAAI,cAAuB,iCAAiC,QAAW,SAAS,iCAAiC,wEAAwE,CAAC;AAC1N,MAAM,gCAAgC,IAAI,cAAuB,kCAAkC,QAAW,SAAS,kCAAkC,2FAA2F,CAAC;",
  "names": ["DiffSide"]
}
