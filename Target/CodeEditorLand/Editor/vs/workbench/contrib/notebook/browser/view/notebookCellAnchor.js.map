{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/notebookCellAnchor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IListView } from \"../../../../../base/browser/ui/list/listView.js\";\nimport type { Event } from \"../../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../../base/common/lifecycle.js\";\nimport type { ScrollEvent } from \"../../../../../base/common/scrollable.js\";\nimport type { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport {\n\tCellKind,\n\tNotebookCellExecutionState,\n\tNotebookSetting,\n} from \"../../common/notebookCommon.js\";\nimport type { INotebookExecutionStateService } from \"../../common/notebookExecutionStateService.js\";\nimport { CellFocusMode, type ICellViewModel } from \"../notebookBrowser.js\";\nimport type { CodeCellViewModel } from \"../viewModel/codeCellViewModel.js\";\nimport type { CellViewModel } from \"../viewModel/notebookViewModelImpl.js\";\n\nexport class NotebookCellAnchor implements IDisposable {\n\tprivate stopAnchoring = false;\n\tprivate executionWatcher: IDisposable | undefined;\n\tprivate scrollWatcher: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly notebookExecutionStateService: INotebookExecutionStateService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly scrollEvent: Event<ScrollEvent>,\n\t) {}\n\n\tpublic shouldAnchor(\n\t\tcellListView: IListView<CellViewModel>,\n\t\tfocusedIndex: number,\n\t\theightDelta: number,\n\t\texecutingCellUri: ICellViewModel,\n\t) {\n\t\tif (\n\t\t\tcellListView.element(focusedIndex).focusMode ===\n\t\t\tCellFocusMode.Editor\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.stopAnchoring) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst newFocusBottom =\n\t\t\tcellListView.elementTop(focusedIndex) +\n\t\t\tcellListView.elementHeight(focusedIndex) +\n\t\t\theightDelta;\n\t\tconst viewBottom =\n\t\t\tcellListView.renderHeight + cellListView.getScrollTop();\n\t\tconst focusStillVisible = viewBottom > newFocusBottom;\n\t\tconst allowScrolling =\n\t\t\tthis.configurationService.getValue(\n\t\t\t\tNotebookSetting.scrollToRevealCell,\n\t\t\t) !== \"none\";\n\t\tconst growing = heightDelta > 0;\n\t\tconst autoAnchor = allowScrolling && growing && !focusStillVisible;\n\n\t\tif (autoAnchor) {\n\t\t\tthis.watchAchorDuringExecution(executingCellUri);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic watchAchorDuringExecution(executingCell: ICellViewModel) {\n\t\t// anchor while the cell is executing unless the user scrolls up.\n\t\tif (\n\t\t\t!this.executionWatcher &&\n\t\t\texecutingCell.cellKind === CellKind.Code\n\t\t) {\n\t\t\tconst executionState =\n\t\t\t\tthis.notebookExecutionStateService.getCellExecution(\n\t\t\t\t\texecutingCell.uri,\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\texecutionState &&\n\t\t\t\texecutionState.state === NotebookCellExecutionState.Executing\n\t\t\t) {\n\t\t\t\tthis.executionWatcher = (\n\t\t\t\t\texecutingCell as CodeCellViewModel\n\t\t\t\t).onDidStopExecution(() => {\n\t\t\t\t\tthis.executionWatcher?.dispose();\n\t\t\t\t\tthis.executionWatcher = undefined;\n\t\t\t\t\tthis.scrollWatcher?.dispose();\n\t\t\t\t\tthis.stopAnchoring = false;\n\t\t\t\t});\n\t\t\t\tthis.scrollWatcher = this.scrollEvent((scrollEvent) => {\n\t\t\t\t\tif (scrollEvent.scrollTop < scrollEvent.oldScrollTop) {\n\t\t\t\t\t\tthis.stopAnchoring = true;\n\t\t\t\t\t\tthis.scrollWatcher?.dispose();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.executionWatcher?.dispose();\n\t\tthis.scrollWatcher?.dispose();\n\t}\n}\n"],
  "mappings": ";;AAUA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEP,SAAS,qBAA0C;AAI5C,MAAM,mBAA0C;AAAA,EAKtD,YACkB,+BACA,sBACA,aAChB;AAHgB;AACA;AACA;AAAA,EACf;AAAA,EA7BJ,OAoBuD;AAAA;AAAA;AAAA,EAC9C,gBAAgB;AAAA,EAChB;AAAA,EACA;AAAA,EAQD,aACN,cACA,cACA,aACA,kBACC;AACD,QACC,aAAa,QAAQ,YAAY,EAAE,cACnC,cAAc,QACb;AACD,aAAO;AAAA,IACR;AACA,QAAI,KAAK,eAAe;AACvB,aAAO;AAAA,IACR;AAEA,UAAM,iBACL,aAAa,WAAW,YAAY,IACpC,aAAa,cAAc,YAAY,IACvC;AACD,UAAM,aACL,aAAa,eAAe,aAAa,aAAa;AACvD,UAAM,oBAAoB,aAAa;AACvC,UAAM,iBACL,KAAK,qBAAqB;AAAA,MACzB,gBAAgB;AAAA,IACjB,MAAM;AACP,UAAM,UAAU,cAAc;AAC9B,UAAM,aAAa,kBAAkB,WAAW,CAAC;AAEjD,QAAI,YAAY;AACf,WAAK,0BAA0B,gBAAgB;AAC/C,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA,EAEO,0BAA0B,eAA+B;AAE/D,QACC,CAAC,KAAK,oBACN,cAAc,aAAa,SAAS,MACnC;AACD,YAAM,iBACL,KAAK,8BAA8B;AAAA,QAClC,cAAc;AAAA,MACf;AACD,UACC,kBACA,eAAe,UAAU,2BAA2B,WACnD;AACD,aAAK,mBACJ,cACC,mBAAmB,MAAM;AAC1B,eAAK,kBAAkB,QAAQ;AAC/B,eAAK,mBAAmB;AACxB,eAAK,eAAe,QAAQ;AAC5B,eAAK,gBAAgB;AAAA,QACtB,CAAC;AACD,aAAK,gBAAgB,KAAK,YAAY,CAAC,gBAAgB;AACtD,cAAI,YAAY,YAAY,YAAY,cAAc;AACrD,iBAAK,gBAAgB;AACrB,iBAAK,eAAe,QAAQ;AAAA,UAC7B;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,kBAAkB,QAAQ;AAC/B,SAAK,eAAe,QAAQ;AAAA,EAC7B;AACD;",
  "names": []
}
