var u=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var h=(a,l,e,o)=>{for(var t=o>1?void 0:o?v(l,e):l,i=a.length-1,r;i>=0;i--)(r=a[i])&&(t=(o?r(l,e,t):r(t))||t);return o&&t&&u(l,e,t),t},p=(a,l)=>(e,o)=>l(e,o,a);import{Throttler as b}from"../../../../../../base/common/async.js";import{CancellationTokenSource as m}from"../../../../../../base/common/cancellation.js";import{Disposable as _,toDisposable as C}from"../../../../../../base/common/lifecycle.js";import{INotebookCellStatusBarService as k}from"../../../common/notebookCellStatusBarService.js";import{registerNotebookContribution as S}from"../../notebookEditorExtensions.js";import{NotebookVisibleCellObserver as I}from"./notebookVisibleCellObserver.js";let d=class extends _{constructor(e,o){super();this._notebookEditor=e;this._notebookCellStatusBarService=o;this._observer=this._register(new I(this._notebookEditor)),this._register(this._observer.onDidChangeVisibleCells(this._updateVisibleCells,this)),this._updateEverything(),this._register(this._notebookCellStatusBarService.onDidChangeProviders(this._updateEverything,this)),this._register(this._notebookCellStatusBarService.onDidChangeItems(this._updateEverything,this))}static id="workbench.notebook.statusBar.contributed";_visibleCells=new Map;_observer;_updateEverything(){const e=this._observer.visibleCells.filter(s=>!this._visibleCells.has(s.handle)),o=new Set(this._observer.visibleCells.map(s=>s.handle)),t=Array.from(this._visibleCells.keys()),i=t.filter(s=>!o.has(s)),r=t.filter(s=>o.has(s));this._updateVisibleCells({added:e,removed:i.map(s=>({handle:s}))}),r.forEach(s=>this._visibleCells.get(s)?.update())}_updateVisibleCells(e){const o=this._notebookEditor.getViewModel();if(o){for(const t of e.added){const i=new g(o,t,this._notebookCellStatusBarService);this._visibleCells.set(t.handle,i)}for(const t of e.removed)this._visibleCells.get(t.handle)?.dispose(),this._visibleCells.delete(t.handle)}}dispose(){super.dispose(),this._visibleCells.forEach(e=>e.dispose()),this._visibleCells.clear()}};d=h([p(1,k)],d);class g extends _{constructor(e,o,t){super();this._notebookViewModel=e;this._cell=o;this._notebookCellStatusBarService=t;this._register(C(()=>this._activeToken?.dispose(!0))),this._updateSoon(),this._register(this._cell.model.onDidChangeContent(()=>this._updateSoon())),this._register(this._cell.model.onDidChangeLanguage(()=>this._updateSoon())),this._register(this._cell.model.onDidChangeMetadata(()=>this._updateSoon())),this._register(this._cell.model.onDidChangeInternalMetadata(()=>this._updateSoon())),this._register(this._cell.model.onDidChangeOutputs(()=>this._updateSoon()))}_currentItemIds=[];_currentItemLists=[];_activeToken;_isDisposed=!1;_updateThrottler=this._register(new b);update(){this._updateSoon()}_updateSoon(){setTimeout(()=>{this._isDisposed||this._updateThrottler.queue(()=>this._update())},0)}async _update(){const e=this._notebookViewModel.getCellIndex(this._cell),o=this._notebookViewModel.notebookDocument.uri,t=this._notebookViewModel.notebookDocument.viewType;this._activeToken?.dispose(!0);const i=this._activeToken=new m,r=await this._notebookCellStatusBarService.getStatusBarItemsForCell(o,e,t,i.token);if(i.token.isCancellationRequested){r.forEach(n=>n.dispose&&n.dispose());return}const s=r.flatMap(n=>n.items),c=this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds,[{handle:this._cell.handle,items:s}]);this._currentItemLists.forEach(n=>n.dispose&&n.dispose()),this._currentItemLists=r,this._currentItemIds=c}dispose(){super.dispose(),this._isDisposed=!0,this._activeToken?.dispose(!0),this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds,[{handle:this._cell.handle,items:[]}]),this._currentItemLists.forEach(e=>e.dispose&&e.dispose())}}S(d.id,d);export{d as ContributedStatusBarItemController};
