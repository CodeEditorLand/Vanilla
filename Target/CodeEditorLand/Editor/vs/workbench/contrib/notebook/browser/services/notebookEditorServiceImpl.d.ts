import { Dimension } from "vs/base/browser/dom";
import { CodeWindow } from "vs/base/browser/window";
import { URI } from "vs/base/common/uri";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IInstantiationService, ServicesAccessor } from "vs/platform/instantiation/common/instantiation";
import { IEditorProgressService } from "vs/platform/progress/common/progress";
import { INotebookEditor, INotebookEditorCreationOptions } from "vs/workbench/contrib/notebook/browser/notebookBrowser";
import { NotebookEditorWidget } from "vs/workbench/contrib/notebook/browser/notebookEditorWidget";
import { IBorrowValue, INotebookEditorService } from "vs/workbench/contrib/notebook/browser/services/notebookEditorService";
import { NotebookEditorInput } from "vs/workbench/contrib/notebook/common/notebookEditorInput";
import { IEditorGroupsService } from "vs/workbench/services/editor/common/editorGroupsService";
import { IEditorService } from "vs/workbench/services/editor/common/editorService";
export declare class NotebookEditorWidgetService implements INotebookEditorService {
    private readonly editorGroupService;
    private readonly instantiationService;
    readonly _serviceBrand: undefined;
    private _tokenPool;
    private readonly _disposables;
    private readonly _notebookEditors;
    private readonly groupListener;
    private readonly _onNotebookEditorAdd;
    private readonly _onNotebookEditorsRemove;
    readonly onDidAddNotebookEditor: any;
    readonly onDidRemoveNotebookEditor: any;
    private readonly _borrowableEditors;
    constructor(editorGroupService: IEditorGroupsService, editorService: IEditorService, contextKeyService: IContextKeyService, instantiationService: IInstantiationService);
    dispose(): void;
    private _disposeWidget;
    private _allowWidgetMove;
    retrieveExistingWidgetFromURI(resource: URI): IBorrowValue<NotebookEditorWidget> | undefined;
    retrieveAllExistingWidgets(): IBorrowValue<NotebookEditorWidget>[];
    retrieveWidget(accessor: ServicesAccessor, groupId: number, input: NotebookEditorInput, creationOptions?: INotebookEditorCreationOptions, initialDimension?: Dimension, codeWindow?: CodeWindow): IBorrowValue<NotebookEditorWidget>;
    protected createWidget(editorGroupContextKeyService: IContextKeyService, editorGroupEditorProgressService: IEditorProgressService, creationOptions?: INotebookEditorCreationOptions, codeWindow?: CodeWindow, initialDimension?: Dimension): any;
    private _createBorrowValue;
    addNotebookEditor(editor: INotebookEditor): void;
    removeNotebookEditor(editor: INotebookEditor): void;
    getNotebookEditor(editorId: string): INotebookEditor | undefined;
    listNotebookEditors(): readonly INotebookEditor[];
}
