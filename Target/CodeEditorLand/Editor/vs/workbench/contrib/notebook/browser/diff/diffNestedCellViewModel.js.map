{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/diffNestedCellViewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { PrefixSumComputer } from '../../../../../editor/common/model/prefixSumComputer.js';\nimport { IDiffNestedCellViewModel } from './notebookDiffEditorBrowser.js';\nimport { ICellOutputViewModel, IGenericCellViewModel } from '../notebookBrowser.js';\nimport { CellViewModelStateChangeEvent } from '../notebookViewEvents.js';\nimport { CellOutputViewModel } from '../viewModel/cellOutputViewModel.js';\nimport { NotebookCellTextModel } from '../../common/model/notebookCellTextModel.js';\nimport { INotebookService } from '../../common/notebookService.js';\n\nexport class DiffNestedCellViewModel extends Disposable implements IDiffNestedCellViewModel, IGenericCellViewModel {\n\tprivate _id: string;\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget outputs() {\n\t\treturn this.textModel.outputs;\n\t}\n\n\tget language() {\n\t\treturn this.textModel.language;\n\t}\n\n\tget metadata() {\n\t\treturn this.textModel.metadata;\n\t}\n\n\tget uri() {\n\t\treturn this.textModel.uri;\n\t}\n\n\tget handle() {\n\t\treturn this.textModel.handle;\n\t}\n\n\tprotected readonly _onDidChangeState: Emitter<CellViewModelStateChangeEvent> = this._register(new Emitter<CellViewModelStateChangeEvent>());\n\n\tprivate _hoveringOutput: boolean = false;\n\tpublic get outputIsHovered(): boolean {\n\t\treturn this._hoveringOutput;\n\t}\n\n\tpublic set outputIsHovered(v: boolean) {\n\t\tthis._hoveringOutput = v;\n\t\tthis._onDidChangeState.fire({ outputIsHoveredChanged: true });\n\t}\n\n\tprivate _focusOnOutput: boolean = false;\n\tpublic get outputIsFocused(): boolean {\n\t\treturn this._focusOnOutput;\n\t}\n\n\tpublic set outputIsFocused(v: boolean) {\n\t\tthis._focusOnOutput = v;\n\t\tthis._onDidChangeState.fire({ outputIsFocusedChanged: true });\n\t}\n\n\tprivate _focusInputInOutput: boolean = false;\n\tpublic get inputInOutputIsFocused(): boolean {\n\t\treturn this._focusInputInOutput;\n\t}\n\n\tpublic set inputInOutputIsFocused(v: boolean) {\n\t\tthis._focusInputInOutput = v;\n\t}\n\n\tprivate _outputViewModels: ICellOutputViewModel[];\n\n\tget outputsViewModels() {\n\t\treturn this._outputViewModels;\n\t}\n\n\tprotected _outputCollection: number[] = [];\n\tprotected _outputsTop: PrefixSumComputer | null = null;\n\n\tprotected readonly _onDidChangeOutputLayout = this._register(new Emitter<void>());\n\treadonly onDidChangeOutputLayout = this._onDidChangeOutputLayout.event;\n\n\tconstructor(\n\t\treadonly textModel: NotebookCellTextModel,\n\t\t@INotebookService private _notebookService: INotebookService\n\t) {\n\t\tsuper();\n\t\tthis._id = generateUuid();\n\n\t\tthis._outputViewModels = this.textModel.outputs.map(output => new CellOutputViewModel(this, output, this._notebookService));\n\t\tthis._register(this.textModel.onDidChangeOutputs((splice) => {\n\t\t\tthis._outputCollection.splice(splice.start, splice.deleteCount, ...splice.newOutputs.map(() => 0));\n\t\t\tconst removed = this._outputViewModels.splice(splice.start, splice.deleteCount, ...splice.newOutputs.map(output => new CellOutputViewModel(this, output, this._notebookService)));\n\t\t\tremoved.forEach(vm => vm.dispose());\n\n\t\t\tthis._outputsTop = null;\n\t\t\tthis._onDidChangeOutputLayout.fire();\n\t\t}));\n\t\tthis._outputCollection = new Array(this.textModel.outputs.length);\n\t}\n\n\tprivate _ensureOutputsTop() {\n\t\tif (!this._outputsTop) {\n\t\t\tconst values = new Uint32Array(this._outputCollection.length);\n\t\t\tfor (let i = 0; i < this._outputCollection.length; i++) {\n\t\t\t\tvalues[i] = this._outputCollection[i];\n\t\t\t}\n\n\t\t\tthis._outputsTop = new PrefixSumComputer(values);\n\t\t}\n\t}\n\n\tgetOutputOffset(index: number): number {\n\t\tthis._ensureOutputsTop();\n\n\t\tif (index >= this._outputCollection.length) {\n\t\t\tthrow new Error('Output index out of range!');\n\t\t}\n\n\t\treturn this._outputsTop!.getPrefixSum(index - 1);\n\t}\n\n\tupdateOutputHeight(index: number, height: number): void {\n\t\tif (index >= this._outputCollection.length) {\n\t\t\tthrow new Error('Output index out of range!');\n\t\t}\n\n\t\tthis._ensureOutputsTop();\n\t\tthis._outputCollection[index] = height;\n\t\tif (this._outputsTop!.setValue(index, height)) {\n\t\t\tthis._onDidChangeOutputLayout.fire();\n\t\t}\n\t}\n\n\tgetOutputTotalHeight() {\n\t\tthis._ensureOutputsTop();\n\n\t\treturn this._outputsTop?.getTotalSum() ?? 0;\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._outputViewModels.forEach(output => {\n\t\t\toutput.dispose();\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
