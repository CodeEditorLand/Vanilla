var R=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var g=(r,s,e,o)=>{for(var t=o>1?void 0:o?F(s,e):s,i=r.length-1,n;i>=0;i--)(n=r[i])&&(t=(o?n(s,e,t):n(t))||t);return o&&t&&R(s,e,t),t},c=(r,s)=>(e,o)=>s(e,o,r);import{RunOnceScheduler as U,disposableTimeout as y}from"../../../../../../base/common/async.js";import{Disposable as E,MutableDisposable as P,dispose as C}from"../../../../../../base/common/lifecycle.js";import{language as L}from"../../../../../../base/common/platform.js";import{ThemeIcon as B}from"../../../../../../base/common/themables.js";import{localize as u}from"../../../../../../nls.js";import{IInstantiationService as M}from"../../../../../../platform/instantiation/common/instantiation.js";import{themeColorFromId as w}from"../../../../../../platform/theme/common/themeService.js";import{CellStatusbarAlignment as k,NotebookCellExecutionState as m}from"../../../common/notebookCommon.js";import{INotebookExecutionStateService as T,NotebookExecutionType as O}from"../../../common/notebookExecutionStateService.js";import{INotebookService as G}from"../../../common/notebookService.js";import{registerNotebookContribution as D}from"../../notebookEditorExtensions.js";import{cellStatusIconError as X,cellStatusIconSuccess as j}from"../../notebookEditorWidget.js";import{errorStateIcon as z,executingStateIcon as V,pendingStateIcon as J,successStateIcon as q}from"../../notebookIcons.js";import{NotebookVisibleCellObserver as H}from"./notebookVisibleCellObserver.js";function h(r,s=!0){if(s&&r<1e3)return`${r}ms`;const e=Math.floor(r/1e3/60),o=Math.floor(r/1e3)%60,t=Math.floor(r%1e3/100);return e>0?`${e}m ${o}.${t}s`:`${o}.${t}s`}class A extends E{constructor(e,o){super();this._notebookEditor=e;this._itemFactory=o;this._observer=this._register(new H(this._notebookEditor)),this._register(this._observer.onDidChangeVisibleCells(this._updateVisibleCells,this)),this._updateEverything()}_visibleCells=new Map;_observer;_updateEverything(){this._visibleCells.forEach(C),this._visibleCells.clear(),this._updateVisibleCells({added:this._observer.visibleCells,removed:[]})}_updateVisibleCells(e){const o=this._notebookEditor.getViewModel();if(o){for(const t of e.removed)this._visibleCells.get(t.handle)?.dispose(),this._visibleCells.delete(t.handle);for(const t of e.added)this._visibleCells.set(t.handle,this._itemFactory(o,t))}}dispose(){super.dispose(),this._visibleCells.forEach(C),this._visibleCells.clear()}}let p=class extends E{static id="workbench.notebook.statusBar.execState";constructor(s,e){super(),this._register(new A(s,(o,t)=>e.createInstance(l,o,t)))}};p=g([c(1,M)],p),D(p.id,p);let l=class extends E{constructor(e,o,t){super();this._notebookViewModel=e;this._cell=o;this._executionStateService=t;this._update(),this._register(this._executionStateService.onDidChangeExecution(i=>{i.type===O.cell&&i.affectsCell(this._cell.uri)&&this._update()})),this._register(this._cell.model.onDidChangeInternalMetadata(()=>this._update()))}static MIN_SPINNER_TIME=500;_currentItemIds=[];_showedExecutingStateTime;_clearExecutingStateTimer=this._register(new P);async _update(){const e=this._getItemsForCell();Array.isArray(e)&&(this._currentItemIds=this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds,[{handle:this._cell.handle,items:e}]))}_getItemsForCell(){const e=this._executionStateService.getCellExecution(this._cell.uri);if(e?.state===m.Executing&&typeof this._showedExecutingStateTime!="number")this._showedExecutingStateTime=Date.now();else if(e?.state!==m.Executing&&typeof this._showedExecutingStateTime=="number"){const t=l.MIN_SPINNER_TIME-(Date.now()-this._showedExecutingStateTime);if(t>0){this._clearExecutingStateTimer.value||(this._clearExecutingStateTimer.value=y(()=>{this._showedExecutingStateTime=void 0,this._clearExecutingStateTimer.clear(),this._update()},t));return}else this._showedExecutingStateTime=void 0}return this._getItemForState(e,this._cell.internalMetadata)}_getItemForState(e,o){const t=e?.state,{lastRunSuccess:i}=o;return!t&&i?[{text:`$(${q.id})`,color:w(j),tooltip:u("notebook.cell.status.success","Success"),alignment:k.Left,priority:Number.MAX_SAFE_INTEGER}]:!t&&i===!1?[{text:`$(${z.id})`,color:w(X),tooltip:u("notebook.cell.status.failed","Failed"),alignment:k.Left,priority:Number.MAX_SAFE_INTEGER}]:t===m.Pending||t===m.Unconfirmed?[{text:`$(${J.id})`,tooltip:u("notebook.cell.status.pending","Pending"),alignment:k.Left,priority:Number.MAX_SAFE_INTEGER}]:t===m.Executing?[{text:`$(${(e?.didPause?V:B.modify(V,"spin")).id})`,tooltip:u("notebook.cell.status.executing","Executing"),alignment:k.Left,priority:Number.MAX_SAFE_INTEGER}]:[]}dispose(){super.dispose(),this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds,[{handle:this._cell.handle,items:[]}])}};l=g([c(2,T)],l);let _=class extends E{static id="workbench.notebook.statusBar.execTimer";constructor(s,e){super(),this._register(new A(s,(o,t)=>e.createInstance(a,o,t)))}};_=g([c(1,M)],_),D(_.id,_);const K=200;let a=class extends E{constructor(e,o,t,i){super();this._notebookViewModel=e;this._cell=o;this._executionStateService=t;this._notebookService=i;this._scheduler=this._register(new U(()=>this._update(),a.UPDATE_INTERVAL)),this._update(),this._register(this._cell.model.onDidChangeInternalMetadata(()=>this._update()))}static UPDATE_INTERVAL=100;_currentItemIds=[];_scheduler;_deferredUpdate;async _update(){let e;const o=this._executionStateService.getCellExecution(this._cell.uri),t=o?.state,i=this._cell.internalMetadata.runStartTime,n=this._cell.internalMetadata.runStartTimeAdjustment??0,d=this._cell.internalMetadata.runEndTime;if(o?.didPause)e=void 0;else if(t===m.Executing)typeof i=="number"&&(e=this._getTimeItem(i,Date.now(),n),this._scheduler.schedule());else if(!t&&typeof i=="number"&&typeof d=="number"){const b=Date.now()-i+n,f=d-i,S=this._cell.internalMetadata.renderDuration??{};e=this._getTimeItem(i,d,void 0,{timerDuration:b,executionDuration:f,renderDuration:S})}const I=e?[e]:[];!I.length&&o?this._deferredUpdate||(this._deferredUpdate=y(()=>{this._deferredUpdate=void 0,this._currentItemIds=this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds,[{handle:this._cell.handle,items:I}])},K)):(this._deferredUpdate?.dispose(),this._deferredUpdate=void 0,this._currentItemIds=this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds,[{handle:this._cell.handle,items:I}]))}_getTimeItem(e,o,t=0,i){const n=o-e+t;let d;if(i){const I=new Date(o).toLocaleTimeString(L),{renderDuration:b,executionDuration:f,timerDuration:S}=i;let N="";for(const v in b){const x=this._notebookService.getRendererInfo(v),$=encodeURIComponent(JSON.stringify({extensionId:x?.extensionId.value??"",issueBody:`Auto-generated text from notebook cell performance. The duration for the renderer, ${x?.displayName??v}, is slower than expected.
Execution Time: ${h(f)}
Renderer Duration: ${h(b[v])}
`}));N+=`- [${x?.displayName??v}](command:workbench.action.openIssueReporter?${$}) ${h(b[v])}
`}N+=`
*${u("notebook.cell.statusBar.timerTooltip.reportIssueFootnote","Use the links above to file an issue using the issue reporter.")}*
`,d={value:u("notebook.cell.statusBar.timerTooltip",`**Last Execution** {0}

**Execution Time** {1}

**Overhead Time** {2}

**Render Times**

{3}`,I,h(f),h(S-f),N),isTrusted:!0}}return{text:h(n,!1),alignment:k.Left,priority:Number.MAX_SAFE_INTEGER-5,tooltip:d}}dispose(){super.dispose(),this._deferredUpdate?.dispose(),this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds,[{handle:this._cell.handle,items:[]}])}};a=g([c(2,T),c(3,G)],a);export{p as ExecutionStateCellStatusBarContrib,A as NotebookStatusBarController,_ as TimerCellStatusBarContrib,h as formatCellDuration};
