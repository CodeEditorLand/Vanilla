import{KeyCode as p,KeyMod as f}from"../../../../../base/common/keyCodes.js";import{Mimes as ae}from"../../../../../base/common/mime.js";import{URI as F}from"../../../../../base/common/uri.js";import"../../../../../editor/browser/editorBrowser.js";import{Selection as q}from"../../../../../editor/common/core/selection.js";import{CommandExecutor as ce}from"../../../../../editor/common/cursor/cursor.js";import{EditorContextKeys as v}from"../../../../../editor/common/editorContextKeys.js";import{ILanguageService as se}from"../../../../../editor/common/languages/language.js";import{ILanguageConfigurationService as de}from"../../../../../editor/common/languages/languageConfigurationRegistry.js";import{TrackedRangeStickiness as ue}from"../../../../../editor/common/model.js";import{getIconClasses as ge}from"../../../../../editor/common/services/getIconClasses.js";import{IModelService as pe}from"../../../../../editor/common/services/model.js";import{LineCommentCommand as Ce,Type as me}from"../../../../../editor/contrib/comment/browser/lineCommentCommand.js";import{localize as l,localize2 as G}from"../../../../../nls.js";import{MenuId as b,registerAction2 as C}from"../../../../../platform/actions/common/actions.js";import{IConfigurationService as ke}from"../../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as a}from"../../../../../platform/contextkey/common/contextkey.js";import{InputFocusedContext as Ee,InputFocusedContextKey as y}from"../../../../../platform/contextkey/common/contextkeys.js";import{IDialogService as fe}from"../../../../../platform/dialogs/common/dialogs.js";import{IInstantiationService as be}from"../../../../../platform/instantiation/common/instantiation.js";import{KeybindingWeight as T}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{INotificationService as Ie}from"../../../../../platform/notification/common/notification.js";import{IQuickInputService as Q}from"../../../../../platform/quickinput/common/quickInput.js";import{IEditorService as Te}from"../../../../services/editor/common/editorService.js";import{ILanguageDetectionService as H}from"../../../../services/languageDetection/common/languageDetectionWorkerService.js";import{InlineChatController as z}from"../../../inlineChat/browser/inlineChatController.js";import{CTX_INLINE_CHAT_FOCUSED as Se}from"../../../inlineChat/common/inlineChat.js";import{CellEditType as L,CellKind as N,NotebookCellExecutionState as M,NotebookSetting as j}from"../../common/notebookCommon.js";import{NOTEBOOK_CELL_EDITABLE as I,NOTEBOOK_CELL_HAS_OUTPUTS as x,NOTEBOOK_CELL_IS_FIRST_OUTPUT as Oe,NOTEBOOK_CELL_LIST_FOCUSED as he,NOTEBOOK_CELL_MARKDOWN_EDIT_MODE as V,NOTEBOOK_CELL_TYPE as w,NOTEBOOK_EDITOR_EDITABLE as m,NOTEBOOK_EDITOR_FOCUSED as A,NOTEBOOK_HAS_OUTPUTS as Le,NOTEBOOK_IS_ACTIVE_EDITOR as X,NOTEBOOK_OUTPUT_FOCUSED as Ne,NOTEBOOK_OUTPUT_INPUT_FOCUSED as Y,NOTEBOOK_USE_CONSOLIDATED_OUTPUT_BUTTON as J}from"../../common/notebookContextKeys.js";import{INotebookExecutionStateService as P}from"../../common/notebookExecutionStateService.js";import{INotebookKernelService as Z}from"../../common/notebookKernelService.js";import"../../common/notebookRange.js";import{CellEditState as Ae,CHANGE_CELL_LANGUAGE as _e,DETECT_CELL_LANGUAGE as ve,getNotebookEditorFromEditorPane as ye,QUIT_EDIT_CELL_COMMAND_ID as $}from"../notebookBrowser.js";import*as _ from"../notebookIcons.js";import{changeCellToKind as ee,runDeleteAction as we}from"./cellOperations.js";import{CELL_TITLE_CELL_GROUP_ID as D,CELL_TITLE_OUTPUT_GROUP_ID as De,CellToolbarOrder as R,executeNotebookCondition as te,findTargetCellEditor as Me,NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT as oe,NotebookAction as ne,NotebookCellAction as S,NotebookMultiCellAction as xe}from"./coreActions.js";import{NotebookChangeTabDisplaySize as Pe,NotebookIndentationToSpacesAction as Re,NotebookIndentationToTabsAction as Ue,NotebookIndentUsingSpaces as Ke,NotebookIndentUsingTabs as Be}from"./notebookIndentationActions.js";const We="notebook.clearAllCellsOutputs",Fe="notebook.cell.edit",qe="notebook.cell.delete",Ge="notebook.cell.clearOutputs",Qe="notebook.selectIndentation",He="notebook.commentSelectedCells";C(class extends S{constructor(){super({id:Fe,title:l("notebookActions.editCell","Edit Cell"),keybinding:{when:a.and(he,a.not(y),m.isEqualTo(!0),v.hoverFocused.toNegated(),Y.toNegated()),primary:p.Enter,weight:T.WorkbenchContrib},menu:{id:b.NotebookCellTitle,when:a.and(m.isEqualTo(!0),w.isEqualTo("markup"),V.toNegated(),I),order:R.EditCell,group:D},icon:_.editIcon})}async runWithContext(t,e){if(!e.notebookEditor.hasModel()||e.notebookEditor.isReadOnly)return;await e.notebookEditor.focusNotebookCell(e.cell,"editor");const o=e.cell?Me(e,e.cell):void 0;o&&o.hasTextFocus()&&z.get(o)?.getWidgetPosition()?.lineNumber===o.getPosition()?.lineNumber&&z.get(o)?.focus()}});const ie=a.and(A,Ee,Se.toNegated());C(class extends S{constructor(){super({id:$,title:l("notebookActions.quitEdit","Stop Editing Cell"),menu:{id:b.NotebookCellTitle,when:a.and(w.isEqualTo("markup"),V,I),order:R.SaveCell,group:D},icon:_.stopEditIcon,keybinding:[{when:a.and(ie,v.hoverVisible.toNegated(),v.hasNonEmptySelection.toNegated(),v.hasMultipleSelections.toNegated()),primary:p.Escape,weight:oe-5},{when:a.and(A,Ne),primary:p.Escape,weight:T.WorkbenchContrib+5},{when:a.and(ie,w.isEqualTo("markup")),primary:f.WinCtrl|p.Enter,win:{primary:f.CtrlCmd|f.Alt|p.Enter},weight:oe-5}]})}async runWithContext(t,e){e.cell.cellKind===N.Markup&&e.cell.updateEditState(Ae.Preview,$),await e.notebookEditor.focusNotebookCell(e.cell,"container",{skipReveal:!0})}}),C(class extends S{constructor(){super({id:qe,title:l("notebookActions.deleteCell","Delete Cell"),keybinding:{primary:p.Delete,mac:{primary:f.CtrlCmd|p.Backspace},when:a.and(A,a.not(y),Y.toNegated()),weight:T.WorkbenchContrib},menu:[{id:b.NotebookCellDelete,when:m,group:D},{id:b.InteractiveCellDelete,group:D}],icon:_.deleteCellIcon})}async runWithContext(t,e){if(!e.notebookEditor.hasModel())return;let o;const i=t.get(P).getCellExecution(e.cell.uri)?.state,r=t.get(ke);if(i===M.Executing&&r.getValue(j.confirmDeleteRunningCell)){const c=t.get(fe),s=l("confirmDeleteButton","Delete");o=await c.confirm({type:"question",message:l("confirmDeleteButtonMessage","This cell is running, are you sure you want to delete it?"),primaryButton:s,checkbox:{label:l("doNotAskAgain","Do not ask me again")}})}else o={confirmed:!0};o.confirmed&&(o.checkboxChecked===!0&&await r.updateValue(j.confirmDeleteRunningCell,!1),we(e.notebookEditor,e.cell))}}),C(class extends S{constructor(){super({id:Ge,title:l("clearCellOutputs","Clear Cell Outputs"),menu:[{id:b.NotebookCellTitle,when:a.and(w.isEqualTo("code"),te,x,m,I,J.toNegated()),order:R.ClearCellOutput,group:De},{id:b.NotebookOutputToolbar,when:a.and(x,m,I,Oe,J)}],keybinding:{when:a.and(A,a.not(y),x,m,I),primary:f.Alt|p.Delete,weight:T.WorkbenchContrib},icon:_.clearIcon})}async runWithContext(t,e){const o=t.get(P),n=e.notebookEditor;if(!n.hasModel()||!n.textModel.length)return;const i=e.cell,r=n.textModel.cells.indexOf(i.model);if(r<0)return;const c=!n.isReadOnly;n.textModel.applyEdits([{editType:L.Output,index:r,outputs:[]}],!0,void 0,()=>{},void 0,c),o.getCellExecution(e.cell.uri)?.state!==M.Executing&&e.notebookEditor.textModel.applyEdits([{editType:L.PartialInternalMetadata,index:r,internalMetadata:{runStartTime:null,runStartTimeAdjustment:null,runEndTime:null,executionOrder:null,lastRunSuccess:null}}],!0,void 0,()=>{},void 0,c)}}),C(class extends ne{constructor(){super({id:We,title:l("clearAllCellsOutputs","Clear All Outputs"),precondition:Le,menu:[{id:b.EditorTitle,when:a.and(X,a.notEquals("config.notebook.globalToolbar",!0)),group:"navigation",order:0},{id:b.NotebookToolbar,when:a.and(te,a.equals("config.notebook.globalToolbar",!0)),group:"navigation/execute",order:10}],icon:_.clearIcon})}async runWithContext(t,e){const o=t.get(P),n=e.notebookEditor;if(!n.hasModel()||!n.textModel.length)return;const i=!n.isReadOnly;n.textModel.applyEdits(n.textModel.cells.map((c,s)=>({editType:L.Output,index:s,outputs:[]})),!0,void 0,()=>{},void 0,i);const r=n.textModel.cells.map((c,s)=>{if(o.getCellExecution(c.uri)?.state!==M.Executing)return{editType:L.PartialInternalMetadata,index:s,internalMetadata:{runStartTime:null,runStartTimeAdjustment:null,runEndTime:null,executionOrder:null,lastRunSuccess:null}}}).filter(c=>!!c);r.length&&e.notebookEditor.textModel.applyEdits(r,!0,void 0,()=>{},void 0,i)}}),C(class extends S{constructor(){super({id:_e,title:l("changeLanguage","Change Cell Language"),metadata:{description:l("changeLanguage","Change Cell Language"),args:[{name:"range",description:"The cell range",schema:{type:"object",required:["start","end"],properties:{start:{type:"number"},end:{type:"number"}}}},{name:"language",description:"The target cell language",schema:{type:"string"}}]}})}getCellContextFromArgs(t,e,...o){if(!e||typeof e.start!="number"||typeof e.end!="number"||e.start>=e.end)return;const n=o.length&&typeof o[0]=="string"?o[0]:void 0,i=this.getEditorContextFromArgsOrActive(t);if(!(!i||!i.notebookEditor.hasModel()||e.start>=i.notebookEditor.getLength()))return{notebookEditor:i.notebookEditor,cell:i.notebookEditor.cellAt(e.start),language:n}}async runWithContext(t,e){e.language?await this.setLanguage(e,e.language):await this.showLanguagePicker(t,e)}async showLanguagePicker(t,e){const o=[],n=[],i=t.get(se),r=t.get(pe),c=t.get(Q),s=t.get(H),k=t.get(Z);let O=e.notebookEditor.activeKernel?.supportedLanguages;if(!O){const E=k.getMatchingKernel(e.notebookEditor.textModel).all.flatMap(h=>h.supportedLanguages);O=E.length>0?E:i.getRegisteredLanguageIds()}new Set([...O,"markdown"]).forEach(g=>{let E;(e.cell.cellKind===N.Markup?g==="markdown":g===e.cell.language)?E=l("languageDescription","({0}) - Current Language",g):E=l("languageDescriptionConfigured","({0})",g);const h=i.getLanguageName(g);if(!h)return;const W={label:h,iconClasses:ge(r,i,this.getFakeResource(h,i)),description:E,languageId:g};g==="markdown"||g===e.cell.language?o.push(W):n.push(W)}),n.sort((g,E)=>g.description.localeCompare(E.description));const U={label:l("autoDetect","Auto Detect")},le=[U,{type:"separator",label:l("languagesPicks","languages (identifier)")},...o,{type:"separator"},...n],K=await c.pick(le,{placeHolder:l("pickLanguageToConfigure","Select Language Mode")}),B=K===U?await s.detectLanguage(e.cell.uri):K?.languageId;B&&await this.setLanguage(e,B)}async setLanguage(t,e){await re(e,t)}getFakeResource(t,e){let o;const n=e.getLanguageIdByLanguageName(t);if(n){const i=e.getExtensions(n);if(i.length)o=F.file(i[0]);else{const r=e.getFilenames(n);r.length&&(o=F.file(r[0]))}}return o}}),C(class extends S{constructor(){super({id:ve,title:G("detectLanguage","Accept Detected Language for Cell"),f1:!0,precondition:a.and(m,I),keybinding:{primary:p.KeyD|f.Alt|f.Shift,weight:T.WorkbenchContrib}})}async runWithContext(t,e){const o=t.get(H),n=t.get(Ie),c=[...t.get(Z).getSelectedOrSuggestedKernel(e.notebookEditor.textModel)?.supportedLanguages??[]];c.push("markdown");const s=await o.detectLanguage(e.cell.uri,c);s?re(s,e):n.warn(l("noDetection","Unable to detect cell language"))}});async function re(d,t){if(d==="markdown"&&t.cell?.language!=="markdown"){const e=t.notebookEditor.getCellIndex(t.cell);await ee(N.Markup,{cell:t.cell,notebookEditor:t.notebookEditor,ui:!0},"markdown",ae.markdown);const o=t.notebookEditor.cellAt(e);o&&await t.notebookEditor.focusNotebookCell(o,"editor")}else if(d!=="markdown"&&t.cell?.cellKind===N.Markup)await ee(N.Code,{cell:t.cell,notebookEditor:t.notebookEditor,ui:!0},d);else{const e=t.notebookEditor.textModel.cells.indexOf(t.cell.model);t.notebookEditor.textModel.applyEdits([{editType:L.CellLanguage,index:e,language:d}],!0,void 0,()=>{},void 0,!t.notebookEditor.isReadOnly)}}C(class extends ne{constructor(){super({id:Qe,title:G("selectNotebookIndentation","Select Indentation"),f1:!0,precondition:a.and(X,m,I)})}async runWithContext(t,e){await this.showNotebookIndentationPicker(t,e)}async showNotebookIndentationPicker(t,e){const o=t.get(Q),n=t.get(Te),i=t.get(be),r=ye(n.activeEditorPane);if(!r||r.isDisposed)return o.pick([{label:l("noNotebookEditor","No notebook editor active at this time")}]);if(r.isReadOnly)return o.pick([{label:l("noWritableCodeEditor","The active notebook editor is read-only.")}]);const c=[new Be,new Ke,new Pe,new Ue,new Re].map(k=>({id:k.desc.id,label:k.desc.title.toString(),run:()=>{i.invokeFunction(k.run)}}));c.splice(3,0,{type:"separator",label:l("indentConvert","convert file")}),c.unshift({type:"separator",label:l("indentView","change view")});const s=await o.pick(c,{placeHolder:l("pickAction","Select Action"),matchOnDetail:!0});s&&(s.run(),e.notebookEditor.focus())}}),C(class extends xe{constructor(){super({id:He,title:l("commentSelectedCells","Comment Selected Cells"),keybinding:{when:a.and(A,m,a.not(y)),primary:f.CtrlCmd|p.Slash,weight:T.WorkbenchContrib}})}async runWithContext(t,e){const o=t.get(de);e.selectedCells.forEach(async n=>{const i=await n.resolveTextModel(),r=n.commentOptions,c=new Ce(o,new q(1,1,i.getLineCount(),i.getLineMaxColumn(i.getLineCount())),i.getOptions().tabSize,me.Toggle,r.insertSpace??!0,r.ignoreEmptyLines??!0,!1),s=n.getSelections(),k=s.map(u=>i._setTrackedRange(null,u,ue.NeverGrowsWhenTypingAtEdges));ce.executeCommands(i,s,[c]);const O=k.map(u=>i._getTrackedRange(u)).filter(u=>!!u).map(u=>new q(u.startLineNumber,u.startColumn,u.endLineNumber,u.endColumn));n.setSelections(O??[])})}});export{Ge as CLEAR_CELL_OUTPUTS_COMMAND_ID,He as COMMENT_SELECTED_CELLS_ID,Qe as SELECT_NOTEBOOK_INDENTATION_ID};
