{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/notebookAccessibleView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { AccessibleViewProviderId, AccessibleViewType, AccessibleContentProvider } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { IAccessibleViewImplentation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { getNotebookEditorFromEditorPane } from './notebookBrowser.js';\nimport { NOTEBOOK_OUTPUT_FOCUSED } from '../common/notebookContextKeys.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nexport class NotebookAccessibleView implements IAccessibleViewImplentation {\n\treadonly priority = 100;\n\treadonly name = 'notebook';\n\treadonly type = AccessibleViewType.View;\n\treadonly when = ContextKeyExpr.and(NOTEBOOK_OUTPUT_FOCUSED, ContextKeyExpr.equals('resourceExtname', '.ipynb'));\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\treturn getAccessibleOutputProvider(editorService);\n\t}\n}\n\n\nexport function getAccessibleOutputProvider(editorService: IEditorService) {\n\tconst activePane = editorService.activeEditorPane;\n\tconst notebookEditor = getNotebookEditorFromEditorPane(activePane);\n\tconst notebookViewModel = notebookEditor?.getViewModel();\n\tconst selections = notebookViewModel?.getSelections();\n\tconst notebookDocument = notebookViewModel?.notebookDocument;\n\n\tif (!selections || !notebookDocument || !notebookEditor?.textModel) {\n\t\treturn;\n\t}\n\n\tconst viewCell = notebookViewModel.viewCells[selections[0].start];\n\tlet outputContent = '';\n\tconst decoder = new TextDecoder();\n\tfor (let i = 0; i < viewCell.outputsViewModels.length; i++) {\n\t\tconst outputViewModel = viewCell.outputsViewModels[i];\n\t\tconst outputTextModel = viewCell.model.outputs[i];\n\t\tconst [mimeTypes, pick] = outputViewModel.resolveMimeTypes(notebookEditor.textModel, undefined);\n\t\tconst mimeType = mimeTypes[pick].mimeType;\n\t\tlet buffer = outputTextModel.outputs.find(output => output.mime === mimeType);\n\n\t\tif (!buffer || mimeType.startsWith('image')) {\n\t\t\tbuffer = outputTextModel.outputs.find(output => !output.mime.startsWith('image'));\n\t\t}\n\n\t\tlet text = `${mimeType}`; // default in case we can't get the text value for some reason.\n\t\tif (buffer) {\n\t\t\tconst charLimit = 100_000;\n\t\t\ttext = decoder.decode(buffer.data.slice(0, charLimit).buffer);\n\n\t\t\tif (buffer.data.byteLength > charLimit) {\n\t\t\t\ttext = text + '...(truncated)';\n\t\t\t}\n\n\t\t\tif (mimeType.endsWith('error')) {\n\t\t\t\ttext = text.replace(/\\\\u001b\\[[0-9;]*m/gi, '').replaceAll('\\\\n', '\\n');\n\t\t\t}\n\t\t}\n\n\t\tconst index = viewCell.outputsViewModels.length > 1\n\t\t\t? `Cell output ${i + 1} of ${viewCell.outputsViewModels.length}\\n`\n\t\t\t: '';\n\t\toutputContent = outputContent.concat(`${index}${text}\\n`);\n\t}\n\n\tif (!outputContent) {\n\t\treturn;\n\t}\n\n\treturn new AccessibleContentProvider(\n\t\tAccessibleViewProviderId.Notebook,\n\t\t{ type: AccessibleViewType.View },\n\t\t() => { return outputContent; },\n\t\t() => {\n\t\t\tnotebookEditor?.setFocus(selections[0]);\n\t\t\tactivePane?.focus();\n\t\t},\n\t\tAccessibilityVerbositySettingId.Notebook,\n\t);\n}\n\n"],
  "mappings": ";;AAIA,SAAS,0BAA0B,oBAAoB,iCAAiC;AACxF,SAAS,mCAAmC;AAC5C,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,uCAAuC;AAChD,SAAS,uCAAuC;AAChD,SAAS,+BAA+B;AACxC,SAAS,sBAAsB;AAExB,MAAM,uBAA8D;AAAA,EAb3E,OAa2E;AAAA;AAAA;AAAA,EACjE,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO,mBAAmB;AAAA,EAC1B,OAAO,eAAe,IAAI,yBAAyB,eAAe,OAAO,mBAAmB,QAAQ,CAAC;AAAA,EAC9G,YAAY,UAA4B;AACvC,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,WAAO,4BAA4B,aAAa;AAAA,EACjD;AACD;AAGO,SAAS,4BAA4B,eAA+B;AAC1E,QAAM,aAAa,cAAc;AACjC,QAAM,iBAAiB,gCAAgC,UAAU;AACjE,QAAM,oBAAoB,gBAAgB,aAAa;AACvD,QAAM,aAAa,mBAAmB,cAAc;AACpD,QAAM,mBAAmB,mBAAmB;AAE5C,MAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,gBAAgB,WAAW;AACnE;AAAA,EACD;AAEA,QAAM,WAAW,kBAAkB,UAAU,WAAW,CAAC,EAAE,KAAK;AAChE,MAAI,gBAAgB;AACpB,QAAM,UAAU,IAAI,YAAY;AAChC,WAAS,IAAI,GAAG,IAAI,SAAS,kBAAkB,QAAQ,KAAK;AAC3D,UAAM,kBAAkB,SAAS,kBAAkB,CAAC;AACpD,UAAM,kBAAkB,SAAS,MAAM,QAAQ,CAAC;AAChD,UAAM,CAAC,WAAW,IAAI,IAAI,gBAAgB,iBAAiB,eAAe,WAAW,MAAS;AAC9F,UAAM,WAAW,UAAU,IAAI,EAAE;AACjC,QAAI,SAAS,gBAAgB,QAAQ,KAAK,YAAU,OAAO,SAAS,QAAQ;AAE5E,QAAI,CAAC,UAAU,SAAS,WAAW,OAAO,GAAG;AAC5C,eAAS,gBAAgB,QAAQ,KAAK,YAAU,CAAC,OAAO,KAAK,WAAW,OAAO,CAAC;AAAA,IACjF;AAEA,QAAI,OAAO,GAAG,QAAQ;AACtB,QAAI,QAAQ;AACX,YAAM,YAAY;AAClB,aAAO,QAAQ,OAAO,OAAO,KAAK,MAAM,GAAG,SAAS,EAAE,MAAM;AAE5D,UAAI,OAAO,KAAK,aAAa,WAAW;AACvC,eAAO,OAAO;AAAA,MACf;AAEA,UAAI,SAAS,SAAS,OAAO,GAAG;AAC/B,eAAO,KAAK,QAAQ,uBAAuB,EAAE,EAAE,WAAW,OAAO,IAAI;AAAA,MACtE;AAAA,IACD;AAEA,UAAM,QAAQ,SAAS,kBAAkB,SAAS,IAC/C,eAAe,IAAI,CAAC,OAAO,SAAS,kBAAkB,MAAM;AAAA,IAC5D;AACH,oBAAgB,cAAc,OAAO,GAAG,KAAK,GAAG,IAAI;AAAA,CAAI;AAAA,EACzD;AAEA,MAAI,CAAC,eAAe;AACnB;AAAA,EACD;AAEA,SAAO,IAAI;AAAA,IACV,yBAAyB;AAAA,IACzB,EAAE,MAAM,mBAAmB,KAAK;AAAA,IAChC,MAAM;AAAE,aAAO;AAAA,IAAe;AAAA,IAC9B,MAAM;AACL,sBAAgB,SAAS,WAAW,CAAC,CAAC;AACtC,kBAAY,MAAM;AAAA,IACnB;AAAA,IACA,gCAAgC;AAAA,EACjC;AACD;AA3DgB;",
  "names": []
}
