var m=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var S=(l,n,e,t)=>{for(var s=t>1?void 0:t?_(n,e):n,r=l.length-1,i;r>=0;r--)(i=l[r])&&(s=(t?i(n,e,s):i(s))||s);return t&&s&&m(n,e,s),s},c=(l,n)=>(e,t)=>n(e,t,l);import{Disposable as f,DisposableStore as b}from"../../../../../base/common/lifecycle.js";import{LinkedMap as v,Touch as k}from"../../../../../base/common/map.js";import{localize2 as R}from"../../../../../nls.js";import{Categories as y}from"../../../../../platform/action/common/actionCommonCategories.js";import{Action2 as u,registerAction2 as I}from"../../../../../platform/actions/common/actions.js";import{IStorageService as M,StorageScope as g,StorageTarget as O}from"../../../../../platform/storage/common/storage.js";import{INotebookKernelHistoryService as T,INotebookKernelService as E}from"../../common/notebookKernelService.js";import{INotebookLoggingService as A}from"../../common/notebookLoggingService.js";const h=5;let o=class extends f{constructor(e,t,s){super();this._storageService=e;this._notebookKernelService=t;this._notebookLoggingService=s;this._loadState(),this._register(this._storageService.onWillSaveState(()=>this._saveState())),this._register(this._storageService.onDidChangeValue(g.WORKSPACE,o.STORAGE_KEY,this._register(new b))(()=>{this._loadState()}))}static STORAGE_KEY="notebook.kernelHistory";_mostRecentKernelsMap={};getKernels(e){const t=this._notebookKernelService.getMatchingKernel(e),s=t.all,r=t.selected,i=t.all.length===1?t.all[0]:void 0;this._notebookLoggingService.debug("History",`getMatchingKernels: ${t.all.length} kernels available for ${e.uri.path}. Selected: ${t.selected?.label}. Suggested: ${i?.label}`);const a=this._mostRecentKernelsMap[e.notebookType]?[...this._mostRecentKernelsMap[e.notebookType].values()]:[],d=a.map(p=>s.find(K=>K.id===p)).filter(p=>!!p);return this._notebookLoggingService.debug("History",`mru: ${a.length} kernels in history, ${d.length} registered already.`),{selected:r??i,all:d}}addMostRecentKernel(e){const t=e.id,s=e.viewType,r=this._mostRecentKernelsMap[s]??new v;if(r.set(t,t,k.AsOld),r.size>h){const i=[...r.entries()].slice(0,h);r.fromJSON(i)}this._mostRecentKernelsMap[s]=r}_saveState(){let e=!1;for(const[t,s]of Object.entries(this._mostRecentKernelsMap))e=e||s.size>0;if(e){const t=this._serialize();this._storageService.store(o.STORAGE_KEY,JSON.stringify(t),g.WORKSPACE,O.USER)}else this._storageService.remove(o.STORAGE_KEY,g.WORKSPACE)}_loadState(){const e=this._storageService.get(o.STORAGE_KEY,g.WORKSPACE);if(e)try{this._deserialize(JSON.parse(e))}catch{this._mostRecentKernelsMap={}}else this._mostRecentKernelsMap={}}_serialize(){const e=Object.create(null);for(const[t,s]of Object.entries(this._mostRecentKernelsMap))e[t]={entries:[...s.values()]};return e}_deserialize(e){this._mostRecentKernelsMap={};for(const[t,s]of Object.entries(e)){const r=new v,i=[];for(const a of s.entries)i.push([a,a]);r.fromJSON(i),this._mostRecentKernelsMap[t]=r}}_clear(){this._mostRecentKernelsMap={},this._saveState()}};o=S([c(0,M),c(1,E),c(2,A)],o),I(class extends u{constructor(){super({id:"notebook.clearNotebookKernelsMRUCache",title:R("workbench.notebook.clearNotebookKernelsMRUCache","Clear Notebook Kernels MRU Cache"),category:y.Developer,f1:!0})}async run(l){l.get(T)._clear()}});export{o as NotebookKernelHistoryService};
