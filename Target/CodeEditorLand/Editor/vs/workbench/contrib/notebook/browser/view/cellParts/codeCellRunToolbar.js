var g=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var h=(s,e,o,t)=>{for(var i=t>1?void 0:t?v(e,o):e,r=s.length-1,n;r>=0;r--)(n=s[r])&&(i=(t?n(e,o,i):n(i))||i);return t&&i&&g(e,o,i),i},d=(s,e)=>(o,t)=>e(o,t,s);import{ToolBar as M}from"../../../../../../base/browser/ui/toolbar/toolbar.js";import{Action as E}from"../../../../../../base/common/actions.js";import{DisposableStore as S}from"../../../../../../base/common/lifecycle.js";import{MarshalledId as T}from"../../../../../../base/common/marshallingIds.js";import{EditorContextKeys as b}from"../../../../../../editor/common/editorContextKeys.js";import{localize as f}from"../../../../../../nls.js";import{DropdownWithPrimaryActionViewItem as A}from"../../../../../../platform/actions/browser/dropdownWithPrimaryActionViewItem.js";import{createAndFillInActionBarActions as x}from"../../../../../../platform/actions/browser/menuEntryActionViewItem.js";import{IMenuService as k,MenuItemAction as _}from"../../../../../../platform/actions/common/actions.js";import"../../../../../../platform/contextkey/common/contextkey.js";import{InputFocusedContext as O}from"../../../../../../platform/contextkey/common/contextkeys.js";import{IContextMenuService as K}from"../../../../../../platform/contextview/browser/contextView.js";import{IInstantiationService as w}from"../../../../../../platform/instantiation/common/instantiation.js";import{IKeybindingService as D}from"../../../../../../platform/keybinding/common/keybinding.js";import"../../controller/coreActions.js";import"../../notebookBrowser.js";import{CellContentPart as L}from"../cellPart.js";import{registerCellToolbarStickyScroll as B}from"./cellToolbarStickyScroll.js";import{NOTEBOOK_CELL_EXECUTION_STATE as N,NOTEBOOK_CELL_LIST_FOCUSED as F,NOTEBOOK_CELL_TYPE as V,NOTEBOOK_EDITOR_FOCUSED as P}from"../../../common/notebookContextKeys.js";let u=class extends L{constructor(o,t,i,r,n,a,l,p,C,y){super();this.notebookEditor=o;this.contextKeyService=t;this.cellContainer=i;this.runButtonContainer=r;this.keybindingService=p;this.contextMenuService=C;this.instantiationService=y;this.primaryMenu=this._register(l.createMenu(n,t)),this.secondaryMenu=this._register(l.createMenu(a,t)),this.createRunCellToolbar(r,i,t);const c=()=>{const m=this.getCellToolbarActions(this.primaryMenu).primary[0];this.toolbar.setActions(m?[m]:[])};c(),this._register(this.primaryMenu.onDidChange(c)),this._register(this.secondaryMenu.onDidChange(c)),this._register(this.notebookEditor.notebookOptions.onDidChangeOptions(c))}toolbar;primaryMenu;secondaryMenu;didRenderCell(o){if(this.cellDisposables.add(B(this.notebookEditor,o,this.runButtonContainer)),this.notebookEditor.hasModel()){const t={ui:!0,cell:o,notebookEditor:this.notebookEditor,$mid:T.NotebookCellActionContext};this.toolbar.context=t}}getCellToolbarActions(o){const r={primary:[],secondary:[]};return x(o,{shouldForwardArgs:!0},r,n=>/^inline/.test(n)),r}createRunCellToolbar(o,t,i){const r=this._register(new S),n=this._register(new E("notebook.moreRunActions",f("notebook.moreRunActionsLabel","More..."),"codicon-chevron-down",!0)),a=p=>this.keybindingService.lookupKeybinding(p.id,l),l=this._register(H(i));this.toolbar=this._register(new M(o,this.contextMenuService,{getKeyBinding:a,actionViewItemProvider:(p,C)=>{r.clear();const y=this.getCellToolbarActions(this.primaryMenu).primary[0];if(!(y instanceof _))return;const c=this.getCellToolbarActions(this.secondaryMenu).secondary;if(!c.length)return;const I=this.instantiationService.createInstance(A,y,n,c,"notebook-cell-run-toolbar",{...C,getKeyBinding:a});return r.add(I.onDidChangeDropdownVisibility(m=>{t.classList.toggle("cell-run-toolbar-dropdown-active",m)})),I},renderDropdownAsChildElement:!0}))}};u=h([d(6,k),d(7,D),d(8,K),d(9,w)],u);function H(s){const e=s.createScoped(document.createElement("div"));return O.bindTo(e).set(!0),b.editorTextFocus.bindTo(e).set(!0),b.focus.bindTo(e).set(!0),b.textInputFocus.bindTo(e).set(!0),N.bindTo(e).set("idle"),F.bindTo(e).set(!0),P.bindTo(e).set(!0),V.bindTo(e).set("code"),e}export{u as RunToolbar,H as getCodeCellExecutionContextKeyService};
