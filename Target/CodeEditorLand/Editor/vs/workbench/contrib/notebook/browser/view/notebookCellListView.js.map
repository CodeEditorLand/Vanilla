{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/notebookCellListView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ListView } from \"../../../../../base/browser/ui/list/listView.js\";\nimport type {\n\tIItem,\n\tIRangeMap,\n} from \"../../../../../base/browser/ui/list/rangeMap.js\";\nimport type { IRange } from \"../../../../../base/common/range.js\";\nimport { ConstantTimePrefixSumComputer } from \"../../../../../editor/common/model/prefixSumComputer.js\";\n\nexport interface IWhitespace {\n\tid: string;\n\t/**\n\t * To insert whitespace before the first item, use afterPosition 0.\n\t * In other cases, afterPosition is 1-based.\n\t */\n\tafterPosition: number;\n\tsize: number;\n\tpriority: number;\n}\nexport class NotebookCellsLayout implements IRangeMap {\n\tprivate _items: IItem[] = [];\n\tprivate _whitespace: IWhitespace[] = [];\n\tprotected _prefixSumComputer: ConstantTimePrefixSumComputer =\n\t\tnew ConstantTimePrefixSumComputer([]);\n\tprivate _size = 0;\n\tprivate _paddingTop = 0;\n\n\tget paddingTop() {\n\t\treturn this._paddingTop;\n\t}\n\n\tset paddingTop(paddingTop: number) {\n\t\tthis._size = this._size + paddingTop - this._paddingTop;\n\t\tthis._paddingTop = paddingTop;\n\t}\n\n\tget count(): number {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the sum of the sizes of all items in the range map.\n\t */\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\tconstructor(topPadding?: number) {\n\t\tthis._paddingTop = topPadding ?? 0;\n\t\tthis._size = this._paddingTop;\n\t}\n\n\tgetWhitespaces(): IWhitespace[] {\n\t\treturn this._whitespace;\n\t}\n\n\trestoreWhitespace(items: IWhitespace[]) {\n\t\tthis._whitespace = items;\n\t\tthis._size =\n\t\t\tthis._paddingTop +\n\t\t\tthis._items.reduce((total, item) => total + item.size, 0) +\n\t\t\tthis._whitespace.reduce((total, ws) => total + ws.size, 0);\n\t}\n\n\t/**\n\t */\n\tsplice(\n\t\tindex: number,\n\t\tdeleteCount: number,\n\t\titems?: IItem[] | undefined,\n\t): void {\n\t\tconst inserts = items ?? [];\n\t\t// Perform the splice operation on the items array.\n\t\tthis._items.splice(index, deleteCount, ...inserts);\n\n\t\tthis._size =\n\t\t\tthis._paddingTop +\n\t\t\tthis._items.reduce((total, item) => total + item.size, 0) +\n\t\t\tthis._whitespace.reduce((total, ws) => total + ws.size, 0);\n\t\tthis._prefixSumComputer.removeValues(index, deleteCount);\n\n\t\t// inserts should also include whitespaces\n\t\tconst newSizes = [];\n\t\tfor (let i = 0; i < inserts.length; i++) {\n\t\t\tconst insertIndex = i + index;\n\t\t\tconst existingWhitespaces = this._whitespace.filter(\n\t\t\t\t(ws) => ws.afterPosition === insertIndex + 1,\n\t\t\t);\n\n\t\t\tif (existingWhitespaces.length > 0) {\n\t\t\t\tnewSizes.push(\n\t\t\t\t\tinserts[i].size +\n\t\t\t\t\t\texistingWhitespaces.reduce(\n\t\t\t\t\t\t\t(acc, ws) => acc + ws.size,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tnewSizes.push(inserts[i].size);\n\t\t\t}\n\t\t}\n\t\tthis._prefixSumComputer.insertValues(index, newSizes);\n\n\t\t// Now that the items array has been updated, and the whitespaces are updated elsewhere, if an item is removed/inserted, the accumlated size of the items are all updated.\n\t\t// Loop through all items from the index where the splice started, to the end\n\t\tfor (let i = index; i < this._items.length; i++) {\n\t\t\tconst existingWhitespaces = this._whitespace.filter(\n\t\t\t\t(ws) => ws.afterPosition === i + 1,\n\t\t\t);\n\t\t\tif (existingWhitespaces.length > 0) {\n\t\t\t\tthis._prefixSumComputer.setValue(\n\t\t\t\t\ti,\n\t\t\t\t\tthis._items[i].size +\n\t\t\t\t\t\texistingWhitespaces.reduce(\n\t\t\t\t\t\t\t(acc, ws) => acc + ws.size,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._prefixSumComputer.setValue(i, this._items[i].size);\n\t\t\t}\n\t\t}\n\t}\n\n\tinsertWhitespace(id: string, afterPosition: number, size: number): void {\n\t\tlet priority = 0;\n\t\tconst existingWhitespaces = this._whitespace.filter(\n\t\t\t(ws) => ws.afterPosition === afterPosition,\n\t\t);\n\t\tif (existingWhitespaces.length > 0) {\n\t\t\tpriority =\n\t\t\t\tMath.max(...existingWhitespaces.map((ws) => ws.priority)) + 1;\n\t\t}\n\n\t\tthis._whitespace.push({\n\t\t\tid,\n\t\t\tafterPosition: afterPosition,\n\t\t\tsize,\n\t\t\tpriority,\n\t\t});\n\t\tthis._size += size; // Update the total size to include the whitespace\n\t\tthis._whitespace.sort((a, b) => {\n\t\t\tif (a.afterPosition === b.afterPosition) {\n\t\t\t\treturn a.priority - b.priority;\n\t\t\t}\n\t\t\treturn a.afterPosition - b.afterPosition;\n\t\t});\n\n\t\t// find item size of index\n\t\tif (afterPosition > 0) {\n\t\t\tconst index = afterPosition - 1;\n\t\t\tconst itemSize = this._items[index].size;\n\t\t\tconst accSize = itemSize + size;\n\t\t\tthis._prefixSumComputer.setValue(index, accSize);\n\t\t}\n\t}\n\n\tchangeOneWhitespace(id: string, afterPosition: number, size: number): void {\n\t\tconst whitespaceIndex = this._whitespace.findIndex(\n\t\t\t(ws) => ws.id === id,\n\t\t);\n\t\tif (whitespaceIndex !== -1) {\n\t\t\tconst whitespace = this._whitespace[whitespaceIndex];\n\t\t\tconst oldAfterPosition = whitespace.afterPosition;\n\t\t\twhitespace.afterPosition = afterPosition;\n\t\t\tconst oldSize = whitespace.size;\n\t\t\tconst delta = size - oldSize;\n\t\t\twhitespace.size = size;\n\t\t\tthis._size += delta;\n\n\t\t\tif (\n\t\t\t\toldAfterPosition > 0 &&\n\t\t\t\toldAfterPosition <= this._items.length\n\t\t\t) {\n\t\t\t\tconst index = oldAfterPosition - 1;\n\t\t\t\tconst itemSize = this._items[index].size;\n\t\t\t\tconst accSize = itemSize;\n\t\t\t\tthis._prefixSumComputer.setValue(index, accSize);\n\t\t\t}\n\n\t\t\tif (afterPosition > 0 && afterPosition <= this._items.length) {\n\t\t\t\tconst index = afterPosition - 1;\n\t\t\t\tconst itemSize = this._items[index].size;\n\t\t\t\tconst accSize = itemSize + size;\n\t\t\t\tthis._prefixSumComputer.setValue(index, accSize);\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveWhitespace(id: string): void {\n\t\tconst whitespaceIndex = this._whitespace.findIndex(\n\t\t\t(ws) => ws.id === id,\n\t\t);\n\t\tif (whitespaceIndex !== -1) {\n\t\t\tconst whitespace = this._whitespace[whitespaceIndex];\n\t\t\tthis._whitespace.splice(whitespaceIndex, 1);\n\t\t\tthis._size -= whitespace.size; // Reduce the total size by the size of the removed whitespace\n\n\t\t\tif (whitespace.afterPosition > 0) {\n\t\t\t\tconst index = whitespace.afterPosition - 1;\n\t\t\t\tconst itemSize = this._items[index].size;\n\t\t\t\tconst remainingWhitespaces = this._whitespace.filter(\n\t\t\t\t\t(ws) => ws.afterPosition === whitespace.afterPosition,\n\t\t\t\t);\n\t\t\t\tconst accSize =\n\t\t\t\t\titemSize +\n\t\t\t\t\tremainingWhitespaces.reduce((acc, ws) => acc + ws.size, 0);\n\t\t\t\tthis._prefixSumComputer.setValue(index, accSize);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * find position of whitespace\n\t * @param id: id of the whitespace\n\t * @returns: position in the list view\n\t */\n\tgetWhitespacePosition(id: string): number {\n\t\tconst whitespace = this._whitespace.find((ws) => ws.id === id);\n\t\tif (!whitespace) {\n\t\t\tthrow new Error(\"Whitespace not found\");\n\t\t}\n\n\t\tconst afterPosition = whitespace.afterPosition;\n\t\tif (afterPosition === 0) {\n\t\t\t// find all whitespaces at the same position but with higher priority (smaller number)\n\t\t\tconst whitespaces = this._whitespace.filter(\n\t\t\t\t(ws) =>\n\t\t\t\t\tws.afterPosition === afterPosition &&\n\t\t\t\t\tws.priority < whitespace.priority,\n\t\t\t);\n\t\t\treturn (\n\t\t\t\twhitespaces.reduce((acc, ws) => acc + ws.size, 0) +\n\t\t\t\tthis.paddingTop\n\t\t\t);\n\t\t}\n\n\t\tconst whitespaceBeforeFirstItem = this._whitespace\n\t\t\t.filter((ws) => ws.afterPosition === 0)\n\t\t\t.reduce((acc, ws) => acc + ws.size, 0);\n\n\t\t// previous item index\n\t\tconst index = afterPosition - 1;\n\t\tconst previousItemPosition =\n\t\t\tthis._prefixSumComputer.getPrefixSum(index);\n\t\tconst previousItemSize = this._items[index].size;\n\t\tconst previousWhitespace = this._whitespace.filter(\n\t\t\t(ws) =>\n\t\t\t\tws.afterPosition <= afterPosition - 1 && ws.afterPosition > 0,\n\t\t);\n\t\tconst whitespaceBefore = previousWhitespace.reduce(\n\t\t\t(acc, ws) => acc + ws.size,\n\t\t\t0,\n\t\t);\n\t\treturn (\n\t\t\tpreviousItemPosition +\n\t\t\tpreviousItemSize +\n\t\t\twhitespaceBeforeFirstItem +\n\t\t\tthis.paddingTop +\n\t\t\twhitespaceBefore\n\t\t);\n\t}\n\n\tindexAt(position: number): number {\n\t\tif (position < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst whitespaceBeforeFirstItem = this._whitespace\n\t\t\t.filter((ws) => ws.afterPosition === 0)\n\t\t\t.reduce((acc, ws) => acc + ws.size, 0);\n\n\t\tconst offset =\n\t\t\tposition - (this._paddingTop + whitespaceBeforeFirstItem);\n\t\tif (offset <= 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (\n\t\t\toffset >=\n\t\t\tthis._size - this._paddingTop - whitespaceBeforeFirstItem\n\t\t) {\n\t\t\treturn this.count;\n\t\t}\n\n\t\treturn this._prefixSumComputer.getIndexOf(Math.trunc(offset)).index;\n\t}\n\n\tindexAfter(position: number): number {\n\t\tconst index = this.indexAt(position);\n\t\treturn Math.min(index + 1, this._items.length);\n\t}\n\n\tpositionAt(index: number): number {\n\t\tif (index < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (this.count === 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// index is zero based, if index+1 > this.count, then it points to the fictitious element after the last element of this array.\n\t\tif (index >= this.count) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst whitespaceBeforeFirstItem = this._whitespace\n\t\t\t.filter((ws) => ws.afterPosition === 0)\n\t\t\t.reduce((acc, ws) => acc + ws.size, 0);\n\t\treturn (\n\t\t\tthis._prefixSumComputer.getPrefixSum(index /** count */) +\n\t\t\tthis._paddingTop +\n\t\t\twhitespaceBeforeFirstItem\n\t\t);\n\t}\n}\n\nexport class NotebookCellListView<T> extends ListView<T> {\n\tprivate _lastWhitespaceId = 0;\n\tprivate _renderingStack = 0;\n\n\tget inRenderingTransaction(): boolean {\n\t\treturn this._renderingStack > 0;\n\t}\n\n\tget notebookRangeMap(): NotebookCellsLayout {\n\t\treturn this.rangeMap as NotebookCellsLayout;\n\t}\n\n\tprotected override render(\n\t\tpreviousRenderRange: IRange,\n\t\trenderTop: number,\n\t\trenderHeight: number,\n\t\trenderLeft: number | undefined,\n\t\tscrollWidth: number | undefined,\n\t\tupdateItemsInDOM?: boolean,\n\t): void {\n\t\tthis._renderingStack++;\n\t\tsuper.render(\n\t\t\tpreviousRenderRange,\n\t\t\trenderTop,\n\t\t\trenderHeight,\n\t\t\trenderLeft,\n\t\t\tscrollWidth,\n\t\t\tupdateItemsInDOM,\n\t\t);\n\t\tthis._renderingStack--;\n\t}\n\n\tprotected override _rerender(\n\t\trenderTop: number,\n\t\trenderHeight: number,\n\t\tinSmoothScrolling?: boolean | undefined,\n\t): void {\n\t\tthis._renderingStack++;\n\t\tsuper._rerender(renderTop, renderHeight, inSmoothScrolling);\n\t\tthis._renderingStack--;\n\t}\n\n\tprotected override createRangeMap(paddingTop: number): IRangeMap {\n\t\tconst existingMap = this.rangeMap as NotebookCellsLayout | undefined;\n\t\tif (existingMap) {\n\t\t\tconst layout = new NotebookCellsLayout(paddingTop);\n\t\t\tlayout.restoreWhitespace(existingMap.getWhitespaces());\n\t\t\treturn layout;\n\t\t} else {\n\t\t\treturn new NotebookCellsLayout(paddingTop);\n\t\t}\n\t}\n\n\tinsertWhitespace(afterPosition: number, size: number): string {\n\t\tconst scrollTop = this.scrollTop;\n\t\tconst id = `${++this._lastWhitespaceId}`;\n\t\tconst previousRenderRange = this.getRenderRange(\n\t\t\tthis.lastRenderTop,\n\t\t\tthis.lastRenderHeight,\n\t\t);\n\t\tconst elementPosition = this.elementTop(afterPosition);\n\t\tconst aboveScrollTop = scrollTop > elementPosition;\n\t\tthis.notebookRangeMap.insertWhitespace(id, afterPosition, size);\n\n\t\tconst newScrolltop = aboveScrollTop ? scrollTop + size : scrollTop;\n\t\tthis.render(\n\t\t\tpreviousRenderRange,\n\t\t\tnewScrolltop,\n\t\t\tthis.lastRenderHeight,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\t\tthis._rerender(newScrolltop, this.renderHeight, false);\n\t\tthis.eventuallyUpdateScrollDimensions();\n\n\t\treturn id;\n\t}\n\n\tchangeOneWhitespace(id: string, newAfterPosition: number, newSize: number) {\n\t\tconst scrollTop = this.scrollTop;\n\t\tconst previousRenderRange = this.getRenderRange(\n\t\t\tthis.lastRenderTop,\n\t\t\tthis.lastRenderHeight,\n\t\t);\n\t\tconst currentPosition = this.notebookRangeMap.getWhitespacePosition(id);\n\n\t\tif (currentPosition > scrollTop) {\n\t\t\tthis.notebookRangeMap.changeOneWhitespace(\n\t\t\t\tid,\n\t\t\t\tnewAfterPosition,\n\t\t\t\tnewSize,\n\t\t\t);\n\t\t\tthis.render(\n\t\t\t\tpreviousRenderRange,\n\t\t\t\tscrollTop,\n\t\t\t\tthis.lastRenderHeight,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis._rerender(scrollTop, this.renderHeight, false);\n\t\t\tthis.eventuallyUpdateScrollDimensions();\n\t\t} else {\n\t\t\tthis.notebookRangeMap.changeOneWhitespace(\n\t\t\t\tid,\n\t\t\t\tnewAfterPosition,\n\t\t\t\tnewSize,\n\t\t\t);\n\t\t\tthis.eventuallyUpdateScrollDimensions();\n\t\t}\n\t}\n\n\tremoveWhitespace(id: string): void {\n\t\tconst scrollTop = this.scrollTop;\n\t\tconst previousRenderRange = this.getRenderRange(\n\t\t\tthis.lastRenderTop,\n\t\t\tthis.lastRenderHeight,\n\t\t);\n\t\tconst currentPosition = this.notebookRangeMap.getWhitespacePosition(id);\n\n\t\tif (currentPosition > scrollTop) {\n\t\t\tthis.notebookRangeMap.removeWhitespace(id);\n\t\t\tthis.render(\n\t\t\t\tpreviousRenderRange,\n\t\t\t\tscrollTop,\n\t\t\t\tthis.lastRenderHeight,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis._rerender(scrollTop, this.renderHeight, false);\n\t\t\tthis.eventuallyUpdateScrollDimensions();\n\t\t} else {\n\t\t\tthis.notebookRangeMap.removeWhitespace(id);\n\t\t\tthis.eventuallyUpdateScrollDimensions();\n\t\t}\n\t}\n\n\tgetWhitespacePosition(id: string): number {\n\t\treturn this.notebookRangeMap.getWhitespacePosition(id);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
