import{Emitter as s}from"../../../../../base/common/event.js";import{Disposable as d}from"../../../../../base/common/lifecycle.js";import{observableValue as p}from"../../../../../base/common/observable.js";import{RENDERER_NOT_AVAILABLE as n}from"../../common/notebookCommon.js";let u=0;class f extends d{constructor(e,t,o){super();this.cellViewModel=e;this._outputRawData=t;this._notebookService=o}_onDidResetRendererEmitter=this._register(new s);onDidResetRenderer=this._onDidResetRendererEmitter.event;alwaysShow=!1;visible=p("outputVisible",!1);setVisible(e=!0,t=!1){!e&&this.alwaysShow||(t&&e&&(this.alwaysShow=!0),this.visible.set(e,void 0))}outputHandle=u++;get model(){return this._outputRawData}_pickedMimeType;get pickedMimeType(){return this._pickedMimeType}set pickedMimeType(e){this._pickedMimeType=e}hasMultiMimeType(){if(this._outputRawData.outputs.length<2)return!1;const e=this._outputRawData.outputs[0].mime;return this._outputRawData.outputs.some(t=>t.mime!==e)}resolveMimeTypes(e,t){const o=this._notebookService.getOutputMimeTypeInfo(e,t,this.model),r=o.findIndex(i=>i.rendererId!==n&&i.isTrusted);return[o,Math.max(r,0)]}resetRenderer(){this._pickedMimeType=void 0,this.model.bumpVersion(),this._onDidResetRendererEmitter.fire()}toRawJSON(){return{outputs:this._outputRawData.outputs}}}export{f as CellOutputViewModel};
