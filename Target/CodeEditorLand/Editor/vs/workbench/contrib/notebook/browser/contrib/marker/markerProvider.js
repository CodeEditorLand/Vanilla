var h=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var m=(a,o,e,r)=>{for(var t=r>1?void 0:r?k(o,e):o,i=a.length-1,n;i>=0;i--)(n=a[i])&&(t=(r?n(o,e,t):n(t))||t);return r&&t&&h(o,e,t),t},l=(a,o)=>(e,r)=>o(e,r,a);import{WorkbenchPhase as g,registerWorkbenchContribution2 as b}from"../../../../../common/contributions.js";import{MarkerList as f,IMarkerNavigationService as _}from"../../../../../../editor/contrib/gotoError/browser/markerNavigationService.js";import{CellUri as p}from"../../../common/notebookCommon.js";import{IMarkerService as u,MarkerSeverity as c}from"../../../../../../platform/markers/common/markers.js";import{IConfigurationService as I}from"../../../../../../platform/configuration/common/configuration.js";import{Disposable as S}from"../../../../../../base/common/lifecycle.js";import{NotebookOverviewRulerLane as E}from"../../notebookBrowser.js";import{registerNotebookContribution as D}from"../../notebookEditorExtensions.js";import{throttle as C}from"../../../../../../base/common/decorators.js";import{editorErrorForeground as R,editorWarningForeground as N}from"../../../../../../platform/theme/common/colorRegistry.js";import{isEqual as w}from"../../../../../../base/common/resources.js";let d=class{constructor(o,e,r){this._markerService=o;this._configService=r;this._dispoables=e.registerProvider(this)}static ID="workbench.contrib.markerListProvider";_dispoables;dispose(){this._dispoables.dispose()}getMarkerList(o){if(!o)return;const e=p.parse(o);if(e)return new f(r=>p.parse(r)?.notebook.toString()===e.notebook.toString(),this._markerService,this._configService)}};d=m([l(0,u),l(1,_),l(2,I)],d);let s=class extends S{constructor(e,r){super();this._notebookEditor=e;this._markerService=r;this._update(),this._register(this._notebookEditor.onDidChangeModel(()=>this._update())),this._register(this._markerService.onMarkerChanged(t=>{t.some(i=>this._notebookEditor.getCellsInRange().some(n=>w(n.uri,i)))&&this._update()}))}static id="workbench.notebook.markerDecoration";_markersOverviewRulerDecorations=[];_update(){if(!this._notebookEditor.hasModel())return;const e=[];this._notebookEditor.getCellsInRange().forEach(r=>{this._markerService.read({resource:r.uri,severities:c.Error|c.Warning}).forEach(i=>{const n=i.severity===c.Error?R:N,v={startLineNumber:i.startLineNumber,startColumn:i.startColumn,endLineNumber:i.endLineNumber,endColumn:i.endColumn};e.push({handle:r.handle,options:{overviewRuler:{color:n,modelRanges:[v],includeOutput:!1,position:E.Right}}})})}),this._markersOverviewRulerDecorations=this._notebookEditor.deltaCellDecorations(this._markersOverviewRulerDecorations,e)}};m([C(100)],s.prototype,"_update",1),s=m([l(1,u)],s),b(d.ID,d,g.BlockRestore),D(s.id,s);
