{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from \"../../../../../base/browser/dom.js\";\nimport { onUnexpectedError } from \"../../../../../base/common/errors.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\tMutableDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport type { ICellExecutionStateChangedEvent } from \"../../common/notebookExecutionStateService.js\";\nimport type { ICellViewModel } from \"../notebookBrowser.js\";\nimport type { CellViewModelStateChangeEvent } from \"../notebookViewEvents.js\";\n\n/**\n * A content part is a non-floating element that is rendered inside a cell.\n * The rendering of the content part is synchronous to avoid flickering.\n */\nexport abstract class CellContentPart extends Disposable {\n\tprotected currentCell: ICellViewModel | undefined;\n\tprotected readonly cellDisposables = this._register(new DisposableStore());\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Prepare model for cell part rendering\n\t * No DOM operations recommended within this operation\n\t */\n\tprepareRenderCell(element: ICellViewModel): void {}\n\n\t/**\n\t * Update the DOM for the cell `element`\n\t */\n\trenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = element;\n\t\tsafeInvokeNoArg(() => this.didRenderCell(element));\n\t}\n\n\tdidRenderCell(element: ICellViewModel): void {}\n\n\t/**\n\t * Dispose any disposables generated from `didRenderCell`\n\t */\n\tunrenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = undefined;\n\t\tthis.cellDisposables.clear();\n\t}\n\n\t/**\n\t * Perform DOM read operations to prepare for the list/cell layout update.\n\t */\n\tprepareLayout(): void {}\n\n\t/**\n\t * Update internal DOM (top positions) per cell layout info change\n\t * Note that a cell part doesn't need to call `DOM.scheduleNextFrame`,\n\t * the list view will ensure that layout call is invoked in the right frame\n\t */\n\tupdateInternalLayoutNow(element: ICellViewModel): void {}\n\n\t/**\n\t * Update per cell state change\n\t */\n\tupdateState(\n\t\telement: ICellViewModel,\n\t\te: CellViewModelStateChangeEvent,\n\t): void {}\n\n\t/**\n\t * Update per execution state change.\n\t */\n\tupdateForExecutionState(\n\t\telement: ICellViewModel,\n\t\te: ICellExecutionStateChangedEvent,\n\t): void {}\n}\n\n/**\n * An overlay part renders on top of other components.\n * The rendering of the overlay part might be postponed to the next animation frame to avoid forced reflow.\n */\nexport abstract class CellOverlayPart extends Disposable {\n\tprotected currentCell: ICellViewModel | undefined;\n\tprotected readonly cellDisposables = this._register(new DisposableStore());\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Prepare model for cell part rendering\n\t * No DOM operations recommended within this operation\n\t */\n\tprepareRenderCell(element: ICellViewModel): void {}\n\n\t/**\n\t * Update the DOM for the cell `element`\n\t */\n\trenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = element;\n\t\tthis.didRenderCell(element);\n\t}\n\n\tdidRenderCell(element: ICellViewModel): void {}\n\n\t/**\n\t * Dispose any disposables generated from `didRenderCell`\n\t */\n\tunrenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = undefined;\n\t\tthis.cellDisposables.clear();\n\t}\n\n\t/**\n\t * Update internal DOM (top positions) per cell layout info change\n\t * Note that a cell part doesn't need to call `DOM.scheduleNextFrame`,\n\t * the list view will ensure that layout call is invoked in the right frame\n\t */\n\tupdateInternalLayoutNow(element: ICellViewModel): void {}\n\n\t/**\n\t * Update per cell state change\n\t */\n\tupdateState(\n\t\telement: ICellViewModel,\n\t\te: CellViewModelStateChangeEvent,\n\t): void {}\n\n\t/**\n\t * Update per execution state change.\n\t */\n\tupdateForExecutionState(\n\t\telement: ICellViewModel,\n\t\te: ICellExecutionStateChangedEvent,\n\t): void {}\n}\n\nfunction safeInvokeNoArg<T>(func: () => T): T | null {\n\ttry {\n\t\treturn func();\n\t} catch (e) {\n\t\tonUnexpectedError(e);\n\t\treturn null;\n\t}\n}\n\nexport class CellPartsCollection extends Disposable {\n\tprivate readonly _scheduledOverlayRendering = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly _scheduledOverlayUpdateState = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly _scheduledOverlayUpdateExecutionState = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly targetWindow: Window,\n\t\tprivate readonly contentParts: readonly CellContentPart[],\n\t\tprivate readonly overlayParts: readonly CellOverlayPart[],\n\t) {\n\t\tsuper();\n\t}\n\n\tconcatContentPart(\n\t\tother: readonly CellContentPart[],\n\t\ttargetWindow: Window,\n\t): CellPartsCollection {\n\t\treturn new CellPartsCollection(\n\t\t\ttargetWindow,\n\t\t\tthis.contentParts.concat(other),\n\t\t\tthis.overlayParts,\n\t\t);\n\t}\n\n\tconcatOverlayPart(\n\t\tother: readonly CellOverlayPart[],\n\t\ttargetWindow: Window,\n\t): CellPartsCollection {\n\t\treturn new CellPartsCollection(\n\t\t\ttargetWindow,\n\t\t\tthis.contentParts,\n\t\t\tthis.overlayParts.concat(other),\n\t\t);\n\t}\n\n\tscheduleRenderCell(element: ICellViewModel): void {\n\t\t// prepare model\n\t\tfor (const part of this.contentParts) {\n\t\t\tsafeInvokeNoArg(() => part.prepareRenderCell(element));\n\t\t}\n\n\t\tfor (const part of this.overlayParts) {\n\t\t\tsafeInvokeNoArg(() => part.prepareRenderCell(element));\n\t\t}\n\n\t\t// render content parts\n\t\tfor (const part of this.contentParts) {\n\t\t\tsafeInvokeNoArg(() => part.renderCell(element));\n\t\t}\n\n\t\tthis._scheduledOverlayRendering.value = DOM.modify(\n\t\t\tthis.targetWindow,\n\t\t\t() => {\n\t\t\t\tfor (const part of this.overlayParts) {\n\t\t\t\t\tsafeInvokeNoArg(() => part.renderCell(element));\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tunrenderCell(element: ICellViewModel): void {\n\t\tfor (const part of this.contentParts) {\n\t\t\tsafeInvokeNoArg(() => part.unrenderCell(element));\n\t\t}\n\n\t\tthis._scheduledOverlayRendering.value = undefined;\n\t\tthis._scheduledOverlayUpdateState.value = undefined;\n\t\tthis._scheduledOverlayUpdateExecutionState.value = undefined;\n\n\t\tfor (const part of this.overlayParts) {\n\t\t\tsafeInvokeNoArg(() => part.unrenderCell(element));\n\t\t}\n\t}\n\n\tupdateInternalLayoutNow(viewCell: ICellViewModel) {\n\t\tfor (const part of this.contentParts) {\n\t\t\tsafeInvokeNoArg(() => part.updateInternalLayoutNow(viewCell));\n\t\t}\n\n\t\tfor (const part of this.overlayParts) {\n\t\t\tsafeInvokeNoArg(() => part.updateInternalLayoutNow(viewCell));\n\t\t}\n\t}\n\n\tprepareLayout() {\n\t\tfor (const part of this.contentParts) {\n\t\t\tsafeInvokeNoArg(() => part.prepareLayout());\n\t\t}\n\t}\n\n\tupdateState(viewCell: ICellViewModel, e: CellViewModelStateChangeEvent) {\n\t\tfor (const part of this.contentParts) {\n\t\t\tsafeInvokeNoArg(() => part.updateState(viewCell, e));\n\t\t}\n\n\t\tthis._scheduledOverlayUpdateState.value = DOM.modify(\n\t\t\tthis.targetWindow,\n\t\t\t() => {\n\t\t\t\tfor (const part of this.overlayParts) {\n\t\t\t\t\tsafeInvokeNoArg(() => part.updateState(viewCell, e));\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tupdateForExecutionState(\n\t\tviewCell: ICellViewModel,\n\t\te: ICellExecutionStateChangedEvent,\n\t) {\n\t\tfor (const part of this.contentParts) {\n\t\t\tsafeInvokeNoArg(() => part.updateForExecutionState(viewCell, e));\n\t\t}\n\n\t\tthis._scheduledOverlayUpdateExecutionState.value = DOM.modify(\n\t\t\tthis.targetWindow,\n\t\t\t() => {\n\t\t\t\tfor (const part of this.overlayParts) {\n\t\t\t\t\tsafeInvokeNoArg(() =>\n\t\t\t\t\t\tpart.updateForExecutionState(viewCell, e),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
