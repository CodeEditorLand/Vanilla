{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookKernelHistoryServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { LinkedMap, Touch } from '../../../../../base/common/map.js';\nimport { localize2 } from '../../../../../nls.js';\nimport { Categories } from '../../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { INotebookKernel, INotebookKernelHistoryService, INotebookKernelService, INotebookTextModelLike } from '../../common/notebookKernelService.js';\nimport { INotebookLoggingService } from '../../common/notebookLoggingService.js';\n\ninterface ISerializedKernelsListPerType {\n\tentries: string[];\n}\n\ninterface ISerializedKernelsList {\n\t[viewType: string]: ISerializedKernelsListPerType;\n}\n\nconst MAX_KERNELS_IN_HISTORY = 5;\n\nexport class NotebookKernelHistoryService extends Disposable implements INotebookKernelHistoryService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate static STORAGE_KEY = 'notebook.kernelHistory';\n\tprivate _mostRecentKernelsMap: { [key: string]: LinkedMap<string, string> } = {};\n\n\tconstructor(@IStorageService private readonly _storageService: IStorageService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@INotebookLoggingService private readonly _notebookLoggingService: INotebookLoggingService) {\n\t\tsuper();\n\n\t\tthis._loadState();\n\t\tthis._register(this._storageService.onWillSaveState(() => this._saveState()));\n\t\tthis._register(this._storageService.onDidChangeValue(StorageScope.WORKSPACE, NotebookKernelHistoryService.STORAGE_KEY, this._register(new DisposableStore()))(() => {\n\t\t\tthis._loadState();\n\t\t}));\n\t}\n\n\tgetKernels(notebook: INotebookTextModelLike): { selected: INotebookKernel | undefined; all: INotebookKernel[] } {\n\t\tconst allAvailableKernels = this._notebookKernelService.getMatchingKernel(notebook);\n\t\tconst allKernels = allAvailableKernels.all;\n\t\tconst selectedKernel = allAvailableKernels.selected;\n\t\t// We will suggest the only kernel\n\t\tconst suggested = allAvailableKernels.all.length === 1 ? allAvailableKernels.all[0] : undefined;\n\t\tthis._notebookLoggingService.debug('History', `getMatchingKernels: ${allAvailableKernels.all.length} kernels available for ${notebook.uri.path}. Selected: ${allAvailableKernels.selected?.label}. Suggested: ${suggested?.label}`);\n\t\tconst mostRecentKernelIds = this._mostRecentKernelsMap[notebook.notebookType] ? [...this._mostRecentKernelsMap[notebook.notebookType].values()] : [];\n\t\tconst all = mostRecentKernelIds.map(kernelId => allKernels.find(kernel => kernel.id === kernelId)).filter(kernel => !!kernel) as INotebookKernel[];\n\t\tthis._notebookLoggingService.debug('History', `mru: ${mostRecentKernelIds.length} kernels in history, ${all.length} registered already.`);\n\n\t\treturn {\n\t\t\tselected: selectedKernel ?? suggested,\n\t\t\tall\n\t\t};\n\t}\n\n\taddMostRecentKernel(kernel: INotebookKernel): void {\n\t\tconst key = kernel.id;\n\t\tconst viewType = kernel.viewType;\n\t\tconst recentKeynels = this._mostRecentKernelsMap[viewType] ?? new LinkedMap<string, string>();\n\n\t\trecentKeynels.set(key, key, Touch.AsOld);\n\n\n\t\tif (recentKeynels.size > MAX_KERNELS_IN_HISTORY) {\n\t\t\tconst reserved = [...recentKeynels.entries()].slice(0, MAX_KERNELS_IN_HISTORY);\n\t\t\trecentKeynels.fromJSON(reserved);\n\t\t}\n\n\t\tthis._mostRecentKernelsMap[viewType] = recentKeynels;\n\t}\n\n\tprivate _saveState(): void {\n\t\tlet notEmpty = false;\n\t\tfor (const [_, kernels] of Object.entries(this._mostRecentKernelsMap)) {\n\t\t\tnotEmpty = notEmpty || kernels.size > 0;\n\t\t}\n\n\t\tif (notEmpty) {\n\t\t\tconst serialized = this._serialize();\n\t\t\tthis._storageService.store(NotebookKernelHistoryService.STORAGE_KEY, JSON.stringify(serialized), StorageScope.WORKSPACE, StorageTarget.USER);\n\t\t} else {\n\t\t\tthis._storageService.remove(NotebookKernelHistoryService.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate _loadState(): void {\n\t\tconst serialized = this._storageService.get(NotebookKernelHistoryService.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\tif (serialized) {\n\t\t\ttry {\n\t\t\t\tthis._deserialize(JSON.parse(serialized));\n\t\t\t} catch (e) {\n\t\t\t\tthis._mostRecentKernelsMap = {};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._mostRecentKernelsMap = {};\n\t\t}\n\t}\n\n\tprivate _serialize(): ISerializedKernelsList {\n\t\tconst result: ISerializedKernelsList = Object.create(null);\n\n\t\tfor (const [viewType, kernels] of Object.entries(this._mostRecentKernelsMap)) {\n\t\t\tresult[viewType] = {\n\t\t\t\tentries: [...kernels.values()]\n\t\t\t};\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _deserialize(serialized: ISerializedKernelsList): void {\n\t\tthis._mostRecentKernelsMap = {};\n\n\t\tfor (const [viewType, kernels] of Object.entries(serialized)) {\n\t\t\tconst linkedMap = new LinkedMap<string, string>();\n\t\t\tconst mapValues: [string, string][] = [];\n\n\t\t\tfor (const entry of kernels.entries) {\n\t\t\t\tmapValues.push([entry, entry]);\n\t\t\t}\n\n\t\t\tlinkedMap.fromJSON(mapValues);\n\t\t\tthis._mostRecentKernelsMap[viewType] = linkedMap;\n\t\t}\n\t}\n\n\t_clear(): void {\n\t\tthis._mostRecentKernelsMap = {};\n\t\tthis._saveState();\n\t}\n}\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.clearNotebookKernelsMRUCache',\n\t\t\ttitle: localize2('workbench.notebook.clearNotebookKernelsMRUCache', \"Clear Notebook Kernels MRU Cache\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst historyService = accessor.get(INotebookKernelHistoryService) as NotebookKernelHistoryService;\n\t\thistoryService._clear();\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
