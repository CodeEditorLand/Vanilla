{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookKernelHistoryServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { LinkedMap, Touch } from \"../../../../../base/common/map.js\";\nimport { localize2 } from \"../../../../../nls.js\";\nimport { Categories } from \"../../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport type { ServicesAccessor } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../../platform/storage/common/storage.js\";\nimport {\n\ttype INotebookKernel,\n\tINotebookKernelHistoryService,\n\tINotebookKernelService,\n\ttype INotebookTextModelLike,\n} from \"../../common/notebookKernelService.js\";\nimport { INotebookLoggingService } from \"../../common/notebookLoggingService.js\";\n\ninterface ISerializedKernelsListPerType {\n\tentries: string[];\n}\n\ninterface ISerializedKernelsList {\n\t[viewType: string]: ISerializedKernelsListPerType;\n}\n\nconst MAX_KERNELS_IN_HISTORY = 5;\n\nexport class NotebookKernelHistoryService\n\textends Disposable\n\timplements INotebookKernelHistoryService\n{\n\tdeclare _serviceBrand: undefined;\n\n\tprivate static STORAGE_KEY = \"notebook.kernelHistory\";\n\tprivate _mostRecentKernelsMap: {\n\t\t[key: string]: LinkedMap<string, string>;\n\t} = {};\n\n\tconstructor(@IStorageService private readonly _storageService: IStorageService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@INotebookLoggingService private readonly _notebookLoggingService: INotebookLoggingService) {\n\t\tsuper();\n\n\t\tthis._loadState();\n\t\tthis._register(this._storageService.onWillSaveState(() => this._saveState()));\n\t\tthis._register(this._storageService.onDidChangeValue(StorageScope.WORKSPACE, NotebookKernelHistoryService.STORAGE_KEY, this._register(new DisposableStore()))(() => {\n\t\t\tthis._loadState();\n\t\t}));\n\t}\n\n\tgetKernels(notebook: INotebookTextModelLike): {\n\t\tselected: INotebookKernel | undefined;\n\t\tall: INotebookKernel[];\n\t} {\n\t\tconst allAvailableKernels =\n\t\t\tthis._notebookKernelService.getMatchingKernel(notebook);\n\t\tconst allKernels = allAvailableKernels.all;\n\t\tconst selectedKernel = allAvailableKernels.selected;\n\t\t// We will suggest the only kernel\n\t\tconst suggested =\n\t\t\tallAvailableKernels.all.length === 1\n\t\t\t\t? allAvailableKernels.all[0]\n\t\t\t\t: undefined;\n\t\tthis._notebookLoggingService.debug(\n\t\t\t\"History\",\n\t\t\t`getMatchingKernels: ${allAvailableKernels.all.length} kernels available for ${notebook.uri.path}. Selected: ${allAvailableKernels.selected?.label}. Suggested: ${suggested?.label}`,\n\t\t);\n\t\tconst mostRecentKernelIds = this._mostRecentKernelsMap[\n\t\t\tnotebook.notebookType\n\t\t]\n\t\t\t? [...this._mostRecentKernelsMap[notebook.notebookType].values()]\n\t\t\t: [];\n\t\tconst all = mostRecentKernelIds\n\t\t\t.map((kernelId) =>\n\t\t\t\tallKernels.find((kernel) => kernel.id === kernelId),\n\t\t\t)\n\t\t\t.filter((kernel) => !!kernel) as INotebookKernel[];\n\t\tthis._notebookLoggingService.debug(\n\t\t\t\"History\",\n\t\t\t`mru: ${mostRecentKernelIds.length} kernels in history, ${all.length} registered already.`,\n\t\t);\n\n\t\treturn {\n\t\t\tselected: selectedKernel ?? suggested,\n\t\t\tall,\n\t\t};\n\t}\n\n\taddMostRecentKernel(kernel: INotebookKernel): void {\n\t\tconst key = kernel.id;\n\t\tconst viewType = kernel.viewType;\n\t\tconst recentKeynels =\n\t\t\tthis._mostRecentKernelsMap[viewType] ??\n\t\t\tnew LinkedMap<string, string>();\n\n\t\trecentKeynels.set(key, key, Touch.AsOld);\n\n\t\tif (recentKeynels.size > MAX_KERNELS_IN_HISTORY) {\n\t\t\tconst reserved = [...recentKeynels.entries()].slice(\n\t\t\t\t0,\n\t\t\t\tMAX_KERNELS_IN_HISTORY,\n\t\t\t);\n\t\t\trecentKeynels.fromJSON(reserved);\n\t\t}\n\n\t\tthis._mostRecentKernelsMap[viewType] = recentKeynels;\n\t}\n\n\tprivate _saveState(): void {\n\t\tlet notEmpty = false;\n\t\tfor (const [_, kernels] of Object.entries(this._mostRecentKernelsMap)) {\n\t\t\tnotEmpty = notEmpty || kernels.size > 0;\n\t\t}\n\n\t\tif (notEmpty) {\n\t\t\tconst serialized = this._serialize();\n\t\t\tthis._storageService.store(\n\t\t\t\tNotebookKernelHistoryService.STORAGE_KEY,\n\t\t\t\tJSON.stringify(serialized),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._storageService.remove(\n\t\t\t\tNotebookKernelHistoryService.STORAGE_KEY,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _loadState(): void {\n\t\tconst serialized = this._storageService.get(\n\t\t\tNotebookKernelHistoryService.STORAGE_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tif (serialized) {\n\t\t\ttry {\n\t\t\t\tthis._deserialize(JSON.parse(serialized));\n\t\t\t} catch (e) {\n\t\t\t\tthis._mostRecentKernelsMap = {};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._mostRecentKernelsMap = {};\n\t\t}\n\t}\n\n\tprivate _serialize(): ISerializedKernelsList {\n\t\tconst result: ISerializedKernelsList = Object.create(null);\n\n\t\tfor (const [viewType, kernels] of Object.entries(\n\t\t\tthis._mostRecentKernelsMap,\n\t\t)) {\n\t\t\tresult[viewType] = {\n\t\t\t\tentries: [...kernels.values()],\n\t\t\t};\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _deserialize(serialized: ISerializedKernelsList): void {\n\t\tthis._mostRecentKernelsMap = {};\n\n\t\tfor (const [viewType, kernels] of Object.entries(serialized)) {\n\t\t\tconst linkedMap = new LinkedMap<string, string>();\n\t\t\tconst mapValues: [string, string][] = [];\n\n\t\t\tfor (const entry of kernels.entries) {\n\t\t\t\tmapValues.push([entry, entry]);\n\t\t\t}\n\n\t\t\tlinkedMap.fromJSON(mapValues);\n\t\t\tthis._mostRecentKernelsMap[viewType] = linkedMap;\n\t\t}\n\t}\n\n\t_clear(): void {\n\t\tthis._mostRecentKernelsMap = {};\n\t\tthis._saveState();\n\t}\n}\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"notebook.clearNotebookKernelsMRUCache\",\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"workbench.notebook.clearNotebookKernelsMRUCache\",\n\t\t\t\t\t\"Clear Notebook Kernels MRU Cache\",\n\t\t\t\t),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst historyService = accessor.get(\n\t\t\t\tINotebookKernelHistoryService,\n\t\t\t) as NotebookKernelHistoryService;\n\t\t\thistoryService._clear();\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": []
}
