var C=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var d=(s,o,e,t)=>{for(var i=t>1?void 0:t?S(o,e):o,a=s.length-1,l;a>=0;a--)(l=s[a])&&(i=(t?l(o,e,i):l(i))||i);return t&&i&&C(o,e,i),i},r=(s,o)=>(e,t)=>o(e,t,s);import{Disposable as m,DisposableStore as f}from"../../../../../../base/common/lifecycle.js";import{autorun as b}from"../../../../../../base/common/observable.js";import{IContextKeyService as v}from"../../../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as O}from"../../../../../../platform/instantiation/common/instantiation.js";import{NotebookChatController as E}from"../../controller/chat/notebookChatController.js";import{CellEditState as x,CellFocusMode as _}from"../../notebookBrowser.js";import"../../notebookViewEvents.js";import{CellContentPart as g}from"../cellPart.js";import{CodeCellViewModel as h}from"../../viewModel/codeCellViewModel.js";import{MarkupCellViewModel as u}from"../../viewModel/markupCellViewModel.js";import{NotebookCellExecutionState as p}from"../../../common/notebookCommon.js";import{NOTEBOOK_CELL_EDITABLE as y,NOTEBOOK_CELL_EDITOR_FOCUSED as T,NOTEBOOK_CELL_EXECUTING as K,NOTEBOOK_CELL_EXECUTION_STATE as I,NOTEBOOK_CELL_FOCUSED as L,NOTEBOOK_CELL_HAS_OUTPUTS as N,NOTEBOOK_CELL_INPUT_COLLAPSED as F,NOTEBOOK_CELL_LINE_NUMBERS as D,NOTEBOOK_CELL_MARKDOWN_EDIT_MODE as k,NOTEBOOK_CELL_OUTPUT_COLLAPSED as M,NOTEBOOK_CELL_RESOURCE as R,NOTEBOOK_CELL_TYPE as B,NOTEBOOK_CELL_GENERATED_BY_CHAT as w,NOTEBOOK_CELL_HAS_ERROR_DIAGNOSTICS as A}from"../../../common/notebookContextKeys.js";import{INotebookExecutionStateService as U,NotebookExecutionType as H}from"../../../common/notebookExecutionStateService.js";let c=class extends g{constructor(e,t){super();this.instantiationService=t;this.cellContextKeyManager=this._register(this.instantiationService.createInstance(n,e,void 0))}cellContextKeyManager;didRenderCell(e){this.cellContextKeyManager.updateForElement(e)}};c=d([r(1,O)],c);let n=class extends m{constructor(e,t,i,a){super();this.notebookEditor=e;this.element=t;this._contextKeyService=i;this._notebookExecutionStateService=a;this._contextKeyService.bufferChangeEvents(()=>{this.cellType=B.bindTo(this._contextKeyService),this.cellEditable=y.bindTo(this._contextKeyService),this.cellFocused=L.bindTo(this._contextKeyService),this.cellEditorFocused=T.bindTo(this._contextKeyService),this.markdownEditMode=k.bindTo(this._contextKeyService),this.cellRunState=I.bindTo(this._contextKeyService),this.cellExecuting=K.bindTo(this._contextKeyService),this.cellHasOutputs=N.bindTo(this._contextKeyService),this.cellContentCollapsed=F.bindTo(this._contextKeyService),this.cellOutputCollapsed=M.bindTo(this._contextKeyService),this.cellLineNumbers=D.bindTo(this._contextKeyService),this.cellGeneratedByChat=w.bindTo(this._contextKeyService),this.cellResource=R.bindTo(this._contextKeyService),this.cellHasErrorDiagnostics=A.bindTo(this._contextKeyService),t&&this.updateForElement(t)}),this._register(this._notebookExecutionStateService.onDidChangeExecution(l=>{l.type===H.cell&&this.element&&l.affectsCell(this.element.uri)&&this.updateForExecutionState()}))}cellType;cellEditable;cellFocused;cellEditorFocused;cellRunState;cellExecuting;cellHasOutputs;cellContentCollapsed;cellOutputCollapsed;cellLineNumbers;cellResource;cellGeneratedByChat;cellHasErrorDiagnostics;markdownEditMode;elementDisposables=this._register(new f);updateForElement(e){if(this.elementDisposables.clear(),this.element=e,!e)return;this.elementDisposables.add(e.onDidChangeState(i=>this.onDidChangeState(i))),e instanceof h&&(this.elementDisposables.add(e.onDidChangeOutputs(()=>this.updateForOutputs())),this.elementDisposables.add(b(i=>{this.cellHasErrorDiagnostics.set(!!i.readObservable(e.excecutionError))}))),this.elementDisposables.add(this.notebookEditor.onDidChangeActiveCell(()=>this.updateForFocusState())),this.element instanceof u?this.cellType.set("markup"):this.element instanceof h&&this.cellType.set("code"),this._contextKeyService.bufferChangeEvents(()=>{this.updateForFocusState(),this.updateForExecutionState(),this.updateForEditState(),this.updateForCollapseState(),this.updateForOutputs(),this.updateForChat(),this.cellLineNumbers.set(this.element.lineNumbers),this.cellResource.set(this.element.uri.toString())});const t=E.get(this.notebookEditor);t&&this.elementDisposables.add(t.onDidChangePromptCache(i=>{i.cell.toString()===this.element.uri.toString()&&this.updateForChat()}))}onDidChangeState(e){this._contextKeyService.bufferChangeEvents(()=>{e.internalMetadataChanged&&this.updateForExecutionState(),e.editStateChanged&&this.updateForEditState(),e.focusModeChanged&&this.updateForFocusState(),e.cellLineNumberChanged&&this.cellLineNumbers.set(this.element.lineNumbers),(e.inputCollapsedChanged||e.outputCollapsedChanged)&&this.updateForCollapseState()})}updateForFocusState(){if(!this.element)return;const e=this.notebookEditor.getActiveCell();this.cellFocused.set(this.notebookEditor.getActiveCell()===this.element),e===this.element?this.cellEditorFocused.set(this.element.focusMode===_.Editor):this.cellEditorFocused.set(!1)}updateForExecutionState(){if(!this.element)return;const e=this.element.internalMetadata;this.cellEditable.set(!this.notebookEditor.isReadOnly);const t=this._notebookExecutionStateService.getCellExecution(this.element.uri);this.element instanceof u?(this.cellRunState.reset(),this.cellExecuting.reset()):t?.state===p.Executing?(this.cellRunState.set("executing"),this.cellExecuting.set(!0)):t?.state===p.Pending||t?.state===p.Unconfirmed?(this.cellRunState.set("pending"),this.cellExecuting.set(!0)):e.lastRunSuccess===!0?(this.cellRunState.set("succeeded"),this.cellExecuting.set(!1)):e.lastRunSuccess===!1?(this.cellRunState.set("failed"),this.cellExecuting.set(!1)):(this.cellRunState.set("idle"),this.cellExecuting.set(!1))}updateForEditState(){this.element&&(this.element instanceof u?this.markdownEditMode.set(this.element.getEditState()===x.Editing):this.markdownEditMode.set(!1))}updateForCollapseState(){this.element&&(this.cellContentCollapsed.set(!!this.element.isInputCollapsed),this.cellOutputCollapsed.set(!!this.element.isOutputCollapsed))}updateForOutputs(){this.element instanceof h?this.cellHasOutputs.set(this.element.outputsViewModels.length>0):this.cellHasOutputs.set(!1)}updateForChat(){const e=E.get(this.notebookEditor);if(!e||!this.element){this.cellGeneratedByChat.set(!1);return}this.cellGeneratedByChat.set(e.isCellGeneratedByChat(this.element))}};n=d([r(2,v),r(3,U)],n);export{n as CellContextKeyManager,c as CellContextKeyPart};
