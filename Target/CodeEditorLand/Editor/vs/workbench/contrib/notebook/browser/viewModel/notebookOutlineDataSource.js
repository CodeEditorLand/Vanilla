var m=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var v=(c,t,r,e)=>{for(var i=e>1?void 0:e?E(t,r):t,n=c.length-1,d;n>=0;n--)(d=c[n])&&(i=(e?d(t,r,i):d(i))||i);return e&&i&&m(t,r,i),i},f=(c,t)=>(r,e)=>t(r,e,c);import{Emitter as y}from"../../../../../base/common/event.js";import{DisposableStore as _,MutableDisposable as b}from"../../../../../base/common/lifecycle.js";import{isEqual as k}from"../../../../../base/common/resources.js";import"../../../../../base/common/uri.js";import{IConfigurationService as S}from"../../../../../platform/configuration/common/configuration.js";import{IMarkerService as C}from"../../../../../platform/markers/common/markers.js";import"../notebookBrowser.js";import{CellKind as O}from"../../common/notebookCommon.js";import{INotebookExecutionStateService as I}from"../../common/notebookExecutionStateService.js";import{OutlineConfigKeys as g}from"../../../../services/outline/browser/outline.js";import"./OutlineEntry.js";import{IOutlineModelService as M}from"../../../../../editor/contrib/documentSymbols/browser/outlineModel.js";import"../../../../../base/common/cancellation.js";import{NotebookOutlineEntryFactory as w}from"./notebookOutlineEntryFactory.js";let p=class{constructor(t,r,e,i,n){this._editor=t;this._notebookExecutionStateService=r;this._outlineModelService=e;this._markerService=i;this._configurationService=n;this._outlineEntryFactory=new w(this._notebookExecutionStateService),this.recomputeState()}_disposables=new _;_onDidChange=new y;onDidChange=this._onDidChange.event;_uri;_entries=[];_activeEntry;_outlineEntryFactory;get activeElement(){return this._activeEntry}get entries(){return this._entries}get isEmpty(){return this._entries.length===0}get uri(){return this._uri}async computeFullSymbols(t){const e=this._editor?.getViewModel()?.viewCells.filter(i=>i.cellKind===O.Code);if(e){const i=[];for(const n of e.slice(0,100))i.push(this._outlineEntryFactory.cacheSymbols(n,this._outlineModelService,t));await Promise.allSettled(i)}this.recomputeState()}recomputeState(){if(this._disposables.clear(),this._activeEntry=void 0,this._uri=void 0,!this._editor.hasModel())return;this._uri=this._editor.textModel.uri;const t=this._editor;if(t.getLength()===0)return;const r=t.getViewModel().viewCells,e=[];for(const o of r)e.push(...this._outlineEntryFactory.getOutlineEntries(o,e.length));if(e.length>0){const o=[e[0]],l=[e[0]];for(let u=1;u<e.length;u++){const s=e[u];for(;;){const a=l.length;if(a===0){o.push(s),l.push(s);break}else{const h=l[a-1];if(h.level<s.level){h.addChild(s),l.push(s);break}else l.pop()}}}this._entries=o}const i=new b;this._disposables.add(i);const n=()=>{if(t.isDisposed)return;const o=s=>{for(const a of this._entries)s?a.clearMarkers():a.updateMarkers(this._markerService)},l=this._configurationService.getValue("problems.visibility");if(l===void 0)return;const u=this._configurationService.getValue(g.problemsEnabled);l&&u?(i.value=this._markerService.onMarkerChanged(s=>{if(t.isDisposed){console.error("notebook editor is disposed");return}s.some(a=>t.getCellsInRange().some(h=>k(h.uri,a)))&&(o(!1),this._onDidChange.fire({}))}),o(!1)):(i.clear(),o(!0))};n(),this._disposables.add(this._configurationService.onDidChangeConfiguration(o=>{(o.affectsConfiguration("problems.visibility")||o.affectsConfiguration(g.problemsEnabled))&&(n(),this._onDidChange.fire({}))}));const{changeEventTriggered:d}=this.recomputeActive();d||this._onDidChange.fire({})}recomputeActive(){let t;const r=this._editor;if(r&&r.hasModel()&&r.getLength()>0){const e=r.cellAt(r.getFocus().start);if(e){for(const i of this._entries)if(t=i.find(e,[]),t)break}}return t!==this._activeEntry?(this._activeEntry=t,this._onDidChange.fire({affectOnlyActiveElement:!0}),{changeEventTriggered:!0}):{changeEventTriggered:!1}}dispose(){this._entries.length=0,this._activeEntry=void 0,this._disposables.dispose()}};p=v([f(1,I),f(2,M),f(3,C),f(4,S)],p);export{p as NotebookCellOutlineDataSource};
