{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/coreActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from '../../../../../base/common/uri.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { Action2, IAction2Options, MenuId, MenuRegistry } from '../../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { getNotebookEditorFromEditorPane, IActiveNotebookEditor, ICellViewModel, cellRangeToViewCells, ICellOutputViewModel } from '../notebookBrowser.js';\nimport { INTERACTIVE_WINDOW_IS_ACTIVE_EDITOR, NOTEBOOK_EDITOR_EDITABLE, NOTEBOOK_EDITOR_FOCUSED, NOTEBOOK_IS_ACTIVE_EDITOR, NOTEBOOK_KERNEL_COUNT, NOTEBOOK_KERNEL_SOURCE_COUNT } from '../../common/notebookContextKeys.js';\nimport { ICellRange, isICellRange } from '../../common/notebookRange.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { isEditorCommandsContext } from '../../../../common/editor.js';\nimport { INotebookEditorService } from '../services/notebookEditorService.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from '../../../../../base/common/actions.js';\nimport { TypeConstraint } from '../../../../../base/common/types.js';\nimport { IJSONSchema } from '../../../../../base/common/jsonSchema.js';\nimport { MarshalledId } from '../../../../../base/common/marshallingIds.js';\nimport { ICodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { isEqual } from '../../../../../base/common/resources.js';\n\n// Kernel Command\nexport const SELECT_KERNEL_ID = '_notebook.selectKernel';\nexport const NOTEBOOK_ACTIONS_CATEGORY = localize2('notebookActions.category', 'Notebook');\n\nexport const CELL_TITLE_CELL_GROUP_ID = 'inline/cell';\nexport const CELL_TITLE_OUTPUT_GROUP_ID = 'inline/output';\n\nexport const NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT = KeybindingWeight.EditorContrib; // smaller than Suggest Widget, etc\nexport const NOTEBOOK_OUTPUT_WEBVIEW_ACTION_WEIGHT = KeybindingWeight.WorkbenchContrib + 1; // higher than Workbench contribution (such as Notebook List View), etc\n\nexport const enum CellToolbarOrder {\n\tEditCell,\n\tExecuteAboveCells,\n\tExecuteCellAndBelow,\n\tSaveCell,\n\tSplitCell,\n\tClearCellOutput\n}\n\nexport const enum CellOverflowToolbarGroups {\n\tCopy = '1_copy',\n\tInsert = '2_insert',\n\tEdit = '3_edit',\n\tShare = '4_share'\n}\n\nexport interface INotebookActionContext {\n\treadonly cell?: ICellViewModel;\n\treadonly notebookEditor: IActiveNotebookEditor;\n\treadonly ui?: boolean;\n\treadonly selectedCells?: readonly ICellViewModel[];\n\treadonly autoReveal?: boolean;\n}\n\nexport interface INotebookCellToolbarActionContext extends INotebookActionContext {\n\treadonly ui: true;\n\treadonly cell: ICellViewModel;\n}\n\nexport interface INotebookCommandContext extends INotebookActionContext {\n\treadonly ui: false;\n\treadonly selectedCells: readonly ICellViewModel[];\n}\n\nexport interface INotebookCellActionContext extends INotebookActionContext {\n\tcell: ICellViewModel;\n}\n\nexport interface INotebookOutputActionContext extends INotebookCellActionContext {\n\toutputViewModel: ICellOutputViewModel;\n}\n\nexport function getContextFromActiveEditor(editorService: IEditorService): INotebookActionContext | undefined {\n\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\tif (!editor || !editor.hasModel()) {\n\t\treturn;\n\t}\n\n\tconst activeCell = editor.getActiveCell();\n\tconst selectedCells = editor.getSelectionViewModels();\n\treturn {\n\t\tcell: activeCell,\n\t\tselectedCells,\n\t\tnotebookEditor: editor\n\t};\n}\n\nfunction getWidgetFromUri(accessor: ServicesAccessor, uri: URI) {\n\tconst notebookEditorService = accessor.get(INotebookEditorService);\n\tconst widget = notebookEditorService.listNotebookEditors().find(widget => widget.hasModel() && widget.textModel.uri.toString() === uri.toString());\n\n\tif (widget && widget.hasModel()) {\n\t\treturn widget;\n\t}\n\n\treturn undefined;\n}\n\nexport function getContextFromUri(accessor: ServicesAccessor, context?: any) {\n\tconst uri = URI.revive(context);\n\n\tif (uri) {\n\t\tconst widget = getWidgetFromUri(accessor, uri);\n\n\t\tif (widget) {\n\t\t\treturn {\n\t\t\t\tnotebookEditor: widget,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function findTargetCellEditor(context: INotebookCellActionContext, targetCell: ICellViewModel) {\n\tlet foundEditor: ICodeEditor | undefined = undefined;\n\tfor (const [, codeEditor] of context.notebookEditor.codeEditors) {\n\t\tif (isEqual(codeEditor.getModel()?.uri, targetCell.uri)) {\n\t\t\tfoundEditor = codeEditor;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn foundEditor;\n}\n\nexport abstract class NotebookAction extends Action2 {\n\tconstructor(desc: IAction2Options) {\n\t\tif (desc.f1 !== false) {\n\t\t\tdesc.f1 = false;\n\t\t\tconst f1Menu = {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: ContextKeyExpr.or(NOTEBOOK_IS_ACTIVE_EDITOR, INTERACTIVE_WINDOW_IS_ACTIVE_EDITOR)\n\t\t\t};\n\n\t\t\tif (!desc.menu) {\n\t\t\t\tdesc.menu = [];\n\t\t\t} else if (!Array.isArray(desc.menu)) {\n\t\t\t\tdesc.menu = [desc.menu];\n\t\t\t}\n\n\t\t\tdesc.menu = [\n\t\t\t\t...desc.menu,\n\t\t\t\tf1Menu\n\t\t\t];\n\t\t}\n\n\t\tdesc.category = NOTEBOOK_ACTIONS_CATEGORY;\n\n\t\tsuper(desc);\n\t}\n\n\tasync run(accessor: ServicesAccessor, context?: any, ...additionalArgs: any[]): Promise<void> {\n\t\tconst isFromUI = !!context;\n\t\tconst from = isFromUI ? (this.isNotebookActionContext(context) ? 'notebookToolbar' : 'editorToolbar') : undefined;\n\t\tif (!this.isNotebookActionContext(context)) {\n\t\t\tcontext = this.getEditorContextFromArgsOrActive(accessor, context, ...additionalArgs);\n\t\t\tif (!context) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (from !== undefined) {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\ttelemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: this.desc.id, from: from });\n\t\t}\n\n\t\treturn this.runWithContext(accessor, context);\n\t}\n\n\tabstract runWithContext(accessor: ServicesAccessor, context: INotebookActionContext): Promise<void>;\n\n\tprivate isNotebookActionContext(context?: unknown): context is INotebookActionContext {\n\t\treturn !!context && !!(context as INotebookActionContext).notebookEditor;\n\t}\n\n\tgetEditorContextFromArgsOrActive(accessor: ServicesAccessor, context?: any, ...additionalArgs: any[]): INotebookActionContext | undefined {\n\t\treturn getContextFromActiveEditor(accessor.get(IEditorService));\n\t}\n}\n\n// todo@rebornix, replace NotebookAction with this\nexport abstract class NotebookMultiCellAction extends Action2 {\n\tconstructor(desc: IAction2Options) {\n\t\tif (desc.f1 !== false) {\n\t\t\tdesc.f1 = false;\n\t\t\tconst f1Menu = {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: NOTEBOOK_IS_ACTIVE_EDITOR\n\t\t\t};\n\n\t\t\tif (!desc.menu) {\n\t\t\t\tdesc.menu = [];\n\t\t\t} else if (!Array.isArray(desc.menu)) {\n\t\t\t\tdesc.menu = [desc.menu];\n\t\t\t}\n\n\t\t\tdesc.menu = [\n\t\t\t\t...desc.menu,\n\t\t\t\tf1Menu\n\t\t\t];\n\t\t}\n\n\t\tdesc.category = NOTEBOOK_ACTIONS_CATEGORY;\n\n\t\tsuper(desc);\n\t}\n\n\tparseArgs(accessor: ServicesAccessor, ...args: any[]): INotebookCommandContext | undefined {\n\t\treturn undefined;\n\t}\n\n\tabstract runWithContext(accessor: ServicesAccessor, context: INotebookCommandContext | INotebookCellToolbarActionContext): Promise<void>;\n\n\tprivate isCellToolbarContext(context?: unknown): context is INotebookCellToolbarActionContext {\n\t\treturn !!context && !!(context as INotebookActionContext).notebookEditor && (context as any).$mid === MarshalledId.NotebookCellActionContext;\n\t}\n\n\t/**\n\t * The action/command args are resolved in following order\n\t * `run(accessor, cellToolbarContext)` from cell toolbar\n\t * `run(accessor, ...args)` from command service with arguments\n\t * `run(accessor, undefined)` from keyboard shortcuts, command palatte, etc\n\t */\n\tasync run(accessor: ServicesAccessor, ...additionalArgs: any[]): Promise<void> {\n\t\tconst context = additionalArgs[0];\n\t\tconst isFromCellToolbar = this.isCellToolbarContext(context);\n\t\tconst isFromEditorToolbar = isEditorCommandsContext(context);\n\t\tconst from = isFromCellToolbar ? 'cellToolbar' : (isFromEditorToolbar ? 'editorToolbar' : 'other');\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\tif (isFromCellToolbar) {\n\t\t\ttelemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: this.desc.id, from: from });\n\t\t\treturn this.runWithContext(accessor, context);\n\t\t}\n\n\t\t// handle parsed args\n\n\t\tconst parsedArgs = this.parseArgs(accessor, ...additionalArgs);\n\t\tif (parsedArgs) {\n\t\t\ttelemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: this.desc.id, from: from });\n\t\t\treturn this.runWithContext(accessor, parsedArgs);\n\t\t}\n\n\t\t// no parsed args, try handle active editor\n\t\tconst editor = getEditorFromArgsOrActivePane(accessor);\n\t\tif (editor) {\n\t\t\tconst selectedCellRange: ICellRange[] = editor.getSelections().length === 0 ? [editor.getFocus()] : editor.getSelections();\n\n\t\t\ttelemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: this.desc.id, from: from });\n\n\t\t\treturn this.runWithContext(accessor, {\n\t\t\t\tui: false,\n\t\t\t\tnotebookEditor: editor,\n\t\t\t\tselectedCells: cellRangeToViewCells(editor, selectedCellRange)\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport abstract class NotebookCellAction<T = INotebookCellActionContext> extends NotebookAction {\n\tprotected isCellActionContext(context?: unknown): context is INotebookCellActionContext {\n\t\treturn !!context && !!(context as INotebookCellActionContext).notebookEditor && !!(context as INotebookCellActionContext).cell;\n\t}\n\n\tprotected getCellContextFromArgs(accessor: ServicesAccessor, context?: T, ...additionalArgs: any[]): INotebookCellActionContext | undefined {\n\t\treturn undefined;\n\t}\n\n\toverride async run(accessor: ServicesAccessor, context?: INotebookCellActionContext, ...additionalArgs: any[]): Promise<void> {\n\t\tif (this.isCellActionContext(context)) {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\ttelemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: this.desc.id, from: 'cellToolbar' });\n\n\t\t\treturn this.runWithContext(accessor, context);\n\t\t}\n\n\t\tconst contextFromArgs = this.getCellContextFromArgs(accessor, context, ...additionalArgs);\n\n\t\tif (contextFromArgs) {\n\t\t\treturn this.runWithContext(accessor, contextFromArgs);\n\t\t}\n\n\t\tconst activeEditorContext = this.getEditorContextFromArgsOrActive(accessor);\n\t\tif (this.isCellActionContext(activeEditorContext)) {\n\t\t\treturn this.runWithContext(accessor, activeEditorContext);\n\t\t}\n\t}\n\n\tabstract override runWithContext(accessor: ServicesAccessor, context: INotebookCellActionContext): Promise<void>;\n}\n\nexport const executeNotebookCondition = ContextKeyExpr.or(ContextKeyExpr.greater(NOTEBOOK_KERNEL_COUNT.key, 0), ContextKeyExpr.greater(NOTEBOOK_KERNEL_SOURCE_COUNT.key, 0));\n\ninterface IMultiCellArgs {\n\tranges: ICellRange[];\n\tdocument?: URI;\n\tautoReveal?: boolean;\n}\n\nfunction isMultiCellArgs(arg: unknown): arg is IMultiCellArgs {\n\tif (arg === undefined) {\n\t\treturn false;\n\t}\n\tconst ranges = (arg as IMultiCellArgs).ranges;\n\tif (!ranges) {\n\t\treturn false;\n\t}\n\n\tif (!Array.isArray(ranges) || ranges.some(range => !isICellRange(range))) {\n\t\treturn false;\n\t}\n\n\tif ((arg as IMultiCellArgs).document) {\n\t\tconst uri = URI.revive((arg as IMultiCellArgs).document);\n\n\t\tif (!uri) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function getEditorFromArgsOrActivePane(accessor: ServicesAccessor, context?: UriComponents): IActiveNotebookEditor | undefined {\n\tconst editorFromUri = getContextFromUri(accessor, context)?.notebookEditor;\n\n\tif (editorFromUri) {\n\t\treturn editorFromUri;\n\t}\n\n\tconst editor = getNotebookEditorFromEditorPane(accessor.get(IEditorService).activeEditorPane);\n\tif (!editor || !editor.hasModel()) {\n\t\treturn;\n\t}\n\n\treturn editor;\n}\n\nexport function parseMultiCellExecutionArgs(accessor: ServicesAccessor, ...args: any[]): INotebookCommandContext | undefined {\n\tconst firstArg = args[0];\n\n\tif (isMultiCellArgs(firstArg)) {\n\t\tconst editor = getEditorFromArgsOrActivePane(accessor, firstArg.document);\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ranges = firstArg.ranges;\n\t\tconst selectedCells = ranges.map(range => editor.getCellsInRange(range).slice(0)).flat();\n\t\tconst autoReveal = firstArg.autoReveal;\n\t\treturn {\n\t\t\tui: false,\n\t\t\tnotebookEditor: editor,\n\t\t\tselectedCells,\n\t\t\tautoReveal\n\t\t};\n\t}\n\n\t// handle legacy arguments\n\tif (isICellRange(firstArg)) {\n\t\t// cellRange, document\n\t\tconst secondArg = args[1];\n\t\tconst editor = getEditorFromArgsOrActivePane(accessor, secondArg);\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn {\n\t\t\tui: false,\n\t\t\tnotebookEditor: editor,\n\t\t\tselectedCells: editor.getCellsInRange(firstArg)\n\t\t};\n\t}\n\n\t// let's just execute the active cell\n\tconst context = getContextFromActiveEditor(accessor.get(IEditorService));\n\treturn context ? {\n\t\tui: false,\n\t\tnotebookEditor: context.notebookEditor,\n\t\tselectedCells: context.selectedCells ?? [],\n\t\tcell: context.cell\n\t} : undefined;\n}\n\nexport const cellExecutionArgs: ReadonlyArray<{\n\treadonly name: string;\n\treadonly isOptional?: boolean;\n\treadonly description?: string;\n\treadonly constraint?: TypeConstraint;\n\treadonly schema?: IJSONSchema;\n}> = [\n\t\t{\n\t\t\tisOptional: true,\n\t\t\tname: 'options',\n\t\t\tdescription: 'The cell range options',\n\t\t\tschema: {\n\t\t\t\t'type': 'object',\n\t\t\t\t'required': ['ranges'],\n\t\t\t\t'properties': {\n\t\t\t\t\t'ranges': {\n\t\t\t\t\t\t'type': 'array',\n\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t\t\t'required': ['start', 'end'],\n\t\t\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t\t\t'start': {\n\t\t\t\t\t\t\t\t\t\t'type': 'number'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t'end': {\n\t\t\t\t\t\t\t\t\t\t'type': 'number'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t'document': {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'description': 'The document uri',\n\t\t\t\t\t},\n\t\t\t\t\t'autoReveal': {\n\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t'description': 'Whether the cell should be revealed into view automatically'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t];\n\n\nMenuRegistry.appendMenuItem(MenuId.NotebookCellTitle, {\n\tsubmenu: MenuId.NotebookCellInsert,\n\ttitle: localize('notebookMenu.insertCell', \"Insert Cell\"),\n\tgroup: CellOverflowToolbarGroups.Insert,\n\twhen: NOTEBOOK_EDITOR_EDITABLE.isEqualTo(true)\n});\n\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n\tsubmenu: MenuId.NotebookCellTitle,\n\ttitle: localize('notebookMenu.cellTitle', \"Notebook Cell\"),\n\tgroup: CellOverflowToolbarGroups.Insert,\n\twhen: NOTEBOOK_EDITOR_FOCUSED\n});\n\nMenuRegistry.appendMenuItem(MenuId.NotebookCellTitle, {\n\ttitle: localize('miShare', \"Share\"),\n\tsubmenu: MenuId.EditorContextShare,\n\tgroup: CellOverflowToolbarGroups.Share\n});\n"],
  "mappings": "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",
  "names": ["CellToolbarOrder", "CellOverflowToolbarGroups", "widget"]
}
