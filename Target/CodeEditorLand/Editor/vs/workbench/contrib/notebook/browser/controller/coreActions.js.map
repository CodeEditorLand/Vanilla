{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/coreActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tWorkbenchActionExecutedClassification,\n\tWorkbenchActionExecutedEvent,\n} from \"../../../../../base/common/actions.js\";\nimport type { IJSONSchema } from \"../../../../../base/common/jsonSchema.js\";\nimport { MarshalledId } from \"../../../../../base/common/marshallingIds.js\";\nimport { isEqual } from \"../../../../../base/common/resources.js\";\nimport type { TypeConstraint } from \"../../../../../base/common/types.js\";\nimport { URI, type UriComponents } from \"../../../../../base/common/uri.js\";\nimport type { ICodeEditor } from \"../../../../../editor/browser/editorBrowser.js\";\nimport { localize, localize2 } from \"../../../../../nls.js\";\nimport {\n\tAction2,\n\ttype IAction2Options,\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport { ContextKeyExpr } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { KeybindingWeight } from \"../../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { ITelemetryService } from \"../../../../../platform/telemetry/common/telemetry.js\";\nimport { isEditorCommandsContext } from \"../../../../common/editor.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport {\n\tINTERACTIVE_WINDOW_IS_ACTIVE_EDITOR,\n\tNOTEBOOK_EDITOR_EDITABLE,\n\tNOTEBOOK_EDITOR_FOCUSED,\n\tNOTEBOOK_IS_ACTIVE_EDITOR,\n\tNOTEBOOK_KERNEL_COUNT,\n\tNOTEBOOK_KERNEL_SOURCE_COUNT,\n} from \"../../common/notebookContextKeys.js\";\nimport { type ICellRange, isICellRange } from \"../../common/notebookRange.js\";\nimport {\n\ttype IActiveNotebookEditor,\n\ttype ICellOutputViewModel,\n\ttype ICellViewModel,\n\tcellRangeToViewCells,\n\tgetNotebookEditorFromEditorPane,\n} from \"../notebookBrowser.js\";\nimport { INotebookEditorService } from \"../services/notebookEditorService.js\";\n\n// Kernel Command\nexport const SELECT_KERNEL_ID = \"_notebook.selectKernel\";\nexport const NOTEBOOK_ACTIONS_CATEGORY = localize2(\n\t\"notebookActions.category\",\n\t\"Notebook\",\n);\n\nexport const CELL_TITLE_CELL_GROUP_ID = \"inline/cell\";\nexport const CELL_TITLE_OUTPUT_GROUP_ID = \"inline/output\";\n\nexport const NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT =\n\tKeybindingWeight.EditorContrib; // smaller than Suggest Widget, etc\nexport const NOTEBOOK_OUTPUT_WEBVIEW_ACTION_WEIGHT =\n\tKeybindingWeight.WorkbenchContrib + 1; // higher than Workbench contribution (such as Notebook List View), etc\n\nexport enum CellToolbarOrder {\n\tEditCell = 0,\n\tExecuteAboveCells = 1,\n\tExecuteCellAndBelow = 2,\n\tSaveCell = 3,\n\tSplitCell = 4,\n\tClearCellOutput = 5,\n}\n\nexport enum CellOverflowToolbarGroups {\n\tCopy = \"1_copy\",\n\tInsert = \"2_insert\",\n\tEdit = \"3_edit\",\n\tShare = \"4_share\",\n}\n\nexport interface INotebookActionContext {\n\treadonly cell?: ICellViewModel;\n\treadonly notebookEditor: IActiveNotebookEditor;\n\treadonly ui?: boolean;\n\treadonly selectedCells?: readonly ICellViewModel[];\n\treadonly autoReveal?: boolean;\n}\n\nexport interface INotebookCellToolbarActionContext\n\textends INotebookActionContext {\n\treadonly ui: true;\n\treadonly cell: ICellViewModel;\n}\n\nexport interface INotebookCommandContext extends INotebookActionContext {\n\treadonly ui: false;\n\treadonly selectedCells: readonly ICellViewModel[];\n}\n\nexport interface INotebookCellActionContext extends INotebookActionContext {\n\tcell: ICellViewModel;\n}\n\nexport interface INotebookOutputActionContext\n\textends INotebookCellActionContext {\n\toutputViewModel: ICellOutputViewModel;\n}\n\nexport function getContextFromActiveEditor(\n\teditorService: IEditorService,\n): INotebookActionContext | undefined {\n\tconst editor = getNotebookEditorFromEditorPane(\n\t\teditorService.activeEditorPane,\n\t);\n\tif (!editor || !editor.hasModel()) {\n\t\treturn;\n\t}\n\n\tconst activeCell = editor.getActiveCell();\n\tconst selectedCells = editor.getSelectionViewModels();\n\treturn {\n\t\tcell: activeCell,\n\t\tselectedCells,\n\t\tnotebookEditor: editor,\n\t};\n}\n\nfunction getWidgetFromUri(accessor: ServicesAccessor, uri: URI) {\n\tconst notebookEditorService = accessor.get(INotebookEditorService);\n\tconst widget = notebookEditorService\n\t\t.listNotebookEditors()\n\t\t.find(\n\t\t\t(widget) =>\n\t\t\t\twidget.hasModel() &&\n\t\t\t\twidget.textModel.uri.toString() === uri.toString(),\n\t\t);\n\n\tif (widget && widget.hasModel()) {\n\t\treturn widget;\n\t}\n\n\treturn undefined;\n}\n\nexport function getContextFromUri(accessor: ServicesAccessor, context?: any) {\n\tconst uri = URI.revive(context);\n\n\tif (uri) {\n\t\tconst widget = getWidgetFromUri(accessor, uri);\n\n\t\tif (widget) {\n\t\t\treturn {\n\t\t\t\tnotebookEditor: widget,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function findTargetCellEditor(\n\tcontext: INotebookCellActionContext,\n\ttargetCell: ICellViewModel,\n) {\n\tlet foundEditor: ICodeEditor | undefined;\n\tfor (const [, codeEditor] of context.notebookEditor.codeEditors) {\n\t\tif (isEqual(codeEditor.getModel()?.uri, targetCell.uri)) {\n\t\t\tfoundEditor = codeEditor;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn foundEditor;\n}\n\nexport abstract class NotebookAction extends Action2 {\n\tconstructor(desc: IAction2Options) {\n\t\tif (desc.f1 !== false) {\n\t\t\tdesc.f1 = false;\n\t\t\tconst f1Menu = {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\tNOTEBOOK_IS_ACTIVE_EDITOR,\n\t\t\t\t\tINTERACTIVE_WINDOW_IS_ACTIVE_EDITOR,\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tif (!desc.menu) {\n\t\t\t\tdesc.menu = [];\n\t\t\t} else if (!Array.isArray(desc.menu)) {\n\t\t\t\tdesc.menu = [desc.menu];\n\t\t\t}\n\n\t\t\tdesc.menu = [...desc.menu, f1Menu];\n\t\t}\n\n\t\tdesc.category = NOTEBOOK_ACTIONS_CATEGORY;\n\n\t\tsuper(desc);\n\t}\n\n\tasync run(\n\t\taccessor: ServicesAccessor,\n\t\tcontext?: any,\n\t\t...additionalArgs: any[]\n\t): Promise<void> {\n\t\tconst isFromUI = !!context;\n\t\tconst from = isFromUI\n\t\t\t? this.isNotebookActionContext(context)\n\t\t\t\t? \"notebookToolbar\"\n\t\t\t\t: \"editorToolbar\"\n\t\t\t: undefined;\n\t\tif (!this.isNotebookActionContext(context)) {\n\t\t\tcontext = this.getEditorContextFromArgsOrActive(\n\t\t\t\taccessor,\n\t\t\t\tcontext,\n\t\t\t\t...additionalArgs,\n\t\t\t);\n\t\t\tif (!context) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (from !== undefined) {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\ttelemetryService.publicLog2<\n\t\t\t\tWorkbenchActionExecutedEvent,\n\t\t\t\tWorkbenchActionExecutedClassification\n\t\t\t>(\"workbenchActionExecuted\", { id: this.desc.id, from: from });\n\t\t}\n\n\t\treturn this.runWithContext(accessor, context);\n\t}\n\n\tabstract runWithContext(\n\t\taccessor: ServicesAccessor,\n\t\tcontext: INotebookActionContext,\n\t): Promise<void>;\n\n\tprivate isNotebookActionContext(\n\t\tcontext?: unknown,\n\t): context is INotebookActionContext {\n\t\treturn (\n\t\t\t!!context && !!(context as INotebookActionContext).notebookEditor\n\t\t);\n\t}\n\n\tgetEditorContextFromArgsOrActive(\n\t\taccessor: ServicesAccessor,\n\t\tcontext?: any,\n\t\t...additionalArgs: any[]\n\t): INotebookActionContext | undefined {\n\t\treturn getContextFromActiveEditor(accessor.get(IEditorService));\n\t}\n}\n\n// todo@rebornix, replace NotebookAction with this\nexport abstract class NotebookMultiCellAction extends Action2 {\n\tconstructor(desc: IAction2Options) {\n\t\tif (desc.f1 !== false) {\n\t\t\tdesc.f1 = false;\n\t\t\tconst f1Menu = {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: NOTEBOOK_IS_ACTIVE_EDITOR,\n\t\t\t};\n\n\t\t\tif (!desc.menu) {\n\t\t\t\tdesc.menu = [];\n\t\t\t} else if (!Array.isArray(desc.menu)) {\n\t\t\t\tdesc.menu = [desc.menu];\n\t\t\t}\n\n\t\t\tdesc.menu = [...desc.menu, f1Menu];\n\t\t}\n\n\t\tdesc.category = NOTEBOOK_ACTIONS_CATEGORY;\n\n\t\tsuper(desc);\n\t}\n\n\tparseArgs(\n\t\taccessor: ServicesAccessor,\n\t\t...args: any[]\n\t): INotebookCommandContext | undefined {\n\t\treturn undefined;\n\t}\n\n\tabstract runWithContext(\n\t\taccessor: ServicesAccessor,\n\t\tcontext: INotebookCommandContext | INotebookCellToolbarActionContext,\n\t): Promise<void>;\n\n\tprivate isCellToolbarContext(\n\t\tcontext?: unknown,\n\t): context is INotebookCellToolbarActionContext {\n\t\treturn (\n\t\t\t!!context &&\n\t\t\t!!(context as INotebookActionContext).notebookEditor &&\n\t\t\t(context as any).$mid === MarshalledId.NotebookCellActionContext\n\t\t);\n\t}\n\n\t/**\n\t * The action/command args are resolved in following order\n\t * `run(accessor, cellToolbarContext)` from cell toolbar\n\t * `run(accessor, ...args)` from command service with arguments\n\t * `run(accessor, undefined)` from keyboard shortcuts, command palatte, etc\n\t */\n\tasync run(\n\t\taccessor: ServicesAccessor,\n\t\t...additionalArgs: any[]\n\t): Promise<void> {\n\t\tconst context = additionalArgs[0];\n\t\tconst isFromCellToolbar = this.isCellToolbarContext(context);\n\t\tconst isFromEditorToolbar = isEditorCommandsContext(context);\n\t\tconst from = isFromCellToolbar\n\t\t\t? \"cellToolbar\"\n\t\t\t: isFromEditorToolbar\n\t\t\t\t? \"editorToolbar\"\n\t\t\t\t: \"other\";\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\tif (isFromCellToolbar) {\n\t\t\ttelemetryService.publicLog2<\n\t\t\t\tWorkbenchActionExecutedEvent,\n\t\t\t\tWorkbenchActionExecutedClassification\n\t\t\t>(\"workbenchActionExecuted\", { id: this.desc.id, from: from });\n\t\t\treturn this.runWithContext(accessor, context);\n\t\t}\n\n\t\t// handle parsed args\n\n\t\tconst parsedArgs = this.parseArgs(accessor, ...additionalArgs);\n\t\tif (parsedArgs) {\n\t\t\ttelemetryService.publicLog2<\n\t\t\t\tWorkbenchActionExecutedEvent,\n\t\t\t\tWorkbenchActionExecutedClassification\n\t\t\t>(\"workbenchActionExecuted\", { id: this.desc.id, from: from });\n\t\t\treturn this.runWithContext(accessor, parsedArgs);\n\t\t}\n\n\t\t// no parsed args, try handle active editor\n\t\tconst editor = getEditorFromArgsOrActivePane(accessor);\n\t\tif (editor) {\n\t\t\tconst selectedCellRange: ICellRange[] =\n\t\t\t\teditor.getSelections().length === 0\n\t\t\t\t\t? [editor.getFocus()]\n\t\t\t\t\t: editor.getSelections();\n\n\t\t\ttelemetryService.publicLog2<\n\t\t\t\tWorkbenchActionExecutedEvent,\n\t\t\t\tWorkbenchActionExecutedClassification\n\t\t\t>(\"workbenchActionExecuted\", { id: this.desc.id, from: from });\n\n\t\t\treturn this.runWithContext(accessor, {\n\t\t\t\tui: false,\n\t\t\t\tnotebookEditor: editor,\n\t\t\t\tselectedCells: cellRangeToViewCells(editor, selectedCellRange),\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport abstract class NotebookCellAction<\n\tT = INotebookCellActionContext,\n> extends NotebookAction {\n\tprotected isCellActionContext(\n\t\tcontext?: unknown,\n\t): context is INotebookCellActionContext {\n\t\treturn (\n\t\t\t!!context &&\n\t\t\t!!(context as INotebookCellActionContext).notebookEditor &&\n\t\t\t!!(context as INotebookCellActionContext).cell\n\t\t);\n\t}\n\n\tprotected getCellContextFromArgs(\n\t\taccessor: ServicesAccessor,\n\t\tcontext?: T,\n\t\t...additionalArgs: any[]\n\t): INotebookCellActionContext | undefined {\n\t\treturn undefined;\n\t}\n\n\toverride async run(\n\t\taccessor: ServicesAccessor,\n\t\tcontext?: INotebookCellActionContext,\n\t\t...additionalArgs: any[]\n\t): Promise<void> {\n\t\tif (this.isCellActionContext(context)) {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\ttelemetryService.publicLog2<\n\t\t\t\tWorkbenchActionExecutedEvent,\n\t\t\t\tWorkbenchActionExecutedClassification\n\t\t\t>(\"workbenchActionExecuted\", {\n\t\t\t\tid: this.desc.id,\n\t\t\t\tfrom: \"cellToolbar\",\n\t\t\t});\n\n\t\t\treturn this.runWithContext(accessor, context);\n\t\t}\n\n\t\tconst contextFromArgs = this.getCellContextFromArgs(\n\t\t\taccessor,\n\t\t\tcontext,\n\t\t\t...additionalArgs,\n\t\t);\n\n\t\tif (contextFromArgs) {\n\t\t\treturn this.runWithContext(accessor, contextFromArgs);\n\t\t}\n\n\t\tconst activeEditorContext =\n\t\t\tthis.getEditorContextFromArgsOrActive(accessor);\n\t\tif (this.isCellActionContext(activeEditorContext)) {\n\t\t\treturn this.runWithContext(accessor, activeEditorContext);\n\t\t}\n\t}\n\n\tabstract override runWithContext(\n\t\taccessor: ServicesAccessor,\n\t\tcontext: INotebookCellActionContext,\n\t): Promise<void>;\n}\n\nexport const executeNotebookCondition = ContextKeyExpr.or(\n\tContextKeyExpr.greater(NOTEBOOK_KERNEL_COUNT.key, 0),\n\tContextKeyExpr.greater(NOTEBOOK_KERNEL_SOURCE_COUNT.key, 0),\n);\n\ninterface IMultiCellArgs {\n\tranges: ICellRange[];\n\tdocument?: URI;\n\tautoReveal?: boolean;\n}\n\nfunction isMultiCellArgs(arg: unknown): arg is IMultiCellArgs {\n\tif (arg === undefined) {\n\t\treturn false;\n\t}\n\tconst ranges = (arg as IMultiCellArgs).ranges;\n\tif (!ranges) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!Array.isArray(ranges) ||\n\t\tranges.some((range) => !isICellRange(range))\n\t) {\n\t\treturn false;\n\t}\n\n\tif ((arg as IMultiCellArgs).document) {\n\t\tconst uri = URI.revive((arg as IMultiCellArgs).document);\n\n\t\tif (!uri) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function getEditorFromArgsOrActivePane(\n\taccessor: ServicesAccessor,\n\tcontext?: UriComponents,\n): IActiveNotebookEditor | undefined {\n\tconst editorFromUri = getContextFromUri(accessor, context)?.notebookEditor;\n\n\tif (editorFromUri) {\n\t\treturn editorFromUri;\n\t}\n\n\tconst editor = getNotebookEditorFromEditorPane(\n\t\taccessor.get(IEditorService).activeEditorPane,\n\t);\n\tif (!editor || !editor.hasModel()) {\n\t\treturn;\n\t}\n\n\treturn editor;\n}\n\nexport function parseMultiCellExecutionArgs(\n\taccessor: ServicesAccessor,\n\t...args: any[]\n): INotebookCommandContext | undefined {\n\tconst firstArg = args[0];\n\n\tif (isMultiCellArgs(firstArg)) {\n\t\tconst editor = getEditorFromArgsOrActivePane(\n\t\t\taccessor,\n\t\t\tfirstArg.document,\n\t\t);\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ranges = firstArg.ranges;\n\t\tconst selectedCells = ranges.flatMap((range) =>\n\t\t\teditor.getCellsInRange(range).slice(0),\n\t\t);\n\t\tconst autoReveal = firstArg.autoReveal;\n\t\treturn {\n\t\t\tui: false,\n\t\t\tnotebookEditor: editor,\n\t\t\tselectedCells,\n\t\t\tautoReveal,\n\t\t};\n\t}\n\n\t// handle legacy arguments\n\tif (isICellRange(firstArg)) {\n\t\t// cellRange, document\n\t\tconst secondArg = args[1];\n\t\tconst editor = getEditorFromArgsOrActivePane(accessor, secondArg);\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn {\n\t\t\tui: false,\n\t\t\tnotebookEditor: editor,\n\t\t\tselectedCells: editor.getCellsInRange(firstArg),\n\t\t};\n\t}\n\n\t// let's just execute the active cell\n\tconst context = getContextFromActiveEditor(accessor.get(IEditorService));\n\treturn context\n\t\t? {\n\t\t\t\tui: false,\n\t\t\t\tnotebookEditor: context.notebookEditor,\n\t\t\t\tselectedCells: context.selectedCells ?? [],\n\t\t\t\tcell: context.cell,\n\t\t\t}\n\t\t: undefined;\n}\n\nexport const cellExecutionArgs: ReadonlyArray<{\n\treadonly name: string;\n\treadonly isOptional?: boolean;\n\treadonly description?: string;\n\treadonly constraint?: TypeConstraint;\n\treadonly schema?: IJSONSchema;\n}> = [\n\t{\n\t\tisOptional: true,\n\t\tname: \"options\",\n\t\tdescription: \"The cell range options\",\n\t\tschema: {\n\t\t\ttype: \"object\",\n\t\t\trequired: [\"ranges\"],\n\t\t\tproperties: {\n\t\t\t\tranges: {\n\t\t\t\t\ttype: \"array\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\trequired: [\"start\", \"end\"],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tdocument: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdescription: \"The document uri\",\n\t\t\t\t},\n\t\t\t\tautoReveal: {\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"Whether the cell should be revealed into view automatically\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n];\n\nMenuRegistry.appendMenuItem(MenuId.NotebookCellTitle, {\n\tsubmenu: MenuId.NotebookCellInsert,\n\ttitle: localize(\"notebookMenu.insertCell\", \"Insert Cell\"),\n\tgroup: CellOverflowToolbarGroups.Insert,\n\twhen: NOTEBOOK_EDITOR_EDITABLE.isEqualTo(true),\n});\n\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n\tsubmenu: MenuId.NotebookCellTitle,\n\ttitle: localize(\"notebookMenu.cellTitle\", \"Notebook Cell\"),\n\tgroup: CellOverflowToolbarGroups.Insert,\n\twhen: NOTEBOOK_EDITOR_FOCUSED,\n});\n\nMenuRegistry.appendMenuItem(MenuId.NotebookCellTitle, {\n\ttitle: localize(\"miShare\", \"Share\"),\n\tsubmenu: MenuId.EditorContextShare,\n\tgroup: CellOverflowToolbarGroups.Share,\n});\n"],
  "mappings": "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",
  "names": ["CellToolbarOrder", "CellOverflowToolbarGroups", "widget"]
}
