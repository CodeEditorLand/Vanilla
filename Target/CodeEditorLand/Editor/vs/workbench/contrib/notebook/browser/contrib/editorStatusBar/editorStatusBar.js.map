{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../../../nls.js';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable } from '../../../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../../../base/common/network.js';\nimport { ILanguageFeaturesService } from '../../../../../../editor/common/services/languageFeatures.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../../../platform/log/common/log.js';\nimport { IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../../../common/contributions.js';\nimport { CENTER_ACTIVE_CELL } from '../navigation/arrow.js';\nimport { SELECT_KERNEL_ID } from '../../controller/coreActions.js';\nimport { SELECT_NOTEBOOK_INDENTATION_ID } from '../../controller/editActions.js';\nimport { INotebookEditor, getNotebookEditorFromEditorPane } from '../../notebookBrowser.js';\nimport { NotebookTextModel } from '../../../common/model/notebookTextModel.js';\nimport { NotebookCellsChangeType } from '../../../common/notebookCommon.js';\nimport { INotebookKernel, INotebookKernelService } from '../../../common/notebookKernelService.js';\nimport { IEditorService } from '../../../../../services/editor/common/editorService.js';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from '../../../../../services/statusbar/browser/statusbar.js';\nimport { IEditorGroupsService, IEditorPart } from '../../../../../services/editor/common/editorGroupsService.js';\nimport { Event } from '../../../../../../base/common/event.js';\n\nclass ImplictKernelSelector implements IDisposable {\n\n\treadonly dispose: () => void;\n\n\tconstructor(\n\t\tnotebook: NotebookTextModel,\n\t\tsuggested: INotebookKernel,\n\t\t@INotebookKernelService notebookKernelService: INotebookKernelService,\n\t\t@ILanguageFeaturesService languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tconst disposables = new DisposableStore();\n\t\tthis.dispose = disposables.dispose.bind(disposables);\n\n\t\tconst selectKernel = () => {\n\t\t\tdisposables.clear();\n\t\t\tnotebookKernelService.selectKernelForNotebook(suggested, notebook);\n\t\t};\n\n\t\t// IMPLICITLY select a suggested kernel when the notebook has been changed\n\t\t// e.g change cell source, move cells, etc\n\t\tdisposables.add(notebook.onDidChangeContent(e => {\n\t\t\tfor (const event of e.rawEvents) {\n\t\t\t\tswitch (event.kind) {\n\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellContent:\n\t\t\t\t\tcase NotebookCellsChangeType.ModelChange:\n\t\t\t\t\tcase NotebookCellsChangeType.Move:\n\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellLanguage:\n\t\t\t\t\t\tlogService.trace('IMPLICIT kernel selection because of change event', event.kind);\n\t\t\t\t\t\tselectKernel();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\n\t\t// IMPLICITLY select a suggested kernel when users start to hover. This should\n\t\t// be a strong enough hint that the user wants to interact with the notebook. Maybe\n\t\t// add more triggers like goto-providers or completion-providers\n\t\tdisposables.add(languageFeaturesService.hoverProvider.register({ scheme: Schemas.vscodeNotebookCell, pattern: notebook.uri.path }, {\n\t\t\tprovideHover() {\n\t\t\t\tlogService.trace('IMPLICIT kernel selection because of hover');\n\t\t\t\tselectKernel();\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\t}\n}\n\nexport class KernelStatus extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly _editorDisposables = this._register(new DisposableStore());\n\tprivate readonly _kernelInfoElement = this._register(new DisposableStore());\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => this._updateStatusbar()));\n\t}\n\n\tprivate _updateStatusbar() {\n\t\tthis._editorDisposables.clear();\n\n\t\tconst activeEditor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\tif (!activeEditor) {\n\t\t\t// not a notebook -> clean-up, done\n\t\t\tthis._kernelInfoElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst updateStatus = () => {\n\t\t\tif (activeEditor.notebookOptions.getDisplayOptions().globalToolbar) {\n\t\t\t\t// kernel info rendered in the notebook toolbar already\n\t\t\t\tthis._kernelInfoElement.clear();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notebook = activeEditor.textModel;\n\t\t\tif (notebook) {\n\t\t\t\tthis._showKernelStatus(notebook);\n\t\t\t} else {\n\t\t\t\tthis._kernelInfoElement.clear();\n\t\t\t}\n\t\t};\n\n\t\tthis._editorDisposables.add(this._notebookKernelService.onDidAddKernel(updateStatus));\n\t\tthis._editorDisposables.add(this._notebookKernelService.onDidChangeSelectedNotebooks(updateStatus));\n\t\tthis._editorDisposables.add(this._notebookKernelService.onDidChangeNotebookAffinity(updateStatus));\n\t\tthis._editorDisposables.add(activeEditor.onDidChangeModel(updateStatus));\n\t\tthis._editorDisposables.add(activeEditor.notebookOptions.onDidChangeOptions(updateStatus));\n\t\tupdateStatus();\n\t}\n\n\tprivate _showKernelStatus(notebook: NotebookTextModel) {\n\n\t\tthis._kernelInfoElement.clear();\n\n\t\tconst { selected, suggestions, all } = this._notebookKernelService.getMatchingKernel(notebook);\n\t\tconst suggested = (suggestions.length === 1 ? suggestions[0] : undefined)\n\t\t\t?? (all.length === 1) ? all[0] : undefined;\n\t\tlet isSuggested = false;\n\n\t\tif (all.length === 0) {\n\t\t\t// no kernel -> no status\n\t\t\treturn;\n\n\t\t} else if (selected || suggested) {\n\t\t\t// selected or single kernel\n\t\t\tlet kernel = selected;\n\n\t\t\tif (!kernel) {\n\t\t\t\t// proceed with suggested kernel - show UI and install handler that selects the kernel\n\t\t\t\t// when non trivial interactions with the notebook happen.\n\t\t\t\tkernel = suggested!;\n\t\t\t\tisSuggested = true;\n\t\t\t\tthis._kernelInfoElement.add(this._instantiationService.createInstance(ImplictKernelSelector, notebook, kernel));\n\t\t\t}\n\t\t\tconst tooltip = kernel.description ?? kernel.detail ?? kernel.label;\n\t\t\tthis._kernelInfoElement.add(this._statusbarService.addEntry(\n\t\t\t\t{\n\t\t\t\t\tname: nls.localize('notebook.info', \"Notebook Kernel Info\"),\n\t\t\t\t\ttext: `$(notebook-kernel-select) ${kernel.label}`,\n\t\t\t\t\tariaLabel: kernel.label,\n\t\t\t\t\ttooltip: isSuggested ? nls.localize('tooltop', \"{0} (suggestion)\", tooltip) : tooltip,\n\t\t\t\t\tcommand: SELECT_KERNEL_ID,\n\t\t\t\t},\n\t\t\t\tSELECT_KERNEL_ID,\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t10\n\t\t\t));\n\n\t\t\tthis._kernelInfoElement.add(kernel.onDidChange(() => this._showKernelStatus(notebook)));\n\n\n\t\t} else {\n\t\t\t// multiple kernels -> show selection hint\n\t\t\tthis._kernelInfoElement.add(this._statusbarService.addEntry(\n\t\t\t\t{\n\t\t\t\t\tname: nls.localize('notebook.select', \"Notebook Kernel Selection\"),\n\t\t\t\t\ttext: nls.localize('kernel.select.label', \"Select Kernel\"),\n\t\t\t\t\tariaLabel: nls.localize('kernel.select.label', \"Select Kernel\"),\n\t\t\t\t\tcommand: SELECT_KERNEL_ID,\n\t\t\t\t\tkind: 'prominent'\n\t\t\t\t},\n\t\t\t\tSELECT_KERNEL_ID,\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t10\n\t\t\t));\n\t\t}\n\t}\n}\n\nexport class ActiveCellStatus extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly _itemDisposables = this._register(new DisposableStore());\n\tprivate readonly _accessor = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => this._update()));\n\t}\n\n\tprivate _update() {\n\t\tthis._itemDisposables.clear();\n\t\tconst activeEditor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\tif (activeEditor) {\n\t\t\tthis._itemDisposables.add(activeEditor.onDidChangeSelection(() => this._show(activeEditor)));\n\t\t\tthis._itemDisposables.add(activeEditor.onDidChangeActiveCell(() => this._show(activeEditor)));\n\t\t\tthis._show(activeEditor);\n\t\t} else {\n\t\t\tthis._accessor.clear();\n\t\t}\n\t}\n\n\tprivate _show(editor: INotebookEditor) {\n\t\tif (!editor.hasModel()) {\n\t\t\tthis._accessor.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst newText = this._getSelectionsText(editor);\n\t\tif (!newText) {\n\t\t\tthis._accessor.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst entry: IStatusbarEntry = {\n\t\t\tname: nls.localize('notebook.activeCellStatusName', \"Notebook Editor Selections\"),\n\t\t\ttext: newText,\n\t\t\tariaLabel: newText,\n\t\t\tcommand: CENTER_ACTIVE_CELL\n\t\t};\n\t\tif (!this._accessor.value) {\n\t\t\tthis._accessor.value = this._statusbarService.addEntry(\n\t\t\t\tentry,\n\t\t\t\t'notebook.activeCellStatus',\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t100\n\t\t\t);\n\t\t} else {\n\t\t\tthis._accessor.value.update(entry);\n\t\t}\n\t}\n\n\tprivate _getSelectionsText(editor: INotebookEditor): string | undefined {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst activeCell = editor.getActiveCell();\n\t\tif (!activeCell) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst idxFocused = editor.getCellIndex(activeCell) + 1;\n\t\tconst numSelected = editor.getSelections().reduce((prev, range) => prev + (range.end - range.start), 0);\n\t\tconst totalCells = editor.getLength();\n\t\treturn numSelected > 1 ?\n\t\t\tnls.localize('notebook.multiActiveCellIndicator', \"Cell {0} ({1} selected)\", idxFocused, numSelected) :\n\t\t\tnls.localize('notebook.singleActiveCellIndicator', \"Cell {0} of {1}\", idxFocused, totalCells);\n\t}\n}\n\nexport class NotebookIndentationStatus extends Disposable {\n\n\tprivate readonly _itemDisposables = this._register(new DisposableStore());\n\tprivate readonly _accessor = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tstatic readonly ID = 'selectNotebookIndentation';\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => this._update()));\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor') || e.affectsConfiguration('notebook')) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _update() {\n\t\tthis._itemDisposables.clear();\n\t\tconst activeEditor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\tif (activeEditor) {\n\t\t\tthis._show(activeEditor);\n\t\t\tthis._itemDisposables.add(activeEditor.onDidChangeSelection(() => {\n\t\t\t\tthis._accessor.clear();\n\t\t\t\tthis._show(activeEditor);\n\t\t\t}));\n\t\t} else {\n\t\t\tthis._accessor.clear();\n\t\t}\n\t}\n\n\tprivate _show(editor: INotebookEditor) {\n\t\tif (!editor.hasModel()) {\n\t\t\tthis._accessor.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst cellOptions = editor.getActiveCell()?.textModel?.getOptions();\n\t\tif (!cellOptions) {\n\t\t\tthis._accessor.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst cellEditorOverridesRaw = editor.notebookOptions.getDisplayOptions().editorOptionsCustomizations;\n\t\tconst indentSize = cellEditorOverridesRaw?.['editor.indentSize'] ?? cellOptions?.indentSize;\n\t\tconst insertSpaces = cellEditorOverridesRaw?.['editor.insertSpaces'] ?? cellOptions?.insertSpaces;\n\t\tconst tabSize = cellEditorOverridesRaw?.['editor.tabSize'] ?? cellOptions?.tabSize;\n\n\t\tconst width = typeof indentSize === 'number' ? indentSize : tabSize;\n\n\t\tconst message = insertSpaces ? `Spaces: ${width}` : `Tab Size: ${width}`;\n\t\tconst newText = message;\n\t\tif (!newText) {\n\t\t\tthis._accessor.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst entry: IStatusbarEntry = {\n\t\t\tname: nls.localize('notebook.indentation', \"Notebook Indentation\"),\n\t\t\ttext: newText,\n\t\t\tariaLabel: newText,\n\t\t\ttooltip: nls.localize('selectNotebookIndentation', \"Select Indentation\"),\n\t\t\tcommand: SELECT_NOTEBOOK_INDENTATION_ID\n\t\t};\n\n\t\tif (!this._accessor.value) {\n\t\t\tthis._accessor.value = this._statusbarService.addEntry(\n\t\t\t\tentry,\n\t\t\t\t'notebook.status.indentation',\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t100.4\n\t\t\t);\n\t\t} else {\n\t\t\tthis._accessor.value.update(entry);\n\t\t}\n\t}\n}\n\nexport class NotebookEditorStatusContribution extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'notebook.contrib.editorStatus';\n\n\tconstructor(\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper();\n\n\t\tfor (const part of editorGroupService.parts) {\n\t\t\tthis.createNotebookStatus(part);\n\t\t}\n\n\t\tthis._register(editorGroupService.onDidCreateAuxiliaryEditorPart(part => this.createNotebookStatus(part)));\n\t}\n\n\tprivate createNotebookStatus(part: IEditorPart): void {\n\t\tconst disposables = new DisposableStore();\n\t\tEvent.once(part.onWillDispose)(() => disposables.dispose());\n\n\t\tconst scopedInstantiationService = this.editorGroupService.getScopedInstantiationService(part);\n\t\tdisposables.add(scopedInstantiationService.createInstance(KernelStatus));\n\t\tdisposables.add(scopedInstantiationService.createInstance(ActiveCellStatus));\n\t\tdisposables.add(scopedInstantiationService.createInstance(NotebookIndentationStatus));\n\t}\n}\n\nregisterWorkbenchContribution2(NotebookEditorStatusContribution.ID, NotebookEditorStatusContribution, WorkbenchPhase.AfterRestored);\n"],
  "mappings": "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",
  "names": []
}
