{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/contributedStatusBarItemController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Throttler } from '../../../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../../../base/common/cancellation.js';\nimport { Disposable, toDisposable } from '../../../../../../base/common/lifecycle.js';\nimport { NotebookVisibleCellObserver } from './notebookVisibleCellObserver.js';\nimport { ICellViewModel, INotebookEditor, INotebookEditorContribution, INotebookViewModel } from '../../notebookBrowser.js';\nimport { registerNotebookContribution } from '../../notebookEditorExtensions.js';\nimport { INotebookCellStatusBarService } from '../../../common/notebookCellStatusBarService.js';\nimport { INotebookCellStatusBarItemList } from '../../../common/notebookCommon.js';\n\nexport class ContributedStatusBarItemController extends Disposable implements INotebookEditorContribution {\n\tstatic id: string = 'workbench.notebook.statusBar.contributed';\n\n\tprivate readonly _visibleCells = new Map<number, CellStatusBarHelper>();\n\n\tprivate readonly _observer: NotebookVisibleCellObserver;\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\t@INotebookCellStatusBarService private readonly _notebookCellStatusBarService: INotebookCellStatusBarService\n\t) {\n\t\tsuper();\n\t\tthis._observer = this._register(new NotebookVisibleCellObserver(this._notebookEditor));\n\t\tthis._register(this._observer.onDidChangeVisibleCells(this._updateVisibleCells, this));\n\n\t\tthis._updateEverything();\n\t\tthis._register(this._notebookCellStatusBarService.onDidChangeProviders(this._updateEverything, this));\n\t\tthis._register(this._notebookCellStatusBarService.onDidChangeItems(this._updateEverything, this));\n\t}\n\n\tprivate _updateEverything(): void {\n\t\tconst newCells = this._observer.visibleCells.filter(cell => !this._visibleCells.has(cell.handle));\n\t\tconst visibleCellHandles = new Set(this._observer.visibleCells.map(item => item.handle));\n\t\tconst currentCellHandles = Array.from(this._visibleCells.keys());\n\t\tconst removedCells = currentCellHandles.filter(handle => !visibleCellHandles.has(handle));\n\t\tconst itemsToUpdate = currentCellHandles.filter(handle => visibleCellHandles.has(handle));\n\n\t\tthis._updateVisibleCells({ added: newCells, removed: removedCells.map(handle => ({ handle })) });\n\t\titemsToUpdate.forEach(handle => this._visibleCells.get(handle)?.update());\n\t}\n\n\tprivate _updateVisibleCells(e: {\n\t\tadded: ICellViewModel[];\n\t\tremoved: { handle: number }[];\n\t}): void {\n\t\tconst vm = this._notebookEditor.getViewModel();\n\t\tif (!vm) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const newCell of e.added) {\n\t\t\tconst helper = new CellStatusBarHelper(vm, newCell, this._notebookCellStatusBarService);\n\t\t\tthis._visibleCells.set(newCell.handle, helper);\n\t\t}\n\n\t\tfor (const oldCell of e.removed) {\n\t\t\tthis._visibleCells.get(oldCell.handle)?.dispose();\n\t\t\tthis._visibleCells.delete(oldCell.handle);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._visibleCells.forEach(cell => cell.dispose());\n\t\tthis._visibleCells.clear();\n\t}\n}\n\nclass CellStatusBarHelper extends Disposable {\n\tprivate _currentItemIds: string[] = [];\n\tprivate _currentItemLists: INotebookCellStatusBarItemList[] = [];\n\n\tprivate _activeToken: CancellationTokenSource | undefined;\n\tprivate _isDisposed = false;\n\n\tprivate readonly _updateThrottler = this._register(new Throttler());\n\n\tconstructor(\n\t\tprivate readonly _notebookViewModel: INotebookViewModel,\n\t\tprivate readonly _cell: ICellViewModel,\n\t\tprivate readonly _notebookCellStatusBarService: INotebookCellStatusBarService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => this._activeToken?.dispose(true)));\n\t\tthis._updateSoon();\n\t\tthis._register(this._cell.model.onDidChangeContent(() => this._updateSoon()));\n\t\tthis._register(this._cell.model.onDidChangeLanguage(() => this._updateSoon()));\n\t\tthis._register(this._cell.model.onDidChangeMetadata(() => this._updateSoon()));\n\t\tthis._register(this._cell.model.onDidChangeInternalMetadata(() => this._updateSoon()));\n\t\tthis._register(this._cell.model.onDidChangeOutputs(() => this._updateSoon()));\n\t}\n\n\tpublic update(): void {\n\t\tthis._updateSoon();\n\t}\n\tprivate _updateSoon(): void {\n\t\t// Wait a tick to make sure that the event is fired to the EH before triggering status bar providers\n\t\tsetTimeout(() => {\n\t\t\tif (!this._isDisposed) {\n\t\t\t\tthis._updateThrottler.queue(() => this._update());\n\t\t\t}\n\t\t}, 0);\n\t}\n\n\tprivate async _update() {\n\t\tconst cellIndex = this._notebookViewModel.getCellIndex(this._cell);\n\t\tconst docUri = this._notebookViewModel.notebookDocument.uri;\n\t\tconst viewType = this._notebookViewModel.notebookDocument.viewType;\n\n\t\tthis._activeToken?.dispose(true);\n\t\tconst tokenSource = this._activeToken = new CancellationTokenSource();\n\t\tconst itemLists = await this._notebookCellStatusBarService.getStatusBarItemsForCell(docUri, cellIndex, viewType, tokenSource.token);\n\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\titemLists.forEach(itemList => itemList.dispose && itemList.dispose());\n\t\t\treturn;\n\t\t}\n\n\t\tconst items = itemLists.map(itemList => itemList.items).flat();\n\t\tconst newIds = this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items }]);\n\n\t\tthis._currentItemLists.forEach(itemList => itemList.dispose && itemList.dispose());\n\t\tthis._currentItemLists = itemLists;\n\t\tthis._currentItemIds = newIds;\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._isDisposed = true;\n\t\tthis._activeToken?.dispose(true);\n\n\t\tthis._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items: [] }]);\n\t\tthis._currentItemLists.forEach(itemList => itemList.dispose && itemList.dispose());\n\t}\n}\n\nregisterNotebookContribution(ContributedStatusBarItemController.id, ContributedStatusBarItemController);\n"],
  "mappings": "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",
  "names": []
}
