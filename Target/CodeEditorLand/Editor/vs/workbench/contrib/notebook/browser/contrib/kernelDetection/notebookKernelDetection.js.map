{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/kernelDetection/notebookKernelDetection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { Disposable, DisposableStore, IDisposable } from '../../../../../../base/common/lifecycle.js';\nimport { Registry } from '../../../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../../../common/contributions.js';\nimport { INotebookKernelService } from '../../../common/notebookKernelService.js';\nimport { INotebookLoggingService } from '../../../common/notebookLoggingService.js';\nimport { IExtensionService } from '../../../../../services/extensions/common/extensions.js';\nimport { LifecyclePhase } from '../../../../../services/lifecycle/common/lifecycle.js';\n\nclass NotebookKernelDetection extends Disposable implements IWorkbenchContribution {\n\tprivate _detectionMap = new Map<string, IDisposable>();\n\tprivate readonly _localDisposableStore = this._register(new DisposableStore());\n\n\tconstructor(\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@INotebookLoggingService private readonly _notebookLoggingService: INotebookLoggingService\n\t) {\n\t\tsuper();\n\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _registerListeners() {\n\t\tthis._localDisposableStore.clear();\n\n\t\tthis._localDisposableStore.add(this._extensionService.onWillActivateByEvent(e => {\n\t\t\tif (e.event.startsWith('onNotebook:')) {\n\t\t\t\tif (this._extensionService.activationEventIsDone(e.event)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// parse the event to get the notebook type\n\t\t\t\tconst notebookType = e.event.substring('onNotebook:'.length);\n\n\t\t\t\tif (notebookType === '*') {\n\t\t\t\t\t// ignore\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet shouldStartDetection = false;\n\n\t\t\t\tconst extensionStatus = this._extensionService.getExtensionsStatus();\n\t\t\t\tthis._extensionService.extensions.forEach(extension => {\n\t\t\t\t\tif (extensionStatus[extension.identifier.value].activationTimes) {\n\t\t\t\t\t\t// already activated\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (extension.activationEvents?.includes(e.event)) {\n\t\t\t\t\t\tshouldStartDetection = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (shouldStartDetection && !this._detectionMap.has(notebookType)) {\n\t\t\t\t\tthis._notebookLoggingService.debug('KernelDetection', `start extension activation for ${notebookType}`);\n\t\t\t\t\tconst task = this._notebookKernelService.registerNotebookKernelDetectionTask({\n\t\t\t\t\t\tnotebookType: notebookType\n\t\t\t\t\t});\n\n\t\t\t\t\tthis._detectionMap.set(notebookType, task);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tlet timer: any = null;\n\n\t\tthis._localDisposableStore.add(this._extensionService.onDidChangeExtensionsStatus(() => {\n\t\t\tif (timer) {\n\t\t\t\tclearTimeout(timer);\n\t\t\t}\n\n\t\t\t// activation state might not be updated yet, postpone to next frame\n\t\t\ttimer = setTimeout(() => {\n\t\t\t\tconst taskToDelete: string[] = [];\n\t\t\t\tfor (const [notebookType, task] of this._detectionMap) {\n\t\t\t\t\tif (this._extensionService.activationEventIsDone(`onNotebook:${notebookType}`)) {\n\t\t\t\t\t\tthis._notebookLoggingService.debug('KernelDetection', `finish extension activation for ${notebookType}`);\n\t\t\t\t\t\ttaskToDelete.push(notebookType);\n\t\t\t\t\t\ttask.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttaskToDelete.forEach(notebookType => {\n\t\t\t\t\tthis._detectionMap.delete(notebookType);\n\t\t\t\t});\n\t\t\t});\n\t\t}));\n\n\t\tthis._localDisposableStore.add({\n\t\t\tdispose: () => {\n\t\t\t\tif (timer) {\n\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(NotebookKernelDetection, LifecyclePhase.Restored);\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,YAAY,iBAAiB,mBAAmB;AACzD,SAAS,gBAAgB;AACzB,SAAS,wBAAwB,iCAAiC,cAAc,2BAA2B;AAC3G,SAAS,8BAA8B;AACvC,SAAS,+BAA+B;AACxC,SAAS,yBAAyB;AAClC,SAAS,sBAAsB;AAE/B,IAAM,0BAAN,cAAsC,WAA6C;AAAA,EAIlF,YAC0C,wBACL,mBACM,yBACzC;AACD,UAAM;AAJmC;AACL;AACM;AAI1C,SAAK,mBAAmB;AAAA,EACzB;AAAA,EA1BD,OAcmF;AAAA;AAAA;AAAA,EAC1E,gBAAgB,oBAAI,IAAyB;AAAA,EACpC,wBAAwB,KAAK,UAAU,IAAI,gBAAgB,CAAC;AAAA,EAYrE,qBAAqB;AAC5B,SAAK,sBAAsB,MAAM;AAEjC,SAAK,sBAAsB,IAAI,KAAK,kBAAkB,sBAAsB,OAAK;AAChF,UAAI,EAAE,MAAM,WAAW,aAAa,GAAG;AACtC,YAAI,KAAK,kBAAkB,sBAAsB,EAAE,KAAK,GAAG;AAC1D;AAAA,QACD;AAGA,cAAM,eAAe,EAAE,MAAM,UAAU,cAAc,MAAM;AAE3D,YAAI,iBAAiB,KAAK;AAEzB;AAAA,QACD;AAEA,YAAI,uBAAuB;AAE3B,cAAM,kBAAkB,KAAK,kBAAkB,oBAAoB;AACnE,aAAK,kBAAkB,WAAW,QAAQ,eAAa;AACtD,cAAI,gBAAgB,UAAU,WAAW,KAAK,EAAE,iBAAiB;AAEhE;AAAA,UACD;AACA,cAAI,UAAU,kBAAkB,SAAS,EAAE,KAAK,GAAG;AAClD,mCAAuB;AAAA,UACxB;AAAA,QACD,CAAC;AAED,YAAI,wBAAwB,CAAC,KAAK,cAAc,IAAI,YAAY,GAAG;AAClE,eAAK,wBAAwB,MAAM,mBAAmB,kCAAkC,YAAY,EAAE;AACtG,gBAAM,OAAO,KAAK,uBAAuB,oCAAoC;AAAA,YAC5E;AAAA,UACD,CAAC;AAED,eAAK,cAAc,IAAI,cAAc,IAAI;AAAA,QAC1C;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,QAAa;AAEjB,SAAK,sBAAsB,IAAI,KAAK,kBAAkB,4BAA4B,MAAM;AACvF,UAAI,OAAO;AACV,qBAAa,KAAK;AAAA,MACnB;AAGA,cAAQ,WAAW,MAAM;AACxB,cAAM,eAAyB,CAAC;AAChC,mBAAW,CAAC,cAAc,IAAI,KAAK,KAAK,eAAe;AACtD,cAAI,KAAK,kBAAkB,sBAAsB,cAAc,YAAY,EAAE,GAAG;AAC/E,iBAAK,wBAAwB,MAAM,mBAAmB,mCAAmC,YAAY,EAAE;AACvG,yBAAa,KAAK,YAAY;AAC9B,iBAAK,QAAQ;AAAA,UACd;AAAA,QACD;AAEA,qBAAa,QAAQ,kBAAgB;AACpC,eAAK,cAAc,OAAO,YAAY;AAAA,QACvC,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC,CAAC;AAEF,SAAK,sBAAsB,IAAI;AAAA,MAC9B,SAAS,6BAAM;AACd,YAAI,OAAO;AACV,uBAAa,KAAK;AAAA,QACnB;AAAA,MACD,GAJS;AAAA,IAKV,CAAC;AAAA,EACF;AACD;AAvFM,0BAAN;AAAA,EAKG;AAAA,EACA;AAAA,EACA;AAAA,GAPG;AAyFN,SAAS,GAAoC,oBAAoB,SAAS,EAAE,8BAA8B,yBAAyB,eAAe,QAAQ;",
  "names": []
}
