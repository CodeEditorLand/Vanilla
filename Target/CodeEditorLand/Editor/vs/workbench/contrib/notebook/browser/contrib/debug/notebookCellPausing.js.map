{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/debug/notebookCellPausing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from '../../../../../../base/common/async.js';\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { Registry } from '../../../../../../platform/registry/common/platform.js';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from '../../../../../common/contributions.js';\nimport { IDebugService } from '../../../../debug/common/debug.js';\nimport { Thread } from '../../../../debug/common/debugModel.js';\nimport { CellUri } from '../../../common/notebookCommon.js';\nimport { CellExecutionUpdateType } from '../../../common/notebookExecutionService.js';\nimport { INotebookExecutionStateService } from '../../../common/notebookExecutionStateService.js';\nimport { LifecyclePhase } from '../../../../../services/lifecycle/common/lifecycle.js';\n\nclass NotebookCellPausing extends Disposable implements IWorkbenchContribution {\n\tprivate readonly _pausedCells = new Set<string>();\n\n\tprivate _scheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(_debugService.getModel().onDidChangeCallStack(() => {\n\t\t\t// First update using the stale callstack if the real callstack is empty, to reduce blinking while stepping.\n\t\t\t// After not pausing for 2s, update again with the latest callstack.\n\t\t\tthis.onDidChangeCallStack(true);\n\t\t\tthis._scheduler.schedule();\n\t\t}));\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => this.onDidChangeCallStack(false), 2000));\n\t}\n\n\tprivate async onDidChangeCallStack(fallBackOnStaleCallstack: boolean): Promise<void> {\n\t\tconst newPausedCells = new Set<string>();\n\n\t\tfor (const session of this._debugService.getModel().getSessions()) {\n\t\t\tfor (const thread of session.getAllThreads()) {\n\t\t\t\tlet callStack = thread.getCallStack();\n\t\t\t\tif (fallBackOnStaleCallstack && !callStack.length) {\n\t\t\t\t\tcallStack = (thread as Thread).getStaleCallStack();\n\t\t\t\t}\n\n\t\t\t\tcallStack.forEach(sf => {\n\t\t\t\t\tconst parsed = CellUri.parse(sf.source.uri);\n\t\t\t\t\tif (parsed) {\n\t\t\t\t\t\tnewPausedCells.add(sf.source.uri.toString());\n\t\t\t\t\t\tthis.editIsPaused(sf.source.uri, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (const uri of this._pausedCells) {\n\t\t\tif (!newPausedCells.has(uri)) {\n\t\t\t\tthis.editIsPaused(URI.parse(uri), false);\n\t\t\t\tthis._pausedCells.delete(uri);\n\t\t\t}\n\t\t}\n\n\t\tnewPausedCells.forEach(cell => this._pausedCells.add(cell));\n\t}\n\n\tprivate editIsPaused(cellUri: URI, isPaused: boolean) {\n\t\tconst parsed = CellUri.parse(cellUri);\n\t\tif (parsed) {\n\t\t\tconst exeState = this._notebookExecutionStateService.getCellExecution(cellUri);\n\t\t\tif (exeState && (exeState.isPaused !== isPaused || !exeState.didPause)) {\n\t\t\t\texeState.update([{\n\t\t\t\t\teditType: CellExecutionUpdateType.ExecutionState,\n\t\t\t\t\tdidPause: true,\n\t\t\t\t\tisPaused\n\t\t\t\t}]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(NotebookCellPausing, LifecyclePhase.Restored);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,cAAc,qBAAqB,wBAAwB,uCAAuC;AAC3G,SAAS,qBAAqB;AAC9B,SAAS,cAAc;AACvB,SAAS,eAAe;AACxB,SAAS,+BAA+B;AACxC,SAAS,sCAAsC;AAC/C,SAAS,sBAAsB;AAE/B,IAAM,sBAAN,cAAkC,WAA6C;AAAA,EAK9E,YACiC,eACiB,gCAChD;AACD,UAAM;AAH0B;AACiB;AAIjD,SAAK,UAAU,cAAc,SAAS,EAAE,qBAAqB,MAAM;AAGlE,WAAK,qBAAqB,IAAI;AAC9B,WAAK,WAAW,SAAS;AAAA,IAC1B,CAAC,CAAC;AACF,SAAK,aAAa,KAAK,UAAU,IAAI,iBAAiB,MAAM,KAAK,qBAAqB,KAAK,GAAG,GAAI,CAAC;AAAA,EACpG;AAAA,EAnCD,OAiB+E;AAAA;AAAA;AAAA,EAC7D,eAAe,oBAAI,IAAY;AAAA,EAExC;AAAA,EAiBR,MAAc,qBAAqB,0BAAkD;AACpF,UAAM,iBAAiB,oBAAI,IAAY;AAEvC,eAAW,WAAW,KAAK,cAAc,SAAS,EAAE,YAAY,GAAG;AAClE,iBAAW,UAAU,QAAQ,cAAc,GAAG;AAC7C,YAAI,YAAY,OAAO,aAAa;AACpC,YAAI,4BAA4B,CAAC,UAAU,QAAQ;AAClD,sBAAa,OAAkB,kBAAkB;AAAA,QAClD;AAEA,kBAAU,QAAQ,QAAM;AACvB,gBAAM,SAAS,QAAQ,MAAM,GAAG,OAAO,GAAG;AAC1C,cAAI,QAAQ;AACX,2BAAe,IAAI,GAAG,OAAO,IAAI,SAAS,CAAC;AAC3C,iBAAK,aAAa,GAAG,OAAO,KAAK,IAAI;AAAA,UACtC;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAEA,eAAW,OAAO,KAAK,cAAc;AACpC,UAAI,CAAC,eAAe,IAAI,GAAG,GAAG;AAC7B,aAAK,aAAa,IAAI,MAAM,GAAG,GAAG,KAAK;AACvC,aAAK,aAAa,OAAO,GAAG;AAAA,MAC7B;AAAA,IACD;AAEA,mBAAe,QAAQ,UAAQ,KAAK,aAAa,IAAI,IAAI,CAAC;AAAA,EAC3D;AAAA,EAEQ,aAAa,SAAc,UAAmB;AACrD,UAAM,SAAS,QAAQ,MAAM,OAAO;AACpC,QAAI,QAAQ;AACX,YAAM,WAAW,KAAK,+BAA+B,iBAAiB,OAAO;AAC7E,UAAI,aAAa,SAAS,aAAa,YAAY,CAAC,SAAS,WAAW;AACvE,iBAAS,OAAO,CAAC;AAAA,UAChB,UAAU,wBAAwB;AAAA,UAClC,UAAU;AAAA,UACV;AAAA,QACD,CAAC,CAAC;AAAA,MACH;AAAA,IACD;AAAA,EACD;AACD;AA/DM,sBAAN;AAAA,EAMG;AAAA,EACA;AAAA,GAPG;AAiEN,SAAS,GAAoC,oBAAoB,SAAS,EAAE,8BAA8B,qBAAqB,eAAe,QAAQ;",
  "names": []
}
