{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/debug/notebookCellPausing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../../../base/common/async.js\";\nimport { Disposable } from \"../../../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../../../base/common/uri.js\";\nimport { Registry } from \"../../../../../../platform/registry/common/platform.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../../../common/contributions.js\";\nimport { LifecyclePhase } from \"../../../../../services/lifecycle/common/lifecycle.js\";\nimport { IDebugService } from \"../../../../debug/common/debug.js\";\nimport type { Thread } from \"../../../../debug/common/debugModel.js\";\nimport { CellUri } from \"../../../common/notebookCommon.js\";\nimport { CellExecutionUpdateType } from \"../../../common/notebookExecutionService.js\";\nimport { INotebookExecutionStateService } from \"../../../common/notebookExecutionStateService.js\";\n\nclass NotebookCellPausing extends Disposable implements IWorkbenchContribution {\n\tprivate readonly _pausedCells = new Set<string>();\n\n\tprivate _scheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INotebookExecutionStateService\n\t\tprivate readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\t_debugService.getModel().onDidChangeCallStack(() => {\n\t\t\t\t// First update using the stale callstack if the real callstack is empty, to reduce blinking while stepping.\n\t\t\t\t// After not pausing for 2s, update again with the latest callstack.\n\t\t\t\tthis.onDidChangeCallStack(true);\n\t\t\t\tthis._scheduler.schedule();\n\t\t\t}),\n\t\t);\n\t\tthis._scheduler = this._register(\n\t\t\tnew RunOnceScheduler(() => this.onDidChangeCallStack(false), 2000),\n\t\t);\n\t}\n\n\tprivate async onDidChangeCallStack(\n\t\tfallBackOnStaleCallstack: boolean,\n\t): Promise<void> {\n\t\tconst newPausedCells = new Set<string>();\n\n\t\tfor (const session of this._debugService.getModel().getSessions()) {\n\t\t\tfor (const thread of session.getAllThreads()) {\n\t\t\t\tlet callStack = thread.getCallStack();\n\t\t\t\tif (fallBackOnStaleCallstack && !callStack.length) {\n\t\t\t\t\tcallStack = (thread as Thread).getStaleCallStack();\n\t\t\t\t}\n\n\t\t\t\tcallStack.forEach((sf) => {\n\t\t\t\t\tconst parsed = CellUri.parse(sf.source.uri);\n\t\t\t\t\tif (parsed) {\n\t\t\t\t\t\tnewPausedCells.add(sf.source.uri.toString());\n\t\t\t\t\t\tthis.editIsPaused(sf.source.uri, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (const uri of this._pausedCells) {\n\t\t\tif (!newPausedCells.has(uri)) {\n\t\t\t\tthis.editIsPaused(URI.parse(uri), false);\n\t\t\t\tthis._pausedCells.delete(uri);\n\t\t\t}\n\t\t}\n\n\t\tnewPausedCells.forEach((cell) => this._pausedCells.add(cell));\n\t}\n\n\tprivate editIsPaused(cellUri: URI, isPaused: boolean) {\n\t\tconst parsed = CellUri.parse(cellUri);\n\t\tif (parsed) {\n\t\t\tconst exeState =\n\t\t\t\tthis._notebookExecutionStateService.getCellExecution(cellUri);\n\t\t\tif (\n\t\t\t\texeState &&\n\t\t\t\t(exeState.isPaused !== isPaused || !exeState.didPause)\n\t\t\t) {\n\t\t\t\texeState.update([\n\t\t\t\t\t{\n\t\t\t\t\t\teditType: CellExecutionUpdateType.ExecutionState,\n\t\t\t\t\t\tdidPause: true,\n\t\t\t\t\t\tisPaused,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n).registerWorkbenchContribution(NotebookCellPausing, LifecyclePhase.Restored);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB;AAAA,EAGC,cAAc;AAAA,OACR;AACP,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAE9B,SAAS,eAAe;AACxB,SAAS,+BAA+B;AACxC,SAAS,sCAAsC;AAE/C,IAAM,sBAAN,cAAkC,WAA6C;AAAA,EAK9E,YACiC,eAEf,gCAChB;AACD,UAAM;AAJ0B;AAEf;AAIjB,SAAK;AAAA,MACJ,cAAc,SAAS,EAAE,qBAAqB,MAAM;AAGnD,aAAK,qBAAqB,IAAI;AAC9B,aAAK,WAAW,SAAS;AAAA,MAC1B,CAAC;AAAA,IACF;AACA,SAAK,aAAa,KAAK;AAAA,MACtB,IAAI,iBAAiB,MAAM,KAAK,qBAAqB,KAAK,GAAG,GAAI;AAAA,IAClE;AAAA,EACD;AAAA,EA5CD,OAqB+E;AAAA;AAAA;AAAA,EAC7D,eAAe,oBAAI,IAAY;AAAA,EAExC;AAAA,EAsBR,MAAc,qBACb,0BACgB;AAChB,UAAM,iBAAiB,oBAAI,IAAY;AAEvC,eAAW,WAAW,KAAK,cAAc,SAAS,EAAE,YAAY,GAAG;AAClE,iBAAW,UAAU,QAAQ,cAAc,GAAG;AAC7C,YAAI,YAAY,OAAO,aAAa;AACpC,YAAI,4BAA4B,CAAC,UAAU,QAAQ;AAClD,sBAAa,OAAkB,kBAAkB;AAAA,QAClD;AAEA,kBAAU,QAAQ,CAAC,OAAO;AACzB,gBAAM,SAAS,QAAQ,MAAM,GAAG,OAAO,GAAG;AAC1C,cAAI,QAAQ;AACX,2BAAe,IAAI,GAAG,OAAO,IAAI,SAAS,CAAC;AAC3C,iBAAK,aAAa,GAAG,OAAO,KAAK,IAAI;AAAA,UACtC;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAEA,eAAW,OAAO,KAAK,cAAc;AACpC,UAAI,CAAC,eAAe,IAAI,GAAG,GAAG;AAC7B,aAAK,aAAa,IAAI,MAAM,GAAG,GAAG,KAAK;AACvC,aAAK,aAAa,OAAO,GAAG;AAAA,MAC7B;AAAA,IACD;AAEA,mBAAe,QAAQ,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC;AAAA,EAC7D;AAAA,EAEQ,aAAa,SAAc,UAAmB;AACrD,UAAM,SAAS,QAAQ,MAAM,OAAO;AACpC,QAAI,QAAQ;AACX,YAAM,WACL,KAAK,+BAA+B,iBAAiB,OAAO;AAC7D,UACC,aACC,SAAS,aAAa,YAAY,CAAC,SAAS,WAC5C;AACD,iBAAS,OAAO;AAAA,UACf;AAAA,YACC,UAAU,wBAAwB;AAAA,YAClC,UAAU;AAAA,YACV;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;AA5EM,sBAAN;AAAA,EAMG;AAAA,EACA;AAAA,GAPG;AA8EN,SAAS;AAAA,EACR,oBAAoB;AACrB,EAAE,8BAA8B,qBAAqB,eAAe,QAAQ;",
  "names": []
}
