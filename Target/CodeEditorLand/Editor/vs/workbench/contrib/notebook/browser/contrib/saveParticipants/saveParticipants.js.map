{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/saveParticipants/saveParticipants.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../../../base/common/cancellation.js\";\nimport { HierarchicalKind } from \"../../../../../../base/common/hierarchicalKind.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../../../base/common/lifecycle.js\";\nimport { isEqual } from \"../../../../../../base/common/resources.js\";\nimport type { ICodeEditor } from \"../../../../../../editor/browser/editorBrowser.js\";\nimport {\n\tIBulkEditService,\n\ttype ResourceEdit,\n\tResourceTextEdit,\n} from \"../../../../../../editor/browser/services/bulkEditService.js\";\nimport { trimTrailingWhitespace } from \"../../../../../../editor/common/commands/trimTrailingWhitespaceCommand.js\";\nimport { Position } from \"../../../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../../../editor/common/core/range.js\";\nimport type { Selection } from \"../../../../../../editor/common/core/selection.js\";\nimport {\n\ttype CodeActionProvider,\n\tCodeActionTriggerType,\n\ttype IWorkspaceTextEdit,\n} from \"../../../../../../editor/common/languages.js\";\nimport type {\n\tIReadonlyTextBuffer,\n\tITextModel,\n} from \"../../../../../../editor/common/model.js\";\nimport { IEditorWorkerService } from \"../../../../../../editor/common/services/editorWorker.js\";\nimport { ILanguageFeaturesService } from \"../../../../../../editor/common/services/languageFeatures.js\";\nimport { ITextModelService } from \"../../../../../../editor/common/services/resolverService.js\";\nimport {\n\tApplyCodeActionReason,\n\tapplyCodeAction,\n\tgetCodeActions,\n} from \"../../../../../../editor/contrib/codeAction/browser/codeAction.js\";\nimport {\n\ttype CodeActionItem,\n\tCodeActionKind,\n\tCodeActionTriggerSource,\n} from \"../../../../../../editor/contrib/codeAction/common/types.js\";\nimport {\n\tFormattingMode,\n\tgetDocumentFormattingEditsWithSelectedProvider,\n} from \"../../../../../../editor/contrib/format/browser/format.js\";\nimport { SnippetController2 } from \"../../../../../../editor/contrib/snippet/browser/snippetController2.js\";\nimport { localize } from \"../../../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../../../platform/configuration/common/configuration.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../../../platform/log/common/log.js\";\nimport type {\n\tIProgress,\n\tIProgressStep,\n} from \"../../../../../../platform/progress/common/progress.js\";\nimport { Registry } from \"../../../../../../platform/registry/common/platform.js\";\nimport { IWorkspaceTrustManagementService } from \"../../../../../../platform/workspace/common/workspaceTrust.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchContributionsExtensions,\n} from \"../../../../../common/contributions.js\";\nimport { SaveReason } from \"../../../../../common/editor.js\";\nimport { IEditorService } from \"../../../../../services/editor/common/editorService.js\";\nimport { LifecyclePhase } from \"../../../../../services/lifecycle/common/lifecycle.js\";\nimport type {\n\tIStoredFileWorkingCopy,\n\tIStoredFileWorkingCopyModel,\n} from \"../../../../../services/workingCopy/common/storedFileWorkingCopy.js\";\nimport {\n\ttype IStoredFileWorkingCopySaveParticipant,\n\ttype IStoredFileWorkingCopySaveParticipantContext,\n\tIWorkingCopyFileService,\n} from \"../../../../../services/workingCopy/common/workingCopyFileService.js\";\nimport type { NotebookTextModel } from \"../../../common/model/notebookTextModel.js\";\nimport { CellKind, NotebookSetting } from \"../../../common/notebookCommon.js\";\nimport { NotebookFileWorkingCopyModel } from \"../../../common/notebookEditorModel.js\";\nimport { getNotebookEditorFromEditorPane } from \"../../notebookBrowser.js\";\n\nclass FormatOnSaveParticipant implements IStoredFileWorkingCopySaveParticipant {\n\tconstructor(\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) { }\n\n\tasync participate(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tcontext: IStoredFileWorkingCopySaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tif (\n\t\t\t!workingCopy.model ||\n\t\t\t!(workingCopy.model instanceof NotebookFileWorkingCopyModel)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst enabled = this.configurationService.getValue<boolean>(\n\t\t\tNotebookSetting.formatOnSave,\n\t\t);\n\t\tif (!enabled) {\n\t\t\treturn undefined;\n\t\t}\n\t\tprogress.report({\n\t\t\tmessage: localize(\"notebookFormatSave.formatting\", \"Formatting\"),\n\t\t});\n\n\t\tconst notebook = workingCopy.model.notebookModel;\n\t\tconst formatApplied: boolean =\n\t\t\tawait this.instantiationService.invokeFunction(\n\t\t\t\tCodeActionParticipantUtils.checkAndRunFormatCodeAction,\n\t\t\t\tnotebook,\n\t\t\t\tprogress,\n\t\t\t\ttoken,\n\t\t\t);\n\n\t\tconst disposable = new DisposableStore();\n\t\ttry {\n\t\t\tif (!formatApplied) {\n\t\t\t\tconst allCellEdits = await Promise.all(\n\t\t\t\t\tnotebook.cells.map(async (cell) => {\n\t\t\t\t\t\tconst ref =\n\t\t\t\t\t\t\tawait this.textModelService.createModelReference(\n\t\t\t\t\t\t\t\tcell.uri,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tdisposable.add(ref);\n\n\t\t\t\t\t\tconst model = ref.object.textEditorModel;\n\n\t\t\t\t\t\tconst formatEdits =\n\t\t\t\t\t\t\tawait getDocumentFormattingEditsWithSelectedProvider(\n\t\t\t\t\t\t\t\tthis.editorWorkerService,\n\t\t\t\t\t\t\t\tthis.languageFeaturesService,\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tFormattingMode.Silent,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst edits: ResourceTextEdit[] = [];\n\n\t\t\t\t\t\tif (formatEdits) {\n\t\t\t\t\t\t\tedits.push(\n\t\t\t\t\t\t\t\t...formatEdits.map(\n\t\t\t\t\t\t\t\t\t(edit) =>\n\t\t\t\t\t\t\t\t\t\tnew ResourceTextEdit(\n\t\t\t\t\t\t\t\t\t\t\tmodel.uri,\n\t\t\t\t\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t\t\t\t\t\tmodel.getVersionId(),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn edits;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tawait this.bulkEditService.apply(\n\t\t\t\t\t/* edit */ allCellEdits.flat(),\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\"formatNotebook\", \"Format Notebook\"),\n\t\t\t\t\t\tcode: \"undoredo.formatNotebook\",\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass TrimWhitespaceParticipant\n\timplements IStoredFileWorkingCopySaveParticipant\n{\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t) { }\n\n\tasync participate(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tcontext: IStoredFileWorkingCopySaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\t_token: CancellationToken,\n\t): Promise<void> {\n\t\tconst trimTrailingWhitespaceOption =\n\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\"files.trimTrailingWhitespace\",\n\t\t\t);\n\t\tconst trimInRegexAndStrings =\n\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\"files.trimTrailingWhitespaceInRegexAndStrings\",\n\t\t\t);\n\t\tif (trimTrailingWhitespaceOption) {\n\t\t\tawait this.doTrimTrailingWhitespace(\n\t\t\t\tworkingCopy,\n\t\t\t\tcontext.reason === SaveReason.AUTO,\n\t\t\t\ttrimInRegexAndStrings,\n\t\t\t\tprogress,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doTrimTrailingWhitespace(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tisAutoSaved: boolean,\n\t\ttrimInRegexesAndStrings: boolean,\n\t\tprogress: IProgress<IProgressStep>,\n\t) {\n\t\tif (\n\t\t\t!workingCopy.model ||\n\t\t\t!(workingCopy.model instanceof NotebookFileWorkingCopyModel)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst notebook = workingCopy.model.notebookModel;\n\t\tconst activeCellEditor = getActiveCellCodeEditor(this.editorService);\n\n\t\tlet cursors: Position[] = [];\n\t\tlet prevSelection: Selection[] = [];\n\t\ttry {\n\t\t\tconst allCellEdits = await Promise.all(\n\t\t\t\tnotebook.cells.map(async (cell) => {\n\t\t\t\t\tif (cell.cellKind !== CellKind.Code) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst ref =\n\t\t\t\t\t\tawait this.textModelService.createModelReference(\n\t\t\t\t\t\t\tcell.uri,\n\t\t\t\t\t\t);\n\t\t\t\t\tdisposable.add(ref);\n\t\t\t\t\tconst model = ref.object.textEditorModel;\n\n\t\t\t\t\tconst isActiveCell =\n\t\t\t\t\t\tactiveCellEditor &&\n\t\t\t\t\t\tcell.uri.toString() ===\n\t\t\t\t\t\t\tactiveCellEditor.getModel()?.uri.toString();\n\t\t\t\t\tif (isActiveCell) {\n\t\t\t\t\t\tprevSelection = activeCellEditor.getSelections() ?? [];\n\t\t\t\t\t\tif (isAutoSaved) {\n\t\t\t\t\t\t\tcursors = prevSelection.map((s) => s.getPosition()); // get initial cursor positions\n\t\t\t\t\t\t\tconst snippetsRange =\n\t\t\t\t\t\t\t\tSnippetController2.get(\n\t\t\t\t\t\t\t\t\tactiveCellEditor,\n\t\t\t\t\t\t\t\t)?.getSessionEnclosingRange();\n\t\t\t\t\t\t\tif (snippetsRange) {\n\t\t\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\t\t\tlet lineNumber =\n\t\t\t\t\t\t\t\t\t\tsnippetsRange.startLineNumber;\n\t\t\t\t\t\t\t\t\tlineNumber <= snippetsRange.endLineNumber;\n\t\t\t\t\t\t\t\t\tlineNumber++\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tcursors.push(\n\t\t\t\t\t\t\t\t\t\tnew Position(\n\t\t\t\t\t\t\t\t\t\t\tlineNumber,\n\t\t\t\t\t\t\t\t\t\t\tmodel.getLineMaxColumn(lineNumber),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst ops = trimTrailingWhitespace(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tcursors,\n\t\t\t\t\t\ttrimInRegexesAndStrings,\n\t\t\t\t\t);\n\t\t\t\t\tif (!ops.length) {\n\t\t\t\t\t\treturn []; // Nothing to do\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ops.map(\n\t\t\t\t\t\t(op) =>\n\t\t\t\t\t\t\tnew ResourceTextEdit(\n\t\t\t\t\t\t\t\tmodel.uri,\n\t\t\t\t\t\t\t\t{ ...op, text: op.text || \"\" },\n\t\t\t\t\t\t\t\tmodel.getVersionId(),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst filteredEdits = allCellEdits\n\t\t\t\t.flat()\n\t\t\t\t.filter((edit) => edit !== undefined) as ResourceEdit[];\n\t\t\tawait this.bulkEditService.apply(filteredEdits, {\n\t\t\t\tlabel: localize(\n\t\t\t\t\t\"trimNotebookWhitespace\",\n\t\t\t\t\t\"Notebook Trim Trailing Whitespace\",\n\t\t\t\t),\n\t\t\t\tcode: \"undoredo.notebookTrimTrailingWhitespace\",\n\t\t\t});\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass TrimFinalNewLinesParticipant\n\timplements IStoredFileWorkingCopySaveParticipant\n{\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t) { }\n\n\tasync participate(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tcontext: IStoredFileWorkingCopySaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\t_token: CancellationToken,\n\t): Promise<void> {\n\t\tif (\n\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\"files.trimFinalNewlines\",\n\t\t\t)\n\t\t) {\n\t\t\tawait this.doTrimFinalNewLines(\n\t\t\t\tworkingCopy,\n\t\t\t\tcontext.reason === SaveReason.AUTO,\n\t\t\t\tprogress,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * returns 0 if the entire file is empty\n\t */\n\tprivate findLastNonEmptyLine(textBuffer: IReadonlyTextBuffer): number {\n\t\tfor (\n\t\t\tlet lineNumber = textBuffer.getLineCount();\n\t\t\tlineNumber >= 1;\n\t\t\tlineNumber--\n\t\t) {\n\t\t\tconst lineLength = textBuffer.getLineLength(lineNumber);\n\t\t\tif (lineLength) {\n\t\t\t\t// this line has content\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\t// no line has content\n\t\treturn 0;\n\t}\n\n\tprivate async doTrimFinalNewLines(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tisAutoSaved: boolean,\n\t\tprogress: IProgress<IProgressStep>,\n\t): Promise<void> {\n\t\tif (\n\t\t\t!workingCopy.model ||\n\t\t\t!(workingCopy.model instanceof NotebookFileWorkingCopyModel)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst notebook = workingCopy.model.notebookModel;\n\t\tconst activeCellEditor = getActiveCellCodeEditor(this.editorService);\n\n\t\ttry {\n\t\t\tconst allCellEdits = await Promise.all(\n\t\t\t\tnotebook.cells.map(async (cell) => {\n\t\t\t\t\tif (cell.cellKind !== CellKind.Code) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// autosave -- don't trim every trailing line, just up to the cursor line\n\t\t\t\t\tlet cannotTouchLineNumber = 0;\n\t\t\t\t\tconst isActiveCell =\n\t\t\t\t\t\tactiveCellEditor &&\n\t\t\t\t\t\tcell.uri.toString() ===\n\t\t\t\t\t\t\tactiveCellEditor.getModel()?.uri.toString();\n\t\t\t\t\tif (isAutoSaved && isActiveCell) {\n\t\t\t\t\t\tconst selections =\n\t\t\t\t\t\t\tactiveCellEditor.getSelections() ?? [];\n\t\t\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\t\t\tcannotTouchLineNumber = Math.max(\n\t\t\t\t\t\t\t\tcannotTouchLineNumber,\n\t\t\t\t\t\t\t\tsel.selectionStartLineNumber,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst textBuffer = cell.textBuffer;\n\t\t\t\t\tconst lastNonEmptyLine =\n\t\t\t\t\t\tthis.findLastNonEmptyLine(textBuffer);\n\t\t\t\t\tconst deleteFromLineNumber = Math.max(\n\t\t\t\t\t\tlastNonEmptyLine + 1,\n\t\t\t\t\t\tcannotTouchLineNumber + 1,\n\t\t\t\t\t);\n\t\t\t\t\tif (deleteFromLineNumber > textBuffer.getLineCount()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst deletionRange = new Range(\n\t\t\t\t\t\tdeleteFromLineNumber,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\ttextBuffer.getLineCount(),\n\t\t\t\t\t\ttextBuffer.getLineLastNonWhitespaceColumn(\n\t\t\t\t\t\t\ttextBuffer.getLineCount(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tif (deletionRange.isEmpty()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// create the edit to delete all lines in deletionRange\n\t\t\t\t\treturn new ResourceTextEdit(\n\t\t\t\t\t\tcell.uri,\n\t\t\t\t\t\t{ range: deletionRange, text: \"\" },\n\t\t\t\t\t\tcell.textModel?.getVersionId(),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst filteredEdits = allCellEdits\n\t\t\t\t.flat()\n\t\t\t\t.filter((edit) => edit !== undefined) as ResourceEdit[];\n\t\t\tawait this.bulkEditService.apply(filteredEdits, {\n\t\t\t\tlabel: localize(\"trimNotebookNewlines\", \"Trim Final New Lines\"),\n\t\t\t\tcode: \"undoredo.trimFinalNewLines\",\n\t\t\t});\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass InsertFinalNewLineParticipant\n\timplements IStoredFileWorkingCopySaveParticipant\n{\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) { }\n\n\tasync participate(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tcontext: IStoredFileWorkingCopySaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\t_token: CancellationToken,\n\t): Promise<void> {\n\t\t// waiting on notebook-specific override before this feature can sync with 'files.insertFinalNewline'\n\t\t// if (this.configurationService.getValue('files.insertFinalNewline')) {\n\n\t\tif (\n\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\tNotebookSetting.insertFinalNewline,\n\t\t\t)\n\t\t) {\n\t\t\tawait this.doInsertFinalNewLine(\n\t\t\t\tworkingCopy,\n\t\t\t\tcontext.reason === SaveReason.AUTO,\n\t\t\t\tprogress,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doInsertFinalNewLine(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tisAutoSaved: boolean,\n\t\tprogress: IProgress<IProgressStep>,\n\t): Promise<void> {\n\t\tif (\n\t\t\t!workingCopy.model ||\n\t\t\t!(workingCopy.model instanceof NotebookFileWorkingCopyModel)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst notebook = workingCopy.model.notebookModel;\n\n\t\t// get initial cursor positions\n\t\tconst activeCellEditor = getActiveCellCodeEditor(this.editorService);\n\t\tlet selections;\n\t\tif (activeCellEditor) {\n\t\t\tselections = activeCellEditor.getSelections() ?? [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst allCellEdits = await Promise.all(\n\t\t\t\tnotebook.cells.map(async (cell) => {\n\t\t\t\t\tif (cell.cellKind !== CellKind.Code) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst lineCount = cell.textBuffer.getLineCount();\n\t\t\t\t\tconst lastLineIsEmptyOrWhitespace =\n\t\t\t\t\t\tcell.textBuffer.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\t\tlineCount,\n\t\t\t\t\t\t) === 0;\n\n\t\t\t\t\tif (!lineCount || lastLineIsEmptyOrWhitespace) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new ResourceTextEdit(\n\t\t\t\t\t\tcell.uri,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trange: new Range(\n\t\t\t\t\t\t\t\tlineCount + 1,\n\t\t\t\t\t\t\t\tcell.textBuffer.getLineLength(lineCount),\n\t\t\t\t\t\t\t\tlineCount + 1,\n\t\t\t\t\t\t\t\tcell.textBuffer.getLineLength(lineCount),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttext: cell.textBuffer.getEOL(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcell.textModel?.getVersionId(),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst filteredEdits = allCellEdits.filter(\n\t\t\t\t(edit) => edit !== undefined,\n\t\t\t) as ResourceEdit[];\n\t\t\tawait this.bulkEditService.apply(filteredEdits, {\n\t\t\t\tlabel: localize(\"insertFinalNewLine\", \"Insert Final New Line\"),\n\t\t\t\tcode: \"undoredo.insertFinalNewLine\",\n\t\t\t});\n\n\t\t\t// set cursor back to initial position after inserting final new line\n\t\t\tif (activeCellEditor && selections) {\n\t\t\t\tactiveCellEditor.setSelections(selections);\n\t\t\t}\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass CodeActionOnSaveParticipant\n\timplements IStoredFileWorkingCopySaveParticipant\n{\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t}\n\n\tasync participate(\n\t\tworkingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>,\n\t\tcontext: IStoredFileWorkingCopySaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst isTrusted =\n\t\t\tthis.workspaceTrustManagementService.isWorkspaceTrusted();\n\t\tif (!isTrusted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!workingCopy.model ||\n\t\t\t!(workingCopy.model instanceof NotebookFileWorkingCopyModel)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet saveTrigger = \"\";\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\t// currently this won't happen, as vs/editor/contrib/codeAction/browser/codeAction.ts L#104 filters out codeactions on autosave. Just future-proofing\n\t\t\t// ? notebook CodeActions on autosave seems dangerous (perf-wise)\n\t\t\t// saveTrigger = 'always'; // TODO@Yoyokrazy, support during debt\n\t\t\treturn undefined;\n\t\t} else if (context.reason === SaveReason.EXPLICIT) {\n\t\t\tsaveTrigger = \"explicit\";\n\t\t} else {\n\t\t\t// \tSaveReason.FOCUS_CHANGE, WINDOW_CHANGE need to be addressed when autosaves are enabled\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst notebookModel = workingCopy.model.notebookModel;\n\n\t\tconst setting = this.configurationService.getValue<{\n\t\t\t[kind: string]: string | boolean;\n\t\t}>(NotebookSetting.codeActionsOnSave);\n\t\tconst settingItems: string[] = Array.isArray(setting)\n\t\t\t? setting\n\t\t\t: Object.keys(setting).filter((x) => setting[x]);\n\n\t\tconst allCodeActions = this.createCodeActionsOnSave(settingItems);\n\t\tconst excludedActions = allCodeActions.filter(\n\t\t\t(x) => setting[x.value] === \"never\" || setting[x.value] === false,\n\t\t);\n\t\tconst includedActions = allCodeActions.filter(\n\t\t\t(x) =>\n\t\t\t\tsetting[x.value] === saveTrigger || setting[x.value] === true,\n\t\t);\n\n\t\tconst editorCodeActionsOnSave = includedActions.filter(\n\t\t\t(x) => !CodeActionKind.Notebook.contains(x),\n\t\t);\n\t\tconst notebookCodeActionsOnSave = includedActions.filter((x) =>\n\t\t\tCodeActionKind.Notebook.contains(x),\n\t\t);\n\n\t\t// run notebook code actions\n\t\tif (notebookCodeActionsOnSave.length) {\n\t\t\tconst nbDisposable = new DisposableStore();\n\t\t\tprogress.report({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"notebookSaveParticipants.notebookCodeActions\",\n\t\t\t\t\t\"Running 'Notebook' code actions\",\n\t\t\t\t),\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tconst cell = notebookModel.cells[0];\n\t\t\t\tconst ref = await this.textModelService.createModelReference(\n\t\t\t\t\tcell.uri,\n\t\t\t\t);\n\t\t\t\tnbDisposable.add(ref);\n\n\t\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\t\tawait this.instantiationService.invokeFunction(\n\t\t\t\t\tCodeActionParticipantUtils.applyOnSaveGenericCodeActions,\n\t\t\t\t\ttextEditorModel,\n\t\t\t\t\tnotebookCodeActionsOnSave,\n\t\t\t\t\texcludedActions,\n\t\t\t\t\tprogress,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t} catch {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t\"Failed to apply notebook code action on save\",\n\t\t\t\t);\n\t\t\t} finally {\n\t\t\t\tprogress.report({ increment: 100 });\n\t\t\t\tnbDisposable.dispose();\n\t\t\t}\n\t\t}\n\n\t\t// run cell level code actions\n\t\tif (editorCodeActionsOnSave.length) {\n\t\t\t// prioritize `source.fixAll` code actions\n\t\t\tif (!Array.isArray(setting)) {\n\t\t\t\teditorCodeActionsOnSave.sort((a, b) => {\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(a)) {\n\t\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst cellDisposable = new DisposableStore();\n\t\t\tprogress.report({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"notebookSaveParticipants.cellCodeActions\",\n\t\t\t\t\t\"Running 'Cell' code actions\",\n\t\t\t\t),\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tnotebookModel.cells.map(async (cell) => {\n\t\t\t\t\t\tconst ref =\n\t\t\t\t\t\t\tawait this.textModelService.createModelReference(\n\t\t\t\t\t\t\t\tcell.uri,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tcellDisposable.add(ref);\n\n\t\t\t\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\t\t\t\tawait this.instantiationService.invokeFunction(\n\t\t\t\t\t\t\tCodeActionParticipantUtils.applyOnSaveGenericCodeActions,\n\t\t\t\t\t\t\ttextEditorModel,\n\t\t\t\t\t\t\teditorCodeActionsOnSave,\n\t\t\t\t\t\t\texcludedActions,\n\t\t\t\t\t\t\tprogress,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} catch {\n\t\t\t\tthis.logService.error(\"Failed to apply code action on save\");\n\t\t\t} finally {\n\t\t\t\tprogress.report({ increment: 100 });\n\t\t\t\tcellDisposable.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createCodeActionsOnSave(\n\t\tsettingItems: readonly string[],\n\t): HierarchicalKind[] {\n\t\tconst kinds = settingItems.map((x) => new HierarchicalKind(x));\n\n\t\t// Remove subsets\n\t\treturn kinds.filter((kind) => {\n\t\t\treturn kinds.every(\n\t\t\t\t(otherKind) =>\n\t\t\t\t\totherKind.equals(kind) || !otherKind.contains(kind),\n\t\t\t);\n\t\t});\n\t}\n}\n\nexport class CodeActionParticipantUtils {\n\tstatic async checkAndRunFormatCodeAction(\n\t\taccessor: ServicesAccessor,\n\t\tnotebookModel: NotebookTextModel,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<boolean> {\n\t\tconst instantiationService: IInstantiationService = accessor.get(\n\t\t\tIInstantiationService,\n\t\t);\n\t\tconst textModelService: ITextModelService =\n\t\t\taccessor.get(ITextModelService);\n\t\tconst logService: ILogService = accessor.get(ILogService);\n\t\tconst configurationService: IConfigurationService = accessor.get(\n\t\t\tIConfigurationService,\n\t\t);\n\n\t\tconst formatDisposable = new DisposableStore();\n\t\tlet formatResult = false;\n\t\tprogress.report({\n\t\t\tmessage: localize(\n\t\t\t\t\"notebookSaveParticipants.formatCodeActions\",\n\t\t\t\t\"Running 'Format' code actions\",\n\t\t\t),\n\t\t});\n\t\ttry {\n\t\t\tconst cell = notebookModel.cells[0];\n\t\t\tconst ref = await textModelService.createModelReference(cell.uri);\n\t\t\tformatDisposable.add(ref);\n\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\tconst defaultFormatterExtId = configurationService.getValue<\n\t\t\t\tstring | undefined\n\t\t\t>(NotebookSetting.defaultFormatter);\n\t\t\tformatResult = await instantiationService.invokeFunction(\n\t\t\t\tCodeActionParticipantUtils.applyOnSaveFormatCodeAction,\n\t\t\t\ttextEditorModel,\n\t\t\t\tnew HierarchicalKind(\"notebook.format\"),\n\t\t\t\t[],\n\t\t\t\tdefaultFormatterExtId,\n\t\t\t\tprogress,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t} catch {\n\t\t\tlogService.error(\"Failed to apply notebook format action on save\");\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tformatDisposable.dispose();\n\t\t}\n\t\treturn formatResult;\n\t}\n\n\tstatic async applyOnSaveGenericCodeActions(\n\t\taccessor: ServicesAccessor,\n\t\tmodel: ITextModel,\n\t\tcodeActionsOnSave: readonly HierarchicalKind[],\n\t\texcludes: readonly HierarchicalKind[],\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst instantiationService: IInstantiationService = accessor.get(\n\t\t\tIInstantiationService,\n\t\t);\n\t\tconst languageFeaturesService: ILanguageFeaturesService = accessor.get(\n\t\t\tILanguageFeaturesService,\n\t\t);\n\t\tconst logService: ILogService = accessor.get(ILogService);\n\n\t\tconst getActionProgress = new (class\n\t\t\timplements IProgress<CodeActionProvider>\n\t\t{\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"codeaction.get2\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure]({1})).\",\n\t\t\t\t\t\t[...this._names].map((name) => `'${name}'`).join(\", \"),\n\t\t\t\t\t\t\"command:workbench.action.openSettings?%5B%22notebook.codeActionsOnSave%22%5D\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (\n\t\t\t\t\tprovider.displayName &&\n\t\t\t\t\t!this._names.has(provider.displayName)\n\t\t\t\t) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\n\t\tfor (const codeActionKind of codeActionsOnSave) {\n\t\t\tconst actionsToRun =\n\t\t\t\tawait CodeActionParticipantUtils.getActionsToRun(\n\t\t\t\t\tmodel,\n\t\t\t\t\tcodeActionKind,\n\t\t\t\t\texcludes,\n\t\t\t\t\tlanguageFeaturesService,\n\t\t\t\t\tgetActionProgress,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tfor (const action of actionsToRun.validActions) {\n\t\t\t\t\tconst codeActionEdits = action.action.edit?.edits;\n\t\t\t\t\tlet breakFlag = false;\n\t\t\t\t\tif (!action.action.kind?.startsWith(\"notebook\")) {\n\t\t\t\t\t\tfor (const edit of codeActionEdits ?? []) {\n\t\t\t\t\t\t\tconst workspaceTextEdit =\n\t\t\t\t\t\t\t\tedit as IWorkspaceTextEdit;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tworkspaceTextEdit.resource &&\n\t\t\t\t\t\t\t\tisEqual(workspaceTextEdit.resource, model.uri)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// error -> applied to multiple resources\n\t\t\t\t\t\t\t\tbreakFlag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (breakFlag) {\n\t\t\t\t\t\tlogService.warn(\n\t\t\t\t\t\t\t\"Failed to apply code action on save, applied to multiple resources.\",\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tprogress.report({\n\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\"codeAction.apply\",\n\t\t\t\t\t\t\t\"Applying code action '{0}'.\",\n\t\t\t\t\t\t\taction.action.title,\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t\tawait instantiationService.invokeFunction(\n\t\t\t\t\t\tapplyCodeAction,\n\t\t\t\t\t\taction,\n\t\t\t\t\t\tApplyCodeActionReason.OnSave,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// Failure to apply a code action should not block other on save actions\n\t\t\t} finally {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async applyOnSaveFormatCodeAction(\n\t\taccessor: ServicesAccessor,\n\t\tmodel: ITextModel,\n\t\tformatCodeActionOnSave: HierarchicalKind,\n\t\texcludes: readonly HierarchicalKind[],\n\t\textensionId: string | undefined,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<boolean> {\n\t\tconst instantiationService: IInstantiationService = accessor.get(\n\t\t\tIInstantiationService,\n\t\t);\n\t\tconst languageFeaturesService: ILanguageFeaturesService = accessor.get(\n\t\t\tILanguageFeaturesService,\n\t\t);\n\t\tconst logService: ILogService = accessor.get(ILogService);\n\n\t\tconst getActionProgress = new (class\n\t\t\timplements IProgress<CodeActionProvider>\n\t\t{\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"codeaction.get2\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure]({1})).\",\n\t\t\t\t\t\t[...this._names].map((name) => `'${name}'`).join(\", \"),\n\t\t\t\t\t\t\"command:workbench.action.openSettings?%5B%22notebook.defaultFormatter%22%5D\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (\n\t\t\t\t\tprovider.displayName &&\n\t\t\t\t\t!this._names.has(provider.displayName)\n\t\t\t\t) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\n\t\tconst providedActions =\n\t\t\tawait CodeActionParticipantUtils.getActionsToRun(\n\t\t\t\tmodel,\n\t\t\t\tformatCodeActionOnSave,\n\t\t\t\texcludes,\n\t\t\t\tlanguageFeaturesService,\n\t\t\t\tgetActionProgress,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t// warn the user if there are more than one provided format action, and there is no specified defaultFormatter\n\t\tif (providedActions.validActions.length > 1 && !extensionId) {\n\t\t\tlogService.warn(\n\t\t\t\t\"More than one format code action is provided, the 0th one will be used. A default can be specified via `notebook.defaultFormatter` in your settings.\",\n\t\t\t);\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tprovidedActions.dispose();\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst action: CodeActionItem | undefined = extensionId\n\t\t\t\t? providedActions.validActions.find(\n\t\t\t\t\t\t(action) =>\n\t\t\t\t\t\t\taction.provider?.extensionId === extensionId,\n\t\t\t\t\t)\n\t\t\t\t: providedActions.validActions[0];\n\t\t\tif (!action) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tprogress.report({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"codeAction.apply\",\n\t\t\t\t\t\"Applying code action '{0}'.\",\n\t\t\t\t\taction.action.title,\n\t\t\t\t),\n\t\t\t});\n\t\t\tawait instantiationService.invokeFunction(\n\t\t\t\tapplyCodeAction,\n\t\t\t\taction,\n\t\t\t\tApplyCodeActionReason.OnSave,\n\t\t\t\t{},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch {\n\t\t\tlogService.error(\n\t\t\t\t\"Failed to apply notebook format code action on save\",\n\t\t\t);\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tprovidedActions.dispose();\n\t\t}\n\t\treturn true;\n\t}\n\n\t// @Yoyokrazy this could likely be modified to leverage the extensionID, therefore not getting actions from providers unnecessarily -- future work\n\tstatic getActionsToRun(\n\t\tmodel: ITextModel,\n\t\tcodeActionKind: HierarchicalKind,\n\t\texcludes: readonly HierarchicalKind[],\n\t\tlanguageFeaturesService: ILanguageFeaturesService,\n\t\tprogress: IProgress<CodeActionProvider>,\n\t\ttoken: CancellationToken,\n\t) {\n\t\treturn getCodeActions(\n\t\t\tlanguageFeaturesService.codeActionProvider,\n\t\t\tmodel,\n\t\t\tmodel.getFullModelRange(),\n\t\t\t{\n\t\t\t\ttype: CodeActionTriggerType.Invoke,\n\t\t\t\ttriggerAction: CodeActionTriggerSource.OnSave,\n\t\t\t\tfilter: {\n\t\t\t\t\tinclude: codeActionKind,\n\t\t\t\t\texcludes: excludes,\n\t\t\t\t\tincludeSourceActions: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\tprogress,\n\t\t\ttoken,\n\t\t);\n\t}\n}\n\nfunction getActiveCellCodeEditor(\n\teditorService: IEditorService,\n): ICodeEditor | undefined {\n\tconst activePane = editorService.activeEditorPane;\n\tconst notebookEditor = getNotebookEditorFromEditorPane(activePane);\n\tconst activeCodeEditor = notebookEditor?.activeCodeEditor;\n\treturn activeCodeEditor;\n}\n\nexport class SaveParticipantsContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService) {\n\n\t\tsuper();\n\t\tthis.registerSaveParticipants();\n\t}\n\n\tprivate registerSaveParticipants(): void {\n\t\tthis._register(\n\t\t\tthis.workingCopyFileService.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tTrimWhitespaceParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyFileService.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tCodeActionOnSaveParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyFileService.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tFormatOnSaveParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyFileService.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tInsertFinalNewLineParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyFileService.addSaveParticipant(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tTrimFinalNewLinesParticipant,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n}\n\nconst workbenchContributionsRegistry =\n\tRegistry.as<IWorkbenchContributionsRegistry>(\n\t\tWorkbenchContributionsExtensions.Workbench,\n\t);\nworkbenchContributionsRegistry.registerWorkbenchContribution(\n\tSaveParticipantsContribution,\n\tLifecyclePhase.Restored,\n);\n"],
  "mappings": "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",
  "names": ["action"]
}
