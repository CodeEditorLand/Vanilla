{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/saveParticipants/saveParticipants.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../../../base/common/cancellation.js';\nimport { HierarchicalKind } from '../../../../../../base/common/hierarchicalKind.js';\nimport { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../../../base/common/resources.js';\nimport { ICodeEditor } from '../../../../../../editor/browser/editorBrowser.js';\nimport { IBulkEditService, ResourceEdit, ResourceTextEdit } from '../../../../../../editor/browser/services/bulkEditService.js';\nimport { trimTrailingWhitespace } from '../../../../../../editor/common/commands/trimTrailingWhitespaceCommand.js';\nimport { Position } from '../../../../../../editor/common/core/position.js';\nimport { Range } from '../../../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../../../editor/common/core/selection.js';\nimport { CodeActionProvider, CodeActionTriggerType, IWorkspaceTextEdit } from '../../../../../../editor/common/languages.js';\nimport { IReadonlyTextBuffer, ITextModel } from '../../../../../../editor/common/model.js';\nimport { IEditorWorkerService } from '../../../../../../editor/common/services/editorWorker.js';\nimport { ILanguageFeaturesService } from '../../../../../../editor/common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../../../../editor/common/services/resolverService.js';\nimport { ApplyCodeActionReason, applyCodeAction, getCodeActions } from '../../../../../../editor/contrib/codeAction/browser/codeAction.js';\nimport { CodeActionItem, CodeActionKind, CodeActionTriggerSource } from '../../../../../../editor/contrib/codeAction/common/types.js';\nimport { FormattingMode, getDocumentFormattingEditsWithSelectedProvider } from '../../../../../../editor/contrib/format/browser/format.js';\nimport { SnippetController2 } from '../../../../../../editor/contrib/snippet/browser/snippetController2.js';\nimport { localize } from '../../../../../../nls.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../../../platform/log/common/log.js';\nimport { IProgress, IProgressStep } from '../../../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../../../platform/registry/common/platform.js';\nimport { IWorkspaceTrustManagementService } from '../../../../../../platform/workspace/common/workspaceTrust.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchContributionsExtensions } from '../../../../../common/contributions.js';\nimport { SaveReason } from '../../../../../common/editor.js';\nimport { getNotebookEditorFromEditorPane } from '../../notebookBrowser.js';\nimport { NotebookTextModel } from '../../../common/model/notebookTextModel.js';\nimport { CellKind, NotebookSetting } from '../../../common/notebookCommon.js';\nimport { NotebookFileWorkingCopyModel } from '../../../common/notebookEditorModel.js';\nimport { IEditorService } from '../../../../../services/editor/common/editorService.js';\nimport { LifecyclePhase } from '../../../../../services/lifecycle/common/lifecycle.js';\nimport { IStoredFileWorkingCopy, IStoredFileWorkingCopyModel } from '../../../../../services/workingCopy/common/storedFileWorkingCopy.js';\nimport { IStoredFileWorkingCopySaveParticipant, IStoredFileWorkingCopySaveParticipantContext, IWorkingCopyFileService } from '../../../../../services/workingCopy/common/workingCopyFileService.js';\n\nclass FormatOnSaveParticipant implements IStoredFileWorkingCopySaveParticipant {\n\tconstructor(\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) { }\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tif (!workingCopy.model || !(workingCopy.model instanceof NotebookFileWorkingCopyModel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst enabled = this.configurationService.getValue<boolean>(NotebookSetting.formatOnSave);\n\t\tif (!enabled) {\n\t\t\treturn undefined;\n\t\t}\n\t\tprogress.report({ message: localize('notebookFormatSave.formatting', \"Formatting\") });\n\n\t\tconst notebook = workingCopy.model.notebookModel;\n\t\tconst formatApplied: boolean = await this.instantiationService.invokeFunction(CodeActionParticipantUtils.checkAndRunFormatCodeAction, notebook, progress, token);\n\n\t\tconst disposable = new DisposableStore();\n\t\ttry {\n\t\t\tif (!formatApplied) {\n\t\t\t\tconst allCellEdits = await Promise.all(notebook.cells.map(async cell => {\n\t\t\t\t\tconst ref = await this.textModelService.createModelReference(cell.uri);\n\t\t\t\t\tdisposable.add(ref);\n\n\t\t\t\t\tconst model = ref.object.textEditorModel;\n\n\t\t\t\t\tconst formatEdits = await getDocumentFormattingEditsWithSelectedProvider(\n\t\t\t\t\t\tthis.editorWorkerService,\n\t\t\t\t\t\tthis.languageFeaturesService,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tFormattingMode.Silent,\n\t\t\t\t\t\ttoken\n\t\t\t\t\t);\n\n\t\t\t\t\tconst edits: ResourceTextEdit[] = [];\n\n\t\t\t\t\tif (formatEdits) {\n\t\t\t\t\t\tedits.push(...formatEdits.map(edit => new ResourceTextEdit(model.uri, edit, model.getVersionId())));\n\t\t\t\t\t\treturn edits;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [];\n\t\t\t\t}));\n\n\t\t\t\tawait this.bulkEditService.apply(/* edit */allCellEdits.flat(), { label: localize('formatNotebook', \"Format Notebook\"), code: 'undoredo.formatNotebook', });\n\t\t\t}\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass TrimWhitespaceParticipant implements IStoredFileWorkingCopySaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t) { }\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, _token: CancellationToken): Promise<void> {\n\t\tconst trimTrailingWhitespaceOption = this.configurationService.getValue<boolean>('files.trimTrailingWhitespace');\n\t\tconst trimInRegexAndStrings = this.configurationService.getValue<boolean>('files.trimTrailingWhitespaceInRegexAndStrings');\n\t\tif (trimTrailingWhitespaceOption) {\n\t\t\tawait this.doTrimTrailingWhitespace(workingCopy, context.reason === SaveReason.AUTO, trimInRegexAndStrings, progress);\n\t\t}\n\t}\n\n\tprivate async doTrimTrailingWhitespace(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, isAutoSaved: boolean, trimInRegexesAndStrings: boolean, progress: IProgress<IProgressStep>) {\n\t\tif (!workingCopy.model || !(workingCopy.model instanceof NotebookFileWorkingCopyModel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst notebook = workingCopy.model.notebookModel;\n\t\tconst activeCellEditor = getActiveCellCodeEditor(this.editorService);\n\n\t\tlet cursors: Position[] = [];\n\t\tlet prevSelection: Selection[] = [];\n\t\ttry {\n\t\t\tconst allCellEdits = await Promise.all(notebook.cells.map(async (cell) => {\n\t\t\t\tif (cell.cellKind !== CellKind.Code) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tconst ref = await this.textModelService.createModelReference(cell.uri);\n\t\t\t\tdisposable.add(ref);\n\t\t\t\tconst model = ref.object.textEditorModel;\n\n\t\t\t\tconst isActiveCell = (activeCellEditor && cell.uri.toString() === activeCellEditor.getModel()?.uri.toString());\n\t\t\t\tif (isActiveCell) {\n\t\t\t\t\tprevSelection = activeCellEditor.getSelections() ?? [];\n\t\t\t\t\tif (isAutoSaved) {\n\t\t\t\t\t\tcursors = prevSelection.map(s => s.getPosition()); // get initial cursor positions\n\t\t\t\t\t\tconst snippetsRange = SnippetController2.get(activeCellEditor)?.getSessionEnclosingRange();\n\t\t\t\t\t\tif (snippetsRange) {\n\t\t\t\t\t\t\tfor (let lineNumber = snippetsRange.startLineNumber; lineNumber <= snippetsRange.endLineNumber; lineNumber++) {\n\t\t\t\t\t\t\t\tcursors.push(new Position(lineNumber, model.getLineMaxColumn(lineNumber)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst ops = trimTrailingWhitespace(model, cursors, trimInRegexesAndStrings);\n\t\t\t\tif (!ops.length) {\n\t\t\t\t\treturn []; // Nothing to do\n\t\t\t\t}\n\n\t\t\t\treturn ops.map(op => new ResourceTextEdit(model.uri, { ...op, text: op.text || '' }, model.getVersionId()));\n\t\t\t}));\n\n\t\t\tconst filteredEdits = allCellEdits.flat().filter(edit => edit !== undefined) as ResourceEdit[];\n\t\t\tawait this.bulkEditService.apply(filteredEdits, { label: localize('trimNotebookWhitespace', \"Notebook Trim Trailing Whitespace\"), code: 'undoredo.notebookTrimTrailingWhitespace' });\n\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass TrimFinalNewLinesParticipant implements IStoredFileWorkingCopySaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t) { }\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, _token: CancellationToken): Promise<void> {\n\t\tif (this.configurationService.getValue<boolean>('files.trimFinalNewlines')) {\n\t\t\tawait this.doTrimFinalNewLines(workingCopy, context.reason === SaveReason.AUTO, progress);\n\t\t}\n\t}\n\n\t/**\n\t * returns 0 if the entire file is empty\n\t */\n\tprivate findLastNonEmptyLine(textBuffer: IReadonlyTextBuffer): number {\n\t\tfor (let lineNumber = textBuffer.getLineCount(); lineNumber >= 1; lineNumber--) {\n\t\t\tconst lineLength = textBuffer.getLineLength(lineNumber);\n\t\t\tif (lineLength) {\n\t\t\t\t// this line has content\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\t// no line has content\n\t\treturn 0;\n\t}\n\n\tprivate async doTrimFinalNewLines(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, isAutoSaved: boolean, progress: IProgress<IProgressStep>): Promise<void> {\n\t\tif (!workingCopy.model || !(workingCopy.model instanceof NotebookFileWorkingCopyModel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst notebook = workingCopy.model.notebookModel;\n\t\tconst activeCellEditor = getActiveCellCodeEditor(this.editorService);\n\n\t\ttry {\n\t\t\tconst allCellEdits = await Promise.all(notebook.cells.map(async (cell) => {\n\t\t\t\tif (cell.cellKind !== CellKind.Code) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// autosave -- don't trim every trailing line, just up to the cursor line\n\t\t\t\tlet cannotTouchLineNumber = 0;\n\t\t\t\tconst isActiveCell = (activeCellEditor && cell.uri.toString() === activeCellEditor.getModel()?.uri.toString());\n\t\t\t\tif (isAutoSaved && isActiveCell) {\n\t\t\t\t\tconst selections = activeCellEditor.getSelections() ?? [];\n\t\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\t\tcannotTouchLineNumber = Math.max(cannotTouchLineNumber, sel.selectionStartLineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst textBuffer = cell.textBuffer;\n\t\t\t\tconst lastNonEmptyLine = this.findLastNonEmptyLine(textBuffer);\n\t\t\t\tconst deleteFromLineNumber = Math.max(lastNonEmptyLine + 1, cannotTouchLineNumber + 1);\n\t\t\t\tif (deleteFromLineNumber > textBuffer.getLineCount()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst deletionRange = new Range(deleteFromLineNumber, 1, textBuffer.getLineCount(), textBuffer.getLineLastNonWhitespaceColumn(textBuffer.getLineCount()));\n\t\t\t\tif (deletionRange.isEmpty()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// create the edit to delete all lines in deletionRange\n\t\t\t\treturn new ResourceTextEdit(cell.uri, { range: deletionRange, text: '' }, cell.textModel?.getVersionId());\n\t\t\t}));\n\n\t\t\tconst filteredEdits = allCellEdits.flat().filter(edit => edit !== undefined) as ResourceEdit[];\n\t\t\tawait this.bulkEditService.apply(filteredEdits, { label: localize('trimNotebookNewlines', \"Trim Final New Lines\"), code: 'undoredo.trimFinalNewLines' });\n\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass InsertFinalNewLineParticipant implements IStoredFileWorkingCopySaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) { }\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, _token: CancellationToken): Promise<void> {\n\t\t// waiting on notebook-specific override before this feature can sync with 'files.insertFinalNewline'\n\t\t// if (this.configurationService.getValue('files.insertFinalNewline')) {\n\n\t\tif (this.configurationService.getValue<boolean>(NotebookSetting.insertFinalNewline)) {\n\t\t\tawait this.doInsertFinalNewLine(workingCopy, context.reason === SaveReason.AUTO, progress);\n\t\t}\n\t}\n\n\tprivate async doInsertFinalNewLine(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, isAutoSaved: boolean, progress: IProgress<IProgressStep>): Promise<void> {\n\t\tif (!workingCopy.model || !(workingCopy.model instanceof NotebookFileWorkingCopyModel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst notebook = workingCopy.model.notebookModel;\n\n\t\t// get initial cursor positions\n\t\tconst activeCellEditor = getActiveCellCodeEditor(this.editorService);\n\t\tlet selections;\n\t\tif (activeCellEditor) {\n\t\t\tselections = activeCellEditor.getSelections() ?? [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst allCellEdits = await Promise.all(notebook.cells.map(async (cell) => {\n\t\t\t\tif (cell.cellKind !== CellKind.Code) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst lineCount = cell.textBuffer.getLineCount();\n\t\t\t\tconst lastLineIsEmptyOrWhitespace = cell.textBuffer.getLineFirstNonWhitespaceColumn(lineCount) === 0;\n\n\t\t\t\tif (!lineCount || lastLineIsEmptyOrWhitespace) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn new ResourceTextEdit(cell.uri, { range: new Range(lineCount + 1, cell.textBuffer.getLineLength(lineCount), lineCount + 1, cell.textBuffer.getLineLength(lineCount)), text: cell.textBuffer.getEOL() }, cell.textModel?.getVersionId());\n\t\t\t}));\n\n\t\t\tconst filteredEdits = allCellEdits.filter(edit => edit !== undefined) as ResourceEdit[];\n\t\t\tawait this.bulkEditService.apply(filteredEdits, { label: localize('insertFinalNewLine', \"Insert Final New Line\"), code: 'undoredo.insertFinalNewLine' });\n\n\t\t\t// set cursor back to initial position after inserting final new line\n\t\t\tif (activeCellEditor && selections) {\n\t\t\t\tactiveCellEditor.setSelections(selections);\n\t\t\t}\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nclass CodeActionOnSaveParticipant implements IStoredFileWorkingCopySaveParticipant {\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t}\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tconst isTrusted = this.workspaceTrustManagementService.isWorkspaceTrusted();\n\t\tif (!isTrusted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!workingCopy.model || !(workingCopy.model instanceof NotebookFileWorkingCopyModel)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet saveTrigger = '';\n\t\tif (context.reason === SaveReason.AUTO) {\n\t\t\t// currently this won't happen, as vs/editor/contrib/codeAction/browser/codeAction.ts L#104 filters out codeactions on autosave. Just future-proofing\n\t\t\t// ? notebook CodeActions on autosave seems dangerous (perf-wise)\n\t\t\t// saveTrigger = 'always'; // TODO@Yoyokrazy, support during debt\n\t\t\treturn undefined;\n\t\t} else if (context.reason === SaveReason.EXPLICIT) {\n\t\t\tsaveTrigger = 'explicit';\n\t\t} else {\n\t\t\t// \tSaveReason.FOCUS_CHANGE, WINDOW_CHANGE need to be addressed when autosaves are enabled\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst notebookModel = workingCopy.model.notebookModel;\n\n\t\tconst setting = this.configurationService.getValue<{ [kind: string]: string | boolean }>(NotebookSetting.codeActionsOnSave);\n\t\tconst settingItems: string[] = Array.isArray(setting)\n\t\t\t? setting\n\t\t\t: Object.keys(setting).filter(x => setting[x]);\n\n\t\tconst allCodeActions = this.createCodeActionsOnSave(settingItems);\n\t\tconst excludedActions = allCodeActions\n\t\t\t.filter(x => setting[x.value] === 'never' || setting[x.value] === false);\n\t\tconst includedActions = allCodeActions\n\t\t\t.filter(x => setting[x.value] === saveTrigger || setting[x.value] === true);\n\n\t\tconst editorCodeActionsOnSave = includedActions.filter(x => !CodeActionKind.Notebook.contains(x));\n\t\tconst notebookCodeActionsOnSave = includedActions.filter(x => CodeActionKind.Notebook.contains(x));\n\n\t\t// run notebook code actions\n\t\tif (notebookCodeActionsOnSave.length) {\n\t\t\tconst nbDisposable = new DisposableStore();\n\t\t\tprogress.report({ message: localize('notebookSaveParticipants.notebookCodeActions', \"Running 'Notebook' code actions\") });\n\t\t\ttry {\n\t\t\t\tconst cell = notebookModel.cells[0];\n\t\t\t\tconst ref = await this.textModelService.createModelReference(cell.uri);\n\t\t\t\tnbDisposable.add(ref);\n\n\t\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\t\tawait this.instantiationService.invokeFunction(CodeActionParticipantUtils.applyOnSaveGenericCodeActions, textEditorModel, notebookCodeActionsOnSave, excludedActions, progress, token);\n\t\t\t} catch {\n\t\t\t\tthis.logService.error('Failed to apply notebook code action on save');\n\t\t\t} finally {\n\t\t\t\tprogress.report({ increment: 100 });\n\t\t\t\tnbDisposable.dispose();\n\t\t\t}\n\t\t}\n\n\t\t// run cell level code actions\n\t\tif (editorCodeActionsOnSave.length) {\n\t\t\t// prioritize `source.fixAll` code actions\n\t\t\tif (!Array.isArray(setting)) {\n\t\t\t\teditorCodeActionsOnSave.sort((a, b) => {\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(a)) {\n\t\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst cellDisposable = new DisposableStore();\n\t\t\tprogress.report({ message: localize('notebookSaveParticipants.cellCodeActions', \"Running 'Cell' code actions\") });\n\t\t\ttry {\n\t\t\t\tawait Promise.all(notebookModel.cells.map(async cell => {\n\t\t\t\t\tconst ref = await this.textModelService.createModelReference(cell.uri);\n\t\t\t\t\tcellDisposable.add(ref);\n\n\t\t\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\t\t\tawait this.instantiationService.invokeFunction(CodeActionParticipantUtils.applyOnSaveGenericCodeActions, textEditorModel, editorCodeActionsOnSave, excludedActions, progress, token);\n\t\t\t\t}));\n\t\t\t} catch {\n\t\t\t\tthis.logService.error('Failed to apply code action on save');\n\t\t\t} finally {\n\t\t\t\tprogress.report({ increment: 100 });\n\t\t\t\tcellDisposable.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createCodeActionsOnSave(settingItems: readonly string[]): HierarchicalKind[] {\n\t\tconst kinds = settingItems.map(x => new HierarchicalKind(x));\n\n\t\t// Remove subsets\n\t\treturn kinds.filter(kind => {\n\t\t\treturn kinds.every(otherKind => otherKind.equals(kind) || !otherKind.contains(kind));\n\t\t});\n\t}\n}\n\nexport class CodeActionParticipantUtils {\n\n\tstatic async checkAndRunFormatCodeAction(\n\t\taccessor: ServicesAccessor,\n\t\tnotebookModel: NotebookTextModel,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken): Promise<boolean> {\n\n\t\tconst instantiationService: IInstantiationService = accessor.get(IInstantiationService);\n\t\tconst textModelService: ITextModelService = accessor.get(ITextModelService);\n\t\tconst logService: ILogService = accessor.get(ILogService);\n\t\tconst configurationService: IConfigurationService = accessor.get(IConfigurationService);\n\n\t\tconst formatDisposable = new DisposableStore();\n\t\tlet formatResult: boolean = false;\n\t\tprogress.report({ message: localize('notebookSaveParticipants.formatCodeActions', \"Running 'Format' code actions\") });\n\t\ttry {\n\t\t\tconst cell = notebookModel.cells[0];\n\t\t\tconst ref = await textModelService.createModelReference(cell.uri);\n\t\t\tformatDisposable.add(ref);\n\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\tconst defaultFormatterExtId = configurationService.getValue<string | undefined>(NotebookSetting.defaultFormatter);\n\t\t\tformatResult = await instantiationService.invokeFunction(CodeActionParticipantUtils.applyOnSaveFormatCodeAction, textEditorModel, new HierarchicalKind('notebook.format'), [], defaultFormatterExtId, progress, token);\n\t\t} catch {\n\t\t\tlogService.error('Failed to apply notebook format action on save');\n\t\t} finally {\n\t\t\tprogress.report({ increment: 100 });\n\t\t\tformatDisposable.dispose();\n\t\t}\n\t\treturn formatResult;\n\t}\n\n\tstatic async applyOnSaveGenericCodeActions(\n\t\taccessor: ServicesAccessor,\n\t\tmodel: ITextModel,\n\t\tcodeActionsOnSave: readonly HierarchicalKind[],\n\t\texcludes: readonly HierarchicalKind[],\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken): Promise<void> {\n\n\t\tconst instantiationService: IInstantiationService = accessor.get(IInstantiationService);\n\t\tconst languageFeaturesService: ILanguageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst logService: ILogService = accessor.get(ILogService);\n\n\t\tconst getActionProgress = new class implements IProgress<CodeActionProvider> {\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t{ key: 'codeaction.get2', comment: ['[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}'] },\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure]({1})).\",\n\t\t\t\t\t\t[...this._names].map(name => `'${name}'`).join(', '),\n\t\t\t\t\t\t'command:workbench.action.openSettings?%5B%22notebook.codeActionsOnSave%22%5D'\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (provider.displayName && !this._names.has(provider.displayName)) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (const codeActionKind of codeActionsOnSave) {\n\t\t\tconst actionsToRun = await CodeActionParticipantUtils.getActionsToRun(model, codeActionKind, excludes, languageFeaturesService, getActionProgress, token);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tfor (const action of actionsToRun.validActions) {\n\t\t\t\t\tconst codeActionEdits = action.action.edit?.edits;\n\t\t\t\t\tlet breakFlag = false;\n\t\t\t\t\tif (!action.action.kind?.startsWith('notebook')) {\n\t\t\t\t\t\tfor (const edit of codeActionEdits ?? []) {\n\t\t\t\t\t\t\tconst workspaceTextEdit = edit as IWorkspaceTextEdit;\n\t\t\t\t\t\t\tif (workspaceTextEdit.resource && isEqual(workspaceTextEdit.resource, model.uri)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// error -> applied to multiple resources\n\t\t\t\t\t\t\t\tbreakFlag = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (breakFlag) {\n\t\t\t\t\t\tlogService.warn('Failed to apply code action on save, applied to multiple resources.');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tprogress.report({ message: localize('codeAction.apply', \"Applying code action '{0}'.\", action.action.title) });\n\t\t\t\t\tawait instantiationService.invokeFunction(applyCodeAction, action, ApplyCodeActionReason.OnSave, {}, token);\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// Failure to apply a code action should not block other on save actions\n\t\t\t} finally {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async applyOnSaveFormatCodeAction(\n\t\taccessor: ServicesAccessor,\n\t\tmodel: ITextModel,\n\t\tformatCodeActionOnSave: HierarchicalKind,\n\t\texcludes: readonly HierarchicalKind[],\n\t\textensionId: string | undefined,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken): Promise<boolean> {\n\n\t\tconst instantiationService: IInstantiationService = accessor.get(IInstantiationService);\n\t\tconst languageFeaturesService: ILanguageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst logService: ILogService = accessor.get(ILogService);\n\n\t\tconst getActionProgress = new class implements IProgress<CodeActionProvider> {\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t{ key: 'codeaction.get2', comment: ['[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}'] },\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure]({1})).\",\n\t\t\t\t\t\t[...this._names].map(name => `'${name}'`).join(', '),\n\t\t\t\t\t\t'command:workbench.action.openSettings?%5B%22notebook.defaultFormatter%22%5D'\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (provider.displayName && !this._names.has(provider.displayName)) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst providedActions = await CodeActionParticipantUtils.getActionsToRun(model, formatCodeActionOnSave, excludes, languageFeaturesService, getActionProgress, token);\n\t\t// warn the user if there are more than one provided format action, and there is no specified defaultFormatter\n\t\tif (providedActions.validActions.length > 1 && !extensionId) {\n\t\t\tlogService.warn('More than one format code action is provided, the 0th one will be used. A default can be specified via `notebook.defaultFormatter` in your settings.');\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tprovidedActions.dispose();\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst action: CodeActionItem | undefined = extensionId ? providedActions.validActions.find(action => action.provider?.extensionId === extensionId) : providedActions.validActions[0];\n\t\t\tif (!action) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tprogress.report({ message: localize('codeAction.apply', \"Applying code action '{0}'.\", action.action.title) });\n\t\t\tawait instantiationService.invokeFunction(applyCodeAction, action, ApplyCodeActionReason.OnSave, {}, token);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch {\n\t\t\tlogService.error('Failed to apply notebook format code action on save');\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tprovidedActions.dispose();\n\t\t}\n\t\treturn true;\n\t}\n\n\t// @Yoyokrazy this could likely be modified to leverage the extensionID, therefore not getting actions from providers unnecessarily -- future work\n\tstatic getActionsToRun(model: ITextModel, codeActionKind: HierarchicalKind, excludes: readonly HierarchicalKind[], languageFeaturesService: ILanguageFeaturesService, progress: IProgress<CodeActionProvider>, token: CancellationToken) {\n\t\treturn getCodeActions(languageFeaturesService.codeActionProvider, model, model.getFullModelRange(), {\n\t\t\ttype: CodeActionTriggerType.Invoke,\n\t\t\ttriggerAction: CodeActionTriggerSource.OnSave,\n\t\t\tfilter: { include: codeActionKind, excludes: excludes, includeSourceActions: true },\n\t\t}, progress, token);\n\t}\n\n}\n\nfunction getActiveCellCodeEditor(editorService: IEditorService): ICodeEditor | undefined {\n\tconst activePane = editorService.activeEditorPane;\n\tconst notebookEditor = getNotebookEditorFromEditorPane(activePane);\n\tconst activeCodeEditor = notebookEditor?.activeCodeEditor;\n\treturn activeCodeEditor;\n}\n\nexport class SaveParticipantsContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService) {\n\n\t\tsuper();\n\t\tthis.registerSaveParticipants();\n\t}\n\n\tprivate registerSaveParticipants(): void {\n\t\tthis._register(this.workingCopyFileService.addSaveParticipant(this.instantiationService.createInstance(TrimWhitespaceParticipant)));\n\t\tthis._register(this.workingCopyFileService.addSaveParticipant(this.instantiationService.createInstance(CodeActionOnSaveParticipant)));\n\t\tthis._register(this.workingCopyFileService.addSaveParticipant(this.instantiationService.createInstance(FormatOnSaveParticipant)));\n\t\tthis._register(this.workingCopyFileService.addSaveParticipant(this.instantiationService.createInstance(InsertFinalNewLineParticipant)));\n\t\tthis._register(this.workingCopyFileService.addSaveParticipant(this.instantiationService.createInstance(TrimFinalNewLinesParticipant)));\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchContributionsExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(SaveParticipantsContribution, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": ["action"]
}
