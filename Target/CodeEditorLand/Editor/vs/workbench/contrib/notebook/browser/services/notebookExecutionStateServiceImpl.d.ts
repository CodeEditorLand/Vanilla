import { Disposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IAccessibilitySignalService } from "vs/platform/accessibilitySignal/browser/accessibilitySignalService";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILogService } from "vs/platform/log/common/log";
import { INotebookCellExecution, INotebookExecution, INotebookExecutionStateService } from "vs/workbench/contrib/notebook/common/notebookExecutionStateService";
import { INotebookService } from "vs/workbench/contrib/notebook/common/notebookService";
export declare class NotebookExecutionStateService extends Disposable implements INotebookExecutionStateService {
    private readonly _instantiationService;
    private readonly _logService;
    private readonly _notebookService;
    private readonly _accessibilitySignalService;
    _serviceBrand: undefined;
    private readonly _executions;
    private readonly _notebookExecutions;
    private readonly _notebookListeners;
    private readonly _cellListeners;
    private readonly _lastFailedCells;
    private readonly _onDidChangeExecution;
    onDidChangeExecution: any;
    private readonly _onDidChangeLastRunFailState;
    onDidChangeLastRunFailState: any;
    constructor(_instantiationService: IInstantiationService, _logService: ILogService, _notebookService: INotebookService, _accessibilitySignalService: IAccessibilitySignalService);
    getLastFailedCellForNotebook(notebook: URI): number | undefined;
    forceCancelNotebookExecutions(notebookUri: URI): void;
    getCellExecution(cellUri: URI): INotebookCellExecution | undefined;
    getExecution(notebook: URI): INotebookExecution | undefined;
    getCellExecutionsForNotebook(notebook: URI): INotebookCellExecution[];
    getCellExecutionsByHandleForNotebook(notebook: URI): Map<number, INotebookCellExecution> | undefined;
    private _onCellExecutionDidChange;
    private _onCellExecutionDidComplete;
    private _onExecutionDidChange;
    private _onExecutionDidComplete;
    createCellExecution(notebookUri: URI, cellHandle: number): INotebookCellExecution;
    createExecution(notebookUri: URI): INotebookExecution;
    private _createNotebookCellExecution;
    private _createNotebookExecution;
    private _setLastFailedCell;
    private _setLastFailedCellVisibility;
    private _clearLastFailedCell;
    private _getFailedCellListener;
    dispose(): void;
}
