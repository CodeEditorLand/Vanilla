import{isTextStreamMime as p}from"../../../common/notebookCommon.js";async function b(e,i,u,s){const r=i.model,n=e&&a.includes(e)?r.outputs.find(t=>t.mime===e):r.outputs.find(t=>a.includes(t.mime));if(e=n?.mime,!e||!n)return;const c=new TextDecoder;let o=c.decode(n.data.buffer);if(p(e)){const t=i.cellViewModel;let l=t.outputsViewModels.indexOf(i)+1;for(;l<t.model.outputs.length;){const d=t.model.outputs[l].outputs.find(f=>p(f.mime));if(!d)break;o=o+c.decode(d.data.buffer),l=l+1}}e.endsWith("error")&&(o=o.replace(/\\u001b\[[0-9;]*m/gi,"").replaceAll("\\n",`
`));try{await u.writeText(o)}catch(t){s.error(`Failed to copy content: ${t}`)}}const a=["text/latex","text/html","application/vnd.code.notebook.error","application/vnd.code.notebook.stdout","application/x.notebook.stdout","application/x.notebook.stream","application/vnd.code.notebook.stderr","application/x.notebook.stderr","text/plain","text/markdown","application/json"];export{a as TEXT_BASED_MIMETYPES,b as copyCellOutput};
