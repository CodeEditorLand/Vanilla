import{createFastDomNode as m}from"../../../../../base/browser/fastDomNode.js";import{onUnexpectedError as w}from"../../../../../base/common/errors.js";import{Disposable as g}from"../../../../../base/common/lifecycle.js";import"../notebookBrowser.js";import"../view/notebookCellListView.js";import"../view/notebookRenderingCommon.js";import"../viewModel/notebookViewModelImpl.js";const a=()=>{throw new Error("Invalid notebook view zone change accessor")};class M extends g{constructor(e,o){super();this.listView=e;this.coordinator=o;this.domNode=m(document.createElement("div")),this.domNode.setClassName("view-zones"),this.domNode.setPosition("absolute"),this.domNode.setAttribute("role","presentation"),this.domNode.setAttribute("aria-hidden","true"),this.domNode.setWidth("100%"),this._zones={},this.listView.containerDomNode.appendChild(this.domNode.domNode)}_zones;domNode;changeViewZones(e){let o=!1;const i={addZone:t=>(o=!0,this._addZone(t)),removeZone:t=>{o=!0,this._removeZone(t)},layoutZone:t=>{o=!0,this._layoutZone(t)}};return v(e,i),i.addZone=a,i.removeZone=a,i.layoutZone=a,o}onCellsChanged(e){e.splices.slice().reverse().forEach(i=>{const[t,s,I]=i,l=t,p=t+s;for(const n in this._zones){const d=this._zones[n].zone,r=d.afterModelPosition-1;if(r>=l&&r<p)d.afterModelPosition=l,this._updateWhitespace(this._zones[n]);else if(r>=p){const N=I.length-s;d.afterModelPosition+=N,this._updateWhitespace(this._zones[n])}}})}onHiddenRangesChange(){for(const e in this._zones)this._updateWhitespace(this._zones[e])}_updateWhitespace(e){const o=e.whitespaceId,i=this.coordinator.convertModelIndexToViewIndex(e.zone.afterModelPosition),t=this._isInHiddenRanges(e.zone);e.isInHiddenArea=t,this.listView.changeOneWhitespace(o,i,t?0:e.zone.heightInPx)}layout(){for(const e in this._zones)this._layoutZone(e)}_addZone(e){const o=this.coordinator.convertModelIndexToViewIndex(e.afterModelPosition),i=this.listView.insertWhitespace(o,e.heightInPx),t=this._isInHiddenRanges(e),s={whitespaceId:i,zone:e,domNode:m(e.domNode),isInHiddenArea:t};return this._zones[i]=s,s.domNode.setPosition("absolute"),s.domNode.domNode.style.width="100%",s.domNode.setDisplay("none"),s.domNode.setAttribute("notebook-view-zone",i),this.domNode.appendChild(s.domNode),i}_removeZone(e){this.listView.removeWhitespace(e),delete this._zones[e]}_layoutZone(e){const o=this._zones[e];if(!o)return;if(this._updateWhitespace(this._zones[e]),this._isInHiddenRanges(o.zone))o.domNode.setDisplay("none");else{const t=this.listView.getWhitespacePosition(o.whitespaceId);o.domNode.setTop(t),o.domNode.setDisplay("block"),o.domNode.setHeight(o.zone.heightInPx)}}_isInHiddenRanges(e){const o=e.afterModelPosition;return!this.coordinator.modelIndexIsVisible(o)}dispose(){super.dispose(),this._zones={}}}function v(c,h){try{return c(h)}catch(e){w(e)}}export{M as NotebookViewZones};
