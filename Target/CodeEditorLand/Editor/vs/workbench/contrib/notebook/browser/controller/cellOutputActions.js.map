{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/cellOutputActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ServicesAccessor } from '../../../../../editor/browser/editorExtensions.js';\nimport { localize } from '../../../../../nls.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../../platform/clipboard/common/clipboardService.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { INotebookOutputActionContext, NOTEBOOK_ACTIONS_CATEGORY } from './coreActions.js';\nimport { NOTEBOOK_CELL_HAS_HIDDEN_OUTPUTS, NOTEBOOK_CELL_HAS_OUTPUTS } from '../../common/notebookContextKeys.js';\nimport * as icons from '../notebookIcons.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { copyCellOutput } from '../contrib/clipboard/cellOutputClipboard.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { ICellOutputViewModel, ICellViewModel, INotebookEditor, getNotebookEditorFromEditorPane } from '../notebookBrowser.js';\nimport { CellKind, CellUri } from '../../common/notebookCommon.js';\nimport { CodeCellViewModel } from '../viewModel/codeCellViewModel.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\n\nexport const COPY_OUTPUT_COMMAND_ID = 'notebook.cellOutput.copy';\n\nregisterAction2(class ShowAllOutputsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.cellOuput.showEmptyOutputs',\n\t\t\ttitle: localize('notebookActions.showAllOutput', \"Show empty outputs\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.NotebookOutputToolbar,\n\t\t\t\twhen: ContextKeyExpr.and(NOTEBOOK_CELL_HAS_OUTPUTS, NOTEBOOK_CELL_HAS_HIDDEN_OUTPUTS)\n\t\t\t},\n\t\t\tf1: false,\n\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, context: INotebookOutputActionContext): void {\n\t\tconst cell = context.cell;\n\t\tif (cell && cell.cellKind === CellKind.Code) {\n\n\t\t\tfor (let i = 1; i < cell.outputsViewModels.length; i++) {\n\t\t\t\tif (!cell.outputsViewModels[i].visible.get()) {\n\t\t\t\t\tcell.outputsViewModels[i].setVisible(true, true);\n\t\t\t\t\t(cell as CodeCellViewModel).updateOutputHeight(i, 1, 'command');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nregisterAction2(class CopyCellOutputAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: COPY_OUTPUT_COMMAND_ID,\n\t\t\ttitle: localize('notebookActions.copyOutput', \"Copy Cell Output\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.NotebookOutputToolbar,\n\t\t\t\twhen: NOTEBOOK_CELL_HAS_OUTPUTS\n\t\t\t},\n\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\ticon: icons.copyIcon,\n\t\t});\n\t}\n\n\tprivate getNoteboookEditor(editorService: IEditorService, outputContext: INotebookOutputActionContext | { outputViewModel: ICellOutputViewModel } | undefined): INotebookEditor | undefined {\n\t\tif (outputContext && 'notebookEditor' in outputContext) {\n\t\t\treturn outputContext.notebookEditor;\n\t\t}\n\t\treturn getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\t}\n\n\tasync run(accessor: ServicesAccessor, outputContext: INotebookOutputActionContext | { outputViewModel: ICellOutputViewModel } | undefined): Promise<void> {\n\t\tconst notebookEditor = this.getNoteboookEditor(accessor.get(IEditorService), outputContext);\n\n\t\tif (!notebookEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet outputViewModel: ICellOutputViewModel | undefined;\n\t\tif (outputContext && 'outputId' in outputContext && typeof outputContext.outputId === 'string') {\n\t\t\toutputViewModel = getOutputViewModelFromId(outputContext.outputId, notebookEditor);\n\t\t} else if (outputContext && 'outputViewModel' in outputContext) {\n\t\t\toutputViewModel = outputContext.outputViewModel;\n\t\t}\n\n\t\tif (!outputViewModel) {\n\t\t\t// not able to find the output from the provided context, use the active cell\n\t\t\tconst activeCell = notebookEditor.getActiveCell();\n\t\t\tif (!activeCell) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (activeCell.focusedOutputId !== undefined) {\n\t\t\t\toutputViewModel = activeCell.outputsViewModels.find(output => {\n\t\t\t\t\treturn output.model.outputId === activeCell.focusedOutputId;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toutputViewModel = activeCell.outputsViewModels.find(output => output.pickedMimeType?.isTrusted);\n\t\t\t}\n\t\t}\n\n\t\tif (!outputViewModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mimeType = outputViewModel.pickedMimeType?.mimeType;\n\n\t\tif (mimeType?.startsWith('image/')) {\n\t\t\tconst focusOptions = { skipReveal: true, outputId: outputViewModel.model.outputId, altOutputId: outputViewModel.model.alternativeOutputId };\n\t\t\tawait notebookEditor.focusNotebookCell(outputViewModel.cellViewModel as ICellViewModel, 'output', focusOptions);\n\t\t\tnotebookEditor.copyOutputImage(outputViewModel);\n\t\t} else {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\tcopyCellOutput(mimeType, outputViewModel, clipboardService, logService);\n\t\t}\n\t}\n\n});\n\nfunction getOutputViewModelFromId(outputId: string, notebookEditor: INotebookEditor): ICellOutputViewModel | undefined {\n\tconst notebookViewModel = notebookEditor.getViewModel();\n\tif (notebookViewModel) {\n\t\tconst codeCells = notebookViewModel.viewCells.filter(cell => cell.cellKind === CellKind.Code) as CodeCellViewModel[];\n\t\tfor (const cell of codeCells) {\n\t\t\tconst output = cell.outputsViewModels.find(output => output.model.outputId === outputId || output.model.alternativeOutputId === outputId);\n\t\t\tif (output) {\n\t\t\t\treturn output;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport const OPEN_OUTPUT_COMMAND_ID = 'notebook.cellOutput.openInTextEditor';\n\nregisterAction2(class OpenCellOutputInEditorAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OPEN_OUTPUT_COMMAND_ID,\n\t\t\ttitle: localize('notebookActions.openOutputInEditor', \"Open Cell Output in Text Editor\"),\n\t\t\tf1: false,\n\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\ticon: icons.copyIcon,\n\t\t});\n\t}\n\n\tprivate getNoteboookEditor(editorService: IEditorService, outputContext: INotebookOutputActionContext | { outputViewModel: ICellOutputViewModel } | undefined): INotebookEditor | undefined {\n\t\tif (outputContext && 'notebookEditor' in outputContext) {\n\t\t\treturn outputContext.notebookEditor;\n\t\t}\n\t\treturn getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\t}\n\n\tasync run(accessor: ServicesAccessor, outputContext: INotebookOutputActionContext | { outputViewModel: ICellOutputViewModel } | undefined): Promise<void> {\n\t\tconst notebookEditor = this.getNoteboookEditor(accessor.get(IEditorService), outputContext);\n\n\t\tif (!notebookEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet outputViewModel: ICellOutputViewModel | undefined;\n\t\tif (outputContext && 'outputId' in outputContext && typeof outputContext.outputId === 'string') {\n\t\t\toutputViewModel = getOutputViewModelFromId(outputContext.outputId, notebookEditor);\n\t\t} else if (outputContext && 'outputViewModel' in outputContext) {\n\t\t\toutputViewModel = outputContext.outputViewModel;\n\t\t}\n\n\t\tconst openerService = accessor.get(IOpenerService);\n\n\t\tif (outputViewModel?.model.outputId && notebookEditor.textModel?.uri) {\n\t\t\topenerService.open(CellUri.generateCellOutputUri(notebookEditor.textModel.uri, outputViewModel.model.outputId));\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": ["output"]
}
