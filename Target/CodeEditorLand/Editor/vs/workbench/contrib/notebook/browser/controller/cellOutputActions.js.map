{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/cellOutputActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ServicesAccessor } from \"../../../../../editor/browser/editorExtensions.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport { IClipboardService } from \"../../../../../platform/clipboard/common/clipboardService.js\";\nimport { ContextKeyExpr } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { ILogService } from \"../../../../../platform/log/common/log.js\";\nimport { IOpenerService } from \"../../../../../platform/opener/common/opener.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport { CellKind, CellUri } from \"../../common/notebookCommon.js\";\nimport {\n\tNOTEBOOK_CELL_HAS_HIDDEN_OUTPUTS,\n\tNOTEBOOK_CELL_HAS_OUTPUTS,\n} from \"../../common/notebookContextKeys.js\";\nimport { copyCellOutput } from \"../contrib/clipboard/cellOutputClipboard.js\";\nimport {\n\ttype ICellOutputViewModel,\n\ttype ICellViewModel,\n\ttype INotebookEditor,\n\tgetNotebookEditorFromEditorPane,\n} from \"../notebookBrowser.js\";\nimport * as icons from \"../notebookIcons.js\";\nimport type { CodeCellViewModel } from \"../viewModel/codeCellViewModel.js\";\nimport {\n\ttype INotebookOutputActionContext,\n\tNOTEBOOK_ACTIONS_CATEGORY,\n} from \"./coreActions.js\";\n\nexport const COPY_OUTPUT_COMMAND_ID = \"notebook.cellOutput.copy\";\n\nregisterAction2(\n\tclass ShowAllOutputsAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"notebook.cellOuput.showEmptyOutputs\",\n\t\t\t\ttitle: localize(\n\t\t\t\t\t\"notebookActions.showAllOutput\",\n\t\t\t\t\t\"Show empty outputs\",\n\t\t\t\t),\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.NotebookOutputToolbar,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNOTEBOOK_CELL_HAS_OUTPUTS,\n\t\t\t\t\t\tNOTEBOOK_CELL_HAS_HIDDEN_OUTPUTS,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tf1: false,\n\t\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\t});\n\t\t}\n\n\t\trun(\n\t\t\taccessor: ServicesAccessor,\n\t\t\tcontext: INotebookOutputActionContext,\n\t\t): void {\n\t\t\tconst cell = context.cell;\n\t\t\tif (cell && cell.cellKind === CellKind.Code) {\n\t\t\t\tfor (let i = 1; i < cell.outputsViewModels.length; i++) {\n\t\t\t\t\tif (!cell.outputsViewModels[i].visible.get()) {\n\t\t\t\t\t\tcell.outputsViewModels[i].setVisible(true, true);\n\t\t\t\t\t\t(cell as CodeCellViewModel).updateOutputHeight(\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\"command\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass CopyCellOutputAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: COPY_OUTPUT_COMMAND_ID,\n\t\t\t\ttitle: localize(\n\t\t\t\t\t\"notebookActions.copyOutput\",\n\t\t\t\t\t\"Copy Cell Output\",\n\t\t\t\t),\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.NotebookOutputToolbar,\n\t\t\t\t\twhen: NOTEBOOK_CELL_HAS_OUTPUTS,\n\t\t\t\t},\n\t\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\t\ticon: icons.copyIcon,\n\t\t\t});\n\t\t}\n\n\t\tprivate getNoteboookEditor(\n\t\t\teditorService: IEditorService,\n\t\t\toutputContext:\n\t\t\t\t| INotebookOutputActionContext\n\t\t\t\t| { outputViewModel: ICellOutputViewModel }\n\t\t\t\t| undefined,\n\t\t): INotebookEditor | undefined {\n\t\t\tif (outputContext && \"notebookEditor\" in outputContext) {\n\t\t\t\treturn outputContext.notebookEditor;\n\t\t\t}\n\t\t\treturn getNotebookEditorFromEditorPane(\n\t\t\t\teditorService.activeEditorPane,\n\t\t\t);\n\t\t}\n\n\t\tasync run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\toutputContext:\n\t\t\t\t| INotebookOutputActionContext\n\t\t\t\t| { outputViewModel: ICellOutputViewModel }\n\t\t\t\t| undefined,\n\t\t): Promise<void> {\n\t\t\tconst notebookEditor = this.getNoteboookEditor(\n\t\t\t\taccessor.get(IEditorService),\n\t\t\t\toutputContext,\n\t\t\t);\n\n\t\t\tif (!notebookEditor) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet outputViewModel: ICellOutputViewModel | undefined;\n\t\t\tif (\n\t\t\t\toutputContext &&\n\t\t\t\t\"outputId\" in outputContext &&\n\t\t\t\ttypeof outputContext.outputId === \"string\"\n\t\t\t) {\n\t\t\t\toutputViewModel = getOutputViewModelFromId(\n\t\t\t\t\toutputContext.outputId,\n\t\t\t\t\tnotebookEditor,\n\t\t\t\t);\n\t\t\t} else if (outputContext && \"outputViewModel\" in outputContext) {\n\t\t\t\toutputViewModel = outputContext.outputViewModel;\n\t\t\t}\n\n\t\t\tif (!outputViewModel) {\n\t\t\t\t// not able to find the output from the provided context, use the active cell\n\t\t\t\tconst activeCell = notebookEditor.getActiveCell();\n\t\t\t\tif (!activeCell) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (activeCell.focusedOutputId !== undefined) {\n\t\t\t\t\toutputViewModel = activeCell.outputsViewModels.find(\n\t\t\t\t\t\t(output) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\toutput.model.outputId ===\n\t\t\t\t\t\t\t\tactiveCell.focusedOutputId\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\toutputViewModel = activeCell.outputsViewModels.find(\n\t\t\t\t\t\t(output) => output.pickedMimeType?.isTrusted,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!outputViewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst mimeType = outputViewModel.pickedMimeType?.mimeType;\n\n\t\t\tif (mimeType?.startsWith(\"image/\")) {\n\t\t\t\tconst focusOptions = {\n\t\t\t\t\tskipReveal: true,\n\t\t\t\t\toutputId: outputViewModel.model.outputId,\n\t\t\t\t\taltOutputId: outputViewModel.model.alternativeOutputId,\n\t\t\t\t};\n\t\t\t\tawait notebookEditor.focusNotebookCell(\n\t\t\t\t\toutputViewModel.cellViewModel as ICellViewModel,\n\t\t\t\t\t\"output\",\n\t\t\t\t\tfocusOptions,\n\t\t\t\t);\n\t\t\t\tnotebookEditor.copyOutputImage(outputViewModel);\n\t\t\t} else {\n\t\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\t\tcopyCellOutput(\n\t\t\t\t\tmimeType,\n\t\t\t\t\toutputViewModel,\n\t\t\t\t\tclipboardService,\n\t\t\t\t\tlogService,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n);\n\nfunction getOutputViewModelFromId(\n\toutputId: string,\n\tnotebookEditor: INotebookEditor,\n): ICellOutputViewModel | undefined {\n\tconst notebookViewModel = notebookEditor.getViewModel();\n\tif (notebookViewModel) {\n\t\tconst codeCells = notebookViewModel.viewCells.filter(\n\t\t\t(cell) => cell.cellKind === CellKind.Code,\n\t\t) as CodeCellViewModel[];\n\t\tfor (const cell of codeCells) {\n\t\t\tconst output = cell.outputsViewModels.find(\n\t\t\t\t(output) =>\n\t\t\t\t\toutput.model.outputId === outputId ||\n\t\t\t\t\toutput.model.alternativeOutputId === outputId,\n\t\t\t);\n\t\t\tif (output) {\n\t\t\t\treturn output;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport const OPEN_OUTPUT_COMMAND_ID = \"notebook.cellOutput.openInTextEditor\";\n\nregisterAction2(\n\tclass OpenCellOutputInEditorAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: OPEN_OUTPUT_COMMAND_ID,\n\t\t\t\ttitle: localize(\n\t\t\t\t\t\"notebookActions.openOutputInEditor\",\n\t\t\t\t\t\"Open Cell Output in Text Editor\",\n\t\t\t\t),\n\t\t\t\tf1: false,\n\t\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\t\ticon: icons.copyIcon,\n\t\t\t});\n\t\t}\n\n\t\tprivate getNoteboookEditor(\n\t\t\teditorService: IEditorService,\n\t\t\toutputContext:\n\t\t\t\t| INotebookOutputActionContext\n\t\t\t\t| { outputViewModel: ICellOutputViewModel }\n\t\t\t\t| undefined,\n\t\t): INotebookEditor | undefined {\n\t\t\tif (outputContext && \"notebookEditor\" in outputContext) {\n\t\t\t\treturn outputContext.notebookEditor;\n\t\t\t}\n\t\t\treturn getNotebookEditorFromEditorPane(\n\t\t\t\teditorService.activeEditorPane,\n\t\t\t);\n\t\t}\n\n\t\tasync run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\toutputContext:\n\t\t\t\t| INotebookOutputActionContext\n\t\t\t\t| { outputViewModel: ICellOutputViewModel }\n\t\t\t\t| undefined,\n\t\t): Promise<void> {\n\t\t\tconst notebookEditor = this.getNoteboookEditor(\n\t\t\t\taccessor.get(IEditorService),\n\t\t\t\toutputContext,\n\t\t\t);\n\n\t\t\tif (!notebookEditor) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet outputViewModel: ICellOutputViewModel | undefined;\n\t\t\tif (\n\t\t\t\toutputContext &&\n\t\t\t\t\"outputId\" in outputContext &&\n\t\t\t\ttypeof outputContext.outputId === \"string\"\n\t\t\t) {\n\t\t\t\toutputViewModel = getOutputViewModelFromId(\n\t\t\t\t\toutputContext.outputId,\n\t\t\t\t\tnotebookEditor,\n\t\t\t\t);\n\t\t\t} else if (outputContext && \"outputViewModel\" in outputContext) {\n\t\t\t\toutputViewModel = outputContext.outputViewModel;\n\t\t\t}\n\n\t\t\tconst openerService = accessor.get(IOpenerService);\n\n\t\t\tif (\n\t\t\t\toutputViewModel?.model.outputId &&\n\t\t\t\tnotebookEditor.textModel?.uri\n\t\t\t) {\n\t\t\t\topenerService.open(\n\t\t\t\t\tCellUri.generateCellOutputUri(\n\t\t\t\t\t\tnotebookEditor.textModel.uri,\n\t\t\t\t\t\toutputViewModel.model.outputId,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": ["output"]
}
