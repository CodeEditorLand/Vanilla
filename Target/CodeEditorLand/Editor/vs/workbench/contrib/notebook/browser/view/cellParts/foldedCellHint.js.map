{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from '../../../../../../base/browser/dom.js';\nimport { Codicon } from '../../../../../../base/common/codicons.js';\nimport { ThemeIcon } from '../../../../../../base/common/themables.js';\nimport { localize } from '../../../../../../nls.js';\nimport { FoldingController } from '../../controller/foldingController.js';\nimport { CellEditState, CellFoldingState, INotebookEditor } from '../../notebookBrowser.js';\nimport { CellContentPart } from '../cellPart.js';\nimport { MarkupCellViewModel } from '../../viewModel/markupCellViewModel.js';\nimport { ICellRange } from '../../../common/notebookRange.js';\nimport { executingStateIcon } from '../../notebookIcons.js';\nimport { INotebookExecutionStateService } from '../../../common/notebookExecutionStateService.js';\nimport { CellKind, NotebookCellExecutionState } from '../../../common/notebookCommon.js';\nimport { MutableDisposable } from '../../../../../../base/common/lifecycle.js';\n\nexport class FoldedCellHint extends CellContentPart {\n\n\tprivate readonly _runButtonListener = this._register(new MutableDisposable());\n\tprivate readonly _cellExecutionListener = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\tprivate readonly _container: HTMLElement,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService\n\t) {\n\t\tsuper();\n\t}\n\n\toverride didRenderCell(element: MarkupCellViewModel): void {\n\t\tthis.update(element);\n\t}\n\n\tprivate update(element: MarkupCellViewModel) {\n\t\tif (!this._notebookEditor.hasModel()) {\n\t\t\tthis._cellExecutionListener.clear();\n\t\t\tthis._runButtonListener.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.isInputCollapsed || element.getEditState() === CellEditState.Editing) {\n\t\t\tthis._cellExecutionListener.clear();\n\t\t\tthis._runButtonListener.clear();\n\t\t\tDOM.hide(this._container);\n\t\t} else if (element.foldingState === CellFoldingState.Collapsed) {\n\t\t\tconst idx = this._notebookEditor.getViewModel().getCellIndex(element);\n\t\t\tconst length = this._notebookEditor.getViewModel().getFoldedLength(idx);\n\n\t\t\tconst runSectionButton = this.getRunFoldedSectionButton({ start: idx, end: idx + length + 1 });\n\t\t\tif (!runSectionButton) {\n\t\t\t\tDOM.reset(this._container, this.getHiddenCellsLabel(length), this.getHiddenCellHintButton(element));\n\t\t\t} else {\n\t\t\t\tDOM.reset(this._container, runSectionButton, this.getHiddenCellsLabel(length), this.getHiddenCellHintButton(element));\n\t\t\t}\n\n\t\t\tDOM.show(this._container);\n\n\t\t\tconst foldHintTop = element.layoutInfo.previewHeight;\n\t\t\tthis._container.style.top = `${foldHintTop}px`;\n\t\t} else {\n\t\t\tthis._cellExecutionListener.clear();\n\t\t\tthis._runButtonListener.clear();\n\t\t\tDOM.hide(this._container);\n\t\t}\n\t}\n\n\tprivate getHiddenCellsLabel(num: number): HTMLElement {\n\t\tconst label = num === 1 ?\n\t\t\tlocalize('hiddenCellsLabel', \"1 cell hidden\") :\n\t\t\tlocalize('hiddenCellsLabelPlural', \"{0} cells hidden\", num);\n\n\t\treturn DOM.$('span.notebook-folded-hint-label', undefined, label);\n\t}\n\n\tprivate getHiddenCellHintButton(element: MarkupCellViewModel): HTMLElement {\n\t\tconst expandIcon = DOM.$('span.cell-expand-part-button');\n\t\texpandIcon.classList.add(...ThemeIcon.asClassNameArray(Codicon.more));\n\t\tthis._register(DOM.addDisposableListener(expandIcon, DOM.EventType.CLICK, () => {\n\t\t\tconst controller = this._notebookEditor.getContribution<FoldingController>(FoldingController.id);\n\t\t\tconst idx = this._notebookEditor.getCellIndex(element);\n\t\t\tif (typeof idx === 'number') {\n\t\t\t\tcontroller.setFoldingStateDown(idx, CellFoldingState.Expanded, 1);\n\t\t\t}\n\t\t}));\n\n\t\treturn expandIcon;\n\t}\n\n\tprivate getRunFoldedSectionButton(range: ICellRange): HTMLElement | undefined {\n\t\tconst runAllContainer = DOM.$('span.folded-cell-run-section-button');\n\t\tconst cells = this._notebookEditor.getCellsInRange(range);\n\n\t\t// Check if any cells are code cells, if not, we won't show the run button\n\t\tconst hasCodeCells = cells.some(cell => cell.cellKind === CellKind.Code);\n\t\tif (!hasCodeCells) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst isRunning = cells.some(cell => {\n\t\t\tconst cellExecution = this._notebookExecutionStateService.getCellExecution(cell.uri);\n\t\t\treturn cellExecution && cellExecution.state === NotebookCellExecutionState.Executing;\n\t\t});\n\n\t\tconst runAllIcon = isRunning ?\n\t\t\tThemeIcon.modify(executingStateIcon, 'spin') :\n\t\t\tCodicon.play;\n\t\trunAllContainer.classList.add(...ThemeIcon.asClassNameArray(runAllIcon));\n\n\t\tthis._runButtonListener.value = DOM.addDisposableListener(runAllContainer, DOM.EventType.CLICK, () => {\n\t\t\tthis._notebookEditor.executeNotebookCells(cells);\n\t\t});\n\n\t\tthis._cellExecutionListener.value = this._notebookExecutionStateService.onDidChangeExecution(() => {\n\t\t\tconst isRunning = cells.some(cell => {\n\t\t\t\tconst cellExecution = this._notebookExecutionStateService.getCellExecution(cell.uri);\n\t\t\t\treturn cellExecution && cellExecution.state === NotebookCellExecutionState.Executing;\n\t\t\t});\n\n\t\t\tconst runAllIcon = isRunning ?\n\t\t\t\tThemeIcon.modify(executingStateIcon, 'spin') :\n\t\t\t\tCodicon.play;\n\t\t\trunAllContainer.className = '';\n\t\t\trunAllContainer.classList.add('folded-cell-run-section-button', ...ThemeIcon.asClassNameArray(runAllIcon));\n\t\t});\n\n\t\treturn runAllContainer;\n\t}\n\n\toverride updateInternalLayoutNow(element: MarkupCellViewModel) {\n\t\tthis.update(element);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["isRunning", "runAllIcon"]
}
