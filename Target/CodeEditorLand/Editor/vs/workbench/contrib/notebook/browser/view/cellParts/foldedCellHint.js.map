{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from \"../../../../../../base/browser/dom.js\";\nimport { Codicon } from \"../../../../../../base/common/codicons.js\";\nimport { MutableDisposable } from \"../../../../../../base/common/lifecycle.js\";\nimport { ThemeIcon } from \"../../../../../../base/common/themables.js\";\nimport { localize } from \"../../../../../../nls.js\";\nimport {\n\tCellKind,\n\tNotebookCellExecutionState,\n} from \"../../../common/notebookCommon.js\";\nimport { INotebookExecutionStateService } from \"../../../common/notebookExecutionStateService.js\";\nimport type { ICellRange } from \"../../../common/notebookRange.js\";\nimport { FoldingController } from \"../../controller/foldingController.js\";\nimport {\n\tCellEditState,\n\tCellFoldingState,\n\ttype INotebookEditor,\n} from \"../../notebookBrowser.js\";\nimport { executingStateIcon } from \"../../notebookIcons.js\";\nimport type { MarkupCellViewModel } from \"../../viewModel/markupCellViewModel.js\";\nimport { CellContentPart } from \"../cellPart.js\";\n\nexport class FoldedCellHint extends CellContentPart {\n\tprivate readonly _runButtonListener = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly _cellExecutionListener = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\tprivate readonly _container: HTMLElement,\n\t\t@INotebookExecutionStateService\n\t\tprivate readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride didRenderCell(element: MarkupCellViewModel): void {\n\t\tthis.update(element);\n\t}\n\n\tprivate update(element: MarkupCellViewModel) {\n\t\tif (!this._notebookEditor.hasModel()) {\n\t\t\tthis._cellExecutionListener.clear();\n\t\t\tthis._runButtonListener.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\telement.isInputCollapsed ||\n\t\t\telement.getEditState() === CellEditState.Editing\n\t\t) {\n\t\t\tthis._cellExecutionListener.clear();\n\t\t\tthis._runButtonListener.clear();\n\t\t\tDOM.hide(this._container);\n\t\t} else if (element.foldingState === CellFoldingState.Collapsed) {\n\t\t\tconst idx = this._notebookEditor\n\t\t\t\t.getViewModel()\n\t\t\t\t.getCellIndex(element);\n\t\t\tconst length = this._notebookEditor\n\t\t\t\t.getViewModel()\n\t\t\t\t.getFoldedLength(idx);\n\n\t\t\tconst runSectionButton = this.getRunFoldedSectionButton({\n\t\t\t\tstart: idx,\n\t\t\t\tend: idx + length + 1,\n\t\t\t});\n\t\t\tif (runSectionButton) {\n\t\t\t\tDOM.reset(\n\t\t\t\t\tthis._container,\n\t\t\t\t\trunSectionButton,\n\t\t\t\t\tthis.getHiddenCellsLabel(length),\n\t\t\t\t\tthis.getHiddenCellHintButton(element),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tDOM.reset(\n\t\t\t\t\tthis._container,\n\t\t\t\t\tthis.getHiddenCellsLabel(length),\n\t\t\t\t\tthis.getHiddenCellHintButton(element),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tDOM.show(this._container);\n\n\t\t\tconst foldHintTop = element.layoutInfo.previewHeight;\n\t\t\tthis._container.style.top = `${foldHintTop}px`;\n\t\t} else {\n\t\t\tthis._cellExecutionListener.clear();\n\t\t\tthis._runButtonListener.clear();\n\t\t\tDOM.hide(this._container);\n\t\t}\n\t}\n\n\tprivate getHiddenCellsLabel(num: number): HTMLElement {\n\t\tconst label =\n\t\t\tnum === 1\n\t\t\t\t? localize(\"hiddenCellsLabel\", \"1 cell hidden\")\n\t\t\t\t: localize(\"hiddenCellsLabelPlural\", \"{0} cells hidden\", num);\n\n\t\treturn DOM.$(\"span.notebook-folded-hint-label\", undefined, label);\n\t}\n\n\tprivate getHiddenCellHintButton(element: MarkupCellViewModel): HTMLElement {\n\t\tconst expandIcon = DOM.$(\"span.cell-expand-part-button\");\n\t\texpandIcon.classList.add(...ThemeIcon.asClassNameArray(Codicon.more));\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(expandIcon, DOM.EventType.CLICK, () => {\n\t\t\t\tconst controller =\n\t\t\t\t\tthis._notebookEditor.getContribution<FoldingController>(\n\t\t\t\t\t\tFoldingController.id,\n\t\t\t\t\t);\n\t\t\t\tconst idx = this._notebookEditor.getCellIndex(element);\n\t\t\t\tif (typeof idx === \"number\") {\n\t\t\t\t\tcontroller.setFoldingStateDown(\n\t\t\t\t\t\tidx,\n\t\t\t\t\t\tCellFoldingState.Expanded,\n\t\t\t\t\t\t1,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn expandIcon;\n\t}\n\n\tprivate getRunFoldedSectionButton(\n\t\trange: ICellRange,\n\t): HTMLElement | undefined {\n\t\tconst runAllContainer = DOM.$(\"span.folded-cell-run-section-button\");\n\t\tconst cells = this._notebookEditor.getCellsInRange(range);\n\n\t\t// Check if any cells are code cells, if not, we won't show the run button\n\t\tconst hasCodeCells = cells.some(\n\t\t\t(cell) => cell.cellKind === CellKind.Code,\n\t\t);\n\t\tif (!hasCodeCells) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst isRunning = cells.some((cell) => {\n\t\t\tconst cellExecution =\n\t\t\t\tthis._notebookExecutionStateService.getCellExecution(cell.uri);\n\t\t\treturn (\n\t\t\t\tcellExecution &&\n\t\t\t\tcellExecution.state === NotebookCellExecutionState.Executing\n\t\t\t);\n\t\t});\n\n\t\tconst runAllIcon = isRunning\n\t\t\t? ThemeIcon.modify(executingStateIcon, \"spin\")\n\t\t\t: Codicon.play;\n\t\trunAllContainer.classList.add(\n\t\t\t...ThemeIcon.asClassNameArray(runAllIcon),\n\t\t);\n\n\t\tthis._runButtonListener.value = DOM.addDisposableListener(\n\t\t\trunAllContainer,\n\t\t\tDOM.EventType.CLICK,\n\t\t\t() => {\n\t\t\t\tthis._notebookEditor.executeNotebookCells(cells);\n\t\t\t},\n\t\t);\n\n\t\tthis._cellExecutionListener.value =\n\t\t\tthis._notebookExecutionStateService.onDidChangeExecution(() => {\n\t\t\t\tconst isRunning = cells.some((cell) => {\n\t\t\t\t\tconst cellExecution =\n\t\t\t\t\t\tthis._notebookExecutionStateService.getCellExecution(\n\t\t\t\t\t\t\tcell.uri,\n\t\t\t\t\t\t);\n\t\t\t\t\treturn (\n\t\t\t\t\t\tcellExecution &&\n\t\t\t\t\t\tcellExecution.state ===\n\t\t\t\t\t\t\tNotebookCellExecutionState.Executing\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconst runAllIcon = isRunning\n\t\t\t\t\t? ThemeIcon.modify(executingStateIcon, \"spin\")\n\t\t\t\t\t: Codicon.play;\n\t\t\t\trunAllContainer.className = \"\";\n\t\t\t\trunAllContainer.classList.add(\n\t\t\t\t\t\"folded-cell-run-section-button\",\n\t\t\t\t\t...ThemeIcon.asClassNameArray(runAllIcon),\n\t\t\t\t);\n\t\t\t});\n\n\t\treturn runAllContainer;\n\t}\n\n\toverride updateInternalLayoutNow(element: MarkupCellViewModel) {\n\t\tthis.update(element);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["isRunning", "runAllIcon"]
}
