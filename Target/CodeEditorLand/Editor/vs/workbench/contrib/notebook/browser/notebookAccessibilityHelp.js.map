{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/notebookAccessibilityHelp.ts"],
  "sourcesContent": ["import type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tAccessibleContentProvider,\n\tAccessibleViewProviderId,\n\tAccessibleViewType,\n} from \"../../../../platform/accessibility/browser/accessibleView.js\";\nimport type { IAccessibleViewImplentation } from \"../../../../platform/accessibility/browser/accessibleViewRegistry.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IVisibleEditorPane } from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { AccessibilityVerbositySettingId } from \"../../accessibility/browser/accessibilityConfiguration.js\";\nimport { NOTEBOOK_EDITOR_FOCUSED } from \"../common/notebookContextKeys.js\";\n\nexport class NotebookAccessibilityHelp implements IAccessibleViewImplentation {\n\treadonly priority = 105;\n\treadonly name = \"notebook\";\n\treadonly when = NOTEBOOK_EDITOR_FOCUSED;\n\treadonly type: AccessibleViewType = AccessibleViewType.Help;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst activeEditor =\n\t\t\taccessor.get(ICodeEditorService).getActiveCodeEditor() ||\n\t\t\taccessor.get(ICodeEditorService).getFocusedCodeEditor() ||\n\t\t\taccessor.get(IEditorService).activeEditorPane;\n\n\t\tif (!activeEditor) {\n\t\t\treturn;\n\t\t}\n\t\treturn getAccessibilityHelpProvider(accessor, activeEditor);\n\t}\n}\n\nexport function getAccessibilityHelpText(): string {\n\treturn [\n\t\tlocalize(\n\t\t\t\"notebook.overview\",\n\t\t\t\"The notebook view is a collection of code and markdown cells. Code cells can be executed and will produce output directly below the cell.\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.cell.edit\",\n\t\t\t\"The Edit Cell command{0} will focus on the cell input.\",\n\t\t\t\"<keybinding:notebook.cell.edit>\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.cell.quitEdit\",\n\t\t\t\"The Quit Edit command{0} will set focus on the cell container. The default (Escape) key may need to be pressed twice first exit the virtual cursor if active.\",\n\t\t\t\"<keybinding:notebook.cell.quitEdit>\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.cell.focusInOutput\",\n\t\t\t\"The Focus Output command{0} will set focus in the cell's output.\",\n\t\t\t\"<keybinding:notebook.cell.focusInOutput>\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.focusNextEditor\",\n\t\t\t\"The Focus Next Cell Editor command{0} will set focus in the next cell's editor.\",\n\t\t\t\"<keybinding:notebook.focusNextEditor>\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.focusPreviousEditor\",\n\t\t\t\"The Focus Previous Cell Editor command{0} will set focus in the previous cell's editor.\",\n\t\t\t\"<keybinding:notebook.focusPreviousEditor>\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.cellNavigation\",\n\t\t\t\"The up and down arrows will also move focus between cells while focused on the outer cell container.\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.cell.executeAndFocusContainer\",\n\t\t\t\"The Execute Cell command{0} executes the cell that currently has focus.\",\n\t\t\t\"<keybinding:notebook.cell.executeAndFocusContainer>\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.cell.insertCodeCellBelowAndFocusContainer\",\n\t\t\t\"The Insert Cell Above{0} and Below{1} commands will create new empty code cells.\",\n\t\t\t\"<keybinding:notebook.cell.insertCodeCellAbove>\",\n\t\t\t\"<keybinding:notebook.cell.insertCodeCellBelow>\",\n\t\t),\n\t\tlocalize(\n\t\t\t\"notebook.changeCellType\",\n\t\t\t\"The Change Cell to Code/Markdown commands are used to switch between cell types.\",\n\t\t),\n\t].join(\"\\n\");\n}\n\nexport function getAccessibilityHelpProvider(\n\taccessor: ServicesAccessor,\n\teditor: ICodeEditor | IVisibleEditorPane,\n) {\n\tconst helpText = getAccessibilityHelpText();\n\treturn new AccessibleContentProvider(\n\t\tAccessibleViewProviderId.Notebook,\n\t\t{ type: AccessibleViewType.Help },\n\t\t() => helpText,\n\t\t() => editor.focus(),\n\t\tAccessibilityVerbositySettingId.Notebook,\n\t);\n}\n"],
  "mappings": ";;AACA,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAQP,SAAS,sBAAsB;AAC/B,SAAS,uCAAuC;AAChD,SAAS,+BAA+B;AAEjC,MAAM,0BAAiE;AAAA,EAnB9E,OAmB8E;AAAA;AAAA;AAAA,EACpE,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAA2B,mBAAmB;AAAA,EACvD,YAAY,UAA4B;AACvC,UAAM,eACL,SAAS,IAAI,kBAAkB,EAAE,oBAAoB,KACrD,SAAS,IAAI,kBAAkB,EAAE,qBAAqB,KACtD,SAAS,IAAI,cAAc,EAAE;AAE9B,QAAI,CAAC,cAAc;AAClB;AAAA,IACD;AACA,WAAO,6BAA6B,UAAU,YAAY;AAAA,EAC3D;AACD;AAEO,SAAS,2BAAmC;AAClnDgB;AAqDT,SAAS,6BACf,UACA,QACC;AACD,QAAM,WAAW,yBAAyB;AAC1C,SAAO,IAAI;AAAA,IACV,yBAAyB;AAAA,IACzB,EAAE,MAAM,mBAAmB,KAAK;AAAA,IAChC,MAAM;AAAA,IACN,MAAM,OAAO,MAAM;AAAA,IACnB,gCAAgC;AAAA,EACjC;AACD;AAZgB;",
  "names": []
}
