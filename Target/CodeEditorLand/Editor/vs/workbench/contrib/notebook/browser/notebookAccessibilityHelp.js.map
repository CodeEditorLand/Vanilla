{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/notebookAccessibilityHelp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IAccessibleViewImplentation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { NOTEBOOK_EDITOR_FOCUSED } from '../common/notebookContextKeys.js';\nimport { localize } from '../../../../nls.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { AccessibleViewProviderId, AccessibleViewType, AccessibleContentProvider } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IVisibleEditorPane } from '../../../common/editor.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\n\nexport class NotebookAccessibilityHelp implements IAccessibleViewImplentation {\n\treadonly priority = 105;\n\treadonly name = 'notebook';\n\treadonly when = NOTEBOOK_EDITOR_FOCUSED;\n\treadonly type: AccessibleViewType = AccessibleViewType.Help;\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor()\n\t\t\t|| accessor.get(ICodeEditorService).getFocusedCodeEditor()\n\t\t\t|| accessor.get(IEditorService).activeEditorPane;\n\n\t\tif (!activeEditor) {\n\t\t\treturn;\n\t\t}\n\t\treturn getAccessibilityHelpProvider(accessor, activeEditor);\n\t}\n}\n\nexport function getAccessibilityHelpText(): string {\n\treturn [\n\t\tlocalize('notebook.overview', 'The notebook view is a collection of code and markdown cells. Code cells can be executed and will produce output directly below the cell.'),\n\t\tlocalize('notebook.cell.edit', 'The Edit Cell command{0} will focus on the cell input.', '<keybinding:notebook.cell.edit>'),\n\t\tlocalize('notebook.cell.quitEdit', 'The Quit Edit command{0} will set focus on the cell container. The default (Escape) key may need to be pressed twice first exit the virtual cursor if active.', '<keybinding:notebook.cell.quitEdit>'),\n\t\tlocalize('notebook.cell.focusInOutput', 'The Focus Output command{0} will set focus in the cell\\'s output.', '<keybinding:notebook.cell.focusInOutput>'),\n\t\tlocalize('notebook.focusNextEditor', 'The Focus Next Cell Editor command{0} will set focus in the next cell\\'s editor.', '<keybinding:notebook.focusNextEditor>'),\n\t\tlocalize('notebook.focusPreviousEditor', 'The Focus Previous Cell Editor command{0} will set focus in the previous cell\\'s editor.', '<keybinding:notebook.focusPreviousEditor>'),\n\t\tlocalize('notebook.cellNavigation', 'The up and down arrows will also move focus between cells while focused on the outer cell container.'),\n\t\tlocalize('notebook.cell.executeAndFocusContainer', 'The Execute Cell command{0} executes the cell that currently has focus.', '<keybinding:notebook.cell.executeAndFocusContainer>'),\n\t\tlocalize('notebook.cell.insertCodeCellBelowAndFocusContainer', 'The Insert Cell Above{0} and Below{1} commands will create new empty code cells.', '<keybinding:notebook.cell.insertCodeCellAbove>', '<keybinding:notebook.cell.insertCodeCellBelow>'),\n\t\tlocalize('notebook.changeCellType', 'The Change Cell to Code/Markdown commands are used to switch between cell types.')\n\t].join('\\n');\n}\n\nexport function getAccessibilityHelpProvider(accessor: ServicesAccessor, editor: ICodeEditor | IVisibleEditorPane) {\n\tconst helpText = getAccessibilityHelpText();\n\treturn new AccessibleContentProvider(\n\t\tAccessibleViewProviderId.Notebook,\n\t\t{ type: AccessibleViewType.Help },\n\t\t() => helpText,\n\t\t() => editor.focus(),\n\t\tAccessibilityVerbositySettingId.Notebook,\n\t);\n}\n"],
  "mappings": ";;AAIA,SAAS,wBAAwB;AACjC,SAAS,mCAAmC;AAC5C,SAAS,+BAA+B;AACxC,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B,oBAAoB,iCAAiC;AACxF,SAAS,uCAAuC;AAChD,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AAE5B,MAAM,0BAAiE;AAAA,EAf9E,OAe8E;AAAA;AAAA;AAAA,EACpE,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAA2B,mBAAmB;AAAA,EACvD,YAAY,UAA4B;AACvC,UAAM,eAAe,SAAS,IAAI,kBAAkB,EAAE,oBAAoB,KACtE,SAAS,IAAI,kBAAkB,EAAE,qBAAqB,KACtD,SAAS,IAAI,cAAc,EAAE;AAEjC,QAAI,CAAC,cAAc;AAClB;AAAA,IACD;AACA,WAAO,6BAA6B,UAAU,YAAY;AAAA,EAC3D;AACD;AAEO,SAAS,2BAAmC;AAClD,SAAO;AAAA,IACN,SAAS,qBAAqB,2IAA2I;AAAA,IACzK,SAAS,sBAAsB,0DAA0D,iCAAiC;AAAA,IAC1H,SAAS,0BAA0B,iKAAiK,qCAAqC;AAAA,IACzO,SAAS,+BAA+B,oEAAqE,0CAA0C;AAAA,IACvJ,SAAS,4BAA4B,mFAAoF,uCAAuC;AAAA,IAChK,SAAS,gCAAgC,2FAA4F,2CAA2C;AAAA,IAChL,SAAS,2BAA2B,sGAAsG;AAAA,IAC1I,SAAS,0CAA0C,2EAA2E,qDAAqD;AAAA,IACnL,SAAS,sDAAsD,oFAAoF,kDAAkD,gDAAgD;AAAA,IACrP,SAAS,2BAA2B,kFAAkF;AAAA,EACvH,EAAE,KAAK,IAAI;AACZ;AAbgB;AAeT,SAAS,6BAA6B,UAA4B,QAA0C;AAClH,QAAM,WAAW,yBAAyB;AAC1C,SAAO,IAAI;AAAA,IACV,yBAAyB;AAAA,IACzB,EAAE,MAAM,mBAAmB,KAAK;AAAA,IAChC,MAAM;AAAA,IACN,MAAM,OAAO,MAAM;AAAA,IACnB,gCAAgC;AAAA,EACjC;AACD;AATgB;",
  "names": []
}
