import{AccessibleContentProvider as h,AccessibleViewProviderId as x,AccessibleViewType as a}from"../../../../../vs/platform/accessibility/browser/accessibleView.js";import"../../../../../vs/platform/accessibility/browser/accessibleViewRegistry.js";import{ContextKeyExpr as f}from"../../../../../vs/platform/contextkey/common/contextkey.js";import"../../../../../vs/platform/instantiation/common/instantiation.js";import{AccessibilityVerbositySettingId as A}from"../../../../../vs/workbench/contrib/accessibility/browser/accessibilityConfiguration.js";import{getNotebookEditorFromEditorPane as M}from"../../../../../vs/workbench/contrib/notebook/browser/notebookBrowser.js";import{NOTEBOOK_OUTPUT_FOCUSED as k}from"../../../../../vs/workbench/contrib/notebook/common/notebookContextKeys.js";import{IEditorService as E}from"../../../../../vs/workbench/services/editor/common/editorService.js";class U{priority=100;name="notebook";type=a.View;when=f.and(k,f.equals("resourceExtname",".ipynb"));getProvider(n){const e=n.get(E);return T(e)}}function T(u){const n=u.activeEditorPane,e=M(n),d=e?.getViewModel(),m=d?.getSelections(),b=d?.notebookDocument;if(!m||!b||!e?.textModel)return;const o=d.viewCells[m[0].start];let s="";const w=new TextDecoder;for(let i=0;i<o.outputsViewModels.length;i++){const y=o.outputsViewModels[i],p=o.model.outputs[i],[V,g]=y.resolveMimeTypes(e.textModel,void 0),c=V[g].mimeType;let r=p.outputs.find(l=>l.mime===c);(!r||c.startsWith("image"))&&(r=p.outputs.find(l=>!l.mime.startsWith("image")));let t=`${c}`;r&&(t=w.decode(r.data.slice(0,1e5).buffer),r.data.byteLength>1e5&&(t=t+"...(truncated)"),c.endsWith("error")&&(t=t.replace(/\\u001b\[[0-9;]*m/gi,"").replaceAll("\\n",`
`)));const v=o.outputsViewModels.length>1?`Cell output ${i+1} of ${o.outputsViewModels.length}
`:"";s=s.concat(`${v}${t}
`)}if(s)return new h(x.Notebook,{type:a.View},()=>s,()=>{e?.setFocus(m[0]),n?.focus()},A.Notebook)}export{U as NotebookAccessibleView,T as getAccessibleOutputProvider};
