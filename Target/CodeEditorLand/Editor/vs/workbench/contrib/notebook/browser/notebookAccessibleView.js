import{AccessibleContentProvider as h,AccessibleViewProviderId as x,AccessibleViewType as a}from"../../../../platform/accessibility/browser/accessibleView.js";import{ContextKeyExpr as f}from"../../../../platform/contextkey/common/contextkey.js";import{IEditorService as A}from"../../../services/editor/common/editorService.js";import{AccessibilityVerbositySettingId as M}from"../../accessibility/browser/accessibilityConfiguration.js";import{NOTEBOOK_OUTPUT_FOCUSED as k}from"../common/notebookContextKeys.js";import{getNotebookEditorFromEditorPane as E}from"./notebookBrowser.js";class ${priority=100;name="notebook";type=a.View;when=f.and(k,f.equals("resourceExtname",".ipynb"));getProvider(s){const e=s.get(A);return T(e)}}function T(p){const s=p.activeEditorPane,e=E(s),m=e?.getViewModel(),d=m?.getSelections(),b=m?.notebookDocument;if(!d||!b||!e?.textModel)return;const o=m.viewCells[d[0].start];let n="";const w=new TextDecoder;for(let i=0;i<o.outputsViewModels.length;i++){const y=o.outputsViewModels[i],u=o.model.outputs[i],[V,g]=y.resolveMimeTypes(e.textModel,void 0),c=V[g].mimeType;let r=u.outputs.find(l=>l.mime===c);(!r||c.startsWith("image"))&&(r=u.outputs.find(l=>!l.mime.startsWith("image")));let t=`${c}`;r&&(t=w.decode(r.data.slice(0,1e5).buffer),r.data.byteLength>1e5&&(t=t+"...(truncated)"),c.endsWith("error")&&(t=t.replace(/\\u001b\[[0-9;]*m/gi,"").replaceAll("\\n",`
`)));const v=o.outputsViewModels.length>1?`Cell output ${i+1} of ${o.outputsViewModels.length}
`:"";n=n.concat(`${v}${t}
`)}if(n)return new h(x.Notebook,{type:a.View},()=>n,()=>{e?.setFocus(d[0]),s?.focus()},M.Notebook)}export{$ as NotebookAccessibleView,T as getAccessibleOutputProvider};
