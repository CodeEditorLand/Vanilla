{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/cellExecution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from '../../../../../../base/browser/dom.js';\nimport { disposableTimeout } from '../../../../../../base/common/async.js';\nimport { DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { clamp } from '../../../../../../base/common/numbers.js';\nimport { ICellViewModel, INotebookEditorDelegate } from '../../notebookBrowser.js';\nimport { CellViewModelStateChangeEvent } from '../../notebookViewEvents.js';\nimport { CellContentPart } from '../cellPart.js';\nimport { CodeCellViewModel } from '../../viewModel/codeCellViewModel.js';\nimport { NotebookCellInternalMetadata } from '../../../common/notebookCommon.js';\nimport { INotebookExecutionStateService } from '../../../common/notebookExecutionStateService.js';\n\nconst UPDATE_EXECUTION_ORDER_GRACE_PERIOD = 200;\n\nexport class CellExecutionPart extends CellContentPart {\n\tprivate readonly kernelDisposables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditorDelegate,\n\t\tprivate readonly _executionOrderLabel: HTMLElement,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._notebookEditor.onDidChangeActiveKernel(() => {\n\t\t\tif (this.currentCell) {\n\t\t\t\tthis.kernelDisposables.clear();\n\n\t\t\t\tif (this._notebookEditor.activeKernel) {\n\t\t\t\t\tthis.kernelDisposables.add(this._notebookEditor.activeKernel.onDidChange(() => {\n\t\t\t\t\t\tif (this.currentCell) {\n\t\t\t\t\t\t\tthis.updateExecutionOrder(this.currentCell.internalMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\tthis.updateExecutionOrder(this.currentCell.internalMetadata);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._notebookEditor.onDidScroll(() => {\n\t\t\tthis._updatePosition();\n\t\t}));\n\t}\n\n\toverride didRenderCell(element: ICellViewModel): void {\n\t\tthis.updateExecutionOrder(element.internalMetadata, true);\n\t}\n\n\tprivate updateExecutionOrder(internalMetadata: NotebookCellInternalMetadata, forceClear = false): void {\n\t\tif (this._notebookEditor.activeKernel?.implementsExecutionOrder || (!this._notebookEditor.activeKernel && typeof internalMetadata.executionOrder === 'number')) {\n\t\t\t// If the executionOrder was just cleared, and the cell is executing, wait just a bit before clearing the view to avoid flashing\n\t\t\tif (typeof internalMetadata.executionOrder !== 'number' && !forceClear && !!this._notebookExecutionStateService.getCellExecution(this.currentCell!.uri)) {\n\t\t\t\tconst renderingCell = this.currentCell;\n\t\t\t\tdisposableTimeout(() => {\n\t\t\t\t\tif (this.currentCell === renderingCell) {\n\t\t\t\t\t\tthis.updateExecutionOrder(this.currentCell!.internalMetadata, true);\n\t\t\t\t\t}\n\t\t\t\t}, UPDATE_EXECUTION_ORDER_GRACE_PERIOD, this.cellDisposables);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst executionOrderLabel = typeof internalMetadata.executionOrder === 'number' ?\n\t\t\t\t`[${internalMetadata.executionOrder}]` :\n\t\t\t\t'[ ]';\n\t\t\tthis._executionOrderLabel.innerText = executionOrderLabel;\n\t\t} else {\n\t\t\tthis._executionOrderLabel.innerText = '';\n\t\t}\n\t}\n\n\toverride updateState(element: ICellViewModel, e: CellViewModelStateChangeEvent): void {\n\t\tif (e.internalMetadataChanged) {\n\t\t\tthis.updateExecutionOrder(element.internalMetadata);\n\t\t}\n\t}\n\n\toverride updateInternalLayoutNow(element: ICellViewModel): void {\n\t\tthis._updatePosition();\n\t}\n\n\tprivate _updatePosition() {\n\t\tif (this.currentCell) {\n\t\t\tif (this.currentCell.isInputCollapsed) {\n\t\t\t\tDOM.hide(this._executionOrderLabel);\n\t\t\t} else {\n\t\t\t\tDOM.show(this._executionOrderLabel);\n\t\t\t\tlet top = this.currentCell.layoutInfo.editorHeight - 22 + this.currentCell.layoutInfo.statusBarHeight;\n\n\t\t\t\tif (this.currentCell instanceof CodeCellViewModel) {\n\t\t\t\t\tconst elementTop = this._notebookEditor.getAbsoluteTopOfElement(this.currentCell);\n\t\t\t\t\tconst editorBottom = elementTop + this.currentCell.layoutInfo.outputContainerOffset;\n\t\t\t\t\t// another approach to avoid the flicker caused by sticky scroll is manually calculate the scrollBottom:\n\t\t\t\t\t// const scrollBottom = this._notebookEditor.scrollTop + this._notebookEditor.getLayoutInfo().height - 26 - this._notebookEditor.getLayoutInfo().stickyHeight;\n\t\t\t\t\tconst scrollBottom = this._notebookEditor.scrollBottom;\n\n\t\t\t\t\tconst lineHeight = 22;\n\t\t\t\t\tif (scrollBottom <= editorBottom) {\n\t\t\t\t\t\tconst offset = editorBottom - scrollBottom;\n\t\t\t\t\t\ttop -= offset;\n\t\t\t\t\t\ttop = clamp(\n\t\t\t\t\t\t\ttop,\n\t\t\t\t\t\t\tlineHeight + 12, // line height + padding for single line\n\t\t\t\t\t\t\tthis.currentCell.layoutInfo.editorHeight - lineHeight + this.currentCell.layoutInfo.statusBarHeight\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._executionOrderLabel.style.top = `${top}px`;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
