{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/cellOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype IBulkEditService,\n\ttype ResourceEdit,\n\tResourceTextEdit,\n} from \"../../../../../editor/browser/services/bulkEditService.js\";\nimport {\n\ttype IPosition,\n\tPosition,\n} from \"../../../../../editor/common/core/position.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type { ILanguageService } from \"../../../../../editor/common/languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../../../editor/common/languages/modesRegistry.js\";\nimport {\n\tEndOfLinePreference,\n\ttype IReadonlyTextBuffer,\n} from \"../../../../../editor/common/model.js\";\nimport { localize } from \"../../../../../nls.js\";\nimport type { INotificationService } from \"../../../../../platform/notification/common/notification.js\";\nimport { ResourceNotebookCellEdit } from \"../../../bulkEdit/browser/bulkCellEdits.js\";\nimport { cloneNotebookCellTextModel } from \"../../common/model/notebookCellTextModel.js\";\nimport {\n\tCellEditType,\n\tCellKind,\n\ttype ICellEditOperation,\n\ttype ICellReplaceEdit,\n\ttype IOutputDto,\n\ttype ISelectionState,\n\ttype NotebookCellMetadata,\n\tSelectionStateType,\n} from \"../../common/notebookCommon.js\";\nimport {\n\ttype ICellRange,\n\tcellRangeContains,\n\tcellRangesToIndexes,\n} from \"../../common/notebookRange.js\";\nimport {\n\tCellEditState,\n\tCellFocusMode,\n\ttype IActiveNotebookEditor,\n\ttype ICellViewModel,\n\texpandCellRangesWithHiddenCells,\n} from \"../notebookBrowser.js\";\nimport type {\n\tCellViewModel,\n\tNotebookViewModel,\n} from \"../viewModel/notebookViewModelImpl.js\";\nimport type {\n\tINotebookActionContext,\n\tINotebookCellActionContext,\n} from \"./coreActions.js\";\n\nexport async function changeCellToKind(\n\tkind: CellKind,\n\tcontext: INotebookActionContext,\n\tlanguage?: string,\n\tmime?: string,\n): Promise<void> {\n\tconst { notebookEditor } = context;\n\tif (!notebookEditor.hasModel()) {\n\t\treturn;\n\t}\n\n\tif (notebookEditor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tif (context.ui && context.cell) {\n\t\t// action from UI\n\t\tconst { cell } = context;\n\n\t\tif (cell.cellKind === kind) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst text = cell.getText();\n\t\tconst idx = notebookEditor.getCellIndex(cell);\n\n\t\tif (language === undefined) {\n\t\t\tconst availableLanguages =\n\t\t\t\tnotebookEditor.activeKernel?.supportedLanguages ?? [];\n\t\t\tlanguage = availableLanguages[0] ?? PLAINTEXT_LANGUAGE_ID;\n\t\t}\n\n\t\tnotebookEditor.textModel.applyEdits(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\tindex: idx,\n\t\t\t\t\tcount: 1,\n\t\t\t\t\tcells: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcellKind: kind,\n\t\t\t\t\t\t\tsource: text,\n\t\t\t\t\t\t\tlanguage: language,\n\t\t\t\t\t\t\tmime: mime ?? cell.mime,\n\t\t\t\t\t\t\toutputs: cell.model.outputs,\n\t\t\t\t\t\t\tmetadata: cell.metadata,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\t\tselections: notebookEditor.getSelections(),\n\t\t\t},\n\t\t\t() => {\n\t\t\t\treturn {\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\t\t\tselections: notebookEditor.getSelections(),\n\t\t\t\t};\n\t\t\t},\n\t\t\tundefined,\n\t\t\ttrue,\n\t\t);\n\t\tconst newCell = notebookEditor.cellAt(idx);\n\t\tawait notebookEditor.focusNotebookCell(\n\t\t\tnewCell,\n\t\t\tcell.getEditState() === CellEditState.Editing\n\t\t\t\t? \"editor\"\n\t\t\t\t: \"container\",\n\t\t);\n\t} else if (context.selectedCells) {\n\t\tconst selectedCells = context.selectedCells;\n\t\tconst rawEdits: ICellEditOperation[] = [];\n\n\t\tselectedCells.forEach((cell) => {\n\t\t\tif (cell.cellKind === kind) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst text = cell.getText();\n\t\t\tconst idx = notebookEditor.getCellIndex(cell);\n\n\t\t\tif (language === undefined) {\n\t\t\t\tconst availableLanguages =\n\t\t\t\t\tnotebookEditor.activeKernel?.supportedLanguages ?? [];\n\t\t\t\tlanguage = availableLanguages[0] ?? PLAINTEXT_LANGUAGE_ID;\n\t\t\t}\n\n\t\t\trawEdits.push({\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: idx,\n\t\t\t\tcount: 1,\n\t\t\t\tcells: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcellKind: kind,\n\t\t\t\t\t\tsource: text,\n\t\t\t\t\t\tlanguage: language,\n\t\t\t\t\t\tmime: mime ?? cell.mime,\n\t\t\t\t\t\toutputs: cell.model.outputs,\n\t\t\t\t\t\tmetadata: cell.metadata,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t});\n\n\t\tnotebookEditor.textModel.applyEdits(\n\t\t\trawEdits,\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\t\tselections: notebookEditor.getSelections(),\n\t\t\t},\n\t\t\t() => {\n\t\t\t\treturn {\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\t\t\tselections: notebookEditor.getSelections(),\n\t\t\t\t};\n\t\t\t},\n\t\t\tundefined,\n\t\t\ttrue,\n\t\t);\n\t}\n}\n\nexport function runDeleteAction(\n\teditor: IActiveNotebookEditor,\n\tcell: ICellViewModel,\n) {\n\tconst textModel = editor.textModel;\n\tconst selections = editor.getSelections();\n\tconst targetCellIndex = editor.getCellIndex(cell);\n\tconst containingSelection = selections.find(\n\t\t(selection) =>\n\t\t\tselection.start <= targetCellIndex &&\n\t\t\ttargetCellIndex < selection.end,\n\t);\n\n\tconst computeUndoRedo =\n\t\t!editor.isReadOnly || textModel.viewType === \"interactive\";\n\tif (containingSelection) {\n\t\tconst edits: ICellReplaceEdit[] = selections\n\t\t\t.reverse()\n\t\t\t.map((selection) => ({\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: selection.start,\n\t\t\t\tcount: selection.end - selection.start,\n\t\t\t\tcells: [],\n\t\t\t}));\n\n\t\tconst nextCellAfterContainingSelection =\n\t\t\tcontainingSelection.end >= editor.getLength()\n\t\t\t\t? undefined\n\t\t\t\t: editor.cellAt(containingSelection.end);\n\n\t\ttextModel.applyEdits(\n\t\t\tedits,\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: editor.getFocus(),\n\t\t\t\tselections: editor.getSelections(),\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tif (nextCellAfterContainingSelection) {\n\t\t\t\t\tconst cellIndex = textModel.cells.findIndex(\n\t\t\t\t\t\t(cell) =>\n\t\t\t\t\t\t\tcell.handle ===\n\t\t\t\t\t\t\tnextCellAfterContainingSelection.handle,\n\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\t\tfocus: { start: cellIndex, end: cellIndex + 1 },\n\t\t\t\t\t\tselections: [{ start: cellIndex, end: cellIndex + 1 }],\n\t\t\t\t\t};\n\t\t\t\t} else if (textModel.length) {\n\t\t\t\t\tconst lastCellIndex = textModel.length - 1;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\t\tfocus: { start: lastCellIndex, end: lastCellIndex + 1 },\n\t\t\t\t\t\tselections: [\n\t\t\t\t\t\t\t{ start: lastCellIndex, end: lastCellIndex + 1 },\n\t\t\t\t\t\t],\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\t\tfocus: { start: 0, end: 0 },\n\t\t\t\t\t\tselections: [{ start: 0, end: 0 }],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tundefined,\n\t\t\tcomputeUndoRedo,\n\t\t);\n\t} else {\n\t\tconst focus = editor.getFocus();\n\t\tconst edits: ICellReplaceEdit[] = [\n\t\t\t{\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: targetCellIndex,\n\t\t\t\tcount: 1,\n\t\t\t\tcells: [],\n\t\t\t},\n\t\t];\n\n\t\tconst finalSelections: ICellRange[] = [];\n\t\tfor (let i = 0; i < selections.length; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tif (selection.end <= targetCellIndex) {\n\t\t\t\tfinalSelections.push(selection);\n\t\t\t} else if (selection.start > targetCellIndex) {\n\t\t\t\tfinalSelections.push({\n\t\t\t\t\tstart: selection.start - 1,\n\t\t\t\t\tend: selection.end - 1,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfinalSelections.push({\n\t\t\t\t\tstart: targetCellIndex,\n\t\t\t\t\tend: targetCellIndex + 1,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (editor.cellAt(focus.start) === cell) {\n\t\t\t// focus is the target, focus is also not part of any selection\n\t\t\tconst newFocus =\n\t\t\t\tfocus.end === textModel.length\n\t\t\t\t\t? { start: focus.start - 1, end: focus.end - 1 }\n\t\t\t\t\t: focus;\n\n\t\t\ttextModel.applyEdits(\n\t\t\t\tedits,\n\t\t\t\ttrue,\n\t\t\t\t{\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: editor.getFocus(),\n\t\t\t\t\tselections: editor.getSelections(),\n\t\t\t\t},\n\t\t\t\t() => ({\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: newFocus,\n\t\t\t\t\tselections: finalSelections,\n\t\t\t\t}),\n\t\t\t\tundefined,\n\t\t\t\tcomputeUndoRedo,\n\t\t\t);\n\t\t} else {\n\t\t\t// users decide to delete a cell out of current focus/selection\n\t\t\tconst newFocus =\n\t\t\t\tfocus.start > targetCellIndex\n\t\t\t\t\t? { start: focus.start - 1, end: focus.end - 1 }\n\t\t\t\t\t: focus;\n\n\t\t\ttextModel.applyEdits(\n\t\t\t\tedits,\n\t\t\t\ttrue,\n\t\t\t\t{\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: editor.getFocus(),\n\t\t\t\t\tselections: editor.getSelections(),\n\t\t\t\t},\n\t\t\t\t() => ({\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: newFocus,\n\t\t\t\t\tselections: finalSelections,\n\t\t\t\t}),\n\t\t\t\tundefined,\n\t\t\t\tcomputeUndoRedo,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport async function moveCellRange(\n\tcontext: INotebookActionContext,\n\tdirection: \"up\" | \"down\",\n): Promise<void> {\n\tif (!context.notebookEditor.hasModel()) {\n\t\treturn;\n\t}\n\tconst editor = context.notebookEditor;\n\tconst textModel = editor.textModel;\n\n\tif (editor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tlet range: ICellRange | undefined;\n\n\tif (context.cell) {\n\t\tconst idx = editor.getCellIndex(context.cell);\n\t\trange = { start: idx, end: idx + 1 };\n\t} else {\n\t\tconst selections = editor.getSelections();\n\t\tconst modelRanges = expandCellRangesWithHiddenCells(editor, selections);\n\t\trange = modelRanges[0];\n\t}\n\n\tif (!range || range.start === range.end) {\n\t\treturn;\n\t}\n\n\tif (direction === \"up\") {\n\t\tif (range.start === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst indexAbove = range.start - 1;\n\t\tconst finalSelection = { start: range.start - 1, end: range.end - 1 };\n\t\tconst focus = context.notebookEditor.getFocus();\n\t\tconst newFocus = cellRangeContains(range, focus)\n\t\t\t? { start: focus.start - 1, end: focus.end - 1 }\n\t\t\t: { start: range.start - 1, end: range.start };\n\t\ttextModel.applyEdits(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\teditType: CellEditType.Move,\n\t\t\t\t\tindex: indexAbove,\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tnewIdx: range.end - 1,\n\t\t\t\t},\n\t\t\t],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: editor.getFocus(),\n\t\t\t\tselections: editor.getSelections(),\n\t\t\t},\n\t\t\t() => ({\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: newFocus,\n\t\t\t\tselections: [finalSelection],\n\t\t\t}),\n\t\t\tundefined,\n\t\t\ttrue,\n\t\t);\n\t\tconst focusRange = editor.getSelections()[0] ?? editor.getFocus();\n\t\teditor.revealCellRangeInView(focusRange);\n\t} else {\n\t\tif (range.end >= textModel.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst indexBelow = range.end;\n\t\tconst finalSelection = { start: range.start + 1, end: range.end + 1 };\n\t\tconst focus = editor.getFocus();\n\t\tconst newFocus = cellRangeContains(range, focus)\n\t\t\t? { start: focus.start + 1, end: focus.end + 1 }\n\t\t\t: { start: range.start + 1, end: range.start + 2 };\n\n\t\ttextModel.applyEdits(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\teditType: CellEditType.Move,\n\t\t\t\t\tindex: indexBelow,\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tnewIdx: range.start,\n\t\t\t\t},\n\t\t\t],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: editor.getFocus(),\n\t\t\t\tselections: editor.getSelections(),\n\t\t\t},\n\t\t\t() => ({\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: newFocus,\n\t\t\t\tselections: [finalSelection],\n\t\t\t}),\n\t\t\tundefined,\n\t\t\ttrue,\n\t\t);\n\n\t\tconst focusRange = editor.getSelections()[0] ?? editor.getFocus();\n\t\teditor.revealCellRangeInView(focusRange);\n\t}\n}\n\nexport async function copyCellRange(\n\tcontext: INotebookCellActionContext,\n\tdirection: \"up\" | \"down\",\n): Promise<void> {\n\tconst editor = context.notebookEditor;\n\tif (!editor.hasModel()) {\n\t\treturn;\n\t}\n\n\tconst textModel = editor.textModel;\n\n\tif (editor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tlet range: ICellRange | undefined;\n\n\tif (context.ui) {\n\t\tconst targetCell = context.cell;\n\t\tconst targetCellIndex = editor.getCellIndex(targetCell);\n\t\trange = { start: targetCellIndex, end: targetCellIndex + 1 };\n\t} else {\n\t\tconst selections = editor.getSelections();\n\t\tconst modelRanges = expandCellRangesWithHiddenCells(editor, selections);\n\t\trange = modelRanges[0];\n\t}\n\n\tif (!range || range.start === range.end) {\n\t\treturn;\n\t}\n\n\tif (direction === \"up\") {\n\t\t// insert up, without changing focus and selections\n\t\tconst focus = editor.getFocus();\n\t\tconst selections = editor.getSelections();\n\t\ttextModel.applyEdits(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\tindex: range.end,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\tcells: cellRangesToIndexes([range]).map((index) =>\n\t\t\t\t\t\tcloneNotebookCellTextModel(editor.cellAt(index)!.model),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: focus,\n\t\t\t\tselections: selections,\n\t\t\t},\n\t\t\t() => ({\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: focus,\n\t\t\t\tselections: selections,\n\t\t\t}),\n\t\t\tundefined,\n\t\t\ttrue,\n\t\t);\n\t} else {\n\t\t// insert down, move selections\n\t\tconst focus = editor.getFocus();\n\t\tconst selections = editor.getSelections();\n\t\tconst newCells = cellRangesToIndexes([range]).map((index) =>\n\t\t\tcloneNotebookCellTextModel(editor.cellAt(index)!.model),\n\t\t);\n\t\tconst countDelta = newCells.length;\n\t\tconst newFocus = context.ui\n\t\t\t? focus\n\t\t\t: { start: focus.start + countDelta, end: focus.end + countDelta };\n\t\tconst newSelections = context.ui\n\t\t\t? selections\n\t\t\t: [\n\t\t\t\t\t{\n\t\t\t\t\t\tstart: range.start + countDelta,\n\t\t\t\t\t\tend: range.end + countDelta,\n\t\t\t\t\t},\n\t\t\t\t];\n\t\ttextModel.applyEdits(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\tindex: range.end,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\tcells: cellRangesToIndexes([range]).map((index) =>\n\t\t\t\t\t\tcloneNotebookCellTextModel(editor.cellAt(index)!.model),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: focus,\n\t\t\t\tselections: selections,\n\t\t\t},\n\t\t\t() => ({\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: newFocus,\n\t\t\t\tselections: newSelections,\n\t\t\t}),\n\t\t\tundefined,\n\t\t\ttrue,\n\t\t);\n\n\t\tconst focusRange = editor.getSelections()[0] ?? editor.getFocus();\n\t\teditor.revealCellRangeInView(focusRange);\n\t}\n}\n\nexport async function joinSelectedCells(\n\tbulkEditService: IBulkEditService,\n\tnotificationService: INotificationService,\n\tcontext: INotebookCellActionContext,\n): Promise<void> {\n\tconst editor = context.notebookEditor;\n\tif (editor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tconst edits: ResourceEdit[] = [];\n\tconst cells: ICellViewModel[] = [];\n\tfor (const selection of editor.getSelections()) {\n\t\tcells.push(...editor.getCellsInRange(selection));\n\t}\n\n\tif (cells.length <= 1) {\n\t\treturn;\n\t}\n\n\t// check if all cells are of the same kind\n\tconst cellKind = cells[0].cellKind;\n\tconst isSameKind = cells.every((cell) => cell.cellKind === cellKind);\n\tif (!isSameKind) {\n\t\t// cannot join cells of different kinds\n\t\t// show warning and quit\n\t\tconst message = localize(\n\t\t\t\"notebookActions.joinSelectedCells\",\n\t\t\t\"Cannot join cells of different kinds\",\n\t\t);\n\t\treturn notificationService.warn(message);\n\t}\n\n\t// merge all cells content into first cell\n\tconst firstCell = cells[0];\n\tconst insertContent = cells\n\t\t.map((cell) => cell.getText())\n\t\t.join(firstCell.textBuffer.getEOL());\n\tconst firstSelection = editor.getSelections()[0];\n\tedits.push(\n\t\tnew ResourceNotebookCellEdit(editor.textModel.uri, {\n\t\t\teditType: CellEditType.Replace,\n\t\t\tindex: firstSelection.start,\n\t\t\tcount: firstSelection.end - firstSelection.start,\n\t\t\tcells: [\n\t\t\t\t{\n\t\t\t\t\tcellKind: firstCell.cellKind,\n\t\t\t\t\tsource: insertContent,\n\t\t\t\t\tlanguage: firstCell.language,\n\t\t\t\t\tmime: firstCell.mime,\n\t\t\t\t\toutputs: firstCell.model.outputs,\n\t\t\t\t\tmetadata: firstCell.metadata,\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t);\n\n\tfor (const selection of editor.getSelections().slice(1)) {\n\t\tedits.push(\n\t\t\tnew ResourceNotebookCellEdit(editor.textModel.uri, {\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: selection.start,\n\t\t\t\tcount: selection.end - selection.start,\n\t\t\t\tcells: [],\n\t\t\t}),\n\t\t);\n\t}\n\n\tif (edits.length) {\n\t\tawait bulkEditService.apply(edits, {\n\t\t\tquotableLabel: localize(\n\t\t\t\t\"notebookActions.joinSelectedCells.label\",\n\t\t\t\t\"Join Notebook Cells\",\n\t\t\t),\n\t\t});\n\t}\n}\n\nexport async function joinNotebookCells(\n\teditor: IActiveNotebookEditor,\n\trange: ICellRange,\n\tdirection: \"above\" | \"below\",\n\tconstraint?: CellKind,\n): Promise<{\n\tedits: ResourceEdit[];\n\tcell: ICellViewModel;\n\tendFocus: ICellRange;\n\tendSelections: ICellRange[];\n} | null> {\n\tif (editor.isReadOnly) {\n\t\treturn null;\n\t}\n\n\tconst textModel = editor.textModel;\n\tconst cells = editor.getCellsInRange(range);\n\n\tif (!cells.length) {\n\t\treturn null;\n\t}\n\n\tif (range.start === 0 && direction === \"above\") {\n\t\treturn null;\n\t}\n\n\tif (range.end === textModel.length && direction === \"below\") {\n\t\treturn null;\n\t}\n\n\tfor (let i = 0; i < cells.length; i++) {\n\t\tconst cell = cells[i];\n\n\t\tif (constraint && cell.cellKind !== constraint) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tif (direction === \"above\") {\n\t\tconst above = editor.cellAt(range.start - 1) as CellViewModel;\n\t\tif (constraint && above.cellKind !== constraint) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst insertContent = cells\n\t\t\t.map((cell) => (cell.textBuffer.getEOL() ?? \"\") + cell.getText())\n\t\t\t.join(\"\");\n\t\tconst aboveCellLineCount = above.textBuffer.getLineCount();\n\t\tconst aboveCellLastLineEndColumn =\n\t\t\tabove.textBuffer.getLineLength(aboveCellLineCount);\n\n\t\treturn {\n\t\t\tedits: [\n\t\t\t\tnew ResourceTextEdit(above.uri, {\n\t\t\t\t\trange: new Range(\n\t\t\t\t\t\taboveCellLineCount,\n\t\t\t\t\t\taboveCellLastLineEndColumn + 1,\n\t\t\t\t\t\taboveCellLineCount,\n\t\t\t\t\t\taboveCellLastLineEndColumn + 1,\n\t\t\t\t\t),\n\t\t\t\t\ttext: insertContent,\n\t\t\t\t}),\n\t\t\t\tnew ResourceNotebookCellEdit(textModel.uri, {\n\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\tindex: range.start,\n\t\t\t\t\tcount: range.end - range.start,\n\t\t\t\t\tcells: [],\n\t\t\t\t}),\n\t\t\t],\n\t\t\tcell: above,\n\t\t\tendFocus: { start: range.start - 1, end: range.start },\n\t\t\tendSelections: [{ start: range.start - 1, end: range.start }],\n\t\t};\n\t} else {\n\t\tconst below = editor.cellAt(range.end) as CellViewModel;\n\t\tif (constraint && below.cellKind !== constraint) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst cell = cells[0];\n\t\tconst restCells = [...cells.slice(1), below];\n\t\tconst insertContent = restCells\n\t\t\t.map((cl) => (cl.textBuffer.getEOL() ?? \"\") + cl.getText())\n\t\t\t.join(\"\");\n\n\t\tconst cellLineCount = cell.textBuffer.getLineCount();\n\t\tconst cellLastLineEndColumn =\n\t\t\tcell.textBuffer.getLineLength(cellLineCount);\n\n\t\treturn {\n\t\t\tedits: [\n\t\t\t\tnew ResourceTextEdit(cell.uri, {\n\t\t\t\t\trange: new Range(\n\t\t\t\t\t\tcellLineCount,\n\t\t\t\t\t\tcellLastLineEndColumn + 1,\n\t\t\t\t\t\tcellLineCount,\n\t\t\t\t\t\tcellLastLineEndColumn + 1,\n\t\t\t\t\t),\n\t\t\t\t\ttext: insertContent,\n\t\t\t\t}),\n\t\t\t\tnew ResourceNotebookCellEdit(textModel.uri, {\n\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\tindex: range.start + 1,\n\t\t\t\t\tcount: range.end - range.start,\n\t\t\t\t\tcells: [],\n\t\t\t\t}),\n\t\t\t],\n\t\t\tcell,\n\t\t\tendFocus: { start: range.start, end: range.start + 1 },\n\t\t\tendSelections: [{ start: range.start, end: range.start + 1 }],\n\t\t};\n\t}\n}\n\nexport async function joinCellsWithSurrounds(\n\tbulkEditService: IBulkEditService,\n\tcontext: INotebookCellActionContext,\n\tdirection: \"above\" | \"below\",\n): Promise<void> {\n\tconst editor = context.notebookEditor;\n\tconst textModel = editor.textModel;\n\tconst viewModel = editor.getViewModel() as NotebookViewModel;\n\tlet ret: {\n\t\tedits: ResourceEdit[];\n\t\tcell: ICellViewModel;\n\t\tendFocus: ICellRange;\n\t\tendSelections: ICellRange[];\n\t} | null = null;\n\n\tif (context.ui) {\n\t\tconst focusMode = context.cell.focusMode;\n\t\tconst cellIndex = editor.getCellIndex(context.cell);\n\t\tret = await joinNotebookCells(\n\t\t\teditor,\n\t\t\t{ start: cellIndex, end: cellIndex + 1 },\n\t\t\tdirection,\n\t\t);\n\t\tif (!ret) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait bulkEditService.apply(ret?.edits, {\n\t\t\tquotableLabel: \"Join Notebook Cells\",\n\t\t});\n\t\tviewModel.updateSelectionsState({\n\t\t\tkind: SelectionStateType.Index,\n\t\t\tfocus: ret.endFocus,\n\t\t\tselections: ret.endSelections,\n\t\t});\n\t\tret.cell.updateEditState(\n\t\t\tCellEditState.Editing,\n\t\t\t\"joinCellsWithSurrounds\",\n\t\t);\n\t\teditor.revealCellRangeInView(editor.getFocus());\n\t\tif (focusMode === CellFocusMode.Editor) {\n\t\t\tret.cell.focusMode = CellFocusMode.Editor;\n\t\t}\n\t} else {\n\t\tconst selections = editor.getSelections();\n\t\tif (!selections.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus = editor.getFocus();\n\t\tconst focusMode = editor.cellAt(focus.start)?.focusMode;\n\n\t\tconst edits: ResourceEdit[] = [];\n\t\tlet cell: ICellViewModel | null = null;\n\t\tconst cells: ICellViewModel[] = [];\n\n\t\tfor (let i = selections.length - 1; i >= 0; i--) {\n\t\t\tconst selection = selections[i];\n\t\t\tconst containFocus = cellRangeContains(selection, focus);\n\n\t\t\tif (\n\t\t\t\t(selection.end >= textModel.length && direction === \"below\") ||\n\t\t\t\t(selection.start === 0 && direction === \"above\")\n\t\t\t) {\n\t\t\t\tif (containFocus) {\n\t\t\t\t\tcell = editor.cellAt(focus.start)!;\n\t\t\t\t}\n\n\t\t\t\tcells.push(...editor.getCellsInRange(selection));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst singleRet = await joinNotebookCells(\n\t\t\t\teditor,\n\t\t\t\tselection,\n\t\t\t\tdirection,\n\t\t\t);\n\n\t\t\tif (!singleRet) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tedits.push(...singleRet.edits);\n\t\t\tcells.push(singleRet.cell);\n\n\t\t\tif (containFocus) {\n\t\t\t\tcell = singleRet.cell;\n\t\t\t}\n\t\t}\n\n\t\tif (!edits.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!cell || !cells.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait bulkEditService.apply(edits, {\n\t\t\tquotableLabel: \"Join Notebook Cells\",\n\t\t});\n\n\t\tcells.forEach((cell) => {\n\t\t\tcell.updateEditState(\n\t\t\t\tCellEditState.Editing,\n\t\t\t\t\"joinCellsWithSurrounds\",\n\t\t\t);\n\t\t});\n\n\t\tviewModel.updateSelectionsState({\n\t\t\tkind: SelectionStateType.Handle,\n\t\t\tprimary: cell.handle,\n\t\t\tselections: cells.map((cell) => cell.handle),\n\t\t});\n\t\teditor.revealCellRangeInView(editor.getFocus());\n\t\tconst newFocusedCell = editor.cellAt(editor.getFocus().start);\n\t\tif (focusMode === CellFocusMode.Editor && newFocusedCell) {\n\t\t\tnewFocusedCell.focusMode = CellFocusMode.Editor;\n\t\t}\n\t}\n}\n\nfunction _splitPointsToBoundaries(\n\tsplitPoints: IPosition[],\n\ttextBuffer: IReadonlyTextBuffer,\n): IPosition[] | null {\n\tconst boundaries: IPosition[] = [];\n\tconst lineCnt = textBuffer.getLineCount();\n\tconst getLineLen = (lineNumber: number) => {\n\t\treturn textBuffer.getLineLength(lineNumber);\n\t};\n\n\t// split points need to be sorted\n\tsplitPoints = splitPoints.sort((l, r) => {\n\t\tconst lineDiff = l.lineNumber - r.lineNumber;\n\t\tconst columnDiff = l.column - r.column;\n\t\treturn lineDiff !== 0 ? lineDiff : columnDiff;\n\t});\n\n\tfor (let sp of splitPoints) {\n\t\tif (\n\t\t\tgetLineLen(sp.lineNumber) + 1 === sp.column &&\n\t\t\tsp.column !== 1 /** empty line */ &&\n\t\t\tsp.lineNumber < lineCnt\n\t\t) {\n\t\t\tsp = new Position(sp.lineNumber + 1, 1);\n\t\t}\n\t\t_pushIfAbsent(boundaries, sp);\n\t}\n\n\tif (boundaries.length === 0) {\n\t\treturn null;\n\t}\n\n\t// boundaries already sorted and not empty\n\tconst modelStart = new Position(1, 1);\n\tconst modelEnd = new Position(lineCnt, getLineLen(lineCnt) + 1);\n\treturn [modelStart, ...boundaries, modelEnd];\n}\n\nfunction _pushIfAbsent(positions: IPosition[], p: IPosition) {\n\tconst last =\n\t\tpositions.length > 0 ? positions[positions.length - 1] : undefined;\n\tif (!last || last.lineNumber !== p.lineNumber || last.column !== p.column) {\n\t\tpositions.push(p);\n\t}\n}\n\nexport function computeCellLinesContents(\n\tcell: ICellViewModel,\n\tsplitPoints: IPosition[],\n): string[] | null {\n\tconst rangeBoundaries = _splitPointsToBoundaries(\n\t\tsplitPoints,\n\t\tcell.textBuffer,\n\t);\n\tif (!rangeBoundaries) {\n\t\treturn null;\n\t}\n\tconst newLineModels: string[] = [];\n\tfor (let i = 1; i < rangeBoundaries.length; i++) {\n\t\tconst start = rangeBoundaries[i - 1];\n\t\tconst end = rangeBoundaries[i];\n\n\t\tnewLineModels.push(\n\t\t\tcell.textBuffer.getValueInRange(\n\t\t\t\tnew Range(\n\t\t\t\t\tstart.lineNumber,\n\t\t\t\t\tstart.column,\n\t\t\t\t\tend.lineNumber,\n\t\t\t\t\tend.column,\n\t\t\t\t),\n\t\t\t\tEndOfLinePreference.TextDefined,\n\t\t\t),\n\t\t);\n\t}\n\n\treturn newLineModels;\n}\n\nexport function insertCell(\n\tlanguageService: ILanguageService,\n\teditor: IActiveNotebookEditor,\n\tindex: number,\n\ttype: CellKind,\n\tdirection: \"above\" | \"below\" = \"above\",\n\tinitialText = \"\",\n\tui = false,\n) {\n\tconst viewModel = editor.getViewModel() as NotebookViewModel;\n\tconst activeKernel = editor.activeKernel;\n\tif (viewModel.options.isReadOnly) {\n\t\treturn null;\n\t}\n\n\tconst cell = editor.cellAt(index);\n\tconst nextIndex = ui ? viewModel.getNextVisibleCellIndex(index) : index + 1;\n\tlet language;\n\tif (type === CellKind.Code) {\n\t\tconst supportedLanguages =\n\t\t\tactiveKernel?.supportedLanguages ??\n\t\t\tlanguageService.getRegisteredLanguageIds();\n\t\tconst defaultLanguage = supportedLanguages[0] || PLAINTEXT_LANGUAGE_ID;\n\t\tif (cell?.cellKind === CellKind.Code) {\n\t\t\tlanguage = cell.language;\n\t\t} else if (cell?.cellKind === CellKind.Markup) {\n\t\t\tconst nearestCodeCellIndex = viewModel.nearestCodeCellIndex(index);\n\t\t\tif (nearestCodeCellIndex > -1) {\n\t\t\t\tlanguage = viewModel.cellAt(nearestCodeCellIndex)!.language;\n\t\t\t} else {\n\t\t\t\tlanguage = defaultLanguage;\n\t\t\t}\n\t\t} else if (cell === undefined && direction === \"above\") {\n\t\t\t// insert cell at the very top\n\t\t\tlanguage =\n\t\t\t\tviewModel.viewCells.find(\n\t\t\t\t\t(cell) => cell.cellKind === CellKind.Code,\n\t\t\t\t)?.language || defaultLanguage;\n\t\t} else {\n\t\t\tlanguage = defaultLanguage;\n\t\t}\n\n\t\tif (!supportedLanguages.includes(language)) {\n\t\t\t// the language no longer exists\n\t\t\tlanguage = defaultLanguage;\n\t\t}\n\t} else {\n\t\tlanguage = \"markdown\";\n\t}\n\n\tconst insertIndex = cell\n\t\t? direction === \"above\"\n\t\t\t? index\n\t\t\t: nextIndex\n\t\t: index;\n\treturn insertCellAtIndex(\n\t\tviewModel,\n\t\tinsertIndex,\n\t\tinitialText,\n\t\tlanguage,\n\t\ttype,\n\t\tundefined,\n\t\t[],\n\t\ttrue,\n\t\ttrue,\n\t);\n}\n\nexport function insertCellAtIndex(\n\tviewModel: NotebookViewModel,\n\tindex: number,\n\tsource: string,\n\tlanguage: string,\n\ttype: CellKind,\n\tmetadata: NotebookCellMetadata | undefined,\n\toutputs: IOutputDto[],\n\tsynchronous: boolean,\n\tpushUndoStop: boolean,\n): CellViewModel {\n\tconst endSelections: ISelectionState = {\n\t\tkind: SelectionStateType.Index,\n\t\tfocus: { start: index, end: index + 1 },\n\t\tselections: [{ start: index, end: index + 1 }],\n\t};\n\tviewModel.notebookDocument.applyEdits(\n\t\t[\n\t\t\t{\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex,\n\t\t\t\tcount: 0,\n\t\t\t\tcells: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcellKind: type,\n\t\t\t\t\t\tlanguage: language,\n\t\t\t\t\t\tmime: undefined,\n\t\t\t\t\t\toutputs: outputs,\n\t\t\t\t\t\tmetadata: metadata,\n\t\t\t\t\t\tsource: source,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tsynchronous,\n\t\t{\n\t\t\tkind: SelectionStateType.Index,\n\t\t\tfocus: viewModel.getFocus(),\n\t\t\tselections: viewModel.getSelections(),\n\t\t},\n\t\t() => endSelections,\n\t\tundefined,\n\t\tpushUndoStop && !viewModel.options.isReadOnly,\n\t);\n\treturn viewModel.cellAt(index)!;\n}\n"],
  "mappings": "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",
  "names": ["cell"]
}
