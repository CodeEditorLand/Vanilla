{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/cellOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IBulkEditService, ResourceEdit, ResourceTextEdit } from '../../../../../editor/browser/services/bulkEditService.js';\nimport { IPosition, Position } from '../../../../../editor/common/core/position.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { EndOfLinePreference, IReadonlyTextBuffer } from '../../../../../editor/common/model.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { ResourceNotebookCellEdit } from '../../../bulkEdit/browser/bulkCellEdits.js';\nimport { INotebookActionContext, INotebookCellActionContext } from './coreActions.js';\nimport { CellEditState, CellFocusMode, expandCellRangesWithHiddenCells, IActiveNotebookEditor, ICellViewModel } from '../notebookBrowser.js';\nimport { CellViewModel, NotebookViewModel } from '../viewModel/notebookViewModelImpl.js';\nimport { cloneNotebookCellTextModel } from '../../common/model/notebookCellTextModel.js';\nimport { CellEditType, CellKind, ICellEditOperation, ICellReplaceEdit, IOutputDto, ISelectionState, NotebookCellMetadata, SelectionStateType } from '../../common/notebookCommon.js';\nimport { cellRangeContains, cellRangesToIndexes, ICellRange } from '../../common/notebookRange.js';\nimport { localize } from '../../../../../nls.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\n\nexport async function changeCellToKind(kind: CellKind, context: INotebookActionContext, language?: string, mime?: string): Promise<void> {\n\tconst { notebookEditor } = context;\n\tif (!notebookEditor.hasModel()) {\n\t\treturn;\n\t}\n\n\tif (notebookEditor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tif (context.ui && context.cell) {\n\t\t// action from UI\n\t\tconst { cell } = context;\n\n\t\tif (cell.cellKind === kind) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst text = cell.getText();\n\t\tconst idx = notebookEditor.getCellIndex(cell);\n\n\t\tif (language === undefined) {\n\t\t\tconst availableLanguages = notebookEditor.activeKernel?.supportedLanguages ?? [];\n\t\t\tlanguage = availableLanguages[0] ?? PLAINTEXT_LANGUAGE_ID;\n\t\t}\n\n\t\tnotebookEditor.textModel.applyEdits([\n\t\t\t{\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: idx,\n\t\t\t\tcount: 1,\n\t\t\t\tcells: [{\n\t\t\t\t\tcellKind: kind,\n\t\t\t\t\tsource: text,\n\t\t\t\t\tlanguage: language,\n\t\t\t\t\tmime: mime ?? cell.mime,\n\t\t\t\t\toutputs: cell.model.outputs,\n\t\t\t\t\tmetadata: cell.metadata,\n\t\t\t\t}]\n\t\t\t}\n\t\t], true, {\n\t\t\tkind: SelectionStateType.Index,\n\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\tselections: notebookEditor.getSelections()\n\t\t}, () => {\n\t\t\treturn {\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\t\tselections: notebookEditor.getSelections()\n\t\t\t};\n\t\t}, undefined, true);\n\t\tconst newCell = notebookEditor.cellAt(idx);\n\t\tawait notebookEditor.focusNotebookCell(newCell, cell.getEditState() === CellEditState.Editing ? 'editor' : 'container');\n\t} else if (context.selectedCells) {\n\t\tconst selectedCells = context.selectedCells;\n\t\tconst rawEdits: ICellEditOperation[] = [];\n\n\t\tselectedCells.forEach(cell => {\n\t\t\tif (cell.cellKind === kind) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst text = cell.getText();\n\t\t\tconst idx = notebookEditor.getCellIndex(cell);\n\n\t\t\tif (language === undefined) {\n\t\t\t\tconst availableLanguages = notebookEditor.activeKernel?.supportedLanguages ?? [];\n\t\t\t\tlanguage = availableLanguages[0] ?? PLAINTEXT_LANGUAGE_ID;\n\t\t\t}\n\n\t\t\trawEdits.push(\n\t\t\t\t{\n\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\tindex: idx,\n\t\t\t\t\tcount: 1,\n\t\t\t\t\tcells: [{\n\t\t\t\t\t\tcellKind: kind,\n\t\t\t\t\t\tsource: text,\n\t\t\t\t\t\tlanguage: language,\n\t\t\t\t\t\tmime: mime ?? cell.mime,\n\t\t\t\t\t\toutputs: cell.model.outputs,\n\t\t\t\t\t\tmetadata: cell.metadata,\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tnotebookEditor.textModel.applyEdits(rawEdits, true, {\n\t\t\tkind: SelectionStateType.Index,\n\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\tselections: notebookEditor.getSelections()\n\t\t}, () => {\n\t\t\treturn {\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: notebookEditor.getFocus(),\n\t\t\t\tselections: notebookEditor.getSelections()\n\t\t\t};\n\t\t}, undefined, true);\n\t}\n}\n\nexport function runDeleteAction(editor: IActiveNotebookEditor, cell: ICellViewModel) {\n\tconst textModel = editor.textModel;\n\tconst selections = editor.getSelections();\n\tconst targetCellIndex = editor.getCellIndex(cell);\n\tconst containingSelection = selections.find(selection => selection.start <= targetCellIndex && targetCellIndex < selection.end);\n\n\tconst computeUndoRedo = !editor.isReadOnly || textModel.viewType === 'interactive';\n\tif (containingSelection) {\n\t\tconst edits: ICellReplaceEdit[] = selections.reverse().map(selection => ({\n\t\t\teditType: CellEditType.Replace, index: selection.start, count: selection.end - selection.start, cells: []\n\t\t}));\n\n\t\tconst nextCellAfterContainingSelection = containingSelection.end >= editor.getLength() ? undefined : editor.cellAt(containingSelection.end);\n\n\t\ttextModel.applyEdits(edits, true, { kind: SelectionStateType.Index, focus: editor.getFocus(), selections: editor.getSelections() }, () => {\n\t\t\tif (nextCellAfterContainingSelection) {\n\t\t\t\tconst cellIndex = textModel.cells.findIndex(cell => cell.handle === nextCellAfterContainingSelection.handle);\n\t\t\t\treturn { kind: SelectionStateType.Index, focus: { start: cellIndex, end: cellIndex + 1 }, selections: [{ start: cellIndex, end: cellIndex + 1 }] };\n\t\t\t} else {\n\t\t\t\tif (textModel.length) {\n\t\t\t\t\tconst lastCellIndex = textModel.length - 1;\n\t\t\t\t\treturn { kind: SelectionStateType.Index, focus: { start: lastCellIndex, end: lastCellIndex + 1 }, selections: [{ start: lastCellIndex, end: lastCellIndex + 1 }] };\n\n\t\t\t\t} else {\n\t\t\t\t\treturn { kind: SelectionStateType.Index, focus: { start: 0, end: 0 }, selections: [{ start: 0, end: 0 }] };\n\t\t\t\t}\n\t\t\t}\n\t\t}, undefined, computeUndoRedo);\n\t} else {\n\t\tconst focus = editor.getFocus();\n\t\tconst edits: ICellReplaceEdit[] = [{\n\t\t\teditType: CellEditType.Replace, index: targetCellIndex, count: 1, cells: []\n\t\t}];\n\n\t\tconst finalSelections: ICellRange[] = [];\n\t\tfor (let i = 0; i < selections.length; i++) {\n\t\t\tconst selection = selections[i];\n\n\t\t\tif (selection.end <= targetCellIndex) {\n\t\t\t\tfinalSelections.push(selection);\n\t\t\t} else if (selection.start > targetCellIndex) {\n\t\t\t\tfinalSelections.push({ start: selection.start - 1, end: selection.end - 1 });\n\t\t\t} else {\n\t\t\t\tfinalSelections.push({ start: targetCellIndex, end: targetCellIndex + 1 });\n\t\t\t}\n\t\t}\n\n\t\tif (editor.cellAt(focus.start) === cell) {\n\t\t\t// focus is the target, focus is also not part of any selection\n\t\t\tconst newFocus = focus.end === textModel.length ? { start: focus.start - 1, end: focus.end - 1 } : focus;\n\n\t\t\ttextModel.applyEdits(edits, true, { kind: SelectionStateType.Index, focus: editor.getFocus(), selections: editor.getSelections() }, () => ({\n\t\t\t\tkind: SelectionStateType.Index, focus: newFocus, selections: finalSelections\n\t\t\t}), undefined, computeUndoRedo);\n\t\t} else {\n\t\t\t// users decide to delete a cell out of current focus/selection\n\t\t\tconst newFocus = focus.start > targetCellIndex ? { start: focus.start - 1, end: focus.end - 1 } : focus;\n\n\t\t\ttextModel.applyEdits(edits, true, { kind: SelectionStateType.Index, focus: editor.getFocus(), selections: editor.getSelections() }, () => ({\n\t\t\t\tkind: SelectionStateType.Index, focus: newFocus, selections: finalSelections\n\t\t\t}), undefined, computeUndoRedo);\n\t\t}\n\t}\n}\n\nexport async function moveCellRange(context: INotebookActionContext, direction: 'up' | 'down'): Promise<void> {\n\tif (!context.notebookEditor.hasModel()) {\n\t\treturn;\n\t}\n\tconst editor = context.notebookEditor;\n\tconst textModel = editor.textModel;\n\n\tif (editor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tlet range: ICellRange | undefined = undefined;\n\n\tif (context.cell) {\n\t\tconst idx = editor.getCellIndex(context.cell);\n\t\trange = { start: idx, end: idx + 1 };\n\t} else {\n\t\tconst selections = editor.getSelections();\n\t\tconst modelRanges = expandCellRangesWithHiddenCells(editor, selections);\n\t\trange = modelRanges[0];\n\t}\n\n\tif (!range || range.start === range.end) {\n\t\treturn;\n\t}\n\n\tif (direction === 'up') {\n\t\tif (range.start === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst indexAbove = range.start - 1;\n\t\tconst finalSelection = { start: range.start - 1, end: range.end - 1 };\n\t\tconst focus = context.notebookEditor.getFocus();\n\t\tconst newFocus = cellRangeContains(range, focus) ? { start: focus.start - 1, end: focus.end - 1 } : { start: range.start - 1, end: range.start };\n\t\ttextModel.applyEdits([\n\t\t\t{\n\t\t\t\teditType: CellEditType.Move,\n\t\t\t\tindex: indexAbove,\n\t\t\t\tlength: 1,\n\t\t\t\tnewIdx: range.end - 1\n\t\t\t}],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: editor.getFocus(),\n\t\t\t\tselections: editor.getSelections()\n\t\t\t},\n\t\t\t() => ({ kind: SelectionStateType.Index, focus: newFocus, selections: [finalSelection] }),\n\t\t\tundefined,\n\t\t\ttrue\n\t\t);\n\t\tconst focusRange = editor.getSelections()[0] ?? editor.getFocus();\n\t\teditor.revealCellRangeInView(focusRange);\n\t} else {\n\t\tif (range.end >= textModel.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst indexBelow = range.end;\n\t\tconst finalSelection = { start: range.start + 1, end: range.end + 1 };\n\t\tconst focus = editor.getFocus();\n\t\tconst newFocus = cellRangeContains(range, focus) ? { start: focus.start + 1, end: focus.end + 1 } : { start: range.start + 1, end: range.start + 2 };\n\n\t\ttextModel.applyEdits([\n\t\t\t{\n\t\t\t\teditType: CellEditType.Move,\n\t\t\t\tindex: indexBelow,\n\t\t\t\tlength: 1,\n\t\t\t\tnewIdx: range.start\n\t\t\t}],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: editor.getFocus(),\n\t\t\t\tselections: editor.getSelections()\n\t\t\t},\n\t\t\t() => ({ kind: SelectionStateType.Index, focus: newFocus, selections: [finalSelection] }),\n\t\t\tundefined,\n\t\t\ttrue\n\t\t);\n\n\t\tconst focusRange = editor.getSelections()[0] ?? editor.getFocus();\n\t\teditor.revealCellRangeInView(focusRange);\n\t}\n}\n\nexport async function copyCellRange(context: INotebookCellActionContext, direction: 'up' | 'down'): Promise<void> {\n\tconst editor = context.notebookEditor;\n\tif (!editor.hasModel()) {\n\t\treturn;\n\t}\n\n\tconst textModel = editor.textModel;\n\n\tif (editor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tlet range: ICellRange | undefined = undefined;\n\n\tif (context.ui) {\n\t\tconst targetCell = context.cell;\n\t\tconst targetCellIndex = editor.getCellIndex(targetCell);\n\t\trange = { start: targetCellIndex, end: targetCellIndex + 1 };\n\t} else {\n\t\tconst selections = editor.getSelections();\n\t\tconst modelRanges = expandCellRangesWithHiddenCells(editor, selections);\n\t\trange = modelRanges[0];\n\t}\n\n\tif (!range || range.start === range.end) {\n\t\treturn;\n\t}\n\n\tif (direction === 'up') {\n\t\t// insert up, without changing focus and selections\n\t\tconst focus = editor.getFocus();\n\t\tconst selections = editor.getSelections();\n\t\ttextModel.applyEdits([\n\t\t\t{\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: range.end,\n\t\t\t\tcount: 0,\n\t\t\t\tcells: cellRangesToIndexes([range]).map(index => cloneNotebookCellTextModel(editor.cellAt(index)!.model))\n\t\t\t}],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: focus,\n\t\t\t\tselections: selections\n\t\t\t},\n\t\t\t() => ({ kind: SelectionStateType.Index, focus: focus, selections: selections }),\n\t\t\tundefined,\n\t\t\ttrue\n\t\t);\n\t} else {\n\t\t// insert down, move selections\n\t\tconst focus = editor.getFocus();\n\t\tconst selections = editor.getSelections();\n\t\tconst newCells = cellRangesToIndexes([range]).map(index => cloneNotebookCellTextModel(editor.cellAt(index)!.model));\n\t\tconst countDelta = newCells.length;\n\t\tconst newFocus = context.ui ? focus : { start: focus.start + countDelta, end: focus.end + countDelta };\n\t\tconst newSelections = context.ui ? selections : [{ start: range.start + countDelta, end: range.end + countDelta }];\n\t\ttextModel.applyEdits([\n\t\t\t{\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: range.end,\n\t\t\t\tcount: 0,\n\t\t\t\tcells: cellRangesToIndexes([range]).map(index => cloneNotebookCellTextModel(editor.cellAt(index)!.model))\n\t\t\t}],\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\tfocus: focus,\n\t\t\t\tselections: selections\n\t\t\t},\n\t\t\t() => ({ kind: SelectionStateType.Index, focus: newFocus, selections: newSelections }),\n\t\t\tundefined,\n\t\t\ttrue\n\t\t);\n\n\t\tconst focusRange = editor.getSelections()[0] ?? editor.getFocus();\n\t\teditor.revealCellRangeInView(focusRange);\n\t}\n}\n\nexport async function joinSelectedCells(bulkEditService: IBulkEditService, notificationService: INotificationService, context: INotebookCellActionContext): Promise<void> {\n\tconst editor = context.notebookEditor;\n\tif (editor.isReadOnly) {\n\t\treturn;\n\t}\n\n\tconst edits: ResourceEdit[] = [];\n\tconst cells: ICellViewModel[] = [];\n\tfor (const selection of editor.getSelections()) {\n\t\tcells.push(...editor.getCellsInRange(selection));\n\t}\n\n\tif (cells.length <= 1) {\n\t\treturn;\n\t}\n\n\t// check if all cells are of the same kind\n\tconst cellKind = cells[0].cellKind;\n\tconst isSameKind = cells.every(cell => cell.cellKind === cellKind);\n\tif (!isSameKind) {\n\t\t// cannot join cells of different kinds\n\t\t// show warning and quit\n\t\tconst message = localize('notebookActions.joinSelectedCells', \"Cannot join cells of different kinds\");\n\t\treturn notificationService.warn(message);\n\t}\n\n\t// merge all cells content into first cell\n\tconst firstCell = cells[0];\n\tconst insertContent = cells.map(cell => cell.getText()).join(firstCell.textBuffer.getEOL());\n\tconst firstSelection = editor.getSelections()[0];\n\tedits.push(\n\t\tnew ResourceNotebookCellEdit(editor.textModel.uri,\n\t\t\t{\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: firstSelection.start,\n\t\t\t\tcount: firstSelection.end - firstSelection.start,\n\t\t\t\tcells: [{\n\t\t\t\t\tcellKind: firstCell.cellKind,\n\t\t\t\t\tsource: insertContent,\n\t\t\t\t\tlanguage: firstCell.language,\n\t\t\t\t\tmime: firstCell.mime,\n\t\t\t\t\toutputs: firstCell.model.outputs,\n\t\t\t\t\tmetadata: firstCell.metadata,\n\t\t\t\t}]\n\t\t\t}\n\t\t)\n\t);\n\n\tfor (const selection of editor.getSelections().slice(1)) {\n\t\tedits.push(new ResourceNotebookCellEdit(editor.textModel.uri,\n\t\t\t{\n\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\tindex: selection.start,\n\t\t\t\tcount: selection.end - selection.start,\n\t\t\t\tcells: []\n\t\t\t}));\n\t}\n\n\tif (edits.length) {\n\t\tawait bulkEditService.apply(\n\t\t\tedits,\n\t\t\t{ quotableLabel: localize('notebookActions.joinSelectedCells.label', \"Join Notebook Cells\") }\n\t\t);\n\t}\n}\n\nexport async function joinNotebookCells(editor: IActiveNotebookEditor, range: ICellRange, direction: 'above' | 'below', constraint?: CellKind): Promise<{ edits: ResourceEdit[]; cell: ICellViewModel; endFocus: ICellRange; endSelections: ICellRange[] } | null> {\n\tif (editor.isReadOnly) {\n\t\treturn null;\n\t}\n\n\tconst textModel = editor.textModel;\n\tconst cells = editor.getCellsInRange(range);\n\n\tif (!cells.length) {\n\t\treturn null;\n\t}\n\n\tif (range.start === 0 && direction === 'above') {\n\t\treturn null;\n\t}\n\n\tif (range.end === textModel.length && direction === 'below') {\n\t\treturn null;\n\t}\n\n\tfor (let i = 0; i < cells.length; i++) {\n\t\tconst cell = cells[i];\n\n\t\tif (constraint && cell.cellKind !== constraint) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tif (direction === 'above') {\n\t\tconst above = editor.cellAt(range.start - 1) as CellViewModel;\n\t\tif (constraint && above.cellKind !== constraint) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst insertContent = cells.map(cell => (cell.textBuffer.getEOL() ?? '') + cell.getText()).join('');\n\t\tconst aboveCellLineCount = above.textBuffer.getLineCount();\n\t\tconst aboveCellLastLineEndColumn = above.textBuffer.getLineLength(aboveCellLineCount);\n\n\t\treturn {\n\t\t\tedits: [\n\t\t\t\tnew ResourceTextEdit(above.uri, { range: new Range(aboveCellLineCount, aboveCellLastLineEndColumn + 1, aboveCellLineCount, aboveCellLastLineEndColumn + 1), text: insertContent }),\n\t\t\t\tnew ResourceNotebookCellEdit(textModel.uri,\n\t\t\t\t\t{\n\t\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\t\tindex: range.start,\n\t\t\t\t\t\tcount: range.end - range.start,\n\t\t\t\t\t\tcells: []\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t],\n\t\t\tcell: above,\n\t\t\tendFocus: { start: range.start - 1, end: range.start },\n\t\t\tendSelections: [{ start: range.start - 1, end: range.start }]\n\t\t};\n\t} else {\n\t\tconst below = editor.cellAt(range.end) as CellViewModel;\n\t\tif (constraint && below.cellKind !== constraint) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst cell = cells[0];\n\t\tconst restCells = [...cells.slice(1), below];\n\t\tconst insertContent = restCells.map(cl => (cl.textBuffer.getEOL() ?? '') + cl.getText()).join('');\n\n\t\tconst cellLineCount = cell.textBuffer.getLineCount();\n\t\tconst cellLastLineEndColumn = cell.textBuffer.getLineLength(cellLineCount);\n\n\t\treturn {\n\t\t\tedits: [\n\t\t\t\tnew ResourceTextEdit(cell.uri, { range: new Range(cellLineCount, cellLastLineEndColumn + 1, cellLineCount, cellLastLineEndColumn + 1), text: insertContent }),\n\t\t\t\tnew ResourceNotebookCellEdit(textModel.uri,\n\t\t\t\t\t{\n\t\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\t\tindex: range.start + 1,\n\t\t\t\t\t\tcount: range.end - range.start,\n\t\t\t\t\t\tcells: []\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t],\n\t\t\tcell,\n\t\t\tendFocus: { start: range.start, end: range.start + 1 },\n\t\t\tendSelections: [{ start: range.start, end: range.start + 1 }]\n\t\t};\n\t}\n}\n\nexport async function joinCellsWithSurrounds(bulkEditService: IBulkEditService, context: INotebookCellActionContext, direction: 'above' | 'below'): Promise<void> {\n\tconst editor = context.notebookEditor;\n\tconst textModel = editor.textModel;\n\tconst viewModel = editor.getViewModel() as NotebookViewModel;\n\tlet ret: {\n\t\tedits: ResourceEdit[];\n\t\tcell: ICellViewModel;\n\t\tendFocus: ICellRange;\n\t\tendSelections: ICellRange[];\n\t} | null = null;\n\n\tif (context.ui) {\n\t\tconst focusMode = context.cell.focusMode;\n\t\tconst cellIndex = editor.getCellIndex(context.cell);\n\t\tret = await joinNotebookCells(editor, { start: cellIndex, end: cellIndex + 1 }, direction);\n\t\tif (!ret) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait bulkEditService.apply(\n\t\t\tret?.edits,\n\t\t\t{ quotableLabel: 'Join Notebook Cells' }\n\t\t);\n\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: ret.endFocus, selections: ret.endSelections });\n\t\tret.cell.updateEditState(CellEditState.Editing, 'joinCellsWithSurrounds');\n\t\teditor.revealCellRangeInView(editor.getFocus());\n\t\tif (focusMode === CellFocusMode.Editor) {\n\t\t\tret.cell.focusMode = CellFocusMode.Editor;\n\t\t}\n\t} else {\n\t\tconst selections = editor.getSelections();\n\t\tif (!selections.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus = editor.getFocus();\n\t\tconst focusMode = editor.cellAt(focus.start)?.focusMode;\n\n\t\tconst edits: ResourceEdit[] = [];\n\t\tlet cell: ICellViewModel | null = null;\n\t\tconst cells: ICellViewModel[] = [];\n\n\t\tfor (let i = selections.length - 1; i >= 0; i--) {\n\t\t\tconst selection = selections[i];\n\t\t\tconst containFocus = cellRangeContains(selection, focus);\n\n\t\t\tif (\n\t\t\t\tselection.end >= textModel.length && direction === 'below'\n\t\t\t\t|| selection.start === 0 && direction === 'above'\n\t\t\t) {\n\t\t\t\tif (containFocus) {\n\t\t\t\t\tcell = editor.cellAt(focus.start)!;\n\t\t\t\t}\n\n\t\t\t\tcells.push(...editor.getCellsInRange(selection));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst singleRet = await joinNotebookCells(editor, selection, direction);\n\n\t\t\tif (!singleRet) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tedits.push(...singleRet.edits);\n\t\t\tcells.push(singleRet.cell);\n\n\t\t\tif (containFocus) {\n\t\t\t\tcell = singleRet.cell;\n\t\t\t}\n\t\t}\n\n\t\tif (!edits.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!cell || !cells.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait bulkEditService.apply(\n\t\t\tedits,\n\t\t\t{ quotableLabel: 'Join Notebook Cells' }\n\t\t);\n\n\t\tcells.forEach(cell => {\n\t\t\tcell.updateEditState(CellEditState.Editing, 'joinCellsWithSurrounds');\n\t\t});\n\n\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Handle, primary: cell.handle, selections: cells.map(cell => cell.handle) });\n\t\teditor.revealCellRangeInView(editor.getFocus());\n\t\tconst newFocusedCell = editor.cellAt(editor.getFocus().start);\n\t\tif (focusMode === CellFocusMode.Editor && newFocusedCell) {\n\t\t\tnewFocusedCell.focusMode = CellFocusMode.Editor;\n\t\t}\n\t}\n}\n\nfunction _splitPointsToBoundaries(splitPoints: IPosition[], textBuffer: IReadonlyTextBuffer): IPosition[] | null {\n\tconst boundaries: IPosition[] = [];\n\tconst lineCnt = textBuffer.getLineCount();\n\tconst getLineLen = (lineNumber: number) => {\n\t\treturn textBuffer.getLineLength(lineNumber);\n\t};\n\n\t// split points need to be sorted\n\tsplitPoints = splitPoints.sort((l, r) => {\n\t\tconst lineDiff = l.lineNumber - r.lineNumber;\n\t\tconst columnDiff = l.column - r.column;\n\t\treturn lineDiff !== 0 ? lineDiff : columnDiff;\n\t});\n\n\tfor (let sp of splitPoints) {\n\t\tif (getLineLen(sp.lineNumber) + 1 === sp.column && sp.column !== 1 /** empty line */ && sp.lineNumber < lineCnt) {\n\t\t\tsp = new Position(sp.lineNumber + 1, 1);\n\t\t}\n\t\t_pushIfAbsent(boundaries, sp);\n\t}\n\n\tif (boundaries.length === 0) {\n\t\treturn null;\n\t}\n\n\t// boundaries already sorted and not empty\n\tconst modelStart = new Position(1, 1);\n\tconst modelEnd = new Position(lineCnt, getLineLen(lineCnt) + 1);\n\treturn [modelStart, ...boundaries, modelEnd];\n}\n\nfunction _pushIfAbsent(positions: IPosition[], p: IPosition) {\n\tconst last = positions.length > 0 ? positions[positions.length - 1] : undefined;\n\tif (!last || last.lineNumber !== p.lineNumber || last.column !== p.column) {\n\t\tpositions.push(p);\n\t}\n}\n\nexport function computeCellLinesContents(cell: ICellViewModel, splitPoints: IPosition[]): string[] | null {\n\tconst rangeBoundaries = _splitPointsToBoundaries(splitPoints, cell.textBuffer);\n\tif (!rangeBoundaries) {\n\t\treturn null;\n\t}\n\tconst newLineModels: string[] = [];\n\tfor (let i = 1; i < rangeBoundaries.length; i++) {\n\t\tconst start = rangeBoundaries[i - 1];\n\t\tconst end = rangeBoundaries[i];\n\n\t\tnewLineModels.push(cell.textBuffer.getValueInRange(new Range(start.lineNumber, start.column, end.lineNumber, end.column), EndOfLinePreference.TextDefined));\n\t}\n\n\treturn newLineModels;\n}\n\nexport function insertCell(\n\tlanguageService: ILanguageService,\n\teditor: IActiveNotebookEditor,\n\tindex: number,\n\ttype: CellKind,\n\tdirection: 'above' | 'below' = 'above',\n\tinitialText: string = '',\n\tui: boolean = false\n) {\n\tconst viewModel = editor.getViewModel() as NotebookViewModel;\n\tconst activeKernel = editor.activeKernel;\n\tif (viewModel.options.isReadOnly) {\n\t\treturn null;\n\t}\n\n\tconst cell = editor.cellAt(index);\n\tconst nextIndex = ui ? viewModel.getNextVisibleCellIndex(index) : index + 1;\n\tlet language;\n\tif (type === CellKind.Code) {\n\t\tconst supportedLanguages = activeKernel?.supportedLanguages ?? languageService.getRegisteredLanguageIds();\n\t\tconst defaultLanguage = supportedLanguages[0] || PLAINTEXT_LANGUAGE_ID;\n\t\tif (cell?.cellKind === CellKind.Code) {\n\t\t\tlanguage = cell.language;\n\t\t} else if (cell?.cellKind === CellKind.Markup) {\n\t\t\tconst nearestCodeCellIndex = viewModel.nearestCodeCellIndex(index);\n\t\t\tif (nearestCodeCellIndex > -1) {\n\t\t\t\tlanguage = viewModel.cellAt(nearestCodeCellIndex)!.language;\n\t\t\t} else {\n\t\t\t\tlanguage = defaultLanguage;\n\t\t\t}\n\t\t} else {\n\t\t\tif (cell === undefined && direction === 'above') {\n\t\t\t\t// insert cell at the very top\n\t\t\t\tlanguage = viewModel.viewCells.find(cell => cell.cellKind === CellKind.Code)?.language || defaultLanguage;\n\t\t\t} else {\n\t\t\t\tlanguage = defaultLanguage;\n\t\t\t}\n\t\t}\n\n\t\tif (!supportedLanguages.includes(language)) {\n\t\t\t// the language no longer exists\n\t\t\tlanguage = defaultLanguage;\n\t\t}\n\t} else {\n\t\tlanguage = 'markdown';\n\t}\n\n\tconst insertIndex = cell ?\n\t\t(direction === 'above' ? index : nextIndex) :\n\t\tindex;\n\treturn insertCellAtIndex(viewModel, insertIndex, initialText, language, type, undefined, [], true, true);\n}\n\nexport function insertCellAtIndex(viewModel: NotebookViewModel, index: number, source: string, language: string, type: CellKind, metadata: NotebookCellMetadata | undefined, outputs: IOutputDto[], synchronous: boolean, pushUndoStop: boolean): CellViewModel {\n\tconst endSelections: ISelectionState = { kind: SelectionStateType.Index, focus: { start: index, end: index + 1 }, selections: [{ start: index, end: index + 1 }] };\n\tviewModel.notebookDocument.applyEdits([\n\t\t{\n\t\t\teditType: CellEditType.Replace,\n\t\t\tindex,\n\t\t\tcount: 0,\n\t\t\tcells: [\n\t\t\t\t{\n\t\t\t\t\tcellKind: type,\n\t\t\t\t\tlanguage: language,\n\t\t\t\t\tmime: undefined,\n\t\t\t\t\toutputs: outputs,\n\t\t\t\t\tmetadata: metadata,\n\t\t\t\t\tsource: source\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t], synchronous, { kind: SelectionStateType.Index, focus: viewModel.getFocus(), selections: viewModel.getSelections() }, () => endSelections, undefined, pushUndoStop && !viewModel.options.isReadOnly);\n\treturn viewModel.cellAt(index)!;\n}\n"],
  "mappings": "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",
  "names": ["cell"]
}
