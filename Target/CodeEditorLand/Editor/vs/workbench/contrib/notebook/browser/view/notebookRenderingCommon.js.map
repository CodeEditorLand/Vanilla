{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/notebookRenderingCommon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { IMouseWheelEvent } from '../../../../../base/browser/mouseEvent.js';\nimport { IListContextMenuEvent, IListEvent, IListMouseEvent } from '../../../../../base/browser/ui/list/list.js';\nimport { IListStyles } from '../../../../../base/browser/ui/list/listWidget.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ScrollEvent } from '../../../../../base/common/scrollable.js';\nimport { ICodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../../editor/common/core/selection.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkbenchListOptionsUpdate } from '../../../../../platform/list/browser/listService.js';\nimport { CellRevealRangeType, CellRevealType, ICellOutputViewModel, ICellViewModel, INotebookViewZoneChangeAccessor } from '../notebookBrowser.js';\nimport { CellPartsCollection } from './cellPart.js';\nimport { CellViewModel, NotebookViewModel } from '../viewModel/notebookViewModelImpl.js';\nimport { ICellRange } from '../../common/notebookRange.js';\n\n\nexport interface INotebookCellList extends ICoordinatesConverter {\n\tisDisposed: boolean;\n\tinRenderingTransaction: boolean;\n\tviewModel: NotebookViewModel | null;\n\twebviewElement: FastDomNode<HTMLElement> | null;\n\treadonly contextKeyService: IContextKeyService;\n\telement(index: number): ICellViewModel | undefined;\n\telementAt(position: number): ICellViewModel | undefined;\n\telementHeight(element: ICellViewModel): number;\n\tonWillScroll: Event<ScrollEvent>;\n\tonDidScroll: Event<ScrollEvent>;\n\tonDidChangeFocus: Event<IListEvent<ICellViewModel>>;\n\tonDidChangeContentHeight: Event<number>;\n\tonDidChangeVisibleRanges: Event<void>;\n\tvisibleRanges: ICellRange[];\n\tscrollTop: number;\n\tscrollHeight: number;\n\tscrollLeft: number;\n\tlength: number;\n\trowsContainer: HTMLElement;\n\tscrollableElement: HTMLElement;\n\tariaLabel: string;\n\treadonly onDidRemoveOutputs: Event<readonly ICellOutputViewModel[]>;\n\treadonly onDidHideOutputs: Event<readonly ICellOutputViewModel[]>;\n\treadonly onDidRemoveCellsFromView: Event<readonly ICellViewModel[]>;\n\treadonly onMouseUp: Event<IListMouseEvent<CellViewModel>>;\n\treadonly onMouseDown: Event<IListMouseEvent<CellViewModel>>;\n\treadonly onContextMenu: Event<IListContextMenuEvent<CellViewModel>>;\n\tdetachViewModel(): void;\n\tattachViewModel(viewModel: NotebookViewModel): void;\n\tattachWebview(element: HTMLElement): void;\n\tclear(): void;\n\tfocusElement(element: ICellViewModel): void;\n\tselectElements(elements: ICellViewModel[]): void;\n\tgetFocusedElements(): ICellViewModel[];\n\tgetSelectedElements(): ICellViewModel[];\n\tscrollToBottom(): void;\n\trevealCell(cell: ICellViewModel, revealType: CellRevealType): Promise<void>;\n\trevealCells(range: ICellRange): void;\n\trevealRangeInCell(cell: ICellViewModel, range: Selection | Range, revealType: CellRevealRangeType): Promise<void>;\n\trevealCellOffsetInCenter(element: ICellViewModel, offset: number): void;\n\trevealOffsetInCenterIfOutsideViewport(offset: number): void;\n\tsetHiddenAreas(_ranges: ICellRange[], triggerViewUpdate: boolean): boolean;\n\tchangeViewZones(callback: (accessor: INotebookViewZoneChangeAccessor) => void): void;\n\tdomElementOfElement(element: ICellViewModel): HTMLElement | null;\n\tfocusView(): void;\n\ttriggerScrollFromMouseWheelEvent(browserEvent: IMouseWheelEvent): void;\n\tupdateElementHeight2(element: ICellViewModel, size: number, anchorElementIndex?: number | null): void;\n\tdomFocus(): void;\n\tfocusContainer(clearSelection: boolean): void;\n\tsetCellEditorSelection(element: ICellViewModel, range: Range): void;\n\tstyle(styles: IListStyles): void;\n\tgetRenderHeight(): number;\n\tgetScrollHeight(): number;\n\tupdateOptions(options: IWorkbenchListOptionsUpdate): void;\n\tlayout(height?: number, width?: number): void;\n\tdispose(): void;\n}\n\nexport interface BaseCellRenderTemplate {\n\treadonly rootContainer: HTMLElement;\n\treadonly editorPart: HTMLElement;\n\treadonly cellInputCollapsedContainer: HTMLElement;\n\treadonly instantiationService: IInstantiationService;\n\treadonly container: HTMLElement;\n\treadonly cellContainer: HTMLElement;\n\treadonly templateDisposables: DisposableStore;\n\treadonly elementDisposables: DisposableStore;\n\tcurrentRenderedCell?: ICellViewModel;\n\tcellParts: CellPartsCollection;\n\ttoJSON: () => object;\n}\n\nexport interface MarkdownCellRenderTemplate extends BaseCellRenderTemplate {\n\treadonly editorContainer: HTMLElement;\n\treadonly foldingIndicator: HTMLElement;\n\tcurrentEditor?: ICodeEditor;\n}\n\nexport interface CodeCellRenderTemplate extends BaseCellRenderTemplate {\n\toutputContainer: FastDomNode<HTMLElement>;\n\tcellOutputCollapsedContainer: HTMLElement;\n\toutputShowMoreContainer: FastDomNode<HTMLElement>;\n\tfocusSinkElement: HTMLElement;\n\teditor: ICodeEditor;\n}\n\nexport interface ICoordinatesConverter {\n\tgetCellViewScrollTop(cell: ICellViewModel): number;\n\tgetCellViewScrollBottom(cell: ICellViewModel): number;\n\tgetViewIndex(cell: ICellViewModel): number | undefined;\n\tgetViewIndex2(modelIndex: number): number | undefined;\n\tgetModelIndex(cell: CellViewModel): number | undefined;\n\tgetModelIndex2(viewIndex: number): number | undefined;\n\tgetVisibleRangesPlusViewportAboveAndBelow(): ICellRange[];\n\tmodelIndexIsVisible(modelIndex: number): boolean;\n\tconvertModelIndexToViewIndex(modelIndex: number): number;\n}\n"],
  "mappings": "AAKA,SAAS,mBAAmB;AAC5B,SAAS,wBAAwB;AACjC,SAAS,uBAAuB,YAAY,uBAAuB;AACnE,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,SAAS,0BAA0B;AACnC,SAAS,6BAA6B;AACtC,SAAS,mCAAmC;AAC5C,SAAS,qBAAqB,gBAAgB,sBAAsB,gBAAgB,uCAAuC;AAC3H,SAAS,2BAA2B;AACpC,SAAS,eAAe,yBAAyB;AACjD,SAAS,kBAAkB;",
  "names": []
}
