{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/eventDispatcher.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport type {\n\tNotebookLayoutChangeEvent,\n\tNotebookLayoutInfo,\n} from \"../notebookViewEvents.js\";\nimport type { IDiffElementLayoutInfo } from \"./notebookDiffEditorBrowser.js\";\n\nexport enum NotebookDiffViewEventType {\n\tLayoutChanged = 1,\n\tCellLayoutChanged = 2,\n\t// MetadataChanged = 2,\n\t// CellStateChanged = 3\n}\n\nexport class NotebookDiffLayoutChangedEvent {\n\tpublic readonly type = NotebookDiffViewEventType.LayoutChanged;\n\n\tconstructor(\n\t\treadonly source: NotebookLayoutChangeEvent,\n\t\treadonly value: NotebookLayoutInfo,\n\t) {}\n}\n\nexport class NotebookCellLayoutChangedEvent {\n\tpublic readonly type = NotebookDiffViewEventType.CellLayoutChanged;\n\n\tconstructor(readonly source: IDiffElementLayoutInfo) {}\n}\n\nexport type NotebookDiffViewEvent =\n\t| NotebookDiffLayoutChangedEvent\n\t| NotebookCellLayoutChangedEvent;\n\nexport class NotebookDiffEditorEventDispatcher extends Disposable {\n\tprotected readonly _onDidChangeLayout = this._register(\n\t\tnew Emitter<NotebookDiffLayoutChangedEvent>(),\n\t);\n\treadonly onDidChangeLayout = this._onDidChangeLayout.event;\n\n\tprotected readonly _onDidChangeCellLayout = this._register(\n\t\tnew Emitter<NotebookCellLayoutChangedEvent>(),\n\t);\n\treadonly onDidChangeCellLayout = this._onDidChangeCellLayout.event;\n\n\temit(events: NotebookDiffViewEvent[]) {\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tconst e = events[i];\n\n\t\t\tswitch (e.type) {\n\t\t\t\tcase NotebookDiffViewEventType.LayoutChanged:\n\t\t\t\t\tthis._onDidChangeLayout.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotebookDiffViewEventType.CellLayoutChanged:\n\t\t\t\t\tthis._onDidChangeCellLayout.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAOpB,IAAK,4BAAL,kBAAKA,+BAAL;AACN,EAAAA,sDAAA,mBAAgB,KAAhB;AACA,EAAAA,sDAAA,uBAAoB,KAApB;AAFW,SAAAA;AAAA,GAAA;AAOL,MAAM,+BAA+B;AAAA,EAG3C,YACU,QACA,OACR;AAFQ;AACA;AAAA,EACP;AAAA,EA1BJ,OAoB4C;AAAA;AAAA;AAAA,EAC3B,OAAO;AAMxB;AAEO,MAAM,+BAA+B;AAAA,EAG3C,YAAqB,QAAgC;AAAhC;AAAA,EAAiC;AAAA,EAhCvD,OA6B4C;AAAA;AAAA;AAAA,EAC3B,OAAO;AAGxB;AAMO,MAAM,0CAA0C,WAAW;AAAA,EAvClE,OAuCkE;AAAA;AAAA;AAAA,EAC9C,qBAAqB,KAAK;AAAA,IAC5C,IAAI,QAAwC;AAAA,EAC7C;AAAA,EACS,oBAAoB,KAAK,mBAAmB;AAAA,EAElC,yBAAyB,KAAK;AAAA,IAChD,IAAI,QAAwC;AAAA,EAC7C;AAAA,EACS,wBAAwB,KAAK,uBAAuB;AAAA,EAE7D,KAAK,QAAiC;AACrC,aAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAClD,YAAM,IAAI,OAAO,CAAC;AAElB,cAAQ,EAAE,MAAM;AAAA,QACf,KAAK;AACJ,eAAK,mBAAmB,KAAK,CAAC;AAC9B;AAAA,QACD,KAAK;AACJ,eAAK,uBAAuB,KAAK,CAAC;AAClC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;",
  "names": ["NotebookDiffViewEventType"]
}
