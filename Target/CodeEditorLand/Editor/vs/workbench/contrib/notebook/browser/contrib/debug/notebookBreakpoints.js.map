{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/debug/notebookBreakpoints.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../../../base/common/network.js\";\nimport { isEqual } from \"../../../../../../base/common/resources.js\";\nimport { Registry } from \"../../../../../../platform/registry/common/platform.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../../../common/contributions.js\";\nimport { IEditorService } from \"../../../../../services/editor/common/editorService.js\";\nimport { LifecyclePhase } from \"../../../../../services/lifecycle/common/lifecycle.js\";\nimport {\n\ttype IBreakpoint,\n\tIDebugService,\n} from \"../../../../debug/common/debug.js\";\nimport type { NotebookTextModel } from \"../../../common/model/notebookTextModel.js\";\nimport {\n\tCellUri,\n\tNotebookCellsChangeType,\n} from \"../../../common/notebookCommon.js\";\nimport { INotebookService } from \"../../../common/notebookService.js\";\nimport { getNotebookEditorFromEditorPane } from \"../../notebookBrowser.js\";\n\nclass NotebookBreakpoints extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INotebookService _notebookService: INotebookService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t\tsuper();\n\n\t\tconst listeners = new ResourceMap<IDisposable>();\n\t\tthis._register(\n\t\t\t_notebookService.onWillAddNotebookDocument((model) => {\n\t\t\t\tlisteners.set(\n\t\t\t\t\tmodel.uri,\n\t\t\t\t\tmodel.onWillAddRemoveCells((e) => {\n\t\t\t\t\t\t// When deleting a cell, remove its breakpoints\n\t\t\t\t\t\tconst debugModel = this._debugService.getModel();\n\t\t\t\t\t\tif (!debugModel.getBreakpoints().length) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\te.rawEvent.kind !==\n\t\t\t\t\t\t\tNotebookCellsChangeType.ModelChange\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const change of e.rawEvent.changes) {\n\t\t\t\t\t\t\tconst [start, deleteCount] = change;\n\t\t\t\t\t\t\tif (deleteCount > 0) {\n\t\t\t\t\t\t\t\tconst deleted = model.cells.slice(\n\t\t\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\t\t\tstart + deleteCount,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tfor (const deletedCell of deleted) {\n\t\t\t\t\t\t\t\t\tconst cellBps = debugModel.getBreakpoints({\n\t\t\t\t\t\t\t\t\t\turi: deletedCell.uri,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tcellBps.forEach((cellBp) =>\n\t\t\t\t\t\t\t\t\t\tthis._debugService.removeBreakpoints(\n\t\t\t\t\t\t\t\t\t\t\tcellBp.getId(),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\t_notebookService.onWillRemoveNotebookDocument((model) => {\n\t\t\t\tthis.updateBreakpoints(model);\n\t\t\t\tlisteners.get(model.uri)?.dispose();\n\t\t\t\tlisteners.delete(model.uri);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._debugService.getModel().onDidChangeBreakpoints((e) => {\n\t\t\t\tconst newCellBp = e?.added?.find(\n\t\t\t\t\t(bp) =>\n\t\t\t\t\t\t\"uri\" in bp &&\n\t\t\t\t\t\tbp.uri.scheme === Schemas.vscodeNotebookCell,\n\t\t\t\t) as IBreakpoint | undefined;\n\t\t\t\tif (newCellBp) {\n\t\t\t\t\tconst parsed = CellUri.parse(newCellBp.uri);\n\t\t\t\t\tif (!parsed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst editor = getNotebookEditorFromEditorPane(\n\t\t\t\t\t\tthis._editorService.activeEditorPane,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\t!editor ||\n\t\t\t\t\t\t!editor.hasModel() ||\n\t\t\t\t\t\teditor.textModel.uri.toString() !==\n\t\t\t\t\t\t\tparsed.notebook.toString()\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cell = editor.getCellByHandle(parsed.handle);\n\t\t\t\t\tif (!cell) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\teditor.focusElement(cell);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateBreakpoints(model: NotebookTextModel): void {\n\t\tconst bps = this._debugService.getModel().getBreakpoints();\n\t\tif (!bps.length || !model.cells.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst idxMap = new ResourceMap<number>();\n\t\tmodel.cells.forEach((cell, i) => {\n\t\t\tidxMap.set(cell.uri, i);\n\t\t});\n\n\t\tbps.forEach((bp) => {\n\t\t\tconst idx = idxMap.get(bp.uri);\n\t\t\tif (typeof idx !== \"number\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notebook = CellUri.parse(bp.uri)?.notebook;\n\t\t\tif (!notebook) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newUri = CellUri.generate(notebook, idx);\n\t\t\tif (isEqual(newUri, bp.uri)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._debugService.removeBreakpoints(bp.getId());\n\t\t\tthis._debugService.addBreakpoints(newUri, [\n\t\t\t\t{\n\t\t\t\t\tcolumn: bp.column,\n\t\t\t\t\tcondition: bp.condition,\n\t\t\t\t\tenabled: bp.enabled,\n\t\t\t\t\thitCondition: bp.hitCondition,\n\t\t\t\t\tlogMessage: bp.logMessage,\n\t\t\t\t\tlineNumber: bp.lineNumber,\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n).registerWorkbenchContribution(NotebookBreakpoints, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": []
}
