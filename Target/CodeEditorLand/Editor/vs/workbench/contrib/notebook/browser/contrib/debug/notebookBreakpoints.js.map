{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/debug/notebookBreakpoints.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../../../base/common/network.js\";\nimport { isEqual } from \"../../../../../../base/common/resources.js\";\nimport { Registry } from \"../../../../../../platform/registry/common/platform.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../../../common/contributions.js\";\nimport { IEditorService } from \"../../../../../services/editor/common/editorService.js\";\nimport { LifecyclePhase } from \"../../../../../services/lifecycle/common/lifecycle.js\";\nimport {\n\ttype IBreakpoint,\n\tIDebugService,\n} from \"../../../../debug/common/debug.js\";\nimport type { NotebookTextModel } from \"../../../common/model/notebookTextModel.js\";\nimport {\n\tCellUri,\n\tNotebookCellsChangeType,\n} from \"../../../common/notebookCommon.js\";\nimport { INotebookService } from \"../../../common/notebookService.js\";\nimport { getNotebookEditorFromEditorPane } from \"../../notebookBrowser.js\";\n\nclass NotebookBreakpoints extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INotebookService _notebookService: INotebookService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t\tsuper();\n\n\t\tconst listeners = new ResourceMap<IDisposable>();\n\t\tthis._register(_notebookService.onWillAddNotebookDocument(model => {\n\t\t\tlisteners.set(model.uri, model.onWillAddRemoveCells(e => {\n\t\t\t\t// When deleting a cell, remove its breakpoints\n\t\t\t\tconst debugModel = this._debugService.getModel();\n\t\t\t\tif (!debugModel.getBreakpoints().length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (e.rawEvent.kind !== NotebookCellsChangeType.ModelChange) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const change of e.rawEvent.changes) {\n\t\t\t\t\tconst [start, deleteCount] = change;\n\t\t\t\t\tif (deleteCount > 0) {\n\t\t\t\t\t\tconst deleted = model.cells.slice(start, start + deleteCount);\n\t\t\t\t\t\tfor (const deletedCell of deleted) {\n\t\t\t\t\t\t\tconst cellBps = debugModel.getBreakpoints({ uri: deletedCell.uri });\n\t\t\t\t\t\t\tcellBps.forEach(cellBp => this._debugService.removeBreakpoints(cellBp.getId()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}));\n\n\t\tthis._register(_notebookService.onWillRemoveNotebookDocument(model => {\n\t\t\tthis.updateBreakpoints(model);\n\t\t\tlisteners.get(model.uri)?.dispose();\n\t\t\tlisteners.delete(model.uri);\n\t\t}));\n\n\t\tthis._register(this._debugService.getModel().onDidChangeBreakpoints(e => {\n\t\t\tconst newCellBp = e?.added?.find(bp => 'uri' in bp && bp.uri.scheme === Schemas.vscodeNotebookCell) as IBreakpoint | undefined;\n\t\t\tif (newCellBp) {\n\t\t\t\tconst parsed = CellUri.parse(newCellBp.uri);\n\t\t\t\tif (!parsed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst editor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\t\t\tif (!editor || !editor.hasModel() || editor.textModel.uri.toString() !== parsed.notebook.toString()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\tconst cell = editor.getCellByHandle(parsed.handle);\n\t\t\t\tif (!cell) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\teditor.focusElement(cell);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateBreakpoints(model: NotebookTextModel): void {\n\t\tconst bps = this._debugService.getModel().getBreakpoints();\n\t\tif (!bps.length || !model.cells.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst idxMap = new ResourceMap<number>();\n\t\tmodel.cells.forEach((cell, i) => {\n\t\t\tidxMap.set(cell.uri, i);\n\t\t});\n\n\t\tbps.forEach((bp) => {\n\t\t\tconst idx = idxMap.get(bp.uri);\n\t\t\tif (typeof idx !== \"number\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notebook = CellUri.parse(bp.uri)?.notebook;\n\t\t\tif (!notebook) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newUri = CellUri.generate(notebook, idx);\n\t\t\tif (isEqual(newUri, bp.uri)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._debugService.removeBreakpoints(bp.getId());\n\t\t\tthis._debugService.addBreakpoints(newUri, [\n\t\t\t\t{\n\t\t\t\t\tcolumn: bp.column,\n\t\t\t\t\tcondition: bp.condition,\n\t\t\t\t\tenabled: bp.enabled,\n\t\t\t\t\thitCondition: bp.hitCondition,\n\t\t\t\t\tlogMessage: bp.logMessage,\n\t\t\t\t\tlineNumber: bp.lineNumber,\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n).registerWorkbenchContribution(NotebookBreakpoints, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": []
}
