var v=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=(a,i,r,o)=>{for(var e=o>1?void 0:o?h(i,r):i,n=a.length-1,t;n>=0;n--)(t=a[n])&&(e=(o?t(i,r,e):t(e))||e);return o&&e&&v(i,r,e),e},m=(a,i)=>(r,o)=>i(r,o,a);import{onUnexpectedError as y}from"../../../../../base/common/errors.js";import{Event as c}from"../../../../../base/common/event.js";import{Disposable as E}from"../../../../../base/common/lifecycle.js";import{localize as l}from"../../../../../nls.js";import{IInstantiationService as S}from"../../../../../platform/instantiation/common/instantiation.js";import{INotificationService as x,Severity as u}from"../../../../../platform/notification/common/notification.js";import{getInstalledExtensions as k}from"../../../extensions/common/extensionsUtils.js";import"../../common/notebookKeymapService.js";import{EnablementState as g,IWorkbenchExtensionEnablementService as b}from"../../../../services/extensionManagement/common/extensionManagement.js";import{ILifecycleService as K}from"../../../../services/lifecycle/common/lifecycle.js";import{IExtensionManagementService as M,InstallOperation as O}from"../../../../../platform/extensionManagement/common/extensionManagement.js";import{areSameExtensions as f}from"../../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{IStorageService as D,StorageScope as F,StorageTarget as w}from"../../../../../platform/storage/common/storage.js";import{Memento as P}from"../../../../common/memento.js";import{distinct as N}from"../../../../../base/common/arrays.js";function R(a){const i=a.get(M),r=a.get(b),o=c.chain(i.onDidInstallExtensions,e=>e.filter(n=>n.some(({operation:t})=>t===O.Install)).map(n=>n.map(({identifier:t})=>t)));return c.debounce(c.any(c.any(o,c.map(i.onDidUninstallExtension,e=>[e.identifier])),c.map(r.onEnablementChanged,e=>e.map(n=>n.identifier))),(e,n)=>{e=e||(n.length?[n[0]]:[]);for(const t of n)e.some(s=>!f(s,t))&&e.push(t);return e})}const j="hasRecommendedKeymap";let p=class extends E{constructor(r,o,e,n,t){super();this.instantiationService=r;this.extensionEnablementService=o;this.notificationService=e;this.notebookKeymapMemento=new P("notebookKeymap",n),this.notebookKeymap=this.notebookKeymapMemento.getMemento(F.PROFILE,w.USER),this._register(t.onDidShutdown(()=>this.dispose())),this._register(this.instantiationService.invokeFunction(R)(s=>{Promise.all(s.map(I=>this.checkForOtherKeymaps(I))).then(void 0,y)}))}_serviceBrand;notebookKeymapMemento;notebookKeymap;checkForOtherKeymaps(r){return this.instantiationService.invokeFunction(k).then(o=>{const e=o.filter(t=>C(t)),n=e.find(t=>f(t.identifier,r));if(n&&n.globallyEnabled){this.notebookKeymap[j]=!0,this.notebookKeymapMemento.saveMemento();const t=e.filter(s=>!f(s.identifier,r)&&s.globallyEnabled);if(t.length)return this.promptForDisablingOtherKeymaps(n,t)}})}promptForDisablingOtherKeymaps(r,o){const e=n=>{n&&this.extensionEnablementService.setEnablement(o.map(t=>t.local),g.DisabledGlobally)};this.notificationService.prompt(u.Info,l("disableOtherKeymapsConfirmation","Disable other keymaps ({0}) to avoid conflicts between keybindings?",N(o.map(n=>n.local.manifest.displayName)).map(n=>`'${n}'`).join(", ")),[{label:l("yes","Yes"),run:()=>e(!0)},{label:l("no","No"),run:()=>e(!1)}])}};p=d([m(0,S),m(1,b),m(2,x),m(3,D),m(4,K)],p);function C(a){if(a.local.manifest.extensionPack)return!1;const i=a.local.manifest.keywords;return i?i.indexOf("notebook-keymap")!==-1:!1}export{p as NotebookKeymapService,C as isNotebookKeymapExtension};
