{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookCellStatusBarServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { INotebookCellStatusBarService } from '../../common/notebookCellStatusBarService.js';\nimport { INotebookCellStatusBarItemList, INotebookCellStatusBarItemProvider } from '../../common/notebookCommon.js';\n\nexport class NotebookCellStatusBarService extends Disposable implements INotebookCellStatusBarService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeProviders = this._register(new Emitter<void>());\n\treadonly onDidChangeProviders: Event<void> = this._onDidChangeProviders.event;\n\n\tprivate readonly _onDidChangeItems = this._register(new Emitter<void>());\n\treadonly onDidChangeItems: Event<void> = this._onDidChangeItems.event;\n\n\tprivate readonly _providers: INotebookCellStatusBarItemProvider[] = [];\n\n\tregisterCellStatusBarItemProvider(provider: INotebookCellStatusBarItemProvider): IDisposable {\n\t\tthis._providers.push(provider);\n\t\tlet changeListener: IDisposable | undefined;\n\t\tif (provider.onDidChangeStatusBarItems) {\n\t\t\tchangeListener = provider.onDidChangeStatusBarItems(() => this._onDidChangeItems.fire());\n\t\t}\n\n\t\tthis._onDidChangeProviders.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\tchangeListener?.dispose();\n\t\t\tconst idx = this._providers.findIndex(p => p === provider);\n\t\t\tthis._providers.splice(idx, 1);\n\t\t});\n\t}\n\n\tasync getStatusBarItemsForCell(docUri: URI, cellIndex: number, viewType: string, token: CancellationToken): Promise<INotebookCellStatusBarItemList[]> {\n\t\tconst providers = this._providers.filter(p => p.viewType === viewType || p.viewType === '*');\n\t\treturn await Promise.all(providers.map(async p => {\n\t\t\ttry {\n\t\t\t\treturn await p.provideCellStatusBarItems(docUri, cellIndex, token) ?? { items: [] };\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedExternalError(e);\n\t\t\t\treturn { items: [] };\n\t\t\t}\n\t\t}));\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,iCAAiC;AAC1C,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,aAAa,oBAAoB;AACtD,SAAS,WAAW;AACpB,SAAS,qCAAqC;AAC9C,SAAS,gCAAgC,0CAA0C;AAE5E,MAAM,qCAAqC,WAAoD;AAAA,EAbtG,OAasG;AAAA;AAAA;AAAA,EAE5F;AAAA,EAEQ,wBAAwB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAClE,uBAAoC,KAAK,sBAAsB;AAAA,EAEvD,oBAAoB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC9D,mBAAgC,KAAK,kBAAkB;AAAA,EAE/C,aAAmD,CAAC;AAAA,EAErE,kCAAkC,UAA2D;AAC5F,SAAK,WAAW,KAAK,QAAQ;AAC7B,QAAI;AACJ,QAAI,SAAS,2BAA2B;AACvC,uBAAiB,SAAS,0BAA0B,MAAM,KAAK,kBAAkB,KAAK,CAAC;AAAA,IACxF;AAEA,SAAK,sBAAsB,KAAK;AAEhC,WAAO,aAAa,MAAM;AACzB,sBAAgB,QAAQ;AACxB,YAAM,MAAM,KAAK,WAAW,UAAU,OAAK,MAAM,QAAQ;AACzD,WAAK,WAAW,OAAO,KAAK,CAAC;AAAA,IAC9B,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,yBAAyB,QAAa,WAAmB,UAAkB,OAAqE;AACrJ,UAAM,YAAY,KAAK,WAAW,OAAO,OAAK,EAAE,aAAa,YAAY,EAAE,aAAa,GAAG;AAC3F,WAAO,MAAM,QAAQ,IAAI,UAAU,IAAI,OAAM,MAAK;AACjD,UAAI;AACH,eAAO,MAAM,EAAE,0BAA0B,QAAQ,WAAW,KAAK,KAAK,EAAE,OAAO,CAAC,EAAE;AAAA,MACnF,SAAS,GAAG;AACX,kCAA0B,CAAC;AAC3B,eAAO,EAAE,OAAO,CAAC,EAAE;AAAA,MACpB;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AACD;",
  "names": []
}
