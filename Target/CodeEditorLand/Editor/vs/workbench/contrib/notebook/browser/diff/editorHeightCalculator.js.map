{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/editorHeightCalculator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../../base/common/uri.js';\nimport { UnchangedRegion } from '../../../../../editor/browser/widget/diffEditor/diffEditorViewModel.js';\nimport { IEditorWorkerService } from '../../../../../editor/common/services/editorWorker.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { getEditorPadding } from './diffCellEditorOptions.js';\nimport { HeightOfHiddenLinesRegionInDiffEditor } from './diffElementViewModel.js';\n\nexport interface IDiffEditorHeightCalculatorService {\n\tdiffAndComputeHeight(original: URI, modified: URI): Promise<number>;\n\tcomputeHeightFromLines(lineCount: number): number;\n}\n\nexport class DiffEditorHeightCalculatorService {\n\tconstructor(\n\t\tprivate readonly lineHeight: number,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) { }\n\n\tpublic async diffAndComputeHeight(original: URI, modified: URI): Promise<number> {\n\t\tconst [originalModel, modifiedModel] = await Promise.all([this.textModelResolverService.createModelReference(original), this.textModelResolverService.createModelReference(modified)]);\n\t\ttry {\n\t\t\tconst diffChanges = await this.editorWorkerService.computeDiff(original, modified, {\n\t\t\t\tignoreTrimWhitespace: true,\n\t\t\t\tmaxComputationTimeMs: 0,\n\t\t\t\tcomputeMoves: false\n\t\t\t}, 'advanced').then(diff => diff?.changes || []);\n\n\t\t\tconst unchangedRegionFeatureEnabled = this.configurationService.getValue<boolean>('diffEditor.hideUnchangedRegions.enabled');\n\t\t\tconst minimumLineCount = this.configurationService.getValue<number>('diffEditor.hideUnchangedRegions.minimumLineCount');\n\t\t\tconst contextLineCount = this.configurationService.getValue<number>('diffEditor.hideUnchangedRegions.contextLineCount');\n\t\t\tconst originalLineCount = originalModel.object.textEditorModel.getLineCount();\n\t\t\tconst modifiedLineCount = modifiedModel.object.textEditorModel.getLineCount();\n\t\t\tconst unchanged = unchangedRegionFeatureEnabled ? UnchangedRegion.fromDiffs(diffChanges,\n\t\t\t\toriginalLineCount,\n\t\t\t\tmodifiedLineCount,\n\t\t\t\tminimumLineCount ?? 3,\n\t\t\t\tcontextLineCount ?? 3) : [];\n\n\t\t\tconst numberOfNewLines = diffChanges.reduce((prev, curr) => {\n\t\t\t\tif (curr.original.isEmpty && !curr.modified.isEmpty) {\n\t\t\t\t\treturn prev + curr.modified.length;\n\t\t\t\t}\n\t\t\t\tif (!curr.original.isEmpty && !curr.modified.isEmpty && curr.modified.length > curr.original.length) {\n\t\t\t\t\treturn prev + curr.modified.length - curr.original.length;\n\t\t\t\t}\n\t\t\t\treturn prev;\n\t\t\t}, 0);\n\t\t\tconst orginalNumberOfLines = originalModel.object.textEditorModel.getLineCount();\n\t\t\tconst numberOfHiddenLines = unchanged.reduce((prev, curr) => prev + curr.lineCount, 0);\n\t\t\tconst numberOfHiddenSections = unchanged.length;\n\t\t\tconst unchangeRegionsHeight = numberOfHiddenSections * HeightOfHiddenLinesRegionInDiffEditor;\n\t\t\tconst visibleLineCount = orginalNumberOfLines + numberOfNewLines - numberOfHiddenLines;\n\n\t\t\t// TODO: When we have a horizontal scrollbar, we need to add 12 to the height.\n\t\t\t// Right now there's no way to determine if a horizontal scrollbar is visible in the editor.\n\t\t\treturn (visibleLineCount * this.lineHeight) + getEditorPadding(visibleLineCount).top + getEditorPadding(visibleLineCount).bottom + unchangeRegionsHeight;\n\t\t} finally {\n\t\t\toriginalModel.dispose();\n\t\t\tmodifiedModel.dispose();\n\t\t}\n\t}\n\n\tpublic computeHeightFromLines(lineCount: number): number {\n\t\treturn lineCount * this.lineHeight + getEditorPadding(lineCount).top + getEditorPadding(lineCount).bottom;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,WAAW;AACpB,SAAS,uBAAuB;AAChC,SAAS,4BAA4B;AACrC,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,wBAAwB;AACjC,SAAS,6CAA6C;AAO/C,IAAM,oCAAN,MAAwC;AAAA,EAC9C,YACkB,YACmB,0BACG,qBACC,sBACvC;AAJgB;AACmB;AACG;AACC;AAAA,EACrC;AAAA,EAxBL,OAkB+C;AAAA;AAAA;AAAA,EAQ9C,MAAa,qBAAqB,UAAe,UAAgC;AAChF,UAAM,CAAC,eAAe,aAAa,IAAI,MAAM,QAAQ,IAAI,CAAC,KAAK,yBAAyB,qBAAqB,QAAQ,GAAG,KAAK,yBAAyB,qBAAqB,QAAQ,CAAC,CAAC;AACrL,QAAI;AACH,YAAM,cAAc,MAAM,KAAK,oBAAoB,YAAY,UAAU,UAAU;AAAA,QAClF,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,cAAc;AAAA,MACf,GAAG,UAAU,EAAE,KAAK,UAAQ,MAAM,WAAW,CAAC,CAAC;AAE/C,YAAM,gCAAgC,KAAK,qBAAqB,SAAkB,yCAAyC;AAC3H,YAAM,mBAAmB,KAAK,qBAAqB,SAAiB,kDAAkD;AACtH,YAAM,mBAAmB,KAAK,qBAAqB,SAAiB,kDAAkD;AACtH,YAAM,oBAAoB,cAAc,OAAO,gBAAgB,aAAa;AAC5E,YAAM,oBAAoB,cAAc,OAAO,gBAAgB,aAAa;AAC5E,YAAM,YAAY,gCAAgC,gBAAgB;AAAA,QAAU;AAAA,QAC3E;AAAA,QACA;AAAA,QACA,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,MAAC,IAAI,CAAC;AAE3B,YAAM,mBAAmB,YAAY,OAAO,CAAC,MAAM,SAAS;AAC3D,YAAI,KAAK,SAAS,WAAW,CAAC,KAAK,SAAS,SAAS;AACpD,iBAAO,OAAO,KAAK,SAAS;AAAA,QAC7B;AACA,YAAI,CAAC,KAAK,SAAS,WAAW,CAAC,KAAK,SAAS,WAAW,KAAK,SAAS,SAAS,KAAK,SAAS,QAAQ;AACpG,iBAAO,OAAO,KAAK,SAAS,SAAS,KAAK,SAAS;AAAA,QACpD;AACA,eAAO;AAAA,MACR,GAAG,CAAC;AACJ,YAAM,uBAAuB,cAAc,OAAO,gBAAgB,aAAa;AAC/E,YAAM,sBAAsB,UAAU,OAAO,CAAC,MAAM,SAAS,OAAO,KAAK,WAAW,CAAC;AACrF,YAAM,yBAAyB,UAAU;AACzC,YAAM,wBAAwB,yBAAyB;AACvD,YAAM,mBAAmB,uBAAuB,mBAAmB;AAInE,aAAQ,mBAAmB,KAAK,aAAc,iBAAiB,gBAAgB,EAAE,MAAM,iBAAiB,gBAAgB,EAAE,SAAS;AAAA,IACpI,UAAE;AACD,oBAAc,QAAQ;AACtB,oBAAc,QAAQ;AAAA,IACvB;AAAA,EACD;AAAA,EAEO,uBAAuB,WAA2B;AACxD,WAAO,YAAY,KAAK,aAAa,iBAAiB,SAAS,EAAE,MAAM,iBAAiB,SAAS,EAAE;AAAA,EACpG;AACD;AAvDa,oCAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,GALU;",
  "names": []
}
