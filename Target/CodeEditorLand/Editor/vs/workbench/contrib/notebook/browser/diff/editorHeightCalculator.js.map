{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/editorHeightCalculator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport { UnchangedRegion } from \"../../../../../editor/browser/widget/diffEditor/diffEditorViewModel.js\";\nimport { IEditorWorkerService } from \"../../../../../editor/common/services/editorWorker.js\";\nimport { ITextModelService } from \"../../../../../editor/common/services/resolverService.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { getEditorPadding } from \"./diffCellEditorOptions.js\";\nimport { HeightOfHiddenLinesRegionInDiffEditor } from \"./diffElementViewModel.js\";\n\nexport interface IDiffEditorHeightCalculatorService {\n\tdiffAndComputeHeight(original: URI, modified: URI): Promise<number>;\n\tcomputeHeightFromLines(lineCount: number): number;\n}\n\nexport class DiffEditorHeightCalculatorService {\n\tconstructor(\n\t\tprivate readonly lineHeight: number,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) { }\n\n\tpublic async diffAndComputeHeight(\n\t\toriginal: URI,\n\t\tmodified: URI,\n\t): Promise<number> {\n\t\tconst [originalModel, modifiedModel] = await Promise.all([\n\t\t\tthis.textModelResolverService.createModelReference(original),\n\t\t\tthis.textModelResolverService.createModelReference(modified),\n\t\t]);\n\t\ttry {\n\t\t\tconst diffChanges = await this.editorWorkerService\n\t\t\t\t.computeDiff(\n\t\t\t\t\toriginal,\n\t\t\t\t\tmodified,\n\t\t\t\t\t{\n\t\t\t\t\t\tignoreTrimWhitespace: true,\n\t\t\t\t\t\tmaxComputationTimeMs: 0,\n\t\t\t\t\t\tcomputeMoves: false,\n\t\t\t\t\t},\n\t\t\t\t\t\"advanced\",\n\t\t\t\t)\n\t\t\t\t.then((diff) => diff?.changes || []);\n\n\t\t\tconst unchangedRegionFeatureEnabled =\n\t\t\t\tthis.configurationService.getValue<boolean>(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.enabled\",\n\t\t\t\t);\n\t\t\tconst minimumLineCount = this.configurationService.getValue<number>(\n\t\t\t\t\"diffEditor.hideUnchangedRegions.minimumLineCount\",\n\t\t\t);\n\t\t\tconst contextLineCount = this.configurationService.getValue<number>(\n\t\t\t\t\"diffEditor.hideUnchangedRegions.contextLineCount\",\n\t\t\t);\n\t\t\tconst originalLineCount =\n\t\t\t\toriginalModel.object.textEditorModel.getLineCount();\n\t\t\tconst modifiedLineCount =\n\t\t\t\tmodifiedModel.object.textEditorModel.getLineCount();\n\t\t\tconst unchanged = unchangedRegionFeatureEnabled\n\t\t\t\t? UnchangedRegion.fromDiffs(\n\t\t\t\t\t\tdiffChanges,\n\t\t\t\t\t\toriginalLineCount,\n\t\t\t\t\t\tmodifiedLineCount,\n\t\t\t\t\t\tminimumLineCount ?? 3,\n\t\t\t\t\t\tcontextLineCount ?? 3,\n\t\t\t\t\t)\n\t\t\t\t: [];\n\n\t\t\tconst numberOfNewLines = diffChanges.reduce((prev, curr) => {\n\t\t\t\tif (curr.original.isEmpty && !curr.modified.isEmpty) {\n\t\t\t\t\treturn prev + curr.modified.length;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!curr.original.isEmpty &&\n\t\t\t\t\t!curr.modified.isEmpty &&\n\t\t\t\t\tcurr.modified.length > curr.original.length\n\t\t\t\t) {\n\t\t\t\t\treturn prev + curr.modified.length - curr.original.length;\n\t\t\t\t}\n\t\t\t\treturn prev;\n\t\t\t}, 0);\n\t\t\tconst orginalNumberOfLines =\n\t\t\t\toriginalModel.object.textEditorModel.getLineCount();\n\t\t\tconst numberOfHiddenLines = unchanged.reduce(\n\t\t\t\t(prev, curr) => prev + curr.lineCount,\n\t\t\t\t0,\n\t\t\t);\n\t\t\tconst numberOfHiddenSections = unchanged.length;\n\t\t\tconst unchangeRegionsHeight =\n\t\t\t\tnumberOfHiddenSections * HeightOfHiddenLinesRegionInDiffEditor;\n\t\t\tconst visibleLineCount =\n\t\t\t\torginalNumberOfLines + numberOfNewLines - numberOfHiddenLines;\n\n\t\t\t// TODO: When we have a horizontal scrollbar, we need to add 12 to the height.\n\t\t\t// Right now there's no way to determine if a horizontal scrollbar is visible in the editor.\n\t\t\treturn (\n\t\t\t\tvisibleLineCount * this.lineHeight +\n\t\t\t\tgetEditorPadding(visibleLineCount).top +\n\t\t\t\tgetEditorPadding(visibleLineCount).bottom +\n\t\t\t\tunchangeRegionsHeight\n\t\t\t);\n\t\t} finally {\n\t\t\toriginalModel.dispose();\n\t\t\tmodifiedModel.dispose();\n\t\t}\n\t}\n\n\tpublic computeHeightFromLines(lineCount: number): number {\n\t\treturn (\n\t\t\tlineCount * this.lineHeight +\n\t\t\tgetEditorPadding(lineCount).top +\n\t\t\tgetEditorPadding(lineCount).bottom\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,uBAAuB;AAChC,SAAS,4BAA4B;AACrC,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,wBAAwB;AACjC,SAAS,6CAA6C;AAO/C,IAAM,oCAAN,MAAwC;AAAA,EAC9C,YACkB,YACmB,0BACG,qBACC,sBACvC;AAJgB;AACmB;AACG;AACC;AAAA,EACrC;AAAA,EAxBL,OAkB+C;AAAA;AAAA;AAAA,EAQ9C,MAAa,qBACZ,UACA,UACkB;AAClB,UAAM,CAAC,eAAe,aAAa,IAAI,MAAM,QAAQ,IAAI;AAAA,MACxD,KAAK,yBAAyB,qBAAqB,QAAQ;AAAA,MAC3D,KAAK,yBAAyB,qBAAqB,QAAQ;AAAA,IAC5D,CAAC;AACD,QAAI;AACH,YAAM,cAAc,MAAM,KAAK,oBAC7B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,UACC,sBAAsB;AAAA,UACtB,sBAAsB;AAAA,UACtB,cAAc;AAAA,QACf;AAAA,QACA;AAAA,MACD,EACC,KAAK,CAAC,SAAS,MAAM,WAAW,CAAC,CAAC;AAEpC,YAAM,gCACL,KAAK,qBAAqB;AAAA,QACzB;AAAA,MACD;AACD,YAAM,mBAAmB,KAAK,qBAAqB;AAAA,QAClD;AAAA,MACD;AACA,YAAM,mBAAmB,KAAK,qBAAqB;AAAA,QAClD;AAAA,MACD;AACA,YAAM,oBACL,cAAc,OAAO,gBAAgB,aAAa;AACnD,YAAM,oBACL,cAAc,OAAO,gBAAgB,aAAa;AACnD,YAAM,YAAY,gCACf,gBAAgB;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,QACA,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,MACrB,IACC,CAAC;AAEJ,YAAM,mBAAmB,YAAY,OAAO,CAAC,MAAM,SAAS;AAC3D,YAAI,KAAK,SAAS,WAAW,CAAC,KAAK,SAAS,SAAS;AACpD,iBAAO,OAAO,KAAK,SAAS;AAAA,QAC7B;AACA,YACC,CAAC,KAAK,SAAS,WACf,CAAC,KAAK,SAAS,WACf,KAAK,SAAS,SAAS,KAAK,SAAS,QACpC;AACD,iBAAO,OAAO,KAAK,SAAS,SAAS,KAAK,SAAS;AAAA,QACpD;AACA,eAAO;AAAA,MACR,GAAG,CAAC;AACJ,YAAM,uBACL,cAAc,OAAO,gBAAgB,aAAa;AACnD,YAAM,sBAAsB,UAAU;AAAA,QACrC,CAAC,MAAM,SAAS,OAAO,KAAK;AAAA,QAC5B;AAAA,MACD;AACA,YAAM,yBAAyB,UAAU;AACzC,YAAM,wBACL,yBAAyB;AAC1B,YAAM,mBACL,uBAAuB,mBAAmB;AAI3C,aACC,mBAAmB,KAAK,aACxB,iBAAiB,gBAAgB,EAAE,MACnC,iBAAiB,gBAAgB,EAAE,SACnC;AAAA,IAEF,UAAE;AACD,oBAAc,QAAQ;AACtB,oBAAc,QAAQ;AAAA,IACvB;AAAA,EACD;AAAA,EAEO,uBAAuB,WAA2B;AACxD,WACC,YAAY,KAAK,aACjB,iBAAiB,SAAS,EAAE,MAC5B,iBAAiB,SAAS,EAAE;AAAA,EAE9B;AACD;AApGa,oCAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,GALU;",
  "names": []
}
