{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/find/findModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findFirstIdxMonotonousOrArrLen } from \"../../../../../../base/common/arraysFind.js\";\nimport {\n\ttype CancelablePromise,\n\tDelayer,\n\tcreateCancelablePromise,\n} from \"../../../../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../../../../base/common/cancellation.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../../../base/common/lifecycle.js\";\nimport { Range } from \"../../../../../../editor/common/core/range.js\";\nimport type { FindMatch } from \"../../../../../../editor/common/model.js\";\nimport { PrefixSumComputer } from \"../../../../../../editor/common/model/prefixSumComputer.js\";\nimport type {\n\tFindReplaceState,\n\tFindReplaceStateChangedEvent,\n} from \"../../../../../../editor/contrib/find/browser/findState.js\";\nimport { IConfigurationService } from \"../../../../../../platform/configuration/common/configuration.js\";\nimport type { NotebookTextModel } from \"../../../common/model/notebookTextModel.js\";\nimport {\n\tCellKind,\n\ttype INotebookFindOptions,\n\tNotebookCellsChangeType,\n} from \"../../../common/notebookCommon.js\";\nimport {\n\tCellEditState,\n\ttype CellFindMatchWithIndex,\n\ttype CellWebviewFindMatch,\n\ttype ICellViewModel,\n\ttype INotebookEditor,\n} from \"../../notebookBrowser.js\";\nimport type { NotebookViewModel } from \"../../viewModel/notebookViewModelImpl.js\";\nimport type { NotebookFindFilters } from \"./findFilters.js\";\nimport { FindMatchDecorationModel } from \"./findMatchDecorationModel.js\";\n\nexport class CellFindMatchModel implements CellFindMatchWithIndex {\n\treadonly cell: ICellViewModel;\n\treadonly index: number;\n\tprivate _contentMatches: FindMatch[];\n\tprivate _webviewMatches: CellWebviewFindMatch[];\n\tget length() {\n\t\treturn this._contentMatches.length + this._webviewMatches.length;\n\t}\n\n\tget contentMatches(): FindMatch[] {\n\t\treturn this._contentMatches;\n\t}\n\n\tget webviewMatches(): CellWebviewFindMatch[] {\n\t\treturn this._webviewMatches;\n\t}\n\n\tconstructor(\n\t\tcell: ICellViewModel,\n\t\tindex: number,\n\t\tcontentMatches: FindMatch[],\n\t\twebviewMatches: CellWebviewFindMatch[],\n\t) {\n\t\tthis.cell = cell;\n\t\tthis.index = index;\n\t\tthis._contentMatches = contentMatches;\n\t\tthis._webviewMatches = webviewMatches;\n\t}\n\n\tgetMatch(index: number) {\n\t\tif (index >= this.length) {\n\t\t\tthrow new Error(\"NotebookCellFindMatch: index out of range\");\n\t\t}\n\n\t\tif (index < this._contentMatches.length) {\n\t\t\treturn this._contentMatches[index];\n\t\t}\n\n\t\treturn this._webviewMatches[index - this._contentMatches.length];\n\t}\n}\n\nexport class FindModel extends Disposable {\n\tprivate _findMatches: CellFindMatchWithIndex[] = [];\n\tprotected _findMatchesStarts: PrefixSumComputer | null = null;\n\tprivate _currentMatch = -1;\n\n\tprivate readonly _throttledDelayer: Delayer<void>;\n\tprivate _computePromise: CancelablePromise<\n\t\tCellFindMatchWithIndex[] | null\n\t> | null = null;\n\tprivate readonly _modelDisposable = this._register(new DisposableStore());\n\tprivate _findMatchDecorationModel: FindMatchDecorationModel;\n\n\tget findMatches() {\n\t\treturn this._findMatches;\n\t}\n\n\tget currentMatch() {\n\t\treturn this._currentMatch;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\tprivate readonly _state: FindReplaceState<NotebookFindFilters>,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._throttledDelayer = new Delayer(20);\n\t\tthis._computePromise = null;\n\n\t\tthis._register(\n\t\t\t_state.onFindReplaceStateChange((e) => {\n\t\t\t\tthis._updateCellStates(e);\n\n\t\t\t\tif (\n\t\t\t\t\te.searchString ||\n\t\t\t\t\te.isRegex ||\n\t\t\t\t\te.matchCase ||\n\t\t\t\t\te.searchScope ||\n\t\t\t\t\te.wholeWord ||\n\t\t\t\t\t(e.isRevealed && this._state.isRevealed) ||\n\t\t\t\t\te.filters ||\n\t\t\t\t\te.isReplaceRevealed\n\t\t\t\t) {\n\t\t\t\t\tthis.research();\n\t\t\t\t}\n\n\t\t\t\tif (e.isRevealed && !this._state.isRevealed) {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._notebookEditor.onDidChangeModel((e) => {\n\t\t\t\tthis._registerModelListener(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._notebookEditor.onDidChangeCellState((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.cell.cellKind === CellKind.Markup &&\n\t\t\t\t\te.source.editStateChanged\n\t\t\t\t) {\n\t\t\t\t\t// research when markdown cell is switching between markdown preview and editing mode.\n\t\t\t\t\tthis.research();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (this._notebookEditor.hasModel()) {\n\t\t\tthis._registerModelListener(this._notebookEditor.textModel);\n\t\t}\n\n\t\tthis._findMatchDecorationModel = new FindMatchDecorationModel(\n\t\t\tthis._notebookEditor,\n\t\t\tthis._notebookEditor.getId(),\n\t\t);\n\t}\n\n\tprivate _updateCellStates(e: FindReplaceStateChangedEvent) {\n\t\tif (\n\t\t\t!this._state.filters?.markupInput ||\n\t\t\t!this._state.filters?.markupPreview ||\n\t\t\t!this._state.filters?.findScope\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// we only update cell state if users are using the hybrid mode (both input and preview are enabled)\n\t\tconst updateEditingState = () => {\n\t\t\tconst viewModel = this._notebookEditor.getViewModel() as\n\t\t\t\t| NotebookViewModel\n\t\t\t\t| undefined;\n\t\t\tif (!viewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// search markup sources first to decide if a markup cell should be in editing mode\n\t\t\tconst wordSeparators = this._configurationService.inspect<string>(\n\t\t\t\t\"editor.wordSeparators\",\n\t\t\t).value;\n\t\t\tconst options: INotebookFindOptions = {\n\t\t\t\tregex: this._state.isRegex,\n\t\t\t\twholeWord: this._state.wholeWord,\n\t\t\t\tcaseSensitive: this._state.matchCase,\n\t\t\t\twordSeparators: wordSeparators,\n\t\t\t\tincludeMarkupInput: true,\n\t\t\t\tincludeCodeInput: false,\n\t\t\t\tincludeMarkupPreview: false,\n\t\t\t\tincludeOutput: false,\n\t\t\t\tfindScope: this._state.filters?.findScope,\n\t\t\t};\n\n\t\t\tconst contentMatches = viewModel.find(\n\t\t\t\tthis._state.searchString,\n\t\t\t\toptions,\n\t\t\t);\n\t\t\tfor (let i = 0; i < viewModel.length; i++) {\n\t\t\t\tconst cell = viewModel.cellAt(i);\n\t\t\t\tif (cell && cell.cellKind === CellKind.Markup) {\n\t\t\t\t\tconst foundContentMatch = contentMatches.find(\n\t\t\t\t\t\t(m) =>\n\t\t\t\t\t\t\tm.cell.handle === cell.handle &&\n\t\t\t\t\t\t\tm.contentMatches.length > 0,\n\t\t\t\t\t);\n\t\t\t\t\tconst targetState = foundContentMatch\n\t\t\t\t\t\t? CellEditState.Editing\n\t\t\t\t\t\t: CellEditState.Preview;\n\t\t\t\t\tconst currentEditingState = cell.getEditState();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tcurrentEditingState === CellEditState.Editing &&\n\t\t\t\t\t\tcell.editStateSource !== \"find\"\n\t\t\t\t\t) {\n\t\t\t\t\t\t// it's already in editing mode, we should not update\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentEditingState !== targetState) {\n\t\t\t\t\t\tcell.updateEditState(targetState, \"find\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (e.isReplaceRevealed && !this._state.isReplaceRevealed) {\n\t\t\t// replace is hidden, we need to switch all markdown cells to preview mode\n\t\t\tconst viewModel = this._notebookEditor.getViewModel() as\n\t\t\t\t| NotebookViewModel\n\t\t\t\t| undefined;\n\t\t\tif (!viewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < viewModel.length; i++) {\n\t\t\t\tconst cell = viewModel.cellAt(i);\n\t\t\t\tif (cell && cell.cellKind === CellKind.Markup) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcell.getEditState() === CellEditState.Editing &&\n\t\t\t\t\t\tcell.editStateSource === \"find\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tcell.updateEditState(CellEditState.Preview, \"find\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.isReplaceRevealed) {\n\t\t\tupdateEditingState();\n\t\t} else if (\n\t\t\t(e.filters || e.isRevealed || e.searchString || e.replaceString) &&\n\t\t\tthis._state.isRevealed &&\n\t\t\tthis._state.isReplaceRevealed\n\t\t) {\n\t\t\tupdateEditingState();\n\t\t}\n\t}\n\n\tensureFindMatches() {\n\t\tif (!this._findMatchesStarts) {\n\t\t\tthis.set(this._findMatches, true);\n\t\t}\n\t}\n\n\tgetCurrentMatch() {\n\t\tconst nextIndex = this._findMatchesStarts!.getIndexOf(\n\t\t\tthis._currentMatch,\n\t\t);\n\t\tconst cell = this._findMatches[nextIndex.index].cell;\n\t\tconst match = this._findMatches[nextIndex.index].getMatch(\n\t\t\tnextIndex.remainder,\n\t\t);\n\n\t\treturn {\n\t\t\tcell,\n\t\t\tmatch,\n\t\t\tisModelMatch:\n\t\t\t\tnextIndex.remainder <\n\t\t\t\tthis._findMatches[nextIndex.index].contentMatches.length,\n\t\t};\n\t}\n\n\trefreshCurrentMatch(focus: { cell: ICellViewModel; range: Range }) {\n\t\tconst findMatchIndex = this.findMatches.findIndex(\n\t\t\t(match) => match.cell === focus.cell,\n\t\t);\n\n\t\tif (findMatchIndex === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findMatch = this.findMatches[findMatchIndex];\n\t\tconst index = findMatch.contentMatches.findIndex(\n\t\t\t(match) => match.range.intersectRanges(focus.range) !== null,\n\t\t);\n\n\t\tif (index === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst matchesBefore =\n\t\t\tfindMatchIndex === 0\n\t\t\t\t? 0\n\t\t\t\t: (this._findMatchesStarts?.getPrefixSum(findMatchIndex - 1) ??\n\t\t\t\t\t0);\n\t\tthis._currentMatch = matchesBefore + index;\n\n\t\tthis.highlightCurrentFindMatchDecoration(findMatchIndex, index).then(\n\t\t\t(offset) => {\n\t\t\t\tthis.revealCellRange(findMatchIndex, index, offset);\n\n\t\t\t\tthis._state.changeMatchInfo(\n\t\t\t\t\tthis._currentMatch,\n\t\t\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\t\t\tundefined,\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\t}\n\n\tfind(option: { previous: boolean } | { index: number }) {\n\t\tif (!this.findMatches.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// let currCell;\n\t\tif (this._findMatchesStarts) {\n\t\t\t// const currIndex = this._findMatchesStarts!.getIndexOf(this._currentMatch);\n\t\t\t// currCell = this._findMatches[currIndex.index].cell;\n\t\t\tconst totalVal = this._findMatchesStarts.getTotalSum();\n\t\t\tif (\"index\" in option) {\n\t\t\t\tthis._currentMatch = option.index;\n\t\t\t} else if (this._currentMatch === -1) {\n\t\t\t\tthis._currentMatch = option.previous ? totalVal - 1 : 0;\n\t\t\t} else {\n\t\t\t\tconst nextVal =\n\t\t\t\t\t(this._currentMatch +\n\t\t\t\t\t\t(option.previous ? -1 : 1) +\n\t\t\t\t\t\ttotalVal) %\n\t\t\t\t\ttotalVal;\n\t\t\t\tthis._currentMatch = nextVal;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set(this._findMatches, true);\n\t\t\tif (\"index\" in option) {\n\t\t\t\tthis._currentMatch = option.index;\n\t\t\t}\n\t\t}\n\n\t\tconst nextIndex = this._findMatchesStarts!.getIndexOf(\n\t\t\tthis._currentMatch,\n\t\t);\n\t\t// const newFocusedCell = this._findMatches[nextIndex.index].cell;\n\t\tthis.highlightCurrentFindMatchDecoration(\n\t\t\tnextIndex.index,\n\t\t\tnextIndex.remainder,\n\t\t).then((offset) => {\n\t\t\tthis.revealCellRange(nextIndex.index, nextIndex.remainder, offset);\n\n\t\t\tthis._state.changeMatchInfo(\n\t\t\t\tthis._currentMatch,\n\t\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\t\tundefined,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate revealCellRange(\n\t\tcellIndex: number,\n\t\tmatchIndex: number,\n\t\toutputOffset: number | null,\n\t) {\n\t\tconst findMatch = this._findMatches[cellIndex];\n\t\tif (matchIndex >= findMatch.contentMatches.length) {\n\t\t\t// reveal output range\n\t\t\tthis._notebookEditor.focusElement(findMatch.cell);\n\t\t\tconst index = this._notebookEditor.getCellIndex(findMatch.cell);\n\t\t\tif (index !== undefined) {\n\t\t\t\t// const range: ICellRange = { start: index, end: index + 1 };\n\t\t\t\tthis._notebookEditor.revealCellOffsetInCenter(\n\t\t\t\t\tfindMatch.cell,\n\t\t\t\t\toutputOffset ?? 0,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst match = findMatch.getMatch(matchIndex) as FindMatch;\n\t\t\tif (findMatch.cell.getEditState() !== CellEditState.Editing) {\n\t\t\t\tfindMatch.cell.updateEditState(CellEditState.Editing, \"find\");\n\t\t\t}\n\t\t\tfindMatch.cell.isInputCollapsed = false;\n\t\t\tthis._notebookEditor.focusElement(findMatch.cell);\n\t\t\tthis._notebookEditor.setCellEditorSelection(\n\t\t\t\tfindMatch.cell,\n\t\t\t\tmatch.range,\n\t\t\t);\n\t\t\tthis._notebookEditor.revealRangeInCenterIfOutsideViewportAsync(\n\t\t\t\tfindMatch.cell,\n\t\t\t\tmatch.range,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _registerModelListener(notebookTextModel?: NotebookTextModel) {\n\t\tthis._modelDisposable.clear();\n\n\t\tif (notebookTextModel) {\n\t\t\tthis._modelDisposable.add(\n\t\t\t\tnotebookTextModel.onDidChangeContent((e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!e.rawEvents.some(\n\t\t\t\t\t\t\t(event) =>\n\t\t\t\t\t\t\t\tevent.kind ===\n\t\t\t\t\t\t\t\t\tNotebookCellsChangeType.ChangeCellContent ||\n\t\t\t\t\t\t\t\tevent.kind ===\n\t\t\t\t\t\t\t\t\tNotebookCellsChangeType.ModelChange,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.research();\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis.research();\n\t}\n\n\tasync research() {\n\t\treturn this._throttledDelayer.trigger(async () => {\n\t\t\tthis._state.change({ isSearching: true }, false);\n\t\t\tawait this._research();\n\t\t\tthis._state.change({ isSearching: false }, false);\n\t\t});\n\t}\n\n\tasync _research() {\n\t\tthis._computePromise?.cancel();\n\n\t\tif (!this._state.isRevealed || !this._notebookEditor.hasModel()) {\n\t\t\tthis.set([], false);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._computePromise = createCancelablePromise((token) =>\n\t\t\tthis._compute(token),\n\t\t);\n\n\t\tconst findMatches = await this._computePromise;\n\t\tif (!findMatches) {\n\t\t\tthis.set([], false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (findMatches.length === 0) {\n\t\t\tthis.set([], false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst findFirstMatchAfterCellIndex = (cellIndex: number) => {\n\t\t\tconst matchAfterSelection = findFirstIdxMonotonousOrArrLen(\n\t\t\t\tfindMatches.map((match) => match.index),\n\t\t\t\t(index) => index >= cellIndex,\n\t\t\t);\n\t\t\tthis._updateCurrentMatch(\n\t\t\t\tfindMatches,\n\t\t\t\tthis._matchesCountBeforeIndex(findMatches, matchAfterSelection),\n\t\t\t);\n\t\t};\n\n\t\tif (this._currentMatch === -1) {\n\t\t\t// no active current match\n\t\t\tif (this._notebookEditor.getLength() === 0) {\n\t\t\t\tthis.set(findMatches, false);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconst focus = this._notebookEditor.getFocus().start;\n\t\t\t\tfindFirstMatchAfterCellIndex(focus);\n\t\t\t\tthis.set(findMatches, false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst oldCurrIndex = this._findMatchesStarts!.getIndexOf(\n\t\t\tthis._currentMatch,\n\t\t);\n\t\tconst oldCurrCell = this._findMatches[oldCurrIndex.index].cell;\n\t\tconst oldCurrMatchCellIndex =\n\t\t\tthis._notebookEditor.getCellIndex(oldCurrCell);\n\n\t\tif (oldCurrMatchCellIndex < 0) {\n\t\t\t// the cell containing the active match is deleted\n\t\t\tif (this._notebookEditor.getLength() === 0) {\n\t\t\t\tthis.set(findMatches, false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\treturn;\n\t\t}\n\n\t\t// the cell still exist\n\t\tconst cell = this._notebookEditor.cellAt(oldCurrMatchCellIndex);\n\t\t// we will try restore the active find match in this cell, if it contains any find match\n\n\t\tif (\n\t\t\tcell.cellKind === CellKind.Markup &&\n\t\t\tcell.getEditState() === CellEditState.Preview\n\t\t) {\n\t\t\t// find first match in this cell or below\n\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\treturn;\n\t\t}\n\n\t\t// the cell is a markup cell in editing mode or a code cell, both should have monaco editor rendered\n\n\t\tif (!this._findMatchDecorationModel.currentMatchDecorations) {\n\t\t\t// no current highlight decoration\n\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\treturn;\n\t\t}\n\n\t\t// check if there is monaco editor selection and find the first match, otherwise find the first match above current cell\n\t\t// this._findMatches[cellIndex].matches[matchIndex].range\n\t\tif (\n\t\t\tthis._findMatchDecorationModel.currentMatchDecorations.kind ===\n\t\t\t\"input\"\n\t\t) {\n\t\t\tconst currentMatchDecorationId =\n\t\t\t\tthis._findMatchDecorationModel.currentMatchDecorations.decorations.find(\n\t\t\t\t\t(decoration) => decoration.ownerId === cell.handle,\n\t\t\t\t);\n\n\t\t\tif (!currentMatchDecorationId) {\n\t\t\t\t// current match decoration is no longer valid\n\t\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchAfterSelection =\n\t\t\t\tfindFirstIdxMonotonousOrArrLen(\n\t\t\t\t\tfindMatches,\n\t\t\t\t\t(match) => match.index >= oldCurrMatchCellIndex,\n\t\t\t\t) % findMatches.length;\n\t\t\tif (\n\t\t\t\tfindMatches[matchAfterSelection].index > oldCurrMatchCellIndex\n\t\t\t) {\n\t\t\t\t// there is no search result in curr cell anymore, find the nearest one (from top to bottom)\n\t\t\t\tthis._updateCurrentMatch(\n\t\t\t\t\tfindMatches,\n\t\t\t\t\tthis._matchesCountBeforeIndex(\n\t\t\t\t\t\tfindMatches,\n\t\t\t\t\t\tmatchAfterSelection,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// there are still some search results in current cell\n\t\t\t\tlet currMatchRangeInEditor =\n\t\t\t\t\tcell.editorAttached &&\n\t\t\t\t\tcurrentMatchDecorationId.decorations[0]\n\t\t\t\t\t\t? cell.getCellDecorationRange(\n\t\t\t\t\t\t\t\tcurrentMatchDecorationId.decorations[0],\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: null;\n\n\t\t\t\tif (\n\t\t\t\t\tcurrMatchRangeInEditor === null &&\n\t\t\t\t\toldCurrIndex.remainder <\n\t\t\t\t\t\tthis._findMatches[oldCurrIndex.index].contentMatches\n\t\t\t\t\t\t\t.length\n\t\t\t\t) {\n\t\t\t\t\tcurrMatchRangeInEditor = (\n\t\t\t\t\t\tthis._findMatches[oldCurrIndex.index].getMatch(\n\t\t\t\t\t\t\toldCurrIndex.remainder,\n\t\t\t\t\t\t) as FindMatch\n\t\t\t\t\t).range;\n\t\t\t\t}\n\n\t\t\t\tif (currMatchRangeInEditor !== null) {\n\t\t\t\t\t// we find a range for the previous current match, let's find the nearest one after it (can overlap)\n\t\t\t\t\tconst cellMatch = findMatches[matchAfterSelection];\n\t\t\t\t\tconst matchAfterOldSelection =\n\t\t\t\t\t\tfindFirstIdxMonotonousOrArrLen(\n\t\t\t\t\t\t\tcellMatch.contentMatches,\n\t\t\t\t\t\t\t(match) =>\n\t\t\t\t\t\t\t\tRange.compareRangesUsingStarts(\n\t\t\t\t\t\t\t\t\t(match as FindMatch).range,\n\t\t\t\t\t\t\t\t\tcurrMatchRangeInEditor,\n\t\t\t\t\t\t\t\t) >= 0,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._updateCurrentMatch(\n\t\t\t\t\t\tfindMatches,\n\t\t\t\t\t\tthis._matchesCountBeforeIndex(\n\t\t\t\t\t\t\tfindMatches,\n\t\t\t\t\t\t\tmatchAfterSelection,\n\t\t\t\t\t\t) + matchAfterOldSelection,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// no range found, let's fall back to finding the nearest match\n\t\t\t\t\tthis._updateCurrentMatch(\n\t\t\t\t\t\tfindMatches,\n\t\t\t\t\t\tthis._matchesCountBeforeIndex(\n\t\t\t\t\t\t\tfindMatches,\n\t\t\t\t\t\t\tmatchAfterSelection,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// output now has the highlight\n\t\t\tconst matchAfterSelection =\n\t\t\t\tfindFirstIdxMonotonousOrArrLen(\n\t\t\t\t\tfindMatches.map((match) => match.index),\n\t\t\t\t\t(index) => index >= oldCurrMatchCellIndex,\n\t\t\t\t) % findMatches.length;\n\t\t\tthis._updateCurrentMatch(\n\t\t\t\tfindMatches,\n\t\t\t\tthis._matchesCountBeforeIndex(findMatches, matchAfterSelection),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate set(\n\t\tcellFindMatches: CellFindMatchWithIndex[] | null,\n\t\tautoStart: boolean,\n\t): void {\n\t\tif (!cellFindMatches || !cellFindMatches.length) {\n\t\t\tthis._findMatches = [];\n\t\t\tthis._findMatchDecorationModel.setAllFindMatchesDecorations([]);\n\n\t\t\tthis.constructFindMatchesStarts();\n\t\t\tthis._currentMatch = -1;\n\t\t\tthis._findMatchDecorationModel.clearCurrentFindMatchDecoration();\n\n\t\t\tthis._state.changeMatchInfo(\n\t\t\t\tthis._currentMatch,\n\t\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\t\tundefined,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// all matches\n\t\tthis._findMatches = cellFindMatches;\n\t\tthis._findMatchDecorationModel.setAllFindMatchesDecorations(\n\t\t\tcellFindMatches || [],\n\t\t);\n\n\t\t// current match\n\t\tthis.constructFindMatchesStarts();\n\n\t\tif (autoStart) {\n\t\t\tthis._currentMatch = 0;\n\t\t\tthis.highlightCurrentFindMatchDecoration(0, 0);\n\t\t}\n\n\t\tthis._state.changeMatchInfo(\n\t\t\tthis._currentMatch,\n\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tprivate async _compute(\n\t\ttoken: CancellationToken,\n\t): Promise<CellFindMatchWithIndex[] | null> {\n\t\tif (!this._notebookEditor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet ret: CellFindMatchWithIndex[] | null = null;\n\t\tconst val = this._state.searchString;\n\t\tconst wordSeparators = this._configurationService.inspect<string>(\n\t\t\t\"editor.wordSeparators\",\n\t\t).value;\n\n\t\tconst options: INotebookFindOptions = {\n\t\t\tregex: this._state.isRegex,\n\t\t\twholeWord: this._state.wholeWord,\n\t\t\tcaseSensitive: this._state.matchCase,\n\t\t\twordSeparators: wordSeparators,\n\t\t\tincludeMarkupInput: this._state.filters?.markupInput ?? true,\n\t\t\tincludeCodeInput: this._state.filters?.codeInput ?? true,\n\t\t\tincludeMarkupPreview: !!this._state.filters?.markupPreview,\n\t\t\tincludeOutput: !!this._state.filters?.codeOutput,\n\t\t\tfindScope: this._state.filters?.findScope,\n\t\t};\n\n\t\tret = await this._notebookEditor.find(val, options, token);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tprivate _updateCurrentMatch(\n\t\tfindMatches: CellFindMatchWithIndex[],\n\t\tcurrentMatchesPosition: number,\n\t) {\n\t\tthis._currentMatch = currentMatchesPosition % findMatches.length;\n\t\tthis.set(findMatches, false);\n\t\tconst nextIndex = this._findMatchesStarts!.getIndexOf(\n\t\t\tthis._currentMatch,\n\t\t);\n\t\tthis.highlightCurrentFindMatchDecoration(\n\t\t\tnextIndex.index,\n\t\t\tnextIndex.remainder,\n\t\t);\n\n\t\tthis._state.changeMatchInfo(\n\t\t\tthis._currentMatch,\n\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tprivate _matchesCountBeforeIndex(\n\t\tfindMatches: CellFindMatchWithIndex[],\n\t\tindex: number,\n\t) {\n\t\tlet prevMatchesCount = 0;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tprevMatchesCount += findMatches[i].length;\n\t\t}\n\n\t\treturn prevMatchesCount;\n\t}\n\n\tprivate constructFindMatchesStarts() {\n\t\tif (this._findMatches && this._findMatches.length) {\n\t\t\tconst values = new Uint32Array(this._findMatches.length);\n\t\t\tfor (let i = 0; i < this._findMatches.length; i++) {\n\t\t\t\tvalues[i] = this._findMatches[i].length;\n\t\t\t}\n\n\t\t\tthis._findMatchesStarts = new PrefixSumComputer(values);\n\t\t} else {\n\t\t\tthis._findMatchesStarts = null;\n\t\t}\n\t}\n\n\tprivate async highlightCurrentFindMatchDecoration(\n\t\tcellIndex: number,\n\t\tmatchIndex: number,\n\t): Promise<number | null> {\n\t\tconst cell = this._findMatches[cellIndex].cell;\n\t\tconst match = this._findMatches[cellIndex].getMatch(matchIndex);\n\n\t\tif (matchIndex < this._findMatches[cellIndex].contentMatches.length) {\n\t\t\treturn this._findMatchDecorationModel.highlightCurrentFindMatchDecorationInCell(\n\t\t\t\tcell,\n\t\t\t\t(match as FindMatch).range,\n\t\t\t);\n\t\t} else {\n\t\t\treturn this._findMatchDecorationModel.highlightCurrentFindMatchDecorationInWebview(\n\t\t\t\tcell,\n\t\t\t\t(match as CellWebviewFindMatch).index,\n\t\t\t);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._computePromise?.cancel();\n\t\tthis._throttledDelayer.cancel();\n\t\tthis.set([], false);\n\t}\n\n\toverride dispose() {\n\t\tthis._findMatchDecorationModel.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
