{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/find/findModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findFirstIdxMonotonousOrArrLen } from '../../../../../../base/common/arraysFind.js';\nimport { CancelablePromise, createCancelablePromise, Delayer } from '../../../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../../../base/common/cancellation.js';\nimport { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { Range } from '../../../../../../editor/common/core/range.js';\nimport { FindMatch } from '../../../../../../editor/common/model.js';\nimport { PrefixSumComputer } from '../../../../../../editor/common/model/prefixSumComputer.js';\nimport { FindReplaceState, FindReplaceStateChangedEvent } from '../../../../../../editor/contrib/find/browser/findState.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { NotebookFindFilters } from './findFilters.js';\nimport { FindMatchDecorationModel } from './findMatchDecorationModel.js';\nimport { CellEditState, CellFindMatchWithIndex, CellWebviewFindMatch, ICellViewModel, INotebookEditor } from '../../notebookBrowser.js';\nimport { NotebookViewModel } from '../../viewModel/notebookViewModelImpl.js';\nimport { NotebookTextModel } from '../../../common/model/notebookTextModel.js';\nimport { CellKind, INotebookFindOptions, NotebookCellsChangeType } from '../../../common/notebookCommon.js';\n\nexport class CellFindMatchModel implements CellFindMatchWithIndex {\n\treadonly cell: ICellViewModel;\n\treadonly index: number;\n\tprivate _contentMatches: FindMatch[];\n\tprivate _webviewMatches: CellWebviewFindMatch[];\n\tget length() {\n\t\treturn this._contentMatches.length + this._webviewMatches.length;\n\t}\n\n\tget contentMatches(): FindMatch[] {\n\t\treturn this._contentMatches;\n\t}\n\n\tget webviewMatches(): CellWebviewFindMatch[] {\n\t\treturn this._webviewMatches;\n\t}\n\n\tconstructor(cell: ICellViewModel, index: number, contentMatches: FindMatch[], webviewMatches: CellWebviewFindMatch[]) {\n\t\tthis.cell = cell;\n\t\tthis.index = index;\n\t\tthis._contentMatches = contentMatches;\n\t\tthis._webviewMatches = webviewMatches;\n\t}\n\n\tgetMatch(index: number) {\n\t\tif (index >= this.length) {\n\t\t\tthrow new Error('NotebookCellFindMatch: index out of range');\n\t\t}\n\n\t\tif (index < this._contentMatches.length) {\n\t\t\treturn this._contentMatches[index];\n\t\t}\n\n\t\treturn this._webviewMatches[index - this._contentMatches.length];\n\t}\n}\n\nexport class FindModel extends Disposable {\n\tprivate _findMatches: CellFindMatchWithIndex[] = [];\n\tprotected _findMatchesStarts: PrefixSumComputer | null = null;\n\tprivate _currentMatch: number = -1;\n\n\tprivate readonly _throttledDelayer: Delayer<void>;\n\tprivate _computePromise: CancelablePromise<CellFindMatchWithIndex[] | null> | null = null;\n\tprivate readonly _modelDisposable = this._register(new DisposableStore());\n\tprivate _findMatchDecorationModel: FindMatchDecorationModel;\n\n\tget findMatches() {\n\t\treturn this._findMatches;\n\t}\n\n\tget currentMatch() {\n\t\treturn this._currentMatch;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\tprivate readonly _state: FindReplaceState<NotebookFindFilters>,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._throttledDelayer = new Delayer(20);\n\t\tthis._computePromise = null;\n\n\t\tthis._register(_state.onFindReplaceStateChange(e => {\n\t\t\tthis._updateCellStates(e);\n\n\t\t\tif (e.searchString || e.isRegex || e.matchCase || e.searchScope || e.wholeWord || (e.isRevealed && this._state.isRevealed) || e.filters || e.isReplaceRevealed) {\n\t\t\t\tthis.research();\n\t\t\t}\n\n\t\t\tif (e.isRevealed && !this._state.isRevealed) {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._notebookEditor.onDidChangeModel(e => {\n\t\t\tthis._registerModelListener(e);\n\t\t}));\n\n\t\tthis._register(this._notebookEditor.onDidChangeCellState(e => {\n\t\t\tif (e.cell.cellKind === CellKind.Markup && e.source.editStateChanged) {\n\t\t\t\t// research when markdown cell is switching between markdown preview and editing mode.\n\t\t\t\tthis.research();\n\t\t\t}\n\t\t}));\n\n\t\tif (this._notebookEditor.hasModel()) {\n\t\t\tthis._registerModelListener(this._notebookEditor.textModel);\n\t\t}\n\n\t\tthis._findMatchDecorationModel = new FindMatchDecorationModel(this._notebookEditor, this._notebookEditor.getId());\n\t}\n\n\tprivate _updateCellStates(e: FindReplaceStateChangedEvent) {\n\t\tif (!this._state.filters?.markupInput || !this._state.filters?.markupPreview || !this._state.filters?.findScope) {\n\t\t\treturn;\n\t\t}\n\n\t\t// we only update cell state if users are using the hybrid mode (both input and preview are enabled)\n\t\tconst updateEditingState = () => {\n\t\t\tconst viewModel = this._notebookEditor.getViewModel() as NotebookViewModel | undefined;\n\t\t\tif (!viewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// search markup sources first to decide if a markup cell should be in editing mode\n\t\t\tconst wordSeparators = this._configurationService.inspect<string>('editor.wordSeparators').value;\n\t\t\tconst options: INotebookFindOptions = {\n\t\t\t\tregex: this._state.isRegex,\n\t\t\t\twholeWord: this._state.wholeWord,\n\t\t\t\tcaseSensitive: this._state.matchCase,\n\t\t\t\twordSeparators: wordSeparators,\n\t\t\t\tincludeMarkupInput: true,\n\t\t\t\tincludeCodeInput: false,\n\t\t\t\tincludeMarkupPreview: false,\n\t\t\t\tincludeOutput: false,\n\t\t\t\tfindScope: this._state.filters?.findScope,\n\t\t\t};\n\n\t\t\tconst contentMatches = viewModel.find(this._state.searchString, options);\n\t\t\tfor (let i = 0; i < viewModel.length; i++) {\n\t\t\t\tconst cell = viewModel.cellAt(i);\n\t\t\t\tif (cell && cell.cellKind === CellKind.Markup) {\n\t\t\t\t\tconst foundContentMatch = contentMatches.find(m => m.cell.handle === cell.handle && m.contentMatches.length > 0);\n\t\t\t\t\tconst targetState = foundContentMatch ? CellEditState.Editing : CellEditState.Preview;\n\t\t\t\t\tconst currentEditingState = cell.getEditState();\n\n\t\t\t\t\tif (currentEditingState === CellEditState.Editing && cell.editStateSource !== 'find') {\n\t\t\t\t\t\t// it's already in editing mode, we should not update\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentEditingState !== targetState) {\n\t\t\t\t\t\tcell.updateEditState(targetState, 'find');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\t\tif (e.isReplaceRevealed && !this._state.isReplaceRevealed) {\n\t\t\t// replace is hidden, we need to switch all markdown cells to preview mode\n\t\t\tconst viewModel = this._notebookEditor.getViewModel() as NotebookViewModel | undefined;\n\t\t\tif (!viewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < viewModel.length; i++) {\n\t\t\t\tconst cell = viewModel.cellAt(i);\n\t\t\t\tif (cell && cell.cellKind === CellKind.Markup) {\n\t\t\t\t\tif (cell.getEditState() === CellEditState.Editing && cell.editStateSource === 'find') {\n\t\t\t\t\t\tcell.updateEditState(CellEditState.Preview, 'find');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.isReplaceRevealed) {\n\t\t\tupdateEditingState();\n\t\t} else if ((e.filters || e.isRevealed || e.searchString || e.replaceString) && this._state.isRevealed && this._state.isReplaceRevealed) {\n\t\t\tupdateEditingState();\n\t\t}\n\t}\n\n\tensureFindMatches() {\n\t\tif (!this._findMatchesStarts) {\n\t\t\tthis.set(this._findMatches, true);\n\t\t}\n\t}\n\n\tgetCurrentMatch() {\n\t\tconst nextIndex = this._findMatchesStarts!.getIndexOf(this._currentMatch);\n\t\tconst cell = this._findMatches[nextIndex.index].cell;\n\t\tconst match = this._findMatches[nextIndex.index].getMatch(nextIndex.remainder);\n\n\t\treturn {\n\t\t\tcell,\n\t\t\tmatch,\n\t\t\tisModelMatch: nextIndex.remainder < this._findMatches[nextIndex.index].contentMatches.length\n\t\t};\n\t}\n\n\trefreshCurrentMatch(focus: { cell: ICellViewModel; range: Range }) {\n\t\tconst findMatchIndex = this.findMatches.findIndex(match => match.cell === focus.cell);\n\n\t\tif (findMatchIndex === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst findMatch = this.findMatches[findMatchIndex];\n\t\tconst index = findMatch.contentMatches.findIndex(match => match.range.intersectRanges(focus.range) !== null);\n\n\t\tif (index === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst matchesBefore = findMatchIndex === 0 ? 0 : (this._findMatchesStarts?.getPrefixSum(findMatchIndex - 1) ?? 0);\n\t\tthis._currentMatch = matchesBefore + index;\n\n\t\tthis.highlightCurrentFindMatchDecoration(findMatchIndex, index).then(offset => {\n\t\t\tthis.revealCellRange(findMatchIndex, index, offset);\n\n\t\t\tthis._state.changeMatchInfo(\n\t\t\t\tthis._currentMatch,\n\t\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\t\tundefined\n\t\t\t);\n\t\t});\n\t}\n\n\tfind(option: { previous: boolean } | { index: number }) {\n\t\tif (!this.findMatches.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// let currCell;\n\t\tif (!this._findMatchesStarts) {\n\t\t\tthis.set(this._findMatches, true);\n\t\t\tif ('index' in option) {\n\t\t\t\tthis._currentMatch = option.index;\n\t\t\t}\n\t\t} else {\n\t\t\t// const currIndex = this._findMatchesStarts!.getIndexOf(this._currentMatch);\n\t\t\t// currCell = this._findMatches[currIndex.index].cell;\n\t\t\tconst totalVal = this._findMatchesStarts.getTotalSum();\n\t\t\tif ('index' in option) {\n\t\t\t\tthis._currentMatch = option.index;\n\t\t\t}\n\t\t\telse if (this._currentMatch === -1) {\n\t\t\t\tthis._currentMatch = option.previous ? totalVal - 1 : 0;\n\t\t\t} else {\n\t\t\t\tconst nextVal = (this._currentMatch + (option.previous ? -1 : 1) + totalVal) % totalVal;\n\t\t\t\tthis._currentMatch = nextVal;\n\t\t\t}\n\t\t}\n\n\t\tconst nextIndex = this._findMatchesStarts!.getIndexOf(this._currentMatch);\n\t\t// const newFocusedCell = this._findMatches[nextIndex.index].cell;\n\t\tthis.highlightCurrentFindMatchDecoration(nextIndex.index, nextIndex.remainder).then(offset => {\n\t\t\tthis.revealCellRange(nextIndex.index, nextIndex.remainder, offset);\n\n\t\t\tthis._state.changeMatchInfo(\n\t\t\t\tthis._currentMatch,\n\t\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\t\tundefined\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate revealCellRange(cellIndex: number, matchIndex: number, outputOffset: number | null) {\n\t\tconst findMatch = this._findMatches[cellIndex];\n\t\tif (matchIndex >= findMatch.contentMatches.length) {\n\t\t\t// reveal output range\n\t\t\tthis._notebookEditor.focusElement(findMatch.cell);\n\t\t\tconst index = this._notebookEditor.getCellIndex(findMatch.cell);\n\t\t\tif (index !== undefined) {\n\t\t\t\t// const range: ICellRange = { start: index, end: index + 1 };\n\t\t\t\tthis._notebookEditor.revealCellOffsetInCenter(findMatch.cell, outputOffset ?? 0);\n\t\t\t}\n\t\t} else {\n\t\t\tconst match = findMatch.getMatch(matchIndex) as FindMatch;\n\t\t\tif (findMatch.cell.getEditState() !== CellEditState.Editing) {\n\t\t\t\tfindMatch.cell.updateEditState(CellEditState.Editing, 'find');\n\t\t\t}\n\t\t\tfindMatch.cell.isInputCollapsed = false;\n\t\t\tthis._notebookEditor.focusElement(findMatch.cell);\n\t\t\tthis._notebookEditor.setCellEditorSelection(findMatch.cell, match.range);\n\t\t\tthis._notebookEditor.revealRangeInCenterIfOutsideViewportAsync(findMatch.cell, match.range);\n\t\t}\n\t}\n\n\tprivate _registerModelListener(notebookTextModel?: NotebookTextModel) {\n\t\tthis._modelDisposable.clear();\n\n\t\tif (notebookTextModel) {\n\t\t\tthis._modelDisposable.add(notebookTextModel.onDidChangeContent((e) => {\n\t\t\t\tif (!e.rawEvents.some(event => event.kind === NotebookCellsChangeType.ChangeCellContent || event.kind === NotebookCellsChangeType.ModelChange)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.research();\n\t\t\t}));\n\t\t}\n\n\t\tthis.research();\n\t}\n\n\tasync research() {\n\t\treturn this._throttledDelayer.trigger(async () => {\n\t\t\tthis._state.change({ isSearching: true }, false);\n\t\t\tawait this._research();\n\t\t\tthis._state.change({ isSearching: false }, false);\n\t\t});\n\t}\n\n\tasync _research() {\n\t\tthis._computePromise?.cancel();\n\n\t\tif (!this._state.isRevealed || !this._notebookEditor.hasModel()) {\n\t\t\tthis.set([], false);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._computePromise = createCancelablePromise(token => this._compute(token));\n\n\t\tconst findMatches = await this._computePromise;\n\t\tif (!findMatches) {\n\t\t\tthis.set([], false);\n\t\t\treturn;\n\t\t}\n\n\t\tif (findMatches.length === 0) {\n\t\t\tthis.set([], false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst findFirstMatchAfterCellIndex = (cellIndex: number) => {\n\t\t\tconst matchAfterSelection = findFirstIdxMonotonousOrArrLen(findMatches.map(match => match.index), index => index >= cellIndex);\n\t\t\tthis._updateCurrentMatch(findMatches, this._matchesCountBeforeIndex(findMatches, matchAfterSelection));\n\t\t};\n\n\t\tif (this._currentMatch === -1) {\n\t\t\t// no active current match\n\t\t\tif (this._notebookEditor.getLength() === 0) {\n\t\t\t\tthis.set(findMatches, false);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconst focus = this._notebookEditor.getFocus().start;\n\t\t\t\tfindFirstMatchAfterCellIndex(focus);\n\t\t\t\tthis.set(findMatches, false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst oldCurrIndex = this._findMatchesStarts!.getIndexOf(this._currentMatch);\n\t\tconst oldCurrCell = this._findMatches[oldCurrIndex.index].cell;\n\t\tconst oldCurrMatchCellIndex = this._notebookEditor.getCellIndex(oldCurrCell);\n\n\n\t\tif (oldCurrMatchCellIndex < 0) {\n\t\t\t// the cell containing the active match is deleted\n\t\t\tif (this._notebookEditor.getLength() === 0) {\n\t\t\t\tthis.set(findMatches, false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\treturn;\n\t\t}\n\n\t\t// the cell still exist\n\t\tconst cell = this._notebookEditor.cellAt(oldCurrMatchCellIndex);\n\t\t// we will try restore the active find match in this cell, if it contains any find match\n\n\t\tif (cell.cellKind === CellKind.Markup && cell.getEditState() === CellEditState.Preview) {\n\t\t\t// find first match in this cell or below\n\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\treturn;\n\t\t}\n\n\t\t// the cell is a markup cell in editing mode or a code cell, both should have monaco editor rendered\n\n\t\tif (!this._findMatchDecorationModel.currentMatchDecorations) {\n\t\t\t// no current highlight decoration\n\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\treturn;\n\t\t}\n\n\t\t// check if there is monaco editor selection and find the first match, otherwise find the first match above current cell\n\t\t// this._findMatches[cellIndex].matches[matchIndex].range\n\t\tif (this._findMatchDecorationModel.currentMatchDecorations.kind === 'input') {\n\t\t\tconst currentMatchDecorationId = this._findMatchDecorationModel.currentMatchDecorations.decorations.find(decoration => decoration.ownerId === cell.handle);\n\n\t\t\tif (!currentMatchDecorationId) {\n\t\t\t\t// current match decoration is no longer valid\n\t\t\t\tfindFirstMatchAfterCellIndex(oldCurrMatchCellIndex);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchAfterSelection = findFirstIdxMonotonousOrArrLen(findMatches, match => match.index >= oldCurrMatchCellIndex) % findMatches.length;\n\t\t\tif (findMatches[matchAfterSelection].index > oldCurrMatchCellIndex) {\n\t\t\t\t// there is no search result in curr cell anymore, find the nearest one (from top to bottom)\n\t\t\t\tthis._updateCurrentMatch(findMatches, this._matchesCountBeforeIndex(findMatches, matchAfterSelection));\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// there are still some search results in current cell\n\t\t\t\tlet currMatchRangeInEditor = cell.editorAttached && currentMatchDecorationId.decorations[0] ? cell.getCellDecorationRange(currentMatchDecorationId.decorations[0]) : null;\n\n\t\t\t\tif (currMatchRangeInEditor === null && oldCurrIndex.remainder < this._findMatches[oldCurrIndex.index].contentMatches.length) {\n\t\t\t\t\tcurrMatchRangeInEditor = (this._findMatches[oldCurrIndex.index].getMatch(oldCurrIndex.remainder) as FindMatch).range;\n\t\t\t\t}\n\n\t\t\t\tif (currMatchRangeInEditor !== null) {\n\t\t\t\t\t// we find a range for the previous current match, let's find the nearest one after it (can overlap)\n\t\t\t\t\tconst cellMatch = findMatches[matchAfterSelection];\n\t\t\t\t\tconst matchAfterOldSelection = findFirstIdxMonotonousOrArrLen(cellMatch.contentMatches, match => Range.compareRangesUsingStarts((match as FindMatch).range, currMatchRangeInEditor) >= 0);\n\t\t\t\t\tthis._updateCurrentMatch(findMatches, this._matchesCountBeforeIndex(findMatches, matchAfterSelection) + matchAfterOldSelection);\n\t\t\t\t} else {\n\t\t\t\t\t// no range found, let's fall back to finding the nearest match\n\t\t\t\t\tthis._updateCurrentMatch(findMatches, this._matchesCountBeforeIndex(findMatches, matchAfterSelection));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// output now has the highlight\n\t\t\tconst matchAfterSelection = findFirstIdxMonotonousOrArrLen(findMatches.map(match => match.index), index => index >= oldCurrMatchCellIndex) % findMatches.length;\n\t\t\tthis._updateCurrentMatch(findMatches, this._matchesCountBeforeIndex(findMatches, matchAfterSelection));\n\t\t}\n\t}\n\n\tprivate set(cellFindMatches: CellFindMatchWithIndex[] | null, autoStart: boolean): void {\n\t\tif (!cellFindMatches || !cellFindMatches.length) {\n\t\t\tthis._findMatches = [];\n\t\t\tthis._findMatchDecorationModel.setAllFindMatchesDecorations([]);\n\n\t\t\tthis.constructFindMatchesStarts();\n\t\t\tthis._currentMatch = -1;\n\t\t\tthis._findMatchDecorationModel.clearCurrentFindMatchDecoration();\n\n\t\t\tthis._state.changeMatchInfo(\n\t\t\t\tthis._currentMatch,\n\t\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\t\tundefined\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// all matches\n\t\tthis._findMatches = cellFindMatches;\n\t\tthis._findMatchDecorationModel.setAllFindMatchesDecorations(cellFindMatches || []);\n\n\t\t// current match\n\t\tthis.constructFindMatchesStarts();\n\n\t\tif (autoStart) {\n\t\t\tthis._currentMatch = 0;\n\t\t\tthis.highlightCurrentFindMatchDecoration(0, 0);\n\t\t}\n\n\t\tthis._state.changeMatchInfo(\n\t\t\tthis._currentMatch,\n\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\tundefined\n\t\t);\n\t}\n\n\tprivate async _compute(token: CancellationToken): Promise<CellFindMatchWithIndex[] | null> {\n\t\tif (!this._notebookEditor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet ret: CellFindMatchWithIndex[] | null = null;\n\t\tconst val = this._state.searchString;\n\t\tconst wordSeparators = this._configurationService.inspect<string>('editor.wordSeparators').value;\n\n\t\tconst options: INotebookFindOptions = {\n\t\t\tregex: this._state.isRegex,\n\t\t\twholeWord: this._state.wholeWord,\n\t\t\tcaseSensitive: this._state.matchCase,\n\t\t\twordSeparators: wordSeparators,\n\t\t\tincludeMarkupInput: this._state.filters?.markupInput ?? true,\n\t\t\tincludeCodeInput: this._state.filters?.codeInput ?? true,\n\t\t\tincludeMarkupPreview: !!this._state.filters?.markupPreview,\n\t\t\tincludeOutput: !!this._state.filters?.codeOutput,\n\t\t\tfindScope: this._state.filters?.findScope,\n\t\t};\n\n\t\tret = await this._notebookEditor.find(val, options, token);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tprivate _updateCurrentMatch(findMatches: CellFindMatchWithIndex[], currentMatchesPosition: number) {\n\t\tthis._currentMatch = currentMatchesPosition % findMatches.length;\n\t\tthis.set(findMatches, false);\n\t\tconst nextIndex = this._findMatchesStarts!.getIndexOf(this._currentMatch);\n\t\tthis.highlightCurrentFindMatchDecoration(nextIndex.index, nextIndex.remainder);\n\n\t\tthis._state.changeMatchInfo(\n\t\t\tthis._currentMatch,\n\t\t\tthis._findMatches.reduce((p, c) => p + c.length, 0),\n\t\t\tundefined\n\t\t);\n\t}\n\n\tprivate _matchesCountBeforeIndex(findMatches: CellFindMatchWithIndex[], index: number) {\n\t\tlet prevMatchesCount = 0;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tprevMatchesCount += findMatches[i].length;\n\t\t}\n\n\t\treturn prevMatchesCount;\n\t}\n\n\tprivate constructFindMatchesStarts() {\n\t\tif (this._findMatches && this._findMatches.length) {\n\t\t\tconst values = new Uint32Array(this._findMatches.length);\n\t\t\tfor (let i = 0; i < this._findMatches.length; i++) {\n\t\t\t\tvalues[i] = this._findMatches[i].length;\n\t\t\t}\n\n\t\t\tthis._findMatchesStarts = new PrefixSumComputer(values);\n\t\t} else {\n\t\t\tthis._findMatchesStarts = null;\n\t\t}\n\t}\n\n\n\tprivate async highlightCurrentFindMatchDecoration(cellIndex: number, matchIndex: number): Promise<number | null> {\n\t\tconst cell = this._findMatches[cellIndex].cell;\n\t\tconst match = this._findMatches[cellIndex].getMatch(matchIndex);\n\n\t\tif (matchIndex < this._findMatches[cellIndex].contentMatches.length) {\n\t\t\treturn this._findMatchDecorationModel.highlightCurrentFindMatchDecorationInCell(cell, (match as FindMatch).range);\n\t\t} else {\n\t\t\treturn this._findMatchDecorationModel.highlightCurrentFindMatchDecorationInWebview(cell, (match as CellWebviewFindMatch).index);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._computePromise?.cancel();\n\t\tthis._throttledDelayer.cancel();\n\t\tthis.set([], false);\n\t}\n\n\toverride dispose() {\n\t\tthis._findMatchDecorationModel.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
