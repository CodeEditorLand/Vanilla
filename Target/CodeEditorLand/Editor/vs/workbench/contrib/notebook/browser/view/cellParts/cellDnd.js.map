{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/cellDnd.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from '../../../../../../base/browser/dom.js';\nimport { Delayer } from '../../../../../../base/common/async.js';\nimport { Disposable, MutableDisposable } from '../../../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../../../base/common/platform.js';\nimport { expandCellRangesWithHiddenCells, ICellViewModel, INotebookEditorDelegate } from '../../notebookBrowser.js';\nimport { CellViewModelStateChangeEvent } from '../../notebookViewEvents.js';\nimport { CellContentPart } from '../cellPart.js';\nimport { BaseCellRenderTemplate, INotebookCellList } from '../notebookRenderingCommon.js';\nimport { cloneNotebookCellTextModel } from '../../../common/model/notebookCellTextModel.js';\nimport { CellEditType, ICellMoveEdit, SelectionStateType } from '../../../common/notebookCommon.js';\nimport { cellRangesToIndexes, ICellRange } from '../../../common/notebookRange.js';\n\nconst $ = DOM.$;\n\nconst DRAGGING_CLASS = 'cell-dragging';\nconst GLOBAL_DRAG_CLASS = 'global-drag-active';\n\ntype DragImageProvider = () => HTMLElement;\n\ninterface CellDragEvent {\n\tbrowserEvent: DragEvent;\n\tdraggedOverCell: ICellViewModel;\n\tcellTop: number;\n\tcellHeight: number;\n\tdragPosRatio: number;\n}\n\nexport class CellDragAndDropPart extends CellContentPart {\n\tconstructor(\n\t\tprivate readonly container: HTMLElement\n\t) {\n\t\tsuper();\n\t}\n\n\toverride didRenderCell(element: ICellViewModel): void {\n\t\tthis.update(element);\n\t}\n\n\toverride updateState(element: ICellViewModel, e: CellViewModelStateChangeEvent): void {\n\t\tif (e.dragStateChanged) {\n\t\t\tthis.update(element);\n\t\t}\n\t}\n\n\tprivate update(element: ICellViewModel) {\n\t\tthis.container.classList.toggle(DRAGGING_CLASS, element.dragging);\n\t}\n}\n\nexport class CellDragAndDropController extends Disposable {\n\t// TODO@roblourens - should probably use dataTransfer here, but any dataTransfer set makes the editor think I am dropping a file, need\n\t// to figure out how to prevent that\n\tprivate currentDraggedCell: ICellViewModel | undefined;\n\tprivate draggedCells: ICellViewModel[] = [];\n\n\tprivate listInsertionIndicator: HTMLElement;\n\n\tprivate list!: INotebookCellList;\n\n\tprivate isScrolling = false;\n\tprivate readonly scrollingDelayer: Delayer<void>;\n\n\tprivate readonly listOnWillScrollListener = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate notebookEditor: INotebookEditorDelegate,\n\t\tprivate readonly notebookListContainer: HTMLElement\n\t) {\n\t\tsuper();\n\n\t\tthis.listInsertionIndicator = DOM.append(notebookListContainer, $('.cell-list-insertion-indicator'));\n\n\t\tthis._register(DOM.addDisposableListener(notebookListContainer.ownerDocument.body, DOM.EventType.DRAG_START, this.onGlobalDragStart.bind(this), true));\n\t\tthis._register(DOM.addDisposableListener(notebookListContainer.ownerDocument.body, DOM.EventType.DRAG_END, this.onGlobalDragEnd.bind(this), true));\n\n\t\tconst addCellDragListener = (eventType: string, handler: (e: CellDragEvent) => void, useCapture = false) => {\n\t\t\tthis._register(DOM.addDisposableListener(\n\t\t\t\tnotebookEditor.getDomNode(),\n\t\t\t\teventType,\n\t\t\t\te => {\n\t\t\t\t\tconst cellDragEvent = this.toCellDragEvent(e);\n\t\t\t\t\tif (cellDragEvent) {\n\t\t\t\t\t\thandler(cellDragEvent);\n\t\t\t\t\t}\n\t\t\t\t}, useCapture));\n\t\t};\n\n\t\taddCellDragListener(DOM.EventType.DRAG_OVER, event => {\n\t\t\tif (!this.currentDraggedCell) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.browserEvent.preventDefault();\n\t\t\tthis.onCellDragover(event);\n\t\t}, true);\n\t\taddCellDragListener(DOM.EventType.DROP, event => {\n\t\t\tif (!this.currentDraggedCell) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.browserEvent.preventDefault();\n\t\t\tthis.onCellDrop(event);\n\t\t});\n\t\taddCellDragListener(DOM.EventType.DRAG_LEAVE, event => {\n\t\t\tevent.browserEvent.preventDefault();\n\t\t\tthis.onCellDragLeave(event);\n\t\t});\n\n\t\tthis.scrollingDelayer = this._register(new Delayer(200));\n\t}\n\n\tsetList(value: INotebookCellList) {\n\t\tthis.list = value;\n\n\t\tthis.listOnWillScrollListener.value = this.list.onWillScroll(e => {\n\t\t\tif (!e.scrollTopChanged) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t\tthis.isScrolling = true;\n\t\t\tthis.scrollingDelayer.trigger(() => {\n\t\t\t\tthis.isScrolling = false;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate setInsertIndicatorVisibility(visible: boolean) {\n\t\tthis.listInsertionIndicator.style.opacity = visible ? '1' : '0';\n\t}\n\n\tprivate toCellDragEvent(event: DragEvent): CellDragEvent | undefined {\n\t\tconst targetTop = this.notebookListContainer.getBoundingClientRect().top;\n\t\tconst dragOffset = this.list.scrollTop + event.clientY - targetTop;\n\t\tconst draggedOverCell = this.list.elementAt(dragOffset);\n\t\tif (!draggedOverCell) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst cellTop = this.list.getCellViewScrollTop(draggedOverCell);\n\t\tconst cellHeight = this.list.elementHeight(draggedOverCell);\n\n\t\tconst dragPosInElement = dragOffset - cellTop;\n\t\tconst dragPosRatio = dragPosInElement / cellHeight;\n\n\t\treturn {\n\t\t\tbrowserEvent: event,\n\t\t\tdraggedOverCell,\n\t\t\tcellTop,\n\t\t\tcellHeight,\n\t\t\tdragPosRatio\n\t\t};\n\t}\n\n\tclearGlobalDragState() {\n\t\tthis.notebookEditor.getDomNode().classList.remove(GLOBAL_DRAG_CLASS);\n\t}\n\n\tprivate onGlobalDragStart() {\n\t\tthis.notebookEditor.getDomNode().classList.add(GLOBAL_DRAG_CLASS);\n\t}\n\n\tprivate onGlobalDragEnd() {\n\t\tthis.notebookEditor.getDomNode().classList.remove(GLOBAL_DRAG_CLASS);\n\t}\n\n\tprivate onCellDragover(event: CellDragEvent): void {\n\t\tif (!event.browserEvent.dataTransfer) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.currentDraggedCell) {\n\t\t\tevent.browserEvent.dataTransfer.dropEffect = 'none';\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.isScrolling || this.currentDraggedCell === event.draggedOverCell) {\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst dropDirection = this.getDropInsertDirection(event.dragPosRatio);\n\t\tconst insertionIndicatorAbsolutePos = dropDirection === 'above' ? event.cellTop : event.cellTop + event.cellHeight;\n\t\tthis.updateInsertIndicator(dropDirection, insertionIndicatorAbsolutePos);\n\t}\n\n\tprivate updateInsertIndicator(dropDirection: string, insertionIndicatorAbsolutePos: number) {\n\t\tconst { bottomToolbarGap } = this.notebookEditor.notebookOptions.computeBottomToolbarDimensions(this.notebookEditor.textModel?.viewType);\n\t\tconst insertionIndicatorTop = insertionIndicatorAbsolutePos - this.list.scrollTop + bottomToolbarGap / 2;\n\t\tif (insertionIndicatorTop >= 0) {\n\t\t\tthis.listInsertionIndicator.style.top = `${insertionIndicatorTop}px`;\n\t\t\tthis.setInsertIndicatorVisibility(true);\n\t\t} else {\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t}\n\t}\n\n\tprivate getDropInsertDirection(dragPosRatio: number): 'above' | 'below' {\n\t\treturn dragPosRatio < 0.5 ? 'above' : 'below';\n\t}\n\n\tprivate onCellDrop(event: CellDragEvent): void {\n\t\tconst draggedCell = this.currentDraggedCell!;\n\n\t\tif (this.isScrolling || this.currentDraggedCell === event.draggedOverCell) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dragCleanup();\n\n\t\tconst dropDirection = this.getDropInsertDirection(event.dragPosRatio);\n\t\tthis._dropImpl(draggedCell, dropDirection, event.browserEvent, event.draggedOverCell);\n\t}\n\n\tprivate getCellRangeAroundDragTarget(draggedCellIndex: number) {\n\t\tconst selections = this.notebookEditor.getSelections();\n\t\tconst modelRanges = expandCellRangesWithHiddenCells(this.notebookEditor, selections);\n\t\tconst nearestRange = modelRanges.find(range => range.start <= draggedCellIndex && draggedCellIndex < range.end);\n\n\t\tif (nearestRange) {\n\t\t\treturn nearestRange;\n\t\t} else {\n\t\t\treturn { start: draggedCellIndex, end: draggedCellIndex + 1 };\n\t\t}\n\t}\n\n\tprivate _dropImpl(draggedCell: ICellViewModel, dropDirection: 'above' | 'below', ctx: { ctrlKey: boolean; altKey: boolean }, draggedOverCell: ICellViewModel) {\n\t\tconst cellTop = this.list.getCellViewScrollTop(draggedOverCell);\n\t\tconst cellHeight = this.list.elementHeight(draggedOverCell);\n\t\tconst insertionIndicatorAbsolutePos = dropDirection === 'above' ? cellTop : cellTop + cellHeight;\n\t\tconst { bottomToolbarGap } = this.notebookEditor.notebookOptions.computeBottomToolbarDimensions(this.notebookEditor.textModel?.viewType);\n\t\tconst insertionIndicatorTop = insertionIndicatorAbsolutePos - this.list.scrollTop + bottomToolbarGap / 2;\n\t\tconst editorHeight = this.notebookEditor.getDomNode().getBoundingClientRect().height;\n\t\tif (insertionIndicatorTop < 0 || insertionIndicatorTop > editorHeight) {\n\t\t\t// Ignore drop, insertion point is off-screen\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCopy = (ctx.ctrlKey && !platform.isMacintosh) || (ctx.altKey && platform.isMacintosh);\n\n\t\tif (!this.notebookEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst textModel = this.notebookEditor.textModel;\n\n\t\tif (isCopy) {\n\t\t\tconst draggedCellIndex = this.notebookEditor.getCellIndex(draggedCell);\n\t\t\tconst range = this.getCellRangeAroundDragTarget(draggedCellIndex);\n\n\t\t\tlet originalToIdx = this.notebookEditor.getCellIndex(draggedOverCell);\n\t\t\tif (dropDirection === 'below') {\n\t\t\t\tconst relativeToIndex = this.notebookEditor.getCellIndex(draggedOverCell);\n\t\t\t\tconst newIdx = this.notebookEditor.getNextVisibleCellIndex(relativeToIndex);\n\t\t\t\toriginalToIdx = newIdx;\n\t\t\t}\n\n\t\t\tlet finalSelection: ICellRange;\n\t\t\tlet finalFocus: ICellRange;\n\n\t\t\tif (originalToIdx <= range.start) {\n\t\t\t\tfinalSelection = { start: originalToIdx, end: originalToIdx + range.end - range.start };\n\t\t\t\tfinalFocus = { start: originalToIdx + draggedCellIndex - range.start, end: originalToIdx + draggedCellIndex - range.start + 1 };\n\t\t\t} else {\n\t\t\t\tconst delta = (originalToIdx - range.start);\n\t\t\t\tfinalSelection = { start: range.start + delta, end: range.end + delta };\n\t\t\t\tfinalFocus = { start: draggedCellIndex + delta, end: draggedCellIndex + delta + 1 };\n\t\t\t}\n\n\t\t\ttextModel.applyEdits([\n\t\t\t\t{\n\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\tindex: originalToIdx,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\tcells: cellRangesToIndexes([range]).map(index => cloneNotebookCellTextModel(this.notebookEditor.cellAt(index)!.model))\n\t\t\t\t}\n\t\t\t], true, { kind: SelectionStateType.Index, focus: this.notebookEditor.getFocus(), selections: this.notebookEditor.getSelections() }, () => ({ kind: SelectionStateType.Index, focus: finalFocus, selections: [finalSelection] }), undefined, true);\n\t\t\tthis.notebookEditor.revealCellRangeInView(finalSelection);\n\t\t} else {\n\t\t\tperformCellDropEdits(this.notebookEditor, draggedCell, dropDirection, draggedOverCell);\n\t\t}\n\t}\n\n\tprivate onCellDragLeave(event: CellDragEvent): void {\n\t\tif (!event.browserEvent.relatedTarget || !DOM.isAncestor(event.browserEvent.relatedTarget as HTMLElement, this.notebookEditor.getDomNode())) {\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t}\n\t}\n\n\tprivate dragCleanup(): void {\n\t\tif (this.currentDraggedCell) {\n\t\t\tthis.draggedCells.forEach(cell => cell.dragging = false);\n\t\t\tthis.currentDraggedCell = undefined;\n\t\t\tthis.draggedCells = [];\n\t\t}\n\n\t\tthis.setInsertIndicatorVisibility(false);\n\t}\n\n\tregisterDragHandle(templateData: BaseCellRenderTemplate, cellRoot: HTMLElement, dragHandles: HTMLElement[], dragImageProvider: DragImageProvider): void {\n\t\tconst container = templateData.container;\n\t\tfor (const dragHandle of dragHandles) {\n\t\t\tdragHandle.setAttribute('draggable', 'true');\n\t\t}\n\n\t\tconst onDragEnd = () => {\n\t\t\tif (!this.notebookEditor.notebookOptions.getDisplayOptions().dragAndDropEnabled || !!this.notebookEditor.isReadOnly) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Note, templateData may have a different element rendered into it by now\n\t\t\tcontainer.classList.remove(DRAGGING_CLASS);\n\t\t\tthis.dragCleanup();\n\t\t};\n\t\tfor (const dragHandle of dragHandles) {\n\t\t\ttemplateData.templateDisposables.add(DOM.addDisposableListener(dragHandle, DOM.EventType.DRAG_END, onDragEnd));\n\t\t}\n\n\t\tconst onDragStart = (event: DragEvent) => {\n\t\t\tif (!event.dataTransfer) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.notebookEditor.notebookOptions.getDisplayOptions().dragAndDropEnabled || !!this.notebookEditor.isReadOnly) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.currentDraggedCell = templateData.currentRenderedCell!;\n\t\t\tthis.draggedCells = this.notebookEditor.getSelections().map(range => this.notebookEditor.getCellsInRange(range)).flat();\n\t\t\tthis.draggedCells.forEach(cell => cell.dragging = true);\n\n\t\t\tconst dragImage = dragImageProvider();\n\t\t\tcellRoot.parentElement!.appendChild(dragImage);\n\t\t\tevent.dataTransfer.setDragImage(dragImage, 0, 0);\n\t\t\tsetTimeout(() => dragImage.remove(), 0); // Comment this out to debug drag image layout\n\t\t};\n\t\tfor (const dragHandle of dragHandles) {\n\t\t\ttemplateData.templateDisposables.add(DOM.addDisposableListener(dragHandle, DOM.EventType.DRAG_START, onDragStart));\n\t\t}\n\t}\n\n\tpublic startExplicitDrag(cell: ICellViewModel, _dragOffsetY: number) {\n\t\tif (!this.notebookEditor.notebookOptions.getDisplayOptions().dragAndDropEnabled || !!this.notebookEditor.isReadOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentDraggedCell = cell;\n\t\tthis.setInsertIndicatorVisibility(true);\n\t}\n\n\tpublic explicitDrag(cell: ICellViewModel, dragOffsetY: number) {\n\t\tif (!this.notebookEditor.notebookOptions.getDisplayOptions().dragAndDropEnabled || !!this.notebookEditor.isReadOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst target = this.list.elementAt(dragOffsetY);\n\t\tif (target && target !== cell) {\n\t\t\tconst cellTop = this.list.getCellViewScrollTop(target);\n\t\t\tconst cellHeight = this.list.elementHeight(target);\n\n\t\t\tconst dropDirection = this.getExplicitDragDropDirection(dragOffsetY, cellTop, cellHeight);\n\t\t\tconst insertionIndicatorAbsolutePos = dropDirection === 'above' ? cellTop : cellTop + cellHeight;\n\t\t\tthis.updateInsertIndicator(dropDirection, insertionIndicatorAbsolutePos);\n\t\t}\n\n\t\t// Try scrolling list if needed\n\t\tif (this.currentDraggedCell !== cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst notebookViewRect = this.notebookEditor.getDomNode().getBoundingClientRect();\n\t\tconst eventPositionInView = dragOffsetY - this.list.scrollTop;\n\n\t\t// Percentage from the top/bottom of the screen where we start scrolling while dragging\n\t\tconst notebookViewScrollMargins = 0.2;\n\n\t\tconst maxScrollDeltaPerFrame = 20;\n\n\t\tconst eventPositionRatio = eventPositionInView / notebookViewRect.height;\n\t\tif (eventPositionRatio < notebookViewScrollMargins) {\n\t\t\tthis.list.scrollTop -= maxScrollDeltaPerFrame * (1 - eventPositionRatio / notebookViewScrollMargins);\n\t\t} else if (eventPositionRatio > 1 - notebookViewScrollMargins) {\n\t\t\tthis.list.scrollTop += maxScrollDeltaPerFrame * (1 - ((1 - eventPositionRatio) / notebookViewScrollMargins));\n\t\t}\n\t}\n\n\tpublic endExplicitDrag(_cell: ICellViewModel) {\n\t\tthis.setInsertIndicatorVisibility(false);\n\t}\n\n\tpublic explicitDrop(cell: ICellViewModel, ctx: { dragOffsetY: number; ctrlKey: boolean; altKey: boolean }) {\n\t\tthis.currentDraggedCell = undefined;\n\t\tthis.setInsertIndicatorVisibility(false);\n\n\t\tconst target = this.list.elementAt(ctx.dragOffsetY);\n\t\tif (!target || target === cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cellTop = this.list.getCellViewScrollTop(target);\n\t\tconst cellHeight = this.list.elementHeight(target);\n\t\tconst dropDirection = this.getExplicitDragDropDirection(ctx.dragOffsetY, cellTop, cellHeight);\n\t\tthis._dropImpl(cell, dropDirection, ctx, target);\n\t}\n\n\tprivate getExplicitDragDropDirection(clientY: number, cellTop: number, cellHeight: number) {\n\t\tconst dragPosInElement = clientY - cellTop;\n\t\tconst dragPosRatio = dragPosInElement / cellHeight;\n\n\t\treturn this.getDropInsertDirection(dragPosRatio);\n\t}\n\n\toverride dispose() {\n\t\tthis.notebookEditor = null!;\n\t\tsuper.dispose();\n\t}\n}\n\nexport function performCellDropEdits(editor: INotebookEditorDelegate, draggedCell: ICellViewModel, dropDirection: 'above' | 'below', draggedOverCell: ICellViewModel): void {\n\tconst draggedCellIndex = editor.getCellIndex(draggedCell)!;\n\tlet originalToIdx = editor.getCellIndex(draggedOverCell)!;\n\n\tif (typeof draggedCellIndex !== 'number' || typeof originalToIdx !== 'number') {\n\t\treturn;\n\t}\n\n\t// If dropped on a folded markdown range, insert after the folding range\n\tif (dropDirection === 'below') {\n\t\tconst newIdx = editor.getNextVisibleCellIndex(originalToIdx) ?? originalToIdx;\n\t\toriginalToIdx = newIdx;\n\t}\n\n\tlet selections = editor.getSelections();\n\tif (!selections.length) {\n\t\tselections = [editor.getFocus()];\n\t}\n\n\tlet originalFocusIdx = editor.getFocus().start;\n\n\t// If the dragged cell is not focused/selected, ignore the current focus/selection and use the dragged idx\n\tif (!selections.some(s => s.start <= draggedCellIndex && s.end > draggedCellIndex)) {\n\t\tselections = [{ start: draggedCellIndex, end: draggedCellIndex + 1 }];\n\t\toriginalFocusIdx = draggedCellIndex;\n\t}\n\n\tconst droppedInSelection = selections.find(range => range.start <= originalToIdx && range.end > originalToIdx);\n\tif (droppedInSelection) {\n\t\toriginalToIdx = droppedInSelection.start;\n\t}\n\n\n\tlet numCells = 0;\n\tlet focusNewIdx = originalToIdx;\n\tlet newInsertionIdx = originalToIdx;\n\n\t// Compute a set of edits which will be applied in reverse order by the notebook text model.\n\t// `index`: the starting index of the range, after previous edits have been applied\n\t// `newIdx`: the destination index, after this edit's range has been removed\n\tselections.sort((a, b) => b.start - a.start);\n\tconst edits = selections.map(range => {\n\t\tconst length = range.end - range.start;\n\n\t\t// If this range is before the insertion point, subtract the cells in this range from the \"to\" index\n\t\tlet toIndexDelta = 0;\n\t\tif (range.end <= newInsertionIdx) {\n\t\t\ttoIndexDelta = -length;\n\t\t}\n\n\t\tconst newIdx = newInsertionIdx + toIndexDelta;\n\n\t\t// If this range contains the focused cell, set the new focus index to the new index of the cell\n\t\tif (originalFocusIdx >= range.start && originalFocusIdx <= range.end) {\n\t\t\tconst offset = originalFocusIdx - range.start;\n\t\t\tfocusNewIdx = newIdx + offset;\n\t\t}\n\n\t\t// If below the insertion point, the original index will have been shifted down\n\t\tconst fromIndexDelta = range.start >= originalToIdx ? numCells : 0;\n\n\t\tconst edit: ICellMoveEdit = {\n\t\t\teditType: CellEditType.Move,\n\t\t\tindex: range.start + fromIndexDelta,\n\t\t\tlength,\n\t\t\tnewIdx\n\t\t};\n\t\tnumCells += length;\n\n\t\t// If a range was moved down, the insertion index needs to be adjusted\n\t\tif (range.end < newInsertionIdx) {\n\t\t\tnewInsertionIdx -= length;\n\t\t}\n\n\t\treturn edit;\n\t});\n\n\tconst lastEdit = edits[edits.length - 1];\n\tconst finalSelection = { start: lastEdit.newIdx, end: lastEdit.newIdx + numCells };\n\tconst finalFocus = { start: focusNewIdx, end: focusNewIdx + 1 };\n\n\teditor.textModel!.applyEdits(\n\t\tedits,\n\t\ttrue,\n\t\t{ kind: SelectionStateType.Index, focus: editor.getFocus(), selections: editor.getSelections() },\n\t\t() => ({ kind: SelectionStateType.Index, focus: finalFocus, selections: [finalSelection] }),\n\t\tundefined, true);\n\teditor.revealCellRangeInView(finalSelection);\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,eAAe;AACxB,SAAS,YAAY,yBAAyB;AAC9C,YAAY,cAAc;AAC1B,SAAS,iCAAiC,gBAAgB,+BAA+B;AACzF,SAAS,qCAAqC;AAC9C,SAAS,uBAAuB;AAChC,SAAS,wBAAwB,yBAAyB;AAC1D,SAAS,kCAAkC;AAC3C,SAAS,cAAc,eAAe,0BAA0B;AAChE,SAAS,qBAAqB,kBAAkB;AAEhD,MAAM,IAAI,IAAI;AAEd,MAAM,iBAAiB;AACvB,MAAM,oBAAoB;AAYnB,MAAM,4BAA4B,gBAAgB;AAAA,EACxD,YACkB,WAChB;AACD,UAAM;AAFW;AAAA,EAGlB;AAAA,EArCD,OAgCyD;AAAA;AAAA;AAAA,EAO/C,cAAc,SAA+B;AACrD,SAAK,OAAO,OAAO;AAAA,EACpB;AAAA,EAES,YAAY,SAAyB,GAAwC;AACrF,QAAI,EAAE,kBAAkB;AACvB,WAAK,OAAO,OAAO;AAAA,IACpB;AAAA,EACD;AAAA,EAEQ,OAAO,SAAyB;AACvC,SAAK,UAAU,UAAU,OAAO,gBAAgB,QAAQ,QAAQ;AAAA,EACjE;AACD;AAEO,MAAM,kCAAkC,WAAW;AAAA,EAezD,YACS,gBACS,uBAChB;AACD,UAAM;AAHE;AACS;AAIjB,SAAK,yBAAyB,IAAI,OAAO,uBAAuB,EAAE,gCAAgC,CAAC;AAEnG,SAAK,UAAU,IAAI,sBAAsB,sBAAsB,cAAc,MAAM,IAAI,UAAU,YAAY,KAAK,kBAAkB,KAAK,IAAI,GAAG,IAAI,CAAC;AACrJ,SAAK,UAAU,IAAI,sBAAsB,sBAAsB,cAAc,MAAM,IAAI,UAAU,UAAU,KAAK,gBAAgB,KAAK,IAAI,GAAG,IAAI,CAAC;AAEjJ,UAAM,sBAAsB,wBAAC,WAAmB,SAAqC,aAAa,UAAU;AAC3G,WAAK,UAAU,IAAI;AAAA,QAClB,eAAe,WAAW;AAAA,QAC1B;AAAA,QACA,OAAK;AACJ,gBAAM,gBAAgB,KAAK,gBAAgB,CAAC;AAC5C,cAAI,eAAe;AAClB,oBAAQ,aAAa;AAAA,UACtB;AAAA,QACD;AAAA,QAAG;AAAA,MAAU,CAAC;AAAA,IAChB,GAV4B;AAY5B,wBAAoB,IAAI,UAAU,WAAW,WAAS;AACrD,UAAI,CAAC,KAAK,oBAAoB;AAC7B;AAAA,MACD;AACA,YAAM,aAAa,eAAe;AAClC,WAAK,eAAe,KAAK;AAAA,IAC1B,GAAG,IAAI;AACP,wBAAoB,IAAI,UAAU,MAAM,WAAS;AAChD,UAAI,CAAC,KAAK,oBAAoB;AAC7B;AAAA,MACD;AACA,YAAM,aAAa,eAAe;AAClC,WAAK,WAAW,KAAK;AAAA,IACtB,CAAC;AACD,wBAAoB,IAAI,UAAU,YAAY,WAAS;AACtD,YAAM,aAAa,eAAe;AAClC,WAAK,gBAAgB,KAAK;AAAA,IAC3B,CAAC;AAED,SAAK,mBAAmB,KAAK,UAAU,IAAI,QAAQ,GAAG,CAAC;AAAA,EACxD;AAAA,EAhHD,OAsD0D;AAAA;AAAA;AAAA;AAAA;AAAA,EAGjD;AAAA,EACA,eAAiC,CAAC;AAAA,EAElC;AAAA,EAEA;AAAA,EAEA,cAAc;AAAA,EACL;AAAA,EAEA,2BAA2B,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EA+ClF,QAAQ,OAA0B;AACjC,SAAK,OAAO;AAEZ,SAAK,yBAAyB,QAAQ,KAAK,KAAK,aAAa,OAAK;AACjE,UAAI,CAAC,EAAE,kBAAkB;AACxB;AAAA,MACD;AAEA,WAAK,6BAA6B,KAAK;AACvC,WAAK,cAAc;AACnB,WAAK,iBAAiB,QAAQ,MAAM;AACnC,aAAK,cAAc;AAAA,MACpB,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEQ,6BAA6B,SAAkB;AACtD,SAAK,uBAAuB,MAAM,UAAU,UAAU,MAAM;AAAA,EAC7D;AAAA,EAEQ,gBAAgB,OAA6C;AACpE,UAAM,YAAY,KAAK,sBAAsB,sBAAsB,EAAE;AACrE,UAAM,aAAa,KAAK,KAAK,YAAY,MAAM,UAAU;AACzD,UAAM,kBAAkB,KAAK,KAAK,UAAU,UAAU;AACtD,QAAI,CAAC,iBAAiB;AACrB,aAAO;AAAA,IACR;AAEA,UAAM,UAAU,KAAK,KAAK,qBAAqB,eAAe;AAC9D,UAAM,aAAa,KAAK,KAAK,cAAc,eAAe;AAE1D,UAAM,mBAAmB,aAAa;AACtC,UAAM,eAAe,mBAAmB;AAExC,WAAO;AAAA,MACN,cAAc;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,uBAAuB;AACtB,SAAK,eAAe,WAAW,EAAE,UAAU,OAAO,iBAAiB;AAAA,EACpE;AAAA,EAEQ,oBAAoB;AAC3B,SAAK,eAAe,WAAW,EAAE,UAAU,IAAI,iBAAiB;AAAA,EACjE;AAAA,EAEQ,kBAAkB;AACzB,SAAK,eAAe,WAAW,EAAE,UAAU,OAAO,iBAAiB;AAAA,EACpE;AAAA,EAEQ,eAAe,OAA4B;AAClD,QAAI,CAAC,MAAM,aAAa,cAAc;AACrC;AAAA,IACD;AAEA,QAAI,CAAC,KAAK,oBAAoB;AAC7B,YAAM,aAAa,aAAa,aAAa;AAC7C;AAAA,IACD;AAEA,QAAI,KAAK,eAAe,KAAK,uBAAuB,MAAM,iBAAiB;AAC1E,WAAK,6BAA6B,KAAK;AACvC;AAAA,IACD;AAEA,UAAM,gBAAgB,KAAK,uBAAuB,MAAM,YAAY;AACpE,UAAM,gCAAgC,kBAAkB,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM;AACxG,SAAK,sBAAsB,eAAe,6BAA6B;AAAA,EACxE;AAAA,EAEQ,sBAAsB,eAAuB,+BAAuC;AAC3F,UAAM,EAAE,iBAAiB,IAAI,KAAK,eAAe,gBAAgB,+BAA+B,KAAK,eAAe,WAAW,QAAQ;AACvI,UAAM,wBAAwB,gCAAgC,KAAK,KAAK,YAAY,mBAAmB;AACvG,QAAI,yBAAyB,GAAG;AAC/B,WAAK,uBAAuB,MAAM,MAAM,GAAG,qBAAqB;AAChE,WAAK,6BAA6B,IAAI;AAAA,IACvC,OAAO;AACN,WAAK,6BAA6B,KAAK;AAAA,IACxC;AAAA,EACD;AAAA,EAEQ,uBAAuB,cAAyC;AACvE,WAAO,eAAe,MAAM,UAAU;AAAA,EACvC;AAAA,EAEQ,WAAW,OAA4B;AAC9C,UAAM,cAAc,KAAK;AAEzB,QAAI,KAAK,eAAe,KAAK,uBAAuB,MAAM,iBAAiB;AAC1E;AAAA,IACD;AAEA,SAAK,YAAY;AAEjB,UAAM,gBAAgB,KAAK,uBAAuB,MAAM,YAAY;AACpE,SAAK,UAAU,aAAa,eAAe,MAAM,cAAc,MAAM,eAAe;AAAA,EACrF;AAAA,EAEQ,6BAA6B,kBAA0B;AAC9D,UAAM,aAAa,KAAK,eAAe,cAAc;AACrD,UAAM,cAAc,gCAAgC,KAAK,gBAAgB,UAAU;AACnF,UAAM,eAAe,YAAY,KAAK,WAAS,MAAM,SAAS,oBAAoB,mBAAmB,MAAM,GAAG;AAE9G,QAAI,cAAc;AACjB,aAAO;AAAA,IACR,OAAO;AACN,aAAO,EAAE,OAAO,kBAAkB,KAAK,mBAAmB,EAAE;AAAA,IAC7D;AAAA,EACD;AAAA,EAEQ,UAAU,aAA6B,eAAkC,KAA4C,iBAAiC;AAC7J,UAAM,UAAU,KAAK,KAAK,qBAAqB,eAAe;AAC9D,UAAM,aAAa,KAAK,KAAK,cAAc,eAAe;AAC1D,UAAM,gCAAgC,kBAAkB,UAAU,UAAU,UAAU;AACtF,UAAM,EAAE,iBAAiB,IAAI,KAAK,eAAe,gBAAgB,+BAA+B,KAAK,eAAe,WAAW,QAAQ;AACvI,UAAM,wBAAwB,gCAAgC,KAAK,KAAK,YAAY,mBAAmB;AACvG,UAAM,eAAe,KAAK,eAAe,WAAW,EAAE,sBAAsB,EAAE;AAC9E,QAAI,wBAAwB,KAAK,wBAAwB,cAAc;AAEtE;AAAA,IACD;AAEA,UAAM,SAAU,IAAI,WAAW,CAAC,SAAS,eAAiB,IAAI,UAAU,SAAS;AAEjF,QAAI,CAAC,KAAK,eAAe,SAAS,GAAG;AACpC;AAAA,IACD;AAEA,UAAM,YAAY,KAAK,eAAe;AAEtC,QAAI,QAAQ;AACX,YAAM,mBAAmB,KAAK,eAAe,aAAa,WAAW;AACrE,YAAM,QAAQ,KAAK,6BAA6B,gBAAgB;AAEhE,UAAI,gBAAgB,KAAK,eAAe,aAAa,eAAe;AACpE,UAAI,kBAAkB,SAAS;AAC9B,cAAM,kBAAkB,KAAK,eAAe,aAAa,eAAe;AACxE,cAAM,SAAS,KAAK,eAAe,wBAAwB,eAAe;AAC1E,wBAAgB;AAAA,MACjB;AAEA,UAAI;AACJ,UAAI;AAEJ,UAAI,iBAAiB,MAAM,OAAO;AACjC,yBAAiB,EAAE,OAAO,eAAe,KAAK,gBAAgB,MAAM,MAAM,MAAM,MAAM;AACtF,qBAAa,EAAE,OAAO,gBAAgB,mBAAmB,MAAM,OAAO,KAAK,gBAAgB,mBAAmB,MAAM,QAAQ,EAAE;AAAA,MAC/H,OAAO;AACN,cAAM,QAAS,gBAAgB,MAAM;AACrC,yBAAiB,EAAE,OAAO,MAAM,QAAQ,OAAO,KAAK,MAAM,MAAM,MAAM;AACtE,qBAAa,EAAE,OAAO,mBAAmB,OAAO,KAAK,mBAAmB,QAAQ,EAAE;AAAA,MACnF;AAEA,gBAAU,WAAW;AAAA,QACpB;AAAA,UACC,UAAU,aAAa;AAAA,UACvB,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO,oBAAoB,CAAC,KAAK,CAAC,EAAE,IAAI,WAAS,2BAA2B,KAAK,eAAe,OAAO,KAAK,EAAG,KAAK,CAAC;AAAA,QACtH;AAAA,MACD,GAAG,MAAM,EAAE,MAAM,mBAAmB,OAAO,OAAO,KAAK,eAAe,SAAS,GAAG,YAAY,KAAK,eAAe,cAAc,EAAE,GAAG,OAAO,EAAE,MAAM,mBAAmB,OAAO,OAAO,YAAY,YAAY,CAAC,cAAc,EAAE,IAAI,QAAW,IAAI;AACjP,WAAK,eAAe,sBAAsB,cAAc;AAAA,IACzD,OAAO;AACN,2BAAqB,KAAK,gBAAgB,aAAa,eAAe,eAAe;AAAA,IACtF;AAAA,EACD;AAAA,EAEQ,gBAAgB,OAA4B;AACnD,QAAI,CAAC,MAAM,aAAa,iBAAiB,CAAC,IAAI,WAAW,MAAM,aAAa,eAA8B,KAAK,eAAe,WAAW,CAAC,GAAG;AAC5I,WAAK,6BAA6B,KAAK;AAAA,IACxC;AAAA,EACD;AAAA,EAEQ,cAAoB;AAC3B,QAAI,KAAK,oBAAoB;AAC5B,WAAK,aAAa,QAAQ,UAAQ,KAAK,WAAW,KAAK;AACvD,WAAK,qBAAqB;AAC1B,WAAK,eAAe,CAAC;AAAA,IACtB;AAEA,SAAK,6BAA6B,KAAK;AAAA,EACxC;AAAA,EAEA,mBAAmB,cAAsC,UAAuB,aAA4B,mBAA4C;AACvJ,UAAM,YAAY,aAAa;AAC/B,eAAW,cAAc,aAAa;AACrC,iBAAW,aAAa,aAAa,MAAM;AAAA,IAC5C;AAEA,UAAM,YAAY,6BAAM;AACvB,UAAI,CAAC,KAAK,eAAe,gBAAgB,kBAAkB,EAAE,sBAAsB,CAAC,CAAC,KAAK,eAAe,YAAY;AACpH;AAAA,MACD;AAGA,gBAAU,UAAU,OAAO,cAAc;AACzC,WAAK,YAAY;AAAA,IAClB,GARkB;AASlB,eAAW,cAAc,aAAa;AACrC,mBAAa,oBAAoB,IAAI,IAAI,sBAAsB,YAAY,IAAI,UAAU,UAAU,SAAS,CAAC;AAAA,IAC9G;AAEA,UAAM,cAAc,wBAAC,UAAqB;AACzC,UAAI,CAAC,MAAM,cAAc;AACxB;AAAA,MACD;AAEA,UAAI,CAAC,KAAK,eAAe,gBAAgB,kBAAkB,EAAE,sBAAsB,CAAC,CAAC,KAAK,eAAe,YAAY;AACpH;AAAA,MACD;AAEA,WAAK,qBAAqB,aAAa;AACvC,WAAK,eAAe,KAAK,eAAe,cAAc,EAAE,IAAI,WAAS,KAAK,eAAe,gBAAgB,KAAK,CAAC,EAAE,KAAK;AACtH,WAAK,aAAa,QAAQ,UAAQ,KAAK,WAAW,IAAI;AAEtD,YAAM,YAAY,kBAAkB;AACpC,eAAS,cAAe,YAAY,SAAS;AAC7C,YAAM,aAAa,aAAa,WAAW,GAAG,CAAC;AAC/C,iBAAW,MAAM,UAAU,OAAO,GAAG,CAAC;AAAA,IACvC,GAjBoB;AAkBpB,eAAW,cAAc,aAAa;AACrC,mBAAa,oBAAoB,IAAI,IAAI,sBAAsB,YAAY,IAAI,UAAU,YAAY,WAAW,CAAC;AAAA,IAClH;AAAA,EACD;AAAA,EAEO,kBAAkB,MAAsB,cAAsB;AACpE,QAAI,CAAC,KAAK,eAAe,gBAAgB,kBAAkB,EAAE,sBAAsB,CAAC,CAAC,KAAK,eAAe,YAAY;AACpH;AAAA,IACD;AAEA,SAAK,qBAAqB;AAC1B,SAAK,6BAA6B,IAAI;AAAA,EACvC;AAAA,EAEO,aAAa,MAAsB,aAAqB;AAC9D,QAAI,CAAC,KAAK,eAAe,gBAAgB,kBAAkB,EAAE,sBAAsB,CAAC,CAAC,KAAK,eAAe,YAAY;AACpH;AAAA,IACD;AAEA,UAAM,SAAS,KAAK,KAAK,UAAU,WAAW;AAC9C,QAAI,UAAU,WAAW,MAAM;AAC9B,YAAM,UAAU,KAAK,KAAK,qBAAqB,MAAM;AACrD,YAAM,aAAa,KAAK,KAAK,cAAc,MAAM;AAEjD,YAAM,gBAAgB,KAAK,6BAA6B,aAAa,SAAS,UAAU;AACxF,YAAM,gCAAgC,kBAAkB,UAAU,UAAU,UAAU;AACtF,WAAK,sBAAsB,eAAe,6BAA6B;AAAA,IACxE;AAGA,QAAI,KAAK,uBAAuB,MAAM;AACrC;AAAA,IACD;AAEA,UAAM,mBAAmB,KAAK,eAAe,WAAW,EAAE,sBAAsB;AAChF,UAAM,sBAAsB,cAAc,KAAK,KAAK;AAGpD,UAAM,4BAA4B;AAElC,UAAM,yBAAyB;AAE/B,UAAM,qBAAqB,sBAAsB,iBAAiB;AAClE,QAAI,qBAAqB,2BAA2B;AACnD,WAAK,KAAK,aAAa,0BAA0B,IAAI,qBAAqB;AAAA,IAC3E,WAAW,qBAAqB,IAAI,2BAA2B;AAC9D,WAAK,KAAK,aAAa,0BAA0B,KAAM,IAAI,sBAAsB;AAAA,IAClF;AAAA,EACD;AAAA,EAEO,gBAAgB,OAAuB;AAC7C,SAAK,6BAA6B,KAAK;AAAA,EACxC;AAAA,EAEO,aAAa,MAAsB,KAAiE;AAC1G,SAAK,qBAAqB;AAC1B,SAAK,6BAA6B,KAAK;AAEvC,UAAM,SAAS,KAAK,KAAK,UAAU,IAAI,WAAW;AAClD,QAAI,CAAC,UAAU,WAAW,MAAM;AAC/B;AAAA,IACD;AAEA,UAAM,UAAU,KAAK,KAAK,qBAAqB,MAAM;AACrD,UAAM,aAAa,KAAK,KAAK,cAAc,MAAM;AACjD,UAAM,gBAAgB,KAAK,6BAA6B,IAAI,aAAa,SAAS,UAAU;AAC5F,SAAK,UAAU,MAAM,eAAe,KAAK,MAAM;AAAA,EAChD;AAAA,EAEQ,6BAA6B,SAAiB,SAAiB,YAAoB;AAC1F,UAAM,mBAAmB,UAAU;AACnC,UAAM,eAAe,mBAAmB;AAExC,WAAO,KAAK,uBAAuB,YAAY;AAAA,EAChD;AAAA,EAES,UAAU;AAClB,SAAK,iBAAiB;AACtB,UAAM,QAAQ;AAAA,EACf;AACD;AAEO,SAAS,qBAAqB,QAAiC,aAA6B,eAAkC,iBAAuC;AAC3K,QAAM,mBAAmB,OAAO,aAAa,WAAW;AACxD,MAAI,gBAAgB,OAAO,aAAa,eAAe;AAEvD,MAAI,OAAO,qBAAqB,YAAY,OAAO,kBAAkB,UAAU;AAC9E;AAAA,EACD;AAGA,MAAI,kBAAkB,SAAS;AAC9B,UAAM,SAAS,OAAO,wBAAwB,aAAa,KAAK;AAChE,oBAAgB;AAAA,EACjB;AAEA,MAAI,aAAa,OAAO,cAAc;AACtC,MAAI,CAAC,WAAW,QAAQ;AACvB,iBAAa,CAAC,OAAO,SAAS,CAAC;AAAA,EAChC;AAEA,MAAI,mBAAmB,OAAO,SAAS,EAAE;AAGzC,MAAI,CAAC,WAAW,KAAK,OAAK,EAAE,SAAS,oBAAoB,EAAE,MAAM,gBAAgB,GAAG;AACnF,iBAAa,CAAC,EAAE,OAAO,kBAAkB,KAAK,mBAAmB,EAAE,CAAC;AACpE,uBAAmB;AAAA,EACpB;AAEA,QAAM,qBAAqB,WAAW,KAAK,WAAS,MAAM,SAAS,iBAAiB,MAAM,MAAM,aAAa;AAC7G,MAAI,oBAAoB;AACvB,oBAAgB,mBAAmB;AAAA,EACpC;AAGA,MAAI,WAAW;AACf,MAAI,cAAc;AAClB,MAAI,kBAAkB;AAKtB,aAAW,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAC3C,QAAM,QAAQ,WAAW,IAAI,WAAS;AACrC,UAAM,SAAS,MAAM,MAAM,MAAM;AAGjC,QAAI,eAAe;AACnB,QAAI,MAAM,OAAO,iBAAiB;AACjC,qBAAe,CAAC;AAAA,IACjB;AAEA,UAAM,SAAS,kBAAkB;AAGjC,QAAI,oBAAoB,MAAM,SAAS,oBAAoB,MAAM,KAAK;AACrE,YAAM,SAAS,mBAAmB,MAAM;AACxC,oBAAc,SAAS;AAAA,IACxB;AAGA,UAAM,iBAAiB,MAAM,SAAS,gBAAgB,WAAW;AAEjE,UAAM,OAAsB;AAAA,MAC3B,UAAU,aAAa;AAAA,MACvB,OAAO,MAAM,QAAQ;AAAA,MACrB;AAAA,MACA;AAAA,IACD;AACA,gBAAY;AAGZ,QAAI,MAAM,MAAM,iBAAiB;AAChC,yBAAmB;AAAA,IACpB;AAEA,WAAO;AAAA,EACR,CAAC;AAED,QAAM,WAAW,MAAM,MAAM,SAAS,CAAC;AACvC,QAAM,iBAAiB,EAAE,OAAO,SAAS,QAAQ,KAAK,SAAS,SAAS,SAAS;AACjF,QAAM,aAAa,EAAE,OAAO,aAAa,KAAK,cAAc,EAAE;AAE9D,SAAO,UAAW;AAAA,IACjB;AAAA,IACA;AAAA,IACA,EAAE,MAAM,mBAAmB,OAAO,OAAO,OAAO,SAAS,GAAG,YAAY,OAAO,cAAc,EAAE;AAAA,IAC/F,OAAO,EAAE,MAAM,mBAAmB,OAAO,OAAO,YAAY,YAAY,CAAC,cAAc,EAAE;AAAA,IACzF;AAAA,IAAW;AAAA,EAAI;AAChB,SAAO,sBAAsB,cAAc;AAC5C;AAxFgB;",
  "names": []
}
