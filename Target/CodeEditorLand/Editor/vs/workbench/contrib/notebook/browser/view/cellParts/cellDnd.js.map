{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/cellDnd.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from \"../../../../../../base/browser/dom.js\";\nimport { Delayer } from \"../../../../../../base/common/async.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../../../base/common/lifecycle.js\";\nimport * as platform from \"../../../../../../base/common/platform.js\";\nimport { cloneNotebookCellTextModel } from \"../../../common/model/notebookCellTextModel.js\";\nimport {\n\tCellEditType,\n\ttype ICellMoveEdit,\n\tSelectionStateType,\n} from \"../../../common/notebookCommon.js\";\nimport {\n\ttype ICellRange,\n\tcellRangesToIndexes,\n} from \"../../../common/notebookRange.js\";\nimport {\n\ttype ICellViewModel,\n\ttype INotebookEditorDelegate,\n\texpandCellRangesWithHiddenCells,\n} from \"../../notebookBrowser.js\";\nimport type { CellViewModelStateChangeEvent } from \"../../notebookViewEvents.js\";\nimport { CellContentPart } from \"../cellPart.js\";\nimport type {\n\tBaseCellRenderTemplate,\n\tINotebookCellList,\n} from \"../notebookRenderingCommon.js\";\n\nconst $ = DOM.$;\n\nconst DRAGGING_CLASS = \"cell-dragging\";\nconst GLOBAL_DRAG_CLASS = \"global-drag-active\";\n\ntype DragImageProvider = () => HTMLElement;\n\ninterface CellDragEvent {\n\tbrowserEvent: DragEvent;\n\tdraggedOverCell: ICellViewModel;\n\tcellTop: number;\n\tcellHeight: number;\n\tdragPosRatio: number;\n}\n\nexport class CellDragAndDropPart extends CellContentPart {\n\tconstructor(private readonly container: HTMLElement) {\n\t\tsuper();\n\t}\n\n\toverride didRenderCell(element: ICellViewModel): void {\n\t\tthis.update(element);\n\t}\n\n\toverride updateState(\n\t\telement: ICellViewModel,\n\t\te: CellViewModelStateChangeEvent,\n\t): void {\n\t\tif (e.dragStateChanged) {\n\t\t\tthis.update(element);\n\t\t}\n\t}\n\n\tprivate update(element: ICellViewModel) {\n\t\tthis.container.classList.toggle(DRAGGING_CLASS, element.dragging);\n\t}\n}\n\nexport class CellDragAndDropController extends Disposable {\n\t// TODO@roblourens - should probably use dataTransfer here, but any dataTransfer set makes the editor think I am dropping a file, need\n\t// to figure out how to prevent that\n\tprivate currentDraggedCell: ICellViewModel | undefined;\n\tprivate draggedCells: ICellViewModel[] = [];\n\n\tprivate listInsertionIndicator: HTMLElement;\n\n\tprivate list!: INotebookCellList;\n\n\tprivate isScrolling = false;\n\tprivate readonly scrollingDelayer: Delayer<void>;\n\n\tprivate readonly listOnWillScrollListener = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\tprivate notebookEditor: INotebookEditorDelegate,\n\t\tprivate readonly notebookListContainer: HTMLElement,\n\t) {\n\t\tsuper();\n\n\t\tthis.listInsertionIndicator = DOM.append(\n\t\t\tnotebookListContainer,\n\t\t\t$(\".cell-list-insertion-indicator\"),\n\t\t);\n\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\tnotebookListContainer.ownerDocument.body,\n\t\t\t\tDOM.EventType.DRAG_START,\n\t\t\t\tthis.onGlobalDragStart.bind(this),\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\tnotebookListContainer.ownerDocument.body,\n\t\t\t\tDOM.EventType.DRAG_END,\n\t\t\t\tthis.onGlobalDragEnd.bind(this),\n\t\t\t\ttrue,\n\t\t\t),\n\t\t);\n\n\t\tconst addCellDragListener = (\n\t\t\teventType: string,\n\t\t\thandler: (e: CellDragEvent) => void,\n\t\t\tuseCapture = false,\n\t\t) => {\n\t\t\tthis._register(\n\t\t\t\tDOM.addDisposableListener(\n\t\t\t\t\tnotebookEditor.getDomNode(),\n\t\t\t\t\teventType,\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tconst cellDragEvent = this.toCellDragEvent(e);\n\t\t\t\t\t\tif (cellDragEvent) {\n\t\t\t\t\t\t\thandler(cellDragEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tuseCapture,\n\t\t\t\t),\n\t\t\t);\n\t\t};\n\n\t\taddCellDragListener(\n\t\t\tDOM.EventType.DRAG_OVER,\n\t\t\t(event) => {\n\t\t\t\tif (!this.currentDraggedCell) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.browserEvent.preventDefault();\n\t\t\t\tthis.onCellDragover(event);\n\t\t\t},\n\t\t\ttrue,\n\t\t);\n\t\taddCellDragListener(DOM.EventType.DROP, (event) => {\n\t\t\tif (!this.currentDraggedCell) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.browserEvent.preventDefault();\n\t\t\tthis.onCellDrop(event);\n\t\t});\n\t\taddCellDragListener(DOM.EventType.DRAG_LEAVE, (event) => {\n\t\t\tevent.browserEvent.preventDefault();\n\t\t\tthis.onCellDragLeave(event);\n\t\t});\n\n\t\tthis.scrollingDelayer = this._register(new Delayer(200));\n\t}\n\n\tsetList(value: INotebookCellList) {\n\t\tthis.list = value;\n\n\t\tthis.listOnWillScrollListener.value = this.list.onWillScroll((e) => {\n\t\t\tif (!e.scrollTopChanged) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t\tthis.isScrolling = true;\n\t\t\tthis.scrollingDelayer.trigger(() => {\n\t\t\t\tthis.isScrolling = false;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate setInsertIndicatorVisibility(visible: boolean) {\n\t\tthis.listInsertionIndicator.style.opacity = visible ? \"1\" : \"0\";\n\t}\n\n\tprivate toCellDragEvent(event: DragEvent): CellDragEvent | undefined {\n\t\tconst targetTop =\n\t\t\tthis.notebookListContainer.getBoundingClientRect().top;\n\t\tconst dragOffset = this.list.scrollTop + event.clientY - targetTop;\n\t\tconst draggedOverCell = this.list.elementAt(dragOffset);\n\t\tif (!draggedOverCell) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst cellTop = this.list.getCellViewScrollTop(draggedOverCell);\n\t\tconst cellHeight = this.list.elementHeight(draggedOverCell);\n\n\t\tconst dragPosInElement = dragOffset - cellTop;\n\t\tconst dragPosRatio = dragPosInElement / cellHeight;\n\n\t\treturn {\n\t\t\tbrowserEvent: event,\n\t\t\tdraggedOverCell,\n\t\t\tcellTop,\n\t\t\tcellHeight,\n\t\t\tdragPosRatio,\n\t\t};\n\t}\n\n\tclearGlobalDragState() {\n\t\tthis.notebookEditor.getDomNode().classList.remove(GLOBAL_DRAG_CLASS);\n\t}\n\n\tprivate onGlobalDragStart() {\n\t\tthis.notebookEditor.getDomNode().classList.add(GLOBAL_DRAG_CLASS);\n\t}\n\n\tprivate onGlobalDragEnd() {\n\t\tthis.notebookEditor.getDomNode().classList.remove(GLOBAL_DRAG_CLASS);\n\t}\n\n\tprivate onCellDragover(event: CellDragEvent): void {\n\t\tif (!event.browserEvent.dataTransfer) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.currentDraggedCell) {\n\t\t\tevent.browserEvent.dataTransfer.dropEffect = \"none\";\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis.isScrolling ||\n\t\t\tthis.currentDraggedCell === event.draggedOverCell\n\t\t) {\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst dropDirection = this.getDropInsertDirection(event.dragPosRatio);\n\t\tconst insertionIndicatorAbsolutePos =\n\t\t\tdropDirection === \"above\"\n\t\t\t\t? event.cellTop\n\t\t\t\t: event.cellTop + event.cellHeight;\n\t\tthis.updateInsertIndicator(\n\t\t\tdropDirection,\n\t\t\tinsertionIndicatorAbsolutePos,\n\t\t);\n\t}\n\n\tprivate updateInsertIndicator(\n\t\tdropDirection: string,\n\t\tinsertionIndicatorAbsolutePos: number,\n\t) {\n\t\tconst { bottomToolbarGap } =\n\t\t\tthis.notebookEditor.notebookOptions.computeBottomToolbarDimensions(\n\t\t\t\tthis.notebookEditor.textModel?.viewType,\n\t\t\t);\n\t\tconst insertionIndicatorTop =\n\t\t\tinsertionIndicatorAbsolutePos -\n\t\t\tthis.list.scrollTop +\n\t\t\tbottomToolbarGap / 2;\n\t\tif (insertionIndicatorTop >= 0) {\n\t\t\tthis.listInsertionIndicator.style.top = `${insertionIndicatorTop}px`;\n\t\t\tthis.setInsertIndicatorVisibility(true);\n\t\t} else {\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t}\n\t}\n\n\tprivate getDropInsertDirection(dragPosRatio: number): \"above\" | \"below\" {\n\t\treturn dragPosRatio < 0.5 ? \"above\" : \"below\";\n\t}\n\n\tprivate onCellDrop(event: CellDragEvent): void {\n\t\tconst draggedCell = this.currentDraggedCell!;\n\n\t\tif (\n\t\t\tthis.isScrolling ||\n\t\t\tthis.currentDraggedCell === event.draggedOverCell\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dragCleanup();\n\n\t\tconst dropDirection = this.getDropInsertDirection(event.dragPosRatio);\n\t\tthis._dropImpl(\n\t\t\tdraggedCell,\n\t\t\tdropDirection,\n\t\t\tevent.browserEvent,\n\t\t\tevent.draggedOverCell,\n\t\t);\n\t}\n\n\tprivate getCellRangeAroundDragTarget(draggedCellIndex: number) {\n\t\tconst selections = this.notebookEditor.getSelections();\n\t\tconst modelRanges = expandCellRangesWithHiddenCells(\n\t\t\tthis.notebookEditor,\n\t\t\tselections,\n\t\t);\n\t\tconst nearestRange = modelRanges.find(\n\t\t\t(range) =>\n\t\t\t\trange.start <= draggedCellIndex && draggedCellIndex < range.end,\n\t\t);\n\n\t\tif (nearestRange) {\n\t\t\treturn nearestRange;\n\t\t} else {\n\t\t\treturn { start: draggedCellIndex, end: draggedCellIndex + 1 };\n\t\t}\n\t}\n\n\tprivate _dropImpl(\n\t\tdraggedCell: ICellViewModel,\n\t\tdropDirection: \"above\" | \"below\",\n\t\tctx: { ctrlKey: boolean; altKey: boolean },\n\t\tdraggedOverCell: ICellViewModel,\n\t) {\n\t\tconst cellTop = this.list.getCellViewScrollTop(draggedOverCell);\n\t\tconst cellHeight = this.list.elementHeight(draggedOverCell);\n\t\tconst insertionIndicatorAbsolutePos =\n\t\t\tdropDirection === \"above\" ? cellTop : cellTop + cellHeight;\n\t\tconst { bottomToolbarGap } =\n\t\t\tthis.notebookEditor.notebookOptions.computeBottomToolbarDimensions(\n\t\t\t\tthis.notebookEditor.textModel?.viewType,\n\t\t\t);\n\t\tconst insertionIndicatorTop =\n\t\t\tinsertionIndicatorAbsolutePos -\n\t\t\tthis.list.scrollTop +\n\t\t\tbottomToolbarGap / 2;\n\t\tconst editorHeight = this.notebookEditor\n\t\t\t.getDomNode()\n\t\t\t.getBoundingClientRect().height;\n\t\tif (insertionIndicatorTop < 0 || insertionIndicatorTop > editorHeight) {\n\t\t\t// Ignore drop, insertion point is off-screen\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCopy =\n\t\t\t(ctx.ctrlKey && !platform.isMacintosh) ||\n\t\t\t(ctx.altKey && platform.isMacintosh);\n\n\t\tif (!this.notebookEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst textModel = this.notebookEditor.textModel;\n\n\t\tif (isCopy) {\n\t\t\tconst draggedCellIndex =\n\t\t\t\tthis.notebookEditor.getCellIndex(draggedCell);\n\t\t\tconst range = this.getCellRangeAroundDragTarget(draggedCellIndex);\n\n\t\t\tlet originalToIdx =\n\t\t\t\tthis.notebookEditor.getCellIndex(draggedOverCell);\n\t\t\tif (dropDirection === \"below\") {\n\t\t\t\tconst relativeToIndex =\n\t\t\t\t\tthis.notebookEditor.getCellIndex(draggedOverCell);\n\t\t\t\tconst newIdx =\n\t\t\t\t\tthis.notebookEditor.getNextVisibleCellIndex(\n\t\t\t\t\t\trelativeToIndex,\n\t\t\t\t\t);\n\t\t\t\toriginalToIdx = newIdx;\n\t\t\t}\n\n\t\t\tlet finalSelection: ICellRange;\n\t\t\tlet finalFocus: ICellRange;\n\n\t\t\tif (originalToIdx <= range.start) {\n\t\t\t\tfinalSelection = {\n\t\t\t\t\tstart: originalToIdx,\n\t\t\t\t\tend: originalToIdx + range.end - range.start,\n\t\t\t\t};\n\t\t\t\tfinalFocus = {\n\t\t\t\t\tstart: originalToIdx + draggedCellIndex - range.start,\n\t\t\t\t\tend: originalToIdx + draggedCellIndex - range.start + 1,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst delta = originalToIdx - range.start;\n\t\t\t\tfinalSelection = {\n\t\t\t\t\tstart: range.start + delta,\n\t\t\t\t\tend: range.end + delta,\n\t\t\t\t};\n\t\t\t\tfinalFocus = {\n\t\t\t\t\tstart: draggedCellIndex + delta,\n\t\t\t\t\tend: draggedCellIndex + delta + 1,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\ttextModel.applyEdits(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\t\tindex: originalToIdx,\n\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\tcells: cellRangesToIndexes([range]).map((index) =>\n\t\t\t\t\t\t\tcloneNotebookCellTextModel(\n\t\t\t\t\t\t\t\tthis.notebookEditor.cellAt(index)!.model,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttrue,\n\t\t\t\t{\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: this.notebookEditor.getFocus(),\n\t\t\t\t\tselections: this.notebookEditor.getSelections(),\n\t\t\t\t},\n\t\t\t\t() => ({\n\t\t\t\t\tkind: SelectionStateType.Index,\n\t\t\t\t\tfocus: finalFocus,\n\t\t\t\t\tselections: [finalSelection],\n\t\t\t\t}),\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis.notebookEditor.revealCellRangeInView(finalSelection);\n\t\t} else {\n\t\t\tperformCellDropEdits(\n\t\t\t\tthis.notebookEditor,\n\t\t\t\tdraggedCell,\n\t\t\t\tdropDirection,\n\t\t\t\tdraggedOverCell,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate onCellDragLeave(event: CellDragEvent): void {\n\t\tif (\n\t\t\t!event.browserEvent.relatedTarget ||\n\t\t\t!DOM.isAncestor(\n\t\t\t\tevent.browserEvent.relatedTarget as HTMLElement,\n\t\t\t\tthis.notebookEditor.getDomNode(),\n\t\t\t)\n\t\t) {\n\t\t\tthis.setInsertIndicatorVisibility(false);\n\t\t}\n\t}\n\n\tprivate dragCleanup(): void {\n\t\tif (this.currentDraggedCell) {\n\t\t\tthis.draggedCells.forEach((cell) => (cell.dragging = false));\n\t\t\tthis.currentDraggedCell = undefined;\n\t\t\tthis.draggedCells = [];\n\t\t}\n\n\t\tthis.setInsertIndicatorVisibility(false);\n\t}\n\n\tregisterDragHandle(\n\t\ttemplateData: BaseCellRenderTemplate,\n\t\tcellRoot: HTMLElement,\n\t\tdragHandles: HTMLElement[],\n\t\tdragImageProvider: DragImageProvider,\n\t): void {\n\t\tconst container = templateData.container;\n\t\tfor (const dragHandle of dragHandles) {\n\t\t\tdragHandle.setAttribute(\"draggable\", \"true\");\n\t\t}\n\n\t\tconst onDragEnd = () => {\n\t\t\tif (\n\t\t\t\t!this.notebookEditor.notebookOptions.getDisplayOptions()\n\t\t\t\t\t.dragAndDropEnabled ||\n\t\t\t\t!!this.notebookEditor.isReadOnly\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Note, templateData may have a different element rendered into it by now\n\t\t\tcontainer.classList.remove(DRAGGING_CLASS);\n\t\t\tthis.dragCleanup();\n\t\t};\n\t\tfor (const dragHandle of dragHandles) {\n\t\t\ttemplateData.templateDisposables.add(\n\t\t\t\tDOM.addDisposableListener(\n\t\t\t\t\tdragHandle,\n\t\t\t\t\tDOM.EventType.DRAG_END,\n\t\t\t\t\tonDragEnd,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst onDragStart = (event: DragEvent) => {\n\t\t\tif (!event.dataTransfer) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!this.notebookEditor.notebookOptions.getDisplayOptions()\n\t\t\t\t\t.dragAndDropEnabled ||\n\t\t\t\t!!this.notebookEditor.isReadOnly\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.currentDraggedCell = templateData.currentRenderedCell!;\n\t\t\tthis.draggedCells = this.notebookEditor\n\t\t\t\t.getSelections()\n\t\t\t\t.flatMap((range) => this.notebookEditor.getCellsInRange(range));\n\t\t\tthis.draggedCells.forEach((cell) => (cell.dragging = true));\n\n\t\t\tconst dragImage = dragImageProvider();\n\t\t\tcellRoot.parentElement!.appendChild(dragImage);\n\t\t\tevent.dataTransfer.setDragImage(dragImage, 0, 0);\n\t\t\tsetTimeout(() => dragImage.remove(), 0); // Comment this out to debug drag image layout\n\t\t};\n\t\tfor (const dragHandle of dragHandles) {\n\t\t\ttemplateData.templateDisposables.add(\n\t\t\t\tDOM.addDisposableListener(\n\t\t\t\t\tdragHandle,\n\t\t\t\t\tDOM.EventType.DRAG_START,\n\t\t\t\t\tonDragStart,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic startExplicitDrag(cell: ICellViewModel, _dragOffsetY: number) {\n\t\tif (\n\t\t\t!this.notebookEditor.notebookOptions.getDisplayOptions()\n\t\t\t\t.dragAndDropEnabled ||\n\t\t\t!!this.notebookEditor.isReadOnly\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentDraggedCell = cell;\n\t\tthis.setInsertIndicatorVisibility(true);\n\t}\n\n\tpublic explicitDrag(cell: ICellViewModel, dragOffsetY: number) {\n\t\tif (\n\t\t\t!this.notebookEditor.notebookOptions.getDisplayOptions()\n\t\t\t\t.dragAndDropEnabled ||\n\t\t\t!!this.notebookEditor.isReadOnly\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst target = this.list.elementAt(dragOffsetY);\n\t\tif (target && target !== cell) {\n\t\t\tconst cellTop = this.list.getCellViewScrollTop(target);\n\t\t\tconst cellHeight = this.list.elementHeight(target);\n\n\t\t\tconst dropDirection = this.getExplicitDragDropDirection(\n\t\t\t\tdragOffsetY,\n\t\t\t\tcellTop,\n\t\t\t\tcellHeight,\n\t\t\t);\n\t\t\tconst insertionIndicatorAbsolutePos =\n\t\t\t\tdropDirection === \"above\" ? cellTop : cellTop + cellHeight;\n\t\t\tthis.updateInsertIndicator(\n\t\t\t\tdropDirection,\n\t\t\t\tinsertionIndicatorAbsolutePos,\n\t\t\t);\n\t\t}\n\n\t\t// Try scrolling list if needed\n\t\tif (this.currentDraggedCell !== cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst notebookViewRect = this.notebookEditor\n\t\t\t.getDomNode()\n\t\t\t.getBoundingClientRect();\n\t\tconst eventPositionInView = dragOffsetY - this.list.scrollTop;\n\n\t\t// Percentage from the top/bottom of the screen where we start scrolling while dragging\n\t\tconst notebookViewScrollMargins = 0.2;\n\n\t\tconst maxScrollDeltaPerFrame = 20;\n\n\t\tconst eventPositionRatio =\n\t\t\teventPositionInView / notebookViewRect.height;\n\t\tif (eventPositionRatio < notebookViewScrollMargins) {\n\t\t\tthis.list.scrollTop -=\n\t\t\t\tmaxScrollDeltaPerFrame *\n\t\t\t\t(1 - eventPositionRatio / notebookViewScrollMargins);\n\t\t} else if (eventPositionRatio > 1 - notebookViewScrollMargins) {\n\t\t\tthis.list.scrollTop +=\n\t\t\t\tmaxScrollDeltaPerFrame *\n\t\t\t\t(1 - (1 - eventPositionRatio) / notebookViewScrollMargins);\n\t\t}\n\t}\n\n\tpublic endExplicitDrag(_cell: ICellViewModel) {\n\t\tthis.setInsertIndicatorVisibility(false);\n\t}\n\n\tpublic explicitDrop(\n\t\tcell: ICellViewModel,\n\t\tctx: { dragOffsetY: number; ctrlKey: boolean; altKey: boolean },\n\t) {\n\t\tthis.currentDraggedCell = undefined;\n\t\tthis.setInsertIndicatorVisibility(false);\n\n\t\tconst target = this.list.elementAt(ctx.dragOffsetY);\n\t\tif (!target || target === cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cellTop = this.list.getCellViewScrollTop(target);\n\t\tconst cellHeight = this.list.elementHeight(target);\n\t\tconst dropDirection = this.getExplicitDragDropDirection(\n\t\t\tctx.dragOffsetY,\n\t\t\tcellTop,\n\t\t\tcellHeight,\n\t\t);\n\t\tthis._dropImpl(cell, dropDirection, ctx, target);\n\t}\n\n\tprivate getExplicitDragDropDirection(\n\t\tclientY: number,\n\t\tcellTop: number,\n\t\tcellHeight: number,\n\t) {\n\t\tconst dragPosInElement = clientY - cellTop;\n\t\tconst dragPosRatio = dragPosInElement / cellHeight;\n\n\t\treturn this.getDropInsertDirection(dragPosRatio);\n\t}\n\n\toverride dispose() {\n\t\tthis.notebookEditor = null!;\n\t\tsuper.dispose();\n\t}\n}\n\nexport function performCellDropEdits(\n\teditor: INotebookEditorDelegate,\n\tdraggedCell: ICellViewModel,\n\tdropDirection: \"above\" | \"below\",\n\tdraggedOverCell: ICellViewModel,\n): void {\n\tconst draggedCellIndex = editor.getCellIndex(draggedCell)!;\n\tlet originalToIdx = editor.getCellIndex(draggedOverCell)!;\n\n\tif (\n\t\ttypeof draggedCellIndex !== \"number\" ||\n\t\ttypeof originalToIdx !== \"number\"\n\t) {\n\t\treturn;\n\t}\n\n\t// If dropped on a folded markdown range, insert after the folding range\n\tif (dropDirection === \"below\") {\n\t\tconst newIdx =\n\t\t\teditor.getNextVisibleCellIndex(originalToIdx) ?? originalToIdx;\n\t\toriginalToIdx = newIdx;\n\t}\n\n\tlet selections = editor.getSelections();\n\tif (!selections.length) {\n\t\tselections = [editor.getFocus()];\n\t}\n\n\tlet originalFocusIdx = editor.getFocus().start;\n\n\t// If the dragged cell is not focused/selected, ignore the current focus/selection and use the dragged idx\n\tif (\n\t\t!selections.some(\n\t\t\t(s) => s.start <= draggedCellIndex && s.end > draggedCellIndex,\n\t\t)\n\t) {\n\t\tselections = [{ start: draggedCellIndex, end: draggedCellIndex + 1 }];\n\t\toriginalFocusIdx = draggedCellIndex;\n\t}\n\n\tconst droppedInSelection = selections.find(\n\t\t(range) => range.start <= originalToIdx && range.end > originalToIdx,\n\t);\n\tif (droppedInSelection) {\n\t\toriginalToIdx = droppedInSelection.start;\n\t}\n\n\tlet numCells = 0;\n\tlet focusNewIdx = originalToIdx;\n\tlet newInsertionIdx = originalToIdx;\n\n\t// Compute a set of edits which will be applied in reverse order by the notebook text model.\n\t// `index`: the starting index of the range, after previous edits have been applied\n\t// `newIdx`: the destination index, after this edit's range has been removed\n\tselections.sort((a, b) => b.start - a.start);\n\tconst edits = selections.map((range) => {\n\t\tconst length = range.end - range.start;\n\n\t\t// If this range is before the insertion point, subtract the cells in this range from the \"to\" index\n\t\tlet toIndexDelta = 0;\n\t\tif (range.end <= newInsertionIdx) {\n\t\t\ttoIndexDelta = -length;\n\t\t}\n\n\t\tconst newIdx = newInsertionIdx + toIndexDelta;\n\n\t\t// If this range contains the focused cell, set the new focus index to the new index of the cell\n\t\tif (originalFocusIdx >= range.start && originalFocusIdx <= range.end) {\n\t\t\tconst offset = originalFocusIdx - range.start;\n\t\t\tfocusNewIdx = newIdx + offset;\n\t\t}\n\n\t\t// If below the insertion point, the original index will have been shifted down\n\t\tconst fromIndexDelta = range.start >= originalToIdx ? numCells : 0;\n\n\t\tconst edit: ICellMoveEdit = {\n\t\t\teditType: CellEditType.Move,\n\t\t\tindex: range.start + fromIndexDelta,\n\t\t\tlength,\n\t\t\tnewIdx,\n\t\t};\n\t\tnumCells += length;\n\n\t\t// If a range was moved down, the insertion index needs to be adjusted\n\t\tif (range.end < newInsertionIdx) {\n\t\t\tnewInsertionIdx -= length;\n\t\t}\n\n\t\treturn edit;\n\t});\n\n\tconst lastEdit = edits[edits.length - 1];\n\tconst finalSelection = {\n\t\tstart: lastEdit.newIdx,\n\t\tend: lastEdit.newIdx + numCells,\n\t};\n\tconst finalFocus = { start: focusNewIdx, end: focusNewIdx + 1 };\n\n\teditor.textModel!.applyEdits(\n\t\tedits,\n\t\ttrue,\n\t\t{\n\t\t\tkind: SelectionStateType.Index,\n\t\t\tfocus: editor.getFocus(),\n\t\t\tselections: editor.getSelections(),\n\t\t},\n\t\t() => ({\n\t\t\tkind: SelectionStateType.Index,\n\t\t\tfocus: finalFocus,\n\t\t\tselections: [finalSelection],\n\t\t}),\n\t\tundefined,\n\t\ttrue,\n\t);\n\teditor.revealCellRangeInView(finalSelection);\n}\n"],
  "mappings": "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",
  "names": []
}
