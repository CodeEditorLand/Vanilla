import { Disposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IActiveCodeEditor } from "vs/editor/browser/editorBrowser";
import { ISingleEditOperation } from "vs/editor/common/core/editOperation";
import { ILanguageService } from "vs/editor/common/languages/language";
import { IEditorWorkerService } from "vs/editor/common/services/editorWorker";
import { IModelService } from "vs/editor/common/services/model";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IStorageService } from "vs/platform/storage/common/storage";
import { IChatModel } from "vs/workbench/contrib/chat/common/chatModel";
import { IChatService } from "vs/workbench/contrib/chat/common/chatService";
import { ProgressingEditsOptions } from "vs/workbench/contrib/inlineChat/browser/inlineChatStrategies";
import { ICellViewModel, INotebookEditor, INotebookEditorContribution } from "vs/workbench/contrib/notebook/browser/notebookBrowser";
import { INotebookExecutionStateService } from "vs/workbench/contrib/notebook/common/notebookExecutionStateService";
export interface INotebookCellTextModelLike {
    uri: URI;
    viewType: string;
}
export declare class NotebookChatController extends Disposable implements INotebookEditorContribution {
    private readonly _notebookEditor;
    private readonly _instantiationService;
    private readonly _contextKeyService;
    private readonly _editorWorkerService;
    private readonly _modelService;
    private readonly _languageService;
    private _executionStateService;
    private readonly _storageService;
    private readonly _chatService;
    static id: string;
    static counter: number;
    static get(editor: INotebookEditor): NotebookChatController | null;
    private static _storageKey;
    private static _promptHistory;
    private _historyOffset;
    private _historyCandidate;
    private _historyUpdate;
    private _promptCache;
    private readonly _onDidChangePromptCache;
    readonly onDidChangePromptCache: any;
    private _strategy;
    private _sessionCtor;
    private _warmupRequestCts?;
    private _activeRequestCts?;
    private readonly _ctxHasActiveRequest;
    private readonly _ctxCellWidgetFocused;
    private readonly _ctxUserDidEdit;
    private readonly _ctxOuterFocusPosition;
    private readonly _userEditingDisposables;
    private readonly _widgetDisposableStore;
    private _focusTracker;
    private _widget;
    private readonly _model;
    constructor(_notebookEditor: INotebookEditor, _instantiationService: IInstantiationService, _contextKeyService: IContextKeyService, _editorWorkerService: IEditorWorkerService, _modelService: IModelService, _languageService: ILanguageService, _executionStateService: INotebookExecutionStateService, _storageService: IStorageService, _chatService: IChatService);
    private _registerFocusTracker;
    run(index: number, input: string | undefined, autoSend: boolean | undefined): void;
    restore(editingCell: ICellViewModel, input: string): void;
    private _disposeWidget;
    private _createWidget;
    private _startSession;
    private _scrollWidgetIntoView;
    private _focusWidget;
    private _updateNotebookEditorFocusNSelections;
    hasSession(chatModel: IChatModel): boolean;
    getSessionInputUri(): any;
    acceptInput(): Promise<void>;
    private _makeChanges;
    private _updateUserEditingState;
    acceptSession(): Promise<void>;
    focusAbove(): Promise<void>;
    focusNext(): Promise<void>;
    hasFocus(): any;
    focus(): void;
    focusNearestWidget(index: number, direction: "above" | "below"): void;
    populateHistory(up: boolean): void;
    cancelCurrentRequest(discard: boolean): Promise<void>;
    getEditingCell(): any;
    discard(): void;
    dismiss(discard: boolean): void;
    isCellGeneratedByChat(cell: ICellViewModel): any;
    getPromptFromCache(cell: ICellViewModel): any;
    dispose(): void;
}
export declare class EditStrategy {
    private _editCount;
    constructor();
    makeProgressiveChanges(editor: IActiveCodeEditor, edits: ISingleEditOperation[], opts: ProgressingEditsOptions): Promise<void>;
    makeChanges(editor: IActiveCodeEditor, edits: ISingleEditOperation[]): Promise<void>;
}
