import{Emitter as C,Event as E}from"../../../../../base/common/event.js";import{Disposable as v,DisposableStore as U}from"../../../../../base/common/lifecycle.js";import"../../../../../base/common/uri.js";import{UnchangedRegion as I}from"../../../../../editor/browser/widget/diffEditor/diffEditorViewModel.js";import"../../../../../editor/common/services/editorWorker.js";import"../../../../../editor/common/services/resolverService.js";import"../../../../../editor/common/services/textResourceConfiguration.js";import"../../../../../platform/configuration/common/configuration.js";import{getEditorPadding as u}from"./diffCellEditorOptions.js";import{HeightOfHiddenLinesRegionInDiffEditor as L}from"./diffElementViewModel.js";class z extends v{constructor(n,i,t,d,r){super();this.editorWorkerService=i;this.textModelResolverService=t;this.textConfigurationService=d;this.lineHeight=r;this.options=this._register(x(n))}options;static Empty={options:{enabled:!1,contextLineCount:0,minimumLineCount:0,revealLineCount:0,onDidChangeEnablement:E.None},computeEditorHeight:(n,i)=>Promise.resolve(0)};async computeEditorHeight(n,i){const{numberOfUnchangedRegions:t,numberOfVisibleLines:d}=await S(n,i,this.options,this.editorWorkerService,this.textModelResolverService,this.textConfigurationService),r=d,a=t*L;return r*this.lineHeight+u(r).top+u(r).bottom+a}}function x(e){const o=new U,n=o.add(new C),i={enabled:e.getValue("diffEditor.hideUnchangedRegions.enabled"),minimumLineCount:e.getValue("diffEditor.hideUnchangedRegions.minimumLineCount"),contextLineCount:e.getValue("diffEditor.hideUnchangedRegions.contextLineCount"),revealLineCount:e.getValue("diffEditor.hideUnchangedRegions.revealLineCount"),onDidChangeEnablement:n.event.bind(n),dispose:()=>o.dispose()};return o.add(e.onDidChangeConfiguration(t=>{t.affectsConfiguration("diffEditor.hideUnchangedRegions.enabled")&&(i.enabled=e.getValue("diffEditor.hideUnchangedRegions.enabled"),n.fire(i.enabled))})),i}async function S(e,o,n,i,t,d){const[r,a]=await Promise.all([t.createModelReference(e),t.createModelReference(o)]);try{const l=d.getValue(e,"diffEditor.ignoreTrimWhitespace"),s=await i.computeDiff(e,o,{ignoreTrimWhitespace:l,maxComputationTimeMs:0,computeMoves:!1},"advanced"),c=r.object.textEditorModel.getLineCount(),g=a.object.textEditorModel.getLineCount(),m=s?I.fromDiffs(s.changes,c,g,n.minimumLineCount??3,n.contextLineCount??3):[],f=Math.max(c,g),p=m.length,h=f-m.reduce((b,R)=>b+R.lineCount,0);return{numberOfUnchangedRegions:p,numberOfVisibleLines:h}}finally{r.dispose(),a.dispose()}}export{z as UnchangedEditorRegionsService};
