{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from \"../../../../../base/browser/dom.js\";\nimport { StandardMouseEvent } from \"../../../../../base/browser/mouseEvent.js\";\nimport { EventType as TouchEventType } from \"../../../../../base/browser/touch.js\";\nimport { Delayer } from \"../../../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IReference,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { ThemeIcon } from \"../../../../../base/common/themables.js\";\nimport {\n\tfoldingCollapsedIcon,\n\tfoldingExpandedIcon,\n} from \"../../../../../editor/contrib/folding/browser/foldingDecorations.js\";\nimport { MenuId } from \"../../../../../platform/actions/common/actions.js\";\nimport { IContextMenuService } from \"../../../../../platform/contextview/browser/contextView.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { CellKind } from \"../../common/notebookCommon.js\";\nimport { FoldingController } from \"../controller/foldingController.js\";\nimport type { NotebookSectionArgs } from \"../controller/sectionActions.js\";\nimport { CellFoldingState, type INotebookEditor } from \"../notebookBrowser.js\";\nimport type { NotebookOptionsChangeEvent } from \"../notebookOptions.js\";\nimport type { INotebookCellList } from \"../view/notebookRenderingCommon.js\";\nimport type { OutlineEntry } from \"../viewModel/OutlineEntry.js\";\nimport type { MarkupCellViewModel } from \"../viewModel/markupCellViewModel.js\";\nimport type { NotebookCellOutlineDataSource } from \"../viewModel/notebookOutlineDataSource.js\";\nimport { INotebookCellOutlineDataSourceFactory } from \"../viewModel/notebookOutlineDataSourceFactory.js\";\n\nexport class NotebookStickyLine extends Disposable {\n\tconstructor(\n\t\tpublic readonly element: HTMLElement,\n\t\tpublic readonly foldingIcon: StickyFoldingIcon,\n\t\tpublic readonly header: HTMLElement,\n\t\tpublic readonly entry: OutlineEntry,\n\t\tpublic readonly notebookEditor: INotebookEditor,\n\t) {\n\t\tsuper();\n\t\t// click the header to focus the cell\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\tthis.header,\n\t\t\t\tDOM.EventType.CLICK || TouchEventType.Tap,\n\t\t\t\t() => {\n\t\t\t\t\tthis.focusCell();\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\t// click the folding icon to fold the range covered by the header\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\tthis.foldingIcon.domNode,\n\t\t\t\tDOM.EventType.CLICK || TouchEventType.Tap,\n\t\t\t\t() => {\n\t\t\t\t\tif (this.entry.cell.cellKind === CellKind.Markup) {\n\t\t\t\t\t\tconst currentFoldingState = (\n\t\t\t\t\t\t\tthis.entry.cell as MarkupCellViewModel\n\t\t\t\t\t\t).foldingState;\n\t\t\t\t\t\tthis.toggleFoldRange(currentFoldingState);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate toggleFoldRange(currentState: CellFoldingState) {\n\t\tconst foldingController =\n\t\t\tthis.notebookEditor.getContribution<FoldingController>(\n\t\t\t\tFoldingController.id,\n\t\t\t);\n\n\t\tconst index = this.entry.index;\n\t\tconst headerLevel = this.entry.level;\n\t\tconst newFoldingState =\n\t\t\tcurrentState === CellFoldingState.Collapsed\n\t\t\t\t? CellFoldingState.Expanded\n\t\t\t\t: CellFoldingState.Collapsed;\n\n\t\tfoldingController.setFoldingStateDown(\n\t\t\tindex,\n\t\t\tnewFoldingState,\n\t\t\theaderLevel,\n\t\t);\n\t\tthis.focusCell();\n\t}\n\n\tprivate focusCell() {\n\t\tthis.notebookEditor.focusNotebookCell(this.entry.cell, \"container\");\n\t\tconst cellScrollTop = this.notebookEditor.getAbsoluteTopOfElement(\n\t\t\tthis.entry.cell,\n\t\t);\n\t\tconst parentCount = NotebookStickyLine.getParentCount(this.entry);\n\t\t// 1.1 addresses visible cell padding, to make sure we don't focus md cell and also render its sticky line\n\t\tthis.notebookEditor.setScrollTop(\n\t\t\tcellScrollTop - (parentCount + 1.1) * 22,\n\t\t);\n\t}\n\n\tstatic getParentCount(entry: OutlineEntry) {\n\t\tlet count = 0;\n\t\twhile (entry.parent) {\n\t\t\tcount++;\n\t\t\tentry = entry.parent;\n\t\t}\n\t\treturn count;\n\t}\n}\n\nclass StickyFoldingIcon {\n\tpublic domNode: HTMLElement;\n\n\tconstructor(\n\t\tpublic isCollapsed: boolean,\n\t\tpublic dimension: number,\n\t) {\n\t\tthis.domNode = document.createElement(\"div\");\n\t\tthis.domNode.style.width = `${dimension}px`;\n\t\tthis.domNode.style.height = `${dimension}px`;\n\t\tthis.domNode.className = ThemeIcon.asClassName(\n\t\t\tisCollapsed ? foldingCollapsedIcon : foldingExpandedIcon,\n\t\t);\n\t}\n\n\tpublic setVisible(visible: boolean) {\n\t\tthis.domNode.style.cursor = visible ? \"pointer\" : \"default\";\n\t\tthis.domNode.style.opacity = visible ? \"1\" : \"0\";\n\t}\n}\n\nexport class NotebookStickyScroll extends Disposable {\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate currentStickyLines = new Map<\n\t\tOutlineEntry,\n\t\t{ line: NotebookStickyLine; rendered: boolean }\n\t>();\n\n\tprivate readonly _onDidChangeNotebookStickyScroll = this._register(\n\t\tnew Emitter<number>(),\n\t);\n\treadonly onDidChangeNotebookStickyScroll: Event<number> =\n\t\tthis._onDidChangeNotebookStickyScroll.event;\n\tprivate notebookCellOutlineReference?: IReference<NotebookCellOutlineDataSource>;\n\n\tprivate readonly _layoutDisposableStore = this._register(\n\t\tnew DisposableStore(),\n\t);\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetCurrentStickyHeight() {\n\t\tlet height = 0;\n\t\tthis.currentStickyLines.forEach((value) => {\n\t\t\tif (value.rendered) {\n\t\t\t\theight += 22;\n\t\t\t}\n\t\t});\n\t\treturn height;\n\t}\n\n\tprivate setCurrentStickyLines(\n\t\tnewStickyLines: Map<\n\t\t\tOutlineEntry,\n\t\t\t{ line: NotebookStickyLine; rendered: boolean }\n\t\t>,\n\t) {\n\t\tthis.currentStickyLines = newStickyLines;\n\t}\n\n\tprivate compareStickyLineMaps(\n\t\tmapA: Map<\n\t\t\tOutlineEntry,\n\t\t\t{ line: NotebookStickyLine; rendered: boolean }\n\t\t>,\n\t\tmapB: Map<\n\t\t\tOutlineEntry,\n\t\t\t{ line: NotebookStickyLine; rendered: boolean }\n\t\t>,\n\t): boolean {\n\t\tif (mapA.size !== mapB.size) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const [key, value] of mapA) {\n\t\t\tconst otherValue = mapB.get(key);\n\t\t\tif (!otherValue || value.rendered !== otherValue.rendered) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconstructor(\n\t\tprivate readonly domNode: HTMLElement,\n\t\tprivate readonly notebookEditor: INotebookEditor,\n\t\tprivate readonly notebookCellList: INotebookCellList,\n\t\tprivate readonly layoutFn: (delta: number) => void,\n\t\t@IContextMenuService\n\t\tprivate readonly _contextMenuService: IContextMenuService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tif (\n\t\t\tthis.notebookEditor.notebookOptions.getDisplayOptions()\n\t\t\t\t.stickyScrollEnabled\n\t\t) {\n\t\t\tthis.init();\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis.notebookEditor.notebookOptions.onDidChangeOptions((e) => {\n\t\t\t\tif (e.stickyScrollEnabled || e.stickyScrollMode) {\n\t\t\t\t\tthis.updateConfig(e);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tDOM.addDisposableListener(\n\t\t\t\tthis.domNode,\n\t\t\t\tDOM.EventType.CONTEXT_MENU,\n\t\t\t\tasync (event: MouseEvent) => {\n\t\t\t\t\tthis.onContextMenu(event);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onContextMenu(e: MouseEvent) {\n\t\tconst event = new StandardMouseEvent(DOM.getWindow(this.domNode), e);\n\n\t\tconst selectedElement = event.target.parentElement;\n\t\tconst selectedOutlineEntry = Array.from(\n\t\t\tthis.currentStickyLines.values(),\n\t\t).find((entry) => entry.line.element.contains(selectedElement))?.line\n\t\t\t.entry;\n\t\tif (!selectedOutlineEntry) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst args: NotebookSectionArgs = {\n\t\t\toutlineEntry: selectedOutlineEntry,\n\t\t\tnotebookEditor: this.notebookEditor,\n\t\t};\n\n\t\tthis._contextMenuService.showContextMenu({\n\t\t\tmenuId: MenuId.NotebookStickyScrollContext,\n\t\t\tgetAnchor: () => event,\n\t\t\tmenuActionOptions: { shouldForwardArgs: true, arg: args },\n\t\t});\n\t}\n\n\tprivate updateConfig(e: NotebookOptionsChangeEvent) {\n\t\tif (e.stickyScrollEnabled) {\n\t\t\tif (\n\t\t\t\tthis.notebookEditor.notebookOptions.getDisplayOptions()\n\t\t\t\t\t.stickyScrollEnabled\n\t\t\t) {\n\t\t\t\tthis.init();\n\t\t\t} else {\n\t\t\t\tthis._disposables.clear();\n\t\t\t\tthis.notebookCellOutlineReference?.dispose();\n\t\t\t\tthis.disposeCurrentStickyLines();\n\t\t\t\tDOM.clearNode(this.domNode);\n\t\t\t\tthis.updateDisplay();\n\t\t\t}\n\t\t} else if (\n\t\t\te.stickyScrollMode &&\n\t\t\tthis.notebookEditor.notebookOptions.getDisplayOptions()\n\t\t\t\t.stickyScrollEnabled &&\n\t\t\tthis.notebookCellOutlineReference?.object\n\t\t) {\n\t\t\tthis.updateContent(\n\t\t\t\tcomputeContent(\n\t\t\t\t\tthis.notebookEditor,\n\t\t\t\t\tthis.notebookCellList,\n\t\t\t\t\tthis.notebookCellOutlineReference?.object?.entries,\n\t\t\t\t\tthis.getCurrentStickyHeight(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate init() {\n\t\tconst { object: notebookCellOutline } =\n\t\t\t(this.notebookCellOutlineReference =\n\t\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\taccessor\n\t\t\t\t\t\t.get(INotebookCellOutlineDataSourceFactory)\n\t\t\t\t\t\t.getOrCreate(this.notebookEditor),\n\t\t\t\t));\n\t\tthis._register(this.notebookCellOutlineReference);\n\t\tthis.updateContent(\n\t\t\tcomputeContent(\n\t\t\t\tthis.notebookEditor,\n\t\t\t\tthis.notebookCellList,\n\t\t\t\tnotebookCellOutline.entries,\n\t\t\t\tthis.getCurrentStickyHeight(),\n\t\t\t),\n\t\t);\n\n\t\tthis._disposables.add(\n\t\t\tnotebookCellOutline.onDidChange(() => {\n\t\t\t\tconst recompute = computeContent(\n\t\t\t\t\tthis.notebookEditor,\n\t\t\t\t\tthis.notebookCellList,\n\t\t\t\t\tnotebookCellOutline.entries,\n\t\t\t\t\tthis.getCurrentStickyHeight(),\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!this.compareStickyLineMaps(\n\t\t\t\t\t\trecompute,\n\t\t\t\t\t\tthis.currentStickyLines,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.updateContent(recompute);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._disposables.add(\n\t\t\tthis.notebookEditor.onDidAttachViewModel(() => {\n\t\t\t\tthis.updateContent(\n\t\t\t\t\tcomputeContent(\n\t\t\t\t\t\tthis.notebookEditor,\n\t\t\t\t\t\tthis.notebookCellList,\n\t\t\t\t\t\tnotebookCellOutline.entries,\n\t\t\t\t\t\tthis.getCurrentStickyHeight(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._disposables.add(\n\t\t\tthis.notebookEditor.onDidScroll(() => {\n\t\t\t\tconst d = new Delayer(100);\n\t\t\t\td.trigger(() => {\n\t\t\t\t\td.dispose();\n\t\t\t\t\tconst recompute = computeContent(\n\t\t\t\t\t\tthis.notebookEditor,\n\t\t\t\t\t\tthis.notebookCellList,\n\t\t\t\t\t\tnotebookCellOutline.entries,\n\t\t\t\t\t\tthis.getCurrentStickyHeight(),\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.compareStickyLineMaps(\n\t\t\t\t\t\t\trecompute,\n\t\t\t\t\t\t\tthis.currentStickyLines,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.updateContent(recompute);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\t// take in an cell index, and get the corresponding outline entry\n\tstatic getVisibleOutlineEntry(\n\t\tvisibleIndex: number,\n\t\tnotebookOutlineEntries: OutlineEntry[],\n\t): OutlineEntry | undefined {\n\t\tlet left = 0;\n\t\tlet right = notebookOutlineEntries.length - 1;\n\t\tlet bucket = -1;\n\n\t\twhile (left <= right) {\n\t\t\tconst mid = Math.floor((left + right) / 2);\n\t\t\tif (notebookOutlineEntries[mid].index === visibleIndex) {\n\t\t\t\tbucket = mid;\n\t\t\t\tbreak;\n\t\t\t} else if (notebookOutlineEntries[mid].index < visibleIndex) {\n\t\t\t\tbucket = mid;\n\t\t\t\tleft = mid + 1;\n\t\t\t} else {\n\t\t\t\tright = mid - 1;\n\t\t\t}\n\t\t}\n\n\t\tif (bucket !== -1) {\n\t\t\tconst rootEntry = notebookOutlineEntries[bucket];\n\t\t\tconst flatList: OutlineEntry[] = [];\n\t\t\trootEntry.asFlatList(flatList);\n\t\t\treturn flatList.find((entry) => entry.index === visibleIndex);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate updateContent(\n\t\tnewMap: Map<\n\t\t\tOutlineEntry,\n\t\t\t{ line: NotebookStickyLine; rendered: boolean }\n\t\t>,\n\t) {\n\t\tDOM.clearNode(this.domNode);\n\t\tthis.disposeCurrentStickyLines();\n\t\tthis.renderStickyLines(newMap, this.domNode);\n\n\t\tconst oldStickyHeight = this.getCurrentStickyHeight();\n\t\tthis.setCurrentStickyLines(newMap);\n\n\t\t// (+) = sticky height increased\n\t\t// (-) = sticky height decreased\n\t\tconst sizeDelta = this.getCurrentStickyHeight() - oldStickyHeight;\n\t\tif (sizeDelta !== 0) {\n\t\t\tthis._onDidChangeNotebookStickyScroll.fire(sizeDelta);\n\n\t\t\tconst d = this._layoutDisposableStore.add(\n\t\t\t\tDOM.scheduleAtNextAnimationFrame(\n\t\t\t\t\tDOM.getWindow(this.getDomNode()),\n\t\t\t\t\t() => {\n\t\t\t\t\t\tthis.layoutFn(sizeDelta);\n\t\t\t\t\t\tthis.updateDisplay();\n\n\t\t\t\t\t\tthis._layoutDisposableStore.delete(d);\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.updateDisplay();\n\t\t}\n\t}\n\n\tprivate updateDisplay() {\n\t\tconst hasSticky = this.getCurrentStickyHeight() > 0;\n\t\tif (hasSticky) {\n\t\t\tthis.domNode.style.display = \"block\";\n\t\t} else {\n\t\t\tthis.domNode.style.display = \"none\";\n\t\t}\n\t}\n\n\tstatic computeStickyHeight(entry: OutlineEntry) {\n\t\tlet height = 0;\n\t\tif (entry.cell.cellKind === CellKind.Markup && entry.level < 7) {\n\t\t\theight += 22;\n\t\t}\n\t\twhile (entry.parent) {\n\t\t\theight += 22;\n\t\t\tentry = entry.parent;\n\t\t}\n\t\treturn height;\n\t}\n\n\tstatic checkCollapsedStickyLines(\n\t\tentry: OutlineEntry | undefined,\n\t\tnumLinesToRender: number,\n\t\tnotebookEditor: INotebookEditor,\n\t) {\n\t\tlet currentEntry = entry;\n\t\tconst newMap = new Map<\n\t\t\tOutlineEntry,\n\t\t\t{ line: NotebookStickyLine; rendered: boolean }\n\t\t>();\n\n\t\tconst elementsToRender = [];\n\t\twhile (currentEntry) {\n\t\t\tif (currentEntry.level >= 7) {\n\t\t\t\t// level 7+ represents a non-header entry, which we don't want to render\n\t\t\t\tcurrentEntry = currentEntry.parent;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lineToRender = NotebookStickyScroll.createStickyElement(\n\t\t\t\tcurrentEntry,\n\t\t\t\tnotebookEditor,\n\t\t\t);\n\t\t\tnewMap.set(currentEntry, { line: lineToRender, rendered: false });\n\t\t\telementsToRender.unshift(lineToRender);\n\t\t\tcurrentEntry = currentEntry.parent;\n\t\t}\n\n\t\t// iterate over elements to render, and append to container\n\t\t// break when we reach numLinesToRender\n\t\tfor (let i = 0; i < elementsToRender.length; i++) {\n\t\t\tif (i >= numLinesToRender) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnewMap.set(elementsToRender[i].entry, {\n\t\t\t\tline: elementsToRender[i],\n\t\t\t\trendered: true,\n\t\t\t});\n\t\t}\n\t\treturn newMap;\n\t}\n\n\tprivate renderStickyLines(\n\t\tstickyMap: Map<\n\t\t\tOutlineEntry,\n\t\t\t{ line: NotebookStickyLine; rendered: boolean }\n\t\t>,\n\t\tcontainerElement: HTMLElement,\n\t) {\n\t\tconst reversedEntries = Array.from(stickyMap.entries()).reverse();\n\t\tfor (const [, value] of reversedEntries) {\n\t\t\tif (!value.rendered) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcontainerElement.append(value.line.element);\n\t\t}\n\t}\n\n\tstatic createStickyElement(\n\t\tentry: OutlineEntry,\n\t\tnotebookEditor: INotebookEditor,\n\t) {\n\t\tconst stickyElement = document.createElement(\"div\");\n\t\tstickyElement.classList.add(\"notebook-sticky-scroll-element\");\n\n\t\tconst indentMode =\n\t\t\tnotebookEditor.notebookOptions.getLayoutConfiguration()\n\t\t\t\t.stickyScrollMode;\n\t\tif (indentMode === \"indented\") {\n\t\t\tstickyElement.style.paddingLeft =\n\t\t\t\tNotebookStickyLine.getParentCount(entry) * 10 + \"px\";\n\t\t}\n\n\t\tlet isCollapsed = false;\n\t\tif (entry.cell.cellKind === CellKind.Markup) {\n\t\t\tisCollapsed =\n\t\t\t\t(entry.cell as MarkupCellViewModel).foldingState ===\n\t\t\t\tCellFoldingState.Collapsed;\n\t\t}\n\n\t\tconst stickyFoldingIcon = new StickyFoldingIcon(isCollapsed, 16);\n\t\tstickyFoldingIcon.domNode.classList.add(\n\t\t\t\"notebook-sticky-scroll-folding-icon\",\n\t\t);\n\t\tstickyFoldingIcon.setVisible(true);\n\n\t\tconst stickyHeader = document.createElement(\"div\");\n\t\tstickyHeader.classList.add(\"notebook-sticky-scroll-header\");\n\t\tstickyHeader.innerText = entry.label;\n\n\t\tstickyElement.append(stickyFoldingIcon.domNode, stickyHeader);\n\n\t\treturn new NotebookStickyLine(\n\t\t\tstickyElement,\n\t\t\tstickyFoldingIcon,\n\t\t\tstickyHeader,\n\t\t\tentry,\n\t\t\tnotebookEditor,\n\t\t);\n\t}\n\n\tprivate disposeCurrentStickyLines() {\n\t\tthis.currentStickyLines.forEach((value) => {\n\t\t\tvalue.line.dispose();\n\t\t});\n\t}\n\n\toverride dispose() {\n\t\tthis._disposables.dispose();\n\t\tthis.disposeCurrentStickyLines();\n\t\tthis.notebookCellOutlineReference?.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nexport function computeContent(\n\tnotebookEditor: INotebookEditor,\n\tnotebookCellList: INotebookCellList,\n\tnotebookOutlineEntries: OutlineEntry[],\n\trenderedStickyHeight: number,\n): Map<OutlineEntry, { line: NotebookStickyLine; rendered: boolean }> {\n\t// get data about the cell list within viewport ----------------------------------------------------------------------------------------\n\tconst editorScrollTop = notebookEditor.scrollTop - renderedStickyHeight;\n\tconst visibleRange = notebookEditor.visibleRanges[0];\n\tif (!visibleRange) {\n\t\treturn new Map();\n\t}\n\n\t// edge case for cell 0 in the notebook is a header ------------------------------------------------------------------------------------\n\tif (visibleRange.start === 0) {\n\t\tconst firstCell = notebookEditor.cellAt(0);\n\t\tconst firstCellEntry = NotebookStickyScroll.getVisibleOutlineEntry(\n\t\t\t0,\n\t\t\tnotebookOutlineEntries,\n\t\t);\n\t\tif (\n\t\t\tfirstCell &&\n\t\t\tfirstCellEntry &&\n\t\t\tfirstCell.cellKind === CellKind.Markup &&\n\t\t\tfirstCellEntry.level < 7\n\t\t) {\n\t\t\tif (notebookEditor.scrollTop > 22) {\n\t\t\t\tconst newMap = NotebookStickyScroll.checkCollapsedStickyLines(\n\t\t\t\t\tfirstCellEntry,\n\t\t\t\t\t100,\n\t\t\t\t\tnotebookEditor,\n\t\t\t\t);\n\t\t\t\treturn newMap;\n\t\t\t}\n\t\t}\n\t}\n\n\t// iterate over cells in viewport ------------------------------------------------------------------------------------------------------\n\tlet cell;\n\tlet cellEntry;\n\tconst startIndex = visibleRange.start - 1; // -1 to account for cells hidden \"under\" sticky lines.\n\tfor (\n\t\tlet currentIndex = startIndex;\n\t\tcurrentIndex < visibleRange.end;\n\t\tcurrentIndex++\n\t) {\n\t\t// store data for current cell, and next cell\n\t\tcell = notebookEditor.cellAt(currentIndex);\n\t\tif (!cell) {\n\t\t\treturn new Map();\n\t\t}\n\t\tcellEntry = NotebookStickyScroll.getVisibleOutlineEntry(\n\t\t\tcurrentIndex,\n\t\t\tnotebookOutlineEntries,\n\t\t);\n\t\tif (!cellEntry) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst nextCell = notebookEditor.cellAt(currentIndex + 1);\n\t\tif (!nextCell) {\n\t\t\tconst sectionBottom = notebookEditor.getLayoutInfo().scrollHeight;\n\t\t\tconst linesToRender = Math.floor(sectionBottom / 22);\n\t\t\tconst newMap = NotebookStickyScroll.checkCollapsedStickyLines(\n\t\t\t\tcellEntry,\n\t\t\t\tlinesToRender,\n\t\t\t\tnotebookEditor,\n\t\t\t);\n\t\t\treturn newMap;\n\t\t}\n\t\tconst nextCellEntry = NotebookStickyScroll.getVisibleOutlineEntry(\n\t\t\tcurrentIndex + 1,\n\t\t\tnotebookOutlineEntries,\n\t\t);\n\t\tif (!nextCellEntry) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// check next cell, if markdown with non level 7 entry, that means this is the end of the section (new header) ---------------------\n\t\tif (nextCell.cellKind === CellKind.Markup && nextCellEntry.level < 7) {\n\t\t\tconst sectionBottom =\n\t\t\t\tnotebookCellList.getCellViewScrollTop(nextCell);\n\t\t\tconst currentSectionStickyHeight =\n\t\t\t\tNotebookStickyScroll.computeStickyHeight(cellEntry);\n\t\t\tconst nextSectionStickyHeight =\n\t\t\t\tNotebookStickyScroll.computeStickyHeight(nextCellEntry);\n\n\t\t\t// case: we can render the all sticky lines for the current section ------------------------------------------------------------\n\t\t\tif (editorScrollTop + currentSectionStickyHeight < sectionBottom) {\n\t\t\t\tconst linesToRender = Math.floor(\n\t\t\t\t\t(sectionBottom - editorScrollTop) / 22,\n\t\t\t\t);\n\t\t\t\tconst newMap = NotebookStickyScroll.checkCollapsedStickyLines(\n\t\t\t\t\tcellEntry,\n\t\t\t\t\tlinesToRender,\n\t\t\t\t\tnotebookEditor,\n\t\t\t\t);\n\t\t\t\treturn newMap;\n\t\t\t}\n\n\t\t\t// case: next section is the same size or bigger, render next entry -----------------------------------------------------------\n\t\t\telse if (nextSectionStickyHeight >= currentSectionStickyHeight) {\n\t\t\t\tconst newMap = NotebookStickyScroll.checkCollapsedStickyLines(\n\t\t\t\t\tnextCellEntry,\n\t\t\t\t\t100,\n\t\t\t\t\tnotebookEditor,\n\t\t\t\t);\n\t\t\t\treturn newMap;\n\t\t\t}\n\t\t\t// case: next section is the smaller, shrink until next section height is greater than the available space ---------------------\n\t\t\telse if (nextSectionStickyHeight < currentSectionStickyHeight) {\n\t\t\t\tconst availableSpace = sectionBottom - editorScrollTop;\n\n\t\t\t\tif (availableSpace >= nextSectionStickyHeight) {\n\t\t\t\t\tconst linesToRender = Math.floor(availableSpace / 22);\n\t\t\t\t\tconst newMap =\n\t\t\t\t\t\tNotebookStickyScroll.checkCollapsedStickyLines(\n\t\t\t\t\t\t\tcellEntry,\n\t\t\t\t\t\t\tlinesToRender,\n\t\t\t\t\t\t\tnotebookEditor,\n\t\t\t\t\t\t);\n\t\t\t\t\treturn newMap;\n\t\t\t\t} else {\n\t\t\t\t\tconst newMap =\n\t\t\t\t\t\tNotebookStickyScroll.checkCollapsedStickyLines(\n\t\t\t\t\t\t\tnextCellEntry,\n\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t\tnotebookEditor,\n\t\t\t\t\t\t);\n\t\t\t\t\treturn newMap;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} // visible range loop close\n\n\t// case: all visible cells were non-header cells, so render any headers relevant to their section --------------------------------------\n\tconst sectionBottom = notebookEditor.getLayoutInfo().scrollHeight;\n\tconst linesToRender = Math.floor((sectionBottom - editorScrollTop) / 22);\n\tconst newMap = NotebookStickyScroll.checkCollapsedStickyLines(\n\t\tcellEntry,\n\t\tlinesToRender,\n\t\tnotebookEditor,\n\t);\n\treturn newMap;\n}\n"],
  "mappings": "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",
  "names": ["newMap", "sectionBottom", "linesToRender"]
}
