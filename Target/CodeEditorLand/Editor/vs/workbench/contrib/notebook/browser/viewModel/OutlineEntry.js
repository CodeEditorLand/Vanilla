import{Codicon as o}from"../../../../../../vs/base/common/codicons.js";import{ThemeIcon as s}from"../../../../../../vs/base/common/themables.js";import"../../../../../../vs/editor/common/core/range.js";import{SymbolKinds as a}from"../../../../../../vs/editor/common/languages.js";import{MarkerSeverity as t}from"../../../../../../vs/platform/markers/common/markers.js";import"../../../../../../vs/workbench/contrib/notebook/browser/notebookBrowser.js";import{executingStateIcon as l}from"../../../../../../vs/workbench/contrib/notebook/browser/notebookIcons.js";import{CellKind as d}from"../../../../../../vs/workbench/contrib/notebook/common/notebookCommon.js";class C{constructor(r,e,n,i,f,h,c,m){this.index=r;this.level=e;this.cell=n;this.label=i;this.isExecuting=f;this.isPaused=h;this.range=c;this.symbolKind=m}_children=[];_parent;_markerInfo;get icon(){return this.symbolKind?a.toIcon(this.symbolKind):this.isExecuting&&this.isPaused?l:this.isExecuting?s.modify(l,"spin"):this.cell.cellKind===d.Markup?o.markdown:o.code}addChild(r){this._children.push(r),r._parent=this}get parent(){return this._parent}get children(){return this._children}get markerInfo(){return this._markerInfo}get position(){if(this.range)return{startLineNumber:this.range.startLineNumber,startColumn:this.range.startColumn}}updateMarkers(r){if(this.cell.cellKind===d.Code){const e=r.read({resource:this.cell.uri,severities:t.Error|t.Warning});if(e.length===0)this._markerInfo=void 0;else{const n=e.find(i=>i.severity===t.Error)?.severity??t.Warning;this._markerInfo={topSev:n,count:e.length}}}else{let e;for(const n of this.children)n.updateMarkers(r),n.markerInfo&&(e=e?Math.max(n.markerInfo.topSev,e):n.markerInfo.topSev);this._markerInfo=e&&{topSev:e,count:0}}}clearMarkers(){this._markerInfo=void 0;for(const r of this.children)r.clearMarkers()}find(r,e){if(r.id===this.cell.id)return this;e.push(this);for(const n of this.children){const i=n.find(r,e);if(i)return i}e.pop()}asFlatList(r){r.push(this);for(const e of this.children)e.asFlatList(r)}}export{C as OutlineEntry};
