var _=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var h=(l,a,t,o)=>{for(var e=o>1?void 0:o?I(a,t):a,r=l.length-1,i;r>=0;r--)(i=l[r])&&(e=(o?i(a,t,e):i(e))||e);return o&&e&&_(a,t,e),e},u=(l,a)=>(t,o)=>a(t,o,l);import{Delayer as E}from"../../../../../../base/common/async.js";import{Disposable as D}from"../../../../../../base/common/lifecycle.js";import{Range as b}from"../../../../../../editor/common/core/range.js";import{IConfigurationService as x}from"../../../../../../platform/configuration/common/configuration.js";import{debugIconBreakpointForeground as S}from"../../../../debug/browser/breakpointEditorContribution.js";import{focusedStackFrameColor as R,topStackFrameColor as N}from"../../../../debug/browser/callStackEditorContribution.js";import{IDebugService as f}from"../../../../debug/common/debug.js";import{NotebookOverviewRulerLane as g}from"../../notebookBrowser.js";import{registerNotebookContribution as k}from"../../notebookEditorExtensions.js";import{runningCellRulerDecorationColor as F}from"../../notebookEditorWidget.js";import{CellUri as v,NotebookCellExecutionState as w}from"../../../common/notebookCommon.js";import{INotebookExecutionStateService as O,NotebookExecutionType as y}from"../../../common/notebookExecutionStateService.js";let c=class extends D{constructor(t,o,e){super();this._notebookEditor=t;this._debugService=o;this._notebookExecutionStateService=e;const r=this._register(new E(200));this._register(o.getModel().onDidChangeCallStack(()=>this.updateExecutionDecorations())),this._register(o.getViewModel().onDidFocusStackFrame(()=>this.updateExecutionDecorations())),this._register(e.onDidChangeExecution(i=>{i.type===y.cell&&this._notebookEditor.textModel&&i.affectsNotebook(this._notebookEditor.textModel.uri)&&r.trigger(()=>this.updateExecutionDecorations())}))}static id="workbench.notebook.debug.pausedCellDecorations";_currentTopDecorations=[];_currentOtherDecorations=[];_executingCellDecorations=[];updateExecutionDecorations(){const t=this._notebookEditor.textModel?this._notebookExecutionStateService.getCellExecutionsByHandleForNotebook(this._notebookEditor.textModel.uri):void 0,o=[];let e;const r=n=>{const s=v.parse(n.source.uri);if(s&&s.notebook.toString()===this._notebookEditor.textModel?.uri.toString())return{handle:s.handle,range:n.range}};for(const n of this._debugService.getModel().getSessions())for(const s of n.getAllThreads()){const m=s.getTopStackFrame();if(m){const p=r(m);p&&(o.push(p),t?.delete(p.handle))}}const i=this._debugService.getViewModel().focusedStackFrame;if(i&&i.thread.stopped){const n=r(i);n&&!o.some(s=>s.handle===n?.handle&&b.equalsRange(s.range,n?.range))&&(e=n,t?.delete(e.handle))}this.setTopFrameDecoration(o),this.setFocusedFrameDecoration(e);const C=t?Array.from(t.entries()).filter(([n,s])=>s.state===w.Executing).map(([n])=>n):[];this.setExecutingCellDecorations(C)}setTopFrameDecoration(t){const o=t.map(({handle:e,range:r})=>{const i={overviewRuler:{color:N,includeOutput:!1,modelRanges:[r],position:g.Full}};return{handle:e,options:i}});this._currentTopDecorations=this._notebookEditor.deltaCellDecorations(this._currentTopDecorations,o)}setFocusedFrameDecoration(t){let o=[];if(t){const e={overviewRuler:{color:R,includeOutput:!1,modelRanges:[t.range],position:g.Full}};o=[{handle:t.handle,options:e}]}this._currentOtherDecorations=this._notebookEditor.deltaCellDecorations(this._currentOtherDecorations,o)}setExecutingCellDecorations(t){const o=t.map(e=>{const r={overviewRuler:{color:F,includeOutput:!1,modelRanges:[new b(0,0,0,0)],position:g.Left}};return{handle:e,options:r}});this._executingCellDecorations=this._notebookEditor.deltaCellDecorations(this._executingCellDecorations,o)}};c=h([u(1,f),u(2,O)],c),k(c.id,c);let d=class extends D{constructor(t,o,e){super();this._notebookEditor=t;this._debugService=o;this._configService=e;this._register(o.getModel().onDidChangeBreakpoints(()=>this.updateDecorations())),this._register(e.onDidChangeConfiguration(r=>r.affectsConfiguration("debug.showBreakpointsInOverviewRuler")&&this.updateDecorations()))}static id="workbench.notebook.debug.notebookBreakpointDecorations";_currentDecorations=[];updateDecorations(){const o=this._configService.getValue("debug.showBreakpointsInOverviewRuler")?this._debugService.getModel().getBreakpoints().map(e=>{const r=v.parse(e.uri);if(!r||r.notebook.toString()!==this._notebookEditor.textModel.uri.toString())return null;const i={overviewRuler:{color:S,includeOutput:!1,modelRanges:[new b(e.lineNumber,0,e.lineNumber,0)],position:g.Left}};return{handle:r.handle,options:i}}).filter(e=>!!e):[];this._currentDecorations=this._notebookEditor.deltaCellDecorations(this._currentDecorations,o)}};d=h([u(1,f),u(2,x)],d),k(d.id,d);export{d as NotebookBreakpointDecorations,c as PausedCellDecorationContribution};
