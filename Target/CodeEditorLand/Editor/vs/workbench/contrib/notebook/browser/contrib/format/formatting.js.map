{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/format/formatting.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../../../nls.js';\nimport { CancellationToken } from '../../../../../../base/common/cancellation.js';\nimport { KeyCode, KeyMod } from '../../../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../../../../editor/browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction } from '../../../../../../editor/browser/editorExtensions.js';\nimport { IBulkEditService, ResourceTextEdit } from '../../../../../../editor/browser/services/bulkEditService.js';\nimport { EditorContextKeys } from '../../../../../../editor/common/editorContextKeys.js';\nimport { IEditorWorkerService } from '../../../../../../editor/common/services/editorWorker.js';\nimport { ILanguageFeaturesService } from '../../../../../../editor/common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../../../../editor/common/services/resolverService.js';\nimport { FormattingMode, formatDocumentWithSelectedProvider, getDocumentFormattingEditsWithSelectedProvider } from '../../../../../../editor/contrib/format/browser/format.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Progress } from '../../../../../../platform/progress/common/progress.js';\nimport { NOTEBOOK_ACTIONS_CATEGORY } from '../../controller/coreActions.js';\nimport { getNotebookEditorFromEditorPane } from '../../notebookBrowser.js';\nimport { NOTEBOOK_EDITOR_EDITABLE, NOTEBOOK_IS_ACTIVE_EDITOR } from '../../../common/notebookContextKeys.js';\nimport { IEditorService } from '../../../../../services/editor/common/editorService.js';\nimport { INotebookCellExecution } from '../../../common/notebookExecutionStateService.js';\nimport { ICellExecutionParticipant, INotebookExecutionService } from '../../../common/notebookExecutionService.js';\nimport { NotebookSetting } from '../../../common/notebookCommon.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { LifecyclePhase } from '../../../../../services/lifecycle/common/lifecycle.js';\nimport { Registry } from '../../../../../../platform/registry/common/platform.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchContributionsExtensions } from '../../../../../common/contributions.js';\nimport { INotebookService } from '../../../common/notebookService.js';\nimport { CodeActionParticipantUtils } from '../saveParticipants/saveParticipants.js';\n\n// format notebook\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.format',\n\t\t\ttitle: localize2('format.title', 'Format Notebook'),\n\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\tprecondition: ContextKeyExpr.and(NOTEBOOK_IS_ACTIVE_EDITOR, NOTEBOOK_EDITOR_EDITABLE),\n\t\t\tkeybinding: {\n\t\t\t\twhen: EditorContextKeys.editorTextFocus.toNegated(),\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyF,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\twhen: ContextKeyExpr.and(EditorContextKeys.inCompositeEditor, EditorContextKeys.hasDocumentFormattingProvider),\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.3\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst textModelService = accessor.get(ITextModelService);\n\t\tconst editorWorkerService = accessor.get(IEditorWorkerService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\t\tconst bulkEditService = accessor.get(IBulkEditService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\n\t\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\t\tif (!editor || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst notebook = editor.textModel;\n\n\t\tconst formatApplied: boolean = await instantiationService.invokeFunction(CodeActionParticipantUtils.checkAndRunFormatCodeAction, notebook, Progress.None, CancellationToken.None);\n\n\t\tconst disposable = new DisposableStore();\n\t\ttry {\n\t\t\tif (!formatApplied) {\n\t\t\t\tconst allCellEdits = await Promise.all(notebook.cells.map(async cell => {\n\t\t\t\t\tconst ref = await textModelService.createModelReference(cell.uri);\n\t\t\t\t\tdisposable.add(ref);\n\n\t\t\t\t\tconst model = ref.object.textEditorModel;\n\n\t\t\t\t\tconst formatEdits = await getDocumentFormattingEditsWithSelectedProvider(\n\t\t\t\t\t\teditorWorkerService,\n\t\t\t\t\t\tlanguageFeaturesService,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tFormattingMode.Explicit,\n\t\t\t\t\t\tCancellationToken.None\n\t\t\t\t\t);\n\n\t\t\t\t\tconst edits: ResourceTextEdit[] = [];\n\n\t\t\t\t\tif (formatEdits) {\n\t\t\t\t\t\tfor (const edit of formatEdits) {\n\t\t\t\t\t\t\tedits.push(new ResourceTextEdit(model.uri, edit, model.getVersionId()));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn edits;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [];\n\t\t\t\t}));\n\n\t\t\t\tawait bulkEditService.apply(/* edit */allCellEdits.flat(), { label: localize('label', \"Format Notebook\"), code: 'undoredo.formatNotebook', });\n\t\t\t}\n\t\t} finally {\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n});\n\n// format cell\nregisterEditorAction(class FormatCellAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.formatCell',\n\t\t\tlabel: localize('formatCell.label', \"Format Cell\"),\n\t\t\talias: 'Format Cell',\n\t\t\tprecondition: ContextKeyExpr.and(NOTEBOOK_IS_ACTIVE_EDITOR, NOTEBOOK_EDITOR_EDITABLE, EditorContextKeys.inCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus),\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyF,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.301\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (editor.hasModel()) {\n\t\t\tconst instaService = accessor.get(IInstantiationService);\n\t\t\tawait instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, FormattingMode.Explicit, Progress.None, CancellationToken.None, true);\n\t\t}\n\t}\n});\n\nclass FormatOnCellExecutionParticipant implements ICellExecutionParticipant {\n\tconstructor(\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t) {\n\t}\n\n\tasync onWillExecuteCell(executions: INotebookCellExecution[]): Promise<void> {\n\n\t\tconst enabled = this.configurationService.getValue<boolean>(NotebookSetting.formatOnCellExecution);\n\t\tif (!enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\ttry {\n\t\t\tconst allCellEdits = await Promise.all(executions.map(async cellExecution => {\n\t\t\t\tconst nbModel = this._notebookService.getNotebookTextModel(cellExecution.notebook);\n\t\t\t\tif (!nbModel) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\tlet activeCell;\n\t\t\t\tfor (const cell of nbModel.cells) {\n\t\t\t\t\tif (cell.handle === cellExecution.cellHandle) {\n\t\t\t\t\t\tactiveCell = cell;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!activeCell) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tconst ref = await this.textModelService.createModelReference(activeCell.uri);\n\t\t\t\tdisposable.add(ref);\n\n\t\t\t\tconst model = ref.object.textEditorModel;\n\n\t\t\t\tconst formatEdits = await getDocumentFormattingEditsWithSelectedProvider(\n\t\t\t\t\tthis.editorWorkerService,\n\t\t\t\t\tthis.languageFeaturesService,\n\t\t\t\t\tmodel,\n\t\t\t\t\tFormattingMode.Silent,\n\t\t\t\t\tCancellationToken.None\n\t\t\t\t);\n\n\t\t\t\tconst edits: ResourceTextEdit[] = [];\n\n\t\t\t\tif (formatEdits) {\n\t\t\t\t\tedits.push(...formatEdits.map(edit => new ResourceTextEdit(model.uri, edit, model.getVersionId())));\n\t\t\t\t\treturn edits;\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}));\n\n\t\t\tawait this.bulkEditService.apply(/* edit */allCellEdits.flat(), { label: localize('formatCells.label', \"Format Cells\"), code: 'undoredo.notebooks.onWillExecuteFormat', });\n\n\t\t} finally {\n\t\t\tdisposable.dispose();\n\t\t}\n\t}\n}\n\nexport class CellExecutionParticipantsContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@INotebookExecutionService private readonly notebookExecutionService: INotebookExecutionService\n\t) {\n\t\tsuper();\n\t\tthis.registerKernelExecutionParticipants();\n\t}\n\n\tprivate registerKernelExecutionParticipants(): void {\n\t\tthis._register(this.notebookExecutionService.registerExecutionParticipant(this.instantiationService.createInstance(FormatOnCellExecutionParticipant)));\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchContributionsExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(CellExecutionParticipantsContribution, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": []
}
