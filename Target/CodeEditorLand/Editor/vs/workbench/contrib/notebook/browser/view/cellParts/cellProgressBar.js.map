{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/cellProgressBar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ProgressBar } from \"../../../../../../base/browser/ui/progressbar/progressbar.js\";\nimport { defaultProgressBarStyles } from \"../../../../../../platform/theme/browser/defaultStyles.js\";\nimport { NotebookCellExecutionState } from \"../../../common/notebookCommon.js\";\nimport {\n\ttype ICellExecutionStateChangedEvent,\n\tINotebookExecutionStateService,\n} from \"../../../common/notebookExecutionStateService.js\";\nimport type { ICellViewModel } from \"../../notebookBrowser.js\";\nimport type { CellViewModelStateChangeEvent } from \"../../notebookViewEvents.js\";\nimport { CellContentPart } from \"../cellPart.js\";\n\nexport class CellProgressBar extends CellContentPart {\n\tprivate readonly _progressBar: ProgressBar;\n\tprivate readonly _collapsedProgressBar: ProgressBar;\n\n\tconstructor(\n\t\teditorContainer: HTMLElement,\n\t\tcollapsedInputContainer: HTMLElement,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService) {\n\t\tsuper();\n\n\t\tthis._progressBar = this._register(new ProgressBar(editorContainer, defaultProgressBarStyles));\n\t\tthis._progressBar.hide();\n\n\t\tthis._collapsedProgressBar = this._register(new ProgressBar(collapsedInputContainer, defaultProgressBarStyles));\n\t\tthis._collapsedProgressBar.hide();\n\t}\n\n\toverride didRenderCell(element: ICellViewModel): void {\n\t\tthis._updateForExecutionState(element);\n\t}\n\n\toverride updateForExecutionState(\n\t\telement: ICellViewModel,\n\t\te: ICellExecutionStateChangedEvent,\n\t): void {\n\t\tthis._updateForExecutionState(element, e);\n\t}\n\n\toverride updateState(\n\t\telement: ICellViewModel,\n\t\te: CellViewModelStateChangeEvent,\n\t): void {\n\t\tif (e.metadataChanged || e.internalMetadataChanged) {\n\t\t\tthis._updateForExecutionState(element);\n\t\t}\n\n\t\tif (e.inputCollapsedChanged) {\n\t\t\tconst exeState =\n\t\t\t\tthis._notebookExecutionStateService.getCellExecution(\n\t\t\t\t\telement.uri,\n\t\t\t\t);\n\t\t\tif (element.isInputCollapsed) {\n\t\t\t\tthis._progressBar.hide();\n\t\t\t\tif (exeState?.state === NotebookCellExecutionState.Executing) {\n\t\t\t\t\tthis._updateForExecutionState(element);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._collapsedProgressBar.hide();\n\t\t\t\tif (exeState?.state === NotebookCellExecutionState.Executing) {\n\t\t\t\t\tthis._updateForExecutionState(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateForExecutionState(\n\t\telement: ICellViewModel,\n\t\te?: ICellExecutionStateChangedEvent,\n\t): void {\n\t\tconst exeState =\n\t\t\te?.changed ??\n\t\t\tthis._notebookExecutionStateService.getCellExecution(element.uri);\n\t\tconst progressBar = element.isInputCollapsed\n\t\t\t? this._collapsedProgressBar\n\t\t\t: this._progressBar;\n\t\tif (\n\t\t\texeState?.state === NotebookCellExecutionState.Executing &&\n\t\t\t(!exeState.didPause || element.isInputCollapsed)\n\t\t) {\n\t\t\tshowProgressBar(progressBar);\n\t\t} else {\n\t\t\tprogressBar.hide();\n\t\t}\n\t}\n}\n\nfunction showProgressBar(progressBar: ProgressBar): void {\n\tprogressBar.infinite().show(500);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,mBAAmB;AAC5B,SAAS,gCAAgC;AACzC,SAAS,kCAAkC;AAC3C;AAAA,EAEC;AAAA,OACM;AAGP,SAAS,uBAAuB;AAEzB,IAAM,kBAAN,cAA8B,gBAAgB;AAAA,EAIpD,YACC,iBACA,yBACiD,gCAAgE;AACjH,UAAM;AAD2C;AAGjD,SAAK,eAAe,KAAK,UAAU,IAAI,YAAY,iBAAiB,wBAAwB,CAAC;AAC7F,SAAK,aAAa,KAAK;AAEvB,SAAK,wBAAwB,KAAK,UAAU,IAAI,YAAY,yBAAyB,wBAAwB,CAAC;AAC9G,SAAK,sBAAsB,KAAK;AAAA,EACjC;AAAA,EA/BD,OAgBqD;AAAA;AAAA;AAAA,EACnC;AAAA,EACA;AAAA,EAeR,cAAc,SAA+B;AACrD,SAAK,yBAAyB,OAAO;AAAA,EACtC;AAAA,EAES,wBACR,SACA,GACO;AACP,SAAK,yBAAyB,SAAS,CAAC;AAAA,EACzC;AAAA,EAES,YACR,SACA,GACO;AACP,QAAI,EAAE,mBAAmB,EAAE,yBAAyB;AACnD,WAAK,yBAAyB,OAAO;AAAA,IACtC;AAEA,QAAI,EAAE,uBAAuB;AAC5B,YAAM,WACL,KAAK,+BAA+B;AAAA,QACnC,QAAQ;AAAA,MACT;AACD,UAAI,QAAQ,kBAAkB;AAC7B,aAAK,aAAa,KAAK;AACvB,YAAI,UAAU,UAAU,2BAA2B,WAAW;AAC7D,eAAK,yBAAyB,OAAO;AAAA,QACtC;AAAA,MACD,OAAO;AACN,aAAK,sBAAsB,KAAK;AAChC,YAAI,UAAU,UAAU,2BAA2B,WAAW;AAC7D,eAAK,yBAAyB,OAAO;AAAA,QACtC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,yBACP,SACA,GACO;AACP,UAAM,WACL,GAAG,WACH,KAAK,+BAA+B,iBAAiB,QAAQ,GAAG;AACjE,UAAM,cAAc,QAAQ,mBACzB,KAAK,wBACL,KAAK;AACR,QACC,UAAU,UAAU,2BAA2B,cAC9C,CAAC,SAAS,YAAY,QAAQ,mBAC9B;AACD,sBAAgB,WAAW;AAAA,IAC5B,OAAO;AACN,kBAAY,KAAK;AAAA,IAClB;AAAA,EACD;AACD;AA1Ea,kBAAN;AAAA,EAOJ;AAAA,GAPU;AA4Eb,SAAS,gBAAgB,aAAgC;AACxD,cAAY,SAAS,EAAE,KAAK,GAAG;AAChC;AAFS;",
  "names": []
}
