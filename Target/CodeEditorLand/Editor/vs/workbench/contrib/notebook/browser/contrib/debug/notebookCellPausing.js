var h=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var l=(a,i,r,t)=>{for(var e=t>1?void 0:t?p(i,r):i,o=a.length-1,s;o>=0;o--)(s=a[o])&&(e=(t?s(i,r,e):s(e))||e);return t&&e&&h(i,r,e),e},d=(a,i)=>(r,t)=>i(r,t,a);import{RunOnceScheduler as S}from"../../../../../../base/common/async.js";import{Disposable as f}from"../../../../../../base/common/lifecycle.js";import{URI as m}from"../../../../../../base/common/uri.js";import{Registry as g}from"../../../../../../platform/registry/common/platform.js";import{Extensions as C}from"../../../../../common/contributions.js";import{IDebugService as b}from"../../../../debug/common/debug.js";import{CellUri as u}from"../../../common/notebookCommon.js";import{CellExecutionUpdateType as k}from"../../../common/notebookExecutionService.js";import{INotebookExecutionStateService as v}from"../../../common/notebookExecutionStateService.js";import{LifecyclePhase as I}from"../../../../../services/lifecycle/common/lifecycle.js";let n=class extends f{constructor(r,t){super();this._debugService=r;this._notebookExecutionStateService=t;this._register(r.getModel().onDidChangeCallStack(()=>{this.onDidChangeCallStack(!0),this._scheduler.schedule()})),this._scheduler=this._register(new S(()=>this.onDidChangeCallStack(!1),2e3))}_pausedCells=new Set;_scheduler;async onDidChangeCallStack(r){const t=new Set;for(const e of this._debugService.getModel().getSessions())for(const o of e.getAllThreads()){let s=o.getCallStack();r&&!s.length&&(s=o.getStaleCallStack()),s.forEach(c=>{u.parse(c.source.uri)&&(t.add(c.source.uri.toString()),this.editIsPaused(c.source.uri,!0))})}for(const e of this._pausedCells)t.has(e)||(this.editIsPaused(m.parse(e),!1),this._pausedCells.delete(e));t.forEach(e=>this._pausedCells.add(e))}editIsPaused(r,t){if(u.parse(r)){const o=this._notebookExecutionStateService.getCellExecution(r);o&&(o.isPaused!==t||!o.didPause)&&o.update([{editType:k.ExecutionState,didPause:!0,isPaused:t}])}}};n=l([d(0,b),d(1,v)],n),g.as(C.Workbench).registerWorkbenchContribution(n,I.Restored);
