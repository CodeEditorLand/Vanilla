{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/debug/notebookDebugDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Delayer } from \"../../../../../../base/common/async.js\";\nimport { Disposable } from \"../../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IRange,\n\tRange,\n} from \"../../../../../../editor/common/core/range.js\";\nimport { IConfigurationService } from \"../../../../../../platform/configuration/common/configuration.js\";\nimport { debugIconBreakpointForeground } from \"../../../../debug/browser/breakpointEditorContribution.js\";\nimport {\n\tfocusedStackFrameColor,\n\ttopStackFrameColor,\n} from \"../../../../debug/browser/callStackEditorContribution.js\";\nimport {\n\tIDebugService,\n\ttype IStackFrame,\n} from \"../../../../debug/common/debug.js\";\nimport {\n\tCellUri,\n\tNotebookCellExecutionState,\n} from \"../../../common/notebookCommon.js\";\nimport {\n\tINotebookExecutionStateService,\n\tNotebookExecutionType,\n} from \"../../../common/notebookExecutionStateService.js\";\nimport {\n\ttype INotebookCellDecorationOptions,\n\ttype INotebookDeltaDecoration,\n\ttype INotebookEditor,\n\ttype INotebookEditorContribution,\n\tNotebookOverviewRulerLane,\n} from \"../../notebookBrowser.js\";\nimport { registerNotebookContribution } from \"../../notebookEditorExtensions.js\";\nimport { runningCellRulerDecorationColor } from \"../../notebookEditorWidget.js\";\n\ninterface ICellAndRange {\n\thandle: number;\n\trange: IRange;\n}\n\nexport class PausedCellDecorationContribution\n\textends Disposable\n\timplements INotebookEditorContribution\n{\n\tstatic id = \"workbench.notebook.debug.pausedCellDecorations\";\n\n\tprivate _currentTopDecorations: string[] = [];\n\tprivate _currentOtherDecorations: string[] = [];\n\tprivate _executingCellDecorations: string[] = [];\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INotebookExecutionStateService\n\t\tprivate readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t\tsuper();\n\n\t\tconst delayer = this._register(new Delayer(200));\n\t\tthis._register(\n\t\t\t_debugService\n\t\t\t\t.getModel()\n\t\t\t\t.onDidChangeCallStack(() => this.updateExecutionDecorations()),\n\t\t);\n\t\tthis._register(\n\t\t\t_debugService\n\t\t\t\t.getViewModel()\n\t\t\t\t.onDidFocusStackFrame(() => this.updateExecutionDecorations()),\n\t\t);\n\t\tthis._register(\n\t\t\t_notebookExecutionStateService.onDidChangeExecution((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.type === NotebookExecutionType.cell &&\n\t\t\t\t\tthis._notebookEditor.textModel &&\n\t\t\t\t\te.affectsNotebook(this._notebookEditor.textModel.uri)\n\t\t\t\t) {\n\t\t\t\t\tdelayer.trigger(() => this.updateExecutionDecorations());\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateExecutionDecorations(): void {\n\t\tconst exes = this._notebookEditor.textModel\n\t\t\t? this._notebookExecutionStateService.getCellExecutionsByHandleForNotebook(\n\t\t\t\t\tthis._notebookEditor.textModel.uri,\n\t\t\t\t)\n\t\t\t: undefined;\n\n\t\tconst topFrameCellsAndRanges: ICellAndRange[] = [];\n\t\tlet focusedFrameCellAndRange: ICellAndRange | undefined;\n\n\t\tconst getNotebookCellAndRange = (\n\t\t\tsf: IStackFrame,\n\t\t): ICellAndRange | undefined => {\n\t\t\tconst parsed = CellUri.parse(sf.source.uri);\n\t\t\tif (\n\t\t\t\tparsed &&\n\t\t\t\tparsed.notebook.toString() ===\n\t\t\t\t\tthis._notebookEditor.textModel?.uri.toString()\n\t\t\t) {\n\t\t\t\treturn { handle: parsed.handle, range: sf.range };\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tfor (const session of this._debugService.getModel().getSessions()) {\n\t\t\tfor (const thread of session.getAllThreads()) {\n\t\t\t\tconst topFrame = thread.getTopStackFrame();\n\t\t\t\tif (topFrame) {\n\t\t\t\t\tconst notebookCellAndRange =\n\t\t\t\t\t\tgetNotebookCellAndRange(topFrame);\n\t\t\t\t\tif (notebookCellAndRange) {\n\t\t\t\t\t\ttopFrameCellsAndRanges.push(notebookCellAndRange);\n\t\t\t\t\t\texes?.delete(notebookCellAndRange.handle);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst focusedFrame =\n\t\t\tthis._debugService.getViewModel().focusedStackFrame;\n\t\tif (focusedFrame && focusedFrame.thread.stopped) {\n\t\t\tconst thisFocusedFrameCellAndRange =\n\t\t\t\tgetNotebookCellAndRange(focusedFrame);\n\t\t\tif (\n\t\t\t\tthisFocusedFrameCellAndRange &&\n\t\t\t\t!topFrameCellsAndRanges.some(\n\t\t\t\t\t(topFrame) =>\n\t\t\t\t\t\ttopFrame.handle ===\n\t\t\t\t\t\t\tthisFocusedFrameCellAndRange?.handle &&\n\t\t\t\t\t\tRange.equalsRange(\n\t\t\t\t\t\t\ttopFrame.range,\n\t\t\t\t\t\t\tthisFocusedFrameCellAndRange?.range,\n\t\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfocusedFrameCellAndRange = thisFocusedFrameCellAndRange;\n\t\t\t\texes?.delete(focusedFrameCellAndRange.handle);\n\t\t\t}\n\t\t}\n\n\t\tthis.setTopFrameDecoration(topFrameCellsAndRanges);\n\t\tthis.setFocusedFrameDecoration(focusedFrameCellAndRange);\n\n\t\tconst exeHandles = exes\n\t\t\t? Array.from(exes.entries())\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t([_, exe]) =>\n\t\t\t\t\t\t\texe.state === NotebookCellExecutionState.Executing,\n\t\t\t\t\t)\n\t\t\t\t\t.map(([handle]) => handle)\n\t\t\t: [];\n\t\tthis.setExecutingCellDecorations(exeHandles);\n\t}\n\n\tprivate setTopFrameDecoration(handlesAndRanges: ICellAndRange[]): void {\n\t\tconst newDecorations = handlesAndRanges.map(({ handle, range }) => {\n\t\t\tconst options: INotebookCellDecorationOptions = {\n\t\t\t\toverviewRuler: {\n\t\t\t\t\tcolor: topStackFrameColor,\n\t\t\t\t\tincludeOutput: false,\n\t\t\t\t\tmodelRanges: [range],\n\t\t\t\t\tposition: NotebookOverviewRulerLane.Full,\n\t\t\t\t},\n\t\t\t};\n\t\t\treturn { handle, options };\n\t\t});\n\n\t\tthis._currentTopDecorations = this._notebookEditor.deltaCellDecorations(\n\t\t\tthis._currentTopDecorations,\n\t\t\tnewDecorations,\n\t\t);\n\t}\n\n\tprivate setFocusedFrameDecoration(\n\t\tfocusedFrameCellAndRange: ICellAndRange | undefined,\n\t): void {\n\t\tlet newDecorations: INotebookDeltaDecoration[] = [];\n\t\tif (focusedFrameCellAndRange) {\n\t\t\tconst options: INotebookCellDecorationOptions = {\n\t\t\t\toverviewRuler: {\n\t\t\t\t\tcolor: focusedStackFrameColor,\n\t\t\t\t\tincludeOutput: false,\n\t\t\t\t\tmodelRanges: [focusedFrameCellAndRange.range],\n\t\t\t\t\tposition: NotebookOverviewRulerLane.Full,\n\t\t\t\t},\n\t\t\t};\n\t\t\tnewDecorations = [\n\t\t\t\t{ handle: focusedFrameCellAndRange.handle, options },\n\t\t\t];\n\t\t}\n\n\t\tthis._currentOtherDecorations =\n\t\t\tthis._notebookEditor.deltaCellDecorations(\n\t\t\t\tthis._currentOtherDecorations,\n\t\t\t\tnewDecorations,\n\t\t\t);\n\t}\n\n\tprivate setExecutingCellDecorations(handles: number[]): void {\n\t\tconst newDecorations = handles.map((handle) => {\n\t\t\tconst options: INotebookCellDecorationOptions = {\n\t\t\t\toverviewRuler: {\n\t\t\t\t\tcolor: runningCellRulerDecorationColor,\n\t\t\t\t\tincludeOutput: false,\n\t\t\t\t\tmodelRanges: [new Range(0, 0, 0, 0)],\n\t\t\t\t\tposition: NotebookOverviewRulerLane.Left,\n\t\t\t\t},\n\t\t\t};\n\t\t\treturn { handle, options };\n\t\t});\n\n\t\tthis._executingCellDecorations =\n\t\t\tthis._notebookEditor.deltaCellDecorations(\n\t\t\t\tthis._executingCellDecorations,\n\t\t\t\tnewDecorations,\n\t\t\t);\n\t}\n}\n\nregisterNotebookContribution(\n\tPausedCellDecorationContribution.id,\n\tPausedCellDecorationContribution,\n);\n\nexport class NotebookBreakpointDecorations\n\textends Disposable\n\timplements INotebookEditorContribution\n{\n\tstatic id = \"workbench.notebook.debug.notebookBreakpointDecorations\";\n\n\tprivate _currentDecorations: string[] = [];\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\t_debugService\n\t\t\t\t.getModel()\n\t\t\t\t.onDidChangeBreakpoints(() => this.updateDecorations()),\n\t\t);\n\t\tthis._register(\n\t\t\t_configService.onDidChangeConfiguration(\n\t\t\t\t(e) =>\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\"debug.showBreakpointsInOverviewRuler\",\n\t\t\t\t\t) && this.updateDecorations(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate updateDecorations(): void {\n\t\tconst enabled = this._configService.getValue(\n\t\t\t\"debug.showBreakpointsInOverviewRuler\",\n\t\t);\n\t\tconst newDecorations = enabled\n\t\t\t? (this._debugService\n\t\t\t\t\t.getModel()\n\t\t\t\t\t.getBreakpoints()\n\t\t\t\t\t.map((breakpoint) => {\n\t\t\t\t\t\tconst parsed = CellUri.parse(breakpoint.uri);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!parsed ||\n\t\t\t\t\t\t\tparsed.notebook.toString() !==\n\t\t\t\t\t\t\t\tthis._notebookEditor.textModel!.uri.toString()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst options: INotebookCellDecorationOptions = {\n\t\t\t\t\t\t\toverviewRuler: {\n\t\t\t\t\t\t\t\tcolor: debugIconBreakpointForeground,\n\t\t\t\t\t\t\t\tincludeOutput: false,\n\t\t\t\t\t\t\t\tmodelRanges: [\n\t\t\t\t\t\t\t\t\tnew Range(\n\t\t\t\t\t\t\t\t\t\tbreakpoint.lineNumber,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\tbreakpoint.lineNumber,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tposition: NotebookOverviewRulerLane.Left,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn { handle: parsed.handle, options };\n\t\t\t\t\t})\n\t\t\t\t\t.filter((x) => !!x) as INotebookDeltaDecoration[])\n\t\t\t: [];\n\t\tthis._currentDecorations = this._notebookEditor.deltaCellDecorations(\n\t\t\tthis._currentDecorations,\n\t\t\tnewDecorations,\n\t\t);\n\t}\n}\n\nregisterNotebookContribution(\n\tNotebookBreakpointDecorations.id,\n\tNotebookBreakpointDecorations,\n);\n"],
  "mappings": "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",
  "names": []
}
