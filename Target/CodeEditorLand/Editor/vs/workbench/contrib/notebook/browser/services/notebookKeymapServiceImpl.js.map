{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookKeymapServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from '../../../../../base/common/errors.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../../nls.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../../platform/notification/common/notification.js';\nimport { getInstalledExtensions, IExtensionStatus } from '../../../extensions/common/extensionsUtils.js';\nimport { INotebookKeymapService } from '../../common/notebookKeymapService.js';\nimport { EnablementState, IWorkbenchExtensionEnablementService } from '../../../../services/extensionManagement/common/extensionManagement.js';\nimport { ILifecycleService } from '../../../../services/lifecycle/common/lifecycle.js';\nimport { IExtensionIdentifier, IExtensionManagementService, InstallOperation } from '../../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { areSameExtensions } from '../../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { Memento, MementoObject } from '../../../../common/memento.js';\nimport { distinct } from '../../../../../base/common/arrays.js';\n\nfunction onExtensionChanged(accessor: ServicesAccessor): Event<IExtensionIdentifier[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(IWorkbenchExtensionEnablementService);\n\tconst onDidInstallExtensions = Event.chain(extensionService.onDidInstallExtensions, $ =>\n\t\t$.filter(e => e.some(({ operation }) => operation === InstallOperation.Install))\n\t\t\t.map(e => e.map(({ identifier }) => identifier))\n\t);\n\treturn Event.debounce<IExtensionIdentifier[], IExtensionIdentifier[]>(Event.any(\n\t\tEvent.any(onDidInstallExtensions, Event.map(extensionService.onDidUninstallExtension, e => [e.identifier])),\n\t\tEvent.map(extensionEnablementService.onEnablementChanged, extensions => extensions.map(e => e.identifier))\n\t), (result: IExtensionIdentifier[] | undefined, identifiers: IExtensionIdentifier[]) => {\n\t\tresult = result || (identifiers.length ? [identifiers[0]] : []);\n\t\tfor (const identifier of identifiers) {\n\t\t\tif (result.some(l => !areSameExtensions(l, identifier))) {\n\t\t\t\tresult.push(identifier);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t});\n}\n\nconst hasRecommendedKeymapKey = 'hasRecommendedKeymap';\n\nexport class NotebookKeymapService extends Disposable implements INotebookKeymapService {\n\t_serviceBrand: undefined;\n\n\tprivate notebookKeymapMemento: Memento;\n\tprivate notebookKeymap: MementoObject;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t) {\n\t\tsuper();\n\n\t\tthis.notebookKeymapMemento = new Memento('notebookKeymap', storageService);\n\t\tthis.notebookKeymap = this.notebookKeymapMemento.getMemento(StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tthis._register(lifecycleService.onDidShutdown(() => this.dispose()));\n\t\tthis._register(this.instantiationService.invokeFunction(onExtensionChanged)((identifiers => {\n\t\t\tPromise.all(identifiers.map(identifier => this.checkForOtherKeymaps(identifier)))\n\t\t\t\t.then(undefined, onUnexpectedError);\n\t\t})));\n\t}\n\n\tprivate checkForOtherKeymaps(extensionIdentifier: IExtensionIdentifier): Promise<void> {\n\t\treturn this.instantiationService.invokeFunction(getInstalledExtensions).then(extensions => {\n\t\t\tconst keymaps = extensions.filter(extension => isNotebookKeymapExtension(extension));\n\t\t\tconst extension = keymaps.find(extension => areSameExtensions(extension.identifier, extensionIdentifier));\n\t\t\tif (extension && extension.globallyEnabled) {\n\t\t\t\t// there is already a keymap extension\n\t\t\t\tthis.notebookKeymap[hasRecommendedKeymapKey] = true;\n\t\t\t\tthis.notebookKeymapMemento.saveMemento();\n\t\t\t\tconst otherKeymaps = keymaps.filter(extension => !areSameExtensions(extension.identifier, extensionIdentifier) && extension.globallyEnabled);\n\t\t\t\tif (otherKeymaps.length) {\n\t\t\t\t\treturn this.promptForDisablingOtherKeymaps(extension, otherKeymaps);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate promptForDisablingOtherKeymaps(newKeymap: IExtensionStatus, oldKeymaps: IExtensionStatus[]): void {\n\t\tconst onPrompt = (confirmed: boolean) => {\n\t\t\tif (confirmed) {\n\t\t\t\tthis.extensionEnablementService.setEnablement(oldKeymaps.map(keymap => keymap.local), EnablementState.DisabledGlobally);\n\t\t\t}\n\t\t};\n\n\t\tthis.notificationService.prompt(Severity.Info, localize('disableOtherKeymapsConfirmation', \"Disable other keymaps ({0}) to avoid conflicts between keybindings?\", distinct(oldKeymaps.map(k => k.local.manifest.displayName)).map(name => `'${name}'`).join(', ')),\n\t\t\t[{\n\t\t\t\tlabel: localize('yes', \"Yes\"),\n\t\t\t\trun: () => onPrompt(true)\n\t\t\t}, {\n\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\trun: () => onPrompt(false)\n\t\t\t}]\n\t\t);\n\t}\n}\n\nexport function isNotebookKeymapExtension(extension: IExtensionStatus): boolean {\n\tif (extension.local.manifest.extensionPack) {\n\t\treturn false;\n\t}\n\n\tconst keywords = extension.local.manifest.keywords;\n\tif (!keywords) {\n\t\treturn false;\n\t}\n\n\treturn keywords.indexOf('notebook-keymap') !== -1;\n}\n"],
  "mappings": "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",
  "names": ["extension"]
}
