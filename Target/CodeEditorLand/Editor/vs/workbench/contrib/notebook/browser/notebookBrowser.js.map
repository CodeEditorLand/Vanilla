{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/notebookBrowser.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CodeWindow } from \"../../../../base/browser/window.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { IObservable } from \"../../../../base/common/observable.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport type { IEditorContributionDescription } from \"../../../../editor/browser/editorExtensions.js\";\nimport type {\n\tIEditorCommentsOptions,\n\tIEditorOptions,\n} from \"../../../../editor/common/config/editorOptions.js\";\nimport type { FontInfo } from \"../../../../editor/common/config/fontInfo.js\";\nimport type { IPosition } from \"../../../../editor/common/core/position.js\";\nimport type { IRange, Range } from \"../../../../editor/common/core/range.js\";\nimport type { Selection } from \"../../../../editor/common/core/selection.js\";\nimport type * as editorCommon from \"../../../../editor/common/editorCommon.js\";\nimport type {\n\tFindMatch,\n\tIModelDeltaDecoration,\n\tIReadonlyTextBuffer,\n\tITextModel,\n\tTrackedRangeStickiness,\n} from \"../../../../editor/common/model.js\";\nimport type { MenuId } from \"../../../../platform/actions/common/actions.js\";\nimport type { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type {\n\tITextEditorOptions,\n\tITextResourceEditorInput,\n} from \"../../../../platform/editor/common/editor.js\";\nimport type { IConstructorSignature } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tIEditorPane,\n\tIEditorPaneWithSelection,\n} from \"../../../common/editor.js\";\nimport type { IWebviewElement } from \"../../webview/browser/webview.js\";\nimport type { NotebookCellTextModel } from \"../common/model/notebookCellTextModel.js\";\nimport type { NotebookTextModel } from \"../common/model/notebookTextModel.js\";\nimport {\n\ttype CellKind,\n\ttype ICellOutput,\n\ttype INotebookCellStatusBarItem,\n\ttype INotebookFindOptions,\n\ttype INotebookRendererInfo,\n\ttype IOrderedMimeType,\n\tNOTEBOOK_EDITOR_ID,\n\ttype NotebookCellInternalMetadata,\n\ttype NotebookCellMetadata,\n} from \"../common/notebookCommon.js\";\nimport { isCompositeNotebookEditorInput } from \"../common/notebookEditorInput.js\";\nimport type { INotebookKernel } from \"../common/notebookKernelService.js\";\nimport {\n\ttype ICellRange,\n\tcellRangesToIndexes,\n\treduceCellRanges,\n} from \"../common/notebookRange.js\";\nimport type { NotebookOptions } from \"./notebookOptions.js\";\nimport type {\n\tCellViewModelStateChangeEvent,\n\tNotebookCellStateChangedEvent,\n\tNotebookLayoutInfo,\n} from \"./notebookViewEvents.js\";\n\n//#region Shared commands\nexport const EXPAND_CELL_INPUT_COMMAND_ID = \"notebook.cell.expandCellInput\";\nexport const EXECUTE_CELL_COMMAND_ID = \"notebook.cell.execute\";\nexport const DETECT_CELL_LANGUAGE = \"notebook.cell.detectLanguage\";\nexport const CHANGE_CELL_LANGUAGE = \"notebook.cell.changeLanguage\";\nexport const QUIT_EDIT_CELL_COMMAND_ID = \"notebook.cell.quitEdit\";\nexport const EXPAND_CELL_OUTPUT_COMMAND_ID = \"notebook.cell.expandCellOutput\";\n\n//#endregion\n\n//#region Notebook extensions\n\n// Hardcoding viewType/extension ID for now. TODO these should be replaced once we can\n// look them up in the marketplace dynamically.\nexport const IPYNB_VIEW_TYPE = \"jupyter-notebook\";\nexport const JUPYTER_EXTENSION_ID = \"ms-toolsai.jupyter\";\n/** @deprecated use the notebookKernel<Type> \"keyword\" instead */\nexport const KERNEL_EXTENSIONS = new Map<string, string>([\n\t[IPYNB_VIEW_TYPE, JUPYTER_EXTENSION_ID],\n]);\n// @TODO lramos15, place this in a similar spot to our normal recommendations.\nexport const KERNEL_RECOMMENDATIONS = new Map<\n\tstring,\n\tMap<string, INotebookExtensionRecommendation>\n>();\nKERNEL_RECOMMENDATIONS.set(\n\tIPYNB_VIEW_TYPE,\n\tnew Map<string, INotebookExtensionRecommendation>(),\n);\nKERNEL_RECOMMENDATIONS.get(IPYNB_VIEW_TYPE)?.set(\"python\", {\n\textensionIds: [\"ms-python.python\", JUPYTER_EXTENSION_ID],\n\tdisplayName: \"Python + Jupyter\",\n});\n\nexport interface INotebookExtensionRecommendation {\n\treadonly extensionIds: string[];\n\treadonly displayName?: string;\n}\n\n//#endregion\n\n//#region  Output related types\n\n// !! IMPORTANT !! ----------------------------------------------------------------------------------\n// NOTE that you MUST update vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts#L1986\n// whenever changing the values of this const enum. The webviewPreloads-files manually inlines these values\n// because it cannot have dependencies.\n// !! IMPORTANT !! ----------------------------------------------------------------------------------\nexport enum RenderOutputType {\n\tHtml = 0,\n\tExtension = 1,\n}\n\nexport interface IRenderPlainHtmlOutput {\n\treadonly type: RenderOutputType.Html;\n\treadonly source: IDisplayOutputViewModel;\n\treadonly htmlContent: string;\n}\n\nexport interface IRenderOutputViaExtension {\n\treadonly type: RenderOutputType.Extension;\n\treadonly source: IDisplayOutputViewModel;\n\treadonly mimeType: string;\n\treadonly renderer: INotebookRendererInfo;\n}\n\nexport type IInsetRenderOutput =\n\t| IRenderPlainHtmlOutput\n\t| IRenderOutputViaExtension;\n\nexport interface ICellOutputViewModel extends IDisposable {\n\tcellViewModel: IGenericCellViewModel;\n\t/**\n\t * When rendering an output, `model` should always be used as we convert legacy `text/error` output to `display_data` output under the hood.\n\t */\n\tmodel: ICellOutput;\n\tresolveMimeTypes(\n\t\ttextModel: NotebookTextModel,\n\t\tkernelProvides: readonly string[] | undefined,\n\t): [readonly IOrderedMimeType[], number];\n\tpickedMimeType: IOrderedMimeType | undefined;\n\thasMultiMimeType(): boolean;\n\treadonly onDidResetRenderer: Event<void>;\n\treadonly visible: IObservable<boolean>;\n\tsetVisible(visible: boolean, force?: boolean): void;\n\tresetRenderer(): void;\n\ttoRawJSON(): any;\n}\n\nexport interface IDisplayOutputViewModel extends ICellOutputViewModel {\n\tresolveMimeTypes(\n\t\ttextModel: NotebookTextModel,\n\t\tkernelProvides: readonly string[] | undefined,\n\t): [readonly IOrderedMimeType[], number];\n}\n\n//#endregion\n\n//#region Shared types between the Notebook Editor and Notebook Diff Editor, they are mostly used for output rendering\n\nexport interface IGenericCellViewModel {\n\tid: string;\n\thandle: number;\n\turi: URI;\n\tmetadata: NotebookCellMetadata;\n\toutputIsHovered: boolean;\n\toutputIsFocused: boolean;\n\tinputInOutputIsFocused: boolean;\n\toutputsViewModels: ICellOutputViewModel[];\n\tgetOutputOffset(index: number): number;\n\tupdateOutputHeight(index: number, height: number, source?: string): void;\n}\n\nexport interface IDisplayOutputLayoutUpdateRequest {\n\treadonly cell: IGenericCellViewModel;\n\toutput: IDisplayOutputViewModel;\n\tcellTop: number;\n\toutputOffset: number;\n\tforceDisplay: boolean;\n}\n\nexport interface ICommonCellInfo {\n\treadonly cellId: string;\n\treadonly cellHandle: number;\n\treadonly cellUri: URI;\n\treadonly executionId?: string;\n}\n\nexport enum ScrollToRevealBehavior {\n\tfullCell = 0,\n\tfirstLine = 1,\n}\n\nexport interface IFocusNotebookCellOptions {\n\treadonly skipReveal?: boolean;\n\treadonly focusEditorLine?: number;\n\treadonly revealBehavior?: ScrollToRevealBehavior | undefined;\n\treadonly outputId?: string;\n\treadonly altOutputId?: string;\n\treadonly outputWebviewFocused?: boolean;\n}\n\n//#endregion\n\nexport enum CellLayoutState {\n\tUninitialized = 0,\n\tEstimated = 1,\n\tFromCache = 2,\n\tMeasured = 3,\n}\n\n/** LayoutInfo of the parts that are shared between all cell types. */\nexport interface CellLayoutInfo {\n\treadonly layoutState: CellLayoutState;\n\treadonly fontInfo: FontInfo | null;\n\treadonly chatHeight: number;\n\treadonly editorWidth: number;\n\treadonly editorHeight: number;\n\treadonly statusBarHeight: number;\n\treadonly commentOffset: number;\n\treadonly commentHeight: number;\n\treadonly bottomToolbarOffset: number;\n\treadonly totalHeight: number;\n}\n\nexport interface CellLayoutChangeEvent {\n\treadonly font?: FontInfo;\n\treadonly outerWidth?: number;\n\treadonly commentHeight?: boolean;\n}\n\nexport interface CodeCellLayoutInfo extends CellLayoutInfo {\n\treadonly estimatedHasHorizontalScrolling: boolean;\n\treadonly outputContainerOffset: number;\n\treadonly outputTotalHeight: number;\n\treadonly outputShowMoreContainerHeight: number;\n\treadonly outputShowMoreContainerOffset: number;\n\treadonly codeIndicatorHeight: number;\n\treadonly outputIndicatorHeight: number;\n}\n\nexport interface CodeCellLayoutChangeEvent extends CellLayoutChangeEvent {\n\treadonly source?: string;\n\treadonly chatHeight?: boolean;\n\treadonly editorHeight?: boolean;\n\treadonly outputHeight?: boolean;\n\treadonly outputShowMoreContainerHeight?: number;\n\treadonly totalHeight?: boolean;\n}\n\nexport interface MarkupCellLayoutInfo extends CellLayoutInfo {\n\treadonly previewHeight: number;\n\treadonly foldHintHeight: number;\n}\n\nexport enum CellLayoutContext {\n\tFold = 0,\n}\n\nexport interface MarkupCellLayoutChangeEvent extends CellLayoutChangeEvent {\n\treadonly editorHeight?: number;\n\treadonly previewHeight?: number;\n\ttotalHeight?: number;\n\treadonly context?: CellLayoutContext;\n}\n\nexport interface ICommonCellViewModelLayoutChangeInfo {\n\treadonly totalHeight?: boolean | number;\n\treadonly outerWidth?: number;\n\treadonly context?: CellLayoutContext;\n}\nexport interface ICellViewModel extends IGenericCellViewModel {\n\treadonly model: NotebookCellTextModel;\n\treadonly id: string;\n\treadonly textBuffer: IReadonlyTextBuffer;\n\treadonly layoutInfo: CellLayoutInfo;\n\treadonly onDidChangeLayout: Event<ICommonCellViewModelLayoutChangeInfo>;\n\treadonly onDidChangeCellStatusBarItems: Event<void>;\n\treadonly onCellDecorationsChanged: Event<{\n\t\tadded: INotebookCellDecorationOptions[];\n\t\tremoved: INotebookCellDecorationOptions[];\n\t}>;\n\treadonly onDidChangeState: Event<CellViewModelStateChangeEvent>;\n\treadonly onDidChangeEditorAttachState: Event<void>;\n\treadonly editStateSource: string;\n\treadonly editorAttached: boolean;\n\tisInputCollapsed: boolean;\n\tisOutputCollapsed: boolean;\n\tdragging: boolean;\n\thandle: number;\n\turi: URI;\n\tlanguage: string;\n\treadonly mime: string;\n\tcellKind: CellKind;\n\tlineNumbers: \"on\" | \"off\" | \"inherit\";\n\tcommentOptions: IEditorCommentsOptions;\n\tchatHeight: number;\n\tcommentHeight: number;\n\tfocusMode: CellFocusMode;\n\tfocusedOutputId?: string | undefined;\n\toutputIsHovered: boolean;\n\tgetText(): string;\n\tgetAlternativeId(): number;\n\tgetTextLength(): number;\n\tgetHeight(lineHeight: number): number;\n\tmetadata: NotebookCellMetadata;\n\tinternalMetadata: NotebookCellInternalMetadata;\n\ttextModel: ITextModel | undefined;\n\thasModel(): this is IEditableCellViewModel;\n\tresolveTextModel(): Promise<ITextModel>;\n\tgetSelections(): Selection[];\n\tsetSelections(selections: Selection[]): void;\n\tgetSelectionsStartPosition(): IPosition[] | undefined;\n\tgetCellDecorations(): INotebookCellDecorationOptions[];\n\tgetCellStatusBarItems(): INotebookCellStatusBarItem[];\n\tgetEditState(): CellEditState;\n\tupdateEditState(state: CellEditState, source: string): void;\n\tdeltaModelDecorations(\n\t\toldDecorations: readonly string[],\n\t\tnewDecorations: readonly IModelDeltaDecoration[],\n\t): string[];\n\tgetCellDecorationRange(id: string): Range | null;\n\tenableAutoLanguageDetection(): void;\n}\n\nexport interface IEditableCellViewModel extends ICellViewModel {\n\ttextModel: ITextModel;\n}\n\nexport interface INotebookEditorMouseEvent {\n\treadonly event: MouseEvent;\n\treadonly target: ICellViewModel;\n}\n\nexport interface INotebookEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\t/**\n\t * Store view state.\n\t */\n\tsaveViewState?(): unknown;\n\t/**\n\t * Restore view state.\n\t */\n\trestoreViewState?(state: unknown): void;\n}\n\n/**\n * Vertical Lane in the overview ruler of the notebook editor.\n */\nexport enum NotebookOverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7,\n}\n\nexport interface INotebookCellDecorationOptions {\n\tclassName?: string;\n\tgutterClassName?: string;\n\toutputClassName?: string;\n\ttopClassName?: string;\n\toverviewRuler?: {\n\t\tcolor: string;\n\t\tmodelRanges: IRange[];\n\t\tincludeOutput: boolean;\n\t\tposition: NotebookOverviewRulerLane;\n\t};\n}\n\nexport interface INotebookDeltaDecoration {\n\treadonly handle: number;\n\treadonly options: INotebookCellDecorationOptions;\n}\n\nexport interface INotebookDeltaCellStatusBarItems {\n\treadonly handle: number;\n\treadonly items: readonly INotebookCellStatusBarItem[];\n}\n\nexport enum CellRevealType {\n\tDefault = 1,\n\tTop = 2,\n\tCenter = 3,\n\tCenterIfOutsideViewport = 4,\n\tNearTopIfOutsideViewport = 5,\n\tFirstLineIfOutsideViewport = 6,\n}\n\nexport enum CellRevealRangeType {\n\tDefault = 1,\n\tCenter = 2,\n\tCenterIfOutsideViewport = 3,\n}\n\nexport interface INotebookEditorOptions extends ITextEditorOptions {\n\treadonly cellOptions?: ITextResourceEditorInput;\n\treadonly cellRevealType?: CellRevealType;\n\treadonly cellSelections?: ICellRange[];\n\treadonly isReadOnly?: boolean;\n\treadonly viewState?: INotebookEditorViewState;\n\treadonly indexedCellOptions?: { index: number; selection?: IRange };\n\treadonly label?: string;\n}\n\nexport type INotebookEditorContributionCtor = IConstructorSignature<\n\tINotebookEditorContribution,\n\t[INotebookEditor]\n>;\n\nexport interface INotebookEditorContributionDescription {\n\tid: string;\n\tctor: INotebookEditorContributionCtor;\n}\n\nexport interface INotebookEditorCreationOptions {\n\treadonly isEmbedded?: boolean;\n\treadonly isReadOnly?: boolean;\n\treadonly contributions?: INotebookEditorContributionDescription[];\n\treadonly cellEditorContributions?: IEditorContributionDescription[];\n\treadonly menuIds: {\n\t\tnotebookToolbar: MenuId;\n\t\tcellTitleToolbar: MenuId;\n\t\tcellDeleteToolbar: MenuId;\n\t\tcellInsertToolbar: MenuId;\n\t\tcellTopInsertToolbar: MenuId;\n\t\tcellExecuteToolbar: MenuId;\n\t\tcellExecutePrimary?: MenuId;\n\t};\n\treadonly options?: NotebookOptions;\n\treadonly codeWindow?: CodeWindow;\n\treadonly forRepl?: boolean;\n}\n\nexport interface INotebookWebviewMessage {\n\treadonly message: unknown;\n}\n\n//#region Notebook View Model\nexport interface INotebookEditorViewState {\n\teditingCells: { [key: number]: boolean };\n\tcollapsedInputCells: { [key: number]: boolean };\n\tcollapsedOutputCells: { [key: number]: boolean };\n\tcellLineNumberStates: { [key: number]: \"on\" | \"off\" };\n\teditorViewStates: {\n\t\t[key: number]: editorCommon.ICodeEditorViewState | null;\n\t};\n\thiddenFoldingRanges?: ICellRange[];\n\tcellTotalHeights?: { [key: number]: number };\n\tscrollPosition?: { left: number; top: number };\n\tfocus?: number;\n\teditorFocused?: boolean;\n\tcontributionsState?: { [id: string]: unknown };\n\tselectedKernelId?: string;\n}\n\nexport interface ICellModelDecorations {\n\treadonly ownerId: number;\n\treadonly decorations: readonly string[];\n}\n\nexport interface ICellModelDeltaDecorations {\n\treadonly ownerId: number;\n\treadonly decorations: readonly IModelDeltaDecoration[];\n}\n\nexport interface IModelDecorationsChangeAccessor {\n\tdeltaDecorations(\n\t\toldDecorations: ICellModelDecorations[],\n\t\tnewDecorations: ICellModelDeltaDecorations[],\n\t): ICellModelDecorations[];\n}\n\nexport interface INotebookViewZone {\n\t/**\n\t * Use 0 to place a view zone before the first cell\n\t */\n\tafterModelPosition: number;\n\tdomNode: HTMLElement;\n\n\theightInPx: number;\n}\n\nexport interface INotebookViewZoneChangeAccessor {\n\taddZone(zone: INotebookViewZone): string;\n\tremoveZone(id: string): void;\n\tlayoutZone(id: string): void;\n}\n\nexport type NotebookViewCellsSplice = [\n\tnumber /* start */,\n\tnumber /* delete count */,\n\tICellViewModel[],\n];\n\nexport interface INotebookViewCellsUpdateEvent {\n\treadonly synchronous: boolean;\n\treadonly splices: readonly NotebookViewCellsSplice[];\n}\n\nexport interface INotebookViewModel {\n\tnotebookDocument: NotebookTextModel;\n\treadonly viewCells: ICellViewModel[];\n\tlayoutInfo: NotebookLayoutInfo | null;\n\tonDidChangeViewCells: Event<INotebookViewCellsUpdateEvent>;\n\tonDidChangeSelection: Event<string>;\n\tonDidFoldingStateChanged: Event<void>;\n\tgetNearestVisibleCellIndexUpwards(index: number): number;\n\tgetTrackedRange(id: string): ICellRange | null;\n\tsetTrackedRange(\n\t\tid: string | null,\n\t\tnewRange: ICellRange | null,\n\t\tnewStickiness: TrackedRangeStickiness,\n\t): string | null;\n\tgetSelections(): ICellRange[];\n\tgetCellIndex(cell: ICellViewModel): number;\n\tdeltaCellStatusBarItems(\n\t\toldItems: string[],\n\t\tnewItems: INotebookDeltaCellStatusBarItems[],\n\t): string[];\n\tgetFoldedLength(index: number): number;\n\treplaceOne(cell: ICellViewModel, range: Range, text: string): Promise<void>;\n\treplaceAll(\n\t\tmatches: CellFindMatchWithIndex[],\n\t\ttexts: string[],\n\t): Promise<void>;\n}\n//#endregion\n\nexport interface INotebookEditor {\n\t//#region Eventing\n\treadonly onDidChangeCellState: Event<NotebookCellStateChangedEvent>;\n\treadonly onDidChangeViewCells: Event<INotebookViewCellsUpdateEvent>;\n\treadonly onDidChangeVisibleRanges: Event<void>;\n\treadonly onDidChangeSelection: Event<void>;\n\treadonly onDidChangeFocus: Event<void>;\n\t/**\n\t * An event emitted when the model of this editor has changed.\n\t */\n\treadonly onDidChangeModel: Event<NotebookTextModel | undefined>;\n\treadonly onDidAttachViewModel: Event<void>;\n\treadonly onDidFocusWidget: Event<void>;\n\treadonly onDidBlurWidget: Event<void>;\n\treadonly onDidScroll: Event<void>;\n\treadonly onDidChangeLayout: Event<void>;\n\treadonly onDidChangeActiveCell: Event<void>;\n\treadonly onDidChangeActiveEditor: Event<INotebookEditor>;\n\treadonly onDidChangeActiveKernel: Event<void>;\n\treadonly onMouseUp: Event<INotebookEditorMouseEvent>;\n\treadonly onMouseDown: Event<INotebookEditorMouseEvent>;\n\n\t//#endregion\n\n\t//#region readonly properties\n\treadonly visibleRanges: ICellRange[];\n\treadonly textModel?: NotebookTextModel;\n\treadonly isVisible: boolean;\n\treadonly isReadOnly: boolean;\n\treadonly notebookOptions: NotebookOptions;\n\treadonly isDisposed: boolean;\n\treadonly activeKernel: INotebookKernel | undefined;\n\treadonly scrollTop: number;\n\treadonly scrollBottom: number;\n\treadonly scopedContextKeyService: IContextKeyService;\n\t/**\n\t * Required for Composite Editor check. The interface should not be changed.\n\t */\n\treadonly activeCodeEditor: ICodeEditor | undefined;\n\treadonly codeEditors: [ICellViewModel, ICodeEditor][];\n\treadonly activeCellAndCodeEditor: [ICellViewModel, ICodeEditor] | undefined;\n\t//#endregion\n\n\tgetLength(): number;\n\tgetSelections(): ICellRange[];\n\tsetSelections(selections: ICellRange[]): void;\n\tgetFocus(): ICellRange;\n\tsetFocus(focus: ICellRange): void;\n\tgetId(): string;\n\n\tgetViewModel(): INotebookViewModel | undefined;\n\thasModel(): this is IActiveNotebookEditor;\n\tdispose(): void;\n\tgetDomNode(): HTMLElement;\n\tgetInnerWebview(): IWebviewElement | undefined;\n\tgetSelectionViewModels(): ICellViewModel[];\n\tgetEditorViewState(): INotebookEditorViewState;\n\trestoreListViewState(viewState: INotebookEditorViewState | undefined): void;\n\n\tgetBaseCellEditorOptions(language: string): IBaseCellEditorOptions;\n\n\t/**\n\t * Focus the active cell in notebook cell list\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Focus the notebook cell list container\n\t */\n\tfocusContainer(clearSelection?: boolean): void;\n\n\thasEditorFocus(): boolean;\n\thasWebviewFocus(): boolean;\n\n\thasOutputTextSelection(): boolean;\n\tsetOptions(options: INotebookEditorOptions | undefined): Promise<void>;\n\n\t/**\n\t * Select & focus cell\n\t */\n\tfocusElement(cell: ICellViewModel): void;\n\n\t/**\n\t * Layout info for the notebook editor\n\t */\n\tgetLayoutInfo(): NotebookLayoutInfo;\n\n\tgetVisibleRangesPlusViewportAboveAndBelow(): ICellRange[];\n\n\t/**\n\t * Focus the container of a cell (the monaco editor inside is not focused).\n\t */\n\tfocusNotebookCell(\n\t\tcell: ICellViewModel,\n\t\tfocus: \"editor\" | \"container\" | \"output\",\n\t\toptions?: IFocusNotebookCellOptions,\n\t): Promise<void>;\n\n\t/**\n\t * Execute the given notebook cells\n\t */\n\texecuteNotebookCells(cells?: Iterable<ICellViewModel>): Promise<void>;\n\n\t/**\n\t * Cancel the given notebook cells\n\t */\n\tcancelNotebookCells(cells?: Iterable<ICellViewModel>): Promise<void>;\n\n\t/**\n\t * Get current active cell\n\t */\n\tgetActiveCell(): ICellViewModel | undefined;\n\n\t/**\n\t * Layout the cell with a new height\n\t */\n\tlayoutNotebookCell(cell: ICellViewModel, height: number): Promise<void>;\n\n\t/**\n\t * Render the output in webview layer\n\t */\n\tcreateOutput(\n\t\tcell: ICellViewModel,\n\t\toutput: IInsetRenderOutput,\n\t\toffset: number,\n\t\tcreateWhenIdle: boolean,\n\t): Promise<void>;\n\n\t/**\n\t * Update the output in webview layer with latest content. It will delegate to `createOutput` is the output is not rendered yet\n\t */\n\tupdateOutput(\n\t\tcell: ICellViewModel,\n\t\toutput: IInsetRenderOutput,\n\t\toffset: number,\n\t): Promise<void>;\n\n\t/**\n\t * Copy the image in the specific cell output to the clipboard\n\t */\n\tcopyOutputImage(cellOutput: ICellOutputViewModel): Promise<void>;\n\t/**\n\t * Select the contents of the first focused output of the cell.\n\t * Implementation of Ctrl+A for an output item.\n\t */\n\tselectOutputContent(cell: ICellViewModel): void;\n\t/**\n\t * Select the active input element of the first focused output of the cell.\n\t * Implementation of Ctrl+A for an input element in an output item.\n\t */\n\tselectInputContents(cell: ICellViewModel): void;\n\n\treadonly onDidReceiveMessage: Event<INotebookWebviewMessage>;\n\n\t/**\n\t * Send message to the webview for outputs.\n\t */\n\tpostMessage(message: any): void;\n\n\t/**\n\t * Remove class name on the notebook editor root DOM node.\n\t */\n\taddClassName(className: string): void;\n\n\t/**\n\t * Remove class name on the notebook editor root DOM node.\n\t */\n\tremoveClassName(className: string): void;\n\n\t/**\n\t * Set scrollTop value of the notebook editor.\n\t */\n\tsetScrollTop(scrollTop: number): void;\n\n\t/**\n\t * The range will be revealed with as little scrolling as possible.\n\t */\n\trevealCellRangeInView(range: ICellRange): void;\n\n\t/**\n\t * Reveal cell into viewport.\n\t */\n\trevealInView(cell: ICellViewModel): Promise<void>;\n\n\t/**\n\t * Reveal cell into the top of viewport.\n\t */\n\trevealInViewAtTop(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into viewport center.\n\t */\n\trevealInCenter(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into viewport center if cell is currently out of the viewport.\n\t */\n\trevealInCenterIfOutsideViewport(cell: ICellViewModel): Promise<void>;\n\n\t/**\n\t * Reveal the first line of the cell into the view if the cell is outside of the viewport.\n\t */\n\trevealFirstLineIfOutsideViewport(cell: ICellViewModel): Promise<void>;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport with minimal scrolling.\n\t */\n\trevealLineInViewAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport center.\n\t */\n\trevealLineInCenterAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport center.\n\t */\n\trevealLineInCenterIfOutsideViewportAsync(\n\t\tcell: ICellViewModel,\n\t\tline: number,\n\t): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport with minimal scrolling.\n\t */\n\trevealRangeInViewAsync(\n\t\tcell: ICellViewModel,\n\t\trange: Selection | Range,\n\t): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport center.\n\t */\n\trevealRangeInCenterAsync(\n\t\tcell: ICellViewModel,\n\t\trange: Selection | Range,\n\t): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport center.\n\t */\n\trevealRangeInCenterIfOutsideViewportAsync(\n\t\tcell: ICellViewModel,\n\t\trange: Selection | Range,\n\t): Promise<void>;\n\n\t/**\n\t * Reveal a position with `offset` in a cell into viewport center.\n\t */\n\trevealCellOffsetInCenter(cell: ICellViewModel, offset: number): void;\n\n\t/**\n\t * Reveal `offset` in the list view into viewport center if it is outside of the viewport.\n\t */\n\trevealOffsetInCenterIfOutsideViewport(offset: number): void;\n\n\t/**\n\t * Convert the view range to model range\n\t * @param startIndex Inclusive\n\t * @param endIndex Exclusive\n\t */\n\tgetCellRangeFromViewRange(\n\t\tstartIndex: number,\n\t\tendIndex: number,\n\t): ICellRange | undefined;\n\n\t/**\n\t * Set hidden areas on cell text models.\n\t */\n\tsetHiddenAreas(_ranges: ICellRange[]): boolean;\n\n\t/**\n\t * Set selectiosn on the text editor attached to the cell\n\t */\n\n\tsetCellEditorSelection(cell: ICellViewModel, selection: Range): void;\n\n\t/**\n\t *Change the decorations on the notebook cell list\n\t */\n\n\tdeltaCellDecorations(\n\t\toldDecorations: string[],\n\t\tnewDecorations: INotebookDeltaDecoration[],\n\t): string[];\n\n\t/**\n\t * Change the decorations on cell editors.\n\t * The notebook is virtualized and this method should be called to create/delete editor decorations safely.\n\t */\n\tchangeModelDecorations<T>(\n\t\tcallback: (changeAccessor: IModelDecorationsChangeAccessor) => T,\n\t): T | null;\n\n\tchangeViewZones(\n\t\tcallback: (accessor: INotebookViewZoneChangeAccessor) => void,\n\t): void;\n\n\t/**\n\t * Get a contribution of this editor.\n\t * @id Unique identifier of the contribution.\n\t * @return The contribution or null if contribution not found.\n\t */\n\tgetContribution<T extends INotebookEditorContribution>(id: string): T;\n\n\t/**\n\t * Get the view index of a cell at model `index`\n\t */\n\tgetViewIndexByModelIndex(index: number): number;\n\tgetCellsInRange(range?: ICellRange): ReadonlyArray<ICellViewModel>;\n\tcellAt(index: number): ICellViewModel | undefined;\n\tgetCellByHandle(handle: number): ICellViewModel | undefined;\n\tgetCellIndex(cell: ICellViewModel): number | undefined;\n\tgetNextVisibleCellIndex(index: number): number | undefined;\n\tgetPreviousVisibleCellIndex(index: number): number | undefined;\n\tfind(\n\t\tquery: string,\n\t\toptions: INotebookFindOptions,\n\t\ttoken: CancellationToken,\n\t\tskipWarmup?: boolean,\n\t\tshouldGetSearchPreviewInfo?: boolean,\n\t\townerID?: string,\n\t): Promise<CellFindMatchWithIndex[]>;\n\tfindHighlightCurrent(matchIndex: number, ownerID?: string): Promise<number>;\n\tfindUnHighlightCurrent(matchIndex: number, ownerID?: string): Promise<void>;\n\tfindStop(ownerID?: string): void;\n\tshowProgress(): void;\n\thideProgress(): void;\n\n\tgetAbsoluteTopOfElement(cell: ICellViewModel): number;\n\tgetHeightOfElement(cell: ICellViewModel): number;\n}\n\nexport interface IActiveNotebookEditor extends INotebookEditor {\n\tgetViewModel(): INotebookViewModel;\n\ttextModel: NotebookTextModel;\n\tgetFocus(): ICellRange;\n\tcellAt(index: number): ICellViewModel;\n\tgetCellIndex(cell: ICellViewModel): number;\n\tgetNextVisibleCellIndex(index: number): number;\n}\n\nexport interface INotebookEditorPane extends IEditorPaneWithSelection {\n\tgetControl(): INotebookEditor | undefined;\n\treadonly onDidChangeModel: Event<void>;\n\ttextModel: NotebookTextModel | undefined;\n}\n\nexport interface IBaseCellEditorOptions extends IDisposable {\n\treadonly value: IEditorOptions;\n\treadonly onDidChange: Event<void>;\n}\n\n/**\n * A mix of public interface and internal one (used by internal rendering code, e.g., cellRenderer)\n */\nexport interface INotebookEditorDelegate extends INotebookEditor {\n\thasModel(): this is IActiveNotebookEditorDelegate;\n\n\treadonly creationOptions: INotebookEditorCreationOptions;\n\treadonly onDidChangeOptions: Event<void>;\n\treadonly onDidChangeDecorations: Event<void>;\n\tcreateMarkupPreview(cell: ICellViewModel): Promise<void>;\n\tunhideMarkupPreviews(cells: readonly ICellViewModel[]): Promise<void>;\n\thideMarkupPreviews(cells: readonly ICellViewModel[]): Promise<void>;\n\n\t/**\n\t * Remove the output from the webview layer\n\t */\n\tremoveInset(output: IDisplayOutputViewModel): void;\n\n\t/**\n\t * Hide the inset in the webview layer without removing it\n\t */\n\thideInset(output: IDisplayOutputViewModel): void;\n\tdeltaCellContainerClassNames(\n\t\tcellId: string,\n\t\tadded: string[],\n\t\tremoved: string[],\n\t): void;\n}\n\nexport interface IActiveNotebookEditorDelegate extends INotebookEditorDelegate {\n\tgetViewModel(): INotebookViewModel;\n\ttextModel: NotebookTextModel;\n\tgetFocus(): ICellRange;\n\tcellAt(index: number): ICellViewModel;\n\tgetCellIndex(cell: ICellViewModel): number;\n\tgetNextVisibleCellIndex(index: number): number;\n}\n\nexport interface ISearchPreviewInfo {\n\tline: string;\n\trange: {\n\t\tstart: number;\n\t\tend: number;\n\t};\n}\n\nexport interface CellWebviewFindMatch {\n\treadonly index: number;\n\treadonly searchPreviewInfo?: ISearchPreviewInfo;\n}\n\nexport type CellContentFindMatch = FindMatch;\n\nexport interface CellFindMatch {\n\tcell: ICellViewModel;\n\tcontentMatches: CellContentFindMatch[];\n}\n\nexport interface CellFindMatchWithIndex {\n\tcell: ICellViewModel;\n\tindex: number;\n\tlength: number;\n\tgetMatch(index: number): FindMatch | CellWebviewFindMatch;\n\tcontentMatches: FindMatch[];\n\twebviewMatches: CellWebviewFindMatch[];\n}\n\nexport enum CellEditState {\n\t/**\n\t * Default state.\n\t * For markup cells, this is the renderer version of the markup.\n\t * For code cell, the browser focus should be on the container instead of the editor\n\t */\n\tPreview = 0,\n\n\t/**\n\t * Editing mode. Source for markup or code is rendered in editors and the state will be persistent.\n\t */\n\tEditing = 1,\n}\n\nexport enum CellFocusMode {\n\tContainer = 0,\n\tEditor = 1,\n\tOutput = 2,\n\tChatInput = 3,\n}\n\nexport enum CursorAtBoundary {\n\tNone = 0,\n\tTop = 1,\n\tBottom = 2,\n\tBoth = 3,\n}\n\nexport enum CursorAtLineBoundary {\n\tNone = 0,\n\tStart = 1,\n\tEnd = 2,\n\tBoth = 3,\n}\n\nexport function getNotebookEditorFromEditorPane(\n\teditorPane?: IEditorPane,\n): INotebookEditor | undefined {\n\tif (!editorPane) {\n\t\treturn;\n\t}\n\n\tif (editorPane.getId() === NOTEBOOK_EDITOR_ID) {\n\t\treturn editorPane.getControl() as INotebookEditor | undefined;\n\t}\n\n\tconst input = editorPane.input;\n\n\tconst isCompositeNotebook = input && isCompositeNotebookEditorInput(input);\n\n\tif (isCompositeNotebook) {\n\t\treturn (\n\t\t\teditorPane.getControl() as\n\t\t\t\t| { notebookEditor: INotebookEditor | undefined }\n\t\t\t\t| undefined\n\t\t)?.notebookEditor;\n\t}\n\n\treturn undefined;\n}\n\n/**\n * ranges: model selections\n * this will convert model selections to view indexes first, and then include the hidden ranges in the list view\n */\nexport function expandCellRangesWithHiddenCells(\n\teditor: INotebookEditor,\n\tranges: ICellRange[],\n) {\n\t// assuming ranges are sorted and no overlap\n\tconst indexes = cellRangesToIndexes(ranges);\n\tconst modelRanges: ICellRange[] = [];\n\tindexes.forEach((index) => {\n\t\tconst viewCell = editor.cellAt(index);\n\n\t\tif (!viewCell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewIndex = editor.getViewIndexByModelIndex(index);\n\t\tif (viewIndex < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextViewIndex = viewIndex + 1;\n\t\tconst range = editor.getCellRangeFromViewRange(\n\t\t\tviewIndex,\n\t\t\tnextViewIndex,\n\t\t);\n\n\t\tif (range) {\n\t\t\tmodelRanges.push(range);\n\t\t}\n\t});\n\n\treturn reduceCellRanges(modelRanges);\n}\n\nexport function cellRangeToViewCells(\n\teditor: IActiveNotebookEditor,\n\tranges: ICellRange[],\n) {\n\tconst cells: ICellViewModel[] = [];\n\treduceCellRanges(ranges).forEach((range) => {\n\t\tcells.push(...editor.getCellsInRange(range));\n\t});\n\n\treturn cells;\n}\n\n//#region Cell Folding\nexport enum CellFoldingState {\n\tNone = 0,\n\tExpanded = 1,\n\tCollapsed = 2,\n}\n\nexport interface EditorFoldingStateDelegate {\n\tgetCellIndex(cell: ICellViewModel): number;\n\tgetFoldingState(index: number): CellFoldingState;\n}\n//#endregion\n"],
  "mappings": "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",
  "names": ["RenderOutputType", "ScrollToRevealBehavior", "CellLayoutState", "CellLayoutContext", "NotebookOverviewRulerLane", "CellRevealType", "CellRevealRangeType", "CellEditState", "CellFocusMode", "CursorAtBoundary", "CursorAtLineBoundary", "CellFoldingState"]
}
