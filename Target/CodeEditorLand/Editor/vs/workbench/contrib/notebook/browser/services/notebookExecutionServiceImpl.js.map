{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookExecutionServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationTokenSource } from \"../../../../../base/common/cancellation.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../../../nls.js\";\nimport { ICommandService } from \"../../../../../platform/commands/common/commands.js\";\nimport type { IContextKeyService } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport { IWorkspaceTrustRequestService } from \"../../../../../platform/workspace/common/workspaceTrust.js\";\nimport type { NotebookCellTextModel } from \"../../common/model/notebookCellTextModel.js\";\nimport {\n\tCellKind,\n\ttype INotebookTextModel,\n\tNotebookCellExecutionState,\n} from \"../../common/notebookCommon.js\";\nimport type {\n\tICellExecutionParticipant,\n\tINotebookExecutionService,\n} from \"../../common/notebookExecutionService.js\";\nimport {\n\ttype INotebookCellExecution,\n\tINotebookExecutionStateService,\n} from \"../../common/notebookExecutionStateService.js\";\nimport {\n\tINotebookKernelHistoryService,\n\tINotebookKernelService,\n} from \"../../common/notebookKernelService.js\";\nimport { INotebookLoggingService } from \"../../common/notebookLoggingService.js\";\nimport { KernelPickerMRUStrategy } from \"../viewParts/notebookKernelQuickPickStrategy.js\";\n\nexport class NotebookExecutionService\n\timplements INotebookExecutionService, IDisposable\n{\n\tdeclare _serviceBrand: undefined;\n\tprivate _activeProxyKernelExecutionToken:\n\t\t| CancellationTokenSource\n\t\t| undefined;\n\n\tconstructor(\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@INotebookKernelService\n\t\tprivate readonly _notebookKernelService: INotebookKernelService,\n\t\t@INotebookKernelHistoryService\n\t\tprivate readonly _notebookKernelHistoryService: INotebookKernelHistoryService,\n\t\t@IWorkspaceTrustRequestService\n\t\tprivate readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@INotebookLoggingService\n\t\tprivate readonly _logService: INotebookLoggingService,\n\t\t@INotebookExecutionStateService\n\t\tprivate readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t) {}\n\n\tasync executeNotebookCells(\n\t\tnotebook: INotebookTextModel,\n\t\tcells: Iterable<NotebookCellTextModel>,\n\t\tcontextKeyService: IContextKeyService,\n\t): Promise<void> {\n\t\tconst cellsArr = Array.from(cells).filter(\n\t\t\t(c) => c.cellKind === CellKind.Code,\n\t\t);\n\t\tif (!cellsArr.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._logService.debug(\n\t\t\t`Execution`,\n\t\t\t`${JSON.stringify(cellsArr.map((c) => c.handle))}`,\n\t\t);\n\t\tconst message = nls.localize(\n\t\t\t\"notebookRunTrust\",\n\t\t\t\"Executing a notebook cell will run code from this workspace.\",\n\t\t);\n\t\tconst trust =\n\t\t\tawait this._workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\t\tmessage,\n\t\t\t});\n\t\tif (!trust) {\n\t\t\treturn;\n\t\t}\n\n\t\t// create cell executions\n\t\tconst cellExecutions: [\n\t\t\tNotebookCellTextModel,\n\t\t\tINotebookCellExecution,\n\t\t][] = [];\n\t\tfor (const cell of cellsArr) {\n\t\t\tconst cellExe =\n\t\t\t\tthis._notebookExecutionStateService.getCellExecution(cell.uri);\n\t\t\tif (!!cellExe) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcellExecutions.push([\n\t\t\t\tcell,\n\t\t\t\tthis._notebookExecutionStateService.createCellExecution(\n\t\t\t\t\tnotebook.uri,\n\t\t\t\t\tcell.handle,\n\t\t\t\t),\n\t\t\t]);\n\t\t}\n\n\t\tconst kernel = await KernelPickerMRUStrategy.resolveKernel(\n\t\t\tnotebook,\n\t\t\tthis._notebookKernelService,\n\t\t\tthis._notebookKernelHistoryService,\n\t\t\tthis._commandService,\n\t\t);\n\n\t\tif (!kernel) {\n\t\t\t// clear all pending cell executions\n\t\t\tcellExecutions.forEach((cellExe) => cellExe[1].complete({}));\n\t\t\treturn;\n\t\t}\n\n\t\tthis._notebookKernelHistoryService.addMostRecentKernel(kernel);\n\n\t\t// filter cell executions based on selected kernel\n\t\tconst validCellExecutions: INotebookCellExecution[] = [];\n\t\tfor (const [cell, cellExecution] of cellExecutions) {\n\t\t\tif (kernel.supportedLanguages.includes(cell.language)) {\n\t\t\t\tvalidCellExecutions.push(cellExecution);\n\t\t\t} else {\n\t\t\t\tcellExecution.complete({});\n\t\t\t}\n\t\t}\n\n\t\t// request execution\n\t\tif (validCellExecutions.length > 0) {\n\t\t\tawait this.runExecutionParticipants(validCellExecutions);\n\n\t\t\tthis._notebookKernelService.selectKernelForNotebook(\n\t\t\t\tkernel,\n\t\t\t\tnotebook,\n\t\t\t);\n\t\t\tawait kernel.executeNotebookCellsRequest(\n\t\t\t\tnotebook.uri,\n\t\t\t\tvalidCellExecutions.map((c) => c.cellHandle),\n\t\t\t);\n\t\t\t// the connecting state can change before the kernel resolves executeNotebookCellsRequest\n\t\t\tconst unconfirmed = validCellExecutions.filter(\n\t\t\t\t(exe) => exe.state === NotebookCellExecutionState.Unconfirmed,\n\t\t\t);\n\t\t\tif (unconfirmed.length) {\n\t\t\t\tthis._logService.debug(\n\t\t\t\t\t`Execution`,\n\t\t\t\t\t`Completing unconfirmed executions ${JSON.stringify(unconfirmed.map((exe) => exe.cellHandle))}`,\n\t\t\t\t);\n\t\t\t\tunconfirmed.forEach((exe) => exe.complete({}));\n\t\t\t}\n\t\t\tthis._logService.debug(\n\t\t\t\t`Execution`,\n\t\t\t\t`Completed executions ${JSON.stringify(validCellExecutions.map((exe) => exe.cellHandle))}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync cancelNotebookCellHandles(\n\t\tnotebook: INotebookTextModel,\n\t\tcells: Iterable<number>,\n\t): Promise<void> {\n\t\tconst cellsArr = Array.from(cells);\n\t\tthis._logService.debug(\n\t\t\t`Execution`,\n\t\t\t`CancelNotebookCellHandles ${JSON.stringify(cellsArr)}`,\n\t\t);\n\t\tconst kernel =\n\t\t\tthis._notebookKernelService.getSelectedOrSuggestedKernel(notebook);\n\t\tif (kernel) {\n\t\t\tawait kernel.cancelNotebookCellExecution(notebook.uri, cellsArr);\n\t\t}\n\t}\n\n\tasync cancelNotebookCells(\n\t\tnotebook: INotebookTextModel,\n\t\tcells: Iterable<NotebookCellTextModel>,\n\t): Promise<void> {\n\t\tthis.cancelNotebookCellHandles(\n\t\t\tnotebook,\n\t\t\tArray.from(cells, (cell) => cell.handle),\n\t\t);\n\t}\n\n\tprivate readonly cellExecutionParticipants =\n\t\tnew Set<ICellExecutionParticipant>();\n\n\tregisterExecutionParticipant(participant: ICellExecutionParticipant) {\n\t\tthis.cellExecutionParticipants.add(participant);\n\t\treturn toDisposable(() =>\n\t\t\tthis.cellExecutionParticipants.delete(participant),\n\t\t);\n\t}\n\n\tprivate async runExecutionParticipants(\n\t\texecutions: INotebookCellExecution[],\n\t): Promise<void> {\n\t\tfor (const participant of this.cellExecutionParticipants) {\n\t\t\tawait participant.onWillExecuteCell(executions);\n\t\t}\n\t\treturn;\n\t}\n\n\tdispose() {\n\t\tthis._activeProxyKernelExecutionToken?.dispose(true);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
