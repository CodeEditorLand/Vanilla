{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookExecutionServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport * as nls from '../../../../../nls.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IWorkspaceTrustRequestService } from '../../../../../platform/workspace/common/workspaceTrust.js';\nimport { KernelPickerMRUStrategy } from '../viewParts/notebookKernelQuickPickStrategy.js';\nimport { NotebookCellTextModel } from '../../common/model/notebookCellTextModel.js';\nimport { CellKind, INotebookTextModel, NotebookCellExecutionState } from '../../common/notebookCommon.js';\nimport { INotebookExecutionService, ICellExecutionParticipant } from '../../common/notebookExecutionService.js';\nimport { INotebookCellExecution, INotebookExecutionStateService } from '../../common/notebookExecutionStateService.js';\nimport { INotebookKernelHistoryService, INotebookKernelService } from '../../common/notebookKernelService.js';\nimport { INotebookLoggingService } from '../../common/notebookLoggingService.js';\n\n\nexport class NotebookExecutionService implements INotebookExecutionService, IDisposable {\n\tdeclare _serviceBrand: undefined;\n\tprivate _activeProxyKernelExecutionToken: CancellationTokenSource | undefined;\n\n\tconstructor(\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@INotebookKernelHistoryService private readonly _notebookKernelHistoryService: INotebookKernelHistoryService,\n\t\t@IWorkspaceTrustRequestService private readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@INotebookLoggingService private readonly _logService: INotebookLoggingService,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t}\n\n\tasync executeNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>, contextKeyService: IContextKeyService): Promise<void> {\n\t\tconst cellsArr = Array.from(cells)\n\t\t\t.filter(c => c.cellKind === CellKind.Code);\n\t\tif (!cellsArr.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._logService.debug(`Execution`, `${JSON.stringify(cellsArr.map(c => c.handle))}`);\n\t\tconst message = nls.localize('notebookRunTrust', \"Executing a notebook cell will run code from this workspace.\");\n\t\tconst trust = await this._workspaceTrustRequestService.requestWorkspaceTrust({ message });\n\t\tif (!trust) {\n\t\t\treturn;\n\t\t}\n\n\t\t// create cell executions\n\t\tconst cellExecutions: [NotebookCellTextModel, INotebookCellExecution][] = [];\n\t\tfor (const cell of cellsArr) {\n\t\t\tconst cellExe = this._notebookExecutionStateService.getCellExecution(cell.uri);\n\t\t\tif (!!cellExe) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcellExecutions.push([cell, this._notebookExecutionStateService.createCellExecution(notebook.uri, cell.handle)]);\n\t\t}\n\n\t\tconst kernel = await KernelPickerMRUStrategy.resolveKernel(notebook, this._notebookKernelService, this._notebookKernelHistoryService, this._commandService);\n\n\t\tif (!kernel) {\n\t\t\t// clear all pending cell executions\n\t\t\tcellExecutions.forEach(cellExe => cellExe[1].complete({}));\n\t\t\treturn;\n\t\t}\n\n\t\tthis._notebookKernelHistoryService.addMostRecentKernel(kernel);\n\n\t\t// filter cell executions based on selected kernel\n\t\tconst validCellExecutions: INotebookCellExecution[] = [];\n\t\tfor (const [cell, cellExecution] of cellExecutions) {\n\t\t\tif (!kernel.supportedLanguages.includes(cell.language)) {\n\t\t\t\tcellExecution.complete({});\n\t\t\t} else {\n\t\t\t\tvalidCellExecutions.push(cellExecution);\n\t\t\t}\n\t\t}\n\n\t\t// request execution\n\t\tif (validCellExecutions.length > 0) {\n\t\t\tawait this.runExecutionParticipants(validCellExecutions);\n\n\t\t\tthis._notebookKernelService.selectKernelForNotebook(kernel, notebook);\n\t\t\tawait kernel.executeNotebookCellsRequest(notebook.uri, validCellExecutions.map(c => c.cellHandle));\n\t\t\t// the connecting state can change before the kernel resolves executeNotebookCellsRequest\n\t\t\tconst unconfirmed = validCellExecutions.filter(exe => exe.state === NotebookCellExecutionState.Unconfirmed);\n\t\t\tif (unconfirmed.length) {\n\t\t\t\tthis._logService.debug(`Execution`, `Completing unconfirmed executions ${JSON.stringify(unconfirmed.map(exe => exe.cellHandle))}`);\n\t\t\t\tunconfirmed.forEach(exe => exe.complete({}));\n\t\t\t}\n\t\t\tthis._logService.debug(`Execution`, `Completed executions ${JSON.stringify(validCellExecutions.map(exe => exe.cellHandle))}`);\n\t\t}\n\t}\n\n\tasync cancelNotebookCellHandles(notebook: INotebookTextModel, cells: Iterable<number>): Promise<void> {\n\t\tconst cellsArr = Array.from(cells);\n\t\tthis._logService.debug(`Execution`, `CancelNotebookCellHandles ${JSON.stringify(cellsArr)}`);\n\t\tconst kernel = this._notebookKernelService.getSelectedOrSuggestedKernel(notebook);\n\t\tif (kernel) {\n\t\t\tawait kernel.cancelNotebookCellExecution(notebook.uri, cellsArr);\n\n\t\t}\n\t}\n\n\tasync cancelNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>): Promise<void> {\n\t\tthis.cancelNotebookCellHandles(notebook, Array.from(cells, cell => cell.handle));\n\t}\n\n\tprivate readonly cellExecutionParticipants = new Set<ICellExecutionParticipant>;\n\n\tregisterExecutionParticipant(participant: ICellExecutionParticipant) {\n\t\tthis.cellExecutionParticipants.add(participant);\n\t\treturn toDisposable(() => this.cellExecutionParticipants.delete(participant));\n\t}\n\n\tprivate async runExecutionParticipants(executions: INotebookCellExecution[]): Promise<void> {\n\t\tfor (const participant of this.cellExecutionParticipants) {\n\t\t\tawait participant.onWillExecuteCell(executions);\n\t\t}\n\t\treturn;\n\t}\n\n\tdispose() {\n\t\tthis._activeProxyKernelExecutionToken?.dispose(true);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
