import{DisposableStore as A}from"../../../../../base/common/lifecycle.js";import{IBulkEditService as O,ResourceTextEdit as U}from"../../../../../editor/browser/services/bulkEditService.js";import{Range as w}from"../../../../../editor/common/core/range.js";import{ITextModelService as V}from"../../../../../editor/common/services/resolverService.js";import*as u from"../../../../../nls.js";import{Action2 as g,registerAction2 as v}from"../../../../../platform/actions/common/actions.js";import{IConfigurationService as C}from"../../../../../platform/configuration/common/configuration.js";import{ILogService as L}from"../../../../../platform/log/common/log.js";import{IQuickInputService as F}from"../../../../../platform/quickinput/common/quickInput.js";import{IEditorService as D}from"../../../../services/editor/common/editorService.js";import{NotebookSetting as f}from"../../common/notebookCommon.js";import{isNotebookEditorInput as M}from"../../common/notebookEditorInput.js";import{INotebookEditorService as N}from"../services/notebookEditorService.js";class z extends g{static ID="notebook.action.indentUsingTabs";constructor(){super({id:z.ID,title:u.localize("indentUsingTabs","Indent Using Tabs"),precondition:void 0})}run(t,...r){I(t,!1,!1)}}class x extends g{static ID="notebook.action.indentUsingSpaces";constructor(){super({id:x.ID,title:u.localize("indentUsingSpaces","Indent Using Spaces"),precondition:void 0})}run(t,...r){I(t,!0,!1)}}class k extends g{static ID="notebook.action.changeTabDisplaySize";constructor(){super({id:k.ID,title:u.localize("changeTabDisplaySize","Change Tab Display Size"),precondition:void 0})}run(t,...r){I(t,!0,!0)}}class E extends g{static ID="notebook.action.convertIndentationToSpaces";constructor(){super({id:E.ID,title:u.localize("convertIndentationToSpaces","Convert Indentation to Spaces"),precondition:void 0})}run(t,...r){h(t,!0)}}class T extends g{static ID="notebook.action.convertIndentationToTabs";constructor(){super({id:T.ID,title:u.localize("convertIndentationToTabs","Convert Indentation to Tabs"),precondition:void 0})}run(t,...r){h(t,!1)}}function I(e,t,r){const c=e.get(D),l=e.get(C),S=e.get(N),o=e.get(F),b=c.activeEditorPane?.input;if(!M(b)||!S.retrieveExistingWidgetFromURI(b.resource)?.value)return;const p=[1,2,3,4,5,6,7,8].map(s=>({id:s.toString(),label:s.toString()})),i=l.getValue(f.cellEditorOptionsCustomizations),n=i["editor.insertSpaces"];delete i["editor.indentSize"],delete i["editor.tabSize"],delete i["editor.insertSpaces"],setTimeout(()=>{o.pick(p,{placeHolder:u.localize({key:"selectTabWidth",comment:["Tab corresponds to the tab key"]},"Select Tab Size for Current File")}).then(s=>{if(s){const d=Number.parseInt(s.label,10);r?l.updateValue(f.cellEditorOptionsCustomizations,{...i,"editor.tabSize":d,"editor.indentSize":d,"editor.insertSpaces":n}):l.updateValue(f.cellEditorOptionsCustomizations,{...i,"editor.tabSize":d,"editor.indentSize":d,"editor.insertSpaces":t})}})},50)}function h(e,t){const r=e.get(D),c=e.get(C),l=e.get(L),S=e.get(V),o=e.get(N),b=e.get(O),a=r.activeEditorPane?.input;if(!M(a))return;const p=o.retrieveExistingWidgetFromURI(a.resource)?.value?.textModel;if(!p)return;const i=new A;try{Promise.all(p.cells.map(async n=>{const s=await S.createModelReference(n.uri);i.add(s);const d=s.object.textEditorModel,y=n.textModel?.getOptions();if(!y)return;const R=W(d,y.tabSize,t);b.apply(R,{label:u.localize("convertIndentation","Convert Indentation"),code:"undoredo.convertIndentation"})})).then(()=>{const n=c.getValue(f.cellEditorOptionsCustomizations),s=n["editor.indentSize"],d=n["editor.tabSize"];delete n["editor.indentSize"],delete n["editor.tabSize"],delete n["editor.insertSpaces"],c.updateValue(f.cellEditorOptionsCustomizations,{...n,"editor.tabSize":d,"editor.indentSize":s,"editor.insertSpaces":t}),i.dispose()})}catch{l.error("Failed to convert indentation to spaces for notebook cells.")}}function W(e,t,r){if(e.getLineCount()===1&&e.getLineMaxColumn(1)===1)return[];let c="";for(let o=0;o<t;o++)c+=" ";const l=new RegExp(c,"gi"),S=[];for(let o=1,b=e.getLineCount();o<=b;o++){let a=e.getLineFirstNonWhitespaceColumn(o);if(a===0&&(a=e.getLineMaxColumn(o)),a===1)continue;const m=new w(o,1,o,a),p=e.getValueInRange(m),i=r?p.replace(/\t/gi,c):p.replace(l,"	");S.push(new U(e.uri,{range:m,text:i}))}return S}v(x),v(z),v(k),v(E),v(T);export{k as NotebookChangeTabDisplaySize,x as NotebookIndentUsingSpaces,z as NotebookIndentUsingTabs,E as NotebookIndentationToSpacesAction,T as NotebookIndentationToTabsAction};
