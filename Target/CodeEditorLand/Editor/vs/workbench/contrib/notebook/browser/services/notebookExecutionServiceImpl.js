var k=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var x=(s,e,i,r)=>{for(var o=r>1?void 0:r?v(e,i):e,c=s.length-1,u;c>=0;c--)(u=s[c])&&(o=(r?u(e,i,o):u(o))||o);return r&&o&&k(e,i,o),o},n=(s,e)=>(i,r)=>e(i,r,s);import{toDisposable as b}from"../../../../../base/common/lifecycle.js";import*as S from"../../../../../nls.js";import{ICommandService as f}from"../../../../../platform/commands/common/commands.js";import{IWorkspaceTrustRequestService as y}from"../../../../../platform/workspace/common/workspaceTrust.js";import{CellKind as E,NotebookCellExecutionState as g}from"../../common/notebookCommon.js";import{INotebookExecutionStateService as C}from"../../common/notebookExecutionStateService.js";import{INotebookKernelHistoryService as I,INotebookKernelService as N}from"../../common/notebookKernelService.js";import{INotebookLoggingService as h}from"../../common/notebookLoggingService.js";import{KernelPickerMRUStrategy as K}from"../viewParts/notebookKernelQuickPickStrategy.js";let p=class{constructor(e,i,r,o,c,u){this._commandService=e;this._notebookKernelService=i;this._notebookKernelHistoryService=r;this._workspaceTrustRequestService=o;this._logService=c;this._notebookExecutionStateService=u}_activeProxyKernelExecutionToken;async executeNotebookCells(e,i,r){const o=Array.from(i).filter(t=>t.cellKind===E.Code);if(!o.length)return;this._logService.debug("Execution",`${JSON.stringify(o.map(t=>t.handle))}`);const c=S.localize("notebookRunTrust","Executing a notebook cell will run code from this workspace.");if(!await this._workspaceTrustRequestService.requestWorkspaceTrust({message:c}))return;const d=[];for(const t of o)this._notebookExecutionStateService.getCellExecution(t.uri)||d.push([t,this._notebookExecutionStateService.createCellExecution(e.uri,t.handle)]);const m=await K.resolveKernel(e,this._notebookKernelService,this._notebookKernelHistoryService,this._commandService);if(!m){d.forEach(t=>t[1].complete({}));return}this._notebookKernelHistoryService.addMostRecentKernel(m);const a=[];for(const[t,l]of d)m.supportedLanguages.includes(t.language)?a.push(l):l.complete({});if(a.length>0){await this.runExecutionParticipants(a),this._notebookKernelService.selectKernelForNotebook(m,e),await m.executeNotebookCellsRequest(e.uri,a.map(l=>l.cellHandle));const t=a.filter(l=>l.state===g.Unconfirmed);t.length&&(this._logService.debug("Execution",`Completing unconfirmed executions ${JSON.stringify(t.map(l=>l.cellHandle))}`),t.forEach(l=>l.complete({}))),this._logService.debug("Execution",`Completed executions ${JSON.stringify(a.map(l=>l.cellHandle))}`)}}async cancelNotebookCellHandles(e,i){const r=Array.from(i);this._logService.debug("Execution",`CancelNotebookCellHandles ${JSON.stringify(r)}`);const o=this._notebookKernelService.getSelectedOrSuggestedKernel(e);o&&await o.cancelNotebookCellExecution(e.uri,r)}async cancelNotebookCells(e,i){this.cancelNotebookCellHandles(e,Array.from(i,r=>r.handle))}cellExecutionParticipants=new Set;registerExecutionParticipant(e){return this.cellExecutionParticipants.add(e),b(()=>this.cellExecutionParticipants.delete(e))}async runExecutionParticipants(e){for(const i of this.cellExecutionParticipants)await i.onWillExecuteCell(e)}dispose(){this._activeProxyKernelExecutionToken?.dispose(!0)}};p=x([n(0,f),n(1,N),n(2,I),n(3,y),n(4,h),n(5,C)],p);export{p as NotebookExecutionService};
