{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/viewModel/baseCellViewModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable, IDisposable, IReference, MutableDisposable, dispose } from '../../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../../base/common/mime.js';\nimport { ICodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../../../editor/browser/services/codeEditorService.js';\nimport { IEditorCommentsOptions } from '../../../../../editor/common/config/editorOptions.js';\nimport { IPosition } from '../../../../../editor/common/core/position.js';\nimport { IRange, Range } from '../../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../../editor/common/core/selection.js';\nimport * as editorCommon from '../../../../../editor/common/editorCommon.js';\nimport * as model from '../../../../../editor/common/model.js';\nimport { SearchParams } from '../../../../../editor/common/model/textModelSearch.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../../../platform/undoRedo/common/undoRedo.js';\nimport { IWordWrapTransientState, readTransientState, writeTransientState } from '../../../codeEditor/browser/toggleWordWrap.js';\nimport { InlineChatController } from '../../../inlineChat/browser/inlineChatController.js';\nimport { CellEditState, CellFocusMode, CellLayoutChangeEvent, CursorAtBoundary, CursorAtLineBoundary, IEditableCellViewModel, INotebookCellDecorationOptions } from '../notebookBrowser.js';\nimport { NotebookOptionsChangeEvent } from '../notebookOptions.js';\nimport { CellViewModelStateChangeEvent } from '../notebookViewEvents.js';\nimport { ViewContext } from './viewContext.js';\nimport { NotebookCellTextModel } from '../../common/model/notebookCellTextModel.js';\nimport { CellKind, INotebookCellStatusBarItem, INotebookFindOptions } from '../../common/notebookCommon.js';\n\nexport abstract class BaseCellViewModel extends Disposable {\n\n\tprotected readonly _onDidChangeEditorAttachState = this._register(new Emitter<void>());\n\t// Do not merge this event with `onDidChangeState` as we are using `Event.once(onDidChangeEditorAttachState)` elsewhere.\n\treadonly onDidChangeEditorAttachState = this._onDidChangeEditorAttachState.event;\n\tprotected readonly _onDidChangeState = this._register(new Emitter<CellViewModelStateChangeEvent>());\n\tpublic readonly onDidChangeState: Event<CellViewModelStateChangeEvent> = this._onDidChangeState.event;\n\n\tget handle() {\n\t\treturn this.model.handle;\n\t}\n\tget uri() {\n\t\treturn this.model.uri;\n\t}\n\tget lineCount() {\n\t\treturn this.model.textBuffer.getLineCount();\n\t}\n\tget metadata() {\n\t\treturn this.model.metadata;\n\t}\n\tget internalMetadata() {\n\t\treturn this.model.internalMetadata;\n\t}\n\tget language() {\n\t\treturn this.model.language;\n\t}\n\n\tget mime(): string {\n\t\tif (typeof this.model.mime === 'string') {\n\t\t\treturn this.model.mime;\n\t\t}\n\n\t\tswitch (this.language) {\n\t\t\tcase 'markdown':\n\t\t\t\treturn Mimes.markdown;\n\n\t\t\tdefault:\n\t\t\t\treturn Mimes.text;\n\t\t}\n\t}\n\n\tabstract cellKind: CellKind;\n\n\tprivate _editState: CellEditState = CellEditState.Preview;\n\n\tprivate _lineNumbers: 'on' | 'off' | 'inherit' = 'inherit';\n\tget lineNumbers(): 'on' | 'off' | 'inherit' {\n\t\treturn this._lineNumbers;\n\t}\n\n\tset lineNumbers(lineNumbers: 'on' | 'off' | 'inherit') {\n\t\tif (lineNumbers === this._lineNumbers) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lineNumbers = lineNumbers;\n\t\tthis._onDidChangeState.fire({ cellLineNumberChanged: true });\n\t}\n\n\tprivate _commentOptions: IEditorCommentsOptions;\n\tpublic get commentOptions(): IEditorCommentsOptions {\n\t\treturn this._commentOptions;\n\t}\n\n\tpublic set commentOptions(newOptions: IEditorCommentsOptions) {\n\t\tthis._commentOptions = newOptions;\n\t}\n\n\tprivate _focusMode: CellFocusMode = CellFocusMode.Container;\n\tget focusMode() {\n\t\treturn this._focusMode;\n\t}\n\tset focusMode(newMode: CellFocusMode) {\n\t\tif (this._focusMode !== newMode) {\n\t\t\tthis._focusMode = newMode;\n\t\t\tthis._onDidChangeState.fire({ focusModeChanged: true });\n\t\t}\n\t}\n\n\tprotected _textEditor?: ICodeEditor;\n\tget editorAttached(): boolean {\n\t\treturn !!this._textEditor;\n\t}\n\tprivate _editorListeners: IDisposable[] = [];\n\tprivate _editorViewStates: editorCommon.ICodeEditorViewState | null = null;\n\tprivate _editorTransientState: IWordWrapTransientState | null = null;\n\tprivate _resolvedCellDecorations = new Map<string, INotebookCellDecorationOptions>();\n\tprivate readonly _textModelRefChangeDisposable = this._register(new MutableDisposable());\n\n\tprivate readonly _cellDecorationsChanged = this._register(new Emitter<{ added: INotebookCellDecorationOptions[]; removed: INotebookCellDecorationOptions[] }>());\n\tonCellDecorationsChanged: Event<{ added: INotebookCellDecorationOptions[]; removed: INotebookCellDecorationOptions[] }> = this._cellDecorationsChanged.event;\n\n\tprivate _resolvedDecorations = new Map<string, {\n\t\tid?: string;\n\t\toptions: model.IModelDeltaDecoration;\n\t}>();\n\tprivate _lastDecorationId: number = 0;\n\n\tprivate _cellStatusBarItems = new Map<string, INotebookCellStatusBarItem>();\n\tprivate readonly _onDidChangeCellStatusBarItems = this._register(new Emitter<void>());\n\treadonly onDidChangeCellStatusBarItems: Event<void> = this._onDidChangeCellStatusBarItems.event;\n\tprivate _lastStatusBarId: number = 0;\n\n\tget textModel(): model.ITextModel | undefined {\n\t\treturn this.model.textModel;\n\t}\n\n\thasModel(): this is IEditableCellViewModel {\n\t\treturn !!this.textModel;\n\t}\n\n\tprivate _dragging: boolean = false;\n\tget dragging(): boolean {\n\t\treturn this._dragging;\n\t}\n\n\tset dragging(v: boolean) {\n\t\tthis._dragging = v;\n\t\tthis._onDidChangeState.fire({ dragStateChanged: true });\n\t}\n\n\tprotected _textModelRef: IReference<IResolvedTextEditorModel> | undefined;\n\n\tprivate _inputCollapsed: boolean = false;\n\tget isInputCollapsed(): boolean {\n\t\treturn this._inputCollapsed;\n\t}\n\tset isInputCollapsed(v: boolean) {\n\t\tthis._inputCollapsed = v;\n\t\tthis._onDidChangeState.fire({ inputCollapsedChanged: true });\n\t}\n\n\tprivate _outputCollapsed: boolean = false;\n\tget isOutputCollapsed(): boolean {\n\t\treturn this._outputCollapsed;\n\t}\n\tset isOutputCollapsed(v: boolean) {\n\t\tthis._outputCollapsed = v;\n\t\tthis._onDidChangeState.fire({ outputCollapsedChanged: true });\n\t}\n\n\tprotected _commentHeight = 0;\n\n\tset commentHeight(height: number) {\n\t\tif (this._commentHeight === height) {\n\t\t\treturn;\n\t\t}\n\t\tthis._commentHeight = height;\n\t\tthis.layoutChange({ commentHeight: true }, 'BaseCellViewModel#commentHeight');\n\t}\n\n\tprivate _isDisposed = false;\n\n\tconstructor(\n\t\treadonly viewType: string,\n\t\treadonly model: NotebookCellTextModel,\n\t\tpublic id: string,\n\t\tprivate readonly _viewContext: ViewContext,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _modelService: ITextModelService,\n\t\tprivate readonly _undoRedoService: IUndoRedoService,\n\t\tprivate readonly _codeEditorService: ICodeEditorService,\n\t\t// private readonly _keymapService: INotebookKeymapService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(model.onDidChangeMetadata(() => {\n\t\t\tthis._onDidChangeState.fire({ metadataChanged: true });\n\t\t}));\n\n\t\tthis._register(model.onDidChangeInternalMetadata(e => {\n\t\t\tthis._onDidChangeState.fire({ internalMetadataChanged: true });\n\t\t\tif (e.lastRunSuccessChanged) {\n\t\t\t\t// Statusbar visibility may change\n\t\t\t\tthis.layoutChange({});\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('notebook.lineNumbers')) {\n\t\t\t\tthis.lineNumbers = 'inherit';\n\t\t\t}\n\t\t}));\n\n\t\tif (this.model.collapseState?.inputCollapsed) {\n\t\t\tthis._inputCollapsed = true;\n\t\t}\n\n\t\tif (this.model.collapseState?.outputCollapsed) {\n\t\t\tthis._outputCollapsed = true;\n\t\t}\n\n\t\tthis._commentOptions = this._configurationService.getValue<IEditorCommentsOptions>('editor.comments', { overrideIdentifier: this.language });\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor.comments')) {\n\t\t\t\tthis._commentOptions = this._configurationService.getValue<IEditorCommentsOptions>('editor.comments', { overrideIdentifier: this.language });\n\t\t\t}\n\t\t}));\n\t}\n\n\n\tabstract updateOptions(e: NotebookOptionsChangeEvent): void;\n\tabstract getHeight(lineHeight: number): number;\n\tabstract onDeselect(): void;\n\tabstract layoutChange(change: CellLayoutChangeEvent, source?: string): void;\n\n\tassertTextModelAttached(): boolean {\n\t\tif (this.textModel && this._textEditor && this._textEditor.getModel() === this.textModel) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// private handleKeyDown(e: IKeyboardEvent) {\n\t// \tif (this.viewType === IPYNB_VIEW_TYPE && isWindows && e.ctrlKey && e.keyCode === KeyCode.Enter) {\n\t// \t\tthis._keymapService.promptKeymapRecommendation();\n\t// \t}\n\t// }\n\n\tattachTextEditor(editor: ICodeEditor, estimatedHasHorizontalScrolling?: boolean) {\n\t\tif (!editor.hasModel()) {\n\t\t\tthrow new Error('Invalid editor: model is missing');\n\t\t}\n\n\t\tif (this._textEditor === editor) {\n\t\t\tif (this._editorListeners.length === 0) {\n\t\t\t\tthis._editorListeners.push(this._textEditor.onDidChangeCursorSelection(() => { this._onDidChangeState.fire({ selectionChanged: true }); }));\n\t\t\t\t// this._editorListeners.push(this._textEditor.onKeyDown(e => this.handleKeyDown(e)));\n\t\t\t\tthis._onDidChangeState.fire({ selectionChanged: true });\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tthis._textEditor = editor;\n\n\t\tif (this._editorViewStates) {\n\t\t\tthis._restoreViewState(this._editorViewStates);\n\t\t} else {\n\t\t\t// If no real editor view state was persisted, restore a default state.\n\t\t\t// This forces the editor to measure its content width immediately.\n\t\t\tif (estimatedHasHorizontalScrolling) {\n\t\t\t\tthis._restoreViewState({\n\t\t\t\t\tcontributionsState: {},\n\t\t\t\t\tcursorState: [],\n\t\t\t\t\tviewState: {\n\t\t\t\t\t\tscrollLeft: 0,\n\t\t\t\t\t\tfirstPosition: { lineNumber: 1, column: 1 },\n\t\t\t\t\t\tfirstPositionDeltaTop: this._viewContext.notebookOptions.getLayoutConfiguration().editorTopPadding\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (this._editorTransientState) {\n\t\t\twriteTransientState(editor.getModel(), this._editorTransientState, this._codeEditorService);\n\t\t}\n\n\t\tif (this._isDisposed) {\n\t\t\t// Restore View State could adjust the editor layout and trigger a list view update. The list view update might then dispose this view model.\n\t\t\treturn;\n\t\t}\n\n\t\teditor.changeDecorations((accessor) => {\n\t\t\tthis._resolvedDecorations.forEach((value, key) => {\n\t\t\t\tif (key.startsWith('_lazy_')) {\n\t\t\t\t\t// lazy ones\n\t\t\t\t\tconst ret = accessor.addDecoration(value.options.range, value.options.options);\n\t\t\t\t\tthis._resolvedDecorations.get(key)!.id = ret;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst ret = accessor.addDecoration(value.options.range, value.options.options);\n\t\t\t\t\tthis._resolvedDecorations.get(key)!.id = ret;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis._editorListeners.push(editor.onDidChangeCursorSelection(() => { this._onDidChangeState.fire({ selectionChanged: true }); }));\n\t\tconst inlineChatController = InlineChatController.get(this._textEditor);\n\t\tif (inlineChatController) {\n\t\t\tthis._editorListeners.push(inlineChatController.onWillStartSession(() => {\n\t\t\t\tif (this.textBuffer.getLength() === 0) {\n\t\t\t\t\tthis.enableAutoLanguageDetection();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis._onDidChangeState.fire({ selectionChanged: true });\n\t\tthis._onDidChangeEditorAttachState.fire();\n\t}\n\n\tdetachTextEditor() {\n\t\tthis.saveViewState();\n\t\tthis.saveTransientState();\n\t\t// decorations need to be cleared first as editors can be resued.\n\t\tthis._textEditor?.changeDecorations((accessor) => {\n\t\t\tthis._resolvedDecorations.forEach(value => {\n\t\t\t\tconst resolvedid = value.id;\n\n\t\t\t\tif (resolvedid) {\n\t\t\t\t\taccessor.removeDecoration(resolvedid);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis._textEditor = undefined;\n\t\tdispose(this._editorListeners);\n\t\tthis._editorListeners = [];\n\t\tthis._onDidChangeEditorAttachState.fire();\n\n\t\tif (this._textModelRef) {\n\t\t\tthis._textModelRef.dispose();\n\t\t\tthis._textModelRef = undefined;\n\t\t}\n\t\tthis._textModelRefChangeDisposable.clear();\n\t}\n\n\tgetText(): string {\n\t\treturn this.model.getValue();\n\t}\n\n\tgetAlternativeId(): number {\n\t\treturn this.model.alternativeId;\n\t}\n\n\tgetTextLength(): number {\n\t\treturn this.model.getTextLength();\n\t}\n\n\tenableAutoLanguageDetection() {\n\t\tthis.model.enableAutoLanguageDetection();\n\t}\n\n\tprivate saveViewState(): void {\n\t\tif (!this._textEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._editorViewStates = this._textEditor.saveViewState();\n\t}\n\n\tprivate saveTransientState() {\n\t\tif (!this._textEditor || !this._textEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._editorTransientState = readTransientState(this._textEditor.getModel(), this._codeEditorService);\n\t}\n\n\tsaveEditorViewState() {\n\t\tif (this._textEditor) {\n\t\t\tthis._editorViewStates = this._textEditor.saveViewState();\n\t\t}\n\n\t\treturn this._editorViewStates;\n\t}\n\n\trestoreEditorViewState(editorViewStates: editorCommon.ICodeEditorViewState | null, totalHeight?: number) {\n\t\tthis._editorViewStates = editorViewStates;\n\t}\n\n\tprivate _restoreViewState(state: editorCommon.ICodeEditorViewState | null): void {\n\t\tif (state) {\n\t\t\tthis._textEditor?.restoreViewState(state);\n\t\t}\n\t}\n\n\taddModelDecoration(decoration: model.IModelDeltaDecoration): string {\n\t\tif (!this._textEditor) {\n\t\t\tconst id = ++this._lastDecorationId;\n\t\t\tconst decorationId = `_lazy_${this.id};${id}`;\n\t\t\tthis._resolvedDecorations.set(decorationId, { options: decoration });\n\t\t\treturn decorationId;\n\t\t}\n\n\t\tlet id: string;\n\t\tthis._textEditor.changeDecorations((accessor) => {\n\t\t\tid = accessor.addDecoration(decoration.range, decoration.options);\n\t\t\tthis._resolvedDecorations.set(id, { id, options: decoration });\n\t\t});\n\t\treturn id!;\n\t}\n\n\tremoveModelDecoration(decorationId: string) {\n\t\tconst realDecorationId = this._resolvedDecorations.get(decorationId);\n\n\t\tif (this._textEditor && realDecorationId && realDecorationId.id !== undefined) {\n\t\t\tthis._textEditor.changeDecorations((accessor) => {\n\t\t\t\taccessor.removeDecoration(realDecorationId.id!);\n\t\t\t});\n\t\t}\n\n\t\t// lastly, remove all the cache\n\t\tthis._resolvedDecorations.delete(decorationId);\n\t}\n\n\tdeltaModelDecorations(oldDecorations: readonly string[], newDecorations: readonly model.IModelDeltaDecoration[]): string[] {\n\t\toldDecorations.forEach(id => {\n\t\t\tthis.removeModelDecoration(id);\n\t\t});\n\n\t\tconst ret = newDecorations.map(option => {\n\t\t\treturn this.addModelDecoration(option);\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tprivate _removeCellDecoration(decorationId: string) {\n\t\tconst options = this._resolvedCellDecorations.get(decorationId);\n\t\tthis._resolvedCellDecorations.delete(decorationId);\n\n\t\tif (options) {\n\t\t\tfor (const existingOptions of this._resolvedCellDecorations.values()) {\n\t\t\t\t// don't remove decorations that are applied from other entries\n\t\t\t\tif (options.className === existingOptions.className) {\n\t\t\t\t\toptions.className = undefined;\n\t\t\t\t}\n\t\t\t\tif (options.outputClassName === existingOptions.outputClassName) {\n\t\t\t\t\toptions.outputClassName = undefined;\n\t\t\t\t}\n\t\t\t\tif (options.gutterClassName === existingOptions.gutterClassName) {\n\t\t\t\t\toptions.gutterClassName = undefined;\n\t\t\t\t}\n\t\t\t\tif (options.topClassName === existingOptions.topClassName) {\n\t\t\t\t\toptions.topClassName = undefined;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._cellDecorationsChanged.fire({ added: [], removed: [options] });\n\t\t}\n\t}\n\n\tprivate _addCellDecoration(options: INotebookCellDecorationOptions): string {\n\t\tconst id = ++this._lastDecorationId;\n\t\tconst decorationId = `_cell_${this.id};${id}`;\n\t\tthis._resolvedCellDecorations.set(decorationId, options);\n\t\tthis._cellDecorationsChanged.fire({ added: [options], removed: [] });\n\t\treturn decorationId;\n\t}\n\n\tgetCellDecorations() {\n\t\treturn [...this._resolvedCellDecorations.values()];\n\t}\n\n\tgetCellDecorationRange(decorationId: string): Range | null {\n\t\tif (this._textEditor) {\n\t\t\t// (this._textEditor as CodeEditorWidget).decora\n\t\t\treturn this._textEditor.getModel()?.getDecorationRange(decorationId) ?? null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tdeltaCellDecorations(oldDecorations: string[], newDecorations: INotebookCellDecorationOptions[]): string[] {\n\t\toldDecorations.forEach(id => {\n\t\t\tthis._removeCellDecoration(id);\n\t\t});\n\n\t\tconst ret = newDecorations.map(option => {\n\t\t\treturn this._addCellDecoration(option);\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tdeltaCellStatusBarItems(oldItems: readonly string[], newItems: readonly INotebookCellStatusBarItem[]): string[] {\n\t\toldItems.forEach(id => {\n\t\t\tconst item = this._cellStatusBarItems.get(id);\n\t\t\tif (item) {\n\t\t\t\tthis._cellStatusBarItems.delete(id);\n\t\t\t}\n\t\t});\n\n\t\tconst newIds = newItems.map(item => {\n\t\t\tconst id = ++this._lastStatusBarId;\n\t\t\tconst itemId = `_cell_${this.id};${id}`;\n\t\t\tthis._cellStatusBarItems.set(itemId, item);\n\t\t\treturn itemId;\n\t\t});\n\n\t\tthis._onDidChangeCellStatusBarItems.fire();\n\n\t\treturn newIds;\n\t}\n\n\tgetCellStatusBarItems(): INotebookCellStatusBarItem[] {\n\t\treturn Array.from(this._cellStatusBarItems.values());\n\t}\n\n\trevealRangeInCenter(range: Range) {\n\t\tthis._textEditor?.revealRangeInCenter(range, editorCommon.ScrollType.Immediate);\n\t}\n\n\tsetSelection(range: Range) {\n\t\tthis._textEditor?.setSelection(range);\n\t}\n\n\tsetSelections(selections: Selection[]) {\n\t\tif (selections.length) {\n\t\t\tif (this._textEditor) {\n\t\t\t\tthis._textEditor?.setSelections(selections);\n\t\t\t} else if (this._editorViewStates) {\n\t\t\t\tthis._editorViewStates.cursorState = selections.map(selection => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinSelectionMode: !selection.isEmpty(),\n\t\t\t\t\t\tselectionStart: selection.getStartPosition(),\n\t\t\t\t\t\tposition: selection.getEndPosition(),\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tgetSelections() {\n\t\treturn this._textEditor?.getSelections()\n\t\t\t?? this._editorViewStates?.cursorState.map(state => new Selection(state.selectionStart.lineNumber, state.selectionStart.column, state.position.lineNumber, state.position.column))\n\t\t\t?? [];\n\t}\n\n\tgetSelectionsStartPosition(): IPosition[] | undefined {\n\t\tif (this._textEditor) {\n\t\t\tconst selections = this._textEditor.getSelections();\n\t\t\treturn selections?.map(s => s.getStartPosition());\n\t\t} else {\n\t\t\tconst selections = this._editorViewStates?.cursorState;\n\t\t\treturn selections?.map(s => s.selectionStart);\n\t\t}\n\t}\n\n\tgetLineScrollTopOffset(line: number): number {\n\t\tif (!this._textEditor) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst editorPadding = this._viewContext.notebookOptions.computeEditorPadding(this.internalMetadata, this.uri);\n\t\treturn this._textEditor.getTopForLineNumber(line) + editorPadding.top;\n\t}\n\n\tgetPositionScrollTopOffset(range: Selection | Range): number {\n\t\tif (!this._textEditor) {\n\t\t\treturn 0;\n\t\t}\n\n\n\t\tconst position = range instanceof Selection ? range.getPosition() : range.getStartPosition();\n\n\t\tconst editorPadding = this._viewContext.notebookOptions.computeEditorPadding(this.internalMetadata, this.uri);\n\t\treturn this._textEditor.getTopForPosition(position.lineNumber, position.column) + editorPadding.top;\n\t}\n\n\tcursorAtLineBoundary(): CursorAtLineBoundary {\n\t\tif (!this._textEditor || !this.textModel || !this._textEditor.hasTextFocus()) {\n\t\t\treturn CursorAtLineBoundary.None;\n\t\t}\n\n\t\tconst selection = this._textEditor.getSelection();\n\n\t\tif (!selection || !selection.isEmpty()) {\n\t\t\treturn CursorAtLineBoundary.None;\n\t\t}\n\n\t\tconst currentLineLength = this.textModel.getLineLength(selection.startLineNumber);\n\n\t\tif (currentLineLength === 0) {\n\t\t\treturn CursorAtLineBoundary.Both;\n\t\t}\n\n\t\tswitch (selection.startColumn) {\n\t\t\tcase 1:\n\t\t\t\treturn CursorAtLineBoundary.Start;\n\t\t\tcase currentLineLength + 1:\n\t\t\t\treturn CursorAtLineBoundary.End;\n\t\t\tdefault:\n\t\t\t\treturn CursorAtLineBoundary.None;\n\t\t}\n\t}\n\n\tcursorAtBoundary(): CursorAtBoundary {\n\t\tif (!this._textEditor) {\n\t\t\treturn CursorAtBoundary.None;\n\t\t}\n\n\t\tif (!this.textModel) {\n\t\t\treturn CursorAtBoundary.None;\n\t\t}\n\n\t\t// only validate primary cursor\n\t\tconst selection = this._textEditor.getSelection();\n\n\t\t// only validate empty cursor\n\t\tif (!selection || !selection.isEmpty()) {\n\t\t\treturn CursorAtBoundary.None;\n\t\t}\n\n\t\tconst firstViewLineTop = this._textEditor.getTopForPosition(1, 1);\n\t\tconst lastViewLineTop = this._textEditor.getTopForPosition(this.textModel.getLineCount(), this.textModel.getLineLength(this.textModel.getLineCount()));\n\t\tconst selectionTop = this._textEditor.getTopForPosition(selection.startLineNumber, selection.startColumn);\n\n\t\tif (selectionTop === lastViewLineTop) {\n\t\t\tif (selectionTop === firstViewLineTop) {\n\t\t\t\treturn CursorAtBoundary.Both;\n\t\t\t} else {\n\t\t\t\treturn CursorAtBoundary.Bottom;\n\t\t\t}\n\t\t} else {\n\t\t\tif (selectionTop === firstViewLineTop) {\n\t\t\t\treturn CursorAtBoundary.Top;\n\t\t\t} else {\n\t\t\t\treturn CursorAtBoundary.None;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _editStateSource: string = '';\n\n\tget editStateSource(): string {\n\t\treturn this._editStateSource;\n\t}\n\n\tupdateEditState(newState: CellEditState, source: string) {\n\t\tthis._editStateSource = source;\n\t\tif (newState === this._editState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._editState = newState;\n\t\tthis._onDidChangeState.fire({ editStateChanged: true });\n\t\tif (this._editState === CellEditState.Preview) {\n\t\t\tthis.focusMode = CellFocusMode.Container;\n\t\t}\n\t}\n\n\tgetEditState() {\n\t\treturn this._editState;\n\t}\n\n\tget textBuffer() {\n\t\treturn this.model.textBuffer;\n\t}\n\n\t/**\n\t * Text model is used for editing.\n\t */\n\tasync resolveTextModel(): Promise<model.ITextModel> {\n\t\tif (!this._textModelRef || !this.textModel) {\n\t\t\tthis._textModelRef = await this._modelService.createModelReference(this.uri);\n\t\t\tif (this._isDisposed) {\n\t\t\t\treturn this.textModel!;\n\t\t\t}\n\n\t\t\tif (!this._textModelRef) {\n\t\t\t\tthrow new Error(`Cannot resolve text model for ${this.uri}`);\n\t\t\t}\n\t\t\tthis._textModelRefChangeDisposable.value = this.textModel!.onDidChangeContent(() => this.onDidChangeTextModelContent());\n\t\t}\n\n\t\treturn this.textModel!;\n\t}\n\n\tprotected abstract onDidChangeTextModelContent(): void;\n\n\tprotected cellStartFind(value: string, options: INotebookFindOptions): model.FindMatch[] | null {\n\t\tlet cellMatches: model.FindMatch[] = [];\n\n\t\tconst lineCount = this.textBuffer.getLineCount();\n\t\tconst findRange: IRange[] = options.findScope?.selectedTextRanges ?? [new Range(1, 1, lineCount, this.textBuffer.getLineLength(lineCount) + 1)];\n\n\t\tif (this.assertTextModelAttached()) {\n\t\t\tcellMatches = this.textModel!.findMatches(\n\t\t\t\tvalue,\n\t\t\t\tfindRange,\n\t\t\t\toptions.regex || false,\n\t\t\t\toptions.caseSensitive || false,\n\t\t\t\toptions.wholeWord ? options.wordSeparators || null : null,\n\t\t\t\toptions.regex || false);\n\t\t} else {\n\t\t\tconst searchParams = new SearchParams(value, options.regex || false, options.caseSensitive || false, options.wholeWord ? options.wordSeparators || null : null,);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\n\t\t\tif (!searchData) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfindRange.forEach(range => {\n\t\t\t\tcellMatches.push(...this.textBuffer.findMatchesLineByLine(new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn), searchData, options.regex || false, 1000));\n\t\t\t});\n\t\t}\n\n\t\treturn cellMatches;\n\t}\n\n\toverride dispose() {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\n\t\tdispose(this._editorListeners);\n\n\t\t// Only remove the undo redo stack if we map this cell uri to itself\n\t\t// If we are not in perCell mode, it will map to the full NotebookDocument and\n\t\t// we don't want to remove that entire document undo / redo stack when a cell is deleted\n\t\tif (this._undoRedoService.getUriComparisonKey(this.uri) === this.uri.toString()) {\n\t\t\tthis._undoRedoService.removeElements(this.uri);\n\t\t}\n\n\t\tthis._textModelRef?.dispose();\n\t}\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\thandle: this.handle\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["model", "id"]
}
