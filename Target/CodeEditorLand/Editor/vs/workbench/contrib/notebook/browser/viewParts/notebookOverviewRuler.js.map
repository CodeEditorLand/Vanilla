{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/viewParts/notebookOverviewRuler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindow } from '../../../../../base/browser/dom.js';\nimport { createFastDomNode, FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { PixelRatio } from '../../../../../base/browser/pixelRatio.js';\nimport { IThemeService, Themable } from '../../../../../platform/theme/common/themeService.js';\nimport { INotebookEditorDelegate, NotebookOverviewRulerLane } from '../notebookBrowser.js';\n\nexport class NotebookOverviewRuler extends Themable {\n\tprivate readonly _domNode: FastDomNode<HTMLCanvasElement>;\n\tprivate _lanes = 3;\n\n\tconstructor(readonly notebookEditor: INotebookEditorDelegate, container: HTMLElement, @IThemeService themeService: IThemeService) {\n\t\tsuper(themeService);\n\t\tthis._domNode = createFastDomNode(document.createElement('canvas'));\n\t\tthis._domNode.setPosition('relative');\n\t\tthis._domNode.setLayerHinting(true);\n\t\tthis._domNode.setContain('strict');\n\n\t\tcontainer.appendChild(this._domNode.domNode);\n\n\t\tthis._register(notebookEditor.onDidChangeDecorations(() => {\n\t\t\tthis.layout();\n\t\t}));\n\n\t\tthis._register(PixelRatio.getInstance(getWindow(this._domNode.domNode)).onDidChange(() => {\n\t\t\tthis.layout();\n\t\t}));\n\t}\n\n\tlayout() {\n\t\tconst width = 10;\n\t\tconst layoutInfo = this.notebookEditor.getLayoutInfo();\n\t\tconst scrollHeight = layoutInfo.scrollHeight;\n\t\tconst height = layoutInfo.height;\n\t\tconst ratio = PixelRatio.getInstance(getWindow(this._domNode.domNode)).value;\n\t\tthis._domNode.setWidth(width);\n\t\tthis._domNode.setHeight(height);\n\t\tthis._domNode.domNode.width = width * ratio;\n\t\tthis._domNode.domNode.height = height * ratio;\n\t\tconst ctx = this._domNode.domNode.getContext('2d')!;\n\t\tctx.clearRect(0, 0, width * ratio, height * ratio);\n\t\tthis._render(ctx, width * ratio, height * ratio, scrollHeight * ratio, ratio);\n\t}\n\n\tprivate _render(ctx: CanvasRenderingContext2D, width: number, height: number, scrollHeight: number, ratio: number) {\n\t\tconst viewModel = this.notebookEditor.getViewModel();\n\t\tconst fontInfo = this.notebookEditor.getLayoutInfo().fontInfo;\n\t\tconst laneWidth = width / this._lanes;\n\n\t\tlet currentFrom = 0;\n\n\t\tif (viewModel) {\n\t\t\tfor (let i = 0; i < viewModel.viewCells.length; i++) {\n\t\t\t\tconst viewCell = viewModel.viewCells[i];\n\t\t\t\tconst textBuffer = viewCell.textBuffer;\n\t\t\t\tconst decorations = viewCell.getCellDecorations();\n\t\t\t\tconst cellHeight = (viewCell.layoutInfo.totalHeight / scrollHeight) * ratio * height;\n\n\t\t\t\tdecorations.filter(decoration => decoration.overviewRuler).forEach(decoration => {\n\t\t\t\t\tconst overviewRuler = decoration.overviewRuler!;\n\t\t\t\t\tconst fillStyle = this.getColor(overviewRuler.color) ?? '#000000';\n\t\t\t\t\tconst lineHeight = Math.min(fontInfo.lineHeight, (viewCell.layoutInfo.editorHeight / scrollHeight / textBuffer.getLineCount()) * ratio * height);\n\t\t\t\t\tconst lineNumbers = overviewRuler.modelRanges.map(range => range.startLineNumber).reduce((previous: number[], current: number) => {\n\t\t\t\t\t\tif (previous.length === 0) {\n\t\t\t\t\t\t\tprevious.push(current);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst last = previous[previous.length - 1];\n\t\t\t\t\t\t\tif (last !== current) {\n\t\t\t\t\t\t\t\tprevious.push(current);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn previous;\n\t\t\t\t\t}, [] as number[]);\n\n\t\t\t\t\tlet x = 0;\n\t\t\t\t\tswitch (overviewRuler.position) {\n\t\t\t\t\t\tcase NotebookOverviewRulerLane.Left:\n\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase NotebookOverviewRulerLane.Center:\n\t\t\t\t\t\t\tx = laneWidth;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase NotebookOverviewRulerLane.Right:\n\t\t\t\t\t\t\tx = laneWidth * 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst width = overviewRuler.position === NotebookOverviewRulerLane.Full ? laneWidth * 3 : laneWidth;\n\n\t\t\t\t\tfor (let i = 0; i < lineNumbers.length; i++) {\n\t\t\t\t\t\tctx.fillStyle = fillStyle;\n\t\t\t\t\t\tconst lineNumber = lineNumbers[i];\n\t\t\t\t\t\tconst offset = (lineNumber - 1) * lineHeight;\n\t\t\t\t\t\tctx.fillRect(x, currentFrom + offset, width, lineHeight);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (overviewRuler.includeOutput) {\n\t\t\t\t\t\tctx.fillStyle = fillStyle;\n\t\t\t\t\t\tconst outputOffset = (viewCell.layoutInfo.editorHeight / scrollHeight) * ratio * height;\n\t\t\t\t\t\tconst decorationHeight = (fontInfo.lineHeight / scrollHeight) * ratio * height;\n\t\t\t\t\t\tctx.fillRect(laneWidth, currentFrom + outputOffset, laneWidth, decorationHeight);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tcurrentFrom += cellHeight;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["width", "i"]
}
