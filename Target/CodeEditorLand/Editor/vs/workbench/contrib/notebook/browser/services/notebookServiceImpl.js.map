{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../../nls.js';\nimport { toAction } from '../../../../../base/common/actions.js';\nimport { createErrorWithActions } from '../../../../../base/common/errorMessage.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport * as glob from '../../../../../base/common/glob.js';\nimport { Iterable } from '../../../../../base/common/iterator.js';\nimport { Lazy } from '../../../../../base/common/lazy.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../../base/common/map.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { basename, isEqual } from '../../../../../base/common/resources.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { IResourceEditorInput } from '../../../../../platform/editor/common/editor.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { Memento, MementoObject } from '../../../../common/memento.js';\nimport { INotebookEditorContribution, notebookPreloadExtensionPoint, notebookRendererExtensionPoint, notebooksExtensionPoint } from '../notebookExtensionPoint.js';\nimport { INotebookEditorOptions } from '../notebookBrowser.js';\nimport { NotebookDiffEditorInput } from '../../common/notebookDiffEditorInput.js';\nimport { NotebookCellTextModel } from '../../common/model/notebookCellTextModel.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { ACCESSIBLE_NOTEBOOK_DISPLAY_ORDER, CellUri, NotebookSetting, INotebookContributionData, INotebookExclusiveDocumentFilter, INotebookRendererInfo, INotebookTextModel, IOrderedMimeType, IOutputDto, MimeTypeDisplayOrder, NotebookEditorPriority, NotebookRendererMatch, NOTEBOOK_DISPLAY_ORDER, RENDERER_EQUIVALENT_EXTENSIONS, RENDERER_NOT_AVAILABLE, NotebookExtensionDescription, INotebookStaticPreloadInfo } from '../../common/notebookCommon.js';\nimport { NotebookEditorInput } from '../../common/notebookEditorInput.js';\nimport { INotebookEditorModelResolverService } from '../../common/notebookEditorModelResolverService.js';\nimport { NotebookOutputRendererInfo, NotebookStaticPreloadInfo as NotebookStaticPreloadInfo } from '../../common/notebookOutputRenderer.js';\nimport { NotebookEditorDescriptor, NotebookProviderInfo } from '../../common/notebookProvider.js';\nimport { INotebookSerializer, INotebookService, SimpleNotebookProviderInfo } from '../../common/notebookService.js';\nimport { DiffEditorInputFactoryFunction, EditorInputFactoryFunction, EditorInputFactoryObject, IEditorResolverService, IEditorType, RegisteredEditorInfo, RegisteredEditorPriority, UntitledEditorInputFactoryFunction, type MergeEditorInputFactoryFunction } from '../../../../services/editor/common/editorResolverService.js';\nimport { IExtensionService, isProposedApiEnabled } from '../../../../services/extensions/common/extensions.js';\nimport { IExtensionPointUser } from '../../../../services/extensions/common/extensionsRegistry.js';\nimport { InstallRecommendedExtensionAction } from '../../../extensions/browser/extensionsActions.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { INotebookDocument, INotebookDocumentService } from '../../../../services/notebook/common/notebookDocumentService.js';\nimport { MergeEditorInput } from '../../../mergeEditor/browser/mergeEditorInput.js';\nimport type { EditorInputWithOptions, IResourceDiffEditorInput, IResourceMergeEditorInput } from '../../../../common/editor.js';\nimport { streamToBuffer, VSBuffer, VSBufferReadableStream } from '../../../../../base/common/buffer.js';\nimport type { IEditorGroup } from '../../../../services/editor/common/editorGroupsService.js';\nimport { NotebookMultiDiffEditorInput } from '../diff/notebookMultiDiffEditorInput.js';\n\nexport class NotebookProviderInfoStore extends Disposable {\n\n\tprivate static readonly CUSTOM_EDITORS_STORAGE_ID = 'notebookEditors';\n\tprivate static readonly CUSTOM_EDITORS_ENTRY_ID = 'editors';\n\n\tprivate readonly _memento: Memento;\n\tprivate _handled: boolean = false;\n\n\tprivate readonly _contributedEditors = new Map<string, NotebookProviderInfo>();\n\tprivate readonly _contributedEditorDisposables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IEditorResolverService private readonly _editorResolverService: IEditorResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@INotebookEditorModelResolverService private readonly _notebookEditorModelResolverService: INotebookEditorModelResolverService,\n\t\t@IUriIdentityService private readonly uriIdentService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tthis._memento = new Memento(NotebookProviderInfoStore.CUSTOM_EDITORS_STORAGE_ID, storageService);\n\n\t\tconst mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t// Process the notebook contributions but buffer changes from the resolver\n\t\tthis._editorResolverService.bufferChangeEvents(() => {\n\t\t\tfor (const info of (mementoObject[NotebookProviderInfoStore.CUSTOM_EDITORS_ENTRY_ID] || []) as NotebookEditorDescriptor[]) {\n\t\t\t\tthis.add(new NotebookProviderInfo(info), false);\n\t\t\t}\n\t\t});\n\n\t\tthis._register(extensionService.onDidRegisterExtensions(() => {\n\t\t\tif (!this._handled) {\n\t\t\t\t// there is no extension point registered for notebook content provider\n\t\t\t\t// clear the memento and cache\n\t\t\t\tthis._clear();\n\t\t\t\tmementoObject[NotebookProviderInfoStore.CUSTOM_EDITORS_ENTRY_ID] = [];\n\t\t\t\tthis._memento.saveMemento();\n\t\t\t}\n\t\t}));\n\n\t\tnotebooksExtensionPoint.setHandler(extensions => this._setupHandler(extensions));\n\t}\n\n\toverride dispose(): void {\n\t\tthis._clear();\n\t\tsuper.dispose();\n\t}\n\n\tprivate _setupHandler(extensions: readonly IExtensionPointUser<INotebookEditorContribution[]>[]) {\n\t\tthis._handled = true;\n\t\tconst builtins: NotebookProviderInfo[] = [...this._contributedEditors.values()].filter(info => !info.extension);\n\t\tthis._clear();\n\n\t\tconst builtinProvidersFromCache: Map<string, IDisposable> = new Map();\n\t\tbuiltins.forEach(builtin => {\n\t\t\tbuiltinProvidersFromCache.set(builtin.id, this.add(builtin));\n\t\t});\n\n\t\tfor (const extension of extensions) {\n\t\t\tfor (const notebookContribution of extension.value) {\n\n\t\t\t\tif (!notebookContribution.type) {\n\t\t\t\t\textension.collector.error(`Notebook does not specify type-property`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst existing = this.get(notebookContribution.type);\n\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (!existing.extension && extension.description.isBuiltin && builtins.find(builtin => builtin.id === notebookContribution.type)) {\n\t\t\t\t\t\t// we are registering an extension which is using the same view type which is already cached\n\t\t\t\t\t\tbuiltinProvidersFromCache.get(notebookContribution.type)?.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\textension.collector.error(`Notebook type '${notebookContribution.type}' already used`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.add(new NotebookProviderInfo({\n\t\t\t\t\textension: extension.description.identifier,\n\t\t\t\t\tid: notebookContribution.type,\n\t\t\t\t\tdisplayName: notebookContribution.displayName,\n\t\t\t\t\tselectors: notebookContribution.selector || [],\n\t\t\t\t\tpriority: this._convertPriority(notebookContribution.priority),\n\t\t\t\t\tproviderDisplayName: extension.description.displayName ?? extension.description.identifier.value,\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tconst mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmementoObject[NotebookProviderInfoStore.CUSTOM_EDITORS_ENTRY_ID] = Array.from(this._contributedEditors.values());\n\t\tthis._memento.saveMemento();\n\t}\n\n\tclearEditorCache() {\n\t\tconst mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmementoObject[NotebookProviderInfoStore.CUSTOM_EDITORS_ENTRY_ID] = [];\n\t\tthis._memento.saveMemento();\n\t}\n\n\tprivate _convertPriority(priority?: string) {\n\t\tif (!priority) {\n\t\t\treturn RegisteredEditorPriority.default;\n\t\t}\n\n\t\tif (priority === NotebookEditorPriority.default) {\n\t\t\treturn RegisteredEditorPriority.default;\n\t\t}\n\n\t\treturn RegisteredEditorPriority.option;\n\n\t}\n\n\tprivate _registerContributionPoint(notebookProviderInfo: NotebookProviderInfo): IDisposable {\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tfor (const selector of notebookProviderInfo.selectors) {\n\t\t\tconst globPattern = (selector as INotebookExclusiveDocumentFilter).include || selector as glob.IRelativePattern | string;\n\t\t\tconst notebookEditorInfo: RegisteredEditorInfo = {\n\t\t\t\tid: notebookProviderInfo.id,\n\t\t\t\tlabel: notebookProviderInfo.displayName,\n\t\t\t\tdetail: notebookProviderInfo.providerDisplayName,\n\t\t\t\tpriority: notebookProviderInfo.priority,\n\t\t\t};\n\t\t\tconst notebookEditorOptions = {\n\t\t\t\tcanHandleDiff: () => !!this._configurationService.getValue(NotebookSetting.textDiffEditorPreview) && !this._accessibilityService.isScreenReaderOptimized(),\n\t\t\t\tcanSupportResource: (resource: URI) => resource.scheme === Schemas.untitled || resource.scheme === Schemas.vscodeNotebookCell || this._fileService.hasProvider(resource)\n\t\t\t};\n\t\t\tconst notebookEditorInputFactory: EditorInputFactoryFunction = ({ resource, options }) => {\n\t\t\t\tconst data = CellUri.parse(resource);\n\t\t\t\tlet notebookUri: URI;\n\n\t\t\t\tlet cellOptions: IResourceEditorInput | undefined;\n\t\t\t\tlet preferredResource = resource;\n\n\t\t\t\tif (data) {\n\t\t\t\t\t// resource is a notebook cell\n\t\t\t\t\tnotebookUri = this.uriIdentService.asCanonicalUri(data.notebook);\n\t\t\t\t\tpreferredResource = data.notebook;\n\t\t\t\t\tcellOptions = { resource, options };\n\t\t\t\t} else {\n\t\t\t\t\tnotebookUri = this.uriIdentService.asCanonicalUri(resource);\n\t\t\t\t}\n\n\t\t\t\tif (!cellOptions) {\n\t\t\t\t\tcellOptions = (options as INotebookEditorOptions | undefined)?.cellOptions;\n\t\t\t\t}\n\n\t\t\t\tconst notebookOptions: INotebookEditorOptions = { ...options, cellOptions, viewState: undefined };\n\t\t\t\tconst editor = NotebookEditorInput.getOrCreate(this._instantiationService, notebookUri, preferredResource, notebookProviderInfo.id);\n\t\t\t\treturn { editor, options: notebookOptions };\n\t\t\t};\n\n\t\t\tconst notebookUntitledEditorFactory: UntitledEditorInputFactoryFunction = async ({ resource, options }) => {\n\t\t\t\tconst ref = await this._notebookEditorModelResolverService.resolve({ untitledResource: resource }, notebookProviderInfo.id);\n\n\t\t\t\t// untitled notebooks are disposed when they get saved. we should not hold a reference\n\t\t\t\t// to such a disposed notebook and therefore dispose the reference as well\n\t\t\t\tref.object.notebook.onWillDispose(() => {\n\t\t\t\t\tref.dispose();\n\t\t\t\t});\n\n\t\t\t\treturn { editor: NotebookEditorInput.getOrCreate(this._instantiationService, ref.object.resource, undefined, notebookProviderInfo.id), options };\n\t\t\t};\n\t\t\tconst notebookDiffEditorInputFactory: DiffEditorInputFactoryFunction = (diffEditorInput: IResourceDiffEditorInput, group: IEditorGroup) => {\n\t\t\t\tconst { modified, original, label, description } = diffEditorInput;\n\n\t\t\t\tif (this._configurationService.getValue('notebook.experimental.enableNewDiffEditor')) {\n\t\t\t\t\treturn { editor: NotebookMultiDiffEditorInput.create(this._instantiationService, modified.resource!, label, description, original.resource!, notebookProviderInfo.id) };\n\t\t\t\t}\n\t\t\t\treturn { editor: NotebookDiffEditorInput.create(this._instantiationService, modified.resource!, label, description, original.resource!, notebookProviderInfo.id) };\n\t\t\t};\n\t\t\tconst mergeEditorInputFactory: MergeEditorInputFactoryFunction = (mergeEditor: IResourceMergeEditorInput): EditorInputWithOptions => {\n\t\t\t\treturn {\n\t\t\t\t\teditor: this._instantiationService.createInstance(\n\t\t\t\t\t\tMergeEditorInput,\n\t\t\t\t\t\tmergeEditor.base.resource,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turi: mergeEditor.input1.resource,\n\t\t\t\t\t\t\ttitle: mergeEditor.input1.label ?? basename(mergeEditor.input1.resource),\n\t\t\t\t\t\t\tdescription: mergeEditor.input1.description ?? '',\n\t\t\t\t\t\t\tdetail: mergeEditor.input1.detail\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turi: mergeEditor.input2.resource,\n\t\t\t\t\t\t\ttitle: mergeEditor.input2.label ?? basename(mergeEditor.input2.resource),\n\t\t\t\t\t\t\tdescription: mergeEditor.input2.description ?? '',\n\t\t\t\t\t\t\tdetail: mergeEditor.input2.detail\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmergeEditor.result.resource\n\t\t\t\t\t)\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tconst notebookFactoryObject: EditorInputFactoryObject = {\n\t\t\t\tcreateEditorInput: notebookEditorInputFactory,\n\t\t\t\tcreateDiffEditorInput: notebookDiffEditorInputFactory,\n\t\t\t\tcreateUntitledEditorInput: notebookUntitledEditorFactory,\n\t\t\t\tcreateMergeEditorInput: mergeEditorInputFactory\n\t\t\t};\n\t\t\tconst notebookCellFactoryObject: EditorInputFactoryObject = {\n\t\t\t\tcreateEditorInput: notebookEditorInputFactory,\n\t\t\t\tcreateDiffEditorInput: notebookDiffEditorInputFactory,\n\t\t\t};\n\n\t\t\t// TODO @lramos15 find a better way to toggle handling diff editors than needing these listeners for every registration\n\t\t\t// This is a lot of event listeners especially if there are many notebooks\n\t\t\tdisposables.add(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(NotebookSetting.textDiffEditorPreview)) {\n\t\t\t\t\tconst canHandleDiff = !!this._configurationService.getValue(NotebookSetting.textDiffEditorPreview) && !this._accessibilityService.isScreenReaderOptimized();\n\t\t\t\t\tif (canHandleDiff) {\n\t\t\t\t\t\tnotebookFactoryObject.createDiffEditorInput = notebookDiffEditorInputFactory;\n\t\t\t\t\t\tnotebookCellFactoryObject.createDiffEditorInput = notebookDiffEditorInputFactory;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotebookFactoryObject.createDiffEditorInput = undefined;\n\t\t\t\t\t\tnotebookCellFactoryObject.createDiffEditorInput = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tdisposables.add(this._accessibilityService.onDidChangeScreenReaderOptimized(() => {\n\t\t\t\tconst canHandleDiff = !!this._configurationService.getValue(NotebookSetting.textDiffEditorPreview) && !this._accessibilityService.isScreenReaderOptimized();\n\t\t\t\tif (canHandleDiff) {\n\t\t\t\t\tnotebookFactoryObject.createDiffEditorInput = notebookDiffEditorInputFactory;\n\t\t\t\t\tnotebookCellFactoryObject.createDiffEditorInput = notebookDiffEditorInputFactory;\n\t\t\t\t} else {\n\t\t\t\t\tnotebookFactoryObject.createDiffEditorInput = undefined;\n\t\t\t\t\tnotebookCellFactoryObject.createDiffEditorInput = undefined;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Register the notebook editor\n\t\t\tdisposables.add(this._editorResolverService.registerEditor(\n\t\t\t\tglobPattern,\n\t\t\t\tnotebookEditorInfo,\n\t\t\t\tnotebookEditorOptions,\n\t\t\t\tnotebookFactoryObject,\n\t\t\t));\n\t\t\t// Then register the schema handler as exclusive for that notebook\n\t\t\tdisposables.add(this._editorResolverService.registerEditor(\n\t\t\t\t`${Schemas.vscodeNotebookCell}:/**/${globPattern}`,\n\t\t\t\t{ ...notebookEditorInfo, priority: RegisteredEditorPriority.exclusive },\n\t\t\t\tnotebookEditorOptions,\n\t\t\t\tnotebookCellFactoryObject\n\t\t\t));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\n\tprivate _clear(): void {\n\t\tthis._contributedEditors.clear();\n\t\tthis._contributedEditorDisposables.clear();\n\t}\n\n\tget(viewType: string): NotebookProviderInfo | undefined {\n\t\treturn this._contributedEditors.get(viewType);\n\t}\n\n\tadd(info: NotebookProviderInfo, saveMemento = true): IDisposable {\n\t\tif (this._contributedEditors.has(info.id)) {\n\t\t\tthrow new Error(`notebook type '${info.id}' ALREADY EXISTS`);\n\t\t}\n\t\tthis._contributedEditors.set(info.id, info);\n\t\tlet editorRegistration: IDisposable | undefined;\n\n\t\t// built-in notebook providers contribute their own editors\n\t\tif (info.extension) {\n\t\t\teditorRegistration = this._registerContributionPoint(info);\n\t\t\tthis._contributedEditorDisposables.add(editorRegistration);\n\t\t}\n\n\t\tif (saveMemento) {\n\t\t\tconst mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t\tmementoObject[NotebookProviderInfoStore.CUSTOM_EDITORS_ENTRY_ID] = Array.from(this._contributedEditors.values());\n\t\t\tthis._memento.saveMemento();\n\t\t}\n\n\t\treturn this._register(toDisposable(() => {\n\t\t\tconst mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t\tmementoObject[NotebookProviderInfoStore.CUSTOM_EDITORS_ENTRY_ID] = Array.from(this._contributedEditors.values());\n\t\t\tthis._memento.saveMemento();\n\t\t\teditorRegistration?.dispose();\n\t\t\tthis._contributedEditors.delete(info.id);\n\t\t}));\n\t}\n\n\tgetContributedNotebook(resource: URI): readonly NotebookProviderInfo[] {\n\t\tconst result: NotebookProviderInfo[] = [];\n\t\tfor (const info of this._contributedEditors.values()) {\n\t\t\tif (info.matches(resource)) {\n\t\t\t\tresult.push(info);\n\t\t\t}\n\t\t}\n\t\tif (result.length === 0 && resource.scheme === Schemas.untitled) {\n\t\t\t// untitled resource and no path-specific match => all providers apply\n\t\t\treturn Array.from(this._contributedEditors.values());\n\t\t}\n\t\treturn result;\n\t}\n\n\t[Symbol.iterator](): Iterator<NotebookProviderInfo> {\n\t\treturn this._contributedEditors.values();\n\t}\n}\n\nexport class NotebookOutputRendererInfoStore {\n\tprivate readonly contributedRenderers = new Map</* rendererId */ string, NotebookOutputRendererInfo>();\n\tprivate readonly preferredMimetypeMemento: Memento;\n\tprivate readonly preferredMimetype = new Lazy<{ [notebookType: string]: { [mimeType: string]: /* rendererId */ string } }>(\n\t\t() => this.preferredMimetypeMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE));\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tthis.preferredMimetypeMemento = new Memento('workbench.editor.notebook.preferredRenderer2', storageService);\n\t}\n\n\tclear() {\n\t\tthis.contributedRenderers.clear();\n\t}\n\n\tget(rendererId: string): NotebookOutputRendererInfo | undefined {\n\t\treturn this.contributedRenderers.get(rendererId);\n\t}\n\n\tgetAll(): NotebookOutputRendererInfo[] {\n\t\treturn Array.from(this.contributedRenderers.values());\n\t}\n\n\tadd(info: NotebookOutputRendererInfo): void {\n\t\tif (this.contributedRenderers.has(info.id)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.contributedRenderers.set(info.id, info);\n\t}\n\n\t/** Update and remember the preferred renderer for the given mimetype in this workspace */\n\tsetPreferred(notebookProviderInfo: NotebookProviderInfo, mimeType: string, rendererId: string) {\n\t\tconst mementoObj = this.preferredMimetype.value;\n\t\tconst forNotebook = mementoObj[notebookProviderInfo.id];\n\t\tif (forNotebook) {\n\t\t\tforNotebook[mimeType] = rendererId;\n\t\t} else {\n\t\t\tmementoObj[notebookProviderInfo.id] = { [mimeType]: rendererId };\n\t\t}\n\n\t\tthis.preferredMimetypeMemento.saveMemento();\n\t}\n\n\tfindBestRenderers(notebookProviderInfo: NotebookProviderInfo | undefined, mimeType: string, kernelProvides: readonly string[] | undefined): IOrderedMimeType[] {\n\n\t\tconst enum ReuseOrder {\n\t\t\tPreviouslySelected = 1 << 8,\n\t\t\tSameExtensionAsNotebook = 2 << 8,\n\t\t\tOtherRenderer = 3 << 8,\n\t\t\tBuiltIn = 4 << 8,\n\t\t}\n\n\t\tconst preferred = notebookProviderInfo && this.preferredMimetype.value[notebookProviderInfo.id]?.[mimeType];\n\t\tconst notebookExtId = notebookProviderInfo?.extension?.value;\n\t\tconst notebookId = notebookProviderInfo?.id;\n\t\tconst renderers: { ordered: IOrderedMimeType; score: number }[] = Array.from(this.contributedRenderers.values())\n\t\t\t.map(renderer => {\n\t\t\t\tconst ownScore = kernelProvides === undefined\n\t\t\t\t\t? renderer.matchesWithoutKernel(mimeType)\n\t\t\t\t\t: renderer.matches(mimeType, kernelProvides);\n\n\t\t\t\tif (ownScore === NotebookRendererMatch.Never) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst rendererExtId = renderer.extensionId.value;\n\t\t\t\tconst reuseScore = preferred === renderer.id\n\t\t\t\t\t? ReuseOrder.PreviouslySelected\n\t\t\t\t\t: rendererExtId === notebookExtId || RENDERER_EQUIVALENT_EXTENSIONS.get(rendererExtId)?.has(notebookId!)\n\t\t\t\t\t\t? ReuseOrder.SameExtensionAsNotebook\n\t\t\t\t\t\t: renderer.isBuiltin ? ReuseOrder.BuiltIn : ReuseOrder.OtherRenderer;\n\t\t\t\treturn {\n\t\t\t\t\tordered: { mimeType, rendererId: renderer.id, isTrusted: true },\n\t\t\t\t\tscore: reuseScore | ownScore,\n\t\t\t\t};\n\t\t\t}).filter(isDefined);\n\n\t\tif (renderers.length === 0) {\n\t\t\treturn [{ mimeType, rendererId: RENDERER_NOT_AVAILABLE, isTrusted: true }];\n\t\t}\n\n\t\treturn renderers.sort((a, b) => a.score - b.score).map(r => r.ordered);\n\t}\n}\n\nclass ModelData implements IDisposable, INotebookDocument {\n\tprivate readonly _modelEventListeners = new DisposableStore();\n\tget uri() { return this.model.uri; }\n\n\tconstructor(\n\t\treadonly model: NotebookTextModel,\n\t\tonWillDispose: (model: INotebookTextModel) => void\n\t) {\n\t\tthis._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n\t}\n\n\tgetCellIndex(cellUri: URI): number | undefined {\n\t\treturn this.model.cells.findIndex(cell => isEqual(cell.uri, cellUri));\n\t}\n\n\tdispose(): void {\n\t\tthis._modelEventListeners.dispose();\n\t}\n}\n\nexport class NotebookService extends Disposable implements INotebookService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate static _storageNotebookViewTypeProvider = 'notebook.viewTypeProvider';\n\tprivate readonly _memento: Memento;\n\tprivate readonly _viewTypeCache: MementoObject;\n\n\tprivate readonly _notebookProviders = new Map<string, SimpleNotebookProviderInfo>();\n\tprivate _notebookProviderInfoStore: NotebookProviderInfoStore | undefined = undefined;\n\tprivate get notebookProviderInfoStore(): NotebookProviderInfoStore {\n\t\tif (!this._notebookProviderInfoStore) {\n\t\t\tthis._notebookProviderInfoStore = this._register(this._instantiationService.createInstance(NotebookProviderInfoStore));\n\t\t}\n\n\t\treturn this._notebookProviderInfoStore;\n\t}\n\tprivate readonly _notebookRenderersInfoStore = this._instantiationService.createInstance(NotebookOutputRendererInfoStore);\n\tprivate readonly _onDidChangeOutputRenderers = this._register(new Emitter<void>());\n\treadonly onDidChangeOutputRenderers = this._onDidChangeOutputRenderers.event;\n\n\tprivate readonly _notebookStaticPreloadInfoStore = new Set<NotebookStaticPreloadInfo>();\n\n\tprivate readonly _models = new ResourceMap<ModelData>();\n\n\tprivate readonly _onWillAddNotebookDocument = this._register(new Emitter<NotebookTextModel>());\n\tprivate readonly _onDidAddNotebookDocument = this._register(new Emitter<NotebookTextModel>());\n\tprivate readonly _onWillRemoveNotebookDocument = this._register(new Emitter<NotebookTextModel>());\n\tprivate readonly _onDidRemoveNotebookDocument = this._register(new Emitter<NotebookTextModel>());\n\n\treadonly onWillAddNotebookDocument = this._onWillAddNotebookDocument.event;\n\treadonly onDidAddNotebookDocument = this._onDidAddNotebookDocument.event;\n\treadonly onDidRemoveNotebookDocument = this._onDidRemoveNotebookDocument.event;\n\treadonly onWillRemoveNotebookDocument = this._onWillRemoveNotebookDocument.event;\n\n\tprivate readonly _onAddViewType = this._register(new Emitter<string>());\n\treadonly onAddViewType = this._onAddViewType.event;\n\n\tprivate readonly _onWillRemoveViewType = this._register(new Emitter<string>());\n\treadonly onWillRemoveViewType = this._onWillRemoveViewType.event;\n\n\tprivate readonly _onDidChangeEditorTypes = this._register(new Emitter<void>());\n\tonDidChangeEditorTypes: Event<void> = this._onDidChangeEditorTypes.event;\n\n\tprivate _cutItems: NotebookCellTextModel[] | undefined;\n\tprivate _lastClipboardIsCopy: boolean = true;\n\n\tprivate _displayOrder!: MimeTypeDisplayOrder;\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@INotebookDocumentService private readonly _notebookDocumentService: INotebookDocumentService\n\t) {\n\t\tsuper();\n\n\t\tnotebookRendererExtensionPoint.setHandler((renderers) => {\n\t\t\tthis._notebookRenderersInfoStore.clear();\n\n\t\t\tfor (const extension of renderers) {\n\t\t\t\tfor (const notebookContribution of extension.value) {\n\t\t\t\t\tif (!notebookContribution.entrypoint) { // avoid crashing\n\t\t\t\t\t\textension.collector.error(`Notebook renderer does not specify entry point`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst id = notebookContribution.id;\n\t\t\t\t\tif (!id) {\n\t\t\t\t\t\textension.collector.error(`Notebook renderer does not specify id-property`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._notebookRenderersInfoStore.add(new NotebookOutputRendererInfo({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\textension: extension.description,\n\t\t\t\t\t\tentrypoint: notebookContribution.entrypoint,\n\t\t\t\t\t\tdisplayName: notebookContribution.displayName,\n\t\t\t\t\t\tmimeTypes: notebookContribution.mimeTypes || [],\n\t\t\t\t\t\tdependencies: notebookContribution.dependencies,\n\t\t\t\t\t\toptionalDependencies: notebookContribution.optionalDependencies,\n\t\t\t\t\t\trequiresMessaging: notebookContribution.requiresMessaging,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidChangeOutputRenderers.fire();\n\t\t});\n\n\t\tnotebookPreloadExtensionPoint.setHandler(extensions => {\n\t\t\tthis._notebookStaticPreloadInfoStore.clear();\n\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (!isProposedApiEnabled(extension.description, 'contribNotebookStaticPreloads')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (const notebookContribution of extension.value) {\n\t\t\t\t\tif (!notebookContribution.entrypoint) { // avoid crashing\n\t\t\t\t\t\textension.collector.error(`Notebook preload does not specify entry point`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst type = notebookContribution.type;\n\t\t\t\t\tif (!type) {\n\t\t\t\t\t\textension.collector.error(`Notebook preload does not specify type-property`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._notebookStaticPreloadInfoStore.add(new NotebookStaticPreloadInfo({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\textension: extension.description,\n\t\t\t\t\t\tentrypoint: notebookContribution.entrypoint,\n\t\t\t\t\t\tlocalResourceRoots: notebookContribution.localResourceRoots ?? [],\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst updateOrder = () => {\n\t\t\tthis._displayOrder = new MimeTypeDisplayOrder(\n\t\t\t\tthis._configurationService.getValue<string[]>(NotebookSetting.displayOrder) || [],\n\t\t\t\tthis._accessibilityService.isScreenReaderOptimized()\n\t\t\t\t\t? ACCESSIBLE_NOTEBOOK_DISPLAY_ORDER\n\t\t\t\t\t: NOTEBOOK_DISPLAY_ORDER,\n\t\t\t);\n\t\t};\n\n\t\tupdateOrder();\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(NotebookSetting.displayOrder)) {\n\t\t\t\tupdateOrder();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._accessibilityService.onDidChangeScreenReaderOptimized(() => {\n\t\t\tupdateOrder();\n\t\t}));\n\n\t\tthis._memento = new Memento(NotebookService._storageNotebookViewTypeProvider, this._storageService);\n\t\tthis._viewTypeCache = this._memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\n\tgetEditorTypes(): IEditorType[] {\n\t\treturn [...this.notebookProviderInfoStore].map(info => ({\n\t\t\tid: info.id,\n\t\t\tdisplayName: info.displayName,\n\t\t\tproviderDisplayName: info.providerDisplayName\n\t\t}));\n\t}\n\n\tclearEditorCache(): void {\n\t\tthis.notebookProviderInfoStore.clearEditorCache();\n\t}\n\n\tprivate _postDocumentOpenActivation(viewType: string) {\n\t\t// send out activations on notebook text model creation\n\t\tthis._extensionService.activateByEvent(`onNotebook:${viewType}`);\n\t\tthis._extensionService.activateByEvent(`onNotebook:*`);\n\t}\n\n\tasync canResolve(viewType: string): Promise<boolean> {\n\t\tif (this._notebookProviders.has(viewType)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tawait this._extensionService.activateByEvent(`onNotebookSerializer:${viewType}`);\n\n\t\treturn this._notebookProviders.has(viewType);\n\t}\n\n\tregisterContributedNotebookType(viewType: string, data: INotebookContributionData): IDisposable {\n\n\t\tconst info = new NotebookProviderInfo({\n\t\t\textension: data.extension,\n\t\t\tid: viewType,\n\t\t\tdisplayName: data.displayName,\n\t\t\tproviderDisplayName: data.providerDisplayName,\n\t\t\tpriority: data.priority || RegisteredEditorPriority.default,\n\t\t\tselectors: []\n\t\t});\n\n\t\tinfo.update({ selectors: data.filenamePattern });\n\n\t\tconst reg = this.notebookProviderInfoStore.add(info);\n\t\tthis._onDidChangeEditorTypes.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\treg.dispose();\n\t\t\tthis._onDidChangeEditorTypes.fire();\n\t\t});\n\t}\n\n\tprivate _registerProviderData(viewType: string, data: SimpleNotebookProviderInfo): IDisposable {\n\t\tif (this._notebookProviders.has(viewType)) {\n\t\t\tthrow new Error(`notebook provider for viewtype '${viewType}' already exists`);\n\t\t}\n\t\tthis._notebookProviders.set(viewType, data);\n\t\tthis._onAddViewType.fire(viewType);\n\t\treturn toDisposable(() => {\n\t\t\tthis._onWillRemoveViewType.fire(viewType);\n\t\t\tthis._notebookProviders.delete(viewType);\n\t\t});\n\t}\n\n\tregisterNotebookSerializer(viewType: string, extensionData: NotebookExtensionDescription, serializer: INotebookSerializer): IDisposable {\n\t\tthis.notebookProviderInfoStore.get(viewType)?.update({ options: serializer.options });\n\t\tthis._viewTypeCache[viewType] = extensionData.id.value;\n\t\tthis._persistMementos();\n\t\treturn this._registerProviderData(viewType, new SimpleNotebookProviderInfo(viewType, serializer, extensionData));\n\t}\n\n\tasync withNotebookDataProvider(viewType: string): Promise<SimpleNotebookProviderInfo> {\n\t\tconst selected = this.notebookProviderInfoStore.get(viewType);\n\t\tif (!selected) {\n\t\t\tconst knownProvider = this.getViewTypeProvider(viewType);\n\n\t\t\tconst actions = knownProvider ? [\n\t\t\t\ttoAction({\n\t\t\t\t\tid: 'workbench.notebook.action.installMissingViewType', label: localize('notebookOpenInstallMissingViewType', \"Install extension for '{0}'\", viewType), run: async () => {\n\t\t\t\t\t\tawait this._instantiationService.createInstance(InstallRecommendedExtensionAction, knownProvider).run();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t] : [];\n\n\t\t\tthrow createErrorWithActions(`UNKNOWN notebook type '${viewType}'`, actions);\n\t\t}\n\t\tawait this.canResolve(selected.id);\n\t\tconst result = this._notebookProviders.get(selected.id);\n\t\tif (!result) {\n\t\t\tthrow new Error(`NO provider registered for view type: '${selected.id}'`);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttryGetDataProviderSync(viewType: string): SimpleNotebookProviderInfo | undefined {\n\t\tconst selected = this.notebookProviderInfoStore.get(viewType);\n\t\tif (!selected) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._notebookProviders.get(selected.id);\n\t}\n\n\n\tprivate _persistMementos(): void {\n\t\tthis._memento.saveMemento();\n\t}\n\n\tgetViewTypeProvider(viewType: string): string | undefined {\n\t\treturn this._viewTypeCache[viewType];\n\t}\n\n\tgetRendererInfo(rendererId: string): INotebookRendererInfo | undefined {\n\t\treturn this._notebookRenderersInfoStore.get(rendererId);\n\t}\n\n\tupdateMimePreferredRenderer(viewType: string, mimeType: string, rendererId: string, otherMimetypes: readonly string[]): void {\n\t\tconst info = this.notebookProviderInfoStore.get(viewType);\n\t\tif (info) {\n\t\t\tthis._notebookRenderersInfoStore.setPreferred(info, mimeType, rendererId);\n\t\t}\n\n\t\tthis._displayOrder.prioritize(mimeType, otherMimetypes);\n\t}\n\n\tsaveMimeDisplayOrder(target: ConfigurationTarget) {\n\t\tthis._configurationService.updateValue(NotebookSetting.displayOrder, this._displayOrder.toArray(), target);\n\t}\n\n\tgetRenderers(): INotebookRendererInfo[] {\n\t\treturn this._notebookRenderersInfoStore.getAll();\n\t}\n\n\t*getStaticPreloads(viewType: string): Iterable<INotebookStaticPreloadInfo> {\n\t\tfor (const preload of this._notebookStaticPreloadInfoStore) {\n\t\t\tif (preload.type === viewType) {\n\t\t\t\tyield preload;\n\t\t\t}\n\t\t}\n\t}\n\n\t// --- notebook documents: create, destory, retrieve, enumerate\n\n\tasync createNotebookTextModel(viewType: string, uri: URI, stream?: VSBufferReadableStream): Promise<NotebookTextModel> {\n\t\tif (this._models.has(uri)) {\n\t\t\tthrow new Error(`notebook for ${uri} already exists`);\n\t\t}\n\n\t\tconst info = await this.withNotebookDataProvider(viewType);\n\t\tif (!(info instanceof SimpleNotebookProviderInfo)) {\n\t\t\tthrow new Error('CANNOT open file notebook with this provider');\n\t\t}\n\n\n\t\tconst bytes = stream ? await streamToBuffer(stream) : VSBuffer.fromByteArray([]);\n\t\tconst data = await info.serializer.dataToNotebook(bytes);\n\n\n\t\tconst notebookModel = this._instantiationService.createInstance(NotebookTextModel, info.viewType, uri, data.cells, data.metadata, info.serializer.options);\n\t\tconst modelData = new ModelData(notebookModel, this._onWillDisposeDocument.bind(this));\n\t\tthis._models.set(uri, modelData);\n\t\tthis._notebookDocumentService.addNotebookDocument(modelData);\n\t\tthis._onWillAddNotebookDocument.fire(notebookModel);\n\t\tthis._onDidAddNotebookDocument.fire(notebookModel);\n\t\tthis._postDocumentOpenActivation(info.viewType);\n\t\treturn notebookModel;\n\t}\n\n\tgetNotebookTextModel(uri: URI): NotebookTextModel | undefined {\n\t\treturn this._models.get(uri)?.model;\n\t}\n\n\tgetNotebookTextModels(): Iterable<NotebookTextModel> {\n\t\treturn Iterable.map(this._models.values(), data => data.model);\n\t}\n\n\tlistNotebookDocuments(): NotebookTextModel[] {\n\t\treturn [...this._models].map(e => e[1].model);\n\t}\n\n\tprivate _onWillDisposeDocument(model: INotebookTextModel): void {\n\t\tconst modelData = this._models.get(model.uri);\n\t\tif (modelData) {\n\t\t\tthis._onWillRemoveNotebookDocument.fire(modelData.model);\n\t\t\tthis._models.delete(model.uri);\n\t\t\tthis._notebookDocumentService.removeNotebookDocument(modelData);\n\t\t\tmodelData.dispose();\n\t\t\tthis._onDidRemoveNotebookDocument.fire(modelData.model);\n\t\t}\n\t}\n\n\tgetOutputMimeTypeInfo(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined, output: IOutputDto): readonly IOrderedMimeType[] {\n\t\tconst sorted = this._displayOrder.sort(new Set<string>(output.outputs.map(op => op.mime)));\n\t\tconst notebookProviderInfo = this.notebookProviderInfoStore.get(textModel.viewType);\n\n\t\treturn sorted\n\t\t\t.flatMap(mimeType => this._notebookRenderersInfoStore.findBestRenderers(notebookProviderInfo, mimeType, kernelProvides))\n\t\t\t.sort((a, b) => (a.rendererId === RENDERER_NOT_AVAILABLE ? 1 : 0) - (b.rendererId === RENDERER_NOT_AVAILABLE ? 1 : 0));\n\t}\n\n\tgetContributedNotebookTypes(resource?: URI): readonly NotebookProviderInfo[] {\n\t\tif (resource) {\n\t\t\treturn this.notebookProviderInfoStore.getContributedNotebook(resource);\n\t\t}\n\n\t\treturn [...this.notebookProviderInfoStore];\n\t}\n\n\tgetContributedNotebookType(viewType: string): NotebookProviderInfo | undefined {\n\t\treturn this.notebookProviderInfoStore.get(viewType);\n\t}\n\n\tgetNotebookProviderResourceRoots(): URI[] {\n\t\tconst ret: URI[] = [];\n\t\tthis._notebookProviders.forEach(val => {\n\t\t\tif (val.extensionData.location) {\n\t\t\t\tret.push(URI.revive(val.extensionData.location));\n\t\t\t}\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t// --- copy & paste\n\n\tsetToCopy(items: NotebookCellTextModel[], isCopy: boolean) {\n\t\tthis._cutItems = items;\n\t\tthis._lastClipboardIsCopy = isCopy;\n\t}\n\n\tgetToCopy(): { items: NotebookCellTextModel[]; isCopy: boolean } | undefined {\n\t\tif (this._cutItems) {\n\t\t\treturn { items: this._cutItems, isCopy: this._lastClipboardIsCopy };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["ReuseOrder"]
}
