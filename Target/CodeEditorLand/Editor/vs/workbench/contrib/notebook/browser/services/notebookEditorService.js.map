{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Dimension } from \"../../../../../base/browser/dom.js\";\nimport type { CodeWindow } from \"../../../../../base/browser/window.js\";\nimport type { Event } from \"../../../../../base/common/event.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport {\n\ttype ServicesAccessor,\n\tcreateDecorator,\n} from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport type { NotebookEditorInput } from \"../../common/notebookEditorInput.js\";\nimport type {\n\tINotebookEditor,\n\tINotebookEditorCreationOptions,\n} from \"../notebookBrowser.js\";\nimport type { NotebookEditorWidget } from \"../notebookEditorWidget.js\";\n\nexport const INotebookEditorService = createDecorator<INotebookEditorService>(\n\t\"INotebookEditorWidgetService\",\n);\n\nexport interface IBorrowValue<T> {\n\treadonly value: T | undefined;\n}\n\nexport interface INotebookEditorService {\n\t_serviceBrand: undefined;\n\n\tretrieveWidget(\n\t\taccessor: ServicesAccessor,\n\t\tgroupId: number,\n\t\tinput: NotebookEditorInput,\n\t\tcreationOptions?: INotebookEditorCreationOptions,\n\t\tdimension?: Dimension,\n\t\tcodeWindow?: CodeWindow,\n\t): IBorrowValue<INotebookEditor>;\n\n\tretrieveExistingWidgetFromURI(\n\t\tresource: URI,\n\t): IBorrowValue<NotebookEditorWidget> | undefined;\n\tretrieveAllExistingWidgets(): IBorrowValue<NotebookEditorWidget>[];\n\tonDidAddNotebookEditor: Event<INotebookEditor>;\n\tonDidRemoveNotebookEditor: Event<INotebookEditor>;\n\taddNotebookEditor(editor: INotebookEditor): void;\n\tremoveNotebookEditor(editor: INotebookEditor): void;\n\tgetNotebookEditor(editorId: string): INotebookEditor | undefined;\n\tlistNotebookEditors(): readonly INotebookEditor[];\n}\n"],
  "mappings": "AASA;AAAA,EAEC;AAAA,OACM;AAQA,MAAM,yBAAyB;AAAA,EACrC;AACD;",
  "names": []
}
