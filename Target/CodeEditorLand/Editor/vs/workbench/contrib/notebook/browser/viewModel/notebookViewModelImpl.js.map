{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/viewModel/notebookViewModelImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from \"../../../../../base/common/collections.js\";\nimport { onUnexpectedError } from \"../../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../../base/common/lifecycle.js\";\nimport { clamp } from \"../../../../../base/common/numbers.js\";\nimport * as strings from \"../../../../../base/common/strings.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport {\n\tIBulkEditService,\n\tResourceTextEdit,\n} from \"../../../../../editor/browser/services/bulkEditService.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type * as editorCommon from \"../../../../../editor/common/editorCommon.js\";\nimport type { IWorkspaceTextEdit } from \"../../../../../editor/common/languages.js\";\nimport {\n\ttype FindMatch,\n\ttype IModelDecorationOptions,\n\ttype IModelDeltaDecoration,\n\tTrackedRangeStickiness,\n} from \"../../../../../editor/common/model.js\";\nimport {\n\tMultiModelEditStackElement,\n\tSingleModelEditStackElement,\n} from \"../../../../../editor/common/model/editStack.js\";\nimport {\n\tIntervalNode,\n\tIntervalTree,\n} from \"../../../../../editor/common/model/intervalTree.js\";\nimport { ModelDecorationOptions } from \"../../../../../editor/common/model/textModel.js\";\nimport { ITextModelService } from \"../../../../../editor/common/services/resolverService.js\";\nimport type { FoldingRegions } from \"../../../../../editor/contrib/folding/browser/foldingRanges.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { IUndoRedoService } from \"../../../../../platform/undoRedo/common/undoRedo.js\";\nimport type { NotebookCellTextModel } from \"../../common/model/notebookCellTextModel.js\";\nimport type { NotebookTextModel } from \"../../common/model/notebookTextModel.js\";\nimport {\n\tCellKind,\n\ttype ICell,\n\ttype INotebookFindOptions,\n\ttype ISelectionState,\n\ttype NotebookCellTextModelSplice,\n\tNotebookCellsChangeType,\n\tNotebookFindScopeType,\n\tSelectionStateType,\n} from \"../../common/notebookCommon.js\";\nimport {\n\tINotebookExecutionStateService,\n\tNotebookExecutionType,\n} from \"../../common/notebookExecutionStateService.js\";\nimport {\n\ttype ICellRange,\n\tcellIndexesToRanges,\n\tcellRangesToIndexes,\n\treduceCellRanges,\n} from \"../../common/notebookRange.js\";\nimport { CellFindMatchModel } from \"../contrib/find/findModel.js\";\nimport {\n\tCellEditState,\n\ttype CellFindMatchWithIndex,\n\tCellFoldingState,\n\ttype EditorFoldingStateDelegate,\n\ttype ICellModelDecorations,\n\ttype ICellModelDeltaDecorations,\n\ttype ICellViewModel,\n\ttype IModelDecorationsChangeAccessor,\n\ttype INotebookDeltaCellStatusBarItems,\n\ttype INotebookDeltaDecoration,\n\ttype INotebookEditorViewState,\n\ttype INotebookViewCellsUpdateEvent,\n\ttype INotebookViewModel,\n} from \"../notebookBrowser.js\";\nimport {\n\ttype NotebookLayoutInfo,\n\tNotebookMetadataChangedEvent,\n} from \"../notebookViewEvents.js\";\nimport { NotebookCellSelectionCollection } from \"./cellSelectionCollection.js\";\nimport { CodeCellViewModel } from \"./codeCellViewModel.js\";\nimport { MarkupCellViewModel } from \"./markupCellViewModel.js\";\nimport type { ViewContext } from \"./viewContext.js\";\n\nconst invalidFunc = () => {\n\tthrow new Error(`Invalid change accessor`);\n};\n\nclass DecorationsTree {\n\tprivate readonly _decorationsTree: IntervalTree;\n\n\tconstructor() {\n\t\tthis._decorationsTree = new IntervalTree();\n\t}\n\n\tpublic intervalSearch(\n\t\tstart: number,\n\t\tend: number,\n\t\tfilterOwnerId: number,\n\t\tfilterOutValidation: boolean,\n\t\tcachedVersionId: number,\n\t\tonlyMarginDecorations = false,\n\t): IntervalNode[] {\n\t\tconst r1 = this._decorationsTree.intervalSearch(\n\t\t\tstart,\n\t\t\tend,\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\tcachedVersionId,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t\treturn r1;\n\t}\n\n\tpublic search(\n\t\tfilterOwnerId: number,\n\t\tfilterOutValidation: boolean,\n\t\toverviewRulerOnly: boolean,\n\t\tcachedVersionId: number,\n\t\tonlyMarginDecorations: boolean,\n\t): IntervalNode[] {\n\t\treturn this._decorationsTree.search(\n\t\t\tfilterOwnerId,\n\t\t\tfilterOutValidation,\n\t\t\tcachedVersionId,\n\t\t\tonlyMarginDecorations,\n\t\t);\n\t}\n\n\tpublic collectNodesFromOwner(ownerId: number): IntervalNode[] {\n\t\tconst r1 = this._decorationsTree.collectNodesFromOwner(ownerId);\n\t\treturn r1;\n\t}\n\n\tpublic collectNodesPostOrder(): IntervalNode[] {\n\t\tconst r1 = this._decorationsTree.collectNodesPostOrder();\n\t\treturn r1;\n\t}\n\n\tpublic insert(node: IntervalNode): void {\n\t\tthis._decorationsTree.insert(node);\n\t}\n\n\tpublic delete(node: IntervalNode): void {\n\t\tthis._decorationsTree.delete(node);\n\t}\n\n\tpublic resolveNode(node: IntervalNode, cachedVersionId: number): void {\n\t\tthis._decorationsTree.resolveNode(node, cachedVersionId);\n\t}\n\n\tpublic acceptReplace(\n\t\toffset: number,\n\t\tlength: number,\n\t\ttextLength: number,\n\t\tforceMoveMarkers: boolean,\n\t): void {\n\t\tthis._decorationsTree.acceptReplace(\n\t\t\toffset,\n\t\t\tlength,\n\t\t\ttextLength,\n\t\t\tforceMoveMarkers,\n\t\t);\n\t}\n}\n\nconst TRACKED_RANGE_OPTIONS = [\n\tModelDecorationOptions.register({\n\t\tdescription:\n\t\t\t\"notebook-view-model-tracked-range-always-grows-when-typing-at-edges\",\n\t\tstickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges,\n\t}),\n\tModelDecorationOptions.register({\n\t\tdescription:\n\t\t\t\"notebook-view-model-tracked-range-never-grows-when-typing-at-edges\",\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t}),\n\tModelDecorationOptions.register({\n\t\tdescription:\n\t\t\t\"notebook-view-model-tracked-range-grows-only-when-typing-before\",\n\t\tstickiness: TrackedRangeStickiness.GrowsOnlyWhenTypingBefore,\n\t}),\n\tModelDecorationOptions.register({\n\t\tdescription:\n\t\t\t\"notebook-view-model-tracked-range-grows-only-when-typing-after\",\n\t\tstickiness: TrackedRangeStickiness.GrowsOnlyWhenTypingAfter,\n\t}),\n];\n\nfunction _normalizeOptions(\n\toptions: IModelDecorationOptions,\n): ModelDecorationOptions {\n\tif (options instanceof ModelDecorationOptions) {\n\t\treturn options;\n\t}\n\treturn ModelDecorationOptions.createDynamic(options);\n}\n\nlet MODEL_ID = 0;\n\nexport interface NotebookViewModelOptions {\n\tisReadOnly: boolean;\n\tinRepl?: boolean;\n}\n\nexport class NotebookViewModel\n\textends Disposable\n\timplements EditorFoldingStateDelegate, INotebookViewModel\n{\n\tprivate readonly _localStore = this._register(new DisposableStore());\n\tprivate _handleToViewCellMapping = new Map<number, CellViewModel>();\n\tget options(): NotebookViewModelOptions {\n\t\treturn this._options;\n\t}\n\tprivate readonly _onDidChangeOptions = this._register(new Emitter<void>());\n\tget onDidChangeOptions(): Event<void> {\n\t\treturn this._onDidChangeOptions.event;\n\t}\n\tprivate _viewCells: CellViewModel[] = [];\n\tprivate readonly replView: boolean;\n\n\tget viewCells(): ICellViewModel[] {\n\t\treturn this._viewCells;\n\t}\n\n\tget length(): number {\n\t\treturn this._viewCells.length;\n\t}\n\n\tget notebookDocument() {\n\t\treturn this._notebook;\n\t}\n\n\tget uri() {\n\t\treturn this._notebook.uri;\n\t}\n\n\tget metadata() {\n\t\treturn this._notebook.metadata;\n\t}\n\n\tprivate readonly _onDidChangeViewCells = this._register(\n\t\tnew Emitter<INotebookViewCellsUpdateEvent>(),\n\t);\n\tget onDidChangeViewCells(): Event<INotebookViewCellsUpdateEvent> {\n\t\treturn this._onDidChangeViewCells.event;\n\t}\n\n\tprivate _lastNotebookEditResource: URI[] = [];\n\n\tget lastNotebookEditResource(): URI | null {\n\t\tif (this._lastNotebookEditResource.length) {\n\t\t\treturn this._lastNotebookEditResource[\n\t\t\t\tthis._lastNotebookEditResource.length - 1\n\t\t\t];\n\t\t}\n\t\treturn null;\n\t}\n\n\tget layoutInfo(): NotebookLayoutInfo | null {\n\t\treturn this._layoutInfo;\n\t}\n\n\tprivate readonly _onDidChangeSelection = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\tget onDidChangeSelection(): Event<string> {\n\t\treturn this._onDidChangeSelection.event;\n\t}\n\n\tprivate _selectionCollection = this._register(\n\t\tnew NotebookCellSelectionCollection(),\n\t);\n\n\tprivate get selectionHandles() {\n\t\tconst handlesSet = new Set<number>();\n\t\tconst handles: number[] = [];\n\t\tcellRangesToIndexes(this._selectionCollection.selections)\n\t\t\t.map((index) =>\n\t\t\t\tindex < this.length ? this.cellAt(index) : undefined,\n\t\t\t)\n\t\t\t.forEach((cell) => {\n\t\t\t\tif (cell && !handlesSet.has(cell.handle)) {\n\t\t\t\t\thandles.push(cell.handle);\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn handles;\n\t}\n\n\tprivate set selectionHandles(selectionHandles: number[]) {\n\t\tconst indexes = selectionHandles.map((handle) =>\n\t\t\tthis._viewCells.findIndex((cell) => cell.handle === handle),\n\t\t);\n\t\tthis._selectionCollection.setSelections(\n\t\t\tcellIndexesToRanges(indexes),\n\t\t\ttrue,\n\t\t\t\"model\",\n\t\t);\n\t}\n\n\tprivate _decorationsTree = new DecorationsTree();\n\tprivate _decorations: { [decorationId: string]: IntervalNode } =\n\t\tObject.create(null);\n\tprivate _lastDecorationId = 0;\n\tprivate readonly _instanceId: string;\n\tpublic readonly id: string;\n\tprivate _foldingRanges: FoldingRegions | null = null;\n\tprivate _onDidFoldingStateChanged = new Emitter<void>();\n\tonDidFoldingStateChanged: Event<void> =\n\t\tthis._onDidFoldingStateChanged.event;\n\tprivate _hiddenRanges: ICellRange[] = [];\n\tprivate _focused = true;\n\n\tget focused() {\n\t\treturn this._focused;\n\t}\n\n\tprivate _decorationIdToCellMap = new Map<string, number>();\n\tprivate _statusBarItemIdToCellMap = new Map<string, number>();\n\n\tconstructor(\n\t\tpublic viewType: string,\n\t\tprivate _notebook: NotebookTextModel,\n\t\tprivate _viewContext: ViewContext,\n\t\tprivate _layoutInfo: NotebookLayoutInfo | null,\n\t\tprivate _options: NotebookViewModelOptions,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@IUndoRedoService private readonly _undoService: IUndoRedoService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@INotebookExecutionStateService notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t\tsuper();\n\n\t\tMODEL_ID++;\n\t\tthis.id = '$notebookViewModel' + MODEL_ID;\n\t\tthis._instanceId = strings.singleLetterHash(MODEL_ID);\n\t\tthis.replView = !!this.options.inRepl;\n\n\t\tconst compute = (changes: NotebookCellTextModelSplice<ICell>[], synchronous: boolean) => {\n\t\t\tconst diffs = changes.map(splice => {\n\t\t\t\treturn [splice[0], splice[1], splice[2].map(cell => {\n\t\t\t\t\treturn createCellViewModel(this._instantiationService, this, cell as NotebookCellTextModel, this._viewContext);\n\t\t\t\t})] as [number, number, CellViewModel[]];\n\t\t\t});\n\n\t\t\tdiffs.reverse().forEach(diff => {\n\t\t\t\tconst deletedCells = this._viewCells.splice(diff[0], diff[1], ...diff[2]);\n\n\t\t\t\tthis._decorationsTree.acceptReplace(diff[0], diff[1], diff[2].length, true);\n\t\t\t\tdeletedCells.forEach(cell => {\n\t\t\t\t\tthis._handleToViewCellMapping.delete(cell.handle);\n\t\t\t\t\t// dispose the cell to release ref to the cell text document\n\t\t\t\t\tcell.dispose();\n\t\t\t\t});\n\n\t\t\t\tdiff[2].forEach(cell => {\n\t\t\t\t\tthis._handleToViewCellMapping.set(cell.handle, cell);\n\t\t\t\t\tthis._localStore.add(cell);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst selectionHandles = this.selectionHandles;\n\n\t\t\tthis._onDidChangeViewCells.fire({\n\t\t\t\tsynchronous: synchronous,\n\t\t\t\tsplices: diffs\n\t\t\t});\n\n\t\t\tlet endSelectionHandles: number[] = [];\n\t\t\tif (selectionHandles.length) {\n\t\t\t\tconst primaryHandle = selectionHandles[0];\n\t\t\t\tconst primarySelectionIndex = this._viewCells.indexOf(this.getCellByHandle(primaryHandle)!);\n\t\t\t\tendSelectionHandles = [primaryHandle];\n\t\t\t\tlet delta = 0;\n\n\t\t\t\tfor (let i = 0; i < diffs.length; i++) {\n\t\t\t\t\tconst diff = diffs[0];\n\t\t\t\t\tif (diff[0] + diff[1] <= primarySelectionIndex) {\n\t\t\t\t\t\tdelta += diff[2].length - diff[1];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diff[0] > primarySelectionIndex) {\n\t\t\t\t\t\tendSelectionHandles = [primaryHandle];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diff[0] + diff[1] > primarySelectionIndex) {\n\t\t\t\t\t\tendSelectionHandles = [this._viewCells[diff[0] + delta].handle];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO@rebornix\n\t\t\tconst selectionIndexes = endSelectionHandles.map(handle => this._viewCells.findIndex(cell => cell.handle === handle));\n\t\t\tthis._selectionCollection.setState(cellIndexesToRanges([selectionIndexes[0]])[0], cellIndexesToRanges(selectionIndexes), true, 'model');\n\t\t};\n\n\t\tthis._register(this._notebook.onDidChangeContent(e => {\n\t\t\tfor (let i = 0; i < e.rawEvents.length; i++) {\n\t\t\t\tconst change = e.rawEvents[i];\n\t\t\t\tlet changes: NotebookCellTextModelSplice<ICell>[] = [];\n\t\t\t\tconst synchronous = e.synchronous ?? true;\n\n\t\t\t\tif (change.kind === NotebookCellsChangeType.ModelChange || change.kind === NotebookCellsChangeType.Initialize) {\n\t\t\t\t\tchanges = change.changes;\n\t\t\t\t\tcompute(changes, synchronous);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (change.kind === NotebookCellsChangeType.Move) {\n\t\t\t\t\tcompute([[change.index, change.length, []]], synchronous);\n\t\t\t\t\tcompute([[change.newIdx, 0, change.cells]], synchronous);\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._notebook.onDidChangeContent(contentChanges => {\n\t\t\tcontentChanges.rawEvents.forEach(e => {\n\t\t\t\tif (e.kind === NotebookCellsChangeType.ChangeDocumentMetadata) {\n\t\t\t\t\tthis._viewContext.eventDispatcher.emit([new NotebookMetadataChangedEvent(this._notebook.metadata)]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (contentChanges.endSelectionState) {\n\t\t\t\tthis.updateSelectionsState(contentChanges.endSelectionState);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._viewContext.eventDispatcher.onDidChangeLayout((e) => {\n\t\t\tthis._layoutInfo = e.value;\n\n\t\t\tthis._viewCells.forEach(cell => {\n\t\t\t\tif (cell.cellKind === CellKind.Markup) {\n\t\t\t\t\tif (e.source.width || e.source.fontInfo) {\n\t\t\t\t\t\tcell.layoutChange({ outerWidth: e.value.width, font: e.value.fontInfo });\n\t\t\t\t\t}\n\t\t\t\t} else if (e.source.width !== undefined) {\n\t\t\t\t\t\tcell.layoutChange({ outerWidth: e.value.width, font: e.value.fontInfo });\n\t\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\tthis._register(this._viewContext.notebookOptions.onDidChangeOptions(e => {\n\t\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\t\tconst cell = this._viewCells[i];\n\t\t\t\tcell.updateOptions(e);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(notebookExecutionStateService.onDidChangeExecution(e => {\n\t\t\tif (e.type !== NotebookExecutionType.cell) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst cell = this.getCellByHandle(e.cellHandle);\n\n\t\t\tif (cell instanceof CodeCellViewModel) {\n\t\t\t\tcell.updateExecutionState(e);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._selectionCollection.onDidChangeSelection(e => {\n\t\t\tthis._onDidChangeSelection.fire(e);\n\t\t}));\n\n\n\t\tconst viewCellCount = this.replView ? this._notebook.cells.length - 1 : this._notebook.cells.length;\n\t\tfor (let i = 0; i < viewCellCount; i++) {\n\t\t\tthis._viewCells.push(createCellViewModel(this._instantiationService, this, this._notebook.cells[i], this._viewContext));\n\t\t}\n\n\n\t\tthis._viewCells.forEach(cell => {\n\t\t\tthis._handleToViewCellMapping.set(cell.handle, cell);\n\t\t});\n\t}\n\n\tupdateOptions(newOptions: Partial<NotebookViewModelOptions>) {\n\t\tthis._options = { ...this._options, ...newOptions };\n\t\tthis._onDidChangeOptions.fire();\n\t}\n\n\tgetFocus() {\n\t\treturn this._selectionCollection.focus;\n\t}\n\n\tgetSelections() {\n\t\treturn this._selectionCollection.selections;\n\t}\n\n\tsetEditorFocus(focused: boolean) {\n\t\tthis._focused = focused;\n\t}\n\n\tvalidateRange(cellRange: ICellRange | null | undefined): ICellRange | null {\n\t\tif (!cellRange) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst start = clamp(cellRange.start, 0, this.length);\n\t\tconst end = clamp(cellRange.end, 0, this.length);\n\n\t\tif (start <= end) {\n\t\t\treturn { start, end };\n\t\t} else {\n\t\t\treturn { start: end, end: start };\n\t\t}\n\t}\n\n\t// selection change from list view's `setFocus` and `setSelection` should always use `source: view` to prevent events breaking the list view focus/selection change transaction\n\tupdateSelectionsState(\n\t\tstate: ISelectionState,\n\t\tsource: \"view\" | \"model\" = \"model\",\n\t) {\n\t\tif (this._focused || source === \"model\") {\n\t\t\tif (state.kind === SelectionStateType.Handle) {\n\t\t\t\tconst primaryIndex =\n\t\t\t\t\tstate.primary !== null\n\t\t\t\t\t\t? this.getCellIndexByHandle(state.primary)\n\t\t\t\t\t\t: null;\n\t\t\t\tconst primarySelection =\n\t\t\t\t\tprimaryIndex !== null\n\t\t\t\t\t\t? this.validateRange({\n\t\t\t\t\t\t\t\tstart: primaryIndex,\n\t\t\t\t\t\t\t\tend: primaryIndex + 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t: null;\n\t\t\t\tconst selections = cellIndexesToRanges(\n\t\t\t\t\tstate.selections.map((sel) =>\n\t\t\t\t\t\tthis.getCellIndexByHandle(sel),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t\t.map((range) => this.validateRange(range))\n\t\t\t\t\t.filter((range) => range !== null) as ICellRange[];\n\t\t\t\tthis._selectionCollection.setState(\n\t\t\t\t\tprimarySelection,\n\t\t\t\t\treduceCellRanges(selections),\n\t\t\t\t\ttrue,\n\t\t\t\t\tsource,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst primarySelection = this.validateRange(state.focus);\n\t\t\t\tconst selections = state.selections\n\t\t\t\t\t.map((range) => this.validateRange(range))\n\t\t\t\t\t.filter((range) => range !== null) as ICellRange[];\n\t\t\t\tthis._selectionCollection.setState(\n\t\t\t\t\tprimarySelection,\n\t\t\t\t\treduceCellRanges(selections),\n\t\t\t\t\ttrue,\n\t\t\t\t\tsource,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetFoldingStartIndex(index: number): number {\n\t\tif (!this._foldingRanges) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst range = this._foldingRanges.findRange(index + 1);\n\t\tconst startIndex = this._foldingRanges.getStartLineNumber(range) - 1;\n\t\treturn startIndex;\n\t}\n\n\tgetFoldingState(index: number): CellFoldingState {\n\t\tif (!this._foldingRanges) {\n\t\t\treturn CellFoldingState.None;\n\t\t}\n\n\t\tconst range = this._foldingRanges.findRange(index + 1);\n\t\tconst startIndex = this._foldingRanges.getStartLineNumber(range) - 1;\n\n\t\tif (startIndex !== index) {\n\t\t\treturn CellFoldingState.None;\n\t\t}\n\n\t\treturn this._foldingRanges.isCollapsed(range)\n\t\t\t? CellFoldingState.Collapsed\n\t\t\t: CellFoldingState.Expanded;\n\t}\n\n\tgetFoldedLength(index: number): number {\n\t\tif (!this._foldingRanges) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst range = this._foldingRanges.findRange(index + 1);\n\t\tconst startIndex = this._foldingRanges.getStartLineNumber(range) - 1;\n\t\tconst endIndex = this._foldingRanges.getEndLineNumber(range) - 1;\n\n\t\treturn endIndex - startIndex;\n\t}\n\n\tupdateFoldingRanges(ranges: FoldingRegions) {\n\t\tthis._foldingRanges = ranges;\n\t\tlet updateHiddenAreas = false;\n\t\tconst newHiddenAreas: ICellRange[] = [];\n\n\t\tlet i = 0; // index into hidden\n\t\tlet k = 0;\n\n\t\tlet lastCollapsedStart = Number.MAX_VALUE;\n\t\tlet lastCollapsedEnd = -1;\n\n\t\tfor (; i < ranges.length; i++) {\n\t\t\tif (!ranges.isCollapsed(i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden\n\t\t\tconst endLineNumber = ranges.getEndLineNumber(i);\n\t\t\tif (\n\t\t\t\tlastCollapsedStart <= startLineNumber &&\n\t\t\t\tendLineNumber <= lastCollapsedEnd\n\t\t\t) {\n\t\t\t\t// ignore ranges contained in collapsed regions\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!updateHiddenAreas &&\n\t\t\t\tk < this._hiddenRanges.length &&\n\t\t\t\tthis._hiddenRanges[k].start + 1 === startLineNumber &&\n\t\t\t\tthis._hiddenRanges[k].end + 1 === endLineNumber\n\t\t\t) {\n\t\t\t\t// reuse the old ranges\n\t\t\t\tnewHiddenAreas.push(this._hiddenRanges[k]);\n\t\t\t\tk++;\n\t\t\t} else {\n\t\t\t\tupdateHiddenAreas = true;\n\t\t\t\tnewHiddenAreas.push({\n\t\t\t\t\tstart: startLineNumber - 1,\n\t\t\t\t\tend: endLineNumber - 1,\n\t\t\t\t});\n\t\t\t}\n\t\t\tlastCollapsedStart = startLineNumber;\n\t\t\tlastCollapsedEnd = endLineNumber;\n\t\t}\n\n\t\tif (updateHiddenAreas || k < this._hiddenRanges.length) {\n\t\t\tthis._hiddenRanges = newHiddenAreas;\n\t\t\tthis._onDidFoldingStateChanged.fire();\n\t\t}\n\n\t\tthis._viewCells.forEach((cell) => {\n\t\t\tif (cell.cellKind === CellKind.Markup) {\n\t\t\t\tcell.triggerFoldingStateChange();\n\t\t\t}\n\t\t});\n\t}\n\n\tgetHiddenRanges() {\n\t\treturn this._hiddenRanges;\n\t}\n\n\tgetCellByHandle(handle: number) {\n\t\treturn this._handleToViewCellMapping.get(handle);\n\t}\n\n\tgetCellIndexByHandle(handle: number): number {\n\t\treturn this._viewCells.findIndex((cell) => cell.handle === handle);\n\t}\n\n\tgetCellIndex(cell: ICellViewModel) {\n\t\treturn this._viewCells.indexOf(cell as CellViewModel);\n\t}\n\n\tcellAt(index: number): CellViewModel | undefined {\n\t\t// if (index < 0 || index >= this.length) {\n\t\t// \tthrow new Error(`Invalid index ${index}`);\n\t\t// }\n\n\t\treturn this._viewCells[index];\n\t}\n\n\tgetCellsInRange(range?: ICellRange): ReadonlyArray<ICellViewModel> {\n\t\tif (!range) {\n\t\t\treturn this._viewCells.slice(0);\n\t\t}\n\n\t\tconst validatedRange = this.validateRange(range);\n\n\t\tif (validatedRange) {\n\t\t\tconst result: ICellViewModel[] = [];\n\n\t\t\tfor (let i = validatedRange.start; i < validatedRange.end; i++) {\n\t\t\t\tresult.push(this._viewCells[i]);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * If this._viewCells[index] is visible then return index\n\t */\n\tgetNearestVisibleCellIndexUpwards(index: number) {\n\t\tfor (let i = this._hiddenRanges.length - 1; i >= 0; i--) {\n\t\t\tconst cellRange = this._hiddenRanges[i];\n\t\t\tconst foldStart = cellRange.start - 1;\n\t\t\tconst foldEnd = cellRange.end;\n\n\t\t\tif (foldStart > index) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (foldStart <= index && foldEnd >= index) {\n\t\t\t\treturn index;\n\t\t\t}\n\n\t\t\t// foldStart <= index, foldEnd < index\n\t\t\tbreak;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tgetNextVisibleCellIndex(index: number) {\n\t\tfor (let i = 0; i < this._hiddenRanges.length; i++) {\n\t\t\tconst cellRange = this._hiddenRanges[i];\n\t\t\tconst foldStart = cellRange.start - 1;\n\t\t\tconst foldEnd = cellRange.end;\n\n\t\t\tif (foldEnd < index) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// foldEnd >= index\n\t\t\tif (foldStart <= index) {\n\t\t\t\treturn foldEnd + 1;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn index + 1;\n\t}\n\n\tgetPreviousVisibleCellIndex(index: number) {\n\t\tfor (let i = this._hiddenRanges.length - 1; i >= 0; i--) {\n\t\t\tconst cellRange = this._hiddenRanges[i];\n\t\t\tconst foldStart = cellRange.start - 1;\n\t\t\tconst foldEnd = cellRange.end;\n\n\t\t\tif (foldEnd < index) {\n\t\t\t\treturn index;\n\t\t\t}\n\n\t\t\tif (foldStart <= index) {\n\t\t\t\treturn foldStart;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\thasCell(cell: ICellViewModel) {\n\t\treturn this._handleToViewCellMapping.has(cell.handle);\n\t}\n\n\tgetVersionId() {\n\t\treturn this._notebook.versionId;\n\t}\n\n\tgetAlternativeId() {\n\t\treturn this._notebook.alternativeVersionId;\n\t}\n\n\tgetTrackedRange(id: string): ICellRange | null {\n\t\treturn this._getDecorationRange(id);\n\t}\n\n\tprivate _getDecorationRange(decorationId: string): ICellRange | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\tconst versionId = this.getVersionId();\n\t\tif (node.cachedVersionId !== versionId) {\n\t\t\tthis._decorationsTree.resolveNode(node, versionId);\n\t\t}\n\t\tif (node.range === null) {\n\t\t\treturn {\n\t\t\t\tstart: node.cachedAbsoluteStart - 1,\n\t\t\t\tend: node.cachedAbsoluteEnd - 1,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tstart: node.range.startLineNumber - 1,\n\t\t\tend: node.range.endLineNumber - 1,\n\t\t};\n\t}\n\n\tsetTrackedRange(\n\t\tid: string | null,\n\t\tnewRange: ICellRange | null,\n\t\tnewStickiness: TrackedRangeStickiness,\n\t): string | null {\n\t\tconst node = id ? this._decorations[id] : null;\n\n\t\tif (!node) {\n\t\t\tif (!newRange) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this._deltaCellDecorationsImpl(\n\t\t\t\t0,\n\t\t\t\t[],\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\trange: new Range(\n\t\t\t\t\t\t\tnewRange.start + 1,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\tnewRange.end + 1,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t),\n\t\t\t\t\t\toptions: TRACKED_RANGE_OPTIONS[newStickiness],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t)[0];\n\t\t}\n\n\t\tif (!newRange) {\n\t\t\t// node exists, the request is to delete => delete node\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t\treturn null;\n\t\t}\n\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(\n\t\t\tthis.getVersionId(),\n\t\t\tnewRange.start,\n\t\t\tnewRange.end + 1,\n\t\t\tnew Range(newRange.start + 1, 1, newRange.end + 1, 1),\n\t\t);\n\t\tnode.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n\t\tthis._decorationsTree.insert(node);\n\t\treturn node.id;\n\t}\n\n\tprivate _deltaCellDecorationsImpl(\n\t\townerId: number,\n\t\toldDecorationsIds: string[],\n\t\tnewDecorations: IModelDeltaDecoration[],\n\t): string[] {\n\t\tconst versionId = this.getVersionId();\n\n\t\tconst oldDecorationsLen = oldDecorationsIds.length;\n\t\tlet oldDecorationIndex = 0;\n\n\t\tconst newDecorationsLen = newDecorations.length;\n\t\tlet newDecorationIndex = 0;\n\n\t\tconst result = new Array<string>(newDecorationsLen);\n\t\twhile (\n\t\t\toldDecorationIndex < oldDecorationsLen ||\n\t\t\tnewDecorationIndex < newDecorationsLen\n\t\t) {\n\t\t\tlet node: IntervalNode | null = null;\n\n\t\t\tif (oldDecorationIndex < oldDecorationsLen) {\n\t\t\t\t// (1) get ourselves an old node\n\t\t\t\tdo {\n\t\t\t\t\tnode =\n\t\t\t\t\t\tthis._decorations[\n\t\t\t\t\t\t\toldDecorationsIds[oldDecorationIndex++]\n\t\t\t\t\t\t];\n\t\t\t\t} while (!node && oldDecorationIndex < oldDecorationsLen);\n\n\t\t\t\t// (2) remove the node from the tree (if it exists)\n\t\t\t\tif (node) {\n\t\t\t\t\tthis._decorationsTree.delete(node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newDecorationIndex < newDecorationsLen) {\n\t\t\t\t// (3) create a new node if necessary\n\t\t\t\tif (!node) {\n\t\t\t\t\tconst internalDecorationId = ++this._lastDecorationId;\n\t\t\t\t\tconst decorationId = `${this._instanceId};${internalDecorationId}`;\n\t\t\t\t\tnode = new IntervalNode(decorationId, 0, 0);\n\t\t\t\t\tthis._decorations[decorationId] = node;\n\t\t\t\t}\n\n\t\t\t\t// (4) initialize node\n\t\t\t\tconst newDecoration = newDecorations[newDecorationIndex];\n\t\t\t\tconst range = newDecoration.range;\n\t\t\t\tconst options = _normalizeOptions(newDecoration.options);\n\n\t\t\t\tnode.ownerId = ownerId;\n\t\t\t\tnode.reset(\n\t\t\t\t\tversionId,\n\t\t\t\t\trange.startLineNumber,\n\t\t\t\t\trange.endLineNumber,\n\t\t\t\t\tRange.lift(range),\n\t\t\t\t);\n\t\t\t\tnode.setOptions(options);\n\n\t\t\t\tthis._decorationsTree.insert(node);\n\n\t\t\t\tresult[newDecorationIndex] = node.id;\n\n\t\t\t\tnewDecorationIndex++;\n\t\t\t} else if (node) {\n\t\t\t\tdelete this._decorations[node.id];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tdeltaCellDecorations(\n\t\toldDecorations: string[],\n\t\tnewDecorations: INotebookDeltaDecoration[],\n\t): string[] {\n\t\toldDecorations.forEach((id) => {\n\t\t\tconst handle = this._decorationIdToCellMap.get(id);\n\n\t\t\tif (handle !== undefined) {\n\t\t\t\tconst cell = this.getCellByHandle(handle);\n\t\t\t\tcell?.deltaCellDecorations([id], []);\n\t\t\t\tthis._decorationIdToCellMap.delete(id);\n\t\t\t}\n\t\t});\n\n\t\tconst result: string[] = [];\n\n\t\tnewDecorations.forEach((decoration) => {\n\t\t\tconst cell = this.getCellByHandle(decoration.handle);\n\t\t\tconst ret =\n\t\t\t\tcell?.deltaCellDecorations([], [decoration.options]) || [];\n\t\t\tret.forEach((id) => {\n\t\t\t\tthis._decorationIdToCellMap.set(id, decoration.handle);\n\t\t\t});\n\n\t\t\tresult.push(...ret);\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tdeltaCellStatusBarItems(\n\t\toldItems: string[],\n\t\tnewItems: INotebookDeltaCellStatusBarItems[],\n\t): string[] {\n\t\tconst deletesByHandle = groupBy(\n\t\t\toldItems,\n\t\t\t(id) => this._statusBarItemIdToCellMap.get(id) ?? -1,\n\t\t);\n\n\t\tconst result: string[] = [];\n\t\tnewItems.forEach((itemDelta) => {\n\t\t\tconst cell = this.getCellByHandle(itemDelta.handle);\n\t\t\tconst deleted = deletesByHandle[itemDelta.handle] ?? [];\n\t\t\tdelete deletesByHandle[itemDelta.handle];\n\t\t\tdeleted.forEach((id) => this._statusBarItemIdToCellMap.delete(id));\n\n\t\t\tconst ret =\n\t\t\t\tcell?.deltaCellStatusBarItems(deleted, itemDelta.items) || [];\n\t\t\tret.forEach((id) => {\n\t\t\t\tthis._statusBarItemIdToCellMap.set(id, itemDelta.handle);\n\t\t\t});\n\n\t\t\tresult.push(...ret);\n\t\t});\n\n\t\tfor (const _handle in deletesByHandle) {\n\t\t\tconst handle = Number.parseInt(_handle);\n\t\t\tconst ids = deletesByHandle[handle];\n\t\t\tconst cell = this.getCellByHandle(handle);\n\t\t\tcell?.deltaCellStatusBarItems(ids, []);\n\t\t\tids.forEach((id) => this._statusBarItemIdToCellMap.delete(id));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tnearestCodeCellIndex(index: number /* exclusive */) {\n\t\tconst nearest = this.viewCells\n\t\t\t.slice(0, index)\n\t\t\t.reverse()\n\t\t\t.findIndex((cell) => cell.cellKind === CellKind.Code);\n\t\tif (nearest > -1) {\n\t\t\treturn index - nearest - 1;\n\t\t} else {\n\t\t\tconst nearestCellTheOtherDirection = this.viewCells\n\t\t\t\t.slice(index + 1)\n\t\t\t\t.findIndex((cell) => cell.cellKind === CellKind.Code);\n\t\t\tif (nearestCellTheOtherDirection > -1) {\n\t\t\t\treturn index + 1 + nearestCellTheOtherDirection;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tgetEditorViewState(): INotebookEditorViewState {\n\t\tconst editingCells: { [key: number]: boolean } = {};\n\t\tconst collapsedInputCells: { [key: number]: boolean } = {};\n\t\tconst collapsedOutputCells: { [key: number]: boolean } = {};\n\t\tconst cellLineNumberStates: { [key: number]: \"on\" | \"off\" } = {};\n\n\t\tthis._viewCells.forEach((cell, i) => {\n\t\t\tif (cell.getEditState() === CellEditState.Editing) {\n\t\t\t\teditingCells[i] = true;\n\t\t\t}\n\n\t\t\tif (cell.isInputCollapsed) {\n\t\t\t\tcollapsedInputCells[i] = true;\n\t\t\t}\n\n\t\t\tif (cell instanceof CodeCellViewModel && cell.isOutputCollapsed) {\n\t\t\t\tcollapsedOutputCells[i] = true;\n\t\t\t}\n\n\t\t\tif (cell.lineNumbers !== \"inherit\") {\n\t\t\t\tcellLineNumberStates[i] = cell.lineNumbers;\n\t\t\t}\n\t\t});\n\t\tconst editorViewStates: {\n\t\t\t[key: number]: editorCommon.ICodeEditorViewState;\n\t\t} = {};\n\t\tthis._viewCells\n\t\t\t.map((cell) => ({\n\t\t\t\thandle: cell.model.handle,\n\t\t\t\tstate: cell.saveEditorViewState(),\n\t\t\t}))\n\t\t\t.forEach((viewState, i) => {\n\t\t\t\tif (viewState.state) {\n\t\t\t\t\teditorViewStates[i] = viewState.state;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn {\n\t\t\teditingCells,\n\t\t\teditorViewStates,\n\t\t\tcellLineNumberStates,\n\t\t\tcollapsedInputCells,\n\t\t\tcollapsedOutputCells,\n\t\t};\n\t}\n\n\trestoreEditorViewState(\n\t\tviewState: INotebookEditorViewState | undefined,\n\t): void {\n\t\tif (!viewState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._viewCells.forEach((cell, index) => {\n\t\t\tconst isEditing =\n\t\t\t\tviewState.editingCells && viewState.editingCells[index];\n\t\t\tconst editorViewState =\n\t\t\t\tviewState.editorViewStates && viewState.editorViewStates[index];\n\n\t\t\tcell.updateEditState(\n\t\t\t\tisEditing ? CellEditState.Editing : CellEditState.Preview,\n\t\t\t\t\"viewState\",\n\t\t\t);\n\t\t\tconst cellHeight = viewState.cellTotalHeights\n\t\t\t\t? viewState.cellTotalHeights[index]\n\t\t\t\t: undefined;\n\t\t\tcell.restoreEditorViewState(editorViewState, cellHeight);\n\t\t\tif (\n\t\t\t\tviewState.collapsedInputCells &&\n\t\t\t\tviewState.collapsedInputCells[index]\n\t\t\t) {\n\t\t\t\tcell.isInputCollapsed = true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tviewState.collapsedOutputCells &&\n\t\t\t\tviewState.collapsedOutputCells[index] &&\n\t\t\t\tcell instanceof CodeCellViewModel\n\t\t\t) {\n\t\t\t\tcell.isOutputCollapsed = true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tviewState.cellLineNumberStates &&\n\t\t\t\tviewState.cellLineNumberStates[index]\n\t\t\t) {\n\t\t\t\tcell.lineNumbers = viewState.cellLineNumberStates[index];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Editor decorations across cells. For example, find decorations for multiple code cells\n\t * The reason that we can't completely delegate this to CodeEditorWidget is most of the time, the editors for cells are not created yet but we already have decorations for them.\n\t */\n\tchangeModelDecorations<T>(\n\t\tcallback: (changeAccessor: IModelDecorationsChangeAccessor) => T,\n\t): T | null {\n\t\tconst changeAccessor: IModelDecorationsChangeAccessor = {\n\t\t\tdeltaDecorations: (\n\t\t\t\toldDecorations: ICellModelDecorations[],\n\t\t\t\tnewDecorations: ICellModelDeltaDecorations[],\n\t\t\t): ICellModelDecorations[] => {\n\t\t\t\treturn this._deltaModelDecorationsImpl(\n\t\t\t\t\toldDecorations,\n\t\t\t\t\tnewDecorations,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\n\t\tlet result: T | null = null;\n\t\ttry {\n\t\t\tresult = callback(changeAccessor);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\n\t\tchangeAccessor.deltaDecorations = invalidFunc;\n\n\t\treturn result;\n\t}\n\n\tprivate _deltaModelDecorationsImpl(\n\t\toldDecorations: ICellModelDecorations[],\n\t\tnewDecorations: ICellModelDeltaDecorations[],\n\t): ICellModelDecorations[] {\n\t\tconst mapping = new Map<\n\t\t\tnumber,\n\t\t\t{\n\t\t\t\tcell: CellViewModel;\n\t\t\t\toldDecorations: readonly string[];\n\t\t\t\tnewDecorations: readonly IModelDeltaDecoration[];\n\t\t\t}\n\t\t>();\n\t\toldDecorations.forEach((oldDecoration) => {\n\t\t\tconst ownerId = oldDecoration.ownerId;\n\n\t\t\tif (!mapping.has(ownerId)) {\n\t\t\t\tconst cell = this._viewCells.find(\n\t\t\t\t\t(cell) => cell.handle === ownerId,\n\t\t\t\t);\n\t\t\t\tif (cell) {\n\t\t\t\t\tmapping.set(ownerId, {\n\t\t\t\t\t\tcell: cell,\n\t\t\t\t\t\toldDecorations: [],\n\t\t\t\t\t\tnewDecorations: [],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst data = mapping.get(ownerId)!;\n\t\t\tif (data) {\n\t\t\t\tdata.oldDecorations = oldDecoration.decorations;\n\t\t\t}\n\t\t});\n\n\t\tnewDecorations.forEach((newDecoration) => {\n\t\t\tconst ownerId = newDecoration.ownerId;\n\n\t\t\tif (!mapping.has(ownerId)) {\n\t\t\t\tconst cell = this._viewCells.find(\n\t\t\t\t\t(cell) => cell.handle === ownerId,\n\t\t\t\t);\n\n\t\t\t\tif (cell) {\n\t\t\t\t\tmapping.set(ownerId, {\n\t\t\t\t\t\tcell: cell,\n\t\t\t\t\t\toldDecorations: [],\n\t\t\t\t\t\tnewDecorations: [],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst data = mapping.get(ownerId)!;\n\t\t\tif (data) {\n\t\t\t\tdata.newDecorations = newDecoration.decorations;\n\t\t\t}\n\t\t});\n\n\t\tconst ret: ICellModelDecorations[] = [];\n\t\tmapping.forEach((value, ownerId) => {\n\t\t\tconst cellRet = value.cell.deltaModelDecorations(\n\t\t\t\tvalue.oldDecorations,\n\t\t\t\tvalue.newDecorations,\n\t\t\t);\n\t\t\tret.push({\n\t\t\t\townerId: ownerId,\n\t\t\t\tdecorations: cellRet,\n\t\t\t});\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t//#region Find\n\tfind(\n\t\tvalue: string,\n\t\toptions: INotebookFindOptions,\n\t): CellFindMatchWithIndex[] {\n\t\tconst matches: CellFindMatchWithIndex[] = [];\n\t\tlet findCells: CellViewModel[] = [];\n\n\t\tif (\n\t\t\toptions.findScope &&\n\t\t\t(options.findScope.findScopeType === NotebookFindScopeType.Cells ||\n\t\t\t\toptions.findScope.findScopeType === NotebookFindScopeType.Text)\n\t\t) {\n\t\t\tconst selectedRanges =\n\t\t\t\toptions.findScope.selectedCellRanges\n\t\t\t\t\t?.map((range) => this.validateRange(range))\n\t\t\t\t\t.filter((range) => !!range) ?? [];\n\t\t\tconst selectedIndexes = cellRangesToIndexes(selectedRanges);\n\t\t\tfindCells = selectedIndexes.map((index) => this._viewCells[index]);\n\t\t} else {\n\t\t\tfindCells = this._viewCells;\n\t\t}\n\n\t\tfindCells.forEach((cell, index) => {\n\t\t\tconst cellMatches = cell.startFind(value, options);\n\t\t\tif (cellMatches) {\n\t\t\t\tmatches.push(\n\t\t\t\t\tnew CellFindMatchModel(\n\t\t\t\t\t\tcellMatches.cell,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tcellMatches.contentMatches,\n\t\t\t\t\t\t[],\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// filter based on options and editing state\n\n\t\treturn matches.filter((match) => {\n\t\t\tif (match.cell.cellKind === CellKind.Code) {\n\t\t\t\t// code cell, we only include its match if include input is enabled\n\t\t\t\treturn options.includeCodeInput;\n\t\t\t}\n\n\t\t\t// markup cell, it depends on the editing state\n\t\t\tif (match.cell.getEditState() === CellEditState.Editing) {\n\t\t\t\t// editing, even if we includeMarkupPreview\n\t\t\t\treturn options.includeMarkupInput;\n\t\t\t} else {\n\t\t\t\t// cell in preview mode, we should only include it if includeMarkupPreview is false but includeMarkupInput is true\n\t\t\t\t// if includeMarkupPreview is true, then we should include the webview match result other than this\n\t\t\t\treturn (\n\t\t\t\t\t!options.includeMarkupPreview && options.includeMarkupInput\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\treplaceOne(\n\t\tcell: ICellViewModel,\n\t\trange: Range,\n\t\ttext: string,\n\t): Promise<void> {\n\t\tconst viewCell = cell as CellViewModel;\n\t\tthis._lastNotebookEditResource.push(viewCell.uri);\n\t\treturn viewCell.resolveTextModel().then(() => {\n\t\t\tthis._bulkEditService.apply(\n\t\t\t\t[new ResourceTextEdit(cell.uri, { range, text })],\n\t\t\t\t{ quotableLabel: \"Notebook Replace\" },\n\t\t\t);\n\t\t});\n\t}\n\n\tasync replaceAll(\n\t\tmatches: CellFindMatchWithIndex[],\n\t\ttexts: string[],\n\t): Promise<void> {\n\t\tif (!matches.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst textEdits: IWorkspaceTextEdit[] = [];\n\t\tthis._lastNotebookEditResource.push(matches[0].cell.uri);\n\n\t\tmatches.forEach((match) => {\n\t\t\tmatch.contentMatches.forEach((singleMatch, index) => {\n\t\t\t\ttextEdits.push({\n\t\t\t\t\tversionId: undefined,\n\t\t\t\t\ttextEdit: {\n\t\t\t\t\t\trange: (singleMatch as FindMatch).range,\n\t\t\t\t\t\ttext: texts[index],\n\t\t\t\t\t},\n\t\t\t\t\tresource: match.cell.uri,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\treturn Promise.all(\n\t\t\tmatches.map((match) => {\n\t\t\t\treturn match.cell.resolveTextModel();\n\t\t\t}),\n\t\t).then(async () => {\n\t\t\tthis._bulkEditService.apply(\n\t\t\t\t{ edits: textEdits },\n\t\t\t\t{ quotableLabel: \"Notebook Replace All\" },\n\t\t\t);\n\t\t\treturn;\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Undo/Redo\n\n\tprivate async _withElement(\n\t\telement: SingleModelEditStackElement | MultiModelEditStackElement,\n\t\tcallback: () => Promise<void>,\n\t) {\n\t\tconst viewCells = this._viewCells.filter((cell) =>\n\t\t\telement.matchesResource(cell.uri),\n\t\t);\n\t\tconst refs = await Promise.all(\n\t\t\tviewCells.map((cell) =>\n\t\t\t\tthis._textModelService.createModelReference(cell.uri),\n\t\t\t),\n\t\t);\n\t\tawait callback();\n\t\trefs.forEach((ref) => ref.dispose());\n\t}\n\n\tasync undo() {\n\t\tconst editStack = this._undoService.getElements(this.uri);\n\t\tconst element = editStack.past.length\n\t\t\t? editStack.past[editStack.past.length - 1]\n\t\t\t: undefined;\n\n\t\tif (\n\t\t\t(element && element instanceof SingleModelEditStackElement) ||\n\t\t\telement instanceof MultiModelEditStackElement\n\t\t) {\n\t\t\tawait this._withElement(element, async () => {\n\t\t\t\tawait this._undoService.undo(this.uri);\n\t\t\t});\n\n\t\t\treturn element instanceof SingleModelEditStackElement\n\t\t\t\t? [element.resource]\n\t\t\t\t: element.resources;\n\t\t}\n\n\t\tawait this._undoService.undo(this.uri);\n\t\treturn [];\n\t}\n\n\tasync redo() {\n\t\tconst editStack = this._undoService.getElements(this.uri);\n\t\tconst element = editStack.future[0];\n\n\t\tif (\n\t\t\t(element && element instanceof SingleModelEditStackElement) ||\n\t\t\telement instanceof MultiModelEditStackElement\n\t\t) {\n\t\t\tawait this._withElement(element, async () => {\n\t\t\t\tawait this._undoService.redo(this.uri);\n\t\t\t});\n\n\t\t\treturn element instanceof SingleModelEditStackElement\n\t\t\t\t? [element.resource]\n\t\t\t\t: element.resources;\n\t\t}\n\n\t\tawait this._undoService.redo(this.uri);\n\n\t\treturn [];\n\t}\n\n\t//#endregion\n\n\tequal(notebook: NotebookTextModel) {\n\t\treturn this._notebook === notebook;\n\t}\n\n\toverride dispose() {\n\t\tthis._localStore.clear();\n\t\tthis._viewCells.forEach((cell) => {\n\t\t\tcell.dispose();\n\t\t});\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport type CellViewModel = (CodeCellViewModel | MarkupCellViewModel) &\n\tICellViewModel;\n\nexport function createCellViewModel(\n\tinstantiationService: IInstantiationService,\n\tnotebookViewModel: NotebookViewModel,\n\tcell: NotebookCellTextModel,\n\tviewContext: ViewContext,\n) {\n\tif (cell.cellKind === CellKind.Code) {\n\t\treturn instantiationService.createInstance(\n\t\t\tCodeCellViewModel,\n\t\t\tnotebookViewModel.viewType,\n\t\t\tcell,\n\t\t\tnotebookViewModel.layoutInfo,\n\t\t\tviewContext,\n\t\t);\n\t} else {\n\t\treturn instantiationService.createInstance(\n\t\t\tMarkupCellViewModel,\n\t\t\tnotebookViewModel.viewType,\n\t\t\tcell,\n\t\t\tnotebookViewModel.layoutInfo,\n\t\t\tnotebookViewModel,\n\t\t\tviewContext,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["cell"]
}
