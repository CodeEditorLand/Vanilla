{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/viewModel/notebookViewModelImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from '../../../../../base/common/collections.js';\nimport { onUnexpectedError } from '../../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { clamp } from '../../../../../base/common/numbers.js';\nimport * as strings from '../../../../../base/common/strings.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IBulkEditService, ResourceTextEdit } from '../../../../../editor/browser/services/bulkEditService.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport * as editorCommon from '../../../../../editor/common/editorCommon.js';\nimport { IWorkspaceTextEdit } from '../../../../../editor/common/languages.js';\nimport { FindMatch, IModelDecorationOptions, IModelDeltaDecoration, TrackedRangeStickiness } from '../../../../../editor/common/model.js';\nimport { MultiModelEditStackElement, SingleModelEditStackElement } from '../../../../../editor/common/model/editStack.js';\nimport { IntervalNode, IntervalTree } from '../../../../../editor/common/model/intervalTree.js';\nimport { ModelDecorationOptions } from '../../../../../editor/common/model/textModel.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { FoldingRegions } from '../../../../../editor/contrib/folding/browser/foldingRanges.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IUndoRedoService } from '../../../../../platform/undoRedo/common/undoRedo.js';\nimport { CellFindMatchModel } from '../contrib/find/findModel.js';\nimport { CellEditState, CellFindMatchWithIndex, CellFoldingState, EditorFoldingStateDelegate, ICellModelDecorations, ICellModelDeltaDecorations, ICellViewModel, IModelDecorationsChangeAccessor, INotebookDeltaCellStatusBarItems, INotebookDeltaDecoration, INotebookEditorViewState, INotebookViewCellsUpdateEvent, INotebookViewModel } from '../notebookBrowser.js';\nimport { NotebookLayoutInfo, NotebookMetadataChangedEvent } from '../notebookViewEvents.js';\nimport { NotebookCellSelectionCollection } from './cellSelectionCollection.js';\nimport { CodeCellViewModel } from './codeCellViewModel.js';\nimport { MarkupCellViewModel } from './markupCellViewModel.js';\nimport { ViewContext } from './viewContext.js';\nimport { NotebookCellTextModel } from '../../common/model/notebookCellTextModel.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { CellKind, ICell, INotebookFindOptions, ISelectionState, NotebookCellsChangeType, NotebookCellTextModelSplice, NotebookFindScopeType, SelectionStateType } from '../../common/notebookCommon.js';\nimport { INotebookExecutionStateService, NotebookExecutionType } from '../../common/notebookExecutionStateService.js';\nimport { cellIndexesToRanges, cellRangesToIndexes, ICellRange, reduceCellRanges } from '../../common/notebookRange.js';\n\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\n\nclass DecorationsTree {\n\tprivate readonly _decorationsTree: IntervalTree;\n\n\tconstructor() {\n\t\tthis._decorationsTree = new IntervalTree();\n\t}\n\n\tpublic intervalSearch(start: number, end: number, filterOwnerId: number, filterOutValidation: boolean, cachedVersionId: number, onlyMarginDecorations: boolean = false): IntervalNode[] {\n\t\tconst r1 = this._decorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n\t\treturn r1;\n\t}\n\n\tpublic search(filterOwnerId: number, filterOutValidation: boolean, overviewRulerOnly: boolean, cachedVersionId: number, onlyMarginDecorations: boolean): IntervalNode[] {\n\t\treturn this._decorationsTree.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n\n\t}\n\n\tpublic collectNodesFromOwner(ownerId: number): IntervalNode[] {\n\t\tconst r1 = this._decorationsTree.collectNodesFromOwner(ownerId);\n\t\treturn r1;\n\t}\n\n\tpublic collectNodesPostOrder(): IntervalNode[] {\n\t\tconst r1 = this._decorationsTree.collectNodesPostOrder();\n\t\treturn r1;\n\t}\n\n\tpublic insert(node: IntervalNode): void {\n\t\tthis._decorationsTree.insert(node);\n\t}\n\n\tpublic delete(node: IntervalNode): void {\n\t\tthis._decorationsTree.delete(node);\n\t}\n\n\tpublic resolveNode(node: IntervalNode, cachedVersionId: number): void {\n\t\tthis._decorationsTree.resolveNode(node, cachedVersionId);\n\t}\n\n\tpublic acceptReplace(offset: number, length: number, textLength: number, forceMoveMarkers: boolean): void {\n\t\tthis._decorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\t}\n}\n\nconst TRACKED_RANGE_OPTIONS = [\n\tModelDecorationOptions.register({ description: 'notebook-view-model-tracked-range-always-grows-when-typing-at-edges', stickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges }),\n\tModelDecorationOptions.register({ description: 'notebook-view-model-tracked-range-never-grows-when-typing-at-edges', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges }),\n\tModelDecorationOptions.register({ description: 'notebook-view-model-tracked-range-grows-only-when-typing-before', stickiness: TrackedRangeStickiness.GrowsOnlyWhenTypingBefore }),\n\tModelDecorationOptions.register({ description: 'notebook-view-model-tracked-range-grows-only-when-typing-after', stickiness: TrackedRangeStickiness.GrowsOnlyWhenTypingAfter }),\n];\n\nfunction _normalizeOptions(options: IModelDecorationOptions): ModelDecorationOptions {\n\tif (options instanceof ModelDecorationOptions) {\n\t\treturn options;\n\t}\n\treturn ModelDecorationOptions.createDynamic(options);\n}\n\nlet MODEL_ID = 0;\n\nexport interface NotebookViewModelOptions {\n\tisReadOnly: boolean;\n\tinRepl?: boolean;\n}\n\nexport class NotebookViewModel extends Disposable implements EditorFoldingStateDelegate, INotebookViewModel {\n\tprivate readonly _localStore = this._register(new DisposableStore());\n\tprivate _handleToViewCellMapping = new Map<number, CellViewModel>();\n\tget options(): NotebookViewModelOptions { return this._options; }\n\tprivate readonly _onDidChangeOptions = this._register(new Emitter<void>());\n\tget onDidChangeOptions(): Event<void> { return this._onDidChangeOptions.event; }\n\tprivate _viewCells: CellViewModel[] = [];\n\tprivate readonly replView: boolean;\n\n\tget viewCells(): ICellViewModel[] {\n\t\treturn this._viewCells;\n\t}\n\n\tget length(): number {\n\t\treturn this._viewCells.length;\n\t}\n\n\tget notebookDocument() {\n\t\treturn this._notebook;\n\t}\n\n\tget uri() {\n\t\treturn this._notebook.uri;\n\t}\n\n\tget metadata() {\n\t\treturn this._notebook.metadata;\n\t}\n\n\tprivate readonly _onDidChangeViewCells = this._register(new Emitter<INotebookViewCellsUpdateEvent>());\n\tget onDidChangeViewCells(): Event<INotebookViewCellsUpdateEvent> { return this._onDidChangeViewCells.event; }\n\n\tprivate _lastNotebookEditResource: URI[] = [];\n\n\tget lastNotebookEditResource(): URI | null {\n\t\tif (this._lastNotebookEditResource.length) {\n\t\t\treturn this._lastNotebookEditResource[this._lastNotebookEditResource.length - 1];\n\t\t}\n\t\treturn null;\n\t}\n\n\tget layoutInfo(): NotebookLayoutInfo | null {\n\t\treturn this._layoutInfo;\n\t}\n\n\tprivate readonly _onDidChangeSelection = this._register(new Emitter<string>());\n\tget onDidChangeSelection(): Event<string> { return this._onDidChangeSelection.event; }\n\n\tprivate _selectionCollection = this._register(new NotebookCellSelectionCollection());\n\n\tprivate get selectionHandles() {\n\t\tconst handlesSet = new Set<number>();\n\t\tconst handles: number[] = [];\n\t\tcellRangesToIndexes(this._selectionCollection.selections).map(index => index < this.length ? this.cellAt(index) : undefined).forEach(cell => {\n\t\t\tif (cell && !handlesSet.has(cell.handle)) {\n\t\t\t\thandles.push(cell.handle);\n\t\t\t}\n\t\t});\n\n\t\treturn handles;\n\t}\n\n\tprivate set selectionHandles(selectionHandles: number[]) {\n\t\tconst indexes = selectionHandles.map(handle => this._viewCells.findIndex(cell => cell.handle === handle));\n\t\tthis._selectionCollection.setSelections(cellIndexesToRanges(indexes), true, 'model');\n\t}\n\n\tprivate _decorationsTree = new DecorationsTree();\n\tprivate _decorations: { [decorationId: string]: IntervalNode } = Object.create(null);\n\tprivate _lastDecorationId: number = 0;\n\tprivate readonly _instanceId: string;\n\tpublic readonly id: string;\n\tprivate _foldingRanges: FoldingRegions | null = null;\n\tprivate _onDidFoldingStateChanged = new Emitter<void>();\n\tonDidFoldingStateChanged: Event<void> = this._onDidFoldingStateChanged.event;\n\tprivate _hiddenRanges: ICellRange[] = [];\n\tprivate _focused: boolean = true;\n\n\tget focused() {\n\t\treturn this._focused;\n\t}\n\n\tprivate _decorationIdToCellMap = new Map<string, number>();\n\tprivate _statusBarItemIdToCellMap = new Map<string, number>();\n\n\tconstructor(\n\t\tpublic viewType: string,\n\t\tprivate _notebook: NotebookTextModel,\n\t\tprivate _viewContext: ViewContext,\n\t\tprivate _layoutInfo: NotebookLayoutInfo | null,\n\t\tprivate _options: NotebookViewModelOptions,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@IUndoRedoService private readonly _undoService: IUndoRedoService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@INotebookExecutionStateService notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t\tsuper();\n\n\t\tMODEL_ID++;\n\t\tthis.id = '$notebookViewModel' + MODEL_ID;\n\t\tthis._instanceId = strings.singleLetterHash(MODEL_ID);\n\t\tthis.replView = !!this.options.inRepl;\n\n\t\tconst compute = (changes: NotebookCellTextModelSplice<ICell>[], synchronous: boolean) => {\n\t\t\tconst diffs = changes.map(splice => {\n\t\t\t\treturn [splice[0], splice[1], splice[2].map(cell => {\n\t\t\t\t\treturn createCellViewModel(this._instantiationService, this, cell as NotebookCellTextModel, this._viewContext);\n\t\t\t\t})] as [number, number, CellViewModel[]];\n\t\t\t});\n\n\t\t\tdiffs.reverse().forEach(diff => {\n\t\t\t\tconst deletedCells = this._viewCells.splice(diff[0], diff[1], ...diff[2]);\n\n\t\t\t\tthis._decorationsTree.acceptReplace(diff[0], diff[1], diff[2].length, true);\n\t\t\t\tdeletedCells.forEach(cell => {\n\t\t\t\t\tthis._handleToViewCellMapping.delete(cell.handle);\n\t\t\t\t\t// dispose the cell to release ref to the cell text document\n\t\t\t\t\tcell.dispose();\n\t\t\t\t});\n\n\t\t\t\tdiff[2].forEach(cell => {\n\t\t\t\t\tthis._handleToViewCellMapping.set(cell.handle, cell);\n\t\t\t\t\tthis._localStore.add(cell);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst selectionHandles = this.selectionHandles;\n\n\t\t\tthis._onDidChangeViewCells.fire({\n\t\t\t\tsynchronous: synchronous,\n\t\t\t\tsplices: diffs\n\t\t\t});\n\n\t\t\tlet endSelectionHandles: number[] = [];\n\t\t\tif (selectionHandles.length) {\n\t\t\t\tconst primaryHandle = selectionHandles[0];\n\t\t\t\tconst primarySelectionIndex = this._viewCells.indexOf(this.getCellByHandle(primaryHandle)!);\n\t\t\t\tendSelectionHandles = [primaryHandle];\n\t\t\t\tlet delta = 0;\n\n\t\t\t\tfor (let i = 0; i < diffs.length; i++) {\n\t\t\t\t\tconst diff = diffs[0];\n\t\t\t\t\tif (diff[0] + diff[1] <= primarySelectionIndex) {\n\t\t\t\t\t\tdelta += diff[2].length - diff[1];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diff[0] > primarySelectionIndex) {\n\t\t\t\t\t\tendSelectionHandles = [primaryHandle];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diff[0] + diff[1] > primarySelectionIndex) {\n\t\t\t\t\t\tendSelectionHandles = [this._viewCells[diff[0] + delta].handle];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO@rebornix\n\t\t\tconst selectionIndexes = endSelectionHandles.map(handle => this._viewCells.findIndex(cell => cell.handle === handle));\n\t\t\tthis._selectionCollection.setState(cellIndexesToRanges([selectionIndexes[0]])[0], cellIndexesToRanges(selectionIndexes), true, 'model');\n\t\t};\n\n\t\tthis._register(this._notebook.onDidChangeContent(e => {\n\t\t\tfor (let i = 0; i < e.rawEvents.length; i++) {\n\t\t\t\tconst change = e.rawEvents[i];\n\t\t\t\tlet changes: NotebookCellTextModelSplice<ICell>[] = [];\n\t\t\t\tconst synchronous = e.synchronous ?? true;\n\n\t\t\t\tif (change.kind === NotebookCellsChangeType.ModelChange || change.kind === NotebookCellsChangeType.Initialize) {\n\t\t\t\t\tchanges = change.changes;\n\t\t\t\t\tcompute(changes, synchronous);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (change.kind === NotebookCellsChangeType.Move) {\n\t\t\t\t\tcompute([[change.index, change.length, []]], synchronous);\n\t\t\t\t\tcompute([[change.newIdx, 0, change.cells]], synchronous);\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._notebook.onDidChangeContent(contentChanges => {\n\t\t\tcontentChanges.rawEvents.forEach(e => {\n\t\t\t\tif (e.kind === NotebookCellsChangeType.ChangeDocumentMetadata) {\n\t\t\t\t\tthis._viewContext.eventDispatcher.emit([new NotebookMetadataChangedEvent(this._notebook.metadata)]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (contentChanges.endSelectionState) {\n\t\t\t\tthis.updateSelectionsState(contentChanges.endSelectionState);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._viewContext.eventDispatcher.onDidChangeLayout((e) => {\n\t\t\tthis._layoutInfo = e.value;\n\n\t\t\tthis._viewCells.forEach(cell => {\n\t\t\t\tif (cell.cellKind === CellKind.Markup) {\n\t\t\t\t\tif (e.source.width || e.source.fontInfo) {\n\t\t\t\t\t\tcell.layoutChange({ outerWidth: e.value.width, font: e.value.fontInfo });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (e.source.width !== undefined) {\n\t\t\t\t\t\tcell.layoutChange({ outerWidth: e.value.width, font: e.value.fontInfo });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\tthis._register(this._viewContext.notebookOptions.onDidChangeOptions(e => {\n\t\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\t\tconst cell = this._viewCells[i];\n\t\t\t\tcell.updateOptions(e);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(notebookExecutionStateService.onDidChangeExecution(e => {\n\t\t\tif (e.type !== NotebookExecutionType.cell) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst cell = this.getCellByHandle(e.cellHandle);\n\n\t\t\tif (cell instanceof CodeCellViewModel) {\n\t\t\t\tcell.updateExecutionState(e);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._selectionCollection.onDidChangeSelection(e => {\n\t\t\tthis._onDidChangeSelection.fire(e);\n\t\t}));\n\n\n\t\tconst viewCellCount = this.replView ? this._notebook.cells.length - 1 : this._notebook.cells.length;\n\t\tfor (let i = 0; i < viewCellCount; i++) {\n\t\t\tthis._viewCells.push(createCellViewModel(this._instantiationService, this, this._notebook.cells[i], this._viewContext));\n\t\t}\n\n\n\t\tthis._viewCells.forEach(cell => {\n\t\t\tthis._handleToViewCellMapping.set(cell.handle, cell);\n\t\t});\n\t}\n\n\tupdateOptions(newOptions: Partial<NotebookViewModelOptions>) {\n\t\tthis._options = { ...this._options, ...newOptions };\n\t\tthis._onDidChangeOptions.fire();\n\t}\n\n\tgetFocus() {\n\t\treturn this._selectionCollection.focus;\n\t}\n\n\tgetSelections() {\n\t\treturn this._selectionCollection.selections;\n\t}\n\n\tsetEditorFocus(focused: boolean) {\n\t\tthis._focused = focused;\n\t}\n\n\tvalidateRange(cellRange: ICellRange | null | undefined): ICellRange | null {\n\t\tif (!cellRange) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst start = clamp(cellRange.start, 0, this.length);\n\t\tconst end = clamp(cellRange.end, 0, this.length);\n\n\t\tif (start <= end) {\n\t\t\treturn { start, end };\n\t\t} else {\n\t\t\treturn { start: end, end: start };\n\t\t}\n\t}\n\n\t// selection change from list view's `setFocus` and `setSelection` should always use `source: view` to prevent events breaking the list view focus/selection change transaction\n\tupdateSelectionsState(state: ISelectionState, source: 'view' | 'model' = 'model') {\n\t\tif (this._focused || source === 'model') {\n\t\t\tif (state.kind === SelectionStateType.Handle) {\n\t\t\t\tconst primaryIndex = state.primary !== null ? this.getCellIndexByHandle(state.primary) : null;\n\t\t\t\tconst primarySelection = primaryIndex !== null ? this.validateRange({ start: primaryIndex, end: primaryIndex + 1 }) : null;\n\t\t\t\tconst selections = cellIndexesToRanges(state.selections.map(sel => this.getCellIndexByHandle(sel)))\n\t\t\t\t\t.map(range => this.validateRange(range))\n\t\t\t\t\t.filter(range => range !== null) as ICellRange[];\n\t\t\t\tthis._selectionCollection.setState(primarySelection, reduceCellRanges(selections), true, source);\n\t\t\t} else {\n\t\t\t\tconst primarySelection = this.validateRange(state.focus);\n\t\t\t\tconst selections = state.selections\n\t\t\t\t\t.map(range => this.validateRange(range))\n\t\t\t\t\t.filter(range => range !== null) as ICellRange[];\n\t\t\t\tthis._selectionCollection.setState(primarySelection, reduceCellRanges(selections), true, source);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetFoldingStartIndex(index: number): number {\n\t\tif (!this._foldingRanges) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tconst range = this._foldingRanges.findRange(index + 1);\n\t\tconst startIndex = this._foldingRanges.getStartLineNumber(range) - 1;\n\t\treturn startIndex;\n\t}\n\n\tgetFoldingState(index: number): CellFoldingState {\n\t\tif (!this._foldingRanges) {\n\t\t\treturn CellFoldingState.None;\n\t\t}\n\n\t\tconst range = this._foldingRanges.findRange(index + 1);\n\t\tconst startIndex = this._foldingRanges.getStartLineNumber(range) - 1;\n\n\t\tif (startIndex !== index) {\n\t\t\treturn CellFoldingState.None;\n\t\t}\n\n\t\treturn this._foldingRanges.isCollapsed(range) ? CellFoldingState.Collapsed : CellFoldingState.Expanded;\n\t}\n\n\tgetFoldedLength(index: number): number {\n\t\tif (!this._foldingRanges) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst range = this._foldingRanges.findRange(index + 1);\n\t\tconst startIndex = this._foldingRanges.getStartLineNumber(range) - 1;\n\t\tconst endIndex = this._foldingRanges.getEndLineNumber(range) - 1;\n\n\t\treturn endIndex - startIndex;\n\t}\n\n\tupdateFoldingRanges(ranges: FoldingRegions) {\n\t\tthis._foldingRanges = ranges;\n\t\tlet updateHiddenAreas = false;\n\t\tconst newHiddenAreas: ICellRange[] = [];\n\n\t\tlet i = 0; // index into hidden\n\t\tlet k = 0;\n\n\t\tlet lastCollapsedStart = Number.MAX_VALUE;\n\t\tlet lastCollapsedEnd = -1;\n\n\t\tfor (; i < ranges.length; i++) {\n\t\t\tif (!ranges.isCollapsed(i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden\n\t\t\tconst endLineNumber = ranges.getEndLineNumber(i);\n\t\t\tif (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) {\n\t\t\t\t// ignore ranges contained in collapsed regions\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].start + 1 === startLineNumber && (this._hiddenRanges[k].end + 1) === endLineNumber) {\n\t\t\t\t// reuse the old ranges\n\t\t\t\tnewHiddenAreas.push(this._hiddenRanges[k]);\n\t\t\t\tk++;\n\t\t\t} else {\n\t\t\t\tupdateHiddenAreas = true;\n\t\t\t\tnewHiddenAreas.push({ start: startLineNumber - 1, end: endLineNumber - 1 });\n\t\t\t}\n\t\t\tlastCollapsedStart = startLineNumber;\n\t\t\tlastCollapsedEnd = endLineNumber;\n\t\t}\n\n\t\tif (updateHiddenAreas || k < this._hiddenRanges.length) {\n\t\t\tthis._hiddenRanges = newHiddenAreas;\n\t\t\tthis._onDidFoldingStateChanged.fire();\n\t\t}\n\n\t\tthis._viewCells.forEach(cell => {\n\t\t\tif (cell.cellKind === CellKind.Markup) {\n\t\t\t\tcell.triggerFoldingStateChange();\n\t\t\t}\n\t\t});\n\t}\n\n\tgetHiddenRanges() {\n\t\treturn this._hiddenRanges;\n\t}\n\n\tgetCellByHandle(handle: number) {\n\t\treturn this._handleToViewCellMapping.get(handle);\n\t}\n\n\tgetCellIndexByHandle(handle: number): number {\n\t\treturn this._viewCells.findIndex(cell => cell.handle === handle);\n\t}\n\n\tgetCellIndex(cell: ICellViewModel) {\n\t\treturn this._viewCells.indexOf(cell as CellViewModel);\n\t}\n\n\tcellAt(index: number): CellViewModel | undefined {\n\t\t// if (index < 0 || index >= this.length) {\n\t\t// \tthrow new Error(`Invalid index ${index}`);\n\t\t// }\n\n\t\treturn this._viewCells[index];\n\t}\n\n\tgetCellsInRange(range?: ICellRange): ReadonlyArray<ICellViewModel> {\n\t\tif (!range) {\n\t\t\treturn this._viewCells.slice(0);\n\t\t}\n\n\t\tconst validatedRange = this.validateRange(range);\n\n\t\tif (validatedRange) {\n\t\t\tconst result: ICellViewModel[] = [];\n\n\t\t\tfor (let i = validatedRange.start; i < validatedRange.end; i++) {\n\t\t\t\tresult.push(this._viewCells[i]);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * If this._viewCells[index] is visible then return index\n\t */\n\tgetNearestVisibleCellIndexUpwards(index: number) {\n\t\tfor (let i = this._hiddenRanges.length - 1; i >= 0; i--) {\n\t\t\tconst cellRange = this._hiddenRanges[i];\n\t\t\tconst foldStart = cellRange.start - 1;\n\t\t\tconst foldEnd = cellRange.end;\n\n\t\t\tif (foldStart > index) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (foldStart <= index && foldEnd >= index) {\n\t\t\t\treturn index;\n\t\t\t}\n\n\t\t\t// foldStart <= index, foldEnd < index\n\t\t\tbreak;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tgetNextVisibleCellIndex(index: number) {\n\t\tfor (let i = 0; i < this._hiddenRanges.length; i++) {\n\t\t\tconst cellRange = this._hiddenRanges[i];\n\t\t\tconst foldStart = cellRange.start - 1;\n\t\t\tconst foldEnd = cellRange.end;\n\n\t\t\tif (foldEnd < index) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// foldEnd >= index\n\t\t\tif (foldStart <= index) {\n\t\t\t\treturn foldEnd + 1;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn index + 1;\n\t}\n\n\tgetPreviousVisibleCellIndex(index: number) {\n\t\tfor (let i = this._hiddenRanges.length - 1; i >= 0; i--) {\n\t\t\tconst cellRange = this._hiddenRanges[i];\n\t\t\tconst foldStart = cellRange.start - 1;\n\t\t\tconst foldEnd = cellRange.end;\n\n\t\t\tif (foldEnd < index) {\n\t\t\t\treturn index;\n\t\t\t}\n\n\t\t\tif (foldStart <= index) {\n\t\t\t\treturn foldStart;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\thasCell(cell: ICellViewModel) {\n\t\treturn this._handleToViewCellMapping.has(cell.handle);\n\t}\n\n\tgetVersionId() {\n\t\treturn this._notebook.versionId;\n\t}\n\n\tgetAlternativeId() {\n\t\treturn this._notebook.alternativeVersionId;\n\t}\n\n\tgetTrackedRange(id: string): ICellRange | null {\n\t\treturn this._getDecorationRange(id);\n\t}\n\n\tprivate _getDecorationRange(decorationId: string): ICellRange | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\tconst versionId = this.getVersionId();\n\t\tif (node.cachedVersionId !== versionId) {\n\t\t\tthis._decorationsTree.resolveNode(node, versionId);\n\t\t}\n\t\tif (node.range === null) {\n\t\t\treturn { start: node.cachedAbsoluteStart - 1, end: node.cachedAbsoluteEnd - 1 };\n\t\t}\n\n\t\treturn { start: node.range.startLineNumber - 1, end: node.range.endLineNumber - 1 };\n\t}\n\n\tsetTrackedRange(id: string | null, newRange: ICellRange | null, newStickiness: TrackedRangeStickiness): string | null {\n\t\tconst node = (id ? this._decorations[id] : null);\n\n\t\tif (!node) {\n\t\t\tif (!newRange) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this._deltaCellDecorationsImpl(0, [], [{ range: new Range(newRange.start + 1, 1, newRange.end + 1, 1), options: TRACKED_RANGE_OPTIONS[newStickiness] }])[0];\n\t\t}\n\n\t\tif (!newRange) {\n\t\t\t// node exists, the request is to delete => delete node\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t\treturn null;\n\t\t}\n\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(this.getVersionId(), newRange.start, newRange.end + 1, new Range(newRange.start + 1, 1, newRange.end + 1, 1));\n\t\tnode.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n\t\tthis._decorationsTree.insert(node);\n\t\treturn node.id;\n\t}\n\n\tprivate _deltaCellDecorationsImpl(ownerId: number, oldDecorationsIds: string[], newDecorations: IModelDeltaDecoration[]): string[] {\n\t\tconst versionId = this.getVersionId();\n\n\t\tconst oldDecorationsLen = oldDecorationsIds.length;\n\t\tlet oldDecorationIndex = 0;\n\n\t\tconst newDecorationsLen = newDecorations.length;\n\t\tlet newDecorationIndex = 0;\n\n\t\tconst result = new Array<string>(newDecorationsLen);\n\t\twhile (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n\n\t\t\tlet node: IntervalNode | null = null;\n\n\t\t\tif (oldDecorationIndex < oldDecorationsLen) {\n\t\t\t\t// (1) get ourselves an old node\n\t\t\t\tdo {\n\t\t\t\t\tnode = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n\t\t\t\t} while (!node && oldDecorationIndex < oldDecorationsLen);\n\n\t\t\t\t// (2) remove the node from the tree (if it exists)\n\t\t\t\tif (node) {\n\t\t\t\t\tthis._decorationsTree.delete(node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newDecorationIndex < newDecorationsLen) {\n\t\t\t\t// (3) create a new node if necessary\n\t\t\t\tif (!node) {\n\t\t\t\t\tconst internalDecorationId = (++this._lastDecorationId);\n\t\t\t\t\tconst decorationId = `${this._instanceId};${internalDecorationId}`;\n\t\t\t\t\tnode = new IntervalNode(decorationId, 0, 0);\n\t\t\t\t\tthis._decorations[decorationId] = node;\n\t\t\t\t}\n\n\t\t\t\t// (4) initialize node\n\t\t\t\tconst newDecoration = newDecorations[newDecorationIndex];\n\t\t\t\tconst range = newDecoration.range;\n\t\t\t\tconst options = _normalizeOptions(newDecoration.options);\n\n\t\t\t\tnode.ownerId = ownerId;\n\t\t\t\tnode.reset(versionId, range.startLineNumber, range.endLineNumber, Range.lift(range));\n\t\t\t\tnode.setOptions(options);\n\n\t\t\t\tthis._decorationsTree.insert(node);\n\n\t\t\t\tresult[newDecorationIndex] = node.id;\n\n\t\t\t\tnewDecorationIndex++;\n\t\t\t} else {\n\t\t\t\tif (node) {\n\t\t\t\t\tdelete this._decorations[node.id];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tdeltaCellDecorations(oldDecorations: string[], newDecorations: INotebookDeltaDecoration[]): string[] {\n\t\toldDecorations.forEach(id => {\n\t\t\tconst handle = this._decorationIdToCellMap.get(id);\n\n\t\t\tif (handle !== undefined) {\n\t\t\t\tconst cell = this.getCellByHandle(handle);\n\t\t\t\tcell?.deltaCellDecorations([id], []);\n\t\t\t\tthis._decorationIdToCellMap.delete(id);\n\t\t\t}\n\t\t});\n\n\t\tconst result: string[] = [];\n\n\t\tnewDecorations.forEach(decoration => {\n\t\t\tconst cell = this.getCellByHandle(decoration.handle);\n\t\t\tconst ret = cell?.deltaCellDecorations([], [decoration.options]) || [];\n\t\t\tret.forEach(id => {\n\t\t\t\tthis._decorationIdToCellMap.set(id, decoration.handle);\n\t\t\t});\n\n\t\t\tresult.push(...ret);\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tdeltaCellStatusBarItems(oldItems: string[], newItems: INotebookDeltaCellStatusBarItems[]): string[] {\n\t\tconst deletesByHandle = groupBy(oldItems, id => this._statusBarItemIdToCellMap.get(id) ?? -1);\n\n\t\tconst result: string[] = [];\n\t\tnewItems.forEach(itemDelta => {\n\t\t\tconst cell = this.getCellByHandle(itemDelta.handle);\n\t\t\tconst deleted = deletesByHandle[itemDelta.handle] ?? [];\n\t\t\tdelete deletesByHandle[itemDelta.handle];\n\t\t\tdeleted.forEach(id => this._statusBarItemIdToCellMap.delete(id));\n\n\t\t\tconst ret = cell?.deltaCellStatusBarItems(deleted, itemDelta.items) || [];\n\t\t\tret.forEach(id => {\n\t\t\t\tthis._statusBarItemIdToCellMap.set(id, itemDelta.handle);\n\t\t\t});\n\n\t\t\tresult.push(...ret);\n\t\t});\n\n\t\tfor (const _handle in deletesByHandle) {\n\t\t\tconst handle = parseInt(_handle);\n\t\t\tconst ids = deletesByHandle[handle];\n\t\t\tconst cell = this.getCellByHandle(handle);\n\t\t\tcell?.deltaCellStatusBarItems(ids, []);\n\t\t\tids.forEach(id => this._statusBarItemIdToCellMap.delete(id));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tnearestCodeCellIndex(index: number /* exclusive */) {\n\t\tconst nearest = this.viewCells.slice(0, index).reverse().findIndex(cell => cell.cellKind === CellKind.Code);\n\t\tif (nearest > -1) {\n\t\t\treturn index - nearest - 1;\n\t\t} else {\n\t\t\tconst nearestCellTheOtherDirection = this.viewCells.slice(index + 1).findIndex(cell => cell.cellKind === CellKind.Code);\n\t\t\tif (nearestCellTheOtherDirection > -1) {\n\t\t\t\treturn index + 1 + nearestCellTheOtherDirection;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tgetEditorViewState(): INotebookEditorViewState {\n\t\tconst editingCells: { [key: number]: boolean } = {};\n\t\tconst collapsedInputCells: { [key: number]: boolean } = {};\n\t\tconst collapsedOutputCells: { [key: number]: boolean } = {};\n\t\tconst cellLineNumberStates: { [key: number]: 'on' | 'off' } = {};\n\n\t\tthis._viewCells.forEach((cell, i) => {\n\t\t\tif (cell.getEditState() === CellEditState.Editing) {\n\t\t\t\teditingCells[i] = true;\n\t\t\t}\n\n\t\t\tif (cell.isInputCollapsed) {\n\t\t\t\tcollapsedInputCells[i] = true;\n\t\t\t}\n\n\t\t\tif (cell instanceof CodeCellViewModel && cell.isOutputCollapsed) {\n\t\t\t\tcollapsedOutputCells[i] = true;\n\t\t\t}\n\n\t\t\tif (cell.lineNumbers !== 'inherit') {\n\t\t\t\tcellLineNumberStates[i] = cell.lineNumbers;\n\t\t\t}\n\t\t});\n\t\tconst editorViewStates: { [key: number]: editorCommon.ICodeEditorViewState } = {};\n\t\tthis._viewCells.map(cell => ({ handle: cell.model.handle, state: cell.saveEditorViewState() })).forEach((viewState, i) => {\n\t\t\tif (viewState.state) {\n\t\t\t\teditorViewStates[i] = viewState.state;\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\teditingCells,\n\t\t\teditorViewStates,\n\t\t\tcellLineNumberStates,\n\t\t\tcollapsedInputCells,\n\t\t\tcollapsedOutputCells\n\t\t};\n\t}\n\n\trestoreEditorViewState(viewState: INotebookEditorViewState | undefined): void {\n\t\tif (!viewState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._viewCells.forEach((cell, index) => {\n\t\t\tconst isEditing = viewState.editingCells && viewState.editingCells[index];\n\t\t\tconst editorViewState = viewState.editorViewStates && viewState.editorViewStates[index];\n\n\t\t\tcell.updateEditState(isEditing ? CellEditState.Editing : CellEditState.Preview, 'viewState');\n\t\t\tconst cellHeight = viewState.cellTotalHeights ? viewState.cellTotalHeights[index] : undefined;\n\t\t\tcell.restoreEditorViewState(editorViewState, cellHeight);\n\t\t\tif (viewState.collapsedInputCells && viewState.collapsedInputCells[index]) {\n\t\t\t\tcell.isInputCollapsed = true;\n\t\t\t}\n\t\t\tif (viewState.collapsedOutputCells && viewState.collapsedOutputCells[index] && cell instanceof CodeCellViewModel) {\n\t\t\t\tcell.isOutputCollapsed = true;\n\t\t\t}\n\t\t\tif (viewState.cellLineNumberStates && viewState.cellLineNumberStates[index]) {\n\t\t\t\tcell.lineNumbers = viewState.cellLineNumberStates[index];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Editor decorations across cells. For example, find decorations for multiple code cells\n\t * The reason that we can't completely delegate this to CodeEditorWidget is most of the time, the editors for cells are not created yet but we already have decorations for them.\n\t */\n\tchangeModelDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): T | null {\n\t\tconst changeAccessor: IModelDecorationsChangeAccessor = {\n\t\t\tdeltaDecorations: (oldDecorations: ICellModelDecorations[], newDecorations: ICellModelDeltaDecorations[]): ICellModelDecorations[] => {\n\t\t\t\treturn this._deltaModelDecorationsImpl(oldDecorations, newDecorations);\n\t\t\t}\n\t\t};\n\n\t\tlet result: T | null = null;\n\t\ttry {\n\t\t\tresult = callback(changeAccessor);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\n\t\tchangeAccessor.deltaDecorations = invalidFunc;\n\n\t\treturn result;\n\t}\n\n\tprivate _deltaModelDecorationsImpl(oldDecorations: ICellModelDecorations[], newDecorations: ICellModelDeltaDecorations[]): ICellModelDecorations[] {\n\n\t\tconst mapping = new Map<number, { cell: CellViewModel; oldDecorations: readonly string[]; newDecorations: readonly IModelDeltaDecoration[] }>();\n\t\toldDecorations.forEach(oldDecoration => {\n\t\t\tconst ownerId = oldDecoration.ownerId;\n\n\t\t\tif (!mapping.has(ownerId)) {\n\t\t\t\tconst cell = this._viewCells.find(cell => cell.handle === ownerId);\n\t\t\t\tif (cell) {\n\t\t\t\t\tmapping.set(ownerId, { cell: cell, oldDecorations: [], newDecorations: [] });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst data = mapping.get(ownerId)!;\n\t\t\tif (data) {\n\t\t\t\tdata.oldDecorations = oldDecoration.decorations;\n\t\t\t}\n\t\t});\n\n\t\tnewDecorations.forEach(newDecoration => {\n\t\t\tconst ownerId = newDecoration.ownerId;\n\n\t\t\tif (!mapping.has(ownerId)) {\n\t\t\t\tconst cell = this._viewCells.find(cell => cell.handle === ownerId);\n\n\t\t\t\tif (cell) {\n\t\t\t\t\tmapping.set(ownerId, { cell: cell, oldDecorations: [], newDecorations: [] });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst data = mapping.get(ownerId)!;\n\t\t\tif (data) {\n\t\t\t\tdata.newDecorations = newDecoration.decorations;\n\t\t\t}\n\t\t});\n\n\t\tconst ret: ICellModelDecorations[] = [];\n\t\tmapping.forEach((value, ownerId) => {\n\t\t\tconst cellRet = value.cell.deltaModelDecorations(value.oldDecorations, value.newDecorations);\n\t\t\tret.push({\n\t\t\t\townerId: ownerId,\n\t\t\t\tdecorations: cellRet\n\t\t\t});\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t//#region Find\n\tfind(value: string, options: INotebookFindOptions): CellFindMatchWithIndex[] {\n\t\tconst matches: CellFindMatchWithIndex[] = [];\n\t\tlet findCells: CellViewModel[] = [];\n\n\t\tif (options.findScope && (options.findScope.findScopeType === NotebookFindScopeType.Cells || options.findScope.findScopeType === NotebookFindScopeType.Text)) {\n\t\t\tconst selectedRanges = options.findScope.selectedCellRanges?.map(range => this.validateRange(range)).filter(range => !!range) ?? [];\n\t\t\tconst selectedIndexes = cellRangesToIndexes(selectedRanges);\n\t\t\tfindCells = selectedIndexes.map(index => this._viewCells[index]);\n\t\t} else {\n\t\t\tfindCells = this._viewCells;\n\t\t}\n\n\t\tfindCells.forEach((cell, index) => {\n\t\t\tconst cellMatches = cell.startFind(value, options);\n\t\t\tif (cellMatches) {\n\t\t\t\tmatches.push(new CellFindMatchModel(\n\t\t\t\t\tcellMatches.cell,\n\t\t\t\t\tindex,\n\t\t\t\t\tcellMatches.contentMatches,\n\t\t\t\t\t[]\n\t\t\t\t));\n\t\t\t}\n\t\t});\n\n\t\t// filter based on options and editing state\n\n\t\treturn matches.filter(match => {\n\t\t\tif (match.cell.cellKind === CellKind.Code) {\n\t\t\t\t// code cell, we only include its match if include input is enabled\n\t\t\t\treturn options.includeCodeInput;\n\t\t\t}\n\n\t\t\t// markup cell, it depends on the editing state\n\t\t\tif (match.cell.getEditState() === CellEditState.Editing) {\n\t\t\t\t// editing, even if we includeMarkupPreview\n\t\t\t\treturn options.includeMarkupInput;\n\t\t\t} else {\n\t\t\t\t// cell in preview mode, we should only include it if includeMarkupPreview is false but includeMarkupInput is true\n\t\t\t\t// if includeMarkupPreview is true, then we should include the webview match result other than this\n\t\t\t\treturn !options.includeMarkupPreview && options.includeMarkupInput;\n\t\t\t}\n\t\t}\n\t\t);\n\t}\n\n\treplaceOne(cell: ICellViewModel, range: Range, text: string): Promise<void> {\n\t\tconst viewCell = cell as CellViewModel;\n\t\tthis._lastNotebookEditResource.push(viewCell.uri);\n\t\treturn viewCell.resolveTextModel().then(() => {\n\t\t\tthis._bulkEditService.apply(\n\t\t\t\t[new ResourceTextEdit(cell.uri, { range, text })],\n\t\t\t\t{ quotableLabel: 'Notebook Replace' }\n\t\t\t);\n\t\t});\n\t}\n\n\tasync replaceAll(matches: CellFindMatchWithIndex[], texts: string[]): Promise<void> {\n\t\tif (!matches.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst textEdits: IWorkspaceTextEdit[] = [];\n\t\tthis._lastNotebookEditResource.push(matches[0].cell.uri);\n\n\t\tmatches.forEach(match => {\n\t\t\tmatch.contentMatches.forEach((singleMatch, index) => {\n\t\t\t\ttextEdits.push({\n\t\t\t\t\tversionId: undefined,\n\t\t\t\t\ttextEdit: { range: (singleMatch as FindMatch).range, text: texts[index] },\n\t\t\t\t\tresource: match.cell.uri\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\treturn Promise.all(matches.map(match => {\n\t\t\treturn match.cell.resolveTextModel();\n\t\t})).then(async () => {\n\t\t\tthis._bulkEditService.apply({ edits: textEdits }, { quotableLabel: 'Notebook Replace All' });\n\t\t\treturn;\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Undo/Redo\n\n\tprivate async _withElement(element: SingleModelEditStackElement | MultiModelEditStackElement, callback: () => Promise<void>) {\n\t\tconst viewCells = this._viewCells.filter(cell => element.matchesResource(cell.uri));\n\t\tconst refs = await Promise.all(viewCells.map(cell => this._textModelService.createModelReference(cell.uri)));\n\t\tawait callback();\n\t\trefs.forEach(ref => ref.dispose());\n\t}\n\n\tasync undo() {\n\n\t\tconst editStack = this._undoService.getElements(this.uri);\n\t\tconst element = editStack.past.length ? editStack.past[editStack.past.length - 1] : undefined;\n\n\t\tif (element && element instanceof SingleModelEditStackElement || element instanceof MultiModelEditStackElement) {\n\t\t\tawait this._withElement(element, async () => {\n\t\t\t\tawait this._undoService.undo(this.uri);\n\t\t\t});\n\n\t\t\treturn (element instanceof SingleModelEditStackElement) ? [element.resource] : element.resources;\n\t\t}\n\n\t\tawait this._undoService.undo(this.uri);\n\t\treturn [];\n\t}\n\n\tasync redo() {\n\n\t\tconst editStack = this._undoService.getElements(this.uri);\n\t\tconst element = editStack.future[0];\n\n\t\tif (element && element instanceof SingleModelEditStackElement || element instanceof MultiModelEditStackElement) {\n\t\t\tawait this._withElement(element, async () => {\n\t\t\t\tawait this._undoService.redo(this.uri);\n\t\t\t});\n\n\t\t\treturn (element instanceof SingleModelEditStackElement) ? [element.resource] : element.resources;\n\t\t}\n\n\t\tawait this._undoService.redo(this.uri);\n\n\t\treturn [];\n\t}\n\n\t//#endregion\n\n\tequal(notebook: NotebookTextModel) {\n\t\treturn this._notebook === notebook;\n\t}\n\n\toverride dispose() {\n\t\tthis._localStore.clear();\n\t\tthis._viewCells.forEach(cell => {\n\t\t\tcell.dispose();\n\t\t});\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport type CellViewModel = (CodeCellViewModel | MarkupCellViewModel) & ICellViewModel;\n\nexport function createCellViewModel(instantiationService: IInstantiationService, notebookViewModel: NotebookViewModel, cell: NotebookCellTextModel, viewContext: ViewContext) {\n\tif (cell.cellKind === CellKind.Code) {\n\t\treturn instantiationService.createInstance(CodeCellViewModel, notebookViewModel.viewType, cell, notebookViewModel.layoutInfo, viewContext);\n\t} else {\n\t\treturn instantiationService.createInstance(MarkupCellViewModel, notebookViewModel.viewType, cell, notebookViewModel.layoutInfo, notebookViewModel, viewContext);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["cell"]
}
