{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookExecutionStateServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { combinedDisposable, Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../../base/common/map.js';\nimport { isEqual } from '../../../../../base/common/resources.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { CellEditType, CellUri, ICellEditOperation, NotebookCellExecutionState, NotebookCellInternalMetadata, NotebookExecutionState, NotebookTextModelWillAddRemoveEvent } from '../../common/notebookCommon.js';\nimport { CellExecutionUpdateType, INotebookExecutionService } from '../../common/notebookExecutionService.js';\nimport { ICellExecuteUpdate, ICellExecutionComplete, ICellExecutionStateChangedEvent, ICellExecutionStateUpdate, IExecutionStateChangedEvent, IFailedCellInfo, INotebookCellExecution, INotebookExecution, INotebookExecutionStateService, INotebookFailStateChangedEvent, NotebookExecutionType } from '../../common/notebookExecutionStateService.js';\nimport { INotebookKernelService } from '../../common/notebookKernelService.js';\nimport { INotebookService } from '../../common/notebookService.js';\n\nexport class NotebookExecutionStateService extends Disposable implements INotebookExecutionStateService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _executions = new ResourceMap<Map<number, CellExecution>>();\n\tprivate readonly _notebookExecutions = new ResourceMap<[NotebookExecution, IDisposable]>();\n\tprivate readonly _notebookListeners = new ResourceMap<NotebookExecutionListeners>();\n\tprivate readonly _cellListeners = new ResourceMap<IDisposable>();\n\tprivate readonly _lastFailedCells = new ResourceMap<IFailedCellInfo>();\n\n\tprivate readonly _onDidChangeExecution = this._register(new Emitter<ICellExecutionStateChangedEvent | IExecutionStateChangedEvent>());\n\tonDidChangeExecution = this._onDidChangeExecution.event;\n\n\tprivate readonly _onDidChangeLastRunFailState = this._register(new Emitter<INotebookFailStateChangedEvent>());\n\tonDidChangeLastRunFailState = this._onDidChangeLastRunFailState.event;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IAccessibilitySignalService private readonly _accessibilitySignalService: IAccessibilitySignalService\n\t) {\n\t\tsuper();\n\t}\n\n\tgetLastFailedCellForNotebook(notebook: URI): number | undefined {\n\t\tconst failedCell = this._lastFailedCells.get(notebook);\n\t\treturn failedCell?.visible ? failedCell.cellHandle : undefined;\n\t}\n\n\tforceCancelNotebookExecutions(notebookUri: URI): void {\n\t\tconst notebookCellExecutions = this._executions.get(notebookUri);\n\t\tif (notebookCellExecutions) {\n\t\t\tfor (const exe of notebookCellExecutions.values()) {\n\t\t\t\tthis._onCellExecutionDidComplete(notebookUri, exe.cellHandle, exe);\n\t\t\t}\n\t\t}\n\t\tif (this._notebookExecutions.has(notebookUri)) {\n\t\t\tthis._onExecutionDidComplete(notebookUri);\n\t\t}\n\t}\n\n\tgetCellExecution(cellUri: URI): INotebookCellExecution | undefined {\n\t\tconst parsed = CellUri.parse(cellUri);\n\t\tif (!parsed) {\n\t\t\tthrow new Error(`Not a cell URI: ${cellUri}`);\n\t\t}\n\n\t\tconst exeMap = this._executions.get(parsed.notebook);\n\t\tif (exeMap) {\n\t\t\treturn exeMap.get(parsed.handle);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\tgetExecution(notebook: URI): INotebookExecution | undefined {\n\t\treturn this._notebookExecutions.get(notebook)?.[0];\n\t}\n\n\tgetCellExecutionsForNotebook(notebook: URI): INotebookCellExecution[] {\n\t\tconst exeMap = this._executions.get(notebook);\n\t\treturn exeMap ? Array.from(exeMap.values()) : [];\n\t}\n\n\tgetCellExecutionsByHandleForNotebook(notebook: URI): Map<number, INotebookCellExecution> | undefined {\n\t\tconst exeMap = this._executions.get(notebook);\n\t\treturn exeMap ? new Map(exeMap.entries()) : undefined;\n\t}\n\n\tprivate _onCellExecutionDidChange(notebookUri: URI, cellHandle: number, exe: CellExecution): void {\n\t\tthis._onDidChangeExecution.fire(new NotebookCellExecutionEvent(notebookUri, cellHandle, exe));\n\t}\n\n\tprivate _onCellExecutionDidComplete(notebookUri: URI, cellHandle: number, exe: CellExecution, lastRunSuccess?: boolean): void {\n\t\tconst notebookExecutions = this._executions.get(notebookUri);\n\t\tif (!notebookExecutions) {\n\t\t\tthis._logService.debug(`NotebookExecutionStateService#_onCellExecutionDidComplete - unknown notebook ${notebookUri.toString()}`);\n\t\t\treturn;\n\t\t}\n\n\t\texe.dispose();\n\t\tconst cellUri = CellUri.generate(notebookUri, cellHandle);\n\t\tthis._cellListeners.get(cellUri)?.dispose();\n\t\tthis._cellListeners.delete(cellUri);\n\t\tnotebookExecutions.delete(cellHandle);\n\t\tif (notebookExecutions.size === 0) {\n\t\t\tthis._executions.delete(notebookUri);\n\t\t\tthis._notebookListeners.get(notebookUri)?.dispose();\n\t\t\tthis._notebookListeners.delete(notebookUri);\n\t\t}\n\n\t\tif (lastRunSuccess !== undefined) {\n\t\t\tif (lastRunSuccess) {\n\t\t\t\tif (this._executions.size === 0) {\n\t\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.notebookCellCompleted);\n\t\t\t\t}\n\t\t\t\tthis._clearLastFailedCell(notebookUri);\n\t\t\t} else {\n\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.notebookCellFailed);\n\t\t\t\tthis._setLastFailedCell(notebookUri, cellHandle);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChangeExecution.fire(new NotebookCellExecutionEvent(notebookUri, cellHandle));\n\t}\n\n\tprivate _onExecutionDidChange(notebookUri: URI, exe: NotebookExecution): void {\n\t\tthis._onDidChangeExecution.fire(new NotebookExecutionEvent(notebookUri, exe));\n\t}\n\n\tprivate _onExecutionDidComplete(notebookUri: URI): void {\n\t\tconst disposables = this._notebookExecutions.get(notebookUri);\n\t\tif (!Array.isArray(disposables)) {\n\t\t\tthis._logService.debug(`NotebookExecutionStateService#_onCellExecutionDidComplete - unknown notebook ${notebookUri.toString()}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._notebookExecutions.delete(notebookUri);\n\t\tthis._onDidChangeExecution.fire(new NotebookExecutionEvent(notebookUri));\n\t\tdisposables.forEach(d => d.dispose());\n\t}\n\n\tcreateCellExecution(notebookUri: URI, cellHandle: number): INotebookCellExecution {\n\t\tconst notebook = this._notebookService.getNotebookTextModel(notebookUri);\n\t\tif (!notebook) {\n\t\t\tthrow new Error(`Notebook not found: ${notebookUri.toString()}`);\n\t\t}\n\n\t\tlet notebookExecutionMap = this._executions.get(notebookUri);\n\t\tif (!notebookExecutionMap) {\n\t\t\tconst listeners = this._instantiationService.createInstance(NotebookExecutionListeners, notebookUri);\n\t\t\tthis._notebookListeners.set(notebookUri, listeners);\n\n\t\t\tnotebookExecutionMap = new Map<number, CellExecution>();\n\t\t\tthis._executions.set(notebookUri, notebookExecutionMap);\n\t\t}\n\n\t\tlet exe = notebookExecutionMap.get(cellHandle);\n\t\tif (!exe) {\n\t\t\texe = this._createNotebookCellExecution(notebook, cellHandle);\n\t\t\tnotebookExecutionMap.set(cellHandle, exe);\n\t\t\texe.initialize();\n\t\t\tthis._onDidChangeExecution.fire(new NotebookCellExecutionEvent(notebookUri, cellHandle, exe));\n\t\t}\n\n\t\treturn exe;\n\t}\n\tcreateExecution(notebookUri: URI): INotebookExecution {\n\t\tconst notebook = this._notebookService.getNotebookTextModel(notebookUri);\n\t\tif (!notebook) {\n\t\t\tthrow new Error(`Notebook not found: ${notebookUri.toString()}`);\n\t\t}\n\n\t\tif (!this._notebookListeners.has(notebookUri)) {\n\t\t\tconst listeners = this._instantiationService.createInstance(NotebookExecutionListeners, notebookUri);\n\t\t\tthis._notebookListeners.set(notebookUri, listeners);\n\t\t}\n\n\t\tlet info = this._notebookExecutions.get(notebookUri);\n\t\tif (!info) {\n\t\t\tinfo = this._createNotebookExecution(notebook);\n\t\t\tthis._notebookExecutions.set(notebookUri, info);\n\t\t\tthis._onDidChangeExecution.fire(new NotebookExecutionEvent(notebookUri, info[0]));\n\t\t}\n\n\t\treturn info[0];\n\t}\n\n\tprivate _createNotebookCellExecution(notebook: NotebookTextModel, cellHandle: number): CellExecution {\n\t\tconst notebookUri = notebook.uri;\n\t\tconst exe: CellExecution = this._instantiationService.createInstance(CellExecution, cellHandle, notebook);\n\t\tconst disposable = combinedDisposable(\n\t\t\texe.onDidUpdate(() => this._onCellExecutionDidChange(notebookUri, cellHandle, exe)),\n\t\t\texe.onDidComplete(lastRunSuccess => this._onCellExecutionDidComplete(notebookUri, cellHandle, exe, lastRunSuccess)));\n\t\tthis._cellListeners.set(CellUri.generate(notebookUri, cellHandle), disposable);\n\n\t\treturn exe;\n\t}\n\n\tprivate _createNotebookExecution(notebook: NotebookTextModel): [NotebookExecution, IDisposable] {\n\t\tconst notebookUri = notebook.uri;\n\t\tconst exe: NotebookExecution = this._instantiationService.createInstance(NotebookExecution, notebook);\n\t\tconst disposable = combinedDisposable(\n\t\t\texe.onDidUpdate(() => this._onExecutionDidChange(notebookUri, exe)),\n\t\t\texe.onDidComplete(() => this._onExecutionDidComplete(notebookUri)));\n\t\treturn [exe, disposable];\n\t}\n\n\tprivate _setLastFailedCell(notebookURI: URI, cellHandle: number): void {\n\t\tconst prevLastFailedCellInfo = this._lastFailedCells.get(notebookURI);\n\t\tconst notebook = this._notebookService.getNotebookTextModel(notebookURI);\n\t\tif (!notebook) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newLastFailedCellInfo: IFailedCellInfo = {\n\t\t\tcellHandle: cellHandle,\n\t\t\tdisposable: prevLastFailedCellInfo ? prevLastFailedCellInfo.disposable : this._getFailedCellListener(notebook),\n\t\t\tvisible: true\n\t\t};\n\n\t\tthis._lastFailedCells.set(notebookURI, newLastFailedCellInfo);\n\n\t\tthis._onDidChangeLastRunFailState.fire({ visible: true, notebook: notebookURI });\n\t}\n\n\tprivate _setLastFailedCellVisibility(notebookURI: URI, visible: boolean): void {\n\t\tconst lastFailedCellInfo = this._lastFailedCells.get(notebookURI);\n\n\t\tif (lastFailedCellInfo) {\n\t\t\tthis._lastFailedCells.set(notebookURI, {\n\t\t\t\tcellHandle: lastFailedCellInfo.cellHandle,\n\t\t\t\tdisposable: lastFailedCellInfo.disposable,\n\t\t\t\tvisible: visible,\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidChangeLastRunFailState.fire({ visible: visible, notebook: notebookURI });\n\t}\n\n\tprivate _clearLastFailedCell(notebookURI: URI): void {\n\t\tconst lastFailedCellInfo = this._lastFailedCells.get(notebookURI);\n\n\t\tif (lastFailedCellInfo) {\n\t\t\tlastFailedCellInfo.disposable?.dispose();\n\t\t\tthis._lastFailedCells.delete(notebookURI);\n\t\t}\n\n\t\tthis._onDidChangeLastRunFailState.fire({ visible: false, notebook: notebookURI });\n\t}\n\n\tprivate _getFailedCellListener(notebook: NotebookTextModel): IDisposable {\n\t\treturn notebook.onWillAddRemoveCells((e: NotebookTextModelWillAddRemoveEvent) => {\n\t\t\tconst lastFailedCell = this._lastFailedCells.get(notebook.uri)?.cellHandle;\n\t\t\tif (lastFailedCell !== undefined) {\n\t\t\t\tconst lastFailedCellPos = notebook.cells.findIndex(c => c.handle === lastFailedCell);\n\t\t\t\te.rawEvent.changes.forEach(([start, deleteCount, addedCells]) => {\n\t\t\t\t\tif (deleteCount) {\n\t\t\t\t\t\tif (lastFailedCellPos >= start && lastFailedCellPos < start + deleteCount) {\n\t\t\t\t\t\t\tthis._setLastFailedCellVisibility(notebook.uri, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (addedCells.some(cell => cell.handle === lastFailedCell)) {\n\t\t\t\t\t\tthis._setLastFailedCellVisibility(notebook.uri, true);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._executions.forEach(executionMap => {\n\t\t\texecutionMap.forEach(execution => execution.dispose());\n\t\t\texecutionMap.clear();\n\t\t});\n\t\tthis._executions.clear();\n\t\tthis._notebookExecutions.forEach(disposables => {\n\t\t\tdisposables.forEach(d => d.dispose());\n\t\t});\n\t\tthis._notebookExecutions.clear();\n\n\t\tthis._cellListeners.forEach(disposable => disposable.dispose());\n\t\tthis._notebookListeners.forEach(disposable => disposable.dispose());\n\t\tthis._lastFailedCells.forEach(elem => elem.disposable.dispose());\n\t}\n}\n\nclass NotebookCellExecutionEvent implements ICellExecutionStateChangedEvent {\n\treadonly type = NotebookExecutionType.cell;\n\tconstructor(\n\t\treadonly notebook: URI,\n\t\treadonly cellHandle: number,\n\t\treadonly changed?: CellExecution\n\t) { }\n\n\taffectsCell(cell: URI): boolean {\n\t\tconst parsedUri = CellUri.parse(cell);\n\t\treturn !!parsedUri && isEqual(this.notebook, parsedUri.notebook) && this.cellHandle === parsedUri.handle;\n\t}\n\n\taffectsNotebook(notebook: URI): boolean {\n\t\treturn isEqual(this.notebook, notebook);\n\t}\n}\n\nclass NotebookExecutionEvent implements IExecutionStateChangedEvent {\n\treadonly type = NotebookExecutionType.notebook;\n\tconstructor(\n\t\treadonly notebook: URI,\n\t\treadonly changed?: NotebookExecution\n\t) { }\n\n\taffectsNotebook(notebook: URI): boolean {\n\t\treturn isEqual(this.notebook, notebook);\n\t}\n}\n\nclass NotebookExecutionListeners extends Disposable {\n\tprivate readonly _notebookModel: NotebookTextModel;\n\n\tconstructor(\n\t\tnotebook: URI,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@INotebookExecutionService private readonly _notebookExecutionService: INotebookExecutionService,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._logService.debug(`NotebookExecution#ctor ${notebook.toString()}`);\n\n\t\tconst notebookModel = this._notebookService.getNotebookTextModel(notebook);\n\t\tif (!notebookModel) {\n\t\t\tthrow new Error('Notebook not found: ' + notebook);\n\t\t}\n\n\t\tthis._notebookModel = notebookModel;\n\t\tthis._register(this._notebookModel.onWillAddRemoveCells(e => this.onWillAddRemoveCells(e)));\n\t\tthis._register(this._notebookModel.onWillDispose(() => this.onWillDisposeDocument()));\n\t}\n\n\tprivate cancelAll(): void {\n\t\tthis._logService.debug(`NotebookExecutionListeners#cancelAll`);\n\t\tconst exes = this._notebookExecutionStateService.getCellExecutionsForNotebook(this._notebookModel.uri);\n\t\tthis._notebookExecutionService.cancelNotebookCellHandles(this._notebookModel, exes.map(exe => exe.cellHandle));\n\t}\n\n\tprivate onWillDisposeDocument(): void {\n\t\tthis._logService.debug(`NotebookExecution#onWillDisposeDocument`);\n\t\tthis.cancelAll();\n\t}\n\n\tprivate onWillAddRemoveCells(e: NotebookTextModelWillAddRemoveEvent): void {\n\t\tconst notebookExes = this._notebookExecutionStateService.getCellExecutionsByHandleForNotebook(this._notebookModel.uri);\n\n\t\tconst executingDeletedHandles = new Set<number>();\n\t\tconst pendingDeletedHandles = new Set<number>();\n\t\tif (notebookExes) {\n\t\t\te.rawEvent.changes.forEach(([start, deleteCount]) => {\n\t\t\t\tif (deleteCount) {\n\t\t\t\t\tconst deletedHandles = this._notebookModel.cells.slice(start, start + deleteCount).map(c => c.handle);\n\t\t\t\t\tdeletedHandles.forEach(h => {\n\t\t\t\t\t\tconst exe = notebookExes.get(h);\n\t\t\t\t\t\tif (exe?.state === NotebookCellExecutionState.Executing) {\n\t\t\t\t\t\t\texecutingDeletedHandles.add(h);\n\t\t\t\t\t\t} else if (exe) {\n\t\t\t\t\t\t\tpendingDeletedHandles.add(h);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (executingDeletedHandles.size || pendingDeletedHandles.size) {\n\t\t\tconst kernel = this._notebookKernelService.getSelectedOrSuggestedKernel(this._notebookModel);\n\t\t\tif (kernel) {\n\t\t\t\tconst implementsInterrupt = kernel.implementsInterrupt;\n\t\t\t\tconst handlesToCancel = implementsInterrupt ? [...executingDeletedHandles] : [...executingDeletedHandles, ...pendingDeletedHandles];\n\t\t\t\tthis._logService.debug(`NotebookExecution#onWillAddRemoveCells, ${JSON.stringify([...handlesToCancel])}`);\n\t\t\t\tif (handlesToCancel.length) {\n\t\t\t\t\tkernel.cancelNotebookCellExecution(this._notebookModel.uri, handlesToCancel);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction updateToEdit(update: ICellExecuteUpdate, cellHandle: number): ICellEditOperation {\n\tif (update.editType === CellExecutionUpdateType.Output) {\n\t\treturn {\n\t\t\teditType: CellEditType.Output,\n\t\t\thandle: update.cellHandle,\n\t\t\tappend: update.append,\n\t\t\toutputs: update.outputs,\n\t\t};\n\t} else if (update.editType === CellExecutionUpdateType.OutputItems) {\n\t\treturn {\n\t\t\teditType: CellEditType.OutputItems,\n\t\t\titems: update.items,\n\t\t\tappend: update.append,\n\t\t\toutputId: update.outputId\n\t\t};\n\t} else if (update.editType === CellExecutionUpdateType.ExecutionState) {\n\t\tconst newInternalMetadata: Partial<NotebookCellInternalMetadata> = {};\n\t\tif (typeof update.executionOrder !== 'undefined') {\n\t\t\tnewInternalMetadata.executionOrder = update.executionOrder;\n\t\t}\n\t\tif (typeof update.runStartTime !== 'undefined') {\n\t\t\tnewInternalMetadata.runStartTime = update.runStartTime;\n\t\t}\n\t\treturn {\n\t\t\teditType: CellEditType.PartialInternalMetadata,\n\t\t\thandle: cellHandle,\n\t\t\tinternalMetadata: newInternalMetadata\n\t\t};\n\t}\n\n\tthrow new Error('Unknown cell update type');\n}\n\nclass CellExecution extends Disposable implements INotebookCellExecution {\n\tprivate readonly _onDidUpdate = this._register(new Emitter<void>());\n\treadonly onDidUpdate = this._onDidUpdate.event;\n\n\tprivate readonly _onDidComplete = this._register(new Emitter<boolean | undefined>());\n\treadonly onDidComplete = this._onDidComplete.event;\n\n\tprivate _state: NotebookCellExecutionState = NotebookCellExecutionState.Unconfirmed;\n\tget state() {\n\t\treturn this._state;\n\t}\n\n\tget notebook(): URI {\n\t\treturn this._notebookModel.uri;\n\t}\n\n\tprivate _didPause = false;\n\tget didPause() {\n\t\treturn this._didPause;\n\t}\n\n\tprivate _isPaused = false;\n\tget isPaused() {\n\t\treturn this._isPaused;\n\t}\n\n\tconstructor(\n\t\treadonly cellHandle: number,\n\t\tprivate readonly _notebookModel: NotebookTextModel,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._logService.debug(`CellExecution#ctor ${this.getCellLog()}`);\n\t}\n\n\tinitialize() {\n\t\tconst startExecuteEdit: ICellEditOperation = {\n\t\t\teditType: CellEditType.PartialInternalMetadata,\n\t\t\thandle: this.cellHandle,\n\t\t\tinternalMetadata: {\n\t\t\t\texecutionId: generateUuid(),\n\t\t\t\trunStartTime: null,\n\t\t\t\trunEndTime: null,\n\t\t\t\tlastRunSuccess: null,\n\t\t\t\texecutionOrder: null,\n\t\t\t\trenderDuration: null,\n\t\t\t}\n\t\t};\n\t\tthis._applyExecutionEdits([startExecuteEdit]);\n\t}\n\n\tprivate getCellLog(): string {\n\t\treturn `${this._notebookModel.uri.toString()}, ${this.cellHandle}`;\n\t}\n\n\tprivate logUpdates(updates: ICellExecuteUpdate[]): void {\n\t\tconst updateTypes = updates.map(u => CellExecutionUpdateType[u.editType]).join(', ');\n\t\tthis._logService.debug(`CellExecution#updateExecution ${this.getCellLog()}, [${updateTypes}]`);\n\t}\n\n\tconfirm() {\n\t\tthis._logService.debug(`CellExecution#confirm ${this.getCellLog()}`);\n\t\tthis._state = NotebookCellExecutionState.Pending;\n\t\tthis._onDidUpdate.fire();\n\t}\n\n\tupdate(updates: ICellExecuteUpdate[]): void {\n\t\tthis.logUpdates(updates);\n\t\tif (updates.some(u => u.editType === CellExecutionUpdateType.ExecutionState)) {\n\t\t\tthis._state = NotebookCellExecutionState.Executing;\n\t\t}\n\n\t\tif (!this._didPause && updates.some(u => u.editType === CellExecutionUpdateType.ExecutionState && u.didPause)) {\n\t\t\tthis._didPause = true;\n\t\t}\n\n\t\tconst lastIsPausedUpdate = [...updates].reverse().find(u => u.editType === CellExecutionUpdateType.ExecutionState && typeof u.isPaused === 'boolean');\n\t\tif (lastIsPausedUpdate) {\n\t\t\tthis._isPaused = (lastIsPausedUpdate as ICellExecutionStateUpdate).isPaused!;\n\t\t}\n\n\t\tconst cellModel = this._notebookModel.cells.find(c => c.handle === this.cellHandle);\n\t\tif (!cellModel) {\n\t\t\tthis._logService.debug(`CellExecution#update, updating cell not in notebook: ${this._notebookModel.uri.toString()}, ${this.cellHandle}`);\n\t\t} else {\n\t\t\tconst edits = updates.map(update => updateToEdit(update, this.cellHandle));\n\t\t\tthis._applyExecutionEdits(edits);\n\t\t}\n\n\t\tif (updates.some(u => u.editType === CellExecutionUpdateType.ExecutionState)) {\n\t\t\tthis._onDidUpdate.fire();\n\t\t}\n\t}\n\n\tcomplete(completionData: ICellExecutionComplete): void {\n\t\tconst cellModel = this._notebookModel.cells.find(c => c.handle === this.cellHandle);\n\t\tif (!cellModel) {\n\t\t\tthis._logService.debug(`CellExecution#complete, completing cell not in notebook: ${this._notebookModel.uri.toString()}, ${this.cellHandle}`);\n\t\t} else {\n\t\t\tconst edit: ICellEditOperation = {\n\t\t\t\teditType: CellEditType.PartialInternalMetadata,\n\t\t\t\thandle: this.cellHandle,\n\t\t\t\tinternalMetadata: {\n\t\t\t\t\tlastRunSuccess: completionData.lastRunSuccess,\n\t\t\t\t\trunStartTime: this._didPause ? null : cellModel.internalMetadata.runStartTime,\n\t\t\t\t\trunEndTime: this._didPause ? null : completionData.runEndTime,\n\t\t\t\t\terror: completionData.error\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._applyExecutionEdits([edit]);\n\t\t}\n\n\t\tthis._onDidComplete.fire(completionData.lastRunSuccess);\n\t}\n\n\tprivate _applyExecutionEdits(edits: ICellEditOperation[]): void {\n\t\tthis._notebookModel.applyEdits(edits, true, undefined, () => undefined, undefined, false);\n\t}\n}\n\nclass NotebookExecution extends Disposable implements INotebookExecution {\n\tprivate readonly _onDidUpdate = this._register(new Emitter<void>());\n\treadonly onDidUpdate = this._onDidUpdate.event;\n\n\tprivate readonly _onDidComplete = this._register(new Emitter<void>());\n\treadonly onDidComplete = this._onDidComplete.event;\n\n\tprivate _state: NotebookExecutionState = NotebookExecutionState.Unconfirmed;\n\tget state() {\n\t\treturn this._state;\n\t}\n\n\tget notebook(): URI {\n\t\treturn this._notebookModel.uri;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _notebookModel: NotebookTextModel,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._logService.debug(`NotebookExecution#ctor`);\n\t}\n\tprivate debug(message: string) {\n\t\tthis._logService.debug(`${message} ${this._notebookModel.uri.toString()}`);\n\t}\n\n\tconfirm() {\n\t\tthis.debug(`Execution#confirm`);\n\t\tthis._state = NotebookExecutionState.Pending;\n\t\tthis._onDidUpdate.fire();\n\t}\n\n\tbegin(): void {\n\t\tthis.debug(`Execution#begin`);\n\t\tthis._state = NotebookExecutionState.Executing;\n\t\tthis._onDidUpdate.fire();\n\t}\n\n\tcomplete(): void {\n\t\tthis.debug(`Execution#begin`);\n\t\tthis._state = NotebookExecutionState.Unconfirmed;\n\t\tthis._onDidComplete.fire();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
