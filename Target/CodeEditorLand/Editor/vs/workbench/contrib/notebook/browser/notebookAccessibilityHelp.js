import"../../../../platform/instantiation/common/instantiation.js";import"../../../../platform/accessibility/browser/accessibleViewRegistry.js";import{IS_COMPOSITE_NOTEBOOK as c,NOTEBOOK_EDITOR_FOCUSED as r}from"../common/notebookContextKeys.js";import{localize as e}from"../../../../nls.js";import"../../../../editor/browser/editorBrowser.js";import{AccessibleViewProviderId as s,AccessibleViewType as i,AccessibleContentProvider as d}from"../../../../platform/accessibility/browser/accessibleView.js";import{AccessibilityVerbositySettingId as u}from"../../accessibility/browser/accessibilityConfiguration.js";import{IEditorService as b}from"../../../services/editor/common/editorService.js";import"../../../common/editor.js";import{ICodeEditorService as l}from"../../../../editor/browser/services/codeEditorService.js";import{ContextKeyExpr as a}from"../../../../platform/contextkey/common/contextkey.js";class N{priority=105;name="notebook";when=a.and(r,c.negate());type=i.Help;getProvider(o){const t=o.get(l).getActiveCodeEditor()||o.get(l).getFocusedCodeEditor()||o.get(b).activeEditorPane;if(t)return p(o,t)}}function m(){return[e("notebook.overview","The notebook view is a collection of code and markdown cells. Code cells can be executed and will produce output directly below the cell."),e("notebook.cell.edit","The Edit Cell command{0} will focus on the cell input.","<keybinding:notebook.cell.edit>"),e("notebook.cell.quitEdit","The Quit Edit command{0} will set focus on the cell container. The default (Escape) key may need to be pressed twice first exit the virtual cursor if active.","<keybinding:notebook.cell.quitEdit>"),e("notebook.cell.focusInOutput","The Focus Output command{0} will set focus in the cell's output.","<keybinding:notebook.cell.focusInOutput>"),e("notebook.focusNextEditor","The Focus Next Cell Editor command{0} will set focus in the next cell's editor.","<keybinding:notebook.focusNextEditor>"),e("notebook.focusPreviousEditor","The Focus Previous Cell Editor command{0} will set focus in the previous cell's editor.","<keybinding:notebook.focusPreviousEditor>"),e("notebook.cellNavigation","The up and down arrows will also move focus between cells while focused on the outer cell container."),e("notebook.cell.executeAndFocusContainer","The Execute Cell command{0} executes the cell that currently has focus.","<keybinding:notebook.cell.executeAndFocusContainer>"),e("notebook.cell.insertCodeCellBelowAndFocusContainer","The Insert Cell Above{0} and Below{1} commands will create new empty code cells.","<keybinding:notebook.cell.insertCodeCellAbove>","<keybinding:notebook.cell.insertCodeCellBelow>"),e("notebook.changeCellType","The Change Cell to Code/Markdown commands are used to switch between cell types.")].join(`
`)}function p(n,o){const t=m();return new d(s.Notebook,{type:i.Help},()=>t,()=>o.focus(),u.Notebook)}export{N as NotebookAccessibilityHelp};
