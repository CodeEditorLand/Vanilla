{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/sectionActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from \"../../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport { ContextKeyExpr } from \"../../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { OutlineTarget } from \"../../../../services/outline/browser/outline.js\";\nimport { CellKind } from \"../../common/notebookCommon.js\";\nimport { NotebookOutlineContext } from \"../contrib/outline/notebookOutline.js\";\nimport { CellFoldingState, type INotebookEditor } from \"../notebookBrowser.js\";\nimport * as icons from \"../notebookIcons.js\";\nimport type { OutlineEntry } from \"../viewModel/OutlineEntry.js\";\nimport { FoldingController } from \"./foldingController.js\";\n\nexport type NotebookSectionArgs = {\n\tnotebookEditor: INotebookEditor | undefined;\n\toutlineEntry: OutlineEntry;\n};\n\nexport type ValidNotebookSectionArgs = {\n\tnotebookEditor: INotebookEditor;\n\toutlineEntry: OutlineEntry;\n};\n\nexport class NotebookRunSingleCellInSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"notebook.section.runSingleCell\",\n\t\t\ttitle: {\n\t\t\t\t...localize2(\"runCell\", \"Run Cell\"),\n\t\t\t\tmnemonicTitle: localize(\n\t\t\t\t\t{ key: \"mirunCell\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Run Cell\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tshortTitle: localize(\"runCell\", \"Run Cell\"),\n\t\t\ticon: icons.executeIcon,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: \"inline\",\n\t\t\t\t\torder: 1,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(\n\t\t\t\t\t\t\tCellKind.Code,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(\n\t\t\t\t\t\t\tOutlineTarget.OutlinePane,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren.toNegated(),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader.toNegated(),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\toverride async run(\n\t\t_accessor: ServicesAccessor,\n\t\tcontext: NotebookSectionArgs,\n\t): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontext.notebookEditor.executeNotebookCells([\n\t\t\tcontext.outlineEntry.cell,\n\t\t]);\n\t}\n}\n\nexport class NotebookRunCellsInSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"notebook.section.runCells\",\n\t\t\ttitle: {\n\t\t\t\t...localize2(\"runCellsInSection\", \"Run Cells In Section\"),\n\t\t\t\tmnemonicTitle: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"mirunCellsInSection\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Run Cells In Section\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tshortTitle: localize(\"runCellsInSection\", \"Run Cells In Section\"),\n\t\t\t// icon: icons.executeBelowIcon, // TODO @Yoyokrazy replace this with new icon later\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookStickyScrollContext,\n\t\t\t\t\tgroup: \"notebookExecution\",\n\t\t\t\t\torder: 1,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: \"inline\",\n\t\t\t\t\torder: 1,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(\n\t\t\t\t\t\t\tCellKind.Markup,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(\n\t\t\t\t\t\t\tOutlineTarget.OutlinePane,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren,\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\toverride async run(\n\t\t_accessor: ServicesAccessor,\n\t\tcontext: NotebookSectionArgs,\n\t): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cell = context.outlineEntry.cell;\n\t\tconst idx = context.notebookEditor.getViewModel()?.getCellIndex(cell);\n\t\tif (idx === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tconst length = context.notebookEditor\n\t\t\t.getViewModel()\n\t\t\t?.getFoldedLength(idx);\n\t\tif (length === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cells = context.notebookEditor.getCellsInRange({\n\t\t\tstart: idx,\n\t\t\tend: idx + length + 1,\n\t\t});\n\t\tcontext.notebookEditor.executeNotebookCells(cells);\n\t}\n}\n\nexport class NotebookFoldSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"notebook.section.foldSection\",\n\t\t\ttitle: {\n\t\t\t\t...localize2(\"foldSection\", \"Fold Section\"),\n\t\t\t\tmnemonicTitle: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"mifoldSection\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Fold Section\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tshortTitle: localize(\"foldSection\", \"Fold Section\"),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: \"notebookFolding\",\n\t\t\t\t\torder: 2,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(\n\t\t\t\t\t\t\tCellKind.Markup,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(\n\t\t\t\t\t\t\tOutlineTarget.OutlinePane,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren,\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader,\n\t\t\t\t\t\tNotebookOutlineContext.CellFoldingState.isEqualTo(\n\t\t\t\t\t\t\tCellFoldingState.Expanded,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\toverride async run(\n\t\t_accessor: ServicesAccessor,\n\t\tcontext: NotebookSectionArgs,\n\t): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.toggleFoldRange(context.outlineEntry, context.notebookEditor);\n\t}\n\n\tprivate toggleFoldRange(\n\t\tentry: OutlineEntry,\n\t\tnotebookEditor: INotebookEditor,\n\t) {\n\t\tconst foldingController =\n\t\t\tnotebookEditor.getContribution<FoldingController>(\n\t\t\t\tFoldingController.id,\n\t\t\t);\n\t\tconst index = entry.index;\n\t\tconst headerLevel = entry.level;\n\t\tconst newFoldingState = CellFoldingState.Collapsed;\n\n\t\tfoldingController.setFoldingStateDown(\n\t\t\tindex,\n\t\t\tnewFoldingState,\n\t\t\theaderLevel,\n\t\t);\n\t}\n}\n\nexport class NotebookExpandSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"notebook.section.expandSection\",\n\t\t\ttitle: {\n\t\t\t\t...localize2(\"expandSection\", \"Expand Section\"),\n\t\t\t\tmnemonicTitle: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"miexpandSection\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Expand Section\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tshortTitle: localize(\"expandSection\", \"Expand Section\"),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: \"notebookFolding\",\n\t\t\t\t\torder: 2,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(\n\t\t\t\t\t\t\tCellKind.Markup,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(\n\t\t\t\t\t\t\tOutlineTarget.OutlinePane,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren,\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader,\n\t\t\t\t\t\tNotebookOutlineContext.CellFoldingState.isEqualTo(\n\t\t\t\t\t\t\tCellFoldingState.Collapsed,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\toverride async run(\n\t\t_accessor: ServicesAccessor,\n\t\tcontext: NotebookSectionArgs,\n\t): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.toggleFoldRange(context.outlineEntry, context.notebookEditor);\n\t}\n\n\tprivate toggleFoldRange(\n\t\tentry: OutlineEntry,\n\t\tnotebookEditor: INotebookEditor,\n\t) {\n\t\tconst foldingController =\n\t\t\tnotebookEditor.getContribution<FoldingController>(\n\t\t\t\tFoldingController.id,\n\t\t\t);\n\t\tconst index = entry.index;\n\t\tconst headerLevel = entry.level;\n\t\tconst newFoldingState = CellFoldingState.Expanded;\n\n\t\tfoldingController.setFoldingStateDown(\n\t\t\tindex,\n\t\t\tnewFoldingState,\n\t\t\theaderLevel,\n\t\t);\n\t}\n}\n\n/**\n * Take in context args and check if they exist\n *\n * @param context - Notebook Section Context containing a notebook editor and outline entry\n * @returns true if context is valid, false otherwise\n */\nfunction checkSectionContext(\n\tcontext: NotebookSectionArgs,\n): context is ValidNotebookSectionArgs {\n\treturn !!(context && context.notebookEditor && context.outlineEntry);\n}\n\nregisterAction2(NotebookRunSingleCellInSection);\nregisterAction2(NotebookRunCellsInSection);\nregisterAction2(NotebookFoldSection);\nregisterAction2(NotebookExpandSection);\n"],
  "mappings": "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",
  "names": []
}
