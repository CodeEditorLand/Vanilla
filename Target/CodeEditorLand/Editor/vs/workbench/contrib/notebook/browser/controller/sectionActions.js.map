{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/sectionActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { NotebookOutlineContext } from '../contrib/outline/notebookOutline.js';\nimport { FoldingController } from './foldingController.js';\nimport { CellFoldingState, INotebookEditor } from '../notebookBrowser.js';\nimport * as icons from '../notebookIcons.js';\nimport { OutlineEntry } from '../viewModel/OutlineEntry.js';\nimport { CellKind } from '../../common/notebookCommon.js';\nimport { OutlineTarget } from '../../../../services/outline/browser/outline.js';\n\nexport type NotebookSectionArgs = {\n\tnotebookEditor: INotebookEditor | undefined;\n\toutlineEntry: OutlineEntry;\n};\n\nexport type ValidNotebookSectionArgs = {\n\tnotebookEditor: INotebookEditor;\n\toutlineEntry: OutlineEntry;\n};\n\nexport class NotebookRunSingleCellInSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.section.runSingleCell',\n\t\t\ttitle: {\n\t\t\t\t...localize2('runCell', \"Run Cell\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mirunCell', comment: ['&& denotes a mnemonic'] }, \"&&Run Cell\"),\n\t\t\t},\n\t\t\tshortTitle: localize('runCell', \"Run Cell\"),\n\t\t\ticon: icons.executeIcon,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: 'inline',\n\t\t\t\t\torder: 1,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(CellKind.Code),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(OutlineTarget.OutlinePane),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren.toNegated(),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader.toNegated(),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\toverride async run(_accessor: ServicesAccessor, context: NotebookSectionArgs): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontext.notebookEditor.executeNotebookCells([context.outlineEntry.cell]);\n\t}\n}\n\nexport class NotebookRunCellsInSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.section.runCells',\n\t\t\ttitle: {\n\t\t\t\t...localize2('runCellsInSection', \"Run Cells In Section\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mirunCellsInSection', comment: ['&& denotes a mnemonic'] }, \"&&Run Cells In Section\"),\n\t\t\t},\n\t\t\tshortTitle: localize('runCellsInSection', \"Run Cells In Section\"),\n\t\t\t// icon: icons.executeBelowIcon, // TODO @Yoyokrazy replace this with new icon later\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookStickyScrollContext,\n\t\t\t\t\tgroup: 'notebookExecution',\n\t\t\t\t\torder: 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: 'inline',\n\t\t\t\t\torder: 1,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(CellKind.Markup),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(OutlineTarget.OutlinePane),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren,\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\toverride async run(_accessor: ServicesAccessor, context: NotebookSectionArgs): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cell = context.outlineEntry.cell;\n\t\tconst idx = context.notebookEditor.getViewModel()?.getCellIndex(cell);\n\t\tif (idx === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tconst length = context.notebookEditor.getViewModel()?.getFoldedLength(idx);\n\t\tif (length === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cells = context.notebookEditor.getCellsInRange({ start: idx, end: idx + length + 1 });\n\t\tcontext.notebookEditor.executeNotebookCells(cells);\n\t}\n}\n\nexport class NotebookFoldSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.section.foldSection',\n\t\t\ttitle: {\n\t\t\t\t...localize2('foldSection', \"Fold Section\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mifoldSection', comment: ['&& denotes a mnemonic'] }, \"&&Fold Section\"),\n\t\t\t},\n\t\t\tshortTitle: localize('foldSection', \"Fold Section\"),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: 'notebookFolding',\n\t\t\t\t\torder: 2,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(CellKind.Markup),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(OutlineTarget.OutlinePane),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren,\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader,\n\t\t\t\t\t\tNotebookOutlineContext.CellFoldingState.isEqualTo(CellFoldingState.Expanded)\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\toverride async run(_accessor: ServicesAccessor, context: NotebookSectionArgs): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.toggleFoldRange(context.outlineEntry, context.notebookEditor);\n\t}\n\n\tprivate toggleFoldRange(entry: OutlineEntry, notebookEditor: INotebookEditor) {\n\t\tconst foldingController = notebookEditor.getContribution<FoldingController>(FoldingController.id);\n\t\tconst index = entry.index;\n\t\tconst headerLevel = entry.level;\n\t\tconst newFoldingState = CellFoldingState.Collapsed;\n\n\t\tfoldingController.setFoldingStateDown(index, newFoldingState, headerLevel);\n\t}\n}\n\nexport class NotebookExpandSection extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.section.expandSection',\n\t\t\ttitle: {\n\t\t\t\t...localize2('expandSection', \"Expand Section\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'miexpandSection', comment: ['&& denotes a mnemonic'] }, \"&&Expand Section\"),\n\t\t\t},\n\t\t\tshortTitle: localize('expandSection', \"Expand Section\"),\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.NotebookOutlineActionMenu,\n\t\t\t\t\tgroup: 'notebookFolding',\n\t\t\t\t\torder: 2,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tNotebookOutlineContext.CellKind.isEqualTo(CellKind.Markup),\n\t\t\t\t\t\tNotebookOutlineContext.OutlineElementTarget.isEqualTo(OutlineTarget.OutlinePane),\n\t\t\t\t\t\tNotebookOutlineContext.CellHasChildren,\n\t\t\t\t\t\tNotebookOutlineContext.CellHasHeader,\n\t\t\t\t\t\tNotebookOutlineContext.CellFoldingState.isEqualTo(CellFoldingState.Collapsed)\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\toverride async run(_accessor: ServicesAccessor, context: NotebookSectionArgs): Promise<void> {\n\t\tif (!checkSectionContext(context)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.toggleFoldRange(context.outlineEntry, context.notebookEditor);\n\t}\n\n\tprivate toggleFoldRange(entry: OutlineEntry, notebookEditor: INotebookEditor) {\n\t\tconst foldingController = notebookEditor.getContribution<FoldingController>(FoldingController.id);\n\t\tconst index = entry.index;\n\t\tconst headerLevel = entry.level;\n\t\tconst newFoldingState = CellFoldingState.Expanded;\n\n\t\tfoldingController.setFoldingStateDown(index, newFoldingState, headerLevel);\n\t}\n}\n\n/**\n * Take in context args and check if they exist\n *\n * @param context - Notebook Section Context containing a notebook editor and outline entry\n * @returns true if context is valid, false otherwise\n */\nfunction checkSectionContext(context: NotebookSectionArgs): context is ValidNotebookSectionArgs {\n\treturn !!(context && context.notebookEditor && context.outlineEntry);\n}\n\nregisterAction2(NotebookRunSingleCellInSection);\nregisterAction2(NotebookRunCellsInSection);\nregisterAction2(NotebookFoldSection);\nregisterAction2(NotebookExpandSection);\n"],
  "mappings": "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",
  "names": []
}
