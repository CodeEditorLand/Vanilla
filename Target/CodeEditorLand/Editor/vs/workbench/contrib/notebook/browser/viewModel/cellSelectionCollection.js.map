{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/viewModel/cellSelectionCollection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport type { ICellRange } from \"../../common/notebookRange.js\";\n\nfunction rangesEqual(a: ICellRange[], b: ICellRange[]) {\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i].start !== b[i].start || a[i].end !== b[i].end) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n// Challenge is List View talks about `element`, which needs extra work to convert to ICellRange as we support Folding and Cell Move\nexport class NotebookCellSelectionCollection extends Disposable {\n\tprivate readonly _onDidChangeSelection = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\tget onDidChangeSelection(): Event<string> {\n\t\treturn this._onDidChangeSelection.event;\n\t}\n\n\tprivate _primary: ICellRange | null = null;\n\n\tprivate _selections: ICellRange[] = [];\n\n\tget selections(): ICellRange[] {\n\t\treturn this._selections;\n\t}\n\n\tget focus(): ICellRange {\n\t\treturn this._primary ?? { start: 0, end: 0 };\n\t}\n\n\tsetState(\n\t\tprimary: ICellRange | null,\n\t\tselections: ICellRange[],\n\t\tforceEventEmit: boolean,\n\t\tsource: \"view\" | \"model\",\n\t) {\n\t\tconst changed =\n\t\t\tprimary !== this._primary ||\n\t\t\t!rangesEqual(this._selections, selections);\n\n\t\tthis._primary = primary;\n\t\tthis._selections = selections;\n\t\tif (changed || forceEventEmit) {\n\t\t\tthis._onDidChangeSelection.fire(source);\n\t\t}\n\t}\n\n\tsetSelections(\n\t\tselections: ICellRange[],\n\t\tforceEventEmit: boolean,\n\t\tsource: \"view\" | \"model\",\n\t) {\n\t\tthis.setState(this._primary, selections, forceEventEmit, source);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAG3B,SAAS,YAAY,GAAiB,GAAiB;AACtD,MAAI,EAAE,WAAW,EAAE,QAAQ;AAC1B,WAAO;AAAA,EACR;AAEA,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAClC,QAAI,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK;AACvD,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAZS;AAeF,MAAM,wCAAwC,WAAW;AAAA,EAxBhE,OAwBgE;AAAA;AAAA;AAAA,EAC9C,wBAAwB,KAAK;AAAA,IAC7C,IAAI,QAAgB;AAAA,EACrB;AAAA,EACA,IAAI,uBAAsC;AACzC,WAAO,KAAK,sBAAsB;AAAA,EACnC;AAAA,EAEQ,WAA8B;AAAA,EAE9B,cAA4B,CAAC;AAAA,EAErC,IAAI,aAA2B;AAC9B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,QAAoB;AACvB,WAAO,KAAK,YAAY,EAAE,OAAO,GAAG,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,SACC,SACA,YACA,gBACA,QACC;AACD,UAAM,UACL,YAAY,KAAK,YACjB,CAAC,YAAY,KAAK,aAAa,UAAU;AAE1C,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,QAAI,WAAW,gBAAgB;AAC9B,WAAK,sBAAsB,KAAK,MAAM;AAAA,IACvC;AAAA,EACD;AAAA,EAEA,cACC,YACA,gBACA,QACC;AACD,SAAK,SAAS,KAAK,UAAU,YAAY,gBAAgB,MAAM;AAAA,EAChE;AACD;",
  "names": []
}
