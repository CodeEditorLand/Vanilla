{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tRunOnceScheduler,\n\tdisposableTimeout,\n} from \"../../../../../../base/common/async.js\";\nimport type { IMarkdownString } from \"../../../../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n\tdispose,\n} from \"../../../../../../base/common/lifecycle.js\";\nimport { language } from \"../../../../../../base/common/platform.js\";\nimport { ThemeIcon } from \"../../../../../../base/common/themables.js\";\nimport { localize } from \"../../../../../../nls.js\";\nimport { IInstantiationService } from \"../../../../../../platform/instantiation/common/instantiation.js\";\nimport { themeColorFromId } from \"../../../../../../platform/theme/common/themeService.js\";\nimport {\n\tCellStatusbarAlignment,\n\ttype INotebookCellStatusBarItem,\n\tNotebookCellExecutionState,\n\ttype NotebookCellInternalMetadata,\n} from \"../../../common/notebookCommon.js\";\nimport {\n\ttype INotebookCellExecution,\n\tINotebookExecutionStateService,\n\tNotebookExecutionType,\n} from \"../../../common/notebookExecutionStateService.js\";\nimport { INotebookService } from \"../../../common/notebookService.js\";\nimport type {\n\tICellViewModel,\n\tINotebookEditor,\n\tINotebookEditorContribution,\n\tINotebookViewModel,\n} from \"../../notebookBrowser.js\";\nimport { registerNotebookContribution } from \"../../notebookEditorExtensions.js\";\nimport {\n\tcellStatusIconError,\n\tcellStatusIconSuccess,\n} from \"../../notebookEditorWidget.js\";\nimport {\n\terrorStateIcon,\n\texecutingStateIcon,\n\tpendingStateIcon,\n\tsuccessStateIcon,\n} from \"../../notebookIcons.js\";\nimport {\n\ttype ICellVisibilityChangeEvent,\n\tNotebookVisibleCellObserver,\n} from \"./notebookVisibleCellObserver.js\";\n\nexport function formatCellDuration(\n\tduration: number,\n\tshowMilliseconds = true,\n): string {\n\tif (showMilliseconds && duration < 1000) {\n\t\treturn `${duration}ms`;\n\t}\n\n\tconst minutes = Math.floor(duration / 1000 / 60);\n\tconst seconds = Math.floor(duration / 1000) % 60;\n\tconst tenths = Math.floor((duration % 1000) / 100);\n\n\tif (minutes > 0) {\n\t\treturn `${minutes}m ${seconds}.${tenths}s`;\n\t} else {\n\t\treturn `${seconds}.${tenths}s`;\n\t}\n}\n\nexport class NotebookStatusBarController extends Disposable {\n\tprivate readonly _visibleCells = new Map<number, IDisposable>();\n\tprivate readonly _observer: NotebookVisibleCellObserver;\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\tprivate readonly _itemFactory: (\n\t\t\tvm: INotebookViewModel,\n\t\t\tcell: ICellViewModel,\n\t\t) => IDisposable,\n\t) {\n\t\tsuper();\n\t\tthis._observer = this._register(\n\t\t\tnew NotebookVisibleCellObserver(this._notebookEditor),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._observer.onDidChangeVisibleCells(\n\t\t\t\tthis._updateVisibleCells,\n\t\t\t\tthis,\n\t\t\t),\n\t\t);\n\n\t\tthis._updateEverything();\n\t}\n\n\tprivate _updateEverything(): void {\n\t\tthis._visibleCells.forEach(dispose);\n\t\tthis._visibleCells.clear();\n\t\tthis._updateVisibleCells({\n\t\t\tadded: this._observer.visibleCells,\n\t\t\tremoved: [],\n\t\t});\n\t}\n\n\tprivate _updateVisibleCells(e: ICellVisibilityChangeEvent): void {\n\t\tconst vm = this._notebookEditor.getViewModel();\n\t\tif (!vm) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const oldCell of e.removed) {\n\t\t\tthis._visibleCells.get(oldCell.handle)?.dispose();\n\t\t\tthis._visibleCells.delete(oldCell.handle);\n\t\t}\n\n\t\tfor (const newCell of e.added) {\n\t\t\tthis._visibleCells.set(\n\t\t\t\tnewCell.handle,\n\t\t\t\tthis._itemFactory(vm, newCell),\n\t\t\t);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._visibleCells.forEach(dispose);\n\t\tthis._visibleCells.clear();\n\t}\n}\n\nexport class ExecutionStateCellStatusBarContrib\n\textends Disposable\n\timplements INotebookEditorContribution\n{\n\tstatic id = \"workbench.notebook.statusBar.execState\";\n\n\tconstructor(\n\t\tnotebookEditor: INotebookEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tnew NotebookStatusBarController(notebookEditor, (vm, cell) =>\n\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\tExecutionStateCellStatusBarItem,\n\t\t\t\t\tvm,\n\t\t\t\t\tcell,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n}\nregisterNotebookContribution(\n\tExecutionStateCellStatusBarContrib.id,\n\tExecutionStateCellStatusBarContrib,\n);\n\n/**\n * Shows the cell's execution state in the cell status bar. When the \"executing\" state is shown, it will be shown for a minimum brief time.\n */\nclass ExecutionStateCellStatusBarItem extends Disposable {\n\tprivate static readonly MIN_SPINNER_TIME = 500;\n\n\tprivate _currentItemIds: string[] = [];\n\n\tprivate _showedExecutingStateTime: number | undefined;\n\tprivate readonly _clearExecutingStateTimer = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly _notebookViewModel: INotebookViewModel,\n\t\tprivate readonly _cell: ICellViewModel,\n\t\t@INotebookExecutionStateService private readonly _executionStateService: INotebookExecutionStateService\n\t) {\n\t\tsuper();\n\n\t\tthis._update();\n\t\tthis._register(this._executionStateService.onDidChangeExecution(e => {\n\t\t\tif (e.type === NotebookExecutionType.cell && e.affectsCell(this._cell.uri)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._cell.model.onDidChangeInternalMetadata(() => this._update()));\n\t}\n\n\tprivate async _update() {\n\t\tconst items = this._getItemsForCell();\n\t\tif (Array.isArray(items)) {\n\t\t\tthis._currentItemIds =\n\t\t\t\tthis._notebookViewModel.deltaCellStatusBarItems(\n\t\t\t\t\tthis._currentItemIds,\n\t\t\t\t\t[{ handle: this._cell.handle, items }],\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t *\tReturns undefined if there should be no change, and an empty array if all items should be removed.\n\t */\n\tprivate _getItemsForCell(): INotebookCellStatusBarItem[] | undefined {\n\t\tconst runState = this._executionStateService.getCellExecution(\n\t\t\tthis._cell.uri,\n\t\t);\n\n\t\t// Show the execution spinner for a minimum time\n\t\tif (\n\t\t\trunState?.state === NotebookCellExecutionState.Executing &&\n\t\t\ttypeof this._showedExecutingStateTime !== \"number\"\n\t\t) {\n\t\t\tthis._showedExecutingStateTime = Date.now();\n\t\t} else if (\n\t\t\trunState?.state !== NotebookCellExecutionState.Executing &&\n\t\t\ttypeof this._showedExecutingStateTime === \"number\"\n\t\t) {\n\t\t\tconst timeUntilMin =\n\t\t\t\tExecutionStateCellStatusBarItem.MIN_SPINNER_TIME -\n\t\t\t\t(Date.now() - this._showedExecutingStateTime);\n\t\t\tif (timeUntilMin > 0) {\n\t\t\t\tif (!this._clearExecutingStateTimer.value) {\n\t\t\t\t\tthis._clearExecutingStateTimer.value = disposableTimeout(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tthis._showedExecutingStateTime = undefined;\n\t\t\t\t\t\t\tthis._clearExecutingStateTimer.clear();\n\t\t\t\t\t\t\tthis._update();\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttimeUntilMin,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t} else {\n\t\t\t\tthis._showedExecutingStateTime = undefined;\n\t\t\t}\n\t\t}\n\n\t\tconst items = this._getItemForState(\n\t\t\trunState,\n\t\t\tthis._cell.internalMetadata,\n\t\t);\n\t\treturn items;\n\t}\n\n\tprivate _getItemForState(\n\t\trunState: INotebookCellExecution | undefined,\n\t\tinternalMetadata: NotebookCellInternalMetadata,\n\t): INotebookCellStatusBarItem[] {\n\t\tconst state = runState?.state;\n\t\tconst { lastRunSuccess } = internalMetadata;\n\t\tif (!state && lastRunSuccess) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttext: `$(${successStateIcon.id})`,\n\t\t\t\t\tcolor: themeColorFromId(cellStatusIconSuccess),\n\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\"notebook.cell.status.success\",\n\t\t\t\t\t\t\"Success\",\n\t\t\t\t\t),\n\t\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\t\tpriority: Number.MAX_SAFE_INTEGER,\n\t\t\t\t} satisfies INotebookCellStatusBarItem,\n\t\t\t];\n\t\t} else if (!state && lastRunSuccess === false) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttext: `$(${errorStateIcon.id})`,\n\t\t\t\t\tcolor: themeColorFromId(cellStatusIconError),\n\t\t\t\t\ttooltip: localize(\"notebook.cell.status.failed\", \"Failed\"),\n\t\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\t\tpriority: Number.MAX_SAFE_INTEGER,\n\t\t\t\t},\n\t\t\t];\n\t\t} else if (\n\t\t\tstate === NotebookCellExecutionState.Pending ||\n\t\t\tstate === NotebookCellExecutionState.Unconfirmed\n\t\t) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttext: `$(${pendingStateIcon.id})`,\n\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\"notebook.cell.status.pending\",\n\t\t\t\t\t\t\"Pending\",\n\t\t\t\t\t),\n\t\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\t\tpriority: Number.MAX_SAFE_INTEGER,\n\t\t\t\t} satisfies INotebookCellStatusBarItem,\n\t\t\t];\n\t\t} else if (state === NotebookCellExecutionState.Executing) {\n\t\t\tconst icon = runState?.didPause\n\t\t\t\t? executingStateIcon\n\t\t\t\t: ThemeIcon.modify(executingStateIcon, \"spin\");\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\ttext: `$(${icon.id})`,\n\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\"notebook.cell.status.executing\",\n\t\t\t\t\t\t\"Executing\",\n\t\t\t\t\t),\n\t\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\t\tpriority: Number.MAX_SAFE_INTEGER,\n\t\t\t\t} satisfies INotebookCellStatusBarItem,\n\t\t\t];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tthis._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [\n\t\t\t{ handle: this._cell.handle, items: [] },\n\t\t]);\n\t}\n}\n\nexport class TimerCellStatusBarContrib\n\textends Disposable\n\timplements INotebookEditorContribution\n{\n\tstatic id = \"workbench.notebook.statusBar.execTimer\";\n\n\tconstructor(\n\t\tnotebookEditor: INotebookEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tnew NotebookStatusBarController(notebookEditor, (vm, cell) =>\n\t\t\t\tinstantiationService.createInstance(\n\t\t\t\t\tTimerCellStatusBarItem,\n\t\t\t\t\tvm,\n\t\t\t\t\tcell,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n}\nregisterNotebookContribution(\n\tTimerCellStatusBarContrib.id,\n\tTimerCellStatusBarContrib,\n);\n\nconst UPDATE_TIMER_GRACE_PERIOD = 200;\n\nclass TimerCellStatusBarItem extends Disposable {\n\tprivate static UPDATE_INTERVAL = 100;\n\tprivate _currentItemIds: string[] = [];\n\n\tprivate _scheduler: RunOnceScheduler;\n\n\tprivate _deferredUpdate: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly _notebookViewModel: INotebookViewModel,\n\t\tprivate readonly _cell: ICellViewModel,\n\t\t@INotebookExecutionStateService private readonly _executionStateService: INotebookExecutionStateService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t) {\n\t\tsuper();\n\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => this._update(), TimerCellStatusBarItem.UPDATE_INTERVAL));\n\t\tthis._update();\n\t\tthis._register(this._cell.model.onDidChangeInternalMetadata(() => this._update()));\n\t}\n\n\tprivate async _update() {\n\t\tlet timerItem: INotebookCellStatusBarItem | undefined;\n\t\tconst runState = this._executionStateService.getCellExecution(\n\t\t\tthis._cell.uri,\n\t\t);\n\t\tconst state = runState?.state;\n\t\tconst startTime = this._cell.internalMetadata.runStartTime;\n\t\tconst adjustment =\n\t\t\tthis._cell.internalMetadata.runStartTimeAdjustment ?? 0;\n\t\tconst endTime = this._cell.internalMetadata.runEndTime;\n\n\t\tif (runState?.didPause) {\n\t\t\ttimerItem = undefined;\n\t\t} else if (state === NotebookCellExecutionState.Executing) {\n\t\t\tif (typeof startTime === \"number\") {\n\t\t\t\ttimerItem = this._getTimeItem(\n\t\t\t\t\tstartTime,\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tadjustment,\n\t\t\t\t);\n\t\t\t\tthis._scheduler.schedule();\n\t\t\t}\n\t\t} else if (!state) {\n\t\t\tif (typeof startTime === \"number\" && typeof endTime === \"number\") {\n\t\t\t\tconst timerDuration = Date.now() - startTime + adjustment;\n\t\t\t\tconst executionDuration = endTime - startTime;\n\t\t\t\tconst renderDuration =\n\t\t\t\t\tthis._cell.internalMetadata.renderDuration ?? {};\n\n\t\t\t\ttimerItem = this._getTimeItem(startTime, endTime, undefined, {\n\t\t\t\t\ttimerDuration,\n\t\t\t\t\texecutionDuration,\n\t\t\t\t\trenderDuration,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst items = timerItem ? [timerItem] : [];\n\n\t\tif (!items.length && !!runState) {\n\t\t\tif (!this._deferredUpdate) {\n\t\t\t\tthis._deferredUpdate = disposableTimeout(() => {\n\t\t\t\t\tthis._deferredUpdate = undefined;\n\t\t\t\t\tthis._currentItemIds =\n\t\t\t\t\t\tthis._notebookViewModel.deltaCellStatusBarItems(\n\t\t\t\t\t\t\tthis._currentItemIds,\n\t\t\t\t\t\t\t[{ handle: this._cell.handle, items }],\n\t\t\t\t\t\t);\n\t\t\t\t}, UPDATE_TIMER_GRACE_PERIOD);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._deferredUpdate?.dispose();\n\t\t\tthis._deferredUpdate = undefined;\n\t\t\tthis._currentItemIds =\n\t\t\t\tthis._notebookViewModel.deltaCellStatusBarItems(\n\t\t\t\t\tthis._currentItemIds,\n\t\t\t\t\t[{ handle: this._cell.handle, items }],\n\t\t\t\t);\n\t\t}\n\t}\n\n\tprivate _getTimeItem(\n\t\tstartTime: number,\n\t\tendTime: number,\n\t\tadjustment = 0,\n\t\truntimeInformation?: {\n\t\t\trenderDuration: { [key: string]: number };\n\t\t\texecutionDuration: number;\n\t\t\ttimerDuration: number;\n\t\t},\n\t): INotebookCellStatusBarItem {\n\t\tconst duration = endTime - startTime + adjustment;\n\n\t\tlet tooltip: IMarkdownString | undefined;\n\n\t\tif (runtimeInformation) {\n\t\t\tconst lastExecution = new Date(endTime).toLocaleTimeString(\n\t\t\t\tlanguage,\n\t\t\t);\n\t\t\tconst { renderDuration, executionDuration, timerDuration } =\n\t\t\t\truntimeInformation;\n\n\t\t\tlet renderTimes = \"\";\n\t\t\tfor (const key in renderDuration) {\n\t\t\t\tconst rendererInfo = this._notebookService.getRendererInfo(key);\n\n\t\t\t\tconst args = encodeURIComponent(\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\textensionId: rendererInfo?.extensionId.value ?? \"\",\n\t\t\t\t\t\tissueBody:\n\t\t\t\t\t\t\t`Auto-generated text from notebook cell performance. The duration for the renderer, ${rendererInfo?.displayName ?? key}, is slower than expected.\\n` +\n\t\t\t\t\t\t\t`Execution Time: ${formatCellDuration(executionDuration)}\\n` +\n\t\t\t\t\t\t\t`Renderer Duration: ${formatCellDuration(renderDuration[key])}\\n`,\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\trenderTimes += `- [${rendererInfo?.displayName ?? key}](command:workbench.action.openIssueReporter?${args}) ${formatCellDuration(renderDuration[key])}\\n`;\n\t\t\t}\n\n\t\t\trenderTimes += `\\n*${localize(\"notebook.cell.statusBar.timerTooltip.reportIssueFootnote\", \"Use the links above to file an issue using the issue reporter.\")}*\\n`;\n\n\t\t\ttooltip = {\n\t\t\t\tvalue: localize(\n\t\t\t\t\t\"notebook.cell.statusBar.timerTooltip\",\n\t\t\t\t\t\"**Last Execution** {0}\\n\\n**Execution Time** {1}\\n\\n**Overhead Time** {2}\\n\\n**Render Times**\\n\\n{3}\",\n\t\t\t\t\tlastExecution,\n\t\t\t\t\tformatCellDuration(executionDuration),\n\t\t\t\t\tformatCellDuration(timerDuration - executionDuration),\n\t\t\t\t\trenderTimes,\n\t\t\t\t),\n\t\t\t\tisTrusted: true,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttext: formatCellDuration(duration, false),\n\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\tpriority: Number.MAX_SAFE_INTEGER - 5,\n\t\t\ttooltip,\n\t\t} satisfies INotebookCellStatusBarItem;\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tthis._deferredUpdate?.dispose();\n\t\tthis._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [\n\t\t\t{ handle: this._cell.handle, items: [] },\n\t\t]);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
