{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { disposableTimeout, RunOnceScheduler } from '../../../../../../base/common/async.js';\nimport { Disposable, dispose, IDisposable, MutableDisposable } from '../../../../../../base/common/lifecycle.js';\nimport { language } from '../../../../../../base/common/platform.js';\nimport { localize } from '../../../../../../nls.js';\nimport { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { themeColorFromId } from '../../../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../../../base/common/themables.js';\nimport { ICellVisibilityChangeEvent, NotebookVisibleCellObserver } from './notebookVisibleCellObserver.js';\nimport { ICellViewModel, INotebookEditor, INotebookEditorContribution, INotebookViewModel } from '../../notebookBrowser.js';\nimport { registerNotebookContribution } from '../../notebookEditorExtensions.js';\nimport { cellStatusIconError, cellStatusIconSuccess } from '../../notebookEditorWidget.js';\nimport { errorStateIcon, executingStateIcon, pendingStateIcon, successStateIcon } from '../../notebookIcons.js';\nimport { CellStatusbarAlignment, INotebookCellStatusBarItem, NotebookCellExecutionState, NotebookCellInternalMetadata } from '../../../common/notebookCommon.js';\nimport { INotebookCellExecution, INotebookExecutionStateService, NotebookExecutionType } from '../../../common/notebookExecutionStateService.js';\nimport { INotebookService } from '../../../common/notebookService.js';\nimport { IMarkdownString } from '../../../../../../base/common/htmlContent.js';\n\nexport function formatCellDuration(duration: number, showMilliseconds: boolean = true): string {\n\tif (showMilliseconds && duration < 1000) {\n\t\treturn `${duration}ms`;\n\t}\n\n\tconst minutes = Math.floor(duration / 1000 / 60);\n\tconst seconds = Math.floor(duration / 1000) % 60;\n\tconst tenths = Math.floor((duration % 1000) / 100);\n\n\tif (minutes > 0) {\n\t\treturn `${minutes}m ${seconds}.${tenths}s`;\n\t} else {\n\t\treturn `${seconds}.${tenths}s`;\n\t}\n}\n\nexport class NotebookStatusBarController extends Disposable {\n\tprivate readonly _visibleCells = new Map<number, IDisposable>();\n\tprivate readonly _observer: NotebookVisibleCellObserver;\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\tprivate readonly _itemFactory: (vm: INotebookViewModel, cell: ICellViewModel) => IDisposable,\n\t) {\n\t\tsuper();\n\t\tthis._observer = this._register(new NotebookVisibleCellObserver(this._notebookEditor));\n\t\tthis._register(this._observer.onDidChangeVisibleCells(this._updateVisibleCells, this));\n\n\t\tthis._updateEverything();\n\t}\n\n\tprivate _updateEverything(): void {\n\t\tthis._visibleCells.forEach(dispose);\n\t\tthis._visibleCells.clear();\n\t\tthis._updateVisibleCells({ added: this._observer.visibleCells, removed: [] });\n\t}\n\n\tprivate _updateVisibleCells(e: ICellVisibilityChangeEvent): void {\n\t\tconst vm = this._notebookEditor.getViewModel();\n\t\tif (!vm) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const oldCell of e.removed) {\n\t\t\tthis._visibleCells.get(oldCell.handle)?.dispose();\n\t\t\tthis._visibleCells.delete(oldCell.handle);\n\t\t}\n\n\t\tfor (const newCell of e.added) {\n\t\t\tthis._visibleCells.set(newCell.handle, this._itemFactory(vm, newCell));\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._visibleCells.forEach(dispose);\n\t\tthis._visibleCells.clear();\n\t}\n}\n\nexport class ExecutionStateCellStatusBarContrib extends Disposable implements INotebookEditorContribution {\n\tstatic id: string = 'workbench.notebook.statusBar.execState';\n\n\tconstructor(notebookEditor: INotebookEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._register(new NotebookStatusBarController(notebookEditor, (vm, cell) => instantiationService.createInstance(ExecutionStateCellStatusBarItem, vm, cell)));\n\t}\n}\nregisterNotebookContribution(ExecutionStateCellStatusBarContrib.id, ExecutionStateCellStatusBarContrib);\n\n/**\n * Shows the cell's execution state in the cell status bar. When the \"executing\" state is shown, it will be shown for a minimum brief time.\n */\nclass ExecutionStateCellStatusBarItem extends Disposable {\n\tprivate static readonly MIN_SPINNER_TIME = 500;\n\n\tprivate _currentItemIds: string[] = [];\n\n\tprivate _showedExecutingStateTime: number | undefined;\n\tprivate readonly _clearExecutingStateTimer = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly _notebookViewModel: INotebookViewModel,\n\t\tprivate readonly _cell: ICellViewModel,\n\t\t@INotebookExecutionStateService private readonly _executionStateService: INotebookExecutionStateService\n\t) {\n\t\tsuper();\n\n\t\tthis._update();\n\t\tthis._register(this._executionStateService.onDidChangeExecution(e => {\n\t\t\tif (e.type === NotebookExecutionType.cell && e.affectsCell(this._cell.uri)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._cell.model.onDidChangeInternalMetadata(() => this._update()));\n\t}\n\n\tprivate async _update() {\n\t\tconst items = this._getItemsForCell();\n\t\tif (Array.isArray(items)) {\n\t\t\tthis._currentItemIds = this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items }]);\n\t\t}\n\t}\n\n\t/**\n\t *\tReturns undefined if there should be no change, and an empty array if all items should be removed.\n\t */\n\tprivate _getItemsForCell(): INotebookCellStatusBarItem[] | undefined {\n\t\tconst runState = this._executionStateService.getCellExecution(this._cell.uri);\n\n\t\t// Show the execution spinner for a minimum time\n\t\tif (runState?.state === NotebookCellExecutionState.Executing && typeof this._showedExecutingStateTime !== 'number') {\n\t\t\tthis._showedExecutingStateTime = Date.now();\n\t\t} else if (runState?.state !== NotebookCellExecutionState.Executing && typeof this._showedExecutingStateTime === 'number') {\n\t\t\tconst timeUntilMin = ExecutionStateCellStatusBarItem.MIN_SPINNER_TIME - (Date.now() - this._showedExecutingStateTime);\n\t\t\tif (timeUntilMin > 0) {\n\t\t\t\tif (!this._clearExecutingStateTimer.value) {\n\t\t\t\t\tthis._clearExecutingStateTimer.value = disposableTimeout(() => {\n\t\t\t\t\t\tthis._showedExecutingStateTime = undefined;\n\t\t\t\t\t\tthis._clearExecutingStateTimer.clear();\n\t\t\t\t\t\tthis._update();\n\t\t\t\t\t}, timeUntilMin);\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t} else {\n\t\t\t\tthis._showedExecutingStateTime = undefined;\n\t\t\t}\n\t\t}\n\n\t\tconst items = this._getItemForState(runState, this._cell.internalMetadata);\n\t\treturn items;\n\t}\n\n\tprivate _getItemForState(runState: INotebookCellExecution | undefined, internalMetadata: NotebookCellInternalMetadata): INotebookCellStatusBarItem[] {\n\t\tconst state = runState?.state;\n\t\tconst { lastRunSuccess } = internalMetadata;\n\t\tif (!state && lastRunSuccess) {\n\t\t\treturn [{\n\t\t\t\ttext: `$(${successStateIcon.id})`,\n\t\t\t\tcolor: themeColorFromId(cellStatusIconSuccess),\n\t\t\t\ttooltip: localize('notebook.cell.status.success', \"Success\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t} satisfies INotebookCellStatusBarItem];\n\t\t} else if (!state && lastRunSuccess === false) {\n\t\t\treturn [{\n\t\t\t\ttext: `$(${errorStateIcon.id})`,\n\t\t\t\tcolor: themeColorFromId(cellStatusIconError),\n\t\t\t\ttooltip: localize('notebook.cell.status.failed', \"Failed\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t}];\n\t\t} else if (state === NotebookCellExecutionState.Pending || state === NotebookCellExecutionState.Unconfirmed) {\n\t\t\treturn [{\n\t\t\t\ttext: `$(${pendingStateIcon.id})`,\n\t\t\t\ttooltip: localize('notebook.cell.status.pending', \"Pending\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t} satisfies INotebookCellStatusBarItem];\n\t\t} else if (state === NotebookCellExecutionState.Executing) {\n\t\t\tconst icon = runState?.didPause ?\n\t\t\t\texecutingStateIcon :\n\t\t\t\tThemeIcon.modify(executingStateIcon, 'spin');\n\t\t\treturn [{\n\t\t\t\ttext: `$(${icon.id})`,\n\t\t\t\ttooltip: localize('notebook.cell.status.executing', \"Executing\"),\n\t\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\t\tpriority: Number.MAX_SAFE_INTEGER\n\t\t\t} satisfies INotebookCellStatusBarItem];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tthis._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items: [] }]);\n\t}\n}\n\nexport class TimerCellStatusBarContrib extends Disposable implements INotebookEditorContribution {\n\tstatic id: string = 'workbench.notebook.statusBar.execTimer';\n\n\tconstructor(\n\t\tnotebookEditor: INotebookEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tthis._register(new NotebookStatusBarController(notebookEditor, (vm, cell) => instantiationService.createInstance(TimerCellStatusBarItem, vm, cell)));\n\t}\n}\nregisterNotebookContribution(TimerCellStatusBarContrib.id, TimerCellStatusBarContrib);\n\nconst UPDATE_TIMER_GRACE_PERIOD = 200;\n\nclass TimerCellStatusBarItem extends Disposable {\n\tprivate static UPDATE_INTERVAL = 100;\n\tprivate _currentItemIds: string[] = [];\n\n\tprivate _scheduler: RunOnceScheduler;\n\n\tprivate _deferredUpdate: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly _notebookViewModel: INotebookViewModel,\n\t\tprivate readonly _cell: ICellViewModel,\n\t\t@INotebookExecutionStateService private readonly _executionStateService: INotebookExecutionStateService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t) {\n\t\tsuper();\n\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => this._update(), TimerCellStatusBarItem.UPDATE_INTERVAL));\n\t\tthis._update();\n\t\tthis._register(this._cell.model.onDidChangeInternalMetadata(() => this._update()));\n\t}\n\n\tprivate async _update() {\n\t\tlet timerItem: INotebookCellStatusBarItem | undefined;\n\t\tconst runState = this._executionStateService.getCellExecution(this._cell.uri);\n\t\tconst state = runState?.state;\n\t\tconst startTime = this._cell.internalMetadata.runStartTime;\n\t\tconst adjustment = this._cell.internalMetadata.runStartTimeAdjustment ?? 0;\n\t\tconst endTime = this._cell.internalMetadata.runEndTime;\n\n\t\tif (runState?.didPause) {\n\t\t\ttimerItem = undefined;\n\t\t} else if (state === NotebookCellExecutionState.Executing) {\n\t\t\tif (typeof startTime === 'number') {\n\t\t\t\ttimerItem = this._getTimeItem(startTime, Date.now(), adjustment);\n\t\t\t\tthis._scheduler.schedule();\n\t\t\t}\n\t\t} else if (!state) {\n\t\t\tif (typeof startTime === 'number' && typeof endTime === 'number') {\n\t\t\t\tconst timerDuration = Date.now() - startTime + adjustment;\n\t\t\t\tconst executionDuration = endTime - startTime;\n\t\t\t\tconst renderDuration = this._cell.internalMetadata.renderDuration ?? {};\n\n\t\t\t\ttimerItem = this._getTimeItem(startTime, endTime, undefined, {\n\t\t\t\t\ttimerDuration,\n\t\t\t\t\texecutionDuration,\n\t\t\t\t\trenderDuration\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst items = timerItem ? [timerItem] : [];\n\n\t\tif (!items.length && !!runState) {\n\t\t\tif (!this._deferredUpdate) {\n\t\t\t\tthis._deferredUpdate = disposableTimeout(() => {\n\t\t\t\t\tthis._deferredUpdate = undefined;\n\t\t\t\t\tthis._currentItemIds = this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items }]);\n\t\t\t\t}, UPDATE_TIMER_GRACE_PERIOD);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._deferredUpdate?.dispose();\n\t\t\tthis._deferredUpdate = undefined;\n\t\t\tthis._currentItemIds = this._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items }]);\n\t\t}\n\t}\n\n\tprivate _getTimeItem(startTime: number, endTime: number, adjustment: number = 0, runtimeInformation?: { renderDuration: { [key: string]: number }; executionDuration: number; timerDuration: number }): INotebookCellStatusBarItem {\n\t\tconst duration = endTime - startTime + adjustment;\n\n\t\tlet tooltip: IMarkdownString | undefined;\n\n\t\tif (runtimeInformation) {\n\t\t\tconst lastExecution = new Date(endTime).toLocaleTimeString(language);\n\t\t\tconst { renderDuration, executionDuration, timerDuration } = runtimeInformation;\n\n\t\t\tlet renderTimes = '';\n\t\t\tfor (const key in renderDuration) {\n\t\t\t\tconst rendererInfo = this._notebookService.getRendererInfo(key);\n\n\t\t\t\tconst args = encodeURIComponent(JSON.stringify({\n\t\t\t\t\textensionId: rendererInfo?.extensionId.value ?? '',\n\t\t\t\t\tissueBody:\n\t\t\t\t\t\t`Auto-generated text from notebook cell performance. The duration for the renderer, ${rendererInfo?.displayName ?? key}, is slower than expected.\\n` +\n\t\t\t\t\t\t`Execution Time: ${formatCellDuration(executionDuration)}\\n` +\n\t\t\t\t\t\t`Renderer Duration: ${formatCellDuration(renderDuration[key])}\\n`\n\t\t\t\t}));\n\n\t\t\t\trenderTimes += `- [${rendererInfo?.displayName ?? key}](command:workbench.action.openIssueReporter?${args}) ${formatCellDuration(renderDuration[key])}\\n`;\n\t\t\t}\n\n\t\t\trenderTimes += `\\n*${localize('notebook.cell.statusBar.timerTooltip.reportIssueFootnote', \"Use the links above to file an issue using the issue reporter.\")}*\\n`;\n\n\t\t\ttooltip = {\n\t\t\t\tvalue: localize('notebook.cell.statusBar.timerTooltip', \"**Last Execution** {0}\\n\\n**Execution Time** {1}\\n\\n**Overhead Time** {2}\\n\\n**Render Times**\\n\\n{3}\", lastExecution, formatCellDuration(executionDuration), formatCellDuration(timerDuration - executionDuration), renderTimes),\n\t\t\t\tisTrusted: true\n\t\t\t};\n\n\t\t}\n\n\t\treturn {\n\t\t\ttext: formatCellDuration(duration, false),\n\t\t\talignment: CellStatusbarAlignment.Left,\n\t\t\tpriority: Number.MAX_SAFE_INTEGER - 5,\n\t\t\ttooltip\n\t\t} satisfies INotebookCellStatusBarItem;\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\n\t\tthis._deferredUpdate?.dispose();\n\t\tthis._notebookViewModel.deltaCellStatusBarItems(this._currentItemIds, [{ handle: this._cell.handle, items: [] }]);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
