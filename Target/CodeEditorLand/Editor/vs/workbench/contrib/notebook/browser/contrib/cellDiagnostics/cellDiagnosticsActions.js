import{KeyCode as s,KeyMod as a}from"../../../../../../base/common/keyCodes.js";import"../../../../../../editor/browser/editorExtensions.js";import{Range as i}from"../../../../../../editor/common/core/range.js";import{CodeActionController as C}from"../../../../../../editor/contrib/codeAction/browser/codeActionController.js";import{CodeActionKind as d,CodeActionTriggerSource as u}from"../../../../../../editor/contrib/codeAction/common/types.js";import{localize as f,localize2 as A}from"../../../../../../nls.js";import{registerAction2 as p}from"../../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as r}from"../../../../../../platform/contextkey/common/contextkey.js";import{KeybindingWeight as E}from"../../../../../../platform/keybinding/common/keybindingsRegistry.js";import{NOTEBOOK_CELL_EDITOR_FOCUSED as n,NOTEBOOK_CELL_FOCUSED as l,NOTEBOOK_CELL_HAS_ERROR_DIAGNOSTICS as c}from"../../../common/notebookContextKeys.js";import{findTargetCellEditor as N,NotebookCellAction as O}from"../../controller/coreActions.js";import{CodeCellViewModel as g}from"../../viewModel/codeCellViewModel.js";const b="notebook.cell.openFailureActions";p(class extends O{constructor(){super({id:b,title:A("notebookActions.cellFailureActions","Show Cell Failure Actions"),precondition:r.and(l,c,n.toNegated()),f1:!0,keybinding:{when:r.and(l,c,n.toNegated()),primary:a.CtrlCmd|s.Period,weight:E.WorkbenchContrib}})}async runWithContext(_,o){if(o.cell instanceof g){const e=o.cell.excecutionError.get();if(e?.location){const m=i.lift({startLineNumber:e.location.startLineNumber+1,startColumn:e.location.startColumn+1,endLineNumber:e.location.endLineNumber+1,endColumn:e.location.endColumn+1});o.notebookEditor.setCellEditorSelection(o.cell,i.lift(m));const t=N(o,o.cell);t&&C.get(t)?.manualTriggerAtCurrentPosition(f("cellCommands.quickFix.noneMessage","No code actions available"),u.Default,{include:d.QuickFix})}}}});export{b as OPEN_CELL_FAILURE_ACTIONS_COMMAND_ID};
