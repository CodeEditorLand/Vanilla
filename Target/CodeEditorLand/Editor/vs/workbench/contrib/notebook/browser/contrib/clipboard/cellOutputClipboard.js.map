{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/clipboard/cellOutputClipboard.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IClipboardService } from '../../../../../../platform/clipboard/common/clipboardService.js';\nimport { ILogService } from '../../../../../../platform/log/common/log.js';\nimport { ICellOutputViewModel, ICellViewModel } from '../../notebookBrowser.js';\nimport { isTextStreamMime } from '../../../common/notebookCommon.js';\n\nexport async function copyCellOutput(mimeType: string | undefined, outputViewModel: ICellOutputViewModel, clipboardService: IClipboardService, logService: ILogService) {\n\tconst cellOutput = outputViewModel.model;\n\tconst output = mimeType && TEXT_BASED_MIMETYPES.includes(mimeType) ?\n\t\tcellOutput.outputs.find(output => output.mime === mimeType) :\n\t\tcellOutput.outputs.find(output => TEXT_BASED_MIMETYPES.includes(output.mime));\n\n\tmimeType = output?.mime;\n\n\tif (!mimeType || !output) {\n\t\treturn;\n\t}\n\n\tconst decoder = new TextDecoder();\n\tlet text = decoder.decode(output.data.buffer);\n\n\t// append adjacent text streams since they are concatenated in the renderer\n\tif (isTextStreamMime(mimeType)) {\n\t\tconst cellViewModel = outputViewModel.cellViewModel as ICellViewModel;\n\t\tlet index = cellViewModel.outputsViewModels.indexOf(outputViewModel) + 1;\n\t\twhile (index < cellViewModel.model.outputs.length) {\n\t\t\tconst nextCellOutput = cellViewModel.model.outputs[index];\n\t\t\tconst nextOutput = nextCellOutput.outputs.find(output => isTextStreamMime(output.mime));\n\t\t\tif (!nextOutput) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttext = text + decoder.decode(nextOutput.data.buffer);\n\t\t\tindex = index + 1;\n\t\t}\n\t}\n\n\tif (mimeType.endsWith('error')) {\n\t\ttext = text.replace(/\\\\u001b\\[[0-9;]*m/gi, '').replaceAll('\\\\n', '\\n');\n\t}\n\n\n\ttry {\n\t\tawait clipboardService.writeText(text);\n\n\t} catch (e) {\n\t\tlogService.error(`Failed to copy content: ${e}`);\n\t}\n}\n\nexport const TEXT_BASED_MIMETYPES = [\n\t'text/latex',\n\t'text/html',\n\t'application/vnd.code.notebook.error',\n\t'application/vnd.code.notebook.stdout',\n\t'application/x.notebook.stdout',\n\t'application/x.notebook.stream',\n\t'application/vnd.code.notebook.stderr',\n\t'application/x.notebook.stderr',\n\t'text/plain',\n\t'text/markdown',\n\t'application/json'\n];\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB,sBAAsB;AACrD,SAAS,wBAAwB;AAEjC,eAAsB,eAAe,UAA8B,iBAAuC,kBAAqC,YAAyB;AACvK,QAAM,aAAa,gBAAgB;AACnC,QAAM,SAAS,YAAY,qBAAqB,SAAS,QAAQ,IAChE,WAAW,QAAQ,KAAK,CAAAA,YAAUA,QAAO,SAAS,QAAQ,IAC1D,WAAW,QAAQ,KAAK,CAAAA,YAAU,qBAAqB,SAASA,QAAO,IAAI,CAAC;AAE7E,aAAW,QAAQ;AAEnB,MAAI,CAAC,YAAY,CAAC,QAAQ;AACzB;AAAA,EACD;AAEA,QAAM,UAAU,IAAI,YAAY;AAChC,MAAI,OAAO,QAAQ,OAAO,OAAO,KAAK,MAAM;AAG5C,MAAI,iBAAiB,QAAQ,GAAG;AAC/B,UAAM,gBAAgB,gBAAgB;AACtC,QAAI,QAAQ,cAAc,kBAAkB,QAAQ,eAAe,IAAI;AACvE,WAAO,QAAQ,cAAc,MAAM,QAAQ,QAAQ;AAClD,YAAM,iBAAiB,cAAc,MAAM,QAAQ,KAAK;AACxD,YAAM,aAAa,eAAe,QAAQ,KAAK,CAAAA,YAAU,iBAAiBA,QAAO,IAAI,CAAC;AACtF,UAAI,CAAC,YAAY;AAChB;AAAA,MACD;AAEA,aAAO,OAAO,QAAQ,OAAO,WAAW,KAAK,MAAM;AACnD,cAAQ,QAAQ;AAAA,IACjB;AAAA,EACD;AAEA,MAAI,SAAS,SAAS,OAAO,GAAG;AAC/B,WAAO,KAAK,QAAQ,uBAAuB,EAAE,EAAE,WAAW,OAAO,IAAI;AAAA,EACtE;AAGA,MAAI;AACH,UAAM,iBAAiB,UAAU,IAAI;AAAA,EAEtC,SAAS,GAAG;AACX,eAAW,MAAM,2BAA2B,CAAC,EAAE;AAAA,EAChD;AACD;AA1CsB;AA4Cf,MAAM,uBAAuB;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;",
  "names": ["output"]
}
