{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/cellDragRenderer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from '../../../../../../base/browser/dom.js';\nimport { createTrustedTypesPolicy } from '../../../../../../base/browser/trustedTypes.js';\nimport { Color } from '../../../../../../base/common/color.js';\nimport * as platform from '../../../../../../base/common/platform.js';\nimport { ICodeEditor } from '../../../../../../editor/browser/editorBrowser.js';\nimport { EditorOption } from '../../../../../../editor/common/config/editorOptions.js';\nimport { Range } from '../../../../../../editor/common/core/range.js';\nimport { ColorId } from '../../../../../../editor/common/encodedTokenAttributes.js';\nimport * as languages from '../../../../../../editor/common/languages.js';\nimport { tokenizeLineToHTML } from '../../../../../../editor/common/languages/textToHtmlTokenizer.js';\nimport { ITextModel } from '../../../../../../editor/common/model.js';\nimport { BaseCellRenderTemplate } from '../notebookRenderingCommon.js';\n\nclass EditorTextRenderer {\n\n\tprivate static _ttPolicy = createTrustedTypesPolicy('cellRendererEditorText', {\n\t\tcreateHTML(input) { return input; }\n\t});\n\n\tgetRichText(editor: ICodeEditor, modelRange: Range): HTMLElement | null {\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst colorMap = this.getDefaultColorMap();\n\t\tconst fontInfo = editor.getOptions().get(EditorOption.fontInfo);\n\t\tconst fontFamilyVar = '--notebook-editor-font-family';\n\t\tconst fontSizeVar = '--notebook-editor-font-size';\n\t\tconst fontWeightVar = '--notebook-editor-font-weight';\n\n\t\tconst style = ``\n\t\t\t+ `color: ${colorMap[ColorId.DefaultForeground]};`\n\t\t\t+ `background-color: ${colorMap[ColorId.DefaultBackground]};`\n\t\t\t+ `font-family: var(${fontFamilyVar});`\n\t\t\t+ `font-weight: var(${fontWeightVar});`\n\t\t\t+ `font-size: var(${fontSizeVar});`\n\t\t\t+ `line-height: ${fontInfo.lineHeight}px;`\n\t\t\t+ `white-space: pre;`;\n\n\t\tconst element = DOM.$('div', { style });\n\n\t\tconst fontSize = fontInfo.fontSize;\n\t\tconst fontWeight = fontInfo.fontWeight;\n\t\telement.style.setProperty(fontFamilyVar, fontInfo.fontFamily);\n\t\telement.style.setProperty(fontSizeVar, `${fontSize}px`);\n\t\telement.style.setProperty(fontWeightVar, fontWeight);\n\n\t\tconst linesHtml = this.getRichTextLinesAsHtml(model, modelRange, colorMap);\n\t\telement.innerHTML = linesHtml as string;\n\t\treturn element;\n\t}\n\n\tprivate getRichTextLinesAsHtml(model: ITextModel, modelRange: Range, colorMap: string[]): string | TrustedHTML {\n\t\tconst startLineNumber = modelRange.startLineNumber;\n\t\tconst startColumn = modelRange.startColumn;\n\t\tconst endLineNumber = modelRange.endLineNumber;\n\t\tconst endColumn = modelRange.endColumn;\n\n\t\tconst tabSize = model.getOptions().tabSize;\n\n\t\tlet result = '';\n\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst lineContent = lineTokens.getLineContent();\n\t\t\tconst startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n\t\t\tconst endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n\n\t\t\tif (lineContent === '') {\n\t\t\t\tresult += '<br>';\n\t\t\t} else {\n\t\t\t\tresult += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n\t\t\t}\n\t\t}\n\n\t\treturn EditorTextRenderer._ttPolicy?.createHTML(result) ?? result;\n\t}\n\n\tprivate getDefaultColorMap(): string[] {\n\t\tconst colorMap = languages.TokenizationRegistry.getColorMap();\n\t\tconst result: string[] = ['#000000'];\n\t\tif (colorMap) {\n\t\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\t\tresult[i] = Color.Format.CSS.formatHex(colorMap[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class CodeCellDragImageRenderer {\n\tgetDragImage(templateData: BaseCellRenderTemplate, editor: ICodeEditor, type: 'code' | 'markdown'): HTMLElement {\n\t\tlet dragImage = this.getDragImageImpl(templateData, editor, type);\n\t\tif (!dragImage) {\n\t\t\t// TODO@roblourens I don't think this can happen\n\t\t\tdragImage = document.createElement('div');\n\t\t\tdragImage.textContent = '1 cell';\n\t\t}\n\n\t\treturn dragImage;\n\t}\n\n\tprivate getDragImageImpl(templateData: BaseCellRenderTemplate, editor: ICodeEditor, type: 'code' | 'markdown'): HTMLElement | null {\n\t\tconst dragImageContainer = templateData.container.cloneNode(true) as HTMLElement;\n\t\tdragImageContainer.classList.forEach(c => dragImageContainer.classList.remove(c));\n\t\tdragImageContainer.classList.add('cell-drag-image', 'monaco-list-row', 'focused', `${type}-cell-row`);\n\n\t\tconst editorContainer: HTMLElement | null = dragImageContainer.querySelector('.cell-editor-container');\n\t\tif (!editorContainer) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst richEditorText = new EditorTextRenderer().getRichText(editor, new Range(1, 1, 1, 1000));\n\t\tif (!richEditorText) {\n\t\t\treturn null;\n\t\t}\n\t\tDOM.reset(editorContainer, richEditorText);\n\n\t\treturn dragImageContainer;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
