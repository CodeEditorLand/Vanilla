{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../../../base/common/event.js\";\nimport type { URI } from \"../../../../../../base/common/uri.js\";\nimport type { IEditorOptions } from \"../../../../../../editor/common/config/editorOptions.js\";\nimport type { ITextModelUpdateOptions } from \"../../../../../../editor/common/model.js\";\nimport { localize, localize2 } from \"../../../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../../../../platform/configuration/common/configurationRegistry.js\";\nimport { ContextKeyExpr } from \"../../../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../../../platform/registry/common/platform.js\";\nimport { ActiveEditorContext } from \"../../../../../common/contextkeys.js\";\nimport {\n\tNOTEBOOK_EDITOR_ID,\n\ttype NotebookCellInternalMetadata,\n} from \"../../../common/notebookCommon.js\";\nimport {\n\tNOTEBOOK_CELL_LINE_NUMBERS,\n\tNOTEBOOK_EDITOR_FOCUSED,\n} from \"../../../common/notebookContextKeys.js\";\nimport {\n\ttype INotebookCellToolbarActionContext,\n\ttype INotebookCommandContext,\n\tNOTEBOOK_ACTIONS_CATEGORY,\n\tNotebookMultiCellAction,\n} from \"../../controller/coreActions.js\";\nimport type {\n\tIBaseCellEditorOptions,\n\tICellViewModel,\n} from \"../../notebookBrowser.js\";\nimport type { NotebookOptions } from \"../../notebookOptions.js\";\nimport type { CellViewModelStateChangeEvent } from \"../../notebookViewEvents.js\";\nimport { CellContentPart } from \"../cellPart.js\";\n\n//todo@Yoyokrazy implenets is needed or not?\nexport class CellEditorOptions\n\textends CellContentPart\n\timplements ITextModelUpdateOptions\n{\n\tprivate _lineNumbers: \"on\" | \"off\" | \"inherit\" = \"inherit\";\n\tprivate _tabSize?: number;\n\tprivate _indentSize?: number | \"tabSize\";\n\tprivate _insertSpaces?: boolean;\n\n\tset tabSize(value: number | undefined) {\n\t\tif (this._tabSize !== value) {\n\t\t\tthis._tabSize = value;\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n\n\tget tabSize() {\n\t\treturn this._tabSize;\n\t}\n\n\tset indentSize(value: number | \"tabSize\" | undefined) {\n\t\tif (this._indentSize !== value) {\n\t\t\tthis._indentSize = value;\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n\n\tget indentSize() {\n\t\treturn this._indentSize;\n\t}\n\n\tset insertSpaces(value: boolean | undefined) {\n\t\tif (this._insertSpaces !== value) {\n\t\t\tthis._insertSpaces = value;\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n\n\tget insertSpaces() {\n\t\treturn this._insertSpaces;\n\t}\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\tprivate _value: IEditorOptions;\n\n\tconstructor(\n\t\tprivate readonly base: IBaseCellEditorOptions,\n\t\treadonly notebookOptions: NotebookOptions,\n\t\treadonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tbase.onDidChange(() => {\n\t\t\t\tthis._recomputeOptions();\n\t\t\t}),\n\t\t);\n\n\t\tthis._value = this._computeEditorOptions();\n\t}\n\n\toverride updateState(\n\t\telement: ICellViewModel,\n\t\te: CellViewModelStateChangeEvent,\n\t) {\n\t\tif (e.cellLineNumberChanged) {\n\t\t\tthis.setLineNumbers(element.lineNumbers);\n\t\t}\n\t}\n\n\tprivate _recomputeOptions(): void {\n\t\tthis._value = this._computeEditorOptions();\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate _computeEditorOptions() {\n\t\tconst value = this.base.value; // base IEditorOptions\n\n\t\t// TODO @Yoyokrazy find a different way to get the editor overrides, this is not the right way\n\t\tconst cellEditorOverridesRaw =\n\t\t\tthis.notebookOptions.getDisplayOptions()\n\t\t\t\t.editorOptionsCustomizations;\n\t\tconst indentSize = cellEditorOverridesRaw?.[\"editor.indentSize\"];\n\t\tif (indentSize !== undefined) {\n\t\t\tthis.indentSize = indentSize;\n\t\t}\n\t\tconst insertSpaces = cellEditorOverridesRaw?.[\"editor.insertSpaces\"];\n\t\tif (insertSpaces !== undefined) {\n\t\t\tthis.insertSpaces = insertSpaces;\n\t\t}\n\t\tconst tabSize = cellEditorOverridesRaw?.[\"editor.tabSize\"];\n\t\tif (tabSize !== undefined) {\n\t\t\tthis.tabSize = tabSize;\n\t\t}\n\n\t\tlet cellRenderLineNumber = value.lineNumbers;\n\n\t\tswitch (this._lineNumbers) {\n\t\t\tcase \"inherit\":\n\t\t\t\t// inherit from the notebook setting\n\t\t\t\tif (\n\t\t\t\t\tthis.configurationService.getValue<\"on\" | \"off\">(\n\t\t\t\t\t\t\"notebook.lineNumbers\",\n\t\t\t\t\t) === \"on\"\n\t\t\t\t) {\n\t\t\t\t\tif (value.lineNumbers === \"off\") {\n\t\t\t\t\t\tcellRenderLineNumber = \"on\";\n\t\t\t\t\t} // otherwise just use the editor setting\n\t\t\t\t} else {\n\t\t\t\t\tcellRenderLineNumber = \"off\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"on\":\n\t\t\t\t// should turn on, ignore the editor line numbers off options\n\t\t\t\tif (value.lineNumbers === \"off\") {\n\t\t\t\t\tcellRenderLineNumber = \"on\";\n\t\t\t\t} // otherwise just use the editor setting\n\t\t\t\tbreak;\n\t\t\tcase \"off\":\n\t\t\t\tcellRenderLineNumber = \"off\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (value.lineNumbers !== cellRenderLineNumber) {\n\t\t\treturn {\n\t\t\t\t...value,\n\t\t\t\t...{ lineNumbers: cellRenderLineNumber },\n\t\t\t};\n\t\t} else {\n\t\t\treturn Object.assign({}, value);\n\t\t}\n\t}\n\n\tgetUpdatedValue(\n\t\tinternalMetadata: NotebookCellInternalMetadata,\n\t\tcellUri: URI,\n\t): IEditorOptions {\n\t\tconst options = this.getValue(internalMetadata, cellUri);\n\t\tdelete options.hover; // This is toggled by a debug editor contribution\n\n\t\treturn options;\n\t}\n\n\tgetValue(\n\t\tinternalMetadata: NotebookCellInternalMetadata,\n\t\tcellUri: URI,\n\t): IEditorOptions {\n\t\treturn {\n\t\t\t...this._value,\n\t\t\t...{\n\t\t\t\tpadding: this.notebookOptions.computeEditorPadding(\n\t\t\t\t\tinternalMetadata,\n\t\t\t\t\tcellUri,\n\t\t\t\t),\n\t\t\t},\n\t\t};\n\t}\n\n\tgetDefaultValue(): IEditorOptions {\n\t\treturn {\n\t\t\t...this._value,\n\t\t\t...{\n\t\t\t\tpadding: { top: 12, bottom: 12 },\n\t\t\t},\n\t\t};\n\t}\n\n\tsetLineNumbers(lineNumbers: \"on\" | \"off\" | \"inherit\"): void {\n\t\tthis._lineNumbers = lineNumbers;\n\t\tthis._recomputeOptions();\n\t}\n}\n\nRegistry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n).registerConfiguration({\n\tid: \"notebook\",\n\torder: 100,\n\ttype: \"object\",\n\tproperties: {\n\t\t\"notebook.lineNumbers\": {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"off\", \"on\"],\n\t\t\tdefault: \"off\",\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"notebook.lineNumbers\",\n\t\t\t\t\"Controls the display of line numbers in the cell editor.\",\n\t\t\t),\n\t\t},\n\t},\n});\n\nregisterAction2(\n\tclass ToggleLineNumberAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"notebook.toggleLineNumbers\",\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"notebook.toggleLineNumbers\",\n\t\t\t\t\t\"Toggle Notebook Line Numbers\",\n\t\t\t\t),\n\t\t\t\tprecondition: NOTEBOOK_EDITOR_FOCUSED,\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.NotebookToolbar,\n\t\t\t\t\t\tgroup: \"notebookLayout\",\n\t\t\t\t\t\torder: 2,\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\"config.notebook.globalToolbar\",\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\t\tf1: true,\n\t\t\t\ttoggled: {\n\t\t\t\t\tcondition: ContextKeyExpr.notEquals(\n\t\t\t\t\t\t\"config.notebook.lineNumbers\",\n\t\t\t\t\t\t\"off\",\n\t\t\t\t\t),\n\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\"notebook.showLineNumbers\",\n\t\t\t\t\t\t\"Notebook Line Numbers\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\tconst renderLiNumbers =\n\t\t\t\tconfigurationService.getValue<\"on\" | \"off\">(\n\t\t\t\t\t\"notebook.lineNumbers\",\n\t\t\t\t) === \"on\";\n\n\t\t\tif (renderLiNumbers) {\n\t\t\t\tconfigurationService.updateValue(\"notebook.lineNumbers\", \"off\");\n\t\t\t} else {\n\t\t\t\tconfigurationService.updateValue(\"notebook.lineNumbers\", \"on\");\n\t\t\t}\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass ToggleActiveLineNumberAction extends NotebookMultiCellAction {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"notebook.cell.toggleLineNumbers\",\n\t\t\t\ttitle: localize(\n\t\t\t\t\t\"notebook.cell.toggleLineNumbers.title\",\n\t\t\t\t\t\"Show Cell Line Numbers\",\n\t\t\t\t),\n\t\t\t\tprecondition: ActiveEditorContext.isEqualTo(NOTEBOOK_EDITOR_ID),\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.NotebookCellTitle,\n\t\t\t\t\t\tgroup: \"View\",\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttoggled: ContextKeyExpr.or(\n\t\t\t\t\tNOTEBOOK_CELL_LINE_NUMBERS.isEqualTo(\"on\"),\n\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\tNOTEBOOK_CELL_LINE_NUMBERS.isEqualTo(\"inherit\"),\n\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\t\"config.notebook.lineNumbers\",\n\t\t\t\t\t\t\t\"on\",\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\tasync runWithContext(\n\t\t\taccessor: ServicesAccessor,\n\t\t\tcontext:\n\t\t\t\t| INotebookCommandContext\n\t\t\t\t| INotebookCellToolbarActionContext,\n\t\t): Promise<void> {\n\t\t\tif (context.ui) {\n\t\t\t\tthis.updateCell(\n\t\t\t\t\taccessor.get(IConfigurationService),\n\t\t\t\t\tcontext.cell,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst configurationService = accessor.get(\n\t\t\t\t\tIConfigurationService,\n\t\t\t\t);\n\t\t\t\tcontext.selectedCells.forEach((cell) => {\n\t\t\t\t\tthis.updateCell(configurationService, cell);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tprivate updateCell(\n\t\t\tconfigurationService: IConfigurationService,\n\t\t\tcell: ICellViewModel,\n\t\t) {\n\t\t\tconst renderLineNumbers =\n\t\t\t\tconfigurationService.getValue<\"on\" | \"off\">(\n\t\t\t\t\t\"notebook.lineNumbers\",\n\t\t\t\t) === \"on\";\n\t\t\tconst cellLineNumbers = cell.lineNumbers;\n\t\t\t// 'on', 'inherit' \t-> 'on'\n\t\t\t// 'on', 'off'\t\t-> 'off'\n\t\t\t// 'on', 'on'\t\t-> 'on'\n\t\t\t// 'off', 'inherit'\t-> 'off'\n\t\t\t// 'off', 'off'\t\t-> 'off'\n\t\t\t// 'off', 'on'\t\t-> 'on'\n\t\t\tconst currentLineNumberIsOn =\n\t\t\t\tcellLineNumbers === \"on\" ||\n\t\t\t\t(cellLineNumbers === \"inherit\" && renderLineNumbers);\n\n\t\t\tif (currentLineNumberIsOn) {\n\t\t\t\tcell.lineNumbers = \"off\";\n\t\t\t} else {\n\t\t\t\tcell.lineNumbers = \"on\";\n\t\t\t}\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": []
}
