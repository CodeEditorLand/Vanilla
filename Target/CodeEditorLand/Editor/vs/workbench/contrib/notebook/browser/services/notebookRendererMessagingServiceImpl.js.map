{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookRendererMessagingServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { INotebookRendererMessagingService, IScopedRendererMessaging } from '../../common/notebookRendererMessagingService.js';\nimport { IExtensionService } from '../../../../services/extensions/common/extensions.js';\n\ntype MessageToSend = { editorId: string; rendererId: string; message: unknown };\n\nexport class NotebookRendererMessagingService extends Disposable implements INotebookRendererMessagingService {\n\tdeclare _serviceBrand: undefined;\n\t/**\n\t * Activation promises. Maps renderer IDs to a queue of messages that should\n\t * be sent once activation finishes, or undefined if activation is complete.\n\t */\n\tprivate readonly activations = new Map<string /* rendererId */, undefined | MessageToSend[]>();\n\tprivate readonly scopedMessaging = new Map</* editorId */ string, IScopedRendererMessaging>();\n\tprivate readonly postMessageEmitter = this._register(new Emitter<MessageToSend>());\n\tpublic readonly onShouldPostMessage = this.postMessageEmitter.event;\n\n\tconstructor(\n\t\t@IExtensionService private readonly extensionService: IExtensionService\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @inheritdoc */\n\tpublic receiveMessage(editorId: string | undefined, rendererId: string, message: unknown): Promise<boolean> {\n\t\tif (editorId === undefined) {\n\t\t\tconst sends = [...this.scopedMessaging.values()].map(e => e.receiveMessageHandler?.(rendererId, message));\n\t\t\treturn Promise.all(sends).then(s => s.some(s => !!s));\n\t\t}\n\n\t\treturn this.scopedMessaging.get(editorId)?.receiveMessageHandler?.(rendererId, message) ?? Promise.resolve(false);\n\t}\n\n\t/** @inheritdoc */\n\tpublic prepare(rendererId: string) {\n\t\tif (this.activations.has(rendererId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue: MessageToSend[] = [];\n\t\tthis.activations.set(rendererId, queue);\n\n\t\tthis.extensionService.activateByEvent(`onRenderer:${rendererId}`).then(() => {\n\t\t\tfor (const message of queue) {\n\t\t\t\tthis.postMessageEmitter.fire(message);\n\t\t\t}\n\n\t\t\tthis.activations.set(rendererId, undefined);\n\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic getScoped(editorId: string): IScopedRendererMessaging {\n\t\tconst existing = this.scopedMessaging.get(editorId);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst messaging: IScopedRendererMessaging = {\n\t\t\tpostMessage: (rendererId, message) => this.postMessage(editorId, rendererId, message),\n\t\t\tdispose: () => this.scopedMessaging.delete(editorId),\n\t\t};\n\n\t\tthis.scopedMessaging.set(editorId, messaging);\n\t\treturn messaging;\n\t}\n\n\tprivate postMessage(editorId: string, rendererId: string, message: unknown): void {\n\t\tif (!this.activations.has(rendererId)) {\n\t\t\tthis.prepare(rendererId);\n\t\t}\n\n\t\tconst activation = this.activations.get(rendererId);\n\t\tconst toSend = { rendererId, editorId, message };\n\t\tif (activation === undefined) {\n\t\t\tthis.postMessageEmitter.fire(toSend);\n\t\t} else {\n\t\t\tactivation.push(toSend);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,mCAAmC,gCAAgC;AAC5E,SAAS,yBAAyB;AAI3B,IAAM,mCAAN,cAA+C,WAAwD;AAAA,EAW7G,YACqC,kBACnC;AACD,UAAM;AAF8B;AAAA,EAGrC;AAAA,EA3BD,OAY8G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5F,cAAc,oBAAI,IAA0D;AAAA,EAC5E,kBAAkB,oBAAI,IAAqD;AAAA,EAC3E,qBAAqB,KAAK,UAAU,IAAI,QAAuB,CAAC;AAAA,EACjE,sBAAsB,KAAK,mBAAmB;AAAA;AAAA,EASvD,eAAe,UAA8B,YAAoB,SAAoC;AAC3G,QAAI,aAAa,QAAW;AAC3B,YAAM,QAAQ,CAAC,GAAG,KAAK,gBAAgB,OAAO,CAAC,EAAE,IAAI,OAAK,EAAE,wBAAwB,YAAY,OAAO,CAAC;AACxG,aAAO,QAAQ,IAAI,KAAK,EAAE,KAAK,OAAK,EAAE,KAAK,CAAAA,OAAK,CAAC,CAACA,EAAC,CAAC;AAAA,IACrD;AAEA,WAAO,KAAK,gBAAgB,IAAI,QAAQ,GAAG,wBAAwB,YAAY,OAAO,KAAK,QAAQ,QAAQ,KAAK;AAAA,EACjH;AAAA;AAAA,EAGO,QAAQ,YAAoB;AAClC,QAAI,KAAK,YAAY,IAAI,UAAU,GAAG;AACrC;AAAA,IACD;AAEA,UAAM,QAAyB,CAAC;AAChC,SAAK,YAAY,IAAI,YAAY,KAAK;AAEtC,SAAK,iBAAiB,gBAAgB,cAAc,UAAU,EAAE,EAAE,KAAK,MAAM;AAC5E,iBAAW,WAAW,OAAO;AAC5B,aAAK,mBAAmB,KAAK,OAAO;AAAA,MACrC;AAEA,WAAK,YAAY,IAAI,YAAY,MAAS;AAAA,IAC3C,CAAC;AAAA,EACF;AAAA;AAAA,EAGO,UAAU,UAA4C;AAC5D,UAAM,WAAW,KAAK,gBAAgB,IAAI,QAAQ;AAClD,QAAI,UAAU;AACb,aAAO;AAAA,IACR;AAEA,UAAM,YAAsC;AAAA,MAC3C,aAAa,wBAAC,YAAY,YAAY,KAAK,YAAY,UAAU,YAAY,OAAO,GAAvE;AAAA,MACb,SAAS,6BAAM,KAAK,gBAAgB,OAAO,QAAQ,GAA1C;AAAA,IACV;AAEA,SAAK,gBAAgB,IAAI,UAAU,SAAS;AAC5C,WAAO;AAAA,EACR;AAAA,EAEQ,YAAY,UAAkB,YAAoB,SAAwB;AACjF,QAAI,CAAC,KAAK,YAAY,IAAI,UAAU,GAAG;AACtC,WAAK,QAAQ,UAAU;AAAA,IACxB;AAEA,UAAM,aAAa,KAAK,YAAY,IAAI,UAAU;AAClD,UAAM,SAAS,EAAE,YAAY,UAAU,QAAQ;AAC/C,QAAI,eAAe,QAAW;AAC7B,WAAK,mBAAmB,KAAK,MAAM;AAAA,IACpC,OAAO;AACN,iBAAW,KAAK,MAAM;AAAA,IACvB;AAAA,EACD;AACD;AA1Ea,mCAAN;AAAA,EAYJ;AAAA,GAZU;",
  "names": ["s"]
}
