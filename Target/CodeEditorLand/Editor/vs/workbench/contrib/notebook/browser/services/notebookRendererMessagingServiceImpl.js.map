{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/services/notebookRendererMessagingServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport { IExtensionService } from \"../../../../services/extensions/common/extensions.js\";\nimport type {\n\tINotebookRendererMessagingService,\n\tIScopedRendererMessaging,\n} from \"../../common/notebookRendererMessagingService.js\";\n\ntype MessageToSend = { editorId: string; rendererId: string; message: unknown };\n\nexport class NotebookRendererMessagingService\n\textends Disposable\n\timplements INotebookRendererMessagingService\n{\n\tdeclare _serviceBrand: undefined;\n\t/**\n\t * Activation promises. Maps renderer IDs to a queue of messages that should\n\t * be sent once activation finishes, or undefined if activation is complete.\n\t */\n\tprivate readonly activations = new Map<\n\t\tstring /* rendererId */,\n\t\tundefined | MessageToSend[]\n\t>();\n\tprivate readonly scopedMessaging = new Map<\n\t\t/* editorId */ string,\n\t\tIScopedRendererMessaging\n\t>();\n\tprivate readonly postMessageEmitter = this._register(\n\t\tnew Emitter<MessageToSend>(),\n\t);\n\tpublic readonly onShouldPostMessage = this.postMessageEmitter.event;\n\n\tconstructor(\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @inheritdoc */\n\tpublic receiveMessage(\n\t\teditorId: string | undefined,\n\t\trendererId: string,\n\t\tmessage: unknown,\n\t): Promise<boolean> {\n\t\tif (editorId === undefined) {\n\t\t\tconst sends = [...this.scopedMessaging.values()].map((e) =>\n\t\t\t\te.receiveMessageHandler?.(rendererId, message),\n\t\t\t);\n\t\t\treturn Promise.all(sends).then((s) => s.some((s) => !!s));\n\t\t}\n\n\t\treturn (\n\t\t\tthis.scopedMessaging\n\t\t\t\t.get(editorId)\n\t\t\t\t?.receiveMessageHandler?.(rendererId, message) ??\n\t\t\tPromise.resolve(false)\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tpublic prepare(rendererId: string) {\n\t\tif (this.activations.has(rendererId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue: MessageToSend[] = [];\n\t\tthis.activations.set(rendererId, queue);\n\n\t\tthis.extensionService\n\t\t\t.activateByEvent(`onRenderer:${rendererId}`)\n\t\t\t.then(() => {\n\t\t\t\tfor (const message of queue) {\n\t\t\t\t\tthis.postMessageEmitter.fire(message);\n\t\t\t\t}\n\n\t\t\t\tthis.activations.set(rendererId, undefined);\n\t\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic getScoped(editorId: string): IScopedRendererMessaging {\n\t\tconst existing = this.scopedMessaging.get(editorId);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst messaging: IScopedRendererMessaging = {\n\t\t\tpostMessage: (rendererId, message) =>\n\t\t\t\tthis.postMessage(editorId, rendererId, message),\n\t\t\tdispose: () => this.scopedMessaging.delete(editorId),\n\t\t};\n\n\t\tthis.scopedMessaging.set(editorId, messaging);\n\t\treturn messaging;\n\t}\n\n\tprivate postMessage(\n\t\teditorId: string,\n\t\trendererId: string,\n\t\tmessage: unknown,\n\t): void {\n\t\tif (!this.activations.has(rendererId)) {\n\t\t\tthis.prepare(rendererId);\n\t\t}\n\n\t\tconst activation = this.activations.get(rendererId);\n\t\tconst toSend = { rendererId, editorId, message };\n\t\tif (activation === undefined) {\n\t\t\tthis.postMessageEmitter.fire(toSend);\n\t\t} else {\n\t\t\tactivation.push(toSend);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,yBAAyB;AAQ3B,IAAM,mCAAN,cACE,WAET;AAAA,EAmBC,YACqC,kBACnC;AACD,UAAM;AAF8B;AAAA,EAGrC;AAAA,EAzCD,OAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMkB,cAAc,oBAAI,IAGjC;AAAA,EACe,kBAAkB,oBAAI,IAGrC;AAAA,EACe,qBAAqB,KAAK;AAAA,IAC1C,IAAI,QAAuB;AAAA,EAC5B;AAAA,EACgB,sBAAsB,KAAK,mBAAmB;AAAA;AAAA,EASvD,eACN,UACA,YACA,SACmB;AACnB,QAAI,aAAa,QAAW;AAC3B,YAAM,QAAQ,CAAC,GAAG,KAAK,gBAAgB,OAAO,CAAC,EAAE;AAAA,QAAI,CAAC,MACrD,EAAE,wBAAwB,YAAY,OAAO;AAAA,MAC9C;AACA,aAAO,QAAQ,IAAI,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAACA,OAAM,CAAC,CAACA,EAAC,CAAC;AAAA,IACzD;AAEA,WACC,KAAK,gBACH,IAAI,QAAQ,GACX,wBAAwB,YAAY,OAAO,KAC9C,QAAQ,QAAQ,KAAK;AAAA,EAEvB;AAAA;AAAA,EAGO,QAAQ,YAAoB;AAClC,QAAI,KAAK,YAAY,IAAI,UAAU,GAAG;AACrC;AAAA,IACD;AAEA,UAAM,QAAyB,CAAC;AAChC,SAAK,YAAY,IAAI,YAAY,KAAK;AAEtC,SAAK,iBACH,gBAAgB,cAAc,UAAU,EAAE,EAC1C,KAAK,MAAM;AACX,iBAAW,WAAW,OAAO;AAC5B,aAAK,mBAAmB,KAAK,OAAO;AAAA,MACrC;AAEA,WAAK,YAAY,IAAI,YAAY,MAAS;AAAA,IAC3C,CAAC;AAAA,EACH;AAAA;AAAA,EAGO,UAAU,UAA4C;AAC5D,UAAM,WAAW,KAAK,gBAAgB,IAAI,QAAQ;AAClD,QAAI,UAAU;AACb,aAAO;AAAA,IACR;AAEA,UAAM,YAAsC;AAAA,MAC3C,aAAa,wBAAC,YAAY,YACzB,KAAK,YAAY,UAAU,YAAY,OAAO,GADlC;AAAA,MAEb,SAAS,6BAAM,KAAK,gBAAgB,OAAO,QAAQ,GAA1C;AAAA,IACV;AAEA,SAAK,gBAAgB,IAAI,UAAU,SAAS;AAC5C,WAAO;AAAA,EACR;AAAA,EAEQ,YACP,UACA,YACA,SACO;AACP,QAAI,CAAC,KAAK,YAAY,IAAI,UAAU,GAAG;AACtC,WAAK,QAAQ,UAAU;AAAA,IACxB;AAEA,UAAM,aAAa,KAAK,YAAY,IAAI,UAAU;AAClD,UAAM,SAAS,EAAE,YAAY,UAAU,QAAQ;AAC/C,QAAI,eAAe,QAAW;AAC7B,WAAK,mBAAmB,KAAK,MAAM;AAAA,IACpC,OAAO;AACN,iBAAW,KAAK,MAAM;AAAA,IACvB;AAAA,EACD;AACD;AAvGa,mCAAN;AAAA,EAuBJ;AAAA,GAvBU;",
  "names": ["s"]
}
