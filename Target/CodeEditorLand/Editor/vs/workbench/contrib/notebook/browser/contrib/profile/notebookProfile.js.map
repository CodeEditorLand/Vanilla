{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/profile/notebookProfile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ServicesAccessor } from '../../../../../../editor/browser/editorExtensions.js';\nimport { localize } from '../../../../../../nls.js';\nimport { Action2, registerAction2 } from '../../../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { NotebookSetting } from '../../../common/notebookCommon.js';\n\nexport enum NotebookProfileType {\n\tdefault = 'default',\n\tjupyter = 'jupyter',\n\tcolab = 'colab'\n}\n\nconst profiles = {\n\t[NotebookProfileType.default]: {\n\t\t[NotebookSetting.focusIndicator]: 'gutter',\n\t\t[NotebookSetting.insertToolbarLocation]: 'both',\n\t\t[NotebookSetting.globalToolbar]: true,\n\t\t[NotebookSetting.cellToolbarLocation]: { default: 'right' },\n\t\t[NotebookSetting.compactView]: true,\n\t\t[NotebookSetting.showCellStatusBar]: 'visible',\n\t\t[NotebookSetting.consolidatedRunButton]: true,\n\t\t[NotebookSetting.undoRedoPerCell]: false\n\t},\n\t[NotebookProfileType.jupyter]: {\n\t\t[NotebookSetting.focusIndicator]: 'gutter',\n\t\t[NotebookSetting.insertToolbarLocation]: 'notebookToolbar',\n\t\t[NotebookSetting.globalToolbar]: true,\n\t\t[NotebookSetting.cellToolbarLocation]: { default: 'left' },\n\t\t[NotebookSetting.compactView]: true,\n\t\t[NotebookSetting.showCellStatusBar]: 'visible',\n\t\t[NotebookSetting.consolidatedRunButton]: false,\n\t\t[NotebookSetting.undoRedoPerCell]: true\n\t},\n\t[NotebookProfileType.colab]: {\n\t\t[NotebookSetting.focusIndicator]: 'border',\n\t\t[NotebookSetting.insertToolbarLocation]: 'betweenCells',\n\t\t[NotebookSetting.globalToolbar]: false,\n\t\t[NotebookSetting.cellToolbarLocation]: { default: 'right' },\n\t\t[NotebookSetting.compactView]: false,\n\t\t[NotebookSetting.showCellStatusBar]: 'hidden',\n\t\t[NotebookSetting.consolidatedRunButton]: true,\n\t\t[NotebookSetting.undoRedoPerCell]: false\n\t}\n};\n\nasync function applyProfile(configService: IConfigurationService, profile: Record<string, any>): Promise<void> {\n\tconst promises = [];\n\tfor (const settingKey in profile) {\n\t\tpromises.push(configService.updateValue(settingKey, profile[settingKey]));\n\t}\n\n\tawait Promise.all(promises);\n}\n\nexport interface ISetProfileArgs {\n\tprofile: NotebookProfileType;\n}\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.setProfile',\n\t\t\ttitle: localize('setProfileTitle', \"Set Profile\")\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, args: unknown): Promise<void> {\n\t\tif (!isSetProfileArgs(args)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst configService = accessor.get(IConfigurationService);\n\t\treturn applyProfile(configService, profiles[args.profile]);\n\t}\n});\n\nfunction isSetProfileArgs(args: unknown): args is ISetProfileArgs {\n\tconst setProfileArgs = args as ISetProfileArgs;\n\treturn setProfileArgs.profile === NotebookProfileType.colab ||\n\t\tsetProfileArgs.profile === NotebookProfileType.default ||\n\t\tsetProfileArgs.profile === NotebookProfileType.jupyter;\n}\n\n// export class NotebookProfileContribution extends Disposable {\n\n// \tstatic readonly ID = 'workbench.contrib.notebookProfile';\n\n// \tconstructor(@IConfigurationService configService: IConfigurationService, @IWorkbenchAssignmentService private readonly experimentService: IWorkbenchAssignmentService) {\n// \t\tsuper();\n\n// \t\tif (this.experimentService) {\n// \t\t\tthis.experimentService.getTreatment<NotebookProfileType.default | NotebookProfileType.jupyter | NotebookProfileType.colab>('notebookprofile').then(treatment => {\n// \t\t\t\tif (treatment === undefined) {\n// \t\t\t\t\treturn;\n// \t\t\t\t} else {\n// \t\t\t\t\t// check if settings are already modified\n// \t\t\t\t\tconst focusIndicator = configService.getValue(NotebookSetting.focusIndicator);\n// \t\t\t\t\tconst insertToolbarPosition = configService.getValue(NotebookSetting.insertToolbarLocation);\n// \t\t\t\t\tconst globalToolbar = configService.getValue(NotebookSetting.globalToolbar);\n// \t\t\t\t\t// const cellToolbarLocation = configService.getValue(NotebookSetting.cellToolbarLocation);\n// \t\t\t\t\tconst compactView = configService.getValue(NotebookSetting.compactView);\n// \t\t\t\t\tconst showCellStatusBar = configService.getValue(NotebookSetting.showCellStatusBar);\n// \t\t\t\t\tconst consolidatedRunButton = configService.getValue(NotebookSetting.consolidatedRunButton);\n// \t\t\t\t\tif (focusIndicator === 'border'\n// \t\t\t\t\t\t&& insertToolbarPosition === 'both'\n// \t\t\t\t\t\t&& globalToolbar === false\n// \t\t\t\t\t\t// && cellToolbarLocation === undefined\n// \t\t\t\t\t\t&& compactView === true\n// \t\t\t\t\t\t&& showCellStatusBar === 'visible'\n// \t\t\t\t\t\t&& consolidatedRunButton === true\n// \t\t\t\t\t) {\n// \t\t\t\t\t\tapplyProfile(configService, profiles[treatment] ?? profiles[NotebookProfileType.default]);\n// \t\t\t\t\t}\n// \t\t\t\t}\n// \t\t\t});\n// \t\t}\n// \t}\n// }\n\n// registerWorkbenchContribution2(NotebookProfileContribution.ID, NotebookProfileContribution, WorkbenchPhase.BlockRestore);\n"],
  "mappings": ";;AAKA,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,SAAS,uBAAuB;AACzC,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAEzB,IAAK,sBAAL,kBAAKA,yBAAL;AACN,EAAAA,qBAAA,aAAU;AACV,EAAAA,qBAAA,aAAU;AACV,EAAAA,qBAAA,WAAQ;AAHG,SAAAA;AAAA,GAAA;AAMZ,MAAM,WAAW;AAAA,EAChB,CAAC,uBAA2B,GAAG;AAAA,IAC9B,CAAC,gBAAgB,cAAc,GAAG;AAAA,IAClC,CAAC,gBAAgB,qBAAqB,GAAG;AAAA,IACzC,CAAC,gBAAgB,aAAa,GAAG;AAAA,IACjC,CAAC,gBAAgB,mBAAmB,GAAG,EAAE,SAAS,QAAQ;AAAA,IAC1D,CAAC,gBAAgB,WAAW,GAAG;AAAA,IAC/B,CAAC,gBAAgB,iBAAiB,GAAG;AAAA,IACrC,CAAC,gBAAgB,qBAAqB,GAAG;AAAA,IACzC,CAAC,gBAAgB,eAAe,GAAG;AAAA,EACpC;AAAA,EACA,CAAC,uBAA2B,GAAG;AAAA,IAC9B,CAAC,gBAAgB,cAAc,GAAG;AAAA,IAClC,CAAC,gBAAgB,qBAAqB,GAAG;AAAA,IACzC,CAAC,gBAAgB,aAAa,GAAG;AAAA,IACjC,CAAC,gBAAgB,mBAAmB,GAAG,EAAE,SAAS,OAAO;AAAA,IACzD,CAAC,gBAAgB,WAAW,GAAG;AAAA,IAC/B,CAAC,gBAAgB,iBAAiB,GAAG;AAAA,IACrC,CAAC,gBAAgB,qBAAqB,GAAG;AAAA,IACzC,CAAC,gBAAgB,eAAe,GAAG;AAAA,EACpC;AAAA,EACA,CAAC,mBAAyB,GAAG;AAAA,IAC5B,CAAC,gBAAgB,cAAc,GAAG;AAAA,IAClC,CAAC,gBAAgB,qBAAqB,GAAG;AAAA,IACzC,CAAC,gBAAgB,aAAa,GAAG;AAAA,IACjC,CAAC,gBAAgB,mBAAmB,GAAG,EAAE,SAAS,QAAQ;AAAA,IAC1D,CAAC,gBAAgB,WAAW,GAAG;AAAA,IAC/B,CAAC,gBAAgB,iBAAiB,GAAG;AAAA,IACrC,CAAC,gBAAgB,qBAAqB,GAAG;AAAA,IACzC,CAAC,gBAAgB,eAAe,GAAG;AAAA,EACpC;AACD;AAEA,eAAe,aAAa,eAAsC,SAA6C;AAC9G,QAAM,WAAW,CAAC;AAClB,aAAW,cAAc,SAAS;AACjC,aAAS,KAAK,cAAc,YAAY,YAAY,QAAQ,UAAU,CAAC,CAAC;AAAA,EACzE;AAEA,QAAM,QAAQ,IAAI,QAAQ;AAC3B;AAPe;AAaf,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,SAAS,mBAAmB,aAAa;AAAA,IACjD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA4B,MAA8B;AACnE,QAAI,CAAC,iBAAiB,IAAI,GAAG;AAC5B;AAAA,IACD;AAEA,UAAM,gBAAgB,SAAS,IAAI,qBAAqB;AACxD,WAAO,aAAa,eAAe,SAAS,KAAK,OAAO,CAAC;AAAA,EAC1D;AACD,CAAC;AAED,SAAS,iBAAiB,MAAwC;AACjE,QAAM,iBAAiB;AACvB,SAAO,eAAe,YAAY,uBACjC,eAAe,YAAY,2BAC3B,eAAe,YAAY;AAC7B;AALS;",
  "names": ["NotebookProfileType"]
}
