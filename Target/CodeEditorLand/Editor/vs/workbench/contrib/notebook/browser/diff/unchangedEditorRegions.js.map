{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/unchangedEditorRegions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport type { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\n\nexport type UnchangedEditorRegionOptions = {\n\toptions: {\n\t\tenabled: boolean;\n\t\tcontextLineCount: number;\n\t\tminimumLineCount: number;\n\t\trevealLineCount: number;\n\t};\n\tonDidChangeEnablement: Event<boolean>;\n};\n\nexport function getUnchangedRegionSettings(\n\tconfigurationService: IConfigurationService,\n): Readonly<UnchangedEditorRegionOptions> & IDisposable {\n\treturn createHideUnchangedRegionOptions(configurationService);\n}\n\nfunction createHideUnchangedRegionOptions(\n\tconfigurationService: IConfigurationService,\n): UnchangedEditorRegionOptions & { dispose: () => void } {\n\tconst disposables = new DisposableStore();\n\tconst unchangedRegionsEnablementEmitter = disposables.add(\n\t\tnew Emitter<boolean>(),\n\t);\n\n\tconst result = {\n\t\toptions: {\n\t\t\tenabled: configurationService.getValue<boolean>(\n\t\t\t\t\"diffEditor.hideUnchangedRegions.enabled\",\n\t\t\t),\n\t\t\tminimumLineCount: configurationService.getValue<number>(\n\t\t\t\t\"diffEditor.hideUnchangedRegions.minimumLineCount\",\n\t\t\t),\n\t\t\tcontextLineCount: configurationService.getValue<number>(\n\t\t\t\t\"diffEditor.hideUnchangedRegions.contextLineCount\",\n\t\t\t),\n\t\t\trevealLineCount: configurationService.getValue<number>(\n\t\t\t\t\"diffEditor.hideUnchangedRegions.revealLineCount\",\n\t\t\t),\n\t\t},\n\t\t// We only care about enable/disablement.\n\t\t// If user changes counters when a diff editor is open, we do not care, might as well ask user to reload.\n\t\t// Simpler and almost never going to happen.\n\t\tonDidChangeEnablement: unchangedRegionsEnablementEmitter.event.bind(\n\t\t\tunchangedRegionsEnablementEmitter,\n\t\t),\n\t\tdispose: () => disposables.dispose(),\n\t};\n\n\tdisposables.add(\n\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.minimumLineCount\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tresult.options.minimumLineCount =\n\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\"diffEditor.hideUnchangedRegions.minimumLineCount\",\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.contextLineCount\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tresult.options.contextLineCount =\n\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\"diffEditor.hideUnchangedRegions.contextLineCount\",\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.revealLineCount\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tresult.options.revealLineCount =\n\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\"diffEditor.hideUnchangedRegions.revealLineCount\",\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.enabled\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tresult.options.enabled = configurationService.getValue(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.enabled\",\n\t\t\t\t);\n\t\t\t\tunchangedRegionsEnablementEmitter.fire(result.options.enabled);\n\t\t\t}\n\t\t}),\n\t);\n\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,eAA2B;AACpC;AAAA,EACC;AAAA,OAEM;AAaA,SAAS,2BACf,sBACuD;AACvD,SAAO,iCAAiC,oBAAoB;AAC7D;AAJgB;AAMhB,SAAS,iCACR,sBACyD;AACzD,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,oCAAoC,YAAY;AAAA,IACrD,IAAI,QAAiB;AAAA,EACtB;AAEA,QAAM,SAAS;AAAA,IACd,SAAS;AAAA,MACR,SAAS,qBAAqB;AAAA,QAC7B;AAAA,MACD;AAAA,MACA,kBAAkB,qBAAqB;AAAA,QACtC;AAAA,MACD;AAAA,MACA,kBAAkB,qBAAqB;AAAA,QACtC;AAAA,MACD;AAAA,MACA,iBAAiB,qBAAqB;AAAA,QACrC;AAAA,MACD;AAAA,IACD;AAAA;AAAA;AAAA;AAAA,IAIA,uBAAuB,kCAAkC,MAAM;AAAA,MAC9D;AAAA,IACD;AAAA,IACA,SAAS,6BAAM,YAAY,QAAQ,GAA1B;AAAA,EACV;AAEA,cAAY;AAAA,IACX,qBAAqB,yBAAyB,CAAC,MAAM;AACpD,UACC,EAAE;AAAA,QACD;AAAA,MACD,GACC;AACD,eAAO,QAAQ,mBACd,qBAAqB;AAAA,UACpB;AAAA,QACD;AAAA,MACF;AACA,UACC,EAAE;AAAA,QACD;AAAA,MACD,GACC;AACD,eAAO,QAAQ,mBACd,qBAAqB;AAAA,UACpB;AAAA,QACD;AAAA,MACF;AACA,UACC,EAAE;AAAA,QACD;AAAA,MACD,GACC;AACD,eAAO,QAAQ,kBACd,qBAAqB;AAAA,UACpB;AAAA,QACD;AAAA,MACF;AACA,UACC,EAAE;AAAA,QACD;AAAA,MACD,GACC;AACD,eAAO,QAAQ,UAAU,qBAAqB;AAAA,UAC7C;AAAA,QACD;AACA,0CAAkC,KAAK,OAAO,QAAQ,OAAO;AAAA,MAC9D;AAAA,IACD,CAAC;AAAA,EACF;AAEA,SAAO;AACR;AA9ES;",
  "names": []
}
