{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/unchangedEditorRegions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { UnchangedRegion } from '../../../../../editor/browser/widget/diffEditor/diffEditorViewModel.js';\nimport { IEditorWorkerService } from '../../../../../editor/common/services/editorWorker.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { ITextResourceConfigurationService } from '../../../../../editor/common/services/textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { getEditorPadding } from './diffCellEditorOptions.js';\nimport { HeightOfHiddenLinesRegionInDiffEditor } from './diffElementViewModel.js';\n\nexport type UnchangedEditorRegionOptions = {\n\tenabled: boolean;\n\tcontextLineCount: number;\n\tminimumLineCount: number;\n\trevealLineCount: number;\n\tonDidChangeEnablement: Event<boolean>;\n};\n\nexport interface IUnchangedEditorRegionsService {\n\treadonly options: Readonly<UnchangedEditorRegionOptions>;\n\n\t/**\n\t * Given two URIs, compute the height of the editor with unchanged regions collapsed.\n\t * @param originalUri\n\t * @param modifiedUri\n\t */\n\tcomputeEditorHeight(originalUri: URI, modifiedUri: URI): Promise<number>;\n}\n\nexport class UnchangedEditorRegionsService extends Disposable implements IUnchangedEditorRegionsService {\n\tpublic readonly options: Readonly<UnchangedEditorRegionOptions>;\n\tconstructor(configurationService: IConfigurationService,\n\t\tprivate readonly editorWorkerService: IEditorWorkerService,\n\t\tprivate readonly textModelResolverService: ITextModelService,\n\t\tprivate readonly textConfigurationService: ITextResourceConfigurationService,\n\t\tprivate readonly lineHeight: number\n\t) {\n\t\tsuper();\n\t\tthis.options = this._register(createHideUnchangedRegionOptions(configurationService));\n\t}\n\n\tpublic static Empty: IUnchangedEditorRegionsService = {\n\t\toptions: {\n\t\t\tenabled: false,\n\t\t\tcontextLineCount: 0,\n\t\t\tminimumLineCount: 0,\n\t\t\trevealLineCount: 0,\n\t\t\tonDidChangeEnablement: Event.None,\n\t\t},\n\t\tcomputeEditorHeight: (_originalUri: URI, _modifiedUri: URI) => Promise.resolve(0)\n\t};\n\n\tpublic async computeEditorHeight(\n\t\toriginalUri: URI,\n\t\tmodifiedUri: URI) {\n\t\tconst { numberOfUnchangedRegions, numberOfVisibleLines } = await computeInputUnchangedLines(originalUri, modifiedUri, this.options, this.editorWorkerService, this.textModelResolverService, this.textConfigurationService);\n\t\tconst lineCount = numberOfVisibleLines;\n\t\tconst unchangeRegionsHeight = numberOfUnchangedRegions * HeightOfHiddenLinesRegionInDiffEditor;\n\t\t// TODO: When we have a horizontal scrollbar, we need to add 12 to the height.\n\t\t// Right now there's no way to determine if a horizontal scrollbar is visible in the editor.\n\t\treturn lineCount * this.lineHeight + getEditorPadding(lineCount).top + getEditorPadding(lineCount).bottom + unchangeRegionsHeight;\n\n\t}\n}\n\nfunction createHideUnchangedRegionOptions(configurationService: IConfigurationService): UnchangedEditorRegionOptions & { dispose: () => void } {\n\tconst disposables = new DisposableStore();\n\tconst unchangedRegionsEnablementEmitter = disposables.add(new Emitter<boolean>());\n\n\tconst options = {\n\t\tenabled: configurationService.getValue<boolean>('diffEditor.hideUnchangedRegions.enabled'),\n\t\tminimumLineCount: configurationService.getValue<number>('diffEditor.hideUnchangedRegions.minimumLineCount'),\n\t\tcontextLineCount: configurationService.getValue<number>('diffEditor.hideUnchangedRegions.contextLineCount'),\n\t\trevealLineCount: configurationService.getValue<number>('diffEditor.hideUnchangedRegions.revealLineCount'),\n\t\t// We only care about enable/disablement.\n\t\t// If user changes counters when a diff editor is open, we do not care, might as well ask user to reload.\n\t\t// Simpler and almost never going to happen.\n\t\tonDidChangeEnablement: unchangedRegionsEnablementEmitter.event.bind(unchangedRegionsEnablementEmitter),\n\t\tdispose: () => disposables.dispose()\n\t};\n\n\tdisposables.add(configurationService.onDidChangeConfiguration(e => {\n\t\tif (e.affectsConfiguration('diffEditor.hideUnchangedRegions.enabled')) {\n\t\t\toptions.enabled = configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');\n\t\t\tunchangedRegionsEnablementEmitter.fire(options.enabled);\n\t\t}\n\n\t}));\n\n\treturn options;\n}\n\nasync function computeInputUnchangedLines(originalUri: URI,\n\tmodifiedUri: URI,\n\tunchangedRegionOptions: UnchangedEditorRegionOptions,\n\teditorWorkerService: IEditorWorkerService,\n\ttextModelResolverService: ITextModelService,\n\ttextConfigurationService: ITextResourceConfigurationService\n) {\n\t// Ensure we have resolved the cell text models.\n\tconst [originalModel, modifiedModel] = await Promise.all([textModelResolverService.createModelReference(originalUri), textModelResolverService.createModelReference(modifiedUri)]);\n\n\ttry {\n\t\tconst ignoreTrimWhitespace = textConfigurationService.getValue<boolean>(originalUri, 'diffEditor.ignoreTrimWhitespace');\n\t\tconst diff = await editorWorkerService.computeDiff(originalUri, modifiedUri, {\n\t\t\tignoreTrimWhitespace,\n\t\t\tmaxComputationTimeMs: 0,\n\t\t\tcomputeMoves: false\n\t\t}, 'advanced');\n\t\tconst originalLineCount = originalModel.object.textEditorModel.getLineCount();\n\t\tconst modifiedLineCount = modifiedModel.object.textEditorModel.getLineCount();\n\t\tconst unchanged = diff ? UnchangedRegion.fromDiffs(diff.changes,\n\t\t\toriginalLineCount,\n\t\t\tmodifiedLineCount,\n\t\t\tunchangedRegionOptions.minimumLineCount ?? 3,\n\t\t\tunchangedRegionOptions.contextLineCount ?? 3) : [];\n\n\t\tconst totalLines = Math.max(originalLineCount, modifiedLineCount);\n\t\tconst numberOfUnchangedRegions = unchanged.length;\n\t\tconst numberOfVisibleLines = totalLines - unchanged.reduce((prev, curr) => prev + curr.lineCount, 0);\n\t\treturn { numberOfUnchangedRegions, numberOfVisibleLines };\n\t} finally {\n\t\toriginalModel.dispose();\n\t\tmodifiedModel.dispose();\n\t}\n}\n\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,uBAAuB;AAC5C,SAAS,WAAW;AACpB,SAAS,uBAAuB;AAChC,SAAS,4BAA4B;AACrC,SAAS,yBAAyB;AAClC,SAAS,yCAAyC;AAClD,SAAS,6BAA6B;AACtC,SAAS,wBAAwB;AACjC,SAAS,6CAA6C;AAqB/C,MAAM,sCAAsC,WAAqD;AAAA,EAEvG,YAAY,sBACM,qBACA,0BACA,0BACA,YAChB;AACD,UAAM;AALW;AACA;AACA;AACA;AAGjB,SAAK,UAAU,KAAK,UAAU,iCAAiC,oBAAoB,CAAC;AAAA,EACrF;AAAA,EA7CD,OAmCwG;AAAA;AAAA;AAAA,EACvF;AAAA,EAWhB,OAAc,QAAwC;AAAA,IACrD,SAAS;AAAA,MACR,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,uBAAuB,MAAM;AAAA,IAC9B;AAAA,IACA,qBAAqB,wBAAC,cAAmB,iBAAsB,QAAQ,QAAQ,CAAC,GAA3D;AAAA,EACtB;AAAA,EAEA,MAAa,oBACZ,aACA,aAAkB;AAClB,UAAM,EAAE,0BAA0B,qBAAqB,IAAI,MAAM,2BAA2B,aAAa,aAAa,KAAK,SAAS,KAAK,qBAAqB,KAAK,0BAA0B,KAAK,wBAAwB;AAC1N,UAAM,YAAY;AAClB,UAAM,wBAAwB,2BAA2B;AAGzD,WAAO,YAAY,KAAK,aAAa,iBAAiB,SAAS,EAAE,MAAM,iBAAiB,SAAS,EAAE,SAAS;AAAA,EAE7G;AACD;AAEA,SAAS,iCAAiC,sBAAqG;AAC9I,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,oCAAoC,YAAY,IAAI,IAAI,QAAiB,CAAC;AAEhF,QAAM,UAAU;AAAA,IACf,SAAS,qBAAqB,SAAkB,yCAAyC;AAAA,IACzF,kBAAkB,qBAAqB,SAAiB,kDAAkD;AAAA,IAC1G,kBAAkB,qBAAqB,SAAiB,kDAAkD;AAAA,IAC1G,iBAAiB,qBAAqB,SAAiB,iDAAiD;AAAA;AAAA;AAAA;AAAA,IAIxG,uBAAuB,kCAAkC,MAAM,KAAK,iCAAiC;AAAA,IACrG,SAAS,6BAAM,YAAY,QAAQ,GAA1B;AAAA,EACV;AAEA,cAAY,IAAI,qBAAqB,yBAAyB,OAAK;AAClE,QAAI,EAAE,qBAAqB,yCAAyC,GAAG;AACtE,cAAQ,UAAU,qBAAqB,SAAS,yCAAyC;AACzF,wCAAkC,KAAK,QAAQ,OAAO;AAAA,IACvD;AAAA,EAED,CAAC,CAAC;AAEF,SAAO;AACR;AAzBS;AA2BT,eAAe,2BAA2B,aACzC,aACA,wBACA,qBACA,0BACA,0BACC;AAED,QAAM,CAAC,eAAe,aAAa,IAAI,MAAM,QAAQ,IAAI,CAAC,yBAAyB,qBAAqB,WAAW,GAAG,yBAAyB,qBAAqB,WAAW,CAAC,CAAC;AAEjL,MAAI;AACH,UAAM,uBAAuB,yBAAyB,SAAkB,aAAa,iCAAiC;AACtH,UAAM,OAAO,MAAM,oBAAoB,YAAY,aAAa,aAAa;AAAA,MAC5E;AAAA,MACA,sBAAsB;AAAA,MACtB,cAAc;AAAA,IACf,GAAG,UAAU;AACb,UAAM,oBAAoB,cAAc,OAAO,gBAAgB,aAAa;AAC5E,UAAM,oBAAoB,cAAc,OAAO,gBAAgB,aAAa;AAC5E,UAAM,YAAY,OAAO,gBAAgB;AAAA,MAAU,KAAK;AAAA,MACvD;AAAA,MACA;AAAA,MACA,uBAAuB,oBAAoB;AAAA,MAC3C,uBAAuB,oBAAoB;AAAA,IAAC,IAAI,CAAC;AAElD,UAAM,aAAa,KAAK,IAAI,mBAAmB,iBAAiB;AAChE,UAAM,2BAA2B,UAAU;AAC3C,UAAM,uBAAuB,aAAa,UAAU,OAAO,CAAC,MAAM,SAAS,OAAO,KAAK,WAAW,CAAC;AACnG,WAAO,EAAE,0BAA0B,qBAAqB;AAAA,EACzD,UAAE;AACD,kBAAc,QAAQ;AACtB,kBAAc,QAAQ;AAAA,EACvB;AACD;AAjCe;",
  "names": []
}
