{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/unchangedEditorRegions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { DisposableStore, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\n\nexport type UnchangedEditorRegionOptions = {\n\toptions: {\n\t\tenabled: boolean;\n\t\tcontextLineCount: number;\n\t\tminimumLineCount: number;\n\t\trevealLineCount: number;\n\t};\n\tonDidChangeEnablement: Event<boolean>;\n};\n\nexport function getUnchangedRegionSettings(configurationService: IConfigurationService): (Readonly<UnchangedEditorRegionOptions> & IDisposable) {\n\treturn createHideUnchangedRegionOptions(configurationService);\n}\n\nfunction createHideUnchangedRegionOptions(configurationService: IConfigurationService): UnchangedEditorRegionOptions & { dispose: () => void } {\n\tconst disposables = new DisposableStore();\n\tconst unchangedRegionsEnablementEmitter = disposables.add(new Emitter<boolean>());\n\n\tconst result = {\n\t\toptions: {\n\t\t\tenabled: configurationService.getValue<boolean>('diffEditor.hideUnchangedRegions.enabled'),\n\t\t\tminimumLineCount: configurationService.getValue<number>('diffEditor.hideUnchangedRegions.minimumLineCount'),\n\t\t\tcontextLineCount: configurationService.getValue<number>('diffEditor.hideUnchangedRegions.contextLineCount'),\n\t\t\trevealLineCount: configurationService.getValue<number>('diffEditor.hideUnchangedRegions.revealLineCount'),\n\t\t},\n\t\t// We only care about enable/disablement.\n\t\t// If user changes counters when a diff editor is open, we do not care, might as well ask user to reload.\n\t\t// Simpler and almost never going to happen.\n\t\tonDidChangeEnablement: unchangedRegionsEnablementEmitter.event.bind(unchangedRegionsEnablementEmitter),\n\t\tdispose: () => disposables.dispose()\n\t};\n\n\tdisposables.add(configurationService.onDidChangeConfiguration(e => {\n\t\tif (e.affectsConfiguration('diffEditor.hideUnchangedRegions.minimumLineCount')) {\n\t\t\tresult.options.minimumLineCount = configurationService.getValue<number>('diffEditor.hideUnchangedRegions.minimumLineCount');\n\t\t}\n\t\tif (e.affectsConfiguration('diffEditor.hideUnchangedRegions.contextLineCount')) {\n\t\t\tresult.options.contextLineCount = configurationService.getValue<number>('diffEditor.hideUnchangedRegions.contextLineCount');\n\t\t}\n\t\tif (e.affectsConfiguration('diffEditor.hideUnchangedRegions.revealLineCount')) {\n\t\t\tresult.options.revealLineCount = configurationService.getValue<number>('diffEditor.hideUnchangedRegions.revealLineCount');\n\t\t}\n\t\tif (e.affectsConfiguration('diffEditor.hideUnchangedRegions.enabled')) {\n\t\t\tresult.options.enabled = configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');\n\t\t\tunchangedRegionsEnablementEmitter.fire(result.options.enabled);\n\t\t}\n\n\t}));\n\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,6BAA6B;AAY/B,SAAS,2BAA2B,sBAAqG;AAC/I,SAAO,iCAAiC,oBAAoB;AAC7D;AAFgB;AAIhB,SAAS,iCAAiC,sBAAqG;AAC9I,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,oCAAoC,YAAY,IAAI,IAAI,QAAiB,CAAC;AAEhF,QAAM,SAAS;AAAA,IACd,SAAS;AAAA,MACR,SAAS,qBAAqB,SAAkB,yCAAyC;AAAA,MACzF,kBAAkB,qBAAqB,SAAiB,kDAAkD;AAAA,MAC1G,kBAAkB,qBAAqB,SAAiB,kDAAkD;AAAA,MAC1G,iBAAiB,qBAAqB,SAAiB,iDAAiD;AAAA,IACzG;AAAA;AAAA;AAAA;AAAA,IAIA,uBAAuB,kCAAkC,MAAM,KAAK,iCAAiC;AAAA,IACrG,SAAS,6BAAM,YAAY,QAAQ,GAA1B;AAAA,EACV;AAEA,cAAY,IAAI,qBAAqB,yBAAyB,OAAK;AAClE,QAAI,EAAE,qBAAqB,kDAAkD,GAAG;AAC/E,aAAO,QAAQ,mBAAmB,qBAAqB,SAAiB,kDAAkD;AAAA,IAC3H;AACA,QAAI,EAAE,qBAAqB,kDAAkD,GAAG;AAC/E,aAAO,QAAQ,mBAAmB,qBAAqB,SAAiB,kDAAkD;AAAA,IAC3H;AACA,QAAI,EAAE,qBAAqB,iDAAiD,GAAG;AAC9E,aAAO,QAAQ,kBAAkB,qBAAqB,SAAiB,iDAAiD;AAAA,IACzH;AACA,QAAI,EAAE,qBAAqB,yCAAyC,GAAG;AACtE,aAAO,QAAQ,UAAU,qBAAqB,SAAS,yCAAyC;AAChG,wCAAkC,KAAK,OAAO,QAAQ,OAAO;AAAA,IAC9D;AAAA,EAED,CAAC,CAAC;AAEF,SAAO;AACR;AApCS;",
  "names": []
}
