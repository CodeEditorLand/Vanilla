{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/diff/unchangedEditorRegions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport { UnchangedRegion } from \"../../../../../editor/browser/widget/diffEditor/diffEditorViewModel.js\";\nimport type { IEditorWorkerService } from \"../../../../../editor/common/services/editorWorker.js\";\nimport type { ITextModelService } from \"../../../../../editor/common/services/resolverService.js\";\nimport type { ITextResourceConfigurationService } from \"../../../../../editor/common/services/textResourceConfiguration.js\";\nimport type { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { getEditorPadding } from \"./diffCellEditorOptions.js\";\nimport { HeightOfHiddenLinesRegionInDiffEditor } from \"./diffElementViewModel.js\";\n\nexport type UnchangedEditorRegionOptions = {\n\tenabled: boolean;\n\tcontextLineCount: number;\n\tminimumLineCount: number;\n\trevealLineCount: number;\n\tonDidChangeEnablement: Event<boolean>;\n};\n\nexport interface IUnchangedEditorRegionsService {\n\treadonly options: Readonly<UnchangedEditorRegionOptions>;\n\n\t/**\n\t * Given two URIs, compute the height of the editor with unchanged regions collapsed.\n\t * @param originalUri\n\t * @param modifiedUri\n\t */\n\tcomputeEditorHeight(originalUri: URI, modifiedUri: URI): Promise<number>;\n}\n\nexport class UnchangedEditorRegionsService\n\textends Disposable\n\timplements IUnchangedEditorRegionsService\n{\n\tpublic readonly options: Readonly<UnchangedEditorRegionOptions>;\n\tconstructor(\n\t\tconfigurationService: IConfigurationService,\n\t\tprivate readonly editorWorkerService: IEditorWorkerService,\n\t\tprivate readonly textModelResolverService: ITextModelService,\n\t\tprivate readonly textConfigurationService: ITextResourceConfigurationService,\n\t\tprivate readonly lineHeight: number,\n\t) {\n\t\tsuper();\n\t\tthis.options = this._register(\n\t\t\tcreateHideUnchangedRegionOptions(configurationService),\n\t\t);\n\t}\n\n\tpublic static Empty: IUnchangedEditorRegionsService = {\n\t\toptions: {\n\t\t\tenabled: false,\n\t\t\tcontextLineCount: 0,\n\t\t\tminimumLineCount: 0,\n\t\t\trevealLineCount: 0,\n\t\t\tonDidChangeEnablement: Event.None,\n\t\t},\n\t\tcomputeEditorHeight: (_originalUri: URI, _modifiedUri: URI) =>\n\t\t\tPromise.resolve(0),\n\t};\n\n\tpublic async computeEditorHeight(originalUri: URI, modifiedUri: URI) {\n\t\tconst { numberOfUnchangedRegions, numberOfVisibleLines } =\n\t\t\tawait computeInputUnchangedLines(\n\t\t\t\toriginalUri,\n\t\t\t\tmodifiedUri,\n\t\t\t\tthis.options,\n\t\t\t\tthis.editorWorkerService,\n\t\t\t\tthis.textModelResolverService,\n\t\t\t\tthis.textConfigurationService,\n\t\t\t);\n\t\tconst lineCount = numberOfVisibleLines;\n\t\tconst unchangeRegionsHeight =\n\t\t\tnumberOfUnchangedRegions * HeightOfHiddenLinesRegionInDiffEditor;\n\t\t// TODO: When we have a horizontal scrollbar, we need to add 12 to the height.\n\t\t// Right now there's no way to determine if a horizontal scrollbar is visible in the editor.\n\t\treturn (\n\t\t\tlineCount * this.lineHeight +\n\t\t\tgetEditorPadding(lineCount).top +\n\t\t\tgetEditorPadding(lineCount).bottom +\n\t\t\tunchangeRegionsHeight\n\t\t);\n\t}\n}\n\nfunction createHideUnchangedRegionOptions(\n\tconfigurationService: IConfigurationService,\n): UnchangedEditorRegionOptions & { dispose: () => void } {\n\tconst disposables = new DisposableStore();\n\tconst unchangedRegionsEnablementEmitter = disposables.add(\n\t\tnew Emitter<boolean>(),\n\t);\n\n\tconst options = {\n\t\tenabled: configurationService.getValue<boolean>(\n\t\t\t\"diffEditor.hideUnchangedRegions.enabled\",\n\t\t),\n\t\tminimumLineCount: configurationService.getValue<number>(\n\t\t\t\"diffEditor.hideUnchangedRegions.minimumLineCount\",\n\t\t),\n\t\tcontextLineCount: configurationService.getValue<number>(\n\t\t\t\"diffEditor.hideUnchangedRegions.contextLineCount\",\n\t\t),\n\t\trevealLineCount: configurationService.getValue<number>(\n\t\t\t\"diffEditor.hideUnchangedRegions.revealLineCount\",\n\t\t),\n\t\t// We only care about enable/disablement.\n\t\t// If user changes counters when a diff editor is open, we do not care, might as well ask user to reload.\n\t\t// Simpler and almost never going to happen.\n\t\tonDidChangeEnablement: unchangedRegionsEnablementEmitter.event.bind(\n\t\t\tunchangedRegionsEnablementEmitter,\n\t\t),\n\t\tdispose: () => disposables.dispose(),\n\t};\n\n\tdisposables.add(\n\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.minimumLineCount\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\toptions.minimumLineCount =\n\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\"diffEditor.hideUnchangedRegions.minimumLineCount\",\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.contextLineCount\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\toptions.contextLineCount =\n\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\"diffEditor.hideUnchangedRegions.contextLineCount\",\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.revealLineCount\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\toptions.revealLineCount = configurationService.getValue<number>(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.revealLineCount\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.enabled\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\toptions.enabled = configurationService.getValue(\n\t\t\t\t\t\"diffEditor.hideUnchangedRegions.enabled\",\n\t\t\t\t);\n\t\t\t\tunchangedRegionsEnablementEmitter.fire(options.enabled);\n\t\t\t}\n\t\t}),\n\t);\n\n\treturn options;\n}\n\nasync function computeInputUnchangedLines(\n\toriginalUri: URI,\n\tmodifiedUri: URI,\n\tunchangedRegionOptions: UnchangedEditorRegionOptions,\n\teditorWorkerService: IEditorWorkerService,\n\ttextModelResolverService: ITextModelService,\n\ttextConfigurationService: ITextResourceConfigurationService,\n) {\n\t// Ensure we have resolved the cell text models.\n\tconst [originalModel, modifiedModel] = await Promise.all([\n\t\ttextModelResolverService.createModelReference(originalUri),\n\t\ttextModelResolverService.createModelReference(modifiedUri),\n\t]);\n\n\ttry {\n\t\tconst ignoreTrimWhitespace = textConfigurationService.getValue<boolean>(\n\t\t\toriginalUri,\n\t\t\t\"diffEditor.ignoreTrimWhitespace\",\n\t\t);\n\t\tconst diff = await editorWorkerService.computeDiff(\n\t\t\toriginalUri,\n\t\t\tmodifiedUri,\n\t\t\t{\n\t\t\t\tignoreTrimWhitespace,\n\t\t\t\tmaxComputationTimeMs: 0,\n\t\t\t\tcomputeMoves: false,\n\t\t\t},\n\t\t\t\"advanced\",\n\t\t);\n\t\tconst originalLineCount =\n\t\t\toriginalModel.object.textEditorModel.getLineCount();\n\t\tconst modifiedLineCount =\n\t\t\tmodifiedModel.object.textEditorModel.getLineCount();\n\t\tconst unchanged = diff\n\t\t\t? UnchangedRegion.fromDiffs(\n\t\t\t\t\tdiff.changes,\n\t\t\t\t\toriginalLineCount,\n\t\t\t\t\tmodifiedLineCount,\n\t\t\t\t\tunchangedRegionOptions.minimumLineCount ?? 3,\n\t\t\t\t\tunchangedRegionOptions.contextLineCount ?? 3,\n\t\t\t\t)\n\t\t\t: [];\n\n\t\tconst totalLines = Math.max(originalLineCount, modifiedLineCount);\n\t\tconst numberOfUnchangedRegions = unchanged.length;\n\t\tconst numberOfVisibleLines =\n\t\t\ttotalLines -\n\t\t\tunchanged.reduce((prev, curr) => prev + curr.lineCount, 0);\n\t\treturn { numberOfUnchangedRegions, numberOfVisibleLines };\n\t} finally {\n\t\toriginalModel.dispose();\n\t\tmodifiedModel.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
