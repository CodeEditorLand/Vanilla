{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/statusBarProviders.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../../../base/common/cancellation.js';\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../../../base/common/map.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { ILanguageService } from '../../../../../../editor/common/languages/language.js';\nimport { localize } from '../../../../../../nls.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../../../platform/keybinding/common/keybinding.js';\nimport { Registry } from '../../../../../../platform/registry/common/platform.js';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from '../../../../../common/contributions.js';\nimport { CHANGE_CELL_LANGUAGE, DETECT_CELL_LANGUAGE } from '../../notebookBrowser.js';\nimport { INotebookCellStatusBarService } from '../../../common/notebookCellStatusBarService.js';\nimport { CellKind, CellStatusbarAlignment, INotebookCellStatusBarItem, INotebookCellStatusBarItemList, INotebookCellStatusBarItemProvider } from '../../../common/notebookCommon.js';\nimport { INotebookKernelService } from '../../../common/notebookKernelService.js';\nimport { INotebookService } from '../../../common/notebookService.js';\nimport { ILanguageDetectionService, LanguageDetectionHintConfig } from '../../../../../services/languageDetection/common/languageDetectionWorkerService.js';\nimport { LifecyclePhase } from '../../../../../services/lifecycle/common/lifecycle.js';\n\nclass CellStatusBarLanguagePickerProvider implements INotebookCellStatusBarItemProvider {\n\n\treadonly viewType = '*';\n\n\tconstructor(\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t) { }\n\n\tasync provideCellStatusBarItems(uri: URI, index: number, _token: CancellationToken): Promise<INotebookCellStatusBarItemList | undefined> {\n\t\tconst doc = this._notebookService.getNotebookTextModel(uri);\n\t\tconst cell = doc?.cells[index];\n\t\tif (!cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst statusBarItems: INotebookCellStatusBarItem[] = [];\n\t\tlet displayLanguage = cell.language;\n\t\tif (cell.cellKind === CellKind.Markup) {\n\t\t\tdisplayLanguage = 'markdown';\n\t\t} else {\n\t\t\tconst registeredId = this._languageService.getLanguageIdByLanguageName(cell.language);\n\t\t\tif (registeredId) {\n\t\t\t\tdisplayLanguage = this._languageService.getLanguageName(displayLanguage) ?? displayLanguage;\n\t\t\t} else {\n\t\t\t\t// add unregistered lanugage warning item\n\t\t\t\tconst searchTooltip = localize('notebook.cell.status.searchLanguageExtensions', \"Unknown cell language. Click to search for '{0}' extensions\", cell.language);\n\t\t\t\tstatusBarItems.push({\n\t\t\t\t\ttext: `$(dialog-warning)`,\n\t\t\t\t\tcommand: { id: 'workbench.extensions.search', arguments: [`@tag:${cell.language}`], title: 'Search Extensions' },\n\t\t\t\t\ttooltip: searchTooltip,\n\t\t\t\t\talignment: CellStatusbarAlignment.Right,\n\t\t\t\t\tpriority: -Number.MAX_SAFE_INTEGER + 1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tstatusBarItems.push({\n\t\t\ttext: displayLanguage,\n\t\t\tcommand: CHANGE_CELL_LANGUAGE,\n\t\t\ttooltip: localize('notebook.cell.status.language', \"Select Cell Language Mode\"),\n\t\t\talignment: CellStatusbarAlignment.Right,\n\t\t\tpriority: -Number.MAX_SAFE_INTEGER\n\t\t});\n\t\treturn {\n\t\t\titems: statusBarItems\n\t\t};\n\t}\n}\n\nclass CellStatusBarLanguageDetectionProvider implements INotebookCellStatusBarItemProvider {\n\n\treadonly viewType = '*';\n\n\tprivate cache = new ResourceMap<{\n\t\tcontentVersion: number;\n\t\tupdateTimestamp: number;\n\t\tcellLanguage: string;\n\n\t\tguess?: string;\n\t}>();\n\n\tconstructor(\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILanguageDetectionService private readonly _languageDetectionService: ILanguageDetectionService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) { }\n\n\tasync provideCellStatusBarItems(uri: URI, index: number, token: CancellationToken): Promise<INotebookCellStatusBarItemList | undefined> {\n\t\tconst doc = this._notebookService.getNotebookTextModel(uri);\n\t\tconst cell = doc?.cells[index];\n\t\tif (!cell) { return; }\n\n\t\tconst enablementConfig = this._configurationService.getValue<LanguageDetectionHintConfig>('workbench.editor.languageDetectionHints');\n\t\tconst enabled = typeof enablementConfig === 'object' && enablementConfig?.notebookEditors;\n\t\tif (!enabled) {\n\t\t\treturn;\n\t\t}\n\t\tconst cellUri = cell.uri;\n\t\tconst contentVersion = cell.textModel?.getVersionId();\n\t\tif (!contentVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentLanguageId = cell.cellKind === CellKind.Markup ?\n\t\t\t'markdown' :\n\t\t\t(this._languageService.getLanguageIdByLanguageName(cell.language) || cell.language);\n\n\t\tif (!this.cache.has(cellUri)) {\n\t\t\tthis.cache.set(cellUri, {\n\t\t\t\tcellLanguage: currentLanguageId, // force a re-compute upon a change in configured language\n\t\t\t\tupdateTimestamp: 0, // facilitates a disposable-free debounce operation\n\t\t\t\tcontentVersion: 1, // dont run for the initial contents, only on update\n\t\t\t});\n\t\t}\n\n\t\tconst cached = this.cache.get(cellUri)!;\n\t\tif (cached.cellLanguage !== currentLanguageId || (cached.updateTimestamp < Date.now() - 1000 && cached.contentVersion !== contentVersion)) {\n\t\t\tcached.updateTimestamp = Date.now();\n\t\t\tcached.cellLanguage = currentLanguageId;\n\t\t\tcached.contentVersion = contentVersion;\n\n\t\t\tconst kernel = this._notebookKernelService.getSelectedOrSuggestedKernel(doc);\n\t\t\tif (kernel) {\n\t\t\t\tconst supportedLangs = [...kernel.supportedLanguages, 'markdown'];\n\t\t\t\tcached.guess = await this._languageDetectionService.detectLanguage(cell.uri, supportedLangs);\n\t\t\t}\n\t\t}\n\n\t\tconst items: INotebookCellStatusBarItem[] = [];\n\t\tif (cached.guess && currentLanguageId !== cached.guess) {\n\t\t\tconst detectedName = this._languageService.getLanguageName(cached.guess) || cached.guess;\n\t\t\tlet tooltip = localize('notebook.cell.status.autoDetectLanguage', \"Accept Detected Language: {0}\", detectedName);\n\t\t\tconst keybinding = this._keybindingService.lookupKeybinding(DETECT_CELL_LANGUAGE);\n\t\t\tconst label = keybinding?.getLabel();\n\t\t\tif (label) {\n\t\t\t\ttooltip += ` (${label})`;\n\t\t\t}\n\t\t\titems.push({\n\t\t\t\ttext: '$(lightbulb-autofix)',\n\t\t\t\tcommand: DETECT_CELL_LANGUAGE,\n\t\t\t\ttooltip,\n\t\t\t\talignment: CellStatusbarAlignment.Right,\n\t\t\t\tpriority: -Number.MAX_SAFE_INTEGER + 1\n\t\t\t});\n\t\t}\n\n\t\treturn { items };\n\t}\n}\n\nclass BuiltinCellStatusBarProviders extends Disposable {\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotebookCellStatusBarService notebookCellStatusBarService: INotebookCellStatusBarService) {\n\t\tsuper();\n\n\t\tconst builtinProviders = [\n\t\t\tCellStatusBarLanguagePickerProvider,\n\t\t\tCellStatusBarLanguageDetectionProvider,\n\t\t];\n\t\tbuiltinProviders.forEach(p => {\n\t\t\tthis._register(notebookCellStatusBarService.registerCellStatusBarItemProvider(instantiationService.createInstance(p)));\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(BuiltinCellStatusBarProviders, LifecyclePhase.Restored);\n"],
  "mappings": "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",
  "names": []
}
