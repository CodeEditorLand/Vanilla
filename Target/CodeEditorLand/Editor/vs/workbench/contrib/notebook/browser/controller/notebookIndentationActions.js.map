{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/notebookIndentationActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../../nls.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ServicesAccessor } from '../../../../../editor/browser/editorExtensions.js';\nimport { IBulkEditService, ResourceTextEdit } from '../../../../../editor/browser/services/bulkEditService.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { Action2, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { IQuickInputService } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { INotebookEditorService } from '../services/notebookEditorService.js';\nimport { NotebookSetting } from '../../common/notebookCommon.js';\nimport { isNotebookEditorInput } from '../../common/notebookEditorInput.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\n\nexport class NotebookIndentUsingTabs extends Action2 {\n\tpublic static readonly ID = 'notebook.action.indentUsingTabs';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentUsingTabs.ID,\n\t\t\ttitle: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tchangeNotebookIndentation(accessor, false, false);\n\t}\n}\n\nexport class NotebookIndentUsingSpaces extends Action2 {\n\tpublic static readonly ID = 'notebook.action.indentUsingSpaces';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentUsingSpaces.ID,\n\t\t\ttitle: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tchangeNotebookIndentation(accessor, true, false);\n\t}\n}\n\nexport class NotebookChangeTabDisplaySize extends Action2 {\n\tpublic static readonly ID = 'notebook.action.changeTabDisplaySize';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookChangeTabDisplaySize.ID,\n\t\t\ttitle: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tchangeNotebookIndentation(accessor, true, true);\n\t}\n}\n\nexport class NotebookIndentationToSpacesAction extends Action2 {\n\tpublic static readonly ID = 'notebook.action.convertIndentationToSpaces';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentationToSpacesAction.ID,\n\t\t\ttitle: nls.localize('convertIndentationToSpaces', \"Convert Indentation to Spaces\"),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tconvertNotebookIndentation(accessor, true);\n\t}\n}\n\nexport class NotebookIndentationToTabsAction extends Action2 {\n\tpublic static readonly ID = 'notebook.action.convertIndentationToTabs';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentationToTabsAction.ID,\n\t\t\ttitle: nls.localize('convertIndentationToTabs', \"Convert Indentation to Tabs\"),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tconvertNotebookIndentation(accessor, false);\n\t}\n}\n\nfunction changeNotebookIndentation(accessor: ServicesAccessor, insertSpaces: boolean, displaySizeOnly: boolean) {\n\tconst editorService = accessor.get(IEditorService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst notebookEditorService = accessor.get(INotebookEditorService);\n\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t// keep this check here to pop on non-notebook actions\n\tconst activeInput = editorService.activeEditorPane?.input;\n\tconst isNotebook = isNotebookEditorInput(activeInput);\n\tif (!isNotebook) {\n\t\treturn;\n\t}\n\n\t// get notebook editor to access all codeEditors\n\tconst notebookEditor = notebookEditorService.retrieveExistingWidgetFromURI(activeInput.resource)?.value;\n\tif (!notebookEditor) {\n\t\treturn;\n\t}\n\n\tconst picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n\t\tid: n.toString(),\n\t\tlabel: n.toString(),\n\t}));\n\n\t// store the initial values of the configuration\n\tconst initialConfig = configurationService.getValue(NotebookSetting.cellEditorOptionsCustomizations) as any;\n\tconst initialInsertSpaces = initialConfig['editor.insertSpaces'];\n\t// remove the initial values from the configuration\n\tdelete initialConfig['editor.indentSize'];\n\tdelete initialConfig['editor.tabSize'];\n\tdelete initialConfig['editor.insertSpaces'];\n\n\tsetTimeout(() => {\n\t\tquickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\") }).then(pick => {\n\t\t\tif (pick) {\n\t\t\t\tconst pickedVal = parseInt(pick.label, 10);\n\t\t\t\tif (displaySizeOnly) {\n\t\t\t\t\tconfigurationService.updateValue(NotebookSetting.cellEditorOptionsCustomizations, {\n\t\t\t\t\t\t...initialConfig,\n\t\t\t\t\t\t'editor.tabSize': pickedVal,\n\t\t\t\t\t\t'editor.indentSize': pickedVal,\n\t\t\t\t\t\t'editor.insertSpaces': initialInsertSpaces\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconfigurationService.updateValue(NotebookSetting.cellEditorOptionsCustomizations, {\n\t\t\t\t\t\t...initialConfig,\n\t\t\t\t\t\t'editor.tabSize': pickedVal,\n\t\t\t\t\t\t'editor.indentSize': pickedVal,\n\t\t\t\t\t\t'editor.insertSpaces': insertSpaces\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t}, 50/* quick input is sensitive to being opened so soon after another */);\n}\n\nfunction convertNotebookIndentation(accessor: ServicesAccessor, tabsToSpaces: boolean): void {\n\tconst editorService = accessor.get(IEditorService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst logService = accessor.get(ILogService);\n\tconst textModelService = accessor.get(ITextModelService);\n\tconst notebookEditorService = accessor.get(INotebookEditorService);\n\tconst bulkEditService = accessor.get(IBulkEditService);\n\n\t// keep this check here to pop on non-notebook\n\tconst activeInput = editorService.activeEditorPane?.input;\n\tconst isNotebook = isNotebookEditorInput(activeInput);\n\tif (!isNotebook) {\n\t\treturn;\n\t}\n\n\t// get notebook editor to access all codeEditors\n\tconst notebookTextModel = notebookEditorService.retrieveExistingWidgetFromURI(activeInput.resource)?.value?.textModel;\n\tif (!notebookTextModel) {\n\t\treturn;\n\t}\n\n\tconst disposable = new DisposableStore();\n\ttry {\n\t\tPromise.all(notebookTextModel.cells.map(async cell => {\n\t\t\tconst ref = await textModelService.createModelReference(cell.uri);\n\t\t\tdisposable.add(ref);\n\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\tconst modelOpts = cell.textModel?.getOptions();\n\t\t\tif (!modelOpts) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst edits = getIndentationEditOperations(textEditorModel, modelOpts.tabSize, tabsToSpaces);\n\n\t\t\tbulkEditService.apply(edits, { label: nls.localize('convertIndentation', \"Convert Indentation\"), code: 'undoredo.convertIndentation', });\n\n\t\t})).then(() => {\n\t\t\t// store the initial values of the configuration\n\t\t\tconst initialConfig = configurationService.getValue(NotebookSetting.cellEditorOptionsCustomizations) as any;\n\t\t\tconst initialIndentSize = initialConfig['editor.indentSize'];\n\t\t\tconst initialTabSize = initialConfig['editor.tabSize'];\n\t\t\t// remove the initial values from the configuration\n\t\t\tdelete initialConfig['editor.indentSize'];\n\t\t\tdelete initialConfig['editor.tabSize'];\n\t\t\tdelete initialConfig['editor.insertSpaces'];\n\n\t\t\tconfigurationService.updateValue(NotebookSetting.cellEditorOptionsCustomizations, {\n\t\t\t\t...initialConfig,\n\t\t\t\t'editor.tabSize': initialTabSize,\n\t\t\t\t'editor.indentSize': initialIndentSize,\n\t\t\t\t'editor.insertSpaces': tabsToSpaces\n\t\t\t});\n\t\t\tdisposable.dispose();\n\t\t});\n\t} catch {\n\t\tlogService.error('Failed to convert indentation to spaces for notebook cells.');\n\t}\n}\n\nfunction getIndentationEditOperations(model: ITextModel, tabSize: number, tabsToSpaces: boolean): ResourceTextEdit[] {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn [];\n\t}\n\n\tlet spaces = '';\n\tfor (let i = 0; i < tabSize; i++) {\n\t\tspaces += ' ';\n\t}\n\n\tconst spacesRegExp = new RegExp(spaces, 'gi');\n\n\tconst edits: ResourceTextEdit[] = [];\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tlet lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (lastIndentationColumn === 0) {\n\t\t\tlastIndentationColumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\tif (lastIndentationColumn === 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n\t\tconst originalIndentation = model.getValueInRange(originalIndentationRange);\n\t\tconst newIndentation = (\n\t\t\ttabsToSpaces\n\t\t\t\t? originalIndentation.replace(/\\t/ig, spaces)\n\t\t\t\t: originalIndentation.replace(spacesRegExp, '\\t')\n\t\t);\n\t\tedits.push(new ResourceTextEdit(model.uri, { range: originalIndentationRange, text: newIndentation }));\n\t}\n\treturn edits;\n}\n\nregisterAction2(NotebookIndentUsingSpaces);\nregisterAction2(NotebookIndentUsingTabs);\nregisterAction2(NotebookChangeTabDisplaySize);\nregisterAction2(NotebookIndentationToSpacesAction);\nregisterAction2(NotebookIndentationToTabsAction);\n"],
  "mappings": "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",
  "names": []
}
