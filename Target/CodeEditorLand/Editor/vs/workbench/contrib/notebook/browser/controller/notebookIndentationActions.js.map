{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/controller/notebookIndentationActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from \"../../../../../base/common/lifecycle.js\";\nimport type { ServicesAccessor } from \"../../../../../editor/browser/editorExtensions.js\";\nimport {\n\tIBulkEditService,\n\tResourceTextEdit,\n} from \"../../../../../editor/browser/services/bulkEditService.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\nimport { ITextModelService } from \"../../../../../editor/common/services/resolverService.js\";\nimport * as nls from \"../../../../../nls.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { ILogService } from \"../../../../../platform/log/common/log.js\";\nimport { IQuickInputService } from \"../../../../../platform/quickinput/common/quickInput.js\";\nimport { IEditorService } from \"../../../../services/editor/common/editorService.js\";\nimport { NotebookSetting } from \"../../common/notebookCommon.js\";\nimport { isNotebookEditorInput } from \"../../common/notebookEditorInput.js\";\nimport { INotebookEditorService } from \"../services/notebookEditorService.js\";\n\nexport class NotebookIndentUsingTabs extends Action2 {\n\tpublic static readonly ID = \"notebook.action.indentUsingTabs\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentUsingTabs.ID,\n\t\t\ttitle: nls.localize(\"indentUsingTabs\", \"Indent Using Tabs\"),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tchangeNotebookIndentation(accessor, false, false);\n\t}\n}\n\nexport class NotebookIndentUsingSpaces extends Action2 {\n\tpublic static readonly ID = \"notebook.action.indentUsingSpaces\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentUsingSpaces.ID,\n\t\t\ttitle: nls.localize(\"indentUsingSpaces\", \"Indent Using Spaces\"),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tchangeNotebookIndentation(accessor, true, false);\n\t}\n}\n\nexport class NotebookChangeTabDisplaySize extends Action2 {\n\tpublic static readonly ID = \"notebook.action.changeTabDisplaySize\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookChangeTabDisplaySize.ID,\n\t\t\ttitle: nls.localize(\n\t\t\t\t\"changeTabDisplaySize\",\n\t\t\t\t\"Change Tab Display Size\",\n\t\t\t),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tchangeNotebookIndentation(accessor, true, true);\n\t}\n}\n\nexport class NotebookIndentationToSpacesAction extends Action2 {\n\tpublic static readonly ID = \"notebook.action.convertIndentationToSpaces\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentationToSpacesAction.ID,\n\t\t\ttitle: nls.localize(\n\t\t\t\t\"convertIndentationToSpaces\",\n\t\t\t\t\"Convert Indentation to Spaces\",\n\t\t\t),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tconvertNotebookIndentation(accessor, true);\n\t}\n}\n\nexport class NotebookIndentationToTabsAction extends Action2 {\n\tpublic static readonly ID = \"notebook.action.convertIndentationToTabs\";\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: NotebookIndentationToTabsAction.ID,\n\t\t\ttitle: nls.localize(\n\t\t\t\t\"convertIndentationToTabs\",\n\t\t\t\t\"Convert Indentation to Tabs\",\n\t\t\t),\n\t\t\tprecondition: undefined,\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tconvertNotebookIndentation(accessor, false);\n\t}\n}\n\nfunction changeNotebookIndentation(\n\taccessor: ServicesAccessor,\n\tinsertSpaces: boolean,\n\tdisplaySizeOnly: boolean,\n) {\n\tconst editorService = accessor.get(IEditorService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst notebookEditorService = accessor.get(INotebookEditorService);\n\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t// keep this check here to pop on non-notebook actions\n\tconst activeInput = editorService.activeEditorPane?.input;\n\tconst isNotebook = isNotebookEditorInput(activeInput);\n\tif (!isNotebook) {\n\t\treturn;\n\t}\n\n\t// get notebook editor to access all codeEditors\n\tconst notebookEditor = notebookEditorService.retrieveExistingWidgetFromURI(\n\t\tactiveInput.resource,\n\t)?.value;\n\tif (!notebookEditor) {\n\t\treturn;\n\t}\n\n\tconst picks = [1, 2, 3, 4, 5, 6, 7, 8].map((n) => ({\n\t\tid: n.toString(),\n\t\tlabel: n.toString(),\n\t}));\n\n\t// store the initial values of the configuration\n\tconst initialConfig = configurationService.getValue(\n\t\tNotebookSetting.cellEditorOptionsCustomizations,\n\t) as any;\n\tconst initialInsertSpaces = initialConfig[\"editor.insertSpaces\"];\n\t// remove the initial values from the configuration\n\tdelete initialConfig[\"editor.indentSize\"];\n\tdelete initialConfig[\"editor.tabSize\"];\n\tdelete initialConfig[\"editor.insertSpaces\"];\n\n\tsetTimeout(() => {\n\t\tquickInputService\n\t\t\t.pick(picks, {\n\t\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"selectTabWidth\",\n\t\t\t\t\t\tcomment: [\"Tab corresponds to the tab key\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"Select Tab Size for Current File\",\n\t\t\t\t),\n\t\t\t})\n\t\t\t.then((pick) => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tconst pickedVal = Number.parseInt(pick.label, 10);\n\t\t\t\t\tif (displaySizeOnly) {\n\t\t\t\t\t\tconfigurationService.updateValue(\n\t\t\t\t\t\t\tNotebookSetting.cellEditorOptionsCustomizations,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...initialConfig,\n\t\t\t\t\t\t\t\t\"editor.tabSize\": pickedVal,\n\t\t\t\t\t\t\t\t\"editor.indentSize\": pickedVal,\n\t\t\t\t\t\t\t\t\"editor.insertSpaces\": initialInsertSpaces,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconfigurationService.updateValue(\n\t\t\t\t\t\t\tNotebookSetting.cellEditorOptionsCustomizations,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...initialConfig,\n\t\t\t\t\t\t\t\t\"editor.tabSize\": pickedVal,\n\t\t\t\t\t\t\t\t\"editor.indentSize\": pickedVal,\n\t\t\t\t\t\t\t\t\"editor.insertSpaces\": insertSpaces,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}, 50 /* quick input is sensitive to being opened so soon after another */);\n}\n\nfunction convertNotebookIndentation(\n\taccessor: ServicesAccessor,\n\ttabsToSpaces: boolean,\n): void {\n\tconst editorService = accessor.get(IEditorService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst logService = accessor.get(ILogService);\n\tconst textModelService = accessor.get(ITextModelService);\n\tconst notebookEditorService = accessor.get(INotebookEditorService);\n\tconst bulkEditService = accessor.get(IBulkEditService);\n\n\t// keep this check here to pop on non-notebook\n\tconst activeInput = editorService.activeEditorPane?.input;\n\tconst isNotebook = isNotebookEditorInput(activeInput);\n\tif (!isNotebook) {\n\t\treturn;\n\t}\n\n\t// get notebook editor to access all codeEditors\n\tconst notebookTextModel =\n\t\tnotebookEditorService.retrieveExistingWidgetFromURI(\n\t\t\tactiveInput.resource,\n\t\t)?.value?.textModel;\n\tif (!notebookTextModel) {\n\t\treturn;\n\t}\n\n\tconst disposable = new DisposableStore();\n\ttry {\n\t\tPromise.all(\n\t\t\tnotebookTextModel.cells.map(async (cell) => {\n\t\t\t\tconst ref = await textModelService.createModelReference(\n\t\t\t\t\tcell.uri,\n\t\t\t\t);\n\t\t\t\tdisposable.add(ref);\n\t\t\t\tconst textEditorModel = ref.object.textEditorModel;\n\n\t\t\t\tconst modelOpts = cell.textModel?.getOptions();\n\t\t\t\tif (!modelOpts) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst edits = getIndentationEditOperations(\n\t\t\t\t\ttextEditorModel,\n\t\t\t\t\tmodelOpts.tabSize,\n\t\t\t\t\ttabsToSpaces,\n\t\t\t\t);\n\n\t\t\t\tbulkEditService.apply(edits, {\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"convertIndentation\",\n\t\t\t\t\t\t\"Convert Indentation\",\n\t\t\t\t\t),\n\t\t\t\t\tcode: \"undoredo.convertIndentation\",\n\t\t\t\t});\n\t\t\t}),\n\t\t).then(() => {\n\t\t\t// store the initial values of the configuration\n\t\t\tconst initialConfig = configurationService.getValue(\n\t\t\t\tNotebookSetting.cellEditorOptionsCustomizations,\n\t\t\t) as any;\n\t\t\tconst initialIndentSize = initialConfig[\"editor.indentSize\"];\n\t\t\tconst initialTabSize = initialConfig[\"editor.tabSize\"];\n\t\t\t// remove the initial values from the configuration\n\t\t\tdelete initialConfig[\"editor.indentSize\"];\n\t\t\tdelete initialConfig[\"editor.tabSize\"];\n\t\t\tdelete initialConfig[\"editor.insertSpaces\"];\n\n\t\t\tconfigurationService.updateValue(\n\t\t\t\tNotebookSetting.cellEditorOptionsCustomizations,\n\t\t\t\t{\n\t\t\t\t\t...initialConfig,\n\t\t\t\t\t\"editor.tabSize\": initialTabSize,\n\t\t\t\t\t\"editor.indentSize\": initialIndentSize,\n\t\t\t\t\t\"editor.insertSpaces\": tabsToSpaces,\n\t\t\t\t},\n\t\t\t);\n\t\t\tdisposable.dispose();\n\t\t});\n\t} catch {\n\t\tlogService.error(\n\t\t\t\"Failed to convert indentation to spaces for notebook cells.\",\n\t\t);\n\t}\n}\n\nfunction getIndentationEditOperations(\n\tmodel: ITextModel,\n\ttabSize: number,\n\ttabsToSpaces: boolean,\n): ResourceTextEdit[] {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn [];\n\t}\n\n\tlet spaces = \"\";\n\tfor (let i = 0; i < tabSize; i++) {\n\t\tspaces += \" \";\n\t}\n\n\tconst spacesRegExp = new RegExp(spaces, \"gi\");\n\n\tconst edits: ResourceTextEdit[] = [];\n\tfor (\n\t\tlet lineNumber = 1, lineCount = model.getLineCount();\n\t\tlineNumber <= lineCount;\n\t\tlineNumber++\n\t) {\n\t\tlet lastIndentationColumn =\n\t\t\tmodel.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (lastIndentationColumn === 0) {\n\t\t\tlastIndentationColumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\tif (lastIndentationColumn === 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst originalIndentationRange = new Range(\n\t\t\tlineNumber,\n\t\t\t1,\n\t\t\tlineNumber,\n\t\t\tlastIndentationColumn,\n\t\t);\n\t\tconst originalIndentation = model.getValueInRange(\n\t\t\toriginalIndentationRange,\n\t\t);\n\t\tconst newIndentation = tabsToSpaces\n\t\t\t? originalIndentation.replace(/\\t/gi, spaces)\n\t\t\t: originalIndentation.replace(spacesRegExp, \"\\t\");\n\t\tedits.push(\n\t\t\tnew ResourceTextEdit(model.uri, {\n\t\t\t\trange: originalIndentationRange,\n\t\t\t\ttext: newIndentation,\n\t\t\t}),\n\t\t);\n\t}\n\treturn edits;\n}\n\nregisterAction2(NotebookIndentUsingSpaces);\nregisterAction2(NotebookIndentUsingTabs);\nregisterAction2(NotebookChangeTabDisplaySize);\nregisterAction2(NotebookIndentationToSpacesAction);\nregisterAction2(NotebookIndentationToTabsAction);\n"],
  "mappings": "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",
  "names": []
}
