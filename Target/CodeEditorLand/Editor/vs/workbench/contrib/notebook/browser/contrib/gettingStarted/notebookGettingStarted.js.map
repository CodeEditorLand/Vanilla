{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/gettingStarted/notebookGettingStarted.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../../../base/common/lifecycle.js\";\nimport { localize2 } from \"../../../../../../nls.js\";\nimport { Categories } from \"../../../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\tIContextKeyService,\n} from \"../../../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../../../platform/storage/common/storage.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n} from \"../../../../../common/contributions.js\";\nimport { Memento } from \"../../../../../common/memento.js\";\nimport { IEditorService } from \"../../../../../services/editor/common/editorService.js\";\nimport { LifecyclePhase } from \"../../../../../services/lifecycle/common/lifecycle.js\";\nimport { NotebookSetting } from \"../../../common/notebookCommon.js\";\nimport { HAS_OPENED_NOTEBOOK } from \"../../../common/notebookContextKeys.js\";\nimport { NotebookEditorInput } from \"../../../common/notebookEditorInput.js\";\n\nconst hasOpenedNotebookKey = \"hasOpenedNotebook\";\nconst hasShownGettingStartedKey = \"hasShownNotebookGettingStarted\";\n\n/**\n * Sets a context key when a notebook has ever been opened by the user\n */\nexport class NotebookGettingStarted\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IEditorService _editorService: IEditorService,\n\t\t@IStorageService _storageService: IStorageService,\n\t\t@IContextKeyService _contextKeyService: IContextKeyService,\n\t\t@ICommandService _commandService: ICommandService,\n\t\t@IConfigurationService _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tconst hasOpenedNotebook =\n\t\t\tHAS_OPENED_NOTEBOOK.bindTo(_contextKeyService);\n\t\tconst memento = new Memento(\"notebookGettingStarted2\", _storageService);\n\t\tconst storedValue = memento.getMemento(\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t\tif (storedValue[hasOpenedNotebookKey]) {\n\t\t\thasOpenedNotebook.set(true);\n\t\t}\n\n\t\tconst needToShowGettingStarted =\n\t\t\t_configurationService.getValue(\n\t\t\t\tNotebookSetting.openGettingStarted,\n\t\t\t) && !storedValue[hasShownGettingStartedKey];\n\t\tif (!storedValue[hasOpenedNotebookKey] || needToShowGettingStarted) {\n\t\t\tconst onDidOpenNotebook = () => {\n\t\t\t\thasOpenedNotebook.set(true);\n\t\t\t\tstoredValue[hasOpenedNotebookKey] = true;\n\n\t\t\t\tif (needToShowGettingStarted) {\n\t\t\t\t\t_commandService.executeCommand(\n\t\t\t\t\t\t\"workbench.action.openWalkthrough\",\n\t\t\t\t\t\t{ category: \"notebooks\", step: \"notebookProfile\" },\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t\tstoredValue[hasShownGettingStartedKey] = true;\n\t\t\t\t}\n\n\t\t\t\tmemento.saveMemento();\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\t_editorService.activeEditor?.typeId === NotebookEditorInput.ID\n\t\t\t) {\n\t\t\t\t// active editor is notebook\n\t\t\t\tonDidOpenNotebook();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst listener = this._register(\n\t\t\t\t_editorService.onDidActiveEditorChange(() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t_editorService.activeEditor?.typeId ===\n\t\t\t\t\t\tNotebookEditorInput.ID\n\t\t\t\t\t) {\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\tonDidOpenNotebook();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n).registerWorkbenchContribution(\n\tNotebookGettingStarted,\n\tLifecyclePhase.Restored,\n);\n\nregisterAction2(\n\tclass NotebookClearNotebookLayoutAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"workbench.notebook.layout.gettingStarted\",\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"workbench.notebook.layout.gettingStarted.label\",\n\t\t\t\t\t\"Reset notebook getting started\",\n\t\t\t\t),\n\t\t\t\tf1: true,\n\t\t\t\tprecondition: ContextKeyExpr.equals(\n\t\t\t\t\t`config.${NotebookSetting.openGettingStarted}`,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor): void {\n\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\tconst memento = new Memento(\n\t\t\t\t\"notebookGettingStarted\",\n\t\t\t\tstorageService,\n\t\t\t);\n\n\t\t\tconst storedValue = memento.getMemento(\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\tstoredValue[hasOpenedNotebookKey] = undefined;\n\t\t\tmemento.saveMemento();\n\t\t}\n\t},\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAGC,cAAc;AAAA,OACR;AACP,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,SAAS,2BAA2B;AAEpC,MAAM,uBAAuB;AAC7B,MAAM,4BAA4B;AAK3B,IAAM,yBAAN,cACE,WAET;AAAA,EA9CA,OA8CA;AAAA;AAAA;AAAA,EACC,YACiB,gBACC,iBACG,oBACH,iBACM,uBACtB;AACD,UAAM;AAEN,UAAM,oBACL,oBAAoB,OAAO,kBAAkB;AAC9C,UAAM,UAAU,IAAI,QAAQ,2BAA2B,eAAe;AACtE,UAAM,cAAc,QAAQ;AAAA,MAC3B,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AACA,QAAI,YAAY,oBAAoB,GAAG;AACtC,wBAAkB,IAAI,IAAI;AAAA,IAC3B;AAEA,UAAM,2BACL,sBAAsB;AAAA,MACrB,gBAAgB;AAAA,IACjB,KAAK,CAAC,YAAY,yBAAyB;AAC5C,QAAI,CAAC,YAAY,oBAAoB,KAAK,0BAA0B;AACnE,YAAM,oBAAoB,6BAAM;AAC/B,0BAAkB,IAAI,IAAI;AAC1B,oBAAY,oBAAoB,IAAI;AAEpC,YAAI,0BAA0B;AAC7B,0BAAgB;AAAA,YACf;AAAA,YACA,EAAE,UAAU,aAAa,MAAM,kBAAkB;AAAA,YACjD;AAAA,UACD;AACA,sBAAY,yBAAyB,IAAI;AAAA,QAC1C;AAEA,gBAAQ,YAAY;AAAA,MACrB,GAd0B;AAgB1B,UACC,eAAe,cAAc,WAAW,oBAAoB,IAC3D;AAED,0BAAkB;AAClB;AAAA,MACD;AAEA,YAAM,WAAW,KAAK;AAAA,QACrB,eAAe,wBAAwB,MAAM;AAC5C,cACC,eAAe,cAAc,WAC7B,oBAAoB,IACnB;AACD,qBAAS,QAAQ;AACjB,8BAAkB;AAAA,UACnB;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;AAlEa,yBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATU;AAoEb,SAAS;AAAA,EACR,oBAAoB;AACrB,EAAE;AAAA,EACD;AAAA,EACA,eAAe;AAChB;AAEA;AAAA,EACC,MAAM,0CAA0C,QAAQ;AAAA,IAvHzD,OAuHyD;AAAA;AAAA;AAAA,IACvD,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO;AAAA,UACN;AAAA,UACA;AAAA,QACD;AAAA,QACA,IAAI;AAAA,QACJ,cAAc,eAAe;AAAA,UAC5B,UAAU,gBAAgB,kBAAkB;AAAA,UAC5C;AAAA,QACD;AAAA,QACA,UAAU,WAAW;AAAA,MACtB,CAAC;AAAA,IACF;AAAA,IACA,IAAI,UAAkC;AACrC,YAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,YAAM,UAAU,IAAI;AAAA,QACnB;AAAA,QACA;AAAA,MACD;AAEA,YAAM,cAAc,QAAQ;AAAA,QAC3B,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AACA,kBAAY,oBAAoB,IAAI;AACpC,cAAQ,YAAY;AAAA,IACrB;AAAA,EACD;AACD;",
  "names": []
}
