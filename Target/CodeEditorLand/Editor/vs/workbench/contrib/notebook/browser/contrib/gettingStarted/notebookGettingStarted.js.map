{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/browser/contrib/gettingStarted/notebookGettingStarted.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { localize2 } from '../../../../../../nls.js';\nimport { Categories } from '../../../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, registerAction2 } from '../../../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../../../platform/registry/common/platform.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../../platform/storage/common/storage.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../../../common/contributions.js';\nimport { Memento } from '../../../../../common/memento.js';\nimport { NotebookSetting } from '../../../common/notebookCommon.js';\nimport { HAS_OPENED_NOTEBOOK } from '../../../common/notebookContextKeys.js';\nimport { NotebookEditorInput } from '../../../common/notebookEditorInput.js';\nimport { IEditorService } from '../../../../../services/editor/common/editorService.js';\nimport { LifecyclePhase } from '../../../../../services/lifecycle/common/lifecycle.js';\n\nconst hasOpenedNotebookKey = 'hasOpenedNotebook';\nconst hasShownGettingStartedKey = 'hasShownNotebookGettingStarted';\n\n/**\n * Sets a context key when a notebook has ever been opened by the user\n */\nexport class NotebookGettingStarted extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IEditorService _editorService: IEditorService,\n\t\t@IStorageService _storageService: IStorageService,\n\t\t@IContextKeyService _contextKeyService: IContextKeyService,\n\t\t@ICommandService _commandService: ICommandService,\n\t\t@IConfigurationService _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tconst hasOpenedNotebook = HAS_OPENED_NOTEBOOK.bindTo(_contextKeyService);\n\t\tconst memento = new Memento('notebookGettingStarted2', _storageService);\n\t\tconst storedValue = memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);\n\t\tif (storedValue[hasOpenedNotebookKey]) {\n\t\t\thasOpenedNotebook.set(true);\n\t\t}\n\n\t\tconst needToShowGettingStarted = _configurationService.getValue(NotebookSetting.openGettingStarted) && !storedValue[hasShownGettingStartedKey];\n\t\tif (!storedValue[hasOpenedNotebookKey] || needToShowGettingStarted) {\n\t\t\tconst onDidOpenNotebook = () => {\n\t\t\t\thasOpenedNotebook.set(true);\n\t\t\t\tstoredValue[hasOpenedNotebookKey] = true;\n\n\t\t\t\tif (needToShowGettingStarted) {\n\t\t\t\t\t_commandService.executeCommand('workbench.action.openWalkthrough', { category: 'notebooks', step: 'notebookProfile' }, true);\n\t\t\t\t\tstoredValue[hasShownGettingStartedKey] = true;\n\t\t\t\t}\n\n\t\t\t\tmemento.saveMemento();\n\t\t\t};\n\n\t\t\tif (_editorService.activeEditor?.typeId === NotebookEditorInput.ID) {\n\t\t\t\t// active editor is notebook\n\t\t\t\tonDidOpenNotebook();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst listener = this._register(_editorService.onDidActiveEditorChange(() => {\n\t\t\t\tif (_editorService.activeEditor?.typeId === NotebookEditorInput.ID) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t\tonDidOpenNotebook();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(NotebookGettingStarted, LifecyclePhase.Restored);\n\nregisterAction2(class NotebookClearNotebookLayoutAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.notebook.layout.gettingStarted',\n\t\t\ttitle: localize2('workbench.notebook.layout.gettingStarted.label', \"Reset notebook getting started\"),\n\t\t\tf1: true,\n\t\t\tprecondition: ContextKeyExpr.equals(`config.${NotebookSetting.openGettingStarted}`, true),\n\t\t\tcategory: Categories.Developer,\n\t\t});\n\t}\n\trun(accessor: ServicesAccessor): void {\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tconst memento = new Memento('notebookGettingStarted', storageService);\n\n\t\tconst storedValue = memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);\n\t\tstoredValue[hasOpenedNotebookKey] = undefined;\n\t\tmemento.saveMemento();\n\t}\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,SAAS,uBAAuB;AACzC,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,gBAAgB,0BAA0B;AACnD,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,wBAAwB,iCAAiC,cAAc,2BAA2B;AAC3G,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAE/B,MAAM,uBAAuB;AAC7B,MAAM,4BAA4B;AAK3B,IAAM,yBAAN,cAAqC,WAA6C;AAAA,EA7BzF,OA6ByF;AAAA;AAAA;AAAA,EAExF,YACiB,gBACC,iBACG,oBACH,iBACM,uBACtB;AACD,UAAM;AAEN,UAAM,oBAAoB,oBAAoB,OAAO,kBAAkB;AACvE,UAAM,UAAU,IAAI,QAAQ,2BAA2B,eAAe;AACtE,UAAM,cAAc,QAAQ,WAAW,aAAa,SAAS,cAAc,IAAI;AAC/E,QAAI,YAAY,oBAAoB,GAAG;AACtC,wBAAkB,IAAI,IAAI;AAAA,IAC3B;AAEA,UAAM,2BAA2B,sBAAsB,SAAS,gBAAgB,kBAAkB,KAAK,CAAC,YAAY,yBAAyB;AAC7I,QAAI,CAAC,YAAY,oBAAoB,KAAK,0BAA0B;AACnE,YAAM,oBAAoB,6BAAM;AAC/B,0BAAkB,IAAI,IAAI;AAC1B,oBAAY,oBAAoB,IAAI;AAEpC,YAAI,0BAA0B;AAC7B,0BAAgB,eAAe,oCAAoC,EAAE,UAAU,aAAa,MAAM,kBAAkB,GAAG,IAAI;AAC3H,sBAAY,yBAAyB,IAAI;AAAA,QAC1C;AAEA,gBAAQ,YAAY;AAAA,MACrB,GAV0B;AAY1B,UAAI,eAAe,cAAc,WAAW,oBAAoB,IAAI;AAEnE,0BAAkB;AAClB;AAAA,MACD;AAEA,YAAM,WAAW,KAAK,UAAU,eAAe,wBAAwB,MAAM;AAC5E,YAAI,eAAe,cAAc,WAAW,oBAAoB,IAAI;AACnE,mBAAS,QAAQ;AACjB,4BAAkB;AAAA,QACnB;AAAA,MACD,CAAC,CAAC;AAAA,IACH;AAAA,EACD;AACD;AA9Ca,yBAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAPU;AAgDb,SAAS,GAAoC,oBAAoB,SAAS,EAAE,8BAA8B,wBAAwB,eAAe,QAAQ;AAEzJ,gBAAgB,MAAM,0CAA0C,QAAQ;AAAA,EA/ExE,OA+EwE;AAAA;AAAA;AAAA,EACvE,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,kDAAkD,gCAAgC;AAAA,MACnG,IAAI;AAAA,MACJ,cAAc,eAAe,OAAO,UAAU,gBAAgB,kBAAkB,IAAI,IAAI;AAAA,MACxF,UAAU,WAAW;AAAA,IACtB,CAAC;AAAA,EACF;AAAA,EACA,IAAI,UAAkC;AACrC,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,UAAU,IAAI,QAAQ,0BAA0B,cAAc;AAEpE,UAAM,cAAc,QAAQ,WAAW,aAAa,SAAS,cAAc,IAAI;AAC/E,gBAAY,oBAAoB,IAAI;AACpC,YAAQ,YAAY;AAAA,EACrB;AACD,CAAC;",
  "names": []
}
