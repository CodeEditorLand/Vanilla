import{localize as i,localize2 as u}from"../../../../../nls.js";import{Action2 as a,MenuId as c,registerAction2 as m}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as g}from"../../../../../platform/contextkey/common/contextkey.js";import"../../../../../platform/instantiation/common/instantiation.js";import{OutlineTarget as C}from"../../../../services/outline/browser/outline.js";import{CellKind as k}from"../../common/notebookCommon.js";import{NotebookOutlineContext as o}from"../contrib/outline/notebookOutline.js";import{CellFoldingState as E}from"../notebookBrowser.js";import*as b from"../notebookIcons.js";import"../viewModel/OutlineEntry.js";import{FoldingController as p}from"./foldingController.js";class f extends a{constructor(){super({id:"notebook.section.runSingleCell",title:{...u("runCell","Run Cell"),mnemonicTitle:i({key:"mirunCell",comment:["&& denotes a mnemonic"]},"&&Run Cell")},shortTitle:i("runCell","Run Cell"),icon:b.executeIcon,menu:[{id:c.NotebookOutlineActionMenu,group:"inline",order:1,when:g.and(o.CellKind.isEqualTo(k.Code),o.OutlineElementTarget.isEqualTo(C.OutlinePane),o.CellHasChildren.toNegated(),o.CellHasHeader.toNegated())}]})}async run(n,e){S(e)&&e.notebookEditor.executeNotebookCells([e.outlineEntry.cell])}}class N extends a{constructor(){super({id:"notebook.section.runCells",title:{...u("runCellsInSection","Run Cells In Section"),mnemonicTitle:i({key:"mirunCellsInSection",comment:["&& denotes a mnemonic"]},"&&Run Cells In Section")},shortTitle:i("runCellsInSection","Run Cells In Section"),menu:[{id:c.NotebookStickyScrollContext,group:"notebookExecution",order:1},{id:c.NotebookOutlineActionMenu,group:"inline",order:1,when:g.and(o.CellKind.isEqualTo(k.Markup),o.OutlineElementTarget.isEqualTo(C.OutlinePane),o.CellHasChildren,o.CellHasHeader)}]})}async run(n,e){if(!S(e))return;const d=e.outlineEntry.cell,t=e.notebookEditor.getViewModel()?.getCellIndex(d);if(t===void 0)return;const r=e.notebookEditor.getViewModel()?.getFoldedLength(t);if(r===void 0)return;const s=e.notebookEditor.getCellsInRange({start:t,end:t+r+1});e.notebookEditor.executeNotebookCells(s)}}class x extends a{constructor(){super({id:"notebook.section.foldSection",title:{...u("foldSection","Fold Section"),mnemonicTitle:i({key:"mifoldSection",comment:["&& denotes a mnemonic"]},"&&Fold Section")},shortTitle:i("foldSection","Fold Section"),menu:[{id:c.NotebookOutlineActionMenu,group:"notebookFolding",order:2,when:g.and(o.CellKind.isEqualTo(k.Markup),o.OutlineElementTarget.isEqualTo(C.OutlinePane),o.CellHasChildren,o.CellHasHeader,o.CellFoldingState.isEqualTo(E.Expanded))}]})}async run(n,e){S(e)&&this.toggleFoldRange(e.outlineEntry,e.notebookEditor)}toggleFoldRange(n,e){const d=e.getContribution(p.id),t=n.index,r=n.level,s=E.Collapsed;d.setFoldingStateDown(t,s,r)}}class T extends a{constructor(){super({id:"notebook.section.expandSection",title:{...u("expandSection","Expand Section"),mnemonicTitle:i({key:"miexpandSection",comment:["&& denotes a mnemonic"]},"&&Expand Section")},shortTitle:i("expandSection","Expand Section"),menu:[{id:c.NotebookOutlineActionMenu,group:"notebookFolding",order:2,when:g.and(o.CellKind.isEqualTo(k.Markup),o.OutlineElementTarget.isEqualTo(C.OutlinePane),o.CellHasChildren,o.CellHasHeader,o.CellFoldingState.isEqualTo(E.Collapsed))}]})}async run(n,e){S(e)&&this.toggleFoldRange(e.outlineEntry,e.notebookEditor)}toggleFoldRange(n,e){const d=e.getContribution(p.id),t=n.index,r=n.level,s=E.Expanded;d.setFoldingStateDown(t,s,r)}}function S(l){return!!(l&&l.notebookEditor&&l.outlineEntry)}m(f),m(N),m(x),m(T);export{T as NotebookExpandSection,x as NotebookFoldSection,N as NotebookRunCellsInSection,f as NotebookRunSingleCellInSection};
