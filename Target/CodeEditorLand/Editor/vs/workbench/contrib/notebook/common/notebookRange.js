function a(e){return!e||typeof e!="object"?!1:typeof e.start=="number"&&typeof e.end=="number"}function f(e){e.sort((t,l)=>t-l);const n=e.shift();return n===void 0?[]:e.reduce((t,l)=>(l<=t[0][1]?t[0][1]=l+1:t.unshift([l,l+1]),t),[[n,n+1]]).reverse().map(t=>({start:t[0],end:t[1]}))}function i(e){return e.reduce((t,l)=>{for(let r=l.start;r<l.end;r++)t.push(r);return t},[])}function o(e){const n=e.sort((r,s)=>r.start-s.start),t=n[0];if(!t)return[];const l=n.reduce((r,s)=>{const u=r[r.length-1];return u.end>=s.start?u.end=Math.max(u.end,s.end):r.push(s),r},[t]);return l.length>1?l.filter(r=>!(r.start===r.end&&r.start===0)):l}function d(e,n){if(e=o(e),n=o(n),e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t].start!==n[t].start||e[t].end!==n[t].end)return!1;return!0}function c(e,n){return n.start>=e.start&&n.end<=e.end}export{f as cellIndexesToRanges,c as cellRangeContains,d as cellRangesEqual,i as cellRangesToIndexes,a as isICellRange,o as reduceCellRanges};
