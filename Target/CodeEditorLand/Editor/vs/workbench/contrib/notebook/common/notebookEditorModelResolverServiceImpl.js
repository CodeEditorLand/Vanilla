var D=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var y=(d,t,e,i)=>{for(var o=i>1?void 0:i?C(t,e):t,r=d.length-1,n;r>=0;r--)(n=d[r])&&(o=(i?n(t,e,o):n(o))||o);return i&&o&&D(t,e,o),o},s=(d,t)=>(e,i)=>t(e,i,d);import{CancellationToken as R}from"../../../../base/common/cancellation.js";import{AsyncEmitter as w,Emitter as k}from"../../../../base/common/event.js";import{combinedDisposable as M,DisposableStore as E,dispose as I,ReferenceCollection as U,toDisposable as W}from"../../../../base/common/lifecycle.js";import{ResourceMap as F}from"../../../../base/common/map.js";import{Schemas as m}from"../../../../base/common/network.js";import{assertIsDefined as x}from"../../../../base/common/types.js";import{URI as g}from"../../../../base/common/uri.js";import{IConfigurationService as T}from"../../../../platform/configuration/common/configuration.js";import"../../../../platform/files/common/files.js";import{IInstantiationService as u}from"../../../../platform/instantiation/common/instantiation.js";import{ITelemetryService as L}from"../../../../platform/telemetry/common/telemetry.js";import{IUriIdentityService as O}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IExtensionService as P}from"../../../services/extensions/common/extensions.js";import{FileWorkingCopyManager as A}from"../../../services/workingCopy/common/fileWorkingCopyManager.js";import{CellUri as $,NotebookSetting as V,NotebookWorkingCopyTypeIdentifier as j}from"./notebookCommon.js";import{NotebookFileWorkingCopyModelFactory as q,SimpleNotebookEditorModel as S}from"./notebookEditorModel.js";import"./notebookEditorModelResolverService.js";import{INotebookLoggingService as B}from"./notebookLoggingService.js";import{NotebookProviderInfo as K}from"./notebookProvider.js";import{INotebookService as _}from"./notebookService.js";let h=class extends U{constructor(e,i,o,r,n){super();this._instantiationService=e;this._notebookService=i;this._configurationService=o;this._telemetryService=r;this._notebookLoggingService=n}_disposables=new E;_workingCopyManagers=new Map;_modelListener=new Map;_onDidSaveNotebook=new k;onDidSaveNotebook=this._onDidSaveNotebook.event;_onDidChangeDirty=new k;onDidChangeDirty=this._onDidChangeDirty.event;_dirtyStates=new F;modelsToDispose=new Set;dispose(){this._disposables.dispose(),this._onDidSaveNotebook.dispose(),this._onDidChangeDirty.dispose(),I(this._modelListener.values()),I(this._workingCopyManagers.values())}isDirty(e){return this._dirtyStates.get(e)??!1}async createReferencedObject(e,i,o,r,n){this.modelsToDispose.delete(e);const p=g.parse(e),l=j.create(i);let b=this._workingCopyManagers.get(l);if(!b){const v=new q(i,this._notebookService,this._configurationService,this._telemetryService,this._notebookLoggingService);b=this._instantiationService.createInstance(A,l,v,v),this._workingCopyManagers.set(l,b)}const N=n||i==="interactive"&&this._configurationService.getValue(V.InteractiveWindowPromptToSave)!==!0,a=await this._instantiationService.createInstance(S,p,o,i,b,N).load({limits:r});let c;return this._modelListener.set(a,M(a.onDidSave(()=>this._onDidSaveNotebook.fire(a.resource)),a.onDidChangeDirty(()=>{const v=a.isDirty();this._dirtyStates.set(a.resource,v),v&&!c?c=this.acquire(e,i):c&&(c.dispose(),c=void 0),this._onDidChangeDirty.fire(a)}),W(()=>c?.dispose()))),a}destroyReferencedObject(e,i){this.modelsToDispose.add(e),(async()=>{try{const o=await i;if(!this.modelsToDispose.has(e)||(o instanceof S&&await o.canDispose(),!this.modelsToDispose.has(e)))return;this._modelListener.get(o)?.dispose(),this._modelListener.delete(o),o.dispose()}catch(o){this._notebookLoggingService.error("NotebookModelCollection","FAILED to destory notebook - "+o)}finally{this.modelsToDispose.delete(e)}})()}};h=y([s(0,u),s(1,_),s(2,T),s(3,L),s(4,B)],h);let f=class{constructor(t,e,i,o){this._notebookService=e;this._extensionService=i;this._uriIdentService=o;this._data=t.createInstance(h),this.onDidSaveNotebook=this._data.onDidSaveNotebook,this.onDidChangeDirty=this._data.onDidChangeDirty}_serviceBrand;_data;onDidSaveNotebook;onDidChangeDirty;_onWillFailWithConflict=new w;onWillFailWithConflict=this._onWillFailWithConflict.event;dispose(){this._data.dispose()}isDirty(t){return this._data.isDirty(t)}createUntitledUri(t){const e=this._notebookService.getContributedNotebookType(x(t));if(!e)throw new Error("UNKNOWN notebook type: "+t);const i=K.possibleFileEnding(e.selectors)??"";for(let o=1;;o++){const r=g.from({scheme:m.untitled,path:`Untitled-${o}${i}`,query:t});if(!this._notebookService.getNotebookTextModel(r))return r}}async validateResourceViewType(t,e){if(!t&&!e)throw new Error("Must provide at least one of resource or viewType");if(t?.scheme===$.scheme)throw new Error(`CANNOT open a cell-uri as notebook. Tried with ${t.toString()}`);const i=this._uriIdentService.asCanonicalUri(t??this.createUntitledUri(e)),o=this._notebookService.getNotebookTextModel(i);if(!e)if(o)e=o.viewType;else{await this._extensionService.whenInstalledExtensionsRegistered();const r=this._notebookService.getContributedNotebookTypes(i);e=r.find(n=>n.priority==="exclusive")?.id??r.find(n=>n.priority==="default")?.id??r[0]?.id}if(!e)throw new Error(`Missing viewType for '${i}'`);if(o&&o.viewType!==e){await this._onWillFailWithConflict.fireAsync({resource:i,viewType:e},R.None);const r=this._notebookService.getNotebookTextModel(i)?.viewType;if(r&&r!==e)throw new Error(`A notebook with view type '${r}' already exists for '${i}', CANNOT create another notebook with view type ${e}`)}return{resource:i,viewType:e}}async createUntitledNotebookTextModel(t){const e=this._uriIdentService.asCanonicalUri(this.createUntitledUri(t));return await this._notebookService.createNotebookTextModel(t,e)}async resolve(t,e,i){let o,r;g.isUri(t)?o=t:t.untitledResource&&(t.untitledResource.scheme===m.untitled?o=t.untitledResource:(o=t.untitledResource.with({scheme:m.untitled}),r=!0));const n=await this.validateResourceViewType(o,e),p=this._data.acquire(n.resource.toString(),n.viewType,r,i?.limits,i?.scratchpad);try{return{object:await p.object,dispose(){p.dispose()}}}catch(l){throw p.dispose(),l}}};f=y([s(0,u),s(1,_),s(2,P),s(3,O)],f);export{f as NotebookModelResolverServiceImpl};
