{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookDiffEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IResourceDiffEditorInput,\n\ttype IResourceSideBySideEditorInput,\n\ttype IUntypedEditorInput,\n\tisResourceDiffEditorInput,\n} from \"../../../common/editor.js\";\nimport { DiffEditorInput } from \"../../../common/editor/diffEditorInput.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { EditorModel } from \"../../../common/editor/editorModel.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport type {\n\tINotebookDiffEditorModel,\n\tIResolvedNotebookEditorModel,\n} from \"./notebookCommon.js\";\nimport { NotebookEditorInput } from \"./notebookEditorInput.js\";\n\nclass NotebookDiffEditorModel\n\textends EditorModel\n\timplements INotebookDiffEditorModel\n{\n\tconstructor(\n\t\treadonly original: IResolvedNotebookEditorModel,\n\t\treadonly modified: IResolvedNotebookEditorModel,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport class NotebookDiffEditorInput extends DiffEditorInput {\n\tstatic create(\n\t\tinstantiationService: IInstantiationService,\n\t\tresource: URI,\n\t\tname: string | undefined,\n\t\tdescription: string | undefined,\n\t\toriginalResource: URI,\n\t\tviewType: string,\n\t) {\n\t\tconst original = NotebookEditorInput.getOrCreate(\n\t\t\tinstantiationService,\n\t\t\toriginalResource,\n\t\t\tundefined,\n\t\t\tviewType,\n\t\t);\n\t\tconst modified = NotebookEditorInput.getOrCreate(\n\t\t\tinstantiationService,\n\t\t\tresource,\n\t\t\tundefined,\n\t\t\tviewType,\n\t\t);\n\t\treturn instantiationService.createInstance(\n\t\t\tNotebookDiffEditorInput,\n\t\t\tname,\n\t\t\tdescription,\n\t\t\toriginal,\n\t\t\tmodified,\n\t\t\tviewType,\n\t\t);\n\t}\n\n\tstatic override readonly ID: string = \"workbench.input.diffNotebookInput\";\n\n\tprivate _modifiedTextModel: IResolvedNotebookEditorModel | null = null;\n\tprivate _originalTextModel: IResolvedNotebookEditorModel | null = null;\n\n\toverride get resource() {\n\t\treturn this.modified.resource;\n\t}\n\n\toverride get editorId() {\n\t\treturn this.viewType;\n\t}\n\n\tprivate _cachedModel: NotebookDiffEditorModel | undefined = undefined;\n\n\tconstructor(\n\t\tname: string | undefined,\n\t\tdescription: string | undefined,\n\t\toverride readonly original: NotebookEditorInput,\n\t\toverride readonly modified: NotebookEditorInput,\n\t\tpublic readonly viewType: string,\n\t\t@IEditorService editorService: IEditorService,\n\t) {\n\t\tsuper(name, description, original, modified, undefined, editorService);\n\t}\n\n\toverride get typeId(): string {\n\t\treturn NotebookDiffEditorInput.ID;\n\t}\n\n\toverride async resolve(): Promise<NotebookDiffEditorModel> {\n\t\tconst [originalEditorModel, modifiedEditorModel] = await Promise.all([\n\t\t\tthis.original.resolve(),\n\t\t\tthis.modified.resolve(),\n\t\t]);\n\n\t\tthis._cachedModel?.dispose();\n\n\t\t// TODO@rebornix check how we restore the editor in text diff editor\n\t\tif (!modifiedEditorModel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Fail to resolve modified editor model for resource ${this.modified.resource} with notebookType ${this.viewType}`,\n\t\t\t);\n\t\t}\n\n\t\tif (!originalEditorModel) {\n\t\t\tthrow new Error(\n\t\t\t\t`Fail to resolve original editor model for resource ${this.original.resource} with notebookType ${this.viewType}`,\n\t\t\t);\n\t\t}\n\n\t\tthis._originalTextModel = originalEditorModel;\n\t\tthis._modifiedTextModel = modifiedEditorModel;\n\t\tthis._cachedModel = new NotebookDiffEditorModel(\n\t\t\tthis._originalTextModel,\n\t\t\tthis._modifiedTextModel,\n\t\t);\n\t\treturn this._cachedModel;\n\t}\n\n\toverride toUntyped(): IResourceDiffEditorInput &\n\t\tIResourceSideBySideEditorInput {\n\t\tconst original = { resource: this.original.resource };\n\t\tconst modified = { resource: this.resource };\n\t\treturn {\n\t\t\toriginal,\n\t\t\tmodified,\n\t\t\tprimary: modified,\n\t\t\tsecondary: original,\n\t\t\toptions: {\n\t\t\t\toverride: this.viewType,\n\t\t\t},\n\t\t};\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof NotebookDiffEditorInput) {\n\t\t\treturn (\n\t\t\t\tthis.modified.matches(otherInput.modified) &&\n\t\t\t\tthis.original.matches(otherInput.original) &&\n\t\t\t\tthis.viewType === otherInput.viewType\n\t\t\t);\n\t\t}\n\n\t\tif (isResourceDiffEditorInput(otherInput)) {\n\t\t\treturn (\n\t\t\t\tthis.modified.matches(otherInput.modified) &&\n\t\t\t\tthis.original.matches(otherInput.original) &&\n\t\t\t\tthis.editorId !== undefined &&\n\t\t\t\t(this.editorId === otherInput.options?.override ||\n\t\t\t\t\totherInput.options?.override === undefined)\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._cachedModel?.dispose();\n\t\tthis._cachedModel = undefined;\n\t\tthis.original.dispose();\n\t\tthis.modified.dispose();\n\t\tthis._originalTextModel = null;\n\t\tthis._modifiedTextModel = null;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
