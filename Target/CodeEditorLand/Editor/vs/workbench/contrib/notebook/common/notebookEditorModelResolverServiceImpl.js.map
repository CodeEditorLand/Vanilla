{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookEditorModelResolverServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { CellUri, IResolvedNotebookEditorModel, NotebookEditorModelCreationOptions, NotebookSetting, NotebookWorkingCopyTypeIdentifier } from './notebookCommon.js';\nimport { NotebookFileWorkingCopyModel, NotebookFileWorkingCopyModelFactory, SimpleNotebookEditorModel } from './notebookEditorModel.js';\nimport { combinedDisposable, DisposableStore, dispose, IDisposable, IReference, ReferenceCollection, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { INotebookService } from './notebookService.js';\nimport { AsyncEmitter, Emitter, Event } from '../../../../base/common/event.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { INotebookConflictEvent, INotebookEditorModelResolverService, IUntitledNotebookResource } from './notebookEditorModelResolverService.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { FileWorkingCopyManager, IFileWorkingCopyManager } from '../../../services/workingCopy/common/fileWorkingCopyManager.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { NotebookProviderInfo } from './notebookProvider.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IFileReadLimits } from '../../../../platform/files/common/files.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { INotebookLoggingService } from './notebookLoggingService.js';\n\nclass NotebookModelReferenceCollection extends ReferenceCollection<Promise<IResolvedNotebookEditorModel>> {\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _workingCopyManagers = new Map<string, IFileWorkingCopyManager<NotebookFileWorkingCopyModel, NotebookFileWorkingCopyModel>>();\n\tprivate readonly _modelListener = new Map<IResolvedNotebookEditorModel, IDisposable>();\n\n\tprivate readonly _onDidSaveNotebook = new Emitter<URI>();\n\treadonly onDidSaveNotebook: Event<URI> = this._onDidSaveNotebook.event;\n\n\tprivate readonly _onDidChangeDirty = new Emitter<IResolvedNotebookEditorModel>();\n\treadonly onDidChangeDirty: Event<IResolvedNotebookEditorModel> = this._onDidChangeDirty.event;\n\n\tprivate readonly _dirtyStates = new ResourceMap<boolean>();\n\n\tprivate readonly modelsToDispose = new Set<string>();\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INotebookLoggingService private readonly _notebookLoggingService: INotebookLoggingService,\n\t) {\n\t\tsuper();\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._onDidSaveNotebook.dispose();\n\t\tthis._onDidChangeDirty.dispose();\n\t\tdispose(this._modelListener.values());\n\t\tdispose(this._workingCopyManagers.values());\n\t}\n\n\tisDirty(resource: URI): boolean {\n\t\treturn this._dirtyStates.get(resource) ?? false;\n\t}\n\n\tprotected async createReferencedObject(key: string, viewType: string, hasAssociatedFilePath: boolean, limits?: IFileReadLimits, isScratchpad?: boolean): Promise<IResolvedNotebookEditorModel> {\n\t\t// Untrack as being disposed\n\t\tthis.modelsToDispose.delete(key);\n\n\t\tconst uri = URI.parse(key);\n\n\t\tconst workingCopyTypeId = NotebookWorkingCopyTypeIdentifier.create(viewType);\n\t\tlet workingCopyManager = this._workingCopyManagers.get(workingCopyTypeId);\n\t\tif (!workingCopyManager) {\n\t\t\tconst factory = new NotebookFileWorkingCopyModelFactory(viewType, this._notebookService, this._configurationService, this._telemetryService, this._notebookLoggingService);\n\t\t\tworkingCopyManager = <IFileWorkingCopyManager<NotebookFileWorkingCopyModel, NotebookFileWorkingCopyModel>><any>this._instantiationService.createInstance(\n\t\t\t\tFileWorkingCopyManager,\n\t\t\t\tworkingCopyTypeId,\n\t\t\t\tfactory,\n\t\t\t\tfactory,\n\t\t\t);\n\t\t\tthis._workingCopyManagers.set(workingCopyTypeId, workingCopyManager);\n\t\t}\n\n\t\tconst isScratchpadView = isScratchpad || (viewType === 'interactive' && this._configurationService.getValue<boolean>(NotebookSetting.InteractiveWindowPromptToSave) !== true);\n\t\tconst model = this._instantiationService.createInstance(SimpleNotebookEditorModel, uri, hasAssociatedFilePath, viewType, workingCopyManager, isScratchpadView);\n\t\tconst result = await model.load({ limits });\n\n\n\t\t// Whenever a notebook model is dirty we automatically reference it so that\n\t\t// we can ensure that at least one reference exists. That guarantees that\n\t\t// a model with unsaved changes is never disposed.\n\t\tlet onDirtyAutoReference: IReference<any> | undefined;\n\n\t\tthis._modelListener.set(result, combinedDisposable(\n\t\t\tresult.onDidSave(() => this._onDidSaveNotebook.fire(result.resource)),\n\t\t\tresult.onDidChangeDirty(() => {\n\t\t\t\tconst isDirty = result.isDirty();\n\t\t\t\tthis._dirtyStates.set(result.resource, isDirty);\n\n\t\t\t\t// isDirty -> add reference\n\t\t\t\t// !isDirty -> free reference\n\t\t\t\tif (isDirty && !onDirtyAutoReference) {\n\t\t\t\t\tonDirtyAutoReference = this.acquire(key, viewType);\n\t\t\t\t} else if (onDirtyAutoReference) {\n\t\t\t\t\tonDirtyAutoReference.dispose();\n\t\t\t\t\tonDirtyAutoReference = undefined;\n\t\t\t\t}\n\n\t\t\t\tthis._onDidChangeDirty.fire(result);\n\t\t\t}),\n\t\t\ttoDisposable(() => onDirtyAutoReference?.dispose()),\n\t\t));\n\t\treturn result;\n\t}\n\n\tprotected destroyReferencedObject(key: string, object: Promise<IResolvedNotebookEditorModel>): void {\n\t\tthis.modelsToDispose.add(key);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst model = await object;\n\n\t\t\t\tif (!this.modelsToDispose.has(key)) {\n\t\t\t\t\t// return if model has been acquired again meanwhile\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (model instanceof SimpleNotebookEditorModel) {\n\t\t\t\t\tawait model.canDispose();\n\t\t\t\t}\n\n\t\t\t\tif (!this.modelsToDispose.has(key)) {\n\t\t\t\t\t// return if model has been acquired again meanwhile\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Finally we can dispose the model\n\t\t\t\tthis._modelListener.get(model)?.dispose();\n\t\t\t\tthis._modelListener.delete(model);\n\t\t\t\tmodel.dispose();\n\t\t\t} catch (err) {\n\t\t\t\tthis._notebookLoggingService.error('NotebookModelCollection', 'FAILED to destory notebook - ' + err);\n\t\t\t} finally {\n\t\t\t\tthis.modelsToDispose.delete(key); // Untrack as being disposed\n\t\t\t}\n\t\t})();\n\t}\n}\n\nexport class NotebookModelResolverServiceImpl implements INotebookEditorModelResolverService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _data: NotebookModelReferenceCollection;\n\n\treadonly onDidSaveNotebook: Event<URI>;\n\treadonly onDidChangeDirty: Event<IResolvedNotebookEditorModel>;\n\n\tprivate readonly _onWillFailWithConflict = new AsyncEmitter<INotebookConflictEvent>();\n\treadonly onWillFailWithConflict = this._onWillFailWithConflict.event;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IUriIdentityService private readonly _uriIdentService: IUriIdentityService,\n\t) {\n\t\tthis._data = instantiationService.createInstance(NotebookModelReferenceCollection);\n\t\tthis.onDidSaveNotebook = this._data.onDidSaveNotebook;\n\t\tthis.onDidChangeDirty = this._data.onDidChangeDirty;\n\t}\n\n\tdispose() {\n\t\tthis._data.dispose();\n\t}\n\n\tisDirty(resource: URI): boolean {\n\t\treturn this._data.isDirty(resource);\n\t}\n\n\tprivate createUntitledUri(notebookType: string) {\n\t\tconst info = this._notebookService.getContributedNotebookType(assertIsDefined(notebookType));\n\t\tif (!info) {\n\t\t\tthrow new Error('UNKNOWN notebook type: ' + notebookType);\n\t\t}\n\n\t\tconst suffix = NotebookProviderInfo.possibleFileEnding(info.selectors) ?? '';\n\t\tfor (let counter = 1; ; counter++) {\n\t\t\tconst candidate = URI.from({ scheme: Schemas.untitled, path: `Untitled-${counter}${suffix}`, query: notebookType });\n\t\t\tif (!this._notebookService.getNotebookTextModel(candidate)) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async validateResourceViewType(uri: URI | undefined, viewType: string | undefined) {\n\t\tif (!uri && !viewType) {\n\t\t\tthrow new Error('Must provide at least one of resource or viewType');\n\t\t}\n\n\t\tif (uri?.scheme === CellUri.scheme) {\n\t\t\tthrow new Error(`CANNOT open a cell-uri as notebook. Tried with ${uri.toString()}`);\n\t\t}\n\n\t\tconst resource = this._uriIdentService.asCanonicalUri(uri ?? this.createUntitledUri(viewType!));\n\n\t\tconst existingNotebook = this._notebookService.getNotebookTextModel(resource);\n\t\tif (!viewType) {\n\t\t\tif (existingNotebook) {\n\t\t\t\tviewType = existingNotebook.viewType;\n\t\t\t} else {\n\t\t\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\t\t\tconst providers = this._notebookService.getContributedNotebookTypes(resource);\n\t\t\t\tviewType = providers.find(provider => provider.priority === 'exclusive')?.id ??\n\t\t\t\t\tproviders.find(provider => provider.priority === 'default')?.id ??\n\t\t\t\t\tproviders[0]?.id;\n\t\t\t}\n\t\t}\n\n\t\tif (!viewType) {\n\t\t\tthrow new Error(`Missing viewType for '${resource}'`);\n\t\t}\n\n\t\tif (existingNotebook && existingNotebook.viewType !== viewType) {\n\n\t\t\tawait this._onWillFailWithConflict.fireAsync({ resource: resource, viewType }, CancellationToken.None);\n\n\t\t\t// check again, listener should have done cleanup\n\t\t\tconst existingViewType2 = this._notebookService.getNotebookTextModel(resource)?.viewType;\n\t\t\tif (existingViewType2 && existingViewType2 !== viewType) {\n\t\t\t\tthrow new Error(`A notebook with view type '${existingViewType2}' already exists for '${resource}', CANNOT create another notebook with view type ${viewType}`);\n\t\t\t}\n\t\t}\n\t\treturn { resource, viewType };\n\t}\n\n\tpublic async createUntitledNotebookTextModel(viewType: string) {\n\t\tconst resource = this._uriIdentService.asCanonicalUri(this.createUntitledUri(viewType));\n\n\t\treturn (await this._notebookService.createNotebookTextModel(viewType, resource));\n\t}\n\n\tasync resolve(resource: URI, viewType?: string, options?: NotebookEditorModelCreationOptions): Promise<IReference<IResolvedNotebookEditorModel>>;\n\tasync resolve(resource: IUntitledNotebookResource, viewType: string, options: NotebookEditorModelCreationOptions): Promise<IReference<IResolvedNotebookEditorModel>>;\n\tasync resolve(arg0: URI | IUntitledNotebookResource, viewType?: string, options?: NotebookEditorModelCreationOptions): Promise<IReference<IResolvedNotebookEditorModel>> {\n\t\tlet resource: URI | undefined;\n\t\tlet hasAssociatedFilePath;\n\t\tif (URI.isUri(arg0)) {\n\t\t\tresource = arg0;\n\t\t} else if (arg0.untitledResource) {\n\t\t\tif (arg0.untitledResource.scheme === Schemas.untitled) {\n\t\t\t\tresource = arg0.untitledResource;\n\t\t\t} else {\n\t\t\t\tresource = arg0.untitledResource.with({ scheme: Schemas.untitled });\n\t\t\t\thasAssociatedFilePath = true;\n\t\t\t}\n\t\t}\n\n\t\tconst validated = await this.validateResourceViewType(resource, viewType);\n\n\t\tconst reference = this._data.acquire(validated.resource.toString(), validated.viewType, hasAssociatedFilePath, options?.limits, options?.scratchpad);\n\t\ttry {\n\t\t\tconst model = await reference.object;\n\t\t\treturn {\n\t\t\t\tobject: model,\n\t\t\t\tdispose() { reference.dispose(); }\n\t\t\t};\n\t\t} catch (err) {\n\t\t\treference.dispose();\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
