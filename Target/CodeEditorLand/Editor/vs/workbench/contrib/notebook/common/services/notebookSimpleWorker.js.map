{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/services/notebookSimpleWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ISequence, LcsDiff } from '../../../../../base/common/diff/diff.js';\nimport { doHash, hash, numberHash } from '../../../../../base/common/hash.js';\nimport { IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IRequestHandler, IWorkerServer } from '../../../../../base/common/worker/simpleWorker.js';\nimport { PieceTreeTextBufferBuilder } from '../../../../../editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { CellKind, ICellDto2, IMainCellDto, INotebookDiffResult, IOutputDto, NotebookCellInternalMetadata, NotebookCellMetadata, NotebookCellsChangedEventDto, NotebookCellsChangeType, NotebookCellTextModelSplice, NotebookDocumentMetadata } from '../notebookCommon.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { SearchParams } from '../../../../../editor/common/model/textModelSearch.js';\nimport { MirrorModel } from '../../../../../editor/common/services/textModelSync/textModelSync.impl.js';\nimport { DefaultEndOfLine } from '../../../../../editor/common/model.js';\nimport { IModelChangedEvent } from '../../../../../editor/common/model/mirrorTextModel.js';\n\nfunction bufferHash(buffer: VSBuffer): number {\n\tlet initialHashVal = numberHash(104579, 0);\n\tfor (let k = 0; k < buffer.buffer.length; k++) {\n\t\tinitialHashVal = doHash(buffer.buffer[k], initialHashVal);\n\t}\n\n\treturn initialHashVal;\n}\n\nclass MirrorCell {\n\tprivate readonly textModel: MirrorModel;\n\tprivate _hash: number | null = null;\n\tpublic get eol() {\n\t\treturn this._eol === '\\r\\n' ? DefaultEndOfLine.CRLF : DefaultEndOfLine.LF;\n\t}\n\tconstructor(\n\t\tpublic readonly handle: number,\n\t\turi: URI,\n\t\tsource: string[],\n\t\tprivate readonly _eol: string,\n\t\tversionId: number,\n\t\tpublic language: string,\n\t\tpublic cellKind: CellKind,\n\t\tpublic outputs: IOutputDto[],\n\t\tpublic metadata?: NotebookCellMetadata,\n\t\tpublic internalMetadata?: NotebookCellInternalMetadata,\n\n\t) {\n\t\tthis.textModel = new MirrorModel(uri, source, _eol, versionId);\n\t}\n\n\tonEvents(e: IModelChangedEvent) {\n\t\tthis.textModel.onEvents(e);\n\t\tthis._hash = null;\n\t}\n\tgetValue(): string {\n\t\treturn this.textModel.getValue();\n\t}\n\n\tgetComparisonValue(): number {\n\t\tthis._hash = hash([hash(this.language), hash(this.getValue()), this.metadata, this.internalMetadata, this.outputs.map(op => ({\n\t\t\toutputs: op.outputs.map(output => ({\n\t\t\t\tmime: output.mime,\n\t\t\t\tdata: bufferHash(output.data)\n\t\t\t})),\n\t\t\tmetadata: op.metadata\n\t\t}))]);\n\t\treturn this._hash;\n\t}\n}\n\nclass MirrorNotebookDocument {\n\tconstructor(\n\t\treadonly uri: URI,\n\t\tpublic cells: MirrorCell[],\n\t\tpublic metadata: NotebookDocumentMetadata,\n\t) {\n\t}\n\n\tacceptModelChanged(event: NotebookCellsChangedEventDto) {\n\t\t// note that the cell content change is not applied to the MirrorCell\n\t\t// but it's fine as if a cell content is modified after the first diff, its position will not change any more\n\t\t// TODO@rebornix, but it might lead to interesting bugs in the future.\n\t\tevent.rawEvents.forEach(e => {\n\t\t\tif (e.kind === NotebookCellsChangeType.ModelChange) {\n\t\t\t\tthis._spliceNotebookCells(e.changes);\n\t\t\t} else if (e.kind === NotebookCellsChangeType.Move) {\n\t\t\t\tconst cells = this.cells.splice(e.index, 1);\n\t\t\t\tthis.cells.splice(e.newIdx, 0, ...cells);\n\t\t\t} else if (e.kind === NotebookCellsChangeType.Output) {\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.outputs = e.outputs;\n\t\t\t} else if (e.kind === NotebookCellsChangeType.ChangeCellLanguage) {\n\t\t\t\tthis._assertIndex(e.index);\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.language = e.language;\n\t\t\t} else if (e.kind === NotebookCellsChangeType.ChangeCellMetadata) {\n\t\t\t\tthis._assertIndex(e.index);\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.metadata = e.metadata;\n\t\t\t} else if (e.kind === NotebookCellsChangeType.ChangeCellInternalMetadata) {\n\t\t\t\tthis._assertIndex(e.index);\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.internalMetadata = e.internalMetadata;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _assertIndex(index: number): void {\n\t\tif (index < 0 || index >= this.cells.length) {\n\t\t\tthrow new Error(`Illegal index ${index}. Cells length: ${this.cells.length}`);\n\t\t}\n\t}\n\n\t_spliceNotebookCells(splices: NotebookCellTextModelSplice<IMainCellDto>[]) {\n\t\tsplices.reverse().forEach(splice => {\n\t\t\tconst cellDtos = splice[2];\n\t\t\tconst newCells = cellDtos.map(cell => {\n\t\t\t\treturn new MirrorCell(\n\t\t\t\t\tcell.handle,\n\t\t\t\t\tURI.parse(cell.url),\n\t\t\t\t\tcell.source,\n\t\t\t\t\tcell.eol,\n\t\t\t\t\tcell.versionId,\n\t\t\t\t\tcell.language,\n\t\t\t\t\tcell.cellKind,\n\t\t\t\t\tcell.outputs,\n\t\t\t\t\tcell.metadata,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tthis.cells.splice(splice[0], splice[1], ...newCells);\n\t\t});\n\t}\n}\n\nclass CellSequence implements ISequence {\n\n\tconstructor(readonly textModel: MirrorNotebookDocument) {\n\t}\n\n\tgetElements(): string[] | number[] | Int32Array {\n\t\tconst hashValue = new Int32Array(this.textModel.cells.length);\n\t\tfor (let i = 0; i < this.textModel.cells.length; i++) {\n\t\t\thashValue[i] = this.textModel.cells[i].getComparisonValue();\n\t\t}\n\n\t\treturn hashValue;\n\t}\n\n\tgetCellHash(cell: ICellDto2) {\n\t\tconst source = Array.isArray(cell.source) ? cell.source.join('\\n') : cell.source;\n\t\tconst hashVal = hash([hash(source), cell.metadata]);\n\t\treturn hashVal;\n\t}\n}\n\nexport class NotebookEditorSimpleWorker implements IRequestHandler, IDisposable {\n\t_requestHandlerBrand: any;\n\n\tprivate _models: { [uri: string]: MirrorNotebookDocument };\n\n\tconstructor() {\n\t\tthis._models = Object.create(null);\n\t}\n\tdispose(): void {\n\t}\n\n\tpublic $acceptNewModel(uri: string, metadata: NotebookDocumentMetadata, cells: IMainCellDto[]): void {\n\t\tthis._models[uri] = new MirrorNotebookDocument(URI.parse(uri), cells.map(dto => new MirrorCell(\n\t\t\tdto.handle,\n\t\t\tURI.parse(dto.url),\n\t\t\tdto.source,\n\t\t\tdto.eol,\n\t\t\tdto.versionId,\n\t\t\tdto.language,\n\t\t\tdto.cellKind,\n\t\t\tdto.outputs,\n\t\t\tdto.metadata\n\t\t)), metadata);\n\t}\n\n\tpublic $acceptModelChanged(strURL: string, event: NotebookCellsChangedEventDto) {\n\t\tconst model = this._models[strURL];\n\t\tmodel?.acceptModelChanged(event);\n\t}\n\n\tpublic $acceptCellModelChanged(strURL: string, handle: number, event: IModelChangedEvent) {\n\t\tconst model = this._models[strURL];\n\t\tmodel.cells.find(cell => cell.handle === handle)?.onEvents(event);\n\t}\n\n\tpublic $acceptRemovedModel(strURL: string): void {\n\t\tif (!this._models[strURL]) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._models[strURL];\n\t}\n\n\t$computeDiff(originalUrl: string, modifiedUrl: string): INotebookDiffResult {\n\t\tconst original = this._getModel(originalUrl);\n\t\tconst modified = this._getModel(modifiedUrl);\n\n\t\tconst diff = new LcsDiff(new CellSequence(original), new CellSequence(modified));\n\t\tconst diffResult = diff.ComputeDiff(false);\n\n\t\t/* let cellLineChanges: { originalCellhandle: number, modifiedCellhandle: number, lineChanges: ILineChange[] }[] = [];\n\n\t\tdiffResult.changes.forEach(change => {\n\t\t\tif (change.modifiedLength === 0) {\n\t\t\t\t// deletion ...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (change.originalLength === 0) {\n\t\t\t\t// insertion\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0, len = Math.min(change.modifiedLength, change.originalLength); i < len; i++) {\n\t\t\t\tlet originalIndex = change.originalStart + i;\n\t\t\t\tlet modifiedIndex = change.modifiedStart + i;\n\n\t\t\t\tconst originalCell = original.cells[originalIndex];\n\t\t\t\tconst modifiedCell = modified.cells[modifiedIndex];\n\n\t\t\t\tif (originalCell.getValue() !== modifiedCell.getValue()) {\n\t\t\t\t\t// console.log(`original cell ${originalIndex} content change`);\n\t\t\t\t\tconst originalLines = originalCell.textBuffer.getLinesContent();\n\t\t\t\t\tconst modifiedLines = modifiedCell.textBuffer.getLinesContent();\n\t\t\t\t\tconst diffComputer = new DiffComputer(originalLines, modifiedLines, {\n\t\t\t\t\t\tshouldComputeCharChanges: true,\n\t\t\t\t\t\tshouldPostProcessCharChanges: true,\n\t\t\t\t\t\tshouldIgnoreTrimWhitespace: false,\n\t\t\t\t\t\tshouldMakePrettyDiff: true,\n\t\t\t\t\t\tmaxComputationTime: 5000\n\t\t\t\t\t});\n\n\t\t\t\t\tconst lineChanges = diffComputer.computeDiff().changes;\n\n\t\t\t\t\tcellLineChanges.push({\n\t\t\t\t\t\toriginalCellhandle: originalCell.handle,\n\t\t\t\t\t\tmodifiedCellhandle: modifiedCell.handle,\n\t\t\t\t\t\tlineChanges\n\t\t\t\t\t});\n\n\t\t\t\t\t// console.log(lineDecorations);\n\n\t\t\t\t} else {\n\t\t\t\t\t// console.log(`original cell ${originalIndex} metadata change`);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n */\n\t\treturn {\n\t\t\tcellsDiff: diffResult,\n\t\t\t// linesDiff: cellLineChanges\n\t\t};\n\t}\n\n\t$canPromptRecommendation(modelUrl: string): boolean {\n\t\tconst model = this._getModel(modelUrl);\n\t\tconst cells = model.cells;\n\n\t\tfor (let i = 0; i < cells.length; i++) {\n\t\t\tconst cell = cells[i];\n\t\t\tif (cell.cellKind === CellKind.Markup) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (cell.language !== 'python') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst searchParams = new SearchParams('import\\\\s*pandas|from\\\\s*pandas', true, false, null);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\n\t\t\tif (!searchData) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst builder = new PieceTreeTextBufferBuilder();\n\t\t\tbuilder.acceptChunk(cell.getValue());\n\t\t\tconst bufferFactory = builder.finish(true);\n\t\t\tconst textBuffer = bufferFactory.create(cell.eol).textBuffer;\n\n\t\t\tconst lineCount = textBuffer.getLineCount();\n\t\t\tconst maxLineCount = Math.min(lineCount, 20);\n\t\t\tconst range = new Range(1, 1, maxLineCount, textBuffer.getLineLength(maxLineCount) + 1);\n\t\t\tconst cellMatches = textBuffer.findMatchesLineByLine(range, searchData, true, 1);\n\t\t\tif (cellMatches.length > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected _getModel(uri: string): MirrorNotebookDocument {\n\t\treturn this._models[uri];\n\t}\n}\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(workerServer: IWorkerServer): IRequestHandler {\n\treturn new NotebookEditorSimpleWorker();\n}\n"],
  "mappings": "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",
  "names": []
}
