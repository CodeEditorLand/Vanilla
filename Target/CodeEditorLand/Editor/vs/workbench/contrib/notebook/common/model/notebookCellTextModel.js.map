{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/model/notebookCellTextModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { hash, StringSHA1 } from '../../../../../base/common/hash.js';\nimport { Disposable, DisposableStore, dispose } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport * as UUID from '../../../../../base/common/uuid.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport * as model from '../../../../../editor/common/model.js';\nimport { PieceTreeTextBuffer } from '../../../../../editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { createTextBuffer, TextModel } from '../../../../../editor/common/model/textModel.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { NotebookCellOutputTextModel } from './notebookCellOutputTextModel.js';\nimport { CellInternalMetadataChangedEvent, CellKind, ICell, ICellDto2, ICellOutput, IOutputDto, IOutputItemDto, NotebookCellCollapseState, NotebookCellInternalMetadata, NotebookCellMetadata, NotebookCellOutputsSplice, TransientCellMetadata, TransientOptions } from '../notebookCommon.js';\nimport { ThrottledDelayer } from '../../../../../base/common/async.js';\nimport { ILanguageDetectionService } from '../../../../services/languageDetection/common/languageDetectionWorkerService.js';\nimport { toFormattedString } from '../../../../../base/common/jsonFormatter.js';\n\nexport class NotebookCellTextModel extends Disposable implements ICell {\n\tprivate readonly _onDidChangeOutputs = this._register(new Emitter<NotebookCellOutputsSplice>());\n\treadonly onDidChangeOutputs: Event<NotebookCellOutputsSplice> = this._onDidChangeOutputs.event;\n\n\tprivate readonly _onDidChangeOutputItems = this._register(new Emitter<void>());\n\treadonly onDidChangeOutputItems: Event<void> = this._onDidChangeOutputItems.event;\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<'content' | 'language' | 'mime'>());\n\treadonly onDidChangeContent: Event<'content' | 'language' | 'mime'> = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeMetadata = this._register(new Emitter<void>());\n\treadonly onDidChangeMetadata: Event<void> = this._onDidChangeMetadata.event;\n\n\tprivate readonly _onDidChangeInternalMetadata = this._register(new Emitter<CellInternalMetadataChangedEvent>());\n\treadonly onDidChangeInternalMetadata: Event<CellInternalMetadataChangedEvent> = this._onDidChangeInternalMetadata.event;\n\n\tprivate readonly _onDidChangeLanguage = this._register(new Emitter<string>());\n\treadonly onDidChangeLanguage: Event<string> = this._onDidChangeLanguage.event;\n\n\tprivate _outputs: NotebookCellOutputTextModel[];\n\n\tget outputs(): ICellOutput[] {\n\t\treturn this._outputs;\n\t}\n\n\tprivate _metadata: NotebookCellMetadata;\n\n\tget metadata() {\n\t\treturn this._metadata;\n\t}\n\n\tset metadata(newMetadata: NotebookCellMetadata) {\n\t\tthis._metadata = newMetadata;\n\t\tthis._hash = null;\n\t\tthis._onDidChangeMetadata.fire();\n\t}\n\n\tprivate _internalMetadata: NotebookCellInternalMetadata;\n\n\tget internalMetadata() {\n\t\treturn this._internalMetadata;\n\t}\n\n\tset internalMetadata(newInternalMetadata: NotebookCellInternalMetadata) {\n\t\tconst lastRunSuccessChanged = this._internalMetadata.lastRunSuccess !== newInternalMetadata.lastRunSuccess;\n\t\tnewInternalMetadata = {\n\t\t\t...newInternalMetadata,\n\t\t\t...{ runStartTimeAdjustment: computeRunStartTimeAdjustment(this._internalMetadata, newInternalMetadata) }\n\t\t};\n\t\tthis._internalMetadata = newInternalMetadata;\n\t\tthis._hash = null;\n\t\tthis._onDidChangeInternalMetadata.fire({ lastRunSuccessChanged });\n\t}\n\n\tget language() {\n\t\treturn this._language;\n\t}\n\n\tset language(newLanguage: string) {\n\t\tif (this._textModel\n\t\t\t// 1. the language update is from workspace edit, checking if it's the same as text model's mode\n\t\t\t&& this._textModel.getLanguageId() === this._languageService.getLanguageIdByLanguageName(newLanguage)\n\t\t\t// 2. the text model's mode might be the same as the `this.language`, even if the language friendly name is not the same, we should not trigger an update\n\t\t\t&& this._textModel.getLanguageId() === this._languageService.getLanguageIdByLanguageName(this.language)) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tthis._hasLanguageSetExplicitly = true;\n\t\tthis._setLanguageInternal(newLanguage);\n\t}\n\n\tpublic get mime(): string | undefined {\n\t\treturn this._mime;\n\t}\n\n\tpublic set mime(newMime: string | undefined) {\n\t\tif (this._mime === newMime) {\n\t\t\treturn;\n\t\t}\n\t\tthis._mime = newMime;\n\t\tthis._hash = null;\n\t\tthis._onDidChangeContent.fire('mime');\n\t}\n\n\tprivate _textBuffer!: model.IReadonlyTextBuffer;\n\n\tget textBuffer() {\n\t\tif (this._textBuffer) {\n\t\t\treturn this._textBuffer;\n\t\t}\n\n\t\tthis._textBuffer = this._register(createTextBuffer(this._source, model.DefaultEndOfLine.LF).textBuffer);\n\n\t\tthis._register(this._textBuffer.onDidChangeContent(() => {\n\t\t\tthis._hash = null;\n\t\t\tif (!this._textModel) {\n\t\t\t\tthis._onDidChangeContent.fire('content');\n\t\t\t}\n\t\t\tthis.autoDetectLanguage();\n\t\t}));\n\n\t\treturn this._textBuffer;\n\t}\n\n\tprivate _textBufferHash: string | null = null;\n\tprivate _hash: number | null = null;\n\n\tprivate _versionId: number = 1;\n\tprivate _alternativeId: number = 1;\n\tget alternativeId(): number {\n\t\treturn this._alternativeId;\n\t}\n\n\tprivate readonly _textModelDisposables = this._register(new DisposableStore());\n\tprivate _textModel: TextModel | undefined = undefined;\n\tget textModel(): TextModel | undefined {\n\t\treturn this._textModel;\n\t}\n\n\tset textModel(m: TextModel | undefined) {\n\t\tif (this._textModel === m) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._textModelDisposables.clear();\n\t\tthis._textModel = m;\n\t\tif (this._textModel) {\n\t\t\tthis.setRegisteredLanguage(this._languageService, this._textModel.getLanguageId(), this.language);\n\n\t\t\t// Listen to language changes on the model\n\t\t\tthis._textModelDisposables.add(this._textModel.onDidChangeLanguage((e) => this.setRegisteredLanguage(this._languageService, e.newLanguage, this.language)));\n\t\t\tthis._textModelDisposables.add(this._textModel.onWillDispose(() => this.textModel = undefined));\n\t\t\tthis._textModelDisposables.add(this._textModel.onDidChangeContent(() => {\n\t\t\t\tif (this._textModel) {\n\t\t\t\t\tthis._versionId = this._textModel.getVersionId();\n\t\t\t\t\tthis._alternativeId = this._textModel.getAlternativeVersionId();\n\t\t\t\t}\n\t\t\t\tthis._textBufferHash = null;\n\t\t\t\tthis._onDidChangeContent.fire('content');\n\t\t\t}));\n\n\t\t\tthis._textModel._overwriteVersionId(this._versionId);\n\t\t\tthis._textModel._overwriteAlternativeVersionId(this._versionId);\n\t\t}\n\t}\n\n\tprivate setRegisteredLanguage(languageService: ILanguageService, newLanguage: string, currentLanguage: string) {\n\t\t// The language defined in the cell might not be supported in the editor so the text model might be using the default fallback\n\t\t// If so let's not modify the language\n\t\tconst isFallBackLanguage = (newLanguage === PLAINTEXT_LANGUAGE_ID || newLanguage === 'jupyter');\n\t\tif (!languageService.isRegisteredLanguageId(currentLanguage) && isFallBackLanguage) {\n\t\t\t// notify to display warning, but don't change the language\n\t\t\tthis._onDidChangeLanguage.fire(currentLanguage);\n\t\t} else {\n\t\t\tthis.language = newLanguage;\n\t\t}\n\t}\n\tprivate static readonly AUTO_DETECT_LANGUAGE_THROTTLE_DELAY = 600;\n\tprivate readonly autoDetectLanguageThrottler = this._register(new ThrottledDelayer<void>(NotebookCellTextModel.AUTO_DETECT_LANGUAGE_THROTTLE_DELAY));\n\tprivate _autoLanguageDetectionEnabled: boolean = false;\n\tprivate _hasLanguageSetExplicitly: boolean = false;\n\tget hasLanguageSetExplicitly(): boolean { return this._hasLanguageSetExplicitly; }\n\n\tconstructor(\n\t\treadonly uri: URI,\n\t\tpublic readonly handle: number,\n\t\tprivate readonly _source: string,\n\t\tprivate _language: string,\n\t\tprivate _mime: string | undefined,\n\t\tpublic readonly cellKind: CellKind,\n\t\toutputs: IOutputDto[],\n\t\tmetadata: NotebookCellMetadata | undefined,\n\t\tinternalMetadata: NotebookCellInternalMetadata | undefined,\n\t\tpublic readonly collapseState: NotebookCellCollapseState | undefined,\n\t\tpublic readonly transientOptions: TransientOptions,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _languageDetectionService: ILanguageDetectionService | undefined = undefined\n\t) {\n\t\tsuper();\n\t\tthis._outputs = outputs.map(op => new NotebookCellOutputTextModel(op));\n\t\tthis._metadata = metadata ?? {};\n\t\tthis._internalMetadata = internalMetadata ?? {};\n\t}\n\n\tenableAutoLanguageDetection() {\n\t\tthis._autoLanguageDetectionEnabled = true;\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tasync autoDetectLanguage(): Promise<void> {\n\t\tif (this._autoLanguageDetectionEnabled) {\n\t\t\tthis.autoDetectLanguageThrottler.trigger(() => this._doAutoDetectLanguage());\n\t\t}\n\t}\n\n\tprivate async _doAutoDetectLanguage(): Promise<void> {\n\t\tif (this.hasLanguageSetExplicitly) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newLanguage = await this._languageDetectionService?.detectLanguage(this.uri);\n\t\tif (!newLanguage) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._textModel\n\t\t\t&& this._textModel.getLanguageId() === this._languageService.getLanguageIdByLanguageName(newLanguage)\n\t\t\t&& this._textModel.getLanguageId() === this._languageService.getLanguageIdByLanguageName(this.language)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._setLanguageInternal(newLanguage);\n\t}\n\n\tprivate _setLanguageInternal(newLanguage: string) {\n\t\tconst newLanguageId = this._languageService.getLanguageIdByLanguageName(newLanguage);\n\n\t\tif (newLanguageId === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._textModel) {\n\t\t\tconst languageId = this._languageService.createById(newLanguageId);\n\t\t\tthis._textModel.setLanguage(languageId.languageId);\n\t\t}\n\n\t\tif (this._language === newLanguage) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._language = newLanguage;\n\t\tthis._hash = null;\n\t\tthis._onDidChangeLanguage.fire(newLanguage);\n\t\tthis._onDidChangeContent.fire('language');\n\t}\n\n\tresetTextBuffer(textBuffer: model.ITextBuffer) {\n\t\tthis._textBuffer = textBuffer;\n\t}\n\n\tgetValue(): string {\n\t\tconst fullRange = this.getFullModelRange();\n\t\tconst eol = this.textBuffer.getEOL();\n\t\tif (eol === '\\n') {\n\t\t\treturn this.textBuffer.getValueInRange(fullRange, model.EndOfLinePreference.LF);\n\t\t} else {\n\t\t\treturn this.textBuffer.getValueInRange(fullRange, model.EndOfLinePreference.CRLF);\n\t\t}\n\t}\n\n\tgetTextBufferHash() {\n\t\tif (this._textBufferHash !== null) {\n\t\t\treturn this._textBufferHash;\n\t\t}\n\n\t\tconst shaComputer = new StringSHA1();\n\t\tconst snapshot = this.textBuffer.createSnapshot(false);\n\t\tlet text: string | null;\n\t\twhile ((text = snapshot.read())) {\n\t\t\tshaComputer.update(text);\n\t\t}\n\t\tthis._textBufferHash = shaComputer.digest();\n\t\treturn this._textBufferHash;\n\t}\n\n\tgetHashValue(): number {\n\t\tif (this._hash !== null) {\n\t\t\treturn this._hash;\n\t\t}\n\n\t\tthis._hash = hash([hash(this.language), this.getTextBufferHash(), this._getPersisentMetadata(), this.transientOptions.transientOutputs ? [] : this._outputs.map(op => ({\n\t\t\toutputs: op.outputs.map(output => ({\n\t\t\t\tmime: output.mime,\n\t\t\t\tdata: Array.from(output.data.buffer)\n\t\t\t})),\n\t\t\tmetadata: op.metadata\n\t\t}))]);\n\t\treturn this._hash;\n\t}\n\n\tprivate _getPersisentMetadata() {\n\t\treturn getFormattedMetadataJSON(this.transientOptions.transientCellMetadata, this.metadata, this.language);\n\t}\n\n\tgetTextLength(): number {\n\t\treturn this.textBuffer.getLength();\n\t}\n\n\tgetFullModelRange() {\n\t\tconst lineCount = this.textBuffer.getLineCount();\n\t\treturn new Range(1, 1, lineCount, this.textBuffer.getLineLength(lineCount) + 1);\n\t}\n\n\tspliceNotebookCellOutputs(splice: NotebookCellOutputsSplice): void {\n\t\tif (splice.deleteCount > 0 && splice.newOutputs.length > 0) {\n\t\t\tconst commonLen = Math.min(splice.deleteCount, splice.newOutputs.length);\n\t\t\t// update\n\t\t\tfor (let i = 0; i < commonLen; i++) {\n\t\t\t\tconst currentOutput = this.outputs[splice.start + i];\n\t\t\t\tconst newOutput = splice.newOutputs[i];\n\n\t\t\t\tthis.replaceOutput(currentOutput.outputId, newOutput);\n\t\t\t}\n\n\t\t\tconst removed = this.outputs.splice(splice.start + commonLen, splice.deleteCount - commonLen, ...splice.newOutputs.slice(commonLen));\n\t\t\tremoved.forEach(output => output.dispose());\n\t\t\tthis._onDidChangeOutputs.fire({ start: splice.start + commonLen, deleteCount: splice.deleteCount - commonLen, newOutputs: splice.newOutputs.slice(commonLen) });\n\t\t} else {\n\t\t\tconst removed = this.outputs.splice(splice.start, splice.deleteCount, ...splice.newOutputs);\n\t\t\tremoved.forEach(output => output.dispose());\n\t\t\tthis._onDidChangeOutputs.fire(splice);\n\t\t}\n\t}\n\n\treplaceOutput(outputId: string, newOutputItem: ICellOutput) {\n\t\tconst outputIndex = this.outputs.findIndex(output => output.outputId === outputId);\n\n\t\tif (outputIndex < 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst output = this.outputs[outputIndex];\n\t\t// convert to dto and dispose the cell output model\n\t\toutput.replaceData({\n\t\t\toutputs: newOutputItem.outputs,\n\t\t\toutputId: newOutputItem.outputId,\n\t\t\tmetadata: newOutputItem.metadata\n\t\t});\n\t\tnewOutputItem.dispose();\n\t\tthis._onDidChangeOutputItems.fire();\n\t\treturn true;\n\t}\n\n\tchangeOutputItems(outputId: string, append: boolean, items: IOutputItemDto[]): boolean {\n\t\tconst outputIndex = this.outputs.findIndex(output => output.outputId === outputId);\n\n\t\tif (outputIndex < 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst output = this.outputs[outputIndex];\n\t\tif (append) {\n\t\t\toutput.appendData(items);\n\t\t} else {\n\t\t\toutput.replaceData({ outputId: outputId, outputs: items, metadata: output.metadata });\n\t\t}\n\t\tthis._onDidChangeOutputItems.fire();\n\t\treturn true;\n\t}\n\n\tprivate _outputNotEqualFastCheck(left: ICellOutput[], right: ICellOutput[]) {\n\t\tif (left.length !== right.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < this.outputs.length; i++) {\n\t\t\tconst l = left[i];\n\t\t\tconst r = right[i];\n\n\t\t\tif (l.outputs.length !== r.outputs.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfor (let k = 0; k < l.outputs.length; k++) {\n\t\t\t\tif (l.outputs[k].mime !== r.outputs[k].mime) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (l.outputs[k].data.byteLength !== r.outputs[k].data.byteLength) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tequal(b: NotebookCellTextModel): boolean {\n\t\tif (this.language !== b.language) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.outputs.length !== b.outputs.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.getTextLength() !== b.getTextLength()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.transientOptions.transientOutputs) {\n\t\t\t// compare outputs\n\n\t\t\tif (!this._outputNotEqualFastCheck(this.outputs, b.outputs)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn this.getHashValue() === b.getHashValue();\n\t}\n\n\t/**\n\t * Only compares\n\t * - language\n\t * - mime\n\t * - cellKind\n\t * - internal metadata\n\t * - source\n\t */\n\tfastEqual(b: ICellDto2): boolean {\n\t\tif (this.language !== b.language) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.mime !== b.mime) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.cellKind !== b.cellKind) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.internalMetadata?.executionOrder !== b.internalMetadata?.executionOrder\n\t\t\t|| this.internalMetadata?.lastRunSuccess !== b.internalMetadata?.lastRunSuccess\n\t\t\t|| this.internalMetadata?.runStartTime !== b.internalMetadata?.runStartTime\n\t\t\t|| this.internalMetadata?.runStartTimeAdjustment !== b.internalMetadata?.runStartTimeAdjustment\n\t\t\t|| this.internalMetadata?.runEndTime !== b.internalMetadata?.runEndTime) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Once we attach the cell text buffer to an editor, the source of truth is the text buffer instead of the original source\n\t\tif (this._textBuffer && this.getValue() !== b.source) {\n\t\t\treturn false;\n\t\t} else if (this._source !== b.source) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\toverride dispose() {\n\t\tdispose(this._outputs);\n\t\t// Manually release reference to previous text buffer to avoid large leaks\n\t\t// in case someone leaks a CellTextModel reference\n\t\tconst emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n\t\temptyDisposedTextBuffer.dispose();\n\t\tthis._textBuffer = emptyDisposedTextBuffer;\n\t\tsuper.dispose();\n\t}\n}\n\nexport function cloneNotebookCellTextModel(cell: NotebookCellTextModel) {\n\treturn {\n\t\tsource: cell.getValue(),\n\t\tlanguage: cell.language,\n\t\tmime: cell.mime,\n\t\tcellKind: cell.cellKind,\n\t\toutputs: cell.outputs.map(output => ({\n\t\t\toutputs: output.outputs,\n\t\t\t/* paste should generate new outputId */ outputId: UUID.generateUuid()\n\t\t})),\n\t\tmetadata: {}\n\t};\n}\n\nfunction computeRunStartTimeAdjustment(oldMetadata: NotebookCellInternalMetadata, newMetadata: NotebookCellInternalMetadata): number | undefined {\n\tif (oldMetadata.runStartTime !== newMetadata.runStartTime && typeof newMetadata.runStartTime === 'number') {\n\t\tconst offset = Date.now() - newMetadata.runStartTime;\n\t\treturn offset < 0 ? Math.abs(offset) : 0;\n\t} else {\n\t\treturn newMetadata.runStartTimeAdjustment;\n\t}\n}\n\n\nexport function getFormattedMetadataJSON(transientCellMetadata: TransientCellMetadata | undefined, metadata: NotebookCellMetadata, language?: string) {\n\tlet filteredMetadata: { [key: string]: any } = {};\n\n\tif (transientCellMetadata) {\n\t\tconst keys = new Set([...Object.keys(metadata)]);\n\t\tfor (const key of keys) {\n\t\t\tif (!(transientCellMetadata[key as keyof NotebookCellMetadata])\n\t\t\t) {\n\t\t\t\tfilteredMetadata[key] = metadata[key as keyof NotebookCellMetadata];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfilteredMetadata = metadata;\n\t}\n\n\tconst obj = {\n\t\tlanguage,\n\t\t...filteredMetadata\n\t};\n\t// Give preference to the language we have been given.\n\t// Metadata can contain `language` due to round-tripping of cell metadata.\n\t// I.e. we add it here, and then from SCM when we revert the cell, we get this same metadata back with the `language` property.\n\tif (language) {\n\t\tobj.language = language;\n\t}\n\tconst metadataSource = toFormattedString(obj, {});\n\n\treturn metadataSource;\n}\n"],
  "mappings": "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",
  "names": ["output"]
}
