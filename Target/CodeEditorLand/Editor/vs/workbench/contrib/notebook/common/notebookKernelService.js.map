{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookKernelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IAction } from \"../../../../base/common/actions.js\";\nimport type { AsyncIterableObject } from \"../../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { INotebookKernelSourceAction } from \"./notebookCommon.js\";\n\nexport interface ISelectedNotebooksChangeEvent {\n\tnotebook: URI;\n\toldKernel: string | undefined;\n\tnewKernel: string | undefined;\n}\n\nexport interface INotebookKernelMatchResult {\n\treadonly selected: INotebookKernel | undefined;\n\treadonly suggestions: INotebookKernel[];\n\treadonly all: INotebookKernel[];\n\treadonly hidden: INotebookKernel[];\n}\n\nexport interface INotebookKernelChangeEvent {\n\tlabel?: true;\n\tdescription?: true;\n\tdetail?: true;\n\tsupportedLanguages?: true;\n\thasExecutionOrder?: true;\n\thasInterruptHandler?: true;\n\thasVariableProvider?: true;\n}\n\nexport interface VariablesResult {\n\tid: number;\n\tname: string;\n\tvalue: string;\n\ttype?: string;\n\thasNamedChildren: boolean;\n\tindexedChildrenCount: number;\n}\n\nexport const variablePageSize = 100;\n\nexport interface INotebookKernel {\n\treadonly id: string;\n\treadonly viewType: string;\n\treadonly onDidChange: Event<Readonly<INotebookKernelChangeEvent>>;\n\treadonly extension: ExtensionIdentifier;\n\n\treadonly localResourceRoot: URI;\n\treadonly preloadUris: URI[];\n\treadonly preloadProvides: string[];\n\n\tlabel: string;\n\tdescription?: string;\n\tdetail?: string;\n\tsupportedLanguages: string[];\n\timplementsInterrupt?: boolean;\n\timplementsExecutionOrder?: boolean;\n\thasVariableProvider?: boolean;\n\n\texecuteNotebookCellsRequest(uri: URI, cellHandles: number[]): Promise<void>;\n\tcancelNotebookCellExecution(uri: URI, cellHandles: number[]): Promise<void>;\n\n\tprovideVariables(\n\t\tnotebookUri: URI,\n\t\tparentId: number | undefined,\n\t\tkind: \"named\" | \"indexed\",\n\t\tstart: number,\n\t\ttoken: CancellationToken,\n\t): AsyncIterableObject<VariablesResult>;\n}\n\nexport enum ProxyKernelState {\n\tDisconnected = 1,\n\tConnected = 2,\n\tInitializing = 3,\n}\n\nexport interface INotebookProxyKernelChangeEvent\n\textends INotebookKernelChangeEvent {\n\tconnectionState?: true;\n}\n\nexport interface INotebookKernelDetectionTask {\n\treadonly notebookType: string;\n}\n\nexport interface ISourceAction {\n\treadonly action: IAction;\n\treadonly onDidChangeState: Event<void>;\n\treadonly isPrimary?: boolean;\n\texecution: Promise<void> | undefined;\n\trunAction: () => Promise<void>;\n}\n\nexport interface INotebookSourceActionChangeEvent {\n\tnotebook?: URI;\n\tviewType: string;\n}\n\nexport interface IKernelSourceActionProvider {\n\treadonly viewType: string;\n\tonDidChangeSourceActions?: Event<void>;\n\tprovideKernelSourceActions(): Promise<INotebookKernelSourceAction[]>;\n}\n\nexport interface INotebookTextModelLike {\n\turi: URI;\n\tnotebookType: string;\n}\n\nexport const INotebookKernelService = createDecorator<INotebookKernelService>(\n\t\"INotebookKernelService\",\n);\n\nexport interface INotebookKernelService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidAddKernel: Event<INotebookKernel>;\n\treadonly onDidRemoveKernel: Event<INotebookKernel>;\n\treadonly onDidChangeSelectedNotebooks: Event<ISelectedNotebooksChangeEvent>;\n\treadonly onDidChangeNotebookAffinity: Event<void>;\n\treadonly onDidNotebookVariablesUpdate: Event<URI>;\n\tregisterKernel(kernel: INotebookKernel): IDisposable;\n\n\tgetMatchingKernel(\n\t\tnotebook: INotebookTextModelLike,\n\t): INotebookKernelMatchResult;\n\n\t/**\n\t * Returns the selected or only available kernel.\n\t */\n\tgetSelectedOrSuggestedKernel(\n\t\tnotebook: INotebookTextModelLike,\n\t): INotebookKernel | undefined;\n\n\t/**\n\t * Bind a notebook document to a kernel. A notebook is only bound to one kernel\n\t * but a kernel can be bound to many notebooks (depending on its configuration)\n\t */\n\tselectKernelForNotebook(\n\t\tkernel: INotebookKernel,\n\t\tnotebook: INotebookTextModelLike,\n\t): void;\n\n\t/**\n\t * Set the kernel that a notebook should use when it starts up\n\t */\n\tpreselectKernelForNotebook(\n\t\tkernel: INotebookKernel,\n\t\tnotebook: INotebookTextModelLike,\n\t): void;\n\n\t/**\n\t * Set a perference of a kernel for a certain notebook. Higher values win, `undefined` removes the preference\n\t */\n\tupdateKernelNotebookAffinity(\n\t\tkernel: INotebookKernel,\n\t\tnotebook: URI,\n\t\tpreference: number | undefined,\n\t): void;\n\n\t//#region Kernel detection tasks\n\treadonly onDidChangeKernelDetectionTasks: Event<string>;\n\tregisterNotebookKernelDetectionTask(\n\t\ttask: INotebookKernelDetectionTask,\n\t): IDisposable;\n\tgetKernelDetectionTasks(\n\t\tnotebook: INotebookTextModelLike,\n\t): INotebookKernelDetectionTask[];\n\t//#endregion\n\n\t//#region Kernel source actions\n\treadonly onDidChangeSourceActions: Event<INotebookSourceActionChangeEvent>;\n\tgetSourceActions(\n\t\tnotebook: INotebookTextModelLike,\n\t\tcontextKeyService: IContextKeyService | undefined,\n\t): ISourceAction[];\n\tgetRunningSourceActions(notebook: INotebookTextModelLike): ISourceAction[];\n\tregisterKernelSourceActionProvider(\n\t\tviewType: string,\n\t\tprovider: IKernelSourceActionProvider,\n\t): IDisposable;\n\tgetKernelSourceActions2(\n\t\tnotebook: INotebookTextModelLike,\n\t): Promise<INotebookKernelSourceAction[]>;\n\t//#endregion\n\n\tnotifyVariablesChange(notebookUri: URI): void;\n}\n\nexport const INotebookKernelHistoryService =\n\tcreateDecorator<INotebookKernelHistoryService>(\n\t\t\"INotebookKernelHistoryService\",\n\t);\nexport interface INotebookKernelHistoryService {\n\t_serviceBrand: undefined;\n\tgetKernels(notebook: INotebookTextModelLike): {\n\t\tselected: INotebookKernel | undefined;\n\t\tall: INotebookKernel[];\n\t};\n\taddMostRecentKernel(kernel: INotebookKernel): void;\n}\n"],
  "mappings": "AAaA,SAAS,uBAAuB;AAmCzB,MAAM,mBAAmB;AAgCzB,IAAK,mBAAL,kBAAKA,sBAAL;AACN,EAAAA,oCAAA,kBAAe,KAAf;AACA,EAAAA,oCAAA,eAAY,KAAZ;AACA,EAAAA,oCAAA,kBAAe,KAAf;AAHW,SAAAA;AAAA,GAAA;AAuCL,MAAM,yBAAyB;AAAA,EACrC;AACD;AA8EO,MAAM,gCACZ;AAAA,EACC;AACD;",
  "names": ["ProxyKernelState"]
}
