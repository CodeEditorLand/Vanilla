{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookCommon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDiffResult } from '../../../../base/common/diff/diff.js';\nimport { Event } from '../../../../base/common/event.js';\nimport * as glob from '../../../../base/common/glob.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { basename } from '../../../../base/common/path.js';\nimport { isWindows } from '../../../../base/common/platform.js';\nimport { ISplice } from '../../../../base/common/sequence.js';\nimport { ThemeColor } from '../../../../base/common/themables.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { ILineChange } from '../../../../editor/common/diff/legacyLinesDiffComputer.js';\nimport * as editorCommon from '../../../../editor/common/editorCommon.js';\nimport { Command, WorkspaceEditMetadata } from '../../../../editor/common/languages.js';\nimport { IReadonlyTextBuffer } from '../../../../editor/common/model.js';\nimport { IAccessibilityInformation } from '../../../../platform/accessibility/common/accessibility.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IFileReadLimits } from '../../../../platform/files/common/files.js';\nimport { UndoRedoGroup } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { IRevertOptions, ISaveOptions, IUntypedEditorInput } from '../../../common/editor.js';\nimport { NotebookTextModel } from './model/notebookTextModel.js';\nimport { ICellExecutionError } from './notebookExecutionStateService.js';\nimport { INotebookTextModelLike } from './notebookKernelService.js';\nimport { ICellRange } from './notebookRange.js';\nimport { RegisteredEditorPriority } from '../../../services/editor/common/editorResolverService.js';\nimport { generateMetadataUri, generate as generateUri, parseMetadataUri, parse as parseUri } from '../../../services/notebook/common/notebookDocumentService.js';\nimport { IWorkingCopyBackupMeta, IWorkingCopySaveEvent } from '../../../services/workingCopy/common/workingCopy.js';\n\nexport const NOTEBOOK_EDITOR_ID = 'workbench.editor.notebook';\nexport const NOTEBOOK_DIFF_EDITOR_ID = 'workbench.editor.notebookTextDiffEditor';\nexport const NOTEBOOK_MULTI_DIFF_EDITOR_ID = 'workbench.editor.notebookMultiTextDiffEditor';\nexport const INTERACTIVE_WINDOW_EDITOR_ID = 'workbench.editor.interactive';\nexport const REPL_EDITOR_ID = 'workbench.editor.repl';\n\nexport const EXECUTE_REPL_COMMAND_ID = 'replNotebook.input.execute';\n\nexport enum CellKind {\n\tMarkup = 1,\n\tCode = 2\n}\n\nexport const NOTEBOOK_DISPLAY_ORDER: readonly string[] = [\n\t'application/json',\n\t'application/javascript',\n\t'text/html',\n\t'image/svg+xml',\n\tMimes.latex,\n\tMimes.markdown,\n\t'image/png',\n\t'image/jpeg',\n\tMimes.text\n];\n\nexport const ACCESSIBLE_NOTEBOOK_DISPLAY_ORDER: readonly string[] = [\n\tMimes.latex,\n\tMimes.markdown,\n\t'application/json',\n\t'text/html',\n\t'image/svg+xml',\n\t'image/png',\n\t'image/jpeg',\n\tMimes.text,\n];\n\n/**\n * A mapping of extension IDs who contain renderers, to notebook ids who they\n * should be treated as the same in the renderer selection logic. This is used\n * to prefer the 1st party Jupyter renderers even though they're in a separate\n * extension, for instance. See #136247.\n */\nexport const RENDERER_EQUIVALENT_EXTENSIONS: ReadonlyMap<string, ReadonlySet<string>> = new Map([\n\t['ms-toolsai.jupyter', new Set(['jupyter-notebook', 'interactive'])],\n\t['ms-toolsai.jupyter-renderers', new Set(['jupyter-notebook', 'interactive'])],\n]);\n\nexport const RENDERER_NOT_AVAILABLE = '_notAvailable';\n\nexport type ContributedNotebookRendererEntrypoint = string | { readonly extends: string; readonly path: string };\n\nexport enum NotebookRunState {\n\tRunning = 1,\n\tIdle = 2\n}\n\nexport type NotebookDocumentMetadata = Record<string, unknown>;\n\nexport enum NotebookCellExecutionState {\n\tUnconfirmed = 1,\n\tPending = 2,\n\tExecuting = 3\n}\nexport enum NotebookExecutionState {\n\tUnconfirmed = 1,\n\tPending = 2,\n\tExecuting = 3\n}\n\nexport interface INotebookCellPreviousExecutionResult {\n\texecutionOrder?: number;\n\tsuccess?: boolean;\n\tduration?: number;\n}\n\nexport interface NotebookCellMetadata {\n\t/**\n\t * custom metadata\n\t */\n\t[key: string]: unknown;\n}\n\nexport interface NotebookCellInternalMetadata {\n\texecutionId?: string;\n\texecutionOrder?: number;\n\tlastRunSuccess?: boolean;\n\trunStartTime?: number;\n\trunStartTimeAdjustment?: number;\n\trunEndTime?: number;\n\trenderDuration?: { [key: string]: number };\n\terror?: ICellExecutionError;\n}\n\nexport interface NotebookCellCollapseState {\n\tinputCollapsed?: boolean;\n\toutputCollapsed?: boolean;\n}\n\nexport interface NotebookCellDefaultCollapseConfig {\n\tcodeCell?: NotebookCellCollapseState;\n\tmarkupCell?: NotebookCellCollapseState;\n}\n\nexport type InteractiveWindowCollapseCodeCells = 'always' | 'never' | 'fromEditor';\n\nexport type TransientCellMetadata = { readonly [K in keyof NotebookCellMetadata]?: boolean };\nexport type CellContentMetadata = { readonly [K in keyof NotebookCellMetadata]?: boolean };\nexport type TransientDocumentMetadata = { readonly [K in keyof NotebookDocumentMetadata]?: boolean };\n\nexport interface TransientOptions {\n\treadonly transientOutputs: boolean;\n\treadonly transientCellMetadata: TransientCellMetadata;\n\treadonly transientDocumentMetadata: TransientDocumentMetadata;\n\treadonly cellContentMetadata: CellContentMetadata;\n}\n\n/** Note: enum values are used for sorting */\nexport const enum NotebookRendererMatch {\n\t/** Renderer has a hard dependency on an available kernel */\n\tWithHardKernelDependency = 0,\n\t/** Renderer works better with an available kernel */\n\tWithOptionalKernelDependency = 1,\n\t/** Renderer is kernel-agnostic */\n\tPure = 2,\n\t/** Renderer is for a different mimeType or has a hard dependency which is unsatisfied */\n\tNever = 3,\n}\n\n/**\n * Renderer messaging requirement. While this allows for 'optional' messaging,\n * VS Code effectively treats it the same as true right now. \"Partial\n * activation\" of extensions is a very tricky problem, which could allow\n * solving this. But for now, optional is mostly only honored for aznb.\n */\nexport const enum RendererMessagingSpec {\n\tAlways = 'always',\n\tNever = 'never',\n\tOptional = 'optional',\n}\n\nexport type NotebookRendererEntrypoint = { readonly extends: string | undefined; readonly path: URI };\n\nexport interface INotebookRendererInfo {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly entrypoint: NotebookRendererEntrypoint;\n\treadonly extensionLocation: URI;\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly messaging: RendererMessagingSpec;\n\n\treadonly mimeTypes: readonly string[];\n\n\treadonly isBuiltin: boolean;\n\n\tmatchesWithoutKernel(mimeType: string): NotebookRendererMatch;\n\tmatches(mimeType: string, kernelProvides: ReadonlyArray<string>): NotebookRendererMatch;\n}\n\nexport interface INotebookStaticPreloadInfo {\n\treadonly type: string;\n\treadonly entrypoint: URI;\n\treadonly extensionLocation: URI;\n\treadonly localResourceRoots: readonly URI[];\n}\n\nexport interface IOrderedMimeType {\n\tmimeType: string;\n\trendererId: string;\n\tisTrusted: boolean;\n}\n\nexport interface IOutputItemDto {\n\treadonly mime: string;\n\treadonly data: VSBuffer;\n}\n\nexport interface IOutputDto {\n\toutputs: IOutputItemDto[];\n\toutputId: string;\n\tmetadata?: Record<string, any>;\n}\n\nexport interface ICellOutput {\n\treadonly versionId: number;\n\toutputs: IOutputItemDto[];\n\tmetadata?: Record<string, any>;\n\toutputId: string;\n\t/**\n\t * Alternative output id that's reused when the output is updated.\n\t */\n\talternativeOutputId: string;\n\tonDidChangeData: Event<void>;\n\treplaceData(items: IOutputDto): void;\n\tappendData(items: IOutputItemDto[]): void;\n\tappendedSinceVersion(versionId: number, mime: string): VSBuffer | undefined;\n\tasDto(): IOutputDto;\n\tbumpVersion(): void;\n\tdispose(): void;\n}\n\nexport interface CellInternalMetadataChangedEvent {\n\treadonly lastRunSuccessChanged?: boolean;\n}\n\nexport interface ICell {\n\treadonly uri: URI;\n\thandle: number;\n\tlanguage: string;\n\tcellKind: CellKind;\n\toutputs: ICellOutput[];\n\tmetadata: NotebookCellMetadata;\n\tinternalMetadata: NotebookCellInternalMetadata;\n\tgetHashValue(): number;\n\ttextBuffer: IReadonlyTextBuffer;\n\tonDidChangeOutputs?: Event<NotebookCellOutputsSplice>;\n\tonDidChangeOutputItems?: Event<void>;\n\tonDidChangeLanguage: Event<string>;\n\tonDidChangeMetadata: Event<void>;\n\tonDidChangeInternalMetadata: Event<CellInternalMetadataChangedEvent>;\n}\n\nexport interface INotebookTextModel extends INotebookTextModelLike {\n\treadonly notebookType: string;\n\treadonly viewType: string;\n\tmetadata: NotebookDocumentMetadata;\n\treadonly transientOptions: TransientOptions;\n\treadonly uri: URI;\n\treadonly versionId: number;\n\treadonly length: number;\n\treadonly cells: readonly ICell[];\n\treset(cells: ICellDto2[], metadata: NotebookDocumentMetadata, transientOptions: TransientOptions): void;\n\tapplyEdits(rawEdits: ICellEditOperation[], synchronous: boolean, beginSelectionState: ISelectionState | undefined, endSelectionsComputer: () => ISelectionState | undefined, undoRedoGroup: UndoRedoGroup | undefined, computeUndoRedo?: boolean): boolean;\n\tonDidChangeContent: Event<NotebookTextModelChangedEvent>;\n\tonWillDispose: Event<void>;\n}\n\nexport type NotebookCellTextModelSplice<T> = [\n\tstart: number,\n\tdeleteCount: number,\n\tnewItems: T[]\n];\n\nexport type NotebookCellOutputsSplice = {\n\tstart: number /* start */;\n\tdeleteCount: number /* delete count */;\n\tnewOutputs: ICellOutput[];\n};\n\nexport interface IMainCellDto {\n\thandle: number;\n\turl: string;\n\tsource: string[];\n\teol: string;\n\tversionId: number;\n\tlanguage: string;\n\tcellKind: CellKind;\n\toutputs: IOutputDto[];\n\tmetadata?: NotebookCellMetadata;\n\tinternalMetadata?: NotebookCellInternalMetadata;\n}\n\nexport enum NotebookCellsChangeType {\n\tModelChange = 1,\n\tMove = 2,\n\tChangeCellLanguage = 5,\n\tInitialize = 6,\n\tChangeCellMetadata = 7,\n\tOutput = 8,\n\tOutputItem = 9,\n\tChangeCellContent = 10,\n\tChangeDocumentMetadata = 11,\n\tChangeCellInternalMetadata = 12,\n\tChangeCellMime = 13,\n\tUnknown = 100\n}\n\nexport interface NotebookCellsInitializeEvent<T> {\n\treadonly kind: NotebookCellsChangeType.Initialize;\n\treadonly changes: NotebookCellTextModelSplice<T>[];\n}\n\nexport interface NotebookCellContentChangeEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellContent;\n\treadonly index: number;\n}\n\nexport interface NotebookCellsModelChangedEvent<T> {\n\treadonly kind: NotebookCellsChangeType.ModelChange;\n\treadonly changes: NotebookCellTextModelSplice<T>[];\n}\n\nexport interface NotebookCellsModelMoveEvent<T> {\n\treadonly kind: NotebookCellsChangeType.Move;\n\treadonly index: number;\n\treadonly length: number;\n\treadonly newIdx: number;\n\treadonly cells: T[];\n}\n\nexport interface NotebookOutputChangedEvent {\n\treadonly kind: NotebookCellsChangeType.Output;\n\treadonly index: number;\n\treadonly outputs: IOutputDto[];\n\treadonly append: boolean;\n}\n\nexport interface NotebookOutputItemChangedEvent {\n\treadonly kind: NotebookCellsChangeType.OutputItem;\n\treadonly index: number;\n\treadonly outputId: string;\n\treadonly outputItems: IOutputItemDto[];\n\treadonly append: boolean;\n}\n\nexport interface NotebookCellsChangeLanguageEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellLanguage;\n\treadonly index: number;\n\treadonly language: string;\n}\n\nexport interface NotebookCellsChangeMimeEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellMime;\n\treadonly index: number;\n\treadonly mime: string | undefined;\n}\n\nexport interface NotebookCellsChangeMetadataEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellMetadata;\n\treadonly index: number;\n\treadonly metadata: NotebookCellMetadata;\n}\n\nexport interface NotebookCellsChangeInternalMetadataEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellInternalMetadata;\n\treadonly index: number;\n\treadonly internalMetadata: NotebookCellInternalMetadata;\n}\n\nexport interface NotebookDocumentChangeMetadataEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeDocumentMetadata;\n\treadonly metadata: NotebookDocumentMetadata;\n}\n\nexport interface NotebookDocumentUnknownChangeEvent {\n\treadonly kind: NotebookCellsChangeType.Unknown;\n}\n\nexport type NotebookRawContentEventDto = NotebookCellsInitializeEvent<IMainCellDto> | NotebookDocumentChangeMetadataEvent | NotebookCellContentChangeEvent | NotebookCellsModelChangedEvent<IMainCellDto> | NotebookCellsModelMoveEvent<IMainCellDto> | NotebookOutputChangedEvent | NotebookOutputItemChangedEvent | NotebookCellsChangeLanguageEvent | NotebookCellsChangeMimeEvent | NotebookCellsChangeMetadataEvent | NotebookCellsChangeInternalMetadataEvent | NotebookDocumentUnknownChangeEvent;\n\nexport type NotebookCellsChangedEventDto = {\n\treadonly rawEvents: NotebookRawContentEventDto[];\n\treadonly versionId: number;\n};\n\nexport type NotebookRawContentEvent = (NotebookCellsInitializeEvent<ICell> | NotebookDocumentChangeMetadataEvent | NotebookCellContentChangeEvent | NotebookCellsModelChangedEvent<ICell> | NotebookCellsModelMoveEvent<ICell> | NotebookOutputChangedEvent | NotebookOutputItemChangedEvent | NotebookCellsChangeLanguageEvent | NotebookCellsChangeMimeEvent | NotebookCellsChangeMetadataEvent | NotebookCellsChangeInternalMetadataEvent | NotebookDocumentUnknownChangeEvent) & { transient: boolean };\n\nexport enum SelectionStateType {\n\tHandle = 0,\n\tIndex = 1\n}\n\nexport interface ISelectionHandleState {\n\tkind: SelectionStateType.Handle;\n\tprimary: number | null;\n\tselections: number[];\n}\n\nexport interface ISelectionIndexState {\n\tkind: SelectionStateType.Index;\n\tfocus: ICellRange;\n\tselections: ICellRange[];\n}\n\nexport type ISelectionState = ISelectionHandleState | ISelectionIndexState;\n\nexport type NotebookTextModelChangedEvent = {\n\treadonly rawEvents: NotebookRawContentEvent[];\n\treadonly versionId: number;\n\treadonly synchronous: boolean | undefined;\n\treadonly endSelectionState: ISelectionState | undefined;\n};\n\nexport type NotebookTextModelWillAddRemoveEvent = {\n\treadonly rawEvent: NotebookCellsModelChangedEvent<ICell>;\n};\n\nexport const enum CellEditType {\n\tReplace = 1,\n\tOutput = 2,\n\tMetadata = 3,\n\tCellLanguage = 4,\n\tDocumentMetadata = 5,\n\tMove = 6,\n\tOutputItems = 7,\n\tPartialMetadata = 8,\n\tPartialInternalMetadata = 9,\n}\n\nexport interface ICellDto2 {\n\tsource: string;\n\tlanguage: string;\n\tmime: string | undefined;\n\tcellKind: CellKind;\n\toutputs: IOutputDto[];\n\tmetadata?: NotebookCellMetadata;\n\tinternalMetadata?: NotebookCellInternalMetadata;\n\tcollapseState?: NotebookCellCollapseState;\n}\n\nexport interface ICellReplaceEdit {\n\teditType: CellEditType.Replace;\n\tindex: number;\n\tcount: number;\n\tcells: ICellDto2[];\n}\n\nexport interface ICellOutputEdit {\n\teditType: CellEditType.Output;\n\tindex: number;\n\toutputs: IOutputDto[];\n\tappend?: boolean;\n}\n\nexport interface ICellOutputEditByHandle {\n\teditType: CellEditType.Output;\n\thandle: number;\n\toutputs: IOutputDto[];\n\tappend?: boolean;\n}\n\nexport interface ICellOutputItemEdit {\n\teditType: CellEditType.OutputItems;\n\toutputId: string;\n\titems: IOutputItemDto[];\n\tappend?: boolean;\n}\n\nexport interface ICellMetadataEdit {\n\teditType: CellEditType.Metadata;\n\tindex: number;\n\tmetadata: NotebookCellMetadata;\n}\n\n// These types are nullable because we need to use 'null' on the EH side so it is JSON-stringified\nexport type NullablePartialNotebookCellMetadata = {\n\t[Key in keyof Partial<NotebookCellMetadata>]: NotebookCellMetadata[Key] | null\n};\n\nexport interface ICellPartialMetadataEdit {\n\teditType: CellEditType.PartialMetadata;\n\tindex: number;\n\tmetadata: NullablePartialNotebookCellMetadata;\n}\n\nexport interface ICellPartialMetadataEditByHandle {\n\teditType: CellEditType.PartialMetadata;\n\thandle: number;\n\tmetadata: NullablePartialNotebookCellMetadata;\n}\n\nexport type NullablePartialNotebookCellInternalMetadata = {\n\t[Key in keyof Partial<NotebookCellInternalMetadata>]: NotebookCellInternalMetadata[Key] | null\n};\nexport interface ICellPartialInternalMetadataEdit {\n\teditType: CellEditType.PartialInternalMetadata;\n\tindex: number;\n\tinternalMetadata: NullablePartialNotebookCellInternalMetadata;\n}\n\nexport interface ICellPartialInternalMetadataEditByHandle {\n\teditType: CellEditType.PartialInternalMetadata;\n\thandle: number;\n\tinternalMetadata: NullablePartialNotebookCellInternalMetadata;\n}\n\nexport interface ICellLanguageEdit {\n\teditType: CellEditType.CellLanguage;\n\tindex: number;\n\tlanguage: string;\n}\n\nexport interface IDocumentMetadataEdit {\n\teditType: CellEditType.DocumentMetadata;\n\tmetadata: NotebookDocumentMetadata;\n}\n\nexport interface ICellMoveEdit {\n\teditType: CellEditType.Move;\n\tindex: number;\n\tlength: number;\n\tnewIdx: number;\n}\n\nexport type IImmediateCellEditOperation = ICellOutputEditByHandle | ICellPartialMetadataEditByHandle | ICellOutputItemEdit | ICellPartialInternalMetadataEdit | ICellPartialInternalMetadataEditByHandle | ICellPartialMetadataEdit;\nexport type ICellEditOperation = IImmediateCellEditOperation | ICellReplaceEdit | ICellOutputEdit | ICellMetadataEdit | ICellPartialMetadataEdit | ICellPartialInternalMetadataEdit | IDocumentMetadataEdit | ICellMoveEdit | ICellOutputItemEdit | ICellLanguageEdit;\n\n\nexport interface IWorkspaceNotebookCellEdit {\n\tmetadata?: WorkspaceEditMetadata;\n\tresource: URI;\n\tnotebookVersionId: number | undefined;\n\tcellEdit: ICellPartialMetadataEdit | IDocumentMetadataEdit | ICellReplaceEdit;\n}\n\nexport interface IWorkspaceNotebookCellEditDto {\n\tmetadata?: WorkspaceEditMetadata;\n\tresource: URI;\n\tnotebookVersionId: number | undefined;\n\tcellEdit: ICellPartialMetadataEdit | IDocumentMetadataEdit | ICellReplaceEdit;\n}\n\nexport interface NotebookData {\n\treadonly cells: ICellDto2[];\n\treadonly metadata: NotebookDocumentMetadata;\n}\n\n\nexport interface INotebookContributionData {\n\textension?: ExtensionIdentifier;\n\tproviderDisplayName: string;\n\tdisplayName: string;\n\tfilenamePattern: (string | glob.IRelativePattern | INotebookExclusiveDocumentFilter)[];\n\tpriority?: RegisteredEditorPriority;\n}\n\nexport namespace NotebookUri {\n\texport const scheme = Schemas.vscodeNotebookMetadata;\n\texport function generate(notebook: URI): URI {\n\t\treturn generateMetadataUri(notebook);\n\t}\n\texport function parse(metadata: URI): URI | undefined {\n\t\treturn parseMetadataUri(metadata);\n\t}\n}\n\nexport namespace CellUri {\n\texport const scheme = Schemas.vscodeNotebookCell;\n\texport function generate(notebook: URI, handle: number): URI {\n\t\treturn generateUri(notebook, handle);\n\t}\n\n\texport function parse(cell: URI): { notebook: URI; handle: number } | undefined {\n\t\treturn parseUri(cell);\n\t}\n\n\texport function generateCellOutputUri(notebook: URI, outputId?: string) {\n\t\treturn notebook.with({\n\t\t\tscheme: Schemas.vscodeNotebookCellOutput,\n\t\t\tfragment: `op${outputId ?? ''},${notebook.scheme !== Schemas.file ? notebook.scheme : ''}`\n\t\t});\n\t}\n\n\texport function parseCellOutputUri(uri: URI): { notebook: URI; outputId?: string } | undefined {\n\t\tif (uri.scheme !== Schemas.vscodeNotebookCellOutput) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst match = /^op([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?\\,(.*)$/i.exec(uri.fragment);\n\t\tif (!match) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst outputId = (match[1] && match[1] !== '') ? match[1] : undefined;\n\t\tconst scheme = match[2];\n\t\treturn {\n\t\t\toutputId,\n\t\t\tnotebook: uri.with({\n\t\t\t\tscheme: scheme || Schemas.file,\n\t\t\t\tfragment: null\n\t\t\t})\n\t\t};\n\t}\n\n\texport function generateCellPropertyUri(notebook: URI, handle: number, scheme: string): URI {\n\t\treturn CellUri.generate(notebook, handle).with({ scheme: scheme });\n\t}\n\n\texport function parseCellPropertyUri(uri: URI, propertyScheme: string) {\n\t\tif (uri.scheme !== propertyScheme) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn CellUri.parse(uri.with({ scheme: scheme }));\n\t}\n}\n\nconst normalizeSlashes = (str: string) => isWindows ? str.replace(/\\//g, '\\\\') : str;\n\ninterface IMimeTypeWithMatcher {\n\tpattern: string;\n\tmatches: glob.ParsedPattern;\n}\n\nexport class MimeTypeDisplayOrder {\n\tprivate readonly order: IMimeTypeWithMatcher[];\n\n\tconstructor(\n\t\tinitialValue: readonly string[] = [],\n\t\tprivate readonly defaultOrder = NOTEBOOK_DISPLAY_ORDER,\n\t) {\n\t\tthis.order = [...new Set(initialValue)].map(pattern => ({\n\t\t\tpattern,\n\t\t\tmatches: glob.parse(normalizeSlashes(pattern))\n\t\t}));\n\t}\n\n\t/**\n\t * Returns a sorted array of the input mimetypes.\n\t */\n\tpublic sort(mimetypes: Iterable<string>): string[] {\n\t\tconst remaining = new Map(Iterable.map(mimetypes, m => [m, normalizeSlashes(m)]));\n\t\tlet sorted: string[] = [];\n\n\t\tfor (const { matches } of this.order) {\n\t\t\tfor (const [original, normalized] of remaining) {\n\t\t\t\tif (matches(normalized)) {\n\t\t\t\t\tsorted.push(original);\n\t\t\t\t\tremaining.delete(original);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (remaining.size) {\n\t\t\tsorted = sorted.concat([...remaining.keys()].sort(\n\t\t\t\t(a, b) => this.defaultOrder.indexOf(a) - this.defaultOrder.indexOf(b),\n\t\t\t));\n\t\t}\n\n\t\treturn sorted;\n\t}\n\n\t/**\n\t * Records that the user selected the given mimetype over the other\n\t * possible mimetypes, prioritizing it for future reference.\n\t */\n\tpublic prioritize(chosenMimetype: string, otherMimetypes: readonly string[]) {\n\t\tconst chosenIndex = this.findIndex(chosenMimetype);\n\t\tif (chosenIndex === -1) {\n\t\t\t// always first, nothing more to do\n\t\t\tthis.order.unshift({ pattern: chosenMimetype, matches: glob.parse(normalizeSlashes(chosenMimetype)) });\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the other mimetypes that are before the chosenMimetype. Then, move\n\t\t// them after it, retaining order.\n\t\tconst uniqueIndicies = new Set(otherMimetypes.map(m => this.findIndex(m, chosenIndex)));\n\t\tuniqueIndicies.delete(-1);\n\t\tconst otherIndices = Array.from(uniqueIndicies).sort();\n\t\tthis.order.splice(chosenIndex + 1, 0, ...otherIndices.map(i => this.order[i]));\n\n\t\tfor (let oi = otherIndices.length - 1; oi >= 0; oi--) {\n\t\t\tthis.order.splice(otherIndices[oi], 1);\n\t\t}\n\t}\n\n\t/**\n\t * Gets an array of in-order mimetype preferences.\n\t */\n\tpublic toArray() {\n\t\treturn this.order.map(o => o.pattern);\n\t}\n\n\tprivate findIndex(mimeType: string, maxIndex = this.order.length) {\n\t\tconst normalized = normalizeSlashes(mimeType);\n\t\tfor (let i = 0; i < maxIndex; i++) {\n\t\t\tif (this.order[i].matches(normalized)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n}\n\ninterface IMutableSplice<T> extends ISplice<T> {\n\treadonly toInsert: T[];\n\tdeleteCount: number;\n}\n\nexport function diff<T>(before: T[], after: T[], contains: (a: T) => boolean, equal: (a: T, b: T) => boolean = (a: T, b: T) => a === b): ISplice<T>[] {\n\tconst result: IMutableSplice<T>[] = [];\n\n\tfunction pushSplice(start: number, deleteCount: number, toInsert: T[]): void {\n\t\tif (deleteCount === 0 && toInsert.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst latest = result[result.length - 1];\n\n\t\tif (latest && latest.start + latest.deleteCount === start) {\n\t\t\tlatest.deleteCount += deleteCount;\n\t\t\tlatest.toInsert.push(...toInsert);\n\t\t} else {\n\t\t\tresult.push({ start, deleteCount, toInsert });\n\t\t}\n\t}\n\n\tlet beforeIdx = 0;\n\tlet afterIdx = 0;\n\n\twhile (true) {\n\t\tif (beforeIdx === before.length) {\n\t\t\tpushSplice(beforeIdx, 0, after.slice(afterIdx));\n\t\t\tbreak;\n\t\t}\n\n\t\tif (afterIdx === after.length) {\n\t\t\tpushSplice(beforeIdx, before.length - beforeIdx, []);\n\t\t\tbreak;\n\t\t}\n\n\t\tconst beforeElement = before[beforeIdx];\n\t\tconst afterElement = after[afterIdx];\n\n\t\tif (equal(beforeElement, afterElement)) {\n\t\t\t// equal\n\t\t\tbeforeIdx += 1;\n\t\t\tafterIdx += 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (contains(afterElement)) {\n\t\t\t// `afterElement` exists before, which means some elements before `afterElement` are deleted\n\t\t\tpushSplice(beforeIdx, 1, []);\n\t\t\tbeforeIdx += 1;\n\t\t} else {\n\t\t\t// `afterElement` added\n\t\t\tpushSplice(beforeIdx, 0, [afterElement]);\n\t\t\tafterIdx += 1;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport interface ICellEditorViewState {\n\tselections: editorCommon.ICursorState[];\n}\n\nexport const NOTEBOOK_EDITOR_CURSOR_BOUNDARY = new RawContextKey<'none' | 'top' | 'bottom' | 'both'>('notebookEditorCursorAtBoundary', 'none');\n\nexport const NOTEBOOK_EDITOR_CURSOR_LINE_BOUNDARY = new RawContextKey<'none' | 'start' | 'end' | 'both'>('notebookEditorCursorAtLineBoundary', 'none');\n\nexport interface INotebookLoadOptions {\n\t/**\n\t * Go to disk bypassing any cache of the model if any.\n\t */\n\tforceReadFromFile?: boolean;\n\t/**\n\t * If provided, the size of the file will be checked against the limits\n\t * and an error will be thrown if any limit is exceeded.\n\t */\n\treadonly limits?: IFileReadLimits;\n}\n\nexport type NotebookEditorModelCreationOptions = {\n\tlimits?: IFileReadLimits;\n\tscratchpad?: boolean;\n};\n\nexport interface IResolvedNotebookEditorModel extends INotebookEditorModel {\n\tnotebook: NotebookTextModel;\n}\n\nexport interface INotebookEditorModel extends IDisposable {\n\treadonly onDidChangeDirty: Event<void>;\n\treadonly onDidSave: Event<IWorkingCopySaveEvent>;\n\treadonly onDidChangeOrphaned: Event<void>;\n\treadonly onDidChangeReadonly: Event<void>;\n\treadonly onDidRevertUntitled: Event<void>;\n\treadonly resource: URI;\n\treadonly viewType: string;\n\treadonly notebook: INotebookTextModel | undefined;\n\treadonly hasErrorState: boolean;\n\tisResolved(): boolean;\n\tisDirty(): boolean;\n\tisModified(): boolean;\n\tisReadonly(): boolean | IMarkdownString;\n\tisOrphaned(): boolean;\n\thasAssociatedFilePath(): boolean;\n\tload(options?: INotebookLoadOptions): Promise<IResolvedNotebookEditorModel>;\n\tsave(options?: ISaveOptions): Promise<boolean>;\n\tsaveAs(target: URI): Promise<IUntypedEditorInput | undefined>;\n\trevert(options?: IRevertOptions): Promise<void>;\n}\n\nexport interface INotebookDiffEditorModel extends IDisposable {\n\toriginal: IResolvedNotebookEditorModel;\n\tmodified: IResolvedNotebookEditorModel;\n}\n\nexport interface NotebookDocumentBackupData extends IWorkingCopyBackupMeta {\n\treadonly viewType: string;\n\treadonly backupId?: string;\n\treadonly mtime?: number;\n}\n\nexport enum NotebookEditorPriority {\n\tdefault = 'default',\n\toption = 'option',\n}\n\nexport interface INotebookFindOptions {\n\tregex?: boolean;\n\twholeWord?: boolean;\n\tcaseSensitive?: boolean;\n\twordSeparators?: string;\n\tincludeMarkupInput?: boolean;\n\tincludeMarkupPreview?: boolean;\n\tincludeCodeInput?: boolean;\n\tincludeOutput?: boolean;\n\tfindScope?: INotebookFindScope;\n}\n\nexport interface INotebookFindScope {\n\tfindScopeType: NotebookFindScopeType;\n\tselectedCellRanges?: ICellRange[];\n\tselectedTextRanges?: Range[];\n}\n\nexport enum NotebookFindScopeType {\n\tCells = 'cells',\n\tText = 'text',\n\tNone = 'none'\n}\n\nexport interface INotebookExclusiveDocumentFilter {\n\tinclude?: string | glob.IRelativePattern;\n\texclude?: string | glob.IRelativePattern;\n}\n\nexport interface INotebookDocumentFilter {\n\tviewType?: string | string[];\n\tfilenamePattern?: string | glob.IRelativePattern | INotebookExclusiveDocumentFilter;\n}\n\n//TODO@rebornix test\n\nexport function isDocumentExcludePattern(filenamePattern: string | glob.IRelativePattern | INotebookExclusiveDocumentFilter): filenamePattern is { include: string | glob.IRelativePattern; exclude: string | glob.IRelativePattern } {\n\tconst arg = filenamePattern as INotebookExclusiveDocumentFilter;\n\n\tif ((typeof arg.include === 'string' || glob.isRelativePattern(arg.include))\n\t\t&& (typeof arg.exclude === 'string' || glob.isRelativePattern(arg.exclude))) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\nexport function notebookDocumentFilterMatch(filter: INotebookDocumentFilter, viewType: string, resource: URI): boolean {\n\tif (Array.isArray(filter.viewType) && filter.viewType.indexOf(viewType) >= 0) {\n\t\treturn true;\n\t}\n\n\tif (filter.viewType === viewType) {\n\t\treturn true;\n\t}\n\n\tif (filter.filenamePattern) {\n\t\tconst filenamePattern = isDocumentExcludePattern(filter.filenamePattern) ? filter.filenamePattern.include : (filter.filenamePattern as string | glob.IRelativePattern);\n\t\tconst excludeFilenamePattern = isDocumentExcludePattern(filter.filenamePattern) ? filter.filenamePattern.exclude : undefined;\n\n\t\tif (glob.match(filenamePattern, basename(resource.fsPath).toLowerCase())) {\n\t\t\tif (excludeFilenamePattern) {\n\t\t\t\tif (glob.match(excludeFilenamePattern, basename(resource.fsPath).toLowerCase())) {\n\t\t\t\t\t// should exclude\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nexport interface INotebookCellStatusBarItemProvider {\n\tviewType: string;\n\tonDidChangeStatusBarItems?: Event<void>;\n\tprovideCellStatusBarItems(uri: URI, index: number, token: CancellationToken): Promise<INotebookCellStatusBarItemList | undefined>;\n}\n\n\nexport interface INotebookDiffResult {\n\tcellsDiff: IDiffResult;\n\tlinesDiff?: { originalCellhandle: number; modifiedCellhandle: number; lineChanges: ILineChange[] }[];\n}\n\nexport interface INotebookCellStatusBarItem {\n\treadonly alignment: CellStatusbarAlignment;\n\treadonly priority?: number;\n\treadonly text: string;\n\treadonly color?: string | ThemeColor;\n\treadonly backgroundColor?: string | ThemeColor;\n\treadonly tooltip?: string | IMarkdownString;\n\treadonly command?: string | Command;\n\treadonly accessibilityInformation?: IAccessibilityInformation;\n\treadonly opacity?: string;\n\treadonly onlyShowWhenActive?: boolean;\n}\n\nexport interface INotebookCellStatusBarItemList {\n\titems: INotebookCellStatusBarItem[];\n\tdispose?(): void;\n}\n\nexport type ShowCellStatusBarType = 'hidden' | 'visible' | 'visibleAfterExecute';\nexport const NotebookSetting = {\n\tdisplayOrder: 'notebook.displayOrder',\n\tcellToolbarLocation: 'notebook.cellToolbarLocation',\n\tcellToolbarVisibility: 'notebook.cellToolbarVisibility',\n\tshowCellStatusBar: 'notebook.showCellStatusBar',\n\ttextDiffEditorPreview: 'notebook.diff.enablePreview',\n\tdiffOverviewRuler: 'notebook.diff.overviewRuler',\n\texperimentalInsertToolbarAlignment: 'notebook.experimental.insertToolbarAlignment',\n\tcompactView: 'notebook.compactView',\n\tfocusIndicator: 'notebook.cellFocusIndicator',\n\tinsertToolbarLocation: 'notebook.insertToolbarLocation',\n\tglobalToolbar: 'notebook.globalToolbar',\n\tstickyScrollEnabled: 'notebook.stickyScroll.enabled',\n\tstickyScrollMode: 'notebook.stickyScroll.mode',\n\tundoRedoPerCell: 'notebook.undoRedoPerCell',\n\tconsolidatedOutputButton: 'notebook.consolidatedOutputButton',\n\tshowFoldingControls: 'notebook.showFoldingControls',\n\tdragAndDropEnabled: 'notebook.dragAndDropEnabled',\n\tcellEditorOptionsCustomizations: 'notebook.editorOptionsCustomizations',\n\tconsolidatedRunButton: 'notebook.consolidatedRunButton',\n\topenGettingStarted: 'notebook.experimental.openGettingStarted',\n\tglobalToolbarShowLabel: 'notebook.globalToolbarShowLabel',\n\tmarkupFontSize: 'notebook.markup.fontSize',\n\tmarkdownLineHeight: 'notebook.markdown.lineHeight',\n\tinteractiveWindowCollapseCodeCells: 'interactiveWindow.collapseCellInputCode',\n\toutputScrollingDeprecated: 'notebook.experimental.outputScrolling',\n\toutputScrolling: 'notebook.output.scrolling',\n\ttextOutputLineLimit: 'notebook.output.textLineLimit',\n\tLinkifyOutputFilePaths: 'notebook.output.linkifyFilePaths',\n\tminimalErrorRendering: 'notebook.output.minimalErrorRendering',\n\tformatOnSave: 'notebook.formatOnSave.enabled',\n\tinsertFinalNewline: 'notebook.insertFinalNewline',\n\tdefaultFormatter: 'notebook.defaultFormatter',\n\tformatOnCellExecution: 'notebook.formatOnCellExecution',\n\tcodeActionsOnSave: 'notebook.codeActionsOnSave',\n\toutputWordWrap: 'notebook.output.wordWrap',\n\toutputLineHeightDeprecated: 'notebook.outputLineHeight',\n\toutputLineHeight: 'notebook.output.lineHeight',\n\toutputFontSizeDeprecated: 'notebook.outputFontSize',\n\toutputFontSize: 'notebook.output.fontSize',\n\toutputFontFamilyDeprecated: 'notebook.outputFontFamily',\n\toutputFontFamily: 'notebook.output.fontFamily',\n\tfindFilters: 'notebook.find.filters',\n\tlogging: 'notebook.logging',\n\tconfirmDeleteRunningCell: 'notebook.confirmDeleteRunningCell',\n\tremoteSaving: 'notebook.experimental.remoteSave',\n\tgotoSymbolsAllSymbols: 'notebook.gotoSymbols.showAllSymbols',\n\toutlineShowMarkdownHeadersOnly: 'notebook.outline.showMarkdownHeadersOnly',\n\toutlineShowCodeCells: 'notebook.outline.showCodeCells',\n\toutlineShowCodeCellSymbols: 'notebook.outline.showCodeCellSymbols',\n\tbreadcrumbsShowCodeCells: 'notebook.breadcrumbs.showCodeCells',\n\tscrollToRevealCell: 'notebook.scrolling.revealNextCellOnExecute',\n\tcellChat: 'notebook.experimental.cellChat',\n\tcellGenerate: 'notebook.experimental.generate',\n\tnotebookVariablesView: 'notebook.experimental.variablesView',\n\tInteractiveWindowPromptToSave: 'interactiveWindow.promptToSaveOnClose',\n\tcellFailureDiagnostics: 'notebook.cellFailureDiagnostics',\n\toutputBackupSizeLimit: 'notebook.backup.sizeLimit',\n} as const;\n\nexport const enum CellStatusbarAlignment {\n\tLeft = 1,\n\tRight = 2\n}\n\nexport class NotebookWorkingCopyTypeIdentifier {\n\n\tprivate static _prefix = 'notebook/';\n\n\tstatic create(viewType: string): string {\n\t\treturn `${NotebookWorkingCopyTypeIdentifier._prefix}${viewType}`;\n\t}\n\n\tstatic parse(candidate: string): string | undefined {\n\t\tif (candidate.startsWith(NotebookWorkingCopyTypeIdentifier._prefix)) {\n\t\t\treturn candidate.substring(NotebookWorkingCopyTypeIdentifier._prefix.length);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport interface NotebookExtensionDescription {\n\treadonly id: ExtensionIdentifier;\n\treadonly location: UriComponents | undefined;\n}\n\n/**\n * Whether the provided mime type is a text stream like `stdout`, `stderr`.\n */\nexport function isTextStreamMime(mimeType: string) {\n\treturn ['application/vnd.code.notebook.stdout', 'application/vnd.code.notebook.stderr'].includes(mimeType);\n}\n\n\nconst textDecoder = new TextDecoder();\n\n/**\n * Given a stream of individual stdout outputs, this function will return the compressed lines, escaping some of the common terminal escape codes.\n * E.g. some terminal escape codes would result in the previous line getting cleared, such if we had 3 lines and\n * last line contained such a code, then the result string would be just the first two lines.\n * @returns a single VSBuffer with the concatenated and compressed data, and whether any compression was done.\n */\nexport function compressOutputItemStreams(outputs: Uint8Array[]) {\n\tconst buffers: Uint8Array[] = [];\n\tlet startAppending = false;\n\n\t// Pick the first set of outputs with the same mime type.\n\tfor (const output of outputs) {\n\t\tif ((buffers.length === 0 || startAppending)) {\n\t\t\tbuffers.push(output);\n\t\t\tstartAppending = true;\n\t\t}\n\t}\n\n\tlet didCompression = compressStreamBuffer(buffers);\n\tconst concatenated = VSBuffer.concat(buffers.map(buffer => VSBuffer.wrap(buffer)));\n\tconst data = formatStreamText(concatenated);\n\tdidCompression = didCompression || data.byteLength !== concatenated.byteLength;\n\treturn { data, didCompression };\n}\n\nexport const MOVE_CURSOR_1_LINE_COMMAND = `${String.fromCharCode(27)}[A`;\nconst MOVE_CURSOR_1_LINE_COMMAND_BYTES = MOVE_CURSOR_1_LINE_COMMAND.split('').map(c => c.charCodeAt(0));\nconst LINE_FEED = 10;\nfunction compressStreamBuffer(streams: Uint8Array[]) {\n\tlet didCompress = false;\n\tstreams.forEach((stream, index) => {\n\t\tif (index === 0 || stream.length < MOVE_CURSOR_1_LINE_COMMAND.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst previousStream = streams[index - 1];\n\n\t\t// Remove the previous line if required.\n\t\tconst command = stream.subarray(0, MOVE_CURSOR_1_LINE_COMMAND.length);\n\t\tif (command[0] === MOVE_CURSOR_1_LINE_COMMAND_BYTES[0] && command[1] === MOVE_CURSOR_1_LINE_COMMAND_BYTES[1] && command[2] === MOVE_CURSOR_1_LINE_COMMAND_BYTES[2]) {\n\t\t\tconst lastIndexOfLineFeed = previousStream.lastIndexOf(LINE_FEED);\n\t\t\tif (lastIndexOfLineFeed === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdidCompress = true;\n\t\t\tstreams[index - 1] = previousStream.subarray(0, lastIndexOfLineFeed);\n\t\t\tstreams[index] = stream.subarray(MOVE_CURSOR_1_LINE_COMMAND.length);\n\t\t}\n\t});\n\treturn didCompress;\n}\n\n\n\n/**\n * Took this from jupyter/notebook\n * https://github.com/jupyter/notebook/blob/b8b66332e2023e83d2ee04f83d8814f567e01a4e/notebook/static/base/js/utils.js\n * Remove characters that are overridden by backspace characters\n */\nfunction fixBackspace(txt: string) {\n\tlet tmp = txt;\n\tdo {\n\t\ttxt = tmp;\n\t\t// Cancel out anything-but-newline followed by backspace\n\t\ttmp = txt.replace(/[^\\n]\\x08/gm, '');\n\t} while (tmp.length < txt.length);\n\treturn txt;\n}\n\n/**\n * Remove chunks that should be overridden by the effect of carriage return characters\n * From https://github.com/jupyter/notebook/blob/master/notebook/static/base/js/utils.js\n */\nfunction fixCarriageReturn(txt: string) {\n\ttxt = txt.replace(/\\r+\\n/gm, '\\n'); // \\r followed by \\n --> newline\n\twhile (txt.search(/\\r[^$]/g) > -1) {\n\t\tconst base = txt.match(/^(.*)\\r+/m)![1];\n\t\tlet insert = txt.match(/\\r+(.*)$/m)![1];\n\t\tinsert = insert + base.slice(insert.length, base.length);\n\t\ttxt = txt.replace(/\\r+.*$/m, '\\r').replace(/^.*\\r/m, insert);\n\t}\n\treturn txt;\n}\n\nconst BACKSPACE_CHARACTER = '\\b'.charCodeAt(0);\nconst CARRIAGE_RETURN_CHARACTER = '\\r'.charCodeAt(0);\nfunction formatStreamText(buffer: VSBuffer): VSBuffer {\n\t// We have special handling for backspace and carriage return characters.\n\t// Don't unnecessary decode the bytes if we don't need to perform any processing.\n\tif (!buffer.buffer.includes(BACKSPACE_CHARACTER) && !buffer.buffer.includes(CARRIAGE_RETURN_CHARACTER)) {\n\t\treturn buffer;\n\t}\n\t// Do the same thing jupyter is doing\n\treturn VSBuffer.fromString(fixCarriageReturn(fixBackspace(textDecoder.decode(buffer.buffer))));\n}\n\nexport interface INotebookKernelSourceAction {\n\treadonly label: string;\n\treadonly description?: string;\n\treadonly detail?: string;\n\treadonly command?: string | Command;\n\treadonly documentation?: UriComponents | string;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,YAAY,UAAU;AACtB,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,KAAK,qBAAqB;AACnC,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,YAAY,kBAAkB;AAC9B,SAAS,SAAS,6BAA6B;AAC/C,SAAS,2BAA2B;AACpC,SAAS,iCAAiC;AAC1C,SAAS,qBAAqB;AAC9B,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB,cAAc,2BAA2B;AAClE,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC,SAAS,8BAA8B;AACvC,SAAS,kBAAkB;AAC3B,SAAS,gCAAgC;AACzC,SAAS,qBAAqB,YAAY,aAAa,kBAAkB,SAAS,gBAAgB;AAClG,SAAS,wBAAwB,6BAA6B;AAEvD,MAAM,qBAAqB;AAC3B,MAAM,0BAA0B;AAChC,MAAM,gCAAgC;AACtC,MAAM,+BAA+B;AACrC,MAAM,iBAAiB;AAEvB,MAAM,0BAA0B;AAEhC,IAAK,WAAL,kBAAKA,cAAL;AACN,EAAAA,oBAAA,YAAS,KAAT;AACA,EAAAA,oBAAA,UAAO,KAAP;AAFW,SAAAA;AAAA,GAAA;AAKL,MAAM,yBAA4C;AAAA,EACxD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EACN,MAAM;AAAA,EACN;AAAA,EACA;AAAA,EACA,MAAM;AACP;AAEO,MAAM,oCAAuD;AAAA,EACnE,MAAM;AAAA,EACN,MAAM;AAAA,EACN;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAM;AACP;AAQO,MAAM,iCAA2E,oBAAI,IAAI;AAAA,EAC/F,CAAC,sBAAsB,oBAAI,IAAI,CAAC,oBAAoB,aAAa,CAAC,CAAC;AAAA,EACnE,CAAC,gCAAgC,oBAAI,IAAI,CAAC,oBAAoB,aAAa,CAAC,CAAC;AAC9E,CAAC;AAEM,MAAM,yBAAyB;AAI/B,IAAK,mBAAL,kBAAKC,sBAAL;AACN,EAAAA,oCAAA,aAAU,KAAV;AACA,EAAAA,oCAAA,UAAO,KAAP;AAFW,SAAAA;AAAA,GAAA;AAOL,IAAK,6BAAL,kBAAKC,gCAAL;AACN,EAAAA,wDAAA,iBAAc,KAAd;AACA,EAAAA,wDAAA,aAAU,KAAV;AACA,EAAAA,wDAAA,eAAY,KAAZ;AAHW,SAAAA;AAAA,GAAA;AAKL,IAAK,yBAAL,kBAAKC,4BAAL;AACN,EAAAA,gDAAA,iBAAc,KAAd;AACA,EAAAA,gDAAA,aAAU,KAAV;AACA,EAAAA,gDAAA,eAAY,KAAZ;AAHW,SAAAA;AAAA,GAAA;AAsDL,IAAW,wBAAX,kBAAWC,2BAAX;AAEN,EAAAA,8CAAA,8BAA2B,KAA3B;AAEA,EAAAA,8CAAA,kCAA+B,KAA/B;AAEA,EAAAA,8CAAA,UAAO,KAAP;AAEA,EAAAA,8CAAA,WAAQ,KAAR;AARiB,SAAAA;AAAA,GAAA;AAiBX,IAAW,wBAAX,kBAAWC,2BAAX;AACN,EAAAA,uBAAA,YAAS;AACT,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,cAAW;AAHM,SAAAA;AAAA,GAAA;AA+HX,IAAK,0BAAL,kBAAKC,6BAAL;AACN,EAAAA,kDAAA,iBAAc,KAAd;AACA,EAAAA,kDAAA,UAAO,KAAP;AACA,EAAAA,kDAAA,wBAAqB,KAArB;AACA,EAAAA,kDAAA,gBAAa,KAAb;AACA,EAAAA,kDAAA,wBAAqB,KAArB;AACA,EAAAA,kDAAA,YAAS,KAAT;AACA,EAAAA,kDAAA,gBAAa,KAAb;AACA,EAAAA,kDAAA,uBAAoB,MAApB;AACA,EAAAA,kDAAA,4BAAyB,MAAzB;AACA,EAAAA,kDAAA,gCAA6B,MAA7B;AACA,EAAAA,kDAAA,oBAAiB,MAAjB;AACA,EAAAA,kDAAA,aAAU,OAAV;AAZW,SAAAA;AAAA,GAAA;AA+FL,IAAK,qBAAL,kBAAKC,wBAAL;AACN,EAAAA,wCAAA,YAAS,KAAT;AACA,EAAAA,wCAAA,WAAQ,KAAR;AAFW,SAAAA;AAAA,GAAA;AA8BL,IAAW,eAAX,kBAAWC,kBAAX;AACN,EAAAA,4BAAA,aAAU,KAAV;AACA,EAAAA,4BAAA,YAAS,KAAT;AACA,EAAAA,4BAAA,cAAW,KAAX;AACA,EAAAA,4BAAA,kBAAe,KAAf;AACA,EAAAA,4BAAA,sBAAmB,KAAnB;AACA,EAAAA,4BAAA,UAAO,KAAP;AACA,EAAAA,4BAAA,iBAAc,KAAd;AACA,EAAAA,4BAAA,qBAAkB,KAAlB;AACA,EAAAA,4BAAA,6BAA0B,KAA1B;AATiB,SAAAA;AAAA,GAAA;AA2IX,IAAU;AAAA,CAAV,CAAUC,iBAAV;AACC,EAAMA,aAAA,SAAS,QAAQ;AACvB,WAAS,SAAS,UAAoB;AAC5C,WAAO,oBAAoB,QAAQ;AAAA,EACpC;AAFO,EAAAA,aAAS;AAAA;AAGT,WAAS,MAAM,UAAgC;AACrD,WAAO,iBAAiB,QAAQ;AAAA,EACjC;AAFO,EAAAA,aAAS;AAAA;AAAA,GALA;AAUV,IAAU;AAAA,CAAV,CAAUC,aAAV;AACC,EAAMA,SAAA,SAAS,QAAQ;AACvB,WAAS,SAAS,UAAe,QAAqB;AAC5D,WAAO,YAAY,UAAU,MAAM;AAAA,EACpC;AAFO,EAAAA,SAAS;AAAA;AAIT,WAAS,MAAM,MAA0D;AAC/E,WAAO,SAAS,IAAI;AAAA,EACrB;AAFO,EAAAA,SAAS;AAAA;AAIT,WAAS,sBAAsB,UAAe,UAAmB;AACvE,WAAO,SAAS,KAAK;AAAA,MACpB,QAAQ,QAAQ;AAAA,MAChB,UAAU,KAAK,YAAY,EAAE,IAAI,SAAS,WAAW,QAAQ,OAAO,SAAS,SAAS,EAAE;AAAA,IACzF,CAAC;AAAA,EACF;AALO,EAAAA,SAAS;AAAA;AAOT,WAAS,mBAAmB,KAA4D;AAC9F,QAAI,IAAI,WAAW,QAAQ,0BAA0B;AACpD;AAAA,IACD;AAEA,UAAM,QAAQ,6EAA6E,KAAK,IAAI,QAAQ;AAC5G,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AAEA,UAAM,WAAY,MAAM,CAAC,KAAK,MAAM,CAAC,MAAM,KAAM,MAAM,CAAC,IAAI;AAC5D,UAAMC,UAAS,MAAM,CAAC;AACtB,WAAO;AAAA,MACN;AAAA,MACA,UAAU,IAAI,KAAK;AAAA,QAClB,QAAQA,WAAU,QAAQ;AAAA,QAC1B,UAAU;AAAA,MACX,CAAC;AAAA,IACF;AAAA,EACD;AAnBO,EAAAD,SAAS;AAAA;AAqBT,WAAS,wBAAwB,UAAe,QAAgBC,SAAqB;AAC3F,WAAOD,SAAQ,SAAS,UAAU,MAAM,EAAE,KAAK,EAAE,QAAQC,QAAO,CAAC;AAAA,EAClE;AAFO,EAAAD,SAAS;AAAA;AAIT,WAAS,qBAAqB,KAAU,gBAAwB;AACtE,QAAI,IAAI,WAAW,gBAAgB;AAClC,aAAO;AAAA,IACR;AAEA,WAAOA,SAAQ,MAAM,IAAI,KAAK,EAAE,QAAQA,SAAA,OAAO,CAAC,CAAC;AAAA,EAClD;AANO,EAAAA,SAAS;AAAA;AAAA,GA1CA;AAmDjB,MAAM,mBAAmB,wBAAC,QAAgB,YAAY,IAAI,QAAQ,OAAO,IAAI,IAAI,KAAxD;AAOlB,MAAM,qBAAqB;AAAA,EAGjC,YACC,eAAkC,CAAC,GAClB,eAAe,wBAC/B;AADgB;AAEjB,SAAK,QAAQ,CAAC,GAAG,IAAI,IAAI,YAAY,CAAC,EAAE,IAAI,cAAY;AAAA,MACvD;AAAA,MACA,SAAS,KAAK,MAAM,iBAAiB,OAAO,CAAC;AAAA,IAC9C,EAAE;AAAA,EACH;AAAA,EAnoBD,OAwnBkC;AAAA;AAAA;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAeV,KAAK,WAAuC;AAClD,UAAM,YAAY,IAAI,IAAI,SAAS,IAAI,WAAW,OAAK,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAChF,QAAI,SAAmB,CAAC;AAExB,eAAW,EAAE,QAAQ,KAAK,KAAK,OAAO;AACrC,iBAAW,CAAC,UAAU,UAAU,KAAK,WAAW;AAC/C,YAAI,QAAQ,UAAU,GAAG;AACxB,iBAAO,KAAK,QAAQ;AACpB,oBAAU,OAAO,QAAQ;AACzB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,UAAU,MAAM;AACnB,eAAS,OAAO,OAAO,CAAC,GAAG,UAAU,KAAK,CAAC,EAAE;AAAA,QAC5C,CAAC,GAAG,MAAM,KAAK,aAAa,QAAQ,CAAC,IAAI,KAAK,aAAa,QAAQ,CAAC;AAAA,MACrE,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,gBAAwB,gBAAmC;AAC5E,UAAM,cAAc,KAAK,UAAU,cAAc;AACjD,QAAI,gBAAgB,IAAI;AAEvB,WAAK,MAAM,QAAQ,EAAE,SAAS,gBAAgB,SAAS,KAAK,MAAM,iBAAiB,cAAc,CAAC,EAAE,CAAC;AACrG;AAAA,IACD;AAIA,UAAM,iBAAiB,IAAI,IAAI,eAAe,IAAI,OAAK,KAAK,UAAU,GAAG,WAAW,CAAC,CAAC;AACtF,mBAAe,OAAO,EAAE;AACxB,UAAM,eAAe,MAAM,KAAK,cAAc,EAAE,KAAK;AACrD,SAAK,MAAM,OAAO,cAAc,GAAG,GAAG,GAAG,aAAa,IAAI,OAAK,KAAK,MAAM,CAAC,CAAC,CAAC;AAE7E,aAAS,KAAK,aAAa,SAAS,GAAG,MAAM,GAAG,MAAM;AACrD,WAAK,MAAM,OAAO,aAAa,EAAE,GAAG,CAAC;AAAA,IACtC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKO,UAAU;AAChB,WAAO,KAAK,MAAM,IAAI,OAAK,EAAE,OAAO;AAAA,EACrC;AAAA,EAEQ,UAAU,UAAkB,WAAW,KAAK,MAAM,QAAQ;AACjE,UAAM,aAAa,iBAAiB,QAAQ;AAC5C,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAClC,UAAI,KAAK,MAAM,CAAC,EAAE,QAAQ,UAAU,GAAG;AACtC,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAOO,SAAS,KAAQ,QAAa,OAAY,UAA6B,QAAiC,CAAC,GAAM,MAAS,MAAM,GAAiB;AACrJ,QAAM,SAA8B,CAAC;AAErC,WAAS,WAAW,OAAe,aAAqB,UAAqB;AAC5E,QAAI,gBAAgB,KAAK,SAAS,WAAW,GAAG;AAC/C;AAAA,IACD;AAEA,UAAM,SAAS,OAAO,OAAO,SAAS,CAAC;AAEvC,QAAI,UAAU,OAAO,QAAQ,OAAO,gBAAgB,OAAO;AAC1D,aAAO,eAAe;AACtB,aAAO,SAAS,KAAK,GAAG,QAAQ;AAAA,IACjC,OAAO;AACN,aAAO,KAAK,EAAE,OAAO,aAAa,SAAS,CAAC;AAAA,IAC7C;AAAA,EACD;AAbS;AAeT,MAAI,YAAY;AAChB,MAAI,WAAW;AAEf,SAAO,MAAM;AACZ,QAAI,cAAc,OAAO,QAAQ;AAChC,iBAAW,WAAW,GAAG,MAAM,MAAM,QAAQ,CAAC;AAC9C;AAAA,IACD;AAEA,QAAI,aAAa,MAAM,QAAQ;AAC9B,iBAAW,WAAW,OAAO,SAAS,WAAW,CAAC,CAAC;AACnD;AAAA,IACD;AAEA,UAAM,gBAAgB,OAAO,SAAS;AACtC,UAAM,eAAe,MAAM,QAAQ;AAEnC,QAAI,MAAM,eAAe,YAAY,GAAG;AAEvC,mBAAa;AACb,kBAAY;AACZ;AAAA,IACD;AAEA,QAAI,SAAS,YAAY,GAAG;AAE3B,iBAAW,WAAW,GAAG,CAAC,CAAC;AAC3B,mBAAa;AAAA,IACd,OAAO;AAEN,iBAAW,WAAW,GAAG,CAAC,YAAY,CAAC;AACvC,kBAAY;AAAA,IACb;AAAA,EACD;AAEA,SAAO;AACR;AAtDgB;AA4DT,MAAM,kCAAkC,IAAI,cAAkD,kCAAkC,MAAM;AAEtI,MAAM,uCAAuC,IAAI,cAAiD,sCAAsC,MAAM;AAwD9I,IAAK,yBAAL,kBAAKE,4BAAL;AACN,EAAAA,wBAAA,aAAU;AACV,EAAAA,wBAAA,YAAS;AAFE,SAAAA;AAAA,GAAA;AAuBL,IAAK,wBAAL,kBAAKC,2BAAL;AACN,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,UAAO;AACP,EAAAA,uBAAA,UAAO;AAHI,SAAAA;AAAA,GAAA;AAkBL,SAAS,yBAAyB,iBAA6L;AACrO,QAAM,MAAM;AAEZ,OAAK,OAAO,IAAI,YAAY,YAAY,KAAK,kBAAkB,IAAI,OAAO,OACrE,OAAO,IAAI,YAAY,YAAY,KAAK,kBAAkB,IAAI,OAAO,IAAI;AAC7E,WAAO;AAAA,EACR;AAEA,SAAO;AACR;AATgB;AAUT,SAAS,4BAA4B,QAAiC,UAAkB,UAAwB;AACtH,MAAI,MAAM,QAAQ,OAAO,QAAQ,KAAK,OAAO,SAAS,QAAQ,QAAQ,KAAK,GAAG;AAC7E,WAAO;AAAA,EACR;AAEA,MAAI,OAAO,aAAa,UAAU;AACjC,WAAO;AAAA,EACR;AAEA,MAAI,OAAO,iBAAiB;AAC3B,UAAM,kBAAkB,yBAAyB,OAAO,eAAe,IAAI,OAAO,gBAAgB,UAAW,OAAO;AACpH,UAAM,yBAAyB,yBAAyB,OAAO,eAAe,IAAI,OAAO,gBAAgB,UAAU;AAEnH,QAAI,KAAK,MAAM,iBAAiB,SAAS,SAAS,MAAM,EAAE,YAAY,CAAC,GAAG;AACzE,UAAI,wBAAwB;AAC3B,YAAI,KAAK,MAAM,wBAAwB,SAAS,SAAS,MAAM,EAAE,YAAY,CAAC,GAAG;AAGhF,iBAAO;AAAA,QACR;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;AAzBgB;AA0DT,MAAM,kBAAkB;AAAA,EAC9B,cAAc;AAAA,EACd,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,oCAAoC;AAAA,EACpC,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,uBAAuB;AAAA,EACvB,eAAe;AAAA,EACf,qBAAqB;AAAA,EACrB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,0BAA0B;AAAA,EAC1B,qBAAqB;AAAA,EACrB,oBAAoB;AAAA,EACpB,iCAAiC;AAAA,EACjC,uBAAuB;AAAA,EACvB,oBAAoB;AAAA,EACpB,wBAAwB;AAAA,EACxB,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,oCAAoC;AAAA,EACpC,2BAA2B;AAAA,EAC3B,iBAAiB;AAAA,EACjB,qBAAqB;AAAA,EACrB,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,cAAc;AAAA,EACd,oBAAoB;AAAA,EACpB,kBAAkB;AAAA,EAClB,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,gBAAgB;AAAA,EAChB,4BAA4B;AAAA,EAC5B,kBAAkB;AAAA,EAClB,0BAA0B;AAAA,EAC1B,gBAAgB;AAAA,EAChB,4BAA4B;AAAA,EAC5B,kBAAkB;AAAA,EAClB,aAAa;AAAA,EACb,SAAS;AAAA,EACT,0BAA0B;AAAA,EAC1B,cAAc;AAAA,EACd,uBAAuB;AAAA,EACvB,gCAAgC;AAAA,EAChC,sBAAsB;AAAA,EACtB,4BAA4B;AAAA,EAC5B,0BAA0B;AAAA,EAC1B,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,cAAc;AAAA,EACd,uBAAuB;AAAA,EACvB,+BAA+B;AAAA,EAC/B,wBAAwB;AAAA,EACxB,uBAAuB;AACxB;AAEO,IAAW,yBAAX,kBAAWC,4BAAX;AACN,EAAAA,gDAAA,UAAO,KAAP;AACA,EAAAA,gDAAA,WAAQ,KAAR;AAFiB,SAAAA;AAAA,GAAA;AAKX,MAAM,kCAAkC;AAAA,EAn/B/C,OAm/B+C;AAAA;AAAA;AAAA,EAE9C,OAAe,UAAU;AAAA,EAEzB,OAAO,OAAO,UAA0B;AACvC,WAAO,GAAG,kCAAkC,OAAO,GAAG,QAAQ;AAAA,EAC/D;AAAA,EAEA,OAAO,MAAM,WAAuC;AACnD,QAAI,UAAU,WAAW,kCAAkC,OAAO,GAAG;AACpE,aAAO,UAAU,UAAU,kCAAkC,QAAQ,MAAM;AAAA,IAC5E;AACA,WAAO;AAAA,EACR;AACD;AAUO,SAAS,iBAAiB,UAAkB;AAClD,SAAO,CAAC,wCAAwC,sCAAsC,EAAE,SAAS,QAAQ;AAC1G;AAFgB;AAKhB,MAAM,cAAc,IAAI,YAAY;AAQ7B,SAAS,0BAA0B,SAAuB;AAChE,QAAM,UAAwB,CAAC;AAC/B,MAAI,iBAAiB;AAGrB,aAAW,UAAU,SAAS;AAC7B,QAAK,QAAQ,WAAW,KAAK,gBAAiB;AAC7C,cAAQ,KAAK,MAAM;AACnB,uBAAiB;AAAA,IAClB;AAAA,EACD;AAEA,MAAI,iBAAiB,qBAAqB,OAAO;AACjD,QAAM,eAAe,SAAS,OAAO,QAAQ,IAAI,YAAU,SAAS,KAAK,MAAM,CAAC,CAAC;AACjF,QAAM,OAAO,iBAAiB,YAAY;AAC1C,mBAAiB,kBAAkB,KAAK,eAAe,aAAa;AACpE,SAAO,EAAE,MAAM,eAAe;AAC/B;AAjBgB;AAmBT,MAAM,6BAA6B,GAAG,OAAO,aAAa,EAAE,CAAC;AACpE,MAAM,mCAAmC,2BAA2B,MAAM,EAAE,EAAE,IAAI,OAAK,EAAE,WAAW,CAAC,CAAC;AACtG,MAAM,YAAY;AAClB,SAAS,qBAAqB,SAAuB;AACpD,MAAI,cAAc;AAClB,UAAQ,QAAQ,CAAC,QAAQ,UAAU;AAClC,QAAI,UAAU,KAAK,OAAO,SAAS,2BAA2B,QAAQ;AACrE;AAAA,IACD;AAEA,UAAM,iBAAiB,QAAQ,QAAQ,CAAC;AAGxC,UAAM,UAAU,OAAO,SAAS,GAAG,2BAA2B,MAAM;AACpE,QAAI,QAAQ,CAAC,MAAM,iCAAiC,CAAC,KAAK,QAAQ,CAAC,MAAM,iCAAiC,CAAC,KAAK,QAAQ,CAAC,MAAM,iCAAiC,CAAC,GAAG;AACnK,YAAM,sBAAsB,eAAe,YAAY,SAAS;AAChE,UAAI,wBAAwB,IAAI;AAC/B;AAAA,MACD;AAEA,oBAAc;AACd,cAAQ,QAAQ,CAAC,IAAI,eAAe,SAAS,GAAG,mBAAmB;AACnE,cAAQ,KAAK,IAAI,OAAO,SAAS,2BAA2B,MAAM;AAAA,IACnE;AAAA,EACD,CAAC;AACD,SAAO;AACR;AAvBS;AAgCT,SAAS,aAAa,KAAa;AAClC,MAAI,MAAM;AACV,KAAG;AACF,UAAM;AAEN,UAAM,IAAI,QAAQ,eAAe,EAAE;AAAA,EACpC,SAAS,IAAI,SAAS,IAAI;AAC1B,SAAO;AACR;AARS;AAcT,SAAS,kBAAkB,KAAa;AACvC,QAAM,IAAI,QAAQ,WAAW,IAAI;AACjC,SAAO,IAAI,OAAO,SAAS,IAAI,IAAI;AAClC,UAAM,OAAO,IAAI,MAAM,WAAW,EAAG,CAAC;AACtC,QAAI,SAAS,IAAI,MAAM,WAAW,EAAG,CAAC;AACtC,aAAS,SAAS,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM;AACvD,UAAM,IAAI,QAAQ,WAAW,IAAI,EAAE,QAAQ,UAAU,MAAM;AAAA,EAC5D;AACA,SAAO;AACR;AATS;AAWT,MAAM,sBAAsB,KAAK,WAAW,CAAC;AAC7C,MAAM,4BAA4B,KAAK,WAAW,CAAC;AACnD,SAAS,iBAAiB,QAA4B;AAGrD,MAAI,CAAC,OAAO,OAAO,SAAS,mBAAmB,KAAK,CAAC,OAAO,OAAO,SAAS,yBAAyB,GAAG;AACvG,WAAO;AAAA,EACR;AAEA,SAAO,SAAS,WAAW,kBAAkB,aAAa,YAAY,OAAO,OAAO,MAAM,CAAC,CAAC,CAAC;AAC9F;AARS;",
  "names": ["CellKind", "NotebookRunState", "NotebookCellExecutionState", "NotebookExecutionState", "NotebookRendererMatch", "RendererMessagingSpec", "NotebookCellsChangeType", "SelectionStateType", "CellEditType", "NotebookUri", "CellUri", "scheme", "NotebookEditorPriority", "NotebookFindScopeType", "CellStatusbarAlignment"]
}
