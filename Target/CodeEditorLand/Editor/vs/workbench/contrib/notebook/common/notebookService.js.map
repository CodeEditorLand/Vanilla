{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { NotebookProviderInfo } from './notebookProvider.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { INotebookRendererInfo, NotebookData, TransientOptions, IOrderedMimeType, IOutputDto, INotebookContributionData, NotebookExtensionDescription, INotebookStaticPreloadInfo } from './notebookCommon.js';\nimport { NotebookTextModel } from './model/notebookTextModel.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { NotebookCellTextModel } from './model/notebookCellTextModel.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { VSBuffer, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { ConfigurationTarget } from '../../../../platform/configuration/common/configuration.js';\nimport { IFileStatWithMetadata, IWriteFileOptions } from '../../../../platform/files/common/files.js';\nimport { ITextQuery } from '../../../services/search/common/search.js';\nimport { NotebookPriorityInfo } from '../../search/common/search.js';\nimport { INotebookFileMatchNoModel } from '../../search/common/searchNotebookHelpers.js';\n\n\nexport const INotebookService = createDecorator<INotebookService>('notebookService');\n\nexport interface INotebookContentProvider {\n\toptions: TransientOptions;\n\n\topen(uri: URI, backupId: string | VSBuffer | undefined, untitledDocumentData: VSBuffer | undefined, token: CancellationToken): Promise<{ data: NotebookData; transientOptions: TransientOptions }>;\n\tbackup(uri: URI, token: CancellationToken): Promise<string | VSBuffer>;\n}\n\nexport interface INotebookSerializer {\n\toptions: TransientOptions;\n\tdataToNotebook(data: VSBuffer): Promise<NotebookData>;\n\tnotebookToData(data: NotebookData): Promise<VSBuffer>;\n\tsave(uri: URI, versionId: number, options: IWriteFileOptions, token: CancellationToken): Promise<IFileStatWithMetadata>;\n\tsearchInNotebooks(textQuery: ITextQuery, token: CancellationToken, allPriorityInfo: Map<string, NotebookPriorityInfo[]>): Promise<{ results: INotebookFileMatchNoModel<URI>[]; limitHit: boolean }>;\n}\n\nexport interface INotebookRawData {\n\tdata: NotebookData;\n\ttransientOptions: TransientOptions;\n}\n\nexport class SimpleNotebookProviderInfo {\n\tconstructor(\n\t\treadonly viewType: string,\n\t\treadonly serializer: INotebookSerializer,\n\t\treadonly extensionData: NotebookExtensionDescription\n\t) { }\n}\n\nexport interface INotebookService {\n\treadonly _serviceBrand: undefined;\n\tcanResolve(viewType: string): Promise<boolean>;\n\n\treadonly onAddViewType: Event<string>;\n\treadonly onWillRemoveViewType: Event<string>;\n\treadonly onDidChangeOutputRenderers: Event<void>;\n\treadonly onWillAddNotebookDocument: Event<NotebookTextModel>;\n\treadonly onDidAddNotebookDocument: Event<NotebookTextModel>;\n\n\treadonly onWillRemoveNotebookDocument: Event<NotebookTextModel>;\n\treadonly onDidRemoveNotebookDocument: Event<NotebookTextModel>;\n\n\tregisterNotebookSerializer(viewType: string, extensionData: NotebookExtensionDescription, serializer: INotebookSerializer): IDisposable;\n\twithNotebookDataProvider(viewType: string): Promise<SimpleNotebookProviderInfo>;\n\ttryGetDataProviderSync(viewType: string): SimpleNotebookProviderInfo | undefined;\n\n\tgetOutputMimeTypeInfo(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined, output: IOutputDto): readonly IOrderedMimeType[];\n\n\tgetViewTypeProvider(viewType: string): string | undefined;\n\tgetRendererInfo(id: string): INotebookRendererInfo | undefined;\n\tgetRenderers(): INotebookRendererInfo[];\n\n\tgetStaticPreloads(viewType: string): Iterable<INotebookStaticPreloadInfo>;\n\n\t/** Updates the preferred renderer for the given mimetype in the workspace. */\n\tupdateMimePreferredRenderer(viewType: string, mimeType: string, rendererId: string, otherMimetypes: readonly string[]): void;\n\tsaveMimeDisplayOrder(target: ConfigurationTarget): void;\n\n\tcreateNotebookTextModel(viewType: string, uri: URI, stream?: VSBufferReadableStream): Promise<NotebookTextModel>;\n\tgetNotebookTextModel(uri: URI): NotebookTextModel | undefined;\n\tgetNotebookTextModels(): Iterable<NotebookTextModel>;\n\tlistNotebookDocuments(): readonly NotebookTextModel[];\n\n\t/**\tRegister a notebook type that we will handle. The notebook editor will be registered for notebook types contributed by extensions */\n\tregisterContributedNotebookType(viewType: string, data: INotebookContributionData): IDisposable;\n\tgetContributedNotebookType(viewType: string): NotebookProviderInfo | undefined;\n\tgetContributedNotebookTypes(resource?: URI): readonly NotebookProviderInfo[];\n\tgetNotebookProviderResourceRoots(): URI[];\n\n\tsetToCopy(items: NotebookCellTextModel[], isCopy: boolean): void;\n\tgetToCopy(): { items: NotebookCellTextModel[]; isCopy: boolean } | undefined;\n\tclearEditorCache(): void;\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,WAAW;AACpB,SAAS,4BAA4B;AACrC,SAAS,aAAa;AACtB,SAAS,uBAAuB,cAAc,kBAAkB,kBAAkB,YAAY,2BAA2B,8BAA8B,kCAAkC;AACzL,SAAS,yBAAyB;AAClC,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,UAAU,8BAA8B;AACjD,SAAS,2BAA2B;AACpC,SAAS,uBAAuB,yBAAyB;AACzD,SAAS,kBAAkB;AAC3B,SAAS,4BAA4B;AACrC,SAAS,iCAAiC;AAGnC,MAAM,mBAAmB,gBAAkC,iBAAiB;AAsB5E,MAAM,2BAA2B;AAAA,EACvC,YACU,UACA,YACA,eACR;AAHQ;AACA;AACA;AAAA,EACN;AAAA,EAjDL,OA4CwC;AAAA;AAAA;AAMxC;",
  "names": []
}
