{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tVSBuffer,\n\tVSBufferReadableStream,\n} from \"../../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { ConfigurationTarget } from \"../../../../platform/configuration/common/configuration.js\";\nimport type {\n\tIFileStatWithMetadata,\n\tIWriteFileOptions,\n} from \"../../../../platform/files/common/files.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ITextQuery } from \"../../../services/search/common/search.js\";\nimport type { NotebookPriorityInfo } from \"../../search/common/search.js\";\nimport type { INotebookFileMatchNoModel } from \"../../search/common/searchNotebookHelpers.js\";\nimport type { NotebookCellTextModel } from \"./model/notebookCellTextModel.js\";\nimport type { NotebookTextModel } from \"./model/notebookTextModel.js\";\nimport type {\n\tINotebookContributionData,\n\tINotebookRendererInfo,\n\tINotebookStaticPreloadInfo,\n\tIOrderedMimeType,\n\tIOutputDto,\n\tNotebookData,\n\tNotebookExtensionDescription,\n\tTransientOptions,\n} from \"./notebookCommon.js\";\nimport type { NotebookProviderInfo } from \"./notebookProvider.js\";\n\nexport const INotebookService =\n\tcreateDecorator<INotebookService>(\"notebookService\");\n\nexport interface INotebookContentProvider {\n\toptions: TransientOptions;\n\n\topen(\n\t\turi: URI,\n\t\tbackupId: string | VSBuffer | undefined,\n\t\tuntitledDocumentData: VSBuffer | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<{ data: NotebookData; transientOptions: TransientOptions }>;\n\tbackup(uri: URI, token: CancellationToken): Promise<string | VSBuffer>;\n}\n\nexport interface INotebookSerializer {\n\toptions: TransientOptions;\n\tdataToNotebook(data: VSBuffer): Promise<NotebookData>;\n\tnotebookToData(data: NotebookData): Promise<VSBuffer>;\n\tsave(\n\t\turi: URI,\n\t\tversionId: number,\n\t\toptions: IWriteFileOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IFileStatWithMetadata>;\n\tsearchInNotebooks(\n\t\ttextQuery: ITextQuery,\n\t\ttoken: CancellationToken,\n\t\tallPriorityInfo: Map<string, NotebookPriorityInfo[]>,\n\t): Promise<{\n\t\tresults: INotebookFileMatchNoModel<URI>[];\n\t\tlimitHit: boolean;\n\t}>;\n}\n\nexport interface INotebookRawData {\n\tdata: NotebookData;\n\ttransientOptions: TransientOptions;\n}\n\nexport class SimpleNotebookProviderInfo {\n\tconstructor(\n\t\treadonly viewType: string,\n\t\treadonly serializer: INotebookSerializer,\n\t\treadonly extensionData: NotebookExtensionDescription,\n\t) {}\n}\n\nexport interface INotebookService {\n\treadonly _serviceBrand: undefined;\n\tcanResolve(viewType: string): Promise<boolean>;\n\n\treadonly onAddViewType: Event<string>;\n\treadonly onWillRemoveViewType: Event<string>;\n\treadonly onDidChangeOutputRenderers: Event<void>;\n\treadonly onWillAddNotebookDocument: Event<NotebookTextModel>;\n\treadonly onDidAddNotebookDocument: Event<NotebookTextModel>;\n\n\treadonly onWillRemoveNotebookDocument: Event<NotebookTextModel>;\n\treadonly onDidRemoveNotebookDocument: Event<NotebookTextModel>;\n\n\tregisterNotebookSerializer(\n\t\tviewType: string,\n\t\textensionData: NotebookExtensionDescription,\n\t\tserializer: INotebookSerializer,\n\t): IDisposable;\n\twithNotebookDataProvider(\n\t\tviewType: string,\n\t): Promise<SimpleNotebookProviderInfo>;\n\ttryGetDataProviderSync(\n\t\tviewType: string,\n\t): SimpleNotebookProviderInfo | undefined;\n\n\tgetOutputMimeTypeInfo(\n\t\ttextModel: NotebookTextModel,\n\t\tkernelProvides: readonly string[] | undefined,\n\t\toutput: IOutputDto,\n\t): readonly IOrderedMimeType[];\n\n\tgetViewTypeProvider(viewType: string): string | undefined;\n\tgetRendererInfo(id: string): INotebookRendererInfo | undefined;\n\tgetRenderers(): INotebookRendererInfo[];\n\n\tgetStaticPreloads(viewType: string): Iterable<INotebookStaticPreloadInfo>;\n\n\t/** Updates the preferred renderer for the given mimetype in the workspace. */\n\tupdateMimePreferredRenderer(\n\t\tviewType: string,\n\t\tmimeType: string,\n\t\trendererId: string,\n\t\totherMimetypes: readonly string[],\n\t): void;\n\tsaveMimeDisplayOrder(target: ConfigurationTarget): void;\n\n\tcreateNotebookTextModel(\n\t\tviewType: string,\n\t\turi: URI,\n\t\tstream?: VSBufferReadableStream,\n\t): Promise<NotebookTextModel>;\n\tgetNotebookTextModel(uri: URI): NotebookTextModel | undefined;\n\tgetNotebookTextModels(): Iterable<NotebookTextModel>;\n\tlistNotebookDocuments(): readonly NotebookTextModel[];\n\n\t/**\tRegister a notebook type that we will handle. The notebook editor will be registered for notebook types contributed by extensions */\n\tregisterContributedNotebookType(\n\t\tviewType: string,\n\t\tdata: INotebookContributionData,\n\t): IDisposable;\n\tgetContributedNotebookType(\n\t\tviewType: string,\n\t): NotebookProviderInfo | undefined;\n\tgetContributedNotebookTypes(\n\t\tresource?: URI,\n\t): readonly NotebookProviderInfo[];\n\tgetNotebookProviderResourceRoots(): URI[];\n\n\tsetToCopy(items: NotebookCellTextModel[], isCopy: boolean): void;\n\tgetToCopy():\n\t\t| { items: NotebookCellTextModel[]; isCopy: boolean }\n\t\t| undefined;\n\tclearEditorCache(): void;\n}\n"],
  "mappings": ";;AAkBA,SAAS,uBAAuB;AAkBzB,MAAM,mBACZ,gBAAkC,iBAAiB;AAuC7C,MAAM,2BAA2B;AAAA,EACvC,YACU,UACA,YACA,eACR;AAHQ;AACA;AACA;AAAA,EACP;AAAA,EAjFJ,OA4EwC;AAAA;AAAA;AAMxC;",
  "names": []
}
