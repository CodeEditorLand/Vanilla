{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookOutputRenderer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from '../../../../base/common/glob.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { INotebookRendererInfo, ContributedNotebookRendererEntrypoint, NotebookRendererMatch, RendererMessagingSpec, NotebookRendererEntrypoint, INotebookStaticPreloadInfo as INotebookStaticPreloadInfo } from './notebookCommon.js';\n\nclass DependencyList {\n\tprivate readonly value: ReadonlySet<string>;\n\tpublic readonly defined: boolean;\n\n\tconstructor(value: Iterable<string>) {\n\t\tthis.value = new Set(value);\n\t\tthis.defined = this.value.size > 0;\n\t}\n\n\t/** Gets whether any of the 'available' dependencies match the ones in this list */\n\tpublic matches(available: ReadonlyArray<string>) {\n\t\t// For now this is simple, but this may expand to support globs later\n\t\t// @see https://github.com/microsoft/vscode/issues/119899\n\t\treturn available.some(v => this.value.has(v));\n\t}\n}\n\nexport class NotebookOutputRendererInfo implements INotebookRendererInfo {\n\n\treadonly id: string;\n\treadonly entrypoint: NotebookRendererEntrypoint;\n\treadonly displayName: string;\n\treadonly extensionLocation: URI;\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly hardDependencies: DependencyList;\n\treadonly optionalDependencies: DependencyList;\n\treadonly messaging: RendererMessagingSpec;\n\n\treadonly mimeTypes: readonly string[];\n\tprivate readonly mimeTypeGlobs: glob.ParsedPattern[];\n\n\treadonly isBuiltin: boolean;\n\n\tconstructor(descriptor: {\n\t\treadonly id: string;\n\t\treadonly displayName: string;\n\t\treadonly entrypoint: ContributedNotebookRendererEntrypoint;\n\t\treadonly mimeTypes: readonly string[];\n\t\treadonly extension: IExtensionDescription;\n\t\treadonly dependencies: readonly string[] | undefined;\n\t\treadonly optionalDependencies: readonly string[] | undefined;\n\t\treadonly requiresMessaging: RendererMessagingSpec | undefined;\n\t}) {\n\t\tthis.id = descriptor.id;\n\t\tthis.extensionId = descriptor.extension.identifier;\n\t\tthis.extensionLocation = descriptor.extension.extensionLocation;\n\t\tthis.isBuiltin = descriptor.extension.isBuiltin;\n\n\t\tif (typeof descriptor.entrypoint === 'string') {\n\t\t\tthis.entrypoint = {\n\t\t\t\textends: undefined,\n\t\t\t\tpath: joinPath(this.extensionLocation, descriptor.entrypoint)\n\t\t\t};\n\t\t} else {\n\t\t\tthis.entrypoint = {\n\t\t\t\textends: descriptor.entrypoint.extends,\n\t\t\t\tpath: joinPath(this.extensionLocation, descriptor.entrypoint.path)\n\t\t\t};\n\t\t}\n\n\t\tthis.displayName = descriptor.displayName;\n\t\tthis.mimeTypes = descriptor.mimeTypes;\n\t\tthis.mimeTypeGlobs = this.mimeTypes.map(pattern => glob.parse(pattern));\n\t\tthis.hardDependencies = new DependencyList(descriptor.dependencies ?? Iterable.empty());\n\t\tthis.optionalDependencies = new DependencyList(descriptor.optionalDependencies ?? Iterable.empty());\n\t\tthis.messaging = descriptor.requiresMessaging ?? RendererMessagingSpec.Never;\n\t}\n\n\tpublic matchesWithoutKernel(mimeType: string) {\n\t\tif (!this.matchesMimeTypeOnly(mimeType)) {\n\t\t\treturn NotebookRendererMatch.Never;\n\t\t}\n\n\t\tif (this.hardDependencies.defined) {\n\t\t\treturn NotebookRendererMatch.WithHardKernelDependency;\n\t\t}\n\n\t\tif (this.optionalDependencies.defined) {\n\t\t\treturn NotebookRendererMatch.WithOptionalKernelDependency;\n\t\t}\n\n\t\treturn NotebookRendererMatch.Pure;\n\t}\n\n\tpublic matches(mimeType: string, kernelProvides: ReadonlyArray<string>) {\n\t\tif (!this.matchesMimeTypeOnly(mimeType)) {\n\t\t\treturn NotebookRendererMatch.Never;\n\t\t}\n\n\t\tif (this.hardDependencies.defined) {\n\t\t\treturn this.hardDependencies.matches(kernelProvides)\n\t\t\t\t? NotebookRendererMatch.WithHardKernelDependency\n\t\t\t\t: NotebookRendererMatch.Never;\n\t\t}\n\n\t\treturn this.optionalDependencies.matches(kernelProvides)\n\t\t\t? NotebookRendererMatch.WithOptionalKernelDependency\n\t\t\t: NotebookRendererMatch.Pure;\n\t}\n\n\tprivate matchesMimeTypeOnly(mimeType: string) {\n\t\tif (this.entrypoint.extends) { // We're extending another renderer\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.mimeTypeGlobs.some(pattern => pattern(mimeType)) || this.mimeTypes.some(pattern => pattern === mimeType);\n\t}\n}\n\nexport class NotebookStaticPreloadInfo implements INotebookStaticPreloadInfo {\n\n\treadonly type: string;\n\treadonly entrypoint: URI;\n\treadonly extensionLocation: URI;\n\treadonly localResourceRoots: readonly URI[];\n\n\tconstructor(descriptor: {\n\t\treadonly type: string;\n\t\treadonly entrypoint: string;\n\t\treadonly localResourceRoots: readonly string[];\n\t\treadonly extension: IExtensionDescription;\n\t}) {\n\t\tthis.type = descriptor.type;\n\n\t\tthis.entrypoint = joinPath(descriptor.extension.extensionLocation, descriptor.entrypoint);\n\t\tthis.extensionLocation = descriptor.extension.extensionLocation;\n\t\tthis.localResourceRoots = descriptor.localResourceRoots.map(root => joinPath(descriptor.extension.extensionLocation, root));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
