{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/model/notebookCellOutputTextModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { ICellOutput, IOutputDto, IOutputItemDto, compressOutputItemStreams, isTextStreamMime } from '../notebookCommon.js';\n\nexport class NotebookCellOutputTextModel extends Disposable implements ICellOutput {\n\n\tprivate _onDidChangeData = this._register(new Emitter<void>());\n\tonDidChangeData = this._onDidChangeData.event;\n\n\tget outputs() {\n\t\treturn this._rawOutput.outputs || [];\n\t}\n\n\tget metadata(): Record<string, any> | undefined {\n\t\treturn this._rawOutput.metadata;\n\t}\n\n\tget outputId(): string {\n\t\treturn this._rawOutput.outputId;\n\t}\n\n\t/**\n\t * Alternative output id that's reused when the output is updated.\n\t */\n\tprivate _alternativeOutputId: string;\n\n\tget alternativeOutputId(): string {\n\t\treturn this._alternativeOutputId;\n\t}\n\n\tprivate _versionId = 0;\n\n\tget versionId() {\n\t\treturn this._versionId;\n\t}\n\n\tconstructor(\n\t\tprivate _rawOutput: IOutputDto\n\t) {\n\t\tsuper();\n\n\t\tthis._alternativeOutputId = this._rawOutput.outputId;\n\t}\n\n\treplaceData(rawData: IOutputDto) {\n\t\tthis.versionedBufferLengths = {};\n\t\tthis._rawOutput = rawData;\n\t\tthis.optimizeOutputItems();\n\t\tthis._versionId = this._versionId + 1;\n\t\tthis._onDidChangeData.fire();\n\t}\n\n\tappendData(items: IOutputItemDto[]) {\n\t\tthis.trackBufferLengths();\n\t\tthis._rawOutput.outputs.push(...items);\n\t\tthis.optimizeOutputItems();\n\t\tthis._versionId = this._versionId + 1;\n\t\tthis._onDidChangeData.fire();\n\t}\n\n\tprivate trackBufferLengths() {\n\t\tthis.outputs.forEach(output => {\n\t\t\tif (isTextStreamMime(output.mime)) {\n\t\t\t\tif (!this.versionedBufferLengths[output.mime]) {\n\t\t\t\t\tthis.versionedBufferLengths[output.mime] = {};\n\t\t\t\t}\n\t\t\t\tthis.versionedBufferLengths[output.mime][this.versionId] = output.data.byteLength;\n\t\t\t}\n\t\t});\n\t}\n\n\t// mime: versionId: buffer length\n\tprivate versionedBufferLengths: Record<string, Record<number, number>> = {};\n\n\tappendedSinceVersion(versionId: number, mime: string): VSBuffer | undefined {\n\t\tconst bufferLength = this.versionedBufferLengths[mime]?.[versionId];\n\t\tconst output = this.outputs.find(output => output.mime === mime);\n\t\tif (bufferLength && output) {\n\t\t\treturn output.data.slice(bufferLength);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate optimizeOutputItems() {\n\t\tif (this.outputs.length > 1 && this.outputs.every(item => isTextStreamMime(item.mime))) {\n\t\t\t// Look for the mimes in the items, and keep track of their order.\n\t\t\t// Merge the streams into one output item, per mime type.\n\t\t\tconst mimeOutputs = new Map<string, Uint8Array[]>();\n\t\t\tconst mimeTypes: string[] = [];\n\t\t\tthis.outputs.forEach(item => {\n\t\t\t\tlet items: Uint8Array[];\n\t\t\t\tif (mimeOutputs.has(item.mime)) {\n\t\t\t\t\titems = mimeOutputs.get(item.mime)!;\n\t\t\t\t} else {\n\t\t\t\t\titems = [];\n\t\t\t\t\tmimeOutputs.set(item.mime, items);\n\t\t\t\t\tmimeTypes.push(item.mime);\n\t\t\t\t}\n\t\t\t\titems.push(item.data.buffer);\n\t\t\t});\n\t\t\tthis.outputs.length = 0;\n\t\t\tmimeTypes.forEach(mime => {\n\t\t\t\tconst compressionResult = compressOutputItemStreams(mimeOutputs.get(mime)!);\n\t\t\t\tthis.outputs.push({\n\t\t\t\t\tmime,\n\t\t\t\t\tdata: compressionResult.data\n\t\t\t\t});\n\t\t\t\tif (compressionResult.didCompression) {\n\t\t\t\t\t// we can't rely on knowing buffer lengths if we've erased previous lines\n\t\t\t\t\tthis.versionedBufferLengths = {};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tasDto(): IOutputDto {\n\t\treturn {\n\t\t\t// data: this._data,\n\t\t\tmetadata: this._rawOutput.metadata,\n\t\t\toutputs: this._rawOutput.outputs,\n\t\t\toutputId: this._rawOutput.outputId\n\t\t};\n\t}\n\n\tbumpVersion() {\n\t\tthis._versionId = this._versionId + 1;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["output"]
}
