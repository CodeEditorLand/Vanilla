{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookRendererMessagingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport const INotebookRendererMessagingService =\n\tcreateDecorator<INotebookRendererMessagingService>(\n\t\t\"INotebookRendererMessagingService\",\n\t);\n\nexport interface INotebookRendererMessagingService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event that fires when a message should be posted to extension hosts.\n\t */\n\tonShouldPostMessage: Event<{\n\t\teditorId: string;\n\t\trendererId: string;\n\t\tmessage: unknown;\n\t}>;\n\n\t/**\n\t * Prepares messaging for the given renderer ID.\n\t */\n\tprepare(rendererId: string): void;\n\t/**\n\t * Gets messaging scoped for a specific editor.\n\t */\n\tgetScoped(editorId: string): IScopedRendererMessaging;\n\n\t/**\n\t * Called when the main thread gets a message for a renderer.\n\t */\n\treceiveMessage(\n\t\teditorId: string | undefined,\n\t\trendererId: string,\n\t\tmessage: unknown,\n\t): Promise<boolean>;\n}\n\nexport interface IScopedRendererMessaging extends IDisposable {\n\t/**\n\t * Method called when a message is received. Should return a boolean\n\t * indicating whether a renderer received it.\n\t */\n\treceiveMessageHandler?: (\n\t\trendererId: string,\n\t\tmessage: unknown,\n\t) => Promise<boolean>;\n\n\t/**\n\t * Sends a message to an extension from a renderer.\n\t */\n\tpostMessage(rendererId: string, message: unknown): void;\n}\n"],
  "mappings": "AAOA,SAAS,uBAAuB;AAEzB,MAAM,oCACZ;AAAA,EACC;AACD;",
  "names": []
}
