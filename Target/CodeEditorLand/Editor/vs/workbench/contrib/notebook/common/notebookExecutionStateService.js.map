{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookExecutionStateService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI, UriComponents } from \"../../../../base/common/uri.js\";\nimport type { IRange } from \"../../../../editor/common/core/range.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tNotebookCellExecutionState,\n\tNotebookExecutionState,\n} from \"./notebookCommon.js\";\nimport type {\n\tCellExecutionUpdateType,\n\tICellExecuteOutputEdit,\n\tICellExecuteOutputItemEdit,\n} from \"./notebookExecutionService.js\";\n\nexport type ICellExecuteUpdate =\n\t| ICellExecuteOutputEdit\n\t| ICellExecuteOutputItemEdit\n\t| ICellExecutionStateUpdate;\n\nexport interface ICellExecutionStateUpdate {\n\teditType: CellExecutionUpdateType.ExecutionState;\n\texecutionOrder?: number;\n\trunStartTime?: number;\n\tdidPause?: boolean;\n\tisPaused?: boolean;\n}\n\nexport interface ICellExecutionError {\n\tmessage: string;\n\tstack: string | undefined;\n\turi: UriComponents;\n\tlocation: IRange | undefined;\n}\nexport interface ICellExecutionComplete {\n\trunEndTime?: number;\n\tlastRunSuccess?: boolean;\n\terror?: ICellExecutionError;\n}\nexport enum NotebookExecutionType {\n\tcell = 0,\n\tnotebook = 1,\n}\nexport interface ICellExecutionStateChangedEvent {\n\ttype: NotebookExecutionType.cell;\n\tnotebook: URI;\n\tcellHandle: number;\n\tchanged?: INotebookCellExecution; // undefined -> execution was completed\n\taffectsCell(cell: URI): boolean;\n\taffectsNotebook(notebook: URI): boolean;\n}\nexport interface IExecutionStateChangedEvent {\n\ttype: NotebookExecutionType.notebook;\n\tnotebook: URI;\n\tchanged?: INotebookExecution; // undefined -> execution was completed\n\taffectsNotebook(notebook: URI): boolean;\n}\nexport interface INotebookFailStateChangedEvent {\n\tvisible: boolean;\n\tnotebook: URI;\n}\n\nexport interface IFailedCellInfo {\n\tcellHandle: number;\n\tdisposable: IDisposable;\n\tvisible: boolean;\n}\n\nexport const INotebookExecutionStateService =\n\tcreateDecorator<INotebookExecutionStateService>(\n\t\t\"INotebookExecutionStateService\",\n\t);\n\nexport interface INotebookExecutionStateService {\n\t_serviceBrand: undefined;\n\n\tonDidChangeExecution: Event<\n\t\tICellExecutionStateChangedEvent | IExecutionStateChangedEvent\n\t>;\n\tonDidChangeLastRunFailState: Event<INotebookFailStateChangedEvent>;\n\n\tforceCancelNotebookExecutions(notebookUri: URI): void;\n\tgetCellExecutionsForNotebook(notebook: URI): INotebookCellExecution[];\n\tgetCellExecutionsByHandleForNotebook(\n\t\tnotebook: URI,\n\t): Map<number, INotebookCellExecution> | undefined;\n\tgetCellExecution(cellUri: URI): INotebookCellExecution | undefined;\n\tcreateCellExecution(\n\t\tnotebook: URI,\n\t\tcellHandle: number,\n\t): INotebookCellExecution;\n\tgetExecution(notebook: URI): INotebookExecution | undefined;\n\tcreateExecution(notebook: URI): INotebookExecution;\n\tgetLastFailedCellForNotebook(notebook: URI): number | undefined;\n}\n\nexport interface INotebookCellExecution {\n\treadonly notebook: URI;\n\treadonly cellHandle: number;\n\treadonly state: NotebookCellExecutionState;\n\treadonly didPause: boolean;\n\treadonly isPaused: boolean;\n\n\tconfirm(): void;\n\tupdate(updates: ICellExecuteUpdate[]): void;\n\tcomplete(complete: ICellExecutionComplete): void;\n}\nexport interface INotebookExecution {\n\treadonly notebook: URI;\n\treadonly state: NotebookExecutionState;\n\n\tconfirm(): void;\n\tbegin(): void;\n\tcomplete(): void;\n}\n"],
  "mappings": "AASA,SAAS,uBAAuB;AAmCzB,IAAK,wBAAL,kBAAKA,2BAAL;AACN,EAAAA,8CAAA,UAAO,KAAP;AACA,EAAAA,8CAAA,cAAW,KAAX;AAFW,SAAAA;AAAA,GAAA;AA6BL,MAAM,iCACZ;AAAA,EACC;AACD;",
  "names": ["NotebookExecutionType"]
}
