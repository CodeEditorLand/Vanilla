{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype VSBufferReadableStream,\n\tbufferToStream,\n\tstreamToBuffer,\n} from \"../../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { CancellationError } from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { filter } from \"../../../../base/common/objects.js\";\nimport { assertType } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type {\n\tIFileStatWithMetadata,\n\tIWriteFileOptions,\n} from \"../../../../platform/files/common/files.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type {\n\tIRevertOptions,\n\tISaveOptions,\n\tIUntypedEditorInput,\n} from \"../../../common/editor.js\";\nimport { EditorModel } from \"../../../common/editor/editorModel.js\";\nimport { IFilesConfigurationService } from \"../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport {\n\ttype IFileWorkingCopyModelConfiguration,\n\tSnapshotContext,\n} from \"../../../services/workingCopy/common/fileWorkingCopy.js\";\nimport type { IFileWorkingCopyManager } from \"../../../services/workingCopy/common/fileWorkingCopyManager.js\";\nimport {\n\ttype IStoredFileWorkingCopy,\n\ttype IStoredFileWorkingCopyModel,\n\ttype IStoredFileWorkingCopyModelContentChangedEvent,\n\ttype IStoredFileWorkingCopyModelFactory,\n\ttype IStoredFileWorkingCopySaveEvent,\n\tStoredFileWorkingCopyState,\n} from \"../../../services/workingCopy/common/storedFileWorkingCopy.js\";\nimport type {\n\tIUntitledFileWorkingCopy,\n\tIUntitledFileWorkingCopyModel,\n\tIUntitledFileWorkingCopyModelContentChangedEvent,\n\tIUntitledFileWorkingCopyModelFactory,\n} from \"../../../services/workingCopy/common/untitledFileWorkingCopy.js\";\nimport { WorkingCopyCapabilities } from \"../../../services/workingCopy/common/workingCopy.js\";\nimport type { NotebookTextModel } from \"./model/notebookTextModel.js\";\nimport {\n\ttype ICellDto2,\n\ttype INotebookEditorModel,\n\ttype INotebookLoadOptions,\n\ttype IResolvedNotebookEditorModel,\n\tNotebookCellsChangeType,\n\ttype NotebookData,\n\tNotebookSetting,\n} from \"./notebookCommon.js\";\nimport { INotebookLoggingService } from \"./notebookLoggingService.js\";\nimport {\n\ttype INotebookSerializer,\n\tINotebookService,\n\tSimpleNotebookProviderInfo,\n} from \"./notebookService.js\";\n\n//#region --- simple content provider\n\nexport class SimpleNotebookEditorModel\n\textends EditorModel\n\timplements INotebookEditorModel\n{\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\tprivate readonly _onDidSave = this._register(\n\t\tnew Emitter<IStoredFileWorkingCopySaveEvent>(),\n\t);\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<void>());\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<void>());\n\tprivate readonly _onDidRevertUntitled = this._register(new Emitter<void>());\n\n\treadonly onDidChangeDirty: Event<void> = this._onDidChangeDirty.event;\n\treadonly onDidSave: Event<IStoredFileWorkingCopySaveEvent> =\n\t\tthis._onDidSave.event;\n\treadonly onDidChangeOrphaned: Event<void> = this._onDidChangeOrphaned.event;\n\treadonly onDidChangeReadonly: Event<void> = this._onDidChangeReadonly.event;\n\treadonly onDidRevertUntitled: Event<void> = this._onDidRevertUntitled.event;\n\n\tprivate _workingCopy?:\n\t\t| IStoredFileWorkingCopy<NotebookFileWorkingCopyModel>\n\t\t| IUntitledFileWorkingCopy<NotebookFileWorkingCopyModel>;\n\tprivate readonly _workingCopyListeners = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate readonly scratchPad: boolean;\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\tprivate readonly _hasAssociatedFilePath: boolean,\n\t\treadonly viewType: string,\n\t\tprivate readonly _workingCopyManager: IFileWorkingCopyManager<NotebookFileWorkingCopyModel, NotebookFileWorkingCopyModel>,\n\t\tscratchpad: boolean,\n\t\t@IFilesConfigurationService private readonly _filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.scratchPad = scratchpad;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._workingCopy?.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tget notebook(): NotebookTextModel | undefined {\n\t\treturn this._workingCopy?.model?.notebookModel;\n\t}\n\n\toverride isResolved(): this is IResolvedNotebookEditorModel {\n\t\treturn Boolean(this._workingCopy?.model?.notebookModel);\n\t}\n\n\tasync canDispose(): Promise<boolean> {\n\t\tif (!this._workingCopy) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\tSimpleNotebookEditorModel._isStoredFileWorkingCopy(\n\t\t\t\tthis._workingCopy,\n\t\t\t)\n\t\t) {\n\t\t\treturn this._workingCopyManager.stored.canDispose(\n\t\t\t\tthis._workingCopy,\n\t\t\t);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tisDirty(): boolean {\n\t\treturn this._workingCopy?.isDirty() ?? false;\n\t}\n\n\tisModified(): boolean {\n\t\treturn this._workingCopy?.isModified() ?? false;\n\t}\n\n\tisOrphaned(): boolean {\n\t\treturn (\n\t\t\tSimpleNotebookEditorModel._isStoredFileWorkingCopy(\n\t\t\t\tthis._workingCopy,\n\t\t\t) && this._workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN)\n\t\t);\n\t}\n\n\thasAssociatedFilePath(): boolean {\n\t\treturn (\n\t\t\t!SimpleNotebookEditorModel._isStoredFileWorkingCopy(\n\t\t\t\tthis._workingCopy,\n\t\t\t) && !!this._workingCopy?.hasAssociatedFilePath\n\t\t);\n\t}\n\n\tisReadonly(): boolean | IMarkdownString {\n\t\tif (\n\t\t\tSimpleNotebookEditorModel._isStoredFileWorkingCopy(\n\t\t\t\tthis._workingCopy,\n\t\t\t)\n\t\t) {\n\t\t\treturn this._workingCopy?.isReadonly();\n\t\t} else {\n\t\t\treturn this._filesConfigurationService.isReadonly(this.resource);\n\t\t}\n\t}\n\n\tget hasErrorState(): boolean {\n\t\tif (this._workingCopy && \"hasState\" in this._workingCopy) {\n\t\t\treturn this._workingCopy.hasState(StoredFileWorkingCopyState.ERROR);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\trevert(options?: IRevertOptions): Promise<void> {\n\t\tassertType(this.isResolved());\n\t\treturn this._workingCopy!.revert(options);\n\t}\n\n\tsave(options?: ISaveOptions): Promise<boolean> {\n\t\tassertType(this.isResolved());\n\t\treturn this._workingCopy!.save(options);\n\t}\n\n\tasync load(\n\t\toptions?: INotebookLoadOptions,\n\t): Promise<IResolvedNotebookEditorModel> {\n\t\tif (!this._workingCopy || !this._workingCopy.model) {\n\t\t\tif (this.resource.scheme === Schemas.untitled) {\n\t\t\t\tif (this._hasAssociatedFilePath) {\n\t\t\t\t\tthis._workingCopy = await this._workingCopyManager.resolve({\n\t\t\t\t\t\tassociatedResource: this.resource,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis._workingCopy = await this._workingCopyManager.resolve({\n\t\t\t\t\t\tuntitledResource: this.resource,\n\t\t\t\t\t\tisScratchpad: this.scratchPad,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis._workingCopy.onDidRevert(() =>\n\t\t\t\t\tthis._onDidRevertUntitled.fire(),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._workingCopy = await this._workingCopyManager.resolve(\n\t\t\t\t\tthis.resource,\n\t\t\t\t\t{\n\t\t\t\t\t\tlimits: options?.limits,\n\t\t\t\t\t\treload: options?.forceReadFromFile\n\t\t\t\t\t\t\t? { async: false, force: true }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tthis._workingCopyListeners.add(\n\t\t\t\t\tthis._workingCopy.onDidSave((e) => this._onDidSave.fire(e)),\n\t\t\t\t);\n\t\t\t\tthis._workingCopyListeners.add(\n\t\t\t\t\tthis._workingCopy.onDidChangeOrphaned(() =>\n\t\t\t\t\t\tthis._onDidChangeOrphaned.fire(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._workingCopyListeners.add(\n\t\t\t\t\tthis._workingCopy.onDidChangeReadonly(() =>\n\t\t\t\t\t\tthis._onDidChangeReadonly.fire(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._workingCopyListeners.add(\n\t\t\t\tthis._workingCopy.onDidChangeDirty(\n\t\t\t\t\t() => this._onDidChangeDirty.fire(),\n\t\t\t\t\tundefined,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tthis._workingCopyListeners.add(\n\t\t\t\tthis._workingCopy.onWillDispose(() => {\n\t\t\t\t\tthis._workingCopyListeners.clear();\n\t\t\t\t\tthis._workingCopy?.model?.dispose();\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\tawait this._workingCopyManager.resolve(this.resource, {\n\t\t\t\treload: {\n\t\t\t\t\tasync: !options?.forceReadFromFile,\n\t\t\t\t\tforce: options?.forceReadFromFile,\n\t\t\t\t},\n\t\t\t\tlimits: options?.limits,\n\t\t\t});\n\t\t}\n\n\t\tassertType(this.isResolved());\n\t\treturn this;\n\t}\n\n\tasync saveAs(target: URI): Promise<IUntypedEditorInput | undefined> {\n\t\tconst newWorkingCopy = await this._workingCopyManager.saveAs(\n\t\t\tthis.resource,\n\t\t\ttarget,\n\t\t);\n\t\tif (!newWorkingCopy) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// this is a little hacky because we leave the new working copy alone. BUT\n\t\t// the newly created editor input will pick it up and claim ownership of it.\n\t\treturn { resource: newWorkingCopy.resource };\n\t}\n\n\tprivate static _isStoredFileWorkingCopy(\n\t\tcandidate?:\n\t\t\t| IStoredFileWorkingCopy<NotebookFileWorkingCopyModel>\n\t\t\t| IUntitledFileWorkingCopy<NotebookFileWorkingCopyModel>,\n\t): candidate is IStoredFileWorkingCopy<NotebookFileWorkingCopyModel> {\n\t\tconst isUntitled =\n\t\t\tcandidate &&\n\t\t\tcandidate.capabilities & WorkingCopyCapabilities.Untitled;\n\n\t\treturn !isUntitled;\n\t}\n}\n\nexport class NotebookFileWorkingCopyModel\n\textends Disposable\n\timplements IStoredFileWorkingCopyModel, IUntitledFileWorkingCopyModel\n{\n\tprivate readonly _onDidChangeContent = this._register(\n\t\tnew Emitter<\n\t\t\tIStoredFileWorkingCopyModelContentChangedEvent &\n\t\t\t\tIUntitledFileWorkingCopyModelContentChangedEvent\n\t\t>(),\n\t);\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\treadonly onWillDispose: Event<void>;\n\n\treadonly configuration: IFileWorkingCopyModelConfiguration | undefined =\n\t\tundefined;\n\tsave:\n\t\t| ((\n\t\t\t\toptions: IWriteFileOptions,\n\t\t\t\ttoken: CancellationToken,\n\t\t  ) => Promise<IFileStatWithMetadata>)\n\t\t| undefined;\n\n\tconstructor(\n\t\tprivate readonly _notebookModel: NotebookTextModel,\n\t\tprivate readonly _notebookService: INotebookService,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\tprivate readonly _notebookLogService: INotebookLoggingService,\n\t) {\n\t\tsuper();\n\n\t\tthis.onWillDispose = _notebookModel.onWillDispose.bind(_notebookModel);\n\n\t\tthis._register(\n\t\t\t_notebookModel.onDidChangeContent((e) => {\n\t\t\t\tfor (const rawEvent of e.rawEvents) {\n\t\t\t\t\tif (rawEvent.kind === NotebookCellsChangeType.Initialize) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (rawEvent.transient) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._onDidChangeContent.fire({\n\t\t\t\t\t\tisRedoing: false, //todo@rebornix forward this information from notebook model\n\t\t\t\t\t\tisUndoing: false,\n\t\t\t\t\t\tisInitial: false, //_notebookModel.cells.length === 0 // todo@jrieken non transient metadata?\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst saveWithReducedCommunication =\n\t\t\tthis._configurationService.getValue(NotebookSetting.remoteSaving);\n\n\t\tif (\n\t\t\tsaveWithReducedCommunication ||\n\t\t\t_notebookModel.uri.scheme === Schemas.vscodeRemote\n\t\t) {\n\t\t\tthis.configuration = {\n\t\t\t\t// Intentionally pick a larger delay for triggering backups to allow auto-save\n\t\t\t\t// to complete first on the optimized save path\n\t\t\t\tbackupDelay: 10000,\n\t\t\t};\n\t\t}\n\n\t\t// Override save behavior to avoid transferring the buffer across the wire 3 times\n\t\tif (saveWithReducedCommunication) {\n\t\t\tthis.setSaveDelegate().catch(console.error);\n\t\t}\n\t}\n\n\tprivate async setSaveDelegate() {\n\t\t// make sure we wait for a serializer to resolve before we try to handle saves in the EH\n\t\tawait this.getNotebookSerializer();\n\n\t\tthis.save = async (\n\t\t\toptions: IWriteFileOptions,\n\t\t\ttoken: CancellationToken,\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tlet serializer = this._notebookService.tryGetDataProviderSync(\n\t\t\t\t\tthis.notebookModel.viewType,\n\t\t\t\t)?.serializer;\n\n\t\t\t\tif (!serializer) {\n\t\t\t\t\tthis._notebookLogService.info(\n\t\t\t\t\t\t\"WorkingCopyModel\",\n\t\t\t\t\t\t\"No serializer found for notebook model, checking if provider still needs to be resolved\",\n\t\t\t\t\t);\n\t\t\t\t\tserializer = await this.getNotebookSerializer();\n\t\t\t\t}\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t}\n\n\t\t\t\tconst stat = await serializer.save(\n\t\t\t\t\tthis._notebookModel.uri,\n\t\t\t\t\tthis._notebookModel.versionId,\n\t\t\t\t\toptions,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t\treturn stat;\n\t\t\t} catch (error) {\n\t\t\t\tif (!token.isCancellationRequested) {\n\t\t\t\t\ttype notebookSaveErrorData = {\n\t\t\t\t\t\tisRemote: boolean;\n\t\t\t\t\t\terror: Error;\n\t\t\t\t\t};\n\t\t\t\t\ttype notebookSaveErrorClassification = {\n\t\t\t\t\t\towner: \"amunger\";\n\t\t\t\t\t\tcomment: \"Detect if we are having issues saving a notebook on the Extension Host\";\n\t\t\t\t\t\tisRemote: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\t\tcomment: \"Whether the save is happening on a remote file system\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\t\tcomment: \"Info about the error that occurred\";\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tthis._telemetryService.publicLogError2<\n\t\t\t\t\t\tnotebookSaveErrorData,\n\t\t\t\t\t\tnotebookSaveErrorClassification\n\t\t\t\t\t>(\"notebook/SaveError\", {\n\t\t\t\t\t\tisRemote:\n\t\t\t\t\t\t\tthis._notebookModel.uri.scheme ===\n\t\t\t\t\t\t\tSchemas.vscodeRemote,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t};\n\t}\n\n\toverride dispose(): void {\n\t\tthis._notebookModel.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tget notebookModel() {\n\t\treturn this._notebookModel;\n\t}\n\n\tasync snapshot(\n\t\tcontext: SnapshotContext,\n\t\ttoken: CancellationToken,\n\t): Promise<VSBufferReadableStream> {\n\t\tconst serializer = await this.getNotebookSerializer();\n\n\t\tconst data: NotebookData = {\n\t\t\tmetadata: filter(\n\t\t\t\tthis._notebookModel.metadata,\n\t\t\t\t(key) => !serializer.options.transientDocumentMetadata[key],\n\t\t\t),\n\t\t\tcells: [],\n\t\t};\n\n\t\tlet outputSize = 0;\n\t\tfor (const cell of this._notebookModel.cells) {\n\t\t\tconst cellData: ICellDto2 = {\n\t\t\t\tcellKind: cell.cellKind,\n\t\t\t\tlanguage: cell.language,\n\t\t\t\tmime: cell.mime,\n\t\t\t\tsource: cell.getValue(),\n\t\t\t\toutputs: [],\n\t\t\t\tinternalMetadata: cell.internalMetadata,\n\t\t\t};\n\n\t\t\tconst outputSizeLimit =\n\t\t\t\tthis._configurationService.getValue<number>(\n\t\t\t\t\tNotebookSetting.outputBackupSizeLimit,\n\t\t\t\t) * 1024;\n\t\t\tif (context === SnapshotContext.Backup && outputSizeLimit > 0) {\n\t\t\t\tcell.outputs.forEach((output) => {\n\t\t\t\t\toutput.outputs.forEach((item) => {\n\t\t\t\t\t\toutputSize += item.data.byteLength;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tif (outputSize > outputSizeLimit) {\n\t\t\t\t\tthrow new Error(\"Notebook too large to backup\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcellData.outputs = serializer.options.transientOutputs\n\t\t\t\t? []\n\t\t\t\t: cell.outputs;\n\t\t\tcellData.metadata = filter(\n\t\t\t\tcell.metadata,\n\t\t\t\t(key) => !serializer.options.transientCellMetadata[key],\n\t\t\t);\n\n\t\t\tdata.cells.push(cellData);\n\t\t}\n\n\t\tconst bytes = await serializer.notebookToData(data);\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\t\treturn bufferToStream(bytes);\n\t}\n\n\tasync update(\n\t\tstream: VSBufferReadableStream,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst serializer = await this.getNotebookSerializer();\n\n\t\tconst bytes = await streamToBuffer(stream);\n\t\tconst data = await serializer.dataToNotebook(bytes);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\tthis._notebookLogService.info(\n\t\t\t\"WorkingCopyModel\",\n\t\t\t\"Notebook content updated from file system - \" +\n\t\t\t\tthis._notebookModel.uri.toString(),\n\t\t);\n\t\tthis._notebookModel.reset(\n\t\t\tdata.cells,\n\t\t\tdata.metadata,\n\t\t\tserializer.options,\n\t\t);\n\t}\n\n\tasync getNotebookSerializer(): Promise<INotebookSerializer> {\n\t\tconst info = await this._notebookService.withNotebookDataProvider(\n\t\t\tthis.notebookModel.viewType,\n\t\t);\n\t\tif (!(info instanceof SimpleNotebookProviderInfo)) {\n\t\t\tthrow new Error(\"CANNOT open file notebook with this provider\");\n\t\t}\n\n\t\treturn info.serializer;\n\t}\n\n\tget versionId() {\n\t\treturn this._notebookModel.alternativeVersionId;\n\t}\n\n\tpushStackElement(): void {\n\t\tthis._notebookModel.pushStackElement();\n\t}\n}\n\nexport class NotebookFileWorkingCopyModelFactory\n\timplements\n\t\tIStoredFileWorkingCopyModelFactory<NotebookFileWorkingCopyModel>,\n\t\tIUntitledFileWorkingCopyModelFactory<NotebookFileWorkingCopyModel>\n{\n\tconstructor(\n\t\tprivate readonly _viewType: string,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INotebookLoggingService private readonly _notebookLogService: INotebookLoggingService\n\t) { }\n\n\tasync createModel(\n\t\tresource: URI,\n\t\tstream: VSBufferReadableStream,\n\t\ttoken: CancellationToken,\n\t): Promise<NotebookFileWorkingCopyModel> {\n\t\tconst notebookModel =\n\t\t\tthis._notebookService.getNotebookTextModel(resource) ??\n\t\t\t(await this._notebookService.createNotebookTextModel(\n\t\t\t\tthis._viewType,\n\t\t\t\tresource,\n\t\t\t\tstream,\n\t\t\t));\n\n\t\treturn new NotebookFileWorkingCopyModel(\n\t\t\tnotebookModel,\n\t\t\tthis._notebookService,\n\t\t\tthis._configurationService,\n\t\t\tthis._telemetryService,\n\t\t\tthis._notebookLogService,\n\t\t);\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
