{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBufferReadableStream, bufferToStream, streamToBuffer } from '../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { filter } from '../../../../base/common/objects.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IWriteFileOptions, IFileStatWithMetadata } from '../../../../platform/files/common/files.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IRevertOptions, ISaveOptions, IUntypedEditorInput } from '../../../common/editor.js';\nimport { EditorModel } from '../../../common/editor/editorModel.js';\nimport { NotebookTextModel } from './model/notebookTextModel.js';\nimport { ICellDto2, INotebookEditorModel, INotebookLoadOptions, IResolvedNotebookEditorModel, NotebookCellsChangeType, NotebookData, NotebookSetting } from './notebookCommon.js';\nimport { INotebookLoggingService } from './notebookLoggingService.js';\nimport { INotebookSerializer, INotebookService, SimpleNotebookProviderInfo } from './notebookService.js';\nimport { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { IFileWorkingCopyModelConfiguration, SnapshotContext } from '../../../services/workingCopy/common/fileWorkingCopy.js';\nimport { IFileWorkingCopyManager } from '../../../services/workingCopy/common/fileWorkingCopyManager.js';\nimport { IStoredFileWorkingCopy, IStoredFileWorkingCopyModel, IStoredFileWorkingCopyModelContentChangedEvent, IStoredFileWorkingCopyModelFactory, IStoredFileWorkingCopySaveEvent, StoredFileWorkingCopyState } from '../../../services/workingCopy/common/storedFileWorkingCopy.js';\nimport { IUntitledFileWorkingCopy, IUntitledFileWorkingCopyModel, IUntitledFileWorkingCopyModelContentChangedEvent, IUntitledFileWorkingCopyModelFactory } from '../../../services/workingCopy/common/untitledFileWorkingCopy.js';\nimport { WorkingCopyCapabilities } from '../../../services/workingCopy/common/workingCopy.js';\n\n//#region --- simple content provider\n\nexport class SimpleNotebookEditorModel extends EditorModel implements INotebookEditorModel {\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\tprivate readonly _onDidSave = this._register(new Emitter<IStoredFileWorkingCopySaveEvent>());\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<void>());\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<void>());\n\tprivate readonly _onDidRevertUntitled = this._register(new Emitter<void>());\n\n\treadonly onDidChangeDirty: Event<void> = this._onDidChangeDirty.event;\n\treadonly onDidSave: Event<IStoredFileWorkingCopySaveEvent> = this._onDidSave.event;\n\treadonly onDidChangeOrphaned: Event<void> = this._onDidChangeOrphaned.event;\n\treadonly onDidChangeReadonly: Event<void> = this._onDidChangeReadonly.event;\n\treadonly onDidRevertUntitled: Event<void> = this._onDidRevertUntitled.event;\n\n\tprivate _workingCopy?: IStoredFileWorkingCopy<NotebookFileWorkingCopyModel> | IUntitledFileWorkingCopy<NotebookFileWorkingCopyModel>;\n\tprivate readonly _workingCopyListeners = this._register(new DisposableStore());\n\tprivate readonly scratchPad: boolean;\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\tprivate readonly _hasAssociatedFilePath: boolean,\n\t\treadonly viewType: string,\n\t\tprivate readonly _workingCopyManager: IFileWorkingCopyManager<NotebookFileWorkingCopyModel, NotebookFileWorkingCopyModel>,\n\t\tscratchpad: boolean,\n\t\t@IFilesConfigurationService private readonly _filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.scratchPad = scratchpad;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._workingCopy?.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tget notebook(): NotebookTextModel | undefined {\n\t\treturn this._workingCopy?.model?.notebookModel;\n\t}\n\n\toverride isResolved(): this is IResolvedNotebookEditorModel {\n\t\treturn Boolean(this._workingCopy?.model?.notebookModel);\n\t}\n\n\tasync canDispose(): Promise<boolean> {\n\t\tif (!this._workingCopy) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (SimpleNotebookEditorModel._isStoredFileWorkingCopy(this._workingCopy)) {\n\t\t\treturn this._workingCopyManager.stored.canDispose(this._workingCopy);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tisDirty(): boolean {\n\t\treturn this._workingCopy?.isDirty() ?? false;\n\t}\n\n\tisModified(): boolean {\n\t\treturn this._workingCopy?.isModified() ?? false;\n\t}\n\n\tisOrphaned(): boolean {\n\t\treturn SimpleNotebookEditorModel._isStoredFileWorkingCopy(this._workingCopy) && this._workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN);\n\t}\n\n\thasAssociatedFilePath(): boolean {\n\t\treturn !SimpleNotebookEditorModel._isStoredFileWorkingCopy(this._workingCopy) && !!this._workingCopy?.hasAssociatedFilePath;\n\t}\n\n\tisReadonly(): boolean | IMarkdownString {\n\t\tif (SimpleNotebookEditorModel._isStoredFileWorkingCopy(this._workingCopy)) {\n\t\t\treturn this._workingCopy?.isReadonly();\n\t\t} else {\n\t\t\treturn this._filesConfigurationService.isReadonly(this.resource);\n\t\t}\n\t}\n\n\tget hasErrorState(): boolean {\n\t\tif (this._workingCopy && 'hasState' in this._workingCopy) {\n\t\t\treturn this._workingCopy.hasState(StoredFileWorkingCopyState.ERROR);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\trevert(options?: IRevertOptions): Promise<void> {\n\t\tassertType(this.isResolved());\n\t\treturn this._workingCopy!.revert(options);\n\t}\n\n\tsave(options?: ISaveOptions): Promise<boolean> {\n\t\tassertType(this.isResolved());\n\t\treturn this._workingCopy!.save(options);\n\t}\n\n\tasync load(options?: INotebookLoadOptions): Promise<IResolvedNotebookEditorModel> {\n\t\tif (!this._workingCopy || !this._workingCopy.model) {\n\t\t\tif (this.resource.scheme === Schemas.untitled) {\n\t\t\t\tif (this._hasAssociatedFilePath) {\n\t\t\t\t\tthis._workingCopy = await this._workingCopyManager.resolve({ associatedResource: this.resource });\n\t\t\t\t} else {\n\t\t\t\t\tthis._workingCopy = await this._workingCopyManager.resolve({ untitledResource: this.resource, isScratchpad: this.scratchPad });\n\t\t\t\t}\n\t\t\t\tthis._workingCopy.onDidRevert(() => this._onDidRevertUntitled.fire());\n\t\t\t} else {\n\t\t\t\tthis._workingCopy = await this._workingCopyManager.resolve(this.resource, {\n\t\t\t\t\tlimits: options?.limits,\n\t\t\t\t\treload: options?.forceReadFromFile ? { async: false, force: true } : undefined\n\t\t\t\t});\n\t\t\t\tthis._workingCopyListeners.add(this._workingCopy.onDidSave(e => this._onDidSave.fire(e)));\n\t\t\t\tthis._workingCopyListeners.add(this._workingCopy.onDidChangeOrphaned(() => this._onDidChangeOrphaned.fire()));\n\t\t\t\tthis._workingCopyListeners.add(this._workingCopy.onDidChangeReadonly(() => this._onDidChangeReadonly.fire()));\n\t\t\t}\n\t\t\tthis._workingCopyListeners.add(this._workingCopy.onDidChangeDirty(() => this._onDidChangeDirty.fire(), undefined));\n\n\t\t\tthis._workingCopyListeners.add(this._workingCopy.onWillDispose(() => {\n\t\t\t\tthis._workingCopyListeners.clear();\n\t\t\t\tthis._workingCopy?.model?.dispose();\n\t\t\t}));\n\t\t} else {\n\t\t\tawait this._workingCopyManager.resolve(this.resource, {\n\t\t\t\treload: {\n\t\t\t\t\tasync: !options?.forceReadFromFile,\n\t\t\t\t\tforce: options?.forceReadFromFile\n\t\t\t\t},\n\t\t\t\tlimits: options?.limits\n\t\t\t});\n\t\t}\n\n\t\tassertType(this.isResolved());\n\t\treturn this;\n\t}\n\n\tasync saveAs(target: URI): Promise<IUntypedEditorInput | undefined> {\n\t\tconst newWorkingCopy = await this._workingCopyManager.saveAs(this.resource, target);\n\t\tif (!newWorkingCopy) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// this is a little hacky because we leave the new working copy alone. BUT\n\t\t// the newly created editor input will pick it up and claim ownership of it.\n\t\treturn { resource: newWorkingCopy.resource };\n\t}\n\n\tprivate static _isStoredFileWorkingCopy(candidate?: IStoredFileWorkingCopy<NotebookFileWorkingCopyModel> | IUntitledFileWorkingCopy<NotebookFileWorkingCopyModel>): candidate is IStoredFileWorkingCopy<NotebookFileWorkingCopyModel> {\n\t\tconst isUntitled = candidate && candidate.capabilities & WorkingCopyCapabilities.Untitled;\n\n\t\treturn !isUntitled;\n\t}\n}\n\nexport class NotebookFileWorkingCopyModel extends Disposable implements IStoredFileWorkingCopyModel, IUntitledFileWorkingCopyModel {\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<IStoredFileWorkingCopyModelContentChangedEvent & IUntitledFileWorkingCopyModelContentChangedEvent>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\treadonly onWillDispose: Event<void>;\n\n\treadonly configuration: IFileWorkingCopyModelConfiguration | undefined = undefined;\n\tsave: ((options: IWriteFileOptions, token: CancellationToken) => Promise<IFileStatWithMetadata>) | undefined;\n\n\tconstructor(\n\t\tprivate readonly _notebookModel: NotebookTextModel,\n\t\tprivate readonly _notebookService: INotebookService,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\tprivate readonly _notebookLogService: INotebookLoggingService,\n\t) {\n\t\tsuper();\n\n\t\tthis.onWillDispose = _notebookModel.onWillDispose.bind(_notebookModel);\n\n\t\tthis._register(_notebookModel.onDidChangeContent(e => {\n\t\t\tfor (const rawEvent of e.rawEvents) {\n\t\t\t\tif (rawEvent.kind === NotebookCellsChangeType.Initialize) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (rawEvent.transient) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeContent.fire({\n\t\t\t\t\tisRedoing: false, //todo@rebornix forward this information from notebook model\n\t\t\t\t\tisUndoing: false,\n\t\t\t\t\tisInitial: false, //_notebookModel.cells.length === 0 // todo@jrieken non transient metadata?\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\tconst saveWithReducedCommunication = this._configurationService.getValue(NotebookSetting.remoteSaving);\n\n\t\tif (saveWithReducedCommunication || _notebookModel.uri.scheme === Schemas.vscodeRemote) {\n\t\t\tthis.configuration = {\n\t\t\t\t// Intentionally pick a larger delay for triggering backups to allow auto-save\n\t\t\t\t// to complete first on the optimized save path\n\t\t\t\tbackupDelay: 10000\n\t\t\t};\n\t\t}\n\n\t\t// Override save behavior to avoid transferring the buffer across the wire 3 times\n\t\tif (saveWithReducedCommunication) {\n\t\t\tthis.setSaveDelegate().catch(console.error);\n\t\t}\n\t}\n\n\tprivate async setSaveDelegate() {\n\t\t// make sure we wait for a serializer to resolve before we try to handle saves in the EH\n\t\tawait this.getNotebookSerializer();\n\n\t\tthis.save = async (options: IWriteFileOptions, token: CancellationToken) => {\n\t\t\ttry {\n\t\t\t\tlet serializer = this._notebookService.tryGetDataProviderSync(this.notebookModel.viewType)?.serializer;\n\n\t\t\t\tif (!serializer) {\n\t\t\t\t\tthis._notebookLogService.info('WorkingCopyModel', 'No serializer found for notebook model, checking if provider still needs to be resolved');\n\t\t\t\t\tserializer = await this.getNotebookSerializer();\n\t\t\t\t}\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t}\n\n\t\t\t\tconst stat = await serializer.save(this._notebookModel.uri, this._notebookModel.versionId, options, token);\n\t\t\t\treturn stat;\n\t\t\t} catch (error) {\n\t\t\t\tif (!token.isCancellationRequested) {\n\t\t\t\t\ttype notebookSaveErrorData = {\n\t\t\t\t\t\tisRemote: boolean;\n\t\t\t\t\t\terror: Error;\n\t\t\t\t\t};\n\t\t\t\t\ttype notebookSaveErrorClassification = {\n\t\t\t\t\t\towner: 'amunger';\n\t\t\t\t\t\tcomment: 'Detect if we are having issues saving a notebook on the Extension Host';\n\t\t\t\t\t\tisRemote: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the save is happening on a remote file system' };\n\t\t\t\t\t\terror: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Info about the error that occurred' };\n\t\t\t\t\t};\n\t\t\t\t\tthis._telemetryService.publicLogError2<notebookSaveErrorData, notebookSaveErrorClassification>('notebook/SaveError', {\n\t\t\t\t\t\tisRemote: this._notebookModel.uri.scheme === Schemas.vscodeRemote,\n\t\t\t\t\t\terror: error\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t};\n\t}\n\n\toverride dispose(): void {\n\t\tthis._notebookModel.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tget notebookModel() {\n\t\treturn this._notebookModel;\n\t}\n\n\tasync snapshot(context: SnapshotContext, token: CancellationToken): Promise<VSBufferReadableStream> {\n\t\tconst serializer = await this.getNotebookSerializer();\n\n\t\tconst data: NotebookData = {\n\t\t\tmetadata: filter(this._notebookModel.metadata, key => !serializer.options.transientDocumentMetadata[key]),\n\t\t\tcells: [],\n\t\t};\n\n\t\tlet outputSize = 0;\n\t\tfor (const cell of this._notebookModel.cells) {\n\t\t\tconst cellData: ICellDto2 = {\n\t\t\t\tcellKind: cell.cellKind,\n\t\t\t\tlanguage: cell.language,\n\t\t\t\tmime: cell.mime,\n\t\t\t\tsource: cell.getValue(),\n\t\t\t\toutputs: [],\n\t\t\t\tinternalMetadata: cell.internalMetadata\n\t\t\t};\n\n\t\t\tconst outputSizeLimit = this._configurationService.getValue<number>(NotebookSetting.outputBackupSizeLimit) * 1024;\n\t\t\tif (context === SnapshotContext.Backup && outputSizeLimit > 0) {\n\t\t\t\tcell.outputs.forEach(output => {\n\t\t\t\t\toutput.outputs.forEach(item => {\n\t\t\t\t\t\toutputSize += item.data.byteLength;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tif (outputSize > outputSizeLimit) {\n\t\t\t\t\tthrow new Error('Notebook too large to backup');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcellData.outputs = !serializer.options.transientOutputs ? cell.outputs : [];\n\t\t\tcellData.metadata = filter(cell.metadata, key => !serializer.options.transientCellMetadata[key]);\n\n\t\t\tdata.cells.push(cellData);\n\t\t}\n\n\t\tconst bytes = await serializer.notebookToData(data);\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\t\treturn bufferToStream(bytes);\n\t}\n\n\tasync update(stream: VSBufferReadableStream, token: CancellationToken): Promise<void> {\n\t\tconst serializer = await this.getNotebookSerializer();\n\n\t\tconst bytes = await streamToBuffer(stream);\n\t\tconst data = await serializer.dataToNotebook(bytes);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\tthis._notebookLogService.info('WorkingCopyModel', 'Notebook content updated from file system - ' + this._notebookModel.uri.toString());\n\t\tthis._notebookModel.reset(data.cells, data.metadata, serializer.options);\n\t}\n\n\tasync getNotebookSerializer(): Promise<INotebookSerializer> {\n\t\tconst info = await this._notebookService.withNotebookDataProvider(this.notebookModel.viewType);\n\t\tif (!(info instanceof SimpleNotebookProviderInfo)) {\n\t\t\tthrow new Error('CANNOT open file notebook with this provider');\n\t\t}\n\n\t\treturn info.serializer;\n\t}\n\n\tget versionId() {\n\t\treturn this._notebookModel.alternativeVersionId;\n\t}\n\n\tpushStackElement(): void {\n\t\tthis._notebookModel.pushStackElement();\n\t}\n}\n\nexport class NotebookFileWorkingCopyModelFactory implements IStoredFileWorkingCopyModelFactory<NotebookFileWorkingCopyModel>, IUntitledFileWorkingCopyModelFactory<NotebookFileWorkingCopyModel> {\n\n\tconstructor(\n\t\tprivate readonly _viewType: string,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INotebookLoggingService private readonly _notebookLogService: INotebookLoggingService\n\t) { }\n\n\tasync createModel(resource: URI, stream: VSBufferReadableStream, token: CancellationToken): Promise<NotebookFileWorkingCopyModel> {\n\n\t\tconst notebookModel = this._notebookService.getNotebookTextModel(resource) ??\n\t\t\tawait this._notebookService.createNotebookTextModel(this._viewType, resource, stream);\n\n\t\treturn new NotebookFileWorkingCopyModel(notebookModel, this._notebookService, this._configurationService, this._telemetryService, this._notebookLogService);\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
