{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookExecutionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { NotebookCellTextModel } from \"./model/notebookCellTextModel.js\";\nimport type {\n\tINotebookTextModel,\n\tIOutputDto,\n\tIOutputItemDto,\n} from \"./notebookCommon.js\";\nimport type { INotebookCellExecution } from \"./notebookExecutionStateService.js\";\n\nexport enum CellExecutionUpdateType {\n\tOutput = 1,\n\tOutputItems = 2,\n\tExecutionState = 3,\n}\n\nexport interface ICellExecuteOutputEdit {\n\teditType: CellExecutionUpdateType.Output;\n\tcellHandle: number;\n\tappend?: boolean;\n\toutputs: IOutputDto[];\n}\n\nexport interface ICellExecuteOutputItemEdit {\n\teditType: CellExecutionUpdateType.OutputItems;\n\tappend?: boolean;\n\toutputId: string;\n\titems: IOutputItemDto[];\n}\n\nexport const INotebookExecutionService =\n\tcreateDecorator<INotebookExecutionService>(\"INotebookExecutionService\");\n\nexport interface INotebookExecutionService {\n\t_serviceBrand: undefined;\n\n\texecuteNotebookCells(\n\t\tnotebook: INotebookTextModel,\n\t\tcells: Iterable<NotebookCellTextModel>,\n\t\tcontextKeyService: IContextKeyService,\n\t): Promise<void>;\n\tcancelNotebookCells(\n\t\tnotebook: INotebookTextModel,\n\t\tcells: Iterable<NotebookCellTextModel>,\n\t): Promise<void>;\n\tcancelNotebookCellHandles(\n\t\tnotebook: INotebookTextModel,\n\t\tcells: Iterable<number>,\n\t): Promise<void>;\n\tregisterExecutionParticipant(\n\t\tparticipant: ICellExecutionParticipant,\n\t): IDisposable;\n}\n\nexport interface ICellExecutionParticipant {\n\tonWillExecuteCell(executions: INotebookCellExecution[]): Promise<void>;\n}\n"],
  "mappings": "AAOA,SAAS,uBAAuB;AASzB,IAAK,0BAAL,kBAAKA,6BAAL;AACN,EAAAA,kDAAA,YAAS,KAAT;AACA,EAAAA,kDAAA,iBAAc,KAAd;AACA,EAAAA,kDAAA,oBAAiB,KAAjB;AAHW,SAAAA;AAAA,GAAA;AAoBL,MAAM,4BACZ,gBAA2C,2BAA2B;",
  "names": ["CellExecutionUpdateType"]
}
