{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookExecutionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { NotebookCellTextModel } from './model/notebookCellTextModel.js';\nimport { INotebookTextModel, IOutputDto, IOutputItemDto } from './notebookCommon.js';\nimport { INotebookCellExecution } from './notebookExecutionStateService.js';\n\nexport enum CellExecutionUpdateType {\n\tOutput = 1,\n\tOutputItems = 2,\n\tExecutionState = 3,\n}\n\nexport interface ICellExecuteOutputEdit {\n\teditType: CellExecutionUpdateType.Output;\n\tcellHandle: number;\n\tappend?: boolean;\n\toutputs: IOutputDto[];\n}\n\nexport interface ICellExecuteOutputItemEdit {\n\teditType: CellExecutionUpdateType.OutputItems;\n\tappend?: boolean;\n\toutputId: string;\n\titems: IOutputItemDto[];\n}\n\nexport const INotebookExecutionService = createDecorator<INotebookExecutionService>('INotebookExecutionService');\n\nexport interface INotebookExecutionService {\n\t_serviceBrand: undefined;\n\n\texecuteNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>, contextKeyService: IContextKeyService): Promise<void>;\n\tcancelNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>): Promise<void>;\n\tcancelNotebookCellHandles(notebook: INotebookTextModel, cells: Iterable<number>): Promise<void>;\n\tregisterExecutionParticipant(participant: ICellExecutionParticipant): IDisposable;\n}\n\nexport interface ICellExecutionParticipant {\n\tonWillExecuteCell(executions: INotebookCellExecution[]): Promise<void>;\n}\n"],
  "mappings": "AAKA,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,oBAAoB,YAAY,sBAAsB;AAC/D,SAAS,8BAA8B;AAEhC,IAAK,0BAAL,kBAAKA,6BAAL;AACN,EAAAA,kDAAA,YAAS,KAAT;AACA,EAAAA,kDAAA,iBAAc,KAAd;AACA,EAAAA,kDAAA,oBAAiB,KAAjB;AAHW,SAAAA;AAAA,GAAA;AAoBL,MAAM,4BAA4B,gBAA2C,2BAA2B;",
  "names": ["CellExecutionUpdateType"]
}
