{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/common/notebookEditorModelResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event, IWaitUntil } from \"../../../../base/common/event.js\";\nimport type { IReference } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { NotebookTextModel } from \"./model/notebookTextModel.js\";\nimport type {\n\tIResolvedNotebookEditorModel,\n\tNotebookEditorModelCreationOptions,\n} from \"./notebookCommon.js\";\n\nexport const INotebookEditorModelResolverService =\n\tcreateDecorator<INotebookEditorModelResolverService>(\n\t\t\"INotebookModelResolverService\",\n\t);\n\n/**\n * A notebook file can only be opened ONCE per notebook type.\n * This event fires when a file is already open as type A\n * and there is request to open it as type B. Listeners must\n * do cleanup (close editor, release references) or the request fails\n */\nexport interface INotebookConflictEvent extends IWaitUntil {\n\tresource: URI;\n\tviewType: string;\n}\n\nexport interface IUntitledNotebookResource {\n\t/**\n\t * Depending on the value of `untitledResource` will\n\t * resolve a untitled notebook that:\n\t * - gets a unique name if `undefined` (e.g. `Untitled-1')\n\t * - uses the resource directly if the scheme is `untitled:`\n\t * - converts any other resource scheme to `untitled:` and will\n\t *   assume an associated file path\n\t *\n\t * Untitled notebook editors with associated path behave slightly\n\t * different from other untitled editors:\n\t * - they are dirty right when opening\n\t * - they will not ask for a file path when saving but use the associated path\n\t */\n\tuntitledResource: URI | undefined;\n}\n\nexport interface INotebookEditorModelResolverService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidSaveNotebook: Event<URI>;\n\treadonly onDidChangeDirty: Event<IResolvedNotebookEditorModel>;\n\n\treadonly onWillFailWithConflict: Event<INotebookConflictEvent>;\n\n\tisDirty(resource: URI): boolean;\n\n\tcreateUntitledNotebookTextModel(\n\t\tviewType: string,\n\t): Promise<NotebookTextModel>;\n\n\tresolve(\n\t\tresource: URI,\n\t\tviewType?: string,\n\t\tcreationOptions?: NotebookEditorModelCreationOptions,\n\t): Promise<IReference<IResolvedNotebookEditorModel>>;\n\tresolve(\n\t\tresource: IUntitledNotebookResource,\n\t\tviewType: string,\n\t\tcreationOtions?: NotebookEditorModelCreationOptions,\n\t): Promise<IReference<IResolvedNotebookEditorModel>>;\n}\n"],
  "mappings": "AAQA,SAAS,uBAAuB;AAOzB,MAAM,sCACZ;AAAA,EACC;AACD;",
  "names": []
}
