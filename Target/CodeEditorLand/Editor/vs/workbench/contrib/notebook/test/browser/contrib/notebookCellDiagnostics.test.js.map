{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/contrib/notebookCellDiagnostics.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Emitter, Event } from '../../../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../../../base/common/map.js';\nimport { waitForState } from '../../../../../../base/common/observable.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { mock } from '../../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IMarkerData, IMarkerService } from '../../../../../../platform/markers/common/markers.js';\nimport { ChatAgentLocation, IChatAgent, IChatAgentData, IChatAgentService } from '../../../../chat/common/chatAgents.js';\nimport { CellDiagnostics } from '../../../browser/contrib/cellDiagnostics/cellDiagnosticEditorContrib.js';\nimport { CodeCellViewModel } from '../../../browser/viewModel/codeCellViewModel.js';\nimport { CellKind, NotebookSetting } from '../../../common/notebookCommon.js';\nimport { ICellExecutionStateChangedEvent, IExecutionStateChangedEvent, INotebookCellExecution, INotebookExecutionStateService, NotebookExecutionType } from '../../../common/notebookExecutionStateService.js';\nimport { setupInstantiationService, TestNotebookExecutionStateService, withTestNotebook } from '../testNotebookEditor.js';\nimport { nullExtensionDescription } from '../../../../../services/extensions/common/extensions.js';\n\n\nsuite('notebookCellDiagnostics', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet disposables: DisposableStore;\n\tlet testExecutionService: TestExecutionService;\n\tlet markerService: ITestMarkerService;\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass TestExecutionService extends TestNotebookExecutionStateService {\n\t\tprivate _onDidChangeExecution = new Emitter<ICellExecutionStateChangedEvent | IExecutionStateChangedEvent>();\n\t\toverride onDidChangeExecution = this._onDidChangeExecution.event;\n\n\t\tfireExecutionChanged(notebook: URI, cellHandle: number, changed?: INotebookCellExecution) {\n\t\t\tthis._onDidChangeExecution.fire({\n\t\t\t\ttype: NotebookExecutionType.cell,\n\t\t\t\tcellHandle,\n\t\t\t\tnotebook,\n\t\t\t\taffectsNotebook: () => true,\n\t\t\t\taffectsCell: () => true,\n\t\t\t\tchanged: changed\n\t\t\t});\n\t\t}\n\t}\n\n\tinterface ITestMarkerService extends IMarkerService {\n\t\tmarkers: ResourceMap<IMarkerData[]>;\n\t}\n\n\tsetup(function () {\n\n\t\tdisposables = new DisposableStore();\n\n\t\tinstantiationService = setupInstantiationService(disposables);\n\t\ttestExecutionService = new TestExecutionService();\n\t\tinstantiationService.stub(INotebookExecutionStateService, testExecutionService);\n\n\t\tconst agentData = {\n\t\t\textensionId: nullExtensionDescription.identifier,\n\t\t\textensionDisplayName: '',\n\t\t\textensionPublisherId: '',\n\t\t\tname: 'testEditorAgent',\n\t\t\tisDefault: true,\n\t\t\tlocations: [ChatAgentLocation.Editor],\n\t\t\tmetadata: {},\n\t\t\tslashCommands: [],\n\t\t\tdisambiguation: [],\n\t\t};\n\t\tconst chatAgentService = new class extends mock<IChatAgentService>() {\n\t\t\toverride getAgents(): IChatAgentData[] {\n\t\t\t\treturn [{\n\t\t\t\t\tid: 'testEditorAgent',\n\t\t\t\t\t...agentData\n\t\t\t\t}];\n\t\t\t}\n\t\t\toverride onDidChangeAgents: Event<IChatAgent | undefined> = Event.None;\n\t\t};\n\t\tinstantiationService.stub(IChatAgentService, chatAgentService);\n\n\t\tmarkerService = new class extends mock<ITestMarkerService>() {\n\t\t\toverride markers: ResourceMap<IMarkerData[]> = new ResourceMap();\n\t\t\toverride changeOne(owner: string, resource: URI, markers: IMarkerData[]) {\n\t\t\t\tthis.markers.set(resource, markers);\n\t\t\t}\n\t\t};\n\t\tinstantiationService.stub(IMarkerService, markerService);\n\n\t\tconst config = instantiationService.get<IConfigurationService>(IConfigurationService) as TestConfigurationService;\n\t\tconfig.setUserConfiguration(NotebookSetting.cellFailureDiagnostics, true);\n\t});\n\n\ttest('diagnostic is added for cell execution failure', async function () {\n\t\tawait withTestNotebook([\n\t\t\t['print(x)', 'python', CellKind.Code, [], {}]\n\t\t], async (editor, viewModel, store, accessor) => {\n\t\t\tconst cell = viewModel.viewCells[0] as CodeCellViewModel;\n\n\t\t\tdisposables.add(instantiationService.createInstance(CellDiagnostics, editor));\n\n\t\t\tcell.model.internalMetadata.error = {\n\t\t\t\tmessage: 'error',\n\t\t\t\tstack: 'line 1 : print(x)',\n\t\t\t\turi: cell.uri,\n\t\t\t\tlocation: { startColumn: 1, endColumn: 5, startLineNumber: 1, endLineNumber: 1 }\n\t\t\t};\n\t\t\ttestExecutionService.fireExecutionChanged(editor.textModel.uri, cell.handle);\n\n\t\t\tawait waitForState(cell.excecutionError, error => !!error);\n\t\t\tassert.strictEqual(cell?.excecutionError.get()?.message, 'error');\n\t\t\tassert.equal(markerService.markers.get(cell.uri)?.length, 1);\n\t\t}, instantiationService);\n\t});\n\n\ttest('diagnostics are cleared only for cell with new execution', async function () {\n\t\tawait withTestNotebook([\n\t\t\t['print(x)', 'python', CellKind.Code, [], {}],\n\t\t\t['print(y)', 'python', CellKind.Code, [], {}]\n\t\t], async (editor, viewModel, store, accessor) => {\n\t\t\tconst cell = viewModel.viewCells[0] as CodeCellViewModel;\n\t\t\tconst cell2 = viewModel.viewCells[1] as CodeCellViewModel;\n\n\t\t\tdisposables.add(instantiationService.createInstance(CellDiagnostics, editor));\n\n\t\t\tcell.model.internalMetadata.error = {\n\t\t\t\tmessage: 'error',\n\t\t\t\tstack: 'line 1 : print(x)',\n\t\t\t\turi: cell.uri,\n\t\t\t\tlocation: { startColumn: 1, endColumn: 5, startLineNumber: 1, endLineNumber: 1 }\n\t\t\t};\n\t\t\tcell2.model.internalMetadata.error = {\n\t\t\t\tmessage: 'another error',\n\t\t\t\tstack: 'line 1 : print(y)',\n\t\t\t\turi: cell.uri,\n\t\t\t\tlocation: { startColumn: 1, endColumn: 5, startLineNumber: 1, endLineNumber: 1 }\n\t\t\t};\n\t\t\ttestExecutionService.fireExecutionChanged(editor.textModel.uri, cell.handle);\n\t\t\ttestExecutionService.fireExecutionChanged(editor.textModel.uri, cell2.handle);\n\n\t\t\tawait waitForState(cell.excecutionError, error => !!error);\n\t\t\tawait waitForState(cell2.excecutionError, error => !!error);\n\t\t\tcell.model.internalMetadata.error = undefined;\n\n\t\t\t// on NotebookCellExecution value will make it look like its currently running\n\t\t\ttestExecutionService.fireExecutionChanged(editor.textModel.uri, cell.handle, {} as INotebookCellExecution);\n\n\t\t\tawait waitForState(cell.excecutionError, error => error === undefined);\n\n\t\t\tassert.strictEqual(cell?.excecutionError.get(), undefined);\n\t\t\tassert.strictEqual(cell2?.excecutionError.get()?.message, 'another error', 'cell that was not executed should still have an error');\n\t\t\tassert.equal(markerService.markers.get(cell.uri)?.length, 0);\n\t\t\tassert.equal(markerService.markers.get(cell2.uri)?.length, 1);\n\t\t}, instantiationService);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
