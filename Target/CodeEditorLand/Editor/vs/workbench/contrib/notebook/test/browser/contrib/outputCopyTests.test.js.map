{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/contrib/outputCopyTests.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICellOutputViewModel, ICellViewModel } from '../../../browser/notebookBrowser.js';\nimport { mock } from '../../../../../../base/test/common/mock.js';\nimport { IClipboardService } from '../../../../../../platform/clipboard/common/clipboardService.js';\nimport { ILogService } from '../../../../../../platform/log/common/log.js';\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../../../base/common/buffer.js';\nimport { IOutputItemDto } from '../../../common/notebookCommon.js';\nimport { copyCellOutput } from '../../../browser/contrib/clipboard/cellOutputClipboard.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\n\nsuite('Cell Output Clipboard Tests', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass ClipboardService {\n\t\tprivate _clipboardContent = '';\n\t\tpublic get clipboardContent() {\n\t\t\treturn this._clipboardContent;\n\t\t}\n\t\tpublic async writeText(value: string) {\n\t\t\tthis._clipboardContent = value;\n\t\t}\n\t}\n\n\tconst logService = new class extends mock<ILogService>() { };\n\n\tfunction createOutputViewModel(outputs: IOutputItemDto[], cellViewModel?: ICellViewModel) {\n\t\tconst outputViewModel = { model: { outputs: outputs } } as ICellOutputViewModel;\n\n\t\tif (cellViewModel) {\n\t\t\tcellViewModel.outputsViewModels.push(outputViewModel);\n\t\t\tcellViewModel.model.outputs.push(outputViewModel.model);\n\t\t} else {\n\t\t\tcellViewModel = {\n\t\t\t\toutputsViewModels: [outputViewModel],\n\t\t\t\tmodel: { outputs: [outputViewModel.model] }\n\t\t\t} as ICellViewModel;\n\t\t}\n\n\t\toutputViewModel.cellViewModel = cellViewModel;\n\n\t\treturn outputViewModel;\n\t}\n\n\ttest('Copy text/plain output', async () => {\n\t\tconst mimeType = 'text/plain';\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDto = { data: VSBuffer.fromString('output content'), mime: 'text/plain' };\n\t\tconst output = createOutputViewModel([outputDto]);\n\n\t\tawait copyCellOutput(mimeType, output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'output content');\n\t});\n\n\ttest('Nothing copied for invalid mimetype', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDtos = [\n\t\t\t{ data: VSBuffer.fromString('output content'), mime: 'bad' },\n\t\t\t{ data: VSBuffer.fromString('output 2'), mime: 'unknown' }];\n\t\tconst output = createOutputViewModel(outputDtos);\n\n\t\tawait copyCellOutput('bad', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, '');\n\t});\n\n\ttest('Text copied if available instead of invalid mime type', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDtos = [\n\t\t\t{ data: VSBuffer.fromString('output content'), mime: 'bad' },\n\t\t\t{ data: VSBuffer.fromString('text content'), mime: 'text/plain' }];\n\t\tconst output = createOutputViewModel(outputDtos);\n\n\t\tawait copyCellOutput('bad', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'text content');\n\t});\n\n\ttest('Selected mimetype is preferred', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDtos = [\n\t\t\t{ data: VSBuffer.fromString('plain text'), mime: 'text/plain' },\n\t\t\t{ data: VSBuffer.fromString('html content'), mime: 'text/html' }];\n\t\tconst output = createOutputViewModel(outputDtos);\n\n\t\tawait copyCellOutput('text/html', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'html content');\n\t});\n\n\ttest('copy subsequent output', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst output = createOutputViewModel([{ data: VSBuffer.fromString('first'), mime: 'text/plain' }]);\n\t\tconst output2 = createOutputViewModel([{ data: VSBuffer.fromString('second'), mime: 'text/plain' }], output.cellViewModel as ICellViewModel);\n\t\tconst output3 = createOutputViewModel([{ data: VSBuffer.fromString('third'), mime: 'text/plain' }], output.cellViewModel as ICellViewModel);\n\n\t\tawait copyCellOutput('text/plain', output2, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'second');\n\n\t\tawait copyCellOutput('text/plain', output3, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'third');\n\t});\n\n\ttest('adjacent stream outputs are concanented', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst output = createOutputViewModel([{ data: VSBuffer.fromString('stdout'), mime: 'application/vnd.code.notebook.stdout' }]);\n\t\tcreateOutputViewModel([{ data: VSBuffer.fromString('stderr'), mime: 'application/vnd.code.notebook.stderr' }], output.cellViewModel as ICellViewModel);\n\t\tcreateOutputViewModel([{ data: VSBuffer.fromString('text content'), mime: 'text/plain' }], output.cellViewModel as ICellViewModel);\n\t\tcreateOutputViewModel([{ data: VSBuffer.fromString('non-adjacent'), mime: 'application/vnd.code.notebook.stdout' }], output.cellViewModel as ICellViewModel);\n\n\t\tawait copyCellOutput('application/vnd.code.notebook.stdout', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'stdoutstderr');\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
