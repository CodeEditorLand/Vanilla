import e from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as o}from"../../../../../../base/test/common/utils.js";import{CellEditType as d,CellKind as a,SelectionStateType as c}from"../../../common/notebookCommon.js";import{createNotebookCellList as p,withTestNotebook as r}from"../testNotebookEditor.js";suite("Notebook Undo/Redo",()=>{const l=o();test("Basics",async function(){await r([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}]],async(n,t,i,s)=>{e.strictEqual(t.length,2),e.strictEqual(t.getVersionId(),0),e.strictEqual(t.getAlternativeId(),"0_0,1;1,1"),n.textModel.applyEdits([{editType:d.Replace,index:0,count:2,cells:[]}],!0,void 0,()=>{},void 0,!0),e.strictEqual(t.length,0),e.strictEqual(t.getVersionId(),1),e.strictEqual(t.getAlternativeId(),"1_"),await t.undo(),e.strictEqual(t.length,2),e.strictEqual(t.getVersionId(),2),e.strictEqual(t.getAlternativeId(),"0_0,1;1,1"),await t.redo(),e.strictEqual(t.length,0),e.strictEqual(t.getVersionId(),3),e.strictEqual(t.getAlternativeId(),"1_"),n.textModel.applyEdits([{editType:d.Replace,index:0,count:0,cells:[{source:"# header 3",language:"markdown",cellKind:a.Markup,outputs:[],mime:void 0}]}],!0,void 0,()=>{},void 0,!0),e.strictEqual(t.getVersionId(),4),e.strictEqual(t.getAlternativeId(),"4_2,1"),await t.undo(),e.strictEqual(t.getVersionId(),5),e.strictEqual(t.getAlternativeId(),"1_")})}),test("Invalid replace count should not throw",async function(){await r([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}]],async(n,t,i,s)=>{n.textModel.applyEdits([{editType:d.Replace,index:0,count:2,cells:[]}],!0,void 0,()=>{},void 0,!0),e.doesNotThrow(()=>{n.textModel.applyEdits([{editType:d.Replace,index:0,count:2,cells:[{source:"# header 2",language:"markdown",cellKind:a.Markup,outputs:[],mime:void 0}]}],!0,void 0,()=>{},void 0,!0)})})}),test("Replace beyond length",async function(){await r([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}]],async(n,t)=>{n.textModel.applyEdits([{editType:d.Replace,index:1,count:2,cells:[]}],!0,void 0,()=>{},void 0,!0),e.deepStrictEqual(t.length,1),await t.undo(),e.deepStrictEqual(t.length,2)})}),test("Invalid replace count should not affect undo/redo",async function(){await r([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}]],async(n,t,i,s)=>{n.textModel.applyEdits([{editType:d.Replace,index:0,count:2,cells:[]}],!0,void 0,()=>{},void 0,!0),n.textModel.applyEdits([{editType:d.Replace,index:0,count:2,cells:[{source:"# header 2",language:"markdown",cellKind:a.Markup,outputs:[],mime:void 0}]}],!0,void 0,()=>{},void 0,!0),e.deepStrictEqual(t.length,1),await t.undo(),await t.undo(),e.deepStrictEqual(t.length,2),n.textModel.applyEdits([{editType:d.Replace,index:1,count:2,cells:[]}],!0,void 0,()=>{},void 0,!0),e.deepStrictEqual(t.length,1)})}),test("Focus/selection update",async function(){await r([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}]],async(n,t,i,s)=>{const u=p(s,l);u.attachViewModel(t),u.setFocus([1]),n.textModel.applyEdits([{editType:d.Replace,index:2,count:0,cells:[{source:"# header 2",language:"markdown",cellKind:a.Markup,outputs:[],mime:void 0}]}],!0,{focus:{start:1,end:2},selections:[{start:1,end:2}],kind:c.Index},()=>({focus:{start:2,end:3},selections:[{start:2,end:3}],kind:c.Index}),void 0,!0),e.strictEqual(t.length,3),e.strictEqual(t.getVersionId(),1),e.deepStrictEqual(u.getFocus(),[2]),e.deepStrictEqual(u.getSelection(),[2]),await t.undo(),e.strictEqual(t.length,2),e.strictEqual(t.getVersionId(),2),e.deepStrictEqual(u.getFocus(),[1]),e.deepStrictEqual(u.getSelection(),[1]),await t.redo(),e.strictEqual(t.length,3),e.strictEqual(t.getVersionId(),3),e.deepStrictEqual(u.getFocus(),[2]),e.deepStrictEqual(u.getSelection(),[2])})}),test("Batch edits",async function(){await r([["# header 1","markdown",a.Markup,[],{}],["body","markdown",a.Markup,[],{}]],async(n,t,i,s)=>{n.textModel.applyEdits([{editType:d.Replace,index:2,count:0,cells:[{source:"# header 2",language:"markdown",cellKind:a.Markup,outputs:[],mime:void 0}]},{editType:d.Metadata,index:0,metadata:{inputCollapsed:!1}}],!0,void 0,()=>{},void 0,!0),e.strictEqual(t.getVersionId(),1),e.deepStrictEqual(t.cellAt(0)?.metadata,{inputCollapsed:!1}),await t.undo(),e.strictEqual(t.length,2),e.strictEqual(t.getVersionId(),2),e.deepStrictEqual(t.cellAt(0)?.metadata,{}),await t.redo(),e.strictEqual(t.length,3),e.strictEqual(t.getVersionId(),3),e.deepStrictEqual(t.cellAt(0)?.metadata,{inputCollapsed:!1})})})});
