import{NullExtensionService as d}from"../../../../services/extensions/common/extensions.js";import{stub as n}from"sinon";import{NotebookRendererMessagingService as p}from"../../browser/services/notebookRendererMessagingServiceImpl.js";import s from"assert";import{timeout as m}from"../../../../../base/common/async.js";import{ensureNoDisposablesAreLeakedInTestSuite as c}from"../../../../../base/test/common/utils.js";suite("NotebookRendererMessaging",()=>{let r,o,t=[];const i=c();setup(()=>{t=[],r=new d,o=i.add(new p(r)),i.add(o.onShouldPostMessage(e=>t.push(e)))}),test("activates on prepare",()=>{const e=n(r,"activateByEvent").returns(Promise.resolve());o.prepare("foo"),o.prepare("foo"),o.prepare("foo"),s.deepStrictEqual(e.args,[["onRenderer:foo"]])}),test("buffers and then plays events",async()=>{n(r,"activateByEvent").returns(Promise.resolve());const e=o.getScoped("some-editor");e.postMessage("foo",1),e.postMessage("foo",2),s.deepStrictEqual(t,[]),await m(0);const a=[{editorId:"some-editor",rendererId:"foo",message:1},{editorId:"some-editor",rendererId:"foo",message:2}];s.deepStrictEqual(t,a),e.postMessage("foo",3),s.deepStrictEqual(t,[...a,{editorId:"some-editor",rendererId:"foo",message:3}])})});
