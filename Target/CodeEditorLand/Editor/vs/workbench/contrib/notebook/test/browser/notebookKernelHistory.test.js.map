{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookKernelHistory.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ExtensionIdentifier } from '../../../../../platform/extensions/common/extensions.js';\nimport { setupInstantiationService } from './testNotebookEditor.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { INotebookKernel, INotebookKernelService, VariablesResult } from '../../common/notebookKernelService.js';\nimport { NotebookKernelService } from '../../browser/services/notebookKernelServiceImpl.js';\nimport { INotebookService } from '../../common/notebookService.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { IMenu, IMenuService } from '../../../../../platform/actions/common/actions.js';\nimport { NotebookKernelHistoryService } from '../../browser/services/notebookKernelHistoryServiceImpl.js';\nimport { IApplicationStorageValueChangeEvent, IProfileStorageValueChangeEvent, IStorageService, IStorageValueChangeEvent, IWillSaveStateEvent, IWorkspaceStorageValueChangeEvent, StorageScope } from '../../../../../platform/storage/common/storage.js';\nimport { INotebookLoggingService } from '../../common/notebookLoggingService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { AsyncIterableObject } from '../../../../../base/common/async.js';\n\nsuite('NotebookKernelHistoryService', () => {\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet kernelService: INotebookKernelService;\n\n\tlet onDidAddNotebookDocument: Emitter<NotebookTextModel>;\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(function () {\n\t\tdisposables = new DisposableStore();\n\t\tonDidAddNotebookDocument = new Emitter();\n\t\tdisposables.add(onDidAddNotebookDocument);\n\n\t\tinstantiationService = setupInstantiationService(disposables);\n\t\tinstantiationService.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\toverride onDidAddNotebookDocument = onDidAddNotebookDocument.event;\n\t\t\toverride onWillRemoveNotebookDocument = Event.None;\n\t\t\toverride getNotebookTextModels() { return []; }\n\t\t});\n\t\tinstantiationService.stub(IMenuService, new class extends mock<IMenuService>() {\n\t\t\toverride createMenu() {\n\t\t\t\treturn new class extends mock<IMenu>() {\n\t\t\t\t\toverride onDidChange = Event.None;\n\t\t\t\t\toverride getActions() { return []; }\n\t\t\t\t\toverride dispose() { }\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tkernelService = disposables.add(instantiationService.createInstance(NotebookKernelService));\n\t\tinstantiationService.set(INotebookKernelService, kernelService);\n\t});\n\n\ttest('notebook kernel empty history', function () {\n\n\t\tconst u1 = URI.parse('foo:///one');\n\n\t\tconst k1 = new TestNotebookKernel({ label: 'z', notebookType: 'foo' });\n\t\tconst k2 = new TestNotebookKernel({ label: 'a', notebookType: 'foo' });\n\n\t\tdisposables.add(kernelService.registerKernel(k1));\n\t\tdisposables.add(kernelService.registerKernel(k2));\n\n\t\tinstantiationService.stub(IStorageService, new class extends mock<IStorageService>() {\n\t\t\toverride onWillSaveState: Event<IWillSaveStateEvent> = Event.None;\n\t\t\toverride onDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent> {\n\t\t\t\treturn Event.None;\n\t\t\t}\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue: string): string;\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue?: string | undefined): string | undefined;\n\t\t\toverride get(key: unknown, scope: unknown, fallbackValue?: unknown): string | undefined {\n\t\t\t\tif (key === 'notebook.kernelHistory') {\n\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\t'foo': {\n\t\t\t\t\t\t\t'entries': []\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tinstantiationService.stub(INotebookLoggingService, new class extends mock<INotebookLoggingService>() {\n\t\t\toverride info() { }\n\t\t\toverride debug() { }\n\t\t});\n\n\t\tconst kernelHistoryService = disposables.add(instantiationService.createInstance(NotebookKernelHistoryService));\n\n\t\tlet info = kernelHistoryService.getKernels({ uri: u1, notebookType: 'foo' });\n\t\tassert.equal(info.all.length, 0);\n\t\tassert.ok(!info.selected);\n\n\t\t// update priorities for u1 notebook\n\t\tkernelService.updateKernelNotebookAffinity(k2, u1, 2);\n\n\t\tinfo = kernelHistoryService.getKernels({ uri: u1, notebookType: 'foo' });\n\t\tassert.equal(info.all.length, 0);\n\t\t// MRU only auto selects kernel if there is only one\n\t\tassert.deepStrictEqual(info.selected, undefined);\n\t});\n\n\ttest('notebook kernel history restore', function () {\n\n\t\tconst u1 = URI.parse('foo:///one');\n\n\t\tconst k1 = new TestNotebookKernel({ label: 'z', notebookType: 'foo' });\n\t\tconst k2 = new TestNotebookKernel({ label: 'a', notebookType: 'foo' });\n\t\tconst k3 = new TestNotebookKernel({ label: 'b', notebookType: 'foo' });\n\n\t\tdisposables.add(kernelService.registerKernel(k1));\n\t\tdisposables.add(kernelService.registerKernel(k2));\n\t\tdisposables.add(kernelService.registerKernel(k3));\n\n\t\tinstantiationService.stub(IStorageService, new class extends mock<IStorageService>() {\n\t\t\toverride onWillSaveState: Event<IWillSaveStateEvent> = Event.None;\n\t\t\toverride onDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent> {\n\t\t\t\treturn Event.None;\n\t\t\t}\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue: string): string;\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue?: string | undefined): string | undefined;\n\t\t\toverride get(key: unknown, scope: unknown, fallbackValue?: unknown): string | undefined {\n\t\t\t\tif (key === 'notebook.kernelHistory') {\n\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\t'foo': {\n\t\t\t\t\t\t\t'entries': [\n\t\t\t\t\t\t\t\tk2.id\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tinstantiationService.stub(INotebookLoggingService, new class extends mock<INotebookLoggingService>() {\n\t\t\toverride info() { }\n\t\t\toverride debug() { }\n\t\t});\n\n\t\tconst kernelHistoryService = disposables.add(instantiationService.createInstance(NotebookKernelHistoryService));\n\t\tlet info = kernelHistoryService.getKernels({ uri: u1, notebookType: 'foo' });\n\t\tassert.equal(info.all.length, 1);\n\t\tassert.deepStrictEqual(info.selected, undefined);\n\n\t\tkernelHistoryService.addMostRecentKernel(k3);\n\t\tinfo = kernelHistoryService.getKernels({ uri: u1, notebookType: 'foo' });\n\t\tassert.deepStrictEqual(info.all, [k3, k2]);\n\t});\n});\n\nclass TestNotebookKernel implements INotebookKernel {\n\tid: string = Math.random() + 'kernel';\n\tlabel: string = 'test-label';\n\tviewType = '*';\n\tonDidChange = Event.None;\n\textension: ExtensionIdentifier = new ExtensionIdentifier('test');\n\tlocalResourceRoot: URI = URI.file('/test');\n\tdescription?: string | undefined;\n\tdetail?: string | undefined;\n\tpreloadUris: URI[] = [];\n\tpreloadProvides: string[] = [];\n\tsupportedLanguages: string[] = [];\n\texecuteNotebookCellsRequest(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcancelNotebookCellExecution(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprovideVariables(notebookUri: URI, parentId: number | undefined, kind: 'named' | 'indexed', start: number, token: CancellationToken): AsyncIterableObject<VariablesResult> {\n\t\treturn AsyncIterableObject.EMPTY;\n\t}\n\n\tconstructor(opts?: { languages?: string[]; label?: string; notebookType?: string }) {\n\t\tthis.supportedLanguages = opts?.languages ?? [PLAINTEXT_LANGUAGE_ID];\n\t\tthis.label = opts?.label ?? this.label;\n\t\tthis.viewType = opts?.notebookType ?? this.viewType;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
