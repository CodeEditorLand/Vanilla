{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/contrib/notebookOutlineViewProviders.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IDataSource } from '../../../../../../base/browser/ui/tree/tree.js';\nimport { CancellationToken } from '../../../../../../base/common/cancellation.js';\nimport { IReference } from '../../../../../../base/common/lifecycle.js';\nimport { mock } from '../../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { ITextModel } from '../../../../../../editor/common/model.js';\nimport { IOutlineModelService, OutlineModel } from '../../../../../../editor/contrib/documentSymbols/browser/outlineModel.js';\nimport { TestConfigurationService } from '../../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestThemeService } from '../../../../../../platform/theme/test/common/testThemeService.js';\nimport { NotebookBreadcrumbsProvider, NotebookCellOutline, NotebookOutlinePaneProvider, NotebookQuickPickProvider } from '../../../browser/contrib/outline/notebookOutline.js';\nimport { ICellViewModel } from '../../../browser/notebookBrowser.js';\nimport { INotebookCellOutlineDataSource } from '../../../browser/viewModel/notebookOutlineDataSource.js';\nimport { NotebookOutlineEntryFactory } from '../../../browser/viewModel/notebookOutlineEntryFactory.js';\nimport { OutlineEntry } from '../../../browser/viewModel/OutlineEntry.js';\nimport { INotebookExecutionStateService } from '../../../common/notebookExecutionStateService.js';\nimport { MockDocumentSymbol } from '../testNotebookEditor.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../../../editor/common/services/resolverService.js';\nimport { URI } from '../../../../../../base/common/uri.js';\n\nsuite('Notebook Outline View Providers', function () {\n\n\t// #region Setup\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst configurationService = new TestConfigurationService();\n\tconst themeService = new TestThemeService();\n\n\tconst symbolsPerTextModel: Record<string, MockDocumentSymbol[]> = {};\n\tfunction setSymbolsForTextModel(symbols: MockDocumentSymbol[], textmodelId = 'textId') {\n\t\tsymbolsPerTextModel[textmodelId] = symbols;\n\t}\n\n\tconst executionService = new class extends mock<INotebookExecutionStateService>() {\n\t\toverride getCellExecution() { return undefined; }\n\t};\n\n\tclass OutlineModelStub {\n\t\tconstructor(private textId: string) { }\n\n\t\tgetTopLevelSymbols() {\n\t\t\treturn symbolsPerTextModel[this.textId];\n\t\t}\n\t}\n\tconst outlineModelService = new class extends mock<IOutlineModelService>() {\n\t\toverride getOrCreate(model: ITextModel, arg1: any) {\n\t\t\tconst outline = new OutlineModelStub(model.id) as unknown as OutlineModel;\n\t\t\treturn Promise.resolve(outline);\n\t\t}\n\t\toverride getDebounceValue(arg0: any) {\n\t\t\treturn 0;\n\t\t}\n\t};\n\tconst textModelService = new class extends mock<ITextModelService>() {\n\t\toverride createModelReference(uri: URI) {\n\t\t\treturn Promise.resolve({\n\t\t\t\tobject: {\n\t\t\t\t\ttextEditorModel: {\n\t\t\t\t\t\tid: uri.toString(),\n\t\t\t\t\t\tgetVersionId() { return 1; }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdispose() { }\n\t\t\t} as IReference<IResolvedTextEditorModel>);\n\t\t}\n\t};\n\n\t// #endregion\n\t// #region Helpers\n\n\tfunction createCodeCellViewModel(version: number = 1, source = '# code', textmodelId = 'textId') {\n\t\treturn {\n\t\t\turi: { toString() { return textmodelId; } },\n\t\t\tid: textmodelId,\n\t\t\ttextBuffer: {\n\t\t\t\tgetLineCount() { return 0; }\n\t\t\t},\n\t\t\tgetText() {\n\t\t\t\treturn source;\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\ttextModel: {\n\t\t\t\t\tid: textmodelId,\n\t\t\t\t\tgetVersionId() { return version; }\n\t\t\t\t}\n\t\t\t},\n\t\t\tresolveTextModel() {\n\t\t\t\treturn this.model.textModel as unknown;\n\t\t\t},\n\t\t\tcellKind: 2\n\t\t} as ICellViewModel;\n\t}\n\n\tfunction createMockOutlineDataSource(entries: OutlineEntry[], activeElement: OutlineEntry | undefined = undefined) {\n\t\treturn new class extends mock<IReference<INotebookCellOutlineDataSource>>() {\n\t\t\toverride object: INotebookCellOutlineDataSource = {\n\t\t\t\tentries: entries,\n\t\t\t\tactiveElement: activeElement,\n\t\t\t};\n\t\t};\n\t}\n\n\tfunction createMarkupCellViewModel(version: number = 1, source = 'markup', textmodelId = 'textId', alternativeId = 1) {\n\t\treturn {\n\t\t\ttextBuffer: {\n\t\t\t\tgetLineCount() { return 0; }\n\t\t\t},\n\t\t\tgetText() {\n\t\t\t\treturn source;\n\t\t\t},\n\t\t\tgetAlternativeId() {\n\t\t\t\treturn alternativeId;\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\ttextModel: {\n\t\t\t\t\tid: textmodelId,\n\t\t\t\t\tgetVersionId() { return version; }\n\t\t\t\t}\n\t\t\t},\n\t\t\tresolveTextModel() {\n\t\t\t\treturn this.model.textModel as unknown;\n\t\t\t},\n\t\t\tcellKind: 1\n\t\t} as ICellViewModel;\n\t}\n\n\tfunction flatten(element: OutlineEntry, dataSource: IDataSource<NotebookCellOutline, OutlineEntry>): OutlineEntry[] {\n\t\tconst elements: OutlineEntry[] = [];\n\n\t\tconst children = dataSource.getChildren(element);\n\t\tfor (const child of children) {\n\t\t\telements.push(child);\n\t\t\telements.push(...flatten(child, dataSource));\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\tfunction buildOutlineTree(entries: OutlineEntry[]): OutlineEntry[] | undefined {\n\t\tif (entries.length > 0) {\n\t\t\tconst result: OutlineEntry[] = [entries[0]];\n\t\t\tconst parentStack: OutlineEntry[] = [entries[0]];\n\n\t\t\tfor (let i = 1; i < entries.length; i++) {\n\t\t\t\tconst entry = entries[i];\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst len = parentStack.length;\n\t\t\t\t\tif (len === 0) {\n\t\t\t\t\t\t// root node\n\t\t\t\t\t\tresult.push(entry);\n\t\t\t\t\t\tparentStack.push(entry);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst parentCandidate = parentStack[len - 1];\n\t\t\t\t\t\tif (parentCandidate.level < entry.level) {\n\t\t\t\t\t\t\tparentCandidate.addChild(entry);\n\t\t\t\t\t\t\tparentStack.push(entry);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparentStack.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Set the configuration settings relevant to various outline views (OutlinePane, QuickPick, Breadcrumbs)\n\t *\n\t * @param outlineShowMarkdownHeadersOnly: boolean \t(notebook.outline.showMarkdownHeadersOnly)\n\t * @param outlineShowCodeCells: boolean \t\t\t(notebook.outline.showCodeCells)\n\t * @param outlineShowCodeCellSymbols: boolean \t\t(notebook.outline.showCodeCellSymbols)\n\t * @param quickPickShowAllSymbols: boolean \t\t\t(notebook.gotoSymbols.showAllSymbols)\n\t * @param breadcrumbsShowCodeCells: boolean \t\t(notebook.breadcrumbs.showCodeCells)\n\t */\n\tasync function setOutlineViewConfiguration(config: {\n\t\toutlineShowMarkdownHeadersOnly: boolean;\n\t\toutlineShowCodeCells: boolean;\n\t\toutlineShowCodeCellSymbols: boolean;\n\t\tquickPickShowAllSymbols: boolean;\n\t\tbreadcrumbsShowCodeCells: boolean;\n\t}) {\n\t\tawait configurationService.setUserConfiguration('notebook.outline.showMarkdownHeadersOnly', config.outlineShowMarkdownHeadersOnly);\n\t\tawait configurationService.setUserConfiguration('notebook.outline.showCodeCells', config.outlineShowCodeCells);\n\t\tawait configurationService.setUserConfiguration('notebook.outline.showCodeCellSymbols', config.outlineShowCodeCellSymbols);\n\t\tawait configurationService.setUserConfiguration('notebook.gotoSymbols.showAllSymbols', config.quickPickShowAllSymbols);\n\t\tawait configurationService.setUserConfiguration('notebook.breadcrumbs.showCodeCells', config.breadcrumbsShowCodeCells);\n\t}\n\n\t// #endregion\n\t// #region OutlinePane\n\n\ttest('OutlinePane 0: Default Settings (Headers Only ON, Code cells OFF, Symbols ON)', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: true,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: true,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {} }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {} }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst outlinePaneProvider = store.add(new NotebookOutlinePaneProvider(undefined, configurationService));\n\t\tconst results = flatten(outlineModel, outlinePaneProvider);\n\n\t\t// Validate\n\t\tassert.equal(results.length, 1);\n\t\tassert.equal(results[0].label, 'h1');\n\t\tassert.equal(results[0].level, 1);\n\t});\n\n\ttest('OutlinePane 1: ALL Markdown', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: false,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {} }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {} }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst outlinePaneProvider = store.add(new NotebookOutlinePaneProvider(undefined, configurationService));\n\t\tconst results = flatten(outlineModel, outlinePaneProvider);\n\n\t\tassert.equal(results.length, 2);\n\n\t\tassert.equal(results[0].label, 'h1');\n\t\tassert.equal(results[0].level, 1);\n\n\t\tassert.equal(results[1].label, 'plaintext');\n\t\tassert.equal(results[1].level, 7);\n\t});\n\n\ttest('OutlinePane 2: Only Headers', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: true,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {} }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {} }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst outlinePaneProvider = store.add(new NotebookOutlinePaneProvider(undefined, configurationService));\n\t\tconst results = flatten(outlineModel, outlinePaneProvider);\n\n\t\tassert.equal(results.length, 1);\n\n\t\tassert.equal(results[0].label, 'h1');\n\t\tassert.equal(results[0].level, 1);\n\t});\n\n\ttest('OutlinePane 3: Only Headers + Code Cells', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: true,\n\t\t\toutlineShowCodeCells: true,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {} }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {} }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst outlinePaneProvider = store.add(new NotebookOutlinePaneProvider(undefined, configurationService));\n\t\tconst results = flatten(outlineModel, outlinePaneProvider);\n\n\t\tassert.equal(results.length, 3);\n\n\t\tassert.equal(results[0].label, 'h1');\n\t\tassert.equal(results[0].level, 1);\n\n\t\tassert.equal(results[1].label, '# code cell 2');\n\t\tassert.equal(results[1].level, 7);\n\n\t\tassert.equal(results[2].label, '# code cell 3');\n\t\tassert.equal(results[2].level, 7);\n\t});\n\n\ttest('OutlinePane 4: Only Headers + Code Cells + Symbols', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: true,\n\t\t\toutlineShowCodeCells: true,\n\t\t\toutlineShowCodeCellSymbols: true,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {} }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {} }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst outlinePaneProvider = store.add(new NotebookOutlinePaneProvider(undefined, configurationService));\n\t\tconst results = flatten(outlineModel, outlinePaneProvider);\n\n\t\t// validate\n\t\tassert.equal(results.length, 5);\n\n\t\tassert.equal(results[0].label, 'h1');\n\t\tassert.equal(results[0].level, 1);\n\n\t\tassert.equal(results[1].label, '# code cell 2');\n\t\tassert.equal(results[1].level, 7);\n\n\t\tassert.equal(results[2].label, 'var2');\n\t\tassert.equal(results[2].level, 8);\n\n\t\tassert.equal(results[3].label, '# code cell 3');\n\t\tassert.equal(results[3].level, 7);\n\n\t\tassert.equal(results[4].label, 'var3');\n\t\tassert.equal(results[4].level, 8);\n\t});\n\n\t// #endregion\n\t// #region QuickPick\n\n\ttest('QuickPick 0: Symbols On + 2 cells WITH symbols', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: false,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: true,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {}, kind: 12 }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {}, kind: 12 }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst quickPickProvider = store.add(new NotebookQuickPickProvider(createMockOutlineDataSource([...outlineModel.children]), configurationService, themeService));\n\t\tconst results = quickPickProvider.getQuickPickElements();\n\n\t\t// Validate\n\t\tassert.equal(results.length, 4);\n\n\t\tassert.equal(results[0].label, '$(markdown) h1');\n\t\tassert.equal(results[0].element.level, 1);\n\n\t\tassert.equal(results[1].label, '$(markdown) plaintext');\n\t\tassert.equal(results[1].element.level, 7);\n\n\t\tassert.equal(results[2].label, '$(symbol-variable) var2');\n\t\tassert.equal(results[2].element.level, 8);\n\n\t\tassert.equal(results[3].label, '$(symbol-variable) var3');\n\t\tassert.equal(results[3].element.level, 8);\n\t});\n\n\ttest('QuickPick 1: Symbols On + 1 cell WITH symbol + 1 cell WITHOUT symbol', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: false,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: true,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {}, kind: 12 }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst quickPickProvider = store.add(new NotebookQuickPickProvider(createMockOutlineDataSource([...outlineModel.children]), configurationService, themeService));\n\t\tconst results = quickPickProvider.getQuickPickElements();\n\n\t\t// Validate\n\t\tassert.equal(results.length, 4);\n\n\t\tassert.equal(results[0].label, '$(markdown) h1');\n\t\tassert.equal(results[0].element.level, 1);\n\n\t\tassert.equal(results[1].label, '$(markdown) plaintext');\n\t\tassert.equal(results[1].element.level, 7);\n\n\t\tassert.equal(results[2].label, '$(code) # code cell 2');\n\t\tassert.equal(results[2].element.level, 7);\n\n\t\tassert.equal(results[3].label, '$(symbol-variable) var3');\n\t\tassert.equal(results[3].element.level, 8);\n\t});\n\n\ttest('QuickPick 3: Symbols Off', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: false,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {}, kind: 12 }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {}, kind: 12 }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createCodeCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\n\t\t// Generate filtered outline (view model)\n\t\tconst quickPickProvider = store.add(new NotebookQuickPickProvider(createMockOutlineDataSource([...outlineModel.children]), configurationService, themeService));\n\t\tconst results = quickPickProvider.getQuickPickElements();\n\n\t\t// Validate\n\t\tassert.equal(results.length, 4);\n\n\t\tassert.equal(results[0].label, '$(markdown) h1');\n\t\tassert.equal(results[0].element.level, 1);\n\n\t\tassert.equal(results[1].label, '$(markdown) plaintext');\n\t\tassert.equal(results[1].element.level, 7);\n\n\t\tassert.equal(results[2].label, '$(code) # code cell 2');\n\t\tassert.equal(results[2].element.level, 7);\n\n\t\tassert.equal(results[3].label, '$(code) # code cell 3');\n\t\tassert.equal(results[3].element.level, 7);\n\t});\n\n\t// #endregion\n\t// #region Breadcrumbs\n\n\ttest('Breadcrumbs 0: Code Cells On ', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: false,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: true\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {}, kind: 12 }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {}, kind: 12 }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createMarkupCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\t\tconst outlineTree = buildOutlineTree([...outlineModel.children]);\n\n\t\t// Generate filtered outline (view model)\n\t\tconst breadcrumbsProvider = store.add(new NotebookBreadcrumbsProvider(createMockOutlineDataSource([], [...outlineTree![0].children][1]), configurationService));\n\t\tconst results = breadcrumbsProvider.getBreadcrumbElements();\n\n\t\t// Validate\n\t\tassert.equal(results.length, 3);\n\n\t\tassert.equal(results[0].label, 'fakeRoot');\n\t\tassert.equal(results[0].level, -1);\n\n\t\tassert.equal(results[1].label, 'h1');\n\t\tassert.equal(results[1].level, 1);\n\n\t\tassert.equal(results[2].label, '# code cell 2');\n\t\tassert.equal(results[2].level, 7);\n\t});\n\n\ttest('Breadcrumbs 1: Code Cells Off ', async function () {\n\t\tawait setOutlineViewConfiguration({\n\t\t\toutlineShowMarkdownHeadersOnly: false,\n\t\t\toutlineShowCodeCells: false,\n\t\t\toutlineShowCodeCellSymbols: false,\n\t\t\tquickPickShowAllSymbols: false,\n\t\t\tbreadcrumbsShowCodeCells: false\n\t\t});\n\n\t\t// Create models + symbols\n\t\tconst cells = [\n\t\t\tcreateMarkupCellViewModel(1, '# h1', '$0', 0),\n\t\t\tcreateMarkupCellViewModel(1, 'plaintext', '$1', 0),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 2', '$2'),\n\t\t\tcreateCodeCellViewModel(1, '# code cell 3', '$3')\n\t\t];\n\t\tsetSymbolsForTextModel([], '$0');\n\t\tsetSymbolsForTextModel([], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {}, kind: 12 }], '$2');\n\t\tsetSymbolsForTextModel([{ name: 'var3', range: {}, kind: 12 }], '$3');\n\n\t\t// Cache symbols\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tfor (const cell of cells) {\n\t\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\t}\n\n\t\t// Generate raw outline\n\t\tconst outlineModel = new OutlineEntry(-1, -1, createMarkupCellViewModel(), 'fakeRoot', false, false, undefined, undefined);\n\t\tfor (const cell of cells) {\n\t\t\tentryFactory.getOutlineEntries(cell, 0).forEach(entry => outlineModel.addChild(entry));\n\t\t}\n\t\tconst outlineTree = buildOutlineTree([...outlineModel.children]);\n\n\t\t// Generate filtered outline (view model)\n\t\tconst breadcrumbsProvider = store.add(new NotebookBreadcrumbsProvider(createMockOutlineDataSource([], [...outlineTree![0].children][1]), configurationService));\n\t\tconst results = breadcrumbsProvider.getBreadcrumbElements();\n\n\t\t// Validate\n\t\tassert.equal(results.length, 2);\n\n\t\tassert.equal(results[0].label, 'fakeRoot');\n\t\tassert.equal(results[0].level, -1);\n\n\t\tassert.equal(results[1].label, 'h1');\n\t\tassert.equal(results[1].level, 1);\n\t});\n\n\t// #endregion\n});\n"],
  "mappings": "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",
  "names": []
}
