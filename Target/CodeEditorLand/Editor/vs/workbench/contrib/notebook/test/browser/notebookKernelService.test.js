import r from"assert";import{URI as u}from"../../../../../base/common/uri.js";import{ExtensionIdentifier as w}from"../../../../../platform/extensions/common/extensions.js";import{setupInstantiationService as y}from"./testNotebookEditor.js";import{Emitter as T,Event as b}from"../../../../../base/common/event.js";import{INotebookKernelService as K}from"../../common/notebookKernelService.js";import{NotebookKernelService as N}from"../../browser/services/notebookKernelServiceImpl.js";import{INotebookService as h}from"../../common/notebookService.js";import{mock as g}from"../../../../../base/test/common/mock.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{DisposableStore as I}from"../../../../../base/common/lifecycle.js";import{NotebookTextModel as v}from"../../common/model/notebookTextModel.js";import{PLAINTEXT_LANGUAGE_ID as M}from"../../../../../editor/common/languages/modesRegistry.js";import{IMenuService as S}from"../../../../../platform/actions/common/actions.js";import"../../common/notebookCommon.js";import{ensureNoDisposablesAreLeakedInTestSuite as E}from"../../../../../base/test/common/utils.js";import"../../../../../base/common/cancellation.js";import{AsyncIterableObject as D}from"../../../../../base/common/async.js";suite("NotebookKernelService",()=>{let a,e,s,c;teardown(()=>{s.dispose()}),E(),setup(function(){s=new I,c=new T,s.add(c),a=y(s),a.stub(h,new class extends g(){onDidAddNotebookDocument=c.event;onWillRemoveNotebookDocument=b.None;getNotebookTextModels(){return[]}}),a.stub(S,new class extends g(){createMenu(){return new class extends g(){onDidChange=b.None;getActions(){return[]}dispose(){}}}}),e=s.add(a.createInstance(N)),a.set(K,e)}),test("notebook priorities",function(){const i=u.parse("foo:///one"),l=u.parse("foo:///two"),o=new d({label:"z"}),t=new d({label:"a"});s.add(e.registerKernel(o)),s.add(e.registerKernel(t));let n=e.getMatchingKernel({uri:i,notebookType:"foo"});r.ok(n.all[0]===t),r.ok(n.all[1]===o),e.updateKernelNotebookAffinity(t,i,2),e.updateKernelNotebookAffinity(t,l,1),n=e.getMatchingKernel({uri:i,notebookType:"foo"}),r.ok(n.all[0]===t),r.ok(n.all[1]===o),n=e.getMatchingKernel({uri:l,notebookType:"foo"}),r.ok(n.all[0]===t),r.ok(n.all[1]===o),e.updateKernelNotebookAffinity(t,i,void 0),n=e.getMatchingKernel({uri:i,notebookType:"foo"}),r.ok(n.all[0]===t),r.ok(n.all[1]===o)}),test("new kernel with higher affinity wins, https://github.com/microsoft/vscode/issues/122028",function(){const i=u.parse("foo:///one"),l=new d;s.add(e.registerKernel(l));let o=e.getMatchingKernel({uri:i,notebookType:"foo"});r.strictEqual(o.all.length,1),r.ok(o.all[0]===l);const t=new d;s.add(e.registerKernel(t)),o=e.getMatchingKernel({uri:i,notebookType:"foo"}),r.strictEqual(o.all.length,2),e.updateKernelNotebookAffinity(t,i,2),o=e.getMatchingKernel({uri:i,notebookType:"foo"}),r.strictEqual(o.all.length,2),r.ok(o.all[0]===t),r.ok(o.all[1]===l)}),test("onDidChangeSelectedNotebooks not fired on initial notebook open #121904",function(){const i=u.parse("foo:///one"),l={uri:i,viewType:"jupyter",notebookType:"jupyter"},o={uri:i,viewType:"dotnet",notebookType:"dotnet"},t=new d({viewType:l.viewType}),n=new d({viewType:o.viewType});s.add(e.registerKernel(t)),s.add(e.registerKernel(n)),e.selectKernelForNotebook(t,l),e.selectKernelForNotebook(n,o);let p=e.getMatchingKernel(o);r.strictEqual(p.selected===n,!0),p=e.getMatchingKernel(l),r.strictEqual(p.selected===t,!0)}),test("onDidChangeSelectedNotebooks not fired on initial notebook open #121904, p2",async function(){const i=u.parse("foo:///one"),l={uri:i,viewType:"jupyter",notebookType:"jupyter"},o={uri:i,viewType:"dotnet",notebookType:"dotnet"},t=new d({viewType:l.viewType}),n=new d({viewType:o.viewType});s.add(e.registerKernel(t)),s.add(e.registerKernel(n)),e.selectKernelForNotebook(t,l),e.selectKernelForNotebook(n,o);const p={transientOutputs:!1,transientCellMetadata:{},transientDocumentMetadata:{},cellContentMetadata:{}};{const k=b.toPromise(e.onDidChangeSelectedNotebooks),f=s.add(a.createInstance(v,l.viewType,l.uri,[],{},p));c.fire(f);const m=await k;r.strictEqual(m.newKernel,t.id)}{const k=b.toPromise(e.onDidChangeSelectedNotebooks),f=s.add(a.createInstance(v,o.viewType,o.uri,[],{},p));c.fire(f);const m=await k;r.strictEqual(m.newKernel,n.id)}})});class d{id=Math.random()+"kernel";label="test-label";viewType="*";onDidChange=b.None;extension=new w("test");localResourceRoot=u.file("/test");description;detail;preloadUris=[];preloadProvides=[];supportedLanguages=[];executeNotebookCellsRequest(){throw new Error("Method not implemented.")}cancelNotebookCellExecution(){throw new Error("Method not implemented.")}provideVariables(e,s,c,i,l){return D.EMPTY}constructor(e){this.supportedLanguages=e?.languages??[M],this.label=e?.label??this.label,this.viewType=e?.viewType??this.viewType}}
