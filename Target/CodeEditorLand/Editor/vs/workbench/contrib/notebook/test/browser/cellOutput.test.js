import r from"assert";import{VSBuffer as d}from"../../../../../base/common/buffer.js";import{ensureNoDisposablesAreLeakedInTestSuite as S}from"../../../../../base/test/common/utils.js";import{CellOutputContainer as v}from"../../browser/view/cellParts/cellOutput.js";import"../../browser/view/notebookRenderingCommon.js";import"../../browser/viewModel/codeCellViewModel.js";import{CellKind as b}from"../../common/notebookCommon.js";import{setupInstantiationService as V,withTestNotebook as w}from"./testNotebookEditor.js";import{FastDomNode as C}from"../../../../../base/browser/fastDomNode.js";import"../../../../../base/common/lifecycle.js";import{INotebookService as T}from"../../common/notebookService.js";import{mock as h}from"../../../../../base/test/common/mock.js";import{IMenuService as y}from"../../../../../platform/actions/common/actions.js";import{Event as g}from"../../../../../base/common/event.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";suite("CellOutput",()=>{const s=S();let i,e=[];setup(()=>{e=[],i=V(s),i.stub(T,new class extends h(){getOutputMimeTypeInfo(){return[{rendererId:"plainTextRendererId",mimeType:"text/plain",isTrusted:!0},{rendererId:"htmlRendererId",mimeType:"text/html",isTrusted:!0}]}getRendererInfo(){return{id:"rendererId",displayName:"Stubbed Renderer",extensionId:{_lower:"id",value:"id"}}}}),i.stub(y,new class extends h(){createMenu(){const t=new class extends h(){onDidChange=g.None;getActions(){return[]}dispose(){e=e.filter(o=>o!==t)}};return e.push(t),t}})}),test("Render cell output items with multiple mime types",async function(){const t={data:d.fromString("output content"),mime:"text/plain"},o={data:d.fromString("output content"),mime:"text/html"},m={outputId:"abc",outputs:[t,o]},a={outputId:"def",outputs:[t,o]};await w([["print(output content)","python",b.Code,[m,a],{}]],(c,I,l,p)=>{const n=I.viewCells[0],u=M(l);l.add(p.createInstance(v,c,n,u,{limit:100})).render(),n.outputsViewModels[0].setVisible(!0),r.strictEqual(e.length,1,"should have 1 output menus"),r(u.outputContainer.domNode.style.display!=="none","output container should be visible"),n.outputsViewModels[1].setVisible(!0),r.strictEqual(e.length,2,"should have 2 output menus"),n.outputsViewModels[1].setVisible(!0),r.strictEqual(e.length,2,"should still have 2 output menus")},i)}),test("One of many cell outputs becomes hidden",async function(){const t={data:d.fromString("output content"),mime:"text/plain"},o={data:d.fromString("output content"),mime:"text/html"},m={outputId:"abc",outputs:[t,o]},a={outputId:"def",outputs:[t,o]},c={outputId:"ghi",outputs:[t,o]};await w([["print(output content)","python",b.Code,[m,a,c],{}]],(I,l,p,n)=>{const u=l.viewCells[0],f=M(p);p.add(n.createInstance(v,I,u,f,{limit:100})).render(),u.outputsViewModels[0].setVisible(!0),u.outputsViewModels[1].setVisible(!0),u.outputsViewModels[2].setVisible(!0),u.outputsViewModels[1].setVisible(!1),r(f.outputContainer.domNode.style.display!=="none","output container should be visible"),r.strictEqual(e.length,2,"should have 2 output menus")},i)})});function M(s){return{outputContainer:new C(document.createElement("div")),outputShowMoreContainer:new C(document.createElement("div")),focusSinkElement:document.createElement("div"),templateDisposables:s,elementDisposables:s}}
