{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/contrib/notebookClipboard.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { mock } from '../../../../../../base/test/common/mock.js';\nimport { NotebookClipboardContribution, runCopyCells, runCutCells } from '../../../browser/contrib/clipboard/notebookClipboard.js';\nimport { CellKind, NOTEBOOK_EDITOR_ID, SelectionStateType } from '../../../common/notebookCommon.js';\nimport { withTestNotebook } from '../testNotebookEditor.js';\nimport { IEditorService } from '../../../../../services/editor/common/editorService.js';\nimport { IActiveNotebookEditor, INotebookEditor } from '../../../browser/notebookBrowser.js';\nimport { IVisibleEditorPane } from '../../../../../common/editor.js';\nimport { INotebookService } from '../../../common/notebookService.js';\nimport { FoldingModel, updateFoldingStateAtIndex } from '../../../browser/viewModel/foldingModel.js';\nimport { NotebookCellTextModel } from '../../../common/model/notebookCellTextModel.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\n\nsuite('Notebook Clipboard', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst createEditorService = (editor: IActiveNotebookEditor) => {\n\t\tconst visibleEditorPane = new class extends mock<IVisibleEditorPane>() {\n\t\t\toverride getId(): string {\n\t\t\t\treturn NOTEBOOK_EDITOR_ID;\n\t\t\t}\n\t\t\toverride getControl(): INotebookEditor {\n\t\t\t\treturn editor;\n\t\t\t}\n\t\t};\n\n\t\tconst editorService: IEditorService = new class extends mock<IEditorService>() {\n\t\t\toverride get activeEditorPane(): IVisibleEditorPane | undefined {\n\t\t\t\treturn visibleEditorPane;\n\t\t\t}\n\t\t};\n\n\t\treturn editorService;\n\t};\n\n\ttest.skip('Cut multiple selected cells', async function () {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 2', 'markdown', CellKind.Markup, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() { override setToCopy() { } });\n\n\t\t\t\tconst clipboardContrib = new NotebookClipboardContribution(createEditorService(editor));\n\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 0, end: 2 }, selections: [{ start: 0, end: 2 }] }, 'model');\n\t\t\t\tassert.ok(clipboardContrib.runCutAction(accessor));\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 0, end: 1 });\n\t\t\t\tassert.strictEqual(viewModel.length, 1);\n\t\t\t\tassert.strictEqual(viewModel.cellAt(0)?.getText(), 'paragraph 2');\n\t\t\t});\n\t});\n\n\ttest.skip('Cut should take folding info into account', async function () {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header a', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['var b = 1;', 'javascript', CellKind.Code, [], {}],\n\t\t\t\t['# header b', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['var b = 2;', 'javascript', CellKind.Code, [], {}],\n\t\t\t\t['var c = 3', 'javascript', CellKind.Markup, [], {}],\n\t\t\t\t['# header d', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['var e = 4;', 'javascript', CellKind.Code, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\tconst foldingModel = new FoldingModel();\n\t\t\t\tfoldingModel.attachViewModel(viewModel);\n\n\t\t\t\tupdateFoldingStateAtIndex(foldingModel, 0, true);\n\t\t\t\tupdateFoldingStateAtIndex(foldingModel, 2, true);\n\t\t\t\tviewModel.updateFoldingRanges(foldingModel.regions);\n\t\t\t\teditor.setHiddenAreas(viewModel.getHiddenRanges());\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 0, end: 1 }, selections: [{ start: 0, end: 1 }] }, 'model');\n\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() { override setToCopy() { } });\n\n\t\t\t\tconst clipboardContrib = new NotebookClipboardContribution(createEditorService(editor));\n\t\t\t\tclipboardContrib.runCutAction(accessor);\n\t\t\t\tassert.strictEqual(viewModel.length, 5);\n\t\t\t\tawait viewModel.undo();\n\t\t\t\tassert.strictEqual(viewModel.length, 7);\n\t\t\t});\n\t});\n\n\ttest.skip('Copy should take folding info into account', async function () {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header a', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['var b = 1;', 'javascript', CellKind.Code, [], {}],\n\t\t\t\t['# header b', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['var b = 2;', 'javascript', CellKind.Code, [], {}],\n\t\t\t\t['var c = 3', 'javascript', CellKind.Markup, [], {}],\n\t\t\t\t['# header d', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['var e = 4;', 'javascript', CellKind.Code, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\tconst foldingModel = new FoldingModel();\n\t\t\t\tfoldingModel.attachViewModel(viewModel);\n\n\t\t\t\tupdateFoldingStateAtIndex(foldingModel, 0, true);\n\t\t\t\tupdateFoldingStateAtIndex(foldingModel, 2, true);\n\t\t\t\tviewModel.updateFoldingRanges(foldingModel.regions);\n\t\t\t\teditor.setHiddenAreas(viewModel.getHiddenRanges());\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 0, end: 1 }, selections: [{ start: 0, end: 1 }] }, 'model');\n\n\t\t\t\tlet _cells: NotebookCellTextModel[] = [];\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\t\t\toverride setToCopy(cells: NotebookCellTextModel[]) { _cells = cells; }\n\t\t\t\t\toverride getToCopy() { return { items: _cells, isCopy: true }; }\n\t\t\t\t});\n\n\t\t\t\tconst clipboardContrib = new NotebookClipboardContribution(createEditorService(editor));\n\t\t\t\tclipboardContrib.runCopyAction(accessor);\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 6, end: 7 }, selections: [{ start: 6, end: 7 }] }, 'model');\n\t\t\t\tclipboardContrib.runPasteAction(accessor);\n\n\t\t\t\tassert.strictEqual(viewModel.length, 9);\n\t\t\t\tassert.strictEqual(viewModel.cellAt(8)?.getText(), 'var b = 1;');\n\t\t\t});\n\t});\n\n\ttest.skip('#119773, cut last item should not focus on the top first cell', async function () {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 2', 'markdown', CellKind.Markup, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() { override setToCopy() { } });\n\t\t\t\tconst clipboardContrib = new NotebookClipboardContribution(createEditorService(editor));\n\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 2, end: 3 }, selections: [{ start: 2, end: 3 }] }, 'model');\n\t\t\t\tassert.ok(clipboardContrib.runCutAction(accessor));\n\t\t\t\t// it should be the last cell, other than the first one.\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 1, end: 2 });\n\t\t\t});\n\t});\n\n\ttest.skip('#119771, undo paste should restore selections', async function () {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 2', 'markdown', CellKind.Markup, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\t\t\toverride setToCopy() { }\n\t\t\t\t\toverride getToCopy() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\tviewModel.cellAt(0)!.model\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tisCopy: true\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst clipboardContrib = new NotebookClipboardContribution(createEditorService(editor));\n\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 2, end: 3 }, selections: [{ start: 2, end: 3 }] }, 'model');\n\t\t\t\tassert.ok(clipboardContrib.runPasteAction(accessor));\n\n\t\t\t\tassert.strictEqual(viewModel.length, 4);\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 3, end: 4 });\n\t\t\t\tassert.strictEqual(viewModel.cellAt(3)?.getText(), '# header 1');\n\t\t\t\tawait viewModel.undo();\n\t\t\t\tassert.strictEqual(viewModel.length, 3);\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 2, end: 3 });\n\t\t\t});\n\t});\n\n\ttest('copy cell from ui still works if the target cell is not part of a selection', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 2', 'markdown', CellKind.Markup, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\tlet _toCopy: NotebookCellTextModel[] = [];\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\t\t\toverride setToCopy(toCopy: NotebookCellTextModel[]) { _toCopy = toCopy; }\n\t\t\t\t\toverride getToCopy() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\titems: _toCopy,\n\t\t\t\t\t\t\tisCopy: true\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 0, end: 1 }, selections: [{ start: 0, end: 2 }] }, 'model');\n\t\t\t\tassert.ok(runCopyCells(accessor, editor, viewModel.cellAt(0)));\n\t\t\t\tassert.deepStrictEqual(_toCopy, [viewModel.cellAt(0)!.model, viewModel.cellAt(1)!.model]);\n\n\t\t\t\tassert.ok(runCopyCells(accessor, editor, viewModel.cellAt(2)));\n\t\t\t\tassert.deepStrictEqual(_toCopy.length, 1);\n\t\t\t\tassert.deepStrictEqual(_toCopy, [viewModel.cellAt(2)!.model]);\n\t\t\t});\n\t});\n\n\ttest('cut cell from ui still works if the target cell is not part of a selection', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 2', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 3', 'markdown', CellKind.Markup, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\t\t\toverride setToCopy() { }\n\t\t\t\t\toverride getToCopy() {\n\t\t\t\t\t\treturn { items: [], isCopy: true };\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 0, end: 1 }, selections: [{ start: 0, end: 2 }] }, 'model');\n\t\t\t\tassert.ok(runCutCells(accessor, editor, viewModel.cellAt(0)));\n\t\t\t\tassert.strictEqual(viewModel.length, 2);\n\t\t\t\tawait viewModel.undo();\n\t\t\t\tassert.strictEqual(viewModel.length, 4);\n\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 0, end: 1 });\n\t\t\t\tassert.deepStrictEqual(viewModel.getSelections(), [{ start: 0, end: 2 }]);\n\t\t\t\tassert.ok(runCutCells(accessor, editor, viewModel.cellAt(2)));\n\t\t\t\tassert.strictEqual(viewModel.length, 3);\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 0, end: 1 });\n\t\t\t\tassert.strictEqual(viewModel.cellAt(0)?.getText(), '# header 1');\n\t\t\t\tassert.strictEqual(viewModel.cellAt(1)?.getText(), 'paragraph 1');\n\t\t\t\tassert.strictEqual(viewModel.cellAt(2)?.getText(), 'paragraph 3');\n\n\t\t\t\tawait viewModel.undo();\n\t\t\t\tassert.strictEqual(viewModel.length, 4);\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 2, end: 3 }, selections: [{ start: 2, end: 4 }] }, 'model');\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 2, end: 3 });\n\t\t\t\tassert.ok(runCutCells(accessor, editor, viewModel.cellAt(0)));\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 1, end: 2 });\n\t\t\t\tassert.deepStrictEqual(viewModel.getSelections(), [{ start: 1, end: 3 }]);\n\t\t\t});\n\t});\n\n\ttest('cut focus cell still works if the focus is not part of any selection', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 2', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 3', 'markdown', CellKind.Markup, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\t\t\toverride setToCopy() { }\n\t\t\t\t\toverride getToCopy() {\n\t\t\t\t\t\treturn { items: [], isCopy: true };\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 0, end: 1 }, selections: [{ start: 2, end: 4 }] }, 'model');\n\t\t\t\tassert.ok(runCutCells(accessor, editor, undefined));\n\t\t\t\tassert.strictEqual(viewModel.length, 3);\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 0, end: 1 });\n\t\t\t\tassert.deepStrictEqual(viewModel.getSelections(), [{ start: 1, end: 3 }]);\n\t\t\t});\n\t});\n\n\ttest('cut focus cell still works if the focus is not part of any selection 2', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['# header 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 1', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 2', 'markdown', CellKind.Markup, [], {}],\n\t\t\t\t['paragraph 3', 'markdown', CellKind.Markup, [], {}],\n\t\t\t],\n\t\t\tasync (editor, viewModel, _ds, accessor) => {\n\t\t\t\taccessor.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\t\t\toverride setToCopy() { }\n\t\t\t\t\toverride getToCopy() {\n\t\t\t\t\t\treturn { items: [], isCopy: true };\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tviewModel.updateSelectionsState({ kind: SelectionStateType.Index, focus: { start: 3, end: 4 }, selections: [{ start: 0, end: 2 }] }, 'model');\n\t\t\t\tassert.ok(runCutCells(accessor, editor, undefined));\n\t\t\t\tassert.strictEqual(viewModel.length, 3);\n\t\t\t\tassert.deepStrictEqual(viewModel.getFocus(), { start: 2, end: 3 });\n\t\t\t\tassert.deepStrictEqual(viewModel.getSelections(), [{ start: 0, end: 2 }]);\n\t\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
