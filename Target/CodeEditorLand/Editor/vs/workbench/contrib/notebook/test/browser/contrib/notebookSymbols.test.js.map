{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/contrib/notebookSymbols.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../../../base/common/cancellation.js';\nimport { mock } from '../../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { ITextModel } from '../../../../../../editor/common/model.js';\nimport { IOutlineModelService, OutlineModel } from '../../../../../../editor/contrib/documentSymbols/browser/outlineModel.js';\nimport { ICellViewModel } from '../../../browser/notebookBrowser.js';\nimport { NotebookOutlineEntryFactory } from '../../../browser/viewModel/notebookOutlineEntryFactory.js';\nimport { INotebookExecutionStateService } from '../../../common/notebookExecutionStateService.js';\nimport { MockDocumentSymbol } from '../testNotebookEditor.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../../../editor/common/services/resolverService.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { IReference } from '../../../../../../base/common/lifecycle.js';\n\nsuite('Notebook Symbols', function () {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst symbolsPerTextModel: Record<string, MockDocumentSymbol[]> = {};\n\tfunction setSymbolsForTextModel(symbols: MockDocumentSymbol[], textmodelId = 'textId') {\n\t\tsymbolsPerTextModel[textmodelId] = symbols;\n\t}\n\n\tconst executionService = new class extends mock<INotebookExecutionStateService>() {\n\t\toverride getCellExecution() { return undefined; }\n\t};\n\n\tclass OutlineModelStub {\n\t\tconstructor(private textId: string) { }\n\n\t\tgetTopLevelSymbols() {\n\t\t\treturn symbolsPerTextModel[this.textId];\n\t\t}\n\t}\n\tconst outlineModelService = new class extends mock<IOutlineModelService>() {\n\t\toverride getOrCreate(model: ITextModel, arg1: any) {\n\t\t\tconst outline = new OutlineModelStub(model.id) as unknown as OutlineModel;\n\t\t\treturn Promise.resolve(outline);\n\t\t}\n\t\toverride getDebounceValue(arg0: any) {\n\t\t\treturn 0;\n\t\t}\n\t};\n\tconst textModelService = new class extends mock<ITextModelService>() {\n\t\toverride createModelReference(uri: URI) {\n\t\t\treturn Promise.resolve({\n\t\t\t\tobject: {\n\t\t\t\t\ttextEditorModel: {\n\t\t\t\t\t\tid: uri.toString(),\n\t\t\t\t\t\tgetVersionId() { return 1; }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdispose() { }\n\t\t\t} as IReference<IResolvedTextEditorModel>);\n\t\t}\n\t};\n\n\tfunction createCellViewModel(version: number = 1, textmodelId = 'textId') {\n\t\treturn {\n\t\t\tid: textmodelId,\n\t\t\turi: { toString() { return textmodelId; } },\n\t\t\ttextBuffer: {\n\t\t\t\tgetLineCount() { return 0; }\n\t\t\t},\n\t\t\tgetText() {\n\t\t\t\treturn '# code';\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\ttextModel: {\n\t\t\t\t\tid: textmodelId,\n\t\t\t\t\tgetVersionId() { return version; }\n\t\t\t\t}\n\t\t\t},\n\t\t\tresolveTextModel() {\n\t\t\t\treturn this.model.textModel as unknown;\n\t\t\t},\n\t\t} as ICellViewModel;\n\t}\n\n\ttest('Cell without symbols cache', function () {\n\t\tsetSymbolsForTextModel([{ name: 'var', range: {} }]);\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tconst entries = entryFactory.getOutlineEntries(createCellViewModel(), 0);\n\n\t\tassert.equal(entries.length, 1, 'no entries created');\n\t\tassert.equal(entries[0].label, '# code', 'entry should fall back to first line of cell');\n\t});\n\n\ttest('Cell with simple symbols', async function () {\n\t\tsetSymbolsForTextModel([{ name: 'var1', range: {} }, { name: 'var2', range: {} }]);\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tconst cell = createCellViewModel();\n\n\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\tconst entries = entryFactory.getOutlineEntries(cell, 0);\n\n\t\tassert.equal(entries.length, 3, 'wrong number of outline entries');\n\t\tassert.equal(entries[0].label, '# code');\n\t\tassert.equal(entries[1].label, 'var1');\n\t\t// 6 levels for markdown, all code symbols are greater than the max markdown level\n\t\tassert.equal(entries[1].level, 8);\n\t\tassert.equal(entries[1].index, 1);\n\t\tassert.equal(entries[2].label, 'var2');\n\t\tassert.equal(entries[2].level, 8);\n\t\tassert.equal(entries[2].index, 2);\n\t});\n\n\ttest('Cell with nested symbols', async function () {\n\t\tsetSymbolsForTextModel([\n\t\t\t{ name: 'root1', range: {}, children: [{ name: 'nested1', range: {} }, { name: 'nested2', range: {} }] },\n\t\t\t{ name: 'root2', range: {}, children: [{ name: 'nested1', range: {} }] }\n\t\t]);\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\t\tconst cell = createCellViewModel();\n\n\t\tawait entryFactory.cacheSymbols(cell, CancellationToken.None);\n\t\tconst entries = entryFactory.getOutlineEntries(createCellViewModel(), 0);\n\n\t\tassert.equal(entries.length, 6, 'wrong number of outline entries');\n\t\tassert.equal(entries[0].label, '# code');\n\t\tassert.equal(entries[1].label, 'root1');\n\t\tassert.equal(entries[1].level, 8);\n\t\tassert.equal(entries[2].label, 'nested1');\n\t\tassert.equal(entries[2].level, 9);\n\t\tassert.equal(entries[3].label, 'nested2');\n\t\tassert.equal(entries[3].level, 9);\n\t\tassert.equal(entries[4].label, 'root2');\n\t\tassert.equal(entries[4].level, 8);\n\t\tassert.equal(entries[5].label, 'nested1');\n\t\tassert.equal(entries[5].level, 9);\n\t});\n\n\ttest('Multiple Cells with symbols', async function () {\n\t\tsetSymbolsForTextModel([{ name: 'var1', range: {} }], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', range: {} }], '$2');\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService, outlineModelService, textModelService);\n\n\t\tconst cell1 = createCellViewModel(1, '$1');\n\t\tconst cell2 = createCellViewModel(1, '$2');\n\t\tawait entryFactory.cacheSymbols(cell1, CancellationToken.None);\n\t\tawait entryFactory.cacheSymbols(cell2, CancellationToken.None);\n\n\t\tconst entries1 = entryFactory.getOutlineEntries(createCellViewModel(1, '$1'), 0);\n\t\tconst entries2 = entryFactory.getOutlineEntries(createCellViewModel(1, '$2'), 0);\n\n\n\t\tassert.equal(entries1.length, 2, 'wrong number of outline entries');\n\t\tassert.equal(entries1[0].label, '# code');\n\t\tassert.equal(entries1[1].label, 'var1');\n\t\tassert.equal(entries2.length, 2, 'wrong number of outline entries');\n\t\tassert.equal(entries2[0].label, '# code');\n\t\tassert.equal(entries2[1].label, 'var2');\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
