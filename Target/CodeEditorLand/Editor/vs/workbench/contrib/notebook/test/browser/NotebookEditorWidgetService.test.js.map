{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/NotebookEditorWidgetService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport assert from 'assert';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { GroupIdentifier, IEditorCloseEvent, IEditorWillMoveEvent } from '../../../../common/editor.js';\nimport { NotebookEditorWidget } from '../../browser/notebookEditorWidget.js';\nimport { NotebookEditorWidgetService } from '../../browser/services/notebookEditorServiceImpl.js';\nimport { NotebookEditorInput } from '../../common/notebookEditorInput.js';\nimport { setupInstantiationService } from './testNotebookEditor.js';\nimport { IEditorGroup, IEditorGroupsService, IEditorPart } from '../../../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\n\nclass TestNotebookEditorWidgetService extends NotebookEditorWidgetService {\n\tconstructor(\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper(editorGroupService, editorService, contextKeyService, instantiationService);\n\t}\n\n\tprotected override createWidget(): NotebookEditorWidget {\n\t\treturn new class extends mock<NotebookEditorWidget>() {\n\t\t\toverride onWillHide = () => { };\n\t\t\toverride getDomNode = () => { return { remove: () => { } } as any; };\n\t\t\toverride dispose = () => { };\n\t\t};\n\t}\n}\n\nfunction createNotebookInput(path: string, editorType: string) {\n\treturn new class extends mock<NotebookEditorInput>() {\n\t\toverride resource = URI.parse(path);\n\t\toverride get typeId() { return editorType; }\n\t};\n}\n\nsuite('NotebookEditorWidgetService', () => {\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet editorGroup1: IEditorGroup;\n\tlet editorGroup2: IEditorGroup;\n\n\tlet ondidRemoveGroup: Emitter<IEditorGroup>;\n\tlet onDidCloseEditor: Emitter<IEditorCloseEvent>;\n\tlet onWillMoveEditor: Emitter<IEditorWillMoveEvent>;\n\tteardown(() => disposables.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\n\t\tondidRemoveGroup = new Emitter<IEditorGroup>();\n\t\tonDidCloseEditor = new Emitter<IEditorCloseEvent>();\n\t\tonWillMoveEditor = new Emitter<IEditorWillMoveEvent>();\n\n\t\teditorGroup1 = new class extends mock<IEditorGroup>() {\n\t\t\toverride id = 1;\n\t\t\toverride onDidCloseEditor = onDidCloseEditor.event;\n\t\t\toverride onWillMoveEditor = onWillMoveEditor.event;\n\t\t};\n\t\teditorGroup2 = new class extends mock<IEditorGroup>() {\n\t\t\toverride id = 2;\n\t\t\toverride onDidCloseEditor = Event.None;\n\t\t\toverride onWillMoveEditor = Event.None;\n\t\t};\n\n\t\tinstantiationService = setupInstantiationService(disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, new class extends mock<IEditorGroupsService>() {\n\t\t\toverride onDidRemoveGroup = ondidRemoveGroup.event;\n\t\t\toverride onDidAddGroup = Event.None;\n\t\t\toverride whenReady = Promise.resolve();\n\t\t\toverride groups = [editorGroup1, editorGroup2];\n\t\t\toverride getPart(group: IEditorGroup | GroupIdentifier): IEditorPart;\n\t\t\toverride getPart(container: unknown): IEditorPart;\n\t\t\toverride getPart(container: unknown): import(\"../../../../services/editor/common/editorGroupsService.js\").IEditorPart {\n\t\t\t\treturn { windowId: 0 } as any;\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(IEditorService, new class extends mock<IEditorService>() {\n\t\t\toverride onDidEditorsChange = Event.None;\n\t\t});\n\t});\n\n\ttest('Retrieve widget within group', async function () {\n\t\tconst notebookEditorInput = createNotebookInput('/test.np', 'type1');\n\t\tconst notebookEditorService = disposables.add(instantiationService.createInstance(TestNotebookEditorWidgetService));\n\t\tconst widget = notebookEditorService.retrieveWidget(instantiationService, 1, notebookEditorInput);\n\t\tconst value = widget.value;\n\t\tconst widget2 = notebookEditorService.retrieveWidget(instantiationService, 1, notebookEditorInput);\n\n\t\tassert.notStrictEqual(widget2.value, undefined, 'should create a widget');\n\t\tassert.strictEqual(value, widget2.value, 'should return the same widget');\n\t\tassert.strictEqual(widget.value, undefined, 'initial borrow should no longer have widget');\n\t});\n\n\ttest('Retrieve independent widgets', async function () {\n\t\tconst inputType1 = createNotebookInput('/test.np', 'type1');\n\t\tconst inputType2 = createNotebookInput('/test.np', 'type2');\n\t\tconst notebookEditorService = disposables.add(instantiationService.createInstance(TestNotebookEditorWidgetService));\n\t\tconst widget = notebookEditorService.retrieveWidget(instantiationService, 1, inputType1);\n\t\tconst widgetDiffGroup = notebookEditorService.retrieveWidget(instantiationService, 2, inputType1);\n\t\tconst widgetDiffType = notebookEditorService.retrieveWidget(instantiationService, 1, inputType2);\n\n\t\tassert.notStrictEqual(widget.value, undefined, 'should create a widget');\n\t\tassert.notStrictEqual(widgetDiffGroup.value, undefined, 'should create a widget');\n\t\tassert.notStrictEqual(widgetDiffType.value, undefined, 'should create a widget');\n\t\tassert.notStrictEqual(widget.value, widgetDiffGroup.value, 'should return a different widget');\n\t\tassert.notStrictEqual(widget.value, widgetDiffType.value, 'should return a different widget');\n\t});\n\n\ttest('Only relevant widgets get disposed', async function () {\n\t\tconst inputType1 = createNotebookInput('/test.np', 'type1');\n\t\tconst inputType2 = createNotebookInput('/test.np', 'type2');\n\t\tconst notebookEditorService = disposables.add(instantiationService.createInstance(TestNotebookEditorWidgetService));\n\t\tconst widget = notebookEditorService.retrieveWidget(instantiationService, 1, inputType1);\n\t\tconst widgetDiffType = notebookEditorService.retrieveWidget(instantiationService, 1, inputType2);\n\t\tconst widgetDiffGroup = notebookEditorService.retrieveWidget(instantiationService, 2, inputType1);\n\n\t\tondidRemoveGroup.fire(editorGroup1);\n\n\t\tassert.strictEqual(widget.value, undefined, 'widgets in group should get disposed');\n\t\tassert.strictEqual(widgetDiffType.value, undefined, 'widgets in group should get disposed');\n\t\tassert.notStrictEqual(widgetDiffGroup.value, undefined, 'other group should not be disposed');\n\t});\n\n\ttest('Widget should move between groups when editor is moved', async function () {\n\t\tconst inputType1 = createNotebookInput('/test.np', NotebookEditorInput.ID);\n\t\tconst notebookEditorService = disposables.add(instantiationService.createInstance(TestNotebookEditorWidgetService));\n\t\tconst initialValue = notebookEditorService.retrieveWidget(instantiationService, 1, inputType1).value;\n\n\t\tawait new Promise(resolve => setTimeout(resolve, 0));\n\n\t\tonWillMoveEditor.fire({\n\t\t\teditor: inputType1,\n\t\t\tgroupId: 1,\n\t\t\ttarget: 2,\n\t\t});\n\n\t\tconst widgetDiffGroup = notebookEditorService.retrieveWidget(instantiationService, 2, inputType1);\n\t\tconst widgetFirstGroup = notebookEditorService.retrieveWidget(instantiationService, 1, inputType1);\n\n\t\tassert.notStrictEqual(initialValue, undefined, 'valid widget');\n\t\tassert.strictEqual(widgetDiffGroup.value, initialValue, 'widget should be reused in new group');\n\t\tassert.notStrictEqual(widgetFirstGroup.value, initialValue, 'should create a new widget in the first group');\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
