{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookExecutionService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { AsyncIterableObject } from '../../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { assertThrowsAsync, ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { IMenu, IMenuService } from '../../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier } from '../../../../../platform/extensions/common/extensions.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { insertCellAtIndex } from '../../browser/controller/cellOperations.js';\nimport { NotebookExecutionService } from '../../browser/services/notebookExecutionServiceImpl.js';\nimport { NotebookKernelService } from '../../browser/services/notebookKernelServiceImpl.js';\nimport { NotebookViewModel } from '../../browser/viewModel/notebookViewModelImpl.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { CellKind, IOutputDto, NotebookCellMetadata } from '../../common/notebookCommon.js';\nimport { INotebookExecutionStateService } from '../../common/notebookExecutionStateService.js';\nimport { INotebookKernel, INotebookKernelHistoryService, INotebookKernelService, INotebookTextModelLike, VariablesResult } from '../../common/notebookKernelService.js';\nimport { INotebookLoggingService } from '../../common/notebookLoggingService.js';\nimport { INotebookService } from '../../common/notebookService.js';\nimport { setupInstantiationService, withTestNotebook as _withTestNotebook } from './testNotebookEditor.js';\n\nsuite('NotebookExecutionService', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet contextKeyService: IContextKeyService;\n\tlet kernelService: INotebookKernelService;\n\tlet disposables: DisposableStore;\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(function () {\n\n\t\tdisposables = new DisposableStore();\n\n\t\tinstantiationService = setupInstantiationService(disposables);\n\n\t\tinstantiationService.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\toverride onDidAddNotebookDocument = Event.None;\n\t\t\toverride onWillRemoveNotebookDocument = Event.None;\n\t\t\toverride getNotebookTextModels() { return []; }\n\t\t});\n\n\t\tinstantiationService.stub(INotebookLoggingService, new class extends mock<INotebookLoggingService>() {\n\t\t\toverride debug(category: string, output: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t});\n\n\t\tinstantiationService.stub(IMenuService, new class extends mock<IMenuService>() {\n\t\t\toverride createMenu() {\n\t\t\t\treturn new class extends mock<IMenu>() {\n\t\t\t\t\toverride onDidChange = Event.None;\n\t\t\t\t\toverride getActions() { return []; }\n\t\t\t\t\toverride dispose() { }\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tinstantiationService.stub(INotebookKernelHistoryService, new class extends mock<INotebookKernelHistoryService>() {\n\t\t\toverride getKernels(notebook: INotebookTextModelLike) {\n\t\t\t\treturn kernelService.getMatchingKernel(notebook);\n\t\t\t}\n\t\t\toverride addMostRecentKernel(kernel: INotebookKernel): void { }\n\t\t});\n\n\t\tinstantiationService.stub(ICommandService, new class extends mock<ICommandService>() {\n\t\t\toverride executeCommand(_commandId: string, ..._args: any[]) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\t\t});\n\n\t\tkernelService = disposables.add(instantiationService.createInstance(NotebookKernelService));\n\t\tinstantiationService.set(INotebookKernelService, kernelService);\n\t\tcontextKeyService = instantiationService.get(IContextKeyService);\n\t});\n\n\tasync function withTestNotebook(cells: [string, string, CellKind, IOutputDto[], NotebookCellMetadata][], callback: (viewModel: NotebookViewModel, textModel: NotebookTextModel, disposables: DisposableStore) => void | Promise<void>) {\n\t\treturn _withTestNotebook(cells, (editor, viewModel, disposables) => callback(viewModel, viewModel.notebookDocument, disposables));\n\t}\n\n\t// test('ctor', () => {\n\t// \tinstantiationService.createInstance(NotebookEditorKernelManager, { activeKernel: undefined, viewModel: undefined });\n\t// \tconst contextKeyService = instantiationService.get(IContextKeyService);\n\n\t// \tassert.strictEqual(contextKeyService.getContextKeyValue(NOTEBOOK_KERNEL_COUNT.key), 0);\n\t// });\n\n\ttest('cell is not runnable when no kernel is selected', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[],\n\t\t\tasync (viewModel, textModel, disposables) => {\n\t\t\t\tconst executionService = instantiationService.createInstance(NotebookExecutionService);\n\n\t\t\t\tconst cell = insertCellAtIndex(viewModel, 1, 'var c = 3', 'javascript', CellKind.Code, {}, [], true, true);\n\t\t\t\tawait assertThrowsAsync(async () => await executionService.executeNotebookCells(textModel, [cell.model], contextKeyService));\n\t\t\t});\n\t});\n\n\ttest('cell is not runnable when kernel does not support the language', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[],\n\t\t\tasync (viewModel, textModel) => {\n\n\t\t\t\tdisposables.add(kernelService.registerKernel(new TestNotebookKernel({ languages: ['testlang'] })));\n\t\t\t\tconst executionService = disposables.add(instantiationService.createInstance(NotebookExecutionService));\n\t\t\t\tconst cell = disposables.add(insertCellAtIndex(viewModel, 1, 'var c = 3', 'javascript', CellKind.Code, {}, [], true, true));\n\t\t\t\tawait assertThrowsAsync(async () => await executionService.executeNotebookCells(textModel, [cell.model], contextKeyService));\n\n\t\t\t});\n\t});\n\n\ttest('cell is runnable when kernel does support the language', async () => {\n\t\tawait withTestNotebook(\n\t\t\t[],\n\t\t\tasync (viewModel, textModel) => {\n\t\t\t\tconst kernel = new TestNotebookKernel({ languages: ['javascript'] });\n\t\t\t\tdisposables.add(kernelService.registerKernel(kernel));\n\t\t\t\tkernelService.selectKernelForNotebook(kernel, textModel);\n\t\t\t\tconst executionService = disposables.add(instantiationService.createInstance(NotebookExecutionService));\n\t\t\t\tconst executeSpy = sinon.spy();\n\t\t\t\tkernel.executeNotebookCellsRequest = executeSpy;\n\n\t\t\t\tconst cell = disposables.add(insertCellAtIndex(viewModel, 0, 'var c = 3', 'javascript', CellKind.Code, {}, [], true, true));\n\t\t\t\tawait executionService.executeNotebookCells(viewModel.notebookDocument, [cell.model], contextKeyService);\n\t\t\t\tassert.strictEqual(executeSpy.calledOnce, true);\n\t\t\t});\n\t});\n\n\ttest('Completes unconfirmed executions', async function () {\n\n\t\treturn withTestNotebook([], async (viewModel, textModel) => {\n\t\t\tlet didExecute = false;\n\t\t\tconst kernel = new class extends TestNotebookKernel {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({ languages: ['javascript'] });\n\t\t\t\t\tthis.id = 'mySpecialId';\n\t\t\t\t}\n\n\t\t\t\toverride async executeNotebookCellsRequest() {\n\t\t\t\t\tdidExecute = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdisposables.add(kernelService.registerKernel(kernel));\n\t\t\tkernelService.selectKernelForNotebook(kernel, textModel);\n\t\t\tconst executionService = disposables.add(instantiationService.createInstance(NotebookExecutionService));\n\t\t\tconst exeStateService = instantiationService.get(INotebookExecutionStateService);\n\n\t\t\tconst cell = disposables.add(insertCellAtIndex(viewModel, 0, 'var c = 3', 'javascript', CellKind.Code, {}, [], true, true));\n\t\t\tawait executionService.executeNotebookCells(textModel, [cell.model], contextKeyService);\n\n\t\t\tassert.strictEqual(didExecute, true);\n\t\t\tassert.strictEqual(exeStateService.getCellExecution(cell.uri), undefined);\n\t\t});\n\t});\n});\n\nclass TestNotebookKernel implements INotebookKernel {\n\tid: string = 'test';\n\tlabel: string = '';\n\tviewType = '*';\n\tonDidChange = Event.None;\n\textension: ExtensionIdentifier = new ExtensionIdentifier('test');\n\tlocalResourceRoot: URI = URI.file('/test');\n\tdescription?: string | undefined;\n\tdetail?: string | undefined;\n\tpreloadUris: URI[] = [];\n\tpreloadProvides: string[] = [];\n\tsupportedLanguages: string[] = [];\n\tprovideVariables(notebookUri: URI, parentId: number | undefined, kind: 'named' | 'indexed', start: number, token: CancellationToken): AsyncIterableObject<VariablesResult> {\n\t\treturn AsyncIterableObject.EMPTY;\n\t}\n\texecuteNotebookCellsRequest(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcancelNotebookCellExecution(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tconstructor(opts?: { languages: string[] }) {\n\t\tthis.supportedLanguages = opts?.languages ?? [PLAINTEXT_LANGUAGE_ID];\n\t}\n\timplementsInterrupt?: boolean | undefined;\n\timplementsExecutionOrder?: boolean | undefined;\n}\n"],
  "mappings": "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",
  "names": ["disposables"]
}
