{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookRendererMessagingService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NullExtensionService } from '../../../../services/extensions/common/extensions.js';\nimport { stub } from 'sinon';\nimport { NotebookRendererMessagingService } from '../../browser/services/notebookRendererMessagingServiceImpl.js';\nimport assert from 'assert';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('NotebookRendererMessaging', () => {\n\tlet extService: NullExtensionService;\n\tlet m: NotebookRendererMessagingService;\n\tlet sent: unknown[] = [];\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tsent = [];\n\t\textService = new NullExtensionService();\n\t\tm = ds.add(new NotebookRendererMessagingService(extService));\n\t\tds.add(m.onShouldPostMessage(e => sent.push(e)));\n\t});\n\n\ttest('activates on prepare', () => {\n\t\tconst activate = stub(extService, 'activateByEvent').returns(Promise.resolve());\n\t\tm.prepare('foo');\n\t\tm.prepare('foo');\n\t\tm.prepare('foo');\n\n\t\tassert.deepStrictEqual(activate.args, [['onRenderer:foo']]);\n\t});\n\n\ttest('buffers and then plays events', async () => {\n\t\tstub(extService, 'activateByEvent').returns(Promise.resolve());\n\n\t\tconst scoped = m.getScoped('some-editor');\n\t\tscoped.postMessage('foo', 1);\n\t\tscoped.postMessage('foo', 2);\n\t\tassert.deepStrictEqual(sent, []);\n\n\t\tawait timeout(0);\n\n\t\tconst expected = [\n\t\t\t{ editorId: 'some-editor', rendererId: 'foo', message: 1 },\n\t\t\t{ editorId: 'some-editor', rendererId: 'foo', message: 2 }\n\t\t];\n\n\t\tassert.deepStrictEqual(sent, expected);\n\n\t\tscoped.postMessage('foo', 3);\n\n\t\tassert.deepStrictEqual(sent, [\n\t\t\t...expected,\n\t\t\t{ editorId: 'some-editor', rendererId: 'foo', message: 3 }\n\t\t]);\n\t});\n});\n"],
  "mappings": "AAKA,SAAS,4BAA4B;AACrC,SAAS,YAAY;AACrB,SAAS,wCAAwC;AACjD,OAAO,YAAY;AACnB,SAAS,eAAe;AACxB,SAAS,+CAA+C;AAExD,MAAM,6BAA6B,MAAM;AACxC,MAAI;AACJ,MAAI;AACJ,MAAI,OAAkB,CAAC;AAEvB,QAAM,KAAK,wCAAwC;AAEnD,QAAM,MAAM;AACX,WAAO,CAAC;AACR,iBAAa,IAAI,qBAAqB;AACtC,QAAI,GAAG,IAAI,IAAI,iCAAiC,UAAU,CAAC;AAC3D,OAAG,IAAI,EAAE,oBAAoB,OAAK,KAAK,KAAK,CAAC,CAAC,CAAC;AAAA,EAChD,CAAC;AAED,OAAK,wBAAwB,MAAM;AAClC,UAAM,WAAW,KAAK,YAAY,iBAAiB,EAAE,QAAQ,QAAQ,QAAQ,CAAC;AAC9E,MAAE,QAAQ,KAAK;AACf,MAAE,QAAQ,KAAK;AACf,MAAE,QAAQ,KAAK;AAEf,WAAO,gBAAgB,SAAS,MAAM,CAAC,CAAC,gBAAgB,CAAC,CAAC;AAAA,EAC3D,CAAC;AAED,OAAK,iCAAiC,YAAY;AACjD,SAAK,YAAY,iBAAiB,EAAE,QAAQ,QAAQ,QAAQ,CAAC;AAE7D,UAAM,SAAS,EAAE,UAAU,aAAa;AACxC,WAAO,YAAY,OAAO,CAAC;AAC3B,WAAO,YAAY,OAAO,CAAC;AAC3B,WAAO,gBAAgB,MAAM,CAAC,CAAC;AAE/B,UAAM,QAAQ,CAAC;AAEf,UAAM,WAAW;AAAA,MAChB,EAAE,UAAU,eAAe,YAAY,OAAO,SAAS,EAAE;AAAA,MACzD,EAAE,UAAU,eAAe,YAAY,OAAO,SAAS,EAAE;AAAA,IAC1D;AAEA,WAAO,gBAAgB,MAAM,QAAQ;AAErC,WAAO,YAAY,OAAO,CAAC;AAE3B,WAAO,gBAAgB,MAAM;AAAA,MAC5B,GAAG;AAAA,MACH,EAAE,UAAU,eAAe,YAAY,OAAO,SAAS,EAAE;AAAA,IAC1D,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
