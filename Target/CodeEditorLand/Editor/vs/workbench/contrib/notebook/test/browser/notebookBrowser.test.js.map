{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookBrowser.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ICellViewModel } from '../../browser/notebookBrowser.js';\nimport { CellKind } from '../../common/notebookCommon.js';\nimport { ICellRange } from '../../common/notebookRange.js';\n\n/**\n * Return a set of ranges for the cells matching the given predicate\n */\nfunction getRanges(cells: ICellViewModel[], included: (cell: ICellViewModel) => boolean): ICellRange[] {\n\tconst ranges: ICellRange[] = [];\n\tlet currentRange: ICellRange | undefined;\n\n\tcells.forEach((cell, idx) => {\n\t\tif (included(cell)) {\n\t\t\tif (!currentRange) {\n\t\t\t\tcurrentRange = { start: idx, end: idx + 1 };\n\t\t\t\tranges.push(currentRange);\n\t\t\t} else {\n\t\t\t\tcurrentRange.end = idx + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentRange = undefined;\n\t\t}\n\t});\n\n\treturn ranges;\n}\n\n\nsuite('notebookBrowser', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('getRanges', function () {\n\t\tconst predicate = (cell: ICellViewModel) => cell.cellKind === CellKind.Code;\n\n\t\ttest('all code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 2 }]);\n\t\t});\n\n\t\ttest('none code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), []);\n\t\t});\n\n\t\ttest('start code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 1 }]);\n\t\t});\n\n\t\ttest('random', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 2 }, { start: 3, end: 4 }, { start: 6, end: 7 }]);\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAK3B,SAAS,UAAU,OAAyB,UAA2D;AACtG,QAAM,SAAuB,CAAC;AAC9B,MAAI;AAEJ,QAAM,QAAQ,CAAC,MAAM,QAAQ;AAC5B,QAAI,SAAS,IAAI,GAAG;AACnB,UAAI,CAAC,cAAc;AAClB,uBAAe,EAAE,OAAO,KAAK,KAAK,MAAM,EAAE;AAC1C,eAAO,KAAK,YAAY;AAAA,MACzB,OAAO;AACN,qBAAa,MAAM,MAAM;AAAA,MAC1B;AAAA,IACD,OAAO;AACN,qBAAe;AAAA,IAChB;AAAA,EACD,CAAC;AAED,SAAO;AACR;AAlBS;AAqBT,MAAM,mBAAmB,MAAM;AAC9B,0CAAwC;AAExC,QAAM,aAAa,WAAY;AAC9B,UAAM,YAAY,wBAAC,SAAyB,KAAK,aAAa,SAAS,MAArD;AAElB,SAAK,YAAY,WAAY;AAC5B,YAAM,QAAQ;AAAA,QACb,EAAE,UAAU,SAAS,KAAK;AAAA,QAC1B,EAAE,UAAU,SAAS,KAAK;AAAA,MAC3B;AACA,aAAO,gBAAgB,UAAU,OAA2B,SAAS,GAAG,CAAC,EAAE,OAAO,GAAG,KAAK,EAAE,CAAC,CAAC;AAAA,IAC/F,CAAC;AAED,SAAK,aAAa,WAAY;AAC7B,YAAM,QAAQ;AAAA,QACb,EAAE,UAAU,SAAS,OAAO;AAAA,QAC5B,EAAE,UAAU,SAAS,OAAO;AAAA,MAC7B;AACA,aAAO,gBAAgB,UAAU,OAA2B,SAAS,GAAG,CAAC,CAAC;AAAA,IAC3E,CAAC;AAED,SAAK,cAAc,WAAY;AAC9B,YAAM,QAAQ;AAAA,QACb,EAAE,UAAU,SAAS,KAAK;AAAA,QAC1B,EAAE,UAAU,SAAS,OAAO;AAAA,MAC7B;AACA,aAAO,gBAAgB,UAAU,OAA2B,SAAS,GAAG,CAAC,EAAE,OAAO,GAAG,KAAK,EAAE,CAAC,CAAC;AAAA,IAC/F,CAAC;AAED,SAAK,UAAU,WAAY;AAC1B,YAAM,QAAQ;AAAA,QACb,EAAE,UAAU,SAAS,KAAK;AAAA,QAC1B,EAAE,UAAU,SAAS,KAAK;AAAA,QAC1B,EAAE,UAAU,SAAS,OAAO;AAAA,QAC5B,EAAE,UAAU,SAAS,KAAK;AAAA,QAC1B,EAAE,UAAU,SAAS,OAAO;AAAA,QAC5B,EAAE,UAAU,SAAS,OAAO;AAAA,QAC5B,EAAE,UAAU,SAAS,KAAK;AAAA,MAC3B;AACA,aAAO,gBAAgB,UAAU,OAA2B,SAAS,GAAG,CAAC,EAAE,OAAO,GAAG,KAAK,EAAE,GAAG,EAAE,OAAO,GAAG,KAAK,EAAE,GAAG,EAAE,OAAO,GAAG,KAAK,EAAE,CAAC,CAAC;AAAA,IAC3I,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
