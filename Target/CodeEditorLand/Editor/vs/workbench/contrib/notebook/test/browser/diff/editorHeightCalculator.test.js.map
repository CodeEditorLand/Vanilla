{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/diff/editorHeightCalculator.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore, IReference } from '../../../../../../base/common/lifecycle.js';\nimport { mock } from '../../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\nimport { TestConfigurationService } from '../../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { DiffEditorHeightCalculatorService } from '../../../browser/diff/editorHeightCalculator.js';\nimport { FontInfo } from '../../../../../../editor/common/config/fontInfo.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../../../editor/common/services/resolverService.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { createTextModel as createTextModelWithText } from '../../../../../../editor/test/common/testTextModel.js';\nimport { ITextModel } from '../../../../../../editor/common/model.js';\nimport { DefaultLinesDiffComputer } from '../../../../../../editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { DiffAlgorithmName, IEditorWorkerService } from '../../../../../../editor/common/services/editorWorker.js';\nimport { IDocumentDiffProviderOptions, IDocumentDiff } from '../../../../../../editor/common/diff/documentDiffProvider.js';\nimport { getEditorPadding } from '../../../browser/diff/diffCellEditorOptions.js';\nimport { HeightOfHiddenLinesRegionInDiffEditor } from '../../../browser/diff/diffElementViewModel.js';\n\nsuite('NotebookDiff EditorHeightCalculator', () => {\n\t['Hide Unchanged Regions', 'Show Unchanged Regions'].forEach(suiteTitle => {\n\t\tsuite(suiteTitle, () => {\n\t\t\tconst fontInfo: FontInfo = { lineHeight: 18, fontSize: 18 } as any;\n\t\t\tlet disposables: DisposableStore;\n\t\t\tlet textModelResolver: ITextModelService;\n\t\t\tlet editorWorkerService: IEditorWorkerService;\n\t\t\tconst original: URI = URI.parse('original');\n\t\t\tconst modified: URI = URI.parse('modified');\n\t\t\tlet originalModel: ITextModel;\n\t\t\tlet modifiedModel: ITextModel;\n\t\t\tconst diffComputer = new DefaultLinesDiffComputer();\n\t\t\tlet calculator: DiffEditorHeightCalculatorService;\n\t\t\tconst hideUnchangedRegions = suiteTitle.startsWith('Hide');\n\t\t\tconst configurationService = new TestConfigurationService({\n\t\t\t\tnotebook: { diff: { ignoreMetadata: true } }, diffEditor: {\n\t\t\t\t\thideUnchangedRegions: {\n\t\t\t\t\t\tenabled: hideUnchangedRegions, minimumLineCount: 3, contextLineCount: 3\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction createTextModel(lines: string[]): ITextModel {\n\t\t\t\treturn createTextModelWithText(lines.join('\\n'));\n\t\t\t}\n\n\t\t\tteardown(() => disposables.dispose());\n\t\t\tensureNoDisposablesAreLeakedInTestSuite();\n\n\t\t\tsetup(() => {\n\t\t\t\tdisposables = new DisposableStore();\n\t\t\t\ttextModelResolver = new class extends mock<ITextModelService>() {\n\t\t\t\t\toverride async createModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdispose: () => { },\n\t\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\t\ttextEditorModel: resource === original ? originalModel : modifiedModel,\n\t\t\t\t\t\t\t\tgetLanguageId: () => 'javascript',\n\t\t\t\t\t\t\t} as any\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\teditorWorkerService = new class extends mock<IEditorWorkerService>() {\n\t\t\t\t\toverride async computeDiff(_original: URI, _modified: URI, options: IDocumentDiffProviderOptions, _algorithm: DiffAlgorithmName): Promise<IDocumentDiff | null> {\n\t\t\t\t\t\tconst originalLines = new Array(originalModel.getLineCount()).fill(0).map((_, i) => originalModel.getLineContent(i + 1));\n\t\t\t\t\t\tconst modifiedLines = new Array(modifiedModel.getLineCount()).fill(0).map((_, i) => modifiedModel.getLineContent(i + 1));\n\t\t\t\t\t\tconst result = diffComputer.computeDiff(originalLines, modifiedLines, options);\n\t\t\t\t\t\tconst identical = originalLines.join('') === modifiedLines.join('');\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tidentical,\n\t\t\t\t\t\t\tquitEarly: result.hitTimeout,\n\t\t\t\t\t\t\tchanges: result.changes,\n\t\t\t\t\t\t\tmoves: result.moves,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tcalculator = new DiffEditorHeightCalculatorService(fontInfo.lineHeight, textModelResolver, editorWorkerService, configurationService);\n\t\t\t});\n\n\t\t\ttest('1 original line with change in same line', async () => {\n\t\t\t\toriginalModel = disposables.add(createTextModel(['Hello World']));\n\t\t\t\tmodifiedModel = disposables.add(createTextModel(['Foo Bar']));\n\n\t\t\t\tconst height = await calculator.diffAndComputeHeight(original, modified);\n\t\t\t\tconst expectedHeight = getExpectedHeight(1, 0);\n\n\t\t\t\tassert.strictEqual(height, expectedHeight);\n\t\t\t});\n\n\t\t\ttest('1 original line with insertion of a new line', async () => {\n\t\t\t\toriginalModel = disposables.add(createTextModel(['Hello World']));\n\t\t\t\tmodifiedModel = disposables.add(createTextModel(['Hello World', 'Foo Bar']));\n\n\t\t\t\tconst height = await calculator.diffAndComputeHeight(original, modified);\n\t\t\t\tconst expectedHeight = getExpectedHeight(2, 0);\n\n\t\t\t\tassert.strictEqual(height, expectedHeight);\n\t\t\t});\n\n\t\t\ttest('1 line with update to a line and insert of a new line', async () => {\n\t\t\t\toriginalModel = disposables.add(createTextModel(['Hello World']));\n\t\t\t\tmodifiedModel = disposables.add(createTextModel(['Foo Bar', 'Bar Baz']));\n\n\t\t\t\tconst height = await calculator.diffAndComputeHeight(original, modified);\n\t\t\t\tconst expectedHeight = getExpectedHeight(2, 0);\n\n\t\t\t\tassert.strictEqual(height, expectedHeight);\n\t\t\t});\n\n\t\t\ttest('10 line with update to a line and insert of a new line', async () => {\n\t\t\t\toriginalModel = disposables.add(createTextModel(createLines(10)));\n\t\t\t\tmodifiedModel = disposables.add(createTextModel(createLines(10).concat('Foo Bar')));\n\n\t\t\t\tconst height = await calculator.diffAndComputeHeight(original, modified);\n\t\t\t\tconst expectedHeight = getExpectedHeight(hideUnchangedRegions ? 4 : 11, hideUnchangedRegions ? 1 : 0);\n\n\t\t\t\tassert.strictEqual(height, expectedHeight);\n\t\t\t});\n\n\t\t\ttest('50 lines with updates, deletions and inserts', async () => {\n\t\t\t\toriginalModel = disposables.add(createTextModel(createLines(60)));\n\t\t\t\tconst modifiedLines = createLines(60);\n\t\t\t\tmodifiedLines[3] = 'Foo Bar';\n\t\t\t\tmodifiedLines.splice(7, 3);\n\t\t\t\tmodifiedLines.splice(10, 0, 'Foo Bar1', 'Foo Bar2', 'Foo Bar3');\n\t\t\t\tmodifiedLines.splice(30, 0, '', '');\n\t\t\t\tmodifiedLines.splice(40, 4);\n\t\t\t\tmodifiedLines.splice(50, 0, '1', '2', '3', '4', '5');\n\n\t\t\t\tmodifiedModel = disposables.add(createTextModel(modifiedLines));\n\n\t\t\t\tconst height = await calculator.diffAndComputeHeight(original, modified);\n\t\t\t\tconst expectedHeight = getExpectedHeight(hideUnchangedRegions ? 50 : 70, hideUnchangedRegions ? 3 : 0);\n\n\t\t\t\tassert.strictEqual(height, expectedHeight);\n\t\t\t});\n\n\t\t\tfunction getExpectedHeight(visibleLineCount: number, unchangeRegionsHeight: number): number {\n\t\t\t\treturn (visibleLineCount * fontInfo.lineHeight) + getEditorPadding(visibleLineCount).top + getEditorPadding(visibleLineCount).bottom + (unchangeRegionsHeight * HeightOfHiddenLinesRegionInDiffEditor);\n\t\t\t}\n\n\t\t\tfunction createLines(count: number, linePrefix = 'Hello World'): string[] {\n\t\t\t\treturn new Array(count).fill(0).map((_, i) => `${linePrefix} ${i}`);\n\t\t\t}\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,iBAAiB,kBAAkB;AAC5C,SAAS,YAAY;AACrB,SAAS,+CAA+C;AACxD,SAAS,gCAAgC;AACzC,SAAS,yCAAyC;AAClD,SAAS,gBAAgB;AACzB,SAAS,0BAA0B,yBAAyB;AAC5D,SAAS,WAAW;AACpB,SAAS,mBAAmB,+BAA+B;AAC3D,SAAS,kBAAkB;AAC3B,SAAS,gCAAgC;AACzC,SAAS,mBAAmB,4BAA4B;AACxD,SAAS,8BAA8B,qBAAqB;AAC5D,SAAS,wBAAwB;AACjC,SAAS,6CAA6C;AAEtD,MAAM,uCAAuC,MAAM;AAClD,GAAC,0BAA0B,wBAAwB,EAAE,QAAQ,gBAAc;AAC1E,UAAM,YAAY,MAAM;AACvB,YAAM,WAAqB,EAAE,YAAY,IAAI,UAAU,GAAG;AAC1D,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,YAAM,WAAgB,IAAI,MAAM,UAAU;AAC1C,YAAM,WAAgB,IAAI,MAAM,UAAU;AAC1C,UAAI;AACJ,UAAI;AACJ,YAAM,eAAe,IAAI,yBAAyB;AAClD,UAAI;AACJ,YAAM,uBAAuB,WAAW,WAAW,MAAM;AACzD,YAAM,uBAAuB,IAAI,yBAAyB;AAAA,QACzD,UAAU,EAAE,MAAM,EAAE,gBAAgB,KAAK,EAAE;AAAA,QAAG,YAAY;AAAA,UACzD,sBAAsB;AAAA,YACrB,SAAS;AAAA,YAAsB,kBAAkB;AAAA,YAAG,kBAAkB;AAAA,UACvE;AAAA,QACD;AAAA,MACD,CAAC;AAED,eAAS,gBAAgB,OAA6B;AACrD,eAAO,wBAAwB,MAAM,KAAK,IAAI,CAAC;AAAA,MAChD;AAFS;AAIT,eAAS,MAAM,YAAY,QAAQ,CAAC;AACpC,8CAAwC;AAExC,YAAM,MAAM;AACX,sBAAc,IAAI,gBAAgB;AAClC,4BAAoB,IAAI,cAAc,KAAwB,EAAE;AAAA,UAC/D,MAAe,qBAAqB,UAA8D;AACjG,mBAAO;AAAA,cACN,SAAS,6BAAM;AAAA,cAAE,GAAR;AAAA,cACT,QAAQ;AAAA,gBACP,iBAAiB,aAAa,WAAW,gBAAgB;AAAA,gBACzD,eAAe,6BAAM,cAAN;AAAA,cAChB;AAAA,YACD;AAAA,UACD;AAAA,QACD;AACA,8BAAsB,IAAI,cAAc,KAA2B,EAAE;AAAA,UACpE,MAAe,YAAY,WAAgB,WAAgB,SAAuC,YAA8D;AAC/J,kBAAM,gBAAgB,IAAI,MAAM,cAAc,aAAa,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM,cAAc,eAAe,IAAI,CAAC,CAAC;AACvH,kBAAM,gBAAgB,IAAI,MAAM,cAAc,aAAa,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM,cAAc,eAAe,IAAI,CAAC,CAAC;AACvH,kBAAM,SAAS,aAAa,YAAY,eAAe,eAAe,OAAO;AAC7E,kBAAM,YAAY,cAAc,KAAK,EAAE,MAAM,cAAc,KAAK,EAAE;AAElE,mBAAO;AAAA,cACN;AAAA,cACA,WAAW,OAAO;AAAA,cAClB,SAAS,OAAO;AAAA,cAChB,OAAO,OAAO;AAAA,YACf;AAAA,UAED;AAAA,QACD;AACA,qBAAa,IAAI,kCAAkC,SAAS,YAAY,mBAAmB,qBAAqB,oBAAoB;AAAA,MACrI,CAAC;AAED,WAAK,4CAA4C,YAAY;AAC5D,wBAAgB,YAAY,IAAI,gBAAgB,CAAC,aAAa,CAAC,CAAC;AAChE,wBAAgB,YAAY,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC;AAE5D,cAAM,SAAS,MAAM,WAAW,qBAAqB,UAAU,QAAQ;AACvE,cAAM,iBAAiB,kBAAkB,GAAG,CAAC;AAE7C,eAAO,YAAY,QAAQ,cAAc;AAAA,MAC1C,CAAC;AAED,WAAK,gDAAgD,YAAY;AAChE,wBAAgB,YAAY,IAAI,gBAAgB,CAAC,aAAa,CAAC,CAAC;AAChE,wBAAgB,YAAY,IAAI,gBAAgB,CAAC,eAAe,SAAS,CAAC,CAAC;AAE3E,cAAM,SAAS,MAAM,WAAW,qBAAqB,UAAU,QAAQ;AACvE,cAAM,iBAAiB,kBAAkB,GAAG,CAAC;AAE7C,eAAO,YAAY,QAAQ,cAAc;AAAA,MAC1C,CAAC;AAED,WAAK,yDAAyD,YAAY;AACzE,wBAAgB,YAAY,IAAI,gBAAgB,CAAC,aAAa,CAAC,CAAC;AAChE,wBAAgB,YAAY,IAAI,gBAAgB,CAAC,WAAW,SAAS,CAAC,CAAC;AAEvE,cAAM,SAAS,MAAM,WAAW,qBAAqB,UAAU,QAAQ;AACvE,cAAM,iBAAiB,kBAAkB,GAAG,CAAC;AAE7C,eAAO,YAAY,QAAQ,cAAc;AAAA,MAC1C,CAAC;AAED,WAAK,0DAA0D,YAAY;AAC1E,wBAAgB,YAAY,IAAI,gBAAgB,YAAY,EAAE,CAAC,CAAC;AAChE,wBAAgB,YAAY,IAAI,gBAAgB,YAAY,EAAE,EAAE,OAAO,SAAS,CAAC,CAAC;AAElF,cAAM,SAAS,MAAM,WAAW,qBAAqB,UAAU,QAAQ;AACvE,cAAM,iBAAiB,kBAAkB,uBAAuB,IAAI,IAAI,uBAAuB,IAAI,CAAC;AAEpG,eAAO,YAAY,QAAQ,cAAc;AAAA,MAC1C,CAAC;AAED,WAAK,gDAAgD,YAAY;AAChE,wBAAgB,YAAY,IAAI,gBAAgB,YAAY,EAAE,CAAC,CAAC;AAChE,cAAM,gBAAgB,YAAY,EAAE;AACpC,sBAAc,CAAC,IAAI;AACnB,sBAAc,OAAO,GAAG,CAAC;AACzB,sBAAc,OAAO,IAAI,GAAG,YAAY,YAAY,UAAU;AAC9D,sBAAc,OAAO,IAAI,GAAG,IAAI,EAAE;AAClC,sBAAc,OAAO,IAAI,CAAC;AAC1B,sBAAc,OAAO,IAAI,GAAG,KAAK,KAAK,KAAK,KAAK,GAAG;AAEnD,wBAAgB,YAAY,IAAI,gBAAgB,aAAa,CAAC;AAE9D,cAAM,SAAS,MAAM,WAAW,qBAAqB,UAAU,QAAQ;AACvE,cAAM,iBAAiB,kBAAkB,uBAAuB,KAAK,IAAI,uBAAuB,IAAI,CAAC;AAErG,eAAO,YAAY,QAAQ,cAAc;AAAA,MAC1C,CAAC;AAED,eAAS,kBAAkB,kBAA0B,uBAAuC;AAC3F,eAAQ,mBAAmB,SAAS,aAAc,iBAAiB,gBAAgB,EAAE,MAAM,iBAAiB,gBAAgB,EAAE,SAAU,wBAAwB;AAAA,MACjK;AAFS;AAIT,eAAS,YAAY,OAAe,aAAa,eAAyB;AACzE,eAAO,IAAI,MAAM,KAAK,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM,GAAG,UAAU,IAAI,CAAC,EAAE;AAAA,MACnE;AAFS;AAAA,IAGV,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
