import l from"assert";import"../../../../../../base/browser/ui/tree/tree.js";import{CancellationToken as h}from"../../../../../../base/common/cancellation.js";import"../../../../../../base/common/lifecycle.js";import{mock as g}from"../../../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as x}from"../../../../../../base/test/common/utils.js";import"../../../../../../editor/common/model.js";import"../../../../../../editor/contrib/documentSymbols/browser/outlineModel.js";import{TestConfigurationService as I}from"../../../../../../platform/configuration/test/common/testConfigurationService.js";import{TestThemeService as N}from"../../../../../../platform/theme/test/common/testThemeService.js";import{NotebookBreadcrumbsProvider as p,NotebookOutlinePaneProvider as v,NotebookQuickPickProvider as O}from"../../../browser/contrib/outline/notebookOutline.js";import"../../../browser/notebookBrowser.js";import"../../../browser/viewModel/notebookOutlineDataSource.js";import{NotebookOutlineEntryFactory as S}from"../../../browser/viewModel/notebookOutlineEntryFactory.js";import{OutlineEntry as k}from"../../../browser/viewModel/OutlineEntry.js";import"../../../common/notebookExecutionStateService.js";import"../testNotebookEditor.js";suite("Notebook Outline View Providers",function(){const f=x(),d=new I,$=new N,P={};function r(o,t="textId"){P[t]=o}const m=new class extends g(){getCellExecution(){}};class E{constructor(t){this.textId=t}getTopLevelSymbols(){return P[this.textId]}}const w=new class extends g(){getOrCreate(o,t){const a=new E(o.id);return Promise.resolve(a)}getDebounceValue(o){return 0}};function s(o=1,t="# code",a="textId"){return{textBuffer:{getLineCount(){return 0}},getText(){return t},model:{textModel:{id:a,getVersionId(){return o}}},resolveTextModel(){return this.model.textModel},cellKind:2}}function y(o,t=void 0){return new class extends g(){object={entries:o,activeElement:t}}}function u(o=1,t="markup",a="textId",c=1){return{textBuffer:{getLineCount(){return 0}},getText(){return t},getAlternativeId(){return c},model:{textModel:{id:a,getVersionId(){return o}}},resolveTextModel(){return this.model.textModel},cellKind:1}}function C(o,t){const a=[],c=t.getChildren(o);for(const e of c)a.push(e),a.push(...C(e,t));return a}function M(o){if(o.length>0){const t=[o[0]],a=[o[0]];for(let c=1;c<o.length;c++){const e=o[c];for(;;){const n=a.length;if(n===0){t.push(e),a.push(e);break}else{const i=a[n-1];if(i.level<e.level){i.addChild(e),a.push(e);break}else a.pop()}}}return t}}async function b(o){await d.setUserConfiguration("notebook.outline.showMarkdownHeadersOnly",o.outlineShowMarkdownHeadersOnly),await d.setUserConfiguration("notebook.outline.showCodeCells",o.outlineShowCodeCells),await d.setUserConfiguration("notebook.outline.showCodeCellSymbols",o.outlineShowCodeCellSymbols),await d.setUserConfiguration("notebook.gotoSymbols.showAllSymbols",o.quickPickShowAllSymbols),await d.setUserConfiguration("notebook.breadcrumbs.showCodeCells",o.breadcrumbsShowCodeCells)}test("OutlinePane 0: Default Settings (Headers Only ON, Code cells OFF, Symbols ON)",async function(){await b({outlineShowMarkdownHeadersOnly:!0,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!0,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{}}],"$2"),r([{name:"var3",range:{}}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const c=f.add(new v(void 0,d)),e=C(a,c);l.equal(e.length,1),l.equal(e[0].label,"h1"),l.equal(e[0].level,1)}),test("OutlinePane 1: ALL Markdown",async function(){await b({outlineShowMarkdownHeadersOnly:!1,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{}}],"$2"),r([{name:"var3",range:{}}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const c=f.add(new v(void 0,d)),e=C(a,c);l.equal(e.length,2),l.equal(e[0].label,"h1"),l.equal(e[0].level,1),l.equal(e[1].label,"plaintext"),l.equal(e[1].level,7)}),test("OutlinePane 2: Only Headers",async function(){await b({outlineShowMarkdownHeadersOnly:!0,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{}}],"$2"),r([{name:"var3",range:{}}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const c=f.add(new v(void 0,d)),e=C(a,c);l.equal(e.length,1),l.equal(e[0].label,"h1"),l.equal(e[0].level,1)}),test("OutlinePane 3: Only Headers + Code Cells",async function(){await b({outlineShowMarkdownHeadersOnly:!0,outlineShowCodeCells:!0,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{}}],"$2"),r([{name:"var3",range:{}}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const c=f.add(new v(void 0,d)),e=C(a,c);l.equal(e.length,3),l.equal(e[0].label,"h1"),l.equal(e[0].level,1),l.equal(e[1].label,"# code cell 2"),l.equal(e[1].level,7),l.equal(e[2].label,"# code cell 3"),l.equal(e[2].level,7)}),test("OutlinePane 4: Only Headers + Code Cells + Symbols",async function(){await b({outlineShowMarkdownHeadersOnly:!0,outlineShowCodeCells:!0,outlineShowCodeCellSymbols:!0,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{}}],"$2"),r([{name:"var3",range:{}}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const c=f.add(new v(void 0,d)),e=C(a,c);l.equal(e.length,5),l.equal(e[0].label,"h1"),l.equal(e[0].level,1),l.equal(e[1].label,"# code cell 2"),l.equal(e[1].level,7),l.equal(e[2].label,"var2"),l.equal(e[2].level,8),l.equal(e[3].label,"# code cell 3"),l.equal(e[3].level,7),l.equal(e[4].label,"var3"),l.equal(e[4].level,8)}),test("QuickPick 0: Symbols On + 2 cells WITH symbols",async function(){await b({outlineShowMarkdownHeadersOnly:!1,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!0,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{},kind:12}],"$2"),r([{name:"var3",range:{},kind:12}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const e=f.add(new O(y([...a.children]),d,$)).getQuickPickElements();l.equal(e.length,4),l.equal(e[0].label,"$(markdown) h1"),l.equal(e[0].element.level,1),l.equal(e[1].label,"$(markdown) plaintext"),l.equal(e[1].element.level,7),l.equal(e[2].label,"$(symbol-variable) var2"),l.equal(e[2].element.level,8),l.equal(e[3].label,"$(symbol-variable) var3"),l.equal(e[3].element.level,8)}),test("QuickPick 1: Symbols On + 1 cell WITH symbol + 1 cell WITHOUT symbol",async function(){await b({outlineShowMarkdownHeadersOnly:!1,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!0,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([],"$2"),r([{name:"var3",range:{},kind:12}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const e=f.add(new O(y([...a.children]),d,$)).getQuickPickElements();l.equal(e.length,4),l.equal(e[0].label,"$(markdown) h1"),l.equal(e[0].element.level,1),l.equal(e[1].label,"$(markdown) plaintext"),l.equal(e[1].element.level,7),l.equal(e[2].label,"$(code) # code cell 2"),l.equal(e[2].element.level,7),l.equal(e[3].label,"$(symbol-variable) var3"),l.equal(e[3].element.level,8)}),test("QuickPick 3: Symbols Off",async function(){await b({outlineShowMarkdownHeadersOnly:!1,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{},kind:12}],"$2"),r([{name:"var3",range:{},kind:12}],"$3");const t=new S(m);for(const n of o)await t.cacheSymbols(n,w,h.None);const a=new k(-1,-1,s(),"fakeRoot",!1,!1,void 0,void 0);for(const n of o)t.getOutlineEntries(n,0).forEach(i=>a.addChild(i));const e=f.add(new O(y([...a.children]),d,$)).getQuickPickElements();l.equal(e.length,4),l.equal(e[0].label,"$(markdown) h1"),l.equal(e[0].element.level,1),l.equal(e[1].label,"$(markdown) plaintext"),l.equal(e[1].element.level,7),l.equal(e[2].label,"$(code) # code cell 2"),l.equal(e[2].element.level,7),l.equal(e[3].label,"$(code) # code cell 3"),l.equal(e[3].element.level,7)}),test("Breadcrumbs 0: Code Cells On ",async function(){await b({outlineShowMarkdownHeadersOnly:!1,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!0});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{},kind:12}],"$2"),r([{name:"var3",range:{},kind:12}],"$3");const t=new S(m);for(const i of o)await t.cacheSymbols(i,w,h.None);const a=new k(-1,-1,u(),"fakeRoot",!1,!1,void 0,void 0);for(const i of o)t.getOutlineEntries(i,0).forEach(q=>a.addChild(q));const c=M([...a.children]),n=f.add(new p(y([],[...c[0].children][1]),d)).getBreadcrumbElements();l.equal(n.length,3),l.equal(n[0].label,"fakeRoot"),l.equal(n[0].level,-1),l.equal(n[1].label,"h1"),l.equal(n[1].level,1),l.equal(n[2].label,"# code cell 2"),l.equal(n[2].level,7)}),test("Breadcrumbs 1: Code Cells Off ",async function(){await b({outlineShowMarkdownHeadersOnly:!1,outlineShowCodeCells:!1,outlineShowCodeCellSymbols:!1,quickPickShowAllSymbols:!1,breadcrumbsShowCodeCells:!1});const o=[u(1,"# h1","$0",0),u(1,"plaintext","$1",0),s(1,"# code cell 2","$2"),s(1,"# code cell 3","$3")];r([],"$0"),r([],"$1"),r([{name:"var2",range:{},kind:12}],"$2"),r([{name:"var3",range:{},kind:12}],"$3");const t=new S(m);for(const i of o)await t.cacheSymbols(i,w,h.None);const a=new k(-1,-1,u(),"fakeRoot",!1,!1,void 0,void 0);for(const i of o)t.getOutlineEntries(i,0).forEach(q=>a.addChild(q));const c=M([...a.children]),n=f.add(new p(y([],[...c[0].children][1]),d)).getBreadcrumbElements();l.equal(n.length,2),l.equal(n[0].label,"fakeRoot"),l.equal(n[0].level,-1),l.equal(n[1].label,"h1"),l.equal(n[1].level,1)})});
