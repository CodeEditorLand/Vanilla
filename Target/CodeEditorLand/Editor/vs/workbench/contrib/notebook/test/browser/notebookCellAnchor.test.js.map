{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookCellAnchor.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ScrollEvent } from '../../../../../base/common/scrollable.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { CellFocusMode } from '../../browser/notebookBrowser.js';\nimport { NotebookCellAnchor } from '../../browser/view/notebookCellAnchor.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { INotebookExecutionStateService } from '../../common/notebookExecutionStateService.js';\nimport { CellKind, NotebookCellExecutionState, NotebookSetting } from '../../common/notebookCommon.js';\nimport { CodeCellViewModel } from '../../browser/viewModel/codeCellViewModel.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IListView } from '../../../../../base/browser/ui/list/listView.js';\n\n\nsuite('NotebookCellAnchor', () => {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet focusedCell: CodeCellViewModel;\n\tlet config: TestConfigurationService;\n\tlet scrollEvent: Emitter<ScrollEvent>;\n\tlet onDidStopExecution: Emitter<void>;\n\tlet resizingCell: CodeCellViewModel;\n\n\tlet cellAnchor: NotebookCellAnchor;\n\n\tsetup(() => {\n\t\tconfig = new TestConfigurationService();\n\t\tscrollEvent = new Emitter<ScrollEvent>();\n\t\tonDidStopExecution = new Emitter<void>();\n\n\t\tconst executionService = {\n\t\t\tgetCellExecution: () => { return { state: NotebookCellExecutionState.Executing }; },\n\t\t} as unknown as INotebookExecutionStateService;\n\n\t\tresizingCell = {\n\t\t\tcellKind: CellKind.Code,\n\t\t\tonDidStopExecution: onDidStopExecution.event\n\t\t} as unknown as CodeCellViewModel;\n\n\t\tfocusedCell = {\n\t\t\tfocusMode: CellFocusMode.Container\n\t\t} as CodeCellViewModel;\n\n\t\tcellAnchor = store.add(new NotebookCellAnchor(executionService, config, scrollEvent.event));\n\t});\n\n\t// for the current implementation the code under test only cares about the focused cell\n\t// initial setup with focused cell at the bottom of the view\n\tclass MockListView {\n\t\tfocusedCellTop = 100;\n\t\tfocusedCellHeight = 50;\n\t\trenderTop = 0;\n\t\trenderHeight = 150;\n\t\telement(_index: number) { return focusedCell; }\n\t\telementTop(_index: number) { return this.focusedCellTop; }\n\t\telementHeight(_index: number) { return this.focusedCellHeight; }\n\t\tgetScrollTop() { return this.renderTop; }\n\t}\n\n\ttest('Basic anchoring', async function () {\n\n\t\tfocusedCell.focusMode = CellFocusMode.Editor;\n\t\tconst listView = new MockListView() as unknown as IListView<CodeCellViewModel>;\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, -10, resizingCell), 'should anchor if cell editor is focused');\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'should anchor if cell editor is focused');\n\t\tconfig.setUserConfiguration(NotebookSetting.scrollToRevealCell, 'none');\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'should anchor if cell editor is focused');\n\n\t\tconfig.setUserConfiguration(NotebookSetting.scrollToRevealCell, 'fullCell');\n\t\tfocusedCell.focusMode = CellFocusMode.Container;\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'should anchor if cell is growing');\n\t\tfocusedCell.focusMode = CellFocusMode.Output;\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'should anchor if cell is growing');\n\n\t\tassert(!cellAnchor.shouldAnchor(listView, 1, -10, resizingCell), 'should not anchor if not growing and editor not focused');\n\n\t\tconfig.setUserConfiguration(NotebookSetting.scrollToRevealCell, 'none');\n\t\tassert(!cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'should not anchor if scroll on execute is disabled');\n\t});\n\n\ttest('Anchor during execution until user scrolls up', async function () {\n\t\tconst listView = new MockListView() as unknown as IListView<CodeCellViewModel>;\n\t\tconst scrollDown = { oldScrollTop: 100, scrollTop: 150 } as ScrollEvent;\n\t\tconst scrollUp = { oldScrollTop: 200, scrollTop: 150 } as ScrollEvent;\n\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell));\n\n\t\tscrollEvent.fire(scrollDown);\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'cell should still be anchored after scrolling down');\n\n\t\tscrollEvent.fire(scrollUp);\n\t\tassert(!cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'cell should not be anchored after scrolling up');\n\t\tfocusedCell.focusMode = CellFocusMode.Editor;\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'cell should anchor again if the editor is focused');\n\t\tfocusedCell.focusMode = CellFocusMode.Container;\n\n\t\tonDidStopExecution.fire();\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'cell should anchor for new execution');\n\t});\n\n\ttest('Only anchor during when the focused cell will be pushed out of view', async function () {\n\t\tconst mockListView = new MockListView();\n\t\tmockListView.focusedCellTop = 50;\n\t\tconst listView = mockListView as unknown as IListView<CodeCellViewModel>;\n\n\t\tassert(!cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'should not anchor if focused cell will still be fully visible after resize');\n\t\tfocusedCell.focusMode = CellFocusMode.Editor;\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'cell should always anchor if the editor is focused');\n\n\t\t// fully visible focused cell would be pushed partially out of view\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 150, resizingCell), 'cell should be anchored if focused cell will be pushed out of view');\n\t\tmockListView.focusedCellTop = 110;\n\t\t// partially visible focused cell would be pushed further out of view\n\t\tassert(cellAnchor.shouldAnchor(listView, 1, 10, resizingCell), 'cell should be anchored if focused cell will be pushed out of view');\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,mBAAmB;AAC5B,SAAS,gCAAgC;AACzC,SAAS,qBAAqB;AAC9B,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,sCAAsC;AAC/C,SAAS,UAAU,4BAA4B,uBAAuB;AACtE,SAAS,yBAAyB;AAClC,SAAS,+CAA+C;AACxD,SAAS,iBAAiB;AAG1B,MAAM,sBAAsB,MAAM;AAEjC,QAAM,QAAQ,wCAAwC;AACtD,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,MAAI;AAEJ,QAAM,MAAM;AACX,aAAS,IAAI,yBAAyB;AACtC,kBAAc,IAAI,QAAqB;AACvC,yBAAqB,IAAI,QAAc;AAEvC,UAAM,mBAAmB;AAAA,MACxB,kBAAkB,6BAAM;AAAE,eAAO,EAAE,OAAO,2BAA2B,UAAU;AAAA,MAAG,GAAhE;AAAA,IACnB;AAEA,mBAAe;AAAA,MACd,UAAU,SAAS;AAAA,MACnB,oBAAoB,mBAAmB;AAAA,IACxC;AAEA,kBAAc;AAAA,MACb,WAAW,cAAc;AAAA,IAC1B;AAEA,iBAAa,MAAM,IAAI,IAAI,mBAAmB,kBAAkB,QAAQ,YAAY,KAAK,CAAC;AAAA,EAC3F,CAAC;AAAA,EAID,MAAM,aAAa;AAAA,IApDpB,OAoDoB;AAAA;AAAA;AAAA,IAClB,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,QAAQ,QAAgB;AAAE,aAAO;AAAA,IAAa;AAAA,IAC9C,WAAW,QAAgB;AAAE,aAAO,KAAK;AAAA,IAAgB;AAAA,IACzD,cAAc,QAAgB;AAAE,aAAO,KAAK;AAAA,IAAmB;AAAA,IAC/D,eAAe;AAAE,aAAO,KAAK;AAAA,IAAW;AAAA,EACzC;AAEA,OAAK,mBAAmB,iBAAkB;AAEzC,gBAAY,YAAY,cAAc;AACtC,UAAM,WAAW,IAAI,aAAa;AAClC,WAAO,WAAW,aAAa,UAAU,GAAG,KAAK,YAAY,GAAG,yCAAyC;AACzG,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,yCAAyC;AACxG,WAAO,qBAAqB,gBAAgB,oBAAoB,MAAM;AACtE,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,yCAAyC;AAExG,WAAO,qBAAqB,gBAAgB,oBAAoB,UAAU;AAC1E,gBAAY,YAAY,cAAc;AACtC,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,kCAAkC;AACjG,gBAAY,YAAY,cAAc;AACtC,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,kCAAkC;AAEjG,WAAO,CAAC,WAAW,aAAa,UAAU,GAAG,KAAK,YAAY,GAAG,yDAAyD;AAE1H,WAAO,qBAAqB,gBAAgB,oBAAoB,MAAM;AACtE,WAAO,CAAC,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,oDAAoD;AAAA,EACrH,CAAC;AAED,OAAK,iDAAiD,iBAAkB;AACvE,UAAM,WAAW,IAAI,aAAa;AAClC,UAAM,aAAa,EAAE,cAAc,KAAK,WAAW,IAAI;AACvD,UAAM,WAAW,EAAE,cAAc,KAAK,WAAW,IAAI;AAErD,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,CAAC;AAE7D,gBAAY,KAAK,UAAU;AAC3B,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,oDAAoD;AAEnH,gBAAY,KAAK,QAAQ;AACzB,WAAO,CAAC,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,gDAAgD;AAChH,gBAAY,YAAY,cAAc;AACtC,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,mDAAmD;AAClH,gBAAY,YAAY,cAAc;AAEtC,uBAAmB,KAAK;AACxB,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,sCAAsC;AAAA,EACtG,CAAC;AAED,OAAK,uEAAuE,iBAAkB;AAC7F,UAAM,eAAe,IAAI,aAAa;AACtC,iBAAa,iBAAiB;AAC9B,UAAM,WAAW;AAEjB,WAAO,CAAC,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,4EAA4E;AAC5I,gBAAY,YAAY,cAAc;AACtC,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,oDAAoD;AAGnH,WAAO,WAAW,aAAa,UAAU,GAAG,KAAK,YAAY,GAAG,oEAAoE;AACpI,iBAAa,iBAAiB;AAE9B,WAAO,WAAW,aAAa,UAAU,GAAG,IAAI,YAAY,GAAG,oEAAoE;AAAA,EACpI,CAAC;AACF,CAAC;",
  "names": []
}
