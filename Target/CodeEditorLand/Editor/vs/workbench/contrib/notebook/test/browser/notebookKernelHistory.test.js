import a from"assert";import{URI as v}from"../../../../../base/common/uri.js";import{ExtensionIdentifier as E}from"../../../../../platform/extensions/common/extensions.js";import{setupInstantiationService as y}from"./testNotebookEditor.js";import{Emitter as h,Event as s}from"../../../../../base/common/event.js";import{INotebookKernelService as N}from"../../common/notebookKernelService.js";import{NotebookKernelService as C}from"../../browser/services/notebookKernelServiceImpl.js";import{INotebookService as w}from"../../common/notebookService.js";import{mock as l}from"../../../../../base/test/common/mock.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{DisposableStore as V}from"../../../../../base/common/lifecycle.js";import"../../common/model/notebookTextModel.js";import{PLAINTEXT_LANGUAGE_ID as T}from"../../../../../editor/common/languages/modesRegistry.js";import{IMenuService as D}from"../../../../../platform/actions/common/actions.js";import{NotebookKernelHistoryService as k}from"../../browser/services/notebookKernelHistoryServiceImpl.js";import{IStorageService as f}from"../../../../../platform/storage/common/storage.js";import{INotebookLoggingService as m}from"../../common/notebookLoggingService.js";import{ensureNoDisposablesAreLeakedInTestSuite as K}from"../../../../../base/test/common/utils.js";import"../../../../../base/common/cancellation.js";import{AsyncIterableObject as A}from"../../../../../base/common/async.js";suite("NotebookKernelHistoryService",()=>{let o,e,t,u;teardown(()=>{o.dispose()}),K(),setup(function(){o=new V,u=new h,o.add(u),e=y(o),e.stub(w,new class extends l(){onDidAddNotebookDocument=u.event;onWillRemoveNotebookDocument=s.None;getNotebookTextModels(){return[]}}),e.stub(D,new class extends l(){createMenu(){return new class extends l(){onDidChange=s.None;getActions(){return[]}dispose(){}}}}),t=o.add(e.createInstance(C)),e.set(N,t)}),test("notebook kernel empty history",function(){const r=v.parse("foo:///one"),p=new c({label:"z",notebookType:"foo"}),d=new c({label:"a",notebookType:"foo"});o.add(t.registerKernel(p)),o.add(t.registerKernel(d)),e.stub(f,new class extends l(){onWillSaveState=s.None;onDidChangeValue(i,b,S){return s.None}get(i,b,S){if(i==="notebook.kernelHistory")return JSON.stringify({foo:{entries:[]}})}}),e.stub(m,new class extends l(){info(){}debug(){}});const g=o.add(e.createInstance(k));let n=g.getKernels({uri:r,notebookType:"foo"});a.equal(n.all.length,0),a.ok(!n.selected),t.updateKernelNotebookAffinity(d,r,2),n=g.getKernels({uri:r,notebookType:"foo"}),a.equal(n.all.length,0),a.deepStrictEqual(n.selected,void 0)}),test("notebook kernel history restore",function(){const r=v.parse("foo:///one"),p=new c({label:"z",notebookType:"foo"}),d=new c({label:"a",notebookType:"foo"}),g=new c({label:"b",notebookType:"foo"});o.add(t.registerKernel(p)),o.add(t.registerKernel(d)),o.add(t.registerKernel(g)),e.stub(f,new class extends l(){onWillSaveState=s.None;onDidChangeValue(b,S,I){return s.None}get(b,S,I){if(b==="notebook.kernelHistory")return JSON.stringify({foo:{entries:[d.id]}})}}),e.stub(m,new class extends l(){info(){}debug(){}});const n=o.add(e.createInstance(k));let i=n.getKernels({uri:r,notebookType:"foo"});a.equal(i.all.length,1),a.deepStrictEqual(i.selected,void 0),n.addMostRecentKernel(g),i=n.getKernels({uri:r,notebookType:"foo"}),a.deepStrictEqual(i.all,[g,d])})});class c{id=Math.random()+"kernel";label="test-label";viewType="*";onDidChange=s.None;extension=new E("test");localResourceRoot=v.file("/test");description;detail;preloadUris=[];preloadProvides=[];supportedLanguages=[];executeNotebookCellsRequest(){throw new Error("Method not implemented.")}cancelNotebookCellExecution(){throw new Error("Method not implemented.")}provideVariables(e,t,u,r,p){return A.EMPTY}constructor(e){this.supportedLanguages=e?.languages??[T],this.label=e?.label??this.label,this.viewType=e?.notebookType??this.viewType}}
