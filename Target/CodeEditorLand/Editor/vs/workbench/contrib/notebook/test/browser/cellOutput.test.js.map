{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/cellOutput.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { CellOutputContainer } from '../../browser/view/cellParts/cellOutput.js';\nimport { CodeCellRenderTemplate } from '../../browser/view/notebookRenderingCommon.js';\nimport { CodeCellViewModel } from '../../browser/viewModel/codeCellViewModel.js';\nimport { CellKind, INotebookRendererInfo, IOutputDto } from '../../common/notebookCommon.js';\nimport { setupInstantiationService, withTestNotebook } from './testNotebookEditor.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { INotebookService } from '../../common/notebookService.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { IMenu, IMenuService } from '../../../../../platform/actions/common/actions.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\n\nsuite('CellOutput', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\tlet outputMenus: IMenu[] = [];\n\n\tsetup(() => {\n\t\toutputMenus = [];\n\t\tinstantiationService = setupInstantiationService(store);\n\t\tinstantiationService.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\toverride getOutputMimeTypeInfo() {\n\t\t\t\treturn [{\n\t\t\t\t\trendererId: 'plainTextRendererId',\n\t\t\t\t\tmimeType: 'text/plain',\n\t\t\t\t\tisTrusted: true\n\t\t\t\t}, {\n\t\t\t\t\trendererId: 'htmlRendererId',\n\t\t\t\t\tmimeType: 'text/html',\n\t\t\t\t\tisTrusted: true\n\t\t\t\t}];\n\t\t\t}\n\t\t\toverride getRendererInfo(): INotebookRendererInfo {\n\t\t\t\treturn {\n\t\t\t\t\tid: 'rendererId',\n\t\t\t\t\tdisplayName: 'Stubbed Renderer',\n\t\t\t\t\textensionId: { _lower: 'id', value: 'id' },\n\t\t\t\t} as INotebookRendererInfo;\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(IMenuService, new class extends mock<IMenuService>() {\n\t\t\toverride createMenu() {\n\t\t\t\tconst menu = new class extends mock<IMenu>() {\n\t\t\t\t\toverride onDidChange = Event.None;\n\t\t\t\t\toverride getActions() { return []; }\n\t\t\t\t\toverride dispose() { outputMenus = outputMenus.filter(item => item !== menu); }\n\t\t\t\t};\n\t\t\t\toutputMenus.push(menu);\n\t\t\t\treturn menu;\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('Render cell output items with multiple mime types', async function () {\n\t\tconst outputItem = { data: VSBuffer.fromString('output content'), mime: 'text/plain' };\n\t\tconst htmlOutputItem = { data: VSBuffer.fromString('output content'), mime: 'text/html' };\n\t\tconst output1: IOutputDto = { outputId: 'abc', outputs: [outputItem, htmlOutputItem] };\n\t\tconst output2: IOutputDto = { outputId: 'def', outputs: [outputItem, htmlOutputItem] };\n\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['print(output content)', 'python', CellKind.Code, [output1, output2], {}],\n\t\t\t],\n\t\t\t(editor, viewModel, disposables, accessor) => {\n\n\t\t\t\tconst cell = viewModel.viewCells[0] as CodeCellViewModel;\n\t\t\t\tconst cellTemplate = createCellTemplate(disposables);\n\t\t\t\tconst output = disposables.add(accessor.createInstance(CellOutputContainer, editor, cell, cellTemplate, { limit: 100 }));\n\t\t\t\toutput.render();\n\t\t\t\tcell.outputsViewModels[0].setVisible(true);\n\t\t\t\tassert.strictEqual(outputMenus.length, 1, 'should have 1 output menus');\n\t\t\t\tassert(cellTemplate.outputContainer.domNode.style.display !== 'none', 'output container should be visible');\n\t\t\t\tcell.outputsViewModels[1].setVisible(true);\n\t\t\t\tassert.strictEqual(outputMenus.length, 2, 'should have 2 output menus');\n\t\t\t\tcell.outputsViewModels[1].setVisible(true);\n\t\t\t\tassert.strictEqual(outputMenus.length, 2, 'should still have 2 output menus');\n\t\t\t},\n\t\t\tinstantiationService\n\t\t);\n\t});\n\n\ttest('One of many cell outputs becomes hidden', async function () {\n\t\tconst outputItem = { data: VSBuffer.fromString('output content'), mime: 'text/plain' };\n\t\tconst htmlOutputItem = { data: VSBuffer.fromString('output content'), mime: 'text/html' };\n\t\tconst output1: IOutputDto = { outputId: 'abc', outputs: [outputItem, htmlOutputItem] };\n\t\tconst output2: IOutputDto = { outputId: 'def', outputs: [outputItem, htmlOutputItem] };\n\t\tconst output3: IOutputDto = { outputId: 'ghi', outputs: [outputItem, htmlOutputItem] };\n\n\t\tawait withTestNotebook(\n\t\t\t[\n\t\t\t\t['print(output content)', 'python', CellKind.Code, [output1, output2, output3], {}],\n\t\t\t],\n\t\t\t(editor, viewModel, disposables, accessor) => {\n\n\t\t\t\tconst cell = viewModel.viewCells[0] as CodeCellViewModel;\n\t\t\t\tconst cellTemplate = createCellTemplate(disposables);\n\t\t\t\tconst output = disposables.add(accessor.createInstance(CellOutputContainer, editor, cell, cellTemplate, { limit: 100 }));\n\t\t\t\toutput.render();\n\t\t\t\tcell.outputsViewModels[0].setVisible(true);\n\t\t\t\tcell.outputsViewModels[1].setVisible(true);\n\t\t\t\tcell.outputsViewModels[2].setVisible(true);\n\t\t\t\tcell.outputsViewModels[1].setVisible(false);\n\t\t\t\tassert(cellTemplate.outputContainer.domNode.style.display !== 'none', 'output container should be visible');\n\t\t\t\tassert.strictEqual(outputMenus.length, 2, 'should have 2 output menus');\n\t\t\t},\n\t\t\tinstantiationService\n\t\t);\n\t});\n\n\n});\n\nfunction createCellTemplate(disposables: DisposableStore) {\n\treturn {\n\t\toutputContainer: new FastDomNode(document.createElement('div')),\n\t\toutputShowMoreContainer: new FastDomNode(document.createElement('div')),\n\t\tfocusSinkElement: document.createElement('div'),\n\t\ttemplateDisposables: disposables,\n\t\telementDisposables: disposables,\n\t} as unknown as CodeCellRenderTemplate;\n}\n"],
  "mappings": "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",
  "names": []
}
