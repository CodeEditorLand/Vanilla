{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookKernelService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ExtensionIdentifier } from '../../../../../platform/extensions/common/extensions.js';\nimport { setupInstantiationService } from './testNotebookEditor.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { INotebookKernel, INotebookKernelService, VariablesResult } from '../../common/notebookKernelService.js';\nimport { NotebookKernelService } from '../../browser/services/notebookKernelServiceImpl.js';\nimport { INotebookService } from '../../common/notebookService.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { IMenu, IMenuService } from '../../../../../platform/actions/common/actions.js';\nimport { TransientOptions } from '../../common/notebookCommon.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { AsyncIterableObject } from '../../../../../base/common/async.js';\n\nsuite('NotebookKernelService', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet kernelService: INotebookKernelService;\n\tlet disposables: DisposableStore;\n\n\tlet onDidAddNotebookDocument: Emitter<NotebookTextModel>;\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(function () {\n\t\tdisposables = new DisposableStore();\n\n\t\tonDidAddNotebookDocument = new Emitter();\n\t\tdisposables.add(onDidAddNotebookDocument);\n\n\t\tinstantiationService = setupInstantiationService(disposables);\n\t\tinstantiationService.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\toverride onDidAddNotebookDocument = onDidAddNotebookDocument.event;\n\t\t\toverride onWillRemoveNotebookDocument = Event.None;\n\t\t\toverride getNotebookTextModels() { return []; }\n\t\t});\n\t\tinstantiationService.stub(IMenuService, new class extends mock<IMenuService>() {\n\t\t\toverride createMenu() {\n\t\t\t\treturn new class extends mock<IMenu>() {\n\t\t\t\t\toverride onDidChange = Event.None;\n\t\t\t\t\toverride getActions() { return []; }\n\t\t\t\t\toverride dispose() { }\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tkernelService = disposables.add(instantiationService.createInstance(NotebookKernelService));\n\t\tinstantiationService.set(INotebookKernelService, kernelService);\n\t});\n\n\ttest('notebook priorities', function () {\n\n\t\tconst u1 = URI.parse('foo:///one');\n\t\tconst u2 = URI.parse('foo:///two');\n\n\t\tconst k1 = new TestNotebookKernel({ label: 'z' });\n\t\tconst k2 = new TestNotebookKernel({ label: 'a' });\n\n\t\tdisposables.add(kernelService.registerKernel(k1));\n\t\tdisposables.add(kernelService.registerKernel(k2));\n\n\t\t// equal priorities -> sort by name\n\t\tlet info = kernelService.getMatchingKernel({ uri: u1, notebookType: 'foo' });\n\t\tassert.ok(info.all[0] === k2);\n\t\tassert.ok(info.all[1] === k1);\n\n\t\t// update priorities for u1 notebook\n\t\tkernelService.updateKernelNotebookAffinity(k2, u1, 2);\n\t\tkernelService.updateKernelNotebookAffinity(k2, u2, 1);\n\n\t\t// updated\n\t\tinfo = kernelService.getMatchingKernel({ uri: u1, notebookType: 'foo' });\n\t\tassert.ok(info.all[0] === k2);\n\t\tassert.ok(info.all[1] === k1);\n\n\t\t// NOT updated\n\t\tinfo = kernelService.getMatchingKernel({ uri: u2, notebookType: 'foo' });\n\t\tassert.ok(info.all[0] === k2);\n\t\tassert.ok(info.all[1] === k1);\n\n\t\t// reset\n\t\tkernelService.updateKernelNotebookAffinity(k2, u1, undefined);\n\t\tinfo = kernelService.getMatchingKernel({ uri: u1, notebookType: 'foo' });\n\t\tassert.ok(info.all[0] === k2);\n\t\tassert.ok(info.all[1] === k1);\n\t});\n\n\ttest('new kernel with higher affinity wins, https://github.com/microsoft/vscode/issues/122028', function () {\n\t\tconst notebook = URI.parse('foo:///one');\n\n\t\tconst kernel = new TestNotebookKernel();\n\t\tdisposables.add(kernelService.registerKernel(kernel));\n\n\t\tlet info = kernelService.getMatchingKernel({ uri: notebook, notebookType: 'foo' });\n\t\tassert.strictEqual(info.all.length, 1);\n\t\tassert.ok(info.all[0] === kernel);\n\n\t\tconst betterKernel = new TestNotebookKernel();\n\t\tdisposables.add(kernelService.registerKernel(betterKernel));\n\n\t\tinfo = kernelService.getMatchingKernel({ uri: notebook, notebookType: 'foo' });\n\t\tassert.strictEqual(info.all.length, 2);\n\n\t\tkernelService.updateKernelNotebookAffinity(betterKernel, notebook, 2);\n\t\tinfo = kernelService.getMatchingKernel({ uri: notebook, notebookType: 'foo' });\n\t\tassert.strictEqual(info.all.length, 2);\n\t\tassert.ok(info.all[0] === betterKernel);\n\t\tassert.ok(info.all[1] === kernel);\n\t});\n\n\ttest('onDidChangeSelectedNotebooks not fired on initial notebook open #121904', function () {\n\n\t\tconst uri = URI.parse('foo:///one');\n\t\tconst jupyter = { uri, viewType: 'jupyter', notebookType: 'jupyter' };\n\t\tconst dotnet = { uri, viewType: 'dotnet', notebookType: 'dotnet' };\n\n\t\tconst jupyterKernel = new TestNotebookKernel({ viewType: jupyter.viewType });\n\t\tconst dotnetKernel = new TestNotebookKernel({ viewType: dotnet.viewType });\n\t\tdisposables.add(kernelService.registerKernel(jupyterKernel));\n\t\tdisposables.add(kernelService.registerKernel(dotnetKernel));\n\n\t\tkernelService.selectKernelForNotebook(jupyterKernel, jupyter);\n\t\tkernelService.selectKernelForNotebook(dotnetKernel, dotnet);\n\n\t\tlet info = kernelService.getMatchingKernel(dotnet);\n\t\tassert.strictEqual(info.selected === dotnetKernel, true);\n\n\t\tinfo = kernelService.getMatchingKernel(jupyter);\n\t\tassert.strictEqual(info.selected === jupyterKernel, true);\n\t});\n\n\ttest('onDidChangeSelectedNotebooks not fired on initial notebook open #121904, p2', async function () {\n\n\t\tconst uri = URI.parse('foo:///one');\n\t\tconst jupyter = { uri, viewType: 'jupyter', notebookType: 'jupyter' };\n\t\tconst dotnet = { uri, viewType: 'dotnet', notebookType: 'dotnet' };\n\n\t\tconst jupyterKernel = new TestNotebookKernel({ viewType: jupyter.viewType });\n\t\tconst dotnetKernel = new TestNotebookKernel({ viewType: dotnet.viewType });\n\t\tdisposables.add(kernelService.registerKernel(jupyterKernel));\n\t\tdisposables.add(kernelService.registerKernel(dotnetKernel));\n\n\t\tkernelService.selectKernelForNotebook(jupyterKernel, jupyter);\n\t\tkernelService.selectKernelForNotebook(dotnetKernel, dotnet);\n\n\t\tconst transientOptions: TransientOptions = {\n\t\t\ttransientOutputs: false,\n\t\t\ttransientCellMetadata: {},\n\t\t\ttransientDocumentMetadata: {},\n\t\t\tcellContentMetadata: {},\n\t\t};\n\n\t\t{\n\t\t\t// open as jupyter -> bind event\n\t\t\tconst p1 = Event.toPromise(kernelService.onDidChangeSelectedNotebooks);\n\t\t\tconst d1 = disposables.add(instantiationService.createInstance(NotebookTextModel, jupyter.viewType, jupyter.uri, [], {}, transientOptions));\n\t\t\tonDidAddNotebookDocument.fire(d1);\n\t\t\tconst event = await p1;\n\t\t\tassert.strictEqual(event.newKernel, jupyterKernel.id);\n\t\t}\n\t\t{\n\t\t\t// RE-open as dotnet -> bind event\n\t\t\tconst p2 = Event.toPromise(kernelService.onDidChangeSelectedNotebooks);\n\t\t\tconst d2 = disposables.add(instantiationService.createInstance(NotebookTextModel, dotnet.viewType, dotnet.uri, [], {}, transientOptions));\n\t\t\tonDidAddNotebookDocument.fire(d2);\n\t\t\tconst event2 = await p2;\n\t\t\tassert.strictEqual(event2.newKernel, dotnetKernel.id);\n\t\t}\n\t});\n});\n\nclass TestNotebookKernel implements INotebookKernel {\n\tid: string = Math.random() + 'kernel';\n\tlabel: string = 'test-label';\n\tviewType = '*';\n\tonDidChange = Event.None;\n\textension: ExtensionIdentifier = new ExtensionIdentifier('test');\n\tlocalResourceRoot: URI = URI.file('/test');\n\tdescription?: string | undefined;\n\tdetail?: string | undefined;\n\tpreloadUris: URI[] = [];\n\tpreloadProvides: string[] = [];\n\tsupportedLanguages: string[] = [];\n\texecuteNotebookCellsRequest(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcancelNotebookCellExecution(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprovideVariables(notebookUri: URI, parentId: number | undefined, kind: 'named' | 'indexed', start: number, token: CancellationToken): AsyncIterableObject<VariablesResult> {\n\t\treturn AsyncIterableObject.EMPTY;\n\t}\n\n\tconstructor(opts?: { languages?: string[]; label?: string; viewType?: string }) {\n\t\tthis.supportedLanguages = opts?.languages ?? [PLAINTEXT_LANGUAGE_ID];\n\t\tthis.label = opts?.label ?? this.label;\n\t\tthis.viewType = opts?.viewType ?? this.viewType;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
