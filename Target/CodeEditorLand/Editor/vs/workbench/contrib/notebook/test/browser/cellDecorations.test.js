import l from"assert";import{CellKind as r}from"../../common/notebookCommon.js";import{withTestNotebook as i}from"./testNotebookEditor.js";import{ensureNoDisposablesAreLeakedInTestSuite as C}from"../../../../../base/test/common/utils.js";import{Event as c}from"../../../../../base/common/event.js";suite("CellDecorations",()=>{C(),test("Add and remove a cell decoration",async function(){await i([["# header a","markdown",r.Markup,[],{}]],async(m,d)=>{const e=d.cellAt(0);l.ok(e);let s=!1;c.once(e.onCellDecorationsChanged)(o=>s=!!o.added.find(t=>t.className==="style1"));const n=e.deltaCellDecorations([],[{className:"style1"}]);l.ok(e.getCellDecorations().find(o=>o.className==="style1"));let a=!1;c.once(e.onCellDecorationsChanged)(o=>a=!!o.removed.find(t=>t.className==="style1")),e.deltaCellDecorations(n,[]),l.ok(!e.getCellDecorations().find(o=>o.className==="style1")),l.ok(s),l.ok(a)})}),test("Removing one cell decoration should not remove all",async function(){await i([["# header a","markdown",r.Markup,[],{}]],async(m,d)=>{const e=d.cellAt(0);l.ok(e);const s=e.deltaCellDecorations([],[{className:"style1",outputClassName:"style1"}]);e.deltaCellDecorations([],[{className:"style1"}]);let n=!1,a=!1;c.once(e.onCellDecorationsChanged)(o=>{n=!!o.removed.find(t=>t.className==="style1"),a=!!o.removed.find(t=>t.outputClassName==="style1")}),e.deltaCellDecorations(s,[]),l.ok(!e.getCellDecorations().find(o=>o.outputClassName==="style1")),l.ok(e.getCellDecorations().find(o=>o.className==="style1")),l.ok(!n),l.ok(a)})})});
