{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookWorkbenchToolbar.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { workbenchCalculateActions, workbenchDynamicCalculateActions } from '../../browser/viewParts/notebookEditorToolbar.js';\nimport { Action, IAction, Separator } from '../../../../../base/common/actions.js';\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\ninterface IActionModel {\n\taction: IAction;\n\tsize: number;\n\tvisible: boolean;\n\trenderLabel: boolean;\n}\n\n/**\n * Calculate the visible actions in the toolbar.\n * @param action The action to measure.\n * @param container The container the action will be placed in.\n * @returns The primary and secondary actions to be rendered\n *\n * NOTE: every action requires space for ACTION_PADDING +8 to the right.\n *\n * ex: action with size 50 requires 58px of space\n */\nsuite('Workbench Toolbar calculateActions (strategy always + never)', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst defaultSecondaryActionModels: IActionModel[] = [\n\t\t{ action: new Action('secondaryAction0', 'Secondary Action 0'), size: 50, visible: true, renderLabel: true },\n\t\t{ action: new Action('secondaryAction1', 'Secondary Action 1'), size: 50, visible: true, renderLabel: true },\n\t\t{ action: new Action('secondaryAction2', 'Secondary Action 2'), size: 50, visible: true, renderLabel: true },\n\t];\n\tconst defaultSecondaryActions: IAction[] = defaultSecondaryActionModels.map(action => action.action);\n\tconst separator: IActionModel = { action: new Separator(), size: 1, visible: true, renderLabel: true };\n\n\tsetup(function () {\n\t\tdefaultSecondaryActionModels.forEach(action => disposables.add(<Action>action.action));\n\t});\n\n\ttest('should return empty primary and secondary actions when given empty initial actions', () => {\n\t\tconst result = workbenchCalculateActions([], [], 100);\n\t\tassert.deepEqual(result.primaryActions, []);\n\t\tassert.deepEqual(result.secondaryActions, []);\n\t});\n\n\ttest('should return all primary actions when they fit within the container width', () => {\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: disposables.add(new Action('action0', 'Action 0')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action1', 'Action 1')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action2', 'Action 2')), size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchCalculateActions(actions, defaultSecondaryActions, 200);\n\t\tassert.deepEqual(result.primaryActions, actions);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should move actions to secondary when they do not fit within the container width', () => {\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: disposables.add(new Action('action0', 'Action 0')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action1', 'Action 1')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action2', 'Action 2')), size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchCalculateActions(actions, defaultSecondaryActions, 100);\n\t\tassert.deepEqual(result.primaryActions, [actions[0]]);\n\t\tassert.deepEqual(result.secondaryActions, [actions[1], actions[2], separator, ...defaultSecondaryActionModels].map(action => action.action));\n\t});\n\n\ttest('should ignore second separator when two separators are in a row', () => {\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: disposables.add(new Action('action0', 'Action 0')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action1', 'Action 1')), size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchCalculateActions(actions, defaultSecondaryActions, 125);\n\t\tassert.deepEqual(result.primaryActions, [actions[0], actions[1], actions[3]]);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should ignore separators when they are at the end of the resulting primary actions', () => {\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: disposables.add(new Action('action0', 'Action 0')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action1', 'Action 1')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchCalculateActions(actions, defaultSecondaryActions, 200);\n\t\tassert.deepEqual(result.primaryActions, [actions[0], actions[1], actions[2]]);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should keep actions with size 0 in primary actions', () => {\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: disposables.add(new Action('action0', 'Action 0')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action1', 'Action 1')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action2', 'Action 2')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action3', 'Action 3')), size: 0, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchCalculateActions(actions, defaultSecondaryActions, 116);\n\t\tassert.deepEqual(result.primaryActions, [actions[0], actions[1], actions[3]]);\n\t\tassert.deepEqual(result.secondaryActions, [actions[2], separator, ...defaultSecondaryActionModels].map(action => action.action));\n\t});\n\n\ttest('should not render separator if preceeded by size 0 action(s).', () => {\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: disposables.add(new Action('action0', 'Action 0')), size: 0, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action1', 'Action 1')), size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchCalculateActions(actions, defaultSecondaryActions, 116);\n\t\tassert.deepEqual(result.primaryActions, [actions[0], actions[2]]);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should not render second separator if space between is hidden (size 0) actions.', () => {\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: disposables.add(new Action('action0', 'Action 0')), size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action1', 'Action 1')), size: 0, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action2', 'Action 2')), size: 0, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: disposables.add(new Action('action3', 'Action 3')), size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchCalculateActions(actions, defaultSecondaryActions, 300);\n\t\tassert.deepEqual(result.primaryActions, [actions[0], actions[1], actions[2], actions[3], actions[5]]);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n});\n\nsuite('Workbench Toolbar Dynamic calculateActions (strategy dynamic)', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst actionTemplate = [\n\t\tnew Action('action0', 'Action 0'),\n\t\tnew Action('action1', 'Action 1'),\n\t\tnew Action('action2', 'Action 2'),\n\t\tnew Action('action3', 'Action 3')\n\t];\n\n\tconst defaultSecondaryActionModels: IActionModel[] = [\n\t\t{ action: new Action('secondaryAction0', 'Secondary Action 0'), size: 50, visible: true, renderLabel: true },\n\t\t{ action: new Action('secondaryAction1', 'Secondary Action 1'), size: 50, visible: true, renderLabel: true },\n\t\t{ action: new Action('secondaryAction2', 'Secondary Action 2'), size: 50, visible: true, renderLabel: true },\n\t];\n\tconst defaultSecondaryActions: IAction[] = defaultSecondaryActionModels.map(action => action.action);\n\n\tsetup(function () {\n\t\tdefaultSecondaryActionModels.forEach(action => disposables.add(<Action>action.action));\n\t});\n\n\ttest('should return empty primary and secondary actions when given empty initial actions', () => {\n\t\tconst result = workbenchDynamicCalculateActions([], [], 100);\n\t\tassert.deepEqual(result.primaryActions, []);\n\t\tassert.deepEqual(result.secondaryActions, []);\n\t});\n\n\ttest('should return all primary actions as visiblewhen they fit within the container width', () => {\n\t\tconst constainerSize = 200;\n\t\tconst input: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst expected: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchDynamicCalculateActions(input, defaultSecondaryActions, constainerSize);\n\t\tassert.deepEqual(result.primaryActions, expected);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('actions all within a group that cannot all fit, will all be icon only', () => {\n\t\tconst containerSize = 150;\n\t\tconst input: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst expected: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: false },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: false },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: false },\n\t\t];\n\n\n\t\tconst result = workbenchDynamicCalculateActions(input, defaultSecondaryActions, containerSize);\n\t\tassert.deepEqual(result.primaryActions, expected);\n\t\tassert.deepEqual(result.secondaryActions, [...defaultSecondaryActionModels].map(action => action.action));\n\t});\n\n\ttest('should ignore second separator when two separators are in a row', () => {\n\t\tconst containerSize = 200;\n\t\tconst input: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst expected: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchDynamicCalculateActions(input, defaultSecondaryActions, containerSize);\n\t\tassert.deepEqual(result.primaryActions, expected);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('check label visibility in different groupings', () => {\n\t\tconst containerSize = 150;\n\t\tconst actions: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst expectedOutputActions: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: false },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: false },\n\t\t];\n\n\n\t\tconst result = workbenchDynamicCalculateActions(actions, defaultSecondaryActions, containerSize);\n\t\tassert.deepEqual(result.primaryActions, expectedOutputActions);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should ignore separators when they are at the end of the resulting primary actions', () => {\n\t\tconst containerSize = 200;\n\t\tconst input: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t];\n\t\tconst expected: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchDynamicCalculateActions(input, defaultSecondaryActions, containerSize);\n\t\tassert.deepEqual(result.primaryActions, expected);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should keep actions with size 0 in primary actions', () => {\n\t\tconst containerSize = 170;\n\t\tconst input: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[3], size: 0, visible: true, renderLabel: true },\n\t\t];\n\t\tconst expected: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 50, visible: true, renderLabel: false },\n\t\t\t{ action: actionTemplate[3], size: 0, visible: true, renderLabel: false },\n\t\t];\n\t\tconst result = workbenchDynamicCalculateActions(input, defaultSecondaryActions, containerSize);\n\t\tassert.deepEqual(result.primaryActions, expected);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should not render separator if preceeded by size 0 action(s), but keep size 0 action in primary.', () => {\n\t\tconst containerSize = 116;\n\t\tconst input: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 0, visible: true, renderLabel: true }, \t// hidden\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\t\t// sep\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true },\t// visible\n\t\t];\n\t\tconst expected: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 0, visible: true, renderLabel: true }, \t// hidden\n\t\t\t{ action: actionTemplate[1], size: 50, visible: true, renderLabel: true } \t// visible\n\t\t];\n\t\tconst result = workbenchDynamicCalculateActions(input, defaultSecondaryActions, containerSize);\n\t\tassert.deepEqual(result.primaryActions, expected);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n\n\ttest('should not render second separator if space between is hidden (size 0) actions.', () => {\n\t\tconst containerSize = 300;\n\t\tconst input: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 0, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 0, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[3], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst expected: IActionModel[] = [\n\t\t\t{ action: actionTemplate[0], size: 50, visible: true, renderLabel: true },\n\t\t\t{ action: new Separator(), size: 1, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[1], size: 0, visible: true, renderLabel: true },\n\t\t\t{ action: actionTemplate[2], size: 0, visible: true, renderLabel: true },\n\t\t\t// remove separator here\n\t\t\t{ action: actionTemplate[3], size: 50, visible: true, renderLabel: true },\n\t\t];\n\t\tconst result = workbenchDynamicCalculateActions(input, defaultSecondaryActions, containerSize);\n\t\tassert.deepEqual(result.primaryActions, expected);\n\t\tassert.deepEqual(result.secondaryActions, defaultSecondaryActions);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
