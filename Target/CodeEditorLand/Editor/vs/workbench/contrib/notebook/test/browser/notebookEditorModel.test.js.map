{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/notebook/test/browser/notebookEditorModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../../base/common/mime.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { mock } from '../../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { ExtensionIdentifier } from '../../../../../platform/extensions/common/extensions.js';\nimport { IFileStatWithMetadata } from '../../../../../platform/files/common/files.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NotebookTextModel } from '../../common/model/notebookTextModel.js';\nimport { CellKind, IOutputDto, NotebookData, NotebookSetting, TransientOptions } from '../../common/notebookCommon.js';\nimport { NotebookFileWorkingCopyModel } from '../../common/notebookEditorModel.js';\nimport { INotebookSerializer, INotebookService, SimpleNotebookProviderInfo } from '../../common/notebookService.js';\nimport { setupInstantiationService } from './testNotebookEditor.js';\nimport { SnapshotContext } from '../../../../services/workingCopy/common/fileWorkingCopy.js';\n\nsuite('NotebookFileWorkingCopyModel', function () {\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tconst configurationService = new TestConfigurationService();\n\tconst telemetryService = new class extends mock<ITelemetryService>() {\n\t\toverride publicLogError2() { }\n\t};\n\tconst logservice = new class extends mock<ILogService>() { };\n\n\tteardown(() => disposables.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = setupInstantiationService(disposables);\n\t});\n\n\ttest('no transient output is send to serializer', async function () {\n\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [{ outputId: 'id', outputs: [{ mime: Mimes.text, data: VSBuffer.fromString('Hello Out') }] }] }],\n\t\t\t{},\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false }\n\t\t);\n\n\t\t{ // transient output\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: true, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells.length, 1);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].outputs.length, 0);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService,\n\t\t\t\ttelemetryService,\n\t\t\t\tlogservice\n\t\t\t));\n\n\t\t\tawait model.snapshot(SnapshotContext.Save, CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\n\t\t{ // NOT transient output\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: false, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells.length, 1);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].outputs.length, 1);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService,\n\t\t\t\ttelemetryService,\n\t\t\t\tlogservice\n\t\t\t));\n\t\t\tawait model.snapshot(SnapshotContext.Save, CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\t});\n\n\ttest('no transient metadata is send to serializer', async function () {\n\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [] }],\n\t\t\t{ foo: 123, bar: 456 },\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false }\n\t\t);\n\n\t\tdisposables.add(notebook);\n\n\t\t{ // transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: true, transientCellMetadata: {}, transientDocumentMetadata: { bar: true }, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.bar, undefined);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService,\n\t\t\t\ttelemetryService,\n\t\t\t\tlogservice\n\t\t\t));\n\n\t\t\tawait model.snapshot(SnapshotContext.Save, CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\n\t\t{ // NOT transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: false, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.bar, 456);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService,\n\t\t\t\ttelemetryService,\n\t\t\t\tlogservice\n\n\t\t\t));\n\t\t\tawait model.snapshot(SnapshotContext.Save, CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\t});\n\n\ttest('no transient cell metadata is send to serializer', async function () {\n\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [], metadata: { foo: 123, bar: 456 } }],\n\t\t\t{},\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false, }\n\t\t);\n\t\tdisposables.add(notebook);\n\n\t\t{ // transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: true, transientDocumentMetadata: {}, transientCellMetadata: { bar: true }, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.bar, undefined);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService,\n\t\t\t\ttelemetryService,\n\t\t\t\tlogservice\n\t\t\t));\n\n\t\t\tawait model.snapshot(SnapshotContext.Save, CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\n\t\t{ // NOT transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: false, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.bar, 456);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService,\n\t\t\t\ttelemetryService,\n\t\t\t\tlogservice\n\t\t\t));\n\t\t\tawait model.snapshot(SnapshotContext.Save, CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\t});\n\n\ttest('Notebooks with outputs beyond the size threshold will throw for backup snapshots', async function () {\n\t\tconst outputLimit = 100;\n\t\tawait configurationService.setUserConfiguration(NotebookSetting.outputBackupSizeLimit, outputLimit * 1.0 / 1024);\n\t\tconst largeOutput: IOutputDto = { outputId: '123', outputs: [{ mime: Mimes.text, data: VSBuffer.fromString('a'.repeat(outputLimit + 1)) }] };\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [largeOutput], metadata: { foo: 123, bar: 456 } }],\n\t\t\t{},\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false, }\n\t\t);\n\t\tdisposables.add(notebook);\n\n\t\tlet callCount = 0;\n\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\tnotebook,\n\t\t\tmockNotebookService(notebook,\n\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\toverride options: TransientOptions = { transientOutputs: true, transientDocumentMetadata: {}, transientCellMetadata: { bar: true }, cellContentMetadata: {} };\n\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.foo, 123);\n\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.bar, undefined);\n\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t),\n\t\t\tconfigurationService,\n\t\t\ttelemetryService,\n\t\t\tlogservice\n\t\t));\n\n\t\ttry {\n\t\t\tawait model.snapshot(SnapshotContext.Backup, CancellationToken.None);\n\t\t\tassert.fail('Expected snapshot to throw an error for large output');\n\t\t} catch (e) {\n\t\t\tassert.notEqual(e.code, 'ERR_ASSERTION', e.message);\n\t\t}\n\n\t\tawait model.snapshot(SnapshotContext.Save, CancellationToken.None);\n\t\tassert.strictEqual(callCount, 1);\n\n\t});\n\n\ttest('Notebook model will not return a save delegate if the serializer has not been retreived', async function () {\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [], metadata: { foo: 123, bar: 456 } }],\n\t\t\t{},\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false, }\n\t\t);\n\t\tdisposables.add(notebook);\n\n\t\tconst serializer = new class extends mock<INotebookSerializer>() {\n\t\t\toverride save(): Promise<IFileStatWithMetadata> {\n\t\t\t\treturn Promise.resolve({ name: 'savedFile' } as IFileStatWithMetadata);\n\t\t\t}\n\t\t};\n\t\t(serializer as any).test = 'yes';\n\n\t\tlet resolveSerializer: (serializer: INotebookSerializer) => void = () => { };\n\t\tconst serializerPromise = new Promise<INotebookSerializer>(resolve => {\n\t\t\tresolveSerializer = resolve;\n\t\t});\n\t\tconst notebookService = mockNotebookService(notebook, serializerPromise);\n\t\tconfigurationService.setUserConfiguration(NotebookSetting.remoteSaving, true);\n\n\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\tnotebook,\n\t\t\tnotebookService,\n\t\t\tconfigurationService,\n\t\t\ttelemetryService,\n\t\t\tlogservice\n\t\t));\n\n\t\t// the save method should not be set if the serializer is not yet resolved\n\t\tconst notExist = model.save;\n\t\tassert.strictEqual(notExist, undefined);\n\n\t\tresolveSerializer(serializer);\n\t\tawait model.getNotebookSerializer();\n\t\tconst result = await model.save?.({} as any, {} as any);\n\n\t\tassert.strictEqual(result!.name, 'savedFile');\n\t});\n});\n\nfunction mockNotebookService(notebook: NotebookTextModel, notebookSerializer: Promise<INotebookSerializer> | INotebookSerializer) {\n\treturn new class extends mock<INotebookService>() {\n\t\tprivate serializer: INotebookSerializer | undefined = undefined;\n\t\toverride async withNotebookDataProvider(viewType: string): Promise<SimpleNotebookProviderInfo> {\n\t\t\tthis.serializer = await notebookSerializer;\n\t\t\treturn new SimpleNotebookProviderInfo(\n\t\t\t\tnotebook.viewType,\n\t\t\t\tthis.serializer,\n\t\t\t\t{\n\t\t\t\t\tid: new ExtensionIdentifier('test'),\n\t\t\t\t\tlocation: undefined\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\toverride tryGetDataProviderSync(viewType: string): SimpleNotebookProviderInfo | undefined {\n\t\t\tif (!this.serializer) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn new SimpleNotebookProviderInfo(\n\t\t\t\tnotebook.viewType,\n\t\t\t\tthis.serializer,\n\t\t\t\t{\n\t\t\t\t\tid: new ExtensionIdentifier('test'),\n\t\t\t\t\tlocation: undefined\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n}\n"],
  "mappings": "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",
  "names": ["notebook"]
}
