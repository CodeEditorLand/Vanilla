import{workbenchCalculateActions as b,workbenchDynamicCalculateActions as u}from"../../browser/viewParts/notebookEditorToolbar.js";import{Action as r,Separator as s}from"../../../../../base/common/actions.js";import n from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as z}from"../../../../../base/test/common/utils.js";suite("Workbench Toolbar calculateActions (strategy always + never)",()=>{const o=z(),i=[{action:new r("secondaryAction0","Secondary Action 0"),size:50,visible:!0,renderLabel:!0},{action:new r("secondaryAction1","Secondary Action 1"),size:50,visible:!0,renderLabel:!0},{action:new r("secondaryAction2","Secondary Action 2"),size:50,visible:!0,renderLabel:!0}],d=i.map(e=>e.action),l={action:new s,size:1,visible:!0,renderLabel:!0};setup(function(){i.forEach(e=>o.add(e.action))}),test("should return empty primary and secondary actions when given empty initial actions",()=>{const e=b([],[],100);n.deepEqual(e.primaryActions,[]),n.deepEqual(e.secondaryActions,[])}),test("should return all primary actions when they fit within the container width",()=>{const e=[{action:o.add(new r("action0","Action 0")),size:50,visible:!0,renderLabel:!0},{action:o.add(new r("action1","Action 1")),size:50,visible:!0,renderLabel:!0},{action:o.add(new r("action2","Action 2")),size:50,visible:!0,renderLabel:!0}],t=b(e,d,200);n.deepEqual(t.primaryActions,e),n.deepEqual(t.secondaryActions,d)}),test("should move actions to secondary when they do not fit within the container width",()=>{const e=[{action:o.add(new r("action0","Action 0")),size:50,visible:!0,renderLabel:!0},{action:o.add(new r("action1","Action 1")),size:50,visible:!0,renderLabel:!0},{action:o.add(new r("action2","Action 2")),size:50,visible:!0,renderLabel:!0}],t=b(e,d,100);n.deepEqual(t.primaryActions,[e[0]]),n.deepEqual(t.secondaryActions,[e[1],e[2],l,...i].map(c=>c.action))}),test("should ignore second separator when two separators are in a row",()=>{const e=[{action:o.add(new r("action0","Action 0")),size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:o.add(new r("action1","Action 1")),size:50,visible:!0,renderLabel:!0}],t=b(e,d,125);n.deepEqual(t.primaryActions,[e[0],e[1],e[3]]),n.deepEqual(t.secondaryActions,d)}),test("should ignore separators when they are at the end of the resulting primary actions",()=>{const e=[{action:o.add(new r("action0","Action 0")),size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:o.add(new r("action1","Action 1")),size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0}],t=b(e,d,200);n.deepEqual(t.primaryActions,[e[0],e[1],e[2]]),n.deepEqual(t.secondaryActions,d)}),test("should keep actions with size 0 in primary actions",()=>{const e=[{action:o.add(new r("action0","Action 0")),size:50,visible:!0,renderLabel:!0},{action:o.add(new r("action1","Action 1")),size:50,visible:!0,renderLabel:!0},{action:o.add(new r("action2","Action 2")),size:50,visible:!0,renderLabel:!0},{action:o.add(new r("action3","Action 3")),size:0,visible:!0,renderLabel:!0}],t=b(e,d,116);n.deepEqual(t.primaryActions,[e[0],e[1],e[3]]),n.deepEqual(t.secondaryActions,[e[2],l,...i].map(c=>c.action))}),test("should not render separator if preceeded by size 0 action(s).",()=>{const e=[{action:o.add(new r("action0","Action 0")),size:0,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:o.add(new r("action1","Action 1")),size:50,visible:!0,renderLabel:!0}],t=b(e,d,116);n.deepEqual(t.primaryActions,[e[0],e[2]]),n.deepEqual(t.secondaryActions,d)}),test("should not render second separator if space between is hidden (size 0) actions.",()=>{const e=[{action:o.add(new r("action0","Action 0")),size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:o.add(new r("action1","Action 1")),size:0,visible:!0,renderLabel:!0},{action:o.add(new r("action2","Action 2")),size:0,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:o.add(new r("action3","Action 3")),size:50,visible:!0,renderLabel:!0}],t=b(e,d,300);n.deepEqual(t.primaryActions,[e[0],e[1],e[2],e[3],e[5]]),n.deepEqual(t.secondaryActions,d)})}),suite("Workbench Toolbar Dynamic calculateActions (strategy dynamic)",()=>{const o=z(),i=[new r("action0","Action 0"),new r("action1","Action 1"),new r("action2","Action 2"),new r("action3","Action 3")],d=[{action:new r("secondaryAction0","Secondary Action 0"),size:50,visible:!0,renderLabel:!0},{action:new r("secondaryAction1","Secondary Action 1"),size:50,visible:!0,renderLabel:!0},{action:new r("secondaryAction2","Secondary Action 2"),size:50,visible:!0,renderLabel:!0}],l=d.map(e=>e.action);setup(function(){d.forEach(e=>o.add(e.action))}),test("should return empty primary and secondary actions when given empty initial actions",()=>{const e=u([],[],100);n.deepEqual(e.primaryActions,[]),n.deepEqual(e.secondaryActions,[])}),test("should return all primary actions as visiblewhen they fit within the container width",()=>{const t=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0},{action:i[2],size:50,visible:!0,renderLabel:!0}],c=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0},{action:i[2],size:50,visible:!0,renderLabel:!0}],a=u(t,l,200);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,l)}),test("actions all within a group that cannot all fit, will all be icon only",()=>{const t=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0},{action:i[2],size:50,visible:!0,renderLabel:!0}],c=[{action:i[0],size:50,visible:!0,renderLabel:!1},{action:i[1],size:50,visible:!0,renderLabel:!1},{action:i[2],size:50,visible:!0,renderLabel:!1}],a=u(t,l,150);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,[...d].map(p=>p.action))}),test("should ignore second separator when two separators are in a row",()=>{const t=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0}],c=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0}],a=u(t,l,200);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,l)}),test("check label visibility in different groupings",()=>{const t=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0},{action:i[2],size:50,visible:!0,renderLabel:!0}],c=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!1},{action:i[2],size:50,visible:!0,renderLabel:!1}],a=u(t,l,150);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,l)}),test("should ignore separators when they are at the end of the resulting primary actions",()=>{const t=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0}],c=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0}],a=u(t,l,200);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,l)}),test("should keep actions with size 0 in primary actions",()=>{const t=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[2],size:50,visible:!0,renderLabel:!0},{action:i[3],size:0,visible:!0,renderLabel:!0}],c=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[2],size:50,visible:!0,renderLabel:!1},{action:i[3],size:0,visible:!0,renderLabel:!1}],a=u(t,l,170);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,l)}),test("should not render separator if preceeded by size 0 action(s), but keep size 0 action in primary.",()=>{const t=[{action:i[0],size:0,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0}],c=[{action:i[0],size:0,visible:!0,renderLabel:!0},{action:i[1],size:50,visible:!0,renderLabel:!0}],a=u(t,l,116);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,l)}),test("should not render second separator if space between is hidden (size 0) actions.",()=>{const t=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:0,visible:!0,renderLabel:!0},{action:i[2],size:0,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[3],size:50,visible:!0,renderLabel:!0}],c=[{action:i[0],size:50,visible:!0,renderLabel:!0},{action:new s,size:1,visible:!0,renderLabel:!0},{action:i[1],size:0,visible:!0,renderLabel:!0},{action:i[2],size:0,visible:!0,renderLabel:!0},{action:i[3],size:50,visible:!0,renderLabel:!0}],a=u(t,l,300);n.deepEqual(a.primaryActions,c),n.deepEqual(a.secondaryActions,l)})});
