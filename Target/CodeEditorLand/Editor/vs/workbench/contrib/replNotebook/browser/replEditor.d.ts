import "vs/css!./media/interactive";
import * as DOM from "vs/base/browser/dom";
import { CancellationToken } from "vs/base/common/cancellation";
import { Event } from "vs/base/common/event";
import { ICodeEditorService } from "vs/editor/browser/services/codeEditorService";
import { CodeEditorWidget } from "vs/editor/browser/widget/codeEditor/codeEditorWidget";
import { ICodeEditorViewState } from "vs/editor/common/editorCommon";
import { ILanguageService } from "vs/editor/common/languages/language";
import { ITextResourceConfigurationService } from "vs/editor/common/services/textResourceConfiguration";
import { IMenuService } from "vs/platform/actions/common/actions";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IContextMenuService } from "vs/platform/contextview/browser/contextView";
import { ITextEditorOptions } from "vs/platform/editor/common/editor";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "vs/platform/keybinding/common/keybinding";
import { IStorageService } from "vs/platform/storage/common/storage";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IThemeService } from "vs/platform/theme/common/themeService";
import { EditorPane } from "vs/workbench/browser/parts/editor/editorPane";
import { IEditorOpenContext, IEditorPaneScrollPosition, IEditorPaneWithScrolling } from "vs/workbench/common/editor";
import { INotebookEditorOptions, INotebookEditorViewState } from "vs/workbench/contrib/notebook/browser/notebookBrowser";
import { NotebookEditorWidget } from "vs/workbench/contrib/notebook/browser/notebookEditorWidget";
import { INotebookEditorService } from "vs/workbench/contrib/notebook/browser/services/notebookEditorService";
import { INotebookExecutionStateService } from "vs/workbench/contrib/notebook/common/notebookExecutionStateService";
import { INotebookKernelService } from "vs/workbench/contrib/notebook/common/notebookKernelService";
import { IEditorGroup, IEditorGroupsService } from "vs/workbench/services/editor/common/editorGroupsService";
import { IExtensionService } from "vs/workbench/services/extensions/common/extensions";
import "vs/css!./interactiveEditor";
import { ReplEditorInput } from "vs/workbench/contrib/replNotebook/browser/replEditorInput";
export interface InteractiveEditorViewState {
    readonly notebook?: INotebookEditorViewState;
    readonly input?: ICodeEditorViewState | null;
}
export interface InteractiveEditorOptions extends ITextEditorOptions {
    readonly viewState?: InteractiveEditorViewState;
}
export declare class ReplEditor extends EditorPane implements IEditorPaneWithScrolling {
    private _rootElement;
    private _styleElement;
    private _notebookEditorContainer;
    private _notebookWidget;
    private _inputCellContainer;
    private _inputFocusIndicator;
    private _inputRunButtonContainer;
    private _inputEditorContainer;
    private _codeEditorWidget;
    private _notebookWidgetService;
    private _instantiationService;
    private _languageService;
    private _contextKeyService;
    private _configurationService;
    private _notebookKernelService;
    private _keybindingService;
    private _menuService;
    private _contextMenuService;
    private _editorGroupService;
    private _extensionService;
    private readonly _widgetDisposableStore;
    private _lastLayoutDimensions?;
    private _editorOptions;
    private _notebookOptions;
    private _editorMemento;
    private readonly _groupListener;
    private _runbuttonToolbar;
    private _hintElement;
    private _onDidFocusWidget;
    get onDidFocus(): Event<void>;
    private _onDidChangeSelection;
    readonly onDidChangeSelection: any;
    private _onDidChangeScroll;
    readonly onDidChangeScroll: any;
    constructor(group: IEditorGroup, telemetryService: ITelemetryService, themeService: IThemeService, storageService: IStorageService, instantiationService: IInstantiationService, notebookWidgetService: INotebookEditorService, contextKeyService: IContextKeyService, codeEditorService: ICodeEditorService, notebookKernelService: INotebookKernelService, languageService: ILanguageService, keybindingService: IKeybindingService, configurationService: IConfigurationService, menuService: IMenuService, contextMenuService: IContextMenuService, editorGroupService: IEditorGroupsService, textResourceConfigurationService: ITextResourceConfigurationService, notebookExecutionStateService: INotebookExecutionStateService, extensionService: IExtensionService);
    private get inputCellContainerHeight();
    private get inputCellEditorHeight();
    protected createEditor(parent: HTMLElement): void;
    private _setupRunButtonToolbar;
    private _createLayoutStyles;
    private _computeEditorOptions;
    protected saveState(): void;
    getViewState(): InteractiveEditorViewState | undefined;
    private _saveEditorViewState;
    private _loadNotebookEditorViewState;
    setInput(input: ReplEditorInput, options: InteractiveEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    setOptions(options: INotebookEditorOptions | undefined): void;
    private _toEditorPaneSelectionChangeReason;
    private _cellAtBottom;
    private _scrollIfNecessary;
    private _syncWithKernel;
    layout(dimension: DOM.Dimension, position: DOM.IDomPosition): void;
    private _layoutWidgets;
    private _validateDimension;
    private _updateInputHint;
    getScrollPosition(): IEditorPaneScrollPosition;
    setScrollPosition(position: IEditorPaneScrollPosition): void;
    focus(): void;
    focusHistory(): void;
    protected setEditorVisible(visible: boolean): void;
    clearInput(): void;
    getControl(): {
        notebookEditor: NotebookEditorWidget | undefined;
        codeEditor: CodeEditorWidget;
    };
}
