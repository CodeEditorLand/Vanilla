{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/replNotebook/browser/repl.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { EditorPaneDescriptor, IEditorPaneRegistry } from '../../../browser/editor.js';\nimport { EditorExtensions, IEditorFactoryRegistry, IEditorSerializer } from '../../../common/editor.js';\nimport { parse } from '../../../../base/common/marshalling.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { CellEditType, CellKind, NotebookSetting, NotebookWorkingCopyTypeIdentifier, REPL_EDITOR_ID } from '../../notebook/common/notebookCommon.js';\nimport { NotebookEditorInputOptions } from '../../notebook/common/notebookEditorInput.js';\nimport { ReplEditor } from './replEditor.js';\nimport { ReplEditorInput } from './replEditorInput.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IWorkbenchContribution, registerWorkbenchContribution2, WorkbenchPhase } from '../../../common/contributions.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IWorkingCopyIdentifier } from '../../../services/workingCopy/common/workingCopy.js';\nimport { IWorkingCopyEditorHandler, IWorkingCopyEditorService } from '../../../services/workingCopy/common/workingCopyEditorService.js';\nimport { extname, isEqual } from '../../../../base/common/resources.js';\nimport { INotebookService } from '../../notebook/common/notebookService.js';\nimport { IEditorResolverService, RegisteredEditorPriority } from '../../../services/editor/common/editorResolverService.js';\nimport { INotebookEditorModelResolverService } from '../../notebook/common/notebookEditorModelResolverService.js';\nimport { isFalsyOrWhitespace } from '../../../../base/common/strings.js';\nimport { IBulkEditService } from '../../../../editor/browser/services/bulkEditService.js';\nimport { CodeEditorWidget } from '../../../../editor/browser/widget/codeEditor/codeEditorWidget.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';\nimport { ResourceNotebookCellEdit } from '../../bulkEdit/browser/bulkCellEdits.js';\nimport { IInteractiveHistoryService } from '../../interactive/browser/interactiveHistoryService.js';\nimport { NotebookEditorWidget } from '../../notebook/browser/notebookEditorWidget.js';\nimport { INotebookEditorService } from '../../notebook/browser/services/notebookEditorService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { getReplView } from '../../debug/browser/repl.js';\nimport { REPL_VIEW_ID } from '../../debug/common/debug.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { localize2 } from '../../../../nls.js';\nimport { NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT } from '../../notebook/browser/controller/coreActions.js';\nimport * as icons from '../../notebook/browser/notebookIcons.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { INotebookEditorOptions } from '../../notebook/browser/notebookBrowser.js';\n\ntype SerializedNotebookEditorData = { resource: URI; preferredResource: URI; viewType: string; options?: NotebookEditorInputOptions; label?: string };\nclass ReplEditorSerializer implements IEditorSerializer {\n\tcanSerialize(input: EditorInput): boolean {\n\t\treturn input.typeId === ReplEditorInput.ID;\n\t}\n\tserialize(input: EditorInput): string {\n\t\tassertType(input instanceof ReplEditorInput);\n\t\tconst data: SerializedNotebookEditorData = {\n\t\t\tresource: input.resource,\n\t\t\tpreferredResource: input.preferredResource,\n\t\t\tviewType: input.viewType,\n\t\t\toptions: input.options,\n\t\t\tlabel: input.getName()\n\t\t};\n\t\treturn JSON.stringify(data);\n\t}\n\tdeserialize(instantiationService: IInstantiationService, raw: string) {\n\t\tconst data = <SerializedNotebookEditorData>parse(raw);\n\t\tif (!data) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst { resource, viewType } = data;\n\t\tif (!data || !URI.isUri(resource) || typeof viewType !== 'string') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst input = instantiationService.createInstance(ReplEditorInput, resource, data.label);\n\t\treturn input;\n\t}\n}\n\nRegistry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(\n\tEditorPaneDescriptor.create(\n\t\tReplEditor,\n\t\tREPL_EDITOR_ID,\n\t\t'REPL Editor'\n\t),\n\t[\n\t\tnew SyncDescriptor(ReplEditorInput)\n\t]\n);\n\nRegistry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(\n\tReplEditorInput.ID,\n\tReplEditorSerializer\n);\n\nexport class ReplDocumentContribution extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.replDocument';\n\n\tconstructor(\n\t\t@INotebookService notebookService: INotebookService,\n\t\t@IEditorResolverService editorResolverService: IEditorResolverService,\n\t\t@INotebookEditorModelResolverService private readonly notebookEditorModelResolverService: INotebookEditorModelResolverService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\teditorResolverService.registerEditor(\n\t\t\t// don't match anything, we don't need to support re-opening files as REPL editor at this point\n\t\t\t` `,\n\t\t\t{\n\t\t\t\tid: 'repl',\n\t\t\t\tlabel: 'repl Editor',\n\t\t\t\tpriority: RegisteredEditorPriority.option\n\t\t\t},\n\t\t\t{\n\t\t\t\t// We want to support all notebook types which could have any file extension,\n\t\t\t\t// so we just check if the resource corresponds to a notebook\n\t\t\t\tcanSupportResource: uri => notebookService.getNotebookTextModel(uri) !== undefined,\n\t\t\t\tsinglePerResource: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreateUntitledEditorInput: async ({ resource, options }) => {\n\t\t\t\t\tconst scratchpad = this.configurationService.getValue<boolean>(NotebookSetting.InteractiveWindowPromptToSave) !== true;\n\t\t\t\t\tconst ref = await this.notebookEditorModelResolverService.resolve({ untitledResource: resource }, 'jupyter-notebook', { scratchpad });\n\n\t\t\t\t\t// untitled notebooks are disposed when they get saved. we should not hold a reference\n\t\t\t\t\t// to such a disposed notebook and therefore dispose the reference as well\n\t\t\t\t\tref.object.notebook.onWillDispose(() => {\n\t\t\t\t\t\tref.dispose();\n\t\t\t\t\t});\n\t\t\t\t\tconst label = (options as INotebookEditorOptions)?.label ?? undefined;\n\t\t\t\t\treturn { editor: this.instantiationService.createInstance(ReplEditorInput, resource!, label), options };\n\t\t\t\t},\n\t\t\t\tcreateEditorInput: async ({ resource, options }) => {\n\t\t\t\t\tconst label = (options as INotebookEditorOptions)?.label ?? undefined;\n\t\t\t\t\treturn { editor: this.instantiationService.createInstance(ReplEditorInput, resource, label), options };\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass ReplWindowWorkingCopyEditorHandler extends Disposable implements IWorkbenchContribution, IWorkingCopyEditorHandler {\n\n\tstatic readonly ID = 'workbench.contrib.replWorkingCopyEditorHandler';\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkingCopyEditorService private readonly workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\n\t\tthis._installHandler();\n\t}\n\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean {\n\t\tconst viewType = this._getViewType(workingCopy);\n\t\treturn !!viewType && viewType === 'jupyter-notebook' && extname(workingCopy.resource) === '.replNotebook';\n\n\t}\n\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean {\n\t\tif (!this.handles(workingCopy)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn editor instanceof ReplEditorInput && isEqual(workingCopy.resource, editor.resource);\n\t}\n\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): EditorInput {\n\t\treturn this.instantiationService.createInstance(ReplEditorInput, workingCopy.resource, undefined);\n\t}\n\n\tprivate async _installHandler(): Promise<void> {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tthis._register(this.workingCopyEditorService.registerHandler(this));\n\t}\n\n\tprivate _getViewType(workingCopy: IWorkingCopyIdentifier): string | undefined {\n\t\treturn NotebookWorkingCopyTypeIdentifier.parse(workingCopy.typeId);\n\t}\n}\n\nregisterWorkbenchContribution2(ReplWindowWorkingCopyEditorHandler.ID, ReplWindowWorkingCopyEditorHandler, WorkbenchPhase.BlockRestore);\nregisterWorkbenchContribution2(ReplDocumentContribution.ID, ReplDocumentContribution, WorkbenchPhase.BlockRestore);\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'repl.execute',\n\t\t\ttitle: localize2('repl.execute', 'Execute REPL input'),\n\t\t\tcategory: 'REPL',\n\t\t\tkeybinding: [{\n\t\t\t\twhen: ContextKeyExpr.equals('activeEditor', 'workbench.editor.repl'),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\t\t\t\tweight: NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT\n\t\t\t}, {\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('activeEditor', 'workbench.editor.repl'),\n\t\t\t\t\tContextKeyExpr.equals('config.interactiveWindow.executeWithShiftEnter', true)\n\t\t\t\t),\n\t\t\t\tprimary: KeyMod.Shift | KeyCode.Enter,\n\t\t\t\tweight: NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT\n\t\t\t}, {\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('activeEditor', 'workbench.editor.repl'),\n\t\t\t\t\tContextKeyExpr.equals('config.interactiveWindow.executeWithShiftEnter', false)\n\t\t\t\t),\n\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t\tweight: NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT\n\t\t\t}],\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.ReplInputExecute\n\t\t\t\t}\n\t\t\t],\n\t\t\ticon: icons.executeIcon,\n\t\t\tf1: false,\n\t\t\tmetadata: {\n\t\t\t\tdescription: 'Execute the Contents of the Input Box',\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'resource',\n\t\t\t\t\t\tdescription: 'Interactive resource Uri',\n\t\t\t\t\t\tisOptional: true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, context?: UriComponents): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst bulkEditService = accessor.get(IBulkEditService);\n\t\tconst historyService = accessor.get(IInteractiveHistoryService);\n\t\tconst notebookEditorService = accessor.get(INotebookEditorService);\n\t\tlet editorControl: { notebookEditor: NotebookEditorWidget | undefined; codeEditor: CodeEditorWidget } | undefined;\n\t\tif (context) {\n\t\t\tconst resourceUri = URI.revive(context);\n\t\t\tconst editors = editorService.findEditors(resourceUri);\n\t\t\tfor (const found of editors) {\n\t\t\t\tif (found.editor.typeId === ReplEditorInput.ID) {\n\t\t\t\t\tconst editor = await editorService.openEditor(found.editor, found.groupId);\n\t\t\t\t\teditorControl = editor?.getControl() as { notebookEditor: NotebookEditorWidget | undefined; codeEditor: CodeEditorWidget } | undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\teditorControl = editorService.activeEditorPane?.getControl() as { notebookEditor: NotebookEditorWidget | undefined; codeEditor: CodeEditorWidget } | undefined;\n\t\t}\n\n\t\tif (editorControl) {\n\t\t\texecuteReplInput(bulkEditService, historyService, notebookEditorService, editorControl);\n\t\t}\n\t}\n});\n\nasync function executeReplInput(\n\tbulkEditService: IBulkEditService,\n\thistoryService: IInteractiveHistoryService,\n\tnotebookEditorService: INotebookEditorService,\n\teditorControl: { notebookEditor: NotebookEditorWidget | undefined; codeEditor: CodeEditorWidget }) {\n\n\tif (editorControl && editorControl.notebookEditor && editorControl.codeEditor) {\n\t\tconst notebookDocument = editorControl.notebookEditor.textModel;\n\t\tconst textModel = editorControl.codeEditor.getModel();\n\t\tconst activeKernel = editorControl.notebookEditor.activeKernel;\n\t\tconst language = activeKernel?.supportedLanguages[0] ?? PLAINTEXT_LANGUAGE_ID;\n\n\t\tif (notebookDocument && textModel) {\n\t\t\tconst index = notebookDocument.length - 1;\n\t\t\tconst value = textModel.getValue();\n\n\t\t\tif (isFalsyOrWhitespace(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\thistoryService.replaceLast(notebookDocument.uri, value);\n\t\t\thistoryService.addToHistory(notebookDocument.uri, '');\n\t\t\ttextModel.setValue('');\n\t\t\tnotebookDocument.cells[index].resetTextBuffer(textModel.getTextBuffer());\n\n\t\t\tconst collapseState = editorControl.notebookEditor.notebookOptions.getDisplayOptions().interactiveWindowCollapseCodeCells === 'fromEditor' ?\n\t\t\t\t{\n\t\t\t\t\tinputCollapsed: false,\n\t\t\t\t\toutputCollapsed: false\n\t\t\t\t} :\n\t\t\t\tundefined;\n\n\t\t\tawait bulkEditService.apply([\n\t\t\t\tnew ResourceNotebookCellEdit(notebookDocument.uri,\n\t\t\t\t\t{\n\t\t\t\t\t\teditType: CellEditType.Replace,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\tcells: [{\n\t\t\t\t\t\t\tcellKind: CellKind.Code,\n\t\t\t\t\t\t\tmime: undefined,\n\t\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\t\tsource: value,\n\t\t\t\t\t\t\toutputs: [],\n\t\t\t\t\t\t\tmetadata: {},\n\t\t\t\t\t\t\tcollapseState\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t]);\n\n\t\t\t// reveal the cell into view first\n\t\t\tconst range = { start: index, end: index + 1 };\n\t\t\teditorControl.notebookEditor.revealCellRangeInView(range);\n\t\t\tawait editorControl.notebookEditor.executeNotebookCells(editorControl.notebookEditor.getCellsInRange({ start: index, end: index + 1 }));\n\n\t\t\t// update the selection and focus in the extension host model\n\t\t\tconst editor = notebookEditorService.getNotebookEditor(editorControl.notebookEditor.getId());\n\t\t\tif (editor) {\n\t\t\t\teditor.setSelections([range]);\n\t\t\t\teditor.setFocus(range);\n\t\t\t}\n\t\t}\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.find.replInputFocus',\n\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\twhen: ContextKeyExpr.equals('view', REPL_VIEW_ID),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyF,\n\tsecondary: [KeyCode.F3],\n\thandler: (accessor) => {\n\t\tgetReplView(accessor.get(IViewsService))?.openFind();\n\t}\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB,SAAS,sBAAsB,2BAA2B;AAC1D,SAAS,kBAAkB,wBAAwB,yBAAyB;AAC5E,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,KAAK,qBAAqB;AACnC,SAAS,uBAAuB,wBAAwB;AACxD,SAAS,mBAAmB;AAC5B,SAAS,cAAc,UAAU,iBAAiB,mCAAmC,sBAAsB;AAC3G,SAAS,kCAAkC;AAC3C,SAAS,kBAAkB;AAC3B,SAAS,uBAAuB;AAChC,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB,gCAAgC,sBAAsB;AACvF,SAAS,yBAAyB;AAClC,SAAS,8BAA8B;AACvC,SAAS,2BAA2B,iCAAiC;AACrE,SAAS,SAAS,eAAe;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB,gCAAgC;AACjE,SAAS,2CAA2C;AACpD,SAAS,2BAA2B;AACpC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,6BAA6B;AACtC,SAAS,gCAAgC;AACzC,SAAS,kCAAkC;AAC3C,SAAS,4BAA4B;AACrC,SAAS,8BAA8B;AACvC,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB,wBAAwB;AACtD,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAC9B,SAAS,SAAS,cAAc;AAChC,SAAS,SAAS,QAAQ,uBAAuB;AACjD,SAAS,iBAAiB;AAC1B,SAAS,4CAA4C;AACrD,YAAY,WAAW;AACvB,SAAS,sBAAsB;AAC/B,SAAS,8BAA8B;AAGvC,MAAM,qBAAkD;AAAA,EAlDxD,OAkDwD;AAAA;AAAA;AAAA,EACvD,aAAa,OAA6B;AACzC,WAAO,MAAM,WAAW,gBAAgB;AAAA,EACzC;AAAA,EACA,UAAU,OAA4B;AACrC,eAAW,iBAAiB,eAAe;AAC3C,UAAM,OAAqC;AAAA,MAC1C,UAAU,MAAM;AAAA,MAChB,mBAAmB,MAAM;AAAA,MACzB,UAAU,MAAM;AAAA,MAChB,SAAS,MAAM;AAAA,MACf,OAAO,MAAM,QAAQ;AAAA,IACtB;AACA,WAAO,KAAK,UAAU,IAAI;AAAA,EAC3B;AAAA,EACA,YAAY,sBAA6C,KAAa;AACrE,UAAM,OAAqC,MAAM,GAAG;AACpD,QAAI,CAAC,MAAM;AACV,aAAO;AAAA,IACR;AACA,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,QAAI,CAAC,QAAQ,CAAC,IAAI,MAAM,QAAQ,KAAK,OAAO,aAAa,UAAU;AAClE,aAAO;AAAA,IACR;AAEA,UAAM,QAAQ,qBAAqB,eAAe,iBAAiB,UAAU,KAAK,KAAK;AACvF,WAAO;AAAA,EACR;AACD;AAEA,SAAS,GAAwB,iBAAiB,UAAU,EAAE;AAAA,EAC7D,qBAAqB;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA;AAAA,IACC,IAAI,eAAe,eAAe;AAAA,EACnC;AACD;AAEA,SAAS,GAA2B,iBAAiB,aAAa,EAAE;AAAA,EACnE,gBAAgB;AAAA,EAChB;AACD;AAEO,IAAM,2BAAN,cAAuC,WAA6C;AAAA,EAI1F,YACmB,iBACM,uBAC8B,oCACd,sBACA,sBACvC;AACD,UAAM;AAJgD;AACd;AACA;AAIxC,0BAAsB;AAAA;AAAA,MAErB;AAAA,MACA;AAAA,QACC,IAAI;AAAA,QACJ,OAAO;AAAA,QACP,UAAU,yBAAyB;AAAA,MACpC;AAAA,MACA;AAAA;AAAA;AAAA,QAGC,oBAAoB,gCAAO,gBAAgB,qBAAqB,GAAG,MAAM,QAArD;AAAA,QACpB,mBAAmB;AAAA,MACpB;AAAA,MACA;AAAA,QACC,2BAA2B,8BAAO,EAAE,UAAU,QAAQ,MAAM;AAC3D,gBAAM,aAAa,KAAK,qBAAqB,SAAkB,gBAAgB,6BAA6B,MAAM;AAClH,gBAAM,MAAM,MAAM,KAAK,mCAAmC,QAAQ,EAAE,kBAAkB,SAAS,GAAG,oBAAoB,EAAE,WAAW,CAAC;AAIpI,cAAI,OAAO,SAAS,cAAc,MAAM;AACvC,gBAAI,QAAQ;AAAA,UACb,CAAC;AACD,gBAAM,QAAS,SAAoC,SAAS;AAC5D,iBAAO,EAAE,QAAQ,KAAK,qBAAqB,eAAe,iBAAiB,UAAW,KAAK,GAAG,QAAQ;AAAA,QACvG,GAX2B;AAAA,QAY3B,mBAAmB,8BAAO,EAAE,UAAU,QAAQ,MAAM;AACnD,gBAAM,QAAS,SAAoC,SAAS;AAC5D,iBAAO,EAAE,QAAQ,KAAK,qBAAqB,eAAe,iBAAiB,UAAU,KAAK,GAAG,QAAQ;AAAA,QACtG,GAHmB;AAAA,MAIpB;AAAA,IACD;AAAA,EACD;AAAA,EA9ID,OAgG2F;AAAA;AAAA;AAAA,EAE1F,OAAgB,KAAK;AA6CtB;AA/Ca,2BAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATU;AAiDb,IAAM,qCAAN,cAAiD,WAAwE;AAAA,EAIxH,YACyC,sBACI,0BACR,kBACnC;AACD,UAAM;AAJkC;AACI;AACR;AAIpC,SAAK,gBAAgB;AAAA,EACtB;AAAA,EA7JD,OAiJyH;AAAA;AAAA;AAAA,EAExH,OAAgB,KAAK;AAAA,EAYrB,QAAQ,aAA8C;AACrD,UAAM,WAAW,KAAK,aAAa,WAAW;AAC9C,WAAO,CAAC,CAAC,YAAY,aAAa,sBAAsB,QAAQ,YAAY,QAAQ,MAAM;AAAA,EAE3F;AAAA,EAEA,OAAO,aAAqC,QAA8B;AACzE,QAAI,CAAC,KAAK,QAAQ,WAAW,GAAG;AAC/B,aAAO;AAAA,IACR;AAEA,WAAO,kBAAkB,mBAAmB,QAAQ,YAAY,UAAU,OAAO,QAAQ;AAAA,EAC1F;AAAA,EAEA,aAAa,aAAkD;AAC9D,WAAO,KAAK,qBAAqB,eAAe,iBAAiB,YAAY,UAAU,MAAS;AAAA,EACjG;AAAA,EAEA,MAAc,kBAAiC;AAC9C,UAAM,KAAK,iBAAiB,kCAAkC;AAE9D,SAAK,UAAU,KAAK,yBAAyB,gBAAgB,IAAI,CAAC;AAAA,EACnE;AAAA,EAEQ,aAAa,aAAyD;AAC7E,WAAO,kCAAkC,MAAM,YAAY,MAAM;AAAA,EAClE;AACD;AAzCM,qCAAN;AAAA,EAKG;AAAA,EACA;AAAA,EACA;AAAA,GAPG;AA2CN,+BAA+B,mCAAmC,IAAI,oCAAoC,eAAe,YAAY;AACrI,+BAA+B,yBAAyB,IAAI,0BAA0B,eAAe,YAAY;AAEjH,gBAAgB,cAAc,QAAQ;AAAA,EACrC,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,gBAAgB,oBAAoB;AAAA,MACrD,UAAU;AAAA,MACV,YAAY,CAAC;AAAA,QACZ,MAAM,eAAe,OAAO,gBAAgB,uBAAuB;AAAA,QACnE,SAAS,OAAO,UAAU,QAAQ;AAAA,QAClC,QAAQ;AAAA,MACT,GAAG;AAAA,QACF,MAAM,eAAe;AAAA,UACpB,eAAe,OAAO,gBAAgB,uBAAuB;AAAA,UAC7D,eAAe,OAAO,kDAAkD,IAAI;AAAA,QAC7E;AAAA,QACA,SAAS,OAAO,QAAQ,QAAQ;AAAA,QAChC,QAAQ;AAAA,MACT,GAAG;AAAA,QACF,MAAM,eAAe;AAAA,UACpB,eAAe,OAAO,gBAAgB,uBAAuB;AAAA,UAC7D,eAAe,OAAO,kDAAkD,KAAK;AAAA,QAC9E;AAAA,QACA,SAAS,QAAQ;AAAA,QACjB,QAAQ;AAAA,MACT,CAAC;AAAA,MACD,MAAM;AAAA,QACL;AAAA,UACC,IAAI,OAAO;AAAA,QACZ;AAAA,MACD;AAAA,MACA,MAAM,MAAM;AAAA,MACZ,IAAI;AAAA,MACJ,UAAU;AAAA,QACT,aAAa;AAAA,QACb,MAAM;AAAA,UACL;AAAA,YACC,MAAM;AAAA,YACN,aAAa;AAAA,YACb,YAAY;AAAA,UACb;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA4B,SAAwC;AAC7E,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,UAAM,iBAAiB,SAAS,IAAI,0BAA0B;AAC9D,UAAM,wBAAwB,SAAS,IAAI,sBAAsB;AACjE,QAAI;AACJ,QAAI,SAAS;AACZ,YAAM,cAAc,IAAI,OAAO,OAAO;AACtC,YAAM,UAAU,cAAc,YAAY,WAAW;AACrD,iBAAW,SAAS,SAAS;AAC5B,YAAI,MAAM,OAAO,WAAW,gBAAgB,IAAI;AAC/C,gBAAM,SAAS,MAAM,cAAc,WAAW,MAAM,QAAQ,MAAM,OAAO;AACzE,0BAAgB,QAAQ,WAAW;AACnC;AAAA,QACD;AAAA,MACD;AAAA,IACD,OACK;AACJ,sBAAgB,cAAc,kBAAkB,WAAW;AAAA,IAC5D;AAEA,QAAI,eAAe;AAClB,uBAAiB,iBAAiB,gBAAgB,uBAAuB,aAAa;AAAA,IACvF;AAAA,EACD;AACD,CAAC;AAED,eAAe,iBACd,iBACA,gBACA,uBACA,eAAmG;AAEnG,MAAI,iBAAiB,cAAc,kBAAkB,cAAc,YAAY;AAC9E,UAAM,mBAAmB,cAAc,eAAe;AACtD,UAAM,YAAY,cAAc,WAAW,SAAS;AACpD,UAAM,eAAe,cAAc,eAAe;AAClD,UAAM,WAAW,cAAc,mBAAmB,CAAC,KAAK;AAExD,QAAI,oBAAoB,WAAW;AAClC,YAAM,QAAQ,iBAAiB,SAAS;AACxC,YAAM,QAAQ,UAAU,SAAS;AAEjC,UAAI,oBAAoB,KAAK,GAAG;AAC/B;AAAA,MACD;AAEA,qBAAe,YAAY,iBAAiB,KAAK,KAAK;AACtD,qBAAe,aAAa,iBAAiB,KAAK,EAAE;AACpD,gBAAU,SAAS,EAAE;AACrB,uBAAiB,MAAM,KAAK,EAAE,gBAAgB,UAAU,cAAc,CAAC;AAEvE,YAAM,gBAAgB,cAAc,eAAe,gBAAgB,kBAAkB,EAAE,uCAAuC,eAC7H;AAAA,QACC,gBAAgB;AAAA,QAChB,iBAAiB;AAAA,MAClB,IACA;AAED,YAAM,gBAAgB,MAAM;AAAA,QAC3B,IAAI;AAAA,UAAyB,iBAAiB;AAAA,UAC7C;AAAA,YACC,UAAU,aAAa;AAAA,YACvB;AAAA,YACA,OAAO;AAAA,YACP,OAAO,CAAC;AAAA,cACP,UAAU,SAAS;AAAA,cACnB,MAAM;AAAA,cACN;AAAA,cACA,QAAQ;AAAA,cACR,SAAS,CAAC;AAAA,cACV,UAAU,CAAC;AAAA,cACX;AAAA,YACD,CAAC;AAAA,UACF;AAAA,QACD;AAAA,MACD,CAAC;AAGD,YAAM,QAAQ,EAAE,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC7C,oBAAc,eAAe,sBAAsB,KAAK;AACxD,YAAM,cAAc,eAAe,qBAAqB,cAAc,eAAe,gBAAgB,EAAE,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC,CAAC;AAGtI,YAAM,SAAS,sBAAsB,kBAAkB,cAAc,eAAe,MAAM,CAAC;AAC3F,UAAI,QAAQ;AACX,eAAO,cAAc,CAAC,KAAK,CAAC;AAC5B,eAAO,SAAS,KAAK;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACD;AAhEe;AAkEf,oBAAoB,iCAAiC;AAAA,EACpD,IAAI;AAAA,EACJ,QAAQ,iBAAiB,mBAAmB;AAAA,EAC5C,MAAM,eAAe,OAAO,QAAQ,YAAY;AAAA,EAChD,SAAS,OAAO,UAAU,OAAO,MAAM,QAAQ;AAAA,EAC/C,WAAW,CAAC,QAAQ,EAAE;AAAA,EACtB,SAAS,wBAAC,aAAa;AACtB,gBAAY,SAAS,IAAI,aAAa,CAAC,GAAG,SAAS;AAAA,EACpD,GAFS;AAGV,CAAC;",
  "names": []
}
