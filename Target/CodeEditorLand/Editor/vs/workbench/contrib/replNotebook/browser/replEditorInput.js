var g=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var c=(d,r,e,t)=>{for(var o=t>1?void 0:t?x(r,e):r,l=d.length-1,s;l>=0;l--)(s=d[l])&&(o=(t?s(r,e,o):s(o))||o);return t&&o&&g(r,e,o),o},i=(d,r)=>(e,t)=>r(e,t,d);import{ITextModelService as M}from"../../../../editor/common/services/resolverService.js";import{ITextResourceConfigurationService as E}from"../../../../editor/common/services/textResourceConfiguration.js";import{IConfigurationService as R}from"../../../../platform/configuration/common/configuration.js";import{IFileDialogService as y}from"../../../../platform/dialogs/common/dialogs.js";import{IFileService as C}from"../../../../platform/files/common/files.js";import{ILabelService as T}from"../../../../platform/label/common/label.js";import{EditorInputCapabilities as a}from"../../../common/editor.js";import{ICustomEditorLabelService as k}from"../../../services/editor/common/customEditorLabelService.js";import{IEditorService as N}from"../../../services/editor/common/editorService.js";import{IExtensionService as L}from"../../../services/extensions/common/extensions.js";import{IFilesConfigurationService as j}from"../../../services/filesConfiguration/common/filesConfigurationService.js";import{IInteractiveHistoryService as w}from"../../interactive/browser/interactiveHistoryService.js";import{CellEditType as D,CellKind as p,NotebookSetting as P}from"../../notebook/common/notebookCommon.js";import{NotebookEditorInput as F}from"../../notebook/common/notebookEditorInput.js";import{INotebookEditorModelResolverService as U}from"../../notebook/common/notebookEditorModelResolverService.js";import{INotebookService as K}from"../../notebook/common/notebookService.js";let n=class extends F{constructor(e,t,o,l,s,u,m,f,v,I,h,S,B,H,b){super(e,void 0,"jupyter-notebook",{},o,l,s,u,m,f,v,I,h,S);this.historyService=B;this._textModelService=H;this.isScratchpad=e.scheme==="untitled"&&b.getValue(P.InteractiveWindowPromptToSave)!==!0,this.label=t??this.createEditorLabel(e)}static ID="workbench.editorinputs.replEditorInput";inputModelRef;isScratchpad;label;isDisposing=!1;createEditorLabel(e){if(!e)return"REPL";if(e.scheme==="untitled"){const o=/Untitled-(\d+)\./.exec(e.path);if(o?.length===2)return`REPL - ${o[1]}`}const t=e.path.split("/").pop();return t?`REPL - ${t}`:"REPL"}get typeId(){return n.ID}get editorId(){return"repl"}getName(){return this.label}get editorInputs(){return[this]}get capabilities(){const e=super.capabilities,t=this.isScratchpad?a.Scratchpad:0;return e|a.Readonly|t}async resolve(){const e=await super.resolve();return e&&await this.ensureInputBoxCell(e.notebook),e}async ensureInputBoxCell(e){const t=e.cells[e.cells.length-1];(!t||t.cellKind===p.Markup||t.outputs.length>0||t.internalMetadata.executionOrder!==void 0)&&e.applyEdits([{editType:D.Replace,index:e.cells.length,count:0,cells:[{cellKind:p.Code,language:"python",mime:void 0,outputs:[],source:""}]}],!0,void 0,()=>{},void 0,!1)}async resolveInput(e){if(this.inputModelRef)return this.inputModelRef.object.textEditorModel;const t=e.cells[e.cells.length-1];if(!t)throw new Error("The REPL editor requires at least one cell for the input box.");return this.inputModelRef=await this._textModelService.createModelReference(t.uri),this.inputModelRef.object.textEditorModel}dispose(){this.isDisposing||(this.isDisposing=!0,this.editorModelReference?.object.revert({soft:!0}),this.inputModelRef?.dispose(),super.dispose())}};n=c([i(2,K),i(3,U),i(4,y),i(5,T),i(6,C),i(7,j),i(8,L),i(9,N),i(10,E),i(11,k),i(12,w),i(13,M),i(14,R)],n);export{n as ReplEditorInput};
