{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/share/browser/shareService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { score } from '../../../../editor/common/languageSelector.js';\nimport { localize } from '../../../../nls.js';\nimport { ISubmenuItem } from '../../../../platform/actions/common/actions.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IShareProvider, IShareService, IShareableItem } from '../common/share.js';\n\nexport const ShareProviderCountContext = new RawContextKey<number>('shareProviderCount', 0, localize('shareProviderCount', \"The number of available share providers\"));\n\ntype ShareEvent = {\n\tproviderId: string;\n};\ntype ShareClassification = {\n\towner: 'joyceerhl'; comment: 'Reporting which share provider is invoked.';\n\tproviderId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the selected share provider.' };\n};\n\nexport class ShareService implements IShareService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly providerCount: IContextKey<number>;\n\tprivate readonly _providers = new Set<IShareProvider>();\n\n\tconstructor(\n\t\t@IContextKeyService private contextKeyService: IContextKeyService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IQuickInputService private quickInputService: IQuickInputService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.providerCount = ShareProviderCountContext.bindTo(this.contextKeyService);\n\t}\n\n\tregisterShareProvider(provider: IShareProvider): IDisposable {\n\t\tthis._providers.add(provider);\n\t\tthis.providerCount.set(this._providers.size);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._providers.delete(provider);\n\t\t\t\tthis.providerCount.set(this._providers.size);\n\t\t\t}\n\t\t};\n\t}\n\n\tgetShareActions(): ISubmenuItem[] {\n\t\t// todo@joyceerhl return share actions\n\t\treturn [];\n\t}\n\n\tasync provideShare(item: IShareableItem, token: CancellationToken): Promise<URI | string | undefined> {\n\t\tconst language = this.codeEditorService.getActiveCodeEditor()?.getModel()?.getLanguageId() ?? '';\n\t\tconst providers = [...this._providers.values()]\n\t\t\t.filter((p) => score(p.selector, item.resourceUri, language, true, undefined, undefined) > 0)\n\t\t\t.sort((a, b) => a.priority - b.priority);\n\n\t\tif (providers.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (providers.length === 1) {\n\t\t\tthis.telemetryService.publicLog2<ShareEvent, ShareClassification>('shareService.share', { providerId: providers[0].id });\n\t\t\treturn providers[0].provideShare(item, token);\n\t\t}\n\n\t\tconst items: (IQuickPickItem & { provider: IShareProvider })[] = providers.map((p) => ({ label: p.label, provider: p }));\n\t\tconst selected = await this.quickInputService.pick(items, { canPickMany: false, placeHolder: localize('type to filter', 'Choose how to share {0}', this.labelService.getUriLabel(item.resourceUri)) }, token);\n\n\t\tif (selected !== undefined) {\n\t\t\tthis.telemetryService.publicLog2<ShareEvent, ShareClassification>('shareService.share', { providerId: selected.provider.id });\n\t\t\treturn selected.provider.provideShare(item, token);\n\t\t}\n\n\t\treturn;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AACpB,SAAS,0BAA0B;AACnC,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,oBAAoB;AAC7B,SAAS,aAAa,oBAAoB,qBAAqB;AAC/D,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB,sBAAsB;AACnD,SAAS,yBAAyB;AAClC,SAAS,gBAAgB,eAAe,sBAAsB;AAEvD,MAAM,4BAA4B,IAAI,cAAsB,sBAAsB,GAAG,SAAS,sBAAsB,yCAAyC,CAAC;AAU9J,IAAM,eAAN,MAA4C;AAAA,EAMlD,YAC6B,mBACI,cACJ,mBACS,mBACD,kBACnC;AAL2B;AACI;AACJ;AACS;AACD;AAEpC,SAAK,gBAAgB,0BAA0B,OAAO,KAAK,iBAAiB;AAAA,EAC7E;AAAA,EA1CD,OA4BmD;AAAA;AAAA;AAAA,EACzC;AAAA,EAEA;AAAA,EACQ,aAAa,oBAAI,IAAoB;AAAA,EAYtD,sBAAsB,UAAuC;AAC5D,SAAK,WAAW,IAAI,QAAQ;AAC5B,SAAK,cAAc,IAAI,KAAK,WAAW,IAAI;AAC3C,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,aAAK,WAAW,OAAO,QAAQ;AAC/B,aAAK,cAAc,IAAI,KAAK,WAAW,IAAI;AAAA,MAC5C,GAHS;AAAA,IAIV;AAAA,EACD;AAAA,EAEA,kBAAkC;AAEjC,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,aAAa,MAAsB,OAA6D;AACrG,UAAM,WAAW,KAAK,kBAAkB,oBAAoB,GAAG,SAAS,GAAG,cAAc,KAAK;AAC9F,UAAM,YAAY,CAAC,GAAG,KAAK,WAAW,OAAO,CAAC,EAC5C,OAAO,CAAC,MAAM,MAAM,EAAE,UAAU,KAAK,aAAa,UAAU,MAAM,QAAW,MAAS,IAAI,CAAC,EAC3F,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ;AAExC,QAAI,UAAU,WAAW,GAAG;AAC3B,aAAO;AAAA,IACR;AAEA,QAAI,UAAU,WAAW,GAAG;AAC3B,WAAK,iBAAiB,WAA4C,sBAAsB,EAAE,YAAY,UAAU,CAAC,EAAE,GAAG,CAAC;AACvH,aAAO,UAAU,CAAC,EAAE,aAAa,MAAM,KAAK;AAAA,IAC7C;AAEA,UAAM,QAA2D,UAAU,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,UAAU,EAAE,EAAE;AACvH,UAAM,WAAW,MAAM,KAAK,kBAAkB,KAAK,OAAO,EAAE,aAAa,OAAO,aAAa,SAAS,kBAAkB,2BAA2B,KAAK,aAAa,YAAY,KAAK,WAAW,CAAC,EAAE,GAAG,KAAK;AAE5M,QAAI,aAAa,QAAW;AAC3B,WAAK,iBAAiB,WAA4C,sBAAsB,EAAE,YAAY,SAAS,SAAS,GAAG,CAAC;AAC5H,aAAO,SAAS,SAAS,aAAa,MAAM,KAAK;AAAA,IAClD;AAEA;AAAA,EACD;AACD;AAzDa,eAAN;AAAA,EAOJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;",
  "names": []
}
