{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/authentication/browser/actions/manageTrustedExtensionsForAccountAction.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { fromNow } from '../../../../../base/common/date.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { Action2 } from '../../../../../platform/actions/common/actions.js';\nimport { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IProductService } from '../../../../../platform/product/common/productService.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { IAuthenticationAccessService } from '../../../../services/authentication/browser/authenticationAccessService.js';\nimport { IAuthenticationUsageService } from '../../../../services/authentication/browser/authenticationUsageService.js';\nimport { AllowedExtension, IAuthenticationService } from '../../../../services/authentication/common/authentication.js';\nimport { IExtensionService } from '../../../../services/extensions/common/extensions.js';\n\nexport class ManageTrustedExtensionsForAccountAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: '_manageTrustedExtensionsForAccount',\n\t\t\ttitle: localize2('manageTrustedExtensionsForAccount', \"Manage Trusted Extensions For Account\"),\n\t\t\tcategory: localize2('accounts', \"Accounts\"),\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, options?: { providerId: string; accountLabel: string }): Promise<void> {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\treturn instantiationService.createInstance(ManageTrustedExtensionsForAccountActionImpl).run(options);\n\t}\n}\n\ninterface TrustedExtensionsQuickPickItem extends IQuickPickItem {\n\textension: AllowedExtension;\n\tlastUsed?: number;\n}\n\nclass ManageTrustedExtensionsForAccountActionImpl {\n\tconstructor(\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@IAuthenticationUsageService private readonly _authenticationUsageService: IAuthenticationUsageService,\n\t\t@IAuthenticationAccessService private readonly _authenticationAccessService: IAuthenticationAccessService\n\t) { }\n\n\tasync run(options?: { providerId: string; accountLabel: string }) {\n\t\tconst { providerId, accountLabel } = await this._resolveProviderAndAccountLabel(options?.providerId, options?.accountLabel);\n\t\tif (!providerId || !accountLabel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst items = await this._getItems(providerId, accountLabel);\n\t\tif (!items.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = this._createQuickPick(disposables, providerId, accountLabel);\n\t\tpicker.items = items;\n\t\tpicker.selectedItems = items.filter((i): i is TrustedExtensionsQuickPickItem => i.type !== 'separator' && !!i.picked);\n\t\tpicker.show();\n\t}\n\n\tprivate async _resolveProviderAndAccountLabel(providerId: string | undefined, accountLabel: string | undefined) {\n\t\tif (!providerId || !accountLabel) {\n\t\t\tconst accounts = new Array<{ providerId: string; providerLabel: string; accountLabel: string }>();\n\t\t\tfor (const id of this._authenticationService.getProviderIds()) {\n\t\t\t\tconst providerLabel = this._authenticationService.getProvider(id).label;\n\t\t\t\tconst sessions = await this._authenticationService.getSessions(id);\n\t\t\t\tconst uniqueAccountLabels = new Set<string>();\n\t\t\t\tfor (const session of sessions) {\n\t\t\t\t\tif (!uniqueAccountLabels.has(session.account.label)) {\n\t\t\t\t\t\tuniqueAccountLabels.add(session.account.label);\n\t\t\t\t\t\taccounts.push({ providerId: id, providerLabel, accountLabel: session.account.label });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst pick = await this._quickInputService.pick(\n\t\t\t\taccounts.map(account => ({\n\t\t\t\t\tproviderId: account.providerId,\n\t\t\t\t\tlabel: account.accountLabel,\n\t\t\t\t\tdescription: account.providerLabel\n\t\t\t\t})),\n\t\t\t\t{\n\t\t\t\t\tplaceHolder: localize('pickAccount', \"Pick an account to manage trusted extensions for\"),\n\t\t\t\t\tmatchOnDescription: true,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (pick) {\n\t\t\t\tproviderId = pick.providerId;\n\t\t\t\taccountLabel = pick.label;\n\t\t\t} else {\n\t\t\t\treturn { providerId: undefined, accountLabel: undefined };\n\t\t\t}\n\t\t}\n\t\treturn { providerId, accountLabel };\n\t}\n\n\tprivate async _getItems(providerId: string, accountLabel: string) {\n\t\tconst allowedExtensions = this._authenticationAccessService.readAllowedExtensions(providerId, accountLabel);\n\t\tconst trustedExtensionAuthAccess = this._productService.trustedExtensionAuthAccess;\n\t\tconst trustedExtensionIds =\n\t\t\t// Case 1: trustedExtensionAuthAccess is an array\n\t\t\tArray.isArray(trustedExtensionAuthAccess)\n\t\t\t\t? trustedExtensionAuthAccess\n\t\t\t\t// Case 2: trustedExtensionAuthAccess is an object\n\t\t\t\t: typeof trustedExtensionAuthAccess === 'object'\n\t\t\t\t\t? trustedExtensionAuthAccess[providerId] ?? []\n\t\t\t\t\t: [];\n\t\tfor (const extensionId of trustedExtensionIds) {\n\t\t\tconst allowedExtension = allowedExtensions.find(ext => ext.id === extensionId);\n\t\t\tif (!allowedExtension) {\n\t\t\t\t// Add the extension to the allowedExtensions list\n\t\t\t\tconst extension = await this._extensionService.getExtension(extensionId);\n\t\t\t\tif (extension) {\n\t\t\t\t\tallowedExtensions.push({\n\t\t\t\t\t\tid: extensionId,\n\t\t\t\t\t\tname: extension.displayName || extension.name,\n\t\t\t\t\t\tallowed: true,\n\t\t\t\t\t\ttrusted: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Update the extension to be allowed\n\t\t\t\tallowedExtension.allowed = true;\n\t\t\t\tallowedExtension.trusted = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!allowedExtensions.length) {\n\t\t\tthis._dialogService.info(localize('noTrustedExtensions', \"This account has not been used by any extensions.\"));\n\t\t\treturn [];\n\t\t}\n\n\t\tconst usages = this._authenticationUsageService.readAccountUsages(providerId, accountLabel);\n\t\tconst trustedExtensions = [];\n\t\tconst otherExtensions = [];\n\t\tfor (const extension of allowedExtensions) {\n\t\t\tconst usage = usages.find(usage => extension.id === usage.extensionId);\n\t\t\textension.lastUsed = usage?.lastUsed;\n\t\t\tif (extension.trusted) {\n\t\t\t\ttrustedExtensions.push(extension);\n\t\t\t} else {\n\t\t\t\totherExtensions.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tconst sortByLastUsed = (a: AllowedExtension, b: AllowedExtension) => (b.lastUsed || 0) - (a.lastUsed || 0);\n\n\t\tconst items = [\n\t\t\t...otherExtensions.sort(sortByLastUsed).map(this._toQuickPickItem),\n\t\t\t{ type: 'separator', label: localize('trustedExtensions', \"Trusted by Microsoft\") } satisfies IQuickPickSeparator,\n\t\t\t...trustedExtensions.sort(sortByLastUsed).map(this._toQuickPickItem)\n\t\t];\n\n\t\treturn items;\n\t}\n\n\tprivate _toQuickPickItem(extension: AllowedExtension): TrustedExtensionsQuickPickItem {\n\t\tconst lastUsed = extension.lastUsed;\n\t\tconst description = lastUsed\n\t\t\t? localize({ key: 'accountLastUsedDate', comment: ['The placeholder {0} is a string with time information, such as \"3 days ago\"'] }, \"Last used this account {0}\", fromNow(lastUsed, true))\n\t\t\t: localize('notUsed', \"Has not used this account\");\n\t\tlet tooltip: string | undefined;\n\t\tlet disabled: boolean | undefined;\n\t\tif (extension.trusted) {\n\t\t\ttooltip = localize('trustedExtensionTooltip', \"This extension is trusted by Microsoft and\\nalways has access to this account\");\n\t\t\tdisabled = true;\n\t\t}\n\t\treturn {\n\t\t\tlabel: extension.name,\n\t\t\textension,\n\t\t\tdescription,\n\t\t\ttooltip,\n\t\t\tdisabled,\n\t\t\tpicked: extension.allowed === undefined || extension.allowed\n\t\t};\n\t}\n\n\tprivate _createQuickPick(disposableStore: DisposableStore, providerId: string, accountLabel: string) {\n\t\tconst quickPick = disposableStore.add(this._quickInputService.createQuickPick<TrustedExtensionsQuickPickItem>({ useSeparators: true }));\n\t\tquickPick.canSelectMany = true;\n\t\tquickPick.customButton = true;\n\t\tquickPick.customLabel = localize('manageTrustedExtensions.cancel', 'Cancel');\n\n\t\tquickPick.title = localize('manageTrustedExtensions', \"Manage Trusted Extensions\");\n\t\tquickPick.placeholder = localize('manageExtensions', \"Choose which extensions can access this account\");\n\n\t\tdisposableStore.add(quickPick.onDidAccept(() => {\n\t\t\tconst updatedAllowedList = quickPick.items\n\t\t\t\t.filter((item): item is TrustedExtensionsQuickPickItem => item.type !== 'separator')\n\t\t\t\t.map(i => i.extension);\n\n\t\t\tconst allowedExtensionsSet = new Set(quickPick.selectedItems.map(i => i.extension));\n\t\t\tupdatedAllowedList.forEach(extension => {\n\t\t\t\textension.allowed = allowedExtensionsSet.has(extension);\n\t\t\t});\n\t\t\tthis._authenticationAccessService.updateAllowedExtensions(providerId, accountLabel, updatedAllowedList);\n\t\t\tquickPick.hide();\n\t\t}));\n\n\t\tdisposableStore.add(quickPick.onDidHide(() => {\n\t\t\tdisposableStore.dispose();\n\t\t}));\n\n\t\tdisposableStore.add(quickPick.onDidCustom(() => {\n\t\t\tquickPick.hide();\n\t\t}));\n\t\treturn quickPick;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,UAAU,iBAAiB;AACpC,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB,wBAAwB;AACxD,SAAS,uBAAuB;AAChC,SAAS,oBAAoB,gBAAgB,2BAA2B;AACxE,SAAS,oCAAoC;AAC7C,SAAS,mCAAmC;AAC5C,SAAS,kBAAkB,8BAA8B;AACzD,SAAS,yBAAyB;AAE3B,MAAM,gDAAgD,QAAQ;AAAA,EAlBrE,OAkBqE;AAAA;AAAA;AAAA,EACpE,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,qCAAqC,uCAAuC;AAAA,MAC7F,UAAU,UAAU,YAAY,UAAU;AAAA,MAC1C,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAES,IAAI,UAA4B,SAAuE;AAC/G,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,WAAO,qBAAqB,eAAe,2CAA2C,EAAE,IAAI,OAAO;AAAA,EACpG;AACD;AAOA,IAAM,8CAAN,MAAkD;AAAA,EACjD,YACmC,iBACE,mBACH,gBACI,oBACI,wBACK,6BACC,8BAC9C;AAPiC;AACE;AACH;AACI;AACI;AACK;AACC;AAAA,EAC5C;AAAA,EAhDL,OAuCkD;AAAA;AAAA;AAAA,EAWjD,MAAM,IAAI,SAAwD;AACjE,UAAM,EAAE,YAAY,aAAa,IAAI,MAAM,KAAK,gCAAgC,SAAS,YAAY,SAAS,YAAY;AAC1H,QAAI,CAAC,cAAc,CAAC,cAAc;AACjC;AAAA,IACD;AAEA,UAAM,QAAQ,MAAM,KAAK,UAAU,YAAY,YAAY;AAC3D,QAAI,CAAC,MAAM,QAAQ;AAClB;AAAA,IACD;AACA,UAAM,cAAc,IAAI,gBAAgB;AACxC,UAAM,SAAS,KAAK,iBAAiB,aAAa,YAAY,YAAY;AAC1E,WAAO,QAAQ;AACf,WAAO,gBAAgB,MAAM,OAAO,CAAC,MAA2C,EAAE,SAAS,eAAe,CAAC,CAAC,EAAE,MAAM;AACpH,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,gCAAgC,YAAgC,cAAkC;AAC/G,QAAI,CAAC,cAAc,CAAC,cAAc;AACjC,YAAM,WAAW,IAAI,MAA2E;AAChG,iBAAW,MAAM,KAAK,uBAAuB,eAAe,GAAG;AAC9D,cAAM,gBAAgB,KAAK,uBAAuB,YAAY,EAAE,EAAE;AAClE,cAAM,WAAW,MAAM,KAAK,uBAAuB,YAAY,EAAE;AACjE,cAAM,sBAAsB,oBAAI,IAAY;AAC5C,mBAAW,WAAW,UAAU;AAC/B,cAAI,CAAC,oBAAoB,IAAI,QAAQ,QAAQ,KAAK,GAAG;AACpD,gCAAoB,IAAI,QAAQ,QAAQ,KAAK;AAC7C,qBAAS,KAAK,EAAE,YAAY,IAAI,eAAe,cAAc,QAAQ,QAAQ,MAAM,CAAC;AAAA,UACrF;AAAA,QACD;AAAA,MACD;AAEA,YAAM,OAAO,MAAM,KAAK,mBAAmB;AAAA,QAC1C,SAAS,IAAI,cAAY;AAAA,UACxB,YAAY,QAAQ;AAAA,UACpB,OAAO,QAAQ;AAAA,UACf,aAAa,QAAQ;AAAA,QACtB,EAAE;AAAA,QACF;AAAA,UACC,aAAa,SAAS,eAAe,kDAAkD;AAAA,UACvF,oBAAoB;AAAA,QACrB;AAAA,MACD;AAEA,UAAI,MAAM;AACT,qBAAa,KAAK;AAClB,uBAAe,KAAK;AAAA,MACrB,OAAO;AACN,eAAO,EAAE,YAAY,QAAW,cAAc,OAAU;AAAA,MACzD;AAAA,IACD;AACA,WAAO,EAAE,YAAY,aAAa;AAAA,EACnC;AAAA,EAEA,MAAc,UAAU,YAAoB,cAAsB;AACjE,UAAM,oBAAoB,KAAK,6BAA6B,sBAAsB,YAAY,YAAY;AAC1G,UAAM,6BAA6B,KAAK,gBAAgB;AACxD,UAAM;AAAA;AAAA,MAEL,MAAM,QAAQ,0BAA0B,IACrC,6BAEA,OAAO,+BAA+B,WACrC,2BAA2B,UAAU,KAAK,CAAC,IAC3C,CAAC;AAAA;AACN,eAAW,eAAe,qBAAqB;AAC9C,YAAM,mBAAmB,kBAAkB,KAAK,SAAO,IAAI,OAAO,WAAW;AAC7E,UAAI,CAAC,kBAAkB;AAEtB,cAAM,YAAY,MAAM,KAAK,kBAAkB,aAAa,WAAW;AACvE,YAAI,WAAW;AACd,4BAAkB,KAAK;AAAA,YACtB,IAAI;AAAA,YACJ,MAAM,UAAU,eAAe,UAAU;AAAA,YACzC,SAAS;AAAA,YACT,SAAS;AAAA,UACV,CAAC;AAAA,QACF;AAAA,MACD,OAAO;AAEN,yBAAiB,UAAU;AAC3B,yBAAiB,UAAU;AAAA,MAC5B;AAAA,IACD;AAEA,QAAI,CAAC,kBAAkB,QAAQ;AAC9B,WAAK,eAAe,KAAK,SAAS,uBAAuB,mDAAmD,CAAC;AAC7G,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,SAAS,KAAK,4BAA4B,kBAAkB,YAAY,YAAY;AAC1F,UAAM,oBAAoB,CAAC;AAC3B,UAAM,kBAAkB,CAAC;AACzB,eAAW,aAAa,mBAAmB;AAC1C,YAAM,QAAQ,OAAO,KAAK,CAAAA,WAAS,UAAU,OAAOA,OAAM,WAAW;AACrE,gBAAU,WAAW,OAAO;AAC5B,UAAI,UAAU,SAAS;AACtB,0BAAkB,KAAK,SAAS;AAAA,MACjC,OAAO;AACN,wBAAgB,KAAK,SAAS;AAAA,MAC/B;AAAA,IACD;AAEA,UAAM,iBAAiB,wBAAC,GAAqB,OAAyB,EAAE,YAAY,MAAM,EAAE,YAAY,IAAjF;AAEvB,UAAM,QAAQ;AAAA,MACb,GAAG,gBAAgB,KAAK,cAAc,EAAE,IAAI,KAAK,gBAAgB;AAAA,MACjE,EAAE,MAAM,aAAa,OAAO,SAAS,qBAAqB,sBAAsB,EAAE;AAAA,MAClF,GAAG,kBAAkB,KAAK,cAAc,EAAE,IAAI,KAAK,gBAAgB;AAAA,IACpE;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,iBAAiB,WAA6D;AACrF,UAAM,WAAW,UAAU;AAC3B,UAAM,cAAc,WACjB,SAAS,EAAE,KAAK,uBAAuB,SAAS,CAAC,6EAA6E,EAAE,GAAG,8BAA8B,QAAQ,UAAU,IAAI,CAAC,IACxL,SAAS,WAAW,2BAA2B;AAClD,QAAI;AACJ,QAAI;AACJ,QAAI,UAAU,SAAS;AACtB,gBAAU,SAAS,2BAA2B,+EAA+E;AAC7H,iBAAW;AAAA,IACZ;AACA,WAAO;AAAA,MACN,OAAO,UAAU;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,UAAU,YAAY,UAAa,UAAU;AAAA,IACtD;AAAA,EACD;AAAA,EAEQ,iBAAiB,iBAAkC,YAAoB,cAAsB;AACpG,UAAM,YAAY,gBAAgB,IAAI,KAAK,mBAAmB,gBAAgD,EAAE,eAAe,KAAK,CAAC,CAAC;AACtI,cAAU,gBAAgB;AAC1B,cAAU,eAAe;AACzB,cAAU,cAAc,SAAS,kCAAkC,QAAQ;AAE3E,cAAU,QAAQ,SAAS,2BAA2B,2BAA2B;AACjF,cAAU,cAAc,SAAS,oBAAoB,iDAAiD;AAEtG,oBAAgB,IAAI,UAAU,YAAY,MAAM;AAC/C,YAAM,qBAAqB,UAAU,MACnC,OAAO,CAAC,SAAiD,KAAK,SAAS,WAAW,EAClF,IAAI,OAAK,EAAE,SAAS;AAEtB,YAAM,uBAAuB,IAAI,IAAI,UAAU,cAAc,IAAI,OAAK,EAAE,SAAS,CAAC;AAClF,yBAAmB,QAAQ,eAAa;AACvC,kBAAU,UAAU,qBAAqB,IAAI,SAAS;AAAA,MACvD,CAAC;AACD,WAAK,6BAA6B,wBAAwB,YAAY,cAAc,kBAAkB;AACtG,gBAAU,KAAK;AAAA,IAChB,CAAC,CAAC;AAEF,oBAAgB,IAAI,UAAU,UAAU,MAAM;AAC7C,sBAAgB,QAAQ;AAAA,IACzB,CAAC,CAAC;AAEF,oBAAgB,IAAI,UAAU,YAAY,MAAM;AAC/C,gBAAU,KAAK;AAAA,IAChB,CAAC,CAAC;AACF,WAAO;AAAA,EACR;AACD;AAjLM,8CAAN;AAAA,EAEG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GARG;",
  "names": ["usage"]
}
