var g=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var f=(m,t,i,s)=>{for(var e=s>1?void 0:s?S(t,i):t,n=m.length-1,r;n>=0;n--)(r=m[n])&&(e=(s?r(t,i,e):r(e))||e);return s&&e&&g(t,i,e),e},d=(m,t)=>(i,s)=>t(i,s,m);import{Codicon as k}from"../../../../../base/common/codicons.js";import{fromNow as x}from"../../../../../base/common/date.js";import{DisposableStore as A}from"../../../../../base/common/lifecycle.js";import{ThemeIcon as E}from"../../../../../base/common/themables.js";import{localize as a,localize2 as I}from"../../../../../nls.js";import{Action2 as _}from"../../../../../platform/actions/common/actions.js";import{ICommandService as w}from"../../../../../platform/commands/common/commands.js";import{IDialogService as y}from"../../../../../platform/dialogs/common/dialogs.js";import{IInstantiationService as b}from"../../../../../platform/instantiation/common/instantiation.js";import{IProductService as P}from"../../../../../platform/product/common/productService.js";import{IQuickInputService as Q}from"../../../../../platform/quickinput/common/quickInput.js";import{IAuthenticationAccessService as T}from"../../../../services/authentication/browser/authenticationAccessService.js";import{IAuthenticationUsageService as L}from"../../../../services/authentication/browser/authenticationUsageService.js";import{IAuthenticationService as U}from"../../../../services/authentication/common/authentication.js";import{IExtensionService as D}from"../../../../services/extensions/common/extensions.js";class te extends _{constructor(){super({id:"_manageTrustedExtensionsForAccount",title:I("manageTrustedExtensionsForAccount","Manage Trusted Extensions For Account"),category:I("accounts","Accounts"),f1:!0})}run(t,i){return t.get(b).createInstance(h).run(i)}}let h=class{constructor(t,i,s,e,n,r,o,p){this._productService=t;this._extensionService=i;this._dialogService=s;this._quickInputService=e;this._authenticationService=n;this._authenticationUsageService=r;this._authenticationAccessService=o;this._commandService=p}async run(t){const{providerId:i,accountLabel:s}=await this._resolveProviderAndAccountLabel(t?.providerId,t?.accountLabel);if(!i||!s)return;const e=await this._getItems(i,s);if(!e.length)return;const n=new A,r=this._createQuickPick(n,i,s);r.items=e,r.selectedItems=e.filter(o=>o.type!=="separator"&&!!o.picked),r.show()}async _resolveProviderAndAccountLabel(t,i){if(!t||!i){const s=new Array;for(const n of this._authenticationService.getProviderIds()){const r=this._authenticationService.getProvider(n).label,o=await this._authenticationService.getSessions(n),p=new Set;for(const v of o)p.has(v.account.label)||(p.add(v.account.label),s.push({providerId:n,providerLabel:r,accountLabel:v.account.label}))}const e=await this._quickInputService.pick(s.map(n=>({providerId:n.providerId,label:n.accountLabel,description:n.providerLabel})),{placeHolder:a("pickAccount","Pick an account to manage trusted extensions for"),matchOnDescription:!0});if(e)t=e.providerId,i=e.label;else return{providerId:void 0,accountLabel:void 0}}return{providerId:t,accountLabel:i}}async _getItems(t,i){const s=this._authenticationAccessService.readAllowedExtensions(t,i),e=this._productService.trustedExtensionAuthAccess,n=Array.isArray(e)?e:typeof e=="object"?e[t]??[]:[];for(const c of n){const u=s.find(l=>l.id===c);if(u)u.allowed=!0,u.trusted=!0;else{const l=await this._extensionService.getExtension(c);l&&s.push({id:c,name:l.displayName||l.name,allowed:!0,trusted:!0})}}if(!s.length)return this._dialogService.info(a("noTrustedExtensions","This account has not been used by any extensions.")),[];const r=this._authenticationUsageService.readAccountUsages(t,i),o=[],p=[];for(const c of s){const u=r.find(l=>c.id===l.extensionId);c.lastUsed=u?.lastUsed,c.trusted?o.push(c):p.push(c)}const v=(c,u)=>(u.lastUsed||0)-(c.lastUsed||0);return[...p.sort(v).map(this._toQuickPickItem),{type:"separator",label:a("trustedExtensions","Trusted by Microsoft")},...o.sort(v).map(this._toQuickPickItem)]}_toQuickPickItem(t){const i=t.lastUsed,s=i?a({key:"accountLastUsedDate",comment:['The placeholder {0} is a string with time information, such as "3 days ago"']},"Last used this account {0}",x(i,!0)):a("notUsed","Has not used this account");let e,n;return t.trusted&&(e=a("trustedExtensionTooltip",`This extension is trusted by Microsoft and
always has access to this account`),n=!0),{label:t.name,extension:t,description:s,tooltip:e,disabled:n,buttons:[{tooltip:a("accountPreferences","Manage account preferences for this extension"),iconClass:E.asClassName(k.settingsGear)}],picked:t.allowed===void 0||t.allowed}}_createQuickPick(t,i,s){const e=t.add(this._quickInputService.createQuickPick({useSeparators:!0}));return e.canSelectMany=!0,e.customButton=!0,e.customLabel=a("manageTrustedExtensions.cancel","Cancel"),e.title=a("manageTrustedExtensions","Manage Trusted Extensions"),e.placeholder=a("manageExtensions","Choose which extensions can access this account"),t.add(e.onDidAccept(()=>{const n=e.items.filter(o=>o.type!=="separator").map(o=>o.extension),r=new Set(e.selectedItems.map(o=>o.extension));n.forEach(o=>{o.allowed=r.has(o)}),this._authenticationAccessService.updateAllowedExtensions(i,s,n),e.hide()})),t.add(e.onDidHide(()=>{t.dispose()})),t.add(e.onDidCustom(()=>{e.hide()})),t.add(e.onDidTriggerItemButton(n=>this._commandService.executeCommand("_manageAccountPreferencesForExtension",n.item.extension.id,i))),e}};h=f([d(0,P),d(1,D),d(2,y),d(3,Q),d(4,U),d(5,L),d(6,T),d(7,w)],h);export{te as ManageTrustedExtensionsForAccountAction};
