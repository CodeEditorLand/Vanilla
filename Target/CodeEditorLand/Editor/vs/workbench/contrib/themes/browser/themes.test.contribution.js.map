{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/themes/browser/themes.test.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IGrammar, StateStack } from \"vscode-textmate\";\nimport { Color } from \"../../../../base/common/color.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport { splitLines } from \"../../../../base/common/strings.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { TokenMetadata } from \"../../../../editor/common/encodedTokenAttributes.js\";\nimport { TokenizationRegistry } from \"../../../../editor/common/languages.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { EditorResourceAccessor } from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { ITextMateTokenizationService } from \"../../../services/textMate/browser/textMateTokenizationFeature.js\";\nimport {\n\ttype ThemeRule,\n\tfindMatchingThemeRule,\n} from \"../../../services/textMate/common/TMHelper.js\";\nimport {\n\ttype IWorkbenchColorTheme,\n\tIWorkbenchThemeService,\n} from \"../../../services/themes/common/workbenchThemeService.js\";\n\ninterface IToken {\n\tc: string;\n\tt: string;\n\tr: { [themeName: string]: string | undefined };\n}\n\ninterface IThemedToken {\n\ttext: string;\n\tcolor: Color;\n}\n\ninterface IThemesResult {\n\t[themeName: string]: {\n\t\tdocument: ThemeDocument;\n\t\ttokens: IThemedToken[];\n\t};\n}\n\nclass ThemeDocument {\n\tprivate readonly _theme: IWorkbenchColorTheme;\n\tprivate readonly _cache: { [scopes: string]: ThemeRule };\n\tprivate readonly _defaultColor: string;\n\n\tconstructor(theme: IWorkbenchColorTheme) {\n\t\tthis._theme = theme;\n\t\tthis._cache = Object.create(null);\n\t\tthis._defaultColor = \"#000000\";\n\t\tfor (let i = 0, len = this._theme.tokenColors.length; i < len; i++) {\n\t\t\tconst rule = this._theme.tokenColors[i];\n\t\t\tif (!rule.scope) {\n\t\t\t\tthis._defaultColor = rule.settings.foreground!;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _generateExplanation(selector: string, color: Color): string {\n\t\treturn `${selector}: ${Color.Format.CSS.formatHexA(color, true).toUpperCase()}`;\n\t}\n\n\tpublic explainTokenColor(scopes: string, color: Color): string {\n\t\tconst matchingRule = this._findMatchingThemeRule(scopes);\n\t\tif (!matchingRule) {\n\t\t\tconst expected = Color.fromHex(this._defaultColor);\n\t\t\t// No matching rule\n\t\t\tif (!color.equals(expected)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`[${this._theme.label}]: Unexpected color ${Color.Format.CSS.formatHexA(color)} for ${scopes}. Expected default ${Color.Format.CSS.formatHexA(expected)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn this._generateExplanation(\"default\", color);\n\t\t}\n\n\t\tconst expected = Color.fromHex(matchingRule.settings.foreground!);\n\t\tif (!color.equals(expected)) {\n\t\t\tthrow new Error(\n\t\t\t\t`[${this._theme.label}]: Unexpected color ${Color.Format.CSS.formatHexA(color)} for ${scopes}. Expected ${Color.Format.CSS.formatHexA(expected)} coming in from ${matchingRule.rawSelector}`,\n\t\t\t);\n\t\t}\n\t\treturn this._generateExplanation(matchingRule.rawSelector, color);\n\t}\n\n\tprivate _findMatchingThemeRule(scopes: string): ThemeRule {\n\t\tif (!this._cache[scopes]) {\n\t\t\tthis._cache[scopes] = findMatchingThemeRule(\n\t\t\t\tthis._theme,\n\t\t\t\tscopes.split(\" \"),\n\t\t\t)!;\n\t\t}\n\t\treturn this._cache[scopes];\n\t}\n}\n\nclass Snapper {\n\tconstructor(\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IWorkbenchThemeService private readonly themeService: IWorkbenchThemeService,\n\t\t@ITextMateTokenizationService private readonly textMateService: ITextMateTokenizationService\n\t) {\n\t}\n\n\tprivate _themedTokenize(\n\t\tgrammar: IGrammar,\n\t\tlines: string[],\n\t): IThemedToken[] {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tlet state: StateStack | null = null;\n\t\tconst result: IThemedToken[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst line = lines[i];\n\n\t\t\tconst tokenizationResult = grammar.tokenizeLine2(line, state);\n\n\t\t\tfor (\n\t\t\t\tlet j = 0, lenJ = tokenizationResult.tokens.length >>> 1;\n\t\t\t\tj < lenJ;\n\t\t\t\tj++\n\t\t\t) {\n\t\t\t\tconst startOffset = tokenizationResult.tokens[j << 1];\n\t\t\t\tconst metadata = tokenizationResult.tokens[(j << 1) + 1];\n\t\t\t\tconst endOffset =\n\t\t\t\t\tj + 1 < lenJ\n\t\t\t\t\t\t? tokenizationResult.tokens[(j + 1) << 1]\n\t\t\t\t\t\t: line.length;\n\t\t\t\tconst tokenText = line.substring(startOffset, endOffset);\n\n\t\t\t\tconst color = TokenMetadata.getForeground(metadata);\n\n\t\t\t\tresult[resultLen++] = {\n\t\t\t\t\ttext: tokenText,\n\t\t\t\t\tcolor: colorMap![color],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tstate = tokenizationResult.ruleStack;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _tokenize(grammar: IGrammar, lines: string[]): IToken[] {\n\t\tlet state: StateStack | null = null;\n\t\tconst result: IToken[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst line = lines[i];\n\n\t\t\tconst tokenizationResult = grammar.tokenizeLine(line, state);\n\t\t\tlet lastScopes: string | null = null;\n\n\t\t\tfor (\n\t\t\t\tlet j = 0, lenJ = tokenizationResult.tokens.length;\n\t\t\t\tj < lenJ;\n\t\t\t\tj++\n\t\t\t) {\n\t\t\t\tconst token = tokenizationResult.tokens[j];\n\t\t\t\tconst tokenText = line.substring(\n\t\t\t\t\ttoken.startIndex,\n\t\t\t\t\ttoken.endIndex,\n\t\t\t\t);\n\t\t\t\tconst tokenScopes = token.scopes.join(\" \");\n\n\t\t\t\tif (lastScopes === tokenScopes) {\n\t\t\t\t\tresult[resultLen - 1].c += tokenText;\n\t\t\t\t} else {\n\t\t\t\t\tlastScopes = tokenScopes;\n\t\t\t\t\tresult[resultLen++] = {\n\t\t\t\t\t\tc: tokenText,\n\t\t\t\t\t\tt: tokenScopes,\n\t\t\t\t\t\tr: {\n\t\t\t\t\t\t\tdark_plus: undefined,\n\t\t\t\t\t\t\tlight_plus: undefined,\n\t\t\t\t\t\t\tdark_vs: undefined,\n\t\t\t\t\t\t\tlight_vs: undefined,\n\t\t\t\t\t\t\thc_black: undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate = tokenizationResult.ruleStack;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _getThemesResult(\n\t\tgrammar: IGrammar,\n\t\tlines: string[],\n\t): Promise<IThemesResult> {\n\t\tconst currentTheme = this.themeService.getColorTheme();\n\n\t\tconst getThemeName = (id: string) => {\n\t\t\tconst part = \"vscode-theme-defaults-themes-\";\n\t\t\tconst startIdx = id.indexOf(part);\n\t\t\tif (startIdx !== -1) {\n\t\t\t\treturn id.substring(startIdx + part.length, id.length - 5);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst result: IThemesResult = {};\n\n\t\tconst themeDatas = await this.themeService.getColorThemes();\n\t\tconst defaultThemes = themeDatas.filter(\n\t\t\t(themeData) => !!getThemeName(themeData.id),\n\t\t);\n\t\tfor (const defaultTheme of defaultThemes) {\n\t\t\tconst themeId = defaultTheme.id;\n\t\t\tconst success = await this.themeService.setColorTheme(\n\t\t\t\tthemeId,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t\tif (success) {\n\t\t\t\tconst themeName = getThemeName(themeId);\n\t\t\t\tresult[themeName!] = {\n\t\t\t\t\tdocument: new ThemeDocument(\n\t\t\t\t\t\tthis.themeService.getColorTheme(),\n\t\t\t\t\t),\n\t\t\t\t\ttokens: this._themedTokenize(grammar, lines),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tawait this.themeService.setColorTheme(currentTheme.id, undefined);\n\t\treturn result;\n\t}\n\n\tprivate _enrichResult(result: IToken[], themesResult: IThemesResult): void {\n\t\tconst index: { [themeName: string]: number } = {};\n\t\tconst themeNames = Object.keys(themesResult);\n\t\tfor (const themeName of themeNames) {\n\t\t\tindex[themeName] = 0;\n\t\t}\n\n\t\tfor (let i = 0, len = result.length; i < len; i++) {\n\t\t\tconst token = result[i];\n\n\t\t\tfor (const themeName of themeNames) {\n\t\t\t\tconst themedToken =\n\t\t\t\t\tthemesResult[themeName].tokens[index[themeName]];\n\n\t\t\t\tthemedToken.text = themedToken.text.substr(token.c.length);\n\t\t\t\ttoken.r[themeName] = themesResult[\n\t\t\t\t\tthemeName\n\t\t\t\t].document.explainTokenColor(token.t, themedToken.color);\n\t\t\t\tif (themedToken.text.length === 0) {\n\t\t\t\t\tindex[themeName]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic captureSyntaxTokens(\n\t\tfileName: string,\n\t\tcontent: string,\n\t): Promise<IToken[]> {\n\t\tconst languageId =\n\t\t\tthis.languageService.guessLanguageIdByFilepathOrFirstLine(\n\t\t\t\tURI.file(fileName),\n\t\t\t);\n\t\treturn this.textMateService\n\t\t\t.createTokenizer(languageId!)\n\t\t\t.then((grammar) => {\n\t\t\t\tif (!grammar) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\tconst lines = splitLines(content);\n\n\t\t\t\tconst result = this._tokenize(grammar, lines);\n\t\t\t\treturn this._getThemesResult(grammar, lines).then(\n\t\t\t\t\t(themesResult) => {\n\t\t\t\t\t\tthis._enrichResult(result, themesResult);\n\t\t\t\t\t\treturn result.filter((t) => t.c.length > 0);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t}\n}\n\nCommandsRegistry.registerCommand(\n\t\"_workbench.captureSyntaxTokens\",\n\t(accessor: ServicesAccessor, resource: URI) => {\n\t\tconst process = (resource: URI) => {\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst fileName = basename(resource);\n\t\t\tconst snapper = accessor\n\t\t\t\t.get(IInstantiationService)\n\t\t\t\t.createInstance(Snapper);\n\n\t\t\treturn fileService.readFile(resource).then((content) => {\n\t\t\t\treturn snapper.captureSyntaxTokens(\n\t\t\t\t\tfileName,\n\t\t\t\t\tcontent.value.toString(),\n\t\t\t\t);\n\t\t\t});\n\t\t};\n\n\t\tif (resource) {\n\t\t\treturn process(resource);\n\t\t} else {\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tconst file = editorService.activeEditor\n\t\t\t\t? EditorResourceAccessor.getCanonicalUri(\n\t\t\t\t\t\teditorService.activeEditor,\n\t\t\t\t\t\t{ filterByScheme: Schemas.file },\n\t\t\t\t\t)\n\t\t\t\t: null;\n\t\t\tif (file) {\n\t\t\t\tprocess(file).then((result) => {\n\t\t\t\t\tconsole.log(result);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No file editor active\");\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n);\n"],
  "mappings": "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",
  "names": ["expected", "resource"]
}
