{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/themes/browser/themes.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../nls.js';\nimport { KeyMod, KeyChord, KeyCode } from '../../../../base/common/keyCodes.js';\nimport { MenuRegistry, MenuId, Action2, registerAction2, ISubmenuItem } from '../../../../platform/actions/common/actions.js';\nimport { equalsIgnoreCase } from '../../../../base/common/strings.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { IWorkbenchThemeService, IWorkbenchTheme, ThemeSettingTarget, IWorkbenchColorTheme, IWorkbenchFileIconTheme, IWorkbenchProductIconTheme, ThemeSettings, ThemeSettingDefaults } from '../../../services/themes/common/workbenchThemeService.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { IExtensionGalleryService, IExtensionManagementService, IGalleryExtension } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IColorRegistry, Extensions as ColorRegistryExtensions } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ColorScheme, isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { colorThemeSchemaId } from '../../../services/themes/common/colorThemeSchema.js';\nimport { isCancellationError, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { IQuickInputButton, IQuickInputService, IQuickInputToggle, IQuickPick, IQuickPickItem, QuickPickInput } from '../../../../platform/quickinput/common/quickInput.js';\nimport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData } from '../../../services/themes/browser/productIconThemeData.js';\nimport { ThrottledDelayer } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { IExtensionResourceLoaderService } from '../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { FileIconThemeData } from '../../../services/themes/browser/fileIconThemeData.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from '../../../common/contributions.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { INotificationService, IPromptChoice, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { Toggle } from '../../../../base/browser/ui/toggle/toggle.js';\nimport { defaultToggleStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\n\nexport const manageExtensionIcon = registerIcon('theme-selection-manage-extension', Codicon.gear, localize('manageExtensionIcon', 'Icon for the \\'Manage\\' action in the theme selection quick pick.'));\n\ntype PickerResult = 'back' | 'selected' | 'cancelled';\n\nenum ConfigureItem {\n\tBROWSE_GALLERY = 'marketplace',\n\tEXTENSIONS_VIEW = 'extensions',\n\tCUSTOM_TOP_ENTRY = 'customTopEntry'\n}\n\nclass MarketplaceThemesPicker {\n\tprivate readonly _installedExtensions: Promise<Set<string>>;\n\tprivate readonly _marketplaceExtensions: Set<string> = new Set();\n\tprivate readonly _marketplaceThemes: ThemeItem[] = [];\n\n\tprivate _searchOngoing: boolean = false;\n\tprivate _searchError: string | undefined = undefined;\n\tprivate readonly _onDidChange = new Emitter<void>();\n\n\tprivate _tokenSource: CancellationTokenSource | undefined;\n\tprivate readonly _queryDelayer = new ThrottledDelayer<void>(200);\n\n\tconstructor(\n\t\tprivate readonly getMarketplaceColorThemes: (publisher: string, name: string, version: string) => Promise<IWorkbenchTheme[]>,\n\t\tprivate readonly marketplaceQuery: string,\n\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tthis._installedExtensions = extensionManagementService.getInstalled().then(installed => {\n\t\t\tconst result = new Set<string>();\n\t\t\tfor (const ext of installed) {\n\t\t\t\tresult.add(ext.identifier.id);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic get themes(): ThemeItem[] {\n\t\treturn this._marketplaceThemes;\n\t}\n\n\tpublic get onDidChange() {\n\t\treturn this._onDidChange.event;\n\t}\n\n\tpublic trigger(value: string) {\n\t\tif (this._tokenSource) {\n\t\t\tthis._tokenSource.cancel();\n\t\t\tthis._tokenSource = undefined;\n\t\t}\n\t\tthis._queryDelayer.trigger(() => {\n\t\t\tthis._tokenSource = new CancellationTokenSource();\n\t\t\treturn this.doSearch(value, this._tokenSource.token);\n\t\t});\n\t}\n\n\tprivate async doSearch(value: string, token: CancellationToken): Promise<void> {\n\t\tthis._searchOngoing = true;\n\t\tthis._onDidChange.fire();\n\t\ttry {\n\t\t\tconst installedExtensions = await this._installedExtensions;\n\n\t\t\tconst options = { text: `${this.marketplaceQuery} ${value}`, pageSize: 20 };\n\t\t\tconst pager = await this.extensionGalleryService.query(options, token);\n\t\t\tfor (let i = 0; i < pager.total && i < 1; i++) { // loading multiple pages is turned of for now to avoid flickering\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst nThemes = this._marketplaceThemes.length;\n\t\t\t\tconst gallery = i === 0 ? pager.firstPage : await pager.getPage(i, token);\n\n\t\t\t\tconst promises: Promise<IWorkbenchTheme[]>[] = [];\n\t\t\t\tconst promisesGalleries = [];\n\t\t\t\tfor (let i = 0; i < gallery.length; i++) {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst ext = gallery[i];\n\t\t\t\t\tif (!installedExtensions.has(ext.identifier.id) && !this._marketplaceExtensions.has(ext.identifier.id)) {\n\t\t\t\t\t\tthis._marketplaceExtensions.add(ext.identifier.id);\n\t\t\t\t\t\tpromises.push(this.getMarketplaceColorThemes(ext.publisher, ext.name, ext.version));\n\t\t\t\t\t\tpromisesGalleries.push(ext);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst allThemes = await Promise.all(promises);\n\t\t\t\tfor (let i = 0; i < allThemes.length; i++) {\n\t\t\t\t\tconst ext = promisesGalleries[i];\n\t\t\t\t\tfor (const theme of allThemes[i]) {\n\t\t\t\t\t\tthis._marketplaceThemes.push({ id: theme.id, theme: theme, label: theme.label, description: `${ext.displayName} \u00B7 ${ext.publisherDisplayName}`, galleryExtension: ext, buttons: [configureButton] });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (nThemes !== this._marketplaceThemes.length) {\n\t\t\t\t\tthis._marketplaceThemes.sort((t1, t2) => t1.label.localeCompare(t2.label));\n\t\t\t\t\tthis._onDidChange.fire();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (!isCancellationError(e)) {\n\t\t\t\tthis.logService.error(`Error while searching for themes:`, e);\n\t\t\t\tthis._searchError = 'message' in e ? e.message : String(e);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._searchOngoing = false;\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\n\t}\n\n\tpublic openQuickPick(value: string, currentTheme: IWorkbenchTheme | undefined, selectTheme: (theme: IWorkbenchTheme | undefined, applyTheme: boolean) => void): Promise<PickerResult> {\n\t\tlet result: PickerResult | undefined = undefined;\n\t\tconst disposables = new DisposableStore();\n\t\treturn new Promise<PickerResult>((s, _) => {\n\t\t\tconst quickpick = disposables.add(this.quickInputService.createQuickPick<ThemeItem>());\n\t\t\tquickpick.items = [];\n\t\t\tquickpick.sortByLabel = false;\n\t\t\tquickpick.matchOnDescription = true;\n\t\t\tquickpick.buttons = [this.quickInputService.backButton];\n\t\t\tquickpick.title = 'Marketplace Themes';\n\t\t\tquickpick.placeholder = localize('themes.selectMarketplaceTheme', \"Type to Search More. Select to Install. Up/Down Keys to Preview\");\n\t\t\tquickpick.canSelectMany = false;\n\t\t\tdisposables.add(quickpick.onDidChangeValue(() => this.trigger(quickpick.value)));\n\t\t\tdisposables.add(quickpick.onDidAccept(async _ => {\n\t\t\t\tconst themeItem = quickpick.selectedItems[0];\n\t\t\t\tif (themeItem?.galleryExtension) {\n\t\t\t\t\tresult = 'selected';\n\t\t\t\t\tquickpick.hide();\n\t\t\t\t\tconst success = await this.installExtension(themeItem.galleryExtension);\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tselectTheme(themeItem.theme, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tselectTheme(currentTheme, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tdisposables.add(quickpick.onDidTriggerItemButton(e => {\n\t\t\t\tif (isItem(e.item)) {\n\t\t\t\t\tconst extensionId = e.item.theme?.extensionData?.extensionId;\n\t\t\t\t\tif (extensionId) {\n\t\t\t\t\t\tthis.extensionsWorkbenchService.openSearch(`@id:${extensionId}`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.extensionsWorkbenchService.openSearch(`${this.marketplaceQuery} ${quickpick.value}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t\tdisposables.add(quickpick.onDidChangeActive(themes => {\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tselectTheme(themes[0]?.theme, false);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tdisposables.add(quickpick.onDidHide(() => {\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tselectTheme(currentTheme, true);\n\t\t\t\t\tresult = 'cancelled';\n\n\t\t\t\t}\n\t\t\t\ts(result);\n\t\t\t}));\n\n\t\t\tdisposables.add(quickpick.onDidTriggerButton(e => {\n\t\t\t\tif (e === this.quickInputService.backButton) {\n\t\t\t\t\tresult = 'back';\n\t\t\t\t\tquickpick.hide();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tdisposables.add(this.onDidChange(() => {\n\t\t\t\tlet items = this.themes;\n\t\t\t\tif (this._searchOngoing) {\n\t\t\t\t\titems = items.concat({ label: '$(sync~spin) Searching for themes...', id: undefined, alwaysShow: true });\n\t\t\t\t} else if (items.length === 0 && this._searchError) {\n\t\t\t\t\titems = [{ label: `$(error) ${localize('search.error', 'Error while searching for themes: {0}', this._searchError)}`, id: undefined, alwaysShow: true }];\n\t\t\t\t}\n\t\t\t\tconst activeItemId = quickpick.activeItems[0]?.id;\n\t\t\t\tconst newActiveItem = activeItemId ? items.find(i => isItem(i) && i.id === activeItemId) : undefined;\n\n\t\t\t\tquickpick.items = items;\n\t\t\t\tif (newActiveItem) {\n\t\t\t\t\tquickpick.activeItems = [newActiveItem as ThemeItem];\n\t\t\t\t}\n\t\t\t}));\n\t\t\tthis.trigger(value);\n\t\t\tquickpick.show();\n\t\t}).finally(() => {\n\t\t\tdisposables.dispose();\n\t\t});\n\t}\n\n\tprivate async installExtension(galleryExtension: IGalleryExtension) {\n\t\tthis.extensionsWorkbenchService.openSearch(`@id:${galleryExtension.identifier.id}`);\n\t\tconst result = await this.dialogService.confirm({\n\t\t\tmessage: localize('installExtension.confirm', \"This will install extension '{0}' published by '{1}'. Do you want to continue?\", galleryExtension.displayName, galleryExtension.publisherDisplayName),\n\t\t\tprimaryButton: localize('installExtension.button.ok', \"OK\")\n\t\t});\n\t\tif (!result.confirmed) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tawait this.progressService.withProgress({\n\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\ttitle: localize('installing extensions', \"Installing Extension {0}...\", galleryExtension.displayName)\n\t\t\t}, async () => {\n\t\t\t\tawait this.extensionManagementService.installFromGallery(galleryExtension, {\n\t\t\t\t\t// Setting this to false is how you get the extension to be synced with Settings Sync (if enabled).\n\t\t\t\t\tisMachineScoped: false,\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(`Problem installing extension ${galleryExtension.identifier.id}`, e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\tpublic dispose() {\n\t\tif (this._tokenSource) {\n\t\t\tthis._tokenSource.cancel();\n\t\t\tthis._tokenSource = undefined;\n\t\t}\n\t\tthis._queryDelayer.dispose();\n\t\tthis._marketplaceExtensions.clear();\n\t\tthis._marketplaceThemes.length = 0;\n\t}\n}\n\ninterface InstalledThemesPickerOptions {\n\treadonly installMessage: string;\n\treadonly browseMessage?: string;\n\treadonly placeholderMessage: string;\n\treadonly marketplaceTag: string;\n\treadonly title?: string;\n\treadonly description?: string;\n\treadonly toggles?: IQuickInputToggle[];\n\treadonly onToggle?: (toggle: IQuickInputToggle, quickInput: IQuickPick<ThemeItem, { useSeparators: boolean }>) => Promise<void>;\n}\n\nclass InstalledThemesPicker {\n\tconstructor(\n\t\tprivate readonly options: InstalledThemesPickerOptions,\n\t\tprivate readonly setTheme: (theme: IWorkbenchTheme | undefined, settingsTarget: ThemeSettingTarget) => Promise<any>,\n\t\tprivate readonly getMarketplaceColorThemes: (publisher: string, name: string, version: string) => Promise<IWorkbenchTheme[]>,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IExtensionResourceLoaderService private readonly extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t}\n\n\tpublic async openQuickPick(picks: QuickPickInput<ThemeItem>[], currentTheme: IWorkbenchTheme) {\n\n\t\tlet marketplaceThemePicker: MarketplaceThemesPicker | undefined;\n\t\tif (this.extensionGalleryService.isEnabled()) {\n\t\t\tif (this.extensionResourceLoaderService.supportsExtensionGalleryResources && this.options.browseMessage) {\n\t\t\t\tmarketplaceThemePicker = this.instantiationService.createInstance(MarketplaceThemesPicker, this.getMarketplaceColorThemes.bind(this), this.options.marketplaceTag);\n\t\t\t\tpicks = [configurationEntry(this.options.browseMessage, ConfigureItem.BROWSE_GALLERY), ...picks];\n\t\t\t} else {\n\t\t\t\tpicks = [...picks, { type: 'separator' }, configurationEntry(this.options.installMessage, ConfigureItem.EXTENSIONS_VIEW)];\n\t\t\t}\n\t\t}\n\n\t\tlet selectThemeTimeout: number | undefined;\n\n\t\tconst selectTheme = (theme: IWorkbenchTheme | undefined, applyTheme: boolean) => {\n\t\t\tif (selectThemeTimeout) {\n\t\t\t\tclearTimeout(selectThemeTimeout);\n\t\t\t}\n\t\t\tselectThemeTimeout = mainWindow.setTimeout(() => {\n\t\t\t\tselectThemeTimeout = undefined;\n\t\t\t\tconst newTheme = (theme ?? currentTheme) as IWorkbenchTheme;\n\t\t\t\tthis.setTheme(newTheme, applyTheme ? 'auto' : 'preview').then(undefined,\n\t\t\t\t\terr => {\n\t\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t\t\tthis.setTheme(currentTheme, undefined);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}, applyTheme ? 0 : 200);\n\t\t};\n\n\t\tconst pickInstalledThemes = (activeItemId: string | undefined) => {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\treturn new Promise<void>((s, _) => {\n\t\t\t\tlet isCompleted = false;\n\t\t\t\tconst autoFocusIndex = picks.findIndex(p => isItem(p) && p.id === activeItemId);\n\t\t\t\tconst quickpick = disposables.add(this.quickInputService.createQuickPick<ThemeItem>({ useSeparators: true }));\n\t\t\t\tquickpick.items = picks;\n\t\t\t\tquickpick.title = this.options.title;\n\t\t\t\tquickpick.description = this.options.description;\n\t\t\t\tquickpick.placeholder = this.options.placeholderMessage;\n\t\t\t\tquickpick.activeItems = [picks[autoFocusIndex] as ThemeItem];\n\t\t\t\tquickpick.canSelectMany = false;\n\t\t\t\tquickpick.toggles = this.options.toggles;\n\t\t\t\tquickpick.toggles?.forEach(toggle => {\n\t\t\t\t\tdisposables.add(toggle.onChange(() => this.options.onToggle?.(toggle, quickpick)));\n\t\t\t\t});\n\t\t\t\tquickpick.matchOnDescription = true;\n\t\t\t\tdisposables.add(quickpick.onDidAccept(async _ => {\n\t\t\t\t\tisCompleted = true;\n\t\t\t\t\tconst theme = quickpick.selectedItems[0];\n\t\t\t\t\tif (!theme || theme.configureItem) { // 'pick in marketplace' entry\n\t\t\t\t\t\tif (!theme || theme.configureItem === ConfigureItem.EXTENSIONS_VIEW) {\n\t\t\t\t\t\t\tthis.extensionsWorkbenchService.openSearch(`${this.options.marketplaceTag} ${quickpick.value}`);\n\t\t\t\t\t\t} else if (theme.configureItem === ConfigureItem.BROWSE_GALLERY) {\n\t\t\t\t\t\t\tif (marketplaceThemePicker) {\n\t\t\t\t\t\t\t\tconst res = await marketplaceThemePicker.openQuickPick(quickpick.value, currentTheme, selectTheme);\n\t\t\t\t\t\t\t\tif (res === 'back') {\n\t\t\t\t\t\t\t\t\tawait pickInstalledThemes(undefined);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tselectTheme(theme.theme, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tquickpick.hide();\n\t\t\t\t\ts();\n\t\t\t\t}));\n\t\t\t\tdisposables.add(quickpick.onDidChangeActive(themes => selectTheme(themes[0]?.theme, false)));\n\t\t\t\tdisposables.add(quickpick.onDidHide(() => {\n\t\t\t\t\tif (!isCompleted) {\n\t\t\t\t\t\tselectTheme(currentTheme, true);\n\t\t\t\t\t\ts();\n\t\t\t\t\t}\n\t\t\t\t\tquickpick.dispose();\n\t\t\t\t}));\n\t\t\t\tdisposables.add(quickpick.onDidTriggerItemButton(e => {\n\t\t\t\t\tif (isItem(e.item)) {\n\t\t\t\t\t\tconst extensionId = e.item.theme?.extensionData?.extensionId;\n\t\t\t\t\t\tif (extensionId) {\n\t\t\t\t\t\t\tthis.extensionsWorkbenchService.openSearch(`@id:${extensionId}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.extensionsWorkbenchService.openSearch(`${this.options.marketplaceTag} ${quickpick.value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tquickpick.show();\n\t\t\t}).finally(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t});\n\t\t};\n\t\tawait pickInstalledThemes(currentTheme.id);\n\n\t\tmarketplaceThemePicker?.dispose();\n\n\t}\n}\n\nconst SelectColorThemeCommandId = 'workbench.action.selectTheme';\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SelectColorThemeCommandId,\n\t\t\ttitle: localize2('selectTheme.label', 'Color Theme'),\n\t\t\tcategory: Categories.Preferences,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyT)\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getTitle(colorScheme: ColorScheme | undefined): string {\n\t\tswitch (colorScheme) {\n\t\t\tcase ColorScheme.DARK: return localize('themes.selectTheme.darkScheme', \"Select Color Theme for System Dark Mode\");\n\t\t\tcase ColorScheme.LIGHT: return localize('themes.selectTheme.lightScheme', \"Select Color Theme for System Light Mode\");\n\t\t\tcase ColorScheme.HIGH_CONTRAST_DARK: return localize('themes.selectTheme.darkHC', \"Select Color Theme for High Contrast Dark Mode\");\n\t\t\tcase ColorScheme.HIGH_CONTRAST_LIGHT: return localize('themes.selectTheme.lightHC', \"Select Color Theme for High Contrast Light Mode\");\n\t\t\tdefault:\n\t\t\t\treturn localize('themes.selectTheme.default', \"Select Color Theme (detect system color mode disabled)\");\n\t\t}\n\t}\n\n\toverride async run(accessor: ServicesAccessor) {\n\t\tconst themeService = accessor.get(IWorkbenchThemeService);\n\t\tconst preferencesService = accessor.get(IPreferencesService);\n\n\t\tconst preferredColorScheme = themeService.getPreferredColorScheme();\n\n\t\tlet modeConfigureToggle;\n\t\tif (preferredColorScheme) {\n\t\t\tmodeConfigureToggle = new Toggle({\n\t\t\t\ttitle: localize('themes.configure.switchingEnabled', 'Detect system color mode enabled. Click to configure.'),\n\t\t\t\ticon: Codicon.colorMode,\n\t\t\t\tisChecked: false,\n\t\t\t\t...defaultToggleStyles\n\t\t\t});\n\t\t} else {\n\t\t\tmodeConfigureToggle = new Toggle({\n\t\t\t\ttitle: localize('themes.configure.switchingDisabled', 'Detect system color mode disabled. Click to configure.'),\n\t\t\t\ticon: Codicon.colorMode,\n\t\t\t\tisChecked: false,\n\t\t\t\t...defaultToggleStyles\n\t\t\t});\n\t\t}\n\n\t\tconst options = {\n\t\t\tinstallMessage: localize('installColorThemes', \"Install Additional Color Themes...\"),\n\t\t\tbrowseMessage: '$(plus) ' + localize('browseColorThemes', \"Browse Additional Color Themes...\"),\n\t\t\tplaceholderMessage: this.getTitle(preferredColorScheme),\n\t\t\tmarketplaceTag: 'category:themes',\n\t\t\ttoggles: [modeConfigureToggle],\n\t\t\tonToggle: async (toggle, picker) => {\n\t\t\t\tpicker.hide();\n\t\t\t\tawait preferencesService.openSettings({ query: ThemeSettings.DETECT_COLOR_SCHEME });\n\t\t\t}\n\t\t} satisfies InstalledThemesPickerOptions;\n\t\tconst setTheme = (theme: IWorkbenchTheme | undefined, settingsTarget: ThemeSettingTarget) => themeService.setColorTheme(theme as IWorkbenchColorTheme, settingsTarget);\n\t\tconst getMarketplaceColorThemes = (publisher: string, name: string, version: string) => themeService.getMarketplaceColorThemes(publisher, name, version);\n\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n\n\t\tconst themes = await themeService.getColorThemes();\n\t\tconst currentTheme = themeService.getColorTheme();\n\n\t\tconst lightEntries = toEntries(themes.filter(t => t.type === ColorScheme.LIGHT), localize('themes.category.light', \"light themes\"));\n\t\tconst darkEntries = toEntries(themes.filter(t => t.type === ColorScheme.DARK), localize('themes.category.dark', \"dark themes\"));\n\t\tconst hcEntries = toEntries(themes.filter(t => isHighContrast(t.type)), localize('themes.category.hc', \"high contrast themes\"));\n\n\t\tlet picks;\n\t\tswitch (preferredColorScheme) {\n\t\t\tcase ColorScheme.DARK:\n\t\t\t\tpicks = [...darkEntries, ...lightEntries, ...hcEntries];\n\t\t\t\tbreak;\n\t\t\tcase ColorScheme.HIGH_CONTRAST_DARK:\n\t\t\tcase ColorScheme.HIGH_CONTRAST_LIGHT:\n\t\t\t\tpicks = [...hcEntries, ...lightEntries, ...darkEntries];\n\t\t\t\tbreak;\n\t\t\tcase ColorScheme.LIGHT:\n\t\t\tdefault:\n\t\t\t\tpicks = [...lightEntries, ...darkEntries, ...hcEntries];\n\t\t\t\tbreak;\n\t\t}\n\t\tawait picker.openQuickPick(picks, currentTheme);\n\n\t}\n});\n\nconst SelectFileIconThemeCommandId = 'workbench.action.selectIconTheme';\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SelectFileIconThemeCommandId,\n\t\t\ttitle: localize2('selectIconTheme.label', 'File Icon Theme'),\n\t\t\tcategory: Categories.Preferences,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor) {\n\t\tconst themeService = accessor.get(IWorkbenchThemeService);\n\n\t\tconst options = {\n\t\t\tinstallMessage: localize('installIconThemes', \"Install Additional File Icon Themes...\"),\n\t\t\tplaceholderMessage: localize('themes.selectIconTheme', \"Select File Icon Theme (Up/Down Keys to Preview)\"),\n\t\t\tmarketplaceTag: 'tag:icon-theme'\n\t\t};\n\t\tconst setTheme = (theme: IWorkbenchTheme | undefined, settingsTarget: ThemeSettingTarget) => themeService.setFileIconTheme(theme as IWorkbenchFileIconTheme, settingsTarget);\n\t\tconst getMarketplaceColorThemes = (publisher: string, name: string, version: string) => themeService.getMarketplaceFileIconThemes(publisher, name, version);\n\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n\n\t\tconst picks: QuickPickInput<ThemeItem>[] = [\n\t\t\t{ type: 'separator', label: localize('fileIconThemeCategory', 'file icon themes') },\n\t\t\t{ id: '', theme: FileIconThemeData.noIconTheme, label: localize('noIconThemeLabel', 'None'), description: localize('noIconThemeDesc', 'Disable File Icons') },\n\t\t\t...toEntries(await themeService.getFileIconThemes()),\n\t\t];\n\n\t\tawait picker.openQuickPick(picks, themeService.getFileIconTheme());\n\t}\n});\n\nconst SelectProductIconThemeCommandId = 'workbench.action.selectProductIconTheme';\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SelectProductIconThemeCommandId,\n\t\t\ttitle: localize2('selectProductIconTheme.label', 'Product Icon Theme'),\n\t\t\tcategory: Categories.Preferences,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor) {\n\t\tconst themeService = accessor.get(IWorkbenchThemeService);\n\n\t\tconst options = {\n\t\t\tinstallMessage: localize('installProductIconThemes', \"Install Additional Product Icon Themes...\"),\n\t\t\tbrowseMessage: '$(plus) ' + localize('browseProductIconThemes', \"Browse Additional Product Icon Themes...\"),\n\t\t\tplaceholderMessage: localize('themes.selectProductIconTheme', \"Select Product Icon Theme (Up/Down Keys to Preview)\"),\n\t\t\tmarketplaceTag: 'tag:product-icon-theme'\n\t\t};\n\t\tconst setTheme = (theme: IWorkbenchTheme | undefined, settingsTarget: ThemeSettingTarget) => themeService.setProductIconTheme(theme as IWorkbenchProductIconTheme, settingsTarget);\n\t\tconst getMarketplaceColorThemes = (publisher: string, name: string, version: string) => themeService.getMarketplaceProductIconThemes(publisher, name, version);\n\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst picker = instantiationService.createInstance(InstalledThemesPicker, options, setTheme, getMarketplaceColorThemes);\n\n\t\tconst picks: QuickPickInput<ThemeItem>[] = [\n\t\t\t{ type: 'separator', label: localize('productIconThemeCategory', 'product icon themes') },\n\t\t\t{ id: DEFAULT_PRODUCT_ICON_THEME_ID, theme: ProductIconThemeData.defaultTheme, label: localize('defaultProductIconThemeLabel', 'Default') },\n\t\t\t...toEntries(await themeService.getProductIconThemes()),\n\t\t];\n\n\t\tawait picker.openQuickPick(picks, themeService.getProductIconTheme());\n\t}\n});\n\nCommandsRegistry.registerCommand('workbench.action.previewColorTheme', async function (accessor: ServicesAccessor, extension: { publisher: string; name: string; version: string }, themeSettingsId?: string) {\n\tconst themeService = accessor.get(IWorkbenchThemeService);\n\n\tlet themes = findBuiltInThemes(await themeService.getColorThemes(), extension);\n\tif (themes.length === 0) {\n\t\tthemes = await themeService.getMarketplaceColorThemes(extension.publisher, extension.name, extension.version);\n\t}\n\tfor (const theme of themes) {\n\t\tif (!themeSettingsId || theme.settingsId === themeSettingsId) {\n\t\t\tawait themeService.setColorTheme(theme, 'preview');\n\t\t\treturn theme.settingsId;\n\t\t}\n\t}\n\treturn undefined;\n});\n\nfunction findBuiltInThemes(themes: IWorkbenchColorTheme[], extension: { publisher: string; name: string }): IWorkbenchColorTheme[] {\n\treturn themes.filter(({ extensionData }) => extensionData && extensionData.extensionIsBuiltin && equalsIgnoreCase(extensionData.extensionPublisher, extension.publisher) && equalsIgnoreCase(extensionData.extensionName, extension.name));\n}\n\nfunction configurationEntry(label: string, configureItem: ConfigureItem): QuickPickInput<ThemeItem> {\n\treturn {\n\t\tid: undefined,\n\t\tlabel: label,\n\t\talwaysShow: true,\n\t\tbuttons: [configureButton],\n\t\tconfigureItem: configureItem\n\t};\n}\n\ninterface ThemeItem extends IQuickPickItem {\n\treadonly id: string | undefined;\n\treadonly theme?: IWorkbenchTheme;\n\treadonly galleryExtension?: IGalleryExtension;\n\treadonly label: string;\n\treadonly description?: string;\n\treadonly alwaysShow?: boolean;\n\treadonly configureItem?: ConfigureItem;\n}\n\nfunction isItem(i: QuickPickInput<ThemeItem>): i is ThemeItem {\n\treturn (<any>i)['type'] !== 'separator';\n}\n\nfunction toEntry(theme: IWorkbenchTheme): ThemeItem {\n\tconst settingId = theme.settingsId ?? undefined;\n\tconst item: ThemeItem = {\n\t\tid: theme.id,\n\t\ttheme: theme,\n\t\tlabel: theme.label,\n\t\tdescription: theme.description || (theme.label === settingId ? undefined : settingId),\n\t};\n\tif (theme.extensionData) {\n\t\titem.buttons = [configureButton];\n\t}\n\treturn item;\n}\n\nfunction toEntries(themes: Array<IWorkbenchTheme>, label?: string): QuickPickInput<ThemeItem>[] {\n\tconst sorter = (t1: ThemeItem, t2: ThemeItem) => t1.label.localeCompare(t2.label);\n\tconst entries: QuickPickInput<ThemeItem>[] = themes.map(toEntry).sort(sorter);\n\tif (entries.length > 0 && label) {\n\t\tentries.unshift({ type: 'separator', label });\n\t}\n\treturn entries;\n}\n\nconst configureButton: IQuickInputButton = {\n\ticonClass: ThemeIcon.asClassName(manageExtensionIcon),\n\ttooltip: localize('manage extension', \"Manage Extension\"),\n};\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.generateColorTheme',\n\t\t\ttitle: localize2('generateColorTheme.label', 'Generate Color Theme From Current Settings'),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor) {\n\t\tconst themeService = accessor.get(IWorkbenchThemeService);\n\n\t\tconst theme = themeService.getColorTheme();\n\t\tconst colors = Registry.as<IColorRegistry>(ColorRegistryExtensions.ColorContribution).getColors();\n\t\tconst colorIds = colors.map(c => c.id).sort();\n\t\tconst resultingColors: { [key: string]: string | null } = {};\n\t\tconst inherited: string[] = [];\n\t\tfor (const colorId of colorIds) {\n\t\t\tconst color = theme.getColor(colorId, false);\n\t\t\tif (color) {\n\t\t\t\tresultingColors[colorId] = Color.Format.CSS.formatHexA(color, true);\n\t\t\t} else {\n\t\t\t\tinherited.push(colorId);\n\t\t\t}\n\t\t}\n\t\tconst nullDefaults = [];\n\t\tfor (const id of inherited) {\n\t\t\tconst color = theme.getColor(id);\n\t\t\tif (color) {\n\t\t\t\tresultingColors['__' + id] = Color.Format.CSS.formatHexA(color, true);\n\t\t\t} else {\n\t\t\t\tnullDefaults.push(id);\n\t\t\t}\n\t\t}\n\t\tfor (const id of nullDefaults) {\n\t\t\tresultingColors['__' + id] = null;\n\t\t}\n\t\tlet contents = JSON.stringify({\n\t\t\t'$schema': colorThemeSchemaId,\n\t\t\ttype: theme.type,\n\t\t\tcolors: resultingColors,\n\t\t\ttokenColors: theme.tokenColors.filter(t => !!t.scope)\n\t\t}, null, '\\t');\n\t\tcontents = contents.replace(/\\\"__/g, '//\"');\n\n\t\tconst editorService = accessor.get(IEditorService);\n\t\treturn editorService.openEditor({ resource: undefined, contents, languageId: 'jsonc', options: { pinned: true } });\n\t}\n});\n\nconst toggleLightDarkThemesCommandId = 'workbench.action.toggleLightDarkThemes';\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: toggleLightDarkThemesCommandId,\n\t\t\ttitle: localize2('toggleLightDarkThemes.label', 'Toggle between Light/Dark Themes'),\n\t\t\tcategory: Categories.Preferences,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor) {\n\t\tconst themeService = accessor.get(IWorkbenchThemeService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst preferencesService = accessor.get(IPreferencesService);\n\n\t\tif (configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n\t\t\tconst message = localize({ key: 'cannotToggle', comment: ['{0} is a setting name'] }, \"Cannot toggle between light and dark themes when `{0}` is enabled in settings.\", ThemeSettings.DETECT_COLOR_SCHEME);\n\t\t\tnotificationService.prompt(Severity.Info, message, [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('goToSetting', \"Open Settings\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\treturn preferencesService.openUserSettings({ query: ThemeSettings.DETECT_COLOR_SCHEME });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentTheme = themeService.getColorTheme();\n\t\tlet newSettingsId: string = ThemeSettings.PREFERRED_DARK_THEME;\n\t\tswitch (currentTheme.type) {\n\t\t\tcase ColorScheme.LIGHT:\n\t\t\t\tnewSettingsId = ThemeSettings.PREFERRED_DARK_THEME;\n\t\t\t\tbreak;\n\t\t\tcase ColorScheme.DARK:\n\t\t\t\tnewSettingsId = ThemeSettings.PREFERRED_LIGHT_THEME;\n\t\t\t\tbreak;\n\t\t\tcase ColorScheme.HIGH_CONTRAST_LIGHT:\n\t\t\t\tnewSettingsId = ThemeSettings.PREFERRED_HC_DARK_THEME;\n\t\t\t\tbreak;\n\t\t\tcase ColorScheme.HIGH_CONTRAST_DARK:\n\t\t\t\tnewSettingsId = ThemeSettings.PREFERRED_HC_LIGHT_THEME;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst themeSettingId: string = configurationService.getValue(newSettingsId);\n\n\t\tif (themeSettingId && typeof themeSettingId === 'string') {\n\t\t\tconst theme = (await themeService.getColorThemes()).find(t => t.settingsId === themeSettingId);\n\t\t\tif (theme) {\n\t\t\t\tthemeService.setColorTheme(theme.id, 'auto');\n\t\t\t}\n\t\t}\n\t}\n});\n\nconst browseColorThemesInMarketplaceCommandId = 'workbench.action.browseColorThemesInMarketplace';\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: browseColorThemesInMarketplaceCommandId,\n\t\t\ttitle: localize2('browseColorThemeInMarketPlace.label', 'Browse Color Themes in Marketplace'),\n\t\t\tcategory: Categories.Preferences,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor) {\n\t\tconst marketplaceTag = 'category:themes';\n\t\tconst themeService = accessor.get(IWorkbenchThemeService);\n\t\tconst extensionGalleryService = accessor.get(IExtensionGalleryService);\n\t\tconst extensionResourceLoaderService = accessor.get(IExtensionResourceLoaderService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\n\t\tif (!extensionGalleryService.isEnabled() || !extensionResourceLoaderService.supportsExtensionGalleryResources) {\n\t\t\treturn;\n\t\t}\n\t\tconst currentTheme = themeService.getColorTheme();\n\t\tconst getMarketplaceColorThemes = (publisher: string, name: string, version: string) => themeService.getMarketplaceColorThemes(publisher, name, version);\n\n\t\tlet selectThemeTimeout: number | undefined;\n\n\t\tconst selectTheme = (theme: IWorkbenchTheme | undefined, applyTheme: boolean) => {\n\t\t\tif (selectThemeTimeout) {\n\t\t\t\tclearTimeout(selectThemeTimeout);\n\t\t\t}\n\t\t\tselectThemeTimeout = mainWindow.setTimeout(() => {\n\t\t\t\tselectThemeTimeout = undefined;\n\t\t\t\tconst newTheme = (theme ?? currentTheme) as IWorkbenchTheme;\n\t\t\t\tthemeService.setColorTheme(newTheme as IWorkbenchColorTheme, applyTheme ? 'auto' : 'preview').then(undefined,\n\t\t\t\t\terr => {\n\t\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t\t\tthemeService.setColorTheme(currentTheme, undefined);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}, applyTheme ? 0 : 200);\n\t\t};\n\n\t\tconst marketplaceThemePicker = instantiationService.createInstance(MarketplaceThemesPicker, getMarketplaceColorThemes, marketplaceTag);\n\t\tawait marketplaceThemePicker.openQuickPick('', themeService.getColorTheme(), selectTheme).then(undefined, onUnexpectedError);\n\t}\n});\n\nconst ThemesSubMenu = new MenuId('ThemesSubMenu');\nMenuRegistry.appendMenuItem(MenuId.GlobalActivity, {\n\ttitle: localize('themes', \"Themes\"),\n\tsubmenu: ThemesSubMenu,\n\tgroup: '2_configuration',\n\torder: 7\n} satisfies ISubmenuItem);\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\ttitle: localize({ key: 'miSelectTheme', comment: ['&& denotes a mnemonic'] }, \"&&Theme\"),\n\tsubmenu: ThemesSubMenu,\n\tgroup: '2_configuration',\n\torder: 7\n} satisfies ISubmenuItem);\n\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n\tcommand: {\n\t\tid: SelectColorThemeCommandId,\n\t\ttitle: localize('selectTheme.label', 'Color Theme')\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n\tcommand: {\n\t\tid: SelectFileIconThemeCommandId,\n\t\ttitle: localize('themes.selectIconTheme.label', \"File Icon Theme\")\n\t},\n\torder: 2\n});\n\nMenuRegistry.appendMenuItem(ThemesSubMenu, {\n\tcommand: {\n\t\tid: SelectProductIconThemeCommandId,\n\t\ttitle: localize('themes.selectProductIconTheme.label', \"Product Icon Theme\")\n\t},\n\torder: 3\n});\n\ntype DefaultThemeUpdatedNotificationReaction = 'keepNew' | 'keepOld' | 'tryNew' | 'cancel' | 'browse';\n\nclass DefaultThemeUpdatedNotificationContribution implements IWorkbenchContribution {\n\n\tstatic STORAGE_KEY = 'themeUpdatedNotificationShown';\n\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IWorkbenchThemeService private readonly _workbenchThemeService: IWorkbenchThemeService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t) {\n\t\tif (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution.STORAGE_KEY, StorageScope.APPLICATION)) {\n\t\t\treturn;\n\t\t}\n\t\tsetTimeout(async () => {\n\t\t\tif (_storageService.getBoolean(DefaultThemeUpdatedNotificationContribution.STORAGE_KEY, StorageScope.APPLICATION)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (await this._hostService.hadLastFocus()) {\n\t\t\t\tthis._storageService.store(DefaultThemeUpdatedNotificationContribution.STORAGE_KEY, true, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\tif (this._workbenchThemeService.hasUpdatedDefaultThemes()) {\n\t\t\t\t\tthis._showYouGotMigratedNotification();\n\t\t\t\t} else {\n\t\t\t\t\tconst currentTheme = this._workbenchThemeService.getColorTheme().settingsId;\n\t\t\t\t\tif (currentTheme === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD || currentTheme === ThemeSettingDefaults.COLOR_THEME_DARK_OLD) {\n\t\t\t\t\t\tthis._tryNewThemeNotification();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 3000);\n\t}\n\n\tprivate async _showYouGotMigratedNotification(): Promise<void> {\n\t\tconst usingLight = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT;\n\t\tconst newThemeSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n\t\tconst newTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n\t\tif (newTheme) {\n\t\t\tconst choices = [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('button.keep', \"Keep New Theme\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._writeTelemetry('keepNew');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('button.browse', \"Browse Themes\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._writeTelemetry('browse');\n\t\t\t\t\t\tthis._commandService.executeCommand(SelectColorThemeCommandId);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('button.revert', \"Revert\"),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tthis._writeTelemetry('keepOld');\n\t\t\t\t\t\tconst oldSettingsId = usingLight ? ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD : ThemeSettingDefaults.COLOR_THEME_DARK_OLD;\n\t\t\t\t\t\tconst oldTheme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === oldSettingsId);\n\t\t\t\t\t\tif (oldTheme) {\n\t\t\t\t\t\t\tthis._workbenchThemeService.setColorTheme(oldTheme, 'auto');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t\tawait this._notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tlocalize({ key: 'themeUpdatedNotification', comment: ['{0} is the name of the new default theme'] }, \"Visual Studio Code now ships with a new default theme '{0}'. If you prefer, you can switch back to the old theme or try one of the many other color themes available.\", newTheme.label),\n\t\t\t\tchoices,\n\t\t\t\t{\n\t\t\t\t\tonCancel: () => this._writeTelemetry('cancel')\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _tryNewThemeNotification(): Promise<void> {\n\t\tconst newThemeSettingsId = this._workbenchThemeService.getColorTheme().type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n\t\tconst theme = (await this._workbenchThemeService.getColorThemes()).find(theme => theme.settingsId === newThemeSettingsId);\n\t\tif (theme) {\n\t\t\tconst choices: IPromptChoice[] = [{\n\t\t\t\tlabel: localize('button.tryTheme', \"Try New Theme\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._writeTelemetry('tryNew');\n\t\t\t\t\tthis._workbenchThemeService.setColorTheme(theme, 'auto');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('button.cancel', \"Cancel\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._writeTelemetry('cancel');\n\t\t\t\t}\n\t\t\t}];\n\t\t\tawait this._notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tlocalize({ key: 'newThemeNotification', comment: ['{0} is the name of the new default theme'] }, \"Visual Studio Code now ships with a new default theme '{0}'. Do you want to give it a try?\", theme.label),\n\t\t\t\tchoices,\n\t\t\t\t{ onCancel: () => this._writeTelemetry('cancel') }\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _writeTelemetry(outcome: DefaultThemeUpdatedNotificationReaction): void {\n\t\ttype ThemeUpdatedNoticationClassification = {\n\t\t\towner: 'aeschli';\n\t\t\tcomment: 'Reaction to the notification that theme has updated to a new default theme';\n\t\t\tweb: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether this is running on web' };\n\t\t\treaction: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Outcome of the notification' };\n\t\t};\n\t\ttype ThemeUpdatedNoticationEvent = {\n\t\t\tweb: boolean;\n\t\t\treaction: DefaultThemeUpdatedNotificationReaction;\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<ThemeUpdatedNoticationEvent, ThemeUpdatedNoticationClassification>('themeUpdatedNotication', {\n\t\t\tweb: isWeb,\n\t\t\treaction: outcome\n\t\t});\n\t}\n}\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(DefaultThemeUpdatedNotificationContribution, LifecyclePhase.Eventually);\n"],
  "mappings": "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",
  "names": ["ConfigureItem", "i", "_", "picker", "theme"]
}
