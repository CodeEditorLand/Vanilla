{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as marked from \"../../../../base/common/marked/marked.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport {\n\tDefaultEndOfLine,\n\tEndOfLinePreference,\n\ttype ITextBufferFactory,\n\ttype ITextModel,\n} from \"../../../../editor/common/model.js\";\nimport { createTextBufferFactory } from \"../../../../editor/common/model/textModel.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport {\n\ttype ITextModelContentProvider,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\n\ninterface IWalkThroughContentProvider {\n\t(accessor: ServicesAccessor): string;\n}\n\nclass WalkThroughContentProviderRegistry {\n\tprivate readonly providers = new Map<string, IWalkThroughContentProvider>();\n\n\tregisterProvider(\n\t\tmoduleId: string,\n\t\tprovider: IWalkThroughContentProvider,\n\t): void {\n\t\tthis.providers.set(moduleId, provider);\n\t}\n\n\tgetProvider(moduleId: string): IWalkThroughContentProvider | undefined {\n\t\treturn this.providers.get(moduleId);\n\t}\n}\nexport const walkThroughContentRegistry =\n\tnew WalkThroughContentProviderRegistry();\n\nexport async function moduleToContent(\n\tinstantiationService: IInstantiationService,\n\tresource: URI,\n): Promise<string> {\n\tif (!resource.query) {\n\t\tthrow new Error(\"Walkthrough: invalid resource\");\n\t}\n\n\tconst query = JSON.parse(resource.query);\n\tif (!query.moduleId) {\n\t\tthrow new Error(\"Walkthrough: invalid resource\");\n\t}\n\n\tconst provider = walkThroughContentRegistry.getProvider(query.moduleId);\n\tif (!provider) {\n\t\t// ESM-comment-begin\n\t\t// return new Promise<string>((resolve, reject) => {\n\t\t// require([query.moduleId], content => {\n\t\t// try {\n\t\t// resolve(instantiationService.invokeFunction(content.default));\n\t\t// } catch (err) {\n\t\t// reject(err);\n\t\t// }\n\t\t// });\n\t\t// });\n\t\t// ESM-comment-end\n\t\t// ESM-uncomment-begin\n\t\tthrow new Error(\n\t\t\t`Walkthrough: no provider registered for ${query.moduleId}`,\n\t\t);\n\t\t// ESM-uncomment-end\n\t}\n\n\treturn instantiationService.invokeFunction(provider);\n}\n\nexport class WalkThroughSnippetContentProvider\n\timplements ITextModelContentProvider, IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.walkThroughSnippetContentProvider\";\n\n\tprivate loads = new Map<string, Promise<ITextBufferFactory>>();\n\n\tconstructor(\n\t\t@ITextModelService\n\t\tprivate readonly textModelResolverService: ITextModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {\n\t\tthis.textModelResolverService.registerTextModelContentProvider(\n\t\t\tSchemas.walkThroughSnippet,\n\t\t\tthis,\n\t\t);\n\t}\n\n\tprivate async textBufferFactoryFromResource(\n\t\tresource: URI,\n\t): Promise<ITextBufferFactory> {\n\t\tlet ongoing = this.loads.get(resource.toString());\n\t\tif (!ongoing) {\n\t\t\tongoing = moduleToContent(this.instantiationService, resource)\n\t\t\t\t.then((content) => createTextBufferFactory(content))\n\t\t\t\t.finally(() => this.loads.delete(resource.toString()));\n\t\t\tthis.loads.set(resource.toString(), ongoing);\n\t\t}\n\t\treturn ongoing;\n\t}\n\n\tpublic async provideTextContent(resource: URI): Promise<ITextModel> {\n\t\tconst factory = await this.textBufferFactoryFromResource(\n\t\t\tresource.with({ fragment: \"\" }),\n\t\t);\n\t\tlet codeEditorModel = this.modelService.getModel(resource);\n\t\tif (!codeEditorModel) {\n\t\t\tconst j = Number.parseInt(resource.fragment);\n\t\t\tlet i = 0;\n\t\t\tconst renderer = new marked.marked.Renderer();\n\t\t\trenderer.code = ({ text, lang }: marked.Tokens.Code) => {\n\t\t\t\ti++;\n\t\t\t\tconst languageId =\n\t\t\t\t\ttypeof lang === \"string\"\n\t\t\t\t\t\t? this.languageService.getLanguageIdByLanguageName(\n\t\t\t\t\t\t\t\tlang,\n\t\t\t\t\t\t\t) || \"\"\n\t\t\t\t\t\t: \"\";\n\t\t\t\tconst languageSelection =\n\t\t\t\t\tthis.languageService.createById(languageId);\n\t\t\t\t// Create all models for this resource in one go... we'll need them all and we don't want to re-parse markdown each time\n\t\t\t\tconst model = this.modelService.createModel(\n\t\t\t\t\ttext,\n\t\t\t\t\tlanguageSelection,\n\t\t\t\t\tresource.with({ fragment: `${i}.${lang}` }),\n\t\t\t\t);\n\t\t\t\tif (i === j) {\n\t\t\t\t\tcodeEditorModel = model;\n\t\t\t\t}\n\t\t\t\treturn \"\";\n\t\t\t};\n\t\t\tconst textBuffer = factory.create(DefaultEndOfLine.LF).textBuffer;\n\t\t\tconst lineCount = textBuffer.getLineCount();\n\t\t\tconst range = new Range(\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tlineCount,\n\t\t\t\ttextBuffer.getLineLength(lineCount) + 1,\n\t\t\t);\n\t\t\tconst markdown = textBuffer.getValueInRange(\n\t\t\t\trange,\n\t\t\t\tEndOfLinePreference.TextDefined,\n\t\t\t);\n\t\t\tmarked.marked(markdown, { renderer });\n\t\t}\n\t\treturn assertIsDefined(codeEditorModel);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
