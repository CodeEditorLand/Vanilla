var y=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=(n,e,t,r)=>{for(var o=r>1?void 0:r?x(e,t):e,i=n.length-1,a;i>=0;i--)(a=n[i])&&(o=(r?a(e,t,o):a(o))||o);return r&&o&&y(e,t,o),o},c=(n,e)=>(t,r)=>e(t,r,n);import{ITextModelService as w}from"../../../../editor/common/services/resolverService.js";import{IModelService as M}from"../../../../editor/common/services/model.js";import{DefaultEndOfLine as T,EndOfLinePreference as R}from"../../../../editor/common/model.js";import{ILanguageService as k}from"../../../../editor/common/languages/language.js";import*as g from"../../../../base/common/marked/marked.js";import{Schemas as B}from"../../../../base/common/network.js";import{Range as L}from"../../../../editor/common/core/range.js";import{createTextBufferFactory as F}from"../../../../editor/common/model/textModel.js";import{assertIsDefined as C}from"../../../../base/common/types.js";import{IInstantiationService as b}from"../../../../platform/instantiation/common/instantiation.js";async function P(n,e){if(!e.query)throw new Error("Walkthrough: invalid resource");const t=JSON.parse(e.query);if(!t.moduleId)throw new Error("Walkthrough: invalid resource");let r="";try{r=(await import(t.moduleId)).default()}catch{}return r}let d=class{constructor(e,t,r,o){this.textModelResolverService=e;this.languageService=t;this.modelService=r;this.instantiationService=o;this.textModelResolverService.registerTextModelContentProvider(B.walkThroughSnippet,this)}static ID="workbench.contrib.walkThroughSnippetContentProvider";loads=new Map;async textBufferFactoryFromResource(e){let t=this.loads.get(e.toString());return t||(t=P(this.instantiationService,e).then(r=>F(r)).finally(()=>this.loads.delete(e.toString())),this.loads.set(e.toString(),t)),t}async provideTextContent(e){const t=await this.textBufferFactoryFromResource(e.with({fragment:""}));let r=this.modelService.getModel(e);if(!r){const o=parseInt(e.fragment);let i=0;const a=new g.marked.Renderer;a.code=({text:v,lang:l})=>{i++;const p=typeof l=="string"&&this.languageService.getLanguageIdByLanguageName(l)||"",S=this.languageService.createById(p),h=this.modelService.createModel(v,S,e.with({fragment:`${i}.${l}`}));return i===o&&(r=h),""};const s=t.create(T.LF).textBuffer,m=s.getLineCount(),u=new L(1,1,m,s.getLineLength(m)+1),I=s.getValueInRange(u,R.TextDefined);g.marked(I,{renderer:a})}return C(r)}};d=f([c(0,w),c(1,k),c(2,M),c(3,b)],d);export{d as WalkThroughSnippetContentProvider,P as moduleToContent};
