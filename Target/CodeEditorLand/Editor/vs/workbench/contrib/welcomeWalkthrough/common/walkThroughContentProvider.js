var h=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=(i,e,t,r)=>{for(var o=r>1?void 0:r?x(e,t):e,n=i.length-1,a;n>=0;n--)(a=i[n])&&(o=(r?a(e,t,o):a(o))||o);return r&&o&&h(e,t,o),o},c=(i,e)=>(t,r)=>e(t,r,i);import*as u from"../../../../base/common/marked/marked.js";import{Schemas as w}from"../../../../base/common/network.js";import{assertIsDefined as M}from"../../../../base/common/types.js";import{Range as T}from"../../../../editor/common/core/range.js";import{ILanguageService as R}from"../../../../editor/common/languages/language.js";import{DefaultEndOfLine as b,EndOfLinePreference as k}from"../../../../editor/common/model.js";import{createTextBufferFactory as B}from"../../../../editor/common/model/textModel.js";import{IModelService as L}from"../../../../editor/common/services/model.js";import{ITextModelService as F}from"../../../../editor/common/services/resolverService.js";import{IInstantiationService as C}from"../../../../platform/instantiation/common/instantiation.js";async function P(i,e){if(!e.query)throw new Error("Walkthrough: invalid resource");const t=JSON.parse(e.query);if(!t.moduleId)throw new Error("Walkthrough: invalid resource");let r="";try{r=(await import(t.moduleId)).default()}catch{}return r}let s=class{constructor(e,t,r,o){this.textModelResolverService=e;this.languageService=t;this.modelService=r;this.instantiationService=o;this.textModelResolverService.registerTextModelContentProvider(w.walkThroughSnippet,this)}static ID="workbench.contrib.walkThroughSnippetContentProvider";loads=new Map;async textBufferFactoryFromResource(e){let t=this.loads.get(e.toString());return t||(t=P(this.instantiationService,e).then(r=>B(r)).finally(()=>this.loads.delete(e.toString())),this.loads.set(e.toString(),t)),t}async provideTextContent(e){const t=await this.textBufferFactoryFromResource(e.with({fragment:""}));let r=this.modelService.getModel(e);if(!r){const o=Number.parseInt(e.fragment);let n=0;const a=new u.marked.Renderer;a.code=({text:v,lang:m})=>{n++;const p=typeof m=="string"&&this.languageService.getLanguageIdByLanguageName(m)||"",y=this.languageService.createById(p),S=this.modelService.createModel(v,y,e.with({fragment:`${n}.${m}`}));return n===o&&(r=S),""};const d=t.create(b.LF).textBuffer,l=d.getLineCount(),g=new T(1,1,l,d.getLineLength(l)+1),I=d.getValueInRange(g,k.TextDefined);u.marked(I,{renderer:a})}return M(r)}};s=f([c(0,F),c(1,R),c(2,L),c(3,C)],s);export{s as WalkThroughSnippetContentProvider,P as moduleToContent};
