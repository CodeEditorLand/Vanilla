{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { isEqual, joinPath } from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { ServicesAccessor } from \"../../../../editor/browser/editorExtensions.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tINotificationService,\n\tNeverShowAgainScope,\n\tNotificationPriority,\n\tSeverity,\n\ttype INeverShowAgainOptions,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { isVirtualWorkspace } from \"../../../../platform/workspace/common/virtualWorkspace.js\";\nimport {\n\thasWorkspaceFileExtension,\n\tIWorkspaceContextService,\n\tWorkbenchState,\n\tWORKSPACE_SUFFIX,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tActiveEditorContext,\n\tResourceContextKey,\n\tTemporaryWorkspaceContext,\n} from \"../../../common/contextkeys.js\";\nimport {\n\tExtensions as WorkbenchExtensions,\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n} from \"../../../common/contributions.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { LifecyclePhase } from \"../../../services/lifecycle/common/lifecycle.js\";\nimport { TEXT_FILE_EDITOR_ID } from \"../../files/common/files.js\";\n\n/**\n * A workbench contribution that will look for `.code-workspace` files in the root of the\n * workspace folder and open a notification to suggest to open one of the workspaces.\n */\nexport class WorkspacesFinderContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IQuickInputService\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tthis.findWorkspaces();\n\t}\n\n\tprivate async findWorkspaces(): Promise<void> {\n\t\tconst folder = this.contextService.getWorkspace().folders[0];\n\t\tif (\n\t\t\t!folder ||\n\t\t\tthis.contextService.getWorkbenchState() !== WorkbenchState.FOLDER ||\n\t\t\tisVirtualWorkspace(this.contextService.getWorkspace())\n\t\t) {\n\t\t\treturn; // require a single (non virtual) root folder\n\t\t}\n\n\t\tconst rootFileNames = (\n\t\t\tawait this.fileService.resolve(folder.uri)\n\t\t).children?.map((child) => child.name);\n\t\tif (Array.isArray(rootFileNames)) {\n\t\t\tconst workspaceFiles = rootFileNames.filter(\n\t\t\t\thasWorkspaceFileExtension,\n\t\t\t);\n\t\t\tif (workspaceFiles.length > 0) {\n\t\t\t\tthis.doHandleWorkspaceFiles(folder.uri, workspaceFiles);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doHandleWorkspaceFiles(folder: URI, workspaces: string[]): void {\n\t\tconst neverShowAgain: INeverShowAgainOptions = {\n\t\t\tid: \"workspaces.dontPromptToOpen\",\n\t\t\tscope: NeverShowAgainScope.WORKSPACE,\n\t\t\tisSecondary: true,\n\t\t};\n\n\t\t// Prompt to open one workspace\n\t\tif (workspaces.length === 1) {\n\t\t\tconst workspaceFile = workspaces[0];\n\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tlocalize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"foundWorkspace\",\n\t\t\t\t\t\tcomment: ['{Locked=\"]({1})\"}'],\n\t\t\t\t\t},\n\t\t\t\t\t\"This folder contains a workspace file '{0}'. Do you want to open it? [Learn more]({1}) about workspace files.\",\n\t\t\t\t\tworkspaceFile,\n\t\t\t\t\t\"https://go.microsoft.com/fwlink/?linkid=2025315\",\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\"openWorkspace\", \"Open Workspace\"),\n\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\tthis.hostService.openWindow([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tworkspaceUri: joinPath(\n\t\t\t\t\t\t\t\t\t\tfolder,\n\t\t\t\t\t\t\t\t\t\tworkspaceFile,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tneverShowAgain,\n\t\t\t\t\tpriority: this.storageService.isNew(StorageScope.WORKSPACE)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: NotificationPriority.SILENT,\n\t\t\t\t},\n\t\t\t);\n\t\t} else if (workspaces.length > 1) {\n\t\t\t// Prompt to select a workspace from many\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tlocalize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"foundWorkspaces\",\n\t\t\t\t\t\tcomment: ['{Locked=\"]({0})\"}'],\n\t\t\t\t\t},\n\t\t\t\t\t\"This folder contains multiple workspace files. Do you want to open one? [Learn more]({0}) about workspace files.\",\n\t\t\t\t\t\"https://go.microsoft.com/fwlink/?linkid=2025315\",\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\"selectWorkspace\", \"Select Workspace\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis.quickInputService\n\t\t\t\t\t\t\t\t.pick(\n\t\t\t\t\t\t\t\t\tworkspaces.map(\n\t\t\t\t\t\t\t\t\t\t(workspace) =>\n\t\t\t\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: workspace,\n\t\t\t\t\t\t\t\t\t\t\t}) satisfies IQuickPickItem,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tplaceHolder: localize(\n\t\t\t\t\t\t\t\t\t\t\t\"selectToOpen\",\n\t\t\t\t\t\t\t\t\t\t\t\"Select a workspace to open\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.then((pick) => {\n\t\t\t\t\t\t\t\t\tif (pick) {\n\t\t\t\t\t\t\t\t\t\tthis.hostService.openWindow([\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tworkspaceUri: joinPath(\n\t\t\t\t\t\t\t\t\t\t\t\t\tfolder,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpick.label,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tneverShowAgain,\n\t\t\t\t\tpriority: this.storageService.isNew(StorageScope.WORKSPACE)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: NotificationPriority.SILENT,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(\n\tWorkbenchExtensions.Workbench,\n).registerWorkbenchContribution(\n\tWorkspacesFinderContribution,\n\tLifecyclePhase.Eventually,\n);\n\n// Render \"Open Workspace\" button in *.code-workspace files\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"workbench.action.openWorkspaceFromEditor\",\n\t\t\t\ttitle: localize2(\"openWorkspace\", \"Open Workspace\"),\n\t\t\t\tf1: false,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.EditorContent,\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tResourceContextKey.Extension.isEqualTo(\n\t\t\t\t\t\t\tWORKSPACE_SUFFIX,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tActiveEditorContext.isEqualTo(TEXT_FILE_EDITOR_ID),\n\t\t\t\t\t\tTemporaryWorkspaceContext.toNegated(),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor, uri: URI): Promise<void> {\n\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\tconst contextService = accessor.get(IWorkspaceContextService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\t\tif (\n\t\t\t\tcontextService.getWorkbenchState() === WorkbenchState.WORKSPACE\n\t\t\t) {\n\t\t\t\tconst workspaceConfiguration =\n\t\t\t\t\tcontextService.getWorkspace().configuration;\n\t\t\t\tif (\n\t\t\t\t\tworkspaceConfiguration &&\n\t\t\t\t\tisEqual(workspaceConfiguration, uri)\n\t\t\t\t) {\n\t\t\t\t\tnotificationService.info(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"alreadyOpen\",\n\t\t\t\t\t\t\t\"This workspace is already open.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\treturn; // workspace already opened\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn hostService.openWindow([{ workspaceUri: uri }]);\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": []
}
