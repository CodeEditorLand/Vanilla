{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/welcomeGettingStarted/test/browser/gettingStartedMarkdownRenderer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { FileAccess } from '../../../../../base/common/network.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { LanguageService } from '../../../../../editor/common/services/languageService.js';\nimport { TestNotificationService } from '../../../../../platform/notification/test/common/testNotificationService.js';\nimport { GettingStartedDetailsRenderer } from '../../browser/gettingStartedDetailsRenderer.js';\nimport { convertInternalMediaPathToFileURI } from '../../browser/gettingStartedService.js';\nimport { TestFileService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestExtensionService } from '../../../../test/common/workbenchTestServices.js';\n\n\nsuite('Getting Started Markdown Renderer', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('renders theme picker markdown with images', async () => {\n\t\tconst fileService = new TestFileService();\n\t\tconst languageService = new LanguageService();\n\t\tconst renderer = new GettingStartedDetailsRenderer(fileService, new TestNotificationService(), new TestExtensionService(), languageService);\n\t\tconst mdPath = convertInternalMediaPathToFileURI('theme_picker').with({ query: JSON.stringify({ moduleId: 'vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker' }) });\n\t\tconst mdBase = FileAccess.asFileUri('vs/workbench/contrib/welcomeGettingStarted/common/media/');\n\t\tconst rendered = await renderer.renderMarkdown(mdPath, mdBase);\n\t\tconst imageSrcs = [...rendered.matchAll(/img src=\"[^\"]*\"/g)].map(match => match[0]);\n\t\tfor (const src of imageSrcs) {\n\t\t\tconst targetSrcFormat = /^img src=\".*\\/vs\\/workbench\\/contrib\\/welcomeGettingStarted\\/common\\/media\\/.*.png\"$/;\n\t\t\tassert(targetSrcFormat.test(src), `${src} didnt match regex`);\n\t\t}\n\t\tlanguageService.dispose();\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,kBAAkB;AAC3B,SAAS,+CAA+C;AACxD,SAAS,uBAAuB;AAChC,SAAS,+BAA+B;AACxC,SAAS,qCAAqC;AAC9C,SAAS,yCAAyC;AAClD,SAAS,uBAAuB;AAChC,SAAS,4BAA4B;AAGrC,MAAM,qCAAqC,MAAM;AAEhD,0CAAwC;AAExC,OAAK,6CAA6C,YAAY;AAC7D,UAAM,cAAc,IAAI,gBAAgB;AACxC,UAAM,kBAAkB,IAAI,gBAAgB;AAC5C,UAAM,WAAW,IAAI,8BAA8B,aAAa,IAAI,wBAAwB,GAAG,IAAI,qBAAqB,GAAG,eAAe;AAC1I,UAAM,SAAS,kCAAkC,cAAc,EAAE,KAAK,EAAE,OAAO,KAAK,UAAU,EAAE,UAAU,uEAAuE,CAAC,EAAE,CAAC;AACrL,UAAM,SAAS,WAAW,UAAU,0DAA0D;AAC9F,UAAM,WAAW,MAAM,SAAS,eAAe,QAAQ,MAAM;AAC7D,UAAM,YAAY,CAAC,GAAG,SAAS,SAAS,kBAAkB,CAAC,EAAE,IAAI,WAAS,MAAM,CAAC,CAAC;AAClF,eAAW,OAAO,WAAW;AAC5B,YAAM,kBAAkB;AACxB,aAAO,gBAAgB,KAAK,GAAG,GAAG,GAAG,GAAG,oBAAoB;AAAA,IAC7D;AACA,oBAAgB,QAAQ;AAAA,EACzB,CAAC;AACF,CAAC;",
  "names": []
}
