{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { Memento } from '../../../common/memento.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, ContextKeyExpression, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IUserDataSyncEnablementService } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { FileAccess } from '../../../../base/common/network.js';\nimport { EXTENSION_INSTALL_DEP_PACK_CONTEXT, EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT, IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { walkthroughs } from '../common/gettingStartedContent.js';\nimport { IWorkbenchAssignmentService } from '../../../services/assignment/common/assignmentService.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ILink, LinkedText, parseLinkedText } from '../../../../base/common/linkedText.js';\nimport { walkthroughsExtensionPoint } from './gettingStartedExtensionPoint.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { dirname } from '../../../../base/common/path.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { checkGlobFileExists } from '../../../services/extensions/common/workspaceContains.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { DefaultIconPath } from '../../../services/extensionManagement/common/extensionManagement.js';\n\nexport const HasMultipleNewFileEntries = new RawContextKey<boolean>('hasMultipleNewFileEntries', false);\n\nexport const IWalkthroughsService = createDecorator<IWalkthroughsService>('walkthroughsService');\n\nexport const hiddenEntriesConfigurationKey = 'workbench.welcomePage.hiddenCategories';\n\nexport const walkthroughMetadataConfigurationKey = 'workbench.welcomePage.walkthroughMetadata';\nexport type WalkthroughMetaDataType = Map<string, { firstSeen: number; stepIDs: string[]; manaullyOpened: boolean }>;\n\nconst BUILT_IN_SOURCE = localize('builtin', \"Built-In\");\n\nexport interface IWalkthrough {\n\tid: string;\n\ttitle: string;\n\tdescription: string;\n\torder: number;\n\tsource: string;\n\tisFeatured: boolean;\n\tnext?: string;\n\twhen: ContextKeyExpression;\n\tsteps: IWalkthroughStep[];\n\ticon:\n\t| { type: 'icon'; icon: ThemeIcon }\n\t| { type: 'image'; path: string };\n}\n\nexport type IWalkthroughLoose = Omit<IWalkthrough, 'steps'> & { steps: (Omit<IWalkthroughStep, 'description'> & { description: string })[] };\n\nexport interface IResolvedWalkthrough extends IWalkthrough {\n\tsteps: IResolvedWalkthroughStep[];\n\tnewItems: boolean;\n\trecencyBonus: number;\n\tnewEntry: boolean;\n}\n\nexport interface IWalkthroughStep {\n\tid: string;\n\ttitle: string;\n\tdescription: LinkedText[];\n\tcategory: string;\n\twhen: ContextKeyExpression;\n\torder: number;\n\tcompletionEvents: string[];\n\tmedia:\n\t| { type: 'image'; path: { hcDark: URI; hcLight: URI; light: URI; dark: URI }; altText: string }\n\t| { type: 'svg'; path: URI; altText: string }\n\t| { type: 'markdown'; path: URI; base: URI; root: URI };\n}\n\ntype StepProgress = { done: boolean };\n\nexport interface IResolvedWalkthroughStep extends IWalkthroughStep, StepProgress { }\n\nexport interface IWalkthroughsService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidAddWalkthrough: Event<IResolvedWalkthrough>;\n\treadonly onDidRemoveWalkthrough: Event<string>;\n\treadonly onDidChangeWalkthrough: Event<IResolvedWalkthrough>;\n\treadonly onDidProgressStep: Event<IResolvedWalkthroughStep>;\n\n\tgetWalkthroughs(): IResolvedWalkthrough[];\n\tgetWalkthrough(id: string): IResolvedWalkthrough;\n\n\tregisterWalkthrough(descriptor: IWalkthroughLoose): void;\n\n\tprogressByEvent(eventName: string): void;\n\tprogressStep(id: string): void;\n\tdeprogressStep(id: string): void;\n\n\tmarkWalkthroughOpened(id: string): void;\n}\n\n// Show walkthrough as \"new\" for 7 days after first install\nconst DAYS = 24 * 60 * 60 * 1000;\nconst NEW_WALKTHROUGH_TIME = 7 * DAYS;\n\nexport class WalkthroughsService extends Disposable implements IWalkthroughsService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidAddWalkthrough = new Emitter<IResolvedWalkthrough>();\n\treadonly onDidAddWalkthrough: Event<IResolvedWalkthrough> = this._onDidAddWalkthrough.event;\n\tprivate readonly _onDidRemoveWalkthrough = new Emitter<string>();\n\treadonly onDidRemoveWalkthrough: Event<string> = this._onDidRemoveWalkthrough.event;\n\tprivate readonly _onDidChangeWalkthrough = new Emitter<IResolvedWalkthrough>();\n\treadonly onDidChangeWalkthrough: Event<IResolvedWalkthrough> = this._onDidChangeWalkthrough.event;\n\tprivate readonly _onDidProgressStep = new Emitter<IResolvedWalkthroughStep>();\n\treadonly onDidProgressStep: Event<IResolvedWalkthroughStep> = this._onDidProgressStep.event;\n\n\tprivate memento: Memento;\n\tprivate stepProgress: Record<string, StepProgress | undefined>;\n\n\tprivate sessionEvents = new Set<string>();\n\tprivate completionListeners = new Map<string, Set<string>>();\n\n\tprivate gettingStartedContributions = new Map<string, IWalkthrough>();\n\tprivate steps = new Map<string, IWalkthroughStep>();\n\n\tprivate sessionInstalledExtensions: Set<string> = new Set<string>();\n\n\tprivate categoryVisibilityContextKeys = new Set<string>();\n\tprivate stepCompletionContextKeyExpressions = new Set<ContextKeyExpression>();\n\tprivate stepCompletionContextKeys = new Set<string>();\n\n\tprivate metadata: WalkthroughMetaDataType;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IContextKeyService private readonly contextService: IContextKeyService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkbenchAssignmentService private readonly tasExperimentService: IWorkbenchAssignmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.metadata = new Map(\n\t\t\tJSON.parse(\n\t\t\t\tthis.storageService.get(walkthroughMetadataConfigurationKey, StorageScope.PROFILE, '[]')));\n\n\t\tthis.memento = new Memento('gettingStartedService', this.storageService);\n\t\tthis.stepProgress = this.memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tthis.initCompletionEventListeners();\n\n\t\tHasMultipleNewFileEntries.bindTo(this.contextService).set(false);\n\t\tthis.registerWalkthroughs();\n\n\t}\n\n\tprivate registerWalkthroughs() {\n\n\t\twalkthroughs.forEach(async (category, index) => {\n\n\t\t\tthis._registerWalkthrough({\n\t\t\t\t...category,\n\t\t\t\ticon: { type: 'icon', icon: category.icon },\n\t\t\t\torder: walkthroughs.length - index,\n\t\t\t\tsource: BUILT_IN_SOURCE,\n\t\t\t\twhen: ContextKeyExpr.deserialize(category.when) ?? ContextKeyExpr.true(),\n\t\t\t\tsteps:\n\t\t\t\t\tcategory.content.steps.map((step, index) => {\n\t\t\t\t\t\treturn ({\n\t\t\t\t\t\t\t...step,\n\t\t\t\t\t\t\tcompletionEvents: step.completionEvents ?? [],\n\t\t\t\t\t\t\tdescription: parseDescription(step.description),\n\t\t\t\t\t\t\tcategory: category.id,\n\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\twhen: ContextKeyExpr.deserialize(step.when) ?? ContextKeyExpr.true(),\n\t\t\t\t\t\t\tmedia: step.media.type === 'image'\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\t\t\t\taltText: step.media.altText,\n\t\t\t\t\t\t\t\t\tpath: convertInternalMediaPathsToBrowserURIs(step.media.path)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t: step.media.type === 'svg'\n\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\ttype: 'svg',\n\t\t\t\t\t\t\t\t\t\taltText: step.media.altText,\n\t\t\t\t\t\t\t\t\t\tpath: convertInternalMediaPathToFileURI(step.media.path).with({ query: JSON.stringify({ moduleId: 'vs/workbench/contrib/welcomeGettingStarted/common/media/' + step.media.path }) })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\ttype: 'markdown',\n\t\t\t\t\t\t\t\t\t\tpath: convertInternalMediaPathToFileURI(step.media.path).with({ query: JSON.stringify({ moduleId: 'vs/workbench/contrib/welcomeGettingStarted/common/media/' + step.media.path }) }),\n\t\t\t\t\t\t\t\t\t\tbase: FileAccess.asFileUri('vs/workbench/contrib/welcomeGettingStarted/common/media/'),\n\t\t\t\t\t\t\t\t\t\troot: FileAccess.asFileUri('vs/workbench/contrib/welcomeGettingStarted/common/media/'),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t});\n\t\t});\n\n\t\twalkthroughsExtensionPoint.setHandler((_, { added, removed }) => {\n\t\t\tadded.map(e => this.registerExtensionWalkthroughContributions(e.description));\n\t\t\tremoved.map(e => this.unregisterExtensionWalkthroughContributions(e.description));\n\t\t});\n\t}\n\n\tprivate initCompletionEventListeners() {\n\t\tthis._register(this.commandService.onDidExecuteCommand(command => this.progressByEvent(`onCommand:${command.commandId}`)));\n\n\t\tthis.extensionManagementService.getInstalled().then(installed => {\n\t\t\tinstalled.forEach(ext => this.progressByEvent(`extensionInstalled:${ext.identifier.id.toLowerCase()}`));\n\t\t});\n\n\t\tthis._register(this.extensionManagementService.onDidInstallExtensions((result) => {\n\t\t\tfor (const e of result) {\n\t\t\t\tconst skipWalkthrough = e?.context?.[EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT] || e?.context?.[EXTENSION_INSTALL_DEP_PACK_CONTEXT];\n\t\t\t\t// If the window had last focus and the install didn't specify to skip the walkthrough\n\t\t\t\t// Then add it to the sessionInstallExtensions to be opened\n\t\t\t\tif (!skipWalkthrough) {\n\t\t\t\t\tthis.sessionInstalledExtensions.add(e.identifier.id.toLowerCase());\n\t\t\t\t}\n\t\t\t\tthis.progressByEvent(`extensionInstalled:${e.identifier.id.toLowerCase()}`);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.contextService.onDidChangeContext(event => {\n\t\t\tif (event.affectsSome(this.stepCompletionContextKeys)) {\n\t\t\t\tthis.stepCompletionContextKeyExpressions.forEach(expression => {\n\t\t\t\t\tif (event.affectsSome(new Set(expression.keys())) && this.contextService.contextMatchesRules(expression)) {\n\t\t\t\t\t\tthis.progressByEvent(`onContext:` + expression.serialize());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.viewsService.onDidChangeViewVisibility(e => {\n\t\t\tif (e.visible) { this.progressByEvent('onView:' + e.id); }\n\t\t}));\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\te.affectedKeys.forEach(key => { this.progressByEvent('onSettingChanged:' + key); });\n\t\t}));\n\n\t\tif (this.userDataSyncEnablementService.isEnabled()) { this.progressByEvent('onEvent:sync-enabled'); }\n\t\tthis._register(this.userDataSyncEnablementService.onDidChangeEnablement(() => {\n\t\t\tif (this.userDataSyncEnablementService.isEnabled()) { this.progressByEvent('onEvent:sync-enabled'); }\n\t\t}));\n\t}\n\n\tmarkWalkthroughOpened(id: string) {\n\t\tconst walkthrough = this.gettingStartedContributions.get(id);\n\t\tconst prior = this.metadata.get(id);\n\t\tif (prior && walkthrough) {\n\t\t\tthis.metadata.set(id, { ...prior, manaullyOpened: true, stepIDs: walkthrough.steps.map(s => s.id) });\n\t\t}\n\n\t\tthis.storageService.store(walkthroughMetadataConfigurationKey, JSON.stringify([...this.metadata.entries()]), StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n\tprivate async registerExtensionWalkthroughContributions(extension: IExtensionDescription) {\n\t\tconst convertExtensionPathToFileURI = (path: string) => path.startsWith('https://')\n\t\t\t? URI.parse(path, true)\n\t\t\t: FileAccess.uriToFileUri(joinPath(extension.extensionLocation, path));\n\n\t\tconst convertExtensionRelativePathsToBrowserURIs = (path: string | { hc: string; hcLight?: string; dark: string; light: string }): { hcDark: URI; hcLight: URI; dark: URI; light: URI } => {\n\t\t\tconst convertPath = (path: string) => path.startsWith('https://')\n\t\t\t\t? URI.parse(path, true)\n\t\t\t\t: FileAccess.uriToBrowserUri(joinPath(extension.extensionLocation, path));\n\n\t\t\tif (typeof path === 'string') {\n\t\t\t\tconst converted = convertPath(path);\n\t\t\t\treturn { hcDark: converted, hcLight: converted, dark: converted, light: converted };\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\thcDark: convertPath(path.hc),\n\t\t\t\t\thcLight: convertPath(path.hcLight ?? path.light),\n\t\t\t\t\tlight: convertPath(path.light),\n\t\t\t\t\tdark: convertPath(path.dark)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tif (!(extension.contributes?.walkthroughs?.length)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet sectionToOpen: string | undefined;\n\t\tlet sectionToOpenIndex = Math.min(); // '+Infinity';\n\t\tawait Promise.all(extension.contributes?.walkthroughs?.map(async (walkthrough, index) => {\n\t\t\tconst categoryID = extension.identifier.value + '#' + walkthrough.id;\n\n\t\t\tconst isNewlyInstalled = !this.metadata.get(categoryID);\n\t\t\tif (isNewlyInstalled) {\n\t\t\t\tthis.metadata.set(categoryID, { firstSeen: +new Date(), stepIDs: walkthrough.steps?.map(s => s.id) ?? [], manaullyOpened: false });\n\t\t\t}\n\n\t\t\tconst override = await Promise.race([\n\t\t\t\tthis.tasExperimentService?.getTreatment<string>(`gettingStarted.overrideCategory.${extension.identifier.value + '.' + walkthrough.id}.when`),\n\t\t\t\tnew Promise<string | undefined>(resolve => setTimeout(() => resolve(walkthrough.when), 5000))\n\t\t\t]);\n\n\t\t\tif (this.sessionInstalledExtensions.has(extension.identifier.value.toLowerCase())\n\t\t\t\t&& this.contextService.contextMatchesRules(ContextKeyExpr.deserialize(override ?? walkthrough.when) ?? ContextKeyExpr.true())\n\t\t\t) {\n\t\t\t\tthis.sessionInstalledExtensions.delete(extension.identifier.value.toLowerCase());\n\t\t\t\tif (index < sectionToOpenIndex && isNewlyInstalled) {\n\t\t\t\t\tsectionToOpen = categoryID;\n\t\t\t\t\tsectionToOpenIndex = index;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst steps = (walkthrough.steps ?? []).map((step, index) => {\n\t\t\t\tconst description = parseDescription(step.description || '');\n\t\t\t\tconst fullyQualifiedID = extension.identifier.value + '#' + walkthrough.id + '#' + step.id;\n\n\t\t\t\tlet media: IWalkthroughStep['media'];\n\n\t\t\t\tif (!step.media) {\n\t\t\t\t\tthrow Error('missing media in walkthrough step: ' + walkthrough.id + '@' + step.id);\n\t\t\t\t}\n\n\t\t\t\tif (step.media.image) {\n\t\t\t\t\tconst altText = step.media.altText;\n\t\t\t\t\tif (altText === undefined) {\n\t\t\t\t\t\tconsole.error('Walkthrough item:', fullyQualifiedID, 'is missing altText for its media element.');\n\t\t\t\t\t}\n\t\t\t\t\tmedia = { type: 'image', altText, path: convertExtensionRelativePathsToBrowserURIs(step.media.image) };\n\t\t\t\t}\n\t\t\t\telse if (step.media.markdown) {\n\t\t\t\t\tmedia = {\n\t\t\t\t\t\ttype: 'markdown',\n\t\t\t\t\t\tpath: convertExtensionPathToFileURI(step.media.markdown),\n\t\t\t\t\t\tbase: convertExtensionPathToFileURI(dirname(step.media.markdown)),\n\t\t\t\t\t\troot: FileAccess.uriToFileUri(extension.extensionLocation),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse if (step.media.svg) {\n\t\t\t\t\tmedia = {\n\t\t\t\t\t\ttype: 'svg',\n\t\t\t\t\t\tpath: convertExtensionPathToFileURI(step.media.svg),\n\t\t\t\t\t\taltText: step.media.svg,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Throw error for unknown walkthrough format\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Unknown walkthrough format detected for ' + fullyQualifiedID);\n\t\t\t\t}\n\n\t\t\t\treturn ({\n\t\t\t\t\tdescription,\n\t\t\t\t\tmedia,\n\t\t\t\t\tcompletionEvents: step.completionEvents?.filter(x => typeof x === 'string') ?? [],\n\t\t\t\t\tid: fullyQualifiedID,\n\t\t\t\t\ttitle: step.title,\n\t\t\t\t\twhen: ContextKeyExpr.deserialize(step.when) ?? ContextKeyExpr.true(),\n\t\t\t\t\tcategory: categoryID,\n\t\t\t\t\torder: index,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tlet isFeatured = false;\n\t\t\tif (walkthrough.featuredFor) {\n\t\t\t\tconst folders = this.workspaceContextService.getWorkspace().folders.map(f => f.uri);\n\t\t\t\tconst token = new CancellationTokenSource();\n\t\t\t\tsetTimeout(() => token.cancel(), 2000);\n\t\t\t\tisFeatured = await this.instantiationService.invokeFunction(a => checkGlobFileExists(a, folders, walkthrough.featuredFor!, token.token));\n\t\t\t}\n\n\t\t\tconst iconStr = walkthrough.icon ?? extension.icon;\n\t\t\tconst walkthoughDescriptor: IWalkthrough = {\n\t\t\t\tdescription: walkthrough.description,\n\t\t\t\ttitle: walkthrough.title,\n\t\t\t\tid: categoryID,\n\t\t\t\tisFeatured,\n\t\t\t\tsource: extension.displayName ?? extension.name,\n\t\t\t\torder: 0,\n\t\t\t\tsteps,\n\t\t\t\ticon: {\n\t\t\t\t\ttype: 'image',\n\t\t\t\t\tpath: iconStr\n\t\t\t\t\t\t? FileAccess.uriToBrowserUri(joinPath(extension.extensionLocation, iconStr)).toString(true)\n\t\t\t\t\t\t: DefaultIconPath\n\t\t\t\t},\n\t\t\t\twhen: ContextKeyExpr.deserialize(override ?? walkthrough.when) ?? ContextKeyExpr.true(),\n\t\t\t} as const;\n\n\t\t\tthis._registerWalkthrough(walkthoughDescriptor);\n\n\t\t\tthis._onDidAddWalkthrough.fire(this.resolveWalkthrough(walkthoughDescriptor));\n\t\t}));\n\n\t\tthis.storageService.store(walkthroughMetadataConfigurationKey, JSON.stringify([...this.metadata.entries()]), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst hadLastFoucs = await this.hostService.hadLastFocus();\n\t\tif (hadLastFoucs && sectionToOpen && this.configurationService.getValue<string>('workbench.welcomePage.walkthroughs.openOnInstall')) {\n\t\t\ttype GettingStartedAutoOpenClassification = {\n\t\t\t\towner: 'lramos15';\n\t\t\t\tcomment: 'When a walkthrthrough is opened upon extension installation';\n\t\t\t\tid: {\n\t\t\t\t\tclassification: 'PublicNonPersonalData'; purpose: 'FeatureInsight';\n\t\t\t\t\towner: 'lramos15';\n\t\t\t\t\tcomment: 'Used to understand what walkthroughs are consulted most frequently';\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype GettingStartedAutoOpenEvent = {\n\t\t\t\tid: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<GettingStartedAutoOpenEvent, GettingStartedAutoOpenClassification>('gettingStarted.didAutoOpenWalkthrough', { id: sectionToOpen });\n\t\t\tthis.commandService.executeCommand('workbench.action.openWalkthrough', sectionToOpen, true);\n\t\t}\n\t}\n\n\tprivate unregisterExtensionWalkthroughContributions(extension: IExtensionDescription) {\n\t\tif (!(extension.contributes?.walkthroughs?.length)) {\n\t\t\treturn;\n\t\t}\n\n\t\textension.contributes?.walkthroughs?.forEach(section => {\n\t\t\tconst categoryID = extension.identifier.value + '#' + section.id;\n\t\t\tsection.steps.forEach(step => {\n\t\t\t\tconst fullyQualifiedID = extension.identifier.value + '#' + section.id + '#' + step.id;\n\t\t\t\tthis.steps.delete(fullyQualifiedID);\n\t\t\t});\n\t\t\tthis.gettingStartedContributions.delete(categoryID);\n\t\t\tthis._onDidRemoveWalkthrough.fire(categoryID);\n\t\t});\n\t}\n\n\tgetWalkthrough(id: string): IResolvedWalkthrough {\n\n\t\tconst walkthrough = this.gettingStartedContributions.get(id);\n\t\tif (!walkthrough) { throw Error('Trying to get unknown walkthrough: ' + id); }\n\t\treturn this.resolveWalkthrough(walkthrough);\n\t}\n\n\tgetWalkthroughs(): IResolvedWalkthrough[] {\n\n\t\tconst registeredCategories = [...this.gettingStartedContributions.values()];\n\t\tconst categoriesWithCompletion = registeredCategories\n\t\t\t.map(category => {\n\t\t\t\treturn {\n\t\t\t\t\t...category,\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\ttype: 'steps' as const,\n\t\t\t\t\t\tsteps: category.steps\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t})\n\t\t\t.filter(category => category.content.type !== 'steps' || category.content.steps.length)\n\t\t\t.map(category => this.resolveWalkthrough(category));\n\n\t\treturn categoriesWithCompletion;\n\t}\n\n\tprivate resolveWalkthrough(category: IWalkthrough): IResolvedWalkthrough {\n\n\t\tconst stepsWithProgress = category.steps.map(step => this.getStepProgress(step));\n\n\t\tconst hasOpened = this.metadata.get(category.id)?.manaullyOpened;\n\t\tconst firstSeenDate = this.metadata.get(category.id)?.firstSeen;\n\t\tconst isNew = firstSeenDate && firstSeenDate > (+new Date() - NEW_WALKTHROUGH_TIME);\n\n\t\tconst lastStepIDs = this.metadata.get(category.id)?.stepIDs;\n\t\tconst rawCategory = this.gettingStartedContributions.get(category.id);\n\t\tif (!rawCategory) { throw Error('Could not find walkthrough with id ' + category.id); }\n\n\t\tconst currentStepIds: string[] = rawCategory.steps.map(s => s.id);\n\n\t\tconst hasNewSteps = lastStepIDs && (currentStepIds.length !== lastStepIDs.length || currentStepIds.some((id, index) => id !== lastStepIDs[index]));\n\n\t\tlet recencyBonus = 0;\n\t\tif (firstSeenDate) {\n\t\t\tconst currentDate = +new Date();\n\t\t\tconst timeSinceFirstSeen = currentDate - firstSeenDate;\n\t\t\trecencyBonus = Math.max(0, (NEW_WALKTHROUGH_TIME - timeSinceFirstSeen) / NEW_WALKTHROUGH_TIME);\n\t\t}\n\n\t\treturn {\n\t\t\t...category,\n\t\t\trecencyBonus,\n\t\t\tsteps: stepsWithProgress,\n\t\t\tnewItems: !!hasNewSteps,\n\t\t\tnewEntry: !!(isNew && !hasOpened),\n\t\t};\n\t}\n\n\tprivate getStepProgress(step: IWalkthroughStep): IResolvedWalkthroughStep {\n\t\treturn {\n\t\t\t...step,\n\t\t\tdone: false,\n\t\t\t...this.stepProgress[step.id]\n\t\t};\n\t}\n\n\tprogressStep(id: string) {\n\t\tconst oldProgress = this.stepProgress[id];\n\t\tif (!oldProgress || oldProgress.done !== true) {\n\t\t\tthis.stepProgress[id] = { done: true };\n\t\t\tthis.memento.saveMemento();\n\t\t\tconst step = this.getStep(id);\n\t\t\tif (!step) { throw Error('Tried to progress unknown step'); }\n\n\t\t\tthis._onDidProgressStep.fire(this.getStepProgress(step));\n\t\t}\n\t}\n\n\tdeprogressStep(id: string) {\n\t\tdelete this.stepProgress[id];\n\t\tthis.memento.saveMemento();\n\t\tconst step = this.getStep(id);\n\t\tthis._onDidProgressStep.fire(this.getStepProgress(step));\n\t}\n\n\tprogressByEvent(event: string): void {\n\t\tif (this.sessionEvents.has(event)) { return; }\n\n\t\tthis.sessionEvents.add(event);\n\t\tthis.completionListeners.get(event)?.forEach(id => this.progressStep(id));\n\t}\n\n\tregisterWalkthrough(walkthoughDescriptor: IWalkthroughLoose) {\n\t\tthis._registerWalkthrough({\n\t\t\t...walkthoughDescriptor,\n\t\t\tsteps: walkthoughDescriptor.steps.map(step => ({ ...step, description: parseDescription(step.description) }))\n\t\t});\n\t}\n\n\t_registerWalkthrough(walkthroughDescriptor: IWalkthrough): void {\n\t\tconst oldCategory = this.gettingStartedContributions.get(walkthroughDescriptor.id);\n\t\tif (oldCategory) {\n\t\t\tconsole.error(`Skipping attempt to overwrite walkthrough. (${walkthroughDescriptor.id})`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.gettingStartedContributions.set(walkthroughDescriptor.id, walkthroughDescriptor);\n\n\t\twalkthroughDescriptor.steps.forEach(step => {\n\t\t\tif (this.steps.has(step.id)) { throw Error('Attempting to register step with id ' + step.id + ' twice. Second is dropped.'); }\n\t\t\tthis.steps.set(step.id, step);\n\t\t\tstep.when.keys().forEach(key => this.categoryVisibilityContextKeys.add(key));\n\t\t\tthis.registerDoneListeners(step);\n\t\t});\n\n\t\twalkthroughDescriptor.when.keys().forEach(key => this.categoryVisibilityContextKeys.add(key));\n\t}\n\n\tprivate registerDoneListeners(step: IWalkthroughStep) {\n\t\tif ((step as any).doneOn) {\n\t\t\tconsole.error(`wakthrough step`, step, `uses deprecated 'doneOn' property. Adopt 'completionEvents' to silence this warning`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!step.completionEvents.length) {\n\t\t\tstep.completionEvents = coalesce(\n\t\t\t\tstep.description\n\t\t\t\t\t.filter(linkedText => linkedText.nodes.length === 1) // only buttons\n\t\t\t\t\t.flatMap(linkedText =>\n\t\t\t\t\t\tlinkedText.nodes\n\t\t\t\t\t\t\t.filter(((node): node is ILink => typeof node !== 'string'))\n\t\t\t\t\t\t\t.map(({ href }) => {\n\t\t\t\t\t\t\t\tif (href.startsWith('command:')) {\n\t\t\t\t\t\t\t\t\treturn 'onCommand:' + href.slice('command:'.length, href.includes('?') ? href.indexOf('?') : undefined);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (href.startsWith('https://') || href.startsWith('http://')) {\n\t\t\t\t\t\t\t\t\treturn 'onLink:' + href;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t})));\n\t\t}\n\n\t\tif (!step.completionEvents.length) {\n\t\t\tstep.completionEvents.push('stepSelected');\n\t\t}\n\n\t\tfor (let event of step.completionEvents) {\n\t\t\tconst [_, eventType, argument] = /^([^:]*):?(.*)$/.exec(event) ?? [];\n\n\t\t\tif (!eventType) {\n\t\t\t\tconsole.error(`Unknown completionEvent ${event} when registering step ${step.id}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch (eventType) {\n\t\t\t\tcase 'onLink': case 'onEvent': case 'onView': case 'onSettingChanged':\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'onContext': {\n\t\t\t\t\tconst expression = ContextKeyExpr.deserialize(argument);\n\t\t\t\t\tif (expression) {\n\t\t\t\t\t\tthis.stepCompletionContextKeyExpressions.add(expression);\n\t\t\t\t\t\texpression.keys().forEach(key => this.stepCompletionContextKeys.add(key));\n\t\t\t\t\t\tevent = eventType + ':' + expression.serialize();\n\t\t\t\t\t\tif (this.contextService.contextMatchesRules(expression)) {\n\t\t\t\t\t\t\tthis.sessionEvents.add(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('Unable to parse context key expression:', expression, 'in walkthrough step', step.id);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'onStepSelected': case 'stepSelected':\n\t\t\t\t\tevent = 'stepSelected:' + step.id;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'onCommand':\n\t\t\t\t\tevent = eventType + ':' + argument.replace(/^toSide:/, '');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'onExtensionInstalled': case 'extensionInstalled':\n\t\t\t\t\tevent = 'extensionInstalled:' + argument.toLowerCase();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(`Unknown completionEvent ${event} when registering step ${step.id}`);\n\t\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.registerCompletionListener(event, step);\n\t\t}\n\t}\n\n\tprivate registerCompletionListener(event: string, step: IWalkthroughStep) {\n\t\tif (!this.completionListeners.has(event)) {\n\t\t\tthis.completionListeners.set(event, new Set());\n\t\t}\n\t\tthis.completionListeners.get(event)?.add(step.id);\n\t}\n\n\tprivate getStep(id: string): IWalkthroughStep {\n\t\tconst step = this.steps.get(id);\n\t\tif (!step) { throw Error('Attempting to access step which does not exist in registry ' + id); }\n\t\treturn step;\n\t}\n}\n\nexport const parseDescription = (desc: string): LinkedText[] => desc.split('\\n').filter(x => x).map(text => parseLinkedText(text));\n\nexport const convertInternalMediaPathToFileURI = (path: string) => path.startsWith('https://')\n\t? URI.parse(path, true)\n\t: FileAccess.asFileUri(`vs/workbench/contrib/welcomeGettingStarted/common/media/${path}`);\n\nconst convertInternalMediaPathToBrowserURI = (path: string) => path.startsWith('https://')\n\t? URI.parse(path, true)\n\t: FileAccess.asBrowserUri(`vs/workbench/contrib/welcomeGettingStarted/common/media/${path}`);\nconst convertInternalMediaPathsToBrowserURIs = (path: string | { hc: string; hcLight?: string; dark: string; light: string }): { hcDark: URI; hcLight: URI; dark: URI; light: URI } => {\n\tif (typeof path === 'string') {\n\t\tconst converted = convertInternalMediaPathToBrowserURI(path);\n\t\treturn { hcDark: converted, hcLight: converted, dark: converted, light: converted };\n\t} else {\n\t\treturn {\n\t\t\thcDark: convertInternalMediaPathToBrowserURI(path.hc),\n\t\t\thcLight: convertInternalMediaPathToBrowserURI(path.hcLight ?? path.light),\n\t\t\tlight: convertInternalMediaPathToBrowserURI(path.light),\n\t\t\tdark: convertInternalMediaPathToBrowserURI(path.dark)\n\t\t};\n\t}\n};\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'resetGettingStartedProgress',\n\t\t\tcategory: localize2('developer', \"Developer\"),\n\t\t\ttitle: localize2('resetWelcomePageWalkthroughProgress', \"Reset Welcome Page Walkthrough Progress\"),\n\t\t\tf1: true,\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize2('resetGettingStartedProgressDescription', 'Reset the progress of all Walkthrough steps on the Welcome Page to make them appear as if they are being viewed for the first time, providing a fresh start to the getting started experience.'),\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst gettingStartedService = accessor.get(IWalkthroughsService);\n\t\tconst storageService = accessor.get(IStorageService);\n\n\t\tstorageService.store(\n\t\t\thiddenEntriesConfigurationKey,\n\t\t\tJSON.stringify([]),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER);\n\n\t\tstorageService.store(\n\t\t\twalkthroughMetadataConfigurationKey,\n\t\t\tJSON.stringify([]),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER);\n\n\t\tconst memento = new Memento('gettingStartedService', accessor.get(IStorageService));\n\t\tconst record = memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);\n\t\tfor (const key in record) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(record, key)) {\n\t\t\t\ttry {\n\t\t\t\t\tgettingStartedService.deprogressStep(key);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmemento.saveMemento();\n\t}\n});\n\nregisterSingleton(IWalkthroughsService, WalkthroughsService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["index", "path"]
}
