import{Schemas as V}from"../../../../../vs/base/common/network.js";import"../../../../../vs/base/common/uri.js";import"vs/css!./media/searchEditor";import{isDiffEditor as b}from"../../../../../vs/editor/browser/editorBrowser.js";import"../../../../../vs/editor/common/config/editorOptions.js";import{IConfigurationService as P}from"../../../../../vs/platform/configuration/common/configuration.js";import{IInstantiationService as w}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{ILabelService as k}from"../../../../../vs/platform/label/common/label.js";import{ITelemetryService as O}from"../../../../../vs/platform/telemetry/common/telemetry.js";import{IWorkspaceContextService as L}from"../../../../../vs/platform/workspace/common/workspace.js";import{EditorsOrder as T}from"../../../../../vs/workbench/common/editor.js";import{getSearchView as M}from"../../../../../vs/workbench/contrib/search/browser/searchActionsBase.js";import"../../../../../vs/workbench/contrib/search/browser/searchModel.js";import"../../../../../vs/workbench/contrib/searchEditor/browser/searchEditor.js";import"../../../../../vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.js";import{getOrMakeSearchEditorInput as A,SearchEditorInput as d}from"../../../../../vs/workbench/contrib/searchEditor/browser/searchEditorInput.js";import{serializeSearchResultForEditor as D}from"../../../../../vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.js";import{IConfigurationResolverService as G}from"../../../../../vs/workbench/services/configurationResolver/common/configurationResolver.js";import{IEditorGroupsService as U}from"../../../../../vs/workbench/services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as N,IEditorService as g,SIDE_GROUP as q}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{IHistoryService as _}from"../../../../../vs/workbench/services/history/common/history.js";import"../../../../../vs/workbench/services/search/common/search.js";import{IViewsService as Q}from"../../../../../vs/workbench/services/views/common/viewsService.js";const Ce=e=>{const t=e.get(g);t.activeEditor instanceof d&&t.activeEditorPane.toggleCaseSensitive()},xe=e=>{const t=e.get(g);t.activeEditor instanceof d&&t.activeEditorPane.toggleWholeWords()},ye=e=>{const t=e.get(g);t.activeEditor instanceof d&&t.activeEditorPane.toggleRegex()},we=e=>{const t=e.get(g);t.activeEditor instanceof d&&t.activeEditorPane.toggleContextLines()},Ae=(e,t)=>{const i=e.get(g);i.activeEditor instanceof d&&i.activeEditorPane.modifyContextLines(t)},Re=e=>{const t=e.get(g);t.activeEditor instanceof d&&t.activeEditorPane.focusAllResults()};async function Pe(e){const t=e.get(Q),i=e.get(w),r=M(t);r?await i.invokeFunction(F,{filesToInclude:r.searchIncludePattern.getValue(),onlyOpenEditors:r.searchIncludePattern.onlySearchInOpenEditors(),filesToExclude:r.searchExcludePattern.getValue(),isRegexp:r.searchAndReplaceWidget.searchInput?.getRegex(),isCaseSensitive:r.searchAndReplaceWidget.searchInput?.getCaseSensitive(),matchWholeWord:r.searchAndReplaceWidget.searchInput?.getWholeWords(),useExcludeSettingsAndIgnoreFiles:r.searchExcludePattern.useExcludesAndIgnoreFiles(),showIncludesExcludes:!!(r.searchIncludePattern.getValue()||r.searchExcludePattern.getValue()||!r.searchExcludePattern.useExcludesAndIgnoreFiles())}):await i.invokeFunction(F)}const F=async(e,t={},i=!1)=>{const r=e.get(g),v=e.get(U),f=e.get(O),I=e.get(w),S=e.get(P),C=e.get(G),h=e.get(L),E=e.get(_).getLastActiveWorkspaceRoot(V.file),x=E?h.getWorkspaceFolder(E)??void 0:void 0,a=r.activeTextEditorControl;let n,c="";if(a){b(a)?a.getOriginalEditor().hasTextFocus()?n=a.getOriginalEditor():n=a.getModifiedEditor():n=a;const o=n?.getSelection();if(c=(o&&n?.getModel()?.getValueInRange(o))??"",o?.isEmpty()&&S.getValue("search").seedWithNearestWord){const p=n.getModel()?.getWordAtPosition(o.getStartPosition());p&&(c=p.word)}}else r.activeEditor instanceof d&&(c=r.activeEditorPane.getSelected());f.publicLog2("searchEditor/openNewSearchEditor");const s={query:t.location==="new"||S.getValue("editor").find.seedSearchStringFromSelection?c:void 0};for(const o of Object.entries(t)){const p=o[0],m=o[1];m!==void 0&&(s[p]=typeof m=="string"?await C.resolveAsync(x,m):m)}const y=r.getEditors(T.MOST_RECENTLY_ACTIVE).find(o=>o.editor.typeId===d.ID);let u;if(y&&s.location==="reuse"){const o=v.getGroup(y.groupId);if(!o)throw new Error("Invalid group id for search editor");const p=y.editor;u=await o.openEditor(p),c?u.setQuery(c):u.selectQuery(),u.setSearchConfig(s)}else{const o=I.invokeFunction(A,{config:s,resultsContents:"",from:"rawData"});u=await r.openEditor(o,{pinned:!0},i?q:N)}const W=S.getValue("search").searchOnType;(s.triggerSearch===!0||s.triggerSearch!==!1&&W&&s.query)&&u.triggerSearch({focusResults:s.focusResults}),s.focusResults||u.focusSearchInput()},Oe=async(e,t,i,r,v)=>{if(!t.query){console.error("Expected searchResult.query to be defined. Got",t);return}const f=e.get(g),I=e.get(O),S=e.get(w),C=e.get(k),h=e.get(P),R=h.getValue("search").sortOrder;I.publicLog2("searchEditor/createEditorFromSearchResult");const E=l=>C.getUriLabel(l,{relative:!0}),{text:x,matchRanges:a,config:n}=D(t,i,r,0,E,R);n.onlyOpenEditors=v;const c=h.getValue("search").searchEditor.defaultNumberOfContextLines;if(t.isDirty||c===0||c===null){const l=S.invokeFunction(A,{resultsContents:x,config:n,from:"rawData"});await f.openEditor(l,{pinned:!0}),l.setMatchRanges(a)}else{const l=S.invokeFunction(A,{from:"rawData",resultsContents:"",config:{...n,contextLines:c}});(await f.openEditor(l,{pinned:!0})).triggerSearch()}};export{Oe as createEditorFromSearchResult,Ae as modifySearchEditorContextLinesCommand,F as openNewSearchEditor,Pe as openSearchEditor,Re as selectAllSearchEditorMatchesCommand,Ce as toggleSearchEditorCaseSensitiveCommand,we as toggleSearchEditorContextLinesCommand,ye as toggleSearchEditorRegexCommand,xe as toggleSearchEditorWholeWordCommand};
