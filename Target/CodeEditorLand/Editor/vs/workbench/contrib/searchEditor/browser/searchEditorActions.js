import{Schemas as V}from"../../../../base/common/network.js";import"../../../../base/common/uri.js";import"./media/searchEditor.css";import{isDiffEditor as b}from"../../../../editor/browser/editorBrowser.js";import"../../../../editor/common/config/editorOptions.js";import{IConfigurationService as P}from"../../../../platform/configuration/common/configuration.js";import{IInstantiationService as R}from"../../../../platform/instantiation/common/instantiation.js";import{ILabelService as k}from"../../../../platform/label/common/label.js";import{ITelemetryService as O}from"../../../../platform/telemetry/common/telemetry.js";import{IWorkspaceContextService as L}from"../../../../platform/workspace/common/workspace.js";import{EditorsOrder as T}from"../../../common/editor.js";import{IViewsService as M}from"../../../services/views/common/viewsService.js";import{getSearchView as D}from"../../search/browser/searchActionsBase.js";import"../../search/browser/searchModel.js";import"./searchEditor.js";import"./searchEditor.contribution.js";import{getOrMakeSearchEditorInput as w,SearchEditorInput as d}from"./searchEditorInput.js";import{serializeSearchResultForEditor as G}from"./searchEditorSerialization.js";import{IConfigurationResolverService as U}from"../../../services/configurationResolver/common/configurationResolver.js";import{IEditorGroupsService as N}from"../../../services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as q,IEditorService as l,SIDE_GROUP as _}from"../../../services/editor/common/editorService.js";import{IHistoryService as Q}from"../../../services/history/common/history.js";import"../../../services/search/common/search.js";const Ce=e=>{const t=e.get(l);t.activeEditor instanceof d&&t.activeEditorPane.toggleCaseSensitive()},xe=e=>{const t=e.get(l);t.activeEditor instanceof d&&t.activeEditorPane.toggleWholeWords()},ye=e=>{const t=e.get(l);t.activeEditor instanceof d&&t.activeEditorPane.toggleRegex()},Re=e=>{const t=e.get(l);t.activeEditor instanceof d&&t.activeEditorPane.toggleContextLines()},we=(e,t)=>{const i=e.get(l);i.activeEditor instanceof d&&i.activeEditorPane.modifyContextLines(t)},Ae=e=>{const t=e.get(l);t.activeEditor instanceof d&&t.activeEditorPane.focusAllResults()};async function Pe(e){const t=e.get(M),i=e.get(R),r=D(t);r?await i.invokeFunction(F,{filesToInclude:r.searchIncludePattern.getValue(),onlyOpenEditors:r.searchIncludePattern.onlySearchInOpenEditors(),filesToExclude:r.searchExcludePattern.getValue(),isRegexp:r.searchAndReplaceWidget.searchInput?.getRegex(),isCaseSensitive:r.searchAndReplaceWidget.searchInput?.getCaseSensitive(),matchWholeWord:r.searchAndReplaceWidget.searchInput?.getWholeWords(),useExcludeSettingsAndIgnoreFiles:r.searchExcludePattern.useExcludesAndIgnoreFiles(),showIncludesExcludes:!!(r.searchIncludePattern.getValue()||r.searchExcludePattern.getValue()||!r.searchExcludePattern.useExcludesAndIgnoreFiles())}):await i.invokeFunction(F)}const F=async(e,t={},i=!1)=>{const r=e.get(l),v=e.get(N),f=e.get(O),I=e.get(R),S=e.get(P),C=e.get(U),h=e.get(L),E=e.get(Q).getLastActiveWorkspaceRoot(V.file),x=E?h.getWorkspaceFolder(E)??void 0:void 0,a=r.activeTextEditorControl;let n,c="";if(a){b(a)?a.getOriginalEditor().hasTextFocus()?n=a.getOriginalEditor():n=a.getModifiedEditor():n=a;const o=n?.getSelection();if(c=(o&&n?.getModel()?.getValueInRange(o))??"",o?.isEmpty()&&S.getValue("search").seedWithNearestWord){const p=n.getModel()?.getWordAtPosition(o.getStartPosition());p&&(c=p.word)}}else r.activeEditor instanceof d&&(c=r.activeEditorPane.getSelected());f.publicLog2("searchEditor/openNewSearchEditor");const s={query:t.location==="new"||S.getValue("editor").find.seedSearchStringFromSelection?c:void 0};for(const o of Object.entries(t)){const p=o[0],m=o[1];m!==void 0&&(s[p]=typeof m=="string"?await C.resolveAsync(x,m):m)}const y=r.getEditors(T.MOST_RECENTLY_ACTIVE).find(o=>o.editor.typeId===d.ID);let u;if(y&&s.location==="reuse"){const o=v.getGroup(y.groupId);if(!o)throw new Error("Invalid group id for search editor");const p=y.editor;u=await o.openEditor(p),c?u.setQuery(c):u.selectQuery(),u.setSearchConfig(s)}else{const o=I.invokeFunction(w,{config:s,resultsContents:"",from:"rawData"});u=await r.openEditor(o,{pinned:!0},i?_:q)}const W=S.getValue("search").searchOnType;(s.triggerSearch===!0||s.triggerSearch!==!1&&W&&s.query)&&u.triggerSearch({focusResults:s.focusResults}),s.focusResults||u.focusSearchInput()},Oe=async(e,t,i,r,v)=>{if(!t.query)return;const f=e.get(l),I=e.get(O),S=e.get(R),C=e.get(k),h=e.get(P),A=h.getValue("search").sortOrder;I.publicLog2("searchEditor/createEditorFromSearchResult");const E=g=>C.getUriLabel(g,{relative:!0}),{text:x,matchRanges:a,config:n}=G(t,i,r,0,E,A);n.onlyOpenEditors=v;const c=h.getValue("search").searchEditor.defaultNumberOfContextLines;if(t.isDirty||c===0||c===null){const g=S.invokeFunction(w,{resultsContents:x,config:n,from:"rawData"});await f.openEditor(g,{pinned:!0}),g.setMatchRanges(a)}else{const g=S.invokeFunction(w,{from:"rawData",resultsContents:"",config:{...n,contextLines:c}});(await f.openEditor(g,{pinned:!0})).triggerSearch()}};export{Oe as createEditorFromSearchResult,we as modifySearchEditorContextLinesCommand,F as openNewSearchEditor,Pe as openSearchEditor,Ae as selectAllSearchEditorMatchesCommand,Ce as toggleSearchEditorCaseSensitiveCommand,Re as toggleSearchEditorContextLinesCommand,ye as toggleSearchEditorRegexCommand,xe as toggleSearchEditorWholeWordCommand};
