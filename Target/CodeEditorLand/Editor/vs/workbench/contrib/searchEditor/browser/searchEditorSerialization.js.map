{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport \"./media/searchEditor.css\";\nimport type { ServicesAccessor } from \"../../../../editor/browser/editorExtensions.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type {\n\tITextQuery,\n\tSearchSortOrder,\n} from \"../../../services/search/common/search.js\";\nimport { ITextFileService } from \"../../../services/textfile/common/textfiles.js\";\nimport {\n\ttype CellMatch,\n\ttype FileMatch,\n\ttype FolderMatch,\n\ttype Match,\n\ttype SearchResult,\n\tsearchMatchComparer,\n} from \"../../search/browser/searchModel.js\";\nimport type { SearchConfiguration } from \"./searchEditorInput.js\";\n\n// Using \\r\\n on Windows inserts an extra newline between results.\nconst lineDelimiter = \"\\n\";\n\nconst translateRangeLines = (n: number) => (range: Range) =>\n\tnew Range(\n\t\trange.startLineNumber + n,\n\t\trange.startColumn,\n\t\trange.endLineNumber + n,\n\t\trange.endColumn,\n\t);\n\nconst matchToSearchResultFormat = (\n\tmatch: Match,\n\tlongestLineNumber: number,\n): { line: string; ranges: Range[]; lineNumber: string }[] => {\n\tconst getLinePrefix = (i: number) => `${match.range().startLineNumber + i}`;\n\n\tconst fullMatchLines = match.fullPreviewLines();\n\n\tconst results: { line: string; ranges: Range[]; lineNumber: string }[] = [];\n\n\tfullMatchLines.forEach((sourceLine, i) => {\n\t\tconst lineNumber = getLinePrefix(i);\n\t\tconst paddingStr = \" \".repeat(longestLineNumber - lineNumber.length);\n\t\tconst prefix = `  ${paddingStr}${lineNumber}: `;\n\t\tconst prefixOffset = prefix.length;\n\n\t\t// split instead of replace to avoid creating a new string object\n\t\tconst line = prefix + (sourceLine.split(/\\r?\\n?$/, 1)[0] || \"\");\n\n\t\tconst rangeOnThisLine = ({\n\t\t\tstart,\n\t\t\tend,\n\t\t}: { start?: number; end?: number }) =>\n\t\t\tnew Range(\n\t\t\t\t1,\n\t\t\t\t(start ?? 1) + prefixOffset,\n\t\t\t\t1,\n\t\t\t\t(end ?? sourceLine.length + 1) + prefixOffset,\n\t\t\t);\n\n\t\tconst matchRange = match.rangeInPreview();\n\t\tconst matchIsSingleLine =\n\t\t\tmatchRange.startLineNumber === matchRange.endLineNumber;\n\n\t\tlet lineRange;\n\t\tif (matchIsSingleLine) {\n\t\t\tlineRange = rangeOnThisLine({\n\t\t\t\tstart: matchRange.startColumn,\n\t\t\t\tend: matchRange.endColumn,\n\t\t\t});\n\t\t} else if (i === 0) {\n\t\t\tlineRange = rangeOnThisLine({ start: matchRange.startColumn });\n\t\t} else if (i === fullMatchLines.length - 1) {\n\t\t\tlineRange = rangeOnThisLine({ end: matchRange.endColumn });\n\t\t} else {\n\t\t\tlineRange = rangeOnThisLine({});\n\t\t}\n\n\t\tresults.push({ lineNumber: lineNumber, line, ranges: [lineRange] });\n\t});\n\n\treturn results;\n};\n\ntype SearchResultSerialization = { text: string[]; matchRanges: Range[] };\n\nfunction fileMatchToSearchResultFormat(\n\tfileMatch: FileMatch,\n\tlabelFormatter: (x: URI) => string,\n): SearchResultSerialization[] {\n\tconst textSerializations =\n\t\tfileMatch.textMatches().length > 0\n\t\t\t? matchesToSearchResultFormat(\n\t\t\t\t\tfileMatch.resource,\n\t\t\t\t\tfileMatch.textMatches().sort(searchMatchComparer),\n\t\t\t\t\tfileMatch.context,\n\t\t\t\t\tlabelFormatter,\n\t\t\t\t)\n\t\t\t: undefined;\n\tconst cellSerializations = fileMatch\n\t\t.cellMatches()\n\t\t.sort((a, b) => a.cellIndex - b.cellIndex)\n\t\t.sort()\n\t\t.filter((cellMatch) => cellMatch.contentMatches.length > 0)\n\t\t.map((cellMatch, index) =>\n\t\t\tcellMatchToSearchResultFormat(\n\t\t\t\tcellMatch,\n\t\t\t\tlabelFormatter,\n\t\t\t\tindex === 0,\n\t\t\t),\n\t\t);\n\n\treturn [textSerializations, ...cellSerializations].filter(\n\t\t(x) => !!x,\n\t) as SearchResultSerialization[];\n}\nfunction matchesToSearchResultFormat(\n\tresource: URI,\n\tsortedMatches: Match[],\n\tmatchContext: Map<number, string>,\n\tlabelFormatter: (x: URI) => string,\n\tshouldUseHeader = true,\n): SearchResultSerialization {\n\tconst longestLineNumber = sortedMatches[sortedMatches.length - 1]\n\t\t.range()\n\t\t.endLineNumber.toString().length;\n\n\tconst text: string[] = shouldUseHeader\n\t\t? [`${labelFormatter(resource)}:`]\n\t\t: [];\n\tconst matchRanges: Range[] = [];\n\n\tconst targetLineNumberToOffset: Record<string, number> = {};\n\n\tconst context: { line: string; lineNumber: number }[] = [];\n\tmatchContext.forEach((line, lineNumber) =>\n\t\tcontext.push({ line, lineNumber }),\n\t);\n\tcontext.sort((a, b) => a.lineNumber - b.lineNumber);\n\n\tlet lastLine: number | undefined;\n\n\tconst seenLines = new Set<string>();\n\tsortedMatches.forEach((match) => {\n\t\tmatchToSearchResultFormat(match, longestLineNumber).forEach((match) => {\n\t\t\tif (!seenLines.has(match.lineNumber)) {\n\t\t\t\twhile (\n\t\t\t\t\tcontext.length &&\n\t\t\t\t\tcontext[0].lineNumber < +match.lineNumber\n\t\t\t\t) {\n\t\t\t\t\tconst { line, lineNumber } = context.shift()!;\n\t\t\t\t\tif (lastLine !== undefined && lineNumber !== lastLine + 1) {\n\t\t\t\t\t\ttext.push(\"\");\n\t\t\t\t\t}\n\t\t\t\t\ttext.push(\n\t\t\t\t\t\t`  ${\" \".repeat(longestLineNumber - `${lineNumber}`.length)}${lineNumber}  ${line}`,\n\t\t\t\t\t);\n\t\t\t\t\tlastLine = lineNumber;\n\t\t\t\t}\n\n\t\t\t\ttargetLineNumberToOffset[match.lineNumber] = text.length;\n\t\t\t\tseenLines.add(match.lineNumber);\n\t\t\t\ttext.push(match.line);\n\t\t\t\tlastLine = +match.lineNumber;\n\t\t\t}\n\n\t\t\tmatchRanges.push(\n\t\t\t\t...match.ranges.map(\n\t\t\t\t\ttranslateRangeLines(\n\t\t\t\t\t\ttargetLineNumberToOffset[match.lineNumber],\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t});\n\n\twhile (context.length) {\n\t\tconst { line, lineNumber } = context.shift()!;\n\t\ttext.push(`  ${lineNumber}  ${line}`);\n\t}\n\n\treturn { text, matchRanges };\n}\n\nfunction cellMatchToSearchResultFormat(\n\tcellMatch: CellMatch,\n\tlabelFormatter: (x: URI) => string,\n\tshouldUseHeader: boolean,\n): SearchResultSerialization {\n\treturn matchesToSearchResultFormat(\n\t\tcellMatch.cell?.uri ?? cellMatch.parent.resource,\n\t\tcellMatch.contentMatches.sort(searchMatchComparer),\n\t\tcellMatch.context,\n\t\tlabelFormatter,\n\t\tshouldUseHeader,\n\t);\n}\n\nconst contentPatternToSearchConfiguration = (\n\tpattern: ITextQuery,\n\tincludes: string,\n\texcludes: string,\n\tcontextLines: number,\n): SearchConfiguration => {\n\treturn {\n\t\tquery: pattern.contentPattern.pattern,\n\t\tisRegexp: !!pattern.contentPattern.isRegExp,\n\t\tisCaseSensitive: !!pattern.contentPattern.isCaseSensitive,\n\t\tmatchWholeWord: !!pattern.contentPattern.isWordMatch,\n\t\tfilesToExclude: excludes,\n\t\tfilesToInclude: includes,\n\t\tshowIncludesExcludes: !!(\n\t\t\tincludes ||\n\t\t\texcludes ||\n\t\t\tpattern?.userDisabledExcludesAndIgnoreFiles\n\t\t),\n\t\tuseExcludeSettingsAndIgnoreFiles:\n\t\t\tpattern?.userDisabledExcludesAndIgnoreFiles === undefined\n\t\t\t\t? true\n\t\t\t\t: !pattern.userDisabledExcludesAndIgnoreFiles,\n\t\tcontextLines,\n\t\tonlyOpenEditors: !!pattern.onlyOpenEditors,\n\t\tnotebookSearchConfig: {\n\t\t\tincludeMarkupInput:\n\t\t\t\t!!pattern.contentPattern.notebookInfo\n\t\t\t\t\t?.isInNotebookMarkdownInput,\n\t\t\tincludeMarkupPreview:\n\t\t\t\t!!pattern.contentPattern.notebookInfo\n\t\t\t\t\t?.isInNotebookMarkdownPreview,\n\t\t\tincludeCodeInput:\n\t\t\t\t!!pattern.contentPattern.notebookInfo?.isInNotebookCellInput,\n\t\t\tincludeOutput:\n\t\t\t\t!!pattern.contentPattern.notebookInfo?.isInNotebookCellOutput,\n\t\t},\n\t};\n};\n\nexport const serializeSearchConfiguration = (\n\tconfig: Partial<SearchConfiguration>,\n): string => {\n\tconst removeNullFalseAndUndefined = <T>(\n\t\ta: (T | null | false | undefined)[],\n\t) => a.filter((a) => a !== false && a !== null && a !== undefined) as T[];\n\n\tconst escapeNewlines = (str: string) =>\n\t\tstr.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\n\");\n\n\treturn removeNullFalseAndUndefined([\n\t\t`# Query: ${escapeNewlines(config.query ?? \"\")}`,\n\n\t\t(config.isCaseSensitive ||\n\t\t\tconfig.matchWholeWord ||\n\t\t\tconfig.isRegexp ||\n\t\t\tconfig.useExcludeSettingsAndIgnoreFiles === false) &&\n\t\t\t`# Flags: ${coalesce([\n\t\t\t\tconfig.isCaseSensitive && \"CaseSensitive\",\n\t\t\t\tconfig.matchWholeWord && \"WordMatch\",\n\t\t\t\tconfig.isRegexp && \"RegExp\",\n\t\t\t\tconfig.onlyOpenEditors && \"OpenEditors\",\n\t\t\t\tconfig.useExcludeSettingsAndIgnoreFiles === false &&\n\t\t\t\t\t\"IgnoreExcludeSettings\",\n\t\t\t]).join(\" \")}`,\n\t\tconfig.filesToInclude\n\t\t\t? `# Including: ${config.filesToInclude}`\n\t\t\t: undefined,\n\t\tconfig.filesToExclude\n\t\t\t? `# Excluding: ${config.filesToExclude}`\n\t\t\t: undefined,\n\t\tconfig.contextLines\n\t\t\t? `# ContextLines: ${config.contextLines}`\n\t\t\t: undefined,\n\t\t\"\",\n\t]).join(lineDelimiter);\n};\n\nexport const extractSearchQueryFromModel = (\n\tmodel: ITextModel,\n): SearchConfiguration =>\n\textractSearchQueryFromLines(\n\t\tmodel.getValueInRange(new Range(1, 1, 6, 1)).split(lineDelimiter),\n\t);\n\nexport const defaultSearchConfig = (): SearchConfiguration => ({\n\tquery: \"\",\n\tfilesToInclude: \"\",\n\tfilesToExclude: \"\",\n\tisRegexp: false,\n\tisCaseSensitive: false,\n\tuseExcludeSettingsAndIgnoreFiles: true,\n\tmatchWholeWord: false,\n\tcontextLines: 0,\n\tshowIncludesExcludes: false,\n\tonlyOpenEditors: false,\n\tnotebookSearchConfig: {\n\t\tincludeMarkupInput: true,\n\t\tincludeMarkupPreview: false,\n\t\tincludeCodeInput: true,\n\t\tincludeOutput: true,\n\t},\n});\n\nexport const extractSearchQueryFromLines = (\n\tlines: string[],\n): SearchConfiguration => {\n\tconst query = defaultSearchConfig();\n\n\tconst unescapeNewlines = (str: string) => {\n\t\tlet out = \"\";\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tif (str[i] === \"\\\\\") {\n\t\t\t\ti++;\n\t\t\t\tconst escaped = str[i];\n\n\t\t\t\tif (escaped === \"n\") {\n\t\t\t\t\tout += \"\\n\";\n\t\t\t\t} else if (escaped === \"\\\\\") {\n\t\t\t\t\tout += \"\\\\\";\n\t\t\t\t} else {\n\t\t\t\t\tthrow Error(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"invalidQueryStringError\",\n\t\t\t\t\t\t\t\"All backslashes in Query string must be escaped (\\\\\\\\)\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tout += str[i];\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t};\n\n\tconst parseYML = /^# ([^:]*): (.*)$/;\n\tfor (const line of lines) {\n\t\tconst parsed = parseYML.exec(line);\n\t\tif (!parsed) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst [, key, value] = parsed;\n\t\tswitch (key) {\n\t\t\tcase \"Query\":\n\t\t\t\tquery.query = unescapeNewlines(value);\n\t\t\t\tbreak;\n\t\t\tcase \"Including\":\n\t\t\t\tquery.filesToInclude = value;\n\t\t\t\tbreak;\n\t\t\tcase \"Excluding\":\n\t\t\t\tquery.filesToExclude = value;\n\t\t\t\tbreak;\n\t\t\tcase \"ContextLines\":\n\t\t\t\tquery.contextLines = +value;\n\t\t\t\tbreak;\n\t\t\tcase \"Flags\": {\n\t\t\t\tquery.isRegexp = value.indexOf(\"RegExp\") !== -1;\n\t\t\t\tquery.isCaseSensitive = value.indexOf(\"CaseSensitive\") !== -1;\n\t\t\t\tquery.useExcludeSettingsAndIgnoreFiles =\n\t\t\t\t\tvalue.indexOf(\"IgnoreExcludeSettings\") === -1;\n\t\t\t\tquery.matchWholeWord = value.indexOf(\"WordMatch\") !== -1;\n\t\t\t\tquery.onlyOpenEditors = value.indexOf(\"OpenEditors\") !== -1;\n\t\t\t}\n\t\t}\n\t}\n\n\tquery.showIncludesExcludes = !!(\n\t\tquery.filesToInclude ||\n\t\tquery.filesToExclude ||\n\t\t!query.useExcludeSettingsAndIgnoreFiles\n\t);\n\n\treturn query;\n};\n\nexport const serializeSearchResultForEditor = (\n\tsearchResult: SearchResult,\n\trawIncludePattern: string,\n\trawExcludePattern: string,\n\tcontextLines: number,\n\tlabelFormatter: (x: URI) => string,\n\tsortOrder: SearchSortOrder,\n\tlimitHit?: boolean,\n): {\n\tmatchRanges: Range[];\n\ttext: string;\n\tconfig: Partial<SearchConfiguration>;\n} => {\n\tif (!searchResult.query) {\n\t\tthrow Error(\"Internal Error: Expected query, got null\");\n\t}\n\tconst config = contentPatternToSearchConfiguration(\n\t\tsearchResult.query,\n\t\trawIncludePattern,\n\t\trawExcludePattern,\n\t\tcontextLines,\n\t);\n\n\tconst filecount =\n\t\tsearchResult.fileCount() > 1\n\t\t\t? localize(\"numFiles\", \"{0} files\", searchResult.fileCount())\n\t\t\t: localize(\"oneFile\", \"1 file\");\n\tconst resultcount =\n\t\tsearchResult.count() > 1\n\t\t\t? localize(\"numResults\", \"{0} results\", searchResult.count())\n\t\t\t: localize(\"oneResult\", \"1 result\");\n\n\tconst info = [\n\t\tsearchResult.count()\n\t\t\t? `${resultcount} - ${filecount}`\n\t\t\t: localize(\"noResults\", \"No Results\"),\n\t];\n\tif (limitHit) {\n\t\tinfo.push(\n\t\t\tlocalize(\n\t\t\t\t\"searchMaxResultsWarning\",\n\t\t\t\t\"The result set only contains a subset of all matches. Be more specific in your search to narrow down the results.\",\n\t\t\t),\n\t\t);\n\t}\n\tinfo.push(\"\");\n\n\tconst matchComparer = (\n\t\ta: FileMatch | FolderMatch,\n\t\tb: FileMatch | FolderMatch,\n\t) => searchMatchComparer(a, b, sortOrder);\n\n\tconst allResults = flattenSearchResultSerializations(\n\t\tsearchResult\n\t\t\t.folderMatches()\n\t\t\t.sort(matchComparer)\n\t\t\t.flatMap((folderMatch) =>\n\t\t\t\tfolderMatch\n\t\t\t\t\t.allDownstreamFileMatches()\n\t\t\t\t\t.sort(matchComparer)\n\t\t\t\t\t.flatMap((fileMatch) =>\n\t\t\t\t\t\tfileMatchToSearchResultFormat(\n\t\t\t\t\t\t\tfileMatch,\n\t\t\t\t\t\t\tlabelFormatter,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t),\n\t);\n\n\treturn {\n\t\tmatchRanges: allResults.matchRanges.map(\n\t\t\ttranslateRangeLines(info.length),\n\t\t),\n\t\ttext: info.concat(allResults.text).join(lineDelimiter),\n\t\tconfig,\n\t};\n};\n\nconst flattenSearchResultSerializations = (\n\tserializations: SearchResultSerialization[],\n): SearchResultSerialization => {\n\tconst text: string[] = [];\n\tconst matchRanges: Range[] = [];\n\n\tserializations.forEach((serialized) => {\n\t\tserialized.matchRanges\n\t\t\t.map(translateRangeLines(text.length))\n\t\t\t.forEach((range) => matchRanges.push(range));\n\t\tserialized.text.forEach((line) => text.push(line));\n\t\ttext.push(\"\"); // new line\n\t});\n\n\treturn { text, matchRanges };\n};\n\nexport const parseSavedSearchEditor = async (\n\taccessor: ServicesAccessor,\n\tresource: URI,\n) => {\n\tconst textFileService = accessor.get(ITextFileService);\n\n\tconst text = (await textFileService.read(resource)).value;\n\treturn parseSerializedSearchEditor(text);\n};\n\nexport const parseSerializedSearchEditor = (text: string) => {\n\tconst headerlines = [];\n\tconst bodylines = [];\n\n\tlet inHeader = true;\n\tfor (const line of text.split(/\\r?\\n/g)) {\n\t\tif (inHeader) {\n\t\t\theaderlines.push(line);\n\t\t\tif (line === \"\") {\n\t\t\t\tinHeader = false;\n\t\t\t}\n\t\t} else {\n\t\t\tbodylines.push(line);\n\t\t}\n\t}\n\n\treturn {\n\t\tconfig: extractSearchQueryFromLines(headerlines),\n\t\ttext: bodylines.join(\"\\n\"),\n\t};\n};\n"],
  "mappings": "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",
  "names": ["match", "a"]
}
