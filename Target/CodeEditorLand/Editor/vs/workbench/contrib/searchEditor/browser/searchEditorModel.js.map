{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/searchEditor/browser/searchEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { parseSavedSearchEditor, parseSerializedSearchEditor } from './searchEditorSerialization.js';\nimport { IWorkingCopyBackupService } from '../../../services/workingCopy/common/workingCopyBackup.js';\nimport { SearchConfiguration } from './searchEditorInput.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { createTextBufferFactoryFromStream } from '../../../../editor/common/model/textModel.js';\nimport { SearchEditorWorkingCopyTypeId } from './constants.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { SEARCH_RESULT_LANGUAGE_ID } from '../../../services/search/common/search.js';\n\nexport type SearchEditorData = { resultsModel: ITextModel; configurationModel: SearchConfigurationModel };\n\nexport class SearchConfigurationModel {\n\tprivate _onConfigDidUpdate = new Emitter<SearchConfiguration>();\n\tpublic readonly onConfigDidUpdate = this._onConfigDidUpdate.event;\n\n\tconstructor(public config: Readonly<SearchConfiguration>) { }\n\tupdateConfig(config: SearchConfiguration) { this.config = config; this._onConfigDidUpdate.fire(config); }\n}\n\nexport class SearchEditorModel {\n\tconstructor(\n\t\tprivate resource: URI,\n\t) { }\n\n\tasync resolve(): Promise<SearchEditorData> {\n\t\treturn assertIsDefined(searchEditorModelFactory.models.get(this.resource)).resolve();\n\t}\n}\n\nclass SearchEditorModelFactory {\n\tmodels = new ResourceMap<{ resolve: () => Promise<SearchEditorData> }>();\n\n\tconstructor() { }\n\n\tinitializeModelFromExistingModel(accessor: ServicesAccessor, resource: URI, config: SearchConfiguration) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error('Unable to contruct model for resource that already exists');\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\n\t\t\t\t\t\tconst backup = await this.tryFetchModelFromBackupService(resource, languageService, modelService, workingCopyBackupService, instantiationService);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\tresultsModel: modelService.getModel(resource) ?? modelService.createModel('', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t}\n\t\t});\n\t}\n\n\tinitializeModelFromRawData(accessor: ServicesAccessor, resource: URI, config: SearchConfiguration, contents: string | undefined) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error('Unable to contruct model for resource that already exists');\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\n\t\t\t\t\t\tconst backup = await this.tryFetchModelFromBackupService(resource, languageService, modelService, workingCopyBackupService, instantiationService);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\tresultsModel: modelService.createModel(contents ?? '', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t}\n\t\t});\n\t}\n\n\tinitializeModelFromExistingFile(accessor: ServicesAccessor, resource: URI, existingFile: URI) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error('Unable to contruct model for resource that already exists');\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: async () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\n\t\t\t\t\t\tconst backup = await this.tryFetchModelFromBackupService(resource, languageService, modelService, workingCopyBackupService, instantiationService);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { text, config } = await instantiationService.invokeFunction(parseSavedSearchEditor, existingFile);\n\t\t\t\t\t\treturn ({\n\t\t\t\t\t\t\tresultsModel: modelService.createModel(text ?? '', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async tryFetchModelFromBackupService(resource: URI, languageService: ILanguageService, modelService: IModelService, workingCopyBackupService: IWorkingCopyBackupService, instantiationService: IInstantiationService): Promise<SearchEditorData | undefined> {\n\t\tconst backup = await workingCopyBackupService.resolve({ resource, typeId: SearchEditorWorkingCopyTypeId });\n\n\t\tlet model = modelService.getModel(resource);\n\t\tif (!model && backup) {\n\t\t\tconst factory = await createTextBufferFactoryFromStream(backup.value);\n\n\t\t\tmodel = modelService.createModel(factory, languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource);\n\t\t}\n\n\t\tif (model) {\n\t\t\tconst existingFile = model.getValue();\n\t\t\tconst { text, config } = parseSerializedSearchEditor(existingFile);\n\t\t\tmodelService.destroyModel(resource);\n\t\t\treturn ({\n\t\t\t\tresultsModel: modelService.createModel(text ?? '', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nexport const searchEditorModelFactory = new SearchEditorModelFactory();\n"],
  "mappings": "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",
  "names": []
}
