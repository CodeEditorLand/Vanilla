{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/searchEditor/browser/searchEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { createTextBufferFactoryFromStream } from \"../../../../editor/common/model/textModel.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { SEARCH_RESULT_LANGUAGE_ID } from \"../../../services/search/common/search.js\";\nimport { IWorkingCopyBackupService } from \"../../../services/workingCopy/common/workingCopyBackup.js\";\nimport { SearchEditorWorkingCopyTypeId } from \"./constants.js\";\nimport type { SearchConfiguration } from \"./searchEditorInput.js\";\nimport {\n\tparseSavedSearchEditor,\n\tparseSerializedSearchEditor,\n} from \"./searchEditorSerialization.js\";\n\nexport type SearchEditorData = {\n\tresultsModel: ITextModel;\n\tconfigurationModel: SearchConfigurationModel;\n};\n\nexport class SearchConfigurationModel {\n\tprivate _onConfigDidUpdate = new Emitter<SearchConfiguration>();\n\tpublic readonly onConfigDidUpdate = this._onConfigDidUpdate.event;\n\n\tconstructor(public config: Readonly<SearchConfiguration>) {}\n\tupdateConfig(config: SearchConfiguration) {\n\t\tthis.config = config;\n\t\tthis._onConfigDidUpdate.fire(config);\n\t}\n}\n\nexport class SearchEditorModel {\n\tconstructor(private resource: URI) {}\n\n\tasync resolve(): Promise<SearchEditorData> {\n\t\treturn assertIsDefined(\n\t\t\tsearchEditorModelFactory.models.get(this.resource),\n\t\t).resolve();\n\t}\n}\n\nclass SearchEditorModelFactory {\n\tmodels = new ResourceMap<{ resolve: () => Promise<SearchEditorData> }>();\n\n\tconstructor() {}\n\n\tinitializeModelFromExistingModel(\n\t\taccessor: ServicesAccessor,\n\t\tresource: URI,\n\t\tconfig: SearchConfiguration,\n\t) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error(\n\t\t\t\t\"Unable to contruct model for resource that already exists\",\n\t\t\t);\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(\n\t\t\tIWorkingCopyBackupService,\n\t\t);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\t\t\t\t\t\tconst backup =\n\t\t\t\t\t\t\tawait this.tryFetchModelFromBackupService(\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\tlanguageService,\n\t\t\t\t\t\t\t\tmodelService,\n\t\t\t\t\t\t\t\tworkingCopyBackupService,\n\t\t\t\t\t\t\t\tinstantiationService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\tresultsModel:\n\t\t\t\t\t\t\t\tmodelService.getModel(resource) ??\n\t\t\t\t\t\t\t\tmodelService.createModel(\n\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\tlanguageService.createById(\n\t\t\t\t\t\t\t\t\t\tSEARCH_RESULT_LANGUAGE_ID,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(\n\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t},\n\t\t});\n\t}\n\n\tinitializeModelFromRawData(\n\t\taccessor: ServicesAccessor,\n\t\tresource: URI,\n\t\tconfig: SearchConfiguration,\n\t\tcontents: string | undefined,\n\t) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error(\n\t\t\t\t\"Unable to contruct model for resource that already exists\",\n\t\t\t);\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(\n\t\t\tIWorkingCopyBackupService,\n\t\t);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\t\t\t\t\t\tconst backup =\n\t\t\t\t\t\t\tawait this.tryFetchModelFromBackupService(\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\tlanguageService,\n\t\t\t\t\t\t\t\tmodelService,\n\t\t\t\t\t\t\t\tworkingCopyBackupService,\n\t\t\t\t\t\t\t\tinstantiationService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\tresultsModel: modelService.createModel(\n\t\t\t\t\t\t\t\tcontents ?? \"\",\n\t\t\t\t\t\t\t\tlanguageService.createById(\n\t\t\t\t\t\t\t\t\tSEARCH_RESULT_LANGUAGE_ID,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(\n\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t},\n\t\t});\n\t}\n\n\tinitializeModelFromExistingFile(\n\t\taccessor: ServicesAccessor,\n\t\tresource: URI,\n\t\texistingFile: URI,\n\t) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error(\n\t\t\t\t\"Unable to contruct model for resource that already exists\",\n\t\t\t);\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(\n\t\t\tIWorkingCopyBackupService,\n\t\t);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: async () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\t\t\t\t\t\tconst backup =\n\t\t\t\t\t\t\tawait this.tryFetchModelFromBackupService(\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\tlanguageService,\n\t\t\t\t\t\t\t\tmodelService,\n\t\t\t\t\t\t\t\tworkingCopyBackupService,\n\t\t\t\t\t\t\t\tinstantiationService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { text, config } =\n\t\t\t\t\t\t\tawait instantiationService.invokeFunction(\n\t\t\t\t\t\t\t\tparseSavedSearchEditor,\n\t\t\t\t\t\t\t\texistingFile,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tresultsModel: modelService.createModel(\n\t\t\t\t\t\t\t\ttext ?? \"\",\n\t\t\t\t\t\t\t\tlanguageService.createById(\n\t\t\t\t\t\t\t\t\tSEARCH_RESULT_LANGUAGE_ID,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(\n\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async tryFetchModelFromBackupService(\n\t\tresource: URI,\n\t\tlanguageService: ILanguageService,\n\t\tmodelService: IModelService,\n\t\tworkingCopyBackupService: IWorkingCopyBackupService,\n\t\tinstantiationService: IInstantiationService,\n\t): Promise<SearchEditorData | undefined> {\n\t\tconst backup = await workingCopyBackupService.resolve({\n\t\t\tresource,\n\t\t\ttypeId: SearchEditorWorkingCopyTypeId,\n\t\t});\n\n\t\tlet model = modelService.getModel(resource);\n\t\tif (!model && backup) {\n\t\t\tconst factory = await createTextBufferFactoryFromStream(\n\t\t\t\tbackup.value,\n\t\t\t);\n\n\t\t\tmodel = modelService.createModel(\n\t\t\t\tfactory,\n\t\t\t\tlanguageService.createById(SEARCH_RESULT_LANGUAGE_ID),\n\t\t\t\tresource,\n\t\t\t);\n\t\t}\n\n\t\tif (model) {\n\t\t\tconst existingFile = model.getValue();\n\t\t\tconst { text, config } = parseSerializedSearchEditor(existingFile);\n\t\t\tmodelService.destroyModel(resource);\n\t\t\treturn {\n\t\t\t\tresultsModel: modelService.createModel(\n\t\t\t\t\ttext ?? \"\",\n\t\t\t\t\tlanguageService.createById(SEARCH_RESULT_LANGUAGE_ID),\n\t\t\t\t\tresource,\n\t\t\t\t),\n\t\t\t\tconfigurationModel: new SearchConfigurationModel(config),\n\t\t\t};\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nexport const searchEditorModelFactory = new SearchEditorModelFactory();\n"],
  "mappings": "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",
  "names": []
}
