{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/searchEditor/browser/searchEditorActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport './media/searchEditor.css';\nimport { ICodeEditor, isDiffEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IEditorOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { EditorsOrder } from '../../../common/editor.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { getSearchView } from '../../search/browser/searchActionsBase.js';\nimport { SearchResult } from '../../search/browser/searchModel.js';\nimport { SearchEditor } from './searchEditor.js';\nimport { OpenSearchEditorArgs } from './searchEditor.contribution.js';\nimport { getOrMakeSearchEditorInput, SearchEditorInput } from './searchEditorInput.js';\nimport { serializeSearchResultForEditor } from './searchEditorSerialization.js';\nimport { IConfigurationResolverService } from '../../../services/configurationResolver/common/configurationResolver.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { ACTIVE_GROUP, IEditorService, SIDE_GROUP } from '../../../services/editor/common/editorService.js';\nimport { IHistoryService } from '../../../services/history/common/history.js';\nimport { ISearchConfigurationProperties } from '../../../services/search/common/search.js';\n\nexport const toggleSearchEditorCaseSensitiveCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleCaseSensitive();\n\t}\n};\n\nexport const toggleSearchEditorWholeWordCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleWholeWords();\n\t}\n};\n\nexport const toggleSearchEditorRegexCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleRegex();\n\t}\n};\n\nexport const toggleSearchEditorContextLinesCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleContextLines();\n\t}\n};\n\nexport const modifySearchEditorContextLinesCommand = (accessor: ServicesAccessor, increase: boolean) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).modifyContextLines(increase);\n\t}\n};\n\nexport const selectAllSearchEditorMatchesCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).focusAllResults();\n\t}\n};\n\nexport async function openSearchEditor(accessor: ServicesAccessor): Promise<void> {\n\tconst viewsService = accessor.get(IViewsService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst searchView = getSearchView(viewsService);\n\tif (searchView) {\n\t\tawait instantiationService.invokeFunction(openNewSearchEditor, {\n\t\t\tfilesToInclude: searchView.searchIncludePattern.getValue(),\n\t\t\tonlyOpenEditors: searchView.searchIncludePattern.onlySearchInOpenEditors(),\n\t\t\tfilesToExclude: searchView.searchExcludePattern.getValue(),\n\t\t\tisRegexp: searchView.searchAndReplaceWidget.searchInput?.getRegex(),\n\t\t\tisCaseSensitive: searchView.searchAndReplaceWidget.searchInput?.getCaseSensitive(),\n\t\t\tmatchWholeWord: searchView.searchAndReplaceWidget.searchInput?.getWholeWords(),\n\t\t\tuseExcludeSettingsAndIgnoreFiles: searchView.searchExcludePattern.useExcludesAndIgnoreFiles(),\n\t\t\tshowIncludesExcludes: !!(searchView.searchIncludePattern.getValue() || searchView.searchExcludePattern.getValue() || !searchView.searchExcludePattern.useExcludesAndIgnoreFiles())\n\t\t});\n\t} else {\n\t\tawait instantiationService.invokeFunction(openNewSearchEditor);\n\t}\n}\n\nexport const openNewSearchEditor =\n\tasync (accessor: ServicesAccessor, _args: OpenSearchEditorArgs = {}, toSide = false) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editorGroupsService = accessor.get(IEditorGroupsService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tconst configurationResolverService = accessor.get(IConfigurationResolverService);\n\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri ? workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\n\n\t\tconst activeEditorControl = editorService.activeTextEditorControl;\n\t\tlet activeModel: ICodeEditor | undefined;\n\t\tlet selected = '';\n\t\tif (activeEditorControl) {\n\t\t\tif (isDiffEditor(activeEditorControl)) {\n\t\t\t\tif (activeEditorControl.getOriginalEditor().hasTextFocus()) {\n\t\t\t\t\tactiveModel = activeEditorControl.getOriginalEditor();\n\t\t\t\t} else {\n\t\t\t\t\tactiveModel = activeEditorControl.getModifiedEditor();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tactiveModel = activeEditorControl as ICodeEditor;\n\t\t\t}\n\t\t\tconst selection = activeModel?.getSelection();\n\t\t\tselected = (selection && activeModel?.getModel()?.getValueInRange(selection)) ?? '';\n\n\t\t\tif (selection?.isEmpty() && configurationService.getValue<ISearchConfigurationProperties>('search').seedWithNearestWord) {\n\t\t\t\tconst wordAtPosition = activeModel.getModel()?.getWordAtPosition(selection.getStartPosition());\n\t\t\t\tif (wordAtPosition) {\n\t\t\t\t\tselected = wordAtPosition.word;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (editorService.activeEditor instanceof SearchEditorInput) {\n\t\t\t\tconst active = editorService.activeEditorPane as SearchEditor;\n\t\t\t\tselected = active.getSelected();\n\t\t\t}\n\t\t}\n\n\t\ttelemetryService.publicLog2<{},\n\t\t\t{\n\t\t\t\towner: 'roblourens';\n\t\t\t\tcomment: 'Fired when a search editor is opened';\n\t\t\t}>\n\t\t\t('searchEditor/openNewSearchEditor');\n\n\t\tconst seedSearchStringFromSelection = _args.location === 'new' || configurationService.getValue<IEditorOptions>('editor').find!.seedSearchStringFromSelection;\n\t\tconst args: OpenSearchEditorArgs = { query: seedSearchStringFromSelection ? selected : undefined };\n\t\tfor (const entry of Object.entries(_args)) {\n\t\t\tconst name = entry[0];\n\t\t\tconst value = entry[1];\n\t\t\tif (value !== undefined) {\n\t\t\t\t(args as any)[name as any] = (typeof value === 'string') ? await configurationResolverService.resolveAsync(lastActiveWorkspaceRoot, value) : value;\n\t\t\t}\n\t\t}\n\t\tconst existing = editorService.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE).find(id => id.editor.typeId === SearchEditorInput.ID);\n\t\tlet editor: SearchEditor;\n\t\tif (existing && args.location === 'reuse') {\n\t\t\tconst group = editorGroupsService.getGroup(existing.groupId);\n\t\t\tif (!group) {\n\t\t\t\tthrow new Error('Invalid group id for search editor');\n\t\t\t}\n\t\t\tconst input = existing.editor as SearchEditorInput;\n\t\t\teditor = (await group.openEditor(input)) as SearchEditor;\n\t\t\tif (selected) { editor.setQuery(selected); }\n\t\t\telse { editor.selectQuery(); }\n\t\t\teditor.setSearchConfig(args);\n\t\t} else {\n\t\t\tconst input = instantiationService.invokeFunction(getOrMakeSearchEditorInput, { config: args, resultsContents: '', from: 'rawData' });\n\t\t\t// TODO @roblourens make this use the editor resolver service if possible\n\t\t\teditor = await editorService.openEditor(input, { pinned: true }, toSide ? SIDE_GROUP : ACTIVE_GROUP) as SearchEditor;\n\t\t}\n\n\t\tconst searchOnType = configurationService.getValue<ISearchConfigurationProperties>('search').searchOnType;\n\t\tif (\n\t\t\targs.triggerSearch === true ||\n\t\t\targs.triggerSearch !== false && searchOnType && args.query\n\t\t) {\n\t\t\teditor.triggerSearch({ focusResults: args.focusResults });\n\t\t}\n\n\t\tif (!args.focusResults) { editor.focusSearchInput(); }\n\t};\n\nexport const createEditorFromSearchResult =\n\tasync (accessor: ServicesAccessor, searchResult: SearchResult, rawIncludePattern: string, rawExcludePattern: string, onlySearchInOpenEditors: boolean) => {\n\t\tif (!searchResult.query) {\n\t\t\tconsole.error('Expected searchResult.query to be defined. Got', searchResult);\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst labelService = accessor.get(ILabelService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst sortOrder = configurationService.getValue<ISearchConfigurationProperties>('search').sortOrder;\n\n\t\ttelemetryService.publicLog2<\n\t\t\t{},\n\t\t\t{\n\t\t\t\towner: 'roblourens';\n\t\t\t\tcomment: 'Fired when a search editor is opened from the search view';\n\t\t\t}>\n\t\t\t('searchEditor/createEditorFromSearchResult');\n\n\t\tconst labelFormatter = (uri: URI): string => labelService.getUriLabel(uri, { relative: true });\n\n\t\tconst { text, matchRanges, config } = serializeSearchResultForEditor(searchResult, rawIncludePattern, rawExcludePattern, 0, labelFormatter, sortOrder);\n\t\tconfig.onlyOpenEditors = onlySearchInOpenEditors;\n\t\tconst contextLines = configurationService.getValue<ISearchConfigurationProperties>('search').searchEditor.defaultNumberOfContextLines;\n\n\t\tif (searchResult.isDirty || contextLines === 0 || contextLines === null) {\n\t\t\tconst input = instantiationService.invokeFunction(getOrMakeSearchEditorInput, { resultsContents: text, config, from: 'rawData' });\n\t\t\tawait editorService.openEditor(input, { pinned: true });\n\t\t\tinput.setMatchRanges(matchRanges);\n\t\t} else {\n\t\t\tconst input = instantiationService.invokeFunction(getOrMakeSearchEditorInput, { from: 'rawData', resultsContents: '', config: { ...config, contextLines } });\n\t\t\tconst editor = await editorService.openEditor(input, { pinned: true }) as SearchEditor;\n\t\t\teditor.triggerSearch();\n\t\t}\n\t};\n"],
  "mappings": "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",
  "names": []
}
