{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/searchEditor/browser/searchEditorActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport \"./media/searchEditor.css\";\nimport {\n\ttype ICodeEditor,\n\tisDiffEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport type { IEditorOptions } from \"../../../../editor/common/config/editorOptions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { EditorsOrder } from \"../../../common/editor.js\";\nimport { IConfigurationResolverService } from \"../../../services/configurationResolver/common/configurationResolver.js\";\nimport { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport {\n\tACTIVE_GROUP,\n\tIEditorService,\n\tSIDE_GROUP,\n} from \"../../../services/editor/common/editorService.js\";\nimport { IHistoryService } from \"../../../services/history/common/history.js\";\nimport type { ISearchConfigurationProperties } from \"../../../services/search/common/search.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport { getSearchView } from \"../../search/browser/searchActionsBase.js\";\nimport type { SearchResult } from \"../../search/browser/searchModel.js\";\nimport type { OpenSearchEditorArgs } from \"./searchEditor.contribution.js\";\nimport type { SearchEditor } from \"./searchEditor.js\";\nimport {\n\tSearchEditorInput,\n\tgetOrMakeSearchEditorInput,\n} from \"./searchEditorInput.js\";\nimport { serializeSearchResultForEditor } from \"./searchEditorSerialization.js\";\n\nexport const toggleSearchEditorCaseSensitiveCommand = (\n\taccessor: ServicesAccessor,\n) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleCaseSensitive();\n\t}\n};\n\nexport const toggleSearchEditorWholeWordCommand = (\n\taccessor: ServicesAccessor,\n) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleWholeWords();\n\t}\n};\n\nexport const toggleSearchEditorRegexCommand = (accessor: ServicesAccessor) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleRegex();\n\t}\n};\n\nexport const toggleSearchEditorContextLinesCommand = (\n\taccessor: ServicesAccessor,\n) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).toggleContextLines();\n\t}\n};\n\nexport const modifySearchEditorContextLinesCommand = (\n\taccessor: ServicesAccessor,\n\tincrease: boolean,\n) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).modifyContextLines(\n\t\t\tincrease,\n\t\t);\n\t}\n};\n\nexport const selectAllSearchEditorMatchesCommand = (\n\taccessor: ServicesAccessor,\n) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst input = editorService.activeEditor;\n\tif (input instanceof SearchEditorInput) {\n\t\t(editorService.activeEditorPane as SearchEditor).focusAllResults();\n\t}\n};\n\nexport async function openSearchEditor(\n\taccessor: ServicesAccessor,\n): Promise<void> {\n\tconst viewsService = accessor.get(IViewsService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst searchView = getSearchView(viewsService);\n\tif (searchView) {\n\t\tawait instantiationService.invokeFunction(openNewSearchEditor, {\n\t\t\tfilesToInclude: searchView.searchIncludePattern.getValue(),\n\t\t\tonlyOpenEditors:\n\t\t\t\tsearchView.searchIncludePattern.onlySearchInOpenEditors(),\n\t\t\tfilesToExclude: searchView.searchExcludePattern.getValue(),\n\t\t\tisRegexp: searchView.searchAndReplaceWidget.searchInput?.getRegex(),\n\t\t\tisCaseSensitive:\n\t\t\t\tsearchView.searchAndReplaceWidget.searchInput?.getCaseSensitive(),\n\t\t\tmatchWholeWord:\n\t\t\t\tsearchView.searchAndReplaceWidget.searchInput?.getWholeWords(),\n\t\t\tuseExcludeSettingsAndIgnoreFiles:\n\t\t\t\tsearchView.searchExcludePattern.useExcludesAndIgnoreFiles(),\n\t\t\tshowIncludesExcludes: !!(\n\t\t\t\tsearchView.searchIncludePattern.getValue() ||\n\t\t\t\tsearchView.searchExcludePattern.getValue() ||\n\t\t\t\t!searchView.searchExcludePattern.useExcludesAndIgnoreFiles()\n\t\t\t),\n\t\t});\n\t} else {\n\t\tawait instantiationService.invokeFunction(openNewSearchEditor);\n\t}\n}\n\nexport const openNewSearchEditor = async (\n\taccessor: ServicesAccessor,\n\t_args: OpenSearchEditorArgs = {},\n\ttoSide = false,\n) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst editorGroupsService = accessor.get(IEditorGroupsService);\n\tconst telemetryService = accessor.get(ITelemetryService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\n\tconst configurationResolverService = accessor.get(\n\t\tIConfigurationResolverService,\n\t);\n\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\tconst historyService = accessor.get(IHistoryService);\n\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(\n\t\tSchemas.file,\n\t);\n\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri\n\t\t? (workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ??\n\t\t\tundefined)\n\t\t: undefined;\n\n\tconst activeEditorControl = editorService.activeTextEditorControl;\n\tlet activeModel: ICodeEditor | undefined;\n\tlet selected = \"\";\n\tif (activeEditorControl) {\n\t\tif (isDiffEditor(activeEditorControl)) {\n\t\t\tif (activeEditorControl.getOriginalEditor().hasTextFocus()) {\n\t\t\t\tactiveModel = activeEditorControl.getOriginalEditor();\n\t\t\t} else {\n\t\t\t\tactiveModel = activeEditorControl.getModifiedEditor();\n\t\t\t}\n\t\t} else {\n\t\t\tactiveModel = activeEditorControl as ICodeEditor;\n\t\t}\n\t\tconst selection = activeModel?.getSelection();\n\t\tselected =\n\t\t\t(selection &&\n\t\t\t\tactiveModel?.getModel()?.getValueInRange(selection)) ??\n\t\t\t\"\";\n\n\t\tif (\n\t\t\tselection?.isEmpty() &&\n\t\t\tconfigurationService.getValue<ISearchConfigurationProperties>(\n\t\t\t\t\"search\",\n\t\t\t).seedWithNearestWord\n\t\t) {\n\t\t\tconst wordAtPosition = activeModel\n\t\t\t\t.getModel()\n\t\t\t\t?.getWordAtPosition(selection.getStartPosition());\n\t\t\tif (wordAtPosition) {\n\t\t\t\tselected = wordAtPosition.word;\n\t\t\t}\n\t\t}\n\t} else if (editorService.activeEditor instanceof SearchEditorInput) {\n\t\tconst active = editorService.activeEditorPane as SearchEditor;\n\t\tselected = active.getSelected();\n\t}\n\n\ttelemetryService.publicLog2<\n\t\t{},\n\t\t{\n\t\t\towner: \"roblourens\";\n\t\t\tcomment: \"Fired when a search editor is opened\";\n\t\t}\n\t>(\"searchEditor/openNewSearchEditor\");\n\n\tconst seedSearchStringFromSelection =\n\t\t_args.location === \"new\" ||\n\t\tconfigurationService.getValue<IEditorOptions>(\"editor\").find!\n\t\t\t.seedSearchStringFromSelection;\n\tconst args: OpenSearchEditorArgs = {\n\t\tquery: seedSearchStringFromSelection ? selected : undefined,\n\t};\n\tfor (const entry of Object.entries(_args)) {\n\t\tconst name = entry[0];\n\t\tconst value = entry[1];\n\t\tif (value !== undefined) {\n\t\t\t(args as any)[name as any] =\n\t\t\t\ttypeof value === \"string\"\n\t\t\t\t\t? await configurationResolverService.resolveAsync(\n\t\t\t\t\t\t\tlastActiveWorkspaceRoot,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t)\n\t\t\t\t\t: value;\n\t\t}\n\t}\n\tconst existing = editorService\n\t\t.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE)\n\t\t.find((id) => id.editor.typeId === SearchEditorInput.ID);\n\tlet editor: SearchEditor;\n\tif (existing && args.location === \"reuse\") {\n\t\tconst group = editorGroupsService.getGroup(existing.groupId);\n\t\tif (!group) {\n\t\t\tthrow new Error(\"Invalid group id for search editor\");\n\t\t}\n\t\tconst input = existing.editor as SearchEditorInput;\n\t\teditor = (await group.openEditor(input)) as SearchEditor;\n\t\tif (selected) {\n\t\t\teditor.setQuery(selected);\n\t\t} else {\n\t\t\teditor.selectQuery();\n\t\t}\n\t\teditor.setSearchConfig(args);\n\t} else {\n\t\tconst input = instantiationService.invokeFunction(\n\t\t\tgetOrMakeSearchEditorInput,\n\t\t\t{ config: args, resultsContents: \"\", from: \"rawData\" },\n\t\t);\n\t\t// TODO @roblourens make this use the editor resolver service if possible\n\t\teditor = (await editorService.openEditor(\n\t\t\tinput,\n\t\t\t{ pinned: true },\n\t\t\ttoSide ? SIDE_GROUP : ACTIVE_GROUP,\n\t\t)) as SearchEditor;\n\t}\n\n\tconst searchOnType =\n\t\tconfigurationService.getValue<ISearchConfigurationProperties>(\n\t\t\t\"search\",\n\t\t).searchOnType;\n\tif (\n\t\targs.triggerSearch === true ||\n\t\t(args.triggerSearch !== false && searchOnType && args.query)\n\t) {\n\t\teditor.triggerSearch({ focusResults: args.focusResults });\n\t}\n\n\tif (!args.focusResults) {\n\t\teditor.focusSearchInput();\n\t}\n};\n\nexport const createEditorFromSearchResult = async (\n\taccessor: ServicesAccessor,\n\tsearchResult: SearchResult,\n\trawIncludePattern: string,\n\trawExcludePattern: string,\n\tonlySearchInOpenEditors: boolean,\n) => {\n\tif (!searchResult.query) {\n\t\tconsole.error(\n\t\t\t\"Expected searchResult.query to be defined. Got\",\n\t\t\tsearchResult,\n\t\t);\n\t\treturn;\n\t}\n\n\tconst editorService = accessor.get(IEditorService);\n\tconst telemetryService = accessor.get(ITelemetryService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst labelService = accessor.get(ILabelService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst sortOrder =\n\t\tconfigurationService.getValue<ISearchConfigurationProperties>(\n\t\t\t\"search\",\n\t\t).sortOrder;\n\n\ttelemetryService.publicLog2<\n\t\t{},\n\t\t{\n\t\t\towner: \"roblourens\";\n\t\t\tcomment: \"Fired when a search editor is opened from the search view\";\n\t\t}\n\t>(\"searchEditor/createEditorFromSearchResult\");\n\n\tconst labelFormatter = (uri: URI): string =>\n\t\tlabelService.getUriLabel(uri, { relative: true });\n\n\tconst { text, matchRanges, config } = serializeSearchResultForEditor(\n\t\tsearchResult,\n\t\trawIncludePattern,\n\t\trawExcludePattern,\n\t\t0,\n\t\tlabelFormatter,\n\t\tsortOrder,\n\t);\n\tconfig.onlyOpenEditors = onlySearchInOpenEditors;\n\tconst contextLines =\n\t\tconfigurationService.getValue<ISearchConfigurationProperties>(\"search\")\n\t\t\t.searchEditor.defaultNumberOfContextLines;\n\n\tif (searchResult.isDirty || contextLines === 0 || contextLines === null) {\n\t\tconst input = instantiationService.invokeFunction(\n\t\t\tgetOrMakeSearchEditorInput,\n\t\t\t{ resultsContents: text, config, from: \"rawData\" },\n\t\t);\n\t\tawait editorService.openEditor(input, { pinned: true });\n\t\tinput.setMatchRanges(matchRanges);\n\t} else {\n\t\tconst input = instantiationService.invokeFunction(\n\t\t\tgetOrMakeSearchEditorInput,\n\t\t\t{\n\t\t\t\tfrom: \"rawData\",\n\t\t\t\tresultsContents: \"\",\n\t\t\t\tconfig: { ...config, contextLines },\n\t\t\t},\n\t\t);\n\t\tconst editor = (await editorService.openEditor(input, {\n\t\t\tpinned: true,\n\t\t})) as SearchEditor;\n\t\teditor.triggerSearch();\n\t}\n};\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AAExB,OAAO;AACP;AAAA,EAEC;AAAA,OACM;AAEP,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,OAEM;AACP,SAAS,qBAAqB;AAC9B,SAAS,yBAAyB;AAClC,SAAS,gCAAgC;AACzC,SAAS,oBAAoB;AAC7B,SAAS,qCAAqC;AAC9C,SAAS,4BAA4B;AACrC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAEhC,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB;AAI9B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,sCAAsC;AAExC,MAAM,yCAAyC,wBACrD,aACI;AACJ,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,QAAQ,cAAc;AAC5B,MAAI,iBAAiB,mBAAmB;AACvC,IAAC,cAAc,iBAAkC,oBAAoB;AAAA,EACtE;AACD,GARsD;AAU/C,MAAM,qCAAqC,wBACjD,aACI;AACJ,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,QAAQ,cAAc;AAC5B,MAAI,iBAAiB,mBAAmB;AACvC,IAAC,cAAc,iBAAkC,iBAAiB;AAAA,EACnE;AACD,GARkD;AAU3C,MAAM,iCAAiC,wBAAC,aAA+B;AAC7E,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,QAAQ,cAAc;AAC5B,MAAI,iBAAiB,mBAAmB;AACvC,IAAC,cAAc,iBAAkC,YAAY;AAAA,EAC9D;AACD,GAN8C;AAQvC,MAAM,wCAAwC,wBACpD,aACI;AACJ,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,QAAQ,cAAc;AAC5B,MAAI,iBAAiB,mBAAmB;AACvC,IAAC,cAAc,iBAAkC,mBAAmB;AAAA,EACrE;AACD,GARqD;AAU9C,MAAM,wCAAwC,wBACpD,UACA,aACI;AACJ,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,QAAQ,cAAc;AAC5B,MAAI,iBAAiB,mBAAmB;AACvC,IAAC,cAAc,iBAAkC;AAAA,MAChD;AAAA,IACD;AAAA,EACD;AACD,GAXqD;AAa9C,MAAM,sCAAsC,wBAClD,aACI;AACJ,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,QAAQ,cAAc;AAC5B,MAAI,iBAAiB,mBAAmB;AACvC,IAAC,cAAc,iBAAkC,gBAAgB;AAAA,EAClE;AACD,GARmD;AAUnD,eAAsB,iBACrB,UACgB;AAChB,QAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,aAAa,cAAc,YAAY;AAC7C,MAAI,YAAY;AACf,UAAM,qBAAqB,eAAe,qBAAqB;AAAA,MAC9D,gBAAgB,WAAW,qBAAqB,SAAS;AAAA,MACzD,iBACC,WAAW,qBAAqB,wBAAwB;AAAA,MACzD,gBAAgB,WAAW,qBAAqB,SAAS;AAAA,MACzD,UAAU,WAAW,uBAAuB,aAAa,SAAS;AAAA,MAClE,iBACC,WAAW,uBAAuB,aAAa,iBAAiB;AAAA,MACjE,gBACC,WAAW,uBAAuB,aAAa,cAAc;AAAA,MAC9D,kCACC,WAAW,qBAAqB,0BAA0B;AAAA,MAC3D,sBAAsB,CAAC,EACtB,WAAW,qBAAqB,SAAS,KACzC,WAAW,qBAAqB,SAAS,KACzC,CAAC,WAAW,qBAAqB,0BAA0B;AAAA,IAE7D,CAAC;AAAA,EACF,OAAO;AACN,UAAM,qBAAqB,eAAe,mBAAmB;AAAA,EAC9D;AACD;AA5BsB;AA8Bf,MAAM,sBAAsB,8BAClC,UACA,QAA8B,CAAC,GAC/B,SAAS,UACL;AACJ,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAC7D,QAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAE/D,QAAM,+BAA+B,SAAS;AAAA,IAC7C;AAAA,EACD;AACA,QAAM,0BAA0B,SAAS,IAAI,wBAAwB;AACrE,QAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,QAAM,yBAAyB,eAAe;AAAA,IAC7C,QAAQ;AAAA,EACT;AACA,QAAM,0BAA0B,yBAC5B,wBAAwB,mBAAmB,sBAAsB,KACnE,SACC;AAEH,QAAM,sBAAsB,cAAc;AAC1C,MAAI;AACJ,MAAI,WAAW;AACf,MAAI,qBAAqB;AACxB,QAAI,aAAa,mBAAmB,GAAG;AACtC,UAAI,oBAAoB,kBAAkB,EAAE,aAAa,GAAG;AAC3D,sBAAc,oBAAoB,kBAAkB;AAAA,MACrD,OAAO;AACN,sBAAc,oBAAoB,kBAAkB;AAAA,MACrD;AAAA,IACD,OAAO;AACN,oBAAc;AAAA,IACf;AACA,UAAM,YAAY,aAAa,aAAa;AAC5C,gBACE,aACA,aAAa,SAAS,GAAG,gBAAgB,SAAS,MACnD;AAED,QACC,WAAW,QAAQ,KACnB,qBAAqB;AAAA,MACpB;AAAA,IACD,EAAE,qBACD;AACD,YAAM,iBAAiB,YACrB,SAAS,GACR,kBAAkB,UAAU,iBAAiB,CAAC;AACjD,UAAI,gBAAgB;AACnB,mBAAW,eAAe;AAAA,MAC3B;AAAA,IACD;AAAA,EACD,WAAW,cAAc,wBAAwB,mBAAmB;AACnE,UAAM,SAAS,cAAc;AAC7B,eAAW,OAAO,YAAY;AAAA,EAC/B;AAEA,mBAAiB,WAMf,kCAAkC;AAEpC,QAAM,gCACL,MAAM,aAAa,SACnB,qBAAqB,SAAyB,QAAQ,EAAE,KACtD;AACH,QAAM,OAA6B;AAAA,IAClC,OAAO,gCAAgC,WAAW;AAAA,EACnD;AACA,aAAW,SAAS,OAAO,QAAQ,KAAK,GAAG;AAC1C,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,QAAQ,MAAM,CAAC;AACrB,QAAI,UAAU,QAAW;AACxB,MAAC,KAAa,IAAW,IACxB,OAAO,UAAU,WACd,MAAM,6BAA6B;AAAA,QACnC;AAAA,QACA;AAAA,MACD,IACC;AAAA,IACL;AAAA,EACD;AACA,QAAM,WAAW,cACf,WAAW,aAAa,oBAAoB,EAC5C,KAAK,CAAC,OAAO,GAAG,OAAO,WAAW,kBAAkB,EAAE;AACxD,MAAI;AACJ,MAAI,YAAY,KAAK,aAAa,SAAS;AAC1C,UAAM,QAAQ,oBAAoB,SAAS,SAAS,OAAO;AAC3D,QAAI,CAAC,OAAO;AACX,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACrD;AACA,UAAM,QAAQ,SAAS;AACvB,aAAU,MAAM,MAAM,WAAW,KAAK;AACtC,QAAI,UAAU;AACb,aAAO,SAAS,QAAQ;AAAA,IACzB,OAAO;AACN,aAAO,YAAY;AAAA,IACpB;AACA,WAAO,gBAAgB,IAAI;AAAA,EAC5B,OAAO;AACN,UAAM,QAAQ,qBAAqB;AAAA,MAClC;AAAA,MACA,EAAE,QAAQ,MAAM,iBAAiB,IAAI,MAAM,UAAU;AAAA,IACtD;AAEA,aAAU,MAAM,cAAc;AAAA,MAC7B;AAAA,MACA,EAAE,QAAQ,KAAK;AAAA,MACf,SAAS,aAAa;AAAA,IACvB;AAAA,EACD;AAEA,QAAM,eACL,qBAAqB;AAAA,IACpB;AAAA,EACD,EAAE;AACH,MACC,KAAK,kBAAkB,QACtB,KAAK,kBAAkB,SAAS,gBAAgB,KAAK,OACrD;AACD,WAAO,cAAc,EAAE,cAAc,KAAK,aAAa,CAAC;AAAA,EACzD;AAEA,MAAI,CAAC,KAAK,cAAc;AACvB,WAAO,iBAAiB;AAAA,EACzB;AACD,GArImC;AAuI5B,MAAM,+BAA+B,8BAC3C,UACA,cACA,mBACA,mBACA,4BACI;AACJ,MAAI,CAAC,aAAa,OAAO;AACxB,YAAQ;AAAA,MACP;AAAA,MACA;AAAA,IACD;AACA;AAAA,EACD;AAEA,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,eAAe,SAAS,IAAI,aAAa;AAC/C,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,YACL,qBAAqB;AAAA,IACpB;AAAA,EACD,EAAE;AAEH,mBAAiB,WAMf,2CAA2C;AAE7C,QAAM,iBAAiB,wBAAC,QACvB,aAAa,YAAY,KAAK,EAAE,UAAU,KAAK,CAAC,GAD1B;AAGvB,QAAM,EAAE,MAAM,aAAa,OAAO,IAAI;AAAA,IACrC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,SAAO,kBAAkB;AACzB,QAAM,eACL,qBAAqB,SAAyC,QAAQ,EACpE,aAAa;AAEhB,MAAI,aAAa,WAAW,iBAAiB,KAAK,iBAAiB,MAAM;AACxE,UAAM,QAAQ,qBAAqB;AAAA,MAClC;AAAA,MACA,EAAE,iBAAiB,MAAM,QAAQ,MAAM,UAAU;AAAA,IAClD;AACA,UAAM,cAAc,WAAW,OAAO,EAAE,QAAQ,KAAK,CAAC;AACtD,UAAM,eAAe,WAAW;AAAA,EACjC,OAAO;AACN,UAAM,QAAQ,qBAAqB;AAAA,MAClC;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,iBAAiB;AAAA,QACjB,QAAQ,EAAE,GAAG,QAAQ,aAAa;AAAA,MACnC;AAAA,IACD;AACA,UAAM,SAAU,MAAM,cAAc,WAAW,OAAO;AAAA,MACrD,QAAQ;AAAA,IACT,CAAC;AACD,WAAO,cAAc;AAAA,EACtB;AACD,GAtE4C;",
  "names": []
}
