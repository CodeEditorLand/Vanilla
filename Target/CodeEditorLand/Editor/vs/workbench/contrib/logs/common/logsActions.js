var D=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var h=(m,d,e,i)=>{for(var o=i>1?void 0:i?Q(d,e):d,t=m.length-1,n;t>=0;t--)(n=m[t])&&(o=(i?n(d,e,o):n(o))||o);return i&&o&&D(d,e,o),o},g=(m,d)=>(e,i)=>d(e,i,m);import{Action as f}from"../../../../base/common/actions.js";import{Codicon as y}from"../../../../base/common/codicons.js";import{DisposableStore as k}from"../../../../base/common/lifecycle.js";import{basename as S,dirname as C,isEqual as w}from"../../../../base/common/resources.js";import{ThemeIcon as x}from"../../../../base/common/themables.js";import{URI as b}from"../../../../base/common/uri.js";import*as a from"../../../../nls.js";import{IFileService as E}from"../../../../platform/files/common/files.js";import{ILoggerService as z,isLogLevel as T,LogLevel as r,LogLevelToLocalizedString as q}from"../../../../platform/log/common/log.js";import{IQuickInputService as P}from"../../../../platform/quickinput/common/quickInput.js";import{extensionTelemetryLogChannelId as F,telemetryLogId as O}from"../../../../platform/telemetry/common/telemetryUtils.js";import{IEditorService as R}from"../../../services/editor/common/editorService.js";import{IWorkbenchEnvironmentService as U}from"../../../services/environment/common/environmentService.js";import{IOutputService as H}from"../../../services/output/common/output.js";import{IDefaultLogLevelsService as B}from"./defaultLogLevels.js";let L=class extends f{constructor(e,i,o,t,n,l){super(e,i);this.quickInputService=o;this.loggerService=t;this.outputService=n;this.defaultLogLevelsService=l}static ID="workbench.action.setLogLevel";static TITLE=a.localize2("setLogLevel","Set Log Level...");async run(){const e=await this.selectLogLevelOrChannel();e!==null&&(T(e)?this.loggerService.setLogLevel(e):await this.setLogLevelForChannel(e))}async selectLogLevelOrChannel(){const e=await this.defaultLogLevelsService.getDefaultLogLevels(),i=[],o=[],t=this.loggerService.getLogLevel();for(const l of this.outputService.getChannelDescriptors()){if(!L.isLevelSettable(l)||!l.file)continue;const v=this.loggerService.getLogLevel(l.file)??t,c={id:l.id,resource:l.file,label:l.label,description:v!==t?this.getLabel(v):void 0,extensionId:l.extensionId};l.extensionId?i.push(c):o.push(c)}const n=[];return n.push({type:"separator",label:a.localize("all","All")}),n.push(...this.getLogLevelEntries(e.default,this.loggerService.getLogLevel(),!0)),i.length&&(n.push({type:"separator",label:a.localize("extensionLogs","Extension Logs")}),n.push(...i.sort((l,v)=>l.label.localeCompare(v.label)))),n.push({type:"separator",label:a.localize("loggers","Logs")}),n.push(...o.sort((l,v)=>l.label.localeCompare(v.label))),new Promise((l,v)=>{const c=new k,s=c.add(this.quickInputService.createQuickPick({useSeparators:!0}));s.placeholder=a.localize("selectlog","Set Log Level"),s.items=n;let p;c.add(s.onDidTriggerItemButton(u=>{s.hide(),this.defaultLogLevelsService.setDefaultLogLevel(u.item.level)})),c.add(s.onDidAccept(u=>{p=s.selectedItems[0],s.hide()})),c.add(s.onDidHide(()=>{const u=p?p.level??p:null;c.dispose(),l(u)})),s.show()})}static isLevelSettable(e){return e.log&&e.file!==void 0&&e.id!==O&&e.id!==F}async setLogLevelForChannel(e){const i=await this.defaultLogLevelsService.getDefaultLogLevels(),o=i.extensions.find(l=>l[0]===e.extensionId?.toLowerCase())?.[1]??i.default,t=this.loggerService.getLogLevel(e.resource)??o,n=this.getLogLevelEntries(o,t,!!e.extensionId);return new Promise((l,v)=>{const c=new k,s=c.add(this.quickInputService.createQuickPick());s.placeholder=e?a.localize("selectLogLevelFor"," {0}: Select log level",e?.label):a.localize("selectLogLevel","Select log level"),s.items=n,s.activeItems=n.filter(u=>u.level===this.loggerService.getLogLevel());let p;c.add(s.onDidTriggerItemButton(u=>{s.hide(),this.defaultLogLevelsService.setDefaultLogLevel(u.item.level,e.extensionId)})),c.add(s.onDidAccept(u=>{p=s.selectedItems[0],s.hide()})),c.add(s.onDidHide(()=>{p&&this.loggerService.setLogLevel(e.resource,p.level),c.dispose(),l()})),s.show()})}getLogLevelEntries(e,i,o){const t=o?{iconClass:x.asClassName(y.checkAll),tooltip:a.localize("resetLogLevel","Set as Default Log Level")}:void 0;return[{label:this.getLabel(r.Trace,i),level:r.Trace,description:this.getDescription(r.Trace,e),buttons:t&&e!==r.Trace?[t]:void 0},{label:this.getLabel(r.Debug,i),level:r.Debug,description:this.getDescription(r.Debug,e),buttons:t&&e!==r.Debug?[t]:void 0},{label:this.getLabel(r.Info,i),level:r.Info,description:this.getDescription(r.Info,e),buttons:t&&e!==r.Info?[t]:void 0},{label:this.getLabel(r.Warning,i),level:r.Warning,description:this.getDescription(r.Warning,e),buttons:t&&e!==r.Warning?[t]:void 0},{label:this.getLabel(r.Error,i),level:r.Error,description:this.getDescription(r.Error,e),buttons:t&&e!==r.Error?[t]:void 0},{label:this.getLabel(r.Off,i),level:r.Off,description:this.getDescription(r.Off,e),buttons:t&&e!==r.Off?[t]:void 0}]}getLabel(e,i){const o=q(e).value;return e===i?`$(check) ${o}`:o}getDescription(e,i){return i===e?a.localize("default","Default"):void 0}};L=h([g(2,P),g(3,z),g(4,H),g(5,B)],L);let I=class extends f{constructor(e,i,o,t,n,l){super(e,i);this.environmentService=o;this.fileService=t;this.quickInputService=n;this.editorService=l}static ID="workbench.action.openSessionLogFile";static TITLE=a.localize2("openSessionLogFile","Open Window Log File (Session)...");async run(){const e=await this.quickInputService.pick(this.getSessions().then(i=>i.map((o,t)=>({id:o.toString(),label:S(o),description:t===0?a.localize("current","Current"):void 0}))),{canPickMany:!1,placeHolder:a.localize("sessions placeholder","Select Session")});if(e){const i=await this.quickInputService.pick(this.getLogFiles(b.parse(e.id)).then(o=>o.map(t=>({id:t.toString(),label:S(t)}))),{canPickMany:!1,placeHolder:a.localize("log placeholder","Select Log file")});if(i)return this.editorService.openEditor({resource:b.parse(i.id),options:{pinned:!0}}).then(()=>{})}}async getSessions(){const e=this.environmentService.logsHome.with({scheme:this.environmentService.logFile.scheme}),i=[e],o=await this.fileService.resolve(C(e));return o.children&&i.push(...o.children.filter(t=>!w(t.resource,e)&&t.isDirectory&&/^\d{8}T\d{6}$/.test(t.name)).sort().reverse().map(t=>t.resource)),i}async getLogFiles(e){const i=await this.fileService.resolve(e);return i.children?i.children.filter(o=>!o.isDirectory).map(o=>o.resource):[]}};I=h([g(2,U),g(3,E),g(4,P),g(5,R)],I);export{I as OpenWindowSessionLogFileAction,L as SetLogLevelAction};
