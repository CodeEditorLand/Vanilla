var S=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var v=(c,o,e,i)=>{for(var r=i>1?void 0:i?f(o,e):o,s=c.length-1,n;s>=0;s--)(n=c[s])&&(r=(i?n(o,e,r):n(r))||r);return i&&r&&S(o,e,r),r},l=(c,o)=>(e,i)=>o(e,i,c);import{Promises as a}from"../../../../base/common/async.js";import{Disposable as p}from"../../../../base/common/lifecycle.js";import{basename as h,dirname as u}from"../../../../base/common/resources.js";import{IFileService as y}from"../../../../platform/files/common/files.js";import{IWorkbenchEnvironmentService as I}from"../../../services/environment/common/environmentService.js";import{ILifecycleService as b}from"../../../services/lifecycle/common/lifecycle.js";let m=class extends p{constructor(e,i,r){super();this.environmentService=e;this.fileService=i;this.lifecycleService=r;this.cleanUpOldLogsSoon()}cleanUpOldLogsSoon(){let e=setTimeout(async()=>{e=void 0;const i=await this.fileService.resolve(u(this.environmentService.logsHome));if(i.children){const r=h(this.environmentService.logsHome),n=i.children.filter(t=>t.isDirectory&&/^\d{8}T\d{6}$/.test(t.name)).sort().filter((t,g)=>t.name!==r),d=n.slice(0,Math.max(0,n.length-49));a.settled(d.map(t=>this.fileService.del(t.resource,{recursive:!0})))}},1e4);this.lifecycleService.onWillShutdown(()=>{e&&(clearTimeout(e),e=void 0)})}};m=v([l(0,I),l(1,y),l(2,b)],m);export{m as LogsDataCleaner};
